uint64_t sub_18E0CE3B0(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  unsigned char v11[400];
  void v12[3];
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  long long v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;

  v8 = *a2;
  sub_18E0CE520((uint64_t)v11, this, (uint64_t)this, a4, a5, a6, a7, a8);
  *(void *)(v8 + 512) = cnframework::ActiveObjectBase::GetCurrentTime((cnframework::ActiveObjectBase *)v8);
  *(void *)(v8 + 520) = v9;
  v12[1] = 0;
  v12[2] = 0;
  v12[0] = &unk_1EDD141B0;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v23 = 0;
  v24 = 0;
  v22 = 0x7FF8000000000000;
  v25 = 0;
  v27 = 0;
  v26 = 0;
  v28 = 0;
  v30 = 0;
  v29 = 0;
  v31 = 0;
  v32 = 0;
  v33 = 0;
  v34 = 0x7FF8000000000000;
  v35 = 0;
  v37 = 0;
  v36 = 0;
  v38 = 0x3FF0000000000000;
  v41 = 0x400000004;
  v39 = &unk_1EDD195A8;
  v40 = xmmword_18E1F6F70;
  v42 = &v43;
  result = raven::AttitudeChangeChecker::HandleEvent(*(raven::AttitudeChangeChecker **)(v8 + 2088), (const raven::AttitudeChangeEvent *)v11, (raven::AttitudeChangeEvent *)v12);
  if (!result) {
    sub_18E0CE810();
  }
  return result;
}

uint64_t sub_18E0CE4D4(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09C70)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0CE514()
{
  return &unk_1EDD09C70;
}

double sub_18E0CE520(uint64_t a1, cnframework::GenericEvent *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t EventType = cnframework::GenericEvent::GetEventType(this, (uint64_t)this, a3, a4, a5, a6, a7, a8);
  {
    uint64_t v18 = *((void *)this + 2);
    if (v18) {
      uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 16))(v18);
    }
    else {
      uint64_t v19 = MEMORY[0x1E4FBA3D8];
    }
    v27 = (const char *)(*(void *)(v19 + 8) & 0x7FFFFFFFFFFFFFFFLL);
    if (v27 != (const char *)((unint64_t)off_1EDD05340 & 0x7FFFFFFFFFFFFFFFLL)
      && strcmp(v27, (const char *)((unint64_t)off_1EDD05340 & 0x7FFFFFFFFFFFFFFFLL)))
    {
      v40.__vftable = 0;
      std::bad_cast::bad_cast(&v40);
      v40.__vftable = (std::bad_cast_vtbl *)&unk_1EDD12A18;
      sub_18E0BA8B8();
    }
    v28 = (_OWORD *)*((void *)this + 2);
    *(void *)a1 = &unk_1EDD141B0;
    long long v29 = v28[1];
    long long v30 = v28[2];
    long long v31 = v28[3];
    *(_OWORD *)(a1 + 56) = v28[4];
    *(_OWORD *)(a1 + 40) = v31;
    *(_OWORD *)(a1 + 24) = v30;
    *(_OWORD *)(a1 + 8) = v29;
    long long v32 = v28[5];
    long long v33 = v28[6];
    long long v34 = v28[7];
    *(_OWORD *)(a1 + 120) = v28[8];
    *(_OWORD *)(a1 + 104) = v34;
    *(_OWORD *)(a1 + 88) = v33;
    *(_OWORD *)(a1 + 72) = v32;
    long long v35 = v28[9];
    long long v36 = v28[10];
    long long v37 = v28[11];
    *(_OWORD *)(a1 + 184) = v28[12];
    *(_OWORD *)(a1 + 168) = v37;
    *(_OWORD *)(a1 + 152) = v36;
    *(_OWORD *)(a1 + 136) = v35;
    *(_OWORD *)(a1 + 200) = 0u;
    *(_OWORD *)(a1 + 216) = 0u;
    if ((_OWORD *)a1 != (_OWORD *)((char *)v28 + 8))
    {
      *(_OWORD *)(a1 + 200) = v28[13];
      *(_OWORD *)(a1 + 216) = v28[14];
    }
    *(void *)&double result = sub_18E096528(a1 + 232, (uint64_t)(v28 + 15)).n128_u64[0];
  }
  else
  {
    __int16 v39 = 3;
    unsigned __int8 v38 = 5;
    uint64_t v20 = cnframework::GenericEvent::GetEventType(this, v11, v12, v13, v14, v15, v16, v17);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v39, &v38, "Attempted to cast a GenericEvent of type %s to type %s.", v21, v22, v23, v24, v25, *(unsigned char *)(v20 + 8));
    *(void *)(a1 + 392) = 0;
    *(_OWORD *)(a1 + 248) = 0u;
    *(_OWORD *)(a1 + 216) = 0u;
    *(_OWORD *)(a1 + 200) = 0u;
    *(_OWORD *)(a1 + 184) = 0u;
    *(_OWORD *)(a1 + 168) = 0u;
    *(_OWORD *)(a1 + 152) = 0u;
    *(_OWORD *)(a1 + 136) = 0u;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 360) = 0u;
    *(_OWORD *)(a1 + 376) = 0u;
    *(_OWORD *)(a1 + 328) = 0u;
    *(_OWORD *)(a1 + 344) = 0u;
    *(_OWORD *)(a1 + 296) = 0u;
    *(_OWORD *)(a1 + 312) = 0u;
    *(_OWORD *)(a1 + 264) = 0u;
    *(_OWORD *)(a1 + 280) = 0u;
    *(_OWORD *)(a1 + 232) = 0u;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = &unk_1EDD141B0;
    *(unsigned char *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    *(unsigned char *)(a1 + 48) = 0;
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
    *(unsigned char *)(a1 + 72) = 0;
    *(void *)(a1 + 80) = 0;
    *(void *)(a1 + 88) = 0;
    *(void *)(a1 + 104) = 0;
    *(void *)(a1 + 112) = 0;
    *(void *)(a1 + 96) = 0x7FF8000000000000;
    *(unsigned char *)(a1 + 120) = 0;
    *(void *)(a1 + 128) = 0;
    *(void *)(a1 + 136) = 0;
    *(unsigned char *)(a1 + 144) = 0;
    *(void *)(a1 + 152) = 0;
    *(void *)(a1 + 160) = 0;
    *(unsigned char *)(a1 + 168) = 0;
    *(void *)(a1 + 176) = 0;
    *(void *)(a1 + 184) = 0;
    *(void *)(a1 + 192) = 0x7FF8000000000000;
    *(void *)(a1 + 200) = 0;
    *(void *)(a1 + 208) = 0;
    *(void *)(a1 + 216) = 0;
    *(void *)(a1 + 224) = 0x3FF0000000000000;
    *(void *)(a1 + 256) = 0x400000004;
    *(void *)(a1 + 232) = &unk_1EDD195A8;
    *(void *)&double result = 0x400000004;
    *(_OWORD *)(a1 + 240) = xmmword_18E1F6F70;
    *(void *)(a1 + 264) = a1 + 272;
  }
  return result;
}

void sub_18E0CE7FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::exception a12)
{
}

void sub_18E0CE810()
{
}

void sub_18E0CE8A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a11) {
    sub_18DEE4E18(a11);
  }
  if (a13) {
    sub_18DEE4E18(a13);
  }
  _Unwind_Resume(exception_object);
}

void sub_18E0CE8C8()
{
  v0 = operator new(0x60uLL);
  sub_18E0CE924(v0);
}

void sub_18E0CE910(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_18E0CE924(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1EDD1E458;
  sub_18E0CE980((uint64_t)(a1 + 3));
}

void sub_18E0CE96C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_18E0CE980(uint64_t a1)
{
  *(void *)a1 = &unk_1EDD0A260;
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  uint64_t v2 = MEMORY[0x1E4FBA3D8];
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = v2;
  sub_18DEDE7B0((void *)(a1 + 48), "");
  *(unsigned char *)(a1 + 8) = 1;
  sub_18E0CEB18();
}

void sub_18E0CEAC0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 71) < 0) {
    operator delete(*v3);
  }
  if (*v2) {
    (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_18E0CEB18()
{
}

void sub_18E0CEB84()
{
}

void sub_18E0CEBDC(_Unwind_Exception *a1)
{
  MEMORY[0x192FA6240](v1, 0x1081C40D5D9C317);
  _Unwind_Resume(a1);
}

uint64_t sub_18E0CEC00(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1EDD12F68;
  *(void *)(a1 + 8) = &unk_1EDD141B0;
  long long v3 = *(_OWORD *)(a2 + 8);
  long long v4 = *(_OWORD *)(a2 + 24);
  long long v5 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  long long v6 = *(_OWORD *)(a2 + 72);
  long long v7 = *(_OWORD *)(a2 + 88);
  long long v8 = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  long long v9 = *(_OWORD *)(a2 + 136);
  long long v10 = *(_OWORD *)(a2 + 152);
  long long v11 = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 192) = v11;
  *(_OWORD *)(a1 + 144) = v9;
  *(_OWORD *)(a1 + 160) = v10;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  if (a1 + 8 != a2)
  {
    *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 200);
    *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 216);
  }
  sub_18E096528(a1 + 240, a2 + 232);
  return a1;
}

uint64_t sub_18E0CECD4(uint64_t result)
{
  *(void *)(result + 8) = &unk_1EDD141B0;
  *(void *)(result + 240) = &unk_1EDD17478;
  return result;
}

void sub_18E0CED18(uint64_t a1)
{
  *(void *)(a1 + 8) = &unk_1EDD141B0;
  *(void *)(a1 + 240) = &unk_1EDD17478;
  JUMPOUT(0x192FA6240);
}

void *sub_18E0CED6C()
{
}

void sub_18E0CED78()
{
}

void sub_18E0CEDC0(_Unwind_Exception *a1)
{
  MEMORY[0x192FA6240](v1, 0x1081C40D5D9C317);
  _Unwind_Resume(a1);
}

void sub_18E0CEDE8()
{
}

void *sub_18E0CEDFC()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1EDD1C840;
  return result;
}

void sub_18E0CEE34(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1C840;
}

void sub_18E0CEE5C(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  sub_18E0BF728((uint64_t)v10, this, (uint64_t)this, a4, a5, a6, a7, a8);
  *(void *)(v8 + 512) = cnframework::ActiveObjectBase::GetCurrentTime((cnframework::ActiveObjectBase *)v8);
  *(void *)(v8 + 520) = v9;
  char v14 = 0;
  char v15 = 0;
  char v16 = 0;
  char v17 = 0;
  char v18 = 0;
  char v19 = 0;
  char v20 = 0;
  memset(v21, 0, sizeof(v21));
  int v22 = 0;
  v12[1] = 0;
  v12[2] = 0;
  v12[0] = (void **)&unk_1EDD154D0;
  char v13 = 0;
  if (!raven::GNSSPreprocessedMeasurementsChecker::HandleEvent(*(raven::GNSSPreprocessedMeasurementsChecker **)(v8 + 2096), (const raven::GnssPreprocessedMeasurementsEvent *)v10, (raven::GnssPreprocessedMeasurementsEvent *)v12))sub_18DFF76F0(); {
  v12[0] = (void **)&unk_1EDD154D0;
  }
  uint64_t v23 = (void **)&v21[4];
  sub_18DEE4B60(&v23);
  v10[0] = &unk_1EDD154D0;
  v12[0] = (void **)&v11;
  sub_18DEE4B60(v12);
}

void sub_18E0CEF68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void **a25)
{
  a25 = (void **)&a22;
  sub_18DEE4B60(&a25);
  _Unwind_Resume(a1);
}

uint64_t sub_18E0CEFC4(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09CF0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0CF004()
{
  return &unk_1EDD09CF0;
}

void sub_18E0CF014()
{
}

void *sub_18E0CF028()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1EDD1C058;
  return result;
}

void sub_18E0CF060(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1C058;
}

void sub_18E0CF088(int a1, cnframework::ActiveObjectBase **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  sub_18E0C7A18((uint64_t)&v10, this, (uint64_t)this, a4, a5, a6, a7, a8);
  *((void *)v8 + 64) = cnframework::ActiveObjectBase::GetCurrentTime(v8);
  *((void *)v8 + 65) = v9;
  sub_18E0CF124();
}

uint64_t sub_18E0CF0D8(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09B80)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0CF118()
{
  return &unk_1EDD09B80;
}

void sub_18E0CF124()
{
}

void sub_18E0CF1B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a11) {
    sub_18DEE4E18(a11);
  }
  if (a13) {
    sub_18DEE4E18(a13);
  }
  _Unwind_Resume(exception_object);
}

void sub_18E0CF1DC()
{
  v0 = operator new(0x60uLL);
  sub_18E0CF238(v0);
}

void sub_18E0CF224(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_18E0CF238(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1EDD1E458;
  sub_18E0CF294((uint64_t)(a1 + 3));
}

void sub_18E0CF280(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_18E0CF294(uint64_t a1)
{
  *(void *)a1 = &unk_1EDD0A260;
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  uint64_t v2 = MEMORY[0x1E4FBA3D8];
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = v2;
  sub_18DEDE7B0((void *)(a1 + 48), "");
  *(unsigned char *)(a1 + 8) = 1;
  sub_18E0CF42C();
}

void sub_18E0CF3D4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 71) < 0) {
    operator delete(*v3);
  }
  if (*v2) {
    (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_18E0CF42C()
{
}

void sub_18E0CF498()
{
}

void sub_18E0CF4F0(_Unwind_Exception *a1)
{
  MEMORY[0x192FA6240](v1, 0x1081C4076F09DFELL);
  _Unwind_Resume(a1);
}

__n128 sub_18E0CF514(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1EDD12B48;
  *(void *)(a1 + 8) = &unk_1EDD13760;
  long long v2 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 32) = v2;
  long long v3 = *(_OWORD *)(a2 + 40);
  long long v4 = *(_OWORD *)(a2 + 56);
  long long v5 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 96) = v5;
  *(_OWORD *)(a1 + 48) = v3;
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  if (a1 + 8 != a2)
  {
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 120);
  }
  long long v6 = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 160) = v6;
  __n128 result = *(__n128 *)(a2 + 168);
  long long v8 = *(_OWORD *)(a2 + 184);
  long long v9 = *(_OWORD *)(a2 + 200);
  *(_WORD *)(a1 + 224) = *(_WORD *)(a2 + 216);
  *(_OWORD *)(a1 + 192) = v8;
  *(_OWORD *)(a1 + 208) = v9;
  *(__n128 *)(a1 + 176) = result;
  return result;
}

void sub_18E0CF5C4()
{
}

void *sub_18E0CF5D8()
{
}

void sub_18E0CF5E4()
{
}

void sub_18E0CF62C(_Unwind_Exception *a1)
{
  MEMORY[0x192FA6240](v1, 0x1081C4076F09DFELL);
  _Unwind_Resume(a1);
}

void sub_18E0CF654()
{
}

void *sub_18E0CF668()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1EDD1C5D8;
  return result;
}

void sub_18E0CF6A0(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1C5D8;
}

void sub_18E0CF6C8(int a1, cnframework::ActiveObjectBase **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  long long v8 = *a2;
  sub_18E0BC96C((uint64_t)&v10, this, (uint64_t)this, a4, a5, a6, a7, a8);
  *((void *)v8 + 64) = cnframework::ActiveObjectBase::GetCurrentTime(v8);
  *((void *)v8 + 65) = v9;
  sub_18E0CF7F0();
}

void sub_18E0CF780(_Unwind_Exception *exception_object)
{
  long long v4 = *(std::__shared_weak_count **)(v2 - 56);
  if (v4) {
    sub_18DEE4E18(v4);
  }
  if (v1) {
    sub_18DEE4E18(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_18E0CF7A4(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09C80)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0CF7E4()
{
  return &unk_1EDD09C80;
}

void sub_18E0CF7F0()
{
  v0 = operator new(0x60uLL);
  v0[1] = 0;
  v0[2] = 0;
  void *v0 = &unk_1EDD1E458;
  v0[3] = &unk_1EDD0A260;
  uint64_t v1 = MEMORY[0x1E4FBA3D8];
  *((unsigned char *)v0 + 32) = 0;
  v0[5] = 0;
  v0[6] = v1;
  v0[7] = 0;
  v0[8] = 0;
  sub_18DEDE7B0(v0 + 9, "");
  *((unsigned char *)v0 + 32) = 1;
  operator new();
}

void sub_18E0CFA2C(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 95) < 0) {
    operator delete(*v2);
  }
  uint64_t v4 = *(void *)(v1 + 40);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v1);
  operator delete(v5);
  _Unwind_Resume(a1);
}

void sub_18E0CFA94()
{
}

void *sub_18E0CFAA8()
{
}

void sub_18E0CFAB4()
{
}

void sub_18E0CFB64()
{
}

void *sub_18E0CFB78()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1EDD1C210;
  return result;
}

void sub_18E0CFBB0(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1C210;
}

uint64_t sub_18E0CFBD8(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  sub_18E0BFBBC((uint64_t)v11, this, (uint64_t)this, a4, a5, a6, a7, a8);
  *(void *)(v8 + 512) = cnframework::ActiveObjectBase::GetCurrentTime((cnframework::ActiveObjectBase *)v8);
  *(void *)(v8 + 520) = v9;
  v12[1] = 0;
  v12[2] = 0;
  v12[0] = &unk_1EDD138E0;
  char v13 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  char v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  char v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  uint64_t v22 = 0x7FF8000000000000;
  char v25 = 0;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  char v28 = 0;
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  char v31 = 0;
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  int64x2_t v34 = vdupq_n_s64(0x7FF8000000000000uLL);
  int64x2_t v35 = v34;
  int64x2_t v36 = v34;
  int64x2_t v37 = v34;
  int64x2_t v38 = v34;
  int v39 = 0;
  uint64_t result = raven::MapVectorChecker::HandleEvent(*(raven::MapVectorChecker **)(v8 + 2104), (const raven::MapVectorEvent *)v11, (raven::MapVectorEvent *)v12);
  if (!result) {
    sub_18E0CFD04();
  }
  return result;
}

uint64_t sub_18E0CFCB8(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09BD0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0CFCF8()
{
  return &unk_1EDD09BD0;
}

void sub_18E0CFD04()
{
}

void sub_18E0CFD98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a11) {
    sub_18DEE4E18(a11);
  }
  if (a13) {
    sub_18DEE4E18(a13);
  }
  _Unwind_Resume(exception_object);
}

void sub_18E0CFDBC()
{
  v0 = operator new(0x60uLL);
  sub_18E0CFE18(v0);
}

void sub_18E0CFE04(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_18E0CFE18(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1EDD1E458;
  sub_18E0CFE74((uint64_t)(a1 + 3));
}

void sub_18E0CFE60(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_18E0CFE74(uint64_t a1)
{
  *(void *)a1 = &unk_1EDD0A260;
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  uint64_t v2 = MEMORY[0x1E4FBA3D8];
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = v2;
  sub_18DEDE7B0((void *)(a1 + 48), "");
  *(unsigned char *)(a1 + 8) = 1;
  sub_18E0D000C();
}

void sub_18E0CFFB4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 71) < 0) {
    operator delete(*v3);
  }
  if (*v2) {
    (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_18E0D000C()
{
}

void sub_18E0D00D8()
{
}

void *sub_18E0D00EC()
{
}

void sub_18E0D00F8()
{
}

void sub_18E0D0188()
{
}

void *sub_18E0D019C()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EDD1C318;
  return result;
}

void sub_18E0D01D4(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1C318;
}

uint64_t sub_18E0D01FC(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  sub_18E0C0078((uint64_t)v11, this, (uint64_t)this, a4, a5, a6, a7, a8);
  *(void *)(v8 + 512) = cnframework::ActiveObjectBase::GetCurrentTime((cnframework::ActiveObjectBase *)v8);
  *(void *)(v8 + 520) = v9;
  v12[1] = 0;
  v12[2] = 0;
  v12[0] = &unk_1EDD13AA8;
  char v13 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  char v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  char v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0x7FF8000000000000;
  char v23 = 0;
  uint64_t v24 = 0x3FF0000000000000;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  uint64_t result = raven::MountStateChecker::HandleEvent(*(raven::MountStateChecker **)(v8 + 2112), (const raven::MountStateEvent *)v11, (raven::MountStateEvent *)v12);
  if (!result) {
    sub_18E0D0300();
  }
  return result;
}

uint64_t sub_18E0D02B4(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09C00)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0D02F4()
{
  return &unk_1EDD09C00;
}

void sub_18E0D0300()
{
}

void sub_18E0D0390(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_18DEE4E18(a10);
  }
  if (v10) {
    sub_18DEE4E18(v10);
  }
  _Unwind_Resume(exception_object);
}

void sub_18E0D03B4()
{
  v0 = operator new(0x60uLL);
  v0[1] = 0;
  v0[2] = 0;
  void *v0 = &unk_1EDD1E458;
  v0[3] = &unk_1EDD0A260;
  uint64_t v1 = MEMORY[0x1E4FBA3D8];
  *((unsigned char *)v0 + 32) = 0;
  v0[5] = 0;
  v0[6] = v1;
  v0[7] = 0;
  v0[8] = 0;
  sub_18DEDE7B0(v0 + 9, "");
  *((unsigned char *)v0 + 32) = 1;
  operator new();
}

void sub_18E0D05D8(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 95) < 0) {
    operator delete(*v2);
  }
  uint64_t v4 = *(void *)(v1 + 40);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v1);
  operator delete(v5);
  _Unwind_Resume(a1);
}

void sub_18E0D0640()
{
}

void *sub_18E0D0654()
{
}

void sub_18E0D0660()
{
}

void sub_18E0D0700()
{
}

void *sub_18E0D0714()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EDD1C370;
  return result;
}

void sub_18E0D074C(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1C370;
}

uint64_t sub_18E0D0774(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  sub_18E0C04F4((uint64_t)v11, this, (uint64_t)this, a4, a5, a6, a7, a8);
  *(void *)(v8 + 512) = cnframework::ActiveObjectBase::GetCurrentTime((cnframework::ActiveObjectBase *)v8);
  *(void *)(v8 + 520) = v9;
  v12[1] = 0;
  v12[2] = 0;
  v12[0] = &unk_1EDD13CF0;
  char v13 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  char v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  char v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0x7FF8000000000000;
  char v23 = 0;
  uint64_t v24 = 0x3FF0000000000000;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  uint64_t result = raven::MovingStateChecker::HandleEvent(*(raven::MovingStateChecker **)(v8 + 2120), (const raven::MovingStateEvent *)v11, (raven::MovingStateEvent *)v12);
  if (!result) {
    sub_18E0D0878();
  }
  return result;
}

uint64_t sub_18E0D082C(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09C10)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0D086C()
{
  return &unk_1EDD09C10;
}

void sub_18E0D0878()
{
}

void sub_18E0D090C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a11) {
    sub_18DEE4E18(a11);
  }
  if (a13) {
    sub_18DEE4E18(a13);
  }
  _Unwind_Resume(exception_object);
}

void sub_18E0D0930()
{
  v0 = operator new(0x60uLL);
  sub_18E0D098C(v0);
}

void sub_18E0D0978(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_18E0D098C(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1EDD1E458;
  sub_18E0D09E8((uint64_t)(a1 + 3));
}

void sub_18E0D09D4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_18E0D09E8(uint64_t a1)
{
  *(void *)a1 = &unk_1EDD0A260;
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  uint64_t v2 = MEMORY[0x1E4FBA3D8];
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = v2;
  sub_18DEDE7B0((void *)(a1 + 48), "");
  *(unsigned char *)(a1 + 8) = 1;
  sub_18E0D0B80();
}

void sub_18E0D0B28(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 71) < 0) {
    operator delete(*v3);
  }
  if (*v2) {
    (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_18E0D0B80()
{
}

void sub_18E0D0C6C()
{
}

void *sub_18E0D0C80()
{
}

void sub_18E0D0C8C()
{
}

void sub_18E0D0D2C()
{
}

void *sub_18E0D0D40()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EDD1C898;
  return result;
}

void sub_18E0D0D78(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1C898;
}

void sub_18E0D0DA0(int a1, cnframework::ActiveObjectBase **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  sub_18E0D0E3C((uint64_t)v10, this, (uint64_t)this, a4, a5, a6, a7, a8);
  *((void *)v8 + 64) = cnframework::ActiveObjectBase::GetCurrentTime(v8);
  *((void *)v8 + 65) = v9;
  sub_18E0D1024();
}

uint64_t sub_18E0D0DF0(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09D00)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0D0E30()
{
  return &unk_1EDD09D00;
}

__n128 sub_18E0D0E3C(uint64_t a1, cnframework::GenericEvent *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t EventType = cnframework::GenericEvent::GetEventType(this, (uint64_t)this, a3, a4, a5, a6, a7, a8);
  {
    uint64_t v18 = *((void *)this + 2);
    if (v18) {
      uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 16))(v18);
    }
    else {
      uint64_t v19 = MEMORY[0x1E4FBA3D8];
    }
    uint64_t v27 = (const char *)(*(void *)(v19 + 8) & 0x7FFFFFFFFFFFFFFFLL);
    if (v27 != (const char *)((unint64_t)off_1EDD05D98 & 0x7FFFFFFFFFFFFFFFLL))
    {
      if (strcmp(v27, (const char *)((unint64_t)off_1EDD05D98 & 0x7FFFFFFFFFFFFFFFLL)))
      {
        v36.__vftable = 0;
        std::bad_cast::bad_cast(&v36);
        v36.__vftable = (std::bad_cast_vtbl *)&unk_1EDD12A18;
        sub_18E0BA8B8();
      }
    }
    uint64_t v28 = *((void *)this + 2);
    *(void *)a1 = &unk_1EDD15838;
    long long v29 = *(_OWORD *)(v28 + 48);
    long long v30 = *(_OWORD *)(v28 + 64);
    long long v31 = *(_OWORD *)(v28 + 32);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(v28 + 16);
    *(_OWORD *)(a1 + 56) = v30;
    *(_OWORD *)(a1 + 40) = v29;
    *(_OWORD *)(a1 + 24) = v31;
    __n128 result = *(__n128 *)(v28 + 112);
    long long v32 = *(_OWORD *)(v28 + 128);
    long long v33 = *(_OWORD *)(v28 + 96);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(v28 + 80);
    *(_OWORD *)(a1 + 120) = v32;
    *(__n128 *)(a1 + 104) = result;
    *(_OWORD *)(a1 + 88) = v33;
  }
  else
  {
    __int16 v35 = 3;
    unsigned __int8 v34 = 5;
    uint64_t v20 = cnframework::GenericEvent::GetEventType(this, v11, v12, v13, v14, v15, v16, v17);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v35, &v34, "Attempted to cast a GenericEvent of type %s to type %s.", v21, v22, v23, v24, v25, *(unsigned char *)(v20 + 8));
    result.n128_u64[0] = 0;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = &unk_1EDD15838;
    *(unsigned char *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    *(unsigned char *)(a1 + 48) = 0;
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
    *(unsigned char *)(a1 + 72) = 0;
    *(void *)(a1 + 80) = 0;
    *(void *)(a1 + 88) = 0;
    *(void *)(a1 + 96) = 0x7FF8000000000000;
  }
  return result;
}

void sub_18E0D1010(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::exception a12)
{
}

void sub_18E0D1024()
{
}

void sub_18E0D10B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a11) {
    sub_18DEE4E18(a11);
  }
  if (a13) {
    sub_18DEE4E18(a13);
  }
  _Unwind_Resume(exception_object);
}

void sub_18E0D10DC()
{
  v0 = operator new(0x60uLL);
  sub_18E0D1138(v0);
}

void sub_18E0D1124(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_18E0D1138(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1EDD1E458;
  sub_18E0D1194((uint64_t)(a1 + 3));
}

void sub_18E0D1180(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_18E0D1194(uint64_t a1)
{
  *(void *)a1 = &unk_1EDD0A260;
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  uint64_t v2 = MEMORY[0x1E4FBA3D8];
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = v2;
  sub_18DEDE7B0((void *)(a1 + 48), "");
  *(unsigned char *)(a1 + 8) = 1;
  sub_18E0D132C();
}

void sub_18E0D12D4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 71) < 0) {
    operator delete(*v3);
  }
  if (*v2) {
    (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_18E0D132C()
{
}

void sub_18E0D1410()
{
}

void *sub_18E0D1424()
{
}

void sub_18E0D1430()
{
}

void sub_18E0D14C8()
{
}

void *sub_18E0D14DC()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1EDD1C0B0;
  return result;
}

void sub_18E0D1514(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1C0B0;
}

uint64_t sub_18E0D153C(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  sub_18E0C0970((uint64_t)v13, this, (uint64_t)this, a4, a5, a6, a7, a8);
  *(void *)(v8 + 512) = cnframework::ActiveObjectBase::GetCurrentTime((cnframework::ActiveObjectBase *)v8);
  *(void *)(v8 + 520) = v9;
  v14[1] = 0;
  v14[2] = 0;
  v14[0] = &unk_1EDD13790;
  char v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  char v18 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  char v21 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  uint64_t v24 = 0x7FF8000000000000;
  char v27 = 0;
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  char v30 = 0;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  char v33 = 0;
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  uint64_t v36 = 0x7FF8000000000000;
  uint64_t result = raven::OdometerChecker::HandleEvent(*(raven::OdometerChecker **)(v8 + 2128), (const raven::OdometerEvent *)v13, (raven::OdometerEvent *)v14);
  if (!result)
  {
    uint64_t v11 = operator new(0x60uLL);
    v11[1] = 0;
    v11[2] = 0;
    *uint64_t v11 = &unk_1EDD1E458;
    v11[3] = &unk_1EDD0A260;
    uint64_t v12 = MEMORY[0x1E4FBA3D8];
    *((unsigned char *)v11 + 32) = 0;
    v11[5] = 0;
    v11[6] = v12;
    v11[7] = 0;
    v11[8] = 0;
    sub_18DEDE7B0(v11 + 9, "");
    *((unsigned char *)v11 + 32) = 1;
    operator new();
  }
  return result;
}

void sub_18E0D1848(_Unwind_Exception *a1)
{
  uint64_t v4 = *(std::__shared_weak_count **)(v2 - 64);
  if (v4) {
    sub_18DEE4E18(v4);
  }
  sub_18DEE4E18(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_18E0D18C8(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09B90)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0D1908()
{
  return &unk_1EDD09B90;
}

void sub_18E0D1918()
{
}

void *sub_18E0D192C()
{
}

void sub_18E0D1938()
{
}

void sub_18E0D19E8()
{
}

void *sub_18E0D19FC()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EDD1C108;
  return result;
}

void sub_18E0D1A34(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1C108;
}

uint64_t sub_18E0D1A5C(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  sub_18E0C1834((uint64_t)v11, this, (uint64_t)this, a4, a5, a6, a7, a8);
  *(void *)(v8 + 512) = cnframework::ActiveObjectBase::GetCurrentTime((cnframework::ActiveObjectBase *)v8);
  *(void *)(v8 + 520) = v9;
  v12[1] = 0;
  v12[2] = 0;
  v12[0] = &unk_1EDD137C0;
  char v13 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  char v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  char v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  uint64_t v22 = 0x7FF8000000000000;
  char v25 = 0;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  char v28 = 0;
  uint64_t v30 = 0;
  uint64_t v29 = 0;
  char v31 = 0;
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  uint64_t v34 = 0x7FF8000000000000;
  __int16 v35 = 0;
  char v36 = 0;
  int64x2_t v37 = vdupq_n_s64(0x7FF8000000000000uLL);
  int64x2_t v38 = v37;
  int64x2_t v39 = v37;
  int64x2_t v40 = v37;
  uint64_t v41 = 0x7FF8000000000000;
  char v42 = 0;
  int64x2_t v43 = v37;
  int64x2_t v44 = v37;
  int64x2_t v45 = v37;
  int64x2_t v46 = v37;
  uint64_t v47 = 0x7FF8000000000000;
  uint64_t result = raven::RavenIntegrityEstimator::HandleEvent((raven::PositionChecker **)(v8 + 496), (const raven::PositionEvent *)v11, (raven::PositionEvent *)v12);
  if (!result) {
    sub_18E0D1BAC();
  }
  return result;
}

uint64_t sub_18E0D1B60(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09BA0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0D1BA0()
{
  return &unk_1EDD09BA0;
}

void sub_18E0D1BAC()
{
}

void sub_18E0D1C40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a11) {
    sub_18DEE4E18(a11);
  }
  if (a13) {
    sub_18DEE4E18(a13);
  }
  _Unwind_Resume(exception_object);
}

void sub_18E0D1C64()
{
  v0 = operator new(0x60uLL);
  sub_18E0D1CC0(v0);
}

void sub_18E0D1CAC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_18E0D1CC0(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1EDD1E458;
  sub_18E0D1D1C((uint64_t)(a1 + 3));
}

void sub_18E0D1D08(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_18E0D1D1C(uint64_t a1)
{
  *(void *)a1 = &unk_1EDD0A260;
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  uint64_t v2 = MEMORY[0x1E4FBA3D8];
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = v2;
  sub_18DEDE7B0((void *)(a1 + 48), "");
  *(unsigned char *)(a1 + 8) = 1;
  sub_18E0D1EB4();
}

void sub_18E0D1E5C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 71) < 0) {
    operator delete(*v3);
  }
  if (*v2) {
    (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_18E0D1EB4()
{
}

void sub_18E0D1F80()
{
}

void *sub_18E0D1F94()
{
}

void sub_18E0D1FA0()
{
}

void sub_18E0D2030()
{
}

void *sub_18E0D2044()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EDD1C630;
  return result;
}

void sub_18E0D207C(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1C630;
}

uint64_t sub_18E0D20A4(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  sub_18E0C0E30((uint64_t)v11, this, (uint64_t)this, a4, a5, a6, a7, a8);
  *(void *)(v8 + 512) = cnframework::ActiveObjectBase::GetCurrentTime((cnframework::ActiveObjectBase *)v8);
  *(void *)(v8 + 520) = v9;
  v12[1] = 0;
  v12[2] = 0;
  v12[0] = &unk_1EDD14210;
  char v13 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  char v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  char v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  uint64_t v22 = 0x7FF8000000000000;
  char v25 = 0;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  char v28 = 0;
  uint64_t v30 = 0;
  uint64_t v29 = 0;
  char v31 = 0;
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  uint64_t v34 = 0x7FF8000000000000;
  uint64_t v37 = 0x100000003;
  long long v36 = xmmword_18E1F6F60;
  __int16 v35 = &unk_1EDD18D98;
  int64x2_t v38 = v39;
  uint64_t v41 = 0x300000003;
  long long v40 = xmmword_18E1F0010;
  v39[3] = &unk_1EDD18EE8;
  char v42 = &v43;
  uint64_t result = raven::PositionChangeChecker::HandleEvent(*(raven::PositionChangeChecker **)(v8 + 2136), (const raven::PositionChangeEvent *)v11, (raven::PositionChangeEvent *)v12);
  if (!result) {
    sub_18E0D2244();
  }
  return result;
}

uint64_t sub_18E0D21F8(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09C90)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0D2238()
{
  return &unk_1EDD09C90;
}

void sub_18E0D2244()
{
}

void sub_18E0D22D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a11) {
    sub_18DEE4E18(a11);
  }
  if (a13) {
    sub_18DEE4E18(a13);
  }
  _Unwind_Resume(exception_object);
}

void sub_18E0D22FC()
{
  v0 = operator new(0x60uLL);
  sub_18E0D2358(v0);
}

void sub_18E0D2344(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_18E0D2358(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1EDD1E458;
  sub_18E0D23B4((uint64_t)(a1 + 3));
}

void sub_18E0D23A0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_18E0D23B4(uint64_t a1)
{
  *(void *)a1 = &unk_1EDD0A260;
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  uint64_t v2 = MEMORY[0x1E4FBA3D8];
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = v2;
  sub_18DEDE7B0((void *)(a1 + 48), "");
  *(unsigned char *)(a1 + 8) = 1;
  sub_18E0D254C();
}

void sub_18E0D24F4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 71) < 0) {
    operator delete(*v3);
  }
  if (*v2) {
    (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_18E0D254C()
{
}

void sub_18E0D25B8()
{
}

void sub_18E0D2610(_Unwind_Exception *a1)
{
  MEMORY[0x192FA6240](v1, 0x1081C40D89AA4CDLL);
  _Unwind_Resume(a1);
}

uint64_t sub_18E0D2634(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1EDD12FC8;
  *(void *)(a1 + 8) = &unk_1EDD14210;
  long long v4 = *(_OWORD *)(a2 + 8);
  long long v5 = *(_OWORD *)(a2 + 24);
  long long v6 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 64) = v6;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = v5;
  long long v7 = *(_OWORD *)(a2 + 72);
  long long v8 = *(_OWORD *)(a2 + 88);
  long long v9 = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 128) = v9;
  *(_OWORD *)(a1 + 80) = v7;
  *(_OWORD *)(a1 + 96) = v8;
  long long v10 = *(_OWORD *)(a2 + 136);
  long long v11 = *(_OWORD *)(a2 + 152);
  long long v12 = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 192) = v12;
  *(_OWORD *)(a1 + 144) = v10;
  *(_OWORD *)(a1 + 160) = v11;
  sub_18DFF2980(a1 + 208, a2 + 200);
  sub_18DFE2FA8(a1 + 272, a2 + 264);
  return a1;
}

void sub_18E0D2704(_Unwind_Exception *a1)
{
  void *v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

void *sub_18E0D2724(void *result)
{
  result[1] = &unk_1EDD14210;
  result[34] = &unk_1EDD17478;
  result[26] = &unk_1EDD17478;
  return result;
}

void sub_18E0D2788(void *a1)
{
  a1[1] = &unk_1EDD14210;
  a1[34] = &unk_1EDD17478;
  a1[26] = &unk_1EDD17478;
  JUMPOUT(0x192FA6240);
}

void *sub_18E0D27FC()
{
}

void sub_18E0D2808()
{
}

void sub_18E0D2850(_Unwind_Exception *a1)
{
  MEMORY[0x192FA6240](v1, 0x1081C40D89AA4CDLL);
  _Unwind_Resume(a1);
}

void sub_18E0D2878()
{
}

void *sub_18E0D288C()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EDD1C6E0;
  return result;
}

void sub_18E0D28C4(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1C6E0;
}

void sub_18E0D28EC(int a1, void **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  long long v8 = *a2;
  sub_18E0C25B0((uint64_t)v18, this, (uint64_t)this, a4, a5, a6, a7, a8);
  v8[64] = cnframework::ActiveObjectBase::GetCurrentTime((cnframework::ActiveObjectBase *)v8);
  v8[65] = v9;
  if (raven::RavenIntegrityEstimator::HandleEvent((raven::RavenIntegrityEstimator *)(v8 + 62), (const raven::SignalEnvironmentEvent *)v18))
  {
    __int16 v22 = 12;
    unsigned __int8 v21 = 2;
    uint64_t v10 = (*(uint64_t (**)(void *))(v18[0] + 16))(v18);
    double v12 = v11 + (double)v10;
    (*(void (**)(void **__return_ptr, void *))(v18[0] + 24))(&v19, v18);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v22, &v21, "t,%.3lf,IE failed to handle %s", v13, v14, v15, v16, v17, SLOBYTE(v12));
    if (v20 < 0) {
      operator delete(v19);
    }
  }
}

void sub_18E0D2A08(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 57) < 0) {
    operator delete(*(void **)(v1 - 80));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_18E0D2A24(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09CB0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0D2A64()
{
  return &unk_1EDD09CB0;
}

void sub_18E0D2A74()
{
}

void *sub_18E0D2A88()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EDD1C790;
  return result;
}

void sub_18E0D2AC0(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1C790;
}

double sub_18E0D2AE8(int a1, void **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  long long v8 = *a2;
  sub_18E0D2C94((uint64_t)v12, this, (uint64_t)this, a4, a5, a6, a7, a8);
  v8[64] = cnframework::ActiveObjectBase::GetCurrentTime((cnframework::ActiveObjectBase *)v8);
  v8[65] = v9;
  v13[1] = 0;
  v13[2] = 0;
  v13[0] = &unk_1EDD14EE0;
  char v14 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  char v17 = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  char v20 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  uint64_t v23 = 0x7FF8000000000000;
  char v26 = 0;
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  char v29 = 0;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  char v32 = 0;
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  int64x2_t v35 = vdupq_n_s64(0x7FF8000000000000uLL);
  int64x2_t v36 = v35;
  int v37 = 0;
  *(void *)&double result = raven::RavenIntegrityEstimator::HandleEvent((raven::RavenIntegrityEstimator *)(v8 + 62), (const raven::TunnelBridgeNotificationEvent *)v12, (raven::TunnelBridgeNotificationEvent *)v13).n128_u64[0];
  if (!v11) {
    sub_18E0D2EE0();
  }
  return result;
}

void sub_18E0D2C24(_Unwind_Exception *exception_object)
{
  long long v4 = *(std::__shared_weak_count **)(v2 - 56);
  if (v4) {
    sub_18DEE4E18(v4);
  }
  if (v1) {
    sub_18DEE4E18(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_18E0D2C48(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09CD0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0D2C88()
{
  return &unk_1EDD09CD0;
}

int64x2_t sub_18E0D2C94(uint64_t a1, cnframework::GenericEvent *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t EventType = cnframework::GenericEvent::GetEventType(this, (uint64_t)this, a3, a4, a5, a6, a7, a8);
  {
    uint64_t v18 = *((void *)this + 2);
    if (v18) {
      uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 16))(v18);
    }
    else {
      uint64_t v19 = MEMORY[0x1E4FBA3D8];
    }
    uint64_t v27 = (const char *)(*(void *)(v19 + 8) & 0x7FFFFFFFFFFFFFFFLL);
    if (v27 != (const char *)((unint64_t)off_1EDD059E8 & 0x7FFFFFFFFFFFFFFFLL))
    {
      if (strcmp(v27, (const char *)((unint64_t)off_1EDD059E8 & 0x7FFFFFFFFFFFFFFFLL)))
      {
        v40.__vftable = 0;
        std::bad_cast::bad_cast(&v40);
        v40.__vftable = (std::bad_cast_vtbl *)&unk_1EDD12A18;
        sub_18E0BA8B8();
      }
    }
    uint64_t v28 = *((void *)this + 2);
    *(void *)a1 = &unk_1EDD14EE0;
    long long v29 = *(_OWORD *)(v28 + 32);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(v28 + 16);
    *(_OWORD *)(a1 + 24) = v29;
    long long v30 = *(_OWORD *)(v28 + 80);
    long long v31 = *(_OWORD *)(v28 + 96);
    long long v32 = *(_OWORD *)(v28 + 64);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(v28 + 48);
    *(_OWORD *)(a1 + 88) = v31;
    *(_OWORD *)(a1 + 72) = v30;
    *(_OWORD *)(a1 + 56) = v32;
    long long v33 = *(_OWORD *)(v28 + 144);
    long long v34 = *(_OWORD *)(v28 + 160);
    long long v35 = *(_OWORD *)(v28 + 128);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(v28 + 112);
    *(_OWORD *)(a1 + 152) = v34;
    *(_OWORD *)(a1 + 136) = v33;
    *(_OWORD *)(a1 + 120) = v35;
    long long v36 = *(_OWORD *)(v28 + 192);
    int64x2_t result = *(int64x2_t *)(v28 + 208);
    long long v37 = *(_OWORD *)(v28 + 220);
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(v28 + 176);
    *(_OWORD *)(a1 + 212) = v37;
    *(int64x2_t *)(a1 + 200) = result;
    *(_OWORD *)(a1 + 184) = v36;
  }
  else
  {
    __int16 v39 = 3;
    unsigned __int8 v38 = 5;
    uint64_t v20 = cnframework::GenericEvent::GetEventType(this, v11, v12, v13, v14, v15, v16, v17);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v39, &v38, "Attempted to cast a GenericEvent of type %s to type %s.", v21, v22, v23, v24, v25, *(unsigned char *)(v20 + 8));
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 216) = 0u;
    *(_OWORD *)(a1 + 200) = 0u;
    *(_OWORD *)(a1 + 184) = 0u;
    *(_OWORD *)(a1 + 168) = 0u;
    *(_OWORD *)(a1 + 152) = 0u;
    *(_OWORD *)(a1 + 136) = 0u;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = &unk_1EDD14EE0;
    *(unsigned char *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    *(unsigned char *)(a1 + 48) = 0;
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
    *(unsigned char *)(a1 + 72) = 0;
    *(void *)(a1 + 80) = 0;
    *(void *)(a1 + 88) = 0;
    *(unsigned char *)(a1 + 120) = 0;
    *(void *)(a1 + 96) = 0x7FF8000000000000;
    *(void *)(a1 + 104) = 0;
    *(void *)(a1 + 112) = 0;
    *(unsigned char *)(a1 + 144) = 0;
    *(void *)(a1 + 128) = 0;
    *(void *)(a1 + 136) = 0;
    *(unsigned char *)(a1 + 168) = 0;
    *(void *)(a1 + 152) = 0;
    *(void *)(a1 + 160) = 0;
    *(void *)(a1 + 176) = 0;
    *(void *)(a1 + 184) = 0;
    int64x2_t result = vdupq_n_s64(0x7FF8000000000000uLL);
    *(int64x2_t *)(a1 + 192) = result;
    *(int64x2_t *)(a1 + 208) = result;
  }
  return result;
}

void sub_18E0D2ECC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::exception a12)
{
}

void sub_18E0D2EE0()
{
  v0 = operator new(0x60uLL);
  v0[1] = 0;
  v0[2] = 0;
  void *v0 = &unk_1EDD1E458;
  v0[3] = &unk_1EDD0A260;
  uint64_t v1 = MEMORY[0x1E4FBA3D8];
  *((unsigned char *)v0 + 32) = 0;
  v0[5] = 0;
  v0[6] = v1;
  v0[7] = 0;
  v0[8] = 0;
  sub_18DEDE7B0(v0 + 9, "");
  *((unsigned char *)v0 + 32) = 1;
  operator new();
}

void sub_18E0D3124(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 95) < 0) {
    operator delete(*v2);
  }
  uint64_t v4 = *(void *)(v1 + 40);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v1);
  operator delete(v5);
  _Unwind_Resume(a1);
}

void sub_18E0D318C()
{
}

void *sub_18E0D31A0()
{
}

void sub_18E0D31AC()
{
}

void sub_18E0D3264()
{
}

void *sub_18E0D3278()
{
  int64x2_t result = operator new(0x10uLL);
  *int64x2_t result = &unk_1EDD1C7E8;
  return result;
}

void sub_18E0D32B0(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1C7E8;
}

uint64_t sub_18E0D32D8(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = *a2;
  uint64_t EventType = cnframework::GenericEvent::GetEventType(this, (uint64_t)a2, (uint64_t)this, a4, a5, a6, a7, a8);
  {
    uint64_t v18 = *((void *)this + 2);
    if (v18) {
      uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 16))(v18);
    }
    else {
      uint64_t v19 = MEMORY[0x1E4FBA3D8];
    }
    char v26 = (const char *)(*(void *)(v19 + 8) & 0x7FFFFFFFFFFFFFFFLL);
    if (v26 != (const char *)((unint64_t)off_1EDD05A00 & 0x7FFFFFFFFFFFFFFFLL)
      && strcmp(v26, (const char *)((unint64_t)off_1EDD05A00 & 0x7FFFFFFFFFFFFFFFLL)))
    {
      v54.__vftable = 0;
      std::bad_cast::bad_cast(&v54);
      v54.__vftable = (std::bad_cast_vtbl *)&unk_1EDD12A18;
      sub_18E0BA8B8();
    }
    uint64_t v27 = (_OWORD *)*((void *)this + 2);
    uint64_t v41 = &unk_1EDD14F10;
    long long v29 = v27[2];
    long long v28 = v27[3];
    long long v42 = v27[1];
    long long v43 = v29;
    long long v44 = v28;
    long long v30 = v27[6];
    long long v31 = v27[7];
    long long v32 = v27[5];
    long long v45 = v27[4];
    long long v48 = v31;
    long long v47 = v30;
    long long v46 = v32;
    long long v33 = v27[10];
    long long v34 = v27[11];
    long long v35 = v27[9];
    long long v49 = v27[8];
    long long v52 = v34;
    long long v51 = v33;
    long long v50 = v35;
    long long v37 = v27[13];
    long long v36 = v27[14];
    long long v38 = *(_OWORD *)((char *)v27 + 233);
    *(_OWORD *)v53 = v27[12];
    *(_OWORD *)&v53[41] = v38;
    *(_OWORD *)&v53[32] = v36;
    *(_OWORD *)&v53[16] = v37;
  }
  else
  {
    LOWORD(v54.__vftable) = 3;
    LOBYTE(v82) = 5;
    uint64_t v20 = cnframework::GenericEvent::GetEventType(this, v11, v12, v13, v14, v15, v16, v17);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v54, (unsigned __int8 *)&v82, "Attempted to cast a GenericEvent of type %s to type %s.", v21, v22, v23, v24, v25, *(unsigned char *)(v20 + 8));
    long long v43 = 0uLL;
    long long v46 = 0uLL;
    long long v49 = 0uLL;
    long long v50 = 0u;
    long long v52 = 0uLL;
    *(_OWORD *)&v53[48] = 0u;
    long long v42 = 0uLL;
    uint64_t v41 = &unk_1EDD14F10;
    long long v44 = 0uLL;
    long long v45 = 0uLL;
    *(void *)&long long v47 = 0;
    *((void *)&v47 + 1) = 0x7FF8000000000000;
    long long v48 = 0uLL;
    BYTE8(v50) = 0;
    *(void *)&long long v50 = 0;
    long long v51 = 0uLL;
    *(void *)v53 = 0;
    *(int64x2_t *)&v53[8] = vdupq_n_s64(0x7FF8000000000000uLL);
    *(_OWORD *)&v53[24] = *(_OWORD *)&v53[8];
    *(_OWORD *)&v53[40] = *(_OWORD *)&v53[8];
  }
  *(void *)(v9 + 512) = cnframework::ActiveObjectBase::GetCurrentTime((cnframework::ActiveObjectBase *)v9);
  *(void *)(v9 + 520) = v39;
  uint64_t v55 = 0;
  uint64_t v56 = 0;
  v54.__vftable = (std::bad_cast_vtbl *)&unk_1EDD14F10;
  char v57 = 0;
  uint64_t v58 = 0;
  uint64_t v59 = 0;
  char v60 = 0;
  uint64_t v61 = 0;
  uint64_t v62 = 0;
  char v63 = 0;
  uint64_t v64 = 0;
  uint64_t v65 = 0;
  uint64_t v67 = 0;
  uint64_t v68 = 0;
  uint64_t v66 = 0x7FF8000000000000;
  char v69 = 0;
  uint64_t v70 = 0;
  uint64_t v71 = 0;
  char v72 = 0;
  uint64_t v73 = 0;
  uint64_t v74 = 0;
  char v75 = 0;
  uint64_t v76 = 0;
  uint64_t v77 = 0;
  int64x2_t v78 = vdupq_n_s64(0x7FF8000000000000uLL);
  int64x2_t v79 = v78;
  int64x2_t v80 = v78;
  char v81 = 0;
  uint64_t result = raven::TunnelEndPointAssistanceChecker::HandleEvent(*(raven::TunnelEndPointAssistanceChecker **)(v9 + 2192), (const raven::TunnelEndPointAssistanceEvent *)&v41, (raven::TunnelEndPointAssistanceEvent *)&v54);
  if (!result) {
    sub_18E0D36BC();
  }
  return result;
}

void sub_18E0D3634(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,std::exception a42)
{
}

uint64_t sub_18E0D3670(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09CE0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0D36B0()
{
  return &unk_1EDD09CE0;
}

void sub_18E0D36BC()
{
  v0 = operator new(0x60uLL);
  v0[1] = 0;
  v0[2] = 0;
  void *v0 = &unk_1EDD1E458;
  v0[3] = &unk_1EDD0A260;
  uint64_t v1 = MEMORY[0x1E4FBA3D8];
  *((unsigned char *)v0 + 32) = 0;
  v0[5] = 0;
  v0[6] = v1;
  v0[7] = 0;
  v0[8] = 0;
  sub_18DEDE7B0(v0 + 9, "");
  *((unsigned char *)v0 + 32) = 1;
  operator new();
}

void sub_18E0D3904(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 95) < 0) {
    operator delete(*v2);
  }
  uint64_t v4 = *(void *)(v1 + 40);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v1);
  operator delete(v5);
  _Unwind_Resume(a1);
}

void sub_18E0D396C()
{
}

void *sub_18E0D3980()
{
}

void sub_18E0D398C()
{
}

void sub_18E0D3A44()
{
}

void *sub_18E0D3A58()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EDD1C160;
  return result;
}

void sub_18E0D3A90(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1C160;
}

void sub_18E0D3AB8(int a1, cnframework::ActiveObjectBase **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  long long v8 = *a2;
  sub_18E0BBF64((uint64_t)v10, this, (uint64_t)this, a4, a5, a6, a7, a8);
  *((void *)v8 + 64) = cnframework::ActiveObjectBase::GetCurrentTime(v8);
  *((void *)v8 + 65) = v9;
  sub_18DFFF5FC();
}

uint64_t sub_18E0D3B08(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09BB0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0D3B48()
{
  return &unk_1EDD09BB0;
}

void sub_18E0D3B58()
{
}

void *sub_18E0D3B6C()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EDD1C4D0;
  return result;
}

void sub_18E0D3BA4(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1C4D0;
}

void sub_18E0D3BCC(uint64_t a1)
{
  MEMORY[0x1F4188790](a1);
  uint64_t v2 = *v1;
  sub_18E0C1E40(v27, v3, (uint64_t)v3, v4, v5, v6, v7, v8);
  *(void *)(v2 + 512) = cnframework::ActiveObjectBase::GetCurrentTime((cnframework::ActiveObjectBase *)v2);
  *(void *)(v2 + 520) = v9;
  sub_18DFF49CC((uint64_t)v42);
  uint64_t v10 = (cnprint::CNPrinter *)raven::RavenIntegrityEstimator::HandleEvent((raven::SolutionChecker **)(v2 + 496), (const raven::RavenSolutionEvent *)v27, (raven::RavenSolutionEvent *)v42);
  if (v10)
  {
    if (v30 + (double)v29 >= *(double *)(*(void *)(v2 + 488) + 1576))
    {
      __p = &unk_1EDD14C20;
      long long v36 = v45;
      long long v37 = v46;
      long long v38 = v47;
      long long v39 = v48;
      long long v34 = v43;
      long long v35 = v44;
      char v40 = v28;
      char v41 = 6;
      if (cnprint::CNPrinter::GetLogLevel(v10) <= 1)
      {
        __int16 v32 = 12;
        unsigned __int8 v31 = 1;
        long long v17 = v43;
        (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v2 + 16))(&v50, v2);
        double v26 = *((double *)&v17 + 1) + (double)(uint64_t)v17;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v32, &v31, "t, %.3lf, %s, Integrity check on RavenSolutionEvent failed. Initiating error recovery action, %u, on estimator type, %u", v18, v19, v20, v21, v22, SLOBYTE(v26));
        if (SHIBYTE(v51) < 0) {
          operator delete(v50);
        }
      }
      uint64_t v23 = operator new(0x60uLL);
      v23[1] = 0;
      v23[2] = 0;
      *uint64_t v23 = &unk_1EDD1E458;
      v23[3] = &unk_1EDD0A260;
      uint64_t v24 = MEMORY[0x1E4FBA3D8];
      *((unsigned char *)v23 + 32) = 0;
      v23[5] = 0;
      v23[6] = v24;
      v23[7] = 0;
      v23[8] = 0;
      sub_18DEDE7B0(v23 + 9, "");
      *((unsigned char *)v23 + 32) = 1;
      operator new();
    }
    if (cnprint::CNPrinter::GetLogLevel(v10) <= 1)
    {
      LOWORD(v50) = 12;
      LOBYTE(v32) = 1;
      long long v11 = v43;
      (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v2 + 16))(&__p, v2);
      double v25 = *((double *)&v11 + 1) + (double)(uint64_t)v11;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v50, (unsigned __int8 *)&v32, "t, %.3lf, %s, Integrity check on RavenSolutionEvent failed. However, estimator activity duration is not large enough to raise an error recovery event on estimator type, %u", v12, v13, v14, v15, v16, SLOBYTE(v25));
      if (SHIBYTE(v34) < 0) {
        operator delete(__p);
      }
    }
    char v49 = 1;
  }
  sub_18E0C3028();
}

void sub_18E0D4014(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 2567) < 0) {
    operator delete(*(void **)(v2 - 104));
  }
  _Unwind_Resume(a1);
}

uint64_t sub_18E0D40C8(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09C50)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0D4108()
{
  return &unk_1EDD09C50;
}

void sub_18E0D4118()
{
}

void *sub_18E0D412C()
{
}

void sub_18E0D4138()
{
}

void sub_18E0D41D0()
{
}

void *sub_18E0D41E4()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EDD1C3C8;
  return result;
}

void sub_18E0D421C(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1C3C8;
}

uint64_t sub_18E0D4244(int a1, cnframework::ActiveObjectBase **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  sub_18E0BC290((uint64_t)v11, this, (uint64_t)this, a4, a5, a6, a7, a8);
  uint64_t result = cnframework::ActiveObjectBase::GetCurrentTime(v8);
  *((void *)v8 + 64) = result;
  *((void *)v8 + 65) = v10;
  if (!v11[26]) {
    return (*(uint64_t (**)(cnframework::ActiveObjectBase *))(*(void *)v8 + 48))(v8);
  }
  return result;
}

uint64_t sub_18E0D42B8(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09C20)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0D42F8()
{
  return &unk_1EDD09C20;
}

void sub_18E0D4308()
{
}

void *sub_18E0D431C()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EDD1C268;
  return result;
}

void sub_18E0D4354(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1C268;
}

uint64_t sub_18E0D437C(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  sub_18E0BD1E0((uint64_t)v11, this, (uint64_t)this, a4, a5, a6, a7, a8);
  *(void *)(v8 + 512) = cnframework::ActiveObjectBase::GetCurrentTime((cnframework::ActiveObjectBase *)v8);
  *(void *)(v8 + 520) = v9;
  v12[1] = 0;
  v12[2] = 0;
  v12[0] = &unk_1EDD139E0;
  char v13 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  char v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  char v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0x7FF8000000000000;
  char v23 = 0;
  int64x2_t v24 = vdupq_n_s64(0x7FF8000000000000uLL);
  uint64_t v25 = 0x7FF8000000000000;
  int v26 = 0;
  uint64_t v27 = 0x7FF8000000000000;
  uint64_t v28 = 0xFFFFFFFFLL;
  uint64_t result = raven::StepCountChecker::HandleEvent(*(raven::StepCountChecker **)(v8 + 2160), (const raven::StepCountEvent *)v11, (raven::StepCountEvent *)v12);
  if (!result) {
    sub_18E0D451C();
  }
  return result;
}

void sub_18E0D44AC(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *(std::__shared_weak_count **)(v2 - 56);
  if (v4) {
    sub_18DEE4E18(v4);
  }
  if (v1) {
    sub_18DEE4E18(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_18E0D44D0(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09BE0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0D4510()
{
  return &unk_1EDD09BE0;
}

void sub_18E0D451C()
{
  v0 = operator new(0x60uLL);
  v0[1] = 0;
  v0[2] = 0;
  void *v0 = &unk_1EDD1E458;
  v0[3] = &unk_1EDD0A260;
  uint64_t v1 = MEMORY[0x1E4FBA3D8];
  *((unsigned char *)v0 + 32) = 0;
  v0[5] = 0;
  v0[6] = v1;
  v0[7] = 0;
  v0[8] = 0;
  sub_18DEDE7B0(v0 + 9, "");
  *((unsigned char *)v0 + 32) = 1;
  operator new();
}

void sub_18E0D4748(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 95) < 0) {
    operator delete(*v2);
  }
  uint64_t v4 = *(void *)(v1 + 40);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v1);
  operator delete(v5);
  _Unwind_Resume(a1);
}

void sub_18E0D47B0()
{
}

void *sub_18E0D47C4()
{
}

void sub_18E0D47D0()
{
}

void sub_18E0D4878()
{
}

void *sub_18E0D488C()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EDD1C2C0;
  return result;
}

void sub_18E0D48C4(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1C2C0;
}

uint64_t sub_18E0D48EC(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  sub_18E0C3628((uint64_t)v11, this, (uint64_t)this, a4, a5, a6, a7, a8);
  *(void *)(v8 + 512) = cnframework::ActiveObjectBase::GetCurrentTime((cnframework::ActiveObjectBase *)v8);
  *(void *)(v8 + 520) = v9;
  v12[1] = 0;
  v12[2] = 0;
  v12[0] = &unk_1EDD13A40;
  char v13 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  char v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  char v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  int64x2_t v22 = vdupq_n_s64(0x7FF8000000000000uLL);
  uint64_t v23 = 0x7FF8000000000000;
  uint64_t result = raven::UserSpeedChecker::HandleEvent(*(raven::UserSpeedChecker **)(v8 + 2168), (const raven::UserSpeedEvent *)v11, (raven::UserSpeedEvent *)v12);
  if (!result) {
    sub_18E013AB0();
  }
  return result;
}

uint64_t sub_18E0D499C(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09BF0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0D49DC()
{
  return &unk_1EDD09BF0;
}

void sub_18E0D49EC()
{
}

void *sub_18E0D4A00()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EDD1C1B8;
  return result;
}

void sub_18E0D4A38(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1C1B8;
}

uint64_t sub_18E0D4A60(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  sub_18E0C3A8C((uint64_t)v11, this, (uint64_t)this, a4, a5, a6, a7, a8);
  *(void *)(v8 + 512) = cnframework::ActiveObjectBase::GetCurrentTime((cnframework::ActiveObjectBase *)v8);
  *(void *)(v8 + 520) = v9;
  v12[1] = 0;
  v12[2] = 0;
  v12[0] = &unk_1EDD13880;
  char v13 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  char v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  char v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  uint64_t v22 = 0x7FF8000000000000;
  char v25 = 0;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  char v28 = 0;
  uint64_t v30 = 0;
  uint64_t v29 = 0;
  char v31 = 0;
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  uint64_t v34 = 0x7FF8000000000000;
  int v35 = 0;
  int64x2_t v36 = vdupq_n_s64(0x7FF8000000000000uLL);
  int64x2_t v37 = v36;
  int64x2_t v38 = v36;
  int64x2_t v39 = v36;
  uint64_t v40 = 0x7FF8000000000000;
  char v41 = 0;
  int64x2_t v42 = v36;
  int64x2_t v43 = v36;
  int64x2_t v44 = v36;
  int64x2_t v45 = v36;
  uint64_t v46 = 0x7FF8000000000000;
  uint64_t result = raven::VelocityChecker::HandleEvent(*(raven::VelocityChecker **)(v8 + 2176), (const raven::VelocityEvent *)v11, (raven::VelocityEvent *)v12);
  if (!result) {
    sub_18E0D4C2C();
  }
  return result;
}

void sub_18E0D4BBC(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *(std::__shared_weak_count **)(v2 - 56);
  if (v4) {
    sub_18DEE4E18(v4);
  }
  if (v1) {
    sub_18DEE4E18(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_18E0D4BE0(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09BC0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0D4C20()
{
  return &unk_1EDD09BC0;
}

void sub_18E0D4C2C()
{
  v0 = operator new(0x60uLL);
  v0[1] = 0;
  v0[2] = 0;
  void *v0 = &unk_1EDD1E458;
  v0[3] = &unk_1EDD0A260;
  uint64_t v1 = MEMORY[0x1E4FBA3D8];
  *((unsigned char *)v0 + 32) = 0;
  v0[5] = 0;
  v0[6] = v1;
  v0[7] = 0;
  v0[8] = 0;
  sub_18DEDE7B0(v0 + 9, "");
  *((unsigned char *)v0 + 32) = 1;
  operator new();
}

void sub_18E0D4E28(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 95) < 0) {
    operator delete(*v2);
  }
  uint64_t v4 = *(void *)(v1 + 40);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v1);
  operator delete(v5);
  _Unwind_Resume(a1);
}

void sub_18E0D4E90()
{
}

void *sub_18E0D4EA4()
{
}

void sub_18E0D4EB0()
{
}

void sub_18E0D4F40()
{
}

void *sub_18E0D4F54()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EDD1A638;
  return result;
}

void sub_18E0D4F8C(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1A638;
}

double sub_18E0D4FB4(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  sub_18E0BDF10((uint64_t)&v10, this, (uint64_t)this, a4, a5, a6, a7, a8);
  if (*(unsigned char *)(v8 + 688))
  {
    *(void *)(v8 + 680) = v22;
    *(_OWORD *)(v8 + 632) = v19;
    *(_OWORD *)(v8 + 648) = v20;
    *(_OWORD *)(v8 + 664) = v21;
    *(_OWORD *)(v8 + 568) = v15;
    *(_OWORD *)(v8 + 584) = v16;
    *(_OWORD *)(v8 + 600) = v17;
    *(_OWORD *)(v8 + 616) = v18;
    *(_OWORD *)(v8 + 504) = v11;
    *(_OWORD *)(v8 + 520) = v12;
    *(_OWORD *)(v8 + 536) = v13;
    double result = *(double *)&v14;
    *(_OWORD *)(v8 + 552) = v14;
  }
  else
  {
    *(void *)(v8 + 496) = &unk_1EDD140B8;
    *(void *)(v8 + 680) = v22;
    *(_OWORD *)(v8 + 632) = v19;
    *(_OWORD *)(v8 + 648) = v20;
    *(_OWORD *)(v8 + 664) = v21;
    *(_OWORD *)(v8 + 568) = v15;
    *(_OWORD *)(v8 + 584) = v16;
    *(_OWORD *)(v8 + 600) = v17;
    *(_OWORD *)(v8 + 616) = v18;
    *(_OWORD *)(v8 + 504) = v11;
    *(_OWORD *)(v8 + 520) = v12;
    *(_OWORD *)(v8 + 536) = v13;
    double result = *(double *)&v14;
    *(_OWORD *)(v8 + 552) = v14;
    *(unsigned char *)(v8 + 688) = 1;
  }
  return result;
}

uint64_t sub_18E0D50E4(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD096C0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0D5124()
{
  return &unk_1EDD096C0;
}

void sub_18E0D5134()
{
}

void *sub_18E0D5148()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1EDD1A6E8;
  return result;
}

void sub_18E0D5180(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1A6E8;
}

uint64_t sub_18E0D51A8(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  sub_18E0C7D88((uint64_t)v10, this, (uint64_t)this, a4, a5, a6, a7, a8);
  return sub_18E0E5048(v8 + 696, (uint64_t)v10);
}

uint64_t sub_18E0D51E8(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD096E0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0D5228()
{
  return &unk_1EDD096E0;
}

void sub_18E0D5238()
{
}

void *sub_18E0D524C()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1EDD1A588;
  return result;
}

void sub_18E0D5284(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1A588;
}

double sub_18E0D52AC(int a1, raven::RavenMapVectorActiveObject **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  sub_18E0BFBBC((uint64_t)v12, this, (uint64_t)this, a4, a5, a6, a7, a8);
  return raven::RavenMapVectorActiveObject::HandleEvent(v8, (const raven::MapVectorEvent *)v12, v9, v10);
}

uint64_t sub_18E0D52EC(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD096A0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0D532C()
{
  return &unk_1EDD096A0;
}

void sub_18E0D533C()
{
}

void *sub_18E0D5350()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1EDD1A5E0;
  return result;
}

void sub_18E0D5388(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1A5E0;
}

double sub_18E0D53B0(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  sub_18E0C0078((uint64_t)&v10, this, (uint64_t)this, a4, a5, a6, a7, a8);
  if (*(unsigned char *)(v8 + 1376))
  {
    *(_OWORD *)(v8 + 1472) = v16;
    *(_OWORD *)(v8 + 1488) = v17;
    *(_OWORD *)(v8 + 1504) = v18;
    *(void *)(v8 + 1520) = v19;
    *(_OWORD *)(v8 + 1408) = v12;
    *(_OWORD *)(v8 + 1424) = v13;
    *(_OWORD *)(v8 + 1440) = v14;
    *(_OWORD *)(v8 + 1456) = v15;
    double result = *(double *)&v11;
    *(_OWORD *)(v8 + 1392) = v11;
  }
  else
  {
    *(void *)(v8 + 1384) = &unk_1EDD13AA8;
    *(_OWORD *)(v8 + 1472) = v16;
    *(_OWORD *)(v8 + 1488) = v17;
    *(_OWORD *)(v8 + 1504) = v18;
    *(void *)(v8 + 1520) = v19;
    *(_OWORD *)(v8 + 1408) = v12;
    *(_OWORD *)(v8 + 1424) = v13;
    *(_OWORD *)(v8 + 1440) = v14;
    *(_OWORD *)(v8 + 1456) = v15;
    double result = *(double *)&v11;
    *(_OWORD *)(v8 + 1392) = v11;
    *(unsigned char *)(v8 + 1376) = 1;
  }
  return result;
}

uint64_t sub_18E0D54A8(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD096B0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0D54E8()
{
  return &unk_1EDD096B0;
}

void sub_18E0D54F8()
{
}

void *sub_18E0D550C()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1EDD1A4D8;
  return result;
}

void sub_18E0D5544(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1A4D8;
}

void sub_18E0D556C(int a1, raven::RavenMapVectorActiveObject **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  int64x2_t v9 = sub_18E0BBF64((uint64_t)v11, this, (uint64_t)this, a4, a5, a6, a7, a8);
  raven::RavenMapVectorActiveObject::HandleEvent(v8, (const raven::RateGyroEvent *)v11, (int8x16_t)v9, v10);
}

uint64_t sub_18E0D55AC(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09680)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0D55EC()
{
  return &unk_1EDD09680;
}

void sub_18E0D55FC()
{
}

void *sub_18E0D5610()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1EDD1A690;
  return result;
}

void sub_18E0D5648(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1A690;
}

void sub_18E0D5670(int a1, raven::RavenMapVectorActiveObject **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  sub_18E0C1E40(v15, this, (uint64_t)this, a4, a5, a6, a7, a8);
  raven::RavenMapVectorActiveObject::HandleEvent(v8, (const raven::RavenSolutionEvent *)v15, v9, v10, v11, v12, v13, v14);
}

uint64_t sub_18E0D56B0(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD096D0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0D56F0()
{
  return &unk_1EDD096D0;
}

void sub_18E0D5700()
{
}

void *sub_18E0D5714()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1EDD1A530;
  return result;
}

void sub_18E0D574C(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1A530;
}

void sub_18E0D5774(int a1, raven::RavenMapVectorActiveObject **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  sub_18E0BD4F4((uint64_t)v9, this, (uint64_t)this, a4, a5, a6, a7, a8);
  raven::RavenMapVectorActiveObject::HandleEvent(v8, (const raven::TimeMarkEvent *)v9);
}

uint64_t sub_18E0D57B4(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09690)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0D57F4()
{
  return &unk_1EDD09690;
}

void sub_18E0D5804()
{
}

void *sub_18E0D5818()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1EDD1CBB0;
  return result;
}

void sub_18E0D5850(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1CBB0;
}

void sub_18E0D5878(int a1, int64x2_t **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  __n128 v9 = sub_18E0C7D88((uint64_t)v52, this, (uint64_t)this, a4, a5, a6, a7, a8);
  uint64_t v11 = v8[33].i64[1];
  if (!v11)
  {
LABEL_31:
    sub_18E0D5CB0((int64x2_t *)v8[31].i64, (uint64_t)v52);
    goto LABEL_32;
  }
  uint64_t v12 = (cnprint::CNPrinter *)CNTimeSpan::operator-((uint64_t)&v53, (void *)(*(void *)(v8[31].i64[1] + 8 * ((v11 + v8[33].i64[0] - 1) / 0x14uLL))+ 200 * ((v11 + v8[33].i64[0] - 1) % 0x14uLL)+ 152), (int8x16_t)v9, v10);
  if (fabs(v13 + (double)(uint64_t)v12) > 0.000000015)
  {
    if (cnprint::CNPrinter::GetLogLevel(v12) <= 1)
    {
      LOWORD(v55[0]) = 12;
      LOBYTE(v54[0]) = 1;
      uint64_t v14 = (*(uint64_t (**)(void *))(v52[0] + 16))(v52);
      double v51 = v15 + (double)v14;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v55, (unsigned __int8 *)v54, "Acceleration reference frame change, t,%.3lf, reset buffer", v16, v17, v18, v19, v20, SLOBYTE(v51));
    }
    long long v21 = (void **)v8[31].i64[1];
    uint64_t v22 = (void **)v8[32].i64[0];
    if (v22 == v21)
    {
      uint64_t v22 = (void **)v8[31].i64[1];
    }
    else
    {
      unint64_t v23 = v8[33].u64[0];
      uint64_t v24 = &v21[v23 / 0x14];
      unint64_t v25 = (unint64_t)v21[(v8[33].i64[1] + v23) / 0x14] + 200 * ((v8[33].i64[1] + v23) % 0x14);
      if ((char *)*v24 + 200 * (v23 % 0x14) != (void *)v25)
      {
        uint64_t v26 = (void (***)(void))((char *)*v24 + 200 * (v23 % 0x14));
        do
        {
          uint64_t v27 = *v26;
          v26 += 25;
          (*v27)();
          if ((char *)v26 - (unsigned char *)*v24 == 4000)
          {
            char v28 = (void (***)(void))v24[1];
            ++v24;
            uint64_t v26 = v28;
          }
        }
        while (v26 != (void (***)(void))v25);
        long long v21 = (void **)v8[31].i64[1];
        uint64_t v22 = (void **)v8[32].i64[0];
      }
    }
    v8[33].i64[1] = 0;
    unint64_t v29 = (char *)v22 - (char *)v21;
    if (v29 >= 0x11)
    {
      do
      {
        operator delete(*v21);
        uint64_t v30 = v8[32].i64[0];
        long long v21 = (void **)(v8[31].i64[1] + 8);
        v8[31].i64[1] = (uint64_t)v21;
        unint64_t v29 = v30 - (void)v21;
      }
      while (v29 > 0x10);
    }
    if (v29 >> 3 == 1)
    {
      uint64_t v31 = 10;
      goto LABEL_19;
    }
    if (v29 >> 3 == 2)
    {
      uint64_t v31 = 20;
LABEL_19:
      v8[33].i64[0] = v31;
    }
  }
  if (!v8[33].i64[1]) {
    goto LABEL_31;
  }
  uint64_t v32 = (*(uint64_t (**)(void *))(v52[0] + 16))(v52);
  double v34 = v33;
  double v35 = v33;
  unint64_t v36 = v8[33].i64[1] + v8[33].i64[0] - 1;
  unint64_t v37 = *(void *)(v8[31].i64[1] + 8 * (v36 / 0x14)) + 200 * (v36 % 0x14);
  uint64_t v38 = (*(uint64_t (**)(unint64_t))(*(void *)v37 + 16))(v37);
  if (!v32 && (*(void *)&v34 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000
    || (!v38 ? (BOOL v40 = (*(void *)&v39 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000) : (BOOL v40 = 1),
        !v40 || (BOOL v41 = v32 <= v38, v32 == v38)))
  {
    BOOL v41 = v35 <= v39;
  }
  if (!v41) {
    goto LABEL_31;
  }
LABEL_32:
  unint64_t v42 = v8[33].u64[1];
  if (v42 >= 2)
  {
    unint64_t v43 = *(void *)(v8[31].i64[1] + 8 * ((v42 + v8[33].i64[0] - 1) / 0x14)) + 200 * ((v42 + v8[33].i64[0] - 1) % 0x14);
    v55[0] = (*(uint64_t (**)(unint64_t))(*(void *)v43 + 16))(v43);
    v55[1] = v44;
    unint64_t v45 = *(void *)(v8[31].i64[1] + 8 * (v8[33].i64[0] / 0x14uLL)) + 200 * (v8[33].i64[0] % 0x14uLL);
    v54[0] = (*(uint64_t (**)(unint64_t))(*(void *)v45 + 16))(v45);
    v54[1] = v46;
    uint64_t v49 = CNTimeSpan::operator-((uint64_t)v55, v54, v47, v48);
    if (v50 + (double)v49 > 0.55) {
      sub_18E0D5DE8(v8 + 31);
    }
  }
}

uint64_t sub_18E0D5C64(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09D90)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0D5CA4()
{
  return &unk_1EDD09D90;
}

void sub_18E0D5CB0(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v6 = 20 * ((v5 - v4) >> 3) - 1;
  if (v5 == v4) {
    uint64_t v6 = 0;
  }
  if (v6 == a1[5] + a1[4])
  {
    sub_18E0D5E98(a1);
    uint64_t v4 = a1[1];
    uint64_t v5 = a1[2];
  }
  if (v5 == v4)
  {
    unint64_t v8 = 0;
  }
  else
  {
    unint64_t v7 = a1[5] + a1[4];
    unint64_t v8 = *(void *)(v4 + 8 * (v7 / 0x14)) + 200 * (v7 % 0x14);
  }
  *(void *)unint64_t v8 = &unk_1EDD14BF0;
  long long v9 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(v8 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(v8 + 8) = v9;
  long long v10 = *(_OWORD *)(a2 + 40);
  long long v11 = *(_OWORD *)(a2 + 56);
  long long v12 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(v8 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(v8 + 72) = v12;
  *(_OWORD *)(v8 + 56) = v11;
  *(_OWORD *)(v8 + 40) = v10;
  long long v13 = *(_OWORD *)(a2 + 104);
  long long v14 = *(_OWORD *)(a2 + 120);
  long long v15 = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(v8 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(v8 + 136) = v15;
  *(_OWORD *)(v8 + 120) = v14;
  *(_OWORD *)(v8 + 104) = v13;
  *(_OWORD *)(v8 + 168) = 0u;
  *(_OWORD *)(v8 + 184) = 0u;
  if (v8 != a2)
  {
    *(_OWORD *)(v8 + 168) = *(_OWORD *)(a2 + 168);
    *(_OWORD *)(v8 + 184) = *(_OWORD *)(a2 + 184);
  }
  ++a1[5];
}

uint64_t sub_18E0D5DE8(int64x2_t *a1)
{
  (**(void (***)(void))(*(void *)(a1->i64[1] + 8 * (a1[2].i64[0] / 0x14uLL)) + 200 * (a1[2].i64[0] % 0x14uLL)))();
  a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_18E1EF670);

  return sub_18E0D61B0((uint64_t)a1, 1);
}

void sub_18E0D5E98(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x14;
  unint64_t v4 = v2 - 20;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    long long v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      double v34 = (char *)sub_18DEDF808(v5, v33);
      double v35 = &v34[8 * (v33 >> 2)];
      unint64_t v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        BOOL v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)BOOL v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      long long v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0xFA0uLL);
      sub_18DEDF368(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0xFA0uLL);
    sub_18DEDF480((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    long long v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      double v34 = (char *)sub_18DEDF808((uint64_t)(a1 + 3), v46);
      double v35 = &v34[8 * (v46 >> 2)];
      unint64_t v37 = &v34[8 * v47];
      int8x16_t v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        double v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)double v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      unint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  uint64_t v56 = a1 + 3;
  *(void *)&long long v54 = sub_18DEDF808((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  uint64_t v53 = operator new(0xFA0uLL);
  sub_18DEDF5A0(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_18DEDF6B8((uint64_t)&v54, v27);
  }
  unint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_18E0D6164(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_18E0D61B0(uint64_t a1, int a2)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 < 0x14) {
    a2 = 1;
  }
  if (v2 < 0x28) {
    int v4 = a2;
  }
  else {
    int v4 = 0;
  }
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8;
    *(void *)(a1 + 32) -= 20;
  }
  return v4 ^ 1u;
}

void sub_18E0D6214()
{
}

void *sub_18E0D6228()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1EDD1CAA8;
  return result;
}

void sub_18E0D6260(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1CAA8;
}

double sub_18E0D6288(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  sub_18E0C0078((uint64_t)&v10, this, (uint64_t)this, a4, a5, a6, a7, a8);
  *(_OWORD *)(v8 + 1512) = v16;
  *(_OWORD *)(v8 + 1528) = v17;
  *(_OWORD *)(v8 + 1544) = v18;
  *(void *)(v8 + 1560) = v19;
  *(_OWORD *)(v8 + 1448) = v12;
  *(_OWORD *)(v8 + 1464) = v13;
  *(_OWORD *)(v8 + 1480) = v14;
  *(_OWORD *)(v8 + 1496) = v15;
  double result = *(double *)&v11;
  *(_OWORD *)(v8 + 1432) = v11;
  return result;
}

uint64_t sub_18E0D6308(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09D60)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0D6348()
{
  return &unk_1EDD09D60;
}

void sub_18E0D6358()
{
}

void *sub_18E0D636C()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1EDD1CB58;
  return result;
}

void sub_18E0D63A4(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1CB58;
}

void *sub_18E0D63CC(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  double result = sub_18E0C1E40(v10, this, (uint64_t)this, a4, a5, a6, a7, a8);
  if (v11 == 4) {
    return memcpy((void *)(v8 + 544), v12, 0x360uLL);
  }
  return result;
}

uint64_t sub_18E0D6428(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09D80)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0D6468()
{
  return &unk_1EDD09D80;
}

void sub_18E0D6478()
{
}

void *sub_18E0D648C()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1EDD1CB00;
  return result;
}

void sub_18E0D64C4(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1CB00;
}

void sub_18E0D64EC(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  __n128 v9 = sub_18E0BC290((uint64_t)v10, this, (uint64_t)this, a4, a5, a6, a7, a8);
  if (!v10[26]) {
    (*(void (**)(uint64_t, __n128))(*(void *)v8 + 48))(v8, v9);
  }
}

uint64_t sub_18E0D6550(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09D70)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0D6590()
{
  return &unk_1EDD09D70;
}

void sub_18E0D65A0()
{
}

void *sub_18E0D65B4()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1EDD1CA50;
  return result;
}

void sub_18E0D65EC(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1CA50;
}

void sub_18E0D6614(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  sub_18E0BD4F4((uint64_t)&v45, this, (uint64_t)this, a4, a5, a6, a7, a8);
  long long v59 = *(_OWORD *)(v8 + 1512);
  long long v55 = *(_OWORD *)(v8 + 1448);
  *(_OWORD *)char v60 = *(_OWORD *)(v8 + 1528);
  *(_OWORD *)&v60[16] = *(_OWORD *)(v8 + 1544);
  uint64_t v9 = *(void *)(v8 + 1560);
  *(void *)&v53[4] = &unk_1EDD13AA8;
  *(void *)&v60[32] = v9;
  long long v59 = v51;
  long long v55 = v47;
  long long v56 = v48;
  long long v57 = v49;
  long long v58 = v50;
  long long v54 = v46;
  unsigned int v10 = v60[0];
  if (v60[0] > 3u || v60[0] == 1)
  {
    uint64_t v11 = *(void *)(v8 + 536);
    if (v11)
    {
      unint64_t v12 = *(void *)(*(void *)(v8 + 504) + 8 * ((v11 + *(void *)(v8 + 528) - 1) / 0x14uLL))
          + 200 * ((v11 + *(void *)(v8 + 528) - 1) % 0x14uLL);
      uint64_t v66 = (void *)(*(uint64_t (**)(unint64_t))(*(void *)v12 + 16))(v12);
      *(void *)&long long v67 = v13;
      unint64_t v14 = *(void *)(*(void *)(v8 + 504) + 8 * (*(void *)(v8 + 528) / 0x14uLL))
          + 200 * (*(void *)(v8 + 528) % 0x14uLL);
      uint64_t v71 = (void *)(*(uint64_t (**)(unint64_t))(*(void *)v14 + 16))(v14);
      *(void *)&long long v72 = v15;
      uint64_t v18 = CNTimeSpan::operator-((uint64_t)&v66, &v71, v16, v17);
      double v20 = fabs(v19 + (double)v18);
      if (v20 > 0.45)
      {
        unint64_t v21 = *(void *)(v8 + 528);
        unint64_t v22 = *(void *)(v8 + 536) + v21 - 1;
        uint64_t v23 = *(void *)(v8 + 504);
        uint64_t v24 = *(void *)(v23 + 8 * (v22 / 0x14));
        cnrotation::Inv((float64x2_t *)(*(void *)(v23 + 8 * (v21 / 0x14)) + 200 * (v21 % 0x14) + 168), (float64x2_t *)&v66);
        cnrotation::Cat((double *)(v24 + 200 * (v22 % 0x14) + 168), (const cnrotation::CNRotation *)&v66, v53);
        cnrotation::CNRotation::RotationVector((cnrotation::CNRotation *)v53, (uint64_t)v52);
        uint64_t v73 = 0x100000003;
        uint64_t v71 = &unk_1EDD18D98;
        long long v72 = xmmword_18E1F6F60;
        uint64_t v74 = &v75;
        uint64_t v68 = 0x100000134;
        long long v67 = xmmword_18E1F6FB0;
        uint64_t v66 = &unk_1EDD18C48;
        char v69 = &v70;
        uint64_t v63 = 0x100000003;
        long long v62 = xmmword_18E1F6F60;
        uint64_t v61 = &unk_1EDD18D98;
        uint64_t v64 = &v65;
        sub_18DFE345C((uint64_t)v52, (uint64_t)&v71, (uint64_t)&v66, (uint64_t)&v61, "2");
        double v27 = fabs(v26 / v20);
        double v28 = 0.68584315;
        if (*(unsigned char *)(v8 + 720))
        {
          double v29 = *(double *)(v8 + 728);
          if (v29 > 0.000000015)
          {
            double v30 = 3.26888333 / fmin(v29, 50.0);
            if (v30 <= 0.68584315) {
              double v28 = v30;
            }
            else {
              double v28 = 0.68584315;
            }
          }
        }
        if (v27 > v28)
        {
          if (!cnprint::CNPrinter::GetLogLevel(v25))
          {
            LOWORD(v66) = 12;
            LOBYTE(v71) = 0;
            uint64_t v31 = (*(uint64_t (**)(uint64_t *))(v45 + 16))(&v45);
            double v44 = v32 + (double)v31;
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v66, (unsigned __int8 *)&v71, "Mount adjustment detected, t,%.3lf,%.1lf dps vs. %.1lf dps", v33, v34, v35, v36, v37, SLOBYTE(v44));
          }
          *(void *)(v8 + 1408) = (*(uint64_t (**)(uint64_t *))(v45 + 16))(&v45);
          *(void *)(v8 + 1416) = v38;
        }
      }
    }
    unsigned int v10 = v60[0];
  }
  if (v10 > 3 || v10 == 1)
  {
    uint64_t v66 = (void *)(*(uint64_t (**)(uint64_t *))(v45 + 16))(&v45);
    *(void *)&long long v67 = v39;
    uint64_t v42 = CNTimeSpan::operator-((uint64_t)&v66, (void *)(v8 + 1408), v40, v41);
    if (v43 + (double)v42 < 30.0)
    {
      v60[0] = 2;
      *(_OWORD *)&v60[8] = xmmword_18E200D10;
      *(_OWORD *)&v60[24] = xmmword_18E200D20;
    }
  }
  sub_18E0D0300();
}

uint64_t sub_18E0D6B00(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09D50)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0D6B40()
{
  return &unk_1EDD09D50;
}

void sub_18E0D6B50()
{
}

void *sub_18E0D6B64()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1EDD1D3F0;
  return result;
}

void sub_18E0D6B9C(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1D3F0;
}

void sub_18E0D6BC4(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  int64x2_t v9 = sub_18E0BA6B4((uint64_t)v23, this, (uint64_t)this, a4, a5, a6, a7, a8);
  if (*(unsigned char *)(v8 + 480))
  {
    if (*(unsigned char *)(v8 + 753))
    {
      if (*(unsigned char *)(v8 + 752)) {
        raven::RavenMovingStateEstimator::HandleEvent((raven::RavenMovingStateEstimator *)(v8 + 536), (const raven::AccelerometerEvent *)v23);
      }
    }
  }
  else
  {
    __int16 v28 = 12;
    unsigned __int8 v27 = 2;
    v26[0] = (*(uint64_t (**)(void *, int64x2_t))(v23[0] + 16))(v23, v9);
    v26[1] = v10;
    (*(void (**)(void **__return_ptr, void *))(v23[0] + 24))(v24, v23);
    if (v25 >= 0) {
      int8x16_t v16 = v24;
    }
    else {
      int8x16_t v16 = (void **)v24[0];
    }
    cnprint::CNLogFormatter::FormatWarning(v8 + 488, (uint64_t)v26, "Failed to handle event - %s.", v11, v12, v13, v14, v15, (uint64_t)v16);
    if (*(char *)(v8 + 511) >= 0) {
      LOBYTE(v22) = v8 - 24;
    }
    else {
      uint64_t v22 = *(void *)(v8 + 488);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v28, &v27, "%s", v17, v18, v19, v20, v21, v22);
    if (v25 < 0) {
      operator delete(v24[0]);
    }
  }
}

void sub_18E0D6CFC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 57) < 0) {
    operator delete(*(void **)(v1 - 80));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_18E0D6D18(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09F10)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0D6D58()
{
  return &unk_1EDD09F10;
}

void sub_18E0D6D68()
{
}

void *sub_18E0D6D7C()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1EDD1D448;
  return result;
}

void sub_18E0D6DB4(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1D448;
}

void sub_18E0D6DDC(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  __n128 v9 = sub_18E0BDF10((uint64_t)v23, this, (uint64_t)this, a4, a5, a6, a7, a8);
  if (*(unsigned char *)(v8 + 480))
  {
    if (*(unsigned char *)(v8 + 753))
    {
      if (*(unsigned char *)(v8 + 752)) {
        raven::RavenMovingStateEstimator::HandleEvent((__n128 *)(v8 + 536), (const raven::ActivityStateEvent *)v23);
      }
    }
  }
  else
  {
    __int16 v28 = 12;
    unsigned __int8 v27 = 2;
    v26[0] = (*(uint64_t (**)(void *, __n128))(v23[0] + 16))(v23, v9);
    v26[1] = v10;
    (*(void (**)(void **__return_ptr, void *))(v23[0] + 24))(v24, v23);
    if (v25 >= 0) {
      int8x16_t v16 = v24;
    }
    else {
      int8x16_t v16 = (void **)v24[0];
    }
    cnprint::CNLogFormatter::FormatWarning(v8 + 488, (uint64_t)v26, "Failed to handle event - %s.", v11, v12, v13, v14, v15, (uint64_t)v16);
    if (*(char *)(v8 + 511) >= 0) {
      LOBYTE(v22) = v8 - 24;
    }
    else {
      uint64_t v22 = *(void *)(v8 + 488);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v28, &v27, "%s", v17, v18, v19, v20, v21, v22);
    if (v25 < 0) {
      operator delete(v24[0]);
    }
  }
}

void sub_18E0D6F14(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 57) < 0) {
    operator delete(*(void **)(v1 - 80));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_18E0D6F30(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09F20)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0D6F70()
{
  return &unk_1EDD09F20;
}

void sub_18E0D6F80()
{
}

void *sub_18E0D6F94()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1EDD1D340;
  return result;
}

void sub_18E0D6FCC(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1D340;
}

double sub_18E0D6FF4(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  __n128 v9 = sub_18E0C0078((uint64_t)&v24, this, (uint64_t)this, a4, a5, a6, a7, a8);
  if (*(unsigned char *)(v8 + 480))
  {
    if (*(unsigned char *)(v8 + 753) && *(unsigned char *)(v8 + 752))
    {
      if (*(unsigned char *)(v8 + 1928))
      {
        *(_OWORD *)(v8 + 1872) = v30;
        *(_OWORD *)(v8 + 1888) = v31;
        *(_OWORD *)(v8 + 1904) = v32;
        *(void *)(v8 + 1920) = v33;
        *(_OWORD *)(v8 + 1808) = v26;
        *(_OWORD *)(v8 + 1824) = v27;
        *(_OWORD *)(v8 + 1840) = v28;
        *(_OWORD *)(v8 + 1856) = v29;
        v9.n128_u64[0] = v25;
        *(_OWORD *)(v8 + 1792) = v25;
      }
      else
      {
        *(void *)(v8 + 1784) = &unk_1EDD13AA8;
        *(_OWORD *)(v8 + 1872) = v30;
        *(_OWORD *)(v8 + 1888) = v31;
        *(_OWORD *)(v8 + 1904) = v32;
        *(void *)(v8 + 1920) = v33;
        *(_OWORD *)(v8 + 1808) = v26;
        *(_OWORD *)(v8 + 1824) = v27;
        *(_OWORD *)(v8 + 1840) = v28;
        *(_OWORD *)(v8 + 1856) = v29;
        v9.n128_u64[0] = v25;
        *(_OWORD *)(v8 + 1792) = v25;
        *(unsigned char *)(v8 + 1928) = 1;
      }
    }
  }
  else
  {
    __int16 v38 = 12;
    unsigned __int8 v37 = 2;
    v36[0] = (*(uint64_t (**)(uint64_t *, __n128))(v24 + 16))(&v24, v9);
    v36[1] = v10;
    (*(void (**)(void **__return_ptr, uint64_t *))(v24 + 24))(v34, &v24);
    if (v35 >= 0) {
      int8x16_t v16 = v34;
    }
    else {
      int8x16_t v16 = (void **)v34[0];
    }
    cnprint::CNLogFormatter::FormatWarning(v8 + 488, (uint64_t)v36, "Failed to handle event - %s.", v11, v12, v13, v14, v15, (uint64_t)v16);
    if (*(char *)(v8 + 511) >= 0) {
      LOBYTE(v22) = v8 - 24;
    }
    else {
      uint64_t v22 = *(void *)(v8 + 488);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v38, &v37, "%s", v17, v18, v19, v20, v21, v22);
    if (v35 < 0) {
      operator delete(v34[0]);
    }
  }
  return v9.n128_f64[0];
}

void sub_18E0D71E4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 57) < 0) {
    operator delete(*(void **)(v1 - 80));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_18E0D7200(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09EF0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0D7240()
{
  return &unk_1EDD09EF0;
}

void sub_18E0D7250()
{
}

void *sub_18E0D7264()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1EDD1D398;
  return result;
}

void sub_18E0D729C(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1D398;
}

void sub_18E0D72C4(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  __n128 v9 = sub_18E0C04F4((uint64_t)v23, this, (uint64_t)this, a4, a5, a6, a7, a8);
  if (*(unsigned char *)(v8 + 480))
  {
    if (*(unsigned char *)(v8 + 753))
    {
      if (*(unsigned char *)(v8 + 752)) {
        raven::RavenMovingStateEstimator::HandleEvent(v8 + 536, (uint64_t)v23);
      }
    }
  }
  else
  {
    __int16 v28 = 12;
    unsigned __int8 v27 = 2;
    v26[0] = (*(uint64_t (**)(void *, __n128))(v23[0] + 16))(v23, v9);
    v26[1] = v10;
    (*(void (**)(void **__return_ptr, void *))(v23[0] + 24))(v24, v23);
    if (v25 >= 0) {
      int8x16_t v16 = v24;
    }
    else {
      int8x16_t v16 = (void **)v24[0];
    }
    cnprint::CNLogFormatter::FormatWarning(v8 + 488, (uint64_t)v26, "Failed to handle event - %s.", v11, v12, v13, v14, v15, (uint64_t)v16);
    if (*(char *)(v8 + 511) >= 0) {
      LOBYTE(v22) = v8 - 24;
    }
    else {
      uint64_t v22 = *(void *)(v8 + 488);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v28, &v27, "%s", v17, v18, v19, v20, v21, v22);
    if (v25 < 0) {
      operator delete(v24[0]);
    }
  }
}

void sub_18E0D73FC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 57) < 0) {
    operator delete(*(void **)(v1 - 80));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_18E0D7418(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09F00)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0D7458()
{
  return &unk_1EDD09F00;
}

void sub_18E0D7468()
{
}

void *sub_18E0D747C()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1EDD1D4A0;
  return result;
}

void sub_18E0D74B4(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1D4A0;
}

void sub_18E0D74DC(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  sub_18E0C1E40(v22, this, (uint64_t)this, a4, a5, a6, a7, a8);
  if (*(unsigned char *)(v8 + 480))
  {
    if (*(unsigned char *)(v8 + 753))
    {
      if (*(unsigned char *)(v8 + 752)) {
        raven::RavenMovingStateEstimator::HandleEvent(v8 + 536, (const raven::RavenSolutionEvent *)v22);
      }
    }
  }
  else
  {
    __int16 v27 = 12;
    unsigned __int8 v26 = 2;
    v25[0] = (*(uint64_t (**)(void *))(v22[0] + 16))(v22);
    v25[1] = v9;
    (*(void (**)(void **__return_ptr, void *))(v22[0] + 24))(v23, v22);
    if (v24 >= 0) {
      uint64_t v15 = v23;
    }
    else {
      uint64_t v15 = (void **)v23[0];
    }
    cnprint::CNLogFormatter::FormatWarning(v8 + 488, (uint64_t)v25, "Failed to handle event - %s.", v10, v11, v12, v13, v14, (uint64_t)v15);
    if (*(char *)(v8 + 511) >= 0) {
      LOBYTE(v21) = v8 - 24;
    }
    else {
      uint64_t v21 = *(void *)(v8 + 488);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v27, &v26, "%s", v16, v17, v18, v19, v20, v21);
    if (v24 < 0) {
      operator delete(v23[0]);
    }
  }
}

void sub_18E0D7614(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 57) < 0) {
    operator delete(*(void **)(v1 - 80));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_18E0D7630(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09F30)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0D7670()
{
  return &unk_1EDD09F30;
}

void sub_18E0D7680()
{
}

void *sub_18E0D7694()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1EDD1D2E8;
  return result;
}

void sub_18E0D76CC(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1D2E8;
}

void sub_18E0D76F4(int a1, raven::RavenMovingStateEstimatorActiveObject **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  sub_18E0BD4F4((uint64_t)v9, this, (uint64_t)this, a4, a5, a6, a7, a8);
  raven::RavenMovingStateEstimatorActiveObject::HandleEvent(v8, (const raven::TimeMarkEvent *)v9);
}

uint64_t sub_18E0D7734(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09EE0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0D7774()
{
  return &unk_1EDD09EE0;
}

void sub_18E0D7784()
{
}

void *sub_18E0D7798()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1EDD1D6B0;
  return result;
}

void sub_18E0D77D0(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1D6B0;
}

void sub_18E0D77F8(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  sub_18E0BDF10((uint64_t)v23, this, (uint64_t)this, a4, a5, a6, a7, a8);
  raven::RavenEstimator::HandleActivityStateEvent((raven::RavenEstimator *)(v8 + 544), (const raven::ActivityStateEvent *)v23);
  if (v9 && cnprint::CNPrinter::GetLogLevel(v9) <= 1)
  {
    __int16 v28 = 12;
    unsigned __int8 v27 = 1;
    v26[0] = (*(uint64_t (**)(void *))(v23[0] + 16))(v23);
    v26[1] = v10;
    (*(void (**)(void **__return_ptr, void *))(v23[0] + 24))(v24, v23);
    if (v25 >= 0) {
      uint64_t v16 = v24;
    }
    else {
      uint64_t v16 = (void **)v24[0];
    }
    cnprint::CNLogFormatter::FormatWarning(v8 + 496, (uint64_t)v26, "Failed to handle event - %s.", v11, v12, v13, v14, v15, (uint64_t)v16);
    if (*(char *)(v8 + 519) >= 0) {
      LOBYTE(v22) = v8 - 16;
    }
    else {
      uint64_t v22 = *(void *)(v8 + 496);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v28, &v27, "%s", v17, v18, v19, v20, v21, v22);
    if (v25 < 0) {
      operator delete(v24[0]);
    }
  }
}

void sub_18E0D7924(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 57) < 0) {
    operator delete(*(void **)(v1 - 80));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_18E0D7940(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09F90)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0D7980()
{
  return &unk_1EDD09F90;
}

void sub_18E0D7990()
{
}

void *sub_18E0D79A4()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1EDD1D708;
  return result;
}

void sub_18E0D79DC(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1D708;
}

void sub_18E0D7A04(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  sub_18E0BC96C((uint64_t)v23, this, (uint64_t)this, a4, a5, a6, a7, a8);
  raven::RavenEstimator::HandleFitnessSessionEvent((raven::RavenEstimator *)(v8 + 544), (const raven::FitnessSessionEvent *)v23);
  if (v9 && cnprint::CNPrinter::GetLogLevel(v9) <= 1)
  {
    __int16 v28 = 12;
    unsigned __int8 v27 = 1;
    v26[0] = (*(uint64_t (**)(void *))(v23[0] + 16))(v23);
    v26[1] = v10;
    (*(void (**)(void **__return_ptr, void *))(v23[0] + 24))(v24, v23);
    if (v25 >= 0) {
      uint64_t v16 = v24;
    }
    else {
      uint64_t v16 = (void **)v24[0];
    }
    cnprint::CNLogFormatter::FormatWarning(v8 + 496, (uint64_t)v26, "Failed to handle event - %s.", v11, v12, v13, v14, v15, (uint64_t)v16);
    if (*(char *)(v8 + 519) >= 0) {
      LOBYTE(v22) = v8 - 16;
    }
    else {
      uint64_t v22 = *(void *)(v8 + 496);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v28, &v27, "%s", v17, v18, v19, v20, v21, v22);
    if (v25 < 0) {
      operator delete(v24[0]);
    }
  }
}

void sub_18E0D7B30(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 57) < 0) {
    operator delete(*(void **)(v1 - 80));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_18E0D7B4C(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09FA0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0D7B8C()
{
  return &unk_1EDD09FA0;
}

void sub_18E0D7B9C()
{
}

void *sub_18E0D7BB0()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1EDD1D600;
  return result;
}

void sub_18E0D7BE8(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1D600;
}

void sub_18E0D7C10(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  sub_18E0C0078((uint64_t)v23, this, (uint64_t)this, a4, a5, a6, a7, a8);
  raven::RavenEstimator::HandleMountStateEvent((raven::RavenEstimator *)(v8 + 544), (const raven::MountStateEvent *)v23);
  if (v9 && cnprint::CNPrinter::GetLogLevel(v9) <= 1)
  {
    __int16 v28 = 12;
    unsigned __int8 v27 = 1;
    v26[0] = (*(uint64_t (**)(void *))(v23[0] + 16))(v23);
    v26[1] = v10;
    (*(void (**)(void **__return_ptr, void *))(v23[0] + 24))(v24, v23);
    if (v25 >= 0) {
      uint64_t v16 = v24;
    }
    else {
      uint64_t v16 = (void **)v24[0];
    }
    cnprint::CNLogFormatter::FormatWarning(v8 + 496, (uint64_t)v26, "Failed to handle event - %s.", v11, v12, v13, v14, v15, (uint64_t)v16);
    if (*(char *)(v8 + 519) >= 0) {
      LOBYTE(v22) = v8 - 16;
    }
    else {
      uint64_t v22 = *(void *)(v8 + 496);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v28, &v27, "%s", v17, v18, v19, v20, v21, v22);
    if (v25 < 0) {
      operator delete(v24[0]);
    }
  }
}

void sub_18E0D7D3C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 57) < 0) {
    operator delete(*(void **)(v1 - 80));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_18E0D7D58(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09F70)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0D7D98()
{
  return &unk_1EDD09F70;
}

void sub_18E0D7DA8()
{
}

void *sub_18E0D7DBC()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1EDD1D658;
  return result;
}

void sub_18E0D7DF4(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1D658;
}

void sub_18E0D7E1C(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  sub_18E0C04F4((uint64_t)v23, this, (uint64_t)this, a4, a5, a6, a7, a8);
  raven::RavenEstimator::HandleMovingStateEvent((raven::RavenEstimator *)(v8 + 544), (const raven::MovingStateEvent *)v23);
  if (v9 && cnprint::CNPrinter::GetLogLevel(v9) <= 1)
  {
    __int16 v28 = 12;
    unsigned __int8 v27 = 1;
    v26[0] = (*(uint64_t (**)(void *))(v23[0] + 16))(v23);
    v26[1] = v10;
    (*(void (**)(void **__return_ptr, void *))(v23[0] + 24))(v24, v23);
    if (v25 >= 0) {
      uint64_t v16 = v24;
    }
    else {
      uint64_t v16 = (void **)v24[0];
    }
    cnprint::CNLogFormatter::FormatWarning(v8 + 496, (uint64_t)v26, "Failed to handle event - %s.", v11, v12, v13, v14, v15, (uint64_t)v16);
    if (*(char *)(v8 + 519) >= 0) {
      LOBYTE(v22) = v8 - 16;
    }
    else {
      uint64_t v22 = *(void *)(v8 + 496);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v28, &v27, "%s", v17, v18, v19, v20, v21, v22);
    if (v25 < 0) {
      operator delete(v24[0]);
    }
  }
}

void sub_18E0D7F48(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 57) < 0) {
    operator delete(*(void **)(v1 - 80));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_18E0D7F64(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09F80)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0D7FA4()
{
  return &unk_1EDD09F80;
}

void sub_18E0D7FB4()
{
}

void *sub_18E0D7FC8()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1EDD1D4F8;
  return result;
}

void sub_18E0D8000(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1D4F8;
}

void sub_18E0D8028(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  sub_18E0C1834((uint64_t)v23, this, (uint64_t)this, a4, a5, a6, a7, a8);
  uint64_t v9 = (cnprint::CNPrinter *)raven::RavenPassThroughEstimator::HandleEvent((raven::RavenPassThroughEstimator *)(v8 + 544), (const raven::PositionEvent *)v23);
  if (v9 && cnprint::CNPrinter::GetLogLevel(v9) <= 1)
  {
    __int16 v28 = 12;
    unsigned __int8 v27 = 1;
    v26[0] = (*(uint64_t (**)(void *))(v23[0] + 16))(v23);
    v26[1] = v10;
    (*(void (**)(void **__return_ptr, void *))(v23[0] + 24))(v24, v23);
    if (v25 >= 0) {
      uint64_t v16 = v24;
    }
    else {
      uint64_t v16 = (void **)v24[0];
    }
    cnprint::CNLogFormatter::FormatWarning(v8 + 496, (uint64_t)v26, "Failed to handle event - %s.", v11, v12, v13, v14, v15, (uint64_t)v16);
    if (*(char *)(v8 + 519) >= 0) {
      LOBYTE(v22) = v8 - 16;
    }
    else {
      uint64_t v22 = *(void *)(v8 + 496);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v28, &v27, "%s", v17, v18, v19, v20, v21, v22);
    if (v25 < 0) {
      operator delete(v24[0]);
    }
  }
}

void sub_18E0D8154(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 57) < 0) {
    operator delete(*(void **)(v1 - 80));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_18E0D8170(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09F40)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0D81B0()
{
  return &unk_1EDD09F40;
}

void sub_18E0D81C0()
{
}

void *sub_18E0D81D4()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1EDD1D7B8;
  return result;
}

void sub_18E0D820C(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1D7B8;
}

void sub_18E0D8234(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  sub_18E0C13C4((uint64_t)v23, this, (uint64_t)this, a4, a5, a6, a7, a8);
  raven::RavenEstimator::HandlePositionContextStateEvent((raven::RavenEstimator *)(v8 + 544), (const raven::PositionContextStateEvent *)v23);
  if (v9 && cnprint::CNPrinter::GetLogLevel(v9) <= 1)
  {
    __int16 v28 = 12;
    unsigned __int8 v27 = 1;
    v26[0] = (*(uint64_t (**)(void *))(v23[0] + 16))(v23);
    v26[1] = v10;
    (*(void (**)(void **__return_ptr, void *))(v23[0] + 24))(v24, v23);
    if (v25 >= 0) {
      uint64_t v16 = v24;
    }
    else {
      uint64_t v16 = (void **)v24[0];
    }
    cnprint::CNLogFormatter::FormatWarning(v8 + 496, (uint64_t)v26, "Failed to handle event - %s.", v11, v12, v13, v14, v15, (uint64_t)v16);
    if (*(char *)(v8 + 519) >= 0) {
      LOBYTE(v22) = v8 - 16;
    }
    else {
      uint64_t v22 = *(void *)(v8 + 496);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v28, &v27, "%s", v17, v18, v19, v20, v21, v22);
    if (v25 < 0) {
      operator delete(v24[0]);
    }
  }
}

void sub_18E0D8360(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 57) < 0) {
    operator delete(*(void **)(v1 - 80));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_18E0D837C(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09FC0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0D83BC()
{
  return &unk_1EDD09FC0;
}

void sub_18E0D83CC()
{
}

void *sub_18E0D83E0()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1EDD1D760;
  return result;
}

void sub_18E0D8418(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1D760;
}

void sub_18E0D8440(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  sub_18E0C25B0((uint64_t)v23, this, (uint64_t)this, a4, a5, a6, a7, a8);
  raven::RavenEstimator::HandleSignalEnvironmentEvent((raven::RavenEstimator *)(v8 + 544), (const raven::SignalEnvironmentEvent *)v23);
  if (v9 && cnprint::CNPrinter::GetLogLevel(v9) <= 1)
  {
    __int16 v28 = 12;
    unsigned __int8 v27 = 1;
    v26[0] = (*(uint64_t (**)(void *))(v23[0] + 16))(v23);
    v26[1] = v10;
    (*(void (**)(void **__return_ptr, void *))(v23[0] + 24))(v24, v23);
    if (v25 >= 0) {
      uint64_t v16 = v24;
    }
    else {
      uint64_t v16 = (void **)v24[0];
    }
    cnprint::CNLogFormatter::FormatWarning(v8 + 496, (uint64_t)v26, "Failed to handle event - %s.", v11, v12, v13, v14, v15, (uint64_t)v16);
    if (*(char *)(v8 + 519) >= 0) {
      LOBYTE(v22) = v8 - 16;
    }
    else {
      uint64_t v22 = *(void *)(v8 + 496);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v28, &v27, "%s", v17, v18, v19, v20, v21, v22);
    if (v25 < 0) {
      operator delete(v24[0]);
    }
  }
}

void sub_18E0D856C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 57) < 0) {
    operator delete(*(void **)(v1 - 80));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_18E0D8588(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09FB0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0D85C8()
{
  return &unk_1EDD09FB0;
}

void sub_18E0D85D8()
{
}

void *sub_18E0D85EC()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1EDD1D5A8;
  return result;
}

void sub_18E0D8624(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1D5A8;
}

void sub_18E0D864C(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  sub_18E0C3A8C((uint64_t)v23, this, (uint64_t)this, a4, a5, a6, a7, a8);
  uint64_t v9 = (cnprint::CNPrinter *)raven::RavenPassThroughEstimator::HandleEvent((raven::RavenPassThroughEstimator *)(v8 + 544), (const raven::VelocityEvent *)v23);
  if (v9 && cnprint::CNPrinter::GetLogLevel(v9) <= 1)
  {
    __int16 v28 = 12;
    unsigned __int8 v27 = 1;
    v26[0] = (*(uint64_t (**)(void *))(v23[0] + 16))(v23);
    v26[1] = v10;
    (*(void (**)(void **__return_ptr, void *))(v23[0] + 24))(v24, v23);
    if (v25 >= 0) {
      uint64_t v16 = v24;
    }
    else {
      uint64_t v16 = (void **)v24[0];
    }
    cnprint::CNLogFormatter::FormatWarning(v8 + 496, (uint64_t)v26, "Failed to handle event - %s.", v11, v12, v13, v14, v15, (uint64_t)v16);
    if (*(char *)(v8 + 519) >= 0) {
      LOBYTE(v22) = v8 - 16;
    }
    else {
      uint64_t v22 = *(void *)(v8 + 496);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v28, &v27, "%s", v17, v18, v19, v20, v21, v22);
    if (v25 < 0) {
      operator delete(v24[0]);
    }
  }
}

void sub_18E0D8778(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 57) < 0) {
    operator delete(*(void **)(v1 - 80));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_18E0D8794(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09F60)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0D87D4()
{
  return &unk_1EDD09F60;
}

void sub_18E0D87E4()
{
}

void *sub_18E0D87F8()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1EDD1D550;
  return result;
}

void sub_18E0D8830(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1D550;
}

void sub_18E0D8858(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  sub_18E0BD4F4((uint64_t)&v27, this, (uint64_t)this, a4, a5, a6, a7, a8);
  uint64_t v9 = (cnprint::CNPrinter *)raven::RavenPassThroughEstimator::HandleEvent(v8 + 544, (uint64_t)&v27);
  if (v9 && cnprint::CNPrinter::GetLogLevel(v9) <= 1)
  {
    __int16 v36 = 12;
    unsigned __int8 v35 = 1;
    __src[0] = (*(uint64_t (**)(uint64_t *))(v27 + 16))(&v27);
    __src[1] = v10;
    (*(void (**)(void **__return_ptr, uint64_t *))(v27 + 24))(__p, &v27);
    uint64_t v16 = v31 >= 0 ? __p : (void **)__p[0];
    cnprint::CNLogFormatter::FormatWarning(v8 + 496, (uint64_t)__src, "Failed to handle event - %s.", v11, v12, v13, v14, v15, (uint64_t)v16);
    if (*(char *)(v8 + 519) >= 0) {
      LOBYTE(v22) = v8 - 16;
    }
    else {
      uint64_t v22 = *(void *)(v8 + 496);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v36, &v35, "%s", v17, v18, v19, v20, v21, v22);
    if (SHIBYTE(v31) < 0) {
      operator delete(__p[0]);
    }
  }
  if (*(unsigned char *)(v8 + 3824))
  {
    *(_OWORD *)__p = *(_OWORD *)(v8 + 3184);
    if (sub_18DEE4C00((double *)__p, (double *)(v8 + 3808)))
    {
      sub_18DFF49CC((uint64_t)__p);
      __p[1] = (void *)cnframework::ActiveObjectBase::GetCurrentTime((cnframework::ActiveObjectBase *)v8);
      uint64_t v31 = v23;
      raven::PopulateAllTimeFields((uint64_t)&__p[1], (uint64_t)&v28, v24, v25);
      raven::RavenPassThroughEstimator::GetRavenSolution((raven::RavenPassThroughEstimator *)(v8 + 544), (uint64_t)__src);
      memcpy(v33, __src, sizeof(v33));
      raven::RavenPassThroughEstimator::GetRavenStatus((raven::RavenPassThroughEstimator *)(v8 + 544), (uint64_t)__src);
      memcpy(v32, __src, sizeof(v32));
      raven::RavenEstimator::GetRavenActivity((raven::RavenEstimator *)(v8 + 544), (uint64_t)__src);
      memcpy(v34, __src, sizeof(v34));
      *(void *)(v8 + 3808) = (*(uint64_t (**)(uint64_t *))(v27 + 16))(&v27);
      *(void *)(v8 + 3816) = v26;
      sub_18E0C3028();
    }
  }
}

void sub_18E0D8A7C(_Unwind_Exception *exception_object)
{
}

void sub_18E0D8A9C()
{
  if (SLOBYTE(STACK[0x4B7]) < 0) {
    operator delete((void *)STACK[0x4A0]);
  }
  JUMPOUT(0x18E0D8A94);
}

uint64_t sub_18E0D8AB4(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09F50)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0D8AF4()
{
  return &unk_1EDD09F50;
}

void sub_18E0D8B04()
{
}

void *sub_18E0D8B18()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1EDD1DBD8;
  return result;
}

void sub_18E0D8B50(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1DBD8;
}

void sub_18E0D8B78(int a1, raven::RavenPositionContextEstimatorActiveObject **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  sub_18E0BDF10((uint64_t)v9, this, (uint64_t)this, a4, a5, a6, a7, a8);
  raven::RavenPositionContextEstimatorActiveObject::HandleEvent(v8, (const raven::ActivityStateEvent *)v9);
}

uint64_t sub_18E0D8BB8(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD0A080)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0D8BF8()
{
  return &unk_1EDD0A080;
}

void sub_18E0D8C08()
{
}

void *sub_18E0D8C1C()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1EDD1DC88;
  return result;
}

void sub_18E0D8C54(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1DC88;
}

void sub_18E0D8C7C(int a1, raven::RavenPositionContextEstimatorActiveObject **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = *a2;
  uint64_t EventType = cnframework::GenericEvent::GetEventType(this, (uint64_t)a2, (uint64_t)this, a4, a5, a6, a7, a8);
  {
    uint64_t v18 = *((void *)this + 2);
    if (v18) {
      uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 16))(v18);
    }
    else {
      uint64_t v19 = MEMORY[0x1E4FBA3D8];
    }
    uint64_t v26 = (const char *)(*(void *)(v19 + 8) & 0x7FFFFFFFFFFFFFFFLL);
    if (v26 != (const char *)((unint64_t)off_1EDD05440 & 0x7FFFFFFFFFFFFFFFLL)
      && strcmp(v26, (const char *)((unint64_t)off_1EDD05440 & 0x7FFFFFFFFFFFFFFFLL)))
    {
      v33.__vftable = 0;
      std::bad_cast::bad_cast(&v33);
      v33.__vftable = (std::bad_cast_vtbl *)&unk_1EDD12A18;
      sub_18E0BA8B8();
    }
    uint64_t v27 = (_OWORD *)*((void *)this + 2);
    v33.__vftable = (std::bad_cast_vtbl *)&unk_1EDD143A8;
    long long v29 = v27[2];
    long long v28 = v27[3];
    long long v34 = v27[1];
    long long v35 = v29;
    long long v36 = v28;
    long long v31 = v27[5];
    long long v30 = v27[6];
    long long v32 = *(_OWORD *)((char *)v27 + 106);
    long long v37 = v27[4];
    *(_OWORD *)&v39[10] = v32;
    *(_OWORD *)uint64_t v39 = v30;
    long long v38 = v31;
  }
  else
  {
    LOWORD(v33.__vftable) = 3;
    unsigned __int8 v40 = 5;
    uint64_t v20 = cnframework::GenericEvent::GetEventType(this, v11, v12, v13, v14, v15, v16, v17);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v33, &v40, "Attempted to cast a GenericEvent of type %s to type %s.", v21, v22, v23, v24, v25, *(unsigned char *)(v20 + 8));
    long long v35 = 0uLL;
    long long v38 = 0uLL;
    *(_OWORD *)&v39[16] = 0u;
    long long v34 = 0uLL;
    v33.__vftable = (std::bad_cast_vtbl *)&unk_1EDD143A8;
    long long v36 = 0uLL;
    long long v37 = 0uLL;
    *(void *)uint64_t v39 = 0;
    *(void *)&v39[8] = 0x7FF8000000000000;
  }
  raven::RavenPositionContextEstimatorActiveObject::HandleEvent(v9, (const raven::GnssAvailabilityEvent *)&v33);
}

void sub_18E0D8E60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::exception a11)
{
}

uint64_t sub_18E0D8E74(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD0A0A0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0D8EB4()
{
  return &unk_1EDD0A0A0;
}

void sub_18E0D8EC4()
{
}

void *sub_18E0D8ED8()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1EDD1DD38;
  return result;
}

void sub_18E0D8F10(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1DD38;
}

void sub_18E0D8F38(int a1, raven::RavenPositionContextEstimatorActiveObject **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  sub_18E0BF728((uint64_t)v9, this, (uint64_t)this, a4, a5, a6, a7, a8);
  raven::RavenPositionContextEstimatorActiveObject::HandleEvent(v8, (const raven::GnssPreprocessedMeasurementsEvent *)v9);
  v9[0] = &unk_1EDD154D0;
  uint64_t v11 = (void **)&v10;
  sub_18DEE4B60(&v11);
}

void sub_18E0D8FA8(_Unwind_Exception *a1)
{
  *(void *)(v2 - 24) = v1 + 96;
  sub_18DEE4B60((void ***)(v2 - 24));
  _Unwind_Resume(a1);
}

uint64_t sub_18E0D8FE0(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD0A0C0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0D9020()
{
  return &unk_1EDD0A0C0;
}

void sub_18E0D9030()
{
}

void *sub_18E0D9044()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1EDD1DC30;
  return result;
}

void sub_18E0D907C(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1DC30;
}

void sub_18E0D90A4(int a1, raven::RavenPositionContextEstimatorActiveObject **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  sub_18E0C1E40(v9, this, (uint64_t)this, a4, a5, a6, a7, a8);
  raven::RavenPositionContextEstimatorActiveObject::HandleEvent(v8, (const raven::RavenSolutionEvent *)v9);
}

uint64_t sub_18E0D90E4(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD0A090)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0D9124()
{
  return &unk_1EDD0A090;
}

void sub_18E0D9134()
{
}

void *sub_18E0D9148()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1EDD1DCE0;
  return result;
}

void sub_18E0D9180(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1DCE0;
}

void sub_18E0D91A8(int a1, raven::RavenPositionContextEstimatorActiveObject **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  sub_18E0C25B0((uint64_t)v9, this, (uint64_t)this, a4, a5, a6, a7, a8);
  raven::RavenPositionContextEstimatorActiveObject::HandleEvent(v8, (const raven::SignalEnvironmentEvent *)v9);
}

uint64_t sub_18E0D91E8(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD0A0B0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0D9228()
{
  return &unk_1EDD0A0B0;
}

void sub_18E0D9238()
{
}

void *sub_18E0D924C()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1EDD1DB80;
  return result;
}

void sub_18E0D9284(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1DB80;
}

void sub_18E0D92AC(int a1, raven::RavenPositionContextEstimatorActiveObject **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  sub_18E0BD4F4((uint64_t)v9, this, (uint64_t)this, a4, a5, a6, a7, a8);
  raven::RavenPositionContextEstimatorActiveObject::HandleEvent(v8, (const raven::TimeMarkEvent *)v9);
}

uint64_t sub_18E0D92EC(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD0A070)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0D932C()
{
  return &unk_1EDD0A070;
}

void sub_18E0D933C()
{
}

void *sub_18E0D9350()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1EDD1AFD8;
  return result;
}

void sub_18E0D9388(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1AFD8;
}

void sub_18E0D93B0(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  sub_18E0BDF10((uint64_t)v24, this, (uint64_t)this, a4, a5, a6, a7, a8);
  double v9 = raven::RavenPNTEstimator::HandleEvent((raven::RavenPNTEstimator *)(v8 + 544), (const raven::ActivityStateEvent *)v24);
  if (v10)
  {
    __int16 v29 = 12;
    unsigned __int8 v28 = 2;
    v27[0] = (*(uint64_t (**)(void *, double))(v24[0] + 16))(v24, v9);
    v27[1] = v11;
    (*(void (**)(void **__return_ptr, void *))(v24[0] + 24))(v25, v24);
    if (v26 >= 0) {
      uint64_t v17 = v25;
    }
    else {
      uint64_t v17 = (void **)v25[0];
    }
    cnprint::CNLogFormatter::FormatWarning(v8 + 496, (uint64_t)v27, "Failed to handle event - %s.", v12, v13, v14, v15, v16, (uint64_t)v17);
    if (*(char *)(v8 + 519) >= 0) {
      LOBYTE(v23) = v8 - 16;
    }
    else {
      uint64_t v23 = *(void *)(v8 + 496);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v29, &v28, "%s", v18, v19, v20, v21, v22, v23);
    if (v26 < 0) {
      operator delete(v25[0]);
    }
  }
}

void sub_18E0D94D0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 57) < 0) {
    operator delete(*(void **)(v1 - 80));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_18E0D94EC(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09880)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0D952C()
{
  return &unk_1EDD09880;
}

void sub_18E0D953C()
{
}

void *sub_18E0D9550()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1EDD1AF80;
  return result;
}

void sub_18E0D9588(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1AF80;
}

void sub_18E0D95B0(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  sub_18E0BA6B4((uint64_t)v22, this, (uint64_t)this, a4, a5, a6, a7, a8);
  if (raven::RavenPNTEstimator::HandleEvent((raven::RavenPNTEstimator *)(v8 + 544), (const raven::AccelerometerEvent *)v22))
  {
    __int16 v27 = 12;
    unsigned __int8 v26 = 2;
    v25[0] = (*(uint64_t (**)(void *))(v22[0] + 16))(v22);
    v25[1] = v9;
    (*(void (**)(void **__return_ptr, void *))(v22[0] + 24))(v23, v22);
    if (v24 >= 0) {
      uint64_t v15 = v23;
    }
    else {
      uint64_t v15 = (void **)v23[0];
    }
    cnprint::CNLogFormatter::FormatWarning(v8 + 496, (uint64_t)v25, "Failed to handle event - %s.", v10, v11, v12, v13, v14, (uint64_t)v15);
    if (*(char *)(v8 + 519) >= 0) {
      LOBYTE(v21) = v8 - 16;
    }
    else {
      uint64_t v21 = *(void *)(v8 + 496);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v27, &v26, "%s", v16, v17, v18, v19, v20, v21);
    if (v24 < 0) {
      operator delete(v23[0]);
    }
  }
}

void sub_18E0D96D0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 57) < 0) {
    operator delete(*(void **)(v1 - 80));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_18E0D96EC(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09870)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0D972C()
{
  return &unk_1EDD09870;
}

void sub_18E0D973C()
{
}

void *sub_18E0D9750()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1EDD1B298;
  return result;
}

void sub_18E0D9788(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1B298;
}

void sub_18E0D97B0(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  sub_18E0BD958((uint64_t)v23, this, (uint64_t)this, a4, a5, a6, a7, a8);
  if (raven::RavenPNTEstimator::HandleEvent((raven::RavenPNTEstimator *)(v8 + 544), (const raven::AccessoryVehicleSpeedEvent *)v23))
  {
    __int16 v28 = 12;
    unsigned __int8 v27 = 2;
    v26[0] = (*(uint64_t (**)(void *))(v23[0] + 16))(v23);
    v26[1] = v9;
    (*(void (**)(void **__return_ptr, void *))(v23[0] + 24))(v24, v23);
    if (v25 >= 0) {
      uint64_t v15 = v24;
    }
    else {
      uint64_t v15 = (void **)v24[0];
    }
    char v16 = cnprint::CNLogFormatter::FormatWarning(v8 + 496, (uint64_t)v26, "Failed to handle event - %s.", v10, v11, v12, v13, v14, (uint64_t)v15);
    if (*(char *)(v8 + 519) >= 0) {
      LOBYTE(v22) = v16;
    }
    else {
      uint64_t v22 = *(void *)(v8 + 496);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v28, &v27, "%s", v17, v18, v19, v20, v21, v22);
    if (v25 < 0) {
      operator delete(v24[0]);
    }
  }
  raven::AccessoryVehicleSpeedEvent::~AccessoryVehicleSpeedEvent((raven::AccessoryVehicleSpeedEvent *)v23);
}

void sub_18E0D98D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(char *)(v2 - 57) < 0) {
    operator delete(*(void **)(v2 - 80));
  }
  raven::AccessoryVehicleSpeedEvent::~AccessoryVehicleSpeedEvent((raven::AccessoryVehicleSpeedEvent *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_18E0D9900(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09900)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0D9940()
{
  return &unk_1EDD09900;
}

void sub_18E0D9950()
{
}

void *sub_18E0D9964()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1EDD1AB60;
  return result;
}

void sub_18E0D999C(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1AB60;
}

void sub_18E0D99C4(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  sub_18E0BE86C((uint64_t)v22, this, (uint64_t)this, a4, a5, a6, a7, a8);
  if (raven::RavenPNTEstimator::HandleEvent((raven::RavenPNTEstimator *)(v8 + 544), (const raven::AltitudeEvent *)v22))
  {
    __int16 v27 = 12;
    unsigned __int8 v26 = 2;
    v25[0] = (*(uint64_t (**)(void *))(v22[0] + 16))(v22);
    v25[1] = v9;
    (*(void (**)(void **__return_ptr, void *))(v22[0] + 24))(v23, v22);
    if (v24 >= 0) {
      uint64_t v15 = v23;
    }
    else {
      uint64_t v15 = (void **)v23[0];
    }
    cnprint::CNLogFormatter::FormatWarning(v8 + 496, (uint64_t)v25, "Failed to handle event - %s.", v10, v11, v12, v13, v14, (uint64_t)v15);
    if (*(char *)(v8 + 519) >= 0) {
      LOBYTE(v21) = v8 - 16;
    }
    else {
      uint64_t v21 = *(void *)(v8 + 496);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v27, &v26, "%s", v16, v17, v18, v19, v20, v21);
    if (v24 < 0) {
      operator delete(v23[0]);
    }
  }
}

void sub_18E0D9AE4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 57) < 0) {
    operator delete(*(void **)(v1 - 80));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_18E0D9B00(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD097B0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0D9B40()
{
  return &unk_1EDD097B0;
}

void sub_18E0D9B50()
{
}

void *sub_18E0D9B64()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1EDD1B088;
  return result;
}

void sub_18E0D9B9C(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1B088;
}

void sub_18E0D9BC4(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  sub_18E0BE3AC((uint64_t)v22, this, (uint64_t)this, a4, a5, a6, a7, a8);
  if (raven::RavenPNTEstimator::HandleEvent((raven::RavenPNTEstimator *)(v8 + 544), (const raven::AltitudeChangeEvent *)v22))
  {
    __int16 v27 = 12;
    unsigned __int8 v26 = 2;
    v25[0] = (*(uint64_t (**)(void *))(v22[0] + 16))(v22);
    v25[1] = v9;
    (*(void (**)(void **__return_ptr, void *))(v22[0] + 24))(v23, v22);
    if (v24 >= 0) {
      uint64_t v15 = v23;
    }
    else {
      uint64_t v15 = (void **)v23[0];
    }
    cnprint::CNLogFormatter::FormatWarning(v8 + 496, (uint64_t)v25, "Failed to handle event - %s.", v10, v11, v12, v13, v14, (uint64_t)v15);
    if (*(char *)(v8 + 519) >= 0) {
      LOBYTE(v21) = v8 - 16;
    }
    else {
      uint64_t v21 = *(void *)(v8 + 496);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v27, &v26, "%s", v16, v17, v18, v19, v20, v21);
    if (v24 < 0) {
      operator delete(v23[0]);
    }
  }
}

void sub_18E0D9CE4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 57) < 0) {
    operator delete(*(void **)(v1 - 80));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_18E0D9D00(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD098A0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0D9D40()
{
  return &unk_1EDD098A0;
}

void sub_18E0D9D50()
{
}

void *sub_18E0D9D64()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1EDD1B0E0;
  return result;
}

void sub_18E0D9D9C(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1B0E0;
}

void sub_18E0D9DC4(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  sub_18E0CE520((uint64_t)v22, this, (uint64_t)this, a4, a5, a6, a7, a8);
  if (raven::RavenPNTEstimator::HandleEvent((raven::RavenPNTEstimator *)(v8 + 544), (const raven::AttitudeChangeEvent *)v22))
  {
    __int16 v27 = 12;
    unsigned __int8 v26 = 2;
    v25[0] = (*(uint64_t (**)(void *))(v22[0] + 16))(v22);
    v25[1] = v9;
    (*(void (**)(void **__return_ptr, void *))(v22[0] + 24))(v23, v22);
    if (v24 >= 0) {
      uint64_t v15 = v23;
    }
    else {
      uint64_t v15 = (void **)v23[0];
    }
    cnprint::CNLogFormatter::FormatWarning(v8 + 496, (uint64_t)v25, "Failed to handle event - %s.", v10, v11, v12, v13, v14, (uint64_t)v15);
    if (*(char *)(v8 + 519) >= 0) {
      LOBYTE(v21) = v8 - 16;
    }
    else {
      uint64_t v21 = *(void *)(v8 + 496);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v27, &v26, "%s", v16, v17, v18, v19, v20, v21);
    if (v24 < 0) {
      operator delete(v23[0]);
    }
  }
}

void sub_18E0D9EE4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 57) < 0) {
    operator delete(*(void **)(v1 - 80));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_18E0D9F00(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD098B0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0D9F40()
{
  return &unk_1EDD098B0;
}

void sub_18E0D9F50()
{
}

void *sub_18E0D9F64()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1EDD1ABB8;
  return result;
}

void sub_18E0D9F9C(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1ABB8;
}

void sub_18E0D9FC4(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  sub_18E0C7A18((uint64_t)v22, this, (uint64_t)this, a4, a5, a6, a7, a8);
  if (raven::RavenPNTEstimator::HandleEvent((raven::RavenPNTEstimator *)(v8 + 544), (const raven::AttitudeEvent *)v22))
  {
    __int16 v27 = 12;
    unsigned __int8 v26 = 2;
    v25[0] = (*(uint64_t (**)(void *))(v22[0] + 16))(v22);
    v25[1] = v9;
    (*(void (**)(void **__return_ptr, void *))(v22[0] + 24))(v23, v22);
    if (v24 >= 0) {
      uint64_t v15 = v23;
    }
    else {
      uint64_t v15 = (void **)v23[0];
    }
    cnprint::CNLogFormatter::FormatWarning(v8 + 496, (uint64_t)v25, "Failed to handle event - %s.", v10, v11, v12, v13, v14, (uint64_t)v15);
    if (*(char *)(v8 + 519) >= 0) {
      LOBYTE(v21) = v8 - 16;
    }
    else {
      uint64_t v21 = *(void *)(v8 + 496);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v27, &v26, "%s", v16, v17, v18, v19, v20, v21);
    if (v24 < 0) {
      operator delete(v23[0]);
    }
  }
}

void sub_18E0DA0E4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 57) < 0) {
    operator delete(*(void **)(v1 - 80));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_18E0DA100(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD097C0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0DA140()
{
  return &unk_1EDD097C0;
}

void sub_18E0DA150()
{
}

void *sub_18E0DA164()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1EDD1B2F0;
  return result;
}

void sub_18E0DA19C(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1B2F0;
}

void sub_18E0DA1C4(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  sub_18E0BEFB4((uint64_t)v77, this, (uint64_t)this, a4, a5, a6, a7, a8);
  if (v79 == *(unsigned char *)(v8 + 600))
  {
    __int16 v83 = 12;
    unsigned __int8 v82 = 3;
    long long v81 = v78;
    cnprint::CNLogFormatter::FormatGeneral(v8 + 496, (uint64_t)&v81, "EstimatorErrorRecoveryEvent received, type, %u", v80);
    if (*(char *)(v8 + 519) >= 0) {
      LOBYTE(v14) = v8 - 16;
    }
    else {
      uint64_t v14 = *(void *)(v8 + 496);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v83, &v82, "%s", v9, v10, v11, v12, v13, v14);
    switch(v80)
    {
      case 1u:
        __int16 v83 = 12;
        unsigned __int8 v82 = 3;
        long long v81 = v78;
        cnprint::CNLogFormatter::FormatGeneral(v8 + 496, (uint64_t)&v81, "Initiating RavenErrorRecoveryAction::InflateAttitudeUncertainty");
        if (*(char *)(v8 + 519) >= 0) {
          LOBYTE(v20) = v8 - 16;
        }
        else {
          uint64_t v20 = *(void *)(v8 + 496);
        }
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v83, &v82, "%s", v15, v16, v17, v18, v19, v20);
        raven::RavenPNTEstimator::InflateAttitudeUncertainty((raven::RavenPNTEstimator *)(v8 + 544), *(double *)(*(void *)(v8 + 1712) + 1424));
        break;
      case 2u:
        __int16 v83 = 12;
        unsigned __int8 v82 = 3;
        long long v81 = v78;
        cnprint::CNLogFormatter::FormatGeneral(v8 + 496, (uint64_t)&v81, "Initiating RavenErrorRecoveryAction::InflateInsUncertainty");
        if (*(char *)(v8 + 519) >= 0) {
          LOBYTE(v32) = v8 - 16;
        }
        else {
          uint64_t v32 = *(void *)(v8 + 496);
        }
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v83, &v82, "%s", v27, v28, v29, v30, v31, v32);
        raven::RavenPNTEstimator::InflateInsUncertainty((raven::RavenPNTEstimator *)(v8 + 544), *(double *)(*(void *)(v8 + 1712) + 1432));
        break;
      case 3u:
        __int16 v83 = 12;
        unsigned __int8 v82 = 3;
        long long v81 = v78;
        cnprint::CNLogFormatter::FormatGeneral(v8 + 496, (uint64_t)&v81, "Initiating RavenErrorRecoveryAction::InflatePositionUncertainty");
        if (*(char *)(v8 + 519) >= 0) {
          LOBYTE(v38) = v8 - 16;
        }
        else {
          uint64_t v38 = *(void *)(v8 + 496);
        }
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v83, &v82, "%s", v33, v34, v35, v36, v37, v38);
        raven::RavenPNTEstimator::InflatePositionUncertainty((raven::RavenPNTEstimator *)(v8 + 544), *(double *)(*(void *)(v8 + 1712) + 1440));
        break;
      case 4u:
        __int16 v83 = 12;
        unsigned __int8 v82 = 3;
        long long v81 = v78;
        cnprint::CNLogFormatter::FormatGeneral(v8 + 496, (uint64_t)&v81, "Initiating RavenErrorRecoveryAction::InflateVelocityUncertainty");
        if (*(char *)(v8 + 519) >= 0) {
          LOBYTE(v44) = v8 - 16;
        }
        else {
          uint64_t v44 = *(void *)(v8 + 496);
        }
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v83, &v82, "%s", v39, v40, v41, v42, v43, v44);
        raven::RavenPNTEstimator::InflateVelocityUncertainty((raven::RavenPNTEstimator *)(v8 + 544), *(double *)(*(void *)(v8 + 1712) + 1448));
        break;
      case 5u:
        __int16 v83 = 12;
        unsigned __int8 v82 = 3;
        long long v81 = v78;
        cnprint::CNLogFormatter::FormatGeneral(v8 + 496, (uint64_t)&v81, "Initiating RavenErrorRecoveryAction::InflateXOUncertainty");
        if (*(char *)(v8 + 519) >= 0) {
          LOBYTE(v50) = v8 - 16;
        }
        else {
          uint64_t v50 = *(void *)(v8 + 496);
        }
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v83, &v82, "%s", v45, v46, v47, v48, v49, v50);
        raven::RavenPNTEstimator::InflateXOUncertainty((raven::RavenPNTEstimator *)(v8 + 544), *(double *)(*(void *)(v8 + 1712) + 1456));
        break;
      case 6u:
        __int16 v83 = 12;
        unsigned __int8 v82 = 3;
        long long v81 = v78;
        cnprint::CNLogFormatter::FormatGeneral(v8 + 496, (uint64_t)&v81, "Initiating RavenErrorRecoveryAction::ResetAO");
        if (*(char *)(v8 + 519) >= 0) {
          LOBYTE(v56) = v8 - 16;
        }
        else {
          uint64_t v56 = *(void *)(v8 + 496);
        }
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v83, &v82, "%s", v51, v52, v53, v54, v55, v56);
        (*(void (**)(uint64_t))(*(void *)v8 + 48))(v8);
        break;
      case 7u:
        __int16 v83 = 12;
        unsigned __int8 v82 = 3;
        long long v81 = v78;
        cnprint::CNLogFormatter::FormatGeneral(v8 + 496, (uint64_t)&v81, "Initiating RavenErrorRecoveryAction::ResetEstimator");
        if (*(char *)(v8 + 519) >= 0) {
          LOBYTE(v62) = v8 - 16;
        }
        else {
          uint64_t v62 = *(void *)(v8 + 496);
        }
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v83, &v82, "%s", v57, v58, v59, v60, v61, v62);
        raven::RavenPNTEstimator::Reset((raven::RavenPNTEstimator *)(v8 + 544));
      case 8u:
        __int16 v83 = 12;
        unsigned __int8 v82 = 3;
        long long v81 = v78;
        cnprint::CNLogFormatter::FormatGeneral(v8 + 496, (uint64_t)&v81, "Initiating RavenErrorRecoveryAction::ResetInsStates");
        if (*(char *)(v8 + 519) >= 0) {
          LOBYTE(v68) = v8 - 16;
        }
        else {
          uint64_t v68 = *(void *)(v8 + 496);
        }
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v83, &v82, "%s", v63, v64, v65, v66, v67, v68);
        raven::RavenPNTEstimator::ResetInsStates((raven::RavenPNTEstimator *)(v8 + 544), v69, v70);
      case 9u:
        __int16 v83 = 12;
        unsigned __int8 v82 = 3;
        long long v81 = v78;
        cnprint::CNLogFormatter::FormatGeneral(v8 + 496, (uint64_t)&v81, "Initiating RavenErrorRecoveryAction::ResetXOStates");
        if (*(char *)(v8 + 519) >= 0) {
          LOBYTE(v76) = v8 - 16;
        }
        else {
          uint64_t v76 = *(void *)(v8 + 496);
        }
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v83, &v82, "%s", v71, v72, v73, v74, v75, v76);
        raven::RavenPNTEstimator::ResetOscillatorStates((raven::RavenPNTEstimator *)(v8 + 544));
        break;
      default:
        __int16 v83 = v8 + 544;
        unsigned __int8 v82 = 4;
        long long v81 = v78;
        cnprint::CNLogFormatter::FormatGeneral(v8 + 496, (uint64_t)&v81, "Unhandled RavenErrorRecoveryAction, type, %u", v80);
        if (*(char *)(v8 + 519) >= 0) {
          LOBYTE(v26) = v8 - 16;
        }
        else {
          uint64_t v26 = *(void *)(v8 + 496);
        }
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v83, &v82, "%s", v21, v22, v23, v24, v25, v26);
        break;
    }
  }
}

uint64_t sub_18E0DA6D8(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09910)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0DA718()
{
  return &unk_1EDD09910;
}

void sub_18E0DA728()
{
}

void *sub_18E0DA73C()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1EDD1B138;
  return result;
}

void sub_18E0DA774(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1B138;
}

void sub_18E0DA79C(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  sub_18E0BC96C((uint64_t)v24, this, (uint64_t)this, a4, a5, a6, a7, a8);
  __n128 v9 = raven::RavenEstimator::HandleFitnessSessionEvent((raven::RavenEstimator *)(v8 + 544), (const raven::FitnessSessionEvent *)v24);
  if (v10)
  {
    __int16 v29 = 12;
    unsigned __int8 v28 = 2;
    v27[0] = (*(uint64_t (**)(void *, __n128))(v24[0] + 16))(v24, v9);
    v27[1] = v11;
    (*(void (**)(void **__return_ptr, void *))(v24[0] + 24))(v25, v24);
    if (v26 >= 0) {
      uint64_t v17 = v25;
    }
    else {
      uint64_t v17 = (void **)v25[0];
    }
    cnprint::CNLogFormatter::FormatWarning(v8 + 496, (uint64_t)v27, "Failed to handle event - %s.", v12, v13, v14, v15, v16, (uint64_t)v17);
    if (*(char *)(v8 + 519) >= 0) {
      LOBYTE(v23) = v8 - 16;
    }
    else {
      uint64_t v23 = *(void *)(v8 + 496);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v29, &v28, "%s", v18, v19, v20, v21, v22, v23);
    if (v26 < 0) {
      operator delete(v25[0]);
    }
  }
}

void sub_18E0DA8BC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 57) < 0) {
    operator delete(*(void **)(v1 - 80));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_18E0DA8D8(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD098C0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0DA918()
{
  return &unk_1EDD098C0;
}

void sub_18E0DA928()
{
}

void *sub_18E0DA93C()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1EDD1B3A0;
  return result;
}

void sub_18E0DA974(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1B3A0;
}

void sub_18E0DA99C(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  sub_18E0BF728((uint64_t)v23, this, (uint64_t)this, a4, a5, a6, a7, a8);
  if (raven::RavenPNTEstimator::HandleEvent((raven::RavenPNTEstimator *)(v8 + 544), (const raven::GnssPreprocessedMeasurementsEvent *)v23))
  {
    v29[0] = 12;
    unsigned __int8 v28 = 2;
    v27[0] = (*(uint64_t (**)(void *))(v23[0] + 16))(v23);
    v27[1] = v9;
    (*(void (**)(void ***__return_ptr, void *))(v23[0] + 24))(v25, v23);
    if (v26 >= 0) {
      uint64_t v15 = v25;
    }
    else {
      uint64_t v15 = (void ***)v25[0];
    }
    char v16 = cnprint::CNLogFormatter::FormatWarning(v8 + 496, (uint64_t)v27, "Failed to handle event - %s.", v10, v11, v12, v13, v14, (uint64_t)v15);
    if (*(char *)(v8 + 519) >= 0) {
      LOBYTE(v22) = v16;
    }
    else {
      uint64_t v22 = *(void *)(v8 + 496);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v29, &v28, "%s", v17, v18, v19, v20, v21, v22);
    if (v26 < 0) {
      operator delete(v25[0]);
    }
  }
  v23[0] = &unk_1EDD154D0;
  v25[0] = (void **)&v24;
  sub_18DEE4B60(v25);
}

void sub_18E0DAAF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (*(char *)(v23 - 65) < 0) {
    operator delete(*(void **)(v23 - 88));
  }
  *(void *)(v23 - 40) = &a23;
  sub_18DEE4B60((void ***)(v23 - 40));
  _Unwind_Resume(a1);
}

uint64_t sub_18E0DAB48(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09930)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0DAB88()
{
  return &unk_1EDD09930;
}

void sub_18E0DAB98()
{
}

void *sub_18E0DABAC()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1EDD1B348;
  return result;
}

void sub_18E0DABE4(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1B348;
}

void sub_18E0DAC0C(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = *a2;
  uint64_t EventType = cnframework::GenericEvent::GetEventType(this, (uint64_t)a2, (uint64_t)this, a4, a5, a6, a7, a8);
  {
    uint64_t v18 = *((void *)this + 2);
    if (v18) {
      uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 16))(v18);
    }
    else {
      uint64_t v19 = MEMORY[0x1E4FBA3D8];
    }
    char v26 = (const char *)(*(void *)(v19 + 8) & 0x7FFFFFFFFFFFFFFFLL);
    if (v26 != (const char *)((unint64_t)off_1EDD05988 & 0x7FFFFFFFFFFFFFFFLL)
      && strcmp(v26, (const char *)((unint64_t)off_1EDD05988 & 0x7FFFFFFFFFFFFFFFLL)))
    {
      v61.__vftable = 0;
      std::bad_cast::bad_cast(&v61);
      v61.__vftable = (std::bad_cast_vtbl *)&unk_1EDD12A18;
      sub_18E0BA8B8();
    }
    uint64_t v27 = (_OWORD *)*((void *)this + 2);
    uint64_t v47 = (uint64_t (**)(void **))&unk_1EDD14DC8;
    sub_18DFE2FA8((uint64_t)&v48, (uint64_t)(v27 + 1));
    long long v28 = v27[8];
    *(_OWORD *)&v52[88] = v27[9];
    *(_OWORD *)&v52[72] = v28;
    long long v29 = v27[10];
    long long v30 = v27[11];
    long long v31 = v27[12];
    *(_OWORD *)&v52[152] = v27[13];
    *(_OWORD *)&v52[136] = v31;
    *(_OWORD *)&v52[120] = v30;
    *(_OWORD *)&v52[104] = v29;
    sub_18DFF2980((uint64_t)&v53, (uint64_t)(v27 + 14));
    long long v59 = 0u;
    long long v60 = 0u;
    if (&v59 != v27 + 18)
    {
      long long v32 = v27[19];
      long long v59 = v27[18];
      long long v60 = v32;
    }
  }
  else
  {
    LOWORD(v61.__vftable) = 3;
    LOBYTE(v63[0]) = 5;
    uint64_t v20 = cnframework::GenericEvent::GetEventType(this, v11, v12, v13, v14, v15, v16, v17);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v61, (unsigned __int8 *)v63, "Attempted to cast a GenericEvent of type %s to type %s.", v21, v22, v23, v24, v25, *(unsigned char *)(v20 + 8));
    memset(v52, 0, 160);
    long long v57 = 0u;
    uint64_t v58 = 0;
    uint64_t v47 = (uint64_t (**)(void **))&unk_1EDD14DC8;
    uint64_t v50 = 0x300000003;
    uint64_t v48 = &unk_1EDD18EE8;
    long long v49 = xmmword_18E1F0010;
    uint64_t v51 = v52;
    uint64_t v55 = 0x100000003;
    *(void *)&v52[160] = 0x7FF8000000000000;
    uint64_t v53 = &unk_1EDD18D98;
    long long v54 = xmmword_18E1F6F60;
    uint64_t v56 = &v57;
    long long v59 = 0uLL;
    *(void *)&long long v60 = 0;
    *((void *)&v60 + 1) = 0x3FF0000000000000;
  }
  if (raven::RavenPNTEstimator::HandleEvent((raven::RavenPNTEstimator *)(v9 + 544), (const raven::HorizontalDOTInIMUFrameEvent *)&v47))
  {
    __int16 v65 = 12;
    unsigned __int8 v64 = 2;
    v63[0] = v47[2]((void **)&v47);
    v63[1] = v33;
    ((void (*)(std::bad_cast *__return_ptr, uint64_t (***)(void **)))v47[3])(&v61, &v47);
    if (v62 >= 0) {
      uint64_t v39 = &v61;
    }
    else {
      uint64_t v39 = v61.__vftable;
    }
    char v40 = cnprint::CNLogFormatter::FormatWarning(v9 + 496, (uint64_t)v63, "Failed to handle event - %s.", v34, v35, v36, v37, v38, (uint64_t)v39);
    if (*(char *)(v9 + 519) >= 0) {
      LOBYTE(v46) = v40;
    }
    else {
      uint64_t v46 = *(void *)(v9 + 496);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v65, &v64, "%s", v41, v42, v43, v44, v45, v46);
    if (v62 < 0) {
      operator delete(v61.__vftable);
    }
  }
}

void sub_18E0DAFA4(_Unwind_Exception *a1)
{
  std::exception::~exception((std::exception *)(v1 - 96));
  _Unwind_Resume(a1);
}

uint64_t sub_18E0DAFD8(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09920)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0DB018()
{
  return &unk_1EDD09920;
}

void sub_18E0DB028()
{
}

void *sub_18E0DB03C()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1EDD1AD70;
  return result;
}

void sub_18E0DB074(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1AD70;
}

void sub_18E0DB09C(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  sub_18E0BFBBC((uint64_t)v22, this, (uint64_t)this, a4, a5, a6, a7, a8);
  if (raven::RavenPNTEstimator::HandleEvent((raven::RavenPNTEstimator *)(v8 + 544), (const raven::MapVectorEvent *)v22))
  {
    __int16 v27 = 12;
    unsigned __int8 v26 = 2;
    v25[0] = (*(uint64_t (**)(void *))(v22[0] + 16))(v22);
    v25[1] = v9;
    (*(void (**)(void **__return_ptr, void *))(v22[0] + 24))(v23, v22);
    if (v24 >= 0) {
      uint64_t v15 = v23;
    }
    else {
      uint64_t v15 = (void **)v23[0];
    }
    cnprint::CNLogFormatter::FormatWarning(v8 + 496, (uint64_t)v25, "Failed to handle event - %s.", v10, v11, v12, v13, v14, (uint64_t)v15);
    if (*(char *)(v8 + 519) >= 0) {
      LOBYTE(v21) = v8 - 16;
    }
    else {
      uint64_t v21 = *(void *)(v8 + 496);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v27, &v26, "%s", v16, v17, v18, v19, v20, v21);
    if (v24 < 0) {
      operator delete(v23[0]);
    }
  }
}

void sub_18E0DB1BC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 57) < 0) {
    operator delete(*(void **)(v1 - 80));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_18E0DB1D8(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09810)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0DB218()
{
  return &unk_1EDD09810;
}

void sub_18E0DB228()
{
}

void *sub_18E0DB23C()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1EDD1AE78;
  return result;
}

void sub_18E0DB274(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1AE78;
}

void sub_18E0DB29C(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  __n128 v9 = sub_18E0C0078((uint64_t)v26, this, (uint64_t)this, a4, a5, a6, a7, a8);
  double v11 = raven::RavenPNTEstimator::HandleEvent((raven::RavenPNTEstimator *)(v8 + 544), (const raven::MountStateEvent *)v26, (int8x16_t)v9, v10);
  if (v12)
  {
    __int16 v31 = 12;
    unsigned __int8 v30 = 2;
    v29[0] = (*(uint64_t (**)(void *, double))(v26[0] + 16))(v26, v11);
    v29[1] = v13;
    (*(void (**)(void **__return_ptr, void *))(v26[0] + 24))(v27, v26);
    if (v28 >= 0) {
      uint64_t v19 = v27;
    }
    else {
      uint64_t v19 = (void **)v27[0];
    }
    cnprint::CNLogFormatter::FormatWarning(v8 + 496, (uint64_t)v29, "Failed to handle event - %s.", v14, v15, v16, v17, v18, (uint64_t)v19);
    if (*(char *)(v8 + 519) >= 0) {
      LOBYTE(v25) = v8 - 16;
    }
    else {
      uint64_t v25 = *(void *)(v8 + 496);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v31, &v30, "%s", v20, v21, v22, v23, v24, v25);
    if (v28 < 0) {
      operator delete(v27[0]);
    }
  }
}

void sub_18E0DB3BC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 57) < 0) {
    operator delete(*(void **)(v1 - 80));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_18E0DB3D8(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09840)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0DB418()
{
  return &unk_1EDD09840;
}

void sub_18E0DB428()
{
}

void *sub_18E0DB43C()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1EDD1AED0;
  return result;
}

void sub_18E0DB474(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1AED0;
}

void sub_18E0DB49C(int a1, int8x16_t **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  sub_18E0C04F4((uint64_t)v22, this, (uint64_t)this, a4, a5, a6, a7, a8);
  if (raven::RavenPNTEstimator::HandleEvent(v8 + 34, (const raven::MovingStateEvent *)v22))
  {
    __int16 v27 = 12;
    unsigned __int8 v26 = 2;
    v25[0] = (*(uint64_t (**)(void *))(v22[0] + 16))(v22);
    v25[1] = v9;
    (*(void (**)(void **__return_ptr, void *))(v22[0] + 24))(v23, v22);
    if (v24 >= 0) {
      uint64_t v15 = v23;
    }
    else {
      uint64_t v15 = (void **)v23[0];
    }
    cnprint::CNLogFormatter::FormatWarning((uint64_t)v8[31].i64, (uint64_t)v25, "Failed to handle event - %s.", v10, v11, v12, v13, v14, (uint64_t)v15);
    if (v8[32].i8[7] >= 0) {
      LOBYTE(v21) = (_BYTE)v8 - 16;
    }
    else {
      uint64_t v21 = v8[31].i64[0];
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v27, &v26, "%s", v16, v17, v18, v19, v20, v21);
    if (v24 < 0) {
      operator delete(v23[0]);
    }
  }
}

void sub_18E0DB5BC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 57) < 0) {
    operator delete(*(void **)(v1 - 80));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_18E0DB5D8(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09850)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0DB618()
{
  return &unk_1EDD09850;
}

void sub_18E0DB628()
{
}

void *sub_18E0DB63C()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1EDD1B3F8;
  return result;
}

void sub_18E0DB674(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1B3F8;
}

void sub_18E0DB69C(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  sub_18E0D0E3C((uint64_t)v22, this, (uint64_t)this, a4, a5, a6, a7, a8);
  if (raven::RavenPNTEstimator::HandleEvent((raven::RavenPNTEstimator *)(v8 + 544), (const raven::NonHolonomicVelocityConstraintEvent *)v22))
  {
    __int16 v27 = 12;
    unsigned __int8 v26 = 2;
    v25[0] = (*(uint64_t (**)(void *))(v22[0] + 16))(v22);
    v25[1] = v9;
    (*(void (**)(void **__return_ptr, void *))(v22[0] + 24))(v23, v22);
    if (v24 >= 0) {
      uint64_t v15 = v23;
    }
    else {
      uint64_t v15 = (void **)v23[0];
    }
    cnprint::CNLogFormatter::FormatWarning(v8 + 496, (uint64_t)v25, "Failed to handle event - %s.", v10, v11, v12, v13, v14, (uint64_t)v15);
    if (*(char *)(v8 + 519) >= 0) {
      LOBYTE(v21) = v8 - 16;
    }
    else {
      uint64_t v21 = *(void *)(v8 + 496);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v27, &v26, "%s", v16, v17, v18, v19, v20, v21);
    if (v24 < 0) {
      operator delete(v23[0]);
    }
  }
}

void sub_18E0DB7BC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 57) < 0) {
    operator delete(*(void **)(v1 - 80));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_18E0DB7D8(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09940)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0DB818()
{
  return &unk_1EDD09940;
}

void sub_18E0DB828()
{
}

void *sub_18E0DB83C()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1EDD1B190;
  return result;
}

void sub_18E0DB874(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1B190;
}

void sub_18E0DB89C(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  sub_18E0C0E30((uint64_t)v22, this, (uint64_t)this, a4, a5, a6, a7, a8);
  if (raven::RavenPNTEstimator::HandleEvent((raven::RavenPNTEstimator *)(v8 + 544), (const raven::PositionChangeEvent *)v22))
  {
    __int16 v27 = 12;
    unsigned __int8 v26 = 2;
    v25[0] = (*(uint64_t (**)(void *))(v22[0] + 16))(v22);
    v25[1] = v9;
    (*(void (**)(void **__return_ptr, void *))(v22[0] + 24))(v23, v22);
    if (v24 >= 0) {
      uint64_t v15 = v23;
    }
    else {
      uint64_t v15 = (void **)v23[0];
    }
    cnprint::CNLogFormatter::FormatWarning(v8 + 496, (uint64_t)v25, "Failed to handle event - %s.", v10, v11, v12, v13, v14, (uint64_t)v15);
    if (*(char *)(v8 + 519) >= 0) {
      LOBYTE(v21) = v8 - 16;
    }
    else {
      uint64_t v21 = *(void *)(v8 + 496);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v27, &v26, "%s", v16, v17, v18, v19, v20, v21);
    if (v24 < 0) {
      operator delete(v23[0]);
    }
  }
}

void sub_18E0DB9BC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 57) < 0) {
    operator delete(*(void **)(v1 - 80));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_18E0DB9D8(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD098D0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0DBA18()
{
  return &unk_1EDD098D0;
}

void sub_18E0DBA28()
{
}

void *sub_18E0DBA3C()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1EDD1B240;
  return result;
}

void sub_18E0DBA74(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1B240;
}

void sub_18E0DBA9C(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  sub_18E0C13C4((uint64_t)v24, this, (uint64_t)this, a4, a5, a6, a7, a8);
  __n128 v9 = raven::RavenEstimator::HandlePositionContextStateEvent((raven::RavenEstimator *)(v8 + 544), (const raven::PositionContextStateEvent *)v24);
  if (v10)
  {
    __int16 v29 = 12;
    unsigned __int8 v28 = 2;
    v27[0] = (*(uint64_t (**)(void *, __n128))(v24[0] + 16))(v24, v9);
    v27[1] = v11;
    (*(void (**)(void **__return_ptr, void *))(v24[0] + 24))(v25, v24);
    if (v26 >= 0) {
      uint64_t v17 = v25;
    }
    else {
      uint64_t v17 = (void **)v25[0];
    }
    cnprint::CNLogFormatter::FormatWarning(v8 + 496, (uint64_t)v27, "Failed to handle event - %s.", v12, v13, v14, v15, v16, (uint64_t)v17);
    if (*(char *)(v8 + 519) >= 0) {
      LOBYTE(v23) = v8 - 16;
    }
    else {
      uint64_t v23 = *(void *)(v8 + 496);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v29, &v28, "%s", v18, v19, v20, v21, v22, v23);
    if (v26 < 0) {
      operator delete(v25[0]);
    }
  }
}

void sub_18E0DBBBC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 57) < 0) {
    operator delete(*(void **)(v1 - 80));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_18E0DBBD8(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD098F0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0DBC18()
{
  return &unk_1EDD098F0;
}

void sub_18E0DBC28()
{
}

void *sub_18E0DBC3C()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1EDD1AC10;
  return result;
}

void sub_18E0DBC74(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1AC10;
}

void sub_18E0DBC9C(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  sub_18E0C1834((uint64_t)v22, this, (uint64_t)this, a4, a5, a6, a7, a8);
  if (raven::RavenPNTEstimator::HandleEvent((raven::RavenPNTEstimator *)(v8 + 544), (const raven::PositionEvent *)v22))
  {
    __int16 v27 = 12;
    unsigned __int8 v26 = 2;
    v25[0] = (*(uint64_t (**)(void *))(v22[0] + 16))(v22);
    v25[1] = v9;
    (*(void (**)(void **__return_ptr, void *))(v22[0] + 24))(v23, v22);
    if (v24 >= 0) {
      uint64_t v15 = v23;
    }
    else {
      uint64_t v15 = (void **)v23[0];
    }
    cnprint::CNLogFormatter::FormatWarning(v8 + 496, (uint64_t)v25, "Failed to handle event - %s.", v10, v11, v12, v13, v14, (uint64_t)v15);
    if (*(char *)(v8 + 519) >= 0) {
      LOBYTE(v21) = v8 - 16;
    }
    else {
      uint64_t v21 = *(void *)(v8 + 496);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v27, &v26, "%s", v16, v17, v18, v19, v20, v21);
    if (v24 < 0) {
      operator delete(v23[0]);
    }
  }
}

void sub_18E0DBDBC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 57) < 0) {
    operator delete(*(void **)(v1 - 80));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_18E0DBDD8(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD097D0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0DBE18()
{
  return &unk_1EDD097D0;
}

void sub_18E0DBE28()
{
}

void *sub_18E0DBE3C()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1EDD1AC68;
  return result;
}

void sub_18E0DBE74(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1AC68;
}

void sub_18E0DBE9C(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  sub_18E0BBF64((uint64_t)v22, this, (uint64_t)this, a4, a5, a6, a7, a8);
  if (raven::RavenPNTEstimator::HandleEvent((raven::RavenPNTEstimator *)(v8 + 544), (const raven::RateGyroEvent *)v22))
  {
    __int16 v27 = 12;
    unsigned __int8 v26 = 2;
    v25[0] = (*(uint64_t (**)(void *))(v22[0] + 16))(v22);
    v25[1] = v9;
    (*(void (**)(void **__return_ptr, void *))(v22[0] + 24))(v23, v22);
    if (v24 >= 0) {
      uint64_t v15 = v23;
    }
    else {
      uint64_t v15 = (void **)v23[0];
    }
    cnprint::CNLogFormatter::FormatWarning(v8 + 496, (uint64_t)v25, "Failed to handle event - %s.", v10, v11, v12, v13, v14, (uint64_t)v15);
    if (*(char *)(v8 + 519) >= 0) {
      LOBYTE(v21) = v8 - 16;
    }
    else {
      uint64_t v21 = *(void *)(v8 + 496);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v27, &v26, "%s", v16, v17, v18, v19, v20, v21);
    if (v24 < 0) {
      operator delete(v23[0]);
    }
  }
}

void sub_18E0DBFBC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 57) < 0) {
    operator delete(*(void **)(v1 - 80));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_18E0DBFD8(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD097E0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0DC018()
{
  return &unk_1EDD097E0;
}

void sub_18E0DC028()
{
}

void *sub_18E0DC03C()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1EDD1B030;
  return result;
}

void sub_18E0DC074(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1B030;
}

void sub_18E0DC09C(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  sub_18E0C1E40(v22, this, (uint64_t)this, a4, a5, a6, a7, a8);
  if (raven::RavenPNTEstimator::HandleEvent(v8 + 544, v22))
  {
    __int16 v27 = 12;
    unsigned __int8 v26 = 2;
    v25[0] = (*(uint64_t (**)(void *))(v22[0] + 16))(v22);
    v25[1] = v9;
    (*(void (**)(void **__return_ptr, void *))(v22[0] + 24))(v23, v22);
    if (v24 >= 0) {
      uint64_t v15 = v23;
    }
    else {
      uint64_t v15 = (void **)v23[0];
    }
    cnprint::CNLogFormatter::FormatWarning(v8 + 496, (uint64_t)v25, "Failed to handle event - %s.", v10, v11, v12, v13, v14, (uint64_t)v15);
    if (*(char *)(v8 + 519) >= 0) {
      LOBYTE(v21) = v8 - 16;
    }
    else {
      uint64_t v21 = *(void *)(v8 + 496);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v27, &v26, "%s", v16, v17, v18, v19, v20, v21);
    if (v24 < 0) {
      operator delete(v23[0]);
    }
  }
}

void sub_18E0DC1BC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 57) < 0) {
    operator delete(*(void **)(v1 - 80));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_18E0DC1D8(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09890)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0DC218()
{
  return &unk_1EDD09890;
}

void sub_18E0DC228()
{
}

void *sub_18E0DC23C()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1EDD1AF28;
  return result;
}

void sub_18E0DC274(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1AF28;
}

void sub_18E0DC29C(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  sub_18E0BC290((uint64_t)v24, this, (uint64_t)this, a4, a5, a6, a7, a8);
  if (!cnprint::CNPrinter::GetLogLevel(v9))
  {
    __int16 v29 = 12;
    unsigned __int8 v28 = 0;
    uint64_t v26 = (*(uint64_t (**)(void *))(v24[0] + 16))(v24);
    uint64_t v27 = v10;
    cnprint::CNLogFormatter::FormatGeneral(v8 + 496, (uint64_t)&v26, "RavenSystemEvent received");
    if (*(char *)(v8 + 519) >= 0) {
      LOBYTE(v16) = v8 - 16;
    }
    else {
      uint64_t v16 = *(void *)(v8 + 496);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v29, &v28, "%s", v11, v12, v13, v14, v15, v16);
  }
  if (!v25)
  {
    __int16 v29 = 12;
    unsigned __int8 v28 = 4;
    uint64_t v26 = (*(uint64_t (**)(void *))(v24[0] + 16))(v24);
    uint64_t v27 = v17;
    cnprint::CNLogFormatter::FormatGeneral(v8 + 496, (uint64_t)&v26, "Resetting estimator based on system event");
    if (*(char *)(v8 + 519) >= 0) {
      LOBYTE(v23) = v8 - 16;
    }
    else {
      uint64_t v23 = *(void *)(v8 + 496);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v29, &v28, "%s", v18, v19, v20, v21, v22, v23);
    (*(void (**)(uint64_t))(*(void *)v8 + 48))(v8);
  }
}

uint64_t sub_18E0DC40C(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09860)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0DC44C()
{
  return &unk_1EDD09860;
}

void sub_18E0DC45C()
{
}

void *sub_18E0DC470()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1EDD1B1E8;
  return result;
}

void sub_18E0DC4A8(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1B1E8;
}

void sub_18E0DC4D0(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  sub_18E0C25B0((uint64_t)v24, this, (uint64_t)this, a4, a5, a6, a7, a8);
  __n128 v9 = raven::RavenEstimator::HandleSignalEnvironmentEvent((raven::RavenEstimator *)(v8 + 544), (const raven::SignalEnvironmentEvent *)v24);
  if (v10)
  {
    __int16 v29 = 12;
    unsigned __int8 v28 = 2;
    v27[0] = (*(uint64_t (**)(void *, __n128))(v24[0] + 16))(v24, v9);
    v27[1] = v11;
    (*(void (**)(void **__return_ptr, void *))(v24[0] + 24))(v25, v24);
    if (v26 >= 0) {
      uint64_t v17 = v25;
    }
    else {
      uint64_t v17 = (void **)v25[0];
    }
    cnprint::CNLogFormatter::FormatWarning(v8 + 496, (uint64_t)v27, "Failed to handle event - %s.", v12, v13, v14, v15, v16, (uint64_t)v17);
    if (*(char *)(v8 + 519) >= 0) {
      LOBYTE(v23) = v8 - 16;
    }
    else {
      uint64_t v23 = *(void *)(v8 + 496);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v29, &v28, "%s", v18, v19, v20, v21, v22, v23);
    if (v26 < 0) {
      operator delete(v25[0]);
    }
  }
}

void sub_18E0DC5F0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 57) < 0) {
    operator delete(*(void **)(v1 - 80));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_18E0DC60C(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD098E0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0DC64C()
{
  return &unk_1EDD098E0;
}

void sub_18E0DC65C()
{
}

void *sub_18E0DC670()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1EDD1ACC0;
  return result;
}

void sub_18E0DC6A8(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1ACC0;
}

void sub_18E0DC6D0(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  sub_18E0BD4F4((uint64_t)&v72, this, (uint64_t)this, a4, a5, a6, a7, a8);
  uint64_t v89 = raven::RavenPNTEstimator::HandleTimeMarkEvent((raven::RavenPNTEstimator *)(v8 + 544), (const raven::TimeMarkEvent *)&v72);
  __n128 v9 = (cnprint::CNPrinter *)sub_18E056F48(&v89);
  if (v9)
  {
    if (cnprint::CNPrinter::GetLogLevel(v9) <= 1)
    {
      LOWORD(v74) = 12;
      LOBYTE(v75) = 1;
      *(void *)__src = (*(uint64_t (**)(uint64_t *))(v72 + 16))(&v72);
      *(void *)&__src[8] = v10;
      (*(void (**)(void **__return_ptr, uint64_t *))(v72 + 24))(&__p, &v72);
      uint64_t v16 = v79 >= 0 ? &__p : (void **)__p;
      char v17 = cnprint::CNLogFormatter::FormatWarning(v8 + 496, (uint64_t)__src, "Error handling event of type %s,code,%d", v11, v12, v13, v14, v15, (uint64_t)v16);
      if (*(char *)(v8 + 519) >= 0) {
        LOBYTE(v23) = v17;
      }
      else {
        uint64_t v23 = *(void *)(v8 + 496);
      }
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v74, (unsigned __int8 *)&v75, "%s", v18, v19, v20, v21, v22, v23);
      if (SHIBYTE(v79) < 0) {
        operator delete(__p);
      }
    }
    unint64_t v24 = v89;
    __int16 v25 = v89;
    if ((v89 & 4) != 0)
    {
      *(_WORD *)__src = 12;
      LOBYTE(v74) = 2;
      __p = (void *)(*(uint64_t (**)(uint64_t *))(v72 + 16))(&v72);
      uint64_t v78 = v26;
      cnprint::CNLogFormatter::FormatWarning(v8 + 496, (uint64_t)&__p, "Resetting filter due to prediction error", v27, v28, v29, v30, v31, v71);
      if (*(char *)(v8 + 519) >= 0) {
        LOBYTE(v37) = v8 - 16;
      }
      else {
        uint64_t v37 = *(void *)(v8 + 496);
      }
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)__src, (unsigned __int8 *)&v74, "%s", v32, v33, v34, v35, v36, v37);
      __int16 v25 = v89;
    }
    if ((v25 & 0x1C00) != 0)
    {
      *(_WORD *)__src = 12;
      LOBYTE(v74) = 2;
      __p = (void *)(*(uint64_t (**)(uint64_t *))(v72 + 16))(&v72);
      uint64_t v78 = v38;
      cnprint::CNLogFormatter::FormatWarning(v8 + 496, (uint64_t)&__p, "Resetting filter due to FSDI error", v39, v40, v41, v42, v43, v71);
      if (*(char *)(v8 + 519) >= 0) {
        LOBYTE(v49) = v8 - 16;
      }
      else {
        uint64_t v49 = *(void *)(v8 + 496);
      }
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)__src, (unsigned __int8 *)&v74, "%s", v44, v45, v46, v47, v48, v49);
      LODWORD(v50) = 1;
    }
    else
    {
      uint64_t v50 = (v24 >> 2) & 1;
    }
  }
  else
  {
    LODWORD(v50) = 0;
  }
  if (*(unsigned char *)(v8 + 602) && (v89 & 2) == 0)
  {
    if (v50) {
      raven::RavenPNTEstimator::Reset((raven::RavenPNTEstimator *)(v8 + 544));
    }
    return;
  }
  sub_18DFF49CC((uint64_t)&__p);
  uint64_t CurrentTime = cnframework::ActiveObjectBase::GetCurrentTime((cnframework::ActiveObjectBase *)v8);
  long long v83 = 0u;
  long long v82 = 0u;
  long long v81 = 0u;
  long long v80 = 0u;
  uint64_t v78 = CurrentTime;
  uint64_t v79 = v52;
  uint64_t v84 = 0;
  uint64_t v85 = 0x7FF8000000000000;
  raven::RavenPNTEstimator::GetRavenStatus((raven::RavenPNTEstimator *)(v8 + 544), (uint64_t)__src);
  memcpy(v86, __src, sizeof(v86));
  if (v86[104] == *(unsigned __int8 *)(v8 + 600))
  {
    raven::RavenPNTEstimator::GetRavenSolution((raven::RavenPNTEstimator *)(v8 + 544), (uint64_t)__src);
    memcpy(v87, __src, sizeof(v87));
    raven::RavenEstimator::GetRavenActivity((raven::RavenEstimator *)(v8 + 544), (uint64_t)__src);
    memcpy(v88, __src, sizeof(v88));
    if (v86[105] == 1)
    {
      LOWORD(v74) = 12;
      LOBYTE(v75) = 2;
      *(void *)__src = (*(uint64_t (**)(uint64_t *))(v72 + 16))(&v72);
      *(void *)&__src[8] = v55;
      char v61 = cnprint::CNLogFormatter::FormatWarning(v8 + 496, (uint64_t)__src, "Estimator unhealthy; resetting...",
              v56,
              v57,
              v58,
              v59,
              v60,
              v71);
      if (*(char *)(v8 + 519) >= 0) {
        LOBYTE(v67) = v61;
      }
      else {
        uint64_t v67 = *(void *)(v8 + 496);
      }
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v74, (unsigned __int8 *)&v75, "%s", v62, v63, v64, v65, v66, v67);
      LODWORD(v50) = 1;
    }
    else
    {
      if (LOBYTE(v87[102])) {
        char v68 = v50;
      }
      else {
        char v68 = 1;
      }
      if ((v68 & 1) == 0)
      {
        double v69 = v87[105];
        if (v87[105] > 0.0)
        {
          *(double *)v53.i64 = v87[103];
          *(_OWORD *)__src = 0uLL;
          CNTimeSpan::SetTimeSpan((uint64_t *)__src, 0, v53, v54);
          double v75 = sqrt(v69);
          long long v74 = *(_OWORD *)__src;
          sub_18E0C2F48((uint64_t)&__p, (uint64_t)v73, &v74, (uint64_t *)&v75, *(int8x16_t *)__src, v70);
          goto LABEL_44;
        }
        LODWORD(v50) = 0;
      }
    }
    sub_18E0C2FCC((uint64_t)&__p, (uint64_t)v73, v53, v54);
    if (v50)
    {
      v86[105] = 1;
      raven::RavenPNTEstimator::Reset((raven::RavenPNTEstimator *)(v8 + 544));
    }
LABEL_44:
    sub_18E0C3028();
  }
  if (v50) {
    raven::RavenPNTEstimator::Reset((raven::RavenPNTEstimator *)(v8 + 544));
  }
}

void sub_18E0DCB4C(_Unwind_Exception *a1)
{
}

uint64_t sub_18E0DCB88(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD097F0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0DCBC8()
{
  return &unk_1EDD097F0;
}

void sub_18E0DCBD8()
{
}

void *sub_18E0DCBEC()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1EDD1ADC8;
  return result;
}

void sub_18E0DCC24(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1ADC8;
}

void sub_18E0DCC4C(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = *a2;
  uint64_t EventType = cnframework::GenericEvent::GetEventType(this, (uint64_t)a2, (uint64_t)this, a4, a5, a6, a7, a8);
  {
    uint64_t v18 = *((void *)this + 2);
    if (v18) {
      uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 16))(v18);
    }
    else {
      uint64_t v19 = MEMORY[0x1E4FBA3D8];
    }
    uint64_t v26 = (const char *)(*(void *)(v19 + 8) & 0x7FFFFFFFFFFFFFFFLL);
    if (v26 != (const char *)((unint64_t)off_1EDD050D0 & 0x7FFFFFFFFFFFFFFFLL)
      && strcmp(v26, (const char *)((unint64_t)off_1EDD050D0 & 0x7FFFFFFFFFFFFFFFLL)))
    {
      v60.__vftable = 0;
      std::bad_cast::bad_cast(&v60);
      v60.__vftable = (std::bad_cast_vtbl *)&unk_1EDD12A18;
      sub_18E0BA8B8();
    }
    uint64_t v27 = *((void *)this + 2);
    uint64_t v50 = (uint64_t (**)(void **, __n128))&unk_1EDD13A10;
    long long v51 = *(_OWORD *)(v27 + 16);
    long long v28 = *(_OWORD *)(v27 + 64);
    long long v29 = *(_OWORD *)(v27 + 80);
    long long v30 = *(_OWORD *)(v27 + 48);
    long long v52 = *(_OWORD *)(v27 + 32);
    long long v55 = v29;
    long long v54 = v28;
    long long v53 = v30;
    long long v31 = *(_OWORD *)(v27 + 96);
    long long v32 = *(_OWORD *)(v27 + 112);
    long long v33 = *(_OWORD *)(v27 + 128);
    uint64_t v59 = *(void *)(v27 + 144);
    long long v58 = v33;
    long long v57 = v32;
    long long v56 = v31;
  }
  else
  {
    LOWORD(v60.__vftable) = 3;
    LOBYTE(v62[0]) = 5;
    uint64_t v20 = cnframework::GenericEvent::GetEventType(this, v11, v12, v13, v14, v15, v16, v17);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v60, (unsigned __int8 *)v62, "Attempted to cast a GenericEvent of type %s to type %s.", v21, v22, v23, v24, v25, *(unsigned char *)(v20 + 8));
    long long v52 = 0uLL;
    long long v55 = 0uLL;
    long long v51 = 0uLL;
    uint64_t v50 = (uint64_t (**)(void **, __n128))&unk_1EDD13A10;
    long long v53 = 0uLL;
    long long v54 = 0uLL;
    *(void *)&long long v56 = 0;
    *((void *)&v56 + 1) = 0x7FF8000000000000;
    *(void *)&long long v57 = 0;
    *((void *)&v57 + 1) = 0x3FF0000000000000;
    long long v58 = 0uLL;
    uint64_t v59 = 0x7FF0000000000000;
  }
  __n128 v34 = raven::RavenEstimator::HandleTurnStateEvent((raven::RavenEstimator *)(v9 + 544), (const raven::TurnStateEvent *)&v50);
  if (v35)
  {
    __int16 v64 = 12;
    unsigned __int8 v63 = 2;
    v62[0] = v50[2]((void **)&v50, v34);
    v62[1] = v36;
    ((void (*)(std::bad_cast *__return_ptr, uint64_t (***)(void **, __n128)))v50[3])(&v60, &v50);
    if (v61 >= 0) {
      uint64_t v42 = &v60;
    }
    else {
      uint64_t v42 = v60.__vftable;
    }
    char v43 = cnprint::CNLogFormatter::FormatWarning(v9 + 496, (uint64_t)v62, "Failed to handle event - %s.", v37, v38, v39, v40, v41, (uint64_t)v42);
    if (*(char *)(v9 + 519) >= 0) {
      LOBYTE(v49) = v43;
    }
    else {
      uint64_t v49 = *(void *)(v9 + 496);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v64, &v63, "%s", v44, v45, v46, v47, v48, v49);
    if (v61 < 0) {
      operator delete(v60.__vftable);
    }
  }
}

void sub_18E0DCF18(_Unwind_Exception *a1)
{
  std::exception::~exception((std::exception *)(v1 - 80));
  _Unwind_Resume(a1);
}

uint64_t sub_18E0DCF4C(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09820)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0DCF8C()
{
  return &unk_1EDD09820;
}

void sub_18E0DCF9C()
{
}

void *sub_18E0DCFB0()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1EDD1AE20;
  return result;
}

void sub_18E0DCFE8(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1AE20;
}

void sub_18E0DD010(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  sub_18E0C3628((uint64_t)v22, this, (uint64_t)this, a4, a5, a6, a7, a8);
  if (raven::RavenPNTEstimator::HandleEvent((raven::RavenPNTEstimator *)(v8 + 544), (const raven::UserSpeedEvent *)v22))
  {
    __int16 v27 = 12;
    unsigned __int8 v26 = 2;
    v25[0] = (*(uint64_t (**)(void *))(v22[0] + 16))(v22);
    v25[1] = v9;
    (*(void (**)(void **__return_ptr, void *))(v22[0] + 24))(v23, v22);
    if (v24 >= 0) {
      uint64_t v15 = v23;
    }
    else {
      uint64_t v15 = (void **)v23[0];
    }
    cnprint::CNLogFormatter::FormatWarning(v8 + 496, (uint64_t)v25, "Failed to handle event - %s.", v10, v11, v12, v13, v14, (uint64_t)v15);
    if (*(char *)(v8 + 519) >= 0) {
      LOBYTE(v21) = v8 - 16;
    }
    else {
      uint64_t v21 = *(void *)(v8 + 496);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v27, &v26, "%s", v16, v17, v18, v19, v20, v21);
    if (v24 < 0) {
      operator delete(v23[0]);
    }
  }
}

void sub_18E0DD130(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 57) < 0) {
    operator delete(*(void **)(v1 - 80));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_18E0DD14C(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09830)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0DD18C()
{
  return &unk_1EDD09830;
}

void sub_18E0DD19C()
{
}

void *sub_18E0DD1B0()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1EDD1AD18;
  return result;
}

void sub_18E0DD1E8(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1AD18;
}

void sub_18E0DD210(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  sub_18E0C3A8C((uint64_t)v23, this, (uint64_t)this, a4, a5, a6, a7, a8);
  if (!*(unsigned char *)(v8 + 601)
    || (*(unsigned char *)(v8 + 602) ? (BOOL v9 = v24 == 0) : (BOOL v9 = 1),
        !v9
     && raven::RavenPNTEstimator::AddDeviceVelocityMeasurement((raven::RavenPNTEstimator *)(v8 + 544), (const raven::VelocityEvent *)v23)))
  {
    __int16 v29 = 12;
    unsigned __int8 v28 = 2;
    v27[0] = (*(uint64_t (**)(void *))(v23[0] + 16))(v23);
    v27[1] = v10;
    (*(void (**)(void **__return_ptr, void *))(v23[0] + 24))(v25, v23);
    if (v26 >= 0) {
      uint64_t v16 = v25;
    }
    else {
      uint64_t v16 = (void **)v25[0];
    }
    cnprint::CNLogFormatter::FormatWarning(v8 + 496, (uint64_t)v27, "Failed to handle event - %s.", v11, v12, v13, v14, v15, (uint64_t)v16);
    if (*(char *)(v8 + 519) >= 0) {
      LOBYTE(v22) = v8 - 16;
    }
    else {
      uint64_t v22 = *(void *)(v8 + 496);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v29, &v28, "%s", v17, v18, v19, v20, v21, v22);
    if (v26 < 0) {
      operator delete(v25[0]);
    }
  }
}

void sub_18E0DD34C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 57) < 0) {
    operator delete(*(void **)(v1 - 80));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_18E0DD368(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09800)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0DD3A8()
{
  return &unk_1EDD09800;
}

void sub_18E0DD3B8()
{
}

void *sub_18E0DD3CC()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1EDD1BEF8;
  return result;
}

void sub_18E0DD404(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1BEF8;
}

void sub_18E0DD42C(int a1, raven::RavenPressurePrefilterActiveObject **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  BOOL v9 = *a2;
  uint64_t EventType = cnframework::GenericEvent::GetEventType(this, (uint64_t)a2, (uint64_t)this, a4, a5, a6, a7, a8);
  {
    uint64_t v18 = *((void *)this + 2);
    if (v18) {
      uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 16))(v18);
    }
    else {
      uint64_t v19 = MEMORY[0x1E4FBA3D8];
    }
    char v26 = (const char *)(*(void *)(v19 + 8) & 0x7FFFFFFFFFFFFFFFLL);
    if (v26 != (const char *)((unint64_t)off_1EDD05078 & 0x7FFFFFFFFFFFFFFFLL)
      && strcmp(v26, (const char *)((unint64_t)off_1EDD05078 & 0x7FFFFFFFFFFFFFFFLL)))
    {
      v34.__vftable = 0;
      std::bad_cast::bad_cast(&v34);
      v34.__vftable = (std::bad_cast_vtbl *)&unk_1EDD12A18;
      sub_18E0BA8B8();
    }
    __int16 v27 = (_OWORD *)*((void *)this + 2);
    v34.__vftable = (std::bad_cast_vtbl *)&unk_1EDD138B0;
    long long v28 = v27[3];
    long long v29 = v27[4];
    long long v30 = v27[2];
    long long v35 = v27[1];
    long long v38 = v29;
    long long v37 = v28;
    long long v36 = v30;
    long long v32 = v27[6];
    long long v31 = v27[7];
    long long v33 = *(_OWORD *)((char *)v27 + 122);
    long long v39 = v27[5];
    *(_OWORD *)&v40[26] = v33;
    *(_OWORD *)&v40[16] = v31;
    *(_OWORD *)uint64_t v40 = v32;
  }
  else
  {
    LOWORD(v34.__vftable) = 3;
    unsigned __int8 v41 = 5;
    uint64_t v20 = cnframework::GenericEvent::GetEventType(this, v11, v12, v13, v14, v15, v16, v17);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v34, &v41, "Attempted to cast a GenericEvent of type %s to type %s.", v21, v22, v23, v24, v25, *(unsigned char *)(v20 + 8));
    long long v36 = 0uLL;
    long long v39 = 0uLL;
    *(void *)&v40[24] = 0;
    long long v35 = 0uLL;
    v34.__vftable = (std::bad_cast_vtbl *)&unk_1EDD138B0;
    long long v37 = 0uLL;
    long long v38 = 0uLL;
    *(void *)uint64_t v40 = 0;
    *(int64x2_t *)&v40[8] = vdupq_n_s64(0x7FF8000000000000uLL);
    *(_OWORD *)&v40[32] = 0x7FF8000000000000uLL;
  }
  raven::RavenPressurePrefilterActiveObject::HandleEvent(v9, (const raven::BarometerEvent *)&v34);
}

void sub_18E0DD620(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::exception a11)
{
}

uint64_t sub_18E0DD634(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09B40)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0DD674()
{
  return &unk_1EDD09B40;
}

void sub_18E0DD684()
{
}

void *sub_18E0DD698()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1EDD1A950;
  return result;
}

void sub_18E0DD6D0(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1A950;
}

double sub_18E0DD6F8(int a1, raven::RavenRayTracingActiveObject **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  sub_18E0BDF10((uint64_t)v10, this, (uint64_t)this, a4, a5, a6, a7, a8);
  *(void *)&double result = raven::RavenRayTracingActiveObject::HandleEvent(v8, (const raven::ActivityStateEvent *)v10).n128_u64[0];
  return result;
}

uint64_t sub_18E0DD738(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09750)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0DD778()
{
  return &unk_1EDD09750;
}

void sub_18E0DD788()
{
}

void *sub_18E0DD79C()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1EDD1AAB0;
  return result;
}

void sub_18E0DD7D4(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1AAB0;
}

void sub_18E0DD7FC(int a1, raven::RavenRayTracingActiveObject **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  BOOL v9 = *a2;
  uint64_t EventType = cnframework::GenericEvent::GetEventType(this, (uint64_t)a2, (uint64_t)this, a4, a5, a6, a7, a8);
  {
    uint64_t v18 = *((void *)this + 2);
    if (v18) {
      uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 16))(v18);
    }
    else {
      uint64_t v19 = MEMORY[0x1E4FBA3D8];
    }
    long long v32 = (const char *)(*(void *)(v19 + 8) & 0x7FFFFFFFFFFFFFFFLL);
    if (v32 != (const char *)((unint64_t)off_1EDD05588 & 0x7FFFFFFFFFFFFFFFLL)
      && strcmp(v32, (const char *)((unint64_t)off_1EDD05588 & 0x7FFFFFFFFFFFFFFFLL)))
    {
      v52.__vftable = 0;
      std::bad_cast::bad_cast(&v52);
      v52.__vftable = (std::bad_cast_vtbl *)&unk_1EDD12A18;
      sub_18E0BA8B8();
    }
    uint64_t v33 = *((void *)this + 2);
    long long v38 = &unk_1EDD14628;
    long long v34 = *(_OWORD *)(v33 + 32);
    long long v39 = *(_OWORD *)(v33 + 16);
    long long v40 = v34;
    long long v35 = *(_OWORD *)(v33 + 48);
    long long v36 = *(_OWORD *)(v33 + 64);
    long long v37 = *(_OWORD *)(v33 + 96);
    long long v43 = *(_OWORD *)(v33 + 80);
    long long v44 = v37;
    long long v41 = v35;
    long long v42 = v36;
    uint64_t v46 = 0;
    uint64_t v47 = 0;
    uint64_t v45 = 0;
    sub_18E0DDB00((uint64_t)&v45, *(void *)(v33 + 112), *(void *)(v33 + 120), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v33 + 120) - *(void *)(v33 + 112)) >> 3));
    int64x2_t v48 = *(int64x2_t *)(v33 + 136);
    sub_18E0DDFD8((uint64_t)&v49, (void *)(v33 + 152));
  }
  else
  {
    LOWORD(v52.__vftable) = 3;
    unsigned __int8 v51 = 5;
    uint64_t v20 = cnframework::GenericEvent::GetEventType(this, v11, v12, v13, v14, v15, v16, v17);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v52, &v51, "Attempted to cast a GenericEvent of type %s to type %s.", v21, v22, v23, v24, v25, *(unsigned char *)(v20 + 8));
    long long v40 = 0uLL;
    long long v39 = 0uLL;
    long long v38 = &unk_1EDD14628;
    long long v41 = 0uLL;
    long long v42 = 0uLL;
    long long v43 = 0uLL;
    *(void *)&long long v44 = 0;
    *((void *)&v44 + 1) = 0x7FF8000000000000;
    uint64_t v45 = 0;
    uint64_t v46 = 0;
    uint64_t v47 = 0;
    int64x2_t v48 = vdupq_n_s64(0x7FF8000000000000uLL);
    v50[0] = 0;
    v50[1] = 0;
    uint64_t v49 = v50;
  }
  raven::RavenRayTracingActiveObject::HandleEvent(v9, (const raven::GEOMapBuildingDataEvent *)&v38, v26, v27, v28, v29, v30, v31);
  long long v38 = &unk_1EDD14628;
  sub_18E012A10((uint64_t)&v49, v50[0]);
  v52.__vftable = (std::bad_cast_vtbl *)&v45;
  sub_18E0DDF5C((void ***)&v52);
}

void sub_18E0DDA54(_Unwind_Exception *a1)
{
  std::exception::~exception((std::exception *)(v1 - 56));
  _Unwind_Resume(a1);
}

uint64_t sub_18E0DDAB4(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09790)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0DDAF4()
{
  return &unk_1EDD09790;
}

uint64_t sub_18E0DDB00(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    int v4 = (void *)result;
    if (a4 >= 0x666666666666667) {
      sub_18DEE1FC8();
    }
    uint64_t v6 = sub_18E01AF14(result + 16, a4);
    *int v4 = v6;
    v4[1] = v6;
    v4[2] = &v6[5 * v7];
    uint64_t v27 = v6;
    v28[0] = v6;
    v25[0] = v4 + 2;
    v25[1] = &v27;
    void v25[2] = v28;
    char v26 = 0;
    if (a2 != a3)
    {
      uint64_t v23 = v4;
      do
      {
        *(_OWORD *)uint64_t v6 = *(_OWORD *)a2;
        v6[2] = 0;
        v6[3] = 0;
        v6[4] = 0;
        uint64_t v8 = *(void *)(a2 + 16);
        uint64_t v9 = *(void *)(a2 + 24);
        v28[1] = v6 + 2;
        char v29 = 0;
        if (v9 != v8)
        {
          unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * ((v9 - v8) >> 4);
          if (v10 >= 0x333333333333334) {
            sub_18DEE1FC8();
          }
          uint64_t v11 = (char *)sub_18E0DDD90((uint64_t)(v6 + 4), v10);
          v6[2] = v11;
          v6[3] = v11;
          v6[4] = &v11[80 * v12];
          long long v32 = v11;
          uint64_t v33 = v11;
          v30[0] = v6 + 4;
          v30[1] = &v32;
          v30[2] = &v33;
          char v31 = 0;
          uint64_t v13 = v11;
          do
          {
            *(void *)uint64_t v13 = 0;
            *((void *)v13 + 1) = 0;
            *((void *)v13 + 2) = 0;
            uint64_t v15 = *(const void **)v8;
            uint64_t v14 = *(void *)(v8 + 8);
            uint64_t v16 = v13;
            int64_t v17 = v14 - *(void *)v8;
            if (v14 != *(void *)v8)
            {
              if (v17 < 0) {
                sub_18DEE1FC8();
              }
              uint64_t v18 = (char *)sub_18DFF7B64((uint64_t)(v13 + 16), v17 >> 4);
              *(void *)uint64_t v13 = v18;
              *((void *)v13 + 1) = v18;
              *((void *)v13 + 2) = &v18[16 * v19];
              memmove(v18, v15, v17);
              *((void *)v13 + 1) = &v18[16 * (v17 >> 4)];
              uint64_t v16 = v33;
            }
            long long v20 = *(_OWORD *)(v8 + 24);
            long long v21 = *(_OWORD *)(v8 + 40);
            long long v22 = *(_OWORD *)(v8 + 56);
            *((void *)v13 + 9) = *(void *)(v8 + 72);
            *(_OWORD *)(v13 + 56) = v22;
            *(_OWORD *)(v13 + 40) = v21;
            *(_OWORD *)(v13 + 24) = v20;
            uint64_t v13 = v16 + 80;
            uint64_t v33 = v16 + 80;
            v8 += 80;
          }
          while (v8 != v9);
          char v31 = 1;
          sub_18E0DDDD8((uint64_t)v30);
          v6[3] = v13;
          uint64_t v6 = (void *)v28[0];
        }
        a2 += 40;
        v6 += 5;
        v28[0] = v6;
      }
      while (a2 != a3);
      int v4 = v23;
    }
    char v26 = 1;
    double result = sub_18E0DDEEC((uint64_t)v25);
    v4[1] = v6;
  }
  return result;
}

void sub_18E0DDD30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_18E0DDF5C((void ***)va);
  _Unwind_Resume(a1);
}

void *sub_18E0DDD90(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x333333333333334) {
    sub_18DEDF7D4();
  }
  return operator new(80 * a2);
}

uint64_t sub_18E0DDDD8(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v2 = **(void **)(a1 + 8);
    uint64_t v3 = **(void **)(a1 + 16);
    if (v3 != v2)
    {
      uint64_t v4 = **(void **)(a1 + 16);
      do
      {
        uint64_t v6 = *(void **)(v4 - 80);
        v4 -= 80;
        uint64_t v5 = v6;
        if (v6)
        {
          *(void *)(v3 - 72) = v5;
          operator delete(v5);
        }
        uint64_t v3 = v4;
      }
      while (v4 != v2);
    }
  }
  return a1;
}

void sub_18E0DDE40(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_18E0DDE94((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_18E0DDE94(uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (v2 != *a1)
  {
    uint64_t v4 = a1[1];
    do
    {
      uint64_t v6 = *(void **)(v4 - 80);
      v4 -= 80;
      uint64_t v5 = v6;
      if (v6)
      {
        *(void *)(v2 - 72) = v5;
        operator delete(v5);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

uint64_t sub_18E0DDEEC(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v2 = **(void **)(a1 + 8);
    uint64_t v3 = **(void **)(a1 + 16);
    if (v3 != v2)
    {
      do
      {
        uint64_t v4 = v3 - 40;
        uint64_t v6 = (void **)(v3 - 24);
        sub_18E0DDE40(&v6);
        uint64_t v3 = v4;
      }
      while (v4 != v2);
    }
  }
  return a1;
}

void sub_18E0DDF5C(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = v4 - 40;
        uint64_t v7 = (void **)(v4 - 24);
        sub_18E0DDE40(&v7);
        uint64_t v4 = v6;
      }
      while (v6 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_18E0DDFD8(uint64_t a1, void *a2)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v3 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  uint64_t v4 = a2 + 1;
  uint64_t v5 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    uint64_t v6 = 0;
    uint64_t v7 = (uint64_t *)(a1 + 8);
    while (1)
    {
      unint64_t v8 = v5[4];
      uint64_t v9 = v3;
      if (v7 == v3) {
        goto LABEL_9;
      }
      unint64_t v10 = v6;
      uint64_t v11 = v3;
      if (v6)
      {
        do
        {
          uint64_t v9 = v10;
          unint64_t v10 = (uint64_t *)v10[1];
        }
        while (v10);
      }
      else
      {
        do
        {
          uint64_t v9 = (uint64_t *)v11[2];
          BOOL v12 = *v9 == (void)v11;
          uint64_t v11 = v9;
        }
        while (v12);
      }
      if (v9[4] < v8)
      {
LABEL_9:
        if (v6) {
          uint64_t v13 = (uint64_t **)v9;
        }
        else {
          uint64_t v13 = (uint64_t **)v3;
        }
        if (v6) {
          uint64_t v14 = (uint64_t **)(v9 + 1);
        }
        else {
          uint64_t v14 = (uint64_t **)v3;
        }
        if (!*v14)
        {
LABEL_25:
          int64_t v17 = (uint64_t *)operator new(0x28uLL);
          v17[4] = v8;
          sub_18E01BD84((uint64_t **)a1, (uint64_t)v13, v14, v17);
        }
      }
      else
      {
        uint64_t v14 = (uint64_t **)v3;
        uint64_t v13 = (uint64_t **)v3;
        if (!v6) {
          goto LABEL_25;
        }
        uint64_t v15 = v6;
        while (1)
        {
          while (1)
          {
            uint64_t v13 = (uint64_t **)v15;
            unint64_t v16 = v15[4];
            if (v16 <= v8) {
              break;
            }
            uint64_t v15 = *v13;
            uint64_t v14 = v13;
            if (!*v13) {
              goto LABEL_25;
            }
          }
          if (v16 >= v8) {
            break;
          }
          uint64_t v15 = v13[1];
          if (!v15)
          {
            uint64_t v14 = v13 + 1;
            goto LABEL_25;
          }
        }
      }
      uint64_t v18 = (void *)v5[1];
      if (v18)
      {
        do
        {
          uint64_t v19 = v18;
          uint64_t v18 = (void *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          uint64_t v19 = (void *)v5[2];
          BOOL v12 = *v19 == (void)v5;
          uint64_t v5 = v19;
        }
        while (!v12);
      }
      if (v19 == v4) {
        return a1;
      }
      uint64_t v7 = *(uint64_t **)a1;
      uint64_t v6 = *(uint64_t **)(a1 + 8);
      uint64_t v5 = v19;
    }
  }
  return a1;
}

void sub_18E0DE144(_Unwind_Exception *a1)
{
  sub_18E012A10(v1, v2);
  _Unwind_Resume(a1);
}

void sub_18E0DE160()
{
}

void *sub_18E0DE174()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1EDD1AB08;
  return result;
}

void sub_18E0DE1AC(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1AB08;
}

void sub_18E0DE1D4(int a1, raven::RavenRayTracingActiveObject **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8 = *a2;
  sub_18E0BF728((uint64_t)v9, this, (uint64_t)this, a4, a5, a6, a7, a8);
  raven::RavenRayTracingActiveObject::HandleEvent(v8, (const raven::GnssPreprocessedMeasurementsEvent *)v9);
  v9[0] = &unk_1EDD154D0;
  uint64_t v11 = (void **)&v10;
  sub_18DEE4B60(&v11);
}

void sub_18E0DE244(_Unwind_Exception *a1)
{
  *(void *)(v2 - 24) = v1 + 96;
  sub_18DEE4B60((void ***)(v2 - 24));
  _Unwind_Resume(a1);
}

uint64_t sub_18E0DE27C(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD097A0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0DE2BC()
{
  return &unk_1EDD097A0;
}

void sub_18E0DE2CC()
{
}

void *sub_18E0DE2E0()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1EDD1A9A8;
  return result;
}

void sub_18E0DE318(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1A9A8;
}

double sub_18E0DE340(int a1, raven::RavenRayTracingActiveObject **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8 = *a2;
  sub_18E0C1E40(v10, this, (uint64_t)this, a4, a5, a6, a7, a8);
  return raven::RavenRayTracingActiveObject::HandleEvent(v8, (const raven::RavenSolutionEvent *)v10);
}

uint64_t sub_18E0DE380(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09760)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0DE3C0()
{
  return &unk_1EDD09760;
}

void sub_18E0DE3D0()
{
}

void *sub_18E0DE3E4()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1EDD1A8F8;
  return result;
}

void sub_18E0DE41C(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1A8F8;
}

void sub_18E0DE444(int a1, int64x2_t **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8 = *a2;
  sub_18E0BC290((uint64_t)v9, this, (uint64_t)this, a4, a5, a6, a7, a8);
  if (!v9[26]) {
    raven::RavenRayTracingActiveObject::Reset(v8);
  }
}

uint64_t sub_18E0DE488(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09740)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0DE4C8()
{
  return &unk_1EDD09740;
}

void sub_18E0DE4D8()
{
}

void *sub_18E0DE4EC()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1EDD1AA00;
  return result;
}

void sub_18E0DE524(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1AA00;
}

void sub_18E0DE54C(int a1, raven::RavenRayTracingActiveObject **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = *a2;
  uint64_t EventType = cnframework::GenericEvent::GetEventType(this, (uint64_t)a2, (uint64_t)this, a4, a5, a6, a7, a8);
  {
    uint64_t v18 = *((void *)this + 2);
    if (v18) {
      uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 16))(v18);
    }
    else {
      uint64_t v19 = MEMORY[0x1E4FBA3D8];
    }
    char v26 = (const char *)(*(void *)(v19 + 8) & 0x7FFFFFFFFFFFFFFFLL);
    if (v26 != (const char *)((unint64_t)off_1EDD053A0 & 0x7FFFFFFFFFFFFFFFLL)
      && strcmp(v26, (const char *)((unint64_t)off_1EDD053A0 & 0x7FFFFFFFFFFFFFFFLL)))
    {
      v43.__vftable = 0;
      std::bad_cast::bad_cast(&v43);
      v43.__vftable = (std::bad_cast_vtbl *)&unk_1EDD12A18;
      sub_18E0BA8B8();
    }
    uint64_t v27 = *((void *)this + 2);
    uint64_t v33 = &unk_1EDD14270;
    long long v28 = *(_OWORD *)(v27 + 32);
    long long v34 = *(_OWORD *)(v27 + 16);
    long long v35 = v28;
    long long v29 = *(_OWORD *)(v27 + 80);
    long long v30 = *(_OWORD *)(v27 + 96);
    long long v31 = *(_OWORD *)(v27 + 64);
    long long v36 = *(_OWORD *)(v27 + 48);
    long long v39 = v30;
    long long v38 = v29;
    long long v37 = v31;
    if (*(char *)(v27 + 135) < 0)
    {
      sub_18DEDE668(&__p, *(void **)(v27 + 112), *(void *)(v27 + 120));
    }
    else
    {
      long long v32 = *(_OWORD *)(v27 + 112);
      uint64_t v41 = *(void *)(v27 + 128);
      long long __p = v32;
    }
  }
  else
  {
    LOWORD(v43.__vftable) = 3;
    unsigned __int8 v42 = 5;
    uint64_t v20 = cnframework::GenericEvent::GetEventType(this, v11, v12, v13, v14, v15, v16, v17);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v43, &v42, "Attempted to cast a GenericEvent of type %s to type %s.", v21, v22, v23, v24, v25, *(unsigned char *)(v20 + 8));
    long long v35 = 0uLL;
    long long v34 = 0uLL;
    uint64_t v33 = &unk_1EDD14270;
    long long v36 = 0uLL;
    long long v37 = 0uLL;
    long long v38 = 0uLL;
    *(void *)&long long v39 = 0;
    *((void *)&v39 + 1) = 0x7FF8000000000000;
    long long __p = 0uLL;
    uint64_t v41 = 0;
  }
  raven::RavenRayTracingActiveObject::HandleEvent(v9, (const raven::RayTracingTileEvent *)&v33);
  uint64_t v33 = &unk_1EDD14270;
  if (SHIBYTE(v41) < 0) {
    operator delete((void *)__p);
  }
}

void sub_18E0DE774(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  std::exception::~exception((std::exception *)(v29 - 40));
  _Unwind_Resume(a1);
}

uint64_t sub_18E0DE7BC(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09770)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0DE7FC()
{
  return &unk_1EDD09770;
}

void sub_18E0DE80C()
{
}

void *sub_18E0DE820()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1EDD1AA58;
  return result;
}

void sub_18E0DE858(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1AA58;
}

double sub_18E0DE880(int a1, raven::RavenRayTracingActiveObject **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8 = *a2;
  sub_18E0C25B0((uint64_t)v10, this, (uint64_t)this, a4, a5, a6, a7, a8);
  *(void *)&double result = raven::RavenRayTracingActiveObject::HandleEvent(v8, (const raven::SignalEnvironmentEvent *)v10).n128_u64[0];
  return result;
}

uint64_t sub_18E0DE8C0(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09780)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0DE900()
{
  return &unk_1EDD09780;
}

void sub_18E0DE910()
{
}

void *sub_18E0DE924()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1EDD1BFA8;
  return result;
}

void sub_18E0DE95C(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1BFA8;
}

void sub_18E0DE984(int a1, raven::RavenSignalEnvironmentActiveObject **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8 = *a2;
  sub_18E0C25B0((uint64_t)v9, this, (uint64_t)this, a4, a5, a6, a7, a8);
  raven::RavenSignalEnvironmentActiveObject::HandleEvent(v8, (const raven::SignalEnvironmentEvent *)v9);
}

uint64_t sub_18E0DE9C4(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09B60)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0DEA04()
{
  return &unk_1EDD09B60;
}

void sub_18E0DEA14()
{
}

void *sub_18E0DEA28()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1EDD1BF50;
  return result;
}

void sub_18E0DEA60(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1BF50;
}

uint64_t sub_18E0DEA88(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  sub_18E0BD4F4((uint64_t)v10, this, (uint64_t)this, a4, a5, a6, a7, a8);
  return raven::RavenSignalEnvironmentActiveObject::HandleEvent(v8, (const raven::TimeMarkEvent *)v10);
}

uint64_t sub_18E0DEAC8(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09B50)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0DEB08()
{
  return &unk_1EDD09B50;
}

void sub_18E0DEB18()
{
}

void *sub_18E0DEB2C()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1EDD1A3D0;
  return result;
}

void sub_18E0DEB64(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1A3D0;
}

void sub_18E0DEB8C(int a1, raven::RavenSolutionActiveObject **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  sub_18E0C1E40(v9, this, (uint64_t)this, a4, a5, a6, a7, a8);
  raven::RavenSolutionActiveObject::HandleEvent(v8, (const raven::RavenSolutionEvent *)v9);
}

uint64_t sub_18E0DEBCC(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09650)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0DEC0C()
{
  return &unk_1EDD09650;
}

void sub_18E0DEC1C()
{
}

void *sub_18E0DEC30()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1EDD1A378;
  return result;
}

void sub_18E0DEC68(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1A378;
}

void sub_18E0DEC90(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  __n128 v9 = sub_18E0BC290((uint64_t)v10, this, (uint64_t)this, a4, a5, a6, a7, a8);
  if (!v10[26]) {
    (*(void (**)(uint64_t, __n128))(*(void *)v8 + 48))(v8, v9);
  }
}

uint64_t sub_18E0DECF4(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09640)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0DED34()
{
  return &unk_1EDD09640;
}

void sub_18E0DED44()
{
}

void *sub_18E0DED58()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1EDD1A320;
  return result;
}

void sub_18E0DED90(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1A320;
}

double sub_18E0DEDB8(int a1, raven::RavenSolutionActiveObject **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  sub_18E0BD4F4((uint64_t)v10, this, (uint64_t)this, a4, a5, a6, a7, a8);
  *(void *)&double result = raven::RavenSolutionActiveObject::HandleEvent(v8, (const raven::TimeMarkEvent *)v10).n128_u64[0];
  return result;
}

uint64_t sub_18E0DEDF8(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09630)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0DEE38()
{
  return &unk_1EDD09630;
}

void sub_18E0DEE48()
{
}

void *sub_18E0DEE5C()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1EDD1A480;
  return result;
}

void sub_18E0DEE94(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1A480;
}

void sub_18E0DEEBC(int a1, cnlogging::ProtobufOutputStream ***a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  sub_18E0CB0E8((uint64_t)v9, this, (uint64_t)this, a4, a5, a6, a7, a8);
  raven::RavenSolutionActiveObject::WriteReceiverDifferentialCodeBiasesToProtobuf(v8, (const raven::ReceiverDifferentialCodeBiasesEvent *)v9);
}

uint64_t sub_18E0DEEFC(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09670)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0DEF3C()
{
  return &unk_1EDD09670;
}

void sub_18E0DEF4C()
{
}

void *sub_18E0DEF60()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1EDD1A428;
  return result;
}

void sub_18E0DEF98(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1A428;
}

void sub_18E0DEFC0(int a1, raven::RavenSolutionActiveObject **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  sub_18E0CB7F4((uint64_t)v9, this, (uint64_t)this, a4, a5, a6, a7, a8);
  raven::RavenSolutionActiveObject::WriteThinShellIonosphereParametersToProtobuf(v8, (const raven::ThinShellIonosphereParametersEvent *)v9);
}

uint64_t sub_18E0DF000(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09660)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0DF040()
{
  return &unk_1EDD09660;
}

void sub_18E0DF050()
{
}

void *sub_18E0DF064()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1EDD1D868;
  return result;
}

void sub_18E0DF09C(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1D868;
}

void sub_18E0DF0C4(int a1, void *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __n128 v9 = (unsigned char *)*a2;
  uint64_t EventType = cnframework::GenericEvent::GetEventType(this, (uint64_t)a2, (uint64_t)this, a4, a5, a6, a7, a8);
  {
    uint64_t v18 = *((void *)this + 2);
    if (v18) {
      uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 16))(v18);
    }
    else {
      uint64_t v19 = MEMORY[0x1E4FBA3D8];
    }
    char v26 = (const char *)(*(void *)(v19 + 8) & 0x7FFFFFFFFFFFFFFFLL);
    if (v26 != (const char *)((unint64_t)off_1EDD051C0 & 0x7FFFFFFFFFFFFFFFLL)
      && strcmp(v26, (const char *)((unint64_t)off_1EDD051C0 & 0x7FFFFFFFFFFFFFFFLL)))
    {
      v34.__vftable = 0;
      std::bad_cast::bad_cast(&v34);
      v34.__vftable = (std::bad_cast_vtbl *)&unk_1EDD12A18;
      sub_18E0BA8B8();
    }
    char v33 = *(unsigned char *)(*((void *)this + 2) + 112);
  }
  else
  {
    LOWORD(v34.__vftable) = 3;
    LOBYTE(v37) = 5;
    uint64_t v20 = cnframework::GenericEvent::GetEventType(this, v11, v12, v13, v14, v15, v16, v17);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v34, (unsigned __int8 *)&v37, "Attempted to cast a GenericEvent of type %s to type %s.", v21, v22, v23, v24, v25, *(unsigned char *)(v20 + 8));
    char v33 = 0;
  }
  if (v9[1976])
  {
    v9[480] = v33;
  }
  else
  {
    __int16 v37 = 12;
    unsigned __int8 v36 = 2;
    (*(void (**)(std::bad_cast *__return_ptr, unsigned char *))(*(void *)v9 + 16))(&v34, v9);
    if (v35 >= 0) {
      long long v32 = &v34;
    }
    else {
      LOBYTE(v32) = v34.__vftable;
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v37, &v36, "Warning: %s Active Object not configured", v27, v28, v29, v30, v31, (char)v32);
    if (v35 < 0) {
      operator delete(v34.__vftable);
    }
  }
}

void sub_18E0DF320(_Unwind_Exception *a1)
{
  std::exception::~exception((std::exception *)(v1 - 64));
  _Unwind_Resume(a1);
}

uint64_t sub_18E0DF354(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09FE0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0DF394()
{
  return &unk_1EDD09FE0;
}

void sub_18E0DF3A4()
{
}

void *sub_18E0DF3B8()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1EDD1D810;
  return result;
}

void sub_18E0DF3F0(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1D810;
}

void sub_18E0DF418(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  sub_18E0C1834((uint64_t)v15, this, (uint64_t)this, a4, a5, a6, a7, a8);
  if (*(unsigned char *)(v8 + 1976))
  {
    if (*(unsigned char *)(v8 + 904))
    {
      memcpy((void *)(v8 + 552), v16, 0x160uLL);
    }
    else
    {
      *(void *)(v8 + 544) = &unk_1EDD137C0;
      memcpy((void *)(v8 + 552), v16, 0x160uLL);
      *(unsigned char *)(v8 + 904) = 1;
    }
  }
  else
  {
    __int16 v20 = 12;
    unsigned __int8 v19 = 2;
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v8 + 16))(v17, v8);
    if (v18 >= 0) {
      uint64_t v14 = v17;
    }
    else {
      LOBYTE(v14) = v17[0];
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v20, &v19, "Warning: %s Active Object not configured", v9, v10, v11, v12, v13, (char)v14);
    if (v18 < 0) {
      operator delete(v17[0]);
    }
  }
}

void sub_18E0DF534(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 41) < 0) {
    operator delete(*(void **)(v1 - 64));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_18E0DF550(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09FD0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0DF590()
{
  return &unk_1EDD09FD0;
}

void sub_18E0DF5A0()
{
}

void *sub_18E0DF5B4()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1EDD1D8C0;
  return result;
}

void sub_18E0DF5EC(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1D8C0;
}

void sub_18E0DF614(uint64_t a1)
{
  MEMORY[0x1F4188790](a1);
  uint64_t v2 = *v1;
  sub_18E0C1E40(v15, v3, (uint64_t)v3, v4, v5, v6, v7, v8);
  if (v2[1976])
  {
    sub_18DFF49CC((uint64_t)__p);
    if (!raven::RavenSolutionPostprocessor::PostprocessRavenSolution((raven::RavenSolutionPostprocessor *)(v2 + 480), (const raven::RavenSolutionEvent *)v15, (raven::RavenSolutionEvent *)__p))sub_18E0C3028(); {
  }
    }
  else
  {
    __int16 v19 = 12;
    unsigned __int8 v18 = 2;
    (*(void (**)(void **__return_ptr, unsigned char *))(*(void *)v2 + 16))(__p, v2);
    if (v17 >= 0) {
      uint64_t v14 = __p;
    }
    else {
      LOBYTE(v14) = __p[0];
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v19, &v18, "Warning: %s Active Object not configured", v9, v10, v11, v12, v13, (char)v14);
    if (v17 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_18E0DF718(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x99F]) < 0) {
    operator delete((void *)STACK[0x988]);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_18E0DF734(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09FF0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0DF774()
{
  return &unk_1EDD09FF0;
}

void sub_18E0DF784()
{
}

void *sub_18E0DF798()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1EDD1D918;
  return result;
}

void sub_18E0DF7D0(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1D918;
}

double sub_18E0DF7F8(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  __n128 v9 = sub_18E0C25B0((uint64_t)v17, this, (uint64_t)this, a4, a5, a6, a7, a8);
  if (*(unsigned char *)(v8 + 1976))
  {
    if (*(unsigned char *)(v8 + 1856))
    {
      *(_OWORD *)(v8 + 1920) = v21;
      *(_OWORD *)(v8 + 1936) = v22;
      *(_OWORD *)(v8 + 1952) = v23;
      *(unsigned char *)(v8 + 1968) = v24;
      *(_OWORD *)(v8 + 1872) = v18;
      *(_OWORD *)(v8 + 1888) = v19;
      double result = *(double *)&v20;
      *(_OWORD *)(v8 + 1904) = v20;
    }
    else
    {
      *(void *)(v8 + 1864) = &unk_1EDD145D0;
      *(_OWORD *)(v8 + 1920) = v21;
      *(_OWORD *)(v8 + 1936) = v22;
      *(_OWORD *)(v8 + 1952) = v23;
      *(unsigned char *)(v8 + 1968) = v24;
      *(_OWORD *)(v8 + 1872) = v18;
      *(_OWORD *)(v8 + 1888) = v19;
      double result = *(double *)&v20;
      *(_OWORD *)(v8 + 1904) = v20;
      *(unsigned char *)(v8 + 1856) = 1;
    }
  }
  else
  {
    __int16 v28 = 12;
    unsigned __int8 v27 = 2;
    (*(void (**)(void **__return_ptr, uint64_t, __n128))(*(void *)v8 + 16))(v25, v8, v9);
    if (v26 >= 0) {
      uint64_t v16 = v25;
    }
    else {
      LOBYTE(v16) = v25[0];
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v28, &v27, "Warning: %s Active Object not configured", v11, v12, v13, v14, v15, (char)v16);
    if (v26 < 0) {
      operator delete(v25[0]);
    }
  }
  return result;
}

void sub_18E0DF954(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 25) < 0) {
    operator delete(*(void **)(v1 - 48));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_18E0DF970(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD0A000)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0DF9B0()
{
  return &unk_1EDD0A000;
}

void sub_18E0DF9C0()
{
}

void *sub_18E0DF9D4()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1EDD1BE48;
  return result;
}

void sub_18E0DFA0C(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1BE48;
}

void sub_18E0DFA34(uint64_t a1)
{
  MEMORY[0x1F4188790](a1);
  uint64_t v2 = *v1;
  sub_18E0C1E40(v21, v3, (uint64_t)v3, v4, v5, v6, v7, v8);
  if (v2[976])
  {
    raven::RavenSolutionSelector::HandleEvent((raven::RavenSolutionSelector *)(v2 + 480), (const raven::RavenSolutionEvent *)v21, v9, v10, v11, v12, v13, v14);
    sub_18DFF49CC((uint64_t)__p);
    if (!raven::RavenSolutionSelector::GetRavenSolution((raven::RavenSolutionSelector *)(v2 + 480), (raven::RavenSolutionEvent *)__p))sub_18E0C3028(); {
  }
    }
  else
  {
    __int16 v25 = 12;
    unsigned __int8 v24 = 2;
    (*(void (**)(void **__return_ptr, unsigned char *))(*(void *)v2 + 16))(__p, v2);
    if (v23 >= 0) {
      long long v20 = __p;
    }
    else {
      LOBYTE(v20) = __p[0];
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v25, &v24, "Warning: %s Active Object not configured", v15, v16, v17, v18, v19, (char)v20);
    if (v23 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_18E0DFB44(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x99F]) < 0) {
    operator delete((void *)STACK[0x988]);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_18E0DFB60(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09B20)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0DFBA0()
{
  return &unk_1EDD09B20;
}

void sub_18E0DFBB0()
{
}

void *sub_18E0DFBC4()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1EDD1BEA0;
  return result;
}

void sub_18E0DFBFC(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1BEA0;
}

double sub_18E0DFC24(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  sub_18E0D2C94((uint64_t)v10, this, (uint64_t)this, a4, a5, a6, a7, a8);
  *(void *)&double result = raven::RavenSolutionSelector::HandleEvent(v8 + 480, (uint64_t)v10).n128_u64[0];
  return result;
}

uint64_t sub_18E0DFC64(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09B30)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0DFCA4()
{
  return &unk_1EDD09B30;
}

void sub_18E0DFCB4()
{
}

void *sub_18E0DFCC8()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1EDD1A1C0;
  return result;
}

void sub_18E0DFD00(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1A1C0;
}

__n128 sub_18E0DFD28(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v58[2] = *(double *)MEMORY[0x1E4F143B8];
  uint64_t v9 = *a2;
  uint64_t EventType = cnframework::GenericEvent::GetEventType(this, (uint64_t)a2, (uint64_t)this, a4, a5, a6, a7, a8);
  {
    uint64_t v18 = *((void *)this + 2);
    if (v18) {
      uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 16))(v18);
    }
    else {
      uint64_t v19 = MEMORY[0x1E4FBA3D8];
    }
    __int16 v28 = (const char *)(*(void *)(v19 + 8) & 0x7FFFFFFFFFFFFFFFLL);
    if (v28 != (const char *)((unint64_t)off_1EDD04FA0 & 0x7FFFFFFFFFFFFFFFLL)
      && strcmp(v28, (const char *)((unint64_t)off_1EDD04FA0 & 0x7FFFFFFFFFFFFFFFLL)))
    {
      v51.__vftable = 0;
      std::bad_cast::bad_cast(&v51);
      v51.__vftable = (std::bad_cast_vtbl *)&unk_1EDD12A18;
      sub_18E0BA8B8();
    }
    uint64_t v29 = *((void *)this + 2);
    long long v42 = *(_OWORD *)(v29 + 16);
    int8x16_t v43 = *(int8x16_t *)(v29 + 32);
    __n128 result = *(__n128 *)(v29 + 80);
    int8x16_t v26 = *(int8x16_t *)(v29 + 96);
    long long v44 = *(_OWORD *)(v29 + 48);
    int8x16_t v45 = *(int8x16_t *)(v29 + 64);
    __n128 v46 = result;
    int8x16_t v47 = v26;
  }
  else
  {
    LOWORD(v51.__vftable) = 3;
    LOBYTE(v57) = 5;
    uint64_t v20 = cnframework::GenericEvent::GetEventType(this, v11, v12, v13, v14, v15, v16, v17);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v51, (unsigned __int8 *)&v57, "Attempted to cast a GenericEvent of type %s to type %s.", v21, v22, v23, v24, v25, *(unsigned char *)(v20 + 8));
    result.n128_u64[0] = 0;
    int8x16_t v43 = 0uLL;
    long long v42 = 0uLL;
    long long v44 = 0uLL;
    int8x16_t v45 = 0uLL;
    __n128 v46 = 0uLL;
    v47.i64[0] = 0;
    v47.i64[1] = 0x7FF8000000000000;
  }
  if (*(unsigned char *)(v9 + 480))
  {
    v51.__vftable = (std::bad_cast_vtbl *)&unk_1EDD13820;
    *(_OWORD *)&v53[16] = v44;
    int8x16_t v54 = v45;
    __n128 v55 = v46;
    int8x16_t v56 = v47;
    long long v52 = v42;
    *(int8x16_t *)long long v53 = v43;
    raven::PopulateAllTimeFields((uint64_t)&v52, v9 + 488, v43, v26);
    if (v53[0])
    {
      if (cnnavigation::GNSSUTCParameters::IsValid((cnnavigation::GNSSUTCParameters *)(v9 + 584)))
      {
        LODWORD(v50[0]) = 0;
        v50[1] = 0.0;
        long long v49 = *(_OWORD *)&v53[8];
        if (!cnnavigation::iOSTimeToJulianTime((uint64_t)&v49, (uint64_t)&v57)
          && !cnnavigation::JulianTimeToGPSTime((uint64_t)&v57, *(_DWORD *)(v9 + 624), (uint64_t)v50))
        {
          cnnavigation::TAITime::TAITime(&v48, v50, (cnnavigation::GNSSUTCParameters *)(v9 + 584));
          int8x16_t v35 = v48;
          int8x16_t v54 = v48;
          v53[24] = 1;
        }
      }
    }
    if (!*(unsigned char *)(v9 + 656)
      || (*(void *)&v58[0] = CNTimeSpan::operator-((uint64_t)&v52, (void *)(v9 + 680), v35, v36),
          v58[1] = v37,
          LOBYTE(v57) = 1,
          !sub_18DEE4CB8(v58, (double *)(v9 + 664))))
    {
      LOWORD(v57) = 12;
      LOBYTE(v50[0]) = 3;
      double v41 = *((double *)&v52 + 1) + (double)(uint64_t)v52;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v57, (unsigned __int8 *)v50, "Time scales: Raven, %.6f, iOS, %.6f, TAIuncorrected, %.6f", v30, v31, v32, v33, v34, SLOBYTE(v41));
      int v38 = *(unsigned __int8 *)(v9 + 656);
      *(_OWORD *)(v9 + 664) = v52;
      if (!v38) {
        *(unsigned char *)(v9 + 656) = 1;
      }
    }
    long long v39 = operator new(0x60uLL);
    v39[1] = 0;
    v39[2] = 0;
    *long long v39 = &unk_1EDD1E458;
    v39[3] = &unk_1EDD0A260;
    uint64_t v40 = MEMORY[0x1E4FBA3D8];
    *((unsigned char *)v39 + 32) = 0;
    v39[5] = 0;
    v39[6] = v40;
    v39[7] = 0;
    v39[8] = 0;
    sub_18DEDE7B0(v39 + 9, "");
    *((unsigned char *)v39 + 32) = 1;
    operator new();
  }
  return result;
}

void sub_18E0E02D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,std::exception a32)
{
}

uint64_t sub_18E0E036C(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD095F0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0E03AC()
{
  return &unk_1EDD095F0;
}

void sub_18E0E03BC()
{
}

void *sub_18E0E03D0()
{
}

void sub_18E0E03DC()
{
}

void sub_18E0E046C()
{
}

void *sub_18E0E0480()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1EDD1A2C8;
  return result;
}

void sub_18E0E04B8(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1A2C8;
}

double sub_18E0E04E0(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = *a2;
  uint64_t EventType = cnframework::GenericEvent::GetEventType(this, (uint64_t)a2, (uint64_t)this, a4, a5, a6, a7, a8);
  {
    uint64_t v18 = *((void *)this + 2);
    if (v18) {
      uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 16))(v18);
    }
    else {
      uint64_t v19 = MEMORY[0x1E4FBA3D8];
    }
    unsigned __int8 v27 = (const char *)(*(void *)(v19 + 8) & 0x7FFFFFFFFFFFFFFFLL);
    if (v27 != (const char *)((unint64_t)off_1EDD05470 & 0x7FFFFFFFFFFFFFFFLL)
      && strcmp(v27, (const char *)((unint64_t)off_1EDD05470 & 0x7FFFFFFFFFFFFFFFLL)))
    {
      v35[0].__vftable = 0;
      std::bad_cast::bad_cast(v35);
      v35[0].__vftable = (std::bad_cast_vtbl *)&unk_1EDD12A18;
      sub_18E0BA8B8();
    }
    uint64_t v28 = *((void *)this + 2);
    int v29 = *(unsigned __int8 *)(v28 + 112);
    int v30 = *(unsigned __int8 *)(v28 + 113);
    int v38 = *(_DWORD *)(v28 + 114);
    __int16 v39 = *(_WORD *)(v28 + 118);
    double result = *(double *)(v28 + 120);
    double v31 = *(double *)(v28 + 128);
    *(_OWORD *)double v37 = *(_OWORD *)(v28 + 136);
    int v32 = *(_DWORD *)(v28 + 152);
    *(_OWORD *)&v35[0].__vftable = *(_OWORD *)(v28 + 156);
    int v36 = *(_DWORD *)(v28 + 172);
    if (v29 && fabs(result) < 0.000001 && fabs(v31) < 0.000001 && (v32 + 500) <= 0x3E8)
    {
      int v33 = *(_DWORD *)(v28 + 176);
      unsigned int v34 = v32 - v33;
      if (v32 - v33 < 0) {
        unsigned int v34 = v33 - v32;
      }
      if (v34 <= 1 && v30 == 1)
      {
        *(unsigned char *)(v9 + 584) = v29;
        *(unsigned char *)(v9 + 585) = 1;
        *(_WORD *)(v9 + 590) = v39;
        *(_DWORD *)(v9 + 586) = v38;
        *(double *)(v9 + 592) = result;
        *(double *)(v9 + 600) = v31;
        *(_OWORD *)(v9 + 608) = *(_OWORD *)v37;
        *(_DWORD *)(v9 + 624) = v32;
        *(_DWORD *)(v9 + 644) = v36;
        double result = *(double *)&v35[0].__vftable;
        *(_OWORD *)(v9 + 628) = *(_OWORD *)&v35[0].__vftable;
        *(_DWORD *)(v9 + 648) = v33;
      }
    }
  }
  else
  {
    LOWORD(v35[0].__vftable) = 3;
    v37[0] = 5;
    uint64_t v20 = cnframework::GenericEvent::GetEventType(this, v11, v12, v13, v14, v15, v16, v17);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v35, v37, "Attempted to cast a GenericEvent of type %s to type %s.", v21, v22, v23, v24, v25, *(unsigned char *)(v20 + 8));
  }
  return result;
}

void sub_18E0E06D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::exception a11)
{
}

uint64_t sub_18E0E06E8(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09620)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0E0728()
{
  return &unk_1EDD09620;
}

void sub_18E0E0738()
{
}

void *sub_18E0E074C()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1EDD1A218;
  return result;
}

void sub_18E0E0784(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1A218;
}

void sub_18E0E07AC(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  sub_18E0C1834((uint64_t)v19, this, (uint64_t)this, a4, a5, a6, a7, a8);
  if ((v26 | 8) == 9 && (_BYTE)v21)
  {
    double v9 = fabs(*(double *)&v22 + (double)*((uint64_t *)&v21 + 1));
    BOOL v10 = (unint64_t)(*(void *)&v9 - 0x10000000000000) >> 53 > 0x3FE
       && (unint64_t)(*(void *)&v9 - 1) > 0xFFFFFFFFFFFFELL;
    if (!v10 || COERCE__INT64(*(double *)&v22 + (double)*((uint64_t *)&v21 + 1)) == 0)
    {
      double v12 = fabs(*((double *)&v20 + 1) + (double)(uint64_t)v20);
      if ((unint64_t)(*(void *)&v12 - 0x10000000000000) >> 53 <= 0x3FE
        || (unint64_t)(*(void *)&v12 - 1) <= 0xFFFFFFFFFFFFELL
        || COERCE__INT64(*((double *)&v20 + 1) + (double)(uint64_t)v20) == 0)
      {
        long long v15 = v23;
        *(_OWORD *)(v8 + 520) = v22;
        *(_OWORD *)(v8 + 536) = v15;
        long long v16 = v25;
        *(_OWORD *)(v8 + 552) = v24;
        *(_OWORD *)(v8 + 568) = v16;
        long long v17 = v21;
        *(_OWORD *)(v8 + 488) = v20;
        int v18 = *(unsigned __int8 *)(v8 + 480);
        *(_OWORD *)(v8 + 504) = v17;
        if (!v18) {
          *(unsigned char *)(v8 + 480) = 1;
        }
      }
    }
  }
}

uint64_t sub_18E0E08A8(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09600)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0E08E8()
{
  return &unk_1EDD09600;
}

void sub_18E0E08F8()
{
}

void *sub_18E0E090C()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1EDD1A270;
  return result;
}

void sub_18E0E0944(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1A270;
}

void sub_18E0E096C(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  sub_18E0C3A8C((uint64_t)v19, this, (uint64_t)this, a4, a5, a6, a7, a8);
  if ((v26 | 8) == 9 && (_BYTE)v21)
  {
    double v9 = fabs(*(double *)&v22 + (double)*((uint64_t *)&v21 + 1));
    BOOL v10 = (unint64_t)(*(void *)&v9 - 0x10000000000000) >> 53 > 0x3FE
       && (unint64_t)(*(void *)&v9 - 1) > 0xFFFFFFFFFFFFELL;
    if (!v10 || COERCE__INT64(*(double *)&v22 + (double)*((uint64_t *)&v21 + 1)) == 0)
    {
      double v12 = fabs(*((double *)&v20 + 1) + (double)(uint64_t)v20);
      if ((unint64_t)(*(void *)&v12 - 0x10000000000000) >> 53 <= 0x3FE
        || (unint64_t)(*(void *)&v12 - 1) <= 0xFFFFFFFFFFFFELL
        || COERCE__INT64(*((double *)&v20 + 1) + (double)(uint64_t)v20) == 0)
      {
        long long v15 = v23;
        *(_OWORD *)(v8 + 520) = v22;
        *(_OWORD *)(v8 + 536) = v15;
        long long v16 = v25;
        *(_OWORD *)(v8 + 552) = v24;
        *(_OWORD *)(v8 + 568) = v16;
        long long v17 = v21;
        *(_OWORD *)(v8 + 488) = v20;
        int v18 = *(unsigned __int8 *)(v8 + 480);
        *(_OWORD *)(v8 + 504) = v17;
        if (!v18) {
          *(unsigned char *)(v8 + 480) = 1;
        }
      }
    }
  }
}

uint64_t sub_18E0E0A68(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09610)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0E0AA8()
{
  return &unk_1EDD09610;
}

void sub_18E0E0AB8()
{
}

void *sub_18E0E0ACC()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1EDD1B9D0;
  return result;
}

void sub_18E0E0B04(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1B9D0;
}

void sub_18E0E0B2C(int a1, unsigned char **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  sub_18E0BA6B4((uint64_t)v9, this, (uint64_t)this, a4, a5, a6, a7, a8);
  if (v8[480])
  {
    if (cnestimation::PeriodicityTracker::AddSignalSample((cnestimation::PeriodicityTracker *)(v8 + 496), sqrt(v12 * v12 + v11 * v11 + v13 * v13)))(*(void (**)(unsigned char *))(*(void *)v8 + 96))(v8); {
    else
    }
      (*(void (**)(unsigned char *, uint64_t *))(*(void *)v8 + 104))(v8, &v10);
  }
}

uint64_t sub_18E0E0BE8(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09A50)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0E0C28()
{
  return &unk_1EDD09A50;
}

void sub_18E0E0C38()
{
}

void *sub_18E0E0C4C()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1EDD1BA28;
  return result;
}

void sub_18E0E0C84(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1BA28;
}

double sub_18E0E0CAC(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  sub_18E0BDF10((uint64_t)v10, this, (uint64_t)this, a4, a5, a6, a7, a8);
  *(_OWORD *)(v8 + 824) = v18;
  *(_OWORD *)(v8 + 840) = v19;
  *(_OWORD *)(v8 + 856) = v20;
  *(void *)(v8 + 872) = v21;
  *(_OWORD *)(v8 + 760) = v14;
  *(_OWORD *)(v8 + 776) = v15;
  *(_OWORD *)(v8 + 792) = v16;
  *(_OWORD *)(v8 + 808) = v17;
  *(_OWORD *)(v8 + 696) = *(_OWORD *)&v10[8];
  *(_OWORD *)(v8 + 712) = v11;
  *(_OWORD *)(v8 + 728) = v12;
  double result = *(double *)&v13;
  *(_OWORD *)(v8 + 744) = v13;
  return result;
}

uint64_t sub_18E0E0D48(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09A60)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0E0D88()
{
  return &unk_1EDD09A60;
}

void sub_18E0E0D98()
{
}

void *sub_18E0E0DAC()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1EDD1B978;
  return result;
}

void sub_18E0E0DE4(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1B978;
}

double sub_18E0E0E0C(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  sub_18E0C04F4((uint64_t)&v10, this, (uint64_t)this, a4, a5, a6, a7, a8);
  *(_OWORD *)(v8 + 968) = v16;
  *(_OWORD *)(v8 + 984) = v17;
  *(_OWORD *)(v8 + 1000) = v18;
  *(void *)(v8 + 1016) = v19;
  *(_OWORD *)(v8 + 904) = v12;
  *(_OWORD *)(v8 + 920) = v13;
  *(_OWORD *)(v8 + 936) = v14;
  *(_OWORD *)(v8 + 952) = v15;
  double result = *(double *)&v11;
  *(_OWORD *)(v8 + 888) = v11;
  return result;
}

uint64_t sub_18E0E0E8C(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09A40)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0E0ECC()
{
  return &unk_1EDD09A40;
}

void sub_18E0E0EDC()
{
}

void *sub_18E0E0EF0()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1EDD1A848;
  return result;
}

void sub_18E0E0F28(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1A848;
}

void sub_18E0E0F50(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  sub_18E0BDF10((uint64_t)&v9, this, (uint64_t)this, a4, a5, a6, a7, a8);
  if (*(unsigned char *)(v8 + 688))
  {
    *(void *)(v8 + 680) = v21;
    *(_OWORD *)(v8 + 632) = v18;
    *(_OWORD *)(v8 + 648) = v19;
    *(_OWORD *)(v8 + 664) = v20;
    *(_OWORD *)(v8 + 568) = v14;
    *(_OWORD *)(v8 + 584) = v15;
    *(_OWORD *)(v8 + 600) = v16;
    *(_OWORD *)(v8 + 616) = v17;
    *(_OWORD *)(v8 + 504) = v10;
    *(_OWORD *)(v8 + 520) = v11;
    *(_OWORD *)(v8 + 536) = v12;
    *(_OWORD *)(v8 + 552) = v13;
  }
  else
  {
    *(void *)(v8 + 496) = &unk_1EDD140B8;
    *(void *)(v8 + 680) = v21;
    *(_OWORD *)(v8 + 632) = v18;
    *(_OWORD *)(v8 + 648) = v19;
    *(_OWORD *)(v8 + 664) = v20;
    *(_OWORD *)(v8 + 568) = v14;
    *(_OWORD *)(v8 + 584) = v15;
    *(_OWORD *)(v8 + 600) = v16;
    *(_OWORD *)(v8 + 616) = v17;
    *(_OWORD *)(v8 + 504) = v10;
    *(_OWORD *)(v8 + 520) = v11;
    *(_OWORD *)(v8 + 536) = v12;
    *(_OWORD *)(v8 + 552) = v13;
    *(unsigned char *)(v8 + 688) = 1;
  }
  if ((v16 & 0xFE) != 2)
  {
    if (*(unsigned char *)(v8 + 1352)) {
      *(unsigned char *)(v8 + 1352) = 0;
    }
  }
}

uint64_t sub_18E0E109C(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09720)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0E10DC()
{
  return &unk_1EDD09720;
}

void sub_18E0E10EC()
{
}

void *sub_18E0E1100()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1EDD1A8A0;
  return result;
}

void sub_18E0E1138(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1A8A0;
}

void sub_18E0E1160(int a1, raven::RavenUserSpeedActiveObject **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  sub_18E0BC96C((uint64_t)v9, this, (uint64_t)this, a4, a5, a6, a7, a8);
  raven::RavenUserSpeedActiveObject::HandleEvent(v8, (const raven::FitnessSessionEvent *)v9);
}

uint64_t sub_18E0E11A0(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09730)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0E11E0()
{
  return &unk_1EDD09730;
}

void sub_18E0E11F0()
{
}

void *sub_18E0E1204()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1EDD1A7F0;
  return result;
}

void sub_18E0E123C(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1A7F0;
}

void sub_18E0E1264(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  sub_18E0C04F4((uint64_t)&v9, this, (uint64_t)this, a4, a5, a6, a7, a8);
  if (*(unsigned char *)(v8 + 1056))
  {
    *(void *)(v8 + 1048) = v18;
    *(_OWORD *)(v8 + 1000) = v15;
    *(_OWORD *)(v8 + 1016) = v16;
    *(_OWORD *)(v8 + 1032) = v17;
    *(_OWORD *)(v8 + 936) = v11;
    *(_OWORD *)(v8 + 952) = v12;
    *(_OWORD *)(v8 + 968) = v13;
    *(_OWORD *)(v8 + 984) = v14;
    *(_OWORD *)(v8 + 920) = v10;
  }
  else
  {
    *(void *)(v8 + 912) = &unk_1EDD13CF0;
    *(void *)(v8 + 1048) = v18;
    *(_OWORD *)(v8 + 1000) = v15;
    *(_OWORD *)(v8 + 1016) = v16;
    *(_OWORD *)(v8 + 1032) = v17;
    *(_OWORD *)(v8 + 936) = v11;
    *(_OWORD *)(v8 + 952) = v12;
    *(_OWORD *)(v8 + 968) = v13;
    *(_OWORD *)(v8 + 984) = v14;
    *(_OWORD *)(v8 + 920) = v10;
    *(unsigned char *)(v8 + 1056) = 1;
  }
  if (v16 != 3)
  {
    if (*(unsigned char *)(v8 + 1352)) {
      *(unsigned char *)(v8 + 1352) = 0;
    }
  }
}

uint64_t sub_18E0E1378(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09710)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0E13B8()
{
  return &unk_1EDD09710;
}

void sub_18E0E13C8()
{
}

void *sub_18E0E13DC()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1EDD1A798;
  return result;
}

void sub_18E0E1414(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1A798;
}

void sub_18E0E143C(int a1, raven::RavenUserSpeedActiveObject **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  sub_18E0BD1E0((uint64_t)v9, this, (uint64_t)this, a4, a5, a6, a7, a8);
  raven::RavenUserSpeedActiveObject::HandleEvent(v8, (const raven::StepCountEvent *)v9);
}

uint64_t sub_18E0E147C(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09700)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0E14BC()
{
  return &unk_1EDD09700;
}

void sub_18E0E14CC()
{
}

void *sub_18E0E14E0()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1EDD1A740;
  return result;
}

void sub_18E0E1518(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1A740;
}

cnprint::CNPrinter *sub_18E0E1540(int a1, raven::RavenUserSpeedActiveObject **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  sub_18E0BD4F4((uint64_t)v10, this, (uint64_t)this, a4, a5, a6, a7, a8);
  return raven::RavenUserSpeedActiveObject::HandleEvent(v8, (const raven::TimeMarkEvent *)v10);
}

uint64_t sub_18E0E1580(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD096F0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0E15C0()
{
  return &unk_1EDD096F0;
}

void sub_18E0E15D0()
{
}

void *sub_18E0E15E4()
{
}

void sub_18E0E15F0()
{
}

void sub_18E0E1688()
{
}

void *sub_18E0E169C()
{
}

void sub_18E0E16A8()
{
}

uint64_t sub_18E0E1744(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1EDD12FF8;
  *(void *)(a1 + 8) = &unk_1EDD14270;
  long long v3 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 32) = v3;
  long long v4 = *(_OWORD *)(a2 + 40);
  long long v5 = *(_OWORD *)(a2 + 56);
  long long v6 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  uint64_t v7 = a1 + 112;
  if (*(char *)(a2 + 127) < 0)
  {
    sub_18DEDE668((unsigned char *)v7, *(void **)(a2 + 104), *(void *)(a2 + 112));
  }
  else
  {
    long long v8 = *(_OWORD *)(a2 + 104);
    *(void *)(v7 + 16) = *(void *)(a2 + 120);
    *(_OWORD *)uint64_t v7 = v8;
  }
  return a1;
}

uint64_t sub_18E0E17F8(uint64_t a1)
{
  *(void *)(a1 + 8) = &unk_1EDD14270;
  if (*(char *)(a1 + 135) < 0) {
    operator delete(*(void **)(a1 + 112));
  }
  return a1;
}

void sub_18E0E184C(uint64_t a1)
{
  *(void *)(a1 + 8) = &unk_1EDD14270;
  if (*(char *)(a1 + 135) < 0) {
    operator delete(*(void **)(a1 + 112));
  }

  JUMPOUT(0x192FA6240);
}

void *sub_18E0E18C0()
{
}

void sub_18E0E18CC()
{
}

void sub_18E0E1914(_Unwind_Exception *a1)
{
  MEMORY[0x192FA6240](v1, 0x1093C40D9944445);
  _Unwind_Resume(a1);
}

uint64_t sub_18E0E1938(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1EDD13118;
  *(void *)(a1 + 8) = &unk_1EDD14628;
  long long v4 = *(_OWORD *)(a2 + 40);
  long long v5 = *(_OWORD *)(a2 + 56);
  long long v6 = *(_OWORD *)(a2 + 72);
  long long v7 = *(_OWORD *)(a2 + 88);
  long long v8 = *(_OWORD *)(a2 + 8);
  long long v9 = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 112) = 0;
  uint64_t v10 = a1 + 112;
  *(_OWORD *)(a1 + 16) = v8;
  *(_OWORD *)(a1 + 32) = v9;
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  sub_18E0DDB00(a1 + 112, *(void *)(a2 + 104), *(void *)(a2 + 112), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 112) - *(void *)(a2 + 104)) >> 3));
  *(_OWORD *)(v10 + 24) = *(_OWORD *)(a2 + 128);
  sub_18E0DDFD8(v10 + 40, (void *)(a2 + 144));
  return a1;
}

void sub_18E0E1A14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_18E0DDF5C((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_18E0E1A2C(uint64_t a1)
{
  *(void *)(a1 + 8) = &unk_1EDD14628;
  sub_18E012A10(a1 + 152, *(void **)(a1 + 160));
  long long v3 = (void **)(a1 + 112);
  sub_18E0DDF5C(&v3);
  return a1;
}

void sub_18E0E1A94(uint64_t a1)
{
  *(void *)(a1 + 8) = &unk_1EDD14628;
  sub_18E012A10(a1 + 152, *(void **)(a1 + 160));
  uint64_t v2 = (void **)(a1 + 112);
  sub_18E0DDF5C(&v2);

  JUMPOUT(0x192FA6240);
}

void *sub_18E0E1B1C()
{
}

void sub_18E0E1B28()
{
}

void sub_18E0E1B70(_Unwind_Exception *a1)
{
  MEMORY[0x192FA6240](v1, 0x10A1C401A4BC585);
  _Unwind_Resume(a1);
}

void *sub_18E0E1B94(void *a1)
{
  a1[1] = &unk_1EDD140E8;
  uint64_t v2 = (void *)a1[27];
  if (v2)
  {
    a1[28] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_18E0E1BE8(void *a1)
{
  a1[1] = &unk_1EDD140E8;
  uint64_t v2 = (void *)a1[27];
  if (v2)
  {
    a1[28] = v2;
    operator delete(v2);
  }

  JUMPOUT(0x192FA6240);
}

void *sub_18E0E1C5C()
{
}

void sub_18E0E1C68()
{
}

void sub_18E0E1D40(_Unwind_Exception *a1)
{
  MEMORY[0x192FA6240](v1, 0x10A1C4080E7FBACLL);
  _Unwind_Resume(a1);
}

uint64_t sub_18E0E1D64(uint64_t a1)
{
  *(void *)(a1 + 8) = &unk_1EDD14688;
  sub_18E15E380(a1 + 120);
  return a1;
}

void sub_18E0E1DB0(uint64_t a1)
{
  *(void *)(a1 + 8) = &unk_1EDD14688;
  sub_18E15E380(a1 + 120);

  JUMPOUT(0x192FA6240);
}

void *sub_18E0E1E1C()
{
}

void sub_18E0E1E28()
{
}

void sub_18E0E1ED0(_Unwind_Exception *a1)
{
  MEMORY[0x192FA6240](v1, 0x10A1C40FE0FDF50);
  _Unwind_Resume(a1);
}

void sub_18E0E1EF8()
{
}

void *sub_18E0E1F0C()
{
}

void sub_18E0E1F18()
{
}

void sub_18E0E1FB0()
{
}

void *sub_18E0E1FC4()
{
}

void sub_18E0E1FD0()
{
}

void sub_18E0E2068()
{
}

void *sub_18E0E207C()
{
}

void sub_18E0E2088()
{
}

void sub_18E0E2118()
{
}

void *sub_18E0E212C()
{
}

void sub_18E0E2138()
{
}

uint64_t sub_18E0E21CC(uint64_t a1)
{
  return a1;
}

void sub_18E0E21F8(uint64_t a1)
{
  raven::VIOEstimateEvent::~VIOEstimateEvent((raven::VIOEstimateEvent *)(a1 + 8));

  JUMPOUT(0x192FA6240);
}

void *sub_18E0E2244()
{
}

void sub_18E0E2250()
{
}

void sub_18E0E22F0(_Unwind_Exception *a1)
{
  MEMORY[0x192FA6240](v1, 0x1081C408EED9911);
  _Unwind_Resume(a1);
}

uint64_t sub_18E0E2314(uint64_t a1)
{
  return a1;
}

void sub_18E0E2340(uint64_t a1)
{
  raven::VLLocalizationEvent::~VLLocalizationEvent((raven::VLLocalizationEvent *)(a1 + 8));

  JUMPOUT(0x192FA6240);
}

void *sub_18E0E238C()
{
}

void sub_18E0E2398()
{
}

void sub_18E0E23FC(_Unwind_Exception *a1)
{
  MEMORY[0x192FA6240](v1, 0x1081C4051C51426);
  _Unwind_Resume(a1);
}

void *sub_18E0E2420(void *a1)
{
  a1[1] = &unk_1EDD14DF8;
  uint64_t v2 = (void *)a1[16];
  if (v2)
  {
    a1[17] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_18E0E2474(void *a1)
{
  a1[1] = &unk_1EDD14DF8;
  uint64_t v2 = (void *)a1[16];
  if (v2)
  {
    a1[17] = v2;
    operator delete(v2);
  }

  JUMPOUT(0x192FA6240);
}

void *sub_18E0E24E8()
{
}

void sub_18E0E24F4()
{
}

void sub_18E0E25BC(_Unwind_Exception *a1)
{
  MEMORY[0x192FA6240](v1, 0x10A1C40421EF65ELL);
  _Unwind_Resume(a1);
}

uint64_t raven::TunnelBridgeNotificationChecker::Configure(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 16) = a3;
  *(unsigned char *)(a1 + 8) = 1;
  return 0;
}

BOOL raven::TunnelBridgeNotificationChecker::isCoordinateValid(raven::TunnelBridgeNotificationChecker *this, double a2, double a3)
{
  if ((*(void *)&a2 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
    return 0;
  }
  BOOL v4 = a2 <= 90.0 && (*(void *)&a3 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000 && a2 >= -90.0;
  if (a3 > 180.0) {
    BOOL v4 = 0;
  }
  return a3 >= -180.0 && v4;
}

uint64_t raven::TunnelBridgeNotificationChecker::HandleEvent(raven::TunnelBridgeNotificationChecker *this, const raven::TunnelBridgeNotificationEvent *a2, raven::TunnelBridgeNotificationEvent *a3)
{
  if (!*((unsigned char *)this + 8))
  {
    __int16 v58 = 12;
    unsigned __int8 v57 = 4;
    uint64_t v26 = (*(uint64_t (**)(const raven::TunnelBridgeNotificationEvent *, const raven::TunnelBridgeNotificationEvent *, raven::TunnelBridgeNotificationEvent *))(*(void *)a2 + 16))(a2, a2, a3);
    double v48 = v27 + (double)v26;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v58, &v57, "t,%.3lf,TunnelBridgeNotificationChecker, not configured", v28, v29, v30, v31, v32, SLOBYTE(v48));
    return 0xFFFFFFFFLL;
  }
  if (!*((unsigned char *)this + 9)) {
    return 0;
  }
  double v4 = *((double *)a2 + 25);
  if ((*(void *)&v4 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (double v5 = *((double *)a2 + 26), v5 < -180.0)
    || v5 > 180.0
    || v4 < -90.0
    || v4 > 90.0
    || (*((void *)a2 + 26) & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (cnprint::CNPrinter::GetLogLevel(this) <= 1)
    {
      __int16 v56 = 12;
      unsigned __int8 v55 = 1;
      uint64_t v33 = (*(uint64_t (**)(const raven::TunnelBridgeNotificationEvent *))(*(void *)a2 + 16))(a2);
      double v49 = v34 + (double)v33;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v56, &v55, "t,%.3lf,WARNING: tba,tunnel bridge notification checker, tunnel bridge notification has invalid predicted point coordinates, do not use tunnel bridge notification", v35, v36, v37, v38, v39, SLOBYTE(v49));
    }
    return 0xFFFFFFFFLL;
  }
  double v6 = *((double *)a2 + 27);
  if ((*(void *)&v6 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v6 < 10.0 || v6 > 500.0)
  {
    if (cnprint::CNPrinter::GetLogLevel(this) <= 1)
    {
      __int16 v54 = 12;
      unsigned __int8 v53 = 1;
      uint64_t v40 = (*(uint64_t (**)(const raven::TunnelBridgeNotificationEvent *))(*(void *)a2 + 16))(a2);
      double v50 = v41 + (double)v40;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v54, &v53, "t,%.3lf,WARNING: tba,tunnel bridge notification checker, search radius is not set, too large, negative, or too small, do not use tunnel bridge notification,%.3lf", v42, v43, v44, v45, v46, SLOBYTE(v50));
    }
    return 0xFFFFFFFFLL;
  }
  if (!cnprint::CNPrinter::GetLogLevel(this))
  {
    __int16 v52 = 12;
    unsigned __int8 v51 = 0;
    uint64_t v8 = (*(uint64_t (**)(const raven::TunnelBridgeNotificationEvent *))(*(void *)a2 + 16))(a2);
    double v47 = v9 + (double)v8;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v52, &v51, "t,%.3lf,TunnelBridgeNotificationChecker,is_tunnel,%d,is_near_tunnel,%d", v10, v11, v12, v13, v14, SLOBYTE(v47));
  }
  uint64_t result = 0;
  long long v16 = *(_OWORD *)((char *)a2 + 8);
  *(_OWORD *)((char *)a3 + 24) = *(_OWORD *)((char *)a2 + 24);
  *(_OWORD *)((char *)a3 + 8) = v16;
  long long v17 = *(_OWORD *)((char *)a2 + 40);
  long long v18 = *(_OWORD *)((char *)a2 + 56);
  long long v19 = *(_OWORD *)((char *)a2 + 72);
  *(_OWORD *)((char *)a3 + 88) = *(_OWORD *)((char *)a2 + 88);
  *(_OWORD *)((char *)a3 + 72) = v19;
  *(_OWORD *)((char *)a3 + 56) = v18;
  *(_OWORD *)((char *)a3 + 40) = v17;
  long long v20 = *(_OWORD *)((char *)a2 + 104);
  long long v21 = *(_OWORD *)((char *)a2 + 120);
  long long v22 = *(_OWORD *)((char *)a2 + 136);
  *(_OWORD *)((char *)a3 + 152) = *(_OWORD *)((char *)a2 + 152);
  *(_OWORD *)((char *)a3 + 136) = v22;
  *(_OWORD *)((char *)a3 + 120) = v21;
  *(_OWORD *)((char *)a3 + 104) = v20;
  long long v23 = *(_OWORD *)((char *)a2 + 168);
  long long v24 = *(_OWORD *)((char *)a2 + 184);
  long long v25 = *(_OWORD *)((char *)a2 + 200);
  *(_OWORD *)((char *)a3 + 212) = *(_OWORD *)((char *)a2 + 212);
  *(_OWORD *)((char *)a3 + 200) = v25;
  *(_OWORD *)((char *)a3 + 184) = v24;
  *(_OWORD *)((char *)a3 + 168) = v23;
  return result;
}

void sub_18E0E2970()
{
}

uint64_t raven::GNSSMeasurementSelectionParameters::AllMeasurementsExcluded(raven::GNSSMeasurementSelectionParameters *this)
{
  BOOL v1 = !*(unsigned char *)this
    && !*((unsigned char *)this + 1)
    && !*((unsigned char *)this + 2)
    && !*((unsigned char *)this + 3)
    && !*((unsigned char *)this + 4)
    && *((unsigned char *)this + 5) == 0;
  BOOL v2 = (!*((unsigned char *)this + 14) || !*((unsigned char *)this + 16) && !*((unsigned char *)this + 17) && !*((unsigned char *)this + 18))
    && *((unsigned char *)this + 15) == 0;
  return v1 | v2;
}

void raven::GNSSMeasurementSelectionParameters::GetExpectedConstellations(unsigned char *a1, unint64_t *a2)
{
  double v4 = (void *)*a2;
  a2[1] = *a2;
  if (a2[2] - (unint64_t)v4 <= 4)
  {
    double v5 = (char *)operator new(5uLL);
    *a2 = (unint64_t)v5;
    a2[1] = (unint64_t)v5;
    a2[2] = (unint64_t)(v5 + 5);
    if (v4) {
      operator delete(v4);
    }
  }
  if (*a1)
  {
    long long v7 = (unsigned char *)a2[1];
    unint64_t v6 = a2[2];
    if ((unint64_t)v7 >= v6)
    {
      unint64_t v9 = *a2;
      uint64_t v10 = &v7[-*a2];
      unint64_t v11 = (unint64_t)(v10 + 1);
      if ((uint64_t)(v10 + 1) < 0) {
        goto LABEL_125;
      }
      unint64_t v12 = v6 - v9;
      if (2 * v12 > v11) {
        unint64_t v11 = 2 * v12;
      }
      if (v12 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v13 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v13 = v11;
      }
      if (v13) {
        unint64_t v14 = (unint64_t)operator new(v13);
      }
      else {
        unint64_t v14 = 0;
      }
      long long v15 = (char *)(v14 + v13);
      v10[v14] = 4;
      uint64_t v8 = (uint64_t)&v10[v14 + 1];
      if (v7 == (unsigned char *)v9)
      {
        v14 += (unint64_t)v10;
      }
      else
      {
        long long v16 = &v7[~v9];
        do
        {
          char v17 = *--v7;
          (v16--)[v14] = v17;
        }
        while (v7 != (unsigned char *)v9);
      }
      *a2 = v14;
      a2[1] = v8;
      a2[2] = (unint64_t)v15;
      if (v9) {
        operator delete((void *)v9);
      }
    }
    else
    {
      *long long v7 = 4;
      uint64_t v8 = (uint64_t)(v7 + 1);
    }
    a2[1] = v8;
  }
  if (a1[1])
  {
    long long v19 = (unsigned char *)a2[1];
    unint64_t v18 = a2[2];
    if ((unint64_t)v19 >= v18)
    {
      unint64_t v21 = *a2;
      long long v22 = &v19[-*a2];
      unint64_t v23 = (unint64_t)(v22 + 1);
      if ((uint64_t)(v22 + 1) < 0) {
        goto LABEL_125;
      }
      unint64_t v24 = v18 - v21;
      if (2 * v24 > v23) {
        unint64_t v23 = 2 * v24;
      }
      if (v24 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v25 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v25 = v23;
      }
      if (v25) {
        unint64_t v26 = (unint64_t)operator new(v25);
      }
      else {
        unint64_t v26 = 0;
      }
      double v27 = (char *)(v26 + v25);
      v22[v26] = 3;
      uint64_t v20 = (uint64_t)&v22[v26 + 1];
      if (v19 == (unsigned char *)v21)
      {
        v26 += (unint64_t)v22;
      }
      else
      {
        uint64_t v28 = &v19[~v21];
        do
        {
          char v29 = *--v19;
          (v28--)[v26] = v29;
        }
        while (v19 != (unsigned char *)v21);
      }
      *a2 = v26;
      a2[1] = v20;
      a2[2] = (unint64_t)v27;
      if (v21) {
        operator delete((void *)v21);
      }
    }
    else
    {
      *long long v19 = 3;
      uint64_t v20 = (uint64_t)(v19 + 1);
    }
    a2[1] = v20;
  }
  if (a1[2])
  {
    uint64_t v31 = (unsigned char *)a2[1];
    unint64_t v30 = a2[2];
    if ((unint64_t)v31 >= v30)
    {
      unint64_t v33 = *a2;
      double v34 = &v31[-*a2];
      unint64_t v35 = (unint64_t)(v34 + 1);
      if ((uint64_t)(v34 + 1) < 0) {
        goto LABEL_125;
      }
      unint64_t v36 = v30 - v33;
      if (2 * v36 > v35) {
        unint64_t v35 = 2 * v36;
      }
      if (v36 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v37 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v37 = v35;
      }
      if (v37) {
        unint64_t v38 = (unint64_t)operator new(v37);
      }
      else {
        unint64_t v38 = 0;
      }
      uint64_t v39 = (char *)(v38 + v37);
      v34[v38] = 2;
      uint64_t v32 = (uint64_t)&v34[v38 + 1];
      if (v31 == (unsigned char *)v33)
      {
        v38 += (unint64_t)v34;
      }
      else
      {
        uint64_t v40 = &v31[~v33];
        do
        {
          char v41 = *--v31;
          (v40--)[v38] = v41;
        }
        while (v31 != (unsigned char *)v33);
      }
      *a2 = v38;
      a2[1] = v32;
      a2[2] = (unint64_t)v39;
      if (v33) {
        operator delete((void *)v33);
      }
    }
    else
    {
      *uint64_t v31 = 2;
      uint64_t v32 = (uint64_t)(v31 + 1);
    }
    a2[1] = v32;
  }
  if (a1[3])
  {
    uint64_t v43 = (unsigned char *)a2[1];
    unint64_t v42 = a2[2];
    if ((unint64_t)v43 >= v42)
    {
      unint64_t v45 = *a2;
      uint64_t v46 = &v43[-*a2];
      unint64_t v47 = (unint64_t)(v46 + 1);
      if ((uint64_t)(v46 + 1) < 0) {
        goto LABEL_125;
      }
      unint64_t v48 = v42 - v45;
      if (2 * v48 > v47) {
        unint64_t v47 = 2 * v48;
      }
      if (v48 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v49 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v49 = v47;
      }
      if (v49) {
        unint64_t v50 = (unint64_t)operator new(v49);
      }
      else {
        unint64_t v50 = 0;
      }
      unsigned __int8 v51 = (char *)(v50 + v49);
      v46[v50] = 1;
      uint64_t v44 = (uint64_t)&v46[v50 + 1];
      if (v43 == (unsigned char *)v45)
      {
        v50 += (unint64_t)v46;
      }
      else
      {
        __int16 v52 = &v43[~v45];
        do
        {
          char v53 = *--v43;
          (v52--)[v50] = v53;
        }
        while (v43 != (unsigned char *)v45);
      }
      *a2 = v50;
      a2[1] = v44;
      a2[2] = (unint64_t)v51;
      if (v45) {
        operator delete((void *)v45);
      }
    }
    else
    {
      *uint64_t v43 = 1;
      uint64_t v44 = (uint64_t)(v43 + 1);
    }
    a2[1] = v44;
  }
  if (a1[4])
  {
    unsigned __int8 v55 = (unsigned char *)a2[1];
    unint64_t v54 = a2[2];
    if ((unint64_t)v55 >= v54)
    {
      unint64_t v57 = *a2;
      __int16 v58 = &v55[-*a2];
      unint64_t v59 = (unint64_t)(v58 + 1);
      if ((uint64_t)(v58 + 1) < 0) {
        goto LABEL_125;
      }
      unint64_t v60 = v54 - v57;
      if (2 * v60 > v59) {
        unint64_t v59 = 2 * v60;
      }
      if (v60 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v61 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v61 = v59;
      }
      if (v61) {
        unint64_t v62 = (unint64_t)operator new(v61);
      }
      else {
        unint64_t v62 = 0;
      }
      unsigned __int8 v63 = (char *)(v62 + v61);
      v58[v62] = 5;
      uint64_t v56 = (uint64_t)&v58[v62 + 1];
      if (v55 == (unsigned char *)v57)
      {
        v62 += (unint64_t)v58;
      }
      else
      {
        __int16 v64 = &v55[~v57];
        do
        {
          char v65 = *--v55;
          (v64--)[v62] = v65;
        }
        while (v55 != (unsigned char *)v57);
      }
      *a2 = v62;
      a2[1] = v56;
      a2[2] = (unint64_t)v63;
      if (v57) {
        operator delete((void *)v57);
      }
    }
    else
    {
      *unsigned __int8 v55 = 5;
      uint64_t v56 = (uint64_t)(v55 + 1);
    }
    a2[1] = v56;
  }
  if (!a1[5]) {
    return;
  }
  uint64_t v67 = (unsigned char *)a2[1];
  unint64_t v66 = a2[2];
  if ((unint64_t)v67 >= v66)
  {
    unint64_t v69 = *a2;
    int8x16_t v70 = &v67[-*a2];
    unint64_t v71 = (unint64_t)(v70 + 1);
    if ((uint64_t)(v70 + 1) >= 0)
    {
      unint64_t v72 = v66 - v69;
      if (2 * v72 > v71) {
        unint64_t v71 = 2 * v72;
      }
      if (v72 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v73 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v73 = v71;
      }
      if (v73) {
        unint64_t v74 = (unint64_t)operator new(v73);
      }
      else {
        unint64_t v74 = 0;
      }
      double v75 = (char *)(v74 + v73);
      v70[v74] = 6;
      uint64_t v68 = (uint64_t)&v70[v74 + 1];
      if (v67 == (unsigned char *)v69)
      {
        v74 += (unint64_t)v70;
      }
      else
      {
        uint64_t v76 = &v67[~v69];
        do
        {
          char v77 = *--v67;
          (v76--)[v74] = v77;
        }
        while (v67 != (unsigned char *)v69);
      }
      *a2 = v74;
      a2[1] = v68;
      a2[2] = (unint64_t)v75;
      if (v69) {
        operator delete((void *)v69);
      }
      goto LABEL_123;
    }
LABEL_125:
    sub_18DEE1FC8();
  }
  *uint64_t v67 = 6;
  uint64_t v68 = (uint64_t)(v67 + 1);
LABEL_123:
  a2[1] = v68;
}

uint64_t raven::AttitudeChangeChecker::Configure(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 16) = a3;
  *(unsigned char *)(a1 + 8) = 1;
  return 0;
}

uint64_t raven::AttitudeChangeChecker::HandleEvent(raven::AttitudeChangeChecker *this, const raven::AttitudeChangeEvent *a2, raven::AttitudeChangeEvent *a3)
{
  if (!*((unsigned char *)this + 8))
  {
    LOWORD(v37[0]) = 12;
    v36.i8[0] = 4;
    uint64_t v28 = (*(uint64_t (**)(const raven::AttitudeChangeEvent *))(*(void *)a2 + 16))(a2);
    double v35 = v29 + (double)v28;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v37, (unsigned __int8 *)&v36, "t,%.3lf,AttitudeChangeChecker, not configured", v30, v31, v32, v33, v34, SLOBYTE(v35));
    return 0xFFFFFFFFLL;
  }
  if (*(unsigned char *)(*((void *)this + 2) + 56) == 9) {
    return 0xFFFFFFFFLL;
  }
  long long v5 = *(_OWORD *)((char *)a2 + 8);
  long long v6 = *(_OWORD *)((char *)a2 + 24);
  long long v7 = *(_OWORD *)((char *)a2 + 40);
  *(_OWORD *)((char *)a3 + 56) = *(_OWORD *)((char *)a2 + 56);
  *(_OWORD *)((char *)a3 + 40) = v7;
  *(_OWORD *)((char *)a3 + 24) = v6;
  *(_OWORD *)((char *)a3 + 8) = v5;
  long long v8 = *(_OWORD *)((char *)a2 + 72);
  long long v9 = *(_OWORD *)((char *)a2 + 88);
  long long v10 = *(_OWORD *)((char *)a2 + 104);
  *(_OWORD *)((char *)a3 + 120) = *(_OWORD *)((char *)a2 + 120);
  *(_OWORD *)((char *)a3 + 104) = v10;
  *(_OWORD *)((char *)a3 + 88) = v9;
  *(_OWORD *)((char *)a3 + 72) = v8;
  long long v11 = *(_OWORD *)((char *)a2 + 136);
  long long v12 = *(_OWORD *)((char *)a2 + 152);
  long long v13 = *(_OWORD *)((char *)a2 + 168);
  *(_OWORD *)((char *)a3 + 184) = *(_OWORD *)((char *)a2 + 184);
  *(_OWORD *)((char *)a3 + 168) = v13;
  *(_OWORD *)((char *)a3 + 152) = v12;
  *(_OWORD *)((char *)a3 + 136) = v11;
  if (a3 != a2)
  {
    *(_OWORD *)((char *)a3 + 200) = *(_OWORD *)((char *)a2 + 200);
    *(_OWORD *)((char *)a3 + 216) = *(_OWORD *)((char *)a2 + 216);
  }
  __n128 v14 = sub_18DFE2F24((uint64_t)a3 + 232, (uint64_t)a2 + 232);
  if (!*((unsigned char *)this + 9)) {
    return 0;
  }
  v37[0] = (*(uint64_t (**)(raven::AttitudeChangeEvent *, __n128))(*(void *)a3 + 16))(a3, v14);
  v37[1] = v15;
  int8x16_t v36 = *(int8x16_t *)((char *)a3 + 104);
  uint64_t v17 = CNTimeSpan::operator-((uint64_t)v37, &v36, v36, v16);
  double v19 = v18 + (double)v17;
  double v20 = fabs(v19);
  BOOL v21 = (unint64_t)(*(void *)&v20 - 1) < 0xFFFFFFFFFFFFFLL;
  BOOL v22 = *(void *)&v19 == 0;
  BOOL v23 = v19 < 0.0;
  BOOL v24 = v19 < 0.0 && (unint64_t)(*(void *)&v20 - 0x10000000000000) >> 53 < 0x3FF;
  if (!v23) {
    BOOL v21 = 0;
  }
  if (v22) {
    BOOL v21 = 1;
  }
  BOOL v25 = *(void *)&v20 <= 0x7FF0000000000000;
  int v26 = v20 == INFINITY || v21;
  if (!v25) {
    int v26 = 1;
  }
  return ((v26 | v24) << 31 >> 31);
}

void sub_18E0E30E4()
{
}

uint64_t raven::RavenMapVectorActiveObject::Configure(cnframework::ActiveObjectBase *this, uint64_t *a2)
{
  if (*((unsigned char *)this + 480) && cnprint::CNPrinter::GetLogLevel(this) <= 1)
  {
    __int16 v70 = 12;
    unsigned __int8 v69 = 1;
    (*(void (**)(void **__return_ptr, cnframework::ActiveObjectBase *))(*(void *)this + 16))(__p, this);
    if (v68 >= 0) {
      long long v9 = __p;
    }
    else {
      LOBYTE(v9) = __p[0];
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v70, &v69, "Warning: %s configured more than once.", v4, v5, v6, v7, v8, (char)v9);
    if (v68 < 0) {
      operator delete(__p[0]);
    }
  }
  *((unsigned char *)this + 480) = 0;
  uint64_t v10 = *a2;
  if (!*a2 || !*(unsigned char *)(v10 + 33))
  {
    __int16 v70 = 12;
    unsigned __int8 v69 = 4;
    (*(void (**)(void **__return_ptr, cnframework::ActiveObjectBase *))(*(void *)this + 16))(__p, this);
    if (v68 >= 0) {
      BOOL v24 = __p;
    }
    else {
      LOBYTE(v24) = __p[0];
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v70, &v69, "Error: %s could not be configured. p_raven_parameters is not initialized.", v19, v20, v21, v22, v23, (char)v24);
    goto LABEL_39;
  }
  *((void *)this + 61) = v10;
  if ((*(void *)(v10 + 3152) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || *(double *)(v10 + 3152) < 0.0)
  {
    __int16 v70 = 12;
    unsigned __int8 v69 = 4;
    (*(void (**)(void **__return_ptr, cnframework::ActiveObjectBase *))(*(void *)this + 16))(__p, this);
    if (v68 >= 0) {
      uint64_t v30 = __p;
    }
    else {
      LOBYTE(v30) = __p[0];
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v70, &v69, "Error: %s could not be configured. Invalid map_vector_event_raise_minimum_interval: %.3lf", v25, v26, v27, v28, v29, (char)v30);
    goto LABEL_39;
  }
  if ((*(void *)(v10 + 3144) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || *(double *)(v10 + 3144) < 0.0)
  {
    __int16 v70 = 12;
    unsigned __int8 v69 = 4;
    (*(void (**)(void **__return_ptr, cnframework::ActiveObjectBase *))(*(void *)this + 16))(__p, this);
    if (v68 >= 0) {
      int8x16_t v36 = __p;
    }
    else {
      LOBYTE(v36) = __p[0];
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v70, &v69, "Error: %s could not be configured. Invalid map_vector_event_expiration_age: %.3lf", v31, v32, v33, v34, v35, (char)v36);
    goto LABEL_39;
  }
  if ((*(void *)(v10 + 3160) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || *(double *)(v10 + 3160) < 0.0)
  {
    __int16 v70 = 12;
    unsigned __int8 v69 = 4;
    (*(void (**)(void **__return_ptr, cnframework::ActiveObjectBase *))(*(void *)this + 16))(__p, this);
    if (v68 >= 0) {
      unint64_t v42 = __p;
    }
    else {
      LOBYTE(v42) = __p[0];
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v70, &v69, "Error: %s could not be configured. Invalid map_vector_event_device_rotation_threshold: %.3lf", v37, v38, v39, v40, v41, (char)v42);
    goto LABEL_39;
  }
  double v11 = *(double *)(v10 + 3208);
  if ((*(void *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || v11 < 0.0
    || (double v12 = *(double *)(v10 + 3216), v11 < v12))
  {
    __int16 v70 = 12;
    unsigned __int8 v69 = 4;
    (*(void (**)(void **__return_ptr, cnframework::ActiveObjectBase *))(*(void *)this + 16))(__p, this);
    if (v68 >= 0) {
      double v18 = __p;
    }
    else {
      LOBYTE(v18) = __p[0];
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v70, &v69, "Error: %s could not be configured. Invalid turn_state_detector_minimum_threshold_to_trigger_turning_high_confidence_dps_: %.3lf. Must be finite, non-negative, and greater than or equal to turn_state_detector_maximum_threshold_to_trigger_not_turning_low_confidence_dps_", v13, v14, v15, v16, v17, (char)v18);
LABEL_39:
    if (v68 < 0) {
      operator delete(__p[0]);
    }
    return 0xFFFFFFFFLL;
  }
  double v44 = *(double *)(v10 + 3224);
  if ((*(void *)&v44 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v44 < 0.0 || v44 > v12)
  {
    __int16 v70 = 12;
    unsigned __int8 v69 = 4;
    (*(void (**)(void **__return_ptr, cnframework::ActiveObjectBase *))(*(void *)this + 16))(__p, this);
    if (v68 >= 0) {
      unint64_t v59 = __p;
    }
    else {
      LOBYTE(v59) = __p[0];
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v70, &v69, "Error: %s could not be configured. Invalid turn_state_detector_maximum_threshold_to_trigger_not_turning_high_confidence_dps_: %.3lf. Must be finite, non-negative, and less than or equal to turn_state_detector_maximum_threshold_to_trigger_not_turning_low_confidence_dps_", v54, v55, v56, v57, v58, (char)v59);
    goto LABEL_39;
  }
  BOOL v45 = (*(void *)&v12 & 0x7FFFFFFFFFFFFFFFuLL) - 1 < 0xFFFFFFFFFFFFFLL;
  BOOL v46 = v12 < 0.0 && ((*(void *)&v12 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 < 0x3FF;
  if (v12 >= 0.0) {
    BOOL v45 = 0;
  }
  int v47 = (*(void *)&v12 & 0x7FFFFFFFFFFFFFFFLL) == 0x7FF0000000000000 || v45;
  if ((*(void *)&v12 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FF0000000000000) {
    int v47 = 1;
  }
  if ((v47 | v46) == 1)
  {
    __int16 v70 = 12;
    unsigned __int8 v69 = 4;
    (*(void (**)(void **__return_ptr, cnframework::ActiveObjectBase *))(*(void *)this + 16))(__p, this);
    if (v68 >= 0) {
      char v53 = __p;
    }
    else {
      LOBYTE(v53) = __p[0];
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v70, &v69, "Error: %s could not be configured. Invalid turn_state_detector_maximum_threshold_to_trigger_not_turning_low_confidence_dps_: %.3lf. Must be finite, non-negative, and greater than or equal to turn_state_detector_maximum_threshold_to_trigger_not_turning_high_confidence_dps_", v48, v49, v50, v51, v52, (char)v53);
    goto LABEL_39;
  }
  cnframework::ActiveObjectBase::SetEventQueueDelay(this, 0.0);
  *((unsigned char *)this + 480) = 1;
  unint64_t v60 = (cnprint::CNPrinter *)(*(uint64_t (**)(cnframework::ActiveObjectBase *))(*(void *)this + 48))(this);
  if (cnprint::CNPrinter::GetLogLevel(v60) <= 1)
  {
    __int16 v70 = 12;
    unsigned __int8 v69 = 1;
    (*(void (**)(void **__return_ptr, cnframework::ActiveObjectBase *))(*(void *)this + 16))(__p, this);
    if (v68 >= 0) {
      unint64_t v66 = __p;
    }
    else {
      LOBYTE(v66) = __p[0];
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v70, &v69, "%s configured successfully.", v61, v62, v63, v64, v65, (char)v66);
    if (v68 < 0) {
      operator delete(__p[0]);
    }
  }
  return 0;
}

void sub_18E0E36DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t raven::RavenMapVectorActiveObject::IsConfigured(raven::RavenMapVectorActiveObject *this)
{
  return *((unsigned __int8 *)this + 480);
}

void *raven::RavenMapVectorActiveObject::GetActiveObjectName@<X0>(void *a1@<X8>)
{
  return sub_18DEDE7B0(a1, "RavenMapVectorActiveObject");
}

__n128 raven::RavenMapVectorActiveObject::HandleEvent(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 688))
  {
    long long v2 = *(_OWORD *)(a2 + 8);
    long long v3 = *(_OWORD *)(a2 + 24);
    long long v4 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 552) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 536) = v4;
    *(_OWORD *)(a1 + 520) = v3;
    *(_OWORD *)(a1 + 504) = v2;
    long long v5 = *(_OWORD *)(a2 + 72);
    long long v6 = *(_OWORD *)(a2 + 88);
    long long v7 = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 616) = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 600) = v7;
    *(_OWORD *)(a1 + 584) = v6;
    *(_OWORD *)(a1 + 568) = v5;
    __n128 result = *(__n128 *)(a2 + 136);
    long long v9 = *(_OWORD *)(a2 + 152);
    long long v10 = *(_OWORD *)(a2 + 168);
    *(void *)(a1 + 680) = *(void *)(a2 + 184);
    *(_OWORD *)(a1 + 664) = v10;
    *(_OWORD *)(a1 + 648) = v9;
    *(__n128 *)(a1 + 632) = result;
  }
  else
  {
    *(void *)(a1 + 496) = &unk_1EDD140B8;
    long long v11 = *(_OWORD *)(a2 + 8);
    long long v12 = *(_OWORD *)(a2 + 24);
    long long v13 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 552) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 536) = v13;
    *(_OWORD *)(a1 + 520) = v12;
    *(_OWORD *)(a1 + 504) = v11;
    long long v14 = *(_OWORD *)(a2 + 72);
    long long v15 = *(_OWORD *)(a2 + 88);
    long long v16 = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 616) = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 600) = v16;
    *(_OWORD *)(a1 + 584) = v15;
    *(_OWORD *)(a1 + 568) = v14;
    __n128 result = *(__n128 *)(a2 + 136);
    long long v17 = *(_OWORD *)(a2 + 152);
    long long v18 = *(_OWORD *)(a2 + 168);
    *(void *)(a1 + 680) = *(void *)(a2 + 184);
    *(_OWORD *)(a1 + 664) = v18;
    *(_OWORD *)(a1 + 648) = v17;
    *(__n128 *)(a1 + 632) = result;
    *(unsigned char *)(a1 + 688) = 1;
  }
  return result;
}

{
  long long v2;
  long long v3;
  long long v4;
  __n128 result;
  long long v6;
  long long v7;
  long long v8;
  long long v9;
  long long v10;
  long long v11;
  long long v12;

  if (*(unsigned char *)(a1 + 1376))
  {
    *(_OWORD *)(a1 + 1392) = *(_OWORD *)(a2 + 8);
    long long v2 = *(_OWORD *)(a2 + 24);
    long long v3 = *(_OWORD *)(a2 + 40);
    long long v4 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 1456) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 1440) = v4;
    *(_OWORD *)(a1 + 1424) = v3;
    *(_OWORD *)(a1 + 1408) = v2;
    __n128 result = *(__n128 *)(a2 + 88);
    long long v6 = *(_OWORD *)(a2 + 104);
    long long v7 = *(_OWORD *)(a2 + 120);
    *(void *)(a1 + 1520) = *(void *)(a2 + 136);
    *(_OWORD *)(a1 + 1504) = v7;
    *(_OWORD *)(a1 + 1488) = v6;
    *(__n128 *)(a1 + 1472) = result;
  }
  else
  {
    *(void *)(a1 + 1384) = &unk_1EDD13AA8;
    *(_OWORD *)(a1 + 1392) = *(_OWORD *)(a2 + 8);
    uint64_t v8 = *(_OWORD *)(a2 + 24);
    long long v9 = *(_OWORD *)(a2 + 40);
    long long v10 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 1456) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 1440) = v10;
    *(_OWORD *)(a1 + 1424) = v9;
    *(_OWORD *)(a1 + 1408) = v8;
    __n128 result = *(__n128 *)(a2 + 88);
    long long v11 = *(_OWORD *)(a2 + 104);
    long long v12 = *(_OWORD *)(a2 + 120);
    *(void *)(a1 + 1520) = *(void *)(a2 + 136);
    *(_OWORD *)(a1 + 1504) = v12;
    *(_OWORD *)(a1 + 1488) = v11;
    *(__n128 *)(a1 + 1472) = result;
    *(unsigned char *)(a1 + 1376) = 1;
  }
  return result;
}

uint64_t raven::RavenMapVectorActiveObject::HandleEvent(raven::RavenMapVectorActiveObject *this, const raven::DecomposedAccelerationEvent *a2)
{
  return sub_18E0E5048((uint64_t)this + 696, (uint64_t)a2);
}

double raven::RavenMapVectorActiveObject::HandleEvent(raven::RavenMapVectorActiveObject *this, const raven::MapVectorEvent *a2, int8x16_t a3, int8x16_t a4)
{
  if (*((unsigned char *)this + 1064)) {
    *((unsigned char *)this + 1064) = 0;
  }
  *((void *)this + 517) = 0x7FF0000000000000;
  *((void *)this + 518) = 0;
  *((void *)this + 519) = 0x7FF8000000000000;
  *((unsigned char *)this + 4160) = 0;
  if (!*((unsigned char *)this + 1376)) {
    goto LABEL_8;
  }
  unsigned int v6 = *((unsigned __int8 *)this + 1488);
  BOOL v7 = v6 > 3 || v6 == 1;
  if (!v7
    || !*((unsigned char *)this + 688)
    || ((*((unsigned char *)this + 600) - 4) & 0xFA) != 0
    || !*((unsigned char *)this + 4112)
    || *((unsigned char *)this + 4072) != 2)
  {
    goto LABEL_8;
  }
  uint64_t v11 = CNTimeSpan::operator-((uint64_t)a2 + 8, (void *)this + 497, a3, a4);
  *(void *)&v17[0] = v11;
  v17[1] = v12;
  if (v11 < 0 || (*(double *)v13.i64 = v12, v12 < 0.0))
  {
    uint64_t v11 = CNTimeSpan::operator-(v17, v13, v14);
    v13.i64[0] = v15;
  }
  double result = *(double *)v13.i64 + (double)v11;
  if (result >= 0.5)
  {
LABEL_8:
    *((void *)this + 134) = &unk_1EDD138E0;
    memcpy((char *)this + 1080, (char *)a2 + 8, 0x10CuLL);
    *((unsigned char *)this + 1064) = 1;
    uint64_t v8 = (*(uint64_t (**)(const raven::MapVectorEvent *))(*(void *)a2 + 16))(a2);
    int v9 = *((unsigned __int8 *)this + 1352);
    *((void *)this + 170) = v8;
    *((void *)this + 171) = v10;
    if (!v9) {
      *((unsigned char *)this + 1352) = 1;
    }
    *((void *)this + 517) = 0;
    sub_18E0CFD04();
  }
  return result;
}

uint64_t raven::RavenMapVectorActiveObject::ResetStoredMapVectorInformation(uint64_t this)
{
  if (*(unsigned char *)(this + 1064)) {
    *(unsigned char *)(this + 1064) = 0;
  }
  *(void *)(this + 4136) = 0x7FF0000000000000;
  *(void *)(this + 4144) = 0;
  *(void *)(this + 4152) = 0x7FF8000000000000;
  *(unsigned char *)(this + 4160) = 0;
  return this;
}

void raven::RavenMapVectorActiveObject::HandleEvent(raven::RavenMapVectorActiveObject *this, const raven::RateGyroEvent *a2, int8x16_t a3, int8x16_t a4)
{
  if (!*((unsigned char *)this + 696))
  {
    if (!cnprint::CNPrinter::GetLogLevel(this))
    {
      LOWORD(v128) = 12;
      LOBYTE(v123) = 0;
      uint64_t v30 = (*(uint64_t (**)(const raven::RateGyroEvent *))(*(void *)a2 + 16))(a2);
      double v115 = v31 + (double)v30;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v128, (unsigned __int8 *)&v123, "t,%.3lf,MapVectorAO: Waiting for decomposed acceleration event,", v32, v33, v34, v35, v36, SLOBYTE(v115));
    }
    goto LABEL_44;
  }
  unsigned int v6 = (char *)this + 4120;
  BOOL v7 = (_OWORD *)((char *)a2 + 8);
  uint64_t v8 = CNTimeSpan::operator-((uint64_t)a2 + 8, (void *)this + 89, a3, a4);
  uint64_t v128 = v8;
  *(double *)&long long v129 = v9;
  if (v8 < 0 || (*(double *)v10.i64 = v9, v9 < 0.0))
  {
    uint64_t v8 = CNTimeSpan::operator-((double *)&v128, v10, v11);
    v10.i64[0] = v12;
  }
  if (*(double *)v10.i64 + (double)v8 > 1.0)
  {
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v8) > 1) {
      goto LABEL_12;
    }
    LOWORD(v123) = 12;
    LOBYTE(v120[0]) = 1;
    uint64_t v13 = (*(uint64_t (**)(const raven::RateGyroEvent *))(*(void *)a2 + 16))(a2);
    if (*((unsigned char *)this + 696))
    {
      *(double *)v15.i64 = v14;
      *(double *)v16.i64 = (double)v13;
      double v17 = v14 + (double)v13;
      uint64_t v128 = CNTimeSpan::operator-((uint64_t)a2 + 8, (void *)this + 89, v15, v16);
      *(double *)&long long v129 = v18;
      if (v128 < 0 || (*(double *)v24.i64 = v18, v18 < 0.0)) {
        CNTimeSpan::operator-((double *)&v128, v24, v25);
      }
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v123, (unsigned __int8 *)v120, "t,%.3lf,MapVectorAO: Time delta between RateGyroEvent and DecomposedAccelerationEvent is too large, %.2lf. Clearing map vector information, vertical rotation rate queue, and DecomposedAccelerationEvent,", v19, v20, v21, v22, v23, SLOBYTE(v17));
LABEL_12:
      uint64_t v26 = (void **)*((void *)this + 522);
      uint64_t v27 = *((void *)this + 523);
      *((void *)this + 526) = 0;
      unint64_t v28 = v27 - (void)v26;
      if (v28 >= 0x11)
      {
        do
        {
          operator delete(*v26);
          uint64_t v26 = (void **)(*((void *)this + 522) + 8);
          *((void *)this + 522) = v26;
          unint64_t v28 = *((void *)this + 523) - (void)v26;
        }
        while (v28 > 0x10);
      }
      if (v28 >> 3 == 1)
      {
        uint64_t v29 = 256;
      }
      else
      {
        if (v28 >> 3 != 2)
        {
LABEL_39:
          *(_OWORD *)((char *)this + 4216) = 0u;
          *((void *)this + 529) = 0x7FF8000000000000;
          if (*((unsigned char *)this + 696)) {
            *((unsigned char *)this + 696) = 0;
          }
          if (*((unsigned char *)this + 1064)) {
            *((unsigned char *)this + 1064) = 0;
          }
          *((void *)this + 517) = 0x7FF0000000000000;
          *((void *)this + 518) = 0;
          *((void *)this + 519) = 0x7FF8000000000000;
          *((unsigned char *)this + 4160) = 0;
          goto LABEL_44;
        }
        uint64_t v29 = 512;
      }
      *((void *)this + 525) = v29;
      goto LABEL_39;
    }
LABEL_69:
    __assert_rtn("operator->", "optional.hpp", 1222, "this->is_initialized()");
  }
  if (!*((unsigned char *)this + 904))
  {
LABEL_44:
    if (*((unsigned char *)this + 904))
    {
      unint64_t v66 = (_OWORD *)((char *)this + 904);
      *(_OWORD *)((char *)this + 920) = *(_OWORD *)((char *)a2 + 8);
      long long v74 = *(_OWORD *)((char *)a2 + 24);
      long long v75 = *(_OWORD *)((char *)a2 + 40);
      long long v76 = *(_OWORD *)((char *)a2 + 72);
      *(_OWORD *)((char *)this + 968) = *(_OWORD *)((char *)a2 + 56);
      *(_OWORD *)((char *)this + 984) = v76;
      *(_OWORD *)((char *)this + 936) = v74;
      *(_OWORD *)((char *)this + 952) = v75;
      long long v70 = *(_OWORD *)((char *)a2 + 88);
      long long v71 = *(_OWORD *)((char *)a2 + 104);
      long long v72 = *(_OWORD *)((char *)a2 + 120);
      long long v73 = *(_OWORD *)((char *)a2 + 130);
      goto LABEL_46;
    }
    char v77 = (_OWORD *)((char *)this + 904);
    *((void *)this + 114) = &unk_1EDD137F0;
    *(_OWORD *)((char *)this + 920) = *(_OWORD *)((char *)a2 + 8);
    long long v78 = *(_OWORD *)((char *)a2 + 24);
    long long v79 = *(_OWORD *)((char *)a2 + 40);
    long long v80 = *(_OWORD *)((char *)a2 + 72);
    *(_OWORD *)((char *)this + 968) = *(_OWORD *)((char *)a2 + 56);
    *(_OWORD *)((char *)this + 984) = v80;
    *(_OWORD *)((char *)this + 936) = v78;
    *(_OWORD *)((char *)this + 952) = v79;
    long long v81 = *(_OWORD *)((char *)a2 + 88);
    long long v82 = *(_OWORD *)((char *)a2 + 104);
    long long v83 = *(_OWORD *)((char *)a2 + 120);
    long long v84 = *(_OWORD *)((char *)a2 + 130);
    goto LABEL_48;
  }
  double v37 = *((double *)this + 101);
  double v38 = *((double *)this + 102);
  double v39 = *((double *)this + 103);
  double v40 = sqrt(v38 * v38 + v37 * v37 + v39 * v39);
  if (fabs(v40) > 0.000000015 && *(void *)&v40 >> 52 < 0x7FFuLL)
  {
    v11.i64[0] = *((void *)a2 + 15);
    *(double *)v10.i64 = (v38 * *((double *)a2 + 14) + *((double *)a2 + 13) * v37 + *(double *)v11.i64 * v39)
                       * 57.2957795;
    double v41 = *(double *)v10.i64 / v40;
    if (!*((unsigned char *)this + 1528) || !*((unsigned char *)this + 3280)) {
      goto LABEL_50;
    }
    uint64_t v42 = CNTimeSpan::operator-((uint64_t)a2 + 8, (void *)this + 193, v10, v11);
    uint64_t v128 = v42;
    *(double *)&long long v129 = v43;
    if (v42 < 0 || (*(double *)v10.i64 = v43, v43 < 0.0))
    {
      uint64_t v42 = CNTimeSpan::operator-((double *)&v128, v10, v11);
      v10.i64[0] = v44;
    }
    *(double *)v10.i64 = *(double *)v10.i64 + (double)v42;
    v11.i64[0] = 10.0;
    if (*(double *)v10.i64 < 10.0)
    {
      double v45 = (v38 * *((double *)this + 412) + *((double *)this + 411) * v37 + *((double *)this + 413) * v39) * 57.2957795;
      uint64_t v130 = 0x300000003;
      long long v129 = xmmword_18E1F0010;
      uint64_t v128 = (uint64_t)&unk_1EDD18EE8;
      v131 = v132;
      uint64_t v125 = 0x100000003;
      long long v124 = xmmword_18E1F6F60;
      v123 = &unk_1EDD18D98;
      v126 = v127;
      v127[0] = v37 / v40;
      v127[1] = v38 / v40;
      v127[2] = v39 / v40;
      uint64_t v46 = *((void *)this + 415);
      uint64_t v47 = *((void *)this + 416);
      v132[0] = *((void *)this + 414);
      v132[1] = v46;
      uint64_t v48 = *((void *)this + 417);
      v132[2] = v47;
      v132[3] = v46;
      long long v49 = *((_OWORD *)this + 209);
      double v50 = v45 / v40;
      v132[4] = v48;
      v132[5] = v49;
      v132[6] = v47;
      long long v133 = v49;
      sub_18E01D4D4((uint64_t)&v123, (uint64_t)v119);
      sub_18E01D450((uint64_t)v119, (uint64_t)&v128, (uint64_t)v120);
      sub_18E01D3D4((uint64_t)v120, (uint64_t)&v123, (uint64_t)v121);
      *((double *)this + 516) = sqrt(*v122) * 57.2957795;
      *unsigned int v6 = 1;
      if (!cnprint::CNPrinter::GetLogLevel(v51))
      {
        LOWORD(v120[0]) = 12;
        v119[0] = 0;
        uint64_t v52 = (*(uint64_t (**)(const raven::RateGyroEvent *))(*(void *)a2 + 16))(a2);
        if (!*v6) {
          __assert_rtn("get", "optional.hpp", 1212, "this->is_initialized()");
        }
        double v116 = v53 + (double)v52;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v120, v119, "t,%.3lf,MapVectorAO: vertical_rotation_bias_dps,%.2lf,vertical_rotation_rate_bias_uncertainty_dps,%.2lf,vertical_rotation_rate_dps,%.2lf", v54, v55, v56, v57, v58, SLOBYTE(v116));
      }
      if (!*((unsigned char *)this + 904)) {
        goto LABEL_69;
      }
      double v41 = v41 - v50;
    }
    else
    {
LABEL_50:
      *unsigned int v6 = 0;
    }
    uint64_t v88 = CNTimeSpan::operator-((uint64_t)a2 + 8, (void *)this + 115, v10, v11);
    uint64_t v128 = v88;
    *(double *)&long long v129 = v89;
    if (v88 < 0 || (*(double *)v90.i64 = v89, v89 < 0.0))
    {
      uint64_t v88 = CNTimeSpan::operator-((double *)&v128, v90, v91);
      v90.i64[0] = v92;
    }
    double v93 = *(double *)v90.i64 + (double)v88;
    if (v93 <= 1.0)
    {
      *((double *)this + 517) = *((double *)this + 517) + v41 * v93;
      *((void *)this + 518) = (*(uint64_t (**)(const raven::RateGyroEvent *))(*(void *)a2 + 16))(a2);
      *((void *)this + 519) = v102;
      *((unsigned char *)this + 4160) = 1;
    }
    else
    {
      if (*((unsigned char *)this + 1064)) {
        *((unsigned char *)this + 1064) = 0;
      }
      *((void *)this + 517) = 0x7FF0000000000000;
      *((void *)this + 518) = 0;
      *((void *)this + 519) = 0x7FF8000000000000;
      *((unsigned char *)this + 4160) = 0;
      if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v88) <= 1)
      {
        LOWORD(v123) = 12;
        LOBYTE(v120[0]) = 1;
        uint64_t v95 = (*(uint64_t (**)(const raven::RateGyroEvent *))(*(void *)a2 + 16))(a2);
        double v118 = v96 + (double)v95;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v123, (unsigned __int8 *)v120, "t,%.3lf,MapVectorAO: Too much time between rate gyro events, %.2lf. Cannot accumulate device rotation with high fidelity,", v97, v98, v99, v100, v101, SLOBYTE(v118));
      }
    }
    LODWORD(v94) = vcvtpd_u64_f64(*(double *)(*((void *)this + 61) + 3232) / *(double *)(*((void *)this + 61)
                                                                                           + 656));
    *((void *)this + 530) = v94;
    unint64_t v103 = *((void *)this + 526);
    if (v103)
    {
      while (v103 >= v94)
      {
        unint64_t v104 = *((void *)this + 525);
        *((double *)this + 527) = *((double *)this + 527)
                                - *(double *)(*(void *)(*((void *)this + 522) + ((v104 >> 6) & 0x3FFFFFFFFFFFFF8))
                                            + 8 * (v104 & 0x1FF));
        *((void *)this + 526) = v103 - 1;
        *((void *)this + 525) = v104 + 1;
        sub_18DEDFB58((uint64_t)this + 4168, 1);
        unint64_t v103 = *((void *)this + 526);
        if (!v103) {
          break;
        }
        unint64_t v94 = *((void *)this + 530);
      }
    }
    uint64_t v105 = *((void *)this + 523);
    uint64_t v106 = *((void *)this + 522);
    uint64_t v107 = ((v105 - v106) << 6) - 1;
    if (v105 == v106) {
      uint64_t v107 = 0;
    }
    unint64_t v108 = v103 + *((void *)this + 525);
    if (v107 == v108)
    {
      sub_18DEDF050((void *)this + 521);
      unint64_t v103 = *((void *)this + 526);
      uint64_t v106 = *((void *)this + 522);
      unint64_t v108 = *((void *)this + 525) + v103;
    }
    *(double *)(*(void *)(v106 + ((v108 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v108 & 0x1FF)) = v41;
    *((void *)this + 526) = v103 + 1;
    *((double *)this + 527) = v41 + *((double *)this + 527);
    v123 = (void *)(*(uint64_t (**)(const raven::RateGyroEvent *))(*(void *)a2 + 16))(a2);
    *(void *)&long long v124 = v109;
    v110.i64[0] = 0.5;
    *(double *)v111.i64 = *(double *)(*((void *)this + 61) + 656) * (double)*((unint64_t *)this + 526) * 0.5;
    v120[0] = 0;
    v120[1] = 0;
    CNTimeSpan::SetTimeSpan(v120, 0, v111, v110);
    *((void *)this + 528) = CNTimeSpan::operator-((uint64_t)&v123, v120, v112, v113);
    *((void *)this + 529) = v114;
    goto LABEL_44;
  }
  LOWORD(v128) = 12;
  LOBYTE(v123) = 4;
  uint64_t v59 = (*(uint64_t (**)(const raven::RateGyroEvent *))(*(void *)a2 + 16))(a2);
  double v117 = v60 + (double)v59;
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v128, (unsigned __int8 *)&v123, "t,%.3lf,MapVectorAO: Gravity vector has invalid magnitude, %.3lf. Clearing cached map vector information.", v61, v62, v63, v64, v65, SLOBYTE(v117));
  if (*((unsigned char *)this + 1064)) {
    *((unsigned char *)this + 1064) = 0;
  }
  *((void *)this + 517) = 0x7FF0000000000000;
  *((void *)this + 518) = 0;
  *((void *)this + 519) = 0x7FF8000000000000;
  *((unsigned char *)this + 4160) = 0;
  if (*((unsigned char *)this + 904))
  {
    unint64_t v66 = (_OWORD *)((char *)this + 904);
    *(_OWORD *)((char *)this + 920) = *v7;
    long long v67 = *(_OWORD *)((char *)a2 + 24);
    long long v68 = *(_OWORD *)((char *)a2 + 40);
    long long v69 = *(_OWORD *)((char *)a2 + 72);
    *(_OWORD *)((char *)this + 968) = *(_OWORD *)((char *)a2 + 56);
    *(_OWORD *)((char *)this + 984) = v69;
    *(_OWORD *)((char *)this + 936) = v67;
    *(_OWORD *)((char *)this + 952) = v68;
    long long v70 = *(_OWORD *)((char *)a2 + 88);
    long long v71 = *(_OWORD *)((char *)a2 + 104);
    long long v72 = *(_OWORD *)((char *)a2 + 120);
    long long v73 = *(_OWORD *)((char *)a2 + 130);
LABEL_46:
    *(_OWORD *)((char *)v66 + 138) = v73;
    v66[7] = v71;
    v66[8] = v72;
    v66[6] = v70;
    return;
  }
  char v77 = (_OWORD *)((char *)this + 904);
  *((void *)this + 114) = &unk_1EDD137F0;
  *(_OWORD *)((char *)this + 920) = *v7;
  long long v85 = *(_OWORD *)((char *)a2 + 24);
  long long v86 = *(_OWORD *)((char *)a2 + 40);
  long long v87 = *(_OWORD *)((char *)a2 + 72);
  *(_OWORD *)((char *)this + 968) = *(_OWORD *)((char *)a2 + 56);
  *(_OWORD *)((char *)this + 984) = v87;
  *(_OWORD *)((char *)this + 936) = v85;
  *(_OWORD *)((char *)this + 952) = v86;
  long long v81 = *(_OWORD *)((char *)a2 + 88);
  long long v82 = *(_OWORD *)((char *)a2 + 104);
  long long v83 = *(_OWORD *)((char *)a2 + 120);
  long long v84 = *(_OWORD *)((char *)a2 + 130);
LABEL_48:
  *(_OWORD *)((char *)v77 + 138) = v84;
  v77[7] = v82;
  unsigned char v77[8] = v83;
  v77[6] = v81;
  *((unsigned char *)this + 904) = 1;
}

void raven::RavenMapVectorActiveObject::HandleEvent(raven::RavenMapVectorActiveObject *this, const raven::RavenSolutionEvent *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*((unsigned char *)this + 480))
  {
    if (*((unsigned char *)a2 + 209) == 2 && *((unsigned char *)a2 + 1744) != 0)
    {
      if (*((unsigned char *)this + 1528))
      {
        int8x16_t v10 = (char *)this + 1544;
        int8x16_t v11 = (char *)a2 + 8;
        memcpy(v10, v11, 0x971uLL);
      }
      else
      {
        *((void *)this + 192) = &unk_1EDD14150;
        memcpy((char *)this + 1544, (char *)a2 + 8, 0x971uLL);
        *((unsigned char *)this + 1528) = 1;
      }
    }
  }
  else
  {
    __int16 v14 = 12;
    unsigned __int8 v13 = 2;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v14, &v13, "RavenMapVectorActiveObject: not configured", a4, a5, a6, a7, a8, v12);
  }
}

void raven::RavenMapVectorActiveObject::HandleEvent(raven::RavenMapVectorActiveObject *this, const raven::TimeMarkEvent *a2)
{
  *(void *)&long long v39 = (*(uint64_t (**)(const raven::TimeMarkEvent *))(*(void *)a2 + 16))(a2);
  *((void *)&v39 + 1) = v4;
  raven::RavenMapVectorActiveObject::RaiseTurnStateEvent((uint64_t)this, (uint64_t)&v39);
  if (!*((unsigned char *)this + 1064)) {
    return;
  }
  if (!*((unsigned char *)this + 1352)) {
    goto LABEL_23;
  }
  uint64_t v7 = CNTimeSpan::operator-((uint64_t)&v39, (void *)this + 170, v5, v6);
  if (v8 + (double)v7 < *(double *)(*((void *)this + 61) + 3152)) {
    return;
  }
  double v37 = (void *)(*(uint64_t (**)(void))(*((void *)this + 134) + 16))();
  *(void *)&v38[0] = v9;
  *(double *)v12.i64 = (double)CNTimeSpan::operator-((uint64_t)&v39, &v37, v10, v11);
  uint64_t v14 = *((void *)this + 61);
  v15.i64[0] = *(void *)(v14 + 3144);
  if (v13 + *(double *)v12.i64 > *(double *)v15.i64)
  {
    if (*((unsigned char *)this + 1064)) {
      *((unsigned char *)this + 1064) = 0;
    }
    *((void *)this + 517) = 0x7FF0000000000000;
    *((void *)this + 518) = 0;
    *((void *)this + 519) = 0x7FF8000000000000;
    *((unsigned char *)this + 4160) = 0;
    return;
  }
  if (!*((unsigned char *)this + 4160)) {
    return;
  }
  int8x16_t v16 = (cnprint::CNPrinter *)CNTimeSpan::operator-((uint64_t)&v39, (void *)this + 518, v15, v12);
  if (v17 + (double)(uint64_t)v16 <= 1.0)
  {
    if (fabs(*((double *)this + 517)) > *(double *)(v14 + 3160))
    {
      if (!cnprint::CNPrinter::GetLogLevel(v16))
      {
        LOWORD(v37) = 12;
        LOBYTE(v35[0]) = 0;
        uint64_t v18 = (*(uint64_t (**)(const raven::TimeMarkEvent *))(*(void *)a2 + 16))(a2);
        double v33 = v19 + (double)v18;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v37, (unsigned __int8 *)v35, "t,%.3lf,MapVectorAO: Failed to re-inject map vector assistance. accumulatedRotation,%.2lf,map vector age,%.2lf,", v20, v21, v22, v23, v24, SLOBYTE(v33));
      }
      if (*((unsigned char *)this + 1064)) {
        *((unsigned char *)this + 1064) = 0;
      }
      *((void *)this + 517) = 0x7FF0000000000000;
      *((void *)this + 518) = 0;
      *((void *)this + 519) = 0x7FF8000000000000;
      *((unsigned char *)this + 4160) = 0;
      return;
    }
    if (*((unsigned char *)this + 1064))
    {
      double v37 = &unk_1EDD138E0;
      memcpy(v38, (char *)this + 1080, 0x10CuLL);
      v38[0] = v39;
      memset(&v38[1], 0, 72);
      *((void *)&v38[5] + 1) = 0x7FF8000000000000;
      uint64_t v36 = 0;
      memset(&v35[1], 0, 64);
      v35[0] = v39;
      memset(&v38[7], 0, 72);
      v38[6] = v39;
      *((void *)&v38[11] + 1) = 0x7FF8000000000000;
      int v32 = *((unsigned __int8 *)this + 1352);
      *((_OWORD *)this + 85) = v39;
      if (!v32) {
        *((unsigned char *)this + 1352) = 1;
      }
      sub_18E0CFD04();
    }
LABEL_23:
    __assert_rtn("get", "optional.hpp", 1212, "this->is_initialized()");
  }
  if (!cnprint::CNPrinter::GetLogLevel(v16))
  {
    LOWORD(v37) = 12;
    LOBYTE(v35[0]) = 0;
    uint64_t v25 = (*(uint64_t (**)(const raven::TimeMarkEvent *))(*(void *)a2 + 16))(a2);
    double v34 = v26 + (double)v25;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v37, (unsigned __int8 *)v35, "t,%.3lf,MapVectorAO: accumulated device rotation age is too large to be used to determine if the device has rotated too far. Not re-raising map vector event. Age,%.2lf", v27, v28, v29, v30, v31, SLOBYTE(v34));
  }
}

uint64_t raven::RavenMapVectorActiveObject::RaiseTurnStateEvent(uint64_t result, uint64_t a2)
{
  unint64_t v2 = *(void *)(result + 4208);
  if (v2 && v2 >= *(void *)(result + 4240))
  {
    v20[0] = *(_OWORD *)(result + 4224);
    memset(&v20[1], 0, 64);
    long long v23 = v20[0];
    long long v25 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    uint64_t v22 = &unk_1EDD13A10;
    char v30 = 0;
    double v33 = 0.0;
    double v34 = INFINITY;
    double v31 = 1.0;
    double v32 = 0.0;
    uint64_t v21 = 0;
    long long v24 = 0u;
    uint64_t v28 = 0;
    uint64_t v29 = 0x7FF8000000000000;
    if (*(unsigned char *)(result + 1376))
    {
      unsigned int v4 = *(unsigned __int8 *)(result + 1488);
      if (v4 > 3 || v4 == 1)
      {
        double v34 = *(double *)(result + 4216) / (double)v2;
        double v7 = fabs(v34);
        if (*(unsigned char *)(result + 4120)) {
          double v8 = *(double *)(result + 4128) + *(double *)(result + 4128);
        }
        else {
          double v8 = 0.0;
        }
        uint64_t v9 = *(double **)(result + 488);
        if (v7 <= v9[402] - v8)
        {
          char v30 = 1;
          double v32 = 0.67;
          if (v7 <= v9[403] - v8)
          {
            double v32 = 1.0;
            double v11 = 1.0;
          }
          else
          {
            double v11 = 0.67;
          }
          double v33 = 1.0 - v11;
          double v12 = 1.0 - (1.0 - v11);
        }
        else
        {
          char v30 = 2;
          double v33 = 0.67;
          if (v7 >= v9[401] - v8)
          {
            double v33 = 1.0;
            double v10 = 1.0;
          }
          else
          {
            double v10 = 0.67;
          }
          double v12 = 1.0 - v10;
          double v32 = 1.0 - v10;
          double v11 = 1.0 - v10;
        }
        double v31 = v12 - v11;
        if (!cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)result))
        {
          LOWORD(v20[0]) = 12;
          unsigned __int8 v19 = 0;
          double v18 = *(double *)(a2 + 8) + (double)*(uint64_t *)a2;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)v20, &v19, "t,%.3lf,MapVectorAO:TurnState,average_absolute_vertical_rotation_rate,%.2lf,turn_state,%u,probability,t,%.2lf,nt,%.2lf,uk,%.2lf,queue_size,%zu", v13, v14, v15, v16, v17, SLOBYTE(v18));
        }
      }
    }
    int8x16_t v5 = operator new(0x60uLL);
    v5[1] = 0;
    v5[2] = 0;
    *int8x16_t v5 = &unk_1EDD1E458;
    v5[3] = &unk_1EDD0A260;
    uint64_t v6 = MEMORY[0x1E4FBA3D8];
    *((unsigned char *)v5 + 32) = 0;
    v5[5] = 0;
    v5[6] = v6;
    v5[7] = 0;
    v5[8] = 0;
    sub_18DEDE7B0(v5 + 9, "");
    *((unsigned char *)v5 + 32) = 1;
    operator new();
  }
  return result;
}

void sub_18E0E4D38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    sub_18DEE4E18(a18);
  }
  sub_18DEE4E18(v18);
  _Unwind_Resume(a1);
}

void raven::RavenMapVectorActiveObject::Reset(raven::RavenMapVectorActiveObject *this)
{
  unint64_t v2 = (char *)this + 4112;
  if (*((unsigned char *)this + 1064)) {
    *((unsigned char *)this + 1064) = 0;
  }
  *((void *)this + 517) = 0x7FF0000000000000;
  *((void *)this + 518) = 0;
  *((void *)this + 519) = 0x7FF8000000000000;
  *((unsigned char *)this + 4160) = 0;
  if (*((unsigned char *)this + 688)) {
    *((unsigned char *)this + 688) = 0;
  }
  if (*((unsigned char *)this + 696)) {
    *((unsigned char *)this + 696) = 0;
  }
  if (*((unsigned char *)this + 1352)) {
    *((unsigned char *)this + 1352) = 0;
  }
  if (*((unsigned char *)this + 1376)) {
    *((unsigned char *)this + 1376) = 0;
  }
  if (*((unsigned char *)this + 1528)) {
    *((unsigned char *)this + 1528) = 0;
  }
  if (*((unsigned char *)this + 904)) {
    *((unsigned char *)this + 904) = 0;
  }
  if (*v2) {
    *unint64_t v2 = 0;
  }
  *((unsigned char *)this + 4120) = 0;
  long long v3 = (void **)*((void *)this + 522);
  uint64_t v4 = *((void *)this + 523);
  *((void *)this + 526) = 0;
  unint64_t v5 = v4 - (void)v3;
  if (v5 >= 0x11)
  {
    do
    {
      operator delete(*v3);
      long long v3 = (void **)(*((void *)this + 522) + 8);
      *((void *)this + 522) = v3;
      unint64_t v5 = *((void *)this + 523) - (void)v3;
    }
    while (v5 > 0x10);
  }
  if (v5 >> 3 == 1)
  {
    uint64_t v6 = 256;
  }
  else
  {
    if (v5 >> 3 != 2) {
      goto LABEL_24;
    }
    uint64_t v6 = 512;
  }
  *((void *)this + 525) = v6;
LABEL_24:
  *(_OWORD *)((char *)this + 4216) = 0u;
  *((void *)this + 529) = 0x7FF8000000000000;
  cnframework::ActiveObjectBase::ResetCurrentTime(this);

  cnframework::ActiveObjectBase::ResetEventQueue(this);
}

void sub_18E0E4EEC(uint64_t a1)
{
  *(void *)a1 = &unk_1EDD14A98;
  sub_18DEE2DB8((void *)(a1 + 4168));
  if (*(unsigned char *)(a1 + 1528)) {
    *(unsigned char *)(a1 + 1528) = 0;
  }
  if (*(unsigned char *)(a1 + 1376)) {
    *(unsigned char *)(a1 + 1376) = 0;
  }
  if (*(unsigned char *)(a1 + 1352)) {
    *(unsigned char *)(a1 + 1352) = 0;
  }
  if (*(unsigned char *)(a1 + 1064)) {
    *(unsigned char *)(a1 + 1064) = 0;
  }
  if (*(unsigned char *)(a1 + 904)) {
    *(unsigned char *)(a1 + 904) = 0;
  }
  if (*(unsigned char *)(a1 + 696)) {
    *(unsigned char *)(a1 + 696) = 0;
  }

  cnframework::ActiveObjectBase::~ActiveObjectBase((cnframework::ActiveObjectBase *)a1);
}

void sub_18E0E4F90(uint64_t a1)
{
  *(void *)a1 = &unk_1EDD14A98;
  sub_18DEE2DB8((void *)(a1 + 4168));
  if (*(unsigned char *)(a1 + 1528)) {
    *(unsigned char *)(a1 + 1528) = 0;
  }
  if (*(unsigned char *)(a1 + 1376)) {
    *(unsigned char *)(a1 + 1376) = 0;
  }
  if (*(unsigned char *)(a1 + 1352)) {
    *(unsigned char *)(a1 + 1352) = 0;
  }
  if (*(unsigned char *)(a1 + 1064)) {
    *(unsigned char *)(a1 + 1064) = 0;
  }
  if (*(unsigned char *)(a1 + 904)) {
    *(unsigned char *)(a1 + 904) = 0;
  }
  if (*(unsigned char *)(a1 + 696)) {
    *(unsigned char *)(a1 + 696) = 0;
  }
  cnframework::ActiveObjectBase::~ActiveObjectBase((cnframework::ActiveObjectBase *)a1);

  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E0E5048(uint64_t result, uint64_t a2)
{
  if (*(unsigned char *)result)
  {
    long long v2 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(result + 16) = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(result + 32) = v2;
    long long v3 = *(_OWORD *)(a2 + 40);
    long long v4 = *(_OWORD *)(a2 + 56);
    long long v5 = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(result + 80) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(result + 96) = v5;
    *(_OWORD *)(result + 48) = v3;
    *(_OWORD *)(result + 64) = v4;
    long long v6 = *(_OWORD *)(a2 + 104);
    long long v7 = *(_OWORD *)(a2 + 120);
    long long v8 = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(result + 144) = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(result + 160) = v8;
    *(_OWORD *)(result + 112) = v6;
    *(_OWORD *)(result + 128) = v7;
    if (result + 8 != a2)
    {
      *(_OWORD *)(result + 176) = *(_OWORD *)(a2 + 168);
      *(_OWORD *)(result + 192) = *(_OWORD *)(a2 + 184);
    }
  }
  else
  {
    *(void *)(result + 8) = &unk_1EDD14BF0;
    long long v9 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(result + 16) = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(result + 32) = v9;
    long long v10 = *(_OWORD *)(a2 + 40);
    long long v11 = *(_OWORD *)(a2 + 56);
    long long v12 = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(result + 80) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(result + 96) = v12;
    *(_OWORD *)(result + 48) = v10;
    *(_OWORD *)(result + 64) = v11;
    long long v13 = *(_OWORD *)(a2 + 104);
    long long v14 = *(_OWORD *)(a2 + 120);
    long long v15 = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(result + 144) = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(result + 160) = v15;
    *(_OWORD *)(result + 112) = v13;
    *(_OWORD *)(result + 128) = v14;
    *(_OWORD *)(result + 176) = 0u;
    *(_OWORD *)(result + 192) = 0u;
    if (result + 8 != a2)
    {
      *(_OWORD *)(result + 176) = *(_OWORD *)(a2 + 168);
      *(_OWORD *)(result + 192) = *(_OWORD *)(a2 + 184);
    }
    *(unsigned char *)double result = 1;
  }
  return result;
}

void sub_18E0E5138()
{
}

void *sub_18E0E514C()
{
}

void sub_18E0E5158()
{
}

uint64_t raven::MountStateChecker::Configure(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 16) = a3;
  *(unsigned char *)(a1 + 8) = 1;
  return 0;
}

uint64_t raven::MountStateChecker::HandleEvent(raven::MountStateChecker *this, const raven::MountStateEvent *a2, raven::MountStateEvent *a3)
{
  if (!*((unsigned char *)this + 8))
  {
    __int16 v39 = 12;
    unsigned __int8 v38 = 4;
    uint64_t v20 = (*(uint64_t (**)(const raven::MountStateEvent *))(*(void *)a2 + 16))(a2);
    double v34 = v21 + (double)v20;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v39, &v38, "t,%.3lf,MountStateChecker, not configured", v22, v23, v24, v25, v26, SLOBYTE(v34));
    return 0xFFFFFFFFLL;
  }
  if (*((unsigned __int8 *)a2 + 104) >= 4u)
  {
    __int16 v37 = 12;
    unsigned __int8 v36 = 4;
    uint64_t v27 = (*(uint64_t (**)(const raven::MountStateEvent *))(*(void *)a2 + 16))(a2);
    double v35 = v28 + (double)v27;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v37, &v36, "t,%.3lf, Warning: Invalid type detected in mount state integrity check.", v29, v30, v31, v32, v33, SLOBYTE(v35));
    return 0xFFFFFFFFLL;
  }
  double v3 = *((double *)a2 + 14);
  if (v3 < 0.0 || (*((void *)a2 + 14) & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000 || v3 > 1.0) {
    return 0xFFFFFFFFLL;
  }
  double v6 = *((double *)a2 + 15);
  BOOL v7 = v6 < 0.0 || (*((void *)a2 + 15) & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000;
  if (v7 || v6 > 1.0) {
    return 0xFFFFFFFFLL;
  }
  double v9 = *((double *)a2 + 16);
  BOOL v10 = v9 < 0.0 || (*((void *)a2 + 16) & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000;
  if (v10 || v9 > 1.0) {
    return 0xFFFFFFFFLL;
  }
  double v12 = *((double *)a2 + 17);
  uint64_t result = 0xFFFFFFFFLL;
  if (v12 >= 0.0
    && (*((void *)a2 + 17) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000
    && v12 <= 1.0
    && fabs(v3 + v6 + v9 + v12 + -1.0) < 2.22044605e-16)
  {
    uint64_t result = 0;
    *(_OWORD *)((char *)a3 + 8) = *(_OWORD *)((char *)a2 + 8);
    long long v14 = *(_OWORD *)((char *)a2 + 24);
    long long v15 = *(_OWORD *)((char *)a2 + 40);
    long long v16 = *(_OWORD *)((char *)a2 + 56);
    *(_OWORD *)((char *)a3 + 72) = *(_OWORD *)((char *)a2 + 72);
    *(_OWORD *)((char *)a3 + 56) = v16;
    *(_OWORD *)((char *)a3 + 40) = v15;
    *(_OWORD *)((char *)a3 + 24) = v14;
    long long v17 = *(_OWORD *)((char *)a2 + 88);
    long long v18 = *(_OWORD *)((char *)a2 + 104);
    long long v19 = *(_OWORD *)((char *)a2 + 120);
    *((void *)a3 + 17) = *((void *)a2 + 17);
    *(_OWORD *)((char *)a3 + 120) = v19;
    *(_OWORD *)((char *)a3 + 104) = v18;
    *(_OWORD *)((char *)a3 + 88) = v17;
  }
  return result;
}

void sub_18E0E5420()
{
}

uint64_t raven::PositionChangeChecker::Configure(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 16) = a3;
  uint64_t v3 = *(void *)(*(void *)a2 + 920);
  *(void *)(a1 + 24) = *(void *)(*(void *)a2 + 2512);
  *(void *)(a1 + 32) = v3;
  *(unsigned char *)(a1 + 8) = 1;
  return 0;
}

uint64_t raven::PositionChangeChecker::HandleEvent(raven::PositionChangeChecker *this, const raven::PositionChangeEvent *a2, raven::PositionChangeEvent *a3)
{
  if (!*((unsigned char *)this + 8))
  {
    LOWORD(v61[0]) = 12;
    v60.i8[0] = 4;
    uint64_t v36 = (*(uint64_t (**)(const raven::PositionChangeEvent *, const raven::PositionChangeEvent *, raven::PositionChangeEvent *))(*(void *)a2 + 16))(a2, a2, a3);
    double v57 = v37 + (double)v36;
    double v35 = "t,%.3lf,PositionChangeChecker, not configured";
    unsigned __int8 v38 = &v60;
LABEL_20:
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v61, (unsigned __int8 *)v38, v35, v29, v30, v31, v32, v33, SLOBYTE(v57));
    return 0xFFFFFFFFLL;
  }
  if (*(unsigned char *)(*((void *)this + 2) + 56) == 9) {
    return 0xFFFFFFFFLL;
  }
  long long v6 = *(_OWORD *)((char *)a2 + 8);
  long long v7 = *(_OWORD *)((char *)a2 + 24);
  long long v8 = *(_OWORD *)((char *)a2 + 40);
  *(_OWORD *)((char *)a3 + 56) = *(_OWORD *)((char *)a2 + 56);
  *(_OWORD *)((char *)a3 + 40) = v8;
  *(_OWORD *)((char *)a3 + 24) = v7;
  *(_OWORD *)((char *)a3 + 8) = v6;
  long long v9 = *(_OWORD *)((char *)a2 + 72);
  long long v10 = *(_OWORD *)((char *)a2 + 88);
  long long v11 = *(_OWORD *)((char *)a2 + 104);
  *(_OWORD *)((char *)a3 + 120) = *(_OWORD *)((char *)a2 + 120);
  *(_OWORD *)((char *)a3 + 104) = v11;
  *(_OWORD *)((char *)a3 + 88) = v10;
  *(_OWORD *)((char *)a3 + 72) = v9;
  long long v12 = *(_OWORD *)((char *)a2 + 136);
  long long v13 = *(_OWORD *)((char *)a2 + 152);
  long long v14 = *(_OWORD *)((char *)a2 + 168);
  *(_OWORD *)((char *)a3 + 184) = *(_OWORD *)((char *)a2 + 184);
  *(_OWORD *)((char *)a3 + 168) = v14;
  *(_OWORD *)((char *)a3 + 152) = v13;
  *(_OWORD *)((char *)a3 + 136) = v12;
  long long v15 = (char *)a3 + 200;
  sub_18DFE2F24((uint64_t)a3 + 200, (uint64_t)a2 + 200);
  sub_18DFE2F24((uint64_t)a3 + 264, (uint64_t)a2 + 264);
  long long v16 = (void *)*((void *)a3 + 29);
  if ((*v16 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (v16[1] & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (v16[2] & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
  {
    return 0xFFFFFFFFLL;
  }
  v61[0] = (*(uint64_t (**)(raven::PositionChangeEvent *))(*(void *)a3 + 16))(a3);
  v61[1] = v17;
  int8x16_t v60 = *(int8x16_t *)((char *)a3 + 104);
  uint64_t v19 = CNTimeSpan::operator-((uint64_t)v61, &v60, v60, v18);
  double v21 = v20 + (double)v19;
  unint64_t v22 = (unint64_t)(COERCE__INT64(fabs(v21)) - 0x10000000000000) >> 53;
  BOOL v23 = v21 < 0.0 || v22 > 0x3FE;
  if (v23 && (unint64_t)(*(void *)&v21 - 1) > 0xFFFFFFFFFFFFELL) {
    return 0xFFFFFFFFLL;
  }
  if (sub_18E01D104((uint64_t)a3 + 264) > *((double *)this + 4)) {
    return 0xFFFFFFFFLL;
  }
  v60.i8[0] = 0;
  sub_18E0E5948((uint64_t)&v59, (uint64_t)a3 + 264, (BOOL *)v60.i8);
  uint64_t v59 = &unk_1EDD17478;
  if (!v60.i8[0]) {
    return 0xFFFFFFFFLL;
  }
  if (!*((unsigned char *)this + 9)) {
    return 0;
  }
  sub_18E03017C((uint64_t)v15);
  double v27 = v26 / v21;
  if (v26 / v21 > 250.0)
  {
    if (cnprint::CNPrinter::GetLogLevel(v25) > 1) {
      return 0xFFFFFFFFLL;
    }
    LOWORD(v61[0]) = 12;
    char v58 = 1;
    uint64_t v28 = (*(uint64_t (**)(const raven::PositionChangeEvent *))(*(void *)a2 + 16))(a2);
    double v57 = v34 + (double)v28;
    double v35 = "t,%.3lf,PositionChangeChecker: Position Change too large,returning check failed,PosChange[s] %.3lf";
    goto LABEL_31;
  }
  uint64_t result = (uint64_t)sub_18DFF465C((void *)(*((void *)this + 2) + 16), (unsigned __int8 *)&unk_18E215670);
  if (result)
  {
    int v40 = *((unsigned __int8 *)sub_18DFF6184((void *)(*((void *)this + 2) + 16), (unsigned __int8 *)&unk_18E215670)+ 1344);
    double v41 = sub_18DFF6184((void *)(*((void *)this + 2) + 16), (unsigned __int8 *)&unk_18E215670);
    if (v40)
    {
      double v42 = *((double *)v41 + 169);
      double v43 = (double *)sub_18DFF6184((void *)(*((void *)this + 2) + 16), (unsigned __int8 *)&unk_18E215670);
      double v44 = v43[173];
LABEL_28:
      if (v27 > v42 + 13.4112)
      {
        if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v43) > 1) {
          return 0xFFFFFFFFLL;
        }
        LOWORD(v61[0]) = 12;
        char v58 = 1;
        uint64_t v50 = (*(uint64_t (**)(const raven::PositionChangeEvent *))(*(void *)a2 + 16))(a2);
        double v57 = v51 + (double)v50;
        double v35 = "t,%.3lf,PositionChangeChecker: Position Change too large,returning check failed,raven speed %.3lf, PosChange[s] %.3lf";
LABEL_31:
        unsigned __int8 v38 = (int8x16_t *)&v58;
        goto LABEL_20;
      }
      uint64_t v52 = *((unsigned int *)a2 + 68);
      if ((int)v52 < 1)
      {
        double v54 = 0.0;
      }
      else
      {
        int v53 = 0;
        double v54 = 0.0;
        do
        {
          double v54 = v54 + *(double *)(*((void *)a2 + 37) + 8 * v53);
          v53 += *((_DWORD *)a2 + 71) + 1;
          --v52;
        }
        while (v52);
      }
      BOOL v55 = fabs(vabdd_f64(v27, v42) / sqrt(v44 + v54 / (v21 * v21))) > *((double *)this + 3);
      if (*((unsigned char *)this + 8)) {
        int v56 = v55;
      }
      else {
        int v56 = 1;
      }
      return (v56 << 31 >> 31);
    }
    if (*((unsigned char *)v41 + 1544))
    {
      double v45 = *((double *)sub_18DFF6184((void *)(*((void *)this + 2) + 16), (unsigned __int8 *)&unk_18E215670) + 194);
      double v46 = *((double *)sub_18DFF6184((void *)(*((void *)this + 2) + 16), (unsigned __int8 *)&unk_18E215670) + 195);
      uint64_t v47 = sub_18DFF6184((void *)(*((void *)this + 2) + 16), (unsigned __int8 *)&unk_18E215670);
      double v42 = sqrt(v46 * v46 + v45 * v45 + *((double *)v47 + 196) * *((double *)v47 + 196));
      double v48 = *((double *)sub_18DFF6184((void *)(*((void *)this + 2) + 16), (unsigned __int8 *)&unk_18E215670) + 197);
      double v49 = *((double *)sub_18DFF6184((void *)(*((void *)this + 2) + 16), (unsigned __int8 *)&unk_18E215670) + 200);
      double v43 = (double *)sub_18DFF6184((void *)(*((void *)this + 2) + 16), (unsigned __int8 *)&unk_18E215670);
      double v44 = v48 + v49 + v43[202];
      goto LABEL_28;
    }
    return 0;
  }
  return result;
}

void sub_18E0E5948(uint64_t a1, uint64_t a2, BOOL *a3)
{
  *(void *)(a1 + 24) = 0x300000003;
  *(void *)a1 = &unk_1EDD18EE8;
  *(_OWORD *)(a1 + 8) = xmmword_18E1F0010;
  *(void *)(a1 + 32) = a1 + 40;
  sub_18DFEEFE8(a2, a1, a3);
}

void sub_18E0E59AC(_Unwind_Exception *a1)
{
  void *v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

void sub_18E0E59D4()
{
}

uint64_t raven::GnssPhaseTrackingStore::ComputeKey(uint64_t a1, int a2)
{
  return a2 | ((*(_DWORD *)(a1 + 28) + 1000 * *(unsigned __int8 *)(a1 + 24)) << 8);
}

void raven::GnssPhaseTrackingStore::FormAveragedDopplerWorker(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  if (!sub_18E0E5BC8(a2) || !sub_18E0E5BC8(a3 + 128) || *(unsigned char *)(a2 + 48) || *(unsigned char *)(a3 + 176)) {
    goto LABEL_14;
  }
  if (!*(unsigned char *)(a3 + 152) || !*(unsigned char *)(a2 + 24)) {
    sub_18DFF28FC();
  }
  unint64_t v15 = *(void *)(a3 + 144);
  unint64_t v16 = *(void *)(a2 + 16);
  if (v15 <= v16)
  {
    __int16 v29 = 12;
    unsigned __int8 v28 = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v29, &v28, "#phase_store,invalid time order,last,%llu,curr,%llu", v10, v11, v12, v13, v14, v16);
LABEL_14:
    char v25 = 0;
    *(unsigned char *)a5 = 0;
    goto LABEL_15;
  }
  if (v15 != a4)
  {
    __int16 v27 = 12;
    unsigned __int8 v26 = 3;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v27, &v26, "#phase_store,desired applicability does not match data,desired,%llu,curr,%llu", v10, v11, v12, v13, v14, a4);
    goto LABEL_14;
  }
  double v17 = (double)(a4 - v16) * 0.000000001;
  if (v17 < *(double *)(*(void *)a1 + 624) || v17 > *(double *)(*(void *)a1 + 632)) {
    goto LABEL_14;
  }
  double v18 = *(double *)(a3 + 168);
  double v19 = *(double *)(a3 + 160) - *(double *)(a2 + 32);
  char v20 = *(unsigned char *)(a3 + 8);
  *(_OWORD *)a5 = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)(a5 + 48) = 0u;
  *(_OWORD *)(a5 + 64) = 0u;
  int v21 = *(_DWORD *)(a3 + 192);
  unsigned __int8 v22 = *(unsigned char *)(a3 + 196);
  *(void *)(a5 + 80) = 0;
  *(void *)(a5 + 88) = 0x7FF8000000000000;
  *(_DWORD *)(a5 + 96) = 4;
  *(unsigned char *)(a5 + 100) = v20;
  *(void *)(a5 + 104) = 0x7FF8000000000000;
  float v23 = 0.299792458 / v17 * v18;
  *(_DWORD *)(a5 + 112) = v21;
  *(double *)(a5 + 120) = 0.299792458 / v17 * v19;
  int64x2_t v24 = vdupq_n_s64(0x7FF8000000000000uLL);
  *(int64x2_t *)(a5 + 128) = v24;
  *(int64x2_t *)(a5 + 144) = v24;
  *(void *)(a5 + 160) = 0x7FF8000000000000;
  *(float *)(a5 + 168) = v23;
  *(unsigned char *)(a5 + 172) = 0;
  *(unsigned char *)(a5 + 176) = 0;
  *(unsigned char *)(a5 + 180) = 0;
  *(unsigned char *)(a5 + 184) = 0;
  *(unsigned char *)(a5 + 188) = 0;
  *(_WORD *)(a5 + 189) = v22;
  *(double *)(a5 + 192) = -v17;
  *(void *)(a5 + 200) = 0;
  char v25 = 1;
LABEL_15:
  *(unsigned char *)(a5 + 208) = v25;
}

BOOL sub_18E0E5BC8(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 8)
    || !*(unsigned char *)(a1 + 24)
    || *(void *)a1 > *(void *)(a1 + 16)
    || (*(void *)(a1 + 32) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
  {
    return 0;
  }
  uint64_t v1 = *(void *)(a1 + 40) & 0x7FFFFFFFFFFFFFFFLL;
  if (*(double *)(a1 + 40) > 0.0)
  {
    BOOL v3 = __OFSUB__(v1, 0x7FF0000000000000);
    BOOL v2 = v1 - 0x7FF0000000000000 < 0;
  }
  else
  {
    BOOL v3 = 0;
    BOOL v2 = 0;
  }
  return v2 != v3;
}

__n128 raven::GnssPhaseTrackingStore::FormAveragedDoppler@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  unsigned int v13 = *(unsigned __int8 *)(a3 + 8) | ((*(_DWORD *)(a2 + 28) + 1000 * *(unsigned __int8 *)(a2 + 24)) << 8);
  uint64_t v14 = (int *)&v13;
  long long v9 = sub_18E0E5CE0((float *)(a1 + 8), &v13, (uint64_t)&std::piecewise_construct, &v14);
  raven::GnssPhaseTrackingStore::FormAveragedDopplerWorker(a1, (uint64_t)(v9 + 24), a3, a4, a5);
  __n128 result = *(__n128 *)(a3 + 128);
  long long v11 = *(_OWORD *)(a3 + 144);
  long long v12 = *(_OWORD *)(a3 + 160);
  v9[72] = *(unsigned char *)(a3 + 176);
  *(_OWORD *)(v9 + 56) = v12;
  *(_OWORD *)(v9 + 40) = v11;
  *(__n128 *)(v9 + 24) = result;
  return result;
}

char *sub_18E0E5CE0(float *a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *((void *)a1 + 1);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      long long v11 = (char *)*v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = *((void *)v11 + 1);
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          long long v11 = *(char **)v11;
        }
        while (v11);
      }
    }
  }
  long long v11 = (char *)operator new(0x50uLL);
  *(void *)long long v11 = 0;
  *((void *)v11 + 1) = v7;
  *((_DWORD *)v11 + 4) = **a4;
  *(_OWORD *)(v11 + 56) = 0u;
  *((void *)v11 + 9) = 0;
  *(_OWORD *)(v11 + 40) = 0u;
  *(_OWORD *)(v11 + 24) = 0u;
  *(int64x2_t *)(v11 + 56) = vdupq_n_s64(0x7FF8000000000000uLL);
  v11[72] = 1;
  float v13 = (float)(unint64_t)(*((void *)a1 + 3) + 1);
  float v14 = a1[8];
  if (v8 && (float)(v14 * (float)v8) >= v13)
  {
    unint64_t v7 = v4;
    goto LABEL_64;
  }
  BOOL v15 = 1;
  if (v8 >= 3) {
    BOOL v15 = (v8 & (v8 - 1)) != 0;
  }
  unint64_t v16 = v15 | (2 * v8);
  unint64_t v17 = vcvtps_u32_f32(v13 / v14);
  if (v16 <= v17) {
    int8x8_t prime = (int8x8_t)v17;
  }
  else {
    int8x8_t prime = (int8x8_t)v16;
  }
  if (*(void *)&prime == 1)
  {
    int8x8_t prime = (int8x8_t)2;
  }
  else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
  {
    int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    unint64_t v8 = *((void *)a1 + 1);
  }
  if (*(void *)&prime <= v8)
  {
    if (*(void *)&prime >= v8) {
      goto LABEL_60;
    }
    unint64_t v25 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
    if (v8 < 3 || (uint8x8_t v26 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
    {
      unint64_t v25 = std::__next_prime(v25);
    }
    else
    {
      uint64_t v27 = 1 << -(char)__clz(v25 - 1);
      if (v25 >= 2) {
        unint64_t v25 = v27;
      }
    }
    if (*(void *)&prime <= v25) {
      int8x8_t prime = (int8x8_t)v25;
    }
    if (*(void *)&prime >= v8)
    {
      unint64_t v8 = *((void *)a1 + 1);
      goto LABEL_60;
    }
    if (!*(void *)&prime)
    {
      double v34 = *(void **)a1;
      *(void *)a1 = 0;
      if (v34) {
        operator delete(v34);
      }
      unint64_t v8 = 0;
      *((void *)a1 + 1) = 0;
      goto LABEL_60;
    }
  }
  if (*(void *)&prime >> 61) {
    sub_18DEDF7D4();
  }
  double v19 = operator new(8 * *(void *)&prime);
  char v20 = *(void **)a1;
  *(void *)a1 = v19;
  if (v20) {
    operator delete(v20);
  }
  uint64_t v21 = 0;
  *((int8x8_t *)a1 + 1) = prime;
  do
    *(void *)(*(void *)a1 + 8 * v21++) = 0;
  while (*(void *)&prime != v21);
  unsigned __int8 v22 = (void *)*((void *)a1 + 2);
  if (v22)
  {
    unint64_t v23 = v22[1];
    uint8x8_t v24 = (uint8x8_t)vcnt_s8(prime);
    v24.i16[0] = vaddlv_u8(v24);
    if (v24.u32[0] > 1uLL)
    {
      if (v23 >= *(void *)&prime) {
        v23 %= *(void *)&prime;
      }
    }
    else
    {
      v23 &= *(void *)&prime - 1;
    }
    *(void *)(*(void *)a1 + 8 * v23) = a1 + 4;
    unsigned __int8 v28 = (void *)*v22;
    if (*v22)
    {
      do
      {
        unint64_t v29 = v28[1];
        if (v24.u32[0] > 1uLL)
        {
          if (v29 >= *(void *)&prime) {
            v29 %= *(void *)&prime;
          }
        }
        else
        {
          v29 &= *(void *)&prime - 1;
        }
        if (v29 != v23)
        {
          if (!*(void *)(*(void *)a1 + 8 * v29))
          {
            *(void *)(*(void *)a1 + 8 * v29) = v22;
            goto LABEL_56;
          }
          *unsigned __int8 v22 = *v28;
          void *v28 = **(void **)(*(void *)a1 + 8 * v29);
          **(void **)(*(void *)a1 + 8 * v29) = v28;
          unsigned __int8 v28 = v22;
        }
        unint64_t v29 = v23;
LABEL_56:
        unsigned __int8 v22 = v28;
        unsigned __int8 v28 = (void *)*v28;
        unint64_t v23 = v29;
      }
      while (v28);
    }
  }
  unint64_t v8 = (unint64_t)prime;
LABEL_60:
  if ((v8 & (v8 - 1)) != 0)
  {
    if (v8 <= v7) {
      v7 %= v8;
    }
  }
  else
  {
    unint64_t v7 = (v8 - 1) & v7;
  }
LABEL_64:
  uint64_t v30 = *(void **)a1;
  uint64_t v31 = *(void **)(*(void *)a1 + 8 * v7);
  if (v31)
  {
    *(void *)long long v11 = *v31;
LABEL_72:
    *uint64_t v31 = v11;
    goto LABEL_73;
  }
  *(void *)long long v11 = *((void *)a1 + 2);
  *((void *)a1 + 2) = v11;
  v30[v7] = a1 + 4;
  if (*(void *)v11)
  {
    unint64_t v32 = *(void *)(*(void *)v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v32 >= v8) {
        v32 %= v8;
      }
    }
    else
    {
      v32 &= v8 - 1;
    }
    uint64_t v31 = (void *)(*(void *)a1 + 8 * v32);
    goto LABEL_72;
  }
LABEL_73:
  ++*((void *)a1 + 3);
  return v11;
}

void sub_18E0E60F4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

double raven::RavenPassThroughEstimator::RavenPassThroughEstimator(raven::RavenPassThroughEstimator *this)
{
  raven::RavenEstimator::RavenEstimator((uint64_t)this, 1);
  *(void *)uint64_t v1 = &unk_1EDD14928;
  *(void *)(v1 + 2536) = &unk_1EDD137C0;
  double result = 0.0;
  *(_OWORD *)(v1 + 2544) = 0u;
  *(unsigned char *)(v1 + 2560) = 0;
  *(_OWORD *)(v1 + 2568) = 0u;
  *(unsigned char *)(v1 + 2584) = 0;
  *(_OWORD *)(v1 + 2592) = 0u;
  *(unsigned char *)(v1 + 2608) = 0;
  *(_OWORD *)(v1 + 2616) = 0u;
  *(void *)(v1 + 2632) = 0x7FF8000000000000;
  *(_OWORD *)(v1 + 2640) = 0u;
  *(unsigned char *)(v1 + 2656) = 0;
  *(unsigned char *)(v1 + 2680) = 0;
  *(_OWORD *)(v1 + 2664) = 0u;
  *(_OWORD *)(v1 + 2688) = 0u;
  *(unsigned char *)(v1 + 2704) = 0;
  *(_OWORD *)(v1 + 2712) = 0u;
  *(void *)(v1 + 2728) = 0x7FF8000000000000;
  *(_WORD *)(v1 + 2736) = 0;
  *(unsigned char *)(v1 + 2738) = 0;
  int64x2_t v3 = vdupq_n_s64(0x7FF8000000000000uLL);
  *(void *)(v1 + 2744) = 0x7FF8000000000000;
  *(int64x2_t *)(v1 + 2752) = v3;
  *(int64x2_t *)(v1 + 2768) = v3;
  *(int64x2_t *)(v1 + 2784) = v3;
  *(int64x2_t *)(v1 + 2800) = v3;
  *(unsigned char *)(v1 + 2816) = 0;
  *(void *)(v1 + 2824) = 0x7FF8000000000000;
  *(int64x2_t *)(v1 + 2832) = v3;
  *(int64x2_t *)(v1 + 2848) = v3;
  *(int64x2_t *)(v1 + 2864) = v3;
  *(int64x2_t *)(v1 + 2880) = v3;
  *(void *)(v1 + 2896) = &unk_1EDD13880;
  *(unsigned char *)(v1 + 2920) = 0;
  *(_OWORD *)(v1 + 2904) = 0u;
  *(_OWORD *)(v1 + 2928) = 0u;
  *(unsigned char *)(v1 + 2944) = 0;
  *(_OWORD *)(v1 + 2952) = 0u;
  *(unsigned char *)(v1 + 2968) = 0;
  *(_OWORD *)(v1 + 2976) = 0u;
  *(void *)(v1 + 2992) = 0x7FF8000000000000;
  *(_OWORD *)(v1 + 3000) = 0u;
  *(unsigned char *)(v1 + 3016) = 0;
  *(_OWORD *)(v1 + 3024) = 0u;
  *(unsigned char *)(v1 + 3040) = 0;
  *(_OWORD *)(v1 + 3048) = 0u;
  *(unsigned char *)(v1 + 3064) = 0;
  *(_OWORD *)(v1 + 3072) = 0u;
  *(void *)(v1 + 3088) = 0x7FF8000000000000;
  *(_DWORD *)(v1 + 3096) = 0;
  *(int64x2_t *)(v1 + 3104) = v3;
  *(int64x2_t *)(v1 + 3120) = v3;
  *(int64x2_t *)(v1 + 3136) = v3;
  *(int64x2_t *)(v1 + 3152) = v3;
  *(void *)(v1 + 3168) = 0x7FF8000000000000;
  *(unsigned char *)(v1 + 3176) = 0;
  *(int64x2_t *)(v1 + 3184) = v3;
  *(int64x2_t *)(v1 + 3200) = v3;
  *(int64x2_t *)(v1 + 3216) = v3;
  *(int64x2_t *)(v1 + 3232) = v3;
  *(void *)(v1 + 3248) = 0x7FF8000000000000;
  *(unsigned char *)(v1 + 3280) = 0;
  *(void *)(v1 + 3272) = 0;
  *(_OWORD *)(v1 + 3256) = 0u;
  return result;
}

double raven::RavenPassThroughEstimator::GetHDOP(raven::RavenPassThroughEstimator *this)
{
  return NAN;
}

double raven::RavenPassThroughEstimator::GetPSRPostFitResidualsBasedHorizontalPositionMisclosure(raven::RavenPassThroughEstimator *this)
{
  return NAN;
}

void raven::RavenPassThroughEstimator::GetRavenSolution(raven::RavenPassThroughEstimator *this@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  unint64_t v4 = (int64x2_t *)(a2 + 264);
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0x7FF8000000000000;
  *(unsigned char *)(a2 + 96) = 0;
  int64x2_t v5 = vdupq_n_s64(0x7FF8000000000000uLL);
  *(int64x2_t *)(a2 + 104) = v5;
  *(int64x2_t *)(a2 + 120) = v5;
  *(int64x2_t *)(a2 + 136) = v5;
  *(int64x2_t *)(a2 + 152) = v5;
  *(void *)(a2 + 168) = 0x7FF8000000000000;
  *(_WORD *)(a2 + 176) = 0;
  *(int64x2_t *)(a2 + 184) = v5;
  *(int64x2_t *)(a2 + 200) = v5;
  *(int64x2_t *)(a2 + 216) = v5;
  *(int64x2_t *)(a2 + 232) = v5;
  *(int64x2_t *)(a2 + 248) = v5;
  *(int64x2_t *)(a2 + 264) = v5;
  *(int64x2_t *)(a2 + 280) = v5;
  *(unsigned char *)(a2 + 296) = 0;
  *(int64x2_t *)(a2 + 304) = v5;
  *(int64x2_t *)(a2 + 320) = v5;
  *(int64x2_t *)(a2 + 336) = v5;
  *(int64x2_t *)(a2 + 352) = v5;
  *(void *)(a2 + 368) = 0x7FF8000000000000;
  *(unsigned char *)(a2 + 376) = 0;
  *(int64x2_t *)(a2 + 384) = v5;
  *(int64x2_t *)(a2 + 400) = v5;
  *(int64x2_t *)(a2 + 416) = v5;
  *(int64x2_t *)(a2 + 432) = v5;
  *(void *)(a2 + 448) = 0x7FF8000000000000;
  *(unsigned char *)(a2 + 456) = 0;
  *(int64x2_t *)(a2 + 464) = v5;
  *(int64x2_t *)(a2 + 480) = v5;
  *(int64x2_t *)(a2 + 496) = v5;
  *(int64x2_t *)(a2 + 512) = v5;
  *(int64x2_t *)(a2 + 528) = v5;
  *(int64x2_t *)(a2 + 544) = v5;
  *(int64x2_t *)(a2 + 560) = v5;
  *(unsigned char *)(a2 + 576) = 0;
  *(int64x2_t *)(a2 + 584) = v5;
  *(int64x2_t *)(a2 + 600) = v5;
  *(int64x2_t *)(a2 + 616) = v5;
  *(int64x2_t *)(a2 + 632) = v5;
  *(void *)(a2 + 648) = 0x7FF8000000000000;
  *(unsigned char *)(a2 + 656) = 0;
  *(int64x2_t *)(a2 + 664) = v5;
  *(int64x2_t *)(a2 + 680) = v5;
  *(int64x2_t *)(a2 + 696) = v5;
  *(int64x2_t *)(a2 + 712) = v5;
  *(void *)(a2 + 728) = 0x7FF8000000000000;
  *(unsigned char *)(a2 + 736) = 0;
  *(int64x2_t *)(a2 + 744) = v5;
  *(int64x2_t *)(a2 + 760) = v5;
  *(int64x2_t *)(a2 + 776) = v5;
  *(int64x2_t *)(a2 + 792) = v5;
  *(void *)(a2 + 808) = 0x7FF8000000000000;
  *(unsigned char *)(a2 + 816) = 0;
  *(int64x2_t *)(a2 + 824) = v5;
  *(int64x2_t *)(a2 + 840) = v5;
  *(void *)(a2 + 856) = 0x7FF8000000000000;
  if (!cnprint::CNPrinter::GetLogLevel(this))
  {
    v81[0] = 12;
    LOBYTE(v88) = 0;
    *(_OWORD *)long long v75 = *(_OWORD *)((char *)this + 136);
    char v6 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)v75, "position event time,%.3lf,velocity event time,%.3lf", *((double *)this + 319) + (double)*((uint64_t *)this + 318), *((double *)this + 364) + (double)*((uint64_t *)this + 363));
    if (*((char *)this + 2511) >= 0) {
      LOBYTE(v12) = v6;
    }
    else {
      uint64_t v12 = *((void *)this + 311);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v81, (unsigned __int8 *)&v88, "%s", v7, v8, v9, v10, v11, v12);
  }
  if (!*((unsigned char *)this + 2816))
  {
    *(_DWORD *)(a2 + 100) = 0;
    *(_DWORD *)(a2 + 97) = 0;
    *(_DWORD *)(a2 + 178) = 0;
    *(_WORD *)(a2 + 182) = 0;
    *(_DWORD *)(a2 + 300) = 0;
    *(_DWORD *)(a2 + 297) = 0;
    *(_DWORD *)(a2 + 380) = 0;
    *(_DWORD *)(a2 + 377) = 0;
    *(_DWORD *)(a2 + 460) = 0;
    *(_DWORD *)(a2 + 457) = 0;
    *(_DWORD *)(a2 + 580) = 0;
    *(_DWORD *)(a2 + 577) = 0;
    *(_DWORD *)(a2 + 660) = 0;
    *(_DWORD *)(a2 + 657) = 0;
    *(_DWORD *)(a2 + 740) = 0;
    *(_DWORD *)(a2 + 737) = 0;
    *(_DWORD *)(a2 + 820) = 0;
    *(_DWORD *)(a2 + 817) = 0;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)a2 = 0u;
    *(void *)(a2 + 80) = 0;
    *(void *)(a2 + 88) = 0x7FF8000000000000;
    *(unsigned char *)(a2 + 96) = 0;
    int64x2_t v27 = vdupq_n_s64(0x7FF8000000000000uLL);
    *(int64x2_t *)(a2 + 104) = v27;
    *(int64x2_t *)(a2 + 120) = v27;
    *(int64x2_t *)(a2 + 136) = v27;
    *(int64x2_t *)(a2 + 152) = v27;
    *(void *)(a2 + 168) = 0x7FF8000000000000;
    *(_WORD *)(a2 + 176) = 0;
    *(int64x2_t *)(a2 + 184) = v27;
    *(int64x2_t *)(a2 + 200) = v27;
    *(int64x2_t *)(a2 + 216) = v27;
    *(int64x2_t *)(a2 + 232) = v27;
    *(int64x2_t *)(a2 + 248) = v27;
    *unint64_t v4 = v27;
    v4[1] = v27;
    *(unsigned char *)(a2 + 296) = 0;
    *(int64x2_t *)(a2 + 304) = v27;
    *(int64x2_t *)(a2 + 320) = v27;
    *(int64x2_t *)(a2 + 336) = v27;
    *(int64x2_t *)(a2 + 352) = v27;
    *(void *)(a2 + 368) = 0x7FF8000000000000;
    *(unsigned char *)(a2 + 376) = 0;
    *(int64x2_t *)(a2 + 384) = v27;
    *(int64x2_t *)(a2 + 400) = v27;
    *(int64x2_t *)(a2 + 416) = v27;
    *(int64x2_t *)(a2 + 432) = v27;
    *(void *)(a2 + 448) = 0x7FF8000000000000;
    *(unsigned char *)(a2 + 456) = 0;
    *(int64x2_t *)(a2 + 464) = v27;
    *(int64x2_t *)(a2 + 480) = v27;
    *(int64x2_t *)(a2 + 496) = v27;
    *(int64x2_t *)(a2 + 512) = v27;
    *(int64x2_t *)(a2 + 528) = v27;
    *(int64x2_t *)(a2 + 544) = v27;
    *(int64x2_t *)(a2 + 560) = v27;
    *(unsigned char *)(a2 + 576) = 0;
    v4[20] = v27;
    v4[21] = v27;
    v4[22] = v27;
    v4[23] = v27;
    *(void *)(a2 + 648) = 0x7FF8000000000000;
    *(unsigned char *)(a2 + 656) = 0;
    v4[25] = v27;
    v4[26] = v27;
    v4[27] = v27;
    v4[28] = v27;
    *(void *)(a2 + 728) = 0x7FF8000000000000;
    *(unsigned char *)(a2 + 736) = 0;
    v4[30] = v27;
    v4[31] = v27;
    v4[32] = v27;
    v4[33] = v27;
    *(void *)(a2 + 808) = 0x7FF8000000000000;
    *(unsigned char *)(a2 + 816) = 0;
    v4[35] = v27;
    v4[36] = v27;
    *(void *)(a2 + 856) = 0x7FF8000000000000;
    long long v28 = *(_OWORD *)((char *)this + 152);
    *(_OWORD *)a2 = *(_OWORD *)((char *)this + 136);
    *(_OWORD *)(a2 + 16) = v28;
    long long v29 = *(_OWORD *)((char *)this + 216);
    *(_OWORD *)(a2 + 64) = *(_OWORD *)((char *)this + 200);
    *(_OWORD *)(a2 + 80) = v29;
    long long v30 = *(_OWORD *)((char *)this + 184);
    *(_OWORD *)(a2 + 32) = *(_OWORD *)((char *)this + 168);
    *(_OWORD *)(a2 + 48) = v30;
    return;
  }
  long long v13 = *((_OWORD *)this + 168);
  *(_OWORD *)(a2 + 32) = *((_OWORD *)this + 167);
  *(_OWORD *)(a2 + 48) = v13;
  long long v14 = *((_OWORD *)this + 170);
  *(_OWORD *)(a2 + 64) = *((_OWORD *)this + 169);
  *(_OWORD *)(a2 + 80) = v14;
  int8x16_t v15 = *((int8x16_t *)this + 165);
  int8x16_t v16 = *((int8x16_t *)this + 166);
  *(int8x16_t *)a2 = v15;
  *(int8x16_t *)(a2 + 16) = v16;
  *(unsigned char *)(a2 + 296) = 1;
  v15.i64[0] = *((void *)this + 353);
  v16.i64[0] = *((void *)this + 354);
  *(void *)(a2 + 304) = v15.i64[0];
  *(void *)(a2 + 312) = v16.i64[0];
  uint64_t v17 = *((void *)this + 355);
  uint64_t v18 = *((void *)this + 356);
  *(void *)(a2 + 320) = v17;
  *(void *)(a2 + 328) = v18;
  uint64_t v19 = *((void *)this + 357);
  uint64_t v20 = *((void *)this + 358);
  *(void *)(a2 + 336) = v19;
  *(void *)(a2 + 344) = v20;
  uint64_t v21 = *((void *)this + 359);
  uint64_t v22 = *((void *)this + 360);
  *(void *)(a2 + 352) = v21;
  *(void *)(a2 + 360) = v22;
  uint64_t v23 = *((void *)this + 361);
  *(void *)(a2 + 368) = v23;
  *(unsigned char *)(a2 + 96) = 1;
  *(void *)(a2 + 104) = v15.i64[0];
  *(void *)(a2 + 112) = v16.i64[0];
  *(void *)(a2 + 120) = v17;
  *(void *)(a2 + 128) = v18;
  *(void *)(a2 + 136) = v19;
  *(void *)(a2 + 144) = v20;
  *(void *)(a2 + 152) = v21;
  *(void *)(a2 + 160) = v22;
  *(void *)(a2 + 168) = v23;
  if (!*((unsigned char *)this + 3097)) {
    goto LABEL_40;
  }
  *(unsigned char *)(a2 + 176) = 1;
  double v24 = *((double *)this + 388);
  *(double *)(a2 + 184) = v24;
  if (!*((unsigned char *)this + 3099) || !*((unsigned char *)this + 2737) || !*((unsigned char *)this + 2738)) {
    goto LABEL_40;
  }
  __double2 v25 = __sincos_stret(*((double *)this + 390));
  double v113 = v24 * v25.__sinval;
  double v114 = v24 * v25.__cosval;
  if (*((unsigned char *)this + 3098)) {
    double v26 = *((double *)this + 389);
  }
  else {
    double v26 = 0.0;
  }
  double v115 = v26;
  uint64_t v31 = sub_18E07A858((uint64_t)v110, *((double *)this + 343), *((double *)this + 344));
  if (v111)
  {
    sub_18DEF20E0(v31, &v113, (double *)&v108);
    *(unsigned char *)(a2 + 376) = 1;
    *(_OWORD *)(a2 + 384) = v108;
    *(void *)(a2 + 400) = v109;
    uint64_t v105 = 0x300000003;
    unint64_t v103 = &unk_1EDD18EE8;
    uint64_t v106 = (double *)&v107;
    long long v104 = xmmword_18E1F0010;
    sub_18DFE2CC8((uint64_t)&v103, 0.0);
    unint64_t v32 = v106;
    *uint64_t v106 = *((double *)this + 391) * 0.5;
    int v33 = HIDWORD(v104);
    v32[HIDWORD(v104) + 1] = *((double *)this + 391) * 0.5;
    if (*((unsigned char *)this + 3098)) {
      uint64_t v34 = *((void *)this + 394);
    }
    else {
      uint64_t v34 = 0x407577C048D159E1;
    }
    *(void *)&v32[2 * v33 + 2] = v34;
    uint64_t v100 = 0x300000003;
    long long v99 = xmmword_18E1F0010;
    uint64_t v98 = &unk_1EDD18EE8;
    uint64_t v101 = &v102;
    BOOL v42 = sub_18DFFBB34((uint64_t)v110, (uint64_t)&v103, (uint64_t)&v98);
    double v43 = v101;
    *(void *)(a2 + 408) = *v101;
    uint64_t v44 = SHIDWORD(v99);
    double v45 = &v43[SHIDWORD(v99)];
    *(void *)(a2 + 416) = *v45;
    *(void *)(a2 + 424) = v43[2 * v44];
    *(void *)(a2 + 432) = v45[1];
    double v46 = &v43[2 * (int)v44];
    *(void *)(a2 + 440) = v46[1];
    *(void *)(a2 + 448) = v46[2];
    uint64_t v95 = 0x200000002;
    int8x16_t v15 = (int8x16_t)xmmword_18E1FD1B0;
    long long v94 = xmmword_18E1FD1B0;
    double v93 = &unk_1EDD18BB8;
    double v96 = (double *)v97;
    if (*((unsigned char *)this + 3097) && *((unsigned char *)this + 3099))
    {
      double v47 = *((double *)this + 391);
      uint64_t v48 = *((void *)this + 393);
      *(double *)uint64_t v97 = v47;
      v97[1] = v48;
      uint64_t v49 = *((void *)this + 396);
      v97[2] = v48;
      v97[3] = v49;
      if (*((unsigned char *)this + 1208) && (unsigned int v50 = *((unsigned __int8 *)this + 1320), v50 <= 7) && ((1 << v50) & 0xCE) != 0) {
        double v51 = (double *)(*((void *)this + 146) + 936);
      }
      else {
        double v51 = (double *)(*((void *)this + 146) + 928);
      }
      double v67 = 0.0;
      double v52 = cnstatistics::InverseNormal((cnstatistics *)v42, 1.0 - *v51, 0.0, sqrt(v47));
      uint64_t v90 = 0x300000004;
      uint64_t v88 = &unk_1EDD19578;
      int8x16_t v91 = (double *)&v92;
      long long v89 = xmmword_18E1F6F90;
      sub_18DFE2CC8((uint64_t)&v88, 0.0);
      uint64_t v53 = *((uint64_t *)this + 388);
      if (*((unsigned char *)this + 3098)) {
        double v67 = *((double *)this + 389);
      }
      if (*(double *)&v53 <= v52)
      {
        int8x16_t v15 = (int8x16_t)vdupq_n_s64(0x7FF8000000000000uLL);
        *(int8x16_t *)(a2 + 192) = v15;
        *(void *)(a2 + 208) = 0x7FF8000000000000;
        *(unsigned char *)(a2 + 177) = 0;
        *(void *)(a2 + 248) = 0x7FF8000000000000;
        *(void *)(a2 + 272) = 0x7FF8000000000000;
        *(void *)(a2 + 288) = 0x7FF8000000000000;
        *(double *)v16.i64 = *v96 * 1.25;
        *(void *)(a2 + 216) = v16.i64[0];
        *(int8x16_t *)(a2 + 224) = v15;
        *(void *)(a2 + 240) = 0x7FF8000000000000;
        *(int8x16_t *)(a2 + 256) = v15;
        *(void *)(a2 + 280) = 0x7FF8000000000000;
      }
      else
      {
        double v54 = v67 * v67 + *(double *)&v53 * *(double *)&v53;
        double v55 = sqrt(v54);
        *(double *)&uint64_t v56 = v54 * v55;
        double v113 = v25.__sinval * *(double *)&v53 / v55;
        double v114 = v25.__cosval * *(double *)&v53 / v55;
        double v115 = v67 / v55;
        double v57 = v91;
        *int8x16_t v91 = *(double *)&v53 / v55;
        float64x2_t v58 = (float64x2_t)vdupq_lane_s64(v56, 0);
        *(float64x2_t *)(v57 + 1) = vdivq_f64(vmulq_n_f64(vmulq_n_f64((float64x2_t)v25, v67), v67), v58);
        v57[3] = -(*(double *)&v53 * v67) / *(double *)&v56;
        uint64_t v59 = SHIDWORD(v89);
        v57[SHIDWORD(v89)] = 0.0;
        v57[(int)v59 + 1] = v25.__cosval * *(double *)&v53 / v55;
        v57[(int)v59 + 2] = -(v25.__sinval * *(double *)&v53) / v55;
        v57[(int)v59 + 3] = 0.0;
        v57[2 * v59] = v67 / v55;
        int8x16_t v60 = (float64x2_t *)&v57[2 * (int)v59];
        v60->f64[1] = *(double *)&v53 * -(v25.__sinval * v67) / *(double *)&v56;
        float64x2_t v61 = (float64x2_t)vdupq_lane_s64(v53, 0);
        v61.f64[0] = -(v25.__cosval * v67);
        v60[1] = vdivq_f64(vmulq_n_f64(v61, *(double *)&v53), v58);
        sub_18DEF20E0((uint64_t)v110, &v113, (double *)&v108);
        *(_OWORD *)(a2 + 192) = v108;
        *(void *)(a2 + 208) = v109;
        *(unsigned char *)(a2 + 177) = 1;
        uint64_t v85 = 0x300000003;
        long long v84 = xmmword_18E1F0010;
        long long v83 = &unk_1EDD18EE8;
        long long v86 = &v87;
        if (v111) {
          sub_18DFE2F24((uint64_t)&v83, (uint64_t)&v112);
        }
        sub_18E0B9784(4, 4, (uint64_t)v81);
        *long long v82 = 0x3FF0000000000000;
        uint64_t v76 = 0x300000001;
        *(void *)long long v75 = &unk_1EDD18258;
        char v77 = &v78;
        *(_OWORD *)&v75[8] = xmmword_18E1F8560;
        uint64_t v78 = 0x200000001;
        int v79 = 3;
        sub_18DFEC63C((uint64_t)v75, (uint64_t)v80);
        sub_18DFEE864((uint64_t)v75, (uint64_t)v81, (uint64_t)v80, (uint64_t)v80);
        sub_18DFEC6E4((uint64_t)v75, (uint64_t)&v83);
        sub_18E0962D0((uint64_t)v81, (uint64_t)&v88, (uint64_t)v74);
        sub_18DFEB238(3, 3, (uint64_t)v71);
        uint64_t v76 = 0x200000001;
        *(void *)long long v75 = &unk_1EDD181F8;
        char v77 = &v78;
        *(_OWORD *)&v75[8] = xmmword_18E1FD740;
        uint64_t v78 = 0x100000000;
        sub_18E059674((uint64_t)v75, (uint64_t)v70);
        sub_18E07492C((uint64_t)v75, (uint64_t)v71, (uint64_t)v70, (uint64_t)v70);
        sub_18E07421C((uint64_t)v75, (uint64_t)&v93);
        if (*((unsigned char *)this + 3098)) {
          uint64_t v62 = *((void *)this + 394);
        }
        else {
          uint64_t v62 = 0x407577C048D159E1;
        }
        *(void *)(v73 + 16 * v72 + 16) = v62;
        sub_18E0E6D84((uint64_t)v69, (uint64_t)v74, (uint64_t)v71);
        sub_18E02D794((uint64_t)v74, (uint64_t)v68);
        sub_18E0E6CFC((uint64_t)v75, (uint64_t)v69, (uint64_t)v68);
        uint64_t v63 = v77;
        *(void *)(a2 + 216) = *v77;
        uint64_t v64 = *(int *)&v75[20];
        *(void *)(a2 + 224) = v63[*(int *)&v75[20]];
        *(void *)(a2 + 232) = v63[2 * v64];
        int v65 = 3 * v64;
        *(void *)(a2 + 240) = v63[3 * (int)v64];
        *(void *)(a2 + 248) = v63[(int)v64 + 1];
        unint64_t v66 = &v63[2 * (int)v64];
        *(void *)(a2 + 256) = v66[1];
        *(void *)(a2 + 264) = v63[v65 + 1];
        *(void *)(a2 + 272) = v66[2];
        *(void *)(a2 + 280) = v63[v65 + 2];
        v15.i64[0] = v63[v65 + 3];
        *(void *)(a2 + 288) = v15.i64[0];
      }
    }
LABEL_40:
    raven::PopulateAllTimeFields(a2, (uint64_t)this + 136, v15, v16);
    return;
  }
  v81[0] = 12;
  LOBYTE(v88) = 4;
  *(_OWORD *)long long v75 = *(_OWORD *)((char *)this + 136);
  char v35 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)v75, "RavenPassThroughEstimator::GetRavenSolution cannot get ENUToECEFJacobian Jenu");
  if (*((char *)this + 2511) >= 0) {
    LOBYTE(v41) = v35;
  }
  else {
    uint64_t v41 = *((void *)this + 311);
  }
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)v81, (unsigned __int8 *)&v88, "%s", v36, v37, v38, v39, v40, v41);
}

void sub_18E0E6CFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 24) = 0x400000004;
  *(void *)a1 = &unk_1EDD195A8;
  *(_OWORD *)(a1 + 8) = xmmword_18E1F6F70;
  *(void *)(a1 + 32) = a1 + 40;
  sub_18DFE2B44(a2, a3, a1);
}

void sub_18E0E6D64(_Unwind_Exception *a1)
{
  void *v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

void sub_18E0E6D84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 24) = 0x300000004;
  *(void *)a1 = &unk_1EDD19578;
  *(_OWORD *)(a1 + 8) = xmmword_18E1F6F90;
  *(void *)(a1 + 32) = a1 + 40;
  sub_18DFE2B44(a2, a3, a1);
}

void sub_18E0E6DF0(_Unwind_Exception *a1)
{
  void *v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

BOOL raven::RavenPassThroughEstimator::CanPublishRavenSolution(raven::RavenPassThroughEstimator *this)
{
  if (!*((unsigned char *)this + 3280)) {
    return 0;
  }
  long long v2 = *((_OWORD *)this + 165);
  return sub_18DEE4C00((double *)&v2, (double *)this + 408);
}

uint64_t raven::RavenPassThroughEstimator::HandleEvent(raven::RavenPassThroughEstimator *this, const raven::PositionEvent *a2)
{
  int v3 = *((unsigned __int8 *)a2 + 200);
  if (v3 == 1)
  {
    ++*((_DWORD *)this + 814);
LABEL_6:
    memcpy((char *)this + 2544, (char *)a2 + 8, 0x160uLL);
    *((unsigned char *)this + 3280) = raven::RavenPassThroughEstimator::IsPosVelValidAndTimeMatched(this, (raven::RavenPassThroughEstimator *)((char *)this + 2536), (raven::RavenPassThroughEstimator *)((char *)this + 2896));
    return 0;
  }
  if (v3 == 9 && *((_DWORD *)this + 814)) {
    goto LABEL_6;
  }
  return 0;
}

uint64_t raven::RavenPassThroughEstimator::IsPosVelValidAndTimeMatched(raven::RavenPassThroughEstimator *this, const raven::PositionEvent *a2, const raven::VelocityEvent *a3)
{
  int8x16_t v6 = *(int8x16_t *)((char *)a3 + 104);
  int8x16_t v21 = *(int8x16_t *)((char *)a2 + 104);
  int8x16_t v22 = v6;
  uint64_t v7 = (cnprint::CNPrinter *)CNTimeSpan::operator-((uint64_t)&v22, &v21, v21, v6);
  if (fabs(v8 + (double)(uint64_t)v7) >= 0.001)
  {
    if (cnprint::CNPrinter::GetLogLevel(v7)) {
      return 0;
    }
    v21.i16[0] = 12;
    unsigned __int8 v20 = 0;
    char v10 = (_BYTE)this - 72;
    v22.i64[0] = (*(uint64_t (**)(const raven::VelocityEvent *))(*(void *)a3 + 16))(a3);
    v22.i64[1] = v11;
    cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)&v22, "Position and velocity time difference too big");
LABEL_9:
    if (*((char *)this + 2511) >= 0) {
      LOBYTE(v18) = v10;
    }
    else {
      uint64_t v18 = *((void *)this + 311);
    }
    goto LABEL_12;
  }
  if (!*((unsigned char *)a3 + 280))
  {
    if (cnprint::CNPrinter::GetLogLevel(v7) > 1) {
      return 0;
    }
    v21.i16[0] = 12;
    unsigned __int8 v20 = 1;
    char v10 = (_BYTE)this - 72;
    v22.i64[0] = (*(uint64_t (**)(const raven::VelocityEvent *))(*(void *)a3 + 16))(a3);
    v22.i64[1] = v17;
    cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)&v22, "Invalid velocity");
    goto LABEL_9;
  }
  if (*((unsigned char *)a2 + 280)) {
    return 1;
  }
  if (cnprint::CNPrinter::GetLogLevel(v7) <= 1)
  {
    v21.i16[0] = 12;
    unsigned __int8 v20 = 1;
    v22.i64[0] = (*(uint64_t (**)(const raven::PositionEvent *))(*(void *)a2 + 16))(a2);
    v22.i64[1] = v19;
    cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)&v22, "Invalid position");
    if (*((char *)this + 2511) >= 0) {
      LOBYTE(v18) = (_BYTE)this - 72;
    }
    else {
      uint64_t v18 = *((void *)this + 311);
    }
LABEL_12:
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v21, &v20, "%s", v12, v13, v14, v15, v16, v18);
  }
  return 0;
}

uint64_t raven::RavenPassThroughEstimator::HandleEvent(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 136) = v3;
  long long v4 = *(_OWORD *)(a2 + 40);
  long long v5 = *(_OWORD *)(a2 + 56);
  long long v6 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 200) = v6;
  *(_OWORD *)(a1 + 184) = v5;
  *(_OWORD *)(a1 + 168) = v4;
  if (*(unsigned char *)(a1 + 3280))
  {
    long long v8 = *(_OWORD *)(a1 + 2544);
    if (sub_18DEE4C00((double *)&v8, (double *)(a1 + 80))) {
      *(_OWORD *)(a1 + 80) = *(_OWORD *)(a1 + 2544);
    }
  }
  if (!*(unsigned char *)(a1 + 58)) {
    *(unsigned char *)(a1 + 58) = *(unsigned char *)(a1 + 3280);
  }
  return 0;
}

uint64_t raven::RavenPassThroughEstimator::HandleEvent(raven::RavenPassThroughEstimator *this, const raven::VelocityEvent *a2)
{
  int v3 = *((unsigned __int8 *)a2 + 200);
  if (v3 == 1)
  {
    ++*((_DWORD *)this + 815);
LABEL_6:
    memcpy((char *)this + 2904, (char *)a2 + 8, 0x160uLL);
    *((unsigned char *)this + 3280) = raven::RavenPassThroughEstimator::IsPosVelValidAndTimeMatched(this, (raven::RavenPassThroughEstimator *)((char *)this + 2536), (raven::RavenPassThroughEstimator *)((char *)this + 2896));
    return 0;
  }
  if (v3 == 9 && *((_DWORD *)this + 815)) {
    goto LABEL_6;
  }
  return 0;
}

double raven::RavenPassThroughEstimator::GetFailureProbability(raven::RavenPassThroughEstimator *this)
{
  return 0.0;
}

std::string *raven::RavenPassThroughEstimator::SetLogPrefix(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 2512), a2);
}

uint64_t raven::RavenPassThroughEstimator::Initialize(unsigned char *a1)
{
  a1[58] = 1;
  return 0;
}

uint64_t raven::RavenPassThroughEstimator::IsConsistent(raven::RavenPassThroughEstimator *this)
{
  return *((unsigned __int8 *)this + 3280);
}

uint64_t raven::RavenPassThroughEstimator::IsObservable(raven::RavenPassThroughEstimator *this)
{
  return *((unsigned __int8 *)this + 3280);
}

uint64_t raven::RavenPassThroughEstimator::GetRavenStatus@<X0>(raven::RavenPassThroughEstimator *this@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 72) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 8) = 0u;
  long long v4 = (int8x16_t *)(a2 + 8);
  *(void *)(a2 + 88) = 0;
  *(void *)(a2 + 96) = 0x7FF8000000000000;
  *(unsigned char *)(a2 + 105) = 0;
  *(_OWORD *)(a2 + 992) = 0u;
  *(_OWORD *)(a2 + 1008) = 0u;
  *(_OWORD *)(a2 + 1024) = 0u;
  *(_OWORD *)(a2 + 1040) = 0u;
  *(void *)(a2 + 1056) = 0;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_OWORD *)(a2 + 144) = 0u;
  *(_WORD *)(a2 + 160) = 0;
  *(int64x2_t *)(a2 + 960) = vdupq_n_s64(0x7FF8000000000000uLL);
  *(void *)(a2 + 984) = 0x7FF8000000000000;
  *(void *)(a2 + 976) = 0;
  bzero((void *)(a2 + 164), 0x318uLL);
  *(unsigned char *)a2 = *((unsigned char *)this + 280);
  int v5 = *((unsigned __int8 *)this + 56);
  *(unsigned char *)(a2 + 104) = v5;
  sub_18E030680((double *)a2, v5, 1.0, v6, v7, v8, v9, v10, v11);
  BOOL v13 = *((unsigned char *)this + 2816) == 0;
  if (*((unsigned char *)this + 2816)) {
    uint64_t v14 = (int8x16_t *)((char *)this + 2640);
  }
  else {
    uint64_t v14 = (int8x16_t *)((char *)this + 136);
  }
  v12.i64[0] = 0;
  if (*((unsigned char *)this + 2816)) {
    *(double *)v12.i64 = 1.0;
  }
  int8x16_t v15 = v14[3];
  *(int8x16_t *)(a2 + 40) = v14[2];
  *(int8x16_t *)(a2 + 56) = v15;
  int8x16_t v16 = v14[5];
  *(int8x16_t *)(a2 + 72) = v14[4];
  *(int8x16_t *)(a2 + 88) = v16;
  int8x16_t v17 = *v14;
  int8x16_t v18 = v14[1];
  *long long v4 = *v14;
  if (v13) {
    char v19 = 1;
  }
  else {
    char v19 = 2;
  }
  *(int8x16_t *)(a2 + 24) = v18;
  *(unsigned char *)(a2 + 105) = v19;
  *(void *)(a2 + 112) = v12.i64[0];

  return raven::PopulateAllTimeFields((uint64_t)v4, (uint64_t)this + 136, v12, v17);
}

void raven::RavenPassThroughEstimator::Reset(raven::RavenPassThroughEstimator *this)
{
  *(void *)&v3[17] = 0;
  *(void *)&v3[12] = 0;
  memset(v3, 0, 88);
  *((void *)&v3[5] + 1) = 0x7FF8000000000000;
  memset(&v3[6], 0, 88);
  *((void *)&v3[11] + 1) = 0x7FF8000000000000;
  int64x2_t v2 = vdupq_n_s64(0x7FF8000000000000uLL);
  *(int64x2_t *)((char *)&v3[12] + 8) = v2;
  *(int64x2_t *)((char *)&v3[13] + 8) = v2;
  *(int64x2_t *)((char *)&v3[14] + 8) = v2;
  *(int64x2_t *)((char *)&v3[15] + 8) = v2;
  *((void *)&v3[16] + 1) = 0x7FF8000000000000;
  *(int64x2_t *)((char *)&v3[17] + 8) = v2;
  *(int64x2_t *)((char *)&v3[18] + 8) = v2;
  *(int64x2_t *)((char *)&v3[19] + 8) = v2;
  *(int64x2_t *)((char *)&v3[20] + 8) = v2;
  *((void *)&v3[21] + 1) = 0x7FF8000000000000;
  memcpy((char *)this + 2544, v3, 0x160uLL);
  *(void *)&v3[17] = 0;
  *(void *)&v3[12] = 0;
  memset(v3, 0, 88);
  *((void *)&v3[5] + 1) = 0x7FF8000000000000;
  memset(&v3[6], 0, 88);
  *((void *)&v3[11] + 1) = 0x7FF8000000000000;
  *(int64x2_t *)((char *)&v3[12] + 8) = v2;
  *(int64x2_t *)((char *)&v3[13] + 8) = v2;
  *(int64x2_t *)((char *)&v3[14] + 8) = v2;
  *(int64x2_t *)((char *)&v3[15] + 8) = v2;
  *((void *)&v3[16] + 1) = 0x7FF8000000000000;
  *(int64x2_t *)((char *)&v3[17] + 8) = v2;
  *(int64x2_t *)((char *)&v3[18] + 8) = v2;
  *(int64x2_t *)((char *)&v3[19] + 8) = v2;
  *(int64x2_t *)((char *)&v3[20] + 8) = v2;
  *((void *)&v3[21] + 1) = 0x7FF8000000000000;
  memcpy((char *)this + 2904, v3, 0x160uLL);
  *(_OWORD *)((char *)this + 3256) = 0u;
  *((void *)this + 409) = 0xFFF0000000000000;
  *((unsigned char *)this + 3280) = 0;
  raven::RavenEstimator::Reset(this);
}

__n128 raven::RavenPassThroughEstimator::SetLastSolutionOutputTime(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[204] = *a2;
  return result;
}

void sub_18E0E759C(void *a1)
{
  *a1 = &unk_1EDD14928;
  sub_18E0268B0((uint64_t)a1);

  JUMPOUT(0x192FA6240);
}

raven::GnssReceiverBandCorrectionsManager *raven::GnssReceiverBandCorrectionsManager::GnssReceiverBandCorrectionsManager(raven::GnssReceiverBandCorrectionsManager *this, const raven::RavenParameters *a2)
{
  *(void *)this = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 1) = (char *)this + 16;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 3) = 0;
  *((unsigned char *)this + 880) = 0;
  *((void *)this + 111) = 0;
  *((void *)this + 113) = 0;
  *((void *)this + 112) = 0;
  *((unsigned char *)this + 48) = 0;
  raven::GnssReceiverBandCorrectionsManager::Configure(this, a2);
  return this;
}

void sub_18E0E7664(_Unwind_Exception *a1)
{
  uint64_t v6 = *v3;
  *int v3 = 0;
  if (v6) {
    sub_18E0B7500((uint64_t)v3, v6);
  }
  sub_18E0B7560(v2, 0);
  sub_18E012A10(v1, *v4);
  _Unwind_Resume(a1);
}

void *raven::GnssReceiverBandCorrectionsManager::Configure(void *this, const raven::RavenParameters *a2)
{
  *this = a2;
  if (a2)
  {
    if (*((unsigned char *)a2 + 551)) {
      operator new();
    }
    if (*((unsigned char *)a2 + 576)) {
      operator new();
    }
  }
  return this;
}

void *raven::GnssReceiverBandCorrectionsManager::RemoveConstellationClockOffset(void *result, uint64_t *a2)
{
  int64x2_t v2 = result + 1;
  int v3 = (void *)*result;
  if ((void *)*result != result + 1)
  {
    do
    {
      double v5 = 0.0;
      switch(*((unsigned char *)v3 + 40))
      {
        case 3:
          __n128 result = (void *)sub_18E017328(a2);
          if (result)
          {
            uint64_t v6 = a2[1];
            goto LABEL_11;
          }
          break;
        case 4:
        case 5:
        case 6:
          __n128 result = (void *)sub_18E017410(a2);
          if (result)
          {
            uint64_t v6 = a2[2];
            goto LABEL_11;
          }
          break;
        case 7:
        case 8:
          __n128 result = (void *)sub_18E017398(a2);
          if (result)
          {
            uint64_t v6 = a2[3];
            goto LABEL_11;
          }
          break;
        case 0xA:
          __n128 result = (void *)sub_18E017488(a2);
          if (result)
          {
            uint64_t v6 = a2[4];
LABEL_11:
            double v5 = *(double *)(v6 + 16);
          }
          break;
        default:
          break;
      }
      *((double *)v3 + 6) = v5 + *((double *)v3 + 6);
      uint64_t v7 = (void *)v3[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          uint64_t v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (void *)v3[2];
          BOOL v9 = *v8 == (void)v3;
          int v3 = v8;
        }
        while (!v9);
      }
      int v3 = v8;
    }
    while (v8 != v2);
  }
  return result;
}

uint64_t raven::GnssReceiverBandCorrectionsManager::InjectVendorCorrections(uint64_t a1, unsigned __int8 **a2, __n128 *a3, uint64_t *a4, unsigned __int8 *a5, unsigned __int8 *a6, uint64_t a7, uint64_t a8, int8x16_t a9, int8x16_t a10)
{
  if (!*(void *)a1)
  {
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)a1) > 1) {
      return 0;
    }
    LOWORD(v55) = 12;
    unsigned __int8 v54 = 1;
    uint64_t v48 = "#rxbc,UpdateReceiverBandCorrections,not configured";
LABEL_67:
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v55, &v54, v48, v36, v37, v38, v39, v40, v49);
    return 0;
  }
  uint64_t v11 = *a2;
  int8x16_t v12 = a2[1];
  if (*a2 != v12)
  {
    BOOL v13 = (uint64_t **)(a1 + 8);
    uint64_t v14 = (uint64_t **)(a1 + 16);
    int8x16_t v15 = "#rxbc,Invalid rx_band_correction for band %d, ignoring and clearing cache";
    do
    {
      unsigned int v16 = *v11;
      if (*v11
        && (*((void *)v11 + 1) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
        && ((*((_DWORD *)v11 + 4) & 0x7FFFFFFFu) <= 0x7F7FFFFF ? (BOOL v17 = *((float *)v11 + 4) < 100.0) : (BOOL v17 = 0), v17))
      {
        if (*(unsigned char *)(*(void *)a1 + 547))
        {
          long long v28 = *(uint64_t **)v11;
          long long v29 = v15;
          uint64_t v30 = *((void *)v11 + 2);
          double v31 = -*((double *)v11 + 1);
          double v55 = v11;
          unint64_t v32 = sub_18E0E8160((uint64_t **)(a1 + 8), v11, (uint64_t)&std::piecewise_construct, &v55);
          v32[5] = v28;
          *((double *)v32 + 6) = v31;
          *((_DWORD *)v32 + 14) = v30;
          int8x16_t v15 = v29;
        }
        else
        {
          double v55 = v11;
          int v33 = sub_18E0E8160((uint64_t **)(a1 + 8), v11, (uint64_t)&std::piecewise_construct, &v55);
          a9 = *(int8x16_t *)v11;
          *((_DWORD *)v33 + 14) = *((_DWORD *)v11 + 4);
          *(int8x16_t *)(v33 + 5) = a9;
        }
      }
      else
      {
        int8x16_t v18 = *v14;
        if (*v14)
        {
          char v19 = (uint64_t *)(a1 + 16);
          unsigned __int8 v20 = *v14;
          do
          {
            unsigned int v21 = *((unsigned __int8 *)v20 + 32);
            BOOL v22 = v21 >= v16;
            if (v21 >= v16) {
              uint64_t v23 = (uint64_t **)v20;
            }
            else {
              uint64_t v23 = (uint64_t **)(v20 + 1);
            }
            if (v22) {
              char v19 = v20;
            }
            unsigned __int8 v20 = *v23;
          }
          while (*v23);
          if (v19 != (uint64_t *)v14 && *((unsigned __int8 *)v19 + 32) <= v16)
          {
            double v24 = (uint64_t *)v19[1];
            __double2 v25 = v19;
            if (v24)
            {
              do
              {
                double v26 = v24;
                double v24 = (uint64_t *)*v24;
              }
              while (v24);
            }
            else
            {
              do
              {
                double v26 = (uint64_t *)v25[2];
                BOOL v27 = *v26 == (void)v25;
                __double2 v25 = v26;
              }
              while (!v27);
            }
            if (*v13 == v19) {
              *BOOL v13 = v26;
            }
            --*(void *)(a1 + 24);
            sub_18E01B97C(v18, v19);
            operator delete(v19);
            unsigned int v16 = *v11;
          }
        }
        if (v16
          && (*((void *)v11 + 1) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
          && (*((_DWORD *)v11 + 4) & 0x7FFFFFFFu) < 0x7F800000)
        {
          LOWORD(v55) = 12;
          unsigned __int8 v54 = 2;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v55, &v54, "#rxbc,rx_band_correction for band %d: uncertainty %.1f ns too high, ignoring and clearing cache", (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, a7, a8, v16);
        }
        else
        {
          LOWORD(v55) = 12;
          unsigned __int8 v54 = 2;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v55, &v54, v15, (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, a7, a8, v16);
        }
      }
      v11 += 24;
    }
    while (v11 != v12);
  }
  uint64_t v34 = *(void *)(a1 + 40);
  if (v34) {
    raven::MinnesotaRfModelCompensator::FeedVendorCorrections(v34, a1 + 8, a3, a5, a6, (uint64_t)a6, a7, a8);
  }
  char v35 = *(uint64_t **)(a1 + 32);
  if (v35
    && (raven::GnssReceiverBandCorrectionsFilter::TickFilterAndOverwriteCorrections(v35, (uint64_t **)(a1 + 8), a3, a5, a6, (uint64_t)a6, a7, a8, a9, a10) & 1) == 0)
  {
    LOWORD(v55) = 12;
    unsigned __int8 v54 = 4;
    uint64_t v48 = "#rxbc,Updating filtered Rx band corrections failed";
    goto LABEL_67;
  }
  if (*(unsigned char *)(*(void *)a1 + 548)) {
    raven::GnssReceiverBandCorrectionsManager::RemoveConstellationClockOffset((void *)(a1 + 8), a4);
  }
  uint64_t v41 = *(unsigned __int8 **)(a1 + 8);
  if (v41 != (unsigned __int8 *)(a1 + 16))
  {
    do
    {
      BOOL v42 = *(cnprint::CNPrinter **)(a1 + 40);
      if (v42) {
        raven::MinnesotaRfModelCompensator::OverwriteWithInternalEstimate(v42, v41 + 40);
      }
      double v43 = 0.0;
      if (*(unsigned char *)(*(void *)a1 + 2562) && *(unsigned char *)(a1 + 880) && *(unsigned char *)(a1 + 152))
      {
        int v44 = v41[40];
        switch(v44)
        {
          case 8:
            double v43 = *(double *)(a1 + 264);
            *(double *)(a1 + 896) = v43;
            break;
          case 6:
            double v43 = *(double *)(a1 + 272);
            *(double *)(a1 + 904) = v43;
            break;
          case 2:
            double v43 = *(double *)(a1 + 256);
            *(double *)(a1 + 888) = v43;
            break;
        }
      }
      *((double *)v41 + 6) = *((double *)v41 + 6) - v43;
      double v45 = (unsigned __int8 *)*((void *)v41 + 1);
      if (v45)
      {
        do
        {
          double v46 = v45;
          double v45 = *(unsigned __int8 **)v45;
        }
        while (v45);
      }
      else
      {
        do
        {
          double v46 = (unsigned __int8 *)*((void *)v41 + 2);
          BOOL v27 = *(void *)v46 == (void)v41;
          uint64_t v41 = v46;
        }
        while (!v27);
      }
      uint64_t v41 = v46;
    }
    while (v46 != (unsigned __int8 *)(a1 + 16));
  }
  return 1;
}

void raven::MinnesotaRfModelCompensator::FeedVendorCorrections(uint64_t a1, uint64_t a2, __n128 *a3, unsigned __int8 *a4, unsigned __int8 *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14 = *(void *)(a2 + 8);
  uint64_t v12 = a2 + 8;
  uint64_t v13 = v14;
  if (!v14) {
    goto LABEL_12;
  }
  uint64_t v15 = v12;
  uint64_t v16 = v13;
  do
  {
    unsigned int v17 = *(unsigned __int8 *)(v16 + 32);
    BOOL v18 = v17 >= 2;
    if (v17 >= 2) {
      char v19 = (uint64_t *)v16;
    }
    else {
      char v19 = (uint64_t *)(v16 + 8);
    }
    if (v18) {
      uint64_t v15 = v16;
    }
    uint64_t v16 = *v19;
  }
  while (*v19);
  if (v15 == v12 || *(unsigned __int8 *)(v15 + 32) >= 3u) {
LABEL_12:
  }
    uint64_t v15 = v12;
  if (!v13) {
    goto LABEL_24;
  }
  uint64_t v20 = v12;
  uint64_t v21 = v13;
  do
  {
    unsigned int v22 = *(unsigned __int8 *)(v21 + 32);
    BOOL v23 = v22 >= 7;
    if (v22 >= 7) {
      double v24 = (uint64_t *)v21;
    }
    else {
      double v24 = (uint64_t *)(v21 + 8);
    }
    if (v23) {
      uint64_t v20 = v21;
    }
    uint64_t v21 = *v24;
  }
  while (*v24);
  if (v20 == v12 || *(unsigned __int8 *)(v20 + 32) >= 8u) {
LABEL_24:
  }
    uint64_t v20 = v12;
  if (v13)
  {
    uint64_t v25 = v12;
    do
    {
      unsigned int v26 = *(unsigned __int8 *)(v13 + 32);
      BOOL v27 = v26 >= 8;
      if (v26 >= 8) {
        long long v28 = (uint64_t *)v13;
      }
      else {
        long long v28 = (uint64_t *)(v13 + 8);
      }
      if (v27) {
        uint64_t v25 = v13;
      }
      uint64_t v13 = *v28;
    }
    while (*v28);
    if (v25 != v12)
    {
      BOOL v29 = *(unsigned __int8 *)(v25 + 32) > 8u || v15 == v12;
      if (!v29 && v20 != v12)
      {
        float v31 = *(float *)(v15 + 56);
        if (fabsf(v31) >= 0.00000011921
          && ((float v32 = sqrtf((float)(*(float *)(v25 + 56) * *(float *)(v25 + 56))- (float)(*(float *)(v20 + 56) * *(float *)(v20 + 56))), fabsf(v32) >= 0.00000011921)? (v33 = (LODWORD(v31) & 0x7FFFFFFFu) <= 0x7F7FFFFF): (v33 = 0), v33 && LODWORD(v32) >> 23 < 0xFF))
        {
          double v34 = *(double *)(v15 + 48) + 7870.6;
          double v35 = *(double *)(v25 + 48) - *(double *)(v20 + 48) + 7870.6 + -1466.28;
          double v36 = 1.0 / (float)(v31 * v31);
          double v37 = 1.0 / (float)(v32 * v32);
          v53.i8[0] = 2;
          *(double *)&v53.i64[1] = (v35 * v37 + v34 * v36) / (v36 + v37);
          *(float *)&double v36 = sqrt(1.0 / (v36 + v37));
          int v54 = LODWORD(v36);
          double v55 = &v53;
          uint64_t v38 = sub_18E0E8160((uint64_t **)a1, (unsigned __int8 *)&v53, (uint64_t)&std::piecewise_construct, (unsigned char **)&v55);
          int8x16_t v39 = v53;
          *(int8x16_t *)(v38 + 5) = v53;
          *((_DWORD *)v38 + 14) = v54;
          int v44 = (cnprint::CNPrinter *)raven::GnssReceiverBandCorrectionsFilter::TickFilterAndOverwriteCorrections((uint64_t *)(a1 + 24), (uint64_t **)a1, a3, a4, a5, v40, v41, v42, v39, v43);
          if (cnprint::CNPrinter::GetLogLevel(v44) <= 1)
          {
            __int16 v52 = 12;
            unsigned __int8 v51 = 1;
            double v55 = &v53;
            sub_18E0E8160((uint64_t **)a1, (unsigned __int8 *)&v53, (uint64_t)&std::piecewise_construct, (unsigned char **)&v55);
            double v55 = &v53;
            sub_18E0E8160((uint64_t **)a1, (unsigned __int8 *)&v53, (uint64_t)&std::piecewise_construct, (unsigned char **)&v55);
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v52, &v51, "#rxbc,local rxbc estimate for GPS/GAL cohort,gps,%.1f,unc,%.1f,gal,%.1f,unc,%.1f,combined,%.1f,unc,%.1f,filtered,%.1f,unc,%.1f", v45, v46, v47, v48, v49, SLOBYTE(v34));
          }
        }
        else
        {
          v53.i16[0] = 12;
          LOBYTE(v55) = 4;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v53, (unsigned __int8 *)&v55, "#rxbc,component estimate with zero uncertainty", (uint64_t)a4, (uint64_t)a5, a6, a7, a8, v50);
        }
      }
    }
  }
}

void raven::MinnesotaRfModelCompensator::OverwriteWithInternalEstimate(cnprint::CNPrinter *a1, unsigned __int8 *a2)
{
  int v3 = *a2;
  if (v3 == 2 || v3 == 8)
  {
    uint64_t v7 = *((void *)a1 + 1);
    double v5 = (double *)((char *)a1 + 8);
    uint64_t v6 = v7;
    if (v7)
    {
      uint64_t v8 = v5;
      do
      {
        unsigned int v9 = *(unsigned __int8 *)(v6 + 32);
        BOOL v10 = v9 >= 2;
        if (v9 >= 2) {
          uint64_t v11 = (uint64_t *)v6;
        }
        else {
          uint64_t v11 = (uint64_t *)(v6 + 8);
        }
        if (v10) {
          uint64_t v8 = (double *)v6;
        }
        uint64_t v6 = *v11;
      }
      while (*v11);
      if (v8 != v5 && *((unsigned __int8 *)v8 + 32) <= 2u)
      {
        double v12 = v8[6] + -7870.6;
        float v13 = *((float *)a2 + 4);
        double v14 = vabdd_f64(v12, *((double *)a2 + 1));
        float v16 = hypotf(v13, v13);
        BOOL v17 = v16 > 0.0 && v14 / v16 <= 5.0;
        if (cnprint::CNPrinter::GetLogLevel(v15) <= 1)
        {
          __int16 v29 = 12;
          unsigned __int8 v28 = 1;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v29, &v28, "#rxbc,local rxbc estimate,band,%d,mismatch ns,%.1f,is_used,%d,vendor,%.1f,unc,%.1f,estimate,%.1f,unc,%.1f", v23, v24, v25, v26, v27, *a2);
        }
        if (v17)
        {
          *a2 = v3;
          *((double *)a2 + 1) = v12;
          *((float *)a2 + 4) = v13;
        }
      }
    }
  }
  else if (v3 == 7)
  {
    if (cnprint::CNPrinter::GetLogLevel(a1) <= 1)
    {
      __int16 v31 = 12;
      unsigned __int8 v30 = 1;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v31, &v30, "#rxbc,fixed E1 band correction,vendor,%.1f,unc,%.1f,fixed value,%.1f", v18, v19, v20, v21, v22, *((void *)a2 + 1));
    }
    *((void *)a2 + 1) = 0xC096E91EB851EB85;
    *((_DWORD *)a2 + 4) = 0;
  }
}

uint64_t **sub_18E0E8160(uint64_t **a1, unsigned __int8 *a2, uint64_t a3, unsigned char **a4)
{
  uint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    unsigned int v8 = *a2;
    while (1)
    {
      while (1)
      {
        unsigned int v9 = (uint64_t **)v6;
        unsigned int v10 = *((unsigned __int8 *)v6 + 32);
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    unsigned int v9 = a1 + 1;
LABEL_10:
    uint64_t v11 = operator new(0x40uLL);
    v11[32] = **a4;
    *((void *)v11 + 5) = 0;
    *((void *)v11 + 6) = 0;
    *((void *)v11 + 6) = 0x7FF8000000000000;
    *((void *)v11 + 7) = 0;
    *((_DWORD *)v11 + 14) = 2143289344;
    sub_18E01BD84(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t raven::ConvertProtobufToAccelerometerEvent(float32x2_t *this, const CoreNavigation::CLP::LogEntry::PrivateData::AccelSample *a2, raven::AccelerometerEvent *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9, int8x16_t a10)
{
  if ((this[4].i8[0] & 1) == 0) {
    return 0;
  }
  uint64_t v13 = (uint64_t)this[1];
  if (!v13)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(0);
    uint64_t v13 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::AccelSample::default_instance_ + 8);
  }
  int v14 = raven::ConvertProtobufToRavenTime(v13, (uint64_t)a2 + 8, 0, a4, a5, a6, a7, a8, a9, a10);
  uint64_t result = 0;
  if (v14)
  {
    *(float64x2_t *)((char *)a2 + 104) = vcvtq_f64_f32(this[2]);
    *((double *)a2 + 15) = this[3].f32[0];
    return 1;
  }
  return result;
}

uint64_t raven::ConvertProtobufToRavenTime(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9, int8x16_t a10)
{
  unsigned int v10 = *(_DWORD *)(a1 + 36);
  if ((v10 & 4) != 0)
  {
    a9.i64[0] = *(void *)(a1 + 24);
    long long v19 = 0uLL;
    CNTimeSpan::SetTimeSpan((uint64_t *)&v19, 0, a9, a10);
    v15.i64[1] = *((void *)&v19 + 1);
    *(_OWORD *)a2 = v19;
    if (a3 & 1) != 0 && (*(unsigned char *)(a1 + 36))
    {
      v15.i64[0] = *(void *)(a1 + 8);
      long long v19 = 0uLL;
      CNTimeSpan::SetTimeSpan((uint64_t *)&v19, 0, v15, v14);
      *(_OWORD *)(a2 + 24) = v19;
      *(unsigned char *)(a2 + 16) = 1;
    }
    else
    {
      *(unsigned char *)(a2 + 16) = 0;
    }
  }
  else
  {
    LOWORD(v19) = 12;
    unsigned __int8 v18 = 3;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v19, &v18, "ConvertProtobufToRavenTime,mach continuous time not present", a4, a5, a6, a7, a8, v17);
  }
  return (v10 >> 2) & 1;
}

uint64_t raven::ConvertProtobufToAccessoryVehicleSpeedEvent(raven *this, const CoreNavigation::CLP::LogEntry::PrivateData::AccessoryVehicleSpeedNotification *a2, raven::AccessoryVehicleSpeedEvent *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9, int8x16_t a10)
{
  if ((*((unsigned char *)this + 80) & 1) == 0) {
    return 0;
  }
  uint64_t v13 = *((void *)this + 1);
  if (!v13)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(0);
    uint64_t v13 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::AccessoryVehicleSpeedNotification::default_instance_
                    + 8);
  }
  int v19 = raven::ConvertProtobufToRavenTime(v13, (uint64_t)a2 + 8, 0, a4, a5, a6, a7, a8, a9, a10);
  uint64_t result = 0;
  if (v19)
  {
    if ((*((unsigned char *)this + 80) & 2) == 0) {
      return 0;
    }
    uint64_t v22 = *((void *)this + 2);
    if (!v22)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(0);
      uint64_t v22 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::AccessoryVehicleSpeedNotification::default_instance_
                      + 16);
    }
    int v23 = raven::ConvertProtobufToRavenTime(v22, (uint64_t)a2 + 104, 0, v14, v15, v16, v17, v18, v20, v21);
    uint64_t result = 0;
    if (v23)
    {
      *((unsigned char *)a2 + 256) = 0;
      unsigned int v24 = *((_DWORD *)this + 7) - 1;
      if (v24 <= 3) {
        *((unsigned char *)a2 + 256) = 0x4010203u >> (8 * v24);
      }
      unsigned int v25 = *((_DWORD *)this + 18);
      if (v25 <= 1) {
        *((unsigned char *)a2 + 257) = v25;
      }
      *((unsigned char *)a2 + 200) = *((unsigned char *)this + 52);
      unint64_t v26 = *((unsigned int *)this + 12);
      *((_DWORD *)a2 + 51) = v26;
      uint64_t v27 = (void **)((char *)a2 + 208);
      sub_18E0E8750((void **)a2 + 26, v26);
      unsigned __int8 v28 = (void **)((char *)a2 + 232);
      sub_18E0E8750((void **)a2 + 29, *((unsigned int *)a2 + 51));
      if (*((int *)this + 12) < 1) {
        return 1;
      }
      uint64_t v31 = 0;
      do
      {
        if (v31 >= *((int *)this + 10))
        {
          wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
          wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
          wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
          wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v61);
        }
        uint64_t v32 = *(void *)(*((void *)this + 4) + 8 * v31);
        double v34 = (char *)*((void *)a2 + 27);
        unint64_t v33 = *((void *)a2 + 28);
        if ((unint64_t)v34 >= v33)
        {
          double v36 = (char *)*v27;
          uint64_t v37 = (v34 - (unsigned char *)*v27) >> 3;
          unint64_t v38 = v37 + 1;
          if ((unint64_t)(v37 + 1) >> 61) {
            sub_18DEE1FC8();
          }
          uint64_t v39 = v33 - (void)v36;
          if (v39 >> 2 > v38) {
            unint64_t v38 = v39 >> 2;
          }
          if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v40 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v40 = v38;
          }
          if (v40)
          {
            uint64_t v41 = (char *)sub_18DEDF808((uint64_t)a2 + 224, v40);
            double v36 = (char *)*((void *)a2 + 26);
            double v34 = (char *)*((void *)a2 + 27);
          }
          else
          {
            uint64_t v41 = 0;
          }
          uint64_t v42 = &v41[8 * v37];
          *(void *)uint64_t v42 = v32;
          double v35 = v42 + 8;
          while (v34 != v36)
          {
            uint64_t v43 = *((void *)v34 - 1);
            v34 -= 8;
            *((void *)v42 - 1) = v43;
            v42 -= 8;
          }
          *((void *)a2 + 26) = v42;
          *((void *)a2 + 27) = v35;
          *((void *)a2 + 28) = &v41[8 * v40];
          if (v36) {
            operator delete(v36);
          }
        }
        else
        {
          *(void *)double v34 = v32;
          double v35 = v34 + 8;
        }
        *((void *)a2 + 27) = v35;
        if (v31 >= *((int *)this + 16))
        {
          wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
          wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
          wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
          wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v61);
        }
        uint64_t v44 = *(void *)(*((void *)this + 7) + 8 * v31);
        uint64_t v46 = (char *)*((void *)a2 + 30);
        unint64_t v45 = *((void *)a2 + 31);
        if ((unint64_t)v46 >= v45)
        {
          uint64_t v48 = (char *)*v28;
          uint64_t v49 = (v46 - (unsigned char *)*v28) >> 3;
          unint64_t v50 = v49 + 1;
          if ((unint64_t)(v49 + 1) >> 61) {
            sub_18DEE1FC8();
          }
          uint64_t v51 = v45 - (void)v48;
          if (v51 >> 2 > v50) {
            unint64_t v50 = v51 >> 2;
          }
          if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v52 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v52 = v50;
          }
          if (v52)
          {
            int8x16_t v53 = (char *)sub_18DEDF808((uint64_t)a2 + 248, v52);
            uint64_t v48 = (char *)*((void *)a2 + 29);
            uint64_t v46 = (char *)*((void *)a2 + 30);
          }
          else
          {
            int8x16_t v53 = 0;
          }
          int v54 = &v53[8 * v49];
          *(void *)int v54 = v44;
          uint64_t v47 = v54 + 8;
          while (v46 != v48)
          {
            uint64_t v55 = *((void *)v46 - 1);
            v46 -= 8;
            *((void *)v54 - 1) = v55;
            v54 -= 8;
          }
          *((void *)a2 + 29) = v54;
          *((void *)a2 + 30) = v47;
          *((void *)a2 + 31) = &v53[8 * v52];
          if (v48) {
            operator delete(v48);
          }
        }
        else
        {
          *(void *)uint64_t v46 = v44;
          uint64_t v47 = v46 + 8;
        }
        *((void *)a2 + 30) = v47;
        ++v31;
        uint64_t v56 = *((int *)this + 12);
      }
      while (v31 < v56);
      if ((int)v56 <= 0)
      {
        return 1;
      }
      else
      {
        v29.i64[0] = *(void *)(*((void *)a2 + 27) - 8);
        v61[0] = 0;
        v61[1] = 0;
        CNTimeSpan::SetTimeSpan(v61, 0, v29, v30);
        uint64_t v59 = CNTimeSpan::operator+((uint64_t)a2 + 104, v61, v57, v58);
        *(_OWORD *)((char *)a2 + 72) = 0u;
        *(_OWORD *)((char *)a2 + 56) = 0u;
        *(_OWORD *)((char *)a2 + 40) = 0u;
        *(_OWORD *)((char *)a2 + 24) = 0u;
        *((void *)a2 + 1) = v59;
        *((void *)a2 + 2) = v60;
        uint64_t result = 1;
        *((void *)a2 + 11) = 0;
        *((void *)a2 + 12) = 0x7FF8000000000000;
      }
    }
  }
  return result;
}

void sub_18E0E8730(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_18E0E8750(void **a1, unint64_t a2)
{
  long long v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 3)
  {
    if (a2 >> 61) {
      sub_18DEE1FC8();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v6 = (char *)sub_18DEDF808(v3, a2);
    uint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    unsigned int v9 = &v6[8 * v8];
    unsigned int v10 = (char *)*a1;
    uint64_t v11 = (char *)a1[1];
    double v12 = v7;
    if (v11 != *a1)
    {
      double v12 = v7;
      do
      {
        uint64_t v13 = *((void *)v11 - 1);
        v11 -= 8;
        *((void *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

uint64_t raven::ConvertProtobufToActivityInputEvent(raven *this, const CoreNavigation::CLP::LogEntry::PrivateData::MotionState *a2, raven::ActivityInputEvent *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9, int8x16_t a10)
{
  if ((*((unsigned char *)this + 32) & 1) == 0) {
    return 0;
  }
  uint64_t v13 = *((void *)this + 1);
  if (!v13)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(0);
    uint64_t v13 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::MotionState::default_instance_ + 8);
  }
  int v14 = raven::ConvertProtobufToRavenTime(v13, (uint64_t)a2 + 8, 0, a4, a5, a6, a7, a8, a9, a10);
  uint64_t result = 0;
  if (v14)
  {
    if ((*((unsigned char *)this + 32) & 4) == 0) {
      return 0;
    }
    uint64_t v15 = *((void *)this + 2);
    if (!v15)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(0);
      uint64_t v15 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::MotionState::default_instance_ + 16);
    }
    if ((*(unsigned char *)(v15 + 92) & 1) == 0) {
      return 0;
    }
    uint64_t v16 = *((void *)this + 2);
    if (!v16)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)result);
      uint64_t v16 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::MotionState::default_instance_ + 16);
    }
    if ((*(unsigned char *)(v16 + 92) & 2) == 0) {
      return 0;
    }
    uint64_t v17 = *((void *)this + 2);
    if (!v17)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)result);
      uint64_t v17 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::MotionState::default_instance_ + 16);
    }
    int v18 = *(_DWORD *)(v17 + 8);
    if (v18 <= 11804)
    {
      if (v18 <= 99)
      {
        char v19 = 0;
        switch(v18)
        {
          case 0:
          case 1:
          case 2:
          case 7:
            goto LABEL_90;
          case 3:
          case 9:
            goto LABEL_89;
          case 4:
            goto LABEL_100;
          case 5:
          case 10:
          case 11:
LABEL_38:
            char v19 = 5;
            goto LABEL_90;
          case 6:
            goto LABEL_36;
          case 8:
            goto LABEL_85;
          default:
            int v22 = v18 - 52;
            switch(v22)
            {
              case 0:
              case 4:
                goto LABEL_38;
              case 1:
              case 2:
              case 3:
              case 5:
              case 6:
              case 7:
              case 8:
                goto LABEL_91;
              case 9:
              case 11:
              case 14:
                goto LABEL_89;
              case 10:
                goto LABEL_67;
              case 12:
              case 13:
                goto LABEL_85;
              default:
                if (v22 == 41) {
                  goto LABEL_100;
                }
                break;
            }
            break;
        }
        goto LABEL_91;
      }
      if (v18 > 2100)
      {
        if (v18 > 3014)
        {
          if ((v18 - 3015) >= 2) {
            goto LABEL_91;
          }
        }
        else
        {
          if (v18 == 2101) {
            goto LABEL_67;
          }
          if (v18 != 2105 && v18 != 2150) {
            goto LABEL_91;
          }
        }
      }
      else
      {
        char v21 = v18 + 38;
        if ((v18 - 2010) > 0x3D)
        {
LABEL_35:
          if (v18 == 100) {
            goto LABEL_36;
          }
LABEL_91:
          *((unsigned char *)a2 + 105) = 0;
          uint64_t v25 = *((void *)this + 2);
          if (!v25)
          {
            CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)result);
            uint64_t v25 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::MotionState::default_instance_ + 16);
          }
          int v26 = *(_DWORD *)(v25 + 12);
          uint64_t result = 0;
          char v27 = 1;
          switch(v26)
          {
            case 0:
              return result;
            case 1:
              goto LABEL_96;
            case 2:
              char v27 = 2;
              goto LABEL_96;
            case 3:
              char v27 = 3;
LABEL_96:
              *((unsigned char *)a2 + 105) = v27;
              break;
            default:
              return 1;
          }
          return 1;
        }
        if (((1 << v21) & 0x2488004000000400) == 0)
        {
          if (((1 << v21) & 0x5000) == 0)
          {
            if (v18 == 2010)
            {
LABEL_36:
              char v19 = 4;
LABEL_90:
              *((unsigned char *)a2 + 104) = v19;
              goto LABEL_91;
            }
            goto LABEL_35;
          }
LABEL_67:
          char v19 = 9;
          goto LABEL_90;
        }
      }
      goto LABEL_89;
    }
    if (v18 <= 15651)
    {
      if (v18 > 15254)
      {
        if (v18 <= 15459)
        {
          if (v18 > 15349)
          {
            if (v18 == 15350) {
              goto LABEL_85;
            }
            int v23 = 15360;
          }
          else
          {
            if (v18 == 15255) {
              goto LABEL_89;
            }
            int v23 = 15330;
          }
        }
        else
        {
          if (v18 <= 15591)
          {
            if (v18 == 15460) {
              goto LABEL_85;
            }
            int v20 = 15562;
LABEL_72:
            if (v18 != v20) {
              goto LABEL_91;
            }
            goto LABEL_85;
          }
          if (v18 == 15592) {
            goto LABEL_89;
          }
          if (v18 == 15610) {
            goto LABEL_85;
          }
          int v23 = 15620;
        }
      }
      else
      {
        if (v18 > 15099)
        {
          if ((v18 - 15100) <= 0x32 && ((1 << (v18 + 4)) & 0x4000000000401) != 0) {
            goto LABEL_89;
          }
          if (v18 != 15230)
          {
            int v20 = 15240;
            goto LABEL_72;
          }
LABEL_85:
          char v19 = 3;
          goto LABEL_90;
        }
        if (v18 <= 15029)
        {
          if (v18 != 11805)
          {
            int v20 = 12150;
            goto LABEL_72;
          }
LABEL_78:
          char v19 = 7;
          goto LABEL_90;
        }
        if (v18 == 15030) {
          goto LABEL_89;
        }
        int v23 = 15055;
      }
LABEL_88:
      if (v18 != v23) {
        goto LABEL_91;
      }
      goto LABEL_89;
    }
    if (v18 > 18224)
    {
      if (v18 > 19149)
      {
        if (v18 <= 90602)
        {
          if (v18 == 19150) {
            goto LABEL_89;
          }
          int v23 = 19160;
        }
        else
        {
          if (v18 == 90603) {
            goto LABEL_78;
          }
          if (v18 == 515652) {
            goto LABEL_89;
          }
          int v23 = 515621;
        }
        goto LABEL_88;
      }
      if (v18 > 19029)
      {
        if (v18 == 19030) {
          goto LABEL_89;
        }
        int v23 = 19090;
        goto LABEL_88;
      }
      if (v18 == 18225) {
        goto LABEL_89;
      }
      int v24 = 18240;
    }
    else
    {
      if (v18 <= 15732)
      {
        if ((v18 - 15652) > 0x3A || ((1 << (v18 - 36)) & 0x400000000840101) == 0) {
          goto LABEL_91;
        }
        goto LABEL_89;
      }
      if (v18 <= 18069)
      {
        if (v18 != 15733)
        {
          if (v18 != 17150) {
            goto LABEL_91;
          }
LABEL_100:
          char v19 = 2;
          goto LABEL_90;
        }
        goto LABEL_89;
      }
      if (v18 == 18070)
      {
LABEL_89:
        char v19 = 1;
        goto LABEL_90;
      }
      int v24 = 18200;
    }
    if (v18 == v24)
    {
      char v19 = 6;
      goto LABEL_90;
    }
    goto LABEL_91;
  }
  return result;
}

uint64_t raven::ConvertProtobufToFitnessSessionEvent(raven *this, const CoreNavigation::CLP::LogEntry::PrivateData::MotionStateObserver *a2, raven::FitnessSessionEvent *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9, int8x16_t a10)
{
  if ((*((unsigned char *)this + 32) & 1) == 0) {
    return 0;
  }
  uint64_t v13 = *((void *)this + 1);
  if (!v13)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(0);
    uint64_t v13 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::MotionStateObserver::default_instance_ + 8);
  }
  int v14 = raven::ConvertProtobufToRavenTime(v13, (uint64_t)a2 + 8, 0, a4, a5, a6, a7, a8, a9, a10);
  uint64_t result = 0;
  if (v14)
  {
    if ((*((unsigned char *)this + 32) & 4) == 0) {
      return 0;
    }
    uint64_t v15 = *((void *)this + 2);
    if (!v15)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(0);
      uint64_t v15 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::MotionStateObserver::default_instance_ + 16);
    }
    if ((*(unsigned char *)(v15 + 36) & 1) == 0) {
      return 0;
    }
    uint64_t v16 = *((void *)this + 2);
    if (!v16)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)result);
      uint64_t v16 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::MotionStateObserver::default_instance_ + 16);
    }
    if ((*(unsigned char *)(v16 + 36) & 4) == 0) {
      return 0;
    }
    uint64_t v17 = *((void *)this + 2);
    if (!v17)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)result);
      uint64_t v17 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::MotionStateObserver::default_instance_ + 16);
    }
    int v18 = *(_DWORD *)(v17 + 16);
    uint64_t result = 1;
    if (v18 <= 11804)
    {
      if (v18 <= 2009)
      {
        char v19 = 0;
        switch(v18)
        {
          case 0:
            goto LABEL_87;
          case 1:
          case 2:
          case 3:
          case 5:
          case 7:
          case 9:
          case 10:
          case 11:
            goto LABEL_86;
          case 4:
            goto LABEL_90;
          case 6:
            goto LABEL_41;
          case 8:
            goto LABEL_55;
          default:
            uint64_t v21 = (v18 - 52);
            if (v21 > 0x30) {
              goto LABEL_89;
            }
            if (((1 << (v18 - 52)) & 0x4E11) != 0) {
              goto LABEL_86;
            }
            if (((1 << (v18 - 52)) & 0x3000) != 0) {
              goto LABEL_82;
            }
            if (v21 == 48) {
              goto LABEL_41;
            }
LABEL_89:
            if (v18 == 41) {
              goto LABEL_90;
            }
            return result;
        }
      }
      if ((v18 - 2010) > 0x3D)
      {
LABEL_33:
        if (((v18 - 2101) > 0x31 || ((1 << (v18 - 53)) & 0x2000000000011) == 0)
          && (v18 - 3015) >= 2)
        {
          return result;
        }
        goto LABEL_86;
      }
      if (((1 << (v18 + 38)) & 0x2488004000005400) == 0)
      {
        if (v18 != 2010) {
          goto LABEL_33;
        }
LABEL_41:
        char v19 = 4;
LABEL_87:
        *((unsigned char *)a2 + 104) = v19;
        return result;
      }
      goto LABEL_86;
    }
    if (v18 <= 15651)
    {
      if (v18 > 15254)
      {
        if (v18 <= 15459)
        {
          if (v18 > 15349)
          {
            if (v18 == 15350) {
              goto LABEL_82;
            }
            int v22 = 15360;
          }
          else
          {
            if (v18 == 15255) {
              goto LABEL_86;
            }
            int v22 = 15330;
          }
        }
        else
        {
          if (v18 <= 15591)
          {
            if (v18 != 15460)
            {
              int v20 = 15562;
LABEL_68:
              if (v18 != v20) {
                return result;
              }
            }
LABEL_82:
            char v19 = 7;
            goto LABEL_87;
          }
          if (v18 == 15592) {
            goto LABEL_86;
          }
          if (v18 == 15610) {
            goto LABEL_82;
          }
          int v22 = 15620;
        }
      }
      else
      {
        if (v18 > 15099)
        {
          if ((v18 - 15100) <= 0x32 && ((1 << (v18 + 4)) & 0x4000000000401) != 0) {
            goto LABEL_86;
          }
          if (v18 != 15230)
          {
            int v20 = 15240;
            goto LABEL_68;
          }
          goto LABEL_82;
        }
        if (v18 <= 15029)
        {
          if (v18 != 11805)
          {
            if (v18 != 12150) {
              return result;
            }
LABEL_55:
            char v19 = 3;
            goto LABEL_87;
          }
          goto LABEL_75;
        }
        if (v18 == 15030) {
          goto LABEL_86;
        }
        int v22 = 15055;
      }
      goto LABEL_85;
    }
    if (v18 > 18224)
    {
      if (v18 > 19149)
      {
        if (v18 <= 90602)
        {
          if (v18 != 19150 && v18 != 19160) {
            return result;
          }
          char v19 = 8;
          goto LABEL_87;
        }
        if (v18 == 90603)
        {
LABEL_75:
          char v19 = 6;
          goto LABEL_87;
        }
        if (v18 == 515621) {
          goto LABEL_86;
        }
        int v22 = 515652;
LABEL_85:
        if (v18 != v22) {
          return result;
        }
        goto LABEL_86;
      }
      if (v18 > 19029)
      {
        if (v18 == 19030) {
          goto LABEL_86;
        }
        int v22 = 19090;
        goto LABEL_85;
      }
      if (v18 == 18225) {
        goto LABEL_86;
      }
      int v23 = 18240;
    }
    else
    {
      if (v18 <= 15732)
      {
        if ((v18 - 15652) > 0x3A || ((1 << (v18 - 36)) & 0x400000000840101) == 0) {
          return result;
        }
        goto LABEL_86;
      }
      if (v18 <= 18069)
      {
        if (v18 != 15733)
        {
          if (v18 != 17150) {
            return result;
          }
LABEL_90:
          char v19 = 2;
          goto LABEL_87;
        }
        goto LABEL_86;
      }
      if (v18 == 18070)
      {
LABEL_86:
        char v19 = 9;
        goto LABEL_87;
      }
      int v23 = 18200;
    }
    if (v18 != v23) {
      return result;
    }
    char v19 = 5;
    goto LABEL_87;
  }
  return result;
}

uint64_t raven::ConvertProtobufToAltitudeEvent(raven *this, const CoreNavigation::CLP::LogEntry::PrivateData::DigitalElevationModel *a2, raven::AltitudeEvent *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9, int8x16_t a10)
{
  if ((*((unsigned char *)this + 52) & 1) == 0) {
    return 0;
  }
  uint64_t v12 = *((void *)this + 1);
  if (!v12)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(0);
    uint64_t v12 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::DigitalElevationModel::default_instance_ + 8);
  }
  int v13 = raven::ConvertProtobufToRavenTime(v12, (uint64_t)a2 + 8, 0, a4, a5, a6, a7, a8, a9, a10);
  uint64_t result = 0;
  if (v13)
  {
    if ((~*((_DWORD *)this + 13) & 6) == 0)
    {
      uint64_t result = 0;
      double v15 = *((double *)this + 3);
      if ((*(void *)&v15 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && v15 > 0.0)
      {
        *((void *)a2 + 13) = *((void *)this + 2);
        *((double *)a2 + 14) = v15;
        return 1;
      }
      return result;
    }
    return 0;
  }
  return result;
}

uint64_t raven::ConvertProtobufToGEOMapBuildingDataEvent(raven *this, const CoreNavigation::CLP::LogEntry::PrivateData::GEOMapBuildingData *a2, raven::GEOMapBuildingDataEvent *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9, int8x16_t a10)
{
  if ((*((unsigned char *)this + 68) & 1) == 0) {
    goto LABEL_12;
  }
  uint64_t v12 = *((void *)this + 1);
  if (!v12)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(0);
    uint64_t v12 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::GEOMapBuildingData::default_instance_ + 8);
  }
  uint64_t v13 = raven::ConvertProtobufToRavenTime(v12, (uint64_t)a2 + 8, 0, a4, a5, a6, a7, a8, a9, a10);
  if ((v13 & 1) == 0)
  {
LABEL_12:
    LOWORD(__p[0]) = 12;
    LOBYTE(v151) = 4;
    uint64_t v16 = "ConvertProtobufToGEOMapBuildingDataEvent, Missing / error in time-tag of GEOMapBuildingData message";
    goto LABEL_13;
  }
  uint64_t v14 = *((void *)this + 7);
  if (!v14)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)v13);
    uint64_t v14 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::GEOMapBuildingData::default_instance_ + 56);
  }
  if ((*(unsigned char *)(v14 + 28) & 1) == 0) {
    goto LABEL_11;
  }
  uint64_t v15 = *((void *)this + 7);
  if (!v15)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)v13);
    uint64_t v15 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::GEOMapBuildingData::default_instance_ + 56);
  }
  if ((*(unsigned char *)(v15 + 28) & 2) == 0)
  {
LABEL_11:
    LOWORD(__p[0]) = 12;
    LOBYTE(v151) = 4;
    uint64_t v16 = "ConvertProtobufToGEOMapBuildingDataEvent, Missing query location in GEOMapBuildingData message";
LABEL_13:
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, (unsigned __int8 *)&v151, v16, a4, a5, a6, a7, a8, v139);
    return 0;
  }
  uint64_t v18 = *((void *)this + 7);
  uint64_t v19 = v18;
  if (!v18)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)v13);
    uint64_t v19 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::GEOMapBuildingData::default_instance_ + 56);
    uint64_t v18 = *((void *)this + 7);
  }
  if (fabs(*(double *)(v19 + 8)) > 90.0) {
    goto LABEL_21;
  }
  uint64_t v20 = v18;
  if (!v18)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)v13);
    uint64_t v20 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::GEOMapBuildingData::default_instance_ + 56);
    uint64_t v18 = *((void *)this + 7);
  }
  if (fabs(*(double *)(v20 + 16)) > 180.0)
  {
LABEL_21:
    LOWORD(__p[0]) = 12;
    LOBYTE(v151) = 4;
    if (v18)
    {
      uint64_t v21 = *(void *)(v18 + 8);
    }
    else
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)v13);
      uint64_t v21 = *(void *)(*(void *)(CoreNavigation::CLP::LogEntry::PrivateData::GEOMapBuildingData::default_instance_
                                  + 56)
                      + 8);
      if (!*((void *)this + 7)) {
        CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(v22);
      }
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, (unsigned __int8 *)&v151, "ConvertProtobufToGEOMapBuildingDataEvent, Invalid latitude or longitude value of query location,lat_deg,%.9lf,lon_deg,%.9lf", a4, a5, a6, a7, a8, v21);
    return 0;
  }
  if (v18)
  {
    *((double *)a2 + 16) = *(double *)(v18 + 8) * 0.0174532925;
  }
  else
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)v13);
    uint64_t v18 = *((void *)this + 7);
    *((double *)a2 + 16) = *(double *)(*(void *)(CoreNavigation::CLP::LogEntry::PrivateData::GEOMapBuildingData::default_instance_
                                                 + 56)
                                     + 8)
                         * 0.0174532925;
    if (!v18)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(v23);
      uint64_t v18 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::GEOMapBuildingData::default_instance_ + 56);
    }
  }
  *((double *)a2 + 17) = *(double *)(v18 + 16) * 0.0174532925;
  sub_18E0E9DB0((uint64_t *)a2 + 13);
  v141 = (uint64_t *)((char *)a2 + 104);
  LogLevel = (cnprint::CNPrinter *)sub_18E0E9E10((uint64_t *)a2 + 13, *((int *)this + 6));
  if (*((int *)this + 6) >= 1)
  {
    uint64_t v25 = 0;
    v140 = (char *)a2 + 120;
    int64x2_t v143 = vdupq_n_s64(0x7FF8000000000000uLL);
    v142 = a2;
    do
    {
      uint64_t v26 = *(void *)(*((void *)this + 2) + 8 * v25);
      int v27 = *(_DWORD *)(v26 + 16);
      if (!v27)
      {
        LogLevel = (cnprint::CNPrinter *)cnprint::CNPrinter::GetLogLevel(LogLevel);
        if (LogLevel <= 1)
        {
          LOWORD(__p[0]) = 12;
          LOBYTE(v151) = 1;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, (unsigned __int8 *)&v151, "ConvertProtobufToGEOMapBuildingDataEvent, Building with no sections, building is skipped.", v43, v44, v45, v46, v47, v139);
        }
        goto LABEL_137;
      }
      int v28 = *(_DWORD *)(v26 + 52);
      if ((v28 & 4) != 0
        && v27 == 1
        && *(void *)(v26 + 40) >> 5 <= 0xC34uLL
        && *(_DWORD *)(**(void **)(v26 + 8) + 16) == 3)
      {
        LogLevel = (cnprint::CNPrinter *)cnprint::CNPrinter::GetLogLevel(LogLevel);
        if (LogLevel <= 1)
        {
          LOWORD(__p[0]) = 12;
          LOBYTE(v151) = 1;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, (unsigned __int8 *)&v151, "ConvertProtobufToGEOMapBuildingDataEvent, skipped V2 Tiles ghost building, id, %llu", v48, v49, v50, v51, v52, *(void *)(v26 + 40));
        }
        goto LABEL_137;
      }
      v149 = 0;
      int64x2_t v147 = 0u;
      int64x2_t v148 = 0u;
      unint64_t v29 = *(int *)(v26 + 16);
      LOBYTE(v30) = v28;
      if (v29)
      {
        if ((v29 & 0x80000000) != 0) {
          sub_18DEE1FC8();
        }
        v145.i64[1] = (uint64_t)&v149;
        uint64_t v31 = (char *)sub_18E0DDD90((uint64_t)&v149, v29);
        __p[0] = v31;
        __p[1] = v31;
        unint64_t v33 = &v31[80 * v32];
        __p[2] = v31;
        v145.i64[0] = (uint64_t)v33;
        int64x2_t v34 = v148;
        if (v148.i64[1] == v148.i64[0])
        {
          int64x2_t v41 = vdupq_n_s64(v148.u64[1]);
          uint64_t v42 = v31;
        }
        else
        {
          uint64_t v35 = 0;
          do
          {
            double v36 = &v31[v35];
            uint64_t v37 = v34.i64[1] + v35;
            *((void *)v36 - 10) = 0;
            *((void *)v36 - 9) = 0;
            *((void *)v36 - 8) = 0;
            *((_OWORD *)v36 - 5) = *(_OWORD *)(v34.i64[1] + v35 - 80);
            *((void *)v36 - 8) = *(void *)(v34.i64[1] + v35 - 64);
            *(void *)(v37 - 80) = 0;
            *(void *)(v37 - 72) = 0;
            *(void *)(v37 - 64) = 0;
            long long v38 = *(_OWORD *)(v34.i64[1] + v35 - 56);
            long long v39 = *(_OWORD *)(v34.i64[1] + v35 - 40);
            long long v40 = *(_OWORD *)(v34.i64[1] + v35 - 24);
            *((void *)v36 - 1) = *(void *)(v34.i64[1] + v35 - 8);
            *(_OWORD *)(v36 - 24) = v40;
            *(_OWORD *)(v36 - 40) = v39;
            *(_OWORD *)(v36 - 56) = v38;
            v35 -= 80;
          }
          while (v34.i64[1] + v35 != v34.i64[0]);
          int64x2_t v41 = v148;
          uint64_t v42 = &v31[v35];
          uint64_t v31 = (char *)__p[2];
          unint64_t v33 = (char *)v145.i64[0];
        }
        v148.i64[0] = (uint64_t)v42;
        v148.i64[1] = (uint64_t)v31;
        *(int64x2_t *)&__p[1] = v41;
        uint64_t v53 = (uint64_t)v149;
        v149 = v33;
        v145.i64[0] = v53;
        __p[0] = (void *)v41.i64[0];
        LogLevel = (cnprint::CNPrinter *)sub_18E0F5C44((uint64_t)__p);
        int v30 = *(_DWORD *)(v26 + 52);
      }
      if ((v30 & 2) != 0) {
        uint64_t v54 = *(void *)(v26 + 32);
      }
      else {
        uint64_t v54 = 0;
      }
      v147.i64[0] = v54;
      if ((v28 & 4) != 0) {
        uint64_t v55 = *(void *)(v26 + 40);
      }
      else {
        uint64_t v55 = 0;
      }
      v147.i64[1] = v55;
      if (v54)
      {
        if (*(int *)(v26 + 16) >= 1)
        {
          uint64_t v56 = 0;
          while (1)
          {
            uint64_t v57 = *(void *)(*(void *)(v26 + 8) + 8 * v56);
            if (!*(_DWORD *)(v57 + 16))
            {
              LogLevel = (cnprint::CNPrinter *)cnprint::CNPrinter::GetLogLevel(LogLevel);
              if (LogLevel <= 1)
              {
                LOWORD(__p[0]) = 12;
                LOBYTE(v151) = 1;
                cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, (unsigned __int8 *)&v151, "ConvertProtobufToGEOMapBuildingDataEvent, Building's section with missing coordinate data, section is skipped.", v64, v65, v66, v67, v68, v139);
              }
              goto LABEL_122;
            }
            int v58 = *(_DWORD *)(v57 + 88);
            if ((v28 & 4) != 0) {
              break;
            }
            if ((~v58 & 6) == 0) {
              goto LABEL_66;
            }
            LogLevel = (cnprint::CNPrinter *)cnprint::CNPrinter::GetLogLevel(LogLevel);
            if (LogLevel <= 1)
            {
              LOWORD(__p[0]) = 12;
              LOBYTE(v151) = 1;
              cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, (unsigned __int8 *)&v151, "ConvertProtobufToGEOMapBuildingDataEvent, V1 Building's section with missing data, section is skipped.", v59, v60, v61, v62, v63, v139);
            }
LABEL_122:
            if (++v56 >= *(int *)(v26 + 16)) {
              goto LABEL_123;
            }
          }
          if ((~v58 & 0xF8) != 0)
          {
            LogLevel = (cnprint::CNPrinter *)cnprint::CNPrinter::GetLogLevel(LogLevel);
            if (LogLevel <= 1)
            {
              LOWORD(__p[0]) = 12;
              LOBYTE(v151) = 1;
              cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, (unsigned __int8 *)&v151, "ConvertProtobufToGEOMapBuildingDataEvent, V2 Building's section with missing data, section is skipped.", v95, v96, v97, v98, v99, v139);
            }
            goto LABEL_122;
          }
LABEL_66:
          memset(__p, 0, sizeof(__p));
          int64x2_t v145 = v143;
          v146[0] = 0;
          *(int64x2_t *)&v146[8] = v143;
          *(int64x2_t *)&v146[24] = v143;
          unint64_t v69 = *(int *)(v57 + 16);
          if (v69)
          {
            if ((v69 & 0x80000000) != 0) {
              sub_18DEE1FC8();
            }
            long long v70 = (char *)sub_18DFF7B64((uint64_t)&__p[2], v69);
            uint64_t v73 = (char *)__p[0];
            int v72 = (char *)__p[1];
            long long v74 = v70;
            if (__p[1] != __p[0])
            {
              do
              {
                *((_OWORD *)v74 - 1) = *((_OWORD *)v72 - 1);
                v74 -= 16;
                v72 -= 16;
              }
              while (v72 != v73);
              int v72 = (char *)__p[0];
            }
            __p[0] = v74;
            __p[1] = v70;
            __p[2] = &v70[16 * v71];
            if (v72) {
              operator delete(v72);
            }
            if (*(int *)(v57 + 16) >= 1)
            {
              uint64_t v75 = 0;
              do
              {
                uint64_t v76 = *(void *)(*(void *)(v57 + 8) + 8 * v75);
                if ((~*(_DWORD *)(v76 + 28) & 3) != 0)
                {
                  long long v70 = (char *)cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v70);
                  if (v70 <= 1)
                  {
                    LOWORD(v151) = 12;
                    v150[0] = 1;
                    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v151, v150, "ConvertProtobufToGEOMapBuildingDataEvent, Building's section footprint coordinate is missing, vertex is skipped.", v81, v82, v83, v84, v85, v139);
                  }
                }
                else
                {
                  uint64_t v78 = *(void *)(v76 + 8);
                  uint64_t v77 = *(void *)(v76 + 16);
                  int v79 = (char *)__p[1];
                  if (__p[1] >= __p[2])
                  {
                    long long v70 = (char *)__p[0];
                    int64_t v86 = ((char *)__p[1] - (char *)__p[0]) >> 4;
                    unint64_t v87 = v86 + 1;
                    if ((unint64_t)(v86 + 1) >> 60) {
                      sub_18DEE1FC8();
                    }
                    int64_t v88 = (char *)__p[2] - (char *)__p[0];
                    if (((char *)__p[2] - (char *)__p[0]) >> 3 > v87) {
                      unint64_t v87 = v88 >> 3;
                    }
                    if ((unint64_t)v88 >= 0x7FFFFFFFFFFFFFF0) {
                      unint64_t v89 = 0xFFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v89 = v87;
                    }
                    if (v89)
                    {
                      uint64_t v90 = (char *)sub_18DFF7B64((uint64_t)&__p[2], v89);
                      long long v70 = (char *)__p[0];
                      int v79 = (char *)__p[1];
                    }
                    else
                    {
                      uint64_t v90 = 0;
                    }
                    int8x16_t v91 = &v90[16 * v86];
                    *(void *)int8x16_t v91 = v78;
                    *((void *)v91 + 1) = v77;
                    uint64_t v92 = v91;
                    if (v79 != v70)
                    {
                      do
                      {
                        *((_OWORD *)v92 - 1) = *((_OWORD *)v79 - 1);
                        v92 -= 16;
                        v79 -= 16;
                      }
                      while (v79 != v70);
                      long long v70 = (char *)__p[0];
                    }
                    long long v80 = v91 + 16;
                    __p[0] = v92;
                    __p[1] = v91 + 16;
                    __p[2] = &v90[16 * v89];
                    if (v70) {
                      operator delete(v70);
                    }
                  }
                  else
                  {
                    *(void *)__p[1] = v78;
                    *((void *)v79 + 1) = v77;
                    long long v80 = v79 + 16;
                  }
                  __p[1] = v80;
                }
                ++v75;
              }
              while (v75 < *(int *)(v57 + 16));
            }
          }
          LogLevel = (cnprint::CNPrinter *)__p[0];
          if (__p[0] != __p[1])
          {
            if ((v28 & 4) != 0)
            {
              v146[0] = *(unsigned char *)(v57 + 80);
              *(void *)&v146[24] = *(void *)(v57 + 64);
              *(_OWORD *)&v146[8] = *(_OWORD *)(v57 + 48);
              double v93 = (void *)(v57 + 72);
              long long v94 = &v146[32];
            }
            else
            {
              v145.i64[0] = *(void *)(v57 + 32);
              double v93 = (void *)(v57 + 40);
              long long v94 = &v145.i8[8];
            }
            *(void *)long long v94 = *v93;
            uint64_t v100 = v148.i64[1];
            if (v148.i64[1] >= (unint64_t)v149)
            {
              unint64_t v105 = 0xCCCCCCCCCCCCCCCDLL * ((v148.i64[1] - v148.i64[0]) >> 4);
              unint64_t v106 = v105 + 1;
              if (v105 + 1 > 0x333333333333333) {
                sub_18DEE1FC8();
              }
              if (0x999999999999999ALL * ((uint64_t)&v149[-v148.i64[0]] >> 4) > v106) {
                unint64_t v106 = 0x999999999999999ALL * ((uint64_t)&v149[-v148.i64[0]] >> 4);
              }
              if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v149[-v148.i64[0]] >> 4) >= 0x199999999999999) {
                unint64_t v107 = 0x333333333333333;
              }
              else {
                unint64_t v107 = v106;
              }
              v154 = &v149;
              if (v107) {
                long long v108 = (char *)sub_18E0DDD90((uint64_t)&v149, v107);
              }
              else {
                long long v108 = 0;
              }
              uint64_t v109 = &v108[80 * v105];
              v151 = v108;
              v152.i64[0] = (uint64_t)v109;
              v153 = &v108[80 * v107];
              *(void *)uint64_t v109 = 0;
              *((void *)v109 + 1) = 0;
              *((void *)v109 + 2) = 0;
              *(_OWORD *)uint64_t v109 = *(_OWORD *)__p;
              *((void **)v109 + 2) = __p[2];
              memset(__p, 0, sizeof(__p));
              long long v110 = *(_OWORD *)&v146[16];
              uint64_t v111 = *(void *)&v146[32];
              int64x2_t v112 = v145;
              *(_OWORD *)(v109 + 40) = *(_OWORD *)v146;
              *(int64x2_t *)(v109 + 24) = v112;
              *((void *)v109 + 9) = v111;
              *(_OWORD *)(v109 + 56) = v110;
              long long v104 = v109 + 80;
              v152.i64[1] = (uint64_t)(v109 + 80);
              int64x2_t v113 = v148;
              uint64_t v114 = v152.i64[0];
              if (v148.i64[1] == v148.i64[0])
              {
                int64x2_t v121 = vdupq_n_s64(v148.u64[1]);
              }
              else
              {
                uint64_t v115 = 0;
                do
                {
                  uint64_t v116 = v114 + v115;
                  uint64_t v117 = v113.i64[1] + v115;
                  *(void *)(v116 - 80) = 0;
                  *(void *)(v116 - 72) = 0;
                  *(void *)(v116 - 64) = 0;
                  *(_OWORD *)(v116 - 80) = *(_OWORD *)(v113.i64[1] + v115 - 80);
                  *(void *)(v116 - 64) = *(void *)(v113.i64[1] + v115 - 64);
                  *(void *)(v117 - 80) = 0;
                  *(void *)(v117 - 72) = 0;
                  *(void *)(v117 - 64) = 0;
                  long long v118 = *(_OWORD *)(v113.i64[1] + v115 - 56);
                  long long v119 = *(_OWORD *)(v113.i64[1] + v115 - 40);
                  long long v120 = *(_OWORD *)(v113.i64[1] + v115 - 24);
                  *(void *)(v116 - 8) = *(void *)(v113.i64[1] + v115 - 8);
                  *(_OWORD *)(v116 - 24) = v120;
                  *(_OWORD *)(v116 - 40) = v119;
                  *(_OWORD *)(v116 - 56) = v118;
                  v115 -= 80;
                }
                while (v113.i64[1] + v115 != v113.i64[0]);
                int64x2_t v121 = v148;
                long long v104 = (char *)v152.i64[1];
                v114 += v115;
              }
              v148.i64[0] = v114;
              v148.i64[1] = (uint64_t)v104;
              int64x2_t v152 = v121;
              v122 = v149;
              v149 = v153;
              v153 = v122;
              v151 = (char *)v121.i64[0];
              sub_18E0F5C44((uint64_t)&v151);
              LogLevel = (cnprint::CNPrinter *)__p[0];
            }
            else
            {
              LogLevel = 0;
              *(void *)v148.i64[1] = 0;
              *(void *)(v100 + 8) = 0;
              *(void *)(v100 + 16) = 0;
              *(_OWORD *)uint64_t v100 = *(_OWORD *)__p;
              *(void **)(v100 + 16) = __p[2];
              long long v102 = *(_OWORD *)v146;
              long long v101 = *(_OWORD *)&v146[16];
              int64x2_t v103 = v145;
              *(void *)(v100 + 72) = *(void *)&v146[32];
              memset(__p, 0, sizeof(__p));
              *(int64x2_t *)(v100 + 24) = v103;
              *(_OWORD *)(v100 + 56) = v101;
              *(_OWORD *)(v100 + 40) = v102;
              long long v104 = (char *)(v100 + 80);
            }
            v148.i64[1] = (uint64_t)v104;
          }
          if (LogLevel)
          {
            __p[1] = LogLevel;
            operator delete(LogLevel);
          }
          goto LABEL_122;
        }
LABEL_123:
        a2 = v142;
        if (v148.i64[0] != v148.i64[1])
        {
          unint64_t v123 = *((void *)v142 + 14);
          unint64_t v124 = *((void *)v142 + 15);
          if (v123 >= v124)
          {
            unint64_t v131 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v123 - *v141) >> 3);
            unint64_t v132 = v131 + 1;
            if (v131 + 1 > 0x666666666666666) {
              sub_18DEE1FC8();
            }
            unint64_t v133 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v124 - *v141) >> 3);
            if (2 * v133 > v132) {
              unint64_t v132 = 2 * v133;
            }
            if (v133 >= 0x333333333333333) {
              unint64_t v134 = 0x666666666666666;
            }
            else {
              unint64_t v134 = v132;
            }
            v145.i64[1] = (uint64_t)v140;
            v135 = (char *)sub_18E01AF14((uint64_t)v140, v134);
            v136 = (int64x2_t *)&v135[40 * v131];
            __p[0] = v135;
            __p[1] = v136;
            v145.i64[0] = (uint64_t)&v135[40 * v137];
            int64x2_t *v136 = v147;
            v136[1].i64[1] = 0;
            v136[2].i64[0] = 0;
            v136[1].i64[0] = 0;
            v136[1] = v148;
            v136[2].i64[0] = (uint64_t)v149;
            int64x2_t v148 = 0uLL;
            v149 = 0;
            __p[2] = &v136[2].u64[1];
            sub_18E0F5B4C(v141, __p);
            unint64_t v125 = *((void *)v142 + 14);
            sub_18E0F5BE0((uint64_t)__p);
          }
          else
          {
            *(int64x2_t *)unint64_t v123 = v147;
            *(void *)(v123 + 24) = 0;
            *(void *)(v123 + 32) = 0;
            *(void *)(v123 + 16) = 0;
            *(int64x2_t *)(v123 + 16) = v148;
            *(void *)(v123 + 32) = v149;
            int64x2_t v148 = 0uLL;
            v149 = 0;
            unint64_t v125 = v123 + 40;
          }
          *((void *)v142 + 14) = v125;
        }
      }
      else if (cnprint::CNPrinter::GetLogLevel(LogLevel) <= 1)
      {
        LOWORD(__p[0]) = 12;
        LOBYTE(v151) = 1;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, (unsigned __int8 *)&v151, "ConvertProtobufToGEOMapBuildingDataEvent, no building hash is given, building is skipped.", v126, v127, v128, v129, v130, v139);
      }
      __p[0] = &v148;
      sub_18E0DDE40((void ***)__p);
LABEL_137:
      ++v25;
    }
    while (v25 < *((int *)this + 6));
  }
  if (*((int *)this + 12) < 1) {
    return 1;
  }
  uint64_t v138 = 0;
  do
  {
    __p[0] = *(void **)(*((void *)this + 5) + 8 * v138);
    sub_18E0F65A4((uint64_t **)a2 + 18, (unint64_t *)__p, (uint64_t *)__p);
    ++v138;
    uint64_t result = 1;
  }
  while (v138 < *((int *)this + 12));
  return result;
}

void sub_18E0E9D48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  *(void *)(v22 - 152) = a14;
  sub_18E0DDE40((void ***)(v22 - 152));
  _Unwind_Resume(a1);
}

void sub_18E0E9DB0(uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (v2 != *a1)
  {
    do
    {
      uint64_t v4 = v2 - 40;
      int64_t v5 = (void **)(v2 - 24);
      sub_18E0DDE40(&v5);
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

uint64_t sub_18E0E9E10(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (0xCCCCCCCCCCCCCCCDLL * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0x666666666666667) {
      sub_18DEE1FC8();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_18E01AF14(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 40 * v6;
    sub_18E0F5B4C(a1, v7);
    return sub_18E0F5BE0((uint64_t)v7);
  }
  return result;
}

uint64_t raven::ConvertProtobufToGnssAvailabilityEvent(raven *this, const CoreNavigation::CLP::LogEntry::PrivateData::GnssAvailabilityPrediction *a2, raven::GnssAvailabilityEvent *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9, int8x16_t a10)
{
  if ((*((unsigned char *)this + 36) & 1) == 0) {
    return 0;
  }
  uint64_t v13 = *((void *)this + 1);
  if (!v13)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(0);
    uint64_t v13 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::GnssAvailabilityPrediction::default_instance_ + 8);
  }
  int v14 = raven::ConvertProtobufToRavenTime(v13, (uint64_t)a2 + 8, 0, a4, a5, a6, a7, a8, a9, a10);
  uint64_t result = 0;
  if (v14)
  {
    *((void *)a2 + 13) = *((void *)this + 2);
    if ((*((_DWORD *)this + 7) - 1) >= 3)
    {
      uint64_t result = cnprint::CNPrinter::GetLogLevel(0);
      if (result <= 1)
      {
        __int16 v36 = 12;
        unsigned __int8 v35 = 1;
        uint64_t v16 = (*(uint64_t (**)(const CoreNavigation::CLP::LogEntry::PrivateData::GnssAvailabilityPrediction *))(*(void *)a2 + 16))(a2);
        double v31 = v17 + (double)v16;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v36, &v35, "t,%.3lf,WARNING: Gnss Availability Prediction, unknown measurement source", v18, v19, v20, v21, v22, SLOBYTE(v31));
      }
      char v15 = 0;
    }
    else
    {
      char v15 = *((unsigned char *)this + 28);
    }
    *((unsigned char *)a2 + 113) = v15;
    unsigned int v23 = *((_DWORD *)this + 6) - 1;
    if (v23 >= 3)
    {
      if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)result) <= 1)
      {
        __int16 v34 = 12;
        unsigned __int8 v33 = 1;
        uint64_t v24 = (*(uint64_t (**)(const CoreNavigation::CLP::LogEntry::PrivateData::GnssAvailabilityPrediction *))(*(void *)a2 + 16))(a2);
        double v32 = v25 + (double)v24;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v34, &v33, "t,%.3lf,WARNING: Gnss Availability Prediction, unknown state", v26, v27, v28, v29, v30, SLOBYTE(v32));
      }
      LOBYTE(v23) = 0;
    }
    *((unsigned char *)a2 + 112) = v23;
    return 1;
  }
  return result;
}

double raven::ConvertProtobufToBarometerEvent(raven *this, const CoreNavigation::CLP::LogEntry::PrivateData::BaroSample *a2, raven::BarometerEvent *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9, int8x16_t a10)
{
  if (*((unsigned char *)this + 28))
  {
    uint64_t v12 = *((void *)this + 1);
    if (!v12)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(0);
      uint64_t v12 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::BaroSample::default_instance_ + 8);
    }
    if (raven::ConvertProtobufToRavenTime(v12, (uint64_t)a2 + 8, 0, a4, a5, a6, a7, a8, a9, a10))
    {
      float v13 = *((float *)this + 5);
      *((double *)a2 + 13) = *((float *)this + 4);
      *((unsigned char *)a2 + 112) = 1;
      *(double *)a9.i64 = v13;
      *((double *)a2 + 15) = v13;
      *((_WORD *)a2 + 64) = 257;
    }
  }
  return *(double *)a9.i64;
}

uint64_t raven::ConvertProtobufToBodyMetricsEvent(raven *this, const CoreNavigation::CLP::LogEntry::PrivateData::Natalimetry *a2, raven::BodyMetricsEvent *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9, int8x16_t a10)
{
  if ((*((unsigned char *)this + 32) & 1) == 0) {
    return 0;
  }
  uint64_t v13 = *((void *)this + 1);
  if (!v13)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(0);
    uint64_t v13 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::Natalimetry::default_instance_ + 8);
  }
  int v14 = raven::ConvertProtobufToRavenTime(v13, (uint64_t)a2 + 8, 0, a4, a5, a6, a7, a8, a9, a10);
  uint64_t result = 0;
  if (v14)
  {
    if ((*((unsigned char *)this + 32) & 4) == 0) {
      return 0;
    }
    uint64_t v15 = *((void *)this + 2);
    if (!v15)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(0);
      uint64_t v15 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::Natalimetry::default_instance_ + 16);
    }
    unsigned int v16 = *(_DWORD *)(v15 + 44);
    if (v16 <= 7) {
      *((unsigned char *)a2 + 104) = v16;
    }
    return 1;
  }
  return result;
}

uint64_t raven::ConvertProtobufToDeviceMotionAccelerationEvent(raven *this, const CoreNavigation::CLP::LogEntry::PrivateData::DeviceMotionSample *a2, raven::AccelerometerEvent *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9, int8x16_t a10)
{
  if ((*((unsigned char *)this + 56) & 1) == 0) {
    return 0;
  }
  uint64_t v13 = *((void *)this + 1);
  if (!v13)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(0);
    uint64_t v13 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::DeviceMotionSample::default_instance_ + 8);
  }
  int v14 = raven::ConvertProtobufToRavenTime(v13, (uint64_t)a2 + 8, 0, a4, a5, a6, a7, a8, a9, a10);
  uint64_t result = 0;
  if (v14)
  {
    uint64_t v15 = *((void *)this + 2);
    if (!v15)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(0);
      uint64_t v15 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::DeviceMotionSample::default_instance_ + 16);
    }
    if ((*(unsigned char *)(v15 + 56) & 1) == 0) {
      return 0;
    }
    uint64_t v16 = *((void *)this + 2);
    if (!v16)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)result);
      uint64_t v16 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::DeviceMotionSample::default_instance_ + 16);
    }
    if ((*(unsigned char *)(v16 + 56) & 2) == 0) {
      return 0;
    }
    uint64_t v17 = *((void *)this + 2);
    if (!v17)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)result);
      uint64_t v17 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::DeviceMotionSample::default_instance_ + 16);
    }
    uint64_t v18 = *(void *)(v17 + 8);
    if (!v18)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)result);
      uint64_t v18 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::MotionTypeDeviceMotion::default_instance_ + 8);
    }
    double v19 = *(double *)(v18 + 16);
    uint64_t v20 = *((void *)this + 2);
    if (!v20)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)result);
      uint64_t v20 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::DeviceMotionSample::default_instance_ + 16);
    }
    uint64_t v21 = *(void *)(v20 + 8);
    if (!v21)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)result);
      uint64_t v21 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::MotionTypeDeviceMotion::default_instance_ + 8);
    }
    double v22 = *(double *)(v21 + 24);
    uint64_t v23 = *((void *)this + 2);
    if (!v23)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)result);
      uint64_t v23 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::DeviceMotionSample::default_instance_ + 16);
    }
    uint64_t v24 = *(void *)(v23 + 8);
    if (!v24)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)result);
      uint64_t v24 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::MotionTypeDeviceMotion::default_instance_ + 8);
    }
    double v25 = *(double *)(v24 + 32);
    uint64_t v26 = *((void *)this + 2);
    if (!v26)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)result);
      uint64_t v26 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::DeviceMotionSample::default_instance_ + 16);
    }
    uint64_t v27 = *(void *)(v26 + 8);
    if (!v27)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)result);
      uint64_t v27 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::MotionTypeDeviceMotion::default_instance_ + 8);
    }
    double v28 = *(double *)(v27 + 8);
    double v29 = v25 + v25;
    uint64_t v30 = *((void *)this + 2);
    if (!v30)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)result);
      uint64_t v30 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::DeviceMotionSample::default_instance_ + 16);
    }
    double v31 = v19 + v19;
    uint64_t v32 = *(void *)(v30 + 16);
    if (!v32)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)result);
      uint64_t v32 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::MotionTypeDeviceMotion::default_instance_ + 16);
    }
    *((double *)a2 + 13) = (v19 * v29 - v28 * (v22 + v22) - *(float *)(v32 + 8)) * 9.80665;
    uint64_t v33 = *((void *)this + 2);
    if (!v33)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)result);
      uint64_t v33 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::DeviceMotionSample::default_instance_ + 16);
    }
    double v34 = v31 * v28 + v22 * v29;
    uint64_t v35 = *(void *)(v33 + 16);
    if (!v35)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)result);
      uint64_t v35 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::MotionTypeDeviceMotion::default_instance_ + 16);
    }
    double v36 = 1.0 - v19 * v31;
    *((double *)a2 + 14) = (v34 - *(float *)(v35 + 12)) * 9.80665;
    uint64_t v37 = *((void *)this + 2);
    if (!v37)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)result);
      uint64_t v37 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::DeviceMotionSample::default_instance_ + 16);
    }
    double v38 = v36 - v22 * (v22 + v22);
    uint64_t v39 = *(void *)(v37 + 16);
    if (!v39)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)result);
      uint64_t v39 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::MotionTypeDeviceMotion::default_instance_ + 16);
    }
    *((double *)a2 + 15) = (v38 - *(float *)(v39 + 16)) * 9.80665;
    return 1;
  }
  return result;
}

uint64_t raven::ConvertProtobufToDeviceMotionAttitudeEvent(uint64_t a1, uint64_t a2, signed int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9, int8x16_t a10)
{
  if ((*(unsigned char *)(a1 + 56) & 1) == 0) {
    return 0;
  }
  uint64_t v14 = *(void *)(a1 + 8);
  if (!v14)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(0);
    uint64_t v14 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::DeviceMotionSample::default_instance_ + 8);
  }
  int v15 = raven::ConvertProtobufToRavenTime(v14, a2 + 8, 0, a4, a5, a6, a7, a8, a9, a10);
  uint64_t result = 0;
  if (v15)
  {
    uint64_t v16 = *(void *)(a1 + 16);
    if (!v16)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(0);
      uint64_t v16 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::DeviceMotionSample::default_instance_ + 16);
    }
    if (!*(unsigned char *)(v16 + 46)) {
      return 0;
    }
    uint64_t v17 = *(void *)(a1 + 16);
    if (!v17)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)result);
      uint64_t v17 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::DeviceMotionSample::default_instance_ + 16);
    }
    if ((*(unsigned char *)(v17 + 56) & 1) == 0 || (*(unsigned char *)(a1 + 56) & 0x40) == 0) {
      return 0;
    }
    uint64_t v18 = *(void *)(a1 + 16);
    if (!v18)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)result);
      uint64_t v18 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::DeviceMotionSample::default_instance_ + 16);
    }
    if ((*(unsigned char *)(v18 + 56) & 0x10) == 0) {
      return 0;
    }
    uint64_t v19 = *(void *)(a1 + 16);
    if (!v19)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)result);
      uint64_t v19 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::DeviceMotionSample::default_instance_ + 16);
    }
    unsigned int v20 = *(_DWORD *)(v19 + 40);
    if (v20 >= 6)
    {
      uint64_t result = cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)result);
      if (result <= 1)
      {
        __int16 v63 = 12;
        unsigned __int8 v62 = 1;
        uint64_t v21 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
        double v58 = v22 + (double)v21;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v63, &v62, "t,%.3lf,WARNING: Device Motion, unknown mag calibration level", v23, v24, v25, v26, v27, SLOBYTE(v58));
      }
      unsigned int v20 = -1;
    }
    if ((int)v20 < a3) {
      return 0;
    }
    uint64_t v28 = *(void *)(a1 + 16);
    if (!v28)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)result);
      uint64_t v28 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::DeviceMotionSample::default_instance_ + 16);
    }
    uint64_t v29 = *(void *)(v28 + 8);
    if (!v29)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)result);
      uint64_t v29 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::MotionTypeDeviceMotion::default_instance_ + 8);
    }
    double v30 = *(double *)(v29 + 16);
    uint64_t v31 = *(void *)(a1 + 16);
    if (!v31)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)result);
      uint64_t v31 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::DeviceMotionSample::default_instance_ + 16);
    }
    uint64_t v32 = *(void *)(v31 + 8);
    if (!v32)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)result);
      uint64_t v32 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::MotionTypeDeviceMotion::default_instance_ + 8);
    }
    double v33 = *(double *)(v32 + 24);
    uint64_t v34 = *(void *)(a1 + 16);
    if (!v34)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)result);
      uint64_t v34 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::DeviceMotionSample::default_instance_ + 16);
    }
    uint64_t v35 = *(void *)(v34 + 8);
    if (!v35)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)result);
      uint64_t v35 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::MotionTypeDeviceMotion::default_instance_ + 8);
    }
    double v36 = *(double *)(v35 + 32);
    uint64_t v37 = *(void *)(a1 + 16);
    if (!v37)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)result);
      uint64_t v37 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::DeviceMotionSample::default_instance_ + 16);
    }
    uint64_t v38 = *(void *)(v37 + 8);
    if (!v38)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)result);
      uint64_t v38 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::MotionTypeDeviceMotion::default_instance_ + 8);
    }
    double v39 = *(double *)(v38 + 8);
    double v40 = sqrt(v33 * v33 + v30 * v30 + v36 * v36 + v39 * v39);
    if (fabs(v40) >= 2.22044605e-16)
    {
      double v42 = v30 / v40;
      double v43 = v33 / v40;
      double v44 = v36 / v40;
      double v41 = v39 / v40;
    }
    else
    {
      double v41 = 1.0;
      double v42 = 0.0;
      double v43 = 0.0;
      double v44 = 0.0;
    }
    *(double *)(a2 + 104) = v42;
    *(double *)(a2 + 112) = v43;
    *(double *)(a2 + 120) = v44;
    *(double *)(a2 + 128) = v41;
    BOOL v45 = *(float *)(a1 + 44) < 20.0;
    uint64_t v46 = *(void *)(a1 + 16);
    if (!v46)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)result);
      uint64_t v46 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::DeviceMotionSample::default_instance_ + 16);
    }
    double v47 = dbl_18E215770[v45];
    uint64_t v48 = *(int *)(v46 + 40);
    if (v48 >= 6)
    {
      if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)result) <= 1)
      {
        __int16 v61 = 12;
        unsigned __int8 v60 = 1;
        uint64_t v50 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
        double v59 = v51 + (double)v50;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v61, &v60, "t,%.3lf,WARNING: Device Motion, unknown mag calibration level", v52, v53, v54, v55, v56, SLOBYTE(v59));
      }
      double v49 = 100.0;
    }
    else
    {
      double v49 = dbl_18E215800[v48];
    }
    double v57 = v47 + v49;
    *(double *)(a2 + 136) = v57;
    *(void *)(a2 + 152) = 0;
    *(void *)(a2 + 160) = 0;
    *(void *)(a2 + 144) = 0;
    *(double *)(a2 + 168) = v57;
    *(void *)(a2 + 176) = 0;
    *(void *)(a2 + 184) = 0;
    *(double *)(a2 + 192) = v57;
    *(void *)(a2 + 200) = 0;
    *(double *)(a2 + 208) = v57;
    *(_WORD *)(a2 + 216) = 513;
    return 1;
  }
  return result;
}

uint64_t raven::ConvertProtobufToDeviceMotionRotationRateEvent(raven *this, const CoreNavigation::CLP::LogEntry::PrivateData::DeviceMotionSample *a2, raven::RateGyroEvent *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9, int8x16_t a10)
{
  if ((*((unsigned char *)this + 56) & 1) == 0) {
    return 0;
  }
  uint64_t v13 = *((void *)this + 1);
  if (!v13)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(0);
    uint64_t v13 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::DeviceMotionSample::default_instance_ + 8);
  }
  int v14 = raven::ConvertProtobufToRavenTime(v13, (uint64_t)a2 + 8, 0, a4, a5, a6, a7, a8, a9, a10);
  uint64_t result = 0;
  if (v14)
  {
    uint64_t v15 = *((void *)this + 2);
    if (!v15)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(0);
      uint64_t v15 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::DeviceMotionSample::default_instance_ + 16);
    }
    if ((*(unsigned char *)(v15 + 56) & 4) == 0) {
      return 0;
    }
    uint64_t v16 = *((void *)this + 2);
    if (!v16)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)result);
      uint64_t v16 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::DeviceMotionSample::default_instance_ + 16);
    }
    uint64_t v17 = *(void *)(v16 + 24);
    if (!v17)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)result);
      uint64_t v17 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::MotionTypeDeviceMotion::default_instance_ + 24);
    }
    *((double *)a2 + 13) = *(float *)(v17 + 8);
    uint64_t v18 = *((void *)this + 2);
    if (!v18)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)result);
      uint64_t v18 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::DeviceMotionSample::default_instance_ + 16);
    }
    uint64_t v19 = *(void *)(v18 + 24);
    if (!v19)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)result);
      uint64_t v19 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::MotionTypeDeviceMotion::default_instance_ + 24);
    }
    *((double *)a2 + 14) = *(float *)(v19 + 12);
    uint64_t v20 = *((void *)this + 2);
    if (!v20)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)result);
      uint64_t v20 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::DeviceMotionSample::default_instance_ + 16);
    }
    uint64_t v21 = *(void *)(v20 + 24);
    if (!v21)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)result);
      uint64_t v21 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::MotionTypeDeviceMotion::default_instance_ + 24);
    }
    *((double *)a2 + 15) = *(float *)(v21 + 16);
    return 1;
  }
  return result;
}

uint64_t raven::ConvertProtobufToGnssId(uint64_t a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a1 + 24);
  if (v3)
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if ((v4 - 1) > 0x3F || ((1 << (v4 - 1)) & 0x800000008000808BLL) == 0) {
      int v4 = 0;
    }
    *(_DWORD *)a2 = v4;
  }
  if ((v3 & 2) == 0) {
    return 1;
  }
  uint64_t v6 = *(void *)(a1 + 8);
  if (!v6)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)a1);
    uint64_t v6 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::SvId::default_instance_ + 8);
  }
  int v7 = *(_DWORD *)(v6 + 44);
  if (v7)
  {
    unsigned int v9 = *(_DWORD *)(v6 + 16);
    goto LABEL_24;
  }
  if ((v7 & 0x10) != 0)
  {
    unsigned int v9 = *(_DWORD *)(v6 + 28);
    goto LABEL_24;
  }
  if ((v7 & 0x20) != 0)
  {
    unsigned int v9 = *(_DWORD *)(v6 + 32);
    goto LABEL_24;
  }
  if ((v7 & 2) != 0)
  {
    uint64_t v10 = *(void *)(v6 + 8);
    if (!v10)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)a1);
      uint64_t v10 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::ConstellationId::default_instance_ + 8);
    }
    int v11 = *(_DWORD *)(v10 + 24);
    if (v11)
    {
      int v12 = *(_DWORD *)(v10 + 16);
      if (v12 != (char)v12) {
        return 0;
      }
      *(unsigned char *)(a2 + 5) = v12;
      int v11 = *(_DWORD *)(v10 + 24);
    }
    if ((v11 & 2) == 0) {
      return 1;
    }
    uint64_t v13 = *(void *)(v10 + 8);
    if (!v13)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)a1);
      uint64_t v13 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::GlonassId::default_instance_ + 8);
    }
    if ((*(unsigned char *)(v13 + 20) & 1) == 0) {
      return 1;
    }
    uint64_t v14 = *(void *)(v10 + 8);
    if (!v14)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)a1);
      uint64_t v14 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::GlonassId::default_instance_ + 8);
    }
    unsigned int v9 = *(_DWORD *)(v14 + 8);
LABEL_24:
    if (v9 <= 0xFF)
    {
LABEL_26:
      *(unsigned char *)(a2 + 4) = v9;
      return 1;
    }
    return 0;
  }
  if ((v7 & 4) != 0)
  {
    unsigned int v9 = *(_DWORD *)(v6 + 20);
    goto LABEL_24;
  }
  if ((v7 & 8) != 0)
  {
    unsigned int v9 = *(_DWORD *)(v6 + 24);
    goto LABEL_24;
  }
  uint64_t result = 0;
  if ((v7 & 0x40) != 0)
  {
    unsigned int v9 = *(_DWORD *)(v6 + 36);
    if (v9 <= 0xFF) {
      goto LABEL_26;
    }
  }
  return result;
}

uint64_t raven::ConvertProtobufToGnssBand(_DWORD *a1, unsigned char *a2)
{
  int v2 = *a1 - 2;
  if (v2 > 0xA) {
    char v3 = 0;
  }
  else {
    char v3 = byte_18E215830[v2];
  }
  *a2 = v3;
  return 1;
}

uint64_t raven::ConvertProtobufToGnssMeasDataEvent(raven *this, const CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents *a2, raven::GnssMeasurementDataEvent *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9, int8x16_t a10)
{
  int v12 = *((_DWORD *)this + 33);
  a9.i64[0] = *((void *)this + 10);
  a10.i64[0] = 0;
  if ((v12 & 0x20) == 0) {
    *(double *)a9.i64 = 0.0;
  }
  if ((v12 & 0x40) != 0 && *(double *)a9.i64 > 0.0 && (double v15 = *((double *)this + 11), v15 > 0.0))
  {
    long long v258 = 0uLL;
    uint64_t v16 = (CoreNavigation::CLP::LogEntry::PrivateData *)CNTimeSpan::SetTimeSpan((uint64_t *)&v258, 0, a9, a10);
    *(_OWORD *)((char *)a2 + 8) = v258;
    *((double *)a2 + 13) = v15;
  }
  else
  {
    if ((v12 & 1) == 0) {
      goto LABEL_8;
    }
    uint64_t v13 = *((void *)this + 1);
    if (!v13)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);
      uint64_t v13 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents::default_instance_
                      + 8);
    }
    if ((*(unsigned char *)(v13 + 36) & 4) == 0)
    {
LABEL_8:
      LOWORD(v258) = 12;
      LOBYTE(v279) = 3;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v258, (unsigned __int8 *)&v279, "MRCC mach continuous time not present", a4, a5, a6, a7, a8, v248);
      return 0;
    }
    uint64_t v22 = *((void *)this + 1);
    if (!v22)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);
      uint64_t v22 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents::default_instance_
                      + 8);
    }
    a9.i64[0] = *(void *)(v22 + 24);
    long long v258 = 0uLL;
    uint64_t v16 = (CoreNavigation::CLP::LogEntry::PrivateData *)CNTimeSpan::SetTimeSpan((uint64_t *)&v258, 0, a9, a10);
    *(_OWORD *)((char *)a2 + 8) = v258;
    *((void *)a2 + 13) = 0;
  }
  v256 = this;
  if ((*((unsigned char *)this + 132) & 2) != 0)
  {
    uint64_t v23 = *((void *)this + 2);
    if (!v23)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(v16);
      uint64_t v23 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents::default_instance_
                      + 16);
    }
    if ((*(unsigned char *)(v23 + 44) & 1) == 0) {
      goto LABEL_48;
    }
    uint64_t v24 = *(void *)(v23 + 8);
    if (!v24)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(v16);
      uint64_t v24 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReport::default_instance_ + 8);
    }
    int v25 = *(_DWORD *)(v24 + 44);
    if (v25) {
      *((void *)a2 + 14) = *(void *)(v24 + 8);
    }
    if ((v25 & 2) == 0) {
      goto LABEL_32;
    }
    uint64_t v26 = *(_DWORD **)(v24 + 16);
    if (!v26)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(v16);
      uint64_t v26 = *(_DWORD **)(CoreNavigation::CLP::LogEntry::PrivateData::Clock::default_instance_ + 16);
    }
    int v27 = v26[8];
    if ((v27 & 4) != 0)
    {
      *((_DWORD *)a2 + 32) = v26[4];
      if ((v27 & 2) == 0)
      {
LABEL_29:
        if ((v27 & 8) == 0) {
          goto LABEL_30;
        }
LABEL_511:
        *((_DWORD *)a2 + 33) = v26[5];
        if (v27) {
LABEL_31:
        }
          *((_DWORD *)a2 + 30) = v26[2];
LABEL_32:
        if ((*(unsigned char *)(v24 + 44) & 4) != 0)
        {
          uint64_t v28 = *(void *)(v24 + 24);
          if (!v28)
          {
            CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(v16);
            uint64_t v28 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::Clock::default_instance_ + 24);
          }
          int v29 = *(_DWORD *)(v28 + 52);
          if (v29) {
            *((void *)a2 + 17) = *(void *)(v28 + 8);
          }
          if ((v29 & 2) != 0) {
            *((void *)a2 + 18) = *(void *)(v28 + 16);
          }
        }
        if ((*(unsigned char *)(v24 + 44) & 8) == 0) {
          goto LABEL_48;
        }
        uint64_t v30 = *(void *)(v24 + 32);
        if (!v30)
        {
          CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(v16);
          uint64_t v30 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::Clock::default_instance_ + 32);
        }
        int v31 = *(_DWORD *)(v30 + 40);
        if ((v31 & 8) != 0)
        {
          *((void *)a2 + 21) = *(void *)(v30 + 24);
          if ((v31 & 1) == 0)
          {
LABEL_44:
            if ((v31 & 0x10) == 0) {
              goto LABEL_45;
            }
            goto LABEL_515;
          }
        }
        else if ((v31 & 1) == 0)
        {
          goto LABEL_44;
        }
        *((void *)a2 + 19) = *(void *)(v30 + 8);
        if ((v31 & 0x10) == 0)
        {
LABEL_45:
          if ((v31 & 4) == 0) {
            goto LABEL_46;
          }
LABEL_516:
          *((_DWORD *)a2 + 41) = *(_DWORD *)(v30 + 20);
          if ((v31 & 2) != 0) {
LABEL_47:
          }
            *((_DWORD *)a2 + 40) = *(_DWORD *)(v30 + 16);
LABEL_48:
          uint64_t v32 = *(int *)(v23 + 24);
          if (v32)
          {
            double v33 = *(uint64_t **)(v23 + 16);
            v251 = (void *)((char *)a2 + 184);
            int64x2_t v257 = vdupq_n_s64(0x7FF8000000000000uLL);
            v254 = &v33[v32];
            while (1)
            {
              uint64_t v34 = *v33;
              LODWORD(v258) = 0;
              WORD2(v258) = 32512;
              DWORD2(v258) = 0;
              WORD6(v258) = 0;
              uint64_t v259 = -1;
              long long __p = (void *)-1;
              unint64_t v261 = -1;
              unint64_t v262 = 0x7FF8000000000000;
              float v263 = NAN;
              char v264 = 0;
              int64x2_t v265 = v257;
              LOBYTE(v266[0]) = 0;
              *(int64x2_t *)((char *)v266 + 8) = v257;
              BYTE8(v266[1]) = 0;
              int64x2_t v267 = v257;
              LOWORD(v268) = 1;
              BYTE8(v268) = 0;
              LOBYTE(v269) = 0;
              BYTE8(v269) = 0;
              v270[0] = 0;
              *(int64x2_t *)&v270[8] = v257;
              v271[0] = 1;
              *(void *)&v271[8] = 0;
              *(_DWORD *)&v271[16] = 2143289344;
              *(_WORD *)&v271[20] = 0;
              int v35 = *(_DWORD *)(v34 + 112);
              if (v35)
              {
                uint64_t v36 = *(void *)(v34 + 8);
                if (!v36)
                {
                  CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(0);
                  uint64_t v36 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::Measurement::default_instance_ + 8);
                }
                uint64_t v16 = (CoreNavigation::CLP::LogEntry::PrivateData *)raven::ConvertProtobufToGnssId(v36, (uint64_t)&v258);
                if (!v16)
                {
LABEL_507:
                  uint64_t v247 = *(void *)&v271[8];
                  *(void *)&v271[8] = 0;
                  if (v247) {
                    MEMORY[0x192FA6240](v247, 0x1000C4041240993);
                  }
                  return 0;
                }
                int v35 = *(_DWORD *)(v34 + 112);
              }
              if ((v35 & 2) != 0)
              {
                uint64_t v38 = *(void *)(v34 + 16);
                if (!v38)
                {
                  CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(v16);
                  uint64_t v38 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::Measurement::default_instance_ + 16);
                }
                int v39 = *(_DWORD *)(v38 + 96);
                if (v39)
                {
                  unsigned int v40 = *(_DWORD *)(v38 + 88) - 2;
                  if (v40 > 0xA) {
                    char v41 = 0;
                  }
                  else {
                    char v41 = byte_18E215830[v40];
                  }
                  BYTE8(v258) = v41;
                }
                if ((v39 & 2) != 0)
                {
                  uint64_t v74 = *(void *)(v38 + 8);
                  if (!v74)
                  {
                    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(v16);
                    uint64_t v74 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::SyncState::default_instance_ + 8);
                  }
                  int v75 = *(_DWORD *)(v74 + 16);
                  if ((v75 & 2) != 0)
                  {
                    BYTE10(v258) = *(unsigned char *)(v74 + 9);
                    if ((v75 & 4) != 0) {
                      goto LABEL_174;
                    }
LABEL_170:
                    if ((v75 & 1) == 0) {
                      goto LABEL_171;
                    }
LABEL_175:
                    BYTE9(v258) = *(unsigned char *)(v74 + 8);
                    if ((v75 & 8) == 0) {
                      goto LABEL_56;
                    }
                  }
                  else
                  {
                    if ((v75 & 4) == 0) {
                      goto LABEL_170;
                    }
LABEL_174:
                    BYTE11(v258) = *(unsigned char *)(v74 + 10);
                    if (v75) {
                      goto LABEL_175;
                    }
LABEL_171:
                    if ((v75 & 8) == 0) {
                      goto LABEL_56;
                    }
                  }
                  BYTE12(v258) = *(unsigned char *)(v74 + 11);
                  goto LABEL_56;
                }
                if ((v39 & 4) != 0) {
                  goto LABEL_507;
                }
                if ((v39 & 8) != 0)
                {
                  uint64_t v76 = *(void *)(v38 + 24);
                  if (!v76)
                  {
                    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(v16);
                    uint64_t v76 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::SyncState::default_instance_ + 24);
                  }
                  int v77 = *(_DWORD *)(v76 + 16);
                  if ((v77 & 4) != 0)
                  {
                    BYTE11(v258) = *(unsigned char *)(v76 + 10);
                    if ((v77 & 2) == 0) {
                      goto LABEL_181;
                    }
                  }
                  else if ((v77 & 2) == 0)
                  {
LABEL_181:
                    if ((v77 & 8) == 0) {
                      goto LABEL_194;
                    }
LABEL_193:
                    BYTE12(v258) = *(unsigned char *)(v76 + 11);
                    goto LABEL_194;
                  }
                  BYTE10(v258) = *(unsigned char *)(v76 + 9);
                  if ((v77 & 8) == 0) {
                    goto LABEL_194;
                  }
                  goto LABEL_193;
                }
                if ((v39 & 0x10) != 0)
                {
                  uint64_t v78 = *(void *)(v38 + 32);
                  if (!v78)
                  {
                    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(v16);
                    uint64_t v78 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::SyncState::default_instance_ + 32);
                  }
                  int v79 = *(_DWORD *)(v78 + 20);
                  if (v79)
                  {
                    BYTE9(v258) = *(unsigned char *)(v78 + 8);
                    if ((v79 & 4) != 0) {
                      goto LABEL_206;
                    }
LABEL_187:
                    if ((v79 & 8) == 0) {
                      goto LABEL_188;
                    }
LABEL_207:
                    BYTE12(v258) = *(unsigned char *)(v78 + 11);
                    if ((v79 & 2) != 0) {
                      goto LABEL_208;
                    }
LABEL_189:
                    if ((v79 & 0x10) == 0) {
                      goto LABEL_56;
                    }
                  }
                  else
                  {
                    if ((v79 & 4) == 0) {
                      goto LABEL_187;
                    }
LABEL_206:
                    BYTE11(v258) = *(unsigned char *)(v78 + 10);
                    if ((v79 & 8) != 0) {
                      goto LABEL_207;
                    }
LABEL_188:
                    if ((v79 & 2) == 0) {
                      goto LABEL_189;
                    }
LABEL_208:
                    BYTE10(v258) = *(unsigned char *)(v78 + 9);
                    if ((v79 & 0x10) == 0) {
                      goto LABEL_56;
                    }
                  }
                  BYTE13(v258) = *(unsigned char *)(v78 + 12);
                  goto LABEL_56;
                }
                if ((v39 & 0x20) != 0)
                {
                  if (BYTE8(v258) == 5)
                  {
                    uint64_t v84 = *(void *)(v38 + 40);
                    if (!v84)
                    {
                      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(v16);
                      uint64_t v84 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::SyncState::default_instance_ + 40);
                    }
                    int v85 = *(_DWORD *)(v84 + 16);
                    if (v85)
                    {
                      BYTE9(v258) = *(unsigned char *)(v84 + 8);
                      if ((v85 & 8) == 0) {
                        goto LABEL_221;
                      }
                    }
                    else if ((v85 & 8) == 0)
                    {
LABEL_221:
                      if ((v85 & 4) == 0) {
                        goto LABEL_56;
                      }
                      goto LABEL_235;
                    }
                    BYTE11(v258) = *(unsigned char *)(v84 + 11);
                    if ((v85 & 4) == 0) {
                      goto LABEL_56;
                    }
LABEL_235:
                    char v86 = *(unsigned char *)(v84 + 10);
LABEL_236:
                    BYTE10(v258) = v86;
                    goto LABEL_56;
                  }
                  if (BYTE8(v258) != 4) {
                    goto LABEL_507;
                  }
                  uint64_t v80 = *(void *)(v38 + 40);
                  if (!v80)
                  {
                    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(v16);
                    uint64_t v80 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::SyncState::default_instance_ + 40);
                  }
                  int v81 = *(_DWORD *)(v80 + 16);
                  if ((v81 & 2) != 0)
                  {
                    BYTE10(v258) = *(unsigned char *)(v80 + 9);
                    if (v81) {
                      goto LABEL_238;
                    }
LABEL_202:
                    if ((v81 & 8) == 0) {
                      goto LABEL_203;
                    }
LABEL_239:
                    BYTE12(v258) = *(unsigned char *)(v80 + 11);
                    if ((v81 & 4) == 0) {
                      goto LABEL_56;
                    }
                  }
                  else
                  {
                    if ((v81 & 1) == 0) {
                      goto LABEL_202;
                    }
LABEL_238:
                    BYTE9(v258) = *(unsigned char *)(v80 + 8);
                    if ((v81 & 8) != 0) {
                      goto LABEL_239;
                    }
LABEL_203:
                    if ((v81 & 4) == 0) {
                      goto LABEL_56;
                    }
                  }
                  BYTE11(v258) = *(unsigned char *)(v80 + 10);
                  goto LABEL_56;
                }
                if ((v39 & 0x40) != 0)
                {
                  uint64_t v82 = *(void *)(v38 + 48);
                  if (!v82)
                  {
                    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(v16);
                    uint64_t v82 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::SyncState::default_instance_ + 48);
                  }
                  int v83 = *(_DWORD *)(v82 + 16);
                  if ((v83 & 4) != 0)
                  {
                    BYTE11(v258) = *(unsigned char *)(v82 + 10);
                    if ((v83 & 8) != 0) {
                      goto LABEL_230;
                    }
LABEL_214:
                    if ((v83 & 1) == 0) {
                      goto LABEL_215;
                    }
LABEL_231:
                    BYTE9(v258) = *(unsigned char *)(v82 + 8);
                    if ((v83 & 2) == 0) {
                      goto LABEL_56;
                    }
                  }
                  else
                  {
                    if ((v83 & 8) == 0) {
                      goto LABEL_214;
                    }
LABEL_230:
                    BYTE12(v258) = *(unsigned char *)(v82 + 11);
                    if (v83) {
                      goto LABEL_231;
                    }
LABEL_215:
                    if ((v83 & 2) == 0) {
                      goto LABEL_56;
                    }
                  }
                  char v86 = *(unsigned char *)(v82 + 9);
                  goto LABEL_236;
                }
                if ((v39 & 0x80) != 0)
                {
                  uint64_t v76 = *(void *)(v38 + 56);
                  if (!v76)
                  {
                    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(v16);
                    uint64_t v76 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::SyncState::default_instance_ + 56);
                  }
                  int v77 = *(_DWORD *)(v76 + 16);
                  if ((v77 & 8) != 0)
                  {
                    BYTE12(v258) = *(unsigned char *)(v76 + 11);
                    if ((v77 & 4) != 0) {
                      goto LABEL_245;
                    }
LABEL_227:
                    if ((v77 & 2) != 0) {
LABEL_246:
                    }
                      BYTE10(v258) = *(unsigned char *)(v76 + 9);
                  }
                  else
                  {
                    if ((v77 & 4) == 0) {
                      goto LABEL_227;
                    }
LABEL_245:
                    BYTE11(v258) = *(unsigned char *)(v76 + 10);
                    if ((v77 & 2) != 0) {
                      goto LABEL_246;
                    }
                  }
LABEL_194:
                  if (v77) {
                    BYTE9(v258) = *(unsigned char *)(v76 + 8);
                  }
                  goto LABEL_56;
                }
                if ((v39 & 0x100) != 0)
                {
                  uint64_t v87 = *(void *)(v38 + 64);
                  if (!v87)
                  {
                    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(0);
                    uint64_t v87 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::SyncState::default_instance_ + 64);
                  }
                  uint64_t v16 = (CoreNavigation::CLP::LogEntry::PrivateData *)sub_18E0F5CF4(v87, (unsigned char *)&v258 + 9);
                }
                else
                {
                  if ((v39 & 0x200) != 0)
                  {
                    uint64_t v76 = *(void *)(v38 + 72);
                    if (!v76)
                    {
                      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(v16);
                      uint64_t v76 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::SyncState::default_instance_ + 72);
                    }
                    int v77 = *(_DWORD *)(v76 + 16);
                    if ((v77 & 2) != 0) {
                      BYTE10(v258) = *(unsigned char *)(v76 + 9);
                    }
                    if ((v77 & 4) != 0) {
                      BYTE11(v258) = *(unsigned char *)(v76 + 10);
                    }
                    goto LABEL_194;
                  }
                  if ((v39 & 0x400) == 0) {
                    goto LABEL_507;
                  }
                  uint64_t v73 = *(void *)(v38 + 80);
                  if (!v73)
                  {
                    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(0);
                    uint64_t v73 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::SyncState::default_instance_ + 80);
                  }
                  uint64_t v16 = (CoreNavigation::CLP::LogEntry::PrivateData *)sub_18E0F5D4C(v73, (unsigned char *)&v258 + 9);
                }
              }
LABEL_56:
              int v37 = *(_DWORD *)(v34 + 112);
              if ((v37 & 4) != 0)
              {
                uint64_t v259 = *(void *)(v34 + 24);
                if ((v37 & 8) == 0)
                {
LABEL_58:
                  if ((v37 & 0x10) == 0) {
                    goto LABEL_59;
                  }
                  goto LABEL_68;
                }
              }
              else if ((v37 & 8) == 0)
              {
                goto LABEL_58;
              }
              long long __p = *(void **)(v34 + 32);
              if ((v37 & 0x10) == 0)
              {
LABEL_59:
                if ((v37 & 0x20) == 0) {
                  goto LABEL_79;
                }
                goto LABEL_69;
              }
LABEL_68:
              unint64_t v261 = *(void *)(v34 + 40);
              if ((v37 & 0x20) == 0) {
                goto LABEL_79;
              }
LABEL_69:
              uint64_t v42 = *(void *)(v34 + 48);
              if (!v42)
              {
                CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(v16);
                uint64_t v42 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::Measurement::default_instance_ + 48);
              }
              int v43 = *(_DWORD *)(v42 + 32);
              if (v43) {
                unint64_t v262 = *(void *)(v42 + 8);
              }
              if ((v43 & 2) != 0)
              {
                double v44 = *(double *)(v42 + 16);
                if (v44 < 1.17549435e-38 || v44 > 3.40282347e38) {
                  goto LABEL_507;
                }
                float v45 = v44;
                float v263 = v45;
              }
              if ((v43 & 4) != 0) {
                char v264 = *(unsigned char *)(v42 + 24);
              }
LABEL_79:
              if ((*(unsigned char *)(v34 + 112) & 0x40) != 0)
              {
                uint64_t v46 = *(void *)(v34 + 56);
                if (!v46)
                {
                  CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(v16);
                  uint64_t v46 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::Measurement::default_instance_ + 56);
                }
                int v47 = *(_DWORD *)(v46 + 32);
                if ((~v47 & 3) != 0) {
                  goto LABEL_507;
                }
                int64x2_t v265 = *(int64x2_t *)(v46 + 8);
                if ((v47 & 4) != 0) {
                  LOBYTE(v266[0]) = *(unsigned char *)(v46 + 24);
                }
              }
              if ((*(unsigned char *)(v34 + 113) & 8) != 0)
              {
                uint64_t v48 = *(void *)(v34 + 88);
                if (!v48)
                {
                  CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(v16);
                  uint64_t v48 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::Measurement::default_instance_ + 88);
                }
                int v49 = *(_DWORD *)(v48 + 32);
                if ((~v49 & 3) != 0) {
                  goto LABEL_507;
                }
                *(_OWORD *)((char *)v266 + 8) = *(_OWORD *)(v48 + 8);
                if ((v49 & 4) != 0) {
                  BYTE8(v266[1]) = *(unsigned char *)(v48 + 24);
                }
              }
              if ((*(unsigned char *)(v34 + 113) & 0x20) != 0)
              {
                uint64_t v50 = *(void *)(v34 + 96);
                if (!v50)
                {
                  CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(v16);
                  uint64_t v50 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::Measurement::default_instance_ + 96);
                }
                int v51 = *(_DWORD *)(v50 + 32);
                if ((~v51 & 7) != 0) {
                  goto LABEL_507;
                }
                int64x2_t v267 = *(int64x2_t *)(v50 + 8);
                LOBYTE(v268) = *(unsigned char *)(v50 + 24);
                if ((v51 & 8) != 0) {
                  BYTE1(v268) = *(unsigned char *)(v50 + 25);
                }
              }
              if ((*(unsigned char *)(v34 + 112) & 0x80) != 0)
              {
                uint64_t v52 = *(void *)(v34 + 64);
                if (!v52)
                {
                  CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(v16);
                  uint64_t v52 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::Measurement::default_instance_ + 64);
                }
                int v53 = *(_DWORD *)(v52 + 48);
                if ((v53 & 0x10) != 0)
                {
                  v271[0] = *(unsigned char *)(v52 + 40);
                  if ((v53 & 2) != 0) {
                    goto LABEL_107;
                  }
LABEL_102:
                  if ((v53 & 1) == 0) {
                    goto LABEL_103;
                  }
LABEL_108:
                  *((void *)&v268 + 1) = *(void *)(v52 + 8);
                  LOBYTE(v269) = 1;
                  int v53 = *(_DWORD *)(v52 + 48);
                  if ((v53 & 4) != 0) {
                    goto LABEL_109;
                  }
LABEL_104:
                  if ((v53 & 8) == 0) {
                    goto LABEL_112;
                  }
                }
                else
                {
                  if ((v53 & 2) == 0) {
                    goto LABEL_102;
                  }
LABEL_107:
                  *((void *)&v269 + 1) = *(void *)(v52 + 16);
                  v270[0] = 1;
                  int v53 = *(_DWORD *)(v52 + 48);
                  if (v53) {
                    goto LABEL_108;
                  }
LABEL_103:
                  if ((v53 & 4) == 0) {
                    goto LABEL_104;
                  }
LABEL_109:
                  *(void *)&v270[8] = *(void *)(v52 + 24);
                  if ((v53 & 8) == 0) {
                    goto LABEL_112;
                  }
                }
                if (*(double *)(v52 + 32) < 1.0e10) {
                  *(void *)&v270[16] = *(void *)(v52 + 32);
                }
              }
LABEL_112:
              if (*(unsigned char *)(v34 + 113)) {
                operator new();
              }
              int v54 = *(_DWORD *)(v34 + 112);
              if ((v54 & 0x200) != 0)
              {
                *(_DWORD *)&v271[16] = *(_DWORD *)(v34 + 80);
                if ((v54 & 0x400) == 0)
                {
LABEL_116:
                  if ((v54 & 0x1000) == 0) {
                    goto LABEL_117;
                  }
                  goto LABEL_125;
                }
              }
              else if ((v54 & 0x400) == 0)
              {
                goto LABEL_116;
              }
              int v56 = *(_DWORD *)(v34 + 84);
              if (v56 == 4) {
                char v57 = 2;
              }
              else {
                char v57 = v56 == 3;
              }
              v271[20] = v57;
              if ((v54 & 0x1000) == 0)
              {
LABEL_117:
                char v55 = (v265.i64[1] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && *(double *)&v265.i64[1] < 10000.0
                   || v263 < 90000.0 && (LODWORD(v263) & 0x7FFFFFFFu) < 0x7F800000;
                goto LABEL_132;
              }
LABEL_125:
              char v55 = *(unsigned char *)(v34 + 104);
LABEL_132:
              v271[21] = v55;
              unint64_t v60 = *((void *)a2 + 24);
              unint64_t v59 = *((void *)a2 + 25);
              if (v60 >= v59)
              {
                unint64_t v62 = 0x8F5C28F5C28F5C29 * ((uint64_t)(v60 - *v251) >> 3);
                unint64_t v63 = v62 + 1;
                if (v62 + 1 > 0x147AE147AE147AELL) {
                  sub_18DEE1FC8();
                }
                unint64_t v64 = 0x8F5C28F5C28F5C29 * ((uint64_t)(v59 - *v251) >> 3);
                if (2 * v64 > v63) {
                  unint64_t v63 = 2 * v64;
                }
                if (v64 >= 0xA3D70A3D70A3D7) {
                  unint64_t v65 = 0x147AE147AE147AELL;
                }
                else {
                  unint64_t v65 = v63;
                }
                v281 = (char *)a2 + 200;
                if (v65) {
                  uint64_t v66 = (char *)sub_18E0CA098((uint64_t)a2 + 200, v65);
                }
                else {
                  uint64_t v66 = 0;
                }
                v279 = v66;
                *(void *)v280 = &v66[200 * v62];
                *(void *)&v280[8] = *(void *)v280;
                *(void *)&v280[16] = &v66[200 * v65];
                sub_18E0CA0E4(*(uint64_t *)v280, (uint64_t)&v258);
                uint64_t v67 = *(void *)v280;
                *(void *)&v280[8] += 200;
                uint64_t v68 = *((void *)a2 + 23);
                uint64_t v69 = *((void *)a2 + 24);
                *(void *)&long long v285 = *(void *)v280;
                *((void *)&v285 + 1) = *(void *)v280;
                long long v284 = v285;
                v282[0] = (char *)a2 + 200;
                v282[1] = &v284;
                v282[2] = &v285;
                char v283 = 0;
                while (v69 != v68)
                {
                  v69 -= 200;
                  sub_18E0CA0E4(v67 - 200, v69);
                  uint64_t v67 = *((void *)&v285 + 1) - 200;
                  *((void *)&v285 + 1) -= 200;
                }
                char v283 = 1;
                sub_18E0F5D94((uint64_t)v282);
                uint64_t v70 = *((void *)a2 + 25);
                unint64_t v252 = *(void *)&v280[8];
                long long v71 = *(_OWORD *)&v280[8];
                long long v72 = *(_OWORD *)((char *)a2 + 184);
                *((void *)a2 + 23) = v67;
                *(_OWORD *)v280 = v72;
                *((_OWORD *)a2 + 12) = v71;
                *(void *)&v280[16] = v70;
                v279 = (char *)v72;
                sub_18E0F5E04((uint64_t)&v279);
                unint64_t v61 = v252;
              }
              else
              {
                sub_18E0CA0E4(*((void *)a2 + 24), (uint64_t)&v258);
                unint64_t v61 = v60 + 200;
                *((void *)a2 + 24) = v60 + 200;
              }
              *((void *)a2 + 24) = v61;
              uint64_t v16 = *(CoreNavigation::CLP::LogEntry::PrivateData **)&v271[8];
              *(void *)&v271[8] = 0;
              if (v16) {
                uint64_t v16 = (CoreNavigation::CLP::LogEntry::PrivateData *)MEMORY[0x192FA6240](v16, 0x1000C4041240993);
              }
              if (++v33 == v254) {
                goto LABEL_253;
              }
            }
          }
          goto LABEL_253;
        }
LABEL_515:
        *((_DWORD *)a2 + 44) = *(_DWORD *)(v30 + 32);
        if ((v31 & 4) == 0)
        {
LABEL_46:
          if ((v31 & 2) == 0) {
            goto LABEL_48;
          }
          goto LABEL_47;
        }
        goto LABEL_516;
      }
    }
    else if ((v27 & 2) == 0)
    {
      goto LABEL_29;
    }
    *((_DWORD *)a2 + 31) = v26[3];
    if ((v27 & 8) == 0)
    {
LABEL_30:
      if ((v27 & 1) == 0) {
        goto LABEL_32;
      }
      goto LABEL_31;
    }
    goto LABEL_511;
  }
LABEL_253:
  if ((*((unsigned char *)v256 + 132) & 0x80) != 0)
  {
    int64_t v88 = (char *)operator new(0x70uLL);
    *((void *)v88 + 1) = 0;
    *((void *)v88 + 2) = 0;
    *(void *)int64_t v88 = &unk_1EDD1E618;
    *(_OWORD *)(v88 + 40) = 0u;
    *(_OWORD *)(v88 + 56) = 0u;
    *((void *)v88 + 13) = 0;
    *(_OWORD *)(v88 + 24) = 0u;
    *((void *)v88 + 4) = &unk_1EDD0B000;
    *(_OWORD *)(v88 + 72) = xmmword_18E1EFA40;
    *(_OWORD *)(v88 + 88) = xmmword_18E1EFA50;
    uint64_t v16 = (CoreNavigation::CLP::LogEntry::PrivateData *)*((void *)a2 + 38);
    *((void *)a2 + 37) = v88 + 24;
    *((void *)a2 + 38) = v88;
    if (v16) {
      sub_18DEE4E18((std::__shared_weak_count *)v16);
    }
    unint64_t v89 = (float32x2_t *)*((void *)v256 + 12);
    if (!v89)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(v16);
      unint64_t v89 = *(float32x2_t **)(CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents::default_instance_
                            + 96);
    }
    if ((~v89[6].i32[1] & 0x1FF) != 0) {
      return 0;
    }
    uint64_t v90 = *((void *)a2 + 37);
    *(float64x2_t *)(v90 + 16) = vcvtq_f64_f32(v89[2]);
    *(float64x2_t *)(v90 + 32) = vcvtq_f64_f32(v89[3]);
    *(float64x2_t *)(v90 + 48) = vcvtq_f64_f32(v89[4]);
    *(float64x2_t *)(v90 + 64) = vcvtq_f64_f32(v89[5]);
    *(unsigned char *)(v90 + 80) = 1;
    *(float32x2_t *)uint64_t v90 = v89[1];
  }
  uint64_t v91 = *((int *)v256 + 8);
  if (!v91)
  {
LABEL_464:
    v217 = (CoreNavigation::CLP::LogEntry::PrivateData **)((char *)a2 + 232);
    uint64_t v216 = *((void *)a2 + 29);
    unint64_t v218 = *((int *)v256 + 14);
    if (0xAAAAAAAAAAAAAAABLL * ((*((void *)a2 + 31) - v216) >> 3) < v218)
    {
      if ((v218 & 0x80000000) != 0) {
LABEL_526:
      }
        sub_18DEE1FC8();
      uint64_t v219 = *((void *)a2 + 30) - v216;
      v220 = (char *)sub_18E00C070((uint64_t)a2 + 248, v218);
      v221 = &v220[v219];
      v223 = &v220[24 * v222];
      v224 = (CoreNavigation::CLP::LogEntry::PrivateData *)*((void *)a2 + 29);
      uint64_t v16 = (CoreNavigation::CLP::LogEntry::PrivateData *)*((void *)a2 + 30);
      v225 = v221;
      if (v16 != v224)
      {
        do
        {
          long long v226 = *(_OWORD *)((char *)v16 - 24);
          *((_DWORD *)v225 - 2) = *((_DWORD *)v16 - 2);
          *(_OWORD *)(v225 - 24) = v226;
          v225 -= 24;
          uint64_t v16 = (CoreNavigation::CLP::LogEntry::PrivateData *)((char *)v16 - 24);
        }
        while (v16 != v224);
        uint64_t v16 = *v217;
      }
      *((void *)a2 + 29) = v225;
      *((void *)a2 + 30) = v221;
      *((void *)a2 + 31) = v223;
      if (v16) {
        operator delete(v16);
      }
    }
    uint64_t v227 = *((int *)v256 + 14);
    if (v227)
    {
      v228 = (uint64_t *)*((void *)v256 + 6);
      v229 = &v228[v227];
      do
      {
        uint64_t v230 = *v228;
        unsigned int v231 = *(_DWORD *)(*v228 + 16) - 2;
        if (v231 > 0xA) {
          char v232 = 0;
        }
        else {
          char v232 = byte_18E215830[v231];
        }
        uint64_t v233 = *(void *)(v230 + 8);
        int v234 = *(_DWORD *)(v230 + 20);
        unint64_t v236 = *((void *)a2 + 30);
        unint64_t v235 = *((void *)a2 + 31);
        if (v236 >= v235)
        {
          uint64_t v16 = *v217;
          unint64_t v238 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v236 - (void)*v217) >> 3);
          unint64_t v239 = v238 + 1;
          if (v238 + 1 > 0xAAAAAAAAAAAAAAALL) {
            goto LABEL_526;
          }
          unint64_t v240 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v235 - (void)v16) >> 3);
          if (2 * v240 > v239) {
            unint64_t v239 = 2 * v240;
          }
          if (v240 >= 0x555555555555555) {
            unint64_t v241 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v241 = v239;
          }
          if (v241)
          {
            v242 = (char *)sub_18E00C070((uint64_t)a2 + 248, v241);
            uint64_t v16 = (CoreNavigation::CLP::LogEntry::PrivateData *)*((void *)a2 + 29);
            unint64_t v236 = *((void *)a2 + 30);
          }
          else
          {
            v242 = 0;
          }
          v243 = &v242[24 * v238];
          char *v243 = v232;
          *((void *)v243 + 1) = v233;
          *((_DWORD *)v243 + 4) = v234;
          v244 = v243;
          if ((CoreNavigation::CLP::LogEntry::PrivateData *)v236 != v16)
          {
            do
            {
              long long v245 = *(_OWORD *)(v236 - 24);
              *((_DWORD *)v244 - 2) = *(_DWORD *)(v236 - 8);
              *(_OWORD *)(v244 - 24) = v245;
              v244 -= 24;
              v236 -= 24;
            }
            while ((CoreNavigation::CLP::LogEntry::PrivateData *)v236 != v16);
            uint64_t v16 = *v217;
          }
          v237 = v243 + 24;
          *((void *)a2 + 29) = v244;
          *((void *)a2 + 30) = v243 + 24;
          *((void *)a2 + 31) = &v242[24 * v241];
          if (v16) {
            operator delete(v16);
          }
        }
        else
        {
          *(unsigned char *)unint64_t v236 = v232;
          *(void *)(v236 + 8) = v233;
          v237 = (char *)(v236 + 24);
          *(_DWORD *)(v236 + 16) = v234;
        }
        *((void *)a2 + 30) = v237;
        ++v228;
      }
      while (v228 != v229);
    }
    if ((*((unsigned char *)v256 + 132) & 0x10) != 0)
    {
      uint64_t v246 = *((void *)v256 + 9);
      if (!v246)
      {
        CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(v16);
        uint64_t v246 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents::default_instance_
                         + 72);
      }
      if (*(unsigned char *)(v246 + 52)) {
        operator new();
      }
      if ((*(unsigned char *)(v246 + 52) & 4) != 0) {
        operator new();
      }
      if ((*(unsigned char *)(v246 + 52) & 8) != 0) {
        operator new();
      }
      if ((*(unsigned char *)(v246 + 52) & 2) != 0) {
        operator new();
      }
      if ((*(unsigned char *)(v246 + 52) & 0x10) != 0) {
        operator new();
      }
    }
    return 1;
  }
  uint64_t v250 = *((void *)v256 + 3) + 8 * v91;
  v249 = (void *)((char *)a2 + 208);
  int64x2_t v253 = vdupq_n_s64(0x7FF8000000000000uLL);
  uint64_t v92 = (void *)*((void *)v256 + 3);
  while (1)
  {
    v255 = v92;
    uint64_t v93 = *v92;
    LODWORD(v258) = 0;
    WORD2(v258) = 32512;
    *((void *)&v258 + 1) = 0x7FF8000000000000;
    LOBYTE(v259) = 0;
    LOBYTE(__p) = 0;
    LOBYTE(v263) = 0;
    v265.i8[0] = 0;
    v270[16] = 0;
    *(int64x2_t *)v271 = v253;
    *(int64x2_t *)&v271[16] = v253;
    float v272 = NAN;
    uint64_t v273 = 0;
    __int16 v274 = 0;
    v276 = 0;
    v277 = 0;
    v275 = 0;
    int v278 = 0;
    int v94 = *(_DWORD *)(v93 + 172);
    if (v94)
    {
      uint64_t v95 = *(void *)(v93 + 8);
      if (!v95)
      {
        CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(0);
        uint64_t v95 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::SvInfo::default_instance_ + 8);
      }
      uint64_t v16 = (CoreNavigation::CLP::LogEntry::PrivateData *)raven::ConvertProtobufToGnssId(v95, (uint64_t)&v258);
      if (!v16) {
        goto LABEL_519;
      }
      int v94 = *(_DWORD *)(v93 + 172);
    }
    if ((v94 & 4) != 0)
    {
      unsigned int v96 = *(_DWORD *)(v93 + 56) - 1;
      if (v96 > 5) {
        goto LABEL_519;
      }
      LOBYTE(v259) = 0x30404020100uLL >> (8 * v96);
    }
    int v97 = *(_DWORD *)(v93 + 32);
    if (v97 < 1)
    {
      double v122 = 0.0;
      if ((v94 & 2) == 0) {
        goto LABEL_519;
      }
    }
    else
    {
      if (LOBYTE(v263))
      {
        uint64_t v16 = (CoreNavigation::CLP::LogEntry::PrivateData *)__p;
        if (__p)
        {
          unint64_t v261 = (unint64_t)__p;
          operator delete(__p);
        }
      }
      unint64_t v261 = 0;
      unint64_t v262 = 0;
      long long __p = 0;
      LOBYTE(v263) = 1;
      unint64_t v98 = *(int *)(v93 + 32);
      if (!v98) {
        goto LABEL_306;
      }
      if ((v98 & 0x80000000) != 0) {
        sub_18DEE1FC8();
      }
      uint64_t v16 = (CoreNavigation::CLP::LogEntry::PrivateData *)sub_18E01ACC8((uint64_t)&v262, v98);
      long long v101 = (char *)__p;
      uint64_t v100 = (char *)v261;
      long long v102 = v16;
      if ((void *)v261 != __p)
      {
        do
        {
          long long v103 = *((_OWORD *)v100 - 1);
          *((_OWORD *)v102 - 2) = *((_OWORD *)v100 - 2);
          *((_OWORD *)v102 - 1) = v103;
          long long v102 = (CoreNavigation::CLP::LogEntry::PrivateData *)((char *)v102 - 32);
          v100 -= 32;
        }
        while (v100 != v101);
        uint64_t v100 = (char *)__p;
      }
      long long __p = v102;
      unint64_t v261 = (unint64_t)v16;
      unint64_t v262 = (unint64_t)v16 + 32 * v99;
      if (v100) {
        operator delete(v100);
      }
      uint64_t v104 = *(int *)(v93 + 32);
      if (v104)
      {
        uint64_t v105 = *(void *)(v93 + 24);
        uint64_t v106 = v105 + 8 * v104;
        do
        {
          uint64_t v107 = *(void *)(*(void *)v105 + 8);
          if ((*(unsigned char *)(*(void *)v105 + 28) & 2) != 0)
          {
            uint64_t v111 = *(void **)(*(void *)v105 + 16);
            if (!v111)
            {
              CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(v16);
              uint64_t v111 = *(void **)(CoreNavigation::CLP::LogEntry::PrivateData::SvPositionAtTime::default_instance_ + 16);
            }
            uint64_t v108 = v111[1];
            uint64_t v109 = v111[2];
            uint64_t v110 = v111[3];
          }
          else
          {
            uint64_t v108 = 0x7FF8000000000000;
            uint64_t v109 = 0x7FF8000000000000;
            uint64_t v110 = 0x7FF8000000000000;
          }
          int64x2_t v112 = (CoreNavigation::CLP::LogEntry::PrivateData *)v261;
          if (v261 >= v262)
          {
            uint64_t v16 = (CoreNavigation::CLP::LogEntry::PrivateData *)__p;
            uint64_t v114 = (uint64_t)(v261 - (void)__p) >> 5;
            unint64_t v115 = v114 + 1;
            if ((unint64_t)(v114 + 1) >> 59) {
              sub_18DEE1FC8();
            }
            uint64_t v116 = v262 - (void)__p;
            if ((uint64_t)(v262 - (void)__p) >> 4 > v115) {
              unint64_t v115 = v116 >> 4;
            }
            if ((unint64_t)v116 >= 0x7FFFFFFFFFFFFFE0) {
              unint64_t v117 = 0x7FFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v117 = v115;
            }
            if (v117)
            {
              long long v118 = (char *)sub_18E01ACC8((uint64_t)&v262, v117);
              uint64_t v16 = (CoreNavigation::CLP::LogEntry::PrivateData *)__p;
              int64x2_t v112 = (CoreNavigation::CLP::LogEntry::PrivateData *)v261;
            }
            else
            {
              long long v118 = 0;
            }
            long long v119 = &v118[32 * v114];
            *(void *)long long v119 = v107;
            *((void *)v119 + 1) = v108;
            *((void *)v119 + 2) = v109;
            *((void *)v119 + 3) = v110;
            long long v120 = v119;
            if (v112 != v16)
            {
              do
              {
                long long v121 = *((_OWORD *)v112 - 1);
                *((_OWORD *)v120 - 2) = *((_OWORD *)v112 - 2);
                *((_OWORD *)v120 - 1) = v121;
                v120 -= 32;
                int64x2_t v112 = (CoreNavigation::CLP::LogEntry::PrivateData *)((char *)v112 - 32);
              }
              while (v112 != v16);
              uint64_t v16 = (CoreNavigation::CLP::LogEntry::PrivateData *)__p;
            }
            int64x2_t v113 = v119 + 32;
            long long __p = v120;
            unint64_t v261 = (unint64_t)(v119 + 32);
            unint64_t v262 = (unint64_t)&v118[32 * v117];
            if (v16) {
              operator delete(v16);
            }
          }
          else
          {
            *(void *)unint64_t v261 = v107;
            *((void *)v112 + 1) = v108;
            int64x2_t v113 = (char *)v112 + 32;
            *((void *)v112 + 2) = v109;
            *((void *)v112 + 3) = v110;
          }
          unint64_t v261 = (unint64_t)v113;
          v105 += 8;
        }
        while (v105 != v106);
      }
      else
      {
LABEL_306:
        int64x2_t v113 = (char *)v261;
      }
      double v122 = *(double *)__p;
      if ((unint64_t)(v113 - (unsigned char *)__p) >= 0x21)
      {
        unint64_t v123 = (v113 - (unsigned char *)__p) >> 5;
        if (v123 <= 2) {
          unint64_t v123 = 2;
        }
        unint64_t v124 = (double *)((char *)__p + 32);
        for (unint64_t i = 1; i != v123; ++i)
        {
          double v126 = *v124;
          v124 += 4;
          double v122 = v122 + (v126 - v122) / (double)i;
        }
      }
      int v94 = *(_DWORD *)(v93 + 172);
      if ((v94 & 2) == 0) {
        goto LABEL_319;
      }
    }
    if ((*(void *)(v93 + 16) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000) {
      double v122 = *(double *)(v93 + 16);
    }
    if (v97 <= 0 && (*(void *)(v93 + 16) & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000) {
      goto LABEL_519;
    }
LABEL_319:
    *((double *)&v258 + 1) = v122;
    if ((v94 & 0x8000) == 0) {
      goto LABEL_342;
    }
    uint64_t v127 = *(void *)(v93 + 128);
    if (!v127)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(v16);
      uint64_t v127 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::SvInfo::default_instance_ + 128);
    }
    int64x2_t v265 = v253;
    memset(v266, 0, sizeof(v266));
    int64x2_t v267 = 0u;
    long long v268 = 0u;
    long long v269 = 0u;
    *(_OWORD *)v270 = 0u;
    v270[16] = 1;
    int64x2_t v265 = *(int64x2_t *)(v127 + 8);
    int v128 = *(_DWORD *)(v127 + 32);
    if (v128 != 4 || *(_DWORD *)(v127 + 48) != 4 || *(_DWORD *)(v127 + 64) != 4) {
      break;
    }
    uint64_t v129 = *(_OWORD **)(v127 + 24);
    long long v130 = v129[1];
    v266[0] = *v129;
    v266[1] = v130;
    int v131 = *(_DWORD *)(v127 + 48);
    if (v131 <= 0)
    {
      wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
      wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
      wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
      wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)&v279);
      int v131 = *(_DWORD *)(v127 + 48);
    }
    unint64_t v132 = *(uint64_t **)(v127 + 40);
    uint64_t v133 = *v132;
    if (v131 <= 1)
    {
      wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
      wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
      wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
      wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)&v279);
      unint64_t v132 = *(uint64_t **)(v127 + 40);
      int v131 = *(_DWORD *)(v127 + 48);
    }
    uint64_t v134 = v132[1];
    if (v131 <= 2)
    {
      wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
      wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
      wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
      wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)&v279);
      int v131 = *(_DWORD *)(v127 + 48);
      unint64_t v132 = *(uint64_t **)(v127 + 40);
    }
    uint64_t v135 = v132[2];
    if (v131 <= 3)
    {
      wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
      wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
      wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
      wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)&v279);
      unint64_t v132 = *(uint64_t **)(v127 + 40);
    }
    uint64_t v136 = v132[3];
    v267.i64[0] = v133;
    v267.i64[1] = v134;
    *(void *)&long long v268 = v135;
    *((void *)&v268 + 1) = v136;
    int v137 = *(_DWORD *)(v127 + 64);
    if (v137 <= 0)
    {
      wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
      wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
      wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
      wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)&v279);
      int v137 = *(_DWORD *)(v127 + 64);
    }
    uint64_t v138 = *(uint64_t **)(v127 + 56);
    uint64_t v139 = *v138;
    if (v137 <= 1)
    {
      wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
      wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
      wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
      wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)&v279);
      uint64_t v138 = *(uint64_t **)(v127 + 56);
      int v137 = *(_DWORD *)(v127 + 64);
    }
    uint64_t v140 = v138[1];
    if (v137 <= 2)
    {
      wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
      wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
      wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
      wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)&v279);
      int v137 = *(_DWORD *)(v127 + 64);
      uint64_t v138 = *(uint64_t **)(v127 + 56);
    }
    uint64_t v141 = v138[2];
    if (v137 <= 3)
    {
      wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
      wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
      wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
      wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)&v279);
      uint64_t v138 = *(uint64_t **)(v127 + 56);
    }
    uint64_t v142 = v138[3];
    *(void *)&long long v269 = v139;
    *((void *)&v269 + 1) = v140;
    *(void *)v270 = v141;
    *(void *)&v270[8] = v142;
    int v94 = *(_DWORD *)(v93 + 172);
LABEL_342:
    *(void *)v271 = *(void *)(v93 + 48);
    *(_OWORD *)&v271[8] = *(_OWORD *)(v93 + 64);
    if ((v94 & 0x200000) == 0
      || (uint64_t v143 = *(void *)(v93 + 152), (v143 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000))
    {
      uint64_t v143 = 0;
    }
    *(void *)&v271[24] = v143;
    double v144 = *(float *)(v93 + 60);
    double v145 = fabs(v144);
    if ((unint64_t)(*(void *)&v145 - 0x10000000000000) >> 53 >= 0x3FF && *(void *)&v145 != 0)
    {
      LOWORD(v279) = 12;
      LOBYTE(v282[0]) = 4;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v279, (unsigned __int8 *)v282, "NaN range_accuracy_position_m", v17, v18, v19, v20, v21, v248);
      double v144 = 0.0;
    }
    double v147 = *(float *)(v93 + 80);
    double v148 = fabs(v147);
    if ((unint64_t)(*(void *)&v148 - 0x10000000000000) >> 53 >= 0x3FF && *(void *)&v148 != 0)
    {
      LOWORD(v279) = 12;
      LOBYTE(v282[0]) = 4;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v279, (unsigned __int8 *)v282, "NaN range_accuracy_clock_ns", v17, v18, v19, v20, v21, v248);
      double v147 = 0.0;
    }
    float v150 = hypot(v144, v147 * 0.299792458);
    float v272 = v150;
    int v151 = *(_DWORD *)(v93 + 172);
    if ((v151 & 0x200) != 0)
    {
      unsigned int v152 = *(_DWORD *)(v93 + 84) - 1;
      if (v152 > 3) {
        goto LABEL_519;
      }
      LOBYTE(v273) = 0x2010000u >> (8 * v152);
    }
    if ((v151 & 0x10000) != 0)
    {
      unsigned int v153 = *(_DWORD *)(v93 + 136) - 1;
      if (v153 > 3) {
        goto LABEL_519;
      }
      BYTE1(v273) = 0x2010000u >> (8 * v153);
    }
    if ((v151 & 0x400) != 0)
    {
      unsigned int v154 = *(_DWORD *)(v93 + 88) - 1;
      if (v154 > 3) {
        goto LABEL_519;
      }
      BYTE2(v273) = 0x2010000u >> (8 * v154);
    }
    if ((v151 & 0x20000) != 0)
    {
      unsigned int v155 = *(_DWORD *)(v93 + 140) - 1;
      if (v155 > 3) {
        goto LABEL_519;
      }
      BYTE3(v273) = 0x2010000u >> (8 * v155);
    }
    if ((v151 & 0x800) != 0)
    {
      unsigned int v156 = *(_DWORD *)(v93 + 92) - 1;
      if (v156 > 3) {
        goto LABEL_519;
      }
      BYTE4(v273) = 0x2010000u >> (8 * v156);
    }
    if ((v151 & 0x40000) != 0)
    {
      unsigned int v157 = *(_DWORD *)(v93 + 144) - 1;
      if (v157 > 3) {
        goto LABEL_519;
      }
      BYTE5(v273) = 0x2010000u >> (8 * v157);
    }
    if ((v151 & 0x1000) != 0)
    {
      unsigned int v158 = *(_DWORD *)(v93 + 96) - 1;
      if (v158 > 3) {
        goto LABEL_519;
      }
      BYTE6(v273) = 0x2010000u >> (8 * v158);
    }
    if ((v151 & 0x80000) != 0)
    {
      unsigned int v159 = *(_DWORD *)(v93 + 148) - 1;
      if (v159 > 3) {
        goto LABEL_519;
      }
      HIBYTE(v273) = 0x2010000u >> (8 * v159);
    }
    if ((v151 & 0x2000) != 0)
    {
      unsigned int v160 = *(_DWORD *)(v93 + 100) - 1;
      if (v160 > 3) {
        goto LABEL_519;
      }
      LOBYTE(v274) = 0x2010000u >> (8 * v160);
    }
    if ((v151 & 0x100000) != 0)
    {
      unsigned int v161 = *(_DWORD *)(v93 + 160) - 1;
      if (v161 > 3) {
        goto LABEL_519;
      }
      HIBYTE(v274) = 0x2010000u >> (8 * v161);
    }
    unint64_t v162 = *(int *)(v93 + 112);
    v163 = v275;
    if (0xCCCCCCCCCCCCCCCDLL * ((v277 - (unsigned char *)v275) >> 3) < v162)
    {
      if ((v162 & 0x80000000) != 0) {
        sub_18DEE1FC8();
      }
      v164 = v276;
      v165 = (char *)sub_18E01AF14((uint64_t)&v277, v162);
      v168 = (char *)v275;
      v167 = v276;
      v169 = &v165[v164 - v163];
      if (v276 != v275)
      {
        do
        {
          long long v170 = *(_OWORD *)(v167 - 40);
          long long v171 = *(_OWORD *)(v167 - 24);
          *(v169 - 8) = *(v167 - 8);
          *(_OWORD *)(v169 - 24) = v171;
          *(_OWORD *)(v169 - 40) = v170;
          v169 -= 40;
          v167 -= 40;
        }
        while (v167 != v168);
        v167 = (char *)v275;
      }
      v275 = v169;
      v276 = &v165[v164 - v163];
      v277 = &v165[40 * v166];
      if (v167) {
        operator delete(v167);
      }
    }
    uint64_t v172 = *(int *)(v93 + 112);
    if (v172)
    {
      v173 = *(uint64_t **)(v93 + 104);
      v174 = &v173[v172];
      do
      {
        uint64_t v175 = *v173;
        int v176 = *(_DWORD *)(*v173 + 44);
        if (v176)
        {
          unsigned int v182 = *(_DWORD *)(v175 + 24) - 2;
          if (v182 > 0xA) {
            char v178 = 0;
          }
          else {
            char v178 = byte_18E215830[v182];
          }
          uint64_t v183 = *(void *)(v175 + 16);
          uint64_t v184 = *(void *)(v175 + 8);
          if ((v184 <= -1 || ((v184 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF)
            && (unint64_t)(v184 - 1) >= 0xFFFFFFFFFFFFFLL)
          {
            double v181 = NAN;
          }
          else
          {
            double v181 = *(double *)(v175 + 8);
          }
          if ((v183 <= -1 || ((v183 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF)
            && (unint64_t)(v183 - 1) >= 0xFFFFFFFFFFFFFLL)
          {
            double v180 = NAN;
          }
          else
          {
            double v180 = *(double *)(v175 + 16);
          }
          uint64_t v179 = *(void *)(v175 + 32);
          if ((v176 & 0x10) != 0)
          {
            int v189 = *(_DWORD *)(v175 + 28);
            if (v189 == 1) {
              char v177 = 1;
            }
            else {
              char v177 = 2 * (v189 == 2);
            }
          }
          else
          {
            char v177 = 0;
          }
        }
        else
        {
          char v177 = 0;
          char v178 = 0;
          uint64_t v179 = 0x7FF8000000000000;
          double v180 = NAN;
          double v181 = NAN;
        }
        v190 = v276;
        if (v276 >= v277)
        {
          v192 = (char *)v275;
          unint64_t v193 = 0xCCCCCCCCCCCCCCCDLL * ((v276 - (unsigned char *)v275) >> 3);
          unint64_t v194 = v193 + 1;
          if (v193 + 1 > 0x666666666666666) {
            sub_18DEE1FC8();
          }
          if (0x999999999999999ALL * ((v277 - (unsigned char *)v275) >> 3) > v194) {
            unint64_t v194 = 0x999999999999999ALL * ((v277 - (unsigned char *)v275) >> 3);
          }
          if (0xCCCCCCCCCCCCCCCDLL * ((v277 - (unsigned char *)v275) >> 3) >= 0x333333333333333) {
            unint64_t v195 = 0x666666666666666;
          }
          else {
            unint64_t v195 = v194;
          }
          if (v195)
          {
            v196 = (char *)sub_18E01AF14((uint64_t)&v277, v195);
            v192 = (char *)v275;
            v190 = v276;
          }
          else
          {
            v196 = 0;
          }
          v197 = &v196[40 * v193];
          char *v197 = v178;
          *((double *)v197 + 1) = v181;
          *((double *)v197 + 2) = v180;
          *((void *)v197 + 3) = v179;
          v197[32] = v177;
          v198 = v197;
          if (v190 != v192)
          {
            do
            {
              long long v199 = *(_OWORD *)(v190 - 40);
              long long v200 = *(_OWORD *)(v190 - 24);
              *(v198 - 8) = *(v190 - 8);
              *(_OWORD *)(v198 - 24) = v200;
              *(_OWORD *)(v198 - 40) = v199;
              v198 -= 40;
              v190 -= 40;
            }
            while (v190 != v192);
            v192 = (char *)v275;
          }
          v191 = v197 + 40;
          v275 = v198;
          v276 = v197 + 40;
          v277 = &v196[40 * v195];
          if (v192) {
            operator delete(v192);
          }
        }
        else
        {
          char *v276 = v178;
          *((double *)v190 + 1) = v181;
          *((double *)v190 + 2) = v180;
          *((void *)v190 + 3) = v179;
          v191 = v190 + 40;
          v190[32] = v177;
        }
        v276 = v191;
        ++v173;
      }
      while (v173 != v174);
    }
    unint64_t v201 = *((void *)a2 + 27);
    unint64_t v202 = *((void *)a2 + 28);
    if (v201 >= v202)
    {
      uint64_t v205 = (uint64_t)(v201 - *v249) >> 8;
      if ((unint64_t)(v205 + 1) >> 56) {
        sub_18DEE1FC8();
      }
      uint64_t v206 = v202 - *v249;
      uint64_t v207 = v206 >> 7;
      if (v206 >> 7 <= (unint64_t)(v205 + 1)) {
        uint64_t v207 = v205 + 1;
      }
      if ((unint64_t)v206 >= 0x7FFFFFFFFFFFFF00) {
        unint64_t v208 = 0xFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v208 = v207;
      }
      if (v208) {
        v209 = (char *)sub_18E0CA250((uint64_t)a2 + 224, v208);
      }
      else {
        v209 = 0;
      }
      uint64_t v210 = (uint64_t)&v209[256 * v205];
      v211 = &v209[256 * v208];
      sub_18E0F5EEC(v210, &v258);
      uint64_t v204 = v212 + 256;
      v213 = (long long *)*((void *)a2 + 26);
      v214 = (long long *)*((void *)a2 + 27);
      if (v214 == v213)
      {
        *((void *)a2 + 26) = v212;
        *((void *)a2 + 27) = v204;
        *((void *)a2 + 28) = v211;
      }
      else
      {
        do
        {
          v214 -= 16;
          sub_18E0F5EEC(v212 - 256, v214);
        }
        while (v214 != v213);
        v214 = (long long *)*((void *)a2 + 26);
        uint64_t v215 = *((void *)a2 + 27);
        *((void *)a2 + 26) = v212;
        *((void *)a2 + 27) = v204;
        *((void *)a2 + 28) = v211;
        while ((long long *)v215 != v214)
        {
          v215 -= 256;
          sub_18E0B98B4(v215);
        }
      }
      if (v214) {
        operator delete(v214);
      }
    }
    else
    {
      sub_18E0F5EEC(v201, &v258);
      uint64_t v204 = v203 + 256;
    }
    *((void *)a2 + 27) = v204;
    uint64_t v16 = (CoreNavigation::CLP::LogEntry::PrivateData *)v275;
    if (v275)
    {
      v276 = (char *)v275;
      operator delete(v275);
    }
    if (LOBYTE(v263))
    {
      uint64_t v16 = (CoreNavigation::CLP::LogEntry::PrivateData *)__p;
      if (__p)
      {
        unint64_t v261 = (unint64_t)__p;
        operator delete(__p);
      }
    }
    uint64_t v92 = v255 + 1;
    if (v255 + 1 == (void *)v250) {
      goto LABEL_464;
    }
  }
  LOWORD(v279) = 12;
  LOBYTE(v282[0]) = 4;
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v279, (unsigned __int8 *)v282, "invalid position coefficient size,%d,%d,%d", v17, v18, v19, v20, v21, v128);
LABEL_519:
  if (v275)
  {
    v276 = (char *)v275;
    operator delete(v275);
  }
  if (LOBYTE(v263) && __p)
  {
    unint64_t v261 = (unint64_t)__p;
    operator delete(__p);
  }
  return 0;
}

void sub_18E0ECDF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)(v29 - 256));
  sub_18E0F5CA8((uint64_t)&a29);
  _Unwind_Resume(a1);
}

uint64_t raven::ConvertProtobufToMagnetometerEvent(float32x2_t *a1, uint64_t a2, int8x16_t a3, int8x16_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if ((a1[4].i8[0] & 1) == 0) {
    return 0;
  }
  uint64_t v13 = (uint64_t)a1[1];
  if (!v13)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(0);
    uint64_t v13 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::MagSample::default_instance_ + 8);
  }
  int v14 = raven::ConvertProtobufToRavenTime(v13, a2 + 8, 0, a6, a7, a8, a9, a10, a3, a4);
  uint64_t result = 0;
  if (v14)
  {
    *(float64x2_t *)(a2 + 104) = vcvtq_f64_f32(a1[2]);
    *(double *)(a2 + 120) = a1[3].f32[0];
    uint64_t result = 1;
    *(unsigned char *)(a2 + 128) = 1;
  }
  return result;
}

uint64_t raven::ConvertProtobufToMapsRouteHintEvent(raven *this, const CoreNavigation::CLP::LogEntry::PrivateData::MapMatchingRouteHint *a2, raven::MapsRouteHintEvent *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9, int8x16_t a10)
{
  if ((*((unsigned char *)this + 60) & 1) == 0) {
    return 0;
  }
  uint64_t v12 = *((void *)this + 1);
  if (!v12)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(0);
    uint64_t v12 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::MapMatchingRouteHint::default_instance_ + 8);
  }
  int v18 = raven::ConvertProtobufToRavenTime(v12, (uint64_t)a2 + 8, 0, a4, a5, a6, a7, a8, a9, a10);
  uint64_t result = 0;
  if (v18)
  {
    if ((*((unsigned char *)this + 60) & 2) == 0) {
      return 0;
    }
    uint64_t v22 = *((void *)this + 2);
    if (!v22)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(0);
      uint64_t v22 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::MapMatchingRouteHint::default_instance_ + 16);
    }
    int v23 = raven::ConvertProtobufToRavenTime(v22, (uint64_t)a2 + 104, 0, v13, v14, v15, v16, v17, v19, v20);
    uint64_t result = 0;
    if (v23)
    {
      unsigned int v24 = *((_DWORD *)this + 6);
      if (v24 >= 7) {
        LOBYTE(v24) = 0;
      }
      uint64_t v26 = (void **)((char *)a2 + 208);
      uint64_t v25 = *((void *)a2 + 26);
      *((unsigned char *)a2 + 200) = v24;
      unsigned int v27 = *((_DWORD *)this + 7);
      if (v27 >= 7) {
        LOBYTE(v27) = 0;
      }
      *((unsigned char *)a2 + 201) = v27;
      *((void *)a2 + 27) = v25;
      char v57 = (char *)a2 + 224;
      unint64_t v28 = *((unsigned int *)this + 10);
      if (0xCCCCCCCCCCCCCCCDLL * ((*((void *)a2 + 28) - v25) >> 3) < v28)
      {
        uint64_t v29 = (char *)sub_18E01AF14((uint64_t)v57, v28);
        uint64_t v32 = (char *)*((void *)a2 + 26);
        int v31 = (char *)*((void *)a2 + 27);
        double v33 = v29;
        if (v31 != v32)
        {
          do
          {
            long long v34 = *(_OWORD *)(v31 - 40);
            long long v35 = *(_OWORD *)(v31 - 24);
            *((void *)v33 - 1) = *((void *)v31 - 1);
            *(_OWORD *)(v33 - 24) = v35;
            *(_OWORD *)(v33 - 40) = v34;
            v33 -= 40;
            v31 -= 40;
          }
          while (v31 != v32);
          int v31 = (char *)*v26;
        }
        *((void *)a2 + 26) = v33;
        *((void *)a2 + 27) = v29;
        *((void *)a2 + 28) = &v29[40 * v30];
        if (v31) {
          operator delete(v31);
        }
      }
      LODWORD(v36) = *((_DWORD *)this + 10);
      if ((int)v36 >= 1)
      {
        uint64_t v37 = 0;
        do
        {
          uint64_t v38 = *(void **)(*((void *)this + 4) + 8 * v37);
          uint64_t v39 = v38[1];
          if (v37 >= (int)v36)
          {
            wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
            wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
            wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
            wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v58);
            uint64_t v38 = *(void **)(*((void *)this + 4) + 8 * v37);
            uint64_t v36 = *((int *)this + 10);
          }
          else
          {
            uint64_t v36 = (int)v36;
          }
          uint64_t v40 = v38[2];
          if (v36 <= v37)
          {
            wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
            wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
            wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
            wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v58);
            uint64_t v38 = *(void **)(*((void *)this + 4) + 8 * v37);
            uint64_t v36 = *((int *)this + 10);
          }
          uint64_t v41 = v38[3];
          if (v36 <= v37)
          {
            wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
            wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
            wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
            wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v58);
            uint64_t v38 = *(void **)(*((void *)this + 4) + 8 * v37);
            uint64_t v36 = *((int *)this + 10);
          }
          uint64_t v42 = v38[4];
          if (v36 <= v37)
          {
            wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
            wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
            wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
            wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v58);
            uint64_t v38 = *(void **)(*((void *)this + 4) + 8 * v37);
          }
          uint64_t v43 = v38[5];
          float v45 = (char *)*((void *)a2 + 27);
          unint64_t v44 = *((void *)a2 + 28);
          if ((unint64_t)v45 >= v44)
          {
            int v47 = (char *)*v26;
            unint64_t v48 = 0xCCCCCCCCCCCCCCCDLL * ((v45 - (unsigned char *)*v26) >> 3);
            unint64_t v49 = v48 + 1;
            if (v48 + 1 > 0x666666666666666) {
              sub_18DEE1FC8();
            }
            unint64_t v50 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v44 - (void)v47) >> 3);
            if (2 * v50 > v49) {
              unint64_t v49 = 2 * v50;
            }
            if (v50 >= 0x333333333333333) {
              unint64_t v51 = 0x666666666666666;
            }
            else {
              unint64_t v51 = v49;
            }
            if (v51)
            {
              uint64_t v52 = (char *)sub_18E01AF14((uint64_t)v57, v51);
              int v47 = (char *)*((void *)a2 + 26);
              float v45 = (char *)*((void *)a2 + 27);
            }
            else
            {
              uint64_t v52 = 0;
            }
            int v53 = &v52[40 * v48];
            *(void *)int v53 = v39;
            *((void *)v53 + 1) = v40;
            *((void *)v53 + 2) = v41;
            *((void *)v53 + 3) = v42;
            *((void *)v53 + 4) = v43;
            int v54 = v53;
            if (v45 != v47)
            {
              do
              {
                long long v55 = *(_OWORD *)(v45 - 40);
                long long v56 = *(_OWORD *)(v45 - 24);
                *((void *)v54 - 1) = *((void *)v45 - 1);
                *(_OWORD *)(v54 - 24) = v56;
                *(_OWORD *)(v54 - 40) = v55;
                v54 -= 40;
                v45 -= 40;
              }
              while (v45 != v47);
              int v47 = (char *)*v26;
            }
            uint64_t v46 = v53 + 40;
            *((void *)a2 + 26) = v54;
            *((void *)a2 + 27) = v53 + 40;
            *((void *)a2 + 28) = &v52[40 * v51];
            if (v47) {
              operator delete(v47);
            }
          }
          else
          {
            *(void *)float v45 = v39;
            *((void *)v45 + 1) = v40;
            *((void *)v45 + 2) = v41;
            uint64_t v46 = v45 + 40;
            *((void *)v45 + 3) = v42;
            *((void *)v45 + 4) = v43;
          }
          *((void *)a2 + 27) = v46;
          ++v37;
          uint64_t v36 = *((int *)this + 10);
        }
        while (v37 < v36);
      }
      return 1;
    }
  }
  return result;
}

void sub_18E0ED350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t raven::ConvertProtobufToMapsRouteType(int *a1)
{
  int v1 = *a1;
  if (*a1 >= 7) {
    LOBYTE(v1) = 0;
  }
  return v1;
}

uint64_t raven::ConvertProtobufToMapVectorEvent(raven *this, const CoreNavigation::CLP::LogEntry::PrivateData::MapVector *a2, raven::MapVectorEvent *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9, int8x16_t a10)
{
  if ((*((unsigned char *)this + 32) & 1) == 0) {
    return 0;
  }
  uint64_t v12 = *((void *)this + 1);
  if (!v12)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(0);
    uint64_t v12 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::MapVector::default_instance_ + 8);
  }
  int v18 = raven::ConvertProtobufToRavenTime(v12, (uint64_t)a2 + 8, 0, a4, a5, a6, a7, a8, a9, a10);
  uint64_t result = 0;
  if (v18)
  {
    if ((*((unsigned char *)this + 32) & 4) == 0) {
      return 0;
    }
    uint64_t v22 = *((void *)this + 2);
    if (!v22)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(0);
      uint64_t v22 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::MapVector::default_instance_ + 16);
    }
    if ((*(unsigned char *)(v22 + 96) & 1) == 0) {
      return 0;
    }
    uint64_t v23 = *((void *)this + 2);
    if (!v23)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)result);
      uint64_t v23 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::MapVector::default_instance_ + 16);
    }
    uint64_t v24 = *(void *)(v23 + 8);
    if (!v24)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(0);
      uint64_t v24 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::DirectionOfTravel::default_instance_ + 8);
    }
    int v25 = raven::ConvertProtobufToRavenTime(v24, (uint64_t)a2 + 104, 0, v13, v14, v15, v16, v17, v19, v20);
    uint64_t result = 0;
    if (v25)
    {
      uint64_t v26 = *((void *)this + 2);
      if (v26)
      {
        *((void *)a2 + 25) = *(void *)(v26 + 16);
      }
      else
      {
        CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(0);
        uint64_t v26 = *((void *)this + 2);
        *((void *)a2 + 25) = *(void *)(*(void *)(CoreNavigation::CLP::LogEntry::PrivateData::MapVector::default_instance_
                                                     + 16)
                                         + 16);
        if (!v26)
        {
          CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(v27);
          uint64_t v26 = *((void *)this + 2);
          *((void *)a2 + 26) = *(void *)(*(void *)(CoreNavigation::CLP::LogEntry::PrivateData::MapVector::default_instance_
                                                       + 16)
                                           + 24);
          if (!v26)
          {
            CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(v28);
            uint64_t v26 = *((void *)this + 2);
            *((void *)a2 + 32) = *(void *)(*(void *)(CoreNavigation::CLP::LogEntry::PrivateData::MapVector::default_instance_
                                                         + 16)
                                             + 32);
            if (!v26)
            {
              CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(v29);
              uint64_t v26 = *((void *)this + 2);
              *((void *)a2 + 33) = *(void *)(*(void *)(CoreNavigation::CLP::LogEntry::PrivateData::MapVector::default_instance_
                                                           + 16)
                                               + 40);
              if (!v26)
              {
                CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(v30);
                uint64_t v26 = *((void *)this + 2);
                *((void *)a2 + 27) = *(void *)(*(void *)(CoreNavigation::CLP::LogEntry::PrivateData::MapVector::default_instance_
                                                             + 16)
                                                 + 80);
                if (!v26)
                {
                  CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(v31);
                  uint64_t v26 = *((void *)this + 2);
                  *((void *)a2 + 28) = *(void *)(*(void *)(CoreNavigation::CLP::LogEntry::PrivateData::MapVector::default_instance_
                                                               + 16)
                                                   + 56);
                  if (!v26)
                  {
                    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(v32);
                    uint64_t v26 = *((void *)this + 2);
                    *((void *)a2 + 29) = *(void *)(*(void *)(CoreNavigation::CLP::LogEntry::PrivateData::MapVector::default_instance_
                                                                 + 16)
                                                     + 64);
                    if (!v26)
                    {
                      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(v33);
                      uint64_t v26 = *((void *)this + 2);
                      *((void *)a2 + 30) = *(void *)(*(void *)(CoreNavigation::CLP::LogEntry::PrivateData::MapVector::default_instance_
                                                                   + 16)
                                                       + 48);
                      if (!v26)
                      {
                        CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(v34);
                        uint64_t v26 = *((void *)this + 2);
                        *((void *)a2 + 31) = *(void *)(*(void *)(CoreNavigation::CLP::LogEntry::PrivateData::MapVector::default_instance_
                                                                     + 16)
                                                         + 72);
                        if (!v26)
                        {
                          CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(v35);
                          uint64_t v26 = *((void *)this + 2);
                          *((unsigned char *)a2 + 272) = *(unsigned char *)(*(void *)(CoreNavigation::CLP::LogEntry::PrivateData::MapVector::default_instance_
                                                                      + 16)
                                                          + 88);
                          if (!v26)
                          {
                            CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(v36);
                            uint64_t v26 = *((void *)this + 2);
                            *((unsigned char *)a2 + 273) = *(unsigned char *)(*(void *)(CoreNavigation::CLP::LogEntry::PrivateData::MapVector::default_instance_
                                                                        + 16)
                                                            + 89);
                            if (!v26)
                            {
                              CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(v37);
                              uint64_t v26 = *((void *)this + 2);
                              *((unsigned char *)a2 + 274) = *(unsigned char *)(*(void *)(CoreNavigation::CLP::LogEntry::PrivateData::MapVector::default_instance_
                                                                          + 16)
                                                              + 90);
                              if (!v26)
                              {
                                CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(v38);
                                uint64_t v26 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::MapVector::default_instance_
                                                + 16);
                              }
                              goto LABEL_30;
                            }
LABEL_29:
                            *((unsigned char *)a2 + 274) = *(unsigned char *)(v26 + 90);
LABEL_30:
                            *((unsigned char *)a2 + 275) = *(unsigned char *)(v26 + 91);
                            return 1;
                          }
LABEL_28:
                          *((unsigned char *)a2 + 273) = *(unsigned char *)(v26 + 89);
                          goto LABEL_29;
                        }
LABEL_27:
                        *((unsigned char *)a2 + 272) = *(unsigned char *)(v26 + 88);
                        goto LABEL_28;
                      }
LABEL_26:
                      *((void *)a2 + 31) = *(void *)(v26 + 72);
                      goto LABEL_27;
                    }
LABEL_25:
                    *((void *)a2 + 30) = *(void *)(v26 + 48);
                    goto LABEL_26;
                  }
LABEL_24:
                  *((void *)a2 + 29) = *(void *)(v26 + 64);
                  goto LABEL_25;
                }
LABEL_23:
                *((void *)a2 + 28) = *(void *)(v26 + 56);
                goto LABEL_24;
              }
LABEL_22:
              *((void *)a2 + 27) = *(void *)(v26 + 80);
              goto LABEL_23;
            }
LABEL_21:
            *((void *)a2 + 33) = *(void *)(v26 + 40);
            goto LABEL_22;
          }
LABEL_20:
          *((void *)a2 + 32) = *(void *)(v26 + 32);
          goto LABEL_21;
        }
      }
      *((void *)a2 + 26) = *(void *)(v26 + 24);
      goto LABEL_20;
    }
  }
  return result;
}

uint64_t raven::ConvertProtobufToMountStateEvent(raven *this, const CoreNavigation::CLP::LogEntry::PrivateData::MotionState *a2, raven::MountStateEvent *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9, int8x16_t a10)
{
  if ((*((unsigned char *)this + 32) & 1) == 0) {
    return 0;
  }
  uint64_t v13 = *((void *)this + 1);
  if (!v13)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(0);
    uint64_t v13 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::MotionState::default_instance_ + 8);
  }
  int v14 = raven::ConvertProtobufToRavenTime(v13, (uint64_t)a2 + 8, 0, a4, a5, a6, a7, a8, a9, a10);
  uint64_t result = 0;
  if (v14)
  {
    if ((*((unsigned char *)this + 32) & 4) == 0) {
      return 0;
    }
    uint64_t v15 = *((void *)this + 2);
    if (!v15)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(0);
      uint64_t v15 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::MotionState::default_instance_ + 16);
    }
    if ((*(unsigned char *)(v15 + 92) & 4) == 0) {
      return 0;
    }
    uint64_t v16 = *((void *)this + 2);
    if (!v16)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)result);
      uint64_t v16 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::MotionState::default_instance_ + 16);
    }
    if ((*(unsigned char *)(v16 + 92) & 8) == 0) {
      return 0;
    }
    uint64_t v17 = *((void *)this + 2);
    if (!v17)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)result);
      uint64_t v17 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::MotionState::default_instance_ + 16);
    }
    uint64_t result = 0;
    switch(*(_DWORD *)(v17 + 20))
    {
      case 0:
        return result;
      case 1:
        double v18 = 0.25;
        goto LABEL_20;
      case 2:
        double v18 = 0.5;
        goto LABEL_20;
      case 3:
        double v18 = 1.0;
        goto LABEL_20;
      default:
        double v18 = 0.0;
LABEL_20:
        uint64_t v19 = *((void *)this + 2);
        if (!v19)
        {
          CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(0);
          uint64_t v19 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::MotionState::default_instance_ + 16);
        }
        int v20 = *(_DWORD *)(v19 + 16);
        uint64_t result = 1;
        if (v20 == 2)
        {
          *((unsigned char *)a2 + 104) = 1;
          *((double *)a2 + 15) = v18;
        }
        else
        {
          if (v20 != 1)
          {
            if (v20) {
              return result;
            }
            *((unsigned char *)a2 + 104) = 0;
            double v21 = 1.0;
LABEL_29:
            *((double *)a2 + 14) = v21;
            return result;
          }
          *((unsigned char *)a2 + 104) = 3;
          *((double *)a2 + 17) = v18;
        }
        double v21 = 1.0 - v18;
        goto LABEL_29;
    }
  }
  return result;
}

uint64_t raven::ConvertProtobufToMovingStateEvent(raven *this, const CoreNavigation::CLP::LogEntry::PrivateData::MotionState *a2, raven::MovingStateEvent *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9, int8x16_t a10)
{
  if ((*((unsigned char *)this + 32) & 1) == 0) {
    return 0;
  }
  uint64_t v13 = *((void *)this + 1);
  if (!v13)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(0);
    uint64_t v13 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::MotionState::default_instance_ + 8);
  }
  int v14 = raven::ConvertProtobufToRavenTime(v13, (uint64_t)a2 + 8, 0, a4, a5, a6, a7, a8, a9, a10);
  uint64_t result = 0;
  if (v14)
  {
    if ((*((unsigned char *)this + 32) & 4) == 0) {
      return 0;
    }
    uint64_t v15 = *((void *)this + 2);
    if (!v15)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(0);
      uint64_t v15 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::MotionState::default_instance_ + 16);
    }
    if ((*(unsigned char *)(v15 + 92) & 1) == 0) {
      return 0;
    }
    uint64_t v16 = *((void *)this + 2);
    if (!v16)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)result);
      uint64_t v16 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::MotionState::default_instance_ + 16);
    }
    if ((*(unsigned char *)(v16 + 92) & 2) == 0) {
      return 0;
    }
    uint64_t v17 = *((void *)this + 2);
    if (!v17)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)result);
      uint64_t v17 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::MotionState::default_instance_ + 16);
    }
    uint64_t result = 0;
    switch(*(_DWORD *)(v17 + 12))
    {
      case 0:
        return result;
      case 1:
        double v18 = 0.8;
        goto LABEL_19;
      case 2:
      case 3:
        double v18 = 0.95;
        goto LABEL_19;
      default:
        double v18 = 0.0;
LABEL_19:
        uint64_t v19 = *((void *)this + 2);
        if (!v19)
        {
          CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(0);
          uint64_t v19 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::MotionState::default_instance_ + 16);
        }
        int v20 = *(_DWORD *)(v19 + 8);
        uint64_t result = 1;
        if (v20 <= 11804)
        {
          if (v20 <= 2009)
          {
            switch(v20)
            {
              case 0:
                *((unsigned char *)a2 + 104) = 0;
                double v24 = 1.0;
                goto LABEL_82;
              case 1:
              case 2:
              case 10:
              case 11:
                *((unsigned char *)a2 + 104) = 1;
                *((double *)a2 + 15) = v18;
                goto LABEL_81;
              case 3:
              case 4:
              case 5:
              case 6:
              case 8:
              case 9:
                goto LABEL_80;
              case 7:
                goto LABEL_76;
              default:
                if ((v20 - 41) <= 0x3B
                  && ((1 << (v20 - 41)) & 0x800000003F08801) != 0)
                {
                  goto LABEL_80;
                }
                break;
            }
            return result;
          }
          if (v20 > 2100)
          {
            if (v20 <= 2149)
            {
              if (v20 != 2101)
              {
                if (v20 != 2105) {
                  return result;
                }
                goto LABEL_76;
              }
            }
            else
            {
              if (v20 == 2150 || v20 == 3015)
              {
LABEL_76:
                *((unsigned char *)a2 + 104) = 2;
                *((double *)a2 + 16) = v18;
                goto LABEL_81;
              }
              if (v20 != 3016) {
                return result;
              }
            }
          }
          else
          {
            char v22 = v20 + 38;
            if ((v20 - 2010) > 0x3D) {
              return result;
            }
            if (((1 << v22) & 0x2480000000005400) == 0)
            {
              if (((1 << v22) & 0x8004000000001) == 0) {
                return result;
              }
              goto LABEL_76;
            }
          }
          goto LABEL_80;
        }
        if (v20 > 15651)
        {
          if (v20 <= 18199)
          {
            if (v20 <= 15732)
            {
              uint64_t v23 = (v20 - 15652);
              if (v23 > 0x3A) {
                return result;
              }
              if (((1 << (v20 - 36)) & 0x400000000800101) == 0)
              {
                if (v23 != 18) {
                  return result;
                }
                goto LABEL_76;
              }
LABEL_80:
              *((unsigned char *)a2 + 104) = 3;
              *((double *)a2 + 17) = v18;
LABEL_81:
              double v24 = 1.0 - v18;
LABEL_82:
              *((double *)a2 + 14) = v24;
              return result;
            }
            if (v20 == 15733 || v20 == 17150) {
              goto LABEL_80;
            }
            int v21 = 18070;
          }
          else if (v20 > 19149)
          {
            if (v20 <= 90602)
            {
              if (v20 == 19150) {
                goto LABEL_80;
              }
              int v21 = 19160;
            }
            else
            {
              if (v20 == 90603 || v20 == 515621) {
                goto LABEL_80;
              }
              int v21 = 515652;
            }
          }
          else
          {
            if ((v20 - 18200) <= 0x28 && ((1 << (v20 - 24)) & 0x10002000001) != 0
              || v20 == 19030)
            {
              goto LABEL_80;
            }
            int v21 = 19090;
          }
        }
        else if (v20 > 15329)
        {
          if ((v20 - 15562) <= 0x3A && ((1 << (v20 + 54)) & 0x401000040000001) != 0
            || (v20 - 15330) <= 0x1E && ((1 << (v20 + 30)) & 0x40100001) != 0)
          {
            goto LABEL_80;
          }
          int v21 = 15460;
        }
        else if (v20 <= 15054)
        {
          if (v20 == 11805 || v20 == 12150) {
            goto LABEL_80;
          }
          int v21 = 15030;
        }
        else
        {
          if ((v20 - 15100) <= 0x32 && ((1 << (v20 + 4)) & 0x4000000000401) != 0
            || (v20 - 15230) <= 0x19 && ((1 << (v20 - 126)) & 0x2000401) != 0)
          {
            goto LABEL_80;
          }
          int v21 = 15055;
        }
        if (v20 != v21) {
          return result;
        }
        goto LABEL_80;
    }
  }
  return result;
}

cnprint::CNPrinter *raven::ConvertProtobufToPositionEvent(raven *this, const CoreNavigation::CLP::LogEntry::PrivateData::Location *a2, raven::PositionEvent *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9, int8x16_t a10)
{
  uint64_t result = 0;
  v61[0] = 0;
  v61[1] = 0;
  char v62 = 0;
  uint64_t v63 = 0;
  uint64_t v64 = 0;
  char v65 = 0;
  uint64_t v66 = 0;
  uint64_t v67 = 0;
  char v68 = 0;
  uint64_t v69 = 0;
  uint64_t v70 = 0;
  uint64_t v71 = 0x7FF8000000000000;
  if (*((unsigned char *)this + 100))
  {
    uint64_t v13 = *((void *)this + 1);
    if (!v13)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(0);
      uint64_t v13 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::Location::default_instance_ + 8);
    }
    int v14 = raven::ConvertProtobufToRavenTime(v13, (uint64_t)v61, 0, a4, a5, a6, a7, a8, a9, a10);
    uint64_t result = 0;
    if (v14)
    {
      uint64_t v17 = *((void *)this + 3);
      if (!v17)
      {
        CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(0);
        uint64_t v17 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::Location::default_instance_ + 24);
      }
      if ((*(unsigned char *)(v17 + 362) & 0x10) == 0)
      {
        if (cnprint::CNPrinter::GetLogLevel(result) <= 1)
        {
          v59.i16[0] = 12;
          unsigned __int8 v60 = 1;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v59, &v60, "location private does not have mach continuous time for position event", v18, v19, v20, v21, v22, v58);
        }
        return 0;
      }
      uint64_t v23 = *((void *)this + 3);
      if (!v23)
      {
        CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(result);
        uint64_t v23 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::Location::default_instance_ + 24);
      }
      v15.i64[0] = *(void *)(v23 + 128);
      int8x16_t v59 = 0uLL;
      CNTimeSpan::SetTimeSpan(v59.i64, 0, v15, v16);
      int8x16_t v24 = v59;
      *(int8x16_t *)((char *)a2 + 8) = v59;
      uint64_t result = (cnprint::CNPrinter *)raven::PopulateAllTimeFields((uint64_t)a2 + 8, (uint64_t)v61, v24, v25);
      uint64_t v26 = *((void *)this + 2);
      if (!v26)
      {
        CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(result);
        uint64_t v26 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::Location::default_instance_ + 16);
      }
      if ((*(unsigned char *)(v26 + 153) & 0x10) == 0)
      {
        char v27 = 0;
        *((unsigned char *)a2 + 200) = 0;
        goto LABEL_17;
      }
      uint64_t v46 = *((void *)this + 2);
      if (!v46)
      {
        CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(result);
        uint64_t v46 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::Location::default_instance_ + 16);
      }
      int v47 = raven::ConvertProtobufToLocationType(*(_DWORD *)(v46 + 104));
      uint64_t result = 0;
      *((unsigned char *)a2 + 200) = v47;
      if ((v47 - 12) >= 2)
      {
        if (v47 == 9 || (char v27 = 0, v47 == 1))
        {
          uint64_t v50 = *((void *)this + 3);
          if (!v50)
          {
            CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(0);
            uint64_t v50 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::Location::default_instance_ + 24);
          }
          if ((*(unsigned char *)(v50 + 360) & 8) != 0)
          {
            uint64_t v57 = *((void *)this + 3);
            if (!v57)
            {
              CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(result);
              uint64_t v57 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::Location::default_instance_ + 24);
            }
            v48.i64[0] = *(void *)(v57 + 32);
            int8x16_t v59 = 0uLL;
            uint64_t result = (cnprint::CNPrinter *)CNTimeSpan::SetTimeSpan(v59.i64, 0, v48, v49);
            *((int8x16_t *)a2 + 2) = v59;
            char v27 = 1;
          }
          else
          {
            char v27 = 0;
          }
        }
LABEL_17:
        *((unsigned char *)a2 + 24) = v27;
        long long v28 = *(_OWORD *)((char *)a2 + 24);
        *(_OWORD *)((char *)a2 + 104) = *(_OWORD *)((char *)a2 + 8);
        *(_OWORD *)((char *)a2 + 120) = v28;
        long long v29 = *(_OWORD *)((char *)a2 + 72);
        *(_OWORD *)((char *)a2 + 184) = *(_OWORD *)((char *)a2 + 88);
        *(_OWORD *)((char *)a2 + 168) = v29;
        long long v30 = *(_OWORD *)((char *)a2 + 40);
        *(_OWORD *)((char *)a2 + 152) = *(_OWORD *)((char *)a2 + 56);
        *(_OWORD *)((char *)a2 + 136) = v30;
        uint64_t v31 = *((void *)this + 2);
        if (!v31)
        {
          CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(result);
          uint64_t v31 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::Location::default_instance_ + 16);
        }
        if (*(double *)(v31 + 16) <= 0.0) {
          goto LABEL_34;
        }
        uint64_t v32 = *((void *)this + 2);
        if (!v32)
        {
          CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(result);
          uint64_t v32 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::Location::default_instance_ + 16);
        }
        if ((*(void *)(v32 + 16) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
        {
LABEL_34:
          *((unsigned char *)a2 + 201) = 0;
          *((void *)a2 + 26) = 0;
          *((void *)a2 + 27) = 0;
        }
        else
        {
          uint64_t v33 = *((void *)this + 2);
          if (!v33)
          {
            CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(result);
            uint64_t v33 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::Location::default_instance_ + 16);
          }
          uint64_t v34 = *(void *)(v33 + 8);
          if (!v34)
          {
            CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(result);
            uint64_t v34 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::DaemonLocation::default_instance_ + 8);
          }
          if (fabs(*(double *)(v34 + 8)) >= 2.22044605e-16)
          {
            *((void *)a2 + 26) = 0;
            uint64_t v38 = (double *)((char *)a2 + 208);
            *((unsigned char *)a2 + 201) = 1;
            *((void *)a2 + 27) = 0;
          }
          else
          {
            uint64_t v35 = *((void *)this + 2);
            if (!v35)
            {
              CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(result);
              uint64_t v35 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::Location::default_instance_ + 16);
            }
            uint64_t v36 = *(void *)(v35 + 8);
            if (!v36)
            {
              CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(result);
              uint64_t v36 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::DaemonLocation::default_instance_ + 8);
            }
            double v37 = fabs(*(double *)(v36 + 16));
            *((void *)a2 + 26) = 0;
            uint64_t v38 = (double *)((char *)a2 + 208);
            *((unsigned char *)a2 + 201) = v37 >= 2.22044605e-16;
            *((void *)a2 + 27) = 0;
            if (v37 < 2.22044605e-16) {
              goto LABEL_35;
            }
          }
          uint64_t v51 = *((void *)this + 2);
          if (!v51)
          {
            CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(result);
            uint64_t v51 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::Location::default_instance_ + 16);
          }
          uint64_t v52 = *(void *)(v51 + 8);
          if (!v52)
          {
            CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(result);
            uint64_t v52 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::DaemonLocation::default_instance_ + 8);
          }
          *uint64_t v38 = *(double *)(v52 + 8) * 0.0174532925;
          uint64_t v53 = *((void *)this + 2);
          if (!v53)
          {
            CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(result);
            uint64_t v53 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::Location::default_instance_ + 16);
          }
          uint64_t v54 = *(void *)(v53 + 8);
          if (!v54)
          {
            CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(result);
            uint64_t v54 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::DaemonLocation::default_instance_ + 8);
          }
          *((double *)a2 + 27) = *(double *)(v54 + 16) * 0.0174532925;
          uint64_t v55 = *((void *)this + 2);
          if (!v55)
          {
            CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(result);
            uint64_t v55 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::Location::default_instance_ + 16);
          }
          double v56 = *(double *)(v55 + 16) * *(double *)(v55 + 16) * 0.5;
          *((double *)a2 + 29) = v56;
          *((double *)a2 + 32) = v56;
          *((void *)a2 + 30) = 0;
        }
LABEL_35:
        uint64_t v39 = *((void *)this + 2);
        if (!v39)
        {
          CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(result);
          uint64_t v39 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::Location::default_instance_ + 16);
        }
        if (*(double *)(v39 + 32) <= 0.0)
        {
          *((unsigned char *)a2 + 202) = 0;
          *((void *)a2 + 28) = 0;
        }
        else
        {
          uint64_t v40 = *((void *)this + 2);
          if (!v40)
          {
            CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(result);
            uint64_t v40 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::Location::default_instance_ + 16);
          }
          uint64_t v41 = *(void *)(v40 + 32) & 0x7FFFFFFFFFFFFFFFLL;
          *((unsigned char *)a2 + 202) = v41 < 0x7FF0000000000000;
          *((void *)a2 + 28) = 0;
          if (v41 <= 0x7FEFFFFFFFFFFFFFLL)
          {
            uint64_t v42 = *((void *)this + 2);
            if (!v42)
            {
              CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(result);
              uint64_t v42 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::Location::default_instance_ + 16);
            }
            double v43 = *(double *)(v42 + 24);
            uint64_t v44 = *((void *)this + 3);
            if (!v44)
            {
              CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(result);
              uint64_t v44 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::Location::default_instance_ + 24);
            }
            *((double *)a2 + 28) = v43 + *(float *)(v44 + 100);
            *((void *)a2 + 31) = 0;
            *((void *)a2 + 33) = 0;
            uint64_t v45 = *((void *)this + 2);
            if (!v45)
            {
              CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(result);
              uint64_t v45 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::Location::default_instance_ + 16);
            }
            *((double *)a2 + 34) = *(double *)(v45 + 32) * *(double *)(v45 + 32);
          }
        }
        if (sub_18E0B99D0((uint64_t)a2)) {
          sub_18E0B9CE0((uint64_t)a2);
        }
        return (cnprint::CNPrinter *)((*((unsigned __int8 *)a2 + 201) | *((unsigned __int8 *)a2 + 280)) != 0);
      }
    }
  }
  return result;
}

uint64_t raven::ConvertProtobufToLocationType(unsigned int a1)
{
  if (a1 >= 0xE) {
    return 1;
  }
  else {
    return a1;
  }
}

uint64_t raven::ConvertProtobufToRateGyroEvent(float32x2_t *this, const CoreNavigation::CLP::LogEntry::PrivateData::GyroSample *a2, raven::RateGyroEvent *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9, int8x16_t a10)
{
  if ((this[4].i8[0] & 1) == 0) {
    return 0;
  }
  uint64_t v13 = (uint64_t)this[1];
  if (!v13)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(0);
    uint64_t v13 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::GyroSample::default_instance_ + 8);
  }
  int v14 = raven::ConvertProtobufToRavenTime(v13, (uint64_t)a2 + 8, 0, a4, a5, a6, a7, a8, a9, a10);
  uint64_t result = 0;
  if (v14)
  {
    *(float64x2_t *)((char *)a2 + 104) = vcvtq_f64_f32(this[2]);
    *((double *)a2 + 15) = this[3].f32[0];
    return 1;
  }
  return result;
}

BOOL raven::ConvertProtobufToRavenPlatformInfoObject(raven *this, const CoreNavigation::CLP::LogEntry::Raven::RavenPlatformInfo *a2, raven::RavenPlatformInfo *a3)
{
  CNPlatformInfo::CNPlatformInfo((CNPlatformInfo *)&v10, this);
  *(_WORD *)a2 = v10;
  *((unsigned char *)a2 + 2) = v11;
  int v4 = (void **)((char *)a2 + 8);
  if (*((char *)a2 + 31) < 0) {
    operator delete(*v4);
  }
  *(_OWORD *)int v4 = __p;
  *((void *)a2 + 3) = v13;
  HIBYTE(v13) = 0;
  LOBYTE(__p) = 0;
  uint64_t v5 = (_OWORD *)((char *)a2 + 32);
  if (*((char *)a2 + 55) < 0)
  {
    operator delete(*((void **)a2 + 4));
    int v8 = SHIBYTE(v13);
    *uint64_t v5 = v14;
    uint64_t v7 = v16;
    *((void *)a2 + 6) = v15;
    HIBYTE(v15) = 0;
    LOBYTE(v14) = 0;
    *((void *)a2 + 7) = v7;
    if (v8 < 0)
    {
      operator delete((void *)__p);
      LODWORD(v7) = *((_DWORD *)a2 + 14);
    }
  }
  else
  {
    *uint64_t v5 = v14;
    uint64_t v6 = v16;
    *((void *)a2 + 6) = v15;
    *((void *)a2 + 7) = v6;
    LODWORD(v7) = v6;
  }
  BOOL result = 0;
  if (*(unsigned __int16 *)a2 >= 2u)
  {
    if (v7) {
      return *((_DWORD *)a2 + 15) != 0;
    }
  }
  return result;
}

uint64_t raven::ConvertProtobufToSignalEnvironmentEvent(raven *this, const CoreNavigation::CLP::LogEntry::PrivateData::SignalEnvironment *a2, raven::SignalEnvironmentEvent *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9, int8x16_t a10)
{
  if ((*((unsigned char *)this + 32) & 1) == 0) {
    return 0;
  }
  uint64_t v13 = *((void *)this + 1);
  if (!v13)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(0);
    uint64_t v13 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::SignalEnvironment::default_instance_ + 8);
  }
  int v14 = raven::ConvertProtobufToRavenTime(v13, (uint64_t)a2 + 8, 0, a4, a5, a6, a7, a8, a9, a10);
  uint64_t result = 0;
  if (v14)
  {
    int v15 = *((_DWORD *)this + 8);
    if ((v15 & 6) == 0)
    {
      __int16 v26 = 12;
      unsigned __int8 v25 = 4;
      uint64_t v17 = (*(uint64_t (**)(const CoreNavigation::CLP::LogEntry::PrivateData::SignalEnvironment *))(*(void *)a2 + 16))(a2);
      double v24 = v18 + (double)v17;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v26, &v25, "t,%.3lf,No signal environment", v19, v20, v21, v22, v23, SLOBYTE(v24));
      return 0;
    }
    if ((v15 & 4) != 0)
    {
      if ((*((_DWORD *)this + 5) - 1) < 6)
      {
        LOBYTE(v16) = *((unsigned char *)this + 20);
LABEL_15:
        *((unsigned char *)a2 + 104) = v16;
        return 1;
      }
      if ((v15 & 2) == 0)
      {
        LOBYTE(v16) = 0;
        goto LABEL_15;
      }
    }
    unsigned int v16 = *((_DWORD *)this + 4);
    if (v16 >= 7) {
      LOBYTE(v16) = 0;
    }
    goto LABEL_15;
  }
  return result;
}

uint64_t raven::ConvertProtobufToSignalEnvironmentType(int *a1)
{
  int v1 = *a1;
  if (*a1 >= 7) {
    LOBYTE(v1) = 0;
  }
  return v1;
}

uint64_t raven::ConvertProtobufToStepCountEvent(raven *this, const CoreNavigation::CLP::LogEntry::PrivateData::StepCount *a2, raven::StepCountEvent *a3)
{
  if ((*((unsigned char *)this + 32) & 4) != 0)
  {
    uint64_t v5 = (const CoreNavigation::CLP::LogEntry::PrivateData::StepCountEntry *)*((void *)this + 2);
    if (!v5)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(this);
      uint64_t v5 = *(const CoreNavigation::CLP::LogEntry::PrivateData::StepCountEntry **)(CoreNavigation::CLP::LogEntry::PrivateData::StepCount::default_instance_
                                                                                + 16);
    }
    CoreNavigation::CLP::LogEntry::PrivateData::StepCountEntry::StepCountEntry((CoreNavigation::CLP::LogEntry::PrivateData::StepCountEntry *)v30, v5);
    if ((v38 & 1) == 0) {
      goto LABEL_31;
    }
    uint64_t v13 = v31;
    if (!v31)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(0);
      uint64_t v13 = *(CoreNavigation::CLP::LogEntry::PrivateData **)(CoreNavigation::CLP::LogEntry::PrivateData::StepCountEntry::default_instance_
                                                           + 8);
    }
    uint64_t v14 = raven::ConvertProtobufToRavenTime((uint64_t)v13, (uint64_t)a2 + 8, 0, v6, v7, v8, v9, v10, v11, v12);
    if ((v14 & 1) == 0) {
      goto LABEL_31;
    }
    if ((v38 & 0x8000) == 0)
    {
LABEL_22:
      if (!v37) {
        goto LABEL_25;
      }
      if (v37 <= 3)
      {
        *((unsigned char *)a2 + 104) = v37;
LABEL_25:
        __int16 v19 = v38;
        if ((v38 & 0x10000) != 0)
        {
          *((_DWORD *)a2 + 34) = v35;
          if ((v19 & 0x20) == 0)
          {
LABEL_27:
            if ((v19 & 0x800) == 0) {
              goto LABEL_28;
            }
            goto LABEL_36;
          }
        }
        else if ((v38 & 0x20) == 0)
        {
          goto LABEL_27;
        }
        *((void *)a2 + 18) = v33;
        if ((v19 & 0x800) == 0)
        {
LABEL_28:
          if ((v19 & 8) == 0)
          {
LABEL_30:
            uint64_t v3 = 1;
LABEL_32:
            CoreNavigation::CLP::LogEntry::PrivateData::StepCountEntry::~StepCountEntry((CoreNavigation::CLP::LogEntry::PrivateData::StepCountEntry *)v30);
            return v3;
          }
LABEL_29:
          *((_DWORD *)a2 + 39) = v32;
          goto LABEL_30;
        }
LABEL_36:
        *((_DWORD *)a2 + 38) = v34;
        if ((v19 & 8) == 0) {
          goto LABEL_30;
        }
        goto LABEL_29;
      }
LABEL_31:
      uint64_t v3 = 0;
      goto LABEL_32;
    }
    int v15 = v36;
    if (!v36)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)v14);
      int v15 = *(const CoreNavigation::CLP::LogEntry::PrivateData::AccelerometerPace **)(CoreNavigation::CLP::LogEntry::PrivateData::StepCountEntry::default_instance_
                                                                                    + 104);
    }
    CoreNavigation::CLP::LogEntry::PrivateData::AccelerometerPace::AccelerometerPace((CoreNavigation::CLP::LogEntry::PrivateData::AccelerometerPace *)&v25, v15);
    char v16 = v29;
    if (v29)
    {
      BOOL v21 = ((*(void *)&v26 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF
         && (*(void *)&v26 & 0x7FFFFFFFFFFFFFFFuLL) - 1 >= 0xFFFFFFFFFFFFFLL;
      double v22 = 0.0;
      if (!v21) {
        double v22 = 1.0 / v26;
      }
      *((double *)a2 + 14) = v22;
      if ((v16 & 4) == 0)
      {
LABEL_14:
        if ((v16 & 2) == 0)
        {
LABEL_21:
          CoreNavigation::CLP::LogEntry::PrivateData::AccelerometerPace::~AccelerometerPace((CoreNavigation::CLP::LogEntry::PrivateData::AccelerometerPace *)&v25);
          goto LABEL_22;
        }
LABEL_15:
        BOOL v17 = ((*(void *)&v27 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF
           && (*(void *)&v27 & 0x7FFFFFFFFFFFFFFFuLL) - 1 >= 0xFFFFFFFFFFFFFLL;
        double v18 = 0.0;
        if (!v17) {
          double v18 = 1.0 / v27;
        }
        *((double *)a2 + 16) = v18;
        goto LABEL_21;
      }
    }
    else if ((v29 & 4) == 0)
    {
      goto LABEL_14;
    }
    BOOL v23 = ((*(void *)&v28 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF
       && (*(void *)&v28 & 0x7FFFFFFFFFFFFFFFuLL) - 1 >= 0xFFFFFFFFFFFFFLL;
    double v24 = 0.0;
    if (!v23) {
      double v24 = 1.0 / v28;
    }
    *((double *)a2 + 15) = v24;
    if ((v16 & 2) == 0) {
      goto LABEL_21;
    }
    goto LABEL_15;
  }
  return 0;
}

void sub_18E0EE6F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  CoreNavigation::CLP::LogEntry::PrivateData::StepCountEntry::~StepCountEntry((CoreNavigation::CLP::LogEntry::PrivateData::StepCountEntry *)va);
  _Unwind_Resume(a1);
}

uint64_t raven::ConvertProtobufToTimerEvent(raven *this, const CoreNavigation::CLP::LogEntry::PrivateData::Timer *a2, raven::TimerEvent *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9, int8x16_t a10)
{
  if ((*((unsigned char *)this + 20) & 1) == 0) {
    return 0;
  }
  uint64_t v12 = *((void *)this + 1);
  if (!v12)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(0);
    uint64_t v12 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::Timer::default_instance_ + 8);
  }

  return raven::ConvertProtobufToRavenTime(v12, (uint64_t)a2 + 8, 0, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t raven::ConvertProtobufToTunnelBridgeNotificationEvent(raven *this, const CoreNavigation::CLP::LogEntry::PrivateData::TunnelBridgeNotification *a2, raven::TunnelBridgeNotificationEvent *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9, int8x16_t a10)
{
  uint64_t v12 = *((void *)this + 1);
  if (!v12)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(0);
    uint64_t v12 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::TunnelBridgeNotification::default_instance_ + 8);
  }
  int v18 = raven::ConvertProtobufToRavenTime(v12, (uint64_t)a2 + 8, 0, a4, a5, a6, a7, a8, a9, a10);
  uint64_t result = 0;
  if (v18)
  {
    if ((*((unsigned char *)this + 32) & 4) == 0) {
      return 0;
    }
    uint64_t v22 = *((void *)this + 2);
    if (!v22)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(0);
      uint64_t v22 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::TunnelBridgeNotification::default_instance_ + 16);
    }
    uint64_t v23 = *(void *)(v22 + 8);
    if (!v23)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(0);
      uint64_t v23 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::TunnelBridgeAssistance::default_instance_ + 8);
    }
    int v24 = raven::ConvertProtobufToRavenTime(v23, (uint64_t)a2 + 104, 0, v13, v14, v15, v16, v17, v19, v20);
    uint64_t result = 0;
    if (v24)
    {
      uint64_t v25 = *((void *)this + 2);
      if (!v25)
      {
        CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(0);
        uint64_t v25 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::TunnelBridgeNotification::default_instance_ + 16);
      }
      if ((*(unsigned char *)(v25 + 48) & 8) == 0) {
        return 0;
      }
      uint64_t v26 = *((void *)this + 2);
      if (!v26)
      {
        CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)result);
        uint64_t v26 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::TunnelBridgeNotification::default_instance_ + 16);
      }
      if ((*(unsigned char *)(v26 + 48) & 2) == 0) {
        return 0;
      }
      uint64_t v27 = *((void *)this + 2);
      if (!v27)
      {
        CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)result);
        uint64_t v27 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::TunnelBridgeNotification::default_instance_ + 16);
      }
      if ((*(unsigned char *)(v27 + 48) & 4) == 0) {
        return 0;
      }
      uint64_t v28 = *((void *)this + 2);
      if (!v28)
      {
        CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)result);
        uint64_t v28 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::TunnelBridgeNotification::default_instance_ + 16);
      }
      if ((*(unsigned char *)(v28 + 48) & 0x20) == 0) {
        return 0;
      }
      uint64_t v29 = *((void *)this + 2);
      if (!v29)
      {
        CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)result);
        uint64_t v29 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::TunnelBridgeNotification::default_instance_ + 16);
      }
      if ((*(unsigned char *)(v29 + 48) & 0x10) == 0) {
        return 0;
      }
      uint64_t v30 = *((void *)this + 2);
      if (!v30)
      {
        CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)result);
        uint64_t v30 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::TunnelBridgeNotification::default_instance_ + 16);
      }
      if ((*(unsigned char *)(v30 + 48) & 0x40) == 0) {
        return 0;
      }
      uint64_t v31 = *((void *)this + 2);
      if (!v31)
      {
        CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)result);
        uint64_t v31 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::TunnelBridgeNotification::default_instance_ + 16);
      }
      if ((*(unsigned char *)(v31 + 48) & 0x80) == 0) {
        return 0;
      }
      uint64_t v32 = *((void *)this + 2);
      if (v32)
      {
        *((void *)a2 + 27) = *(void *)(v32 + 32);
      }
      else
      {
        CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)result);
        uint64_t v32 = *((void *)this + 2);
        *((void *)a2 + 27) = *(void *)(*(void *)(CoreNavigation::CLP::LogEntry::PrivateData::TunnelBridgeNotification::default_instance_
                                                     + 16)
                                         + 32);
        if (!v32)
        {
          CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(v33);
          uint64_t v32 = *((void *)this + 2);
          *((void *)a2 + 25) = *(void *)(*(void *)(CoreNavigation::CLP::LogEntry::PrivateData::TunnelBridgeNotification::default_instance_
                                                       + 16)
                                           + 16);
          if (!v32)
          {
            CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(v34);
            uint64_t v32 = *((void *)this + 2);
            *((void *)a2 + 26) = *(void *)(*(void *)(CoreNavigation::CLP::LogEntry::PrivateData::TunnelBridgeNotification::default_instance_
                                                         + 16)
                                             + 24);
            if (!v32)
            {
              CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(v35);
              uint64_t v32 = *((void *)this + 2);
              *((unsigned char *)a2 + 225) = *(unsigned char *)(*(void *)(CoreNavigation::CLP::LogEntry::PrivateData::TunnelBridgeNotification::default_instance_
                                                          + 16)
                                              + 41);
              if (!v32)
              {
                CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(v36);
                uint64_t v32 = *((void *)this + 2);
                *((unsigned char *)a2 + 224) = *(unsigned char *)(*(void *)(CoreNavigation::CLP::LogEntry::PrivateData::TunnelBridgeNotification::default_instance_
                                                            + 16)
                                                + 40);
                if (!v32)
                {
                  CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(v37);
                  uint64_t v32 = *((void *)this + 2);
                  *((unsigned char *)a2 + 226) = *(unsigned char *)(*(void *)(CoreNavigation::CLP::LogEntry::PrivateData::TunnelBridgeNotification::default_instance_
                                                              + 16)
                                                  + 42);
                  if (!v32)
                  {
                    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(v38);
                    uint64_t v32 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::TunnelBridgeNotification::default_instance_
                                    + 16);
                  }
                  goto LABEL_40;
                }
LABEL_39:
                *((unsigned char *)a2 + 226) = *(unsigned char *)(v32 + 42);
LABEL_40:
                *((unsigned char *)a2 + 227) = *(unsigned char *)(v32 + 43);
                return 1;
              }
LABEL_38:
              *((unsigned char *)a2 + 224) = *(unsigned char *)(v32 + 40);
              goto LABEL_39;
            }
LABEL_37:
            *((unsigned char *)a2 + 225) = *(unsigned char *)(v32 + 41);
            goto LABEL_38;
          }
LABEL_36:
          *((void *)a2 + 26) = *(void *)(v32 + 24);
          goto LABEL_37;
        }
      }
      *((void *)a2 + 25) = *(void *)(v32 + 16);
      goto LABEL_36;
    }
  }
  return result;
}

uint64_t raven::ConvertProtobufFrameTypeToClientLocationReferenceFrameType(_DWORD *a1)
{
  if (*a1 == 2) {
    return 2;
  }
  else {
    return *a1 == 1;
  }
}

uint64_t raven::ConvertProtobufToTunnelEndPointAssistanceEvent(raven *this, const CoreNavigation::CLP::LogEntry::PrivateData::TunnelEndPoint *a2, raven::TunnelEndPointAssistanceEvent *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9, int8x16_t a10)
{
  uint64_t v12 = *((void *)this + 1);
  if (!v12)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(0);
    uint64_t v12 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::TunnelEndPoint::default_instance_ + 8);
  }
  int v18 = raven::ConvertProtobufToRavenTime(v12, (uint64_t)a2 + 8, 0, a4, a5, a6, a7, a8, a9, a10);
  uint64_t result = 0;
  if (v18)
  {
    if ((*((unsigned char *)this + 32) & 4) == 0) {
      return 0;
    }
    uint64_t v22 = *((void *)this + 2);
    if (!v22)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(0);
      uint64_t v22 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::TunnelEndPoint::default_instance_ + 16);
    }
    uint64_t v23 = *(void *)(v22 + 8);
    if (!v23)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(0);
      uint64_t v23 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::TunnelEndPointAssistance::default_instance_ + 8);
    }
    int v24 = raven::ConvertProtobufToRavenTime(v23, (uint64_t)a2 + 104, 0, v13, v14, v15, v16, v17, v19, v20);
    uint64_t result = 0;
    if (v24)
    {
      if ((~*(_DWORD *)(v22 + 124) & 0x7E) != 0)
      {
        if (cnprint::CNPrinter::GetLogLevel(0) <= 1)
        {
          __int16 v34 = 12;
          unsigned __int8 v33 = 1;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v34, &v33, "tunnel end position assistance does not contain all required data", v27, v28, v29, v30, v31, v32);
        }
        return 0;
      }
      *(_OWORD *)((char *)a2 + 200) = *(_OWORD *)(v22 + 16);
      *(_OWORD *)((char *)a2 + 216) = *(_OWORD *)(v22 + 32);
      *((void *)a2 + 29) = *(void *)(v22 + 48);
      int v25 = *(_DWORD *)(v22 + 72);
      if (v25 == 2) {
        char v26 = 2;
      }
      else {
        char v26 = v25 == 1;
      }
      *((unsigned char *)a2 + 240) = v26;
      return 1;
    }
  }
  return result;
}

CoreNavigation::CLP::LogEntry::PrivateData *raven::ConvertProtobufToVelocityEvent(raven *this, const CoreNavigation::CLP::LogEntry::PrivateData::Location *a2, raven::VelocityEvent *a3, raven::VelocityEvent *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, int8x16_t a10)
{
  v11[1] = 0;
  v11[2] = 0;
  v11[0] = &unk_1EDD137C0;
  char v12 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  char v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  char v18 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  uint64_t v21 = 0x7FF8000000000000;
  char v24 = 0;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  char v27 = 0;
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  char v30 = 0;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  uint64_t v33 = 0x7FF8000000000000;
  char v34 = 0;
  int8x16_t v36 = (int8x16_t)vdupq_n_s64(0x7FF8000000000000uLL);
  int8x16_t v37 = v36;
  int8x16_t v38 = v36;
  int8x16_t v39 = v36;
  uint64_t v40 = 0x7FF8000000000000;
  int8x16_t v42 = v36;
  int8x16_t v43 = v36;
  int8x16_t v44 = v36;
  int8x16_t v45 = v36;
  uint64_t v46 = 0x7FF8000000000000;
  __int16 v35 = 0;
  char v41 = 0;
  return raven::ConvertProtobufToVelocityEvent(this, (const CoreNavigation::CLP::LogEntry::PrivateData::Location *)v11, a2, a4, a5, a6, a7, a8, v36, a10);
}

CoreNavigation::CLP::LogEntry::PrivateData *raven::ConvertProtobufToVelocityEvent(raven *this, const CoreNavigation::CLP::LogEntry::PrivateData::Location *a2, const raven::PositionEvent *a3, raven::VelocityEvent *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9, int8x16_t a10)
{
  uint64_t result = 0;
  uint64_t v144 = *MEMORY[0x1E4F143B8];
  v128[1] = 0;
  v128[0] = 0;
  char v129 = 0;
  uint64_t v131 = 0;
  uint64_t v130 = 0;
  char v132 = 0;
  uint64_t v134 = 0;
  uint64_t v133 = 0;
  char v135 = 0;
  uint64_t v137 = 0;
  uint64_t v136 = 0;
  uint64_t v138 = 0x7FF8000000000000;
  if (*((unsigned char *)this + 100))
  {
    uint64_t v14 = *((void *)this + 1);
    if (!v14)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(0);
      uint64_t v14 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::Location::default_instance_ + 8);
    }
    uint64_t result = (CoreNavigation::CLP::LogEntry::PrivateData *)raven::ConvertProtobufToRavenTime(v14, (uint64_t)v128, 0, (uint64_t)a4, a5, a6, a7, a8, a9, a10);
    if (result)
    {
      uint64_t v17 = *((void *)this + 3);
      if (!v17)
      {
        CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(result);
        uint64_t v17 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::Location::default_instance_ + 24);
      }
      if ((*(unsigned char *)(v17 + 362) & 0x10) == 0)
      {
        if (cnprint::CNPrinter::GetLogLevel(result) <= 1)
        {
          v122.i16[0] = 12;
          LOBYTE(v117) = 1;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v122, (unsigned __int8 *)&v117, "location private does not have mach continuous time for velocity event", v18, v19, v20, v21, v22, v91);
        }
        return 0;
      }
      uint64_t v23 = *((void *)this + 3);
      if (!v23)
      {
        CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(result);
        uint64_t v23 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::Location::default_instance_ + 24);
      }
      v15.i64[0] = *(void *)(v23 + 128);
      int8x16_t v122 = 0uLL;
      CNTimeSpan::SetTimeSpan(v122.i64, 0, v15, v16);
      int8x16_t v24 = v122;
      *(int8x16_t *)((char *)a3 + 8) = v122;
      LogLevel = (CoreNavigation::CLP::LogEntry::PrivateData *)raven::PopulateAllTimeFields((uint64_t)a3 + 8, (uint64_t)v128, v24, v25);
      uint64_t v27 = *((void *)this + 2);
      if (!v27)
      {
        CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(LogLevel);
        uint64_t v27 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::Location::default_instance_ + 16);
      }
      if ((*(unsigned char *)(v27 + 153) & 0x10) != 0)
      {
        uint64_t v29 = *((void *)this + 2);
        if (!v29)
        {
          CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(LogLevel);
          uint64_t v29 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::Location::default_instance_ + 16);
        }
        LogLevel = (CoreNavigation::CLP::LogEntry::PrivateData *)raven::ConvertProtobufToLocationType(*(_DWORD *)(v29 + 104));
        *((unsigned char *)a3 + 200) = (_BYTE)LogLevel;
        if ((LogLevel | 8) != 9) {
          goto LABEL_23;
        }
        uint64_t v32 = *((void *)this + 3);
        if (!v32)
        {
          CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(LogLevel);
          uint64_t v32 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::Location::default_instance_ + 24);
        }
        if ((*(unsigned char *)(v32 + 360) & 8) != 0)
        {
          uint64_t v33 = *((void *)this + 3);
          if (!v33)
          {
            CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(LogLevel);
            uint64_t v33 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::Location::default_instance_ + 24);
          }
          v30.i64[0] = *(void *)(v33 + 32);
          int8x16_t v122 = 0uLL;
          LogLevel = (CoreNavigation::CLP::LogEntry::PrivateData *)CNTimeSpan::SetTimeSpan(v122.i64, 0, v30, v31);
          *((int8x16_t *)a3 + 2) = v122;
          char v28 = 1;
        }
        else
        {
LABEL_23:
          char v28 = 0;
        }
      }
      else
      {
        char v28 = 0;
        *((unsigned char *)a3 + 200) = 0;
      }
      *((unsigned char *)a3 + 24) = v28;
      long long v34 = *(_OWORD *)((char *)a3 + 24);
      *(_OWORD *)((char *)a3 + 104) = *(_OWORD *)((char *)a3 + 8);
      *(_OWORD *)((char *)a3 + 120) = v34;
      long long v35 = *(_OWORD *)((char *)a3 + 72);
      *(_OWORD *)((char *)a3 + 184) = *(_OWORD *)((char *)a3 + 88);
      *(_OWORD *)((char *)a3 + 168) = v35;
      long long v36 = *(_OWORD *)((char *)a3 + 40);
      *(_OWORD *)((char *)a3 + 152) = *(_OWORD *)((char *)a3 + 56);
      *(_OWORD *)((char *)a3 + 136) = v36;
      uint64_t v37 = *((void *)this + 2);
      uint64_t v38 = v37;
      if (!v37)
      {
        CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(LogLevel);
        uint64_t v38 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::Location::default_instance_ + 16);
        uint64_t v37 = *((void *)this + 2);
      }
      if (*(double *)(v38 + 40) < 0.0) {
        goto LABEL_39;
      }
      uint64_t v39 = v37;
      if (!v37)
      {
        CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(LogLevel);
        uint64_t v39 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::Location::default_instance_ + 16);
        uint64_t v37 = *((void *)this + 2);
      }
      if ((*(void *)(v39 + 40) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
        goto LABEL_39;
      }
      uint64_t v40 = v37;
      if (!v37)
      {
        CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(LogLevel);
        uint64_t v40 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::Location::default_instance_ + 16);
        uint64_t v37 = *((void *)this + 2);
      }
      if (*(double *)(v40 + 56) <= 0.0)
      {
LABEL_39:
        BOOL v42 = 0;
      }
      else
      {
        uint64_t v41 = v37;
        if (!v37)
        {
          CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(LogLevel);
          uint64_t v41 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::Location::default_instance_ + 16);
          uint64_t v37 = *((void *)this + 2);
        }
        BOOL v42 = (*(void *)(v41 + 56) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
      }
      *((unsigned char *)a3 + 201) = v42;
      if (v37)
      {
        *((void *)a3 + 26) = *(void *)(v37 + 40);
      }
      else
      {
        CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(LogLevel);
        uint64_t v37 = *((void *)this + 2);
        *((void *)a3 + 26) = *(void *)(*(void *)(CoreNavigation::CLP::LogEntry::PrivateData::Location::default_instance_
                                                     + 16)
                                         + 40);
        if (!v37)
        {
          CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(LogLevel);
          uint64_t v37 = *((void *)this + 2);
          double v43 = *(double *)(*(void *)(CoreNavigation::CLP::LogEntry::PrivateData::Location::default_instance_ + 16)
                          + 72);
          if (!v37)
          {
            CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(LogLevel);
            uint64_t v44 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::Location::default_instance_ + 16);
            uint64_t v37 = *((void *)this + 2);
            goto LABEL_45;
          }
LABEL_44:
          uint64_t v44 = v37;
LABEL_45:
          if (*(double *)(v44 + 64) >= 0.0)
          {
            uint64_t v46 = v37;
            if (!v37)
            {
              CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(LogLevel);
              uint64_t v46 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::Location::default_instance_ + 16);
              uint64_t v37 = *((void *)this + 2);
            }
            int v45 = *(double *)(v46 + 64) < 360.0;
            if (v43 <= 0.0) {
              int v45 = 0;
            }
            if ((*(void *)&v43 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000) {
              int v45 = 0;
            }
          }
          else
          {
            int v45 = 0;
          }
          *((unsigned char *)a3 + 203) = v45;
          if (!v37)
          {
            CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(LogLevel);
            uint64_t v37 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::Location::default_instance_ + 16);
            int v45 = *((unsigned __int8 *)a3 + 203);
          }
          *((double *)a3 + 28) = *(double *)(v37 + 64) * 0.0174532925;
          if (*((unsigned char *)a3 + 201) && !v45 && *((double *)a3 + 26) < 1.0)
          {
            LogLevel = (CoreNavigation::CLP::LogEntry::PrivateData *)cnprint::CNPrinter::GetLogLevel(LogLevel);
            if (LogLevel <= 1)
            {
              v122.i16[0] = 12;
              LOBYTE(v117) = 1;
              uint64_t v52 = *((void *)this + 2);
              if (v52)
              {
                uint64_t v53 = *(void *)(v52 + 64);
              }
              else
              {
                CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(LogLevel);
                uint64_t v53 = *(void *)(*(void *)(CoreNavigation::CLP::LogEntry::PrivateData::Location::default_instance_
                                            + 16)
                                + 64);
                if (!*((void *)this + 2))
                {
                  CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(v54);
                  if (!*((void *)this + 2)) {
                    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(v90);
                  }
                }
              }
              cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v122, (unsigned __int8 *)&v117, "Filling dummy course at low speed,course,%.3f,acc,%.3f,spd valid,%d,speed,%.3f,acc,%.3f", v47, v48, v49, v50, v51, v53);
            }
            int v45 = 1;
            *((unsigned char *)a3 + 203) = 1;
            *((void *)a3 + 28) = 0;
            double v43 = 180.0;
          }
          uint64_t v55 = *((void *)this + 2);
          if (!v55)
          {
            CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(LogLevel);
            uint64_t v55 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::Location::default_instance_ + 16);
            int v45 = *((unsigned __int8 *)a3 + 203);
          }
          BOOL v56 = 0;
          *((double *)a3 + 29) = *(double *)(v55 + 56) * *(double *)(v55 + 56);
          *((double *)a3 + 34) = v43 * 0.0174532925 * (v43 * 0.0174532925);
          *((unsigned char *)a3 + 202) = 1;
          *((void *)a3 + 27) = 0;
          *((void *)a3 + 30) = 0;
          *((void *)a3 + 31) = 0;
          *((_OWORD *)a3 + 16) = xmmword_18E215790;
          *((unsigned char *)a3 + 280) = 0;
          int v57 = *((unsigned __int8 *)a2 + 280);
          int v58 = *((unsigned __int8 *)a3 + 201);
          if (*((unsigned char *)a2 + 201) | v57 && *((unsigned char *)a3 + 201) && v45)
          {
            double v59 = *((double *)a3 + 26);
            __double2 v60 = __sincos_stret(*((double *)a3 + 28));
            *(double *)&long long v142 = v59 * v60.__sinval;
            *((double *)&v142 + 1) = v59 * v60.__cosval;
            uint64_t v143 = 0;
            float64x2_t v139 = 0uLL;
            uint64_t v140 = 0;
            if (v57)
            {
              int v61 = 0;
              char v62 = (char *)a2 + 288;
              uint64_t v63 = (char *)a2 + 296;
              double v64 = *((double *)a2 + 38);
            }
            else
            {
              char v62 = (char *)a2 + 208;
              uint64_t v63 = (char *)a2 + 216;
              double v64 = *((double *)a2 + 28);
              if (!*((unsigned char *)a2 + 202)) {
                double v64 = 0.0;
              }
              int v61 = 1;
            }
            uint64_t v65 = *(void *)v63;
            v141[0] = *(void *)v62;
            v141[1] = v65;
            *(double *)&v141[2] = v64;
            v122.i8[8] = 0;
            uint64_t v125 = 0x300000003;
            long long v124 = xmmword_18E1F0010;
            unint64_t v123 = &unk_1EDD18EE8;
            double v126 = &v127;
            v122.i64[0] = (uint64_t)&unk_1EDD0AB90;
            if (!cnnavigation::ENUToECEF(&v142, 1, v61, (uint64_t)v141, 1, &v139, (uint64_t)&v122))
            {
              *((unsigned char *)a3 + 280) = 1;
              *((float64x2_t *)a3 + 18) = v139;
              *((void *)a3 + 38) = v140;
              uint64_t v119 = 0x300000003;
              long long v118 = xmmword_18E1F0010;
              unint64_t v117 = &unk_1EDD18EE8;
              long long v120 = &v121;
              if (v122.i8[8]) {
                sub_18DFE2F24((uint64_t)&v117, (uint64_t)&v123);
              }
              double v66 = sqrt(*((double *)a3 + 29));
              double v67 = *((double *)a3 + 34);
              uint64_t v114 = 0x300000003;
              int64x2_t v112 = &unk_1EDD18EE8;
              unint64_t v115 = (double *)&v116;
              long long v113 = xmmword_18E1F0010;
              double v68 = sqrt(v67);
              sub_18DFE2CC8((uint64_t)&v112, 0.0);
              if (v59 < v66 * 5.0 || v68 >= 0.261799388)
              {
                if (v68 >= 0.261799388)
                {
                  double v75 = (v59 + v66 * 3.0) / 3.0 * ((v59 + v66 * 3.0) / 3.0);
                  uint64_t v74 = v115;
                  *unint64_t v115 = v75;
                }
                else
                {
                  uint64_t v74 = v115;
                  *unint64_t v115 = *((double *)a3 + 29);
                  double v75 = *((double *)a3 + 29);
                }
                int v76 = HIDWORD(v113);
                v74[HIDWORD(v113) + 1] = v75;
                v74[2 * v76 + 2] = *((double *)a3 + 32);
              }
              else
              {
                sub_18DFEB238(3, 3, (uint64_t)&v107);
                uint64_t v69 = v110;
                *uint64_t v110 = *((void *)a3 + 29);
                uint64_t v70 = SHIDWORD(v108);
                v69[SHIDWORD(v108)] = *((void *)a3 + 31);
                v69[2 * v70] = *((void *)a3 + 30);
                v69[1] = *((void *)a3 + 31);
                v69[(int)v70 + 1] = *((void *)a3 + 34);
                uint64_t v71 = &v69[2 * (int)v70];
                v71[1] = *((void *)a3 + 33);
                v69[2] = *((void *)a3 + 30);
                v69[(int)v70 + 2] = *((void *)a3 + 33);
                v71[2] = *((void *)a3 + 32);
                sub_18DFEB238(3, 3, (uint64_t)&v102);
                long long v72 = v105;
                *uint64_t v105 = v60.__sinval;
                int v73 = HIDWORD(v103);
                v72[SHIDWORD(v103)] = v59 * v60.__cosval;
                v72[1] = v60.__cosval;
                v72[v73 + 1] = -(v59 * v60.__sinval);
                v72[2 * v73 + 2] = 1.0;
                sub_18DFF6360((uint64_t)&v102, (uint64_t)&v107, (uint64_t)v93);
                sub_18DFF63E0((uint64_t)&v102, (uint64_t)v92);
                sub_18DFF6360((uint64_t)v93, (uint64_t)v92, (uint64_t)&v94);
                sub_18DFE2F24((uint64_t)&v112, (uint64_t)&v94);
              }
              uint64_t v104 = 0x300000003;
              long long v103 = xmmword_18E1F0010;
              long long v102 = &unk_1EDD18EE8;
              uint64_t v105 = (double *)&v106;
              sub_18DFE2B44((uint64_t)&v117, (uint64_t)&v112, (uint64_t)&v102);
              int v77 = DWORD1(v118);
              int v78 = v118;
              uint64_t v99 = 0x300000003;
              int v94 = &unk_1EDD18EE8;
              uint64_t v100 = v101;
              int v95 = DWORD1(v118);
              int v96 = v118;
              int v97 = v118 * DWORD1(v118);
              int v98 = DWORD1(v118);
              if (DWORD1(v118))
              {
                int v79 = 0;
                int v80 = 0;
                int v81 = HIDWORD(v118);
                uint64_t v82 = v120;
                do
                {
                  int v83 = v79;
                  int v84 = v80;
                  for (int i = v78; i; --i)
                  {
                    v101[v84] = v82[v83];
                    v84 += v77;
                    ++v83;
                  }
                  ++v80;
                  v79 += v81;
                }
                while (v80 != v77);
              }
              uint64_t v109 = 0x300000003;
              long long v108 = xmmword_18E1F0010;
              uint64_t v107 = &unk_1EDD18EE8;
              uint64_t v110 = &v111;
              sub_18DFE2B44((uint64_t)&v102, (uint64_t)&v94, (uint64_t)&v107);
              char v86 = v110;
              *((void *)a3 + 39) = *v110;
              uint64_t v87 = SHIDWORD(v108);
              int64_t v88 = &v86[SHIDWORD(v108)];
              *((void *)a3 + 40) = *v88;
              *((void *)a3 + 41) = v86[2 * v87];
              *((void *)a3 + 42) = v88[1];
              unint64_t v89 = &v86[2 * (int)v87];
              *((void *)a3 + 43) = v89[1];
              *((void *)a3 + 44) = v89[2];
            }
            int v58 = *((unsigned __int8 *)a3 + 201);
            int v45 = *((unsigned __int8 *)a3 + 203);
            BOOL v56 = *((unsigned char *)a3 + 202) == 0;
          }
          if (v58 && v45 && !v56) {
            return (CoreNavigation::CLP::LogEntry::PrivateData *)1;
          }
          else {
            return (CoreNavigation::CLP::LogEntry::PrivateData *)(*((unsigned char *)a3 + 280) != 0);
          }
        }
      }
      double v43 = *(double *)(v37 + 72);
      goto LABEL_44;
    }
  }
  return result;
}

uint64_t raven::ConvertProtobufToARSessionStatusEvent(cnprint::CNPrinter *a1, uint64_t a2, uint64_t a3, int8x16_t a4, int8x16_t a5)
{
  if ((*(unsigned char *)(a2 + 44) & 4) != 0)
  {
    a4.i64[0] = *(void *)(a2 + 24);
    long long v22 = 0uLL;
    uint64_t v13 = CNTimeSpan::SetTimeSpan((uint64_t *)&v22, 0, a4, a5);
    *(_OWORD *)(a3 + 8) = v22;
    switch(*(_DWORD *)a1)
    {
      case 0xFFFFFFFF:
        *(unsigned char *)(a3 + 104) = 0;
        goto LABEL_11;
      case 0:
        uint64_t result = 1;
        *(unsigned char *)(a3 + 104) = 1;
        return result;
      case 1:
        char v14 = 2;
        goto LABEL_10;
      case 2:
        char v14 = 3;
LABEL_10:
        *(unsigned char *)(a3 + 104) = v14;
LABEL_11:
        uint64_t result = 1;
        break;
      default:
        if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v13) <= 1)
        {
          LOWORD(v22) = 12;
          unsigned __int8 v21 = 1;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v22, &v21, "ConvertProtobufToARSessionStatusEvent, Invalid vision AR Session Status, %u", v15, v16, v17, v18, v19, *(_DWORD *)a1);
        }
        return 0;
    }
  }
  else
  {
    if (cnprint::CNPrinter::GetLogLevel(a1) <= 1)
    {
      LOWORD(v22) = 12;
      unsigned __int8 v21 = 1;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v22, &v21, "ConvertProtobufToARSessionStatusEvent, mach continuous time not present", v5, v6, v7, v8, v9, v20);
    }
    return 0;
  }
  return result;
}

uint64_t raven::ConvertProtobufToVIOEstimateEvent(raven *this, const CoreNavigation::CLP::LogEntry::Vision::VIOEstimation *a2, raven::VIOEstimateEvent *a3, int8x16_t a4, int8x16_t a5)
{
  if ((*((unsigned char *)this + 88) & 4) == 0)
  {
    if (cnprint::CNPrinter::GetLogLevel(this) <= 1)
    {
      *(_WORD *)unint64_t v218 = 12;
      __p[0] = 1;
      uint64_t v10 = "ConvertProtobufVIOEstimateEvent, VIO applicable mach continuous time not present";
LABEL_38:
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v218, __p, v10, v5, v6, v7, v8, v9, SLOBYTE(v169));
      return 0;
    }
    return 0;
  }
  uint64_t v13 = *((void *)this + 2);
  if (!v13)
  {
    CoreNavigation::CLP::LogEntry::Vision::protobuf_AddDesc_CoreNavigationCLPVisionEvent_2eproto(this);
    uint64_t v13 = *(void *)(CoreNavigation::CLP::LogEntry::Vision::VIOEstimation::default_instance_ + 16);
  }
  a4.i64[0] = *(void *)(v13 + 24);
  *(_OWORD *)unint64_t v218 = 0uLL;
  char v14 = CNTimeSpan::SetTimeSpan((uint64_t *)v218, 0, a4, a5);
  int8x16_t v16 = *(int8x16_t *)v218;
  *(_OWORD *)((char *)a2 + 8) = *(_OWORD *)v218;
  *(int8x16_t *)((char *)a2 + 104) = v16;
  if ((*((unsigned char *)this + 88) & 2) == 0)
  {
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v14) <= 1)
    {
      *(_WORD *)unint64_t v218 = 12;
      __p[0] = 1;
      uint64_t v17 = (*(uint64_t (**)(const CoreNavigation::CLP::LogEntry::Vision::VIOEstimation *))(*(void *)a2 + 16))(a2);
      double v170 = v18 + (double)v17;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v218, __p, "ConvertProtobufVIOEstimateEvent, t, %.3lf, VIO session start mach continuous time not present", v19, v20, v21, v22, v23, SLOBYTE(v170));
    }
    return 0;
  }
  uint64_t v24 = *((void *)this + 1);
  if (!v24)
  {
    CoreNavigation::CLP::LogEntry::Vision::protobuf_AddDesc_CoreNavigationCLPVisionEvent_2eproto((CoreNavigation::CLP::LogEntry::Vision *)v14);
    uint64_t v24 = *(void *)(CoreNavigation::CLP::LogEntry::Vision::VIOEstimation::default_instance_ + 8);
  }
  v16.i64[0] = *(void *)(v24 + 24);
  *(_OWORD *)unint64_t v218 = 0uLL;
  int8x16_t v25 = CNTimeSpan::SetTimeSpan((uint64_t *)v218, 0, v16, v15);
  *(_OWORD *)((char *)a2 + 200) = *(_OWORD *)v218;
  int v26 = *((_DWORD *)this + 22);
  if ((v26 & 1) == 0)
  {
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v25) <= 1)
    {
      *(_WORD *)unint64_t v218 = 12;
      __p[0] = 1;
      uint64_t v27 = (*(uint64_t (**)(const CoreNavigation::CLP::LogEntry::Vision::VIOEstimation *))(*(void *)a2 + 16))(a2);
      double v171 = v28 + (double)v27;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v218, __p, "ConvertProtobufVIOEstimateEvent,t, %.3lf, VIO Tracking Status not present", v29, v30, v31, v32, v33, SLOBYTE(v171));
    }
    return 0;
  }
  unsigned int v34 = *((_DWORD *)this + 20) + 1;
  if (v34 >= 6)
  {
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v25) <= 1)
    {
      *(_WORD *)unint64_t v218 = 12;
      __p[0] = 1;
      uint64_t v42 = (*(uint64_t (**)(const CoreNavigation::CLP::LogEntry::Vision::VIOEstimation *))(*(void *)a2 + 16))(a2);
      double v172 = v43 + (double)v42;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v218, __p, "ConvertProtobufVIOEstimateEvent, t, %.3lf, Invalid VIO Tracking State, %u", v44, v45, v46, v47, v48, SLOBYTE(v172));
    }
    return 0;
  }
  *((unsigned char *)a2 + 296) = v34;
  if ((~v26 & 0x78) != 0)
  {
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v25) <= 1)
    {
      *(_WORD *)unint64_t v218 = 12;
      __p[0] = 1;
      uint64_t v49 = (*(uint64_t (**)(const CoreNavigation::CLP::LogEntry::Vision::VIOEstimation *))(*(void *)a2 + 16))(a2);
      double v173 = v50 + (double)v49;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v218, __p, "ConvertProtobufVIOEstimateEvent, t, %.3lf, VIO State/Cov not present", v51, v52, v53, v54, v55, SLOBYTE(v173));
    }
    return 0;
  }
  if ((~v26 & 0x18) != 0)
  {
    LogLevel = (cnprint::CNPrinter *)cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v25);
    if (LogLevel > 1) {
      goto LABEL_36;
    }
    *(_WORD *)unint64_t v218 = 12;
    __p[0] = 1;
    char v62 = "ConvertProtobufVIOInertialState, VIO Inertial State not present.";
    goto LABEL_35;
  }
  uint64_t v35 = *((void *)this + 3);
  if (!v35)
  {
    CoreNavigation::CLP::LogEntry::Vision::protobuf_AddDesc_CoreNavigationCLPVisionEvent_2eproto((CoreNavigation::CLP::LogEntry::Vision *)v25);
    uint64_t v35 = *(void *)(CoreNavigation::CLP::LogEntry::Vision::VIOEstimation::default_instance_ + 24);
  }
  unint64_t v36 = *(void *)(v35 + 8);
  unint64_t v37 = *(unsigned int *)(v35 + 16);
  if (v36 != 8 * v37
    || (int v38 = *(_DWORD *)(v35 + 24),
        int v39 = *(_DWORD *)(v35 + 56),
        v39 + v38 + *(_DWORD *)(v35 + 48) + *(_DWORD *)(v35 + 32) + *(_DWORD *)(v35 + 40) != v37))
  {
    LogLevel = (cnprint::CNPrinter *)cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v25);
    if (LogLevel > 1) {
      goto LABEL_36;
    }
    *(_WORD *)unint64_t v218 = 12;
    __p[0] = 1;
    char v62 = "ConvertProtobufVIOInertialState, VIO Inertial State Info Integrity failed.";
    goto LABEL_35;
  }
  if (v36 > 0xA8
    || !v37
    || v39 != 3
    || v38 != 9
    || ((uint64_t v40 = (void *)*((void *)this + 4), *((char *)v40 + 23) < 0)
      ? (uint64_t v41 = v40[1])
      : (uint64_t v41 = *((unsigned __int8 *)v40 + 23)),
        v41 != v36))
  {
    LogLevel = (cnprint::CNPrinter *)cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v25);
    if (LogLevel > 1) {
      goto LABEL_36;
    }
    *(_WORD *)unint64_t v218 = 12;
    __p[0] = 1;
    char v62 = "ConvertProtobufVIOInertialState, VIO Inertial State Info Sensibility checks failed.";
LABEL_35:
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v218, __p, v62, v57, v58, v59, v60, v61, SLOBYTE(v169));
    goto LABEL_36;
  }
  unint64_t v66 = *(unsigned int *)(v35 + 20);
  unint64_t v67 = *(unsigned int *)(v35 + 52);
  sub_18E0F6058(__dst, v37);
  if (*((char *)v40 + 23) < 0)
  {
    uint64_t v69 = v40;
    uint64_t v40 = (void *)*v40;
    size_t v68 = v69[1];
  }
  else
  {
    size_t v68 = *((unsigned __int8 *)v40 + 23);
  }
  if (v68) {
    memmove(__dst[0], v40, v68);
  }
  uint64_t v219 = 0x300000003;
  *(_OWORD *)&v218[8] = xmmword_18E1F0010;
  uint64_t v70 = v221;
  *(void *)unint64_t v218 = &unk_1EDD18EE8;
  v220 = v221;
  if (v66 > 0xFFFFFFF6)
  {
    int v75 = 3;
  }
  else
  {
    int v71 = 0;
    int v72 = 0;
    unint64_t v73 = (v66 + 9);
    uint64_t v74 = __dst[0];
    do
    {
      v221[3 * v72 + v71] = v74[v66];
      if (v71 == 2)
      {
        ++v72;
        int v71 = 0;
      }
      else
      {
        ++v71;
      }
      ++v66;
    }
    while (v66 < v73);
    int v75 = *(_DWORD *)&v218[20];
    uint64_t v70 = v220;
  }
  uint64_t v76 = 0;
  uint64_t v185 = 0x300000003;
  uint64_t v183 = &unk_1EDD18EE8;
  v186 = &v187;
  long long v184 = xmmword_18E1F0010;
  uint64_t v77 = 8 * v75;
  uint64_t v78 = 40;
  do
  {
    uint64_t v79 = 0;
    uint64_t v80 = v78;
    do
    {
      *(void **)((char *)&v183 + v80) = (void *)v70[v79++];
      v80 += 24;
    }
    while (v79 != 3);
    ++v76;
    v78 += 8;
    uint64_t v70 = (void *)((char *)v70 + v77);
  }
  while (v76 != 3);
  uint64_t v190 = 0x300000003;
  long long v189 = xmmword_18E1F0010;
  v188 = &unk_1EDD18EE8;
  v191 = &v192;
  sub_18DFE2B44((uint64_t)&v183, (uint64_t)v218, (uint64_t)&v188);
  uint64_t v180 = 0x300000003;
  char v178 = &unk_1EDD18EE8;
  double v181 = &v182;
  long long v179 = xmmword_18E1F0010;
  sub_18DFE2CC8((uint64_t)&v178, 0.0);
  int v81 = HIDWORD(v179) + 1;
  uint64_t v82 = v181;
  *double v181 = 0x3FF0000000000000;
  v82[v81] = 0x3FF0000000000000;
  v82[2 * v81] = 0x3FF0000000000000;
  uint64_t v195 = 0x300000003;
  long long v194 = xmmword_18E1F0010;
  unint64_t v193 = &unk_1EDD18EE8;
  v196 = (double *)&v197;
  sub_18DFE2AA8((uint64_t)&v188, (uint64_t)&v178, (uint64_t)&v193);
  uint64_t v201 = 0x300000003;
  v198[0] = &unk_1EDD18EE8;
  uint64_t v83 = (DWORD1(v194) * v194);
  int v84 = (double *)v203;
  unint64_t v202 = v203;
  v198[1] = v194;
  int v199 = v83;
  int v200 = v194;
  if ((int)v83 >= 1)
  {
    int v85 = v196;
    do
    {
      double v86 = *v85++;
      *v84++ = fabs(v86);
      --v83;
    }
    while (v83);
  }
  uint64_t v206 = 0x300000003;
  long long v205 = xmmword_18E1F0010;
  uint64_t v204 = &unk_1EDD18EE8;
  uint64_t v207 = &v208;
  uint64_t v215 = 0x300000003;
  long long v214 = xmmword_18E1F0010;
  v213 = &unk_1EDD18F18;
  uint64_t v216 = v217;
  sub_18DFE2718((uint64_t)v198, (uint64_t)&v204, (uint64_t)&v213);
  *(void *)&__p[24] = 0x300000003;
  *(_OWORD *)&__p[8] = xmmword_18E1F0010;
  *(void *)long long __p = &unk_1EDD18EE8;
  uint64_t v210 = (double *)v211;
  uint64_t v215 = 0x300000003;
  long long v214 = xmmword_18E1F0010;
  v213 = &unk_1EDD18F18;
  uint64_t v216 = v217;
  sub_18DFE2718((uint64_t)&v204, (uint64_t)__p, (uint64_t)&v213);
  if (fabs(*v210) <= 0.00001 && fabs(sub_18E0F5FB4((uint64_t)v218) + -1.0) <= 0.00001)
  {
    sub_18DFE20A0((uint64_t)__p, (uint64_t)v218);
    if ((char *)a2 + 304 != __p)
    {
      long long v94 = *(_OWORD *)&__p[16];
      *((_OWORD *)a2 + 19) = *(_OWORD *)__p;
      *((_OWORD *)a2 + 20) = v94;
    }
    *(void *)&__p[24] = 0x100000003;
    *(_OWORD *)&__p[8] = xmmword_18E1F6F60;
    int v95 = v211;
    *(void *)long long __p = &unk_1EDD18D98;
    uint64_t v210 = (double *)v211;
    if (v67 <= 0xFFFFFFFC)
    {
      unint64_t v96 = (v67 + 3);
      int v97 = __dst[0];
      do
        *v95++ = v97[v67++];
      while (v67 < v96);
    }
    sub_18E03017C((uint64_t)__p);
    if ((v99 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
      int v93 = 1;
      if (cnprint::CNPrinter::GetLogLevel(v98) <= 1)
      {
        LOWORD(v204) = 12;
        LOBYTE(v198[0]) = 1;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v204, (unsigned __int8 *)v198, "ConvertProtobufVIOInertialState, NOTE: VIO Position Vector failed the sensibility check.", v100, v101, v102, v103, v104, SLOBYTE(v169));
      }
    }
    else
    {
      sub_18DFE2F24((uint64_t)a2 + 336, (uint64_t)__p);
      int v93 = 0;
    }
  }
  else
  {
    int v93 = 1;
    if (cnprint::CNPrinter::GetLogLevel(v87) <= 1)
    {
      *(_WORD *)long long __p = 12;
      LOBYTE(v204) = 1;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, (unsigned __int8 *)&v204, "ConvertProtobufVIOInertialState, NOTE: VIO imu2vio rotation matrix failed the orthogonality check.", v88, v89, v90, v91, v92, SLOBYTE(v169));
    }
  }
  LogLevel = (cnprint::CNPrinter *)__dst[0];
  if (__dst[0])
  {
    __dst[1] = __dst[0];
    operator delete(__dst[0]);
  }
  if (v93)
  {
LABEL_36:
    if (cnprint::CNPrinter::GetLogLevel(LogLevel) <= 1)
    {
      *(_WORD *)unint64_t v218 = 12;
      __p[0] = 1;
      uint64_t v63 = (*(uint64_t (**)(const CoreNavigation::CLP::LogEntry::Vision::VIOEstimation *))(*(void *)a2 + 16))(a2);
      double v169 = v64 + (double)v63;
      uint64_t v10 = "ConvertProtobufVIOEstimateEvent, t, %.3lf, Parsing Error in VIO Inertial State";
      goto LABEL_38;
    }
    return 0;
  }
  if ((~*((_DWORD *)this + 22) & 0x60) != 0)
  {
    int64x2_t v112 = (cnprint::CNPrinter *)cnprint::CNPrinter::GetLogLevel(LogLevel);
    if (v112 > 1) {
      goto LABEL_104;
    }
    *(_WORD *)unint64_t v218 = 12;
    __p[0] = 1;
    long long v118 = "ConvertProtobufVIOInertialCovariance, VIO Inertial State Var-Covariance not present.";
    goto LABEL_103;
  }
  uint64_t v105 = *((void *)this + 5);
  if (!v105)
  {
    CoreNavigation::CLP::LogEntry::Vision::protobuf_AddDesc_CoreNavigationCLPVisionEvent_2eproto(LogLevel);
    uint64_t v105 = *(void *)(CoreNavigation::CLP::LogEntry::Vision::VIOEstimation::default_instance_ + 40);
  }
  unint64_t v106 = *(void *)(v105 + 8);
  unint64_t v107 = *(unsigned int *)(v105 + 16);
  int v108 = *(_DWORD *)(v105 + 24);
  int v109 = *(_DWORD *)(v105 + 56);
  int v110 = v109 + v108 + *(_DWORD *)(v105 + 40) + *(_DWORD *)(v105 + 32) + *(_DWORD *)(v105 + 48);
  if (v106 != 8 * v107 || v107 != v110 * v110)
  {
    int64x2_t v112 = (cnprint::CNPrinter *)cnprint::CNPrinter::GetLogLevel(LogLevel);
    if (v112 > 1) {
      goto LABEL_104;
    }
    *(_WORD *)unint64_t v218 = 12;
    __p[0] = 1;
    long long v118 = "ConvertProtobufVIOInertialCovariance, VIO Inertial State Covariance Info Integrity failed.";
    goto LABEL_103;
  }
  int v176 = *(_DWORD *)(v105 + 32);
  int v177 = *(_DWORD *)(v105 + 48);
  int v175 = *(_DWORD *)(v105 + 40);
  if (v106 > 0x708
    || !v107
    || v109 != 3
    || v108 != 3
    || ((uint64_t v119 = (void *)*((void *)this + 6), *((char *)v119 + 23) < 0)
      ? (uint64_t v120 = v119[1])
      : (uint64_t v120 = *((unsigned __int8 *)v119 + 23)),
        v120 != v106))
  {
    int64x2_t v112 = (cnprint::CNPrinter *)cnprint::CNPrinter::GetLogLevel(LogLevel);
    if (v112 > 1) {
      goto LABEL_104;
    }
    *(_WORD *)unint64_t v218 = 12;
    __p[0] = 1;
    long long v118 = "ConvertProtobufVIOInertialCovariance, VIO Inertial State Covariance Info sensibility checks failed.";
LABEL_103:
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v218, __p, v118, v113, v114, v115, v116, v117, SLOBYTE(v169));
LABEL_104:
    if (cnprint::CNPrinter::GetLogLevel(v112) <= 1)
    {
      *(_WORD *)unint64_t v218 = 12;
      __p[0] = 1;
      uint64_t v124 = (*(uint64_t (**)(const CoreNavigation::CLP::LogEntry::Vision::VIOEstimation *))(*(void *)a2 + 16))(a2);
      double v174 = v125 + (double)v124;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v218, __p, "ConvertProtobufVIOEstimateEvent, t, %.3lf, Parsing Error in VIO Inertial State Var-Cov", v126, v127, v128, v129, v130, SLOBYTE(v174));
    }
    return 0;
  }
  unint64_t v121 = *(unsigned int *)(v105 + 52);
  unint64_t v122 = *(unsigned int *)(v105 + 20);
  sub_18E0F6058(__p, v107);
  if (*((char *)v119 + 23) < 0)
  {
    uint64_t v131 = v119;
    uint64_t v119 = (void *)*v119;
    size_t v123 = v131[1];
  }
  else
  {
    size_t v123 = *((unsigned __int8 *)v119 + 23);
  }
  if (v123) {
    memmove(*(void **)__p, v119, v123);
  }
  uint64_t v219 = 0x300000003;
  *(_OWORD *)&v218[8] = xmmword_18E1F0010;
  char v132 = v221;
  *(void *)unint64_t v218 = &unk_1EDD18EE8;
  v220 = v221;
  unint64_t v133 = (v122 + 3);
  if (v122 <= 0xFFFFFFFC)
  {
    uint64_t v134 = *(void *)__p;
    unsigned int v135 = v122 + v122 * (v175 + v176 + 6 + v177);
    unsigned int v136 = v122;
    do
    {
      unsigned int v137 = v135;
      uint64_t v138 = v132;
      unint64_t v139 = v122;
      do
      {
        *uint64_t v138 = *(void *)(v134 + 8 * v137);
        v138 += 3;
        ++v139;
        ++v137;
      }
      while (v139 < v133);
      ++v136;
      ++v132;
      v135 += v110;
    }
    while (v136 < v133);
  }
  BOOL v140 = cntransformation::CNRigidTransformation::SetPrr((uint64_t)a2 + 304, (uint64_t)v218);
  if (!v140)
  {
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v140) <= 1)
    {
      LOWORD(v204) = 12;
      LOBYTE(v198[0]) = 1;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v204, (unsigned __int8 *)v198, "ConvertProtobufVIOInertialCovariance, Cannot set/store the Orientation Covariance", v159, v160, v161, v162, v163, SLOBYTE(v169));
    }
    goto LABEL_136;
  }
  unint64_t v141 = (v121 + 3);
  if (v121 <= 0xFFFFFFFC)
  {
    uint64_t v142 = *(void *)__p;
    uint64_t v143 = v220;
    uint64_t v144 = 8 * *(int *)&v218[20];
    unsigned int v145 = v121 + v121 * (v175 + 6 + v176 + v177);
    unsigned int v146 = v121;
    do
    {
      unsigned int v147 = v145;
      double v148 = v143;
      unint64_t v149 = v121;
      do
      {
        *double v148 = *(void *)(v142 + 8 * v147);
        ++v149;
        double v148 = (void *)((char *)v148 + v144);
        ++v147;
      }
      while (v149 < v141);
      ++v146;
      ++v143;
      v145 += v110;
    }
    while (v146 < v141);
  }
  BOOL v150 = cntransformation::CNRigidTransformation::SetPpp((uint64_t)a2 + 304, (uint64_t)v218);
  if (!v150)
  {
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v150) <= 1)
    {
      LOWORD(v204) = 12;
      LOBYTE(v198[0]) = 1;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v204, (unsigned __int8 *)v198, "ConvertProtobufVIOInertialCovariance, Cannot set/store the IMU Position Covariance", v164, v165, v166, v167, v168, SLOBYTE(v169));
    }
LABEL_136:
    char v157 = 0;
    goto LABEL_137;
  }
  if (v122 <= 0xFFFFFFFC)
  {
    uint64_t v151 = *(void *)__p;
    unsigned int v152 = (double *)v220;
    uint64_t v153 = 8 * *(int *)&v218[20];
    int v154 = v122 * v110;
    do
    {
      unsigned int v155 = v152;
      unint64_t v156 = v121;
      if (v121 <= 0xFFFFFFFC)
      {
        do
        {
          *unsigned int v155 = -*(double *)(v151 + 8 * (v154 + v156++));
          unsigned int v155 = (double *)((char *)v155 + v153);
        }
        while (v156 < v141);
      }
      ++v152;
      v154 += v110;
      LODWORD(v122) = v122 + 1;
    }
    while (v122 < v133);
  }
  char v157 = 1;
  if (*(_DWORD *)&v218[8] == 3 && *(_DWORD *)&v218[12] == 3)
  {
    sub_18DFE2F24((uint64_t)a2 + 624, (uint64_t)v218);
    *((unsigned char *)a2 + 736) = 1;
  }
LABEL_137:
  int64x2_t v112 = *(cnprint::CNPrinter **)__p;
  if (*(void *)__p)
  {
    *(void *)&__p[8] = *(void *)__p;
    operator delete(*(void **)__p);
  }
  if ((v157 & 1) == 0) {
    goto LABEL_104;
  }
  *((unsigned char *)a2 + 1185) = sub_18E0F05E8(*((void *)this + 7), *((_DWORD *)this + 22), (uint64_t)a2 + 104);
  uint64_t result = 1;
  *((unsigned char *)a2 + 1184) = 1;
  return result;
}

void sub_18E0F0590(_Unwind_Exception *a1)
{
  int v2 = (void *)STACK[0x2E0];
  if (STACK[0x2E0])
  {
    STACK[0x2E8] = (unint64_t)v2;
    operator delete(v2);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_18E0F05E8(uint64_t a1, char a2, uint64_t a3)
{
  if ((a2 & 0x80) == 0) {
    return 1;
  }
  uint64_t v5 = a1;
  if (!a1)
  {
    CoreNavigation::CLP::LogEntry::Vision::protobuf_AddDesc_CoreNavigationCLPVisionEvent_2eproto(0);
    uint64_t v5 = *(void *)(CoreNavigation::CLP::LogEntry::Vision::VIOEstimation::default_instance_ + 56);
  }
  if (*(_DWORD *)(v5 + 16) == 4)
  {
    uint64_t v6 = 0;
    uint64_t v94 = 0x400000004;
    long long v93 = xmmword_18E1F6F70;
    uint64_t v92 = &unk_1EDD195A8;
    int v95 = &v96;
    while (1)
    {
      if (v6 >= *(int *)(v5 + 16))
      {
        wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
        wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
        wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
        wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)&v76);
      }
      uint64_t v7 = *(void *)(*(void *)(v5 + 8) + 8 * v6);
      if (*(_DWORD *)(v7 + 16) != 4) {
        break;
      }
      uint64_t v8 = *(float32x2_t **)(v7 + 8);
      uint64_t v9 = (float64x2_t *)&v95[SHIDWORD(v93) * (uint64_t)(int)v6];
      *uint64_t v9 = vcvtq_f64_f32(*v8);
      v9[1] = vcvtq_f64_f32(v8[1]);
      if (++v6 == 4)
      {
        v80[0] = 0x100000000;
        uint64_t v88 = 0x100000003;
        double v86 = &unk_1EDD18DC8;
        uint64_t v89 = &v90;
        long long v87 = xmmword_18E1F6F60;
        int v91 = 2;
        uint64_t v90 = 0x100000000;
        sub_18DFEE864((uint64_t)&v76, (uint64_t)&v92, (uint64_t)&v86, (uint64_t)&v86);
        sub_18DFE2FA8((uint64_t)v81, (uint64_t)&v76);
        int v10 = v83;
        int v11 = v82;
        uint64_t v47 = 0x300000003;
        uint64_t v42 = &unk_1EDD18EE8;
        uint64_t v48 = v49;
        int v43 = v83;
        int v44 = v82;
        int v45 = v82 * v83;
        int v46 = v83;
        if (v83)
        {
          int v12 = 0;
          int v13 = 0;
          int v14 = v84;
          uint64_t v15 = v85;
          do
          {
            int v16 = v12;
            int v17 = v13;
            for (int i = v11; i; --i)
            {
              v49[v17] = *(void *)(v15 + 8 * v16);
              v17 += v10;
              ++v16;
            }
            ++v13;
            v12 += v14;
          }
          while (v13 != v10);
        }
        uint64_t v52 = 0x300000003;
        long long v51 = xmmword_18E1F0010;
        double v50 = &unk_1EDD18EE8;
        uint64_t v53 = &v54;
        sub_18DFE2B44((uint64_t)&v42, (uint64_t)v81, (uint64_t)&v50);
        uint64_t v39 = 0x300000003;
        unint64_t v37 = &unk_1EDD18EE8;
        uint64_t v40 = &v41;
        long long v38 = xmmword_18E1F0010;
        sub_18DFE2CC8((uint64_t)&v37, 0.0);
        int v19 = HIDWORD(v38) + 1;
        uint64_t v20 = v40;
        *uint64_t v40 = 0x3FF0000000000000;
        v20[v19] = 0x3FF0000000000000;
        v20[2 * v19] = 0x3FF0000000000000;
        uint64_t v57 = 0x300000003;
        long long v56 = xmmword_18E1F0010;
        uint64_t v55 = &unk_1EDD18EE8;
        uint64_t v58 = (double *)&v59;
        sub_18DFE2AA8((uint64_t)&v50, (uint64_t)&v37, (uint64_t)&v55);
        uint64_t v63 = 0x300000003;
        v60[0] = &unk_1EDD18EE8;
        uint64_t v21 = (DWORD1(v56) * v56);
        uint64_t v22 = (double *)v65;
        double v64 = v65;
        v60[1] = v56;
        int v61 = v21;
        int v62 = v56;
        if ((int)v21 >= 1)
        {
          uint64_t v23 = v58;
          do
          {
            double v24 = *v23++;
            *v22++ = fabs(v24);
            --v21;
          }
          while (v21);
        }
        uint64_t v68 = 0x300000003;
        long long v67 = xmmword_18E1F0010;
        unint64_t v66 = &unk_1EDD18EE8;
        uint64_t v69 = &v70;
        uint64_t v78 = 0x300000003;
        long long v77 = xmmword_18E1F0010;
        uint64_t v76 = &unk_1EDD18F18;
        uint64_t v79 = v80;
        sub_18DFE2718((uint64_t)v60, (uint64_t)&v66, (uint64_t)&v76);
        uint64_t v73 = 0x300000003;
        long long v72 = xmmword_18E1F0010;
        int v71 = &unk_1EDD18EE8;
        uint64_t v74 = (double *)&v75;
        uint64_t v78 = 0x300000003;
        long long v77 = xmmword_18E1F0010;
        uint64_t v76 = &unk_1EDD18F18;
        uint64_t v79 = v80;
        sub_18DFE2718((uint64_t)&v66, (uint64_t)&v71, (uint64_t)&v76);
        if (fabs(*v74) > 0.00001) {
          goto LABEL_21;
        }
        uint64_t v99 = 0x100000003;
        long long v98 = xmmword_18E1F6F60;
        int v97 = &unk_1EDD18DC8;
        uint64_t v100 = &v101;
        uint64_t v78 = 0x300000003;
        long long v77 = xmmword_18E1F0010;
        uint64_t v76 = &unk_1EDD18EE8;
        uint64_t v79 = v80;
        if (fabs(sub_18DFE2D1C((uint64_t)v81, (uint64_t)&v97, (uint64_t)&v76) + -1.0) <= 0.00001)
        {
          uint64_t v31 = cntransformation::CNRigidTransformation::SetTransformationMatrix(a3 + 640, (uint64_t)&v92);
          if (v31) {
            return 1;
          }
          if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v31) <= 1)
          {
            LOWORD(v76) = 12;
            LOBYTE(v71) = 1;
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v76, (unsigned __int8 *)&v71, "ConvertProtobufVIOCameraPose, Cannot set/store the vio2camARKit Transformation Matrix.", v32, v33, v34, v35, v36, 3);
          }
        }
        else
        {
LABEL_21:
          if (cnprint::CNPrinter::GetLogLevel(v25) <= 1)
          {
            LOWORD(v76) = 12;
            LOBYTE(v71) = 1;
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v76, (unsigned __int8 *)&v71, "ConvertProtobufVIOCameraPose, NOTE: ARKit camera pose rotation matrix failed the orthogonality check.", v26, v27, v28, v29, v30, 3);
          }
        }
        return 0;
      }
    }
  }
  return 0;
}

void sub_18E0F0BCC(_Unwind_Exception *a1)
{
}

BOOL raven::ConvertProtobufToVLLocalizationEvent(raven *this, const CoreNavigation::CLP::LogEntry::Vision::VLLocalizationResult *a2, const CoreNavigation::CLP::LogEntry::LogEntry_TimeStamp *a3, raven::VLLocalizationEvent *a4, int8x16_t a5, int8x16_t a6)
{
  if ((*((unsigned char *)a2 + 44) & 4) != 0)
  {
    a5.i64[0] = *((void *)a2 + 3);
    *(void *)&v175[8] = 0;
    *(void *)int v175 = 0;
    int v14 = CNTimeSpan::SetTimeSpan((uint64_t *)v175, 0, a5, a6);
    v16.i64[1] = *(void *)&v175[8];
    *(_OWORD *)((char *)a3 + 8) = *(_OWORD *)v175;
    if ((*((unsigned char *)this + 56) & 1) == 0)
    {
      if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v14) <= 1)
      {
        *(_WORD *)int v175 = 12;
        LOBYTE(v165) = 1;
        uint64_t v17 = (*(uint64_t (**)(const CoreNavigation::CLP::LogEntry::LogEntry_TimeStamp *))(*(void *)a3 + 16))(a3);
        double v117 = v18 + (double)v17;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v175, (unsigned __int8 *)&v165, "ConvertProtobufToVLLocalizationEvent, t, %.3lf, VL Validity mach continuous time not present", v19, v20, v21, v22, v23, SLOBYTE(v117));
      }
      return 0;
    }
    uint64_t v24 = *((void *)this + 1);
    if (!v24)
    {
      CoreNavigation::CLP::LogEntry::Vision::protobuf_AddDesc_CoreNavigationCLPVisionEvent_2eproto((CoreNavigation::CLP::LogEntry::Vision *)v14);
      uint64_t v24 = *(void *)(CoreNavigation::CLP::LogEntry::Vision::VLLocalizationResult::default_instance_ + 8);
    }
    v16.i64[0] = *(void *)(v24 + 24);
    *(void *)&v175[8] = 0;
    *(void *)int v175 = 0;
    LogLevel = CNTimeSpan::SetTimeSpan((uint64_t *)v175, 0, v16, v15);
    *(_OWORD *)((char *)a3 + 104) = *(_OWORD *)v175;
    int v26 = *((_DWORD *)this + 14);
    if ((v26 & 0x10) == 0 || ((float v27 = *((float *)this + 12), v27 >= 0.0) ? (v28 = v27 > 1.0) : (v28 = 1), v28))
    {
      if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)LogLevel) <= 1)
      {
        *(_WORD *)int v175 = 12;
        LOBYTE(v165) = 1;
        uint64_t v29 = (*(uint64_t (**)(const CoreNavigation::CLP::LogEntry::LogEntry_TimeStamp *))(*(void *)a3 + 16))(a3);
        double v118 = v30 + (double)v29;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v175, (unsigned __int8 *)&v165, "ConvertProtobufToVLLocalizationEvent, t, %.3lf, VL Estimation Confidence not present or wrong", v31, v32, v33, v34, v35, SLOBYTE(v118));
      }
      return 0;
    }
    *((double *)a3 + 136) = v27;
    if ((v26 & 4) != 0)
    {
      uint64_t v36 = *((void *)this + 3);
      if (!v36)
      {
        CoreNavigation::CLP::LogEntry::Vision::protobuf_AddDesc_CoreNavigationCLPVisionEvent_2eproto((CoreNavigation::CLP::LogEntry::Vision *)LogLevel);
        uint64_t v36 = *(void *)(CoreNavigation::CLP::LogEntry::Vision::VLLocalizationResult::default_instance_ + 24);
      }
      if (*(_DWORD *)(v36 + 16) == 4)
      {
        uint64_t v37 = 0;
        uint64_t v167 = 0x400000004;
        long long v166 = xmmword_18E1F6F70;
        uint64_t v165 = &unk_1EDD195A8;
        uint64_t v168 = &v169;
        while (1)
        {
          if (v37 >= *(int *)(v36 + 16))
          {
            wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
            wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
            wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
            wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v175);
          }
          uint64_t v38 = *(void *)(*(void *)(v36 + 8) + 8 * v37);
          if (*(_DWORD *)(v38 + 16) != 4) {
            break;
          }
          uint64_t v39 = *(uint64_t **)(v38 + 8);
          uint64_t v40 = &v168[SHIDWORD(v166) * (uint64_t)(int)v37];
          *uint64_t v40 = *v39;
          v40[1] = v39[1];
          v40[2] = v39[2];
          v40[3] = v39[3];
          if (++v37 == 4)
          {
            v178[0] = 0x100000000;
            uint64_t v161 = 0x100000003;
            uint64_t v159 = &unk_1EDD18DC8;
            uint64_t v162 = &v163;
            long long v160 = xmmword_18E1F6F60;
            int v164 = 2;
            uint64_t v163 = 0x100000000;
            sub_18DFEE864((uint64_t)v175, (uint64_t)&v165, (uint64_t)&v159, (uint64_t)&v159);
            sub_18DFE2FA8((uint64_t)v126, (uint64_t)v175);
            unsigned int v42 = v127;
            unsigned int v41 = v128;
            *((void *)&v135 + 1) = 0x300000003;
            *(void *)&long long v134 = &unk_1EDD18EE8;
            unsigned int v136 = v137;
            *((void *)&v134 + 1) = __PAIR64__(v127, v128);
            LODWORD(v135) = v127 * v128;
            DWORD1(v135) = v128;
            if (v128)
            {
              int v43 = 0;
              int v44 = 0;
              int v45 = v129;
              int v46 = v130;
              do
              {
                int v47 = v43;
                int v48 = v44;
                for (unsigned int i = v42; i; --i)
                {
                  v137[v48] = v46[v47];
                  v48 += v41;
                  ++v47;
                }
                ++v44;
                v43 += v45;
              }
              while (v44 != v41);
            }
            uint64_t v140 = 0x300000003;
            long long v139 = xmmword_18E1F0010;
            uint64_t v138 = &unk_1EDD18EE8;
            unint64_t v141 = &v142;
            sub_18DFE2B44((uint64_t)&v134, (uint64_t)v126, (uint64_t)&v138);
            *(void *)&v131[24] = 0x300000003;
            *(void *)uint64_t v131 = &unk_1EDD18EE8;
            char v132 = &v133;
            *(_OWORD *)&v131[8] = xmmword_18E1F0010;
            sub_18DFE2CC8((uint64_t)v131, 0.0);
            int v50 = *(_DWORD *)&v131[20] + 1;
            long long v51 = v132;
            *char v132 = 0x3FF0000000000000;
            v51[v50] = 0x3FF0000000000000;
            v51[2 * v50] = 0x3FF0000000000000;
            uint64_t v145 = 0x300000003;
            long long v144 = xmmword_18E1F0010;
            uint64_t v143 = &unk_1EDD18EE8;
            unsigned int v146 = (double *)&v147;
            sub_18DFE2AA8((uint64_t)&v138, (uint64_t)v131, (uint64_t)&v143);
            uint64_t v151 = 0x300000003;
            v148[0] = &unk_1EDD18EE8;
            uint64_t v52 = (DWORD1(v144) * v144);
            uint64_t v53 = (double *)v153;
            unsigned int v152 = v153;
            v148[1] = v144;
            int v149 = v52;
            int v150 = v144;
            if ((int)v52 >= 1)
            {
              uint64_t v54 = v146;
              do
              {
                double v55 = *v54++;
                *v53++ = fabs(v55);
                --v52;
              }
              while (v52);
            }
            uint64_t v156 = 0x300000003;
            long long v155 = xmmword_18E1F0010;
            int v154 = &unk_1EDD18EE8;
            char v157 = v158;
            uint64_t v176 = 0x300000003;
            *(_OWORD *)&v175[8] = xmmword_18E1F0010;
            *(void *)int v175 = &unk_1EDD18F18;
            int v177 = v178;
            sub_18DFE2718((uint64_t)v148, (uint64_t)&v154, (uint64_t)v175);
            uint64_t v123 = 0x300000003;
            unint64_t v121 = &unk_1EDD18EE8;
            long long v122 = xmmword_18E1F0010;
            uint64_t v124 = (double *)v125;
            uint64_t v176 = 0x300000003;
            *(_OWORD *)&v175[8] = xmmword_18E1F0010;
            *(void *)int v175 = &unk_1EDD18F18;
            int v177 = v178;
            sub_18DFE2718((uint64_t)&v154, (uint64_t)&v121, (uint64_t)v175);
            if (fabs(*v124) > 0.00001) {
              goto LABEL_36;
            }
            uint64_t v172 = 0x100000003;
            long long v171 = xmmword_18E1F6F60;
            double v170 = &unk_1EDD18DC8;
            double v173 = &v174;
            uint64_t v176 = 0x300000003;
            *(_OWORD *)&v175[8] = xmmword_18E1F0010;
            *(void *)int v175 = &unk_1EDD18EE8;
            int v177 = v178;
            if (fabs(sub_18DFE2D1C((uint64_t)v126, (uint64_t)&v170, (uint64_t)v175) + -1.0) > 0.00001)
            {
LABEL_36:
              LogLevel = (uint64_t *)cnprint::CNPrinter::GetLogLevel(v56);
              if (LogLevel <= 1)
              {
                *(_WORD *)int v175 = 12;
                LOBYTE(v121) = 1;
                cnprint::CNPrinter::Print((cnprint::CNPrinter *)v175, (unsigned __int8 *)&v121, "ConvertProtobufToVLLocalizationEvent, NOTE: VL rotation matrix failed the orthogonality check.", v57, v58, v59, v60, v61, SLOBYTE(v116));
              }
              break;
            }
            uint64_t v123 = 0x100000001;
            unint64_t v121 = &unk_1EDD18078;
            *(void *)&long long v65 = 0x100000001;
            *((void *)&v65 + 1) = 0x100000001;
            long long v122 = v65;
            uint64_t v124 = (double *)v125;
            v125[0] = 3;
            sub_18DFEEB44((uint64_t)v175, (uint64_t)&v165, (uint64_t)&v159, (uint64_t)&v121);
            sub_18DFF2980((uint64_t)v148, (uint64_t)v175);
            uint64_t v123 = 0x100000003;
            unint64_t v121 = &unk_1EDD18D98;
            long long v122 = xmmword_18E1F6F60;
            uint64_t v124 = (double *)v125;
            uint64_t v176 = 0x100000134;
            *(_OWORD *)&v175[8] = xmmword_18E1F6FB0;
            *(void *)int v175 = &unk_1EDD18C48;
            int v177 = v178;
            uint64_t v156 = 0x100000003;
            long long v155 = xmmword_18E1F6F60;
            int v154 = &unk_1EDD18D98;
            char v157 = v158;
            sub_18DFE345C((uint64_t)v148, (uint64_t)&v121, (uint64_t)v175, (uint64_t)&v154, "2");
            if ((v67 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
            {
              LogLevel = (uint64_t *)cnprint::CNPrinter::GetLogLevel(v66);
              if (LogLevel <= 1)
              {
                *(_WORD *)int v175 = 12;
                LOBYTE(v121) = 1;
                cnprint::CNPrinter::Print((cnprint::CNPrinter *)v175, (unsigned __int8 *)&v121, "ConvertProtobufToVLLocalizationEvent, NOTE: VL Position Vector failed the sensibility check.", v86, v87, v88, v89, v90, SLOBYTE(v116));
              }
              break;
            }
            uint64_t v68 = cntransformation::CNRigidTransformation::SetTransformationMatrix((uint64_t)a3 + 200, (uint64_t)&v165);
            if ((v68 & 1) == 0)
            {
              LogLevel = (uint64_t *)cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v68);
              if (LogLevel <= 1)
              {
                *(_WORD *)int v175 = 12;
                LOBYTE(v121) = 1;
                cnprint::CNPrinter::Print((cnprint::CNPrinter *)v175, (unsigned __int8 *)&v121, "ConvertProtobufToVLLocalizationEvent, Cannot set/store the cam3DV2ecef Transformation Matrix.", v91, v92, v93, v94, v95, SLOBYTE(v116));
              }
              break;
            }
            BOOL v69 = sub_18E0F1970(*((void *)this + 4), *((_DWORD *)this + 14), (uint64_t)a3);
            if (v69)
            {
              sub_18E0F1BA8((uint64_t)a3 + 640, (uint64_t)a3 + 200);
              sub_18DFEB238(3, 3, (uint64_t)&v154);
              uint64_t v70 = SHIDWORD(v155);
              int v71 = v157;
              *(void *)&v157[16 * SHIDWORD(v155)] = 0xBFF0000000000000;
              *(void *)&v71[8 * v70 + 8] = 0xBFF0000000000000;
              *((void *)v71 + 2) = 0xBFF0000000000000;
              sub_18DFE20A0((uint64_t)&v138, (uint64_t)&v154);
              long long v134 = 0u;
              long long v135 = 0u;
              if (&v134 != (long long *)((char *)a3 + 640))
              {
                long long v72 = *((_OWORD *)a3 + 41);
                long long v134 = *((_OWORD *)a3 + 40);
                long long v135 = v72;
              }
              cnrotation::Cat((double *)&v134, (const cnrotation::CNRotation *)&v138, (double *)v131);
              if ((char *)a3 + 640 != v131)
              {
                long long v73 = *(_OWORD *)&v131[16];
                *((_OWORD *)a3 + 40) = *(_OWORD *)v131;
                *((_OWORD *)a3 + 41) = v73;
              }
              cnrotation::CNRotation::drdq((cnrotation::CNRotation *)v131, (uint64_t)v126);
              cnrotation::CNRotation::dqaqdqa((cnrotation::CNRotation *)&v138, (uint64_t)v175);
              sub_18E02D89C((uint64_t)v126, (uint64_t)v175, (uint64_t)&v165);
              cnrotation::CNRotation::dqdr((cnrotation::CNRotation *)&v134, (uint64_t)&v121);
              sub_18E02D81C((uint64_t)&v165, (uint64_t)&v121, (uint64_t)v148);
              sub_18DFE2FA8((uint64_t)v175, (uint64_t)a3 + 736);
              sub_18DFE2FA8((uint64_t)&v165, (uint64_t)a3 + 960);
              sub_18DFF6360((uint64_t)v148, (uint64_t)v175, (uint64_t)&v121);
              sub_18DFF63E0((uint64_t)v148, (uint64_t)&v143);
              sub_18DFF6360((uint64_t)&v121, (uint64_t)&v143, (uint64_t)v126);
              cntransformation::CNRigidTransformation::SetPrr((uint64_t)a3 + 640, (uint64_t)v126);
              sub_18DFF6360((uint64_t)v148, (uint64_t)&v165, (uint64_t)v126);
              if (v127 == 3 && v128 == 3)
              {
                sub_18DFE2F24((uint64_t)a3 + 960, (uint64_t)v126);
                *((unsigned char *)a3 + 1072) = 1;
              }
              *((unsigned char *)a3 + 1080) = 1;
              sub_18DFE2FA8((uint64_t)v126, (uint64_t)a3 + 848);
              sub_18E03017C((uint64_t)a3 + 672);
              BOOL v77 = (*v130 < 0 || ((*v130 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE)
                 && (unint64_t)(*v130 - 1) > 0xFFFFFFFFFFFFELL;
              BOOL v85 = !v77
                 && ((uint64_t v78 = v130[v129 + 1], v78 >= 0)
                   ? (BOOL v79 = ((v78 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE)
                   : (BOOL v79 = 1),
                     v79 ? (BOOL v80 = (unint64_t)(v78 - 1) > 0xFFFFFFFFFFFFELL) : (BOOL v80 = 0),
                     !v80
                  && ((uint64_t v81 = v130[2 * v129 + 2], v81 >= 0)
                    ? (BOOL v82 = ((v81 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE)
                    : (BOOL v82 = 1),
                      v82 ? (BOOL v83 = (unint64_t)(v81 - 1) > 0xFFFFFFFFFFFFELL) : (BOOL v83 = 0),
                      !v83))
                 && v75 > 3185504.5
                 && (*(void *)&v75 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
              if (!cnprint::CNPrinter::GetLogLevel(v74))
              {
                LOWORD(v170) = 12;
                LOBYTE(v159) = 0;
                uint64_t v103 = (*(uint64_t (**)(const CoreNavigation::CLP::LogEntry::LogEntry_TimeStamp *))(*(void *)a3 + 16))(a3);
                double v105 = v104;
                uint64_t v106 = *((void *)a3 + 14);
                unint64_t v121 = (void *)*((void *)a3 + 13);
                *(void *)&long long v122 = v106;
                uint64_t v107 = (*(uint64_t (**)(const CoreNavigation::CLP::LogEntry::LogEntry_TimeStamp *))(*(void *)a3 + 16))(a3);
                *(double *)v108.i64 = v105;
                *(double *)v109.i64 = (double)v103;
                uint64_t v143 = (void *)v107;
                *(void *)&long long v144 = v110;
                CNTimeSpan::operator-((uint64_t)&v121, &v143, v108, v109);
                double v120 = v105 + (double)v103;
                cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v170, (unsigned __int8 *)&v159, "valid VLF data, t, %.3lf, applicability time,  %.3lf [dt %.3lf]", v111, v112, v113, v114, v115, SLOBYTE(v120));
              }
              return *((unsigned char *)a3 + 1080) && v85;
            }
            if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v69) <= 1)
            {
              *(_WORD *)int v175 = 12;
              LOBYTE(v165) = 1;
              uint64_t v96 = (*(uint64_t (**)(const CoreNavigation::CLP::LogEntry::LogEntry_TimeStamp *))(*(void *)a3 + 16))(a3);
              double v119 = v97 + (double)v96;
              cnprint::CNPrinter::Print((cnprint::CNPrinter *)v175, (unsigned __int8 *)&v165, "ConvertProtobufToVLLocalizationEvent, t, %.3lf, Error in parsing the VL 6x6 Covariance Matrix", v98, v99, v100, v101, v102, SLOBYTE(v119));
            }
            return 0;
          }
        }
      }
    }
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)LogLevel) <= 1)
    {
      *(_WORD *)int v175 = 12;
      LOBYTE(v165) = 1;
      uint64_t v62 = (*(uint64_t (**)(const CoreNavigation::CLP::LogEntry::LogEntry_TimeStamp *))(*(void *)a3 + 16))(a3);
      double v116 = v63 + (double)v62;
      int v11 = "ConvertProtobufToVLLocalizationEvent, t, %.3lf, Error in parsing the VL 4x4 Transformation Matrix";
      goto LABEL_40;
    }
  }
  else if (cnprint::CNPrinter::GetLogLevel(this) <= 1)
  {
    *(_WORD *)int v175 = 12;
    LOBYTE(v165) = 1;
    int v11 = "ConvertProtobufToVLLocalizationEvent, Event mach continuous time not present";
LABEL_40:
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v175, (unsigned __int8 *)&v165, v11, v6, v7, v8, v9, v10, SLOBYTE(v116));
  }
  return 0;
}

void sub_18E0F18D4(_Unwind_Exception *a1)
{
}

BOOL sub_18E0F1970(uint64_t a1, char a2, uint64_t a3)
{
  if ((a2 & 8) == 0) {
    return 0;
  }
  uint64_t v5 = a1;
  if (!a1)
  {
    CoreNavigation::CLP::LogEntry::Vision::protobuf_AddDesc_CoreNavigationCLPVisionEvent_2eproto(0);
    uint64_t v5 = *(void *)(CoreNavigation::CLP::LogEntry::Vision::VLLocalizationResult::default_instance_ + 32);
  }
  if (*(_DWORD *)(v5 + 16) == 6)
  {
    uint64_t v6 = 0;
    uint64_t v20 = 0x600000006;
    char v17 = a3;
    double v18 = &unk_1EDD197B8;
    long long v19 = xmmword_18E1F8570;
    uint64_t v21 = &v22;
    while (1)
    {
      if (v6 >= *(int *)(v5 + 16))
      {
        wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
        wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
        wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
        wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v24);
      }
      uint64_t v7 = *(void *)(*(void *)(v5 + 8) + 8 * v6);
      if (*(_DWORD *)(v7 + 16) != 6) {
        break;
      }
      for (unint64_t i = 0; i != 6; ++i)
      {
        if ((uint64_t)i >= *(int *)(v7 + 16))
        {
          wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
          wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
          wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
          wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v24);
        }
        if (i < 3) {
          int v9 = 3;
        }
        else {
          int v9 = -3;
        }
        *(double *)&v21[(int)(((int)v6 + 3) % 6u + HIDWORD(v19) * (i + v9))] = *(float *)(*(void *)(v7 + 8) + 4 * i);
      }
      if (++v6 == 6)
      {
        BOOL v10 = cntransformation::CNRigidTransformation::SetCovarianceMatrix(a3 + 200, (uint64_t)&v18);
        if (v10)
        {
          int v11 = 0;
        }
        else
        {
          int v11 = 1;
          if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v10) <= 1)
          {
            v24[0] = 12;
            unsigned __int8 v23 = 1;
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)v24, &v23, "ConvertProtobufToVLLocalizationEvent, Cannot set/store the cam3DV2ecef Transformation Matrix Covariance", v12, v13, v14, v15, v16, v17);
          }
        }
        return v11 == 0;
      }
    }
  }
  int v11 = 1;
  return v11 == 0;
}

void sub_18E0F1B88(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)(v1 - 136));
  _Unwind_Resume(a1);
}

uint64_t sub_18E0F1BA8(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  }
  sub_18DFE2F24(a1 + 32, a2 + 32);
  sub_18DFE2F24(a1 + 96, a2 + 96);
  sub_18DFE2F24(a1 + 208, a2 + 208);
  sub_18DFE2F24(a1 + 320, a2 + 320);
  *(unsigned char *)(a1 + 432) = *(unsigned char *)(a2 + 432);
  return a1;
}

uint64_t raven::ConvertProtobufToRavenGnssAssistanceFileEvent(raven *this, const CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::AssistanceFileContents *a2, const CoreNavigation::CLP::LogEntry::LogEntry_TimeStamp *a3, raven::RavenGnssAssistanceFileEvent *a4)
{
  int v4 = (cnprint::CNPrinter *)MEMORY[0x1F4188790](this);
  if ((*(unsigned char *)(v5 + 44) & 4) != 0)
  {
    uint64_t v15 = v6;
    uint64_t v16 = v4;
    v7.i64[0] = *(void *)(v5 + 24);
    *(_OWORD *)__src = 0uLL;
    char v17 = CNTimeSpan::SetTimeSpan(__src, 0, v7, v8);
    v19.i64[1] = __src[1];
    *(_OWORD *)(v15 + 8) = *(_OWORD *)__src;
    if (*((unsigned char *)v16 + 76))
    {
      uint64_t v20 = *((void *)v16 + 1);
      if (v20)
      {
        int v21 = *(_DWORD *)(v20 + 8);
      }
      else
      {
        CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::protobuf_AddDesc_CoreNavigationCLPRavenGnssAssistanceFile_2eproto((CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile *)v17);
        uint64_t v20 = *((void *)v16 + 1);
        int v21 = *(_DWORD *)(*(void *)(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::AssistanceFileContents::default_instance_
                                    + 8)
                        + 8);
        if (!v20)
        {
          CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::protobuf_AddDesc_CoreNavigationCLPRavenGnssAssistanceFile_2eproto(v22);
          uint64_t v20 = *(void *)(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::AssistanceFileContents::default_instance_
                          + 8);
        }
      }
      *(double *)v19.i64 = *(float *)(v20 + 12) + -561548.816;
      *(_OWORD *)__src = 0uLL;
      unsigned __int8 v23 = CNTimeSpan::SetTimeSpan(__src, 604800 * (v21 - 1042), v19, v18);
      v24.i64[0] = __src[1];
      *(double *)v25.i64 = *(double *)&__src[1] + (double)__src[0];
      double v26 = fabs(*(double *)v25.i64);
      if ((unint64_t)(*(void *)&v26 - 0x10000000000000) >> 53 > 0x3FE
        && (unint64_t)(*(void *)&v26 - 1) > 0xFFFFFFFFFFFFELL
        && COERCE__INT64(*(double *)&__src[1] + (double)__src[0]) != 0)
      {
        return 0;
      }
      *(void *)(v15 + 104) = __src[0];
      *(void *)(v15 + 112) = v24.i64[0];
      if ((*((unsigned char *)v16 + 76) & 2) == 0)
      {
        if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v23) > 1) {
          return 0;
        }
        LOWORD(__src[0]) = 12;
        LOBYTE(v98) = 1;
        uint64_t v14 = "#rof,ConvertProtobufToRavenGnssAssistanceFileEvent,ionosphere corrections not present";
        goto LABEL_7;
      }
      uint64_t v29 = *((void *)v16 + 2);
      if (!v29)
      {
        CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::protobuf_AddDesc_CoreNavigationCLPRavenGnssAssistanceFile_2eproto((CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile *)v23);
        uint64_t v29 = *(void *)(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::AssistanceFileContents::default_instance_
                        + 16);
      }
      if (*(unsigned char *)(v29 + 52))
      {
        uint64_t v30 = *(void *)(v29 + 8);
        if (v30)
        {
          int v31 = *(_DWORD *)(v30 + 8);
        }
        else
        {
          CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::protobuf_AddDesc_CoreNavigationCLPRavenGnssAssistanceFile_2eproto((CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile *)v23);
          uint64_t v30 = *(void *)(v29 + 8);
          int v31 = *(_DWORD *)(*(void *)(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::IonosphereCorrections::default_instance_
                                      + 8)
                          + 8);
          if (!v30)
          {
            CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::protobuf_AddDesc_CoreNavigationCLPRavenGnssAssistanceFile_2eproto(v32);
            uint64_t v30 = *(void *)(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::IonosphereCorrections::default_instance_
                            + 8);
          }
        }
        *(double *)v24.i64 = *(float *)(v30 + 12) + -561548.816;
        *(_OWORD *)__src = 0uLL;
        CNTimeSpan::SetTimeSpan(__src, 604800 * (v31 - 1042), v24, v25);
        long long v101 = *(_OWORD *)__src;
        double v33 = *(double *)&__src[1] + (double)__src[0];
        double v34 = fabs(v33);
        BOOL v35 = (unint64_t)(*(void *)&v34 - 0x10000000000000) >> 53 > 0x3FE
           && (unint64_t)(*(void *)&v34 - 1) > 0xFFFFFFFFFFFFELL;
        if (!v35 || *(void *)&v33 == 0)
        {
          uint64_t v37 = *(int *)(v29 + 24);
          if (!v37) {
            return 1;
          }
          uint64_t v38 = *(uint64_t **)(v29 + 16);
          uint64_t v87 = (char **)(v15 + 120);
          uint64_t v88 = &v38[v37];
          while (1)
          {
            uint64_t v39 = *v38;
            if ((~*(_DWORD *)(*v38 + 64) & 0xF) != 0) {
              break;
            }
            unsigned int v40 = *(_DWORD *)(v39 + 16);
            unsigned int v41 = *(_DWORD *)(v39 + 20);
            int v90 = *(_DWORD *)(v39 + 8);
            unsigned int v89 = *(_DWORD *)(v39 + 12);
            uint64_t v98 = 0;
            uint64_t v99 = 0;
            uint64_t v100 = 0;
            sub_18E0E8750((void **)&v98, *(int *)(v39 + 32));
            uint64_t v42 = *(int *)(v39 + 32);
            if (v42)
            {
              int v43 = *(float **)(v39 + 24);
              int v44 = &v43[v42];
              int v45 = v99;
              do
              {
                double v46 = *v43;
                if (v45 >= v100)
                {
                  int v48 = v98;
                  uint64_t v49 = v45 - v98;
                  unint64_t v50 = v49 + 1;
                  if ((unint64_t)(v49 + 1) >> 61) {
                    sub_18DEE1FC8();
                  }
                  uint64_t v51 = (char *)v100 - (char *)v98;
                  if (((char *)v100 - (char *)v98) >> 2 > v50) {
                    unint64_t v50 = v51 >> 2;
                  }
                  if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v52 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v52 = v50;
                  }
                  if (v52)
                  {
                    uint64_t v53 = (char *)sub_18DEDF808((uint64_t)&v100, v52);
                    int v48 = v98;
                    int v45 = v99;
                  }
                  else
                  {
                    uint64_t v53 = 0;
                  }
                  uint64_t v54 = (double *)&v53[8 * v49];
                  *uint64_t v54 = v46;
                  int v47 = v54 + 1;
                  while (v45 != v48)
                  {
                    uint64_t v55 = *((void *)v45-- - 1);
                    *((void *)v54-- - 1) = v55;
                  }
                  uint64_t v98 = v54;
                  uint64_t v99 = v47;
                  uint64_t v100 = (double *)&v53[8 * v52];
                  if (v48) {
                    operator delete(v48);
                  }
                }
                else
                {
                  *int v45 = v46;
                  int v47 = v45 + 1;
                }
                uint64_t v99 = v47;
                ++v43;
                int v45 = v47;
              }
              while (v43 != v44);
            }
            uint64_t v95 = 0;
            uint64_t v96 = 0;
            double v97 = 0;
            sub_18E0E8750((void **)&v95, *(int *)(v39 + 48));
            uint64_t v56 = *(int *)(v39 + 48);
            if (v56)
            {
              uint64_t v57 = *(float **)(v39 + 40);
              uint64_t v58 = &v57[v56];
              uint64_t v59 = v96;
              do
              {
                double v60 = *v57;
                if (v59 >= v97)
                {
                  uint64_t v62 = v95;
                  uint64_t v63 = v59 - v95;
                  unint64_t v64 = v63 + 1;
                  if ((unint64_t)(v63 + 1) >> 61) {
                    sub_18DEE1FC8();
                  }
                  uint64_t v65 = (char *)v97 - (char *)v95;
                  if (((char *)v97 - (char *)v95) >> 2 > v64) {
                    unint64_t v64 = v65 >> 2;
                  }
                  if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v66 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v66 = v64;
                  }
                  if (v66)
                  {
                    uint64_t v67 = (char *)sub_18DEDF808((uint64_t)&v97, v66);
                    uint64_t v62 = v95;
                    uint64_t v59 = v96;
                  }
                  else
                  {
                    uint64_t v67 = 0;
                  }
                  uint64_t v68 = (double *)&v67[8 * v63];
                  *uint64_t v68 = v60;
                  uint64_t v61 = v68 + 1;
                  while (v59 != v62)
                  {
                    uint64_t v69 = *((void *)v59-- - 1);
                    *((void *)v68-- - 1) = v69;
                  }
                  uint64_t v95 = v68;
                  uint64_t v96 = v61;
                  double v97 = (double *)&v67[8 * v66];
                  if (v62) {
                    operator delete(v62);
                  }
                }
                else
                {
                  *uint64_t v59 = v60;
                  uint64_t v61 = v59 + 1;
                }
                uint64_t v96 = v61;
                ++v57;
                uint64_t v59 = v61;
              }
              while (v57 != v58);
            }
            __src[0] = 0;
            sub_18E0F60D0(v94, v99 - v98, __src);
            __src[0] = 0;
            sub_18E0F60D0(v93, v96 - v95, __src);
            cnnavigation::SphericalHarmonicsIonosphereParameters::SphericalHarmonicsIonosphereParameters((cnnavigation::SphericalHarmonicsIonosphereParameters *)__src, v40, v41);
            int ModelParameters = cnnavigation::SphericalHarmonicsIonosphereParameters::LoadModelParameters((uint64_t)__src, (uint64_t)&v101, v90, (uint64_t *)&v98, (uint64_t **)&v95, (uint64_t *)v94, v93, v70, (double)v89, 0.0);
            if (!ModelParameters)
            {
              unint64_t v73 = *(void *)(v15 + 128);
              unint64_t v72 = *(void *)(v15 + 136);
              if (v73 >= v72)
              {
                unint64_t v75 = 0x80FE03F80FE03F81 * ((uint64_t)(v73 - (void)*v87) >> 6);
                unint64_t v76 = v75 + 1;
                if (v75 + 1 > 0x7F01FC07F01FCLL) {
                  sub_18DEE1FC8();
                }
                unint64_t v77 = 0x80FE03F80FE03F81 * ((uint64_t)(v72 - (void)*v87) >> 6);
                if (2 * v77 > v76) {
                  unint64_t v76 = 2 * v77;
                }
                if (v77 >= 0x3F80FE03F80FELL) {
                  unint64_t v78 = 0x7F01FC07F01FCLL;
                }
                else {
                  unint64_t v78 = v76;
                }
                if (v78)
                {
                  BOOL v79 = (char *)sub_18E0CC1E0(v15 + 136, v78);
                  uint64_t v91 = v80;
                }
                else
                {
                  BOOL v79 = 0;
                  uint64_t v91 = 0;
                }
                uint64_t v81 = &v79[8256 * v75];
                memcpy(v81, __src, 0x2040uLL);
                BOOL v82 = *(char **)(v15 + 120);
                BOOL v83 = *(char **)(v15 + 128);
                if (v83 == v82)
                {
                  int v84 = v81;
                }
                else
                {
                  int v84 = v81;
                  do
                  {
                    v84 -= 8256;
                    v83 -= 8256;
                    memcpy(v84, v83, 0x2040uLL);
                  }
                  while (v83 != v82);
                  BOOL v83 = *v87;
                }
                uint64_t v74 = v81 + 8256;
                *(void *)(v15 + 120) = v84;
                *(void *)(v15 + 128) = v74;
                *(void *)(v15 + 136) = &v79[8256 * v91];
                if (v83) {
                  operator delete(v83);
                }
              }
              else
              {
                memcpy(*(void **)(v15 + 128), __src, 0x2040uLL);
                uint64_t v74 = (char *)(v73 + 8256);
              }
              *(void *)(v15 + 128) = v74;
            }
            if (v93[0])
            {
              v93[1] = v93[0];
              operator delete(v93[0]);
            }
            if (v94[0])
            {
              v94[1] = v94[0];
              operator delete(v94[0]);
            }
            if (v95)
            {
              uint64_t v96 = v95;
              operator delete(v95);
            }
            if (v98)
            {
              uint64_t v99 = v98;
              operator delete(v98);
            }
            if (ModelParameters) {
              break;
            }
            if (++v38 == v88) {
              return 1;
            }
          }
        }
      }
    }
    else if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v17) <= 1)
    {
      LOWORD(__src[0]) = 12;
      LOBYTE(v98) = 1;
      uint64_t v14 = "#rof,ConvertProtobufToRavenGnssAssistanceFileEvent,file creation time not present";
      goto LABEL_7;
    }
  }
  else if (cnprint::CNPrinter::GetLogLevel(v4) <= 1)
  {
    LOWORD(__src[0]) = 12;
    LOBYTE(v98) = 1;
    uint64_t v14 = "#rof,ConvertProtobufToRavenGnssAssistanceFileEvent,mach continuous time not present";
LABEL_7:
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)__src, (unsigned __int8 *)&v98, v14, v9, v10, v11, v12, v13, v86);
  }
  return 0;
}

void sub_18E0F231C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)(v1 - 224);
  if (v3)
  {
    *(void *)(v1 - 216) = v3;
    operator delete(v3);
  }
  int v4 = *(void **)(v1 - 200);
  if (v4)
  {
    *(void *)(v1 - 192) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)(v1 - 176);
  if (v5)
  {
    *(void *)(v1 - 168) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *(void **)(v1 - 152);
  if (v6)
  {
    *(void *)(v1 - 144) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

double raven::ConvertRavenTimeToProtobuf(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 44);
  *(double *)(a2 + 8) = *(double *)(a1 + 32) + (double)*(uint64_t *)(a1 + 24);
  double result = *(double *)(a1 + 8) + (double)*(uint64_t *)a1;
  *(_DWORD *)(a2 + 44) = v2 | 5;
  *(double *)(a2 + 24) = result;
  return result;
}

void raven::ConvertRavenSolutionEventToProtobuf(raven *this, const raven::RavenSolutionEvent *a2, CoreNavigation::CLP::LogEntry::Raven::RavenOutput *a3)
{
  int v5 = *((_DWORD *)a2 + 15) | 1;
  *((_DWORD *)a2 + 15) = v5;
  uint64_t v6 = *((void *)a2 + 1);
  if (!v6) {
    operator new();
  }
  *((_DWORD *)a2 + 15) = v5 | 0x20;
  uint64_t v7 = *((void *)a2 + 6);
  if (!v7) {
    operator new();
  }
  int8x16_t v8 = (_OWORD *)((char *)this + 1096);
  *(_DWORD *)(v6 + 292) |= 1u;
  uint64_t v9 = *(void *)(v6 + 8);
  if (!v9) {
    operator new();
  }
  sub_18E0F6154((double *)this + 14, v9);
  uint64_t v17 = 0;
  if (*((unsigned __int8 *)this + 208) - 1 >= 5) {
    int v18 = 1;
  }
  else {
    int v18 = (*((unsigned char *)this + 208) - 1) + 2;
  }
  int v19 = *((unsigned __int8 *)this + 209);
  if (v19 == 1) {
    int v20 = 2;
  }
  else {
    int v20 = 1;
  }
  if (v19 == 2) {
    int v21 = 3;
  }
  else {
    int v21 = v20;
  }
  int v22 = *(_DWORD *)(v6 + 292);
  *(_DWORD *)(v6 + 16) = v18;
  *(_DWORD *)(v6 + 20) = v21;
  *(void *)(v6 + 24) = *((void *)this + 27);
  *(double *)(v6 + 32) = *((double *)this + 29) + (double)*((uint64_t *)this + 28);
  *(_OWORD *)(v6 + 40) = *((_OWORD *)this + 15);
  *(void *)(v6 + 184) = *((void *)this + 32);
  *(void *)(v6 + 56) = *((unsigned __int16 *)this + 132);
  *(_OWORD *)(v6 + 64) = *v8;
  *(_OWORD *)(v6 + 80) = *(_OWORD *)((char *)this + 1112);
  *(_OWORD *)(v6 + 96) = *(_OWORD *)((char *)this + 1128);
  *(_OWORD *)(v6 + 160) = *(_OWORD *)((char *)this + 1144);
  uint64_t v23 = *((void *)this + 145);
  *(_DWORD *)(v6 + 292) = v22 | 0xF3FFE;
  *(void *)(v6 + 176) = v23;
  do
  {
    uint64_t v24 = *((unsigned int *)this + v17 + 67);
    if (v24)
    {
      int v25 = *(_DWORD *)(v6 + 124);
      uint64_t v26 = *(int *)(v6 + 120);
      if ((int)v26 >= v25)
      {
        if (v25 == *(_DWORD *)(v6 + 128))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(v6 + 112));
          int v25 = *(_DWORD *)(v6 + 124);
        }
        *(_DWORD *)(v6 + 124) = v25 + 1;
        operator new();
      }
      uint64_t v27 = *(void *)(v6 + 112);
      *(_DWORD *)(v6 + 120) = v26 + 1;
      uint64_t v28 = *(void *)(v27 + 8 * v26);
      unsigned int v29 = sub_18E0F63A0(v17, v10, v11, v12, v13, v14, v15, v16);
      if (v29 >= 0x24) {
LABEL_144:
      }
        __assert_rtn("set_type", "CoreNavigationCLPRavenOutput.pb.h", 4707, "::CoreNavigation::CLP::LogEntry::Raven::MeasurementTypeCount_MeasurementType_IsValid(value)");
      int v30 = *(_DWORD *)(v28 + 40);
      *(_DWORD *)(v28 + 32) = v29;
      *(_DWORD *)(v28 + 40) = v30 | 0xC;
      *(void *)(v28 + 24) = v24;
    }
    ++v17;
  }
  while (v17 != 33);
  for (uint64_t i = 0; i != 33; ++i)
  {
    uint64_t v32 = *((unsigned int *)this + i + 100);
    if (v32)
    {
      int v33 = *(_DWORD *)(v6 + 148);
      uint64_t v34 = *(int *)(v6 + 144);
      if ((int)v34 >= v33)
      {
        if (v33 == *(_DWORD *)(v6 + 152))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(v6 + 136));
          int v33 = *(_DWORD *)(v6 + 148);
        }
        *(_DWORD *)(v6 + 148) = v33 + 1;
        operator new();
      }
      uint64_t v35 = *(void *)(v6 + 136);
      *(_DWORD *)(v6 + 144) = v34 + 1;
      uint64_t v36 = *(void *)(v35 + 8 * v34);
      unsigned int v37 = sub_18E0F63A0(i, v10, v11, v12, v13, v14, v15, v16);
      if (v37 >= 0x24) {
        goto LABEL_144;
      }
      int v38 = *(_DWORD *)(v36 + 40);
      *(_DWORD *)(v36 + 32) = v37;
      *(_DWORD *)(v36 + 40) = v38 | 0xC;
      *(void *)(v36 + 24) = v32;
    }
  }
  for (uint64_t j = 0; j != 33; ++j)
  {
    uint64_t v40 = *((unsigned int *)this + j + 133);
    if (v40)
    {
      int v41 = *(_DWORD *)(v6 + 204);
      uint64_t v42 = *(int *)(v6 + 200);
      if ((int)v42 >= v41)
      {
        if (v41 == *(_DWORD *)(v6 + 208))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(v6 + 192));
          int v41 = *(_DWORD *)(v6 + 204);
        }
        *(_DWORD *)(v6 + 204) = v41 + 1;
        operator new();
      }
      uint64_t v43 = *(void *)(v6 + 192);
      *(_DWORD *)(v6 + 200) = v42 + 1;
      uint64_t v44 = *(void *)(v43 + 8 * v42);
      unsigned int v45 = sub_18E0F63A0(j, v10, v11, v12, v13, v14, v15, v16);
      if (v45 >= 0x24) {
        goto LABEL_144;
      }
      int v46 = *(_DWORD *)(v44 + 40);
      *(_DWORD *)(v44 + 32) = v45;
      *(_DWORD *)(v44 + 40) = v46 | 0xC;
      *(void *)(v44 + 24) = v40;
    }
  }
  for (uint64_t k = 0; k != 33; ++k)
  {
    uint64_t v48 = *((unsigned int *)this + k + 166);
    if (v48)
    {
      int v49 = *(_DWORD *)(v6 + 228);
      uint64_t v50 = *(int *)(v6 + 224);
      if ((int)v50 >= v49)
      {
        if (v49 == *(_DWORD *)(v6 + 232))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(v6 + 216));
          int v49 = *(_DWORD *)(v6 + 228);
        }
        *(_DWORD *)(v6 + 228) = v49 + 1;
        operator new();
      }
      uint64_t v51 = *(void *)(v6 + 216);
      *(_DWORD *)(v6 + 224) = v50 + 1;
      uint64_t v52 = *(void *)(v51 + 8 * v50);
      unsigned int v53 = sub_18E0F63A0(k, v10, v11, v12, v13, v14, v15, v16);
      if (v53 >= 0x24) {
        goto LABEL_144;
      }
      int v54 = *(_DWORD *)(v52 + 40);
      *(_DWORD *)(v52 + 32) = v53;
      *(_DWORD *)(v52 + 40) = v54 | 0xC;
      *(void *)(v52 + 24) = v48;
    }
  }
  for (uint64_t m = 0; m != 33; ++m)
  {
    uint64_t v56 = *((unsigned int *)this + m + 199);
    if (v56)
    {
      int v57 = *(_DWORD *)(v6 + 252);
      uint64_t v58 = *(int *)(v6 + 248);
      if ((int)v58 >= v57)
      {
        if (v57 == *(_DWORD *)(v6 + 256))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(v6 + 240));
          int v57 = *(_DWORD *)(v6 + 252);
        }
        *(_DWORD *)(v6 + 252) = v57 + 1;
        operator new();
      }
      uint64_t v59 = *(void *)(v6 + 240);
      *(_DWORD *)(v6 + 248) = v58 + 1;
      uint64_t v60 = *(void *)(v59 + 8 * v58);
      unsigned int v61 = sub_18E0F63A0(m, v10, v11, v12, v13, v14, v15, v16);
      if (v61 >= 0x24) {
        goto LABEL_144;
      }
      int v62 = *(_DWORD *)(v60 + 40);
      *(_DWORD *)(v60 + 32) = v61;
      *(_DWORD *)(v60 + 40) = v62 | 0xC;
      *(void *)(v60 + 24) = v56;
    }
  }
  for (uint64_t n = 0; n != 33; ++n)
  {
    uint64_t v64 = *((unsigned int *)this + n + 232);
    if (v64)
    {
      uint64_t v65 = *(int *)(v6 + 272);
      int v66 = *(_DWORD *)(v6 + 276);
      if ((int)v65 >= v66)
      {
        if (v66 == *(_DWORD *)(v6 + 280))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(v6 + 264));
          int v66 = *(_DWORD *)(v6 + 276);
        }
        *(_DWORD *)(v6 + 276) = v66 + 1;
        operator new();
      }
      uint64_t v67 = *(void *)(v6 + 264);
      *(_DWORD *)(v6 + 272) = v65 + 1;
      uint64_t v68 = *(void *)(v67 + 8 * v65);
      unsigned int v69 = sub_18E0F63A0(n, v10, v11, v12, v13, v14, v15, v16);
      if (v69 >= 0x24) {
        goto LABEL_144;
      }
      int v70 = *(_DWORD *)(v68 + 40);
      *(_DWORD *)(v68 + 32) = v69;
      *(_DWORD *)(v68 + 40) = v70 | 0xC;
      *(void *)(v68 + 24) = v64;
    }
  }
  uint64_t v71 = *((void *)this + 133);
  int v72 = *(_DWORD *)(v7 + 168);
  *(_DWORD *)(v7 + 168) = v72 | 0x400;
  *(void *)(v7 + 136) = v71;
  int v73 = *((_DWORD *)this + 270);
  *(_DWORD *)(v7 + 168) = v72 | 0x1400;
  *(_DWORD *)(v7 + 60) = v73;
  *(_DWORD *)(v7 + 160) = *((_DWORD *)this + 271);
  uint64_t v74 = *((void *)this + 136);
  *(_DWORD *)(v7 + 168) = v72 | 0x7400;
  *(void *)(v7 + 152) = v74;
  *((_DWORD *)a2 + 15) |= 4u;
  uint64_t v75 = *((void *)a2 + 3);
  if (!v75) {
    operator new();
  }
  unint64_t v76 = (_DWORD *)(v75 + 92);
  uint64_t v77 = *(void *)(v75 + 8);
  *(_DWORD *)(v75 + 92) |= 1u;
  if (!v77) {
    operator new();
  }
  sub_18E0F6154((double *)this + 146, v77);
  if (*((unsigned char *)this + 1264))
  {
    *v76 |= 2u;
    uint64_t v78 = *(void *)(v75 + 16);
    if (!v78) {
      operator new();
    }
    int v79 = *(_DWORD *)(v78 + 92);
    *(_OWORD *)(v78 + 16) = *(_OWORD *)((char *)this + 1272);
    *(_OWORD *)(v78 + 32) = *(_OWORD *)((char *)this + 1288);
    *(_OWORD *)(v78 + 48) = *(_OWORD *)((char *)this + 1304);
    *(_OWORD *)(v78 + 64) = *(_OWORD *)((char *)this + 1320);
    uint64_t v80 = *((void *)this + 167);
    *(_DWORD *)(v78 + 92) = v79 | 0x3FE;
    *(void *)(v78 + 80) = v80;
  }
  if (*((unsigned char *)this + 1344))
  {
    *v76 |= 4u;
    uint64_t v81 = *(void *)(v75 + 24);
    if (!v81) {
      operator new();
    }
    int v82 = *(_DWORD *)(v81 + 132);
    *(void *)(v81 + 16) = *((void *)this + 169);
    uint64_t v83 = *((void *)this + 173);
    *(_DWORD *)(v81 + 132) = v82 | 0x22;
    *(void *)(v81 + 48) = v83;
  }
  if (*((unsigned char *)this + 1345))
  {
    *v76 |= 4u;
    uint64_t v84 = *(void *)(v75 + 24);
    if (!v84) {
      operator new();
    }
    int v85 = *(_DWORD *)(v84 + 132);
    *(_OWORD *)(v84 + 24) = *((_OWORD *)this + 85);
    *(void *)(v84 + 40) = *((void *)this + 172);
    *(_OWORD *)(v84 + 80) = *(_OWORD *)((char *)this + 1416);
    *(_OWORD *)(v84 + 96) = *(_OWORD *)((char *)this + 1432);
    *(_DWORD *)(v84 + 132) = v85 | 0x7E1C;
    *(_OWORD *)(v84 + 112) = *(_OWORD *)((char *)this + 1448);
    if (*((unsigned char *)this + 1344) && *((unsigned char *)this + 1345))
    {
      *v76 |= 4u;
      int v86 = *(_DWORD *)(v84 + 132);
      *(_OWORD *)(v84 + 56) = *((_OWORD *)this + 87);
      uint64_t v87 = *((void *)this + 176);
      *(_DWORD *)(v84 + 132) = v86 | 0x1C0;
      *(void *)(v84 + 72) = v87;
    }
  }
  if (*((unsigned char *)this + 1464))
  {
    *v76 |= 8u;
    uint64_t v88 = *(void *)(v75 + 32);
    if (!v88) {
      operator new();
    }
    int v89 = *(_DWORD *)(v88 + 92);
    *(_OWORD *)(v88 + 16) = *((_OWORD *)this + 92);
    *(_OWORD *)(v88 + 32) = *((_OWORD *)this + 93);
    *(_OWORD *)(v88 + 48) = *((_OWORD *)this + 94);
    *(_OWORD *)(v88 + 64) = *((_OWORD *)this + 95);
    uint64_t v90 = *((void *)this + 192);
    *(_DWORD *)(v88 + 92) = v89 | 0x3FE;
    *(void *)(v88 + 80) = v90;
  }
  if (*((unsigned char *)this + 1544))
  {
    *v76 |= 0x10u;
    uint64_t v91 = *(void *)(v75 + 40);
    if (!v91) {
      operator new();
    }
    int v92 = *(_DWORD *)(v91 + 92);
    *(_OWORD *)(v91 + 16) = *((_OWORD *)this + 97);
    *(_OWORD *)(v91 + 32) = *((_OWORD *)this + 98);
    *(_OWORD *)(v91 + 48) = *((_OWORD *)this + 99);
    *(_OWORD *)(v91 + 64) = *((_OWORD *)this + 100);
    uint64_t v93 = *((void *)this + 202);
    *(_DWORD *)(v91 + 92) = v92 | 0x3FE;
    *(void *)(v91 + 80) = v93;
  }
  if (*((unsigned char *)this + 1624))
  {
    *v76 |= 0x20u;
    uint64_t v94 = *(void *)(v75 + 48);
    if (!v94) {
      operator new();
    }
    int v95 = *(_DWORD *)(v94 + 132);
    *(_OWORD *)(v94 + 16) = *((_OWORD *)this + 102);
    *(_OWORD *)(v94 + 32) = *((_OWORD *)this + 103);
    *(_OWORD *)(v94 + 48) = *((_OWORD *)this + 104);
    *(_OWORD *)(v94 + 64) = *((_OWORD *)this + 105);
    *(_OWORD *)(v94 + 80) = *((_OWORD *)this + 106);
    *(_OWORD *)(v94 + 96) = *((_OWORD *)this + 107);
    *(_DWORD *)(v94 + 132) = v95 | 0x7FFE;
    *(_OWORD *)(v94 + 112) = *((_OWORD *)this + 108);
  }
  if (*((unsigned char *)this + 1744))
  {
    *v76 |= 0x40u;
    uint64_t v96 = *(void *)(v75 + 56);
    if (!v96) {
      operator new();
    }
    int v97 = *(_DWORD *)(v96 + 92);
    *(_OWORD *)(v96 + 16) = *(_OWORD *)((char *)this + 1752);
    *(_OWORD *)(v96 + 32) = *(_OWORD *)((char *)this + 1768);
    *(_OWORD *)(v96 + 48) = *(_OWORD *)((char *)this + 1784);
    *(_OWORD *)(v96 + 64) = *(_OWORD *)((char *)this + 1800);
    uint64_t v98 = *((void *)this + 227);
    *(_DWORD *)(v96 + 92) = v97 | 0x3FE;
    *(void *)(v96 + 80) = v98;
  }
  if (*((unsigned char *)this + 1824))
  {
    *v76 |= 0x80u;
    uint64_t v99 = *(void *)(v75 + 64);
    if (!v99) {
      operator new();
    }
    int v100 = *(_DWORD *)(v99 + 92);
    *(_OWORD *)(v99 + 16) = *(_OWORD *)((char *)this + 1832);
    *(_OWORD *)(v99 + 32) = *(_OWORD *)((char *)this + 1848);
    *(_OWORD *)(v99 + 48) = *(_OWORD *)((char *)this + 1864);
    *(_OWORD *)(v99 + 64) = *(_OWORD *)((char *)this + 1880);
    uint64_t v101 = *((void *)this + 237);
    *(_DWORD *)(v99 + 92) = v100 | 0x3FE;
    *(void *)(v99 + 80) = v101;
  }
  if (*((unsigned char *)this + 1904))
  {
    *v76 |= 0x100u;
    uint64_t v102 = *(void *)(v75 + 72);
    if (!v102) {
      operator new();
    }
    int v103 = *(_DWORD *)(v102 + 92);
    *(_OWORD *)(v102 + 16) = *(_OWORD *)((char *)this + 1912);
    *(_OWORD *)(v102 + 32) = *(_OWORD *)((char *)this + 1928);
    *(_OWORD *)(v102 + 48) = *(_OWORD *)((char *)this + 1944);
    *(_OWORD *)(v102 + 64) = *(_OWORD *)((char *)this + 1960);
    uint64_t v104 = *((void *)this + 247);
    *(_DWORD *)(v102 + 92) = v103 | 0x3FE;
    *(void *)(v102 + 80) = v104;
  }
  if (*((unsigned char *)this + 1984))
  {
    *v76 |= 0x200u;
    uint64_t v105 = *(void *)(v75 + 80);
    if (!v105) {
      operator new();
    }
    int v106 = *(_DWORD *)(v105 + 60);
    *(_OWORD *)(v105 + 16) = *(_OWORD *)((char *)this + 1992);
    *(_OWORD *)(v105 + 32) = *(_OWORD *)((char *)this + 2008);
    uint64_t v107 = *((void *)this + 253);
    *(_DWORD *)(v105 + 60) = v106 | 0x3E;
    *(void *)(v105 + 48) = v107;
  }
  *((_DWORD *)a2 + 15) |= 2u;
  uint64_t v108 = *((void *)a2 + 2);
  if (!v108) {
    operator new();
  }
  int8x16_t v109 = (int *)(v108 + 228);
  uint64_t v110 = *(void *)(v108 + 8);
  *(_DWORD *)(v108 + 228) |= 1u;
  if (!v110) {
    operator new();
  }
  sub_18E0F6154((double *)this + 254, v110);
  unsigned int v111 = 0;
  if (*((unsigned __int8 *)this + 2128) - 1 < 9) {
    int v112 = (*((unsigned char *)this + 2128) - 1) + 1;
  }
  else {
    int v112 = 0;
  }
  int v113 = *v109;
  *(_DWORD *)(v108 + 24) = v112;
  *(_OWORD *)(v108 + 56) = *(_OWORD *)((char *)this + 2136);
  *(_OWORD *)(v108 + 72) = *(_OWORD *)((char *)this + 2152);
  *(_OWORD *)(v108 + 88) = *(_OWORD *)((char *)this + 2168);
  *(_OWORD *)(v108 + 104) = *(_OWORD *)((char *)this + 2184);
  *int8x16_t v109 = v113 | 0x7FE02;
  *(_OWORD *)(v108 + 120) = *(_OWORD *)((char *)this + 2200);
  if (*((unsigned __int8 *)this + 2320) - 1 < 3) {
    int v114 = (*((unsigned char *)this + 2320) - 1) + 1;
  }
  else {
    int v114 = 0;
  }
  *(_DWORD *)(v108 + 28) = v114;
  *(_OWORD *)(v108 + 144) = *(_OWORD *)((char *)this + 2328);
  *(_OWORD *)(v108 + 160) = *(_OWORD *)((char *)this + 2344);
  if (*((unsigned __int8 *)this + 2360) - 1 < 3) {
    int v115 = (*((unsigned char *)this + 2360) - 1) + 1;
  }
  else {
    int v115 = 0;
  }
  *(_DWORD *)(v108 + 52) = v115;
  *(_OWORD *)(v108 + 176) = *((_OWORD *)this + 148);
  *(_OWORD *)(v108 + 192) = *((_OWORD *)this + 149);
  unsigned int v116 = *((unsigned __int8 *)this + 2216) - 1;
  if (v116 <= 8) {
    unsigned int v111 = dword_18E215844[(char)v116];
  }
  *(_DWORD *)(v108 + 48) = v111;
  int v117 = *((unsigned __int8 *)this + 2400);
  if (v117 == 2) {
    int v118 = 2;
  }
  else {
    int v118 = v117 == 1;
  }
  *(_DWORD *)(v108 + 136) = v118;
  *(_OWORD *)(v108 + 208) = *(_OWORD *)((char *)this + 2408);
  if (*((unsigned __int8 *)this + 2424) - 1 >= 6) {
    int v119 = 1;
  }
  else {
    int v119 = (*((unsigned char *)this + 2424) - 1) + 2;
  }
  *int8x16_t v109 = v113 | 0x3FFFFFCA;
  *(_DWORD *)(v108 + 140) = v119;
}

void raven::ConvertProtobufToRavenSolutionEvent(raven *this, const CoreNavigation::CLP::LogEntry::Raven::RavenOutput *a2, raven::RavenSolutionEvent *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, int8x16_t a10)
{
  uint64_t v12 = (char *)a2 + 104;
  uint64_t v13 = *((void *)this + 1);
  if (!v13)
  {
    CoreNavigation::CLP::LogEntry::Raven::protobuf_AddDesc_CoreNavigationCLPRavenOutput_2eproto(this);
    uint64_t v13 = *(void *)(CoreNavigation::CLP::LogEntry::Raven::RavenOutput::default_instance_ + 8);
  }
  raven::ConvertProtobufToRavenStatus((uint64_t)v12, v13, a9, a10, (uint64_t)a3, a4, a5, a6, a7, a8);
  uint64_t v23 = *((void *)this + 3);
  if (!v23)
  {
    CoreNavigation::CLP::LogEntry::Raven::protobuf_AddDesc_CoreNavigationCLPRavenOutput_2eproto(v14);
    uint64_t v23 = *(void *)(CoreNavigation::CLP::LogEntry::Raven::RavenOutput::default_instance_ + 24);
  }
  raven::ConvertProtobufToRavenSolution((uint64_t)a2 + 1168, v23, v21, v22, v15, v16, v17, v18, v19, v20);
  uint64_t v33 = *((void *)this + 2);
  if (!v33)
  {
    CoreNavigation::CLP::LogEntry::Raven::protobuf_AddDesc_CoreNavigationCLPRavenOutput_2eproto(v24);
    uint64_t v33 = *(void *)(CoreNavigation::CLP::LogEntry::Raven::RavenOutput::default_instance_ + 16);
  }

  raven::ConvertProtobufToRavenActivity((uint64_t)a2 + 2032, v33, v31, v32, v25, v26, v27, v28, v29, v30);
}

void raven::ConvertProtobufToRavenStatus(uint64_t a1, uint64_t a2, double a3, int8x16_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  int8x16_t v109 = &unk_1EDD0F200;
  int8x16_t v12 = 0uLL;
  long long v110 = 0u;
  long long v111 = 0u;
  if (*(unsigned char *)(a2 + 292))
  {
    uint64_t v13 = *(void *)(a2 + 8);
    if (!v13)
    {
      CoreNavigation::CLP::LogEntry::Raven::protobuf_AddDesc_CoreNavigationCLPRavenOutput_2eproto((CoreNavigation::CLP::LogEntry::Raven *)a1);
      uint64_t v13 = *(void *)(CoreNavigation::CLP::LogEntry::Raven::EstimatorHealth::default_instance_ + 8);
    }
    if ((*(unsigned char *)(v13 + 52) & 2) != 0)
    {
      uint64_t v14 = *(void *)(a2 + 8);
      if (!v14)
      {
        CoreNavigation::CLP::LogEntry::Raven::protobuf_AddDesc_CoreNavigationCLPRavenOutput_2eproto((CoreNavigation::CLP::LogEntry::Raven *)a1);
        uint64_t v14 = *(void *)(CoreNavigation::CLP::LogEntry::Raven::EstimatorHealth::default_instance_ + 8);
      }
      uint64_t v15 = *(void *)(v14 + 16);
      if (!v15)
      {
        CoreNavigation::CLP::LogEntry::Raven::protobuf_AddDesc_CoreNavigationCLPRavenOutput_2eproto((CoreNavigation::CLP::LogEntry::Raven *)a1);
        uint64_t v15 = *(void *)(CoreNavigation::CLP::LogEntry::Raven::TimeStamp::default_instance_ + 16);
      }
      uint64_t v16 = *(void *)(v15 + 8);
      uint64_t v17 = *(void *)(a2 + 8);
      if (!v17)
      {
        CoreNavigation::CLP::LogEntry::Raven::protobuf_AddDesc_CoreNavigationCLPRavenOutput_2eproto((CoreNavigation::CLP::LogEntry::Raven *)a1);
        uint64_t v17 = *(void *)(CoreNavigation::CLP::LogEntry::Raven::EstimatorHealth::default_instance_ + 8);
      }
      uint64_t v18 = *(void *)(v17 + 16);
      if (!v18)
      {
        CoreNavigation::CLP::LogEntry::Raven::protobuf_AddDesc_CoreNavigationCLPRavenOutput_2eproto((CoreNavigation::CLP::LogEntry::Raven *)a1);
        uint64_t v18 = *(void *)(CoreNavigation::CLP::LogEntry::Raven::TimeStamp::default_instance_ + 16);
      }
      a4.i64[0] = *(void *)(v18 + 16);
      *(double *)v12.i64 = *(double *)a4.i64 + (double)v16;
      HIDWORD(v111) |= 1u;
      *(double *)&long long v110 = *(double *)v12.i64;
    }
  }
  if (*(unsigned char *)(a2 + 292))
  {
    uint64_t v19 = *(void *)(a2 + 8);
    if (!v19)
    {
      CoreNavigation::CLP::LogEntry::Raven::protobuf_AddDesc_CoreNavigationCLPRavenOutput_2eproto((CoreNavigation::CLP::LogEntry::Raven *)a1);
      uint64_t v19 = *(void *)(CoreNavigation::CLP::LogEntry::Raven::EstimatorHealth::default_instance_ + 8);
    }
    if (*(unsigned char *)(v19 + 52))
    {
      uint64_t v20 = *(void *)(a2 + 8);
      if (!v20)
      {
        CoreNavigation::CLP::LogEntry::Raven::protobuf_AddDesc_CoreNavigationCLPRavenOutput_2eproto((CoreNavigation::CLP::LogEntry::Raven *)a1);
        uint64_t v20 = *(void *)(CoreNavigation::CLP::LogEntry::Raven::EstimatorHealth::default_instance_ + 8);
      }
      uint64_t v21 = *(void *)(v20 + 8);
      if (!v21)
      {
        CoreNavigation::CLP::LogEntry::Raven::protobuf_AddDesc_CoreNavigationCLPRavenOutput_2eproto((CoreNavigation::CLP::LogEntry::Raven *)a1);
        uint64_t v21 = *(void *)(CoreNavigation::CLP::LogEntry::Raven::TimeStamp::default_instance_ + 8);
      }
      uint64_t v22 = *(void *)(v21 + 8);
      uint64_t v23 = *(void *)(a2 + 8);
      if (!v23)
      {
        CoreNavigation::CLP::LogEntry::Raven::protobuf_AddDesc_CoreNavigationCLPRavenOutput_2eproto((CoreNavigation::CLP::LogEntry::Raven *)a1);
        uint64_t v23 = *(void *)(CoreNavigation::CLP::LogEntry::Raven::EstimatorHealth::default_instance_ + 8);
      }
      uint64_t v24 = *(void *)(v23 + 8);
      if (!v24)
      {
        CoreNavigation::CLP::LogEntry::Raven::protobuf_AddDesc_CoreNavigationCLPRavenOutput_2eproto((CoreNavigation::CLP::LogEntry::Raven *)a1);
        uint64_t v24 = *(void *)(CoreNavigation::CLP::LogEntry::Raven::TimeStamp::default_instance_ + 8);
      }
      a4.i64[0] = *(void *)(v24 + 16);
      *(double *)v12.i64 = *(double *)a4.i64 + (double)v22;
      HIDWORD(v111) |= 4u;
      *(double *)&long long v111 = *(double *)v12.i64;
    }
  }
  raven::ConvertProtobufToRavenTime((uint64_t)&v109, a1 + 8, 1, a6, a7, a8, a9, a10, v12, a4);
  int v27 = *(_DWORD *)(a2 + 292);
  if ((v27 & 2) != 0)
  {
    unint64_t v28 = *(unsigned int *)(a2 + 16);
    if (v28 >= 7) {
      char v29 = 0;
    }
    else {
      char v29 = 0x5040302010000uLL >> (8 * v28);
    }
    *(unsigned char *)(a1 + 104) = v29;
  }
  if ((v27 & 4) != 0)
  {
    int v30 = *(_DWORD *)(a2 + 20);
    if (v30 == 3) {
      char v31 = 2;
    }
    else {
      char v31 = v30 == 2;
    }
    *(unsigned char *)(a1 + 105) = v31;
  }
  *(void *)(a1 + 112) = *(void *)(a2 + 24);
  v25.i64[0] = *(void *)(a2 + 32);
  *(_OWORD *)int v106 = 0uLL;
  CNTimeSpan::SetTimeSpan(v106, 0, v25, v26);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)v106;
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 152) = *(void *)(a2 + 184);
  *(_WORD *)(a1 + 160) = *(void *)(a2 + 56);
  *(_OWORD *)(a1 + 992) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 1008) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 1024) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 1040) = *(_OWORD *)(a2 + 160);
  *(void *)(a1 + 1056) = *(void *)(a2 + 176);
  if (*(int *)(a2 + 120) >= 1)
  {
    uint64_t v32 = 0;
    while (2)
    {
      CoreNavigation::CLP::LogEntry::Raven::MeasurementTypeCount::MeasurementTypeCount((CoreNavigation::CLP::LogEntry::Raven::MeasurementTypeCount *)v106, *(const CoreNavigation::CLP::LogEntry::Raven::MeasurementTypeCount **)(*(void *)(a2 + 112) + 8 * v32));
      uint64_t v38 = 0;
      switch(v108)
      {
        case 0:
        case 26:
        case 34:
          __int16 v113 = 12;
          unsigned __int8 v112 = 4;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v113, &v112, "Invalid measurement type specified: 'MeasurementTypeCount_MeasurementType_MT_Unknown'", v33, v34, v35, v36, v37, v105);
          __int16 v113 = 12;
          unsigned __int8 v112 = 4;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v113, &v112, "Invalid measurement type specified, %d", v39, v40, v41, v42, v43, 33);
          goto LABEL_74;
        case 1:
          uint64_t v38 = 1;
          goto LABEL_73;
        case 2:
          uint64_t v38 = 2;
          goto LABEL_73;
        case 3:
          uint64_t v38 = 3;
          goto LABEL_73;
        case 4:
          uint64_t v38 = 4;
          goto LABEL_73;
        case 5:
          uint64_t v38 = 6;
          goto LABEL_73;
        case 6:
          uint64_t v38 = 8;
          goto LABEL_73;
        case 7:
          uint64_t v38 = 12;
          goto LABEL_73;
        case 8:
          uint64_t v38 = 27;
          goto LABEL_73;
        case 9:
          uint64_t v38 = 14;
          goto LABEL_73;
        case 10:
          uint64_t v38 = 18;
          goto LABEL_73;
        case 11:
          uint64_t v38 = 17;
          goto LABEL_73;
        case 12:
          uint64_t v38 = 15;
          goto LABEL_73;
        case 13:
          uint64_t v38 = 19;
          goto LABEL_73;
        case 14:
          uint64_t v38 = 21;
          goto LABEL_73;
        case 15:
          uint64_t v38 = 22;
          goto LABEL_73;
        case 16:
          uint64_t v38 = 23;
          goto LABEL_73;
        case 17:
          uint64_t v38 = 24;
          goto LABEL_73;
        case 18:
          uint64_t v38 = 25;
          goto LABEL_73;
        case 19:
          uint64_t v38 = 28;
          goto LABEL_73;
        case 20:
          uint64_t v38 = 29;
          goto LABEL_73;
        case 21:
          uint64_t v38 = 10;
          goto LABEL_73;
        case 22:
          uint64_t v38 = 26;
          goto LABEL_73;
        case 23:
          uint64_t v38 = 16;
          goto LABEL_73;
        case 24:
          uint64_t v38 = 11;
          goto LABEL_73;
        case 25:
          uint64_t v38 = 13;
          goto LABEL_73;
        case 27:
          uint64_t v38 = 9;
          goto LABEL_73;
        case 29:
          uint64_t v38 = 5;
          goto LABEL_73;
        case 30:
          uint64_t v38 = 7;
          goto LABEL_73;
        case 31:
          uint64_t v38 = 32;
          goto LABEL_73;
        case 32:
          uint64_t v38 = 31;
          goto LABEL_73;
        case 33:
          uint64_t v38 = 30;
          goto LABEL_73;
        case 35:
          uint64_t v38 = 20;
          goto LABEL_73;
        default:
LABEL_73:
          *(_DWORD *)(a1 + 164 + 4 * v38) = v107;
LABEL_74:
          CoreNavigation::CLP::LogEntry::Raven::MeasurementTypeCount::~MeasurementTypeCount((CoreNavigation::CLP::LogEntry::Raven::MeasurementTypeCount *)v106);
          if (++v32 >= *(int *)(a2 + 120)) {
            break;
          }
          continue;
      }
      break;
    }
  }
  if (*(int *)(a2 + 144) >= 1)
  {
    uint64_t v44 = 0;
    while (2)
    {
      CoreNavigation::CLP::LogEntry::Raven::MeasurementTypeCount::MeasurementTypeCount((CoreNavigation::CLP::LogEntry::Raven::MeasurementTypeCount *)v106, *(const CoreNavigation::CLP::LogEntry::Raven::MeasurementTypeCount **)(*(void *)(a2 + 136) + 8 * v44));
      uint64_t v50 = 0;
      switch(v108)
      {
        case 0:
        case 26:
        case 34:
          __int16 v113 = 12;
          unsigned __int8 v112 = 4;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v113, &v112, "Invalid measurement type specified: 'MeasurementTypeCount_MeasurementType_MT_Unknown'", v45, v46, v47, v48, v49, v105);
          __int16 v113 = 12;
          unsigned __int8 v112 = 4;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v113, &v112, "Invalid measurement type specified, %d", v51, v52, v53, v54, v55, 33);
          goto LABEL_112;
        case 1:
          uint64_t v50 = 1;
          goto LABEL_111;
        case 2:
          uint64_t v50 = 2;
          goto LABEL_111;
        case 3:
          uint64_t v50 = 3;
          goto LABEL_111;
        case 4:
          uint64_t v50 = 4;
          goto LABEL_111;
        case 5:
          uint64_t v50 = 6;
          goto LABEL_111;
        case 6:
          uint64_t v50 = 8;
          goto LABEL_111;
        case 7:
          uint64_t v50 = 12;
          goto LABEL_111;
        case 8:
          uint64_t v50 = 27;
          goto LABEL_111;
        case 9:
          uint64_t v50 = 14;
          goto LABEL_111;
        case 10:
          uint64_t v50 = 18;
          goto LABEL_111;
        case 11:
          uint64_t v50 = 17;
          goto LABEL_111;
        case 12:
          uint64_t v50 = 15;
          goto LABEL_111;
        case 13:
          uint64_t v50 = 19;
          goto LABEL_111;
        case 14:
          uint64_t v50 = 21;
          goto LABEL_111;
        case 15:
          uint64_t v50 = 22;
          goto LABEL_111;
        case 16:
          uint64_t v50 = 23;
          goto LABEL_111;
        case 17:
          uint64_t v50 = 24;
          goto LABEL_111;
        case 18:
          uint64_t v50 = 25;
          goto LABEL_111;
        case 19:
          uint64_t v50 = 28;
          goto LABEL_111;
        case 20:
          uint64_t v50 = 29;
          goto LABEL_111;
        case 21:
          uint64_t v50 = 10;
          goto LABEL_111;
        case 22:
          uint64_t v50 = 26;
          goto LABEL_111;
        case 23:
          uint64_t v50 = 16;
          goto LABEL_111;
        case 24:
          uint64_t v50 = 11;
          goto LABEL_111;
        case 25:
          uint64_t v50 = 13;
          goto LABEL_111;
        case 27:
          uint64_t v50 = 9;
          goto LABEL_111;
        case 29:
          uint64_t v50 = 5;
          goto LABEL_111;
        case 30:
          uint64_t v50 = 7;
          goto LABEL_111;
        case 31:
          uint64_t v50 = 32;
          goto LABEL_111;
        case 32:
          uint64_t v50 = 31;
          goto LABEL_111;
        case 33:
          uint64_t v50 = 30;
          goto LABEL_111;
        case 35:
          uint64_t v50 = 20;
          goto LABEL_111;
        default:
LABEL_111:
          *(_DWORD *)(a1 + 296 + 4 * v50) = v107;
LABEL_112:
          CoreNavigation::CLP::LogEntry::Raven::MeasurementTypeCount::~MeasurementTypeCount((CoreNavigation::CLP::LogEntry::Raven::MeasurementTypeCount *)v106);
          if (++v44 >= *(int *)(a2 + 144)) {
            break;
          }
          continue;
      }
      break;
    }
  }
  if (*(int *)(a2 + 200) >= 1)
  {
    uint64_t v56 = 0;
    while (2)
    {
      CoreNavigation::CLP::LogEntry::Raven::MeasurementTypeCount::MeasurementTypeCount((CoreNavigation::CLP::LogEntry::Raven::MeasurementTypeCount *)v106, *(const CoreNavigation::CLP::LogEntry::Raven::MeasurementTypeCount **)(*(void *)(a2 + 192) + 8 * v56));
      uint64_t v62 = 0;
      switch(v108)
      {
        case 0:
        case 26:
        case 34:
          __int16 v113 = 12;
          unsigned __int8 v112 = 4;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v113, &v112, "Invalid measurement type specified: 'MeasurementTypeCount_MeasurementType_MT_Unknown'", v57, v58, v59, v60, v61, v105);
          __int16 v113 = 12;
          unsigned __int8 v112 = 4;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v113, &v112, "Invalid measurement type specified, %d", v63, v64, v65, v66, v67, 33);
          goto LABEL_150;
        case 1:
          uint64_t v62 = 1;
          goto LABEL_149;
        case 2:
          uint64_t v62 = 2;
          goto LABEL_149;
        case 3:
          uint64_t v62 = 3;
          goto LABEL_149;
        case 4:
          uint64_t v62 = 4;
          goto LABEL_149;
        case 5:
          uint64_t v62 = 6;
          goto LABEL_149;
        case 6:
          uint64_t v62 = 8;
          goto LABEL_149;
        case 7:
          uint64_t v62 = 12;
          goto LABEL_149;
        case 8:
          uint64_t v62 = 27;
          goto LABEL_149;
        case 9:
          uint64_t v62 = 14;
          goto LABEL_149;
        case 10:
          uint64_t v62 = 18;
          goto LABEL_149;
        case 11:
          uint64_t v62 = 17;
          goto LABEL_149;
        case 12:
          uint64_t v62 = 15;
          goto LABEL_149;
        case 13:
          uint64_t v62 = 19;
          goto LABEL_149;
        case 14:
          uint64_t v62 = 21;
          goto LABEL_149;
        case 15:
          uint64_t v62 = 22;
          goto LABEL_149;
        case 16:
          uint64_t v62 = 23;
          goto LABEL_149;
        case 17:
          uint64_t v62 = 24;
          goto LABEL_149;
        case 18:
          uint64_t v62 = 25;
          goto LABEL_149;
        case 19:
          uint64_t v62 = 28;
          goto LABEL_149;
        case 20:
          uint64_t v62 = 29;
          goto LABEL_149;
        case 21:
          uint64_t v62 = 10;
          goto LABEL_149;
        case 22:
          uint64_t v62 = 26;
          goto LABEL_149;
        case 23:
          uint64_t v62 = 16;
          goto LABEL_149;
        case 24:
          uint64_t v62 = 11;
          goto LABEL_149;
        case 25:
          uint64_t v62 = 13;
          goto LABEL_149;
        case 27:
          uint64_t v62 = 9;
          goto LABEL_149;
        case 29:
          uint64_t v62 = 5;
          goto LABEL_149;
        case 30:
          uint64_t v62 = 7;
          goto LABEL_149;
        case 31:
          uint64_t v62 = 32;
          goto LABEL_149;
        case 32:
          uint64_t v62 = 31;
          goto LABEL_149;
        case 33:
          uint64_t v62 = 30;
          goto LABEL_149;
        case 35:
          uint64_t v62 = 20;
          goto LABEL_149;
        default:
LABEL_149:
          *(_DWORD *)(a1 + 428 + 4 * v62) = v107;
LABEL_150:
          CoreNavigation::CLP::LogEntry::Raven::MeasurementTypeCount::~MeasurementTypeCount((CoreNavigation::CLP::LogEntry::Raven::MeasurementTypeCount *)v106);
          if (++v56 >= *(int *)(a2 + 200)) {
            break;
          }
          continue;
      }
      break;
    }
  }
  if (*(int *)(a2 + 224) >= 1)
  {
    uint64_t v68 = 0;
    while (2)
    {
      CoreNavigation::CLP::LogEntry::Raven::MeasurementTypeCount::MeasurementTypeCount((CoreNavigation::CLP::LogEntry::Raven::MeasurementTypeCount *)v106, *(const CoreNavigation::CLP::LogEntry::Raven::MeasurementTypeCount **)(*(void *)(a2 + 216) + 8 * v68));
      uint64_t v74 = 0;
      switch(v108)
      {
        case 0:
        case 26:
        case 34:
          __int16 v113 = 12;
          unsigned __int8 v112 = 4;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v113, &v112, "Invalid measurement type specified: 'MeasurementTypeCount_MeasurementType_MT_Unknown'", v69, v70, v71, v72, v73, v105);
          __int16 v113 = 12;
          unsigned __int8 v112 = 4;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v113, &v112, "Invalid measurement type specified, %d", v75, v76, v77, v78, v79, 33);
          goto LABEL_188;
        case 1:
          uint64_t v74 = 1;
          goto LABEL_187;
        case 2:
          uint64_t v74 = 2;
          goto LABEL_187;
        case 3:
          uint64_t v74 = 3;
          goto LABEL_187;
        case 4:
          uint64_t v74 = 4;
          goto LABEL_187;
        case 5:
          uint64_t v74 = 6;
          goto LABEL_187;
        case 6:
          uint64_t v74 = 8;
          goto LABEL_187;
        case 7:
          uint64_t v74 = 12;
          goto LABEL_187;
        case 8:
          uint64_t v74 = 27;
          goto LABEL_187;
        case 9:
          uint64_t v74 = 14;
          goto LABEL_187;
        case 10:
          uint64_t v74 = 18;
          goto LABEL_187;
        case 11:
          uint64_t v74 = 17;
          goto LABEL_187;
        case 12:
          uint64_t v74 = 15;
          goto LABEL_187;
        case 13:
          uint64_t v74 = 19;
          goto LABEL_187;
        case 14:
          uint64_t v74 = 21;
          goto LABEL_187;
        case 15:
          uint64_t v74 = 22;
          goto LABEL_187;
        case 16:
          uint64_t v74 = 23;
          goto LABEL_187;
        case 17:
          uint64_t v74 = 24;
          goto LABEL_187;
        case 18:
          uint64_t v74 = 25;
          goto LABEL_187;
        case 19:
          uint64_t v74 = 28;
          goto LABEL_187;
        case 20:
          uint64_t v74 = 29;
          goto LABEL_187;
        case 21:
          uint64_t v74 = 10;
          goto LABEL_187;
        case 22:
          uint64_t v74 = 26;
          goto LABEL_187;
        case 23:
          uint64_t v74 = 16;
          goto LABEL_187;
        case 24:
          uint64_t v74 = 11;
          goto LABEL_187;
        case 25:
          uint64_t v74 = 13;
          goto LABEL_187;
        case 27:
          uint64_t v74 = 9;
          goto LABEL_187;
        case 29:
          uint64_t v74 = 5;
          goto LABEL_187;
        case 30:
          uint64_t v74 = 7;
          goto LABEL_187;
        case 31:
          uint64_t v74 = 32;
          goto LABEL_187;
        case 32:
          uint64_t v74 = 31;
          goto LABEL_187;
        case 33:
          uint64_t v74 = 30;
          goto LABEL_187;
        case 35:
          uint64_t v74 = 20;
          goto LABEL_187;
        default:
LABEL_187:
          *(_DWORD *)(a1 + 560 + 4 * v74) = v107;
LABEL_188:
          CoreNavigation::CLP::LogEntry::Raven::MeasurementTypeCount::~MeasurementTypeCount((CoreNavigation::CLP::LogEntry::Raven::MeasurementTypeCount *)v106);
          if (++v68 >= *(int *)(a2 + 224)) {
            break;
          }
          continue;
      }
      break;
    }
  }
  if (*(int *)(a2 + 248) >= 1)
  {
    uint64_t v80 = 0;
    while (2)
    {
      CoreNavigation::CLP::LogEntry::Raven::MeasurementTypeCount::MeasurementTypeCount((CoreNavigation::CLP::LogEntry::Raven::MeasurementTypeCount *)v106, *(const CoreNavigation::CLP::LogEntry::Raven::MeasurementTypeCount **)(*(void *)(a2 + 240) + 8 * v80));
      uint64_t v86 = 0;
      switch(v108)
      {
        case 0:
        case 26:
        case 34:
          __int16 v113 = 12;
          unsigned __int8 v112 = 4;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v113, &v112, "Invalid measurement type specified: 'MeasurementTypeCount_MeasurementType_MT_Unknown'", v81, v82, v83, v84, v85, v105);
          __int16 v113 = 12;
          unsigned __int8 v112 = 4;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v113, &v112, "Invalid measurement type specified, %d", v87, v88, v89, v90, v91, 33);
          goto LABEL_226;
        case 1:
          uint64_t v86 = 1;
          goto LABEL_225;
        case 2:
          uint64_t v86 = 2;
          goto LABEL_225;
        case 3:
          uint64_t v86 = 3;
          goto LABEL_225;
        case 4:
          uint64_t v86 = 4;
          goto LABEL_225;
        case 5:
          uint64_t v86 = 6;
          goto LABEL_225;
        case 6:
          uint64_t v86 = 8;
          goto LABEL_225;
        case 7:
          uint64_t v86 = 12;
          goto LABEL_225;
        case 8:
          uint64_t v86 = 27;
          goto LABEL_225;
        case 9:
          uint64_t v86 = 14;
          goto LABEL_225;
        case 10:
          uint64_t v86 = 18;
          goto LABEL_225;
        case 11:
          uint64_t v86 = 17;
          goto LABEL_225;
        case 12:
          uint64_t v86 = 15;
          goto LABEL_225;
        case 13:
          uint64_t v86 = 19;
          goto LABEL_225;
        case 14:
          uint64_t v86 = 21;
          goto LABEL_225;
        case 15:
          uint64_t v86 = 22;
          goto LABEL_225;
        case 16:
          uint64_t v86 = 23;
          goto LABEL_225;
        case 17:
          uint64_t v86 = 24;
          goto LABEL_225;
        case 18:
          uint64_t v86 = 25;
          goto LABEL_225;
        case 19:
          uint64_t v86 = 28;
          goto LABEL_225;
        case 20:
          uint64_t v86 = 29;
          goto LABEL_225;
        case 21:
          uint64_t v86 = 10;
          goto LABEL_225;
        case 22:
          uint64_t v86 = 26;
          goto LABEL_225;
        case 23:
          uint64_t v86 = 16;
          goto LABEL_225;
        case 24:
          uint64_t v86 = 11;
          goto LABEL_225;
        case 25:
          uint64_t v86 = 13;
          goto LABEL_225;
        case 27:
          uint64_t v86 = 9;
          goto LABEL_225;
        case 29:
          uint64_t v86 = 5;
          goto LABEL_225;
        case 30:
          uint64_t v86 = 7;
          goto LABEL_225;
        case 31:
          uint64_t v86 = 32;
          goto LABEL_225;
        case 32:
          uint64_t v86 = 31;
          goto LABEL_225;
        case 33:
          uint64_t v86 = 30;
          goto LABEL_225;
        case 35:
          uint64_t v86 = 20;
          goto LABEL_225;
        default:
LABEL_225:
          *(_DWORD *)(a1 + 692 + 4 * v86) = v107;
LABEL_226:
          CoreNavigation::CLP::LogEntry::Raven::MeasurementTypeCount::~MeasurementTypeCount((CoreNavigation::CLP::LogEntry::Raven::MeasurementTypeCount *)v106);
          if (++v80 >= *(int *)(a2 + 248)) {
            break;
          }
          continue;
      }
      break;
    }
  }
  if (*(int *)(a2 + 272) >= 1)
  {
    uint64_t v92 = 0;
    uint64_t v93 = a1 + 824;
    while (2)
    {
      CoreNavigation::CLP::LogEntry::Raven::MeasurementTypeCount::MeasurementTypeCount((CoreNavigation::CLP::LogEntry::Raven::MeasurementTypeCount *)v106, *(const CoreNavigation::CLP::LogEntry::Raven::MeasurementTypeCount **)(*(void *)(a2 + 264) + 8 * v92));
      uint64_t v99 = 0;
      switch(v108)
      {
        case 0:
        case 26:
        case 34:
          __int16 v113 = 12;
          unsigned __int8 v112 = 4;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v113, &v112, "Invalid measurement type specified: 'MeasurementTypeCount_MeasurementType_MT_Unknown'", v94, v95, v96, v97, v98, v105);
          __int16 v113 = 12;
          unsigned __int8 v112 = 4;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v113, &v112, "Invalid measurement type specified, %d", v100, v101, v102, v103, v104, 33);
          goto LABEL_264;
        case 1:
          uint64_t v99 = 1;
          goto LABEL_263;
        case 2:
          uint64_t v99 = 2;
          goto LABEL_263;
        case 3:
          uint64_t v99 = 3;
          goto LABEL_263;
        case 4:
          uint64_t v99 = 4;
          goto LABEL_263;
        case 5:
          uint64_t v99 = 6;
          goto LABEL_263;
        case 6:
          uint64_t v99 = 8;
          goto LABEL_263;
        case 7:
          uint64_t v99 = 12;
          goto LABEL_263;
        case 8:
          uint64_t v99 = 27;
          goto LABEL_263;
        case 9:
          uint64_t v99 = 14;
          goto LABEL_263;
        case 10:
          uint64_t v99 = 18;
          goto LABEL_263;
        case 11:
          uint64_t v99 = 17;
          goto LABEL_263;
        case 12:
          uint64_t v99 = 15;
          goto LABEL_263;
        case 13:
          uint64_t v99 = 19;
          goto LABEL_263;
        case 14:
          uint64_t v99 = 21;
          goto LABEL_263;
        case 15:
          uint64_t v99 = 22;
          goto LABEL_263;
        case 16:
          uint64_t v99 = 23;
          goto LABEL_263;
        case 17:
          uint64_t v99 = 24;
          goto LABEL_263;
        case 18:
          uint64_t v99 = 25;
          goto LABEL_263;
        case 19:
          uint64_t v99 = 28;
          goto LABEL_263;
        case 20:
          uint64_t v99 = 29;
          goto LABEL_263;
        case 21:
          uint64_t v99 = 10;
          goto LABEL_263;
        case 22:
          uint64_t v99 = 26;
          goto LABEL_263;
        case 23:
          uint64_t v99 = 16;
          goto LABEL_263;
        case 24:
          uint64_t v99 = 11;
          goto LABEL_263;
        case 25:
          uint64_t v99 = 13;
          goto LABEL_263;
        case 27:
          uint64_t v99 = 9;
          goto LABEL_263;
        case 29:
          uint64_t v99 = 5;
          goto LABEL_263;
        case 30:
          uint64_t v99 = 7;
          goto LABEL_263;
        case 31:
          uint64_t v99 = 32;
          goto LABEL_263;
        case 32:
          uint64_t v99 = 31;
          goto LABEL_263;
        case 33:
          uint64_t v99 = 30;
          goto LABEL_263;
        case 35:
          uint64_t v99 = 20;
          goto LABEL_263;
        default:
LABEL_263:
          *(_DWORD *)(v93 + 4 * v99) = v107;
LABEL_264:
          CoreNavigation::CLP::LogEntry::Raven::MeasurementTypeCount::~MeasurementTypeCount((CoreNavigation::CLP::LogEntry::Raven::MeasurementTypeCount *)v106);
          if (++v92 >= *(int *)(a2 + 272)) {
            break;
          }
          continue;
      }
      break;
    }
  }
  CoreNavigation::CLP::LogEntry::PrivateData::TimeStamp::~TimeStamp((CoreNavigation::CLP::LogEntry::PrivateData::TimeStamp *)&v109);
}

void sub_18E0F43A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  CoreNavigation::CLP::LogEntry::PrivateData::TimeStamp::~TimeStamp((CoreNavigation::CLP::LogEntry::PrivateData::TimeStamp *)va);
  _Unwind_Resume(a1);
}

void raven::ConvertProtobufToRavenSolution(uint64_t a1, uint64_t a2, double a3, int8x16_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v37 = &unk_1EDD0F200;
  int8x16_t v12 = 0uLL;
  long long v38 = 0u;
  long long v39 = 0u;
  if (*(unsigned char *)(a2 + 92))
  {
    uint64_t v13 = *(void *)(a2 + 8);
    if (!v13)
    {
      CoreNavigation::CLP::LogEntry::Raven::protobuf_AddDesc_CoreNavigationCLPRavenOutput_2eproto((CoreNavigation::CLP::LogEntry::Raven *)a1);
      uint64_t v13 = *(void *)(CoreNavigation::CLP::LogEntry::Raven::EstimatorState::default_instance_ + 8);
    }
    if ((*(unsigned char *)(v13 + 52) & 2) != 0)
    {
      uint64_t v14 = *(void *)(a2 + 8);
      if (!v14)
      {
        CoreNavigation::CLP::LogEntry::Raven::protobuf_AddDesc_CoreNavigationCLPRavenOutput_2eproto((CoreNavigation::CLP::LogEntry::Raven *)a1);
        uint64_t v14 = *(void *)(CoreNavigation::CLP::LogEntry::Raven::EstimatorState::default_instance_ + 8);
      }
      uint64_t v15 = *(void *)(v14 + 16);
      if (!v15)
      {
        CoreNavigation::CLP::LogEntry::Raven::protobuf_AddDesc_CoreNavigationCLPRavenOutput_2eproto((CoreNavigation::CLP::LogEntry::Raven *)a1);
        uint64_t v15 = *(void *)(CoreNavigation::CLP::LogEntry::Raven::TimeStamp::default_instance_ + 16);
      }
      uint64_t v16 = *(void *)(v15 + 8);
      uint64_t v17 = *(void *)(a2 + 8);
      if (!v17)
      {
        CoreNavigation::CLP::LogEntry::Raven::protobuf_AddDesc_CoreNavigationCLPRavenOutput_2eproto((CoreNavigation::CLP::LogEntry::Raven *)a1);
        uint64_t v17 = *(void *)(CoreNavigation::CLP::LogEntry::Raven::EstimatorState::default_instance_ + 8);
      }
      uint64_t v18 = *(void *)(v17 + 16);
      if (!v18)
      {
        CoreNavigation::CLP::LogEntry::Raven::protobuf_AddDesc_CoreNavigationCLPRavenOutput_2eproto((CoreNavigation::CLP::LogEntry::Raven *)a1);
        uint64_t v18 = *(void *)(CoreNavigation::CLP::LogEntry::Raven::TimeStamp::default_instance_ + 16);
      }
      a4.i64[0] = *(void *)(v18 + 16);
      *(double *)v12.i64 = *(double *)a4.i64 + (double)v16;
      HIDWORD(v39) |= 1u;
      *(double *)&long long v38 = *(double *)v12.i64;
    }
  }
  if (*(unsigned char *)(a2 + 92))
  {
    uint64_t v19 = *(void *)(a2 + 8);
    if (!v19)
    {
      CoreNavigation::CLP::LogEntry::Raven::protobuf_AddDesc_CoreNavigationCLPRavenOutput_2eproto((CoreNavigation::CLP::LogEntry::Raven *)a1);
      uint64_t v19 = *(void *)(CoreNavigation::CLP::LogEntry::Raven::EstimatorState::default_instance_ + 8);
    }
    if (*(unsigned char *)(v19 + 52))
    {
      uint64_t v20 = *(void *)(a2 + 8);
      if (!v20)
      {
        CoreNavigation::CLP::LogEntry::Raven::protobuf_AddDesc_CoreNavigationCLPRavenOutput_2eproto((CoreNavigation::CLP::LogEntry::Raven *)a1);
        uint64_t v20 = *(void *)(CoreNavigation::CLP::LogEntry::Raven::EstimatorState::default_instance_ + 8);
      }
      uint64_t v21 = *(void *)(v20 + 8);
      if (!v21)
      {
        CoreNavigation::CLP::LogEntry::Raven::protobuf_AddDesc_CoreNavigationCLPRavenOutput_2eproto((CoreNavigation::CLP::LogEntry::Raven *)a1);
        uint64_t v21 = *(void *)(CoreNavigation::CLP::LogEntry::Raven::TimeStamp::default_instance_ + 8);
      }
      uint64_t v22 = *(void *)(v21 + 8);
      uint64_t v23 = *(void *)(a2 + 8);
      if (!v23)
      {
        CoreNavigation::CLP::LogEntry::Raven::protobuf_AddDesc_CoreNavigationCLPRavenOutput_2eproto((CoreNavigation::CLP::LogEntry::Raven *)a1);
        uint64_t v23 = *(void *)(CoreNavigation::CLP::LogEntry::Raven::EstimatorState::default_instance_ + 8);
      }
      uint64_t v24 = *(void *)(v23 + 8);
      if (!v24)
      {
        CoreNavigation::CLP::LogEntry::Raven::protobuf_AddDesc_CoreNavigationCLPRavenOutput_2eproto((CoreNavigation::CLP::LogEntry::Raven *)a1);
        uint64_t v24 = *(void *)(CoreNavigation::CLP::LogEntry::Raven::TimeStamp::default_instance_ + 8);
      }
      a4.i64[0] = *(void *)(v24 + 16);
      *(double *)v12.i64 = *(double *)a4.i64 + (double)v22;
      HIDWORD(v39) |= 4u;
      *(double *)&long long v39 = *(double *)v12.i64;
    }
  }
  int8x16_t v25 = (CoreNavigation::CLP::LogEntry::Raven *)raven::ConvertProtobufToRavenTime((uint64_t)&v37, a1, 1, a6, a7, a8, a9, a10, v12, a4);
  int v26 = *(_DWORD *)(a2 + 92);
  if ((v26 & 2) != 0)
  {
    uint64_t v27 = *(void *)(a2 + 16);
    if (!v27)
    {
      CoreNavigation::CLP::LogEntry::Raven::protobuf_AddDesc_CoreNavigationCLPRavenOutput_2eproto(v25);
      uint64_t v27 = *(void *)(CoreNavigation::CLP::LogEntry::Raven::EstimatorState::default_instance_ + 16);
      int v26 = *(_DWORD *)(a2 + 92);
    }
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(v27 + 16);
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(v27 + 32);
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(v27 + 48);
    *(_OWORD *)(a1 + 152) = *(_OWORD *)(v27 + 64);
    *(void *)(a1 + 168) = *(void *)(v27 + 80);
    *(unsigned char *)(a1 + 96) = 1;
  }
  if ((v26 & 4) != 0)
  {
    uint64_t v28 = *(void *)(a2 + 24);
    if (!v28)
    {
      CoreNavigation::CLP::LogEntry::Raven::protobuf_AddDesc_CoreNavigationCLPRavenOutput_2eproto(v25);
      uint64_t v28 = *(void *)(CoreNavigation::CLP::LogEntry::Raven::EstimatorState::default_instance_ + 24);
      int v26 = *(_DWORD *)(a2 + 92);
    }
    *(void *)(a1 + 216) = *(void *)(v28 + 48);
    *(_WORD *)(a1 + 176) = 257;
    *(_OWORD *)(a1 + 184) = *(_OWORD *)(v28 + 16);
    *(_OWORD *)(a1 + 200) = *(_OWORD *)(v28 + 32);
    *(_OWORD *)(a1 + 248) = *(_OWORD *)(v28 + 80);
    *(_OWORD *)(a1 + 264) = *(_OWORD *)(v28 + 96);
    *(_OWORD *)(a1 + 280) = *(_OWORD *)(v28 + 112);
    *(_OWORD *)(a1 + 224) = *(_OWORD *)(v28 + 56);
    *(void *)(a1 + 240) = *(void *)(v28 + 72);
  }
  if ((v26 & 8) != 0)
  {
    uint64_t v29 = *(void *)(a2 + 32);
    if (!v29)
    {
      CoreNavigation::CLP::LogEntry::Raven::protobuf_AddDesc_CoreNavigationCLPRavenOutput_2eproto(v25);
      uint64_t v29 = *(void *)(CoreNavigation::CLP::LogEntry::Raven::EstimatorState::default_instance_ + 32);
      int v26 = *(_DWORD *)(a2 + 92);
    }
    *(_OWORD *)(a1 + 304) = *(_OWORD *)(v29 + 16);
    *(_OWORD *)(a1 + 320) = *(_OWORD *)(v29 + 32);
    *(_OWORD *)(a1 + 336) = *(_OWORD *)(v29 + 48);
    *(_OWORD *)(a1 + 352) = *(_OWORD *)(v29 + 64);
    *(void *)(a1 + 368) = *(void *)(v29 + 80);
    *(unsigned char *)(a1 + 296) = 1;
  }
  if ((v26 & 0x10) != 0)
  {
    uint64_t v30 = *(void *)(a2 + 40);
    if (!v30)
    {
      CoreNavigation::CLP::LogEntry::Raven::protobuf_AddDesc_CoreNavigationCLPRavenOutput_2eproto(v25);
      uint64_t v30 = *(void *)(CoreNavigation::CLP::LogEntry::Raven::EstimatorState::default_instance_ + 40);
      int v26 = *(_DWORD *)(a2 + 92);
    }
    *(_OWORD *)(a1 + 384) = *(_OWORD *)(v30 + 16);
    *(_OWORD *)(a1 + 400) = *(_OWORD *)(v30 + 32);
    *(_OWORD *)(a1 + 416) = *(_OWORD *)(v30 + 48);
    *(_OWORD *)(a1 + 432) = *(_OWORD *)(v30 + 64);
    *(void *)(a1 + 448) = *(void *)(v30 + 80);
    *(unsigned char *)(a1 + 376) = 1;
  }
  if ((v26 & 0x20) != 0)
  {
    uint64_t v31 = *(void *)(a2 + 48);
    if (!v31)
    {
      CoreNavigation::CLP::LogEntry::Raven::protobuf_AddDesc_CoreNavigationCLPRavenOutput_2eproto(v25);
      uint64_t v31 = *(void *)(CoreNavigation::CLP::LogEntry::Raven::EstimatorState::default_instance_ + 48);
      int v26 = *(_DWORD *)(a2 + 92);
    }
    *(_OWORD *)(a1 + 464) = *(_OWORD *)(v31 + 16);
    *(_OWORD *)(a1 + 480) = *(_OWORD *)(v31 + 32);
    *(_OWORD *)(a1 + 496) = *(_OWORD *)(v31 + 48);
    *(_OWORD *)(a1 + 512) = *(_OWORD *)(v31 + 64);
    *(_OWORD *)(a1 + 528) = *(_OWORD *)(v31 + 80);
    uint64_t v32 = *(void *)(v31 + 120);
    *(void *)(a1 + 544) = v32;
    *(_OWORD *)(a1 + 552) = *(_OWORD *)(v31 + 104);
    *(void *)(a1 + 568) = v32;
    *(unsigned char *)(a1 + 456) = 1;
  }
  if ((v26 & 0x40) != 0)
  {
    uint64_t v33 = *(void *)(a2 + 56);
    if (!v33)
    {
      CoreNavigation::CLP::LogEntry::Raven::protobuf_AddDesc_CoreNavigationCLPRavenOutput_2eproto(v25);
      uint64_t v33 = *(void *)(CoreNavigation::CLP::LogEntry::Raven::EstimatorState::default_instance_ + 56);
      int v26 = *(_DWORD *)(a2 + 92);
    }
    *(_OWORD *)(a1 + 584) = *(_OWORD *)(v33 + 16);
    *(_OWORD *)(a1 + 600) = *(_OWORD *)(v33 + 32);
    *(_OWORD *)(a1 + 616) = *(_OWORD *)(v33 + 48);
    *(_OWORD *)(a1 + 632) = *(_OWORD *)(v33 + 64);
    *(void *)(a1 + 648) = *(void *)(v33 + 80);
    *(unsigned char *)(a1 + 576) = 1;
  }
  if ((v26 & 0x80) != 0)
  {
    uint64_t v34 = *(void *)(a2 + 64);
    if (!v34)
    {
      CoreNavigation::CLP::LogEntry::Raven::protobuf_AddDesc_CoreNavigationCLPRavenOutput_2eproto(v25);
      uint64_t v34 = *(void *)(CoreNavigation::CLP::LogEntry::Raven::EstimatorState::default_instance_ + 64);
      int v26 = *(_DWORD *)(a2 + 92);
    }
    *(_OWORD *)(a1 + 664) = *(_OWORD *)(v34 + 16);
    *(_OWORD *)(a1 + 680) = *(_OWORD *)(v34 + 32);
    *(_OWORD *)(a1 + 696) = *(_OWORD *)(v34 + 48);
    *(_OWORD *)(a1 + 712) = *(_OWORD *)(v34 + 64);
    *(void *)(a1 + 728) = *(void *)(v34 + 80);
    *(unsigned char *)(a1 + 656) = 1;
  }
  if ((v26 & 0x100) != 0)
  {
    uint64_t v35 = *(void *)(a2 + 72);
    if (!v35)
    {
      CoreNavigation::CLP::LogEntry::Raven::protobuf_AddDesc_CoreNavigationCLPRavenOutput_2eproto(v25);
      uint64_t v35 = *(void *)(CoreNavigation::CLP::LogEntry::Raven::EstimatorState::default_instance_ + 72);
      int v26 = *(_DWORD *)(a2 + 92);
    }
    *(_OWORD *)(a1 + 744) = *(_OWORD *)(v35 + 16);
    *(_OWORD *)(a1 + 760) = *(_OWORD *)(v35 + 32);
    *(_OWORD *)(a1 + 776) = *(_OWORD *)(v35 + 48);
    *(_OWORD *)(a1 + 792) = *(_OWORD *)(v35 + 64);
    *(void *)(a1 + 808) = *(void *)(v35 + 80);
    *(unsigned char *)(a1 + 736) = 1;
  }
  if ((v26 & 0x200) != 0)
  {
    uint64_t v36 = *(void *)(a2 + 80);
    if (!v36)
    {
      CoreNavigation::CLP::LogEntry::Raven::protobuf_AddDesc_CoreNavigationCLPRavenOutput_2eproto(v25);
      uint64_t v36 = *(void *)(CoreNavigation::CLP::LogEntry::Raven::EstimatorState::default_instance_ + 80);
    }
    *(_OWORD *)(a1 + 824) = *(_OWORD *)(v36 + 16);
    *(_OWORD *)(a1 + 840) = *(_OWORD *)(v36 + 32);
    *(void *)(a1 + 856) = *(void *)(v36 + 48);
    *(unsigned char *)(a1 + 816) = 1;
  }
  CoreNavigation::CLP::LogEntry::PrivateData::TimeStamp::~TimeStamp((CoreNavigation::CLP::LogEntry::PrivateData::TimeStamp *)&v37);
}

void sub_18E0F4C58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  CoreNavigation::CLP::LogEntry::PrivateData::TimeStamp::~TimeStamp((CoreNavigation::CLP::LogEntry::PrivateData::TimeStamp *)va);
  _Unwind_Resume(a1);
}

void raven::ConvertProtobufToRavenActivity(uint64_t a1, uint64_t a2, double a3, int8x16_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v35 = &unk_1EDD0F200;
  int8x16_t v12 = 0uLL;
  long long v36 = 0u;
  long long v37 = 0u;
  if (*(unsigned char *)(a2 + 228))
  {
    uint64_t v13 = *(void *)(a2 + 8);
    if (!v13)
    {
      CoreNavigation::CLP::LogEntry::Raven::protobuf_AddDesc_CoreNavigationCLPRavenOutput_2eproto((CoreNavigation::CLP::LogEntry::Raven *)a1);
      uint64_t v13 = *(void *)(CoreNavigation::CLP::LogEntry::Raven::EstimatorActivity::default_instance_ + 8);
    }
    if ((*(unsigned char *)(v13 + 52) & 2) != 0)
    {
      uint64_t v14 = *(void *)(a2 + 8);
      if (!v14)
      {
        CoreNavigation::CLP::LogEntry::Raven::protobuf_AddDesc_CoreNavigationCLPRavenOutput_2eproto((CoreNavigation::CLP::LogEntry::Raven *)a1);
        uint64_t v14 = *(void *)(CoreNavigation::CLP::LogEntry::Raven::EstimatorActivity::default_instance_ + 8);
      }
      uint64_t v15 = *(void *)(v14 + 16);
      if (!v15)
      {
        CoreNavigation::CLP::LogEntry::Raven::protobuf_AddDesc_CoreNavigationCLPRavenOutput_2eproto((CoreNavigation::CLP::LogEntry::Raven *)a1);
        uint64_t v15 = *(void *)(CoreNavigation::CLP::LogEntry::Raven::TimeStamp::default_instance_ + 16);
      }
      uint64_t v16 = *(void *)(v15 + 8);
      uint64_t v17 = *(void *)(a2 + 8);
      if (!v17)
      {
        CoreNavigation::CLP::LogEntry::Raven::protobuf_AddDesc_CoreNavigationCLPRavenOutput_2eproto((CoreNavigation::CLP::LogEntry::Raven *)a1);
        uint64_t v17 = *(void *)(CoreNavigation::CLP::LogEntry::Raven::EstimatorActivity::default_instance_ + 8);
      }
      uint64_t v18 = *(void *)(v17 + 16);
      if (!v18)
      {
        CoreNavigation::CLP::LogEntry::Raven::protobuf_AddDesc_CoreNavigationCLPRavenOutput_2eproto((CoreNavigation::CLP::LogEntry::Raven *)a1);
        uint64_t v18 = *(void *)(CoreNavigation::CLP::LogEntry::Raven::TimeStamp::default_instance_ + 16);
      }
      a4.i64[0] = *(void *)(v18 + 16);
      *(double *)v12.i64 = *(double *)a4.i64 + (double)v16;
      HIDWORD(v37) |= 1u;
      *(double *)&long long v36 = *(double *)v12.i64;
    }
  }
  if (*(unsigned char *)(a2 + 228))
  {
    uint64_t v19 = *(void *)(a2 + 8);
    if (!v19)
    {
      CoreNavigation::CLP::LogEntry::Raven::protobuf_AddDesc_CoreNavigationCLPRavenOutput_2eproto((CoreNavigation::CLP::LogEntry::Raven *)a1);
      uint64_t v19 = *(void *)(CoreNavigation::CLP::LogEntry::Raven::EstimatorActivity::default_instance_ + 8);
    }
    if (*(unsigned char *)(v19 + 52))
    {
      uint64_t v20 = *(void *)(a2 + 8);
      if (!v20)
      {
        CoreNavigation::CLP::LogEntry::Raven::protobuf_AddDesc_CoreNavigationCLPRavenOutput_2eproto((CoreNavigation::CLP::LogEntry::Raven *)a1);
        uint64_t v20 = *(void *)(CoreNavigation::CLP::LogEntry::Raven::EstimatorActivity::default_instance_ + 8);
      }
      uint64_t v21 = *(void *)(v20 + 8);
      if (!v21)
      {
        CoreNavigation::CLP::LogEntry::Raven::protobuf_AddDesc_CoreNavigationCLPRavenOutput_2eproto((CoreNavigation::CLP::LogEntry::Raven *)a1);
        uint64_t v21 = *(void *)(CoreNavigation::CLP::LogEntry::Raven::TimeStamp::default_instance_ + 8);
      }
      uint64_t v22 = *(void *)(v21 + 8);
      uint64_t v23 = *(void *)(a2 + 8);
      if (!v23)
      {
        CoreNavigation::CLP::LogEntry::Raven::protobuf_AddDesc_CoreNavigationCLPRavenOutput_2eproto((CoreNavigation::CLP::LogEntry::Raven *)a1);
        uint64_t v23 = *(void *)(CoreNavigation::CLP::LogEntry::Raven::EstimatorActivity::default_instance_ + 8);
      }
      uint64_t v24 = *(void *)(v23 + 8);
      if (!v24)
      {
        CoreNavigation::CLP::LogEntry::Raven::protobuf_AddDesc_CoreNavigationCLPRavenOutput_2eproto((CoreNavigation::CLP::LogEntry::Raven *)a1);
        uint64_t v24 = *(void *)(CoreNavigation::CLP::LogEntry::Raven::TimeStamp::default_instance_ + 8);
      }
      a4.i64[0] = *(void *)(v24 + 16);
      *(double *)v12.i64 = *(double *)a4.i64 + (double)v22;
      HIDWORD(v37) |= 4u;
      *(double *)&long long v37 = *(double *)v12.i64;
    }
  }
  raven::ConvertProtobufToRavenTime((uint64_t)&v35, a1, 1, a6, a7, a8, a9, a10, v12, a4);
  int v25 = *(_DWORD *)(a2 + 228);
  if ((v25 & 2) != 0)
  {
    int v26 = *(_DWORD *)(a2 + 24);
    if ((v26 - 1) >= 9) {
      LOBYTE(v26) = 0;
    }
    *(unsigned char *)(a1 + 96) = v26;
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 120);
  }
  if ((v25 & 8) != 0)
  {
    unsigned int v29 = *(_DWORD *)(a2 + 28);
    if (v29 >= 4) {
      LOBYTE(v29) = 0;
    }
    *(unsigned char *)(a1 + 288) = v29;
    *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 312) = *(_OWORD *)(a2 + 160);
    if ((v25 & 0x80) == 0)
    {
LABEL_33:
      if ((v25 & 0x40) == 0) {
        goto LABEL_34;
      }
      goto LABEL_47;
    }
  }
  else if ((v25 & 0x80) == 0)
  {
    goto LABEL_33;
  }
  unsigned int v30 = *(_DWORD *)(a2 + 52);
  if (v30 >= 4) {
    LOBYTE(v30) = 0;
  }
  *(unsigned char *)(a1 + 328) = v30;
  *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 352) = *(_OWORD *)(a2 + 192);
  if ((v25 & 0x40) == 0)
  {
LABEL_34:
    if ((v25 & 0x100) == 0) {
      goto LABEL_35;
    }
    goto LABEL_51;
  }
LABEL_47:
  int v31 = *(_DWORD *)(a2 + 48) - 1;
  if (v31 > 8) {
    char v32 = 0;
  }
  else {
    char v32 = byte_18E21583B[v31];
  }
  *(unsigned char *)(a1 + 184) = v32;
  if ((v25 & 0x100) == 0)
  {
LABEL_35:
    if ((v25 & 0x20000000) == 0) {
      goto LABEL_40;
    }
    goto LABEL_36;
  }
LABEL_51:
  int v33 = *(_DWORD *)(a2 + 136);
  if (v33 == 2) {
    char v34 = 2;
  }
  else {
    char v34 = v33 == 1;
  }
  *(unsigned char *)(a1 + 368) = v34;
  *(_OWORD *)(a1 + 376) = *(_OWORD *)(a2 + 208);
  if ((v25 & 0x20000000) != 0)
  {
LABEL_36:
    unint64_t v27 = *(unsigned int *)(a2 + 140);
    if (v27 >= 8) {
      char v28 = 0;
    }
    else {
      char v28 = 0x605040302010000uLL >> (8 * v27);
    }
    *(unsigned char *)(a1 + 392) = v28;
  }
LABEL_40:
  CoreNavigation::CLP::LogEntry::PrivateData::TimeStamp::~TimeStamp((CoreNavigation::CLP::LogEntry::PrivateData::TimeStamp *)&v35);
}

void sub_18E0F4F98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  CoreNavigation::CLP::LogEntry::PrivateData::TimeStamp::~TimeStamp((CoreNavigation::CLP::LogEntry::PrivateData::TimeStamp *)va);
  _Unwind_Resume(a1);
}

__n128 raven::ConvertReceiverDifferentialCodeBiasesEventToProtobuf(raven *this, const raven::ReceiverDifferentialCodeBiasesEvent *a2, CoreNavigation::CLP::LogEntry::Raven::RavenOutput *a3)
{
  *((_DWORD *)a2 + 15) |= 0x20u;
  uint64_t v5 = *((void *)a2 + 6);
  if (!v5) {
    operator new();
  }
  sub_18E0F5180((uint64_t)this + 280, v5);
  *((_DWORD *)a2 + 15) |= 0x10u;
  uint64_t v6 = *((void *)a2 + 5);
  if (!v6) {
    operator new();
  }
  uint64_t v7 = *(void *)(v6 + 8);
  *(_DWORD *)(v6 + 96) |= 1u;
  if (!v7) {
    operator new();
  }
  sub_18E0F6154((double *)this + 14, v7);
  __int16 v9 = *((_WORD *)this + 52);
  int8x16_t v8 = (char *)this + 104;
  int v10 = *(_DWORD *)(v6 + 96);
  *(_WORD *)(v6 + 88) = v9;
  *(_OWORD *)(v6 + 16) = *(_OWORD *)(v8 + 104);
  *(_OWORD *)(v6 + 32) = *(_OWORD *)(v8 + 120);
  *(_OWORD *)(v6 + 48) = *(_OWORD *)(v8 + 136);
  *(_DWORD *)(v6 + 96) = v10 | 0xDFE;
  __n128 result = *((__n128 *)v8 + 10);
  *(__n128 *)(v6 + 72) = result;
  return result;
}

void sub_18E0F5180(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 168) |= 1u;
  uint64_t v4 = *(void *)(a2 + 8);
  if (!v4) {
    operator new();
  }
  sub_18E0F6154((double *)a1, v4);
  uint64_t v12 = 0;
  int v13 = *(unsigned __int8 *)(a1 + 96);
  if (v13 == 1) {
    int v14 = 2;
  }
  else {
    int v14 = 1;
  }
  if (v13 == 2) {
    int v15 = 3;
  }
  else {
    int v15 = v14;
  }
  int v16 = *(_DWORD *)(a2 + 168);
  *(_DWORD *)(a2 + 56) = v15;
  *(void *)(a2 + 16) = *(void *)(a1 + 104);
  *(double *)(a2 + 24) = *(double *)(a1 + 120) + (double)*(uint64_t *)(a1 + 112);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 128);
  uint64_t v17 = *(void *)(a1 + 144);
  *(_DWORD *)(a2 + 168) = v16 | 0x7E;
  *(void *)(a2 + 48) = v17;
  do
  {
    uint64_t v18 = *(unsigned int *)(a1 + 152 + 4 * v12);
    if (v18)
    {
      int v19 = *(_DWORD *)(a2 + 76);
      uint64_t v20 = *(int *)(a2 + 72);
      if ((int)v20 >= v19)
      {
        if (v19 == *(_DWORD *)(a2 + 80))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a2 + 64));
          int v19 = *(_DWORD *)(a2 + 76);
        }
        *(_DWORD *)(a2 + 76) = v19 + 1;
        operator new();
      }
      uint64_t v21 = *(void *)(a2 + 64);
      *(_DWORD *)(a2 + 72) = v20 + 1;
      uint64_t v22 = *(void *)(v21 + 8 * v20);
      unsigned int v23 = sub_18E0F63A0(v12, v5, v6, v7, v8, v9, v10, v11);
      if (v23 >= 0x24) {
LABEL_40:
      }
        __assert_rtn("set_type", "CoreNavigationCLPRavenOutput.pb.h", 4707, "::CoreNavigation::CLP::LogEntry::Raven::MeasurementTypeCount_MeasurementType_IsValid(value)");
      int v24 = *(_DWORD *)(v22 + 40);
      *(_DWORD *)(v22 + 32) = v23;
      *(_DWORD *)(v22 + 40) = v24 | 0xC;
      *(void *)(v22 + 24) = v18;
    }
    ++v12;
  }
  while (v12 != 33);
  for (uint64_t i = 0; i != 33; ++i)
  {
    uint64_t v26 = *(unsigned int *)(a1 + 284 + 4 * i);
    if (v26)
    {
      int v27 = *(_DWORD *)(a2 + 100);
      uint64_t v28 = *(int *)(a2 + 96);
      if ((int)v28 >= v27)
      {
        if (v27 == *(_DWORD *)(a2 + 104))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a2 + 88));
          int v27 = *(_DWORD *)(a2 + 100);
        }
        *(_DWORD *)(a2 + 100) = v27 + 1;
        operator new();
      }
      uint64_t v29 = *(void *)(a2 + 88);
      *(_DWORD *)(a2 + 96) = v28 + 1;
      uint64_t v30 = *(void *)(v29 + 8 * v28);
      unsigned int v31 = sub_18E0F63A0(i, v5, v6, v7, v8, v9, v10, v11);
      if (v31 >= 0x24) {
        goto LABEL_40;
      }
      int v32 = *(_DWORD *)(v30 + 40);
      *(_DWORD *)(v30 + 32) = v31;
      *(_DWORD *)(v30 + 40) = v32 | 0xC;
      *(void *)(v30 + 24) = v26;
    }
  }
  for (uint64_t j = 0; j != 33; ++j)
  {
    uint64_t v34 = *(unsigned int *)(a1 + 416 + 4 * j);
    if (v34)
    {
      int v35 = *(_DWORD *)(a2 + 124);
      uint64_t v36 = *(int *)(a2 + 120);
      if ((int)v36 >= v35)
      {
        if (v35 == *(_DWORD *)(a2 + 128))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a2 + 112));
          int v35 = *(_DWORD *)(a2 + 124);
        }
        *(_DWORD *)(a2 + 124) = v35 + 1;
        operator new();
      }
      uint64_t v37 = *(void *)(a2 + 112);
      *(_DWORD *)(a2 + 120) = v36 + 1;
      uint64_t v38 = *(void *)(v37 + 8 * v36);
      unsigned int v39 = sub_18E0F63A0(j, v5, v6, v7, v8, v9, v10, v11);
      if (v39 >= 0x24) {
        goto LABEL_40;
      }
      int v40 = *(_DWORD *)(v38 + 40);
      *(_DWORD *)(v38 + 32) = v39;
      *(_DWORD *)(v38 + 40) = v40 | 0xC;
      *(void *)(v38 + 24) = v34;
    }
  }
}

__n128 raven::ConvertThinShellIonosphereParametersEventToProtobuf(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)(a2 + 60) |= 0x20u;
  uint64_t v6 = *(void *)(a2 + 48);
  if (!v6) {
    operator new();
  }
  sub_18E0F5180(a1 + 280, v6);
  *(_DWORD *)(a2 + 60) |= 8u;
  uint64_t v8 = *(void *)(a2 + 32);
  if (!v8) {
    operator new();
  }
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  char v24 = 0;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  uint64_t v32 = 0x7FF8000000000000;
  char v29 = 0;
  int8x16_t v9 = *(int8x16_t *)(a1 + 152);
  int8x16_t v28 = v9;
  char v27 = 1;
  if (*(unsigned char *)(a3 + 48))
  {
    v20[0] = CNTimeSpan::operator-((uint64_t)&v28, (void *)(a3 + 56), v9, v7);
    v20[1] = v10;
    char v21 = 1;
    if (*(unsigned char *)(a3 + 24))
    {
      uint64_t v25 = CNTimeSpan::operator+(a3 + 32, v20, v11, v12);
      uint64_t v26 = v13;
      char v24 = 1;
    }
    uint64_t v22 = CNTimeSpan::operator+(a3 + 8, v20, v11, v12);
    uint64_t v23 = v14;
  }
  *(_DWORD *)(v8 + 160) |= 1u;
  uint64_t v15 = *(void *)(v8 + 8);
  if (!v15) {
    operator new();
  }
  sub_18E0F6154((double *)&v22, v15);
  int v16 = *(_DWORD *)(v8 + 160);
  __int16 v18 = *(_WORD *)(a1 + 104);
  uint64_t v17 = a1 + 104;
  *(_OWORD *)(v8 + 16) = *(_OWORD *)(v17 + 24);
  *(void *)(v8 + 32) = *(void *)(v17 + 40);
  *(_WORD *)(v8 + 152) = v18;
  *(_OWORD *)(v8 + 40) = *(_OWORD *)(v17 + 64);
  *(_OWORD *)(v8 + 56) = *(_OWORD *)(v17 + 80);
  *(_OWORD *)(v8 + 72) = *(_OWORD *)(v17 + 96);
  *(_OWORD *)(v8 + 88) = *(_OWORD *)(v17 + 112);
  *(_OWORD *)(v8 + 104) = *(_OWORD *)(v17 + 128);
  *(_OWORD *)(v8 + 120) = *(_OWORD *)(v17 + 144);
  *(_DWORD *)(v8 + 160) = v16 | 0xFFFFE;
  __n128 result = *(__n128 *)(v17 + 160);
  *(__n128 *)(v8 + 136) = result;
  return result;
}

void raven::ConvertRavenSolutionEventToSerializedProtobufLogEntry(uint64_t a1)
{
  CoreNavigation::CLP::LogEntry::LogEntry::LogEntry((CoreNavigation::CLP::LogEntry::LogEntry *)v9);
  v12 |= 1u;
  uint64_t v3 = v10;
  if (!v10) {
    operator new();
  }
  int v4 = *(_DWORD *)(v10 + 44);
  *(double *)(v10 + 8) = *(double *)(a1 + 40) + (double)*(uint64_t *)(a1 + 32);
  double v5 = *(double *)(a1 + 16) + (double)*(uint64_t *)(a1 + 8);
  *(_DWORD *)(v3 + 44) = v4 | 5;
  *(double *)(v3 + 24) = v5;
  v12 |= 2u;
  uint64_t v6 = v11;
  if (!v11) {
    operator new();
  }
  *(_DWORD *)(v11 + 320) |= 2u;
  uint64_t v7 = *(void *)(v6 + 272);
  if (!v7) {
    operator new();
  }
  uint64_t v8 = *(const raven::RavenSolutionEvent **)(v7 + 8);
  *(_DWORD *)(v7 + 28) |= 1u;
  if (!v8) {
    operator new();
  }
  raven::ConvertRavenSolutionEventToProtobuf((raven *)a1, v8, v2);
  wireless_diagnostics::google::protobuf::MessageLite::SerializeToString();
  CoreNavigation::CLP::LogEntry::LogEntry::~LogEntry((CoreNavigation::CLP::LogEntry::LogEntry *)v9);
}

void sub_18E0F5A34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  CoreNavigation::CLP::LogEntry::LogEntry::~LogEntry((CoreNavigation::CLP::LogEntry::LogEntry *)va);
  _Unwind_Resume(a1);
}

uint64_t raven::ConvertRavenActivityStateEnumToProtobuf(unsigned char *a1)
{
  if (*a1 - 1 < 9) {
    return (*a1 - 1) + 1;
  }
  else {
    return 0;
  }
}

uint64_t raven::ConvertRavenFitnessSessionEnumToProtobuf(unsigned __int8 *a1)
{
  unsigned int v1 = *a1 - 1;
  if (v1 > 8) {
    return 0;
  }
  else {
    return dword_18E215844[(char)v1];
  }
}

uint64_t raven::ConvertRavenMountStateEnumToProtobuf(unsigned char *a1)
{
  if (*a1 - 1 < 3) {
    return (*a1 - 1) + 1;
  }
  else {
    return 0;
  }
}

uint64_t raven::ConvertRavenPositionContextStateEnumToProtobuf(unsigned __int8 *a1)
{
  int v1 = *a1;
  if (v1 == 2) {
    return 2;
  }
  else {
    return v1 == 1;
  }
}

uint64_t raven::ConvertRavenMovingStateEnumToProtobuf(unsigned char *a1)
{
  if (*a1 - 1 < 3) {
    return (*a1 - 1) + 1;
  }
  else {
    return 0;
  }
}

uint64_t raven::ConvertRavenEstimatorTypeToProtobuf(unsigned char *a1)
{
  if (*a1 - 1 >= 5) {
    return 1;
  }
  else {
    return (*a1 - 1) + 2;
  }
}

uint64_t raven::ConvertRavenHealthToProtobuf(unsigned __int8 *a1)
{
  int v1 = *a1;
  if (v1 == 1) {
    unsigned int v2 = 2;
  }
  else {
    unsigned int v2 = 1;
  }
  if (v1 == 2) {
    return 3;
  }
  else {
    return v2;
  }
}

uint64_t raven::ConvertRavenIonosphereEstimatorHealthToProtobuf(unsigned __int8 *a1)
{
  int v1 = *a1;
  if (v1 == 1) {
    unsigned int v2 = 2;
  }
  else {
    unsigned int v2 = 1;
  }
  if (v1 == 2) {
    return 3;
  }
  else {
    return v2;
  }
}

uint64_t raven::ConvertRavenSignalEnvironmentEnumToProtobuf(unsigned char *a1)
{
  if (*a1 - 1 >= 6) {
    return 1;
  }
  else {
    return (*a1 - 1) + 2;
  }
}

uint64_t *sub_18E0F5B4C(uint64_t *result, void *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  uint64_t v4 = a2[1];
  if (v3 == *result)
  {
    uint64_t v5 = a2[1];
  }
  else
  {
    do
    {
      uint64_t v5 = v4 - 40;
      *(_OWORD *)(v4 - 40) = *(_OWORD *)(v3 - 40);
      *(void *)(v4 - 16) = 0;
      *(void *)(v4 - 8) = 0;
      *(void *)(v4 - 24) = 0;
      *(_OWORD *)(v4 - 24) = *(_OWORD *)(v3 - 24);
      *(void *)(v4 - 8) = *(void *)(v3 - 8);
      *(void *)(v3 - 24) = 0;
      *(void *)(v3 - 16) = 0;
      *(void *)(v3 - 8) = 0;
      v4 -= 40;
      v3 -= 40;
    }
    while (v3 != v2);
  }
  a2[1] = v5;
  uint64_t v6 = *result;
  *__n128 result = v5;
  a2[1] = v6;
  uint64_t v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_18E0F5BE0(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 40;
    uint64_t v5 = (void **)(i - 24);
    sub_18E0DDE40(&v5);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_18E0F5C44(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != v3)
  {
    uint64_t v4 = *(void **)(v2 - 80);
    *(void *)(a1 + 16) = v2 - 80;
    if (v4)
    {
      *(void *)(v2 - 72) = v4;
      operator delete(v4);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 80;
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_18E0F5CA8(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 224);
  if (v2)
  {
    *(void *)(a1 + 232) = v2;
    operator delete(v2);
  }
  if (*(unsigned char *)(a1 + 48))
  {
    uint64_t v3 = *(void **)(a1 + 24);
    if (v3)
    {
      *(void *)(a1 + 32) = v3;
      operator delete(v3);
    }
  }
  return a1;
}

uint64_t sub_18E0F5CF4(uint64_t result, unsigned char *a2)
{
  int v2 = *(_DWORD *)(result + 24);
  if ((v2 & 0x200) != 0)
  {
    a2[4] = *(unsigned char *)(result + 17);
    if ((v2 & 0x10) == 0)
    {
LABEL_3:
      if ((v2 & 0x100) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((v2 & 0x10) == 0)
  {
    goto LABEL_3;
  }
  a2[1] = *(unsigned char *)(result + 12);
  if ((v2 & 0x100) == 0)
  {
LABEL_4:
    if ((v2 & 0x40) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
LABEL_9:
  a2[3] = *(unsigned char *)(result + 16);
  if ((v2 & 0x40) == 0)
  {
LABEL_5:
    if ((v2 & 2) == 0) {
      return result;
    }
LABEL_11:
    *a2 = *(unsigned char *)(result + 9);
    return result;
  }
LABEL_10:
  a2[2] = *(unsigned char *)(result + 14);
  if ((v2 & 2) != 0) {
    goto LABEL_11;
  }
  return result;
}

uint64_t sub_18E0F5D4C(uint64_t result, unsigned char *a2)
{
  int v2 = *(_DWORD *)(result + 16);
  if ((v2 & 2) != 0)
  {
    a2[1] = *(unsigned char *)(result + 9);
    if ((v2 & 4) == 0)
    {
LABEL_3:
      if ((v2 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else if ((v2 & 4) == 0)
  {
    goto LABEL_3;
  }
  a2[2] = *(unsigned char *)(result + 10);
  if ((v2 & 1) == 0)
  {
LABEL_4:
    if ((v2 & 8) == 0) {
      return result;
    }
LABEL_9:
    a2[3] = *(unsigned char *)(result + 11);
    return result;
  }
LABEL_8:
  *a2 = *(unsigned char *)(result + 8);
  if ((v2 & 8) != 0) {
    goto LABEL_9;
  }
  return result;
}

uint64_t sub_18E0F5D94(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = *(void *)(*(void *)(a1 + 8) + 8);
    for (uint64_t i = *(void *)(*(void *)(a1 + 16) + 8); i != v3; i += 200)
    {
      uint64_t v5 = *(void *)(i + 184);
      *(void *)(i + 184) = 0;
      if (v5) {
        MEMORY[0x192FA6240](v5, 0x1000C4041240993);
      }
    }
  }
  return a1;
}

uint64_t sub_18E0F5E04(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 200;
    uint64_t v4 = *(void *)(i - 16);
    *(void *)(i - 16) = 0;
    if (v4) {
      MEMORY[0x192FA6240](v4, 0x1000C4041240993);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_18E0F5E70(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDD1E618;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_18E0F5E90(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDD1E618;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FA6240);
}

__n128 sub_18E0F5EEC(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
  *(_OWORD *)a1 = v2;
  *(unsigned char *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 48) = 0;
  if (*((unsigned char *)a2 + 48))
  {
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    *(_OWORD *)(a1 + 24) = *(long long *)((char *)a2 + 24);
    *(void *)(a1 + 40) = *((void *)a2 + 5);
    *((void *)a2 + 3) = 0;
    *((void *)a2 + 4) = 0;
    *((void *)a2 + 5) = 0;
    *(unsigned char *)(a1 + 48) = 1;
  }
  long long v3 = *(long long *)((char *)a2 + 56);
  long long v4 = *(long long *)((char *)a2 + 72);
  long long v5 = *(long long *)((char *)a2 + 88);
  *(_OWORD *)(a1 + 104) = *(long long *)((char *)a2 + 104);
  *(_OWORD *)(a1 + 88) = v5;
  *(_OWORD *)(a1 + 72) = v4;
  *(_OWORD *)(a1 + 56) = v3;
  long long v6 = *(long long *)((char *)a2 + 120);
  long long v7 = *(long long *)((char *)a2 + 136);
  long long v8 = *(long long *)((char *)a2 + 152);
  *(void *)(a1 + 168) = *((void *)a2 + 21);
  *(_OWORD *)(a1 + 152) = v8;
  *(_OWORD *)(a1 + 136) = v7;
  *(_OWORD *)(a1 + 120) = v6;
  long long v9 = a2[11];
  long long v10 = a2[12];
  *(_OWORD *)(a1 + 206) = *(long long *)((char *)a2 + 206);
  *(_OWORD *)(a1 + 176) = v9;
  *(_OWORD *)(a1 + 192) = v10;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 224) = 0;
  __n128 result = (__n128)a2[14];
  *(__n128 *)(a1 + 224) = result;
  *(void *)(a1 + 240) = *((void *)a2 + 30);
  *((void *)a2 + 28) = 0;
  *((void *)a2 + 29) = 0;
  *((void *)a2 + 30) = 0;
  *(_DWORD *)(a1 + 248) = *((_DWORD *)a2 + 62);
  return result;
}

double sub_18E0F5FB4(uint64_t a1)
{
  uint64_t v9 = 0x100000003;
  long long v7 = &unk_1EDD18DC8;
  long long v8 = xmmword_18E1F6F60;
  long long v10 = &v11;
  uint64_t v4 = 0x300000003;
  long long v2 = &unk_1EDD18EE8;
  long long v3 = xmmword_18E1F0010;
  long long v5 = &v6;
  return sub_18DFE2D1C(a1, (uint64_t)&v7, (uint64_t)&v2);
}

void *sub_18E0F6058(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_18DFFA7B0(a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_18E0F60B4(_Unwind_Exception *exception_object)
{
  long long v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_18E0F60D0(void *a1, unint64_t a2, void *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_18DFFA7B0(a1, a2);
    uint64_t v6 = (void *)a1[1];
    long long v7 = &v6[a2];
    uint64_t v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_18E0F6138(_Unwind_Exception *exception_object)
{
  long long v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

double sub_18E0F6154(double *a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 52) |= 1u;
  uint64_t v3 = *(void *)(a2 + 8);
  if (!v3) {
    operator new();
  }
  uint64_t v4 = *(void *)a1;
  *(_DWORD *)(v3 + 28) |= 1u;
  *(void *)(v3 + 8) = v4;
  *(_DWORD *)(a2 + 52) |= 1u;
  double result = a1[1];
  *(_DWORD *)(v3 + 28) |= 2u;
  *(double *)(v3 + 16) = result;
  if (*((unsigned char *)a1 + 16))
  {
    *(_DWORD *)(a2 + 52) |= 2u;
    uint64_t v6 = *(void *)(a2 + 16);
    if (!v6) {
      operator new();
    }
    uint64_t v7 = *((void *)a1 + 3);
    *(_DWORD *)(v6 + 28) |= 1u;
    *(void *)(v6 + 8) = v7;
    *(_DWORD *)(a2 + 52) |= 2u;
    double result = a1[4];
    *(_DWORD *)(v6 + 28) |= 2u;
    *(double *)(v6 + 16) = result;
  }
  if (*((unsigned char *)a1 + 40))
  {
    *(_DWORD *)(a2 + 52) |= 4u;
    uint64_t v8 = *(void *)(a2 + 24);
    if (!v8) {
      operator new();
    }
    uint64_t v9 = *((void *)a1 + 6);
    *(_DWORD *)(v8 + 28) |= 1u;
    *(void *)(v8 + 8) = v9;
    *(_DWORD *)(a2 + 52) |= 4u;
    double result = a1[7];
    *(_DWORD *)(v8 + 28) |= 2u;
    *(double *)(v8 + 16) = result;
  }
  if (*((unsigned char *)a1 + 64))
  {
    *(_DWORD *)(a2 + 52) |= 8u;
    uint64_t v10 = *(void *)(a2 + 32);
    if (!v10) {
      operator new();
    }
    uint64_t v11 = *((void *)a1 + 9);
    *(_DWORD *)(v10 + 28) |= 1u;
    *(void *)(v10 + 8) = v11;
    *(_DWORD *)(a2 + 52) |= 8u;
    double result = a1[10];
    *(_DWORD *)(v10 + 28) |= 2u;
    *(double *)(v10 + 16) = result;
  }
  return result;
}

uint64_t sub_18E0F63A0(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  switch(a1)
  {
    case 1:
      uint64_t result = 1;
      break;
    case 2:
      uint64_t result = 2;
      break;
    case 3:
      uint64_t result = 3;
      break;
    case 4:
      uint64_t result = 4;
      break;
    case 5:
      uint64_t result = 29;
      break;
    case 6:
      uint64_t result = 5;
      break;
    case 7:
      uint64_t result = 30;
      break;
    case 8:
      uint64_t result = 6;
      break;
    case 9:
      uint64_t result = 27;
      break;
    case 10:
      uint64_t result = 21;
      break;
    case 11:
      uint64_t result = 24;
      break;
    case 12:
      uint64_t result = 7;
      break;
    case 13:
      uint64_t result = 25;
      break;
    case 14:
      uint64_t result = 9;
      break;
    case 15:
      uint64_t result = 12;
      break;
    case 16:
      uint64_t result = 23;
      break;
    case 17:
      uint64_t result = 11;
      break;
    case 18:
      uint64_t result = 10;
      break;
    case 19:
      uint64_t result = 13;
      break;
    case 20:
      uint64_t result = 35;
      break;
    case 21:
      uint64_t result = 14;
      break;
    case 22:
      uint64_t result = 15;
      break;
    case 23:
      uint64_t result = 16;
      break;
    case 24:
      uint64_t result = 17;
      break;
    case 25:
      uint64_t result = 18;
      break;
    case 26:
      uint64_t result = 22;
      break;
    case 27:
      uint64_t result = 8;
      break;
    case 28:
      uint64_t result = 19;
      break;
    case 29:
      uint64_t result = 20;
      break;
    case 30:
      uint64_t result = 33;
      break;
    case 31:
      uint64_t result = 32;
      break;
    case 32:
      uint64_t result = 31;
      break;
    case 33:
      uint64_t v14 = v8;
      uint64_t v15 = v9;
      __int16 v13 = 12;
      unsigned __int8 v12 = 4;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v13, &v12, "Invalid measurement type specified: 'RavenMeasurementTypeMax'", a4, a5, a6, a7, a8, v11);
      uint64_t result = 0;
      break;
    default:
      uint64_t result = 28;
      break;
  }
  return result;
}

uint64_t *sub_18E0F65A4(uint64_t **a1, unint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = a1 + 1;
  long long v5 = a1[1];
  if (v5)
  {
    unint64_t v7 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v8 = (uint64_t **)v5;
        unint64_t v9 = v5[4];
        if (v7 >= v9) {
          break;
        }
        long long v5 = *v8;
        uint64_t v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      long long v5 = v8[1];
      if (!v5)
      {
        uint64_t v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v8 = a1 + 1;
LABEL_10:
    uint64_t v10 = (uint64_t *)operator new(0x28uLL);
    v10[4] = *a3;
    sub_18E01BD84(a1, (uint64_t)v8, v6, v10);
    return v10;
  }
  return (uint64_t *)v8;
}

uint64_t raven::RavenUserGaitTrackerActiveObject::RavenUserGaitTrackerActiveObject(uint64_t a1, unsigned char *a2)
{
  cnframework::ActiveObjectBase::ActiveObjectBase(a1, a2);
  *(void *)uint64_t v3 = &unk_1EDD15D90;
  *(unsigned char *)(v3 + 480) = 0;
  *(void *)(v3 + 488) = 0;
  cnestimation::PeriodicityTracker::PeriodicityTracker((cnestimation::PeriodicityTracker *)(v3 + 496));
  *(void *)a1 = &unk_1EDD15428;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_OWORD *)(a1 + 728) = 0u;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_OWORD *)(a1 + 760) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(void *)(a1 + 792) = 0;
  *(void *)(a1 + 688) = &unk_1EDD140B8;
  *(void *)(a1 + 704) = 0;
  *(void *)(a1 + 696) = 0;
  *(unsigned char *)(a1 + 712) = 0;
  *(void *)(a1 + 720) = 0;
  *(void *)(a1 + 728) = 0;
  *(unsigned char *)(a1 + 736) = 0;
  *(void *)(a1 + 752) = 0;
  *(void *)(a1 + 744) = 0;
  *(unsigned char *)(a1 + 760) = 0;
  *(void *)(a1 + 776) = 0;
  *(void *)(a1 + 768) = 0;
  *(void *)(a1 + 784) = 0x7FF8000000000000;
  *(void *)(a1 + 800) = 0x3FF0000000000000;
  *(void *)(a1 + 984) = 0;
  *(_OWORD *)(a1 + 952) = 0u;
  *(_OWORD *)(a1 + 968) = 0u;
  *(_OWORD *)(a1 + 936) = 0u;
  *(_OWORD *)(a1 + 920) = 0u;
  *(_OWORD *)(a1 + 904) = 0u;
  *(_OWORD *)(a1 + 888) = 0u;
  *(_OWORD *)(a1 + 872) = 0u;
  *(_OWORD *)(a1 + 856) = 0u;
  *(_OWORD *)(a1 + 840) = 0u;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 808) = 0u;
  *(void *)(a1 + 880) = &unk_1EDD13CF0;
  *(void *)(a1 + 896) = 0;
  *(void *)(a1 + 888) = 0;
  *(unsigned char *)(a1 + 904) = 0;
  *(void *)(a1 + 920) = 0;
  *(void *)(a1 + 912) = 0;
  *(unsigned char *)(a1 + 928) = 0;
  *(void *)(a1 + 944) = 0;
  *(void *)(a1 + 936) = 0;
  *(unsigned char *)(a1 + 952) = 0;
  *(void *)(a1 + 968) = 0;
  *(void *)(a1 + 960) = 0;
  *(void *)(a1 + 976) = 0x7FF8000000000000;
  *(void *)(a1 + 992) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 1096) = 0u;
  *(_OWORD *)(a1 + 1080) = 0u;
  *(_OWORD *)(a1 + 1064) = 0u;
  *(_OWORD *)(a1 + 1048) = 0u;
  *(_OWORD *)(a1 + 1032) = 0u;
  *(_OWORD *)(a1 + 1016) = 0u;
  *(_OWORD *)(a1 + 1000) = 0u;
  *(void *)(a1 + 1112) = 0x7FF8000000000000;
  *(void *)(a1 + 1032) = 0x7FF8000000000000;
  *(unsigned char *)(a1 + 1120) = 0;
  *(unsigned char *)(a1 + 1124) = 0;
  *(unsigned char *)(a1 + 1128) = 0;
  *(_DWORD *)(a1 + 1180) = 0;
  *(_OWORD *)(a1 + 1148) = 0u;
  *(_OWORD *)(a1 + 1164) = 0u;
  *(_OWORD *)(a1 + 1132) = 0u;
  return a1;
}

void sub_18E0F680C(_Unwind_Exception *a1)
{
  cnframework::ActiveObjectBase::~ActiveObjectBase(v1);
  _Unwind_Resume(a1);
}

void sub_18E0F6820(cnframework::ActiveObjectBase *a1)
{
  *(void *)a1 = &unk_1EDD15D90;
  sub_18DEE2E60((void *)a1 + 80);
  sub_18DEE2DB8((void *)a1 + 74);

  cnframework::ActiveObjectBase::~ActiveObjectBase(a1);
}

uint64_t raven::RavenUserGaitTrackerActiveObject::Configure(cnprint::CNPrinter *a1, uint64_t *a2)
{
  uint64_t result = sub_18E0F6A00(a1, a2);
  if (!result)
  {
    uint64_t v4 = *((void *)a1 + 61);
    uint64_t v5 = *(void *)(v4 + 472);
    if ((v5 <= -1 || ((v5 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF)
      && (unint64_t)(v5 - 1) >= 0xFFFFFFFFFFFFFLL)
    {
      __int16 v26 = 12;
      unsigned __int8 v25 = 4;
      sub_18DEDE7B0(__p, "RavenUserGaitTrackerActiveObject");
      if (v24 >= 0) {
        int v16 = __p;
      }
      else {
        LOBYTE(v16) = __p[0];
      }
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v26, &v25, "%s could not be configured - invalid walk step freq,%.3lf", v11, v12, v13, v14, v15, (char)v16);
    }
    else
    {
      uint64_t v8 = *(void *)(v4 + 480);
      if (v8 > -1 && ((v8 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 < 0x3FF
        || (unint64_t)(v8 - 1) < 0xFFFFFFFFFFFFFLL)
      {
        return 0;
      }
      __int16 v26 = 12;
      unsigned __int8 v25 = 4;
      sub_18DEDE7B0(__p, "RavenUserGaitTrackerActiveObject");
      if (v24 >= 0) {
        uint64_t v22 = __p;
      }
      else {
        LOBYTE(v22) = __p[0];
      }
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v26, &v25, "%s could not be configured - invalid run step freq,%.3lf", v17, v18, v19, v20, v21, (char)v22);
    }
    if (v24 < 0) {
      operator delete(__p[0]);
    }
    return 0xFFFFFFFFLL;
  }
  return result;
}

void sub_18E0F69E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_18E0F6A00(cnprint::CNPrinter *a1, uint64_t *a2)
{
  if (*((unsigned char *)a1 + 480) && cnprint::CNPrinter::GetLogLevel(a1) <= 1)
  {
    LOWORD(v111[0]) = 12;
    LOBYTE(v114) = 1;
    (*(void (**)(void **__return_ptr, cnprint::CNPrinter *))(*(void *)a1 + 16))(__p, a1);
    if (v116 >= 0) {
      unint64_t v9 = __p;
    }
    else {
      LOBYTE(v9) = __p[0];
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v111, (unsigned __int8 *)&v114, "Warning: %s configured more than once", v4, v5, v6, v7, v8, (char)v9);
    if (SHIBYTE(v116) < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v10 = *a2;
  if (!*a2 || !*(unsigned char *)(v10 + 33))
  {
    LOWORD(v111[0]) = 12;
    LOBYTE(v114) = 4;
    (*(void (**)(void **__return_ptr, cnprint::CNPrinter *))(*(void *)a1 + 16))(__p, a1);
    if (v116 >= 0) {
      uint64_t v48 = __p;
    }
    else {
      LOBYTE(v48) = __p[0];
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v111, (unsigned __int8 *)&v114, "%s could not be configured", v43, v44, v45, v46, v47, (char)v48);
    goto LABEL_105;
  }
  *((void *)a1 + 61) = v10;
  double v11 = *(double *)(v10 + 648);
  if ((*(uint64_t *)&v11 <= -1 || ((*(void *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF)
    && (unint64_t)(*(void *)&v11 - 1) >= 0xFFFFFFFFFFFFFLL)
  {
    LOWORD(v111[0]) = 12;
    LOBYTE(v114) = 4;
    (*(void (**)(void **__return_ptr, cnprint::CNPrinter *))(*(void *)a1 + 16))(__p, a1);
    if (v116 >= 0) {
      uint64_t v54 = __p;
    }
    else {
      LOBYTE(v54) = __p[0];
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v111, (unsigned __int8 *)&v114, "%s could not be configured - invalid HW period,%.3lf", v49, v50, v51, v52, v53, (char)v54);
    goto LABEL_105;
  }
  uint64_t v14 = *(void *)(v10 + 384);
  if ((v14 <= -1 || ((v14 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF)
    && (unint64_t)(v14 - 1) >= 0xFFFFFFFFFFFFFLL)
  {
    LOWORD(v111[0]) = 12;
    LOBYTE(v114) = 4;
    (*(void (**)(void **__return_ptr, cnprint::CNPrinter *))(*(void *)a1 + 16))(__p, a1);
    if (v116 >= 0) {
      uint64_t v60 = __p;
    }
    else {
      LOBYTE(v60) = __p[0];
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v111, (unsigned __int8 *)&v114, "%s could not be configured - invalid window duration,%.3lf", v55, v56, v57, v58, v59, (char)v60);
    goto LABEL_105;
  }
  uint64_t v17 = *(void *)(v10 + 392);
  if ((v17 <= -1 || ((v17 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF)
    && (unint64_t)(v17 - 1) >= 0xFFFFFFFFFFFFFLL)
  {
    LOWORD(v111[0]) = 12;
    LOBYTE(v114) = 4;
    (*(void (**)(void **__return_ptr, cnprint::CNPrinter *))(*(void *)a1 + 16))(__p, a1);
    if (v116 >= 0) {
      uint64_t v66 = __p;
    }
    else {
      LOBYTE(v66) = __p[0];
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v111, (unsigned __int8 *)&v114, "%s could not be configured - invalid min frequency,%.3lf", v61, v62, v63, v64, v65, (char)v66);
    goto LABEL_105;
  }
  uint64_t v20 = *(void *)(v10 + 400);
  if ((v20 <= -1 || ((v20 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF)
    && (unint64_t)(v20 - 1) >= 0xFFFFFFFFFFFFFLL)
  {
    LOWORD(v111[0]) = 12;
    LOBYTE(v114) = 4;
    (*(void (**)(void **__return_ptr, cnprint::CNPrinter *))(*(void *)a1 + 16))(__p, a1);
    if (v116 >= 0) {
      uint64_t v72 = __p;
    }
    else {
      LOBYTE(v72) = __p[0];
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v111, (unsigned __int8 *)&v114, "%s could not be configured - invalid max frequency,%.3lf", v67, v68, v69, v70, v71, (char)v72);
    goto LABEL_105;
  }
  double v23 = *(double *)(v10 + 408);
  if ((*(uint64_t *)&v23 <= -1 || ((*(void *)&v23 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF)
    && (unint64_t)(*(void *)&v23 - 1) >= 0xFFFFFFFFFFFFFLL)
  {
    LOWORD(v111[0]) = 12;
    LOBYTE(v114) = 4;
    (*(void (**)(void **__return_ptr, cnprint::CNPrinter *))(*(void *)a1 + 16))(__p, a1);
    if (v116 >= 0) {
      uint64_t v78 = __p;
    }
    else {
      LOBYTE(v78) = __p[0];
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v111, (unsigned __int8 *)&v114, "%s could not be configured - invalid probability of false positive window,%.3lf", v73, v74, v75, v76, v77, (char)v78);
    goto LABEL_105;
  }
  double v26 = *(double *)(v10 + 704);
  if ((*(uint64_t *)&v26 <= -1 || ((*(void *)&v26 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF)
    && (unint64_t)(*(void *)&v26 - 1) >= 0xFFFFFFFFFFFFFLL)
  {
    LOWORD(v111[0]) = 12;
    LOBYTE(v114) = 4;
    (*(void (**)(void **__return_ptr, cnprint::CNPrinter *))(*(void *)a1 + 16))(__p, a1);
    if (v116 >= 0) {
      uint64_t v84 = __p;
    }
    else {
      LOBYTE(v84) = __p[0];
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v111, (unsigned __int8 *)&v114, "%s could not be configured - invalid accelerometer noise,%.3lf", v79, v80, v81, v82, v83, (char)v84);
    goto LABEL_105;
  }
  double v29 = *(double *)(v10 + 736);
  if ((*(uint64_t *)&v29 <= -1 || ((*(void *)&v29 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF)
    && (unint64_t)(*(void *)&v29 - 1) >= 0xFFFFFFFFFFFFFLL)
  {
    LOWORD(v111[0]) = 12;
    LOBYTE(v114) = 4;
    (*(void (**)(void **__return_ptr, cnprint::CNPrinter *))(*(void *)a1 + 16))(__p, a1);
    if (v116 >= 0) {
      uint64_t v90 = __p;
    }
    else {
      LOBYTE(v90) = __p[0];
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v111, (unsigned __int8 *)&v114, "%s could not be configured - invalid accelerometer bias sigma,%.3lf", v85, v86, v87, v88, v89, (char)v90);
    goto LABEL_105;
  }
  double v32 = *(double *)(v10 + 416);
  if ((*(void *)&v32 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v32 < 0.0 || v32 > 1.0)
  {
    LOWORD(v111[0]) = 12;
    LOBYTE(v114) = 4;
    (*(void (**)(void **__return_ptr, cnprint::CNPrinter *))(*(void *)a1 + 16))(__p, a1);
    if (v116 >= 0) {
      uint64_t v96 = __p;
    }
    else {
      LOBYTE(v96) = __p[0];
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v111, (unsigned __int8 *)&v114, "%s could not be configured - invalid probability of false positive,%.3lf", v91, v92, v93, v94, v95, (char)v96);
    goto LABEL_105;
  }
  int v33 = *(_DWORD *)(v10 + 424);
  if (!v33)
  {
    LOWORD(v111[0]) = 12;
    LOBYTE(v114) = 4;
    (*(void (**)(void **__return_ptr, cnprint::CNPrinter *))(*(void *)a1 + 16))(__p, a1);
    if (v116 >= 0) {
      uint64_t v103 = __p;
    }
    else {
      LOBYTE(v103) = __p[0];
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v111, (unsigned __int8 *)&v114, "%s could not be configured - invalid periodicity feature,%d", v98, v99, v100, v101, v102, (char)v103);
LABEL_105:
    if ((SHIBYTE(v116) & 0x80000000) == 0) {
      return 0xFFFFFFFFLL;
    }
    uint64_t v42 = __p[0];
LABEL_107:
    operator delete(v42);
    return 0xFFFFFFFFLL;
  }
  __p[0] = *(void **)(v10 + 648);
  __p[1] = (void *)v14;
  uint64_t v116 = v17;
  uint64_t v117 = v20;
  double v34 = fmax(ceil(v23 / v11), 1.0);
  long double v35 = log(1.0 - v32);
  double v118 = 1.0 - exp(v35 / v34);
  double v119 = sqrt(v29 * v29 + v26 * v26);
  int v120 = v33;
  if (cnestimation::PeriodicityTracker::Configure((uint64_t)a1 + 496, (double *)__p))
  {
    __int16 v114 = 12;
    unsigned __int8 v113 = 4;
    (*(void (**)(void *__return_ptr, cnprint::CNPrinter *))(*(void *)a1 + 16))(v111, a1);
    if (v112 >= 0) {
      uint64_t v41 = v111;
    }
    else {
      LOBYTE(v41) = v111[0];
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v114, &v113, "Error: %s could not be configured", v36, v37, v38, v39, v40, (char)v41);
    if ((v112 & 0x80000000) == 0) {
      return 0xFFFFFFFFLL;
    }
    uint64_t v42 = (void *)v111[0];
    goto LABEL_107;
  }
  cnframework::ActiveObjectBase::SetEventQueueDelay(a1, 0.0);
  *((unsigned char *)a1 + 480) = 1;
  uint64_t v104 = (cnprint::CNPrinter *)(*(uint64_t (**)(cnprint::CNPrinter *))(*(void *)a1 + 48))(a1);
  if (cnprint::CNPrinter::GetLogLevel(v104) <= 1)
  {
    LOWORD(v111[0]) = 12;
    LOBYTE(v114) = 1;
    (*(void (**)(void **__return_ptr, cnprint::CNPrinter *))(*(void *)a1 + 16))(__p, a1);
    if (v116 >= 0) {
      long long v110 = __p;
    }
    else {
      LOBYTE(v110) = __p[0];
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v111, (unsigned __int8 *)&v114, "%s configured successfully", v105, v106, v107, v108, v109, (char)v110);
    if (SHIBYTE(v116) < 0) {
      operator delete(__p[0]);
    }
  }
  return 0;
}

void sub_18E0F72B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *raven::RavenUserGaitTrackerActiveObject::GetActiveObjectName@<X0>(void *a1@<X8>)
{
  return sub_18DEDE7B0(a1, "RavenUserGaitTrackerActiveObject");
}

__n128 raven::RavenUserGaitTrackerActiveObject::HandleEvent(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 8);
  long long v3 = *(_OWORD *)(a2 + 24);
  long long v4 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 744) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 728) = v4;
  *(_OWORD *)(a1 + 712) = v3;
  *(_OWORD *)(a1 + 696) = v2;
  long long v5 = *(_OWORD *)(a2 + 72);
  long long v6 = *(_OWORD *)(a2 + 88);
  long long v7 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 808) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 792) = v7;
  *(_OWORD *)(a1 + 776) = v6;
  *(_OWORD *)(a1 + 760) = v5;
  __n128 result = *(__n128 *)(a2 + 136);
  long long v9 = *(_OWORD *)(a2 + 152);
  long long v10 = *(_OWORD *)(a2 + 168);
  *(void *)(a1 + 872) = *(void *)(a2 + 184);
  *(_OWORD *)(a1 + 856) = v10;
  *(_OWORD *)(a1 + 840) = v9;
  *(__n128 *)(a1 + 824) = result;
  return result;
}

{
  long long v2;
  long long v3;
  long long v4;
  __n128 result;
  long long v6;
  long long v7;

  *(_OWORD *)(a1 + 888) = *(_OWORD *)(a2 + 8);
  long long v2 = *(_OWORD *)(a2 + 24);
  long long v3 = *(_OWORD *)(a2 + 40);
  long long v4 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 952) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 936) = v4;
  *(_OWORD *)(a1 + 920) = v3;
  *(_OWORD *)(a1 + 904) = v2;
  __n128 result = *(__n128 *)(a2 + 88);
  long long v6 = *(_OWORD *)(a2 + 104);
  long long v7 = *(_OWORD *)(a2 + 120);
  *(void *)(a1 + 1016) = *(void *)(a2 + 136);
  *(_OWORD *)(a1 + 1000) = v7;
  *(_OWORD *)(a1 + 984) = v6;
  *(__n128 *)(a1 + 968) = result;
  return result;
}

void raven::RavenUserGaitTrackerActiveObject::InitializeGaitTracking(raven::RavenUserGaitTrackerActiveObject *this, unsigned int a2)
{
  *((_DWORD *)this + 281) = a2;
  *((unsigned char *)this + 1128) = 1;
  *((_DWORD *)this + 283) = 0;
  unint64_t v4 = a2;
  if (a2)
  {
    long long v5 = (char *)operator new(96 * a2);
    long long v6 = &v5[96 * v4];
    long long v7 = v5;
    do
    {
      *(void *)long long v7 = 0;
      *((void *)v7 + 1) = 0x7FF8000000000000;
      *((_OWORD *)v7 + 1) = 0uLL;
      *((_OWORD *)v7 + 2) = 0uLL;
      *((_OWORD *)v7 + 3) = 0uLL;
      *((_OWORD *)v7 + 4) = 0uLL;
      *((void *)v7 + 10) = 0;
      *((void *)v7 + 11) = 0x7FF8000000000000;
      v7 += 96;
    }
    while (v7 != v6);
  }
  else
  {
    long long v6 = 0;
    long long v5 = 0;
  }
  uint64_t v8 = (void *)*((void *)this + 142);
  if (v8)
  {
    *((void *)this + 143) = v8;
    operator delete(v8);
  }
  *((void *)this + 142) = v5;
  *((void *)this + 143) = v6;
  *((void *)this + 144) = v6;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  int v16 = 0;
  if (a2)
  {
    long long v9 = (char *)sub_18DFF2948((uint64_t)&v16, v4);
    double v11 = &v9[4 * v10];
    uint64_t v14 = v9;
    int v16 = v11;
    bzero(v9, 4 * v4);
    uint64_t v12 = &v9[4 * v4];
    uint64_t v15 = v12;
  }
  else
  {
    double v11 = 0;
    uint64_t v12 = 0;
    long long v9 = 0;
  }
  uint64_t v13 = (void *)*((void *)this + 145);
  if (v13)
  {
    *((void *)this + 146) = v13;
    operator delete(v13);
    long long v9 = v14;
    uint64_t v12 = v15;
    double v11 = v16;
  }
  *((void *)this + 145) = v9;
  *((void *)this + 146) = v12;
  *((void *)this + 147) = v11;
}

void sub_18E0F7500(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t raven::RavenUserGaitTrackerActiveObject::OnFailureToAddSampleToPeriodicityTracker(uint64_t this)
{
  if (*(unsigned char *)(this + 1128)) {
    *(unsigned char *)(this + 1128) = 0;
  }
  *(_DWORD *)(this + 1132) = 0;
  *(void *)(this + 1144) = *(void *)(this + 1136);
  *(void *)(this + 1168) = *(void *)(this + 1160);
  return this;
}

uint64_t raven::RavenUserGaitTrackerActiveObject::ResetGaitTracking(uint64_t this)
{
  if (*(unsigned char *)(this + 1128)) {
    *(unsigned char *)(this + 1128) = 0;
  }
  *(_DWORD *)(this + 1132) = 0;
  *(void *)(this + 1144) = *(void *)(this + 1136);
  *(void *)(this + 1168) = *(void *)(this + 1160);
  return this;
}

void raven::RavenUserGaitTrackerActiveObject::OnNewSampleInPeriodicityTracker(uint64_t a1, long long *a2)
{
  sub_18E0F773C(a1);
  memset(v31, 0, sizeof(v31));
  uint64_t v32 = 0;
  uint64_t v33 = 0x7FF8000000000000;
  if (sub_18E0F77F8(a1))
  {
    long long v6 = *a2;
    *(_OWORD *)(a1 + 1040) = a2[1];
    *(_OWORD *)(a1 + 1024) = v6;
    long long v7 = a2[2];
    long long v8 = a2[3];
    long long v9 = a2[4];
    *(_OWORD *)(a1 + 1104) = a2[5];
    *(_OWORD *)(a1 + 1088) = v9;
    *(_OWORD *)(a1 + 1072) = v8;
    *(_OWORD *)(a1 + 1056) = v7;
    if (*(unsigned char *)(a1 + 569)) {
      double v10 = *(double *)(a1 + 576);
    }
    else {
      double v10 = NAN;
    }
    double v16 = fabs(v10);
    double v17 = 0.25 / v10;
    if (v16 < 2.22044605e-16) {
      double v17 = NAN;
    }
    double v30 = NAN;
    if (cnestimation::PeriodicityTracker::IsFeatureObservedInRecentTimeHistory((cnestimation::PeriodicityTracker *)(a1 + 496), v17, &v30))
    {
      *(double *)v18.i64 = v30;
      uint64_t v28 = 0;
      uint64_t v29 = 0;
      CNTimeSpan::SetTimeSpan(&v28, 0, v18, v19);
      uint64_t v13 = CNTimeSpan::operator+(a1 + 1024, &v28, v20, v21);
      goto LABEL_14;
    }
    *(unsigned char *)(a1 + 1120) = 1;
  }
  else
  {
    if (!*(unsigned char *)(a1 + 1120)) {
      return;
    }
    if (!*(unsigned char *)(a1 + 569)) {
      goto LABEL_24;
    }
    if (*(unsigned char *)(a1 + 496))
    {
      if ((cnestimation::PeriodicityTracker::NumberOfSamplesToLastObservedFeatureInRecentSamples((cnestimation::PeriodicityTracker *)(a1 + 496), 3u) & 0xFF00000000) != 0)
      {
        v4.i64[0] = *(void *)(a1 + 504);
        uint64_t v28 = 0;
        uint64_t v29 = 0;
        CNTimeSpan::SetTimeSpan(&v28, 0, v4, v5);
        uint64_t v13 = CNTimeSpan::operator-((uint64_t)a2, &v28, v11, v12);
LABEL_14:
        *(void *)&v31[0] = v13;
        *((void *)&v31[0] + 1) = v14;
        *(unsigned char *)(a1 + 1120) = 0;
        raven::RavenUserGaitTrackerActiveObject::PerformGaitTracking((raven::RavenUserGaitTrackerActiveObject *)a1, (uint64_t)v31, v15);
        return;
      }
      BOOL v22 = *(unsigned char *)(a1 + 569) == 0;
    }
    else
    {
      BOOL v22 = 0;
    }
    uint64_t v23 = CNTimeSpan::operator-((uint64_t)a2, (void *)(a1 + 1024), v4, v5);
    if (v22) {
      double v25 = NAN;
    }
    else {
      double v25 = *(double *)(a1 + 576);
    }
    double v26 = fabs(v25);
    double v27 = 0.25 / v25;
    if (v26 < 2.22044605e-16) {
      double v27 = NAN;
    }
    if (v24 + (double)v23 > v27) {
LABEL_24:
    }
      *(unsigned char *)(a1 + 1120) = 0;
  }
}

BOOL sub_18E0F773C(uint64_t a1)
{
  BOOL result = sub_18E0F77F8(a1);
  if (result) {
    sub_18E0F8104();
  }
  return result;
}

BOOL sub_18E0F77F8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 496)
    && ((LODWORD(v1) = vcvtpd_u64_f64(*(double *)(a1 + 512) / *(double *)(a1 + 504)), v1 <= 1)
      ? (unint64_t v1 = 1)
      : (unint64_t v1 = v1),
        *(void *)(a1 + 632) >= v1 && *(unsigned char *)(a1 + 569)))
  {
    return *(unsigned char *)(a1 + 568) != 0;
  }
  else
  {
    return 0;
  }
}

__n128 raven::RavenUserGaitTrackerActiveObject::PerformGaitTracking(raven::RavenUserGaitTrackerActiveObject *this, uint64_t a2, __n128 result)
{
  if (*((unsigned char *)this + 496))
  {
    result.n128_f64[0] = *((double *)this + 64) / *((double *)this + 63);
    LODWORD(v4) = vcvtpd_u64_f64(result.n128_f64[0]);
    unint64_t v4 = v4 <= 1 ? 1 : v4;
    if (*((void *)this + 79) >= v4)
    {
      if (!*((unsigned char *)this + 569)
        || (result.n128_u64[0] = *((void *)this + 72),
            (result.n128_u64[0] & 0x7FFFFFFFFFFFFFFFLL) > 0x7FEFFFFFFFFFFFFFLL)
        || fabs(result.n128_f64[0]) < 2.22044605e-16
        || result.n128_f64[0] < 0.0
        || (int v5 = *((unsigned __int8 *)this + 792), (v5 & 0xFE) != 2)
        || *((unsigned __int8 *)this + 984) - 1 <= 1)
      {
LABEL_12:
        if (*((unsigned char *)this + 1128)) {
          *((unsigned char *)this + 1128) = 0;
        }
        *((_DWORD *)this + 283) = 0;
        *((void *)this + 143) = *((void *)this + 142);
        *((void *)this + 146) = *((void *)this + 145);
        return result;
      }
      BOOL v12 = v5 == 2;
      uint64_t v6 = 480;
      if (v12) {
        uint64_t v6 = 472;
      }
      double v7 = *(double *)(*((void *)this + 61) + v6) * 0.5;
      double v8 = fabs(v7);
      if (v7 >= 0.0 && v8 >= 2.22044605e-16)
      {
        result.n128_f64[0] = result.n128_f64[0] / v7;
        unsigned int v11 = llround(result.n128_f64[0]);
        BOOL v12 = v11 > 4 || ((1 << v11) & 0x16) == 0;
        if (v12) {
          goto LABEL_12;
        }
        if (*((unsigned char *)this + 1128))
        {
          if (*((_DWORD *)this + 281) == v11)
          {
            int v13 = *((_DWORD *)this + 283);
            *((_DWORD *)this + 283) = v13 + 1;
LABEL_32:
            unsigned int v15 = v13 % (int)v11;
            uint64_t v16 = *((void *)this + 145);
            uint64_t v17 = *((void *)this + 142) + 96 * v15;
            int v18 = *(_DWORD *)(v16 + 4 * v15);
            *(_DWORD *)(v16 + 4 * v15) = v18 + 1;
            if ((v18 + 1) >= 2) {
              sub_18E0F7A7C();
            }
            long long v19 = *(_OWORD *)(a2 + 16);
            *(_OWORD *)uint64_t v17 = *(_OWORD *)a2;
            *(_OWORD *)(v17 + 16) = v19;
            BOOL result = *(__n128 *)(a2 + 32);
            long long v20 = *(_OWORD *)(a2 + 48);
            long long v21 = *(_OWORD *)(a2 + 80);
            *(_OWORD *)(v17 + 64) = *(_OWORD *)(a2 + 64);
            *(_OWORD *)(v17 + 80) = v21;
            *(__n128 *)(v17 + 32) = result;
            *(_OWORD *)(v17 + 48) = v20;
            return result;
          }
          *((unsigned char *)this + 1128) = 0;
          *((_DWORD *)this + 283) = 0;
          *((void *)this + 143) = *((void *)this + 142);
          *((void *)this + 146) = *((void *)this + 145);
        }
        raven::RavenUserGaitTrackerActiveObject::InitializeGaitTracking(this, v11);
        int v14 = *((unsigned __int8 *)this + 1128);
        int v13 = *((_DWORD *)this + 283);
        *((_DWORD *)this + 283) = v13 + 1;
        if (!v14) {
          sub_18DFF28FC();
        }
        unsigned int v11 = *((_DWORD *)this + 281);
        goto LABEL_32;
      }
    }
  }
  return result;
}

void sub_18E0F7A7C()
{
  v0 = operator new(0x60uLL);
  v0[1] = 0;
  v0[2] = 0;
  void *v0 = &unk_1EDD1E458;
  v0[3] = &unk_1EDD0A260;
  uint64_t v1 = MEMORY[0x1E4FBA3D8];
  *((unsigned char *)v0 + 32) = 0;
  v0[5] = 0;
  v0[6] = v1;
  v0[7] = 0;
  v0[8] = 0;
  sub_18DEDE7B0(v0 + 9, "");
  *((unsigned char *)v0 + 32) = 1;
  operator new();
}

void sub_18E0F7CF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_18DEE4E18(a11);
  }
  sub_18DEE4E18(v11);
  _Unwind_Resume(a1);
}

void raven::RavenUserGaitTrackerActiveObject::Reset(raven::RavenUserGaitTrackerActiveObject *this)
{
  *(void *)&long long v1 = 0;
  *((void *)&v1 + 1) = 0x7FF8000000000000;
  *(void *)&long long v2 = 0;
  *((void *)&v2 + 1) = 0x3FF0000000000000;
  *(_OWORD *)((char *)this + 744) = 0uLL;
  *(_OWORD *)((char *)this + 728) = 0uLL;
  *(_OWORD *)((char *)this + 712) = 0uLL;
  *(_OWORD *)((char *)this + 696) = 0uLL;
  *(_OWORD *)((char *)this + 808) = 0u;
  *(_OWORD *)((char *)this + 792) = v2;
  *(_OWORD *)((char *)this + 776) = v1;
  *(_OWORD *)((char *)this + 760) = 0uLL;
  *((void *)this + 109) = 0;
  *(_OWORD *)((char *)this + 856) = 0u;
  *(_OWORD *)((char *)this + 840) = 0u;
  *(_OWORD *)((char *)this + 824) = 0u;
  *((void *)&v1 + 1) = 0x7FF8000000000000;
  *(void *)&long long v2 = 0;
  *(void *)&long long v1 = 0;
  *((void *)&v2 + 1) = 0x3FF0000000000000;
  *(_OWORD *)((char *)this + 888) = 0uLL;
  *(_OWORD *)((char *)this + 952) = 0uLL;
  *(_OWORD *)((char *)this + 936) = 0uLL;
  *(_OWORD *)((char *)this + 920) = 0uLL;
  *(_OWORD *)((char *)this + 904) = 0uLL;
  *((void *)this + 127) = 0;
  *(_OWORD *)((char *)this + 1000) = 0uLL;
  *(_OWORD *)((char *)this + 984) = v2;
  *(_OWORD *)((char *)this + 968) = v1;
  *((unsigned char *)this + 1120) = 0;
  if (*((unsigned char *)this + 1128)) {
    *((unsigned char *)this + 1128) = 0;
  }
  *((_DWORD *)this + 283) = 0;
  *((void *)this + 143) = *((void *)this + 142);
  *((void *)this + 146) = *((void *)this + 145);
  sub_18E0F7F34(this);
}

void sub_18E0F7F34(cnprint::CNPrinter *a1)
{
  if (cnprint::CNPrinter::GetLogLevel(a1) <= 1)
  {
    __int16 v11 = 12;
    unsigned __int8 v10 = 1;
    (*(void (**)(void **__return_ptr, cnprint::CNPrinter *))(*(void *)a1 + 16))(__p, a1);
    if (v9 >= 0) {
      double v7 = __p;
    }
    else {
      LOBYTE(v7) = __p[0];
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v11, &v10, "Resetting %s", v2, v3, v4, v5, v6, (char)v7);
    if (v9 < 0) {
      operator delete(__p[0]);
    }
  }
  cnframework::ActiveObjectBase::ResetCurrentTime(a1);
  cnframework::ActiveObjectBase::ResetEventQueue(a1);
}

void sub_18E0F7FF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_18E0F8010(cnframework::ActiveObjectBase *a1)
{
  sub_18E0F8094(a1);

  JUMPOUT(0x192FA6240);
}

void sub_18E0F804C(cnframework::ActiveObjectBase *a1)
{
  sub_18E0F6820(a1);

  JUMPOUT(0x192FA6240);
}

void *sub_18E0F8084@<X0>(void *a1@<X8>)
{
  return sub_18DEDE7B0(a1, "RavenPeriodicityTrackerActiveObject");
}

void sub_18E0F8094(cnframework::ActiveObjectBase *a1)
{
  *(void *)a1 = &unk_1EDD15428;
  uint64_t v2 = (void *)*((void *)a1 + 145);
  if (v2)
  {
    *((void *)a1 + 146) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)a1 + 142);
  if (v3)
  {
    *((void *)a1 + 143) = v3;
    operator delete(v3);
  }

  sub_18E0F6820(a1);
}

void sub_18E0F8104()
{
}

void sub_18E0F8198(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a11) {
    sub_18DEE4E18(a11);
  }
  if (a13) {
    sub_18DEE4E18(a13);
  }
  _Unwind_Resume(exception_object);
}

void sub_18E0F81BC()
{
  v0 = operator new(0x60uLL);
  sub_18E0F8218(v0);
}

void sub_18E0F8204(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_18E0F8218(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1EDD1E458;
  sub_18E0F8274((uint64_t)(a1 + 3));
}

void sub_18E0F8260(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_18E0F8274(uint64_t a1)
{
  *(void *)a1 = &unk_1EDD0A260;
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  uint64_t v2 = MEMORY[0x1E4FBA3D8];
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = v2;
  sub_18DEDE7B0((void *)(a1 + 48), "");
  *(unsigned char *)(a1 + 8) = 1;
  sub_18E0F840C();
}

void sub_18E0F83B4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 71) < 0) {
    operator delete(*v3);
  }
  if (*v2) {
    (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_18E0F840C()
{
}

void sub_18E0F84F0()
{
}

void *sub_18E0F8504()
{
}

void sub_18E0F8510()
{
}

void sub_18E0F85A8()
{
}

void *sub_18E0F85BC()
{
}

void sub_18E0F85C8()
{
}

uint64_t raven::SolutionChecker::Configure(uint64_t a1, double **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(a1 + 16) = a3;
  double v8 = *(double *)(a3 + 8) + (double)*(uint64_t *)a3;
  double v9 = (*a2)[198];
  if ((*(void *)&v9 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (v9 >= 0.0 ? (BOOL v10 = v9 <= 1.0) : (BOOL v10 = 0), !v10))
  {
    __int16 v34 = 12;
    unsigned __int8 v33 = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v34, &v33, "t,%.3lf,SolutionChecker: Cannot configure. Invalid consistency_percentile_threshold: %.2lf", a4, a5, a6, a7, a8, SLOBYTE(v8));
    return 0xFFFFFFFFLL;
  }
  cnstatistics::InverseChi2((cnstatistics *)a1, v9, 3.0);
  *(double *)(a1 + 56) = sqrt(v14 * 0.333333333);
  cnstatistics::InverseChi2(v15, (*a2)[198], 1.0);
  *(double *)(a1 + 64) = sqrt(v16);
  cnstatistics::InverseChi2(v17, (*a2)[198], 1.0);
  *(double *)(a1 + 72) = sqrt(v23);
  double v24 = *a2;
  double v25 = (*a2)[194];
  *(double *)(a1 + 24) = v25;
  if ((*(void *)&v25 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v25 < 0.0)
  {
    __int16 v34 = 12;
    unsigned __int8 v33 = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v34, &v33, "t,%.3lf,SolutionChecker: Cannot configure. Invalid direction_of_travel_difference_from_convergence_tolerance: %.2lf", v18, v19, v20, v21, v22, SLOBYTE(v8));
    return 0xFFFFFFFFLL;
  }
  double v26 = v24[195];
  *(double *)(a1 + 32) = v26;
  if ((*(void *)&v26 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v26 < 0.0)
  {
    __int16 v34 = 12;
    unsigned __int8 v33 = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v34, &v33, "t,%.3lf,SolutionChecker: Cannot configure. Invalid direction_of_travel_difference_from_passthrough_tolerance: %.2lf", v18, v19, v20, v21, v22, SLOBYTE(v8));
    return 0xFFFFFFFFLL;
  }
  double v27 = v24[199];
  *(double *)(a1 + 40) = v27;
  if ((*(void *)&v27 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v27 < 0.0)
  {
    __int16 v34 = 12;
    unsigned __int8 v33 = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v34, &v33, "t,%.3lf,SolutionChecker: Cannot configure. Invalid position_difference_from_convergence_tolerance_m_: %.2lf", v18, v19, v20, v21, v22, SLOBYTE(v8));
    return 0xFFFFFFFFLL;
  }
  double v28 = v24[200];
  *(double *)(a1 + 48) = v28;
  if ((*(void *)&v28 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v28 < 0.0)
  {
    __int16 v34 = 12;
    unsigned __int8 v33 = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v34, &v33, "t,%.3lf,SolutionChecker: Cannot configure. Invalid position_difference_from_passthrough_tolerance: %.2lf", v18, v19, v20, v21, v22, SLOBYTE(v8));
    return 0xFFFFFFFFLL;
  }
  double v29 = v24[201];
  *(double *)(a1 + 80) = v29;
  if ((*(void *)&v29 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v29 < 0.0)
  {
    __int16 v34 = 12;
    unsigned __int8 v33 = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v34, &v33, "t,%.3lf,SolutionChecker: Cannot configure. Invalid speed_difference_from_convergence_tolerance: %.2lf", v18, v19, v20, v21, v22, SLOBYTE(v8));
    return 0xFFFFFFFFLL;
  }
  double v30 = v24[202];
  *(double *)(a1 + 88) = v30;
  if ((*(void *)&v30 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v30 < 0.0)
  {
    __int16 v34 = 12;
    unsigned __int8 v33 = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v34, &v33, "t,%.3lf,SolutionChecker: Cannot configure. Invalid speed_difference_from_passthrough_tolerance: %.2lf", v18, v19, v20, v21, v22, SLOBYTE(v8));
    return 0xFFFFFFFFLL;
  }
  double v31 = v24[204];
  *(double *)(a1 + 96) = v31;
  if ((*(void *)&v31 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v31 < 0.0)
  {
    __int16 v34 = 12;
    unsigned __int8 v33 = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v34, &v33, "t,%.3lf,SolutionChecker: Cannot configure. Invalid time_difference_from_current_time_tolerance: %.2lf", v18, v19, v20, v21, v22, SLOBYTE(v8));
    return 0xFFFFFFFFLL;
  }
  double v32 = v24[203];
  *(double *)(a1 + 104) = v32;
  if ((*(void *)&v32 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v32 < 0.0)
  {
    __int16 v34 = 12;
    unsigned __int8 v33 = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v34, &v33, "t,%.3lf,SolutionChecker: Cannot configure. Invalid time_difference_from_solution_to_check_against_tolerance_: %.2lf", v18, v19, v20, v21, v22, SLOBYTE(v8));
    return 0xFFFFFFFFLL;
  }
  uint64_t result = 0;
  *(unsigned char *)(a1 + 8) = 1;
  return result;
}

uint64_t raven::SolutionChecker::HandleEvent(raven::SolutionChecker *this, const raven::RavenSolutionEvent *a2, raven::RavenSolutionEvent *a3)
{
  if (!*((unsigned char *)this + 8))
  {
    LOWORD(v115) = 12;
    LOBYTE(v117[0]) = 4;
    uint64_t v27 = (*(uint64_t (**)(const raven::RavenSolutionEvent *, const raven::RavenSolutionEvent *, raven::RavenSolutionEvent *))(*(void *)a2 + 16))(a2, a2, a3);
    double v103 = v28 + (double)v27;
    double v26 = "t,%.3lf,SolutionChecker, not configured";
LABEL_33:
    uint64_t v45 = (unsigned __int8 *)v117;
LABEL_34:
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v115, v45, v26, v20, v21, v22, v23, v24, SLOBYTE(v103));
    return 0xFFFFFFFFLL;
  }
  uint64_t v6 = (cnprint::CNPrinter *)memcpy((char *)a3 + 8, (char *)a2 + 8, 0x971uLL);
  int v7 = *((unsigned __int8 *)a3 + 208);
  if ((v7 - 1) >= 3)
  {
    if (v7 != 4)
    {
      LOWORD(v115) = 12;
      LOBYTE(v117[0]) = 4;
      uint64_t v29 = (*(uint64_t (**)(const raven::RavenSolutionEvent *))(*(void *)a2 + 16))(a2);
      double v104 = v35 + (double)v29;
      uint64_t v36 = "t,%.3lf,SolutionChecker: est, %u. Cannot handle received RavenSolutionEvent esimator type. Exiting with chec"
            "k passed return value.";
LABEL_28:
      uint64_t v39 = (unsigned __int8 *)v117;
LABEL_29:
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v115, v39, v36, v30, v31, v32, v33, v34, SLOBYTE(v104));
    }
    return 0;
  }
  if (*((unsigned char *)a3 + 209) != 2)
  {
    if (cnprint::CNPrinter::GetLogLevel(v6) <= 1)
    {
      LOWORD(v115) = 12;
      LOBYTE(v117[0]) = 1;
      uint64_t v37 = (*(uint64_t (**)(const raven::RavenSolutionEvent *))(*(void *)a2 + 16))(a2);
      double v104 = v38 + (double)v37;
      uint64_t v36 = "t,%.3lf,SolutionChecker: est, %u. RavenSolutionEvent is unhealthy. Exiting with check passed return value.";
      goto LABEL_28;
    }
    return 0;
  }
  if (!*((unsigned char *)a3 + 1264))
  {
    LOWORD(v115) = 12;
    LOBYTE(v117[0]) = 4;
    uint64_t v43 = (*(uint64_t (**)(const raven::RavenSolutionEvent *))(*(void *)a2 + 16))(a2);
    double v103 = v44 + (double)v43;
    double v26 = "t,%.3lf,SolutionChecker: est, %u. RavenSolutionEvent has an invalid user position. Exiting with check failed return value.";
    goto LABEL_33;
  }
  if ((*((void *)a3 + 159) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (*((void *)a3 + 160) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (*((void *)a3 + 161) & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    LOWORD(v115) = 12;
    LOBYTE(v117[0]) = 4;
    uint64_t v41 = (*(uint64_t (**)(const raven::RavenSolutionEvent *))(*(void *)a2 + 16))(a2);
    double v103 = v42 + (double)v41;
    double v26 = "t,%.3lf,SolutionChecker: est, %u. RavenSolutionEvent has a non-finite user position value.";
    goto LABEL_33;
  }
  double v8 = sqrt(*((double *)a3 + 160) * *((double *)a3 + 160)+ *((double *)a3 + 159) * *((double *)a3 + 159)+ *((double *)a3 + 161) * *((double *)a3 + 161));
  if (v8 <= 3185504.5 || v8 >= 9556513.5)
  {
    LOWORD(v115) = 12;
    LOBYTE(v117[0]) = 4;
    uint64_t v46 = (*(uint64_t (**)(const raven::RavenSolutionEvent *))(*(void *)a2 + 16))(a2);
    double v103 = v47 + (double)v46;
    double v26 = "t,%.3lf,SolutionChecker: est, %u. distance_from_earth_center checks failed, distance, %.2lf. Exiting with chec"
          "k failed return value.";
    goto LABEL_33;
  }
  double v9 = *((double *)a3 + 165);
  double v10 = *((double *)a3 + 167);
  if ((*((void *)a3 + 162) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || *((double *)a3 + 162) <= 0.0
    || (*(void *)&v9 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || v9 <= 0.0
    || (*(void *)&v10 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || v10 <= 0.0)
  {
    LOWORD(v115) = 12;
    LOBYTE(v117[0]) = 4;
    uint64_t v48 = (*(uint64_t (**)(const raven::RavenSolutionEvent *))(*(void *)a2 + 16))(a2);
    double v103 = v49 + (double)v48;
    double v26 = "t,%.3lf,SolutionChecker: est, %u. RavenSolutionEvent has a non-finite or non-positive user position covariance"
          " diagonal term, pxx, %.2lf, pyy, %.2lf, pzz, %.2lf. Exiting with check failed return value.";
    goto LABEL_33;
  }
  if ((*((void *)a3 + 163) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (*((void *)a3 + 164) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (*((void *)a3 + 166) & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    LOWORD(v115) = 12;
    LOBYTE(v117[0]) = 4;
    uint64_t v50 = (*(uint64_t (**)(const raven::RavenSolutionEvent *))(*(void *)a2 + 16))(a2);
    double v103 = v51 + (double)v50;
    double v26 = "t,%.3lf,SolutionChecker: est, %u. RavenSolutionEvent has a non-finite user position covariance cross term, pxy"
          ", %.2lf, pxz, %.2lf, pyz, %.2lf. Exiting with check failed return value.";
    goto LABEL_33;
  }
  int v109 = *((unsigned __int8 *)a3 + 208);
  int8x16_t v11 = *((int8x16_t *)a3 + 74);
  v117[0] = *((_OWORD *)a3 + 73);
  long long v12 = *((_OWORD *)a3 + 76);
  v117[2] = *((_OWORD *)a3 + 75);
  v117[3] = v12;
  int8x16_t v13 = *((int8x16_t *)a3 + 77);
  long long v14 = *((_OWORD *)a3 + 78);
  v117[4] = v13;
  v117[5] = v14;
  v117[1] = v11;
  if (COERCE_UNSIGNED_INT64(*((double *)v117 + 1) + (double)*(uint64_t *)&v117[0]) >> 52 >= 0x7FF)
  {
    LOWORD(v115) = 12;
    LOBYTE(v114[0]) = 4;
    uint64_t v52 = (*(uint64_t (**)(const raven::RavenSolutionEvent *))(*(void *)a2 + 16))(a2);
    double v103 = v53 + (double)v52;
    double v26 = "t,%.3lf,SolutionChecker: est, %u. RavenSolutionEvent time is invalid, time, %.3lf. Exiting with check failed return value.";
    goto LABEL_40;
  }
  unsigned int v15 = (uint64_t *)*((void *)this + 2);
  v11.i64[0] = v15[1];
  *(double *)v13.i64 = (double)*v15;
  if (COERCE_UNSIGNED_INT64(*(double *)v11.i64 + *(double *)v13.i64) >> 52 >= 0x7FF)
  {
    LOWORD(v115) = 12;
    LOBYTE(v114[0]) = 4;
    uint64_t v54 = (*(uint64_t (**)(const raven::RavenSolutionEvent *))(*(void *)a2 + 16))(a2);
    double v105 = v60 + (double)v54;
    uint64_t v61 = "t,%.3lf,SolutionChecker: est, %u. current_time time is invalid, time, %.3lf. Marking the RavenSolution as unhe"
          "althy. Exiting with check passed return value.";
    goto LABEL_42;
  }
  double v16 = (cnprint::CNPrinter *)CNTimeSpan::operator-(*((void *)this + 2), v117, v13, v11);
  double v18 = v17 + (double)(uint64_t)v16;
  if (v18 > *((double *)this + 12))
  {
    LOWORD(v115) = 12;
    LOBYTE(v114[0]) = 4;
    uint64_t v19 = (*(uint64_t (**)(const raven::RavenSolutionEvent *))(*(void *)a2 + 16))(a2);
    double v103 = v25 + (double)v19;
    double v26 = "t,%.3lf,SolutionChecker: est, %u. time_difference_from_current_time check failed. Time difference is greater t"
          "han allowable tolerance, difference, %.3lf. Exiting with check failed return value.";
LABEL_40:
    uint64_t v45 = (unsigned __int8 *)v114;
    goto LABEL_34;
  }
  if (v18 < 0.0)
  {
    LOWORD(v115) = 12;
    LOBYTE(v114[0]) = 5;
    uint64_t v62 = (*(uint64_t (**)(const raven::RavenSolutionEvent *))(*(void *)a2 + 16))(a2);
    double v103 = v63 + (double)v62;
    double v26 = "t,%.3lf,SolutionChecker: est, %u. time_difference_from_current_time check failed. Time difference is negative,"
          " difference, %.3lf. Exiting with check failed return value.";
    goto LABEL_40;
  }
  if (!*((unsigned char *)this + 9))
  {
    LOWORD(v115) = 12;
    LOBYTE(v114[0]) = 2;
    uint64_t v66 = (*(uint64_t (**)(const raven::RavenSolutionEvent *))(*(void *)a2 + 16))(a2);
    double v104 = v67 + (double)v66;
    uint64_t v36 = "t,%.3lf,SolutionChecker: est, %u. is_active_ == false. Not cross checking with other information. Exiting with"
          " check passed return value.";
LABEL_51:
    uint64_t v39 = (unsigned __int8 *)v114;
    goto LABEL_29;
  }
  if (v109 == 1)
  {
    if (cnprint::CNPrinter::GetLogLevel(v16)) {
      return 0;
    }
    LOWORD(v115) = 12;
    LOBYTE(v114[0]) = 0;
    uint64_t v64 = (*(uint64_t (**)(const raven::RavenSolutionEvent *))(*(void *)a2 + 16))(a2);
    double v104 = v65 + (double)v64;
    uint64_t v36 = "t,%.3lf,SolutionChecker: est, %u. Estimator type to be checked is PassThrough. Exiting with check passed return value.";
    goto LABEL_51;
  }
  LOBYTE(v115) = 1;
  if (!sub_18DFF465C(v15 + 2, (unsigned __int8 *)&v115))
  {
    if (cnprint::CNPrinter::GetLogLevel(0) > 1) {
      goto LABEL_43;
    }
    LOWORD(v115) = 12;
    LOBYTE(v114[0]) = 1;
    uint64_t v87 = (*(uint64_t (**)(const raven::RavenSolutionEvent *))(*(void *)a2 + 16))(a2);
    double v105 = v88 + (double)v87;
    uint64_t v61 = "t,%.3lf,SolutionChecker: est, %u. A PassThrough solution has not yet been received to check against. Marking t"
          "he RavenSolution as unhealthy. Exiting with check passed return value.";
LABEL_42:
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v115, (unsigned __int8 *)v114, v61, v55, v56, v57, v58, v59, SLOBYTE(v105));
LABEL_43:
    uint64_t result = 0;
    *((unsigned char *)a3 + 209) = 1;
    return result;
  }
  uint64_t v68 = (void *)(*((void *)this + 2) + 16);
  LOBYTE(v114[0]) = 1;
  uint64_t v69 = sub_18DFF6184(v68, (unsigned __int8 *)v114);
  int v115 = &unk_1EDD14150;
  memcpy(v116, v69 + 1, 0x971uLL);
  v71.i64[1] = v116[146];
  v114[2] = *(_OWORD *)&v116[149];
  v114[3] = *(_OWORD *)&v116[151];
  v114[4] = *(_OWORD *)&v116[153];
  v114[5] = *(_OWORD *)&v116[155];
  v70.i64[1] = v116[148];
  v114[0] = *(_OWORD *)&v116[145];
  v114[1] = *(_OWORD *)&v116[147];
  v70.i64[0] = v116[146];
  *(double *)v71.i64 = *(double *)&v116[146] + (double)v116[145];
  unint64_t v72 = COERCE__INT64(fabs(*(double *)v71.i64)) - 1;
  BOOL v74 = (unint64_t)(COERCE__INT64(fabs(*(double *)v71.i64)) - 0x10000000000000) >> 53 <= 0x3FE
     || v72 <= 0xFFFFFFFFFFFFELL
     || v71.i64[0] == 0;
  if (!v74 || *(double *)v71.i64 < 0.0)
  {
    LOWORD(v113[0]) = 12;
    LOBYTE(v112) = 4;
    uint64_t v89 = (*(uint64_t (**)(const raven::RavenSolutionEvent *))(*(void *)a2 + 16))(a2);
    double v107 = v90 + (double)v89;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v113, (unsigned __int8 *)&v112, "t,%.3lf,SolutionChecker: est, %u. Passthrough solution time is invalid, time, %.3lf. Marking the RavenSolution as unhealthy. Exiting with check passed return value.", v91, v92, v93, v94, v95, SLOBYTE(v107));
    goto LABEL_43;
  }
  uint64_t v75 = CNTimeSpan::operator-((uint64_t)v117, v114, v71, v70);
  *(void *)&v113[0] = v75;
  v113[1] = v76;
  if (v75 < 0 || (*(double *)v77.i64 = v76, v76 < 0.0))
  {
    uint64_t v75 = CNTimeSpan::operator-(v113, v77, v78);
    v77.i64[0] = v79;
  }
  if (*(double *)v77.i64 + (double)v75 > *((double *)this + 13))
  {
    __int16 v112 = 12;
    BOOL v111 = 2;
    uint64_t v80 = (*(uint64_t (**)(const raven::RavenSolutionEvent *))(*(void *)a2 + 16))(a2);
    double v106 = v81 + (double)v80;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v112, (unsigned __int8 *)&v111, "t,%.3lf,SolutionChecker: est, %u. time_difference_from_passthrough check failed, difference, %.3lf. Exiting with check passed return value.", v82, v83, v84, v85, v86, SLOBYTE(v106));
    return 0;
  }
  BOOL v111 = 1;
  uint64_t result = raven::SolutionChecker::PerformPositionCheck(this, a3, &v111);
  if (!result && v111)
  {
    uint64_t result = raven::SolutionChecker::PerformSpeedCheck(this, a3, &v111);
    if (!result && v111)
    {
      if (*((double *)this + 3) < 180.0
        || *((double *)this + 4) < 180.0
        || (uint64_t result = raven::SolutionChecker::PerformDirectionOfTravelCheck(this, a3, &v111), !result) && v111)
      {
        if (!cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)result))
        {
          __int16 v112 = 12;
          unsigned __int8 v110 = 0;
          uint64_t v96 = (*(uint64_t (**)(const raven::RavenSolutionEvent *))(*(void *)a2 + 16))(a2);
          double v108 = v97 + (double)v96;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v112, &v110, "t,%.3lf,SolutionChecker: est, %u. All checks passed. Exiting with check passed return value.", v98, v99, v100, v101, v102, SLOBYTE(v108));
        }
        return 0;
      }
    }
  }
  return result;
}

uint64_t raven::SolutionChecker::PerformPositionCheck(raven::SolutionChecker *this, raven::RavenSolutionEvent *a2, BOOL *a3)
{
  char v176 = *((unsigned char *)a2 + 208);
  double v6 = *((double *)a2 + 162);
  double v7 = *((double *)a2 + 165);
  double v8 = *((double *)a2 + 167);
  double v173 = 0;
  uint64_t v174 = 0;
  uint64_t v175 = 0;
  BOOL v9 = raven::SolutionChecker::GetListOfEstimatorsToCheckAgainst((uint64_t)this, &v176, (unint64_t *)&v173);
  if (v9)
  {
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v9) <= 1)
    {
      LOWORD(v171[0]) = 12;
      LOBYTE(__p) = 1;
      uint64_t v10 = (*(uint64_t (**)(raven::RavenSolutionEvent *))(*(void *)a2 + 16))(a2);
      double v150 = v11 + (double)v10;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v171, (unsigned __int8 *)&__p, "t,%.3lf,SolutionChecker: Could not find any RavenSolutions to perform the position check against. Exiting with check passed return value.", v12, v13, v14, v15, v16, SLOBYTE(v150));
    }
    uint64_t v17 = 0;
    *a3 = 0;
    double v18 = v173;
  }
  else
  {
    double v18 = v173;
    uint64_t v19 = v174;
    if (v173 == v174) {
      goto LABEL_61;
    }
    double v161 = v6 + v7 + v8;
    uint64_t v20 = v173;
    while (1)
    {
      char v172 = 0;
      char v172 = *v20;
      long long v21 = *((_OWORD *)a2 + 76);
      v171[2] = *((_OWORD *)a2 + 75);
      v171[3] = v21;
      long long v22 = *((_OWORD *)a2 + 78);
      v171[4] = *((_OWORD *)a2 + 77);
      v171[5] = v22;
      long long v23 = *((_OWORD *)a2 + 74);
      v171[0] = *((_OWORD *)a2 + 73);
      v171[1] = v23;
      uint64_t v24 = sub_18DFF465C((void *)(*((void *)this + 2) + 16), (unsigned __int8 *)&v172);
      uint64_t v27 = v24;
      if (!v24) {
        sub_18DEDE720("unordered_map::at: key not found");
      }
      v26.i64[0] = (uint64_t)v24[150];
      *(double *)v25.i64 = *(double *)v26.i64 + (double)(uint64_t)v24[149];
      double v28 = fabs(*(double *)v25.i64);
      BOOL v29 = (unint64_t)(*(void *)&v28 - 0x10000000000000) >> 53 > 0x3FE
         && (unint64_t)(*(void *)&v28 - 1) > 0xFFFFFFFFFFFFELL;
      BOOL v30 = !v29 || COERCE__INT64(*(double *)v26.i64 + (double)(uint64_t)v24[149]) == 0;
      if (!v30 || *(double *)v25.i64 < 0.0) {
        break;
      }
      uint64_t v31 = CNTimeSpan::operator-((uint64_t)v171, v24 + 149, v25, v26);
      *(void *)&v167[0] = v31;
      v167[1] = v32;
      if (v31 < 0 || (*(double *)v33.i64 = v32, v32 < 0.0))
      {
        uint64_t v31 = CNTimeSpan::operator-(v167, v33, v34);
        v33.i64[0] = v35;
      }
      double v36 = *(double *)v33.i64 + (double)v31;
      if (v36 <= *((double *)this + 13))
      {
        if (!*((unsigned char *)v27 + 1288))
        {
          LOWORD(v177[0]) = 12;
          LOBYTE(v166[0]) = 2;
          uint64_t v105 = (*(uint64_t (**)(raven::RavenSolutionEvent *))(*(void *)a2 + 16))(a2);
          double v107 = v106;
          sub_18DEDE7B0(&__p, off_1E55B9A80[v172]);
          double v156 = v107 + (double)v105;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)v177, (unsigned __int8 *)v166, "t,%.3lf,SolutionChecker: est, %u. solution_to_check_against, %s, contains an invalid position. Exiting with check passed return value.", v108, v109, v110, v111, v112, SLOBYTE(v156));
          if (v170 < 0) {
            operator delete(__p);
          }
LABEL_61:
          uint64_t v17 = 0;
          BOOL v104 = 1;
LABEL_62:
          *a3 = v104;
          goto LABEL_63;
        }
        double v37 = *((double *)v27 + 172);
        if (!*((unsigned char *)v27 + 1368) || (*(void *)&v37 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v37 < 0.0)
        {
          if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v31) > 1) {
            goto LABEL_57;
          }
          LOWORD(v177[0]) = 12;
          LOBYTE(v166[0]) = 1;
          uint64_t v96 = (*(uint64_t (**)(raven::RavenSolutionEvent *))(*(void *)a2 + 16))(a2);
          double v98 = v97;
          sub_18DEDE7B0(&__p, off_1E55B9A80[v172]);
          double v155 = v98 + (double)v96;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)v177, (unsigned __int8 *)v166, "t,%.3lf,SolutionChecker: est, %u. solution_to_check_against, %s, has an invalid speed,validity,%d,speed,%.2lf. Cannot proceed with speed check or position check. Marking the RavenSolution as unhealthy. Exiting with check passed return value.", v99, v100, v101, v102, v103, SLOBYTE(v155));
LABEL_55:
          if (v170 < 0) {
            operator delete(__p);
          }
          goto LABEL_57;
        }
        double v38 = *((double *)v27 + 168);
        double v39 = *((double *)v27 + 170);
        if (((unint64_t)v27[165] & 0x7FFFFFFFFFFFFFFFLL) > 0x7FEFFFFFFFFFFFFFLL
          || *((double *)v27 + 165) <= 0.0
          || (*(void *)&v38 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
          || v38 <= 0.0
          || (*(void *)&v39 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
          || v39 <= 0.0)
        {
          LOWORD(v177[0]) = 12;
          LOBYTE(v166[0]) = 4;
          uint64_t v80 = (*(uint64_t (**)(raven::RavenSolutionEvent *))(*(void *)a2 + 16))(a2);
          double v82 = v81;
          sub_18DEDE7B0(&__p, off_1E55B9A80[v172]);
          double v153 = v82 + (double)v80;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)v177, (unsigned __int8 *)v166, "t,%.3lf,SolutionChecker: est, %u. solution_to_check_against, %s, has a non-finite or non-positive user position covariance diagonal term, pxx, %.2lf, pyy, %.2lf, pzz, %.2lf. Marking the RavenSolution as unhealthy. Exiting with check passed return value.", v83, v84, v85, v86, v87, SLOBYTE(v153));
          goto LABEL_55;
        }
        double v164 = *((double *)v27 + 168);
        double v165 = *((double *)v27 + 172);
        double v163 = *((double *)v27 + 170);
        double v40 = *((double *)a2 + 159);
        double v41 = *((double *)v27 + 162);
        double v42 = *((double *)a2 + 160);
        double v43 = *((double *)v27 + 163);
        double v44 = *((double *)a2 + 161);
        double v45 = *((double *)v27 + 164);
        uint64_t v46 = (double *)((char *)this + 48);
        if (v172 != 1)
        {
          uint64_t v46 = (double *)((char *)this + 40);
          if (v172 != 2)
          {
            LOWORD(__p) = 12;
            LOBYTE(v177[0]) = 4;
            uint64_t v113 = (*(uint64_t (**)(raven::RavenSolutionEvent *))(*(void *)a2 + 16))(a2);
            double v157 = v114 + (double)v113;
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)&__p, (unsigned __int8 *)v177, "t,%.3lf,SolutionChecker: invalid estimator to check against during position check, exiting with check passed return value and continuing other checks", v115, v116, v117, v118, v119, SLOBYTE(v157));
            goto LABEL_61;
          }
        }
        double v162 = *((double *)v27 + 165);
        double v47 = *v46;
        LogLevel = (cnprint::CNPrinter *)cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v31);
        double v49 = sqrt((v42 - v43) * (v42 - v43) + (v40 - v41) * (v40 - v41) + (v44 - v45) * (v44 - v45));
        if (!LogLevel)
        {
          LOWORD(v177[0]) = 12;
          LOBYTE(v166[0]) = 0;
          uint64_t v50 = (*(uint64_t (**)(raven::RavenSolutionEvent *))(*(void *)a2 + 16))(a2);
          double v52 = v51;
          sub_18DEDE7B0(&__p, off_1E55B9A80[v172]);
          double v151 = v52 + (double)v50;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)v177, (unsigned __int8 *)v166, "t,%.3lf,SolutionChecker: est, %u. solution_to_check_against, %s,position_difference_from_solution_to_check_against: %.2lf, position_difference_from_solution_to_check_against_tolerance_: %.2lf,position_tolerance_accounting_for_time_difference_and_speed: %.2lf, speed_of_solution_to_check_against: %.2lf,time_difference_from_solution_to_check_against: %.2lf", v53, v54, v55, v56, v57, SLOBYTE(v151));
          if (v170 < 0) {
            operator delete(__p);
          }
        }
        uint64_t v58 = cnprint::CNPrinter::GetLogLevel(LogLevel);
        *(double *)v60.i64 = v163;
        double v61 = v49 / sqrt(v161 + v162 + v164 + v163);
        if (!v58)
        {
          LOWORD(v177[0]) = 12;
          LOBYTE(v166[0]) = 0;
          uint64_t v62 = (*(uint64_t (**)(raven::RavenSolutionEvent *))(*(void *)a2 + 16))(a2);
          double v64 = v63;
          sub_18DEDE7B0(&__p, off_1E55B9A80[v172]);
          double v152 = v64 + (double)v62;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)v177, (unsigned __int8 *)v166, "t,%.3lf,SolutionChecker: est, %u. solution_to_check_against, %s, Position difference, %.2lf,Position difference uncertainty, %.2lf, consistency, %.2lf, position_variance_of_solution_to_check_against, %.2f,position_variance_of_solution_under_test, %.2f", v65, v66, v67, v68, v69, SLOBYTE(v152));
          if (v170 < 0) {
            operator delete(__p);
          }
        }
        if (v49 > v47 + v165 * v36)
        {
          v59.i64[0] = *((void *)this + 7);
          if (v61 > *(double *)v59.i64)
          {
            uint64_t v121 = *((void *)this + 2);
            if (*(unsigned char *)(v121 + 1520))
            {
              uint64_t v58 = CNTimeSpan::operator-((uint64_t)a2 + 8, (void *)(v121 + 1528), v59, v60);
              long long __p = (void *)v58;
              double v169 = v122;
              if (v58 < 0 || (*(double *)v123.i64 = v122, v122 < 0.0))
              {
                uint64_t v58 = CNTimeSpan::operator-((double *)&__p, v123, v124);
                v123.i64[0] = v125;
              }
              if (*(double *)v123.i64 + (double)v58 < 10.0)
              {
                if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v58) > 1) {
                  goto LABEL_57;
                }
                LOWORD(v177[0]) = 12;
                LOBYTE(v166[0]) = 1;
                uint64_t v126 = (*(uint64_t (**)(raven::RavenSolutionEvent *))(*(void *)a2 + 16))(a2);
                double v128 = v127;
                sub_18E0FB470(&v172, &__p);
                double v158 = v128 + (double)v126;
                cnprint::CNPrinter::Print((cnprint::CNPrinter *)v177, (unsigned __int8 *)v166, "t,%.3lf,SolutionChecker: est, %u. solution_to_check_against, %s,position_difference_from_solution_to_check_against check failed after recently exiting tunnel, difference, %.2lf, tolerance, %.2lf, consistency, %.2lf, threshold, %.2lf, solution_to_check_against_position_unc, %.2f, sol_position_unc, %.2f. Marking the RavenSolution as unhealthy. Exiting with check passed return value.", v129, v130, v131, v132, v133, SLOBYTE(v158));
                goto LABEL_55;
              }
            }
            if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v58) <= 1)
            {
              LOWORD(v177[0]) = 12;
              LOBYTE(v166[0]) = 1;
              uint64_t v134 = (*(uint64_t (**)(raven::RavenSolutionEvent *))(*(void *)a2 + 16))(a2);
              double v136 = v135;
              sub_18E0FB470(&v172, &__p);
              double v159 = v136 + (double)v134;
              cnprint::CNPrinter::Print((cnprint::CNPrinter *)v177, (unsigned __int8 *)v166, "t,%.3lf,SolutionChecker: est, %u. solution_to_check_against, %s,position_difference_from_solution_to_check_against check failed, difference, %.2lf, tolerance, %.2lf,consistency, %.2lf, threshold, %.2lf, solution_to_check_against_position_unc, %.2f, sol_position_unc, %.2f.Exiting with check failed return value.", v137, v138, v139, v140, v141, SLOBYTE(v159));
              if (v170 < 0) {
                operator delete(__p);
              }
            }
            BOOL v104 = 0;
            uint64_t v17 = 0xFFFFFFFFLL;
            goto LABEL_62;
          }
          if (v172 == 1)
          {
            uint64_t v70 = *((void *)this + 2);
            v166[0] = (*(uint64_t (**)(raven::RavenSolutionEvent *))(*(void *)a2 + 16))(a2);
            v166[1] = v71;
            if (*(unsigned __int8 *)(v70 + 656) | *(unsigned __int8 *)(v70 + 658))
            {
              v177[0] = (*(uint64_t (**)(void))(*(void *)(v70 + 432) + 16))();
              v177[1] = v72;
              uint64_t v75 = CNTimeSpan::operator-((uint64_t)v166, v177, v73, v74);
              long long __p = (void *)v75;
              double v169 = v76;
              if (v75 < 0 || (*(double *)v77.i64 = v76, v76 < 0.0))
              {
                uint64_t v75 = CNTimeSpan::operator-((double *)&__p, v77, v78);
                v77.i64[0] = v79;
              }
              if (*(double *)v77.i64 + (double)v75 < 5.0)
              {
                if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v75) <= 1)
                {
                  LOWORD(v177[0]) = 12;
                  LOBYTE(v166[0]) = 1;
                  uint64_t v142 = (*(uint64_t (**)(raven::RavenSolutionEvent *))(*(void *)a2 + 16))(a2);
                  double v144 = v143;
                  sub_18E0FB470(&v172, &__p);
                  double v160 = v144 + (double)v142;
                  cnprint::CNPrinter::Print((cnprint::CNPrinter *)v177, (unsigned __int8 *)v166, "t,%.3lf,SolutionChecker: est, %u. solution_to_check_against, %s,position_difference_from_solution_under_check check failed while in tunnel, difference, %.2lf, tolerance, %.2lf,consistency, %.2lf, threshold, %.2lf, solution_to_check_against_position_unc, %.2f, sol_position_unc, %.2f.Marking the RavenSolution as unhealthy. Exiting with check passed return value.", v145, v146, v147, v148, v149, SLOBYTE(v160));
                  goto LABEL_55;
                }
LABEL_57:
                BOOL v104 = 0;
                uint64_t v17 = 0;
                *((unsigned char *)a2 + 209) = 1;
                goto LABEL_62;
              }
            }
          }
        }
      }
      if (++v20 == v19) {
        goto LABEL_61;
      }
    }
    LOWORD(v177[0]) = 12;
    LOBYTE(v167[0]) = 4;
    uint64_t v88 = (*(uint64_t (**)(raven::RavenSolutionEvent *))(*(void *)a2 + 16))(a2);
    double v90 = v89;
    sub_18DEDE7B0(&__p, off_1E55B9A80[v172]);
    double v154 = v90 + (double)v88;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v177, (unsigned __int8 *)v167, "t,%.3lf,SolutionChecker: est, %u. solution_to_check_against, %s, solution time is invalid, time, %.3lf. Marking the RavenSolution as unhealthy. Exiting with check passed return value.", v91, v92, v93, v94, v95, SLOBYTE(v154));
    if (v170 < 0) {
      operator delete(__p);
    }
    uint64_t v17 = 0;
    *((unsigned char *)a2 + 209) = 1;
    *a3 = 0;
  }
LABEL_63:
  if (v18) {
    operator delete(v18);
  }
  return v17;
}

void sub_18E0F9F94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a35 < 0) {
    operator delete(__p);
  }
  double v37 = *(void **)(v35 - 200);
  if (v37) {
    operator delete(v37);
  }
  _Unwind_Resume(exception_object);
}

uint64_t raven::SolutionChecker::PerformSpeedCheck(raven::SolutionChecker *this, raven::RavenSolutionEvent *a2, BOOL *a3)
{
  v125[0] = *((unsigned char *)a2 + 208);
  if (!*((unsigned char *)a2 + 1344))
  {
    if (cnprint::CNPrinter::GetLogLevel(this) <= 1)
    {
      LOWORD(v122) = 12;
      LOBYTE(v119[0]) = 1;
      uint64_t v16 = (*(uint64_t (**)(raven::RavenSolutionEvent *))(*(void *)a2 + 16))(a2);
      double v112 = v17 + (double)v16;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v122, (unsigned __int8 *)v119, "t,%.3lf,SolutionChecker: est, %u. RavenSolution under test has speed marked invalid. Exiting with check passed return value. Continuing with remaining checks.", v18, v19, v20, v21, v22, SLOBYTE(v112));
    }
    uint64_t v14 = 0;
    *a3 = 1;
    return v14;
  }
  double v122 = 0;
  int8x16_t v123 = 0;
  uint64_t v124 = 0;
  BOOL v6 = raven::SolutionChecker::GetListOfEstimatorsToCheckAgainst((uint64_t)this, v125, (unint64_t *)&v122);
  if (v6)
  {
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v6) <= 1)
    {
      LOWORD(v119[0]) = 12;
      unsigned __int8 v121 = 1;
      uint64_t v7 = (*(uint64_t (**)(raven::RavenSolutionEvent *))(*(void *)a2 + 16))(a2);
      double v111 = v8 + (double)v7;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v119, &v121, "t,%.3lf,SolutionChecker: Could not find any RavenSolutions to perform the speed check against. Exiting with check passed return value.", v9, v10, v11, v12, v13, SLOBYTE(v111));
    }
    uint64_t v14 = 0;
    *a3 = 0;
    uint64_t v15 = v122;
    if (v122) {
      goto LABEL_60;
    }
    return v14;
  }
  long long v23 = v123;
  long long __p = v122;
  if (v122 == v123)
  {
LABEL_51:
    uint64_t v14 = 0;
    uint64_t v15 = __p;
    *a3 = 1;
    if (__p) {
      goto LABEL_60;
    }
    return v14;
  }
  uint64_t v24 = v122;
  while (1)
  {
    unsigned __int8 v121 = 0;
    unsigned __int8 v121 = *(unsigned char *)v24;
    int8x16_t v25 = sub_18DFF465C((void *)(*((void *)this + 2) + 16), &v121);
    if (!v25) {
      sub_18DEDE720("unordered_map::at: key not found");
    }
    double v26 = *((double *)v25 + 172);
    if (*((unsigned char *)v25 + 1368)) {
      BOOL v27 = ((unint64_t)v25[172] & 0x7FFFFFFFFFFFFFFFLL) <= 0x7FEFFFFFFFFFFFFFLL;
    }
    else {
      BOOL v27 = 0;
    }
    if (!v27 || v26 < 0.0)
    {
      if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v25) <= 1)
      {
        LOWORD(v119[0]) = 12;
        unsigned __int8 v120 = 1;
        uint64_t v53 = (*(uint64_t (**)(raven::RavenSolutionEvent *))(*(void *)a2 + 16))(a2);
        double v113 = v54 + (double)v53;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v119, &v120, "t,%.3lf,SolutionChecker: est, %u. solution_to_check_against has an invalid speed,validity,%d,speed,%.2lf. Cannot proceed with speed check. Marking the RavenSolution as unhealthy. Exiting with check passed return value.", v55, v56, v57, v58, v59, SLOBYTE(v113));
      }
      goto LABEL_55;
    }
    double v28 = *((double *)v25 + 176);
    if ((*(uint64_t *)&v28 <= -1 || ((*(void *)&v28 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF)
      && (unint64_t)(*(void *)&v28 - 1) >= 0xFFFFFFFFFFFFFLL)
    {
      LOWORD(v119[0]) = 12;
      unsigned __int8 v120 = 4;
      uint64_t v61 = (*(uint64_t (**)(raven::RavenSolutionEvent *))(*(void *)a2 + 16))(a2);
      double v114 = v62 + (double)v61;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v119, &v120, "t,%.3lf,SolutionChecker: est, %u. solution_to_check_against has a non-finite or non-positive user speed covariance diagonal term, pss, %.2lf. Marking the RavenSolution as unhealthy. Exiting with check passed return value.", v63, v64, v65, v66, v67, SLOBYTE(v114));
      BOOL v60 = 0;
      uint64_t v14 = 0;
      *((unsigned char *)a2 + 209) = 1;
      goto LABEL_59;
    }
    double v31 = *((double *)a2 + 173);
    if ((*(uint64_t *)&v31 <= -1 || ((*(void *)&v31 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF)
      && (unint64_t)(*(void *)&v31 - 1) >= 0xFFFFFFFFFFFFFLL)
    {
      LOWORD(v119[0]) = 12;
      unsigned __int8 v120 = 4;
      uint64_t v68 = (*(uint64_t (**)(raven::RavenSolutionEvent *))(*(void *)a2 + 16))(a2);
      double v115 = v69 + (double)v68;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v119, &v120, "t,%.3lf,SolutionChecker: est, %u. RavenSolution under test has a non-finite or non-positive user speed covariance diagonal term, pss, %.2lf. Exiting with check failed return value.", v70, v71, v72, v73, v74, SLOBYTE(v115));
      goto LABEL_58;
    }
    double v34 = *((double *)a2 + 169);
    if ((*(uint64_t *)&v34 <= -1 || ((*(void *)&v34 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF)
      && (unint64_t)(*(void *)&v34 - 1) >= 0xFFFFFFFFFFFFFLL
      && (*(void *)&v34 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    {
      LOWORD(v119[0]) = 12;
      unsigned __int8 v120 = 4;
      uint64_t v75 = (*(uint64_t (**)(raven::RavenSolutionEvent *))(*(void *)a2 + 16))(a2);
      double v116 = v76 + (double)v75;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v119, &v120, "t,%.3lf,SolutionChecker: est, %u. RavenSolution under test has an invalid speed value despite being marked as valid,%.2lf. Exiting with check failed return value.", v77, v78, v79, v80, v81, SLOBYTE(v116));
LABEL_58:
      BOOL v60 = 0;
      uint64_t v14 = 0xFFFFFFFFLL;
      goto LABEL_59;
    }
    double v38 = (double *)((char *)this + 88);
    if (v121 != 1)
    {
      double v38 = (double *)((char *)this + 80);
      if (v121 != 2)
      {
        LOWORD(v119[0]) = 12;
        unsigned __int8 v120 = 4;
        uint64_t v83 = (*(uint64_t (**)(raven::RavenSolutionEvent *))(*(void *)a2 + 16))(a2);
        double v117 = v84 + (double)v83;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v119, &v120, "t,%.3lf,SolutionChecker: invalid estimator to check against during speed check, exiting with check passed return value and continuing other checks", v85, v86, v87, v88, v89, SLOBYTE(v117));
        uint64_t v14 = 0;
        BOOL v60 = 1;
        goto LABEL_59;
      }
    }
    double v39 = *v38;
    uint64_t LogLevel = cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v25);
    double v43 = vabdd_f64(v26, v34);
    double v44 = v43 / sqrt(v28 + v31);
    if (!LogLevel)
    {
      LOWORD(v119[0]) = 12;
      unsigned __int8 v120 = 0;
      uint64_t v45 = (*(uint64_t (**)(raven::RavenSolutionEvent *))(*(void *)a2 + 16))(a2);
      double v47 = v46 + (double)v45;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v119, &v120, "t,%.3lf,SolutionChecker: est, %u. speed_difference_from_solution_to_check_against check results, difference, %.2lf, tolerance, %.2lf, consistency, %.2lf, threshold, %.2lf, solution_to_check_against_var, %.2lf, sol_var, %.2lf.", v48, v49, v50, v51, v52, SLOBYTE(v47));
    }
    if (v43 > v39)
    {
      v41.i64[0] = *((void *)this + 8);
      if (v44 > *(double *)v41.i64) {
        break;
      }
    }
    uint64_t v24 = (cnprint::CNPrinter *)((char *)v24 + 1);
    if (v24 == v23) {
      goto LABEL_51;
    }
  }
  uint64_t v90 = *((void *)this + 2);
  if (*(unsigned char *)(v90 + 1520))
  {
    uint64_t LogLevel = CNTimeSpan::operator-((uint64_t)a2 + 8, (void *)(v90 + 1528), v41, v42);
    *(void *)&v119[0] = LogLevel;
    v119[1] = v91;
    if (LogLevel < 0 || (*(double *)v92.i64 = v91, v91 < 0.0))
    {
      uint64_t LogLevel = CNTimeSpan::operator-(v119, v92, v93);
      v92.i64[0] = v94;
    }
    if (*(double *)v92.i64 + (double)LogLevel < 10.0)
    {
      if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)LogLevel) <= 1)
      {
        LOWORD(v119[0]) = 12;
        unsigned __int8 v120 = 1;
        uint64_t v95 = (*(uint64_t (**)(raven::RavenSolutionEvent *))(*(void *)a2 + 16))(a2);
        double v97 = v96 + (double)v95;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v119, &v120, "t,%.3lf,SolutionChecker: est, %u. speed_difference_from_solution_to_check_against check failed after recently exiting tunnel, difference, %.2lf,tolerance, %.2lf, consistency, %.2lf, threshold, %.2lf, solution_to_check_against_user_speed_unc, %.2lf, sol_user_speed_unc, %.2lf. Marking the RavenSolution as unhealthy. Exiting with check passed return value.", v98, v99, v100, v101, v102, SLOBYTE(v97));
      }
LABEL_55:
      BOOL v60 = 0;
      uint64_t v14 = 0;
      *((unsigned char *)a2 + 209) = 1;
      goto LABEL_59;
    }
  }
  if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)LogLevel) <= 1)
  {
    LOWORD(v119[0]) = 12;
    unsigned __int8 v120 = 1;
    uint64_t v103 = (*(uint64_t (**)(raven::RavenSolutionEvent *))(*(void *)a2 + 16))(a2);
    double v105 = v104 + (double)v103;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v119, &v120, "t,%.3lf,SolutionChecker: est, %u. speed_difference_from_solution_to_check_against check failed, difference, %.2lf, tolerance, %.2lf, consistency, %.2lf, threshold, %.2lf, user_speed_uncertainty_of_solution_to_check_against, %.2lf, sol_user_speed_unc, %.2lf. Exiting with check failed return value.", v106, v107, v108, v109, v110, SLOBYTE(v105));
  }
  BOOL v60 = 0;
  uint64_t v14 = 0xFFFFFFFFLL;
LABEL_59:
  uint64_t v15 = __p;
  *a3 = v60;
  if (__p) {
LABEL_60:
  }
    operator delete(v15);
  return v14;
}

void sub_18E0FA784(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t raven::SolutionChecker::PerformDirectionOfTravelCheck(raven::SolutionChecker *this, raven::RavenSolutionEvent *a2, BOOL *a3)
{
  v168[0] = *((unsigned char *)a2 + 208);
  if (!*((unsigned char *)a2 + 1345))
  {
    if (cnprint::CNPrinter::GetLogLevel(this) <= 1)
    {
      LOWORD(v165) = 12;
      LOBYTE(v162[0]) = 1;
      uint64_t v16 = (*(uint64_t (**)(raven::RavenSolutionEvent *))(*(void *)a2 + 16))(a2);
      double v148 = v17 + (double)v16;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v165, (unsigned __int8 *)v162, "t,%.3lf,SolutionChecker: est, %u. RavenSolution under test DOT invalid. Cannot perform direction of travel check.", v18, v19, v20, v21, v22, SLOBYTE(v148));
    }
    uint64_t v14 = 0;
    *a3 = 1;
    return v14;
  }
  double v165 = 0;
  long long v166 = 0;
  uint64_t v167 = 0;
  BOOL v6 = raven::SolutionChecker::GetListOfEstimatorsToCheckAgainst((uint64_t)this, v168, (unint64_t *)&v165);
  if (v6)
  {
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v6) <= 1)
    {
      LOWORD(v162[0]) = 12;
      unsigned __int8 v164 = 1;
      uint64_t v7 = (*(uint64_t (**)(raven::RavenSolutionEvent *))(*(void *)a2 + 16))(a2);
      double v147 = v8 + (double)v7;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v162, &v164, "t,%.3lf,SolutionChecker: Could not find any RavenSolutions to perform the direction of travel check against. Exiting with check passed return value.", v9, v10, v11, v12, v13, SLOBYTE(v147));
    }
    uint64_t v14 = 0;
    *a3 = 0;
    uint64_t v15 = v165;
    if (!v165) {
      return v14;
    }
LABEL_71:
    operator delete(v15);
    return v14;
  }
  uint64_t v15 = v165;
  long long v23 = v166;
  if (v165 == v166)
  {
LABEL_70:
    uint64_t v14 = 0;
    *a3 = 1;
    if (!v15) {
      return v14;
    }
    goto LABEL_71;
  }
  uint64_t v24 = v165;
  while (1)
  {
    unsigned __int8 v164 = 0;
    unsigned __int8 v164 = *v24;
    uint64_t LogLevel = sub_18DFF465C((void *)(*((void *)this + 2) + 16), &v164);
    if (!LogLevel) {
      sub_18DEDE720("unordered_map::at: key not found");
    }
    if (!*((unsigned char *)LogLevel + 1369))
    {
      if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)LogLevel) <= 1)
      {
        LOWORD(v162[0]) = 12;
        unsigned __int8 v163 = 1;
        uint64_t v97 = (*(uint64_t (**)(raven::RavenSolutionEvent *))(*(void *)a2 + 16))(a2);
        double v152 = v98 + (double)v97;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v162, &v163, "t,%.3lf,SolutionChecker: est, %u. Solution to check against has DOT invalid. Cannot perform direction of travel check.", v99, v100, v101, v102, v103, SLOBYTE(v152));
      }
      goto LABEL_70;
    }
    double v26 = *((double *)LogLevel + 173);
    double v27 = *((double *)LogLevel + 174);
    double v28 = *((double *)LogLevel + 175);
    if ((*(void *)&v26 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || ((unint64_t)LogLevel[174] & 0x7FFFFFFFFFFFFFFFLL) > 0x7FEFFFFFFFFFFFFFLL
      || (*(void *)&v28 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
      LOWORD(v162[0]) = 12;
      unsigned __int8 v163 = 4;
      uint64_t v76 = (*(uint64_t (**)(raven::RavenSolutionEvent *))(*(void *)a2 + 16))(a2);
      double v149 = v77 + (double)v76;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v162, &v163, "t,%.3lf,SolutionChecker: est, %u. solution_to_check_against direction of travel element is non-finite, %.2lf, %.2lf, %.2lf. Marking the RavenSolution as unhealthy. Exiting with check passed return value.", v78, v79, v80, v81, v82, SLOBYTE(v149));
      goto LABEL_63;
    }
    double v31 = *((double *)LogLevel + 180);
    double v32 = *((double *)LogLevel + 183);
    double v33 = *((double *)LogLevel + 185);
    if ((*(void *)&v31 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || (v31 > 0.0 ? (BOOL v34 = (*(void *)&v32 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL) : (BOOL v34 = 0),
          !v34
       || (v32 > 0.0 ? (BOOL v35 = (*(void *)&v33 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL) : (BOOL v35 = 0),
           !v35 || v33 <= 0.0)))
    {
      LOWORD(v162[0]) = 12;
      unsigned __int8 v163 = 4;
      uint64_t v83 = (*(uint64_t (**)(raven::RavenSolutionEvent *))(*(void *)a2 + 16))(a2);
      double v150 = v84 + (double)v83;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v162, &v163, "t,%.3lf,SolutionChecker: est, %u. solution_to_check_against has a non-finite or non-positive user DOT covariance diagonal term, pevxevx, %.2lf, pevyevy, %.2lf, pevzpevz, %.2lf. Marking the RavenSolution as unhealthy. Exiting with check passed return value.", v85, v86, v87, v88, v89, SLOBYTE(v150));
      goto LABEL_63;
    }
    double v36 = sqrt(v27 * v27 + v26 * v26 + v28 * v28);
    if (fabs(v36) <= 0.000000015)
    {
      LOWORD(v162[0]) = 12;
      unsigned __int8 v163 = 4;
      uint64_t v104 = (*(uint64_t (**)(raven::RavenSolutionEvent *))(*(void *)a2 + 16))(a2);
      double v153 = v105 + (double)v104;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v162, &v163, "t,%.3lf,SolutionChecker: est, %u. solution_to_check_against direction of travel vector is equal to zero, %.2lf. Marking the RavenSolution as unhealthy. Exiting with check passed return value.", v106, v107, v108, v109, v110, SLOBYTE(v153));
LABEL_63:
      uint64_t v14 = 0;
      *((unsigned char *)a2 + 209) = 1;
      *a3 = 0;
      if (v15) {
        goto LABEL_71;
      }
      return v14;
    }
    if (fabs(v36 + -1.0) > 0.000000015)
    {
      uint64_t LogLevel = (uint64_t **)cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)LogLevel);
      if (LogLevel <= 1)
      {
        LOWORD(v162[0]) = 12;
        unsigned __int8 v163 = 1;
        uint64_t v37 = (*(uint64_t (**)(raven::RavenSolutionEvent *))(*(void *)a2 + 16))(a2);
        double v39 = v38 + (double)v37;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v162, &v163, "WARNING: t,%.3lf,SolutionChecker: est, %u. solution_to_check_against direction of travel vector is not of unit length, %.2lf. Will proceed normally, but this is unexpected.", v40, v41, v42, v43, v44, SLOBYTE(v39));
      }
    }
    double v159 = v33;
    double v160 = v32;
    double v161 = v31;
    double v45 = *((double *)a2 + 170);
    double v46 = *((double *)a2 + 171);
    double v47 = *((double *)a2 + 172);
    if ((*(void *)&v45 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || (*(void *)&v46 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || (*(void *)&v47 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
      LOWORD(v162[0]) = 12;
      unsigned __int8 v163 = 4;
      uint64_t v90 = (*(uint64_t (**)(raven::RavenSolutionEvent *))(*(void *)a2 + 16))(a2);
      double v151 = v91 + (double)v90;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v162, &v163, "t,%.3lf,SolutionChecker: est, %u. RavenSolution under test direction of travel element is non-finite, %.2lf, %.2lf, %.2lf. Exiting with check failed return value.", v92, v93, v94, v95, v96, SLOBYTE(v151));
LABEL_66:
      *a3 = 0;
      goto LABEL_67;
    }
    double v48 = sqrt(v46 * v46 + v45 * v45 + v47 * v47);
    if (fabs(v48) <= 0.000000015)
    {
      LOWORD(v162[0]) = 12;
      unsigned __int8 v163 = 4;
      uint64_t v111 = (*(uint64_t (**)(raven::RavenSolutionEvent *))(*(void *)a2 + 16))(a2);
      double v154 = v112 + (double)v111;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v162, &v163, "t,%.3lf,SolutionChecker: est, %u. RavenSolution under test direction of travel vector is equal to zero, %.2lf. Exiting with check failed return value.", v113, v114, v115, v116, v117, SLOBYTE(v154));
      goto LABEL_66;
    }
    double v157 = *((double *)a2 + 180);
    double v158 = *((double *)a2 + 177);
    double v156 = *((double *)a2 + 182);
    if (fabs(v48 + -1.0) > 0.000000015
      && cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)LogLevel) <= 1)
    {
      LOWORD(v162[0]) = 12;
      unsigned __int8 v163 = 1;
      uint64_t v49 = (*(uint64_t (**)(raven::RavenSolutionEvent *))(*(void *)a2 + 16))(a2);
      double v51 = v50 + (double)v49;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v162, &v163, "t,%.3lf,SolutionChecker: est, %u. RavenSolution under test direction of travel vector is not of unit length, %.2lf. Will proceed normally, but this is unexpected.", v52, v53, v54, v55, v56, SLOBYTE(v51));
    }
    double v57 = (v27 * v46 + v26 * v45 + v28 * v47) / (v36 * v48);
    double v58 = -1.0;
    if (v57 >= -1.0) {
      double v58 = (v27 * v46 + v26 * v45 + v28 * v47) / (v36 * v48);
    }
    if (v57 <= 1.0) {
      double v59 = v58;
    }
    else {
      double v59 = 1.0;
    }
    double v60 = acos(v59);
    uint64_t v62 = cnprint::CNPrinter::GetLogLevel(v61);
    *(double *)v64.i64 = v48 * v48;
    double v65 = v60 * 57.2957795;
    double v66 = v65 / sqrt((v161 + v160 + v159) / (v36 * v36) * 3282.80635 + (v158 + v157 + v156) / (v48 * v48) * 3282.80635);
    if (!v62)
    {
      LOWORD(v162[0]) = 12;
      unsigned __int8 v163 = 0;
      uint64_t v67 = (*(uint64_t (**)(raven::RavenSolutionEvent *))(*(void *)a2 + 16))(a2);
      double v69 = v68 + (double)v67;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v162, &v163, "t,%.3lf,SolutionChecker: est, %u. direction_of_travel_difference check results, difference, %.2lf, difference uncertainty, %.2lf, consistency, %.2lf, threshold, %.2lf, dot_angle_variance_of_solution_to_check_against, %.2lf,dot_angle_variance_of_solution_under_test, %.2lf. Exiting with check failed return value.", v70, v71, v72, v73, v74, SLOBYTE(v69));
    }
    uint64_t v75 = (double *)((char *)this + 32);
    if (v164 != 1)
    {
      uint64_t v75 = (double *)((char *)this + 24);
      if (v164 != 2)
      {
        LOWORD(v162[0]) = 12;
        unsigned __int8 v163 = 4;
        uint64_t v118 = (*(uint64_t (**)(raven::RavenSolutionEvent *))(*(void *)a2 + 16))(a2);
        double v155 = v119 + (double)v118;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v162, &v163, "t,%.3lf,SolutionChecker: invalid estimator to check against during direction of travel check, exiting with check passed return value and continuing other checks", v120, v121, v122, v123, v124, SLOBYTE(v155));
        goto LABEL_70;
      }
    }
    if (v65 > *v75)
    {
      v63.i64[0] = *((void *)this + 9);
      if (v66 > *(double *)v63.i64) {
        break;
      }
    }
    if (++v24 == v23) {
      goto LABEL_70;
    }
  }
  uint64_t v126 = *((void *)this + 2);
  if (!*(unsigned char *)(v126 + 1520)) {
    goto LABEL_82;
  }
  uint64_t v62 = CNTimeSpan::operator-((uint64_t)a2 + 8, (void *)(v126 + 1528), v63, v64);
  *(void *)&v162[0] = v62;
  v162[1] = v127;
  if (v62 < 0 || (*(double *)v128.i64 = v127, v127 < 0.0))
  {
    uint64_t v62 = CNTimeSpan::operator-(v162, v128, v129);
    v128.i64[0] = v130;
  }
  if (*(double *)v128.i64 + (double)v62 >= 10.0)
  {
LABEL_82:
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v62) <= 1)
    {
      LOWORD(v162[0]) = 12;
      unsigned __int8 v163 = 1;
      uint64_t v139 = (*(uint64_t (**)(raven::RavenSolutionEvent *))(*(void *)a2 + 16))(a2);
      double v141 = v140 + (double)v139;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v162, &v163, "t,%.3lf,SolutionChecker: est, %u. direction_of_travel_difference check failed, difference, %.2lf, difference uncertainty, %.2lf, consistency, %.2lf, threshold, %.2lf, solution_to_check_against_dot_angle_unc, %.2lf, sol_dot_angle_unc, %.2lf. Exiting with check failed return value.", v142, v143, v144, v145, v146, SLOBYTE(v141));
    }
LABEL_67:
    uint64_t v14 = 0xFFFFFFFFLL;
    if (v15) {
      goto LABEL_71;
    }
    return v14;
  }
  if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v62) <= 1)
  {
    LOWORD(v162[0]) = 12;
    unsigned __int8 v163 = 1;
    uint64_t v131 = (*(uint64_t (**)(raven::RavenSolutionEvent *))(*(void *)a2 + 16))(a2);
    double v133 = v132 + (double)v131;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v162, &v163, "t,%.3lf,SolutionChecker: est, %u. direction_of_travel_difference check failed after recently exiting tunnel,difference, %.2lf, difference uncertainty, %.2lf, consistency, %.2lf, threshold, %.2lf, solution_to_check_against_dot_angle_unc, %.2lf,sol_dot_angle_unc, %.2lf. Marking the RavenSolution as unhealthy. Exiting with check passed return value.", v134, v135, v136, v137, v138, SLOBYTE(v133));
  }
  uint64_t v14 = 0;
  *((unsigned char *)a2 + 209) = 1;
  if (v15) {
    goto LABEL_71;
  }
  return v14;
}

void sub_18E0FB1F0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)(v1 - 184);
  if (v3) {
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

BOOL raven::SolutionChecker::GetListOfEstimatorsToCheckAgainst(uint64_t a1, unsigned char *a2, unint64_t *a3)
{
  if (*a2 != 1)
  {
    BOOL v6 = (void *)(*(void *)(a1 + 16) + 16);
    unsigned __int8 v34 = 1;
    if (sub_18DFF465C(v6, &v34))
    {
      double v8 = (unsigned char *)a3[1];
      unint64_t v7 = a3[2];
      if ((unint64_t)v8 >= v7)
      {
        unint64_t v10 = *a3;
        uint64_t v11 = &v8[-*a3];
        unint64_t v12 = (unint64_t)(v11 + 1);
        if ((uint64_t)(v11 + 1) < 0) {
          goto LABEL_44;
        }
        unint64_t v13 = v7 - v10;
        if (2 * v13 > v12) {
          unint64_t v12 = 2 * v13;
        }
        if (v13 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v14 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v14 = v12;
        }
        if (v14) {
          unint64_t v15 = (unint64_t)operator new(v14);
        }
        else {
          unint64_t v15 = 0;
        }
        uint64_t v16 = (char *)(v15 + v14);
        v11[v15] = 1;
        uint64_t v9 = (uint64_t)&v11[v15 + 1];
        if (v8 == (unsigned char *)v10)
        {
          v15 += (unint64_t)v11;
        }
        else
        {
          double v17 = &v8[~v10];
          do
          {
            char v18 = *--v8;
            (v17--)[v15] = v18;
          }
          while (v8 != (unsigned char *)v10);
        }
        *a3 = v15;
        a3[1] = v9;
        a3[2] = (unint64_t)v16;
        if (v10) {
          operator delete((void *)v10);
        }
      }
      else
      {
        *double v8 = 1;
        uint64_t v9 = (uint64_t)(v8 + 1);
      }
      a3[1] = v9;
    }
    if (*a2 == 3)
    {
      uint64_t v19 = (void *)(*(void *)(a1 + 16) + 16);
      unsigned __int8 v33 = 2;
      if (sub_18DFF465C(v19, &v33))
      {
        uint64_t v21 = (unsigned char *)a3[1];
        unint64_t v20 = a3[2];
        if ((unint64_t)v21 < v20)
        {
          *uint64_t v21 = 2;
          uint64_t v22 = (uint64_t)(v21 + 1);
LABEL_42:
          a3[1] = v22;
          return *a3 == a3[1];
        }
        unint64_t v23 = *a3;
        uint64_t v24 = &v21[-*a3];
        unint64_t v25 = (unint64_t)(v24 + 1);
        if ((uint64_t)(v24 + 1) >= 0)
        {
          unint64_t v26 = v20 - v23;
          if (2 * v26 > v25) {
            unint64_t v25 = 2 * v26;
          }
          if (v26 >= 0x3FFFFFFFFFFFFFFFLL) {
            size_t v27 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            size_t v27 = v25;
          }
          if (v27) {
            unint64_t v28 = (unint64_t)operator new(v27);
          }
          else {
            unint64_t v28 = 0;
          }
          BOOL v29 = (char *)(v28 + v27);
          v24[v28] = 2;
          uint64_t v22 = (uint64_t)&v24[v28 + 1];
          if (v21 == (unsigned char *)v23)
          {
            v28 += (unint64_t)v24;
          }
          else
          {
            BOOL v30 = &v21[~v23];
            do
            {
              char v31 = *--v21;
              (v30--)[v28] = v31;
            }
            while (v21 != (unsigned char *)v23);
          }
          *a3 = v28;
          a3[1] = v22;
          a3[2] = (unint64_t)v29;
          if (v23) {
            operator delete((void *)v23);
          }
          goto LABEL_42;
        }
LABEL_44:
        sub_18DEE1FC8();
      }
    }
  }
  return *a3 == a3[1];
}

void *sub_18E0FB470@<X0>(char *a1@<X0>, void *a2@<X8>)
{
  return sub_18DEDE7B0(a2, off_1E55B9A80[*a1]);
}

void sub_18E0FB48C()
{
}

void raven::RavenConvergenceEstimator::RavenConvergenceEstimator(raven::RavenConvergenceEstimator *this)
{
  uint64_t v2 = (char *)this + 4176;
  raven::RavenEstimator::RavenEstimator((uint64_t)this, 2);
  *(void *)uint64_t v3 = &unk_1EDD14798;
  *(void *)(v3 + 2536) = 0x100000000;
  *(_DWORD *)(v3 + 2544) = 0x7FFFFFFF;
  *(void *)(v3 + 2552) = 0x3E45798EE2308C3ALL;
  *(void *)(v3 + 2560) = 0x3E45798EE2308C3ALL;
  *(_WORD *)(v3 + 2568) = 0;
  *(void *)(v3 + 2576) = 0x3FEE666666666666;
  *(void *)(v3 + 2592) = 0;
  *(void *)(v3 + 2584) = 0;
  *(void *)(v3 + 2600) = 0x4197D78400000000;
  *(void *)(v3 + 2616) = 0;
  *(void *)(v3 + 2608) = 0;
  *(_WORD *)(v3 + 2624) = 1;
  *(void *)(v3 + 2632) = 0;
  *(void *)(v3 + 2672) = 0x100000008;
  *(void *)(v3 + 2648) = &unk_1EDD19CC8;
  *(void *)(v3 + 2680) = v3 + 2688;
  *(void *)(v3 + 2776) = 0x800000008;
  *(void *)(v3 + 2752) = &unk_1EDD19DE8;
  *(void *)(v3 + 2784) = v3 + 2792;
  *(void *)(v3 + 3328) = 0x100000008;
  *(void *)(v3 + 3304) = &unk_1EDD19CC8;
  *(void *)(v3 + 3336) = v3 + 3344;
  *(void *)(v3 + 3432) = 0x100000008;
  *(void *)(v3 + 3408) = &unk_1EDD19CC8;
  *(void *)(v3 + 3440) = v3 + 3448;
  *(void *)(v3 + 3536) = 0x800000008;
  *(void *)(v3 + 3512) = &unk_1EDD19DE8;
  *(void *)(v3 + 3544) = v3 + 3552;
  *(void *)(v3 + 4088) = 0x100000008;
  *(void *)(v3 + 4064) = &unk_1EDD19CC8;
  *(void *)(v3 + 4096) = v3 + 4104;
  *(void *)(v3 + 4200) = 0x3E45798EE2308C3ALL;
  *(void *)(v3 + 4208) = 0x3E45798EE2308C3ALL;
  *(_WORD *)(v3 + 4216) = 0;
  *(void *)(v3 + 4224) = 0x3FEE666666666666;
  *(void *)(v3 + 4232) = 0;
  *(void *)(v3 + 4240) = 0;
  *(void *)(v3 + 4248) = 0x4197D78400000000;
  *(void *)(v3 + 4168) = 0;
  *uint64_t v2 = 0;
  *(void *)(v3 + 2656) = 0;
  *(void *)(v3 + 2664) = 0;
  *(void *)(v3 + 2760) = 0;
  *(void *)(v3 + 2768) = 0;
  *(void *)(v3 + 3312) = 0;
  *(void *)(v3 + 3320) = 0;
  *(void *)(v3 + 3416) = 0;
  *(void *)(v3 + 3424) = 0;
  *(void *)(v3 + 3520) = 0;
  *(void *)(v3 + 3528) = 0;
  *(void *)(v3 + 4072) = 0;
  *(void *)(v3 + 4080) = 0;
  *(_OWORD *)(v3 + 4256) = 0u;
  *(_OWORD *)(v3 + 4272) = 0u;
  *(_OWORD *)(v3 + 4288) = 0u;
  *(_OWORD *)(v3 + 4304) = 0u;
  *(_OWORD *)(v3 + 4320) = 0u;
  *(_OWORD *)(v3 + 4336) = 0u;
  *(_OWORD *)(v3 + 4352) = 0u;
  *(_OWORD *)(v3 + 4368) = 0u;
  *(void *)(v3 + 4384) = 0;
  *(_OWORD *)(v2 + 4) = xmmword_18E1FD610;
  *(void *)(v3 + 2640) = &unk_1EDD0A818;
  *(void *)(v3 + 4416) = 0x800000008;
  *(void *)(v3 + 4392) = &unk_1EDD19DE8;
  *(void *)(v3 + 4424) = v3 + 4432;
  *(void *)(v3 + 4968) = 0x100000008;
  *(void *)(v3 + 4944) = &unk_1EDD19CC8;
  *(void *)(v3 + 4976) = v3 + 4984;
  *(void *)(v3 + 5072) = 0x800000008;
  *(void *)(v3 + 5048) = &unk_1EDD19DE8;
  *(void *)(v3 + 5080) = v3 + 5088;
  *(void *)(v3 + 5600) = 0x100000000;
  *(_DWORD *)(v3 + 5608) = 0x7FFFFFFF;
  int64x2_t v9 = vdupq_n_s64(0x3E45798EE2308C3AuLL);
  *(int64x2_t *)(v3 + 5616) = v9;
  *(_WORD *)(v3 + 5632) = 0;
  *(void *)(v3 + 5640) = 0x3FEE666666666666;
  *(void *)(v3 + 5656) = 0;
  *(void *)(v3 + 5648) = 0;
  *(void *)(v3 + 5664) = 0x4197D78400000000;
  *(void *)(v3 + 5680) = 0;
  *(void *)(v3 + 5672) = 0;
  *(_WORD *)(v3 + 5688) = 1;
  *(void *)(v3 + 5696) = 0;
  *(void *)(v3 + 4408) = 0;
  *(void *)(v3 + 4400) = 0;
  *(void *)(v3 + 4960) = 0;
  *(void *)(v3 + 4952) = 0;
  *(void *)(v3 + 5064) = 0;
  *(void *)(v3 + 5056) = 0;
  sub_18E065B5C(v3 + 5704);
  *((void *)this + 1020) = 0x100000000;
  *((_DWORD *)this + 2042) = 0x7FFFFFFF;
  *((int64x2_t *)this + 511) = v9;
  *((_WORD *)v2 + 2008) = 0;
  *((void *)this + 1025) = 0x3FEE666666666666;
  *((void *)this + 1027) = 0;
  *((void *)this + 1026) = 0;
  *((void *)this + 1028) = 0x4197D78400000000;
  *((void *)this + 1030) = 0;
  *((void *)this + 1029) = 0;
  *((_WORD *)v2 + 2036) = 1;
  *((void *)this + 1032) = 0;
  __asm { FMOV            V0.2D, #0.5 }
  *((_OWORD *)this + 517) = _Q0;
  *((_DWORD *)this + 2072) = 0;
  *((void *)this + 1033) = &unk_1EDD0A6A8;
  *((void *)this + 1037) = 0x3FE0000000000000;
  *((_OWORD *)this + 519) = xmmword_18E215AB0;
  *((_OWORD *)this + 520) = _Q0;
  *((_WORD *)this + 4168) = 0;
  *(_OWORD *)((char *)this + 8360) = 0u;
  *(_OWORD *)((char *)this + 8344) = 0u;
  *((void *)this + 1047) = (char *)this + 8376;
  *((void *)this + 1048) = (char *)this + 8376;
  *((void *)this + 1049) = 0;
  sub_18E06AEBC((uint64_t)this + 8400);
  *((void *)this + 1406) = 0x1000000AELL;
  *((void *)this + 1403) = &unk_1EDD17B08;
  *((_OWORD *)this + 702) = xmmword_18E1FD650;
  *((void *)this + 1407) = (char *)this + 11264;
  *((void *)this + 1498) = 0x1000000AELL;
  *((void *)this + 1495) = &unk_1EDD17AD8;
  *((_OWORD *)this + 748) = xmmword_18E1FD650;
  *((void *)this + 1499) = (char *)this + 12000;
  sub_18E06AFC0((uint64_t)this + 13392);
}

void sub_18E0FBCA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,_Unwind_Exception *exception_object)
{
  sub_18E0B687C(v24);
  *a20 = a19;
  sub_18E067E60(a21);
  sub_18E0B67FC(a22);
  sub_18E0268B0(v23);
  _Unwind_Resume(a1);
}

uint64_t raven::RavenConvergenceEstimator::AdjustClockOffset(uint64_t a1, uint64_t a2, double a3)
{
  if (!*(unsigned char *)(a1 + 58)) {
    return 1;
  }
  if ((*(void *)&a3 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
  {
    uint64_t v36 = 0x100000008;
    unsigned __int8 v34 = &unk_1EDD19CC8;
    long long v35 = xmmword_18E1FD760;
    uint64_t v37 = (double *)&v38;
    if (*(_DWORD *)(a1 + 4180)) {
      uint64_t v6 = a1 + 3408;
    }
    else {
      uint64_t v6 = a1 + 2648;
    }
    sub_18DFE2F24((uint64_t)&v34, v6);
    uint64_t v31 = 0x800000008;
    BOOL v29 = &unk_1EDD19DE8;
    long long v30 = xmmword_18E1FD750;
    double v32 = &v33;
    if (*(_DWORD *)(a1 + 4180)) {
      uint64_t v7 = a1 + 3512;
    }
    else {
      uint64_t v7 = a1 + 2752;
    }
    sub_18DFE2F24((uint64_t)&v29, v7);
    v37[6] = v37[6] + a3 * 1000000.0;
    uint64_t v26 = 0x100000008;
    uint64_t v24 = &unk_1EDD19CC8;
    long long v25 = xmmword_18E1FD760;
    size_t v27 = &v28;
    sub_18DFE2B44((uint64_t)&v29, (uint64_t)&v34, (uint64_t)&v24);
    sub_18E0FC21C(a1 + 2640, (uint64_t)&v34, (uint64_t)&v29, (uint64_t)&v24);
    LOWORD(v24) = 12;
    unsigned __int8 v23 = 2;
    char v8 = cnprint::CNLogFormatter::FormatGeneral(a1 + 2488, a2, "adjusted clock offset by %.3lf us to %.3lf us", a3 * 1000000.0, v37[6]);
    if (*(char *)(a1 + 2511) >= 0) {
      LOBYTE(v14) = v8;
    }
    else {
      uint64_t v14 = *(void *)(a1 + 2488);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v24, &v23, "%s", v9, v10, v11, v12, v13, v14);
    return 1;
  }
  LOWORD(v29) = 12;
  LOBYTE(v34) = 4;
  char v16 = cnprint::CNLogFormatter::FormatGeneral(a1 + 2488, a2, "invalid clock correction %.3lf s", a3);
  if (*(char *)(a1 + 2511) >= 0) {
    LOBYTE(v22) = v16;
  }
  else {
    uint64_t v22 = *(void *)(a1 + 2488);
  }
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v29, (unsigned __int8 *)&v34, "%s", v17, v18, v19, v20, v21, v22);
  return 0;
}

void sub_18E0FC21C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v7.i32[1] = 1;
  v7.i32[0] = *(_DWORD *)(a2 + 16);
  int32x2_t v9 = v7;
  sub_18E0737B4((uint64_t)v11, a2);
  int32x4_t v8 = vdupq_lane_s32(v9, 0);
  v8.i32[1] = 1;
  int32x4_t v10 = v8;
  int32x4_t v12 = v8;
  sub_18DFE2F24(a1 + 8, (uint64_t)v11);
  sub_18DFE2F24(a1 + 112, a3);
  sub_18E0737B4((uint64_t)v11, a4);
  int32x4_t v12 = v10;
  sub_18DFE2F24(a1 + 664, (uint64_t)v11);
  sub_18DFE2F24(a1 + 768, a1 + 8);
  sub_18DFE2F24(a1 + 872, a1 + 112);
  sub_18DFE2F24(a1 + 1424, a1 + 664);
  *(void *)(a1 + 1528) = 0x3FF0000000000000;
  *(unsigned char *)(a1 + 1536) = 0;
  *(_DWORD *)(a1 + 1540) = 1;
}

void sub_18E0FC304(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 24) = 0x100000008;
  *(void *)a1 = &unk_1EDD19CC8;
  *(_OWORD *)(a1 + 8) = xmmword_18E1FD760;
  *(void *)(a1 + 32) = a1 + 40;
  sub_18DFE2B44(a2, a3, a1);
}

void sub_18E0FC370(_Unwind_Exception *a1)
{
  void *v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

void sub_18E0FC390(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6, double a7, double a8, double a9, double a10, double a11, double a12, double a13, float64_t a14)
{
  uint64_t v99 = 0x800000008;
  uint64_t v97 = &unk_1EDD19DE8;
  uint64_t v100 = v101;
  long long v98 = xmmword_18E1FD750;
  sub_18DFE2CC8((uint64_t)&v97, 0.0);
  sub_18DFE2F24(a1 + 80, (uint64_t)&v97);
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(double *)(a1 + 16) = a6;
  *(double *)(a1 + 24) = a7;
  *(double *)(a1 + 32) = a8;
  *(double *)(a1 + 40) = a9;
  *(double *)(a1 + 48) = a10;
  *(double *)(a1 + 56) = a11;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  v101[0] = 0x100000000;
  uint64_t v93 = 0x100000003;
  double v91 = &unk_1EDD18DC8;
  uint64_t v94 = &v95;
  long long v92 = xmmword_18E1F6F60;
  int v96 = 2;
  uint64_t v95 = 0x100000000;
  uint64_t v73 = 0x300000003;
  long long v72 = xmmword_18E1F0010;
  uint64_t v71 = &unk_1EDD18EE8;
  uint64_t v74 = v75;
  LOBYTE(v97) = 0;
  sub_18DFEEFE8(a4, (uint64_t)&v71, (BOOL *)&v97);
  uint64_t v78 = 0x300000003;
  long long v77 = xmmword_18E1F0010;
  uint64_t v76 = &unk_1EDD18EE8;
  uint64_t v79 = v80;
  uint64_t v61 = 0x100000003;
  double v59 = &unk_1EDD18DC8;
  long long v60 = xmmword_18E1F6F60;
  uint64_t v62 = v63;
  uint64_t v99 = 0x10000000CLL;
  long long v98 = xmmword_18E1FD010;
  uint64_t v97 = &unk_1EDD17808;
  uint64_t v100 = v101;
  sub_18E01BFEC((uint64_t)&v71, (uint64_t)&v59, (uint64_t)&v97, (uint64_t)&v76);
  int v30 = DWORD1(v77);
  int v31 = v77;
  uint64_t v83 = 0x300000003;
  uint64_t v81 = &unk_1EDD18EE8;
  double v84 = v85;
  *(void *)&long long v82 = __PAIR64__(v77, DWORD1(v77));
  DWORD2(v82) = v77 * DWORD1(v77);
  HIDWORD(v82) = DWORD1(v77);
  if (DWORD1(v77))
  {
    int v32 = 0;
    int v33 = 0;
    int v34 = HIDWORD(v77);
    long long v35 = v79;
    do
    {
      int v36 = v32;
      int v37 = v33;
      for (int i = v31; i; --i)
      {
        v85[v37] = v35[v36];
        v37 += v30;
        ++v36;
      }
      ++v33;
      v32 += v34;
    }
    while (v33 != v30);
  }
  uint64_t v61 = 0x100000003;
  double v59 = &unk_1EDD18D98;
  long long v60 = xmmword_18E1F6F60;
  uint64_t v62 = v63;
  uint64_t v99 = 0x300000003;
  long long v98 = xmmword_18E1F0010;
  uint64_t v97 = &unk_1EDD18EE8;
  uint64_t v100 = v101;
  uint64_t v88 = 0x300000003;
  long long v87 = xmmword_18E1F0010;
  uint64_t v86 = &unk_1EDD18EE8;
  uint64_t v89 = (double *)v90;
  sub_18E06EA40((uint64_t)&v81, (uint64_t)&v59, (uint64_t)&v97, (uint64_t)&v86);
  sub_18DFEE864((uint64_t)&v97, a1 + 80, (uint64_t)&v91, (uint64_t)&v91);
  sub_18DFEC6E4((uint64_t)&v97, (uint64_t)&v86);
  v101[0] = 0x400000003;
  uint64_t v67 = 0x100000003;
  double v65 = &unk_1EDD18DC8;
  long long v66 = xmmword_18E1F6F60;
  int v70 = 5;
  double v68 = &v69;
  uint64_t v69 = 0x400000003;
  uint64_t v73 = 0x300000003;
  long long v72 = xmmword_18E1F0010;
  uint64_t v71 = &unk_1EDD18EE8;
  uint64_t v74 = v75;
  LOBYTE(v97) = 0;
  sub_18DFEEFE8(a5, (uint64_t)&v71, (BOOL *)&v97);
  uint64_t v78 = 0x300000003;
  long long v77 = xmmword_18E1F0010;
  uint64_t v76 = &unk_1EDD18EE8;
  uint64_t v79 = v80;
  uint64_t v61 = 0x100000003;
  double v59 = &unk_1EDD18DC8;
  long long v60 = xmmword_18E1F6F60;
  uint64_t v62 = v63;
  uint64_t v99 = 0x10000000CLL;
  long long v98 = xmmword_18E1FD010;
  uint64_t v97 = &unk_1EDD17808;
  uint64_t v100 = v101;
  sub_18E01BFEC((uint64_t)&v71, (uint64_t)&v59, (uint64_t)&v97, (uint64_t)&v76);
  int v39 = DWORD1(v77);
  int v40 = v77;
  uint64_t v83 = 0x300000003;
  uint64_t v81 = &unk_1EDD18EE8;
  double v84 = v85;
  *(void *)&long long v82 = __PAIR64__(v77, DWORD1(v77));
  DWORD2(v82) = v77 * DWORD1(v77);
  HIDWORD(v82) = DWORD1(v77);
  if (DWORD1(v77))
  {
    int v41 = 0;
    int v42 = 0;
    int v43 = HIDWORD(v77);
    uint64_t v44 = v79;
    do
    {
      int v45 = v41;
      int v46 = v42;
      for (int j = v40; j; --j)
      {
        v85[v46] = v44[v45];
        v46 += v39;
        ++v45;
      }
      ++v42;
      v41 += v43;
    }
    while (v42 != v39);
  }
  uint64_t v61 = 0x100000003;
  double v59 = &unk_1EDD18D98;
  long long v60 = xmmword_18E1F6F60;
  uint64_t v62 = v63;
  uint64_t v99 = 0x300000003;
  long long v98 = xmmword_18E1F0010;
  uint64_t v97 = &unk_1EDD18EE8;
  uint64_t v100 = v101;
  uint64_t v88 = 0x300000003;
  long long v87 = xmmword_18E1F0010;
  uint64_t v86 = &unk_1EDD18EE8;
  uint64_t v89 = (double *)v90;
  sub_18E06EA40((uint64_t)&v81, (uint64_t)&v59, (uint64_t)&v97, (uint64_t)&v86);
  sub_18DFEE864((uint64_t)&v97, a1 + 80, (uint64_t)&v65, (uint64_t)&v65);
  sub_18DFEC6E4((uint64_t)&v97, (uint64_t)&v86);
  uint64_t v88 = 0x200000002;
  uint64_t v86 = &unk_1EDD18BB8;
  uint64_t v89 = (double *)v90;
  long long v87 = xmmword_18E1FD1B0;
  sub_18DFE2CC8((uint64_t)&v86, 0.0);
  double v48 = v89;
  *uint64_t v89 = a12 * a12;
  v48[SHIDWORD(v87) + 1] = a13 * a13;
  uint64_t v83 = 0x300000001;
  uint64_t v81 = &unk_1EDD18258;
  double v84 = v85;
  long long v82 = xmmword_18E1FD740;
  v85[0] = 0x700000006;
  uint64_t v99 = 0x100000003;
  uint64_t v97 = &unk_1EDD18DC8;
  uint64_t v100 = v101;
  long long v98 = xmmword_18E1FD1A0;
  v101[0] = 0x700000006;
  sub_18E07483C((uint64_t)v64, (uint64_t)&v97);
  uint64_t v61 = 0x200000002;
  double v59 = &unk_1EDD18BB8;
  long long v60 = xmmword_18E1FD1B0;
  uint64_t v62 = v63;
  LOBYTE(v97) = 0;
  sub_18DFEEFE8((uint64_t)&v86, (uint64_t)&v59, (BOOL *)&v97);
  uint64_t v73 = 0x200000002;
  long long v72 = xmmword_18E1FD1B0;
  uint64_t v71 = &unk_1EDD18BB8;
  uint64_t v74 = v75;
  uint64_t v104 = 0x100000002;
  long long v103 = xmmword_18E1FD1A0;
  uint64_t v102 = &unk_1EDD18B58;
  double v105 = v106;
  uint64_t v99 = 0x100000008;
  long long v98 = xmmword_18E1FD760;
  uint64_t v97 = &unk_1EDD19CC8;
  uint64_t v100 = v101;
  sub_18E01BFEC((uint64_t)&v59, (uint64_t)&v102, (uint64_t)&v97, (uint64_t)&v71);
  int v49 = DWORD1(v72);
  int v50 = v72;
  uint64_t v78 = 0x200000002;
  uint64_t v76 = &unk_1EDD18BB8;
  uint64_t v79 = v80;
  *(void *)&long long v77 = __PAIR64__(v72, DWORD1(v72));
  DWORD2(v77) = v72 * DWORD1(v72);
  HIDWORD(v77) = DWORD1(v72);
  if (DWORD1(v72))
  {
    int v51 = 0;
    int v52 = 0;
    int v53 = HIDWORD(v72);
    uint64_t v54 = v74;
    do
    {
      int v55 = v51;
      int v56 = v52;
      for (int k = v50; k; --k)
      {
        v80[v56] = *(void *)&v54[8 * v55];
        v56 += v49;
        ++v55;
      }
      ++v52;
      v51 += v53;
    }
    while (v52 != v49);
  }
  uint64_t v104 = 0x100000002;
  long long v103 = xmmword_18E1FD1A0;
  uint64_t v102 = &unk_1EDD18B28;
  double v105 = v106;
  uint64_t v99 = 0x200000002;
  long long v98 = xmmword_18E1FD1B0;
  uint64_t v97 = &unk_1EDD18BB8;
  uint64_t v100 = v101;
  uint64_t v83 = 0x200000002;
  long long v82 = xmmword_18E1FD1B0;
  uint64_t v81 = &unk_1EDD18BB8;
  double v84 = v85;
  sub_18E06EA40((uint64_t)&v76, (uint64_t)&v102, (uint64_t)&v97, (uint64_t)&v81);
  sub_18E07492C((uint64_t)&v97, a1 + 80, (uint64_t)v64, (uint64_t)v64);
  sub_18E07421C((uint64_t)&v97, (uint64_t)&v81);
  v58.f64[0] = a14;
  uint64_t v99 = 0x800000008;
  long long v98 = xmmword_18E1FD750;
  uint64_t v97 = &unk_1EDD19DE8;
  uint64_t v100 = v101;
  sub_18DFE3240(a1 + 80, (uint64_t)&v97, v58);
  sub_18DFE2F24(a1 + 80, (uint64_t)&v97);
}

uint64_t raven::RavenConvergenceEstimator::Configure(uint64_t a1, uint64_t *a2)
{
  if (*(unsigned char *)(a1 + 57))
  {
    LOWORD(__p.__r_.__value_.__l.__data_) = 12;
    LOBYTE(v38) = 2;
    unsigned __int8 v3 = cnprint::CNLogFormatter::FormatWarning((cnprint::CNLogFormatter *)(a1 + 2488), "Configure() called more than once");
    goto LABEL_22;
  }
  uint64_t v10 = *a2;
  if (!*a2)
  {
    LOWORD(__p.__r_.__value_.__l.__data_) = 12;
    LOBYTE(v38) = 4;
    unsigned __int8 v3 = cnprint::CNLogFormatter::FormatGeneral((const void **)(a1 + 2488), "Configure() called with null raven parameters");
    goto LABEL_22;
  }
  if (!*(unsigned char *)(v10 + 33))
  {
    LOWORD(__p.__r_.__value_.__l.__data_) = 12;
    LOBYTE(v38) = 4;
    unsigned __int8 v3 = cnprint::CNLogFormatter::FormatGeneral((const void **)(a1 + 2488), "Configure() called with uninitialized raven parameters");
    goto LABEL_22;
  }
  uint64_t v11 = *(void *)(v10 + 1016);
  uint64_t v12 = v11 & 0x7FFFFFFFFFFFFFFFLL;
  BOOL v13 = (v11 & 0x7FFFFFFFFFFFFFFFuLL) - 1 < 0xFFFFFFFFFFFFFLL;
  BOOL v14 = v11 < 0;
  BOOL v15 = v11 < 0 && ((v11 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 < 0x3FF;
  if (!v14) {
    BOOL v13 = 0;
  }
  BOOL v16 = v12 <= 0x7FF0000000000000;
  int v17 = v12 == 0x7FF0000000000000 || v13;
  if (!v16) {
    int v17 = 1;
  }
  if (((v17 | v15) & 1) != 0 || *(double *)(v10 + 1016) > 1.0)
  {
    LOWORD(__p.__r_.__value_.__l.__data_) = 12;
    LOBYTE(v38) = 4;
    unsigned __int8 v3 = cnprint::CNLogFormatter::FormatGeneral((const void **)(a1 + 2488), "Configure() called with invalid probability speeds differ,%.3lf");
LABEL_22:
    if (*(char *)(a1 + 2511) >= 0) {
      LOBYTE(v26) = v3;
    }
    else {
      uint64_t v26 = *(void *)(a1 + 2488);
    }
LABEL_25:
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&__p, (unsigned __int8 *)&v38, "%s", v4, v5, v6, v7, v8, v26);
    return 0xFFFFFFFFLL;
  }
  uint64_t v18 = (_OWORD *)(a1 + 2536);
  *(_WORD *)(a1 + 2624) = 1;
  *(void *)(a1 + 2536) = 0x100000000;
  *(_WORD *)(a1 + 2568) = 257;
  *(void *)(a1 + 2576) = *(void *)(v10 + 912);
  *(void *)(a1 + 2600) = *(void *)(v10 + 920);
  long long v19 = *(_OWORD *)(a1 + 2568);
  *(_OWORD *)(a1 + 5648) = *(_OWORD *)(a1 + 2584);
  *(_OWORD *)(a1 + 5680) = *(_OWORD *)(a1 + 2616);
  *(void *)(a1 + 5696) = *(void *)(a1 + 2632);
  long long v20 = *(_OWORD *)(a1 + 2552);
  *(_OWORD *)(a1 + 5600) = *(_OWORD *)(a1 + 2536);
  long long v21 = *(_OWORD *)(a1 + 2536);
  *(_OWORD *)(a1 + 5616) = *(_OWORD *)(a1 + 2552);
  long long v23 = *(_OWORD *)(a1 + 2584);
  long long v22 = *(_OWORD *)(a1 + 2600);
  *(_OWORD *)(a1 + 5664) = v22;
  *(_OWORD *)(a1 + 5632) = v19;
  *(_OWORD *)(a1 + 4184) = v21;
  *(_OWORD *)(a1 + 4200) = v20;
  *(void *)(a1 + 4264) = *(void *)(a1 + 2616);
  *(_OWORD *)(a1 + 4232) = v23;
  *(_OWORD *)(a1 + 4248) = v22;
  *(_OWORD *)(a1 + 4216) = v19;
  *(unsigned char *)(a1 + 4176) = 0;
  uint64_t v40 = 0x100000008;
  uint64_t v38 = &unk_1EDD19CC8;
  int v41 = &v42;
  long long v39 = xmmword_18E1FD760;
  sub_18DFE2CC8((uint64_t)&v38, 0.0);
  unsigned int v24 = DWORD2(v39);
  sub_18E0737B4((uint64_t)&__p, (uint64_t)&v38);
  int32x4_t v25 = vdupq_lane_s32((int32x2_t)(v24 | 0x100000000), 0);
  v25.i32[1] = 1;
  *(int32x4_t *)&__p.__r_.__value_.__r.__words[1] = v25;
  sub_18DFE2F24(a1 + 2648, (uint64_t)&__p);
  uint64_t v44 = 0x800000008;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1EDD19DE8;
  int v45 = v46;
  LODWORD(__p.__r_.__value_.__r.__words[1]) = v24;
  HIDWORD(__p.__r_.__value_.__r.__words[1]) = v24;
  LODWORD(__p.__r_.__value_.__r.__words[2]) = v24 * v24;
  HIDWORD(__p.__r_.__value_.__r.__words[2]) = v24;
  sub_18DFE2CC8((uint64_t)&__p, 0.0);
  sub_18DFE2F24(a1 + 2752, (uint64_t)&__p);
  uint64_t v44 = 0x100000008;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1EDD19CC8;
  *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_18E1FD760;
  int v45 = v46;
  sub_18DFE2B44(a1 + 2752, a1 + 2648, (uint64_t)&__p);
  sub_18DFE2F24(a1 + 3304, (uint64_t)&__p);
  sub_18DFE2F24(a1 + 3408, a1 + 2648);
  sub_18DFE2F24(a1 + 3512, a1 + 2752);
  sub_18DFE2F24(a1 + 4064, a1 + 3304);
  *(void *)(a1 + 4168) = 0x3FF0000000000000;
  *(unsigned char *)(a1 + 4176) = 0;
  *(_DWORD *)(a1 + 4180) = 1;
  if (*(char *)(a1 + 2535) < 0) {
    sub_18DEDE668(&__p, *(void **)(a1 + 2512), *(void *)(a1 + 2520));
  }
  else {
    std::string __p = *(std::string *)(a1 + 2512);
  }
  char v28 = raven::RavenSequentialGNSSMeasurementSelector::Configure(a1 + 5704, v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if ((v28 & 1) == 0)
  {
    LOWORD(__p.__r_.__value_.__l.__data_) = 12;
    LOBYTE(v38) = 4;
    cnprint::CNLogFormatter::FormatGeneral((const void **)(a1 + 2488), "Configure() failed to configure sequential GNSS measurement selector");
    goto LABEL_41;
  }
  if (*(unsigned char *)(v10 + 3753))
  {
    LOBYTE(v38) = *(unsigned char *)(a1 + 56);
    raven::RavenParameters::GetDebugMsrLoggingFilenameForEstimator(v10, (char *)&v38, &__p);
    raven::RavenSequentialGNSSMeasurementSelector::EnableLoggingToFile(a1 + 5704, (uint64_t)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  long long v29 = *(_OWORD *)(a1 + 2568);
  *(_OWORD *)(a1 + 8208) = *(_OWORD *)(a1 + 2584);
  long long v30 = *(_OWORD *)(a1 + 2616);
  *(_OWORD *)(a1 + 8224) = *(_OWORD *)(a1 + 2600);
  *(_OWORD *)(a1 + 8240) = v30;
  *(_OWORD *)(a1 + 0x2000) = v29;
  long long v31 = *(_OWORD *)(a1 + 2552);
  *(_OWORD *)(a1 + 8160) = *v18;
  *(void *)(a1 + 8256) = *(void *)(a1 + 2632);
  *(_OWORD *)(a1 + 8176) = v31;
  *(_WORD *)(a1 + 0x2000) = 0;
  __p.__r_.__value_.__r.__words[0] = 0x3FE0000000000000;
  int v32 = (cnstatistics *)sub_18E06E568(a1 + 8272, (double *)&__p);
  double v33 = *(double *)(v10 + 1488);
  if (v33 < 0.0
    || v33 > 1.0
    || (double v34 = *(double *)(v10 + 1496), v34 < 0.0)
    || v34 > 1.0
    || (double v35 = *(double *)(v10 + 1480), v35 < 0.0))
  {
    LOWORD(__p.__r_.__value_.__l.__data_) = 12;
    LOBYTE(v38) = 4;
    cnprint::CNLogFormatter::FormatGeneral((const void **)(a1 + 2488), "Configure() failed to set consistency monitor prediction parameters");
    goto LABEL_41;
  }
  *(double *)(a1 + 8312) = v35;
  *(void *)(a1 + 8296) = *(void *)(v10 + 1488);
  *(void *)(a1 + 8304) = *(void *)(v10 + 1496);
  double v36 = 1.0
      - fabs(cnstatistics::InverseNormal(v32, (1.0 - *(double *)(v10 + 912)) * 0.5, 0.0, 1.0)) / *(double *)(v10 + 1504);
  if (v36 < 0.0 || v36 > 1.0 || (double v37 = 1.0 - *(double *)(v10 + 912), v37 < 0.0) || v37 > 1.0)
  {
    LOWORD(__p.__r_.__value_.__l.__data_) = 12;
    LOBYTE(v38) = 4;
    cnprint::CNLogFormatter::FormatGeneral((const void **)(a1 + 2488), "Configure() failed to set consistency monitor update parameters");
LABEL_41:
    if (*(char *)(a1 + 2511) >= 0) {
      LOBYTE(v26) = a1 - 72;
    }
    else {
      uint64_t v26 = *(void *)(a1 + 2488);
    }
    goto LABEL_25;
  }
  *(double *)(a1 + 8320) = v36;
  *(double *)(a1 + 8328) = v37;
  if (*(unsigned char *)(a1 + 57))
  {
    puts("Warning: RavenEstimator::Configure() called more than once.");
    return 0xFFFFFFFFLL;
  }
  uint64_t result = 0;
  *(void *)(a1 + 1168) = *a2;
  *(unsigned char *)(a1 + 57) = 1;
  return result;
}

void sub_18E0FD3CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double raven::RavenConvergenceEstimator::GetHDOP(raven::RavenConvergenceEstimator *this)
{
  return *((double *)this + 1019);
}

double raven::RavenConvergenceEstimator::GetPSRPostFitResidualsBasedHorizontalPositionMisclosure(raven::RavenConvergenceEstimator *this)
{
  return *((double *)this + 1017);
}

double raven::RavenConvergenceEstimator::GetFailureProbability(raven::RavenConvergenceEstimator *this)
{
  uint64_t v1 = 16;
  if (!*((_DWORD *)this + 2072)) {
    uint64_t v1 = 8;
  }
  return *(double *)((char *)this + v1 + 8264);
}

std::string *raven::RavenConvergenceEstimator::SetLogPrefix(uint64_t a1, const std::string *a2)
{
  std::string::operator=((std::string *)(a1 + 2512), a2);

  return std::string::operator=((std::string *)(a1 + 4368), a2);
}

BOOL raven::RavenConvergenceEstimator::GetEstimatorPredictAndUpdateArguments(uint64_t a1, uint64_t a2, int8x16_t *a3, uint64_t a4, double a5, int8x16_t a6)
{
  int8x16_t v10 = *a3;
  *(int8x16_t *)a4 = *a3;
  uint64_t v11 = (cnprint::CNPrinter *)CNTimeSpan::operator-((uint64_t)a3, (void *)a2, v10, a6);
  double v13 = v12 + (double)(uint64_t)v11;
  *(double *)(a4 + 16) = v13;
  if (v13 < 0.0)
  {
    if (!cnprint::CNPrinter::GetLogLevel(v11))
    {
      __int16 v28 = 12;
      unsigned __int8 v27 = 0;
      char v19 = cnprint::CNLogFormatter::FormatGeneral(a1 + 2488, (uint64_t)a3, "Prediction time is negative,dt,%.2lf,current_estimator_time,%.1lf", *(double *)(a4 + 16), *(double *)(a2 + 8) + (double)*(uint64_t *)a2);
      if (*(char *)(a1 + 2511) >= 0) {
        LOBYTE(v25) = v19;
      }
      else {
        uint64_t v25 = *(void *)(a1 + 2488);
      }
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v28, &v27, "%s", v20, v21, v22, v23, v24, v25);
    }
  }
  else
  {
    double v14 = raven::RavenConvergenceEstimator::AdjustDynamicModelWithMovingStateContraints(a1);
    *(double *)(a4 + 56) = v14;
    *(double *)(a4 + 64) = v14;
    *(double *)(a4 + 72) = v15;
    *(double *)(a4 + 80) = v16;
    *(double *)(a4 + 88) = v16;
    *(double *)(a4 + 96) = v17;
    *(double *)(a4 + 104) = v15 + v14 * 2.0;
    *(double *)(a4 + 112) = v17 + v16 * 2.0;
    uint64_t v18 = (_OWORD *)(*(void *)(a1 + 1168) + 792);
    *(_OWORD *)(a4 + 24) = *v18;
    *(_OWORD *)(a4 + 40) = v18[1];
  }
  return v13 >= 0.0;
}

double raven::RavenConvergenceEstimator::AdjustDynamicModelWithMovingStateContraints(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 1168);
  double v3 = *(double *)(v2 + 216);
  if (*(unsigned char *)(a1 + 1776))
  {
    int v4 = *(unsigned __int8 *)(a1 + 1888);
    switch(v4)
    {
      case 3:
        uint64_t v5 = (void *)(v2 + 152);
        return *(double *)v5;
      case 2:
        uint64_t v5 = (void *)(v2 + 184);
        return *(double *)v5;
      case 1:
        uint64_t v5 = (void *)(v2 + 120);
        return *(double *)v5;
    }
  }
  else if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)a1) <= 1)
  {
    __int16 v16 = 12;
    unsigned __int8 v15 = 1;
    long long v14 = *(_OWORD *)(a1 + 80);
    char v6 = cnprint::CNLogFormatter::FormatGeneral(a1 + 2488, (uint64_t)&v14, "AdjustDynamicModelWithMovingStateContraints: WARNING: Moving State not yet available.");
    if (*(char *)(a1 + 2511) >= 0) {
      LOBYTE(v12) = v6;
    }
    else {
      uint64_t v12 = *(void *)(a1 + 2488);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v16, &v15, "%s", v7, v8, v9, v10, v11, v12);
  }
  return v3;
}

uint64_t raven::RavenConvergenceEstimator::GetRavenSolution@<X0>(raven::RavenConvergenceEstimator *this@<X0>, uint64_t a2@<X8>)
{
  long long v4 = 0uLL;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  uint64_t v5 = (int64x2_t *)(a2 + 264);
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0x7FF8000000000000;
  *(unsigned char *)(a2 + 96) = 0;
  int64x2_t v6 = vdupq_n_s64(0x7FF8000000000000uLL);
  *(int64x2_t *)(a2 + 104) = v6;
  *(int64x2_t *)(a2 + 120) = v6;
  *(int64x2_t *)(a2 + 136) = v6;
  *(int64x2_t *)(a2 + 152) = v6;
  *(void *)(a2 + 168) = 0x7FF8000000000000;
  *(_WORD *)(a2 + 176) = 0;
  *(int64x2_t *)(a2 + 184) = v6;
  *(int64x2_t *)(a2 + 200) = v6;
  *(int64x2_t *)(a2 + 216) = v6;
  *(int64x2_t *)(a2 + 232) = v6;
  *(int64x2_t *)(a2 + 248) = v6;
  *(int64x2_t *)(a2 + 264) = v6;
  *(int64x2_t *)(a2 + 280) = v6;
  *(unsigned char *)(a2 + 296) = 0;
  *(int64x2_t *)(a2 + 304) = v6;
  *(int64x2_t *)(a2 + 320) = v6;
  *(int64x2_t *)(a2 + 336) = v6;
  *(int64x2_t *)(a2 + 352) = v6;
  *(void *)(a2 + 368) = 0x7FF8000000000000;
  *(unsigned char *)(a2 + 376) = 0;
  *(int64x2_t *)(a2 + 384) = v6;
  *(int64x2_t *)(a2 + 400) = v6;
  *(int64x2_t *)(a2 + 416) = v6;
  *(int64x2_t *)(a2 + 432) = v6;
  *(void *)(a2 + 448) = 0x7FF8000000000000;
  *(unsigned char *)(a2 + 456) = 0;
  *(int64x2_t *)(a2 + 464) = v6;
  *(int64x2_t *)(a2 + 480) = v6;
  *(int64x2_t *)(a2 + 496) = v6;
  *(int64x2_t *)(a2 + 512) = v6;
  *(int64x2_t *)(a2 + 528) = v6;
  *(int64x2_t *)(a2 + 544) = v6;
  *(int64x2_t *)(a2 + 560) = v6;
  *(unsigned char *)(a2 + 576) = 0;
  *(int64x2_t *)(a2 + 584) = v6;
  *(int64x2_t *)(a2 + 600) = v6;
  *(int64x2_t *)(a2 + 616) = v6;
  *(int64x2_t *)(a2 + 632) = v6;
  *(void *)(a2 + 648) = 0x7FF8000000000000;
  *(unsigned char *)(a2 + 656) = 0;
  *(int64x2_t *)(a2 + 664) = v6;
  *(int64x2_t *)(a2 + 680) = v6;
  *(int64x2_t *)(a2 + 696) = v6;
  *(int64x2_t *)(a2 + 712) = v6;
  *(void *)(a2 + 728) = 0x7FF8000000000000;
  *(unsigned char *)(a2 + 736) = 0;
  *(int64x2_t *)(a2 + 744) = v6;
  *(int64x2_t *)(a2 + 760) = v6;
  *(int64x2_t *)(a2 + 776) = v6;
  *(int64x2_t *)(a2 + 792) = v6;
  *(void *)(a2 + 808) = 0x7FF8000000000000;
  *(unsigned char *)(a2 + 816) = 0;
  *(int64x2_t *)(a2 + 824) = v6;
  *(int64x2_t *)(a2 + 840) = v6;
  *(void *)(a2 + 856) = 0x7FF8000000000000;
  if (*((unsigned char *)this + 58)
    && (int64x2_t v66 = v6,
        char v7 = (*(uint64_t (**)(raven::RavenConvergenceEstimator *))(*(void *)this + 144))(this),
        long long v4 = 0uLL,
        int64x2_t v6 = v66,
        (v7 & 1) != 0))
  {
    uint64_t v108 = 0x100000008;
    uint64_t v106 = &unk_1EDD19CC8;
    long long v107 = xmmword_18E1FD760;
    uint64_t v109 = (double *)&v110;
    if (*((_DWORD *)this + 1045)) {
      uint64_t v8 = (char *)this + 3408;
    }
    else {
      uint64_t v8 = (char *)this + 2648;
    }
    sub_18DFE2F24((uint64_t)&v106, (uint64_t)v8);
    sub_18E0B6EF0((uint64_t)this + 2640, (uint64_t)v103);
    v17.i64[1] = 0;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    int8x16_t v18 = *((int8x16_t *)this + 5);
    *(int8x16_t *)a2 = v18;
    *(void *)(a2 + 80) = 0;
    *(void *)(a2 + 88) = 0x7FF8000000000000;
    *(unsigned char *)(a2 + 96) = 1;
    uint64_t v9 = v109;
    *(double *)(a2 + 104) = *v109;
    *(double *)(a2 + 112) = v9[1];
    *(double *)(a2 + 120) = v9[2];
    uint64_t v10 = v105;
    *(void *)(a2 + 128) = *v105;
    int v11 = v104;
    uint64_t v12 = v104;
    *(void *)(a2 + 136) = v10[v104];
    uint64_t v13 = 2 * v12;
    *(void *)(a2 + 144) = v10[2 * v12];
    uint64_t v14 = v12 + 1;
    *(void *)(a2 + 152) = v10[v12 + 1];
    uint64_t v15 = (2 * (int)v12) | 1;
    *(void *)(a2 + 160) = v10[v15];
    uint64_t v16 = 2 * (int)v12 + 2;
    *(void *)(a2 + 168) = v10[v16];
    v17.i64[0] = (uint64_t)v9[3];
    v18.i64[0] = (uint64_t)v9[4];
    double v19 = v9[5];
    double v20 = sqrt(*(double *)v18.i64 * *(double *)v18.i64 + *(double *)v17.i64 * *(double *)v17.i64 + v19 * v19);
    if (fabs(v20) <= 0.000000015)
    {
      *(unsigned char *)(a2 + 176) = 1;
      *(void *)(a2 + 184) = 0;
      uint64_t v44 = 3 * v11 + 3;
      LODWORD(v45) = 4 * v11;
      uint64_t v46 = 4 * v11 + 4;
      LODWORD(v47) = 5 * v11;
      uint64_t v48 = 5 * v11 + 5;
      *(double *)(a2 + 216) = *(double *)&v10[v44] + *(double *)&v10[v46] + *(double *)&v10[v48];
    }
    else
    {
      double v21 = 1.0 / v20;
      double v22 = *(double *)v17.i64 * (1.0 / v20);
      double v23 = *(double *)v18.i64 * (1.0 / v20);
      double v24 = v19 * (1.0 / v20);
      uint64_t v100 = 0x300000001;
      long long v99 = xmmword_18E1F8560;
      long long v98 = &unk_1EDD18228;
      uint64_t v101 = v102;
      v102[0] = v22;
      v102[1] = v23;
      v102[2] = v24;
      uint64_t v91 = 0x400000003;
      uint64_t v94 = 0x100000003;
      long long v92 = &unk_1EDD18DC8;
      uint64_t v95 = &v96;
      long long v93 = xmmword_18E1F6F60;
      int v97 = 5;
      uint64_t v96 = 0x400000003;
      sub_18DFEE864((uint64_t)v90, (uint64_t)v103, (uint64_t)&v92, (uint64_t)&v92);
      uint64_t v82 = 0x300000001;
      long long v81 = xmmword_18E1F8560;
      uint64_t v80 = &unk_1EDD18228;
      uint64_t v83 = v84;
      sub_18DFE2B44((uint64_t)&v98, (uint64_t)v90, (uint64_t)&v80);
      int v25 = DWORD1(v99);
      int v26 = v99;
      uint64_t v87 = 0x100000003;
      uint64_t v85 = &unk_1EDD18D98;
      uint64_t v88 = (double *)v89;
      *(void *)&long long v86 = __PAIR64__(v99, DWORD1(v99));
      DWORD2(v86) = v99 * DWORD1(v99);
      HIDWORD(v86) = DWORD1(v99);
      if (DWORD1(v99))
      {
        int v27 = 0;
        int v28 = 0;
        int v29 = HIDWORD(v99);
        long long v30 = v101;
        do
        {
          int v31 = v27;
          int v32 = v28;
          for (int i = v26; i; --i)
          {
            v89[v32] = *(void *)&v30[v31];
            v32 += v25;
            ++v31;
          }
          ++v28;
          v27 += v29;
        }
        while (v28 != v25);
      }
      uint64_t v77 = 0x100000001;
      *(void *)&long long v34 = 0x100000001;
      *((void *)&v34 + 1) = 0x100000001;
      long long v76 = v34;
      uint64_t v75 = &unk_1EDD18048;
      uint64_t v78 = (double *)v79;
      sub_18DFE2B44((uint64_t)&v80, (uint64_t)&v85, (uint64_t)&v75);
      double v36 = *v78;
      if (*((unsigned char *)this + 1208) && (unsigned int v37 = *((unsigned __int8 *)this + 1320), v37 <= 7) && ((1 << v37) & 0xCE) != 0) {
        uint64_t v38 = (double *)(*((void *)this + 146) + 936);
      }
      else {
        uint64_t v38 = (double *)(*((void *)this + 146) + 928);
      }
      *(double *)v17.i64 = cnstatistics::InverseNormal(v35, 1.0 - *v38, 0.0, sqrt(v36));
      *(unsigned char *)(a2 + 176) = 1;
      if (v20 >= *(double *)v17.i64)
      {
        *(unsigned char *)(a2 + 177) = 1;
        *(double *)(a2 + 184) = v20;
        *(double *)(a2 + 192) = v22;
        *(double *)(a2 + 200) = v23;
        *(double *)(a2 + 208) = v24;
        uint64_t v87 = 0x300000004;
        uint64_t v85 = &unk_1EDD19578;
        uint64_t v88 = (double *)v89;
        long long v86 = xmmword_18E1F6F90;
        sub_18DFE2CC8((uint64_t)&v85, 0.0);
        int v49 = v88;
        *uint64_t v88 = v22;
        uint64_t v50 = SHIDWORD(v86);
        v49[SHIDWORD(v86)] = v23;
        v49[2 * v50] = v24;
        v49[1] = v21 * (1.0 - v22 * v22);
        v49[(int)v50 + 1] = v21 * -(v22 * v23);
        int v51 = &v49[2 * (int)v50];
        v51[1] = v21 * -(v22 * v24);
        v49[2] = v21 * -(v23 * v22);
        v49[(int)v50 + 2] = v21 * (1.0 - v23 * v23);
        v51[2] = v21 * -(v23 * v24);
        v49[3] = v21 * -(v24 * v22);
        v49[(int)v50 + 3] = v21 * -(v24 * v23);
        v51[3] = v21 * (1.0 - v24 * v24);
        sub_18DFEE864((uint64_t)v90, (uint64_t)v103, (uint64_t)&v92, (uint64_t)&v92);
        uint64_t v77 = 0x300000004;
        long long v76 = xmmword_18E1F6F90;
        uint64_t v75 = &unk_1EDD19578;
        uint64_t v78 = (double *)v79;
        sub_18DFE2B44((uint64_t)&v85, (uint64_t)v90, (uint64_t)&v75);
        int v52 = DWORD1(v86);
        int v53 = v86;
        uint64_t v72 = 0x400000003;
        uint64_t v67 = &unk_1EDD18F48;
        uint64_t v73 = v74;
        int v68 = DWORD1(v86);
        int v69 = v86;
        int v70 = v86 * DWORD1(v86);
        int v71 = DWORD1(v86);
        if (DWORD1(v86))
        {
          int v54 = 0;
          int v55 = 0;
          int v56 = HIDWORD(v86);
          double v57 = v88;
          do
          {
            int v58 = v54;
            int v59 = v55;
            for (int j = v53; j; --j)
            {
              v74[v59] = *(void *)&v57[v58];
              v59 += v52;
              ++v58;
            }
            ++v55;
            v54 += v56;
          }
          while (v55 != v52);
        }
        uint64_t v82 = 0x400000004;
        long long v81 = xmmword_18E1F6F70;
        uint64_t v80 = &unk_1EDD195A8;
        uint64_t v83 = v84;
        sub_18DFE2B44((uint64_t)&v75, (uint64_t)&v67, (uint64_t)&v80);
        uint64_t v61 = v83;
        *(void *)(a2 + 216) = *v83;
        uint64_t v62 = SHIDWORD(v81);
        *(void *)(a2 + 224) = v61[SHIDWORD(v81)];
        *(void *)(a2 + 232) = v61[2 * v62];
        int v63 = 3 * v62;
        *(void *)(a2 + 240) = v61[3 * (int)v62];
        *(void *)(a2 + 248) = v61[(int)v62 + 1];
        int8x16_t v64 = &v61[2 * (int)v62];
        *(void *)(a2 + 256) = v64[1];
        *(void *)(a2 + 264) = v61[v63 + 1];
        *(void *)(a2 + 272) = v64[2];
        *(void *)(a2 + 280) = v61[v63 + 2];
        *(void *)(a2 + 288) = v61[v63 + 3];
      }
      else
      {
        *(double *)(a2 + 184) = v20;
        *(double *)(a2 + 216) = v36;
      }
      int v11 = v104;
      uint64_t v12 = v104;
      uint64_t v9 = v109;
      uint64_t v10 = v105;
      uint64_t v13 = 2 * v104;
      uint64_t v14 = v104 + 1;
      uint64_t v15 = (int)(v13 | 1);
      uint64_t v16 = (int)v13 + 2;
      uint64_t v44 = 3 * v104 + 3;
      uint64_t v45 = 4 * v104;
      uint64_t v47 = 5 * v104;
      uint64_t v46 = v45 + 4;
      uint64_t v48 = v47 + 5;
    }
    *(unsigned char *)(a2 + 296) = 1;
    *(double *)(a2 + 304) = *v9;
    *(double *)(a2 + 312) = v9[1];
    *(double *)(a2 + 320) = v9[2];
    *(void *)(a2 + 328) = *v10;
    *(void *)(a2 + 336) = v10[v12];
    *(void *)(a2 + 344) = v10[v13];
    *(void *)(a2 + 352) = v10[v14];
    *(void *)(a2 + 360) = v10[v15];
    *(void *)(a2 + 368) = v10[v16];
    *(unsigned char *)(a2 + 376) = 1;
    *(double *)(a2 + 384) = v9[3];
    *(double *)(a2 + 392) = v9[4];
    *(double *)(a2 + 400) = v9[5];
    *(void *)(a2 + 408) = v10[v44];
    *(void *)(a2 + 416) = v10[(int)(v45 | 3)];
    double v65 = &v10[(int)v47];
    *(void *)(a2 + 424) = v65[3];
    *(void *)(a2 + 432) = v10[v46];
    *(void *)(a2 + 440) = v65[4];
    *(void *)(a2 + 448) = v10[v48];
    *(unsigned char *)(a2 + 456) = 0;
    *(unsigned char *)(a2 + 816) = 1;
    *(double *)(a2 + 824) = v9[6] * 0.000001;
    *(double *)(a2 + 832) = v9[7] * 0.000001;
    v18.i64[0] = 0x3D719799812DEA11;
    *(double *)(a2 + 840) = *(double *)&v10[6 * v11 + 6] * 1.0e-12;
    *(double *)(a2 + 848) = *(double *)&v10[7 * v11 + 6] * 1.0e-12;
    *(double *)v17.i64 = *(double *)&v10[7 * v11 + 7] * 1.0e-12;
    *(void *)(a2 + 856) = v17.i64[0];
    *(unsigned char *)(a2 + 576) = 0;
    *(unsigned char *)(a2 + 656) = 0;
    *(unsigned char *)(a2 + 736) = 0;
    return raven::PopulateAllTimeFields(a2, (uint64_t)this + 136, v17, v18);
  }
  else
  {
    *(_DWORD *)(a2 + 100) = 0;
    *(_DWORD *)(a2 + 97) = 0;
    *(_DWORD *)(a2 + 178) = 0;
    *(_WORD *)(a2 + 182) = 0;
    *(_DWORD *)(a2 + 300) = 0;
    *(_DWORD *)(a2 + 297) = 0;
    *(_DWORD *)(a2 + 380) = 0;
    *(_DWORD *)(a2 + 377) = 0;
    *(_DWORD *)(a2 + 460) = 0;
    *(_DWORD *)(a2 + 457) = 0;
    *(_DWORD *)(a2 + 580) = 0;
    *(_DWORD *)(a2 + 577) = 0;
    *(_DWORD *)(a2 + 660) = 0;
    *(_DWORD *)(a2 + 657) = 0;
    *(_DWORD *)(a2 + 740) = 0;
    *(_DWORD *)(a2 + 737) = 0;
    *(_DWORD *)(a2 + 820) = 0;
    *(_DWORD *)(a2 + 817) = 0;
    *(_OWORD *)(a2 + 48) = v4;
    *(_OWORD *)(a2 + 64) = v4;
    *(_OWORD *)(a2 + 16) = v4;
    *(_OWORD *)(a2 + 32) = v4;
    *(_OWORD *)a2 = v4;
    *(void *)(a2 + 80) = 0;
    *(void *)(a2 + 88) = 0x7FF8000000000000;
    *(unsigned char *)(a2 + 96) = 0;
    *(int64x2_t *)(a2 + 104) = v6;
    *(int64x2_t *)(a2 + 120) = v6;
    *(int64x2_t *)(a2 + 136) = v6;
    *(int64x2_t *)(a2 + 152) = v6;
    *(void *)(a2 + 168) = 0x7FF8000000000000;
    *(_WORD *)(a2 + 176) = 0;
    *(int64x2_t *)(a2 + 184) = v6;
    *(int64x2_t *)(a2 + 200) = v6;
    *(int64x2_t *)(a2 + 216) = v6;
    *(int64x2_t *)(a2 + 232) = v6;
    *(int64x2_t *)(a2 + 248) = v6;
    *uint64_t v5 = v6;
    v5[1] = v6;
    *(unsigned char *)(a2 + 296) = 0;
    *(int64x2_t *)(a2 + 304) = v6;
    *(int64x2_t *)(a2 + 320) = v6;
    *(int64x2_t *)(a2 + 336) = v6;
    *(int64x2_t *)(a2 + 352) = v6;
    *(void *)(a2 + 368) = 0x7FF8000000000000;
    *(unsigned char *)(a2 + 376) = 0;
    *(int64x2_t *)(a2 + 384) = v6;
    *(int64x2_t *)(a2 + 400) = v6;
    *(int64x2_t *)(a2 + 416) = v6;
    *(int64x2_t *)(a2 + 432) = v6;
    *(void *)(a2 + 448) = 0x7FF8000000000000;
    *(unsigned char *)(a2 + 456) = 0;
    *(int64x2_t *)(a2 + 464) = v6;
    *(int64x2_t *)(a2 + 480) = v6;
    *(int64x2_t *)(a2 + 496) = v6;
    *(int64x2_t *)(a2 + 512) = v6;
    *(int64x2_t *)(a2 + 528) = v6;
    *(int64x2_t *)(a2 + 544) = v6;
    *(int64x2_t *)(a2 + 560) = v6;
    *(unsigned char *)(a2 + 576) = 0;
    v5[20] = v6;
    v5[21] = v6;
    v5[22] = v6;
    v5[23] = v6;
    *(void *)(a2 + 648) = 0x7FF8000000000000;
    *(unsigned char *)(a2 + 656) = 0;
    v5[25] = v6;
    v5[26] = v6;
    v5[27] = v6;
    v5[28] = v6;
    *(void *)(a2 + 728) = 0x7FF8000000000000;
    *(unsigned char *)(a2 + 736) = 0;
    v5[30] = v6;
    v5[31] = v6;
    v5[32] = v6;
    v5[33] = v6;
    *(void *)(a2 + 808) = 0x7FF8000000000000;
    *(unsigned char *)(a2 + 816) = 0;
    v5[35] = v6;
    v5[36] = v6;
    *(void *)(a2 + 856) = 0x7FF8000000000000;
    long long v39 = *(_OWORD *)((char *)this + 152);
    *(_OWORD *)a2 = *(_OWORD *)((char *)this + 136);
    *(_OWORD *)(a2 + 16) = v39;
    long long v40 = *(_OWORD *)((char *)this + 216);
    *(_OWORD *)(a2 + 64) = *(_OWORD *)((char *)this + 200);
    *(_OWORD *)(a2 + 80) = v40;
    int8x16_t v41 = *(int8x16_t *)((char *)this + 184);
    int8x16_t v42 = *(int8x16_t *)((char *)this + 168);
    *(int8x16_t *)(a2 + 32) = v42;
    *(int8x16_t *)(a2 + 48) = v41;
    return raven::PopulateAllTimeFields(a2, (uint64_t)this + 136, v41, v42);
  }
}

uint64_t raven::RavenConvergenceEstimator::GetRavenStatus@<X0>(raven::RavenConvergenceEstimator *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = a2 + 8;
  *(void *)(a2 + 1056) = 0;
  *(_OWORD *)(a2 + 1040) = 0u;
  *(_OWORD *)(a2 + 1008) = 0u;
  *(_OWORD *)(a2 + 1024) = 0u;
  *(_OWORD *)(a2 + 992) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_OWORD *)(a2 + 144) = 0u;
  *(_WORD *)(a2 + 160) = 0;
  *(int64x2_t *)(a2 + 960) = vdupq_n_s64(0x7FF8000000000000uLL);
  *(void *)(a2 + 976) = 0;
  *(void *)(a2 + 984) = 0x7FF8000000000000;
  uint64_t v5 = a2 + 164;
  bzero((void *)(a2 + 164), 0x318uLL);
  *(unsigned char *)a2 = *((unsigned char *)this + 280);
  int v12 = *((unsigned __int8 *)this + 56);
  *(_WORD *)(a2 + 104) = v12;
  if (*((unsigned char *)this + 58))
  {
    long long v61 = 0u;
    long long v62 = 0u;
    long long v59 = 0u;
    long long v60 = 0u;
    *(_OWORD *)(v4 + 32) = 0u;
    *(_OWORD *)(v4 + 48) = 0u;
    *(_OWORD *)(v4 + 64) = 0u;
    long long v13 = *((_OWORD *)this + 5);
    *(void *)(v4 + 80) = 0;
    *(_OWORD *)uint64_t v4 = v13;
    *(_OWORD *)(v4 + 16) = 0u;
    *(void *)(a2 + 96) = 0x7FF8000000000000;
    sub_18E030680((double *)a2, v12, 1.0, v6, v7, v8, v9, v10, v11);
    *(_OWORD *)(a2 + 136) = *((_OWORD *)this + 16);
    *(void *)(a2 + 152) = *((void *)this + 34);
    long long v14 = *(_OWORD *)((char *)this + 440);
    *(_OWORD *)(v5 + 96) = *(_OWORD *)((char *)this + 424);
    *(_OWORD *)(v5 + 112) = v14;
    *(_DWORD *)(v5 + 128) = *((_DWORD *)this + 114);
    long long v15 = *(_OWORD *)((char *)this + 376);
    *(_OWORD *)(v5 + 32) = *(_OWORD *)((char *)this + 360);
    *(_OWORD *)(v5 + 48) = v15;
    long long v16 = *(_OWORD *)((char *)this + 408);
    *(_OWORD *)(v5 + 64) = *(_OWORD *)((char *)this + 392);
    *(_OWORD *)(v5 + 80) = v16;
    long long v17 = *(_OWORD *)((char *)this + 344);
    *(_OWORD *)uint64_t v5 = *(_OWORD *)((char *)this + 328);
    *(_OWORD *)(v5 + 16) = v17;
    long long v18 = *(_OWORD *)((char *)this + 572);
    *(_OWORD *)(a2 + 392) = *(_OWORD *)((char *)this + 556);
    *(_OWORD *)(a2 + 408) = v18;
    *(_DWORD *)(a2 + 424) = *((_DWORD *)this + 147);
    long long v19 = *(_OWORD *)((char *)this + 508);
    *(_OWORD *)(a2 + 328) = *(_OWORD *)((char *)this + 492);
    *(_OWORD *)(a2 + 344) = v19;
    long long v20 = *(_OWORD *)((char *)this + 540);
    *(_OWORD *)(a2 + 360) = *(_OWORD *)((char *)this + 524);
    *(_OWORD *)(a2 + 376) = v20;
    long long v21 = *(_OWORD *)((char *)this + 476);
    *(_OWORD *)(a2 + 296) = *(_OWORD *)((char *)this + 460);
    *(_OWORD *)(a2 + 312) = v21;
    long long v22 = *((_OWORD *)this + 44);
    *(_OWORD *)(a2 + 524) = *((_OWORD *)this + 43);
    *(_OWORD *)(a2 + 540) = v22;
    *(_DWORD *)(a2 + 556) = *((_DWORD *)this + 180);
    long long v23 = *((_OWORD *)this + 40);
    *(_OWORD *)(a2 + 460) = *((_OWORD *)this + 39);
    *(_OWORD *)(a2 + 476) = v23;
    long long v24 = *((_OWORD *)this + 42);
    *(_OWORD *)(a2 + 492) = *((_OWORD *)this + 41);
    *(_OWORD *)(a2 + 508) = v24;
    long long v25 = *((_OWORD *)this + 38);
    *(_OWORD *)(a2 + 428) = *((_OWORD *)this + 37);
    *(_OWORD *)(a2 + 444) = v25;
    long long v26 = *(_OWORD *)((char *)this + 836);
    *(_OWORD *)(a2 + 656) = *(_OWORD *)((char *)this + 820);
    *(_OWORD *)(a2 + 672) = v26;
    *(_DWORD *)(a2 + 688) = *((_DWORD *)this + 213);
    long long v27 = *(_OWORD *)((char *)this + 772);
    *(_OWORD *)(a2 + 592) = *(_OWORD *)((char *)this + 756);
    *(_OWORD *)(a2 + 608) = v27;
    long long v28 = *(_OWORD *)((char *)this + 804);
    *(_OWORD *)(a2 + 624) = *(_OWORD *)((char *)this + 788);
    *(_OWORD *)(a2 + 640) = v28;
    long long v29 = *(_OWORD *)((char *)this + 740);
    *(_OWORD *)(a2 + 560) = *(_OWORD *)((char *)this + 724);
    *(_OWORD *)(a2 + 576) = v29;
    long long v30 = *(_OWORD *)((char *)this + 968);
    *(_OWORD *)(a2 + 788) = *(_OWORD *)((char *)this + 952);
    *(_OWORD *)(a2 + 804) = v30;
    *(_DWORD *)(a2 + 820) = *((_DWORD *)this + 246);
    long long v31 = *(_OWORD *)((char *)this + 904);
    *(_OWORD *)(a2 + 724) = *(_OWORD *)((char *)this + 888);
    *(_OWORD *)(a2 + 740) = v31;
    long long v32 = *(_OWORD *)((char *)this + 936);
    *(_OWORD *)(a2 + 756) = *(_OWORD *)((char *)this + 920);
    *(_OWORD *)(a2 + 772) = v32;
    long long v33 = *(_OWORD *)((char *)this + 872);
    *(_OWORD *)(a2 + 692) = *(_OWORD *)((char *)this + 856);
    *(_OWORD *)(a2 + 708) = v33;
    long long v34 = *(_OWORD *)((char *)this + 1100);
    *(_OWORD *)(a2 + 920) = *(_OWORD *)((char *)this + 1084);
    *(_OWORD *)(a2 + 936) = v34;
    *(_DWORD *)(a2 + 952) = *((_DWORD *)this + 279);
    long long v35 = *(_OWORD *)((char *)this + 1036);
    *(_OWORD *)(a2 + 856) = *(_OWORD *)((char *)this + 1020);
    *(_OWORD *)(a2 + 872) = v35;
    long long v36 = *(_OWORD *)((char *)this + 1068);
    *(_OWORD *)(a2 + 888) = *(_OWORD *)((char *)this + 1052);
    *(_OWORD *)(a2 + 904) = v36;
    int8x16_t v38 = *(int8x16_t *)((char *)this + 988);
    int8x16_t v37 = *(int8x16_t *)((char *)this + 1004);
    *(int8x16_t *)(a2 + 824) = v38;
    *(int8x16_t *)(a2 + 840) = v37;
    *(void *)(a2 + 120) = CNTimeSpan::operator-((uint64_t)this + 80, (void *)this + 8, v37, v38);
    *(void *)(a2 + 128) = v39;
    int v40 = (*(uint64_t (**)(raven::RavenConvergenceEstimator *))(*(void *)this + 152))(this);
    int v41 = (*(uint64_t (**)(raven::RavenConvergenceEstimator *))(*(void *)this + 144))(this);
    int8x16_t v42 = (cnprint::CNPrinter *)(*(uint64_t (**)(raven::RavenConvergenceEstimator *))(*(void *)this + 136))(this);
    int v43 = (int)v42;
    if (v41 && v40 && (v42 & 1) != 0)
    {
      char v44 = 2;
    }
    else
    {
      char v44 = 1;
      if (cnprint::CNPrinter::GetLogLevel(v42) <= 1)
      {
        v58[0] = 12;
        unsigned __int8 v57 = 1;
        unsigned __int8 v49 = cnprint::CNLogFormatter::FormatGeneral((const void **)this + 311, "Estimator unhealthy,observable,%d,sane,%d,consistent,%d", v41, v40, v43);
        if (*((char *)this + 2511) >= 0) {
          LOBYTE(v55) = v49;
        }
        else {
          uint64_t v55 = *((void *)this + 311);
        }
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v58, &v57, "%s", v50, v51, v52, v53, v54, v55);
      }
    }
    *(unsigned char *)(a2 + 105) = v44;
    *(double *)(a2 + 112) = 1.0
                          - (*(double (**)(raven::RavenConvergenceEstimator *))(*(void *)this + 56))(this);
    *(_WORD *)(a2 + 160) = 0;
    *(double *)(a2 + 992) = raven::RavenEstimator::GetPriorWeight(this);
    *(double *)(a2 + 1000) = raven::RavenEstimator::GetGNSSWeight(this);
    *(double *)(a2 + 1008) = raven::RavenEstimator::GetWiFiWeight(this);
    *(double *)(a2 + 1016) = raven::RavenEstimator::GetCellWeight(this);
    *(double *)(a2 + 1024) = raven::RavenEstimator::GetIndoorWeight(this);
    *(double *)(a2 + 1032) = raven::RavenEstimator::GetAccessoryWeight(this);
    v48.i64[0] = *((void *)this + 40);
    *(void *)(a2 + 976) = *((void *)this + 39);
    *(void *)(a2 + 968) = *((void *)this + 1017);
    v47.i64[0] = *((void *)this + 1019);
    *(void *)(a2 + 960) = v47.i64[0];
    *(void *)(a2 + 984) = v48.i64[0];
  }
  else
  {
    long long v45 = *(_OWORD *)((char *)this + 184);
    *(_OWORD *)(v4 + 32) = *(_OWORD *)((char *)this + 168);
    *(_OWORD *)(v4 + 48) = v45;
    long long v46 = *(_OWORD *)((char *)this + 216);
    *(_OWORD *)(v4 + 64) = *(_OWORD *)((char *)this + 200);
    *(_OWORD *)(v4 + 80) = v46;
    int8x16_t v47 = *(int8x16_t *)((char *)this + 136);
    int8x16_t v48 = *(int8x16_t *)((char *)this + 152);
    *(int8x16_t *)uint64_t v4 = v47;
    *(int8x16_t *)(v4 + 16) = v48;
  }

  return raven::PopulateAllTimeFields(v4, (uint64_t)this + 136, v47, v48);
}

uint64_t raven::RavenConvergenceEstimator::HandleEvent(raven::RavenConvergenceEstimator *this, const raven::AccessoryVehicleSpeedEvent *a2)
{
  if (!*((unsigned char *)this + 57)) {
    return 0xFFFFFFFFLL;
  }
  if (!*((unsigned char *)this + 58)) {
    return 0;
  }
  long long v4 = *(_OWORD *)((char *)a2 + 56);
  long long v90 = *(_OWORD *)((char *)a2 + 40);
  long long v91 = v4;
  long long v5 = *(_OWORD *)((char *)a2 + 88);
  long long v92 = *(_OWORD *)((char *)a2 + 72);
  long long v93 = v5;
  int8x16_t v6 = *(int8x16_t *)((char *)a2 + 24);
  int8x16_t v88 = *(int8x16_t *)((char *)a2 + 8);
  int8x16_t v89 = v6;
  uint64_t v7 = (cnprint::CNPrinter *)raven::PopulateAllTimeFields((uint64_t)&v88, (uint64_t)this + 136, v88, v6);
  if (!*((_DWORD *)a2 + 51) || *((void *)a2 + 30) == *((void *)a2 + 29))
  {
    if (cnprint::CNPrinter::GetLogLevel(v7) <= 1)
    {
      LOWORD(v49) = 12;
      LOBYTE(v52) = 1;
      uint64_t v53 = (void *)(*(uint64_t (**)(const raven::AccessoryVehicleSpeedEvent *))(*(void *)a2 + 16))(a2);
      *(void *)&long long v54 = v18;
      cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)&v53, "AccessoryVehicleSpeed,rejected,0 speed samples,iOSTime,%.2lf", *(double *)&v90 + (double)v89.i64[1]);
      if (*((char *)this + 2511) >= 0) {
        LOBYTE(v24) = (_BYTE)this - 72;
      }
      else {
        uint64_t v24 = *((void *)this + 311);
      }
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v49, (unsigned __int8 *)&v52, "%s", v19, v20, v21, v22, v23, v24);
    }
    return 0;
  }
  if (!raven::RavenEstimator::IsZUPTAppropriate(this, a2))
  {
    long long v54 = 0uLL;
    uint64_t v53 = &unk_1EDD13A40;
    char v55 = 0;
    uint64_t v56 = 0;
    uint64_t v57 = 0;
    char v58 = 0;
    uint64_t v59 = 0;
    uint64_t v60 = 0;
    char v61 = 0;
    uint64_t v62 = 0;
    uint64_t v63 = 0;
    int8x16_t v64 = (int8x16_t)vdupq_n_s64(0x7FF8000000000000uLL);
    double v65 = NAN;
    long long v26 = (cnprint::CNPrinter *)sub_18E03183C((uint64_t)a2, (uint64_t)&v53, v64, v8);
    if (v26)
    {
      if (cnprint::CNPrinter::GetLogLevel(v26) <= 1)
      {
        __int16 v52 = 12;
        unsigned __int8 v51 = 1;
        uint64_t v49 = (*(uint64_t (**)(const raven::AccessoryVehicleSpeedEvent *))(*(void *)a2 + 16))(a2);
        uint64_t v50 = v27;
        char v28 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)&v49, "AccessoryVehicleSpeed,rejected,unable to add USPD,iOSTime,%.2lf", *(double *)&v90 + (double)v89.i64[1]);
        if (*((char *)this + 2511) >= 0) {
          LOBYTE(v17) = v28;
        }
        else {
          uint64_t v17 = *((void *)this + 311);
        }
        goto LABEL_27;
      }
      return 0xFFFFFFFFLL;
    }
    if (cnprint::CNPrinter::GetLogLevel(v26) <= 1)
    {
      __int16 v52 = 12;
      unsigned __int8 v51 = 1;
      uint64_t v49 = (*(uint64_t (**)(const raven::AccessoryVehicleSpeedEvent *))(*(void *)a2 + 16))(a2);
      uint64_t v50 = v32;
      char v33 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)&v49, "AccessoryVehicleSpeed,accepted,USPD,iOSTime,%.2lf,speed,%.2lf,speedUnc,%.2lf", *(double *)&v90 + (double)v89.i64[1], *(double *)&v64.i64[1], v65);
      if (*((char *)this + 2511) >= 0) {
        LOBYTE(v39) = v33;
      }
      else {
        uint64_t v39 = *((void *)this + 311);
      }
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v52, &v51, "%s", v34, v35, v36, v37, v38, v39);
    }
    raven::RavenConvergenceEstimator::HandleEvent(this, (const raven::UserSpeedEvent *)&v53);
    return 0;
  }
  long long v54 = 0uLL;
  uint64_t v53 = &unk_1EDD13880;
  char v55 = 0;
  uint64_t v56 = 0;
  uint64_t v57 = 0;
  char v58 = 0;
  uint64_t v59 = 0;
  uint64_t v60 = 0;
  char v61 = 0;
  uint64_t v62 = 0;
  uint64_t v63 = 0;
  double v65 = 0.0;
  int8x16_t v64 = (int8x16_t)0x7FF8000000000000uLL;
  char v66 = 0;
  uint64_t v67 = 0;
  uint64_t v68 = 0;
  char v69 = 0;
  uint64_t v70 = 0;
  uint64_t v71 = 0;
  char v72 = 0;
  uint64_t v73 = 0;
  uint64_t v74 = 0;
  uint64_t v75 = 0x7FF8000000000000;
  int v76 = 0;
  int8x16_t v77 = (int8x16_t)vdupq_n_s64(0x7FF8000000000000uLL);
  int8x16_t v78 = v77;
  int8x16_t v79 = v77;
  int8x16_t v80 = v77;
  uint64_t v81 = 0x7FF8000000000000;
  char v82 = 0;
  int8x16_t v83 = v77;
  int8x16_t v84 = v77;
  int8x16_t v85 = v77;
  int8x16_t v86 = v77;
  uint64_t v87 = 0x7FF8000000000000;
  uint64_t v9 = (cnprint::CNPrinter *)sub_18E0316BC((uint64_t)a2, (uint64_t)&v53, v77, v8);
  if (v9)
  {
    if (cnprint::CNPrinter::GetLogLevel(v9) <= 1)
    {
      __int16 v52 = 12;
      unsigned __int8 v51 = 1;
      uint64_t v49 = (*(uint64_t (**)(const raven::AccessoryVehicleSpeedEvent *))(*(void *)a2 + 16))(a2);
      uint64_t v50 = v10;
      char v11 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)&v49, "AccessoryVehicleSpeed,rejected,unable to add ZUPT 2,iOSTime,%.2lf", *(double *)&v90 + (double)v89.i64[1]);
      if (*((char *)this + 2511) >= 0) {
        LOBYTE(v17) = v11;
      }
      else {
        uint64_t v17 = *((void *)this + 311);
      }
LABEL_27:
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v52, &v51, "%s", v12, v13, v14, v15, v16, v17);
      return 0xFFFFFFFFLL;
    }
    return 0xFFFFFFFFLL;
  }
  long long v29 = (cnprint::CNPrinter *)(*(uint64_t (**)(raven::RavenConvergenceEstimator *, void **))(*(void *)this + 320))(this, &v53);
  if (!v29)
  {
    int v40 = *((unsigned __int8 *)this + 232);
    *((_OWORD *)this + 15) = v54;
    if (!v40) {
      *((unsigned char *)this + 232) = 1;
    }
    if (cnprint::CNPrinter::GetLogLevel(v29) <= 1)
    {
      __int16 v52 = 12;
      unsigned __int8 v51 = 1;
      uint64_t v49 = (*(uint64_t (**)(const raven::AccessoryVehicleSpeedEvent *))(*(void *)a2 + 16))(a2);
      uint64_t v50 = v41;
      char v42 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)&v49, "AccessoryVehicleSpeed,accepted,ZUPT,iOSTime,%.2lf,speed,%.2lf", *(double *)&v90 + (double)v89.i64[1], *(double *)(*((void *)a2 + 30) - 8));
      if (*((char *)this + 2511) >= 0) {
        LOBYTE(v48) = v42;
      }
      else {
        uint64_t v48 = *((void *)this + 311);
      }
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v52, &v51, "%s", v43, v44, v45, v46, v47, v48);
    }
    return 0;
  }
  if (cnprint::CNPrinter::GetLogLevel(v29) <= 1)
  {
    __int16 v52 = 12;
    unsigned __int8 v51 = 1;
    uint64_t v49 = (*(uint64_t (**)(const raven::AccessoryVehicleSpeedEvent *))(*(void *)a2 + 16))(a2);
    uint64_t v50 = v30;
    char v31 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)&v49, "AccessoryVehicleSpeed,rejected,unable to add ZUPT 1,iOSTime,%.2lf", *(double *)&v90 + (double)v89.i64[1]);
    if (*((char *)this + 2511) >= 0) {
      LOBYTE(v17) = v31;
    }
    else {
      uint64_t v17 = *((void *)this + 311);
    }
    goto LABEL_27;
  }
  return 0xFFFFFFFFLL;
}

uint64_t raven::RavenConvergenceEstimator::HandleEvent(raven::RavenConvergenceEstimator *this, const raven::UserSpeedEvent *a2)
{
  v81[4] = *(void (**)(uint64_t))MEMORY[0x1E4F143B8];
  if (!*((unsigned char *)this + 57) || !*((unsigned char *)this + 58)) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v70 = 0x100000003;
  uint64_t v68 = &unk_1EDD18D98;
  *(void *)&long long v4 = 0x100000001;
  *((void *)&v4 + 1) = 0x100000001;
  long long v69 = v4;
  uint64_t v71 = &v72;
  uint64_t v72 = *((void *)a2 + 13);
  uint64_t v65 = 0x300000003;
  uint64_t v63 = &unk_1EDD18EE8;
  long long v64 = v4;
  char v66 = &v67;
  double v67 = *((double *)a2 + 14) * *((double *)a2 + 14);
  sub_18E06BF24(v60, 26);
  v60[0] = &unk_1EDD154A8;
  *(void *)&long long v62 = (*(uint64_t (**)(const raven::UserSpeedEvent *))(*(void *)a2 + 16))(a2);
  *((void *)&v62 + 1) = v5;
  *(_OWORD *)uint64_t v59 = v62;
  if ((v64 & 0x80000000) != 0) {
    __assert_rtn("Zeros", "cnmatrix.h", 3098, "nr >= 0");
  }
  uint64_t v77 = 0x100000003;
  uint64_t v73 = &unk_1EDD18D98;
  int8x16_t v78 = &v79;
  uint64_t v74 = v64 | 0x100000000;
  int v75 = v64;
  int v76 = v64;
  int8x16_t v6 = (cnprint::CNPrinter *)sub_18DFE2CC8((uint64_t)&v73, 0.0);
  if (*((unsigned char *)this + 8336))
  {
    if (*((_DWORD *)this + 3568) == 174)
    {
      LOWORD(v81[0]) = 2;
      unsigned __int8 v80 = 2;
      double v55 = v59[1] + (double)*(uint64_t *)&v59[0];
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v81, &v80, "MeasurementAccumulator::AddMeasurement() failed - Out of space,t_meas,%.3lf", v7, v8, v9, v10, v11, SLOBYTE(v55));
    }
    else if (*((unsigned char *)this + 8337))
    {
      if (cnprint::CNPrinter::GetLogLevel(v6) <= 1)
      {
        LOWORD(v81[0]) = 2;
        unsigned __int8 v80 = 1;
        double v57 = v59[1] + (double)*(uint64_t *)&v59[0];
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v81, &v80, "MeasurementAccumulator::AddMeasurement() failed - Locked,t_meas,%.3lf", v18, v19, v20, v21, v22, SLOBYTE(v57));
      }
    }
    else
    {
      BOOL v23 = sub_18DEE4CB8(v59, (double *)this + 1043);
      if (v23)
      {
        if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v23) <= 1)
        {
          LOWORD(v81[0]) = 2;
          unsigned __int8 v80 = 1;
          double v58 = v59[1] + (double)*(uint64_t *)&v59[0];
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)v81, &v80, "MeasurementAccumulator::AddMeasurement() failed - Measurement too old,t_meas,%.3lf,t_start,%.3lf", v24, v25, v26, v27, v28, SLOBYTE(v58));
        }
      }
      else
      {
        v81[0] = 0;
        v81[1] = 0;
        sub_18E115DC4(v81, (uint64_t)v60);
        long long v29 = sub_18E06C110((uint64_t *)this + 1047, v81);
        sub_18E067C60((uint64_t (**)(void, void, void, void, void))v81);
        uint64_t v30 = *((int *)this + 3568);
        uint64_t v31 = (v30 + 1);
        if (*((void *)this + 1049) == v31)
        {
          *((_DWORD *)this + 3568) = v31;
          *((_DWORD *)this + 2102) = v31;
          *((_DWORD *)this + 2103) = 1;
          *((_DWORD *)this + 2104) = v31;
          *((_DWORD *)this + 2105) = v31;
          *((_DWORD *)this + 2808) = v31;
          *((_DWORD *)this + 2809) = 1;
          *((_DWORD *)this + 2810) = v31;
          *((_DWORD *)this + 2811) = v31;
          *((_DWORD *)this + 2992) = v31;
          *((_DWORD *)this + 2993) = 1;
          *((_DWORD *)this + 2994) = v31;
          *((_DWORD *)this + 2995) = v31;
          *((_DWORD *)this + 3350) = v31;
          *((_DWORD *)this + 3351) = 1;
          *((_DWORD *)this + 3352) = v31;
          *((_DWORD *)this + 3353) = v31;
          *((_DWORD *)this + 3362) = v31;
          *((_DWORD *)this + 3363) = 1;
          *((_DWORD *)this + 3364) = v31;
          *((_DWORD *)this + 3365) = v31;
          *((_DWORD *)this + 3546) = v31;
          *((_DWORD *)this + 3547) = 1;
          *((_DWORD *)this + 3548) = v31;
          *((_DWORD *)this + 3549) = v31;
          *((_DWORD *)this + 3558) = v31;
          *((_DWORD *)this + 3559) = 1;
          *((_DWORD *)this + 3560) = v31;
          *((_DWORD *)this + 3561) = v31;
          *((_DWORD *)this + 3572) = v31;
          *((_DWORD *)this + 3573) = 1;
          *((_DWORD *)this + 3574) = v31;
          *((_DWORD *)this + 3575) = v31;
          *((_DWORD *)this + 3930) = v31;
          *((_DWORD *)this + 3931) = 1;
          *((_DWORD *)this + 3932) = v31;
          *((_DWORD *)this + 3933) = v31;
          *(_OWORD *)(*((void *)this + 1054) + 16 * v30) = *(_OWORD *)v59;
          if (v69 <= DWORD1(v69)) {
            int v32 = DWORD1(v69);
          }
          else {
            int v32 = v69;
          }
          if (DWORD1(v69)) {
            BOOL v33 = v69 == 0;
          }
          else {
            BOOL v33 = 1;
          }
          if (v33) {
            int v34 = 0;
          }
          else {
            int v34 = v32;
          }
          *(_DWORD *)(*((void *)this + 1407) + 4 * v30) = v34;
          sub_18DFE2F24(*((void *)this + 1678) + (v30 << 6), (uint64_t)&v68);
          if (v74 <= HIDWORD(v74)) {
            int v35 = HIDWORD(v74);
          }
          else {
            int v35 = v74;
          }
          if (HIDWORD(v74)) {
            BOOL v36 = v74 == 0;
          }
          else {
            BOOL v36 = 1;
          }
          if (v36) {
            int v37 = 0;
          }
          else {
            int v37 = v35;
          }
          *(_DWORD *)(*((void *)this + 1684) + 4 * v30) = v37;
          sub_18DFE2F24(*((void *)this + 1776) + (v30 << 6), (uint64_t)&v73);
          __n128 v38 = sub_18DFE2F24(*((void *)this + 1782) + 112 * (int)v30, (uint64_t)&v63);
          *(void *)(*((void *)this + 1789) + 8 * v30) = sub_18E10D324;
          if (*v29) {
            uint64_t v39 = ((uint64_t (*)(uint64_t, void *, void, void *, void *, __n128))*v29)(3, v29, 0, &unk_1EDD05C08, &std::__any_imp::__unique_typeinfo<raven::h_UserSpeedArgs_RavenConvergence>::__id, v38);
          }
          else {
            uint64_t v39 = 0;
          }
          uint64_t v12 = 0;
          *(void *)(*((void *)this + 1968) + 8 * v30) = v39;
          goto LABEL_42;
        }
        LOWORD(v81[0]) = 2;
        unsigned __int8 v80 = 4;
        char v40 = (*(uint64_t (**)(void *))(v60[0] + 16))(v60);
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v81, &v80, "MeasurementAccumulator::AddMeasurement() failed - allocation failed,meas_type,%d,t_meas,%.3lf", v41, v42, v43, v44, v45, v40);
      }
    }
  }
  else if (cnprint::CNPrinter::GetLogLevel(v6) <= 1)
  {
    LOWORD(v81[0]) = 2;
    unsigned __int8 v80 = 1;
    double v56 = v59[1] + (double)*(uint64_t *)&v59[0];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v81, &v80, "MeasurementAccumulator::AddMeasurement() failed - Not initialized,t_meas,%.3lf", v13, v14, v15, v16, v17, SLOBYTE(v56));
  }
  LOWORD(v81[0]) = 12;
  unsigned __int8 v80 = 4;
  uint64_t v73 = (void *)(*(uint64_t (**)(const raven::UserSpeedEvent *))(*(void *)a2 + 16))(a2);
  uint64_t v74 = v46;
  char v47 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)&v73, "Could not add measurement - user speed");
  if (*((char *)this + 2511) >= 0) {
    LOBYTE(v53) = v47;
  }
  else {
    uint64_t v53 = *((void *)this + 311);
  }
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)v81, &v80, "%s", v48, v49, v50, v51, v52, v53);
  uint64_t v12 = 0xFFFFFFFFLL;
LABEL_42:
  v60[0] = &unk_1EDD0A4E8;
  if (v61 < 0) {
    operator delete((void *)v60[2]);
  }
  return v12;
}

void sub_18E0FF120(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2) {
    sub_18DEDD524(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t raven::RavenConvergenceEstimator::HandleEvent(raven::RavenConvergenceEstimator *this, const raven::AltitudeEvent *a2)
{
  v85[4] = *(void (**)(uint64_t))MEMORY[0x1E4F143B8];
  if (!*((unsigned char *)this + 57)) {
    return 0xFFFFFFFFLL;
  }
  if (!*((unsigned char *)this + 58)) {
    return 0;
  }
  uint64_t v74 = 0x100000003;
  uint64_t v72 = &unk_1EDD18D98;
  *(void *)&long long v4 = 0x100000001;
  *((void *)&v4 + 1) = 0x100000001;
  long long v73 = v4;
  int v75 = &v76;
  uint64_t v76 = *((void *)a2 + 13);
  uint64_t v69 = 0x300000003;
  double v67 = &unk_1EDD18EE8;
  long long v68 = v4;
  uint64_t v70 = &v71;
  double v71 = *((double *)a2 + 14) * *((double *)a2 + 14);
  sub_18E06BF24(v63, 2);
  v63[0] = &unk_1EDD15340;
  uint64_t v65 = (*(uint64_t (**)(const raven::AltitudeEvent *))(*(void *)a2 + 16))(a2);
  uint64_t v66 = v5;
  uint64_t v7 = (*(uint64_t (**)(const raven::AltitudeEvent *))(*(void *)a2 + 16))(a2);
  *(void *)&long long v62 = v7;
  *((double *)&v62 + 1) = v6;
  if ((v68 & 0x80000000) != 0) {
    __assert_rtn("Zeros", "cnmatrix.h", 3098, "nr >= 0");
  }
  uint64_t v81 = 0x100000003;
  uint64_t v77 = &unk_1EDD18D98;
  char v82 = &v83;
  double v8 = v6;
  uint64_t v78 = v68 | 0x100000000;
  int v79 = v68;
  int v80 = v68;
  uint64_t v9 = (cnprint::CNPrinter *)sub_18DFE2CC8((uint64_t)&v77, 0.0);
  if (*((unsigned char *)this + 8336))
  {
    if (*((_DWORD *)this + 3568) == 174)
    {
      LOWORD(v85[0]) = 2;
      unsigned __int8 v84 = 2;
      double v58 = v8 + (double)v7;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v85, &v84, "MeasurementAccumulator::AddMeasurement() failed - Out of space,t_meas,%.3lf", v10, v11, v12, v13, v14, SLOBYTE(v58));
    }
    else if (*((unsigned char *)this + 8337))
    {
      if (cnprint::CNPrinter::GetLogLevel(v9) <= 1)
      {
        LOWORD(v85[0]) = 2;
        unsigned __int8 v84 = 1;
        double v60 = v8 + (double)v7;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v85, &v84, "MeasurementAccumulator::AddMeasurement() failed - Locked,t_meas,%.3lf", v21, v22, v23, v24, v25, SLOBYTE(v60));
      }
    }
    else
    {
      BOOL v26 = sub_18DEE4CB8((double *)&v62, (double *)this + 1043);
      if (v26)
      {
        if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v26) <= 1)
        {
          LOWORD(v85[0]) = 2;
          unsigned __int8 v84 = 1;
          double v61 = *((double *)&v62 + 1) + (double)(uint64_t)v62;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)v85, &v84, "MeasurementAccumulator::AddMeasurement() failed - Measurement too old,t_meas,%.3lf,t_start,%.3lf", v27, v28, v29, v30, v31, SLOBYTE(v61));
        }
      }
      else
      {
        v85[0] = 0;
        v85[1] = 0;
        sub_18E113118(v85, (uint64_t)v63);
        int v32 = sub_18E06C110((uint64_t *)this + 1047, v85);
        sub_18E067C60((uint64_t (**)(void, void, void, void, void))v85);
        uint64_t v33 = *((int *)this + 3568);
        uint64_t v34 = (v33 + 1);
        if (*((void *)this + 1049) == v34)
        {
          *((_DWORD *)this + 3568) = v34;
          *((_DWORD *)this + 2102) = v34;
          *((_DWORD *)this + 2103) = 1;
          *((_DWORD *)this + 2104) = v34;
          *((_DWORD *)this + 2105) = v34;
          *((_DWORD *)this + 2808) = v34;
          *((_DWORD *)this + 2809) = 1;
          *((_DWORD *)this + 2810) = v34;
          *((_DWORD *)this + 2811) = v34;
          *((_DWORD *)this + 2992) = v34;
          *((_DWORD *)this + 2993) = 1;
          *((_DWORD *)this + 2994) = v34;
          *((_DWORD *)this + 2995) = v34;
          *((_DWORD *)this + 3350) = v34;
          *((_DWORD *)this + 3351) = 1;
          *((_DWORD *)this + 3352) = v34;
          *((_DWORD *)this + 3353) = v34;
          *((_DWORD *)this + 3362) = v34;
          *((_DWORD *)this + 3363) = 1;
          *((_DWORD *)this + 3364) = v34;
          *((_DWORD *)this + 3365) = v34;
          *((_DWORD *)this + 3546) = v34;
          *((_DWORD *)this + 3547) = 1;
          *((_DWORD *)this + 3548) = v34;
          *((_DWORD *)this + 3549) = v34;
          *((_DWORD *)this + 3558) = v34;
          *((_DWORD *)this + 3559) = 1;
          *((_DWORD *)this + 3560) = v34;
          *((_DWORD *)this + 3561) = v34;
          *((_DWORD *)this + 3572) = v34;
          *((_DWORD *)this + 3573) = 1;
          *((_DWORD *)this + 3574) = v34;
          *((_DWORD *)this + 3575) = v34;
          *((_DWORD *)this + 3930) = v34;
          *((_DWORD *)this + 3931) = 1;
          *((_DWORD *)this + 3932) = v34;
          *((_DWORD *)this + 3933) = v34;
          *(_OWORD *)(*((void *)this + 1054) + 16 * v33) = v62;
          if (v73 <= DWORD1(v73)) {
            int v35 = DWORD1(v73);
          }
          else {
            int v35 = v73;
          }
          if (DWORD1(v73)) {
            BOOL v36 = v73 == 0;
          }
          else {
            BOOL v36 = 1;
          }
          if (v36) {
            int v37 = 0;
          }
          else {
            int v37 = v35;
          }
          *(_DWORD *)(*((void *)this + 1407) + 4 * v33) = v37;
          sub_18DFE2F24(*((void *)this + 1678) + (v33 << 6), (uint64_t)&v72);
          if (v78 <= HIDWORD(v78)) {
            int v38 = HIDWORD(v78);
          }
          else {
            int v38 = v78;
          }
          if (HIDWORD(v78)) {
            BOOL v39 = v78 == 0;
          }
          else {
            BOOL v39 = 1;
          }
          if (v39) {
            int v40 = 0;
          }
          else {
            int v40 = v38;
          }
          *(_DWORD *)(*((void *)this + 1684) + 4 * v33) = v40;
          sub_18DFE2F24(*((void *)this + 1776) + (v33 << 6), (uint64_t)&v77);
          __n128 v41 = sub_18DFE2F24(*((void *)this + 1782) + 112 * (int)v33, (uint64_t)&v67);
          *(void *)(*((void *)this + 1789) + 8 * v33) = sub_18E0FF810;
          if (*v32) {
            uint64_t v42 = ((uint64_t (*)(uint64_t, void *, void, void *, void *, __n128))*v32)(3, v32, 0, &unk_1EDD05B90, &std::__any_imp::__unique_typeinfo<raven::h_AltitudeArgs_RavenConvergence>::__id, v41);
          }
          else {
            uint64_t v42 = 0;
          }
          uint64_t v15 = 0;
          *(void *)(*((void *)this + 1968) + 8 * v33) = v42;
          goto LABEL_43;
        }
        LOWORD(v85[0]) = 2;
        unsigned __int8 v84 = 4;
        char v43 = (*(uint64_t (**)(void *))(v63[0] + 16))(v63);
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v85, &v84, "MeasurementAccumulator::AddMeasurement() failed - allocation failed,meas_type,%d,t_meas,%.3lf", v44, v45, v46, v47, v48, v43);
      }
    }
  }
  else if (cnprint::CNPrinter::GetLogLevel(v9) <= 1)
  {
    LOWORD(v85[0]) = 2;
    unsigned __int8 v84 = 1;
    double v59 = v8 + (double)v7;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v85, &v84, "MeasurementAccumulator::AddMeasurement() failed - Not initialized,t_meas,%.3lf", v16, v17, v18, v19, v20, SLOBYTE(v59));
  }
  LOWORD(v85[0]) = 12;
  unsigned __int8 v84 = 4;
  uint64_t v77 = (void *)(*(uint64_t (**)(const raven::AltitudeEvent *))(*(void *)a2 + 16))(a2);
  uint64_t v78 = v49;
  char v50 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)&v77, "Could not add measurement - altitude");
  if (*((char *)this + 2511) >= 0) {
    LOBYTE(v56) = v50;
  }
  else {
    uint64_t v56 = *((void *)this + 311);
  }
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)v85, &v84, "%s", v51, v52, v53, v54, v55, v56);
  uint64_t v15 = 0xFFFFFFFFLL;
LABEL_43:
  v63[0] = &unk_1EDD0A4E8;
  if (v64 < 0) {
    operator delete((void *)v63[2]);
  }
  return v15;
}

void sub_18E0FF7A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2) {
    sub_18DEDD524(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_18E0FF810(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  unsigned int v9 = *(_DWORD *)(a1 + 8);
  unsigned int v10 = *(_DWORD *)(a1 + 12);
  if (v9 <= v10) {
    int v11 = *(_DWORD *)(a1 + 12);
  }
  else {
    int v11 = *(_DWORD *)(a1 + 8);
  }
  if (v9) {
    BOOL v12 = v10 == 0;
  }
  else {
    BOOL v12 = 1;
  }
  BOOL v13 = !v12 && v11 == 8;
  if (v13
    && ((unsigned int v15 = *(_DWORD *)(a2 + 8), v16 = *(_DWORD *)(a2 + 12), v15 <= v16)
      ? (int v17 = *(_DWORD *)(a2 + 12))
      : (int v17 = *(_DWORD *)(a2 + 8)),
        v15 ? (BOOL v18 = v16 == 0) : (BOOL v18 = 1),
        !v18 ? (BOOL v19 = v17 == 1) : (BOOL v19 = 0),
        v19))
  {
    uint64_t v25 = *(void *)(a1 + 32);
    float64x2_t v49 = *(float64x2_t *)v25;
    uint64_t v50 = *(void *)(v25 + 16);
    v47[0] = 0.0;
    v47[1] = 0.0;
    double v48 = 0.0;
    if (!cnnavigation::ECEFToLLA(&v49, 1, v47, 1, (uint64_t)v42))
    {
      *(void *)&long long v32 = 0x100000001;
      *((void *)&v32 + 1) = 0x100000001;
      *(_OWORD *)(a4 + 8) = v32;
      **(double **)(a4 + 32) = v48 + **(double **)(a2 + 32);
      uint64_t v39 = 0x800000001;
      int v37 = &unk_1EDD18408;
      int v40 = v41;
      long long v38 = xmmword_18E215AC0;
      sub_18DFE2CC8((uint64_t)&v37, 0.0);
      sub_18DFE2F24(a5, (uint64_t)&v37);
      uint64_t v33 = *(void **)(a5 + 32);
      uint64_t v34 = v44;
      *uint64_t v33 = v43;
      uint64_t v35 = *(int *)(a5 + 20);
      v33[v35] = v34;
      v33[2 * v35] = v45;
      uint64_t v39 = 0x100000001;
      int v37 = &unk_1EDD18048;
      int v40 = v41;
      *(void *)&long long v36 = 0x100000001;
      *((void *)&v36 + 1) = 0x100000001;
      long long v38 = v36;
      sub_18DFE2CC8((uint64_t)&v37, 0.0);
      *int v40 = 0x3FF0000000000000;
      sub_18DFE2F24(a6, (uint64_t)&v37);
      return 0;
    }
    LOWORD(v37) = 12;
    unsigned __int8 v46 = 4;
    double v31 = *(double *)(a3 + 48) + (double)*(uint64_t *)(a3 + 40);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v37, &v46, "time,%.3lf,h-function failure on line %d: %s() %s", v26, v27, v28, v29, v30, SLOBYTE(v31));
  }
  else
  {
    LOWORD(v37) = 12;
    v42[0] = 4;
    double v20 = *(double *)(a3 + 48) + (double)*(uint64_t *)(a3 + 40);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v37, v42, "time,%.3lf,h-function failure on line %d: %s() %s", a4, a5, a6, a7, a8, SLOBYTE(v20));
  }
  return 0xFFFFFFFFLL;
}

uint64_t sub_18E0FFA94(uint64_t a1)
{
  *(void *)a1 = &unk_1EDD0A4E8;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

uint64_t raven::RavenConvergenceEstimator::HandleEvent(raven::RavenConvergenceEstimator *this, const raven::AltitudeChangeEvent *a2)
{
  v94[4] = *(void (**)(uint64_t))MEMORY[0x1E4F143B8];
  if (!*((unsigned char *)this + 57)) {
    return 0xFFFFFFFFLL;
  }
  if (!*((unsigned char *)this + 58)) {
    return 0;
  }
  uint64_t v83 = 0x100000003;
  uint64_t v81 = &unk_1EDD18D98;
  *(void *)&long long v4 = 0x100000001;
  *((void *)&v4 + 1) = 0x100000001;
  long long v82 = v4;
  unsigned __int8 v84 = &v85;
  uint64_t v85 = *((void *)a2 + 25);
  uint64_t v78 = 0x300000003;
  uint64_t v76 = &unk_1EDD18EE8;
  long long v77 = v4;
  int v79 = &v80;
  double v80 = *((double *)a2 + 26) * *((double *)a2 + 26);
  sub_18E06BF24(v69, 3);
  v69[0] = &unk_1EDD15C88;
  uint64_t v71 = (*(uint64_t (**)(const raven::AltitudeChangeEvent *))(*(void *)a2 + 16))(a2);
  uint64_t v72 = v5;
  int8x16_t v86 = (void *)(*(uint64_t (**)(const raven::AltitudeChangeEvent *))(*(void *)a2 + 16))(a2);
  uint64_t v87 = v6;
  uint64_t v9 = CNTimeSpan::operator-((uint64_t)&v86, (void *)a2 + 13, v7, v8);
  long long v10 = *(_OWORD *)(*((void *)this + 146) + 104);
  double v73 = v11 + (double)v9;
  uint64_t v74 = v10;
  long long v75 = v10;
  uint64_t v13 = (*(uint64_t (**)(const raven::AltitudeChangeEvent *))(*(void *)a2 + 16))(a2);
  *(void *)&long long v68 = v13;
  *((double *)&v68 + 1) = v12;
  if ((v77 & 0x80000000) != 0) {
    __assert_rtn("Zeros", "cnmatrix.h", 3098, "nr >= 0");
  }
  uint64_t v90 = 0x100000003;
  int8x16_t v86 = &unk_1EDD18D98;
  long long v91 = &v92;
  double v14 = v12;
  uint64_t v87 = v77 | 0x100000000;
  int v88 = v77;
  int v89 = v77;
  unsigned int v15 = (cnprint::CNPrinter *)sub_18DFE2CC8((uint64_t)&v86, 0.0);
  if (*((unsigned char *)this + 8336))
  {
    if (*((_DWORD *)this + 3568) == 174)
    {
      LOWORD(v94[0]) = 2;
      unsigned __int8 v93 = 2;
      double v64 = v14 + (double)v13;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v94, &v93, "MeasurementAccumulator::AddMeasurement() failed - Out of space,t_meas,%.3lf", v16, v17, v18, v19, v20, SLOBYTE(v64));
    }
    else if (*((unsigned char *)this + 8337))
    {
      if (cnprint::CNPrinter::GetLogLevel(v15) <= 1)
      {
        LOWORD(v94[0]) = 2;
        unsigned __int8 v93 = 1;
        double v66 = v14 + (double)v13;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v94, &v93, "MeasurementAccumulator::AddMeasurement() failed - Locked,t_meas,%.3lf", v27, v28, v29, v30, v31, SLOBYTE(v66));
      }
    }
    else
    {
      BOOL v32 = sub_18DEE4CB8((double *)&v68, (double *)this + 1043);
      if (v32)
      {
        if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v32) <= 1)
        {
          LOWORD(v94[0]) = 2;
          unsigned __int8 v93 = 1;
          double v67 = *((double *)&v68 + 1) + (double)(uint64_t)v68;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)v94, &v93, "MeasurementAccumulator::AddMeasurement() failed - Measurement too old,t_meas,%.3lf,t_start,%.3lf", v33, v34, v35, v36, v37, SLOBYTE(v67));
        }
      }
      else
      {
        v94[0] = 0;
        v94[1] = 0;
        sub_18E113918(v94, (uint64_t)v69);
        long long v38 = sub_18E06C110((uint64_t *)this + 1047, v94);
        sub_18E067C60((uint64_t (**)(void, void, void, void, void))v94);
        uint64_t v39 = *((int *)this + 3568);
        uint64_t v40 = (v39 + 1);
        if (*((void *)this + 1049) == v40)
        {
          *((_DWORD *)this + 3568) = v40;
          *((_DWORD *)this + 2102) = v40;
          *((_DWORD *)this + 2103) = 1;
          *((_DWORD *)this + 2104) = v40;
          *((_DWORD *)this + 2105) = v40;
          *((_DWORD *)this + 2808) = v40;
          *((_DWORD *)this + 2809) = 1;
          *((_DWORD *)this + 2810) = v40;
          *((_DWORD *)this + 2811) = v40;
          *((_DWORD *)this + 2992) = v40;
          *((_DWORD *)this + 2993) = 1;
          *((_DWORD *)this + 2994) = v40;
          *((_DWORD *)this + 2995) = v40;
          *((_DWORD *)this + 3350) = v40;
          *((_DWORD *)this + 3351) = 1;
          *((_DWORD *)this + 3352) = v40;
          *((_DWORD *)this + 3353) = v40;
          *((_DWORD *)this + 3362) = v40;
          *((_DWORD *)this + 3363) = 1;
          *((_DWORD *)this + 3364) = v40;
          *((_DWORD *)this + 3365) = v40;
          *((_DWORD *)this + 3546) = v40;
          *((_DWORD *)this + 3547) = 1;
          *((_DWORD *)this + 3548) = v40;
          *((_DWORD *)this + 3549) = v40;
          *((_DWORD *)this + 3558) = v40;
          *((_DWORD *)this + 3559) = 1;
          *((_DWORD *)this + 3560) = v40;
          *((_DWORD *)this + 3561) = v40;
          *((_DWORD *)this + 3572) = v40;
          *((_DWORD *)this + 3573) = 1;
          *((_DWORD *)this + 3574) = v40;
          *((_DWORD *)this + 3575) = v40;
          *((_DWORD *)this + 3930) = v40;
          *((_DWORD *)this + 3931) = 1;
          *((_DWORD *)this + 3932) = v40;
          *((_DWORD *)this + 3933) = v40;
          *(_OWORD *)(*((void *)this + 1054) + 16 * v39) = v68;
          if (v82 <= DWORD1(v82)) {
            int v41 = DWORD1(v82);
          }
          else {
            int v41 = v82;
          }
          if (DWORD1(v82)) {
            BOOL v42 = v82 == 0;
          }
          else {
            BOOL v42 = 1;
          }
          if (v42) {
            int v43 = 0;
          }
          else {
            int v43 = v41;
          }
          *(_DWORD *)(*((void *)this + 1407) + 4 * v39) = v43;
          sub_18DFE2F24(*((void *)this + 1678) + (v39 << 6), (uint64_t)&v81);
          if (v87 <= HIDWORD(v87)) {
            int v44 = HIDWORD(v87);
          }
          else {
            int v44 = v87;
          }
          if (HIDWORD(v87)) {
            BOOL v45 = v87 == 0;
          }
          else {
            BOOL v45 = 1;
          }
          if (v45) {
            int v46 = 0;
          }
          else {
            int v46 = v44;
          }
          *(_DWORD *)(*((void *)this + 1684) + 4 * v39) = v46;
          sub_18DFE2F24(*((void *)this + 1776) + (v39 << 6), (uint64_t)&v86);
          __n128 v47 = sub_18DFE2F24(*((void *)this + 1782) + 112 * (int)v39, (uint64_t)&v76);
          *(void *)(*((void *)this + 1789) + 8 * v39) = sub_18E1001BC;
          if (*v38) {
            uint64_t v48 = ((uint64_t (*)(uint64_t, void *, void, void *, void *, __n128))*v38)(3, v38, 0, &unk_1EDD05F48, &std::__any_imp::__unique_typeinfo<raven::h_AltitudeChangeArgs_RavenConvergence<double>>::__id, v47);
          }
          else {
            uint64_t v48 = 0;
          }
          uint64_t v21 = 0;
          *(void *)(*((void *)this + 1968) + 8 * v39) = v48;
          goto LABEL_43;
        }
        LOWORD(v94[0]) = 2;
        unsigned __int8 v93 = 4;
        char v49 = (*(uint64_t (**)(void *))(v69[0] + 16))(v69);
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v94, &v93, "MeasurementAccumulator::AddMeasurement() failed - allocation failed,meas_type,%d,t_meas,%.3lf", v50, v51, v52, v53, v54, v49);
      }
    }
  }
  else if (cnprint::CNPrinter::GetLogLevel(v15) <= 1)
  {
    LOWORD(v94[0]) = 2;
    unsigned __int8 v93 = 1;
    double v65 = v14 + (double)v13;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v94, &v93, "MeasurementAccumulator::AddMeasurement() failed - Not initialized,t_meas,%.3lf", v22, v23, v24, v25, v26, SLOBYTE(v65));
  }
  LOWORD(v94[0]) = 12;
  unsigned __int8 v93 = 4;
  int8x16_t v86 = (void *)(*(uint64_t (**)(const raven::AltitudeChangeEvent *))(*(void *)a2 + 16))(a2);
  uint64_t v87 = v55;
  char v56 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)&v86, "Could not add measurement - altitude change");
  if (*((char *)this + 2511) >= 0) {
    LOBYTE(v62) = v56;
  }
  else {
    uint64_t v62 = *((void *)this + 311);
  }
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)v94, &v93, "%s", v57, v58, v59, v60, v61, v62);
  uint64_t v21 = 0xFFFFFFFFLL;
LABEL_43:
  v69[0] = &unk_1EDD0A4E8;
  if (v70 < 0) {
    operator delete((void *)v69[2]);
  }
  return v21;
}

void sub_18E10014C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2) {
    sub_18DEDD524(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_18E1001BC(uint64_t a1, uint64_t a2, void *lpsrc, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!lpsrc
    || (uint64_t v13 = (double *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EDD02A78, (const struct __class_type_info *)&unk_1EDD05F48, 0)) == 0)
  {
    LOWORD(v69) = 12;
    LOBYTE(v64) = 4;
    double v30 = MEMORY[0x30] + (double)MEMORY[0x28];
LABEL_22:
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v69, (unsigned __int8 *)&v64, "time,%.3lf,h-function failure on line %d: %s() %s", a4, a5, a6, a7, a8, SLOBYTE(v30));
    return 0xFFFFFFFFLL;
  }
  double v14 = v13;
  unsigned int v16 = *(_DWORD *)(a1 + 8);
  unsigned int v15 = *(_DWORD *)(a1 + 12);
  if (v16 <= v15) {
    int v17 = *(_DWORD *)(a1 + 12);
  }
  else {
    int v17 = *(_DWORD *)(a1 + 8);
  }
  if (!v16
    || !v15
    || v17 != 8
    || ((v19 = *(_DWORD *)(a2 + 8), unsigned int v18 = *(_DWORD *)(a2 + 12), v19 <= v18)
      ? (int v20 = *(_DWORD *)(a2 + 12))
      : (int v20 = *(_DWORD *)(a2 + 8)),
        !v19 || !v18 || v20 != 1))
  {
    LOWORD(v69) = 12;
    LOBYTE(v64) = 4;
    double v30 = v13[6] + (double)*((uint64_t *)v13 + 5);
    goto LABEL_22;
  }
  double v21 = v13[7];
  if (v21 <= 0.0)
  {
    LOWORD(v69) = 12;
    LOBYTE(v64) = 4;
    double v30 = v13[6] + (double)*((uint64_t *)v13 + 5);
    goto LABEL_22;
  }
  double v84 = -v21;
  uint64_t v81 = 0x100000006;
  int v79 = &unk_1EDD19728;
  long long v82 = &v83;
  long long v80 = xmmword_18E1FD770;
  sub_18DFE2CC8((uint64_t)&v79, 0.0);
  uint64_t v22 = 0;
  uint64_t v76 = 0x100000006;
  long long v75 = xmmword_18E1FD770;
  uint64_t v74 = &unk_1EDD19728;
  long long v77 = &v78;
  uint64_t v71 = 0x600000006;
  uint64_t v69 = &unk_1EDD197B8;
  long long v70 = xmmword_18E1F8570;
  uint64_t v72 = &v73;
  uint64_t v66 = 0x600000006;
  long long v65 = xmmword_18E1F8570;
  double v64 = &unk_1EDD197B8;
  double v67 = &v68;
  do
  {
    *(_DWORD *)&v43[2 * v22 + 20] = v22;
    ++v22;
  }
  while (v22 != 6);
  uint64_t v60 = 0x100000006;
  uint64_t v58 = &unk_1EDD19758;
  uint64_t v61 = &v62;
  long long v59 = xmmword_18E1FD770;
  long long v62 = v44;
  uint64_t v63 = v45;
  sub_18E1132EC((uint64_t)v57, *(void *)(a1 + 32), (uint64_t)&v58);
  if (sub_18E06C950((uint64_t)v57, (uint64_t)&v79, (uint64_t *)&v84, (uint64_t)&v74, (uint64_t)&v69, (uint64_t)&v64, v23, v24))
  {
    v43[0] = 12;
    v41[0] = 4;
    double v40 = v14[6] + (double)*((uint64_t *)v14 + 5);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v43, v41, "time,%.3lf,h-function failure on line %d: %s() %s", v25, v26, v27, v28, v29, SLOBYTE(v40));
    return 0xFFFFFFFFLL;
  }
  sub_18DFFDA0C((uint64_t)v55, **(float64_t **)(a1 + 32), *(float64_t *)(*(void *)(a1 + 32) + 8), *(double *)(*(void *)(a1 + 32) + 16));
  if (!v55[8])
  {
    sub_18E06B804((uint64_t)(v14 + 5), (uint64_t)"could not compute Jacobian", (uint64_t)"h_AltitudeChange_RavenConvergence", 366, v32, v33, v34, v35);
    return 0xFFFFFFFFLL;
  }
  uint64_t v52 = 0x300000003;
  uint64_t v50 = &unk_1EDD18EE8;
  long long v51 = xmmword_18E1F0010;
  uint64_t v53 = &v54;
  sub_18DFE2F24((uint64_t)&v50, (uint64_t)&v56);
  sub_18E113464((uint64_t)v46);
  sub_18E1133D8((uint64_t)v47, (uint64_t)&v50, (uint64_t)v46);
  sub_18E113534((uint64_t)v41);
  sub_18E1134E8((uint64_t)v43, (uint64_t)v41, (uint64_t)&v69);
  sub_18E11334C((uint64_t)v49, (uint64_t)v47, (uint64_t)v43);
  sub_18E1135DC((uint64_t)v41, (uint64_t)v49, (uint64_t)v57);
  double v36 = *(double *)(v42 + 16);
  *(void *)&long long v37 = 0x100000001;
  *((void *)&v37 + 1) = 0x100000001;
  *(_OWORD *)(a4 + 8) = v37;
  **(double **)(a4 + 32) = v36 + **(double **)(a2 + 32);
  sub_18E071320(1, 3, (uint64_t)v47);
  *(void *)(v48 + 16) = 0x3FF0000000000000;
  sub_18E113668((uint64_t)v43, (uint64_t)v47, (uint64_t)v49);
  sub_18DFE2F24(a5, (uint64_t)v43);
  uint64_t result = 0;
  *(_OWORD *)(a5 + 8) = xmmword_18E215AC0;
  uint64_t v38 = *(void *)(a5 + 32);
  *(void *)(v38 + 48) = 0;
  *(void *)(v38 + 56) = 0;
  *(void *)&long long v39 = 0x100000001;
  *((void *)&v39 + 1) = 0x100000001;
  *(_OWORD *)(a6 + 8) = v39;
  **(void **)(a6 + 32) = 0x3FF0000000000000;
  return result;
}

uint64_t sub_18E1006E0(uint64_t a1)
{
  *(void *)a1 = &unk_1EDD0A4E8;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

uint64_t raven::RavenConvergenceEstimator::HandleEvent(raven::RavenConvergenceEstimator *this, const raven::GnssPreprocessedMeasurementsEvent *a2)
{
  uint64_t v2 = (raven::RavenEstimator *)MEMORY[0x1F4188790](this);
  uint64_t v325 = *MEMORY[0x1E4F143B8];
  if (!*((unsigned char *)v2 + 57)) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v4 = (uint64_t)v2;
  if (!*((unsigned char *)v2 + 58)) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v5 = (unsigned int *)v3;
  if (raven::RavenEstimator::HandleGnssPreprocessedMeasurementsEvent(v2, v3)) {
    return 0xFFFFFFFFLL;
  }
  long long v284 = (void *)(*(uint64_t (**)(unsigned int *))(*(void *)v5 + 16))(v5);
  uint64_t v285 = v6;
  updated = (cnprint::CNPrinter *)raven::RavenConvergenceEstimator::UpdateClockOffsetEstimateIfNecessary(v4, (uint64_t)(v5 + 6), (uint64_t)&v284);
  if (!updated) {
    return 0xFFFFFFFFLL;
  }
  if (!*((unsigned char *)v5 + 88))
  {
    if (cnprint::CNPrinter::GetLogLevel(updated) <= 1)
    {
      LOWORD(v255.__r_.__value_.__l.__data_) = 12;
      LOBYTE(v238) = 1;
      long long v284 = (void *)(*(uint64_t (**)(unsigned int *))(*(void *)v5 + 16))(v5);
      uint64_t v285 = v10;
      cnprint::CNLogFormatter::FormatGeneral(v4 + 2488, (uint64_t)&v284, "Encountered GnssPreprocessedMeasurementsEvent with no oscillator model.");
      if (*(char *)(v4 + 2511) >= 0) {
        LOBYTE(v16) = v4 - 72;
      }
      else {
        uint64_t v16 = *(void *)(v4 + 2488);
      }
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v255, (unsigned __int8 *)&v238, "%s", v11, v12, v13, v14, v15, v16);
    }
    raven::RavenConvergenceEstimator::ResetOscillatorStates((raven::RavenConvergenceEstimator *)v4);
  }
  long long v310 = 0uLL;
  char v311 = 0;
  uint64_t v313 = 0;
  uint64_t v312 = 0;
  char v314 = 0;
  uint64_t v316 = 0;
  uint64_t v315 = 0;
  char v317 = 0;
  uint64_t v319 = 0;
  uint64_t v318 = 0;
  uint64_t v320 = 0x7FF8000000000000;
  if (!*(unsigned char *)(*(void *)(v4 + 1168) + 3811)
    || (v8.i64[0] = 0x3EB0C6F7A0B5ED8DLL, !raven::RavenEstimator::AreGnssMeasurementsAtSameTime(v4, v5, &v310, v8, v9)))
  {
    uint64_t v247 = (uint64_t)&v247;
    char v248 = &v247;
    uint64_t v249 = 0;
    goto LABEL_20;
  }
  sub_18E102F50((uint64_t)&v284, v4 + 2640);
  long long v306 = *(_OWORD *)(v4 + 8208);
  int8x16_t v307 = *(int8x16_t *)(v4 + 8224);
  long long v308 = *(_OWORD *)(v4 + 8240);
  uint64_t v309 = *(void *)(v4 + 8256);
  long long v303 = *(_OWORD *)(v4 + 8160);
  long long v304 = *(_OWORD *)(v4 + 8176);
  long long v305 = *(_OWORD *)(v4 + 0x2000);
  long long v299 = v305;
  long long v300 = v306;
  int8x16_t v301 = v307;
  long long v297 = v303;
  long long v298 = v304;
  uint64_t v302 = *(void *)(v4 + 8240);
  char v296 = 0;
  uint64_t v17 = v4 + 80;
  *(_OWORD *)&v255.__r_.__value_.__l.__data_ = *(_OWORD *)(v4 + 80);
  uint64_t v18 = CNTimeSpan::operator-((uint64_t)&v310, &v255, *(int8x16_t *)&v255.__r_.__value_.__l.__data_, v307);
  uint64_t v22 = v18;
  double v23 = v19;
  if (!v18)
  {
    if (v19 >= 0.0) {
      goto LABEL_16;
    }
LABEL_139:
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v18) <= 1)
    {
      LOWORD(v238) = 12;
      v232[0] = 1;
      v255.__r_.__value_.__r.__words[0] = (*(uint64_t (**)(unsigned int *))(*(void *)v5 + 16))(v5);
      v255.__r_.__value_.__l.__size_ = v151;
      char v152 = cnprint::CNLogFormatter::FormatGeneral(v4 + 2488, (uint64_t)&v255, "GNSS measurement selection: negative prediction interval,dt,%.3lf", v23 + (double)v22);
      if (*(char *)(v4 + 2511) >= 0) {
        LOBYTE(v158) = v152;
      }
      else {
        uint64_t v158 = *(void *)(v4 + 2488);
      }
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v238, v232, "%s", v153, v154, v155, v156, v157, v158);
    }
    BOOL v24 = 0;
    goto LABEL_145;
  }
  if (v18 < 0) {
    goto LABEL_139;
  }
LABEL_16:
  BOOL v24 = 1;
LABEL_145:
  std::string::size_type v160 = *(void *)(v4 + 88);
  v255.__r_.__value_.__r.__words[0] = *(void *)(v4 + 80);
  std::string::size_type v159 = v255.__r_.__value_.__r.__words[0];
  v255.__r_.__value_.__l.__size_ = v160;
  uint64_t v161 = CNTimeSpan::operator-((uint64_t)&v310, &v255, v20, v21);
  double v163 = v162;
  uint64_t v164 = *(void *)(v4 + 1168);
  double v165 = *(double *)(v164 + 872);
  *(void *)&v324[0] = v159;
  *((void *)&v324[0] + 1) = v160;
  char v248 = 0;
  uint64_t v247 = 0;
  *(double *)v166.i64 = v165;
  CNTimeSpan::SetTimeSpan(&v247, 0, v166, v167);
  v168.i64[0] = *(void *)(v164 + 880);
  v283[1] = 0;
  v283[0] = 0;
  CNTimeSpan::SetTimeSpan(v283, 0, v168, v169);
  if (!v24) {
    goto LABEL_176;
  }
  *(double *)v171.i64 = v163;
  *(double *)v170.i64 = (v163 + (double)v161) / v165;
  int v172 = vcvtpd_s64_f64(*(double *)v170.i64);
  if (v172 < 1) {
    goto LABEL_176;
  }
  *(int64x2_t *)v225 = vdupq_n_s64(0x7FF8000000000000uLL);
  uint64_t v223 = v4 + 2488;
  int8x16_t v170 = (int8x16_t)xmmword_18E1FD1A0;
  while (1)
  {
    v282[0] = CNTimeSpan::operator+((uint64_t)v324, &v247, v170, v171);
    v282[1] = v173;
    uint64_t v176 = CNTimeSpan::operator+((uint64_t)v282, v283, v174, v175);
    if (!v176 && (*(void *)&v177 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
LABEL_153:
      v178.i64[0] = *((void *)&v310 + 1);
LABEL_154:
      BOOL v179 = *(double *)v178.i64 <= v177;
      goto LABEL_156;
    }
    if (!(void)v310)
    {
      v178.i64[0] = *((void *)&v310 + 1);
      if ((*((void *)&v310 + 1) & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000) {
        goto LABEL_154;
      }
    }
    if (v176 == (void)v310) {
      goto LABEL_153;
    }
    BOOL v179 = v176 > (uint64_t)v310;
LABEL_156:
    uint64_t v180 = (int8x16_t *)v282;
    if (v179) {
      uint64_t v180 = (int8x16_t *)&v310;
    }
    int8x16_t v281 = *v180;
    long long v238 = 0uLL;
    *(_OWORD *)((char *)v239 + 8) = *(_OWORD *)v225;
    *(_OWORD *)((char *)&v239[1] + 8) = *(_OWORD *)v225;
    BOOL EstimatorPredictAndUpdateArguments = raven::RavenConvergenceEstimator::GetEstimatorPredictAndUpdateArguments(v4, (uint64_t)v324, &v281, (uint64_t)&v238, *(double *)v225, v178);
    if (!EstimatorPredictAndUpdateArguments) {
      break;
    }
    uint64_t data = 0x800000008;
    *(_OWORD *)&v255.__r_.__value_.__r.__words[1] = xmmword_18E1FD750;
    v255.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1EDD19DE8;
    *(void *)&long long v257 = (char *)&v257 + 8;
    if (sub_18E103340(v4))
    {
      BOOL v24 = 0;
      goto LABEL_175;
    }
    *(void *)&v232[24] = 0x200000002;
    *(void *)char v232 = &unk_1EDD18BE8;
    *(_OWORD *)&v232[8] = xmmword_18E1FD1B0;
    *(void *)&v232[32] = &v232[40];
    *(_OWORD *)&v232[40] = xmmword_18E1FD790;
    *(void *)&v321[24] = 0x100000002;
    *(_OWORD *)&v321[8] = xmmword_18E1FD1A0;
    *(void *)v321 = &unk_1EDD18A68;
    v322 = v323;
    v323[0] = sub_18E03E654;
    v323[1] = sub_18E03E8E0;
    uint64_t v254 = *(void *)&v239[0];
    uint64_t v253 = *(void *)&v239[0];
    *(void *)&v235[24] = 0x100000002;
    *(_OWORD *)&v235[8] = xmmword_18E1FD1A0;
    *(void *)unint64_t v235 = &unk_1EDD18AF8;
    unint64_t v236 = v237;
    v237[0] = &v254;
    v237[1] = &v253;
    int v182 = sub_18E103D24((uint64_t)&v284);
    BOOL v24 = v182 == 0;
    if (v182)
    {
      __int16 v252 = 12;
      unsigned __int8 v251 = 4;
      v250[0] = (*(uint64_t (**)(unsigned int *))(*(void *)v5 + 16))(v5);
      v250[1] = v190;
      cnprint::CNLogFormatter::FormatGeneral(v223, (uint64_t)v250, "GNSS measurement selection: could not predict filter,code,%d", v182);
      if (*(char *)(v4 + 2511) >= 0) {
        LOBYTE(v196) = v4 - 72;
      }
      else {
        uint64_t v196 = *(void *)(v4 + 2488);
      }
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v252, &v251, "%s", v191, v192, v193, v194, v195, v196);
      goto LABEL_175;
    }
    int8x16_t v170 = v281;
    v324[0] = v281;
    if (v179) {
      goto LABEL_175;
    }
    if (!--v172)
    {
      BOOL v24 = 1;
LABEL_175:
      uint64_t v17 = v4 + 80;
      goto LABEL_176;
    }
  }
  uint64_t v17 = v4 + 80;
  if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)EstimatorPredictAndUpdateArguments) <= 1)
  {
    *(_WORD *)char v232 = 12;
    v321[0] = 1;
    v255.__r_.__value_.__r.__words[0] = (*(uint64_t (**)(unsigned int *))(*(void *)v5 + 16))(v5);
    v255.__r_.__value_.__l.__size_ = v183;
    cnprint::CNLogFormatter::FormatGeneral(v223, (uint64_t)&v255, "GNSS measurement selection: could not get predict and update arguments");
    if (*(char *)(v4 + 2511) >= 0) {
      LOBYTE(v189) = v4 - 72;
    }
    else {
      uint64_t v189 = *(void *)(v4 + 2488);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v232, v321, "%s", v184, v185, v186, v187, v188, v189);
  }
  BOOL v24 = 0;
LABEL_176:
  raven::PopulateAllTimeFields((uint64_t)&v310, v4 + 136, v170, v171);
  if (*(unsigned char *)(v4 + 1208))
  {
    uint64_t v234 = *(void *)(v4 + 1400);
    long long v197 = *(_OWORD *)(v4 + 1368);
    *(_OWORD *)&v232[32] = *(_OWORD *)(v4 + 1352);
    *(_OWORD *)&v232[48] = v197;
    long long v233 = *(_OWORD *)(v4 + 1384);
    long long v198 = *(_OWORD *)(v4 + 1336);
    *(_OWORD *)char v232 = *(_OWORD *)(v4 + 1320);
    *(_OWORD *)&v232[16] = v198;
  }
  else
  {
    *(void *)char v232 = 0;
    *(void *)&v232[8] = 0x3FF0000000000000;
    memset(&v232[16], 0, 48);
    long long v233 = 0u;
    uint64_t v234 = 0;
  }
  char v199 = *(unsigned char *)(v4 + 2368);
  if (v199) {
    char v199 = *(unsigned char *)(v4 + 2480);
  }
  LOBYTE(v282[0]) = v199;
  if (*(unsigned char *)(v4 + 1624))
  {
    v322 = *(void **)(v4 + 1768);
    long long v200 = *(_OWORD *)(v4 + 1752);
    *(_OWORD *)v321 = *(_OWORD *)(v4 + 1736);
    *(_OWORD *)&v321[16] = v200;
  }
  else
  {
    *(void *)v321 = 0;
    *(void *)&v321[8] = 0x3FF0000000000000;
    *(void *)&v321[24] = 0;
    v322 = 0;
    *(void *)&v321[16] = 0;
  }
  if (*(unsigned char *)(v4 + 1776))
  {
    long long v201 = *(_OWORD *)(v4 + 1904);
    *(_OWORD *)unint64_t v235 = *(_OWORD *)(v4 + 1888);
    *(_OWORD *)&v235[16] = v201;
    unint64_t v236 = *(void **)(v4 + 1920);
  }
  else
  {
    *(void *)unint64_t v235 = 0;
    *(void *)&v235[8] = 0x3FF0000000000000;
    *(void *)&v235[24] = 0;
    unint64_t v236 = 0;
    *(void *)&v235[16] = 0;
  }
  if (v24)
  {
    sub_18E0B6E40((uint64_t)&v284, (uint64_t)&v238);
    sub_18E0B6EF0((uint64_t)&v284, (uint64_t)&v255);
    BOOL v202 = sub_18E03EB88(v4 + 5704, (uint64_t)&v310, (uint64_t)&v238, (uint64_t)&v255, v232, (unsigned __int8 *)v282, (long long *)v321, (long long *)v235);
  }
  else
  {
    BOOL v202 = 0;
  }
  sub_18E0B67FC((uint64_t)&v284);
  uint64_t v247 = (uint64_t)&v247;
  char v248 = &v247;
  uint64_t v249 = 0;
  if (!v202) {
    goto LABEL_20;
  }
  LOBYTE(v284) = 0;
  LOBYTE(v285) = 0;
  uint64_t v203 = raven::RavenSequentialGNSSMeasurementSelector::SelectMeasurements(v4 + 5704, (uint64_t)v5, &v247, (uint64_t)&v284);
  char v206 = v203;
  if (v203)
  {
    if ((_BYTE)v285)
    {
      uint64_t v207 = v284;
      v255.__r_.__value_.__r.__words[0] = (*(uint64_t (**)(unsigned int *))(*(void *)v5 + 16))(v5);
      v255.__r_.__value_.__l.__size_ = v208;
      uint64_t v203 = raven::RavenConvergenceEstimator::AdjustClockOffset(v4, (uint64_t)&v255, *(double *)&v207);
      if ((v203 & 1) == 0) {
        goto LABEL_196;
      }
    }
  }
  if (*(_DWORD *)(v4 + 288) < 0x1Fu)
  {
    v255.__r_.__value_.__r.__words[0] = CNTimeSpan::operator-(v17, (void *)(v4 + 64), v204, v205);
    v255.__r_.__value_.__l.__size_ = v209;
    uint64_t v203 = raven::RavenEstimator::UpdateAggressiveFlooringOfOutputUncertaintyData(v4, (uint64_t)&v255, v4 + 1928, v5[23], v210, v211);
  }
  else
  {
    *(unsigned char *)(v4 + 8128) = 0;
    *(unsigned char *)(v4 + 280) = 0;
  }
  LODWORD(v255.__r_.__value_.__l.__data_) = 1;
  LODWORD(v238) = 5;
  ITRCount = raven::RavenSequentialGNSSMeasurementSelector::GetITRCount(v203, (void *)(v4 + 7168), (int *)&v255, (int *)&v238);
  int v213 = (int)ITRCount;
  LODWORD(v255.__r_.__value_.__l.__data_) = 1;
  LODWORD(v238) = 4;
  long long v214 = raven::RavenSequentialGNSSMeasurementSelector::GetITRCount((uint64_t)ITRCount, (void *)(v4 + 7168), (int *)&v255, (int *)&v238);
  unsigned int v215 = v214;
  unsigned int v216 = v214 + v213;
  *(_DWORD *)(v4 + 312) = v216 - *(_DWORD *)(v4 + 8144);
  LODWORD(v255.__r_.__value_.__l.__data_) = 1;
  LODWORD(v238) = 3;
  uint64_t UnprocessedMSRData = (uint64_t)raven::RavenSequentialGNSSMeasurementSelector::GetITRCount((uint64_t)v214, (void *)(v4 + 7168), (int *)&v255, (int *)&v238);
  *(_DWORD *)(v4 + 316) = UnprocessedMSRData - *(_DWORD *)(v4 + 8148);
  if (v216) {
    *(double *)(v4 + 320) = (double)v215 / (double)v216;
  }
  if ((v206 & 1) == 0)
  {
LABEL_20:
    uint64_t UnprocessedMSRData = raven::RavenSequentialGNSSMeasurementSelector::GetUnprocessedMSRData(v4 + 5704, (uint64_t)v5, &v247);
    if (UnprocessedMSRData) {
      goto LABEL_21;
    }
LABEL_196:
    uint64_t v25 = 0xFFFFFFFFLL;
    goto LABEL_197;
  }
LABEL_21:
  uint64_t v28 = v248;
  if (v248 == &v247) {
    goto LABEL_103;
  }
  unsigned int v29 = 0;
  v221 = (unsigned char *)(v4 + 8336);
  uint64_t v224 = v4 + 2488;
  int64x2_t v222 = vdupq_n_s64(0x7FF8000000000000uLL);
  while (2)
  {
    uint64_t v31 = v28 + 2;
    double v30 = (const std::string *)v28[2];
    int v32 = *((_DWORD *)v28 + 48);
    if ((v32 - 1) >= 2)
    {
      if (v32 == 3)
      {
        ++v29;
        goto LABEL_97;
      }
      raven::RavenSequentialGNSSMeasurementSelector::GetFinalGnssObservable(v4 + 5704, (uint64_t)(v28 + 2), (uint64_t)&v238);
      if (v246)
      {
        *(void *)&v235[24] = 0x100000003;
        *(void *)&long long v33 = 0x100000001;
        *((void *)&v33 + 1) = 0x100000001;
        *(_OWORD *)&v235[8] = v33;
        *(void *)unint64_t v235 = &unk_1EDD18D98;
        unint64_t v236 = v237;
        *(void *)&v232[24] = 0x300000003;
        *(void *)char v232 = &unk_1EDD18EE8;
        *(_OWORD *)&v232[8] = v33;
        *(void *)&v232[32] = &v232[40];
        sub_18DEDE7B0(&v255, "");
        LOBYTE(data) = 0;
        HIDWORD(data) = -1;
        long long v257 = 0uLL;
        LOBYTE(v258) = 0;
        *((void *)&v258 + 1) = 0;
        *(void *)&long long v259 = 0;
        BYTE8(v259) = 0;
        long long v260 = 0uLL;
        LOBYTE(v261) = 0;
        *((void *)&v261 + 1) = 0;
        *(void *)&long long v262 = 0;
        *((void *)&v262 + 1) = 0x7FF8000000000000;
        LODWORD(v263) = 0;
        BYTE4(v263) = 0;
        *((void *)&v263 + 1) = 0x7FF8000000000000;
        *(int64x2_t *)&v264[8] = v222;
        *(int64x2_t *)&v264[24] = v222;
        *(int64x2_t *)&v264[40] = v222;
        *(_DWORD *)char v264 = 2143289344;
        *(_DWORD *)&v264[56] = 2143289344;
        v264[60] = 0;
        LOBYTE(v265) = 0;
        BYTE4(v265) = 0;
        BYTE8(v265) = 0;
        WORD6(v265) = 0;
        BYTE14(v265) = 1;
        int64x2_t v266 = v222;
        int64x2_t v267 = &unk_1EDD0AE58;
        sub_18DEDE7B0(&v268, "");
        LOBYTE(v269) = 0;
        HIDWORD(v269) = -1;
        long long v270 = 0u;
        long long v271 = 0u;
        long long v272 = 0u;
        long long v273 = 0u;
        long long v274 = 0u;
        long long v275 = 0u;
        long long v276 = 0u;
        long long v277 = 0u;
        long long v278 = 0u;
        long long v279 = 0u;
        long long v280 = 0u;
        uint64_t v34 = *v31;
        *(void *)&long long v35 = 0x100000001;
        *((void *)&v35 + 1) = 0x100000001;
        *(_OWORD *)&v235[8] = v35;
        *(_OWORD *)&v232[8] = v35;
        *unint64_t v236 = *((void *)&v240 + 1);
        **(double **)&v232[32] = (float)(*((float *)&v243 + 2) * *((float *)&v243 + 2));
        *(_OWORD *)&v264[48] = v243;
        long long v265 = v244;
        int64x2_t v266 = v245;
        long long v263 = v239[5];
        *(_OWORD *)char v264 = v240;
        *(_OWORD *)&v264[16] = v241;
        *(_OWORD *)&v264[32] = v242;
        long long v259 = v239[1];
        long long v260 = v239[2];
        long long v261 = v239[3];
        long long v262 = v239[4];
        long long v257 = v238;
        long long v258 = v239[0];
        std::string::operator=(&v255, v30);
        uint64_t data = (uint64_t)v30[1].__r_.__value_.__l.__data_;
        uint64_t UnprocessedMSRData = (uint64_t)std::string::operator=(&v268, (const std::string *)(v34 + 40));
        uint64_t v269 = *(void *)(v34 + 64);
        long long v36 = *(_OWORD *)(v34 + 72);
        long long v37 = *(_OWORD *)(v34 + 104);
        long long v271 = *(_OWORD *)(v34 + 88);
        long long v272 = v37;
        long long v270 = v36;
        long long v38 = *(_OWORD *)(v34 + 120);
        long long v39 = *(_OWORD *)(v34 + 136);
        long long v40 = *(_OWORD *)(v34 + 168);
        long long v275 = *(_OWORD *)(v34 + 152);
        long long v276 = v40;
        long long v273 = v38;
        long long v274 = v39;
        long long v41 = *(_OWORD *)(v34 + 184);
        long long v42 = *(_OWORD *)(v34 + 200);
        long long v43 = *(_OWORD *)(v34 + 232);
        long long v279 = *(_OWORD *)(v34 + 216);
        long long v280 = v43;
        long long v277 = v41;
        long long v278 = v42;
        int v44 = *(_DWORD *)(v28[3] + 96);
        if ((v44 - 3) >= 2)
        {
          if (v44 == 2)
          {
            sub_18E1127B8((uint64_t)&v284, (long long *)&v255);
            long long v288 = *(_OWORD *)v28[3];
            int v66 = v285;
            double v67 = (char *)sub_18E017C64((uint64_t)v30);
            sub_18DEDE7B0(v228, v67);
            sub_18E03F90C((uint64_t)&v284, v66, (long long *)v228);
            if (v229 < 0) {
              operator delete(v228[0]);
            }
            if (sub_18E1075BC((uint64_t)v221, (double *)&v288, (uint64_t)v235, (uint64_t)v232, (uint64_t)&v284))
            {
              LOWORD(v324[0]) = 12;
              LOBYTE(v283[0]) = 4;
              *(void *)v321 = (*(uint64_t (**)(unsigned int *))(*(void *)v5 + 16))(v5);
              *(void *)&v321[8] = v68;
              uint64_t v69 = sub_18E017C64((uint64_t)v30);
              cnprint::CNLogFormatter::FormatGeneral(v224, (uint64_t)v321, "Could not add measurement - Doppler for %s", v69);
              LOBYTE(v75) = v4 - 72;
              if (*(char *)(v4 + 2511) < 0) {
                uint64_t v75 = *(void *)(v4 + 2488);
              }
              cnprint::CNPrinter::Print((cnprint::CNPrinter *)v324, (unsigned __int8 *)v283, "%s", v70, v71, v72, v73, v74, v75);
            }
            uint64_t UnprocessedMSRData = sub_18E107A14((uint64_t)&v284);
          }
          else if (v44 == 1)
          {
            sub_18E1124FC((uint64_t)&v284, (long long *)&v255);
            long long v288 = *(_OWORD *)v28[3];
            int v45 = v285;
            int v46 = (char *)sub_18E017C64((uint64_t)v30);
            sub_18DEDE7B0(__p, v46);
            sub_18E03F90C((uint64_t)&v284, v45, (long long *)__p);
            if (v231 < 0) {
              operator delete(__p[0]);
            }
            uint64_t v48 = *(void *)(*v31 + 312);
            __n128 v47 = *(std::__shared_weak_count **)(*v31 + 320);
            if (v47) {
              atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            uint64_t v294 = v48;
            char v49 = v295;
            v295 = v47;
            if (v49) {
              sub_18DEE4E18(v49);
            }
            if (sub_18E106B08((uint64_t)v221, (double *)&v288, (uint64_t)v235, (uint64_t)v232, (uint64_t)&v284))
            {
              LOWORD(v324[0]) = 12;
              LOBYTE(v283[0]) = 4;
              *(void *)v321 = (*(uint64_t (**)(unsigned int *))(*(void *)v5 + 16))(v5);
              *(void *)&v321[8] = v50;
              long long v51 = sub_18E017C64((uint64_t)v30);
              cnprint::CNLogFormatter::FormatGeneral(v224, (uint64_t)v321, "Could not add measurement - PSR for %s", v51);
              LOBYTE(v57) = v4 - 72;
              if (*(char *)(v4 + 2511) < 0) {
                uint64_t v57 = *(void *)(v4 + 2488);
              }
              cnprint::CNPrinter::Print((cnprint::CNPrinter *)v324, (unsigned __int8 *)v283, "%s", v52, v53, v54, v55, v56, v57);
            }
            uint64_t UnprocessedMSRData = sub_18E106F60((uint64_t)&v284);
          }
          goto LABEL_93;
        }
        sub_18E112A44((uint64_t)&v284, (long long *)&v255);
        long long v288 = *(_OWORD *)v28[3];
        int v58 = v285;
        long long v59 = (char *)sub_18E017C64((uint64_t)v30);
        sub_18DEDE7B0(v226, v59);
        sub_18E03F90C((uint64_t)&v284, v58, (long long *)v226);
        if (v227 < 0) {
          operator delete(v226[0]);
        }
        if ((*(_DWORD *)&v232[8] & 0x80000000) != 0) {
          __assert_rtn("Zeros", "cnmatrix.h", 3098, "nr >= 0");
        }
        *(void *)&v321[24] = 0x100000003;
        *(void *)v321 = &unk_1EDD18D98;
        v322 = v323;
        *(_DWORD *)&v321[8] = *(_DWORD *)&v232[8];
        *(_DWORD *)&v321[12] = 1;
        *(_DWORD *)&v321[16] = *(_DWORD *)&v232[8];
        *(_DWORD *)&v321[20] = *(_DWORD *)&v232[8];
        uint64_t v60 = (cnprint::CNPrinter *)sub_18DFE2CC8((uint64_t)v321, 0.0);
        if (*v221)
        {
          if (*(_DWORD *)(v4 + 14272) == 174)
          {
            LOWORD(v324[0]) = 2;
            LOBYTE(v283[0]) = 2;
            double v217 = *((double *)&v288 + 1) + (double)(uint64_t)v288;
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)v324, (unsigned __int8 *)v283, "MeasurementAccumulator::AddMeasurement() failed - Out of space,t_meas,%.3lf", v61, v62, v63, v64, v65, SLOBYTE(v217));
            goto LABEL_84;
          }
          if (*(unsigned char *)(v4 + 8337))
          {
            if (cnprint::CNPrinter::GetLogLevel(v60) <= 1)
            {
              LOWORD(v324[0]) = 2;
              LOBYTE(v283[0]) = 1;
              double v219 = *((double *)&v288 + 1) + (double)(uint64_t)v288;
              cnprint::CNPrinter::Print((cnprint::CNPrinter *)v324, (unsigned __int8 *)v283, "MeasurementAccumulator::AddMeasurement() failed - Locked,t_meas,%.3lf", v81, v82, v83, v84, v85, SLOBYTE(v219));
            }
            goto LABEL_84;
          }
          BOOL v86 = sub_18DEE4CB8((double *)&v288, (double *)(v4 + 8344));
          if (v86)
          {
            if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v86) <= 1)
            {
              LOWORD(v324[0]) = 2;
              LOBYTE(v283[0]) = 1;
              double v220 = *((double *)&v288 + 1) + (double)(uint64_t)v288;
              cnprint::CNPrinter::Print((cnprint::CNPrinter *)v324, (unsigned __int8 *)v283, "MeasurementAccumulator::AddMeasurement() failed - Measurement too old,t_meas,%.3lf,t_start,%.3lf", v87, v88, v89, v90, v91, SLOBYTE(v220));
            }
            goto LABEL_84;
          }
          v324[0] = 0uLL;
          sub_18E114A30(v324, (uint64_t)&v284);
          uint64_t v92 = sub_18E06C110((uint64_t *)(v4 + 8376), (void (**)(uint64_t))v324);
          sub_18E067C60((uint64_t (**)(void, void, void, void, void))v324);
          uint64_t v93 = *(int *)(v4 + 14272);
          uint64_t v94 = (v93 + 1);
          if (*(void *)(v4 + 8392) != v94)
          {
            LOWORD(v324[0]) = 2;
            LOBYTE(v283[0]) = 4;
            char v102 = (*((uint64_t (**)(void **))v284 + 2))(&v284);
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)v324, (unsigned __int8 *)v283, "MeasurementAccumulator::AddMeasurement() failed - allocation failed,meas_type,%d,t_meas,%.3lf", v103, v104, v105, v106, v107, v102);
            goto LABEL_84;
          }
          *(_DWORD *)(v4 + 14272) = v94;
          *(_DWORD *)(v4 + 8408) = v94;
          *(_DWORD *)(v4 + 8412) = 1;
          *(_DWORD *)(v4 + 8416) = v94;
          *(_DWORD *)(v4 + 8420) = v94;
          *(_DWORD *)(v4 + 11232) = v94;
          *(_DWORD *)(v4 + 11236) = 1;
          *(_DWORD *)(v4 + 11240) = v94;
          *(_DWORD *)(v4 + 11244) = v94;
          *(_DWORD *)(v4 + 11968) = v94;
          *(_DWORD *)(v4 + 11972) = 1;
          *(_DWORD *)(v4 + 11976) = v94;
          *(_DWORD *)(v4 + 11980) = v94;
          *(_DWORD *)(v4 + 13400) = v94;
          *(_DWORD *)(v4 + 13404) = 1;
          *(_DWORD *)(v4 + 13408) = v94;
          *(_DWORD *)(v4 + 13412) = v94;
          *(_DWORD *)(v4 + 13448) = v94;
          *(_DWORD *)(v4 + 13452) = 1;
          *(_DWORD *)(v4 + 13456) = v94;
          *(_DWORD *)(v4 + 13460) = v94;
          *(_DWORD *)(v4 + 14184) = v94;
          *(_DWORD *)(v4 + 14188) = 1;
          *(_DWORD *)(v4 + 14192) = v94;
          *(_DWORD *)(v4 + 14196) = v94;
          *(_DWORD *)(v4 + 14232) = v94;
          *(_DWORD *)(v4 + 14236) = 1;
          *(_DWORD *)(v4 + 14240) = v94;
          *(_DWORD *)(v4 + 14244) = v94;
          *(_DWORD *)(v4 + 14288) = v94;
          *(_DWORD *)(v4 + 14292) = 1;
          *(_DWORD *)(v4 + 14296) = v94;
          *(_DWORD *)(v4 + 14300) = v94;
          *(_DWORD *)(v4 + 15720) = v94;
          *(_DWORD *)(v4 + 15724) = 1;
          *(_DWORD *)(v4 + 15728) = v94;
          *(_DWORD *)(v4 + 15732) = v94;
          *(_OWORD *)(*(void *)(v4 + 8432) + 16 * v93) = v288;
          if (*(_DWORD *)&v235[8] <= *(_DWORD *)&v235[12]) {
            int v95 = *(_DWORD *)&v235[12];
          }
          else {
            int v95 = *(_DWORD *)&v235[8];
          }
          if (*(_DWORD *)&v235[12]) {
            BOOL v96 = *(_DWORD *)&v235[8] == 0;
          }
          else {
            BOOL v96 = 1;
          }
          if (v96) {
            int v97 = 0;
          }
          else {
            int v97 = v95;
          }
          *(_DWORD *)(*(void *)(v4 + 11256) + 4 * v93) = v97;
          sub_18DFE2F24(*(void *)(v4 + 13424) + (v93 << 6), (uint64_t)v235);
          if (*(_DWORD *)&v321[8] <= *(_DWORD *)&v321[12]) {
            int v98 = *(_DWORD *)&v321[12];
          }
          else {
            int v98 = *(_DWORD *)&v321[8];
          }
          if (*(_DWORD *)&v321[12]) {
            BOOL v99 = *(_DWORD *)&v321[8] == 0;
          }
          else {
            BOOL v99 = 1;
          }
          if (v99) {
            int v100 = 0;
          }
          else {
            int v100 = v98;
          }
          *(_DWORD *)(*(void *)(v4 + 13472) + 4 * v93) = v100;
          sub_18DFE2F24(*(void *)(v4 + 14208) + (v93 << 6), (uint64_t)v321);
          __n128 v101 = sub_18DFE2F24(*(void *)(v4 + 14256) + 112 * (int)v93, (uint64_t)v232);
          *(void *)(*(void *)(v4 + 14312) + 8 * v93) = sub_18E107AC0;
          if (*v92) {
            uint64_t UnprocessedMSRData = ((uint64_t (*)(uint64_t, void *, void, void *, void *, __n128))*v92)(3, v92, 0, &unk_1EDD06000, &std::__any_imp::__unique_typeinfo<raven::h_GnssAverageDopplerArgs_RavenConvergence>::__id, v101);
          }
          else {
            uint64_t UnprocessedMSRData = 0;
          }
          *(void *)(*(void *)(v4 + 15744) + 8 * v93) = UnprocessedMSRData;
        }
        else
        {
          if (cnprint::CNPrinter::GetLogLevel(v60) <= 1)
          {
            LOWORD(v324[0]) = 2;
            LOBYTE(v283[0]) = 1;
            double v218 = *((double *)&v288 + 1) + (double)(uint64_t)v288;
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)v324, (unsigned __int8 *)v283, "MeasurementAccumulator::AddMeasurement() failed - Not initialized,t_meas,%.3lf", v76, v77, v78, v79, v80, SLOBYTE(v218));
          }
LABEL_84:
          LOWORD(v324[0]) = 12;
          LOBYTE(v283[0]) = 4;
          *(void *)v321 = (*(uint64_t (**)(unsigned int *))(*(void *)v5 + 16))(v5);
          *(void *)&v321[8] = v108;
          uint64_t v109 = sub_18E017C64((uint64_t)v30);
          cnprint::CNLogFormatter::FormatGeneral(v224, (uint64_t)v321, "Could not add measurement - average Doppler for %s", v109);
          LOBYTE(v115) = v4 - 72;
          if (*(char *)(v4 + 2511) < 0) {
            uint64_t v115 = *(void *)(v4 + 2488);
          }
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)v324, (unsigned __int8 *)v283, "%s", v110, v111, v112, v113, v114, v115);
        }
        long long v284 = &unk_1EDD0A4E8;
        if (v287 < 0) {
          operator delete(v286);
        }
        v291 = &unk_1EDD0AE58;
        if (v293 < 0) {
          operator delete(v292);
        }
        v291 = &unk_1EDD0A9B8;
        if (v290 < 0) {
          operator delete(v289);
        }
LABEL_93:
        int64x2_t v267 = &unk_1EDD0AE58;
        if (SHIBYTE(v268.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v268.__r_.__value_.__l.__data_);
        }
        int64x2_t v267 = &unk_1EDD0A9B8;
        if (SHIBYTE(v255.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v255.__r_.__value_.__l.__data_);
        }
      }
    }
LABEL_97:
    uint64_t v28 = (uint64_t *)v28[1];
    if (v28 != &v247) {
      continue;
    }
    break;
  }
  if (v29) {
    uint64_t UnprocessedMSRData = sub_18E041A60(v4 + 8264, v29, *(_DWORD *)(*(void *)(v4 + 1168) + 1472));
  }
LABEL_103:
  uint64_t LogLevel = (cnprint::CNPrinter *)cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)UnprocessedMSRData);
  if (LogLevel <= 1)
  {
    LOWORD(v238) = 12;
    v232[0] = 1;
    v255.__r_.__value_.__r.__words[0] = (*(uint64_t (**)(unsigned int *))(*(void *)v5 + 16))(v5);
    v255.__r_.__value_.__l.__size_ = v117;
    raven::RavenSequentialGNSSMeasurementSelector::StringOfL1MeasurementCountsByConstellation((raven::RavenSequentialGNSSMeasurementSelector *)(v4 + 5704), &v284);
    uint64_t v118 = SHIBYTE(v286) >= 0 ? (const char *)&v284 : (const char *)v284;
    char v119 = cnprint::CNLogFormatter::FormatGeneral(v4 + 2488, (uint64_t)&v255, "%s", v118);
    if (*(char *)(v4 + 2511) >= 0) {
      LOBYTE(v125) = v119;
    }
    else {
      uint64_t v125 = *(void *)(v4 + 2488);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v238, v232, "%s", v120, v121, v122, v123, v124, v125);
    if (SHIBYTE(v286) < 0) {
      operator delete(v284);
    }
  }
  if (cnprint::CNPrinter::GetLogLevel(LogLevel) <= 1)
  {
    LOWORD(v238) = 12;
    v232[0] = 1;
    v255.__r_.__value_.__r.__words[0] = (*(uint64_t (**)(unsigned int *))(*(void *)v5 + 16))(v5);
    v255.__r_.__value_.__l.__size_ = v126;
    raven::RavenSequentialGNSSMeasurementSelector::StringOfL5MeasurementCountsByConstellation((raven::RavenSequentialGNSSMeasurementSelector *)(v4 + 5704), &v284);
    double v127 = SHIBYTE(v286) >= 0 ? (const char *)&v284 : (const char *)v284;
    char v128 = cnprint::CNLogFormatter::FormatGeneral(v4 + 2488, (uint64_t)&v255, "%s", v127);
    if (*(char *)(v4 + 2511) >= 0) {
      LOBYTE(v134) = v128;
    }
    else {
      uint64_t v134 = *(void *)(v4 + 2488);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v238, v232, "%s", v129, v130, v131, v132, v133, v134);
    if (SHIBYTE(v286) < 0) {
      operator delete(v284);
    }
  }
  LOWORD(v238) = 12;
  v232[0] = 2;
  v255.__r_.__value_.__r.__words[0] = (*(uint64_t (**)(unsigned int *))(*(void *)v5 + 16))(v5);
  v255.__r_.__value_.__l.__size_ = v135;
  raven::RavenSequentialGNSSMeasurementSelector::StringOfOverallMeasurementSelectionCounts((raven::RavenSequentialGNSSMeasurementSelector *)(v4 + 5704), &v284);
  if (SHIBYTE(v286) >= 0) {
    uint64_t v136 = (const char *)&v284;
  }
  else {
    uint64_t v136 = (const char *)v284;
  }
  cnprint::CNLogFormatter::FormatGeneral(v4 + 2488, (uint64_t)&v255, "%s", v136);
  if (*(char *)(v4 + 2511) >= 0) {
    LOBYTE(v142) = v4 - 72;
  }
  else {
    uint64_t v142 = *(void *)(v4 + 2488);
  }
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v238, v232, "%s", v137, v138, v139, v140, v141, v142);
  if (SHIBYTE(v286) < 0) {
    operator delete(v284);
  }
  LOWORD(v238) = 12;
  v232[0] = 2;
  v255.__r_.__value_.__r.__words[0] = (*(uint64_t (**)(unsigned int *))(*(void *)v5 + 16))(v5);
  v255.__r_.__value_.__l.__size_ = v143;
  raven::RavenSequentialGNSSMeasurementSelector::StringOfOverallMeasurementSelectionCountsForRayTracedMeasurements((raven::RavenSequentialGNSSMeasurementSelector *)(v4 + 5704), &v284);
  if (SHIBYTE(v286) >= 0) {
    uint64_t v144 = (const char *)&v284;
  }
  else {
    uint64_t v144 = (const char *)v284;
  }
  cnprint::CNLogFormatter::FormatGeneral(v4 + 2488, (uint64_t)&v255, "%s", v144);
  if (*(char *)(v4 + 2511) >= 0) {
    LOBYTE(v150) = v4 - 72;
  }
  else {
    uint64_t v150 = *(void *)(v4 + 2488);
  }
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v238, v232, "%s", v145, v146, v147, v148, v149, v150);
  if (SHIBYTE(v286) < 0) {
    operator delete(v284);
  }
  uint64_t v25 = 0;
LABEL_197:
  sub_18E068ED0(&v247);
  return v25;
}

void sub_18E10206C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_18DEDD524(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t raven::RavenConvergenceEstimator::UpdateClockOffsetEstimateIfNecessary(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a2 + 8)) {
    BOOL v5 = *(unsigned char *)(a2 + 24) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    uint64_t v31 = 0x100000008;
    unsigned int v29 = &unk_1EDD19CC8;
    long long v30 = xmmword_18E1FD760;
    int v32 = (double *)&v33;
    if (*(_DWORD *)(a1 + 4180)) {
      uint64_t v6 = a1 + 3408;
    }
    else {
      uint64_t v6 = a1 + 2648;
    }
    sub_18DFE2F24((uint64_t)&v29, v6);
    double v8 = v32[6] * 0.001;
    double v9 = round(v8);
    if (fabs(v9) < 2.22044605e-16) {
      return 1;
    }
    if (cnprint::CNPrinter::GetLogLevel(v7) <= 1)
    {
      __int16 v28 = 12;
      unsigned __int8 v27 = 1;
      char v10 = cnprint::CNLogFormatter::FormatGeneral(a1 + 2488, a3, "clock offset exceeds 0.5 ms,%.3lf ms", v8);
      if (*(char *)(a1 + 2511) >= 0) {
        LOBYTE(v16) = v10;
      }
      else {
        uint64_t v16 = *(void *)(a1 + 2488);
      }
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v28, &v27, "%s", v11, v12, v13, v14, v15, v16);
    }
    return raven::RavenConvergenceEstimator::AdjustClockOffset(a1, a3, v9 * -0.001);
  }
  else
  {
    double v18 = *(double *)(a2 + 16);
    if (vabdd_f64(*(double *)a2, v18) < 2.22044605e-16) {
      return 1;
    }
    double v19 = *(double *)a2 - v18;
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)a1) <= 1)
    {
      LOWORD(v29) = 12;
      LOBYTE(v28) = 1;
      char v20 = cnprint::CNLogFormatter::FormatGeneral(a1 + 2488, a3, "clock jump detected");
      if (*(char *)(a1 + 2511) >= 0) {
        LOBYTE(v26) = v20;
      }
      else {
        uint64_t v26 = *(void *)(a1 + 2488);
      }
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v29, (unsigned __int8 *)&v28, "%s", v21, v22, v23, v24, v25, v26);
    }
    return raven::RavenConvergenceEstimator::AdjustClockOffset(a1, a3, v19);
  }
}

void raven::RavenConvergenceEstimator::ResetOscillatorStates(raven::RavenConvergenceEstimator *this)
{
  *((_OWORD *)this + 7) = *((_OWORD *)this + 5);
  uint64_t v97 = 0x200000002;
  int v95 = &unk_1EDD18BB8;
  int v98 = (double *)&v99;
  long long v96 = xmmword_18E1FD1B0;
  sub_18DFE2CC8((uint64_t)&v95, 0.0);
  uint64_t v2 = *((void *)this + 146);
  double v3 = *(double *)(v2 + 1256) * *(double *)(v2 + 1256);
  double v4 = *(double *)(v2 + 1264) * *(double *)(v2 + 1264);
  BOOL v5 = v98;
  *int v98 = v3;
  v5[SHIDWORD(v96) + 1] = v4;
  v113[0] = 0x700000006;
  uint64_t v92 = 0x100000002;
  v90[2] = &unk_1EDD18B58;
  long long v91 = xmmword_18E1FD1A0;
  uint64_t v93 = &v94;
  uint64_t v94 = 0x700000006;
  uint64_t v88 = 0x100000002;
  BOOL v86 = &unk_1EDD18B28;
  uint64_t v89 = v90;
  long long v87 = xmmword_18E1FD1A0;
  sub_18DFE2CC8((uint64_t)&v86, 0.0);
  uint64_t v138 = 0x200000002;
  long long v137 = xmmword_18E1FD1B0;
  uint64_t v136 = &unk_1EDD18BB8;
  uint64_t v139 = v140;
  v110[0] = 0;
  sub_18DFEEFE8((uint64_t)&v95, (uint64_t)&v136, v110);
  uint64_t v102 = 0x200000002;
  long long v101 = xmmword_18E1FD1B0;
  int v100 = &unk_1EDD18BB8;
  uint64_t v103 = &v104;
  uint64_t v107 = 0x100000002;
  long long v106 = xmmword_18E1FD1A0;
  uint64_t v105 = &unk_1EDD18B58;
  uint64_t v108 = v109;
  uint64_t v111 = 0x100000008;
  *(_OWORD *)&char v110[8] = xmmword_18E1FD760;
  *(void *)uint64_t v110 = &unk_1EDD19CC8;
  uint64_t v112 = v113;
  sub_18E01BFEC((uint64_t)&v136, (uint64_t)&v105, (uint64_t)v110, (uint64_t)&v100);
  int v6 = DWORD1(v101);
  int v7 = v101;
  uint64_t v107 = 0x200000002;
  uint64_t v105 = &unk_1EDD18BB8;
  uint64_t v108 = v109;
  *(void *)&long long v106 = __PAIR64__(v101, DWORD1(v101));
  DWORD2(v106) = v101 * DWORD1(v101);
  HIDWORD(v106) = DWORD1(v101);
  if (DWORD1(v101))
  {
    int v8 = 0;
    int v9 = 0;
    int v10 = HIDWORD(v101);
    uint64_t v11 = v103;
    do
    {
      int v12 = v8;
      int v13 = v9;
      for (int i = v7; i; --i)
      {
        v109[v13] = v11[v12];
        v13 += v6;
        ++v12;
      }
      ++v9;
      v8 += v10;
    }
    while (v9 != v6);
  }
  uint64_t v133 = 0x100000002;
  long long v132 = xmmword_18E1FD1A0;
  uint64_t v131 = &unk_1EDD18B28;
  uint64_t v134 = &v135;
  uint64_t v111 = 0x200000002;
  *(_OWORD *)&char v110[8] = xmmword_18E1FD1B0;
  *(void *)uint64_t v110 = &unk_1EDD18BB8;
  uint64_t v112 = v113;
  uint64_t v83 = 0x200000002;
  uint64_t v81 = &unk_1EDD18BB8;
  long long v82 = xmmword_18E1FD1B0;
  uint64_t v84 = &v85;
  sub_18E06EA40((uint64_t)&v105, (uint64_t)&v131, (uint64_t)v110, (uint64_t)&v81);
  if (v91 <= DWORD1(v91)) {
    unsigned int v15 = DWORD1(v91);
  }
  else {
    unsigned int v15 = v91;
  }
  if (DWORD1(v91)) {
    BOOL v16 = v91 == 0;
  }
  else {
    BOOL v16 = 1;
  }
  if (v16) {
    uint64_t v17 = 0;
  }
  else {
    uint64_t v17 = v15;
  }
  uint64_t v111 = 0x100000002;
  *(_OWORD *)&char v110[8] = xmmword_18E1FD1A0;
  *(void *)uint64_t v110 = &unk_1EDD18B28;
  uint64_t v112 = v113;
  sub_18DFE2B44((uint64_t)&v81, (uint64_t)&v86, (uint64_t)v110);
  double v18 = sub_18E073370((uint64_t)&v100, (uint64_t)v110);
  if (!*((_DWORD *)this + 1045))
  {
    sub_18DFE2F24((uint64_t)this + 3408, (uint64_t)this + 2648);
    sub_18DFE2F24((uint64_t)this + 3512, (uint64_t)this + 2752);
    *(void *)&double v18 = sub_18DFE2F24((uint64_t)this + 4064, (uint64_t)this + 3304).n128_u64[0];
  }
  *((_DWORD *)this + 1045) = 1;
  if (!v91 || !DWORD1(v91))
  {
    sub_18DFE2F24((uint64_t)this + 2648, (uint64_t)this + 3408);
    sub_18DFE2F24((uint64_t)this + 2752, (uint64_t)this + 3512);
    sub_18DFE2F24((uint64_t)this + 3304, (uint64_t)this + 4064);
    *((_DWORD *)this + 1045) = 1;
    goto LABEL_91;
  }
  *((unsigned char *)this + 4176) = 0;
  unsigned int v19 = *((_DWORD *)this + 854);
  unsigned int v20 = *((_DWORD *)this + 855);
  if (v19 <= v20) {
    unsigned int v21 = *((_DWORD *)this + 855);
  }
  else {
    unsigned int v21 = *((_DWORD *)this + 854);
  }
  if (v20) {
    BOOL v22 = v19 == 0;
  }
  else {
    BOOL v22 = 1;
  }
  if (v22) {
    uint64_t v23 = 0;
  }
  else {
    uint64_t v23 = v21;
  }
  uint64_t v80 = v17;
  if ((int)v17 >= 1)
  {
    uint64_t v24 = 0;
    do
    {
      int v25 = *(_DWORD *)((char *)v93 + v24);
      if (v25 < 0 || v25 >= (int)v23)
      {
        *(_WORD *)uint64_t v110 = 2;
        LOBYTE(v105) = 4;
        cnprint::CNLogFormatter::FormatGeneral((const void **)this + 543, "ResetStates(): states must contain valid indices into x, Rxx, and zx.", v18);
        if (*((char *)this + 4367) >= 0) {
          LOBYTE(v31) = (_BYTE)this - 8;
        }
        else {
          uint64_t v31 = *((void *)this + 543);
        }
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v110, (unsigned __int8 *)&v105, "%s", v26, v27, v28, v29, v30, v31);
      }
      v24 += 4;
    }
    while (4 * v17 != v24);
  }
  uint64_t v111 = 0x800000001;
  *(void *)uint64_t v110 = &unk_1EDD18438;
  uint64_t v112 = v113;
  int v32 = v23 - 1;
  if (v23 == 1)
  {
    char v35 = 0;
    *(void *)&long long v38 = 0x100000001;
    *((void *)&v38 + 1) = 0x100000001;
    *(_OWORD *)&char v110[8] = v38;
    LODWORD(v113[0]) = 0;
    int v36 = 1;
    int v37 = 1;
    uint64_t v33 = v80;
  }
  else
  {
    uint64_t v33 = v80;
    if ((int)v23 <= 0)
    {
      int v36 = 0;
      int v37 = 0;
      *(void *)&char v110[8] = 0;
      *(void *)&v110[16] = 0;
      char v35 = 1;
    }
    else
    {
      uint64_t v34 = 0;
      *(_DWORD *)&char v110[8] = 1;
      *(_DWORD *)&v110[12] = v23;
      *(_DWORD *)&v110[16] = v23;
      *(_DWORD *)&v110[20] = 1;
      do
      {
        *((_DWORD *)v113 + v34) = v34;
        ++v34;
      }
      while (v23 != v34);
      char v35 = 0;
      int v36 = 1;
      int v37 = v23;
    }
  }
  uint64_t v138 = 0x100000008;
  uint64_t v136 = &unk_1EDD19CF8;
  uint64_t v139 = v140;
  *(void *)&long long v137 = __PAIR64__(v36, v37);
  DWORD2(v137) = v37 * v36;
  HIDWORD(v137) = v37;
  if (v37)
  {
    int v39 = 0;
    for (int j = 0; j != v37; ++j)
    {
      if ((v35 & 1) == 0)
      {
        int v41 = 0;
        do
        {
          v140[j + HIDWORD(v137) * v41] = *((_DWORD *)v113 + v39 + v41);
          ++v41;
        }
        while (v36 != v41);
      }
      v39 += v36;
    }
  }
  if ((int)v33 >= 1)
  {
    long long v42 = (int *)v93;
    uint64_t v43 = v33;
    do
    {
      uint64_t v44 = *v42++;
      v140[v44] = -1;
      --v43;
    }
    while (v43);
  }
  sub_18E075D20((uint64_t)&v131, v23, 1);
  uint64_t v111 = 0x800000001;
  *(void *)uint64_t v110 = &unk_1EDD18438;
  uint64_t v112 = v113;
  if (v33 == 1)
  {
    char v45 = 0;
    *(void *)&long long v46 = 0x100000001;
    *((void *)&v46 + 1) = 0x100000001;
    *(_OWORD *)&char v110[8] = v46;
    LODWORD(v113[0]) = 0;
    int v47 = 1;
    int v48 = 1;
  }
  else if ((int)v33 <= 0)
  {
    int v47 = 0;
    int v48 = 0;
    *(void *)&char v110[8] = 0;
    *(void *)&v110[16] = 0;
    char v45 = 1;
  }
  else
  {
    uint64_t v49 = 0;
    *(_DWORD *)&char v110[8] = 1;
    *(_DWORD *)&v110[12] = v33;
    *(_DWORD *)&v110[16] = v33;
    *(_DWORD *)&v110[20] = 1;
    do
    {
      *((_DWORD *)v113 + v49) = v49;
      ++v49;
    }
    while (v33 != v49);
    char v45 = 0;
    int v47 = 1;
    int v48 = v33;
  }
  uint64_t v128 = 0x100000008;
  uint64_t v123 = &unk_1EDD19CF8;
  uint64_t v129 = v130;
  int v124 = v48;
  int v125 = v47;
  int v126 = v48 * v47;
  int v127 = v48;
  if (v48)
  {
    int v50 = 0;
    for (int k = 0; k != v48; ++k)
    {
      if ((v45 & 1) == 0)
      {
        int v52 = 0;
        do
        {
          v130[k + v127 * v52] = *((_DWORD *)v113 + v50 + v52);
          ++v52;
        }
        while (v47 != v52);
      }
      v50 += v47;
    }
  }
  sub_18E1169C8((uint64_t)v110, (uint64_t)&v131, (uint64_t)&v123);
  sub_18E1162C0((uint64_t)v110, SDWORD2(v91), (int *)v93);
  int v53 = v23 - v33;
  if ((int)v23 > (int)v33)
  {
    LODWORD(v54) = 0;
    uint64_t v55 = v139;
    uint64_t v56 = v134;
    uint64_t v57 = (int)v33;
    do
    {
      uint64_t v54 = (int)v54;
      do
        int v58 = v55[v54++];
      while (v58 == -1);
      *((_DWORD *)v56 + v57++) = v58;
    }
    while (v57 != (int)v23);
  }
  sub_18E116374((uint64_t)this + 2640, v23, (uint64_t)&v131);
  sub_18E1171C4((uint64_t)v122, (uint64_t)&v123);
  uint64_t v111 = 0x800000001;
  *(void *)uint64_t v110 = &unk_1EDD18438;
  uint64_t v112 = v113;
  if (v32 == v33)
  {
    LOBYTE(v59) = 0;
    *(void *)&long long v60 = 0x100000001;
    *((void *)&v60 + 1) = 0x100000001;
    *(_OWORD *)&char v110[8] = v60;
    LODWORD(v113[0]) = v33;
    int v61 = 1;
    int v62 = 1;
  }
  else if (v32 - (int)v33 < 0)
  {
    int v61 = 0;
    int v62 = 0;
    *(void *)&char v110[8] = 0;
    *(void *)&v110[16] = 0;
    LOBYTE(v59) = 1;
  }
  else
  {
    int v62 = v23 - v33;
    *(_DWORD *)&char v110[8] = 1;
    *(_DWORD *)&v110[12] = v23 - v33;
    *(_DWORD *)&v110[16] = v23 - v33;
    *(_DWORD *)&v110[20] = 1;
    uint64_t v63 = v113;
    uint64_t v59 = (v23 - v33);
    int v64 = v33;
    do
    {
      *v63++ = v64++;
      --v59;
    }
    while (v59);
    int v61 = 1;
  }
  uint64_t v119 = 0x100000008;
  uint64_t v114 = &unk_1EDD19CF8;
  uint64_t v120 = v121;
  int v115 = v62;
  int v116 = v61;
  int v117 = v62 * v61;
  int v118 = v62;
  if (v62)
  {
    int v65 = 0;
    for (int m = 0; m != v62; ++m)
    {
      if ((v59 & 1) == 0)
      {
        int v67 = 0;
        do
        {
          v121[m + v118 * v67] = *((_DWORD *)v113 + v65 + v67);
          ++v67;
        }
        while (v61 != v67);
      }
      v65 += v61;
    }
  }
  sub_18E0758D4((uint64_t)v110, (uint64_t)this + 3408, (uint64_t)&v123);
  sub_18E074DA4((uint64_t)v110, (uint64_t)&v86);
  sub_18E075B48((uint64_t)v110, (uint64_t)this + 3512, (uint64_t)v122, (uint64_t)v122);
  sub_18E074E1C((uint64_t)v110, (uint64_t)&v81);
  if ((v33 & 0x80000000) != 0)
  {
    uint64_t v78 = "nr >= 0";
    int v79 = 3098;
    goto LABEL_97;
  }
  if (v53 < 0)
  {
    uint64_t v78 = "nc >= 0";
    int v79 = 3099;
LABEL_97:
    __assert_rtn("Zeros", "cnmatrix.h", v79, v78);
  }
  uint64_t v107 = 0x800000008;
  uint64_t v105 = &unk_1EDD19DE8;
  uint64_t v108 = v109;
  LODWORD(v106) = v33;
  DWORD1(v106) = v23 - v33;
  DWORD2(v106) = v53 * v33;
  HIDWORD(v106) = v33;
  sub_18DFE2CC8((uint64_t)&v105, 0.0);
  sub_18E075B48((uint64_t)v110, (uint64_t)this + 3512, (uint64_t)v122, (uint64_t)&v114);
  sub_18E074E1C((uint64_t)v110, (uint64_t)&v105);
  sub_18E0758D4((uint64_t)v110, (uint64_t)this + 4064, (uint64_t)&v123);
  sub_18E074DA4((uint64_t)v110, (uint64_t)&v100);
  sub_18E075D20((uint64_t)v110, v23, 1);
  if ((int)v23 >= 1)
  {
    uint64_t v68 = 0;
    uint64_t v69 = v134;
    uint64_t v70 = v112;
    do
    {
      *((_DWORD *)v70 + *((int *)v69 + v68)) = v68;
      ++v68;
    }
    while (v23 != v68);
  }
  sub_18E116374((uint64_t)this + 2640, v23, (uint64_t)v110);
LABEL_91:
  LOWORD(v105) = 12;
  LOBYTE(v100) = 2;
  *(_OWORD *)uint64_t v110 = *((_OWORD *)this + 5);
  char v71 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)v110, "Resetting estimator oscillator states.");
  if (*((char *)this + 2511) >= 0) {
    LOBYTE(v77) = v71;
  }
  else {
    uint64_t v77 = *((void *)this + 311);
  }
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v105, (unsigned __int8 *)&v100, "%s", v72, v73, v74, v75, v76, v77);
}

uint64_t sub_18E102F50(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1EDD0A5C8;
  uint64_t v4 = a1 + 112;
  sub_18E0737B4(a1 + 8, a2 + 8);
  sub_18E0759FC(v4, a2 + 112);
  sub_18E0737B4(a1 + 664, a2 + 664);
  sub_18E0737B4(a1 + 768, a2 + 768);
  sub_18E0759FC(a1 + 872, a2 + 872);
  sub_18E0737B4(a1 + 1424, a2 + 1424);
  long long v5 = *(_OWORD *)(a2 + 1528);
  long long v6 = *(_OWORD *)(a2 + 1560);
  *(_OWORD *)(a1 + 1544) = *(_OWORD *)(a2 + 1544);
  *(_OWORD *)(a1 + 1560) = v6;
  *(_OWORD *)(a1 + 1528) = v5;
  long long v7 = *(_OWORD *)(a2 + 1576);
  long long v8 = *(_OWORD *)(a2 + 1592);
  long long v9 = *(_OWORD *)(a2 + 1608);
  *(void *)(a1 + 1624) = *(void *)(a2 + 1624);
  *(_OWORD *)(a1 + 1592) = v8;
  *(_OWORD *)(a1 + 1608) = v9;
  *(_OWORD *)(a1 + 1576) = v7;
  *(void *)(a1 + 1632) = 0;
  *(void *)(a1 + 1648) = 0;
  *(void *)(a1 + 1640) = 0;
  sub_18E091534((void *)(a1 + 1632), *(void *)(a2 + 1632), *(void *)(a2 + 1640), (uint64_t)(*(void *)(a2 + 1640) - *(void *)(a2 + 1632)) >> 5);
  *(void *)(a1 + 1672) = 0;
  *(_OWORD *)(a1 + 1656) = 0u;
  sub_18E091534((void *)(a1 + 1656), *(void *)(a2 + 1656), *(void *)(a2 + 1664), (uint64_t)(*(void *)(a2 + 1664) - *(void *)(a2 + 1656)) >> 5);
  *(void *)(a1 + 1696) = 0;
  *(_OWORD *)(a1 + 1680) = 0u;
  sub_18E091534((void *)(a1 + 1680), *(void *)(a2 + 1680), *(void *)(a2 + 1688), (uint64_t)(*(void *)(a2 + 1688) - *(void *)(a2 + 1680)) >> 5);
  if (*(char *)(a2 + 1727) < 0)
  {
    sub_18DEDE668((unsigned char *)(a1 + 1704), *(void **)(a2 + 1704), *(void *)(a2 + 1712));
  }
  else
  {
    long long v10 = *(_OWORD *)(a2 + 1704);
    *(void *)(a1 + 1720) = *(void *)(a2 + 1720);
    *(_OWORD *)(a1 + 1704) = v10;
  }
  uint64_t v11 = (unsigned char *)(a1 + 1728);
  if (*(char *)(a2 + 1751) < 0)
  {
    sub_18DEDE668(v11, *(void **)(a2 + 1728), *(void *)(a2 + 1736));
  }
  else
  {
    long long v12 = *(_OWORD *)(a2 + 1728);
    *(void *)(a1 + 1744) = *(void *)(a2 + 1744);
    *(_OWORD *)uint64_t v11 = v12;
  }
  *(void *)a1 = &unk_1EDD0A818;
  sub_18E0759FC(a1 + 1752, a2 + 1752);
  sub_18E0737B4(a1 + 2304, a2 + 2304);
  sub_18E0759FC(a1 + 2408, a2 + 2408);
  long long v13 = *(_OWORD *)(a2 + 2960);
  long long v14 = *(_OWORD *)(a2 + 2976);
  *(_OWORD *)(a1 + 2992) = *(_OWORD *)(a2 + 2992);
  *(_OWORD *)(a1 + 2976) = v14;
  *(_OWORD *)(a1 + 2960) = v13;
  long long v15 = *(_OWORD *)(a2 + 3008);
  long long v16 = *(_OWORD *)(a2 + 3024);
  long long v17 = *(_OWORD *)(a2 + 3040);
  *(void *)(a1 + 3056) = *(void *)(a2 + 3056);
  *(_OWORD *)(a1 + 3040) = v17;
  *(_OWORD *)(a1 + 3024) = v16;
  *(_OWORD *)(a1 + 3008) = v15;
  return a1;
}

void sub_18E1031B0(_Unwind_Exception *a1, uint64_t a2, void *a3, void *a4, ...)
{
  va_start(va, a4);
  if (*(char *)(v5 + 1727) < 0) {
    operator delete(*v6);
  }
  sub_18E0694B8((void ***)va);
  sub_18E0694B8((void ***)va);
  sub_18E0694B8((void ***)va);
  *long long v9 = &unk_1EDD17478;
  *long long v8 = &unk_1EDD17478;
  *long long v7 = &unk_1EDD17478;
  *a3 = &unk_1EDD17478;
  *uint64_t v4 = &unk_1EDD17478;
  *a4 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

void sub_18E103320()
{
}

void sub_18E103328()
{
}

void sub_18E103330()
{
}

void sub_18E103338()
{
}

uint64_t sub_18E103340(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1F4188790](a1);
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v6 = v1;
  uint64_t v124 = 0x100000008;
  long long v123 = xmmword_18E1FD760;
  uint64_t v122 = &unk_1EDD19CC8;
  int v125 = (float64_t *)&v126;
  if (*(_DWORD *)(v1 + 4180)) {
    uint64_t v7 = v1 + 3408;
  }
  else {
    uint64_t v7 = v1 + 2648;
  }
  sub_18DFE2F24((uint64_t)&v122, v7);
  sub_18E074368((uint64_t)&v119, *v125, v125[1], v125[2]);
  double v8 = 1.0;
  if (*(unsigned char *)(v6 + 1408))
  {
    unsigned int v9 = *(unsigned __int8 *)(v6 + 1520);
    if (v9 >= 0xA || ((0x37Fu >> v9) & 1) == 0) {
      double v8 = *(double *)(*(void *)(v6 + 1168) + 536);
    }
  }
  double v10 = v5[13];
  double v11 = v5[7];
  if (!v120) {
    double v11 = v5[13];
  }
  double v12 = v8 * v11;
  if (v120) {
    double v13 = v5[8];
  }
  else {
    double v13 = v5[13];
  }
  if (v120) {
    double v10 = v5[9];
  }
  uint64_t result = 0xFFFFFFFFLL;
  if (v12 > 0.0)
  {
    double v15 = v8 * v13;
    if (v8 * v13 > 0.0)
    {
      double v16 = v8 * v10;
      if (v8 * v10 > 0.0)
      {
        double v17 = v5[2];
        double v18 = fabs(v17);
        uint64_t v116 = 0x600000006;
        uint64_t v114 = &unk_1EDD197B8;
        int v117 = (double *)&v118;
        long long v115 = xmmword_18E1F8570;
        sub_18DFE2CC8((uint64_t)&v114, 0.0);
        double v19 = v17 * v17 * v18;
        unsigned int v20 = v117;
        *int v117 = v12 * 0.333333333 * v19;
        double v21 = v12 * 0.5 * (v17 * v17);
        int v22 = HIDWORD(v115);
        int v23 = 3 * HIDWORD(v115);
        v20[3 * HIDWORD(v115)] = v21;
        v20[3] = v21;
        v20[v23 + 3] = v12 * v18;
        v20[v22 + 1] = v15 * 0.333333333 * v19;
        double v24 = v15 * 0.5 * (v17 * v17);
        v20[(4 * v22) | 1] = v24;
        v20[v22 + 4] = v24;
        v20[4 * v22 + 4] = v15 * v18;
        int v25 = 2 * v22;
        v20[2 * v22 + 2] = v16 * 0.333333333 * v19;
        double v26 = v16 * 0.5 * (v17 * v17);
        v22 *= 5;
        v20[v22 + 2] = v26;
        v20[v25 + 5] = v26;
        v20[v22 + 5] = v16 * v18;
        sub_18E074428((uint64_t)v113, (uint64_t)&v114);
        if (v120)
        {
          uint64_t v70 = 0x300000003;
          long long v69 = xmmword_18E1F0010;
          uint64_t v68 = &unk_1EDD18EE8;
          char v71 = v72;
          sub_18DFE2F24((uint64_t)&v68, (uint64_t)&v121);
          uint64_t v93 = 0x600000006;
          long long v91 = &unk_1EDD197B8;
          uint64_t v94 = &v95;
          long long v92 = xmmword_18E1F8570;
          sub_18DFE2CC8((uint64_t)&v91, 0.0);
          uint64_t v28 = v71;
          uint64_t v29 = v94;
          *(void *)uint64_t v94 = *v71;
          uint64_t v30 = SHIDWORD(v69);
          uint64_t v31 = SHIDWORD(v92);
          *((void *)v29 + SHIDWORD(v92)) = v28[SHIDWORD(v69)];
          *(void *)&v29[v31] = v28[2 * v30];
          *((void *)v29 + 1) = v28[1];
          int v32 = v30 + 1;
          *((void *)v29 + (int)v31 + 1) = v28[(int)v30 + 1];
          uint64_t v33 = &v28[2 * (int)v30];
          uint64_t v34 = &v29[v31];
          *((void *)v34 + 1) = v33[1];
          *((void *)v29 + 2) = v28[2];
          int v35 = v30 + 2;
          *((void *)v29 + (int)v31 + 2) = v28[(int)v30 + 2];
          *((void *)v34 + 2) = v33[2];
          LODWORD(v34) = 3 * v31;
          *((void *)v29 + (int)v34 + 3) = *v28;
          *((void *)v29 + (int)((4 * v31) | 3)) = v28[v30];
          uint64_t v36 = v28[2 * v30];
          LODWORD(v30) = 5 * v31;
          *((void *)v29 + (int)v30 + 3) = v36;
          *((void *)v29 + (int)v34 + 4) = v28[1];
          LODWORD(v31) = 4 * v31;
          *((void *)v29 + (int)v31 + 4) = v28[v32];
          *((void *)v29 + (int)v30 + 4) = v33[1];
          *((void *)v29 + (int)v34 + 5) = v28[2];
          *((void *)v29 + (int)v31 + 5) = v28[v35];
          *((void *)v29 + (int)v30 + 5) = v33[2];
          uint64_t v83 = 0x600000006;
          long long v82 = xmmword_18E1F8570;
          uint64_t v81 = &unk_1EDD197B8;
          uint64_t v84 = v85;
          sub_18DFE2B44((uint64_t)&v91, (uint64_t)&v114, (uint64_t)&v81);
          int v37 = DWORD1(v92);
          int v38 = v92;
          uint64_t v78 = 0x600000006;
          uint64_t v73 = &unk_1EDD197B8;
          int v79 = v80;
          int v74 = DWORD1(v92);
          int v75 = v92;
          int v76 = v92 * DWORD1(v92);
          int v77 = DWORD1(v92);
          if (DWORD1(v92))
          {
            int v39 = 0;
            int v40 = 0;
            int v41 = HIDWORD(v92);
            long long v42 = v94;
            do
            {
              int v43 = v39;
              int v44 = v40;
              for (int i = v38; i; --i)
              {
                v80[v44] = *((void *)v42 + v43);
                v44 += v37;
                ++v43;
              }
              ++v40;
              v39 += v41;
            }
            while (v40 != v37);
          }
          uint64_t v105 = 0x600000006;
          long long v104 = xmmword_18E1F8570;
          uint64_t v103 = &unk_1EDD197B8;
          long long v106 = v107;
          sub_18DFE2B44((uint64_t)&v81, (uint64_t)&v73, (uint64_t)&v103);
          sub_18DFE2F24((uint64_t)v113, (uint64_t)&v103);
        }
        uint64_t v110 = 0x200000002;
        uint64_t v108 = &unk_1EDD18BB8;
        long long v109 = xmmword_18E1FD1B0;
        uint64_t v111 = &v112;
        if (sub_18E073B20(v6, (uint64_t)v5, (uint64_t)&v108, COERCE_DOUBLE(0x200000002), v27))
        {
          LOWORD(v91) = 12;
          LOBYTE(v103) = 4;
          char v46 = cnprint::CNLogFormatter::FormatGeneral(v6 + 2488, (uint64_t)v5, "RavenEstimator::GetOscillatorProcessNoiseCovarianceMatrix failed");
          if (*(char *)(v6 + 2511) >= 0) {
            LOBYTE(v52) = v46;
          }
          else {
            uint64_t v52 = *(void *)(v6 + 2488);
          }
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v91, (unsigned __int8 *)&v103, "%s", v47, v48, v49, v50, v51, v52);
          return 0xFFFFFFFFLL;
        }
        else
        {
          uint64_t v105 = 0x800000008;
          uint64_t v103 = &unk_1EDD19DE8;
          long long v106 = v107;
          long long v104 = xmmword_18E1FD750;
          sub_18DFE2CC8((uint64_t)&v103, 0.0);
          for (uint64_t j = 0; j != 6; ++j)
            *((_DWORD *)&v95 + j) = j;
          uint64_t v99 = 0x100000008;
          uint64_t v97 = &unk_1EDD19CF8;
          int v100 = &v101;
          long long v98 = xmmword_18E1FD770;
          long long v101 = v95;
          uint64_t v102 = v96;
          sub_18E075B48((uint64_t)&v91, (uint64_t)&v103, (uint64_t)&v97, (uint64_t)&v97);
          sub_18E074E1C((uint64_t)&v91, (uint64_t)v113);
          *(void *)&long long v95 = 0x700000006;
          uint64_t v88 = 0x100000008;
          BOOL v86 = &unk_1EDD19CF8;
          uint64_t v89 = &v90;
          long long v87 = xmmword_18E1FD1A0;
          uint64_t v90 = 0x700000006;
          sub_18E075B48((uint64_t)&v91, (uint64_t)&v103, (uint64_t)&v86, (uint64_t)&v86);
          sub_18E074E1C((uint64_t)&v91, (uint64_t)&v108);
          uint64_t v65 = 0x800000008;
          uint64_t v63 = &unk_1EDD19DE8;
          long long v64 = xmmword_18E1FD750;
          int v66 = &v67;
          LOBYTE(v91) = 0;
          sub_18DFEEFE8((uint64_t)&v103, (uint64_t)&v63, (BOOL *)&v91);
          uint64_t v70 = 0x800000008;
          long long v69 = xmmword_18E1FD750;
          uint64_t v68 = &unk_1EDD19DE8;
          char v71 = v72;
          uint64_t v129 = 0x100000008;
          long long v128 = xmmword_18E1FD760;
          int v127 = &unk_1EDD19CF8;
          uint64_t v130 = v131;
          uint64_t v93 = 0x100000020;
          long long v92 = xmmword_18E1FD780;
          long long v91 = &unk_1EDD18C78;
          uint64_t v94 = &v95;
          sub_18E01BFEC((uint64_t)&v63, (uint64_t)&v127, (uint64_t)&v91, (uint64_t)&v68);
          int v54 = DWORD1(v69);
          int v55 = v69;
          uint64_t v78 = 0x800000008;
          uint64_t v73 = &unk_1EDD19DE8;
          int v79 = v80;
          int v74 = DWORD1(v69);
          int v75 = v69;
          int v76 = v69 * DWORD1(v69);
          int v77 = DWORD1(v69);
          if (DWORD1(v69))
          {
            int v56 = 0;
            int v57 = 0;
            int v58 = HIDWORD(v69);
            uint64_t v59 = v71;
            do
            {
              int v60 = v56;
              int v61 = v57;
              for (int k = v55; k; --k)
              {
                v80[v61] = v59[v60];
                v61 += v54;
                ++v60;
              }
              ++v57;
              v56 += v58;
            }
            while (v57 != v54);
          }
          uint64_t v129 = 0x100000008;
          long long v128 = xmmword_18E1FD760;
          int v127 = &unk_1EDD19CC8;
          uint64_t v130 = v131;
          uint64_t v93 = 0x800000008;
          long long v92 = xmmword_18E1FD750;
          long long v91 = &unk_1EDD19DE8;
          uint64_t v94 = &v95;
          uint64_t v83 = 0x800000008;
          long long v82 = xmmword_18E1FD750;
          uint64_t v81 = &unk_1EDD19DE8;
          uint64_t v84 = v85;
          sub_18E06EA40((uint64_t)&v73, (uint64_t)&v127, (uint64_t)&v91, (uint64_t)&v81);
          sub_18DFE2F24(v3, (uint64_t)&v81);
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t sub_18E103D24(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1F4188790](a1);
  uint64_t v196 = v2;
  uint64_t v197 = v3;
  uint64_t v203 = v4;
  uint64_t v6 = v5;
  uint64_t v7 = (__n128 *)v1;
  if (!*(_DWORD *)(v1 + 1540))
  {
    sub_18DFE2F24(v1 + 768, v1 + 8);
    sub_18DFE2F24((uint64_t)&v7[54].n128_i64[1], (uint64_t)&v7[7]);
    sub_18DFE2F24((uint64_t)&v7[89], (uint64_t)&v7[41].n128_i64[1]);
  }
  uint64_t v8 = *(unsigned int *)(v6 + 8);
  if ((v8 & 0x80000000) != 0) {
    goto LABEL_223;
  }
  unsigned __int32 v9 = v7[48].n128_u32[2];
  unsigned __int32 v10 = v7[48].n128_u32[3];
  if (v9 <= v10) {
    unsigned __int32 v11 = v7[48].n128_u32[3];
  }
  else {
    unsigned __int32 v11 = v7[48].n128_u32[2];
  }
  if (v10) {
    BOOL v12 = v9 == 0;
  }
  else {
    BOOL v12 = 1;
  }
  uint64_t v209 = 0x100000008;
  int8x16_t v204 = &unk_1EDD19CC8;
  if (v12) {
    uint64_t v13 = 0;
  }
  else {
    uint64_t v13 = v11;
  }
  int8x16_t v210 = &v211;
  int v205 = v8;
  int v206 = 1;
  int v207 = v8;
  uint64_t v192 = v8;
  int v208 = v8;
  sub_18DFE2CC8((uint64_t)&v204, 0.0);
  unsigned int v14 = *(_DWORD *)(v197 + 8);
  unsigned int v15 = *(_DWORD *)(v197 + 12);
  if (v14 <= v15) {
    unsigned int v16 = *(_DWORD *)(v197 + 12);
  }
  else {
    unsigned int v16 = *(_DWORD *)(v197 + 8);
  }
  if (v15) {
    BOOL v17 = v14 == 0;
  }
  else {
    BOOL v17 = 1;
  }
  if (v17) {
    uint64_t v18 = 0;
  }
  else {
    uint64_t v18 = v16;
  }
  sub_18E074C34(":", v203, 0, (uint64_t)&v247);
  uint64_t v302 = v303;
  uint64_t v19 = DWORD1(v248);
  *(_DWORD *)int8x16_t v301 = 1;
  *(_DWORD *)&v301[4] = DWORD1(v248);
  *(_DWORD *)&v301[20] = 1;
  *(_DWORD *)&v301[8] = DWORD1(v248);
  *(void *)&v301[12] = 0x200000001;
  if (DWORD1(v248))
  {
    uint64_t v20 = 0;
    double v21 = v250;
    unsigned int v22 = v248;
    uint64_t v23 = v248 - 1;
    int v24 = 1;
    do
    {
      int v25 = v21[v22 * v20];
      unsigned int v26 = v24;
      uint64_t v27 = v23;
      if (v22 >= 2)
      {
        do
        {
          v25 += v21[v26++];
          --v27;
        }
        while (v27);
      }
      v303[v20++] = v25;
      v24 += v22;
    }
    while (v20 != v19);
  }
  uint64_t v199 = (uint64_t)&v7[48];
  sub_18E074C34(":", v203, 1, (uint64_t)&v247);
  uint64_t v302 = v303;
  uint64_t v28 = DWORD1(v248);
  *(_DWORD *)int8x16_t v301 = 1;
  *(_DWORD *)&v301[4] = DWORD1(v248);
  *(_DWORD *)&v301[20] = 1;
  *(_DWORD *)&v301[8] = DWORD1(v248);
  *(void *)&v301[12] = 0x200000001;
  if (DWORD1(v248))
  {
    uint64_t v29 = 0;
    uint64_t v30 = v250;
    unsigned int v31 = v248;
    uint64_t v32 = v248 - 1;
    int v33 = 1;
    do
    {
      int v34 = v30[v31 * v29];
      unsigned int v35 = v33;
      uint64_t v36 = v32;
      if (v31 >= 2)
      {
        do
        {
          v34 += v30[v35++];
          --v36;
        }
        while (v36);
      }
      v303[v29++] = v34;
      v33 += v31;
    }
    while (v29 != v28);
  }
  double v37 = v7[189].n128_f64[0];
  int v195 = v7[190].n128_u8[9];
  if (!v7[48].n128_u32[2] || !v7[48].n128_u32[3])
  {
    if ((v13 & 0x80000000) == 0)
    {
      *(void *)&v301[16] = 0x100000008;
      long long v300 = &unk_1EDD19CC8;
      uint64_t v302 = v303;
      *(_DWORD *)int8x16_t v301 = v13;
      *(_DWORD *)&v301[4] = 1;
      *(_DWORD *)&v301[8] = v13;
      *(_DWORD *)&v301[12] = v13;
      sub_18DFE2CC8((uint64_t)&v300, 0.0);
      sub_18DFE2F24(v199, (uint64_t)&v300);
      goto LABEL_36;
    }
LABEL_223:
    __assert_rtn("Zeros", "cnmatrix.h", 3098, "nr >= 0");
  }
LABEL_36:
  uint64_t v38 = (uint64_t)&v7[54].n128_i64[1];
  if (!v7[55].n128_u32[0] || !v7[55].n128_u32[1])
  {
    if ((v13 & 0x80000000) != 0) {
      __assert_rtn("Zeros", "cnmatrix.h", 3056, "n >= 0");
    }
    *(void *)&v301[16] = 0x800000008;
    long long v300 = &unk_1EDD19DE8;
    uint64_t v302 = v303;
    *(_DWORD *)int8x16_t v301 = v13;
    *(_DWORD *)&v301[4] = v13;
    *(_DWORD *)&v301[8] = v13 * v13;
    *(_DWORD *)&v301[12] = v13;
    sub_18DFE2CC8((uint64_t)&v300, 0.0);
    sub_18DFE2F24((uint64_t)&v7[54].n128_i64[1], (uint64_t)&v300);
  }
  uint64_t v39 = (uint64_t)&v7[89];
  if (!v7[89].n128_u32[2] || !v7[89].n128_u32[3])
  {
    *(void *)&v301[16] = 0x100000008;
    *(_OWORD *)int8x16_t v301 = xmmword_18E1FD760;
    long long v300 = &unk_1EDD19CC8;
    uint64_t v302 = v303;
    sub_18DFE2B44((uint64_t)&v7[54].n128_i64[1], v199, (uint64_t)&v300);
    sub_18DFE2F24((uint64_t)&v7[89], (uint64_t)&v300);
  }
  if ((v13 & 0x80000000) != 0) {
    __assert_rtn("Zeros", "cnmatrix.h", 3099, "nc >= 0");
  }
  *(void *)&v301[16] = 0x800000008;
  long long v300 = &unk_1EDD19DE8;
  uint64_t v302 = v303;
  *(_DWORD *)int8x16_t v301 = v192;
  *(_DWORD *)&v301[4] = v13;
  unsigned int v189 = v13 * v192;
  *(_DWORD *)&v301[8] = v13 * v192;
  *(_DWORD *)&v301[12] = v192;
  sub_18DFE2CC8((uint64_t)&v300, 0.0);
  uint64_t v188 = (uint64_t)&v7[109].n128_i64[1];
  sub_18DFE2F24((uint64_t)&v7[109].n128_i64[1], (uint64_t)&v300);
  *(void *)&v301[16] = 0x100000008;
  long long v300 = &unk_1EDD19CC8;
  uint64_t v302 = v303;
  char v40 = 1;
  *(_DWORD *)int8x16_t v301 = v192;
  *(_DWORD *)&v301[4] = 1;
  *(_DWORD *)&v301[8] = v192;
  *(_DWORD *)&v301[12] = v192;
  sub_18DFE2CC8((uint64_t)&v300, 0.0);
  uint64_t v187 = (uint64_t)&v7[144];
  sub_18DFE2F24((uint64_t)&v7[144], (uint64_t)&v300);
  uint64_t v186 = (uint64_t)&v7[150].n128_i64[1];
  sub_18DFE2F24((uint64_t)&v7[150].n128_i64[1], v6);
  v7[96].n128_u32[1] = 1;
  __n128 v41 = (__n128)vdupq_lane_s32((int32x2_t)(v13 | 0x100000000), 0);
  v41.n128_u32[1] = 1;
  v7[1] = v41;
  sub_18E0752C0((uint64_t)v298, v18, 1, v41);
  sub_18E0755CC((uint64_t)v296, v18, 1, v42, v43);
  sub_18E0755CC((uint64_t)v294, v18, 1, v44, v45);
  uint64_t v193 = (uint64_t)&v7->n128_i64[1];
  uint64_t v291 = 0x100000008;
  long long v290 = xmmword_18E1FD760;
  v289 = &unk_1EDD19CF8;
  v292 = &v293;
  uint64_t v286 = 0x100000008;
  long long v285 = xmmword_18E1FD760;
  long long v284 = &unk_1EDD19CF8;
  char v287 = &v288;
  uint64_t v194 = v7;
  uint64_t v191 = v6;
  uint64_t v202 = v13;
  uint64_t v201 = v18;
  if ((int)v18 < 1)
  {
LABEL_85:
    if (v195) {
      uint64_t v80 = v18;
    }
    else {
      uint64_t v80 = 1;
    }
    uint64_t v190 = v80;
    sub_18E0737B4((uint64_t)v283, v199);
    sub_18E0759FC((uint64_t)&v278, v38);
    sub_18E0737B4((uint64_t)v277, v39);
    v7[110].n128_u64[1] = 0;
    v7[110].n128_u64[0] = 0;
    v7[145].n128_u64[0] = 0;
    v7[144].n128_u64[1] = 0;
    v7[151].n128_u64[1] = 0;
    v7[151].n128_u64[0] = 0;
    uint64_t v274 = 0x800000008;
    long long v273 = xmmword_18E1FD750;
    long long v272 = &unk_1EDD19DE8;
    long long v275 = v276;
    uint64_t v269 = 0x800000008;
    int64x2_t v267 = &unk_1EDD19DE8;
    long long v270 = v271;
    LODWORD(v268) = v13;
    DWORD1(v268) = v13;
    DWORD2(v268) = v13 * v13;
    HIDWORD(v268) = v13;
    sub_18DFE2CC8((uint64_t)&v267, 0.0);
    if (v13)
    {
      int v81 = 0;
      int v82 = HIDWORD(v268) + 1;
      uint64_t v83 = v270;
      uint64_t v84 = v13;
      do
      {
        *(void *)&v83[8 * v81] = 0x3FF0000000000000;
        v81 += v82;
        --v84;
      }
      while (v84);
    }
    uint64_t v264 = 0x800000008;
    long long v263 = xmmword_18E1FD750;
    long long v262 = &unk_1EDD19DE8;
    long long v265 = v266;
    uint64_t v259 = 0x100000008;
    long long v258 = xmmword_18E1FD760;
    long long v257 = &unk_1EDD19CC8;
    long long v260 = &v261;
    uint64_t v254 = 0x100000008;
    long long v253 = xmmword_18E1FD760;
    __int16 v252 = &unk_1EDD19CC8;
    std::string v255 = &v256;
    if ((int)v190 < 1)
    {
LABEL_208:
      sub_18DFE2F24((uint64_t)&v194[7], (uint64_t)&v278);
      sub_18DFE2F24((uint64_t)&v194[41].n128_i64[1], (uint64_t)v277);
      uint64_t result = 0;
      v194[96].n128_u32[1] = 0;
      goto LABEL_214;
    }
    uint64_t v198 = 0;
    int v85 = 0;
    int v86 = 0;
    unsigned int v87 = v13;
    while (1)
    {
      if (v195)
      {
        if (v198)
        {
          if ((v87 & 0x80000000) != 0) {
            __assert_rtn("Eye", "cnmatrix.h", 2094, "n >= 0");
          }
          uint64_t v249 = 0x800000008;
          uint64_t v247 = &unk_1EDD19DE8;
          uint64_t v250 = v251;
          LODWORD(v248) = v87;
          DWORD1(v248) = v87;
          DWORD2(v248) = v87 * v87;
          HIDWORD(v248) = v87;
          unsigned int v88 = v87;
          sub_18DFE2CC8((uint64_t)&v247, 0.0);
          if (v88)
          {
            int v89 = 0;
            int v90 = HIDWORD(v248) + 1;
            long long v91 = v250;
            uint64_t v92 = v88;
            do
            {
              *(void *)&v91[2 * v89] = 0x3FF0000000000000;
              v89 += v90;
              --v92;
            }
            while (v92);
          }
          sub_18E075B48((uint64_t)&v300, (uint64_t)&v267, (uint64_t)&v289, (uint64_t)&v289);
          sub_18E074E1C((uint64_t)&v300, (uint64_t)&v247);
        }
        uint64_t v93 = *(unsigned int *)(*(void *)(v203 + 32) + 4 * v198);
        uint64_t v214 = 0x800000001;
        uint64_t v212 = &unk_1EDD18438;
        unsigned int v215 = v216;
        if (v93 == 1)
        {
          char v94 = 0;
          *(void *)&long long v95 = 0x100000001;
          *((void *)&v95 + 1) = 0x100000001;
          long long v213 = v95;
          v216[0] = 0;
          int v96 = 1;
          LODWORD(v93) = 1;
        }
        else if ((int)v93 <= 0)
        {
          int v96 = 0;
          LODWORD(v93) = 0;
          long long v213 = 0uLL;
          char v94 = 1;
        }
        else
        {
          uint64_t v129 = 0;
          LODWORD(v213) = 1;
          DWORD1(v213) = v93;
          *((void *)&v213 + 1) = v93 | 0x100000000;
          do
          {
            v216[v129] = v129;
            ++v129;
          }
          while (v93 != v129);
          char v94 = 0;
          int v96 = 1;
        }
        uint64_t v249 = 0x100000008;
        uint64_t v247 = &unk_1EDD19CF8;
        uint64_t v250 = v251;
        *(void *)&long long v248 = __PAIR64__(v96, v93);
        DWORD2(v248) = v93 * v96;
        HIDWORD(v248) = v93;
        if (v93)
        {
          int v130 = 0;
          int v131 = 0;
          do
          {
            if ((v94 & 1) == 0)
            {
              int v132 = 0;
              do
              {
                v251[v131 + HIDWORD(v248) * v132] = v216[v130 + v132];
                ++v132;
              }
              while (v96 != v132);
            }
            ++v131;
            v130 += v96;
          }
          while (v131 != v93);
          int v133 = v248;
          int v96 = DWORD1(v248);
        }
        else
        {
          int v133 = 0;
        }
        *(void *)&v301[16] = 0x100000008;
        long long v300 = &unk_1EDD19CF8;
        uint64_t v302 = v303;
        *(_DWORD *)int8x16_t v301 = v133;
        *(_DWORD *)&v301[4] = v96;
        uint64_t v134 = (v133 * v96);
        *(_DWORD *)&v301[8] = v134;
        *(_DWORD *)&v301[12] = v133;
        if ((int)v134 >= 1)
        {
          uint64_t v135 = v251;
          uint64_t v136 = v303;
          do
          {
            int v137 = *v135++;
            *v136++ = v137 + v86;
            --v134;
          }
          while (v134);
        }
        sub_18DFEEA3C((uint64_t)&v289, (uint64_t)&v300);
        uint64_t v138 = *(unsigned int *)(*(void *)(v203 + 32) + 4 * (*(_DWORD *)(v203 + 20) + (int)v198));
        uint64_t v214 = 0x800000001;
        uint64_t v212 = &unk_1EDD18438;
        unsigned int v215 = v216;
        if (v138 == 1)
        {
          char v139 = 0;
          *(void *)&long long v140 = 0x100000001;
          *((void *)&v140 + 1) = 0x100000001;
          long long v213 = v140;
          v216[0] = 0;
          int v141 = 1;
          LODWORD(v138) = 1;
        }
        else if ((int)v138 <= 0)
        {
          int v141 = 0;
          LODWORD(v138) = 0;
          long long v213 = 0uLL;
          char v139 = 1;
        }
        else
        {
          uint64_t v142 = 0;
          LODWORD(v213) = 1;
          DWORD1(v213) = v138;
          *((void *)&v213 + 1) = v138 | 0x100000000;
          do
          {
            v216[v142] = v142;
            ++v142;
          }
          while (v138 != v142);
          char v139 = 0;
          int v141 = 1;
        }
        uint64_t v249 = 0x100000008;
        uint64_t v247 = &unk_1EDD19CF8;
        uint64_t v250 = v251;
        *(void *)&long long v248 = __PAIR64__(v141, v138);
        DWORD2(v248) = v138 * v141;
        HIDWORD(v248) = v138;
        if (v138)
        {
          int v143 = 0;
          int v144 = 0;
          do
          {
            if ((v139 & 1) == 0)
            {
              int v145 = 0;
              do
              {
                v251[v144 + HIDWORD(v248) * v145] = v216[v143 + v145];
                ++v145;
              }
              while (v141 != v145);
            }
            ++v144;
            v143 += v141;
          }
          while (v144 != v138);
          int v146 = v248;
          int v141 = DWORD1(v248);
        }
        else
        {
          int v146 = 0;
        }
        *(void *)&v301[16] = 0x100000008;
        long long v300 = &unk_1EDD19CF8;
        uint64_t v302 = v303;
        *(_DWORD *)int8x16_t v301 = v146;
        *(_DWORD *)&v301[4] = v141;
        uint64_t v147 = (v146 * v141);
        *(_DWORD *)&v301[8] = v147;
        *(_DWORD *)&v301[12] = v146;
        if ((int)v147 >= 1)
        {
          uint64_t v148 = v251;
          uint64_t v149 = v303;
          do
          {
            int v150 = *v148++;
            *v149++ = v150 + v85;
            --v147;
          }
          while (v147);
        }
        sub_18DFEEA3C((uint64_t)&v284, (uint64_t)&v300);
        sub_18E074F68(v6, (uint64_t)&v284, (uint64_t)&v284, (uint64_t)&v300);
        sub_18DFE2F24((uint64_t)&v272, (uint64_t)&v300);
        uint64_t v151 = *(void *)(v203 + 32);
        unsigned int v128 = *(_DWORD *)(v151 + 4 * (*(_DWORD *)(v203 + 20) + (int)v198));
        unsigned int v200 = *(_DWORD *)(v151 + 4 * v198);
        uint64_t v152 = v297;
        sub_18E075B48((uint64_t)&v300, (uint64_t)&v267, (uint64_t)&v289, (uint64_t)&v289);
        sub_18E074E1C((uint64_t)&v300, v152 + 552 * v198);
        if ((v128 & 0x80000000) != 0) {
          __assert_rtn("Zeros", "cnmatrix.h", 3099, "nc >= 0");
        }
        *(void *)&v301[16] = 0x800000008;
        long long v300 = &unk_1EDD19DE8;
        unsigned int v126 = v128 * v202;
        uint64_t v302 = v303;
        *(_DWORD *)int8x16_t v301 = v202;
        *(_DWORD *)&v301[4] = v128;
        *(_DWORD *)&v301[8] = v128 * v202;
        *(_DWORD *)&v301[12] = v202;
        sub_18DFE2CC8((uint64_t)&v300, 0.0);
        sub_18DFE2F24((uint64_t)&v262, (uint64_t)&v300);
        uint64_t v153 = v295;
        sub_18E075008(":", (uint64_t)&v262, (uint64_t)&v289, (uint64_t)&v300);
        sub_18E074E1C((uint64_t)&v300, v153 + 552 * v198);
        sub_18DFE2F24((uint64_t)&v257, (uint64_t)v283);
        uint64_t v154 = v299;
        sub_18E0758D4((uint64_t)&v300, (uint64_t)&v257, (uint64_t)&v289);
        sub_18E074DA4((uint64_t)&v300, v154 + 104 * v198);
        sub_18E074D00((uint64_t)&v204, (uint64_t)&v284, (uint64_t)&v300);
        sub_18DFE2F24((uint64_t)&v252, (uint64_t)&v300);
        uint64_t v155 = *(void *)(v203 + 32);
        v86 += *(_DWORD *)(v155 + 4 * v198);
        v85 += *(_DWORD *)(v155 + 4 * (*(_DWORD *)(v203 + 20) + (int)v198));
        unsigned int v127 = v202;
      }
      else
      {
        sub_18DFE2F24((uint64_t)&v272, v6);
        *(void *)&v301[16] = 0x800000008;
        long long v300 = &unk_1EDD19DE8;
        uint64_t v302 = v303;
        *(_DWORD *)int8x16_t v301 = v13;
        *(_DWORD *)&v301[4] = v192;
        *(_DWORD *)&v301[8] = v189;
        *(_DWORD *)&v301[12] = v13;
        sub_18DFE2CC8((uint64_t)&v300, 0.0);
        sub_18DFE2F24((uint64_t)&v262, (uint64_t)&v300);
        sub_18DFE2F24((uint64_t)&v257, v193);
        sub_18DFE2F24((uint64_t)&v252, (uint64_t)&v204);
        if ((int)v201 >= 1)
        {
          uint64_t v97 = 0;
          uint64_t v98 = *(void *)(v203 + 32);
          do
          {
            uint64_t v99 = *(unsigned int *)(v98 + 4 * v97);
            uint64_t v214 = 0x800000001;
            uint64_t v212 = &unk_1EDD18438;
            unsigned int v215 = v216;
            if (v99 == 1)
            {
              char v100 = 0;
              *(void *)&long long v101 = 0x100000001;
              *((void *)&v101 + 1) = 0x100000001;
              long long v213 = v101;
              v216[0] = 0;
              int v102 = 1;
              LODWORD(v99) = 1;
            }
            else if ((int)v99 <= 0)
            {
              int v102 = 0;
              LODWORD(v99) = 0;
              long long v213 = 0uLL;
              char v100 = 1;
            }
            else
            {
              uint64_t v103 = 0;
              LODWORD(v213) = 1;
              DWORD1(v213) = v99;
              *((void *)&v213 + 1) = v99 | 0x100000000;
              do
              {
                v216[v103] = v103;
                ++v103;
              }
              while (v99 != v103);
              char v100 = 0;
              int v102 = 1;
            }
            uint64_t v249 = 0x100000008;
            uint64_t v247 = &unk_1EDD19CF8;
            uint64_t v250 = v251;
            *(void *)&long long v248 = __PAIR64__(v102, v99);
            DWORD2(v248) = v99 * v102;
            HIDWORD(v248) = v99;
            if (v99)
            {
              int v104 = 0;
              int v105 = 0;
              do
              {
                if ((v100 & 1) == 0)
                {
                  int v106 = 0;
                  do
                  {
                    v251[v105 + HIDWORD(v248) * v106] = v216[v104 + v106];
                    ++v106;
                  }
                  while (v102 != v106);
                }
                ++v105;
                v104 += v102;
              }
              while (v105 != v99);
              int v107 = v248;
              int v102 = DWORD1(v248);
            }
            else
            {
              int v107 = 0;
            }
            *(void *)&v301[16] = 0x100000008;
            long long v300 = &unk_1EDD19CF8;
            uint64_t v302 = v303;
            *(_DWORD *)int8x16_t v301 = v107;
            *(_DWORD *)&v301[4] = v102;
            uint64_t v108 = (v107 * v102);
            *(_DWORD *)&v301[8] = v108;
            *(_DWORD *)&v301[12] = v107;
            if ((int)v108 >= 1)
            {
              long long v109 = v251;
              uint64_t v110 = v303;
              do
              {
                int v111 = *v109++;
                *v110++ = v111 + v86;
                --v108;
              }
              while (v108);
            }
            sub_18DFEEA3C((uint64_t)&v289, (uint64_t)&v300);
            uint64_t v112 = *(unsigned int *)(*(void *)(v203 + 32) + 4 * (*(_DWORD *)(v203 + 20) + (int)v97));
            uint64_t v214 = 0x800000001;
            uint64_t v212 = &unk_1EDD18438;
            unsigned int v215 = v216;
            if (v112 == 1)
            {
              char v113 = 0;
              *(void *)&long long v114 = 0x100000001;
              *((void *)&v114 + 1) = 0x100000001;
              long long v213 = v114;
              v216[0] = 0;
              int v115 = 1;
              LODWORD(v112) = 1;
            }
            else if ((int)v112 <= 0)
            {
              int v115 = 0;
              LODWORD(v112) = 0;
              long long v213 = 0uLL;
              char v113 = 1;
            }
            else
            {
              uint64_t v116 = 0;
              LODWORD(v213) = 1;
              DWORD1(v213) = v112;
              *((void *)&v213 + 1) = v112 | 0x100000000;
              do
              {
                v216[v116] = v116;
                ++v116;
              }
              while (v112 != v116);
              char v113 = 0;
              int v115 = 1;
            }
            uint64_t v249 = 0x100000008;
            uint64_t v247 = &unk_1EDD19CF8;
            uint64_t v250 = v251;
            *(void *)&long long v248 = __PAIR64__(v115, v112);
            DWORD2(v248) = v112 * v115;
            HIDWORD(v248) = v112;
            if (v112)
            {
              int v117 = 0;
              int v118 = 0;
              do
              {
                if ((v113 & 1) == 0)
                {
                  int v119 = 0;
                  do
                  {
                    v251[v118 + HIDWORD(v248) * v119] = v216[v117 + v119];
                    ++v119;
                  }
                  while (v115 != v119);
                }
                ++v118;
                v117 += v115;
              }
              while (v118 != v112);
              int v120 = v248;
              int v115 = DWORD1(v248);
            }
            else
            {
              int v120 = 0;
            }
            *(void *)&v301[16] = 0x100000008;
            long long v300 = &unk_1EDD19CF8;
            uint64_t v302 = v303;
            *(_DWORD *)int8x16_t v301 = v120;
            *(_DWORD *)&v301[4] = v115;
            uint64_t v121 = (v120 * v115);
            *(_DWORD *)&v301[8] = v121;
            *(_DWORD *)&v301[12] = v120;
            if ((int)v121 >= 1)
            {
              uint64_t v122 = v251;
              long long v123 = v303;
              do
              {
                int v124 = *v122++;
                *v123++ = v124 + v85;
                --v121;
              }
              while (v121);
            }
            sub_18DFEEA3C((uint64_t)&v284, (uint64_t)&v300);
            uint64_t v125 = v297;
            sub_18E075B48((uint64_t)&v300, (uint64_t)&v267, (uint64_t)&v289, (uint64_t)&v289);
            sub_18E074E1C((uint64_t)&v300, v125 + 552 * v97);
            uint64_t v13 = v295;
            sub_18E075B48((uint64_t)&v300, (uint64_t)&v262, (uint64_t)&v289, (uint64_t)&v284);
            sub_18E074E1C((uint64_t)&v300, v13 + 552 * v97);
            LODWORD(v13) = v202;
            uint64_t v98 = *(void *)(v203 + 32);
            v86 += *(_DWORD *)(v98 + 4 * v97);
            v85 += *(_DWORD *)(v98 + 4 * (*(_DWORD *)(v203 + 20) + (int)v97++));
          }
          while (v97 != v201);
        }
        unsigned int v126 = v189;
        unsigned int v127 = v13;
        unsigned int v200 = v13;
        unsigned int v128 = v192;
      }
      uint64_t v244 = 0x800000008;
      long long v242 = &unk_1EDD19DE8;
      int64x2_t v245 = v246;
      *(void *)&long long v243 = __PAIR64__(v127, v128);
      *((void *)&v243 + 1) = __PAIR64__(v128, v126);
      sub_18DFE2CC8((uint64_t)&v242, 0.0);
      *(void *)&v301[16] = 0x1000000008;
      *(_OWORD *)int8x16_t v301 = xmmword_18E1FD7A0;
      long long v300 = &unk_1EDD19C68;
      uint64_t v302 = v303;
      sub_18E064994((uint64_t)&v272, (uint64_t)&v242, (uint64_t)&v300);
      uint64_t v234 = 0x800000008;
      long long v233 = xmmword_18E1FD750;
      char v232 = &unk_1EDD19DE8;
      unint64_t v235 = v236;
      sub_18DFEF380((uint64_t)&v278, (uint64_t)&v232);
      uint64_t v229 = 0x800000008;
      long long v228 = xmmword_18E1FD750;
      char v227 = &unk_1EDD19DE8;
      uint64_t v230 = v231;
      sub_18DFE2B44((uint64_t)&v267, (uint64_t)&v262, (uint64_t)&v227);
      uint64_t v239 = 0x800000008;
      long long v238 = xmmword_18E1FD750;
      v237 = &unk_1EDD19DE8;
      long long v240 = v241;
      sub_18DFE2B44((uint64_t)&v232, (uint64_t)&v227, (uint64_t)&v237);
      uint64_t v224 = 0x800000008;
      long long v223 = xmmword_18E1FD750;
      int64x2_t v222 = &unk_1EDD19DE8;
      v225 = v226;
      sub_18DFE2B44((uint64_t)&v278, (uint64_t)&v267, (uint64_t)&v222);
      uint64_t v214 = 0x1000000008;
      uint64_t v212 = &unk_1EDD19C68;
      long long v213 = xmmword_18E1FD7A0;
      unsigned int v215 = v216;
      sub_18E064994((uint64_t)&v237, (uint64_t)&v222, (uint64_t)&v212);
      uint64_t v249 = 0x1000000010;
      long long v248 = xmmword_18E1FD7B0;
      uint64_t v247 = &unk_1EDD17928;
      uint64_t v250 = v251;
      sub_18E075DE4((uint64_t)&v300, (uint64_t)&v212, (uint64_t)&v247);
      *(void *)&v301[16] = 0x100000008;
      *(_OWORD *)int8x16_t v301 = xmmword_18E1FD760;
      long long v300 = &unk_1EDD19CC8;
      uint64_t v302 = v303;
      sub_18DFE2B44((uint64_t)&v272, (uint64_t)&v252, (uint64_t)&v300);
      uint64_t v219 = 0x100000008;
      long long v218 = xmmword_18E1FD760;
      double v217 = &unk_1EDD19CC8;
      double v220 = &v221;
      sub_18DFE2B44((uint64_t)&v262, (uint64_t)&v252, (uint64_t)&v217);
      uint64_t v224 = 0x100000008;
      long long v223 = xmmword_18E1FD760;
      int64x2_t v222 = &unk_1EDD19CC8;
      v225 = v226;
      sub_18DFE2AA8((uint64_t)&v257, (uint64_t)&v217, (uint64_t)&v222);
      uint64_t v229 = 0x100000008;
      long long v228 = xmmword_18E1FD760;
      char v227 = &unk_1EDD19CC8;
      uint64_t v230 = v231;
      sub_18DFE2B44((uint64_t)&v267, (uint64_t)&v222, (uint64_t)&v227);
      uint64_t v234 = 0x100000008;
      long long v233 = xmmword_18E1FD760;
      char v232 = &unk_1EDD19CC8;
      unint64_t v235 = v236;
      sub_18DFE2AA8((uint64_t)&v227, (uint64_t)v283, (uint64_t)&v232);
      uint64_t v244 = 0x100000008;
      long long v243 = xmmword_18E1FD760;
      long long v242 = &unk_1EDD19CC8;
      int64x2_t v245 = v246;
      sub_18DFE2B44((uint64_t)&v278, (uint64_t)&v232, (uint64_t)&v242);
      uint64_t v6 = v191;
      uint64_t v214 = 0x100000008;
      uint64_t v212 = &unk_1EDD19CC8;
      long long v213 = xmmword_18E1FD760;
      unsigned int v215 = v216;
      sub_18DFEF1F4((uint64_t)&v242, (uint64_t)v277, (uint64_t)&v212);
      uint64_t v239 = 0x100000010;
      long long v238 = xmmword_18E1FCEF0;
      v237 = &unk_1EDD17958;
      long long v240 = v241;
      sub_18E075DE4((uint64_t)&v300, (uint64_t)&v212, (uint64_t)&v237);
      uint64_t v214 = 0x1000000010;
      uint64_t v212 = &unk_1EDD17928;
      long long v213 = xmmword_18E1FD7B0;
      unsigned int v215 = v216;
      uint64_t v234 = 0x100000010;
      long long v233 = xmmword_18E1FCEF0;
      char v232 = &unk_1EDD17958;
      unint64_t v235 = v236;
      uint64_t v244 = 0x100000010;
      long long v243 = xmmword_18E1FCEF0;
      long long v242 = &unk_1EDD17958;
      int64x2_t v245 = v246;
      *(void *)&v301[16] = 0x1000000010;
      *(_OWORD *)int8x16_t v301 = xmmword_18E1FD7B0;
      long long v300 = &unk_1EDD17928;
      uint64_t v302 = v303;
      sub_18E075FB8((uint64_t)&v247, (uint64_t)&v237, (uint64_t)&v242, (uint64_t)&v300, (uint64_t)&v232, (uint64_t)&v212);
      *(void *)&v301[16] = 0x800000001;
      long long v300 = &unk_1EDD18438;
      uint64_t v302 = v303;
      if (v202 == 1)
      {
        char v156 = 0;
        *(void *)&long long v157 = 0x100000001;
        *((void *)&v157 + 1) = 0x100000001;
        *(_OWORD *)int8x16_t v301 = v157;
        v303[0] = v128;
        int v158 = 1;
        int v159 = 1;
      }
      else
      {
        if ((int)v202 > 0)
        {
          uint64_t v160 = 0;
          *(_DWORD *)int8x16_t v301 = 1;
          *(_DWORD *)&v301[4] = v202;
          unsigned int v161 = v128;
          *(_DWORD *)&v301[8] = v202;
          *(_DWORD *)&v301[12] = 1;
          LODWORD(v13) = v202;
          do
          {
            v303[v160] = v161 + v160;
            ++v160;
          }
          while (v202 != v160);
          char v156 = 0;
          int v158 = 1;
          int v159 = v202;
          goto LABEL_186;
        }
        int v158 = 0;
        int v159 = 0;
        *(void *)int8x16_t v301 = 0;
        *(void *)&v301[8] = 0;
        char v156 = 1;
      }
      LODWORD(v13) = v202;
LABEL_186:
      uint64_t v244 = 0x100000008;
      long long v242 = &unk_1EDD19CF8;
      int64x2_t v245 = v246;
      *(void *)&long long v243 = __PAIR64__(v158, v159);
      DWORD2(v243) = v159 * v158;
      HIDWORD(v243) = v159;
      if (v159)
      {
        int v162 = 0;
        for (int i = 0; i != v159; ++i)
        {
          if ((v156 & 1) == 0)
          {
            int v164 = 0;
            do
            {
              v246[i + HIDWORD(v243) * v164] = v303[v162 + v164];
              ++v164;
            }
            while (v158 != v164);
          }
          v162 += v158;
        }
      }
      sub_18DFE2F24((uint64_t)v283, (uint64_t)&v257);
      sub_18E075B48((uint64_t)&v300, (uint64_t)&v212, (uint64_t)&v242, (uint64_t)&v242);
      sub_18DFE2F24((uint64_t)&v278, (uint64_t)&v300);
      sub_18E0758D4((uint64_t)&v300, (uint64_t)&v232, (uint64_t)&v242);
      sub_18DFE2F24((uint64_t)v277, (uint64_t)&v300);
      if (!v195)
      {
        *(void *)&v301[16] = 0x800000001;
        long long v300 = &unk_1EDD18438;
        uint64_t v302 = v303;
        unsigned int v165 = v192;
        if (v192 == 1)
        {
          char v166 = 0;
          *(void *)&long long v167 = 0x100000001;
          *((void *)&v167 + 1) = 0x100000001;
          *(_OWORD *)int8x16_t v301 = v167;
          v303[0] = 0;
          int v168 = 1;
        }
        else if ((int)v192 <= 0)
        {
          int v168 = 0;
          unsigned int v165 = 0;
          *(void *)int8x16_t v301 = 0;
          *(void *)&v301[8] = 0;
          char v166 = 1;
        }
        else
        {
          uint64_t v169 = 0;
          *(_DWORD *)int8x16_t v301 = 1;
          *(_DWORD *)&v301[4] = v192;
          *(_DWORD *)&v301[8] = v192;
          *(_DWORD *)&v301[12] = 1;
          do
          {
            v303[v169] = v169;
            ++v169;
          }
          while (v192 != v169);
          char v166 = 0;
          int v168 = 1;
        }
        uint64_t v229 = 0x100000008;
        char v227 = &unk_1EDD19CF8;
        uint64_t v230 = v231;
        *(void *)&long long v228 = __PAIR64__(v168, v165);
        DWORD2(v228) = v165 * v168;
        HIDWORD(v228) = v165;
        if (v165)
        {
          int v170 = 0;
          for (int j = 0; j != v165; ++j)
          {
            if ((v166 & 1) == 0)
            {
              int v172 = 0;
              do
              {
                v231[j + HIDWORD(v228) * v172] = v303[v170 + v172];
                ++v172;
              }
              while (v168 != v172);
            }
            v170 += v168;
          }
        }
        sub_18E075B48((uint64_t)&v300, (uint64_t)&v212, (uint64_t)&v227, (uint64_t)&v242);
        sub_18DFE2F24(v188, (uint64_t)&v300);
        sub_18E0758D4((uint64_t)&v300, (uint64_t)&v232, (uint64_t)&v227);
        sub_18DFE2F24(v187, (uint64_t)&v300);
        sub_18E075B48((uint64_t)&v300, (uint64_t)&v212, (uint64_t)&v227, (uint64_t)&v227);
        sub_18DFE2F24(v186, (uint64_t)&v300);
      }
      ++v198;
      unsigned int v87 = v200;
      if (v198 == v190) {
        goto LABEL_208;
      }
    }
  }
  uint64_t v184 = (uint64_t)&v7[89];
  uint64_t v185 = (uint64_t)&v7[54].n128_i64[1];
  uint64_t v46 = 0;
  int v47 = 0;
  int v48 = 0;
  uint64_t v49 = *(void *)(v203 + 32);
  do
  {
    uint64_t v50 = *(unsigned int *)(v49 + 4 * v46);
    uint64_t v214 = 0x800000001;
    uint64_t v212 = &unk_1EDD18438;
    unsigned int v215 = v216;
    if (v50 == 1)
    {
      char v51 = 0;
      *(void *)&long long v52 = 0x100000001;
      *((void *)&v52 + 1) = 0x100000001;
      long long v213 = v52;
      v216[0] = 0;
      int v53 = 1;
      LODWORD(v50) = 1;
    }
    else if ((int)v50 <= 0)
    {
      int v53 = 0;
      LODWORD(v50) = 0;
      long long v213 = 0uLL;
      char v51 = 1;
    }
    else
    {
      uint64_t v54 = 0;
      LODWORD(v213) = 1;
      DWORD1(v213) = v50;
      *((void *)&v213 + 1) = v50 | 0x100000000;
      do
      {
        v216[v54] = v54;
        ++v54;
      }
      while (v50 != v54);
      char v51 = 0;
      int v53 = 1;
    }
    uint64_t v249 = 0x100000008;
    uint64_t v247 = &unk_1EDD19CF8;
    uint64_t v250 = v251;
    *(void *)&long long v248 = __PAIR64__(v53, v50);
    DWORD2(v248) = v50 * v53;
    HIDWORD(v248) = v50;
    if (v50)
    {
      int v55 = 0;
      int v56 = 0;
      do
      {
        if ((v51 & 1) == 0)
        {
          int v57 = 0;
          do
          {
            v251[v56 + HIDWORD(v248) * v57] = v216[v55 + v57];
            ++v57;
          }
          while (v53 != v57);
        }
        ++v56;
        v55 += v53;
      }
      while (v56 != v50);
      int v58 = v248;
      int v53 = DWORD1(v248);
    }
    else
    {
      int v58 = 0;
    }
    *(void *)&v301[16] = 0x100000008;
    long long v300 = &unk_1EDD19CF8;
    uint64_t v302 = v303;
    *(_DWORD *)int8x16_t v301 = v58;
    *(_DWORD *)&v301[4] = v53;
    uint64_t v59 = (v58 * v53);
    *(_DWORD *)&v301[8] = v59;
    *(_DWORD *)&v301[12] = v58;
    if ((int)v59 >= 1)
    {
      int v60 = v251;
      int v61 = v303;
      do
      {
        int v62 = *v60++;
        *v61++ = v62 + v48;
        --v59;
      }
      while (v59);
    }
    sub_18DFEEA3C((uint64_t)&v289, (uint64_t)&v300);
    uint64_t v63 = *(unsigned int *)(*(void *)(v203 + 32) + 4 * (*(_DWORD *)(v203 + 20) + (int)v46));
    uint64_t v214 = 0x800000001;
    uint64_t v212 = &unk_1EDD18438;
    unsigned int v215 = v216;
    if (v63 == 1)
    {
      char v64 = 0;
      *(void *)&long long v65 = 0x100000001;
      *((void *)&v65 + 1) = 0x100000001;
      long long v213 = v65;
      v216[0] = 0;
      int v66 = 1;
      LODWORD(v63) = 1;
    }
    else if ((int)v63 <= 0)
    {
      int v66 = 0;
      LODWORD(v63) = 0;
      long long v213 = 0uLL;
      char v64 = 1;
    }
    else
    {
      uint64_t v67 = 0;
      LODWORD(v213) = 1;
      DWORD1(v213) = v63;
      *((void *)&v213 + 1) = v63 | 0x100000000;
      do
      {
        v216[v67] = v67;
        ++v67;
      }
      while (v63 != v67);
      char v64 = 0;
      int v66 = 1;
    }
    uint64_t v249 = 0x100000008;
    uint64_t v247 = &unk_1EDD19CF8;
    uint64_t v250 = v251;
    *(void *)&long long v248 = __PAIR64__(v66, v63);
    DWORD2(v248) = v63 * v66;
    HIDWORD(v248) = v63;
    if (v63)
    {
      int v68 = 0;
      int v69 = 0;
      do
      {
        if ((v64 & 1) == 0)
        {
          int v70 = 0;
          do
          {
            v251[v69 + HIDWORD(v248) * v70] = v216[v68 + v70];
            ++v70;
          }
          while (v66 != v70);
        }
        ++v69;
        v68 += v66;
      }
      while (v69 != v63);
      int v71 = v248;
      int v66 = DWORD1(v248);
    }
    else
    {
      int v71 = 0;
    }
    *(void *)&v301[16] = 0x100000008;
    long long v300 = &unk_1EDD19CF8;
    uint64_t v302 = v303;
    *(_DWORD *)int8x16_t v301 = v71;
    *(_DWORD *)&v301[4] = v66;
    uint64_t v72 = (v71 * v66);
    *(_DWORD *)&v301[8] = v72;
    *(_DWORD *)&v301[12] = v71;
    if ((int)v72 >= 1)
    {
      uint64_t v73 = v251;
      int v74 = v303;
      do
      {
        int v75 = *v73++;
        *v74++ = v75 + v47;
        --v72;
      }
      while (v72);
    }
    sub_18DFEEA3C((uint64_t)&v284, (uint64_t)&v300);
    uint64_t v274 = 0x100000008;
    long long v273 = xmmword_18E1FD760;
    long long v272 = &unk_1EDD19CC8;
    long long v275 = v276;
    *(void *)&v301[16] = 0x800000008;
    *(_OWORD *)int8x16_t v301 = xmmword_18E1FD750;
    long long v300 = &unk_1EDD19DE8;
    uint64_t v302 = v303;
    uint64_t v249 = 0x800000008;
    long long v248 = xmmword_18E1FD750;
    uint64_t v247 = &unk_1EDD19DE8;
    uint64_t v250 = v251;
    int v76 = *(unsigned int (**)(void **, void **, void, void **, void **, void **, double))(*(void *)(v197 + 32) + 8 * v46);
    sub_18E0758D4((uint64_t)&v212, v199, (uint64_t)&v289);
    double v77 = sub_18E074D00((uint64_t)&v204, (uint64_t)&v284, (uint64_t)&v278);
    if (v76(&v212, &v278, *(void *)(*(void *)(v196 + 32) + 8 * v46), &v272, &v300, &v247, v77))
    {
      v194[96].n128_u8[0] = 0;
      uint64_t result = 20;
      goto LABEL_214;
    }
    sub_18E0758D4((uint64_t)&v212, v193, (uint64_t)&v289);
    sub_18E074DA4((uint64_t)&v212, (uint64_t)&v272);
    sub_18DFE2F24(v299 + 104 * v46, (uint64_t)&v272);
    uint64_t v214 = 0x800000008;
    uint64_t v212 = &unk_1EDD19DE8;
    long long v213 = xmmword_18E1FD750;
    unsigned int v215 = v216;
    uint64_t v269 = 0x100000008;
    int64x2_t v267 = &unk_1EDD19CF8;
    long long v268 = xmmword_18E1FD760;
    long long v270 = v271;
    uint64_t v264 = 0x100000008;
    long long v263 = xmmword_18E1FD760;
    long long v262 = &unk_1EDD19CF8;
    long long v265 = v266;
    uint64_t v280 = 0x100000020;
    long long v278 = &unk_1EDD18C78;
    long long v279 = xmmword_18E1FD780;
    int8x16_t v281 = &v282;
    double v78 = sub_18E01D7FC((uint64_t)&v300, (uint64_t)&v267, (uint64_t)&v262, (uint64_t)&v278, (uint64_t)&v212);
    sub_18DFE2F24(v297 + 552 * v46, (uint64_t)&v212);
    *(void *)&double v79 = sub_18DFE2F24(v295 + 552 * v46, (uint64_t)&v247).n128_u64[0];
    v40 &= v78 <= v37;
    uint64_t v49 = *(void *)(v203 + 32);
    v48 += *(_DWORD *)(v49 + 4 * v46);
    v47 += *(_DWORD *)(v49 + 4 * (*(_DWORD *)(v203 + 20) + (int)v46++));
    uint64_t v7 = v194;
  }
  while (v46 != v18);
  uint64_t v39 = v184;
  uint64_t v38 = v185;
  if (v40) {
    goto LABEL_85;
  }
  LOWORD(v300) = 2;
  LOBYTE(v247) = 2;
  unsigned __int8 v174 = cnprint::CNLogFormatter::FormatWarning((cnprint::CNLogFormatter *)&v194[106].n128_i8[8], "Predict state Jacobian matrix is not invertible.", v79);
  if (v194[107].n128_i8[15] >= 0) {
    LOBYTE(v180) = v174;
  }
  else {
    uint64_t v180 = v194[106].n128_i64[1];
  }
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v300, (unsigned __int8 *)&v247, "%s", v175, v176, v177, v178, v179, v180);
  sub_18DFE2F24((uint64_t)&v194[7], v185);
  *(void *)&v301[16] = 0x100000008;
  *(_OWORD *)int8x16_t v301 = xmmword_18E1FD760;
  long long v300 = &unk_1EDD19CC8;
  uint64_t v302 = v303;
  sub_18DFE2B44((uint64_t)&v194[7], v193, (uint64_t)&v300);
  sub_18DFE2F24((uint64_t)&v194[41].n128_i64[1], (uint64_t)&v300);
  *(void *)&v301[16] = 0x800000008;
  long long v300 = &unk_1EDD19DE8;
  uint64_t v302 = v303;
  *(_DWORD *)int8x16_t v301 = v192;
  *(_DWORD *)&v301[4] = v13;
  *(_DWORD *)&v301[8] = v13 * v192;
  *(_DWORD *)&v301[12] = v192;
  sub_18DFE2CC8((uint64_t)&v300, 0.0);
  sub_18DFE2F24(v188, (uint64_t)&v300);
  *(void *)&v301[16] = 0x100000008;
  long long v300 = &unk_1EDD19CC8;
  uint64_t v302 = v303;
  *(_DWORD *)int8x16_t v301 = v192;
  *(_DWORD *)&v301[4] = 1;
  *(_DWORD *)&v301[8] = v192;
  *(_DWORD *)&v301[12] = v192;
  sub_18DFE2CC8((uint64_t)&v300, 0.0);
  sub_18DFE2F24(v187, (uint64_t)&v300);
  sub_18DFE2F24(v186, v6);
  v194[96].n128_u32[1] = 0;
  v194[96].n128_u8[0] = 0;
  uint64_t result = 21;
LABEL_214:
  for (uint64_t k = 592; k != -512; k -= 552)
    *(void *)&v294[k] = &unk_1EDD17478;
  for (uint64_t m = 592; m != -512; m -= 552)
    *(void *)&v296[m] = &unk_1EDD17478;
  for (uint64_t n = 144; n != -64; n -= 104)
    *(void *)&v298[n] = &unk_1EDD17478;
  return result;
}

void sub_18E106458(_Unwind_Exception *a1)
{
  for (uint64_t i = 592; i != -512; i -= 552)
    *(unint64_t *)((char *)&STACK[0x27E8] + i) = (unint64_t)&unk_1EDD17478;
  for (uint64_t j = 592; j != -512; j -= 552)
    *(unint64_t *)((char *)&STACK[0x2C60] + j) = (unint64_t)&unk_1EDD17478;
  for (uint64_t k = 144; k != -64; k -= 104)
    *(unint64_t *)((char *)&STACK[0x30D8] + k) = (unint64_t)&unk_1EDD17478;
  _Unwind_Resume(a1);
}

uint64_t sub_18E1065B8(uint64_t a1, uint64_t a2, void *lpsrc, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!lpsrc
    || (uint64_t v13 = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EDD02A78, (const struct __class_type_info *)&unk_1EDD05AF8, 0)) == 0)
  {
    LOWORD(v66) = 12;
    LOBYTE(v74.f64[0]) = 4;
    double v38 = MEMORY[0x30] + (double)MEMORY[0x28];
LABEL_21:
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v66, (unsigned __int8 *)&v74, "time,%.3lf,h-function failure on line %d: %s() %s", a4, a5, a6, a7, a8, SLOBYTE(v38));
    return 0xFFFFFFFFLL;
  }
  unsigned int v14 = v13;
  unsigned int v16 = *(_DWORD *)(a1 + 8);
  unsigned int v15 = *(_DWORD *)(a1 + 12);
  if (v16 <= v15) {
    int v17 = *(_DWORD *)(a1 + 12);
  }
  else {
    int v17 = *(_DWORD *)(a1 + 8);
  }
  if (!v16
    || !v15
    || v17 != 8
    || ((v19 = *(_DWORD *)(a2 + 8), unsigned int v18 = *(_DWORD *)(a2 + 12), v19 <= v18)
      ? (int v20 = *(_DWORD *)(a2 + 12))
      : (int v20 = *(_DWORD *)(a2 + 8)),
        !v19 || !v18 || v20 != 1))
  {
    LOWORD(v66) = 12;
    LOBYTE(v74.f64[0]) = 4;
    double v38 = *((double *)v13 + 6) + (double)*((uint64_t *)v13 + 5);
    goto LABEL_21;
  }
  if (!v13[128])
  {
    LOWORD(v66) = 12;
    LOBYTE(v74.f64[0]) = 4;
    double v40 = *((double *)v13 + 6) + (double)*((uint64_t *)v13 + 5);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v66, (unsigned __int8 *)&v74, "time,%.3lf,h-function failure on line %d: %s() %s", a4, a5, a6, a7, a8, SLOBYTE(v40));
    LOWORD(v66) = 12;
    LOBYTE(v74.f64[0]) = 4;
    double v41 = *((double *)v14 + 12) + (double)*((uint64_t *)v14 + 11);
    sub_18E017C64((uint64_t)(v14 + 56));
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v66, (unsigned __int8 *)&v74, "t,%.3lf,%s,TAI time invalid", v42, v43, v44, v45, v46, SLOBYTE(v41));
    return 0xFFFFFFFFLL;
  }
  double v21 = *(long long **)(a1 + 32);
  long long v80 = *v21;
  uint64_t v81 = *((void *)v21 + 2);
  double v79 = &unk_1EDD0ADE8;
  double v77 = 0.0;
  double v78 = &unk_1EDD0AE20;
  *(double *)&unint64_t v22 = *((double *)v21 + 6) * 0.000001;
  long long v75 = 0u;
  long long v76 = 0u;
  long long v73 = *(_OWORD *)(v13 + 136);
  v23.i64[1] = *((void *)&v73 + 1);
  float64x2_t v74 = 0u;
  v23.i64[0] = *((void *)v13 + 24);
  LOWORD(v66) = 0;
  long long v67 = 0u;
  long long v68 = 0u;
  int v69 = 0;
  uint64_t v70 = 0;
  uint64_t v71 = 0;
  int v72 = 0;
  if (cnnavigation::GNSSPseudorange((uint64_t)&v73, (uint64_t)&v66, (uint64_t)&v80, (uint64_t)(v13 + 296), (uint64_t *)&v79, (uint64_t *)&v78, &v77, 1, v23, (int8x16_t)v22, &v74))
  {
    LOWORD(v66) = 12;
    LOBYTE(v73) = 4;
    double v29 = *((double *)v14 + 6) + (double)*((uint64_t *)v14 + 5);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v66, (unsigned __int8 *)&v73, "time,%.3lf,h-function failure on line %d: %s() %s", v24, v25, v26, v27, v28, SLOBYTE(v29));
    if (cnprint::CNPrinter::GetLogLevel(v30) <= 1)
    {
      LOWORD(v66) = 12;
      LOBYTE(v73) = 1;
      uint64_t v32 = *((void *)v14 + 11);
      double v31 = *((double *)v14 + 12);
      sub_18E017C64((uint64_t)(v14 + 56));
      double v64 = v31 + (double)v32;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v66, (unsigned __int8 *)&v73, "t,%.3lf,%s,GNSSPseudorange returned != 0", v33, v34, v35, v36, v37, SLOBYTE(v64));
    }
    return 0xFFFFFFFFLL;
  }
  *(void *)&long long v47 = 0x100000001;
  *((void *)&v47 + 1) = 0x100000001;
  *(_OWORD *)(a4 + 8) = v47;
  *(void *)&long long v68 = 0x800000001;
  int v66 = &unk_1EDD18408;
  *((void *)&v68 + 1) = &v69;
  long long v67 = xmmword_18E215AC0;
  sub_18DFE2CC8((uint64_t)&v66, 0.0);
  sub_18DFE2F24(a5, (uint64_t)&v66);
  uint64_t v48 = *((void *)v14 + 64);
  if (v48)
  {
    **(double **)(a4 + 32) = v77 + *(double *)v48 + **(double **)(a2 + 32);
    uint64_t v49 = *(void **)(v48 + 40);
    uint64_t v50 = *(void **)(a5 + 32);
    *uint64_t v50 = *v49;
    uint64_t v53 = *(int *)(v48 + 28);
    uint64_t v51 = *(int *)(a5 + 20);
    v50[v51] = v49[v53];
    long long v52 = (long long *)&v49[2 * v53];
    LODWORD(v53) = v51;
  }
  else
  {
    **(double **)(a4 + 32) = v77 + **(double **)(a2 + 32);
    uint64_t v50 = *(void **)(a5 + 32);
    uint64_t v54 = *((void *)&v75 + 1);
    *uint64_t v50 = v75;
    uint64_t v53 = *(int *)(a5 + 20);
    v50[v53] = v54;
    long long v52 = &v76;
  }
  v50[2 * (int)v53] = *(void *)v52;
  *(double *)&v50[6 * (int)v53] = *((double *)&v76 + 1) * 0.000001;
  *(void *)&long long v68 = 0x100000001;
  int v66 = &unk_1EDD18048;
  *((void *)&v68 + 1) = &v69;
  *(void *)&long long v55 = 0x100000001;
  *((void *)&v55 + 1) = 0x100000001;
  long long v67 = v55;
  sub_18DFE2CC8((uint64_t)&v66, 0.0);
  **((void **)&v68 + 1) = 0x3FF0000000000000;
  sub_18DFE2F24(a6, (uint64_t)&v66);
  if (!cnprint::CNPrinter::GetLogLevel(v56))
  {
    LOWORD(v66) = 12;
    LOBYTE(v73) = 0;
    uint64_t v58 = *((void *)v14 + 11);
    double v57 = *((double *)v14 + 12);
    sub_18E017C64((uint64_t)(v14 + 56));
    double v65 = v57 + (double)v58;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v66, (unsigned __int8 *)&v73, "t,%.3lf,%s,using PSR,predicted,%.3lf,diff,%.3lf,clockEstMtrs,%.2lf,std,%.2lf,multipath,%hhu,cno,%.1lf", v59, v60, v61, v62, v63, SLOBYTE(v65));
  }
  return 0;
}

uint64_t sub_18E106B08(uint64_t a1, double *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v66[4] = *(void (**)(uint64_t))MEMORY[0x1E4F143B8];
  unsigned int v5 = *(_DWORD *)(a4 + 8);
  if ((v5 & 0x80000000) != 0) {
    __assert_rtn("Zeros", "cnmatrix.h", 3098, "nr >= 0");
  }
  uint64_t v62 = 0x100000003;
  double v57 = &unk_1EDD18D98;
  uint64_t v63 = &v64;
  unsigned int v58 = v5;
  unsigned int v59 = 1;
  unsigned int v60 = v5;
  unsigned int v61 = v5;
  unsigned __int32 v11 = (cnprint::CNPrinter *)sub_18DFE2CC8((uint64_t)&v57, 0.0);
  if (!*(unsigned char *)a1)
  {
    if (cnprint::CNPrinter::GetLogLevel(v11) <= 1)
    {
      LOWORD(v66[0]) = 2;
      unsigned __int8 v65 = 1;
      double v54 = a2[1] + (double)*(uint64_t *)a2;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v66, &v65, "MeasurementAccumulator::AddMeasurement() failed - Not initialized,t_meas,%.3lf", v17, v18, v19, v20, v21, SLOBYTE(v54));
    }
    return 0xFFFFFFFFLL;
  }
  if (*(_DWORD *)(a1 + 5936) == 174)
  {
    LOWORD(v66[0]) = 2;
    unsigned __int8 v65 = 2;
    double v53 = a2[1] + (double)*(uint64_t *)a2;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v66, &v65, "MeasurementAccumulator::AddMeasurement() failed - Out of space,t_meas,%.3lf", v12, v13, v14, v15, v16, SLOBYTE(v53));
    return 0xFFFFFFFFLL;
  }
  if (*(unsigned char *)(a1 + 1))
  {
    if (cnprint::CNPrinter::GetLogLevel(v11) <= 1)
    {
      LOWORD(v66[0]) = 2;
      unsigned __int8 v65 = 1;
      double v55 = a2[1] + (double)*(uint64_t *)a2;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v66, &v65, "MeasurementAccumulator::AddMeasurement() failed - Locked,t_meas,%.3lf", v22, v23, v24, v25, v26, SLOBYTE(v55));
    }
    return 0xFFFFFFFFLL;
  }
  BOOL v27 = sub_18DEE4CB8(a2, (double *)(a1 + 8));
  if (v27)
  {
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v27) <= 1)
    {
      LOWORD(v66[0]) = 2;
      unsigned __int8 v65 = 1;
      double v56 = a2[1] + (double)*(uint64_t *)a2;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v66, &v65, "MeasurementAccumulator::AddMeasurement() failed - Measurement too old,t_meas,%.3lf,t_start,%.3lf", v28, v29, v30, v31, v32, SLOBYTE(v56));
    }
    return 0xFFFFFFFFLL;
  }
  v66[0] = 0;
  v66[1] = 0;
  sub_18E113C58(v66, a5);
  uint64_t v33 = sub_18E06C110((uint64_t *)(a1 + 40), v66);
  sub_18E067C60((uint64_t (**)(void, void, void, void, void))v66);
  uint64_t v34 = *(int *)(a1 + 5936);
  uint64_t v35 = (v34 + 1);
  if (*(void *)(a1 + 56) != v35)
  {
    LOWORD(v66[0]) = 2;
    unsigned __int8 v65 = 4;
    char v47 = (*(uint64_t (**)(uint64_t))(*(void *)a5 + 16))(a5);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v66, &v65, "MeasurementAccumulator::AddMeasurement() failed - allocation failed,meas_type,%d,t_meas,%.3lf", v48, v49, v50, v51, v52, v47);
    return 0xFFFFFFFFLL;
  }
  *(_DWORD *)(a1 + 5936) = v35;
  *(_DWORD *)(a1 + 72) = v35;
  *(_DWORD *)(a1 + 76) = 1;
  *(_DWORD *)(a1 + 80) = v35;
  *(_DWORD *)(a1 + 84) = v35;
  *(_DWORD *)(a1 + 2896) = v35;
  *(_DWORD *)(a1 + 2900) = 1;
  *(_DWORD *)(a1 + 2904) = v35;
  *(_DWORD *)(a1 + 2908) = v35;
  *(_DWORD *)(a1 + 3632) = v35;
  *(_DWORD *)(a1 + 3636) = 1;
  *(_DWORD *)(a1 + 3640) = v35;
  *(_DWORD *)(a1 + 3644) = v35;
  *(_DWORD *)(a1 + 5064) = v35;
  *(_DWORD *)(a1 + 5068) = 1;
  *(_DWORD *)(a1 + 5072) = v35;
  *(_DWORD *)(a1 + 5076) = v35;
  *(_DWORD *)(a1 + 5112) = v35;
  *(_DWORD *)(a1 + 5116) = 1;
  *(_DWORD *)(a1 + 5120) = v35;
  *(_DWORD *)(a1 + 5124) = v35;
  *(_DWORD *)(a1 + 5848) = v35;
  *(_DWORD *)(a1 + 5852) = 1;
  *(_DWORD *)(a1 + 5856) = v35;
  *(_DWORD *)(a1 + 5860) = v35;
  *(_DWORD *)(a1 + 5896) = v35;
  *(_DWORD *)(a1 + 5900) = 1;
  *(_DWORD *)(a1 + 5904) = v35;
  *(_DWORD *)(a1 + 5908) = v35;
  *(_DWORD *)(a1 + 5952) = v35;
  *(_DWORD *)(a1 + 5956) = 1;
  *(_DWORD *)(a1 + 5960) = v35;
  *(_DWORD *)(a1 + 5964) = v35;
  *(_DWORD *)(a1 + 7384) = v35;
  *(_DWORD *)(a1 + 7388) = 1;
  *(_DWORD *)(a1 + 7392) = v35;
  *(_DWORD *)(a1 + 7396) = v35;
  *(_OWORD *)(*(void *)(a1 + 96) + 16 * v34) = *(_OWORD *)a2;
  unsigned int v36 = *(_DWORD *)(a3 + 8);
  unsigned int v37 = *(_DWORD *)(a3 + 12);
  if (v36 <= v37) {
    int v38 = *(_DWORD *)(a3 + 12);
  }
  else {
    int v38 = *(_DWORD *)(a3 + 8);
  }
  if (v37) {
    BOOL v39 = v36 == 0;
  }
  else {
    BOOL v39 = 1;
  }
  if (v39) {
    int v40 = 0;
  }
  else {
    int v40 = v38;
  }
  *(_DWORD *)(*(void *)(a1 + 2920) + 4 * v34) = v40;
  sub_18DFE2F24(*(void *)(a1 + 5088) + (v34 << 6), a3);
  if (v58 <= v59) {
    unsigned int v41 = v59;
  }
  else {
    unsigned int v41 = v58;
  }
  if (v59) {
    BOOL v42 = v58 == 0;
  }
  else {
    BOOL v42 = 1;
  }
  if (v42) {
    unsigned int v43 = 0;
  }
  else {
    unsigned int v43 = v41;
  }
  *(_DWORD *)(*(void *)(a1 + 5136) + 4 * v34) = v43;
  sub_18DFE2F24(*(void *)(a1 + 5872) + (v34 << 6), (uint64_t)&v57);
  __n128 v44 = sub_18DFE2F24(*(void *)(a1 + 5920) + 112 * (int)v34, a4);
  *(void *)(*(void *)(a1 + 5976) + 8 * v34) = sub_18E1065B8;
  uint64_t v45 = (uint64_t (*)(uint64_t, void *, void, void *, void *, __n128))*v33;
  if (*v33) {
    uint64_t v45 = (uint64_t (*)(uint64_t, void *, void, void *, void *, __n128))v45(3, v33, 0, &unk_1EDD05AF8, &std::__any_imp::__unique_typeinfo<raven::h_GnssPsrArgs_RavenConvergence>::__id, v44);
  }
  uint64_t result = 0;
  *(void *)(*(void *)(a1 + 7408) + 8 * v34) = v45;
  return result;
}

void sub_18E106F34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (a2) {
    sub_18DEDD524(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_18E106F60(uint64_t a1)
{
  *(void *)a1 = &unk_1EDD151C8;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 520);
  if (v2) {
    sub_18DEE4E18(v2);
  }
  *(void *)a1 = &unk_1EDD0A4E8;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  *(void *)(a1 + 296) = &unk_1EDD0AE58;
  if (*(char *)(a1 + 327) < 0) {
    operator delete(*(void **)(a1 + 304));
  }
  *(void *)(a1 + 296) = &unk_1EDD0A9B8;
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  return a1;
}

uint64_t sub_18E107034(uint64_t a1, uint64_t a2, void *lpsrc, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!lpsrc
    || (uint64_t v13 = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EDD02A78, (const struct __class_type_info *)&unk_1EDD05D10, 0)) == 0)
  {
    LOWORD(v68) = 12;
    LOBYTE(v76) = 4;
    double v39 = MEMORY[0x30] + (double)MEMORY[0x28];
LABEL_21:
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v68, (unsigned __int8 *)&v76, "time,%.3lf,h-function failure on line %d: %s() %s", a4, a5, a6, a7, a8, SLOBYTE(v39));
    return 0xFFFFFFFFLL;
  }
  uint64_t v15 = v13;
  unsigned int v17 = *(_DWORD *)(a1 + 8);
  unsigned int v16 = *(_DWORD *)(a1 + 12);
  if (v17 <= v16) {
    int v18 = *(_DWORD *)(a1 + 12);
  }
  else {
    int v18 = *(_DWORD *)(a1 + 8);
  }
  if (!v17
    || !v16
    || v18 != 8
    || ((v20 = *(_DWORD *)(a2 + 8), unsigned int v19 = *(_DWORD *)(a2 + 12), v20 <= v19)
      ? (int v21 = *(_DWORD *)(a2 + 12))
      : (int v21 = *(_DWORD *)(a2 + 8)),
        !v20 || !v19 || v21 != 1))
  {
    LOWORD(v68) = 12;
    LOBYTE(v76) = 4;
    double v39 = *((double *)v13 + 6) + (double)*((uint64_t *)v13 + 5);
    goto LABEL_21;
  }
  if (!v13[128])
  {
    LOWORD(v68) = 12;
    LOBYTE(v76) = 4;
    double v41 = *((double *)v13 + 6) + (double)*((uint64_t *)v13 + 5);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v68, (unsigned __int8 *)&v76, "time,%.3lf,h-function failure on line %d: %s() %s", a4, a5, a6, a7, a8, SLOBYTE(v41));
    LOWORD(v68) = 12;
    LOBYTE(v76) = 4;
    double v42 = *((double *)v15 + 12) + (double)*((uint64_t *)v15 + 11);
    sub_18E017C64((uint64_t)(v15 + 56));
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v68, (unsigned __int8 *)&v76, "t,%.3lf,%s,TAI time invalid", v43, v44, v45, v46, v47, SLOBYTE(v42));
    return 0xFFFFFFFFLL;
  }
  uint64_t v22 = *(long long **)(a1 + 32);
  long long v86 = *v22;
  uint64_t v87 = *((void *)v22 + 2);
  long long v84 = *(long long *)((char *)v22 + 24);
  v14.i64[0] = *((void *)v22 + 6);
  uint64_t v85 = *((void *)v22 + 5);
  uint64_t v83 = &unk_1EDD0ADE8;
  double v81 = 0.0;
  int v82 = &unk_1EDD0AE20;
  long long v79 = 0u;
  long long v80 = 0u;
  long long v77 = 0u;
  long long v78 = 0u;
  long long v75 = *(_OWORD *)(v13 + 136);
  v23.i64[1] = *((void *)&v75 + 1);
  long long v76 = 0u;
  v23.i64[0] = *((void *)v13 + 24);
  double v24 = *((double *)v22 + 7);
  *(double *)v14.i64 = *(double *)v14.i64 / 1000000.0;
  LOWORD(v68) = 0;
  long long v69 = 0u;
  long long v70 = 0u;
  int v71 = 0;
  uint64_t v72 = 0;
  uint64_t v73 = 0;
  int v74 = 0;
  if (cnnavigation::GNSSDopplerShift((uint64_t)&v75, (const cnnavigation::GNSSUTCParameters *)&v68, (uint64_t)&v86, (double *)&v84, (uint64_t)(v13 + 296), (uint64_t *)&v83, (uint64_t *)&v82, 1, v23, v14, v24 / 1000000.0, &v81, 1u, (uint64_t)&v76))
  {
    LOWORD(v68) = 12;
    LOBYTE(v75) = 4;
    double v30 = *((double *)v15 + 6) + (double)*((uint64_t *)v15 + 5);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v68, (unsigned __int8 *)&v75, "time,%.3lf,h-function failure on line %d: %s() %s", v25, v26, v27, v28, v29, SLOBYTE(v30));
    if (cnprint::CNPrinter::GetLogLevel(v31) <= 1)
    {
      LOWORD(v68) = 12;
      LOBYTE(v75) = 1;
      uint64_t v33 = *((void *)v15 + 11);
      double v32 = *((double *)v15 + 12);
      sub_18E017C64((uint64_t)(v15 + 56));
      double v66 = v32 + (double)v33;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v68, (unsigned __int8 *)&v75, "t,%.3lf,%s,GNSSDopplerShift returned != 0", v34, v35, v36, v37, v38, SLOBYTE(v66));
    }
    return 0xFFFFFFFFLL;
  }
  double v48 = 299792458.0 / *((double *)v15 + 24);
  double v49 = -(v48 * v81);
  *(void *)&long long v50 = 0x100000001;
  *((void *)&v50 + 1) = 0x100000001;
  *(_OWORD *)(a4 + 8) = v50;
  **(double **)(a4 + 32) = v49 + **(double **)(a2 + 32);
  *(void *)&long long v70 = 0x800000001;
  long long v68 = &unk_1EDD18408;
  *((void *)&v70 + 1) = &v71;
  long long v69 = xmmword_18E215AC0;
  sub_18DFE2CC8((uint64_t)&v68, 0.0);
  sub_18DFE2F24(a5, (uint64_t)&v68);
  double v51 = *((double *)&v77 + 1);
  uint64_t v52 = *(double **)(a5 + 32);
  *uint64_t v52 = -(*(double *)&v77 * v48);
  uint64_t v53 = *(int *)(a5 + 20);
  v52[v53] = -(v51 * v48);
  double v54 = *((double *)&v78 + 1);
  v52[2 * v53] = -(*(double *)&v78 * v48);
  v52[3 * (int)v53] = -(v54 * v48);
  double v55 = *((double *)&v79 + 1);
  v52[4 * v53] = -(*(double *)&v79 * v48);
  v52[5 * (int)v53] = -(v55 * v48);
  double v56 = *((double *)&v80 + 1);
  v52[6 * (int)v53] = -(*(double *)&v80 * v48) / 1000000.0;
  v52[7 * (int)v53] = -(v56 * v48) / 1000000.0;
  *(void *)&long long v70 = 0x100000001;
  long long v68 = &unk_1EDD18048;
  *((void *)&v70 + 1) = &v71;
  *(void *)&long long v57 = 0x100000001;
  *((void *)&v57 + 1) = 0x100000001;
  long long v69 = v57;
  sub_18DFE2CC8((uint64_t)&v68, 0.0);
  **((void **)&v70 + 1) = 0x3FF0000000000000;
  sub_18DFE2F24(a6, (uint64_t)&v68);
  if (!cnprint::CNPrinter::GetLogLevel(v58))
  {
    LOWORD(v68) = 12;
    LOBYTE(v75) = 0;
    uint64_t v60 = *((void *)v15 + 11);
    double v59 = *((double *)v15 + 12);
    sub_18E017C64((uint64_t)(v15 + 56));
    double v67 = v59 + (double)v60;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v68, (unsigned __int8 *)&v75, "t,%.3lf,%s,using Doppler,predicted,%.3lf,obs,%.3lf,diff,%.3lf,clockEstMtrs,%.2lf,clockDriftMps,%.2lf,std,%.2lf,multipath,%hhu,cno,%.1lf", v61, v62, v63, v64, v65, SLOBYTE(v67));
  }
  return 0;
}

uint64_t sub_18E1075BC(uint64_t a1, double *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v66[4] = *(void (**)(uint64_t))MEMORY[0x1E4F143B8];
  unsigned int v5 = *(_DWORD *)(a4 + 8);
  if ((v5 & 0x80000000) != 0) {
    __assert_rtn("Zeros", "cnmatrix.h", 3098, "nr >= 0");
  }
  uint64_t v62 = 0x100000003;
  long long v57 = &unk_1EDD18D98;
  uint64_t v63 = &v64;
  unsigned int v58 = v5;
  unsigned int v59 = 1;
  unsigned int v60 = v5;
  unsigned int v61 = v5;
  unsigned __int32 v11 = (cnprint::CNPrinter *)sub_18DFE2CC8((uint64_t)&v57, 0.0);
  if (!*(unsigned char *)a1)
  {
    if (cnprint::CNPrinter::GetLogLevel(v11) <= 1)
    {
      LOWORD(v66[0]) = 2;
      unsigned __int8 v65 = 1;
      double v54 = a2[1] + (double)*(uint64_t *)a2;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v66, &v65, "MeasurementAccumulator::AddMeasurement() failed - Not initialized,t_meas,%.3lf", v17, v18, v19, v20, v21, SLOBYTE(v54));
    }
    return 0xFFFFFFFFLL;
  }
  if (*(_DWORD *)(a1 + 5936) == 174)
  {
    LOWORD(v66[0]) = 2;
    unsigned __int8 v65 = 2;
    double v53 = a2[1] + (double)*(uint64_t *)a2;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v66, &v65, "MeasurementAccumulator::AddMeasurement() failed - Out of space,t_meas,%.3lf", v12, v13, v14, v15, v16, SLOBYTE(v53));
    return 0xFFFFFFFFLL;
  }
  if (*(unsigned char *)(a1 + 1))
  {
    if (cnprint::CNPrinter::GetLogLevel(v11) <= 1)
    {
      LOWORD(v66[0]) = 2;
      unsigned __int8 v65 = 1;
      double v55 = a2[1] + (double)*(uint64_t *)a2;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v66, &v65, "MeasurementAccumulator::AddMeasurement() failed - Locked,t_meas,%.3lf", v22, v23, v24, v25, v26, SLOBYTE(v55));
    }
    return 0xFFFFFFFFLL;
  }
  BOOL v27 = sub_18DEE4CB8(a2, (double *)(a1 + 8));
  if (v27)
  {
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v27) <= 1)
    {
      LOWORD(v66[0]) = 2;
      unsigned __int8 v65 = 1;
      double v56 = a2[1] + (double)*(uint64_t *)a2;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v66, &v65, "MeasurementAccumulator::AddMeasurement() failed - Measurement too old,t_meas,%.3lf,t_start,%.3lf", v28, v29, v30, v31, v32, SLOBYTE(v56));
    }
    return 0xFFFFFFFFLL;
  }
  v66[0] = 0;
  v66[1] = 0;
  sub_18E113FBC(v66, a5);
  uint64_t v33 = sub_18E06C110((uint64_t *)(a1 + 40), v66);
  sub_18E067C60((uint64_t (**)(void, void, void, void, void))v66);
  uint64_t v34 = *(int *)(a1 + 5936);
  uint64_t v35 = (v34 + 1);
  if (*(void *)(a1 + 56) != v35)
  {
    LOWORD(v66[0]) = 2;
    unsigned __int8 v65 = 4;
    char v47 = (*(uint64_t (**)(uint64_t))(*(void *)a5 + 16))(a5);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v66, &v65, "MeasurementAccumulator::AddMeasurement() failed - allocation failed,meas_type,%d,t_meas,%.3lf", v48, v49, v50, v51, v52, v47);
    return 0xFFFFFFFFLL;
  }
  *(_DWORD *)(a1 + 5936) = v35;
  *(_DWORD *)(a1 + 72) = v35;
  *(_DWORD *)(a1 + 76) = 1;
  *(_DWORD *)(a1 + 80) = v35;
  *(_DWORD *)(a1 + 84) = v35;
  *(_DWORD *)(a1 + 2896) = v35;
  *(_DWORD *)(a1 + 2900) = 1;
  *(_DWORD *)(a1 + 2904) = v35;
  *(_DWORD *)(a1 + 2908) = v35;
  *(_DWORD *)(a1 + 3632) = v35;
  *(_DWORD *)(a1 + 3636) = 1;
  *(_DWORD *)(a1 + 3640) = v35;
  *(_DWORD *)(a1 + 3644) = v35;
  *(_DWORD *)(a1 + 5064) = v35;
  *(_DWORD *)(a1 + 5068) = 1;
  *(_DWORD *)(a1 + 5072) = v35;
  *(_DWORD *)(a1 + 5076) = v35;
  *(_DWORD *)(a1 + 5112) = v35;
  *(_DWORD *)(a1 + 5116) = 1;
  *(_DWORD *)(a1 + 5120) = v35;
  *(_DWORD *)(a1 + 5124) = v35;
  *(_DWORD *)(a1 + 5848) = v35;
  *(_DWORD *)(a1 + 5852) = 1;
  *(_DWORD *)(a1 + 5856) = v35;
  *(_DWORD *)(a1 + 5860) = v35;
  *(_DWORD *)(a1 + 5896) = v35;
  *(_DWORD *)(a1 + 5900) = 1;
  *(_DWORD *)(a1 + 5904) = v35;
  *(_DWORD *)(a1 + 5908) = v35;
  *(_DWORD *)(a1 + 5952) = v35;
  *(_DWORD *)(a1 + 5956) = 1;
  *(_DWORD *)(a1 + 5960) = v35;
  *(_DWORD *)(a1 + 5964) = v35;
  *(_DWORD *)(a1 + 7384) = v35;
  *(_DWORD *)(a1 + 7388) = 1;
  *(_DWORD *)(a1 + 7392) = v35;
  *(_DWORD *)(a1 + 7396) = v35;
  *(_OWORD *)(*(void *)(a1 + 96) + 16 * v34) = *(_OWORD *)a2;
  unsigned int v36 = *(_DWORD *)(a3 + 8);
  unsigned int v37 = *(_DWORD *)(a3 + 12);
  if (v36 <= v37) {
    int v38 = *(_DWORD *)(a3 + 12);
  }
  else {
    int v38 = *(_DWORD *)(a3 + 8);
  }
  if (v37) {
    BOOL v39 = v36 == 0;
  }
  else {
    BOOL v39 = 1;
  }
  if (v39) {
    int v40 = 0;
  }
  else {
    int v40 = v38;
  }
  *(_DWORD *)(*(void *)(a1 + 2920) + 4 * v34) = v40;
  sub_18DFE2F24(*(void *)(a1 + 5088) + (v34 << 6), a3);
  if (v58 <= v59) {
    unsigned int v41 = v59;
  }
  else {
    unsigned int v41 = v58;
  }
  if (v59) {
    BOOL v42 = v58 == 0;
  }
  else {
    BOOL v42 = 1;
  }
  if (v42) {
    unsigned int v43 = 0;
  }
  else {
    unsigned int v43 = v41;
  }
  *(_DWORD *)(*(void *)(a1 + 5136) + 4 * v34) = v43;
  sub_18DFE2F24(*(void *)(a1 + 5872) + (v34 << 6), (uint64_t)&v57);
  __n128 v44 = sub_18DFE2F24(*(void *)(a1 + 5920) + 112 * (int)v34, a4);
  *(void *)(*(void *)(a1 + 5976) + 8 * v34) = sub_18E107034;
  uint64_t v45 = (uint64_t (*)(uint64_t, void *, void, void *, void *, __n128))*v33;
  if (*v33) {
    uint64_t v45 = (uint64_t (*)(uint64_t, void *, void, void *, void *, __n128))v45(3, v33, 0, &unk_1EDD05D10, &std::__any_imp::__unique_typeinfo<raven::h_GnssDopplerArgs_RavenConvergence>::__id, v44);
  }
  uint64_t result = 0;
  *(void *)(*(void *)(a1 + 7408) + 8 * v34) = v45;
  return result;
}

void sub_18E1079E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (a2) {
    sub_18DEDD524(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_18E107A14(uint64_t a1)
{
  *(void *)a1 = &unk_1EDD0A4E8;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  *(void *)(a1 + 296) = &unk_1EDD0AE58;
  if (*(char *)(a1 + 327) < 0) {
    operator delete(*(void **)(a1 + 304));
  }
  *(void *)(a1 + 296) = &unk_1EDD0A9B8;
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  return a1;
}

uint64_t sub_18E107AC0(uint64_t a1, uint64_t a2, void *lpsrc, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!lpsrc
    || (uint64_t v13 = (double *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EDD02A78, (const struct __class_type_info *)&unk_1EDD06000, 0)) == 0)
  {
    LOWORD(v104) = 12;
    LOBYTE(v94) = 4;
    double v37 = MEMORY[0x30] + (double)MEMORY[0x28];
LABEL_27:
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v104, (unsigned __int8 *)&v94, "time,%.3lf,h-function failure on line %d: %s() %s", a4, a5, a6, a7, a8, SLOBYTE(v37));
    return 0xFFFFFFFFLL;
  }
  uint64_t v15 = v13;
  unsigned int v17 = *(_DWORD *)(a1 + 8);
  unsigned int v16 = *(_DWORD *)(a1 + 12);
  if (v17 <= v16) {
    int v18 = *(_DWORD *)(a1 + 12);
  }
  else {
    int v18 = *(_DWORD *)(a1 + 8);
  }
  if (!v17
    || !v16
    || v18 != 8
    || ((v20 = *(_DWORD *)(a2 + 8), unsigned int v19 = *(_DWORD *)(a2 + 12), v20 <= v19)
      ? (int v21 = *(_DWORD *)(a2 + 12))
      : (int v21 = *(_DWORD *)(a2 + 8)),
        !v20 || !v19 || v21 != 1))
  {
    LOWORD(v104) = 12;
    LOBYTE(v94) = 4;
    double v37 = v13[6] + (double)*((uint64_t *)v13 + 5);
    goto LABEL_27;
  }
  if (!*((unsigned char *)v13 + 128))
  {
    LOWORD(v104) = 12;
    LOBYTE(v94) = 4;
    double v39 = v13[6] + (double)*((uint64_t *)v13 + 5);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v104, (unsigned __int8 *)&v94, "time,%.3lf,h-function failure on line %d: %s() %s", a4, a5, a6, a7, a8, SLOBYTE(v39));
    LOWORD(v104) = 12;
    LOBYTE(v94) = 4;
    double v40 = v15[12] + (double)*((uint64_t *)v15 + 11);
    sub_18E017C64((uint64_t)(v15 + 7));
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v104, (unsigned __int8 *)&v94, "t,%.3lf,%s,%s,TAI time invalid", v43, v44, v45, v46, v47, SLOBYTE(v40));
    return 0xFFFFFFFFLL;
  }
  v14.i64[0] = (uint64_t)v13[35];
  double v22 = v13[36] - *(double *)v14.i64;
  unint64_t v23 = (unint64_t)(COERCE__INT64(fabs(v22)) - 0x10000000000000) >> 53;
  if ((*(uint64_t *)&v22 <= -1 || v23 >= 0x3FF) && (unint64_t)(*(void *)&v22 - 1) >= 0xFFFFFFFFFFFFFLL)
  {
    LOWORD(v104) = 12;
    LOBYTE(v94) = 4;
    double v41 = v13[6] + (double)*((uint64_t *)v13 + 5);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v104, (unsigned __int8 *)&v94, "time,%.3lf,h-function failure on line %d: %s() %s", a4, a5, a6, a7, a8, SLOBYTE(v41));
    LOWORD(v104) = 12;
    LOBYTE(v94) = 4;
    double v42 = v15[12] + (double)*((uint64_t *)v15 + 11);
    sub_18E017C64((uint64_t)(v15 + 7));
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v104, (unsigned __int8 *)&v94, "t,%.3lf,%s,%s,Invalid time interval,%.2lf", v48, v49, v50, v51, v52, SLOBYTE(v42));
    return 0xFFFFFFFFLL;
  }
  v113[0] = a1;
  v113[1] = (uint64_t)v13;
  double v112 = 0.0;
  long long v110 = 0u;
  *(_OWORD *)int v111 = 0u;
  float64x2_t v109 = 0u;
  uint64_t v106 = 0x800000008;
  int v104 = &unk_1EDD19DE8;
  long long v105 = xmmword_18E1FD750;
  int v107 = &v108;
  *(void *)&long long v95 = 0;
  char v94 = 0;
  CNTimeSpan::SetTimeSpan((uint64_t *)&v94, 0, v14, (int8x16_t)xmmword_18E1FD750);
  v103[0] = CNTimeSpan::operator+((uint64_t)(v15 + 11), &v94, v26, v27);
  v103[1] = v28;
  if (sub_18E114300(v113, (uint64_t)v103, &v112, &v109, (uint64_t)&v104, v29, v30))
  {
    LOWORD(v94) = 12;
    LOBYTE(v90[0]) = 4;
    double v82 = v15[6] + (double)*((uint64_t *)v15 + 5);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v94, (unsigned __int8 *)v90, "time,%.3lf,h-function failure on line %d: %s() %s", v31, v32, v33, v34, v35, SLOBYTE(v82));
    return 0xFFFFFFFFLL;
  }
  double v102 = 0.0;
  long long v101 = 0u;
  long long v100 = 0u;
  float64x2_t v99 = 0u;
  uint64_t v96 = 0x800000008;
  char v94 = &unk_1EDD19DE8;
  v53.i64[1] = 0x800000040;
  long long v95 = xmmword_18E1FD750;
  uint64_t v97 = &v98;
  v53.i64[0] = (uint64_t)v15[36];
  v90[0] = 0;
  v90[1] = 0;
  CNTimeSpan::SetTimeSpan(v90, 0, v53, v36);
  v93[0] = CNTimeSpan::operator+((uint64_t)(v15 + 11), v90, v54, v55);
  v93[1] = v56;
  if (sub_18E114300(v113, (uint64_t)v93, &v102, &v99, (uint64_t)&v94, v57, v58))
  {
    sub_18E06B804((uint64_t)(v15 + 5), (uint64_t)"could not compute expected carrier phase at end", (uint64_t)"h_GnssAverageDoppler_RavenConvergence", 836, v59, v60, v61, v62);
    return 0xFFFFFFFFLL;
  }
  double v63 = 1.0 / v22 * (299792458.0 / v15[24]);
  *(void *)&long long v64 = 0x100000001;
  *((void *)&v64 + 1) = 0x100000001;
  *(_OWORD *)(a4 + 8) = v64;
  double v65 = v102 - v112;
  **(double **)(a4 + 32) = **(double **)(a2 + 32) + (v102 - v112) * v63;
  sub_18E11308C(1, 8, (uint64_t)v90);
  double v66 = *((double *)&v100 + 1);
  double v67 = v92;
  *uint64_t v92 = v63 * *(double *)&v100;
  uint64_t v68 = v91;
  v67[v91] = v63 * v66;
  double v69 = *((double *)&v101 + 1);
  v67[2 * v68] = v63 * *(double *)&v101;
  v67[6 * (int)v68] = v63 * v69 * 0.000001;
  sub_18E11308C(1, 8, (uint64_t)v87);
  double v70 = *((double *)&v110 + 1);
  int v71 = v89;
  *int v89 = v63 * *(double *)&v110;
  uint64_t v72 = v88;
  v71[v88] = v63 * v70;
  double v73 = v111[1];
  v71[2 * v72] = v63 * v111[0];
  v71[6 * (int)v72] = v63 * v73 * 0.000001;
  sub_18E11308C(1, 8, (uint64_t)v86);
  sub_18DFE2F24(a5, (uint64_t)v86);
  if (fabs(v15[36]) <= 0.001)
  {
    sub_18E1149AC((uint64_t)v87, (uint64_t)&v104, (uint64_t)v85);
    sub_18E114968((uint64_t)v90, (uint64_t)v85, (uint64_t)v86);
  }
  else
  {
    sub_18E1149AC((uint64_t)v90, (uint64_t)&v94, (uint64_t)v85);
    sub_18E1149AC((uint64_t)v87, (uint64_t)&v104, (uint64_t)v84);
    sub_18E114968((uint64_t)v85, (uint64_t)v84, (uint64_t)v86);
  }
  sub_18DFE2F24(a5, (uint64_t)v86);
  *(double *)(*(void *)(a5 + 32) + 56 * *(int *)(a5 + 20)) = *(double *)(*(void *)(a5 + 32)
                                                                           + 56 * *(int *)(a5 + 20))
                                                               + v63 * v65 * 0.000001;
  sub_18E071E98(1u, 1u, (uint64_t)v86);
  sub_18DFE2F24(a6, (uint64_t)v86);
  if (!cnprint::CNPrinter::GetLogLevel(v74))
  {
    v86[0] = 12;
    v85[0] = 0;
    uint64_t v76 = *((void *)v15 + 11);
    double v75 = v15[12];
    sub_18E017C64((uint64_t)(v15 + 7));
    double v83 = v75 + (double)v76;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v86, v85, "t,%.3lf,%s,using average Doppler,predictedCrnt,%.3lf,predictedPrev,%.3lf,diff,%.3lf,std,%.4lf,multipath,%hhu,cno,%.1lf", v77, v78, v79, v80, v81, SLOBYTE(v83));
  }
  return 0;
}

uint64_t sub_18E1081D8(uint64_t a1)
{
  *(void *)a1 = &unk_1EDD0A4E8;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  *(void *)(a1 + 296) = &unk_1EDD0AE58;
  if (*(char *)(a1 + 327) < 0) {
    operator delete(*(void **)(a1 + 304));
  }
  *(void *)(a1 + 296) = &unk_1EDD0A9B8;
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  return a1;
}

uint64_t raven::RavenConvergenceEstimator::HandleEvent(raven::RavenConvergenceEstimator *this, const raven::MapVectorEvent *a2)
{
  v165[3] = *(double *)MEMORY[0x1E4F143B8];
  if (!*((unsigned char *)this + 57) || !*((unsigned char *)this + 58)) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v4 = (char *)a2 + 104;
  *(void *)&long long v160 = (*(uint64_t (**)(const raven::MapVectorEvent *))(*(void *)a2 + 16))(a2);
  *((void *)&v160 + 1) = v5;
  uint64_t v157 = 0x100000008;
  uint64_t v155 = &unk_1EDD19CC8;
  long long v156 = xmmword_18E1FD760;
  int v158 = (double *)&v159;
  if (*((_DWORD *)this + 1045)) {
    uint64_t v6 = (char *)this + 3408;
  }
  else {
    uint64_t v6 = (char *)this + 2648;
  }
  sub_18DFE2F24((uint64_t)&v155, (uint64_t)v6);
  double v7 = v158[4];
  double v8 = v158[5];
  float64x2_t v153 = 0uLL;
  uint64_t v154 = 0;
  float64x2_t v153 = *(float64x2_t *)v158;
  double v9 = v158[3];
  uint64_t v154 = *((void *)v158 + 2);
  int ShouldMapVectorConstraintBeApplied = raven::RavenEstimator::ShouldMapVectorConstraintBeApplied(this, &v153, (float64x2_t *)v4);
  if (ShouldMapVectorConstraintBeApplied == -2) {
    return 4294967293;
  }
  double v13 = sqrt(v7 * v7 + v9 * v9 + v8 * v8);
  if (fabs(v13) <= 0.000000015 || ShouldMapVectorConstraintBeApplied != 0) {
    goto LABEL_26;
  }
  sub_18E0B6EF0((uint64_t)this + 2640, (uint64_t)v140);
  uint64_t v137 = 0x300000001;
  uint64_t v135 = &unk_1EDD18228;
  long long v136 = xmmword_18E1F8560;
  uint64_t v138 = v139;
  v139[0] = v9 * (1.0 / v13);
  v139[1] = v7 * (1.0 / v13);
  v139[2] = v8 * (1.0 / v13);
  *(void *)&v116[0] = 0x400000003;
  uint64_t v131 = 0x100000003;
  uint64_t v129 = &unk_1EDD18DC8;
  long long v130 = xmmword_18E1F6F60;
  int v134 = 5;
  int v132 = &v133;
  uint64_t v133 = 0x400000003;
  sub_18DFEE864((uint64_t)&v112, (uint64_t)v140, (uint64_t)&v129, (uint64_t)&v129);
  uint64_t v121 = 0x300000001;
  int v119 = &unk_1EDD18228;
  long long v120 = xmmword_18E1F8560;
  uint64_t v122 = v123;
  sub_18DFE2B44((uint64_t)&v135, (uint64_t)&v112, (uint64_t)&v119);
  int v16 = v136;
  int v15 = DWORD1(v136);
  uint64_t v163 = 0x100000003;
  unsigned int v161 = (void (*)(uint64_t))&unk_1EDD18D98;
  int v164 = v165;
  *(void *)&long long v162 = __PAIR64__(v136, DWORD1(v136));
  DWORD2(v162) = v136 * DWORD1(v136);
  HIDWORD(v162) = DWORD1(v136);
  if (DWORD1(v136))
  {
    int v17 = 0;
    int v18 = 0;
    int v19 = HIDWORD(v136);
    unsigned int v20 = v138;
    do
    {
      int v21 = v17;
      int v22 = v18;
      for (int i = v16; i; --i)
      {
        v165[v22] = v20[v21];
        v22 += v15;
        ++v21;
      }
      ++v18;
      v17 += v19;
    }
    while (v18 != v15);
  }
  uint64_t v126 = 0x100000001;
  int v124 = &unk_1EDD18048;
  *(void *)&long long v24 = 0x100000001;
  *((void *)&v24 + 1) = 0x100000001;
  long long v125 = v24;
  unsigned int v127 = (double *)&v128;
  sub_18DFE2B44((uint64_t)&v119, (uint64_t)&v161, (uint64_t)&v124);
  if (!*((unsigned char *)this + 1208)) {
    goto LABEL_24;
  }
  unsigned int v26 = *((unsigned __int8 *)this + 1320);
  if (v26 <= 7 && ((1 << v26) & 0xCE) != 0) {
    int8x16_t v27 = (double *)(*((void *)this + 146) + 936);
  }
  else {
LABEL_24:
  }
    int8x16_t v27 = (double *)(*((void *)this + 146) + 928);
  if (v13 < cnstatistics::InverseNormal(v25, 1.0 - *v27, 0.0, sqrt(*v127)))
  {
LABEL_26:
    int v28 = 0;
    goto LABEL_27;
  }
  sub_18E06BF24(&v112, 21);
  v116[0] = v160;
  long long v50 = *((_OWORD *)v4 + 6);
  v116[8] = *((_OWORD *)v4 + 7);
  long long v51 = *((_OWORD *)v4 + 9);
  v116[9] = *((_OWORD *)v4 + 8);
  v117[0] = v51;
  *(_OWORD *)((char *)v117 + 12) = *(_OWORD *)(v4 + 156);
  long long v52 = *((_OWORD *)v4 + 2);
  v116[4] = *((_OWORD *)v4 + 3);
  long long v53 = *((_OWORD *)v4 + 5);
  v116[5] = *((_OWORD *)v4 + 4);
  v116[6] = v53;
  v116[7] = v50;
  long long v54 = *((_OWORD *)v4 + 1);
  v116[1] = *(_OWORD *)v4;
  v116[2] = v54;
  double v112 = &unk_1EDD16100;
  v116[3] = v52;
  int v55 = *((unsigned __int8 *)this + 1208);
  BOOL v56 = *((unsigned char *)this + 1208)
     && *((unsigned char *)this + 1320) == 5
     && *((unsigned char *)this + 2368)
     && *((unsigned __int8 *)this + 2480) - 2 < 3;
  BOOL v118 = v56;
  uint64_t v121 = 0x100000003;
  int v119 = &unk_1EDD18D98;
  *(void *)&long long v57 = 0x100000001;
  *((void *)&v57 + 1) = 0x100000001;
  long long v120 = v57;
  uint64_t v122 = v123;
  v123[0] = 0.0;
  uint64_t v163 = 0x100000001;
  unsigned int v161 = (void (*)(uint64_t))&unk_1EDD18048;
  long long v162 = v57;
  int v164 = v165;
  double v58 = *(double *)(*((void *)this + 146) + 2528);
  if (v58 <= 0.0)
  {
    __int16 v111 = 12;
    unsigned __int8 v110 = 4;
    int v124 = (void *)(*(uint64_t (**)(const raven::MapVectorEvent *))(*(void *)a2 + 16))(a2);
    *(void *)&long long v125 = v78;
    char v79 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)&v124, "estimator_map_vector_number_of_cross_track_position_sigmas_in_road_width_ <= 0");
    if (*((char *)this + 2511) >= 0) {
      LOBYTE(v67) = v79;
    }
    else {
      uint64_t v67 = *((void *)this + 311);
    }
    goto LABEL_57;
  }
  double v59 = *((double *)a2 + 30) / v58;
  if (v55 && v59 < 1.0 && *((unsigned char *)this + 1320) != 5) {
    double v59 = 1.0;
  }
  v165[0] = v59 * v59;
  if (sub_18E1094E4((uint64_t)this + 8336, (double *)&v160, (uint64_t)&v119, (uint64_t)&v161, (uint64_t)&v112))
  {
    __int16 v111 = 12;
    unsigned __int8 v110 = 4;
    int v124 = (void *)(*(uint64_t (**)(const raven::MapVectorEvent *))(*(void *)a2 + 16))(a2);
    *(void *)&long long v125 = v60;
    char v61 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)&v124, "Could not add measurement - map vector position");
    if (*((char *)this + 2511) >= 0) {
      LOBYTE(v67) = v61;
    }
    else {
      uint64_t v67 = *((void *)this + 311);
    }
LABEL_57:
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v111, &v110, "%s", v62, v63, v64, v65, v66, v67);
    int v28 = -1;
    goto LABEL_58;
  }
  int v28 = 0;
LABEL_58:
  double v112 = &unk_1EDD0A4E8;
  if (SHIBYTE(v115) < 0) {
    operator delete(__p[1]);
  }
LABEL_27:
  sub_18E06BF24(v140, 22);
  long long v142 = v160;
  long long v29 = *((_OWORD *)v4 + 6);
  long long v150 = *((_OWORD *)v4 + 7);
  long long v30 = *((_OWORD *)v4 + 9);
  long long v151 = *((_OWORD *)v4 + 8);
  v152[0] = v30;
  *(_OWORD *)((char *)v152 + 12) = *(_OWORD *)(v4 + 156);
  long long v31 = *((_OWORD *)v4 + 2);
  long long v146 = *((_OWORD *)v4 + 3);
  long long v32 = *((_OWORD *)v4 + 5);
  long long v147 = *((_OWORD *)v4 + 4);
  v140[0] = &unk_1EDD16128;
  long long v148 = v32;
  long long v149 = v29;
  long long v33 = *((_OWORD *)v4 + 1);
  float64x2_t v143 = *(float64x2_t *)v4;
  long long v144 = v33;
  long long v145 = v31;
  uint64_t v137 = 0x100000003;
  uint64_t v135 = &unk_1EDD18D98;
  *(void *)&long long v34 = 0x100000001;
  *((void *)&v34 + 1) = 0x100000001;
  long long v136 = v34;
  uint64_t v138 = v139;
  v139[0] = 0.0;
  uint64_t v121 = 0x100000001;
  int v119 = &unk_1EDD18048;
  long long v120 = v34;
  double v35 = *(double *)(*((void *)this + 146) + 2536);
  uint64_t v122 = v123;
  if (v35 <= 0.0)
  {
    LOWORD(v161) = 12;
    LOBYTE(v129) = 4;
    double v112 = (void *)(*(uint64_t (**)(const raven::MapVectorEvent *))(*(void *)a2 + 16))(a2);
    __p[0] = v42;
    char v43 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)&v112, "estimator_map_vector_cross_track_velocity_sigma_ <= 0");
    if (*((char *)this + 2511) >= 0) {
      LOBYTE(v49) = v43;
    }
    else {
      uint64_t v49 = *((void *)this + 311);
    }
  }
  else
  {
    v123[0] = v35 * v35;
    uint64_t v114 = 0x100000003;
    double v112 = &unk_1EDD18D98;
    int v115 = v116;
    *(_OWORD *)std::string __p = v34;
    int8x16_t v36 = (cnprint::CNPrinter *)sub_18DFE2CC8((uint64_t)&v112, 0.0);
    if (*((unsigned char *)this + 8336))
    {
      if (*((_DWORD *)this + 3568) == 174)
      {
        LOWORD(v161) = 2;
        LOBYTE(v129) = 2;
        double v106 = *((double *)&v160 + 1) + (double)(uint64_t)v160;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v161, (unsigned __int8 *)&v129, "MeasurementAccumulator::AddMeasurement() failed - Out of space,t_meas,%.3lf", v37, v38, v39, v40, v41, SLOBYTE(v106));
      }
      else if (*((unsigned char *)this + 8337))
      {
        if (cnprint::CNPrinter::GetLogLevel(v36) <= 1)
        {
          LOWORD(v161) = 2;
          LOBYTE(v129) = 1;
          double v108 = *((double *)&v160 + 1) + (double)(uint64_t)v160;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v161, (unsigned __int8 *)&v129, "MeasurementAccumulator::AddMeasurement() failed - Locked,t_meas,%.3lf", v73, v74, v75, v76, v77, SLOBYTE(v108));
        }
      }
      else
      {
        BOOL v80 = sub_18DEE4CB8((double *)&v160, (double *)this + 1043);
        if (v80)
        {
          if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v80) <= 1)
          {
            LOWORD(v161) = 2;
            LOBYTE(v129) = 1;
            double v109 = *((double *)&v160 + 1) + (double)(uint64_t)v160;
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v161, (unsigned __int8 *)&v129, "MeasurementAccumulator::AddMeasurement() failed - Measurement too old,t_meas,%.3lf,t_start,%.3lf", v81, v82, v83, v84, v85, SLOBYTE(v109));
          }
        }
        else
        {
          unsigned int v161 = 0;
          *(void *)&long long v162 = 0;
          sub_18E114FA8(&v161, (uint64_t)v140);
          long long v86 = sub_18E06C110((uint64_t *)this + 1047, &v161);
          sub_18E067C60((uint64_t (**)(void, void, void, void, void))&v161);
          uint64_t v87 = *((int *)this + 3568);
          uint64_t v88 = (v87 + 1);
          if (*((void *)this + 1049) == v88)
          {
            *((_DWORD *)this + 3568) = v88;
            *((_DWORD *)this + 2102) = v88;
            *((_DWORD *)this + 2103) = 1;
            *((_DWORD *)this + 2104) = v88;
            *((_DWORD *)this + 2105) = v88;
            *((_DWORD *)this + 2808) = v88;
            *((_DWORD *)this + 2809) = 1;
            *((_DWORD *)this + 2810) = v88;
            *((_DWORD *)this + 2811) = v88;
            *((_DWORD *)this + 2992) = v88;
            *((_DWORD *)this + 2993) = 1;
            *((_DWORD *)this + 2994) = v88;
            *((_DWORD *)this + 2995) = v88;
            *((_DWORD *)this + 3350) = v88;
            *((_DWORD *)this + 3351) = 1;
            *((_DWORD *)this + 3352) = v88;
            *((_DWORD *)this + 3353) = v88;
            *((_DWORD *)this + 3362) = v88;
            *((_DWORD *)this + 3363) = 1;
            *((_DWORD *)this + 3364) = v88;
            *((_DWORD *)this + 3365) = v88;
            *((_DWORD *)this + 3546) = v88;
            *((_DWORD *)this + 3547) = 1;
            *((_DWORD *)this + 3548) = v88;
            *((_DWORD *)this + 3549) = v88;
            *((_DWORD *)this + 3558) = v88;
            *((_DWORD *)this + 3559) = 1;
            *((_DWORD *)this + 3560) = v88;
            *((_DWORD *)this + 3561) = v88;
            *((_DWORD *)this + 3572) = v88;
            *((_DWORD *)this + 3573) = 1;
            *((_DWORD *)this + 3574) = v88;
            *((_DWORD *)this + 3575) = v88;
            *((_DWORD *)this + 3930) = v88;
            *((_DWORD *)this + 3931) = 1;
            *((_DWORD *)this + 3932) = v88;
            *((_DWORD *)this + 3933) = v88;
            *(_OWORD *)(*((void *)this + 1054) + 16 * v87) = v160;
            if (v136 <= DWORD1(v136)) {
              int v89 = DWORD1(v136);
            }
            else {
              int v89 = v136;
            }
            if (DWORD1(v136)) {
              BOOL v90 = v136 == 0;
            }
            else {
              BOOL v90 = 1;
            }
            if (v90) {
              int v91 = 0;
            }
            else {
              int v91 = v89;
            }
            *(_DWORD *)(*((void *)this + 1407) + 4 * v87) = v91;
            sub_18DFE2F24(*((void *)this + 1678) + (v87 << 6), (uint64_t)&v135);
            if (LODWORD(__p[0]) <= HIDWORD(__p[0])) {
              int v92 = HIDWORD(__p[0]);
            }
            else {
              int v92 = (int)__p[0];
            }
            if (HIDWORD(__p[0])) {
              BOOL v93 = LODWORD(__p[0]) == 0;
            }
            else {
              BOOL v93 = 1;
            }
            if (v93) {
              int v94 = 0;
            }
            else {
              int v94 = v92;
            }
            *(_DWORD *)(*((void *)this + 1684) + 4 * v87) = v94;
            sub_18DFE2F24(*((void *)this + 1776) + (v87 << 6), (uint64_t)&v112);
            __n128 v95 = sub_18DFE2F24(*((void *)this + 1782) + 112 * (int)v87, (uint64_t)&v119);
            *(void *)(*((void *)this + 1789) + 8 * v87) = sub_18E10998C;
            if (*v86) {
              uint64_t v96 = ((uint64_t (*)(uint64_t, void *, void, void *, void *, __n128))*v86)(3, v86, 0, &unk_1EDD06208, &std::__any_imp::__unique_typeinfo<raven::h_MapVectorVelocityConstraintArgs_RavenConvergence>::__id, v95);
            }
            else {
              uint64_t v96 = 0;
            }
            int v105 = 0;
            *(void *)(*((void *)this + 1968) + 8 * v87) = v96;
            goto LABEL_90;
          }
          LOWORD(v161) = 2;
          LOBYTE(v129) = 4;
          char v97 = (*(uint64_t (**)(void *))(v140[0] + 16))(v140);
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v161, (unsigned __int8 *)&v129, "MeasurementAccumulator::AddMeasurement() failed - allocation failed,meas_type,%d,t_meas,%.3lf", v98, v99, v100, v101, v102, v97);
        }
      }
    }
    else if (cnprint::CNPrinter::GetLogLevel(v36) <= 1)
    {
      LOWORD(v161) = 2;
      LOBYTE(v129) = 1;
      double v107 = *((double *)&v160 + 1) + (double)(uint64_t)v160;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v161, (unsigned __int8 *)&v129, "MeasurementAccumulator::AddMeasurement() failed - Not initialized,t_meas,%.3lf", v68, v69, v70, v71, v72, SLOBYTE(v107));
    }
    LOWORD(v161) = 12;
    LOBYTE(v129) = 4;
    double v112 = (void *)(*(uint64_t (**)(const raven::MapVectorEvent *))(*(void *)a2 + 16))(a2);
    __p[0] = v103;
    char v104 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)&v112, "Could not add measurement - map vector velocity");
    if (*((char *)this + 2511) >= 0) {
      LOBYTE(v49) = v104;
    }
    else {
      uint64_t v49 = *((void *)this + 311);
    }
  }
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v161, (unsigned __int8 *)&v129, "%s", v44, v45, v46, v47, v48, v49);
  int v105 = -2;
LABEL_90:
  uint64_t v11 = (v105 + v28);
  v140[0] = &unk_1EDD0A4E8;
  if (v141 < 0) {
    operator delete((void *)v140[2]);
  }
  return v11;
}

void sub_18E108F00(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_18DEDD524(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_18E108FC4(uint64_t a1, uint64_t a2, void *lpsrc, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v71 = *MEMORY[0x1E4F143B8];
  if (!lpsrc
    || (double v13 = (double *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EDD02A78, (const struct __class_type_info *)&unk_1EDD061F0, 0)) == 0)
  {
    LOWORD(v59) = 12;
    LOBYTE(v54) = 4;
    double v48 = MEMORY[0x30] + (double)MEMORY[0x28];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v59, (unsigned __int8 *)&v54, "time,%.3lf,h-function failure on line %d: %s() %s", a4, a5, a6, a7, a8, SLOBYTE(v48));
    return 0xFFFFFFFFLL;
  }
  int8x16_t v14 = v13;
  unsigned int v16 = *(_DWORD *)(a1 + 8);
  unsigned int v15 = *(_DWORD *)(a1 + 12);
  if (v16 <= v15) {
    int v17 = *(_DWORD *)(a1 + 12);
  }
  else {
    int v17 = *(_DWORD *)(a1 + 8);
  }
  if (!v16
    || !v15
    || v17 != 8
    || ((v19 = *(_DWORD *)(a2 + 8), unsigned int v18 = *(_DWORD *)(a2 + 12), v19 <= v18)
      ? (int v20 = *(_DWORD *)(a2 + 12))
      : (int v20 = *(_DWORD *)(a2 + 8)),
        !v19 || !v18 || v20 != 1))
  {
    LOWORD(v59) = 12;
    LOBYTE(v54) = 4;
    double v28 = v13[6] + (double)*((uint64_t *)v13 + 5);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v59, (unsigned __int8 *)&v54, "time,%.3lf,h-function failure on line %d: %s() %s", a4, a5, a6, a7, a8, SLOBYTE(v28));
    return 0xFFFFFFFFLL;
  }
  uint64_t v21 = *(void *)(a1 + 32);
  float64x2_t v69 = *(float64x2_t *)v21;
  uint64_t v70 = *(void *)(v21 + 16);
  uint64_t v68 = 0;
  if (cnnavigation::ECEFToLLA(&v69, 1, v67.f64, 0, (uint64_t)&v59))
  {
    LOWORD(v59) = 12;
    LOBYTE(v54) = 4;
    double v27 = v14[6] + (double)*((uint64_t *)v14 + 5);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v59, (unsigned __int8 *)&v54, "time,%.3lf,h-function failure on line %d: %s() %s", v22, v23, v24, v25, v26, SLOBYTE(v27));
    return 0xFFFFFFFFLL;
  }
  float64x2_t v67 = vmulq_f64(*(float64x2_t *)(v14 + 19), (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL));
  char v60 = 0;
  uint64_t v63 = 0x300000003;
  char v61 = &unk_1EDD18EE8;
  long long v62 = xmmword_18E1F0010;
  uint64_t v64 = &v65;
  double v59 = &unk_1EDD0AB68;
  cnnavigation::ECEFToENU(&v69, 1, 1, &v67, 0, (uint64_t)v66, (uint64_t)&v59, COERCE_DOUBLE(0x300000003));
  if (v35)
  {
    LOWORD(v54) = 12;
    LOBYTE(v49) = 4;
    double v36 = v14[6] + (double)*((uint64_t *)v14 + 5);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v54, (unsigned __int8 *)&v49, "time,%.3lf,h-function failure on line %d: %s() %s", v30, v31, v32, v33, v34, SLOBYTE(v36));
    return 0xFFFFFFFFLL;
  }
  uint64_t v56 = 0x300000003;
  long long v54 = &unk_1EDD18EE8;
  long long v55 = xmmword_18E1F0010;
  long long v57 = (double *)&v58;
  if (v60) {
    sub_18DFE2F24((uint64_t)&v54, (uint64_t)&v61);
  }
  __double2 v37 = __sincos_stret(v14[26] * 0.0174532925);
  *(void *)&long long v38 = 0x100000001;
  *((void *)&v38 + 1) = 0x100000001;
  *(_OWORD *)(a4 + 8) = v38;
  double v39 = -v37.__cosval;
  uint64_t v40 = *(double **)(a4 + 32);
  double v41 = v37.__sinval * v66[1] - v37.__cosval * v66[0] + **(double **)(a2 + 32);
  *uint64_t v40 = v41;
  if (!*((unsigned char *)v14 + 232))
  {
    double v42 = v14[24];
    if (fabs(v41) > v42 * 0.5)
    {
      if (v41 >= 0.0) {
        double v42 = -v42;
      }
      *uint64_t v40 = v41 + v42 * 0.5;
    }
  }
  uint64_t v51 = 0x800000001;
  uint64_t v49 = &unk_1EDD18408;
  long long v52 = v53;
  long long v50 = xmmword_18E215AC0;
  sub_18DFE2CC8((uint64_t)&v49, 0.0);
  sub_18DFE2F24(a5, (uint64_t)&v49);
  char v43 = v57;
  uint64_t v44 = *(double **)(a5 + 32);
  *uint64_t v44 = v37.__sinval * v57[1] + v39 * *v57;
  uint64_t v45 = SHIDWORD(v55);
  uint64_t v46 = *(int *)(a5 + 20);
  v44[v46] = v37.__sinval * v43[SHIDWORD(v55) + 1] + v39 * v43[SHIDWORD(v55)];
  v44[2 * v46] = v37.__sinval * v43[(int)((2 * v45) | 1)] + v39 * v43[2 * v45];
  uint64_t v51 = 0x100000001;
  uint64_t v49 = &unk_1EDD18048;
  long long v52 = v53;
  *(void *)&long long v47 = 0x100000001;
  *((void *)&v47 + 1) = 0x100000001;
  long long v50 = v47;
  sub_18DFE2CC8((uint64_t)&v49, 0.0);
  *long long v52 = 0x3FF0000000000000;
  sub_18DFE2F24(a6, (uint64_t)&v49);
  return 0;
}

uint64_t sub_18E1094E4(uint64_t a1, double *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v66[4] = *(void (**)(uint64_t))MEMORY[0x1E4F143B8];
  unsigned int v5 = *(_DWORD *)(a4 + 8);
  if ((v5 & 0x80000000) != 0) {
    __assert_rtn("Zeros", "cnmatrix.h", 3098, "nr >= 0");
  }
  uint64_t v62 = 0x100000003;
  long long v57 = &unk_1EDD18D98;
  uint64_t v63 = &v64;
  unsigned int v58 = v5;
  unsigned int v59 = 1;
  unsigned int v60 = v5;
  unsigned int v61 = v5;
  uint64_t v11 = (cnprint::CNPrinter *)sub_18DFE2CC8((uint64_t)&v57, 0.0);
  if (!*(unsigned char *)a1)
  {
    if (cnprint::CNPrinter::GetLogLevel(v11) <= 1)
    {
      LOWORD(v66[0]) = 2;
      unsigned __int8 v65 = 1;
      double v54 = a2[1] + (double)*(uint64_t *)a2;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v66, &v65, "MeasurementAccumulator::AddMeasurement() failed - Not initialized,t_meas,%.3lf", v17, v18, v19, v20, v21, SLOBYTE(v54));
    }
    return 0xFFFFFFFFLL;
  }
  if (*(_DWORD *)(a1 + 5936) == 174)
  {
    LOWORD(v66[0]) = 2;
    unsigned __int8 v65 = 2;
    double v53 = a2[1] + (double)*(uint64_t *)a2;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v66, &v65, "MeasurementAccumulator::AddMeasurement() failed - Out of space,t_meas,%.3lf", v12, v13, v14, v15, v16, SLOBYTE(v53));
    return 0xFFFFFFFFLL;
  }
  if (*(unsigned char *)(a1 + 1))
  {
    if (cnprint::CNPrinter::GetLogLevel(v11) <= 1)
    {
      LOWORD(v66[0]) = 2;
      unsigned __int8 v65 = 1;
      double v55 = a2[1] + (double)*(uint64_t *)a2;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v66, &v65, "MeasurementAccumulator::AddMeasurement() failed - Locked,t_meas,%.3lf", v22, v23, v24, v25, v26, SLOBYTE(v55));
    }
    return 0xFFFFFFFFLL;
  }
  BOOL v27 = sub_18DEE4CB8(a2, (double *)(a1 + 8));
  if (v27)
  {
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v27) <= 1)
    {
      LOWORD(v66[0]) = 2;
      unsigned __int8 v65 = 1;
      double v56 = a2[1] + (double)*(uint64_t *)a2;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v66, &v65, "MeasurementAccumulator::AddMeasurement() failed - Measurement too old,t_meas,%.3lf,t_start,%.3lf", v28, v29, v30, v31, v32, SLOBYTE(v56));
    }
    return 0xFFFFFFFFLL;
  }
  v66[0] = 0;
  v66[1] = 0;
  sub_18E114D74(v66, a5);
  uint64_t v33 = sub_18E06C110((uint64_t *)(a1 + 40), v66);
  sub_18E067C60((uint64_t (**)(void, void, void, void, void))v66);
  uint64_t v34 = *(int *)(a1 + 5936);
  uint64_t v35 = (v34 + 1);
  if (*(void *)(a1 + 56) != v35)
  {
    LOWORD(v66[0]) = 2;
    unsigned __int8 v65 = 4;
    char v47 = (*(uint64_t (**)(uint64_t))(*(void *)a5 + 16))(a5);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v66, &v65, "MeasurementAccumulator::AddMeasurement() failed - allocation failed,meas_type,%d,t_meas,%.3lf", v48, v49, v50, v51, v52, v47);
    return 0xFFFFFFFFLL;
  }
  *(_DWORD *)(a1 + 5936) = v35;
  *(_DWORD *)(a1 + 72) = v35;
  *(_DWORD *)(a1 + 76) = 1;
  *(_DWORD *)(a1 + 80) = v35;
  *(_DWORD *)(a1 + 84) = v35;
  *(_DWORD *)(a1 + 2896) = v35;
  *(_DWORD *)(a1 + 2900) = 1;
  *(_DWORD *)(a1 + 2904) = v35;
  *(_DWORD *)(a1 + 2908) = v35;
  *(_DWORD *)(a1 + 3632) = v35;
  *(_DWORD *)(a1 + 3636) = 1;
  *(_DWORD *)(a1 + 3640) = v35;
  *(_DWORD *)(a1 + 3644) = v35;
  *(_DWORD *)(a1 + 5064) = v35;
  *(_DWORD *)(a1 + 5068) = 1;
  *(_DWORD *)(a1 + 5072) = v35;
  *(_DWORD *)(a1 + 5076) = v35;
  *(_DWORD *)(a1 + 5112) = v35;
  *(_DWORD *)(a1 + 5116) = 1;
  *(_DWORD *)(a1 + 5120) = v35;
  *(_DWORD *)(a1 + 5124) = v35;
  *(_DWORD *)(a1 + 5848) = v35;
  *(_DWORD *)(a1 + 5852) = 1;
  *(_DWORD *)(a1 + 5856) = v35;
  *(_DWORD *)(a1 + 5860) = v35;
  *(_DWORD *)(a1 + 5896) = v35;
  *(_DWORD *)(a1 + 5900) = 1;
  *(_DWORD *)(a1 + 5904) = v35;
  *(_DWORD *)(a1 + 5908) = v35;
  *(_DWORD *)(a1 + 5952) = v35;
  *(_DWORD *)(a1 + 5956) = 1;
  *(_DWORD *)(a1 + 5960) = v35;
  *(_DWORD *)(a1 + 5964) = v35;
  *(_DWORD *)(a1 + 7384) = v35;
  *(_DWORD *)(a1 + 7388) = 1;
  *(_DWORD *)(a1 + 7392) = v35;
  *(_DWORD *)(a1 + 7396) = v35;
  *(_OWORD *)(*(void *)(a1 + 96) + 16 * v34) = *(_OWORD *)a2;
  unsigned int v36 = *(_DWORD *)(a3 + 8);
  unsigned int v37 = *(_DWORD *)(a3 + 12);
  if (v36 <= v37) {
    int v38 = *(_DWORD *)(a3 + 12);
  }
  else {
    int v38 = *(_DWORD *)(a3 + 8);
  }
  if (v37) {
    BOOL v39 = v36 == 0;
  }
  else {
    BOOL v39 = 1;
  }
  if (v39) {
    int v40 = 0;
  }
  else {
    int v40 = v38;
  }
  *(_DWORD *)(*(void *)(a1 + 2920) + 4 * v34) = v40;
  sub_18DFE2F24(*(void *)(a1 + 5088) + (v34 << 6), a3);
  if (v58 <= v59) {
    unsigned int v41 = v59;
  }
  else {
    unsigned int v41 = v58;
  }
  if (v59) {
    BOOL v42 = v58 == 0;
  }
  else {
    BOOL v42 = 1;
  }
  if (v42) {
    unsigned int v43 = 0;
  }
  else {
    unsigned int v43 = v41;
  }
  *(_DWORD *)(*(void *)(a1 + 5136) + 4 * v34) = v43;
  sub_18DFE2F24(*(void *)(a1 + 5872) + (v34 << 6), (uint64_t)&v57);
  __n128 v44 = sub_18DFE2F24(*(void *)(a1 + 5920) + 112 * (int)v34, a4);
  *(void *)(*(void *)(a1 + 5976) + 8 * v34) = sub_18E108FC4;
  uint64_t v45 = (uint64_t (*)(uint64_t, void *, void, void *, void *, __n128))*v33;
  if (*v33) {
    uint64_t v45 = (uint64_t (*)(uint64_t, void *, void, void *, void *, __n128))v45(3, v33, 0, &unk_1EDD061F0, &std::__any_imp::__unique_typeinfo<raven::h_MapVectorPositionConstraintArgs_RavenConvergence>::__id, v44);
  }
  uint64_t result = 0;
  *(void *)(*(void *)(a1 + 7408) + 8 * v34) = v45;
  return result;
}

void sub_18E109910(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (a2) {
    sub_18DEDD524(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_18E10993C(uint64_t a1)
{
  *(void *)a1 = &unk_1EDD0A4E8;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

uint64_t sub_18E10998C(uint64_t a1, uint64_t a2, void *lpsrc, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!lpsrc
    || (uint64_t v13 = (double *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EDD02A78, (const struct __class_type_info *)&unk_1EDD06208, 0)) == 0)
  {
    __int16 v41 = 12;
    LOBYTE(v36) = 4;
    double v30 = MEMORY[0x30] + (double)MEMORY[0x28];
LABEL_20:
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v41, (unsigned __int8 *)&v36, "time,%.3lf,h-function failure on line %d: %s() %s", a4, a5, a6, a7, a8, SLOBYTE(v30));
    return 0xFFFFFFFFLL;
  }
  uint64_t v14 = v13;
  unsigned int v16 = *(_DWORD *)(a1 + 8);
  unsigned int v15 = *(_DWORD *)(a1 + 12);
  if (v16 <= v15) {
    int v17 = *(_DWORD *)(a1 + 12);
  }
  else {
    int v17 = *(_DWORD *)(a1 + 8);
  }
  if (!v16
    || !v15
    || v17 != 8
    || ((v19 = *(_DWORD *)(a2 + 8), unsigned int v18 = *(_DWORD *)(a2 + 12), v19 <= v18)
      ? (int v20 = *(_DWORD *)(a2 + 12))
      : (int v20 = *(_DWORD *)(a2 + 8)),
        !v19 || !v18 || v20 != 1))
  {
    __int16 v41 = 12;
    LOBYTE(v36) = 4;
    double v30 = v13[6] + (double)*((uint64_t *)v13 + 5);
    goto LABEL_20;
  }
  uint64_t v21 = *(void *)(a1 + 32);
  long long v44 = *(_OWORD *)(v21 + 24);
  uint64_t v45 = *(void *)(v21 + 40);
  sub_18DFFDBB4((uint64_t)&v41, v13[19] * 0.0174532925, v13[20] * 0.0174532925);
  sub_18DEF20E0((uint64_t)&v41, (double *)&v44, v46);
  uint64_t v38 = 0x300000003;
  unsigned int v36 = &unk_1EDD18EE8;
  long long v37 = xmmword_18E1F0010;
  BOOL v39 = (double *)&v40;
  if (v42) {
    sub_18DFE2F24((uint64_t)&v36, (uint64_t)&v43);
  }
  __double2 v22 = __sincos_stret(v14[26] * 0.0174532925);
  *(void *)&long long v23 = 0x100000001;
  *((void *)&v23 + 1) = 0x100000001;
  *(_OWORD *)(a4 + 8) = v23;
  **(double **)(a4 + 32) = v22.__sinval * v46[1] - v22.__cosval * v46[0] + **(double **)(a2 + 32);
  uint64_t v33 = 0x800000001;
  uint64_t v31 = &unk_1EDD18408;
  uint64_t v34 = v35;
  long long v32 = xmmword_18E215AC0;
  sub_18DFE2CC8((uint64_t)&v31, 0.0);
  sub_18DFE2F24(a5, (uint64_t)&v31);
  uint64_t v24 = v39;
  uint64_t v25 = *(int *)(a5 + 20);
  uint64_t v26 = *(void *)(a5 + 32);
  *(double *)(v26 + 24 * v25) = v22.__sinval * v39[1] - v22.__cosval * *v39;
  uint64_t v27 = SHIDWORD(v37);
  *(double *)(v26 + 32 * v25) = v22.__sinval * v24[SHIDWORD(v37) + 1] - v22.__cosval * v24[SHIDWORD(v37)];
  *(double *)(v26 + 40 * v25) = v22.__sinval * v24[(int)((2 * v27) | 1)] - v22.__cosval * v24[2 * v27];
  uint64_t v33 = 0x100000001;
  uint64_t v31 = &unk_1EDD18048;
  uint64_t v34 = v35;
  *(void *)&long long v28 = 0x100000001;
  *((void *)&v28 + 1) = 0x100000001;
  long long v32 = v28;
  sub_18DFE2CC8((uint64_t)&v31, 0.0);
  *uint64_t v34 = 0x3FF0000000000000;
  sub_18DFE2F24(a6, (uint64_t)&v31);
  return 0;
}

uint64_t sub_18E109CEC(uint64_t a1)
{
  *(void *)a1 = &unk_1EDD0A4E8;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

uint64_t raven::RavenConvergenceEstimator::HandleEvent(raven::RavenConvergenceEstimator *this, const raven::MovingStateEvent *a2)
{
  if (!*((unsigned char *)this + 57)) {
    return 0xFFFFFFFFLL;
  }
  if (!*((unsigned char *)this + 58)) {
    return 0;
  }
  raven::RavenEstimator::HandleMovingStateEvent(this, a2);
  if (v4) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = raven::RavenEstimator::IsZUPTAppropriate(this, a2);
  if (result)
  {
    v19[1] = 0;
    v19[2] = 0;
    v19[0] = &unk_1EDD13880;
    char v20 = 0;
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    char v23 = 0;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    char v26 = 0;
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    uint64_t v30 = 0;
    uint64_t v31 = 0;
    uint64_t v29 = 0x7FF8000000000000;
    char v32 = 0;
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    char v35 = 0;
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    char v38 = 0;
    uint64_t v39 = 0;
    uint64_t v40 = 0;
    uint64_t v41 = 0x7FF8000000000000;
    int v42 = 0;
    int64x2_t v43 = vdupq_n_s64(0x7FF8000000000000uLL);
    int64x2_t v44 = v43;
    int64x2_t v45 = v43;
    int64x2_t v46 = v43;
    uint64_t v47 = 0x7FF8000000000000;
    char v48 = 0;
    int64x2_t v49 = v43;
    int64x2_t v50 = v43;
    int64x2_t v51 = v43;
    int64x2_t v52 = v43;
    uint64_t v53 = 0x7FF8000000000000;
    if (!(*(unsigned int (**)(raven::RavenConvergenceEstimator *, const raven::MovingStateEvent *, void *))(*(void *)this + 184))(this, a2, v19))
    {
      (*(void (**)(raven::RavenConvergenceEstimator *, void *))(*(void *)this + 320))(this, v19);
      uint64_t v6 = (cnprint::CNPrinter *)(*(uint64_t (**)(const raven::MovingStateEvent *))(*(void *)a2 + 16))(a2);
      int v7 = *((unsigned __int8 *)this + 232);
      *((void *)this + 30) = v6;
      *((void *)this + 31) = v8;
      if (!v7) {
        *((unsigned char *)this + 232) = 1;
      }
      if (cnprint::CNPrinter::GetLogLevel(v6) <= 1)
      {
        __int16 v18 = 12;
        unsigned __int8 v17 = 1;
        v16[0] = (*(uint64_t (**)(const raven::MovingStateEvent *))(*(void *)a2 + 16))(a2);
        v16[1] = v9;
        cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)v16, "Raising ZUPT velocity event");
        if (*((char *)this + 2511) >= 0) {
          LOBYTE(v15) = (_BYTE)this - 72;
        }
        else {
          uint64_t v15 = *((void *)this + 311);
        }
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v18, &v17, "%s", v10, v11, v12, v13, v14, v15);
      }
    }
    return 0;
  }
  return result;
}

uint64_t raven::RavenConvergenceEstimator::HandleEvent(raven::RavenConvergenceEstimator *this, const raven::OdometerEvent *a2)
{
  v94[4] = *(void (**)(uint64_t))MEMORY[0x1E4F143B8];
  if (!*((unsigned char *)this + 57)) {
    return 0xFFFFFFFFLL;
  }
  if (!*((unsigned char *)this + 58)) {
    return 0;
  }
  uint64_t v83 = 0x100000003;
  uint64_t v81 = &unk_1EDD18D98;
  *(void *)&long long v4 = 0x100000001;
  *((void *)&v4 + 1) = 0x100000001;
  long long v82 = v4;
  uint64_t v84 = &v85;
  uint64_t v85 = *((void *)a2 + 25);
  uint64_t v78 = 0x300000003;
  uint64_t v76 = &unk_1EDD18EE8;
  long long v77 = v4;
  char v79 = &v80;
  double v80 = *((double *)a2 + 26) * *((double *)a2 + 26);
  sub_18E06BF24(v69, 19);
  v69[0] = &unk_1EDD160D8;
  uint64_t v71 = (*(uint64_t (**)(const raven::OdometerEvent *))(*(void *)a2 + 16))(a2);
  uint64_t v72 = v5;
  long long v86 = (void *)(*(uint64_t (**)(const raven::OdometerEvent *))(*(void *)a2 + 16))(a2);
  uint64_t v87 = v6;
  uint64_t v9 = CNTimeSpan::operator-((uint64_t)&v86, (void *)a2 + 13, v7, v8);
  long long v10 = *(_OWORD *)(*((void *)this + 146) + 104);
  double v73 = v11 + (double)v9;
  uint64_t v74 = v10;
  long long v75 = v10;
  uint64_t v13 = (*(uint64_t (**)(const raven::OdometerEvent *))(*(void *)a2 + 16))(a2);
  *(void *)&long long v68 = v13;
  *((double *)&v68 + 1) = v12;
  if ((v77 & 0x80000000) != 0) {
    __assert_rtn("Zeros", "cnmatrix.h", 3098, "nr >= 0");
  }
  uint64_t v90 = 0x100000003;
  long long v86 = &unk_1EDD18D98;
  int v91 = &v92;
  double v14 = v12;
  uint64_t v87 = v77 | 0x100000000;
  int v88 = v77;
  int v89 = v77;
  uint64_t v15 = (cnprint::CNPrinter *)sub_18DFE2CC8((uint64_t)&v86, 0.0);
  if (*((unsigned char *)this + 8336))
  {
    if (*((_DWORD *)this + 3568) == 174)
    {
      LOWORD(v94[0]) = 2;
      unsigned __int8 v93 = 2;
      double v64 = v14 + (double)v13;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v94, &v93, "MeasurementAccumulator::AddMeasurement() failed - Out of space,t_meas,%.3lf", v16, v17, v18, v19, v20, SLOBYTE(v64));
    }
    else if (*((unsigned char *)this + 8337))
    {
      if (cnprint::CNPrinter::GetLogLevel(v15) <= 1)
      {
        LOWORD(v94[0]) = 2;
        unsigned __int8 v93 = 1;
        double v66 = v14 + (double)v13;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v94, &v93, "MeasurementAccumulator::AddMeasurement() failed - Locked,t_meas,%.3lf", v27, v28, v29, v30, v31, SLOBYTE(v66));
      }
    }
    else
    {
      BOOL v32 = sub_18DEE4CB8((double *)&v68, (double *)this + 1043);
      if (v32)
      {
        if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v32) <= 1)
        {
          LOWORD(v94[0]) = 2;
          unsigned __int8 v93 = 1;
          double v67 = *((double *)&v68 + 1) + (double)(uint64_t)v68;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)v94, &v93, "MeasurementAccumulator::AddMeasurement() failed - Measurement too old,t_meas,%.3lf,t_start,%.3lf", v33, v34, v35, v36, v37, SLOBYTE(v67));
        }
      }
      else
      {
        v94[0] = 0;
        v94[1] = 0;
        sub_18E115244(v94, (uint64_t)v69);
        char v38 = sub_18E06C110((uint64_t *)this + 1047, v94);
        sub_18E067C60((uint64_t (**)(void, void, void, void, void))v94);
        uint64_t v39 = *((int *)this + 3568);
        uint64_t v40 = (v39 + 1);
        if (*((void *)this + 1049) == v40)
        {
          *((_DWORD *)this + 3568) = v40;
          *((_DWORD *)this + 2102) = v40;
          *((_DWORD *)this + 2103) = 1;
          *((_DWORD *)this + 2104) = v40;
          *((_DWORD *)this + 2105) = v40;
          *((_DWORD *)this + 2808) = v40;
          *((_DWORD *)this + 2809) = 1;
          *((_DWORD *)this + 2810) = v40;
          *((_DWORD *)this + 2811) = v40;
          *((_DWORD *)this + 2992) = v40;
          *((_DWORD *)this + 2993) = 1;
          *((_DWORD *)this + 2994) = v40;
          *((_DWORD *)this + 2995) = v40;
          *((_DWORD *)this + 3350) = v40;
          *((_DWORD *)this + 3351) = 1;
          *((_DWORD *)this + 3352) = v40;
          *((_DWORD *)this + 3353) = v40;
          *((_DWORD *)this + 3362) = v40;
          *((_DWORD *)this + 3363) = 1;
          *((_DWORD *)this + 3364) = v40;
          *((_DWORD *)this + 3365) = v40;
          *((_DWORD *)this + 3546) = v40;
          *((_DWORD *)this + 3547) = 1;
          *((_DWORD *)this + 3548) = v40;
          *((_DWORD *)this + 3549) = v40;
          *((_DWORD *)this + 3558) = v40;
          *((_DWORD *)this + 3559) = 1;
          *((_DWORD *)this + 3560) = v40;
          *((_DWORD *)this + 3561) = v40;
          *((_DWORD *)this + 3572) = v40;
          *((_DWORD *)this + 3573) = 1;
          *((_DWORD *)this + 3574) = v40;
          *((_DWORD *)this + 3575) = v40;
          *((_DWORD *)this + 3930) = v40;
          *((_DWORD *)this + 3931) = 1;
          *((_DWORD *)this + 3932) = v40;
          *((_DWORD *)this + 3933) = v40;
          *(_OWORD *)(*((void *)this + 1054) + 16 * v39) = v68;
          if (v82 <= DWORD1(v82)) {
            int v41 = DWORD1(v82);
          }
          else {
            int v41 = v82;
          }
          if (DWORD1(v82)) {
            BOOL v42 = v82 == 0;
          }
          else {
            BOOL v42 = 1;
          }
          if (v42) {
            int v43 = 0;
          }
          else {
            int v43 = v41;
          }
          *(_DWORD *)(*((void *)this + 1407) + 4 * v39) = v43;
          sub_18DFE2F24(*((void *)this + 1678) + (v39 << 6), (uint64_t)&v81);
          if (v87 <= HIDWORD(v87)) {
            int v44 = HIDWORD(v87);
          }
          else {
            int v44 = v87;
          }
          if (HIDWORD(v87)) {
            BOOL v45 = v87 == 0;
          }
          else {
            BOOL v45 = 1;
          }
          if (v45) {
            int v46 = 0;
          }
          else {
            int v46 = v44;
          }
          *(_DWORD *)(*((void *)this + 1684) + 4 * v39) = v46;
          sub_18DFE2F24(*((void *)this + 1776) + (v39 << 6), (uint64_t)&v86);
          __n128 v47 = sub_18DFE2F24(*((void *)this + 1782) + 112 * (int)v39, (uint64_t)&v76);
          *(void *)(*((void *)this + 1789) + 8 * v39) = sub_18E10A640;
          if (*v38) {
            uint64_t v48 = ((uint64_t (*)(uint64_t, void *, void, void *, void *, __n128))*v38)(3, v38, 0, &unk_1EDD061D8, &std::__any_imp::__unique_typeinfo<raven::h_HorizontalDistanceTraveledArgs_RavenConvergence<double>>::__id, v47);
          }
          else {
            uint64_t v48 = 0;
          }
          uint64_t v21 = 0;
          *(void *)(*((void *)this + 1968) + 8 * v39) = v48;
          goto LABEL_43;
        }
        LOWORD(v94[0]) = 2;
        unsigned __int8 v93 = 4;
        char v49 = (*(uint64_t (**)(void *))(v69[0] + 16))(v69);
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v94, &v93, "MeasurementAccumulator::AddMeasurement() failed - allocation failed,meas_type,%d,t_meas,%.3lf", v50, v51, v52, v53, v54, v49);
      }
    }
  }
  else if (cnprint::CNPrinter::GetLogLevel(v15) <= 1)
  {
    LOWORD(v94[0]) = 2;
    unsigned __int8 v93 = 1;
    double v65 = v14 + (double)v13;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v94, &v93, "MeasurementAccumulator::AddMeasurement() failed - Not initialized,t_meas,%.3lf", v22, v23, v24, v25, v26, SLOBYTE(v65));
  }
  LOWORD(v94[0]) = 12;
  unsigned __int8 v93 = 4;
  long long v86 = (void *)(*(uint64_t (**)(const raven::OdometerEvent *))(*(void *)a2 + 16))(a2);
  uint64_t v87 = v55;
  char v56 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)&v86, "Could not add measurement - horizontal distance");
  if (*((char *)this + 2511) >= 0) {
    LOBYTE(v62) = v56;
  }
  else {
    uint64_t v62 = *((void *)this + 311);
  }
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)v94, &v93, "%s", v57, v58, v59, v60, v61, v62);
  uint64_t v21 = 0xFFFFFFFFLL;
LABEL_43:
  v69[0] = &unk_1EDD0A4E8;
  if (v70 < 0) {
    operator delete((void *)v69[2]);
  }
  return v21;
}

void sub_18E10A5D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2) {
    sub_18DEDD524(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_18E10A640(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = *(_DWORD *)(a1 + 8);
  unsigned int v10 = *(_DWORD *)(a1 + 12);
  if (v9 <= v10) {
    int v11 = *(_DWORD *)(a1 + 12);
  }
  else {
    int v11 = *(_DWORD *)(a1 + 8);
  }
  if (v9) {
    BOOL v12 = v10 == 0;
  }
  else {
    BOOL v12 = 1;
  }
  BOOL v13 = !v12 && v11 == 8;
  if (!v13
    || ((v18 = *(_DWORD *)(a2 + 8), unsigned int v17 = *(_DWORD *)(a2 + 12), v18 <= v17)
      ? (int v19 = *(_DWORD *)(a2 + 12))
      : (int v19 = *(_DWORD *)(a2 + 8)),
        !v18 || !v17 || v19 != 1))
  {
    LOWORD(v98) = 12;
    LOBYTE(v93) = 4;
    double v14 = *(double *)(a3 + 48) + (double)*(uint64_t *)(a3 + 40);
LABEL_12:
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v98, (unsigned __int8 *)&v93, "time,%.3lf,h-function failure on line %d: %s() %s", a4, a5, a6, a7, a8, SLOBYTE(v14));
    return 0xFFFFFFFFLL;
  }
  if (*(double *)(a3 + 56) <= 0.0)
  {
    LOWORD(v98) = 12;
    LOBYTE(v93) = 4;
    double v14 = *(double *)(a3 + 48) + (double)*(uint64_t *)(a3 + 40);
    goto LABEL_12;
  }
  uint64_t v113 = *(void *)(a3 + 56);
  uint64_t v110 = 0x100000006;
  double v108 = &unk_1EDD19728;
  __int16 v111 = &v112;
  long long v109 = xmmword_18E1FD770;
  sub_18DFE2CC8((uint64_t)&v108, 0.0);
  uint64_t v24 = 0;
  uint64_t v105 = 0x100000006;
  long long v104 = xmmword_18E1FD770;
  uint64_t v103 = &unk_1EDD19728;
  double v106 = &v107;
  uint64_t v100 = 0x600000006;
  uint64_t v98 = &unk_1EDD197B8;
  long long v99 = xmmword_18E1F8570;
  uint64_t v101 = &v102;
  uint64_t v95 = 0x600000006;
  long long v94 = xmmword_18E1F8570;
  unsigned __int8 v93 = &unk_1EDD197B8;
  uint64_t v96 = &v97;
  do
  {
    *((_DWORD *)&v62 + v24) = v24;
    ++v24;
  }
  while (v24 != 6);
  uint64_t v89 = 0x100000006;
  uint64_t v87 = &unk_1EDD19758;
  uint64_t v90 = &v91;
  long long v88 = xmmword_18E1FD770;
  long long v91 = v62;
  uint64_t v92 = v63;
  uint64_t v25 = *(void *)(a1 + 32);
  sub_18E1132EC((uint64_t)v86, v25, (uint64_t)&v87);
  sub_18E1132EC((uint64_t)&v58, v25, (uint64_t)&v87);
  if (sub_18E06C950((uint64_t)&v58, (uint64_t)&v108, &v113, (uint64_t)&v103, (uint64_t)&v98, (uint64_t)&v93, v26, v27))
  {
    LOWORD(v58) = 12;
    LOBYTE(v53) = 4;
    double v33 = *(double *)(a3 + 48) + (double)*(uint64_t *)(a3 + 40);
LABEL_25:
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v58, (unsigned __int8 *)&v53, "time,%.3lf,h-function failure on line %d: %s() %s", v28, v29, v30, v31, v32, SLOBYTE(v33));
    return 0xFFFFFFFFLL;
  }
  sub_18DFFDA0C((uint64_t)v84, **(float64_t **)(a1 + 32), *(float64_t *)(*(void *)(a1 + 32) + 8), *(double *)(*(void *)(a1 + 32) + 16));
  if (!v84[8])
  {
    LOWORD(v58) = 12;
    LOBYTE(v53) = 4;
    double v33 = *(double *)(a3 + 48) + (double)*(uint64_t *)(a3 + 40);
    goto LABEL_25;
  }
  uint64_t v81 = 0x300000003;
  long long v80 = xmmword_18E1F0010;
  char v79 = &unk_1EDD18EE8;
  long long v82 = &v83;
  sub_18DFE2F24((uint64_t)&v79, (uint64_t)&v85);
  uint64_t v66 = 0x600000003;
  double v64 = &unk_1EDD18F78;
  double v67 = &v68;
  long long v65 = xmmword_18E215AD0;
  sub_18DFE2CC8((uint64_t)&v64, 0.0);
  int v34 = HIDWORD(v65) + 1;
  uint64_t v35 = v67;
  *double v67 = 0x3FF0000000000000;
  v35[v34] = 0x3FF0000000000000;
  v35[2 * v34] = 0x3FF0000000000000;
  uint64_t v71 = 0x600000003;
  long long v70 = xmmword_18E215AD0;
  float64x2_t v69 = &unk_1EDD18F78;
  uint64_t v72 = v73;
  sub_18DFE2B44((uint64_t)&v79, (uint64_t)&v64, (uint64_t)&v69);
  uint64_t v55 = 0x600000006;
  uint64_t v53 = &unk_1EDD197B8;
  char v56 = (double *)v57;
  long long v54 = xmmword_18E1F8570;
  sub_18DFE2CC8((uint64_t)&v53, 0.0);
  int v36 = 0;
  int v37 = HIDWORD(v54) + 1;
  uint64_t v38 = 6;
  uint64_t v39 = v56;
  do
  {
    v39[v36] = 1.0;
    v36 += v37;
    --v38;
  }
  while (v38);
  uint64_t v60 = 0x600000006;
  long long v59 = xmmword_18E1F8570;
  uint64_t v58 = &unk_1EDD197B8;
  uint64_t v61 = &v62;
  sub_18DFE2AA8((uint64_t)&v53, (uint64_t)&v98, (uint64_t)&v58);
  uint64_t v76 = 0x600000003;
  long long v75 = xmmword_18E215AD0;
  uint64_t v74 = &unk_1EDD18F78;
  long long v77 = &v78;
  sub_18DFE2B44((uint64_t)&v69, (uint64_t)&v58, (uint64_t)&v74);
  uint64_t v55 = 0x100000003;
  uint64_t v53 = &unk_1EDD18D98;
  long long v54 = xmmword_18E1F6F60;
  char v56 = (double *)v57;
  sub_18DFE2B44((uint64_t)&v74, (uint64_t)v86, (uint64_t)&v53);
  double v41 = *v56;
  double v40 = v56[1];
  double v42 = sqrt(v40 * v40 + v41 * v41);
  *(void *)&long long v43 = 0x100000001;
  *((void *)&v43 + 1) = 0x100000001;
  *(_OWORD *)(a4 + 8) = v43;
  **(double **)(a4 + 32) = v42 + **(double **)(a2 + 32);
  uint64_t v71 = 0x300000001;
  long long v70 = xmmword_18E1F8560;
  int v44 = v73;
  float64x2_t v69 = &unk_1EDD18228;
  uint64_t v72 = v73;
  if (fabs(v42) <= 0.000000015)
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EB4049E0, memory_order_acquire) & 1) == 0)
    {
      double v52 = v40;
      double v50 = v41;
      int v51 = __cxa_guard_acquire(&qword_1EB4049E0);
      double v41 = v50;
      double v40 = v52;
      if (v51)
      {
        qword_1EB4049D8 = 0x3FE6A09E667F3BCDLL;
        __cxa_guard_release(&qword_1EB4049E0);
        double v41 = v50;
        double v40 = v52;
      }
    }
    double v45 = 1.0;
    if (v41 <= 0.0)
    {
      double v45 = 0.0;
      if (v41 < 0.0) {
        double v45 = -1.0;
      }
    }
    int v44 = v72;
    *uint64_t v72 = *(double *)&qword_1EB4049D8 * v45;
    uint64_t v46 = qword_1EB4049D8;
    double v47 = 1.0;
    if (v40 <= 0.0)
    {
      double v47 = 0.0;
      if (v40 < 0.0) {
        double v47 = -1.0;
      }
    }
    v44[1] = *(double *)&qword_1EB4049D8 * v47;
    if (fabs(v41) < 2.22044605e-16 || fabs(v40) < 2.22044605e-16)
    {
      *(void *)int v44 = v46;
      *((void *)v44 + 1) = qword_1EB4049D8;
    }
  }
  else
  {
    v73[0] = v41 / v42;
    v73[1] = v40 / v42;
  }
  v44[2] = 0.0;
  uint64_t v60 = 0x600000001;
  long long v59 = xmmword_18E1FD840;
  uint64_t v58 = &unk_1EDD18348;
  uint64_t v61 = &v62;
  sub_18DFE2B44((uint64_t)&v69, (uint64_t)&v74, (uint64_t)&v58);
  sub_18DFE2F24(a5, (uint64_t)&v58);
  uint64_t result = 0;
  *(_OWORD *)(a5 + 8) = xmmword_18E215AC0;
  uint64_t v48 = *(void *)(a5 + 32);
  *(void *)(v48 + 48) = 0;
  *(void *)(v48 + 56) = 0;
  *(void *)&long long v49 = 0x100000001;
  *((void *)&v49 + 1) = 0x100000001;
  *(_OWORD *)(a6 + 8) = v49;
  **(void **)(a6 + 32) = 0x3FF0000000000000;
  return result;
}

uint64_t sub_18E10AE4C(uint64_t a1)
{
  *(void *)a1 = &unk_1EDD0A4E8;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

uint64_t raven::RavenConvergenceEstimator::HandleEvent(raven::RavenConvergenceEstimator *this, const raven::PositionChangeEvent *a2)
{
  v94[4] = *(void (**)(uint64_t))MEMORY[0x1E4F143B8];
  if (!*((unsigned char *)this + 57)) {
    return 0xFFFFFFFFLL;
  }
  if (!*((unsigned char *)this + 58)) {
    return 0;
  }
  uint64_t v89 = 0x100000003;
  *(_OWORD *)&v88[8] = xmmword_18E1F6F60;
  *(void *)long long v88 = &unk_1EDD18D98;
  uint64_t v90 = v91;
  uint64_t v85 = 0x100000134;
  uint64_t v83 = &unk_1EDD18C48;
  long long v84 = xmmword_18E1F6FB0;
  long long v86 = v87;
  uint64_t v80 = 0x100000003;
  uint64_t v78 = &unk_1EDD18D98;
  long long v79 = xmmword_18E1F6F60;
  uint64_t v81 = v82;
  sub_18DFE345C((uint64_t)a2 + 200, (uint64_t)v88, (uint64_t)&v83, (uint64_t)&v78, "2");
  uint64_t v5 = v4;
  uint64_t v6 = *((unsigned int *)a2 + 68);
  if ((int)v6 < 1)
  {
    double v8 = 0.0;
  }
  else
  {
    int v7 = 0;
    double v8 = 0.0;
    do
    {
      double v8 = v8 + *(double *)(*((void *)a2 + 37) + 8 * v7);
      v7 += *((_DWORD *)a2 + 71) + 1;
      --v6;
    }
    while (v6);
  }
  uint64_t v83 = (void *)(*(uint64_t (**)(const raven::PositionChangeEvent *))(*(void *)a2 + 16))(a2);
  *(void *)&long long v84 = v10;
  *(_OWORD *)long long v88 = *(_OWORD *)((char *)a2 + 104);
  uint64_t v12 = CNTimeSpan::operator-((uint64_t)&v83, v88, *(int8x16_t *)v88, v11);
  double v14 = v13;
  uint64_t v80 = 0x100000001;
  uint64_t v78 = &unk_1EDD18048;
  *(void *)&long long v15 = 0x100000001;
  *((void *)&v15 + 1) = 0x100000001;
  long long v79 = v15;
  uint64_t v81 = v82;
  v82[0] = v5;
  uint64_t v75 = 0x100000001;
  double v73 = &unk_1EDD18048;
  long long v74 = v15;
  uint64_t v76 = &v77;
  double v77 = v8;
  sub_18E06BF24(v88, 0);
  *(void *)long long v88 = &unk_1EDD15F00;
  double v92 = 0.0;
  v91[0] = (*(uint64_t (**)(const raven::PositionChangeEvent *))(*(void *)a2 + 16))(a2);
  v91[1] = v16;
  double v92 = v14 + (double)v12;
  uint64_t v18 = (*(uint64_t (**)(const raven::PositionChangeEvent *))(*(void *)a2 + 16))(a2);
  *(void *)&long long v72 = v18;
  *((double *)&v72 + 1) = v17;
  if ((v74 & 0x80000000) != 0) {
    __assert_rtn("Zeros", "cnmatrix.h", 3098, "nr >= 0");
  }
  uint64_t v85 = 0x100000003;
  uint64_t v83 = &unk_1EDD18D98;
  long long v86 = v87;
  double v19 = v17;
  *(void *)&long long v84 = v74 | 0x100000000;
  DWORD2(v84) = v74;
  HIDWORD(v84) = v74;
  uint64_t v20 = (cnprint::CNPrinter *)sub_18DFE2CC8((uint64_t)&v83, 0.0);
  if (*((unsigned char *)this + 8336))
  {
    if (*((_DWORD *)this + 3568) == 174)
    {
      LOWORD(v94[0]) = 2;
      unsigned __int8 v93 = 2;
      double v68 = v19 + (double)v18;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v94, &v93, "MeasurementAccumulator::AddMeasurement() failed - Out of space,t_meas,%.3lf", v21, v22, v23, v24, v25, SLOBYTE(v68));
    }
    else if (*((unsigned char *)this + 8337))
    {
      if (cnprint::CNPrinter::GetLogLevel(v20) <= 1)
      {
        LOWORD(v94[0]) = 2;
        unsigned __int8 v93 = 1;
        double v70 = v19 + (double)v18;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v94, &v93, "MeasurementAccumulator::AddMeasurement() failed - Locked,t_meas,%.3lf", v31, v32, v33, v34, v35, SLOBYTE(v70));
      }
    }
    else
    {
      BOOL v36 = sub_18DEE4CB8((double *)&v72, (double *)this + 1043);
      if (v36)
      {
        if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v36) <= 1)
        {
          LOWORD(v94[0]) = 2;
          unsigned __int8 v93 = 1;
          double v71 = *((double *)&v72 + 1) + (double)(uint64_t)v72;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)v94, &v93, "MeasurementAccumulator::AddMeasurement() failed - Measurement too old,t_meas,%.3lf,t_start,%.3lf", v37, v38, v39, v40, v41, SLOBYTE(v71));
        }
      }
      else
      {
        v94[0] = 0;
        v94[1] = 0;
        sub_18E1158C0(v94, (uint64_t)v88);
        double v42 = sub_18E06C110((uint64_t *)this + 1047, v94);
        sub_18E067C60((uint64_t (**)(void, void, void, void, void))v94);
        uint64_t v43 = *((int *)this + 3568);
        uint64_t v44 = (v43 + 1);
        if (*((void *)this + 1049) == v44)
        {
          *((_DWORD *)this + 3568) = v44;
          *((_DWORD *)this + 2102) = v44;
          *((_DWORD *)this + 2103) = 1;
          *((_DWORD *)this + 2104) = v44;
          *((_DWORD *)this + 2105) = v44;
          *((_DWORD *)this + 2808) = v44;
          *((_DWORD *)this + 2809) = 1;
          *((_DWORD *)this + 2810) = v44;
          *((_DWORD *)this + 2811) = v44;
          *((_DWORD *)this + 2992) = v44;
          *((_DWORD *)this + 2993) = 1;
          *((_DWORD *)this + 2994) = v44;
          *((_DWORD *)this + 2995) = v44;
          *((_DWORD *)this + 3350) = v44;
          *((_DWORD *)this + 3351) = 1;
          *((_DWORD *)this + 3352) = v44;
          *((_DWORD *)this + 3353) = v44;
          *((_DWORD *)this + 3362) = v44;
          *((_DWORD *)this + 3363) = 1;
          *((_DWORD *)this + 3364) = v44;
          *((_DWORD *)this + 3365) = v44;
          *((_DWORD *)this + 3546) = v44;
          *((_DWORD *)this + 3547) = 1;
          *((_DWORD *)this + 3548) = v44;
          *((_DWORD *)this + 3549) = v44;
          *((_DWORD *)this + 3558) = v44;
          *((_DWORD *)this + 3559) = 1;
          *((_DWORD *)this + 3560) = v44;
          *((_DWORD *)this + 3561) = v44;
          *((_DWORD *)this + 3572) = v44;
          *((_DWORD *)this + 3573) = 1;
          *((_DWORD *)this + 3574) = v44;
          *((_DWORD *)this + 3575) = v44;
          *((_DWORD *)this + 3930) = v44;
          *((_DWORD *)this + 3931) = 1;
          *((_DWORD *)this + 3932) = v44;
          *((_DWORD *)this + 3933) = v44;
          *(_OWORD *)(*((void *)this + 1054) + 16 * v43) = v72;
          if (v79 <= DWORD1(v79)) {
            int v45 = DWORD1(v79);
          }
          else {
            int v45 = v79;
          }
          if (DWORD1(v79)) {
            BOOL v46 = v79 == 0;
          }
          else {
            BOOL v46 = 1;
          }
          if (v46) {
            int v47 = 0;
          }
          else {
            int v47 = v45;
          }
          *(_DWORD *)(*((void *)this + 1407) + 4 * v43) = v47;
          sub_18DFE2F24(*((void *)this + 1678) + (v43 << 6), (uint64_t)&v78);
          if (v84 <= DWORD1(v84)) {
            int v48 = DWORD1(v84);
          }
          else {
            int v48 = v84;
          }
          if (DWORD1(v84)) {
            BOOL v49 = v84 == 0;
          }
          else {
            BOOL v49 = 1;
          }
          if (v49) {
            int v50 = 0;
          }
          else {
            int v50 = v48;
          }
          *(_DWORD *)(*((void *)this + 1684) + 4 * v43) = v50;
          sub_18DFE2F24(*((void *)this + 1776) + (v43 << 6), (uint64_t)&v83);
          __n128 v51 = sub_18DFE2F24(*((void *)this + 1782) + 112 * (int)v43, (uint64_t)&v73);
          *(void *)(*((void *)this + 1789) + 8 * v43) = sub_18E10B67C;
          if (*v42) {
            uint64_t v52 = ((uint64_t (*)(uint64_t, void *, void, void *, void *, __n128))*v42)(3, v42, 0, &unk_1EDD05FE8, &std::__any_imp::__unique_typeinfo<raven::h_3DDistanceTraveledArgs_RavenConvergence<double>>::__id, v51);
          }
          else {
            uint64_t v52 = 0;
          }
          uint64_t v9 = 0;
          *(void *)(*((void *)this + 1968) + 8 * v43) = v52;
          goto LABEL_48;
        }
        LOWORD(v94[0]) = 2;
        unsigned __int8 v93 = 4;
        char v53 = (*(uint64_t (**)(unsigned char *))(*(void *)v88 + 16))(v88);
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v94, &v93, "MeasurementAccumulator::AddMeasurement() failed - allocation failed,meas_type,%d,t_meas,%.3lf", v54, v55, v56, v57, v58, v53);
      }
    }
  }
  else if (cnprint::CNPrinter::GetLogLevel(v20) <= 1)
  {
    LOWORD(v94[0]) = 2;
    unsigned __int8 v93 = 1;
    double v69 = v19 + (double)v18;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v94, &v93, "MeasurementAccumulator::AddMeasurement() failed - Not initialized,t_meas,%.3lf", v26, v27, v28, v29, v30, SLOBYTE(v69));
  }
  LOWORD(v94[0]) = 12;
  unsigned __int8 v93 = 4;
  uint64_t v83 = (void *)(*(uint64_t (**)(const raven::PositionChangeEvent *))(*(void *)a2 + 16))(a2);
  *(void *)&long long v84 = v59;
  char v60 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)&v83, "Could not add measurement - 3D distance traveled from delta-position");
  if (*((char *)this + 2511) >= 0) {
    LOBYTE(v66) = v60;
  }
  else {
    uint64_t v66 = *((void *)this + 311);
  }
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)v94, &v93, "%s", v61, v62, v63, v64, v65, v66);
  uint64_t v9 = 0xFFFFFFFFLL;
LABEL_48:
  *(void *)long long v88 = &unk_1EDD0A4E8;
  if (SHIBYTE(v90) < 0) {
    operator delete(*(void **)&v88[16]);
  }
  return v9;
}

void sub_18E10B610(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    sub_18DEDD524(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_18E10B67C(uint64_t a1, uint64_t a2, void *lpsrc, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!lpsrc
    || (double v13 = (double *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EDD02A78, (const struct __class_type_info *)&unk_1EDD05FE8, 0)) == 0)
  {
    LOWORD(v77) = 12;
    LOBYTE(v72) = 4;
    double v30 = MEMORY[0x30] + (double)MEMORY[0x28];
LABEL_22:
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v77, (unsigned __int8 *)&v72, "time,%.3lf,h-function failure on line %d: %s() %s", a4, a5, a6, a7, a8, SLOBYTE(v30));
    return 0xFFFFFFFFLL;
  }
  double v14 = v13;
  unsigned int v16 = *(_DWORD *)(a1 + 8);
  unsigned int v15 = *(_DWORD *)(a1 + 12);
  if (v16 <= v15) {
    int v17 = *(_DWORD *)(a1 + 12);
  }
  else {
    int v17 = *(_DWORD *)(a1 + 8);
  }
  if (!v16
    || !v15
    || v17 != 8
    || ((v19 = *(_DWORD *)(a2 + 8), unsigned int v18 = *(_DWORD *)(a2 + 12), v19 <= v18)
      ? (int v20 = *(_DWORD *)(a2 + 12))
      : (int v20 = *(_DWORD *)(a2 + 8)),
        !v19 || !v18 || v20 != 1))
  {
    LOWORD(v77) = 12;
    LOBYTE(v72) = 4;
    double v30 = v13[6] + (double)*((uint64_t *)v13 + 5);
    goto LABEL_22;
  }
  if (v13[7] <= 0.0)
  {
    LOWORD(v77) = 12;
    LOBYTE(v72) = 4;
    double v30 = v13[6] + (double)*((uint64_t *)v13 + 5);
    goto LABEL_22;
  }
  uint64_t v92 = *((void *)v13 + 7);
  uint64_t v89 = 0x100000006;
  uint64_t v87 = &unk_1EDD19728;
  uint64_t v90 = &v91;
  long long v88 = xmmword_18E1FD770;
  sub_18DFE2CC8((uint64_t)&v87, 0.0);
  uint64_t v21 = 0;
  uint64_t v84 = 0x100000006;
  long long v83 = xmmword_18E1FD770;
  long long v82 = &unk_1EDD19728;
  uint64_t v85 = &v86;
  uint64_t v79 = 0x600000006;
  double v77 = &unk_1EDD197B8;
  long long v78 = xmmword_18E1F8570;
  uint64_t v80 = &v81;
  uint64_t v74 = 0x600000006;
  long long v73 = xmmword_18E1F8570;
  long long v72 = &unk_1EDD197B8;
  uint64_t v75 = &v76;
  do
  {
    *((_DWORD *)&v56 + v21) = v21;
    ++v21;
  }
  while (v21 != 6);
  uint64_t v68 = 0x100000006;
  uint64_t v66 = &unk_1EDD19758;
  double v69 = &v70;
  long long v67 = xmmword_18E1FD770;
  long long v70 = v56;
  uint64_t v71 = v57;
  uint64_t v22 = *(void *)(a1 + 32);
  sub_18E1132EC((uint64_t)v65, v22, (uint64_t)&v66);
  sub_18E1132EC((uint64_t)&v52, v22, (uint64_t)&v66);
  if (sub_18E06C950((uint64_t)&v52, (uint64_t)&v87, &v92, (uint64_t)&v82, (uint64_t)&v77, (uint64_t)&v72, v23, v24))
  {
    LOWORD(v52) = 12;
    LOBYTE(v47) = 4;
    double v46 = v14[6] + (double)*((uint64_t *)v14 + 5);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v52, (unsigned __int8 *)&v47, "time,%.3lf,h-function failure on line %d: %s() %s", v25, v26, v27, v28, v29, SLOBYTE(v46));
    return 0xFFFFFFFFLL;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EB4049E8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EB4049E8))
  {
    uint64_t v54 = 0x300000001;
    uint64_t v52 = &unk_1EDD18258;
    uint64_t v55 = &v56;
    long long v53 = xmmword_18E1F8560;
    *(void *)&long long v56 = 0x100000000;
    DWORD2(v56) = 2;
    sub_18DFEC63C((uint64_t)&v52, (uint64_t)&unk_1EB404A90);
    __cxa_atexit((void (*)(void *))sub_18DFE2E9C, &unk_1EB404A90, &dword_18DEDB000);
    __cxa_guard_release(&qword_1EB4049E8);
  }
  uint64_t v49 = 0x600000006;
  int v47 = &unk_1EDD197B8;
  int v50 = (double *)v51;
  long long v48 = xmmword_18E1F8570;
  sub_18DFE2CC8((uint64_t)&v47, 0.0);
  int v32 = 0;
  int v33 = HIDWORD(v48) + 1;
  uint64_t v34 = 6;
  uint64_t v35 = v50;
  do
  {
    v35[v32] = 1.0;
    v32 += v33;
    --v34;
  }
  while (v34);
  uint64_t v54 = 0x600000006;
  long long v53 = xmmword_18E1F8570;
  uint64_t v52 = &unk_1EDD197B8;
  uint64_t v55 = &v56;
  sub_18DFE2AA8((uint64_t)&v47, (uint64_t)&v77, (uint64_t)&v52);
  sub_18E115428((uint64_t)&v58, (uint64_t)&v52);
  sub_18E115700((uint64_t)v64, (uint64_t)&v58);
  uint64_t v49 = 0x100000003;
  int v47 = &unk_1EDD18D98;
  long long v48 = xmmword_18E1F6F60;
  int v50 = (double *)v51;
  sub_18DFE2B44((uint64_t)v64, (uint64_t)v65, (uint64_t)&v47);
  double v37 = *v50;
  double v36 = v50[1];
  double v38 = v50[2];
  double v39 = sqrt(v36 * v36 + v37 * v37 + v38 * v38);
  *(void *)&long long v40 = 0x100000001;
  *((void *)&v40 + 1) = 0x100000001;
  *(_OWORD *)(a4 + 8) = v40;
  **(double **)(a4 + 32) = v39 + **(double **)(a2 + 32);
  uint64_t v60 = 0x300000001;
  long long v59 = xmmword_18E1F8560;
  uint64_t v58 = &unk_1EDD18228;
  uint64_t v61 = &v62;
  if (fabs(v39) <= 0.000000015)
  {
    if (v37 <= 0.0)
    {
      double v41 = -0.577350269;
      if (v37 >= 0.0) {
        double v41 = 0.0;
      }
    }
    else
    {
      double v41 = 0.577350269;
    }
    *(double *)v62.i64 = v41;
    if (v36 <= 0.0)
    {
      double v42 = -0.577350269;
      if (v36 >= 0.0) {
        double v42 = 0.0;
      }
    }
    else
    {
      double v42 = 0.577350269;
    }
    *(double *)&v62.i64[1] = v42;
    if (v38 <= 0.0)
    {
      double v43 = -0.577350269;
      if (v38 >= 0.0) {
        double v43 = 0.0;
      }
    }
    else
    {
      double v43 = 0.577350269;
    }
    double v63 = v43;
    if (fabs(v37) < 2.22044605e-16 && fabs(v36) < 2.22044605e-16 && fabs(v38) < 2.22044605e-16)
    {
      int64x2_t v62 = vdupq_n_s64(0x3FE279A74590331CuLL);
      double v63 = 0.577350269;
    }
  }
  else
  {
    *(double *)v62.i64 = v37 / v39;
    *(double *)&v62.i64[1] = v36 / v39;
    double v63 = v38 / v39;
  }
  uint64_t v54 = 0x600000001;
  long long v53 = xmmword_18E1FD840;
  uint64_t v52 = &unk_1EDD18348;
  uint64_t v55 = &v56;
  sub_18DFE2B44((uint64_t)&v58, (uint64_t)v64, (uint64_t)&v52);
  sub_18DFE2F24(a5, (uint64_t)&v52);
  uint64_t result = 0;
  *(_OWORD *)(a5 + 8) = xmmword_18E215AC0;
  uint64_t v44 = *(void *)(a5 + 32);
  *(void *)(v44 + 48) = 0;
  *(void *)(v44 + 56) = 0;
  *(void *)&long long v45 = 0x100000001;
  *((void *)&v45 + 1) = 0x100000001;
  *(_OWORD *)(a6 + 8) = v45;
  **(void **)(a6 + 32) = 0x3FF0000000000000;
  return result;
}

void sub_18E10BE44(_Unwind_Exception *a1)
{
}

uint64_t sub_18E10BE70(uint64_t a1)
{
  *(void *)a1 = &unk_1EDD0A4E8;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

uint64_t raven::RavenConvergenceEstimator::HandleEvent(raven::RavenConvergenceEstimator *this, const raven::PositionEvent *a2)
{
  v115[9] = *MEMORY[0x1E4F143B8];
  if (!*((unsigned char *)this + 57)) {
    return 0xFFFFFFFFLL;
  }
  if (!*((unsigned char *)this + 58)) {
    return 0;
  }
  BOOL IsPositionMeasurementUsable = raven::RavenEstimator::IsPositionMeasurementUsable(this, (uint64_t)a2);
  if (!IsPositionMeasurementUsable)
  {
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)IsPositionMeasurementUsable) <= 1)
    {
      LOWORD(v109) = 12;
      LOBYTE(v104) = 1;
      *(void *)&long long v83 = (*(uint64_t (**)(const raven::PositionEvent *))(*(void *)a2 + 16))(a2);
      *((void *)&v83 + 1) = v19;
      cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)&v83, "WiFi position measurement not used in non-dense urban fitness case");
      if (*((char *)this + 2511) >= 0) {
        LOBYTE(v25) = (_BYTE)this - 72;
      }
      else {
        uint64_t v25 = *((void *)this + 311);
      }
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v109, (unsigned __int8 *)&v104, "%s", v20, v21, v22, v23, v24, v25);
    }
    return 0;
  }
  long long v109 = &unk_1EDD137C0;
  memcpy(v110, (char *)a2 + 8, sizeof(v110));
  uint64_t v106 = 0x300000003;
  long long v105 = xmmword_18E1F0010;
  long long v104 = &unk_1EDD18EE8;
  uint64_t v107 = &v108;
  if (!sub_18E10C944((uint64_t)&v109, (uint64_t)&v104)) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v100 = 0x100000003;
  long long v99 = xmmword_18E1F6F60;
  uint64_t v98 = &unk_1EDD18D98;
  uint64_t v101 = &v102;
  long long v102 = *(_OWORD *)((char *)&v110[17] + 8);
  uint64_t v103 = *((void *)&v110[18] + 1);
  long long v5 = v110[6];
  long long v97 = v110[6];
  sub_18E06BF24(&v93, 24);
  unsigned __int8 v93 = (uint64_t (**)(void **))&unk_1EDD15368;
  long long v96 = v97;
  int v6 = LOBYTE(v110[12]);
  if (LOBYTE(v110[12]) == 14)
  {
    if ((*(unsigned int (**)(raven::RavenConvergenceEstimator *))(*(void *)this + 144))(this))
    {
      sub_18E0B6E40((uint64_t)this + 2640, (uint64_t)v91);
      uint64_t v88 = 0x100000003;
      long long v87 = xmmword_18E1F6F60;
      uint64_t v86 = &unk_1EDD18D98;
      uint64_t v89 = v90;
      v90[0] = *v92;
      v90[1] = v92[1];
      uint64_t v90[2] = v92[2];
      sub_18E0B6EF0((uint64_t)this + 2640, (uint64_t)&v83);
      uint64_t v113 = 0x300000003;
      __int16 v111 = (void (*)(uint64_t))&unk_1EDD18EE8;
      long long v112 = xmmword_18E1F0010;
      uint64_t v114 = v115;
      v115[0] = *(void *)__p.__r_.__value_.__r.__words[2];
      int v7 = (void *)(__p.__r_.__value_.__r.__words[2] + 8 * SHIDWORD(__p.__r_.__value_.__r.__words[0]));
      v115[3] = *v7;
      v115[6] = *(void *)(__p.__r_.__value_.__r.__words[2] + 16 * SHIDWORD(__p.__r_.__value_.__r.__words[0]));
      v115[1] = *v7;
      v115[4] = v7[1];
      std::string::size_type v8 = __p.__r_.__value_.__r.__words[2] + 16 * HIDWORD(__p.__r_.__value_.__r.__words[0]);
      v115[7] = *(void *)(v8 + 8);
      v115[2] = *(void *)(__p.__r_.__value_.__r.__words[2] + 16 * SHIDWORD(__p.__r_.__value_.__r.__words[0]));
      v115[5] = *(void *)(v8 + 8);
      v115[8] = *(void *)(v8 + 16);
      double v82 = 1.0;
      BOOL ShouldInflatePositionStateUncertaintyForVL = raven::RavenEstimator::ShouldInflatePositionStateUncertaintyForVL((char *)this, (uint64_t)&v98, (uint64_t)&v104, (uint64_t)&v86, (uint64_t)&v111, &v82);
      if (ShouldInflatePositionStateUncertaintyForVL)
      {
        if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)ShouldInflatePositionStateUncertaintyForVL) <= 1)
        {
          __int16 v81 = 12;
          unsigned __int8 v80 = 1;
          long long v77 = v110[0];
          char v10 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)&v77, "kVLF Inflate Position State Uncertainty, sf,%.3lf", v82);
          if (*((char *)this + 2511) >= 0) {
            LOBYTE(v16) = v10;
          }
          else {
            uint64_t v16 = *((void *)this + 311);
          }
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v81, &v80, "%s", v11, v12, v13, v14, v15, v16);
        }
        raven::RavenConvergenceEstimator::InflatePositionUncertainty(this, v82);
      }
      sub_18E06BF24(&v77, 31);
      *(void *)&long long v77 = &unk_1EDD157D8;
      int v94 = DWORD2(v77);
      std::string::operator=(&v95, &v78);
      long long v96 = v79;
      *(void *)&long long v77 = &unk_1EDD0A4E8;
      if ((SHIBYTE(v78.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_29;
      }
      int v17 = (void *)v78.__r_.__value_.__r.__words[0];
      goto LABEL_28;
    }
    int v6 = LOBYTE(v110[12]);
  }
  if (v6 != 15) {
    goto LABEL_30;
  }
  sub_18E06BF24(&v83, 30);
  *(void *)&long long v83 = &unk_1EDD157B0;
  int v94 = DWORD2(v83);
  std::string::operator=(&v95, &__p);
  long long v96 = v85;
  *(void *)&long long v83 = &unk_1EDD0A4E8;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    int v17 = (void *)__p.__r_.__value_.__r.__words[0];
LABEL_28:
    operator delete(v17);
  }
LABEL_29:
  long long v96 = v97;
LABEL_30:
  if ((v105 & 0x80000000) != 0) {
    __assert_rtn("Zeros", "cnmatrix.h", 3098, "nr >= 0");
  }
  __p.__r_.__value_.__l.__size_ = 0x100000003;
  *(void *)&long long v83 = &unk_1EDD18D98;
  __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&v85;
  *((void *)&v83 + 1) = v105 | 0x100000000;
  LODWORD(__p.__r_.__value_.__l.__data_) = v105;
  HIDWORD(__p.__r_.__value_.__r.__words[0]) = v105;
  uint64_t v27 = (cnprint::CNPrinter *)sub_18DFE2CC8((uint64_t)&v83, 0.0);
  if (*((unsigned char *)this + 8336))
  {
    if (*((_DWORD *)this + 3568) == 174)
    {
      LOWORD(v111) = 2;
      v91[0] = 2;
      double v73 = *((double *)&v5 + 1) + (double)(uint64_t)v5;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v111, v91, "MeasurementAccumulator::AddMeasurement() failed - Out of space,t_meas,%.3lf", v28, v29, v30, v31, v32, SLOBYTE(v73));
    }
    else if (*((unsigned char *)this + 8337))
    {
      if (cnprint::CNPrinter::GetLogLevel(v27) <= 1)
      {
        LOWORD(v111) = 2;
        v91[0] = 1;
        double v75 = *((double *)&v5 + 1) + (double)(uint64_t)v5;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v111, v91, "MeasurementAccumulator::AddMeasurement() failed - Locked,t_meas,%.3lf", v38, v39, v40, v41, v42, SLOBYTE(v75));
      }
    }
    else
    {
      BOOL v43 = sub_18DEE4CB8((double *)&v97, (double *)this + 1043);
      if (v43)
      {
        if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v43) <= 1)
        {
          LOWORD(v111) = 2;
          v91[0] = 1;
          double v76 = *((double *)&v97 + 1) + (double)(uint64_t)v97;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v111, v91, "MeasurementAccumulator::AddMeasurement() failed - Measurement too old,t_meas,%.3lf,t_start,%.3lf", v44, v45, v46, v47, v48, SLOBYTE(v76));
        }
      }
      else
      {
        __int16 v111 = 0;
        *(void *)&long long v112 = 0;
        sub_18E115BF0(&v111, (uint64_t)&v93);
        uint64_t v49 = sub_18E06C110((uint64_t *)this + 1047, &v111);
        sub_18E067C60((uint64_t (**)(void, void, void, void, void))&v111);
        uint64_t v50 = *((int *)this + 3568);
        uint64_t v51 = (v50 + 1);
        if (*((void *)this + 1049) == v51)
        {
          *((_DWORD *)this + 3568) = v51;
          *((_DWORD *)this + 2102) = v51;
          *((_DWORD *)this + 2103) = 1;
          *((_DWORD *)this + 2104) = v51;
          *((_DWORD *)this + 2105) = v51;
          *((_DWORD *)this + 2808) = v51;
          *((_DWORD *)this + 2809) = 1;
          *((_DWORD *)this + 2810) = v51;
          *((_DWORD *)this + 2811) = v51;
          *((_DWORD *)this + 2992) = v51;
          *((_DWORD *)this + 2993) = 1;
          *((_DWORD *)this + 2994) = v51;
          *((_DWORD *)this + 2995) = v51;
          *((_DWORD *)this + 3350) = v51;
          *((_DWORD *)this + 3351) = 1;
          *((_DWORD *)this + 3352) = v51;
          *((_DWORD *)this + 3353) = v51;
          *((_DWORD *)this + 3362) = v51;
          *((_DWORD *)this + 3363) = 1;
          *((_DWORD *)this + 3364) = v51;
          *((_DWORD *)this + 3365) = v51;
          *((_DWORD *)this + 3546) = v51;
          *((_DWORD *)this + 3547) = 1;
          *((_DWORD *)this + 3548) = v51;
          *((_DWORD *)this + 3549) = v51;
          *((_DWORD *)this + 3558) = v51;
          *((_DWORD *)this + 3559) = 1;
          *((_DWORD *)this + 3560) = v51;
          *((_DWORD *)this + 3561) = v51;
          *((_DWORD *)this + 3572) = v51;
          *((_DWORD *)this + 3573) = 1;
          *((_DWORD *)this + 3574) = v51;
          *((_DWORD *)this + 3575) = v51;
          *((_DWORD *)this + 3930) = v51;
          *((_DWORD *)this + 3931) = 1;
          *((_DWORD *)this + 3932) = v51;
          *((_DWORD *)this + 3933) = v51;
          *(_OWORD *)(*((void *)this + 1054) + 16 * v50) = v97;
          if (v99 <= DWORD1(v99)) {
            int v52 = DWORD1(v99);
          }
          else {
            int v52 = v99;
          }
          if (DWORD1(v99)) {
            BOOL v53 = v99 == 0;
          }
          else {
            BOOL v53 = 1;
          }
          if (v53) {
            int v54 = 0;
          }
          else {
            int v54 = v52;
          }
          *(_DWORD *)(*((void *)this + 1407) + 4 * v50) = v54;
          sub_18DFE2F24(*((void *)this + 1678) + (v50 << 6), (uint64_t)&v98);
          if (DWORD2(v83) <= HIDWORD(v83)) {
            int v55 = HIDWORD(v83);
          }
          else {
            int v55 = DWORD2(v83);
          }
          if (HIDWORD(v83)) {
            BOOL v56 = DWORD2(v83) == 0;
          }
          else {
            BOOL v56 = 1;
          }
          if (v56) {
            int v57 = 0;
          }
          else {
            int v57 = v55;
          }
          *(_DWORD *)(*((void *)this + 1684) + 4 * v50) = v57;
          sub_18DFE2F24(*((void *)this + 1776) + (v50 << 6), (uint64_t)&v83);
          __n128 v58 = sub_18DFE2F24(*((void *)this + 1782) + 112 * (int)v50, (uint64_t)&v104);
          *(void *)(*((void *)this + 1789) + 8 * v50) = sub_18E10C9D8;
          if (*v49) {
            uint64_t v59 = ((uint64_t (*)(uint64_t, void *, void, void *, void *, __n128))*v49)(3, v49, 0, &unk_1EDD05BA8, &std::__any_imp::__unique_typeinfo<raven::h_PositionArgs_RavenConvergence>::__id, v58);
          }
          else {
            uint64_t v59 = 0;
          }
          uint64_t v18 = 0;
          *(void *)(*((void *)this + 1968) + 8 * v50) = v59;
          goto LABEL_68;
        }
        LOWORD(v111) = 2;
        v91[0] = 4;
        char v60 = v93[2]((void **)&v93);
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v111, v91, "MeasurementAccumulator::AddMeasurement() failed - allocation failed,meas_type,%d,t_meas,%.3lf", v61, v62, v63, v64, v65, v60);
      }
    }
  }
  else if (cnprint::CNPrinter::GetLogLevel(v27) <= 1)
  {
    LOWORD(v111) = 2;
    v91[0] = 1;
    double v74 = *((double *)&v5 + 1) + (double)(uint64_t)v5;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v111, v91, "MeasurementAccumulator::AddMeasurement() failed - Not initialized,t_meas,%.3lf", v33, v34, v35, v36, v37, SLOBYTE(v74));
  }
  LOWORD(v111) = 12;
  v91[0] = 4;
  long long v83 = v110[0];
  char v66 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)&v83, "Could not add measurement - position, src,%d", LOBYTE(v110[12]));
  if (*((char *)this + 2511) >= 0) {
    LOBYTE(v72) = v66;
  }
  else {
    uint64_t v72 = *((void *)this + 311);
  }
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v111, v91, "%s", v67, v68, v69, v70, v71, v72);
  uint64_t v18 = 0xFFFFFFFFLL;
LABEL_68:
  unsigned __int8 v93 = (uint64_t (**)(void **))&unk_1EDD0A4E8;
  if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v95.__r_.__value_.__l.__data_);
  }
  return v18;
}

void sub_18E10C858(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_18DEDD524(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_18E10C944(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 280) || (uint64_t result = sub_18E0B99D0(a1), result))
  {
    *(_OWORD *)(a2 + 8) = xmmword_18E1F0010;
    long long v5 = *(void **)(a2 + 32);
    *long long v5 = *(void *)(a1 + 312);
    v5[3] = *(void *)(a1 + 320);
    v5[6] = *(void *)(a1 + 328);
    v5[1] = *(void *)(a1 + 320);
    v5[4] = *(void *)(a1 + 336);
    v5[7] = *(void *)(a1 + 344);
    v5[2] = *(void *)(a1 + 328);
    v5[5] = *(void *)(a1 + 344);
    v5[8] = *(void *)(a1 + 352);
    return 1;
  }
  return result;
}

uint64_t sub_18E10C9D8(uint64_t a1, uint64_t a2, void *lpsrc, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (lpsrc
    && (uint64_t v13 = (double *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EDD02A78, (const struct __class_type_info *)&unk_1EDD05BA8, 0)) != 0)
  {
    unsigned int v15 = *(_DWORD *)(a1 + 8);
    unsigned int v14 = *(_DWORD *)(a1 + 12);
    if (v15 <= v14) {
      int v16 = *(_DWORD *)(a1 + 12);
    }
    else {
      int v16 = *(_DWORD *)(a1 + 8);
    }
    if (v15 && v14 && v16 == 8)
    {
      unsigned int v18 = *(_DWORD *)(a2 + 8);
      unsigned int v17 = *(_DWORD *)(a2 + 12);
      int v19 = v18 <= v17 ? *(_DWORD *)(a2 + 12) : *(_DWORD *)(a2 + 8);
      if (v18 && v17 && v19 == 3)
      {
        *(_OWORD *)(a4 + 8) = xmmword_18E1F6F60;
        uint64_t v20 = *(double **)(a1 + 32);
        uint64_t v21 = *(double **)(a2 + 32);
        uint64_t v22 = *(double **)(a4 + 32);
        *uint64_t v22 = *v20 + *v21;
        v22[1] = v20[1] + v21[1];
        v22[2] = v20[2] + v21[2];
        uint64_t v31 = 0x800000003;
        uint64_t v29 = &unk_1EDD18FA8;
        uint64_t v32 = v33;
        long long v30 = xmmword_18E215AE0;
        sub_18DFE2CC8((uint64_t)&v29, 0.0);
        sub_18DFE2F24(a5, (uint64_t)&v29);
        uint64_t v23 = *(void **)(a5 + 32);
        *uint64_t v23 = 0x3FF0000000000000;
        int v24 = *(_DWORD *)(a5 + 20);
        v23[v24 + 1] = 0x3FF0000000000000;
        v23[2 * v24 + 2] = 0x3FF0000000000000;
        uint64_t v31 = 0x300000003;
        uint64_t v29 = &unk_1EDD18EE8;
        uint64_t v32 = v33;
        long long v30 = xmmword_18E1F0010;
        sub_18DFE2CC8((uint64_t)&v29, 0.0);
        int v25 = HIDWORD(v30) + 1;
        uint64_t v26 = v32;
        *uint64_t v32 = 0x3FF0000000000000;
        v26[v25] = 0x3FF0000000000000;
        v26[2 * v25] = 0x3FF0000000000000;
        sub_18DFE2F24(a6, (uint64_t)&v29);
        return 0;
      }
    }
    LOWORD(v29) = 12;
    unsigned __int8 v34 = 4;
    double v28 = v13[6] + (double)*((uint64_t *)v13 + 5);
  }
  else
  {
    LOWORD(v29) = 12;
    unsigned __int8 v34 = 4;
    double v28 = MEMORY[0x30] + (double)MEMORY[0x28];
  }
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v29, &v34, "time,%.3lf,h-function failure on line %d: %s() %s", a4, a5, a6, a7, a8, SLOBYTE(v28));
  return 0xFFFFFFFFLL;
}

void raven::RavenConvergenceEstimator::InflatePositionUncertainty(raven::RavenConvergenceEstimator *this, double a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EB4049C0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EB4049C0))
  {
    uint64_t v14 = 0x300000001;
    *(void *)uint64_t v13 = &unk_1EDD18258;
    unsigned int v15 = &v16;
    *(_OWORD *)&v13[8] = xmmword_18E1F8560;
    uint64_t v16 = 0x100000000;
    int v17 = 2;
    sub_18DFEC63C((uint64_t)v13, (uint64_t)&unk_1EB404A20);
    __cxa_atexit((void (*)(void *))sub_18DFE2E9C, &unk_1EB404A20, &dword_18DEDB000);
    __cxa_guard_release(&qword_1EB4049C0);
  }
  sub_18E11730C((uint64_t)v13, (uint64_t)&unk_1EB404A20);
  sub_18DEDE7B0(__p, "InflatePositionUncertainty");
  raven::RavenConvergenceEstimator::InflateUncertainties((uint64_t)this);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  LOWORD(__p[0]) = 12;
  unsigned __int8 v10 = 2;
  *(_OWORD *)uint64_t v13 = *((_OWORD *)this + 5);
  char v3 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)v13, "Inflating estimator variance of position states.");
  if (*((char *)this + 2511) >= 0) {
    LOBYTE(v9) = v3;
  }
  else {
    uint64_t v9 = *((void *)this + 311);
  }
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, &v10, "%s", v4, v5, v6, v7, v8, v9);
}

void sub_18E10CDF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
}

uint64_t sub_18E10CE2C(uint64_t a1)
{
  *(void *)a1 = &unk_1EDD0A4E8;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

uint64_t sub_18E10CE7C(uint64_t a1)
{
  *(void *)a1 = &unk_1EDD0A4E8;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

uint64_t sub_18E10CECC(uint64_t a1)
{
  *(void *)a1 = &unk_1EDD0A4E8;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

uint64_t raven::RavenConvergenceEstimator::HandleEvent(raven::RavenConvergenceEstimator *this, const raven::RavenSolutionEvent *a2)
{
  if (!*((unsigned char *)this + 57)) {
    return 0xFFFFFFFFLL;
  }
  if (*((unsigned char *)a2 + 209) != 2) {
    return 0;
  }
  if (!*((unsigned char *)a2 + 208)) {
    return 0;
  }
  if (*((unsigned char *)this + 58)) {
    return 0;
  }
  if (!*((unsigned char *)a2 + 1464)) {
    return 0;
  }
  v40[0] = 0;
  v40[1] = 0;
  uint64_t v42 = 0x800000008;
  v40[10] = &unk_1EDD19DE8;
  long long v41 = xmmword_18E1FD750;
  BOOL v43 = &v44;
  uint64_t v37 = 0x300000003;
  long long v36 = xmmword_18E1F0010;
  uint64_t v35 = &unk_1EDD18EE8;
  uint64_t v38 = &v39;
  if (!sub_18E10D288((uint64_t)a2 + 1168, (uint64_t)&v35)) {
    return 0;
  }
  double v5 = *(double *)(*((void *)this + 146) + 1272);
  uint64_t v27 = 0x300000003;
  std::string __p = &unk_1EDD18EE8;
  double v28 = &v29;
  long long v26 = xmmword_18E1F0010;
  double v6 = 0.0;
  sub_18DFE2CC8((uint64_t)&__p, 0.0);
  int v7 = HIDWORD(v26) + 1;
  uint64_t v8 = v28;
  uint64_t *v28 = 0x3FF0000000000000;
  v8[v7] = 0x3FF0000000000000;
  v8[2 * v7] = 0x3FF0000000000000;
  v9.f64[0] = v5 * v5;
  uint64_t v32 = 0x300000003;
  long long v31 = xmmword_18E1F0010;
  long long v30 = &unk_1EDD18EE8;
  uint64_t v33 = &v34;
  sub_18E06E238((uint64_t)&__p, (uint64_t)&v30, v9);
  double v10 = 0.0;
  double v11 = 0.0;
  if (!*((unsigned char *)a2 + 1544)
    || (double v6 = *((double *)a2 + 194),
        double v10 = *((double *)a2 + 195),
        double v11 = *((double *)a2 + 196),
        uint64_t result = sub_18DFF61B0((uint64_t)a2 + 1168, (uint64_t)&v30),
        result))
  {
    char v12 = (double *)*((void *)this + 146);
    float64_t v13 = 1.0;
    if (*((unsigned char *)a2 + 209) != 2) {
      float64_t v13 = v12[315];
    }
    sub_18E0FC390((uint64_t)v40, *((void *)a2 + 146), *((void *)a2 + 147), (uint64_t)&v35, (uint64_t)&v30, *((double *)a2 + 184), *((double *)a2 + 185), *((double *)a2 + 186), v6, v10, v11, v12[157], v12[158], v13);
    uint64_t result = (*(uint64_t (**)(raven::RavenConvergenceEstimator *, void *))(*(void *)this + 128))(this, v40);
    if (!result)
    {
      __int16 v24 = 12;
      unsigned __int8 v23 = 3;
      v22[0] = (*(uint64_t (**)(const raven::RavenSolutionEvent *))(*(void *)a2 + 16))(a2);
      v22[1] = v14;
      sub_18E0FB470((char *)a2 + 208, &__p);
      if (v26 >= 0) {
        p_p = (const char *)&__p;
      }
      else {
        p_p = (const char *)__p;
      }
      cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)v22, "Estimator initialized from %s solution with validity time %.3lf", p_p, *((double *)a2 + 147) + (double)*((uint64_t *)a2 + 146));
      if (*((char *)this + 2511) >= 0) {
        LOBYTE(v21) = (_BYTE)this - 72;
      }
      else {
        uint64_t v21 = *((void *)this + 311);
      }
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v24, &v23, "%s", v16, v17, v18, v19, v20, v21);
      if (SHIBYTE(v26) < 0) {
        operator delete(__p);
      }
      return 0;
    }
  }
  return result;
}

void sub_18E10D26C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_18E10D288(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 296);
  if (*(unsigned char *)(a1 + 296))
  {
    if (*(_DWORD *)(a2 + 8) == 3 && *(_DWORD *)(a2 + 12) == 3)
    {
      int v4 = *(_DWORD *)(a2 + 20);
    }
    else
    {
      *(_OWORD *)(a2 + 8) = xmmword_18E1F0010;
      int v4 = 3;
    }
    double v5 = *(void **)(a2 + 32);
    *double v5 = *(void *)(a1 + 328);
    double v6 = &v5[v4];
    *double v6 = *(void *)(a1 + 336);
    v5[2 * v4] = *(void *)(a1 + 344);
    v5[1] = *(void *)(a1 + 336);
    v6[1] = *(void *)(a1 + 352);
    int v7 = &v5[2 * v4];
    v7[1] = *(void *)(a1 + 360);
    v5[2] = *(void *)(a1 + 344);
    v6[2] = *(void *)(a1 + 360);
    v7[2] = *(void *)(a1 + 368);
  }
  return v2 != 0;
}

uint64_t sub_18E10D324(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8 = *(_DWORD *)(a1 + 8);
  unsigned int v9 = *(_DWORD *)(a1 + 12);
  if (v8 <= v9) {
    int v10 = *(_DWORD *)(a1 + 12);
  }
  else {
    int v10 = *(_DWORD *)(a1 + 8);
  }
  if (v8) {
    BOOL v11 = v9 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  BOOL v12 = !v11 && v10 == 8;
  if (v12
    && ((unsigned int v13 = *(_DWORD *)(a2 + 8), v14 = *(_DWORD *)(a2 + 12), v13 <= v14)
      ? (int v15 = *(_DWORD *)(a2 + 12))
      : (int v15 = *(_DWORD *)(a2 + 8)),
        v13 ? (BOOL v16 = v14 == 0) : (BOOL v16 = 1),
        !v16 ? (BOOL v17 = v15 == 1) : (BOOL v17 = 0),
        v17))
  {
    uint64_t v22 = *(double **)(a1 + 32);
    double v24 = v22[3];
    double v23 = v22[4];
    double v25 = v22[5];
    double v26 = sqrt(v23 * v23 + v24 * v24 + v25 * v25);
    *(void *)&long long v27 = 0x100000001;
    *((void *)&v27 + 1) = 0x100000001;
    *(_OWORD *)(a4 + 8) = v27;
    **(double **)(a4 + 32) = v26 + **(double **)(a2 + 32);
    uint64_t v34 = 0x800000001;
    uint64_t v32 = &unk_1EDD18408;
    uint64_t v35 = v36;
    long long v33 = xmmword_18E215AC0;
    sub_18DFE2CC8((uint64_t)&v32, 0.0);
    sub_18DFE2F24(a5, (uint64_t)&v32);
    uint64_t v28 = *(int *)(a5 + 20);
    uint64_t v29 = *(void *)(a5 + 32);
    if (fabs(v26) <= 0.000000015)
    {
      *(void *)(v29 + 24 * v28) = 0x3FE279A745904047;
      *(void *)(v29 + 32 * v28) = 0x3FE279A745904047;
      double v30 = 0.577350269;
    }
    else
    {
      *(double *)(v29 + 24 * v28) = v24 / v26;
      *(double *)(v29 + 32 * v28) = v23 / v26;
      double v30 = v25 / v26;
    }
    *(double *)(v29 + 40 * v28) = v30;
    uint64_t v34 = 0x100000001;
    uint64_t v32 = &unk_1EDD18048;
    uint64_t v35 = v36;
    *(void *)&long long v31 = 0x100000001;
    *((void *)&v31 + 1) = 0x100000001;
    long long v33 = v31;
    sub_18DFE2CC8((uint64_t)&v32, 0.0);
    *uint64_t v35 = 0x3FF0000000000000;
    sub_18DFE2F24(a6, (uint64_t)&v32);
    return 0;
  }
  else
  {
    LOWORD(v32) = 12;
    unsigned __int8 v37 = 4;
    double v18 = *(double *)(a3 + 48) + (double)*(uint64_t *)(a3 + 40);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v32, &v37, "time,%.3lf,h-function failure on line %d: %s() %s", a4, a5, a6, a7, a8, SLOBYTE(v18));
    return 0xFFFFFFFFLL;
  }
}

uint64_t sub_18E10D554(uint64_t a1)
{
  *(void *)a1 = &unk_1EDD0A4E8;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

uint64_t raven::RavenConvergenceEstimator::HandleTimeMarkEvent(raven::RavenConvergenceEstimator *this, const raven::TimeMarkEvent *a2)
{
  long long v2 = *(_OWORD *)((char *)a2 + 8);
  *(_OWORD *)((char *)this + 152) = *(_OWORD *)((char *)a2 + 24);
  *(_OWORD *)((char *)this + 136) = v2;
  long long v3 = *(_OWORD *)((char *)a2 + 40);
  long long v4 = *(_OWORD *)((char *)a2 + 56);
  long long v5 = *(_OWORD *)((char *)a2 + 72);
  *(_OWORD *)((char *)this + 216) = *(_OWORD *)((char *)a2 + 88);
  *(_OWORD *)((char *)this + 200) = v5;
  *(_OWORD *)((char *)this + 184) = v4;
  *(_OWORD *)((char *)this + 168) = v3;
  if (!*((unsigned char *)this + 57)) {
    return 32;
  }
  if (!*((unsigned char *)this + 58)) {
    return 0;
  }
  uint64_t v8 = (*(uint64_t (**)(const raven::TimeMarkEvent *))(*(void *)a2 + 16))(a2);
  double v10 = v9;
  v64[0] = v8;
  *(double *)&v64[1] = v9;
  v58[0] = *((__n128 *)this + 5);
  BOOL v12 = (cnprint::CNPrinter *)CNTimeSpan::operator-((uint64_t)v64, v58, (int8x16_t)v58[0], v11);
  double v15 = v14 + (double)(uint64_t)v12;
  if (v15 >= 0.0)
  {
    uint64_t v27 = *((void *)this + 146);
    v13.i64[0] = *(void *)(v27 + 872);
    unsigned int v28 = vcvtpd_s64_f64(v15 / *(double *)v13.i64);
    *(_OWORD *)((char *)this + 328) = 0u;
    *(_OWORD *)((char *)this + 344) = 0u;
    *(_OWORD *)((char *)this + 360) = 0u;
    *(_OWORD *)((char *)this + 376) = 0u;
    *(_OWORD *)((char *)this + 392) = 0u;
    *(_OWORD *)((char *)this + 408) = 0u;
    *(_OWORD *)((char *)this + 424) = 0u;
    *(_OWORD *)((char *)this + 440) = 0u;
    *(_OWORD *)((char *)this + 456) = 0u;
    *(_OWORD *)((char *)this + 472) = 0u;
    *(_OWORD *)((char *)this + 488) = 0u;
    *(_OWORD *)((char *)this + 504) = 0u;
    *(_OWORD *)((char *)this + 520) = 0u;
    *(_OWORD *)((char *)this + 536) = 0u;
    *(_OWORD *)((char *)this + 552) = 0u;
    *(_OWORD *)((char *)this + 568) = 0u;
    *(_OWORD *)((char *)this + 584) = 0u;
    *(_OWORD *)((char *)this + 600) = 0u;
    *(_OWORD *)((char *)this + 616) = 0u;
    *(_OWORD *)((char *)this + 632) = 0u;
    *(_OWORD *)((char *)this + 648) = 0u;
    *(_OWORD *)((char *)this + 664) = 0u;
    *(_OWORD *)((char *)this + 680) = 0u;
    *(_OWORD *)((char *)this + 696) = 0u;
    *(_OWORD *)((char *)this + 708) = 0u;
    unint64_t v29 = *(void *)(v27 + 872);
    v63[0] = 0;
    v63[1] = 0;
    CNTimeSpan::SetTimeSpan(v63, 0, (int8x16_t)v29, v13);
    v30.i64[0] = *(void *)(v27 + 880);
    v62[0] = 0;
    v62[1] = 0;
    CNTimeSpan::SetTimeSpan(v62, 0, v30, v31);
    uint64_t v26 = 0;
    BOOL v33 = __OFSUB__(v28, 1);
    int v34 = v28 - 1;
    if (v34 < 0 == v33)
    {
      if (v8) {
        BOOL v35 = 1;
      }
      else {
        BOOL v35 = (*(void *)&v10 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
      }
      char v36 = v35;
      __n128 v55 = (__n128)vdupq_n_s64(0x7FF8000000000000uLL);
      while (1)
      {
        if (((int8x16_t v61 = *((int8x16_t *)this + 5),
               v60[0] = CNTimeSpan::operator+((uint64_t)&v61, v63, v61, v32),
               v60[1] = v37,
               (uint64_t v40 = CNTimeSpan::operator+((uint64_t)v60, v62, v38, v39)) != 0)
           || (*(void *)&v41 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
          && (v36 & 1) != 0)
        {
          BOOL v43 = v40 == v8 ? v10 <= v41 : v40 > v8;
        }
        else
        {
          BOOL v43 = v10 <= v41;
        }
        uint64_t v44 = (int8x16_t *)(v43 ? v64 : v60);
        int8x16_t v59 = *v44;
        v58[0] = 0uLL;
        *(__n128 *)((char *)&v58[1] + 8) = v55;
        *(__n128 *)((char *)&v58[2] + 8) = v55;
        BOOL EstimatorPredictAndUpdateArguments = raven::RavenConvergenceEstimator::GetEstimatorPredictAndUpdateArguments((uint64_t)this, (uint64_t)&v61, &v59, (uint64_t)v58, v55.n128_f64[0], v42);
        if (!EstimatorPredictAndUpdateArguments) {
          break;
        }
        uint64_t v56 = raven::RavenConvergenceEstimator::PredictAndUpdate((uint64_t)this, v58);
        v26 |= v56;
        if (sub_18E056F48(&v56)) {
          return v26;
        }
        if (v34) {
          char v46 = v43;
        }
        else {
          char v46 = 1;
        }
        --v34;
        if (v46) {
          goto LABEL_42;
        }
      }
      if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)EstimatorPredictAndUpdateArguments) <= 1)
      {
        LOWORD(v56) = 12;
        unsigned __int8 v57 = 1;
        char v47 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)v64, "Could not get predict and update arguments");
        if (*((char *)this + 2511) >= 0) {
          LOBYTE(v53) = v47;
        }
        else {
          uint64_t v53 = *((void *)this + 311);
        }
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v56, &v57, "%s", v48, v49, v50, v51, v52, v53);
      }
    }
LABEL_42:
    raven::RavenEstimator::StoreHistoricalSolution(this);
  }
  else
  {
    if (cnprint::CNPrinter::GetLogLevel(v12) <= 1)
    {
      LOWORD(v63[0]) = 12;
      LOBYTE(v62[0]) = 1;
      v58[0].n128_u64[0] = (*(uint64_t (**)(const raven::TimeMarkEvent *))(*(void *)a2 + 16))(a2);
      v58[0].n128_u64[1] = v16;
      double v17 = *((double *)this + 11) + (double)*((uint64_t *)this + 10);
      uint64_t v18 = (*(uint64_t (**)(const raven::TimeMarkEvent *))(*(void *)a2 + 16))(a2);
      cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)v58, "Estimator time is greater than event time,%.3lf > %.3lf", v17, v19 + (double)v18);
      if (*((char *)this + 2511) >= 0) {
        LOBYTE(v25) = (_BYTE)this - 72;
      }
      else {
        uint64_t v25 = *((void *)this + 311);
      }
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v63, (unsigned __int8 *)v62, "%s", v20, v21, v22, v23, v24, v25);
    }
    return 64;
  }
  return v26;
}

uint64_t raven::RavenConvergenceEstimator::PredictAndUpdate(uint64_t a1, __n128 *a2)
{
  if (!*(unsigned char *)(a1 + 58)) {
    return 32;
  }
  uint64_t v3 = a1 + 8336;
  int8x16_t v157 = *(int8x16_t *)a2;
  double v4 = a2[1].n128_f64[0];
  if (v4 < 0.0)
  {
    long long v5 = (__n128 *)(a1 + 80);
    sub_18E111AE0(a1 + 8336);
    *(unsigned char *)uint64_t v3 = 0;
    sub_18E059804(v3, v5, v6, v7, v8, v9, v10, v11);
    return 64;
  }
  if (v4 <= 0.0) {
    return 0;
  }
  if (!sub_18DEE8C5C((double *)v157.i64, (double *)(a1 + 8344)))
  {
    int8x16_t v21 = v157;
    *(int8x16_t *)(a1 + 8360) = v157;
    uint64_t v22 = CNTimeSpan::operator-(a1 + 8360, (void *)(a1 + 8344), v21, v18);
    uint64_t v25 = *(unsigned int *)(a1 + 14272);
    if ((int)v25 >= 1)
    {
      uint64_t v26 = 0;
      *(double *)v24.i64 = (double)v22;
      double v27 = v23 + (double)v22;
      unsigned int v28 = *(_OWORD **)(a1 + 8432);
      while (1)
      {
        *(_OWORD *)float64x2_t v153 = *v28;
        *(double *)v24.i64 = (double)CNTimeSpan::operator-((uint64_t)v153, (void *)(a1 + 8344), *(int8x16_t *)v153, v24);
        double v30 = (v29 + *(double *)v24.i64) / v27;
        if (v30 < 0.0) {
          break;
        }
        *(double *)(*(void *)(a1 + 11992) + v26) = v30;
        v26 += 8;
        ++v28;
        if (8 * v25 == v26) {
          goto LABEL_13;
        }
      }
      LOWORD(v148) = 2;
      LOBYTE(v143) = 2;
      double v19 = (cnprint::CNPrinter *)&v148;
      uint64_t v20 = (unsigned __int8 *)&v143;
      goto LABEL_56;
    }
LABEL_13:
    *(_DWORD *)(v3 + 11904) = 87;
    *(_OWORD *)(v3 + 10248) = xmmword_18E1FD660;
    *(_OWORD *)(v3 + 8816) = xmmword_18E1FD660;
    *(_OWORD *)(v3 + 10640) = xmmword_18E1FD660;
    *(_OWORD *)(v3 + 11376) = xmmword_18E1FD660;
    *(_OWORD *)(v3 + 11816) = xmmword_18E1FD660;
    *(_OWORD *)(v3 + 11424) = xmmword_18E1FD660;
    *(_OWORD *)(v3 + 11864) = xmmword_18E1FD660;
    *(_OWORD *)(v3 + 11920) = xmmword_18E1FD660;
    *(_OWORD *)(v3 + 12656) = xmmword_18E1FD660;
    *(void *)&v153[16] = 0;
    *(void *)&v153[8] = 0;
    *(void *)float64x2_t v153 = &v153[8];
    if ((int)v25 < 1)
    {
      int v32 = 0;
      goto LABEL_62;
    }
    uint64_t v31 = 0;
    int v114 = 0;
    int v115 = 0;
    int v32 = 0;
    while (1)
    {
      if (*(double *)(*(void *)(a1 + 11992) + 8 * v31) <= 1.0)
      {
        ++v114;
        int v33 = *(_DWORD *)(*(void *)(a1 + 11256) + 4 * v31);
        int v34 = v33 + v115;
        if (v32 > 86 || v34 >= 88)
        {
          uint64_t v45 = *(unsigned char **)v153;
          if (*(unsigned char **)v153 == &v153[8]) {
            goto LABEL_74;
          }
          char v46 = 0;
          int v47 = -1;
          do
          {
            if (*((_DWORD *)v45 + 10) > v47)
            {
              char v46 = (uint64_t *)*((void *)v45 + 4);
              int v47 = *((_DWORD *)v45 + 10);
            }
            uint64_t v48 = (void *)*((void *)v45 + 1);
            if (v48)
            {
              do
              {
                uint64_t v49 = v48;
                uint64_t v48 = (void *)*v48;
              }
              while (v48);
            }
            else
            {
              do
              {
                uint64_t v49 = (unsigned char *)*((void *)v45 + 2);
                BOOL v50 = *(void *)v49 == (void)v45;
                uint64_t v45 = v49;
              }
              while (!v50);
            }
            uint64_t v45 = v49;
          }
          while (v49 != &v153[8]);
          long long v148 = v46;
          if (!v46)
          {
LABEL_74:
            LOWORD(v143) = 2;
            LOBYTE(v136) = 4;
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v143, (unsigned __int8 *)&v136, "MeasurementAccumulator.LockAccumulator() most_common_measurement_type == nullptr", v13, v14, v15, v16, v17, v112);
            goto LABEL_60;
          }
          if (*(uint64_t **)(*(void *)(a1 + 14312) + 8 * v31) == v46) {
            goto LABEL_49;
          }
          int v35 = v32 - 1;
          if (v32 < 1)
          {
LABEL_59:
            LOWORD(v143) = 2;
            LOBYTE(v136) = 4;
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v143, (unsigned __int8 *)&v136, "MeasurementAccumulator.LockAccumulator() found_idx == false", v13, v14, v15, v16, v17, v112);
LABEL_60:
            sub_18DF064FC(*(void **)&v153[8]);
            goto LABEL_57;
          }
          LODWORD(v51) = v32;
          while (1)
          {
            uint64_t v51 = (v51 - 1);
            if (*(uint64_t **)(*(void *)(a1 + 20280) + 8 * v51) == v46) {
              break;
            }
            if ((int)v51 <= 0) {
              goto LABEL_59;
            }
          }
          if (v34 - *(_DWORD *)(*(void *)(a1 + 18608) + 4 * v51) > 87) {
            goto LABEL_49;
          }
          uint64_t v52 = sub_18E080188((uint64_t **)v153, (unint64_t)v46, &v148);
          --*((_DWORD *)v52 + 10);
          v115 -= *(_DWORD *)(*(void *)(a1 + 18608) + 4 * v51);
          int v32 = v51;
        }
        else
        {
          int v35 = v32;
        }
        *(_OWORD *)(*(void *)(a1 + 17176) + 16 * v32) = *(_OWORD *)(*(void *)(a1 + 8432) + 16 * v31);
        *(_DWORD *)(*(void *)(a1 + 18608) + 4 * v32) = v33;
        *(void *)(*(void *)(a1 + 19000) + 8 * v32) = *(void *)(*(void *)(a1 + 11992) + 8 * v31);
        sub_18DFE2F24(*(void *)(a1 + 19736) + ((uint64_t)v32 << 6), *(void *)(a1 + 13424) + (v31 << 6));
        *(_DWORD *)(*(void *)(a1 + 19784) + 4 * v32) = *(_DWORD *)(*(void *)(a1 + 13472) + 4 * v31);
        sub_18DFE2F24(*(void *)(a1 + 20176) + ((uint64_t)v32 << 6), *(void *)(a1 + 14208) + (v31 << 6));
        sub_18DFE2F24(*(void *)(a1 + 20224) + 112 * v32, *(void *)(a1 + 14256) + 112 * v31);
        *(void *)(*(void *)(a1 + 20280) + 8 * v32) = *(void *)(*(void *)(a1 + 14312) + 8 * v31);
        *(void *)(*(void *)(a1 + 21016) + 8 * v32) = *(void *)(*(void *)(a1 + 15744) + 8 * v31);
        char v36 = (uint64_t **)(*(void *)(a1 + 14312) + 8 * v31);
        uint64_t v37 = *(void *)&v153[8];
        int8x16_t v38 = *v36;
        if (!*(void *)&v153[8]) {
          goto LABEL_29;
        }
        int8x16_t v39 = (uint64_t *)&v153[8];
        do
        {
          uint64_t v40 = (uint64_t *)v37;
          double v41 = v39;
          unint64_t v42 = *(void *)(v37 + 32);
          BOOL v43 = (uint64_t *)(v37 + 8);
          if (v42 >= (unint64_t)v38)
          {
            BOOL v43 = v40;
            int8x16_t v39 = v40;
          }
          uint64_t v37 = *v43;
        }
        while (v37);
        if (v39 != (uint64_t *)&v153[8]
          && (v42 >= (unint64_t)v38 ? (uint64_t v44 = v40) : (uint64_t v44 = v41), (unint64_t)v38 >= v44[4]))
        {
          if (v42 < (unint64_t)v38) {
            uint64_t v40 = v41;
          }
          ++*((_DWORD *)v40 + 10);
        }
        else
        {
LABEL_29:
          *((_DWORD *)sub_18E080188((uint64_t **)v153, (unint64_t)v38, v36) + 10) = 1;
        }
        int v32 = v35 + 1;
        v115 += v33;
        LODWORD(v25) = *(_DWORD *)(a1 + 14272);
      }
LABEL_49:
      if (++v31 >= (int)v25)
      {
        if (v114 > v32)
        {
          LOWORD(v148) = 2;
          LOBYTE(v143) = 2;
          double v113 = *(double *)&v157.i64[1] + (double)v157.i64[0];
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v148, (unsigned __int8 *)&v143, "t,%.3lf,WARNING: MeasurementAccumulator.LockAccumulator() truncating measurements,nh,%d,eligible,%d,num_truncated,%d", v13, v14, v15, v16, v17, SLOBYTE(v113));
        }
LABEL_62:
        *(_DWORD *)(v3 + 11904) = v32;
        *(_DWORD *)(v3 + 8816) = v32;
        *(_DWORD *)(v3 + 8820) = 1;
        *(_DWORD *)(v3 + 8824) = v32;
        *(_DWORD *)(v3 + 8828) = v32;
        *(_DWORD *)(v3 + 10248) = v32;
        *(_DWORD *)(v3 + 10252) = 1;
        *(_DWORD *)(v3 + 10256) = v32;
        *(_DWORD *)(v3 + 10260) = v32;
        *(_DWORD *)(v3 + 10640) = v32;
        *(_DWORD *)(v3 + 10644) = 1;
        *(_DWORD *)(v3 + 10648) = v32;
        *(_DWORD *)(v3 + 10652) = v32;
        *(_DWORD *)(v3 + 11376) = v32;
        *(_DWORD *)(v3 + 11380) = 1;
        *(_DWORD *)(v3 + 11384) = v32;
        *(_DWORD *)(v3 + 11388) = v32;
        *(_DWORD *)(v3 + 11424) = v32;
        *(_DWORD *)(v3 + 11428) = 1;
        *(_DWORD *)(v3 + 11432) = v32;
        *(_DWORD *)(v3 + 11436) = v32;
        *(_DWORD *)(v3 + 11816) = v32;
        *(_DWORD *)(v3 + 11820) = 1;
        *(_DWORD *)(v3 + 11824) = v32;
        *(_DWORD *)(v3 + 11828) = v32;
        *(_DWORD *)(v3 + 11864) = v32;
        *(_DWORD *)(v3 + 11868) = 1;
        *(_DWORD *)(v3 + 11872) = v32;
        *(_DWORD *)(v3 + 11876) = v32;
        *(_DWORD *)(v3 + 11920) = v32;
        *(_DWORD *)(v3 + 11924) = 1;
        *(_DWORD *)(v3 + 11928) = v32;
        *(_DWORD *)(v3 + 11932) = v32;
        *(_DWORD *)(v3 + 12656) = v32;
        *(_DWORD *)(v3 + 12660) = 1;
        *(_DWORD *)(v3 + 12664) = v32;
        *(_DWORD *)(v3 + 12668) = v32;
        *(unsigned char *)(v3 + 1) = 1;
        sub_18DF064FC(*(void **)&v153[8]);
        if (!cnprint::CNPrinter::GetLogLevel(v60))
        {
          *(_WORD *)float64x2_t v153 = 12;
          LOBYTE(v148) = 0;
          double v68 = *(double *)&v157.i64[1] + (double)v157.i64[0];
          int v69 = sub_18E05B808(v3, v61, v62, v63, v64, v65, v66, v67);
          cnprint::CNLogFormatter::FormatGeneral((const void **)(a1 + 2488), "Predict,%.2lf,dt,%.3lf,meas_types,%d", v68, v4, v69);
          if (*(char *)(a1 + 2511) >= 0) {
            LOBYTE(v75) = a1 - 72;
          }
          else {
            uint64_t v75 = *(void *)(a1 + 2488);
          }
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)v153, (unsigned __int8 *)&v148, "%s", v70, v71, v72, v73, v74, v75);
        }
        uint64_t v154 = 0x800000008;
        *(_OWORD *)&v153[8] = xmmword_18E1FD750;
        *(void *)float64x2_t v153 = &unk_1EDD19DE8;
        uint64_t v155 = &v156;
        if (sub_18E103340(a1))
        {
          sub_18E111AE0(v3);
          *(unsigned char *)uint64_t v3 = 0;
          sub_18E059804(v3, (__n128 *)(a1 + 80), v83, v84, v85, v86, v87, v88);
          return 256;
        }
        uint64_t v150 = 0x200000002;
        long long v149 = xmmword_18E1FD1B0;
        long long v148 = (uint64_t *)&unk_1EDD18BE8;
        long long v151 = &v152;
        long long v152 = xmmword_18E1FD790;
        uint64_t v145 = 0x100000002;
        long long v144 = xmmword_18E1FD1A0;
        float64x2_t v143 = &unk_1EDD18A68;
        long long v146 = v147;
        v147[0] = sub_18E03E654;
        v147[1] = sub_18E03E8E0;
        double v141 = v4;
        double v142 = v4;
        uint64_t v138 = 0x100000002;
        long long v137 = xmmword_18E1FD1A0;
        long long v136 = &unk_1EDD18AF8;
        char v139 = v140;
        v140[0] = &v142;
        v140[1] = &v141;
        uint64_t v133 = 0x100000002;
        long long v132 = xmmword_18E1FD1A0;
        v131[2] = &unk_1EDD18B58;
        int v134 = &v135;
        uint64_t v135 = 0x200000006;
        uint64_t v129 = 0x100000002;
        long long v128 = xmmword_18E1FD1A0;
        v127[1] = &unk_1EDD18A98;
        long long v130 = v131;
        v131[0] = sub_18E110DBC;
        v131[1] = sub_18E11121C;
        double v126 = v4;
        *(double *)unsigned int v127 = v4;
        uint64_t v123 = 0x100000002;
        *(void *)&v121[1] = &unk_1EDD18AF8;
        long long v122 = xmmword_18E1FD1A0;
        int v124 = v125;
        v125[0] = v127;
        v125[1] = &v126;
        v121[0] = v4;
        if (!*(unsigned char *)(v3 + 1))
        {
          sub_18E110D78((unsigned char *)v3, (__n128 *)(a1 + 80));
          return 512;
        }
        int v89 = sub_18E05B808(v3, v76, v77, v78, v79, v80, v81, v82);
        uint64_t v90 = a1 + 2640;
        if (v89) {
          sub_18E11162C(v90, (uint64_t)v153, a1 + 18968, a1 + 19704, a1 + 20192, (uint64_t)&v148, (uint64_t)&v143, (uint64_t)&v136, a1 + 20248);
        }
        unsigned int v91 = sub_18E103D24(v90);
        uint64_t v12 = 2;
        memset(v120, 0, sizeof(v120));
        sub_18E091534(v120, *(void *)(a1 + 4296), *(void *)(a1 + 4304), (uint64_t)(*(void *)(a1 + 4304) - *(void *)(a1 + 4296)) >> 5);
        memset(v119, 0, sizeof(v119));
        sub_18E091534(v119, *(void *)(a1 + 4272), *(void *)(a1 + 4280), (uint64_t)(*(void *)(a1 + 4280) - *(void *)(a1 + 4272)) >> 5);
        memset(v118, 0, sizeof(v118));
        sub_18E091534(v118, *(void *)(a1 + 4320), *(void *)(a1 + 4328), (uint64_t)(*(void *)(a1 + 4328) - *(void *)(a1 + 4320)) >> 5);
        if (v91 > 0x16) {
          goto LABEL_85;
        }
        if (((1 << v91) & 0x440408) == 0)
        {
          if (((1 << v91) & 0x301) != 0)
          {
            sub_18E05F838(a1 + 8264, v121);
            *(int8x16_t *)(a1 + 80) = v157;
            long long v116 = 0uLL;
            if (!sub_18E05FA94(v3, &v116, v92, v93, v94, v95, v96, v97)) {
              *(_OWORD *)(a1 + 96) = v116;
            }
LABEL_92:
            sub_18E110D78((unsigned char *)v3, (__n128 *)&v157);
            *(void *)&long long v116 = v118;
            sub_18E0694B8((void ***)&v116);
            v118[0] = (void **)v119;
            sub_18E0694B8(v118);
            v119[0] = (void **)v120;
            sub_18E0694B8(v119);
            return v12;
          }
          if (((1 << v91) & 0x300000) != 0)
          {
            LOWORD(v116) = 12;
            unsigned __int8 v117 = 4;
            char v98 = cnprint::CNLogFormatter::FormatGeneral(a1 + 2488, (uint64_t)&v157, "Resetting due to prediction error code %d", v91);
            if (*(char *)(a1 + 2511) >= 0) {
              LOBYTE(v104) = v98;
            }
            else {
              uint64_t v104 = *(void *)(a1 + 2488);
            }
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v116, &v117, "%s", v99, v100, v101, v102, v103, v104);
            uint64_t v12 = 6;
            goto LABEL_92;
          }
LABEL_85:
          uint64_t v12 = 3;
        }
        LOWORD(v116) = 12;
        unsigned __int8 v117 = 4;
        char v105 = cnprint::CNLogFormatter::FormatGeneral(a1 + 2488, (uint64_t)&v157, "Unexpected predict and update return code %d", v91);
        if (*(char *)(a1 + 2511) >= 0) {
          LOBYTE(v111) = v105;
        }
        else {
          uint64_t v111 = *(void *)(a1 + 2488);
        }
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v116, &v117, "%s", v106, v107, v108, v109, v110, v111);
        goto LABEL_92;
      }
    }
  }
  *(_WORD *)float64x2_t v153 = 2;
  LOBYTE(v148) = 4;
  double v19 = (cnprint::CNPrinter *)v153;
  uint64_t v20 = (unsigned __int8 *)&v148;
LABEL_56:
  cnprint::CNPrinter::Print(v19, v20, "WARNING: MeasurementAccumulator.LockAccumulator() called with bad t_end.", v13, v14, v15, v16, v17, v112);
LABEL_57:
  sub_18E111AE0(v3);
  *(unsigned char *)uint64_t v3 = 0;
  sub_18E059804(v3, (__n128 *)(a1 + 80), v53, v54, v55, v56, v57, v58);
  return 128;
}

void sub_18E10E630(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void ****a19, uint64_t a20,uint64_t a21,void ***a22,uint64_t a23,uint64_t a24,void **a25,uint64_t a26,uint64_t a27,char a28)
{
  a19 = &a22;
  sub_18E0694B8((void ***)&a19);
  a22 = &a25;
  sub_18E0694B8((void ***)&a22);
  a25 = (void **)&a28;
  sub_18E0694B8(&a25);
  _Unwind_Resume(a1);
}

uint64_t raven::RavenConvergenceEstimator::HandleEvent(raven::RavenConvergenceEstimator *this, const raven::VelocityEvent *a2)
{
  v88[4] = *(void (**)(uint64_t))MEMORY[0x1E4F143B8];
  if (!*((unsigned char *)this + 57)) {
    return 0xFFFFFFFFLL;
  }
  if (*((unsigned char *)this + 58)) {
    BOOL v4 = *((unsigned char *)a2 + 280) == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4) {
    return 0;
  }
  uint64_t v76 = 0x100000003;
  long long v75 = xmmword_18E1F6F60;
  uint64_t v74 = &unk_1EDD18D98;
  uint64_t v77 = &v78;
  long long v78 = *((_OWORD *)a2 + 18);
  uint64_t v79 = *((void *)a2 + 38);
  uint64_t v70 = 0x300000003;
  double v68 = &unk_1EDD18EE8;
  long long v69 = xmmword_18E1F0010;
  uint64_t v71 = v72;
  uint64_t v6 = *((void *)a2 + 40);
  uint64_t v7 = *((void *)a2 + 41);
  uint64_t v8 = *((void *)a2 + 42);
  v72[0] = *((void *)a2 + 39);
  v72[1] = v6;
  v72[2] = v7;
  v72[3] = v6;
  long long v9 = *(_OWORD *)((char *)a2 + 344);
  v72[4] = v8;
  v72[5] = v9;
  v72[6] = v7;
  long long v73 = v9;
  uint64_t v10 = *((void *)a2 + 13);
  double v11 = *((double *)a2 + 14);
  *(void *)&long long v67 = v10;
  *((double *)&v67 + 1) = v11;
  sub_18E06BF24(v64, 28);
  v64[0] = &unk_1EDD15390;
  long long v66 = v67;
  if ((v69 & 0x80000000) != 0) {
    __assert_rtn("Zeros", "cnmatrix.h", 3098, "nr >= 0");
  }
  uint64_t v84 = 0x100000003;
  uint64_t v80 = &unk_1EDD18D98;
  uint64_t v85 = &v86;
  uint64_t v81 = v69 | 0x100000000;
  int v82 = v69;
  int v83 = v69;
  uint64_t v12 = (cnprint::CNPrinter *)sub_18DFE2CC8((uint64_t)&v80, 0.0);
  if (*((unsigned char *)this + 8336))
  {
    if (*((_DWORD *)this + 3568) == 174)
    {
      LOWORD(v88[0]) = 2;
      unsigned __int8 v87 = 2;
      double v60 = v11 + (double)v10;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v88, &v87, "MeasurementAccumulator::AddMeasurement() failed - Out of space,t_meas,%.3lf", v13, v14, v15, v16, v17, SLOBYTE(v60));
    }
    else if (*((unsigned char *)this + 8337))
    {
      if (cnprint::CNPrinter::GetLogLevel(v12) <= 1)
      {
        LOWORD(v88[0]) = 2;
        unsigned __int8 v87 = 1;
        double v62 = v11 + (double)v10;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v88, &v87, "MeasurementAccumulator::AddMeasurement() failed - Locked,t_meas,%.3lf", v23, v24, v25, v26, v27, SLOBYTE(v62));
      }
    }
    else
    {
      BOOL v28 = sub_18DEE4CB8((double *)&v67, (double *)this + 1043);
      if (v28)
      {
        if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v28) <= 1)
        {
          LOWORD(v88[0]) = 2;
          unsigned __int8 v87 = 1;
          double v63 = *((double *)&v67 + 1) + (double)(uint64_t)v67;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)v88, &v87, "MeasurementAccumulator::AddMeasurement() failed - Measurement too old,t_meas,%.3lf,t_start,%.3lf", v29, v30, v31, v32, v33, SLOBYTE(v63));
        }
      }
      else
      {
        v88[0] = 0;
        v88[1] = 0;
        sub_18E115F98(v88, (uint64_t)v64);
        int v34 = sub_18E06C110((uint64_t *)this + 1047, v88);
        sub_18E067C60((uint64_t (**)(void, void, void, void, void))v88);
        uint64_t v35 = *((int *)this + 3568);
        uint64_t v36 = (v35 + 1);
        if (*((void *)this + 1049) == v36)
        {
          *((_DWORD *)this + 3568) = v36;
          *((_DWORD *)this + 2102) = v36;
          *((_DWORD *)this + 2103) = 1;
          *((_DWORD *)this + 2104) = v36;
          *((_DWORD *)this + 2105) = v36;
          *((_DWORD *)this + 2808) = v36;
          *((_DWORD *)this + 2809) = 1;
          *((_DWORD *)this + 2810) = v36;
          *((_DWORD *)this + 2811) = v36;
          *((_DWORD *)this + 2992) = v36;
          *((_DWORD *)this + 2993) = 1;
          *((_DWORD *)this + 2994) = v36;
          *((_DWORD *)this + 2995) = v36;
          *((_DWORD *)this + 3350) = v36;
          *((_DWORD *)this + 3351) = 1;
          *((_DWORD *)this + 3352) = v36;
          *((_DWORD *)this + 3353) = v36;
          *((_DWORD *)this + 3362) = v36;
          *((_DWORD *)this + 3363) = 1;
          *((_DWORD *)this + 3364) = v36;
          *((_DWORD *)this + 3365) = v36;
          *((_DWORD *)this + 3546) = v36;
          *((_DWORD *)this + 3547) = 1;
          *((_DWORD *)this + 3548) = v36;
          *((_DWORD *)this + 3549) = v36;
          *((_DWORD *)this + 3558) = v36;
          *((_DWORD *)this + 3559) = 1;
          *((_DWORD *)this + 3560) = v36;
          *((_DWORD *)this + 3561) = v36;
          *((_DWORD *)this + 3572) = v36;
          *((_DWORD *)this + 3573) = 1;
          *((_DWORD *)this + 3574) = v36;
          *((_DWORD *)this + 3575) = v36;
          *((_DWORD *)this + 3930) = v36;
          *((_DWORD *)this + 3931) = 1;
          *((_DWORD *)this + 3932) = v36;
          *((_DWORD *)this + 3933) = v36;
          *(_OWORD *)(*((void *)this + 1054) + 16 * v35) = v67;
          if (v75 <= DWORD1(v75)) {
            int v37 = DWORD1(v75);
          }
          else {
            int v37 = v75;
          }
          if (DWORD1(v75)) {
            BOOL v38 = v75 == 0;
          }
          else {
            BOOL v38 = 1;
          }
          if (v38) {
            int v39 = 0;
          }
          else {
            int v39 = v37;
          }
          *(_DWORD *)(*((void *)this + 1407) + 4 * v35) = v39;
          sub_18DFE2F24(*((void *)this + 1678) + (v35 << 6), (uint64_t)&v74);
          if (v81 <= HIDWORD(v81)) {
            int v40 = HIDWORD(v81);
          }
          else {
            int v40 = v81;
          }
          if (HIDWORD(v81)) {
            BOOL v41 = v81 == 0;
          }
          else {
            BOOL v41 = 1;
          }
          if (v41) {
            int v42 = 0;
          }
          else {
            int v42 = v40;
          }
          *(_DWORD *)(*((void *)this + 1684) + 4 * v35) = v42;
          sub_18DFE2F24(*((void *)this + 1776) + (v35 << 6), (uint64_t)&v80);
          __n128 v43 = sub_18DFE2F24(*((void *)this + 1782) + 112 * (int)v35, (uint64_t)&v68);
          *(void *)(*((void *)this + 1789) + 8 * v35) = sub_18E10ED30;
          if (*v34) {
            uint64_t v44 = ((uint64_t (*)(uint64_t, void *, void, void *, void *, __n128))*v34)(3, v34, 0, &unk_1EDD05BC0, &std::__any_imp::__unique_typeinfo<raven::h_VelocityArgs_RavenConvergence>::__id, v43);
          }
          else {
            uint64_t v44 = 0;
          }
          uint64_t v5 = 0;
          *(void *)(*((void *)this + 1968) + 8 * v35) = v44;
          goto LABEL_47;
        }
        LOWORD(v88[0]) = 2;
        unsigned __int8 v87 = 4;
        char v45 = (*(uint64_t (**)(void *))(v64[0] + 16))(v64);
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v88, &v87, "MeasurementAccumulator::AddMeasurement() failed - allocation failed,meas_type,%d,t_meas,%.3lf", v46, v47, v48, v49, v50, v45);
      }
    }
  }
  else if (cnprint::CNPrinter::GetLogLevel(v12) <= 1)
  {
    LOWORD(v88[0]) = 2;
    unsigned __int8 v87 = 1;
    double v61 = v11 + (double)v10;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v88, &v87, "MeasurementAccumulator::AddMeasurement() failed - Not initialized,t_meas,%.3lf", v18, v19, v20, v21, v22, SLOBYTE(v61));
  }
  LOWORD(v88[0]) = 12;
  unsigned __int8 v87 = 4;
  uint64_t v80 = (void *)(*(uint64_t (**)(const raven::VelocityEvent *))(*(void *)a2 + 16))(a2);
  uint64_t v81 = v51;
  char v52 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)&v80, "Could not add measurement - velocity");
  if (*((char *)this + 2511) >= 0) {
    LOBYTE(v58) = v52;
  }
  else {
    uint64_t v58 = *((void *)this + 311);
  }
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)v88, &v87, "%s", v53, v54, v55, v56, v57, v58);
  uint64_t v5 = 0xFFFFFFFFLL;
LABEL_47:
  v64[0] = &unk_1EDD0A4E8;
  if (v65 < 0) {
    operator delete((void *)v64[2]);
  }
  return v5;
}

void sub_18E10ECC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a2) {
    sub_18DEDD524(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_18E10ED30(uint64_t a1, uint64_t a2, void *lpsrc, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (lpsrc
    && (uint64_t v13 = (double *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EDD02A78, (const struct __class_type_info *)&unk_1EDD05BC0, 0)) != 0)
  {
    unsigned int v15 = *(_DWORD *)(a1 + 8);
    unsigned int v14 = *(_DWORD *)(a1 + 12);
    if (v15 <= v14) {
      int v16 = *(_DWORD *)(a1 + 12);
    }
    else {
      int v16 = *(_DWORD *)(a1 + 8);
    }
    if (v15 && v14 && v16 == 8)
    {
      unsigned int v18 = *(_DWORD *)(a2 + 8);
      unsigned int v17 = *(_DWORD *)(a2 + 12);
      int v19 = v18 <= v17 ? *(_DWORD *)(a2 + 12) : *(_DWORD *)(a2 + 8);
      if (v18 && v17 && v19 == 3)
      {
        *(_OWORD *)(a4 + 8) = xmmword_18E1F6F60;
        uint64_t v20 = *(double **)(a1 + 32);
        uint64_t v21 = *(double **)(a2 + 32);
        uint64_t v22 = *(double **)(a4 + 32);
        *uint64_t v22 = v20[3] + *v21;
        v22[1] = v20[4] + v21[1];
        void v22[2] = v20[5] + v21[2];
        uint64_t v31 = 0x800000003;
        uint64_t v29 = &unk_1EDD18FA8;
        uint64_t v32 = v33;
        long long v30 = xmmword_18E215AE0;
        sub_18DFE2CC8((uint64_t)&v29, 0.0);
        sub_18DFE2F24(a5, (uint64_t)&v29);
        int v23 = *(_DWORD *)(a5 + 20);
        uint64_t v24 = *(void *)(a5 + 32);
        *(void *)(v24 + 24 * v23) = 0x3FF0000000000000;
        *(void *)(v24 + 8 * ((4 * v23) | 1)) = 0x3FF0000000000000;
        *(void *)(v24 + 8 * (5 * v23 + 2)) = 0x3FF0000000000000;
        uint64_t v31 = 0x300000003;
        uint64_t v29 = &unk_1EDD18EE8;
        uint64_t v32 = v33;
        long long v30 = xmmword_18E1F0010;
        sub_18DFE2CC8((uint64_t)&v29, 0.0);
        int v25 = HIDWORD(v30) + 1;
        uint64_t v26 = v32;
        *uint64_t v32 = 0x3FF0000000000000;
        v26[v25] = 0x3FF0000000000000;
        v26[2 * v25] = 0x3FF0000000000000;
        sub_18DFE2F24(a6, (uint64_t)&v29);
        return 0;
      }
    }
    LOWORD(v29) = 12;
    unsigned __int8 v34 = 4;
    double v28 = v13[6] + (double)*((uint64_t *)v13 + 5);
  }
  else
  {
    LOWORD(v29) = 12;
    unsigned __int8 v34 = 4;
    double v28 = MEMORY[0x30] + (double)MEMORY[0x28];
  }
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v29, &v34, "time,%.3lf,h-function failure on line %d: %s() %s", a4, a5, a6, a7, a8, SLOBYTE(v28));
  return 0xFFFFFFFFLL;
}

uint64_t sub_18E10EFD4(uint64_t a1)
{
  *(void *)a1 = &unk_1EDD0A4E8;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void raven::RavenConvergenceEstimator::InflateUncertainties(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1F4188790](a1);
  double v4 = v3;
  uint64_t v5 = v1;
  if (v3 < 1.0 || (*(void *)&v3 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    LOWORD(v131) = 12;
    v125[0] = 4;
    *(_OWORD *)long long v136 = *(_OWORD *)(v1 + 80);
    char v50 = cnprint::CNLogFormatter::FormatGeneral(v1 + 2488, (uint64_t)v136, "%s failed, invalid inflation factor, %.6lf.");
LABEL_52:
    if (*(char *)(v5 + 2511) >= 0) {
      LOBYTE(v56) = v50;
    }
    else {
      uint64_t v56 = *(void *)(v5 + 2488);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v131, v125, "%s", v51, v52, v53, v54, v55, v56);
    return;
  }
  uint64_t v6 = v2;
  uint64_t v133 = 0x100000008;
  long long v132 = xmmword_18E1FD760;
  uint64_t v131 = &unk_1EDD19CF8;
  int v134 = (unsigned int *)v135;
  uint64_t v137 = 0x100000008;
  *(_OWORD *)&v136[8] = xmmword_18E1FD760;
  *(void *)long long v136 = &unk_1EDD19D28;
  uint64_t v138 = v139;
  sub_18E07DA54(v2, (uint64_t)&v131, (uint64_t)v136);
  unsigned int v7 = *v134;
  uint64_t v133 = 0x100000008;
  long long v132 = xmmword_18E1FD760;
  uint64_t v131 = &unk_1EDD19CF8;
  int v134 = (unsigned int *)v135;
  uint64_t v137 = 0x100000008;
  *(_OWORD *)&v136[8] = xmmword_18E1FD760;
  *(void *)long long v136 = &unk_1EDD19D28;
  uint64_t v138 = v139;
  sub_18E07DDBC(v6, (uint64_t)&v131, (uint64_t)v136);
  int v8 = *v134;
  if (v7 > 7 || v8 < 0 || v8 >= 8)
  {
    LOWORD(v131) = 12;
    v125[0] = 4;
    *(_OWORD *)long long v136 = *(_OWORD *)(v5 + 80);
    char v50 = cnprint::CNLogFormatter::FormatGeneral(v5 + 2488, (uint64_t)v136, "%s failed, invalid specified states, min state %d, max state %d.");
    goto LABEL_52;
  }
  *(_OWORD *)(v5 + 112) = *(_OWORD *)(v5 + 80);
  unsigned int v9 = *(_DWORD *)(v6 + 8);
  uint64_t v128 = 0x100000008;
  long long v127 = xmmword_18E1FD760;
  double v126 = &unk_1EDD19CC8;
  uint64_t v129 = &v130;
  uint64_t v93 = v5 + 3408;
  uint64_t v92 = v5 + 2648;
  if (*(_DWORD *)(v5 + 4180)) {
    uint64_t v10 = v5 + 3408;
  }
  else {
    uint64_t v10 = v5 + 2648;
  }
  sub_18DFE2F24((uint64_t)&v126, v10);
  sub_18E0B6EF0(v5 + 2640, (uint64_t)v125);
  sub_18E074D00((uint64_t)&v126, v6, (uint64_t)v123);
  int32x4_t v11 = vdupq_lane_s32((int32x2_t)(v9 | 0x100000000), 0);
  v11.i32[1] = 1;
  int32x4_t v124 = v11;
  sub_18E074F68((uint64_t)v125, v6, v6, (uint64_t)&v95);
  uint64_t v105 = 0x800000008;
  uint64_t v103 = &unk_1EDD19DE8;
  long long v104 = xmmword_18E1FD750;
  uint64_t v106 = &v107;
  v136[0] = 0;
  sub_18DFEEFE8((uint64_t)&v95, (uint64_t)&v103, v136);
  uint64_t v110 = 0x800000008;
  uint64_t v108 = &unk_1EDD19DE8;
  long long v109 = xmmword_18E1FD750;
  uint64_t v111 = v112;
  uint64_t v133 = 0x100000008;
  long long v132 = xmmword_18E1FD760;
  uint64_t v131 = &unk_1EDD19CF8;
  int v134 = (unsigned int *)v135;
  uint64_t v137 = 0x100000020;
  *(_OWORD *)&v136[8] = xmmword_18E1FD780;
  *(void *)long long v136 = &unk_1EDD18C78;
  uint64_t v138 = v139;
  sub_18E01BFEC((uint64_t)&v103, (uint64_t)&v131, (uint64_t)v136, (uint64_t)&v108);
  int v12 = DWORD1(v109);
  int v13 = v109;
  uint64_t v115 = 0x800000008;
  double v113 = &unk_1EDD19DE8;
  long long v116 = v117;
  *(void *)&long long v114 = __PAIR64__(v109, DWORD1(v109));
  DWORD2(v114) = v109 * DWORD1(v109);
  HIDWORD(v114) = DWORD1(v109);
  if (DWORD1(v109))
  {
    int v14 = 0;
    int v15 = 0;
    int v16 = HIDWORD(v109);
    unsigned int v17 = v111;
    do
    {
      int v18 = v14;
      int v19 = v15;
      for (int i = v13; i; --i)
      {
        v117[v19] = *(void *)&v17[2 * v18];
        v19 += v12;
        ++v18;
      }
      ++v15;
      v14 += v16;
    }
    while (v15 != v12);
  }
  uint64_t v120 = 0x100000008;
  long long v119 = xmmword_18E1FD760;
  BOOL v118 = &unk_1EDD19CC8;
  uint64_t v121 = v122;
  uint64_t v137 = 0x800000008;
  *(_OWORD *)&v136[8] = xmmword_18E1FD750;
  *(void *)long long v136 = &unk_1EDD19DE8;
  uint64_t v138 = v139;
  uint64_t v133 = 0x800000008;
  long long v132 = xmmword_18E1FD750;
  uint64_t v131 = &unk_1EDD19DE8;
  int v134 = (unsigned int *)v135;
  sub_18E06EA40((uint64_t)&v113, (uint64_t)&v118, (uint64_t)v136, (uint64_t)&v131);
  uint64_t v120 = 0x800000008;
  long long v119 = xmmword_18E1FD750;
  BOOL v118 = &unk_1EDD19DE8;
  uint64_t v121 = v122;
  v21.f64[0] = 1.0 / v4;
  sub_18E06E238((uint64_t)&v131, (uint64_t)&v118, v21);
  LODWORD(v119) = v9;
  DWORD1(v119) = v9;
  DWORD2(v119) = v9 * v9;
  HIDWORD(v119) = v9;
  unsigned int v22 = *(_DWORD *)(v6 + 8);
  unsigned int v23 = *(_DWORD *)(v6 + 12);
  uint64_t v115 = 0x100000008;
  double v113 = &unk_1EDD19CC8;
  long long v114 = xmmword_18E1FD760;
  long long v116 = v117;
  sub_18DFE2B44((uint64_t)&v118, (uint64_t)v123, (uint64_t)&v113);
  if (v22 <= v23) {
    unsigned int v25 = v23;
  }
  else {
    unsigned int v25 = v22;
  }
  if (v23) {
    BOOL v26 = v22 == 0;
  }
  else {
    BOOL v26 = 1;
  }
  if (v26) {
    uint64_t v27 = 0;
  }
  else {
    uint64_t v27 = v25;
  }
  if (!*(_DWORD *)(v5 + 4180))
  {
    sub_18DFE2F24(v93, v92);
    sub_18DFE2F24(v5 + 3512, v5 + 2752);
    *(void *)&double v24 = sub_18DFE2F24(v5 + 4064, v5 + 3304).n128_u64[0];
  }
  *(_DWORD *)(v5 + 4180) = 1;
  if (!*(_DWORD *)(v6 + 8) || !*(_DWORD *)(v6 + 12))
  {
    sub_18DFE2F24(v92, v93);
    sub_18DFE2F24(v5 + 2752, v5 + 3512);
    sub_18DFE2F24(v5 + 3304, v5 + 4064);
    *(_DWORD *)(v5 + 4180) = 1;
    return;
  }
  *(unsigned char *)(v5 + 4176) = 0;
  unsigned int v28 = *(_DWORD *)(v5 + 3416);
  unsigned int v29 = *(_DWORD *)(v5 + 3420);
  if (v28 <= v29) {
    unsigned int v30 = *(_DWORD *)(v5 + 3420);
  }
  else {
    unsigned int v30 = *(_DWORD *)(v5 + 3416);
  }
  if (v29) {
    BOOL v31 = v28 == 0;
  }
  else {
    BOOL v31 = 1;
  }
  if (v31) {
    uint64_t v32 = 0;
  }
  else {
    uint64_t v32 = v30;
  }
  uint64_t v94 = v27;
  if ((int)v27 >= 1)
  {
    uint64_t v33 = 0;
    unsigned __int8 v34 = (const void **)(v5 + 4344);
    do
    {
      int v35 = *(_DWORD *)(*(void *)(v6 + 32) + v33);
      if (v35 < 0 || v35 >= (int)v32)
      {
        *(_WORD *)long long v136 = 2;
        LOBYTE(v131) = 4;
        cnprint::CNLogFormatter::FormatGeneral(v34, "ResetStates(): states must contain valid indices into x, Rxx, and zx.", v24);
        if (*(char *)(v5 + 4367) >= 0) {
          LOBYTE(v41) = v5 - 8;
        }
        else {
          BOOL v41 = *v34;
        }
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v136, (unsigned __int8 *)&v131, "%s", v36, v37, v38, v39, v40, (char)v41);
      }
      v33 += 4;
    }
    while (4 * v94 != v33);
  }
  uint64_t v137 = 0x800000001;
  *(void *)long long v136 = &unk_1EDD18438;
  uint64_t v138 = v139;
  int v42 = v32 - 1;
  if (v32 == 1)
  {
    char v47 = 0;
    *(void *)&long long v57 = 0x100000001;
    *((void *)&v57 + 1) = 0x100000001;
    *(_OWORD *)&v136[8] = v57;
    v139[0] = 0;
    int v48 = 1;
    int v49 = 1;
    uint64_t v43 = v5;
    uint64_t v44 = v5 + 2640;
    uint64_t v45 = v94;
  }
  else
  {
    uint64_t v43 = v5;
    uint64_t v44 = v5 + 2640;
    uint64_t v45 = v94;
    if ((int)v32 <= 0)
    {
      int v48 = 0;
      int v49 = 0;
      *(void *)&v136[8] = 0;
      *(void *)&v136[16] = 0;
      char v47 = 1;
    }
    else
    {
      uint64_t v46 = 0;
      *(_DWORD *)&v136[8] = 1;
      *(_DWORD *)&v136[12] = v32;
      *(_DWORD *)&v136[16] = v32;
      *(_DWORD *)&v136[20] = 1;
      do
      {
        v139[v46] = v46;
        ++v46;
      }
      while (v32 != v46);
      char v47 = 0;
      int v48 = 1;
      int v49 = v32;
    }
  }
  uint64_t v110 = 0x100000008;
  uint64_t v108 = &unk_1EDD19CF8;
  uint64_t v111 = v112;
  *(void *)&long long v109 = __PAIR64__(v48, v49);
  DWORD2(v109) = v49 * v48;
  HIDWORD(v109) = v49;
  if (v49)
  {
    int v58 = 0;
    for (int j = 0; j != v49; ++j)
    {
      if ((v47 & 1) == 0)
      {
        int v60 = 0;
        do
        {
          v112[j + HIDWORD(v109) * v60] = v139[v58 + v60];
          ++v60;
        }
        while (v48 != v60);
      }
      v58 += v48;
    }
  }
  if ((int)v45 >= 1)
  {
    double v61 = *(int **)(v6 + 32);
    uint64_t v62 = v45;
    do
    {
      uint64_t v63 = *v61++;
      v112[v63] = -1;
      --v62;
    }
    while (v62);
  }
  sub_18E075D20((uint64_t)&v103, v32, 1);
  uint64_t v137 = 0x800000001;
  *(void *)long long v136 = &unk_1EDD18438;
  uint64_t v138 = v139;
  if (v45 == 1)
  {
    char v64 = 0;
    *(void *)&long long v65 = 0x100000001;
    *((void *)&v65 + 1) = 0x100000001;
    *(_OWORD *)&v136[8] = v65;
    v139[0] = 0;
    int v66 = 1;
    int v67 = 1;
  }
  else if ((int)v45 <= 0)
  {
    int v66 = 0;
    int v67 = 0;
    *(void *)&v136[8] = 0;
    *(void *)&v136[16] = 0;
    char v64 = 1;
  }
  else
  {
    uint64_t v68 = 0;
    *(_DWORD *)&v136[8] = 1;
    *(_DWORD *)&v136[12] = v45;
    *(_DWORD *)&v136[16] = v45;
    *(_DWORD *)&v136[20] = 1;
    do
    {
      v139[v68] = v68;
      ++v68;
    }
    while (v45 != v68);
    char v64 = 0;
    int v66 = 1;
    int v67 = v45;
  }
  uint64_t v100 = 0x100000008;
  uint64_t v95 = &unk_1EDD19CF8;
  uint64_t v101 = v102;
  int v96 = v67;
  int v97 = v66;
  int v98 = v67 * v66;
  int v99 = v67;
  if (v67)
  {
    int v69 = 0;
    for (int k = 0; k != v67; ++k)
    {
      if ((v64 & 1) == 0)
      {
        int v71 = 0;
        do
        {
          v102[k + v99 * v71] = v139[v69 + v71];
          ++v71;
        }
        while (v66 != v71);
      }
      v69 += v66;
    }
  }
  sub_18E1169C8((uint64_t)v136, (uint64_t)&v103, (uint64_t)&v95);
  sub_18E1162C0((uint64_t)v136, *(_DWORD *)(v6 + 16), *(int **)(v6 + 32));
  int v72 = v32 - v45;
  if ((int)v32 > (int)v45)
  {
    LODWORD(v73) = 0;
    uint64_t v74 = v111;
    long long v75 = v106;
    uint64_t v76 = (int)v45;
    do
    {
      uint64_t v73 = (int)v73;
      do
        int v77 = v74[v73++];
      while (v77 == -1);
      *((_DWORD *)v75 + v76++) = v77;
    }
    while (v76 != (int)v32);
  }
  sub_18E116374(v44, v32, (uint64_t)&v103);
  sub_18E1171C4((uint64_t)v148, (uint64_t)&v95);
  uint64_t v137 = 0x800000001;
  *(void *)long long v136 = &unk_1EDD18438;
  uint64_t v138 = v139;
  if (v42 == v45)
  {
    LOBYTE(v78) = 0;
    *(void *)&long long v79 = 0x100000001;
    *((void *)&v79 + 1) = 0x100000001;
    *(_OWORD *)&v136[8] = v79;
    v139[0] = v45;
    int v80 = 1;
    int v81 = 1;
  }
  else if (v42 - (int)v45 < 0)
  {
    int v80 = 0;
    int v81 = 0;
    *(void *)&v136[8] = 0;
    *(void *)&v136[16] = 0;
    LOBYTE(v78) = 1;
  }
  else
  {
    int v81 = v32 - v45;
    *(_DWORD *)&v136[8] = 1;
    *(_DWORD *)&v136[12] = v32 - v45;
    *(_DWORD *)&v136[16] = v32 - v45;
    *(_DWORD *)&v136[20] = 1;
    int v82 = v139;
    uint64_t v78 = (v32 - v45);
    int v83 = v45;
    do
    {
      *v82++ = v83++;
      --v78;
    }
    while (v78);
    int v80 = 1;
  }
  uint64_t v145 = 0x100000008;
  long long v140 = &unk_1EDD19CF8;
  long long v146 = v147;
  int v141 = v81;
  int v142 = v80;
  int v143 = v81 * v80;
  int v144 = v81;
  if (v81)
  {
    int v84 = 0;
    for (int m = 0; m != v81; ++m)
    {
      if ((v78 & 1) == 0)
      {
        int v86 = 0;
        do
        {
          v147[m + v144 * v86] = v139[v84 + v86];
          ++v86;
        }
        while (v80 != v86);
      }
      v84 += v80;
    }
  }
  sub_18E0758D4((uint64_t)v136, v93, (uint64_t)&v95);
  sub_18E074DA4((uint64_t)v136, (uint64_t)v123);
  sub_18E075B48((uint64_t)v136, v43 + 3512, (uint64_t)v148, (uint64_t)v148);
  sub_18E074E1C((uint64_t)v136, (uint64_t)&v118);
  if ((v45 & 0x80000000) != 0)
  {
    uint64_t v90 = "nr >= 0";
    int v91 = 3098;
    goto LABEL_107;
  }
  if (v72 < 0)
  {
    uint64_t v90 = "nc >= 0";
    int v91 = 3099;
LABEL_107:
    __assert_rtn("Zeros", "cnmatrix.h", v91, v90);
  }
  uint64_t v133 = 0x800000008;
  uint64_t v131 = &unk_1EDD19DE8;
  int v134 = (unsigned int *)v135;
  LODWORD(v132) = v45;
  DWORD1(v132) = v32 - v45;
  DWORD2(v132) = v72 * v45;
  HIDWORD(v132) = v45;
  sub_18DFE2CC8((uint64_t)&v131, 0.0);
  sub_18E075B48((uint64_t)v136, v43 + 3512, (uint64_t)v148, (uint64_t)&v140);
  sub_18E074E1C((uint64_t)v136, (uint64_t)&v131);
  sub_18E0758D4((uint64_t)v136, v43 + 4064, (uint64_t)&v95);
  sub_18E074DA4((uint64_t)v136, (uint64_t)&v113);
  sub_18E075D20((uint64_t)v136, v32, 1);
  if ((int)v32 >= 1)
  {
    uint64_t v87 = 0;
    uint64_t v88 = v106;
    int v89 = v138;
    do
    {
      v89[*((int *)v88 + v87)] = v87;
      ++v87;
    }
    while (v32 != v87);
  }
  sub_18E116374(v44, v32, (uint64_t)v136);
}

uint64_t sub_18E10FDAC(uint64_t a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a2 + 8);
  int v2 = *(_DWORD *)(a2 + 12);
  *(void *)(a1 + 24) = 0x800000008;
  *(void *)a1 = &unk_1EDD19DE8;
  *(_DWORD *)(a1 + 8) = v2;
  *(_DWORD *)(a1 + 12) = v3;
  *(_DWORD *)(a1 + 16) = v3 * v2;
  *(_DWORD *)(a1 + 20) = v2;
  *(void *)(a1 + 32) = a1 + 40;
  return sub_18DFE2C64(a2, a1);
}

void sub_18E10FE14(_Unwind_Exception *a1)
{
  void *v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

void raven::RavenConvergenceEstimator::InflatePositionUncertainty(raven::RavenConvergenceEstimator *this)
{
}

void raven::RavenConvergenceEstimator::InflateVelocityUncertainty(raven::RavenConvergenceEstimator *this, double a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EB4049C8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EB4049C8))
  {
    uint64_t v14 = 0x300000001;
    *(void *)int v13 = &unk_1EDD18258;
    int v15 = &v16;
    *(_OWORD *)&v13[8] = xmmword_18E1F8560;
    uint64_t v16 = 0x400000003;
    int v17 = 5;
    sub_18DFEC63C((uint64_t)v13, (uint64_t)&unk_1EB404A58);
    __cxa_atexit((void (*)(void *))sub_18DFE2E9C, &unk_1EB404A58, &dword_18DEDB000);
    __cxa_guard_release(&qword_1EB4049C8);
  }
  sub_18E11730C((uint64_t)v13, (uint64_t)&unk_1EB404A58);
  sub_18DEDE7B0(__p, "InflateVelocityUncertainty");
  raven::RavenConvergenceEstimator::InflateUncertainties((uint64_t)this);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  LOWORD(__p[0]) = 12;
  unsigned __int8 v10 = 2;
  *(_OWORD *)int v13 = *((_OWORD *)this + 5);
  char v3 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)v13, "Inflating estimator variance of velocity states.");
  if (*((char *)this + 2511) >= 0) {
    LOBYTE(v9) = v3;
  }
  else {
    uint64_t v9 = *((void *)this + 311);
  }
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, &v10, "%s", v4, v5, v6, v7, v8, v9);
}

void sub_18E10FFC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
}

void raven::RavenConvergenceEstimator::InflateVelocityUncertainty(raven::RavenConvergenceEstimator *this)
{
}

void raven::RavenConvergenceEstimator::InflateXOUncertainty(raven::RavenConvergenceEstimator *this, double a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EB4049D0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EB4049D0))
  {
    uint64_t v14 = 0x200000001;
    *(void *)int v13 = &unk_1EDD181F8;
    int v15 = &v16;
    *(_OWORD *)&v13[8] = xmmword_18E1FD740;
    uint64_t v16 = 0x700000006;
    sub_18E059674((uint64_t)v13, (uint64_t)&unk_1EB4049F0);
    __cxa_atexit((void (*)(void *))sub_18E05971C, &unk_1EB4049F0, &dword_18DEDB000);
    __cxa_guard_release(&qword_1EB4049D0);
  }
  sub_18E11730C((uint64_t)v13, (uint64_t)&unk_1EB4049F0);
  sub_18DEDE7B0(__p, "InflateXOUncertainty");
  raven::RavenConvergenceEstimator::InflateUncertainties((uint64_t)this);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  LOWORD(__p[0]) = 12;
  unsigned __int8 v10 = 2;
  *(_OWORD *)int v13 = *((_OWORD *)this + 5);
  char v3 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)v13, "Inflating estimator variance of xo states.");
  if (*((char *)this + 2511) >= 0) {
    LOBYTE(v9) = v3;
  }
  else {
    uint64_t v9 = *((void *)this + 311);
  }
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, &v10, "%s", v4, v5, v6, v7, v8, v9);
}

void sub_18E11017C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
}

void raven::RavenConvergenceEstimator::InflateXOUncertainty(raven::RavenConvergenceEstimator *this)
{
}

uint64_t raven::RavenConvergenceEstimator::Initialize(uint64_t a1, __n128 *a2)
{
  if (!*(unsigned char *)(a1 + 57)) {
    return 0xFFFFFFFFLL;
  }
  if (*(unsigned char *)(a1 + 58))
  {
    v24[0] = 12;
    LOBYTE(v25) = 4;
    char v4 = cnprint::CNLogFormatter::FormatGeneral(a1 + 2488, a1 + 80, "Attempting to initialize an already initialized estimator");
    if (*(char *)(a1 + 2511) >= 0) {
      LOBYTE(v10) = v4;
    }
    else {
      uint64_t v10 = *(void *)(a1 + 2488);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v24, (unsigned __int8 *)&v25, "%s", v5, v6, v7, v8, v9, v10);
  }
  *(__n128 *)(a1 + 64) = *a2;
  *(__n128 *)(a1 + 80) = *a2;
  *(__n128 *)(a1 + 96) = *a2;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  sub_18E059748(a1 + 8336);
  sub_18E059804(a1 + 8336, a2, v11, v12, v13, v14, v15, v16);
  *(void *)(a1 + 312) = 0;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = 0;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(void *)(a1 + 584) = 0;
  *(void *)(a1 + 980) = 0;
  *(_OWORD *)(a1 + 948) = 0u;
  *(_OWORD *)(a1 + 964) = 0u;
  *(_OWORD *)(a1 + 916) = 0u;
  *(_OWORD *)(a1 + 932) = 0u;
  *(_OWORD *)(a1 + 884) = 0u;
  *(_OWORD *)(a1 + 900) = 0u;
  *(_OWORD *)(a1 + 852) = 0u;
  *(_OWORD *)(a1 + 868) = 0u;
  *(_OWORD *)(a1 + 820) = 0u;
  *(_OWORD *)(a1 + 836) = 0u;
  *(_OWORD *)(a1 + 788) = 0u;
  *(_OWORD *)(a1 + 804) = 0u;
  *(_OWORD *)(a1 + 756) = 0u;
  *(_OWORD *)(a1 + 772) = 0u;
  *(_OWORD *)(a1 + 724) = 0u;
  *(_OWORD *)(a1 + 740) = 0u;
  *(void *)(a1 + 320) = 0x7FF8000000000000;
  *(void *)(a1 + 272) = 0;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_DWORD *)(a1 + 720) = 0;
  *(_OWORD *)(a1 + 988) = 0u;
  *(_OWORD *)(a1 + 1004) = 0u;
  *(_OWORD *)(a1 + 1020) = 0u;
  *(_OWORD *)(a1 + 1036) = 0u;
  *(_OWORD *)(a1 + 1052) = 0u;
  *(_OWORD *)(a1 + 1068) = 0u;
  *(_OWORD *)(a1 + 1084) = 0u;
  *(_OWORD *)(a1 + 1100) = 0u;
  *(_DWORD *)(a1 + 1116) = 0;
  uint64_t v27 = 0x100000008;
  unsigned int v25 = &unk_1EDD19CC8;
  unsigned int v28 = &v29;
  long long v26 = xmmword_18E1FD760;
  sub_18DFE2CC8((uint64_t)&v25, 0.0);
  int v17 = v28;
  uint64_t *v28 = a2[1].n128_i64[0];
  v17[1] = a2[1].n128_i64[1];
  double v17[2] = a2[2].n128_i64[0];
  v17[3] = a2[2].n128_i64[1];
  v17[4] = a2[3].n128_i64[0];
  v17[5] = a2[3].n128_i64[1];
  v17[6] = a2[4].n128_i64[0];
  v17[7] = a2[4].n128_i64[1];
  sub_18E0759FC((uint64_t)v24, (uint64_t)&a2[5]);
  uint64_t v21 = 0x100000008;
  uint64_t v19 = (uint64_t)&unk_1EDD19CC8;
  long long v20 = xmmword_18E1FD760;
  unsigned int v22 = &v23;
  sub_18DFE2B44((uint64_t)v24, (uint64_t)&v25, (uint64_t)&v19);
  sub_18E0FC21C(a1 + 2640, (uint64_t)&v25, (uint64_t)v24, (uint64_t)&v19);
  uint64_t v19 = 0x3FE0000000000000;
  uint64_t result = sub_18E06E568(a1 + 8272, (double *)&v19);
  if (result) {
    return 0xFFFFFFFFLL;
  }
  *(unsigned char *)(a1 + 58) = 1;
  return result;
}

uint64_t raven::RavenConvergenceEstimator::IsConsistent(raven::RavenConvergenceEstimator *this)
{
  if (!*((unsigned char *)this + 58)) {
    return 1;
  }
  int v2 = (char *)this + 8264;
  uint64_t v3 = 16;
  if (!*((_DWORD *)this + 2072)) {
    uint64_t v3 = 8;
  }
  if (*(double *)&v2[v3] < *(double *)(*((void *)this + 146) + 1464)) {
    return 1;
  }
  if (cnprint::CNPrinter::GetLogLevel(this) <= 1)
  {
    __int16 v14 = 12;
    unsigned __int8 v13 = 1;
    uint64_t v5 = 16;
    if (!*((_DWORD *)this + 2072)) {
      uint64_t v5 = 8;
    }
    char v6 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)this + 80, "consistency failure,%.1lf > %.1lf", *(double *)&v2[v5], *(double *)(*((void *)this + 146) + 1464));
    if (*((char *)this + 2511) >= 0) {
      LOBYTE(v12) = v6;
    }
    else {
      uint64_t v12 = *((void *)this + 311);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v14, &v13, "%s", v7, v8, v9, v10, v11, v12);
  }
  return 0;
}

uint64_t raven::RavenConvergenceEstimator::IsObservable(raven::RavenConvergenceEstimator *this)
{
  char v1 = *((unsigned char *)this + 58);
  if (v1)
  {
    uint64_t v3 = (char *)this + 4176;
    int v4 = *((unsigned __int8 *)this + 4176);
    if (v4 == 2)
    {
      char v1 = 1;
    }
    else
    {
      if (v4 != 1)
      {
        if (!*((unsigned char *)this + 4176))
        {
          (*(void (**)(void *__return_ptr))(*((void *)this + 330) + 40))(v13);
          uint64_t v30 = 0x800000008;
          unsigned int v28 = &unk_1EDD19DE8;
          long long v29 = xmmword_18E1FD750;
          BOOL v31 = &v32;
          uint64_t v25 = 0x800000008;
          long long v24 = xmmword_18E1FD750;
          uint64_t v23 = &unk_1EDD19DE8;
          long long v26 = &v27;
          uint64_t v20 = 0x100000008;
          long long v19 = xmmword_18E1FD760;
          int v18 = &unk_1EDD19CF8;
          uint64_t v21 = &v22;
          uint64_t v15 = 0x100000650;
          uint64_t v17 = 0;
          v13[82] = &unk_1EDD178F8;
          uint64_t v16 = 0;
          long long v14 = xmmword_18E215AF0;
          sub_18E11756C();
        }
        LOWORD(v28) = 2;
        LOBYTE(v23) = 5;
        unsigned __int8 v5 = cnprint::CNLogFormatter::FormatGeneral((const void **)this + 543, "LeastSquaresEstimator::IsObservable called with unexpected observability state %hhu", v4);
        if (v3[191] >= 0) {
          LOBYTE(v11) = v5;
        }
        else {
          uint64_t v11 = *((void *)this + 543);
        }
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v28, (unsigned __int8 *)&v23, "%s", v6, v7, v8, v9, v10, v11);
      }
      char v1 = 0;
    }
  }
  return v1 & 1;
}

void sub_18E1107C8(_Unwind_Exception *a1)
{
}

uint64_t raven::RavenConvergenceEstimator::IsSane(raven::RavenConvergenceEstimator *this)
{
  uint64_t v140 = *MEMORY[0x1E4F143B8];
  if (!*((unsigned char *)this + 58)) {
    return 0;
  }
  int v2 = (char *)this + 80;
  long long v134 = *((_OWORD *)this + 5);
  uint64_t v131 = 0x100000008;
  uint64_t v129 = &unk_1EDD19CC8;
  long long v130 = xmmword_18E1FD760;
  long long v132 = (double *)&v133;
  if (*((_DWORD *)this + 1045)) {
    uint64_t v3 = (char *)this + 3408;
  }
  else {
    uint64_t v3 = (char *)this + 2648;
  }
  sub_18DFE2F24((uint64_t)&v129, (uint64_t)v3);
  double v5 = v132[3];
  double v6 = v132[4];
  double v7 = v132[5];
  double v8 = sqrt(v6 * v6 + v5 * v5 + v7 * v7);
  if (v8 > *(double *)(*((void *)v2 + 136) + 1376))
  {
    if (cnprint::CNPrinter::GetLogLevel(v4) <= 1)
    {
      __int16 v108 = 12;
      LOBYTE(v48[0]) = 1;
      uint64_t v9 = (uint64_t *)cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)v2, "Sanity failure,speed,%.1lf > %.1lf", v8, *(double *)(*((void *)this + 146) + 1376));
      if (*((char *)this + 2511) >= 0) {
        LOBYTE(v15) = (_BYTE)v9;
      }
      else {
        uint64_t v15 = *v9;
      }
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v108, (unsigned __int8 *)v48, "%s", v10, v11, v12, v13, v14, v15);
    }
    return 0;
  }
  float64x2_t v17 = *(float64x2_t *)v132;
  uint64_t v18 = *((void *)v132 + 2);
  long long v109 = 0u;
  long long v110 = 0u;
  long long v111 = 0u;
  long long v112 = 0u;
  long long v113 = 0u;
  uint64_t v114 = 0;
  uint64_t v115 = 0x7FF8000000000000;
  __int16 v116 = 0;
  long long v124 = 0u;
  long long v125 = 0u;
  long long v126 = 0u;
  long long v127 = 0u;
  uint64_t v128 = 0;
  long long v117 = 0u;
  long long v118 = 0u;
  long long v119 = 0u;
  __int16 v120 = 0;
  float64x2_t v45 = v17;
  int64x2_t v46 = vdupq_n_s64(0x7FF8000000000000uLL);
  *(int64x2_t *)&v121[796] = v46;
  uint64_t v122 = 0;
  uint64_t v123 = 0x7FF8000000000000;
  LOBYTE(v108) = 0;
  bzero(v121, 0x318uLL);
  memset(v48, 0, sizeof(v48));
  uint64_t v49 = 0;
  uint64_t v50 = 0x7FF8000000000000;
  char v51 = 0;
  int64x2_t v52 = v46;
  int64x2_t v53 = v46;
  int64x2_t v54 = v46;
  int64x2_t v55 = v46;
  uint64_t v56 = 0x7FF8000000000000;
  __int16 v57 = 0;
  int64x2_t v58 = v46;
  int64x2_t v59 = v46;
  int64x2_t v60 = v46;
  int64x2_t v61 = v46;
  int64x2_t v62 = v46;
  uint64_t v63 = 0x7FF8000000000000;
  int64x2_t v64 = v46;
  uint64_t v65 = 0x7FF8000000000000;
  char v66 = 0;
  int64x2_t v67 = v46;
  int64x2_t v68 = v46;
  int64x2_t v69 = v46;
  int64x2_t v70 = v46;
  uint64_t v71 = 0x7FF8000000000000;
  char v72 = 0;
  int64x2_t v73 = v46;
  int64x2_t v74 = v46;
  int64x2_t v75 = v46;
  int64x2_t v76 = v46;
  uint64_t v77 = 0x7FF8000000000000;
  char v78 = 0;
  int64x2_t v79 = v46;
  int64x2_t v80 = v46;
  int64x2_t v81 = v46;
  int64x2_t v82 = v46;
  int64x2_t v83 = v46;
  int64x2_t v84 = v46;
  int64x2_t v85 = v46;
  char v86 = 0;
  uint64_t v87 = 0x7FF8000000000000;
  int64x2_t v88 = v46;
  int64x2_t v89 = v46;
  int64x2_t v90 = v46;
  int64x2_t v91 = v46;
  char v92 = 0;
  uint64_t v93 = 0x7FF8000000000000;
  int64x2_t v94 = v46;
  int64x2_t v95 = v46;
  int64x2_t v96 = v46;
  int64x2_t v97 = v46;
  char v98 = 0;
  uint64_t v99 = 0x7FF8000000000000;
  int64x2_t v100 = v46;
  int64x2_t v101 = v46;
  int64x2_t v102 = v46;
  int64x2_t v103 = v46;
  char v104 = 0;
  uint64_t v105 = 0x7FF8000000000000;
  int64x2_t v106 = v46;
  int64x2_t v107 = v46;
  if (!raven::RavenEstimator::GetValidHistoricalSolution((uint64_t)this, &v108, (uint64_t)v48, *(double *)v46.i64, v19)&& HIBYTE(v116) == 2&& v72)
  {
    int8x16_t v21 = (int8x16_t)v48[0];
    v135[0] = v48[0];
    int64x2_t v22 = v73;
    double v23 = *(double *)v74.i64;
    if ((void)v134
      || (v21.i64[0] = *((void *)&v134 + 1), (*((void *)&v134 + 1) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000))
    {
      if (!*(void *)&v135[0])
      {
        v21.i64[0] = *((void *)&v135[0] + 1);
        if ((*((void *)&v135[0] + 1) & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
        {
          v20.i64[0] = *((void *)&v134 + 1);
          if (*((double *)&v134 + 1) <= *((double *)v135 + 1)) {
            goto LABEL_31;
          }
          goto LABEL_24;
        }
      }
      BOOL v24 = (uint64_t)v134 <= *(void *)&v135[0];
      if ((void)v134 != *(void *)&v135[0])
      {
LABEL_23:
        if (v24) {
          goto LABEL_31;
        }
LABEL_24:
        uint64_t v25 = (cnprint::CNPrinter *)CNTimeSpan::operator-((uint64_t)&v134, v135, v21, v20);
        double v27 = sqrt((v6 - *(double *)&v22.i64[1]) * (v6 - *(double *)&v22.i64[1])+ (v5 - *(double *)v22.i64) * (v5 - *(double *)v22.i64)+ (v7 - v23) * (v7 - v23))/ (v26 + (double)(uint64_t)v25);
        if (v27 > *(double *)(*((void *)this + 146) + 1384))
        {
          if (cnprint::CNPrinter::GetLogLevel(v25) <= 1)
          {
            LOWORD(v138.f64[0]) = 12;
            LOBYTE(v136[0]) = 1;
            char v28 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)v2, "Sanity failure,acceleration,%.1lf > %.1lf", v27, *(double *)(*((void *)this + 146) + 1384));
            if (*((char *)this + 2511) >= 0) {
              LOBYTE(v34) = v28;
            }
            else {
              uint64_t v34 = *((void *)this + 311);
            }
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v138, (unsigned __int8 *)v136, "%s", v29, v30, v31, v32, v33, v34);
          }
          return 0;
        }
        goto LABEL_31;
      }
      v21.i64[0] = *((void *)&v134 + 1);
    }
    v20.i64[0] = *((void *)&v135[0] + 1);
    BOOL v24 = *(double *)v21.i64 <= *((double *)v135 + 1);
    goto LABEL_23;
  }
LABEL_31:
  float64x2_t v138 = v45;
  uint64_t v139 = v18;
  int v35 = cnnavigation::ECEFToLLA(&v138, 1, v136, 0, (uint64_t)v135);
  uint64_t result = 0;
  if (!v35)
  {
    double v36 = v137;
    if (v137 <= 18000.0)
    {
      if (v8 <= 600.0) {
        return 1;
      }
      if (cnprint::CNPrinter::GetLogLevel(0) > 1) {
        return 0;
      }
      LOWORD(v135[0]) = 12;
      unsigned __int8 v47 = 1;
      char v44 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)v2, "Sanity failure,speed,%.1lf > %.1lf", v8, 600.0);
      if (*((char *)this + 2511) >= 0) {
        LOBYTE(v43) = v44;
      }
      else {
        uint64_t v43 = *((void *)this + 311);
      }
    }
    else
    {
      if (cnprint::CNPrinter::GetLogLevel(0) > 1) {
        return 0;
      }
      LOWORD(v135[0]) = 12;
      unsigned __int8 v47 = 1;
      char v37 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)v2, "Sanity failure,altitude,%.1lf > %.1lf", v36, 18000.0);
      if (*((char *)this + 2511) >= 0) {
        LOBYTE(v43) = v37;
      }
      else {
        uint64_t v43 = *((void *)this + 311);
      }
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v135, &v47, "%s", v38, v39, v40, v41, v42, v43);
    return 0;
  }
  return result;
}

double sub_18E110D78(unsigned char *a1, __n128 *a2)
{
  sub_18E111AE0((uint64_t)a1);
  *a1 = 0;

  *(void *)&double result = sub_18E059804((uint64_t)a1, a2, v4, v5, v6, v7, v8, v9).n128_u64[0];
  return result;
}

uint64_t sub_18E110DBC(uint64_t a1, uint64_t a2, double *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unsigned int v9 = *(_DWORD *)(a1 + 8);
  unsigned int v10 = *(_DWORD *)(a1 + 12);
  if (v9 <= v10) {
    int v11 = *(_DWORD *)(a1 + 12);
  }
  else {
    int v11 = *(_DWORD *)(a1 + 8);
  }
  if (v9) {
    BOOL v12 = v10 == 0;
  }
  else {
    BOOL v12 = 1;
  }
  BOOL v13 = !v12 && v11 == 6;
  if (!v13
    || ((unsigned int v14 = *(_DWORD *)(a2 + 8), v15 = *(_DWORD *)(a2 + 12), v14 <= v15)
      ? (int v16 = *(_DWORD *)(a2 + 12))
      : (int v16 = *(_DWORD *)(a2 + 8)),
        v14 ? (BOOL v17 = v15 == 0) : (BOOL v17 = 1),
        !v17 ? (BOOL v18 = v16 == 6) : (BOOL v18 = 0),
        !v18))
  {
    LOWORD(v74) = 12;
    LOBYTE(v49) = 4;
    int8x16_t v19 = "in_SixStateNearlyConstantVelocity called with inadequate matrices.";
    int8x16_t v20 = &v49;
LABEL_41:
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v74, (unsigned __int8 *)v20, v19, a4, a5, a6, a7, a8, v43);
    return 0xFFFFFFFFLL;
  }
  double v26 = *a3;
  uint64_t v61 = 0x100000006;
  int64x2_t v59 = &unk_1EDD19728;
  int64x2_t v62 = &v63;
  long long v60 = xmmword_18E1FD770;
  sub_18DFE2CC8((uint64_t)&v59, 0.0);
  uint64_t v56 = 0x100000008;
  long long v55 = xmmword_18E1FD770;
  int64x2_t v54 = &unk_1EDD19CC8;
  __int16 v57 = &v58;
  uint64_t v51 = 0x800000008;
  uint64_t v49 = &unk_1EDD19DE8;
  long long v50 = xmmword_18E1F8570;
  int64x2_t v52 = &v53;
  uint64_t v46 = 0x600000008;
  char v44 = &unk_1EDD19D88;
  long long v45 = xmmword_18E1F8570;
  unsigned __int8 v47 = &v48;
  unsigned int v28 = *(_DWORD *)(a1 + 8);
  unsigned int v27 = *(_DWORD *)(a1 + 12);
  if (v28 <= v27) {
    int v29 = *(_DWORD *)(a1 + 12);
  }
  else {
    int v29 = *(_DWORD *)(a1 + 8);
  }
  if (!v28
    || !v27
    || v29 != 6
    || (v60 <= DWORD1(v60) ? (int v30 = DWORD1(v60)) : (int v30 = v60), !v60 || !DWORD1(v60) || v30 != 6))
  {
    LOWORD(v74) = 12;
    LOBYTE(v69) = 4;
    int8x16_t v19 = "f_SixStateNearlyConstantVelocity called with inadequate matrices.";
    int8x16_t v20 = &v69;
    goto LABEL_41;
  }
  double v31 = v26 * a9;
  uint64_t v71 = 0x600000006;
  int64x2_t v69 = &unk_1EDD197B8;
  char v72 = v73;
  long long v70 = xmmword_18E1F8570;
  sub_18DFE2CC8((uint64_t)&v69, 0.0);
  int v32 = 0;
  int v33 = HIDWORD(v70) + 1;
  uint64_t v34 = 6;
  int v35 = v72;
  do
  {
    *(void *)&v35[8 * v32] = 0x3FF0000000000000;
    v32 += v33;
    --v34;
  }
  while (v34);
  sub_18E0736C8((uint64_t)&v74, (uint64_t)&v69);
  int v36 = HIDWORD(v75);
  char v37 = v77;
  *(double *)&v77[3 * HIDWORD(v75)] = v31;
  *(double *)&v37[(4 * v36) | 1] = v31;
  *(double *)&v37[5 * v36 + 2] = v31;
  uint64_t v66 = 0x100000008;
  long long v65 = xmmword_18E1FD760;
  int64x2_t v64 = &unk_1EDD19CC8;
  int64x2_t v67 = &v68;
  sub_18DFE2B44((uint64_t)&v74, a1, (uint64_t)&v64);
  uint64_t v71 = 0x100000008;
  long long v70 = xmmword_18E1FD760;
  int64x2_t v69 = &unk_1EDD19CC8;
  char v72 = v73;
  sub_18DFEF1F4((uint64_t)&v64, (uint64_t)&v59, (uint64_t)&v69);
  sub_18DFE2F24((uint64_t)&v54, (uint64_t)&v69);
  sub_18DFE2F24((uint64_t)&v49, (uint64_t)&v74);
  uint64_t v71 = 0x600000006;
  int64x2_t v69 = &unk_1EDD197B8;
  char v72 = v73;
  long long v70 = xmmword_18E1F8570;
  sub_18DFE2CC8((uint64_t)&v69, 0.0);
  int v38 = 0;
  int v39 = HIDWORD(v70) + 1;
  uint64_t v40 = 6;
  uint64_t v41 = v72;
  do
  {
    *(void *)&v41[8 * v38] = 0x3FF0000000000000;
    v38 += v39;
    --v40;
  }
  while (v40);
  sub_18DFE2F24((uint64_t)&v44, (uint64_t)&v69);
  sub_18DFE2F24(a4, (uint64_t)&v54);
  sub_18DFE2F24(a5, (uint64_t)&v49);
  uint64_t v76 = 0x600000006;
  int64x2_t v74 = &unk_1EDD197B8;
  uint64_t v77 = &v78;
  long long v75 = xmmword_18E1F8570;
  sub_18DFE2CC8((uint64_t)&v74, 0.0);
  sub_18DFE2F24(a6, (uint64_t)&v74);
  return 0;
}

uint64_t sub_18E11121C(uint64_t a1, uint64_t a2, double *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unsigned int v9 = *(_DWORD *)(a1 + 8);
  unsigned int v10 = *(_DWORD *)(a1 + 12);
  if (v9 <= v10) {
    int v11 = *(_DWORD *)(a1 + 12);
  }
  else {
    int v11 = *(_DWORD *)(a1 + 8);
  }
  if (v9) {
    BOOL v12 = v10 == 0;
  }
  else {
    BOOL v12 = 1;
  }
  BOOL v13 = !v12 && v11 == 2;
  if (v13
    && ((unsigned int v14 = *(_DWORD *)(a2 + 8), v15 = *(_DWORD *)(a2 + 12), v14 <= v15)
      ? (int v16 = *(_DWORD *)(a2 + 12))
      : (int v16 = *(_DWORD *)(a2 + 8)),
        v14 ? (BOOL v17 = v15 == 0) : (BOOL v17 = 1),
        !v17 ? (BOOL v18 = v16 == 2) : (BOOL v18 = 0),
        v18))
  {
    double v26 = *a3;
    uint64_t v54 = 0x100000002;
    int64x2_t v52 = &unk_1EDD18B28;
    long long v55 = &v56;
    long long v53 = xmmword_18E1FD1A0;
    sub_18DFE2CC8((uint64_t)&v52, 0.0);
    uint64_t v49 = 0x100000008;
    long long v48 = xmmword_18E1FD1A0;
    unsigned __int8 v47 = &unk_1EDD19CC8;
    long long v50 = &v51;
    uint64_t v44 = 0x800000008;
    uint64_t v42 = &unk_1EDD19DE8;
    long long v43 = xmmword_18E1FD1B0;
    long long v45 = &v46;
    uint64_t v39 = 0x200000008;
    char v37 = &unk_1EDD19D58;
    long long v38 = xmmword_18E1FD1B0;
    uint64_t v40 = &v41;
    unsigned int v28 = *(_DWORD *)(a1 + 8);
    unsigned int v27 = *(_DWORD *)(a1 + 12);
    if (v28 <= v27) {
      int v29 = *(_DWORD *)(a1 + 12);
    }
    else {
      int v29 = *(_DWORD *)(a1 + 8);
    }
    if (v28 && v27 && v29 == 2)
    {
      int v30 = v53 <= DWORD1(v53) ? DWORD1(v53) : v53;
      if (v53 && DWORD1(v53) && v30 == 2)
      {
        uint64_t v64 = 0x200000002;
        int64x2_t v62 = &unk_1EDD18BB8;
        long long v65 = v66;
        long long v63 = xmmword_18E1FD1B0;
        sub_18DFE2CC8((uint64_t)&v62, 0.0);
        int v31 = HIDWORD(v63) + 1;
        int v32 = v65;
        *long long v65 = 0x3FF0000000000000;
        v32[v31] = 0x3FF0000000000000;
        sub_18E0736C8((uint64_t)&v67, (uint64_t)&v62);
        *(double *)&v70[SHIDWORD(v68)] = v26 * a9;
        uint64_t v59 = 0x100000008;
        long long v58 = xmmword_18E1FD760;
        __int16 v57 = &unk_1EDD19CC8;
        long long v60 = &v61;
        sub_18DFE2B44((uint64_t)&v67, a1, (uint64_t)&v57);
        uint64_t v64 = 0x100000008;
        long long v63 = xmmword_18E1FD760;
        int64x2_t v62 = &unk_1EDD19CC8;
        long long v65 = v66;
        sub_18DFEF1F4((uint64_t)&v57, (uint64_t)&v52, (uint64_t)&v62);
        sub_18DFE2F24((uint64_t)&v47, (uint64_t)&v62);
        sub_18DFE2F24((uint64_t)&v42, (uint64_t)&v67);
        uint64_t v64 = 0x200000002;
        int64x2_t v62 = &unk_1EDD18BB8;
        long long v65 = v66;
        long long v63 = xmmword_18E1FD1B0;
        sub_18DFE2CC8((uint64_t)&v62, 0.0);
        int v33 = HIDWORD(v63) + 1;
        uint64_t v34 = v65;
        *long long v65 = 0x3FF0000000000000;
        v34[v33] = 0x3FF0000000000000;
        sub_18DFE2F24((uint64_t)&v37, (uint64_t)&v62);
        sub_18DFE2F24(a4, (uint64_t)&v47);
        sub_18DFE2F24(a5, (uint64_t)&v42);
        uint64_t v69 = 0x200000002;
        int64x2_t v67 = &unk_1EDD18BB8;
        long long v70 = &v71;
        long long v68 = xmmword_18E1FD1B0;
        sub_18DFE2CC8((uint64_t)&v67, 0.0);
        sub_18DFE2F24(a6, (uint64_t)&v67);
        return 0;
      }
    }
    LOWORD(v67) = 12;
    LOBYTE(v62) = 4;
    int8x16_t v19 = "f_TwoStateOscillator called with inadequate matrices.";
    int8x16_t v20 = &v62;
  }
  else
  {
    LOWORD(v67) = 12;
    LOBYTE(v42) = 4;
    int8x16_t v19 = "in_TwoStateOscillator called with inadequate matrices.";
    int8x16_t v20 = &v42;
  }
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v67, (unsigned __int8 *)v20, v19, a4, a5, a6, a7, a8, v36);
  return 0xFFFFFFFFLL;
}

void sub_18E11162C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v50 = 0x100000008;
  long long v48 = &unk_1EDD19CC8;
  long long v49 = xmmword_18E1FD760;
  uint64_t v51 = &v52;
  uint64_t v45 = 0x800000008;
  long long v44 = xmmword_18E1FD750;
  long long v43 = &unk_1EDD19DE8;
  uint64_t v46 = &v47;
  uint64_t v40 = 0x100000008;
  long long v39 = xmmword_18E1FD760;
  long long v38 = &unk_1EDD19CC8;
  uint64_t v41 = &v42;
  if (*(_DWORD *)(a1 + 1540))
  {
    sub_18DFE2F24((uint64_t)&v48, a1 + 768);
    sub_18DFE2F24((uint64_t)&v43, a1 + 872);
    uint64_t v12 = a1 + 1424;
  }
  else
  {
    sub_18DFE2F24((uint64_t)&v48, a1 + 8);
    sub_18DFE2F24((uint64_t)&v43, a1 + 112);
    uint64_t v12 = a1 + 664;
  }
  sub_18DFE2F24((uint64_t)&v38, v12);
  int v13 = *(_DWORD *)(a2 + 8);
  if ((v13 & 0x80000000) == 0)
  {
    uint64_t v35 = 0x100000008;
    int v30 = &unk_1EDD19CC8;
    char v36 = &v37;
    int v31 = v13;
    int v32 = 1;
    int v33 = v13;
    int v34 = v13;
    sub_18DFE2CC8((uint64_t)&v30, 0.0);
    unsigned int v14 = *(_DWORD *)(a9 + 8);
    unsigned int v15 = *(_DWORD *)(a9 + 12);
    if (v14 <= v15) {
      int v16 = *(_DWORD *)(a9 + 12);
    }
    else {
      int v16 = *(_DWORD *)(a9 + 8);
    }
    if (v15) {
      BOOL v17 = v14 == 0;
    }
    else {
      BOOL v17 = 1;
    }
    if (v17) {
      int v18 = 0;
    }
    else {
      int v18 = v16;
    }
    sub_18E08827C((uint64_t)v28, v18, 1);
    if (v18 >= 1)
    {
      uint64_t v19 = 0;
      uint64_t v20 = 0;
      while (1)
      {
        sub_18DFF2980((uint64_t)v25, *(void *)(a4 + 32) + v20);
        if (v26 <= v27) {
          unsigned int v21 = v27;
        }
        else {
          unsigned int v21 = v26;
        }
        if (v27) {
          BOOL v22 = v26 == 0;
        }
        else {
          BOOL v22 = 1;
        }
        if (v22) {
          unsigned int v23 = 0;
        }
        else {
          unsigned int v23 = v21;
        }
        *(_DWORD *)(v29 + v19) = v23;
        v20 += 64;
        v19 += 4;
        if ((unint64_t)v18 << 6 == v20)
        {
          sub_18E08827C((uint64_t)v25, v18, 1);
          sub_18E088340((uint64_t)v24, v18, 1);
        }
      }
    }
    sub_18E08827C((uint64_t)v25, v18, 1);
    sub_18E088340((uint64_t)v24, v18, 1);
  }
  __assert_rtn("Zeros", "cnmatrix.h", 3098, "nr >= 0");
}

void sub_18E111AA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55)
{
}

double sub_18E111AE0(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1F4188790](a1);
  if (*(unsigned char *)v1)
  {
    uint64_t v4 = (__n128 *)v2;
    uint64_t v5 = v1;
    if (*(unsigned char *)(v1 + 1)) {
      *(unsigned char *)(v1 + 1) = 0;
    }
    if (*(_DWORD *)(v1 + 5936))
    {
      if (!sub_18DEE8C5C(v2, (double *)(v1 + 8)))
      {
        unint64_t v6 = *(unsigned int *)(v5 + 5936);
        sub_18E091E10((uint64_t)v28, *(_DWORD *)(v5 + 5936), 1);
        unsigned int v7 = 0;
        if ((int)v6 >= 1)
        {
          uint64_t v8 = *(void **)(v5 + 48);
          if (v8 != (void *)(v5 + 40))
          {
            uint64_t v9 = 0;
            unsigned int v7 = 0;
            unint64_t v10 = 1;
            do
            {
              if (sub_18DEE4C00((double *)(*(void *)(v5 + 96) + v9), v4->n128_f64))
              {
                *(_DWORD *)(v30 + 4 * (int)v7) = v10 - 1;
                uint64_t v8 = (void *)v8[1];
                ++v7;
              }
              else
              {
                int v11 = (void *)*v8;
                uint64_t v12 = (void *)v8[1];
                v11[1] = v12;
                *(void *)v8[1] = v11;
                --*(void *)(v5 + 56);
                sub_18E067C60((uint64_t (**)(void, void, void, void, void))v8 + 2);
                operator delete(v8);
                uint64_t v8 = v12;
              }
              if (v10 >= v6) {
                break;
              }
              ++v10;
              v9 += 16;
            }
            while (v8 != (void *)(v5 + 40));
          }
        }
        int32x4_t v13 = vdupq_lane_s32((int32x2_t)(v7 | 0x100000000), 0);
        v13.i32[1] = 1;
        int32x4_t v29 = v13;
        if (v7 <= 1) {
          int v14 = 1;
        }
        else {
          int v14 = v7;
        }
        if (!v7) {
          int v14 = 0;
        }
        *(_DWORD *)(v5 + 5936) = v14;
        sub_18E091ED4((uint64_t)&v27, v5 + 64, (uint64_t)v28);
        sub_18E092018(v5 + 64, (uint64_t)&v27);
        sub_18E0920A8((uint64_t)&v27, v5 + 2888, (uint64_t)v28);
        sub_18DFEEA3C(v5 + 2888, (uint64_t)&v27);
        sub_18E0921D4((uint64_t)&v27, v5 + 3624, (uint64_t)v28);
        sub_18DFE2F24(v5 + 3624, (uint64_t)&v27);
        sub_18E09230C((uint64_t)&v27);
      }
    }
    else
    {
      __n128 v27 = *(__n128 *)(v1 + 8);
      sub_18E059748(v1);
      sub_18E059804(v5, v4, v15, v16, v17, v18, v19, v20);
      *(unsigned char *)uint64_t v5 = 0;
      *(void *)&double result = sub_18E059804(v5, &v27, v21, v22, v23, v24, v25, v26).n128_u64[0];
    }
  }
  return result;
}

void sub_18E111FC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_18E111FD8(void *result)
{
  *double result = &unk_1EDD17388;
  return result;
}

void raven::RavenConvergenceEstimator::Reset(raven::RavenConvergenceEstimator *this)
{
  __int16 v10 = 12;
  unsigned __int8 v9 = 2;
  char v2 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)this + 80, "Resetting estimator");
  if (*((char *)this + 2511) >= 0) {
    LOBYTE(v8) = v2;
  }
  else {
    uint64_t v8 = *((void *)this + 311);
  }
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v10, &v9, "%s", v3, v4, v5, v6, v7, v8);
  raven::RavenSequentialGNSSMeasurementSelector::Reset((raven::RavenConvergenceEstimator *)((char *)this + 5704));
  uint64_t v11 = 0x3FE0000000000000;
  sub_18E06E568((uint64_t)this + 8272, (double *)&v11);
  sub_18E059748((uint64_t)this + 8336);
  raven::RavenEstimator::Reset(this);
}

void sub_18E1120A4(void *a1)
{
  *a1 = &unk_1EDD14798;
  sub_18E0B687C(a1 + 1042);
  a1[1033] = &unk_1EDD0A6A8;
  sub_18E067E60((uint64_t)(a1 + 713));
  a1[330] = &unk_1EDD0A818;
  a1[631] = &unk_1EDD17478;
  a1[618] = &unk_1EDD17478;
  a1[549] = &unk_1EDD17478;
  sub_18E0B6C34((uint64_t)(a1 + 330));
  sub_18E0268B0((uint64_t)a1);

  JUMPOUT(0x192FA6240);
}

void *sub_18E1121D4(void *result)
{
  *double result = &unk_1EDD17328;
  return result;
}

void *sub_18E1121F4(void *result)
{
  *double result = &unk_1EDD17328;
  return result;
}

void sub_18E112214(void *a1)
{
  *a1 = &unk_1EDD17328;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E112244(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E112250(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  unsigned int v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    unsigned int v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      int v4 = *(_DWORD *)(a1 + 16);
      int v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        uint64_t v6 = (v4 - 1);
        uint64_t v7 = 1;
        do
        {
          uint64_t v8 = &v13[v7];
          if (!v13[v7])
          {
            uint64_t v9 = *(void *)(*(void *)(a1 + 32) + 8 * v7);
            int v10 = v7;
            do
            {
              int v10 = (int)(v10 * (v3 + v1 - v5)) % (int)v6;
              uint64_t v11 = *(void *)(a1 + 32);
              uint64_t v12 = *(void *)(v11 + 8 * v10);
              *(void *)(v11 + 8 * v10) = v9;
              *uint64_t v8 = 1;
              uint64_t v8 = &v13[v10];
              uint64_t v9 = v12;
            }
            while (!*v8);
          }
          ++v7;
        }
        while (v7 != v6);
      }
    }
  }
}

void sub_18E11234C(void *a1)
{
  *a1 = &unk_1EDD17328;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E11237C(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E112388(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  unsigned int v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    unsigned int v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      int v4 = *(_DWORD *)(a1 + 16);
      int v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        uint64_t v6 = (v4 - 1);
        uint64_t v7 = 1;
        do
        {
          uint64_t v8 = &v13[v7];
          if (!v13[v7])
          {
            uint64_t v9 = *(void *)(*(void *)(a1 + 32) + 8 * v7);
            int v10 = v7;
            do
            {
              int v10 = (int)(v10 * (v3 + v1 - v5)) % (int)v6;
              uint64_t v11 = *(void *)(a1 + 32);
              uint64_t v12 = *(void *)(v11 + 8 * v10);
              *(void *)(v11 + 8 * v10) = v9;
              *uint64_t v8 = 1;
              uint64_t v8 = &v13[v10];
              uint64_t v9 = v12;
            }
            while (!*v8);
          }
          ++v7;
        }
        while (v7 != v6);
      }
    }
  }
}

void sub_18E11248C(uint64_t a1)
{
  *(void *)a1 = &unk_1EDD0A4E8;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }

  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E1124FC(uint64_t a1, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_18DEDE668((unsigned char *)(a1 + 56), *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *(void *)(a1 + 72) = *((void *)a2 + 2);
    *(_OWORD *)(a1 + 56) = v4;
  }
  *(void *)(a1 + 80) = *((void *)a2 + 3);
  *(_OWORD *)(a1 + 88) = a2[2];
  long long v5 = a2[3];
  long long v6 = a2[4];
  long long v7 = a2[5];
  *(_OWORD *)(a1 + 152) = a2[6];
  *(_OWORD *)(a1 + 136) = v7;
  *(_OWORD *)(a1 + 120) = v6;
  *(_OWORD *)(a1 + 104) = v5;
  long long v8 = a2[7];
  long long v9 = a2[8];
  long long v10 = a2[9];
  *(_OWORD *)(a1 + 216) = a2[10];
  *(_OWORD *)(a1 + 200) = v10;
  *(_OWORD *)(a1 + 184) = v9;
  *(_OWORD *)(a1 + 168) = v8;
  long long v11 = a2[11];
  long long v12 = a2[12];
  long long v13 = a2[14];
  *(_OWORD *)(a1 + 264) = a2[13];
  *(_OWORD *)(a1 + 280) = v13;
  *(_OWORD *)(a1 + 248) = v12;
  *(_OWORD *)(a1 + 232) = v11;
  *(void *)(a1 + 296) = &unk_1EDD0AE58;
  uint64_t v14 = (unsigned char *)(a1 + 304);
  if (*((char *)a2 + 271) < 0)
  {
    sub_18DEDE668(v14, *((void **)a2 + 31), *((void *)a2 + 32));
  }
  else
  {
    long long v15 = *(long long *)((char *)a2 + 248);
    *(void *)(a1 + 320) = *((void *)a2 + 33);
    *(_OWORD *)uint64_t v14 = v15;
  }
  *(void *)(a1 + 328) = *((void *)a2 + 34);
  long long v16 = *(long long *)((char *)a2 + 280);
  long long v17 = *(long long *)((char *)a2 + 312);
  *(_OWORD *)(a1 + 352) = *(long long *)((char *)a2 + 296);
  *(_OWORD *)(a1 + 368) = v17;
  *(_OWORD *)(a1 + 336) = v16;
  long long v18 = *(long long *)((char *)a2 + 328);
  long long v19 = *(long long *)((char *)a2 + 344);
  long long v20 = *(long long *)((char *)a2 + 376);
  *(_OWORD *)(a1 + 416) = *(long long *)((char *)a2 + 360);
  *(_OWORD *)(a1 + 432) = v20;
  *(_OWORD *)(a1 + 384) = v18;
  *(_OWORD *)(a1 + 400) = v19;
  long long v21 = *(long long *)((char *)a2 + 392);
  long long v22 = *(long long *)((char *)a2 + 408);
  long long v23 = *(long long *)((char *)a2 + 440);
  *(_OWORD *)(a1 + 480) = *(long long *)((char *)a2 + 424);
  *(_OWORD *)(a1 + 496) = v23;
  *(_OWORD *)(a1 + 448) = v21;
  *(_OWORD *)(a1 + 464) = v22;
  sub_18E06BF24((void *)a1, 18);
  *(void *)a1 = &unk_1EDD151C8;
  *(_OWORD *)(a1 + 512) = 0u;
  return a1;
}

void sub_18E11267C(_Unwind_Exception *exception_object)
{
  *(void *)(v2 + 296) = &unk_1EDD0A9B8;
  if (*(char *)(v2 + 79) < 0) {
    operator delete(*v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_18E1126C4(uint64_t a1)
{
  *(void *)a1 = &unk_1EDD151C8;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 520);
  if (v2) {
    sub_18DEE4E18(v2);
  }
  *(void *)a1 = &unk_1EDD0A4E8;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  *(void *)(a1 + 296) = &unk_1EDD0AE58;
  if (*(char *)(a1 + 327) < 0) {
    operator delete(*(void **)(a1 + 304));
  }
  *(void *)(a1 + 296) = &unk_1EDD0A9B8;
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }

  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E1127B8(uint64_t a1, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_18DEDE668((unsigned char *)(a1 + 56), *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *(void *)(a1 + 72) = *((void *)a2 + 2);
    *(_OWORD *)(a1 + 56) = v4;
  }
  *(void *)(a1 + 80) = *((void *)a2 + 3);
  *(_OWORD *)(a1 + 88) = a2[2];
  long long v5 = a2[3];
  long long v6 = a2[4];
  long long v7 = a2[5];
  *(_OWORD *)(a1 + 152) = a2[6];
  *(_OWORD *)(a1 + 136) = v7;
  *(_OWORD *)(a1 + 120) = v6;
  *(_OWORD *)(a1 + 104) = v5;
  long long v8 = a2[7];
  long long v9 = a2[8];
  long long v10 = a2[9];
  *(_OWORD *)(a1 + 216) = a2[10];
  *(_OWORD *)(a1 + 200) = v10;
  *(_OWORD *)(a1 + 184) = v9;
  *(_OWORD *)(a1 + 168) = v8;
  long long v11 = a2[11];
  long long v12 = a2[12];
  long long v13 = a2[14];
  *(_OWORD *)(a1 + 264) = a2[13];
  *(_OWORD *)(a1 + 280) = v13;
  *(_OWORD *)(a1 + 248) = v12;
  *(_OWORD *)(a1 + 232) = v11;
  *(void *)(a1 + 296) = &unk_1EDD0AE58;
  uint64_t v14 = (unsigned char *)(a1 + 304);
  if (*((char *)a2 + 271) < 0)
  {
    sub_18DEDE668(v14, *((void **)a2 + 31), *((void *)a2 + 32));
  }
  else
  {
    long long v15 = *(long long *)((char *)a2 + 248);
    *(void *)(a1 + 320) = *((void *)a2 + 33);
    *(_OWORD *)uint64_t v14 = v15;
  }
  *(void *)(a1 + 328) = *((void *)a2 + 34);
  long long v16 = *(long long *)((char *)a2 + 280);
  long long v17 = *(long long *)((char *)a2 + 312);
  *(_OWORD *)(a1 + 352) = *(long long *)((char *)a2 + 296);
  *(_OWORD *)(a1 + 368) = v17;
  *(_OWORD *)(a1 + 336) = v16;
  long long v18 = *(long long *)((char *)a2 + 328);
  long long v19 = *(long long *)((char *)a2 + 344);
  long long v20 = *(long long *)((char *)a2 + 376);
  *(_OWORD *)(a1 + 416) = *(long long *)((char *)a2 + 360);
  *(_OWORD *)(a1 + 432) = v20;
  *(_OWORD *)(a1 + 384) = v18;
  *(_OWORD *)(a1 + 400) = v19;
  long long v21 = *(long long *)((char *)a2 + 392);
  long long v22 = *(long long *)((char *)a2 + 408);
  long long v23 = *(long long *)((char *)a2 + 440);
  *(_OWORD *)(a1 + 480) = *(long long *)((char *)a2 + 424);
  *(_OWORD *)(a1 + 496) = v23;
  *(_OWORD *)(a1 + 448) = v21;
  *(_OWORD *)(a1 + 464) = v22;
  sub_18E06BF24((void *)a1, 17);
  *(void *)a1 = &unk_1EDD15788;
  return a1;
}

void sub_18E112930(_Unwind_Exception *exception_object)
{
  *(void *)(v2 + 296) = &unk_1EDD0A9B8;
  if (*(char *)(v2 + 79) < 0) {
    operator delete(*v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_18E112978(uint64_t a1)
{
  *(void *)a1 = &unk_1EDD0A4E8;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  *(void *)(a1 + 296) = &unk_1EDD0AE58;
  if (*(char *)(a1 + 327) < 0) {
    operator delete(*(void **)(a1 + 304));
  }
  *(void *)(a1 + 296) = &unk_1EDD0A9B8;
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }

  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E112A44(uint64_t a1, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_18DEDE668((unsigned char *)(a1 + 56), *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *(void *)(a1 + 72) = *((void *)a2 + 2);
    *(_OWORD *)(a1 + 56) = v4;
  }
  *(void *)(a1 + 80) = *((void *)a2 + 3);
  *(_OWORD *)(a1 + 88) = a2[2];
  long long v5 = a2[3];
  long long v6 = a2[4];
  long long v7 = a2[5];
  *(_OWORD *)(a1 + 152) = a2[6];
  *(_OWORD *)(a1 + 136) = v7;
  *(_OWORD *)(a1 + 120) = v6;
  *(_OWORD *)(a1 + 104) = v5;
  long long v8 = a2[7];
  long long v9 = a2[8];
  long long v10 = a2[9];
  *(_OWORD *)(a1 + 216) = a2[10];
  *(_OWORD *)(a1 + 200) = v10;
  *(_OWORD *)(a1 + 184) = v9;
  *(_OWORD *)(a1 + 168) = v8;
  long long v11 = a2[11];
  long long v12 = a2[12];
  long long v13 = a2[14];
  *(_OWORD *)(a1 + 264) = a2[13];
  *(_OWORD *)(a1 + 280) = v13;
  *(_OWORD *)(a1 + 248) = v12;
  *(_OWORD *)(a1 + 232) = v11;
  *(void *)(a1 + 296) = &unk_1EDD0AE58;
  uint64_t v14 = (unsigned char *)(a1 + 304);
  if (*((char *)a2 + 271) < 0)
  {
    sub_18DEDE668(v14, *((void **)a2 + 31), *((void *)a2 + 32));
  }
  else
  {
    long long v15 = *(long long *)((char *)a2 + 248);
    *(void *)(a1 + 320) = *((void *)a2 + 33);
    *(_OWORD *)uint64_t v14 = v15;
  }
  *(void *)(a1 + 328) = *((void *)a2 + 34);
  long long v16 = *(long long *)((char *)a2 + 280);
  long long v17 = *(long long *)((char *)a2 + 312);
  *(_OWORD *)(a1 + 352) = *(long long *)((char *)a2 + 296);
  *(_OWORD *)(a1 + 368) = v17;
  *(_OWORD *)(a1 + 336) = v16;
  long long v18 = *(long long *)((char *)a2 + 328);
  long long v19 = *(long long *)((char *)a2 + 344);
  long long v20 = *(long long *)((char *)a2 + 376);
  *(_OWORD *)(a1 + 416) = *(long long *)((char *)a2 + 360);
  *(_OWORD *)(a1 + 432) = v20;
  *(_OWORD *)(a1 + 384) = v18;
  *(_OWORD *)(a1 + 400) = v19;
  long long v21 = *(long long *)((char *)a2 + 392);
  long long v22 = *(long long *)((char *)a2 + 408);
  long long v23 = *(long long *)((char *)a2 + 440);
  *(_OWORD *)(a1 + 480) = *(long long *)((char *)a2 + 424);
  *(_OWORD *)(a1 + 496) = v23;
  *(_OWORD *)(a1 + 448) = v21;
  *(_OWORD *)(a1 + 464) = v22;
  sub_18E06BF24((void *)a1, 16);
  *(void *)a1 = &unk_1EDD15F28;
  return a1;
}

void sub_18E112BBC(_Unwind_Exception *exception_object)
{
  *(void *)(v2 + 296) = &unk_1EDD0A9B8;
  if (*(char *)(v2 + 79) < 0) {
    operator delete(*v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_18E112C04(uint64_t a1)
{
  *(void *)a1 = &unk_1EDD0A4E8;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  *(void *)(a1 + 296) = &unk_1EDD0AE58;
  if (*(char *)(a1 + 327) < 0) {
    operator delete(*(void **)(a1 + 304));
  }
  *(void *)(a1 + 296) = &unk_1EDD0A9B8;
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }

  JUMPOUT(0x192FA6240);
}

void *sub_18E112CD0(void *result)
{
  *double result = &unk_1EDD17478;
  return result;
}

void sub_18E112CF0(void *a1)
{
  *a1 = &unk_1EDD17478;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E112D20(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E112D2C(uint64_t a1)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  sub_18DEF3CF4(a1, v1);
}

void sub_18E112D7C(uint64_t a1)
{
  *(void *)a1 = &unk_1EDD0A4E8;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }

  JUMPOUT(0x192FA6240);
}

void sub_18E112DEC(uint64_t a1)
{
  *(void *)a1 = &unk_1EDD0A4E8;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }

  JUMPOUT(0x192FA6240);
}

void sub_18E112E5C(uint64_t a1)
{
  *(void *)a1 = &unk_1EDD0A4E8;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }

  JUMPOUT(0x192FA6240);
}

void sub_18E112ECC(uint64_t a1)
{
  *(void *)a1 = &unk_1EDD0A4E8;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }

  JUMPOUT(0x192FA6240);
}

void sub_18E112F3C(uint64_t a1)
{
  *(void *)a1 = &unk_1EDD0A4E8;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }

  JUMPOUT(0x192FA6240);
}

void sub_18E112FAC(uint64_t a1)
{
  *(void *)a1 = &unk_1EDD0A4E8;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }

  JUMPOUT(0x192FA6240);
}

void sub_18E11301C(uint64_t a1)
{
  *(void *)a1 = &unk_1EDD0A4E8;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }

  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E11308C@<X0>(int a1@<W0>, int a2@<W1>, uint64_t a3@<X8>)
{
  if (a1 < 0) {
    __assert_rtn("Zeros", "cnmatrix.h", 3133, "nr >= 0");
  }
  *(void *)(a3 + 24) = 0x800000001;
  *(void *)a3 = &unk_1EDD18408;
  *(void *)(a3 + 32) = a3 + 40;
  *(_DWORD *)(a3 + 8) = a1;
  *(_DWORD *)(a3 + 12) = a2;
  *(_DWORD *)(a3 + 16) = a2 * a1;
  *(_DWORD *)(a3 + 20) = a1;

  return sub_18DFE2CC8(a3, 0.0);
}

__n128 sub_18E113118(void *a1, uint64_t a2)
{
  long long v4 = (char *)operator new(0x38uLL);
  *(void *)long long v4 = &unk_1EDD0A4E8;
  *((_DWORD *)v4 + 2) = *(_DWORD *)(a2 + 8);
  long long v5 = v4 + 16;
  if (*(char *)(a2 + 39) < 0)
  {
    sub_18DEDE668(v5, *(void **)(a2 + 16), *(void *)(a2 + 24));
  }
  else
  {
    *(_OWORD *)long long v5 = *(_OWORD *)(a2 + 16);
    *((void *)v4 + 4) = *(void *)(a2 + 32);
  }
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(v4 + 40) = result;
  *(void *)long long v4 = &unk_1EDD15340;
  *a1 = sub_18E1131E8;
  a1[1] = v4;
  return result;
}

void sub_18E1131D4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_18E1131E8(unsigned int a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v5 = a1;
  __n128 result = &unk_1EDD05B90;
  switch(v5)
  {
    case 1:
      sub_18E113118(a3, a2[1]);
      __n128 result = 0;
      break;
    case 2:
      __n128 result = 0;
      uint64_t v9 = a2[1];
      *a3 = sub_18E1131E8;
      a3[1] = v9;
      goto LABEL_5;
    case 3:
      if (a4) {
        BOOL v10 = sub_18DEE4C68(a4, (uint64_t)&unk_1EDD05B90);
      }
      else {
        BOOL v10 = a5 == &std::__any_imp::__unique_typeinfo<raven::h_AltitudeArgs_RavenConvergence>::__id;
      }
      if (v10) {
        __n128 result = (void *)a2[1];
      }
      else {
        __n128 result = 0;
      }
      break;
    case 4:
      return result;
    default:
      long long v8 = (void (***)(void))a2[1];
      (**v8)(v8);
      operator delete(v8);
      __n128 result = 0;
LABEL_5:
      *a2 = 0;
      break;
  }
  return result;
}

double sub_18E1132EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(a3 + 8);
  int v4 = *(_DWORD *)(a3 + 12);
  uint64_t v5 = (v4 * v3);
  *(void *)&double result = 0x100000006;
  *(void *)(a1 + 24) = 0x100000006;
  *(void *)a1 = &unk_1EDD19728;
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 20) = v3;
  long long v7 = (double *)(a1 + 40);
  *(void *)(a1 + 32) = a1 + 40;
  if (v5)
  {
    long long v8 = *(int **)(a3 + 32);
    do
    {
      uint64_t v9 = *v8++;
      double result = *(double *)(a2 + 8 * v9);
      *v7++ = result;
      --v5;
    }
    while (v5);
  }
  return result;
}

void sub_18E11334C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 24) = 0x600000003;
  *(void *)a1 = &unk_1EDD18F78;
  *(_OWORD *)(a1 + 8) = xmmword_18E215AD0;
  *(void *)(a1 + 32) = a1 + 40;
  sub_18DFE2B44(a2, a3, a1);
}

void sub_18E1133B8(_Unwind_Exception *a1)
{
  void *v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

void sub_18E1133D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 24) = 0x600000003;
  *(void *)a1 = &unk_1EDD18F78;
  *(_OWORD *)(a1 + 8) = xmmword_18E215AD0;
  *(void *)(a1 + 32) = a1 + 40;
  sub_18DFE2B44(a2, a3, a1);
}

void sub_18E113444(_Unwind_Exception *a1)
{
  void *v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

uint64_t sub_18E113464(uint64_t a1)
{
  *(void *)(a1 + 24) = 0x600000003;
  *(void *)a1 = &unk_1EDD18F78;
  *(void *)(a1 + 32) = a1 + 40;
  *(_OWORD *)(a1 + 8) = xmmword_18E215AD0;
  uint64_t result = sub_18DFE2CC8(a1, 0.0);
  int v3 = *(_DWORD *)(a1 + 20) + 1;
  int v4 = *(void **)(a1 + 32);
  *int v4 = 0x3FF0000000000000;
  v4[v3] = 0x3FF0000000000000;
  v4[2 * v3] = 0x3FF0000000000000;
  return result;
}

double sub_18E1134E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 24) = 0x600000006;
  *(void *)a1 = &unk_1EDD197B8;
  *(_OWORD *)(a1 + 8) = xmmword_18E1F8570;
  *(void *)(a1 + 32) = a1 + 40;
  *(void *)&double result = *(_OWORD *)&sub_18DFE2AA8(a2, a3, a1);
  return result;
}

uint64_t sub_18E113534(uint64_t a1)
{
  *(void *)(a1 + 24) = 0x600000006;
  *(void *)a1 = &unk_1EDD197B8;
  *(void *)(a1 + 32) = a1 + 40;
  *(_OWORD *)(a1 + 8) = xmmword_18E1F8570;
  uint64_t result = sub_18DFE2CC8(a1, 0.0);
  int v3 = 0;
  int v4 = *(_DWORD *)(a1 + 20) + 1;
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = 6;
  do
  {
    *(void *)(v5 + 8 * v3) = 0x3FF0000000000000;
    v3 += v4;
    --v6;
  }
  while (v6);
  return result;
}

void *sub_18E1135BC(void *result)
{
  *uint64_t result = &unk_1EDD17478;
  return result;
}

void sub_18E1135DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 24) = 0x100000003;
  *(void *)a1 = &unk_1EDD18D98;
  *(_OWORD *)(a1 + 8) = xmmword_18E1F6F60;
  *(void *)(a1 + 32) = a1 + 40;
  sub_18DFE2B44(a2, a3, a1);
}

void sub_18E113648(_Unwind_Exception *a1)
{
  void *v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

void sub_18E113668(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 24) = 0x600000001;
  *(void *)a1 = &unk_1EDD18348;
  *(_OWORD *)(a1 + 8) = xmmword_18E1FD840;
  *(void *)(a1 + 32) = a1 + 40;
  sub_18DFE2B44(a2, a3, a1);
}

void sub_18E1136D4(_Unwind_Exception *a1)
{
  void *v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

void *sub_18E1136F4(void *result)
{
  *uint64_t result = &unk_1EDD17478;
  return result;
}

void sub_18E113714(void *a1)
{
  *a1 = &unk_1EDD17478;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E113744(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E113750(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  unsigned int v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    unsigned int v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      int v4 = *(_DWORD *)(a1 + 16);
      int v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        uint64_t v6 = (v4 - 1);
        uint64_t v7 = *(void *)(a1 + 32);
        uint64_t v8 = 1;
        do
        {
          uint64_t v9 = &v13[v8];
          if (!v13[v8])
          {
            uint64_t v10 = *(void *)(v7 + 8 * v8);
            int v11 = v8;
            do
            {
              int v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              uint64_t v12 = *(void *)(v7 + 8 * v11);
              *(void *)(v7 + 8 * v11) = v10;
              *uint64_t v9 = 1;
              uint64_t v9 = &v13[v11];
              uint64_t v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

void sub_18E113848(void *a1)
{
  *a1 = &unk_1EDD17478;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E113878(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E113884(uint64_t a1)
{
  sub_18DEF3CF4(a1, v1);
}

void sub_18E1138A8(uint64_t a1)
{
  *(void *)a1 = &unk_1EDD0A4E8;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }

  JUMPOUT(0x192FA6240);
}

__n128 sub_18E113918(void *a1, uint64_t a2)
{
  int v4 = (char *)operator new(0x58uLL);
  *(void *)int v4 = &unk_1EDD0A4E8;
  *((_DWORD *)v4 + 2) = *(_DWORD *)(a2 + 8);
  int v5 = v4 + 16;
  if (*(char *)(a2 + 39) < 0)
  {
    sub_18DEDE668(v5, *(void **)(a2 + 16), *(void *)(a2 + 24));
  }
  else
  {
    *(_OWORD *)int v5 = *(_OWORD *)(a2 + 16);
    *((void *)v4 + 4) = *(void *)(a2 + 32);
  }
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)int v4 = &unk_1EDD15C88;
  *(_OWORD *)(v4 + 56) = *(_OWORD *)(a2 + 56);
  __n128 result = *(__n128 *)(a2 + 72);
  *(__n128 *)(v4 + 72) = result;
  *a1 = sub_18E1139F8;
  a1[1] = v4;
  return result;
}

void sub_18E1139E4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_18E1139F8(unsigned int a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v5 = a1;
  __n128 result = &unk_1EDD05F48;
  switch(v5)
  {
    case 1:
      sub_18E113918(a3, a2[1]);
      __n128 result = 0;
      break;
    case 2:
      __n128 result = 0;
      uint64_t v9 = a2[1];
      *a3 = sub_18E1139F8;
      a3[1] = v9;
      goto LABEL_5;
    case 3:
      if (a4) {
        BOOL v10 = sub_18DEE4C68(a4, (uint64_t)&unk_1EDD05F48);
      }
      else {
        BOOL v10 = a5 == &std::__any_imp::__unique_typeinfo<raven::h_AltitudeChangeArgs_RavenConvergence<double>>::__id;
      }
      if (v10) {
        __n128 result = (void *)a2[1];
      }
      else {
        __n128 result = 0;
      }
      break;
    case 4:
      return result;
    default:
      uint64_t v8 = (void (***)(void))a2[1];
      (**v8)(v8);
      operator delete(v8);
      __n128 result = 0;
LABEL_5:
      *a2 = 0;
      break;
  }
  return result;
}

void sub_18E113AFC(uint64_t a1, uint64_t a2, double *a3)
{
  *(void *)(a1 + 24) = 0x800000008;
  *(void *)a1 = &unk_1EDD19DE8;
  *(_OWORD *)(a1 + 8) = xmmword_18E1FD750;
  *(void *)(a1 + 32) = a1 + 40;
  uint64_t v15 = 0x100000008;
  long long v14 = xmmword_18E1FD760;
  long long v13 = &unk_1EDD19CF8;
  long long v16 = &v17;
  uint64_t v10 = 0x100000008;
  long long v9 = xmmword_18E1FD760;
  uint64_t v8 = &unk_1EDD19CF8;
  int v11 = &v12;
  uint64_t v5 = 0x100000020;
  unsigned int v3 = &unk_1EDD18C78;
  long long v4 = xmmword_18E1FD780;
  uint64_t v6 = &v7;
  *a3 = sub_18E01D7FC(a2, (uint64_t)&v13, (uint64_t)&v8, (uint64_t)&v3, a1);
}

void sub_18E113C38(_Unwind_Exception *a1)
{
  void *v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

unsigned char *sub_18E113C58(void *a1, uint64_t a2)
{
  long long v4 = (char *)operator new(0x210uLL);
  uint64_t v5 = v4;
  if (*(char *)(a2 + 79) < 0)
  {
    sub_18DEDE668(v4 + 56, *(void **)(a2 + 56), *(void *)(a2 + 64));
  }
  else
  {
    *(_OWORD *)(v4 + 56) = *(_OWORD *)(a2 + 56);
    *((void *)v4 + 9) = *(void *)(a2 + 72);
  }
  *((void *)v5 + 10) = *(void *)(a2 + 80);
  *(_OWORD *)(v5 + 232) = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(v5 + 248) = *(_OWORD *)(a2 + 248);
  *(_OWORD *)(v5 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(v5 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(v5 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(v5 + 216) = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(v5 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(v5 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(v5 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(v5 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(v5 + 88) = *(_OWORD *)(a2 + 88);
  long long v6 = *(_OWORD *)(a2 + 280);
  *(_OWORD *)(v5 + 264) = *(_OWORD *)(a2 + 264);
  *(_OWORD *)(v5 + 280) = v6;
  *((void *)v5 + 37) = &unk_1EDD0AE58;
  uint64_t v7 = v5 + 304;
  if (*(char *)(a2 + 327) < 0)
  {
    sub_18DEDE668(v7, *(void **)(a2 + 304), *(void *)(a2 + 312));
  }
  else
  {
    *(_OWORD *)uint64_t v7 = *(_OWORD *)(a2 + 304);
    *((void *)v5 + 40) = *(void *)(a2 + 320);
  }
  *((void *)v5 + 41) = *(void *)(a2 + 328);
  long long v8 = *(_OWORD *)(a2 + 480);
  *((_OWORD *)v5 + 29) = *(_OWORD *)(a2 + 464);
  *((_OWORD *)v5 + 30) = v8;
  *((_OWORD *)v5 + 31) = *(_OWORD *)(a2 + 496);
  long long v9 = *(_OWORD *)(a2 + 416);
  *((_OWORD *)v5 + 25) = *(_OWORD *)(a2 + 400);
  *((_OWORD *)v5 + 26) = v9;
  long long v10 = *(_OWORD *)(a2 + 448);
  *((_OWORD *)v5 + 27) = *(_OWORD *)(a2 + 432);
  *((_OWORD *)v5 + 28) = v10;
  long long v11 = *(_OWORD *)(a2 + 352);
  *((_OWORD *)v5 + 21) = *(_OWORD *)(a2 + 336);
  *((_OWORD *)v5 + 22) = v11;
  long long v12 = *(_OWORD *)(a2 + 384);
  *((_OWORD *)v5 + 23) = *(_OWORD *)(a2 + 368);
  *((_OWORD *)v5 + 24) = v12;
  *(void *)uint64_t v5 = &unk_1EDD0A4E8;
  *((_DWORD *)v5 + 2) = *(_DWORD *)(a2 + 8);
  __n128 result = v5 + 16;
  if (*(char *)(a2 + 39) < 0)
  {
    __n128 result = sub_18DEDE668(result, *(void **)(a2 + 16), *(void *)(a2 + 24));
  }
  else
  {
    *(_OWORD *)__n128 result = *(_OWORD *)(a2 + 16);
    *((void *)v5 + 4) = *(void *)(a2 + 32);
  }
  *(_OWORD *)(v5 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)uint64_t v5 = &unk_1EDD151C8;
  *((void *)v5 + 64) = *(void *)(a2 + 512);
  uint64_t v14 = *(void *)(a2 + 520);
  *((void *)v5 + 65) = v14;
  if (v14) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
  }
  *a1 = sub_18E113EB8;
  a1[1] = v5;
  return result;
}

void sub_18E113E60(_Unwind_Exception *a1)
{
  sub_18E0419E0(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_18E113EB8(unsigned int a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v5 = a1;
  __n128 result = &unk_1EDD05AF8;
  switch(v5)
  {
    case 1:
      sub_18E113C58(a3, a2[1]);
      __n128 result = 0;
      break;
    case 2:
      __n128 result = 0;
      uint64_t v9 = a2[1];
      *a3 = sub_18E113EB8;
      a3[1] = v9;
      goto LABEL_5;
    case 3:
      if (a4) {
        BOOL v10 = sub_18DEE4C68(a4, (uint64_t)&unk_1EDD05AF8);
      }
      else {
        BOOL v10 = a5 == &std::__any_imp::__unique_typeinfo<raven::h_GnssPsrArgs_RavenConvergence>::__id;
      }
      if (v10) {
        __n128 result = (void *)a2[1];
      }
      else {
        __n128 result = 0;
      }
      break;
    case 4:
      return result;
    default:
      long long v8 = (void (***)(void))a2[1];
      (**v8)(v8);
      operator delete(v8);
      __n128 result = 0;
LABEL_5:
      *a2 = 0;
      break;
  }
  return result;
}

__n128 sub_18E113FBC(void *a1, uint64_t a2)
{
  long long v4 = (char *)operator new(0x200uLL);
  uint64_t v5 = v4;
  if (*(char *)(a2 + 79) < 0)
  {
    sub_18DEDE668(v4 + 56, *(void **)(a2 + 56), *(void *)(a2 + 64));
  }
  else
  {
    *(_OWORD *)(v4 + 56) = *(_OWORD *)(a2 + 56);
    *((void *)v4 + 9) = *(void *)(a2 + 72);
  }
  *((void *)v5 + 10) = *(void *)(a2 + 80);
  *(_OWORD *)(v5 + 232) = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(v5 + 248) = *(_OWORD *)(a2 + 248);
  *(_OWORD *)(v5 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(v5 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(v5 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(v5 + 216) = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(v5 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(v5 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(v5 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(v5 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(v5 + 88) = *(_OWORD *)(a2 + 88);
  long long v6 = *(_OWORD *)(a2 + 280);
  *(_OWORD *)(v5 + 264) = *(_OWORD *)(a2 + 264);
  *(_OWORD *)(v5 + 280) = v6;
  *((void *)v5 + 37) = &unk_1EDD0AE58;
  uint64_t v7 = v5 + 304;
  if (*(char *)(a2 + 327) < 0)
  {
    sub_18DEDE668(v7, *(void **)(a2 + 304), *(void *)(a2 + 312));
  }
  else
  {
    *(_OWORD *)uint64_t v7 = *(_OWORD *)(a2 + 304);
    *((void *)v5 + 40) = *(void *)(a2 + 320);
  }
  *((void *)v5 + 41) = *(void *)(a2 + 328);
  long long v8 = *(_OWORD *)(a2 + 480);
  *((_OWORD *)v5 + 29) = *(_OWORD *)(a2 + 464);
  *((_OWORD *)v5 + 30) = v8;
  *((_OWORD *)v5 + 31) = *(_OWORD *)(a2 + 496);
  long long v9 = *(_OWORD *)(a2 + 416);
  *((_OWORD *)v5 + 25) = *(_OWORD *)(a2 + 400);
  *((_OWORD *)v5 + 26) = v9;
  long long v10 = *(_OWORD *)(a2 + 448);
  *((_OWORD *)v5 + 27) = *(_OWORD *)(a2 + 432);
  *((_OWORD *)v5 + 28) = v10;
  long long v11 = *(_OWORD *)(a2 + 352);
  *((_OWORD *)v5 + 21) = *(_OWORD *)(a2 + 336);
  *((_OWORD *)v5 + 22) = v11;
  long long v12 = *(_OWORD *)(a2 + 384);
  *((_OWORD *)v5 + 23) = *(_OWORD *)(a2 + 368);
  *((_OWORD *)v5 + 24) = v12;
  *(void *)uint64_t v5 = &unk_1EDD0A4E8;
  *((_DWORD *)v5 + 2) = *(_DWORD *)(a2 + 8);
  long long v13 = v5 + 16;
  if (*(char *)(a2 + 39) < 0)
  {
    sub_18DEDE668(v13, *(void **)(a2 + 16), *(void *)(a2 + 24));
  }
  else
  {
    *(_OWORD *)long long v13 = *(_OWORD *)(a2 + 16);
    *((void *)v5 + 4) = *(void *)(a2 + 32);
  }
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(v5 + 40) = result;
  *(void *)uint64_t v5 = &unk_1EDD15788;
  *a1 = sub_18E1141FC;
  a1[1] = v5;
  return result;
}

void sub_18E1141A4(_Unwind_Exception *a1)
{
  sub_18E0419E0(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_18E1141FC(unsigned int a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v5 = a1;
  __n128 result = &unk_1EDD05D10;
  switch(v5)
  {
    case 1:
      sub_18E113FBC(a3, a2[1]);
      __n128 result = 0;
      break;
    case 2:
      __n128 result = 0;
      uint64_t v9 = a2[1];
      *a3 = sub_18E1141FC;
      a3[1] = v9;
      goto LABEL_5;
    case 3:
      if (a4) {
        BOOL v10 = sub_18DEE4C68(a4, (uint64_t)&unk_1EDD05D10);
      }
      else {
        BOOL v10 = a5 == &std::__any_imp::__unique_typeinfo<raven::h_GnssDopplerArgs_RavenConvergence>::__id;
      }
      if (v10) {
        __n128 result = (void *)a2[1];
      }
      else {
        __n128 result = 0;
      }
      break;
    case 4:
      return result;
    default:
      long long v8 = (void (***)(void))a2[1];
      (**v8)(v8);
      operator delete(v8);
      __n128 result = 0;
LABEL_5:
      *a2 = 0;
      break;
  }
  return result;
}

uint64_t sub_18E114300(uint64_t *a1, uint64_t a2, double *a3, float64x2_t *a4, uint64_t a5, int8x16_t a6, int8x16_t a7)
{
  uint64_t v11 = a1[1];
  uint64_t v12 = CNTimeSpan::operator-(a2, (void *)(v11 + 88), a6, a7);
  double v14 = v13;
  uint64_t v15 = *(long long **)(*a1 + 32);
  long long v122 = *v15;
  uint64_t v123 = *((void *)v15 + 2);
  double v16 = *((double *)v15 + 6);
  *(void *)&long long v64 = 0x800000008;
  int64x2_t v62 = &unk_1EDD19DE8;
  *((void *)&v64 + 1) = &v65;
  long long v63 = xmmword_18E1FD750;
  sub_18DFE2CC8((uint64_t)&v62, 0.0);
  int v17 = 0;
  int v18 = HIDWORD(v63) + 1;
  uint64_t v19 = 8;
  uint64_t v20 = *((void *)&v64 + 1);
  do
  {
    *(void *)(v20 + 8 * v17) = 0x3FF0000000000000;
    v17 += v18;
    --v19;
  }
  while (v19);
  double v21 = v14 + (double)v12;
  __n128 v22 = sub_18DFE2F24(a5, (uint64_t)&v62);
  v23.i64[0] = 0x3F50624DD2F1A9FCLL;
  if (fabs(v21) > 0.001)
  {
    double v121 = v14 + (double)v12;
    *(void *)&long long v65 = 0x700000006;
    uint64_t v118 = 0x100000008;
    __int16 v116 = &unk_1EDD19CF8;
    long long v117 = xmmword_18E1FD1A0;
    long long v119 = &v120;
    uint64_t v120 = 0x700000006;
    uint64_t v113 = 0x100000008;
    long long v111 = &unk_1EDD19CC8;
    uint64_t v114 = &v115;
    long long v112 = xmmword_18E1FD1A0;
    sub_18DFE2CC8((uint64_t)&v111, 0.0);
    uint64_t v108 = 0x100000008;
    long long v107 = xmmword_18E1FD760;
    int64x2_t v106 = &unk_1EDD19CC8;
    long long v109 = (double *)&v110;
    uint64_t v103 = 0x800000008;
    int64x2_t v101 = &unk_1EDD19DE8;
    long long v102 = xmmword_18E1FD750;
    char v104 = &v105;
    uint64_t v98 = 0x800000008;
    int64x2_t v96 = &unk_1EDD19DE8;
    long long v97 = xmmword_18E1FD750;
    uint64_t v99 = &v100;
    sub_18E074D00(*a1, (uint64_t)&v116, (uint64_t)&v62);
    uint64_t v26 = (cnprint::CNPrinter *)sub_18E03E8E0((uint64_t)&v62, (uint64_t)&v111, (uint64_t *)&v121, (uint64_t)&v106, (uint64_t)&v101, (uint64_t)&v96, v24, v25);
    if (v26)
    {
      if (cnprint::CNPrinter::GetLogLevel(v26) <= 1)
      {
        LOWORD(v62) = 12;
        LOBYTE(v74) = 1;
        uint64_t v28 = *(void *)(v11 + 88);
        double v27 = *(double *)(v11 + 96);
        sub_18E017C64(a1[1] + 56);
        double v60 = v27 + (double)v28;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v62, (unsigned __int8 *)&v74, "t,%.3lf,%s,f_TwoStateOscillator failed", v29, v30, v31, v32, v33, SLOBYTE(v60));
      }
      return 0xFFFFFFFFLL;
    }
    uint64_t v34 = 0;
    double v95 = v14 + (double)v12;
    do
    {
      *((_DWORD *)&v65 + v34) = v34;
      ++v34;
    }
    while (v34 != 6);
    uint64_t v91 = 0x100000008;
    int64x2_t v89 = &unk_1EDD19CF8;
    char v92 = &v93;
    long long v90 = xmmword_18E1FD770;
    long long v93 = v65;
    uint64_t v94 = v66;
    uint64_t v86 = 0x100000008;
    int64x2_t v84 = &unk_1EDD19CC8;
    uint64_t v87 = &v88;
    long long v85 = xmmword_18E1FD770;
    sub_18DFE2CC8((uint64_t)&v84, 0.0);
    uint64_t v81 = 0x100000008;
    long long v80 = xmmword_18E1FD760;
    int64x2_t v79 = &unk_1EDD19CC8;
    int64x2_t v82 = &v83;
    uint64_t v76 = 0x800000008;
    int64x2_t v74 = &unk_1EDD19DE8;
    long long v75 = xmmword_18E1FD750;
    uint64_t v77 = &v78;
    uint64_t v71 = 0x800000008;
    uint64_t v69 = &unk_1EDD19DE8;
    long long v70 = xmmword_18E1FD750;
    char v72 = &v73;
    sub_18E074D00(*a1, (uint64_t)&v89, (uint64_t)&v62);
    uint64_t v37 = (cnprint::CNPrinter *)sub_18E03E654((uint64_t)&v62, (uint64_t)&v84, (uint64_t *)&v95, (uint64_t)&v79, (uint64_t)&v74, (uint64_t)&v69, v35, v36);
    if (v37)
    {
      if (cnprint::CNPrinter::GetLogLevel(v37) <= 1)
      {
        LOWORD(v62) = 12;
        unsigned __int8 v68 = 1;
        uint64_t v38 = *(void *)(v11 + 88);
        double v39 = *(double *)(v11 + 96);
        sub_18E017C64(a1[1] + 56);
        double v61 = v39 + (double)v38;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v62, &v68, "t,%.3lf,%s,f_SixStateNearlyConstantVelocity failed", v40, v41, v42, v43, v44, SLOBYTE(v61));
      }
      return 0xFFFFFFFFLL;
    }
    uint64_t v45 = v82[2];
    long long v122 = *(_OWORD *)v82;
    uint64_t v123 = v45;
    double v16 = *v109;
    sub_18E075B48((uint64_t)&v62, a5, (uint64_t)&v89, (uint64_t)&v89);
    sub_18E074E1C((uint64_t)&v62, (uint64_t)&v74);
    sub_18E075B48((uint64_t)&v62, a5, (uint64_t)&v116, (uint64_t)&v116);
    sub_18E074E1C((uint64_t)&v62, (uint64_t)&v101);
  }
  uint64_t v46 = a1[1];
  int64x2_t v62 = 0;
  *(void *)&long long v63 = 0;
  v22.n128_f64[0] = v21;
  CNTimeSpan::SetTimeSpan((uint64_t *)&v62, 0, (int8x16_t)v22, v23);
  int64x2_t v101 = (void *)CNTimeSpan::operator+(v46 + 136, &v62, v47, v48);
  *(void *)&long long v102 = v49;
  v50.i64[0] = *(void *)(v46 + 192);
  *(double *)v51.i64 = v16 * 0.000001;
  int64x2_t v96 = &unk_1EDD0ADE8;
  int64x2_t v74 = &unk_1EDD0AE20;
  LOWORD(v62) = 0;
  long long v63 = 0u;
  long long v64 = 0u;
  LODWORD(v65) = 0;
  *((void *)&v65 + 1) = 0;
  uint64_t v66 = 0;
  int v67 = 0;
  uint64_t result = cnnavigation::GNSSCarrierPhase((uint64_t)&v101, (uint64_t)&v62, (uint64_t)&v122, v46 + 296, (uint64_t *)&v96, (uint64_t *)&v74, a3, 1, v50, v51, 0.0, a4);
  if (!result) {
    return result;
  }
  if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)result) <= 1)
  {
    LOWORD(v62) = 12;
    LOBYTE(v96) = 1;
    uint64_t v53 = a1[1];
    double v54 = *(double *)(v53 + 96) + (double)*(uint64_t *)(v53 + 88);
    sub_18E017C64(v53 + 56);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v62, (unsigned __int8 *)&v96, "t,%.3lf,%s,GNSSCarrierPhase,start,returned != 0", v55, v56, v57, v58, v59, SLOBYTE(v54));
  }
  return 0xFFFFFFFFLL;
}

double sub_18E114968@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 24) = 0x800000001;
  *(void *)a3 = &unk_1EDD18408;
  *(_OWORD *)(a3 + 8) = xmmword_18E215AC0;
  *(void *)(a3 + 32) = a3 + 40;
  *(void *)&double result = *(_OWORD *)&sub_18DFE2AA8(a1, a2, a3);
  return result;
}

void sub_18E1149AC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 24) = 0x800000001;
  *(void *)a3 = &unk_1EDD18408;
  *(_OWORD *)(a3 + 8) = xmmword_18E215AC0;
  *(void *)(a3 + 32) = a3 + 40;
  sub_18DFE2B44(a1, a2, a3);
}

void sub_18E114A10(_Unwind_Exception *a1)
{
  void *v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

__n128 sub_18E114A30(void *a1, uint64_t a2)
{
  long long v4 = (char *)operator new(0x200uLL);
  uint64_t v5 = v4;
  if (*(char *)(a2 + 79) < 0)
  {
    sub_18DEDE668(v4 + 56, *(void **)(a2 + 56), *(void *)(a2 + 64));
  }
  else
  {
    *(_OWORD *)(v4 + 56) = *(_OWORD *)(a2 + 56);
    *((void *)v4 + 9) = *(void *)(a2 + 72);
  }
  *((void *)v5 + 10) = *(void *)(a2 + 80);
  *(_OWORD *)(v5 + 232) = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(v5 + 248) = *(_OWORD *)(a2 + 248);
  *(_OWORD *)(v5 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(v5 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(v5 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(v5 + 216) = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(v5 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(v5 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(v5 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(v5 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(v5 + 88) = *(_OWORD *)(a2 + 88);
  long long v6 = *(_OWORD *)(a2 + 280);
  *(_OWORD *)(v5 + 264) = *(_OWORD *)(a2 + 264);
  *(_OWORD *)(v5 + 280) = v6;
  *((void *)v5 + 37) = &unk_1EDD0AE58;
  uint64_t v7 = v5 + 304;
  if (*(char *)(a2 + 327) < 0)
  {
    sub_18DEDE668(v7, *(void **)(a2 + 304), *(void *)(a2 + 312));
  }
  else
  {
    *(_OWORD *)uint64_t v7 = *(_OWORD *)(a2 + 304);
    *((void *)v5 + 40) = *(void *)(a2 + 320);
  }
  *((void *)v5 + 41) = *(void *)(a2 + 328);
  long long v8 = *(_OWORD *)(a2 + 480);
  *((_OWORD *)v5 + 29) = *(_OWORD *)(a2 + 464);
  *((_OWORD *)v5 + 30) = v8;
  *((_OWORD *)v5 + 31) = *(_OWORD *)(a2 + 496);
  long long v9 = *(_OWORD *)(a2 + 416);
  *((_OWORD *)v5 + 25) = *(_OWORD *)(a2 + 400);
  *((_OWORD *)v5 + 26) = v9;
  long long v10 = *(_OWORD *)(a2 + 448);
  *((_OWORD *)v5 + 27) = *(_OWORD *)(a2 + 432);
  *((_OWORD *)v5 + 28) = v10;
  long long v11 = *(_OWORD *)(a2 + 352);
  *((_OWORD *)v5 + 21) = *(_OWORD *)(a2 + 336);
  *((_OWORD *)v5 + 22) = v11;
  long long v12 = *(_OWORD *)(a2 + 384);
  *((_OWORD *)v5 + 23) = *(_OWORD *)(a2 + 368);
  *((_OWORD *)v5 + 24) = v12;
  *(void *)uint64_t v5 = &unk_1EDD0A4E8;
  *((_DWORD *)v5 + 2) = *(_DWORD *)(a2 + 8);
  double v13 = v5 + 16;
  if (*(char *)(a2 + 39) < 0)
  {
    sub_18DEDE668(v13, *(void **)(a2 + 16), *(void *)(a2 + 24));
  }
  else
  {
    *(_OWORD *)double v13 = *(_OWORD *)(a2 + 16);
    *((void *)v5 + 4) = *(void *)(a2 + 32);
  }
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(v5 + 40) = result;
  *(void *)uint64_t v5 = &unk_1EDD15F28;
  *a1 = sub_18E114C70;
  a1[1] = v5;
  return result;
}

void sub_18E114C18(_Unwind_Exception *a1)
{
  sub_18E0419E0(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_18E114C70(unsigned int a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v5 = a1;
  __n128 result = &unk_1EDD06000;
  switch(v5)
  {
    case 1:
      sub_18E114A30(a3, a2[1]);
      __n128 result = 0;
      break;
    case 2:
      __n128 result = 0;
      uint64_t v9 = a2[1];
      *a3 = sub_18E114C70;
      a3[1] = v9;
      goto LABEL_5;
    case 3:
      if (a4) {
        BOOL v10 = sub_18DEE4C68(a4, (uint64_t)&unk_1EDD06000);
      }
      else {
        BOOL v10 = a5 == &std::__any_imp::__unique_typeinfo<raven::h_GnssAverageDopplerArgs_RavenConvergence>::__id;
      }
      if (v10) {
        __n128 result = (void *)a2[1];
      }
      else {
        __n128 result = 0;
      }
      break;
    case 4:
      return result;
    default:
      long long v8 = (void (***)(void))a2[1];
      (**v8)(v8);
      operator delete(v8);
      __n128 result = 0;
LABEL_5:
      *a2 = 0;
      break;
  }
  return result;
}

__n128 sub_18E114D74(void *a1, uint64_t a2)
{
  long long v4 = (char *)operator new(0xF0uLL);
  *(void *)long long v4 = &unk_1EDD0A4E8;
  *((_DWORD *)v4 + 2) = *(_DWORD *)(a2 + 8);
  uint64_t v5 = v4 + 16;
  if (*(char *)(a2 + 39) < 0)
  {
    sub_18DEDE668(v5, *(void **)(a2 + 16), *(void *)(a2 + 24));
  }
  else
  {
    *(_OWORD *)uint64_t v5 = *(_OWORD *)(a2 + 16);
    *((void *)v4 + 4) = *(void *)(a2 + 32);
  }
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)long long v4 = &unk_1EDD16100;
  *(_OWORD *)(v4 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(v4 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(v4 + 216) = *(_OWORD *)(a2 + 216);
  v4[232] = *(unsigned char *)(a2 + 232);
  *(_OWORD *)(v4 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(v4 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(v4 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(v4 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(v4 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(v4 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(v4 + 88) = *(_OWORD *)(a2 + 88);
  __n128 result = *(__n128 *)(a2 + 104);
  *(__n128 *)(v4 + 104) = result;
  *a1 = sub_18E114EA4;
  a1[1] = v4;
  return result;
}

void sub_18E114E90(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_18E114EA4(unsigned int a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v5 = a1;
  __n128 result = &unk_1EDD061F0;
  switch(v5)
  {
    case 1:
      sub_18E114D74(a3, a2[1]);
      __n128 result = 0;
      break;
    case 2:
      __n128 result = 0;
      uint64_t v9 = a2[1];
      *a3 = sub_18E114EA4;
      a3[1] = v9;
      goto LABEL_5;
    case 3:
      if (a4) {
        BOOL v10 = sub_18DEE4C68(a4, (uint64_t)&unk_1EDD061F0);
      }
      else {
        BOOL v10 = a5 == &std::__any_imp::__unique_typeinfo<raven::h_MapVectorPositionConstraintArgs_RavenConvergence>::__id;
      }
      if (v10) {
        __n128 result = (void *)a2[1];
      }
      else {
        __n128 result = 0;
      }
      break;
    case 4:
      return result;
    default:
      long long v8 = (void (***)(void))a2[1];
      (**v8)(v8);
      operator delete(v8);
      __n128 result = 0;
LABEL_5:
      *a2 = 0;
      break;
  }
  return result;
}

__n128 sub_18E114FA8(void *a1, uint64_t a2)
{
  long long v4 = (char *)operator new(0xE8uLL);
  *(void *)long long v4 = &unk_1EDD0A4E8;
  *((_DWORD *)v4 + 2) = *(_DWORD *)(a2 + 8);
  uint64_t v5 = v4 + 16;
  if (*(char *)(a2 + 39) < 0)
  {
    sub_18DEDE668(v5, *(void **)(a2 + 16), *(void *)(a2 + 24));
  }
  else
  {
    *(_OWORD *)uint64_t v5 = *(_OWORD *)(a2 + 16);
    *((void *)v4 + 4) = *(void *)(a2 + 32);
  }
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)long long v4 = &unk_1EDD16128;
  *(_OWORD *)(v4 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(v4 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(v4 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(v4 + 216) = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(v4 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(v4 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(v4 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(v4 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(v4 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(v4 + 72) = *(_OWORD *)(a2 + 72);
  __n128 result = *(__n128 *)(a2 + 88);
  *(__n128 *)(v4 + 88) = result;
  *a1 = sub_18E1150D0;
  a1[1] = v4;
  return result;
}

void sub_18E1150BC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_18E1150D0(unsigned int a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v5 = a1;
  __n128 result = &unk_1EDD06208;
  switch(v5)
  {
    case 1:
      sub_18E114FA8(a3, a2[1]);
      __n128 result = 0;
      break;
    case 2:
      __n128 result = 0;
      uint64_t v9 = a2[1];
      *a3 = sub_18E1150D0;
      a3[1] = v9;
      goto LABEL_5;
    case 3:
      if (a4) {
        BOOL v10 = sub_18DEE4C68(a4, (uint64_t)&unk_1EDD06208);
      }
      else {
        BOOL v10 = a5 == &std::__any_imp::__unique_typeinfo<raven::h_MapVectorVelocityConstraintArgs_RavenConvergence>::__id;
      }
      if (v10) {
        __n128 result = (void *)a2[1];
      }
      else {
        __n128 result = 0;
      }
      break;
    case 4:
      return result;
    default:
      long long v8 = (void (***)(void))a2[1];
      (**v8)(v8);
      operator delete(v8);
      __n128 result = 0;
LABEL_5:
      *a2 = 0;
      break;
  }
  return result;
}

void sub_18E1151D4(uint64_t a1)
{
  *(void *)a1 = &unk_1EDD0A4E8;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }

  JUMPOUT(0x192FA6240);
}

__n128 sub_18E115244(void *a1, uint64_t a2)
{
  long long v4 = (char *)operator new(0x58uLL);
  *(void *)long long v4 = &unk_1EDD0A4E8;
  *((_DWORD *)v4 + 2) = *(_DWORD *)(a2 + 8);
  uint64_t v5 = v4 + 16;
  if (*(char *)(a2 + 39) < 0)
  {
    sub_18DEDE668(v5, *(void **)(a2 + 16), *(void *)(a2 + 24));
  }
  else
  {
    *(_OWORD *)uint64_t v5 = *(_OWORD *)(a2 + 16);
    *((void *)v4 + 4) = *(void *)(a2 + 32);
  }
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)long long v4 = &unk_1EDD160D8;
  *(_OWORD *)(v4 + 56) = *(_OWORD *)(a2 + 56);
  __n128 result = *(__n128 *)(a2 + 72);
  *(__n128 *)(v4 + 72) = result;
  *a1 = sub_18E115324;
  a1[1] = v4;
  return result;
}

void sub_18E115310(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_18E115324(unsigned int a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v5 = a1;
  __n128 result = &unk_1EDD061D8;
  switch(v5)
  {
    case 1:
      sub_18E115244(a3, a2[1]);
      __n128 result = 0;
      break;
    case 2:
      __n128 result = 0;
      uint64_t v9 = a2[1];
      *a3 = sub_18E115324;
      a3[1] = v9;
      goto LABEL_5;
    case 3:
      if (a4) {
        BOOL v10 = sub_18DEE4C68(a4, (uint64_t)&unk_1EDD061D8);
      }
      else {
        BOOL v10 = a5 == &std::__any_imp::__unique_typeinfo<raven::h_HorizontalDistanceTraveledArgs_RavenConvergence<double>>::__id;
      }
      if (v10) {
        __n128 result = (void *)a2[1];
      }
      else {
        __n128 result = 0;
      }
      break;
    case 4:
      return result;
    default:
      long long v8 = (void (***)(void))a2[1];
      (**v8)(v8);
      operator delete(v8);
      __n128 result = 0;
LABEL_5:
      *a2 = 0;
      break;
  }
  return result;
}

uint64_t sub_18E115428(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a2 + 12);
  uint64_t v21 = 0x100000006;
  __n128 v22 = 0;
  int32x4_t v20 = 0uLL;
  uint64_t v19 = &unk_1EDD19758;
  if ((v2 & 0x80000000) != 0) {
    __assert_rtn("CNMatrix", "cnmatrix.h", 419, "nr >= 0");
  }
  int32x4_t v5 = vdupq_lane_s32((int32x2_t)(v2 | 0x100000000), 0);
  v5.i32[1] = 1;
  int32x4_t v20 = v5;
  __n128 v22 = v23;
  if (v2)
  {
    for (uint64_t i = 0; i != v2; ++i)
      v23[i] = i;
  }
  *(void *)(a1 + 24) = 0x600000003;
  *(_OWORD *)(a1 + 8) = xmmword_18E215AD0;
  *(void *)(a1 + 32) = a1 + 40;
  *(void *)a1 = &unk_1EDD16698;
  *(void *)(a1 + 216) = 0x100000003;
  *(void *)(a1 + 184) = a2;
  *(void *)(a1 + 192) = &unk_1EDD18DC8;
  *(_OWORD *)(a1 + 200) = xmmword_18E1F6F60;
  *(void *)(a1 + 224) = a1 + 232;
  *(void *)(a1 + 272) = 0x100000006;
  *(void *)(a1 + 248) = &unk_1EDD19758;
  *(_OWORD *)(a1 + 256) = xmmword_18E1FD770;
  *(void *)(a1 + 280) = a1 + 288;
  sub_18DFEEA3C(a1 + 192, (uint64_t)&unk_1EB404A90);
  uint64_t result = sub_18DFEEA3C(a1 + 248, (uint64_t)&v19);
  uint64_t v8 = *(unsigned int *)(a1 + 208);
  uint64_t v9 = *(unsigned int *)(a1 + 264);
  *(_DWORD *)(a1 + 8) = v8;
  *(_DWORD *)(a1 + 12) = v9;
  *(_DWORD *)(a1 + 16) = v9 * v8;
  *(_DWORD *)(a1 + 20) = v8;
  if (v9)
  {
    unsigned int v10 = 0;
    uint64_t v11 = 0;
    int v12 = *(_DWORD *)(a2 + 20);
    uint64_t v13 = *(void *)(a2 + 32);
    do
    {
      if (v8)
      {
        double v14 = *(int **)(a1 + 224);
        int v15 = *(_DWORD *)(*(void *)(a1 + 280) + 4 * v11) * v12;
        uint64_t v16 = *(void *)(a1 + 32);
        unsigned int v17 = v10;
        uint64_t result = v8;
        do
        {
          int v18 = *v14++;
          *(void *)(v16 + 8 * v17++) = *(void *)(v13 + 8 * (v18 + v15));
          --result;
        }
        while (result);
      }
      ++v11;
      v10 += v8;
    }
    while (v11 != v9);
  }
  return result;
}

void *sub_18E115630(void *result)
{
  result[31] = &unk_1EDD174A8;
  result[24] = &unk_1EDD174A8;
  *uint64_t result = &unk_1EDD17478;
  return result;
}

void sub_18E115690(void *a1)
{
  a1[31] = &unk_1EDD174A8;
  a1[24] = &unk_1EDD174A8;
  *a1 = &unk_1EDD17478;
  JUMPOUT(0x192FA6240);
}

__n128 sub_18E115700(uint64_t a1, uint64_t a2)
{
  result.n128_u64[0] = 0x600000003;
  *(void *)(a1 + 24) = 0x600000003;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1EDD18F78;
  if (a1 == a2)
  {
    unsigned int v17 = "this != &(A)";
    int v18 = 603;
    goto LABEL_16;
  }
  int v3 = *(_DWORD *)(a2 + 8);
  int v4 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = v4;
  uint64_t v5 = (v4 * v3);
  *(_DWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 20) = v3;
  long long v6 = (unint64_t *)(a1 + 40);
  *(void *)(a1 + 32) = a1 + 40;
  if (*(_DWORD *)(a2 + 8) > 3u)
  {
    unsigned int v17 = "this->max_num_rows_ >= A.num_rows_";
    int v18 = 616;
    goto LABEL_16;
  }
  if (*(_DWORD *)(a2 + 12) >= 7u)
  {
    unsigned int v17 = "this->max_num_cols_ >= A.num_cols_";
    int v18 = 617;
LABEL_16:
    __assert_rtn("CNMatrix", "cnmatrix.h", v18, v17);
  }
  int v7 = *(_DWORD *)(a2 + 16);
  if (v7 > 3)
  {
    uint64_t v10 = (v7 - 2);
    uint64_t v11 = *(long long **)(a2 + 32);
    uint64_t v12 = (v7 - 1) >> 1;
    uint64_t v13 = v11;
    double v14 = (_OWORD *)(a1 + 40);
    do
    {
      long long v15 = *v13++;
      *v14++ = v15;
      --v12;
    }
    while (v12);
    uint64_t v16 = v10;
    __n128 result = *(__n128 *)((char *)v11 + v16 * 8);
    *(__n128 *)&v6[v16] = result;
  }
  else if ((int)v5 >= 1)
  {
    uint64_t v8 = *(unint64_t **)(a2 + 32);
    do
    {
      unint64_t v9 = *v8++;
      result.n128_u64[0] = v9;
      *v6++ = v9;
      --v5;
    }
    while (v5);
  }
  return result;
}

void sub_18E115830(_Unwind_Exception *a1)
{
  void *v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

void sub_18E115850(uint64_t a1)
{
  *(void *)a1 = &unk_1EDD0A4E8;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }

  JUMPOUT(0x192FA6240);
}

double sub_18E1158C0(void *a1, uint64_t a2)
{
  int v4 = (char *)operator new(0x40uLL);
  *(void *)int v4 = &unk_1EDD0A4E8;
  *((_DWORD *)v4 + 2) = *(_DWORD *)(a2 + 8);
  uint64_t v5 = v4 + 16;
  if (*(char *)(a2 + 39) < 0)
  {
    sub_18DEDE668(v5, *(void **)(a2 + 16), *(void *)(a2 + 24));
  }
  else
  {
    *(_OWORD *)uint64_t v5 = *(_OWORD *)(a2 + 16);
    *((void *)v4 + 4) = *(void *)(a2 + 32);
  }
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)int v4 = &unk_1EDD15F00;
  double result = *(double *)(a2 + 56);
  *((double *)v4 + 7) = result;
  *a1 = sub_18E115998;
  a1[1] = v4;
  return result;
}

void sub_18E115984(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_18E115998(unsigned int a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v5 = a1;
  double result = &unk_1EDD05FE8;
  switch(v5)
  {
    case 1:
      sub_18E1158C0(a3, a2[1]);
      double result = 0;
      break;
    case 2:
      double result = 0;
      uint64_t v9 = a2[1];
      *a3 = sub_18E115998;
      a3[1] = v9;
      goto LABEL_5;
    case 3:
      if (a4) {
        BOOL v10 = sub_18DEE4C68(a4, (uint64_t)&unk_1EDD05FE8);
      }
      else {
        BOOL v10 = a5 == &std::__any_imp::__unique_typeinfo<raven::h_3DDistanceTraveledArgs_RavenConvergence<double>>::__id;
      }
      if (v10) {
        double result = (void *)a2[1];
      }
      else {
        double result = 0;
      }
      break;
    case 4:
      return result;
    default:
      uint64_t v8 = (void (***)(void))a2[1];
      (**v8)(v8);
      operator delete(v8);
      double result = 0;
LABEL_5:
      *a2 = 0;
      break;
  }
  return result;
}

void *sub_18E115A9C(void *result)
{
  *double result = &unk_1EDD17478;
  return result;
}

void sub_18E115ABC(void *a1)
{
  *a1 = &unk_1EDD17478;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E115AEC(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E115AF8(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  unsigned int v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    unsigned int v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      int v4 = *(_DWORD *)(a1 + 16);
      int v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        uint64_t v6 = (v4 - 1);
        uint64_t v7 = *(void *)(a1 + 32);
        uint64_t v8 = 1;
        do
        {
          uint64_t v9 = &v13[v8];
          if (!v13[v8])
          {
            uint64_t v10 = *(void *)(v7 + 8 * v8);
            int v11 = v8;
            do
            {
              int v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              uint64_t v12 = *(void *)(v7 + 8 * v11);
              *(void *)(v7 + 8 * v11) = v10;
              *uint64_t v9 = 1;
              uint64_t v9 = &v13[v11];
              uint64_t v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

__n128 sub_18E115BF0(void *a1, uint64_t a2)
{
  int v4 = (char *)operator new(0x38uLL);
  *(void *)int v4 = &unk_1EDD0A4E8;
  *((_DWORD *)v4 + 2) = *(_DWORD *)(a2 + 8);
  int v5 = v4 + 16;
  if (*(char *)(a2 + 39) < 0)
  {
    sub_18DEDE668(v5, *(void **)(a2 + 16), *(void *)(a2 + 24));
  }
  else
  {
    *(_OWORD *)int v5 = *(_OWORD *)(a2 + 16);
    *((void *)v4 + 4) = *(void *)(a2 + 32);
  }
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(v4 + 40) = result;
  *(void *)int v4 = &unk_1EDD15368;
  *a1 = sub_18E115CC0;
  a1[1] = v4;
  return result;
}

void sub_18E115CAC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_18E115CC0(unsigned int a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v5 = a1;
  __n128 result = &unk_1EDD05BA8;
  switch(v5)
  {
    case 1:
      sub_18E115BF0(a3, a2[1]);
      __n128 result = 0;
      break;
    case 2:
      __n128 result = 0;
      uint64_t v9 = a2[1];
      *a3 = sub_18E115CC0;
      a3[1] = v9;
      goto LABEL_5;
    case 3:
      if (a4) {
        BOOL v10 = sub_18DEE4C68(a4, (uint64_t)&unk_1EDD05BA8);
      }
      else {
        BOOL v10 = a5 == &std::__any_imp::__unique_typeinfo<raven::h_PositionArgs_RavenConvergence>::__id;
      }
      if (v10) {
        __n128 result = (void *)a2[1];
      }
      else {
        __n128 result = 0;
      }
      break;
    case 4:
      return result;
    default:
      uint64_t v8 = (void (***)(void))a2[1];
      (**v8)(v8);
      operator delete(v8);
      __n128 result = 0;
LABEL_5:
      *a2 = 0;
      break;
  }
  return result;
}

__n128 sub_18E115DC4(void *a1, uint64_t a2)
{
  int v4 = (char *)operator new(0x38uLL);
  *(void *)int v4 = &unk_1EDD0A4E8;
  *((_DWORD *)v4 + 2) = *(_DWORD *)(a2 + 8);
  uint64_t v5 = v4 + 16;
  if (*(char *)(a2 + 39) < 0)
  {
    sub_18DEDE668(v5, *(void **)(a2 + 16), *(void *)(a2 + 24));
  }
  else
  {
    *(_OWORD *)uint64_t v5 = *(_OWORD *)(a2 + 16);
    *((void *)v4 + 4) = *(void *)(a2 + 32);
  }
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(v4 + 40) = result;
  *(void *)int v4 = &unk_1EDD154A8;
  *a1 = sub_18E115E94;
  a1[1] = v4;
  return result;
}

void sub_18E115E80(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_18E115E94(unsigned int a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v5 = a1;
  __n128 result = &unk_1EDD05C08;
  switch(v5)
  {
    case 1:
      sub_18E115DC4(a3, a2[1]);
      __n128 result = 0;
      break;
    case 2:
      __n128 result = 0;
      uint64_t v9 = a2[1];
      *a3 = sub_18E115E94;
      a3[1] = v9;
      goto LABEL_5;
    case 3:
      if (a4) {
        BOOL v10 = sub_18DEE4C68(a4, (uint64_t)&unk_1EDD05C08);
      }
      else {
        BOOL v10 = a5 == &std::__any_imp::__unique_typeinfo<raven::h_UserSpeedArgs_RavenConvergence>::__id;
      }
      if (v10) {
        __n128 result = (void *)a2[1];
      }
      else {
        __n128 result = 0;
      }
      break;
    case 4:
      return result;
    default:
      uint64_t v8 = (void (***)(void))a2[1];
      (**v8)(v8);
      operator delete(v8);
      __n128 result = 0;
LABEL_5:
      *a2 = 0;
      break;
  }
  return result;
}

__n128 sub_18E115F98(void *a1, uint64_t a2)
{
  int v4 = (char *)operator new(0x38uLL);
  *(void *)int v4 = &unk_1EDD0A4E8;
  *((_DWORD *)v4 + 2) = *(_DWORD *)(a2 + 8);
  uint64_t v5 = v4 + 16;
  if (*(char *)(a2 + 39) < 0)
  {
    sub_18DEDE668(v5, *(void **)(a2 + 16), *(void *)(a2 + 24));
  }
  else
  {
    *(_OWORD *)uint64_t v5 = *(_OWORD *)(a2 + 16);
    *((void *)v4 + 4) = *(void *)(a2 + 32);
  }
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(v4 + 40) = result;
  *(void *)int v4 = &unk_1EDD15390;
  *a1 = sub_18E116068;
  a1[1] = v4;
  return result;
}

void sub_18E116054(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_18E116068(unsigned int a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v5 = a1;
  __n128 result = &unk_1EDD05BC0;
  switch(v5)
  {
    case 1:
      sub_18E115F98(a3, a2[1]);
      __n128 result = 0;
      break;
    case 2:
      __n128 result = 0;
      uint64_t v9 = a2[1];
      *a3 = sub_18E116068;
      a3[1] = v9;
      goto LABEL_5;
    case 3:
      if (a4) {
        BOOL v10 = sub_18DEE4C68(a4, (uint64_t)&unk_1EDD05BC0);
      }
      else {
        BOOL v10 = a5 == &std::__any_imp::__unique_typeinfo<raven::h_VelocityArgs_RavenConvergence>::__id;
      }
      if (v10) {
        __n128 result = (void *)a2[1];
      }
      else {
        __n128 result = 0;
      }
      break;
    case 4:
      return result;
    default:
      uint64_t v8 = (void (***)(void))a2[1];
      (**v8)(v8);
      operator delete(v8);
      __n128 result = 0;
LABEL_5:
      *a2 = 0;
      break;
  }
  return result;
}

void *sub_18E11616C(void *result)
{
  *__n128 result = &unk_1EDD174D8;
  return result;
}

void sub_18E11618C(void *a1)
{
  *a1 = &unk_1EDD174D8;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E1161BC(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E1161C8(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  unsigned int v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    unsigned int v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      int v4 = *(_DWORD *)(a1 + 16);
      int v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        uint64_t v6 = (v4 - 1);
        uint64_t v7 = *(void *)(a1 + 32);
        uint64_t v8 = 1;
        do
        {
          uint64_t v9 = &v13[v8];
          if (!v13[v8])
          {
            int v10 = *(_DWORD *)(v7 + 4 * v8);
            int v11 = v8;
            do
            {
              int v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              int v12 = *(_DWORD *)(v7 + 4 * v11);
              *(_DWORD *)(v7 + 4 * v11) = v10;
              *uint64_t v9 = 1;
              uint64_t v9 = &v13[v11];
              int v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

uint64_t sub_18E1162C0(uint64_t result, int a2, int *a3)
{
  if (*(_DWORD *)(result + 16) != a2) {
    __assert_rtn("operator=", "cnsubvector.h", 347, "this->num_elements_ == A.num_elements_");
  }
  if (a2 >= 1)
  {
    unsigned int v3 = *(int **)(result + 112);
    uint64_t v4 = *(void *)(*(void *)(result + 72) + 32);
    int v5 = *(_DWORD **)(result + 32);
    uint64_t v6 = a2;
    do
    {
      int v8 = *a3++;
      int v7 = v8;
      uint64_t v9 = *v3++;
      *(_DWORD *)(v4 + 4 * v9) = v7;
      *v5++ = v7;
      --v6;
    }
    while (v6);
  }
  return result;
}

void *sub_18E116334(void *result)
{
  result[10] = &unk_1EDD174A8;
  *__n128 result = &unk_1EDD174A8;
  return result;
}

void sub_18E116374(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v104 = *MEMORY[0x1E4F143B8];
  if (!*(_DWORD *)(a1 + 1540))
  {
    sub_18DFE2F24(a1 + 768, a1 + 8);
    sub_18DFE2F24(a1 + 872, a1 + 112);
    sub_18DFE2F24(a1 + 1424, a1 + 664);
  }
  unsigned int v6 = *(_DWORD *)(a1 + 776);
  unsigned int v7 = *(_DWORD *)(a1 + 780);
  if (v6 <= v7) {
    int v8 = *(_DWORD *)(a1 + 780);
  }
  else {
    int v8 = *(_DWORD *)(a1 + 776);
  }
  if (v7) {
    BOOL v9 = v6 == 0;
  }
  else {
    BOOL v9 = 1;
  }
  if (v9) {
    int v10 = 0;
  }
  else {
    int v10 = v8;
  }
  if (v10 != a2)
  {
    LOWORD(v90) = 2;
    LOBYTE(v81) = 4;
    unsigned __int8 v11 = cnprint::CNLogFormatter::FormatGeneral((const void **)(a1 + 1704), "ReorderStates(): Length(order) != Length(x).");
    if (*(char *)(a1 + 1727) >= 0) {
      LOBYTE(v17) = v11;
    }
    else {
      uint64_t v17 = *(void *)(a1 + 1704);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v90, (unsigned __int8 *)&v81, "%s", v12, v13, v14, v15, v16, v17);
  }
  uint64_t v101 = 0x100000008;
  long long v102 = 0;
  int32x4_t v100 = 0uLL;
  v99[8] = &unk_1EDD19C98;
  if ((a2 & 0x80000000) != 0) {
    __assert_rtn("CNMatrix", "cnmatrix.h", 419, "nr >= 0");
  }
  int32x4_t v18 = vdupq_lane_s32((int32x2_t)(a2 | 0x100000000), 0);
  v18.i32[1] = 1;
  int32x4_t v100 = v18;
  uint64_t v19 = v103;
  long long v102 = v103;
  if (a2 > 3)
  {
    bzero(v103, a2 - 1);
    v103[a2 - 1] = 0;
    uint64_t v20 = a2;
  }
  else
  {
    if (!a2)
    {
      char v23 = 0;
      goto LABEL_29;
    }
    uint64_t v20 = a2;
    bzero(v103, a2);
  }
  uint64_t v21 = 0;
  uint64_t v22 = *(void *)(a3 + 32);
  char v23 = 1;
  do
  {
    uint64_t v24 = *(int *)(v22 + 4 * v21);
    if (v19[v24])
    {
      LOWORD(v90) = 2;
      LOBYTE(v81) = 4;
      cnprint::CNLogFormatter::FormatGeneral((const void **)(a1 + 1704), "ReorderStates(): order must reference each state once and only once.");
      if (*(char *)(a1 + 1727) >= 0) {
        LOBYTE(v30) = a1 - 88;
      }
      else {
        uint64_t v30 = *(void *)(a1 + 1704);
      }
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v90, (unsigned __int8 *)&v81, "%s", v25, v26, v27, v28, v29, v30);
      uint64_t v22 = *(void *)(a3 + 32);
      uint64_t v19 = v102;
      uint64_t v24 = *(int *)(v22 + 4 * v21);
    }
    v19[v24] = 1;
    ++v21;
  }
  while (v20 != v21);
LABEL_29:
  sub_18DFE2F24(a1 + 8, a1 + 768);
  sub_18DFE2F24(a1 + 112, a1 + 872);
  sub_18DFE2F24(a1 + 664, a1 + 1424);
  if (v23)
  {
    uint64_t v31 = 0;
    while (1)
    {
      int v32 = *(_DWORD *)(*(void *)(a3 + 32) + 4 * v31);
      *(void *)(*(void *)(a1 + 800) + 8 * v31) = *(void *)(*(void *)(a1 + 40) + 8 * v32);
      sub_18E116AF0((uint64_t)&v90, a1 + 112, v32);
      sub_18E116AF0((uint64_t)&v81, a1 + 872, v31);
      int v33 = v82;
      if (v82 != v91) {
        break;
      }
      uint64_t v34 = DWORD1(v82);
      if (DWORD1(v82) != DWORD1(v91))
      {
        int v73 = 437;
        int64x2_t v74 = "this->num_cols_ == A.num_cols_";
LABEL_56:
        __assert_rtn("operator=", "cnsubmatrix.h", v73, v74);
      }
      if (DWORD1(v82))
      {
        int v35 = 0;
        int v36 = 0;
        uint64_t v37 = 0;
        uint64_t v38 = v93;
        double v39 = v87;
        uint64_t v40 = v88;
        int v41 = HIDWORD(v82);
        uint64_t v42 = v86;
        uint64_t v43 = v84;
        do
        {
          if (v33)
          {
            int v44 = *(_DWORD *)(v42 + 20) * *(_DWORD *)(v40 + 4 * v37);
            uint64_t v45 = *(void *)(v42 + 32);
            int v46 = v35;
            int8x16_t v47 = v39;
            int v48 = v36;
            int v49 = v33;
            do
            {
              uint64_t v50 = v38[v46];
              int v51 = *v47++;
              *(void *)(v45 + 8 * (v51 + v44)) = v50;
              v43[v48++] = v50;
              ++v46;
              --v49;
            }
            while (v49);
          }
          ++v37;
          v36 += v41;
          v35 += v33;
        }
        while (v37 != v34);
      }
      *(void *)(*(void *)(a1 + 1456) + 8 * v31++) = *(void *)(*(void *)(a1 + 696) + 8 * v32);
      if (v31 == a2)
      {
        sub_18DFE2F24(a1 + 112, a1 + 872);
        uint64_t v52 = 0;
        uint64_t v53 = "this->num_rows_ == A.num_rows_";
        while (1)
        {
          sub_18E116D48((uint64_t)&v90, a1 + 112, *(_DWORD *)(*(void *)(a3 + 32) + 4 * v52));
          sub_18E116D48((uint64_t)&v81, a1 + 872, v52);
          int v54 = v82;
          if (v82 != v91) {
            break;
          }
          uint64_t v55 = DWORD1(v82);
          if (DWORD1(v82) != DWORD1(v91))
          {
            int v75 = 437;
            uint64_t v53 = "this->num_cols_ == A.num_cols_";
LABEL_59:
            __assert_rtn("operator=", "cnsubmatrix.h", v75, v53);
          }
          if (DWORD1(v82))
          {
            int v56 = 0;
            int v57 = 0;
            uint64_t v58 = 0;
            uint64_t v59 = v93;
            double v60 = v87;
            uint64_t v61 = v89;
            int v62 = HIDWORD(v82);
            uint64_t v63 = v86;
            long long v64 = v84;
            do
            {
              if (v54)
              {
                int v65 = *(_DWORD *)(v63 + 20) * *(_DWORD *)(v61 + 4 * v58);
                uint64_t v66 = *(void *)(v63 + 32);
                int v67 = v56;
                unsigned __int8 v68 = v60;
                int v69 = v57;
                int v70 = v54;
                do
                {
                  uint64_t v71 = v59[v67];
                  int v72 = *v68++;
                  *(void *)(v66 + 8 * (v72 + v65)) = v71;
                  v64[v69++] = v71;
                  ++v67;
                  --v70;
                }
                while (v70);
              }
              ++v58;
              v57 += v62;
              v56 += v54;
            }
            while (v58 != v55);
          }
          if (++v52 == a2) {
            goto LABEL_52;
          }
        }
        int v75 = 436;
        goto LABEL_59;
      }
    }
    int v73 = 436;
    int64x2_t v74 = "this->num_rows_ == A.num_rows_";
    goto LABEL_56;
  }
  sub_18DFE2F24(a1 + 112, a1 + 872);
LABEL_52:
  uint64_t v83 = 0x800000008;
  uint64_t v81 = &unk_1EDD19DE8;
  long long v82 = xmmword_18E1FD750;
  int64x2_t v84 = &v85;
  uint64_t v78 = 0x100000008;
  uint64_t v76 = &unk_1EDD19CC8;
  long long v77 = xmmword_18E1FD760;
  int64x2_t v79 = &v80;
  uint64_t v97 = 0x100000008;
  long long v96 = xmmword_18E1FD760;
  double v95 = &unk_1EDD19CC8;
  uint64_t v98 = v99;
  uint64_t v92 = 0x800000008;
  long long v90 = &unk_1EDD19DE8;
  long long v91 = xmmword_18E1FD750;
  long long v93 = &v94;
  sub_18E075FB8(a1 + 872, a1 + 1424, (uint64_t)&v95, (uint64_t)&v90, (uint64_t)&v76, (uint64_t)&v81);
  sub_18DFE2F24(a1 + 872, (uint64_t)&v81);
  sub_18DFE2F24(a1 + 1424, (uint64_t)&v76);
  sub_18DFE2F24(a1 + 8, a1 + 768);
  sub_18DFE2F24(a1 + 112, a1 + 872);
  sub_18DFE2F24(a1 + 664, a1 + 1424);
  *(_DWORD *)(a1 + 1540) = 1;
}

uint64_t sub_18E1169C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 24) = 0x100000008;
  *(_OWORD *)(a1 + 8) = xmmword_18E1FD760;
  *(void *)(a1 + 32) = a1 + 40;
  *(void *)a1 = &unk_1EDD16EA8;
  *(void *)(a1 + 72) = a2;
  *(void *)(a1 + 104) = 0x100000008;
  *(void *)(a1 + 80) = &unk_1EDD19CF8;
  *(_OWORD *)(a1 + 88) = xmmword_18E1FD760;
  *(void *)(a1 + 112) = a1 + 120;
  sub_18DFEEA3C(a1 + 80, a3);
  int v6 = *(_DWORD *)(a1 + 88);
  int v5 = *(_DWORD *)(a1 + 92);
  *(_DWORD *)(a1 + 8) = v6;
  *(_DWORD *)(a1 + 12) = v5;
  uint64_t v7 = (v5 * v6);
  *(_DWORD *)(a1 + 16) = v7;
  *(_DWORD *)(a1 + 20) = v6;
  if ((int)v7 >= 1)
  {
    int v8 = *(int **)(a1 + 112);
    uint64_t v9 = *(void *)(a2 + 32);
    int v10 = *(_DWORD **)(a1 + 32);
    do
    {
      uint64_t v11 = *v8++;
      *v10++ = *(_DWORD *)(v9 + 4 * v11);
      --v7;
    }
    while (v7);
  }
  return a1;
}

void sub_18E116AA0(void *a1)
{
  a1[10] = &unk_1EDD174A8;
  *a1 = &unk_1EDD174A8;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E116AF0(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v30 = 0x100000001;
  uint64_t v28 = &unk_1EDD18078;
  *(void *)&long long v5 = 0x100000001;
  *((void *)&v5 + 1) = 0x100000001;
  long long v29 = v5;
  uint64_t v31 = &v32;
  int v32 = a3;
  int v6 = *(_DWORD *)(a2 + 12);
  uint64_t v25 = 0x100000008;
  uint64_t v20 = &unk_1EDD19CF8;
  int v21 = v6;
  int v22 = 1;
  int v23 = v6;
  int v24 = v6;
  uint64_t v26 = v27;
  if (v6)
  {
    for (int i = 0; i != v6; ++i)
      v27[i] = i;
  }
  *(void *)(a1 + 24) = 0x800000001;
  *(_OWORD *)(a1 + 8) = xmmword_18E215AC0;
  *(void *)(a1 + 32) = a1 + 40;
  *(void *)a1 = &unk_1EDD16368;
  *(void *)(a1 + 136) = 0x100000001;
  *(void *)(a1 + 104) = a2;
  *(void *)(a1 + 112) = &unk_1EDD18078;
  *(_OWORD *)(a1 + 120) = v5;
  *(void *)(a1 + 144) = a1 + 152;
  *(void *)(a1 + 184) = 0x100000008;
  *(void *)(a1 + 160) = &unk_1EDD19CF8;
  *(_OWORD *)(a1 + 168) = xmmword_18E1FD760;
  *(void *)(a1 + 192) = a1 + 200;
  sub_18DFEEA3C(a1 + 112, (uint64_t)&v28);
  uint64_t result = sub_18DFEEA3C(a1 + 160, (uint64_t)&v20);
  uint64_t v9 = *(unsigned int *)(a1 + 128);
  uint64_t v10 = *(unsigned int *)(a1 + 176);
  *(_DWORD *)(a1 + 8) = v9;
  *(_DWORD *)(a1 + 12) = v10;
  *(_DWORD *)(a1 + 16) = v10 * v9;
  *(_DWORD *)(a1 + 20) = v9;
  if (v10)
  {
    unsigned int v11 = 0;
    uint64_t v12 = 0;
    int v13 = *(_DWORD *)(a2 + 20);
    uint64_t v14 = *(void *)(a2 + 32);
    do
    {
      if (v9)
      {
        uint64_t v15 = *(int **)(a1 + 144);
        int v16 = *(_DWORD *)(*(void *)(a1 + 192) + 4 * v12) * v13;
        uint64_t v17 = *(void *)(a1 + 32);
        unsigned int v18 = v11;
        uint64_t result = v9;
        do
        {
          int v19 = *v15++;
          *(void *)(v17 + 8 * v18++) = *(void *)(v14 + 8 * (v19 + v16));
          --result;
        }
        while (result);
      }
      ++v12;
      v11 += v9;
    }
    while (v12 != v10);
  }
  return result;
}

void *sub_18E116CE8(void *result)
{
  result[20] = &unk_1EDD174A8;
  result[14] = &unk_1EDD174A8;
  *uint64_t result = &unk_1EDD17478;
  return result;
}

uint64_t sub_18E116D48(uint64_t a1, uint64_t a2, int a3)
{
  int v5 = *(_DWORD *)(a2 + 8);
  uint64_t v30 = 0x100000008;
  uint64_t v25 = &unk_1EDD19CF8;
  int v26 = v5;
  int v27 = 1;
  int v28 = v5;
  int v29 = v5;
  uint64_t v31 = v32;
  if (v5)
  {
    for (int i = 0; i != v5; ++i)
      v32[i] = i;
  }
  uint64_t v22 = 0x100000001;
  uint64_t v20 = &unk_1EDD18078;
  *(void *)&long long v7 = 0x100000001;
  *((void *)&v7 + 1) = 0x100000001;
  long long v21 = v7;
  int v23 = &v24;
  int v24 = a3;
  *(void *)(a1 + 24) = 0x100000008;
  *(_OWORD *)(a1 + 8) = xmmword_18E1FD760;
  *(void *)(a1 + 32) = a1 + 40;
  *(void *)a1 = &unk_1EDD16818;
  *(void *)(a1 + 136) = 0x100000008;
  *(void *)(a1 + 104) = a2;
  *(void *)(a1 + 112) = &unk_1EDD19CF8;
  *(_OWORD *)(a1 + 120) = xmmword_18E1FD760;
  *(void *)(a1 + 144) = a1 + 152;
  *(void *)(a1 + 208) = 0x100000001;
  *(void *)(a1 + 184) = &unk_1EDD18078;
  *(_OWORD *)(a1 + 192) = v7;
  *(void *)(a1 + 216) = a1 + 224;
  sub_18DFEEA3C(a1 + 112, (uint64_t)&v25);
  uint64_t result = sub_18DFEEA3C(a1 + 184, (uint64_t)&v20);
  uint64_t v9 = *(unsigned int *)(a1 + 128);
  uint64_t v10 = *(unsigned int *)(a1 + 200);
  *(_DWORD *)(a1 + 8) = v9;
  *(_DWORD *)(a1 + 12) = v10;
  *(_DWORD *)(a1 + 16) = v10 * v9;
  *(_DWORD *)(a1 + 20) = v9;
  if (v10)
  {
    unsigned int v11 = 0;
    uint64_t v12 = 0;
    int v13 = *(_DWORD *)(a2 + 20);
    uint64_t v14 = *(void *)(a2 + 32);
    do
    {
      if (v9)
      {
        uint64_t v15 = *(int **)(a1 + 144);
        int v16 = *(_DWORD *)(*(void *)(a1 + 216) + 4 * v12) * v13;
        uint64_t v17 = *(void *)(a1 + 32);
        unsigned int v18 = v11;
        uint64_t result = v9;
        do
        {
          int v19 = *v15++;
          *(void *)(v17 + 8 * v18++) = *(void *)(v14 + 8 * (v19 + v16));
          --result;
        }
        while (result);
      }
      ++v12;
      v11 += v9;
    }
    while (v12 != v10);
  }
  return result;
}

void *sub_18E116F30(void *result)
{
  result[23] = &unk_1EDD174A8;
  result[14] = &unk_1EDD174A8;
  *uint64_t result = &unk_1EDD17478;
  return result;
}

void *sub_18E116F90(void *result)
{
  *uint64_t result = &unk_1EDD17448;
  return result;
}

void sub_18E116FB0(void *a1)
{
  *a1 = &unk_1EDD17448;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E116FE0(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E116FEC(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  unsigned int v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    unsigned int v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      int v4 = *(_DWORD *)(a1 + 16);
      int v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        uint64_t v6 = (v4 - 1);
        uint64_t v7 = *(void *)(a1 + 32);
        uint64_t v8 = 1;
        do
        {
          uint64_t v9 = &v13[v8];
          if (!v13[v8])
          {
            char v10 = *(unsigned char *)(v7 + v8);
            int v11 = v8;
            do
            {
              int v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              char v12 = *(unsigned char *)(v7 + v11);
              *(unsigned char *)(v7 + v11) = v10;
              *uint64_t v9 = 1;
              uint64_t v9 = &v13[v11];
              char v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

void sub_18E1170E4(void *a1)
{
  a1[20] = &unk_1EDD174A8;
  a1[14] = &unk_1EDD174A8;
  *a1 = &unk_1EDD17478;
  JUMPOUT(0x192FA6240);
}

void sub_18E117154(void *a1)
{
  a1[23] = &unk_1EDD174A8;
  a1[14] = &unk_1EDD174A8;
  *a1 = &unk_1EDD17478;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E1171C4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 24) = 0x100000008;
  *(void *)(result + 32) = 0;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)uint64_t result = &unk_1EDD19CF8;
  if (result == a2)
  {
    uint64_t v15 = "this != &(A)";
    int v16 = 603;
    goto LABEL_16;
  }
  int v2 = *(_DWORD *)(a2 + 8);
  int v3 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(result + 8) = v2;
  *(_DWORD *)(result + 12) = v3;
  uint64_t v4 = (v3 * v2);
  *(_DWORD *)(result + 16) = v4;
  *(_DWORD *)(result + 20) = v2;
  int v5 = (_DWORD *)(result + 40);
  *(void *)(result + 32) = result + 40;
  if (*(_DWORD *)(a2 + 8) > 8u)
  {
    uint64_t v15 = "this->max_num_rows_ >= A.num_rows_";
    int v16 = 616;
    goto LABEL_16;
  }
  if (*(_DWORD *)(a2 + 12) >= 2u)
  {
    uint64_t v15 = "this->max_num_cols_ >= A.num_cols_";
    int v16 = 617;
LABEL_16:
    __assert_rtn("CNMatrix", "cnmatrix.h", v16, v15);
  }
  int v6 = *(_DWORD *)(a2 + 16);
  if (v6 > 3)
  {
    uint64_t v9 = (v6 - 1);
    char v10 = *(int **)(a2 + 32);
    int v11 = v10;
    char v12 = (_DWORD *)(result + 40);
    uint64_t v13 = v9;
    do
    {
      int v14 = *v11++;
      *v12++ = v14;
      --v13;
    }
    while (v13);
    v5[v9] = v10[v9];
  }
  else if ((int)v4 >= 1)
  {
    uint64_t v7 = *(int **)(a2 + 32);
    do
    {
      int v8 = *v7++;
      *v5++ = v8;
      --v4;
    }
    while (v4);
  }
  return result;
}

void sub_18E1172EC(_Unwind_Exception *a1)
{
  void *v1 = &unk_1EDD174A8;
  _Unwind_Resume(a1);
}

uint64_t sub_18E11730C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 24) = 0x100000008;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)uint64_t result = &unk_1EDD19CF8;
  int v3 = *(_DWORD *)(a2 + 8);
  int v2 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(result + 8) = v3;
  *(_DWORD *)(result + 12) = v2;
  uint64_t v4 = (v2 * v3);
  *(_DWORD *)(result + 16) = v4;
  *(_DWORD *)(result + 20) = v3;
  int v5 = (_DWORD *)(result + 40);
  *(void *)(result + 32) = result + 40;
  if (*(_DWORD *)(a2 + 8) > 8u)
  {
    int v8 = "this->max_num_rows_ >= A.NumRows()";
    int v9 = 567;
    goto LABEL_9;
  }
  if (*(_DWORD *)(a2 + 12) > 1u)
  {
    int v8 = "this->max_num_cols_ >= A.NumCols()";
    int v9 = 568;
LABEL_9:
    __assert_rtn("CNMatrix", "cnmatrix.h", v9, v8);
  }
  if ((int)v4 >= 1)
  {
    int v6 = *(int **)(a2 + 32);
    do
    {
      int v7 = *v6++;
      *v5++ = v7;
      --v4;
    }
    while (v4);
  }
  return result;
}

void sub_18E1173DC(_Unwind_Exception *a1)
{
  void *v1 = &unk_1EDD174A8;
  _Unwind_Resume(a1);
}

void sub_18E117400(void *a1)
{
  sub_18E1175E8(a1);

  JUMPOUT(0x192FA6240);
}

void sub_18E117438()
{
}

void sub_18E117464()
{
}

void sub_18E11756C()
{
}

void *sub_18E1175E8(void *a1)
{
  *a1 = &unk_1EDD178F8;
  uint64_t v2 = a1[5];
  a1[5] = 0;
  if (v2) {
    MEMORY[0x192FA6220](v2, 0x1000C8000313F17);
  }
  *a1 = &unk_1EDD17478;
  return a1;
}

void sub_18E117664(void *a1)
{
  *a1 = &unk_1EDD17388;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E117694(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E1176A0(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    unsigned int v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      int v4 = *(_DWORD *)(a1 + 16);
      int v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        uint64_t v6 = (v4 - 1);
        uint64_t v7 = 1;
        do
        {
          int v8 = &v13[v7];
          if (!v13[v7])
          {
            uint64_t v9 = *(void *)(*(void *)(a1 + 32) + 8 * v7);
            int v10 = v7;
            do
            {
              int v10 = (int)(v10 * (v3 + v1 - v5)) % (int)v6;
              uint64_t v11 = *(void *)(a1 + 32);
              uint64_t v12 = *(void *)(v11 + 8 * v10);
              *(void *)(v11 + 8 * v10) = v9;
              *int v8 = 1;
              int v8 = &v13[v10];
              uint64_t v9 = v12;
            }
            while (!*v8);
          }
          ++v7;
        }
        while (v7 != v6);
      }
    }
  }
}

void *sub_18E117778(void *result)
{
  *uint64_t result = &unk_1EDD17478;
  return result;
}

void sub_18E117798(void *a1)
{
  *a1 = &unk_1EDD17478;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E1177C8(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E1177D4(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  unsigned int v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    unsigned int v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      int v4 = *(_DWORD *)(a1 + 16);
      int v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        uint64_t v6 = (v4 - 1);
        uint64_t v7 = *(void *)(a1 + 32);
        uint64_t v8 = 1;
        do
        {
          uint64_t v9 = &v13[v8];
          if (!v13[v8])
          {
            uint64_t v10 = *(void *)(v7 + 8 * v8);
            int v11 = v8;
            do
            {
              int v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              uint64_t v12 = *(void *)(v7 + 8 * v11);
              *(void *)(v7 + 8 * v11) = v10;
              *uint64_t v9 = 1;
              uint64_t v9 = &v13[v11];
              uint64_t v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

void *sub_18E1178CC(void *result)
{
  *uint64_t result = &unk_1EDD17478;
  return result;
}

void sub_18E1178EC(void *a1)
{
  *a1 = &unk_1EDD17478;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E11791C(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E117928(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  unsigned int v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    unsigned int v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      int v4 = *(_DWORD *)(a1 + 16);
      int v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        uint64_t v6 = (v4 - 1);
        uint64_t v7 = *(void *)(a1 + 32);
        uint64_t v8 = 1;
        do
        {
          uint64_t v9 = &v13[v8];
          if (!v13[v8])
          {
            uint64_t v10 = *(void *)(v7 + 8 * v8);
            int v11 = v8;
            do
            {
              int v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              uint64_t v12 = *(void *)(v7 + 8 * v11);
              *(void *)(v7 + 8 * v11) = v10;
              *uint64_t v9 = 1;
              uint64_t v9 = &v13[v11];
              uint64_t v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

uint64_t sub_18E117A20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  uint64_t v26 = MEMORY[0x1F4188790](a1);
  uint64_t v185 = v28;
  uint64_t v186 = v27;
  uint64_t v190 = v29;
  unsigned int v31 = v30;
  uint64_t v192 = v32;
  uint64_t v191 = v33;
  unsigned int v35 = v34;
  uint64_t v36 = v26;
  if (a19 >= 1)
  {
    uint64_t v37 = 0;
    do
    {
      sub_18DFF2980((uint64_t)&v199, *(void *)(a11 + 32) + v37);
      v37 += 64;
    }
    while ((unint64_t)a19 << 6 != v37);
    uint64_t v38 = 0;
    uint64_t v39 = 0;
    do
    {
      sub_18DFF2980((uint64_t)&v199, *(void *)(a13 + 32) + v39);
      sub_18DFE2FA8((uint64_t)&v199, *(void *)(a14 + 32) + v38);
      sub_18DFE2FA8((uint64_t)&v199, *(void *)(a14 + 32) + v38);
      v39 += 64;
      v38 += 112;
    }
    while ((unint64_t)a19 << 6 != v39);
  }
  sub_18E074C34(":", a16, 0, (uint64_t)&__p);
  uint64_t v201 = v202;
  uint64_t v40 = HIDWORD(__p.__r_.__value_.__r.__words[1]);
  LODWORD(v200.__r_.__value_.__l.__data_) = 1;
  HIDWORD(v200.__r_.__value_.__r.__words[0]) = HIDWORD(__p.__r_.__value_.__r.__words[1]);
  HIDWORD(v200.__r_.__value_.__r.__words[2]) = 1;
  LODWORD(v200.__r_.__value_.__r.__words[1]) = HIDWORD(__p.__r_.__value_.__r.__words[1]);
  *(std::string::size_type *)((char *)&v200.__r_.__value_.__r.__words[1] + 4) = 0x200000001;
  if (HIDWORD(__p.__r_.__value_.__r.__words[1]))
  {
    uint64_t v41 = 0;
    uint64_t v42 = v205;
    unsigned int v43 = __p.__r_.__value_.__r.__words[1];
    uint64_t v44 = LODWORD(__p.__r_.__value_.__r.__words[1]) - 1;
    int v45 = 1;
    do
    {
      int v46 = *((_DWORD *)v42 + v43 * v41);
      unsigned int v47 = v45;
      uint64_t v48 = v44;
      if (v43 >= 2)
      {
        do
        {
          v46 += *((_DWORD *)v42 + v47++);
          --v48;
        }
        while (v48);
      }
      v202[v41++] = v46;
      v45 += v43;
    }
    while (v41 != v40);
  }
  sub_18E074C34(":", a16, 1, (uint64_t)&__p);
  uint64_t v201 = v202;
  uint64_t v49 = HIDWORD(__p.__r_.__value_.__r.__words[1]);
  LODWORD(v200.__r_.__value_.__l.__data_) = 1;
  HIDWORD(v200.__r_.__value_.__r.__words[0]) = HIDWORD(__p.__r_.__value_.__r.__words[1]);
  HIDWORD(v200.__r_.__value_.__r.__words[2]) = 1;
  LODWORD(v200.__r_.__value_.__r.__words[1]) = HIDWORD(__p.__r_.__value_.__r.__words[1]);
  *(std::string::size_type *)((char *)&v200.__r_.__value_.__r.__words[1] + 4) = 0x200000001;
  if (HIDWORD(__p.__r_.__value_.__r.__words[1]))
  {
    uint64_t v50 = 0;
    int v51 = v205;
    unsigned int v52 = __p.__r_.__value_.__r.__words[1];
    uint64_t v53 = LODWORD(__p.__r_.__value_.__r.__words[1]) - 1;
    int v54 = 1;
    do
    {
      int v55 = *((_DWORD *)v51 + v52 * v50);
      unsigned int v56 = v54;
      uint64_t v57 = v53;
      if (v52 >= 2)
      {
        do
        {
          v55 += *((_DWORD *)v51 + v56++);
          --v57;
        }
        while (v57);
      }
      v202[v50++] = v55;
      v54 += v52;
    }
    while (v50 != v49);
  }
  uint64_t v193 = v36;
  unsigned int v189 = v35;
  unsigned int v187 = v31;
  v200.__r_.__value_.__r.__words[2] = 0x100000002;
  *(_OWORD *)&v200.__r_.__value_.__l.__data_ = xmmword_18E1FD1A0;
  uint64_t v199 = &unk_1EDD18B58;
  uint64_t v201 = v202;
  uint64_t LogLevel = (cnprint::CNPrinter *)sub_18E07519C(a23, 1, (uint64_t)&v199);
  double v59 = *(double *)(a26 + 64);
  int v60 = *(unsigned __int8 *)(a26 + 32);
  int v184 = *(unsigned __int8 *)(a26 + 33);
  if (a19 >= 1)
  {
    uint64_t v61 = 0;
    do
    {
      int v62 = *(_DWORD *)(*(void *)(a9 + 32) + 4 * v61);
      int v63 = *(_DWORD *)(*(void *)(a12 + 32) + 4 * v61);
      if (v62 <= v63)
      {
        ++v61;
      }
      else
      {
        LOWORD(v199) = 2;
        __p.__r_.__value_.__s.__data_[0] = 2;
        cnprint::CNLogFormatter::FormatWarning((cnprint::CNLogFormatter *)(v36 + 1704), "%d measurements > %d noise sources in measurement function %d.", v62, v63, ++v61);
        if (*(char *)(v36 + 1727) >= 0) {
          LOBYTE(v69) = v36 - 88;
        }
        else {
          uint64_t v69 = *(void *)(v36 + 1704);
        }
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v199, (unsigned __int8 *)&__p, "%s", v64, v65, v66, v67, v68, v69);
      }
    }
    while (v61 != a19);
  }
  if (*(_DWORD *)a26)
  {
    uint64_t LogLevel = (cnprint::CNPrinter *)cnprint::CNPrinter::GetLogLevel(LogLevel);
    if (LogLevel <= 1)
    {
      LOWORD(v199) = 2;
      __p.__r_.__value_.__s.__data_[0] = 1;
      unsigned __int8 v70 = cnprint::CNLogFormatter::FormatWarning((cnprint::CNLogFormatter *)(v36 + 1704), "PredictAndUpdate is only compatible with NewtonRaphson solver.");
      if (*(char *)(v36 + 1727) >= 0) {
        LOBYTE(v76) = v70;
      }
      else {
        uint64_t v76 = *(void *)(v36 + 1704);
      }
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v199, (unsigned __int8 *)&__p, "%s", v71, v72, v73, v74, v75, v76);
    }
  }
  if (*(int *)(a26 + 4) >= 2 && cnprint::CNPrinter::GetLogLevel(LogLevel) <= 1)
  {
    LOWORD(v199) = 2;
    __p.__r_.__value_.__s.__data_[0] = 1;
    unsigned __int8 v77 = cnprint::CNLogFormatter::FormatWarning((cnprint::CNLogFormatter *)(v36 + 1704), "PredictAndUpdate is only compatible with single-iteration least squares solutions.");
    if (*(char *)(v36 + 1727) >= 0) {
      LOBYTE(v83) = v77;
    }
    else {
      uint64_t v83 = *(void *)(v36 + 1704);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v199, (unsigned __int8 *)&__p, "%s", v78, v79, v80, v81, v82, v83);
  }
  int v84 = *(_DWORD *)(a26 + 8);
  v200.__r_.__value_.__r.__words[2] = 0x100000057;
  *(_OWORD *)&v200.__r_.__value_.__l.__data_ = xmmword_18E1FD660;
  uint64_t v199 = &unk_1EDD199F8;
  uint64_t v201 = v202;
  uint64_t v85 = (cnprint::CNPrinter *)sub_18E07519C(a9, 1, (uint64_t)&v199);
  int v86 = v189;
  if (v84 < *v201)
  {
    uint64_t v85 = (cnprint::CNPrinter *)cnprint::CNPrinter::GetLogLevel(v85);
    if (v85 <= 1)
    {
      LOWORD(v199) = 2;
      __p.__r_.__value_.__s.__data_[0] = 1;
      unsigned __int8 v87 = cnprint::CNLogFormatter::FormatWarning((cnprint::CNLogFormatter *)(v36 + 1704), "PredictAndUpdate is only compatible with QR factorizations of unconstrained size.");
      if (*(char *)(v36 + 1727) >= 0) {
        LOBYTE(v93) = v87;
      }
      else {
        uint64_t v93 = *(void *)(v36 + 1704);
      }
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v199, (unsigned __int8 *)&__p, "%s", v88, v89, v90, v91, v92, v93);
    }
  }
  if (*(unsigned char *)(a26 + 89))
  {
    uint64_t v85 = (cnprint::CNPrinter *)cnprint::CNPrinter::GetLogLevel(v85);
    if (v85 <= 1)
    {
      LOWORD(v199) = 2;
      __p.__r_.__value_.__s.__data_[0] = 1;
      unsigned __int8 v94 = cnprint::CNLogFormatter::FormatWarning((cnprint::CNLogFormatter *)(v36 + 1704), "PredictAndUpdate is only compatible with dense prediction.");
      if (*(char *)(v36 + 1727) >= 0) {
        LOBYTE(v100) = v94;
      }
      else {
        uint64_t v100 = *(void *)(v36 + 1704);
      }
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v199, (unsigned __int8 *)&__p, "%s", v95, v96, v97, v98, v99, v100);
    }
  }
  if (!v60 && v184 && cnprint::CNPrinter::GetLogLevel(v85) <= 1)
  {
    LOWORD(v199) = 2;
    __p.__r_.__value_.__s.__data_[0] = 1;
    unsigned __int8 v101 = cnprint::CNLogFormatter::FormatWarning((cnprint::CNLogFormatter *)(v36 + 1704), "Local hypothesis testing implies global hypothesis testing.  Global hypothesis testing will be enabled.");
    if (*(char *)(v36 + 1727) >= 0) {
      LOBYTE(v107) = v101;
    }
    else {
      uint64_t v107 = *(void *)(v36 + 1704);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v199, (unsigned __int8 *)&__p, "%s", v102, v103, v104, v105, v106, v107);
  }
  if (*(_DWORD *)(v191 + 8) && *(_DWORD *)(v191 + 12))
  {
    sub_18DFE2F24(v36 + 8, v191);
    uint64_t v108 = v192;
  }
  else
  {
    uint64_t v108 = v192;
    if ((v189 & 0x80000000) != 0) {
      __assert_rtn("Zeros", "cnmatrix.h", 3098, "nr >= 0");
    }
    v200.__r_.__value_.__r.__words[2] = 0x100000008;
    uint64_t v199 = &unk_1EDD19CC8;
    uint64_t v201 = v202;
    v200.__r_.__value_.__r.__words[0] = v189 | 0x100000000;
    LODWORD(v200.__r_.__value_.__r.__words[1]) = v189;
    HIDWORD(v200.__r_.__value_.__r.__words[1]) = v189;
    sub_18DFE2CC8((uint64_t)&v199, 0.0);
    sub_18DFE2F24(v193 + 8, (uint64_t)&v199);
  }
  long long v109 = (void **)v186;
  if (*(_DWORD *)(v186 + 8) && *(_DWORD *)(v186 + 12))
  {
    uint64_t v110 = v193 + 112;
  }
  else
  {
    if ((v189 & 0x80000000) != 0) {
      __assert_rtn("Zeros", "cnmatrix.h", 3056, "n >= 0");
    }
    v200.__r_.__value_.__r.__words[2] = 0x800000008;
    uint64_t v199 = &unk_1EDD19DE8;
    uint64_t v201 = v202;
    LODWORD(v200.__r_.__value_.__l.__data_) = v189;
    HIDWORD(v200.__r_.__value_.__r.__words[0]) = v189;
    LODWORD(v200.__r_.__value_.__r.__words[1]) = v189 * v189;
    HIDWORD(v200.__r_.__value_.__r.__words[1]) = v189;
    sub_18DFE2CC8((uint64_t)&v199, 0.0);
    uint64_t v110 = v193 + 112;
    long long v109 = &v199;
  }
  sub_18DFE2F24(v110, (uint64_t)v109);
  if (!*(_DWORD *)(v108 + 8) || !*(_DWORD *)(v108 + 12))
  {
    v200.__r_.__value_.__r.__words[2] = 0x100000008;
    *(_OWORD *)&v200.__r_.__value_.__l.__data_ = xmmword_18E1FD760;
    uint64_t v199 = &unk_1EDD19CC8;
    uint64_t v201 = v202;
    sub_18DFE2B44(v193 + 112, v193 + 8, (uint64_t)&v199);
    sub_18DFE2F24(v193 + 664, (uint64_t)&v199);
  }
  if ((v189 & 0x80000000) != 0) {
    __assert_rtn("Zeros", "cnmatrix.h", 3099, "nc >= 0");
  }
  v200.__r_.__value_.__r.__words[2] = 0x800000008;
  uint64_t v199 = &unk_1EDD19DE8;
  uint64_t v201 = v202;
  v200.__r_.__value_.__r.__words[0] = __PAIR64__(v189, v187);
  LODWORD(v200.__r_.__value_.__r.__words[1]) = v187 * v189;
  HIDWORD(v200.__r_.__value_.__r.__words[1]) = v187;
  sub_18DFE2CC8((uint64_t)&v199, 0.0);
  uint64_t v182 = v193 + 1752;
  sub_18DFE2F24(v193 + 1752, (uint64_t)&v199);
  v200.__r_.__value_.__r.__words[2] = 0x100000008;
  uint64_t v199 = &unk_1EDD19CC8;
  uint64_t v201 = v202;
  v200.__r_.__value_.__r.__words[0] = v187 | 0x100000000;
  LODWORD(v200.__r_.__value_.__r.__words[1]) = v187;
  HIDWORD(v200.__r_.__value_.__r.__words[1]) = v187;
  sub_18DFE2CC8((uint64_t)&v199, 0.0);
  sub_18DFE2F24(v193 + 2304, (uint64_t)&v199);
  sub_18DFE2F24(v193 + 2408, v185);
  *(_DWORD *)(v193 + 1540) = 0;
  *(unsigned char *)(v193 + 1536) = 0;
  v200.__r_.__value_.__r.__words[2] = 0x100000057;
  *(_OWORD *)&v200.__r_.__value_.__l.__data_ = xmmword_18E1FD660;
  uint64_t v199 = &unk_1EDD199F8;
  uint64_t v201 = v202;
  sub_18E07519C(a9, 1, (uint64_t)&v199);
  int v111 = *v201;
  if (*v201 < 0x58)
  {
    int v183 = *v201;
    unsigned int v121 = *(_DWORD *)(a21 + 8);
    unsigned int v120 = *(_DWORD *)(a21 + 12);
    if (v121 <= v120) {
      unsigned int v122 = *(_DWORD *)(a21 + 12);
    }
    else {
      unsigned int v122 = *(_DWORD *)(a21 + 8);
    }
    if (v121 && v120 && v122)
    {
      unsigned int v124 = *(_DWORD *)(a9 + 8);
      unsigned int v123 = *(_DWORD *)(a9 + 12);
      unsigned int v125 = v124 <= v123 ? *(_DWORD *)(a9 + 12) : *(_DWORD *)(a9 + 8);
      if (!v124 || !v123 || v125 <= v122)
      {
        v200.__r_.__value_.__r.__words[2] = 0x100000057;
        *(_OWORD *)&v200.__r_.__value_.__l.__data_ = xmmword_18E1FD660;
        uint64_t v199 = &unk_1EDD199F8;
        uint64_t v201 = v202;
        sub_18E07519C(a9, 1, (uint64_t)&v199);
        long long v167 = (uint64_t *)(v193 + 1680);
        sub_18E06950C((uint64_t *)(v193 + 1680));
        unsigned int v168 = *(_DWORD *)(a9 + 8);
        if (v168)
        {
          unsigned int v169 = *(_DWORD *)(a9 + 12);
          if (v169)
          {
            if (v169 | v168)
            {
              int v170 = 0;
              uint64_t v171 = *(void *)(a9 + 32);
              do
              {
                uint64_t v172 = v170;
                if (*(int *)(v171 + 4 * v170) >= 1)
                {
                  int v173 = 0;
                  do
                  {
                    uint64_t v174 = *(void *)(*(void *)(a21 + 32) + 8 * v172);
                    LODWORD(v199) = *(_DWORD *)(v174 + 8);
                    if (*(char *)(v174 + 39) < 0)
                    {
                      sub_18DEDE668(&v200, *(void **)(v174 + 16), *(void *)(v174 + 24));
                      uint64_t v171 = *(void *)(a9 + 32);
                    }
                    else
                    {
                      long long v175 = *(_OWORD *)(v174 + 16);
                      v200.__r_.__value_.__r.__words[2] = *(void *)(v174 + 32);
                      *(_OWORD *)&v200.__r_.__value_.__l.__data_ = v175;
                    }
                    if (*(int *)(v171 + 4 * v172) >= 2)
                    {
                      std::to_string(&__p, v173);
                      uint64_t v176 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                           ? &__p
                           : (std::string *)__p.__r_.__value_.__r.__words[0];
                      std::string::size_type v177 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                           ? HIBYTE(__p.__r_.__value_.__r.__words[2])
                           : __p.__r_.__value_.__l.__size_;
                      std::string::append(&v200, (const std::string::value_type *)v176, v177);
                      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(__p.__r_.__value_.__l.__data_);
                      }
                    }
                    unint64_t v178 = *(void *)(v193 + 1688);
                    if (v178 >= *(void *)(v193 + 1696))
                    {
                      uint64_t v179 = sub_18E08977C(v167, (uint64_t)&v199);
                    }
                    else
                    {
                      sub_18E089710((uint64_t)v167, (uint64_t)&v199);
                      uint64_t v179 = v178 + 32;
                    }
                    *(void *)(v193 + 1688) = v179;
                    if (SHIBYTE(v200.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(v200.__r_.__value_.__l.__data_);
                    }
                    ++v173;
                    uint64_t v171 = *(void *)(a9 + 32);
                  }
                  while (v173 < *(_DWORD *)(v171 + 4 * v172));
                  unsigned int v168 = *(_DWORD *)(a9 + 8);
                  unsigned int v169 = *(_DWORD *)(a9 + 12);
                }
                if (v168 <= v169) {
                  unsigned int v180 = v169;
                }
                else {
                  unsigned int v180 = v168;
                }
                if (!v168) {
                  break;
                }
                if (!v169) {
                  break;
                }
                int v170 = v172 + 1;
              }
              while (v180 > (int)v172 + 1);
            }
          }
        }
      }
    }
    sub_18E06950C((uint64_t *)(v193 + 1656));
    sub_18E06950C((uint64_t *)(v193 + 1632));
    sub_18E0737B4((uint64_t)v272, v191);
    sub_18E0737B4((uint64_t)&v271, v108);
    sub_18E0737B4((uint64_t)v270, v190);
    uint64_t v267 = 0x100000008;
    long long v262 = &unk_1EDD19CC8;
    unsigned int v263 = v189;
    int v264 = 1;
    unsigned int v265 = v189;
    unsigned int v266 = v189;
    long long v268 = &v269;
    uint64_t v259 = 0x800000008;
    uint64_t v254 = &unk_1EDD19DE8;
    long long v260 = &v261;
    unsigned int v255 = v189;
    unsigned int v256 = v189;
    int v257 = v189 * v189;
    unsigned int v258 = v189;
    sub_18DFE2CC8((uint64_t)&v254, 0.0);
    uint64_t v251 = 0x800000008;
    char v246 = &unk_1EDD19DE8;
    __int16 v252 = &v253;
    unsigned int v247 = v189;
    unsigned int v248 = v189;
    int v249 = v189 * v189;
    unsigned int v250 = v189;
    sub_18DFE2CC8((uint64_t)&v246, 0.0);
    uint64_t v243 = 0x800000008;
    long long v238 = &unk_1EDD19DE8;
    uint64_t v244 = &v245;
    unsigned int v239 = v189;
    unsigned int v240 = v187;
    int v241 = v187 * v189;
    unsigned int v242 = v189;
    sub_18DFE2CC8((uint64_t)&v238, 0.0);
    uint64_t v235 = 0x100000008;
    long long v234 = xmmword_18E1FD760;
    long long v233 = &unk_1EDD19CF8;
    unint64_t v236 = &v237;
    uint64_t v230 = 0x100000008;
    long long v229 = xmmword_18E1FD760;
    long long v228 = &unk_1EDD19CF8;
    char v231 = &v232;
    if (a15 < 1) {
      goto LABEL_132;
    }
    uint64_t v126 = 0;
    int v127 = 0;
    int v128 = 0;
    uint64_t v129 = *(void *)(a16 + 32);
    double v130 = 1.0;
    char v188 = 1;
    do
    {
      uint64_t v131 = *(unsigned int *)(v129 + 4 * v126);
      uint64_t v196 = 0x800000001;
      uint64_t v194 = &unk_1EDD18438;
      uint64_t v197 = v198;
      if (v131 == 1)
      {
        char v132 = 0;
        *(void *)&long long v133 = 0x100000001;
        *((void *)&v133 + 1) = 0x100000001;
        long long v195 = v133;
        v198[0] = 0;
        int v134 = 1;
        LODWORD(v131) = 1;
      }
      else if ((int)v131 <= 0)
      {
        int v134 = 0;
        LODWORD(v131) = 0;
        long long v195 = 0uLL;
        char v132 = 1;
      }
      else
      {
        uint64_t v135 = 0;
        LODWORD(v195) = 1;
        DWORD1(v195) = v131;
        *((void *)&v195 + 1) = v131 | 0x100000000;
        do
        {
          v198[v135] = v135;
          ++v135;
        }
        while (v131 != v135);
        char v132 = 0;
        int v134 = 1;
      }
      uint64_t v204 = 0x100000008;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1EDD19CF8;
      int v205 = v206;
      __p.__r_.__value_.__l.__size_ = __PAIR64__(v134, v131);
      LODWORD(__p.__r_.__value_.__r.__words[2]) = v131 * v134;
      HIDWORD(__p.__r_.__value_.__r.__words[2]) = v131;
      if (v131)
      {
        int v136 = 0;
        int v137 = 0;
        do
        {
          if ((v132 & 1) == 0)
          {
            int v138 = 0;
            do
            {
              v206[v137 + HIDWORD(__p.__r_.__value_.__r.__words[2]) * v138] = v198[v136 + v138];
              ++v138;
            }
            while (v134 != v138);
          }
          ++v137;
          v136 += v134;
        }
        while (v137 != v131);
        unsigned int v139 = __p.__r_.__value_.__r.__words[1];
        int v134 = HIDWORD(__p.__r_.__value_.__r.__words[1]);
      }
      else
      {
        unsigned int v139 = 0;
      }
      v200.__r_.__value_.__r.__words[2] = 0x100000008;
      uint64_t v199 = &unk_1EDD19CF8;
      uint64_t v201 = v202;
      v200.__r_.__value_.__r.__words[0] = __PAIR64__(v134, v139);
      uint64_t v140 = v139 * v134;
      v200.__r_.__value_.__l.__size_ = __PAIR64__(v139, v140);
      if ((int)v140 >= 1)
      {
        int v141 = v206;
        int v142 = v202;
        do
        {
          int v143 = *v141++;
          *v142++ = v143 + v128;
          --v140;
        }
        while (v140);
      }
      sub_18DFEEA3C((uint64_t)&v233, (uint64_t)&v199);
      uint64_t v144 = *(unsigned int *)(*(void *)(a16 + 32) + 4 * (*(_DWORD *)(a16 + 20) + (int)v126));
      uint64_t v196 = 0x800000001;
      uint64_t v194 = &unk_1EDD18438;
      uint64_t v197 = v198;
      if (v144 == 1)
      {
        char v145 = 0;
        *(void *)&long long v146 = 0x100000001;
        *((void *)&v146 + 1) = 0x100000001;
        long long v195 = v146;
        v198[0] = 0;
        int v147 = 1;
        LODWORD(v144) = 1;
      }
      else if ((int)v144 <= 0)
      {
        int v147 = 0;
        LODWORD(v144) = 0;
        long long v195 = 0uLL;
        char v145 = 1;
      }
      else
      {
        uint64_t v148 = 0;
        LODWORD(v195) = 1;
        DWORD1(v195) = v144;
        *((void *)&v195 + 1) = v144 | 0x100000000;
        do
        {
          v198[v148] = v148;
          ++v148;
        }
        while (v144 != v148);
        char v145 = 0;
        int v147 = 1;
      }
      uint64_t v204 = 0x100000008;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1EDD19CF8;
      int v205 = v206;
      __p.__r_.__value_.__l.__size_ = __PAIR64__(v147, v144);
      LODWORD(__p.__r_.__value_.__r.__words[2]) = v144 * v147;
      HIDWORD(__p.__r_.__value_.__r.__words[2]) = v144;
      if (v144)
      {
        int v149 = 0;
        int v150 = 0;
        do
        {
          if ((v145 & 1) == 0)
          {
            int v151 = 0;
            do
            {
              v206[v150 + HIDWORD(__p.__r_.__value_.__r.__words[2]) * v151] = v198[v149 + v151];
              ++v151;
            }
            while (v147 != v151);
          }
          ++v150;
          v149 += v147;
        }
        while (v150 != v144);
        unsigned int v152 = __p.__r_.__value_.__r.__words[1];
        int v147 = HIDWORD(__p.__r_.__value_.__r.__words[1]);
      }
      else
      {
        unsigned int v152 = 0;
      }
      v200.__r_.__value_.__r.__words[2] = 0x100000008;
      uint64_t v199 = &unk_1EDD19CF8;
      uint64_t v201 = v202;
      v200.__r_.__value_.__r.__words[0] = __PAIR64__(v147, v152);
      uint64_t v153 = v152 * v147;
      v200.__r_.__value_.__l.__size_ = __PAIR64__(v152, v153);
      if ((int)v153 >= 1)
      {
        uint64_t v154 = v206;
        uint64_t v155 = v202;
        do
        {
          int v156 = *v154++;
          *v155++ = v156 + v127;
          --v153;
        }
        while (v153);
      }
      sub_18DFEEA3C((uint64_t)&v228, (uint64_t)&v199);
      uint64_t v209 = 0x100000008;
      long long v208 = xmmword_18E1FD760;
      int v207 = &unk_1EDD19CC8;
      int8x16_t v210 = &v211;
      uint64_t v204 = 0x800000008;
      *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_18E1FD750;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1EDD19DE8;
      int v205 = v206;
      uint64_t v196 = 0x800000008;
      uint64_t v194 = &unk_1EDD19DE8;
      long long v195 = xmmword_18E1FD750;
      uint64_t v197 = v198;
      int8x16_t v157 = *(unsigned int (**)(void **, void **, void, void **, std::string *, void **))(*(void *)(a17 + 32) + 8 * v126);
      sub_18E0758D4((uint64_t)&v199, (uint64_t)v272, (uint64_t)&v233);
      sub_18E0758D4((uint64_t)&v212, (uint64_t)v270, (uint64_t)&v228);
      if (v157(&v199, &v212, *(void *)(*(void *)(a18 + 32) + 8 * v126), &v207, &__p, &v194)) {
        return 20;
      }
      sub_18E0758D4((uint64_t)&v199, (uint64_t)&v262, (uint64_t)&v233);
      sub_18E074DA4((uint64_t)&v199, (uint64_t)&v207);
      sub_18E075B48((uint64_t)&v199, (uint64_t)&v254, (uint64_t)&v233, (uint64_t)&v233);
      sub_18E074E1C((uint64_t)&v199, (uint64_t)&__p);
      uint64_t v214 = 0x100000008;
      long long v213 = xmmword_18E1FD760;
      uint64_t v212 = &unk_1EDD19CF8;
      unsigned int v215 = v216;
      v200.__r_.__value_.__r.__words[2] = 0x800000008;
      *(_OWORD *)&v200.__r_.__value_.__l.__data_ = xmmword_18E1FD750;
      uint64_t v199 = &unk_1EDD19DE8;
      uint64_t v201 = v202;
      double v158 = sub_18DFE2D1C((uint64_t)&__p, (uint64_t)&v212, (uint64_t)&v199);
      uint64_t v214 = 0x800000008;
      long long v213 = xmmword_18E1FD750;
      uint64_t v212 = &unk_1EDD19DE8;
      unsigned int v215 = v216;
      uint64_t v225 = 0x100000008;
      long long v223 = &unk_1EDD19CF8;
      long long v224 = xmmword_18E1FD760;
      long long v226 = &v227;
      uint64_t v220 = 0x100000008;
      long long v218 = &unk_1EDD19CF8;
      long long v219 = xmmword_18E1FD760;
      uint64_t v221 = &v222;
      v200.__r_.__value_.__r.__words[2] = 0x100000020;
      *(_OWORD *)&v200.__r_.__value_.__l.__data_ = xmmword_18E1FD780;
      uint64_t v199 = &unk_1EDD18C78;
      uint64_t v201 = v202;
      double v159 = sub_18E01D7FC((uint64_t)&__p, (uint64_t)&v223, (uint64_t)&v218, (uint64_t)&v199, (uint64_t)&v212);
      sub_18E075B48((uint64_t)&v199, (uint64_t)&v246, (uint64_t)&v233, (uint64_t)&v233);
      int v86 = v189;
      sub_18E074E1C((uint64_t)&v199, (uint64_t)&v212);
      sub_18E075B48((uint64_t)&v199, (uint64_t)&v238, (uint64_t)&v233, (uint64_t)&v228);
      sub_18E074E1C((uint64_t)&v199, (uint64_t)&v194);
      double v130 = v130 * v158;
      v188 &= v159 <= v59;
      uint64_t v129 = *(void *)(a16 + 32);
      v128 += *(_DWORD *)(v129 + 4 * v126);
      v127 += *(_DWORD *)(v129 + 4 * (*(_DWORD *)(a16 + 20) + (int)v126++));
    }
    while (v126 != a15);
    if (v188)
    {
LABEL_132:
      sub_18E08A170((uint64_t)&v223, v183, 1);
      sub_18E08A170((uint64_t)&v218, v183, 1);
      sub_18E11E0E4((uint64_t)&v217, v183, v86);
    }
    LOWORD(v199) = 2;
    __p.__r_.__value_.__s.__data_[0] = 2;
    unsigned __int8 v160 = cnprint::CNLogFormatter::FormatWarning((cnprint::CNLogFormatter *)(v193 + 1704), "PredictAndUpdate state Jacobian matrix is not invertible.");
    if (*(char *)(v193 + 1727) >= 0) {
      LOBYTE(v166) = v160;
    }
    else {
      uint64_t v166 = *(void *)(v193 + 1704);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v199, (unsigned __int8 *)&__p, "%s", v161, v162, v163, v164, v165, v166);
    sub_18DFE2F24(v193 + 768, (uint64_t)&v262);
    sub_18DFE2F24(v193 + 872, v186);
    v200.__r_.__value_.__r.__words[2] = 0x100000008;
    *(_OWORD *)&v200.__r_.__value_.__l.__data_ = xmmword_18E1FD760;
    uint64_t v199 = &unk_1EDD19CC8;
    uint64_t v201 = v202;
    sub_18DFE2B44(v193 + 872, (uint64_t)&v262, (uint64_t)&v199);
    sub_18DFE2F24(v193 + 1424, (uint64_t)&v199);
    v200.__r_.__value_.__r.__words[2] = 0x800000008;
    uint64_t v199 = &unk_1EDD19DE8;
    uint64_t v201 = v202;
    v200.__r_.__value_.__r.__words[0] = __PAIR64__(v189, v187);
    LODWORD(v200.__r_.__value_.__r.__words[1]) = v187 * v189;
    HIDWORD(v200.__r_.__value_.__r.__words[1]) = v187;
    sub_18DFE2CC8((uint64_t)&v199, 0.0);
    sub_18DFE2F24(v182, (uint64_t)&v199);
    uint64_t v204 = 0x100000008;
    *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_18E1FD760;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1EDD19CC8;
    int v205 = v206;
    sub_18DFE2B44(v185, (uint64_t)v270, (uint64_t)&__p);
    uint64_t v196 = 0x100000008;
    uint64_t v194 = &unk_1EDD19CC8;
    long long v195 = xmmword_18E1FD760;
    uint64_t v197 = v198;
    sub_18DFE2B44(v182, (uint64_t)&v262, (uint64_t)&v194);
    v200.__r_.__value_.__r.__words[2] = 0x100000008;
    *(_OWORD *)&v200.__r_.__value_.__l.__data_ = xmmword_18E1FD760;
    uint64_t v199 = &unk_1EDD19CC8;
    uint64_t v201 = v202;
    sub_18DFEF1F4((uint64_t)&__p, (uint64_t)&v194, (uint64_t)&v199);
    sub_18DFE2F24(v193 + 2304, (uint64_t)&v199);
    sub_18DFE2F24(v193 + 2408, v185);
    *(_DWORD *)(v193 + 1540) = 1;
    return 21;
  }
  else
  {
    uint64_t v112 = 2;
    LOWORD(v199) = 2;
    __p.__r_.__value_.__s.__data_[0] = 5;
    unsigned __int8 v113 = cnprint::CNLogFormatter::FormatGeneral((const void **)(v193 + 1704), "SquareRootInformationFilter::PredictAndUpdate called with %u measurements vs. maximum %u", v111, 87);
    if (*(char *)(v193 + 1727) >= 0) {
      LOBYTE(v119) = v113;
    }
    else {
      uint64_t v119 = *(void *)(v193 + 1704);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v199, (unsigned __int8 *)&__p, "%s", v114, v115, v116, v117, v118, v119);
  }
  return v112;
}

void sub_18E11D020(_Unwind_Exception *a1)
{
}

uint64_t sub_18E11D39C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(unsigned int *)(a2 + 12);
  sub_18E075D20((uint64_t)v21, *(_DWORD *)(a2 + 12), 1);
  if ((int)v6 >= 1)
  {
    uint64_t v7 = 0;
    uint64_t v8 = v22;
    do
    {
      *(_DWORD *)(v8 + 4 * v7) = v7;
      ++v7;
    }
    while (v6 != v7);
  }
  *(void *)(a1 + 24) = 0x800000003;
  *(_OWORD *)(a1 + 8) = xmmword_18E215AE0;
  *(void *)(a1 + 32) = a1 + 40;
  *(void *)a1 = &unk_1EDD166C8;
  *(void *)(a1 + 264) = 0x100000003;
  *(void *)(a1 + 232) = a2;
  *(void *)(a1 + 240) = &unk_1EDD18DC8;
  *(_OWORD *)(a1 + 248) = xmmword_18E1F6F60;
  *(void *)(a1 + 272) = a1 + 280;
  *(void *)(a1 + 320) = 0x100000008;
  *(void *)(a1 + 296) = &unk_1EDD19CF8;
  *(_OWORD *)(a1 + 304) = xmmword_18E1FD760;
  *(void *)(a1 + 328) = a1 + 336;
  sub_18DFEEA3C(a1 + 240, a3);
  uint64_t result = sub_18DFEEA3C(a1 + 296, (uint64_t)v21);
  uint64_t v10 = *(unsigned int *)(a1 + 256);
  uint64_t v11 = *(unsigned int *)(a1 + 312);
  *(_DWORD *)(a1 + 8) = v10;
  *(_DWORD *)(a1 + 12) = v11;
  *(_DWORD *)(a1 + 16) = v11 * v10;
  *(_DWORD *)(a1 + 20) = v10;
  if (v11)
  {
    unsigned int v12 = 0;
    uint64_t v13 = 0;
    int v14 = *(_DWORD *)(a2 + 20);
    uint64_t v15 = *(void *)(a2 + 32);
    do
    {
      if (v10)
      {
        int v16 = *(int **)(a1 + 272);
        int v17 = *(_DWORD *)(*(void *)(a1 + 328) + 4 * v13) * v14;
        uint64_t v18 = *(void *)(a1 + 32);
        unsigned int v19 = v12;
        uint64_t result = v10;
        do
        {
          int v20 = *v16++;
          *(void *)(v18 + 8 * v19++) = *(void *)(v15 + 8 * (v20 + v17));
          --result;
        }
        while (result);
      }
      ++v13;
      v12 += v10;
    }
    while (v13 != v11);
  }
  return result;
}

uint64_t sub_18E11D54C(uint64_t result, uint64_t a2)
{
  int v2 = *(_DWORD *)(result + 8);
  if (v2 != *(_DWORD *)(a2 + 8)) {
    __assert_rtn("operator=", "cnsubmatrix.h", 376, "this->num_rows_ == A.num_rows_");
  }
  uint64_t v3 = *(unsigned int *)(result + 12);
  if (v3 != *(_DWORD *)(a2 + 12)) {
    __assert_rtn("operator=", "cnsubmatrix.h", 377, "this->num_cols_ == A.num_cols_");
  }
  if (v3)
  {
    unsigned int v4 = 0;
    uint64_t v5 = 0;
    uint64_t v6 = *(void *)(a2 + 32);
    do
    {
      if (v2)
      {
        uint64_t v7 = *(void *)(result + 232);
        uint64_t v8 = *(int **)(result + 272);
        int v9 = *(_DWORD *)(v7 + 20) * *(_DWORD *)(*(void *)(result + 328) + 4 * v5);
        uint64_t v10 = *(void *)(v7 + 32);
        uint64_t v11 = *(void *)(result + 32);
        int v12 = *(_DWORD *)(result + 20) * v5;
        unsigned int v13 = v4;
        int v14 = v2;
        do
        {
          uint64_t v15 = *(void *)(v6 + 8 * v13);
          int v16 = *v8++;
          *(void *)(v10 + 8 * (v16 + v9)) = v15;
          *(void *)(v11 + 8 * v12++) = v15;
          ++v13;
          --v14;
        }
        while (v14);
      }
      ++v5;
      v4 += v2;
    }
    while (v5 != v3);
  }
  return result;
}

void *sub_18E11D638(void *result)
{
  result[37] = &unk_1EDD174A8;
  result[30] = &unk_1EDD174A8;
  *uint64_t result = &unk_1EDD17478;
  return result;
}

uint64_t sub_18E11D69C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v12 = 0x100000067;
  uint64_t v10 = &unk_1EDD17538;
  long long v11 = xmmword_18E215B10;
  unsigned int v13 = &v14;
  uint64_t v7 = 0x1000000010;
  uint64_t v5 = &unk_1EDD17928;
  long long v6 = xmmword_18E1FD7B0;
  uint64_t v8 = &v9;
  return sub_18E075FB8(a1, a2, (uint64_t)&v10, (uint64_t)&v5, a3, a4);
}

void sub_18E11D754(uint64_t a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a2 + 8);
  int v2 = *(_DWORD *)(a2 + 12);
  *(void *)(a1 + 24) = 0x5700000008;
  *(void *)a1 = &unk_1EDD19DB8;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 8) = v2;
  *(_DWORD *)(a1 + 12) = v3;
  *(_DWORD *)(a1 + 16) = v3 * v2;
  *(_DWORD *)(a1 + 20) = v2;
  sub_18E11E300();
}

void sub_18E11D7CC(_Unwind_Exception *a1)
{
  sub_18E11EC70(v1);
  _Unwind_Resume(a1);
}

void sub_18E11D824(uint64_t a1)
{
  *(void *)(a1 + 24) = 0x5700000008;
  *(void *)a1 = &unk_1EDD19DB8;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 8) = xmmword_18E215B20;
  sub_18E11E300();
}

void sub_18E11D8A8(_Unwind_Exception *a1)
{
  sub_18E11EC70(v1);
  _Unwind_Resume(a1);
}

void sub_18E11D904()
{
  uint64_t v2 = 0x10000005FLL;
  v0[6] = &unk_1EDD19E18;
  long long v1 = xmmword_18E215B30;
  int v3 = &v4;
  sub_18E08B470((uint64_t)v0);
}

void sub_18E11D9E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_18E11F4D4(v9);
  sub_18E08B7D4(&a9);
  _Unwind_Resume(a1);
}

void sub_18E11DA44(uint64_t a1, uint64_t a2)
{
  int v3 = 0;
  int v17 = 0;
  uint64_t v18 = 0;
  unint64_t v19 = 0;
  int v4 = *(_DWORD *)(a2 + 8);
  int v5 = *(_DWORD *)(a2 + 12);
  if (v4) {
    BOOL v6 = v5 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6 || (v5 | v4) == 0)
  {
LABEL_9:
    if ((char **)(a1 + 1680) != &v17) {
      sub_18E08BF6C((uint64_t *)(a1 + 1680), v17, v3, (v3 - v17) >> 5);
    }
  }
  else
  {
    int v3 = 0;
    unsigned int v9 = 1;
    while (1)
    {
      unint64_t v10 = *(int *)(*(void *)(a2 + 32) + 4 * (int)(v9 - 1));
      uint64_t v11 = *(void *)(a1 + 1680);
      if (v10 >= (*(void *)(a1 + 1688) - v11) >> 5) {
        break;
      }
      uint64_t v12 = v11 + 32 * v10;
      if ((unint64_t)v3 >= v19)
      {
        int v3 = (char *)sub_18E08977C((uint64_t *)&v17, v12);
      }
      else
      {
        sub_18E089710((uint64_t)&v17, v12);
        v3 += 32;
      }
      uint64_t v18 = v3;
      unsigned int v14 = *(_DWORD *)(a2 + 8);
      unsigned int v13 = *(_DWORD *)(a2 + 12);
      if (v14 <= v13) {
        unsigned int v15 = *(_DWORD *)(a2 + 12);
      }
      else {
        unsigned int v15 = *(_DWORD *)(a2 + 8);
      }
      if (v14)
      {
        if (v13)
        {
          if (v15 > v9++) {
            continue;
          }
        }
      }
      goto LABEL_9;
    }
  }
  int v20 = &v17;
  sub_18E0694B8((void ***)&v20);
}

void sub_18E11DB50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_18E0694B8(&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_18E11DB70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 24) = 0x100000067;
  *(void *)a1 = &unk_1EDD17568;
  *(_OWORD *)(a1 + 8) = xmmword_18E215B10;
  *(void *)(a1 + 32) = a1 + 40;
  return sub_18E072E48(a2, a3, a1);
}

void sub_18E11DBDC(_Unwind_Exception *a1)
{
  void *v1 = &unk_1EDD174A8;
  _Unwind_Resume(a1);
}

uint64_t sub_18E11DBFC(uint64_t a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a2 + 8);
  int v2 = *(_DWORD *)(a2 + 12);
  *(void *)(a1 + 24) = 0x100000010;
  *(void *)a1 = &unk_1EDD17988;
  *(_DWORD *)(a1 + 8) = v2;
  *(_DWORD *)(a1 + 12) = v3;
  *(_DWORD *)(a1 + 16) = v3 * v2;
  *(_DWORD *)(a1 + 20) = v2;
  *(void *)(a1 + 32) = a1 + 40;
  return sub_18DFEE808(a2, a1);
}

void sub_18E11DC68(_Unwind_Exception *a1)
{
  void *v1 = &unk_1EDD174A8;
  _Unwind_Resume(a1);
}

uint64_t sub_18E11DC88(uint64_t result, int a2)
{
  int v2 = (void *)(result + 8);
  *(void *)(result + 24) = 0x1000000001;
  *(void *)uint64_t result = &unk_1EDD17E08;
  int v3 = (_DWORD *)(result + 40);
  *(void *)(result + 32) = result + 40;
  if (a2)
  {
    if (a2 < 0)
    {
      *int v2 = 0;
      *(void *)(result + 16) = 0;
    }
    else
    {
      uint64_t v4 = 0;
      uint64_t v5 = (a2 + 1);
      *(_DWORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = v5;
      *(_DWORD *)(result + 16) = v5;
      *(_DWORD *)(result + 20) = 1;
      do
      {
        v3[v4] = v4;
        ++v4;
      }
      while (v5 != v4);
    }
  }
  else
  {
    *(void *)&long long v6 = 0x100000001;
    *((void *)&v6 + 1) = 0x100000001;
    *(_OWORD *)int v2 = v6;
    *int v3 = 0;
  }
  return result;
}

void *sub_18E11DD04(void *result)
{
  *uint64_t result = &unk_1EDD174A8;
  return result;
}

void *sub_18E11DD24(void *result)
{
  *uint64_t result = &unk_1EDD174A8;
  return result;
}

void sub_18E11DD44(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(unsigned int *)(a2 + 12);
  sub_18E11F1DC(v6, *(_DWORD *)(a2 + 12));
  if ((int)v3 >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = v6[4];
    do
    {
      *(_DWORD *)(v5 + 4 * v4) = v4;
      ++v4;
    }
    while (v3 != v4);
  }
  sub_18E11E784(a1);
}

void sub_18E11DF10(_Unwind_Exception *a1)
{
  v1[64] = &unk_1EDD174A8;
  v1[7] = &unk_1EDD174A8;
  sub_18E11F298(v1);
  _Unwind_Resume(a1);
}

void *sub_18E11DF5C(void *a1)
{
  *a1 = &unk_1EDD161E8;
  a1[64] = &unk_1EDD174A8;
  a1[7] = &unk_1EDD174A8;
  return sub_18E11F298(a1);
}

void *sub_18E11DFBC(void *result)
{
  result[109] = &unk_1EDD174A8;
  *uint64_t result = &unk_1EDD17478;
  return result;
}

void *sub_18E11DFFC(void *result)
{
  *uint64_t result = &unk_1EDD174A8;
  return result;
}

void *sub_18E11E020(void *result)
{
  result[275] = &unk_1EDD174A8;
  result[262] = &unk_1EDD174A8;
  *uint64_t result = &unk_1EDD17478;
  return result;
}

void *sub_18E11E080(void *result)
{
  result[22] = &unk_1EDD174A8;
  *uint64_t result = &unk_1EDD17478;
  return result;
}

void *sub_18E11E0C0(void *result)
{
  *uint64_t result = &unk_1EDD17478;
  return result;
}

void sub_18E11E0E4(uint64_t a1, int a2, int a3)
{
  *(void *)(a1 + 24) = 0x800000057;
  *(void *)a1 = &unk_1EDD19AE8;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = a3;
  *(_DWORD *)(a1 + 16) = a3 * a2;
  *(_DWORD *)(a1 + 20) = a2;
  sub_18E11E300();
}

void sub_18E11E14C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = v1[5];
  v1[5] = 0;
  if (v3) {
    MEMORY[0x192FA6220](v3, 0x1000C8000313F17);
  }
  void *v1 = &unk_1EDD17478;
  _Unwind_Resume(exception_object);
}

void sub_18E11E194(void *a1)
{
  sub_18E11E708(a1);

  JUMPOUT(0x192FA6240);
}

void sub_18E11E1CC()
{
}

void sub_18E11E1F8()
{
}

void sub_18E11E300()
{
}

void sub_18E11E37C(void *a1)
{
  a1[37] = &unk_1EDD174A8;
  a1[30] = &unk_1EDD174A8;
  *a1 = &unk_1EDD17478;
  JUMPOUT(0x192FA6240);
}

void sub_18E11E3EC(void *a1)
{
  sub_18E11F298(a1);

  JUMPOUT(0x192FA6240);
}

void sub_18E11E424()
{
}

void sub_18E11E450()
{
}

void sub_18E11E558()
{
}

void sub_18E11E5D4(void *a1)
{
  *a1 = &unk_1EDD17478;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E11E604(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E11E610(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  unsigned int v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    unsigned int v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      int v4 = *(_DWORD *)(a1 + 16);
      int v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        uint64_t v6 = (v4 - 1);
        uint64_t v7 = *(void *)(a1 + 32);
        uint64_t v8 = 1;
        do
        {
          unsigned int v9 = &v13[v8];
          if (!v13[v8])
          {
            uint64_t v10 = *(void *)(v7 + 8 * v8);
            int v11 = v8;
            do
            {
              int v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              uint64_t v12 = *(void *)(v7 + 8 * v11);
              *(void *)(v7 + 8 * v11) = v10;
              *unsigned int v9 = 1;
              unsigned int v9 = &v13[v11];
              uint64_t v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

void *sub_18E11E708(void *a1)
{
  *a1 = &unk_1EDD19AE8;
  uint64_t v2 = a1[5];
  a1[5] = 0;
  if (v2) {
    MEMORY[0x192FA6220](v2, 0x1000C8000313F17);
  }
  *a1 = &unk_1EDD17478;
  return a1;
}

void sub_18E11E784(uint64_t a1)
{
  *(void *)(a1 + 24) = 0x1000000067;
  *(void *)a1 = &unk_1EDD17508;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 8) = xmmword_18E215B50;
  sub_18E11E558();
}

void sub_18E11E7EC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = v1[5];
  v1[5] = 0;
  if (v3) {
    MEMORY[0x192FA6220](v3, 0x1000C8000313F17);
  }
  void *v1 = &unk_1EDD17478;
  _Unwind_Resume(exception_object);
}

void sub_18E11E834(uint64_t a1, int a2, int a3)
{
  *(void *)(a1 + 24) = 0x570000005FLL;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1EDD19E48;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  if ((a2 & 0x80000000) == 0)
  {
    *(_DWORD *)(a1 + 8) = a2;
    *(_DWORD *)(a1 + 12) = a3;
    *(_DWORD *)(a1 + 16) = a3 * a2;
    *(_DWORD *)(a1 + 20) = a2;
    sub_18E11EA80();
  }
  __assert_rtn("CNMatrix", "cnmatrix.h", 419, "nr >= 0");
}

void sub_18E11E8CC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = v1[5];
  v1[5] = 0;
  if (v3) {
    MEMORY[0x192FA6220](v3, 0x1000C8000313F17);
  }
  void *v1 = &unk_1EDD17478;
  _Unwind_Resume(exception_object);
}

void sub_18E11E914(void *a1)
{
  sub_18E11F4D4(a1);

  JUMPOUT(0x192FA6240);
}

void sub_18E11E94C()
{
}

void sub_18E11E978()
{
}

void sub_18E11EA80()
{
}

void sub_18E11EB04(void *a1)
{
  sub_18E11EC70(a1);

  JUMPOUT(0x192FA6240);
}

void sub_18E11EB3C()
{
}

void sub_18E11EB68()
{
}

void *sub_18E11EC70(void *a1)
{
  *a1 = &unk_1EDD19DB8;
  uint64_t v2 = a1[5];
  a1[5] = 0;
  if (v2) {
    MEMORY[0x192FA6220](v2, 0x1000C8000313F17);
  }
  *a1 = &unk_1EDD17478;
  return a1;
}

void *sub_18E11ECEC(void *result)
{
  *uint64_t result = &unk_1EDD17478;
  return result;
}

void sub_18E11ED0C(void *a1)
{
  *a1 = &unk_1EDD17478;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E11ED3C(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E11ED48(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  unsigned int v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    unsigned int v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      int v4 = *(_DWORD *)(a1 + 16);
      int v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        uint64_t v6 = (v4 - 1);
        uint64_t v7 = *(void *)(a1 + 32);
        uint64_t v8 = 1;
        do
        {
          unsigned int v9 = &v13[v8];
          if (!v13[v8])
          {
            uint64_t v10 = *(void *)(v7 + 8 * v8);
            int v11 = v8;
            do
            {
              int v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              uint64_t v12 = *(void *)(v7 + 8 * v11);
              *(void *)(v7 + 8 * v11) = v10;
              *unsigned int v9 = 1;
              unsigned int v9 = &v13[v11];
              uint64_t v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

void sub_18E11EE40(void *a1)
{
  *a1 = &unk_1EDD174A8;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E11EE70(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E11EE7C(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  unsigned int v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    unsigned int v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      int v4 = *(_DWORD *)(a1 + 16);
      int v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        uint64_t v6 = (v4 - 1);
        uint64_t v7 = *(void *)(a1 + 32);
        uint64_t v8 = 1;
        do
        {
          unsigned int v9 = &v13[v8];
          if (!v13[v8])
          {
            int v10 = *(_DWORD *)(v7 + 4 * v8);
            int v11 = v8;
            do
            {
              int v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              int v12 = *(_DWORD *)(v7 + 4 * v11);
              *(_DWORD *)(v7 + 4 * v11) = v10;
              *unsigned int v9 = 1;
              unsigned int v9 = &v13[v11];
              int v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

void sub_18E11EF74(void *a1)
{
  *a1 = &unk_1EDD174A8;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E11EFA4(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E11EFB0(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  unsigned int v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    unsigned int v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      int v4 = *(_DWORD *)(a1 + 16);
      int v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        uint64_t v6 = (v4 - 1);
        uint64_t v7 = *(void *)(a1 + 32);
        uint64_t v8 = 1;
        do
        {
          unsigned int v9 = &v13[v8];
          if (!v13[v8])
          {
            int v10 = *(_DWORD *)(v7 + 4 * v8);
            int v11 = v8;
            do
            {
              int v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              int v12 = *(_DWORD *)(v7 + 4 * v11);
              *(_DWORD *)(v7 + 4 * v11) = v10;
              *unsigned int v9 = 1;
              unsigned int v9 = &v13[v11];
              int v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

void sub_18E11F0A8(void *a1)
{
  *a1 = &unk_1EDD174A8;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E11F0D8(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E11F0E4(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  unsigned int v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    unsigned int v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      int v4 = *(_DWORD *)(a1 + 16);
      int v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        uint64_t v6 = (v4 - 1);
        uint64_t v7 = *(void *)(a1 + 32);
        uint64_t v8 = 1;
        do
        {
          unsigned int v9 = &v13[v8];
          if (!v13[v8])
          {
            int v10 = *(_DWORD *)(v7 + 4 * v8);
            int v11 = v8;
            do
            {
              int v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              int v12 = *(_DWORD *)(v7 + 4 * v11);
              *(_DWORD *)(v7 + 4 * v11) = v10;
              *unsigned int v9 = 1;
              unsigned int v9 = &v13[v11];
              int v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

double sub_18E11F1DC(void *a1, unsigned int a2)
{
  a1[3] = 0x100000010;
  a1[4] = 0;
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1EDD17988;
  if ((a2 & 0x80000000) != 0) {
    __assert_rtn("CNMatrix", "cnmatrix.h", 419, "nr >= 0");
  }
  int32x4_t v2 = vdupq_lane_s32((int32x2_t)(a2 | 0x100000000), 0);
  v2.i32[1] = 1;
  *(int32x4_t *)(a1 + 1) = v2;
  a1[4] = a1 + 5;
  return *(double *)v2.i64;
}

void sub_18E11F278(_Unwind_Exception *a1)
{
  void *v1 = &unk_1EDD174A8;
  _Unwind_Resume(a1);
}

void *sub_18E11F298(void *a1)
{
  *a1 = &unk_1EDD17508;
  uint64_t v2 = a1[5];
  a1[5] = 0;
  if (v2) {
    MEMORY[0x192FA6220](v2, 0x1000C8000313F17);
  }
  *a1 = &unk_1EDD17478;
  return a1;
}

void sub_18E11F314(void *a1)
{
  *a1 = &unk_1EDD161E8;
  a1[64] = &unk_1EDD174A8;
  a1[7] = &unk_1EDD174A8;
  sub_18E11F298(a1);

  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E11F3A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 24) = 0x100000067;
  *(_OWORD *)(a1 + 8) = xmmword_18E215B10;
  *(void *)(a1 + 32) = a1 + 40;
  *(void *)a1 = &unk_1EDD16878;
  *(void *)(a1 + 864) = a2;
  *(void *)(a1 + 896) = 0x100000067;
  *(void *)(a1 + 872) = &unk_1EDD17568;
  *(_OWORD *)(a1 + 880) = xmmword_18E215B10;
  *(void *)(a1 + 904) = a1 + 912;
  sub_18DFEEA3C(a1 + 872, a3);
  int v5 = *(_DWORD *)(a1 + 880);
  int v6 = *(_DWORD *)(a1 + 884);
  *(_DWORD *)(a1 + 8) = v5;
  *(_DWORD *)(a1 + 12) = v6;
  uint64_t v7 = (v6 * v5);
  *(_DWORD *)(a1 + 16) = v7;
  *(_DWORD *)(a1 + 20) = v5;
  if ((int)v7 >= 1)
  {
    uint64_t v8 = *(int **)(a1 + 904);
    uint64_t v9 = *(void *)(a2 + 32);
    int v10 = *(void **)(a1 + 32);
    do
    {
      uint64_t v11 = *v8++;
      *v10++ = *(void *)(v9 + 8 * v11);
      --v7;
    }
    while (v7);
  }
  return a1;
}

void sub_18E11F484(void *a1)
{
  a1[109] = &unk_1EDD174A8;
  *a1 = &unk_1EDD17478;
  JUMPOUT(0x192FA6240);
}

void *sub_18E11F4D4(void *a1)
{
  *a1 = &unk_1EDD19E48;
  uint64_t v2 = a1[5];
  a1[5] = 0;
  if (v2) {
    MEMORY[0x192FA6220](v2, 0x1000C8000313F17);
  }
  *a1 = &unk_1EDD17478;
  return a1;
}

void sub_18E11F550(void *a1)
{
  a1[275] = &unk_1EDD174A8;
  a1[262] = &unk_1EDD174A8;
  *a1 = &unk_1EDD17478;
  JUMPOUT(0x192FA6240);
}

void sub_18E11F5C0(void *a1)
{
  a1[22] = &unk_1EDD174A8;
  *a1 = &unk_1EDD17478;
  JUMPOUT(0x192FA6240);
}

void *sub_18E11F610(void *result)
{
  result[180] = &unk_1EDD174A8;
  *uint64_t result = &unk_1EDD17328;
  return result;
}

void sub_18E11F650(void *a1)
{
  a1[180] = &unk_1EDD174A8;
  *a1 = &unk_1EDD17328;
  JUMPOUT(0x192FA6240);
}

unint64_t raven::GNSSUncertaintyScaling::GNSSUncertaintyWrapper::GetUncertaintyScaleFactor(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7, double a8, float a9)
{
  float v30 = a9;
  if (*a2) {
    BOOL v9 = *a2 == 5;
  }
  else {
    BOOL v9 = 1;
  }
  if (v9) {
    goto LABEL_8;
  }
  v29[0] = 0;
  v29[1] = 0;
  if (((*(uint64_t (**)(uint64_t, void *))(*(void *)a1 + 8))(a1, v29) & 1) == 0)
  {
    __int16 v28 = 12;
    unsigned __int8 v27 = 4;
    double v26 = a7;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v28, &v27, "GNSS uncertainty table index not found,cn0,%.1f,elev_deg,%.1lf", v17, v18, v19, v20, v21, SLOBYTE(v26));
LABEL_8:
    unint64_t v24 = 0;
    unint64_t v23 = 0x100000000;
    LODWORD(v22) = 1065353216;
    return v23 & 0xFF00000000 | v22 | v24 & 0xFFFFFF0000000000;
  }
  uint64_t v22 = (**(uint64_t (***)(uint64_t, _DWORD *, uint64_t, uint64_t, uint64_t, void *, float *, uint64_t))a1)(a1, a2, a3, a4, a5, v29, &v30, a6);
  unint64_t v23 = v22 & 0xFFFFFFFF00000000;
  unint64_t v24 = v22 & 0xFFFFFF0000000000;
  return v23 & 0xFF00000000 | v22 | v24 & 0xFFFFFF0000000000;
}

uint64_t raven::GNSSUncertaintyScaling::EurekaGNSSUncertaintyWrapper::Instance(raven::GNSSUncertaintyScaling::EurekaGNSSUncertaintyWrapper *this)
{
  uint64_t result = qword_1E91C9BB8;
  if (!qword_1E91C9BB8) {
    operator new();
  }
  return result;
}

uint64_t raven::GNSSUncertaintyScaling::EurekaGNSSUncertaintyWrapper::GetUncertaintyScaleFactorCore(uint64_t a1, _DWORD *a2, unsigned char *a3, unsigned __int8 *a4, char *a5, void *a6, float *a7, uint64_t a8)
{
  int v8 = a8;
  unsigned int v14 = *a4;
  if (v14 > 6) {
    goto LABEL_36;
  }
  int v15 = 1 << v14;
  if ((v15 & 0x27) == 0)
  {
    if ((v15 & 0x18) != 0)
    {
      unsigned int v18 = *a5;
      BOOL v19 = v18 > 6;
      int v20 = (1 << v18) & 0x4C;
      if (!v19 && v20 != 0)
      {
        switch(a8)
        {
          case 2:
            uint64_t v22 = qword_1EB404B08;
            if (!qword_1EB404B08) {
              operator new();
            }
            uint64_t v23 = qword_1EB404B10;
            if (!qword_1EB404B10) {
              operator new();
            }
            break;
          case 1:
            uint64_t v22 = qword_1EB404AF8;
            if (!qword_1EB404AF8) {
              operator new();
            }
            uint64_t v23 = qword_1EB404B00;
            if (!qword_1EB404B00) {
              operator new();
            }
            break;
          case 0:
            uint64_t v22 = qword_1EB404AE8;
            if (!qword_1EB404AE8) {
              operator new();
            }
            uint64_t v23 = qword_1EB404AF0;
            if (!qword_1EB404AF0) {
              operator new();
            }
            break;
          default:
LABEL_36:
            uint64_t v23 = 0;
            uint64_t v22 = 0;
            break;
        }
LABEL_37:
        unsigned int v28 = 0;
        switch(*a3)
        {
          case 0:
          case 9:
            __int16 v39 = 12;
            unsigned __int8 v38 = 4;
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v39, &v38, "Unsupported GNSS Band type: GNSS uncertainty parameters not found for obs_type,%d,band,%d,se,%d,activity,%d", (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, (uint64_t)a7, a8, *a2);
            goto LABEL_60;
          case 1:
          case 5:
          case 0xA:
            unsigned int v28 = 5;
            break;
          case 2:
            unsigned int v28 = 6;
            break;
          case 3:
            unsigned int v28 = 4;
            break;
          case 6:
            unsigned int v28 = 1;
            break;
          case 7:
            unsigned int v28 = 2;
            break;
          case 8:
            unsigned int v28 = 3;
            break;
          default:
            break;
        }
        unsigned int v29 = v28;
        if (*a2 == 1)
        {
          if (v22)
          {
            uint64_t v30 = a6[1];
            float v17 = 1.0;
            if (*(_WORD *)(v22 + 56 * v28 + 10 * *a6 + 2 * v30))
            {
              if (v8 == 1)
              {
                uint64_t v16 = 0x100000000;
                float v17 = *(float *)(v22 + 56 * v28 + 52)
                    * (float)*(unsigned __int16 *)(v22 + 56 * v28 + 10 * *a6 + 2 * v30);
                return v16 | LODWORD(v17);
              }
              float v17 = fmaxf(*(float *)(v22 + 56 * v28 + 52)* (float)*(unsigned __int16 *)(v22 + 56 * v28 + 10 * *a6 + 2 * v30), 1.0);
            }
LABEL_61:
            uint64_t v16 = 0x100000000;
            return v16 | LODWORD(v17);
          }
          __int16 v37 = 12;
          unsigned __int8 v36 = 5;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v37, &v36, "Invalid range unc scale pointer - activity_state = %d, signal_environment = %hhu, band_as_int = %d", (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, (uint64_t)a7, a8, *a5);
        }
        else
        {
          if (v23)
          {
            uint64_t v31 = 2;
            if (*a7 <= 0.6) {
              uint64_t v31 = 1;
            }
            if (*a7 <= 0.12) {
              uint64_t v31 = 0;
            }
            unsigned int v32 = *(unsigned __int16 *)(v23 + 156 * v29 + 30 * *a6 + 6 * a6[1] + 2 * v31);
            if (v32)
            {
              float v17 = *(float *)(v23 + 156 * v29 + 152) * (float)v32;
              if (v8 != 1) {
                float v17 = fmaxf(v17, 4.0);
              }
            }
            else
            {
              float v17 = *(float *)(v23 + 156 * v29 + 152) / flt_18E2164F0[v8 == 0];
            }
            goto LABEL_61;
          }
          __int16 v35 = 12;
          unsigned __int8 v34 = 5;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v35, &v34, "Invalid doppler unc scale pointer - activity_state = %d, signal_environment = %hhu, band_as_int = %d", (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, (uint64_t)a7, a8, *a5);
        }
LABEL_60:
        float v17 = 1.0;
        goto LABEL_61;
      }
      if (a8 == 2)
      {
        uint64_t v22 = qword_1EB404B28;
        if (!qword_1EB404B28) {
          operator new();
        }
        uint64_t v23 = qword_1EB404B30;
        if (!qword_1EB404B30) {
          operator new();
        }
        goto LABEL_37;
      }
      if (a8 == 1)
      {
        uint64_t v22 = qword_1EB404B18;
        if (!qword_1EB404B18) {
          operator new();
        }
        uint64_t v23 = qword_1EB404B20;
        if (!qword_1EB404B20) {
          operator new();
        }
        goto LABEL_37;
      }
      if (a8) {
        goto LABEL_36;
      }
    }
    else
    {
      if (a8) {
        goto LABEL_4;
      }
      unsigned int v27 = *a5;
      if (v27 <= 6 && ((1 << v27) & 0x4C) != 0)
      {
        uint64_t v22 = qword_1EB404B38;
        if (!qword_1EB404B38) {
          operator new();
        }
        uint64_t v23 = qword_1EB404B40;
        if (!qword_1EB404B40) {
          operator new();
        }
        goto LABEL_37;
      }
    }
    uint64_t v22 = sub_18E1215CC();
    uint64_t v23 = sub_18E12171C();
    goto LABEL_37;
  }
  if (!a8)
  {
    unsigned int v24 = *a5;
    BOOL v19 = v24 > 6;
    int v25 = (1 << v24) & 0x4C;
    if (v19 || v25 == 0)
    {
      uint64_t v22 = qword_1EB404AD8;
      if (!qword_1EB404AD8) {
        operator new();
      }
      uint64_t v23 = qword_1EB404AE0;
      if (!qword_1EB404AE0) {
        operator new();
      }
    }
    else
    {
      uint64_t v22 = qword_1EB404AC8;
      if (!qword_1EB404AC8) {
        operator new();
      }
      uint64_t v23 = qword_1EB404AD0;
      if (!qword_1EB404AD0) {
        operator new();
      }
    }
    goto LABEL_37;
  }
LABEL_4:
  uint64_t v16 = 0;
  float v17 = 0.0;
  return v16 | LODWORD(v17);
}

uint64_t sub_18E1215CC()
{
  uint64_t result = qword_1E91C9B48;
  if (!qword_1E91C9B48) {
    operator new();
  }
  return result;
}

uint64_t sub_18E12171C()
{
  uint64_t result = qword_1E91C9B50;
  if (!qword_1E91C9B50) {
    operator new();
  }
  return result;
}

uint64_t raven::GNSSUncertaintyScaling::EurekaGNSSUncertaintyWrapper::GetScaleFactorTableIndices(float a1, double a2, uint64_t a3, unint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  for (unint64_t i = 0; i != 4; ++i)
  {
    if (flt_18E2164F8[i] >= a1) {
      break;
    }
  }
  for (unint64_t j = 0; j != 4; ++j)
  {
    if (dbl_18E216508[j] >= a2) {
      break;
    }
  }
  BOOL v12 = i >= 5 || j >= 5;
  uint64_t v13 = !v12;
  if (v12)
  {
    __int16 v17 = 12;
    unsigned __int8 v16 = 5;
    double v14 = a1;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v17, &v16, "invalid index found,cn0,%.3f,cn0_bin,%zu,elev,%.3lf,elev_bin,%zu,", a6, a7, a8, a9, a10, SLOBYTE(v14));
  }
  else
  {
    *a4 = i;
    a4[1] = j;
  }
  return v13;
}

void sub_18E1219F4()
{
}

uint64_t raven::UserSpeedChecker::Configure(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(a1 + 16) = a3;
  double v8 = *(double *)(*(void *)a2 + 3288);
  double v9 = *(double *)(*(void *)a2 + 3296);
  *(double *)(a1 + 24) = v8;
  *(double *)(a1 + 32) = v9;
  if (v8 >= 0.0)
  {
    if (v9 >= 0.0)
    {
      uint64_t v10 = 0;
      *(unsigned char *)(a1 + 8) = 1;
      return v10;
    }
    __int16 v13 = 12;
    unsigned __int8 v12 = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v13, &v12, "UserSpeedChecker: Cannot configure. Invalid max_dot_covariance_trace_dense_urban_: %.2lf", a4, a5, a6, a7, a8, SLOBYTE(v9));
  }
  else
  {
    __int16 v15 = 12;
    unsigned __int8 v14 = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v15, &v14, "UserSpeedChecker: Cannot configure. Invalid max_dot_covariance_trace_: %.2lf", a4, a5, a6, a7, a8, SLOBYTE(v8));
  }
  return 0xFFFFFFFFLL;
}

uint64_t raven::UserSpeedChecker::HandleEvent(raven::UserSpeedChecker *this, const raven::UserSpeedEvent *a2, raven::UserSpeedEvent *a3)
{
  if (*((unsigned char *)this + 8))
  {
    if ((*((void *)a2 + 13) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || *((double *)a2 + 13) <= 0.000000015)
    {
      if (!cnprint::CNPrinter::GetLogLevel(this))
      {
        __int16 v60 = 12;
        unsigned __int8 v59 = 0;
        uint64_t v27 = (*(uint64_t (**)(const raven::UserSpeedEvent *))(*(void *)a2 + 16))(a2);
        double v50 = v28 + (double)v27;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v60, &v59, "t,%.3lf,UserSpeedChecker: Assistance rejected due to invalid user speed", v29, v30, v31, v32, v33, SLOBYTE(v50));
      }
      return 0xFFFFFFFFLL;
    }
    if ((*((void *)a2 + 14) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || *((double *)a2 + 14) < 0.0)
    {
      if (!cnprint::CNPrinter::GetLogLevel(this))
      {
        __int16 v58 = 12;
        unsigned __int8 v57 = 0;
        uint64_t v34 = (*(uint64_t (**)(const raven::UserSpeedEvent *))(*(void *)a2 + 16))(a2);
        double v51 = v35 + (double)v34;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v58, &v57, "t,%.3lf,UserSpeedChecker: Assistance rejected due to invalid user speed uncertainty", v36, v37, v38, v39, v40, SLOBYTE(v51));
      }
      return 0xFFFFFFFFLL;
    }
    long long v5 = *(_OWORD *)((char *)a2 + 8);
    long long v6 = *(_OWORD *)((char *)a2 + 24);
    *(_OWORD *)((char *)a3 + 40) = *(_OWORD *)((char *)a2 + 40);
    *(_OWORD *)((char *)a3 + 24) = v6;
    *(_OWORD *)((char *)a3 + 8) = v5;
    long long v7 = *(_OWORD *)((char *)a2 + 56);
    long long v8 = *(_OWORD *)((char *)a2 + 72);
    long long v9 = *(_OWORD *)((char *)a2 + 88);
    *(_OWORD *)((char *)a3 + 104) = *(_OWORD *)((char *)a2 + 104);
    *(_OWORD *)((char *)a3 + 88) = v9;
    *(_OWORD *)((char *)a3 + 72) = v8;
    *(_OWORD *)((char *)a3 + 56) = v7;
    if (!*((unsigned char *)this + 9)) {
      return 0;
    }
    uint64_t result = (uint64_t)sub_18DFF465C((void *)(*((void *)this + 2) + 16), (unsigned __int8 *)&unk_18E219896);
    if (!result) {
      return result;
    }
    if (!*(unsigned char *)(result + 1369))
    {
      if (!cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)result))
      {
        __int16 v56 = 12;
        unsigned __int8 v55 = 0;
        uint64_t v41 = (*(uint64_t (**)(const raven::UserSpeedEvent *))(*(void *)a2 + 16))(a2);
        double v52 = v42 + (double)v41;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v56, &v55, "t,%.3lf,UserSpeedChecker: Assistance rejected due to invalid DOT", v43, v44, v45, v46, v47, SLOBYTE(v52));
      }
      return 0xFFFFFFFFLL;
    }
    uint64_t v11 = *((void *)this + 2);
    double v12 = *((double *)this + 3);
    if (*(unsigned char *)(v11 + 664) && *(unsigned __int8 *)(v11 + 776) - 3 <= 1) {
      double v12 = *((double *)this + 4);
    }
    if (*(double *)(result + 1440) + *(double *)(result + 1464) + *(double *)(result + 1480) <= v12) {
      return 0;
    }
    if (!cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)result))
    {
      __int16 v54 = 12;
      unsigned __int8 v53 = 0;
      uint64_t v13 = (*(uint64_t (**)(const raven::UserSpeedEvent *))(*(void *)a2 + 16))(a2);
      double v48 = v14 + (double)v13;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v54, &v53, "t,%.3lf,UserSpeedChecker: Assistance rejected due to large DOT covariance trace: %.3f exceeding threshold of: %.3f", v15, v16, v17, v18, v19, SLOBYTE(v48));
    }
  }
  else
  {
    __int16 v62 = 12;
    unsigned __int8 v61 = 4;
    uint64_t v20 = (*(uint64_t (**)(const raven::UserSpeedEvent *, const raven::UserSpeedEvent *, raven::UserSpeedEvent *))(*(void *)a2 + 16))(a2, a2, a3);
    double v49 = v21 + (double)v20;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v62, &v61, "t,%.3lf,UserSpeedChecker, not configured", v22, v23, v24, v25, v26, SLOBYTE(v49));
  }
  return 0xFFFFFFFFLL;
}

void sub_18E121DC4()
{
}

uint64_t raven::RavenMovingStateEstimatorActiveObject::Configure(cnframework::ActiveObjectBase *a1, uint64_t a2)
{
  if (*((unsigned char *)a1 + 480))
  {
    LOWORD(v32) = 12;
    LOBYTE(v31) = 2;
    (*(void (**)(void **__return_ptr, cnframework::ActiveObjectBase *))(*(void *)a1 + 16))(__p, a1);
    if (v34 >= 0) {
      long long v9 = __p;
    }
    else {
      LOBYTE(v9) = __p[0];
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v32, (unsigned __int8 *)&v31, "Warning: %s configured more than once.", v4, v5, v6, v7, v8, (char)v9);
    if (v34 < 0) {
      operator delete(__p[0]);
    }
  }
  *((unsigned char *)a1 + 480) = 0;
  if (!*(void *)a2 || !*(unsigned char *)(*(void *)a2 + 33))
  {
    LOWORD(v32) = 12;
    LOBYTE(v31) = 4;
    (*(void (**)(void **__return_ptr, cnframework::ActiveObjectBase *))(*(void *)a1 + 16))(__p, a1);
    if (v34 >= 0) {
      double v21 = __p;
    }
    else {
      LOBYTE(v21) = __p[0];
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v32, (unsigned __int8 *)&v31, "%s could not be configured.", v16, v17, v18, v19, v20, (char)v21);
    goto LABEL_18;
  }
  uint64_t v32 = *(void *)a2;
  if (raven::RavenMovingStateEstimator::Configure((uint64_t)a1 + 536, &v32))
  {
    __int16 v31 = 12;
    unsigned __int8 v30 = 4;
    (*(void (**)(void **__return_ptr, cnframework::ActiveObjectBase *))(*(void *)a1 + 16))(__p, a1);
    if (v34 >= 0) {
      uint64_t v15 = __p;
    }
    else {
      LOBYTE(v15) = __p[0];
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v31, &v30, "%s could not configure RavenMovingStateEstimator.", v10, v11, v12, v13, v14, (char)v15);
LABEL_18:
    if (v34 < 0) {
      operator delete(__p[0]);
    }
    return 0xFFFFFFFFLL;
  }
  cnframework::ActiveObjectBase::SetEventQueueDelay(a1, 0.0);
  *((unsigned char *)a1 + 480) = 1;
  uint64_t v23 = (cnprint::CNPrinter *)(*(uint64_t (**)(cnframework::ActiveObjectBase *))(*(void *)a1 + 48))(a1);
  if (cnprint::CNPrinter::GetLogLevel(v23) <= 1)
  {
    __int16 v31 = 12;
    unsigned __int8 v30 = 1;
    (*(void (**)(void **__return_ptr, cnframework::ActiveObjectBase *))(*(void *)a1 + 16))(__p, a1);
    if (v34 >= 0) {
      uint64_t v29 = __p;
    }
    else {
      LOBYTE(v29) = __p[0];
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v31, &v30, "%s configured successfully.", v24, v25, v26, v27, v28, (char)v29);
    if (v34 < 0) {
      operator delete(__p[0]);
    }
  }
  return 0;
}

void sub_18E122060(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t raven::RavenMovingStateEstimatorActiveObject::IsConfigured(raven::RavenMovingStateEstimatorActiveObject *this)
{
  return *((unsigned __int8 *)this + 480);
}

void *raven::RavenMovingStateEstimatorActiveObject::GetActiveObjectName@<X0>(void *a1@<X8>)
{
  return sub_18DEDE7B0(a1, "RavenMovingStateEstimatorActiveObject");
}

void raven::RavenMovingStateEstimatorActiveObject::HandleEvent(raven::RavenMovingStateEstimatorActiveObject *this, const raven::TimeMarkEvent *a2)
{
  if (!*((unsigned char *)this + 480))
  {
    LOWORD(v15) = 12;
    LOBYTE(__p) = 2;
    uint64_t v5 = (char *)this + 488;
    uint64_t v16 = (void *)(*(uint64_t (**)(const raven::TimeMarkEvent *))(*(void *)a2 + 16))(a2);
    *(void *)&long long v17 = v12;
    cnprint::CNLogFormatter::FormatGeneral((uint64_t)v5, (uint64_t)&v16, "RavenMovingStateEstimatorActiveObject is not configured.");
LABEL_6:
    if (*((char *)this + 511) >= 0) {
      LOBYTE(v13) = (_BYTE)v5;
    }
    else {
      uint64_t v13 = *((void *)this + 61);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v15, (unsigned __int8 *)&__p, "%s", v7, v8, v9, v10, v11, v13);
    return;
  }
  uint64_t v4 = (cnprint::CNPrinter *)raven::RavenMovingStateEstimator::HandleEvent((raven::RavenMovingStateEstimatorActiveObject *)((char *)this + 536), a2);
  if (v4)
  {
    if (cnprint::CNPrinter::GetLogLevel(v4) > 1) {
      return;
    }
    LOWORD(v15) = 12;
    LOBYTE(__p) = 1;
    LOBYTE(v5) = (_BYTE)this - 24;
    uint64_t v16 = (void *)(*(uint64_t (**)(const raven::TimeMarkEvent *))(*(void *)a2 + 16))(a2);
    *(void *)&long long v17 = v6;
    cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 488, (uint64_t)&v16, "RavenMovingStateEstimatorActiveObject,failed to handle TimeMarkEvent in moving state estimator");
    goto LABEL_6;
  }
  uint64_t v16 = &unk_1EDD13CF0;
  char v23 = 0;
  uint64_t v24 = 0x3FF0000000000000;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  long long v19 = *(_OWORD *)((char *)a2 + 40);
  long long v20 = *(_OWORD *)((char *)a2 + 56);
  long long v21 = *(_OWORD *)((char *)a2 + 72);
  long long v22 = *(_OWORD *)((char *)a2 + 88);
  long long v17 = *(_OWORD *)((char *)a2 + 8);
  long long v18 = *(_OWORD *)((char *)a2 + 24);
  if (raven::RavenMovingStateEstimator::GetMovingStateEvent((raven::RavenMovingStateEstimatorActiveObject *)((char *)this + 536), (raven::MovingStateEvent *)&v16))sub_18E0D0878(); {
}
  }

void sub_18E12236C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

void raven::RavenMovingStateEstimatorActiveObject::Reset(raven::RavenMovingStateEstimatorActiveObject *this)
{
  raven::RavenMovingStateEstimator::Reset((raven::RavenMovingStateEstimatorActiveObject *)((char *)this + 536));
  cnframework::ActiveObjectBase::ResetCurrentTime(this);

  cnframework::ActiveObjectBase::ResetEventQueue(this);
}

void sub_18E1223E8(void **a1)
{
  sub_18E0B83FC(a1);

  JUMPOUT(0x192FA6240);
}

int64x2_t *raven::RavenNLOSEngine::RavenNLOSEngine(int64x2_t *this)
{
  this->i64[0] = 0;
  this->i8[8] = 0;
  uint64_t v2 = (std::__shared_weak_count *)operator new(0x28uLL);
  v2->__shared_owners_ = 0;
  v2->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDD1E500;
  v2->__shared_weak_owners_ = 0;
  v2[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDD12200;
  v2[1].__shared_owners_ = 0;
  this[1].i64[0] = (uint64_t)&v2[1];
  this[1].i64[1] = (uint64_t)v2;
  this[2].i64[0] = 0;
  atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  this[2].i8[8] = 0;
  this[4].i8[0] = 0;
  this[4].i8[8] = 0;
  this[12].i8[8] = 0;
  this[13] = vdupq_n_s64(0x7FF8000000000000uLL);
  atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  this[14].i64[0] = (uint64_t)&v2[1];
  this[14].i64[1] = (uint64_t)v2;
  sub_18DEE4E18(v2);
  sub_18DEE4E18(v2);
  this[15].i8[0] = 0;
  this[16].i8[0] = 0;
  this[16].i8[8] = 0;
  this[28].i8[8] = 0;
  this[29].i8[0] = 0;
  this[181].i8[0] = 0;
  this[181].i8[8] = 0;
  this[188].i8[8] = 0;
  this[189] = 0u;
  this[190] = 0u;
  raven::RavenFacetVisibilityData::RavenFacetVisibilityData((raven::RavenFacetVisibilityData *)&this[191]);
  this[202].i64[1] = (uint64_t)&this[2].i64[1];
  return this;
}

void sub_18E122538(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  a10 = (void **)(v10 + 3032);
  sub_18E12C978(&a10);
  sub_18E12CAF0(v11);
  uint64_t v13 = *(void *)(v10 + 32);
  *(void *)(v10 + 32) = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  uint64_t v14 = *(std::__shared_weak_count **)(v10 + 24);
  if (v14) {
    sub_18DEE4E18(v14);
  }
  _Unwind_Resume(a1);
}

uint64_t raven::RavenNLOSEngine::Configure(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(unsigned char *)(a1 + 8))
  {
    __int16 v28 = 12;
    unsigned __int8 v27 = 3;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v28, &v27, "#nlos,Warning: RavenNLOSEngine configured more than once.", a4, a5, a6, a7, a8, v26);
  }
  *(unsigned char *)(a1 + 8) = 0;
  uint64_t v10 = *a2;
  if (!*a2 || !*(unsigned char *)(v10 + 33))
  {
    __int16 v28 = 12;
    unsigned __int8 v27 = 4;
    uint64_t v16 = "#nlos,NLOS engine could not be configured: invalid RavenParameters";
LABEL_43:
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v28, &v27, v16, a4, a5, a6, a7, a8, v26);
    return 0xFFFFFFFFLL;
  }
  double v11 = *(double *)(v10 + 3504);
  if ((*(void *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v11 <= 0.0)
  {
    __int16 v28 = 12;
    unsigned __int8 v27 = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v28, &v27, "#nlos,NLOS engine could not be configured: gnss_ray_tracing_building_data_query_radius_m_ is invalid: %.1lf", a4, a5, a6, a7, a8, SLOBYTE(v11));
    return 0xFFFFFFFFLL;
  }
  double v12 = *(double *)(v10 + 3512);
  if ((*(void *)&v12 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v12 < 0.0)
  {
    __int16 v28 = 12;
    unsigned __int8 v27 = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v28, &v27, "#nlos,NLOS engine could not be configured: gnss_ray_tracing_distance_beyond_query_radius_to_keep_tiles_m_ is invalid: %.1lf", a4, a5, a6, a7, a8, SLOBYTE(v12));
    return 0xFFFFFFFFLL;
  }
  double v13 = *(double *)(v10 + 3528);
  if ((*(void *)&v13 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v13 <= 0.0)
  {
    __int16 v28 = 12;
    unsigned __int8 v27 = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v28, &v27, "#nlos,NLOS engine could not be configured: gnss_ray_tracing_max_allowable_distance_of_facet_from_point_m_ is invalid: %.1lf", a4, a5, a6, a7, a8, SLOBYTE(v13));
    return 0xFFFFFFFFLL;
  }
  double v14 = *(double *)(v10 + 3536);
  if ((*(void *)&v14 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v14 <= 0.0)
  {
    __int16 v28 = 12;
    unsigned __int8 v27 = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v28, &v27, "#nlos,NLOS engine could not be configured: gnss_ray_tracing_max_allowable_matrix_condition_number_ is invalid: %.1lf", a4, a5, a6, a7, a8, SLOBYTE(v14));
    return 0xFFFFFFFFLL;
  }
  unint64_t v15 = *(void *)(v10 + 3544);
  if (v15 >= 6)
  {
    __int16 v28 = 12;
    unsigned __int8 v27 = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v28, &v27, "#nlos,NLOS engine could not be configured: gnss_ray_tracing_max_reflections_ exceeds maximum allowed value: %llu vs %llu", a4, a5, a6, a7, a8, v15);
    return 0xFFFFFFFFLL;
  }
  double v17 = *(double *)(v10 + 3560);
  if ((*(void *)&v17 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v17 < 0.0 || v17 > 360.0)
  {
    __int16 v28 = 12;
    unsigned __int8 v27 = 4;
    char v26 = LOBYTE(v17);
    uint64_t v16 = "#nlos,NLOS engine could not be configured: gnss_ray_tracing_azimuth_resolution_for_approximate_signal_path_search_deg_,%.2lf";
    goto LABEL_43;
  }
  double v18 = *(double *)(v10 + 3568);
  if ((*(void *)&v18 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v18 <= 0.0)
  {
    __int16 v28 = 12;
    unsigned __int8 v27 = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v28, &v27, "#nlos,NLOS engine could not be configured: gnss_ray_tracing_max_reflection_point_shift_for_refined_path_convergence_m_,%.2lf", a4, a5, a6, a7, a8, SLOBYTE(v18));
    return 0xFFFFFFFFLL;
  }
  if (!*(_DWORD *)(v10 + 3576))
  {
    __int16 v28 = 12;
    unsigned __int8 v27 = 4;
    uint64_t v16 = "#nlos,NLOS engine could not be configured: gnss_ray_tracing_max_iterations_to_converge_refined_path_ is zero";
    goto LABEL_43;
  }
  double v19 = *(double *)(v10 + 3584);
  if ((*(void *)&v19 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v19 < 0.0)
  {
    __int16 v28 = 12;
    unsigned __int8 v27 = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v28, &v27, "#nlos,NLOS engine could not be configured: gnss_ray_tracing_min_radius_for_candidate_point_search_m_ is invalid: %.1lf", a4, a5, a6, a7, a8, SLOBYTE(v19));
  }
  else
  {
    double v20 = *(double *)(v10 + 3592);
    if ((*(void *)&v20 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v20 < 1.0)
    {
      __int16 v28 = 12;
      unsigned __int8 v27 = 4;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v28, &v27, "#nlos,NLOS engine could not be configured: gnss_ray_tracing_error_ellipse_scale_factor_for_candidate_point_search_ is invalid: %.1lf", a4, a5, a6, a7, a8, SLOBYTE(v20));
    }
    else
    {
      double v21 = *(double *)(v10 + 3600);
      if ((*(void *)&v21 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v21 <= 0.0)
      {
        __int16 v28 = 12;
        unsigned __int8 v27 = 4;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v28, &v27, "#nlos,NLOS engine could not be configured: gnss_ray_tracing_candidate_point_search_step_m_ is invalid: %.1lf", a4, a5, a6, a7, a8, SLOBYTE(v21));
      }
      else
      {
        double v22 = *(double *)(v10 + 3616);
        if ((*(void *)&v22 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v22 < 0.0 || v22 > 1.0)
        {
          __int16 v28 = 12;
          unsigned __int8 v27 = 4;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v28, &v27, "#nlos,NLOS engine could not be configured: gnss_ray_tracing_max_probability_line_of_sight_ is invalid: %.1lf", a4, a5, a6, a7, a8, SLOBYTE(v22));
        }
        else
        {
          double v23 = *(double *)(v10 + 3624);
          if ((*(void *)&v23 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v23 < 0.0 || v23 > 90.0)
          {
            __int16 v28 = 12;
            unsigned __int8 v27 = 4;
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v28, &v27, "#nlos,NLOS engine could not be configured: gnss_ray_tracing_max_satellite_elevation_deg_ is invalid: %.1lf", a4, a5, a6, a7, a8, SLOBYTE(v23));
          }
          else
          {
            double v24 = *(double *)(v10 + 3632);
            if ((*(void *)&v24 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && v24 >= 0.0 && v24 <= 1.0)
            {
              uint64_t result = 0;
              *(double *)(a1 + 3152) = v13 * v13;
              *(unsigned char *)(a1 + 3160) = v15;
              *(void *)a1 = v10;
              *(unsigned char *)(a1 + 8) = 1;
              return result;
            }
            __int16 v28 = 12;
            unsigned __int8 v27 = 4;
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v28, &v27, "#nlos,NLOS engine could not be configured: gnss_ray_tracing_min_occurrence_rate_of_most_common_sequence_ is invalid: %.1lf", a4, a5, a6, a7, a8, SLOBYTE(v24));
          }
        }
      }
    }
  }
  return 0xFFFFFFFFLL;
}

uint64_t raven::RavenNLOSEngine::CopyBuildingSectionData(uint64_t a1, uint64_t *a2, uint64_t ***a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = *a3;
  if (!*a3)
  {
    LOWORD(v34) = 12;
    LOBYTE(v33) = 4;
    unsigned __int8 v27 = "#nlos,null destination pointer";
LABEL_37:
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v34, (unsigned __int8 *)&v33, v27, a4, a5, a6, a7, a8, v29);
    return 0;
  }
  uint64_t v11 = a2[1];
  uint64_t v12 = v11 - *a2;
  if (v11 == *a2)
  {
    LOWORD(v34) = 12;
    LOBYTE(v33) = 4;
    unsigned __int8 v27 = "#nlos,input building section container is empty";
    goto LABEL_37;
  }
  if (v12 != 80)
  {
    sub_18E1304DC(v9 + 2, 0xCCCCCCCCCCCCCCCDLL * (v12 >> 4) + v9[3] - v9[2]);
    uint64_t v9 = *a3;
  }
  double v13 = v9[12];
  __int16 v31 = v13;
  if (!v13) {
    __int16 v31 = v9[11];
  }
  uint64_t v15 = *a2;
  uint64_t v14 = a2[1];
  if (*a2 != v14)
  {
    __int16 v32 = 0;
    while (1)
    {
      unint64_t v16 = *(void *)(v15 + 8) - *(void *)v15;
      ++v32;
      if (v13) {
        break;
      }
      if (fabs(*(double *)(v15 + 32)) >= 2.22044605e-16)
      {
        if (v16 >= 0x20) {
          goto LABEL_34;
        }
LABEL_30:
        LOWORD(v34) = 12;
        LOBYTE(v33) = 4;
        uint64_t v29 = (uint64_t)v16 >> 4;
        double v21 = "#nlos,section has fewer than two footprint coordinates,%u, skipped.";
        goto LABEL_31;
      }
      if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v9) <= 1)
      {
        LOWORD(v34) = 12;
        LOBYTE(v33) = 1;
        double v21 = "#nlos, skipped V1 building's section with zero height above ground.";
LABEL_31:
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v34, (unsigned __int8 *)&v33, v21, a4, a5, a6, a7, a8, v29);
      }
LABEL_32:
      *(void *)&long long v34 = v31;
      WORD4(v34) = 1;
      WORD5(v34) = v32;
      uint64_t v9 = sub_18E130618((uint64_t **)(a1 + 3216), (unint64_t *)&v34, &v34);
      v9[6] = 0;
      v15 += 80;
      if (v15 == v14) {
        return 0;
      }
    }
    double v17 = *(double *)(v15 + 72);
    if (*(unsigned char *)(v15 + 40))
    {
      double v18 = *(double *)(v15 + 64);
      if (v17 <= v18 || v18 < *(double *)(v15 + 56) || *(double *)(v15 + 48) > v18)
      {
LABEL_25:
        if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v9) <= 1)
        {
          LOWORD(v34) = 12;
          LOBYTE(v33) = 1;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v34, (unsigned __int8 *)&v33, "#nlos, skipped V2 building's section with zero top height, building_id,%llu, has_terrain_elv,%d, terrain_elv,%5.2f, minBaseHght,%5.2f, maxBaseHght,%5.2f, topHght,%5.2f", v22, v23, v24, v25, v26, (char)v31);
        }
        goto LABEL_32;
      }
      if (v16 >= 0x20) {
        goto LABEL_34;
      }
    }
    else
    {
      if (fabs(v17) < 2.22044605e-16) {
        goto LABEL_25;
      }
      if (v16 >= 0x20) {
LABEL_34:
      }
        operator new();
    }
    goto LABEL_30;
  }
  return 0;
}

void sub_18E1231FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,int a28,int a29,std::__shared_weak_count *a30,uint64_t a31)
{
  uint64_t v35 = *(void *)(v33 - 168);
  if (v35) {
    (*(void (**)(uint64_t))(*(void *)v35 + 8))(v35);
  }
  if (v32)
  {
    sub_18DEE4E18(v32);
    if (v31)
    {
LABEL_8:
      sub_18DEE4E18(a30);
      if (!a31) {
        goto LABEL_10;
      }
      goto LABEL_9;
    }
  }
  else if (v31)
  {
    goto LABEL_8;
  }
  if (!a31) {
LABEL_10:
  }
    _Unwind_Resume(exception_object);
LABEL_9:
  (*(void (**)(uint64_t))(*(void *)a31 + 8))(a31);
  goto LABEL_10;
}

void sub_18E1233EC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10)
{
  uint64_t v14 = *(double **)a2;
  uint64_t v15 = *(std::__shared_weak_count **)(a2 + 8);
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v16 = *(double **)a3;
  double v17 = *(std::__shared_weak_count **)(a3 + 8);
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  double v18 = a9 + a10;
  if (v14) {
    BOOL v19 = v16 == 0;
  }
  else {
    BOOL v19 = 1;
  }
  if (v19)
  {
    unsigned __int8 v37 = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v36, &v37, "#geo,extruded quadrilateral facet initialized with one or more null pointers", a4, a5, a6, a7, a8, 1);
  }
  else if ((*(void *)&a9 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL {
         || COERCE_UNSIGNED_INT64(fabs(a9 + a10)) >= 0x7FF0000000000000)
  }
  {
    unsigned __int8 v37 = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v36, &v37, "#geo,extruded quadrilateral facet initialized with one or more non-finite height values", a4, a5, a6, a7, a8, 1);
  }
  else if (v18 - a9 <= 0.0)
  {
    unsigned __int8 v37 = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v36, &v37, "#geo,extruded quadrilateral facet initialized with non-positive facet height", a4, a5, a6, a7, a8, 1);
  }
  else
  {
    double v20 = *v14;
    if ((*(void *)v14 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || (double v21 = v14[1], (*(void *)&v21 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      || (double v22 = *v16, (*(void *)v16 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      || (double v23 = v16[1], (*(void *)&v23 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000))
    {
      unsigned __int8 v37 = 4;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v36, &v37, "#geo,extruded quadrilateral facet initialized with one or more non-finite footprint coordinates", a4, a5, a6, a7, a8, 1);
    }
    else
    {
      double v24 = vabdd_f64(v23, v21);
      if (vabdd_f64(v22, v20) >= 2.22044605e-16 || v24 >= 2.22044605e-16)
      {
        double v26 = v22 - v20;
        double v27 = v23 - v21;
        double v28 = sqrt(v27 * v27 + v26 * v26);
        double v29 = v27 / v28;
        double v30 = -v26 / v28;
        int v31 = 1;
        goto LABEL_25;
      }
      unsigned __int8 v37 = 4;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v36, &v37, "#geo,extruded quadrilateral facet initialized with duplicate footprint coordinates", a4, a5, a6, a7, a8, 1);
    }
  }
  int v31 = 0;
  double v30 = 0.0;
  double v29 = 0.0;
LABEL_25:
  if (v17) {
    sub_18DEE4E18(v17);
  }
  if (v15) {
    sub_18DEE4E18(v15);
  }
  if (v31)
  {
    uint64_t v33 = *(double **)a2;
    uint64_t v32 = *(void *)(a2 + 8);
    if (v32) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v32 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v35 = *(double **)a3;
    uint64_t v34 = *(void *)(a3 + 8);
    if (v34) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v34 + 8), 1uLL, memory_order_relaxed);
    }
    v36[0] = &unk_1EDD12458;
    v36[1] = &unk_1EDD124F0;
    void v36[2] = v33;
    v36[3] = v32;
    v36[4] = v35;
    v36[5] = v34;
    *(double *)&v36[6] = a9;
    *(double *)&v36[7] = v18;
    *(double *)&v36[8] = v29;
    *(double *)&v36[9] = v30;
    v36[10] = 0;
    operator new();
  }
  *a1 = 0;
}

void sub_18E123760(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_18E123794(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  if (!*a2)
  {
    LOWORD(v36) = 1;
    unsigned __int8 v41 = 4;
    double v17 = "#geo,trying to add nullptr to composite building data object";
LABEL_33:
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v36, &v41, v17, a4, a5, a6, a7, a8, v35);
    return;
  }
  *(void *)&double v11 = a1 + 32;
  unint64_t v12 = *(void *)(a1 + 32);
  uint64_t v13 = *(void *)(a1 + 16);
  uint64_t v14 = *(void **)(a1 + 24);
  uint64_t v15 = v12 - v13;
  if ((unint64_t)v14 >= v12)
  {
    uint64_t v18 = ((uint64_t)v14 - v13) >> 3;
    unint64_t v19 = v18 + 1;
    if ((unint64_t)(v18 + 1) >> 61) {
      sub_18DEE1FC8();
    }
    if (v15 >> 2 > v19) {
      unint64_t v19 = v15 >> 2;
    }
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v20 = v19;
    }
    double v39 = v11;
    if (v20)
    {
      unint64_t v20 = (unint64_t)sub_18DEE2FBC(v20);
      uint64_t v8 = *a2;
    }
    else
    {
      uint64_t v21 = 0;
    }
    double v22 = (void *)(v20 + 8 * v18);
    *(void *)&double v23 = v20 + 8 * v21;
    double v38 = v23;
    *a2 = 0;
    *double v22 = v8;
    unint64_t v16 = v22 + 1;
    v37.i64[1] = (uint64_t)(v22 + 1);
    uint64_t v25 = *(void **)(a1 + 16);
    double v24 = *(void **)(a1 + 24);
    if (v24 == v25)
    {
      int64x2_t v27 = vdupq_n_s64((unint64_t)v24);
    }
    else
    {
      do
      {
        uint64_t v26 = *--v24;
        *double v24 = 0;
        *--double v22 = v26;
      }
      while (v24 != v25);
      int64x2_t v27 = *(int64x2_t *)(a1 + 16);
      unint64_t v16 = (void *)v37.i64[1];
      double v23 = v38;
    }
    *(void *)(a1 + 16) = v22;
    *(void *)(a1 + 24) = v16;
    int64x2_t v37 = v27;
    double v28 = *(double *)(a1 + 32);
    *(double *)(a1 + 32) = v23;
    double v38 = v28;
    double v36 = *(double *)v27.i64;
    sub_18E13059C((uint64_t)&v36);
  }
  else
  {
    *a2 = 0;
    *uint64_t v14 = v8;
    unint64_t v16 = v14 + 1;
  }
  *(void *)(a1 + 24) = v16;
  (*(void (**)(double *__return_ptr))(*(void *)*(v16 - 1) + 24))(&v36);
  double v29 = *(double *)(a1 + 64);
  if (v29 >= v38) {
    double v29 = v38;
  }
  *(double *)(a1 + 64) = v29;
  double v30 = *(double *)(a1 + 72);
  if (v30 >= v39) {
    double v30 = v39;
  }
  *(double *)(a1 + 72) = v30;
  double v31 = *(double *)(a1 + 80);
  if (v31 >= v40) {
    double v31 = v40;
  }
  *(double *)(a1 + 80) = v31;
  double v32 = v36;
  uint64_t v33 = v37.i64[0];
  if (*(double *)(a1 + 40) > v36) {
    double v32 = *(double *)(a1 + 40);
  }
  if (*(double *)(a1 + 48) > *(double *)v37.i64) {
    uint64_t v33 = *(void *)(a1 + 48);
  }
  *(double *)(a1 + 40) = v32;
  *(void *)(a1 + 48) = v33;
  double v34 = *(double *)(a1 + 56);
  if (v34 <= *(double *)&v37.i64[1]) {
    double v34 = *(double *)&v37.i64[1];
  }
  *(double *)(a1 + 56) = v34;
  if (v15 >> 3 < (unint64_t)((uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 16)) >> 3))
  {
    LOWORD(v36) = 1;
    unsigned __int8 v41 = 4;
    uint64_t v35 = v15 >> 3;
    double v17 = "#geo,composite building capacity expanded unexpectedly,%ul,%ul";
    goto LABEL_33;
  }
}

__n128 raven::RavenNLOSEngine::HandleEvent(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 8))
  {
    if (*(unsigned char *)(a1 + 456))
    {
      long long v2 = *(_OWORD *)(a2 + 8);
      long long v3 = *(_OWORD *)(a2 + 24);
      long long v4 = *(_OWORD *)(a2 + 56);
      *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 320) = v4;
      *(_OWORD *)(a1 + 272) = v2;
      *(_OWORD *)(a1 + 288) = v3;
      long long v5 = *(_OWORD *)(a2 + 72);
      long long v6 = *(_OWORD *)(a2 + 88);
      long long v7 = *(_OWORD *)(a2 + 120);
      *(_OWORD *)(a1 + 368) = *(_OWORD *)(a2 + 104);
      *(_OWORD *)(a1 + 384) = v7;
      *(_OWORD *)(a1 + 336) = v5;
      *(_OWORD *)(a1 + 352) = v6;
      __n128 result = *(__n128 *)(a2 + 136);
      long long v9 = *(_OWORD *)(a2 + 152);
      long long v10 = *(_OWORD *)(a2 + 168);
      *(void *)(a1 + 448) = *(void *)(a2 + 184);
      *(_OWORD *)(a1 + 416) = v9;
      *(_OWORD *)(a1 + 432) = v10;
      *(__n128 *)(a1 + 400) = result;
    }
    else
    {
      *(void *)(a1 + 264) = &unk_1EDD140B8;
      long long v11 = *(_OWORD *)(a2 + 8);
      long long v12 = *(_OWORD *)(a2 + 24);
      long long v13 = *(_OWORD *)(a2 + 56);
      *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 320) = v13;
      *(_OWORD *)(a1 + 272) = v11;
      *(_OWORD *)(a1 + 288) = v12;
      long long v14 = *(_OWORD *)(a2 + 72);
      long long v15 = *(_OWORD *)(a2 + 88);
      long long v16 = *(_OWORD *)(a2 + 120);
      *(_OWORD *)(a1 + 368) = *(_OWORD *)(a2 + 104);
      *(_OWORD *)(a1 + 384) = v16;
      *(_OWORD *)(a1 + 336) = v14;
      *(_OWORD *)(a1 + 352) = v15;
      __n128 result = *(__n128 *)(a2 + 136);
      long long v17 = *(_OWORD *)(a2 + 152);
      long long v18 = *(_OWORD *)(a2 + 168);
      *(void *)(a1 + 448) = *(void *)(a2 + 184);
      *(_OWORD *)(a1 + 416) = v17;
      *(_OWORD *)(a1 + 432) = v18;
      *(__n128 *)(a1 + 400) = result;
      *(unsigned char *)(a1 + 456) = 1;
    }
  }
  return result;
}

{
  long long v2;
  long long v3;
  __n128 result;
  long long v5;
  long long v6;
  long long v7;
  long long v8;
  long long v9;
  long long v10;

  if (*(unsigned char *)(a1 + 8))
  {
    if (*(unsigned char *)(a1 + 3016))
    {
      long long v2 = *(_OWORD *)(a2 + 8);
      long long v3 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 2944) = *(_OWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 2928) = v3;
      *(_OWORD *)(a1 + 2912) = v2;
      __n128 result = *(__n128 *)(a2 + 56);
      long long v5 = *(_OWORD *)(a2 + 72);
      long long v6 = *(_OWORD *)(a2 + 88);
      *(unsigned char *)(a1 + 3008) = *(unsigned char *)(a2 + 104);
      *(_OWORD *)(a1 + 2992) = v6;
      *(_OWORD *)(a1 + 2976) = v5;
      *(__n128 *)(a1 + 2960) = result;
    }
    else
    {
      *(void *)(a1 + 2904) = &unk_1EDD145D0;
      long long v7 = *(_OWORD *)(a2 + 8);
      uint64_t v8 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 2944) = *(_OWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 2928) = v8;
      *(_OWORD *)(a1 + 2912) = v7;
      __n128 result = *(__n128 *)(a2 + 56);
      long long v9 = *(_OWORD *)(a2 + 72);
      long long v10 = *(_OWORD *)(a2 + 88);
      *(unsigned char *)(a1 + 3008) = *(unsigned char *)(a2 + 104);
      *(_OWORD *)(a1 + 2992) = v10;
      *(_OWORD *)(a1 + 2976) = v9;
      *(__n128 *)(a1 + 2960) = result;
      *(unsigned char *)(a1 + 3016) = 1;
    }
  }
  return result;
}

void raven::RavenNLOSEngine::HandleEvent(raven::RavenNLOSEngine *this, const raven::GEOMapBuildingDataEvent *a2, double *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!*((unsigned char *)this + 8)) {
    return;
  }
  BOOL v9 = *((void *)a2 + 13) == *((void *)a2 + 14) && *((void *)a2 + 20) == 0;
  if (v9)
  {
    LOWORD(v140[0]) = 12;
    LOBYTE(v132) = 4;
    uint64_t v42 = (*(uint64_t (**)(const raven::GEOMapBuildingDataEvent *))(*(void *)a2 + 16))(a2);
    double v123 = v43 + (double)v42;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v140, (unsigned __int8 *)&v132, "#nlos,time,%.3lf,building event has no information to update building data hierarchy", v44, v45, v46, v47, v48, SLOBYTE(v123));
    return;
  }
  if (!*((unsigned char *)this + 64))
  {
    double v49 = *((double *)a2 + 16);
    double v50 = *((double *)a2 + 17);
    if ((*(void *)&v49 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || (*(void *)&v50 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
      LOWORD(v140[0]) = 1;
      LOBYTE(v132) = 4;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v140, (unsigned __int8 *)&v132, "#geo,invalid geodetic LLA origin for building coordinate transform,%.3lf,%.3lf,%.3lf", a4, a5, a6, a7, a8, SLOBYTE(v49));
    }
    else if (v50 >= -3.14159265)
    {
      if (fabs(v49) <= 1.3962634)
      {
        *((double *)this + 5) = v49;
        *((double *)this + 6) = v50;
        *((void *)this + 7) = 0;
        *((unsigned char *)this + 64) = 1;
        if (v50 >= 6.28318531)
        {
          do
            double v50 = v50 + -6.28318531;
          while (v50 >= 6.28318531);
          *((double *)this + 6) = v50;
        }
        if (cnnavigation::GeodeticLatLonIncrementsToNorthEastMetersPerRadian((raven::RavenNLOSEngine *)((char *)this + 208), v49, 0.0, (double *)this + 27, a3))
        {
          LOWORD(v140[0]) = 1;
          LOBYTE(v132) = 4;
          double v129 = *((double *)this + 5) * 57.2957795;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)v140, (unsigned __int8 *)&v132, "#geo,error converting delta lat/lon to delta N/E,lat,%.9lf,hae,%.3f", v112, v113, v114, v115, v116, SLOBYTE(v129));
        }
        else
        {
          if (!*((unsigned char *)this + 64)) {
            sub_18DFF28FC();
          }
          sub_18DFFDBB4((uint64_t)v140, *((double *)this + 5), *((double *)this + 6));
          sub_18E12CC4C((uint64_t)this + 72, (uint64_t)v140);
          if (*((unsigned char *)this + 80)) {
            goto LABEL_7;
          }
          LOWORD(v140[0]) = 1;
          LOBYTE(v132) = 4;
          double v130 = *((double *)this + 5) * 57.2957795;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)v140, (unsigned __int8 *)&v132, "#geo,error computing ECEF to ENU Jacobian,lat,%.3lf,lon,%.3f", v117, v118, v119, v120, v121, SLOBYTE(v130));
        }
        sub_18E12CBE4((uint64_t)this + 40);
      }
      else
      {
        LOWORD(v140[0]) = 1;
        LOBYTE(v132) = 4;
        double v128 = v49 * 57.2957795;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v140, (unsigned __int8 *)&v132, "#geo,origin too close to poles,lat,%.9lf", a4, a5, a6, a7, a8, SLOBYTE(v128));
      }
    }
    else
    {
      LOWORD(v140[0]) = 1;
      LOBYTE(v132) = 4;
      double v124 = v50 * 57.2957795;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v140, (unsigned __int8 *)&v132, "#geo,invalid geodetic longitude,lon_deg,%.9lf", a4, a5, a6, a7, a8, SLOBYTE(v124));
    }
    LOWORD(v140[0]) = 12;
    LOBYTE(v132) = 4;
    uint64_t v77 = (*(uint64_t (**)(const raven::GEOMapBuildingDataEvent *))(*(void *)a2 + 16))(a2);
    double v125 = v78 + (double)v77;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v140, (unsigned __int8 *)&v132, "#nlos,time,%.3lf,cannot set the building coordinate transform's origin from query LLA, building data ignored", v79, v80, v81, v82, v83, SLOBYTE(v125));
    return;
  }
LABEL_7:
  uint64_t v11 = *((void *)this + 4);
  if (!v11) {
    operator new();
  }
  unint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)a2 + 14) - *((void *)a2 + 13)) >> 3);
  unint64_t v13 = *((void *)a2 + 20);
  BOOL v14 = v12 > v13;
  unint64_t v15 = v12 - v13;
  if (v14)
  {
    sub_18E1304DC((void *)(v11 + 16), v15 + ((uint64_t)(*(void *)(v11 + 24) - *(void *)(v11 + 16)) >> 3));
    uint64_t v11 = *((void *)this + 4);
    unint64_t v13 = *((void *)a2 + 20);
  }
  uint64_t v17 = *(void *)(v11 + 16);
  uint64_t v16 = *(void *)(v11 + 24);
  char v132 = &unk_1EDD0A180;
  LOBYTE(v133) = 0;
  char v134 = 0;
  LOBYTE(v135) = 0;
  char v136 = 0;
  int v138 = 0;
  uint64_t v139 = 0;
  int v137 = &v138;
  if (v16 != v17 && v13)
  {
    v140[0] = &unk_1EDD12418;
    v140[1] = v11;
    memset(&v140[2], 0, 48);
    uint64_t v141 = 0;
    uint64_t v142 = 1;
    sub_18E12E848(v140);
    double v23 = (uint64_t **)((char *)this + 3216);
    double v24 = (char *)a2 + 152;
    uint64_t v25 = (uint64_t *)((char *)this + 3224);
    while (v141)
    {
      (*(void (**)(void, void **))(*(void *)v140[2] + 16))(v140[2], &v132);
      if (v134)
      {
        uint64_t v26 = *(void **)v24;
        if (*(void *)v24)
        {
          int64x2_t v27 = (char *)a2 + 152;
          do
          {
            unint64_t v28 = v26[4];
            BOOL v29 = v28 >= v133;
            if (v28 >= v133) {
              double v30 = v26;
            }
            else {
              double v30 = v26 + 1;
            }
            if (v29) {
              int64x2_t v27 = (char *)v26;
            }
            uint64_t v26 = (void *)*v30;
          }
          while (*v30);
          if (v27 != v24 && v133 >= *((void *)v27 + 4))
          {
            if (v136) {
              unint64_t v31 = v135;
            }
            else {
              unint64_t v31 = v133;
            }
            unint64_t v143 = v31;
            int v144 = 65537;
            double v32 = sub_18E012080((uint64_t)this + 3216, &v143);
            if (v25 != v32)
            {
              do
              {
                if (v32[4] != v31) {
                  break;
                }
                uint64_t v33 = (uint64_t *)v32[1];
                double v34 = v32;
                if (v33)
                {
                  do
                  {
                    uint64_t v35 = v33;
                    uint64_t v33 = (uint64_t *)*v33;
                  }
                  while (v33);
                }
                else
                {
                  do
                  {
                    uint64_t v35 = (uint64_t *)v34[2];
                    BOOL v9 = *v35 == (void)v34;
                    double v34 = v35;
                  }
                  while (!v9);
                }
                if (*v23 == v32) {
                  *double v23 = v35;
                }
                --*((void *)this + 404);
                sub_18E01B97C(*((uint64_t **)this + 403), v32);
                operator delete(v32);
                double v32 = v35;
              }
              while (v25 != v35);
            }
            uint64_t v36 = v140[2];
            int64x2_t v37 = v138;
            for (i = &v138; ; int64x2_t v37 = *i)
            {
              double v39 = i;
              if (!v37) {
                break;
              }
              while (1)
              {
                unint64_t i = (uint64_t **)v37;
                unint64_t v40 = v37[4];
                if (v40 > v140[2]) {
                  break;
                }
                if (v40 >= v140[2]) {
                  goto LABEL_51;
                }
                int64x2_t v37 = i[1];
                if (!v37)
                {
                  double v39 = i + 1;
                  goto LABEL_48;
                }
              }
            }
LABEL_48:
            unsigned __int8 v41 = (uint64_t *)operator new(0x28uLL);
            v41[4] = v36;
            *unsigned __int8 v41 = 0;
            v41[1] = 0;
            v41[2] = (uint64_t)i;
            *double v39 = v41;
            if (*v137)
            {
              int v137 = (uint64_t **)*v137;
              unsigned __int8 v41 = *v39;
            }
            sub_18DEEDADC(v138, v41);
            ++v139;
          }
        }
      }
LABEL_51:
      sub_18E12E950(v140);
    }
    uint64_t v52 = *(void *)(v11 + 16);
    uint64_t v51 = *(void *)(v11 + 24);
    if (v139)
    {
      if (v52 == v51)
      {
        LOWORD(v143) = 1;
        LOBYTE(v131) = 4;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v143, (unsigned __int8 *)&v131, "#geo,existing building data hierarchy is empty while container of hashes to be removed is not empty", v18, v19, v20, v21, v22, v122);
        unsigned __int8 v53 = *(unint64_t **)(v11 + 24);
      }
      else
      {
        unsigned __int8 v53 = *(unint64_t **)(v11 + 24);
        __int16 v54 = *(unint64_t **)(v11 + 16);
        while (1)
        {
          unsigned __int8 v55 = v138;
          if (!v138) {
            break;
          }
          unint64_t v56 = *v54;
          unsigned __int8 v57 = &v138;
          do
          {
            __int16 v58 = v55;
            unsigned __int8 v59 = v57;
            unint64_t v60 = v55[4];
            unsigned __int8 v61 = (uint64_t **)(v55 + 1);
            if (v60 >= v56)
            {
              unsigned __int8 v61 = (uint64_t **)v58;
              unsigned __int8 v57 = (uint64_t **)v58;
            }
            unsigned __int8 v55 = *v61;
          }
          while (v55);
          if (v57 == &v138) {
            break;
          }
          if (v60 < v56) {
            __int16 v58 = (uint64_t *)v59;
          }
          if (v56 < v58[4]) {
            break;
          }
          *__int16 v54 = *(v53 - 1);
          *(v53 - 1) = v56;
          uint64_t v62 = *(void *)(v11 + 24);
          uint64_t v64 = *(void *)(v62 - 8);
          unsigned __int8 v53 = (unint64_t *)(v62 - 8);
          uint64_t v63 = v64;
          *unsigned __int8 v53 = 0;
          if (v64) {
            (*(void (**)(uint64_t))(*(void *)v63 + 8))(v63);
          }
          *(void *)(v11 + 24) = v53;
          __int16 v54 = *(unint64_t **)(v11 + 16);
          if (v54 == v53) {
            goto LABEL_93;
          }
        }
        while (1)
        {
          uint64_t v76 = v54 + 1;
          if (v54 + 1 == v53) {
            break;
          }
          uint64_t v65 = v138;
          if (!v138) {
            goto LABEL_82;
          }
          unint64_t v66 = v54[1];
          uint64_t v67 = &v138;
          do
          {
            uint64_t v68 = v65;
            uint64_t v69 = v67;
            unint64_t v70 = v65[4];
            uint64_t v71 = (uint64_t **)(v65 + 1);
            if (v70 >= v66)
            {
              uint64_t v71 = (uint64_t **)v68;
              uint64_t v67 = (uint64_t **)v68;
            }
            uint64_t v65 = *v71;
          }
          while (v65);
          if (v67 == &v138) {
            goto LABEL_82;
          }
          if (v70 < v66) {
            uint64_t v68 = (uint64_t *)v69;
          }
          if (v66 >= v68[4])
          {
            uint64_t v72 = v53 - 1;
            if (v76 == v53 - 1)
            {
              *uint64_t v76 = 0;
              if (v66) {
                (*(void (**)(unint64_t))(*(void *)v66 + 8))(v66);
              }
              *(void *)(v11 + 24) = v76;
              unsigned __int8 v53 = v54 + 1;
              break;
            }
            *uint64_t v76 = *v72;
            *uint64_t v72 = v66;
            uint64_t v73 = *(void *)(v11 + 24);
            uint64_t v75 = *(void *)(v73 - 8);
            unsigned __int8 v53 = (unint64_t *)(v73 - 8);
            uint64_t v74 = v75;
            *unsigned __int8 v53 = 0;
            if (v75) {
              (*(void (**)(uint64_t))(*(void *)v74 + 8))(v74);
            }
            *(void *)(v11 + 24) = v53;
          }
          else
          {
LABEL_82:
            ++v54;
          }
        }
      }
    }
    else
    {
      unsigned __int8 v53 = *(unint64_t **)(v11 + 24);
    }
LABEL_93:
    int v84 = (((unint64_t)v53 - *(void *)(v11 + 16)) >> 3) - ((unint64_t)(v51 - v52) >> 3) + v139;
    if (v84)
    {
      LOWORD(v143) = 12;
      LOBYTE(v131) = 4;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v143, (unsigned __int8 *)&v131, "#nlos,%d,ghost building IDs sent in GeoMapsDataEvent for removal", v18, v19, v20, v21, v22, v84);
    }
    if (v134) {
      char v134 = 0;
    }
    v140[0] = &unk_1EDD12418;
    sub_18E12EB68((uint64_t)&v140[3]);
  }
  int v131 = 0;
  uint64_t v85 = (void *)*((void *)a2 + 13);
  int v86 = (void *)*((void *)a2 + 14);
  if (v85 != v86)
  {
    unsigned __int8 v87 = v85 + 2;
    do
    {
      if (*v87 != v87[1]) {
        operator new();
      }
      LOWORD(v140[0]) = 12;
      LOBYTE(v143) = 4;
      uint64_t v88 = (*(uint64_t (**)(const raven::GEOMapBuildingDataEvent *))(*(void *)a2 + 16))(a2);
      double v126 = v89 + (double)v88;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v140, (unsigned __int8 *)&v143, "#nlos,time,%.3lf,building has no sections", v90, v91, v92, v93, v94, SLOBYTE(v126));
      uint64_t v95 = v87 + 3;
      v87 += 5;
    }
    while (v95 != v86);
  }
  if (*(void *)(*((void *)this + 4) + 24) == *(void *)(*((void *)this + 4) + 16))
  {
    LOWORD(v140[0]) = 12;
    LOBYTE(v143) = 3;
    uint64_t v105 = (*(uint64_t (**)(const raven::GEOMapBuildingDataEvent *))(*(void *)a2 + 16))(a2);
    double v127 = v106 + (double)v105;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v140, (unsigned __int8 *)&v143, "#nlos,time,%.3lf,resetting NLOS engine as all of the %lu buildings got deleted", v107, v108, v109, v110, v111, SLOBYTE(v127));
    raven::RavenNLOSEngine::Reset((int64x2_t *)this);
  }
  else
  {
    raven::RavenFacetVisibilityData::ResetFacetVisibilityContainers((raven::RavenNLOSEngine *)((char *)this + 3056));
    if (cnprint::CNPrinter::GetLogLevel(v96) <= 1)
    {
      LOWORD(v140[0]) = 12;
      LOBYTE(v143) = 1;
      uint64_t v97 = (*(uint64_t (**)(const raven::GEOMapBuildingDataEvent *))(*(void *)a2 + 16))(a2);
      double v99 = v98 + (double)v97;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v140, (unsigned __int8 *)&v143, "#nlos,time,%.3lf,preupdate_bldg_size,%lu,new_bldg_added,%d, num_bldg_removed,%lu,new_bldg_size,%lu,num_new_sections,%d,num_facets,%d", v100, v101, v102, v103, v104, SLOBYTE(v99));
    }
  }
  char v132 = &unk_1EDD0A180;
  sub_18DF064FC(v138);
}

void sub_18E1247BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
}

void raven::RavenNLOSEngine::Reset(int64x2_t *this)
{
  long long v2 = &this[2].i8[8];
  long long v3 = (std::__shared_weak_count *)this[1].i64[1];
  uint64_t v8 = this[1].i64[0];
  BOOL v9 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_18E12C848((uint64_t)v2, &v8);
  if (v9) {
    sub_18DEE4E18(v9);
  }
  uint64_t v4 = this[2].i64[0];
  this[2].i64[0] = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  if (this[16].i8[0]) {
    this[16].i8[0] = 0;
  }
  if (this[28].i8[8]) {
    this[28].i8[8] = 0;
  }
  if (this[181].i8[0]) {
    this[181].i8[0] = 0;
  }
  if (this[188].i8[8]) {
    this[188].i8[8] = 0;
  }
  this[189].i64[0] = 0;
  uint64_t v5 = this[190].i64[0];
  uint64_t v6 = this[189].i64[1];
  if (v5 != v6)
  {
    do
    {
      uint64_t v7 = v5 - 56;
      sub_18E12CA04(v5 - 24, *(void **)(v5 - 16));
      uint64_t v5 = v7;
    }
    while (v7 != v6);
  }
  this[190].i64[0] = v6;
  raven::RavenFacetVisibilityData::Reset(this + 191);
}

void sub_18E124974(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_18DEE4E18(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_18E12498C(uint64_t a1)
{
  *(void *)a1 = &unk_1EDD0A180;
  sub_18DF064FC(*(void **)(a1 + 48));
  return a1;
}

void raven::RavenNLOSEngine::HandleEvent(raven::RavenNLOSEngine *this, raven::GnssPreprocessedMeasurementsEvent *a2)
{
  if (!*((unsigned char *)this + 8))
  {
    if (cnprint::CNPrinter::GetLogLevel(this) > 1) {
      return;
    }
    LOWORD(v115) = 12;
    LOBYTE(v118) = 1;
    uint64_t v41 = (*(uint64_t (**)(raven::GnssPreprocessedMeasurementsEvent *))(*(void *)a2 + 16))(a2);
    double v101 = v42 + (double)v41;
    unint64_t v40 = "#nlos,time,%.3lf,not configured";
    goto LABEL_42;
  }
  long long v3 = (uint64_t *)this;
  if (*(unsigned char *)(*(void *)this + 3520)
    && (!*((unsigned char *)this + 3016) || *((unsigned __int8 *)this + 3008) - 3 > 1))
  {
    return;
  }
  if (*(unsigned char *)(*(void *)this + 3521) && *((unsigned char *)this + 456))
  {
    unsigned int v4 = *((unsigned __int8 *)this + 368);
    BOOL v5 = (v4 & 0xFE) == 2 || v4 > 9;
    int v6 = (1 << v4) & 0x370;
    if (!v5 && v6 != 0) {
      return;
    }
  }
  if (!*((unsigned char *)this + 256))
  {
    this = (raven::RavenNLOSEngine *)(*(uint64_t (**)(raven::GnssPreprocessedMeasurementsEvent *))(*(void *)a2 + 16))(a2);
    int v8 = *((unsigned __int8 *)v3 + 256);
    v3[30] = (uint64_t)this;
    v3[31] = v9;
    if (!v8) {
      *((unsigned char *)v3 + 256) = 1;
    }
  }
  uint64_t v10 = v3[4];
  BOOL v11 = v10 != 0;
  if (!v10) {
    ++*((_DWORD *)v3 + 756);
  }
  if (!*(unsigned char *)(*v3 + 3648) && v3[398] == v3[399])
  {
    BOOL v11 = 0;
    ++*((_DWORD *)v3 + 757);
  }
  if (*((_DWORD *)v3 + 756) || *((_DWORD *)v3 + 757))
  {
    uint64_t v115 = (*(uint64_t (**)(raven::GnssPreprocessedMeasurementsEvent *))(*(void *)a2 + 16))(a2);
    uint64_t v116 = v12;
    if (!*((unsigned char *)v3 + 256)) {
      sub_18DFF28FC();
    }
    this = (raven::RavenNLOSEngine *)CNTimeSpan::operator-((uint64_t)&v115, v3 + 30, v13, v14);
    if (v15 + (double)(uint64_t)this >= 60.0)
    {
      if (cnprint::CNPrinter::GetLogLevel(this) <= 1)
      {
        LOWORD(v115) = 12;
        LOBYTE(v118) = 1;
        uint64_t v16 = (*(uint64_t (**)(raven::GnssPreprocessedMeasurementsEvent *))(*(void *)a2 + 16))(a2);
        double v100 = v17 + (double)v16;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v115, (unsigned __int8 *)&v118, "#nlos,time,%.3lf,epoch count for no bldg data,%u,empty RT tile container,%u,in last %.0f seconds", v18, v19, v20, v21, v22, SLOBYTE(v100));
      }
      v3[378] = 0;
      this = (raven::RavenNLOSEngine *)(*(uint64_t (**)(raven::GnssPreprocessedMeasurementsEvent *))(*(void *)a2 + 16))(a2);
      int v23 = *((unsigned __int8 *)v3 + 256);
      v3[30] = (uint64_t)this;
      v3[31] = v24;
      if (!v23) {
        *((unsigned char *)v3 + 256) = 1;
      }
    }
  }
  if (!v11) {
    return;
  }
  if (!*((unsigned char *)v3 + 64))
  {
    if (cnprint::CNPrinter::GetLogLevel(this) > 1) {
      return;
    }
    LOWORD(v115) = 12;
    LOBYTE(v118) = 1;
    uint64_t v45 = (*(uint64_t (**)(raven::GnssPreprocessedMeasurementsEvent *))(*(void *)a2 + 16))(a2);
    double v101 = v46 + (double)v45;
    unint64_t v40 = "#nlos,time,%.3lf,no transformation";
    goto LABEL_42;
  }
  if (!*((unsigned char *)v3 + 2896))
  {
    if (cnprint::CNPrinter::GetLogLevel(this) > 1) {
      return;
    }
    LOWORD(v115) = 12;
    LOBYTE(v118) = 1;
    uint64_t v47 = (*(uint64_t (**)(raven::GnssPreprocessedMeasurementsEvent *))(*(void *)a2 + 16))(a2);
    double v101 = v48 + (double)v47;
    unint64_t v40 = "#nlos,time,%.3lf,no blended solution";
    goto LABEL_42;
  }
  uint64_t v115 = (*(uint64_t (**)(raven::GnssPreprocessedMeasurementsEvent *))(*(void *)a2 + 16))(a2);
  uint64_t v116 = v25;
  uint64_t v28 = CNTimeSpan::operator-((uint64_t)(v3 + 204), &v115, v26, v27);
  *(void *)&v128[0] = v28;
  v128[1] = v29;
  if (v28 < 0 || (*(double *)v30.i64 = v29, v29 < 0.0))
  {
    uint64_t v28 = CNTimeSpan::operator-(v128, v30, v31);
    v30.i64[0] = v32;
  }
  if (*(double *)v30.i64 + (double)v28 > 2.0)
  {
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v28) > 1) {
      return;
    }
    LOWORD(v115) = 12;
    LOBYTE(v118) = 1;
    uint64_t v33 = (*(uint64_t (**)(raven::GnssPreprocessedMeasurementsEvent *))(*(void *)a2 + 16))(a2);
    double v101 = v39 + (double)v33;
    unint64_t v40 = "#nlos,time,%.3lf,blended solution not time aligned to data,t_soln,%.3lf";
    goto LABEL_42;
  }
  float64x2_t v126 = *((float64x2_t *)v3 + 121);
  uint64_t v127 = v3[244];
  sub_18E1254E8((uint64_t)&v123, (uint64_t)(v3 + 5), &v126);
  if (!v125)
  {
    if (cnprint::CNPrinter::GetLogLevel(v49) > 1) {
      return;
    }
    LOWORD(v115) = 12;
    LOBYTE(v118) = 1;
    uint64_t v55 = (*(uint64_t (**)(raven::GnssPreprocessedMeasurementsEvent *))(*(void *)a2 + 16))(a2);
    double v101 = v56 + (double)v55;
    unint64_t v40 = "#nlos,time,%.3lf,could not convert blended solution to ENU,t_soln,%.3lf";
LABEL_42:
    double v43 = (cnprint::CNPrinter *)&v115;
    uint64_t v44 = (unsigned __int8 *)&v118;
LABEL_43:
    cnprint::CNPrinter::Print(v43, v44, v40, v34, v35, v36, v37, v38, SLOBYTE(v101));
    return;
  }
  if (*(unsigned char *)(*v3 + 3580)) {
    uint64_t v124 = *(void *)(*v3 + 80);
  }
  uint64_t v120 = 0x300000003;
  uint64_t v118 = &unk_1EDD18EE8;
  long long v119 = xmmword_18E1F0010;
  uint64_t v121 = &v122;
  if (!sub_18E10D288((uint64_t)(v3 + 204), (uint64_t)&v118))
  {
    LOWORD(v115) = 12;
    LOBYTE(v111) = 4;
    uint64_t v57 = (*(uint64_t (**)(raven::GnssPreprocessedMeasurementsEvent *))(*(void *)a2 + 16))(a2);
    double v102 = v58 + (double)v57;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v115, (unsigned __int8 *)&v111, "#nlos,time,%.3lf,could not extract position covariance,t_soln,%.3lf", v59, v60, v61, v62, v63, SLOBYTE(v102));
    return;
  }
  sub_18E125558(&v115, (uint64_t)(v3 + 5), (uint64_t)&v118);
  if (!v117)
  {
    LOWORD(v111) = 12;
    LOBYTE(v114.f64[0]) = 4;
    uint64_t v64 = (*(uint64_t (**)(raven::GnssPreprocessedMeasurementsEvent *))(*(void *)a2 + 16))(a2);
    double v101 = v65 + (double)v64;
    unint64_t v40 = "#nlos,time,%.3lf,could not convert position covariance to ENU,t_soln,%.3lf";
    goto LABEL_100;
  }
  long long v111 = v123;
  uint64_t v112 = v124;
  uint64_t updated = raven::RavenNLOSEngine::UpdateCandidatePointSearchSpace(v3, (uint64_t)&v111, (uint64_t)&v115, v3[4]);
  if ((updated & 1) == 0)
  {
    LOWORD(v111) = 12;
    LOBYTE(v114.f64[0]) = 4;
    uint64_t v66 = (*(uint64_t (**)(raven::GnssPreprocessedMeasurementsEvent *))(*(void *)a2 + 16))(a2);
    double v101 = v67 + (double)v66;
    unint64_t v40 = "#nlos,time,%.3lf,could not compute candidate point search space,t_soln,%.3lf";
    goto LABEL_100;
  }
  uint64_t v51 = v3[379];
  uint64_t v52 = v3[380];
  if (v51 == v52)
  {
    LOWORD(v111) = 12;
    LOBYTE(v114.f64[0]) = 4;
    uint64_t v68 = (*(uint64_t (**)(raven::GnssPreprocessedMeasurementsEvent *))(*(void *)a2 + 16))(a2);
    double v101 = v69 + (double)v68;
    unint64_t v40 = "#nlos,time,%.3lf,empty candidate point search space,t_soln,%.3lf";
    goto LABEL_100;
  }
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v52 - v51) >> 3)) > *(void *)(*v3 + 3608))
  {
    LOWORD(v111) = 12;
    LOBYTE(v114.f64[0]) = 3;
    uint64_t v53 = (*(uint64_t (**)(raven::GnssPreprocessedMeasurementsEvent *))(*(void *)a2 + 16))(a2);
    double v101 = v54 + (double)v53;
    unint64_t v40 = "#nlos,time,%.3lf,no ray tracing: too many candidate points,t_soln,%.3lf,N,%zu";
LABEL_100:
    double v43 = (cnprint::CNPrinter *)&v111;
    uint64_t v44 = (unsigned __int8 *)&v114;
    goto LABEL_43;
  }
  uint64_t v71 = (uint64_t *)*((void *)a2 + 12);
  unint64_t v70 = (uint64_t *)*((void *)a2 + 13);
  if (v71 != v70)
  {
    int v105 = 0;
    int v106 = 0;
    uint64_t v72 = 0;
    while (1)
    {
      uint64_t v73 = *v71;
      if (!*v71) {
        goto LABEL_93;
      }
      uint64_t v74 = *v3;
      if (*(void *)(*v3 + 3640) <= (unint64_t)v72) {
        break;
      }
      if (*(double *)(v73 + 264) <= *(double *)(v74 + 3624) * 0.0174532925)
      {
        double v75 = *(unsigned char *)(v73 + 304) ? *(double *)(v73 + 296) : 1.0;
        if (v75 <= *(double *)(v74 + 3616))
        {
          uint64_t v76 = *(void *)(v73 + 328);
          if (*(void *)(v73 + 336) != v76)
          {
            uint64_t v77 = 0;
            unint64_t v78 = 0;
            do
            {
              if (*(unsigned char *)(v76 + v77 + 40)) {
                BOOL v79 = *(_DWORD *)(v76 + v77 + 96) == 1;
              }
              else {
                BOOL v79 = 0;
              }
              if (v79)
              {
                unsigned int v80 = *(unsigned __int8 *)(v76 + v77 + 100);
                BOOL v5 = v80 > 9;
                int v81 = (1 << v80) & 0x2BB;
                if (v5 || v81 == 0)
                {
                  long long v111 = *(_OWORD *)(v76 + v77 + 48);
                  uint64_t updated = cnnavigation::GNSSEphemerides::GNSSFindSat(v73 + 32, (uint64_t)&v111, (uint64_t)&v114);
                  if (!updated)
                  {
                    uint64_t v108 = v72;
                    double v83 = sub_18E1254E8((uint64_t)&v111, (uint64_t)(v3 + 5), &v114);
                    if (v113)
                    {
                      uint64_t updated = raven::RavenNLOSEngine::ProcessSatellite((cnprint::CNPrinter *)v3, v73, (uint64_t)&v111, v3[4]);
                      if (updated)
                      {
                        uint64_t updated = raven::RavenNLOSEngine::AugmentMeasurementWithRayTracingResults((uint64_t)v3, v73);
                        v105 += updated;
                        ++v106;
                      }
                      uint64_t v72 = (v72 + 1);
                      break;
                    }
                    __int16 v110 = 12;
                    unsigned __int8 v109 = 4;
                    uint64_t v107 = (*(uint64_t (**)(raven::GnssPreprocessedMeasurementsEvent *, double))(*(void *)a2 + 16))(a2, v83);
                    double v85 = v84;
                    sub_18E017C64(v73);
                    double v103 = v85 + (double)v107;
                    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v110, &v109, "#nlos,time,%.3lf,could not compute ENU coordinates for satellite %s", v86, v87, v88, v89, v90, SLOBYTE(v103));
                    uint64_t v72 = v108;
                  }
                }
              }
              ++v78;
              uint64_t v76 = *(void *)(v73 + 328);
              v77 += 208;
            }
            while (v78 < 0x4EC4EC4EC4EC4EC5 * ((*(void *)(v73 + 336) - v76) >> 4));
          }
        }
      }
LABEL_93:
      v71 += 2;
      if (v71 == v70) {
        goto LABEL_98;
      }
    }
    uint64_t updated = cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)updated);
    if (updated <= 1)
    {
      LOWORD(v111) = 12;
      LOBYTE(v114.f64[0]) = 1;
      uint64_t v91 = (*(uint64_t (**)(raven::GnssPreprocessedMeasurementsEvent *))(*(void *)a2 + 16))(a2);
      double v104 = v92 + (double)v91;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v111, (unsigned __int8 *)&v114, "#nlos,time,%.3lf,maximum number of traced satellites reached,%u", v93, v94, v95, v96, v97, SLOBYTE(v104));
    }
  }
LABEL_98:
  if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)updated) <= 1)
  {
    LOWORD(v111) = 12;
    LOBYTE(v114.f64[0]) = 1;
    uint64_t v98 = (*(uint64_t (**)(raven::GnssPreprocessedMeasurementsEvent *))(*(void *)a2 + 16))(a2);
    double v101 = v99 + (double)v98;
    unint64_t v40 = "#nlos,time,%.3lf,ray tracing satellite counts,attempted,%u,with nlos path,%u,forwarded,%u";
    goto LABEL_100;
  }
}

double sub_18E1254E8(uint64_t a1, uint64_t a2, float64x2_t *a3)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 24) = 0;
  if (*(unsigned char *)(a2 + 24))
  {
    double result = cnnavigation::ECEFToENU(a3, 1, 1, (float64x2_t *)a2, 0, (uint64_t)&v6);
    if (!v5)
    {
      double result = *(double *)&v6;
      *(_OWORD *)a1 = v6;
      *(void *)(a1 + 16) = v7;
      *(unsigned char *)(a1 + 24) = 1;
    }
  }
  return result;
}

void sub_18E125558(unsigned char *a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a2 + 160))
  {
    uint64_t v15 = 0x300000003;
    int8x16_t v13 = &unk_1EDD18EE8;
    long long v14 = xmmword_18E1F0010;
    uint64_t v16 = &v17;
    if (sub_18DFFBB34(a2 + 32, a3, (uint64_t)&v13))
    {
      sub_18DFE2FA8((uint64_t)a1, (uint64_t)&v13);
      char v9 = 1;
    }
    else
    {
      __int16 v12 = 1;
      unsigned __int8 v11 = 4;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v12, &v11, "#geo,could not convert ECEF covariance to ENU", v4, v5, v6, v7, v8, v10);
      char v9 = 0;
      *a1 = 0;
    }
    a1[112] = v9;
  }
  else
  {
    *a1 = 0;
    a1[112] = 0;
  }
}

BOOL raven::RavenNLOSEngine::UpdateCandidatePointSearchSpace(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = a1[380];
  uint64_t v9 = a1[379];
  if (v8 != v9)
  {
    do
    {
      uint64_t v10 = v8 - 56;
      sub_18E12CA04(v8 - 24, *(void **)(v8 - 16));
      uint64_t v8 = v10;
    }
    while (v10 != v9);
  }
  a1[380] = v9;
  double v11 = *(double *)(*a1 + 3584);
  double v12 = *(double *)(*a1 + 3592);
  double v13 = *(double *)(*a1 + 3600);
  long long v14 = *(double **)(a3 + 32);
  double v15 = sqrt(v14[*(int *)(a3 + 20) + 1]);
  double v16 = v12 * sqrt(*v14);
  if (v16 <= v11) {
    double v16 = *(double *)(*a1 + 3584);
  }
  double v17 = v16;
  double v18 = v12 * v15;
  if (v12 * v15 <= v11) {
    double v18 = *(double *)(*a1 + 3584);
  }
  double v19 = v18;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EB404B48, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EB404B48))
  {
    qword_1EB404B68 = 0x200000001;
    qword_1EB404B50 = (uint64_t)&unk_1EDD181F8;
    qword_1EB404B78 = 0x100000000;
    qword_1EB404B70 = (uint64_t)&qword_1EB404B78;
    unk_1EB404B58 = xmmword_18E1FD740;
    __cxa_atexit((void (*)(void *))sub_18E0596FC, &qword_1EB404B50, &dword_18DEDB000);
    __cxa_guard_release(&qword_1EB404B48);
  }
  int v20 = *(_DWORD *)(a3 + 20);
  uint64_t v21 = *(void *)(a3 + 32);
  int v22 = dword_1EB404B60;
  *(void *)&v148[16] = 0x200000002;
  int v147 = (char *)&unk_1EDD18BB8;
  *(_DWORD *)uint64_t v148 = dword_1EB404B60;
  *(_DWORD *)&v148[4] = dword_1EB404B60;
  *(_DWORD *)&v148[8] = *(_DWORD *)v148 * *(_DWORD *)v148;
  *(_DWORD *)&v148[12] = dword_1EB404B60;
  *(void *)&v148[24] = &v148[32];
  if (dword_1EB404B60)
  {
    int v23 = 0;
    int v24 = 0;
    uint64_t v25 = qword_1EB404B70;
    do
    {
      int v26 = 0;
      int v27 = *(_DWORD *)(v25 + 4 * v24) * v20;
      do
      {
        *(void *)&v148[8 * (v23 + v26) + 32] = *(void *)(v21
                                                           + 8 * (*(_DWORD *)(v25 + 4 * v26) + v27));
        ++v26;
      }
      while (v22 != v26);
      ++v24;
      v23 += v22;
    }
    while (v24 != v22);
  }
  uint64_t v136 = 0x200000002;
  long long v135 = xmmword_18E1FD1B0;
  char v134 = &unk_1EDD18BB8;
  int v137 = (double *)&v138;
  uint64_t v144 = 0x100000002;
  *(_OWORD *)&v143[8] = xmmword_18E1FD1A0;
  *(void *)unint64_t v143 = &unk_1EDD18B58;
  char v145 = &v146;
  uint64_t v140 = 0x100000002;
  *(_OWORD *)&v139[8] = xmmword_18E1FD1A0;
  *(void *)uint64_t v139 = &unk_1EDD18B58;
  uint64_t v141 = &v142;
  __p[0] = (void *)0x100000008;
  float64x2_t v126 = &unk_1EDD19CC8;
  long long v127 = xmmword_18E1FD760;
  __p[1] = &__p[2];
  double v34 = sub_18E01D7FC((uint64_t)&v147, (uint64_t)v143, (uint64_t)v139, (uint64_t)&v126, (uint64_t)&v134);
  if (v34 > *(double *)(*a1 + 3536))
  {
    LOWORD(v126) = 12;
    LOBYTE(v147) = 3;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v126, (unsigned __int8 *)&v147, "#nlos,location covariance condition number too large,cond,%.1f", v29, v30, v31, v32, v33, SLOBYTE(v34));
    return 0;
  }
  unint64_t v36 = vcvtpd_s64_f64(1.0 / v13 * v17);
  long long v119 = a1 + 379;
  float64x2_t v126 = &unk_1EDD12560;
  long long v127 = 0u;
  memset(__p, 0, 25);
  double v129 = &unk_1EDD12418;
  long long v130 = 0u;
  memset(v131, 0, sizeof(v131));
  long long v132 = 0u;
  uint64_t v133 = -1;
  *(float64x2_t *)unint64_t v143 = vmulq_f64(*((float64x2_t *)a1 + 13), (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL));
  double v37 = *((double *)a1 + 401);
  uint64_t v117 = vcvtpd_s64_f64(1.0 / v13 * v19);
  unint64_t v113 = 4 * v36 * v117;
  uint64_t v38 = a1[379];
  if (0x6DB6DB6DB6DB6DB7 * ((a1[381] - v38) >> 3) < v113)
  {
    if (v113 > 0x492492492492492) {
      sub_18DEE1FC8();
    }
    unint64_t v39 = v36;
    uint64_t v40 = a1[380];
    *(void *)&v148[24] = a1 + 381;
    int v147 = (char *)sub_18E130318(v113);
    *(void *)uint64_t v148 = &v147[v40 - v38];
    *(void *)&v148[8] = *(void *)v148;
    *(void *)&v148[16] = &v147[56 * v41];
    sub_18E130264(v119, &v147);
    uint64_t v28 = (cnprint::CNPrinter *)sub_18E130364((uint64_t)&v147);
    unint64_t v36 = v39;
  }
  if ((v36 & 0x8000000000000000) != 0)
  {
    BOOL v116 = 1;
LABEL_96:
    if (cnprint::CNPrinter::GetLogLevel(v28) <= 1)
    {
      LOWORD(v147) = 12;
      v139[0] = 1;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v147, v139, "#nlos,%zu candidate points identified (%u inside a building)", v104, v105, v106, v107, v108, -73 * ((a1[380] - a1[379]) >> 3));
    }
    goto LABEL_98;
  }
  BOOL v116 = 0;
  uint64_t v42 = 0;
  double v43 = v11 * v11;
  double v122 = v12 * v12;
  double v121 = v37 * 0.5;
  int64_t v115 = v36;
  uint64_t v44 = -(uint64_t)v36;
  uint64_t v45 = v117;
  uint64_t v112 = a1 + 390;
  if (v117 < 0) {
    uint64_t v45 = -v117;
  }
  uint64_t v124 = v45;
  int64x2_t v111 = vdupq_n_s64(0x7FF8000000000000uLL);
  uint64_t v114 = a4;
  while (1)
  {
    uint64_t v118 = v44;
    if ((v117 & 0x8000000000000000) == 0) {
      break;
    }
LABEL_92:
    BOOL v116 = v118 >= v115;
    uint64_t v44 = v118 + 1;
    if (v118 == v115) {
      goto LABEL_96;
    }
  }
  double v46 = v13 * (double)v44;
  double v47 = v46 * v46;
  uint64_t v48 = -v117;
  while (1)
  {
    double v49 = v13 * (double)v48;
    if (v47 + v49 * v49 > v43
      && v49 * (v46 * v137[SHIDWORD(v135)])
       + v49 * (v46 * v137[SHIDWORD(v135)])
       + v46 * *v137 * v46
       + v49 * v137[SHIDWORD(v135) + 1] * v49 > v122)
    {
      goto LABEL_32;
    }
    double v50 = v49 + *(double *)(a2 + 8);
    double v125 = v46 + *(double *)a2;
    *(double *)&long long v127 = v125;
    *((double *)&v127 + 1) = v50;
    LOBYTE(__p[3]) = 0;
    __p[1] = __p[0];
    int v147 = (char *)&unk_1EDD12418;
    *(void *)uint64_t v148 = a4;
    memset(&v148[8], 0, 48);
    uint64_t v149 = 0;
    uint64_t v150 = -1;
    long long v130 = *(_OWORD *)v148;
    sub_18E12ECC0(v131, (uint64_t)&v148[16]);
    uint64_t v133 = v150;
    int v147 = (char *)&unk_1EDD12418;
    sub_18E12EB68((uint64_t)&v148[16]);
    sub_18E12E848(&v129);
    while (*((void *)&v132 + 1))
    {
      uint64_t v28 = (cnprint::CNPrinter *)(*(uint64_t (**)(void, void **))(**((void **)&v130 + 1) + 16))(*((void *)&v130 + 1), &v126);
      if (LOBYTE(__p[3])) {
        goto LABEL_31;
      }
      sub_18E12E950(&v129);
    }
    sub_18E12F5A4((uint64_t)&v126);
    if (LOBYTE(__p[3]))
    {
LABEL_31:
      uint64_t v42 = (v42 + 1);
      goto LABEL_32;
    }
    uint64_t v120 = *(void *)(a2 + 16);
    if (*(unsigned char *)(*a1 + 3648))
    {
      unint64_t v57 = a1[380];
      unint64_t v58 = a1[381];
      if (v57 >= v58)
      {
        uint64_t v73 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v57 - *v119) >> 3);
        unint64_t v74 = v73 + 1;
        if ((unint64_t)(v73 + 1) > 0x492492492492492) {
          sub_18DEE1FC8();
        }
        unint64_t v75 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v58 - *v119) >> 3);
        if (2 * v75 > v74) {
          unint64_t v74 = 2 * v75;
        }
        if (v75 >= 0x249249249249249) {
          unint64_t v76 = 0x492492492492492;
        }
        else {
          unint64_t v76 = v74;
        }
        *(void *)&v148[24] = a1 + 381;
        if (v76) {
          unint64_t v76 = (unint64_t)sub_18E130318(v76);
        }
        else {
          uint64_t v77 = 0;
        }
        unint64_t v79 = v76 + 56 * v73;
        int v147 = (char *)v76;
        *(void *)uint64_t v148 = v79;
        *(void *)&v148[16] = v76 + 56 * v77;
        *(double *)unint64_t v79 = v125;
        *(double *)(v79 + 8) = v50;
        *(void *)(v79 + 16) = v120;
        *(void *)(v79 + 48) = 0;
        *(void *)(v79 + 40) = 0;
        *(void *)(v79 + 24) = 0;
        *(void *)(v79 + 32) = v79 + 40;
        *(void *)&v148[8] = v79 + 56;
        sub_18E130264(v119, &v147);
        uint64_t v59 = a1[380];
        uint64_t v28 = (cnprint::CNPrinter *)sub_18E130364((uint64_t)&v147);
      }
      else
      {
        *(double *)unint64_t v57 = v125;
        *(double *)(v57 + 8) = v50;
        *(void *)(v57 + 16) = v120;
        *(void *)(v57 + 48) = 0;
        *(void *)(v57 + 40) = 0;
        uint64_t v59 = v57 + 56;
        *(void *)(v57 + 24) = 0;
        *(void *)(v57 + 32) = v57 + 40;
      }
      a1[380] = v59;
      goto LABEL_32;
    }
    uint64_t v60 = (uint64_t **)a1[388];
    uint64_t v61 = (uint64_t **)a1[389];
    uint64_t v123 = v42;
    LODWORD(v62) = 0;
    if (v60 != v61) {
      break;
    }
    uint64_t v78 = a1[388];
LABEL_62:
    uint64_t v62 = v62;
    if (v62 != ((uint64_t)v60 - v78) >> 3) {
      goto LABEL_78;
    }
    *(int64x2_t *)uint64_t v139 = v111;
    if (*((unsigned char *)a1 + 64))
    {
      double v80 = *((double *)a1 + 27);
      double v81 = v125 / v80;
      BOOL v72 = v80 <= 0.0;
      double v82 = 0.0;
      if (!v72) {
        double v82 = v81;
      }
      double v83 = v82 + *((double *)a1 + 6);
      *(double *)uint64_t v139 = v50 / *((double *)a1 + 26) + *((double *)a1 + 5);
      *(double *)&v139[8] = v83;
    }
    unint64_t v84 = (*v112 - v78) >> 3;
    if (v84 <= v62)
    {
      unint64_t v85 = v84 + v113;
      if (v84 < v84 + v113)
      {
        if (v85 >> 61) {
          sub_18E01138C();
        }
        *(void *)&v148[24] = a1 + 390;
        uint64_t v86 = (char *)sub_18DEDF808((uint64_t)v112, v85);
        uint64_t v88 = (void *)a1[389];
        uint64_t v89 = (void *)a1[388];
        if (v88 == v89)
        {
          int64x2_t v92 = vdupq_n_s64((unint64_t)v88);
          uint64_t v90 = &v86[8 * v62];
        }
        else
        {
          uint64_t v90 = &v86[8 * v62];
          do
          {
            uint64_t v91 = *--v88;
            *uint64_t v88 = 0;
            *((void *)v90 - 1) = v91;
            v90 -= 8;
          }
          while (v88 != v89);
          int64x2_t v92 = *((int64x2_t *)a1 + 194);
        }
        a1[388] = (uint64_t)v90;
        a1[389] = (uint64_t)&v86[8 * v62];
        *(int64x2_t *)uint64_t v148 = v92;
        uint64_t v93 = a1[390];
        a1[390] = (uint64_t)&v86[8 * v87];
        *(void *)&v148[16] = v93;
        int v147 = (char *)v92.i64[0];
        sub_18E0114D8((uint64_t)&v147);
      }
    }
    uint64_t v28 = (cnprint::CNPrinter *)raven::RavenFacetVisibilityData::ConstructPointToFacetVisibilityHierarchy((uint64_t)(a1 + 382), (float64x2_t *)v139, a1[4], v143);
    if (v28)
    {
      uint64_t v78 = a1[388];
      uint64_t v62 = ((unint64_t)(a1[389] - v78) >> 3) - 1;
LABEL_78:
      uint64_t v94 = *(void *)(v78 + 8 * v62);
      unint64_t v95 = a1[380];
      unint64_t v96 = a1[381];
      if (v95 >= v96)
      {
        uint64_t v98 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v95 - *v119) >> 3);
        unint64_t v99 = v98 + 1;
        a4 = v114;
        if ((unint64_t)(v98 + 1) > 0x492492492492492) {
          sub_18DEE1FC8();
        }
        unint64_t v100 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v96 - *v119) >> 3);
        if (2 * v100 > v99) {
          unint64_t v99 = 2 * v100;
        }
        if (v100 >= 0x249249249249249) {
          unint64_t v101 = 0x492492492492492;
        }
        else {
          unint64_t v101 = v99;
        }
        *(void *)&v148[24] = a1 + 381;
        if (v101) {
          unint64_t v101 = (unint64_t)sub_18E130318(v101);
        }
        else {
          uint64_t v102 = 0;
        }
        unint64_t v103 = v101 + 56 * v98;
        int v147 = (char *)v101;
        *(void *)uint64_t v148 = v103;
        *(void *)&v148[16] = v101 + 56 * v102;
        *(double *)unint64_t v103 = v125;
        *(double *)(v103 + 8) = v50;
        *(void *)(v103 + 16) = v120;
        *(void *)(v103 + 48) = 0;
        *(void *)(v103 + 40) = 0;
        *(void *)(v103 + 24) = v94;
        *(void *)(v103 + 32) = v103 + 40;
        *(void *)&v148[8] = v103 + 56;
        sub_18E130264(v119, &v147);
        uint64_t v97 = a1[380];
        uint64_t v28 = (cnprint::CNPrinter *)sub_18E130364((uint64_t)&v147);
      }
      else
      {
        *(double *)unint64_t v95 = v125;
        *(double *)(v95 + 8) = v50;
        *(void *)(v95 + 16) = v120;
        *(void *)(v95 + 48) = 0;
        *(void *)(v95 + 40) = 0;
        uint64_t v97 = v95 + 56;
        *(void *)(v95 + 24) = v94;
        *(void *)(v95 + 32) = v95 + 40;
        a4 = v114;
      }
      a1[380] = v97;
      uint64_t v42 = v123;
      goto LABEL_32;
    }
    a4 = v114;
LABEL_32:
    if (v48++ == v124) {
      goto LABEL_92;
    }
  }
  while (*((unsigned char *)a1 + 64))
  {
    double v63 = v47;
    double v64 = v43;
    double v65 = v13;
    uint64_t v66 = **v60;
    double v67 = (double)v66 * 0.000001;
    if (v67 > 180.0) {
      double v67 = v67 + -360.0;
    }
    double v68 = *((double *)a1 + 5);
    double v69 = *((double *)a1 + 26);
    double v70 = sub_18E011450((uint64_t)(a1 + 5), v67);
    double v71 = vabdd_f64(v69 * -(v68 - ((double)HIDWORD(v66) * 0.000001 + -90.0) * 0.0174532925), v50);
    BOOL v72 = vabdd_f64(v70, v125) <= v121 && v71 <= v121;
    if (v72)
    {
      double v13 = v65;
      uint64_t v42 = v123;
      double v43 = v64;
      double v47 = v63;
LABEL_61:
      uint64_t v60 = (uint64_t **)a1[389];
      uint64_t v78 = a1[388];
      goto LABEL_62;
    }
    LODWORD(v62) = v62 + 1;
    ++v60;
    double v13 = v65;
    uint64_t v42 = v123;
    double v43 = v64;
    double v47 = v63;
    if (v60 == v61) {
      goto LABEL_61;
    }
  }
  LOWORD(v147) = 12;
  v139[0] = 4;
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v147, v139, "#nlos,Could not compute building data coordinates for tile point", v51, v52, v53, v54, v55, v110);
LABEL_98:
  float64x2_t v126 = &unk_1EDD12560;
  double v129 = &unk_1EDD12418;
  sub_18E12EB68((uint64_t)v131);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v116;
}

void sub_18E126308(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
}

uint64_t raven::RavenNLOSEngine::ProcessSatellite(cnprint::CNPrinter *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v114 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = (cnprint::CNPrinter *)sub_18E128CBC(a2);
  v111[0] = v7;
  *(double *)&v111[1] = v8;
  if (*((unsigned char *)a1 + 8))
  {
    uint64_t v104 = (float64x2_t *)&v104;
    uint64_t v105 = &v104;
    memset(v106, 0, sizeof(v106));
    v107[0] = v107;
    v107[1] = v107;
    v107[2] = 0;
    int v108 = 0;
    *(_OWORD *)std::string __p = 0u;
    memset(v110, 0, sizeof(v110));
    unint64_t v101 = (float64x2_t *)&v101;
    uint64_t v102 = (uint64_t *)&v101;
    uint64_t v103 = 0;
    double v11 = (long long *)*((void *)a1 + 379);
    unint64_t v74 = (long long *)*((void *)a1 + 380);
    if (v11 == v74)
    {
      unsigned int v73 = 0;
      goto LABEL_64;
    }
    unsigned int v73 = 0;
    int64x2_t v72 = vdupq_n_s64(0x7FF8000000000000uLL);
    while (1)
    {
      uint64_t v12 = *(void *)a1;
      if (*(unsigned char *)(*(void *)a1 + 3648))
      {
        raven::RavenNLOSEngine::FindApproximatePathsUsingRayTracing(a1, (uint64_t)v111, a2, (double *)v11, (double *)a3, a4, v9, v10, (uint64_t *)&v90);
        sub_18E12CDF0((uint64_t *)&v101);
        uint64_t v13 = v91;
        if ((void)v91)
        {
          long long v14 = v90;
          uint64_t v15 = **((void **)&v90 + 1);
          *(void *)(v15 + 8) = *(void *)(v90 + 8);
          **(void **)(v14 + 8) = v15;
          uint64_t v16 = (uint64_t)v101;
          v101->f64[1] = *((float64_t *)&v14 + 1);
          **((void **)&v14 + 1) = v16;
          *(void *)(v14 + 8) = &v101;
          unint64_t v101 = (float64x2_t *)v14;
          v103 += v13;
          *(void *)&long long v91 = 0;
        }
        sub_18E12CDF0((uint64_t *)&v90);
        uint64_t v17 = v103;
      }
      else
      {
        uint64_t v35 = *((void *)v11 + 3);
        uint64_t v36 = *(void *)(v12 + 3544);
        int v37 = *(unsigned __int8 *)(v12 + 3552);
        __p[1] = __p[0];
        sub_18E12CDF0((uint64_t *)&v104);
        sub_18E12CDF0((uint64_t *)&v101);
        if (!a4) {
          goto LABEL_56;
        }
        if (!v35) {
          goto LABEL_56;
        }
        if (!(_BYTE)v36) {
          goto LABEL_56;
        }
        int v108 = v36;
        long long v38 = *v11;
        *((void *)&v106[1] + 1) = *((void *)v11 + 2);
        *(_OWORD *)((char *)v106 + 8) = v38;
        *(_OWORD *)((char *)v110 + 8) = *(_OWORD *)a3;
        *((void *)&v110[1] + 1) = *(void *)(a3 + 16);
        *(void *)&long long v90 = &unk_1EDD123D0;
        double v39 = *(double *)a3 - *(double *)v11;
        double v40 = *(double *)(a3 + 8) - *((double *)v11 + 1);
        double v41 = *(double *)(a3 + 16) - *((double *)v11 + 2);
        double v42 = sqrt(v40 * v40 + v39 * v39 + v41 * v41);
        if (fabs(v42) < 2.22044605e-16) {
          goto LABEL_56;
        }
        double v43 = 1.0 / v42;
        double v44 = v39 * v43;
        double v45 = v40 * v43;
        double v46 = v41 * v43;
        long long v112 = *v11;
        double v113 = *((double *)v11 + 2);
        long long v91 = v112;
        *(double *)&long long v92 = v113;
        *((double *)&v92 + 1) = v39 * v43;
        double v93 = v40 * v43;
        double v94 = v41 * v43;
        *((void *)&v90 + 1) = a4;
        LODWORD(v95) = 0;
        BYTE4(v95) = 0;
        (*(void (**)(uint64_t, long long *))(*(void *)a4 + 16))(a4, &v90);
        if (BYTE4(v95)) {
          goto LABEL_42;
        }
        long long v76 = v112;
        double v77 = v113;
        double v78 = v44;
        double v79 = v45;
        double v80 = v46;
        v81[0] = v81;
        v81[1] = v81;
        uint64_t v82 = 0;
        uint64_t v61 = (float64x2_t *)sub_18E1303BC(&v76);
        uint64_t v62 = (uint64_t)v101;
        *(void *)&v61->f64[0] = v101;
        *(void *)&v61->f64[1] = &v101;
        *(void *)(v62 + 8) = v61;
        unint64_t v101 = v61;
        ++v103;
        sub_18E068ED0(v81);
        if (!v37)
        {
LABEL_42:
          for (unint64_t i = *(void **)(v35 + 24); i; unint64_t i = (void *)*i)
          {
            sub_18E068ED0(v107);
            __p[1] = __p[0];
            sub_18E12C12C(__p, (v108 + 1));
            sub_18E12CE64(&v104, i[2], a4);
          }
          uint64_t v48 = *(void *)&v106[0];
          uint64_t v17 = v103;
          if (*(void *)&v106[0])
          {
            double v49 = v105;
            double v50 = v104;
            uint64_t v51 = *v105;
            v51->f64[1] = v104->f64[1];
            **(void **)&v50->f64[1] = v51;
            uint64_t v52 = (uint64_t)v101;
            *(void *)&v101->f64[1] = v49;
            *double v49 = v52;
            *(void *)&v50->f64[1] = &v101;
            v17 += v48;
            unint64_t v101 = v50;
            uint64_t v103 = v17;
            *(void *)&v106[0] = 0;
          }
          if (!v17) {
            goto LABEL_56;
          }
        }
        else
        {
          uint64_t v17 = v103;
        }
      }
      if (!v17) {
        goto LABEL_56;
      }
      LOBYTE(v90) = 0;
      char v100 = 0;
      double v18 = v102;
      if (v102 == (uint64_t *)&v101) {
        goto LABEL_56;
      }
      double v19 = INFINITY;
      do
      {
        raven::RavenNLOSEngine::RefineApproximatePath(a1, (uint64_t)(v18 + 2), (uint64_t)v111, a2, (double *)a3, (uint64_t)&v76);
        if (!v89) {
          goto LABEL_18;
        }
        if (v82) {
          double v20 = v86
        }
              - sqrt((v84 - *((double *)&v76 + 1)) * (v84 - *((double *)&v76 + 1))+ (v83 - *(double *)&v76) * (v83 - *(double *)&v76)+ (v85 - v77) * (v85 - v77));
        else {
          double v20 = 0.0;
        }
        if (v20 >= v19 || (sub_18E12D774((uint64_t)&v90, &v76), double v19 = v20, v89))
        {
          uint64_t v88 = &unk_1EDD17478;
          uint64_t v87 = &unk_1EDD17478;
          sub_18E068ED0(v81);
LABEL_18:
          double v20 = v19;
        }
        double v18 = (uint64_t *)v18[1];
        double v19 = v20;
      }
      while (v18 != (uint64_t *)&v101);
      if (v100)
      {
        unsigned int v21 = v73;
        if (v95) {
          unsigned int v21 = v73 + 1;
        }
        unsigned int v73 = v21;
        int v22 = (uint64_t *)*((void *)v11 + 5);
        int v23 = (char **)v11 + 5;
        int v24 = (uint64_t *)v11 + 5;
        if (v22)
        {
          unsigned int v25 = *(unsigned __int8 *)(a2 + 24);
          int v26 = *(_DWORD *)(a2 + 28);
          while (1)
          {
            while (1)
            {
              int v24 = v22;
              unsigned int v27 = *((unsigned __int8 *)v22 + 56);
              int v28 = *((_DWORD *)v24 + 15);
              BOOL v29 = v28 < v26;
              if (v27 != v25) {
                BOOL v29 = v27 < v25;
              }
              if (!v29) {
                break;
              }
              int v22 = (uint64_t *)*v24;
              int v23 = (char **)v24;
              if (!*v24) {
                goto LABEL_35;
              }
            }
            BOOL v30 = v28 > v26;
            BOOL v31 = v27 == v25;
            BOOL v32 = v27 > v25;
            if (v31) {
              BOOL v32 = v30;
            }
            if (!v32) {
              break;
            }
            int v22 = (uint64_t *)v24[1];
            if (!v22)
            {
              int v23 = (char **)(v24 + 1);
              goto LABEL_35;
            }
          }
        }
        else
        {
LABEL_35:
          uint64_t v33 = (char *)operator new(0x128uLL);
          *(void *)&long long v76 = v33;
          *((void *)&v76 + 1) = (char *)v11 + 40;
          LOBYTE(v77) = 0;
          double v34 = v33 + 32;
          if (*(char *)(a2 + 23) < 0)
          {
            sub_18DEDE668(v34, *(void **)a2, *(void *)(a2 + 8));
          }
          else
          {
            *(_OWORD *)double v34 = *(_OWORD *)a2;
            *((void *)v33 + 6) = *(void *)(a2 + 16);
          }
          *((void *)v33 + 7) = *(void *)(a2 + 24);
          *((int64x2_t *)v33 + 4) = v72;
          *((int64x2_t *)v33 + 5) = v72;
          *((int64x2_t *)v33 + 6) = v72;
          *((void *)v33 + 14) = v33 + 112;
          *((void *)v33 + 15) = v33 + 112;
          *((void *)v33 + 16) = 0;
          *(int64x2_t *)(v33 + 136) = v72;
          *(int64x2_t *)(v33 + 152) = v72;
          *((void *)v33 + 24) = 0x300000001;
          *((void *)v33 + 21) = &unk_1EDD18228;
          *((_OWORD *)v33 + 11) = xmmword_18E1F8560;
          *((void *)v33 + 25) = v33 + 208;
          *((void *)v33 + 32) = 0x300000001;
          *((void *)v33 + 29) = &unk_1EDD18228;
          *((_OWORD *)v33 + 15) = xmmword_18E1F8560;
          *((void *)v33 + 33) = v33 + 272;
          LOBYTE(v77) = 1;
          *(void *)uint64_t v33 = 0;
          *((void *)v33 + 1) = 0;
          *((void *)v33 + 2) = v24;
          *int v23 = v33;
          uint64_t v53 = **((void **)v11 + 4);
          if (v53)
          {
            *((void *)v11 + 4) = v53;
            uint64_t v33 = *v23;
          }
          sub_18DEEDADC(*((uint64_t **)v11 + 5), (uint64_t *)v33);
          ++*((void *)v11 + 6);
          int v24 = (uint64_t *)v76;
          *(void *)&long long v76 = 0;
          sub_18E131CE4((uint64_t)&v76);
        }
        long long v54 = v91;
        *((_OWORD *)v24 + 4) = v90;
        *((_OWORD *)v24 + 5) = v54;
        *((_OWORD *)v24 + 6) = v92;
        sub_18E068ED0(v24 + 14);
        uint64_t v55 = v95;
        if (v95)
        {
          double v57 = v93;
          double v56 = v94;
          uint64_t v58 = **(void **)&v94;
          *(void *)(v58 + 8) = *(void *)(*(void *)&v93 + 8);
          **(void **)(*(void *)&v57 + 8) = v58;
          uint64_t v59 = v24[14];
          *(double *)(v59 + 8) = v56;
          **(void **)&double v56 = v59;
          *((double *)v24 + 14) = v57;
          *(void *)(*(void *)&v57 + 8) = v24 + 14;
          v24[16] += v55;
          uint64_t v95 = 0;
        }
        long long v60 = v97;
        *(_OWORD *)(v24 + 17) = v96;
        *(_OWORD *)(v24 + 19) = v60;
        sub_18DFE2F24((uint64_t)(v24 + 21), (uint64_t)&v98);
        sub_18DFE2F24((uint64_t)(v24 + 29), (uint64_t)&v99);
        if (v100)
        {
          unint64_t v99 = &unk_1EDD17478;
          uint64_t v98 = &unk_1EDD17478;
          sub_18E068ED0(&v93);
        }
      }
LABEL_56:
      double v11 = (long long *)((char *)v11 + 56);
      if (v11 == v74)
      {
LABEL_64:
        sub_18E12CDF0((uint64_t *)&v101);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        sub_18E068ED0(v107);
        sub_18E12CDF0((uint64_t *)&v104);
        return v73;
      }
    }
  }
  uint64_t v63 = (uint64_t)v7;
  double v64 = v8;
  if (cnprint::CNPrinter::GetLogLevel(v7) <= 1)
  {
    LOWORD(v90) = 12;
    LOBYTE(v76) = 1;
    double v71 = v64 + (double)v63;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v90, (unsigned __int8 *)&v76, "#nlos,time,%.3lf,object not configured in %s", v65, v66, v67, v68, v69, SLOBYTE(v71));
  }
  return 0;
}

void sub_18E126BB4(_Unwind_Exception *a1)
{
}

uint64_t raven::RavenNLOSEngine::AugmentMeasurementWithRayTracingResults(uint64_t a1, uint64_t a2)
{
  LOBYTE(v129) = 0;
  char v134 = 0;
  uint64_t v139 = 0x300000003;
  long long v138 = xmmword_18E1F0010;
  int v137 = &unk_1EDD18EE8;
  uint64_t v140 = v141;
  if (*(unsigned char *)(a1 + 200) && *(unsigned char *)(a1 + 80))
  {
    sub_18DFE2F24((uint64_t)&v137, a1 + 88);
    sub_18DFE2FA8((uint64_t)&v113, (uint64_t)&v137);
    char v122 = 1;
    sub_18DFE2FA8((uint64_t)&v129, (uint64_t)&v113);
    char v134 = 1;
    v135[0] = 0;
    char v136 = 0;
    sub_18DFE2FA8((uint64_t)v135, (uint64_t)&v129);
    char v136 = 1;
    uint64_t v4 = (cnprint::CNPrinter *)sub_18E128CBC(a2);
    uint64_t v6 = &v127;
    long long v127 = 0;
    uint64_t v128 = 0;
    float64x2_t v126 = &v127;
    uint64_t v7 = *(void *)(a1 + 3032);
    uint64_t v8 = *(void *)(a1 + 3040);
    if (v7 == v8) {
      goto LABEL_101;
    }
    uint64_t v102 = (uint64_t)v4;
    unsigned int v9 = 0;
    double v10 = v5;
    do
    {
      uint64_t v11 = *(void *)(v7 + 40);
      if (v11)
      {
        unsigned int v12 = *(unsigned __int8 *)(a2 + 24);
        int v13 = *(_DWORD *)(a2 + 28);
        uint64_t v14 = v7 + 40;
        do
        {
          unsigned int v15 = *(unsigned __int8 *)(v11 + 56);
          BOOL v17 = v15 == v12;
          BOOL v16 = v15 > v12;
          if (v17) {
            BOOL v16 = *(_DWORD *)(v11 + 60) > v13;
          }
          BOOL v17 = !v16;
          if (v16) {
            double v18 = (uint64_t *)(v11 + 8);
          }
          else {
            double v18 = (uint64_t *)v11;
          }
          if (v17) {
            uint64_t v14 = v11;
          }
          uint64_t v11 = *v18;
        }
        while (*v18);
        if (v14 != v7 + 40)
        {
          unsigned int v19 = *(unsigned __int8 *)(v14 + 56);
          BOOL v20 = *(_DWORD *)(v14 + 60) < v13;
          BOOL v17 = v19 == v12;
          BOOL v21 = v19 < v12;
          if (v17) {
            BOOL v21 = v20;
          }
          if (!v21)
          {
            sub_18E12C7B0(&v113, v14 + 64);
            int v22 = v127;
            int v23 = &v127;
            int v24 = &v127;
            if (v127)
            {
              while (1)
              {
                while (1)
                {
                  int v24 = (uint64_t **)v22;
                  uint64_t v25 = (uint64_t)(v22 + 4);
                  if ((sub_18E132410((uint64_t)&v113, (uint64_t)(v22 + 4)) & 0x80) == 0) {
                    break;
                  }
                  int v22 = *v24;
                  int v23 = v24;
                  if (!*v24) {
                    goto LABEL_28;
                  }
                }
                if ((sub_18E132410(v25, (uint64_t)&v113) & 0x80) == 0) {
                  break;
                }
                int v22 = v24[1];
                if (!v22)
                {
                  int v23 = v24 + 1;
                  goto LABEL_28;
                }
              }
              int v26 = v24;
            }
            else
            {
LABEL_28:
              unsigned int v27 = (uint64_t **)operator new(0x40uLL);
              int v26 = v27;
              v27[4] = (uint64_t *)(v27 + 4);
              v27[5] = (uint64_t *)(v27 + 4);
              v27[6] = 0;
              int v28 = *(uint64_t **)&v114[8];
              if (*(void *)&v114[8])
              {
                double v30 = v113;
                BOOL v29 = *(uint64_t ***)v114;
                uint64_t v31 = **(void **)v114;
                *(void *)(v31 + 8) = *(void *)(*(void *)&v113 + 8);
                **(void **)(*(void *)&v30 + 8) = v31;
                BOOL v32 = v27[4];
                v32[1] = (uint64_t)v29;
                *BOOL v29 = v32;
                *((double *)v27 + 4) = v30;
                *(void *)(*(void *)&v30 + 8) = v27 + 4;
                v27[6] = v28;
                *(void *)&v114[8] = 0;
              }
              *((_DWORD *)v27 + 14) = 0;
              char *v27 = 0;
              v27[1] = 0;
              void v27[2] = (uint64_t *)v24;
              *int v23 = (uint64_t *)v27;
              uint64_t v33 = (uint64_t *)v27;
              if (*v126)
              {
                float64x2_t v126 = (uint64_t **)*v126;
                uint64_t v33 = *v23;
              }
              sub_18DEEDADC(v127, v33);
              ++v128;
            }
            uint64_t v4 = (cnprint::CNPrinter *)sub_18E068ED0(&v113);
            int v34 = *((_DWORD *)v26 + 14);
            *((_DWORD *)v26 + 14) = v34 + 1;
            if (v34 + 1 > v9) {
              unsigned int v9 = v34 + 1;
            }
          }
        }
      }
      v7 += 56;
    }
    while (v7 != v8);
    if (!v128) {
      goto LABEL_101;
    }
    uint64_t v35 = v126;
    if (v126 != &v127)
    {
      unint64_t v36 = 0;
      do
      {
        sub_18E12E3A4(&v113, (uint64_t)(v35 + 4));
        *(_DWORD *)&v114[16] = *((_DWORD *)v35 + 14);
        int v37 = *(_DWORD *)&v114[16];
        uint64_t v4 = (cnprint::CNPrinter *)sub_18E068ED0(&v113);
        if (v37 == v9) {
          ++v36;
        }
        long long v38 = v35[1];
        if (v38)
        {
          do
          {
            double v39 = (uint64_t **)v38;
            long long v38 = (uint64_t *)*v38;
          }
          while (v38);
        }
        else
        {
          do
          {
            double v39 = (uint64_t **)v35[2];
            BOOL v17 = *v39 == (uint64_t *)v35;
            uint64_t v35 = v39;
          }
          while (!v17);
        }
        uint64_t v35 = v39;
      }
      while (v39 != &v127);
      if (v36 >= 2)
      {
        if (cnprint::CNPrinter::GetLogLevel(v4) <= 1)
        {
          LOWORD(v113) = 12;
          LOBYTE(v129) = 1;
          sub_18E017C64(a2);
          double v97 = v10 + (double)v102;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v113, (unsigned __int8 *)&v129, "#nlos,time,%.3lf,ray tracing results ignored for %s: multiple sequences occur most frequently, %lld", v40, v41, v42, v43, v44, SLOBYTE(v97));
        }
LABEL_101:
        uint64_t v53 = 0;
LABEL_102:
        sub_18E1323BC(v127);
        return v53;
      }
      long long v54 = v126;
      if (v126 != &v127)
      {
        while (1)
        {
          sub_18E12E3A4(&v113, (uint64_t)(v54 + 4));
          *(_DWORD *)&v114[16] = *((_DWORD *)v54 + 14);
          int v55 = *(_DWORD *)&v114[16];
          uint64_t v4 = (cnprint::CNPrinter *)sub_18E068ED0(&v113);
          if (v55 == v9) {
            break;
          }
          double v56 = v54[1];
          if (v56)
          {
            do
            {
              double v57 = (uint64_t **)v56;
              double v56 = (uint64_t *)*v56;
            }
            while (v56);
          }
          else
          {
            do
            {
              double v57 = (uint64_t **)v54[2];
              BOOL v17 = *v57 == (uint64_t *)v54;
              long long v54 = v57;
            }
            while (!v17);
          }
          long long v54 = v57;
          if (v57 == &v127) {
            goto LABEL_61;
          }
        }
        uint64_t v6 = v54;
      }
    }
LABEL_61:
    if (!v6[6])
    {
      if (cnprint::CNPrinter::GetLogLevel(v4) <= 1)
      {
        LOWORD(v113) = 12;
        LOBYTE(v129) = 1;
        sub_18E017C64(a2);
        double v100 = v10 + (double)v102;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v113, (unsigned __int8 *)&v129, "#nlos,time,%.3lf,ray tracing results ignored for %s: most common path is LOS", v86, v87, v88, v89, v90, SLOBYTE(v100));
      }
      goto LABEL_101;
    }
    if ((double)v9
       / (double)(unint64_t)(0x6DB6DB6DB6DB6DB7
                                  * ((uint64_t)(*(void *)(a1 + 3040) - *(void *)(a1 + 3032)) >> 3)) < *(double *)(*(void *)a1 + 3632))
    {
      if (cnprint::CNPrinter::GetLogLevel(v4) <= 1)
      {
        LOWORD(v113) = 12;
        LOBYTE(v129) = 1;
        sub_18E017C64(a2);
        double v101 = v10 + (double)v102;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v113, (unsigned __int8 *)&v129, "#nlos,time,%.3lf,ray tracing results ignored for %s: low occurrence rate of %.1lf%% (N = %lu)", v91, v92, v93, v94, v95, SLOBYTE(v101));
      }
      goto LABEL_101;
    }
    v123[0] = 0;
    long long v124 = 0u;
    memset(v125, 0, sizeof(v125));
    uint64_t v131 = 0x300000001;
    double v129 = &unk_1EDD18228;
    long long v132 = &v133;
    long long v130 = xmmword_18E1F8560;
    sub_18DFE2CC8((uint64_t)&v129, 0.0);
    uint64_t v139 = 0x300000001;
    int v137 = &unk_1EDD18228;
    uint64_t v140 = v141;
    long long v138 = xmmword_18E1F8560;
    sub_18DFE2CC8((uint64_t)&v137, 0.0);
    uint64_t v59 = *(void *)(a1 + 3032);
    uint64_t v60 = *(void *)(a1 + 3040);
    if (v59 == v60)
    {
LABEL_90:
      uint64_t v115 = 0x300000001;
      *(void *)uint64_t v114 = &unk_1EDD18228;
      *(_OWORD *)&v114[8] = xmmword_18E1F8560;
      BOOL v116 = &v117;
      uint64_t v120 = 0x300000001;
      uint64_t v118 = &unk_1EDD18228;
      long long v119 = xmmword_18E1F8560;
      double v121 = &v122;
      double v113 = *(double *)&v125[1];
      uint64_t v105 = 0x300000001;
      uint64_t v103 = &unk_1EDD18228;
      long long v104 = xmmword_18E1F8560;
      uint64_t v106 = v107;
      v58.n128_f64[0] = 1.0 / (double)v9;
      sub_18DFE3240((uint64_t)&v129, (uint64_t)&v103, (float64x2_t)v58);
      if (!v136) {
        sub_18DFF28FC();
      }
      uint64_t v110 = 0x300000001;
      int v108 = &unk_1EDD18228;
      long long v109 = xmmword_18E1F8560;
      int64x2_t v111 = v112;
      sub_18DFE2B44((uint64_t)&v103, (uint64_t)v135, (uint64_t)&v108);
      sub_18DFE2F24((uint64_t)v114, (uint64_t)&v108);
      uint64_t v105 = 0x300000001;
      uint64_t v103 = &unk_1EDD18228;
      *(void *)&v78.f64[1] = 0x100000003;
      long long v104 = xmmword_18E1F8560;
      uint64_t v106 = v107;
      v78.f64[0] = 1.0 / (double)v9;
      sub_18DFE3240((uint64_t)&v137, (uint64_t)&v103, v78);
      if (!v136) {
        sub_18DFF28FC();
      }
      uint64_t v110 = 0x300000001;
      int v108 = &unk_1EDD18228;
      long long v109 = xmmword_18E1F8560;
      int64x2_t v111 = v112;
      sub_18DFE2B44((uint64_t)&v103, (uint64_t)v135, (uint64_t)&v108);
      sub_18DFE2F24((uint64_t)&v118, (uint64_t)&v108);
      double v79 = (double *)operator new(0xA0uLL);
      v79[1] = 0.0;
      v79[2] = 0.0;
      *(void *)double v79 = &unk_1EDD1E5A8;
      v79[3] = v113;
      sub_18E12D914((uint64_t)(v79 + 4), (uint64_t)v114);
      sub_18E12D914((uint64_t)(v79 + 12), (uint64_t)&v118);
      double v80 = *(std::__shared_weak_count **)(a2 + 320);
      *(void *)(a2 + 312) = v79 + 3;
      *(void *)(a2 + 320) = v79;
      if (v80) {
        sub_18DEE4E18(v80);
      }
      if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v80) <= 1)
      {
        LOWORD(v108) = 12;
        LOBYTE(v103) = 1;
        sub_18E017C64(a2);
        double v99 = v10 + (double)v102;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v108, (unsigned __int8 *)&v103, "#nlos,time,%.3lf,%s augmented with ray tracing data, occurrence rate of %.1lf%% (N = %lu)", v81, v82, v83, v84, v85, SLOBYTE(v99));
      }
      uint64_t v53 = 1;
      goto LABEL_102;
    }
    while (1)
    {
      uint64_t v61 = *(void *)(v59 + 40);
      if (!v61) {
        goto LABEL_89;
      }
      unsigned int v62 = *(unsigned __int8 *)(a2 + 24);
      int v63 = *(_DWORD *)(a2 + 28);
      uint64_t v64 = v59 + 40;
      do
      {
        unsigned int v65 = *(unsigned __int8 *)(v61 + 56);
        BOOL v17 = v65 == v62;
        BOOL v66 = v65 > v62;
        if (v17) {
          BOOL v66 = *(_DWORD *)(v61 + 60) > v63;
        }
        BOOL v67 = !v66;
        if (v66) {
          uint64_t v68 = (uint64_t *)(v61 + 8);
        }
        else {
          uint64_t v68 = (uint64_t *)v61;
        }
        if (v67) {
          uint64_t v64 = v61;
        }
        uint64_t v61 = *v68;
      }
      while (*v68);
      if (v64 == v59 + 40) {
        goto LABEL_89;
      }
      unsigned int v69 = *(unsigned __int8 *)(v64 + 56);
      BOOL v70 = *(_DWORD *)(v64 + 60) < v63;
      BOOL v17 = v69 == v62;
      BOOL v71 = v69 < v62;
      if (v17) {
        BOOL v71 = v70;
      }
      if (v71) {
        goto LABEL_89;
      }
      sub_18E12C7B0(&v113, v64 + 64);
      if (*(uint64_t **)&v114[8] == v6[6])
      {
        int64x2_t v72 = *(void ***)v114;
        if (*(double **)v114 == &v113)
        {
LABEL_84:
          sub_18E068ED0(&v113);
          if (*(void *)(v64 + 128))
          {
            double v74 = *(double *)(v64 + 136) - *(double *)(v64 + 64);
            double v75 = *(double *)(v64 + 144) - *(double *)(v64 + 72);
            double v76 = *(double *)(v64 + 152) - *(double *)(v64 + 80);
            double v77 = *(double *)(v64 + 160) - sqrt(v75 * v75 + v74 * v74 + v76 * v76);
          }
          else
          {
            double v77 = 0.0;
          }
          double v113 = v77;
          sub_18DFF11E4((uint64_t)v123, &v113, 1.0);
          *(void *)&v114[16] = 0x300000001;
          *(_OWORD *)uint64_t v114 = xmmword_18E1F8560;
          double v113 = COERCE_DOUBLE(&unk_1EDD18228);
          uint64_t v115 = (uint64_t)&v116;
          sub_18DFEF1F4((uint64_t)&v129, v64 + 168, (uint64_t)&v113);
          sub_18DFE2F24((uint64_t)&v129, (uint64_t)&v113);
          *(void *)&v114[16] = 0x300000001;
          *(_OWORD *)uint64_t v114 = xmmword_18E1F8560;
          double v113 = COERCE_DOUBLE(&unk_1EDD18228);
          uint64_t v115 = (uint64_t)&v116;
          sub_18DFEF1F4((uint64_t)&v129, v64 + 232, (uint64_t)&v113);
          __n128 v58 = sub_18DFE2F24((uint64_t)&v137, (uint64_t)&v113);
          goto LABEL_89;
        }
        unsigned int v73 = v6 + 4;
        while (1)
        {
          unsigned int v73 = (uint64_t **)v73[1];
          if (v72[2] != v73[2]) {
            break;
          }
          int64x2_t v72 = (void **)v72[1];
          if (v72 == (void **)&v113) {
            goto LABEL_84;
          }
        }
      }
      sub_18E068ED0(&v113);
LABEL_89:
      v59 += 56;
      if (v59 == v60) {
        goto LABEL_90;
      }
    }
  }
  v135[0] = 0;
  char v136 = 0;
  LOWORD(v113) = 12;
  LOBYTE(v129) = 4;
  uint64_t v45 = sub_18E128CBC(a2);
  double v47 = v46;
  sub_18E017C64(a2);
  double v98 = v47 + (double)v45;
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v113, (unsigned __int8 *)&v129, "#nlos,time,%.3lf,%s could not get ECEF-to-ENU rotation matrix", v48, v49, v50, v51, v52, SLOBYTE(v98));
  return 0;
}

void sub_18E1276B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56)
{
}

char *raven::RavenNLOSEngine::HandleEvent(char *result, unsigned char *a2)
{
  if (result[8]) {
    BOOL v2 = a2[209] == 2;
  }
  else {
    BOOL v2 = 0;
  }
  if (v2 && a2[208] == 4 && a2[1464] != 0 && a2[1264] != 0)
  {
    uint64_t v6 = result;
    if (result[2896])
    {
      uint64_t v7 = result + 472;
      uint64_t v8 = a2 + 8;
      return (char *)memcpy(v7, v8, 0x971uLL);
    }
    else
    {
      *((void *)result + 58) = &unk_1EDD14150;
      double result = (char *)memcpy(result + 472, a2 + 8, 0x971uLL);
      v6[2896] = 1;
    }
  }
  return result;
}

void raven::RavenNLOSEngine::HandleEvent(raven::RavenNLOSEngine *this, const raven::RayTracingTileEvent *a2)
{
  if (*((unsigned char *)this + 8))
  {
    if (!*(unsigned char *)(*(void *)this + 3648))
    {
      CoreNavigation::CLP::LogEntry::LogEntry::LogEntry((CoreNavigation::CLP::LogEntry::LogEntry *)v198);
      uint64_t v4 = wireless_diagnostics::google::protobuf::MessageLite::ParseFromString();
      if (v4)
      {
        if ((v200 & 2) != 0)
        {
          v200 |= 2u;
          uint64_t v26 = v199;
          if (!v199) {
            operator new();
          }
          *(_DWORD *)(v199 + 320) |= 0x20u;
          uint64_t v27 = *(void *)(v26 + 304);
          if (!v27) {
            operator new();
          }
          if ((*(unsigned char *)(v27 + 36) & 2) != 0)
          {
            uint64_t v28 = *(void *)(v27 + 16);
            if (!v28)
            {
              CoreNavigation::CLP::LogEntry::RayTracingTileData::protobuf_AddDesc_CoreNavigationCLPRayTracingTileData_2eproto((CoreNavigation::CLP::LogEntry::RayTracingTileData *)v4);
              uint64_t v28 = *(void *)(CoreNavigation::CLP::LogEntry::RayTracingTileData::LogEntry::default_instance_ + 16);
            }
            if (*(unsigned char *)(v28 + 212))
            {
              uint64_t v43 = *(void *)(v27 + 16);
              if (!v43)
              {
                CoreNavigation::CLP::LogEntry::RayTracingTileData::protobuf_AddDesc_CoreNavigationCLPRayTracingTileData_2eproto((CoreNavigation::CLP::LogEntry::RayTracingTileData *)v4);
                uint64_t v43 = *(void *)(CoreNavigation::CLP::LogEntry::RayTracingTileData::LogEntry::default_instance_ + 16);
              }
              uint64_t v44 = *(void *)(v43 + 8);
              if (!v44)
              {
                CoreNavigation::CLP::LogEntry::RayTracingTileData::protobuf_AddDesc_CoreNavigationCLPRayTracingTileData_2eproto((CoreNavigation::CLP::LogEntry::RayTracingTileData *)v4);
                uint64_t v44 = *(void *)(CoreNavigation::CLP::LogEntry::RayTracingTileData::RayTracingTilePayload::default_instance_
                                + 8);
              }
              int v45 = *(_DWORD *)(v44 + 72);
              if (v45)
              {
                unint64_t v53 = *(void *)(v44 + 8);
                long long v54 = (void *)*((void *)this + 392);
                if (!v54) {
                  goto LABEL_38;
                }
                int v55 = (void *)((char *)this + 3136);
                do
                {
                  unint64_t v56 = v54[4];
                  BOOL v57 = v56 >= v53;
                  if (v56 >= v53) {
                    __n128 v58 = v54;
                  }
                  else {
                    __n128 v58 = v54 + 1;
                  }
                  if (v57) {
                    int v55 = v54;
                  }
                  long long v54 = (void *)*v58;
                }
                while (*v58);
                if (v55 != (void *)((char *)this + 3136) && v53 >= v55[4])
                {
                  if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v4) <= 1)
                  {
                    LOWORD(v201[0]) = 12;
                    LOBYTE(v197) = 1;
                    uint64_t v83 = (*(uint64_t (**)(const raven::RayTracingTileEvent *))(*(void *)a2 + 16))(a2);
                    double v184 = v84 + (double)v83;
                    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v201, (unsigned __int8 *)&v197, "#nlos,time,%.3lf,RT tile already exist, skip the incoming, tile centroid ID,%llu", v85, v86, v87, v88, v89, SLOBYTE(v184));
                  }
                }
                else
                {
LABEL_38:
                  double v59 = (double)HIDWORD(v53) * 0.000001 + -90.0;
                  double v60 = (double)v53 * 0.000001;
                  if (v60 <= 180.0) {
                    double v61 = (double)v53 * 0.000001;
                  }
                  else {
                    double v61 = v60 + -360.0;
                  }
                  if (v59 <= -90.0 || v59 > 90.0)
                  {
                    LOWORD(v201[0]) = 12;
                    LOBYTE(v197) = 4;
                    uint64_t v69 = (*(uint64_t (**)(const raven::RayTracingTileEvent *))(*(void *)a2 + 16))(a2);
                    double v182 = v70 + (double)v69;
                    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v201, (unsigned __int8 *)&v197, "#nlos,time,%.3lf,Cannot handle RT tile: Invalid tile centroid latitude,%12.7f, tile centroid ID,%llu", v71, v72, v73, v74, v75, SLOBYTE(v182));
                  }
                  else if (v61 <= -180.0 || v61 > 180.0)
                  {
                    LOWORD(v201[0]) = 12;
                    LOBYTE(v197) = 4;
                    uint64_t v76 = (*(uint64_t (**)(const raven::RayTracingTileEvent *))(*(void *)a2 + 16))(a2);
                    double v183 = v77 + (double)v76;
                    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v201, (unsigned __int8 *)&v197, "#nlos,time,%.3lf,Cannot handle RT tile: Invalid tile centroid longitude,%12.7f, tile centroid ID,%llu", v78, v79, v80, v81, v82, SLOBYTE(v183));
                  }
                  else if ((v45 & 4) != 0)
                  {
                    if ((v45 & 8) != 0)
                    {
                      if ((v45 & 0x20) != 0)
                      {
                        if ((v45 & 0x40) != 0)
                        {
                          if ((v45 & 0x80) != 0)
                          {
                            if ((v45 & 0x100) != 0 && *(_DWORD *)(v44 + 44))
                            {
                              if ((v45 & 0x200) != 0 && *(_DWORD *)(v44 + 48))
                              {
                                if ((v45 & 0x400) != 0 && *(_DWORD *)(v44 + 52))
                                {
                                  if ((v45 & 0x800) != 0 && *(_DWORD *)(v44 + 56))
                                  {
                                    if ((v45 & 0x1000) != 0 && *(_DWORD *)(v44 + 60))
                                    {
                                      if ((v45 & 0x2000) != 0 && *(_DWORD *)(v44 + 64))
                                      {
                                        if (fabs(*(float *)(v44 + 28) + -1000000.0) < 2.22044605e-16)
                                        {
                                          if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v4) <= 1)
                                          {
                                            LOWORD(v201[0]) = 12;
                                            LOBYTE(v197) = 1;
                                            uint64_t v118 = (*(uint64_t (**)(const raven::RayTracingTileEvent *))(*(void *)a2 + 16))(a2);
                                            double v189 = v119 + (double)v118;
                                            cnprint::CNPrinter::Print((cnprint::CNPrinter *)v201, (unsigned __int8 *)&v197, "#nlos,time,%.3lf,Added RT tile with hash ID,%llu, centroid %12.7f, %12.7f, number of tiles in database %zu", v120, v121, v122, v123, v124, SLOBYTE(v189));
                                          }
                                          v201[0] = *(void *)(v44 + 8);
                                          double v125 = sub_18E0F65A4((uint64_t **)this + 391, (unint64_t *)v201, v201);
                                          *((double *)this + 401) = *(float *)(v44 + 32);
                                          if (!*(void *)(v27 + 16)) {
                                            CoreNavigation::CLP::LogEntry::RayTracingTileData::protobuf_AddDesc_CoreNavigationCLPRayTracingTileData_2eproto((CoreNavigation::CLP::LogEntry::RayTracingTileData *)v125);
                                          }
                                          sub_18E128AC8();
                                        }
                                        LOWORD(v201[0]) = 12;
                                        LOBYTE(v197) = 4;
                                        uint64_t v168 = (*(uint64_t (**)(const raven::RayTracingTileEvent *))(*(void *)a2 + 16))(a2);
                                        double v196 = v169 + (double)v168;
                                        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v201, (unsigned __int8 *)&v197, "#nlos,time,%.3lf,Cannot handle RT tile: mismatch in scale factor value used for generating GeoHashID, tile centroid ID,%llu", v170, v171, v172, v173, v174, SLOBYTE(v196));
                                      }
                                      else
                                      {
                                        LOWORD(v201[0]) = 12;
                                        LOBYTE(v197) = 4;
                                        uint64_t v161 = (*(uint64_t (**)(const raven::RayTracingTileEvent *))(*(void *)a2 + 16))(a2);
                                        double v195 = v162 + (double)v161;
                                        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v201, (unsigned __int8 *)&v197, "#nlos,time,%.3lf,Cannot handle RT tile: number of bits corresponding to facet number, tile centroid ID,%llu", v163, v164, v165, v166, v167, SLOBYTE(v195));
                                      }
                                    }
                                    else
                                    {
                                      LOWORD(v201[0]) = 12;
                                      LOBYTE(v197) = 4;
                                      uint64_t v154 = (*(uint64_t (**)(const raven::RayTracingTileEvent *))(*(void *)a2 + 16))(a2);
                                      double v194 = v155 + (double)v154;
                                      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v201, (unsigned __int8 *)&v197, "#nlos,time,%.3lf,Cannot handle RT tile: number of bits corresponding to section number, tile centroid ID,%llu", v156, v157, v158, v159, v160, SLOBYTE(v194));
                                    }
                                  }
                                  else
                                  {
                                    LOWORD(v201[0]) = 12;
                                    LOBYTE(v197) = 4;
                                    uint64_t v147 = (*(uint64_t (**)(const raven::RayTracingTileEvent *))(*(void *)a2 + 16))(a2);
                                    double v193 = v148 + (double)v147;
                                    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v201, (unsigned __int8 *)&v197, "#nlos,time,%.3lf,Cannot handle RT tile: Missing or zero sample locations in tile, tile centroid ID,%llu", v149, v150, v151, v152, v153, SLOBYTE(v193));
                                  }
                                }
                                else
                                {
                                  LOWORD(v201[0]) = 12;
                                  LOBYTE(v197) = 4;
                                  uint64_t v140 = (*(uint64_t (**)(const raven::RayTracingTileEvent *))(*(void *)a2 + 16))(a2);
                                  double v192 = v141 + (double)v140;
                                  cnprint::CNPrinter::Print((cnprint::CNPrinter *)v201, (unsigned __int8 *)&v197, "#nlos,time,%.3lf,Cannot handle RT tile: Missing or zero visible facets in tile, tile centroid ID,%llu", v142, v143, v144, v145, v146, SLOBYTE(v192));
                                }
                              }
                              else
                              {
                                LOWORD(v201[0]) = 12;
                                LOBYTE(v197) = 4;
                                uint64_t v133 = (*(uint64_t (**)(const raven::RayTracingTileEvent *))(*(void *)a2 + 16))(a2);
                                double v191 = v134 + (double)v133;
                                cnprint::CNPrinter::Print((cnprint::CNPrinter *)v201, (unsigned __int8 *)&v197, "#nlos,time,%.3lf,Cannot handle RT tile: Missing or zero visible building sections in tile, tile centroid ID,%llu", v135, v136, v137, v138, v139, SLOBYTE(v191));
                              }
                            }
                            else
                            {
                              LOWORD(v201[0]) = 12;
                              LOBYTE(v197) = 4;
                              uint64_t v126 = (*(uint64_t (**)(const raven::RayTracingTileEvent *))(*(void *)a2 + 16))(a2);
                              double v190 = v127 + (double)v126;
                              cnprint::CNPrinter::Print((cnprint::CNPrinter *)v201, (unsigned __int8 *)&v197, "#nlos,time,%.3lf,Cannot handle RT tile: Missing or zero visible buildings in tile, tile centroid ID,%llu", v128, v129, v130, v131, v132, SLOBYTE(v190));
                            }
                          }
                          else
                          {
                            LOWORD(v201[0]) = 12;
                            LOBYTE(v197) = 4;
                            uint64_t v111 = (*(uint64_t (**)(const raven::RayTracingTileEvent *))(*(void *)a2 + 16))(a2);
                            double v188 = v112 + (double)v111;
                            cnprint::CNPrinter::Print((cnprint::CNPrinter *)v201, (unsigned __int8 *)&v197, "#nlos,time,%.3lf,Cannot handle RT tile: Missing max reflection depth used for tile generation, tile centroid ID,%llu", v113, v114, v115, v116, v117, SLOBYTE(v188));
                          }
                        }
                        else
                        {
                          LOWORD(v201[0]) = 12;
                          LOBYTE(v197) = 4;
                          uint64_t v104 = (*(uint64_t (**)(const raven::RayTracingTileEvent *))(*(void *)a2 + 16))(a2);
                          double v187 = v105 + (double)v104;
                          cnprint::CNPrinter::Print((cnprint::CNPrinter *)v201, (unsigned __int8 *)&v197, "#nlos,time,%.3lf,Cannot handle RT tile: Missing max distance used for facet visibility determination, tile centroid ID,%llu", v106, v107, v108, v109, v110, SLOBYTE(v187));
                        }
                      }
                      else
                      {
                        LOWORD(v201[0]) = 12;
                        LOBYTE(v197) = 4;
                        uint64_t v97 = (*(uint64_t (**)(const raven::RayTracingTileEvent *))(*(void *)a2 + 16))(a2);
                        double v186 = v98 + (double)v97;
                        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v201, (unsigned __int8 *)&v197, "#nlos,time,%.3lf,Cannot handle RT tile: Missing tile samples location spacing, tile centroid ID,%llu", v99, v100, v101, v102, v103, SLOBYTE(v186));
                      }
                    }
                    else
                    {
                      LOWORD(v201[0]) = 12;
                      LOBYTE(v197) = 4;
                      uint64_t v90 = (*(uint64_t (**)(const raven::RayTracingTileEvent *))(*(void *)a2 + 16))(a2);
                      double v185 = v91 + (double)v90;
                      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v201, (unsigned __int8 *)&v197, "#nlos,time,%.3lf,Cannot handle RT tile: Missing tile longitude span, tile centroid ID,%llu", v92, v93, v94, v95, v96, SLOBYTE(v185));
                    }
                  }
                  else
                  {
                    LOWORD(v201[0]) = 12;
                    LOBYTE(v197) = 4;
                    uint64_t v62 = (*(uint64_t (**)(const raven::RayTracingTileEvent *))(*(void *)a2 + 16))(a2);
                    double v181 = v63 + (double)v62;
                    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v201, (unsigned __int8 *)&v197, "#nlos,time,%.3lf,Cannot handle RT tile: Missing tile latitude span, tile centroid ID,%llu", v64, v65, v66, v67, v68, SLOBYTE(v181));
                  }
                }
              }
              else
              {
                LOWORD(v201[0]) = 12;
                LOBYTE(v197) = 4;
                uint64_t v46 = (*(uint64_t (**)(const raven::RayTracingTileEvent *))(*(void *)a2 + 16))(a2);
                double v180 = v47 + (double)v46;
                cnprint::CNPrinter::Print((cnprint::CNPrinter *)v201, (unsigned __int8 *)&v197, "#nlos,time,%.3lf,Cannot handle RT tile: Missing tile centroid geohash ID", v48, v49, v50, v51, v52, SLOBYTE(v180));
              }
            }
            else
            {
              LOWORD(v201[0]) = 12;
              LOBYTE(v197) = 4;
              uint64_t v29 = (*(uint64_t (**)(const raven::RayTracingTileEvent *))(*(void *)a2 + 16))(a2);
              double v178 = v30 + (double)v29;
              cnprint::CNPrinter::Print((cnprint::CNPrinter *)v201, (unsigned __int8 *)&v197, "#nlos,time,%.3lf,Cannot handle RT tile: Missing RT tile Meta Data", v31, v32, v33, v34, v35, SLOBYTE(v178));
            }
          }
          else
          {
            LOWORD(v201[0]) = 12;
            LOBYTE(v197) = 4;
            uint64_t v36 = (*(uint64_t (**)(const raven::RayTracingTileEvent *))(*(void *)a2 + 16))(a2);
            double v179 = v37 + (double)v36;
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)v201, (unsigned __int8 *)&v197, "#nlos,time,%.3lf,Cannot handle RT tile: Missing RT tile payload data", v38, v39, v40, v41, v42, SLOBYTE(v179));
          }
        }
        else
        {
          LOWORD(v201[0]) = 12;
          LOBYTE(v197) = 4;
          uint64_t v5 = (*(uint64_t (**)(const raven::RayTracingTileEvent *))(*(void *)a2 + 16))(a2);
          double v175 = v6 + (double)v5;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)v201, (unsigned __int8 *)&v197, "#nlos,time,%.3lf,cannot handle RT tile: Missing serialized RT tile data in the LogEntry", v7, v8, v9, v10, v11, SLOBYTE(v175));
        }
      }
      else
      {
        LOWORD(v201[0]) = 12;
        LOBYTE(v197) = 4;
        uint64_t v19 = (*(uint64_t (**)(const raven::RayTracingTileEvent *))(*(void *)a2 + 16))(a2);
        double v177 = v20 + (double)v19;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v201, (unsigned __int8 *)&v197, "#nlos,time,%.3lf,cannot handle RT tile: Failed to parse incoming tile LogEntry", v21, v22, v23, v24, v25, SLOBYTE(v177));
      }
      CoreNavigation::CLP::LogEntry::LogEntry::~LogEntry((CoreNavigation::CLP::LogEntry::LogEntry *)v198);
    }
  }
  else if (cnprint::CNPrinter::GetLogLevel(this) <= 1)
  {
    LOWORD(v201[0]) = 12;
    v198[0] = 1;
    uint64_t v12 = (*(uint64_t (**)(const raven::RayTracingTileEvent *))(*(void *)a2 + 16))(a2);
    double v176 = v13 + (double)v12;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v201, v198, "#nlos,time,%.3lf, RavenNLOSEngine not configured", v14, v15, v16, v17, v18, SLOBYTE(v176));
  }
}

void sub_18E1288FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
}

void **sub_18E1289CC(uint64_t *a1, uint64_t *a2)
{
  unint64_t v6 = a1[2];
  double result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 3;
    if ((unint64_t)(v10 + 1) >> 61) {
      sub_18E01138C();
    }
    uint64_t v11 = v5 - *a1;
    uint64_t v12 = v11 >> 2;
    if (v11 >> 2 <= (unint64_t)(v10 + 1)) {
      uint64_t v12 = v10 + 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    v17[4] = result;
    if (v13) {
      uint64_t v14 = (char *)sub_18DEDF808((uint64_t)result, v13);
    }
    else {
      uint64_t v14 = 0;
    }
    uint64_t v15 = &v14[8 * v10];
    v17[0] = v14;
    v17[1] = v15;
    v17[3] = &v14[8 * v13];
    uint64_t v16 = *a2;
    *a2 = 0;
    *(void *)uint64_t v15 = v16;
    double v17[2] = v15 + 8;
    sub_18E01152C(a1, v17);
    uint64_t v9 = (void *)a1[1];
    double result = sub_18E0116DC(v17);
  }
  else
  {
    uint64_t v8 = *a2;
    *a2 = 0;
    *uint64_t v7 = v8;
    uint64_t v9 = v7 + 1;
    a1[1] = (uint64_t)v9;
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_18E128AB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_18E0116DC((void **)va);
  _Unwind_Resume(a1);
}

void sub_18E128AC8()
{
}

void sub_18E128B1C(_Unwind_Exception *a1)
{
  MEMORY[0x192FA6240](v1, 0x10B1C407D9F545CLL);
  _Unwind_Resume(a1);
}

void *sub_18E128B40(uint64_t a1, void *a2)
{
  uint64_t v4 = a2 + 1;
  unint64_t v5 = *(void **)(a1 + 8);
  if (a2 + 1 == v5)
  {
    uint64_t v7 = a2;
  }
  else
  {
    do
    {
      uint64_t v6 = *(v4 - 1);
      *(v4 - 1) = *v4;
      *uint64_t v4 = 0;
      if (v6) {
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
      }
      ++v4;
    }
    while (v4 != v5);
    uint64_t v7 = v4 - 1;
    uint64_t v4 = *(void **)(a1 + 8);
  }
  while (v4 != v7)
  {
    uint64_t v9 = *--v4;
    uint64_t v8 = v9;
    *uint64_t v4 = 0;
    if (v9) {
      (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    }
  }
  *(void *)(a1 + 8) = v7;
  return a2;
}

uint64_t sub_18E128CBC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 328);
  uint64_t v2 = *(void *)(a1 + 336);
  if (v1 != v2)
  {
    v7[0] = 0;
    long long v8 = 0u;
    memset(v9, 0, sizeof(v9));
    while (1)
    {
      *(double *)uint64_t v6 = *(double *)(v1 + 8) + (double)*(uint64_t *)v1;
      if (sub_18DFF11E4((uint64_t)v7, (double *)v6, 1.0)) {
        break;
      }
      v1 += 208;
      if (v1 == v2)
      {
        v3.i64[0] = *(void *)&v9[1];
        v6[0] = 0;
        v6[1] = 0;
        CNTimeSpan::SetTimeSpan(v6, 0, v3, v4);
        return v6[0];
      }
    }
  }
  return 0;
}

void raven::RavenNLOSEngine::FindApproximatePathsUsingRayTracing(cnprint::CNPrinter *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, double *a4@<X3>, double *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>)
{
  uint64_t v92 = *MEMORY[0x1E4F143B8];
  *a9 = (uint64_t)a9;
  a9[1] = (uint64_t)a9;
  a9[2] = 0;
  if (*((unsigned char *)a1 + 8))
  {
    if (a6)
    {
      uint64_t v15 = *(void *)a1;
      double v16 = *(double *)(*(void *)a1 + 3560);
      double v17 = *a5 - *a4;
      double v18 = a5[1] - a4[1];
      double v19 = a5[2] - a4[2];
      long double v20 = hypot(v17, v18);
      double v21 = atan2(v19, v20);
      if (v21 >= 0.0)
      {
        *(void *)&v84[0] = &unk_1EDD123D0;
        memset((char *)v84 + 8, 0, 56);
        int v85 = 2;
        char v86 = 0;
        double v36 = sqrt(v18 * v18 + v17 * v17 + v19 * v19);
        if (fabs(v36) >= 2.22044605e-16)
        {
          uint64_t v44 = *(void *)(v15 + 3544);
          double v45 = 1.0 / v36;
          double v46 = v18 * v45;
          double v47 = v19 * v45;
          long long v87 = *(_OWORD *)a4;
          uint64_t v88 = *((void *)a4 + 2);
          v84[1] = v87;
          *(void *)&v84[2] = v88;
          double v76 = v46;
          double v77 = v17 * v45;
          *((double *)&v84[2] + 1) = v17 * v45;
          *(double *)&v84[3] = v46;
          *((double *)&v84[3] + 1) = v19 * v45;
          *((void *)&v84[0] + 1) = a6;
          int v85 = 0;
          char v86 = 0;
          (*(void (**)(uint64_t, _OWORD *))(*(void *)a6 + 16))(a6, v84);
          if (v86) {
            goto LABEL_11;
          }
          long long v78 = v87;
          *(void *)&long long v79 = v88;
          *((double *)&v79 + 1) = v77;
          *(double *)&long long v80 = v76;
          *((double *)&v80 + 1) = v47;
          uint64_t v81 = (uint64_t)&v81;
          uint64_t v82 = &v81;
          uint64_t v83 = 0;
          uint64_t v71 = sub_18E1303BC(&v78);
          v71[1] = a9;
          uint64_t v72 = *a9;
          *uint64_t v71 = *a9;
          *(void *)(v72 + 8) = v71;
          *a9 = (uint64_t)v71;
          ++a9[2];
          int v73 = *(unsigned __int8 *)(*(void *)a1 + 3552);
          sub_18E068ED0(&v81);
          if (!v73)
          {
LABEL_11:
            __double2 v48 = __sincos_stret(v21);
            double v49 = 0.0;
            do
            {
              __double2 v50 = __sincos_stret(v49);
              long long v87 = *(_OWORD *)a4;
              uint64_t v88 = *((void *)a4 + 2);
              double v89 = v48.__cosval * v50.__sinval;
              double v90 = v48.__cosval * v50.__cosval;
              double sinval = v48.__sinval;
              sub_18E12BDC8((uint64_t)&v78, (double *)&v87, a6, v44, 0);
              uint64_t v51 = v83;
              if (v83)
              {
                uint64_t v52 = (_OWORD *)v81;
                double v53 = *(double *)(v81 + 56);
                double v54 = *(double *)(v81 + 64);
                double v55 = sqrt((v76 * v76 + v77 * v77) * (v54 * v54 + v53 * v53));
                if (fabs(v55) >= 2.22044605e-16)
                {
                  double v56 = (v76 * v54 + v77 * v53) / v55;
                  double v57 = -3.14159265;
                  if (fabs(v56 + 1.0) >= 2.22044605e-16)
                  {
                    double v57 = 0.0;
                    if (fabs(v56 + -1.0) >= 2.22044605e-16) {
                      double v57 = acos(v56);
                    }
                  }
                  if (v16 * 0.0174532925 * 0.5 >= v57)
                  {
                    for (unint64_t i = (uint64_t *)a9[1]; i != a9; unint64_t i = (uint64_t *)i[1])
                    {
                      if (v51 == i[10])
                      {
                        if (v82 == &v81) {
                          goto LABEL_31;
                        }
                        double v59 = i + 9;
                        double v60 = v82;
                        while (1)
                        {
                          uint64_t v61 = *v59;
                          if (v60[2] != *(void *)(v61 + 16)) {
                            break;
                          }
                          double v59 = (uint64_t *)(v61 + 8);
                          double v60 = (uint64_t *)v60[1];
                          if (v60 == &v81) {
                            goto LABEL_31;
                          }
                        }
                      }
                    }
                    if (v51 != v44) {
                      goto LABEL_28;
                    }
                    long long v62 = v52[3];
                    v84[1] = v52[2];
                    v84[2] = v62;
                    v84[3] = v52[4];
                    *((void *)&v84[0] + 1) = a6;
                    int v85 = 0;
                    char v86 = 0;
                    (*(void (**)(uint64_t, _OWORD *))(*(void *)a6 + 16))(a6, v84);
                    if (!v86)
                    {
LABEL_28:
                      double v63 = operator new(0x58uLL);
                      *double v63 = 0;
                      v63[1] = 0;
                      long long v64 = v79;
                      *((_OWORD *)v63 + 1) = v78;
                      *((_OWORD *)v63 + 2) = v64;
                      *((_OWORD *)v63 + 3) = v80;
                      v63[8] = v63 + 8;
                      v63[9] = v63 + 8;
                      v63[10] = 0;
                      uint64_t v65 = v83;
                      if (v83)
                      {
                        uint64_t v67 = v81;
                        uint64_t v66 = v82;
                        uint64_t v68 = *v82;
                        *(void *)(v68 + 8) = *(void *)(v81 + 8);
                        **(void **)(v67 + 8) = v68;
                        uint64_t v69 = v63[8];
                        *(void *)(v69 + 8) = v66;
                        *uint64_t v66 = v69;
                        v63[8] = v67;
                        *(void *)(v67 + 8) = v63 + 8;
                        v63[10] = v65;
                        uint64_t v83 = 0;
                      }
                      uint64_t v70 = *a9;
                      *double v63 = *a9;
                      v63[1] = a9;
                      *(void *)(v70 + 8) = v63;
                      *a9 = (uint64_t)v63;
                      ++a9[2];
                    }
                  }
                }
              }
LABEL_31:
              sub_18E068ED0(&v81);
              double v49 = v16 * 0.0174532925 + v49;
            }
            while (v49 <= 6.28318531);
          }
        }
        else
        {
          LOWORD(v78) = 12;
          LOBYTE(v87) = 4;
          uint64_t v37 = *(void *)a2;
          double v38 = *(double *)(a2 + 8);
          sub_18E017C64(a3);
          double v75 = v38 + (double)v37;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v78, (unsigned __int8 *)&v87, "#nlos,time,%.3lf,zero distance to %s", v39, v40, v41, v42, v43, SLOBYTE(v75));
        }
      }
      else
      {
        LOWORD(v84[0]) = 12;
        LOBYTE(v78) = 4;
        uint64_t v22 = *(void *)a2;
        double v23 = *(double *)(a2 + 8);
        sub_18E017C64(a3);
        double v74 = v23 + (double)v22;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v84, (unsigned __int8 *)&v78, "#nlos,time,%.3lf,%s satellite below horizon; elevatiouint64_t n = %.1f deg",
          v24,
          v25,
          v26,
          v27,
          v28,
          SLOBYTE(v74));
      }
    }
    else
    {
      LOWORD(v84[0]) = 12;
      LOBYTE(v78) = 4;
      double v35 = *(double *)(a2 + 8) + (double)*(uint64_t *)a2;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v84, (unsigned __int8 *)&v78, "#nlos,time,%.3lf,building data pointer is null in %s", (uint64_t)a4, (uint64_t)a5, 0, a7, a8, SLOBYTE(v35));
    }
  }
  else if (cnprint::CNPrinter::GetLogLevel(a1) <= 1)
  {
    LOWORD(v84[0]) = 12;
    LOBYTE(v78) = 1;
    double v34 = *(double *)(a2 + 8) + (double)*(uint64_t *)a2;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v84, (unsigned __int8 *)&v78, "#nlos,time,%.3lf,object not configured in %s", v29, v30, v31, v32, v33, SLOBYTE(v34));
  }
}

void sub_18E129340(_Unwind_Exception *a1)
{
  sub_18E068ED0(v2);
  sub_18E12CDF0(v1);
  _Unwind_Resume(a1);
}

void raven::RavenNLOSEngine::RefineApproximatePath(cnprint::CNPrinter *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, double *a5@<X4>, uint64_t a6@<X8>)
{
  v513[4] = *(double *)MEMORY[0x1E4F143B8];
  *(unsigned char *)a6 = 0;
  *(unsigned char *)(a6 + 232) = 0;
  if (!*((unsigned char *)a1 + 8))
  {
    if (cnprint::CNPrinter::GetLogLevel(a1) <= 1)
    {
      *(_WORD *)v483 = 12;
      v462[0] = 1;
      double v32 = *(double *)(a3 + 8) + (double)*(uint64_t *)a3;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v483, v462, "#nlos,time,%.3lf,object not configured in %s", v27, v28, v29, v30, v31, SLOBYTE(v32));
    }
    return;
  }
  double v11 = *(double *)a2;
  double v10 = *(double *)(a2 + 8);
  double v12 = *(double *)(a2 + 16);
  unint64_t v13 = *(void *)(a2 + 64);
  if (!v13)
  {
    double v33 = *a5 - v11;
    double v34 = a5[1] - v10;
    double v35 = a5[2] - v12;
    double v36 = sqrt(v34 * v34 + v33 * v33 + v35 * v35);
    if (fabs(v36) >= 2.22044605e-16)
    {
      *(void *)v483 = *(void *)a2;
      *(double *)&v483[8] = v10;
      double v49 = v33 * (1.0 / v36);
      *(double *)&v483[16] = v12;
      *(double *)&v483[24] = v49;
      double v50 = v34 * (1.0 / v36);
      double v51 = v35 * (1.0 / v36);
      *(double *)&long long v484 = v50;
      *((double *)&v484 + 1) = v51;
      *(void *)&v485[0] = v485;
      *(void *)&v485[1] = v485;
      long long v486 = *(_OWORD *)a5;
      uint64_t v52 = *((void *)a5 + 2);
      v485[2] = 0.0;
      uint64_t v487 = v52;
      uint64_t v488 = 0x7FF8000000000000;
      uint64_t v491 = 0x300000001;
      long long v490 = xmmword_18E1F8560;
      v489 = &unk_1EDD18228;
      v492 = &v493;
      uint64_t v496 = 0x300000001;
      long long v495 = xmmword_18E1F8560;
      v494 = &unk_1EDD18228;
      v497 = &v498;
      char v499 = 1;
      sub_18E12D774(a6, (long long *)v483);
      if (v499)
      {
        v494 = &unk_1EDD17478;
        v489 = &unk_1EDD17478;
        sub_18E068ED0(v485);
      }
      *(double *)(a6 + 96) = v36;
      *(_OWORD *)(a6 + 112) = xmmword_18E1F8560;
      double v53 = *(double **)(a6 + 136);
      *double v53 = -v49;
      v53[1] = -v50;
      v53[2] = -v51;
      *(_OWORD *)(a6 + 176) = xmmword_18E1F8560;
      double v54 = *(double **)(a6 + 200);
      *double v54 = v49;
      v54[1] = v50;
      void v54[2] = v51;
    }
    else
    {
      *(_WORD *)v483 = 12;
      v462[0] = 4;
      uint64_t v37 = *(void *)a3;
      double v38 = *(double *)(a3 + 8);
      sub_18E017C64(a4);
      double v351 = v38 + (double)v37;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v483, v462, "#nlos,time,%.3lf,zero distance to %s", v39, v40, v41, v42, v43, SLOBYTE(v351));
    }
    return;
  }
  v481 = 0;
  v480 = 0;
  unint64_t v482 = 0;
  sub_18E12C12C(&v480, v13 + 2);
  if (v13 >> 61) {
    sub_18DEE1FC8();
  }
  uint64_t v14 = (char *)sub_18DEE2FBC(v13);
  uint64_t v392 = v15;
  double v16 = v14;
  v478 = 0;
  v477 = 0;
  unint64_t v479 = 0;
  sub_18E12C12C(&v477, v13);
  v475 = 0;
  v474 = 0;
  unint64_t v476 = 0;
  sub_18E12C12C(&v474, v13);
  if (v13 >> 60) {
    sub_18DEE1FC8();
  }
  unint64_t v375 = v13;
  double v17 = (char *)sub_18E12E050(v13);
  uint64_t v386 = v23;
  uint64_t v24 = v17;
  uint64_t v25 = v481;
  if ((unint64_t)v481 >= v482)
  {
    uint64_t v44 = (double *)v480;
    unint64_t v45 = 0xAAAAAAAAAAAAAAABLL * (((char *)v481 - (unsigned char *)v480) >> 3);
    unint64_t v46 = v45 + 1;
    if (v45 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_18DEE1FC8();
    }
    if (0x5555555555555556 * ((uint64_t)(v482 - (void)v480) >> 3) > v46) {
      unint64_t v46 = 0x5555555555555556 * ((uint64_t)(v482 - (void)v480) >> 3);
    }
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v482 - (void)v480) >> 3) >= 0x555555555555555) {
      unint64_t v47 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v47 = v46;
    }
    if (v47) {
      unint64_t v47 = (unint64_t)sub_18E12E008(v47);
    }
    else {
      uint64_t v48 = 0;
    }
    double v55 = (double *)(v47 + 24 * v45);
    *double v55 = v11;
    v55[1] = v10;
    void v55[2] = v12;
    uint64_t v26 = v55 + 3;
    if (v25 != v44)
    {
      do
      {
        long long v56 = *(_OWORD *)(v25 - 3);
        *(v55 - 1) = *(v25 - 1);
        *(_OWORD *)(v55 - 3) = v56;
        v55 -= 3;
        v25 -= 3;
      }
      while (v25 != v44);
      uint64_t v25 = v44;
    }
    v480 = v55;
    unint64_t v482 = v47 + 24 * v48;
    if (v25) {
      operator delete(v25);
    }
  }
  else
  {
    double *v481 = v11;
    v25[1] = v10;
    uint64_t v26 = v25 + 3;
    void v25[2] = v12;
  }
  uint64_t v359 = a3;
  v357 = a5;
  v481 = v26;
  uint64_t v57 = *(void *)(a2 + 56);
  __n128 v58 = (double *)&unk_18E1EF000;
  uint64_t v389 = a2 + 48;
  if (v57 == a2 + 48)
  {
    double v60 = v24;
LABEL_123:
    double v135 = v357[1] - *(v26 - 2);
    double v136 = v357[2] - *(v26 - 1);
    __pa = v16;
    if (fabs(v135 * v135 + (*v357 - *(v26 - 3)) * (*v357 - *(v26 - 3)) + v136 * v136) <= v58[309])
    {
      *(_WORD *)v483 = 12;
      v462[0] = 4;
      double v140 = *(double *)(v359 + 8) + (double)*(uint64_t *)v359;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v483, v462, "#nlos,time,%.3lf,target point is duplicated in %s", v18, v19, v20, v21, v22, SLOBYTE(v140));
      goto LABEL_195;
    }
    v360 = v60;
    if ((unint64_t)v26 < v482)
    {
      long long v137 = *(_OWORD *)v357;
      void v26[2] = v357[2];
      *(_OWORD *)uint64_t v26 = v137;
      uint64_t v138 = v26 + 3;
      unint64_t v139 = v375;
      goto LABEL_147;
    }
    uint64_t v144 = (double *)v480;
    unint64_t v145 = 0xAAAAAAAAAAAAAAABLL * (((char *)v26 - (unsigned char *)v480) >> 3);
    unint64_t v146 = v145 + 1;
    if (v145 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_18DEE1FC8();
    }
    if (0x5555555555555556 * ((uint64_t)(v482 - (void)v480) >> 3) > v146) {
      unint64_t v146 = 0x5555555555555556 * ((uint64_t)(v482 - (void)v480) >> 3);
    }
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v482 - (void)v480) >> 3) >= 0x555555555555555) {
      unint64_t v147 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v147 = v146;
    }
    if (v147) {
      unint64_t v147 = (unint64_t)sub_18E12E008(v147);
    }
    else {
      uint64_t v148 = 0;
    }
    uint64_t v149 = (double *)(v147 + 24 * v145);
    long long v150 = *(_OWORD *)v357;
    v149[2] = v357[2];
    *(_OWORD *)uint64_t v149 = v150;
    uint64_t v138 = v149 + 3;
    if (v26 == v144)
    {
      v480 = (void *)(v147 + 24 * v145);
      v481 = v149 + 3;
      unint64_t v482 = v147 + 24 * v148;
      unint64_t v139 = v375;
    }
    else
    {
      unint64_t v139 = v375;
      do
      {
        long long v151 = *(_OWORD *)(v26 - 3);
        *(v149 - 1) = *(v26 - 1);
        *(_OWORD *)(v149 - 3) = v151;
        v149 -= 3;
        v26 -= 3;
      }
      while (v26 != v144);
      uint64_t v26 = (double *)v480;
      v480 = v149;
      v481 = v138;
      unint64_t v482 = v147 + 24 * v148;
      if (!v26)
      {
LABEL_147:
        v481 = v138;
        memset(v473, 0, sizeof(v473));
        sub_18E12C21C((char **)v473, v139);
        v471 = 0;
        v470 = 0;
        uint64_t v472 = 0;
        sub_18E12C21C((char **)&v470, v139);
        memset(v469, 0, sizeof(v469));
        sub_18E12C3AC(v469, v139);
        long long v467 = 0uLL;
        uint64_t v468 = 0;
        if (v139 >= 0x492492492492493) {
          sub_18DEE1FC8();
        }
        *(void *)&long long v484 = &v468;
        uint64_t v152 = 56 * v139;
        uint64_t v153 = (char *)operator new(56 * v139);
        uint64_t v154 = 0;
        *(void *)&v483[24] = &v153[56 * v139];
        do
        {
          double v155 = &v153[v154];
          *((void *)v155 + 3) = 0x100000002;
          *(void *)double v155 = &unk_1EDD18B28;
          *(_OWORD *)(v155 + 8) = xmmword_18E1FD1A0;
          *((void *)v155 + 4) = &v153[v154 + 40];
          v154 += 56;
        }
        while (v152 != v154);
        long long v156 = v467;
        *(void *)&long long v467 = v153;
        *((void *)&v467 + 1) = &v153[v152];
        *(_OWORD *)&v483[8] = v156;
        uint64_t v157 = v468;
        uint64_t v468 = *(void *)&v483[24];
        *(void *)&v483[24] = v157;
        *(void *)v483 = v156;
        sub_18E12E0F4((uint64_t)v483);
        memset(v466, 0, sizeof(v466));
        sub_18E12C3AC(v466, v139);
        uint64_t v463 = 0x300000002;
        *(_OWORD *)&v462[8] = xmmword_18E2199E0;
        *(void *)v462 = &unk_1EDD18C18;
        v464 = (double *)&v465;
        uint64_t v459 = 0x300000002;
        long long v458 = xmmword_18E2199E0;
        v457 = &unk_1EDD18C18;
        v460 = (double *)&v461;
        uint64_t v454 = 0x200000002;
        long long v453 = xmmword_18E1FD1B0;
        v452 = &unk_1EDD18BB8;
        v455 = &v456;
        uint64_t v449 = 0x300000001;
        long long v448 = xmmword_18E1F8560;
        v447 = &unk_1EDD18228;
        v450 = (double *)&v451;
        uint64_t v444 = 0x300000001;
        long long v443 = xmmword_18E1F8560;
        v442 = &unk_1EDD18228;
        v445 = (double *)&v446;
        memset(v441, 0, sizeof(v441));
        sub_18E12C3AC(v441, v139);
        *(double *)&long long v352 = v10;
        *((double *)&v352 + 1) = v12;
        memset(v440, 0, sizeof(v440));
        sub_18E12C3AC(v440, v139);
        unsigned int v353 = *(_DWORD *)(*(void *)a1 + 3576);
        double v358 = *(double *)(*(void *)a1 + 3568) * *(double *)(*(void *)a1 + 3568);
        unint64_t v374 = v139 - 1;
        uint64_t v158 = (double *)v480;
        double v159 = 1.0;
        int v160 = 1;
        double v355 = v11;
LABEL_151:
        unsigned int v354 = v160;
        uint64_t v161 = 0;
        uint64_t v162 = 0;
        uint64_t v163 = 0;
        double v164 = v158[5] - v158[2];
        double v165 = v158[3] - *v158;
        double v166 = v158[4] - v158[1];
        double v167 = v159 / sqrt(v166 * v166 + v165 * v165 + v164 * v164);
        double v168 = v164 * v167;
        double v169 = v166 * v167;
        double v170 = v165 * v167;
        uint64_t v171 = 24;
        double v60 = v360;
        double v172 = 1.0;
        while (1)
        {
          uint64_t v173 = (double *)((char *)v480 + v171);
          double v174 = *(double *)((char *)v480 + v171 + 24) - *(double *)((char *)v480 + v171);
          double v175 = *(double *)((char *)v480 + v171 + 32) - *(double *)((char *)v480 + v171 + 8);
          double v176 = *(double *)((char *)v480 + v171 + 40) - *(double *)((char *)v480 + v171 + 16);
          double v177 = v172 / sqrt(v175 * v175 + v174 * v174 + v176 * v176);
          double v178 = v175 * v177;
          double v382 = v177;
          double v179 = (double *)((char *)v473[0] + v171);
          *(v179 - 3) = v170;
          *(v179 - 2) = v169;
          *(v179 - 1) = v168;
          double v180 = (double *)((char *)v470 + v171);
          double v181 = v174 * v177;
          *(v180 - 3) = v174 * v177;
          *(v180 - 2) = v178;
          double v387 = v176 * v177;
          double v390 = v178;
          *(v180 - 1) = v176 * v177;
          double v187 = (*(double (**)(void))(**(void **)&v16[8 * v163] + 88))(*(void *)&v16[8 * v163]);
          double v189 = v188;
          double v191 = v190;
          double v192 = v173[3] - *(v173 - 3);
          double v193 = v173[4] - *(v173 - 2);
          double v194 = v173[5] - *(v173 - 1);
          double v195 = v189 * v194 - v191 * v193;
          double v196 = v191 * v192 - v187 * v194;
          double v197 = v187 * v193 - v189 * v192;
          double v198 = sqrt(v196 * v196 + v195 * v195 + v197 * v197);
          if (fabs(v198) < 2.22044605e-16)
          {
            *(_WORD *)v483 = 12;
            LOBYTE(v433) = 4;
            double v342 = *(double *)(v359 + 8) + (double)*(uint64_t *)v359;
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)v483, (unsigned __int8 *)&v433, "#nlos,time,%.3lf,f is null vector,k,%zu", v182, v183, v184, v185, v186, SLOBYTE(v342));
            goto LABEL_191;
          }
          double v199 = v169 * (v167 * v189) + v167 * v187 * v170 + v167 * v191 * v168;
          double v200 = v167 * v187 - v170 * v199;
          double v201 = v167 * v189 - v169 * v199;
          double v202 = v167 * v191 - v168 * v199;
          double v203 = -v191;
          double v204 = 1.0 / v198;
          double v205 = v195 * (1.0 / v198);
          double v206 = v196 * (1.0 / v198);
          double v207 = v197 * v204;
          double v208 = v169 * (v167 * v206) + v167 * v205 * v170 + v167 * (v197 * v204) * v168;
          double v209 = v167 * v205 - v170 * v208;
          double v210 = v167 * v206 - v169 * v208;
          double v211 = v167 * (v197 * v204) - v168 * v208;
          double v212 = (v170 - v181) * v204;
          double v213 = (v169 - v390) * v204;
          double v214 = (v168 - v387) * v204;
          double v215 = v213 * v206 + v212 * v205 + v214 * v207;
          double v216 = v212 - v205 * v215;
          double v217 = v213 - v206 * v215;
          double v218 = -v187;
          double v219 = v214 - v207 * v215;
          double v220 = -v189;
          *(void *)&long long v435 = 0x200000002;
          long long v434 = xmmword_18E1FD1B0;
          double v433 = COERCE_DOUBLE(&unk_1EDD18BB8);
          *((void *)&v435 + 1) = &v436;
          if (v163)
          {
            double v436 = -(v201 * *(double *)((char *)v477 + v171 - 40)
                   + v200 * *(double *)((char *)v477 + v171 - 48)
                   + v202 * *(double *)((char *)v477 + v171 - 32));
            double v438 = -(v201 * *(double *)((char *)v474 + v171 - 40)
                   + v200 * *(double *)((char *)v474 + v171 - 48)
                   + v202 * *(double *)((char *)v474 + v171 - 32));
            double v221 = *(double *)((char *)v477 + v171 - 48);
            double v437 = -(v210 * *(double *)((char *)v477 + v171 - 40)
                   + v209 * v221
                   + v211 * *(double *)((char *)v477 + v171 - 32))
                 - (v217 * (*(double *)((char *)v477 + v171 - 32) * v218 + v191 * v221)
                  + v216 * (*(double *)((char *)v477 + v171 - 40) * v203 + v189 * *(double *)((char *)v477 + v171 - 32))
                  + v219 * (v221 * v220 + v187 * *(double *)((char *)v477 + v171 - 40)));
            double v222 = *(double *)((char *)v474 + v171 - 48);
            double v439 = -(v210 * *(double *)((char *)v474 + v171 - 40)
                   + v209 * v222
                   + v211 * *(double *)((char *)v474 + v171 - 32))
                 - (v217 * (*(double *)((char *)v474 + v171 - 32) * v218 + v191 * v222)
                  + v216 * (*(double *)((char *)v474 + v171 - 40) * v203 + v189 * *(double *)((char *)v474 + v171 - 32))
                  + v219 * (v222 * v220 + v187 * *(double *)((char *)v474 + v171 - 40)));
          }
          double v377 = v216;
          double v379 = v214 - v207 * v215;
          double v376 = v217;
          double v223 = v390 * (v382 * v189) + v382 * v187 * v181 + v382 * v191 * v387;
          double v224 = v211;
          double v225 = v382 * v187 - v181 * v223;
          double v226 = v382 * v189 - v390 * v223;
          double v227 = v382 * v191 - v387 * v223;
          double v228 = v390 * (v382 * v206) + v382 * v205 * v181 + v382 * v207 * v387;
          *(void *)&v429[24] = 0x200000002;
          *(_OWORD *)&v429[8] = xmmword_18E1FD1B0;
          *(void *)v429 = &unk_1EDD18BB8;
          *(void *)&v429[32] = &v429[40];
          long long v229 = (double *)((char *)v477 + v171);
          uint64_t v230 = (double *)((char *)v474 + v171);
          double v365 = v200;
          double v366 = v201;
          double v367 = v202;
          double v368 = v225;
          double v369 = v382 * v205 - v181 * v228;
          double v370 = v226;
          double v371 = v382 * v206 - v390 * v228;
          double v372 = v227;
          *(double *)&v429[40] = (v201 - v226) * *(v229 - 2) + (v200 - v225) * *(v229 - 3) + (v202 - v227) * *(v229 - 1);
          double v431 = (v201 - v226) * *(double *)((char *)v474 + v171 - 16)
               + (v200 - v225) * *(double *)((char *)v474 + v171 - 24)
               + (v202 - v227) * *(double *)((char *)v474 + v171 - 8);
          double v361 = v209;
          double v362 = v210;
          double v373 = v382 * v207 - v387 * v228;
          double v363 = v224;
          double v430 = (v210 + v371) * *(v229 - 2) + (v209 + v369) * *(v229 - 3) + (v224 + v373) * *(v229 - 1);
          double v432 = (v210 + v371) * *(double *)((char *)v474 + v171 - 16)
               + (v209 + v369) * *(double *)((char *)v474 + v171 - 24)
               + (v224 + v373) * *(double *)((char *)v474 + v171 - 8);
          uint64_t v511 = 0x200000002;
          *(_OWORD *)&v510[8] = xmmword_18E1FD1B0;
          *(void *)v510 = &unk_1EDD18BB8;
          v512 = v513;
          if (v374 != v163)
          {
            v513[0] = v226 * v229[1] + v225 * *v229 + v227 * v229[2];
            v513[2] = v226 * v230[1] + v225 * *v230 + v227 * v230[2];
            v513[1] = v217 * (v229[2] * v218 + v191 * *v229)
                    + v216 * (v229[1] * v203 + v189 * v229[2])
                    + v379 * (*v229 * v220 + v187 * v229[1])
                    - (v371 * v229[1]
                     + v369 * *v229
                     + v373 * v229[2]);
            v513[3] = v217 * (v230[2] * v218 + v191 * *v230)
                    + v216 * (v230[1] * v203 + v189 * v230[2])
                    + v379 * (*v230 * v220 + v187 * v230[1])
                    - (v371 * v230[1]
                     + v369 * *v230
                     + v373 * v230[2]);
          }
          uint64_t v426 = 0x100000002;
          long long v425 = xmmword_18E1FD1A0;
          v424 = &unk_1EDD18B28;
          v427 = v428;
          v428[0] = -((v169 + v390) * v189 + v187 * (v170 + v181) + v191 * (v168 + v387));
          v428[1] = -((v169 - v390) * v206 + v205 * (v170 - v181) + v207 * (v168 - v387));
          uint64_t v231 = v469[0] + v162;
          uint64_t v232 = v467;
          if (v163)
          {
            *(void *)&v483[24] = 0x200000002;
            *(_OWORD *)&v483[8] = xmmword_18E1FD1B0;
            *(void *)v483 = &unk_1EDD18BB8;
            *(void *)&long long v484 = (char *)&v484 + 8;
            sub_18DFE2B44((uint64_t)&v433, v231 - 72, (uint64_t)v483);
            double v233 = v379;
            uint64_t v421 = 0x200000002;
            long long v420 = xmmword_18E1FD1B0;
            v419 = &unk_1EDD18BB8;
            v422 = v423;
            sub_18DFE2AA8((uint64_t)v429, (uint64_t)v483, (uint64_t)&v419);
          }
          else
          {
            sub_18E131FB8((uint64_t)&v419, (uint64_t)v429);
            double v233 = v379;
          }
          uint64_t v416 = 0x200000002;
          long long v415 = xmmword_18E1FD1B0;
          v414 = &unk_1EDD18BB8;
          v417 = &v418;
          uint64_t v507 = 0x100000002;
          long long v506 = xmmword_18E1FD1A0;
          v505 = &unk_1EDD18B58;
          v508 = &v509;
          uint64_t v502 = 0x100000002;
          long long v501 = xmmword_18E1FD1A0;
          v500 = &unk_1EDD18B58;
          v503 = &v504;
          *(void *)&v483[24] = 0x100000008;
          *(_OWORD *)&v483[8] = xmmword_18E1FD760;
          *(void *)v483 = &unk_1EDD19CC8;
          *(void *)&long long v484 = (char *)&v484 + 8;
          if (sub_18E01D7FC((uint64_t)&v419, (uint64_t)&v505, (uint64_t)&v500, (uint64_t)v483, (uint64_t)&v414) > *(double *)(*(void *)a1 + 3536)) {
            break;
          }
          *(void *)&v483[24] = 0x200000002;
          *(_OWORD *)&v483[8] = xmmword_18E1FD1B0;
          *(void *)v483 = &unk_1EDD18BB8;
          *(void *)&long long v484 = (char *)&v484 + 8;
          sub_18DFE2B44((uint64_t)&v414, (uint64_t)v510, (uint64_t)v483);
          sub_18DFE2F24(v231, (uint64_t)v483);
          if (v163)
          {
            uint64_t v406 = 0x100000002;
            long long v405 = xmmword_18E1FD1A0;
            v404 = &unk_1EDD18B28;
            v407 = &v408;
            sub_18DFE2B44((uint64_t)&v433, v467 + v161 - 56, (uint64_t)&v404);
            uint64_t v411 = 0x100000002;
            long long v410 = xmmword_18E1FD1A0;
            v409 = &unk_1EDD18B28;
            v412 = &v413;
            sub_18DFE2AA8((uint64_t)&v424, (uint64_t)&v404, (uint64_t)&v409);
            *(void *)&v483[24] = 0x100000002;
            *(_OWORD *)&v483[8] = xmmword_18E1FD1A0;
            *(void *)v483 = &unk_1EDD18B28;
            *(void *)&long long v484 = (char *)&v484 + 8;
            sub_18DFE2B44((uint64_t)&v414, (uint64_t)&v409, (uint64_t)v483);
          }
          else
          {
            *(void *)&v483[24] = 0x100000002;
            *(_OWORD *)&v483[8] = xmmword_18E1FD1A0;
            *(void *)v483 = &unk_1EDD18B28;
            *(void *)&long long v484 = (char *)&v484 + 8;
            sub_18DFE2B44((uint64_t)&v414, (uint64_t)&v424, (uint64_t)v483);
          }
          sub_18DFE2F24(v232 + v161, (uint64_t)v483);
          if (v163)
          {
            uint64_t v239 = v466[0];
            uint64_t v396 = 0x200000002;
            v394 = &unk_1EDD18BB8;
            long long v395 = xmmword_18E1FD1B0;
            v397 = &v398;
            sub_18DFEF380((uint64_t)&v414, (uint64_t)&v394);
            uint64_t v401 = 0x200000002;
            v399 = &unk_1EDD18BB8;
            long long v400 = xmmword_18E1FD1B0;
            v402 = &v403;
            sub_18DFE2B44((uint64_t)&v394, (uint64_t)&v433, (uint64_t)&v399);
            *(void *)&v483[24] = 0x200000002;
            *(_OWORD *)&v483[8] = xmmword_18E1FD1B0;
            *(void *)v483 = &unk_1EDD18BB8;
            *(void *)&long long v484 = (char *)&v484 + 8;
            sub_18DFE2B44((uint64_t)&v399, v466[0] + v162 - 72, (uint64_t)v483);
            double v241 = v376;
            double v240 = v377;
          }
          else
          {
            unsigned int v242 = v464;
            double *v464 = v365;
            uint64_t v243 = *(int *)&v462[20];
            uint64_t v244 = &v242[*(int *)&v462[20]];
            double *v244 = v366;
            v242[2 * v243] = v367;
            double v241 = v376;
            double v240 = v377;
            v242[1] = v361 + v376 * v191 - v233 * v189;
            v244[1] = v362 + v233 * v187 - v377 * v191;
            v242[(int)((2 * v243) | 1)] = v363 + v377 * v189 - v376 * v187;
            uint64_t v239 = v466[0];
            sub_18E131FB8((uint64_t)v483, (uint64_t)&v414);
          }
          sub_18DFE2F24(v239 + v162, (uint64_t)v483);
          if (v374 == v163)
          {
            uint64_t v245 = v460;
            double *v460 = -v368;
            uint64_t v246 = SHIDWORD(v458);
            unsigned int v247 = &v245[SHIDWORD(v458)];
            *unsigned int v247 = -v370;
            v245[2 * v246] = -v372;
            v245[1] = v369 - (v241 * v191 - v233 * v189);
            v247[1] = v371 - (v233 * v187 - v240 * v191);
            v245[(int)((2 * v246) | 1)] = v373 - (v240 * v189 - v241 * v187);
            sub_18DFE2F24((uint64_t)&v452, (uint64_t)&v414);
          }
          unint64_t v248 = v163 + 2;
          ++v163;
          v171 += 24;
          v162 += 72;
          v161 += 56;
          double v167 = v382;
          double v168 = v387;
          double v169 = v390;
          double v170 = v181;
          double v172 = 1.0;
          if (v248 > v375)
          {
            *(void *)&v429[24] = 0x100000002;
            *(_OWORD *)&v429[8] = xmmword_18E1FD1A0;
            *(void *)v429 = &unk_1EDD18B28;
            *(void *)&v429[32] = &v429[40];
            int v249 = 1;
            unint64_t v250 = v375;
            unint64_t v251 = v375;
            do
            {
              if (v251 == v250)
              {
                unint64_t v252 = v374;
                sub_18DFE2F24((uint64_t)v429, v467 + 56 * v374);
              }
              else
              {
                unint64_t v252 = v251 - 1;
                uint64_t v253 = v467;
                *(void *)&long long v435 = 0x100000002;
                long long v434 = xmmword_18E1FD1A0;
                double v433 = COERCE_DOUBLE(&unk_1EDD18B28);
                *((void *)&v435 + 1) = &v436;
                sub_18DFE2B44(v469[0] + 72 * (v251 - 1), (uint64_t)v429, (uint64_t)&v433);
                *(void *)&v483[24] = 0x100000002;
                *(_OWORD *)&v483[8] = xmmword_18E1FD1A0;
                *(void *)v483 = &unk_1EDD18B28;
                *(void *)&long long v484 = (char *)&v484 + 8;
                sub_18DFE2AA8(v253 + 56 * (v251 - 1), (uint64_t)&v433, (uint64_t)v483);
                sub_18DFE2F24((uint64_t)v429, (uint64_t)v483);
              }
              uint64_t v254 = *(void *)&v429[32];
              BOOL v255 = **(double **)&v429[32] * **(double **)&v429[32]
                   + *(double *)(*(void *)&v429[32] + 8) * *(double *)(*(void *)&v429[32] + 8) <= v358;
              unsigned int v256 = (double *)&v360[16 * v252];
              double v257 = v256[1];
              double *v256 = **(double **)&v429[32] + *v256;
              v256[1] = v257 + *(double *)(v254 + 8);
              unsigned int v258 = (cnprint::CNPrinter *)(*(uint64_t (**)(void, double *))(**(void **)&v16[8 * v252]
                                                                                       + 40))(*(void *)&v16[8 * v252], v256);
              if ((v258 & 1) == 0)
              {
                double v60 = v360;
                if (cnprint::CNPrinter::GetLogLevel(v258) <= 1)
                {
                  *(_WORD *)v483 = 12;
                  LOBYTE(v433) = 1;
                  double v349 = *(double *)(v359 + 8) + (double)*(uint64_t *)v359;
                  cnprint::CNPrinter::Print((cnprint::CNPrinter *)v483, (unsigned __int8 *)&v433, "#nlos,time,%.3lf,updated facet-plane coords for k=%zu are not inside facet boundary, N=%zu", v344, v345, v346, v347, v348, SLOBYTE(v349));
                }
                goto LABEL_191;
              }
              uint64_t v259 = *(void *)&v16[8 * v252];
              double v260 = (*(double (**)(uint64_t))(*(void *)v259 + 48))(v259);
              double v262 = v261;
              double v264 = v263;
              double v265 = (*(double (**)(uint64_t))(*(void *)v259 + 72))(v259);
              double v267 = v266;
              double v269 = v268;
              double v270 = *v256;
              double v271 = (*(double (**)(uint64_t))(*(void *)v259 + 80))(v259);
              double v272 = v256[1];
              uint64_t v158 = (double *)v480;
              long long v275 = (double *)((char *)v480 + 24 * v251);
              double *v275 = v260 + v265 * v270 + v271 * v272;
              v275[1] = v262 + v267 * v270 + v273 * v272;
              v275[2] = v264 + v269 * v270 + v274 * v272;
              uint64_t v276 = v466[0] + 72 * v252;
              uint64_t v277 = v441[0] + 72 * v252;
              uint64_t v278 = v440[0];
              uint64_t v279 = v440[0] + 72 * v252;
              if (v251 == v375)
              {
                sub_18DFE2F24(v441[0] + 72 * v252, v466[0] + 72 * v252);
                unint64_t v250 = v375;
                sub_18DFE2F24(v279, (uint64_t)&v452);
              }
              else
              {
                uint64_t v383 = v440[0] + 72 * v252;
                uint64_t v285 = v469[0] + 72 * v252;
                uint64_t v286 = 9 * v251;
                *(void *)&long long v435 = 0x200000002;
                long long v434 = xmmword_18E1FD1B0;
                double v433 = COERCE_DOUBLE(&unk_1EDD18BB8);
                *((void *)&v435 + 1) = &v436;
                sub_18DFE2B44(v285, v441[0] + 8 * v286, (uint64_t)&v433);
                *(void *)&v483[24] = 0x200000002;
                *(_OWORD *)&v483[8] = xmmword_18E1FD1B0;
                *(void *)v483 = &unk_1EDD18BB8;
                *(void *)&long long v484 = (char *)&v484 + 8;
                sub_18DFE2AA8(v276, (uint64_t)&v433, (uint64_t)v483);
                sub_18DFE2F24(v277, (uint64_t)v483);
                *(void *)&long long v435 = 0x200000002;
                long long v434 = xmmword_18E1FD1B0;
                double v433 = COERCE_DOUBLE(&unk_1EDD18BB8);
                *((void *)&v435 + 1) = &v436;
                sub_18DFEF380(v285, (uint64_t)&v433);
                *(void *)&v483[24] = 0x200000002;
                *(_OWORD *)&v483[8] = xmmword_18E1FD1B0;
                *(void *)v483 = &unk_1EDD18BB8;
                *(void *)&long long v484 = (char *)&v484 + 8;
                sub_18DFE2B44((uint64_t)&v433, v278 + 8 * v286, (uint64_t)v483);
                double v16 = __pa;
                sub_18DFE2F24(v383, (uint64_t)v483);
                unint64_t v250 = v375;
              }
              v249 &= v255;
              unint64_t v251 = v252;
            }
            while (v252);
            int v160 = v354 + 1;
            if (v354 > v353) {
              int v287 = 1;
            }
            else {
              int v287 = v249;
            }
            double v159 = 1.0;
            if (v287 == 1)
            {
              if (v249)
              {
                double v288 = *v158;
                double v289 = v158[1];
                double v290 = v158[4];
                double v291 = v158[5];
                double v292 = v158[2];
                double v293 = v158[3];
                sub_18E12C6A0((uint64_t)&v433);
                sub_18E13226C((uint64_t)v429, (uint64_t)&v433);
                uint64_t v294 = 0;
                uint64_t v295 = 0;
                double v296 = v290 - v289;
                double v297 = 1.0 / sqrt(v296 * v296 + (v293 - v288) * (v293 - v288) + (v291 - v292) * (v291 - v292));
                double v298 = (v293 - v288) * v297;
                double v299 = v296 * v297;
                double v300 = (v291 - v292) * v297;
                v388 = (double *)v473[0];
                v391 = v158;
                int8x16_t v301 = v470;
                v381 = (char *)v470 + 16;
                v378 = (char *)v477 + 16;
                v380 = v158 + 8;
                uint64_t v302 = (char *)v474 + 16;
                long long v303 = xmmword_18E1FD740;
                unint64_t v304 = 1;
                do
                {
                  long long v305 = &v388[v295];
                  *long long v305 = v298;
                  v305[1] = v299;
                  v305[2] = v300;
                  double v306 = v380[v295 - 2] - v380[v295 - 5];
                  double v307 = v380[v295 - 1] - v380[v295 - 4];
                  double v308 = v380[v295] - v380[v295 - 3];
                  double v309 = 1.0 / sqrt(v307 * v307 + v306 * v306 + v308 * v308);
                  double v298 = v306 * v309;
                  double v299 = v307 * v309;
                  double v300 = v308 * v309;
                  long long v310 = (double *)&v381[v295 * 8];
                  *(v310 - 2) = v306 * v309;
                  *(v310 - 1) = v307 * v309;
                  *long long v310 = v308 * v309;
                  uint64_t v311 = v440[0];
                  double v312 = v388[v295] - v306 * v309;
                  double v313 = v388[v295 + 1] - v307 * v309;
                  double v314 = v388[v295 + 2] - v308 * v309;
                  *(void *)&v483[24] = 0x200000001;
                  *(void *)v483 = &unk_1EDD181C8;
                  *(_OWORD *)&v483[8] = v303;
                  *(void *)&long long v484 = (char *)&v484 + 8;
                  *((double *)&v484 + 1) = v313 * *(double *)&v378[v295 * 8 - 8]
                                         + v312 * *(double *)&v378[v295 * 8 - 16]
                                         + v314 * *(double *)&v378[v295 * 8];
                  v485[0] = v313 * *(double *)&v302[v295 * 8 - 8]
                          + v312 * *(double *)&v302[v295 * 8 - 16]
                          + v314 * *(double *)&v302[v295 * 8];
                  uint64_t v421 = 0x200000001;
                  v419 = &unk_1EDD181C8;
                  long long v420 = v303;
                  v422 = v423;
                  sub_18DFE2B44((uint64_t)v483, v441[0] + v294, (uint64_t)&v419);
                  uint64_t v511 = 0x200000001;
                  *(_OWORD *)&v510[8] = xmmword_18E1FD740;
                  *(void *)v510 = &unk_1EDD181C8;
                  v512 = v513;
                  sub_18DFEF1F4((uint64_t)&v433, (uint64_t)&v419, (uint64_t)v510);
                  sub_18DFE2F24((uint64_t)&v433, (uint64_t)v510);
                  uint64_t v421 = 0x200000001;
                  long long v420 = xmmword_18E1FD740;
                  v419 = &unk_1EDD181C8;
                  v422 = v423;
                  sub_18DFE2B44((uint64_t)v483, v311 + v294, (uint64_t)&v419);
                  uint64_t v511 = 0x200000001;
                  *(_OWORD *)&v510[8] = xmmword_18E1FD740;
                  *(void *)v510 = &unk_1EDD181C8;
                  v512 = v513;
                  sub_18DFEF1F4((uint64_t)v429, (uint64_t)&v419, (uint64_t)v510);
                  sub_18DFE2F24((uint64_t)v429, (uint64_t)v510);
                  ++v304;
                  v295 += 3;
                  v294 += 72;
                  long long v303 = xmmword_18E1FD740;
                }
                while (v304 <= v375);
                sub_18E12C704((uint64_t)v483, (uint64_t)&v433, (uint64_t)v462);
                double v60 = v360;
                sub_18DFE2F24((uint64_t)&v447, (uint64_t)v483);
                sub_18E12C704((uint64_t)v483, (uint64_t)v429, (uint64_t)&v457);
                sub_18DFE2F24((uint64_t)&v442, (uint64_t)v483);
                double v315 = 0.0;
                uint64_t v316 = v450;
                double *v450 = *v450 - *v388;
                uint64_t v317 = SHIDWORD(v448);
                v316[SHIDWORD(v448)] = v316[SHIDWORD(v448)] - v388[1];
                v316[2 * v317] = v316[2 * v317] - v388[2];
                uint64_t v318 = (double *)&v301[3 * v374];
                uint64_t v319 = v445;
                double *v445 = *v318 + *v445;
                uint64_t v320 = SHIDWORD(v443);
                v319[SHIDWORD(v443)] = v318[1] + v319[SHIDWORD(v443)];
                v319[2 * v320] = v318[2] + v319[2 * v320];
                *(_OWORD *)v510 = *(_OWORD *)v388;
                *(double *)&v510[16] = v388[2];
                double v433 = v355;
                long long v434 = v352;
                long long v435 = *(_OWORD *)v510;
                double v436 = *(double *)&v510[16];
                double v437 = COERCE_DOUBLE(&v437);
                double v438 = COERCE_DOUBLE(&v437);
                double v439 = 0.0;
                v321 = v391 + 3;
                double v322 = 0.0;
                v323 = &v437;
                do
                {
                  uint64_t v324 = *(void *)&v16[8 * *(void *)&v315];
                  double v325 = *v321;
                  double v326 = v321[1];
                  double v328 = *(v321 - 3);
                  double v327 = *(v321 - 2);
                  double v330 = *(v321 - 1);
                  *(double *)&v429[16] = v321[2];
                  double v329 = *(double *)&v429[16];
                  *(_OWORD *)v429 = *(_OWORD *)v321;
                  *(_OWORD *)&v429[24] = *(_OWORD *)v301;
                  *(void *)&v429[40] = v301[2];
                  *(_OWORD *)&v483[16] = *(_OWORD *)&v429[16];
                  long long v484 = *(_OWORD *)&v429[32];
                  *(_OWORD *)v483 = *(_OWORD *)v429;
                  double v331 = COERCE_DOUBLE(operator new(0x50uLL));
                  *(void *)(*(void *)&v331 + 8) = &v437;
                  *(void *)(*(void *)&v331 + 16) = v324;
                  double v332 = sqrt((v326 - v327) * (v326 - v327) + (v325 - v328) * (v325 - v328) + (v329 - v330)
                                                                                            * (v329 - v330));
                  *(double *)(*(void *)&v331 + 24) = v332;
                  long long v333 = *(_OWORD *)&v483[16];
                  *(_OWORD *)(*(void *)&v331 + 32) = *(_OWORD *)v483;
                  *(_OWORD *)(*(void *)&v331 + 48) = v333;
                  *(_OWORD *)(*(void *)&v331 + 64) = v484;
                  **(void **)&double v331 = v323;
                  v323[1] = v331;
                  unint64_t v334 = *(void *)&v315 + 2;
                  ++*(void *)&v315;
                  double v437 = v331;
                  double v439 = v315;
                  v321 += 3;
                  double v322 = v322 + v332;
                  v301 += 3;
                  v323 = *(double **)&v331;
                }
                while (v334 <= v375);
                v335 = &v391[3 * v375];
                double v337 = v335[1];
                double v336 = v335[2];
                double v338 = *v335;
                double v339 = *v357;
                double v340 = v357[1];
                double v341 = v357[2];
                sub_18E12E160((uint64_t)v483, (long long *)&v433, (uint64_t)v357);
                char v499 = 1;
                sub_18E12D774(a6, (long long *)v483);
                sub_18E12BD10((uint64_t)v483);
                *(double *)(a6 + 96) = v322
                                     + sqrt((v340 - v337) * (v340 - v337)+ (v339 - v338) * (v339 - v338)+ (v341 - v336) * (v341 - v336));
                sub_18DFE2F24(a6 + 104, (uint64_t)&v447);
                sub_18DFE2F24(a6 + 168, (uint64_t)&v442);
                sub_18E068ED0(&v437);
              }
              else
              {
                *(_WORD *)v483 = 12;
                LOBYTE(v433) = 3;
                double v350 = *(double *)(v359 + 8) + (double)*(uint64_t *)v359;
                cnprint::CNPrinter::Print((cnprint::CNPrinter *)v483, (unsigned __int8 *)&v433, "#nlos,time,%.3lf,failed to converge in %u iterations", v280, v281, v282, v283, v284, SLOBYTE(v350));
                double v60 = v360;
              }
              goto LABEL_191;
            }
            goto LABEL_151;
          }
        }
        *(_WORD *)v483 = 12;
        LOBYTE(v505) = 4;
        double v343 = *(double *)(v359 + 8) + (double)*(uint64_t *)v359;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v483, (unsigned __int8 *)&v505, "#nlos,time,%.3lf,condition number too large in Thomas algorithm,k,%zu,N,%zu,cond,%.1f", v234, v235, v236, v237, v238, SLOBYTE(v343));
LABEL_191:
        *(void *)v483 = v440;
        sub_18E12E224((void ***)v483);
        *(void *)v483 = v441;
        sub_18E12E224((void ***)v483);
        *(void *)v483 = v466;
        sub_18E12E224((void ***)v483);
        *(void *)v483 = &v467;
        sub_18E12E2E4((void ***)v483);
        *(void *)v483 = v469;
        sub_18E12E224((void ***)v483);
        if (v470)
        {
          v471 = v470;
          operator delete(v470);
        }
        if (v473[0]) {
          operator delete(v473[0]);
        }
        goto LABEL_195;
      }
    }
    operator delete(v26);
    goto LABEL_147;
  }
  double v59 = v16;
  double v60 = v24;
  std::string __p = v16;
  uint64_t v61 = &v16[8 * v392];
  long long v62 = &v24[16 * v386];
  while (1)
  {
    uint64_t v63 = *(void *)(v57 + 16);
    if (!v63)
    {
      *(_WORD *)v483 = 12;
      v462[0] = 4;
      double v141 = *(double *)(v359 + 8) + (double)*(uint64_t *)v359;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v483, v462, "#nlos,time,%.3lf,reflecting facet pointer is null in %s", v18, v19, v20, v21, v22, SLOBYTE(v141));
      goto LABEL_130;
    }
    if (v59 >= v61)
    {
      uint64_t v64 = (v59 - __p) >> 3;
      unint64_t v65 = v64 + 1;
      if ((unint64_t)(v64 + 1) >> 61) {
        sub_18DEE1FC8();
      }
      unint64_t v66 = v61 - __p;
      unint64_t v67 = (v61 - __p) >> 2;
      if (v67 > v65) {
        unint64_t v65 = v67;
      }
      if (v66 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v68 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v68 = v65;
      }
      if (v68) {
        unint64_t v68 = (unint64_t)sub_18DEE2FBC(v68);
      }
      else {
        uint64_t v69 = 0;
      }
      uint64_t v70 = (char *)(v68 + 8 * v64);
      *(void *)uint64_t v70 = v63;
      uint64_t v71 = v70 + 8;
      if (v59 == __p)
      {
        uint64_t v72 = __p;
      }
      else
      {
        uint64_t v72 = __p;
        do
        {
          uint64_t v73 = *((void *)v59 - 1);
          v59 -= 8;
          *((void *)v70 - 1) = v73;
          v70 -= 8;
        }
        while (v59 != __p);
      }
      unint64_t v393 = v68 + 8 * v69;
      if (v72) {
        operator delete(v72);
      }
      std::string __p = v70;
      double v59 = v71;
    }
    else
    {
      unint64_t v393 = (unint64_t)v61;
      *(void *)double v59 = v63;
      v59 += 8;
    }
    double v74 = (*(double (**)(uint64_t))(*(void *)v63 + 72))(v63);
    double v77 = v74;
    uint64_t v78 = v75;
    uint64_t v79 = v76;
    long long v80 = v478;
    if ((unint64_t)v478 >= v479)
    {
      uint64_t v82 = (double *)v477;
      unint64_t v83 = 0xAAAAAAAAAAAAAAABLL * (((char *)v478 - (unsigned char *)v477) >> 3);
      unint64_t v84 = v83 + 1;
      if (v83 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_18DEE1FC8();
      }
      if (0x5555555555555556 * ((uint64_t)(v479 - (void)v477) >> 3) > v84) {
        unint64_t v84 = 0x5555555555555556 * ((uint64_t)(v479 - (void)v477) >> 3);
      }
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v479 - (void)v477) >> 3) >= 0x555555555555555) {
        unint64_t v85 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v85 = v84;
      }
      if (v85) {
        unint64_t v85 = (unint64_t)sub_18E12E008(v85);
      }
      else {
        uint64_t v86 = 0;
      }
      long long v87 = (double *)(v85 + 24 * v83);
      *long long v87 = v77;
      *((void *)v87 + 1) = v78;
      *((void *)v87 + 2) = v79;
      uint64_t v88 = v87;
      if (v80 != v82)
      {
        do
        {
          long long v89 = *(_OWORD *)(v80 - 3);
          *(v88 - 1) = *(v80 - 1);
          *(_OWORD *)(v88 - 3) = v89;
          v88 -= 3;
          v80 -= 3;
        }
        while (v80 != v82);
        long long v80 = (double *)v477;
      }
      uint64_t v81 = v87 + 3;
      v477 = v88;
      unint64_t v479 = v85 + 24 * v86;
      if (v80) {
        operator delete(v80);
      }
    }
    else
    {
      double *v478 = v74;
      *((void *)v80 + 1) = v75;
      uint64_t v81 = v80 + 3;
      *((void *)v80 + 2) = v76;
    }
    v478 = v81;
    double v95 = (*(double (**)(uint64_t))(*(void *)v63 + 80))(v63);
    double v98 = v95;
    uint64_t v99 = v96;
    uint64_t v100 = v97;
    uint64_t v101 = v475;
    if ((unint64_t)v475 >= v476)
    {
      uint64_t v103 = (double *)v474;
      unint64_t v104 = 0xAAAAAAAAAAAAAAABLL * (((char *)v475 - (unsigned char *)v474) >> 3);
      unint64_t v105 = v104 + 1;
      if (v104 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_18DEE1FC8();
      }
      if (0x5555555555555556 * ((uint64_t)(v476 - (void)v474) >> 3) > v105) {
        unint64_t v105 = 0x5555555555555556 * ((uint64_t)(v476 - (void)v474) >> 3);
      }
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v476 - (void)v474) >> 3) >= 0x555555555555555) {
        unint64_t v106 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v106 = v105;
      }
      if (v106) {
        unint64_t v106 = (unint64_t)sub_18E12E008(v106);
      }
      else {
        uint64_t v107 = 0;
      }
      uint64_t v108 = (double *)(v106 + 24 * v104);
      *uint64_t v108 = v98;
      *((void *)v108 + 1) = v99;
      *((void *)v108 + 2) = v100;
      uint64_t v109 = v108;
      if (v101 != v103)
      {
        do
        {
          long long v110 = *(_OWORD *)(v101 - 3);
          *(v109 - 1) = *(v101 - 1);
          *(_OWORD *)(v109 - 3) = v110;
          v109 -= 3;
          v101 -= 3;
        }
        while (v101 != v103);
        uint64_t v101 = (double *)v474;
      }
      uint64_t v102 = v108 + 3;
      v474 = v109;
      unint64_t v476 = v106 + 24 * v107;
      if (v101) {
        operator delete(v101);
      }
    }
    else
    {
      double *v475 = v95;
      *((void *)v101 + 1) = v96;
      uint64_t v102 = v101 + 3;
      *((void *)v101 + 2) = v97;
    }
    double v111 = *(double *)(v57 + 40);
    double v112 = *(double *)(v57 + 48);
    *(void *)v483 = *(void *)(v57 + 32);
    *(double *)&v483[8] = v111;
    *(double *)&v483[16] = v112;
    uint64_t v113 = (char *)v481;
    double v114 = *(v481 - 2);
    double v115 = *(double *)v483 - *(v481 - 3);
    v475 = v102;
    if (fabs((v111 - v114) * (v111 - v114) + v115 * v115 + (v112 - *(v481 - 1)) * (v112 - *(v481 - 1))) <= 0.000000015)
    {
      *(_WORD *)v462 = 12;
      LOBYTE(v457) = 4;
      double v142 = *(double *)(v359 + 8) + (double)*(uint64_t *)v359;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v462, (unsigned __int8 *)&v457, "#nlos,time,%.3lf,duplicate point at index %lu found", v90, v91, v92, v93, v94, SLOBYTE(v142));
      goto LABEL_130;
    }
    if ((unint64_t)v481 < v482)
    {
      uint64_t v116 = v60;
      long long v117 = *(_OWORD *)v483;
      v481[2] = *(double *)&v483[16];
      *(_OWORD *)uint64_t v113 = v117;
      uint64_t v118 = (double *)(v113 + 24);
      goto LABEL_100;
    }
    double v119 = (char *)v480;
    unint64_t v120 = 0xAAAAAAAAAAAAAAABLL * (((char *)v481 - (unsigned char *)v480) >> 3);
    unint64_t v121 = v120 + 1;
    if (v120 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_18DEE1FC8();
    }
    if (0x5555555555555556 * ((uint64_t)(v482 - (void)v480) >> 3) > v121) {
      unint64_t v121 = 0x5555555555555556 * ((uint64_t)(v482 - (void)v480) >> 3);
    }
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v482 - (void)v480) >> 3) >= 0x555555555555555) {
      unint64_t v122 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v122 = v121;
    }
    if (v122)
    {
      unint64_t v122 = (unint64_t)sub_18E12E008(v122);
      uint64_t v116 = v60;
    }
    else
    {
      uint64_t v116 = v60;
      uint64_t v123 = 0;
    }
    uint64_t v124 = (char *)(v122 + 24 * v120);
    long long v125 = *(_OWORD *)v483;
    *((void *)v124 + 2) = *(void *)&v483[16];
    *(_OWORD *)uint64_t v124 = v125;
    uint64_t v118 = (double *)(v124 + 24);
    if (v113 == v119)
    {
      v480 = (void *)(v122 + 24 * v120);
      unint64_t v482 = v122 + 24 * v123;
LABEL_99:
      operator delete(v113);
      goto LABEL_100;
    }
    do
    {
      long long v126 = *(_OWORD *)(v113 - 24);
      *((void *)v124 - 1) = *((void *)v113 - 1);
      *(_OWORD *)(v124 - 24) = v126;
      v124 -= 24;
      v113 -= 24;
    }
    while (v113 != v119);
    uint64_t v113 = (char *)v480;
    v480 = v124;
    unint64_t v482 = v122 + 24 * v123;
    if (v113) {
      goto LABEL_99;
    }
LABEL_100:
    v481 = v118;
    double v60 = v116;
    *(void *)v462 = (*(double (**)(uint64_t, unsigned char *))(*(void *)v63 + 120))(v63, v483);
    *(void *)&v462[8] = v127;
    if (((*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)v63 + 40))(v63, v462) & 1) == 0) {
      break;
    }
    if (v24 >= v62)
    {
      uint64_t v128 = (v24 - v116) >> 4;
      unint64_t v129 = v128 + 1;
      if ((unint64_t)(v128 + 1) >> 60) {
        sub_18DEE1FC8();
      }
      if ((v62 - v116) >> 3 > v129) {
        unint64_t v129 = (v62 - v116) >> 3;
      }
      if ((unint64_t)(v62 - v116) >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v130 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v130 = v129;
      }
      if (v130) {
        unint64_t v130 = (unint64_t)sub_18E12E050(v130);
      }
      else {
        uint64_t v131 = 0;
      }
      uint64_t v132 = (_OWORD *)(v130 + 16 * v128);
      *uint64_t v132 = *(_OWORD *)v462;
      if (v24 == v116)
      {
        double v134 = (char *)(v130 + 16 * v128);
      }
      else
      {
        unint64_t v133 = v130 + 16 * v128;
        do
        {
          double v134 = (char *)(v133 - 16);
          *(_OWORD *)(v133 - 16) = *((_OWORD *)v24 - 1);
          v24 -= 16;
          v133 -= 16;
        }
        while (v24 != v116);
      }
      long long v62 = (char *)(v130 + 16 * v131);
      uint64_t v24 = (char *)(v132 + 1);
      if (v116) {
        operator delete(v116);
      }
      double v60 = v134;
    }
    else
    {
      *(_OWORD *)uint64_t v24 = *(_OWORD *)v462;
      v24 += 16;
    }
    uint64_t v61 = (char *)v393;
    uint64_t v57 = *(void *)(v57 + 8);
    if (v57 == v389)
    {
      uint64_t v26 = v481;
      __n128 v58 = (double *)&unk_18E1EF000;
      double v16 = __p;
      goto LABEL_123;
    }
  }
  LOWORD(v457) = 12;
  LOBYTE(v452) = 4;
  double v143 = *(double *)(v359 + 8) + (double)*(uint64_t *)v359;
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v457, (unsigned __int8 *)&v452, "#nlos,time,%.3lf,initial facet-plane coords for k=%zu are not inside facet boundary", v18, v19, v20, v21, v22, SLOBYTE(v143));
LABEL_130:
  double v16 = __p;
LABEL_195:
  if (v60) {
    operator delete(v60);
  }
  if (v474) {
    operator delete(v474);
  }
  if (v477) {
    operator delete(v477);
  }
  if (v16) {
    operator delete(v16);
  }
  if (v480) {
    operator delete(v480);
  }
}

void sub_18E12BAC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59)
{
  sub_18E12BD10((uint64_t)&STACK[0x6A0]);
  sub_18E068ED0(v59);
  STACK[0x6A0] = (unint64_t)&STACK[0x430];
  sub_18E12E224((void ***)&STACK[0x6A0]);
  STACK[0x6A0] = (unint64_t)&STACK[0x448];
  sub_18E12E224((void ***)&STACK[0x6A0]);
  STACK[0x6A0] = (unint64_t)&STACK[0x5D8];
  sub_18E12E224((void ***)&STACK[0x6A0]);
  STACK[0x580] = (unint64_t)&STACK[0x5F0];
  sub_18E12E2E4((void ***)&STACK[0x580]);
  STACK[0x580] = (unint64_t)&STACK[0x610];
  sub_18E12E224((void ***)&STACK[0x580]);
  if (STACK[0x628]) {
    operator delete((void *)STACK[0x628]);
  }
  if (STACK[0x640]) {
    operator delete((void *)STACK[0x640]);
  }
  if (a23) {
    operator delete(a23);
  }
  if (STACK[0x658]) {
    operator delete((void *)STACK[0x658]);
  }
  if (STACK[0x670]) {
    operator delete((void *)STACK[0x670]);
  }
  if (a59) {
    operator delete(a59);
  }
  if (STACK[0x688]) {
    operator delete((void *)STACK[0x688]);
  }
  sub_18E12BD10(a19);
  _Unwind_Resume(a1);
}

uint64_t sub_18E12BD10(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 232))
  {
    *(void *)(a1 + 168) = &unk_1EDD17478;
    *(void *)(a1 + 104) = &unk_1EDD17478;
    sub_18E068ED0((void *)(a1 + 48));
  }
  return a1;
}

uint64_t *sub_18E12BD84(uint64_t *a1)
{
  uint64_t v2 = (void *)a1[10];
  if (v2)
  {
    a1[11] = (uint64_t)v2;
    operator delete(v2);
  }
  sub_18E068ED0(a1 + 6);
  sub_18E12CDF0(a1);
  return a1;
}

uint64_t sub_18E12BDC8(uint64_t result, double *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  long long v5 = *((_OWORD *)a2 + 1);
  *(_OWORD *)double result = *(_OWORD *)a2;
  *(_OWORD *)(result + 16) = v5;
  *(_OWORD *)(result + 32) = *((_OWORD *)a2 + 2);
  uint64_t v6 = result + 48;
  *(void *)(result + 48) = result + 48;
  *(void *)(result + 56) = result + 48;
  *(void *)(result + 64) = 0;
  if (a4)
  {
    uint64_t v10 = result;
    v36[0] = &unk_1EDD12518;
    long long v11 = *((_OWORD *)a2 + 1);
    long long v37 = *(_OWORD *)a2;
    long long v38 = v11;
    long long v39 = *((_OWORD *)a2 + 2);
    v36[1] = a3;
    uint64_t v43 = a5;
    uint64_t v44 = &unk_1EDD12418;
    int v40 = 0;
    *(double *)&uint64_t v41 = INFINITY;
    uint64_t v42 = 0;
    uint64_t v48 = -1;
    double v49 = &unk_1EDD12418;
    *(void *)double v50 = a3;
    *(_OWORD *)&v50[8] = 0u;
    long long v51 = 0u;
    long long v52 = 0u;
    uint64_t v53 = 0;
    uint64_t v54 = -1;
    long long v47 = 0u;
    long long v45 = *(_OWORD *)v50;
    memset(v46, 0, sizeof(v46));
    sub_18E12ECC0(v46, (uint64_t)&v50[16]);
    uint64_t v48 = v54;
    double v49 = &unk_1EDD12418;
    sub_18E12EB68((uint64_t)&v50[16]);
    sub_18E12E848(&v44);
    while (*((void *)&v47 + 1))
    {
      (*(void (**)(void, void *))(**((void **)&v45 + 1) + 16))(*((void *)&v45 + 1), v36);
      sub_18E12E950(&v44);
    }
    uint64_t v12 = v42;
    if (v42)
    {
      double v13 = *(double *)&v41;
      double v14 = *((double *)&v38 + 1);
      double v34 = *((double *)&v39 + 1);
      double v35 = *(double *)&v39;
      double v32 = *((double *)&v37 + 1);
      double v33 = *(double *)&v37;
      double v31 = *(double *)&v38;
      double v15 = (*(double (**)(uint64_t))(*(void *)v42 + 88))(v42);
      double v17 = v16;
      double v19 = v18;
      double v20 = a2[3];
      double v21 = a2[4];
      double v22 = a2[5];
      uint64_t v23 = (double *)operator new(0x50uLL);
      double v24 = v17 * v21 + v20 * v15 + v22 * v19;
      double v25 = v24 + v24;
      *((void *)v23 + 1) = v6;
      *((void *)v23 + 2) = v12;
      v23[3] = v13;
      v23[4] = v13 * v14 + v33;
      v23[5] = v13 * v35 + v32;
      _DWORD v23[6] = v13 * v34 + v31;
      v23[7] = v20 - v15 * v25;
      v23[8] = v21 - v17 * v25;
      v23[9] = v22 - v19 * v25;
      uint64_t v26 = *(void *)(v10 + 48);
      *(void *)uint64_t v23 = v26;
      *(void *)(v26 + 8) = v23;
      *(void *)(v10 + 48) = v23;
      ++*(void *)(v10 + 64);
      sub_18E12BDC8(&v49, v23 + 4, a3, a4 - 1, v42);
      uint64_t v27 = v53;
      if (v53)
      {
        long long v28 = v52;
        uint64_t v29 = **((void **)&v52 + 1);
        *(void *)(v29 + 8) = *(void *)(v52 + 8);
        **(void **)(v28 + 8) = v29;
        uint64_t v30 = *(void *)(v10 + 48);
        *(void *)(v30 + 8) = *((void *)&v28 + 1);
        **((void **)&v28 + 1) = v30;
        *(void *)(v10 + 48) = v28;
        *(void *)(v28 + 8) = v6;
        *(void *)(v10 + 64) += v27;
        uint64_t v53 = 0;
      }
      sub_18E068ED0(&v52);
    }
    v36[0] = &unk_1EDD12518;
    uint64_t v44 = &unk_1EDD12418;
    return sub_18E12EB68((uint64_t)v46);
  }
  return result;
}

void sub_18E12C0F4(_Unwind_Exception *a1)
{
  sub_18E12EB68(v2);
  sub_18E068ED0(v1);
  _Unwind_Resume(a1);
}

void sub_18E12C12C(void **a1, unint64_t a2)
{
  if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL) {
      sub_18DEE1FC8();
    }
    uint64_t v3 = ((unsigned char *)a1[1] - (unsigned char *)*a1) / 24;
    int8x16_t v4 = (char *)sub_18E12E008(a2);
    long long v5 = &v4[24 * v3];
    uint64_t v7 = &v4[24 * v6];
    uint64_t v9 = (char *)*a1;
    long long v8 = (char *)a1[1];
    uint64_t v10 = v5;
    if (v8 != *a1)
    {
      do
      {
        long long v11 = *(_OWORD *)(v8 - 24);
        *((void *)v10 - 1) = *((void *)v8 - 1);
        *(_OWORD *)(v10 - 24) = v11;
        v10 -= 24;
        v8 -= 24;
      }
      while (v8 != v9);
      long long v8 = (char *)*a1;
    }
    *a1 = v10;
    a1[1] = v5;
    a1[2] = v7;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

void sub_18E12C21C(char **a1, unint64_t a2)
{
  uint64_t v3 = *a1;
  int8x16_t v4 = a1[1];
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  unint64_t v6 = a2 - v5;
  if (a2 <= v5)
  {
    if (a2 >= v5) {
      return;
    }
    double v20 = &v3[24 * a2];
    goto LABEL_19;
  }
  uint64_t v7 = a1[2];
  if (0xAAAAAAAAAAAAAAABLL * ((v7 - v4) >> 3) >= v6)
  {
    size_t v21 = 24 * ((24 * v6 - 24) / 0x18) + 24;
    bzero(a1[1], v21);
    double v20 = &v4[v21];
LABEL_19:
    a1[1] = v20;
    return;
  }
  if (a2 > 0xAAAAAAAAAAAAAAALL) {
    sub_18DEE1FC8();
  }
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - v3) >> 3);
  uint64_t v9 = 2 * v8;
  if (2 * v8 <= a2) {
    uint64_t v9 = a2;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v10 = v9;
  }
  long long v11 = (char *)sub_18E12E008(v10);
  uint64_t v12 = &v11[24 * v5];
  double v14 = &v11[24 * v13];
  size_t v15 = 24 * ((24 * v6 - 24) / 0x18) + 24;
  bzero(v12, v15);
  double v16 = &v12[v15];
  double v18 = *a1;
  double v17 = a1[1];
  if (v17 != *a1)
  {
    do
    {
      long long v19 = *(_OWORD *)(v17 - 24);
      *((void *)v12 - 1) = *((void *)v17 - 1);
      *(_OWORD *)(v12 - 24) = v19;
      v12 -= 24;
      v17 -= 24;
    }
    while (v17 != v18);
    double v17 = *a1;
  }
  *a1 = v12;
  a1[1] = v16;
  a1[2] = v14;
  if (v17)
  {
    operator delete(v17);
  }
}

void *sub_18E12C3AC(void *result, unint64_t a2)
{
  uint64_t v3 = result;
  unint64_t v5 = (uint64_t (***)(void))*result;
  int8x16_t v4 = (uint64_t (***)(void))result[1];
  unint64_t v6 = 0x8E38E38E38E38E39 * (((uint64_t)v4 - *result) >> 3);
  unint64_t v7 = a2 - v6;
  if (a2 <= v6)
  {
    if (a2 < v6)
    {
      double v22 = &v5[9 * a2];
      if (v4 != v22)
      {
        uint64_t v23 = v4 - 9;
        double v24 = v23;
        double v25 = v23;
        do
        {
          uint64_t v26 = *v25;
          v25 -= 9;
          double result = (void *)(*v26)(v24);
          v23 -= 9;
          BOOL v27 = v24 == v22;
          double v24 = v25;
        }
        while (!v27);
      }
      v3[1] = v22;
    }
  }
  else
  {
    uint64_t v8 = result[2];
    if (0x8E38E38E38E38E39 * ((v8 - (uint64_t)v4) >> 3) >= v7)
    {
      long long v28 = &v4[9 * v7];
      uint64_t v29 = 72 * a2 - 8 * (((uint64_t)v4 - *result) >> 3);
      uint64_t v30 = v4 + 5;
      do
      {
        *(v30 - 2) = (uint64_t (**)(void))0x200000002;
        *(v30 - 5) = (uint64_t (**)(void))&unk_1EDD18BB8;
        *((_OWORD *)v30 - 2) = xmmword_18E1FD1B0;
        *(v30 - 1) = (uint64_t (**)(void))v30;
        v30 += 9;
        v4 += 9;
        v29 -= 72;
      }
      while (v29);
      result[1] = v28;
    }
    else
    {
      if (a2 > 0x38E38E38E38E38ELL) {
        sub_18DEE1FC8();
      }
      unint64_t v9 = 0x8E38E38E38E38E39 * ((v8 - (uint64_t)v5) >> 3);
      uint64_t v10 = 2 * v9;
      if (2 * v9 <= a2) {
        uint64_t v10 = a2;
      }
      if (v9 >= 0x1C71C71C71C71C7) {
        unint64_t v11 = 0x38E38E38E38E38ELL;
      }
      else {
        unint64_t v11 = v10;
      }
      double v36 = result + 2;
      if (v11 > 0x38E38E38E38E38ELL) {
        sub_18DEDF7D4();
      }
      uint64_t v12 = 9 * v11;
      uint64_t v13 = (char *)operator new(72 * v11);
      double v14 = &v13[72 * v6];
      uint64_t v15 = 72 * v6;
      double v34 = v13;
      *(void *)double v35 = v14;
      *(void *)&v35[16] = &v13[8 * v12];
      uint64_t v16 = 72 * a2;
      double v17 = v13;
      double v18 = v13;
      long long v19 = &v13[72 * a2];
      do
      {
        double v20 = &v18[v15];
        *((void *)v20 + 3) = 0x200000002;
        *(void *)double v20 = &unk_1EDD18BB8;
        *(_OWORD *)(v20 + 8) = xmmword_18E1FD1B0;
        *((void *)v20 + 4) = &v18[v15 + 40];
        v16 -= 72;
        v18 += 72;
        v17 += 72;
      }
      while (v15 != v16);
      uint64_t v21 = 0;
      *(void *)&v35[8] = v19;
      while (&v4[v21] != v5)
      {
        v21 -= 9;
        sub_18E131FB8((uint64_t)&v14[v21 * 8], (uint64_t)&v4[v21]);
      }
      uint64_t v31 = v3[2];
      long long v32 = *(_OWORD *)&v35[8];
      long long v33 = *(_OWORD *)v3;
      *uint64_t v3 = &v14[v21 * 8];
      *(_OWORD *)double v35 = v33;
      *(_OWORD *)(v3 + 1) = v32;
      *(void *)&v35[16] = v31;
      double v34 = (char *)v33;
      return (void *)sub_18E12E088((uint64_t)&v34);
    }
  }
  return result;
}

uint64_t sub_18E12C6A0(uint64_t a1)
{
  *(void *)(a1 + 24) = 0x200000001;
  *(void *)a1 = &unk_1EDD181C8;
  *(void *)(a1 + 32) = a1 + 40;
  *(_OWORD *)(a1 + 8) = xmmword_18E1FD740;
  return sub_18DFE2CC8(a1, 0.0);
}

void *sub_18E12C6E4(void *result)
{
  *double result = &unk_1EDD17478;
  return result;
}

void sub_18E12C704(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 24) = 0x300000001;
  *(void *)a1 = &unk_1EDD18228;
  *(_OWORD *)(a1 + 8) = xmmword_18E1F8560;
  *(void *)(a1 + 32) = a1 + 40;
  sub_18DFE2B44(a2, a3, a1);
}

void sub_18E12C770(_Unwind_Exception *a1)
{
  void *v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

void *sub_18E12C790(void *result)
{
  *double result = &unk_1EDD17478;
  return result;
}

void *sub_18E12C7B0(void *result, uint64_t a2)
{
  *double result = result;
  result[1] = result;
  result[2] = 0;
  uint64_t v2 = a2 + 48;
  uint64_t v3 = *(void *)(a2 + 56);
  if (v3 != a2 + 48)
  {
    int8x16_t v4 = result;
    uint64_t v5 = 1;
    unint64_t v6 = result;
    do
    {
      double result = operator new(0x18uLL);
      uint64_t v7 = *(void *)(v3 + 16);
      result[1] = v4;
      result[2] = v7;
      *double result = v6;
      v6[1] = result;
      *int8x16_t v4 = result;
      v4[2] = v5;
      uint64_t v3 = *(void *)(v3 + 8);
      ++v5;
      unint64_t v6 = result;
    }
    while (v3 != v2);
  }
  return result;
}

void sub_18E12C834(_Unwind_Exception *a1)
{
  sub_18E068ED0(v1);
  _Unwind_Resume(a1);
}

void sub_18E12C848(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  int8x16_t v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 192);
  *(void *)(a1 + 184) = v3;
  *(void *)(a1 + 192) = v4;
  if (v5) {
    sub_18DEE4E18(v5);
  }
  if (v4) {
    sub_18DEE4E18(v4);
  }
  *(int64x2_t *)(a1 + 168) = vdupq_n_s64(0x7FF8000000000000uLL);
  if (*(unsigned char *)(a1 + 24)) {
    *(unsigned char *)(a1 + 24) = 0;
  }
  if (*(unsigned char *)(a1 + 160))
  {
    *(void *)(a1 + 32) = &unk_1EDD0B188;
    *(void *)(a1 + 48) = &unk_1EDD17478;
    *(unsigned char *)(a1 + 160) = 0;
  }
}

void *sub_18E12C900(void *a1)
{
  *a1 = &unk_1EDD12560;
  a1[7] = &unk_1EDD12418;
  sub_18E12EB68((uint64_t)(a1 + 10));
  uint64_t v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_18E12C978(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    int8x16_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        unint64_t v6 = v4 - 56;
        sub_18E12CA04((uint64_t)(v4 - 24), *((void **)v4 - 2));
        int8x16_t v4 = v6;
      }
      while (v6 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_18E12CA04(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_18E12CA04(a1, *a2);
    sub_18E12CA04(a1, a2[1]);
    sub_18E12CA60((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_18E12CA60(uint64_t a1)
{
  *(void *)(a1 + 200) = &unk_1EDD17478;
  *(void *)(a1 + 136) = &unk_1EDD17478;
  sub_18E068ED0((void *)(a1 + 80));
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

uint64_t sub_18E12CAF0(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 192);
  if (v2) {
    sub_18DEE4E18(v2);
  }
  if (*(unsigned char *)(a1 + 160))
  {
    *(void *)(a1 + 32) = &unk_1EDD0B188;
    *(void *)(a1 + 48) = &unk_1EDD17478;
  }
  return a1;
}

void sub_18E12CB68(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDD1E688;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_18E12CB88(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDD1E688;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E12CBE4(uint64_t result)
{
  *(int64x2_t *)(result + 168) = vdupq_n_s64(0x7FF8000000000000uLL);
  if (*(unsigned char *)(result + 24)) {
    *(unsigned char *)(result + 24) = 0;
  }
  if (*(unsigned char *)(result + 160))
  {
    *(void *)(result + 32) = &unk_1EDD0B188;
    *(void *)(result + 48) = &unk_1EDD17478;
    *(unsigned char *)(result + 160) = 0;
  }
  return result;
}

uint64_t sub_18E12CC4C(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 128))
  {
    *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
    sub_18DFE2F24(a1 + 16, a2 + 16);
  }
  else
  {
    *(void *)a1 = &unk_1EDD0B188;
    *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
    sub_18DFE2FA8(a1 + 16, a2 + 16);
    *(void *)a1 = &unk_1EDD0AB68;
    *(unsigned char *)(a1 + 128) = 1;
  }
  return a1;
}

void sub_18E12CCE4(uint64_t a1)
{
  *(void *)a1 = &unk_1EDD0A180;
  sub_18DF064FC(*(void **)(a1 + 48));

  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E12CD4C(uint64_t result)
{
  if (*(unsigned char *)(result + 16)) {
    *(unsigned char *)(result + 16) = 0;
  }
  if (*(unsigned char *)(result + 32)) {
    *(unsigned char *)(result + 32) = 0;
  }
  return result;
}

uint64_t sub_18E12CD68(uint64_t result)
{
  if (*(unsigned char *)(result + 16)) {
    *(unsigned char *)(result + 16) = 0;
  }
  if (*(unsigned char *)(result + 32)) {
    *(unsigned char *)(result + 32) = 0;
  }
  return result;
}

uint64_t sub_18E12CD84(uint64_t result)
{
  if (*(unsigned char *)(result + 16)) {
    *(unsigned char *)(result + 16) = 0;
  }
  if (*(unsigned char *)(result + 32)) {
    *(unsigned char *)(result + 32) = 0;
  }
  return result;
}

uint64_t sub_18E12CDA0(uint64_t result)
{
  if (*(unsigned char *)(result + 16)) {
    *(unsigned char *)(result + 16) = 0;
  }
  if (*(unsigned char *)(result + 32)) {
    *(unsigned char *)(result + 32) = 0;
  }
  return result;
}

uint64_t sub_18E12CDBC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 8) = *(void *)(a2 + 88);
  *(unsigned char *)(result + 16) = 1;
  uint64_t v2 = *(void *)(a2 + 96);
  if (v2)
  {
    *(void *)(result + 24) = v2;
    *(unsigned char *)(result + 32) = 1;
  }
  else if (*(unsigned char *)(result + 32))
  {
    *(unsigned char *)(result + 32) = 0;
  }
  return result;
}

void sub_18E12CDF0(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    uint64_t v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        uint64_t v5 = (uint64_t *)v3[1];
        sub_18E068ED0(v3 + 8);
        operator delete(v3);
        uint64_t v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

void sub_18E12CE64(float64x2_t **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v129 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    unint64_t v4 = (unint64_t)a1[8];
    if (v4 < *((unsigned int *)a1 + 18))
    {
      uint64_t v6 = a2;
      uint64_t v7 = (uint64_t *)(a1 + 6);
      uint64_t v8 = (float64x2_t *)operator new(0x18uLL);
      *(void *)&v8->f64[1] = v7;
      *(void *)&v8[1].f64[0] = v6;
      unint64_t v9 = a1[6];
      *(void *)&v8->f64[0] = v9;
      *(void *)&v9->f64[1] = v8;
      a1[6] = v8;
      a1[8] = (float64x2_t *)(v4 + 1);
      LOBYTE(v99.f64[0]) = 0;
      char v105 = 0;
      a1[11] = a1[10];
      (*(void (**)(float64x2_t **__return_ptr))(**(void **)&v8[1].f64[0] + 96))(&v127);
      uint64_t v10 = v127;
      __asm { FMOV            V2.2D, #0.5 }
      float64x2_t v16 = vsubq_f64(vmulq_f64(vaddq_f64(*v10, v10[3]), _Q2), *(float64x2_t *)(a1 + 13));
      double v17 = (v10[1].f64[0] + v10[4].f64[0]) * 0.5 - *((double *)a1 + 15);
      double v18 = sqrt(vmlad_n_f64(COERCE_DOUBLE(*(void *)&vmulq_f64(v16, v16).f64[1]), v16.f64[0], v16.f64[0]) + v17 * v17);
      if (fabs(v18) >= 2.22044605e-16)
      {
        double v95 = 1.0 / v18;
        float64x2_t v97 = vmulq_n_f64(v16, 1.0 / v18);
        float64x2_t v19 = vnegq_f64(v97);
        double v20 = -(v17 * (1.0 / v18));
        double v22 = a1[11];
        unint64_t v21 = (unint64_t)a1[12];
        if ((unint64_t)v22 >= v21)
        {
          float64x2_t v93 = v19;
          double v24 = a1[10];
          unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * (((char *)v22 - (char *)v24) >> 3);
          unint64_t v26 = v25 + 1;
          if (v25 + 1 > 0xAAAAAAAAAAAAAAALL) {
            sub_18DEE1FC8();
          }
          unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21 - (void)v24) >> 3);
          if (2 * v27 > v26) {
            unint64_t v26 = 2 * v27;
          }
          if (v27 >= 0x555555555555555) {
            unint64_t v28 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v28 = v26;
          }
          if (v28) {
            unint64_t v28 = (unint64_t)sub_18E12E008(v28);
          }
          else {
            uint64_t v29 = 0;
          }
          unint64_t v30 = v28 + 24 * v25;
          unint64_t v31 = v28 + 24 * v29;
          *(float64x2_t *)unint64_t v30 = v93;
          *(double *)(v30 + 16) = v20;
          uint64_t v23 = (double *)(v30 + 24);
          long long v33 = (char *)a1[10];
          long long v32 = a1[11];
          if (v32 != (float64x2_t *)v33)
          {
            do
            {
              long long v34 = *(long long *)((char *)&v32[-2] + 8);
              *(float64_t *)(v30 - 8) = v32[-1].f64[1];
              *(_OWORD *)(v30 - 24) = v34;
              v30 -= 24;
              long long v32 = (float64x2_t *)((char *)v32 - 24);
            }
            while (v32 != (float64x2_t *)v33);
            long long v32 = a1[10];
          }
          a1[10] = (float64x2_t *)v30;
          a1[11] = (float64x2_t *)v23;
          a1[12] = (float64x2_t *)v31;
          if (v32) {
            operator delete(v32);
          }
        }
        else
        {
          *double v22 = v19;
          v22[1].f64[0] = v20;
          uint64_t v23 = &v22[1].f64[1];
        }
        uint64_t v92 = v6;
        a1[11] = (float64x2_t *)v23;
        __n128 v35 = (__n128)v97;
        if (v7 == (uint64_t *)a1[7])
        {
          long long v38 = (uint64_t *)(a1 + 6);
LABEL_43:
          float64x2_t v125 = *(float64x2_t *)(a1 + 3);
          *(void *)long long v126 = a1[5];
          uint64_t v59 = *((void *)v23 - 1);
          *(_OWORD *)&char v126[8] = *(_OWORD *)(v23 - 3);
          *(void *)&v126[24] = v59;
          float64x2_t v119 = v125;
          float64x2_t v120 = *(float64x2_t *)v126;
          float64x2_t v121 = *(float64x2_t *)&v126[16];
          f64 = &f64;
          uint64_t v123 = &f64;
          uint64_t v124 = 0;
          if (v38 == v7)
          {
LABEL_49:
            float64x2_t v114 = v125;
            long long v115 = *(_OWORD *)v126;
            long long v116 = *(_OWORD *)&v126[16];
            v113[0] = &unk_1EDD123D0;
            v113[1] = a3;
            int v117 = 0;
            char v118 = 0;
            (*(void (**)(uint64_t, void *))(*(void *)a3 + 16))(a3, v113);
            if (!v118)
            {
              float64x2_t v106 = v119;
              float64x2_t v107 = v120;
              float64x2_t v108 = v121;
              uint64_t v109 = &v109;
              long long v110 = &v109;
              uint64_t v111 = 0;
              uint64_t v77 = v124;
              if (v124)
              {
                uint64_t v78 = &v111;
                long long v80 = f64;
                uint64_t v79 = v123;
                uint64_t v81 = *v123;
                *(void *)(v81 + 8) = f64[1];
                *(void *)v80[1] = v81;
                uint64_t v82 = v109;
                v109[1] = v79;
                *uint64_t v79 = v82;
                uint64_t v109 = v80;
                v80[1] = &v109;
                uint64_t v124 = 0;
                char v112 = 1;
                float64x2_t v99 = v106;
                float64x2_t v100 = v107;
                float64x2_t v101 = v108;
                uint64_t v102 = &v102;
                uint64_t v103 = &v102;
                unint64_t v83 = v110;
                uint64_t v84 = *v110;
                *(void *)(v84 + 8) = v80[1];
                *(void *)v80[1] = v84;
                unint64_t v85 = v102;
                v102[1] = v83;
                *unint64_t v83 = v85;
                uint64_t v102 = v80;
                v80[1] = &v102;
                uint64_t v104 = v77;
              }
              else
              {
                char v112 = 1;
                float64x2_t v99 = v119;
                float64x2_t v100 = v120;
                float64x2_t v101 = v121;
                uint64_t v102 = &v102;
                uint64_t v103 = &v102;
                uint64_t v78 = &v104;
              }
              *uint64_t v78 = 0;
              char v105 = 1;
              sub_18E068ED0(&v109);
            }
          }
          else
          {
            double v60 = v23 - 6;
            while (1)
            {
              double v61 = COERCE_DOUBLE((*(uint64_t (**)(uint64_t, float64x2_t *, void))(*(void *)v38[2] + 104))(v38[2], &v125, 0));
              if (!v62) {
                break;
              }
              double v63 = v61;
              uint64_t v64 = v38[1];
              double v65 = v61;
              float64x2_t v66 = *(float64x2_t *)&v126[8];
              float64x2_t v67 = v125;
              double v68 = *(double *)&v126[24] * v61 + *(double *)v126;
              if ((uint64_t *)v64 != v7)
              {
                float64x2_t v94 = v125;
                float64x2_t v96 = *(float64x2_t *)&v126[8];
                double v98 = v61;
                double v69 = (*(double (**)(void))(**(void **)(v64 + 16) + 56))(*(void *)(v64 + 16));
                float64x2_t v66 = v96;
                double v65 = v98;
                float64x2_t v67 = v94;
                if (v68 > v69) {
                  break;
                }
              }
              uint64_t v70 = *((void *)v60 + 2);
              long long v71 = *(_OWORD *)v60;
              float64x2_t v125 = vaddq_f64(vmulq_n_f64(v66, v65), v67);
              *(double *)long long v126 = v68;
              *(_OWORD *)&char v126[8] = v71;
              *(void *)&v126[24] = v70;
              float64_t v72 = *((double *)v38 + 2);
              uint64_t v73 = (float64x2_t *)operator new(0x50uLL);
              v73[1].f64[0] = v72;
              v73[1].f64[1] = v63;
              float64x2_t v74 = *(float64x2_t *)&v126[16];
              float64x2_t v75 = v125;
              v73[3] = *(float64x2_t *)v126;
              v73[4] = v74;
              v73[2] = v75;
              uint64_t v76 = f64;
              *(void *)&v73->f64[0] = f64;
              *(void *)&v73->f64[1] = &f64;
              v76[1] = v73;
              f64 = (void *)v73->f64;
              ++v124;
              long long v38 = (uint64_t *)v38[1];
              v60 -= 3;
              if (v38 == v7) {
                goto LABEL_49;
              }
            }
          }
          sub_18E068ED0(&f64);
        }
        else
        {
          double v36 = v17 * v95;
          double v37 = v97.f64[1];
          long long v38 = (uint64_t *)(a1 + 6);
          while (1)
          {
            v35.n128_f64[0] = (*(double (**)(void, __n128))(**(void **)(*v38 + 16) + 88))(*(void *)(*v38 + 16), v35);
            v41.f64[1] = v97.f64[1];
            double v42 = v37 * v39 + v97.f64[0] * v35.n128_f64[0] + v36 * v40;
            if (v42 > 0.0) {
              break;
            }
            double v43 = v42 + v42;
            v35.n128_f64[0] = v35.n128_f64[0] * v43;
            v41.f64[0] = v97.f64[0] - v35.n128_f64[0];
            double v37 = v37 - v39 * v43;
            double v36 = v36 - v40 * v43;
            float64x2_t v97 = v41;
            double v44 = -v41.f64[0];
            double v45 = -v37;
            double v46 = -v36;
            uint64_t v48 = (double *)a1[11];
            unint64_t v47 = (unint64_t)a1[12];
            if ((unint64_t)v48 >= v47)
            {
              double v49 = a1[10];
              unint64_t v50 = 0xAAAAAAAAAAAAAAABLL * (((char *)v48 - (char *)v49) >> 3);
              unint64_t v51 = v50 + 1;
              if (v50 + 1 > 0xAAAAAAAAAAAAAAALL) {
                sub_18DEE1FC8();
              }
              unint64_t v52 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v47 - (void)v49) >> 3);
              if (2 * v52 > v51) {
                unint64_t v51 = 2 * v52;
              }
              if (v52 >= 0x555555555555555) {
                unint64_t v53 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v53 = v51;
              }
              if (v53) {
                unint64_t v53 = (unint64_t)sub_18E12E008(v53);
              }
              else {
                uint64_t v54 = 0;
              }
              double v55 = (double *)(v53 + 24 * v50);
              *double v55 = v44;
              v55[1] = v45;
              void v55[2] = v46;
              uint64_t v57 = (double *)a1[10];
              long long v56 = (double *)a1[11];
              __n128 v58 = v55;
              if (v56 != v57)
              {
                do
                {
                  __n128 v35 = *(__n128 *)(v56 - 3);
                  *(v58 - 1) = *(v56 - 1);
                  *(__n128 *)(v58 - 3) = v35;
                  v58 -= 3;
                  v56 -= 3;
                }
                while (v56 != v57);
                long long v56 = (double *)a1[10];
              }
              uint64_t v23 = v55 + 3;
              a1[10] = (float64x2_t *)v58;
              a1[11] = (float64x2_t *)(v55 + 3);
              a1[12] = (float64x2_t *)(v53 + 24 * v54);
              if (v56) {
                operator delete(v56);
              }
            }
            else
            {
              *uint64_t v48 = v44;
              v48[1] = v45;
              uint64_t v23 = v48 + 3;
              v48[2] = v46;
            }
            a1[11] = (float64x2_t *)v23;
            long long v38 = (uint64_t *)*v38;
            if (v38 == (uint64_t *)a1[7]) {
              goto LABEL_43;
            }
          }
        }
        if (v127)
        {
          uint64_t v128 = v127;
          operator delete(v127);
        }
        uint64_t v6 = v92;
      }
      else
      {
        uint64_t v128 = v127;
        operator delete(v127);
      }
      if (v105)
      {
        uint64_t v86 = (float64x2_t *)operator new(0x58uLL);
        v86->f64[0] = 0.0;
        v86->f64[1] = 0.0;
        v86[1] = v99;
        v86[2] = v100;
        v86[3] = v101;
        sub_18E12D6D0((float64x2_t *)v86[4].f64, (uint64_t)&v102);
        double v87 = *(double *)a1;
        *(void *)&v86->f64[0] = *a1;
        *(void *)&v86->f64[1] = a1;
        *(void *)(*(void *)&v87 + 8) = v86;
        *a1 = v86;
        a1[2] = (float64x2_t *)((char *)a1[2] + 1);
      }
      unint64_t v88 = (unint64_t)a1[8];
      if (v88 < *((unsigned int *)a1 + 18))
      {
        for (unint64_t i = (void *)(v6 + 40); ; sub_18E12CE64(a1, i[2], a3))
        {
          unint64_t i = (void *)*i;
          if (!i) {
            break;
          }
        }
        unint64_t v88 = (unint64_t)a1[8];
      }
      uint64_t v90 = (uint64_t *)a1[6];
      uint64_t v91 = *v90;
      *(void *)(v91 + 8) = v90[1];
      *(void *)v90[1] = v91;
      a1[8] = (float64x2_t *)(v88 - 1);
      operator delete(v90);
      if (v105) {
        sub_18E068ED0(&v102);
      }
    }
  }
}

void sub_18E12D608(_Unwind_Exception *a1)
{
  sub_18E068ED0(v1);
  unint64_t v4 = *(void **)(v2 - 200);
  if (v4)
  {
    *(void *)(v2 - 192) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_18E12D688(uint64_t result, uint64_t *a2, void *a3)
{
  uint64_t v3 = a3[2];
  if (v3)
  {
    uint64_t v5 = *a3;
    unint64_t v4 = (uint64_t *)a3[1];
    uint64_t v6 = *v4;
    *(void *)(v6 + 8) = *(void *)(*a3 + 8);
    **(void **)(v5 + 8) = v6;
    uint64_t v7 = *a2;
    *(void *)(v7 + 8) = v4;
    *unint64_t v4 = v7;
    *a2 = v5;
    *(void *)(v5 + 8) = a2;
    *(void *)(result + 16) += v3;
    a3[2] = 0;
  }
  return result;
}

void *sub_18E12D6D0(void *a1, uint64_t a2)
{
  *a1 = a1;
  a1[1] = a1;
  a1[2] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 != a2)
  {
    uint64_t v5 = 1;
    uint64_t v6 = a1;
    do
    {
      uint64_t v7 = operator new(0x50uLL);
      long long v8 = *(_OWORD *)(v3 + 16);
      long long v9 = *(_OWORD *)(v3 + 32);
      long long v10 = *(_OWORD *)(v3 + 64);
      v7[3] = *(_OWORD *)(v3 + 48);
      unsigned char v7[4] = v10;
      v7[1] = v8;
      v7[2] = v9;
      *(void *)uint64_t v7 = v6;
      *((void *)v7 + 1) = a1;
      *((void *)v6 + 1) = v7;
      *a1 = v7;
      a1[2] = v5;
      uint64_t v3 = *(void *)(v3 + 8);
      ++v5;
      uint64_t v6 = v7;
    }
    while (v3 != a2);
  }
  return a1;
}

void sub_18E12D760(_Unwind_Exception *a1)
{
  sub_18E068ED0(v1);
  _Unwind_Resume(a1);
}

void sub_18E12D774(uint64_t a1, long long *a2)
{
  if (*(unsigned __int8 *)(a1 + 232) == *((unsigned __int8 *)a2 + 232))
  {
    if (*(unsigned char *)(a1 + 232))
    {
      long long v4 = *a2;
      long long v5 = a2[2];
      *(_OWORD *)(a1 + 16) = a2[1];
      *(_OWORD *)(a1 + 32) = v5;
      *(_OWORD *)a1 = v4;
      sub_18E068ED0((void *)(a1 + 48));
      sub_18E12D688(a1 + 48, (uint64_t *)(a1 + 48), (void *)a2 + 6);
      long long v6 = *(long long *)((char *)a2 + 72);
      *(_OWORD *)(a1 + 88) = *(long long *)((char *)a2 + 88);
      *(_OWORD *)(a1 + 72) = v6;
      sub_18DFE2F24(a1 + 104, (uint64_t)a2 + 104);
      sub_18DFE2F24(a1 + 168, (uint64_t)a2 + 168);
    }
  }
  else if (*(unsigned char *)(a1 + 232))
  {
    *(void *)(a1 + 168) = &unk_1EDD17478;
    *(void *)(a1 + 104) = &unk_1EDD17478;
    sub_18E068ED0((void *)(a1 + 48));
    *(unsigned char *)(a1 + 232) = 0;
  }
  else
  {
    long long v7 = *a2;
    long long v8 = a2[2];
    *(_OWORD *)(a1 + 16) = a2[1];
    *(_OWORD *)(a1 + 32) = v8;
    *(_OWORD *)a1 = v7;
    *(void *)(a1 + 48) = a1 + 48;
    *(void *)(a1 + 56) = a1 + 48;
    *(void *)(a1 + 64) = 0;
    sub_18E12D688(a1 + 48, (uint64_t *)(a1 + 48), (void *)a2 + 6);
    long long v9 = *(long long *)((char *)a2 + 72);
    *(_OWORD *)(a1 + 88) = *(long long *)((char *)a2 + 88);
    *(_OWORD *)(a1 + 72) = v9;
    sub_18E12D914(a1 + 104, (uint64_t)a2 + 104);
    sub_18E12D914(a1 + 168, (uint64_t)a2 + 168);
    *(unsigned char *)(a1 + 232) = 1;
  }
}

void sub_18E12D8DC(_Unwind_Exception *a1)
{
  *uint64_t v2 = &unk_1EDD17478;
  sub_18E068ED0(v1);
  _Unwind_Resume(a1);
}

__n128 sub_18E12D914(uint64_t a1, uint64_t a2)
{
  result.n128_u64[0] = 0x300000001;
  *(void *)(a1 + 24) = 0x300000001;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1EDD18228;
  if (a1 == a2)
  {
    double v17 = "this != &(A)";
    int v18 = 603;
    goto LABEL_16;
  }
  int v3 = *(_DWORD *)(a2 + 8);
  int v4 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = v4;
  uint64_t v5 = (v4 * v3);
  *(_DWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 20) = v3;
  long long v6 = (unint64_t *)(a1 + 40);
  *(void *)(a1 + 32) = a1 + 40;
  if (*(_DWORD *)(a2 + 8) > 1u)
  {
    double v17 = "this->max_num_rows_ >= A.num_rows_";
    int v18 = 616;
    goto LABEL_16;
  }
  if (*(_DWORD *)(a2 + 12) >= 4u)
  {
    double v17 = "this->max_num_cols_ >= A.num_cols_";
    int v18 = 617;
LABEL_16:
    __assert_rtn("CNMatrix", "cnmatrix.h", v18, v17);
  }
  int v7 = *(_DWORD *)(a2 + 16);
  if (v7 > 3)
  {
    uint64_t v10 = (v7 - 2);
    unint64_t v11 = *(long long **)(a2 + 32);
    uint64_t v12 = (v7 - 1) >> 1;
    uint64_t v13 = v11;
    double v14 = (_OWORD *)(a1 + 40);
    do
    {
      long long v15 = *v13++;
      *v14++ = v15;
      --v12;
    }
    while (v12);
    uint64_t v16 = v10;
    __n128 result = *(__n128 *)((char *)v11 + v16 * 8);
    *(__n128 *)&v6[v16] = result;
  }
  else if ((int)v5 >= 1)
  {
    long long v8 = *(unint64_t **)(a2 + 32);
    do
    {
      unint64_t v9 = *v8++;
      result.n128_u64[0] = v9;
      *v6++ = v9;
      --v5;
    }
    while (v5);
  }
  return result;
}

void sub_18E12DA44(_Unwind_Exception *a1)
{
  void *v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

void sub_18E12DA68()
{
}

void sub_18E12DA7C(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a2 + 24))(&v6, a2);
  if (sub_18E12DCD4((double *)&v6, (double *)(a1 + 16)))
  {
    sub_18E12DE58(a2, &v6);
    uint64_t v4 = v6;
    (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
    while (((*(uint64_t (**)(uint64_t))(*(void *)v4 + 32))(v4) & 1) == 0)
    {
      uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 16))(v5, a1);
      if (*(unsigned char *)(a1 + 68)) {
        break;
      }
      (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
    }
    if (v7) {
      sub_18DEE4E18(v7);
    }
  }
  else
  {
    *(unsigned char *)(a1 + 68) = 0;
  }
}

void sub_18E12DBE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_18DEE4E18(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_18E12DC00(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 112))(a2, a1 + 16, *(unsigned int *)(a1 + 64));
  *(unsigned char *)(a1 + 68) = result;
  return result;
}

uint64_t sub_18E12DC58(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 112))(a2, a1 + 16, *(unsigned int *)(a1 + 64));
  *(unsigned char *)(a1 + 68) = result;
  return result;
}

uint64_t sub_18E12DCB0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

BOOL sub_18E12DCD4(double *a1, double *a2)
{
  double v2 = a2[3];
  double v3 = *a2;
  if (*a2 >= a1[3] && v3 <= *a1)
  {
    double v4 = a2[1];
    if (v4 >= a1[4] && v4 <= a1[1])
    {
      double v5 = a2[2];
      if (v5 >= a1[5] && v5 <= a1[2]) {
        return 1;
      }
    }
  }
  double v6 = 1.0 / v2;
  if (1.0 / v2 >= 0.0) {
    double v7 = a1[3];
  }
  else {
    double v7 = *a1;
  }
  if (1.0 / v2 >= 0.0) {
    double v8 = *a1;
  }
  else {
    double v8 = a1[3];
  }
  double v9 = v6 * (v8 - v3);
  double v10 = v6 * (v7 - v3);
  if (v10 < 0.0 && v9 < 0.0) {
    return 0;
  }
  double v11 = 1.0 / a2[4];
  double v12 = a2[1];
  uint64_t v13 = 1;
  if (v11 >= 0.0) {
    uint64_t v14 = 1;
  }
  else {
    uint64_t v14 = 4;
  }
  if (v11 >= 0.0) {
    uint64_t v13 = 4;
  }
  double v15 = a1[v13] - v12;
  double v16 = v11 * (a1[v14] - v12);
  double v17 = v11 * v15;
  if (v17 < 0.0 && v16 < 0.0) {
    return 0;
  }
  if (v10 > v16 || v17 > v9) {
    return 0;
  }
  double v19 = 1.0 / a2[5];
  if (v17 <= v10) {
    double v20 = v10;
  }
  else {
    double v20 = v17;
  }
  if (v16 >= v9) {
    double v16 = v9;
  }
  double v21 = a2[2];
  uint64_t v22 = 2;
  if (v19 >= 0.0) {
    uint64_t v23 = 2;
  }
  else {
    uint64_t v23 = 5;
  }
  if (v19 >= 0.0) {
    uint64_t v22 = 5;
  }
  double v24 = a1[v22] - v21;
  double v25 = v19 * (a1[v23] - v21);
  double v26 = v19 * v24;
  if (v26 < 0.0 && v25 < 0.0) {
    return 0;
  }
  if (v20 > v25 || v26 > v16) {
    return 0;
  }
  if (v26 > v20) {
    double v20 = v26;
  }
  if (v25 < v16) {
    double v16 = v25;
  }
  return v16 >= 0.0 || v20 >= 0.0;
}

void sub_18E12DE58(uint64_t a1@<X0>, void *a2@<X8>)
{
  long long v4 = (unint64_t)(a1 + 16);
  double v3 = (std::__shared_weak_count *)operator new(0x30uLL);
  v3->__shared_owners_ = 0;
  v3->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDD1E538;
  v3->__shared_weak_owners_ = 0;
  v3[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDD12228;
  *(_OWORD *)&v3[1].__shared_owners_ = v4;
  *a2 = v3 + 1;
  a2[1] = v3;
  atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  sub_18DEE4E18(v3);
}

void sub_18E12DF10(uint64_t a1@<X0>, void *a2@<X8>)
{
}

void sub_18E12DF18(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDD1E538;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_18E12DF38(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDD1E538;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E12DF8C(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_18E12DFB4()
{
}

uint64_t sub_18E12DFC8(uint64_t result)
{
  *(void *)(result + 16) = **(void **)(result + 8);
  return result;
}

uint64_t sub_18E12DFD8(uint64_t result)
{
  *(void *)(result + 16) += 8;
  return result;
}

BOOL sub_18E12DFE8(uint64_t a1)
{
  return *(void *)(a1 + 16) == *(void *)(*(void *)(a1 + 8) + 8);
}

uint64_t sub_18E12DFFC(uint64_t a1)
{
  return **(void **)(a1 + 16);
}

void *sub_18E12E008(unint64_t a1)
{
  if (a1 >= 0xAAAAAAAAAAAAAABLL) {
    sub_18DEDF7D4();
  }
  return operator new(24 * a1);
}

void *sub_18E12E050(unint64_t a1)
{
  if (a1 >> 60) {
    sub_18DEDF7D4();
  }
  return operator new(16 * a1);
}

uint64_t sub_18E12E088(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    long long v4 = *(void (***)(void))(i - 72);
    *(void *)(a1 + 16) = i - 72;
    (*v4)();
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_18E12E0F4(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    long long v4 = *(void (***)(void))(i - 56);
    *(void *)(a1 + 16) = i - 56;
    (*v4)();
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_18E12E160(uint64_t a1, long long *a2, uint64_t a3)
{
  long long v5 = *a2;
  long long v6 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)a1 = v5;
  sub_18E12D6D0((void *)(a1 + 48), (uint64_t)(a2 + 3));
  uint64_t v7 = *(void *)(a3 + 16);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)a3;
  *(void *)(a1 + 88) = v7;
  *(void *)(a1 + 96) = 0x7FF8000000000000;
  *(void *)(a1 + 128) = 0x300000001;
  *(void *)(a1 + 104) = &unk_1EDD18228;
  *(_OWORD *)(a1 + 112) = xmmword_18E1F8560;
  *(void *)(a1 + 136) = a1 + 144;
  *(void *)(a1 + 192) = 0x300000001;
  *(void *)(a1 + 168) = &unk_1EDD18228;
  *(_OWORD *)(a1 + 176) = xmmword_18E1F8560;
  *(void *)(a1 + 200) = a1 + 208;
  return a1;
}

void sub_18E12E224(void ***a1)
{
  uint64_t v1 = *a1;
  double v2 = (char *)**a1;
  if (v2)
  {
    long long v4 = (char *)v1[1];
    long long v5 = **a1;
    if (v4 != v2)
    {
      long long v6 = v4 - 72;
      uint64_t v7 = v4 - 72;
      double v8 = v4 - 72;
      do
      {
        double v9 = *(void (***)(char *))v8;
        v8 -= 72;
        (*v9)(v7);
        v6 -= 72;
        BOOL v10 = v7 == v2;
        uint64_t v7 = v8;
      }
      while (!v10);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_18E12E2E4(void ***a1)
{
  uint64_t v1 = *a1;
  double v2 = (char *)**a1;
  if (v2)
  {
    long long v4 = (char *)v1[1];
    long long v5 = **a1;
    if (v4 != v2)
    {
      long long v6 = v4 - 56;
      uint64_t v7 = v4 - 56;
      double v8 = v4 - 56;
      do
      {
        double v9 = *(void (***)(char *))v8;
        v8 -= 56;
        (*v9)(v7);
        v6 -= 56;
        BOOL v10 = v7 == v2;
        uint64_t v7 = v8;
      }
      while (!v10);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *sub_18E12E3A4(void *a1, uint64_t a2)
{
  *a1 = a1;
  a1[1] = a1;
  a1[2] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 != a2)
  {
    uint64_t v5 = 1;
    long long v6 = a1;
    do
    {
      uint64_t v7 = operator new(0x18uLL);
      uint64_t v8 = *(void *)(v3 + 16);
      v7[1] = a1;
      v7[2] = v8;
      *uint64_t v7 = v6;
      v6[1] = v7;
      *a1 = v7;
      a1[2] = v5;
      uint64_t v3 = *(void *)(v3 + 8);
      ++v5;
      long long v6 = v7;
    }
    while (v3 != a2);
  }
  return a1;
}

void sub_18E12E42C(_Unwind_Exception *a1)
{
  sub_18E068ED0(v1);
  _Unwind_Resume(a1);
}

void sub_18E12E440(void *a1)
{
  *a1 = &unk_1EDD12560;
  a1[7] = &unk_1EDD12418;
  sub_18E12EB68((uint64_t)(a1 + 10));
  double v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }

  JUMPOUT(0x192FA6240);
}

void sub_18E12E4D8(uint64_t a1, void *a2)
{
  sub_18E12F5A4(a1);
  if (!*(unsigned char *)(a1 + 48))
  {
    (*(void (**)(double *__return_ptr, void *))(*a2 + 24))(v8, a2);
    double v5 = *(double *)(a1 + 8);
    double v4 = *(double *)(a1 + 16);
    BOOL v7 = v5 < v8[3] || v5 > v8[0] || v4 < v8[4];
    if (v7 || v4 > v8[1]) {
      sub_18E12F4CC((void *)(a1 + 56));
    }
    else {
      sub_18E12F808((void **)(a1 + 24), ((uint64_t)(a2[3] - a2[2]) >> 3) + 1);
    }
  }
}

void sub_18E12E58C(void *a1, uint64_t a2)
{
  uint64_t v3 = *(uint64_t **)(a2 + 16);
  uint64_t v5 = *v3;
  uint64_t v4 = v3[1];
  unint64_t v8 = a1[5];
  uint64_t v6 = (uint64_t)(a1 + 5);
  unint64_t v7 = v8;
  double v9 = *(void **)(v6 - 8);
  if ((unint64_t)v9 >= v8)
  {
    double v11 = (void **)(v6 - 16);
    uint64_t v12 = *(void *)(v6 - 16);
    uint64_t v13 = ((uint64_t)v9 - v12) >> 4;
    unint64_t v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 60) {
      sub_18DEE1FC8();
    }
    uint64_t v15 = v7 - v12;
    if (v15 >> 3 > v14) {
      unint64_t v14 = v15 >> 3;
    }
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v16 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v16 = v14;
    }
    if (v16) {
      double v17 = (char *)sub_18DFF7B64(v6, v16);
    }
    else {
      double v17 = 0;
    }
    int v18 = &v17[16 * v13];
    double v19 = &v17[16 * v16];
    *(void *)int v18 = v5;
    *((void *)v18 + 1) = v4;
    BOOL v10 = v18 + 16;
    double v21 = (char *)a1[3];
    double v20 = (char *)a1[4];
    if (v20 != v21)
    {
      do
      {
        *((_OWORD *)v18 - 1) = *((_OWORD *)v20 - 1);
        v18 -= 16;
        v20 -= 16;
      }
      while (v20 != v21);
      double v20 = (char *)*v11;
    }
    a1[3] = v18;
    a1[4] = v10;
    a1[5] = v19;
    if (v20) {
      operator delete(v20);
    }
  }
  else
  {
    *double v9 = v5;
    v9[1] = v4;
    BOOL v10 = v9 + 2;
  }
  a1[4] = v10;
}

void sub_18E12E684(void *a1, uint64_t a2)
{
  uint64_t v3 = *(uint64_t **)(a2 + 16);
  uint64_t v5 = *v3;
  uint64_t v4 = v3[1];
  unint64_t v8 = a1[5];
  uint64_t v6 = (uint64_t)(a1 + 5);
  unint64_t v7 = v8;
  double v9 = *(void **)(v6 - 8);
  if ((unint64_t)v9 >= v8)
  {
    double v11 = (void **)(v6 - 16);
    uint64_t v12 = *(void *)(v6 - 16);
    uint64_t v13 = ((uint64_t)v9 - v12) >> 4;
    unint64_t v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 60) {
      sub_18DEE1FC8();
    }
    uint64_t v15 = v7 - v12;
    if (v15 >> 3 > v14) {
      unint64_t v14 = v15 >> 3;
    }
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v16 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v16 = v14;
    }
    if (v16) {
      double v17 = (char *)sub_18DFF7B64(v6, v16);
    }
    else {
      double v17 = 0;
    }
    int v18 = &v17[16 * v13];
    double v19 = &v17[16 * v16];
    *(void *)int v18 = v5;
    *((void *)v18 + 1) = v4;
    BOOL v10 = v18 + 16;
    double v21 = (char *)a1[3];
    double v20 = (char *)a1[4];
    if (v20 != v21)
    {
      do
      {
        *((_OWORD *)v18 - 1) = *((_OWORD *)v20 - 1);
        v18 -= 16;
        v20 -= 16;
      }
      while (v20 != v21);
      double v20 = (char *)*v11;
    }
    a1[3] = v18;
    a1[4] = v10;
    a1[5] = v19;
    if (v20) {
      operator delete(v20);
    }
  }
  else
  {
    *double v9 = v5;
    v9[1] = v4;
    BOOL v10 = v9 + 2;
  }
  a1[4] = v10;
}

uint64_t sub_18E12E77C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

void *sub_18E12E7A0(void *a1)
{
  *a1 = &unk_1EDD12418;
  sub_18E12EB68((uint64_t)(a1 + 3));
  return a1;
}

void sub_18E12E7E4(void *a1)
{
  *a1 = &unk_1EDD12418;
  sub_18E12EB68((uint64_t)(a1 + 3));

  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E12E848(void *a1)
{
  a1[2] = a1[1];
  memset(&v6, 0, 48);
  double v2 = a1 + 3;
  sub_18E12ECC0(a1 + 3, (uint64_t)&v6);
  sub_18E12EB68((uint64_t)&v6);
  uint64_t result = a1[2];
  if (result && a1[9])
  {
    (*(void (**)(__n128 *__return_ptr))(*(void *)(result + 8) + 16))(&v6);
    __n128 v4 = sub_18E12EFD4(v2, &v6);
    if (v6.n128_u64[1]) {
      sub_18DEE4E18((std::__shared_weak_count *)v6.n128_u64[1]);
    }
    uint64_t v5 = *(void *)(*(void *)(a1[4] + (((unint64_t)(a1[8] + a1[7] - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                   + 16 * (*((unsigned char *)a1 + 64) + *((unsigned char *)a1 + 56) - 1));
    return (*(uint64_t (**)(uint64_t, __n128))(*(void *)v5 + 16))(v5, v4);
  }
  return result;
}

void sub_18E12E938(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_18DEE4E18(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_18E12E950(void *a1)
{
  uint64_t v1 = a1[8];
  if (v1)
  {
    while (1)
    {
      uint64_t v3 = *(void *)(*(void *)(a1[4] + (((unint64_t)(v1 + a1[7] - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                     + 16 * (v1 + *((unsigned char *)a1 + 56) - 1));
      if (!(*(unsigned int (**)(uint64_t))(*(void *)v3 + 32))(v3)) {
        break;
      }
      sub_18E12F4CC(a1);
      uint64_t v1 = a1[8];
      if (!v1) {
        return;
      }
    }
    uint64_t v4 = *(void *)(*(void *)(a1[4] + (((unint64_t)(a1[8] + a1[7] - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                   + 16 * (*((unsigned char *)a1 + 64) + *((unsigned char *)a1 + 56) - 1));
    uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4);
    a1[2] = v5;
    unint64_t v6 = a1[8];
    if (v6 >= a1[9])
    {
      double v9 = *(void (**)(void))(**(void **)(*(void *)(a1[4] + (((v6 + a1[7] - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                                          + 16 * (v6 + *((unsigned char *)a1 + 56) - 1))
                            + 24);
      v9();
    }
    else
    {
      (*(void (**)(__n128 *__return_ptr))(*(void *)(v5 + 8) + 16))(&v10);
      __n128 v7 = sub_18E12EFD4(a1 + 3, &v10);
      if (v10.n128_u64[1]) {
        sub_18DEE4E18((std::__shared_weak_count *)v10.n128_u64[1]);
      }
      uint64_t v8 = *(void *)(*(void *)(a1[4] + (((unint64_t)(a1[8] + a1[7] - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                     + 16 * (*((unsigned char *)a1 + 64) + *((unsigned char *)a1 + 56) - 1));
      (*(void (**)(uint64_t, __n128))(*(void *)v8 + 16))(v8, v7);
    }
  }
}

void sub_18E12EB38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_18DEE4E18(a10);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_18E12EB50(uint64_t a1)
{
  return *(void *)(a1 + 64) == 0;
}

uint64_t sub_18E12EB60(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t sub_18E12EB68(uint64_t a1)
{
  double v2 = *(void ***)(a1 + 8);
  uint64_t v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    uint64_t v4 = (void *)(a1 + 40);
    uint64_t v3 = *(void ***)(a1 + 8);
  }
  else
  {
    uint64_t v4 = (void *)(a1 + 40);
    unint64_t v5 = *(void *)(a1 + 32);
    unint64_t v6 = &v2[v5 >> 8];
    uint64_t v7 = (uint64_t)*v6;
    uint64_t v8 = (uint64_t)*v6 + 16 * v5;
    uint64_t v9 = *(uint64_t *)((char *)v2 + (((*(void *)(a1 + 40) + v5) >> 5) & 0x7FFFFFFFFFFFFF8))
       + 16 * (*(unsigned char *)(a1 + 40) + v5);
    if (v8 != v9)
    {
      do
      {
        __n128 v10 = *(std::__shared_weak_count **)(v8 + 8);
        if (v10)
        {
          sub_18DEE4E18(v10);
          uint64_t v7 = (uint64_t)*v6;
        }
        v8 += 16;
        if (v8 - v7 == 4096)
        {
          uint64_t v11 = (uint64_t)v6[1];
          ++v6;
          uint64_t v7 = v11;
          uint64_t v8 = v11;
        }
      }
      while (v8 != v9);
      double v2 = *(void ***)(a1 + 8);
      uint64_t v3 = *(void ***)(a1 + 16);
    }
  }
  *uint64_t v4 = 0;
  unint64_t v12 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = *(void ***)(a1 + 16);
      double v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v12 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v13 = v12 >> 3;
  if (v13 == 1)
  {
    uint64_t v14 = 128;
    goto LABEL_16;
  }
  if (v13 == 2)
  {
    uint64_t v14 = 256;
LABEL_16:
    *(void *)(a1 + 32) = v14;
  }
  if (v2 != v3)
  {
    do
    {
      uint64_t v15 = *v2++;
      operator delete(v15);
    }
    while (v2 != v3);
    uint64_t v17 = *(void *)(a1 + 8);
    uint64_t v16 = *(void *)(a1 + 16);
    if (v16 != v17) {
      *(void *)(a1 + 16) = v16 + ((v17 - v16 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

double sub_18E12ECC0(void *a1, uint64_t a2)
{
  uint64_t v4 = (void **)a1[1];
  uint64_t v5 = a1[2];
  if ((void **)v5 == v4)
  {
    unint64_t v6 = a1 + 5;
    uint64_t v5 = a1[1];
  }
  else
  {
    unint64_t v6 = a1 + 5;
    unint64_t v7 = a1[4];
    uint64_t v8 = &v4[v7 >> 8];
    uint64_t v9 = (uint64_t)*v8;
    uint64_t v10 = (uint64_t)*v8 + 16 * v7;
    uint64_t v11 = *(uint64_t *)((char *)v4 + (((a1[5] + v7) >> 5) & 0x7FFFFFFFFFFFFF8))
        + 16 * (*((unsigned char *)a1 + 40) + v7);
    if (v10 != v11)
    {
      do
      {
        unint64_t v12 = *(std::__shared_weak_count **)(v10 + 8);
        if (v12)
        {
          sub_18DEE4E18(v12);
          uint64_t v9 = (uint64_t)*v8;
        }
        v10 += 16;
        if (v10 - v9 == 4096)
        {
          uint64_t v13 = (uint64_t)v8[1];
          ++v8;
          uint64_t v9 = v13;
          uint64_t v10 = v13;
        }
      }
      while (v10 != v11);
      uint64_t v4 = (void **)a1[1];
      uint64_t v5 = a1[2];
    }
  }
  *unint64_t v6 = 0;
  unint64_t v14 = v5 - (void)v4;
  if ((unint64_t)(v5 - (void)v4) >= 0x11)
  {
    do
    {
      operator delete(*v4);
      uint64_t v5 = a1[2];
      uint64_t v4 = (void **)(a1[1] + 8);
      a1[1] = v4;
      unint64_t v14 = v5 - (void)v4;
    }
    while ((unint64_t)(v5 - (void)v4) > 0x10);
  }
  unint64_t v15 = v14 >> 3;
  if (v15 == 1)
  {
    uint64_t v16 = 128;
  }
  else
  {
    if (v15 != 2) {
      goto LABEL_17;
    }
    uint64_t v16 = 256;
  }
  a1[4] = v16;
LABEL_17:
  if (a1[5])
  {
    if (a1[4] >= 0x100uLL)
    {
      operator delete(*v4);
      a1[1] += 8;
      a1[4] -= 256;
    }
    sub_18E12EE98(a1, 0);
  }
  else
  {
    if ((void **)v5 != v4)
    {
      do
      {
        operator delete(*(void **)(v5 - 8));
        uint64_t v17 = a1[1];
        uint64_t v5 = a1[2] - 8;
        a1[2] = v5;
      }
      while (v5 != v17);
    }
    a1[4] = 0;
  }
  sub_18E12EF04((void **)a1);
  uint64_t v19 = a1[1];
  uint64_t v18 = a1[2];
  if (v18 != v19) {
    a1[2] = v18 + ((v19 - v18 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  sub_18E12EF04((void **)a1);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = *(void *)(a2 + 16);
  uint64_t v20 = *(void *)(a2 + 32);
  a1[3] = *(void *)(a2 + 24);
  double result = 0.0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  a1[4] = v20;
  a1[5] = *(void *)(a2 + 40);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_18E12EE98(void *a1, char a2)
{
  uint64_t v4 = a1[1];
  uint64_t v3 = a1[2];
  if (v3 == v4) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = 32 * (v3 - v4) - 1;
  }
  unint64_t v6 = v5 - (a1[5] + a1[4]);
  if (v6 < 0x100) {
    a2 = 1;
  }
  if (v6 > 0x1FF || (a2 & 1) == 0)
  {
    operator delete(*(void **)(v3 - 8));
    a1[2] -= 8;
  }
}

void sub_18E12EF04(void **a1)
{
  double v2 = a1[2];
  uint64_t v3 = a1[1];
  uint64_t v4 = (unsigned char *)a1[3] - (unsigned char *)*a1;
  unint64_t v5 = (v2 - v3) >> 3;
  if (v5 >= v4 >> 3) {
    return;
  }
  if (v2 == v3)
  {
    uint64_t v9 = 0;
    unint64_t v6 = 0;
    goto LABEL_8;
  }
  unint64_t v6 = (char *)sub_18DEE2FBC(v5);
  unint64_t v7 = a1[1];
  double v2 = a1[2];
  uint64_t v9 = &v6[8 * v8];
  uint64_t v10 = v2 - v7;
  if (v2 == v7)
  {
LABEL_8:
    uint64_t v13 = v2;
    goto LABEL_9;
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * (v10 >> 3);
  do
  {
    *(void *)&v6[v11] = *(void *)&v7[v11];
    v11 += 8;
  }
  while (v12 != v11);
  double v2 = a1[1];
  uint64_t v13 = a1[2];
LABEL_9:
  int64_t v14 = v13 - v2;
  unint64_t v15 = *a1;
  *a1 = v6;
  a1[1] = v6;
  a1[2] = &v6[v14];
  a1[3] = v9;
  if (v15)
  {
    operator delete(v15);
  }
}

__n128 sub_18E12EFD4(void *a1, __n128 *a2)
{
  uint64_t v4 = (char *)a1[1];
  unint64_t v5 = (char *)a1[2];
  uint64_t v6 = v5 - v4;
  if (v5 == v4) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = 32 * (v5 - v4) - 1;
  }
  unint64_t v8 = a1[4];
  unint64_t v9 = a1[5] + v8;
  if (v7 == v9)
  {
    if (v8 < 0x100)
    {
      uint64_t v23 = v6 >> 3;
      double v24 = (char *)a1[3];
      double v25 = (char *)*a1;
      uint64_t v26 = (uint64_t)&v24[-*a1];
      if (v6 >> 3 >= (unint64_t)(v26 >> 3))
      {
        uint64_t v29 = v26 >> 2;
        if (v24 == v25) {
          unint64_t v30 = 1;
        }
        else {
          unint64_t v30 = v29;
        }
        unint64_t v31 = (char *)sub_18DEE2FBC(v30);
        uint64_t v33 = v32;
        long long v34 = operator new(0x1000uLL);
        __n128 v35 = &v31[8 * v23];
        double v36 = &v31[8 * v33];
        if (v23 == v33)
        {
          uint64_t v37 = 8 * v23;
          if (v6 < 1)
          {
            uint64_t v73 = v34;
            uint64_t v74 = v37 >> 2;
            if (v5 == v4) {
              unint64_t v75 = 1;
            }
            else {
              unint64_t v75 = v74;
            }
            uint64_t v76 = (char *)sub_18DEE2FBC(v75);
            __n128 v35 = &v76[8 * (v75 >> 2)];
            double v36 = &v76[8 * v77];
            if (v31) {
              operator delete(v31);
            }
            unint64_t v31 = v76;
            long long v34 = v73;
          }
          else
          {
            uint64_t v38 = v37 >> 3;
            if (v38 >= -1) {
              unint64_t v39 = v38 + 1;
            }
            else {
              unint64_t v39 = v38 + 2;
            }
            v35 -= 8 * (v39 >> 1);
          }
        }
        *(void *)__n128 v35 = v34;
        uint64_t v78 = v35 + 8;
        for (uint64_t i = a1[2]; i != a1[1]; i -= 8)
        {
          if (v35 == v31)
          {
            if (v78 >= v36)
            {
              if (v36 == v31) {
                unint64_t v84 = 1;
              }
              else {
                unint64_t v84 = (v36 - v31) >> 2;
              }
              unint64_t v85 = (char *)sub_18DEE2FBC(v84);
              double v87 = v85;
              __n128 v35 = &v85[(2 * v84 + 6) & 0xFFFFFFFFFFFFFFF8];
              uint64_t v89 = v78 - v31;
              BOOL v88 = v78 == v31;
              uint64_t v78 = v35;
              if (!v88)
              {
                uint64_t v78 = &v35[v89 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v90 = 8 * (v89 >> 3);
                uint64_t v91 = v35;
                uint64_t v92 = (uint64_t *)v31;
                do
                {
                  uint64_t v93 = *v92++;
                  *(void *)uint64_t v91 = v93;
                  v91 += 8;
                  v90 -= 8;
                }
                while (v90);
              }
              double v36 = &v85[8 * v86];
              if (v31) {
                operator delete(v31);
              }
              unint64_t v31 = v87;
            }
            else
            {
              uint64_t v80 = (v36 - v78) >> 3;
              if (v80 >= -1) {
                uint64_t v81 = v80 + 1;
              }
              else {
                uint64_t v81 = v80 + 2;
              }
              uint64_t v82 = v81 >> 1;
              __n128 v35 = &v31[8 * (v81 >> 1)];
              unint64_t v83 = v31;
              if (v78 != v31)
              {
                memmove(v35, v31, v78 - v31);
                unint64_t v83 = v78;
              }
              uint64_t v78 = &v83[8 * v82];
            }
          }
          uint64_t v94 = *(void *)(i - 8);
          *((void *)v35 - 1) = v94;
          v35 -= 8;
        }
        double v95 = (char *)*a1;
        *a1 = v31;
        a1[1] = v35;
        a1[2] = v78;
        a1[3] = v36;
        if (v95) {
          operator delete(v95);
        }
        goto LABEL_36;
      }
      unint64_t v27 = operator new(0x1000uLL);
      unint64_t v28 = v27;
      if (v24 == v5)
      {
        if (v4 == v25)
        {
          if (v5 == v4) {
            unint64_t v51 = 1;
          }
          else {
            unint64_t v51 = (v24 - v4) >> 2;
          }
          uint64_t v52 = 2 * v51;
          unint64_t v53 = (char *)sub_18DEE2FBC(v51);
          uint64_t v4 = &v53[(v52 + 6) & 0xFFFFFFFFFFFFFFF8];
          double v55 = (uint64_t *)a1[1];
          long long v56 = v4;
          uint64_t v57 = a1[2] - (void)v55;
          if (v57)
          {
            long long v56 = &v4[v57 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v58 = 8 * (v57 >> 3);
            uint64_t v59 = &v53[(v52 + 6) & 0xFFFFFFFFFFFFFFF8];
            do
            {
              uint64_t v60 = *v55++;
              *(void *)uint64_t v59 = v60;
              v59 += 8;
              v58 -= 8;
            }
            while (v58);
          }
          double v61 = (char *)*a1;
          *a1 = v53;
          a1[1] = v4;
          a1[2] = v56;
          a1[3] = &v53[8 * v54];
          if (v61)
          {
            operator delete(v61);
            uint64_t v4 = (char *)a1[1];
          }
        }
        *((void *)v4 - 1) = v28;
        char v62 = (char *)a1[1];
        double v63 = (char *)a1[2];
        a1[1] = v62 - 8;
        uint64_t v64 = *((void *)v62 - 1);
        a1[1] = v62;
        if (v63 == (char *)a1[3])
        {
          uint64_t v65 = (uint64_t)&v62[-*a1];
          if ((unint64_t)v62 <= *a1)
          {
            if (v63 == (char *)*a1) {
              unint64_t v96 = 1;
            }
            else {
              unint64_t v96 = (uint64_t)&v63[-*a1] >> 2;
            }
            float64x2_t v97 = (char *)sub_18DEE2FBC(v96);
            float64x2_t v99 = &v97[8 * (v96 >> 2)];
            float64x2_t v100 = (uint64_t *)a1[1];
            double v63 = v99;
            uint64_t v101 = a1[2] - (void)v100;
            if (v101)
            {
              double v63 = &v99[v101 & 0xFFFFFFFFFFFFFFF8];
              uint64_t v102 = 8 * (v101 >> 3);
              uint64_t v103 = &v97[8 * (v96 >> 2)];
              do
              {
                uint64_t v104 = *v100++;
                *(void *)uint64_t v103 = v104;
                v103 += 8;
                v102 -= 8;
              }
              while (v102);
            }
            char v105 = (char *)*a1;
            *a1 = v97;
            a1[1] = v99;
            a1[2] = v63;
            a1[3] = &v97[8 * v98];
            if (v105)
            {
              operator delete(v105);
              double v63 = (char *)a1[2];
            }
          }
          else
          {
            uint64_t v66 = v65 >> 3;
            BOOL v15 = v65 >> 3 < -1;
            uint64_t v67 = (v65 >> 3) + 2;
            if (v15) {
              uint64_t v68 = v67;
            }
            else {
              uint64_t v68 = v66 + 1;
            }
            uint64_t v69 = -(v68 >> 1);
            uint64_t v70 = v68 >> 1;
            long long v71 = &v62[-8 * v70];
            int64_t v72 = v63 - v62;
            if (v63 != v62)
            {
              memmove(&v62[-8 * v70], v62, v63 - v62);
              char v62 = (char *)a1[1];
            }
            double v63 = &v71[v72];
            a1[1] = &v62[8 * v69];
            a1[2] = &v71[v72];
          }
        }
        *(void *)double v63 = v64;
      }
      else
      {
        *(void *)unint64_t v5 = v27;
      }
    }
    else
    {
      a1[4] = v8 - 256;
      uint64_t v12 = *(void *)v4;
      uint64_t v10 = v4 + 8;
      uint64_t v11 = v12;
      a1[1] = v10;
      if (v5 == (char *)a1[3])
      {
        uint64_t v13 = (uint64_t)&v10[-*a1];
        if ((unint64_t)v10 <= *a1)
        {
          if (v5 == (char *)*a1) {
            unint64_t v40 = 1;
          }
          else {
            unint64_t v40 = (uint64_t)&v5[-*a1] >> 2;
          }
          float64x2_t v41 = (char *)sub_18DEE2FBC(v40);
          double v43 = &v41[8 * (v40 >> 2)];
          double v44 = (uint64_t *)a1[1];
          unint64_t v5 = v43;
          uint64_t v45 = a1[2] - (void)v44;
          if (v45)
          {
            unint64_t v5 = &v43[v45 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v46 = 8 * (v45 >> 3);
            unint64_t v47 = &v41[8 * (v40 >> 2)];
            do
            {
              uint64_t v48 = *v44++;
              *(void *)unint64_t v47 = v48;
              v47 += 8;
              v46 -= 8;
            }
            while (v46);
          }
          double v49 = (char *)*a1;
          *a1 = v41;
          a1[1] = v43;
          a1[2] = v5;
          a1[3] = &v41[8 * v42];
          if (v49)
          {
            operator delete(v49);
            unint64_t v5 = (char *)a1[2];
          }
        }
        else
        {
          uint64_t v14 = v13 >> 3;
          BOOL v15 = v13 >> 3 < -1;
          uint64_t v16 = (v13 >> 3) + 2;
          if (v15) {
            uint64_t v17 = v16;
          }
          else {
            uint64_t v17 = v14 + 1;
          }
          uint64_t v18 = -(v17 >> 1);
          uint64_t v19 = v17 >> 1;
          uint64_t v20 = &v10[-8 * v19];
          int64_t v21 = v5 - v10;
          if (v5 != v10)
          {
            memmove(&v10[-8 * v19], v10, v5 - v10);
            unint64_t v5 = (char *)a1[1];
          }
          uint64_t v22 = &v5[8 * v18];
          unint64_t v5 = &v20[v21];
          a1[1] = v22;
          a1[2] = &v20[v21];
        }
      }
      *(void *)unint64_t v5 = v11;
    }
    a1[2] += 8;
LABEL_36:
    uint64_t v4 = (char *)a1[1];
    unint64_t v9 = a1[5] + a1[4];
  }
  __n128 result = *a2;
  *(__n128 *)(*(void *)&v4[(v9 >> 5) & 0x7FFFFFFFFFFFFF8] + 16 * v9) = *a2;
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  ++a1[5];
  return result;
}

void sub_18E12F4A0(_Unwind_Exception *a1)
{
  operator delete(v2);
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(a1);
}

void sub_18E12F4CC(void *a1)
{
  double v2 = a1 + 3;
  uint64_t v3 = a1[8] - 1;
  uint64_t v4 = *(std::__shared_weak_count **)(*(void *)(a1[4] + (((unint64_t)(v3 + a1[7]) >> 5) & 0x7FFFFFFFFFFFFF8))
                                    + 16 * (v3 + *((unsigned char *)a1 + 56))
                                    + 8);
  if (v4)
  {
    sub_18DEE4E18(v4);
    uint64_t v3 = a1[8] - 1;
  }
  a1[8] = v3;
  sub_18E12EE98(v2, 1);
  uint64_t v5 = a1[8];
  if (v5)
  {
    uint64_t v6 = *(void (**)(void))(**(void **)(*(void *)(a1[4]
                                                    + (((unint64_t)(v5 + a1[7] - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                                        + 16 * (v5 + *((unsigned char *)a1 + 56) - 1))
                          + 24);
    v6();
  }
  else
  {
    a1[2] = 0;
  }
}

void sub_18E12F5A4(uint64_t a1)
{
  double v2 = *(double **)(a1 + 24);
  uint64_t v3 = *(double **)(a1 + 32);
  uint64_t v1 = (void **)(a1 + 24);
  if (v2 != v3)
  {
    double v5 = *v2;
    double v6 = *(v3 - 2);
    if (*v2 != v6)
    {
      if ((*(void *)&v5 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
        || (*(void *)&v6 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      {
        goto LABEL_20;
      }
      double v30 = vabdd_f64(v5, v6);
      double v31 = fabs(v5);
      double v32 = fabs(v6);
      if (v31 >= v32) {
        double v32 = v31;
      }
      double v33 = v32 >= 1.0 ? v32 * 2.22044605e-16 : 2.22044605e-16;
      if (v30 > v33) {
        goto LABEL_20;
      }
    }
    double v7 = v2[1];
    double v8 = *(v3 - 1);
    if (v7 != v8)
    {
      if ((*(void *)&v7 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
        || (*(void *)&v8 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      {
        goto LABEL_20;
      }
      double v10 = vabdd_f64(v7, v8);
      double v11 = fabs(v7);
      double v12 = fabs(v8);
      if (v11 < v12) {
        double v11 = v12;
      }
      double v13 = v11 >= 1.0 ? v11 * 2.22044605e-16 : 2.22044605e-16;
      if (v10 > v13)
      {
LABEL_20:
        uint64_t v15 = *((void *)v2 + 1);
        uint64_t v16 = a1 + 40;
        unint64_t v17 = *(void *)(a1 + 40);
        if ((unint64_t)v3 >= v17)
        {
          uint64_t v18 = ((char *)v3 - (char *)v2) >> 4;
          unint64_t v19 = v18 + 1;
          if ((unint64_t)(v18 + 1) >> 60) {
            sub_18DEE1FC8();
          }
          uint64_t v20 = v17 - (void)v2;
          if (v20 >> 3 > v19) {
            unint64_t v19 = v20 >> 3;
          }
          if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v21 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v21 = v19;
          }
          if (v21) {
            uint64_t v22 = (char *)sub_18DFF7B64(v16, v21);
          }
          else {
            uint64_t v22 = 0;
          }
          uint64_t v23 = &v22[16 * v18];
          double v24 = &v22[16 * v21];
          *(double *)uint64_t v23 = v5;
          *((void *)v23 + 1) = v15;
          uint64_t v3 = (double *)(v23 + 16);
          uint64_t v26 = *(char **)(a1 + 24);
          double v25 = *(char **)(a1 + 32);
          if (v25 != v26)
          {
            do
            {
              *((_OWORD *)v23 - 1) = *((_OWORD *)v25 - 1);
              v23 -= 16;
              v25 -= 16;
            }
            while (v25 != v26);
            double v25 = (char *)*v1;
          }
          *(void *)(a1 + 24) = v23;
          *(void *)(a1 + 32) = v3;
          *(void *)(a1 + 40) = v24;
          if (v25) {
            operator delete(v25);
          }
        }
        else
        {
          *uint64_t v3 = v5;
          *((void *)v3 + 1) = v15;
          v3 += 2;
        }
        *(void *)(a1 + 32) = v3;
        double v2 = *(double **)(a1 + 24);
      }
    }
    if ((unint64_t)((char *)v3 - (char *)v2) < 0x40 || (int v34 = 0, v35 = 0, v2 + 2 == v3))
    {
      int v29 = -1;
    }
    else
    {
      do
      {
        if (!sub_18E12F8BC((double *)(a1 + 8), v2, v2 + 2, (uint64_t)&v34)) {
          break;
        }
        unint64_t v27 = v2 + 4;
        v2 += 2;
      }
      while (v27 != v3);
      if (v34) {
        int v28 = 1;
      }
      else {
        int v28 = -1;
      }
      if (v35) {
        int v29 = 0;
      }
      else {
        int v29 = v28;
      }
      double v2 = (double *)*v1;
    }
    *(unsigned char *)(a1 + 48) = v29 > 0;
    *(void *)(a1 + 32) = v2;
  }
}

void sub_18E12F808(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 4)
  {
    if (a2 >> 60) {
      sub_18DEE1FC8();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    double v6 = (char *)sub_18DFF7B64(v3, a2);
    double v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF0];
    unint64_t v9 = &v6[16 * v8];
    double v11 = (char *)*a1;
    double v10 = (char *)a1[1];
    double v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        *((_OWORD *)v12 - 1) = *((_OWORD *)v10 - 1);
        v12 -= 16;
        v10 -= 16;
      }
      while (v10 != v11);
      double v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

BOOL sub_18E12F8BC(double *a1, double *a2, double *a3, uint64_t a4)
{
  double v5 = *a1;
  double v6 = *a2;
  double v7 = *a3;
  if (*a2 == *a1)
  {
    BOOL v8 = 1;
  }
  else if ((*(void *)&v6 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL {
         || (*(void *)&v5 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
  }
  {
    BOOL v8 = 0;
  }
  else
  {
    double v9 = vabdd_f64(v6, v5);
    double v10 = fabs(v6);
    double v11 = fabs(v5);
    if (v10 < v11) {
      double v10 = v11;
    }
    if (v10 >= 1.0) {
      double v12 = v10 * 2.22044605e-16;
    }
    else {
      double v12 = 2.22044605e-16;
    }
    BOOL v8 = v9 <= v12;
  }
  if (v7 == v5)
  {
    BOOL v13 = 1;
LABEL_14:
    if (v8 && v13)
    {
      double v14 = a1[1];
      double v15 = a2[1];
      double v16 = a3[1];
      BOOL v17 = v15 > v14 || v16 < v14;
      if (!v17 || (v15 >= v14 ? (BOOL v18 = v16 > v14) : (BOOL v18 = 1), !v18)) {
        *(unsigned char *)(a4 + 4) = 1;
      }
      return *(unsigned char *)(a4 + 4) == 0;
    }
    if (v8) {
      goto LABEL_32;
    }
    if (v13)
    {
      int v20 = 1;
      BOOL v21 = v6 <= v5;
      int v22 = -1;
      goto LABEL_35;
    }
    goto LABEL_53;
  }
  if ((*(void *)&v7 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (*(void *)&v5 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    double v36 = vabdd_f64(v7, v5);
    double v37 = fabs(v7);
    double v38 = fabs(v5);
    if (v37 < v38) {
      double v37 = v38;
    }
    if (v37 >= 1.0) {
      double v39 = v37 * 2.22044605e-16;
    }
    else {
      double v39 = 2.22044605e-16;
    }
    BOOL v13 = v36 <= v39;
    goto LABEL_14;
  }
  if (v8)
  {
LABEL_32:
    int v20 = -1;
    BOOL v21 = v7 <= v5;
    int v22 = 1;
LABEL_35:
    if (v21) {
      int v23 = v20;
    }
    else {
      int v23 = v22;
    }
    if (v8) {
      double v24 = a2;
    }
    else {
      double v24 = a3;
    }
    double v25 = a1[1];
    double v26 = v24[1];
    if (v25 != v26)
    {
      if ((*(void *)&v25 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
        || (*(void *)&v26 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      {
        goto LABEL_50;
      }
      double v27 = vabdd_f64(v25, v26);
      double v28 = fabs(v25);
      double v29 = fabs(v26);
      if (v28 < v29) {
        double v28 = v29;
      }
      double v30 = v28 >= 1.0 ? v28 * 2.22044605e-16 : 2.22044605e-16;
      if (v27 > v30)
      {
LABEL_50:
        if (v25 >= v26) {
          int v31 = v23;
        }
        else {
          int v31 = -v23;
        }
        goto LABEL_81;
      }
    }
    goto LABEL_65;
  }
LABEL_53:
  if (v6 < v5 && v7 > v5)
  {
    int v23 = 2;
    goto LABEL_64;
  }
  if (v6 > v5 && v7 < v5)
  {
    int v23 = -2;
LABEL_64:
    double v41 = 1.0;
    double v34 = sub_18E12FB7C(a2, a3, a1, &v41);
    if (v34 != 0.0)
    {
      if ((*(void *)&v34 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
      {
        if (v34 > 0.0) {
          int v31 = 1;
        }
        else {
          int v31 = -1;
        }
      }
      else
      {
        double v40 = fabs(v34);
        if (v34 > 0.0) {
          int v31 = 1;
        }
        else {
          int v31 = -1;
        }
        if (v40 <= v41 * 2.22044605e-16) {
          goto LABEL_65;
        }
      }
LABEL_81:
      if (v23 * v31 >= 1) {
        *(_DWORD *)a4 += v23;
      }
      return *(unsigned char *)(a4 + 4) == 0;
    }
LABEL_65:
    BOOL result = 0;
    *(unsigned char *)(a4 + 4) = 1;
    *(_DWORD *)a4 = 0;
    return result;
  }
  return *(unsigned char *)(a4 + 4) == 0;
}

double sub_18E12FB7C(double *a1, double *a2, double *a3, double *a4)
{
  double v4 = a1[1];
  v20[0] = *a1;
  v20[1] = v4;
  double v5 = a2[1];
  v19[0] = *a2;
  v19[1] = v5;
  double v6 = a3[1];
  v18[0] = *a3;
  v18[1] = v6;
  double v7 = v20[0] - v18[0];
  v27[0] = v20[0] - v18[0];
  double v8 = v5 - v6;
  v26[0] = v5 - v6;
  double v9 = v4 - v6;
  v25[0] = v4 - v6;
  double v10 = v19[0] - v18[0];
  v24[0] = v19[0] - v18[0];
  double v11 = vabdd_f64(v20[0], v18[0]);
  double v12 = vabdd_f64(v5, v6);
  double v13 = vabdd_f64(v4, v6);
  double v14 = vabdd_f64(v19[0], v18[0]);
  if (v11 < v12) {
    double v11 = v12;
  }
  if (v11 < v13) {
    double v11 = v13;
  }
  if (v11 < v14) {
    double v11 = v14;
  }
  if (v11 < 1.0) {
    double v11 = 1.0;
  }
  *a4 = v11;
  double v15 = v7 * v8;
  v23[0] = v7 * v8;
  double v16 = v10 * v9;
  double result = v7 * v8 - v10 * v9;
  double v21 = fabs(v7 * v8) + fabs(v10 * v9);
  v22[0] = v10 * v9;
  if (vabdd_f64(v7 * v8, v10 * v9) < v21 * 3.33066907e-16 && (v15 <= 0.0 || v16 > 0.0) && (v15 >= 0.0 || v16 < 0.0)) {
    return sub_18E12FC90(v20, v19, v18, v27, v26, v25, v24, v23, v22, &v21);
  }
  return result;
}

double sub_18E12FC90(double *a1, double *a2, double *a3, double *a4, double *a5, double *a6, double *a7, double *a8, double *a9, double *a10)
{
  uint64_t v14 = 0;
  a8[1] = -(*a8 - *a4 * *a5);
  double v15 = *a9;
  double v16 = -(*a9 - *a6 * *a7);
  a9[1] = v16;
  double v17 = a8[1];
  double v18 = v17 - v16;
  double v19 = v17 - (v17 - v16) - v16 + v17 - (v17 - v16 + v17 - (v17 - v16));
  double v20 = *a8 + v18;
  double v21 = v18 - (v20 - *a8) + *a8 - (v20 - (v20 - *a8));
  v67[0] = v19;
  v67[1] = v21 - (v21 - v15) - v15 + v21 - (v21 - v15 + v21 - (v21 - v15));
  v67[2] = v21 - v15 - (v20 + v21 - v15 - v20) + v20 - (v20 + v21 - v15 - (v20 + v21 - v15 - v20));
  v67[3] = v20 + v21 - v15;
  double result = 0.0;
  do
    double result = result + v67[v14++];
  while (v14 != 4);
  double v23 = fabs(result);
  if (v23 < *a10 * 2.22044605e-16)
  {
    a4[1] = *a1 - *a4 - *a3 + *a1 - (*a4 + *a1 - *a4);
    a5[1] = a2[1] - *a5 - a3[1] + a2[1] - (*a5 + a2[1] - *a5);
    a6[1] = a1[1] - *a6 - a3[1] + a1[1] - (*a6 + a1[1] - *a6);
    double v24 = *a7;
    double v25 = *a2 - *a7 - *a3 + *a2 - (*a7 + *a2 - *a7);
    a7[1] = v25;
    double v26 = a4[1];
    double v27 = a6[1];
    double v28 = a5[1];
    if (v26 != 0.0 || v27 != 0.0 || v28 != 0.0 || v25 != 0.0)
    {
      double v29 = v23 * 3.33066907e-16 + *a10 * 1.10933565e-31;
      double v30 = v26 * *a5;
      double v31 = v24 * v27;
      double result = result + v30 + *a4 * v28 - (v24 * v27 + *a6 * v25);
      if (fabs(result) < v29)
      {
        double v32 = -(v30 - v26 * *a5);
        double v33 = -(v31 - v27 * v24);
        double v34 = v32 - v33;
        double v35 = v32 - (v32 - v33) - v33 + v32 - (v32 - v33 + v32 - (v32 - v33));
        double v36 = v30 + v34;
        double v37 = v34 - (v30 + v34 - v30) + v30 - (v30 + v34 - (v30 + v34 - v30));
        double v60 = v35;
        double v61 = v37 - (v37 - v31) - v31 + v37 - (v37 - v31 + v37 - (v37 - v31));
        double v62 = v37 - v31 - (v36 + v37 - v31 - v36) + v36 - (v36 + v37 - v31 - (v36 + v37 - v31 - v36));
        double v63 = v36 + v37 - v31;
        int v38 = sub_18E130078(v67, &v60, v66, 4, 4);
        double v39 = a5[1];
        double v40 = a4[1];
        double v41 = *a4 * v39;
        double v42 = -(v41 - v41);
        double v43 = a7[1];
        double v44 = a6[1];
        double v45 = *a6 * v43;
        double v46 = -(v45 - v45);
        double v47 = v42 - v46;
        double v48 = v42 - (v42 - v46) - v46 + v42 - (v42 - v46 + v42 - (v42 - v46));
        double v49 = v41 + v47;
        double v50 = v47 - (v41 + v47 - v41) + v41 - (v41 + v47 - (v41 + v47 - v41));
        double v60 = v48;
        double v61 = v50 - (v50 - v45) - v45 + v50 - (v50 - v45 + v50 - (v50 - v45));
        double v62 = v50 - v45 - (v49 + v50 - v45 - v49) + v49 - (v49 + v50 - v45 - (v49 + v50 - v45 - v49));
        double v63 = v49 + v50 - v45;
        double v51 = v39 * v40;
        double v52 = -(v39 * v40 - v40 * v39);
        double v53 = v43 * v44;
        double v54 = -(v43 * v44 - v44 * v43);
        double v55 = v52 - v54;
        double v56 = v52 - (v52 - v54) - v54 + v52 - (v52 - v54 + v52 - (v52 - v54));
        double v57 = v51 + v55;
        double v58 = v55 - (v51 + v55 - v51) + v51 - (v51 + v55 - (v51 + v55 - v51));
        v64[0] = v56;
        v64[1] = v58 - (v58 - v53) - v53 + v58 - (v58 - v53 + v58 - (v58 - v53));
        void v64[2] = v58 - v53 - (v57 + v58 - v53 - v57) + v57 - (v57 + v58 - v53 - (v57 + v58 - v53 - v57));
        v64[3] = v57 + v58 - v53;
        int v59 = sub_18E130078(&v60, v64, v65, 4, 4);
        return *(&v60 + (int)sub_18E130078(v66, v65, &v60, v38, v59) - 1);
      }
    }
  }
  return result;
}

uint64_t sub_18E130078(double *a1, double *a2, double *a3, int a4, int a5)
{
  double v6 = *a2;
  double v7 = fabs(*a2);
  double v8 = fabs(*a1);
  int v9 = v7 <= v8;
  int v10 = v7 > v8;
  if (v7 > v8) {
    double v6 = *a1;
  }
  if (v10 < a4 && v9 < a5)
  {
    double v13 = a2[v7 <= v8];
    double v14 = a1[v7 > v8];
    double v15 = fabs(v13);
    double v16 = fabs(v14);
    if (v7 > v8) {
      int v17 = 1;
    }
    else {
      int v17 = 2;
    }
    double v18 = v6 + v13;
    double v19 = v6 + v13 - v13;
    if (v7 <= v8) {
      int v20 = 1;
    }
    else {
      int v20 = 2;
    }
    double v21 = v6 + v14;
    double v22 = v6 + v14 - v14;
    if (v15 > v16)
    {
      int v10 = v20;
    }
    else
    {
      double v22 = v19;
      double v21 = v18;
      int v9 = v17;
    }
    double v23 = v6 - v22;
    if (v23 == 0.0)
    {
      uint64_t result = 0;
    }
    else
    {
      *a3 = v23;
      uint64_t result = 1;
    }
    double v6 = v21;
    if (v9 < a5 && v10 < a4)
    {
      do
      {
        double v25 = a2[v9];
        double v26 = a1[v10];
        BOOL v27 = fabs(v25) <= fabs(v26);
        double v28 = v6 + v25;
        double v29 = v6 + v25 - v6;
        double v30 = v6 + v25 - v29;
        double v31 = v25 - v29;
        double v32 = v6 + v26;
        double v33 = v6 + v26 - v6;
        double v34 = v6 + v26 - v33;
        double v35 = v26 - v33;
        if (!v27)
        {
          double v30 = v34;
          double v31 = v35;
        }
        double v36 = v6 - v30;
        if (v27) {
          double v6 = v28;
        }
        else {
          double v6 = v32;
        }
        if (v27) {
          ++v9;
        }
        else {
          ++v10;
        }
        double v37 = v31 + v36;
        if (v37 != 0.0)
        {
          a3[(int)result] = v37;
          uint64_t result = (result + 1);
        }
      }
      while (v10 < a4 && v9 < a5);
    }
  }
  else
  {
    uint64_t result = 0;
  }
  if (v10 < a4)
  {
    int v38 = &a1[v10];
    uint64_t v39 = a4 - (uint64_t)v10;
    do
    {
      double v40 = v6;
      double v6 = v6 + *v38;
      double v41 = *v38 - (v6 - v40) + v40 - (v6 - (v6 - v40));
      if (v41 != 0.0)
      {
        a3[(int)result] = v41;
        uint64_t result = (result + 1);
      }
      ++v38;
      --v39;
    }
    while (v39);
  }
  if (v9 < a5)
  {
    double v42 = &a2[v9];
    uint64_t v43 = a5 - (uint64_t)v9;
    do
    {
      double v44 = v6;
      double v6 = v6 + *v42;
      double v45 = *v42 - (v6 - v44) + v44 - (v6 - (v6 - v44));
      if (v45 != 0.0)
      {
        a3[(int)result] = v45;
        uint64_t result = (result + 1);
      }
      ++v42;
      --v43;
    }
    while (v43);
  }
  if (v6 != 0.0 || result == 0)
  {
    a3[(int)result] = v6;
    return (result + 1);
  }
  return result;
}

double sub_18E130254(uint64_t a1)
{
  return **(double **)(a1 + 16);
}

uint64_t *sub_18E130264(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  if (v2 != *result)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = v4 + v5;
      long long v7 = *(_OWORD *)(v2 + v5 - 56);
      *(_OWORD *)(v6 - 40) = *(_OWORD *)(v2 + v5 - 40);
      *(_OWORD *)(v6 - 56) = v7;
      *(void *)(v6 - 24) = *(void *)(v2 + v5 - 24);
      double v8 = (uint64_t *)(v2 + v5 - 16);
      uint64_t v9 = *v8;
      *(void *)(v4 + v5 - 16) = *v8;
      uint64_t v10 = v4 + v5 - 16;
      uint64_t v11 = *(void *)(v2 + v5 - 8);
      *(void *)(v6 - 8) = v11;
      if (v11)
      {
        *(void *)(v9 + 16) = v10;
        *(void *)(v2 + v5 - 24) = v8;
        *double v8 = 0;
        *(void *)(v2 + v5 - 8) = 0;
      }
      else
      {
        *(void *)(v6 - 24) = v10;
      }
      v5 -= 56;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  uint64_t v12 = *result;
  *uint64_t result = v4;
  a2[1] = v12;
  uint64_t v13 = result[1];
  result[1] = a2[2];
  a2[2] = v13;
  uint64_t v14 = result[2];
  result[2] = a2[3];
  a2[3] = v14;
  *a2 = a2[1];
  return result;
}

void *sub_18E130318(unint64_t a1)
{
  if (a1 >= 0x492492492492493) {
    sub_18DEDF7D4();
  }
  return operator new(56 * a1);
}

uint64_t sub_18E130364(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 56;
    sub_18E12CA04(i - 24, *(void **)(i - 16));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *sub_18E1303BC(_OWORD *a1)
{
  uint64_t v2 = operator new(0x58uLL);
  *uint64_t v2 = 0;
  v2[1] = 0;
  long long v3 = a1[1];
  *((_OWORD *)v2 + 1) = *a1;
  *((_OWORD *)v2 + 2) = v3;
  *((_OWORD *)v2 + 3) = a1[2];
  sub_18E12D6D0(v2 + 8, (uint64_t)(a1 + 3));
  return v2;
}

void sub_18E13040C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_18E130420(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDD1E500;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_18E130440(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDD1E500;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E130494(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_18E1304C0()
{
}

double sub_18E1304D4(uint64_t a1)
{
  return *(double *)(a1 + 8);
}

void *sub_18E1304DC(void *result, unint64_t a2)
{
  if (a2 > (uint64_t)(result[2] - *result) >> 3)
  {
    if (a2 >> 61) {
      sub_18DEE1FC8();
    }
    uint64_t v2 = (char **)result;
    uint64_t v3 = result[1] - *result;
    double v15 = result + 2;
    uint64_t v4 = (char *)sub_18DEE2FBC(a2);
    long long v7 = *v2;
    uint64_t v6 = v2[1];
    if (v6 == *v2)
    {
      int64x2_t v10 = vdupq_n_s64((unint64_t)v6);
      double v8 = &v4[v3 & 0xFFFFFFFFFFFFFFF8];
    }
    else
    {
      double v8 = &v4[v3 & 0xFFFFFFFFFFFFFFF8];
      do
      {
        uint64_t v9 = *((void *)v6 - 1);
        v6 -= 8;
        *(void *)uint64_t v6 = 0;
        *((void *)v8 - 1) = v9;
        v8 -= 8;
      }
      while (v6 != v7);
      int64x2_t v10 = *(int64x2_t *)v2;
    }
    *uint64_t v2 = v8;
    v2[1] = &v4[v3 & 0xFFFFFFFFFFFFFFF8];
    int64x2_t v13 = v10;
    uint64_t v11 = v2[2];
    v2[2] = &v4[8 * v5];
    uint64_t v14 = v11;
    uint64_t v12 = v10.i64[0];
    return (void *)sub_18E13059C((uint64_t)&v12);
  }
  return result;
}

uint64_t sub_18E13059C(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    uint64_t v4 = *(void *)(i - 8);
    *(void *)(i - 8) = 0;
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t **sub_18E130618(uint64_t **a1, unint64_t *a2, _OWORD *a3)
{
  uint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (!v5)
  {
    int64x2_t v10 = a1 + 1;
    goto LABEL_21;
  }
  unint64_t v7 = *a2;
  unsigned int v8 = *((unsigned __int16 *)a2 + 4);
  unsigned int v9 = *((unsigned __int16 *)a2 + 5);
  do
  {
    while (1)
    {
      int64x2_t v10 = (uint64_t **)v5;
      unint64_t v11 = v5[4];
      if (v7 == v11) {
        break;
      }
      if (v7 > v11) {
        goto LABEL_18;
      }
LABEL_15:
      uint64_t v5 = *v10;
      uint64_t v6 = v10;
      if (!*v10) {
        goto LABEL_21;
      }
    }
    unsigned int v12 = *((unsigned __int16 *)v10 + 20);
    unsigned int v13 = *((unsigned __int16 *)v10 + 21);
    if (v8 == v12 && v9 == v13) {
      return v10;
    }
    BOOL v15 = v8 <= v12;
    if (v9 != v13) {
      BOOL v15 = v9 <= v13;
    }
    if (v15) {
      goto LABEL_15;
    }
    if (v9 == v13)
    {
      if (v12 > v8) {
        return v10;
      }
    }
    else if (v13 > v9)
    {
      return v10;
    }
LABEL_18:
    uint64_t v5 = v10[1];
  }
  while (v5);
  uint64_t v6 = v10 + 1;
LABEL_21:
  double v16 = (uint64_t *)v10;
  int64x2_t v10 = (uint64_t **)operator new(0x38uLL);
  *((_OWORD *)v10 + 2) = *a3;
  v10[6] = 0;
  *int64x2_t v10 = 0;
  v10[1] = 0;
  v10[2] = v16;
  *uint64_t v6 = (uint64_t *)v10;
  int v17 = (uint64_t *)**a1;
  double v18 = (uint64_t *)v10;
  if (v17)
  {
    *a1 = v17;
    double v18 = *v6;
  }
  sub_18DEEDADC(a1[1], v18);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v10;
}

uint64_t sub_18E130738(uint64_t a1)
{
  *(void *)a1 = &unk_1EDD12268;
  *(void *)(a1 + 8) = &unk_1EDD122A8;
  uint64_t v3 = (void **)(a1 + 16);
  sub_18E1309FC(&v3);
  return a1;
}

void sub_18E1307B0(uint64_t a1)
{
  *(void *)a1 = &unk_1EDD12268;
  *(void *)(a1 + 8) = &unk_1EDD122A8;
  uint64_t v1 = (void **)(a1 + 16);
  sub_18E1309FC(&v1);

  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E130848(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 16))(a2, a1);
}

__n128 sub_18E130878@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  long long v2 = *(_OWORD *)(a1 + 56);
  *(_OWORD *)a2 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 16) = v2;
  __n128 result = *(__n128 *)(a1 + 72);
  *(__n128 *)(a2 + 32) = result;
  return result;
}

uint64_t sub_18E130890(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(uint64_t **)(result + 16);
  for (uint64_t i = *(uint64_t **)(result + 24);
        v3 != i;
        __n128 result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 32))(v7, a2, a3))
  {
    uint64_t v7 = *v3++;
  }
  return result;
}

void sub_18E130900(uint64_t a1)
{
  *(void *)(a1 - 8) = &unk_1EDD12268;
  *(void *)a1 = &unk_1EDD122A8;
  uint64_t v1 = (void **)(a1 + 8);
  sub_18E1309FC(&v1);
}

void sub_18E130968(uint64_t a1)
{
  *(void *)(a1 - 8) = &unk_1EDD12268;
  *(void *)a1 = &unk_1EDD122A8;
  uint64_t v1 = (void **)(a1 + 8);
  sub_18E1309FC(&v1);

  JUMPOUT(0x192FA6240);
}

void sub_18E1309FC(void ***a1)
{
  uint64_t v1 = *a1;
  long long v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v7 = *--v4;
        uint64_t v6 = v7;
        *uint64_t v4 = 0;
        if (v7) {
          (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
        }
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_18E130AA8(void *a1)
{
  sub_18E1319E4(a1);

  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E130AE0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 32))(a2, a1);
}

double *sub_18E130B10@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(int64x2_t *)a2 = vdupq_n_s64(0xFFF0000000000000);
  *(_OWORD *)(a2 + 16) = xmmword_18E2199D0;
  *(int64x2_t *)(a2 + 32) = vdupq_n_s64(0x7FF0000000000000uLL);
  uint64_t v4 = a1[6];
  long long v7 = *(_OWORD *)a1[2];
  uint64_t v8 = v4;
  sub_18E1317F4((double *)a2, (double *)&v7);
  uint64_t v5 = a1[7];
  long long v7 = *(_OWORD *)a1[4];
  uint64_t v8 = v5;
  return sub_18E1317F4((double *)a2, (double *)&v7);
}

void *sub_18E130B9C(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v4 = *a2;
  uint64_t v5 = (char *)a2 + *(void *)(*a2 - 24);
  uint64_t v6 = *((void *)v5 + 2);
  int v7 = *((_DWORD *)v5 + 2);
  *((_DWORD *)v5 + 2) = v7 & 0xFFFFFEFB | 4;
  *(_DWORD *)((char *)a2 + *(void *)(v4 - 24) + 8) |= 0x400u;
  *(uint64_t *)((char *)a2 + *(void *)(v4 - 24) + 16) = a3;
  uint64_t v8 = a3 + 6;
  *(uint64_t *)((char *)a2 + *(void *)(v4 - 24) + 24) = v8;
  unsigned int v9 = (void *)std::ostream::operator<<();
  int64x2_t v10 = sub_18DEDD538(v9, (uint64_t)" ", 1);
  *(void *)((char *)v10 + *(void *)(*v10 - 24) + 24) = v8;
  unint64_t v11 = (void *)std::ostream::operator<<();
  unsigned int v12 = sub_18DEDD538(v11, (uint64_t)" ", 1);
  *(void *)((char *)v12 + *(void *)(*v12 - 24) + 24) = v8;
  unsigned int v13 = (void *)std::ostream::operator<<();
  sub_18DEDD538(v13, (uint64_t)" ", 1);
  *(uint64_t *)((char *)a2 + *(void *)(*a2 - 24) + 24) = v8;
  uint64_t v14 = (void *)std::ostream::operator<<();
  BOOL v15 = sub_18DEDD538(v14, (uint64_t)" ", 1);
  *(void *)((char *)v15 + *(void *)(*v15 - 24) + 24) = v8;
  double v16 = (void *)std::ostream::operator<<();
  int v17 = sub_18DEDD538(v16, (uint64_t)" ", 1);
  *(void *)((char *)v17 + *(void *)(*v17 - 24) + 24) = v8;
  double v18 = (void *)std::ostream::operator<<();
  sub_18DEDD538(v18, (uint64_t)" ", 1);
  *(uint64_t *)((char *)a2 + *(void *)(*a2 - 24) + 24) = v8;
  double v19 = (void *)std::ostream::operator<<();
  int v20 = sub_18DEDD538(v19, (uint64_t)" ", 1);
  *(void *)((char *)v20 + *(void *)(*v20 - 24) + 24) = v8;
  double v21 = (void *)std::ostream::operator<<();
  double v22 = sub_18DEDD538(v21, (uint64_t)" ", 1);
  *(void *)((char *)v22 + *(void *)(*v22 - 24) + 24) = v8;
  double v23 = (void *)std::ostream::operator<<();
  sub_18DEDD538(v23, (uint64_t)" ", 1);
  *(uint64_t *)((char *)a2 + *(void *)(*a2 - 24) + 24) = v8;
  double v24 = (void *)std::ostream::operator<<();
  double v25 = sub_18DEDD538(v24, (uint64_t)" ", 1);
  *(void *)((char *)v25 + *(void *)(*v25 - 24) + 24) = v8;
  double v26 = (void *)std::ostream::operator<<();
  BOOL v27 = sub_18DEDD538(v26, (uint64_t)" ", 1);
  *(void *)((char *)v27 + *(void *)(*v27 - 24) + 24) = v8;
  double v28 = (void *)std::ostream::operator<<();
  sub_18DEDD538(v28, (uint64_t)" ", 1);
  *(uint64_t *)((char *)a2 + *(void *)(*a2 - 24) + 24) = v8;
  double v29 = (void *)std::ostream::operator<<();
  double v30 = sub_18DEDD538(v29, (uint64_t)" ", 1);
  *(void *)((char *)v30 + *(void *)(*v30 - 24) + 24) = v8;
  double v31 = (void *)std::ostream::operator<<();
  double v32 = sub_18DEDD538(v31, (uint64_t)" ", 1);
  *(void *)((char *)v32 + *(void *)(*v32 - 24) + 24) = v8;
  double v33 = (void *)std::ostream::operator<<();
  __n128 result = sub_18DEDD538(v33, (uint64_t)"\n", 1);
  uint64_t v35 = *a2;
  *(uint64_t *)((char *)a2 + *(void *)(*a2 - 24) + 16) = v6;
  *(_DWORD *)((char *)a2 + *(void *)(v35 - 24) + 8) = v7;
  return result;
}

BOOL sub_18E130FA8(uint64_t a1, double *a2)
{
  if (*a2 < 0.0) {
    return 0;
  }
  double v2 = a2[1];
  if (v2 < 0.0 || v2 > *(double *)(a1 + 56) - *(double *)(a1 + 48)) {
    return 0;
  }
  uint64_t v4 = *(double **)(a1 + 16);
  return *a2 <= sqrt((*(double *)(*(void *)(a1 + 32) + 8) - v4[1]) * (*(double *)(*(void *)(a1 + 32) + 8) - v4[1])+ (**(double **)(a1 + 32) - *v4) * (**(double **)(a1 + 32) - *v4));
}

double sub_18E131008(uint64_t a1)
{
  return *(double *)(a1 + 56);
}

double sub_18E131010(uint64_t a1)
{
  return *(double *)(a1 + 48);
}

double sub_18E131018(uint64_t a1)
{
  uint64_t v1 = *(double **)(a1 + 32);
  double v2 = *(double **)(a1 + 16);
  double v3 = v1[1] - v2[1];
  return (*v1 - *v2) * (1.0 / sqrt(v3 * v3 + (*v1 - *v2) * (*v1 - *v2)));
}

double sub_18E131058()
{
  return 0.0;
}

double sub_18E131068(uint64_t a1)
{
  return *(double *)(a1 + 64);
}

void sub_18E131074(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  sub_18E12C12C((void **)a2, 4uLL);
  uint64_t v4 = (void *)a1[2];
  uint64_t v5 = *(void **)(a2 + 8);
  unint64_t v6 = *(void *)(a2 + 16);
  if ((unint64_t)v5 >= v6)
  {
    unsigned int v9 = *(void **)a2;
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - *(void *)a2) >> 3);
    unint64_t v11 = v10 + 1;
    if (v10 + 1 > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_69;
    }
    if (0x5555555555555556 * ((uint64_t)(v6 - (void)v9) >> 3) > v11) {
      unint64_t v11 = 0x5555555555555556 * ((uint64_t)(v6 - (void)v9) >> 3);
    }
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - (void)v9) >> 3) >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v11;
    }
    if (v12) {
      unint64_t v12 = (unint64_t)sub_18E12E008(v12);
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v14 = (void *)(v12 + 24 * v10);
    uint64_t v15 = a1[6];
    *uint64_t v14 = *v4;
    unint64_t v6 = v12 + 24 * v13;
    v14[1] = v4[1];
    v14[2] = v15;
    uint64_t v8 = v14 + 3;
    if (v5 != v9)
    {
      do
      {
        long long v16 = *(_OWORD *)(v5 - 3);
        *(v14 - 1) = *(v5 - 1);
        *(_OWORD *)(v14 - 3) = v16;
        v14 -= 3;
        v5 -= 3;
      }
      while (v5 != v9);
      uint64_t v5 = *(void **)a2;
    }
    *(void *)a2 = v14;
    *(void *)(a2 + 8) = v8;
    *(void *)(a2 + 16) = v6;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    uint64_t v7 = a1[6];
    *uint64_t v5 = *v4;
    v5[1] = v4[1];
    v5[2] = v7;
    uint64_t v8 = v5 + 3;
  }
  *(void *)(a2 + 8) = v8;
  int v17 = (void *)a1[4];
  if ((unint64_t)v8 < v6)
  {
    uint64_t v18 = a1[6];
    *uint64_t v8 = *v17;
    v8[1] = v17[1];
    v8[2] = v18;
    double v19 = v8 + 3;
    goto LABEL_34;
  }
  int v20 = *(void **)a2;
  unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v8 - *(void *)a2) >> 3);
  unint64_t v22 = v21 + 1;
  if (v21 + 1 > 0xAAAAAAAAAAAAAAALL) {
    goto LABEL_69;
  }
  if (0x5555555555555556 * ((uint64_t)(v6 - (void)v20) >> 3) > v22) {
    unint64_t v22 = 0x5555555555555556 * ((uint64_t)(v6 - (void)v20) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - (void)v20) >> 3) >= 0x555555555555555) {
    unint64_t v23 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v23 = v22;
  }
  if (v23) {
    unint64_t v23 = (unint64_t)sub_18E12E008(v23);
  }
  else {
    uint64_t v24 = 0;
  }
  double v25 = (void *)(v23 + 24 * v21);
  uint64_t v26 = a1[6];
  *double v25 = *v17;
  unint64_t v6 = v23 + 24 * v24;
  v25[1] = v17[1];
  double v25[2] = v26;
  double v19 = v25 + 3;
  if (v8 == v20)
  {
    *(void *)a2 = v25;
    *(void *)(a2 + 8) = v19;
    *(void *)(a2 + 16) = v6;
LABEL_33:
    operator delete(v8);
    unint64_t v6 = *(void *)(a2 + 16);
    goto LABEL_34;
  }
  do
  {
    long long v27 = *(_OWORD *)(v8 - 3);
    *(v25 - 1) = *(v8 - 1);
    *(_OWORD *)(v25 - 3) = v27;
    v25 -= 3;
    v8 -= 3;
  }
  while (v8 != v20);
  uint64_t v8 = *(void **)a2;
  *(void *)a2 = v25;
  *(void *)(a2 + 8) = v19;
  *(void *)(a2 + 16) = v6;
  if (v8) {
    goto LABEL_33;
  }
LABEL_34:
  *(void *)(a2 + 8) = v19;
  double v28 = (void *)a1[4];
  if ((unint64_t)v19 < v6)
  {
    uint64_t v29 = a1[7];
    *double v19 = *v28;
    v19[1] = v28[1];
    double v19[2] = v29;
    double v30 = v19 + 3;
    goto LABEL_51;
  }
  double v31 = *(void **)a2;
  unint64_t v32 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v19 - *(void *)a2) >> 3);
  unint64_t v33 = v32 + 1;
  if (v32 + 1 > 0xAAAAAAAAAAAAAAALL) {
    goto LABEL_69;
  }
  if (0x5555555555555556 * ((uint64_t)(v6 - (void)v31) >> 3) > v33) {
    unint64_t v33 = 0x5555555555555556 * ((uint64_t)(v6 - (void)v31) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - (void)v31) >> 3) >= 0x555555555555555) {
    unint64_t v34 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v34 = v33;
  }
  if (v34) {
    unint64_t v34 = (unint64_t)sub_18E12E008(v34);
  }
  else {
    uint64_t v35 = 0;
  }
  double v36 = (void *)(v34 + 24 * v32);
  uint64_t v37 = a1[7];
  *double v36 = *v28;
  unint64_t v6 = v34 + 24 * v35;
  v36[1] = v28[1];
  void v36[2] = v37;
  double v30 = v36 + 3;
  if (v19 == v31)
  {
    *(void *)a2 = v36;
    *(void *)(a2 + 8) = v30;
    *(void *)(a2 + 16) = v6;
LABEL_50:
    operator delete(v19);
    unint64_t v6 = *(void *)(a2 + 16);
    goto LABEL_51;
  }
  do
  {
    long long v38 = *(_OWORD *)(v19 - 3);
    *(v36 - 1) = *(v19 - 1);
    *(_OWORD *)(v36 - 3) = v38;
    v36 -= 3;
    v19 -= 3;
  }
  while (v19 != v31);
  double v19 = *(void **)a2;
  *(void *)a2 = v36;
  *(void *)(a2 + 8) = v30;
  *(void *)(a2 + 16) = v6;
  if (v19) {
    goto LABEL_50;
  }
LABEL_51:
  *(void *)(a2 + 8) = v30;
  uint64_t v39 = (void *)a1[2];
  if ((unint64_t)v30 < v6)
  {
    uint64_t v40 = a1[7];
    *double v30 = *v39;
    v30[1] = v39[1];
    v30[2] = v40;
    double v41 = v30 + 3;
    goto LABEL_68;
  }
  double v42 = *(void **)a2;
  unint64_t v43 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v30 - *(void *)a2) >> 3);
  unint64_t v44 = v43 + 1;
  if (v43 + 1 > 0xAAAAAAAAAAAAAAALL) {
LABEL_69:
  }
    sub_18DEE1FC8();
  if (0x5555555555555556 * ((uint64_t)(v6 - (void)v42) >> 3) > v44) {
    unint64_t v44 = 0x5555555555555556 * ((uint64_t)(v6 - (void)v42) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - (void)v42) >> 3) >= 0x555555555555555) {
    unint64_t v45 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v45 = v44;
  }
  if (v45) {
    unint64_t v45 = (unint64_t)sub_18E12E008(v45);
  }
  else {
    uint64_t v46 = 0;
  }
  double v47 = (void *)(v45 + 24 * v43);
  uint64_t v48 = a1[7];
  *double v47 = *v39;
  unint64_t v49 = v45 + 24 * v46;
  v47[1] = v39[1];
  double v47[2] = v48;
  double v41 = v47 + 3;
  if (v30 == v42)
  {
    *(void *)a2 = v47;
    *(void *)(a2 + 8) = v41;
    *(void *)(a2 + 16) = v49;
LABEL_67:
    operator delete(v30);
    goto LABEL_68;
  }
  do
  {
    long long v50 = *(_OWORD *)(v30 - 3);
    *(v47 - 1) = *(v30 - 1);
    *(_OWORD *)(v47 - 3) = v50;
    v47 -= 3;
    v30 -= 3;
  }
  while (v30 != v42);
  double v30 = *(void **)a2;
  *(void *)a2 = v47;
  *(void *)(a2 + 8) = v41;
  *(void *)(a2 + 16) = v49;
  if (v30) {
    goto LABEL_67;
  }
LABEL_68:
  *(void *)(a2 + 8) = v41;
}

void sub_18E1314B4(_Unwind_Exception *exception_object)
{
  double v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_18E1314D0(uint64_t a1, double *a2, int a3)
{
  double v6 = (*(double (**)(uint64_t))(*(void *)a1 + 88))(a1);
  double v7 = a2[3];
  double v8 = a2[4];
  double v10 = v8 * v9 + v7 * v6;
  double v11 = a2[5];
  double v13 = v10 + v11 * v12;
  if (a3)
  {
    if (a3 == 2)
    {
      if (fabs(v13) < 2.22044605e-16) {
        goto LABEL_20;
      }
    }
    else if (a3 == 1 && v13 <= 0.0)
    {
      goto LABEL_20;
    }
  }
  else if (v13 >= 0.0)
  {
    goto LABEL_20;
  }
  uint64_t v14 = *(double **)(a1 + 16);
  uint64_t v15 = *(double **)(a1 + 32);
  double v16 = v14[1];
  double v17 = *v15 - *v14;
  double v18 = v15[1] - v16;
  double v19 = v7 * v18 - v8 * v17;
  if (fabs(v19) >= 2.22044605e-16)
  {
    double v20 = *v14 - *a2;
    double v21 = v16 - a2[1];
    double v22 = (v20 * v8 - v21 * v7) / v19;
    if (v22 >= 0.0 && v22 <= 1.0)
    {
      double v24 = (v17 * -v21 + v20 * v18) / v19;
      if (v24 >= 0.0)
      {
        double v25 = a2[2] + v24 * v11;
        if (v25 >= *(double *)(a1 + 48) && v25 <= *(double *)(a1 + 56))
        {
          unint64_t v28 = *(void *)&v24 & 0xFFFFFFFFFFFFFF00;
          uint64_t v27 = LOBYTE(v24);
          return v28 | v27;
        }
      }
    }
  }
LABEL_20:
  uint64_t v27 = 0;
  unint64_t v28 = 0;
  return v28 | v27;
}

BOOL sub_18E131628(uint64_t a1)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 104))(a1);
  return v1 != 0;
}

double sub_18E131668(uint64_t a1, double *a2)
{
  double v2 = *(double **)(a1 + 16);
  double v3 = *v2;
  double v4 = v2[1];
  double v5 = *a2 - *v2;
  double v6 = a2[1] - v4;
  double v7 = *(double **)(a1 + 32);
  double v8 = *v7 - v3;
  double v9 = v7[1] - v4;
  double v10 = 1.0 / sqrt(v9 * v9 + v8 * v8);
  return v6 * (v9 * v10) + v5 * (v8 * v10) + (a2[2] - *(double *)(a1 + 48)) * (v10 * 0.0);
}

void *sub_18E1316D8@<X0>(void *a1@<X8>)
{
  __n128 result = operator new(0x20uLL);
  result[1] = 0;
  result[2] = 0;
  *__n128 result = &unk_1EDD1E4C8;
  result[3] = &unk_1EDD12158;
  *a1 = result + 3;
  a1[1] = result;
  return result;
}

void *sub_18E131744(uint64_t a1)
{
  return sub_18E1319E4((void *)(a1 - 8));
}

void sub_18E13174C(uint64_t a1)
{
  sub_18E1319E4((void *)(a1 - 8));

  JUMPOUT(0x192FA6240);
}

void *sub_18E131788@<X0>(void *a1@<X8>)
{
  __n128 result = operator new(0x20uLL);
  result[1] = 0;
  result[2] = 0;
  *__n128 result = &unk_1EDD1E4C8;
  result[3] = &unk_1EDD12158;
  *a1 = result + 3;
  a1[1] = result;
  return result;
}

double *sub_18E1317F4(double *result, double *a2)
{
  double v2 = result[3];
  if (v2 >= *a2) {
    double v2 = *a2;
  }
  result[3] = v2;
  double v3 = result[4];
  if (v3 >= a2[1]) {
    double v3 = a2[1];
  }
  result[4] = v3;
  double v4 = result[5];
  if (v4 >= a2[2]) {
    double v4 = a2[2];
  }
  result[5] = v4;
  double v5 = *a2;
  double v6 = result[1];
  if (*result > *a2) {
    double v5 = *result;
  }
  *__n128 result = v5;
  double v7 = a2[1];
  if (v6 > v7) {
    double v7 = v6;
  }
  result[1] = v7;
  double v8 = result[2];
  if (v8 <= a2[2]) {
    double v8 = a2[2];
  }
  result[2] = v8;
  return result;
}

void sub_18E13191C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDD1E4C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_18E13193C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDD1E4C8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E131990(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_18E1319B8()
{
}

uint64_t sub_18E1319D4()
{
  return 1;
}

uint64_t sub_18E1319DC()
{
  return 0;
}

void *sub_18E1319E4(void *a1)
{
  *a1 = &unk_1EDD12458;
  a1[1] = &unk_1EDD124F0;
  double v2 = (std::__shared_weak_count *)a1[5];
  if (v2) {
    sub_18DEE4E18(v2);
  }
  double v3 = (std::__shared_weak_count *)a1[3];
  if (v3) {
    sub_18DEE4E18(v3);
  }
  return a1;
}

uint64_t sub_18E131A5C(uint64_t a1)
{
  *(void *)a1 = &unk_1EDD12268;
  *(void *)(a1 + 8) = &unk_1EDD122A8;
  double v3 = (void **)(a1 + 16);
  sub_18E1309FC(&v3);
  return a1;
}

void sub_18E131AD4(uint64_t a1)
{
  *(void *)a1 = &unk_1EDD12268;
  *(void *)(a1 + 8) = &unk_1EDD122A8;
  char v1 = (void **)(a1 + 16);
  sub_18E1309FC(&v1);

  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E131B6C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 48))(a2, a1);
}

void sub_18E131B9C(uint64_t a1)
{
  *(void *)(a1 - 8) = &unk_1EDD12268;
  *(void *)a1 = &unk_1EDD122A8;
  char v1 = (void **)(a1 + 8);
  sub_18E1309FC(&v1);
}

void sub_18E131C04(uint64_t a1)
{
}

void sub_18E131C0C(uint64_t **a1, unint64_t a2)
{
  double v4 = (uint64_t *)(a1 + 1);
  double v3 = a1[1];
  if (v3)
  {
    double v5 = v4;
    double v6 = v3;
    do
    {
      unint64_t v7 = v6[4];
      BOOL v8 = v7 >= a2;
      if (v7 >= a2) {
        double v9 = (uint64_t **)v6;
      }
      else {
        double v9 = (uint64_t **)(v6 + 1);
      }
      if (v8) {
        double v5 = v6;
      }
      double v6 = *v9;
    }
    while (*v9);
    if (v5 != v4 && v5[4] <= a2)
    {
      double v10 = (uint64_t *)v5[1];
      if (v10)
      {
        do
        {
          double v11 = v10;
          double v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
      else
      {
        double v12 = v5;
        do
        {
          double v11 = (uint64_t *)v12[2];
          BOOL v13 = *v11 == (void)v12;
          double v12 = v11;
        }
        while (!v13);
      }
      if (*a1 == v5) {
        *a1 = v11;
      }
      a1[2] = (uint64_t *)((char *)a1[2] - 1);
      sub_18E01B97C(v3, v5);
      operator delete(v5);
    }
  }
}

void sub_18E131CE4(uint64_t a1)
{
  char v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_18E12CA60((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

void *sub_18E131D3C(void *a1)
{
  *a1 = &unk_1EDD12518;
  a1[12] = &unk_1EDD12418;
  sub_18E12EB68((uint64_t)(a1 + 15));
  return a1;
}

void sub_18E131DA4(void *a1)
{
  *a1 = &unk_1EDD12518;
  a1[12] = &unk_1EDD12418;
  sub_18E12EB68((uint64_t)(a1 + 15));

  JUMPOUT(0x192FA6240);
}

void sub_18E131E2C(uint64_t a1, uint64_t a2)
{
  (*(void (**)(double *__return_ptr, uint64_t))(*(void *)a2 + 24))(v3, a2);
  if (!sub_18E12DCD4(v3, (double *)(a1 + 16))) {
    sub_18E12F4CC((void *)(a1 + 96));
  }
}

uint64_t sub_18E131E9C(uint64_t a1, uint64_t a2)
{
  *(double *)&uint64_t result = COERCE_DOUBLE((*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 104))(a2, a1 + 16, *(unsigned int *)(a1 + 64)));
  if (v5 && *(double *)(a1 + 72) > *(double *)&result && *(void *)(a1 + 88) != a2)
  {
    *(double *)(a1 + 72) = *(double *)&result;
    *(void *)(a1 + 80) = a2;
  }
  return result;
}

uint64_t sub_18E131F18(uint64_t a1, uint64_t a2)
{
  *(double *)&uint64_t result = COERCE_DOUBLE((*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a2 + 104))(a2, a1 + 16, *(unsigned int *)(a1 + 64)));
  if (v5 && *(double *)(a1 + 72) > *(double *)&result && *(void *)(a1 + 88) != a2)
  {
    *(double *)(a1 + 72) = *(double *)&result;
    *(void *)(a1 + 80) = a2;
  }
  return result;
}

uint64_t sub_18E131F94(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

__n128 sub_18E131FB8(uint64_t a1, uint64_t a2)
{
  result.n128_u64[0] = 0x200000002;
  *(void *)(a1 + 24) = 0x200000002;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1EDD18BB8;
  if (a1 == a2)
  {
    double v17 = "this != &(A)";
    int v18 = 603;
    goto LABEL_16;
  }
  int v3 = *(_DWORD *)(a2 + 8);
  int v4 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = v4;
  uint64_t v5 = (v4 * v3);
  *(_DWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 20) = v3;
  double v6 = (unint64_t *)(a1 + 40);
  *(void *)(a1 + 32) = a1 + 40;
  if (*(_DWORD *)(a2 + 8) > 2u)
  {
    double v17 = "this->max_num_rows_ >= A.num_rows_";
    int v18 = 616;
    goto LABEL_16;
  }
  if (*(_DWORD *)(a2 + 12) >= 3u)
  {
    double v17 = "this->max_num_cols_ >= A.num_cols_";
    int v18 = 617;
LABEL_16:
    __assert_rtn("CNMatrix", "cnmatrix.h", v18, v17);
  }
  int v7 = *(_DWORD *)(a2 + 16);
  if (v7 > 3)
  {
    uint64_t v10 = (v7 - 2);
    double v11 = *(long long **)(a2 + 32);
    uint64_t v12 = (v7 - 1) >> 1;
    BOOL v13 = v11;
    uint64_t v14 = (_OWORD *)(a1 + 40);
    do
    {
      long long v15 = *v13++;
      *v14++ = v15;
      --v12;
    }
    while (v12);
    uint64_t v16 = v10;
    __n128 result = *(__n128 *)((char *)v11 + v16 * 8);
    *(__n128 *)&v6[v16] = result;
  }
  else if ((int)v5 >= 1)
  {
    BOOL v8 = *(unint64_t **)(a2 + 32);
    do
    {
      unint64_t v9 = *v8++;
      result.n128_u64[0] = v9;
      *v6++ = v9;
      --v5;
    }
    while (v5);
  }
  return result;
}

void sub_18E1320E4(_Unwind_Exception *a1)
{
  void *v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

void sub_18E132104(void *a1)
{
  *a1 = &unk_1EDD17478;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E132134(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E132140(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    unsigned int v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      int v4 = *(_DWORD *)(a1 + 16);
      int v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        uint64_t v6 = (v4 - 1);
        uint64_t v7 = *(void *)(a1 + 32);
        uint64_t v8 = 1;
        do
        {
          unint64_t v9 = &v13[v8];
          if (!v13[v8])
          {
            uint64_t v10 = *(void *)(v7 + 8 * v8);
            int v11 = v8;
            do
            {
              int v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              uint64_t v12 = *(void *)(v7 + 8 * v11);
              *(void *)(v7 + 8 * v11) = v10;
              *unint64_t v9 = 1;
              unint64_t v9 = &v13[v11];
              uint64_t v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

void sub_18E13220C(void *a1)
{
  *a1 = &unk_1EDD17478;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E13223C(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E132248(uint64_t a1)
{
  sub_18DEF3CF4(a1, v1);
}

__n128 sub_18E13226C(uint64_t a1, uint64_t a2)
{
  result.n128_u64[0] = 0x200000001;
  *(void *)(a1 + 24) = 0x200000001;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1EDD181C8;
  if (a1 == a2)
  {
    double v17 = "this != &(A)";
    int v18 = 603;
    goto LABEL_16;
  }
  int v3 = *(_DWORD *)(a2 + 8);
  int v4 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = v4;
  uint64_t v5 = (v4 * v3);
  *(_DWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 20) = v3;
  uint64_t v6 = (unint64_t *)(a1 + 40);
  *(void *)(a1 + 32) = a1 + 40;
  if (*(_DWORD *)(a2 + 8) > 1u)
  {
    double v17 = "this->max_num_rows_ >= A.num_rows_";
    int v18 = 616;
    goto LABEL_16;
  }
  if (*(_DWORD *)(a2 + 12) >= 3u)
  {
    double v17 = "this->max_num_cols_ >= A.num_cols_";
    int v18 = 617;
LABEL_16:
    __assert_rtn("CNMatrix", "cnmatrix.h", v18, v17);
  }
  int v7 = *(_DWORD *)(a2 + 16);
  if (v7 > 3)
  {
    uint64_t v10 = (v7 - 2);
    int v11 = *(long long **)(a2 + 32);
    uint64_t v12 = (v7 - 1) >> 1;
    BOOL v13 = v11;
    uint64_t v14 = (_OWORD *)(a1 + 40);
    do
    {
      long long v15 = *v13++;
      *v14++ = v15;
      --v12;
    }
    while (v12);
    uint64_t v16 = v10;
    __n128 result = *(__n128 *)((char *)v11 + v16 * 8);
    *(__n128 *)&v6[v16] = result;
  }
  else if ((int)v5 >= 1)
  {
    uint64_t v8 = *(unint64_t **)(a2 + 32);
    do
    {
      unint64_t v9 = *v8++;
      result.n128_u64[0] = v9;
      *v6++ = v9;
      --v5;
    }
    while (v5);
  }
  return result;
}

void sub_18E13239C(_Unwind_Exception *a1)
{
  void *v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

void sub_18E1323BC(void *a1)
{
  if (a1)
  {
    sub_18E1323BC(*a1);
    sub_18E1323BC(a1[1]);
    sub_18E068ED0(a1 + 4);
    operator delete(a1);
  }
}

uint64_t sub_18E132410(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a2 + 8); v2 != a1 && i != a2; uint64_t i = *(void *)(i + 8))
  {
    unint64_t v5 = *(void *)(v2 + 16);
    unint64_t v6 = *(void *)(i + 16);
    if (v5 != v6)
    {
      if (v5 < v6) {
        return 0xFFFFFFFFLL;
      }
      else {
        return 1;
      }
    }
    uint64_t v2 = *(void *)(v2 + 8);
  }
  if (v2 == a1) {
    return (i == a2) - 1;
  }
  else {
    return 1;
  }
}

void sub_18E132468(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDD1E5A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_18E132488(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDD1E5A8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E1324DC(uint64_t result)
{
  *(void *)(result + 96) = &unk_1EDD17478;
  *(void *)(result + 32) = &unk_1EDD17478;
  return result;
}

uint64_t raven::GnssMeasurementPreprocessor::HandleEvent(raven::GnssMeasurementPreprocessor *this, const raven::PositionEvent *a2)
{
  if (!*(unsigned char *)this)
  {
    if (cnprint::CNPrinter::GetLogLevel(this) > 1) {
      return 0;
    }
    LOWORD(v65) = 12;
    LOBYTE(v64) = 1;
    double v17 = "#gmp,HandleEvent(pos),not configured";
LABEL_21:
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v65, (unsigned __int8 *)&v64, v17, v12, v13, v14, v15, v16, SLOBYTE(v60));
    return 0;
  }
  unsigned int v4 = *((unsigned __int8 *)a2 + 200);
  if (v4 < 0x11 && ((0x13DE9u >> v4) & 1) != 0) {
    return 1;
  }
  if (*((unsigned char *)a2 + 201))
  {
    if (!*((unsigned char *)a2 + 202))
    {
      LOWORD(v65) = 12;
      LOBYTE(v64) = 2;
      uint64_t v5 = (*(uint64_t (**)(const raven::PositionEvent *))(*(void *)a2 + 16))(a2);
      double v61 = v6 + (double)v5;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v65, (unsigned __int8 *)&v64, "#gmp,HandleEvent(pos),ignoring 2D Horizontal PositionEvent,t,%.3lf,type,%u", v7, v8, v9, v10, v11, SLOBYTE(v61));
      return 1;
    }
    goto LABEL_10;
  }
  if (!*((unsigned char *)a2 + 280))
  {
    LOWORD(v65) = 12;
    LOBYTE(v64) = 3;
    uint64_t v34 = (*(uint64_t (**)(const raven::PositionEvent *))(*(void *)a2 + 16))(a2);
    double v60 = v35 + (double)v34;
    double v17 = "#gmp,HandleEvent(pos),Failed to handle PositionEvent,t,%.3lf,type,%u";
    goto LABEL_21;
  }
LABEL_10:
  uint64_t v65 = &unk_1EDD137C0;
  memcpy(v66, (char *)a2 + 8, sizeof(v66));
  if (sub_18E0B99D0((uint64_t)&v65))
  {
    uint64_t LogLevel = (cnprint::CNPrinter *)sub_18E0B9CE0((uint64_t)&v65);
    if (LogLevel)
    {
      uint64_t v19 = *((void *)this + 1);
      if (*(unsigned char *)(v19 + 2561))
      {
        double v20 = fabs(v66[25]);
        if (v20 <= 1.30899694)
        {
          if (v20 <= 1.04719755)
          {
            if (v20 <= 1.04545222)
            {
              *((unsigned char *)this + 2336) = 1;
              *((void *)this + 291) = *(void *)(v19 + 3128);
              if (!cnprint::CNPrinter::GetLogLevel(LogLevel))
              {
                __int16 v64 = 12;
                unsigned __int8 v63 = 0;
                uint64_t v59 = *((void *)this + 291);
                *((unsigned char *)this + 2336) = 1;
                cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v64, &v63, "#gmp,Operate normally,elevation,%.2lf,use_model,%d", v54, v55, v56, v57, v58, v59);
              }
            }
            else if (!cnprint::CNPrinter::GetLogLevel(LogLevel))
            {
              __int16 v64 = 12;
              unsigned __int8 v63 = 0;
              uint64_t v53 = *((void *)this + 291);
              *((unsigned char *)this + 2336) = 1;
              cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v64, &v63, "#gmp,Maintain current state,elevation,%.2lf,use_model,%d", v48, v49, v50, v51, v52, v53);
            }
          }
          else
          {
            if (v20 <= 1.30725161 && !*((unsigned char *)this + 2336))
            {
              uint64_t LogLevel = (cnprint::CNPrinter *)cnprint::CNPrinter::GetLogLevel(LogLevel);
              if (!LogLevel)
              {
                __int16 v64 = 12;
                unsigned __int8 v63 = 0;
                cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v64, &v63, "#gmp,Below cutoff and below hysteresis region; use local model",
                  v36,
                  v37,
                  v38,
                  v39,
                  v40,
                  SLOBYTE(v60));
              }
              *((unsigned char *)this + 2336) = 1;
              uint64_t v19 = *((void *)this + 1);
            }
            double v41 = *(double *)(v19 + 3128);
            if (v41 < 15.0) {
              double v41 = 15.0;
            }
            *((double *)this + 291) = v41;
            if (!cnprint::CNPrinter::GetLogLevel(LogLevel))
            {
              __int16 v64 = 12;
              unsigned __int8 v63 = 0;
              uint64_t v47 = *((void *)this + 291);
              *((unsigned char *)this + 2336) = 1;
              cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v64, &v63, "#gmp,Adjusting elevation threshold,elevation,%.2lf,use_model,%d", v42, v43, v44, v45, v46, v47);
            }
          }
          goto LABEL_17;
        }
        if (!cnprint::CNPrinter::GetLogLevel(LogLevel))
        {
          __int16 v64 = 12;
          unsigned __int8 v63 = 0;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v64, &v63, "#gmp,Above cutoff; do not use local model",
            v21,
            v22,
            v23,
            v24,
            v25,
            SLOBYTE(v60));
        }
      }
      *((unsigned char *)this + 2336) = 0;
LABEL_17:
      memcpy((char *)this + 536, v66, 0x160uLL);
      return 1;
    }
  }
  __int16 v64 = 12;
  unsigned __int8 v63 = 4;
  uint64_t v27 = (*(uint64_t (**)(const raven::PositionEvent *))(*(void *)a2 + 16))(a2);
  double v62 = v28 + (double)v27;
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v64, &v63, "#gmp,Could not fill in LLA/ECEF for incoming position,t,%.3lf", v29, v30, v31, v32, v33, SLOBYTE(v62));
  return 0;
}

uint64_t raven::GnssMeasurementPreprocessor::IsConfigured(raven::GnssMeasurementPreprocessor *this)
{
  return *(unsigned __int8 *)this;
}

BOOL raven::GnssMeasurementPreprocessor::CalculateApproximateTimeOfFlight(double *a1, uint64_t a2, uint64_t a3, double *a4)
{
  if (*(unsigned char *)a1)
  {
    __int16 v22 = 0;
    long long v23 = 0u;
    long long v24 = 0u;
    int v25 = 0;
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    int v28 = 0;
    int v7 = (*(uint64_t (**)(uint64_t, uint64_t, __int16 *, double *, unsigned __int8 *, unsigned __int8 *))(*(void *)(a3 + 32) + 56))(a3 + 32, a2, &v22, &v29, v33, v32);
    BOOL v8 = v7 == 0;
    if (v7)
    {
      *(_WORD *)uint64_t v33 = 12;
      v32[0] = 3;
      char v9 = sub_18E017C64(a3);
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v33, v32, "#gmp,Could not position the satellite for approximiate time of flight,SV,%s", v10, v11, v12, v13, v14, v9);
    }
    else
    {
      *a4 = sqrt((v30 - a1[103]) * (v30 - a1[103]) + (v29 - a1[102]) * (v29 - a1[102]) + (v31 - a1[104])
                                                                                       * (v31 - a1[104]))
          / 299792458.0;
    }
  }
  else
  {
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)a1) <= 1)
    {
      __int16 v22 = 12;
      v33[0] = 1;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v22, v33, "#gmp,CalculateApproximateTimeOfFlight,not configured", v15, v16, v17, v18, v19, v21);
    }
    return 0;
  }
  return v8;
}

uint64_t raven::GnssMeasurementPreprocessor::Configure(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(unsigned char *)a1)
  {
    __int16 v27 = 12;
    unsigned __int8 v26 = 3;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v27, &v26, "#gmp,configured more than once", a4, a5, a6, a7, a8, v19);
  }
  *(unsigned char *)a1 = 0;
  uint64_t v10 = *a2;
  if (!*a2)
  {
    __int16 v25 = 12;
    char v24 = 4;
    uint64_t v13 = "#gmp,configured with null raven parameters";
    uint64_t v14 = &v25;
    uint64_t v15 = &v24;
LABEL_14:
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v14, (unsigned __int8 *)v15, v13, a4, a5, a6, a7, a8, v19);
    return 0xFFFFFFFFLL;
  }
  if (!*(unsigned char *)(v10 + 33))
  {
    __int16 v23 = 12;
    char v22 = 4;
    uint64_t v13 = "#gmp,configured with uninitialized raven parameters";
    uint64_t v14 = &v23;
    uint64_t v15 = &v22;
    goto LABEL_14;
  }
  double v11 = *(double *)(v10 + 3128);
  if ((*(void *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (v11 <= 90.0 ? (BOOL v12 = v11 < -10.0) : (BOOL v12 = 1), v12))
  {
    __int16 v21 = 12;
    unsigned __int8 v20 = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v21, &v20, "#gmp,Configure() failed. Invalid local ionosphere model minimum satellite elevation threshold,thresh,%.2lf", a4, a5, a6, a7, a8, SLOBYTE(v11));
    return 0xFFFFFFFFLL;
  }
  *(double *)(a1 + 2328) = v11;
  raven::GnssReceiverBandCorrectionsManager::Configure((void *)(a1 + 1280), (const raven::RavenParameters *)v10);
  uint64_t v17 = *a2;
  if (*(unsigned char *)(*a2 + 577))
  {
    if (*(unsigned char *)(a1 + 2600))
    {
      sub_18E011990(a1 + 2560);
      uint64_t v17 = *a2;
    }
    *(void *)(a1 + 2552) = v17;
    *(_OWORD *)(a1 + 2560) = 0u;
    *(_OWORD *)(a1 + 2576) = 0u;
    *(_DWORD *)(a1 + 2592) = 1065353216;
    *(unsigned char *)(a1 + 2600) = 1;
    uint64_t v17 = *a2;
  }
  uint64_t v18 = 0;
  switch(*(_DWORD *)(v17 + 552))
  {
    case 0:
      goto LABEL_28;
    case 1:
      uint64_t v18 = raven::GNSSUncertaintyScaling::KarooGNSSUncertaintyWrapper::Instance(0);
      goto LABEL_28;
    case 2:
      uint64_t v18 = raven::GNSSUncertaintyScaling::EurekaGNSSUncertaintyWrapper::Instance(0);
      goto LABEL_28;
    case 3:
      uint64_t v18 = raven::GNSSUncertaintyScaling::Fire6orOlderGNSSUncertaintyWrapper::Instance(0);
      goto LABEL_28;
    case 4:
      uint64_t v18 = raven::GNSSUncertaintyScaling::Fire7orNewerPhoneGNSSUncertaintyWrapper::Instance(0);
      goto LABEL_28;
    case 5:
      uint64_t v18 = raven::GNSSUncertaintyScaling::Fire7orNewerWatchGNSSUncertaintyWrapper::Instance(0);
LABEL_28:
      *(void *)(a1 + 2608) = v18;
      uint64_t v17 = *a2;
      *(void *)(a1 + 8) = *a2;
      if (v17) {
        goto LABEL_29;
      }
      goto LABEL_30;
    default:
      *(void *)(a1 + 8) = v17;
LABEL_29:
      *(unsigned char *)(a1 + 1056) = *(unsigned char *)(v17 + 588);
      *(unsigned char *)(a1 + 1057) = *(unsigned char *)(v17 + 597);
LABEL_30:
      uint64_t result = 0;
      *(unsigned char *)a1 = 1;
      break;
  }
  return result;
}

uint64_t raven::GnssMeasurementPreprocessor::GetCNSatIDFromGnssId(cnprint::CNPrinter *a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!*(unsigned char *)a1)
  {
    if (cnprint::CNPrinter::GetLogLevel(a1) <= 1)
    {
      LOWORD(__p[0]) = 12;
      LOBYTE(v33) = 1;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, (unsigned __int8 *)&v33, "#gmp,GetCNSatIDFromGnssId,not configured", v16, v17, v18, v19, v20, v28);
    }
    return 0;
  }
  unint64_t v33 = *a2;
  if (v33 == 2)
  {
    int v8 = (int)(v33 >> 16) >> 24;
    char v9 = (uint64_t *)*((void *)a1 + 130);
    if (!v9) {
      goto LABEL_13;
    }
    uint64_t v10 = (void *)((char *)a1 + 1040);
    uint64_t v11 = *((void *)a1 + 130);
    do
    {
      int v12 = *(_DWORD *)(v11 + 28);
      BOOL v13 = v12 < v8;
      if (v12 >= v8) {
        uint64_t v14 = (uint64_t *)v11;
      }
      else {
        uint64_t v14 = (uint64_t *)(v11 + 8);
      }
      if (!v13) {
        uint64_t v10 = (void *)v11;
      }
      uint64_t v11 = *v14;
    }
    while (*v14);
    if (v10 == (void *)((char *)a1 + 1040) || *((_DWORD *)v10 + 7) > v8)
    {
LABEL_13:
      LOWORD(__p[0]) = 12;
      LOBYTE(v32) = 3;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, (unsigned __int8 *)&v32, "#gmp,Slot number for frequency could not be found in active list,freq,%i", a4, a5, a6, a7, a8, v8);
      return 0;
    }
    while (1)
    {
      while (1)
      {
        int v15 = *((_DWORD *)v9 + 7);
        if (v15 <= v8) {
          break;
        }
        char v9 = (uint64_t *)*v9;
        if (!v9) {
          goto LABEL_20;
        }
      }
      if (v15 >= v8) {
        break;
      }
      char v9 = (uint64_t *)v9[1];
      if (!v9) {
LABEL_20:
      }
        sub_18DEDE720("map::at:  key not found");
    }
    BYTE4(v33) = *((_DWORD *)v9 + 8);
  }
  if (sub_18E016D4C((int *)&v33, a3)) {
    return 1;
  }
  __int16 v32 = 12;
  unsigned __int8 v31 = 4;
  sub_18E015C3C((uint64_t)&v33, __p);
  if (v30 >= 0) {
    __int16 v27 = __p;
  }
  else {
    LOBYTE(v27) = __p[0];
  }
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v32, &v31, "#gmp,Could not fill in CN sat ID for SV,SV,%s", v22, v23, v24, v25, v26, (char)v27);
  if (v30 < 0) {
    operator delete(__p[0]);
  }
  return 0;
}

void sub_18E132DC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t raven::GnssMeasurementPreprocessor::EstimateCoarseReceiverTaiTime(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, int8x16_t a10)
{
  __int16 v172 = 0;
  long long v173 = 0u;
  long long v174 = 0u;
  int v175 = 0;
  uint64_t v176 = 0;
  uint64_t v177 = 0;
  int v178 = 0;
  __int16 v165 = 0;
  long long v166 = 0u;
  long long v167 = 0u;
  int v168 = 0;
  uint64_t v169 = 0;
  uint64_t v170 = 0;
  int v171 = 0;
  __int16 v158 = 0;
  uint64_t v14 = (raven::GnssSvDatabase *)(a1 + 984);
  long long v159 = 0u;
  long long v160 = 0u;
  int v161 = 0;
  uint64_t v162 = 0;
  uint64_t v163 = 0;
  int v164 = 0;
  int v15 = raven::GnssSvDatabase::PopulateGnssUTCParametersWithGps((raven::GnssSvDatabase *)(a1 + 984), (cnnavigation::GNSSUTCParameters *)&v172, 0.0, a10, a3, a4, a5, a6, a7, a8);
  char v24 = raven::GnssSvDatabase::PopulateGnssUTCParametersWithGlonass(v14, (cnnavigation::GNSSUTCParameters *)&v165, v16, v17, v18, v19, v20, v21, v22, v23);
  char v31 = raven::GnssSvDatabase::PopulateGnssUTCParametersWithGalileo(v14, (cnnavigation::GNSSUTCParameters *)&v158, v25, v26, v27, v28, v29, v30);
  long long v173 = 0uLL;
  long long v166 = 0uLL;
  double v155 = 0;
  long long v156 = 0;
  uint64_t v157 = 0;
  uint64_t v39 = *(void *)(a2 + 72);
  uint64_t v38 = *(void *)(a2 + 80);
  if (v39 == v38)
  {
    char v127 = 0;
    goto LABEL_115;
  }
  char v141 = v31;
  uint64_t v143 = a3 + 8;
  int v144 = 0;
  uint64_t v142 = a4;
  uint64_t v40 = a3;
  do
  {
    unsigned int v41 = *(unsigned __int8 *)(v39 + 8);
    BOOL v42 = v41 > 9;
    int v43 = (1 << v41) & 0x2BB;
    if (!v42 && v43 != 0)
    {
      int v45 = *(unsigned __int8 *)(v39 + 197);
LABEL_8:
      if (!v45) {
        goto LABEL_106;
      }
      goto LABEL_9;
    }
    int v45 = *(unsigned __int8 *)(v39 + 197);
    if (*(unsigned char *)(*(void *)(a1 + 8) + 3792)) {
      BOOL v84 = 1;
    }
    else {
      BOOL v84 = v45 == 0;
    }
    if (v84) {
      goto LABEL_8;
    }
    if (*(unsigned char *)(v39 + 196) == 1) {
      goto LABEL_106;
    }
LABEL_9:
    LODWORD(v154) = 0;
    WORD2(v154) = 32512;
    long long v153 = 0uLL;
    double v152 = 0.0;
    int v151 = 0;
    sub_18E13382C(v39, *(void *)(a1 + 2304), &v152, &v151);
    if ((*(_DWORD *)v39 == 16 || *(_DWORD *)v39 == 1)
      && *(unsigned char *)(v39 + 8) == 1
      && *(unsigned char *)(v39 + 9)
      && *(unsigned char *)(v39 + 12)
      && sub_18E13B3A8((int *)v39)
      && *(double *)(v39 + 40) >= 0.0
      && *(float *)(v39 + 48) > 0.0)
    {
      ++v144;
      if (!*(unsigned char *)(a1 + 2208))
      {
        LOWORD(__p[0]) = 12;
        LOBYTE(v179[0]) = 3;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, (unsigned __int8 *)v179, "#gmp,EstimateCoarseReceiverTaiTime,GPS week number is not available", v46, v47, v48, v49, v50, v139);
        goto LABEL_106;
      }
      LODWORD(v180) = v151 + *(_DWORD *)(a1 + 2212);
      if ((v15 & 1) == 0)
      {
        LOWORD(__p[0]) = 12;
        LOBYTE(v179[0]) = 3;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, (unsigned __int8 *)v179, "#gmp,EstimateCoarseReceiverTaiTime,GPS UTC info not available", v46, v47, v48, v49, v50, v139);
        goto LABEL_106;
      }
      v181[0] = v152;
      cnnavigation::TAITime::TAITime(__p, (double *)&v180, (cnnavigation::GNSSUTCParameters *)&v172);
      goto LABEL_40;
    }
    if (*(_DWORD *)v39 == 8
      && *(unsigned char *)(v39 + 8) == 7
      && *(unsigned char *)(v39 + 9)
      && *(unsigned char *)(v39 + 12)
      && sub_18E13B3A8((int *)v39)
      && *(double *)(v39 + 40) >= 0.0
      && *(float *)(v39 + 48) > 0.0)
    {
      ++v144;
      if (!*(unsigned char *)(a1 + 2208))
      {
        LOWORD(__p[0]) = 12;
        LOBYTE(v179[0]) = 3;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, (unsigned __int8 *)v179, "#gmp,EstimateCoarseReceiverTaiTime,Galileo week number is not available", v51, v52, v53, v54, v55, v139);
        goto LABEL_106;
      }
      LODWORD(v180) = *(_DWORD *)(a1 + 2212) + v151 - 1024;
      if ((v141 & 1) == 0)
      {
        LOWORD(__p[0]) = 12;
        LOBYTE(v179[0]) = 3;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, (unsigned __int8 *)v179, "#gmp,EstimateCoarseReceiverTaiTime,Galileo UTC info not available", v51, v52, v53, v54, v55, v139);
        goto LABEL_106;
      }
      v181[0] = v152;
      cnnavigation::TAITime::TAITime(__p, (double *)&v180, (cnnavigation::GNSSUTCParameters *)&v158);
LABEL_40:
      long long v153 = *(_OWORD *)__p;
      int v61 = *(_DWORD *)v39;
      WORD2(v154) = *(_WORD *)(v39 + 4);
      LODWORD(v154) = v61;
      goto LABEL_41;
    }
    if (*(_DWORD *)v39 == 2
      && *(unsigned char *)(v39 + 8) == 3
      && *(unsigned char *)(v39 + 9)
      && *(unsigned char *)(v39 + 13)
      && sub_18E13B3A8((int *)v39)
      && *(double *)(v39 + 40) >= 0.0
      && *(float *)(v39 + 48) > 0.0)
    {
      ++v144;
      v181[0] = 0.0;
      if (!*(unsigned char *)(a1 + 2216))
      {
        LOWORD(__p[0]) = 12;
        LOBYTE(v179[0]) = 3;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, (unsigned __int8 *)v179, "#gmp,EstimateCoarseReceiverTaiTime,Glonass day number is not available", v56, v57, v58, v59, v60, v139);
        goto LABEL_106;
      }
      LODWORD(v180) = *(_DWORD *)(a1 + 2220);
      if ((v24 & 1) == 0)
      {
        LOWORD(__p[0]) = 12;
        LOBYTE(v179[0]) = 3;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, (unsigned __int8 *)v179, "#gmp,EstimateCoarseReceiverTaiTime,GLONASS UTC info not available", v56, v57, v58, v59, v60, v139);
        goto LABEL_106;
      }
      v179[0] = 0;
      sub_18E133944(v39, *(void *)(a1 + 2304), v181, v179);
      LODWORD(v180) = v180 + v179[0];
      cnnavigation::TAITime::TAITime(__p, (int *)&v180, (cnnavigation::GNSSUTCParameters *)&v165);
      goto LABEL_40;
    }
LABEL_41:
    if (!sub_18E01B268(&v154)) {
      goto LABEL_106;
    }
    sub_18DEDE7B0(__p, "");
    char v149 = 0;
    int v150 = -1;
    if (raven::GnssMeasurementPreprocessor::GetCNSatIDFromGnssId((cnprint::CNPrinter *)a1, &v154, (uint64_t)__p, v62, v63, v64, v65, v66))
    {
      int v67 = *(unsigned __int8 *)(v39 + 8);
      double v68 = 1575420000.0;
      if (v67 != 1)
      {
        double v68 = 1575420000.0;
        if (v67 != 7)
        {
          if (v67 != 3)
          {
            LOWORD(v179[0]) = 12;
            LOBYTE(v146) = 4;
            sub_18E015C3C((uint64_t)&v154, &v180);
            uint64_t v90 = &v180;
            if (v181[1] < 0.0) {
              LOBYTE(v90) = (_BYTE)v180;
            }
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)v179, (unsigned __int8 *)&v146, "#gmp,EstimateCoarseReceiverTaiTime,unexpected band from SV with decoded time,SV,%s,band,%i", v85, v86, v87, v88, v89, (char)v90);
            goto LABEL_65;
          }
          int v69 = *(char *)(v39 + 5);
          if ((v69 - 7) < 0xFFFFFFF2)
          {
            LOWORD(v179[0]) = 12;
            LOBYTE(v146) = 4;
            sub_18E015C3C((uint64_t)&v154, &v180);
            unint64_t v75 = &v180;
            if (v181[1] < 0.0) {
              LOBYTE(v75) = (_BYTE)v180;
            }
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)v179, (unsigned __int8 *)&v146, "#gmp,EstimateCoarseReceiverTaiTime,could not determine GLONASS center frequency,SV,%s", v70, v71, v72, v73, v74, (char)v75);
LABEL_65:
            if (SHIBYTE(v181[1]) < 0) {
              operator delete(v180);
            }
            char v82 = 0;
            int v83 = 0;
            goto LABEL_101;
          }
          double v68 = (double)(char)v69 * 562500.0 + 1602000000.0;
        }
      }
      uint64_t v91 = sub_18E01B8A0(v40, (uint64_t)__p);
      if (v143 == v91)
      {
        LOWORD(v179[0]) = 12;
        LOBYTE(v146) = 3;
        sub_18E015C3C((uint64_t)&v154, &v180);
        float64x2_t v106 = &v180;
        if (v181[1] < 0.0) {
          LOBYTE(v106) = (_BYTE)v180;
        }
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v179, (unsigned __int8 *)&v146, "#gmp,EstimateCoarseReceiverTaiTime,could not use SV due to lack of sat data,SV,%s", v101, v102, v103, v104, v105, (char)v106);
        if (SHIBYTE(v181[1]) < 0) {
          operator delete(v180);
        }
        int v83 = 0;
LABEL_100:
        char v82 = 1;
        goto LABEL_101;
      }
      uint64_t v92 = *(void *)(v91 + 64);
      double v146 = 0.0;
      LOWORD(v180) = 0;
      memset(v181, 0, sizeof(v181));
      int v182 = 0;
      uint64_t v183 = 0;
      uint64_t v184 = 0;
      int v185 = 0;
      if (!(*(unsigned int (**)(double))(*(void *)(v92 + 32) + 96))(v68))
      {
        int v140 = v15;
        uint64_t v107 = v40;
        *(double *)v93.i64 = v146;
        double v180 = 0;
        v181[0] = 0.0;
        CNTimeSpan::SetTimeSpan((uint64_t *)&v180, 0, v93, v94);
        uint64_t v110 = CNTimeSpan::operator-((uint64_t)&v153, &v180, v108, v109);
        uint64_t v112 = v110;
        uint64_t v113 = v111;
        float64x2_t v114 = v156;
        if (v156 < v157)
        {
          int v83 = 0;
          *long long v156 = v110;
          v114[1] = v111;
          long long v156 = v114 + 2;
          char v82 = 1;
          uint64_t v40 = v107;
          int v15 = v140;
          goto LABEL_101;
        }
        uint64_t v115 = ((char *)v156 - (unsigned char *)v155) >> 4;
        unint64_t v116 = v115 + 1;
        if ((unint64_t)(v115 + 1) >> 60) {
          sub_18DEE1FC8();
        }
        uint64_t v117 = (char *)v157 - (unsigned char *)v155;
        if (((char *)v157 - (unsigned char *)v155) >> 3 > v116) {
          unint64_t v116 = v117 >> 3;
        }
        if ((unint64_t)v117 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v118 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v118 = v116;
        }
        if (v118) {
          float64x2_t v119 = (char *)sub_18DFF7B64((uint64_t)&v157, v118);
        }
        else {
          float64x2_t v119 = 0;
        }
        float64x2_t v120 = (uint64_t *)&v119[16 * v115];
        *float64x2_t v120 = v112;
        v120[1] = v113;
        unint64_t v122 = (char *)v155;
        float64x2_t v121 = (char *)v156;
        uint64_t v123 = (char *)v120;
        uint64_t v40 = v107;
        if (v156 != v155)
        {
          do
          {
            *((_OWORD *)v123 - 1) = *((_OWORD *)v121 - 1);
            v123 -= 16;
            v121 -= 16;
          }
          while (v121 != v122);
          float64x2_t v121 = (char *)v155;
        }
        int v15 = v140;
        uint64_t v124 = v120 + 2;
        double v155 = v123;
        long long v156 = v120 + 2;
        uint64_t v157 = (uint64_t *)&v119[16 * v118];
        if (v121) {
          operator delete(v121);
        }
        int v83 = 0;
        long long v156 = v124;
        goto LABEL_100;
      }
      LOWORD(v179[0]) = 12;
      unsigned __int8 v145 = 3;
      sub_18E015C3C((uint64_t)&v154, &v180);
      float64x2_t v100 = &v180;
      if (v181[1] < 0.0) {
        LOBYTE(v100) = (_BYTE)v180;
      }
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v179, &v145, "#gmp,EstimateCoarseReceiverTaiTime,could not use SV because clock offset could not be evaluated,SV,%s", v95, v96, v97, v98, v99, (char)v100);
    }
    else
    {
      LOWORD(v179[0]) = 12;
      LOBYTE(v146) = 3;
      sub_18E015C3C((uint64_t)&v154, &v180);
      uint64_t v81 = &v180;
      if (v181[1] < 0.0) {
        LOBYTE(v81) = (_BYTE)v180;
      }
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v179, (unsigned __int8 *)&v146, "#gmp,EstimateCoarseReceiverTaiTime,could not evaluate CNSatId,SV,%s", v76, v77, v78, v79, v80, (char)v81);
    }
    if (SHIBYTE(v181[1]) < 0) {
      operator delete(v180);
    }
    char v82 = 0;
    int v83 = 1;
LABEL_101:
    if (v148 < 0)
    {
      operator delete(__p[0]);
      if (v82) {
        goto LABEL_106;
      }
    }
    else if (v82)
    {
      goto LABEL_106;
    }
    if (!v83) {
      goto LABEL_116;
    }
LABEL_106:
    v39 += 200;
  }
  while (v39 != v38);
  float64x2_t v125 = v155;
  long long v126 = v156;
  char v127 = v144;
  if (v155 != v156)
  {
    double v180 = 0;
    v181[0] = 0.0;
    uint64_t v128 = (int8x16_t *)v155;
    do
    {
      int8x16_t v129 = *v128++;
      *(int8x16_t *)std::string __p = v129;
      uint64_t v130 = CNTimeSpan::operator+((uint64_t)&v180, __p, v129, v37);
      double v180 = (void *)v130;
      v181[0] = v131;
    }
    while (v128 != (int8x16_t *)v126);
    uint64_t v133 = ((char *)v126 - v125) >> 4;
    *(double *)v37.i64 = (double)v133;
    *(double *)v132.i64 = (v131 + (double)(v130 % v133)) / (double)v133;
    __p[0] = 0;
    __p[1] = 0;
    CNTimeSpan::SetTimeSpan((uint64_t *)__p, v130 / v133, v132, v37);
    int8x16_t v134 = *(int8x16_t *)__p;
    *(_OWORD *)uint64_t v142 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = (void *)0x3FB2F1A9FBE76C8BLL;
    *(void *)uint64_t v142 = CNTimeSpan::operator+(v142, __p, v134, v135);
    *(void *)(v142 + 8) = v136;
    uint64_t v137 = 1;
    goto LABEL_117;
  }
LABEL_115:
  LOWORD(v180) = 12;
  LOBYTE(__p[0]) = 3;
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v180, (unsigned __int8 *)__p, "#gmp,EstimateCoarseReceiverTaiTime,could not compute time because no SVs with pertinent information were available,svs-with-time,%i", v32, v33, v34, v35, v36, v127);
LABEL_116:
  uint64_t v137 = 0;
LABEL_117:
  if (v155)
  {
    long long v156 = (uint64_t *)v155;
    operator delete(v155);
  }
  return v137;
}

void sub_18E13377C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_18E13382C(uint64_t result, unint64_t a2, double *a3, int *a4)
{
  uint64_t v6 = result;
  if (!a2)
  {
    int v12 = 0;
    double v11 = *(double *)(result + 40) * 0.000000001;
    goto LABEL_15;
  }
  uint64_t result = sub_18E13B3A8((int *)result);
  if (result
    && (*(void *)(v6 + 80) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && *(double *)(v6 + 88) > 0.0)
  {
    double v8 = *(double *)(v6 + 80) * 0.000000001;
  }
  else
  {
    uint64_t result = sub_18E13B3A8((int *)v6);
    double v8 = 0.0;
    if (result)
    {
      BOOL v9 = *(double *)(v6 + 64) > 0.0 && (*(void *)(v6 + 56) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
      double v8 = 0.0;
      if (v9) {
        double v8 = *(double *)(v6 + 56) * 0.000000001;
      }
    }
  }
  double v10 = (*(double *)(v6 + 40) + (double)a2 + (double)a2 * v8) * 0.000000001;
  *a3 = v10;
  *a4 = 0;
  if (v10 >= 604800.0)
  {
    double v11 = v10 + -604800.0;
    int v12 = 1;
LABEL_15:
    *a3 = v11;
    *a4 = v12;
  }
  return result;
}

uint64_t sub_18E133944(uint64_t result, unint64_t a2, double *a3, int *a4)
{
  uint64_t v6 = result;
  if (!a2)
  {
    int v12 = 0;
    double v11 = *(double *)(result + 40) * 0.000000001;
    goto LABEL_15;
  }
  uint64_t result = sub_18E13B3A8((int *)result);
  if (result
    && (*(void *)(v6 + 80) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && *(double *)(v6 + 88) > 0.0)
  {
    double v8 = *(double *)(v6 + 80) * 0.000000001;
  }
  else
  {
    uint64_t result = sub_18E13B3A8((int *)v6);
    double v8 = 0.0;
    if (result)
    {
      BOOL v9 = *(double *)(v6 + 64) > 0.0 && (*(void *)(v6 + 56) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
      double v8 = 0.0;
      if (v9) {
        double v8 = *(double *)(v6 + 56) * 0.000000001;
      }
    }
  }
  double v10 = (*(double *)(v6 + 40) + (double)a2 + (double)a2 * v8) * 0.000000001;
  *a3 = v10;
  *a4 = 0;
  if (v10 >= 86400.0)
  {
    double v11 = v10 + -86400.0;
    int v12 = 1;
LABEL_15:
    *a3 = v11;
    *a4 = v12;
  }
  return result;
}

BOOL raven::GnssMeasurementPreprocessor::DetermineNearestReceiverTaiTimeMillisecond(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, unsigned char *a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, int8x16_t a10)
{
  uint64_t v192 = *MEMORY[0x1E4F143B8];
  *a5 = 0;
  if (!*(unsigned char *)a1)
  {
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)a1) <= 1)
    {
      *(_WORD *)std::string __p = 12;
      LOBYTE(v174) = 1;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, (unsigned __int8 *)&v174, "#gmp,DetermineNearestReceiverTaiTimeMillisecond,not configured", v12, v13, v14, v15, v16, v139);
    }
    return 0;
  }
  double v11 = *(double *)(a1 + 760) + *(double *)(a1 + 784);
  a10.i64[0] = 0x41E2A05F20000000;
  if (v11 > 2500000000.0)
  {
    *(_WORD *)std::string __p = 12;
    LOBYTE(v174) = 3;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, (unsigned __int8 *)&v174, "#gmp,DetermineNearestReceiverTaiTimeMillisecond,Position uncertainty is too high,var,%.3lf", (uint64_t)a4, (uint64_t)a5, a6, a7, a8, SLOBYTE(v11));
    return 0;
  }
  __int16 v174 = 0;
  long long v175 = 0u;
  long long v176 = 0u;
  int v177 = 0;
  uint64_t v178 = 0;
  uint64_t v179 = 0;
  int v180 = 0;
  __int16 v167 = 0;
  long long v168 = 0u;
  long long v169 = 0u;
  int v170 = 0;
  uint64_t v171 = 0;
  uint64_t v172 = 0;
  int v173 = 0;
  __int16 v160 = 0;
  long long v161 = 0u;
  long long v162 = 0u;
  int v163 = 0;
  uint64_t v164 = 0;
  uint64_t v165 = 0;
  int v166 = 0;
  char v21 = raven::GnssSvDatabase::PopulateGnssUTCParametersWithGps((raven::GnssSvDatabase *)(a1 + 984), (cnnavigation::GNSSUTCParameters *)&v174, 0.0, a10, a3, (uint64_t)a4, (uint64_t)a5, a6, a7, a8);
  char v30 = raven::GnssSvDatabase::PopulateGnssUTCParametersWithGlonass((raven::GnssSvDatabase *)(a1 + 984), (cnnavigation::GNSSUTCParameters *)&v167, v22, v23, v24, v25, v26, v27, v28, v29);
  char v37 = raven::GnssSvDatabase::PopulateGnssUTCParametersWithGalileo((raven::GnssSvDatabase *)(a1 + 984), (cnnavigation::GNSSUTCParameters *)&v160, v31, v32, v33, v34, v35, v36);
  unint64_t v147 = a4;
  long long v175 = 0uLL;
  long long v168 = 0uLL;
  uint64_t v157 = 0;
  __int16 v158 = 0;
  unint64_t v159 = 0;
  uint64_t v40 = *(void *)(a2 + 72);
  uint64_t v39 = *(void *)(a2 + 80);
  if (v40 != v39)
  {
    char v144 = v30;
    char v145 = v37;
    unsigned int v41 = 0;
    uint64_t v42 = a3;
    char v148 = 0;
    unint64_t v146 = 0;
    while (1)
    {
      unsigned int v43 = *(unsigned __int8 *)(v40 + 8);
      BOOL v44 = v43 > 9;
      int v45 = (1 << v43) & 0x2BB;
      if (v44 || v45 == 0)
      {
        int v47 = *(unsigned __int8 *)(v40 + 197);
        if (*(unsigned char *)(*(void *)(a1 + 8) + 3792)) {
          BOOL v81 = 1;
        }
        else {
          BOOL v81 = v47 == 0;
        }
        if (!v81)
        {
          if (*(unsigned char *)(v40 + 196) == 1) {
            goto LABEL_141;
          }
          goto LABEL_15;
        }
      }
      else
      {
        int v47 = *(unsigned __int8 *)(v40 + 197);
      }
      if (!v47) {
        goto LABEL_141;
      }
LABEL_15:
      LODWORD(v156) = 0;
      WORD2(v156) = 32512;
      long long v155 = 0uLL;
      int v48 = *(_DWORD *)(v40 + 192);
      if ((v48 & 0x7FFFFFFFu) > 0x7F7FFFFF) {
        goto LABEL_141;
      }
      uint64_t v154 = 0;
      int v153 = 0;
      sub_18E13382C(v40, *(void *)(a1 + 2304), (double *)&v154, &v153);
      if ((*(_DWORD *)v40 == 16 || *(_DWORD *)v40 == 1)
        && *(unsigned char *)(v40 + 8) == 1
        && *(unsigned char *)(v40 + 9)
        && *(unsigned char *)(v40 + 12)
        && sub_18E13B3A8((int *)v40)
        && *(double *)(v40 + 40) >= 0.0
        && (float v91 = *(float *)(v40 + 48), v91 > 0.0)
        && v91 < 1955.03421)
      {
        int v59 = *(unsigned char *)(v40 + 9) && *(unsigned char *)(v40 + 10) && *(unsigned char *)(v40 + 12) != 0;
        if (!*(unsigned char *)(a1 + 2208))
        {
          LOWORD(v188) = 12;
          LOBYTE(v181[0]) = 3;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v188, (unsigned __int8 *)v181, "#gmp,DetermineNearestReceiverTaiTimeMillisecond,GPS week number is not available", v49, v50, v51, v52, v53, v139);
          goto LABEL_141;
        }
        *(_DWORD *)std::string __p = v153 + *(_DWORD *)(a1 + 2212);
        if ((v21 & 1) == 0)
        {
          LOWORD(v188) = 12;
          LOBYTE(v181[0]) = 3;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v188, (unsigned __int8 *)v181, "#gmp,DetermineNearestReceiverTaiTimeMillisecond,GPS UTC info not available", v49, v50, v51, v52, v53, v139);
          goto LABEL_141;
        }
        *(void *)&__p[8] = v154;
        cnnavigation::TAITime::TAITime(&v188, (double *)__p, (cnnavigation::GNSSUTCParameters *)&v174);
        long long v155 = v188;
        int v111 = *(_DWORD *)v40;
        WORD2(v156) = *(_WORD *)(v40 + 4);
        LODWORD(v156) = v111;
        double v60 = 1575420000.0;
      }
      else
      {
        if (*(_DWORD *)v40 == 8 && *(unsigned char *)(v40 + 8) == 7)
        {
          if (*(unsigned char *)(v40 + 9))
          {
            if (*(unsigned char *)(v40 + 12))
            {
              if (sub_18E13B3A8((int *)v40))
              {
                if (*(double *)(v40 + 40) >= 0.0)
                {
                  float v88 = *(float *)(v40 + 48);
                  if (v88 > 0.0 && v88 < 1955.03421)
                  {
                    if (*(unsigned char *)(v40 + 9))
                    {
                      if (*(unsigned char *)(v40 + 11)) {
                        BOOL v89 = *(unsigned char *)(v40 + 12) != 0;
                      }
                      else {
                        BOOL v89 = 0;
                      }
                      if (*(unsigned char *)(v40 + 10))
                      {
                        BOOL v120 = *(unsigned char *)(v40 + 12) != 0;
LABEL_113:
                        if (!*(unsigned char *)(a1 + 2208))
                        {
                          LOWORD(v188) = 12;
                          LOBYTE(v181[0]) = 3;
                          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v188, (unsigned __int8 *)v181, "#gmp,DetermineNearestReceiverTaiTimeMillisecond,Galileo week number is not available", v54, v55, v56, v57, v58, v139);
LABEL_118:
                          uint64_t v42 = a3;
                          goto LABEL_141;
                        }
                        *(_DWORD *)std::string __p = *(_DWORD *)(a1 + 2212) + v153 - 1024;
                        if ((v145 & 1) == 0)
                        {
                          LOWORD(v188) = 12;
                          LOBYTE(v181[0]) = 3;
                          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v188, (unsigned __int8 *)v181, "#gmp,DetermineNearestReceiverTaiTimeMillisecond,Galileo UTC info not available", v54, v55, v56, v57, v58, v139);
                          goto LABEL_118;
                        }
                        *(void *)&__p[8] = v154;
                        cnnavigation::TAITime::TAITime(&v188, (double *)__p, (cnnavigation::GNSSUTCParameters *)&v160);
                        int v59 = v89 || v120;
                        long long v155 = v188;
                        int v121 = *(_DWORD *)v40;
                        WORD2(v156) = *(_WORD *)(v40 + 4);
                        LODWORD(v156) = v121;
                        double v60 = 1575420000.0;
                        uint64_t v42 = a3;
                        goto LABEL_36;
                      }
                    }
                    else
                    {
                      BOOL v89 = 0;
                    }
                    BOOL v120 = 0;
                    goto LABEL_113;
                  }
                }
              }
            }
          }
        }
        int v59 = 0;
        double v60 = 0.0;
        if (*(_DWORD *)v40 == 2 && *(unsigned char *)(v40 + 8) == 3)
        {
          if (*(unsigned char *)(v40 + 9)
            && *(unsigned char *)(v40 + 13)
            && sub_18E13B3A8((int *)v40)
            && *(double *)(v40 + 40) >= 0.0)
          {
            int v59 = 0;
            float v90 = *(float *)(v40 + 48);
            if (v90 > 0.0 && v90 < 3913.89432)
            {
              int v59 = *(unsigned char *)(v40 + 9) && *(unsigned char *)(v40 + 10) && *(unsigned char *)(v40 + 11) && *(unsigned char *)(v40 + 13) != 0;
              *((void *)&v188 + 1) = 0;
              if (!*(unsigned char *)(a1 + 2216))
              {
                *(_WORD *)std::string __p = 12;
                LOBYTE(v181[0]) = 3;
                cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, (unsigned __int8 *)v181, "#gmp,DetermineNearestReceiverTaiTimeMillisecond,Glonass day number is not available", v61, v62, v63, v64, v65, v139);
                goto LABEL_141;
              }
              LODWORD(v188) = *(_DWORD *)(a1 + 2220);
              if ((v144 & 1) == 0)
              {
                *(_WORD *)std::string __p = 12;
                LOBYTE(v181[0]) = 3;
                cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, (unsigned __int8 *)v181, "#gmp,DetermineNearestReceiverTaiTimeMillisecond,GLONASS UTC info not available", v61, v62, v63, v64, v65, v139);
                goto LABEL_141;
              }
              LODWORD(v181[0]) = 0;
              sub_18E133944(v40, *(void *)(a1 + 2304), (double *)&v188 + 1, (int *)v181);
              LODWORD(v188) = v188 + LODWORD(v181[0]);
              cnnavigation::TAITime::TAITime(__p, (int *)&v188, (cnnavigation::GNSSUTCParameters *)&v167);
              long long v155 = *(_OWORD *)__p;
              int v103 = *(char *)(v40 + 5);
              if ((v103 - 7) < 0xFFFFFFF2)
              {
                LOWORD(v150[0]) = 12;
                LOBYTE(v152) = 4;
                sub_18E015C3C(v40, __p);
                int8x16_t v109 = __p;
                if (__p[23] < 0) {
                  LOBYTE(v109) = __p[0];
                }
                cnprint::CNPrinter::Print((cnprint::CNPrinter *)v150, (unsigned __int8 *)&v152, "#gmp,DetermineNearestReceiverTaiTimeMillisecond,could not determine GLONASS center frequency,SV,%s", v104, v105, v106, v107, v108, (char)v109);
                if ((__p[23] & 0x80000000) == 0) {
                  goto LABEL_141;
                }
                uint64_t v110 = *(void **)__p;
                goto LABEL_140;
              }
              double v60 = (double)(char)v103 * 562500.0 + 1602000000.0;
              int v122 = *(_DWORD *)v40;
              WORD2(v156) = *(_WORD *)(v40 + 4);
              LODWORD(v156) = v122;
            }
          }
          else
          {
            int v59 = 0;
          }
        }
      }
LABEL_36:
      if (!sub_18E01B268(&v156)) {
        goto LABEL_141;
      }
      sub_18DEDE7B0(&v188, "");
      unsigned __int8 v190 = 0;
      int v191 = -1;
      if ((raven::GnssMeasurementPreprocessor::GetCNSatIDFromGnssId((cnprint::CNPrinter *)a1, &v156, (uint64_t)&v188, v66, v67, v68, v69, v70) & 1) == 0|| a3 + 8 == sub_18E01B8A0(v42, (uint64_t)&v188))
      {
        goto LABEL_138;
      }
      uint64_t v71 = *sub_18E13D528(v42, __p, v190, v191);
      if (!v71) {
        sub_18DEDE720("map::at:  key not found");
      }
      double v152 = 0.0;
      if (!raven::GnssMeasurementPreprocessor::CalculateApproximateTimeOfFlight((double *)a1, (uint64_t)&v155, *(void *)(v71 + 64), &v152))
      {
        LOWORD(v181[0]) = 12;
        LOBYTE(v150[0]) = 3;
        sub_18E015C3C((uint64_t)&v156, __p);
        uint64_t v87 = __p;
        if (__p[23] < 0) {
          LOBYTE(v87) = __p[0];
        }
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v181, (unsigned __int8 *)v150, "#gmp,DetermineNearestReceiverTaiTimeMillisecond,could not calculate time of flight,SV,%s", v82, v83, v84, v85, v86, (char)v87);
        uint64_t v42 = a3;
        goto LABEL_54;
      }
      double v151 = 0.0;
      uint64_t v72 = *(void *)(v71 + 64);
      *(_WORD *)std::string __p = 0;
      *(_OWORD *)&__p[8] = 0u;
      long long v183 = 0u;
      int v184 = 0;
      uint64_t v185 = 0;
      uint64_t v186 = 0;
      int v187 = 0;
      if ((*(unsigned int (**)(double))(*(void *)(v72 + 32) + 96))(v60))
      {
        LOWORD(v181[0]) = 12;
        LOBYTE(v150[0]) = 3;
        sub_18E015C3C((uint64_t)&v156, __p);
        uint64_t v42 = a3;
        uint64_t v80 = __p;
        if (__p[23] < 0) {
          LOBYTE(v80) = __p[0];
        }
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v181, (unsigned __int8 *)v150, "#gmp,DetermineNearestReceiverTaiTimeMillisecond,could not eval clock offset,SV,%s", v75, v76, v77, v78, v79, (char)v80);
LABEL_54:
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
        goto LABEL_138;
      }
      *(double *)v73.i64 = v151;
      v181[0] = 0;
      v181[1] = 0;
      CNTimeSpan::SetTimeSpan(v181, 0, v73, v74);
      *(void *)std::string __p = CNTimeSpan::operator-((uint64_t)&v155, v181, v92, v93);
      *(void *)&__p[8] = v94;
      *(double *)v95.i64 = v152;
      v150[0] = 0;
      v150[1] = 0;
      CNTimeSpan::SetTimeSpan(v150, 0, v95, v96);
      uint64_t v99 = CNTimeSpan::operator+((uint64_t)__p, v150, v97, v98);
      uint64_t v42 = a3;
      if (v59)
      {
        uint64_t v101 = (char *)v158;
        if ((unint64_t)v158 >= v159)
        {
          uint64_t v141 = v99;
          uint64_t v142 = v100;
          uint64_t v112 = (char *)v157;
          unint64_t v140 = 0xAAAAAAAAAAAAAAABLL * (((char *)v158 - (unsigned char *)v157) >> 3);
          unint64_t v113 = v140 + 1;
          if (v140 + 1 > 0xAAAAAAAAAAAAAAALL) {
            sub_18DEE1FC8();
          }
          if (0x5555555555555556 * ((uint64_t)(v159 - (void)v157) >> 3) > v113) {
            unint64_t v113 = 0x5555555555555556 * ((uint64_t)(v159 - (void)v157) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v159 - (void)v157) >> 3) >= 0x555555555555555) {
            unint64_t v114 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v114 = v113;
          }
          if (v114) {
            unint64_t v114 = (unint64_t)sub_18E12E008(v114);
          }
          else {
            uint64_t v115 = 0;
          }
          uint64_t v123 = (uint64_t *)(v114 + 24 * v140);
          uint64_t *v123 = v141;
          v123[1] = v142;
          *((_DWORD *)v123 + 4) = v48;
          uint64_t v124 = (char *)v123;
          if (v101 != v112)
          {
            do
            {
              long long v125 = *(_OWORD *)(v101 - 24);
              *((_DWORD *)v124 - 2) = *((_DWORD *)v101 - 2);
              *(_OWORD *)(v124 - 24) = v125;
              v124 -= 24;
              v101 -= 24;
            }
            while (v101 != v112);
            uint64_t v101 = (char *)v157;
          }
          uint64_t v102 = v123 + 3;
          uint64_t v157 = v124;
          __int16 v158 = v123 + 3;
          unint64_t v159 = v114 + 24 * v115;
          if (v101) {
            operator delete(v101);
          }
        }
        else
        {
          *__int16 v158 = v99;
          *((void *)v101 + 1) = v100;
          uint64_t v102 = (uint64_t *)(v101 + 24);
          *((_DWORD *)v101 + 4) = v48;
        }
        __int16 v158 = v102;
      }
      else
      {
        if ((unint64_t)v41 < v146)
        {
          *(void *)unsigned int v41 = v99;
          *((void *)v41 + 1) = v100;
          *((_DWORD *)v41 + 4) = v48;
          v41 += 24;
          goto LABEL_138;
        }
        uint64_t v143 = v100;
        unint64_t v116 = 0xAAAAAAAAAAAAAAABLL * ((v41 - v148) >> 3) + 1;
        if (v116 > 0xAAAAAAAAAAAAAAALL) {
          sub_18DEE1FC8();
        }
        uint64_t v117 = v99;
        if (0x5555555555555556 * ((uint64_t)(v146 - (void)v148) >> 3) > v116) {
          unint64_t v116 = 0x5555555555555556 * ((uint64_t)(v146 - (void)v148) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v146 - (void)v148) >> 3) >= 0x555555555555555) {
          unint64_t v118 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v118 = v116;
        }
        if (v118) {
          unint64_t v118 = (unint64_t)sub_18E12E008(v118);
        }
        else {
          uint64_t v119 = 0;
        }
        unint64_t v126 = v118 + 8 * ((v41 - v148) >> 3);
        *(void *)unint64_t v126 = v117;
        *(void *)(v126 + 8) = v143;
        *(_DWORD *)(v126 + 16) = v48;
        if (v41 == v148)
        {
          uint64_t v130 = (char *)(v118 + 8 * ((v41 - v148) >> 3));
          uint64_t v128 = v148;
        }
        else
        {
          unint64_t v127 = v118 + 8 * ((v41 - v148) >> 3);
          uint64_t v128 = v148;
          do
          {
            long long v129 = *(_OWORD *)(v41 - 24);
            uint64_t v130 = (char *)(v127 - 24);
            *(_DWORD *)(v127 - 8) = *((_DWORD *)v41 - 2);
            *(_OWORD *)(v127 - 24) = v129;
            v41 -= 24;
            v127 -= 24;
          }
          while (v41 != v148);
        }
        unint64_t v146 = v118 + 24 * v119;
        unsigned int v41 = (char *)(v126 + 24);
        if (v128) {
          operator delete(v128);
        }
        char v148 = v130;
      }
      uint64_t v42 = a3;
LABEL_138:
      if (v189 < 0)
      {
        uint64_t v110 = (void *)v188;
LABEL_140:
        operator delete(v110);
      }
LABEL_141:
      v40 += 200;
      if (v40 == v39) {
        goto LABEL_144;
      }
    }
  }
  char v148 = 0;
  unsigned int v41 = 0;
LABEL_144:
  raven::GnssMeasurementPreprocessor::GetTimeEstimateWithBitSync((uint64_t *)&v157, (uint64_t)__p, v38);
  if ((_BYTE)v183)
  {
    *a5 = __p[16];
    *a4 = *(_OWORD *)__p;
    BOOL v17 = 1;
  }
  else
  {
    BOOL v17 = v41 != v148;
    if (v41 == v148)
    {
      LOWORD(v181[0]) = 12;
      LOBYTE(v155) = 3;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v181, (unsigned __int8 *)&v155, "#gmp,DetermineNearestReceiverTaiTimeMillisecond,could not compute time", v131, v132, v133, v134, v135, v139);
    }
    else
    {
      char v136 = *v148;
      uint64_t v137 = *(void *)(v148 + 1);
      *(void *)((char *)&v188 + 7) = *((void *)v148 + 1);
      *(void *)&long long v188 = v137;
      *a5 = 0;
      *(unsigned char *)unint64_t v147 = v136;
      *(void *)((char *)v147 + 1) = v188;
      *((void *)v147 + 1) = *(void *)((char *)&v188 + 7);
      LOWORD(v181[0]) = 12;
      LOBYTE(v155) = 2;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v181, (unsigned __int8 *)&v155, "#gmp,DetermineNearestReceiverTaiTimeMillisecond,using receiver time without bit edge confirmation", v131, v132, v133, v134, v135, v139);
    }
  }
  if (v148) {
    operator delete(v148);
  }
  if (v157) {
    operator delete(v157);
  }
  return v17;
}

void sub_18E13469C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a70 < 0) {
    operator delete(__p);
  }
  if (a21) {
    operator delete(a21);
  }
  if (a33) {
    operator delete(a33);
  }
  _Unwind_Resume(a1);
}

uint64_t *raven::GnssMeasurementPreprocessor::GetTimeEstimateWithBitSync@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>, int8x16_t a3@<Q1>)
{
  uint64_t v4 = *result;
  uint64_t v5 = result[1];
  if (*result == v5)
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 24) = 0;
    return result;
  }
  uint64_t v6 = result;
  int8x16_t v7 = 0uLL;
  *(_OWORD *)std::string __p = 0u;
  long long v58 = 0u;
  float v59 = 1.0;
  uint64_t v8 = v4 + 24;
  uint64_t v9 = v4;
  if (v4 + 24 != v5)
  {
    uint64_t v9 = v4;
    do
    {
      v7.i32[0] = *(_DWORD *)(v9 + 16);
      a3.i32[0] = *(_DWORD *)(v8 + 16);
      if (*(float *)v7.i32 < *(float *)a3.i32) {
        uint64_t v9 = v8;
      }
      v8 += 24;
    }
    while (v8 != v5);
  }
  unint64_t v10 = 0;
  do
  {
    uint64_t v11 = CNTimeSpan::operator-(v4, (void *)v9, v7, a3);
    *(double *)v7.i64 = (v18 + (double)v11) * 1000.0;
    *(double *)a3.i64 = fabs(*(double *)v7.i64);
    if (*(double *)a3.i64 > 10.0) {
      goto LABEL_82;
    }
    int v19 = llround(*(double *)v7.i64);
    if (v10)
    {
      *(int8x8_t *)v7.i8 = vcnt_s8((int8x8_t)v10);
      v7.i16[0] = vaddlv_u8(*(uint8x8_t *)v7.i8);
      if (v7.u32[0] > 1uLL)
      {
        unint64_t v3 = v19;
        if (v10 <= v19) {
          unint64_t v3 = v19 % v10;
        }
      }
      else
      {
        unint64_t v3 = (v10 - 1) & v19;
      }
      uint64_t v20 = (void **)*((void *)__p[0] + v3);
      if (v20)
      {
        char v21 = *v20;
        if (*v20)
        {
          do
          {
            unint64_t v22 = v21[1];
            if (v22 == v19)
            {
              unint64_t v17 = *((unsigned int *)v21 + 4);
              if (v17 == v19) {
                goto LABEL_81;
              }
            }
            else
            {
              if (v7.u32[0] > 1uLL)
              {
                if (v22 >= v10) {
                  v22 %= v10;
                }
              }
              else
              {
                v22 &= v10 - 1;
              }
              if (v22 != v3) {
                break;
              }
            }
            char v21 = (void *)*v21;
          }
          while (v21);
        }
      }
    }
    char v21 = operator new(0x20uLL);
    *char v21 = 0;
    v21[1] = v19;
    *((_DWORD *)v21 + 4) = v19;
    v21[3] = 0;
    *(float *)v7.i32 = (float)(unint64_t)(*((void *)&v58 + 1) + 1);
    *(float *)a3.i32 = v59;
    if (!v10 || (float)(v59 * (float)v10) < *(float *)v7.i32)
    {
      BOOL v23 = (v10 & (v10 - 1)) != 0;
      unint64_t v17 = 1;
      if (v10 < 3) {
        BOOL v23 = 1;
      }
      unint64_t v24 = v23 | (2 * v10);
      *(float *)v7.i32 = *(float *)v7.i32 / v59;
      unint64_t v25 = vcvtps_u32_f32(*(float *)v7.i32);
      if (v24 <= v25) {
        int8x8_t prime = (int8x8_t)v25;
      }
      else {
        int8x8_t prime = (int8x8_t)v24;
      }
      if (*(void *)&prime == 1)
      {
        int8x8_t prime = (int8x8_t)2;
      }
      else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
      {
        int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
        unint64_t v10 = (unint64_t)__p[1];
      }
      if (*(void *)&prime > v10) {
        goto LABEL_37;
      }
      if (*(void *)&prime < v10)
      {
        *(float *)a3.i32 = v59;
        unint64_t v31 = vcvtps_u32_f32((float)*((unint64_t *)&v58 + 1) / v59);
        if (v10 < 3
          || (*(int8x8_t *)v7.i8 = vcnt_s8((int8x8_t)v10), v7.i16[0] = vaddlv_u8(*(uint8x8_t *)v7.i8), v7.u32[0] > 1uLL))
        {
          unint64_t v31 = std::__next_prime(v31);
        }
        else
        {
          uint64_t v32 = 1 << -(char)__clz(v31 - 1);
          if (v31 >= 2) {
            unint64_t v31 = v32;
          }
        }
        if (*(void *)&prime <= v31) {
          int8x8_t prime = (int8x8_t)v31;
        }
        if (*(void *)&prime >= v10)
        {
          unint64_t v10 = (unint64_t)__p[1];
        }
        else
        {
          if (prime)
          {
LABEL_37:
            if (*(void *)&prime >> 61) {
              sub_18DEDF7D4();
            }
            uint64_t v27 = operator new(8 * *(void *)&prime);
            double v28 = __p[0];
            __p[0] = v27;
            if (v28) {
              operator delete(v28);
            }
            uint64_t v29 = 0;
            __p[1] = (void *)prime;
            do
              *((void *)__p[0] + v29++) = 0;
            while (*(void *)&prime != v29);
            char v30 = (void **)v58;
            if ((void)v58)
            {
              unint64_t v17 = *(void *)(v58 + 8);
              *(int8x8_t *)v7.i8 = vcnt_s8(prime);
              v7.i16[0] = vaddlv_u8(*(uint8x8_t *)v7.i8);
              if (v7.u32[0] > 1uLL)
              {
                if (v17 >= *(void *)&prime) {
                  v17 %= *(void *)&prime;
                }
              }
              else
              {
                v17 &= *(void *)&prime - 1;
              }
              *((void *)__p[0] + v17) = &v58;
              for (i = *v30; i; unint64_t v17 = v34)
              {
                unint64_t v34 = i[1];
                if (v7.u32[0] > 1uLL)
                {
                  if (v34 >= *(void *)&prime) {
                    v34 %= *(void *)&prime;
                  }
                }
                else
                {
                  v34 &= *(void *)&prime - 1;
                }
                if (v34 != v17)
                {
                  if (!*((void *)__p[0] + v34))
                  {
                    *((void *)__p[0] + v34) = v30;
                    goto LABEL_62;
                  }
                  *char v30 = (void *)*i;
                  *uint64_t i = **((void **)__p[0] + v34);
                  **((void **)__p[0] + v34) = i;
                  uint64_t i = v30;
                }
                unint64_t v34 = v17;
LABEL_62:
                char v30 = (void **)i;
                uint64_t i = (void *)*i;
              }
            }
            unint64_t v10 = (unint64_t)prime;
            goto LABEL_66;
          }
          int8x16_t v38 = __p[0];
          __p[0] = 0;
          if (v38) {
            operator delete(v38);
          }
          unint64_t v10 = 0;
          __p[1] = 0;
        }
      }
LABEL_66:
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v10 <= v19) {
          unint64_t v3 = v19 % v10;
        }
        else {
          unint64_t v3 = v19;
        }
      }
      else
      {
        unint64_t v3 = (v10 - 1) & v19;
      }
    }
    uint64_t v35 = __p[0];
    uint64_t v36 = (void *)*((void *)__p[0] + v3);
    if (v36)
    {
      *char v21 = *v36;
    }
    else
    {
      *char v21 = v58;
      *(void *)&long long v58 = v21;
      v35[v3] = &v58;
      if (!*v21) {
        goto LABEL_80;
      }
      unint64_t v37 = *(void *)(*v21 + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v37 >= v10) {
          v37 %= v10;
        }
      }
      else
      {
        v37 &= v10 - 1;
      }
      uint64_t v36 = (char *)__p[0] + 8 * v37;
    }
    *uint64_t v36 = v21;
LABEL_80:
    ++*((void *)&v58 + 1);
LABEL_81:
    ++v21[3];
LABEL_82:
    v4 += 24;
  }
  while (v4 != v5);
  if (!*((void *)&v58 + 1))
  {
    LOWORD(v55[0]) = 12;
    unsigned __int8 v56 = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v55, &v56, "#gmp,Unexpected empty ms_offset_map", v12, v13, v14, v15, v16, a2);
LABEL_114:
    char v52 = 0;
    uint64_t v50 = v54;
    *uint64_t v54 = 0;
    goto LABEL_115;
  }
  uint64_t v39 = (uint64_t *)v58;
  if (!(void)v58)
  {
    LOWORD(v55[0]) = 12;
    unsigned __int8 v56 = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v55, &v56, "#gmp,Unexpected empty opt_consensus", v12, v13, v14, v15, v16, a2);
    goto LABEL_114;
  }
  int v40 = 0;
  char v41 = 1;
  do
  {
    if (v41)
    {
      int v40 = *((_DWORD *)v39 + 4);
      unint64_t v17 = v39[3];
    }
    else if (v39[3] > v17)
    {
      int v40 = *((_DWORD *)v39 + 4);
      unint64_t v17 = v39[3];
    }
    char v41 = 0;
    uint64_t v39 = (uint64_t *)*v39;
  }
  while (v39);
  unint64_t v42 = 0xAAAAAAAAAAAAAAABLL * ((v6[1] - *v6) >> 3);
  BOOL v44 = v42 > 2 && v17 > 2;
  BOOL v45 = 5 * v17 >= 0xAAAAAAAAAAAAAAACLL * ((v6[1] - *v6) >> 3);
  if (v42 >= 5) {
    BOOL v46 = v45;
  }
  else {
    BOOL v46 = v44;
  }
  a3.i64[0] = 0x3F50624DD2F1A9FCLL;
  *(double *)v7.i64 = (double)v40 * 0.001;
  v55[0] = 0;
  v55[1] = 0;
  CNTimeSpan::SetTimeSpan(v55, 0, v7, a3);
  uint64_t v49 = CNTimeSpan::operator+(v9, v55, v47, v48);
  uint64_t v50 = (unsigned char *)a2;
  *(void *)a2 = v49;
  *(void *)(a2 + 8) = v51;
  *(unsigned char *)(a2 + 16) = v46;
  char v52 = 1;
LABEL_115:
  unsigned char v50[24] = v52;
  return (uint64_t *)sub_18E011990((uint64_t)__p);
}

void sub_18E134D38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_18E011990((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t raven::GnssMeasurementPreprocessor::GetTimeEstimateNoBitSync@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  if (*(void *)(result + 8) == *(void *)result)
  {
    char v3 = 0;
    uint64_t v2 = a2;
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)*(void *)result;
    uint64_t v2 = a2 + 16;
    char v3 = 1;
  }
  *uint64_t v2 = 0;
  a2[24] = v3;
  return result;
}

uint64_t raven::GnssMeasurementPreprocessor::PopulatePseudorangeMeasurementCorrections(uint64_t a1, cnnavigation::TAITime *a2, uint64_t a3, unsigned __int8 *a4, double *a5, uint64_t a6, double *a7, _DWORD *a8)
{
  unsigned int v8 = *a4;
  uint64_t v9 = *(void *)(a1 + 1296);
  if (!v9) {
    goto LABEL_12;
  }
  uint64_t v17 = a1 + 1296;
  do
  {
    unsigned int v18 = *(unsigned __int8 *)(v9 + 32);
    BOOL v19 = v18 >= v8;
    if (v18 >= v8) {
      uint64_t v20 = (uint64_t *)v9;
    }
    else {
      uint64_t v20 = (uint64_t *)(v9 + 8);
    }
    if (v19) {
      uint64_t v17 = v9;
    }
    uint64_t v9 = *v20;
  }
  while (*v20);
  if (v17 == a1 + 1296 || *(unsigned __int8 *)(v17 + 32) > v8)
  {
LABEL_12:
    LOWORD(__p) = 12;
    v93[0] = 3;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&__p, v93, "#gmp,No receiver band corrections available,band,%i", (uint64_t)a4, (uint64_t)a5, a6, (uint64_t)a7, (uint64_t)a8, v8);
    return 0;
  }
  if (v8 == 8)
  {
    BOOL v23 = (double *)(a1 + 2176);
  }
  else if (v8 == 6)
  {
    BOOL v23 = (double *)(a1 + 2184);
  }
  else
  {
    double v22 = 0.0;
    if (v8 != 2) {
      goto LABEL_21;
    }
    BOOL v23 = (double *)(a1 + 2168);
  }
  double v22 = *v23;
LABEL_21:
  double v24 = *(double *)(v17 + 48);
  *a8 = *(_DWORD *)(v17 + 56);
  v93[0] = 0;
  int64x2_t v94 = vdupq_n_s64(0x7FF8000000000000uLL);
  double v95 = NAN;
  char v96 = 0;
  if ((raven::GnssSvDatabase::FetchSvBandCorrection(a1 + 984, a6, a4, v93) & 1) == 0)
  {
    LOWORD(v99[0]) = 12;
    LOBYTE(v97[0]) = 3;
    char v29 = *a4;
    sub_18E015C3C(a3, &__p);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v99, (unsigned __int8 *)v97, "#gmp,No transmit band corrections available,band,%i,SV,%s", v30, v31, v32, v33, v34, v29);
    if ((SHIBYTE(v84) & 0x80000000) == 0) {
      return 0;
    }
    uint64_t v35 = __p;
LABEL_41:
    operator delete(v35);
    return 0;
  }
  uint64_t IsValid = *(void *)(a1 + 2544);
  if (IsValid && *(unsigned char *)(a1 + 2296))
  {
    uint64_t IsValid = cnnavigation::SphericalHarmonicsIonosphereModel::IsValid((cnnavigation::SphericalHarmonicsIonosphereModel *)IsValid, (const cnnavigation::TAITime *)(a1 + 2240));
    char v28 = IsValid;
  }
  else
  {
    char v28 = 0;
  }
  if (*(unsigned char *)(a1 + 2296))
  {
    uint64_t IsValid = cnnavigation::ThinShellIonosphereModel::IsValid((cnnavigation::ThinShellIonosphereModel *)(a1 + 2344), (const cnnavigation::TAITime *)(a1 + 2240), v25, v26);
    int v36 = IsValid;
    if (v28) {
      goto LABEL_36;
    }
  }
  else
  {
    int v36 = 0;
    if (v28) {
      goto LABEL_36;
    }
  }
  int v37 = *(unsigned __int8 *)(a1 + 2336);
  if (*(unsigned char *)(a1 + 2336)) {
    char v38 = v36;
  }
  else {
    char v38 = 0;
  }
  if ((v38 & 1) == 0)
  {
    double v52 = *(double *)&v94.i64[1];
    goto LABEL_51;
  }
LABEL_36:
  long long v91 = *(_OWORD *)(a1 + 816);
  uint64_t v92 = *(void *)(a1 + 832);
  LOWORD(__p) = 0;
  long long v84 = 0u;
  long long v85 = 0u;
  int v86 = 0;
  uint64_t v87 = 0;
  uint64_t v88 = 0;
  int v89 = 0;
  uint64_t IsValid = (*(uint64_t (**)(uint64_t, cnnavigation::TAITime *, void **, long long *, void **, void **))(*(void *)(a6 + 32) + 56))(a6 + 32, a2, &__p, &v90, v99, v97);
  if (IsValid)
  {
    LOWORD(v97[0]) = 12;
    LOBYTE(v82) = 3;
    sub_18E015C3C(a3, v99);
    uint64_t v51 = v99;
    if (v100 < 0) {
      LOBYTE(v51) = v99[0];
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v97, (unsigned __int8 *)&v82, "#gmp,#iono,#rof,find sat failed,SV,%s", v46, v47, v48, v49, v50, (char)v51);
    if ((v100 & 0x80000000) == 0) {
      return 0;
    }
    uint64_t v35 = v99[0];
    goto LABEL_41;
  }
  double v52 = *(double *)&v94.i64[1];
  if (v28)
  {
    LOWORD(__p) = 0;
    long long v84 = 0u;
    long long v85 = 0u;
    int v86 = 0;
    uint64_t v87 = 0;
    uint64_t v88 = 0;
    int v89 = 0;
    raven::GnssSvDatabase::PopulateGnssUTCParametersWithGps((raven::GnssSvDatabase *)(a1 + 984), (cnnavigation::GNSSUTCParameters *)&__p, 0.0, v45, v39, v40, v41, v42, v43, v44);
    uint64_t v53 = cnnavigation::TAITime::ToGPSTime(a2, (const cnnavigation::GNSSUTCParameters *)&__p);
    double v82 = 0.0;
    uint64_t v55 = (cnprint::CNPrinter *)(*(uint64_t (**)(void, uint64_t, long long *, long long *, double *, double, double))(**(void **)(a1 + 2544) + 16))(*(void *)(a1 + 2544), v53, &v91, &v90, &v82, v54, *a5);
    if (v55) {
      goto LABEL_68;
    }
    double v52 = v82 * 1000000000.0;
    if (cnprint::CNPrinter::GetLogLevel(v55)) {
      goto LABEL_68;
    }
    __int16 v81 = 12;
    unsigned __int8 v80 = 0;
    char v56 = v94.i8[8];
    sub_18E015C3C(a3, v99);
    sub_18E01A9C4(*a4, (uint64_t)v97);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v81, &v80, "#gmp,#rof,sphericalharmonicsionospheremodel,vendor_delay_nsec,%.3f,iono_delay_nsec,%.3f,SV,%s,band,%s", v57, v58, v59, v60, v61, v56);
    if (v98 < 0) {
      operator delete(v97[0]);
    }
    if ((v100 & 0x80000000) == 0) {
      goto LABEL_68;
    }
    uint64_t v62 = v99[0];
    goto LABEL_59;
  }
  int v37 = *(unsigned __int8 *)(a1 + 2336);
LABEL_51:
  if (!v37 || ((v36 ^ 1) & 1) != 0)
  {
    if (v37) {
      char v71 = v36;
    }
    else {
      char v71 = 1;
    }
    if ((v71 & 1) == 0)
    {
      uint64_t v72 = *(void *)(a1 + 8);
      if (*(unsigned char *)(v72 + 641))
      {
        if (*(unsigned char *)(v72 + 2560) && cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)IsValid) <= 1)
        {
          LOWORD(__p) = 12;
          LOBYTE(v99[0]) = 1;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&__p, (unsigned __int8 *)v99, "#gmp,#iono,not using thin shell model, not valid or not converged. Using Klobuchar-model-derived ionospheric delay instead", v73, v74, v75, v76, v77, v79);
        }
      }
    }
    goto LABEL_68;
  }
  v97[0] = 0;
  double v63 = *a5;
  *(double *)&std::string __p = *(double *)(*(void *)(a1 + 8) + 3128) * 0.0174532925;
  IonosphericDelay = (cnprint::CNPrinter *)cnnavigation::ThinShellIonosphereModel::GetIonosphericDelay(a1 + 2344, (uint64_t)&v91, &v90, (double *)v97, (double *)&__p, v63);
  if (!IonosphericDelay)
  {
    double v52 = *(double *)v97 * 1000000000.0;
    if (!cnprint::CNPrinter::GetLogLevel(IonosphericDelay))
    {
      LOWORD(v82) = 12;
      LOBYTE(v81) = 0;
      char v65 = v94.i8[8];
      sub_18E015C3C(a3, &__p);
      sub_18E01A9C4(*a4, (uint64_t)v99);
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v82, (unsigned __int8 *)&v81, "#gmp,#iono,thinshellionospheremodel,vendor_delay_nsec,%.3f,iono_delay_nsec,%.3f,SV,%s,band,%s", v66, v67, v68, v69, v70, v65);
      if (v100 < 0) {
        operator delete(v99[0]);
      }
      if (SHIBYTE(v84) < 0)
      {
        uint64_t v62 = __p;
LABEL_59:
        operator delete(v62);
      }
    }
  }
LABEL_68:
  double v78 = *(double *)v94.i64 * 0.299792458;
  *a7 = v52 * 0.299792458;
  a7[1] = v22 * 0.299792458;
  a7[2] = v78;
  a7[3] = v24 * 0.299792458;
  a7[4] = v95 * 0.299792458;
  return 1;
}

void sub_18E135338(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,void *a41)
{
  if (*(char *)(v41 - 153) < 0) {
    operator delete(a38);
  }
  if (*(char *)(v41 - 129) < 0) {
    operator delete(a41);
  }
  _Unwind_Resume(exception_object);
}

uint64_t raven::GnssMeasurementPreprocessor::FormPseudorange(cnprint::CNPrinter *a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, char a10)
{
  double v216 = a9;
  if (!*(unsigned char *)a1)
  {
    if (cnprint::CNPrinter::GetLogLevel(a1) > 1) {
      return 0;
    }
    *(_WORD *)std::string __p = 12;
    LOBYTE(v213) = 1;
    uint64_t v39 = "#gmp,FormPseudorange,not configured";
LABEL_8:
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, (unsigned __int8 *)&v213, v39, v34, v35, v36, v37, v38, v204);
    return 0;
  }
  double v19 = *(double *)(a7 + 248);
  unsigned int LogLevel = cnprint::CNPrinter::GetLogLevel(a1);
  if (v19 > 200.0)
  {
    if (LogLevel <= 1)
    {
      LOWORD(v211[0]) = 12;
      LOBYTE(v208) = 1;
      uint64_t v26 = *(void *)(a7 + 248);
      sub_18E015C3C(a2, __p);
      int v32 = *(unsigned __int8 *)(a2 + 8);
      uint64_t v214 = 0;
      uint64_t v215 = 0;
      double v213 = 0;
      switch(v32)
      {
        case 0:
          HIBYTE(v215) = 4;
          int v33 = 543911509;
          goto LABEL_114;
        case 1:
          HIBYTE(v215) = 4;
          int v33 = 1094922572;
          goto LABEL_114;
        case 2:
          HIBYTE(v215) = 4;
          int v33 = 538981708;
          goto LABEL_114;
        case 3:
          HIBYTE(v215) = 4;
          int v33 = 543568204;
          goto LABEL_114;
        case 4:
          HIBYTE(v215) = 4;
          int v33 = 541667650;
          goto LABEL_114;
        case 5:
          HIBYTE(v215) = 4;
          int v33 = 541274434;
          goto LABEL_114;
        case 6:
          HIBYTE(v215) = 4;
          int v33 = 543240770;
          goto LABEL_114;
        case 7:
          HIBYTE(v215) = 4;
          int v33 = 538980677;
          goto LABEL_114;
        case 8:
          HIBYTE(v215) = 4;
          int v33 = 543241541;
          goto LABEL_114;
        case 9:
          HIBYTE(v215) = 4;
          int v33 = 1112748364;
LABEL_114:
          LODWORD(v213) = v33;
          break;
        case 10:
          HIBYTE(v215) = 3;
          qmemcpy(&v213, "NL5", 3);
          break;
        default:
          break;
      }
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v211, (unsigned __int8 *)&v208, "#gmp,SV approximate range uncertainty from ephemeris,%.1f,meters exceeds threshold,%.1f,dropping,SV,%s,band,%s", v27, v28, v29, v30, v31, v26);
      if (SHIBYTE(v215) < 0) {
        operator delete(v213);
      }
      goto LABEL_117;
    }
    return 0;
  }
  if (!LogLevel)
  {
    LOWORD(v213) = 12;
    LOBYTE(v211[0]) = 0;
    sub_18E015C3C(a2, __p);
    if (__p[23] >= 0) {
      uint64_t v46 = __p;
    }
    else {
      LOBYTE(v46) = __p[0];
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v213, (unsigned __int8 *)v211, "#gmp,Processing meas,SV,%s,time,%lf", v41, v42, v43, v44, v45, (char)v46);
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
  }
  char v47 = *(unsigned char *)(a2 + 8);
  switch(v47)
  {
    case 1:
      if (!*(unsigned char *)(a2 + 9))
      {
        char v49 = 0;
        goto LABEL_139;
      }
      if (!sub_18E13B3A8((int *)a2)
        || *(double *)(a2 + 40) < 0.0
        || (float v48 = *(float *)(a2 + 48), v48 <= 0.0))
      {
        char v49 = *(unsigned char *)(a2 + 9);
        goto LABEL_139;
      }
      char v49 = *(unsigned char *)(a2 + 9);
      if (v48 >= 2001.38457)
      {
LABEL_139:
        *(_WORD *)std::string __p = 12;
        LOBYTE(v213) = 2;
        sub_18E13B3A8((int *)a2);
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, (unsigned __int8 *)&v213, "#gmp,Invalid L1 pseudorange,code-lock,%i,sv-time-present,%i,tot-unc,%.3lf,", v152, v153, v154, v155, v156, v49);
        return 0;
      }
      if (!*(unsigned char *)(a2 + 9))
      {
        *(_WORD *)std::string __p = 12;
        LOBYTE(v213) = 5;
        uint64_t v39 = "#gmp,L1 mod value for PR unavailable";
        goto LABEL_8;
      }
LABEL_70:
      if (!*(unsigned char *)(a2 + 10))
      {
LABEL_97:
        double v58 = 0.001;
        goto LABEL_98;
      }
      if (*(unsigned char *)(a2 + 12)) {
        goto LABEL_72;
      }
      double v58 = 6.0;
      if (!*(unsigned char *)(a2 + 11)) {
        goto LABEL_150;
      }
LABEL_98:
      *(_DWORD *)(a8 + 112) = *(_DWORD *)(a2 + 192);
      *(_DWORD *)(a8 + 96) = 1;
      *(unsigned char *)(a8 + 100) = *(unsigned char *)(a2 + 8);
      *(unsigned char *)(a8 + 189) = a3;
      *(double *)(a8 + 104) = a9;
      float64x2_t v91 = (float64x2_t)vdupq_n_s64(0x3E112E0BE826D695uLL);
      int8x16_t v92 = (int8x16_t)vmulq_f64(vcvtq_f64_s64(vsubq_s64(*(int64x2_t *)(a2 + 16), vdupq_n_s64(*((void *)a1 + 288) + *(void *)(a2 + 32)))), v91);
      *(int8x16_t *)(a8 + 192) = v92;
      double v212 = 0.0;
      double v213 = 0;
      uint64_t v214 = 0x3FB2F1A9FBE76C8BLL;
      *(void *)std::string __p = CNTimeSpan::operator-(a4, &v213, v92, (int8x16_t)v91);
      *(void *)&__p[8] = v93;
      if (!raven::GnssMeasurementPreprocessor::CalculateApproximateTimeOfFlight((double *)a1, (uint64_t)__p, a7, &v212))
      {
        *(_WORD *)std::string __p = 12;
        LOBYTE(v213) = 3;
        uint64_t v39 = "#gmp,Calculation of approximate time of flight failed";
        goto LABEL_8;
      }
      *(double *)v94.i64 = v212;
      *(void *)std::string __p = 0;
      *(void *)&__p[8] = 0;
      CNTimeSpan::SetTimeSpan((uint64_t *)__p, 0, v94, v95);
      v211[0] = CNTimeSpan::operator-(a4, __p, v96, v97);
      v211[1] = v98;
      double v210 = 0.0;
      *(_WORD *)std::string __p = 0;
      *(_OWORD *)&__p[8] = 0u;
      long long v218 = 0u;
      int v219 = 0;
      uint64_t v220 = 0;
      uint64_t v221 = 0;
      int v222 = 0;
      if ((*(unsigned int (**)(uint64_t, void *, unsigned char *, double *, void, void **, double))(*(void *)(a7 + 32) + 96))(a7 + 32, v211, __p, &v210, 0, &v213, a9))
      {
        LOWORD(v213) = 12;
        LOBYTE(v208) = 3;
        sub_18E015C3C(a2, __p);
        if (__p[23] >= 0) {
          uint64_t v104 = __p;
        }
        else {
          LOBYTE(v104) = __p[0];
        }
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v213, (unsigned __int8 *)&v208, "#gmp,Calculation of satellite clock offset failed,SV,%s,time,%.3lf", v99, v100, v101, v102, v103, (char)v104);
LABEL_117:
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
        return 0;
      }
      float v209 = 0.0;
      int v105 = raven::GnssMeasurementPreprocessor::PopulatePseudorangeMeasurementCorrections((uint64_t)a1, (cnnavigation::TAITime *)v211, a2, (unsigned __int8 *)(a2 + 8), &v216, a7, (double *)(a8 + 128), &v209);
      uint64_t result = 0;
      if (v105)
      {
        double v108 = v210;
        v107.i64[0] = 0x3E2CA726EB25F9DBLL;
        *(double *)v106.i64 = v210
                            + (-*(double *)(a8 + 128)
                             - *(double *)(a8 + 152)
                             - *(double *)(a8 + 144)
                             - *(double *)(a8 + 160))
                            * 0.00000000333564095;
        *(void *)std::string __p = 0;
        *(void *)&__p[8] = 0;
        CNTimeSpan::SetTimeSpan((uint64_t *)__p, 0, v106, v107);
        double v213 = (void *)CNTimeSpan::operator-(a6, __p, v109, v110);
        uint64_t v214 = v111;
        *(double *)v114.i64 = (double)CNTimeSpan::operator-((uint64_t)v211, &v213, v112, v113);
        double v116 = v115 + *(double *)v114.i64;
        *(double *)v117.i64 = v58 * (double)(uint64_t)round((v115 + *(double *)v114.i64) / v58);
        *(void *)std::string __p = 0;
        *(void *)&__p[8] = 0;
        CNTimeSpan::SetTimeSpan((uint64_t *)__p, 0, v117, v114);
        *(void *)&long long v208 = CNTimeSpan::operator+((uint64_t)&v213, __p, v118, v119);
        *((void *)&v208 + 1) = v120;
        if (*(unsigned char *)(*((void *)a1 + 1) + 579) && v58 != 0.001)
        {
          *(double *)v122.i64 = (double)(uint64_t)round(v116 / 0.001);
          *(double *)v121.i64 = *(double *)v122.i64 * 0.001;
          uint64_t v206 = 0;
          uint64_t v207 = 0;
          CNTimeSpan::SetTimeSpan(&v206, 0, v121, v122);
          *(void *)std::string __p = CNTimeSpan::operator+((uint64_t)&v213, &v206, v123, v124);
          *(void *)&__p[8] = v125;
          uint64_t v128 = CNTimeSpan::operator-((uint64_t)__p, &v208, v126, v127);
          uint64_t v132 = (cnprint::CNPrinter *)sub_18E1366EC(v128, v129, v130, v131);
          *(double *)v122.i64 = (double)(uint64_t)v132;
          if ((v133 + (double)(uint64_t)v132) * 1000.0 > 0.1)
          {
            long long v208 = *(_OWORD *)__p;
            if (!cnprint::CNPrinter::GetLogLevel(v132))
            {
              LOWORD(v206) = 12;
              unsigned __int8 v205 = 0;
              char v134 = sub_18E017C64(a7);
              cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v206, &v205, "#gmp,Detected sync error,SV %s,tx_time,%.6f,error_ms,%.3f,mod_value_ms,%.1f", v135, v136, v137, v138, v139, v134);
            }
          }
          double v108 = v210;
        }
        uint64_t v206 = 0;
        uint64_t v207 = 0;
        *(double *)v121.i64 = v108;
        CNTimeSpan::SetTimeSpan(&v206, 0, v121, v122);
        *(void *)std::string __p = CNTimeSpan::operator+((uint64_t)&v208, &v206, v140, v141);
        *(void *)&__p[8] = v142;
        uint64_t v145 = CNTimeSpan::operator-(a5, __p, v143, v144);
        *(double *)(a8 + 120) = (v146 + (double)v145) * 299792458.0;
        if (!sub_18E13B3A8((int *)a2)
          || (*(void *)(a2 + 80) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
          || (double v147 = *(double *)(a2 + 88), v147 <= 0.0))
        {
          if (!sub_18E13B3A8((int *)a2)
            || (*(void *)(a2 + 56) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
            || (double v147 = *(double *)(a2 + 64), v147 <= 0.0))
          {
            LOWORD(v206) = 12;
            unsigned __int8 v205 = 3;
            sub_18E015C3C(a2, __p);
            if (__p[23] >= 0) {
              long long v188 = __p;
            }
            else {
              LOBYTE(v188) = __p[0];
            }
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v206, &v205, "#gmp,Frequency offset unavailable, dropping pseudorange formation,SV,%s", v183, v184, v185, v186, v187, (char)v188);
            goto LABEL_117;
          }
        }
        unint64_t v148 = *((void *)a1 + 288);
        uint64_t v149 = *((void *)a1 + 1);
        double v150 = *(double *)(a7 + 248);
        if (*(unsigned char *)(v149 + 589))
        {
          double v151 = v150 * 3.33564095 * (v150 * 3.33564095);
        }
        else
        {
          if (v150 <= 5.0)
          {
            if (*(unsigned char *)(a7 + 256) != 4)
            {
              double v151 = 0.0;
              if (*(unsigned char *)(a7 + 256)) {
                goto LABEL_169;
              }
              LOWORD(v206) = 12;
              unsigned __int8 v205 = 3;
              sub_18E015C3C(a2, __p);
              if (__p[23] >= 0) {
                double v194 = __p;
              }
              else {
                LOBYTE(v194) = __p[0];
              }
              cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v206, &v205, "#gmp,SV position source unknown,SV,%s", v189, v190, v191, v192, v193, (char)v194);
              if ((__p[23] & 0x80000000) != 0) {
                operator delete(*(void **)__p);
              }
              uint64_t v149 = *((void *)a1 + 1);
            }
            double v151 = 11.1265006;
            goto LABEL_169;
          }
          double v151 = (v150 * v150 + -25.0) * 11.1265006;
        }
LABEL_169:
        double v195 = v147 * 0.000000001;
        double v196 = (double)v148 * 0.000000001 * ((double)v148 * 0.000000001 * 4.903325) / 299792458.0 * 1000000000.0;
        double v197 = v195 * (double)v148;
        if (*(unsigned char *)(v149 + 590)) {
          double v198 = *(double *)(v149 + 560) * (float)(v209 * v209);
        }
        else {
          double v198 = 0.0;
        }
        *(unsigned char *)(a8 + 188) = *(unsigned char *)(a2 + 52);
        raven::GnssMeasurementPreprocessor::GetMeasurementUncertaintyScaleFactor((unint64_t)a1, a7, a8, (uint64_t)__p);
        double v199 = *(float *)(a2 + 48);
        double v200 = v197 * v197 + v196 * v196 + v151 + v198;
        uint64_t v201 = *((void *)a1 + 1);
        int v202 = *(unsigned __int8 *)(v201 + 545);
        int v203 = *(unsigned __int8 *)(v201 + 3828);
        *(float *)(a8 + 168) = sub_18E13684C(a10, a7, v202, v203, v199, v200, *(float *)__p);
        if (__p[8])
        {
          *(float *)(a8 + 172) = sub_18E13684C(a10, a7, v202 != 0, v203 != 0, v199, v200, *(float *)&__p[4]);
          *(unsigned char *)(a8 + 176) = 1;
        }
        if (__p[16])
        {
          *(float *)(a8 + 180) = sub_18E13684C(a10, a7, *(unsigned __int8 *)(*((void *)a1 + 1) + 545), *(unsigned __int8 *)(*((void *)a1 + 1) + 3828), v199, v200, *(float *)&__p[12]);
          *(unsigned char *)(a8 + 184) = 1;
        }
        return 1;
      }
      return result;
    case 2:
      if (*(unsigned char *)(a2 + 9))
      {
        if (sub_18E13B3A8((int *)a2)
          && *(double *)(a2 + 40) >= 0.0
          && (float v59 = *(float *)(a2 + 48), v59 > 0.0))
        {
          char v60 = *(unsigned char *)(a2 + 9);
          if (v59 < 2001.38457)
          {
            if (!*(unsigned char *)(a2 + 9))
            {
              *(_WORD *)std::string __p = 12;
              LOBYTE(v213) = 5;
              uint64_t v39 = "#gmp,L5 mod value for PR unavailable";
              goto LABEL_8;
            }
            if (!*(unsigned char *)(a2 + 10)) {
              goto LABEL_97;
            }
            if (!*(unsigned char *)(a2 + 12))
            {
              double v58 = 6.0;
              if (!*(unsigned char *)(a2 + 11)) {
                double v58 = 0.01;
              }
              goto LABEL_98;
            }
LABEL_72:
            double v58 = 604800.0;
            goto LABEL_98;
          }
        }
        else
        {
          char v60 = *(unsigned char *)(a2 + 9);
        }
      }
      else
      {
        char v60 = 0;
      }
      *(_WORD *)std::string __p = 12;
      LOBYTE(v213) = 2;
      sub_18E13B3A8((int *)a2);
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, (unsigned __int8 *)&v213, "#gmp,Inalid L5 pseudorange,code-lock,%i,sv-time-present,%i,tot-unc,%.3lf", v157, v158, v159, v160, v161, v60);
      return 0;
    case 3:
      int v50 = sub_18E13B3A8((int *)a2);
      char v51 = *(unsigned char *)(a2 + 9);
      if (!v50) {
        goto LABEL_145;
      }
      if (*(double *)(a2 + 40) < 0.0) {
        goto LABEL_145;
      }
      float v52 = *(float *)(a2 + 48);
      if (v52 <= 0.0 || !*(unsigned char *)(a2 + 9)) {
        goto LABEL_145;
      }
      if (v52 >= 2001.38457)
      {
        char v51 = 1;
LABEL_145:
        *(_WORD *)std::string __p = 12;
        LOBYTE(v213) = 2;
        sub_18E13B3A8((int *)a2);
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, (unsigned __int8 *)&v213, "#gmp,Invalid L1f pseudorange,code-lock,%i,sv-time-present,%i,tot-unc,%lf", v167, v168, v169, v170, v171, v51);
        return 0;
      }
      *(double *)&uint64_t v53 = COERCE_DOUBLE(sub_18E1364D8((unsigned char *)(a2 + 9)));
      if (v54) {
        goto LABEL_64;
      }
      *(_WORD *)std::string __p = 12;
      LOBYTE(v213) = 5;
      uint64_t v39 = "#gmp,L1f mod value for PR unavailable";
      goto LABEL_8;
    case 4:
      int v67 = sub_18E13B3A8((int *)a2);
      char v68 = *(unsigned char *)(a2 + 9);
      if (v67)
      {
        if (*(double *)(a2 + 40) >= 0.0)
        {
          float v69 = *(float *)(a2 + 48);
          if (v69 > 0.0 && *(unsigned char *)(a2 + 9) && v69 < 2001.38457) {
            goto LABEL_70;
          }
        }
      }
      *(_WORD *)std::string __p = 12;
      LOBYTE(v213) = 2;
      sub_18E13B3A8((int *)a2);
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, (unsigned __int8 *)&v213, "#gmp,Invalid B1i pseudorange,b1i-code-lock,%i,sv-time-present,%i,tot-unc,%.3f", v81, v82, v83, v84, v85, v68);
      return 0;
    case 5:
      int v70 = sub_18E13B3A8((int *)a2);
      char v71 = *(unsigned char *)(a2 + 9);
      if (!v70
        || *(double *)(a2 + 40) < 0.0
        || (float v72 = *(float *)(a2 + 48), v72 <= 0.0)
        || !*(unsigned char *)(a2 + 9)
        || v72 >= 2001.38457)
      {
        *(_WORD *)std::string __p = 12;
        LOBYTE(v213) = 2;
        sub_18E13B3A8((int *)a2);
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, (unsigned __int8 *)&v213, "#gmp,Invalid B1c pseudorange,b1c-code-lock,%i,sv-time-present,%i,tot-unc,%.3f", v86, v87, v88, v89, v90, v71);
        return 0;
      }
      double v73 = 0.01;
      if (*(unsigned char *)(a2 + 10)) {
        double v73 = 18.0;
      }
      if (*(unsigned char *)(a2 + 11)) {
        double v58 = 604800.0;
      }
      else {
        double v58 = v73;
      }
      goto LABEL_98;
    case 6:
      int v55 = sub_18E13B3A8((int *)a2);
      char v56 = *(unsigned char *)(a2 + 9);
      if (!v55
        || *(double *)(a2 + 40) < 0.0
        || (float v57 = *(float *)(a2 + 48), v57 <= 0.0)
        || !*(unsigned char *)(a2 + 9)
        || v57 >= 2001.38457)
      {
        *(_WORD *)std::string __p = 12;
        LOBYTE(v213) = 2;
        sub_18E13B3A8((int *)a2);
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, (unsigned __int8 *)&v213, "#gmp,Invalid B2a pseudorange,b2a-code-lock,%i,sv-time-present,%i,tot-unc,%.3lf", v76, v77, v78, v79, v80, v56);
        return 0;
      }
      if (!*(unsigned char *)(a2 + 10)) {
        goto LABEL_97;
      }
      if (*(unsigned char *)(a2 + 12)) {
        goto LABEL_72;
      }
      double v58 = 3.0;
      if (!*(unsigned char *)(a2 + 11)) {
        double v58 = 0.005;
      }
      goto LABEL_98;
    case 7:
      if (!sub_18E13B3A8((int *)a2)
        || *(double *)(a2 + 40) < 0.0
        || (float v61 = *(float *)(a2 + 48), v61 <= 0.0)
        || !*(unsigned char *)(a2 + 9)
        || v61 >= 2001.38457)
      {
        *(_WORD *)std::string __p = 12;
        LOBYTE(v213) = 2;
        char v172 = *(unsigned char *)(a2 + 10);
        sub_18E13B3A8((int *)a2);
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, (unsigned __int8 *)&v213, "#gmp,Invalid E1 pseudorange,e1c-code-lock,%i,e1bc-code-lock,%i,sv-time-present,%i,tot-unc,%.3lf", v173, v174, v175, v176, v177, v172);
        return 0;
      }
      *(double *)&uint64_t v53 = COERCE_DOUBLE(sub_18E136594((unsigned char *)(a2 + 9)));
      if (v62) {
        goto LABEL_64;
      }
      *(_WORD *)std::string __p = 12;
      LOBYTE(v213) = 5;
      uint64_t v39 = "#gmp,E1 mod value for PR unavailable";
      goto LABEL_8;
    case 8:
      int v63 = sub_18E13B3A8((int *)a2);
      char v64 = *(unsigned char *)(a2 + 9);
      if (!v63) {
        goto LABEL_148;
      }
      if (*(double *)(a2 + 40) < 0.0) {
        goto LABEL_148;
      }
      float v65 = *(float *)(a2 + 48);
      if (v65 <= 0.0 || !*(unsigned char *)(a2 + 9)) {
        goto LABEL_148;
      }
      if (v65 >= 2001.38457)
      {
        char v64 = 1;
LABEL_148:
        *(_WORD *)std::string __p = 12;
        LOBYTE(v213) = 2;
        sub_18E13B3A8((int *)a2);
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, (unsigned __int8 *)&v213, "#gmp,Invalid E5a pseudorange,code-lock,%i,sv-time-present,%i,tot-unc,%.3lf", v178, v179, v180, v181, v182, v64);
        return 0;
      }
      *(double *)&uint64_t v53 = COERCE_DOUBLE(sub_18E136634((unsigned char *)(a2 + 9)));
      if (v66)
      {
LABEL_64:
        double v58 = *(double *)&v53;
        goto LABEL_98;
      }
      *(_WORD *)std::string __p = 12;
      LOBYTE(v213) = 5;
      uint64_t v39 = "#gmp,E5a mod value for PR unavailable";
      goto LABEL_8;
    case 10:
      if (*(unsigned char *)(a2 + 9))
      {
        if (sub_18E13B3A8((int *)a2)
          && *(double *)(a2 + 40) >= 0.0
          && (float v74 = *(float *)(a2 + 48), v74 > 0.0))
        {
          char v75 = *(unsigned char *)(a2 + 9);
          if (v74 < 2001.38457)
          {
            if (!*(unsigned char *)(a2 + 9))
            {
              *(_WORD *)std::string __p = 12;
              LOBYTE(v213) = 5;
              uint64_t v39 = "#gmp,NL5 mod value for PR unavailable";
              goto LABEL_8;
            }
            if (!*(unsigned char *)(a2 + 10)) {
              goto LABEL_97;
            }
            if (!*(unsigned char *)(a2 + 12))
            {
              double v58 = 12.0;
              if (*(unsigned char *)(a2 + 11)) {
                goto LABEL_98;
              }
LABEL_150:
              double v58 = 0.02;
              goto LABEL_98;
            }
            goto LABEL_72;
          }
        }
        else
        {
          char v75 = *(unsigned char *)(a2 + 9);
        }
      }
      else
      {
        char v75 = 0;
      }
      *(_WORD *)std::string __p = 12;
      LOBYTE(v213) = 2;
      sub_18E13B3A8((int *)a2);
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, (unsigned __int8 *)&v213, "#gmp,Invalid L5 pseudorange,code-lock,%i,sv-time-present,%i,tot-unc,%.3lf,", v162, v163, v164, v165, v166, v75);
      return 0;
    default:
      *(_WORD *)std::string __p = 12;
      LOBYTE(v213) = 2;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, (unsigned __int8 *)&v213, "#gmp,Measurement from band not to be used,band,%i", v21, v22, v23, v24, v25, v47);
      return 0;
  }
}

void sub_18E136444(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a36 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_18E1364D8(unsigned char *a1)
{
  if (!*a1) {
    return 0;
  }
  uint64_t v1 = 0x3F847AE147AE147BLL;
  BOOL v2 = a1[1] != 0;
  if (!a1[1]) {
    uint64_t v1 = 0x3F50624DD2F1A9FCLL;
  }
  if (!a1[2]) {
    BOOL v2 = 1;
  }
  if (a1[1]) {
    BOOL v3 = a1[2] == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    if (a1[4]) {
      return 0x40F5180000000000;
    }
    BOOL v2 = 0;
    uint64_t v1 = 0x3F847AE147AE147BLL;
  }
  if (!a1[1]) {
    BOOL v2 = 1;
  }
  uint64_t v5 = 0x4000000000000000;
  if (!a1[3]) {
    uint64_t v5 = 0x3F947AE147AE147BLL;
  }
  if (v2) {
    return v1;
  }
  else {
    return v5;
  }
}

uint64_t sub_18E136594(unsigned char *a1)
{
  if (!*a1) {
    return 0;
  }
  if (a1[2]) {
    BOOL v1 = a1[3] != 0;
  }
  else {
    BOOL v1 = 0;
  }
  if (a1[1]) {
    BOOL v3 = a1[3] != 0;
  }
  else {
    BOOL v3 = 0;
  }
  BOOL v4 = v1 || v3;
  uint64_t v5 = 0x3FB999999999999ALL;
  if (!a1[1]) {
    uint64_t v5 = 0x3F70624DD2F1A9FCLL;
  }
  uint64_t v6 = 0x4000000000000000;
  if (!a1[2]) {
    uint64_t v6 = v5;
  }
  if (v4) {
    return 0x4122750000000000;
  }
  else {
    return v6;
  }
}

uint64_t sub_18E136634(unsigned char *a1)
{
  if (!*a1) {
    return 0;
  }
  if (a1[1]) {
    BOOL v1 = a1[4] != 0;
  }
  else {
    BOOL v1 = 0;
  }
  if (a1[2]) {
    BOOL v3 = a1[4] != 0;
  }
  else {
    BOOL v3 = 0;
  }
  if (v1 || v3) {
    return 0x4122750000000000;
  }
  if (a1[1] && a1[3]) {
    return 0x4024000000000000;
  }
  uint64_t v4 = 0x3F947AE147AE147BLL;
  if (!a1[1]) {
    uint64_t v4 = 0x3F50624DD2F1A9FCLL;
  }
  if (a1[2]) {
    return 0x3FB999999999999ALL;
  }
  else {
    return v4;
  }
}

uint64_t sub_18E1366EC(uint64_t a1, uint64_t a2, int8x16_t a3, int8x16_t a4)
{
  *(double *)a4.i64 = (double)a1;
  *(double *)a3.i64 = fabs(*(double *)&a2 + (double)a1);
  v5[0] = 0;
  v5[1] = 0;
  CNTimeSpan::SetTimeSpan(v5, 0, a3, a4);
  return v5[0];
}

unint64_t raven::GnssMeasurementPreprocessor::GetMeasurementUncertaintyScaleFactor@<X0>(unint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *(_DWORD *)a4 = 1065353216;
  *(unsigned char *)(a4 + 4) = 0;
  *(unsigned char *)(a4 + 8) = 0;
  *(unsigned char *)(a4 + 12) = 0;
  *(unsigned char *)(a4 + 16) = 0;
  if (!(*(unsigned __int8 *)(*(void *)(result + 8) + 549) | *(unsigned __int8 *)(a3 + 188)))
  {
    unint64_t v5 = result;
    uint64_t result = *(void *)(result + 2608);
    if (result)
    {
      unsigned int v8 = (_DWORD *)(a3 + 96);
      uint64_t v9 = a3 + 100;
      unint64_t UncertaintyScaleFactor = raven::GNSSUncertaintyScaling::GNSSUncertaintyWrapper::GetUncertaintyScaleFactor(result, (_DWORD *)(a3 + 96), a3 + 100, v5 + 977, v5 + 888, 0, *(float *)(a3 + 112), *(double *)(a2 + 264), *(float *)(a3 + 168));
      if ((UncertaintyScaleFactor & 0xFF00000000) != 0) {
        *(_DWORD *)a4 = UncertaintyScaleFactor;
      }
      unint64_t v11 = raven::GNSSUncertaintyScaling::GNSSUncertaintyWrapper::GetUncertaintyScaleFactor(*(void *)(v5 + 2608), v8, v9, v5 + 977, v5 + 888, 1, *(float *)(a3 + 112), *(double *)(a2 + 264), *(float *)(a3 + 168));
      *(_DWORD *)(a4 + 4) = v11;
      *(unsigned char *)(a4 + 8) = BYTE4(v11);
      uint64_t result = raven::GNSSUncertaintyScaling::GNSSUncertaintyWrapper::GetUncertaintyScaleFactor(*(void *)(v5 + 2608), v8, v9, v5 + 977, v5 + 888, 2, *(float *)(a3 + 112), *(double *)(a2 + 264), *(float *)(a3 + 168));
      *(_DWORD *)(a4 + 12) = result;
      *(unsigned char *)(a4 + 16) = BYTE4(result);
    }
  }
  return result;
}

float sub_18E13684C(char a1, uint64_t a2, int a3, int a4, double a5, double a6, float a7)
{
  double v7 = a7;
  if (a3) {
    double v8 = 1.0;
  }
  else {
    double v8 = v7;
  }
  if (!a3) {
    double v7 = 1.0;
  }
  double v9 = v7 * a5 * (v7 * a5);
  if (a4) {
    a6 = -0.0;
  }
  double v10 = v8 * (sqrt(a6 + v9) * 0.299792458);
  if (a1 && (a4 & 1) == 0)
  {
    if (*(unsigned char *)(a2 + 288)) {
      double v11 = *(double *)(a2 + 280);
    }
    else {
      double v11 = 800.0;
    }
    double v12 = fabs(v11);
    return sqrt(v10 * v10 + v12 * 0.004 * (v12 * 0.004));
  }
  return v10;
}

unint64_t raven::GnssMeasurementPreprocessor::FormInstantaneousDoppler@<X0>(unint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>)
{
  if (!*(unsigned char *)(*(void *)(result + 8) + 610)
    || (unint64_t v11 = result, result = sub_18E13B3A8((int *)a2), !result)
    || (double v12 = *(double *)(a2 + 56), (*(void *)&v12 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    || (double v13 = *(double *)(a2 + 64), v13 <= 0.0)
    || v13 >= 100.069229)
  {
    *(unsigned char *)a5 = 0;
    *(unsigned char *)(a5 + 208) = 0;
    return result;
  }
  unint64_t v14 = *(void *)(v11 + 2304) + *(void *)(a2 + 32);
  char v15 = *(unsigned char *)(a2 + 8);
  int v16 = *(_DWORD *)(a2 + 192);
  float v17 = v13 * 0.299792458;
  char v18 = *(unsigned char *)(a2 + 72);
  *(_OWORD *)a5 = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)(a5 + 48) = 0u;
  *(_OWORD *)(a5 + 64) = 0u;
  *(void *)(a5 + 80) = 0;
  *(void *)(a5 + 88) = 0x7FF8000000000000;
  *(_DWORD *)(a5 + 96) = 2;
  *(unsigned char *)(a5 + 100) = v15;
  *(double *)(a5 + 104) = a6;
  *(_DWORD *)(a5 + 112) = v16;
  int64x2_t v19 = vdupq_n_s64(0x7FF8000000000000uLL);
  *(double *)(a5 + 120) = v12 / -1000000000.0 * 299792458.0;
  *(int64x2_t *)(a5 + 128) = v19;
  *(int64x2_t *)(a5 + 144) = v19;
  *(void *)(a5 + 160) = 0x7FF8000000000000;
  *(float *)(a5 + 168) = v17;
  *(unsigned char *)(a5 + 172) = 0;
  *(unsigned char *)(a5 + 176) = 0;
  *(unsigned char *)(a5 + 180) = 0;
  *(unsigned char *)(a5 + 184) = 0;
  *(unsigned char *)(a5 + 188) = v18;
  *(unsigned char *)(a5 + 189) = a3;
  *(unsigned char *)(a5 + 190) = 1;
  *(float64x2_t *)(a5 + 192) = vmulq_f64(vcvtq_f64_s64(vsubq_s64(*(int64x2_t *)(a2 + 16), vdupq_n_s64(v14))), (float64x2_t)vdupq_n_s64(0x3E112E0BE826D695uLL));
  *(unsigned char *)(a5 + 208) = 1;
  uint64_t result = raven::GnssMeasurementPreprocessor::GetMeasurementUncertaintyScaleFactor(v11, a4, a5, (uint64_t)&v26);
  double v20 = (double)*(unint64_t *)(v11 + 2304)
      * 0.000000001
      * ((double)*(unint64_t *)(v11 + 2304)
       * 0.000000001
       * 96.1703842);
  uint64_t v21 = *(void *)(v11 + 8);
  float v22 = v26 * v17;
  if (*(unsigned char *)(v21 + 3828))
  {
    *(float *)(a5 + 168) = v22;
    if (!v28) {
      goto LABEL_14;
    }
    float v23 = v27 * v17;
  }
  else
  {
    float v24 = sqrt(v20 + v22 * v22);
    *(float *)(a5 + 168) = v24;
    if (!v28) {
      goto LABEL_14;
    }
    float v23 = sqrt(v20 + (float)(v27 * v17) * (float)(v27 * v17));
  }
  *(float *)(a5 + 172) = v23;
  *(unsigned char *)(a5 + 176) = 1;
LABEL_14:
  if (v30)
  {
    float v25 = sqrt(v20 + (float)(v29 * v17) * (float)(v29 * v17));
    if (*(unsigned char *)(v21 + 3828)) {
      float v25 = v29 * v17;
    }
    *(float *)(a5 + 180) = v25;
    *(unsigned char *)(a5 + 184) = 1;
  }
  return result;
}

uint64_t raven::GnssMeasurementPreprocessor::FillAveragedDopplerStartEndTimes(uint64_t a1, int64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(unsigned char *)(*(void *)(a1 + 8) + 544))
  {
    if (!*(unsigned char *)(a3 + 8))
    {
      __int16 v16 = 12;
      unsigned __int8 v15 = 3;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v16, &v15, "#gmp,Average doppler cannot be formed because hw_clock diff is unavailable", a4, a5, a6, a7, a8, v12);
      return 0;
    }
    double v8 = *(double *)a3;
    if ((*(void *)a3 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v8 < 0.25 || v8 > 1.5)
    {
      __int16 v14 = 12;
      unsigned __int8 v13 = 3;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v14, &v13, "#gmp,Duration since last report is unexpected,not forming averaged Doppler,%.3f", a4, a5, a6, a7, a8, SLOBYTE(v8));
      return 0;
    }
    *(double *)(a4 + 192) = -v8;
    *(void *)(a4 + 200) = 0;
  }
  else
  {
    *(float64x2_t *)(a4 + 192) = vmulq_f64(vcvtq_f64_s64(vsubq_s64(a2[1], vdupq_n_s64(*(void *)(a1 + 2304) + a2[2].i64[0]))), (float64x2_t)vdupq_n_s64(0x3E112E0BE826D695uLL));
  }
  return 1;
}

unint64_t raven::GnssMeasurementPreprocessor::FormAveragedDoppler@<X0>(unint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>, double a7@<D0>)
{
  if (!*(unsigned char *)(*(void *)(result + 8) + 609)) {
    goto LABEL_15;
  }
  unint64_t v13 = result;
  uint64_t result = sub_18E13B3A8((int *)a2);
  if (!result) {
    goto LABEL_15;
  }
  double v18 = *(double *)(a2 + 80);
  if ((*(void *)&v18 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
    goto LABEL_15;
  }
  double v19 = *(double *)(a2 + 88);
  if (v19 <= 0.0) {
    goto LABEL_15;
  }
  if (v19 >= 100.069229) {
    goto LABEL_15;
  }
  char v20 = *(unsigned char *)(a2 + 8);
  int v21 = *(_DWORD *)(a2 + 192);
  long long v36 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  *(void *)&long long v41 = 0;
  *((void *)&v41 + 1) = 0x7FF8000000000000;
  LODWORD(v42) = 3;
  BYTE4(v42) = v20;
  *((double *)&v42 + 1) = a7;
  LODWORD(v43) = v21;
  *((double *)&v43 + 1) = v18 * -0.299792458;
  int64x2_t v44 = vdupq_n_s64(0x7FF8000000000000uLL);
  int64x2_t v45 = v44;
  *(void *)&long long v46 = 0x7FF8000000000000;
  DWORD2(v46) = 2143289344;
  BYTE12(v46) = 0;
  LOBYTE(v47) = 0;
  BYTE4(v47) = 0;
  BYTE8(v47) = 0;
  BYTE13(v47) = a3;
  BYTE14(v47) = 1;
  int64x2_t v48 = v44;
  LOBYTE(v49) = 1;
  uint64_t result = raven::GnssMeasurementPreprocessor::FillAveragedDopplerStartEndTimes(v13, (int64x2_t *)a2, a4, (uint64_t)&v36, v14, v15, v16, v17);
  if (result)
  {
    if (*(unsigned char *)(*(void *)(v13 + 8) + 578)) {
      uint64_t v22 = a2 + 56;
    }
    else {
      uint64_t v22 = a2 + 80;
    }
    float v23 = *(double *)(v22 + 8) * 0.299792458;
    *((float *)&v46 + 2) = v23;
    BYTE12(v47) = *(unsigned char *)(v22 + 16);
    uint64_t result = raven::GnssMeasurementPreprocessor::GetMeasurementUncertaintyScaleFactor(v13, a5, (uint64_t)&v36, (uint64_t)v32);
    *((float *)&v46 + 2) = v32[0] * v23;
    if (v33)
    {
      *((float *)&v46 + 3) = v32[1] * v23;
      LOBYTE(v47) = 1;
    }
    if (v35)
    {
      *((float *)&v47 + 1) = v34 * v23;
      BYTE8(v47) = 1;
    }
    long long v24 = v47;
    int64x2_t v25 = v48;
    int64x2_t v26 = v45;
    *(_OWORD *)(a6 + 160) = v46;
    *(_OWORD *)(a6 + 176) = v24;
    *(int64x2_t *)(a6 + 192) = v25;
    long long v27 = v43;
    int64x2_t v28 = v44;
    *(_OWORD *)(a6 + 96) = v42;
    *(_OWORD *)(a6 + 112) = v27;
    *(void *)(a6 + 208) = v49;
    *(int64x2_t *)(a6 + 128) = v28;
    *(int64x2_t *)(a6 + 144) = v26;
    long long v29 = v39;
    *(_OWORD *)(a6 + 32) = v38;
    *(_OWORD *)(a6 + 48) = v29;
    long long v30 = v41;
    *(_OWORD *)(a6 + 64) = v40;
    *(_OWORD *)(a6 + 80) = v30;
    long long v31 = v37;
    *(_OWORD *)a6 = v36;
    *(_OWORD *)(a6 + 16) = v31;
  }
  else
  {
LABEL_15:
    *(unsigned char *)a6 = 0;
    *(unsigned char *)(a6 + 208) = 0;
  }
  return result;
}

void raven::GnssMeasurementPreprocessor::FormAveragedDopplerFromPhaseTracking(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>, double a8@<D0>)
{
  if (!*(unsigned char *)(*(void *)(a1 + 8) + 608)) {
    goto LABEL_18;
  }
  if (sub_18E13B3A8((int *)a2))
  {
    double v20 = *(double *)(a2 + 104);
    if ((*(void *)&v20 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
    {
      double v21 = *(double *)(a2 + 112);
      if (v21 > 0.0 && v21 < 100.069229)
      {
        char v22 = *(unsigned char *)(a2 + 8);
        int v23 = *(_DWORD *)(a2 + 192);
        char v24 = *(unsigned char *)(a2 + 120);
        *(_OWORD *)a7 = 0u;
        *(_OWORD *)(a7 + 16) = 0u;
        *(_OWORD *)(a7 + 32) = 0u;
        *(_OWORD *)(a7 + 48) = 0u;
        *(_OWORD *)(a7 + 64) = 0u;
        *(void *)(a7 + 80) = 0;
        *(void *)(a7 + 88) = 0x7FF8000000000000;
        *(_DWORD *)(a7 + 96) = 4;
        *(unsigned char *)(a7 + 100) = v22;
        *(double *)(a7 + 104) = a8;
        *(_DWORD *)(a7 + 112) = v23;
        *(double *)(a7 + 120) = v20 * -0.299792458;
        int64x2_t v25 = vdupq_n_s64(0x7FF8000000000000uLL);
        *(int64x2_t *)(a7 + 128) = v25;
        *(int64x2_t *)(a7 + 144) = v25;
        *(void *)(a7 + 160) = 0x7FF8000000000000;
        *(_DWORD *)(a7 + 168) = 2143289344;
        *(unsigned char *)(a7 + 172) = 0;
        *(unsigned char *)(a7 + 176) = 0;
        *(unsigned char *)(a7 + 180) = 0;
        *(unsigned char *)(a7 + 184) = 0;
        *(unsigned char *)(a7 + 188) = 0;
        *(unsigned char *)(a7 + 189) = a4;
        *(unsigned char *)(a7 + 190) = v24;
        *(int64x2_t *)(a7 + 192) = v25;
        *(unsigned char *)(a7 + 208) = 1;
        if (raven::GnssMeasurementPreprocessor::FillAveragedDopplerStartEndTimes(a1, (int64x2_t *)a2, a5, a7, v16, v17, v18, v19))
        {
          float v26 = *(double *)(a2 + 112) * 0.299792458;
          *(float *)(a7 + 168) = v26;
          *(unsigned char *)(a7 + 188) = *(unsigned char *)(a2 + 121);
          raven::GnssMeasurementPreprocessor::GetMeasurementUncertaintyScaleFactor(a1, a6, a7, (uint64_t)&v44);
          *(float *)(a7 + 168) = *(float *)&v44 * v26;
          if (BYTE8(v44))
          {
            *(float *)(a7 + 172) = *((float *)&v44 + 1) * v26;
            *(unsigned char *)(a7 + 176) = 1;
          }
          if ((_BYTE)v45)
          {
            *(float *)(a7 + 180) = *((float *)&v44 + 3) * v26;
            *(unsigned char *)(a7 + 184) = 1;
          }
          return;
        }
      }
    }
  }
  if (!*(unsigned char *)(a1 + 2600) || !sub_18E13B3A8((int *)a2) || !sub_18E0E5BC8(a2 + 128)) {
    goto LABEL_18;
  }
  if (!*(unsigned char *)(a1 + 2600)) {
    goto LABEL_33;
  }
  raven::GnssPhaseTrackingStore::FormAveragedDoppler(a1 + 2552, a3, a2, *(void *)(a1 + 2304) + *(void *)(a2 + 32), (uint64_t)&v44);
  if (!(_BYTE)v57)
  {
LABEL_18:
    *(unsigned char *)a7 = 0;
    *(unsigned char *)(a7 + 208) = 0;
    return;
  }
  *((double *)&v50 + 1) = a8;
  if (*(unsigned char *)(*(void *)(a1 + 8) + 578))
  {
    float v27 = *(double *)(a2 + 64) * 0.299792458;
    *((float *)&v54 + 2) = v27;
  }
  else
  {
    float v27 = *((float *)&v54 + 2);
  }
  raven::GnssMeasurementPreprocessor::GetMeasurementUncertaintyScaleFactor(a1, a6, (uint64_t)&v44, (uint64_t)&v39);
  if (!(_BYTE)v57) {
LABEL_33:
  }
    sub_18DFF28FC();
  float v28 = v27 * v39;
  float v29 = 0.01;
  if ((float)(v27 * v39) < 0.01) {
    float v28 = 0.01;
  }
  *((float *)&v54 + 2) = v28;
  if (v41)
  {
    float v30 = v27 * v40;
    if ((float)(v27 * v40) < 0.01) {
      float v30 = 0.01;
    }
    *((float *)&v54 + 3) = v30;
    LOBYTE(v55) = 1;
  }
  if (v43)
  {
    if ((float)(v27 * v42) >= 0.01) {
      float v29 = v27 * v42;
    }
    *((float *)&v55 + 1) = v29;
    BYTE8(v55) = 1;
  }
  long long v31 = v55;
  long long v32 = v56;
  long long v33 = v53;
  *(_OWORD *)(a7 + 160) = v54;
  *(_OWORD *)(a7 + 176) = v31;
  *(_OWORD *)(a7 + 192) = v32;
  long long v34 = v51;
  long long v35 = v52;
  *(_OWORD *)(a7 + 96) = v50;
  *(_OWORD *)(a7 + 112) = v34;
  *(void *)(a7 + 208) = v57;
  *(_OWORD *)(a7 + 128) = v35;
  *(_OWORD *)(a7 + 144) = v33;
  long long v36 = v47;
  *(_OWORD *)(a7 + 32) = v46;
  *(_OWORD *)(a7 + 48) = v36;
  long long v37 = v49;
  *(_OWORD *)(a7 + 64) = v48;
  *(_OWORD *)(a7 + 80) = v37;
  long long v38 = v45;
  *(_OWORD *)a7 = v44;
  *(_OWORD *)(a7 + 16) = v38;
}

uint64_t raven::GnssMeasurementPreprocessor::PopulateGnssMeasurements(unint64_t a1, uint64_t *a2, double *a3, uint64_t a4, _OWORD *a5, uint64_t a6, char a7, _OWORD *a8, int8x16_t a9, int8x16_t a10)
{
  if (!*(unsigned char *)a1)
  {
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)a1) > 1) {
      return 0;
    }
    LOWORD(__p[0]) = 12;
    LOBYTE(v149[0]) = 1;
    long long v34 = "#gmp,PopulateGnssMeasurements,not configured";
LABEL_9:
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, (unsigned __int8 *)v149, v34, v29, v30, v31, v32, v33, v135);
    return 0;
  }
  uint64_t v17 = *(void *)a3;
  a10.i64[0] = 0x3F50624DD2F1A9FCLL;
  *(double *)a9.i64 = round(a3[1] / 0.001) * 0.001;
  __p[1] = 0;
  __p[0] = 0;
  CNTimeSpan::SetTimeSpan((uint64_t *)__p, v17, a9, a10);
  long long v189 = *(_OWORD *)__p;
  uint64_t v145 = a8;
  *a8 = *(_OWORD *)__p;
  LOWORD(__p[0]) = 0;
  memset(&__p[1], 0, 36);
  long long v152 = 0uLL;
  LODWORD(v153) = 0;
  int v18 = cnnavigation::TAITime::ToGPSTime((cnnavigation::TAITime *)a3, (const cnnavigation::GNSSUTCParameters *)__p);
  LOWORD(__p[0]) = 0;
  memset(&__p[1], 0, 36);
  long long v152 = 0uLL;
  LODWORD(v153) = 0;
  int v19 = cnnavigation::TAITime::ToGalileoTime((cnnavigation::TAITime *)a3, (const cnnavigation::GNSSUTCParameters *)__p);
  LOWORD(__p[0]) = 0;
  memset(&__p[1], 0, 36);
  long long v152 = 0uLL;
  LODWORD(v153) = 0;
  int v143 = cnnavigation::TAITime::ToBeiDouTime((cnnavigation::TAITime *)a3, (const cnnavigation::GNSSUTCParameters *)__p);
  LOWORD(__p[0]) = 0;
  memset(&__p[1], 0, 36);
  long long v152 = 0uLL;
  LODWORD(v153) = 0;
  int v20 = cnnavigation::TAITime::ToNavicTime((cnnavigation::TAITime *)a3, (const cnnavigation::GNSSUTCParameters *)__p);
  __int16 v182 = 0;
  long long v183 = 0u;
  long long v184 = 0u;
  int v185 = 0;
  uint64_t v186 = 0;
  uint64_t v187 = 0;
  int v188 = 0;
  int v28 = raven::GnssSvDatabase::PopulateGnssUTCParametersWithGlonass((raven::GnssSvDatabase *)(a1 + 984), (cnnavigation::GNSSUTCParameters *)&v182, v21, v22, v23, v24, v25, v26, 0.0, v27);
  int v180 = 1;
  uint64_t v181 = 0;
  char v142 = v28;
  if (v28)
  {
    long long v183 = 0uLL;
    if (cnnavigation::TAITime::ToGLONASSTime((uint64_t)a3, (cnnavigation::GNSSUTCParameters *)&v182, (uint64_t)&v180))
    {
      LOWORD(__p[0]) = 12;
      LOBYTE(v149[0]) = 4;
      long long v34 = "#gmp,Cannot convert receiver time to glonass time";
      goto LABEL_9;
    }
  }
  int v138 = v20;
  int v139 = v19;
  unsigned int v35 = *(unsigned __int8 *)(a1 + 888);
  uint64_t v140 = a6;
  char v141 = a7;
  if (v35 >= 2) {
    *(unsigned char *)(a1 + 976) = v35;
  }
  else {
    *(unsigned char *)(a1 + 888) = *(unsigned char *)(a1 + 976);
  }
  uint64_t v37 = *a2;
  uint64_t v38 = a2[1];
  uint64_t v36 = 1;
  if (*a2 != v38)
  {
    uint64_t v147 = a4 + 8;
    int v136 = v18 - 1042;
    int64x2_t v137 = vdupq_n_s64(0x7FF8000000000000uLL);
    uint64_t v146 = a4;
    while (1)
    {
      unsigned int v39 = *(unsigned __int8 *)(v37 + 8);
      BOOL v40 = v39 > 9;
      int v41 = (1 << v39) & 0x2BB;
      if (!v40 && v41 != 0) {
        break;
      }
      int v43 = *(unsigned __int8 *)(v37 + 197);
      if (*(unsigned char *)(*(void *)(a1 + 8) + 3792)) {
        BOOL v62 = 1;
      }
      else {
        BOOL v62 = v43 == 0;
      }
      if (v62) {
        goto LABEL_19;
      }
      if (*(unsigned char *)(v37 + 196) != 1)
      {
LABEL_20:
        sub_18DEDE7B0(v176, "");
        char v178 = 0;
        unsigned int v179 = -1;
        if (raven::GnssMeasurementPreprocessor::GetCNSatIDFromGnssId((cnprint::CNPrinter *)a1, (unint64_t *)v37, (uint64_t)v176, v44, v45, v46, v47, v48))
        {
          if (v178 == 4 && (v179 <= 0x3F && ((1 << v179) & 0xF80000000000003ELL) != 0 || v179 - 1 >= 0x3F))
          {
            LOWORD(v149[0]) = 12;
            v148.i8[0] = 3;
            sub_18E015C3C(v37, __p);
            if (SHIBYTE(__p[2]) >= 0) {
              long long v54 = __p;
            }
            else {
              LOBYTE(v54) = __p[0];
            }
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)v149, (unsigned __int8 *)&v148, "#gmp,Not forming measurement based on svid,SV,%s", v49, v50, v51, v52, v53, (char)v54);
          }
          else
          {
            uint64_t v63 = sub_18E01B8A0(a4, (uint64_t)v176);
            if (v147 != v63)
            {
              uint64_t v64 = *(void *)(v63 + 64);
              double v175 = 0.0;
              int v174 = 0;
              sub_18E13382C(v37, *(void *)(a1 + 2304), &v175, &v174);
              uint64_t v65 = sub_18E01B8A0(a1 + 984, (uint64_t)v176);
              if (a1 + 992 == v65)
              {
                LOWORD(v149[0]) = 12;
                v148.i8[0] = 2;
                sub_18E015C3C(v37, __p);
                if (SHIBYTE(__p[2]) >= 0) {
                  uint64_t v88 = __p;
                }
                else {
                  LOBYTE(v88) = __p[0];
                }
                cnprint::CNPrinter::Print((cnprint::CNPrinter *)v149, (unsigned __int8 *)&v148, "#gmp,Not forming measurement because svinfo is not in db,SV,%s", v83, v84, v85, v86, v87, (char)v88);
              }
              else
              {
                unsigned int v66 = *(unsigned __int8 *)(v37 + 8);
                if (v66 <= 9 && ((1 << v66) & 0x2BB) != 0) {
                  int v67 = (cnprint::CNPrinter *)raven::GnssSvDatabase::AggregateHealthL1((unsigned char *)(v65 + 64));
                }
                else {
                  int v67 = (cnprint::CNPrinter *)raven::GnssSvDatabase::AggregateHealthL5((unsigned char *)(v65 + 64));
                }
                if (v67 == 1)
                {
                  switch(v66)
                  {
                    case 1u:
                      *(double *)v73.i64 = v175 + -561548.816;
                      __p[1] = 0;
                      __p[0] = 0;
                      CNTimeSpan::SetTimeSpan((uint64_t *)__p, 604800 * (v136 + v174), v73, v74);
                      int8x16_t v76 = *(int8x16_t *)__p;
                      goto LABEL_75;
                    case 2u:
                      *(double *)v73.i64 = v175 + -561548.816;
                      __p[1] = 0;
                      __p[0] = 0;
                      CNTimeSpan::SetTimeSpan((uint64_t *)__p, 604800 * (v136 + v174), v73, v74);
                      int8x16_t v76 = *(int8x16_t *)__p;
                      goto LABEL_78;
                    case 3u:
                      if (v142)
                      {
                        int v95 = *(char *)(v37 + 5);
                        if ((v95 - 7) <= 0xFFFFFFF1)
                        {
                          LOWORD(__p[0]) = 12;
                          LOBYTE(v149[0]) = 4;
                          cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, (unsigned __int8 *)v149, "#gmp,Could not form carrier frequency for GLONASS satellite,freq,%i", v68, v69, v70, v71, v72, v95);
                          goto LABEL_103;
                        }
                        v148.i32[0] = 0;
                        __p[1] = 0;
                        sub_18E133944(v37, *(void *)(a1 + 2304), (double *)&__p[1], v148.i32);
                        LODWORD(__p[0]) = v148.i32[0] + v180;
                        cnnavigation::TAITime::TAITime(v149, (int *)__p, (cnnavigation::GNSSUTCParameters *)&v182);
                        double v96 = (double)v95 * 562500.0 + 1602000000.0;
                        int8x16_t v76 = *(int8x16_t *)v149;
                        int8x16_t v173 = *(int8x16_t *)v149;
LABEL_79:
                        v149[0] = (void *)1;
                        v149[1] = (void *)0x3FB99999999999A0;
                        __p[0] = (void *)CNTimeSpan::operator-((uint64_t)a3, v149, v76, v75);
                        __p[1] = v97;
                        if (!sub_18DEE4CB8((double *)__p, (double *)(v64 + 72)))
                        {
                          v172[0] = 0;
                          v172[1] = 0x3FC999999999999ALL;
                          v148.i64[0] = CNTimeSpan::operator+((uint64_t)a3, v172, v98, v99);
                          v148.i64[1] = v100;
                          if (!sub_18DEE4C00((double *)v148.i64, (double *)(v64 + 88)))
                          {
                            uint64_t v107 = *(void *)(a1 + 8);
                            unsigned int v108 = *(unsigned __int8 *)(v37 + 8);
                            float v109 = 0.0;
                            if (v108 > 0xA)
                            {
                              uint64_t v110 = (uint64_t)a3;
                            }
                            else
                            {
                              uint64_t v110 = (uint64_t)a3;
                              if (((1 << v108) & 0x544) != 0) {
                                float v109 = *(float *)(v107 + 584);
                              }
                            }
                            if (*(unsigned char *)(v107 + 591))
                            {
                              char v111 = *(unsigned char *)(v37 + 196);
                              float v112 = *(float *)(v37 + 192);
                              if (v112 < v109 && (LODWORD(v112) & 0x7FFFFFFFu) < 0x7F800000) {
                                char v111 = 1;
                              }
                            }
                            else
                            {
                              char v111 = 0;
                            }
                            memset(__p, 0, 17);
                            memset(&__p[3], 0, 17);
                            long long v152 = 0uLL;
                            LOBYTE(v153) = 0;
                            uint64_t v154 = 0;
                            uint64_t v155 = 0;
                            uint64_t v156 = 0x7FF8000000000000;
                            int v157 = 0;
                            char v158 = 0;
                            uint64_t v159 = 0x7FF8000000000000;
                            int64x2_t v161 = v137;
                            int64x2_t v162 = v137;
                            int64x2_t v163 = v137;
                            int v160 = 2143289344;
                            int v164 = 2143289344;
                            char v165 = 0;
                            char v166 = 0;
                            char v167 = 0;
                            char v168 = 0;
                            __int16 v169 = 0;
                            char v170 = 1;
                            int64x2_t v171 = v137;
                            if (raven::GnssMeasurementPreprocessor::FormPseudorange((cnprint::CNPrinter *)a1, v37, v111, v110, (uint64_t)&v189, (uint64_t)&v173, v64, (uint64_t)__p, v96, v141))
                            {
                              raven::GnssMeasurementPreprocessor::CheckObservableAndAddToVector(a1, (uint64_t)__p, a5, v145, v64, v113, v114, v115);
                            }
                            else
                            {
                              v148.i16[0] = 12;
                              LOBYTE(v172[0]) = 2;
                              sub_18E015C3C(v37, v149);
                              int8x16_t v121 = v149;
                              if (v150 < 0) {
                                LOBYTE(v121) = v149[0];
                              }
                              cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v148, (unsigned __int8 *)v172, "#gmp,Could not form pseudorange,SV,%s", v116, v117, v118, v119, v120, (char)v121);
                              if (v150 < 0) {
                                operator delete(v149[0]);
                              }
                            }
                            raven::GnssMeasurementPreprocessor::FormInstantaneousDoppler(a1, v37, v111, v64, (uint64_t)__p, v96);
                            raven::GnssMeasurementPreprocessor::FormAveragedDoppler(a1, v37, v111, v140, v64, (uint64_t)v149, v96);
                            raven::GnssMeasurementPreprocessor::FormAveragedDopplerFromPhaseTracking(a1, v37, (uint64_t)v176, v111, v140, v64, (uint64_t)&v148, v96);
                            raven::GnssMeasurementPreprocessor::SelectAndPopulateDoppler(a1, v37, (uint64_t)__p, (uint64_t)v149, (uint64_t)&v148, a5, v145, v64);
                            uint64_t v122 = *(void *)(v64 + 328);
                            for (uint64_t i = *(void *)(v64 + 336); v122 != i; v122 += 208)
                            {
                              long long v124 = a5[1];
                              *(_OWORD *)uint64_t v122 = *a5;
                              *(_OWORD *)(v122 + 16) = v124;
                              long long v125 = a5[2];
                              long long v126 = a5[3];
                              long long v127 = a5[5];
                              *(_OWORD *)(v122 + 64) = a5[4];
                              *(_OWORD *)(v122 + 80) = v127;
                              *(_OWORD *)(v122 + 32) = v125;
                              *(_OWORD *)(v122 + 48) = v126;
                              *(_OWORD *)(v122 + 48) = *v145;
                              *(unsigned char *)(v122 + 40) = 1;
                            }
                            goto LABEL_103;
                          }
                        }
                        LOWORD(v149[0]) = 12;
                        v148.i8[0] = 3;
                        sub_18E015C3C(v37, __p);
                        if (SHIBYTE(__p[2]) >= 0) {
                          int8x16_t v106 = __p;
                        }
                        else {
                          LOBYTE(v106) = __p[0];
                        }
                        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v149, (unsigned __int8 *)&v148, "#gmp,Satellite polynomial is outside of time range needed for this measurement,SV,%s,rx_time,%lf,poly_start_delta,%lf,poly_end_delta,%lf", v101, v102, v103, v104, v105, (char)v106);
                      }
                      else
                      {
                        LOWORD(v149[0]) = 12;
                        v148.i8[0] = 3;
                        sub_18E015C3C(v37, __p);
                        double v133 = __p;
                        if (SHIBYTE(__p[2]) < 0) {
                          LOBYTE(v133) = __p[0];
                        }
                        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v149, (unsigned __int8 *)&v148, "#gmp,GLONASS UTC information unavailable,cannot form measurement,SV,%s", v128, v129, v130, v131, v132, (char)v133);
                      }
                      if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
                        goto LABEL_103;
                      }
                      break;
                    case 4u:
                      LODWORD(v149[0]) = v174 + v143;
                      v149[1] = *(void **)&v175;
                      uint64_t v153 = 0;
                      long long v152 = 0u;
                      memset(__p, 0, sizeof(__p));
                      cnnavigation::TAITime::TAITime((cnnavigation::TAITime *)&v148, (const cnnavigation::BeiDouTime *)v149, (const cnnavigation::GNSSUTCParameters *)__p);
                      int8x16_t v76 = v148;
                      int8x16_t v173 = v148;
                      double v96 = 1561098000.0;
                      goto LABEL_79;
                    case 5u:
                      LODWORD(v149[0]) = v174 + v143;
                      v149[1] = *(void **)&v175;
                      uint64_t v153 = 0;
                      long long v152 = 0u;
                      memset(__p, 0, sizeof(__p));
                      cnnavigation::TAITime::TAITime((cnnavigation::TAITime *)&v148, (const cnnavigation::BeiDouTime *)v149, (const cnnavigation::GNSSUTCParameters *)__p);
                      goto LABEL_74;
                    case 6u:
                      LODWORD(v149[0]) = v174 + v143;
                      v149[1] = *(void **)&v175;
                      uint64_t v153 = 0;
                      long long v152 = 0u;
                      memset(__p, 0, sizeof(__p));
                      cnnavigation::TAITime::TAITime((cnnavigation::TAITime *)&v148, (const cnnavigation::BeiDouTime *)v149, (const cnnavigation::GNSSUTCParameters *)__p);
                      goto LABEL_77;
                    case 7u:
                      LODWORD(v149[0]) = v174 + v139;
                      v149[1] = *(void **)&v175;
                      uint64_t v153 = 0;
                      long long v152 = 0u;
                      memset(__p, 0, sizeof(__p));
                      cnnavigation::TAITime::TAITime(&v148, (double *)v149, (cnnavigation::GNSSUTCParameters *)__p);
LABEL_74:
                      int8x16_t v76 = v148;
LABEL_75:
                      int8x16_t v173 = v76;
                      double v96 = 1575420000.0;
                      goto LABEL_79;
                    case 8u:
                      LODWORD(v149[0]) = v174 + v139;
                      v149[1] = *(void **)&v175;
                      uint64_t v153 = 0;
                      long long v152 = 0u;
                      memset(__p, 0, sizeof(__p));
                      cnnavigation::TAITime::TAITime(&v148, (double *)v149, (cnnavigation::GNSSUTCParameters *)__p);
                      goto LABEL_77;
                    case 0xAu:
                      LODWORD(v149[0]) = v174 + v138;
                      v149[1] = *(void **)&v175;
                      uint64_t v153 = 0;
                      long long v152 = 0u;
                      memset(__p, 0, sizeof(__p));
                      cnnavigation::TAITime::TAITime((cnnavigation::TAITime *)&v148, (const cnnavigation::NavicTime *)v149, (const cnnavigation::GNSSUTCParameters *)__p);
LABEL_77:
                      int8x16_t v76 = v148;
LABEL_78:
                      int8x16_t v173 = v76;
                      double v96 = 1176450000.0;
                      goto LABEL_79;
                    default:
                      goto LABEL_103;
                  }
LABEL_63:
                  operator delete(__p[0]);
LABEL_103:
                  a4 = v146;
LABEL_104:
                  if (v177 < 0) {
                    operator delete(v176[0]);
                  }
                  goto LABEL_106;
                }
                if (cnprint::CNPrinter::GetLogLevel(v67) > 1) {
                  goto LABEL_103;
                }
                LOWORD(v149[0]) = 12;
                v148.i8[0] = 1;
                char v89 = *(unsigned char *)(v37 + 8);
                sub_18E015C3C(v37, __p);
                cnprint::CNPrinter::Print((cnprint::CNPrinter *)v149, (unsigned __int8 *)&v148, "#gmp,Not forming measurement based on health,%d,%d,SV,%s", v90, v91, v92, v93, v94, v89);
              }
              if (SHIBYTE(__p[2]) < 0) {
                goto LABEL_63;
              }
              goto LABEL_103;
            }
            LOWORD(v149[0]) = 12;
            v148.i8[0] = 3;
            sub_18E015C3C(v37, __p);
            if (SHIBYTE(__p[2]) >= 0) {
              uint64_t v82 = __p;
            }
            else {
              LOBYTE(v82) = __p[0];
            }
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)v149, (unsigned __int8 *)&v148, "#gmp,Could not find the corresponding SV data for measurement,SV,%s", v77, v78, v79, v80, v81, (char)v82);
          }
        }
        else
        {
          LOWORD(v149[0]) = 12;
          if (*(_DWORD *)v37 == 2) {
            char v55 = 3;
          }
          else {
            char v55 = 4;
          }
          v148.i8[0] = v55;
          sub_18E015C3C(v37, __p);
          if (SHIBYTE(__p[2]) >= 0) {
            float v61 = __p;
          }
          else {
            LOBYTE(v61) = __p[0];
          }
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)v149, (unsigned __int8 *)&v148, "#gmp,could not form sat id,SV,%s", v56, v57, v58, v59, v60, (char)v61);
        }
        if (SHIBYTE(__p[2]) < 0) {
          operator delete(__p[0]);
        }
        goto LABEL_104;
      }
LABEL_106:
      v37 += 200;
      if (v37 == v38) {
        return 1;
      }
    }
    int v43 = *(unsigned __int8 *)(v37 + 197);
LABEL_19:
    if (v43) {
      goto LABEL_20;
    }
    goto LABEL_106;
  }
  return v36;
}

void sub_18E137DD4(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x39F]) < 0) {
    operator delete((void *)STACK[0x388]);
  }
  _Unwind_Resume(a1);
}

BOOL raven::GnssMeasurementPreprocessor::IsSvIdPermitted(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 24) != 4) {
    return 1;
  }
  unsigned int v1 = *(_DWORD *)(a1 + 28) - 1;
  return (v1 >= 0x3F || ((0x7C0000000000001FuLL >> v1) & 1) == 0) && v1 < 0x3F;
}

void raven::GnssMeasurementPreprocessor::CheckObservableAndAddToVector(uint64_t a1, uint64_t a2, _OWORD *a3, _OWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  long long v11 = a3[1];
  *(_OWORD *)a2 = *a3;
  *(_OWORD *)(a2 + 16) = v11;
  long long v12 = a3[2];
  long long v13 = a3[3];
  long long v14 = a3[5];
  *(_OWORD *)(a2 + 64) = a3[4];
  *(_OWORD *)(a2 + 80) = v14;
  *(_OWORD *)(a2 + 32) = v12;
  *(_OWORD *)(a2 + 48) = v13;
  *(_OWORD *)(a2 + 48) = *a4;
  *(unsigned char *)(a2 + 40) = 1;
  if (*(char *)(a5 + 23) < 0)
  {
    sub_18DEDE668(__p, *(void **)a5, *(void *)(a5 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a5;
    uint64_t v52 = *(void *)(a5 + 16);
  }
  uint64_t v53 = *(void *)(a5 + 24);
  int CanObservableBeIncluded = raven::GNSSPreprocessedMeasurementsChecker::CanObservableBeIncluded(a2, (uint64_t)__p, (double *)(a5 + 32), *(void *)(a1 + 8), a5, a6, a7, a8);
  int v16 = CanObservableBeIncluded;
  if (SHIBYTE(v52) < 0)
  {
    operator delete(__p[0]);
    if (!v16) {
      return;
    }
  }
  else if (!CanObservableBeIncluded)
  {
    return;
  }
  int v18 = *(_OWORD **)(a5 + 336);
  unint64_t v17 = *(void *)(a5 + 344);
  if ((unint64_t)v18 >= v17)
  {
    uint64_t v29 = *(_OWORD **)(a5 + 328);
    unint64_t v30 = 0x4EC4EC4EC4EC4EC5 * (v18 - v29) + 1;
    if (v30 > 0x13B13B13B13B13BLL) {
      sub_18DEE1FC8();
    }
    unint64_t v31 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v17 - (void)v29) >> 4);
    if (2 * v31 > v30) {
      unint64_t v30 = 2 * v31;
    }
    if (v31 >= 0x9D89D89D89D89DLL) {
      unint64_t v32 = 0x13B13B13B13B13BLL;
    }
    else {
      unint64_t v32 = v30;
    }
    if (v32)
    {
      if (v32 > 0x13B13B13B13B13BLL) {
        sub_18DEDF7D4();
      }
      uint64_t v33 = (char *)operator new(208 * v32);
    }
    else
    {
      uint64_t v33 = 0;
    }
    long long v34 = *(_OWORD *)(a2 + 176);
    unsigned int v35 = &v33[16 * (v18 - v29)];
    *((_OWORD *)v35 + 10) = *(_OWORD *)(a2 + 160);
    *((_OWORD *)v35 + 11) = v34;
    *((_OWORD *)v35 + 12) = *(_OWORD *)(a2 + 192);
    long long v36 = *(_OWORD *)(a2 + 112);
    *((_OWORD *)v35 + 6) = *(_OWORD *)(a2 + 96);
    *((_OWORD *)v35 + 7) = v36;
    long long v37 = *(_OWORD *)(a2 + 144);
    *((_OWORD *)v35 + 8) = *(_OWORD *)(a2 + 128);
    *((_OWORD *)v35 + 9) = v37;
    long long v38 = *(_OWORD *)(a2 + 48);
    *((_OWORD *)v35 + 2) = *(_OWORD *)(a2 + 32);
    *((_OWORD *)v35 + 3) = v38;
    long long v39 = *(_OWORD *)(a2 + 80);
    *((_OWORD *)v35 + 4) = *(_OWORD *)(a2 + 64);
    *((_OWORD *)v35 + 5) = v39;
    long long v41 = *(_OWORD *)a2;
    long long v40 = *(_OWORD *)(a2 + 16);
    int v28 = v35 + 208;
    *(_OWORD *)unsigned int v35 = v41;
    *((_OWORD *)v35 + 1) = v40;
    if (v18 != v29)
    {
      do
      {
        *((_OWORD *)v35 - 13) = *(v18 - 13);
        long long v42 = *(v18 - 12);
        long long v43 = *(v18 - 11);
        long long v44 = *(v18 - 9);
        *((_OWORD *)v35 - 10) = *(v18 - 10);
        *((_OWORD *)v35 - 9) = v44;
        *((_OWORD *)v35 - 12) = v42;
        *((_OWORD *)v35 - 11) = v43;
        long long v45 = *(v18 - 8);
        long long v46 = *(v18 - 7);
        long long v47 = *(v18 - 5);
        *((_OWORD *)v35 - 6) = *(v18 - 6);
        *((_OWORD *)v35 - 5) = v47;
        *((_OWORD *)v35 - 8) = v45;
        *((_OWORD *)v35 - 7) = v46;
        long long v48 = *(v18 - 4);
        long long v49 = *(v18 - 3);
        long long v50 = *(v18 - 1);
        *((_OWORD *)v35 - 2) = *(v18 - 2);
        *((_OWORD *)v35 - 1) = v50;
        *((_OWORD *)v35 - 4) = v48;
        *((_OWORD *)v35 - 3) = v49;
        v35 -= 208;
        v18 -= 13;
      }
      while (v18 != v29);
      int v18 = *(_OWORD **)(a5 + 328);
    }
    *(void *)(a5 + 328) = v35;
    *(void *)(a5 + 336) = v28;
    *(void *)(a5 + 344) = &v33[208 * v32];
    if (v18) {
      operator delete(v18);
    }
  }
  else
  {
    *int v18 = *(_OWORD *)a2;
    long long v19 = *(_OWORD *)(a2 + 16);
    long long v20 = *(_OWORD *)(a2 + 32);
    long long v21 = *(_OWORD *)(a2 + 64);
    v18[3] = *(_OWORD *)(a2 + 48);
    v18[4] = v21;
    v18[1] = v19;
    double v18[2] = v20;
    long long v22 = *(_OWORD *)(a2 + 80);
    long long v23 = *(_OWORD *)(a2 + 96);
    long long v24 = *(_OWORD *)(a2 + 128);
    v18[7] = *(_OWORD *)(a2 + 112);
    v18[8] = v24;
    v18[5] = v22;
    v18[6] = v23;
    long long v25 = *(_OWORD *)(a2 + 144);
    long long v26 = *(_OWORD *)(a2 + 160);
    long long v27 = *(_OWORD *)(a2 + 192);
    v18[11] = *(_OWORD *)(a2 + 176);
    v18[12] = v27;
    v18[9] = v25;
    v18[10] = v26;
    int v28 = v18 + 13;
  }
  *(void *)(a5 + 336) = v28;
}

void sub_18E13816C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void raven::GnssMeasurementPreprocessor::SelectAndPopulateDoppler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _OWORD *a6, _OWORD *a7, uint64_t a8)
{
  v38[0] = a3;
  v38[1] = a2;
  uint64_t v15 = *(unsigned char **)(a1 + 8);
  if (v15[546] && v15[610])
  {
    if (*(unsigned char *)(a4 + 208))
    {
      uint64_t v36 = *(void *)(a2 + 88);
      char v37 = 1;
      uint64_t v17 = sub_18E1383E0((cnprint::CNPrinter *)v38, a4, (uint64_t)&v36);
      if ((v17 & 1) == 0)
      {
        if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v17) <= 1)
        {
          LOWORD(v36) = 12;
          LOBYTE(v35) = 1;
          char v18 = sub_18E017C64(a8);
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v36, (unsigned __int8 *)&v35, "#gmp,Invalidated averaged_doppler due to cross-check,SV,%s", v19, v20, v21, v22, v23, v18);
        }
        if (*(unsigned char *)(a4 + 208)) {
          *(unsigned char *)(a4 + 208) = 0;
        }
      }
    }
    if (sub_18E13B3A8((int *)a2)
      && (*(void *)(a2 + 104) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && *(double *)(a2 + 112) > 0.0)
    {
      uint64_t v36 = *(void *)(a2 + 112);
      char v24 = 1;
    }
    else
    {
      char v24 = 0;
      LOBYTE(v36) = 0;
    }
    char v37 = v24;
    if (*(unsigned char *)(a5 + 208))
    {
      uint64_t v25 = sub_18E1383E0((cnprint::CNPrinter *)v38, a5, (uint64_t)&v36);
      if ((v25 & 1) == 0)
      {
        if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v25) <= 1)
        {
          __int16 v35 = 12;
          unsigned __int8 v34 = 1;
          char v26 = sub_18E017C64(a8);
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v35, &v34, "#gmp,Invalidated averaged_doppler_from_phase_tracking due to cross-check,SV,%s", v27, v28, v29, v30, v31, v26);
        }
        if (*(unsigned char *)(a5 + 208)) {
          *(unsigned char *)(a5 + 208) = 0;
        }
      }
    }
    uint64_t v15 = *(unsigned char **)(a1 + 8);
  }
  int v32 = v15[580];
  if (*(unsigned char *)(a5 + 208))
  {
    raven::GnssMeasurementPreprocessor::CheckObservableAndAddToVector(a1, a5, a6, a7, a8, (uint64_t)a6, (uint64_t)a7, a8);
    if (!v32) {
      return;
    }
    if (*(unsigned char *)(a4 + 208)) {
      raven::GnssMeasurementPreprocessor::CheckObservableAndAddToVector(a1, a4, a6, a7, a8, (uint64_t)a6, (uint64_t)a7, a8);
    }
LABEL_32:
    if (!*(unsigned char *)(a3 + 208)) {
      return;
    }
    goto LABEL_33;
  }
  if (!*(unsigned char *)(a4 + 208)) {
    goto LABEL_32;
  }
  raven::GnssMeasurementPreprocessor::CheckObservableAndAddToVector(a1, a4, a6, a7, a8, (uint64_t)a6, (uint64_t)a7, a8);
  if (v32) {
    BOOL v33 = *(unsigned char *)(a3 + 208) == 0;
  }
  else {
    BOOL v33 = 1;
  }
  if (!v33)
  {
LABEL_33:
    raven::GnssMeasurementPreprocessor::CheckObservableAndAddToVector(a1, a3, a6, a7, a8, (uint64_t)a6, (uint64_t)a7, a8);
  }
}

uint64_t sub_18E1383E0(cnprint::CNPrinter *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = a1;
  if (*(unsigned char *)(*(void *)a1 + 208))
  {
    uint64_t v6 = *((void *)a1 + 1);
    a1 = (cnprint::CNPrinter *)sub_18E13B3A8((int *)v6);
    if (a1)
    {
      if ((*(void *)(v6 + 56) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && *(double *)(v6 + 64) > 0.0)
      {
        uint64_t v7 = *(void *)v5;
        if (!*(unsigned char *)(*(void *)v5 + 208)) {
          sub_18DFF28FC();
        }
        if (*(float *)(v7 + 168) < 30.0)
        {
          if (!*(unsigned char *)(a3 + 8)) {
            goto LABEL_20;
          }
          double v8 = *(double *)(*((void *)v5 + 1) + 64) * 3.0;
          if (*(double *)a3 == v8) {
            int v9 = 0;
          }
          else {
            int v9 = -127;
          }
          if (*(double *)a3 > v8) {
            int v9 = 1;
          }
          if (*(double *)a3 < v8) {
            int v9 = -1;
          }
          if (v9 != -127 && (char)v9 <= 0)
          {
LABEL_20:
            if (vabdd_f64(*(double *)(a2 + 120), *(double *)(v7 + 120)) < 5.0) {
              return 1;
            }
          }
        }
      }
    }
  }
  if (cnprint::CNPrinter::GetLogLevel(a1) <= 1)
  {
    __int16 v19 = 12;
    unsigned __int8 v18 = 1;
    double v17 = -1.0;
    if (*(unsigned char *)(*(void *)v5 + 208)) {
      double v17 = *(double *)(*(void *)v5 + 120);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v19, &v18, "#gmp,Doppler cross-check failure details,inst_val,%.2f,test_val,%.2f,inst_unc,%.2f,test_unc,%.2f,band,%d,cn0,%.1f", v12, v13, v14, v15, v16, SLOBYTE(v17));
  }
  return 0;
}

BOOL raven::GnssMeasurementPreprocessor::UpdateCurrentDayAndWeek(unsigned __int8 *a1, uint64_t *a2)
{
  int v2 = *a1;
  if (*a1)
  {
    if (sub_18E0172D8(a2) && (unint64_t v5 = (_WORD *)*a2, sub_18E01B110(*a2)) && *v5)
    {
      int v6 = *(unsigned __int16 *)*a2;
    }
    else
    {
      if (!sub_18E017398(a2))
      {
        LOBYTE(v6) = 0;
        goto LABEL_13;
      }
      int v6 = *(unsigned __int16 *)a2[3];
      if (!*(_WORD *)a2[3])
      {
LABEL_13:
        a1[2208] = v6;
        if (sub_18E017328(a2)
          && ((uint64_t v12 = (unsigned __int16 *)a2[1], *v12) && (v13 = v12[1], v13 < 0x5B5)
           || *((void *)v12 + 1)
           && *v12
           && (*((void *)v12 + 2) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
           && (unsigned int v13 = v12[1], v13 <= 0x5B4)))
        {
          *((_DWORD *)a1 + 555) = v13 + 1461 * *v12 - 1461;
          a1[2216] = 1;
        }
        else
        {
          a1[2216] = 0;
        }
        return v2 != 0;
      }
      v6 += 1024;
    }
    *((_DWORD *)a1 + 553) = v6;
    LOBYTE(v6) = 1;
    goto LABEL_13;
  }
  if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)a1) <= 1)
  {
    __int16 v17 = 12;
    unsigned __int8 v16 = 1;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v17, &v16, "#gmp,UpdateCurrentDayAndWeek,not configured", v7, v8, v9, v10, v11, v15);
  }
  return v2 != 0;
}

void raven::GnssMeasurementPreprocessor::UpdateCurrentFrameworkTime(cnprint::CNPrinter *a1, _OWORD *a2)
{
  if (*(unsigned char *)a1)
  {
    *((_OWORD *)a1 + 137) = *a2;
  }
  else if (cnprint::CNPrinter::GetLogLevel(a1) <= 1)
  {
    __int16 v9 = 12;
    unsigned __int8 v8 = 1;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v9, &v8, "#gmp,UpdateCurrentFrameworkTime(CNTime), not configured", v2, v3, v4, v5, v6, v7);
  }
}

BOOL raven::GnssMeasurementPreprocessor::HandleEvent(raven::GnssMeasurementPreprocessor *this, const raven::ActivityStateEvent *a2)
{
  int v2 = *(unsigned __int8 *)this;
  if (*(unsigned char *)this)
  {
    long long v3 = *(_OWORD *)((char *)a2 + 120);
    *(_OWORD *)((char *)this + 888) = *(_OWORD *)((char *)a2 + 104);
    *(_OWORD *)((char *)this + 904) = v3;
    long long v4 = *(_OWORD *)((char *)a2 + 136);
    long long v5 = *(_OWORD *)((char *)a2 + 152);
    long long v6 = *(_OWORD *)((char *)a2 + 168);
    *((void *)this + 121) = *((void *)a2 + 23);
    *(_OWORD *)((char *)this + 936) = v5;
    *(_OWORD *)((char *)this + 952) = v6;
    *(_OWORD *)((char *)this + 920) = v4;
  }
  else if (cnprint::CNPrinter::GetLogLevel(this) <= 1)
  {
    __int16 v15 = 12;
    unsigned __int8 v14 = 1;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v15, &v14, "#gmp,HandleEvent(ActivityState),not configured", v7, v8, v9, v10, v11, v13);
  }
  return v2 != 0;
}

void raven::GnssMeasurementPreprocessor::UpdateMeasurementPropagationTimeUsingDwellEndTimes(raven::GnssMeasurementPreprocessor *this, const raven::GnssMeasurementDataEvent *a2)
{
  if (!*(unsigned char *)this
    || (uint64_t v37 = (*(uint64_t (**)(const raven::GnssMeasurementDataEvent *))(*(void *)a2 + 16))(a2),
        double v38 = v4,
        uint64_t v7 = CNTimeSpan::operator-((uint64_t)this + 2192, &v37, v5, v6),
        double v9 = v8 + (double)v7,
        v9 <= 0.0))
  {
    *((void *)this + 288) = 0;
    return;
  }
  std::string __p = 0;
  long long v41 = 0;
  uint64_t v42 = 0;
  LOBYTE(v37) = 0;
  double v38 = 0.0;
  char v39 = 1;
  sub_18E0C5398((char **)&__p);
  char v43 = 1;
  uint64_t v15 = *((void *)a2 + 23);
  uint64_t v16 = *((void *)a2 + 24);
  if (v15 == v16) {
    goto LABEL_28;
  }
  uint64_t v17 = -1;
  do
  {
    unsigned int v18 = *(unsigned __int8 *)(v15 + 8);
    BOOL v19 = v18 > 9;
    int v20 = (1 << v18) & 0x2BB;
    if (v19 || v20 == 0)
    {
      int v22 = *(unsigned __int8 *)(v15 + 197);
      if (*(unsigned char *)(*((void *)this + 1) + 3792)) {
        BOOL v30 = 1;
      }
      else {
        BOOL v30 = v22 == 0;
      }
      if (!v30)
      {
        if (*(unsigned char *)(v15 + 196) == 1) {
          goto LABEL_24;
        }
        goto LABEL_11;
      }
    }
    else
    {
      int v22 = *(unsigned __int8 *)(v15 + 197);
    }
    if (!v22) {
      goto LABEL_24;
    }
LABEL_11:
    uint64_t v23 = *(void *)(v15 + 24) - *(void *)(v15 + 32);
    if (v23 >= 0)
    {
      v35[0] = (*(uint64_t (**)(const raven::GnssMeasurementDataEvent *))(*(void *)a2 + 16))(a2);
      v35[1] = v24;
      *(double *)v25.i64 = (double)v23 * 0.000000001;
      v34[0] = 0;
      v34[1] = 0;
      CNTimeSpan::SetTimeSpan(v34, 0, v25, v26);
      *(void *)&v36[0] = CNTimeSpan::operator+((uint64_t)v35, v34, v27, v28);
      v36[1] = v29;
      if (!sub_18DEE4CB8((double *)this + 274, v36))
      {
        if (*(unsigned char *)(*((void *)this + 1) + 841))
        {
          if (v17 <= v23) {
            uint64_t v17 = v23;
          }
        }
        else
        {
          *(double *)__int16 v35 = (double)v23;
          sub_18E0C4D80((uint64_t)&v37, v35, 1.0);
        }
      }
    }
LABEL_24:
    v15 += 200;
  }
  while (v15 != v16);
  if (v17 > 0)
  {
    unint64_t v31 = v17 / 0xF4240uLL;
    goto LABEL_33;
  }
LABEL_28:
  if (v38 <= 0.0)
  {
    LOWORD(v36[0]) = 12;
    LOBYTE(v35[0]) = 3;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v36, (unsigned __int8 *)v35, "#gmp,Measurement propagation time offset is not based off dwell end-times", v10, v11, v12, v13, v14, v33);
    unint64_t v31 = (unint64_t)(v9 * 1000.0);
  }
  else
  {
    sub_18E0C5470((uint64_t)&v37, 50.0);
    if (v32 >= 0.0) {
      unint64_t v31 = (unint64_t)v32 / 0xF4240;
    }
    else {
      unint64_t v31 = 0;
    }
  }
LABEL_33:
  *((void *)this + 288) = 1000000 * v31;
  if (__p)
  {
    long long v41 = __p;
    operator delete(__p);
  }
}

void sub_18E138A24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t raven::GnssMeasurementPreprocessor::HandleEvent(raven::GnssMeasurementPreprocessor *this, const raven::GnssMeasurementDataEvent *a2)
{
  unsigned int LogLevel = (cnprint::CNPrinter *)cnprint::CNPrinter::GetLogLevel(this);
  if (LogLevel <= 1)
  {
    *(_WORD *)double v312 = 12;
    v294[0] = 1;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v312, v294, "#gmp,HandleEvent(GNSS),Received msmt data", v5, v6, v7, v8, v9, v279);
  }
  if (!*(unsigned char *)this)
  {
    if (cnprint::CNPrinter::GetLogLevel(LogLevel) <= 1)
    {
      *(_WORD *)double v312 = 12;
      v294[0] = 1;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v312, v294, "#gmp,HandleEvent(GNSS),not configured", v51, v52, v53, v54, v55, v279);
    }
    return 2;
  }
  if (*((unsigned char *)this + 2296))
  {
    uint64_t v10 = *((void *)a2 + 14);
    if (*((void *)this + 282) == *((void *)this + 288) + v10)
    {
      *(_WORD *)double v312 = 12;
      v294[0] = 4;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v312, v294, "#gmp,HandleEvent(GNSS),dropped due to repeated HW clock %llu", v5, v6, v7, v8, v9, v10);
      return 15;
    }
  }
  *((unsigned char *)this + 16) = 0;
  memset(&v312[8], 0, 112);
  *(void *)double v312 = &unk_1EDD154D0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  long long v12 = *(_OWORD *)&v312[40];
  long long v13 = *(_OWORD *)&v312[56];
  long long v14 = *(_OWORD *)&v312[72];
  *((void *)this + 14) = *(void *)&v312[88];
  *((_OWORD *)this + 5) = v13;
  *((_OWORD *)this + 6) = v14;
  *((_OWORD *)this + 4) = v12;
  if ((char *)this + 24 != v312) {
    sub_18E021A70((uint64_t)this + 120, 0, 0, 0);
  }
  *(void *)double v312 = &unk_1EDD154D0;
  *(void *)uint64_t v294 = &v312[96];
  sub_18DEE4B60((void ***)v294);
  uint64_t v24 = *((void *)a2 + 37);
  if (v24 && *(unsigned char *)(v24 + 80))
  {
    if (!*((unsigned char *)this + 520))
    {
      *(_OWORD *)&v317[8] = 0u;
      *(_OWORD *)&v312[104] = 0u;
      memset(&v312[8], 0, 88);
      *(void *)&v312[40] = 0;
      v312[48] = 0;
      *(void *)&v312[96] = 0x7FF8000000000000;
      double v313 = &unk_1EDD0B000;
      long long v314 = 0u;
      long long v315 = 0u;
      long long v316 = xmmword_18E1EFA40;
      *(_OWORD *)uint64_t v317 = xmmword_18E1EFA50;
      char v318 = 1;
      *((void *)this + 40) = &unk_1EDD146B8;
      long long v25 = *(_OWORD *)&v312[8];
      long long v26 = *(_OWORD *)&v312[24];
      *(_OWORD *)((char *)this + 360) = *(_OWORD *)&v312[40];
      *(_OWORD *)((char *)this + 344) = v26;
      *(_OWORD *)((char *)this + 328) = v25;
      long long v27 = *(_OWORD *)&v312[56];
      long long v28 = *(_OWORD *)&v312[72];
      long long v29 = *(_OWORD *)&v312[88];
      *(_OWORD *)((char *)this + 424) = *(_OWORD *)&v312[104];
      *(_OWORD *)((char *)this + 408) = v29;
      *(_OWORD *)((char *)this + 392) = v28;
      *(_OWORD *)((char *)this + 376) = v27;
      *((void *)this + 55) = &unk_1EDD0B000;
      *((_OWORD *)this + 28) = 0u;
      *((_OWORD *)this + 29) = 0u;
      *((_OWORD *)this + 30) = xmmword_18E1EFA40;
      *((_OWORD *)this + 31) = xmmword_18E1EFA50;
      *((unsigned char *)this + 512) = 0;
      *((unsigned char *)this + 520) = 1;
    }
    long long v30 = *(_OWORD *)((char *)a2 + 8);
    *(_OWORD *)((char *)this + 344) = *(_OWORD *)((char *)a2 + 24);
    *(_OWORD *)((char *)this + 328) = v30;
    long long v31 = *(_OWORD *)((char *)a2 + 40);
    long long v32 = *(_OWORD *)((char *)a2 + 56);
    long long v33 = *(_OWORD *)((char *)a2 + 72);
    *(_OWORD *)((char *)this + 408) = *(_OWORD *)((char *)a2 + 88);
    *(_OWORD *)((char *)this + 392) = v33;
    *(_OWORD *)((char *)this + 376) = v32;
    *(_OWORD *)((char *)this + 360) = v31;
    uint64_t v34 = *((void *)a2 + 37);
    *(void *)double v312 = &unk_1EDD0B000;
    uint64_t v35 = *(void *)(v34 + 16);
    *(void *)&v312[8] = v35;
    if ((char *)this + 440 != v312)
    {
      char v36 = *(unsigned char *)(v34 + 80);
      uint64_t v37 = *(void *)(v34 + 72);
      *((void *)this + 56) = v35;
      long long v38 = *(_OWORD *)(v34 + 40);
      long long v39 = *(_OWORD *)(v34 + 56);
      *(_OWORD *)((char *)this + 456) = *(_OWORD *)(v34 + 24);
      *(_OWORD *)((char *)this + 472) = v38;
      *(_OWORD *)((char *)this + 488) = v39;
      *((void *)this + 63) = v37;
      *((unsigned char *)this + 512) = v36;
    }
    long long v40 = (cnprint::CNPrinter *)sub_18E01B1AC((uint64_t)v312, (double)*(unint64_t *)v34 * 0.000000001, v15, v16, v17, v18, v19, v20, v21);
    *(_OWORD *)((char *)this + 424) = *(_OWORD *)v312;
    if (cnprint::CNPrinter::GetLogLevel(v40) <= 1)
    {
      *(_WORD *)double v312 = 12;
      v294[0] = 1;
      uint64_t v41 = (*(uint64_t (**)(char *))(*((void *)this + 40) + 16))((char *)this + 320);
      *(double *)v43.i64 = v42;
      *(double *)v44.i64 = (double)v41;
      double v45 = v42 + (double)v41;
      sub_18DEEA4A4((int *)this + 106, v43, v44);
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v312, v294, "#gmp,t,%.3lf,Klobuchar parameters received and valid,decode_time_s,%.3lf", v46, v47, v48, v49, v50, SLOBYTE(v45));
    }
  }
  if (*(unsigned char *)(*((void *)this + 1) + 840)) {
    raven::GnssMeasurementPreprocessor::UpdateMeasurementPropagationTimeUsingDwellEndTimes(this, a2);
  }
  else {
    *((void *)this + 288) = 0;
  }
  if ((raven::GnssReceiverBandCorrectionsManager::InjectVendorCorrections((uint64_t)this + 1280, (unsigned __int8 **)a2 + 29, (__n128 *)this + 137, (uint64_t *)a2 + 32, (unsigned __int8 *)this + 888, (unsigned __int8 *)this + 977, v20, v21, v22, v23) & 1) == 0)
  {
    *(_WORD *)double v312 = 12;
    v294[0] = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v312, v294, "#gmp,Receiver band correction update failed", v56, v57, v58, v59, v60, v279);
    return 3;
  }
  if ((raven::GnssSvDatabase::UpdateTimeConversionInfo((uint64_t)this + 984, (uint64_t *)a2 + 32) & 1) == 0)
  {
    *(_WORD *)double v312 = 12;
    uint64_t v11 = 4;
    v294[0] = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v312, v294, "#gmp,Time conversion information update failed", v61, v62, v63, v64, v65, v279);
    return v11;
  }
  char v311 = 0;
  if ((raven::GnssSvDatabase::UpdateSvInfo((uint64_t)this + 984, (uint64_t *)a2 + 26, &v311, v61, v62, v63, v64, v65) & 1) == 0)
  {
    *(_WORD *)double v312 = 12;
    v294[0] = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v312, v294, "#gmp,SV info update failed", v66, v67, v68, v69, v70, v279);
    return 5;
  }
  double v289 = (raven::GnssMeasurementPreprocessor *)((char *)this + 984);
  *(void *)&v312[8] = 0;
  *(void *)&v312[16] = 0;
  *(void *)double v312 = &v312[8];
  double v308 = 0;
  uint64_t v309 = 0;
  double v307 = &v308;
  char v310 = 1;
  sub_18E13D5A4(0);
  double v288 = a2;
  uint64_t v75 = *((void *)a2 + 23);
  uint64_t v76 = *((void *)a2 + 24);
  while (v75 != v76)
  {
    sub_18DEDE7B0(v312, "");
    v312[24] = 0;
    *(_DWORD *)&v312[28] = -1;
    unsigned int v78 = *(unsigned __int8 *)(v75 + 8);
    BOOL v79 = v78 > 9;
    int v80 = (1 << v78) & 0x2BB;
    BOOL v81 = v79 || v80 == 0;
    if (v81)
    {
      int v82 = *(unsigned __int8 *)(v75 + 197);
      if (*(unsigned char *)(*((void *)this + 1) + 3792)) {
        BOOL v93 = 1;
      }
      else {
        BOOL v93 = v82 == 0;
      }
      if (!v93)
      {
        if (*(unsigned char *)(v75 + 196) == 1) {
          goto LABEL_58;
        }
        goto LABEL_34;
      }
    }
    else
    {
      int v82 = *(unsigned __int8 *)(v75 + 197);
    }
    if (!v82) {
      goto LABEL_58;
    }
LABEL_34:
    if (raven::GnssMeasurementPreprocessor::GetCNSatIDFromGnssId(this, (unint64_t *)v75, (uint64_t)v312, v77, v71, v72, v73, v74))
    {
      uint64_t v83 = v308;
      uint64_t v84 = &v308;
      uint64_t v85 = &v308;
      if (v308)
      {
        while (1)
        {
          while (1)
          {
            uint64_t v85 = (uint64_t **)v83;
            unsigned int v86 = *((unsigned __int8 *)v83 + 56);
            int v87 = *((_DWORD *)v85 + 15);
            BOOL v88 = v87 < *(_DWORD *)&v312[28];
            if (v86 != v312[24]) {
              BOOL v88 = v86 < v312[24];
            }
            if (!v88) {
              break;
            }
            uint64_t v83 = *v85;
            uint64_t v84 = v85;
            if (!*v85) {
              goto LABEL_46;
            }
          }
          BOOL v89 = v87 > *(_DWORD *)&v312[28];
          BOOL v81 = v86 == v312[24];
          BOOL v90 = v86 > v312[24];
          if (v81) {
            BOOL v90 = v89;
          }
          if (!v90) {
            break;
          }
          uint64_t v83 = v85[1];
          if (!v83)
          {
            uint64_t v84 = v85 + 1;
            goto LABEL_46;
          }
        }
      }
      else
      {
LABEL_46:
        uint64_t v91 = (uint64_t *)operator new(0x40uLL);
        uint64_t v92 = v91 + 4;
        if ((v312[23] & 0x80000000) != 0)
        {
          sub_18DEDE668(v92, *(void **)v312, *(unint64_t *)&v312[8]);
        }
        else
        {
          *(_OWORD *)uint64_t v92 = *(_OWORD *)v312;
          v91[6] = *(void *)&v312[16];
        }
        v91[7] = *(void *)&v312[24];
        *uint64_t v91 = 0;
        v91[1] = 0;
        void v91[2] = (uint64_t)v85;
        *uint64_t v84 = v91;
        if (*v307)
        {
          double v307 = (uint64_t **)*v307;
          uint64_t v91 = *v84;
        }
        sub_18DEEDADC(v308, v91);
        ++v309;
      }
    }
LABEL_58:
    if ((v312[23] & 0x80000000) != 0) {
      operator delete(*(void **)v312);
    }
    v75 += 200;
  }
  int8x16_t v99 = a2;
  if ((raven::GnssSvDatabase::PopulateGnssSvData(v289, (uint64_t)&v307, (uint64_t *)this + 15, (uint64_t)this + 248, v71, v72, v73, v74) & 1) == 0)
  {
    *(_WORD *)double v312 = 12;
    v294[0] = 3;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v312, v294, "#gmp,Populate Gnss Sv Data failed", v94, v95, v96, v97, v98, v279);
    uint64_t v11 = 6;
    goto LABEL_80;
  }
  long long v100 = *(_OWORD *)((char *)a2 + 56);
  *(_OWORD *)&v312[32] = *(_OWORD *)((char *)a2 + 40);
  *(_OWORD *)&v312[48] = v100;
  long long v101 = *(_OWORD *)((char *)a2 + 88);
  *(_OWORD *)&v312[64] = *(_OWORD *)((char *)a2 + 72);
  *(_OWORD *)&v312[80] = v101;
  int8x16_t v103 = *(int8x16_t *)((char *)a2 + 24);
  *(_OWORD *)double v312 = *(_OWORD *)((char *)a2 + 8);
  v102.i64[1] = *(void *)&v312[8];
  *(int8x16_t *)&v312[16] = v103;
  *(double *)v102.i64 = (double)*((unint64_t *)this + 288) * 0.000000001;
  *(_OWORD *)uint64_t v294 = 0uLL;
  CNTimeSpan::SetTimeSpan((uint64_t *)v294, 0, v102, v103);
  *(void *)double v312 = CNTimeSpan::operator+((uint64_t)v312, v294, v104, v105);
  *(void *)&v312[8] = v106;
  raven::PopulateAllTimeFields((uint64_t)v312, (uint64_t)a2 + 8, v107, v108);
  long long v114 = *(_OWORD *)&v312[48];
  *(_OWORD *)((char *)this + 184) = *(_OWORD *)&v312[32];
  *(_OWORD *)((char *)this + 200) = v114;
  long long v115 = *(_OWORD *)&v312[80];
  *(_OWORD *)((char *)this + 216) = *(_OWORD *)&v312[64];
  *(_OWORD *)((char *)this + 232) = v115;
  long long v116 = *(_OWORD *)&v312[16];
  *(_OWORD *)((char *)this + 152) = *(_OWORD *)v312;
  *(_OWORD *)((char *)this + 168) = v116;
  v306[0] = 0;
  v306[1] = 0;
  long long v305 = v306;
  uint64_t v117 = (uint64_t *)*((void *)this + 15);
  uint64_t v118 = (uint64_t *)*((void *)this + 16);
  while (v117 != v118)
  {
    uint64_t v119 = *v117;
    if (*v117)
    {
      *(void *)uint64_t v294 = *v117;
      sub_18E13D600((uint64_t)&v305, *(unsigned char *)(v119 + 24), *(_DWORD *)(v119 + 28), (long long **)v294)[8] = v119;
    }
    v117 += 2;
  }
  if (!*((unsigned char *)this + 729) || !*((unsigned char *)this + 730) || !*((unsigned char *)this + 808))
  {
    *(_WORD *)uint64_t v294 = 12;
    LOBYTE(v291) = 3;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v294, (unsigned __int8 *)&v291, "#gmp,No valid last position", v109, v110, v111, v112, v113, v279);
    uint64_t v11 = 7;
    goto LABEL_79;
  }
  if (!raven::GnssMeasurementPreprocessor::UpdateCurrentDayAndWeek((unsigned __int8 *)this, (uint64_t *)a2 + 32))
  {
    *(_WORD *)uint64_t v294 = 12;
    LOBYTE(v291) = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v294, (unsigned __int8 *)&v291, "#gmp,Could not update current day and week", v120, v121, v122, v123, v124, v279);
    uint64_t v11 = 8;
    goto LABEL_79;
  }
  LOBYTE(v303) = 0;
  char v304 = 0;
  unint64_t v127 = *((void *)this + 288) + *((void *)a2 + 14);
  if (!*((unsigned char *)this + 2296)) {
    goto LABEL_86;
  }
  unint64_t v128 = *((void *)this + 282);
  if (v127 < v128)
  {
    *(_WORD *)uint64_t v294 = 12;
    LOBYTE(v291) = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v294, (unsigned __int8 *)&v291, "#gmp,HW clock reset detected,last,%llu,current,%llu", v120, v121, v122, v123, v124, v128);
    int v287 = 0;
    int v129 = 1;
    goto LABEL_87;
  }
  if (v128)
  {
    int v129 = 0;
    double v125 = (double)(uint64_t)(v127 - v128) * 0.000000001;
    double v303 = v125;
    int v287 = 1;
    char v304 = 1;
  }
  else
  {
LABEL_86:
    int v287 = 0;
    int v129 = 0;
  }
LABEL_87:
  long long v302 = 0uLL;
  int v136 = (char *)this + 2224;
  if (raven::GnssMeasurementPreprocessor::EstimateCoarseReceiverTaiTime((uint64_t)this, (uint64_t)a2 + 112, (uint64_t)&v305, (uint64_t)&v302, v121, v122, v123, v124, v125, v126))
  {
LABEL_93:
    int v286 = v129;
    unint64_t v285 = v127;
    uint64_t v144 = (*(uint64_t (**)(const raven::GnssMeasurementDataEvent *))(*(void *)a2 + 16))(a2);
    double v146 = v145;
    double v147 = v145;
    *(_OWORD *)uint64_t v294 = 0x3CuLL;
    uint64_t v150 = CNTimeSpan::operator+((uint64_t)this + 2312, v294, v148, v149);
    double v157 = v151;
    if ((v144 || (*(void *)&v146 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
      && (v150 || (*(void *)&v151 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
      && v144 != v150)
    {
      BOOL v158 = v144 > v150;
    }
    else
    {
      BOOL v158 = v147 >= v151;
    }
    if (v158 || v311)
    {
      double v299 = 0;
      double v300 = 0;
      uint64_t v301 = 0;
      *(_WORD *)uint64_t v294 = 0;
      memset(&v294[8], 0, 32);
      int v295 = 0;
      uint64_t v296 = 0;
      uint64_t v297 = 0;
      int v298 = 0;
      LOBYTE(v291) = 0;
      char v293 = 0;
      raven::GnssSvDatabase::PopulateGnssSvData(v289, (uint64_t)&v291, (uint64_t *)&v299, (uint64_t)v294, v152, v153, v154, v155);
      if (v293) {
        sub_18E13D5A4(*((char **)&v291 + 1));
      }
      *((void *)&v291 + 1) = 0;
      uint64_t v292 = 0;
      *(void *)&long long v291 = (char *)&v291 + 8;
      uint64_t v159 = v299;
      int v160 = v300;
      while (v159 != v160)
      {
        int64x2_t v161 = *v159;
        if (*v159)
        {
          v319[0] = *v159;
          sub_18E13D600((uint64_t)&v291, *((unsigned char *)v161 + 24), *((_DWORD *)v161 + 7), v319)[8] = v161;
        }
        v159 += 2;
      }
      LOWORD(v319[0]) = 12;
      unsigned __int8 v290 = 2;
      uint64_t v162 = (*(uint64_t (**)(const raven::GnssMeasurementDataEvent *))(*(void *)a2 + 16))(a2);
      double v280 = v163 + (double)v162;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v319, &v290, "#gmp,Recomputing active GLONASS satellites,current-time,%lf,last-time,%lf,re-eval-needed,%i", v164, v165, v166, v167, v168, SLOBYTE(v280));
      int v136 = (char *)this + 2224;
      if (raven::GnssSvDatabase::RecomputeActiveGlonassSlots((uint64_t)v289, (uint64_t)this + 528, (uint64_t)&v291, (uint64_t)&v302, v169, v170, v171, v172))
      {
        *((void *)this + 289) = (*(uint64_t (**)(const raven::GnssMeasurementDataEvent *))(*(void *)a2 + 16))(a2);
        *((void *)this + 290) = v178;
      }
      else
      {
        LOWORD(v319[0]) = 12;
        unsigned __int8 v290 = 3;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v319, &v290, "#gmp,Could not compute active GLONASS satellites", v173, v174, v175, v176, v177, v279);
      }
      sub_18E13D5A4(*((char **)&v291 + 1));
      *(void *)uint64_t v294 = &v299;
      sub_18DEE4B60((void ***)v294);
    }
    LOBYTE(v291) = 0;
    uint64_t v179 = raven::GnssMeasurementPreprocessor::DetermineNearestReceiverTaiTimeMillisecond((uint64_t)this, (uint64_t)a2 + 112, (uint64_t)&v305, &v302, &v291, v153, v154, v155, v157, v156);
    if (v179)
    {
      if ((_BYTE)v291)
      {
        int v187 = v291 ^ 1;
      }
      else
      {
        if (!*((unsigned char *)this + 2296)) {
          goto LABEL_128;
        }
        char v194 = v287 ^ 1;
        if (*((unsigned char *)this + 2280)) {
          char v194 = 1;
        }
        if (v194)
        {
LABEL_128:
          int v187 = 1;
        }
        else
        {
          *(double *)v185.i64 = v303;
          *(_OWORD *)uint64_t v294 = 0uLL;
          CNTimeSpan::SetTimeSpan((uint64_t *)v294, 0, v185, v186);
          uint64_t v179 = CNTimeSpan::operator+((uint64_t)v136, v294, v195, v196);
          int v187 = 0;
          *(void *)&long long v302 = v179;
          *((void *)&v302 + 1) = v197;
        }
      }
    }
    else
    {
      char v188 = v287 ^ 1;
      if (!*((unsigned char *)this + 2296)) {
        char v188 = 1;
      }
      if (v188)
      {
        *(_WORD *)uint64_t v294 = 12;
        LOBYTE(v299) = 3;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v294, (unsigned __int8 *)&v299, "#gmp,Could not determine nearest receiver TAI millisecond", v180, v181, v182, v183, v184, v279);
        uint64_t v11 = 10;
        goto LABEL_79;
      }
      *(_WORD *)uint64_t v294 = 12;
      LOBYTE(v299) = 2;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v294, (unsigned __int8 *)&v299, "#gmp,DetermineNearestReceiverTaiTimeMillisecond, fell back to propagation", v180, v181, v182, v183, v184, v279);
      if (!*((unsigned char *)this + 2296)) {
        sub_18DFF28FC();
      }
      *(double *)v189.i64 = v303;
      *(_OWORD *)uint64_t v294 = 0uLL;
      CNTimeSpan::SetTimeSpan((uint64_t *)v294, 0, v189, v190);
      uint64_t v179 = CNTimeSpan::operator+((uint64_t)v136, v294, v191, v192);
      *(void *)&long long v302 = v179;
      *((void *)&v302 + 1) = v193;
      int v187 = *((unsigned __int8 *)this + 2280);
    }
    int v198 = *(_DWORD *)(*((void *)this + 1) + 3824);
    if (v198)
    {
      if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v179) <= 1)
      {
        *(_WORD *)uint64_t v294 = 12;
        LOBYTE(v291) = 1;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v294, (unsigned __int8 *)&v291, "#gmp,Introducing artificial GNSS time offset of %d ms", v199, v200, v201, v202, v203, v198);
      }
      v205.i64[0] = 0x3F50624DD2F1A9FCLL;
      *(double *)v204.i64 = (double)v198 * 0.001;
      *(_OWORD *)uint64_t v294 = 0uLL;
      CNTimeSpan::SetTimeSpan((uint64_t *)v294, 0, v204, v205);
      *(void *)&long long v302 = CNTimeSpan::operator+((uint64_t)&v302, v294, v206, v207);
      *((void *)&v302 + 1) = v208;
    }
    BOOL v209 = raven::GnssMeasurementPreprocessor::ComputeSvElevAzimLosSpeed((unsigned __int8 *)this, (uint64_t **)this + 15, (uint64_t)&v302, v187 != 0);
    if (!v209)
    {
      uint64_t v11 = 12;
      if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v209) <= 1)
      {
        *(_WORD *)uint64_t v294 = 12;
        LOBYTE(v291) = 1;
        uint64_t v224 = (*(uint64_t (**)(const raven::GnssMeasurementDataEvent *))(*(void *)a2 + 16))(a2);
        double v281 = v225 + (double)v224;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v294, (unsigned __int8 *)&v291, "#gmp,Could not derive augmented SV data,t,%.3lf", v226, v227, v228, v229, v230, SLOBYTE(v281));
      }
      goto LABEL_79;
    }
    long long v291 = 0uLL;
    if ((raven::GnssMeasurementPreprocessor::PopulateGnssMeasurements((unint64_t)this, (uint64_t *)a2 + 23, (double *)&v302, (uint64_t)&v305, v312, (uint64_t)&v303, v187 != 0, &v291, v210, v211) & 1) == 0)
    {
      *(_WORD *)uint64_t v294 = 12;
      LOBYTE(v299) = 4;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v294, (unsigned __int8 *)&v299, "#gmp,Could not populate GNSS measurements", v212, v213, v214, v215, v216, v279);
      uint64_t v11 = 11;
      goto LABEL_79;
    }
    BOOL v217 = raven::GnssMeasurementPreprocessor::OrderGnssMeasurements(this, (char *)this + 120);
    if (!v217)
    {
      if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v217) <= 1)
      {
        *(_WORD *)uint64_t v294 = 12;
        LOBYTE(v299) = 1;
        uint64_t v231 = (*(uint64_t (**)(const raven::GnssMeasurementDataEvent *))(*(void *)a2 + 16))(a2);
        double v282 = v232 + (double)v231;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v294, (unsigned __int8 *)&v299, "#gmp,Could not order GNSS measurements,t,%.3lf", v233, v234, v235, v236, v237, SLOBYTE(v282));
      }
      uint64_t v11 = 13;
      goto LABEL_79;
    }
    int v219 = v136;
    int8x16_t v220 = *(int8x16_t *)v312;
    *((_OWORD *)this + 2) = *(_OWORD *)v312;
    uint64_t v221 = (uint64_t *)*((void *)this + 15);
    int v222 = (uint64_t *)*((void *)this + 16);
    while (v221 != v222)
    {
      if (*v221)
      {
        if (raven::GNSSPreprocessedMeasurementsChecker::CanSvAndMeasurementDataBeIncluded(*v221, *((void *)this + 1)))
        {
          ++*((_DWORD *)this + 29);
        }
        else
        {
          double v223 = (std::__shared_weak_count *)v221[1];
          uint64_t *v221 = 0;
          v221[1] = 0;
          if (v223) {
            sub_18DEE4E18(v223);
          }
        }
      }
      v221 += 2;
    }
    if (*((unsigned char *)this + 2296))
    {
      uint64_t v238 = CNTimeSpan::operator-((uint64_t)v312, (void *)this + 283, v220, v218);
      if (!*((unsigned char *)this + 88)) {
        *((unsigned char *)this + 88) = 1;
      }
      *(double *)v240.i64 = v239 + (double)v238;
      *((void *)this + 10) = v240.i64[0];
      char v242 = 1;
      if (v287)
      {
        *(double *)v241.i64 = (double)v238;
        *(double *)v243.i64 = (double)CNTimeSpan::operator-((uint64_t)&v291, (void *)this + 280, v240, v241);
        *(double *)v245.i64 = v244 + *(double *)v243.i64;
        *((double *)this + 8) = v303;
        *((double *)this + 6) = v244 + *(double *)v243.i64;
        *((unsigned char *)this + 56) = 1;
        *((unsigned char *)this + 72) = v304;
        uint64_t v246 = (cnprint::CNPrinter *)CNTimeSpan::operator-((uint64_t)&v302, v219, v245, v243);
        if (!*((unsigned char *)this + 72)) {
          sub_18DFF28FC();
        }
        if (vabdd_f64(v247 + (double)(uint64_t)v246, *((double *)this + 8)) < fabs(*((double *)this + 8) * 0.00002))
        {
          char v242 = 0;
LABEL_160:
          int8x16_t v99 = v288;
          goto LABEL_161;
        }
        int8x16_t v99 = v288;
        if (cnprint::CNPrinter::GetLogLevel(v246) <= 1)
        {
          *(_WORD *)uint64_t v294 = 12;
          LOBYTE(v299) = 1;
          uint64_t v248 = (*(uint64_t (**)(const raven::GnssMeasurementDataEvent *))(*(void *)v288 + 16))(v288);
          double v283 = v249 + (double)v248;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)v294, (unsigned __int8 *)&v299, "#gmp,t,%.3lf,hw clock and tai rx time mismatch,hw_clock_diff_sec,%.8lf,full_tai_rx_time_diff_sec,%.8lf,mismatch_sec,%.8lf,threshold_sec,%.8lf", v250, v251, v252, v253, v254, SLOBYTE(v283));
          goto LABEL_160;
        }
      }
    }
    else
    {
      char v242 = 1;
    }
LABEL_161:
    BOOL v255 = sub_18E13A428((uint64_t)v288 + 112);
    if (v255 && *((float *)v99 + 30) > 8.44 && *((float *)v99 + 31) > 2.86)
    {
      double v261 = (char *)this + 112;
      int v262 = *((unsigned __int8 *)this + 112);
      *((_OWORD *)this + 6) = *(_OWORD *)((char *)v99 + 120);
      if (v262) {
        goto LABEL_168;
      }
    }
    else
    {
      double v261 = (char *)this + 112;
      int v263 = *((unsigned __int8 *)this + 112);
      *((_OWORD *)this + 6) = xmmword_18E219F60;
      if (v263) {
        goto LABEL_168;
      }
    }
    *double v261 = 1;
LABEL_168:
    if (v187) {
      char v264 = 1;
    }
    else {
      char v264 = v242;
    }
    if ((v264 & 1) == 0)
    {
      if (*((unsigned char *)this + 2296))
      {
        char v265 = v286;
        if (*((unsigned char *)this + 2280)) {
          char v265 = 1;
        }
        if ((v265 & 1) == 0)
        {
          char v266 = 0;
LABEL_181:
          double v267 = *((double *)v99 + 13);
          if (v267 < 0.0 || v267 > 0.2)
          {
            *(_WORD *)uint64_t v294 = 12;
            LOBYTE(v299) = 3;
            double v284 = *((double *)v99 + 2) + (double)*((uint64_t *)v99 + 1);
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)v294, (unsigned __int8 *)&v299, "#gmp,Throwing away GNSS measurements due to raven time uncertainty,time,%.2f,unc,%.2f", v256, v257, v258, v259, v260, SLOBYTE(v284));
            uint64_t v11 = 14;
          }
          else
          {
            if (*((unsigned char *)this + 2296)
              && v267 >= 0.0
              && v267 < 0.2
              && (double v268 = *((double *)this + 286), v268 >= 0.0)
              && v268 < 0.2)
            {
              if ((v266 & 1) == 0)
              {
                float v269 = (v267 * v267 + v268 * v268) * 9.0e-12 * 1000000000.0 * 1000000000.0;
                *((float *)this + 27) = *((float *)this + 27) + v269;
              }
            }
            else if ((v266 & 1) == 0)
            {
              *((unsigned char *)this + 112) = 0;
            }
            if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v255) <= 1)
            {
              *(_WORD *)uint64_t v294 = 12;
              LOBYTE(v299) = 1;
              double v275 = *((double *)this + 5) + (double)*((uint64_t *)this + 4);
              cnprint::CNPrinter::Print((cnprint::CNPrinter *)v294, (unsigned __int8 *)&v299, "#gmp,Preprocessed meas avail,t,%.1f,Elapsed millisec since last report,HW,%.2f,Raven,%.2f,TAI,%.2f,continuous clock,%d", v270, v271, v272, v273, v274, SLOBYTE(v275));
            }
            long long v276 = v291;
            *(_OWORD *)uint64_t v294 = v302;
            *(_OWORD *)&v294[16] = v291;
            uint64_t v277 = *((void *)v288 + 13);
            int v278 = *((unsigned __int8 *)this + 2296);
            *(_OWORD *)int v219 = v302;
            *((_OWORD *)v219 + 1) = v276;
            *((void *)this + 282) = v285;
            *(_OWORD *)((char *)this + 2264) = *(_OWORD *)v312;
            *((unsigned char *)this + 2280) = v187 != 0;
            *((void *)this + 286) = v277;
            if (!v278) {
              *((unsigned char *)this + 2296) = 1;
            }
            uint64_t v11 = 1;
            *((unsigned char *)this + 16) = 1;
          }
          goto LABEL_79;
        }
      }
      else
      {
        char v266 = v286;
        if (!v286) {
          goto LABEL_181;
        }
      }
    }
    if (*((unsigned char *)this + 56)) {
      *((unsigned char *)this + 56) = 0;
    }
    *((unsigned char *)this + 112) = 0;
    char v266 = 1;
    goto LABEL_181;
  }
  char v137 = *((unsigned char *)this + 2296);
  char v138 = v287 ^ 1;
  if (!v137) {
    char v138 = 1;
  }
  if ((v138 & 1) == 0)
  {
    *(_WORD *)uint64_t v294 = 12;
    LOBYTE(v291) = 2;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v294, (unsigned __int8 *)&v291, "#gmp,Fell back to propagation for coarse receiver TAI time", v131, v132, v133, v134, v135, v279);
    if (!*((unsigned char *)this + 2296)) {
      sub_18DFF28FC();
    }
    *(double *)v139.i64 = v303;
    *(_OWORD *)uint64_t v294 = 0uLL;
    CNTimeSpan::SetTimeSpan((uint64_t *)v294, 0, v139, v140);
    *(void *)&long long v302 = CNTimeSpan::operator+((uint64_t)this + 2224, v294, v141, v142);
    *((void *)&v302 + 1) = v143;
    goto LABEL_93;
  }
  *(_WORD *)uint64_t v294 = 12;
  LOBYTE(v291) = 3;
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)v294, (unsigned __int8 *)&v291, "#gmp,Could not estimate coarse receiver TAI time,last times set,%d,HW clock diff set,%d", v131, v132, v133, v134, v135, v137);
  uint64_t v11 = 9;
LABEL_79:
  sub_18E13D5A4(v306[0]);
LABEL_80:
  if (v310) {
    sub_18E13D5A4((char *)v308);
  }
  return v11;
}

void sub_18E139DF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char *a42,uint64_t a43,uint64_t a44,char *a45,uint64_t a46,char a47)
{
  if (a47) {
    sub_18E13D5A4(a45);
  }
  _Unwind_Resume(a1);
}

BOOL raven::GnssMeasurementPreprocessor::ComputeSvElevAzimLosSpeed(unsigned __int8 *a1, uint64_t **a2, uint64_t a3, int a4)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  int v25 = *a1;
  if (*a1)
  {
    double v4 = *a2;
    uint64_t v5 = a2[1];
    if (*a2 != v5)
    {
      do
      {
        uint64_t v7 = *v4;
        if (*v4)
        {
          __int16 v31 = 0;
          long long v32 = 0u;
          long long v33 = 0u;
          int v34 = 0;
          uint64_t v35 = 0;
          uint64_t v36 = 0;
          int v37 = 0;
          if (!(*(unsigned int (**)(uint64_t, uint64_t, __int16 *, unsigned char *, unsigned char *, long long *))(*(void *)(v7 + 32) + 56))(v7 + 32, a3, &v31, v30, v29, &v39))
          {
            long long v39 = *((_OWORD *)a1 + 51);
            uint64_t v40 = *((void *)a1 + 104);
            if (!cnnavigation::SatElAz((uint64_t)&v39, (uint64_t)v30, 1, (uint64_t)&v38, 0, (uint64_t)&v31))
            {
              *(_OWORD *)(v7 + 264) = v38;
              if (*(unsigned char *)(v7 + 288)) {
                *(unsigned char *)(v7 + 288) = 0;
              }
              if (a4)
              {
                uint64_t v8 = 0;
                double v9 = 0.0;
                double v10 = 0.0;
                do
                {
                  double v11 = *(double *)&v30[v8] - *(double *)((char *)&v39 + v8);
                  double v10 = v10 + v11 * *(double *)&v29[v8];
                  double v9 = v9 + v11 * v11;
                  v8 += 8;
                }
                while (v8 != 24);
                if (fabs(v9) >= 2.22044605e-16)
                {
                  *(double *)(v7 + 280) = v10 / sqrt(v9);
                  *(unsigned char *)(v7 + 288) = 1;
                }
                else
                {
                  __int16 v31 = 12;
                  unsigned __int8 v28 = 4;
                  char v12 = sub_18E017C64(v7);
                  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v31, &v28, "#gmp,Computation of range to satellite %s unexpectedly resulted in zero", v13, v14, v15, v16, v17, v12);
                }
              }
            }
          }
        }
        v4 += 2;
      }
      while (v4 != v5);
    }
  }
  else if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)a1) <= 1)
  {
    __int16 v31 = 12;
    LOBYTE(v39) = 1;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v31, (unsigned __int8 *)&v39, "#gmp,ComputeSvElevAzimLosSpeed,not configured", v18, v19, v20, v21, v22, v24);
  }
  return v25 != 0;
}

BOOL raven::GnssMeasurementPreprocessor::OrderGnssMeasurements(cnprint::CNPrinter *a1, char *a2)
{
  int v2 = *(unsigned __int8 *)a1;
  if (*(unsigned char *)a1)
  {
    sub_18E13B61C(&__p, (uint64_t)(*((void *)a2 + 1) - *(void *)a2) >> 4);
    double v4 = (uint64_t *)__p;
    uint64_t v5 = v34;
    if (__p != v34)
    {
      uint64_t v6 = 0;
      uint64_t v7 = (uint64_t *)__p;
      do
        *v7++ = v6++;
      while (v7 != v5);
    }
    unint64_t v8 = 126 - 2 * __clz(v5 - v4);
    uint64_t v35 = a2;
    if (v5 == v4) {
      uint64_t v9 = 0;
    }
    else {
      uint64_t v9 = v8;
    }
    sub_18E13B694((uint64_t)v4, v5, (uint64_t **)&v35, v9, 1);
    long long v31 = 0uLL;
    unint64_t v32 = 0;
    double v10 = (uint64_t *)__p;
    double v11 = v34;
    uint64_t v12 = (char *)v34 - (unsigned char *)__p;
    if (v34 != __p)
    {
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF9) {
        sub_18DFF7B4C();
      }
      long long v39 = &v32;
      uint64_t v35 = (char *)sub_18DFF7B64((uint64_t)&v32, v12 >> 3);
      uint64_t v36 = v35;
      int v37 = v35;
      long long v38 = &v35[16 * v13];
      sub_18E01B514((uint64_t *)&v31, &v35);
      sub_18E01B69C((void **)&v35);
      double v10 = (uint64_t *)__p;
      double v11 = v34;
    }
    if (v10 == v11)
    {
      uint64_t v14 = (_OWORD *)*((void *)&v31 + 1);
    }
    else
    {
      uint64_t v14 = (_OWORD *)*((void *)&v31 + 1);
      do
      {
        uint64_t v15 = *(void *)a2 + 16 * *v10;
        if ((unint64_t)v14 >= v32)
        {
          uint64_t v16 = (uint64_t)((uint64_t)v14 - v31) >> 4;
          if ((unint64_t)(v16 + 1) >> 60) {
            sub_18DFF7B4C();
          }
          unint64_t v17 = (uint64_t)(v32 - v31) >> 3;
          if (v17 <= v16 + 1) {
            unint64_t v17 = v16 + 1;
          }
          if (v32 - (unint64_t)v31 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v18 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v18 = v17;
          }
          long long v39 = &v32;
          uint64_t v19 = (char *)sub_18DFF7B64((uint64_t)&v32, v18);
          uint64_t v20 = &v19[16 * v16];
          uint64_t v35 = v19;
          uint64_t v36 = v20;
          long long v38 = &v19[16 * v21];
          *(_OWORD *)uint64_t v20 = *(_OWORD *)v15;
          *(void *)uint64_t v15 = 0;
          *(void *)(v15 + 8) = 0;
          int v37 = v20 + 16;
          sub_18E01B514((uint64_t *)&v31, &v35);
          uint64_t v14 = (_OWORD *)*((void *)&v31 + 1);
          sub_18E01B69C((void **)&v35);
        }
        else
        {
          *v14++ = *(_OWORD *)v15;
          *(void *)uint64_t v15 = 0;
          *(void *)(v15 + 8) = 0;
        }
        *((void *)&v31 + 1) = v14;
        ++v10;
      }
      while (v10 != v11);
    }
    long long v27 = *(_OWORD *)a2;
    unint64_t v28 = v32;
    *(void *)a2 = v31;
    *((void *)a2 + 1) = v14;
    long long v31 = v27;
    unint64_t v29 = *((void *)a2 + 2);
    *((void *)a2 + 2) = v28;
    unint64_t v32 = v29;
    uint64_t v35 = (char *)&v31;
    sub_18DEE4B60((void ***)&v35);
    if (__p)
    {
      int v34 = (uint64_t *)__p;
      operator delete(__p);
    }
  }
  else if (cnprint::CNPrinter::GetLogLevel(a1) <= 1)
  {
    LOWORD(v35) = 12;
    LOBYTE(__p) = 1;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v35, (unsigned __int8 *)&__p, "#gmp,OrderGnssMeasurements,not configured", v22, v23, v24, v25, v26, v31);
  }
  return v2 != 0;
}

void sub_18E13A3E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t *a15, void *a16)
{
  a15 = &a9;
  sub_18DEE4B60((void ***)&a15);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

BOOL sub_18E13A428(uint64_t a1)
{
  return *(void *)a1 != -1
      && (*(void *)(a1 + 24) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (*(void *)(a1 + 32) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (*(_DWORD *)(a1 + 8) & 0x7FFFFFFFu) <= 0x7F7FFFFF
      && (*(_DWORD *)(a1 + 12) & 0x7FFFFFFFu) <= 0x7F7FFFFF
      && (*(_DWORD *)(a1 + 16) & 0x7FFFFFFFu) <= 0x7F7FFFFF
      && (*(_DWORD *)(a1 + 20) & 0x7FFFFFFFu) < 0x7F800000;
}

BOOL raven::GnssMeasurementPreprocessor::HandleEvent(raven::GnssMeasurementPreprocessor *this, const raven::ReceiverDifferentialCodeBiasesEvent *a2)
{
  int v3 = *(unsigned __int8 *)this;
  if (*(unsigned char *)this)
  {
    if (*((unsigned char *)this + 2160))
    {
      memcpy((char *)this + 1336, (char *)a2 + 8, 0x334uLL);
    }
    else
    {
      *((void *)this + 166) = &unk_1EDD15958;
      memcpy((char *)this + 1336, (char *)a2 + 8, 0x334uLL);
      *((unsigned char *)this + 2160) = 1;
    }
  }
  else if (cnprint::CNPrinter::GetLogLevel(this) <= 1)
  {
    __int16 v15 = 12;
    unsigned __int8 v14 = 1;
    uint64_t v5 = (*(uint64_t (**)(const raven::ReceiverDifferentialCodeBiasesEvent *))(*(void *)a2 + 16))(a2);
    double v13 = v6 + (double)v5;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v15, &v14, "#gmp,t,%.3lf,GNSS pre-processor not configured, failed to handle ReceiverDifferentialCodeBiasesEvent", v7, v8, v9, v10, v11, SLOBYTE(v13));
  }
  return v3 != 0;
}

BOOL raven::GnssMeasurementPreprocessor::HandleEvent(raven::GnssMeasurementPreprocessor *this, const raven::ThinShellIonosphereParametersEvent *a2)
{
  int v3 = *(unsigned __int8 *)this;
  if (*(unsigned char *)this)
  {
    long long v4 = *(_OWORD *)((char *)a2 + 104);
    long long v5 = *(_OWORD *)((char *)a2 + 120);
    *((_OWORD *)this + 149) = *(_OWORD *)((char *)a2 + 136);
    *((_OWORD *)this + 148) = v5;
    *((_OWORD *)this + 147) = v4;
    long long v6 = *(_OWORD *)((char *)a2 + 152);
    long long v7 = *(_OWORD *)((char *)a2 + 168);
    long long v8 = *(_OWORD *)((char *)a2 + 184);
    *((_OWORD *)this + 153) = *(_OWORD *)((char *)a2 + 200);
    *((_OWORD *)this + 152) = v8;
    *((_OWORD *)this + 151) = v7;
    *((_OWORD *)this + 150) = v6;
    long long v9 = *(_OWORD *)((char *)a2 + 216);
    long long v10 = *(_OWORD *)((char *)a2 + 232);
    long long v11 = *(_OWORD *)((char *)a2 + 248);
    *((_OWORD *)this + 157) = *(_OWORD *)((char *)a2 + 264);
    *((_OWORD *)this + 156) = v11;
    *((_OWORD *)this + 155) = v10;
    *((_OWORD *)this + 154) = v9;
  }
  else if (cnprint::CNPrinter::GetLogLevel(this) <= 1)
  {
    __int16 v22 = 12;
    unsigned __int8 v21 = 1;
    uint64_t v12 = (*(uint64_t (**)(const raven::ThinShellIonosphereParametersEvent *))(*(void *)a2 + 16))(a2);
    double v20 = v13 + (double)v12;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v22, &v21, "#gmp,t,%.3lf,GNSS pre-processor not configured, failed to handle ThinShellIonosphereParametersEvent", v14, v15, v16, v17, v18, SLOBYTE(v20));
  }
  return v3 != 0;
}

BOOL raven::GnssMeasurementPreprocessor::HandleEvent(raven::GnssMeasurementPreprocessor *this, const raven::SignalEnvironmentEvent *a2)
{
  int v2 = *(unsigned __int8 *)this;
  if (*(unsigned char *)this)
  {
    *((unsigned char *)this + 977) = *((unsigned char *)a2 + 104);
  }
  else if (cnprint::CNPrinter::GetLogLevel(this) <= 1)
  {
    __int16 v11 = 12;
    unsigned __int8 v10 = 1;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v11, &v10, "#gmp,HandleEvent(SignalEnvironment),not configured", v3, v4, v5, v6, v7, v9);
  }
  return v2 != 0;
}

uint64_t raven::GnssMeasurementPreprocessor::HandleEvent(cnnavigation::SphericalHarmonicsIonosphereModel **this, const raven::RavenGnssAssistanceFileEvent *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!*(unsigned char *)this)
  {
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)this) <= 1)
    {
      LOWORD(v34) = 12;
      LOBYTE(v33) = 1;
      uint64_t v23 = "#gmp,#rof,GNSS pre-processor not configured,failed to handle RavenGnssAssistanceFileEvent";
LABEL_22:
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v34, (unsigned __int8 *)&v33, v23, a4, a5, a6, a7, a8, v31);
    }
    return 0;
  }
  char v9 = this[318];
  if (!v9)
  {
    if (cnprint::CNPrinter::GetLogLevel(0) <= 1)
    {
      LOWORD(v34) = 12;
      LOBYTE(v33) = 1;
      uint64_t v23 = "#gmp,#rof,ionosphere model not configured,failed to handle RavenGnssAssistanceFileEvent";
      goto LABEL_22;
    }
    return 0;
  }
  if (*((void *)a2 + 16) == *((void *)a2 + 15))
  {
    LOWORD(v34) = 12;
    LOBYTE(v33) = 4;
    uint64_t v23 = "#gmp,#rof,Handle RavenGnssAssistanceFileEvent,iono parameters empty";
    goto LABEL_22;
  }
  int v11 = (*(uint64_t (**)(cnnavigation::SphericalHarmonicsIonosphereModel *))(*(void *)v9 + 32))(v9);
  uint64_t v18 = (const cnnavigation::SphericalHarmonicsIonosphereParameters *)*((void *)a2 + 15);
  uint64_t v19 = (const cnnavigation::SphericalHarmonicsIonosphereParameters *)*((void *)a2 + 16);
  if (v11 && *((void *)this[318] + 4) != 0x80FE03F80FE03F81 * ((v19 - v18) >> 6))
  {
    LOWORD(v34) = 12;
    LOBYTE(v33) = 2;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v34, (unsigned __int8 *)&v33, "#gmp,#rof,Handle RavenGnssAssistanceFileEvent,received number of iono layers %zu mismatch %zu,resetting", v13, v14, v15, v16, v17, -127 * ((v19 - v18) >> 6));
    double v20 = this[318];
    if (*((void *)v20 + 4))
    {
      sub_18DEF85FC(v20 + 8, *((void **)v20 + 3));
      *((void *)v20 + 3) = 0;
      uint64_t v21 = *((void *)v20 + 2);
      if (v21)
      {
        for (uint64_t i = 0; i != v21; ++i)
          *(void *)(*((void *)v20 + 1) + 8 * i) = 0;
      }
      *((void *)v20 + 4) = 0;
    }
    uint64_t v18 = (const cnnavigation::SphericalHarmonicsIonosphereParameters *)*((void *)a2 + 15);
    uint64_t v19 = (const cnnavigation::SphericalHarmonicsIonosphereParameters *)*((void *)a2 + 16);
  }
  if (v18 != v19)
  {
    while (!cnnavigation::SphericalHarmonicsIonosphereModel::UpdateParameters(this[318], v18, v12, v13, v14, v15, v16, v17))
    {
      uint64_t v18 = (const cnnavigation::SphericalHarmonicsIonosphereParameters *)((char *)v18 + 8256);
      if (v18 == v19) {
        goto LABEL_15;
      }
    }
    return 0;
  }
LABEL_15:
  if (*((unsigned char *)this + 2296))
  {
    long long v34 = *((_OWORD *)this + 139);
  }
  else
  {
    *(void *)&long long v34 = 0;
    *((void *)&v34 + 1) = 0x7FF8000000000000;
  }
  cnnavigation::SphericalHarmonicsIonosphereModel::GetApplicabilityTime(this[318]);
  __int16 v33 = 12;
  unsigned __int8 v32 = 3;
  char IsValid = cnnavigation::SphericalHarmonicsIonosphereModel::IsValid(this[318], (const cnnavigation::TAITime *)&v34);
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v33, &v32, "#gmp,#rof,Updated SH ionosphere model parameters,is_valid,%d,num_layers,%zu,iono_applicability_time,%.3lf,iono_age_sec,%.3lf,age_thld_sec,%.1f", v26, v27, v28, v29, v30, IsValid);
  return 1;
}

uint64_t raven::GnssMeasurementPreprocessor::GetPreprocessedGnssMeasurements(uint64_t **this, uint64_t **a2)
{
  if (!*(unsigned char *)this)
  {
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)this) <= 1)
    {
      __int16 v15 = 12;
      unsigned __int8 v14 = 1;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v15, &v14, "#gmp,GetPreprocessedGnssMeasurements,not configured", v8, v9, v10, v11, v12, v13);
    }
    return 0;
  }
  if (!*((unsigned char *)this + 16)) {
    return 0;
  }
  long long v3 = *((_OWORD *)this + 2);
  *(_OWORD *)(a2 + 3) = *((_OWORD *)this + 3);
  *(_OWORD *)(a2 + 1) = v3;
  long long v4 = *((_OWORD *)this + 4);
  long long v5 = *((_OWORD *)this + 5);
  long long v6 = *((_OWORD *)this + 6);
  a2[11] = this[14];
  *(_OWORD *)(a2 + 9) = v6;
  *(_OWORD *)(a2 + 7) = v5;
  *(_OWORD *)(a2 + 5) = v4;
  if (this + 3 != a2) {
    sub_18E021A70((uint64_t)(a2 + 12), this[15], this[16], ((char *)this[16] - (char *)this[15]) >> 4);
  }
  *((unsigned char *)this + 16) = 0;
  return 1;
}

BOOL raven::GnssMeasurementPreprocessor::GetGpsUTCParametersEvent(raven::GnssMeasurementPreprocessor *this, raven::GNSSUTCParametersEvent *a2)
{
  if (*(unsigned char *)this)
  {
    BOOL result = cnnavigation::GNSSUTCParameters::IsValid((raven::GnssMeasurementPreprocessor *)((char *)this + 248));
    if (result)
    {
      long long v5 = *(_OWORD *)((char *)this + 152);
      long long v6 = *(_OWORD *)((char *)this + 168);
      *(_OWORD *)((char *)a2 + 40) = *(_OWORD *)((char *)this + 184);
      *(_OWORD *)((char *)a2 + 24) = v6;
      *(_OWORD *)((char *)a2 + 8) = v5;
      long long v7 = *(_OWORD *)((char *)this + 200);
      long long v8 = *(_OWORD *)((char *)this + 216);
      long long v9 = *(_OWORD *)((char *)this + 232);
      *(_OWORD *)((char *)a2 + 104) = *(_OWORD *)((char *)this + 248);
      *(_OWORD *)((char *)a2 + 88) = v9;
      *(_OWORD *)((char *)a2 + 72) = v8;
      *(_OWORD *)((char *)a2 + 56) = v7;
      long long v10 = *(_OWORD *)((char *)this + 264);
      long long v11 = *(_OWORD *)((char *)this + 280);
      long long v12 = *(_OWORD *)((char *)this + 296);
      *((_DWORD *)a2 + 42) = *((_DWORD *)this + 78);
      *(_OWORD *)((char *)a2 + 152) = v12;
      *(_OWORD *)((char *)a2 + 136) = v11;
      *(_OWORD *)((char *)a2 + 120) = v10;
      return 1;
    }
  }
  else
  {
    if (cnprint::CNPrinter::GetLogLevel(this) <= 1)
    {
      __int16 v20 = 12;
      unsigned __int8 v19 = 1;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v20, &v19, "#gmp,GetGpsUTCParametersEvent,not configured", v13, v14, v15, v16, v17, v18);
    }
    return 0;
  }
  return result;
}

uint64_t raven::GnssMeasurementPreprocessor::GetKlobucharParametersEvent(raven::GnssMeasurementPreprocessor *this, raven::KlobucharParametersEvent *a2)
{
  if (!*(unsigned char *)this)
  {
    if (cnprint::CNPrinter::GetLogLevel(this) <= 1)
    {
      __int16 v16 = 12;
      unsigned __int8 v15 = 1;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v16, &v15, "#gmp,KlobucharParametersEvent,not configured", v9, v10, v11, v12, v13, v14);
    }
    return 0;
  }
  if (!*((unsigned char *)this + 520)) {
    return 0;
  }
  long long v3 = *(_OWORD *)((char *)this + 328);
  long long v4 = *(_OWORD *)((char *)this + 344);
  *(_OWORD *)((char *)a2 + 40) = *(_OWORD *)((char *)this + 360);
  *(_OWORD *)((char *)a2 + 24) = v4;
  *(_OWORD *)((char *)a2 + 8) = v3;
  long long v5 = *(_OWORD *)((char *)this + 376);
  long long v6 = *(_OWORD *)((char *)this + 392);
  long long v7 = *(_OWORD *)((char *)this + 408);
  *(_OWORD *)((char *)a2 + 104) = *(_OWORD *)((char *)this + 424);
  *(_OWORD *)((char *)a2 + 88) = v7;
  *(_OWORD *)((char *)a2 + 72) = v6;
  *(_OWORD *)((char *)a2 + 56) = v5;
  cnnavigation::KlobucharModelParameters::operator=((uint64_t)a2 + 120, (uint64_t)this + 440);
  if (*((unsigned char *)this + 520))
  {
    *((void *)this + 40) = &unk_1EDD146B8;
    *((unsigned char *)this + 520) = 0;
  }
  return 1;
}

double raven::GnssMeasurementPreprocessor::Reset(raven::GnssMeasurementPreprocessor *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  LOWORD(v46) = 12;
  LOBYTE(v51) = 3;
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v46, (unsigned __int8 *)&v51, "#gmp,Reset invoked", a4, a5, a6, a7, a8, v45);
  *((unsigned char *)this + 16) = 0;
  memset(v47, 0, 112);
  uint64_t v46 = &unk_1EDD154D0;
  *((_OWORD *)this + 2) = 0uLL;
  *((_OWORD *)this + 3) = 0u;
  long long v9 = *(_OWORD *)&v47[32];
  long long v10 = *(_OWORD *)&v47[48];
  long long v11 = *(_OWORD *)&v47[64];
  *((void *)this + 14) = *(void *)&v47[80];
  *((_OWORD *)this + 5) = v10;
  *((_OWORD *)this + 6) = v11;
  *((_OWORD *)this + 4) = v9;
  if ((unsigned char **)((char *)this + 24) != &v46) {
    sub_18E021A70((uint64_t)this + 120, 0, 0, 0);
  }
  uint64_t v46 = &unk_1EDD154D0;
  uint64_t v51 = (void **)&v47[88];
  sub_18DEE4B60(&v51);
  memset(&v47[96], 0, 64);
  memset(&v47[48], 0, 40);
  *(void *)&v47[88] = 0x7FF8000000000000;
  *(_OWORD *)((char *)this + 184) = 0uLL;
  *(_OWORD *)((char *)this + 168) = 0uLL;
  *(_OWORD *)((char *)this + 152) = 0uLL;
  long long v12 = *(_OWORD *)&v47[48];
  long long v13 = *(_OWORD *)&v47[64];
  long long v14 = *(_OWORD *)&v47[80];
  *(_OWORD *)((char *)this + 248) = *(_OWORD *)&v47[96];
  *(_OWORD *)((char *)this + 232) = v14;
  *(_OWORD *)((char *)this + 216) = v13;
  *(_OWORD *)((char *)this + 200) = v12;
  long long v15 = *(_OWORD *)&v47[112];
  long long v16 = *(_OWORD *)&v47[128];
  long long v17 = *(_OWORD *)&v47[144];
  *((_DWORD *)this + 78) = 0;
  *(_OWORD *)((char *)this + 296) = v17;
  *(_OWORD *)((char *)this + 280) = v16;
  *(_OWORD *)((char *)this + 264) = v15;
  *(void *)&v47[272] = 0;
  *(void *)&v47[192] = 0;
  memset(v47, 0, 88);
  uint64_t v46 = &unk_1EDD137C0;
  memset(&v47[96], 0, 88);
  *(void *)&v47[88] = 0x7FF8000000000000;
  *(void *)&v47[184] = 0x7FF8000000000000;
  *(int64x2_t *)&v47[200] = vdupq_n_s64(0x7FF8000000000000uLL);
  *(_OWORD *)&v47[216] = *(_OWORD *)&v47[200];
  *(_OWORD *)&v47[232] = *(_OWORD *)&v47[200];
  *(_OWORD *)&v47[248] = *(_OWORD *)&v47[200];
  *(void *)&v47[264] = 0x7FF8000000000000;
  *(_OWORD *)&v47[280] = *(_OWORD *)&v47[200];
  *(_OWORD *)&v47[296] = *(_OWORD *)&v47[200];
  *(_OWORD *)&v47[312] = *(_OWORD *)&v47[200];
  *(_OWORD *)&v47[328] = *(_OWORD *)&v47[200];
  *(void *)&v47[344] = 0x7FF8000000000000;
  memcpy((char *)this + 536, v47, 0x160uLL);
  *((void *)this + 111) = 0;
  *((void *)this + 112) = 0x3FF0000000000000;
  *(_OWORD *)((char *)this + 904) = 0u;
  *(_OWORD *)((char *)this + 920) = 0u;
  *(_OWORD *)((char *)this + 936) = 0u;
  *(_OWORD *)((char *)this + 952) = 0u;
  *((void *)this + 121) = 0;
  *((unsigned char *)this + 977) = 0;
  uint64_t v18 = *((void *)this + 1);
  uint64_t v46 = v47;
  *(_OWORD *)uint64_t v47 = 0uLL;
  *(void *)&unsigned char v47[32] = 0;
  *(_OWORD *)&v47[16] = (unint64_t)&v47[24];
  memset(&v47[48], 0, 18);
  *(void *)&v47[40] = &v47[48];
  v47[72] = 0;
  v47[104] = 0;
  v47[112] = 0;
  v47[136] = 0;
  v47[144] = 0;
  v47[160] = 0;
  v47[168] = 0;
  v47[184] = 0;
  v47[192] = 0;
  v47[216] = 0;
  v47[224] = 0;
  v47[248] = 0;
  v47[256] = 0;
  v47[280] = 0;
  if (v18)
  {
    v47[64] = *(unsigned char *)(v18 + 588);
    v47[65] = *(unsigned char *)(v18 + 597);
  }
  unsigned __int8 v19 = (char *)this + 992;
  sub_18E0B75B0((uint64_t)this + 984, *((void **)this + 124));
  uint64_t v20 = *(void *)v47;
  *((void *)this + 123) = v46;
  *((void *)this + 124) = v20;
  uint64_t v21 = *(void *)&v47[8];
  *((void *)this + 125) = *(void *)&v47[8];
  if (v21)
  {
    *(void *)(v20 + 16) = v19;
    uint64_t v46 = v47;
    *(_OWORD *)uint64_t v47 = 0uLL;
  }
  else
  {
    *((void *)this + 123) = v19;
  }
  __int16 v22 = (char *)this + 1016;
  sub_18E012A10((uint64_t)this + 1008, *((void **)this + 127));
  uint64_t v23 = *(void *)&v47[24];
  *((void *)this + 126) = *(void *)&v47[16];
  *((void *)this + 127) = v23;
  uint64_t v24 = *(void *)&v47[32];
  *((void *)this + 128) = *(void *)&v47[32];
  if (v24)
  {
    *(void *)(v23 + 16) = v22;
    *(void *)&v47[16] = &v47[24];
    *(void *)&v47[24] = 0;
    *(void *)&unsigned char v47[32] = 0;
  }
  else
  {
    *((void *)this + 126) = v22;
  }
  uint64_t v25 = (char *)this + 1040;
  sub_18E012A10((uint64_t)this + 1032, *((void **)this + 130));
  uint64_t v26 = *(void **)&v47[48];
  *((void *)this + 129) = *(void *)&v47[40];
  *((void *)this + 130) = v26;
  uint64_t v27 = *(void *)&v47[56];
  *((void *)this + 131) = *(void *)&v47[56];
  if (v27)
  {
    double v26[2] = v25;
    uint64_t v26 = 0;
    *(void *)&v47[40] = &v47[48];
    *(_OWORD *)&v47[48] = 0uLL;
  }
  else
  {
    *((void *)this + 129) = v25;
  }
  long long v28 = *(_OWORD *)&v47[240];
  *((_OWORD *)this + 76) = *(_OWORD *)&v47[224];
  *((_OWORD *)this + 77) = v28;
  *((_OWORD *)this + 78) = *(_OWORD *)&v47[256];
  *(_OWORD *)((char *)this + 1257) = *(_OWORD *)&v47[265];
  long long v29 = *(_OWORD *)&v47[176];
  *((_OWORD *)this + 72) = *(_OWORD *)&v47[160];
  *((_OWORD *)this + 73) = v29;
  long long v30 = *(_OWORD *)&v47[208];
  *((_OWORD *)this + 74) = *(_OWORD *)&v47[192];
  *((_OWORD *)this + 75) = v30;
  long long v31 = *(_OWORD *)&v47[112];
  *((_OWORD *)this + 68) = *(_OWORD *)&v47[96];
  *((_OWORD *)this + 69) = v31;
  long long v32 = *(_OWORD *)&v47[144];
  *((_OWORD *)this + 70) = *(_OWORD *)&v47[128];
  *((_OWORD *)this + 71) = v32;
  long long v33 = *(_OWORD *)&v47[80];
  *((_OWORD *)this + 66) = *(_OWORD *)&v47[64];
  *((_OWORD *)this + 67) = v33;
  sub_18E012A10((uint64_t)&v47[40], v26);
  sub_18E012A10((uint64_t)&v47[16], *(void **)&v47[24]);
  sub_18E0B75B0((uint64_t)&v46, *(void **)v47);
  *((unsigned char *)this + 2208) = 0;
  *((_DWORD *)this + 553) = -1;
  *((unsigned char *)this + 2216) = 0;
  *((_DWORD *)this + 555) = -1;
  *((_OWORD *)this + 137) = 0u;
  if (*((unsigned char *)this + 520))
  {
    *((void *)this + 40) = &unk_1EDD146B8;
    *((unsigned char *)this + 520) = 0;
  }
  *((void *)this + 288) = 0;
  if (*((unsigned char *)this + 2296)) {
    *((unsigned char *)this + 2296) = 0;
  }
  *(_OWORD *)((char *)this + 2312) = 0uLL;
  *((unsigned char *)this + 2336) = 1;
  raven::GnssReceiverBandCorrectionsManager::GnssReceiverBandCorrectionsManager((raven::GnssReceiverBandCorrectionsManager *)&v46, *((const raven::RavenParameters **)this + 1));
  *((void *)this + 160) = v46;
  long long v34 = (char *)this + 1296;
  sub_18E012A10((uint64_t)this + 1288, *((void **)this + 162));
  uint64_t v35 = *(void *)&v47[8];
  *((void *)this + 161) = *(void *)v47;
  *((void *)this + 162) = v35;
  uint64_t v36 = *(void *)&v47[16];
  *((void *)this + 163) = *(void *)&v47[16];
  if (v36)
  {
    *(void *)(v35 + 16) = v34;
    *(void *)uint64_t v47 = &v47[8];
    *(void *)&v47[8] = 0;
    *(void *)&v47[16] = 0;
  }
  else
  {
    *((void *)this + 161) = v34;
  }
  uint64_t v37 = *(void *)&v47[24];
  *(void *)&v47[24] = 0;
  sub_18E0B7560((uint64_t *)this + 164, v37);
  uint64_t v38 = *(void *)&v47[32];
  *(void *)&unsigned char v47[32] = 0;
  uint64_t v39 = *((void *)this + 165);
  *((void *)this + 165) = v38;
  if (v39) {
    sub_18E0B7500((uint64_t)this + 1320, v39);
  }
  if (*((unsigned __int8 *)this + 2160) == v48)
  {
    if (*((unsigned char *)this + 2160)) {
      memcpy((char *)this + 1336, &v47[48], 0x334uLL);
    }
  }
  else if (*((unsigned char *)this + 2160))
  {
    *((unsigned char *)this + 2160) = 0;
  }
  else
  {
    *((void *)this + 166) = &unk_1EDD15958;
    memcpy((char *)this + 1336, &v47[48], 0x334uLL);
    *((unsigned char *)this + 2160) = 1;
  }
  uint64_t v40 = *(void *)&v47[32];
  *((void *)this + 273) = v50;
  *(_OWORD *)((char *)this + 2168) = v49;
  *(void *)&unsigned char v47[32] = 0;
  if (v40) {
    sub_18E0B7500((uint64_t)&v47[32], v40);
  }
  uint64_t v41 = *(void *)&v47[24];
  *(void *)&v47[24] = 0;
  if (v41)
  {
    uint64_t v42 = sub_18E011990(v41);
    MEMORY[0x192FA6240](v42, 0x10E0C401B4558CBLL);
  }
  sub_18E012A10((uint64_t)v47, *(void **)&v47[8]);
  uint64_t v44 = *((void *)this + 1);
  if (v44)
  {
    if (!*(unsigned char *)(v44 + 577)) {
      goto LABEL_42;
    }
    if (*((unsigned char *)this + 2600))
    {
      sub_18E011990((uint64_t)this + 2560);
      uint64_t v44 = *((void *)this + 1);
    }
    *((void *)this + 319) = v44;
    double result = 0.0;
    *((_OWORD *)this + 160) = 0u;
    *((_OWORD *)this + 161) = 0u;
    *((_DWORD *)this + 648) = 1065353216;
    *((unsigned char *)this + 2600) = 1;
    if (v44)
    {
LABEL_42:
      if (*(unsigned char *)(v44 + 2544)) {
        operator new();
      }
    }
  }
  return result;
}

void sub_18E13B384(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  *(void *)(v22 - 88) = &a22;
  sub_18DEE4B60((void ***)(v22 - 88));
  _Unwind_Resume(a1);
}

uint64_t sub_18E13B3A8(int *a1)
{
  uint64_t result = sub_18E01B268(a1);
  if (result)
  {
    int v3 = *((unsigned __int8 *)a1 + 8);
    if ((v3 - 1) > 9) {
      return 0;
    }
    unint64_t v4 = *((void *)a1 + 2);
    if (v4 == -1) {
      return 0;
    }
    unint64_t v5 = *((void *)a1 + 3);
    if (v5 == -1) {
      return 0;
    }
    uint64_t result = 0;
    if (v4 <= v5 && *((void *)a1 + 4) != -1)
    {
      if (*((float *)a1 + 48) < 0.0) {
        return 0;
      }
      uint64_t result = 0;
      int v6 = *a1;
      if (*a1 > 15)
      {
        switch(v6)
        {
          case 64:
            if (v3 != 10) {
              return 0;
            }
            break;
          case 32:
            if (v3 != 9) {
              return 0;
            }
            break;
          case 16:
LABEL_17:
            unsigned int v7 = (v3 - 1);
LABEL_21:
            if (v7 >= 2) {
              return 0;
            }
            break;
          default:
            return result;
        }
LABEL_26:
        long long v8 = (_DWORD *)*((void *)a1 + 23);
        if (v8)
        {
          return sub_18E13B50C(v8);
        }
        else
        {
          return 1;
        }
      }
      else
      {
        switch(v6)
        {
          case 1:
            goto LABEL_17;
          case 2:
            if (v3 == 3) {
              goto LABEL_26;
            }
            return 0;
          case 4:
            if ((v3 - 4) < 3) {
              goto LABEL_26;
            }
            return 0;
          case 8:
            unsigned int v7 = (v3 - 7);
            goto LABEL_21;
          default:
            return result;
        }
      }
    }
  }
  return result;
}

BOOL sub_18E13B50C(_DWORD *a1)
{
  if ((a1[1] & 0x7FFFFFFFu) > 0x7F7FFFFF || (a1[8] & 0x7FFFFFFFu) > 0x7F7FFFFF) {
    return 0;
  }
  int v1 = a1[10];
  if ((a1[9] & 0x7FFFFFFFu) > 0x7F7FFFFF)
  {
    if ((v1 & 0x7FFFFFFFu) < 0x7F800000) {
      return 0;
    }
  }
  else if ((v1 & 0x7FFFFFFFu) >= 0x7F800000)
  {
    return 0;
  }
  if ((a1[11] & 0x7FFFFFFFu) > 0x7F7FFFFF) {
    return 0;
  }
  int v2 = a1[13];
  if ((a1[12] & 0x7FFFFFFFu) > 0x7F7FFFFF)
  {
    if ((v2 & 0x7FFFFFFFu) >= 0x7F800000) {
      goto LABEL_12;
    }
    return 0;
  }
  if ((v2 & 0x7FFFFFFFu) >= 0x7F800000) {
    return 0;
  }
LABEL_12:
  if ((a1[14] & 0x7FFFFFFFu) > 0x7F7FFFFF) {
    return 0;
  }
  int v3 = a1[16];
  BOOL v4 = (v3 & 0x7FFFFFFFu) > 0x7F7FFFFF;
  BOOL v5 = (v3 & 0x7FFFFFFFu) < 0x7F800000;
  if ((a1[15] & 0x7FFFFFFFu) <= 0x7F7FFFFF) {
    return v5;
  }
  else {
    return v4;
  }
}

void *sub_18E13B61C(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_18DFFA7B0(a1, a2);
    BOOL v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_18E13B678(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_18E13B694(uint64_t result, uint64_t *a2, uint64_t **a3, uint64_t a4, char a5)
{
  long long v11 = (uint64_t *)result;
LABEL_2:
  long long v12 = a2 - 1;
  int k = v11;
  while (1)
  {
    long long v11 = k;
    uint64_t v14 = (char *)a2 - (char *)k;
    unint64_t v15 = a2 - k;
    if (v6 || !v5)
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          uint64_t v113 = *(a2 - 1);
          uint64_t v114 = **a3;
          uint64_t v115 = *k;
          long long v116 = (uint64_t *)(v114 + 16 * *k);
          uint64_t v117 = *(void *)(v114 + 16 * v113);
          if (v117)
          {
            uint64_t v118 = *(void *)(v117 + 328);
            int v119 = v118 == *(void *)(v117 + 336) || *(unsigned __int8 *)(v118 + 189) != 1;
          }
          else
          {
            int v119 = -1;
          }
          uint64_t v240 = *v116;
          if (v240)
          {
            uint64_t v241 = *(void *)(v240 + 328);
            int v242 = v241 == *(void *)(v240 + 336) || *(unsigned __int8 *)(v241 + 189) != 1;
          }
          else
          {
            int v242 = -1;
          }
          BOOL v243 = v119 <= v242;
          if (v119 != v242) {
            goto LABEL_498;
          }
          if (v117) {
            BOOL v244 = v240 == 0;
          }
          else {
            BOOL v244 = 1;
          }
          if (!v244)
          {
            BOOL v243 = *(double *)(v117 + 264) <= *(double *)(v240 + 264);
LABEL_498:
            if (!v243)
            {
              *int k = v113;
              *(a2 - 1) = v115;
            }
          }
          break;
        case 3uLL:
          uint64_t v120 = **a3;
          return (uint64_t)sub_18E13CCC4(k, k + 1, a2 - 1, v120);
        case 4uLL:
          return (uint64_t)sub_18E13D304(k, k + 1, k + 2, a2 - 1, a3);
        case 5uLL:
          return (uint64_t)sub_18E13CA08(k, k + 1, k + 2, k + 3, a2 - 1, a3);
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v14 <= 191) {
      break;
    }
    if (!a4)
    {
      if (k == a2) {
        return result;
      }
      int64_t v142 = (v15 - 2) >> 1;
      uint64_t v143 = *a3;
      int64_t v144 = v142;
      while (1)
      {
        int64_t v145 = v144;
        if (v142 < v144) {
          goto LABEL_380;
        }
        uint64_t v146 = (2 * v144) | 1;
        double v147 = &k[v146];
        uint64_t v148 = 2 * v144 + 2;
        uint64_t v149 = *v143;
        if (v148 < (uint64_t)v15)
        {
          uint64_t v150 = *(void *)(v149 + 16 * *v147);
          if (v150)
          {
            uint64_t v151 = *(void *)(v150 + 328);
            int v152 = v151 == *(void *)(v150 + 336) || *(unsigned __int8 *)(v151 + 189) != 1;
          }
          else
          {
            int v152 = -1;
          }
          uint64_t v153 = *(void *)(v149 + 16 * v147[1]);
          if (v153)
          {
            uint64_t v154 = *(void *)(v153 + 328);
            int v155 = v154 == *(void *)(v153 + 336) || *(unsigned __int8 *)(v154 + 189) != 1;
          }
          else
          {
            int v155 = -1;
          }
          BOOL v156 = v152 <= v155;
          if (v152 == v155)
          {
            if (v150) {
              BOOL v157 = v153 == 0;
            }
            else {
              BOOL v157 = 1;
            }
            if (v157) {
              goto LABEL_323;
            }
            BOOL v156 = *(double *)(v150 + 264) <= *(double *)(v153 + 264);
          }
          if (!v156)
          {
            ++v147;
            uint64_t v146 = 2 * v145 + 2;
          }
        }
LABEL_323:
        uint64_t result = *v147;
        uint64_t v158 = *(void *)(v149 + 16 * *v147);
        if (v158)
        {
          uint64_t v159 = *(void *)(v158 + 328);
          int v160 = v159 == *(void *)(v158 + 336) || *(unsigned __int8 *)(v159 + 189) != 1;
        }
        else
        {
          int v160 = -1;
        }
        uint64_t v161 = k[v145];
        uint64_t v162 = *(void *)(v149 + 16 * v161);
        if (v162)
        {
          uint64_t v163 = *(void *)(v162 + 328);
          int v164 = v163 == *(void *)(v162 + 336) || *(unsigned __int8 *)(v163 + 189) != 1;
        }
        else
        {
          int v164 = -1;
        }
        BOOL v165 = v160 <= v164;
        if (v160 != v164) {
          goto LABEL_339;
        }
        if (v158) {
          BOOL v166 = v162 == 0;
        }
        else {
          BOOL v166 = 1;
        }
        if (!v166)
        {
          BOOL v165 = *(double *)(v158 + 264) <= *(double *)(v162 + 264);
LABEL_339:
          if (!v165) {
            goto LABEL_380;
          }
        }
        k[v145] = result;
        while (1)
        {
          if (v142 < v146) {
            goto LABEL_379;
          }
          uint64_t result = (uint64_t)v147;
          uint64_t v167 = 2 * v146;
          uint64_t v146 = (2 * v146) | 1;
          double v147 = &k[v146];
          uint64_t v168 = v167 + 2;
          if (v168 < (uint64_t)v15)
          {
            uint64_t v169 = *(void *)(v149 + 16 * *v147);
            if (v169)
            {
              uint64_t v170 = *(void *)(v169 + 328);
              int v171 = v170 == *(void *)(v169 + 336) || *(unsigned __int8 *)(v170 + 189) != 1;
            }
            else
            {
              int v171 = -1;
            }
            uint64_t v172 = *(void *)(v149 + 16 * v147[1]);
            if (v172)
            {
              uint64_t v173 = *(void *)(v172 + 328);
              int v174 = v173 == *(void *)(v172 + 336) || *(unsigned __int8 *)(v173 + 189) != 1;
            }
            else
            {
              int v174 = -1;
            }
            BOOL v175 = v171 <= v174;
            if (v171 == v174)
            {
              if (v169) {
                BOOL v176 = v172 == 0;
              }
              else {
                BOOL v176 = 1;
              }
              if (v176) {
                goto LABEL_362;
              }
              BOOL v175 = *(double *)(v169 + 264) <= *(double *)(v172 + 264);
            }
            if (!v175)
            {
              ++v147;
              uint64_t v146 = v168;
            }
          }
LABEL_362:
          uint64_t v177 = *(void *)(v149 + 16 * *v147);
          if (v177)
          {
            uint64_t v178 = *(void *)(v177 + 328);
            if (v178 == *(void *)(v177 + 336))
            {
              int v179 = 1;
              if (!v162)
              {
LABEL_369:
                int v181 = -1;
                goto LABEL_372;
              }
            }
            else
            {
              int v179 = *(unsigned __int8 *)(v178 + 189) != 1;
              if (!v162) {
                goto LABEL_369;
              }
            }
          }
          else
          {
            int v179 = -1;
            if (!v162) {
              goto LABEL_369;
            }
          }
          uint64_t v180 = *(void *)(v162 + 328);
          int v181 = v180 == *(void *)(v162 + 336) || *(unsigned char *)(v180 + 189) != 1;
LABEL_372:
          BOOL v182 = v179 <= v181;
          if (v179 != v181) {
            goto LABEL_376;
          }
          if (v162 && v177) {
            break;
          }
LABEL_378:
          *(void *)uint64_t result = *v147;
        }
        BOOL v182 = *(double *)(v177 + 264) <= *(double *)(v162 + 264);
LABEL_376:
        if (v182) {
          goto LABEL_378;
        }
        double v147 = (uint64_t *)result;
LABEL_379:
        *double v147 = v161;
LABEL_380:
        int64_t v144 = v145 - 1;
        if (!v145)
        {
          uint64_t v183 = (unint64_t)v14 >> 3;
          while (1)
          {
            uint64_t v184 = 0;
            uint64_t v185 = *k;
            int8x16_t v186 = *a3;
            int v187 = k;
            do
            {
              char v188 = v187;
              v187 += v184 + 1;
              uint64_t v189 = 2 * v184;
              uint64_t v184 = (2 * v184) | 1;
              uint64_t v190 = v189 + 2;
              if (v190 >= v183) {
                goto LABEL_402;
              }
              uint64_t v191 = *(void *)(*v186 + 16 * *v187);
              if (v191)
              {
                uint64_t v192 = *(void *)(v191 + 328);
                uint64_t result = v192 == *(void *)(v191 + 336) || *(unsigned __int8 *)(v192 + 189) != 1;
              }
              else
              {
                uint64_t result = 0xFFFFFFFFLL;
              }
              uint64_t v193 = *(void *)(*v186 + 16 * v187[1]);
              if (v193)
              {
                uint64_t v194 = *(void *)(v193 + 328);
                int v195 = v194 == *(void *)(v193 + 336) || *(unsigned __int8 *)(v194 + 189) != 1;
              }
              else
              {
                int v195 = -1;
              }
              BOOL v196 = (int)result <= v195;
              if (result == v195)
              {
                if (v191) {
                  BOOL v197 = v193 == 0;
                }
                else {
                  BOOL v197 = 1;
                }
                if (v197) {
                  goto LABEL_402;
                }
                BOOL v196 = *(double *)(v191 + 264) <= *(double *)(v193 + 264);
              }
              if (!v196)
              {
                ++v187;
                uint64_t v184 = v190;
              }
LABEL_402:
              uint64_t *v188 = *v187;
            }
            while (v184 <= (uint64_t)((unint64_t)(v183 - 2) >> 1));
            if (v187 == --a2)
            {
              *int v187 = v185;
              goto LABEL_426;
            }
            *int v187 = *a2;
            *a2 = v185;
            uint64_t v198 = (char *)v187 - (char *)k + 8;
            if (v198 < 9) {
              goto LABEL_426;
            }
            unint64_t v199 = ((unint64_t)v198 >> 3) - 2;
            unint64_t v200 = v199 >> 1;
            uint64_t v201 = &k[v199 >> 1];
            uint64_t v202 = *v186;
            uint64_t v203 = *(void *)(v202 + 16 * *v201);
            if (v203)
            {
              uint64_t v204 = *(void *)(v203 + 328);
              uint64_t result = v204 == *(void *)(v203 + 336) || *(unsigned __int8 *)(v204 + 189) != 1;
            }
            else
            {
              uint64_t result = 0xFFFFFFFFLL;
            }
            uint64_t v205 = *v187;
            uint64_t v206 = *(void *)(v202 + 16 * *v187);
            if (v206)
            {
              uint64_t v207 = *(void *)(v206 + 328);
              int v208 = v207 == *(void *)(v206 + 336) || *(unsigned __int8 *)(v207 + 189) != 1;
            }
            else
            {
              int v208 = -1;
            }
            BOOL v209 = (int)result <= v208;
            if (result != v208)
            {
LABEL_422:
              if (v209) {
                goto LABEL_426;
              }
              *int v187 = *v201;
              if (v199 < 2)
              {
LABEL_424:
                int8x16_t v211 = v201;
LABEL_425:
                uint64_t *v211 = v205;
                goto LABEL_426;
              }
              while (2)
              {
                unint64_t v212 = v200 - 1;
                unint64_t v200 = (v200 - 1) >> 1;
                int8x16_t v211 = &k[v200];
                uint64_t v213 = *(void *)(v202 + 16 * *v211);
                if (v213)
                {
                  uint64_t v214 = *(void *)(v213 + 328);
                  if (v214 == *(void *)(v213 + 336))
                  {
                    uint64_t result = 1;
                    if (v206) {
                      goto LABEL_432;
                    }
                  }
                  else
                  {
                    uint64_t result = *(unsigned __int8 *)(v214 + 189) != 1;
                    if (v206)
                    {
LABEL_432:
                      uint64_t v215 = *(void *)(v206 + 328);
                      int v216 = v215 == *(void *)(v206 + 336) || *(unsigned __int8 *)(v215 + 189) != 1;
LABEL_439:
                      BOOL v217 = (int)result <= v216;
                      if (result == v216)
                      {
                        if (!v206 || !v213) {
                          goto LABEL_424;
                        }
                        BOOL v217 = *(double *)(v213 + 264) <= *(double *)(v206 + 264);
                      }
                      if (v217) {
                        goto LABEL_424;
                      }
                      *uint64_t v201 = *v211;
                      uint64_t v201 = &k[v200];
                      if (v212 <= 1) {
                        goto LABEL_425;
                      }
                      continue;
                    }
                  }
                }
                else
                {
                  uint64_t result = 0xFFFFFFFFLL;
                  if (v206) {
                    goto LABEL_432;
                  }
                }
                break;
              }
              int v216 = -1;
              goto LABEL_439;
            }
            if (v203) {
              BOOL v210 = v206 == 0;
            }
            else {
              BOOL v210 = 1;
            }
            if (!v210)
            {
              BOOL v209 = *(double *)(v203 + 264) <= *(double *)(v206 + 264);
              goto LABEL_422;
            }
LABEL_426:
            BOOL v38 = v183-- <= 2;
            if (v38) {
              return result;
            }
          }
        }
      }
    }
    unint64_t v16 = v15 >> 1;
    long long v17 = &k[v15 >> 1];
    uint64_t v18 = **a3;
    if ((unint64_t)v14 >= 0x401)
    {
      sub_18E13CCC4(v11, &v11[v15 >> 1], a2 - 1, v18);
      sub_18E13CCC4(v11 + 1, v17 - 1, a2 - 2, **a3);
      sub_18E13CCC4(v11 + 2, &v11[v16 + 1], a2 - 3, **a3);
      uint64_t result = (uint64_t)sub_18E13CCC4(v17 - 1, v17, &v11[v16 + 1], **a3);
      uint64_t v19 = *v11;
      *long long v11 = *v17;
      *long long v17 = v19;
    }
    else
    {
      uint64_t result = (uint64_t)sub_18E13CCC4(&v11[v15 >> 1], v11, a2 - 1, v18);
    }
    --a4;
    uint64_t v20 = *v11;
    uint64_t v21 = **a3;
    if (a5)
    {
      uint64_t v22 = *(void *)(v21 + 16 * v20);
LABEL_30:
      for (uint64_t i = 0; ; ++i)
      {
        uint64_t v32 = v11[i + 1];
        uint64_t v33 = *(void *)(v21 + 16 * v32);
        if (v33)
        {
          uint64_t v34 = *(void *)(v33 + 328);
          if (v34 == *(void *)(v33 + 336))
          {
            int v35 = 1;
            if (!v22)
            {
LABEL_37:
              int v37 = -1;
              goto LABEL_41;
            }
          }
          else
          {
            int v35 = *(unsigned __int8 *)(v34 + 189) != 1;
            if (!v22) {
              goto LABEL_37;
            }
          }
        }
        else
        {
          int v35 = -1;
          if (!v22) {
            goto LABEL_37;
          }
        }
        uint64_t v36 = *(void *)(v22 + 328);
        int v37 = v36 == *(void *)(v22 + 336) || *(unsigned char *)(v36 + 189) != 1;
LABEL_41:
        BOOL v38 = v35 <= v37;
        if (v35 != v37) {
          goto LABEL_45;
        }
        if (!v22 || !v33) {
          break;
        }
        BOOL v38 = *(double *)(v33 + 264) <= *(double *)(v22 + 264);
LABEL_45:
        if (v38) {
          break;
        }
      }
      uint64_t v39 = &v11[i];
      unint64_t v40 = (unint64_t)&v11[i + 1];
      unint64_t j = a2 - 1;
      if (i * 8)
      {
        while (1)
        {
          uint64_t v42 = *(void *)(v21 + 16 * *j);
          if (v42)
          {
            uint64_t v43 = *(void *)(v42 + 328);
            if (v43 == *(void *)(v42 + 336))
            {
              int v44 = 1;
              if (!v22)
              {
LABEL_54:
                int v46 = -1;
                goto LABEL_58;
              }
            }
            else
            {
              int v44 = *(unsigned __int8 *)(v43 + 189) != 1;
              if (!v22) {
                goto LABEL_54;
              }
            }
          }
          else
          {
            int v44 = -1;
            if (!v22) {
              goto LABEL_54;
            }
          }
          uint64_t v45 = *(void *)(v22 + 328);
          int v46 = v45 == *(void *)(v22 + 336) || *(unsigned __int8 *)(v45 + 189) != 1;
LABEL_58:
          BOOL v47 = v44 <= v46;
          if (v44 == v46)
          {
            if (!v22 || !v42) {
              goto LABEL_64;
            }
            BOOL v47 = *(double *)(v42 + 264) <= *(double *)(v22 + 264);
          }
          if (!v47) {
            goto LABEL_88;
          }
LABEL_64:
          --j;
        }
      }
      unint64_t j = a2;
      if (v40 < (unint64_t)a2)
      {
        for (unint64_t j = a2 - 1; ; --j)
        {
          uint64_t v48 = *(void *)(v21 + 16 * *j);
          if (v48)
          {
            uint64_t v49 = *(void *)(v48 + 328);
            if (v49 == *(void *)(v48 + 336))
            {
              int v50 = 1;
              if (!v22)
              {
LABEL_73:
                int v52 = -1;
                goto LABEL_77;
              }
            }
            else
            {
              int v50 = *(unsigned __int8 *)(v49 + 189) != 1;
              if (!v22) {
                goto LABEL_73;
              }
            }
          }
          else
          {
            int v50 = -1;
            if (!v22) {
              goto LABEL_73;
            }
          }
          uint64_t v51 = *(void *)(v22 + 328);
          int v52 = v51 == *(void *)(v22 + 336) || *(unsigned __int8 *)(v51 + 189) != 1;
LABEL_77:
          if (v50 == v52)
          {
            if (v22 && v48)
            {
              if (v40 >= (unint64_t)j || *(double *)(v48 + 264) > *(double *)(v22 + 264)) {
                break;
              }
            }
            else if (v40 >= (unint64_t)j)
            {
              break;
            }
          }
          else if (v40 >= (unint64_t)j || v50 > v52)
          {
            break;
          }
        }
      }
LABEL_88:
      if (v40 >= (unint64_t)j) {
        goto LABEL_124;
      }
      uint64_t v53 = *j;
      uint64_t v54 = (uint64_t *)v40;
      uint64_t v55 = j;
      while (2)
      {
        *v54++ = v53;
        *uint64_t v55 = v32;
        while (2)
        {
          uint64_t v32 = *v54;
          uint64_t v56 = *(void *)(v21 + 16 * *v54);
          if (!v56)
          {
            int v58 = -1;
            if (v22) {
              goto LABEL_94;
            }
            goto LABEL_97;
          }
          uint64_t v57 = *(void *)(v56 + 328);
          if (v57 == *(void *)(v56 + 336))
          {
            int v58 = 1;
            if (v22) {
              goto LABEL_94;
            }
LABEL_97:
            int v60 = -1;
            goto LABEL_101;
          }
          int v58 = *(unsigned __int8 *)(v57 + 189) != 1;
          if (!v22) {
            goto LABEL_97;
          }
LABEL_94:
          uint64_t v59 = *(void *)(v22 + 328);
          int v60 = v59 == *(void *)(v22 + 336) || *(unsigned __int8 *)(v59 + 189) != 1;
LABEL_101:
          BOOL v61 = v58 <= v60;
          if (v58 != v60)
          {
LABEL_105:
            if (v61) {
              goto LABEL_107;
            }
            ++v54;
            continue;
          }
          break;
        }
        if (v22 && v56)
        {
          BOOL v61 = *(double *)(v56 + 264) <= *(double *)(v22 + 264);
          goto LABEL_105;
        }
LABEL_107:
        while (2)
        {
          while (2)
          {
            uint64_t v62 = *--v55;
            uint64_t v53 = v62;
            uint64_t v63 = *(void *)(v21 + 16 * v62);
            if (!v63)
            {
              int v65 = -1;
              if (v22) {
                goto LABEL_110;
              }
              goto LABEL_113;
            }
            uint64_t v64 = *(void *)(v63 + 328);
            if (v64 == *(void *)(v63 + 336))
            {
              int v65 = 1;
              if (v22) {
                goto LABEL_110;
              }
LABEL_113:
              int v67 = -1;
              goto LABEL_117;
            }
            int v65 = *(unsigned __int8 *)(v64 + 189) != 1;
            if (!v22) {
              goto LABEL_113;
            }
LABEL_110:
            uint64_t v66 = *(void *)(v22 + 328);
            int v67 = v66 == *(void *)(v22 + 336) || *(unsigned __int8 *)(v66 + 189) != 1;
LABEL_117:
            BOOL v68 = v65 <= v67;
            if (v65 != v67) {
              goto LABEL_121;
            }
            if (!v22 || !v63) {
              continue;
            }
            break;
          }
          BOOL v68 = *(double *)(v63 + 264) <= *(double *)(v22 + 264);
LABEL_121:
          if (v68) {
            continue;
          }
          break;
        }
        if (v54 < v55) {
          continue;
        }
        break;
      }
      uint64_t v39 = v54 - 1;
LABEL_124:
      if (v39 != v11) {
        *long long v11 = *v39;
      }
      *uint64_t v39 = v20;
      if (v40 < (unint64_t)j)
      {
LABEL_129:
        uint64_t result = sub_18E13B694(v11, v39, a3, a4, a5 & 1);
        a5 = 0;
        int k = v39 + 1;
      }
      else
      {
        BOOL v69 = sub_18E13CFB8(v11, v39, a3);
        int k = v39 + 1;
        uint64_t result = sub_18E13CFB8(v39 + 1, a2, a3);
        if (result)
        {
          a2 = v39;
          if (v69) {
            return result;
          }
          goto LABEL_2;
        }
        if (!v69) {
          goto LABEL_129;
        }
      }
    }
    else
    {
      uint64_t v23 = *(void *)(v21 + 16 * *(v11 - 1));
      if (v23)
      {
        uint64_t v24 = *(void *)(v23 + 328);
        int v25 = v24 == *(void *)(v23 + 336) || *(unsigned __int8 *)(v24 + 189) != 1;
      }
      else
      {
        int v25 = -1;
      }
      uint64_t v22 = *(void *)(v21 + 16 * v20);
      if (v22)
      {
        uint64_t v26 = *(void *)(v22 + 328);
        int v27 = v26 == *(void *)(v22 + 336) || *(unsigned __int8 *)(v26 + 189) != 1;
      }
      else
      {
        int v27 = -1;
      }
      if (v25 == v27)
      {
        if (v23) {
          BOOL v28 = v22 == 0;
        }
        else {
          BOOL v28 = 1;
        }
        if (!v28)
        {
          if (*(double *)(v23 + 264) > *(double *)(v22 + 264)) {
            goto LABEL_30;
          }
          uint64_t v29 = *v12;
          long long v30 = (uint64_t *)(v21 + 16 * *v12);
LABEL_131:
          uint64_t v70 = *(void *)(v22 + 328);
          int v71 = v70 == *(void *)(v22 + 336) || *(unsigned __int8 *)(v70 + 189) != 1;
          goto LABEL_135;
        }
      }
      else if (v25 > v27)
      {
        goto LABEL_30;
      }
      uint64_t v29 = *v12;
      long long v30 = (uint64_t *)(v21 + 16 * *v12);
      if (v22) {
        goto LABEL_131;
      }
      int v71 = -1;
LABEL_135:
      uint64_t v72 = *v30;
      if (v72)
      {
        uint64_t v73 = *(void *)(v72 + 328);
        int v74 = v73 == *(void *)(v72 + 336) || *(unsigned __int8 *)(v73 + 189) != 1;
      }
      else
      {
        int v74 = -1;
      }
      BOOL v75 = v71 <= v74;
      if (v71 != v74) {
        goto LABEL_146;
      }
      if (v22) {
        BOOL v76 = v72 == 0;
      }
      else {
        BOOL v76 = 1;
      }
      if (!v76)
      {
        BOOL v75 = *(double *)(v22 + 264) <= *(double *)(v72 + 264);
LABEL_146:
        if (!v75)
        {
          int k = v11 + 1;
          if (v22)
          {
LABEL_148:
            uint64_t v77 = *(void *)(v22 + 328);
            int v78 = v77 == *(void *)(v22 + 336) || *(unsigned __int8 *)(v77 + 189) != 1;
            goto LABEL_151;
          }
          while (2)
          {
            int v78 = -1;
LABEL_151:
            uint64_t v79 = *(void *)(v21 + 16 * *k);
            if (v79)
            {
              uint64_t v80 = *(void *)(v79 + 328);
              int v81 = v80 == *(void *)(v79 + 336) || *(unsigned __int8 *)(v80 + 189) != 1;
            }
            else
            {
              int v81 = -1;
            }
            BOOL v82 = v78 <= v81;
            if (v78 == v81)
            {
              if (v22 && v79)
              {
                BOOL v82 = *(double *)(v22 + 264) <= *(double *)(v79 + 264);
                goto LABEL_160;
              }
            }
            else
            {
LABEL_160:
              if (!v82) {
                goto LABEL_183;
              }
            }
            ++k;
            if (v22) {
              goto LABEL_148;
            }
            continue;
          }
        }
      }
      for (int k = v11 + 1; k < a2; ++k)
      {
        if (v22)
        {
          uint64_t v83 = *(void *)(v22 + 328);
          int v84 = v83 == *(void *)(v22 + 336) || *(unsigned __int8 *)(v83 + 189) != 1;
        }
        else
        {
          int v84 = -1;
        }
        uint64_t v85 = *(void *)(v21 + 16 * *k);
        if (v85)
        {
          uint64_t v86 = *(void *)(v85 + 328);
          int v87 = v86 == *(void *)(v85 + 336) || *(unsigned __int8 *)(v86 + 189) != 1;
        }
        else
        {
          int v87 = -1;
        }
        BOOL v88 = v84 <= v87;
        if (v84 == v87)
        {
          if (!v22 || !v85) {
            continue;
          }
          BOOL v88 = *(double *)(v22 + 264) <= *(double *)(v85 + 264);
        }
        if (!v88) {
          break;
        }
      }
LABEL_183:
      int m = a2;
      if (k < a2)
      {
        for (m = a2 - 1; !v22; uint64_t v29 = v96)
        {
          int v91 = -1;
LABEL_188:
          uint64_t v92 = *(void *)(v21 + 16 * v29);
          if (v92)
          {
            uint64_t v93 = *(void *)(v92 + 328);
            int v94 = v93 == *(void *)(v92 + 336) || *(unsigned __int8 *)(v93 + 189) != 1;
          }
          else
          {
            int v94 = -1;
          }
          BOOL v95 = v91 <= v94;
          if (v91 == v94)
          {
            if (!v22 || !v92) {
              goto LABEL_200;
            }
            BOOL v95 = *(double *)(v22 + 264) <= *(double *)(v92 + 264);
          }
          if (v95) {
            goto LABEL_200;
          }
          uint64_t v96 = *--m;
        }
        uint64_t v90 = *(void *)(v22 + 328);
        int v91 = v90 == *(void *)(v22 + 336) || *(unsigned __int8 *)(v90 + 189) != 1;
        goto LABEL_188;
      }
LABEL_200:
      if (k >= m) {
        goto LABEL_237;
      }
      uint64_t v97 = *k;
      uint64_t v98 = *m;
      while (2)
      {
        *k++ = v98;
        *int m = v97;
        while (2)
        {
          uint64_t v97 = *k;
          if (v22)
          {
            uint64_t v99 = *(void *)(v22 + 328);
            int v100 = v99 == *(void *)(v22 + 336) || *(unsigned __int8 *)(v99 + 189) != 1;
          }
          else
          {
            int v100 = -1;
          }
          uint64_t v101 = *(void *)(v21 + 16 * v97);
          if (v101)
          {
            uint64_t v102 = *(void *)(v101 + 328);
            int v103 = v102 == *(void *)(v101 + 336) || *(unsigned __int8 *)(v102 + 189) != 1;
          }
          else
          {
            int v103 = -1;
          }
          BOOL v104 = v100 <= v103;
          if (v100 == v103)
          {
            if (v22 && v101)
            {
              BOOL v104 = *(double *)(v22 + 264) <= *(double *)(v101 + 264);
              break;
            }
LABEL_219:
            ++k;
            continue;
          }
          break;
        }
        if (v104) {
          goto LABEL_219;
        }
        do
        {
          uint64_t v105 = *--m;
          uint64_t v98 = v105;
          if (v22)
          {
            uint64_t v106 = *(void *)(v22 + 328);
            int v107 = v106 == *(void *)(v22 + 336) || *(unsigned __int8 *)(v106 + 189) != 1;
          }
          else
          {
            int v107 = -1;
          }
          uint64_t v108 = *(void *)(v21 + 16 * v98);
          if (v108)
          {
            uint64_t v109 = *(void *)(v108 + 328);
            int v110 = v109 == *(void *)(v108 + 336) || *(unsigned __int8 *)(v109 + 189) != 1;
          }
          else
          {
            int v110 = -1;
          }
          BOOL v111 = v107 <= v110;
          if (v107 != v110) {
            continue;
          }
          if (!v22 || !v108) {
            break;
          }
          BOOL v111 = *(double *)(v22 + 264) <= *(double *)(v108 + 264);
        }
        while (!v111);
        if (k < m) {
          continue;
        }
        break;
      }
LABEL_237:
      uint64_t v112 = k - 1;
      BOOL v5 = k - 1 >= v11;
      BOOL v6 = k - 1 == v11;
      if (k - 1 != v11) {
        *long long v11 = *v112;
      }
      a5 = 0;
      *uint64_t v112 = v20;
    }
  }
  if ((a5 & 1) == 0)
  {
    if (k == a2) {
      return result;
    }
    int8x16_t v218 = k + 1;
    if (k + 1 == a2) {
      return result;
    }
    uint64_t v219 = **a3;
    while (1)
    {
      int8x16_t v220 = v11;
      long long v11 = v218;
      uint64_t v221 = v220[1];
      uint64_t v222 = *(void *)(v219 + 16 * v221);
      if (v222)
      {
        uint64_t v223 = *(void *)(v222 + 328);
        int v224 = v223 == *(void *)(v222 + 336) || *(unsigned __int8 *)(v223 + 189) != 1;
      }
      else
      {
        int v224 = -1;
      }
      uint64_t v225 = *v220;
      uint64_t v226 = *(void *)(v219 + 16 * *v220);
      if (v226)
      {
        uint64_t v227 = *(void *)(v226 + 328);
        int v228 = v227 == *(void *)(v226 + 336) || *(unsigned __int8 *)(v227 + 189) != 1;
      }
      else
      {
        int v228 = -1;
      }
      BOOL v229 = v224 <= v228;
      if (v224 == v228)
      {
        if (v222) {
          BOOL v230 = v226 == 0;
        }
        else {
          BOOL v230 = 1;
        }
        if (v230) {
          goto LABEL_483;
        }
        BOOL v229 = *(double *)(v222 + 264) <= *(double *)(v226 + 264);
      }
      if (!v229) {
        break;
      }
LABEL_483:
      int8x16_t v218 = v11 + 1;
      if (v11 + 1 == a2) {
        return result;
      }
    }
    while (1)
    {
      uint64_t v231 = v220;
      uint64_t v232 = v225;
      uint64_t v233 = *--v220;
      uint64_t v225 = v233;
      v220[2] = v232;
      if (v222)
      {
        uint64_t v234 = *(void *)(v222 + 328);
        int v235 = v234 == *(void *)(v222 + 336) || *(unsigned __int8 *)(v234 + 189) != 1;
      }
      else
      {
        int v235 = -1;
      }
      uint64_t v236 = *(void *)(v219 + 16 * v225);
      if (v236)
      {
        uint64_t v237 = *(void *)(v236 + 328);
        int v238 = v237 == *(void *)(v236 + 336) || *(unsigned __int8 *)(v237 + 189) != 1;
      }
      else
      {
        int v238 = -1;
      }
      BOOL v239 = v235 <= v238;
      if (v235 == v238)
      {
        if (!v222 || !v236)
        {
LABEL_482:
          *uint64_t v231 = v221;
          goto LABEL_483;
        }
        BOOL v239 = *(double *)(v222 + 264) <= *(double *)(v236 + 264);
      }
      if (v239) {
        goto LABEL_482;
      }
    }
  }
  if (k == a2) {
    return result;
  }
  uint64_t v121 = k + 1;
  if (k + 1 == a2) {
    return result;
  }
  uint64_t v122 = 0;
  uint64_t v123 = **a3;
  uint64_t v124 = k;
  while (2)
  {
    double v125 = v124;
    uint64_t v124 = v121;
    uint64_t v126 = v125[1];
    uint64_t v127 = *(void *)(v123 + 16 * v126);
    if (v127)
    {
      uint64_t v128 = *(void *)(v127 + 328);
      int v129 = v128 == *(void *)(v127 + 336) || *(unsigned __int8 *)(v128 + 189) != 1;
    }
    else
    {
      int v129 = -1;
    }
    uint64_t v130 = *(void *)(v123 + 16 * *v125);
    if (v130)
    {
      uint64_t v131 = *(void *)(v130 + 328);
      uint64_t result = *(void *)(v130 + 336);
      int v132 = v131 == result || *(unsigned __int8 *)(v131 + 189) != 1;
    }
    else
    {
      int v132 = -1;
    }
    BOOL v133 = v129 <= v132;
    if (v129 == v132)
    {
      if (v127) {
        BOOL v134 = v130 == 0;
      }
      else {
        BOOL v134 = 1;
      }
      if (v134) {
        goto LABEL_299;
      }
      BOOL v133 = *(double *)(v127 + 264) <= *(double *)(v130 + 264);
    }
    if (v133) {
      goto LABEL_299;
    }
    v125[1] = *v125;
    uint64_t v135 = k;
    if (v125 == k) {
      goto LABEL_298;
    }
    uint64_t v136 = v122;
    while (2)
    {
      if (v127)
      {
        uint64_t v137 = *(void *)(v127 + 328);
        int v138 = v137 == *(void *)(v127 + 336) || *(unsigned __int8 *)(v137 + 189) != 1;
      }
      else
      {
        int v138 = -1;
      }
      uint64_t v139 = *(uint64_t *)((char *)k + v136 - 8);
      uint64_t result = *(void *)(v123 + 16 * v139);
      if (result)
      {
        uint64_t v140 = *(void *)(result + 328);
        int v141 = v140 == *(void *)(result + 336) || *(unsigned __int8 *)(v140 + 189) != 1;
      }
      else
      {
        int v141 = -1;
      }
      if (v138 != v141)
      {
        if (v138 <= v141) {
          break;
        }
        goto LABEL_295;
      }
      if (v127 && result)
      {
        if (*(double *)(v127 + 264) <= *(double *)(result + 264))
        {
          uint64_t v135 = (uint64_t *)((char *)k + v136);
          goto LABEL_298;
        }
LABEL_295:
        --v125;
        *(uint64_t *)((char *)k + v136) = v139;
        v136 -= 8;
        if (!v136)
        {
          uint64_t v135 = k;
          goto LABEL_298;
        }
        continue;
      }
      break;
    }
    uint64_t v135 = v125;
LABEL_298:
    uint64_t *v135 = v126;
LABEL_299:
    uint64_t v121 = v124 + 1;
    v122 += 8;
    if (v124 + 1 != a2) {
      continue;
    }
    return result;
  }
}

uint64_t *sub_18E13CA08(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t **a6)
{
  uint64_t result = sub_18E13D304(a1, a2, a3, a4, a6);
  uint64_t v13 = **a6;
  uint64_t v14 = *a4;
  uint64_t v15 = *(void *)(v13 + 16 * *a5);
  if (v15)
  {
    uint64_t v16 = *(void *)(v15 + 328);
    int v17 = v16 == *(void *)(v15 + 336) || *(unsigned __int8 *)(v16 + 189) != 1;
  }
  else
  {
    int v17 = -1;
  }
  uint64_t v18 = *(void *)(v13 + 16 * *a4);
  if (v18)
  {
    uint64_t v19 = *(void *)(v18 + 328);
    int v20 = v19 == *(void *)(v18 + 336) || *(unsigned __int8 *)(v19 + 189) != 1;
  }
  else
  {
    int v20 = -1;
  }
  BOOL v21 = v17 <= v20;
  if (v17 == v20)
  {
    if (v15) {
      BOOL v22 = v18 == 0;
    }
    else {
      BOOL v22 = 1;
    }
    if (v22) {
      return result;
    }
    BOOL v21 = *(double *)(v15 + 264) <= *(double *)(v18 + 264);
  }
  if (v21) {
    return result;
  }
  *a4 = *a5;
  *a5 = v14;
  uint64_t v23 = *a3;
  uint64_t v24 = *(void *)(v13 + 16 * *a4);
  if (v24)
  {
    uint64_t v25 = *(void *)(v24 + 328);
    int v26 = v25 == *(void *)(v24 + 336) || *(unsigned __int8 *)(v25 + 189) != 1;
  }
  else
  {
    int v26 = -1;
  }
  uint64_t v27 = *(void *)(v13 + 16 * *a3);
  if (v27)
  {
    uint64_t v28 = *(void *)(v27 + 328);
    int v29 = v28 == *(void *)(v27 + 336) || *(unsigned __int8 *)(v28 + 189) != 1;
  }
  else
  {
    int v29 = -1;
  }
  BOOL v30 = v26 <= v29;
  if (v26 == v29)
  {
    if (v24) {
      BOOL v31 = v27 == 0;
    }
    else {
      BOOL v31 = 1;
    }
    if (v31) {
      return result;
    }
    BOOL v30 = *(double *)(v24 + 264) <= *(double *)(v27 + 264);
  }
  if (v30) {
    return result;
  }
  *a3 = *a4;
  *a4 = v23;
  uint64_t v32 = *a2;
  uint64_t v33 = *(void *)(v13 + 16 * *a3);
  if (v33)
  {
    uint64_t v34 = *(void *)(v33 + 328);
    int v35 = v34 == *(void *)(v33 + 336) || *(unsigned __int8 *)(v34 + 189) != 1;
  }
  else
  {
    int v35 = -1;
  }
  uint64_t v36 = *(void *)(v13 + 16 * *a2);
  if (v36)
  {
    uint64_t v37 = *(void *)(v36 + 328);
    int v38 = v37 == *(void *)(v36 + 336) || *(unsigned __int8 *)(v37 + 189) != 1;
  }
  else
  {
    int v38 = -1;
  }
  BOOL v39 = v35 <= v38;
  if (v35 == v38)
  {
    if (!v33 || !v36) {
      return result;
    }
    BOOL v39 = *(double *)(v33 + 264) <= *(double *)(v36 + 264);
  }
  if (v39) {
    return result;
  }
  *a2 = *a3;
  *a3 = v32;
  uint64_t v40 = *a1;
  uint64_t v41 = (uint64_t *)(v13 + 16 * *a1);
  uint64_t v42 = *(void *)(v13 + 16 * *a2);
  if (v42)
  {
    uint64_t v43 = *(void *)(v42 + 328);
    int v44 = v43 == *(void *)(v42 + 336) || *(unsigned __int8 *)(v43 + 189) != 1;
  }
  else
  {
    int v44 = -1;
  }
  uint64_t v45 = *v41;
  if (v45)
  {
    uint64_t v46 = *(void *)(v45 + 328);
    int v47 = v46 == *(void *)(v45 + 336) || *(unsigned __int8 *)(v46 + 189) != 1;
  }
  else
  {
    int v47 = -1;
  }
  BOOL v48 = v44 <= v47;
  if (v44 != v47) {
    goto LABEL_64;
  }
  if (v42 && v45)
  {
    BOOL v48 = *(double *)(v42 + 264) <= *(double *)(v45 + 264);
LABEL_64:
    if (!v48)
    {
      *a1 = *a2;
      *a2 = v40;
    }
  }
  return result;
}

uint64_t *sub_18E13CCC4(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *result;
  uint64_t v6 = *(void *)(a4 + 16 * *a2);
  if (v6)
  {
    uint64_t v7 = *(void *)(v6 + 328);
    int v8 = v7 == *(void *)(v6 + 336) || *(unsigned __int8 *)(v7 + 189) != 1;
  }
  else
  {
    int v8 = -1;
  }
  uint64_t v9 = *(void *)(a4 + 16 * *result);
  if (v9)
  {
    uint64_t v10 = *(void *)(v9 + 328);
    int v11 = v10 == *(void *)(v9 + 336) || *(unsigned __int8 *)(v10 + 189) != 1;
  }
  else
  {
    int v11 = -1;
  }
  BOOL v12 = v8 <= v11;
  if (v8 == v11)
  {
    if (v6) {
      BOOL v13 = v9 == 0;
    }
    else {
      BOOL v13 = 1;
    }
    if (v13) {
      goto LABEL_23;
    }
    BOOL v12 = *(double *)(v6 + 264) <= *(double *)(v9 + 264);
  }
  if (!v12)
  {
    uint64_t v14 = *(void *)(a4 + 16 * *a3);
    if (v14)
    {
      uint64_t v15 = *(void *)(v14 + 328);
      if (v15 != *(void *)(v14 + 336))
      {
        int v16 = *(unsigned __int8 *)(v15 + 189) != 1;
        if (v6) {
          goto LABEL_21;
        }
LABEL_44:
        int v18 = -1;
        goto LABEL_48;
      }
      int v16 = 1;
      if (!v6) {
        goto LABEL_44;
      }
    }
    else
    {
      int v16 = -1;
      if (!v6) {
        goto LABEL_44;
      }
    }
LABEL_21:
    uint64_t v17 = *(void *)(v6 + 328);
    int v18 = v17 == *(void *)(v6 + 336) || *(unsigned __int8 *)(v17 + 189) != 1;
LABEL_48:
    BOOL v30 = v16 <= v18;
    if (v16 == v18)
    {
      if (v6) {
        BOOL v31 = v14 == 0;
      }
      else {
        BOOL v31 = 1;
      }
      if (v31) {
        goto LABEL_56;
      }
      BOOL v30 = *(double *)(v14 + 264) <= *(double *)(v6 + 264);
    }
    if (!v30)
    {
      *uint64_t result = *a3;
LABEL_78:
      *a3 = v5;
      return result;
    }
LABEL_56:
    *uint64_t result = v4;
    *a2 = v5;
    uint64_t v32 = *(void *)(a4 + 16 * *a3);
    if (v32)
    {
      uint64_t v33 = *(void *)(v32 + 328);
      if (v33 != *(void *)(v32 + 336))
      {
        int v34 = *(unsigned __int8 *)(v33 + 189) != 1;
        if (v9) {
          goto LABEL_59;
        }
LABEL_63:
        int v36 = -1;
LABEL_72:
        BOOL v40 = v34 <= v36;
        if (v34 != v36)
        {
LABEL_76:
          if (v40) {
            return result;
          }
          *a2 = *a3;
          goto LABEL_78;
        }
        if (v9 && v32)
        {
          BOOL v40 = *(double *)(v32 + 264) <= *(double *)(v9 + 264);
          goto LABEL_76;
        }
        return result;
      }
      int v34 = 1;
      if (!v9) {
        goto LABEL_63;
      }
    }
    else
    {
      int v34 = -1;
      if (!v9) {
        goto LABEL_63;
      }
    }
LABEL_59:
    uint64_t v35 = *(void *)(v9 + 328);
    int v36 = v35 == *(void *)(v9 + 336) || *(unsigned __int8 *)(v35 + 189) != 1;
    goto LABEL_72;
  }
LABEL_23:
  uint64_t v19 = *(void *)(a4 + 16 * *a3);
  if (!v19)
  {
    int v21 = -1;
    if (!v6) {
      goto LABEL_26;
    }
LABEL_28:
    uint64_t v23 = *(void *)(v6 + 328);
    int v22 = v23 == *(void *)(v6 + 336) || *(unsigned __int8 *)(v23 + 189) != 1;
    goto LABEL_33;
  }
  uint64_t v20 = *(void *)(v19 + 328);
  if (v20 == *(void *)(v19 + 336))
  {
    int v21 = 1;
    if (!v6) {
      goto LABEL_26;
    }
    goto LABEL_28;
  }
  int v21 = *(unsigned __int8 *)(v20 + 189) != 1;
  if (v6) {
    goto LABEL_28;
  }
LABEL_26:
  int v22 = -1;
LABEL_33:
  BOOL v24 = v21 <= v22;
  if (v21 == v22)
  {
    if (v6) {
      BOOL v25 = v19 == 0;
    }
    else {
      BOOL v25 = 1;
    }
    if (v25) {
      return result;
    }
    BOOL v24 = *(double *)(v19 + 264) <= *(double *)(v6 + 264);
  }
  if (v24) {
    return result;
  }
  *a2 = *a3;
  *a3 = v4;
  uint64_t v26 = *result;
  uint64_t v27 = *(void *)(a4 + 16 * *a2);
  if (v27)
  {
    uint64_t v28 = *(void *)(v27 + 328);
    int v29 = v28 == *(void *)(v27 + 336) || *(unsigned __int8 *)(v28 + 189) != 1;
  }
  else
  {
    int v29 = -1;
  }
  uint64_t v37 = *(void *)(a4 + 16 * *result);
  if (v37)
  {
    uint64_t v38 = *(void *)(v37 + 328);
    int v39 = v38 == *(void *)(v37 + 336) || *(unsigned __int8 *)(v38 + 189) != 1;
  }
  else
  {
    int v39 = -1;
  }
  BOOL v41 = v29 <= v39;
  if (v29 == v39)
  {
    if (!v27 || !v37) {
      return result;
    }
    BOOL v41 = *(double *)(v27 + 264) <= *(double *)(v37 + 264);
  }
  if (!v41)
  {
    *uint64_t result = *a2;
    *a2 = v26;
  }
  return result;
}

BOOL sub_18E13CFB8(uint64_t *a1, uint64_t *a2, uint64_t **a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v8 = *(a2 - 1);
      uint64_t v9 = **a3;
      uint64_t v10 = *a1;
      int v11 = (uint64_t *)(v9 + 16 * *a1);
      uint64_t v12 = *(void *)(v9 + 16 * v8);
      if (v12)
      {
        uint64_t v13 = *(void *)(v12 + 328);
        int v14 = v13 == *(void *)(v12 + 336) || *(unsigned __int8 *)(v13 + 189) != 1;
      }
      else
      {
        int v14 = -1;
      }
      uint64_t v38 = *v11;
      if (v38)
      {
        uint64_t v39 = *(void *)(v38 + 328);
        int v40 = v39 == *(void *)(v38 + 336) || *(unsigned __int8 *)(v39 + 189) != 1;
      }
      else
      {
        int v40 = -1;
      }
      BOOL v41 = v14 <= v40;
      if (v14 != v40) {
        goto LABEL_66;
      }
      if (v12) {
        BOOL v42 = v38 == 0;
      }
      else {
        BOOL v42 = 1;
      }
      if (!v42)
      {
        BOOL v41 = *(double *)(v12 + 264) <= *(double *)(v38 + 264);
LABEL_66:
        if (!v41)
        {
          *a1 = v8;
          *(a2 - 1) = v10;
        }
      }
      return result;
    case 3:
      sub_18E13CCC4(a1, a1 + 1, a2 - 1, **a3);
      return 1;
    case 4:
      sub_18E13D304(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      sub_18E13CA08(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      uint64_t v15 = a1 + 2;
      sub_18E13CCC4(a1, a1 + 1, a1 + 2, **a3);
      int v16 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v17 = 0;
      int v18 = 0;
      uint64_t v19 = **a3;
      break;
  }
  do
  {
    uint64_t v20 = *v16;
    uint64_t v21 = *(void *)(v19 + 16 * *v16);
    if (v21)
    {
      uint64_t v22 = *(void *)(v21 + 328);
      int v23 = v22 == *(void *)(v21 + 336) || *(unsigned __int8 *)(v22 + 189) != 1;
    }
    else
    {
      int v23 = -1;
    }
    uint64_t v24 = *(void *)(v19 + 16 * *v15);
    if (v24)
    {
      uint64_t v25 = *(void *)(v24 + 328);
      int v26 = v25 == *(void *)(v24 + 336) || *(unsigned __int8 *)(v25 + 189) != 1;
    }
    else
    {
      int v26 = -1;
    }
    BOOL v27 = v23 <= v26;
    if (v23 == v26)
    {
      if (v21) {
        BOOL v28 = v24 == 0;
      }
      else {
        BOOL v28 = 1;
      }
      if (v28) {
        goto LABEL_46;
      }
      BOOL v27 = *(double *)(v21 + 264) <= *(double *)(v24 + 264);
    }
    if (v27) {
      goto LABEL_46;
    }
    *int v16 = *v15;
    int v29 = a1;
    if (v15 == a1) {
      goto LABEL_45;
    }
    uint64_t v30 = v17;
    while (1)
    {
      if (v21)
      {
        uint64_t v31 = *(void *)(v21 + 328);
        int v32 = v31 == *(void *)(v21 + 336) || *(unsigned char *)(v31 + 189) != 1;
      }
      else
      {
        int v32 = -1;
      }
      uint64_t v33 = *(uint64_t *)((char *)a1 + v30 + 8);
      uint64_t v34 = *(void *)(v19 + 16 * v33);
      if (v34)
      {
        uint64_t v35 = *(void *)(v34 + 328);
        int v36 = v35 == *(void *)(v34 + 336) || *(unsigned char *)(v35 + 189) != 1;
      }
      else
      {
        int v36 = -1;
      }
      BOOL v37 = v32 <= v36;
      if (v32 == v36) {
        break;
      }
LABEL_40:
      if (v37)
      {
        int v29 = v15;
        goto LABEL_45;
      }
      --v15;
      *(uint64_t *)((char *)a1 + v30 + 16) = v33;
      v30 -= 8;
      if (v30 == -16)
      {
        int v29 = a1;
        goto LABEL_45;
      }
    }
    if (v21 && v34)
    {
      BOOL v37 = *(double *)(v21 + 264) <= *(double *)(v34 + 264);
      goto LABEL_40;
    }
    int v29 = (uint64_t *)((char *)a1 + v30 + 16);
LABEL_45:
    *int v29 = v20;
    if (++v18 == 8) {
      return v16 + 1 == a2;
    }
LABEL_46:
    uint64_t v15 = v16;
    v17 += 8;
    ++v16;
  }
  while (v16 != a2);
  return 1;
}

uint64_t *sub_18E13D304(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t **a5)
{
  BOOL result = sub_18E13CCC4(a1, a2, a3, **a5);
  uint64_t v11 = **a5;
  uint64_t v12 = *a3;
  uint64_t v13 = *(void *)(v11 + 16 * *a4);
  if (v13)
  {
    uint64_t v14 = *(void *)(v13 + 328);
    int v15 = v14 == *(void *)(v13 + 336) || *(unsigned __int8 *)(v14 + 189) != 1;
  }
  else
  {
    int v15 = -1;
  }
  uint64_t v16 = *(void *)(v11 + 16 * *a3);
  if (v16)
  {
    uint64_t v17 = *(void *)(v16 + 328);
    int v18 = v17 == *(void *)(v16 + 336) || *(unsigned __int8 *)(v17 + 189) != 1;
  }
  else
  {
    int v18 = -1;
  }
  BOOL v19 = v15 <= v18;
  if (v15 == v18)
  {
    if (v13) {
      BOOL v20 = v16 == 0;
    }
    else {
      BOOL v20 = 1;
    }
    if (v20) {
      return result;
    }
    BOOL v19 = *(double *)(v13 + 264) <= *(double *)(v16 + 264);
  }
  if (v19) {
    return result;
  }
  *a3 = *a4;
  *a4 = v12;
  uint64_t v21 = *a2;
  uint64_t v22 = *(void *)(v11 + 16 * *a3);
  if (v22)
  {
    uint64_t v23 = *(void *)(v22 + 328);
    int v24 = v23 == *(void *)(v22 + 336) || *(unsigned __int8 *)(v23 + 189) != 1;
  }
  else
  {
    int v24 = -1;
  }
  uint64_t v25 = *(void *)(v11 + 16 * *a2);
  if (v25)
  {
    uint64_t v26 = *(void *)(v25 + 328);
    int v27 = v26 == *(void *)(v25 + 336) || *(unsigned __int8 *)(v26 + 189) != 1;
  }
  else
  {
    int v27 = -1;
  }
  BOOL v28 = v24 <= v27;
  if (v24 == v27)
  {
    if (v22) {
      BOOL v29 = v25 == 0;
    }
    else {
      BOOL v29 = 1;
    }
    if (v29) {
      return result;
    }
    BOOL v28 = *(double *)(v22 + 264) <= *(double *)(v25 + 264);
  }
  if (v28) {
    return result;
  }
  *a2 = *a3;
  *a3 = v21;
  uint64_t v30 = *a1;
  uint64_t v31 = (uint64_t *)(v11 + 16 * *a1);
  uint64_t v32 = *(void *)(v11 + 16 * *a2);
  if (v32)
  {
    uint64_t v33 = *(void *)(v32 + 328);
    int v34 = v33 == *(void *)(v32 + 336) || *(unsigned __int8 *)(v33 + 189) != 1;
  }
  else
  {
    int v34 = -1;
  }
  uint64_t v35 = *v31;
  if (v35)
  {
    uint64_t v36 = *(void *)(v35 + 328);
    int v37 = v36 == *(void *)(v35 + 336) || *(unsigned __int8 *)(v36 + 189) != 1;
  }
  else
  {
    int v37 = -1;
  }
  BOOL v38 = v34 <= v37;
  if (v34 != v37) {
    goto LABEL_49;
  }
  if (v32 && v35)
  {
    BOOL v38 = *(double *)(v32 + 264) <= *(double *)(v35 + 264);
LABEL_49:
    if (!v38)
    {
      *a1 = *a2;
      *a2 = v30;
    }
  }
  return result;
}

uint64_t *sub_18E13D528(uint64_t a1, void *a2, unsigned __int8 a3, int a4)
{
  uint64_t v6 = *(uint64_t **)(a1 + 8);
  BOOL result = (uint64_t *)(a1 + 8);
  uint64_t v5 = v6;
  if (v6)
  {
    do
    {
      while (1)
      {
        uint64_t v7 = v5;
        unsigned int v8 = *((unsigned __int8 *)v5 + 56);
        int v9 = *((_DWORD *)v7 + 15);
        BOOL v10 = v9 < a4;
        if (v8 != a3) {
          BOOL v10 = v8 < a3;
        }
        if (!v10) {
          break;
        }
        uint64_t v5 = (uint64_t *)*v7;
        BOOL result = v7;
        if (!*v7) {
          goto LABEL_13;
        }
      }
      BOOL v11 = v9 > a4;
      BOOL v12 = v8 == a3;
      BOOL v13 = v8 > a3;
      if (v12) {
        BOOL v13 = v11;
      }
      if (!v13) {
        break;
      }
      BOOL result = v7 + 1;
      uint64_t v5 = (uint64_t *)v7[1];
    }
    while (v5);
  }
  else
  {
    uint64_t v7 = result;
  }
LABEL_13:
  *a2 = v7;
  return result;
}

void sub_18E13D5A4(char *a1)
{
  if (a1)
  {
    sub_18E13D5A4(*(void *)a1);
    sub_18E13D5A4(*((void *)a1 + 1));
    if (a1[55] < 0) {
      operator delete(*((void **)a1 + 4));
    }
    operator delete(a1);
  }
}

void *sub_18E13D600(uint64_t a1, unsigned __int8 a2, int a3, long long **a4)
{
  uint64_t v6 = sub_18E13D528(a1, &v16, a2, a3);
  uint64_t v7 = (void *)*v6;
  if (!*v6)
  {
    unsigned int v8 = v6;
    int v9 = *a4;
    uint64_t v7 = operator new(0x48uLL);
    BOOL v10 = v7 + 4;
    if (*((char *)v9 + 23) < 0)
    {
      sub_18DEDE668(v10, *(void **)v9, *((void *)v9 + 1));
    }
    else
    {
      long long v11 = *v9;
      v7[6] = *((void *)v9 + 2);
      *(_OWORD *)BOOL v10 = v11;
    }
    v7[7] = *((void *)v9 + 3);
    v7[8] = 0;
    uint64_t v12 = v16;
    *uint64_t v7 = 0;
    v7[1] = 0;
    v7[2] = v12;
    *unsigned int v8 = (uint64_t)v7;
    uint64_t v13 = **(void **)a1;
    uint64_t v14 = v7;
    if (v13)
    {
      *(void *)a1 = v13;
      uint64_t v14 = (uint64_t *)*v8;
    }
    sub_18DEEDADC(*(uint64_t **)(a1 + 8), v14);
    ++*(void *)(a1 + 16);
  }
  return v7;
}

void sub_18E13D6D0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t raven::RavenIntegrityEstimator::Configure(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(unsigned char *)a1 = 0;
  uint64_t v8 = *a2;
  if (*a2 && *(unsigned char *)(v8 + 33))
  {
    *(void *)(a1 + 8) = v8;
    operator new();
  }
  LOWORD(v12) = 12;
  LOBYTE(v11) = 4;
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v12, (unsigned __int8 *)&v11, "RavenIntegrityEstimator could not be configured.", a4, a5, a6, a7, a8, v10);
  return 0xFFFFFFFFLL;
}

void sub_18E13E044()
{
}

void sub_18E13E0F0()
{
}

void sub_18E13E1E0()
{
}

void sub_18E13E250()
{
}

void sub_18E13E2D4()
{
}

void sub_18E13E344()
{
}

uint64_t raven::RavenIntegrityEstimator::HandleEvent(raven::RavenIntegrityEstimator *this, const raven::ARSessionStatusEvent *a2)
{
  int v3 = this;
  if (!*((unsigned char *)this + 288)) {
    goto LABEL_28;
  }
  uint64_t v4 = (char *)this + 296;
  uint64_t v5 = (raven::RavenIntegrityEstimator *)(*(uint64_t (**)(char *))(*((void *)this + 37) + 16))((char *)this + 296);
  double v7 = v6;
  double v8 = v6;
  this = (raven::RavenIntegrityEstimator *)(*(uint64_t (**)(const raven::ARSessionStatusEvent *))(*(void *)a2 + 16))(a2);
  v10.n128_f64[0] = v9;
  if (v5) {
    BOOL v11 = 1;
  }
  else {
    BOOL v11 = (*(void *)&v7 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
  }
  if (!v11
    || (!this ? (BOOL v12 = (*(void *)&v9 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000) : (BOOL v12 = 1),
        !v12 || (BOOL v13 = (uint64_t)v5 <= (uint64_t)this, v5 == this)))
  {
    BOOL v13 = v8 <= v9;
  }
  if (v13) {
    goto LABEL_28;
  }
  if (!*((unsigned char *)v3 + 288)) {
    __assert_rtn("operator->", "optional.hpp", 1222, "this->is_initialized()");
  }
  if (*((unsigned __int8 *)v3 + 400) == *((unsigned __int8 *)a2 + 104))
  {
    LOWORD(__p[0]) = 12;
    LOBYTE(v44) = 2;
    uint64_t v14 = (*(uint64_t (**)(uint64_t, __n128))(*(void *)v4 + 16))((uint64_t)v3 + 296, v10);
    double v16 = v15 + (double)v14;
    (*(void (**)(const raven::ARSessionStatusEvent *))(*(void *)a2 + 16))(a2);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, (unsigned __int8 *)&v44, "RavenIntegrityEstimator: Warning, AR Session Status out of order,t_curr,%.3lf,t_new,%.3lf", v17, v18, v19, v20, v21, SLOBYTE(v16));
  }
  else
  {
LABEL_28:
    if (!cnprint::CNPrinter::GetLogLevel(this))
    {
      __int16 v44 = 12;
      unsigned __int8 v43 = 0;
      uint64_t v22 = (*(uint64_t (**)(const raven::ARSessionStatusEvent *))(*(void *)a2 + 16))(a2);
      double v24 = v23 + (double)v22;
      sub_18E13E6B8((uint64_t)a2, __p);
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v44, &v43, "RavenIntegrityEstimator: t,%.3lf Latest AR Session Status %s", v25, v26, v27, v28, v29, SLOBYTE(v24));
      if (v42 < 0) {
        operator delete(__p[0]);
      }
    }
    if (*((unsigned char *)v3 + 288))
    {
      long long v30 = *(_OWORD *)((char *)a2 + 8);
      long long v31 = *(_OWORD *)((char *)a2 + 40);
      *((_OWORD *)v3 + 20) = *(_OWORD *)((char *)a2 + 24);
      *((_OWORD *)v3 + 21) = v31;
      *((_OWORD *)v3 + 19) = v30;
      long long v32 = *(_OWORD *)((char *)a2 + 56);
      long long v33 = *(_OWORD *)((char *)a2 + 72);
      long long v34 = *(_OWORD *)((char *)a2 + 88);
      *((unsigned char *)v3 + 400) = *((unsigned char *)a2 + 104);
      *((_OWORD *)v3 + 23) = v33;
      *((_OWORD *)v3 + 24) = v34;
      *((_OWORD *)v3 + 22) = v32;
    }
    else
    {
      *((void *)v3 + 37) = &unk_1EDD142D0;
      long long v35 = *(_OWORD *)((char *)a2 + 8);
      long long v36 = *(_OWORD *)((char *)a2 + 40);
      *((_OWORD *)v3 + 20) = *(_OWORD *)((char *)a2 + 24);
      *((_OWORD *)v3 + 21) = v36;
      *((_OWORD *)v3 + 19) = v35;
      long long v37 = *(_OWORD *)((char *)a2 + 56);
      long long v38 = *(_OWORD *)((char *)a2 + 72);
      long long v39 = *(_OWORD *)((char *)a2 + 88);
      *((unsigned char *)v3 + 400) = *((unsigned char *)a2 + 104);
      *((_OWORD *)v3 + 23) = v38;
      *((_OWORD *)v3 + 24) = v39;
      *((_OWORD *)v3 + 22) = v37;
      *((unsigned char *)v3 + 288) = 1;
    }
  }
  return 0;
}

void sub_18E13E69C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_18E13E6B8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_18DEDE7B0(a2, off_1E55B9AF8[*(char *)(a1 + 104)]);
}

uint64_t raven::RavenIntegrityEstimator::HandleEvent(raven::RavenIntegrityEstimator *this, const raven::SignalEnvironmentEvent *a2)
{
  if (!*((unsigned char *)this + 680)) {
    goto LABEL_19;
  }
  uint64_t v4 = (char *)this + 688;
  uint64_t v5 = (*(uint64_t (**)(char *))(*((void *)this + 86) + 16))((char *)this + 688);
  double v7 = v6;
  double v8 = v6;
  uint64_t v9 = (*(uint64_t (**)(const raven::SignalEnvironmentEvent *))(*(void *)a2 + 16))(a2);
  v11.n128_f64[0] = v10;
  if (v5) {
    BOOL v12 = 1;
  }
  else {
    BOOL v12 = (*(void *)&v7 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
  }
  if (!v12
    || (!v9 ? (BOOL v13 = (*(void *)&v10 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000) : (BOOL v13 = 1),
        !v13 || (BOOL v14 = v5 <= v9, v5 == v9)))
  {
    BOOL v14 = v8 <= v10;
  }
  if (v14)
  {
    if (*((unsigned char *)this + 680))
    {
      long long v23 = *(_OWORD *)((char *)a2 + 8);
      long long v24 = *(_OWORD *)((char *)a2 + 40);
      *(_OWORD *)((char *)this + 712) = *(_OWORD *)((char *)a2 + 24);
      *(_OWORD *)((char *)this + 728) = v24;
      *(_OWORD *)((char *)this + 696) = v23;
      long long v25 = *(_OWORD *)((char *)a2 + 56);
      long long v26 = *(_OWORD *)((char *)a2 + 72);
      long long v27 = *(_OWORD *)((char *)a2 + 88);
      *((unsigned char *)this + 792) = *((unsigned char *)a2 + 104);
      *(_OWORD *)((char *)this + 760) = v26;
      *(_OWORD *)((char *)this + 776) = v27;
      *(_OWORD *)((char *)this + 744) = v25;
      return 0;
    }
LABEL_19:
    *((void *)this + 86) = &unk_1EDD145D0;
    long long v28 = *(_OWORD *)((char *)a2 + 8);
    long long v29 = *(_OWORD *)((char *)a2 + 40);
    *(_OWORD *)((char *)this + 712) = *(_OWORD *)((char *)a2 + 24);
    *(_OWORD *)((char *)this + 728) = v29;
    *(_OWORD *)((char *)this + 696) = v28;
    long long v30 = *(_OWORD *)((char *)a2 + 56);
    long long v31 = *(_OWORD *)((char *)a2 + 72);
    long long v32 = *(_OWORD *)((char *)a2 + 88);
    *((unsigned char *)this + 792) = *((unsigned char *)a2 + 104);
    *(_OWORD *)((char *)this + 760) = v31;
    *(_OWORD *)((char *)this + 776) = v32;
    *(_OWORD *)((char *)this + 744) = v30;
    *((unsigned char *)this + 680) = 1;
    return 0;
  }
  __int16 v35 = 12;
  unsigned __int8 v34 = 4;
  if (!*((unsigned char *)this + 680)) {
    __assert_rtn("operator->", "optional.hpp", 1222, "this->is_initialized()");
  }
  uint64_t v15 = (*(uint64_t (**)(char *, __n128))(*(void *)v4 + 16))((char *)this + 688, v11);
  double v17 = v16 + (double)v15;
  (*(void (**)(const raven::SignalEnvironmentEvent *))(*(void *)a2 + 16))(a2);
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v35, &v34, "RavenIntegrityEstimator: signal environment data out of order,t_curr,%.3lf,t_new,%.3lf", v18, v19, v20, v21, v22, SLOBYTE(v17));
  return 0;
}

uint64_t raven::RavenIntegrityEstimator::HandleEvent(raven::AccessoryVehicleSpeedChecker **this, const raven::AccessoryVehicleSpeedEvent *a2, raven::AccessoryVehicleSpeedEvent *a3)
{
  return raven::AccessoryVehicleSpeedChecker::HandleEvent(this[196], a2, a3);
}

__n128 raven::RavenIntegrityEstimator::HandleEvent(raven::RavenIntegrityEstimator *this, const raven::ActivityStateEvent *a2, raven::ActivityStateEvent *a3)
{
  if (!raven::ActivityStateChecker::HandleEvent(*((raven::ActivityStateChecker **)this + 195), a2, a3))
  {
    long long v6 = *(_OWORD *)((char *)a3 + 104);
    *(_OWORD *)((char *)this + 88) = *(_OWORD *)((char *)a3 + 120);
    *(_OWORD *)((char *)this + 72) = v6;
    __n128 result = *(__n128 *)((char *)a3 + 136);
    long long v7 = *(_OWORD *)((char *)a3 + 152);
    long long v8 = *(_OWORD *)((char *)a3 + 168);
    *((void *)this + 19) = *((void *)a3 + 23);
    *(_OWORD *)((char *)this + 136) = v8;
    *(_OWORD *)((char *)this + 120) = v7;
    *(__n128 *)((char *)this + 104) = result;
  }
  return result;
}

uint64_t raven::RavenIntegrityEstimator::HandleEvent(raven::AltitudeChangeChecker **this, const raven::AltitudeChangeEvent *a2, raven::AltitudeChangeEvent *a3)
{
  return raven::AltitudeChangeChecker::HandleEvent(this[197], a2, a3);
}

__n128 raven::RavenIntegrityEstimator::HandleEvent(raven::RavenIntegrityEstimator *this, const raven::AltitudeEvent *a2, raven::AltitudeEvent *a3)
{
  if (!raven::AltitudeChecker::HandleEvent(*((raven::AltitudeChecker **)this + 198), a2, a3))
  {
    if (*((unsigned char *)this + 160))
    {
      long long v6 = *(_OWORD *)((char *)a3 + 8);
      long long v7 = *(_OWORD *)((char *)a3 + 40);
      *((_OWORD *)this + 12) = *(_OWORD *)((char *)a3 + 24);
      *((_OWORD *)this + 13) = v7;
      *((_OWORD *)this + 11) = v6;
      __n128 result = *(__n128 *)((char *)a3 + 56);
      long long v8 = *(_OWORD *)((char *)a3 + 72);
      long long v9 = *(_OWORD *)((char *)a3 + 104);
      *((_OWORD *)this + 16) = *(_OWORD *)((char *)a3 + 88);
      *((_OWORD *)this + 17) = v9;
      *((__n128 *)this + 14) = result;
      *((_OWORD *)this + 15) = v8;
    }
    else
    {
      *((void *)this + 21) = &unk_1EDD13730;
      long long v10 = *(_OWORD *)((char *)a3 + 8);
      long long v11 = *(_OWORD *)((char *)a3 + 40);
      *((_OWORD *)this + 12) = *(_OWORD *)((char *)a3 + 24);
      *((_OWORD *)this + 13) = v11;
      *((_OWORD *)this + 11) = v10;
      __n128 result = *(__n128 *)((char *)a3 + 56);
      long long v12 = *(_OWORD *)((char *)a3 + 72);
      long long v13 = *(_OWORD *)((char *)a3 + 104);
      *((_OWORD *)this + 16) = *(_OWORD *)((char *)a3 + 88);
      *((_OWORD *)this + 17) = v13;
      *((__n128 *)this + 14) = result;
      *((_OWORD *)this + 15) = v12;
      *((unsigned char *)this + 160) = 1;
    }
  }
  return result;
}

uint64_t raven::RavenIntegrityEstimator::HandleEvent(raven::AttitudeChangeChecker **this, const raven::AttitudeChangeEvent *a2, raven::AttitudeChangeEvent *a3)
{
  return raven::AttitudeChangeChecker::HandleEvent(this[199], a2, a3);
}

uint64_t raven::RavenIntegrityEstimator::HandleEvent(raven::GNSSPreprocessedMeasurementsChecker **this, const raven::GnssPreprocessedMeasurementsEvent *a2, raven::GnssPreprocessedMeasurementsEvent *a3)
{
  return raven::GNSSPreprocessedMeasurementsChecker::HandleEvent(this[200], a2, a3);
}

uint64_t raven::RavenIntegrityEstimator::HandleEvent(raven::MapVectorChecker **this, const raven::MapVectorEvent *a2, raven::MapVectorEvent *a3)
{
  return raven::MapVectorChecker::HandleEvent(this[201], a2, a3);
}

uint64_t raven::RavenIntegrityEstimator::HandleEvent(raven::MountStateChecker **this, const raven::MountStateEvent *a2, raven::MountStateEvent *a3)
{
  return raven::MountStateChecker::HandleEvent(this[202], a2, a3);
}

uint64_t raven::RavenIntegrityEstimator::HandleEvent(raven::MovingStateChecker **this, const raven::MovingStateEvent *a2, raven::MovingStateEvent *a3)
{
  return raven::MovingStateChecker::HandleEvent(this[203], a2, a3);
}

uint64_t raven::RavenIntegrityEstimator::HandleEvent(raven::OdometerChecker **this, const raven::OdometerEvent *a2, raven::OdometerEvent *a3)
{
  return raven::OdometerChecker::HandleEvent(this[204], a2, a3);
}

uint64_t raven::RavenIntegrityEstimator::HandleEvent(raven::PositionChangeChecker **this, const raven::PositionChangeEvent *a2, raven::PositionChangeEvent *a3)
{
  return raven::PositionChangeChecker::HandleEvent(this[205], a2, a3);
}

uint64_t raven::RavenIntegrityEstimator::HandleEvent(raven::PositionChecker **this, const raven::PositionEvent *a2, raven::PositionEvent *a3)
{
  uint64_t v5 = raven::PositionChecker::HandleEvent(this[206], a2, a3);
  if (v5) {
    return v5;
  }
  unsigned int v7 = *((unsigned __int8 *)a3 + 200);
  if (v7 <= 0xD)
  {
    if (v7 != 4 && v7 != 11) {
      return v5;
    }
    goto LABEL_11;
  }
  if (v7 != 14)
  {
    if (v7 != 16) {
      return v5;
    }
LABEL_11:
    if (*((unsigned char *)a3 + 202))
    {
      if (*((unsigned char *)this + 1168))
      {
        memcpy(this + 148, (char *)a3 + 8, 0x160uLL);
      }
      else
      {
        this[147] = (raven::PositionChecker *)&unk_1EDD137C0;
        memcpy(this + 148, (char *)a3 + 8, 0x160uLL);
        *((unsigned char *)this + 1168) = 1;
      }
      if (*((unsigned char *)a3 + 200) == 16) {
        return 0xFFFFFFFFLL;
      }
    }
    return v5;
  }
  if (*((unsigned char *)this + 288) && *((unsigned char *)this + 400) == 2)
  {
    if (*((unsigned char *)this + 800))
    {
      memcpy(this + 102, (char *)a3 + 8, 0x160uLL);
    }
    else
    {
      this[101] = (raven::PositionChecker *)&unk_1EDD137C0;
      memcpy(this + 102, (char *)a3 + 8, 0x160uLL);
      *((unsigned char *)this + 800) = 1;
    }
  }
  return v5;
}

uint64_t raven::RavenIntegrityEstimator::HandleEvent(raven::SolutionChecker **this, const raven::RavenSolutionEvent *a2, raven::RavenSolutionEvent *a3)
{
  uint64_t v5 = raven::SolutionChecker::HandleEvent(this[207], a2, a3);
  if (!v5)
  {
    unsigned __int8 v10 = *((unsigned char *)a3 + 208);
    if (*((unsigned char *)a3 + 209) == 2)
    {
      long long v6 = this + 4;
      if (!sub_18DFF465C(v6, &v10)) {
        goto LABEL_6;
      }
      unsigned int v7 = sub_18DFF465C(v6, &v10);
      if (!v7) {
        sub_18DEDE720("unordered_map::at: key not found");
      }
      if (sub_18DEE4D28((double *)a3 + 146, (double *)v7 + 149))
      {
LABEL_6:
        long long v11 = &v10;
        long long v8 = sub_18DFF4710((uint64_t)v6, &v10, (uint64_t)&std::piecewise_construct, &v11);
        memcpy(v8 + 4, (char *)a3 + 8, 0x971uLL);
      }
    }
  }
  return v5;
}

uint64_t raven::RavenIntegrityEstimator::HandleEvent(raven::StepCountChecker **this, const raven::StepCountEvent *a2, raven::StepCountEvent *a3)
{
  return raven::StepCountChecker::HandleEvent(this[208], a2, a3);
}

uint64_t raven::RavenIntegrityEstimator::HandleEvent(raven::UserSpeedChecker **this, const raven::UserSpeedEvent *a2, raven::UserSpeedEvent *a3)
{
  return raven::UserSpeedChecker::HandleEvent(this[209], a2, a3);
}

__n128 raven::RavenIntegrityEstimator::HandleEvent(raven::RavenIntegrityEstimator *this, const raven::TunnelBridgeNotificationEvent *a2, raven::TunnelBridgeNotificationEvent *a3)
{
  if (!raven::TunnelBridgeNotificationChecker::HandleEvent(*((raven::TunnelBridgeNotificationChecker **)this + 211), a2, a3))
  {
    v21[0] = (*(uint64_t (**)(raven::TunnelBridgeNotificationEvent *))(*(void *)a3 + 16))(a3);
    v21[1] = v6;
    int8x16_t v20 = *(int8x16_t *)((char *)this + 456);
    uint64_t v8 = CNTimeSpan::operator-((uint64_t)v21, &v20, v20, v7);
    if (*((unsigned char *)this + 674) && !*((unsigned char *)a3 + 226) && v9 + (double)v8 <= 600.0)
    {
      int v10 = *((unsigned __int8 *)this + 1536);
      *(_OWORD *)((char *)this + 1544) = *(_OWORD *)((char *)a3 + 8);
      if (!v10) {
        *((unsigned char *)this + 1536) = 1;
      }
    }
    long long v11 = *(_OWORD *)((char *)a3 + 24);
    *(_OWORD *)((char *)this + 456) = *(_OWORD *)((char *)a3 + 8);
    *(_OWORD *)((char *)this + 472) = v11;
    long long v12 = *(_OWORD *)((char *)a3 + 40);
    long long v13 = *(_OWORD *)((char *)a3 + 56);
    long long v14 = *(_OWORD *)((char *)a3 + 88);
    *(_OWORD *)((char *)this + 520) = *(_OWORD *)((char *)a3 + 72);
    *(_OWORD *)((char *)this + 536) = v14;
    *(_OWORD *)((char *)this + 488) = v12;
    *(_OWORD *)((char *)this + 504) = v13;
    long long v15 = *(_OWORD *)((char *)a3 + 104);
    long long v16 = *(_OWORD *)((char *)a3 + 120);
    long long v17 = *(_OWORD *)((char *)a3 + 152);
    *(_OWORD *)((char *)this + 584) = *(_OWORD *)((char *)a3 + 136);
    *(_OWORD *)((char *)this + 600) = v17;
    *(_OWORD *)((char *)this + 552) = v15;
    *(_OWORD *)((char *)this + 568) = v16;
    __n128 result = *(__n128 *)((char *)a3 + 168);
    long long v18 = *(_OWORD *)((char *)a3 + 184);
    long long v19 = *(_OWORD *)((char *)a3 + 200);
    *(_OWORD *)((char *)this + 660) = *(_OWORD *)((char *)a3 + 212);
    *(_OWORD *)((char *)this + 632) = v18;
    *(_OWORD *)((char *)this + 648) = v19;
    *(__n128 *)((char *)this + 616) = result;
  }
  return result;
}

uint64_t raven::RavenIntegrityEstimator::HandleEvent(raven::TunnelEndPointAssistanceChecker **this, const raven::TunnelEndPointAssistanceEvent *a2, raven::TunnelEndPointAssistanceEvent *a3)
{
  if (raven::TunnelEndPointAssistanceChecker::HandleEvent(this[212], a2, a3)) {
    return 0xFFFFFFFFLL;
  }
  else {
    return 0;
  }
}

uint64_t raven::RavenIntegrityEstimator::HandleEvent(raven::VelocityChecker **this, const raven::VelocityEvent *a2, raven::VelocityEvent *a3)
{
  return raven::VelocityChecker::HandleEvent(this[210], a2, a3);
}

uint64_t raven::RavenIntegrityEstimator::Reset(uint64_t this)
{
  uint64_t v115 = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)this) {
    return this;
  }
  uint64_t v1 = this;
  char v106 = 0;
  if (*(unsigned char *)(this + 288))
  {
    int v107 = &unk_1EDD142D0;
    long long v2 = *(_OWORD *)(this + 384);
    long long v112 = *(_OWORD *)(this + 368);
    long long v113 = v2;
    char v114 = *(unsigned char *)(this + 400);
    long long v3 = *(_OWORD *)(this + 320);
    long long v108 = *(_OWORD *)(this + 304);
    long long v109 = v3;
    long long v4 = *(_OWORD *)(this + 352);
    long long v110 = *(_OWORD *)(this + 336);
    long long v111 = v4;
    char v106 = 1;
  }
  bzero(&v50, 0x608uLL);
  int v55 = 1065353216;
  *((void *)&v56 + 1) = 0x3FF0000000000000;
  LOBYTE(v76) = 0;
  long long v57 = 0u;
  long long v58 = 0u;
  long long v59 = 0u;
  memset(v60, 0, 25);
  *((void *)&v76 + 1) = 0x3FF0000000000000;
  long long v77 = 0uLL;
  uint64_t v78 = 0;
  long long v80 = 0uLL;
  uint64_t v79 = &unk_1EDD14EE0;
  LOBYTE(v81) = 0;
  *((void *)&v81 + 1) = 0;
  *(void *)&long long v82 = 0;
  BYTE8(v82) = 0;
  long long v83 = 0uLL;
  LOBYTE(v84) = 0;
  *((void *)&v84 + 1) = 0;
  *(void *)&long long v85 = 0;
  *((void *)&v85 + 1) = 0x7FF8000000000000;
  long long v86 = 0uLL;
  LOBYTE(v87) = 0;
  *((void *)&v87 + 1) = 0;
  *(void *)&long long v88 = 0;
  BYTE8(v88) = 0;
  long long v89 = 0uLL;
  LOBYTE(v90) = 0;
  *((void *)&v90 + 1) = 0;
  *(void *)&v91[0] = 0;
  *(int64x2_t *)((char *)v91 + 8) = vdupq_n_s64(0x7FF8000000000000uLL);
  *(_OWORD *)((char *)&v91[1] + 8) = *(_OWORD *)((char *)v91 + 8);
  unsigned __int8 v92 = 0;
  unsigned __int8 v102 = 0;
  *(void *)(v1 + 16) = 0;
  *(void *)(v1 + 24) = 0;
  sub_18DFF562C((void *)(v1 + 32));
  uint64_t v5 = v51;
  uint64_t v51 = 0;
  uint64_t v6 = *(void **)(v1 + 32);
  *(void *)(v1 + 32) = v5;
  if (v6) {
    operator delete(v6);
  }
  unint64_t v7 = v52;
  uint64_t v8 = v53;
  *(void *)(v1 + 48) = v53;
  *(void *)(v1 + 40) = v7;
  unint64_t v52 = 0;
  uint64_t v9 = v54;
  *(void *)(v1 + 56) = v54;
  *(_DWORD *)(v1 + 64) = v55;
  if (v9)
  {
    unint64_t v10 = *(void *)(v8 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v10 >= v7) {
        v10 %= v7;
      }
    }
    else
    {
      v10 &= v7 - 1;
    }
    *(void *)(*(void *)(v1 + 32) + 8 * v10) = v1 + 48;
    uint64_t v53 = 0;
    uint64_t v54 = 0;
  }
  long long v11 = v59;
  *(_OWORD *)(v1 + 104) = v58;
  *(_OWORD *)(v1 + 120) = v11;
  *(_OWORD *)(v1 + 136) = v60[0];
  *(void *)(v1 + 152) = *(void *)&v60[1];
  long long v12 = v57;
  *(_OWORD *)(v1 + 72) = v56;
  *(_OWORD *)(v1 + 88) = v12;
  int v13 = BYTE8(v60[1]);
  if (*(unsigned char *)(v1 + 160))
  {
    if (BYTE8(v60[1]))
    {
      long long v14 = v66;
      *(_OWORD *)(v1 + 240) = v65;
      *(_OWORD *)(v1 + 256) = v14;
      *(_OWORD *)(v1 + 272) = v67;
      long long v15 = v62;
      *(_OWORD *)(v1 + 176) = v61;
      *(_OWORD *)(v1 + 192) = v15;
      long long v16 = v64;
      *(_OWORD *)(v1 + 208) = v63;
      *(_OWORD *)(v1 + 224) = v16;
    }
    else
    {
      *(unsigned char *)(v1 + 160) = 0;
    }
  }
  else if (BYTE8(v60[1]))
  {
    *(void *)(v1 + 168) = &unk_1EDD13730;
    long long v17 = v66;
    *(_OWORD *)(v1 + 240) = v65;
    *(_OWORD *)(v1 + 256) = v17;
    *(_OWORD *)(v1 + 272) = v67;
    long long v18 = v62;
    *(_OWORD *)(v1 + 176) = v61;
    *(_OWORD *)(v1 + 192) = v18;
    long long v19 = v64;
    *(_OWORD *)(v1 + 208) = v63;
    *(_OWORD *)(v1 + 224) = v19;
    *(unsigned char *)(v1 + 160) = 1;
  }
  int v20 = v68;
  if (*(unsigned char *)(v1 + 288))
  {
    if (v68)
    {
      long long v21 = v74;
      *(_OWORD *)(v1 + 368) = v73;
      *(_OWORD *)(v1 + 384) = v21;
      *(unsigned char *)(v1 + 400) = v75;
      long long v22 = v70;
      *(_OWORD *)(v1 + 304) = v69;
      *(_OWORD *)(v1 + 320) = v22;
      long long v23 = v72;
      *(_OWORD *)(v1 + 336) = v71;
      *(_OWORD *)(v1 + 352) = v23;
    }
    else
    {
      *(unsigned char *)(v1 + 288) = 0;
    }
  }
  else if (v68)
  {
    *(void *)(v1 + 296) = &unk_1EDD142D0;
    long long v24 = v74;
    *(_OWORD *)(v1 + 368) = v73;
    *(_OWORD *)(v1 + 384) = v24;
    *(unsigned char *)(v1 + 400) = v75;
    long long v25 = v70;
    *(_OWORD *)(v1 + 304) = v69;
    *(_OWORD *)(v1 + 320) = v25;
    long long v26 = v72;
    *(_OWORD *)(v1 + 336) = v71;
    *(_OWORD *)(v1 + 352) = v26;
    *(unsigned char *)(v1 + 288) = 1;
  }
  long long v27 = v77;
  *(_OWORD *)(v1 + 408) = v76;
  *(_OWORD *)(v1 + 424) = v27;
  long long v28 = v91[0];
  *(_OWORD *)(v1 + 616) = v90;
  *(_OWORD *)(v1 + 632) = v28;
  *(_OWORD *)(v1 + 648) = v91[1];
  *(_OWORD *)(v1 + 660) = *(_OWORD *)((char *)&v91[1] + 12);
  long long v29 = v87;
  *(_OWORD *)(v1 + 552) = v86;
  *(_OWORD *)(v1 + 568) = v29;
  long long v30 = v89;
  *(_OWORD *)(v1 + 584) = v88;
  *(_OWORD *)(v1 + 600) = v30;
  long long v31 = v83;
  *(_OWORD *)(v1 + 488) = v82;
  *(_OWORD *)(v1 + 504) = v31;
  long long v32 = v85;
  *(_OWORD *)(v1 + 520) = v84;
  *(_OWORD *)(v1 + 536) = v32;
  long long v33 = v81;
  *(_OWORD *)(v1 + 456) = v80;
  *(void *)(v1 + 440) = v78;
  *(_OWORD *)(v1 + 472) = v33;
  int v34 = v92;
  if (*(unsigned char *)(v1 + 680))
  {
    if (v92)
    {
      *(unsigned char *)(v1 + 792) = v99;
      long long v35 = v98;
      *(_OWORD *)(v1 + 760) = v97;
      *(_OWORD *)(v1 + 776) = v35;
      long long v36 = v94;
      *(_OWORD *)(v1 + 696) = v93;
      *(_OWORD *)(v1 + 712) = v36;
      long long v37 = v96;
      *(_OWORD *)(v1 + 728) = v95;
      *(_OWORD *)(v1 + 744) = v37;
    }
    else
    {
      *(unsigned char *)(v1 + 680) = 0;
    }
  }
  else if (v92)
  {
    *(void *)(v1 + 688) = &unk_1EDD145D0;
    *(unsigned char *)(v1 + 792) = v99;
    long long v38 = v98;
    *(_OWORD *)(v1 + 760) = v97;
    *(_OWORD *)(v1 + 776) = v38;
    long long v39 = v94;
    *(_OWORD *)(v1 + 696) = v93;
    *(_OWORD *)(v1 + 712) = v39;
    long long v40 = v96;
    *(_OWORD *)(v1 + 728) = v95;
    *(_OWORD *)(v1 + 744) = v40;
    *(unsigned char *)(v1 + 680) = 1;
  }
  int v41 = v100;
  if (*(unsigned char *)(v1 + 800))
  {
    if (v100) {
      memcpy((void *)(v1 + 816), v101, 0x160uLL);
    }
    else {
      *(unsigned char *)(v1 + 800) = 0;
    }
  }
  else if (v100)
  {
    *(void *)(v1 + 808) = &unk_1EDD137C0;
    memcpy((void *)(v1 + 816), v101, 0x160uLL);
    *(unsigned char *)(v1 + 800) = 1;
  }
  char v42 = &v104;
  int v43 = v102;
  if (*(unsigned char *)(v1 + 1168))
  {
    if (v102) {
      memcpy((void *)(v1 + 1184), v103, 0x160uLL);
    }
    else {
      *(unsigned char *)(v1 + 1168) = 0;
    }
  }
  else if (v102)
  {
    *(void *)(v1 + 1176) = &unk_1EDD137C0;
    memcpy((void *)(v1 + 1184), v103, 0x160uLL);
    *(unsigned char *)(v1 + 1168) = 1;
  }
  if (*(unsigned char *)(v1 + 1536))
  {
    if (v104) {
      *(_OWORD *)(v1 + 1544) = v105;
    }
    else {
      char v42 = (char *)(v1 + 1536);
    }
    goto LABEL_48;
  }
  if (v104)
  {
    *(_OWORD *)(v1 + 1544) = v105;
    *(unsigned char *)(v1 + 1536) = 1;
LABEL_48:
    *char v42 = 0;
  }
  if (v43) {
    unsigned __int8 v102 = 0;
  }
  if (v41) {
    unsigned __int8 v100 = 0;
  }
  if (v34) {
    unsigned __int8 v92 = 0;
  }
  if (v20) {
    unsigned __int8 v68 = 0;
  }
  if (v13) {
    BYTE8(v60[1]) = 0;
  }
  sub_18E011990((uint64_t)&v51);
  if (*(unsigned char *)(v1 + 288))
  {
    if (v106)
    {
      long long v44 = v113;
      *(_OWORD *)(v1 + 368) = v112;
      *(_OWORD *)(v1 + 384) = v44;
      *(unsigned char *)(v1 + 400) = v114;
      long long v45 = v109;
      *(_OWORD *)(v1 + 304) = v108;
      *(_OWORD *)(v1 + 320) = v45;
      long long v46 = v111;
      *(_OWORD *)(v1 + 336) = v110;
      *(_OWORD *)(v1 + 352) = v46;
    }
    else
    {
      *(unsigned char *)(v1 + 288) = 0;
    }
  }
  else if (v106)
  {
    *(void *)(v1 + 296) = &unk_1EDD142D0;
    long long v47 = v113;
    *(_OWORD *)(v1 + 368) = v112;
    *(_OWORD *)(v1 + 384) = v47;
    *(unsigned char *)(v1 + 400) = v114;
    long long v48 = v109;
    *(_OWORD *)(v1 + 304) = v108;
    *(_OWORD *)(v1 + 320) = v48;
    long long v49 = v111;
    *(_OWORD *)(v1 + 336) = v110;
    *(_OWORD *)(v1 + 352) = v49;
    *(unsigned char *)(v1 + 288) = 1;
  }
  (*(void (**)(void))(**(void **)(v1 + 1560) + 32))(*(void *)(v1 + 1560));
  (*(void (**)(void))(**(void **)(v1 + 1576) + 32))(*(void *)(v1 + 1576));
  (*(void (**)(void))(**(void **)(v1 + 1584) + 32))(*(void *)(v1 + 1584));
  (*(void (**)(void))(**(void **)(v1 + 1592) + 32))(*(void *)(v1 + 1592));
  (*(void (**)(void))(**(void **)(v1 + 1600) + 32))(*(void *)(v1 + 1600));
  (*(void (**)(void))(**(void **)(v1 + 1608) + 32))(*(void *)(v1 + 1608));
  (*(void (**)(void))(**(void **)(v1 + 1616) + 32))(*(void *)(v1 + 1616));
  (*(void (**)(void))(**(void **)(v1 + 1624) + 32))(*(void *)(v1 + 1624));
  (*(void (**)(void))(**(void **)(v1 + 1632) + 32))(*(void *)(v1 + 1632));
  (*(void (**)(void))(**(void **)(v1 + 1640) + 32))(*(void *)(v1 + 1640));
  (*(void (**)(void))(**(void **)(v1 + 1648) + 32))(*(void *)(v1 + 1648));
  (*(void (**)(void))(**(void **)(v1 + 1656) + 32))(*(void *)(v1 + 1656));
  (*(void (**)(void))(**(void **)(v1 + 1688) + 32))(*(void *)(v1 + 1688));
  (*(void (**)(void))(**(void **)(v1 + 1696) + 32))(*(void *)(v1 + 1696));
  return (*(uint64_t (**)(void))(**(void **)(v1 + 1680) + 32))(*(void *)(v1 + 1680));
}

__n128 raven::RavenIntegrityEstimator::UpdateCurrentTime(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1] = *a2;
  return result;
}

uint64_t raven::MapVectorChecker::Configure(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(a1 + 16) = a3;
  uint64_t v8 = *(void *)a3;
  double v9 = *(double *)(a3 + 8);
  double v10 = *(double *)(*(void *)a2 + 2512);
  *(double *)(a1 + 24) = v10;
  if ((*(void *)&v10 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v10 <= 0.0)
  {
    double v12 = v9 + (double)v8;
    __int16 v15 = 12;
    unsigned __int8 v14 = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v15, &v14, "t,%.3lf,Map vector checker, Cannot configure. Invalid estimator_sigma_tolerance: %.2lf", a4, a5, a6, a7, a8, SLOBYTE(v12));
    return 0xFFFFFFFFLL;
  }
  else
  {
    uint64_t v11 = 0;
    *(unsigned char *)(a1 + 8) = 1;
  }
  return v11;
}

BOOL raven::MapVectorChecker::isCoordinateValid(raven::MapVectorChecker *this, double a2, double a3)
{
  if ((*(void *)&a2 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
    return 0;
  }
  BOOL v4 = a2 <= 90.0 && (*(void *)&a3 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000 && a2 >= -90.0;
  if (a3 > 180.0) {
    BOOL v4 = 0;
  }
  return a3 >= -180.0 && v4;
}

uint64_t raven::MapVectorChecker::HandleEvent(raven::MapVectorChecker *this, const raven::MapVectorEvent *a2, raven::MapVectorEvent *a3)
{
  uint64_t v192 = *MEMORY[0x1E4F143B8];
  if (!*((unsigned char *)this + 8))
  {
    LOWORD(v180) = 12;
    LOBYTE(v174) = 4;
    uint64_t v26 = (*(uint64_t (**)(const raven::MapVectorEvent *, const raven::MapVectorEvent *, raven::MapVectorEvent *))(*(void *)a2 + 16))(a2, a2, a3);
    double v153 = v27 + (double)v26;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v180, (unsigned __int8 *)&v174, "t,%.3lf,MapVectorChecker, not configured", v28, v29, v30, v31, v32, SLOBYTE(v153));
    return 0xFFFFFFFFLL;
  }
  double v4 = *((double *)a2 + 25);
  if ((*(void *)&v4 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (double v5 = *((double *)a2 + 26), v5 < -180.0)
    || v5 > 180.0
    || v4 < -90.0
    || v4 > 90.0
    || (*((void *)a2 + 26) & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (cnprint::CNPrinter::GetLogLevel(this) <= 1)
    {
      LOWORD(v180) = 12;
      LOBYTE(v174) = 1;
      uint64_t v19 = (*(uint64_t (**)(const raven::MapVectorEvent *))(*(void *)a2 + 16))(a2);
      double v152 = v20 + (double)v19;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v180, (unsigned __int8 *)&v174, "t,%.3lf,WARNING: Map vector checker, map vector has invalid predicted point coordinates, do not use map vector", v21, v22, v23, v24, v25, SLOBYTE(v152));
    }
    return 0xFFFFFFFFLL;
  }
  double v6 = *((double *)a2 + 28);
  if ((*(void *)&v6 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (double v7 = *((double *)a2 + 29), v7 < -180.0)
    || v7 > 180.0
    || v6 < -90.0
    || v6 > 90.0
    || (*((void *)a2 + 29) & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (cnprint::CNPrinter::GetLogLevel(this) <= 1)
    {
      LOWORD(v180) = 12;
      LOBYTE(v174) = 1;
      uint64_t v34 = (*(uint64_t (**)(const raven::MapVectorEvent *))(*(void *)a2 + 16))(a2);
      double v154 = v35 + (double)v34;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v180, (unsigned __int8 *)&v174, "t,%.3lf,WARNING: Map vector checker, map vector has invalid start point coordinates, do not use map vector", v36, v37, v38, v39, v40, SLOBYTE(v154));
    }
    return 0xFFFFFFFFLL;
  }
  double v8 = *((double *)a2 + 32);
  if ((*(void *)&v8 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v8 < 0.0 || v8 >= 360.0)
  {
    if (cnprint::CNPrinter::GetLogLevel(this) <= 1)
    {
      LOWORD(v180) = 12;
      LOBYTE(v174) = 1;
      uint64_t v41 = (*(uint64_t (**)(const raven::MapVectorEvent *))(*(void *)a2 + 16))(a2);
      double v155 = v42 + (double)v41;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v180, (unsigned __int8 *)&v174, "t,%.3lf,WARNING: Map vector checker, map vector course is not set, too large, or negative, do not use map vector", v43, v44, v45, v46, v47, SLOBYTE(v155));
    }
    return 0xFFFFFFFFLL;
  }
  if ((*((void *)a2 + 33) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || *((double *)a2 + 33) < 0.0)
  {
    if (cnprint::CNPrinter::GetLogLevel(this) <= 1)
    {
      LOWORD(v180) = 12;
      LOBYTE(v174) = 1;
      uint64_t v48 = (*(uint64_t (**)(const raven::MapVectorEvent *))(*(void *)a2 + 16))(a2);
      double v156 = v49 + (double)v48;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v180, (unsigned __int8 *)&v174, "t,%.3lf,WARNING: Map vector checker, map vector course uncertainty is not set, or negative, do not use map vector", v50, v51, v52, v53, v54, SLOBYTE(v156));
    }
    return 0xFFFFFFFFLL;
  }
  if ((*((void *)a2 + 30) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || *((double *)a2 + 30) < 0.0)
  {
    if (cnprint::CNPrinter::GetLogLevel(this) <= 1)
    {
      LOWORD(v180) = 12;
      LOBYTE(v174) = 1;
      uint64_t v55 = (*(uint64_t (**)(const raven::MapVectorEvent *))(*(void *)a2 + 16))(a2);
      double v157 = v56 + (double)v55;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v180, (unsigned __int8 *)&v174, "t,%.3lf,WARNING: Map vector checker, road width is not set or negative, do not use map vector", v57, v58, v59, v60, v61, SLOBYTE(v157));
    }
    return 0xFFFFFFFFLL;
  }
  if ((*((void *)a2 + 31) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || *((double *)a2 + 31) < 0.0)
  {
    if (cnprint::CNPrinter::GetLogLevel(this) <= 1)
    {
      LOWORD(v180) = 12;
      LOBYTE(v174) = 1;
      uint64_t v62 = (*(uint64_t (**)(const raven::MapVectorEvent *))(*(void *)a2 + 16))(a2);
      double v158 = v63 + (double)v62;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v180, (unsigned __int8 *)&v174, "t,%.3lf,WARNING: Map vector checker, road length is not set or negative, do not use map vector", v64, v65, v66, v67, v68, SLOBYTE(v158));
    }
    return 0xFFFFFFFFLL;
  }
  memcpy((char *)a3 + 8, (char *)a2 + 8, 0x10CuLL);
  if (*((unsigned char *)this + 9))
  {
    if (!sub_18DFF465C((void *)(*((void *)this + 2) + 16), (unsigned __int8 *)&unk_18E219FB0))
    {
      if (cnprint::CNPrinter::GetLogLevel(0) <= 1)
      {
        LOWORD(v180) = 12;
        LOBYTE(v174) = 1;
        uint64_t v69 = (*(uint64_t (**)(const raven::MapVectorEvent *))(*(void *)a2 + 16))(a2);
        double v159 = v70 + (double)v69;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v180, (unsigned __int8 *)&v174, "t,%.3lf,WARNING: Map vector checker, no valid fix, thus cannot conduct further check, to be safe, do not use map vector", v71, v72, v73, v74, v75, SLOBYTE(v159));
      }
      return 0xFFFFFFFFLL;
    }
    double v10 = sub_18DFF6184((void *)(*((void *)this + 2) + 16), (unsigned __int8 *)&unk_18E219FB0);
    if (!*((unsigned char *)v10 + 1464))
    {
      if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v10) <= 1)
      {
        LOWORD(v180) = 12;
        LOBYTE(v174) = 1;
        uint64_t v76 = (*(uint64_t (**)(const raven::MapVectorEvent *))(*(void *)a2 + 16))(a2);
        double v160 = v77 + (double)v76;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v180, (unsigned __int8 *)&v174, "t,%.3lf,WARNING: Map vector checker, no valid raven position fix, cannot conduct further check, to be safe, do not use map vector", v78, v79, v80, v81, v82, SLOBYTE(v160));
      }
      return 0xFFFFFFFFLL;
    }
    float64x2_t v189 = *((float64x2_t *)sub_18DFF6184((void *)(*((void *)this + 2) + 16), (unsigned __int8 *)&unk_18E219FB0)
           + 92);
    uint64_t v190 = sub_18DFF6184((void *)(*((void *)this + 2) + 16), (unsigned __int8 *)&unk_18E219FB0)[186];
    uint64_t v11 = (cnprint::CNPrinter *)cnnavigation::ECEFToLLA(&v189, 1, v191.f64, 0, (uint64_t)&v180);
    if (v11)
    {
      if (cnprint::CNPrinter::GetLogLevel(v11) <= 1)
      {
        LOWORD(v180) = 12;
        LOBYTE(v174) = 1;
        uint64_t v12 = (*(uint64_t (**)(const raven::MapVectorEvent *))(*(void *)a2 + 16))(a2);
        double v151 = v13 + (double)v12;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v180, (unsigned __int8 *)&v174, "t,%.3lf,WARNING: Map vector checker, cannot derive receiver lla position, do not use map vector", v14, v15, v16, v17, v18, SLOBYTE(v151));
      }
      return 0xFFFFFFFFLL;
    }
    float64x2_t v191 = vmulq_f64(*((float64x2_t *)a2 + 14), (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL));
    char v181 = 0;
    uint64_t v184 = 0x300000003;
    BOOL v182 = &unk_1EDD18EE8;
    long long v183 = xmmword_18E1F0010;
    uint64_t v185 = &v186;
    uint64_t v180 = &unk_1EDD0AB68;
    cnnavigation::ECEFToENU(&v189, 1, 1, &v191, 0, (uint64_t)&v187, (uint64_t)&v180, COERCE_DOUBLE(0x300000003));
    if (v83)
    {
      if (cnprint::CNPrinter::GetLogLevel(v83) <= 1)
      {
        LOWORD(v174) = 12;
        LOBYTE(v169) = 1;
        uint64_t v84 = (*(uint64_t (**)(const raven::MapVectorEvent *))(*(void *)a2 + 16))(a2);
        double v161 = v85 + (double)v84;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v174, (unsigned __int8 *)&v169, "t,%.3lf,WARNING: Map vector checker, cannot derive ENU of user position wrt segment start point, do not use map vector", v86, v87, v88, v89, v90, SLOBYTE(v161));
      }
      return 0xFFFFFFFFLL;
    }
    __double2 v91 = __sincos_stret(*((double *)a2 + 32) * 0.0174532925);
    double v92 = v188 * v91.__cosval + v187 * v91.__sinval;
    double v93 = *((double *)a2 + 31);
    if (v92 > v93 * 1.5 || v92 < v93 * -0.5)
    {
      uint64_t v102 = *((void *)this + 2);
      uint64_t v169 = (void *)(*(uint64_t (**)(const raven::MapVectorEvent *))(*(void *)a2 + 16))(a2);
      *(void *)&long long v170 = v103;
      v179[0] = (*(uint64_t (**)(uint64_t))(*(void *)(v102 + 432) + 16))(v102 + 432);
      v179[1] = v104;
      uint64_t v107 = CNTimeSpan::operator-((uint64_t)&v169, v179, v105, v106);
      int v174 = (void *)v107;
      *(double *)&long long v175 = v108;
      if (!*(unsigned char *)(v102 + 658)) {
        goto LABEL_60;
      }
      if (v107 < 0 || (*(double *)v109.i64 = v108, v108 < 0.0))
      {
        uint64_t v107 = CNTimeSpan::operator-((double *)&v174, v109, v110);
        v109.i64[0] = v111;
      }
      if (*(double *)v109.i64 + (double)v107 > 5.0)
      {
LABEL_60:
        if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v107) <= 1)
        {
          LOWORD(v169) = 12;
          LOBYTE(v179[0]) = 1;
          uint64_t v112 = (*(uint64_t (**)(const raven::MapVectorEvent *))(*(void *)a2 + 16))(a2);
          double v163 = v113 + (double)v112;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v169, (unsigned __int8 *)v179, "t,%.3lf,WARNING: Map vector checker, along road component of current solution is far away from the given road segment, do not use map vector", v114, v115, v116, v117, v118, SLOBYTE(v163));
        }
        return 0xFFFFFFFFLL;
      }
      if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v107) <= 1)
      {
        LOWORD(v169) = 12;
        LOBYTE(v179[0]) = 1;
        uint64_t v130 = (*(uint64_t (**)(const raven::MapVectorEvent *))(*(void *)a2 + 16))(a2);
        double v165 = v131 + (double)v130;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v169, (unsigned __int8 *)v179, "t,%.3lf,WARNING: Map vector checker, along road component of current solution is far away from the given road segment. However, position is currently inside tunnel. So do not fail the map vector.", v132, v133, v134, v135, v136, SLOBYTE(v165));
      }
    }
    float64x2_t v191 = vmulq_f64(*(float64x2_t *)((char *)a2 + 200), (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL));
    cnnavigation::ECEFToENU(&v189, 1, 1, &v191, 0, (uint64_t)&v187, (uint64_t)&v180, v191.f64[0]);
    if (v94)
    {
      if (cnprint::CNPrinter::GetLogLevel(v94) <= 1)
      {
        LOWORD(v174) = 12;
        LOBYTE(v169) = 1;
        uint64_t v95 = (*(uint64_t (**)(const raven::MapVectorEvent *))(*(void *)a2 + 16))(a2);
        double v162 = v96 + (double)v95;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v174, (unsigned __int8 *)&v169, "t,%.3lf,WARNING: Map vector checker, cannot derive ENU of user position wrt expected position, do not use map vector", v97, v98, v99, v100, v101, SLOBYTE(v162));
      }
      return 0xFFFFFFFFLL;
    }
    double v119 = v187;
    double v120 = v188;
    uint64_t v176 = 0x300000003;
    int v174 = &unk_1EDD18EE8;
    long long v175 = xmmword_18E1F0010;
    uint64_t v177 = (double *)&v178;
    uint64_t v171 = 0x300000003;
    uint64_t v169 = &unk_1EDD18EE8;
    long long v170 = xmmword_18E1F0010;
    uint64_t v172 = &v173;
    uint64_t v121 = sub_18DFF6184((void *)(*((void *)this + 2) + 16), (unsigned __int8 *)&unk_18E219FB0);
    if (sub_18E10D288((uint64_t)(v121 + 146), (uint64_t)&v169))
    {
      BOOL v122 = sub_18DFFBB34((uint64_t)&v180, (uint64_t)&v169, (uint64_t)&v174);
      if (!*((unsigned char *)this + 8)
        || fabs(fabs(v91.__sinval * v120 - v119 * v91.__cosval) / sqrt(*v177 + v177[SHIDWORD(v175) + 1])) > *((double *)this + 3))
      {
        if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v122) <= 1)
        {
          LOWORD(v179[0]) = 12;
          unsigned __int8 v168 = 1;
          uint64_t v144 = (*(uint64_t (**)(const raven::MapVectorEvent *))(*(void *)a2 + 16))(a2);
          double v167 = v145 + (double)v144;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)v179, &v168, "t,%.3lf,WARNING: Map vector checker, IsSigmaSane check failed, do not use map vector", v146, v147, v148, v149, v150, SLOBYTE(v167));
        }
        return 0xFFFFFFFFLL;
      }
      if (!cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v122))
      {
        LOWORD(v179[0]) = 12;
        unsigned __int8 v168 = 0;
        uint64_t v123 = (*(uint64_t (**)(const raven::MapVectorEvent *))(*(void *)a2 + 16))(a2);
        double v164 = v124 + (double)v123;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v179, &v168, "t,%.3lf,Map vector checker, passed", v125, v126, v127, v128, v129, SLOBYTE(v164));
      }
    }
    else
    {
      LOWORD(v179[0]) = 12;
      unsigned __int8 v168 = 2;
      uint64_t v137 = (*(uint64_t (**)(const raven::MapVectorEvent *))(*(void *)a2 + 16))(a2);
      double v166 = v138 + (double)v137;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v179, &v168, "t,%.3lf,WARNING: Map vector checker, difference with current solution not checked, can't get position covariance", v139, v140, v141, v142, v143, SLOBYTE(v166));
    }
  }
  return 0;
}

void sub_18E1404E8()
{
}

uint64_t raven::AltitudeChecker::Configure(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 16) = a3;
  *(void *)(a1 + 24) = *(void *)(*(void *)a2 + 2512);
  *(unsigned char *)(a1 + 8) = 1;
  return 0;
}

uint64_t raven::AltitudeChecker::HandleEvent(raven::AltitudeChecker *this, const raven::AltitudeEvent *a2, raven::AltitudeEvent *a3)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  if (!*((unsigned char *)this + 8))
  {
    LOWORD(v54) = 12;
    LOBYTE(v49) = 4;
    uint64_t v23 = (*(uint64_t (**)(const raven::AltitudeEvent *, const raven::AltitudeEvent *, raven::AltitudeEvent *))(*(void *)a2 + 16))(a2, a2, a3);
    double v42 = v24 + (double)v23;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v54, (unsigned __int8 *)&v49, "t,%.3lf,AltitudeChecker, not configured", v25, v26, v27, v28, v29, SLOBYTE(v42));
    return 0xFFFFFFFFLL;
  }
  if ((*((void *)a2 + 13) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = 0xFFFFFFFFLL;
  if ((*((void *)a2 + 14) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && *((double *)a2 + 14) > 0.0)
  {
    long long v6 = *(_OWORD *)((char *)a2 + 8);
    long long v7 = *(_OWORD *)((char *)a2 + 24);
    *(_OWORD *)((char *)a3 + 40) = *(_OWORD *)((char *)a2 + 40);
    *(_OWORD *)((char *)a3 + 24) = v7;
    *(_OWORD *)((char *)a3 + 8) = v6;
    long long v8 = *(_OWORD *)((char *)a2 + 56);
    long long v9 = *(_OWORD *)((char *)a2 + 72);
    long long v10 = *(_OWORD *)((char *)a2 + 88);
    *(_OWORD *)((char *)a3 + 104) = *(_OWORD *)((char *)a2 + 104);
    *(_OWORD *)((char *)a3 + 88) = v10;
    *(_OWORD *)((char *)a3 + 72) = v9;
    *(_OWORD *)((char *)a3 + 56) = v8;
    if (*((unsigned char *)this + 9))
    {
      uint64_t result = (uint64_t)sub_18DFF465C((void *)(*((void *)this + 2) + 16), (unsigned __int8 *)&unk_18E21A026);
      if (!result) {
        return result;
      }
      uint64_t v11 = sub_18DFF465C((void *)(*((void *)this + 2) + 16), (unsigned __int8 *)&unk_18E21A026);
      if (!v11) {
        goto LABEL_24;
      }
      if (!*((unsigned char *)v11 + 1488)) {
        return 0;
      }
      double v12 = *((double *)a2 + 14);
      double v13 = sub_18DFF465C((void *)(*((void *)this + 2) + 16), (unsigned __int8 *)&unk_18E21A026);
      if (!v13
        || (*(void *)&v62.f64[0] = v13[187],
            (uint64_t v14 = sub_18DFF465C((void *)(*((void *)this + 2) + 16), (unsigned __int8 *)&unk_18E21A026)) == 0)
        || (*(void *)&v62.f64[1] = v14[188],
            (uint64_t v15 = sub_18DFF465C((void *)(*((void *)this + 2) + 16), (unsigned __int8 *)&unk_18E21A026)) == 0))
      {
LABEL_24:
        sub_18DEDE720("unordered_map::at: key not found");
      }
      double v63 = v15[189];
      v60[0] = 0.0;
      v60[1] = 0.0;
      double v61 = 0.0;
      if (cnnavigation::ECEFToLLA(&v62, 1, v60, 1, (uint64_t)v59))
      {
        LOWORD(v54) = 12;
        LOBYTE(v49) = 4;
        uint64_t v16 = (*(uint64_t (**)(const raven::AltitudeEvent *))(*(void *)a2 + 16))(a2);
        double v41 = v17 + (double)v16;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v54, (unsigned __int8 *)&v49, "t,%.3lf,WARNING: Altitude checker, conversion of current position from ECEF to LLA failed", v18, v19, v20, v21, v22, SLOBYTE(v41));
        return 0xFFFFFFFFLL;
      }
      uint64_t v56 = 0x300000003;
      v58[0] = v59[0];
      v58[1] = v59[3];
      v58[6] = v59[2];
      v58[7] = v59[5];
      double v58[3] = v59[1];
      v58[2] = v59[6];
      long long v55 = xmmword_18E1F0010;
      uint64_t v54 = &unk_1EDD18EE8;
      uint64_t v57 = v58;
      v58[4] = v59[4];
      v58[5] = v59[7];
      __n128 v58[8] = v59[8];
      uint64_t v51 = 0x300000003;
      long long v50 = xmmword_18E1F0010;
      uint64_t v30 = (void *)(*((void *)this + 2) + 16);
      double v49 = &unk_1EDD18EE8;
      uint64_t v52 = &v53;
      uint64_t v31 = sub_18DFF6184(v30, (unsigned __int8 *)&unk_18E21A026);
      if (sub_18E10D288((uint64_t)(v31 + 146), (uint64_t)&v49))
      {
        sub_18DFF6360((uint64_t)&v54, (uint64_t)&v49, (uint64_t)v45);
        sub_18DFF63E0((uint64_t)&v54, (uint64_t)v44);
        sub_18DFF6360((uint64_t)v45, (uint64_t)v44, (uint64_t)v46);
        BOOL v32 = fabs(sqrt((*((double *)a2 + 13) - v61)* (*((double *)a2 + 13) - v61)/ (v12 * v12 + *(double *)(v48 + 16 * v47 + 16)))) > *((double *)this + 3);
        if (*((unsigned char *)this + 8)) {
          int v33 = v32;
        }
        else {
          int v33 = 1;
        }
        return (v33 << 31 >> 31);
      }
      v46[0] = 12;
      v45[0] = 2;
      uint64_t v34 = (*(uint64_t (**)(const raven::AltitudeEvent *))(*(void *)a2 + 16))(a2);
      double v43 = v35 + (double)v34;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v46, v45, "t,%.3lf,WARNING: Altitude checker, difference with current solution not checked, can't get position covariance", v36, v37, v38, v39, v40, SLOBYTE(v43));
    }
    return 0;
  }
  return result;
}

void sub_18E14094C()
{
}

double raven::RavenIonosphereEstimatorInitArgs::Fill(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, double a6, double a7, double a8, double a9, double a10, double a11, double a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, float64_t a19)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(double *)(a1 + 16) = a5;
  *(double *)(a1 + 24) = a6;
  *(double *)(a1 + 32) = a7;
  *(double *)(a1 + 40) = a8;
  *(double *)(a1 + 48) = a9;
  *(double *)(a1 + 56) = a11;
  *(double *)(a1 + 64) = a10;
  *(double *)(a1 + 72) = a12;
  *(void *)(a1 + 80) = a17;
  *(void *)(a1 + 88) = a18;
  uint64_t v24 = 0xA0000000ALL;
  uint64_t v22 = &unk_1EDD175C8;
  *(void *)&v20.f64[1] = 0xA00000064;
  long long v23 = xmmword_18E1FD870;
  uint64_t v25 = &v26;
  v20.f64[0] = a19;
  sub_18DFE3240(a4, (uint64_t)&v22, v20);
  *(void *)&double result = sub_18DFE2F24(a1 + 96, (uint64_t)&v22).n128_u64[0];
  return result;
}

void raven::RavenIonosphereEstimator::RavenIonosphereEstimator(raven::RavenIonosphereEstimator *this)
{
  *(void *)this = 0x3FF0000000000000;
  *((_WORD *)this + 4) = 0;
  *((_OWORD *)this + 2) = 0u;
  *((unsigned char *)this + 80) = 0;
  *((unsigned char *)this + 248) = 0;
  *((unsigned char *)this + 448) = 0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((unsigned char *)this + 64) = 0;
  *((void *)this + 58) = 0;
  *((void *)this + 59) = 0;
  *((void *)this + 57) = &unk_1EDD13820;
  *((unsigned char *)this + 480) = 0;
  *((void *)this + 61) = 0;
  *((void *)this + 62) = 0;
  *((unsigned char *)this + 504) = 0;
  *((void *)this + 65) = 0;
  *((void *)this + 64) = 0;
  *((unsigned char *)this + 528) = 0;
  *((void *)this + 68) = 0;
  *((void *)this + 67) = 0;
  *((void *)this + 69) = 0x7FF8000000000000;
  sub_18DFF49CC((uint64_t)this + 560);
  *((void *)this + 376) = 0;
  *((_OWORD *)this + 187) = 0u;
  *((_OWORD *)this + 238) = 0u;
  *((_OWORD *)this + 239) = 0u;
  *((_OWORD *)this + 240) = 0u;
  *((void *)this + 482) = 0;
  *((void *)this + 487) = 0x10000000ALL;
  *((void *)this + 484) = &unk_1EDD17628;
  *((void *)this + 488) = (char *)this + 3912;
  *((void *)this + 502) = 0xA0000000ALL;
  *((void *)this + 499) = &unk_1EDD175C8;
  *((void *)this + 503) = (char *)this + 4032;
  *((void *)this + 607) = 0x10000000ALL;
  *((void *)this + 604) = &unk_1EDD17628;
  *((void *)this + 608) = (char *)this + 4872;
  *((void *)this + 622) = 0x10000000ALL;
  *((void *)this + 619) = &unk_1EDD17628;
  *((void *)this + 623) = (char *)this + 4992;
  *((void *)this + 637) = 0xA0000000ALL;
  *((void *)this + 634) = &unk_1EDD175C8;
  *((void *)this + 638) = (char *)this + 5112;
  *((void *)this + 742) = 0x10000000ALL;
  *((void *)this + 739) = &unk_1EDD17628;
  *((void *)this + 743) = (char *)this + 5952;
  *((int64x2_t *)this + 379) = vdupq_n_s64(0x3E45798EE2308C3AuLL);
  *((_WORD *)this + 3040) = 0;
  *((void *)this + 761) = 0x3FEE666666666666;
  *((void *)this + 762) = 0;
  *((void *)this + 763) = 0;
  *((void *)this + 764) = 0x4197D78400000000;
  *((void *)this + 754) = 0;
  *((unsigned char *)this + 6040) = 0;
  *((void *)this + 485) = 0;
  *((void *)this + 486) = 0;
  *((void *)this + 500) = 0;
  *((void *)this + 501) = 0;
  *((void *)this + 605) = 0;
  *((void *)this + 606) = 0;
  *((void *)this + 621) = 0;
  *((void *)this + 620) = 0;
  *((void *)this + 635) = 0;
  *((void *)this + 636) = 0;
  *((void *)this + 740) = 0;
  *((void *)this + 741) = 0;
  *(_OWORD *)((char *)this + 6120) = 0u;
  *(_OWORD *)((char *)this + 6136) = 0u;
  *(_OWORD *)((char *)this + 6152) = 0u;
  *(_OWORD *)((char *)this + 6168) = 0u;
  *(_OWORD *)((char *)this + 6184) = 0u;
  *(_OWORD *)((char *)this + 6200) = 0u;
  *(_OWORD *)((char *)this + 6216) = 0u;
  *(_OWORD *)((char *)this + 6232) = 0u;
  *((void *)this + 781) = 0;
  *(_OWORD *)((char *)this + 6044) = xmmword_18E1FD610;
  *((void *)this + 483) = &unk_1EDD0A758;
  *((void *)this + 785) = 0xA0000000ALL;
  *((void *)this + 782) = &unk_1EDD175C8;
  *((void *)this + 786) = (char *)this + 6296;
  *((void *)this + 890) = 0x10000000ALL;
  *((void *)this + 887) = &unk_1EDD17628;
  *((void *)this + 891) = (char *)this + 7136;
  *((void *)this + 905) = 0xA0000000ALL;
  *((void *)this + 902) = &unk_1EDD175C8;
  *((void *)this + 906) = (char *)this + 7256;
  *((void *)this + 1007) = 0x100000000;
  *((_DWORD *)this + 2016) = 0x7FFFFFFF;
  *((void *)this + 1009) = 0x3E45798EE2308C3ALL;
  *((void *)this + 1010) = 0x3E45798EE2308C3ALL;
  *((_WORD *)this + 4044) = 0;
  *((void *)this + 1012) = 0x3FEE666666666666;
  *((void *)this + 1014) = 0;
  *((void *)this + 1013) = 0;
  *((void *)this + 1015) = 0x4197D78400000000;
  *((void *)this + 1017) = 0;
  *((void *)this + 1016) = 0;
  *((_WORD *)this + 4072) = 1;
  *((void *)this + 1019) = 0;
  *((void *)this + 784) = 0;
  *((void *)this + 783) = 0;
  *((void *)this + 889) = 0;
  *((void *)this + 888) = 0;
  *((void *)this + 904) = 0;
  *((void *)this + 903) = 0;
  *((void *)this + 1021) = 0x3FE0000000000000;
  *((void *)this + 1022) = 0x3FE0000000000000;
  *((_DWORD *)this + 2046) = 0;
  *((void *)this + 1020) = &unk_1EDD0A6A8;
  __asm { FMOV            V0.2D, #0.5 }
  *((_OWORD *)this + 512) = _Q0;
  *((_OWORD *)this + 513) = xmmword_18E1FD630;
  *((void *)this + 1028) = 0x3FE0000000000000;
  *((_WORD *)this + 4116) = 0;
  *((_OWORD *)this + 516) = 0u;
  *((_OWORD *)this + 515) = 0u;
  *((void *)this + 1034) = (char *)this + 8272;
  *((void *)this + 1035) = (char *)this + 8272;
  *((void *)this + 1036) = 0;
  sub_18E14E1F4((uint64_t)this + 8296);
  *((void *)this + 1221) = 0x100000058;
  *((void *)this + 1218) = &unk_1EDD19C08;
  *(_OWORD *)((char *)this + 9752) = xmmword_18E21A0A0;
  *((void *)this + 1222) = (char *)this + 9784;
  *((void *)this + 1270) = 0x100000058;
  *((void *)this + 1267) = &unk_1EDD19BD8;
  *((_OWORD *)this + 634) = xmmword_18E21A0A0;
  *((void *)this + 1271) = (char *)this + 10176;
  sub_18E14E2F8((uint64_t)this + 10880);
}

void sub_18E1411DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,_Unwind_Exception *exception_object)
{
  sub_18E14C32C(v27);
  *a22 = a21;
  sub_18E1416A4(v26);
  sub_18E00CA08(a24);
  if (*(unsigned char *)(v25 + 448)) {
    *a19 = &unk_1EDD146B8;
  }
  _Unwind_Resume(a1);
}

void raven::RavenIonosphereEstimator::Reset(raven::RavenIonosphereEstimator *this)
{
  LOWORD(v12) = 12;
  unsigned __int8 v14 = 2;
  char v2 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 3816, (uint64_t)this + 32, "Resetting estimator");
  if (*((char *)this + 3839) >= 0) {
    LOBYTE(v8) = v2;
  }
  else {
    uint64_t v8 = *((void *)this + 477);
  }
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v12, &v14, "%s", v3, v4, v5, v6, v7, v8);
  uint64_t v12 = 0x3FE0000000000000;
  sub_18E06E568((uint64_t)this + 8168, (double *)&v12);
  sub_18E147D28((uint64_t)this + 8232);
  *((unsigned char *)this + 9) = 0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  if (*((unsigned char *)this + 448))
  {
    *((void *)this + 31) = &unk_1EDD146B8;
    *((unsigned char *)this + 448) = 0;
  }
  if (*((unsigned char *)this + 80)) {
    *((unsigned char *)this + 80) = 0;
  }
  memset(v13, 0, 88);
  uint64_t v12 = (uint64_t)&unk_1EDD13820;
  *(void *)&v13[88] = 0x7FF8000000000000;
  *((_OWORD *)this + 29) = 0uLL;
  *((_OWORD *)this + 30) = 0uLL;
  long long v9 = *(_OWORD *)&v13[32];
  long long v10 = *(_OWORD *)&v13[48];
  long long v11 = *(_OWORD *)&v13[80];
  *((_OWORD *)this + 33) = *(_OWORD *)&v13[64];
  *((_OWORD *)this + 34) = v11;
  *((_OWORD *)this + 31) = v9;
  *((_OWORD *)this + 32) = v10;
  sub_18DFF49CC((uint64_t)&v12);
  memcpy((char *)this + 568, v13, 0x971uLL);
  bzero((char *)this + 2992, 0x330uLL);
}

uint64_t sub_18E1416A4(uint64_t a1)
{
  *(void *)a1 = &unk_1EDD0A758;
  *(void *)(a1 + 3352) = &unk_1EDD17478;
  *(void *)(a1 + 3232) = &unk_1EDD17478;
  *(void *)(a1 + 2392) = &unk_1EDD17478;
  return sub_18E14DC00(a1);
}

void raven::RavenIonosphereEstimator::AddToAcceptedMeasurementTypeCount(cnprint::CNPrinter *a1, unsigned int **a2)
{
  sub_18DEDE7B0(__p, "Accepted");
  raven::RavenIonosphereEstimator::UpdateMeasurementTypeCount(a1, (uint64_t)__p, a2, (uint64_t)a1 + 3016, (uint64_t)a1 + 3412);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
}

void sub_18E14178C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void raven::RavenIonosphereEstimator::UpdateMeasurementTypeCount(cnprint::CNPrinter *a1, uint64_t a2, unsigned int **a3, uint64_t a4, uint64_t a5)
{
  v71[2] = *MEMORY[0x1E4F143B8];
  char v5 = *a3;
  uint64_t v6 = a3[1];
  if (*a3 != v6)
  {
    do
    {
      ++*(_DWORD *)(a4 + 4 * *v5);
      unsigned int v11 = *v5;
      v5 += 8;
      ++*(_DWORD *)(a5 + 4 * v11);
    }
    while (v5 != v6);
    unsigned int LogLevel = (std::string::size_type *)cnprint::CNPrinter::GetLogLevel(a1);
    if (!LogLevel)
    {
      float64x2_t v62 = a1;
      if (*(char *)(a2 + 23) < 0) {
        unsigned int LogLevel = (std::string::size_type *)sub_18DEDE668(&__dst, *(void **)a2, *(void *)(a2 + 8));
      }
      else {
        std::string __dst = *(std::string *)a2;
      }
      for (uint64_t i = 0; i != 33; ++i)
      {
        unsigned int v14 = *(_DWORD *)(a4 + 4 * i);
        if (v14)
        {
          uint64_t v15 = "UnknownMeas";
          if (i <= 0x20u) {
            uint64_t v15 = off_1E55B9B18[i];
          }
          sub_18DEDE7B0(&__p, v15);
          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = __dst.__r_.__value_.__l.__size_;
          }
          sub_18DF06474((uint64_t)&v64, size + 1);
          if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            double v17 = &v64;
          }
          else {
            double v17 = (std::string *)v64.__r_.__value_.__r.__words[0];
          }
          if (size)
          {
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              p_dst = &__dst;
            }
            else {
              p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
            }
            memmove(v17, p_dst, size);
          }
          *(_WORD *)((char *)&v17->__r_.__value_.__l.__data_ + size) = 44;
          if ((v69 & 0x80u) == 0) {
            p_p = (const std::string::value_type *)&__p;
          }
          else {
            p_p = (const std::string::value_type *)__p;
          }
          if ((v69 & 0x80u) == 0) {
            std::string::size_type v20 = v69;
          }
          else {
            std::string::size_type v20 = v68;
          }
          uint64_t v21 = std::string::append(&v64, p_p, v20);
          long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
          v65.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v22;
          v21->__r_.__value_.__l.__size_ = 0;
          v21->__r_.__value_.__r.__words[2] = 0;
          v21->__r_.__value_.__r.__words[0] = 0;
          long long v23 = std::string::append(&v65, ",", 1uLL);
          long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
          v66.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v24;
          v23->__r_.__value_.__l.__size_ = 0;
          v23->__r_.__value_.__r.__words[2] = 0;
          v23->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v63, v14);
          if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v25 = &v63;
          }
          else {
            uint64_t v25 = (std::string *)v63.__r_.__value_.__r.__words[0];
          }
          if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v26 = HIBYTE(v63.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v26 = v63.__r_.__value_.__l.__size_;
          }
          unsigned int LogLevel = (std::string::size_type *)std::string::append(&v66, (const std::string::value_type *)v25, v26);
          std::string::size_type v27 = *LogLevel;
          v71[0] = LogLevel[1];
          *(void *)((char *)v71 + 7) = *(std::string::size_type *)((char *)LogLevel + 15);
          char v28 = *((unsigned char *)LogLevel + 23);
          LogLevel[1] = 0;
          LogLevel[2] = 0;
          std::string::size_type *LogLevel = 0;
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__dst.__r_.__value_.__l.__data_);
          }
          __dst.__r_.__value_.__r.__words[0] = v27;
          __dst.__r_.__value_.__l.__size_ = v71[0];
          *(std::string::size_type *)((char *)&__dst.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v71 + 7);
          *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v28;
          if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v63.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v66.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v65.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v64.__r_.__value_.__l.__data_);
          }
          if ((char)v69 < 0) {
            operator delete(__p);
          }
        }
      }
      if (!cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)LogLevel))
      {
        LOWORD(__p) = 12;
        v66.__r_.__value_.__s.__data_[0] = 0;
        uint64_t v29 = &__dst;
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          uint64_t v29 = (std::string *)__dst.__r_.__value_.__r.__words[0];
        }
        char v30 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)v62 + 3816, (uint64_t)v62 + 32, "count_per_update,%s", (const char *)v29);
        if (*((char *)v62 + 3839) >= 0) {
          LOBYTE(v36) = v30;
        }
        else {
          uint64_t v36 = *((void *)v62 + 477);
        }
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&__p, (unsigned __int8 *)&v66, "%s", v31, v32, v33, v34, v35, v36);
      }
      uint64_t v37 = std::string::operator=(&__dst, (const std::string *)a2);
      for (uint64_t j = 0; j != 33; ++j)
      {
        unsigned int v39 = *(_DWORD *)(a5 + 4 * j);
        if (v39)
        {
          uint64_t v40 = "UnknownMeas";
          if (j <= 0x20u) {
            uint64_t v40 = off_1E55B9B18[j];
          }
          sub_18DEDE7B0(&__p, v40);
          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v41 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v41 = __dst.__r_.__value_.__l.__size_;
          }
          sub_18DF06474((uint64_t)&v64, v41 + 1);
          if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            double v42 = &v64;
          }
          else {
            double v42 = (std::string *)v64.__r_.__value_.__r.__words[0];
          }
          if (v41)
          {
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              double v43 = &__dst;
            }
            else {
              double v43 = (std::string *)__dst.__r_.__value_.__r.__words[0];
            }
            memmove(v42, v43, v41);
          }
          *(_WORD *)((char *)&v42->__r_.__value_.__l.__data_ + v41) = 44;
          if ((v69 & 0x80u) == 0) {
            uint64_t v44 = (const std::string::value_type *)&__p;
          }
          else {
            uint64_t v44 = (const std::string::value_type *)__p;
          }
          if ((v69 & 0x80u) == 0) {
            std::string::size_type v45 = v69;
          }
          else {
            std::string::size_type v45 = v68;
          }
          uint64_t v46 = std::string::append(&v64, v44, v45);
          long long v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
          v65.__r_.__value_.__r.__words[2] = v46->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v47;
          v46->__r_.__value_.__l.__size_ = 0;
          v46->__r_.__value_.__r.__words[2] = 0;
          v46->__r_.__value_.__r.__words[0] = 0;
          uint64_t v48 = std::string::append(&v65, ",", 1uLL);
          long long v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
          v66.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v49;
          v48->__r_.__value_.__l.__size_ = 0;
          v48->__r_.__value_.__r.__words[2] = 0;
          v48->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v63, v39);
          if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            long long v50 = &v63;
          }
          else {
            long long v50 = (std::string *)v63.__r_.__value_.__r.__words[0];
          }
          if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v51 = HIBYTE(v63.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v51 = v63.__r_.__value_.__l.__size_;
          }
          uint64_t v37 = std::string::append(&v66, (const std::string::value_type *)v50, v51);
          std::string::size_type v52 = v37->__r_.__value_.__r.__words[0];
          v71[0] = v37->__r_.__value_.__l.__size_;
          *(void *)((char *)v71 + 7) = *(std::string::size_type *)((char *)&v37->__r_.__value_.__r.__words[1] + 7);
          char v53 = HIBYTE(v37->__r_.__value_.__r.__words[2]);
          v37->__r_.__value_.__l.__size_ = 0;
          v37->__r_.__value_.__r.__words[2] = 0;
          v37->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__dst.__r_.__value_.__l.__data_);
          }
          __dst.__r_.__value_.__r.__words[0] = v52;
          __dst.__r_.__value_.__l.__size_ = v71[0];
          *(std::string::size_type *)((char *)&__dst.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v71 + 7);
          *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v53;
          if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v63.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v66.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v65.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v64.__r_.__value_.__l.__data_);
          }
          if ((char)v69 < 0) {
            operator delete(__p);
          }
        }
      }
      if (!cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v37))
      {
        LOWORD(__p) = 12;
        v66.__r_.__value_.__s.__data_[0] = 0;
        uint64_t v54 = &__dst;
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          uint64_t v54 = (std::string *)__dst.__r_.__value_.__r.__words[0];
        }
        char v55 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)v62 + 3816, (uint64_t)v62 + 32, "count_cumulative,%s", (const char *)v54);
        if (*((char *)v62 + 3839) >= 0) {
          LOBYTE(v61) = v55;
        }
        else {
          uint64_t v61 = *((void *)v62 + 477);
        }
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&__p, (unsigned __int8 *)&v66, "%s", v56, v57, v58, v59, v60, v61);
      }
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__dst.__r_.__value_.__l.__data_);
      }
    }
  }
}

void sub_18E141D38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
}

void raven::RavenIonosphereEstimator::AddToRejectedMeasurementTypeCount(cnprint::CNPrinter *a1, unsigned int **a2)
{
  sub_18DEDE7B0(__p, "Rejected");
  raven::RavenIonosphereEstimator::UpdateMeasurementTypeCount(a1, (uint64_t)__p, a2, (uint64_t)a1 + 3148, (uint64_t)a1 + 3544);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
}

void sub_18E141E5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void raven::RavenIonosphereEstimator::AddToUnusedMeasurementTypeCount(cnprint::CNPrinter *a1, unsigned int **a2)
{
  sub_18DEDE7B0(__p, "Unused");
  raven::RavenIonosphereEstimator::UpdateMeasurementTypeCount(a1, (uint64_t)__p, a2, (uint64_t)a1 + 3280, (uint64_t)a1 + 3676);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
}

void sub_18E141EDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t raven::RavenIonosphereEstimator::Configure(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 8))
  {
    LOWORD(v46) = 12;
    LOBYTE(v41) = 2;
    unsigned __int8 v3 = cnprint::CNLogFormatter::FormatWarning((cnprint::CNLogFormatter *)(a1 + 3816), "Configure() called more than once");
  }
  else
  {
    long long v10 = *(_OWORD **)a2;
    if (*(void *)a2)
    {
      if (*((unsigned char *)v10 + 33))
      {
        uint64_t v11 = *((void *)v10 + 114);
        uint64_t v12 = *((void *)v10 + 115);
        *(void *)(a1 + 8056) = 0x100000000;
        *(_DWORD *)(a1 + 8064) = 0x7FFFFFFF;
        *(void *)(a1 + 8072) = 0x3E45798EE2308C3ALL;
        *(void *)(a1 + 8080) = 0x3E45798EE2308C3ALL;
        *(_WORD *)(a1 + 8088) = 257;
        *(void *)(a1 + 8096) = v11;
        *(void *)(a1 + 8112) = 0;
        *(void *)(a1 + 8104) = 0;
        *(void *)(a1 + 8120) = v12;
        *(void *)(a1 + 8136) = 0;
        *(void *)(a1 + 8128) = 0;
        *(_WORD *)(a1 + 8144) = 1;
        *(void *)(a1 + 8152) = 0;
        *(void *)(a1 + 6048) = 0x100000000;
        *(_DWORD *)(a1 + 6056) = 0x7FFFFFFF;
        *(int64x2_t *)(a1 + 6064) = vdupq_n_s64(0x3E45798EE2308C3AuLL);
        *(_WORD *)(a1 + 6080) = 257;
        *(void *)(a1 + 6088) = v11;
        *(void *)(a1 + 6104) = 0;
        *(void *)(a1 + 6096) = 0;
        *(void *)(a1 + 6112) = v12;
        *(void *)(a1 + 6120) = 0;
        *(void *)(a1 + 6128) = 0;
        *(unsigned char *)(a1 + 6040) = 0;
        uint64_t v43 = 0x10000000ALL;
        std::string::size_type v41 = &unk_1EDD17628;
        uint64_t v44 = &v45;
        long long v42 = xmmword_18E200CF0;
        sub_18DFE2CC8((uint64_t)&v41, 0.0);
        unsigned int v13 = DWORD2(v42);
        sub_18E14E5D4((uint64_t)&v46, (uint64_t)&v41);
        int32x4_t v14 = vdupq_lane_s32((int32x2_t)(v13 | 0x100000000), 0);
        v14.i32[1] = 1;
        long long v47 = (__int128)v14;
        sub_18DFE2F24(a1 + 3872, (uint64_t)&v46);
        uint64_t v48 = 0xA0000000ALL;
        uint64_t v46 = (uint64_t)&unk_1EDD175C8;
        long long v49 = v50;
        LODWORD(v47) = v13;
        DWORD1(v47) = v13;
        DWORD2(v47) = v13 * v13;
        HIDWORD(v47) = v13;
        sub_18DFE2CC8((uint64_t)&v46, 0.0);
        sub_18DFE2F24(a1 + 3992, (uint64_t)&v46);
        uint64_t v48 = 0x10000000ALL;
        long long v47 = xmmword_18E200CF0;
        uint64_t v46 = (uint64_t)&unk_1EDD17628;
        long long v49 = v50;
        sub_18DFE2B44(a1 + 3992, a1 + 3872, (uint64_t)&v46);
        sub_18DFE2F24(a1 + 4832, (uint64_t)&v46);
        sub_18DFE2F24(a1 + 4952, a1 + 3872);
        sub_18DFE2F24(a1 + 5072, a1 + 3992);
        sub_18DFE2F24(a1 + 5912, a1 + 4832);
        *(void *)(a1 + 6032) = 0x3FF0000000000000;
        *(unsigned char *)(a1 + 6040) = 0;
        *(_DWORD *)(a1 + 6044) = 1;
        uint64_t v46 = 0x3FE0000000000000;
        uint64_t v15 = (cnstatistics *)sub_18E06E568(a1 + 8168, (double *)&v46);
        double v16 = *((double *)v10 + 385);
        if (v16 >= 0.0
          && v16 <= 1.0
          && (double v17 = *((double *)v10 + 386), v17 >= 0.0)
          && v17 <= 1.0
          && (double v18 = *((double *)v10 + 384), v18 >= 0.0))
        {
          *(double *)(a1 + 8208) = v18;
          *(void *)(a1 + 0x2000) = *((void *)v10 + 385);
          *(void *)(a1 + 8200) = *((void *)v10 + 386);
          double v21 = 1.0
              - fabs(cnstatistics::InverseNormal(v15, (1.0 - *((double *)v10 + 114)) * 0.5, 0.0, 1.0))
              / *((double *)v10 + 387);
          BOOL v22 = v21 >= 0.0 && v21 <= 1.0;
          if (v22 && (double v23 = 1.0 - *((double *)v10 + 114), v23 >= 0.0) && v23 <= 1.0)
          {
            uint64_t v24 = 0;
            *(double *)(a1 + 8216) = v21;
            *(double *)(a1 + 8224) = v23;
            do
            {
              uint64_t v25 = *(void *)((char *)v10 + v24 + 2824);
              BOOL v26 = (v25 & 0x7FFFFFFFFFFFFFFFuLL) - 1 < 0xFFFFFFFFFFFFFLL;
              BOOL v27 = ((v25 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 < 0x3FF;
              if (v25 >= 0)
              {
                BOOL v27 = 0;
                BOOL v26 = 0;
              }
              uint64_t v28 = v25 & 0x7FFFFFFFFFFFFFFFLL;
              if (!v28) {
                BOOL v26 = 1;
              }
              BOOL v29 = v28 <= 0x7FF0000000000000;
              int v30 = v28 == 0x7FF0000000000000 || v26;
              if (!v29) {
                int v30 = 1;
              }
              if ((v30 | v27) == 1)
              {
                LOWORD(v46) = 12;
                LOBYTE(v41) = 4;
                unsigned __int8 v3 = cnprint::CNLogFormatter::FormatGeneral((const void **)(a1 + 3816), "Configure() failed, non-positive correlation time constant specified.");
                goto LABEL_13;
              }
              v24 += 8;
            }
            while (v24 != 80);
            uint64_t v31 = *(_OWORD **)a2;
            double v32 = *(double *)(*(void *)a2 + 3104);
            if ((*(void *)&v32 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && v32 <= 90.0 && v32 >= -10.0)
            {
              uint64_t result = 0;
              *(double *)a1 = v32;
              *(_OWORD *)(a1 + 88) = v31[161];
              long long v34 = v31[162];
              long long v35 = v31[163];
              long long v36 = v31[164];
              *(_OWORD *)(a1 + 152) = v31[165];
              *(_OWORD *)(a1 + 136) = v36;
              *(_OWORD *)(a1 + 120) = v35;
              *(_OWORD *)(a1 + 104) = v34;
              uint64_t v37 = (_OWORD *)(*(void *)a2 + 2904);
              long long v38 = *(_OWORD *)(*(void *)a2 + 2920);
              long long v39 = *(_OWORD *)(*(void *)a2 + 2936);
              long long v40 = *(_OWORD *)(*(void *)a2 + 2952);
              *(_OWORD *)(a1 + 232) = *(_OWORD *)(*(void *)a2 + 2968);
              *(_OWORD *)(a1 + 216) = v40;
              *(_OWORD *)(a1 + 200) = v39;
              *(_OWORD *)(a1 + 184) = v38;
              *(_OWORD *)(a1 + 168) = *v37;
              *(void *)(a1 + 3808) = *(void *)a2;
              *(unsigned char *)(a1 + 8) = 1;
              return result;
            }
            LOWORD(v46) = 12;
            LOBYTE(v41) = 4;
            unsigned __int8 v3 = cnprint::CNLogFormatter::FormatGeneral((const void **)(a1 + 3816), "Configure() failed, invalid satellite elevation mask specified,.%.2lf");
          }
          else
          {
            LOWORD(v46) = 12;
            LOBYTE(v41) = 4;
            unsigned __int8 v3 = cnprint::CNLogFormatter::FormatGeneral((const void **)(a1 + 3816), "Configure() failed to set consistency monitor update parameters");
          }
        }
        else
        {
          LOWORD(v46) = 12;
          LOBYTE(v41) = 4;
          unsigned __int8 v3 = cnprint::CNLogFormatter::FormatGeneral((const void **)(a1 + 3816), "Configure() failed to set consistency monitor prediction parameters");
        }
      }
      else
      {
        LOWORD(v46) = 12;
        LOBYTE(v41) = 4;
        unsigned __int8 v3 = cnprint::CNLogFormatter::FormatGeneral((const void **)(a1 + 3816), "Configure() called with uninitialized raven parameters");
      }
    }
    else
    {
      LOWORD(v46) = 12;
      LOBYTE(v41) = 4;
      unsigned __int8 v3 = cnprint::CNLogFormatter::FormatGeneral((const void **)(a1 + 3816), "Configure() called with null raven parameters");
    }
  }
LABEL_13:
  if (*(char *)(a1 + 3839) >= 0) {
    LOBYTE(v19) = v3;
  }
  else {
    uint64_t v19 = *(void *)(a1 + 3816);
  }
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v46, (unsigned __int8 *)&v41, "%s", v4, v5, v6, v7, v8, v19);
  return 0xFFFFFFFFLL;
}

uint64_t raven::RavenIonosphereEstimator::IsConfigured(raven::RavenIonosphereEstimator *this)
{
  return *((unsigned __int8 *)this + 8);
}

uint64_t raven::RavenIonosphereEstimator::GetCurrentEstimatorTime(raven::RavenIonosphereEstimator *this)
{
  return *((void *)this + 4);
}

BOOL raven::RavenIonosphereEstimator::GetEstimatorPredictAndUpdateArguments(uint64_t a1, uint64_t a2, int8x16_t *a3, uint64_t a4, double a5, int8x16_t a6)
{
  int8x16_t v10 = *a3;
  *(int8x16_t *)a4 = *a3;
  uint64_t v11 = CNTimeSpan::operator-((uint64_t)a3, (void *)a2, v10, a6);
  double v13 = v12 + (double)v11;
  *(double *)(a4 + 16) = v13;
  if (v13 < 0.0)
  {
    __int16 v34 = 12;
    unsigned __int8 v33 = 2;
    char v25 = cnprint::CNLogFormatter::FormatGeneral(a1 + 3816, (uint64_t)a3, "Prediction time is negative,dt,%.2lf,current_estimator_time,%.1lf", v13, *(double *)(a2 + 8) + (double)*(uint64_t *)a2);
    if (*(char *)(a1 + 3839) >= 0) {
      LOBYTE(v31) = v25;
    }
    else {
      uint64_t v31 = *(void *)(a1 + 3816);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v34, &v33, "%s", v26, v27, v28, v29, v30, v31);
  }
  else
  {
    int32x4_t v14 = (_OWORD *)(*(void *)(a1 + 3808) + 2744);
    *(_OWORD *)(a4 + 24) = *v14;
    long long v15 = v14[1];
    long long v16 = v14[2];
    long long v17 = v14[3];
    *(_OWORD *)(a4 + 88) = v14[4];
    *(_OWORD *)(a4 + 72) = v17;
    *(_OWORD *)(a4 + 56) = v16;
    *(_OWORD *)(a4 + 40) = v15;
    double v18 = (_OWORD *)(*(void *)(a1 + 3808) + 2824);
    *(_OWORD *)(a4 + 104) = *v18;
    long long v19 = v18[1];
    long long v20 = v18[2];
    long long v21 = v18[3];
    *(_OWORD *)(a4 + 168) = v18[4];
    *(_OWORD *)(a4 + 152) = v21;
    *(_OWORD *)(a4 + 136) = v20;
    *(_OWORD *)(a4 + 120) = v19;
    long long v22 = *(_OWORD *)(a1 + 200);
    long long v23 = *(_OWORD *)(a1 + 216);
    long long v24 = *(_OWORD *)(a1 + 232);
    *(_OWORD *)(a4 + 200) = *(_OWORD *)(a1 + 184);
    *(_OWORD *)(a4 + 248) = v24;
    *(_OWORD *)(a4 + 232) = v23;
    *(_OWORD *)(a4 + 216) = v22;
    *(_OWORD *)(a4 + 184) = *(_OWORD *)(a1 + 168);
  }
  return v13 >= 0.0;
}

double raven::RavenIonosphereEstimator::GetFailureProbability(raven::RavenIonosphereEstimator *this)
{
  uint64_t v1 = 16;
  if (!*((_DWORD *)this + 2046)) {
    uint64_t v1 = 8;
  }
  return *(double *)((char *)this + v1 + 8160);
}

uint64_t raven::RavenIonosphereEstimator::HandleEvent(raven::RavenIonosphereEstimator *this, const raven::GnssPreprocessedMeasurementsEvent *a2, double a3, int8x16_t a4)
{
  if (*((unsigned char *)this + 8))
  {
    if (*((unsigned char *)this + 9))
    {
      v207[0] = 0;
      v207[1] = 0;
      int v208 = 0;
      uint64_t v6 = (uint64_t *)*((void *)a2 + 12);
      uint64_t v7 = (uint64_t *)*((void *)a2 + 13);
      if (v6 == v7) {
        return 0;
      }
      double v119 = (const void **)((char *)this + 3816);
      uint64_t v115 = (char *)this + 8232;
      uint64_t v8 = (char *)v199 + 8;
      long long v9 = &v200;
      int8x16_t v10 = (void *)&v201 + 1;
      int64x2_t v120 = vdupq_n_s64(0x7FF8000000000000uLL);
      while (1)
      {
        uint64_t v11 = *v6;
        if (!*v6) {
          goto LABEL_10;
        }
        unsigned int v12 = *(unsigned __int8 *)(v11 + 24);
        BOOL v13 = v12 > 6;
        int v14 = (1 << v12) & 0x65;
        if (!v13 && v14 != 0) {
          goto LABEL_10;
        }
        uint64_t v17 = *(void *)(v11 + 328);
        uint64_t v16 = *(void *)(v11 + 336);
        if (v16 == v17) {
          goto LABEL_10;
        }
        char v18 = 0;
        char v19 = 0;
        long long v198 = 0uLL;
        LOBYTE(v199[0]) = 0;
        *(void *)uint64_t v8 = 0;
        *((void *)v8 + 1) = 0;
        v8[16] = 0;
        *(void *)long long v9 = 0;
        *((void *)v9 + 1) = 0;
        *((unsigned char *)v9 + 16) = 0;
        *int8x16_t v10 = 0;
        v10[1] = 0;
        *((void *)&v202 + 1) = 0x7FF8000000000000;
        LODWORD(v203) = 0;
        BYTE4(v203) = 0;
        *((void *)&v203 + 1) = 0x7FF8000000000000;
        int8x16_t v20 = (int8x16_t)v120;
        *(int64x2_t *)&v204[8] = v120;
        *(int64x2_t *)&v204[24] = v120;
        *(int64x2_t *)&v204[40] = v120;
        *(_DWORD *)uint64_t v204 = 2143289344;
        *(_DWORD *)&v204[56] = 2143289344;
        v204[60] = 0;
        LOBYTE(v205) = 0;
        BYTE4(v205) = 0;
        BYTE8(v205) = 0;
        WORD6(v205) = 0;
        BYTE14(v205) = 1;
        int64x2_t v206 = v120;
        long long v188 = 0uLL;
        LOBYTE(v189) = 0;
        *((void *)&v189 + 1) = 0;
        *(void *)&long long v190 = 0;
        BYTE8(v190) = 0;
        long long v191 = 0uLL;
        LOBYTE(v192) = 0;
        *((void *)&v192 + 1) = 0;
        *(void *)&long long v193 = 0;
        *((void *)&v193 + 1) = 0x7FF8000000000000;
        LODWORD(v194) = 0;
        BYTE4(v194) = 0;
        *((void *)&v194 + 1) = 0x7FF8000000000000;
        *(int64x2_t *)&v195[8] = v120;
        *(int64x2_t *)&v195[24] = v120;
        *(int64x2_t *)&v195[40] = v120;
        *(_DWORD *)int v195 = 2143289344;
        *(_DWORD *)&v195[56] = 2143289344;
        v195[60] = 0;
        LOBYTE(v196) = 0;
        BYTE4(v196) = 0;
        BYTE8(v196) = 0;
        WORD6(v196) = 0;
        BYTE14(v196) = 1;
        int64x2_t v197 = v120;
        while (*(_DWORD *)(v17 + 96) != 1)
        {
LABEL_23:
          v17 += 208;
          if (v17 == v16) {
            goto LABEL_10;
          }
        }
        unsigned int v21 = *(unsigned __int8 *)(v17 + 100);
        if (v21 <= 8)
        {
          int v22 = 1 << v21;
          if ((v22 & 0xB2) != 0)
          {
            char v18 = 1;
            long long v23 = &v198;
LABEL_20:
            *long long v23 = *(_OWORD *)v17;
            long long v24 = *(_OWORD *)(v17 + 16);
            long long v25 = *(_OWORD *)(v17 + 32);
            long long v26 = *(_OWORD *)(v17 + 64);
            v23[3] = *(_OWORD *)(v17 + 48);
            v23[4] = v26;
            v23[1] = v24;
            double v23[2] = v25;
            long long v27 = *(_OWORD *)(v17 + 80);
            long long v28 = *(_OWORD *)(v17 + 96);
            long long v29 = *(_OWORD *)(v17 + 128);
            v23[7] = *(_OWORD *)(v17 + 112);
            v23[8] = v29;
            v23[5] = v27;
            _DWORD v23[6] = v28;
            int8x16_t v20 = *(int8x16_t *)(v17 + 144);
            a4 = *(int8x16_t *)(v17 + 160);
            long long v30 = *(_OWORD *)(v17 + 192);
            v23[11] = *(_OWORD *)(v17 + 176);
            void v23[12] = v30;
            v23[9] = (__int128)v20;
            v23[10] = (__int128)a4;
            goto LABEL_21;
          }
          if ((v22 & 0x144) != 0)
          {
            char v19 = 1;
            long long v23 = &v188;
            goto LABEL_20;
          }
        }
LABEL_21:
        if ((v19 & 1) == 0 || (v18 & 1) == 0) {
          goto LABEL_23;
        }
        uint64_t v116 = v10;
        uint64_t v117 = v9;
        uint64_t v118 = v8;
        uint64_t v31 = CNTimeSpan::operator-((uint64_t)&v188, &v198, v20, a4);
        uint64_t v127 = (void *)v31;
        double v128 = v32;
        if (v31 < 0 || (*(double *)v33.i64 = v32, v32 < 0.0))
        {
          uint64_t v31 = CNTimeSpan::operator-((double *)&v127, v33, v34);
          v33.i64[0] = v35;
        }
        if (fabs(*(double *)v33.i64 + (double)v31) >= 2.22044605e-16)
        {
          LOWORD(v137.__r_.__value_.__l.__data_) = 12;
          LOBYTE(v183) = 4;
          uint64_t v127 = (void *)(*(uint64_t (**)(const raven::GnssPreprocessedMeasurementsEvent *))(*(void *)a2 + 16))(a2);
          double v128 = v46;
          long long v47 = sub_18E017C64(v11);
          char v48 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)v119, (uint64_t)&v127, "%s,Type,%d,GnssPreprocessedMeasurementsEvent,timestamp mismatch, cannot form measurement,t1,%.3lf,t2,%.3lf", v47, v203, *((double *)&v198 + 1) + (double)(uint64_t)v198, *((double *)&v188 + 1) + (double)(uint64_t)v188);
          if (*((char *)this + 3839) >= 0) {
            LOBYTE(v54) = v48;
          }
          else {
            uint64_t v54 = *((void *)this + 477);
          }
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v137, (unsigned __int8 *)&v183, "%s", v49, v50, v51, v52, v53, v54);
LABEL_53:
          long long v9 = v117;
          uint64_t v8 = v118;
          int8x16_t v10 = v116;
          goto LABEL_10;
        }
        if (*(double *)(v11 + 264) >= *(double *)this * 0.0174532925)
        {
          uint64_t v185 = 0x100000001;
          *(void *)&long long v55 = 0x100000001;
          *((void *)&v55 + 1) = 0x100000001;
          long long v184 = v55;
          long long v183 = &unk_1EDD18048;
          uint64_t v186 = (double *)&v187;
          uint64_t v180 = 0x100000001;
          long long v179 = v55;
          uint64_t v178 = &unk_1EDD18048;
          char v181 = (double *)&v182;
          sub_18DEDE7B0(&v137, "");
          LOBYTE(v138) = 0;
          HIDWORD(v138) = -1;
          long long v139 = 0uLL;
          LOBYTE(v140) = 0;
          *((void *)&v140 + 1) = 0;
          *(void *)&long long v141 = 0;
          BYTE8(v141) = 0;
          long long v142 = 0uLL;
          LOBYTE(v143) = 0;
          *((void *)&v143 + 1) = 0;
          *(void *)&long long v144 = 0;
          *((void *)&v144 + 1) = 0x7FF8000000000000;
          LODWORD(v145) = 0;
          BYTE4(v145) = 0;
          *((void *)&v145 + 1) = 0x7FF8000000000000;
          *(int64x2_t *)&v146[8] = v120;
          *(int64x2_t *)&v146[24] = v120;
          *(int64x2_t *)&unsigned char v146[40] = v120;
          *(_DWORD *)uint64_t v146 = 2143289344;
          *(_DWORD *)&v146[56] = 2143289344;
          v146[60] = 0;
          LOBYTE(v147) = 0;
          BYTE4(v147) = 0;
          BYTE8(v147) = 0;
          WORD6(v147) = 0;
          BYTE14(v147) = 1;
          int64x2_t v148 = v120;
          long long v149 = 0uLL;
          LOBYTE(v150) = 0;
          *((void *)&v150 + 1) = 0;
          *(void *)&long long v151 = 0;
          BYTE8(v151) = 0;
          long long v152 = 0uLL;
          LOBYTE(v153) = 0;
          *((void *)&v153 + 1) = 0;
          *(void *)&long long v154 = 0;
          *((void *)&v154 + 1) = 0x7FF8000000000000;
          LODWORD(v155) = 0;
          BYTE4(v155) = 0;
          *((void *)&v155 + 1) = 0x7FF8000000000000;
          LODWORD(v156) = 2143289344;
          int64x2_t v157 = v120;
          int64x2_t v158 = v120;
          *((void *)&v156 + 1) = 0x7FF8000000000000;
          *(void *)&long long v159 = 0x7FF8000000000000;
          DWORD2(v159) = 2143289344;
          BYTE12(v159) = 0;
          LOBYTE(v160) = 0;
          BYTE4(v160) = 0;
          BYTE8(v160) = 0;
          WORD6(v160) = 0;
          BYTE14(v160) = 1;
          int64x2_t v161 = v120;
          double v162 = &unk_1EDD0AE58;
          uint64_t v56 = (cnprint::CNPrinter *)sub_18DEDE7B0(&__p, "");
          LOBYTE(v164) = 0;
          HIDWORD(v164) = -1;
          long long v165 = 0u;
          long long v166 = 0u;
          long long v167 = 0u;
          long long v168 = 0u;
          long long v169 = 0u;
          long long v170 = 0u;
          long long v171 = 0u;
          long long v172 = 0u;
          long long v173 = 0u;
          long long v174 = 0u;
          long long v175 = 0u;
          long long v176 = 0u;
          uint64_t v177 = 0;
          if (v203 == v194)
          {
            if (BYTE4(v203) == BYTE4(v194))
            {
              LOWORD(v127) = 12;
              LOBYTE(v121) = 4;
              cnprint::CNLogFormatter::FormatGeneral(v119, "GetGeometryFreeGNSSObservationArgs, gnss_band_ is identical between the two observables,obs1.gnss_band_,%d,obs2.gnss_band_,%d", BYTE4(v203), BYTE4(v203));
              LOBYTE(v62) = (_BYTE)v119;
              if (*((char *)this + 3839) < 0) {
                uint64_t v62 = *((void *)this + 477);
              }
              goto LABEL_46;
            }
            long long v113 = *((_OWORD *)this + 127);
            uint64_t v71 = *((void *)this + 256);
            *(void *)&long long v72 = 0x100000001;
            *((void *)&v72 + 1) = 0x100000001;
            long long v184 = v72;
            long long v179 = v72;
            double *v186 = *(double *)&v195[8]
                  + *(double *)&v195[16]
                  - *(double *)&v195[24]
                  - (*(double *)&v204[8]
                   + *(double *)&v204[16]
                   - *(double *)&v204[24]);
            *char v181 = (float)(*(float *)&v195[56] * *(float *)&v195[56])
                  + (float)(*(float *)&v204[56] * *(float *)&v204[56]);
            if (!cnprint::CNPrinter::GetLogLevel(v56))
            {
              LOWORD(v127) = 12;
              LOBYTE(v121) = 0;
              cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v127, (unsigned __int8 *)&v121, "GetGeometryFreeGNSSObservationArgs,z,%.5lf,R,%.5f", v73, v74, v75, v76, v77, *(void *)v186);
            }
            long long v159 = *(_OWORD *)&v195[48];
            long long v160 = v196;
            int64x2_t v161 = v197;
            long long v155 = v194;
            long long v156 = *(_OWORD *)v195;
            int64x2_t v157 = *(int64x2_t *)&v195[16];
            int64x2_t v158 = *(int64x2_t *)&v195[32];
            long long v151 = v190;
            long long v152 = v191;
            long long v153 = v192;
            long long v154 = v193;
            long long v149 = v188;
            long long v150 = v189;
            *(_OWORD *)&v146[48] = *(_OWORD *)&v204[48];
            long long v147 = v205;
            int64x2_t v148 = v206;
            long long v145 = v203;
            *(_OWORD *)uint64_t v146 = *(_OWORD *)v204;
            *(_OWORD *)&v146[16] = *(_OWORD *)&v204[16];
            *(_OWORD *)&v146[32] = *(_OWORD *)&v204[32];
            long long v141 = v199[1];
            long long v142 = v200;
            long long v143 = v201;
            long long v144 = v202;
            long long v139 = v198;
            long long v140 = v199[0];
            std::string::operator=(&v137, (const std::string *)v11);
            uint64_t v138 = *(void *)(v11 + 24);
            std::string::operator=(&__p, (const std::string *)(v11 + 40));
            uint64_t v164 = *(void *)(v11 + 64);
            long long v78 = *(_OWORD *)(v11 + 72);
            long long v79 = *(_OWORD *)(v11 + 104);
            long long v166 = *(_OWORD *)(v11 + 88);
            long long v167 = v79;
            long long v165 = v78;
            long long v80 = *(_OWORD *)(v11 + 120);
            long long v81 = *(_OWORD *)(v11 + 136);
            long long v82 = *(_OWORD *)(v11 + 168);
            long long v170 = *(_OWORD *)(v11 + 152);
            long long v171 = v82;
            long long v168 = v80;
            long long v169 = v81;
            long long v83 = *(_OWORD *)(v11 + 184);
            long long v84 = *(_OWORD *)(v11 + 200);
            long long v85 = *(_OWORD *)(v11 + 232);
            long long v174 = *(_OWORD *)(v11 + 216);
            long long v175 = v85;
            long long v172 = v83;
            long long v173 = v84;
            long long v176 = v113;
            uint64_t v177 = v71;
            sub_18E14DEF4((uint64_t)&v127, (long long *)&v137);
            long long v131 = v198;
            int v114 = LOBYTE(v128);
            uint64_t v86 = (char *)sub_18E017C64(v11);
            sub_18DEDE7B0(v125, v86);
            sub_18E03F90C((uint64_t)&v127, v114, (long long *)v125);
            if (v126 < 0) {
              operator delete(v125[0]);
            }
            uint64_t v87 = (cnprint::CNPrinter *)sub_18E144030((uint64_t)v115, (double *)&v198, (uint64_t)&v183, (uint64_t)&v178, (uint64_t)&v127);
            if (v87)
            {
              __int16 v124 = 12;
              unsigned __int8 v123 = 4;
              uint64_t v121 = (*(uint64_t (**)(const raven::GnssPreprocessedMeasurementsEvent *))(*(void *)a2 + 16))(a2);
              uint64_t v122 = v88;
              uint64_t v89 = sub_18E017C64(v11);
              cnprint::CNLogFormatter::FormatGeneral((uint64_t)v119, (uint64_t)&v121, "Could not add measurement - PSR for %s", v89);
              LOBYTE(v95) = (_BYTE)v119;
              if (*((char *)this + 3839) < 0) {
                uint64_t v95 = *((void *)this + 477);
              }
              cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v124, &v123, "%s", v90, v91, v92, v93, v94, v95);
            }
            else
            {
              if (!cnprint::CNPrinter::GetLogLevel(v87))
              {
                __int16 v124 = 12;
                unsigned __int8 v123 = 0;
                uint64_t v121 = (*(uint64_t (**)(const raven::GnssPreprocessedMeasurementsEvent *))(*(void *)a2 + 16))(a2);
                uint64_t v122 = v96;
                uint64_t v97 = sub_18E017C64(v11);
                uint64_t v98 = "UnknownType";
                if ((v203 - 1) <= 4) {
                  uint64_t v98 = off_1E55B9C20[(int)v203 - 1];
                }
                cnprint::CNLogFormatter::FormatGeneral((uint64_t)v119, (uint64_t)&v121, "%s,%s,cno,%.2lf,sigma,%.2lf", v97, v98, *(float *)v204, sqrt(*v181));
                LOBYTE(v104) = (_BYTE)v119;
                if (*((char *)this + 3839) < 0) {
                  uint64_t v104 = *((void *)this + 477);
                }
                cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v124, &v123, "%s", v99, v100, v101, v102, v103, v104);
              }
              ++*((_DWORD *)v207 + (int)v203);
            }
            uint64_t v127 = &unk_1EDD0A4E8;
            if (v130 < 0) {
              operator delete(v129);
            }
            uint64_t v134 = &unk_1EDD0AE58;
            if (v136 < 0) {
              operator delete(v135);
            }
            uint64_t v134 = &unk_1EDD0A9B8;
            if (v133 < 0) {
              operator delete(v132);
            }
          }
          else
          {
            LOWORD(v127) = 12;
            LOBYTE(v121) = 4;
            cnprint::CNLogFormatter::FormatGeneral(v119, "GetGeometryFreeGNSSObservationArgs, measurement types do not match,obs1.meas_type_,%d,obs2.meas_type_,%d", v203, v194);
            LOBYTE(v62) = (_BYTE)v119;
            if (*((char *)this + 3839) < 0) {
              uint64_t v62 = *((void *)this + 477);
            }
LABEL_46:
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v127, (unsigned __int8 *)&v121, "%s", v57, v58, v59, v60, v61, v62);
            LOWORD(v121) = 12;
            LOBYTE(v124) = 4;
            uint64_t v127 = (void *)(*(uint64_t (**)(const raven::GnssPreprocessedMeasurementsEvent *))(*(void *)a2 + 16))(a2);
            double v128 = v63;
            std::string v64 = sub_18E017C64(v11);
            cnprint::CNLogFormatter::FormatGeneral((uint64_t)v119, (uint64_t)&v127, "%s,Type,%d,GetGeometryFreeGNSSObservationArgs() failed", v64, v203);
            LOBYTE(v70) = (_BYTE)v119;
            if (*((char *)this + 3839) < 0) {
              uint64_t v70 = *((void *)this + 477);
            }
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v121, (unsigned __int8 *)&v124, "%s", v65, v66, v67, v68, v69, v70);
          }
          double v162 = &unk_1EDD0AE58;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          double v162 = &unk_1EDD0A9B8;
          if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v137.__r_.__value_.__l.__data_);
          }
          goto LABEL_53;
        }
        int LogLevel = cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v31);
        long long v9 = v117;
        uint64_t v8 = v118;
        int8x16_t v10 = v116;
        if (!LogLevel)
        {
          LOWORD(v137.__r_.__value_.__l.__data_) = 12;
          LOBYTE(v183) = 0;
          uint64_t v127 = (void *)(*(uint64_t (**)(const raven::GnssPreprocessedMeasurementsEvent *))(*(void *)a2 + 16))(a2);
          double v128 = v37;
          long long v38 = sub_18E017C64(v11);
          char v39 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)v119, (uint64_t)&v127, "%s,GnssPreprocessedMeasurementsEvent: Sat excluded,low elevation,%.2f deg", v38, *(double *)(v11 + 264) * 57.2957795);
          if (*((char *)this + 3839) >= 0) {
            LOBYTE(v45) = v39;
          }
          else {
            uint64_t v45 = *((void *)this + 477);
          }
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v137, (unsigned __int8 *)&v183, "%s", v40, v41, v42, v43, v44, v45);
          int8x16_t v10 = v116;
          long long v9 = v117;
          uint64_t v8 = v118;
        }
LABEL_10:
        v6 += 2;
        if (v6 == v7) {
          return 0;
        }
      }
    }
  }
  else
  {
    LOWORD(v127) = 12;
    v137.__r_.__value_.__s.__data_[0] = 2;
    unsigned __int8 v106 = cnprint::CNLogFormatter::FormatWarning((raven::RavenIonosphereEstimator *)((char *)this + 3816), "GnssPreprocessedMeasurementsEvent received, but estimator is not configured");
    if (*((char *)this + 3839) >= 0) {
      LOBYTE(v112) = v106;
    }
    else {
      uint64_t v112 = *((void *)this + 477);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v127, (unsigned __int8 *)&v137, "%s", v107, v108, v109, v110, v111, v112);
  }
  return 0xFFFFFFFFLL;
}

void sub_18E143290(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46,uint64_t a47,char a48)
{
}

uint64_t raven::RavenIonosphereEstimator::IsInitialized(raven::RavenIonosphereEstimator *this)
{
  return *((unsigned __int8 *)this + 9);
}

uint64_t sub_18E14331C(uint64_t a1, uint64_t a2, void *lpsrc, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v216 = *MEMORY[0x1E4F143B8];
  if (!lpsrc
    || (BOOL v13 = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EDD02A78, (const struct __class_type_info *)&unk_1EDD06038, 0)) == 0)
  {
    LOWORD(v189[0]) = 12;
    LOBYTE(v191) = 4;
    double v164 = MEMORY[0x30] + (double)MEMORY[0x28];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v189, (unsigned __int8 *)&v191, "time,%.3lf,h-function failure on line %d: %s() %s", a4, a5, a6, a7, a8, SLOBYTE(v164));
    return 0xFFFFFFFFLL;
  }
  int v14 = v13;
  unsigned int v16 = *(_DWORD *)(a1 + 8);
  unsigned int v15 = *(_DWORD *)(a1 + 12);
  if (v16 <= v15) {
    int v17 = *(_DWORD *)(a1 + 12);
  }
  else {
    int v17 = *(_DWORD *)(a1 + 8);
  }
  if (!v16
    || !v15
    || v17 != 10
    || ((v19 = *(_DWORD *)(a2 + 8), unsigned int v18 = *(_DWORD *)(a2 + 12), v19 <= v18)
      ? (int v20 = *(_DWORD *)(a2 + 12))
      : (int v20 = *(_DWORD *)(a2 + 8)),
        !v19 || !v18 || v20 != 1))
  {
    LOWORD(v189[0]) = 12;
    LOBYTE(v191) = 4;
    double v39 = *((double *)v13 + 6) + (double)*((uint64_t *)v13 + 5);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v189, (unsigned __int8 *)&v191, "time,%.3lf,h-function failure on line %d: %s() %s", a4, a5, a6, a7, a8, SLOBYTE(v39));
    return 0xFFFFFFFFLL;
  }
  if (!v13[128])
  {
    LOWORD(v189[0]) = 12;
    LOBYTE(v191) = 4;
    double v47 = *((double *)v13 + 6) + (double)*((uint64_t *)v13 + 5);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v189, (unsigned __int8 *)&v191, "time,%.3lf,h-function failure on line %d: %s() %s", a4, a5, a6, a7, a8, SLOBYTE(v47));
    LOWORD(v189[0]) = 12;
    LOBYTE(v191) = 4;
    double v48 = *((double *)v14 + 12) + (double)*((uint64_t *)v14 + 11);
    sub_18E017C64((uint64_t)(v14 + 56));
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v189, (unsigned __int8 *)&v191, "t,%.3lf,%s,TAI time invalid", v49, v50, v51, v52, v53, SLOBYTE(v48));
    return 0xFFFFFFFFLL;
  }
  double v21 = *((double *)v13 + 24);
  if ((*(void *)&v21 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (double v22 = *((double *)v13 + 50), (*(void *)&v22 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    || v21 <= 0.0
    || v22 <= 0.0
    || v21 == v22)
  {
    LOWORD(v189[0]) = 12;
    LOBYTE(v191) = 4;
    double v40 = *((double *)v13 + 6) + (double)*((uint64_t *)v13 + 5);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v189, (unsigned __int8 *)&v191, "time,%.3lf,h-function failure on line %d: %s() %s", a4, a5, a6, a7, a8, SLOBYTE(v40));
    LOWORD(v189[0]) = 12;
    LOBYTE(v191) = 4;
    double v41 = *((double *)v14 + 12) + (double)*((uint64_t *)v14 + 11);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v189, (unsigned __int8 *)&v191, "t,%.3lf,obs1,%.31f,obs2,%.31f", v42, v43, v44, v45, v46, SLOBYTE(v41));
    return 0xFFFFFFFFLL;
  }
  __int16 v204 = 0;
  long long v205 = 0u;
  long long v206 = 0u;
  int v207 = 0;
  uint64_t v209 = 0;
  uint64_t v208 = 0;
  int v210 = 0;
  *(_OWORD *)long long v189 = *(_OWORD *)(v13 + 136);
  uint64_t result = sub_18E01C59C((uint64_t)(v13 + 504), v189, (uint64_t)&v204, (double *)&v202, v201, v200);
  if (result) {
    return result;
  }
  uint64_t v24 = **(void **)(a1 + 32);
  int v191 = 1;
  uint64_t v192 = v24;
  long long v193 = 0u;
  long long v194 = 0u;
  long long v25 = *((_OWORD *)v14 + 45);
  long long v195 = 0u;
  long long v196 = v25;
  uint64_t v26 = *((void *)v14 + 92);
  long long v198 = v202;
  uint64_t v197 = v26;
  uint64_t v199 = v203;
  if (cnnavigation::details::IonospherePiercePoint::ComputeIonospherePiercePointCoordinates((cnnavigation::details::IonospherePiercePoint *)&v191))
  {
    sub_18E06B804((uint64_t)(v14 + 40), (uint64_t)"could not compute expected measurement", (uint64_t)"h_GnssGeometryFreePsr_RavenIonosphere", 1129, v27, v28, v29, v30);
    if (cnprint::CNPrinter::GetLogLevel(v31) <= 1)
    {
      LOWORD(v189[0]) = 12;
      LOBYTE(v214.f64[0]) = 1;
      uint64_t v32 = *((void *)v14 + 11);
      double v33 = *((double *)v14 + 12);
      sub_18E017C64((uint64_t)(v14 + 56));
      double v163 = v33 + (double)v32;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v189, (unsigned __int8 *)&v214, "t,%.3lf,%s,h_GnssGeometryFreePsr_RavenIonosphere returned != 0", v34, v35, v36, v37, v38, SLOBYTE(v163));
    }
    return 0xFFFFFFFFLL;
  }
  float64x2_t v214 = *((float64x2_t *)v14 + 45);
  uint64_t v215 = *((void *)v14 + 92);
  double v211 = 0.0;
  double v212 = 0.0;
  uint64_t v213 = 0;
  uint64_t v54 = (cnprint::CNPrinter *)cnnavigation::ECEFToLLA(&v214, 1, &v211, 0, (uint64_t)v189);
  if (v54)
  {
    LOWORD(v189[0]) = 12;
    unsigned __int8 v190 = 4;
    double v165 = *((double *)v14 + 12) + (double)*((uint64_t *)v14 + 11);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v189, &v190, "t,%.3lf,h_GnssGeometryFreePsr_RavenIonosphere, conversion of current position from ECEF to LLA failed", v55, v56, v57, v58, v59, SLOBYTE(v165));
    return 0xFFFFFFFFLL;
  }
  double v61 = *((double *)&v194 + 1);
  double v60 = *(double *)&v195;
  double v63 = v211;
  double v62 = v212;
  int LogLevel = (cnprint::CNPrinter *)cnprint::CNPrinter::GetLogLevel(v54);
  if (!LogLevel)
  {
    LOWORD(v189[0]) = 12;
    unsigned __int8 v190 = 0;
    double v70 = *((double *)v14 + 12) + (double)*((uint64_t *)v14 + 11);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v189, &v190, "t,%.3lf,h_GnssGeometryFreePsr_RavenIonosphere,ipp,thin_shell_height_km_,%.5lf,sv_zenith_angle_at_rx_rad_,%.5lf,sv_zenith_angle_at_ipp_rad_,%.5lf,sv_azimuth_at_rx_rad_,%.5lf,latitude_ipp_rad_,%.5lf,longitude_ipp_rad_,%.5lf,receiver_radius_km_,%.5lf,rx_lat,%.5lf,rx_lon,%.5lf", v65, v66, v67, v68, v69, SLOBYTE(v70));
  }
  double v71 = v60 - v62;
  if (v71 > 3.14159265 || v71 < -3.14159265)
  {
    double v71 = fmod(v71, 6.28318531);
    if (v71 <= 3.14159265)
    {
      if (v71 < -3.14159265) {
        double v71 = v71 + 6.28318531;
      }
    }
    else
    {
      double v71 = v71 + -6.28318531;
    }
  }
  if (*((double *)&v193 + 1) >= 1.57079633 || *((double *)&v193 + 1) < 0.0)
  {
    if (cnprint::CNPrinter::GetLogLevel(LogLevel) <= 1)
    {
      LOWORD(v189[0]) = 12;
      unsigned __int8 v190 = 1;
      double v167 = *((double *)v14 + 12) + (double)*((uint64_t *)v14 + 11);
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v189, &v190, "t,%.3lf,WARNING: h_GnssGeometryFreePsr_RavenIonosphere,sv_zenith_angle_at_ipp_rad is invalid. Cannot proceed.", v85, v86, v87, v88, v89, SLOBYTE(v167));
    }
    return 0xFFFFFFFFLL;
  }
  double v188 = v63;
  long long v72 = *(double **)(a1 + 32);
  double v74 = v72[1];
  double v73 = v72[2];
  double v76 = v72[3];
  double v75 = v72[4];
  double v77 = v72[5];
  double v186 = v72[6];
  double v84 = cos(*((long double *)&v193 + 1));
  switch(v14[80])
  {
    case 0:
    case 2:
    case 5:
    case 6:
      LOWORD(v189[0]) = 12;
      unsigned __int8 v190 = 4;
      double v166 = *((double *)v14 + 12) + (double)*((uint64_t *)v14 + 11);
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v189, &v190, "t,%.3lf,h_GnssGeometryFreePsr_RavenIonosphere, unexpected constellation", v79, v80, v81, v82, v83, SLOBYTE(v166));
      return 0xFFFFFFFFLL;
    case 1:
      unsigned int v90 = 7;
      break;
    case 3:
      unsigned int v90 = 8;
      break;
    case 4:
      unsigned int v90 = 9;
      break;
    default:
      unsigned int v90 = 0;
      break;
  }
  double v91 = v74 + v73 * (v61 - v188) + v76 * v71 + (v61 - v188) * (v75 * 0.5) * (v61 - v188);
  double v92 = v61 - v188;
  double v93 = v91 + (v61 - v188) * v77 * v71 + v71 * (v186 * 0.5) * v71;
  double v94 = (*((double *)v14 + 24) * *((double *)v14 + 24) - *((double *)v14 + 50) * *((double *)v14 + 50))
      * (4.0308193e17
       / (*((double *)v14 + 50)
        * (*((double *)v14 + 24)
         * *((double *)v14 + 24)
         * *((double *)v14 + 50))));
  double v95 = v72[v90] * -0.299792458 + v94 * (1.0 / v84 * v93);
  *(void *)&long long v96 = 0x100000001;
  *((void *)&v96 + 1) = 0x100000001;
  *(_OWORD *)(a4 + 8) = v96;
  **(double **)(a4 + 32) = v95 + **(double **)(a2 + 32);
  if (!cnprint::CNPrinter::GetLogLevel(v78))
  {
    LOWORD(v189[0]) = 12;
    unsigned __int8 v190 = 0;
    double v168 = *((double *)v14 + 12) + (double)*((uint64_t *)v14 + 11);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v189, &v190, "t,%.3lf,h_GnssGeometryFreePsr_RavenIonosphere,z,%.5lf", v97, v98, v99, v100, v101, SLOBYTE(v168));
  }
  if (*((double *)&v193 + 1) >= 1.57079633) {
    goto LABEL_66;
  }
  double v181 = *((double *)v14 + 91);
  double v182 = *((double *)v14 + 90);
  double v180 = *((double *)v14 + 92);
  long double v102 = *((double *)&v194 + 1);
  long double __x = *(double *)&v194;
  long double v185 = *((double *)&v193 + 1);
  long double v103 = *(double *)&v193;
  double v187 = sin(*((long double *)&v193 + 1));
  uint64_t v109 = *(double **)(a1 + 32);
  double v110 = *v109 + 6371.009;
  if (fabs(v110) < 2.22044605e-16)
  {
    LOWORD(v189[0]) = 12;
    unsigned __int8 v190 = 4;
    double v169 = *((double *)v14 + 12) + (double)*((uint64_t *)v14 + 11);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v189, &v190, "t,%.3lf,h_GnssGeometryFreePsr_RavenIonosphere,Rekm_plus_x_hmax==0,cannot proceed", v104, v105, v106, v107, v108, SLOBYTE(v169));
    return 0xFFFFFFFFLL;
  }
  double v111 = 1.0 - v187 * v187;
  double v179 = sin(v103);
  double v178 = pow(v111, -1.5);
  if (fabs(v111) < 2.22044605e-16)
  {
    LOWORD(v189[0]) = 12;
    unsigned __int8 v190 = 4;
    double v170 = *((double *)v14 + 12) + (double)*((uint64_t *)v14 + 11);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v189, &v190, "t,%.3lf,h_GnssGeometryFreePsr_RavenIonosphere,alpha==1.0,cannot proceed", v112, v113, v114, v115, v116, SLOBYTE(v170));
    return 0xFFFFFFFFLL;
  }
  double v117 = v103 - v185;
  double v176 = sin(v102);
  double v177 = cos(v117);
  if (fabs(v176 * v176 + -1.0) < 2.22044605e-16)
  {
    LOWORD(v189[0]) = 12;
    unsigned __int8 v190 = 2;
    double v171 = *((double *)v14 + 12) + (double)*((uint64_t *)v14 + 11);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v189, &v190, "Warning: t,%.3lf,h_GnssGeometryFreePsr_RavenIonosphere,beta==1.0,IPP is at one of the poles,cannot proceed", v118, v119, v120, v121, v122, SLOBYTE(v171));
    return 0xFFFFFFFFLL;
  }
  double v175 = cos(__x);
  __double2 v123 = __sincos_stret(v188);
  double v124 = sin(v117);
  double v130 = cos(v102);
  if (fabs(v130) < 2.22044605e-16)
  {
    LOWORD(v189[0]) = 12;
    unsigned __int8 v190 = 2;
    double v172 = *((double *)v14 + 12) + (double)*((uint64_t *)v14 + 11);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v189, &v190, "Warning: t,%.3lf,h_GnssGeometryFreePsr_RavenIonosphere,cos_theta_pp==0.0,IPP is at one of the poles,cannot proceed", v125, v126, v127, v128, v129, SLOBYTE(v172));
    return 0xFFFFFFFFLL;
  }
  double __xa = sin(__x);
  double v136 = sin(v71);
  if (fabs(v136 * v136 + -1.0) < 2.22044605e-16)
  {
    LOWORD(v189[0]) = 12;
    unsigned __int8 v190 = 2;
    double v173 = *((double *)v14 + 12) + (double)*((uint64_t *)v14 + 11);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v189, &v190, "t,%.3lf,h_GnssGeometryFreePsr_RavenIonosphere,gamma==1.0,cannot proceed", v131, v132, v133, v134, v135, SLOBYTE(v173));
    return 0xFFFFFFFFLL;
  }
  double v137 = cos(v185);
  if (fabs(v137) < 2.22044605e-16)
  {
LABEL_66:
    LOWORD(v189[0]) = 12;
    unsigned __int8 v190 = 4;
    double v174 = *((double *)v14 + 12) + (double)*((uint64_t *)v14 + 11);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v189, &v190, "t,%.3lf,h_GnssGeometryFreePsr_RavenIonosphere,zenith angle at IPP is too large,cannot proceed", v97, v98, v99, v100, v101, SLOBYTE(v174));
    return 0xFFFFFFFFLL;
  }
  double v138 = v179
       * (-sqrt(v181 * 0.001 * (v181 * 0.001) + v182 * 0.001 * (v182 * 0.001) + v180 * 0.001 * (v180 * 0.001))
        / (v110
         * v110));
  double v139 = v178 * -0.5 * (v187 * -2.0 * v138);
  double v140 = -1.0 / sqrt(1.0 - v187 * v187) * v138;
  double v141 = 1.0 / sqrt(1.0 - v176 * v176) * (v175 * (v123.__cosval * v177) * v140 + -(v124 * v123.__sinval) * v140);
  double v142 = 1.0 / sqrt(1.0 - v136 * v136) * (__xa * -v124 / (v130 * v130) * -v176 * v141 + __xa * v177 / v130 * v140);
  double v143 = v92;
  double v144 = 1.0 / v137;
  double v145 = v94
       * (v144
        * (v142 * v109[3]
         + v109[2] * v141
         + v109[4] * 0.5 * ((v92 + v92) * v141)
         + v141 * v109[5] * v71
         + v92 * v109[5] * v142
         + v109[6] * 0.5 * ((v71 + v71) * v142))
        + v139 * v93);
  double v146 = v94 * v144;
  double v147 = v92 * v144;
  double v148 = v94 * (v92 * v144);
  double v149 = v94 * (v71 * v144);
  double v150 = v144 * 0.5;
  double v151 = v94 * (v143 * (v143 * v150));
  double v152 = v94 * (v71 * v147);
  double v153 = v94 * (v71 * (v71 * v150));
  sub_18E14E724((uint64_t)v189);
  sub_18DFE2F24(a5, (uint64_t)v189);
  long long v154 = *(double **)(a5 + 32);
  *long long v154 = v145;
  uint64_t v155 = *(int *)(a5 + 20);
  v154[v155] = v146;
  v154[2 * v155] = v148;
  v154[3 * (int)v155] = v149;
  v154[4 * v155] = v151;
  v154[5 * (int)v155] = v152;
  v154[6 * (int)v155] = v153;
  v154[(int)(v155 * v90)] = -0.299792458;
  if (!cnprint::CNPrinter::GetLogLevel(v156))
  {
    LOWORD(v189[0]) = 12;
    unsigned __int8 v190 = 0;
    double v162 = *((double *)v14 + 12) + (double)*((uint64_t *)v14 + 11);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v189, &v190, "t,%.3lf,h_GnssGeometryFreePsr_RavenIonosphere,J0,%.5lf,J1,%.5lf,J2,%.5lf,J3,%.5lf,J4,%.10lf,J5,%.5lf,J6,%.5lf,J7,%.5lf,J8,%.5lf,J9,%.5lf", v157, v158, v159, v160, v161, SLOBYTE(v162));
  }
  sub_18E071E98(1u, 1u, (uint64_t)v189);
  sub_18DFE2F24(a6, (uint64_t)v189);
  return 0;
}

uint64_t sub_18E144030(uint64_t a1, double *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v66[4] = *(void (**)(uint64_t))MEMORY[0x1E4F143B8];
  unsigned int v5 = *(_DWORD *)(a4 + 8);
  if ((v5 & 0x80000000) != 0) {
    __assert_rtn("Zeros", "cnmatrix.h", 3098, "nr >= 0");
  }
  uint64_t v62 = 0x100000001;
  uint64_t v57 = &unk_1EDD18048;
  double v63 = &v64;
  unsigned int v58 = v5;
  unsigned int v59 = 1;
  unsigned int v60 = v5;
  unsigned int v61 = v5;
  uint64_t v11 = (cnprint::CNPrinter *)sub_18DFE2CC8((uint64_t)&v57, 0.0);
  if (!*(unsigned char *)a1)
  {
    if (cnprint::CNPrinter::GetLogLevel(v11) <= 1)
    {
      LOWORD(v66[0]) = 2;
      unsigned __int8 v65 = 1;
      double v54 = a2[1] + (double)*(uint64_t *)a2;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v66, &v65, "MeasurementAccumulator::AddMeasurement() failed - Not initialized,t_meas,%.3lf", v17, v18, v19, v20, v21, SLOBYTE(v54));
    }
    return 0xFFFFFFFFLL;
  }
  if (*(_DWORD *)(a1 + 3184) == 88)
  {
    LOWORD(v66[0]) = 2;
    unsigned __int8 v65 = 2;
    double v53 = a2[1] + (double)*(uint64_t *)a2;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v66, &v65, "MeasurementAccumulator::AddMeasurement() failed - Out of space,t_meas,%.3lf", v12, v13, v14, v15, v16, SLOBYTE(v53));
    return 0xFFFFFFFFLL;
  }
  if (*(unsigned char *)(a1 + 1))
  {
    if (cnprint::CNPrinter::GetLogLevel(v11) <= 1)
    {
      LOWORD(v66[0]) = 2;
      unsigned __int8 v65 = 1;
      double v55 = a2[1] + (double)*(uint64_t *)a2;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v66, &v65, "MeasurementAccumulator::AddMeasurement() failed - Locked,t_meas,%.3lf", v22, v23, v24, v25, v26, SLOBYTE(v55));
    }
    return 0xFFFFFFFFLL;
  }
  BOOL v27 = sub_18DEE4CB8(a2, (double *)(a1 + 8));
  if (v27)
  {
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v27) <= 1)
    {
      LOWORD(v66[0]) = 2;
      unsigned __int8 v65 = 1;
      double v56 = a2[1] + (double)*(uint64_t *)a2;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v66, &v65, "MeasurementAccumulator::AddMeasurement() failed - Measurement too old,t_meas,%.3lf,t_start,%.3lf", v28, v29, v30, v31, v32, SLOBYTE(v56));
    }
    return 0xFFFFFFFFLL;
  }
  v66[0] = 0;
  v66[1] = 0;
  sub_18E14E8BC(v66, a5);
  double v33 = sub_18E06C110((uint64_t *)(a1 + 40), v66);
  sub_18E067C60((uint64_t (**)(void, void, void, void, void))v66);
  uint64_t v34 = *(int *)(a1 + 3184);
  uint64_t v35 = (v34 + 1);
  if (*(void *)(a1 + 56) != v35)
  {
    LOWORD(v66[0]) = 2;
    unsigned __int8 v65 = 4;
    char v47 = (*(uint64_t (**)(uint64_t))(*(void *)a5 + 16))(a5);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v66, &v65, "MeasurementAccumulator::AddMeasurement() failed - allocation failed,meas_type,%d,t_meas,%.3lf", v48, v49, v50, v51, v52, v47);
    return 0xFFFFFFFFLL;
  }
  *(_DWORD *)(a1 + 3184) = v35;
  *(_DWORD *)(a1 + 72) = v35;
  *(_DWORD *)(a1 + 76) = 1;
  *(_DWORD *)(a1 + 80) = v35;
  *(_DWORD *)(a1 + 84) = v35;
  *(_DWORD *)(a1 + 1520) = v35;
  *(_DWORD *)(a1 + 1524) = 1;
  *(_DWORD *)(a1 + 1528) = v35;
  *(_DWORD *)(a1 + 1532) = v35;
  *(_DWORD *)(a1 + 1912) = v35;
  *(_DWORD *)(a1 + 1916) = 1;
  *(_DWORD *)(a1 + 1920) = v35;
  *(_DWORD *)(a1 + 1924) = v35;
  *(_DWORD *)(a1 + 2656) = v35;
  *(_DWORD *)(a1 + 2660) = 1;
  *(_DWORD *)(a1 + 2664) = v35;
  *(_DWORD *)(a1 + 2668) = v35;
  *(_DWORD *)(a1 + 2704) = v35;
  *(_DWORD *)(a1 + 2708) = 1;
  *(_DWORD *)(a1 + 2712) = v35;
  *(_DWORD *)(a1 + 2716) = v35;
  *(_DWORD *)(a1 + 3096) = v35;
  *(_DWORD *)(a1 + 3100) = 1;
  *(_DWORD *)(a1 + 3104) = v35;
  *(_DWORD *)(a1 + 3108) = v35;
  *(_DWORD *)(a1 + 3144) = v35;
  *(_DWORD *)(a1 + 3148) = 1;
  *(_DWORD *)(a1 + 3152) = v35;
  *(_DWORD *)(a1 + 3156) = v35;
  *(_DWORD *)(a1 + 3200) = v35;
  *(_DWORD *)(a1 + 3204) = 1;
  *(_DWORD *)(a1 + 3208) = v35;
  *(_DWORD *)(a1 + 3212) = v35;
  *(_DWORD *)(a1 + 3944) = v35;
  *(_DWORD *)(a1 + 3948) = 1;
  *(_DWORD *)(a1 + 3952) = v35;
  *(_DWORD *)(a1 + 3956) = v35;
  *(_OWORD *)(*(void *)(a1 + 96) + 16 * v34) = *(_OWORD *)a2;
  unsigned int v36 = *(_DWORD *)(a3 + 8);
  unsigned int v37 = *(_DWORD *)(a3 + 12);
  if (v36 <= v37) {
    int v38 = *(_DWORD *)(a3 + 12);
  }
  else {
    int v38 = *(_DWORD *)(a3 + 8);
  }
  if (v37) {
    BOOL v39 = v36 == 0;
  }
  else {
    BOOL v39 = 1;
  }
  if (v39) {
    int v40 = 0;
  }
  else {
    int v40 = v38;
  }
  *(_DWORD *)(*(void *)(a1 + 1544) + 4 * v34) = v40;
  sub_18DFE2F24(*(void *)(a1 + 2680) + 48 * v34, a3);
  if (v58 <= v59) {
    unsigned int v41 = v59;
  }
  else {
    unsigned int v41 = v58;
  }
  if (v59) {
    BOOL v42 = v58 == 0;
  }
  else {
    BOOL v42 = 1;
  }
  if (v42) {
    unsigned int v43 = 0;
  }
  else {
    unsigned int v43 = v41;
  }
  *(_DWORD *)(*(void *)(a1 + 2728) + 4 * v34) = v43;
  sub_18DFE2F24(*(void *)(a1 + 3120) + 48 * v34, (uint64_t)&v57);
  __n128 v44 = sub_18DFE2F24(*(void *)(a1 + 3168) + 48 * v34, a4);
  *(void *)(*(void *)(a1 + 3224) + 8 * v34) = sub_18E14331C;
  uint64_t v45 = (uint64_t (*)(uint64_t, void *, void, void *, void *, __n128))*v33;
  if (*v33) {
    uint64_t v45 = (uint64_t (*)(uint64_t, void *, void, void *, void *, __n128))v45(3, v33, 0, &unk_1EDD06038, &std::__any_imp::__unique_typeinfo<raven::h_GnssGeometryFreePsrArgs_RavenIonosphere>::__id, v44);
  }
  uint64_t result = 0;
  *(void *)(*(void *)(a1 + 3968) + 8 * v34) = v45;
  return result;
}

void sub_18E144458(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a2) {
    sub_18DEDD524(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_18E144484(uint64_t a1)
{
  *(void *)a1 = &unk_1EDD0A4E8;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  *(void *)(a1 + 504) = &unk_1EDD0AE58;
  if (*(char *)(a1 + 535) < 0) {
    operator delete(*(void **)(a1 + 512));
  }
  *(void *)(a1 + 504) = &unk_1EDD0A9B8;
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  return a1;
}

uint64_t sub_18E144530(uint64_t a1)
{
  *(void *)(a1 + 448) = &unk_1EDD0AE58;
  if (*(char *)(a1 + 479) < 0) {
    operator delete(*(void **)(a1 + 456));
  }
  *(void *)(a1 + 448) = &unk_1EDD0A9B8;
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t raven::RavenIonosphereEstimator::HandleEvent(const void **this, const raven::KlobucharParametersEvent *a2)
{
  if (*((unsigned char *)this + 8))
  {
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)this) <= 1)
    {
      __int16 v20 = 12;
      unsigned __int8 v19 = 1;
      unsigned __int8 v4 = cnprint::CNLogFormatter::FormatGeneral(this + 477, "KlobucharParametersEvent received");
      if (*((char *)this + 3839) >= 0) {
        LOBYTE(v10) = v4;
      }
      else {
        int8x16_t v10 = this[477];
      }
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v20, &v19, "%s", v5, v6, v7, v8, v9, (char)v10);
    }
    sub_18E144698((uint64_t)(this + 31), (uint64_t)a2);
    return 0;
  }
  else
  {
    __int16 v22 = 12;
    unsigned __int8 v21 = 2;
    unsigned __int8 v12 = cnprint::CNLogFormatter::FormatWarning((cnprint::CNLogFormatter *)(this + 477), "KlobucharParametersEvent received, but estimator is not configured");
    if (*((char *)this + 3839) >= 0) {
      LOBYTE(v18) = v12;
    }
    else {
      uint64_t v18 = this[477];
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v22, &v21, "%s", v13, v14, v15, v16, v17, (char)v18);
    return 0xFFFFFFFFLL;
  }
}

uint64_t sub_18E144698(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 200))
  {
    long long v3 = *(_OWORD *)(a2 + 8);
    long long v4 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 24) = v4;
    *(_OWORD *)(a1 + 8) = v3;
    long long v5 = *(_OWORD *)(a2 + 56);
    long long v6 = *(_OWORD *)(a2 + 72);
    long long v7 = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 88) = v7;
    *(_OWORD *)(a1 + 72) = v6;
    *(_OWORD *)(a1 + 56) = v5;
    cnnavigation::KlobucharModelParameters::operator=(a1 + 120, a2 + 120);
  }
  else
  {
    sub_18E14E154(a1, a2);
    *(unsigned char *)(a1 + 200) = 1;
  }
  return a1;
}

uint64_t raven::RavenIonosphereEstimator::UpdateEstimatorParametersViaPolyfitToKlobucharModel(raven::RavenIonosphereEstimator *this)
{
  uint64_t v110 = *MEMORY[0x1E4F143B8];
  if (!*((unsigned char *)this + 2024) || !*((unsigned char *)this + 448) || !*((unsigned char *)this + 440)) {
    return 0xFFFFFFFFLL;
  }
  long long v102 = 0uLL;
  if (*((unsigned char *)this + 632))
  {
    char v2 = (char *)this + 640;
  }
  else
  {
    if (!*((unsigned char *)this + 608)) {
      goto LABEL_9;
    }
    char v2 = (char *)this + 616;
  }
  long long v102 = *(_OWORD *)v2;
LABEL_9:
  __int16 v95 = 0;
  long long v96 = 0u;
  long long v97 = 0u;
  int v98 = 0;
  uint64_t v99 = 0;
  uint64_t v100 = 0;
  int v101 = 0;
  long long v3 = (cnprint::CNPrinter *)cnnavigation::TAITime::ToGPSTime((cnnavigation::TAITime *)&v102, (const cnnavigation::GNSSUTCParameters *)&v95);
  double v5 = v4;
  if (!cnprint::CNPrinter::GetLogLevel(v3))
  {
    __int16 v95 = 12;
    LOBYTE(v103[0]) = 0;
    long long v6 = (uint64_t *)cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 3816, (uint64_t)this + 464, "#iono,klob,RavenIonosphereEstimator::HandleEvent(RavenSolutionEvent),gps_week, gps_secofweek,%d,%.3lf", v3, v5);
    if (*((char *)this + 3839) >= 0) {
      LOBYTE(v12) = (_BYTE)v6;
    }
    else {
      uint64_t v12 = *v6;
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v95, (unsigned __int8 *)v103, "%s", v7, v8, v9, v10, v11, v12);
  }
  cnnavigation::KlobucharIonosphereModel::KlobucharIonosphereModel((__n128 *)&v95, (raven::RavenIonosphereEstimator *)((char *)this + 368));
  float64x2_t v108 = *((float64x2_t *)this + 127);
  uint64_t v109 = *((void *)this + 256);
  if (cnnavigation::ECEFToLLA(&v108, 1, v107, 0, (uint64_t)v103))
  {
    LOWORD(v103[0]) = 12;
    LOBYTE(__p) = 4;
    uint64_t v13 = (uint64_t *)cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 3816, (uint64_t)this + 464, "#iono,klob,RavenIonosphereEstimator::HandleEvent(RavenSolutionEvent),conversion of receiver position from ECEF to LLA failed");
    if (*((char *)this + 3839) >= 0) {
      LOBYTE(v19) = (_BYTE)v13;
    }
    else {
      uint64_t v19 = *v13;
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v103, (unsigned __int8 *)&__p, "%s", v14, v15, v16, v17, v18, v19);
    return 0xFFFFFFFFLL;
  }
  std::string __p = 0;
  double v93 = 0;
  double v94 = 0;
  uint64_t v89 = 0;
  unsigned int v90 = 0;
  double v91 = 0;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EB404B88, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EB404B88))
  {
    dword_1EB404B80 = 7;
    __cxa_guard_release(&qword_1EB404B88);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EB404B90, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EB404B90))
  {
    int v86 = dword_1EB404B80;
    if (dword_1EB404B80 >= 1) {
      int v86 = dword_1EB404B80 - 1;
    }
    dword_1EB404B84 = v86 >> 1;
    __cxa_guard_release(&qword_1EB404B90);
  }
  int v22 = dword_1EB404B84;
  if (dword_1EB404B84 < 0)
  {
LABEL_69:
    uint64_t v57 = sub_18E0F6058(v103, 6uLL);
    raven::RavenIonosphereEstimator::FitAnchorPointsToPoly((uint64_t)v57);
    if (cnprint::CNPrinter::GetLogLevel(v58) <= 1)
    {
      LOWORD(v106[0]) = 12;
      LOBYTE(v105[0]) = 1;
      char v59 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 3816, (uint64_t)this + 464, "#iono,klob,RavenIonosphereEstimator,poly[0],%.3lf,poly[1],%.3lf,poly[2],%.3lf,poly[3],%.3lf,poly[4],%.3lf,poly[5],%.3lf", *(double *)v103[0], *(double *)(v103[0] + 8), *(double *)(v103[0] + 16), *(double *)(v103[0] + 24), *(double *)(v103[0] + 32), *(double *)(v103[0] + 40));
      if (*((char *)this + 3839) >= 0) {
        LOBYTE(v65) = v59;
      }
      else {
        uint64_t v65 = *((void *)this + 477);
      }
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v106, (unsigned __int8 *)v105, "%s", v60, v61, v62, v63, v64, v65);
    }
    uint64_t v66 = (void *)v103[0];
    *((void *)this + 12) = *(void *)v103[0];
    *((void *)this + 13) = v66[1];
    *((void *)this + 14) = v66[2];
    *((void *)this + 15) = v66[3];
    *((void *)this + 16) = v66[4];
    *((void *)this + 17) = v66[5];
    *((void *)this + 22) = *v66;
    *((void *)this + 23) = v66[1];
    *((void *)this + 24) = v66[2];
    *((void *)this + 25) = v66[3];
    *((void *)this + 26) = v66[4];
    *((void *)this + 27) = v66[5];
    int v67 = *((unsigned __int8 *)this + 80);
    *((_OWORD *)this + 4) = *((_OWORD *)this + 29);
    if (!v67) {
      *((unsigned char *)this + 80) = 1;
    }
    v103[1] = v66;
    operator delete(v66);
    uint64_t v20 = 0;
  }
  else
  {
    int v23 = -dword_1EB404B84;
    while (v22 < 0)
    {
LABEL_68:
      BOOL v56 = v23++ < v22;
      if (!v56) {
        goto LABEL_69;
      }
    }
    int v24 = -v22;
    while (1)
    {
      double v25 = (double)v23 * 0.261799388 / (double)v22;
      double v26 = (double)v24 * 0.261799388 / (double)v22;
      v106[0] = v25 + v107[0];
      v106[1] = v26 + v107[1];
      _OWORD v106[2] = v107[2];
      BOOL v27 = v93;
      if (v93 >= v94)
      {
        uint64_t v29 = (double *)__p;
        uint64_t v30 = ((char *)v93 - (unsigned char *)__p) >> 4;
        unint64_t v31 = v30 + 1;
        if ((unint64_t)(v30 + 1) >> 60) {
          sub_18DEE1FC8();
        }
        uint64_t v32 = (char *)v94 - (unsigned char *)__p;
        if (((char *)v94 - (unsigned char *)__p) >> 3 > v31) {
          unint64_t v31 = v32 >> 3;
        }
        if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v33 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v33 = v31;
        }
        if (v33)
        {
          uint64_t v34 = (char *)sub_18DFF7B64((uint64_t)&v94, v33);
          uint64_t v29 = (double *)__p;
          BOOL v27 = v93;
        }
        else
        {
          uint64_t v34 = 0;
        }
        uint64_t v35 = (double *)&v34[16 * v30];
        *uint64_t v35 = v25;
        v35[1] = v26;
        unsigned int v36 = v35;
        if (v27 != v29)
        {
          do
          {
            *((_OWORD *)v36 - 1) = *((_OWORD *)v27 - 1);
            v36 -= 2;
            v27 -= 2;
          }
          while (v27 != v29);
          uint64_t v29 = (double *)__p;
        }
        uint64_t v28 = v35 + 2;
        std::string __p = v36;
        double v93 = v35 + 2;
        double v94 = (double *)&v34[16 * v33];
        if (v29) {
          operator delete(v29);
        }
      }
      else
      {
        *double v93 = v25;
        v27[1] = v26;
        uint64_t v28 = v27 + 2;
      }
      double v93 = v28;
      if (cnnavigation::LLAToECEF(v106, 1, v105, 0, (uint64_t)v103))
      {
        LOWORD(v103[0]) = 12;
        LOBYTE(v104.f64[0]) = 4;
        cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 3816, (uint64_t)this + 464, "#iono,klob,RavenIonosphereEstimator::HandleEvent(RavenSolutionEvent),LLAToECEF failed");
        if (*((char *)this + 3839) >= 0) {
          LOBYTE(v73) = (_BYTE)this - 24;
        }
        else {
          uint64_t v73 = *((void *)this + 477);
        }
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v103, (unsigned __int8 *)&v104, "%s", v68, v69, v70, v71, v72, v73);
        goto LABEL_90;
      }
      if (cnnavigation::ENUToECEF(xmmword_18E21A260, 1, 0, (uint64_t)v105, 0, &v104))
      {
        LOWORD(v103[0]) = 12;
        LOBYTE(v88) = 4;
        cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 3816, (uint64_t)this + 464, "#iono,klob,RavenIonosphereEstimator::HandleEvent(RavenSolutionEvent),ENUToECEF failed");
        if (*((char *)this + 3839) >= 0) {
          LOBYTE(v79) = (_BYTE)this - 24;
        }
        else {
          uint64_t v79 = *((void *)this + 477);
        }
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v103, (unsigned __int8 *)&v88, "%s", v74, v75, v76, v77, v78, v79);
        goto LABEL_90;
      }
      double v88 = 0.0;
      IonosphericDelay = (cnprint::CNPrinter *)cnnavigation::KlobucharIonosphereModel::GetIonosphericDelay((uint64_t)&v95, v5, 1575420000.0, v37, (uint64_t)v105, (uint64_t)&v104, &v88, 0, (uint64_t)v103);
      if (IonosphericDelay) {
        break;
      }
      double v39 = v88 * 1845950630.0;
      if (cnprint::CNPrinter::GetLogLevel(IonosphericDelay) <= 1)
      {
        LOWORD(v103[0]) = 12;
        unsigned __int8 v87 = 1;
        cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 3816, (uint64_t)this + 464, "#iono,klob,RavenIonosphereEstimator, delta_lat_rad,%.3lf,delta_on_rad,%.3lf,vtec_tecu_anchor,%.3lf", v25, v26, v39);
        if (*((char *)this + 3839) >= 0) {
          LOBYTE(v45) = (_BYTE)this - 24;
        }
        else {
          uint64_t v45 = *((void *)this + 477);
        }
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v103, &v87, "%s", v40, v41, v42, v43, v44, v45);
      }
      uint64_t v46 = v90;
      if (v90 >= v91)
      {
        uint64_t v48 = (double *)v89;
        uint64_t v49 = ((char *)v90 - (unsigned char *)v89) >> 3;
        unint64_t v50 = v49 + 1;
        if ((unint64_t)(v49 + 1) >> 61) {
          sub_18DEE1FC8();
        }
        uint64_t v51 = (char *)v91 - (unsigned char *)v89;
        if (((char *)v91 - (unsigned char *)v89) >> 2 > v50) {
          unint64_t v50 = v51 >> 2;
        }
        if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v52 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v52 = v50;
        }
        if (v52)
        {
          double v53 = (char *)sub_18DEDF808((uint64_t)&v91, v52);
          uint64_t v48 = (double *)v89;
          uint64_t v46 = v90;
        }
        else
        {
          double v53 = 0;
        }
        double v54 = (double *)&v53[8 * v49];
        *double v54 = v39;
        char v47 = v54 + 1;
        while (v46 != v48)
        {
          uint64_t v55 = *((void *)v46-- - 1);
          *((void *)v54-- - 1) = v55;
        }
        uint64_t v89 = v54;
        unsigned int v90 = v47;
        double v91 = (double *)&v53[8 * v52];
        if (v48) {
          operator delete(v48);
        }
      }
      else
      {
        *unsigned int v90 = v39;
        char v47 = v46 + 1;
      }
      unsigned int v90 = v47;
      int v22 = dword_1EB404B84;
      BOOL v56 = v24++ < dword_1EB404B84;
      if (!v56) {
        goto LABEL_68;
      }
    }
    LOWORD(v103[0]) = 12;
    unsigned __int8 v87 = 4;
    cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 3816, (uint64_t)this + 464, "#iono,klob,RavenIonosphereEstimator::HandleEvent(RavenSolutionEvent),GetIonosphericDelay failed");
    if (*((char *)this + 3839) >= 0) {
      LOBYTE(v85) = (_BYTE)this - 24;
    }
    else {
      uint64_t v85 = *((void *)this + 477);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v103, &v87, "%s", v80, v81, v82, v83, v84, v85);
    if (*((unsigned char *)this + 448))
    {
      *((void *)this + 31) = &unk_1EDD146B8;
      *((unsigned char *)this + 448) = 0;
    }
LABEL_90:
    uint64_t v20 = 0xFFFFFFFFLL;
  }
  if (v89)
  {
    unsigned int v90 = (double *)v89;
    operator delete(v89);
  }
  if (__p)
  {
    double v93 = (double *)__p;
    operator delete(__p);
  }
  return v20;
}

void sub_18E144EE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,void *a23,uint64_t a24)
{
  if (__p) {
    operator delete(__p);
  }
  if (a23) {
    operator delete(a23);
  }
  _Unwind_Resume(exception_object);
}

void raven::RavenIonosphereEstimator::FitAnchorPointsToPoly(uint64_t a1)
{
  MEMORY[0x1F4188790](a1);
  char v2 = v1;
  double v4 = v3;
  long long v6 = v5;
  unint64_t v7 = (unint64_t)(v3[1] - *v3) >> 3;
  uint64_t v67 = 0x100000031;
  uint64_t v62 = &unk_1EDD19278;
  uint64_t v68 = &v69;
  int v63 = v7;
  int v64 = 1;
  int v65 = v7;
  int v66 = v7;
  sub_18DFE2CC8((uint64_t)&v62, 0.0);
  uint64_t v59 = 0x600000031;
  double v54 = &unk_1EDD19308;
  uint64_t v60 = &v61;
  int v55 = v7;
  int v56 = 6;
  int v57 = 6 * v7;
  int v58 = v7;
  sub_18DFE2CC8((uint64_t)&v54, 0.0);
  if (v7)
  {
    uint64_t v8 = 0;
    uint64_t v9 = *v4;
    uint64_t v10 = v68;
    uint64_t v11 = v60;
    int v12 = v58;
    int v13 = 2 * v58;
    int v14 = 3 * v58;
    int v15 = 4 * v58;
    int v16 = 5 * v58;
    uint64_t v17 = (double *)(*v6 + 8);
    do
    {
      v10[(int)v8] = *(void *)(v9 + 8 * v8);
      v11[(int)v8] = 0x3FF0000000000000;
      v11[v12 + (int)v8] = *((void *)v17 - 1);
      v11[v13 + (int)v8] = *(void *)v17;
      *(double *)&v11[v14 + (int)v8] = *(v17 - 1) * *(v17 - 1);
      *(double *)&v11[v15 + (int)v8] = *(v17 - 1) * 0.5 * *v17;
      double v18 = *v17;
      v17 += 2;
      *(double *)&v11[v16 + (int)v8++] = v18 * v18;
    }
    while (v7 != v8);
  }
  int v19 = v56;
  int v20 = v55;
  uint64_t v51 = 0x3100000006;
  uint64_t v46 = &unk_1EDD19788;
  unint64_t v52 = v53;
  int v47 = v56;
  int v48 = v55;
  int v49 = v55 * v56;
  int v50 = v56;
  if (v56)
  {
    int v21 = 0;
    int v22 = 0;
    int v23 = v58;
    int v24 = v60;
    do
    {
      int v25 = v21;
      int v26 = v22;
      for (int i = v20; i; --i)
      {
        v53[v26] = v24[v25];
        v26 += v19;
        ++v25;
      }
      ++v22;
      v21 += v23;
    }
    while (v22 != v19);
  }
  uint64_t v38 = 0x600000006;
  unsigned int v36 = &unk_1EDD197B8;
  long long v37 = xmmword_18E1F8570;
  double v39 = &v40;
  sub_18DFE2B44((uint64_t)&v46, (uint64_t)&v54, (uint64_t)&v36);
  uint64_t v43 = 0x600000006;
  uint64_t v41 = &unk_1EDD197B8;
  long long v42 = xmmword_18E1F8570;
  uint64_t v44 = &v45;
  uint64_t v33 = 0x100000006;
  unint64_t v31 = &unk_1EDD19758;
  long long v32 = xmmword_18E1FD770;
  uint64_t v34 = v35;
  uint64_t v72 = 0x100000018;
  long long v71 = xmmword_18E1FD9C0;
  uint64_t v70 = &unk_1EDD18618;
  uint64_t v73 = v74;
  sub_18E01BFEC((uint64_t)&v36, (uint64_t)&v31, (uint64_t)&v70, (uint64_t)&v41);
  uint64_t v33 = 0x100000006;
  unint64_t v31 = &unk_1EDD19728;
  long long v32 = xmmword_18E1FD770;
  uint64_t v34 = v35;
  sub_18DFE2B44((uint64_t)&v46, (uint64_t)&v62, (uint64_t)&v31);
  uint64_t v72 = 0x100000006;
  long long v71 = xmmword_18E1FD770;
  uint64_t v70 = &unk_1EDD19728;
  uint64_t v73 = v74;
  sub_18DFE2B44((uint64_t)&v41, (uint64_t)&v31, (uint64_t)&v70);
  v2[1] = *v2;
  sub_18E0C4D50((uint64_t)v2, 6uLL);
  uint64_t v28 = 0;
  uint64_t v29 = v73;
  uint64_t v30 = *v2;
  do
  {
    *(void *)(v30 + v28) = *(void *)&v29[v28];
    v28 += 8;
  }
  while (v28 != 48);
}

uint64_t raven::RavenIonosphereEstimator::HandleEvent(raven::RavenIonosphereEstimator *this, const raven::RavenSolutionEvent *a2)
{
  if (*((unsigned char *)this + 8))
  {
    if (*((unsigned char *)a2 + 209) == 2 && *((unsigned char *)a2 + 208) != 0)
    {
      if (*((unsigned char *)this + 448))
      {
        if (*((unsigned char *)a2 + 1464))
        {
          memcpy((char *)this + 568, (char *)a2 + 8, 0x971uLL);
          if (!*((unsigned char *)this + 9))
          {
            if (!*((unsigned char *)this + 80)) {
              goto LABEL_14;
            }
            uint64_t v7 = CNTimeSpan::operator-((uint64_t)this + 464, (void *)this + 8, v5, v6);
            v63.n128_u64[0] = v7;
            v63.n128_f64[1] = v8;
            if (v7 < 0 || (*(double *)v9.i64 = v8, v8 < 0.0))
            {
              uint64_t v7 = CNTimeSpan::operator-(v63.n128_f64, v9, v10);
              v9.i64[0] = v11;
            }
            if (*(double *)v9.i64 + (double)v7 >= *(double *)(*((void *)this + 476) + 3136))
            {
LABEL_14:
              uint64_t updated = (cnprint::CNPrinter *)raven::RavenIonosphereEstimator::UpdateEstimatorParametersViaPolyfitToKlobucharModel(this);
              if (updated && cnprint::CNPrinter::GetLogLevel(updated) <= 1)
              {
                v63.n128_u16[0] = 12;
                LOBYTE(v58) = 1;
                unsigned __int8 v13 = cnprint::CNLogFormatter::FormatGeneral((const void **)this + 477, "Warning: UpdateEstimatorParametersViaPolyfitToKlobucharModel failed, continuing without updating parameters");
                if (*((char *)this + 3839) >= 0) {
                  LOBYTE(v19) = v13;
                }
                else {
                  uint64_t v19 = *((void *)this + 477);
                }
                cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v63, (unsigned __int8 *)&v58, "%s", v14, v15, v16, v17, v18, v19);
              }
            }
            __n128 v63 = 0uLL;
            int64x2_t v64 = vdupq_n_s64(0x7FF8000000000000uLL);
            int64x2_t v65 = v64;
            int64x2_t v66 = v64;
            int64x2_t v67 = v64;
            int64x2_t v68 = v64;
            uint64_t v71 = 0xA0000000ALL;
            long long v70 = xmmword_18E1FD870;
            uint64_t v69 = &unk_1EDD175C8;
            uint64_t v72 = &v73;
            uint64_t v20 = *((void *)this + 476);
            if (*(unsigned char *)(v20 + 2736)) {
              *(void *)(v20 + 2728) = 0x3EB0C6F7A0B5ED8DLL;
            }
            if (*(double *)(v20 + 2656) > 0.0
              && *(double *)(v20 + 2664) > 0.0
              && *(double *)(v20 + 2672) > 0.0
              && *(double *)(v20 + 2680) > 0.0
              && *(double *)(v20 + 2688) > 0.0
              && *(double *)(v20 + 2696) > 0.0
              && *(double *)(v20 + 2704) > 0.0
              && *(double *)(v20 + 2712) > 0.0
              && *(double *)(v20 + 2720) > 0.0
              && *(double *)(v20 + 2728) > 0.0)
            {
              uint64_t v60 = 0xA0000000ALL;
              int v58 = &unk_1EDD175C8;
              long long v59 = xmmword_18E1FD870;
              uint64_t v61 = (double *)&v62;
              sub_18E145854((uint64_t)v57);
              sub_18DFE2F24((uint64_t)&v58, (uint64_t)v57);
              int v21 = (double *)*((void *)this + 476);
              int v22 = v61;
              float64_t v23 = 1.0;
              *uint64_t v61 = 1.0 / v21[332];
              int v24 = HIDWORD(v59);
              v22[HIDWORD(v59) + 1] = 1.0 / v21[333];
              v22[2 * v24 + 2] = 1.0 / v21[334];
              v22[3 * v24 + 3] = 1.0 / v21[335];
              v22[4 * v24 + 4] = 1.0 / v21[336];
              v22[5 * v24 + 5] = 1.0 / v21[337];
              v22[6 * v24 + 6] = 1.0 / v21[338];
              v22[7 * v24 + 7] = 1.0 / v21[339];
              v22[8 * v24 + 8] = 1.0 / v21[340];
              v22[9 * v24 + 9] = 1.0 / v21[341];
              uint64_t v25 = *((void *)a2 + 146);
              uint64_t v26 = *((void *)a2 + 147);
              double v54 = *((double *)this + 12);
              double v55 = *((double *)this + 11);
              double v27 = *((double *)this + 14);
              double v53 = *((double *)this + 13);
              double v28 = *((double *)this + 15);
              double v29 = *((double *)this + 16);
              double v30 = *((double *)this + 17);
              double v31 = *((double *)this + 18);
              uint64_t v32 = *((void *)this + 19);
              uint64_t v33 = *((void *)this + 20);
              sub_18E14EBB4((uint64_t)v56, (uint64_t)&v58);
              if (*((unsigned char *)a2 + 209) != 2) {
                float64_t v23 = *(double *)(*((void *)this + 476) + 2520);
              }
              raven::RavenIonosphereEstimatorInitArgs::Fill((uint64_t)&v63, v25, v26, (uint64_t)v56, v55, v54, v53, v27, v28, v29, v30, v31, v34, v35, v36, v37, v32, v33, v23);
              v56[0] = &unk_1EDD17478;
              return raven::RavenIonosphereEstimator::Initialize((__n128 *)this, &v63);
            }
            LOWORD(v58) = 12;
            v57[0] = 4;
            unsigned __int8 v46 = cnprint::CNLogFormatter::FormatGeneral((const void **)this + 477, "RavenIonosphereEstimator::HandleEvent(const RavenSolutionEvent& evt), One or more initial state standard deviation values are negative");
            if (*((char *)this + 3839) >= 0) {
              LOBYTE(v52) = v46;
            }
            else {
              uint64_t v52 = *((void *)this + 477);
            }
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v58, v57, "%s", v47, v48, v49, v50, v51, v52);
          }
        }
      }
    }
    return 0;
  }
  v63.n128_u16[0] = 12;
  LOBYTE(v58) = 2;
  unsigned __int8 v39 = cnprint::CNLogFormatter::FormatWarning((raven::RavenIonosphereEstimator *)((char *)this + 3816), "RavenSolutionEvent received, but estimator is not configured");
  if (*((char *)this + 3839) >= 0) {
    LOBYTE(v45) = v39;
  }
  else {
    uint64_t v45 = *((void *)this + 477);
  }
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v63, (unsigned __int8 *)&v58, "%s", v40, v41, v42, v43, v44, v45);
  return 0xFFFFFFFFLL;
}

uint64_t sub_18E145854(uint64_t a1)
{
  *(void *)(a1 + 24) = 0xA0000000ALL;
  *(void *)a1 = &unk_1EDD175C8;
  *(void *)(a1 + 32) = a1 + 40;
  *(_OWORD *)(a1 + 8) = xmmword_18E1FD870;
  return sub_18DFE2CC8(a1, 0.0);
}

uint64_t raven::RavenIonosphereEstimator::Initialize(__n128 *a1, __n128 *a2)
{
  if (!a1->n128_u8[8]) {
    return 0xFFFFFFFFLL;
  }
  if (a1->n128_u8[9])
  {
    v27[0] = 12;
    LOBYTE(v33) = 4;
    char v4 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)&a1[238].n128_i64[1], (uint64_t)&a1[2], "Attempting to initialize an already initialized estimator");
    if (a1[239].n128_i8[15] >= 0) {
      LOBYTE(v10) = v4;
    }
    else {
      unint64_t v10 = a1[238].n128_u64[1];
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v27, (unsigned __int8 *)&v33, "%s", v5, v6, v7, v8, v9, v10);
  }
  a1[1] = *a2;
  a1[2] = *a2;
  a1[3] = *a2;
  sub_18E147D28((uint64_t)&a1[514].n128_i64[1]);
  sub_18E059804((uint64_t)&a1[514].n128_i64[1], a2, v11, v12, v13, v14, v15, v16);
  bzero(&a1[187], 0x330uLL);
  uint64_t v30 = 0x10000000ALL;
  double v28 = &unk_1EDD17628;
  double v31 = &v32;
  long long v29 = xmmword_18E200CF0;
  sub_18DFE2CC8((uint64_t)&v28, 0.0);
  uint64_t v17 = v31;
  *double v31 = a2[1].n128_i64[0];
  v17[1] = a2[1].n128_i64[1];
  double v17[2] = a2[2].n128_i64[0];
  v17[3] = a2[2].n128_i64[1];
  v17[4] = a2[3].n128_i64[0];
  v17[5] = a2[4].n128_i64[0];
  v17[6] = a2[3].n128_i64[1];
  v17[7] = a2[4].n128_i64[1];
  unsigned char v17[8] = a2[5].n128_i64[0];
  v17[9] = a2[5].n128_i64[1];
  sub_18E14EBB4((uint64_t)v27, (uint64_t)&a2[6]);
  uint64_t v24 = 0x10000000ALL;
  int v22 = &unk_1EDD17628;
  long long v23 = xmmword_18E200CF0;
  uint64_t v25 = &v26;
  sub_18DFE2B44((uint64_t)v27, (uint64_t)&v28, (uint64_t)&v22);
  uint64_t v20 = DWORD2(v29) | 0x100000000;
  sub_18E14E5D4((uint64_t)&v33, (uint64_t)&v28);
  int32x4_t v18 = vdupq_lane_s32((int32x2_t)v20, 0);
  v18.i32[1] = 1;
  int32x4_t v21 = v18;
  int32x4_t v34 = v18;
  sub_18DFE2F24((uint64_t)&a1[242], (uint64_t)&v33);
  sub_18DFE2F24((uint64_t)&a1[249].n128_i64[1], (uint64_t)v27);
  sub_18E14E5D4((uint64_t)&v33, (uint64_t)&v22);
  int32x4_t v34 = v21;
  sub_18DFE2F24((uint64_t)&a1[302], (uint64_t)&v33);
  sub_18DFE2F24((uint64_t)&a1[309].n128_i64[1], (uint64_t)&a1[242]);
  sub_18DFE2F24((uint64_t)&a1[317], (uint64_t)&a1[249].n128_i64[1]);
  sub_18DFE2F24((uint64_t)&a1[369].n128_i64[1], (uint64_t)&a1[302]);
  a1[377].n128_u8[8] = 0;
  a1[377].n128_u64[0] = 0x3FF0000000000000;
  a1[377].n128_u32[3] = 1;
  uint64_t v33 = 0x3FE0000000000000;
  uint64_t result = sub_18E06E568((uint64_t)&a1[510].n128_i64[1], (double *)&v33);
  if (result) {
    return 0xFFFFFFFFLL;
  }
  a1->n128_u8[9] = 1;
  return result;
}

uint64_t raven::RavenIonosphereEstimator::HandleEvent(raven::RavenIonosphereEstimator *this, const raven::TimeMarkEvent *a2)
{
  long long v2 = *(_OWORD *)((char *)a2 + 24);
  *((_OWORD *)this + 29) = *(_OWORD *)((char *)a2 + 8);
  *((_OWORD *)this + 30) = v2;
  long long v3 = *(_OWORD *)((char *)a2 + 40);
  long long v4 = *(_OWORD *)((char *)a2 + 56);
  long long v5 = *(_OWORD *)((char *)a2 + 88);
  *((_OWORD *)this + 33) = *(_OWORD *)((char *)a2 + 72);
  *((_OWORD *)this + 34) = v5;
  *((_OWORD *)this + 31) = v3;
  *((_OWORD *)this + 32) = v4;
  if (!*((unsigned char *)this + 8)) {
    return 32;
  }
  if (!*((unsigned char *)this + 9)) {
    return 0;
  }
  v55.i64[0] = (*(uint64_t (**)(const raven::TimeMarkEvent *))(*(void *)a2 + 16))(a2);
  v55.i64[1] = v8;
  int8x16_t v51 = *((int8x16_t *)this + 2);
  unint64_t v10 = (cnprint::CNPrinter *)CNTimeSpan::operator-((uint64_t)&v55, &v51, v51, v9);
  *(double *)v13.i64 = v12 + (double)(uint64_t)v10;
  if (*(double *)v13.i64 >= 0.0)
  {
    uint64_t v25 = *((void *)this + 476);
    *(double *)v13.i64 = *(double *)v13.i64 / *(double *)(v25 + 2568);
    v11.i64[0] = 1.0;
    if (*(double *)v13.i64 > 1.0)
    {
      if (!*((unsigned char *)this + 80)) {
        goto LABEL_17;
      }
      uint64_t v26 = CNTimeSpan::operator-((uint64_t)this + 464, (void *)this + 8, v13, v11);
      v51.i64[0] = v26;
      *(double *)&v51.i64[1] = v27;
      if (v26 < 0 || (*(double *)v28.i64 = v27, v27 < 0.0))
      {
        uint64_t v26 = CNTimeSpan::operator-((double *)v51.i64, v28, v29);
        v28.i64[0] = v30;
      }
      if (*(double *)v28.i64 + (double)v26 >= *(double *)(v25 + 3136))
      {
LABEL_17:
        uint64_t updated = (cnprint::CNPrinter *)raven::RavenIonosphereEstimator::UpdateEstimatorParametersViaPolyfitToKlobucharModel(this);
        if (updated && cnprint::CNPrinter::GetLogLevel(updated) <= 1)
        {
          v51.i16[0] = 12;
          v54.i8[0] = 1;
          unsigned __int8 v32 = cnprint::CNLogFormatter::FormatGeneral((const void **)this + 477, "Warning: UpdateEstimatorParametersViaPolyfitToKlobucharModel failed, continuing without updating parameters");
          if (*((char *)this + 3839) >= 0) {
            LOBYTE(v38) = v32;
          }
          else {
            uint64_t v38 = *((void *)this + 477);
          }
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v51, (unsigned __int8 *)&v54, "%s", v33, v34, v35, v36, v37, v38);
        }
      }
      *(_OWORD *)((char *)this + 3396) = 0u;
      *(_OWORD *)((char *)this + 3368) = 0u;
      *(_OWORD *)((char *)this + 3384) = 0u;
      *(_OWORD *)((char *)this + 3336) = 0u;
      *(_OWORD *)((char *)this + 3352) = 0u;
      *(_OWORD *)((char *)this + 3304) = 0u;
      *(_OWORD *)((char *)this + 3320) = 0u;
      *(_OWORD *)((char *)this + 3272) = 0u;
      *(_OWORD *)((char *)this + 3288) = 0u;
      *(_OWORD *)((char *)this + 3240) = 0u;
      *(_OWORD *)((char *)this + 3256) = 0u;
      *(_OWORD *)((char *)this + 3208) = 0u;
      *(_OWORD *)((char *)this + 3224) = 0u;
      *(_OWORD *)((char *)this + 3176) = 0u;
      *(_OWORD *)((char *)this + 3192) = 0u;
      *(_OWORD *)((char *)this + 3144) = 0u;
      *(_OWORD *)((char *)this + 3160) = 0u;
      *(_OWORD *)((char *)this + 3112) = 0u;
      *(_OWORD *)((char *)this + 3128) = 0u;
      *(_OWORD *)((char *)this + 3080) = 0u;
      *(_OWORD *)((char *)this + 3096) = 0u;
      *(_OWORD *)((char *)this + 3048) = 0u;
      *(_OWORD *)((char *)this + 3064) = 0u;
      *(_OWORD *)((char *)this + 3016) = 0u;
      *(_OWORD *)((char *)this + 3032) = 0u;
      int8x16_t v39 = *((int8x16_t *)this + 2);
      int8x16_t v53 = v55;
      int8x16_t v54 = v39;
      int8x16_t v51 = 0uLL;
      uint64_t v52 = 0x7FF8000000000000;
      BOOL EstimatorPredictAndUpdateArguments = raven::RavenIonosphereEstimator::GetEstimatorPredictAndUpdateArguments((uint64_t)this, (uint64_t)&v54, &v53, (uint64_t)&v51, *(double *)v55.i64, v39);
      if (EstimatorPredictAndUpdateArguments)
      {
        uint64_t v24 = raven::RavenIonosphereEstimator::PredictAndUpdate((uint64_t)this, (uint64_t)&v51);
        uint64_t v49 = v24;
        sub_18E056F48(&v49);
        return v24;
      }
      if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)EstimatorPredictAndUpdateArguments) <= 1)
      {
        LOWORD(v49) = 12;
        unsigned __int8 v50 = 1;
        char v41 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 3816, (uint64_t)&v55, "Could not get predict and update arguments");
        if (*((char *)this + 3839) >= 0) {
          LOBYTE(v47) = v41;
        }
        else {
          uint64_t v47 = *((void *)this + 477);
        }
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v49, &v50, "%s", v42, v43, v44, v45, v46, v47);
      }
    }
    return 0;
  }
  if (cnprint::CNPrinter::GetLogLevel(v10) <= 1)
  {
    v54.i16[0] = 12;
    v53.i8[0] = 1;
    v51.i64[0] = (*(uint64_t (**)(const raven::TimeMarkEvent *))(*(void *)a2 + 16))(a2);
    v51.i64[1] = v14;
    double v15 = *((double *)this + 5) + (double)*((uint64_t *)this + 4);
    uint64_t v16 = (*(uint64_t (**)(const raven::TimeMarkEvent *))(*(void *)a2 + 16))(a2);
    cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 3816, (uint64_t)&v51, "Estimator time is greater than event time,%.3lf > %.3lf", v15, v17 + (double)v16);
    if (*((char *)this + 3839) >= 0) {
      LOBYTE(v23) = (_BYTE)this - 24;
    }
    else {
      uint64_t v23 = *((void *)this + 477);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v54, (unsigned __int8 *)&v53, "%s", v18, v19, v20, v21, v22, v23);
  }
  return 64;
}

double raven::RavenIonosphereEstimator::ResetMeasurementCounts(raven::RavenIonosphereEstimator *this)
{
  double result = 0.0;
  *(_OWORD *)((char *)this + 3396) = 0u;
  *(_OWORD *)((char *)this + 3368) = 0u;
  *(_OWORD *)((char *)this + 3384) = 0u;
  *(_OWORD *)((char *)this + 3336) = 0u;
  *(_OWORD *)((char *)this + 3352) = 0u;
  *(_OWORD *)((char *)this + 3304) = 0u;
  *(_OWORD *)((char *)this + 3320) = 0u;
  *(_OWORD *)((char *)this + 3272) = 0u;
  *(_OWORD *)((char *)this + 3288) = 0u;
  *(_OWORD *)((char *)this + 3240) = 0u;
  *(_OWORD *)((char *)this + 3256) = 0u;
  *(_OWORD *)((char *)this + 3208) = 0u;
  *(_OWORD *)((char *)this + 3224) = 0u;
  *(_OWORD *)((char *)this + 3176) = 0u;
  *(_OWORD *)((char *)this + 3192) = 0u;
  *(_OWORD *)((char *)this + 3144) = 0u;
  *(_OWORD *)((char *)this + 3160) = 0u;
  *(_OWORD *)((char *)this + 3112) = 0u;
  *(_OWORD *)((char *)this + 3128) = 0u;
  *(_OWORD *)((char *)this + 3080) = 0u;
  *(_OWORD *)((char *)this + 3096) = 0u;
  *(_OWORD *)((char *)this + 3048) = 0u;
  *(_OWORD *)((char *)this + 3064) = 0u;
  *(_OWORD *)((char *)this + 3016) = 0u;
  *(_OWORD *)((char *)this + 3032) = 0u;
  return result;
}

uint64_t raven::RavenIonosphereEstimator::PredictAndUpdate(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a1 + 9)) {
    return 32;
  }
  uint64_t v4 = a1 + 8232;
  v225[0] = *(__n128 *)a2;
  double v5 = *(double *)(a2 + 16);
  if (v5 < 0.0)
  {
    uint64_t v6 = (__n128 *)(a1 + 32);
    sub_18E14BB40(a1 + 8232, (__n128 *)(a1 + 32));
    *(unsigned char *)uint64_t v4 = 0;
    sub_18E059804(v4, v6, v7, v8, v9, v10, v11, v12);
    return 64;
  }
  if (v5 <= 0.0) {
    return 0;
  }
  if (sub_18DEE8C5C(v225[0].n128_f64, (double *)(a1 + 8240)))
  {
    *(_WORD *)uint64_t v221 = 2;
    LOBYTE(v200) = 4;
    uint64_t v20 = (cnprint::CNPrinter *)v221;
    uint64_t v21 = (unsigned __int8 *)&v200;
    goto LABEL_56;
  }
  int8x16_t v22 = (int8x16_t)v225[0];
  *(__n128 *)(a1 + 8256) = v225[0];
  uint64_t v23 = CNTimeSpan::operator-(a1 + 8256, (void *)(a1 + 8240), v22, v19);
  uint64_t v26 = *(unsigned int *)(a1 + 11416);
  if ((int)v26 < 1)
  {
LABEL_13:
    *(_DWORD *)(v4 + 12704) = 44;
    *(_OWORD *)(v4 + 4688) = xmmword_18E21A0B0;
    *(_OWORD *)(a1 + 13664) = xmmword_18E21A0B0;
    *(_OWORD *)(v4 + 5648) = xmmword_18E21A0B0;
    *(_OWORD *)(a1 + 14272) = xmmword_18E21A0B0;
    *(_OWORD *)(v4 + 0x2000) = xmmword_18E21A0B0;
    *(_OWORD *)(a1 + 16640) = xmmword_18E21A0B0;
    *(_OWORD *)(v4 + 10560) = xmmword_18E21A0B0;
    *(_OWORD *)(v4 + 12720) = xmmword_18E21A0B0;
    *(_OWORD *)(a1 + 21344) = xmmword_18E21A0B0;
    *(void *)&v221[16] = 0;
    *(void *)&v221[8] = 0;
    *(void *)uint64_t v221 = &v221[8];
    if ((int)v26 < 1)
    {
      int v33 = 0;
      goto LABEL_65;
    }
    uint64_t v32 = 0;
    int v153 = 0;
    int v155 = 0;
    int v33 = 0;
    while (1)
    {
      if (*(double *)(*(void *)(a1 + 10168) + 8 * v32) <= 1.0)
      {
        ++v153;
        int v34 = *(_DWORD *)(*(void *)(a1 + 9776) + 4 * v32);
        int v35 = v34 + v155;
        if (v33 > 43 || v35 >= 45)
        {
          uint64_t v46 = *(unsigned char **)v221;
          if (*(unsigned char **)v221 == &v221[8]) {
            goto LABEL_80;
          }
          uint64_t v47 = 0;
          int v48 = -1;
          do
          {
            if (*((_DWORD *)v46 + 10) > v48)
            {
              uint64_t v47 = (uint64_t *)*((void *)v46 + 4);
              int v48 = *((_DWORD *)v46 + 10);
            }
            uint64_t v49 = (void *)*((void *)v46 + 1);
            if (v49)
            {
              do
              {
                unsigned __int8 v50 = v49;
                uint64_t v49 = (void *)*v49;
              }
              while (v49);
            }
            else
            {
              do
              {
                unsigned __int8 v50 = (unsigned char *)*((void *)v46 + 2);
                BOOL v51 = *(void *)v50 == (void)v46;
                uint64_t v46 = v50;
              }
              while (!v51);
            }
            uint64_t v46 = v50;
          }
          while (v50 != &v221[8]);
          double v200 = *(double *)&v47;
          if (!v47)
          {
LABEL_80:
            LOWORD(v174) = 2;
            LOBYTE(v216) = 4;
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v174, (unsigned __int8 *)&v216, "MeasurementAccumulator.LockAccumulator() most_common_measurement_type == nullptr", v14, v15, v16, v17, v18, v150);
            goto LABEL_63;
          }
          if (*(uint64_t **)(*(void *)(a1 + 11456) + 8 * v32) == v47) {
            goto LABEL_49;
          }
          int v36 = v33 - 1;
          if (v33 < 1)
          {
LABEL_62:
            LOWORD(v174) = 2;
            LOBYTE(v216) = 4;
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v174, (unsigned __int8 *)&v216, "MeasurementAccumulator.LockAccumulator() found_idx == false", v14, v15, v16, v17, v18, v150);
LABEL_63:
            sub_18DF064FC(*(void **)&v221[8]);
            goto LABEL_57;
          }
          LODWORD(v52) = v33;
          while (1)
          {
            uint64_t v52 = (v52 - 1);
            if (*(uint64_t **)(*(void *)(a1 + 20976) + 8 * v52) == v47) {
              break;
            }
            if ((int)v52 <= 0) {
              goto LABEL_62;
            }
          }
          if (v35 - *(_DWORD *)(*(void *)(a1 + 13688) + 4 * v52) > 44) {
            goto LABEL_49;
          }
          int8x16_t v53 = sub_18E080188((uint64_t **)v221, (unint64_t)v47, (uint64_t **)&v200);
          --*((_DWORD *)v53 + 10);
          v155 -= *(_DWORD *)(*(void *)(a1 + 13688) + 4 * v52);
          int v33 = v52;
        }
        else
        {
          int v36 = v33;
        }
        *(_OWORD *)(*(void *)(a1 + 12944) + 16 * v33) = *(_OWORD *)(*(void *)(a1 + 8328) + 16 * v32);
        *(_DWORD *)(*(void *)(a1 + 13688) + 4 * v33) = v34;
        *(void *)(*(void *)(a1 + 13904) + 8 * v33) = *(void *)(*(void *)(a1 + 10168) + 8 * v32);
        sub_18DFE2F24(*(void *)(a1 + 14296) + 48 * v33, *(void *)(a1 + 10912) + 48 * v32);
        *(_DWORD *)(*(void *)(a1 + 16448) + 4 * v33) = *(_DWORD *)(*(void *)(a1 + 10960) + 4 * v32);
        sub_18DFE2F24(*(void *)(a1 + 16664) + 48 * v33, *(void *)(a1 + 11352) + 48 * v32);
        sub_18DFE2F24(*(void *)(a1 + 18816) + 48 * v33, *(void *)(a1 + 11400) + 48 * v32);
        *(void *)(*(void *)(a1 + 20976) + 8 * v33) = *(void *)(*(void *)(a1 + 11456) + 8 * v32);
        *(void *)(*(void *)(a1 + 21368) + 8 * v33) = *(void *)(*(void *)(a1 + 12200) + 8 * v32);
        uint64_t v37 = (uint64_t **)(*(void *)(a1 + 11456) + 8 * v32);
        uint64_t v38 = *(void *)&v221[8];
        int8x16_t v39 = *v37;
        if (!*(void *)&v221[8]) {
          goto LABEL_29;
        }
        uint64_t v40 = (uint64_t *)&v221[8];
        do
        {
          char v41 = (uint64_t *)v38;
          uint64_t v42 = v40;
          unint64_t v43 = *(void *)(v38 + 32);
          uint64_t v44 = (uint64_t *)(v38 + 8);
          if (v43 >= (unint64_t)v39)
          {
            uint64_t v44 = v41;
            uint64_t v40 = v41;
          }
          uint64_t v38 = *v44;
        }
        while (v38);
        if (v40 != (uint64_t *)&v221[8]
          && (v43 >= (unint64_t)v39 ? (uint64_t v45 = v41) : (uint64_t v45 = v42), (unint64_t)v39 >= v45[4]))
        {
          if (v43 < (unint64_t)v39) {
            char v41 = v42;
          }
          ++*((_DWORD *)v41 + 10);
        }
        else
        {
LABEL_29:
          *((_DWORD *)sub_18E080188((uint64_t **)v221, (unint64_t)v39, v37) + 10) = 1;
        }
        int v33 = v36 + 1;
        v155 += v34;
        LODWORD(v26) = *(_DWORD *)(a1 + 11416);
      }
LABEL_49:
      if (++v32 >= (int)v26)
      {
        if (v153 > v33)
        {
          LOWORD(v200) = 2;
          LOBYTE(v174) = 2;
          double v151 = v225[0].n128_f64[1] + (double)v225[0].n128_i64[0];
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v200, (unsigned __int8 *)&v174, "t,%.3lf,WARNING: MeasurementAccumulator.LockAccumulator() truncating measurements,nh,%d,eligible,%d,num_truncated,%d", v14, v15, v16, v17, v18, SLOBYTE(v151));
        }
LABEL_65:
        *(_DWORD *)(v4 + 12704) = v33;
        *(_DWORD *)(a1 + 12920) = v33;
        *(_DWORD *)(a1 + 12924) = 1;
        *(_DWORD *)(a1 + 12928) = v33;
        *(_DWORD *)(a1 + 12932) = v33;
        *(_DWORD *)(a1 + 13664) = v33;
        *(_DWORD *)(a1 + 13668) = 1;
        *(_DWORD *)(a1 + 13672) = v33;
        *(_DWORD *)(a1 + 13676) = v33;
        *(_DWORD *)(a1 + 13880) = v33;
        *(_DWORD *)(a1 + 13884) = 1;
        *(_DWORD *)(a1 + 13888) = v33;
        *(_DWORD *)(a1 + 13892) = v33;
        *(_DWORD *)(a1 + 14272) = v33;
        *(_DWORD *)(a1 + 14276) = 1;
        *(_DWORD *)(a1 + 14280) = v33;
        *(_DWORD *)(a1 + 14284) = v33;
        *(_DWORD *)(v4 + 0x2000) = v33;
        *(_DWORD *)(v4 + 8196) = 1;
        *(_DWORD *)(v4 + 8200) = v33;
        *(_DWORD *)(v4 + 8204) = v33;
        *(_DWORD *)(v4 + 8408) = v33;
        *(_DWORD *)(v4 + 8412) = 1;
        *(_DWORD *)(v4 + 8416) = v33;
        *(_DWORD *)(v4 + 8420) = v33;
        *(_DWORD *)(v4 + 10560) = v33;
        *(_DWORD *)(v4 + 10564) = 1;
        *(_DWORD *)(v4 + 10568) = v33;
        *(_DWORD *)(v4 + 10572) = v33;
        *(_DWORD *)(v4 + 12720) = v33;
        *(_DWORD *)(v4 + 12724) = 1;
        *(_DWORD *)(v4 + 12728) = v33;
        *(_DWORD *)(v4 + 12732) = v33;
        *(_DWORD *)(v4 + 13112) = v33;
        *(_DWORD *)(v4 + 13116) = 1;
        *(_DWORD *)(v4 + 13120) = v33;
        *(_DWORD *)(v4 + 13124) = v33;
        *(unsigned char *)(v4 + 1) = 1;
        sub_18DF064FC(*(void **)&v221[8]);
        if (!cnprint::CNPrinter::GetLogLevel(v69))
        {
          *(_WORD *)uint64_t v221 = 12;
          LOBYTE(v200) = 0;
          double v77 = v225[0].n128_f64[1] + (double)v225[0].n128_i64[0];
          int v78 = sub_18E148178(v4, v70, v71, v72, v73, v74, v75, v76);
          cnprint::CNLogFormatter::FormatGeneral((const void **)(a1 + 3816), "Predict,%.2lf,dt,%.3lf,meas_types,%d", v77, v5, v78);
          if (*(char *)(a1 + 3839) >= 0) {
            LOBYTE(v84) = a1 - 24;
          }
          else {
            uint64_t v84 = *(void *)(a1 + 3816);
          }
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)v221, (unsigned __int8 *)&v200, "%s", v79, v80, v81, v82, v83, v84);
        }
        uint64_t v222 = 0xA0000000ALL;
        *(void *)uint64_t v221 = &unk_1EDD175C8;
        uint64_t v223 = &v224;
        *(_OWORD *)&v221[8] = xmmword_18E1FD870;
        sub_18DFE2CC8((uint64_t)v221, 0.0);
        if (sub_18E1481C8(a1))
        {
          sub_18E14BB40(v4, (__n128 *)(a1 + 32));
          *(unsigned char *)uint64_t v4 = 0;
          *(void *)&double v98 = sub_18E059804(v4, (__n128 *)(a1 + 32), v92, v93, v94, v95, v96, v97).n128_u64[0];
          LOWORD(v200) = 12;
          LOBYTE(v174) = 4;
          unsigned __int8 v99 = cnprint::CNLogFormatter::FormatGeneral((const void **)(a1 + 3816), "GetProcessNoiseInformationMatrix(),failed", v98);
          if (*(char *)(a1 + 3839) >= 0) {
            LOBYTE(v105) = v99;
          }
          else {
            uint64_t v105 = *(void *)(a1 + 3816);
          }
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v200, (unsigned __int8 *)&v174, "%s", v100, v101, v102, v103, v104, v105);
          return 256;
        }
        uint64_t v218 = 0x200000001;
        long long v217 = xmmword_18E1FD740;
        uint64_t v216 = &unk_1EDD181F8;
        uint64_t v219 = &v220;
        uint64_t v220 = 0xA0000000ALL;
        uint64_t v213 = 0x100000001;
        *(void *)&long long v106 = 0x100000001;
        *((void *)&v106 + 1) = 0x100000001;
        long long v212 = v106;
        double v211 = &unk_1EDD17F88;
        float64x2_t v214 = &v215;
        uint64_t v215 = sub_18E148638;
        double v200 = v5;
        long long v207 = *(_OWORD *)(a2 + 120);
        long long v208 = *(_OWORD *)(a2 + 136);
        long long v209 = *(_OWORD *)(a2 + 152);
        long long v210 = *(_OWORD *)(a2 + 168);
        long long v206 = *(_OWORD *)(a2 + 104);
        long long v202 = *(_OWORD *)(a2 + 200);
        long long v203 = *(_OWORD *)(a2 + 216);
        long long v204 = *(_OWORD *)(a2 + 232);
        long long v205 = *(_OWORD *)(a2 + 248);
        long long v201 = *(_OWORD *)(a2 + 184);
        uint64_t v197 = 0x100000001;
        long long v196 = v106;
        long long v195 = &unk_1EDD18018;
        long long v198 = &v199;
        uint64_t v199 = (uint64_t **)&v200;
        uint64_t v192 = 0x100000001;
        long long v191 = v106;
        unsigned __int8 v190 = &unk_1EDD18078;
        long long v193 = &v194;
        int v194 = 10;
        uint64_t v187 = 0x100000001;
        long long v186 = v106;
        long double v185 = &unk_1EDD17FB8;
        double v188 = &v189;
        long long v189 = sub_18E148AD8;
        double v174 = v5;
        long long v181 = *(_OWORD *)(a2 + 120);
        long long v182 = *(_OWORD *)(a2 + 136);
        long long v183 = *(_OWORD *)(a2 + 152);
        long long v184 = *(_OWORD *)(a2 + 168);
        long long v180 = *(_OWORD *)(a2 + 104);
        long long v176 = *(_OWORD *)(a2 + 200);
        long long v177 = *(_OWORD *)(a2 + 216);
        long long v178 = *(_OWORD *)(a2 + 232);
        long long v179 = *(_OWORD *)(a2 + 248);
        long long v175 = *(_OWORD *)(a2 + 184);
        uint64_t v171 = 0x100000001;
        double v169 = &unk_1EDD18018;
        long long v170 = v106;
        double v172 = &v173;
        double v173 = &v174;
        double v168 = v5;
        if (!*(unsigned char *)(v4 + 1))
        {
          sub_18E148134((unsigned char *)v4, (__n128 *)(a1 + 32));
          return 512;
        }
        int v107 = sub_18E148178(v4, v85, v86, v87, v88, v89, v90, v91);
        uint64_t v108 = a1 + 3864;
        int v156 = v107;
        if (v107)
        {
          unsigned int v109 = sub_18E148D70(v108, (uint64_t)v221, a1 + 13872, a1 + 14264, a1 + 18784, (uint64_t)&v216, (uint64_t)&v211, (uint64_t)&v195, a1 + 20944, a1 + 21336, (uint64_t)&v190, (uint64_t)&v185, (uint64_t)&v169);
          uint64_t v13 = 10;
        }
        else
        {
          unsigned int v109 = sub_18E14920C(v108);
          uint64_t v13 = 2;
        }
        double v165 = 0;
        double v166 = 0;
        uint64_t v167 = 0;
        sub_18E091534(&v165, *(void *)(a1 + 6160), *(void *)(a1 + 6168), (uint64_t)(*(void *)(a1 + 6168) - *(void *)(a1 + 6160)) >> 5);
        double v162 = 0;
        double v163 = 0;
        uint64_t v164 = 0;
        sub_18E091534(&v162, *(void *)(a1 + 6136), *(void *)(a1 + 6144), (uint64_t)(*(void *)(a1 + 6144) - *(void *)(a1 + 6136)) >> 5);
        uint64_t v159 = 0;
        uint64_t v160 = 0;
        uint64_t v161 = 0;
        sub_18E091534(&v159, *(void *)(a1 + 6184), *(void *)(a1 + 6192), (uint64_t)(*(void *)(a1 + 6192) - *(void *)(a1 + 6184)) >> 5);
        double v111 = v165;
        uint64_t v110 = v166;
        unint64_t v112 = ((char *)v166 - (char *)v165) >> 5;
        uint64_t v113 = (unsigned int *)v162;
        double v152 = v163;
        unint64_t v114 = ((char *)v163 - (char *)v162) >> 5;
        uint64_t v154 = (v160 - (uint64_t)v159) >> 5;
        if (v156)
        {
          *(void *)(a1 + 2992) += v112;
          raven::RavenIonosphereEstimator::AddToAcceptedMeasurementTypeCount((cnprint::CNPrinter *)a1, &v165);
          *(void *)(a1 + 3000) += v114;
          raven::RavenIonosphereEstimator::AddToRejectedMeasurementTypeCount((cnprint::CNPrinter *)a1, (unsigned int **)&v162);
          *(void *)(a1 + 3008) += v154;
          raven::RavenIonosphereEstimator::AddToUnusedMeasurementTypeCount((cnprint::CNPrinter *)a1, (unsigned int **)&v159);
        }
        if (v109 > 0x16) {
          goto LABEL_105;
        }
        if (((1 << v109) & 0x440408) == 0)
        {
          if (((1 << v109) & 0x301) != 0)
          {
            uint64_t v115 = (cnprint::CNPrinter *)sub_18E05F838(a1 + 8160, &v168);
            if (v156)
            {
              if (v110 != v111)
              {
                unsigned int v122 = 1;
                do
                {
                  uint64_t v115 = (cnprint::CNPrinter *)sub_18E0917E0(a1 + 8160);
                  BOOL v123 = v112 > v122++;
                }
                while (v123);
              }
              if (v152 != v113)
              {
                unsigned int v124 = 1;
                do
                {
                  uint64_t v115 = (cnprint::CNPrinter *)sub_18E0799B0(a1 + 8160);
                  BOOL v123 = v114 > v124++;
                }
                while (v123);
              }
              if (v112 <= v114)
              {
                if (cnprint::CNPrinter::GetLogLevel(v115) <= 1)
                {
                  LOWORD(v157) = 12;
                  unsigned __int8 v158 = 1;
                  char v149 = cnprint::CNLogFormatter::FormatGeneral(a1 + 3816, (uint64_t)v225, "accepted_meas,%zu,rejected_meas,%zu,unused_meas,%zu", v112, v114, v154);
                  if (*(char *)(a1 + 3839) >= 0) {
                    LOBYTE(v131) = v149;
                  }
                  else {
                    uint64_t v131 = *(void *)(a1 + 3816);
                  }
LABEL_118:
                  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v157, &v158, "%s", v126, v127, v128, v129, v130, v131);
                }
              }
              else if (!cnprint::CNPrinter::GetLogLevel(v115))
              {
                LOWORD(v157) = 12;
                unsigned __int8 v158 = 0;
                char v125 = cnprint::CNLogFormatter::FormatGeneral(a1 + 3816, (uint64_t)v225, "accepted_meas,%zu,rejected_meas,%zu,unused_meas,%zu", v112, v114, v154);
                if (*(char *)(a1 + 3839) >= 0) {
                  LOBYTE(v131) = v125;
                }
                else {
                  uint64_t v131 = *(void *)(a1 + 3816);
                }
                goto LABEL_118;
              }
            }
            *(__n128 *)(a1 + 32) = v225[0];
            long long v157 = 0uLL;
            if (!sub_18E14BA68(v4, &v157, v116, v117, v118, v119, v120, v121)) {
              *(_OWORD *)(a1 + 48) = v157;
            }
LABEL_121:
            sub_18E148134((unsigned char *)v4, v225);
            *(void *)&long long v157 = &v159;
            sub_18E0694B8((void ***)&v157);
            uint64_t v159 = &v162;
            sub_18E0694B8((void ***)&v159);
            double v162 = &v165;
            sub_18E0694B8((void ***)&v162);
            return v13;
          }
          if (((1 << v109) & 0x300000) != 0)
          {
            LOWORD(v157) = 12;
            unsigned __int8 v158 = 4;
            char v132 = cnprint::CNLogFormatter::FormatGeneral(a1 + 3816, (uint64_t)v225, "Resetting due to prediction error code %d", v109);
            if (*(char *)(a1 + 3839) >= 0) {
              LOBYTE(v138) = v132;
            }
            else {
              uint64_t v138 = *(void *)(a1 + 3816);
            }
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v157, &v158, "%s", v133, v134, v135, v136, v137, v138);
            v13 |= 6uLL;
            goto LABEL_121;
          }
LABEL_105:
          v13 |= 1uLL;
        }
        LOWORD(v157) = 12;
        unsigned __int8 v158 = 4;
        char v139 = cnprint::CNLogFormatter::FormatGeneral(a1 + 3816, (uint64_t)v225, "Unexpected predict and update return code %d", v109);
        if (*(char *)(a1 + 3839) >= 0) {
          LOBYTE(v145) = v139;
        }
        else {
          uint64_t v145 = *(void *)(a1 + 3816);
        }
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v157, &v158, "%s", v140, v141, v142, v143, v144, v145);
        if ((v13 & 8) != 0)
        {
          sub_18E14BB40(v4, v225);
          uint64_t v146 = raven::RavenIonosphereEstimator::PredictAndUpdate(a1, a2);
          if (v114 + v112 + v154)
          {
            uint64_t v147 = a1 + 8160;
            unsigned int v148 = 1;
            do
            {
              sub_18E0799B0(v147);
              BOOL v123 = v114 + v112 + v154 > v148++;
            }
            while (v123);
          }
          v13 |= v146 | 0x18;
        }
        goto LABEL_121;
      }
    }
  }
  uint64_t v27 = 0;
  *(double *)v25.i64 = (double)v23;
  double v28 = v24 + (double)v23;
  int8x16_t v29 = *(_OWORD **)(a1 + 8328);
  while (1)
  {
    *(_OWORD *)uint64_t v221 = *v29;
    *(double *)v25.i64 = (double)CNTimeSpan::operator-((uint64_t)v221, (void *)(a1 + 8240), *(int8x16_t *)v221, v25);
    double v31 = (v30 + *(double *)v25.i64) / v28;
    if (v31 < 0.0) {
      break;
    }
    *(double *)(*(void *)(a1 + 10168) + v27) = v31;
    v27 += 8;
    ++v29;
    if (8 * v26 == v27) {
      goto LABEL_13;
    }
  }
  LOWORD(v200) = 2;
  LOBYTE(v174) = 2;
  uint64_t v20 = (cnprint::CNPrinter *)&v200;
  uint64_t v21 = (unsigned __int8 *)&v174;
LABEL_56:
  cnprint::CNPrinter::Print(v20, v21, "WARNING: MeasurementAccumulator.LockAccumulator() called with bad t_end.", v14, v15, v16, v17, v18, v150);
LABEL_57:
  sub_18E14BB40(v4, (__n128 *)(a1 + 32));
  *(unsigned char *)uint64_t v4 = 0;
  *(void *)&double v60 = sub_18E059804(v4, (__n128 *)(a1 + 32), v54, v55, v56, v57, v58, v59).n128_u64[0];
  *(_WORD *)uint64_t v221 = 12;
  LOBYTE(v200) = 4;
  unsigned __int8 v61 = cnprint::CNLogFormatter::FormatGeneral((const void **)(a1 + 3816), "PredictAndUpdate(), could not lock accumulator", v60);
  if (*(char *)(a1 + 3839) >= 0) {
    LOBYTE(v67) = v61;
  }
  else {
    uint64_t v67 = *(void *)(a1 + 3816);
  }
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)v221, (unsigned __int8 *)&v200, "%s", v62, v63, v64, v65, v66, v67);
  return 128;
}

void sub_18E146CD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void ****a18, uint64_t a19, uint64_t a20,void ***a21,uint64_t a22,uint64_t a23,void **a24,uint64_t a25,uint64_t a26,char a27)
{
  a18 = &a21;
  sub_18E0694B8((void ***)&a18);
  a21 = &a24;
  sub_18E0694B8((void ***)&a21);
  a24 = (void **)&a27;
  sub_18E0694B8(&a24);
  _Unwind_Resume(a1);
}

uint64_t raven::RavenIonosphereEstimator::PopulateEvent(raven::RavenIonosphereEstimator *this, raven::ThinShellIonosphereParametersEvent *a2)
{
  char IsConsistent = raven::RavenIonosphereEstimator::IsConsistent(this);
  if (!*((unsigned char *)this + 9))
  {
    raven::RavenIonosphereEstimator::IsSane(this);
    v41.i16[0] = 12;
    __src[0] = 2;
    unsigned __int8 v9 = cnprint::CNLogFormatter::FormatWarning((raven::RavenIonosphereEstimator *)((char *)this + 3816), "RavenIonosphereEstimator::PopulateEvent(ThinShellIonosphereParametersEvent& evt), Estimator initialized,%d");
LABEL_30:
    if (*((char *)this + 3839) >= 0) {
      LOBYTE(v38) = v9;
    }
    else {
      uint64_t v38 = *((void *)this + 477);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v41, __src, "%s", v10, v11, v12, v13, v14, v38);
    return 0xFFFFFFFFLL;
  }
  char v5 = IsConsistent;
  char v6 = sub_18E147E70((uint64_t)this + 3864);
  char IsSane = raven::RavenIonosphereEstimator::IsSane(this);
  if ((v6 & 1) == 0)
  {
    v41.i16[0] = 12;
    __src[0] = 2;
    unsigned __int8 v9 = cnprint::CNLogFormatter::FormatWarning((raven::RavenIonosphereEstimator *)((char *)this + 3816), "RavenIonosphereEstimator::PopulateEvent(ThinShellIonosphereParametersEvent& evt), Estimator observable,%d");
    goto LABEL_30;
  }
  if ((v5 & 1) == 0)
  {
    v41.i16[0] = 12;
    __src[0] = 2;
    unsigned __int8 v9 = cnprint::CNLogFormatter::FormatWarning((raven::RavenIonosphereEstimator *)((char *)this + 3816), "RavenIonosphereEstimator::PopulateEvent(ThinShellIonosphereParametersEvent& evt), Estimator consistent,%d");
    goto LABEL_30;
  }
  if ((IsSane & 1) == 0)
  {
    v41.i16[0] = 12;
    __src[0] = 2;
    unsigned __int8 v9 = cnprint::CNLogFormatter::FormatWarning((raven::RavenIonosphereEstimator *)((char *)this + 3816), "RavenIonosphereEstimator::PopulateEvent(ThinShellIonosphereParametersEvent& evt), Estimator sane,%d");
    goto LABEL_30;
  }
  long long v51 = 0u;
  long long v52 = 0u;
  v49[1] = 0u;
  long long v50 = 0u;
  uint64_t v53 = 0;
  uint64_t v54 = 0x7FF8000000000000;
  v49[0] = *((int8x16_t *)this + 2);
  raven::PopulateAllTimeFields((uint64_t)v49, (uint64_t)this + 568, (int8x16_t)0, v49[0]);
  if ((_BYTE)v52)
  {
    uint64_t v8 = (long long *)((char *)&v52 + 8);
  }
  else
  {
    if (!BYTE8(v50))
    {
      v41.i16[0] = 12;
      __src[0] = 3;
      unsigned __int8 v9 = cnprint::CNLogFormatter::FormatWarning((raven::RavenIonosphereEstimator *)((char *)this + 3816), "RavenIonosphereEstimator::PopulateEvent(ThinShellIonosphereParametersEvent& evt), cannot set applicable_time");
      goto LABEL_30;
    }
    uint64_t v8 = &v51;
  }
  *(_OWORD *)((char *)a2 + 152) = *v8;
  *((unsigned char *)a2 + 104) = 1;
  *((unsigned char *)a2 + 105) = raven::RavenIonosphereEstimator::IsConverged((double **)this);
  int8x16_t v41 = *((int8x16_t *)this + 2);
  *((void *)a2 + 14) = CNTimeSpan::operator-((uint64_t)&v41, (void *)this + 2, v41, v15);
  *((void *)a2 + 15) = v16;
  if (!*((unsigned char *)this + 2024))
  {
    v41.i16[0] = 12;
    __src[0] = 2;
    unsigned __int8 v9 = cnprint::CNLogFormatter::FormatWarning((raven::RavenIonosphereEstimator *)((char *)this + 3816), "RavenIonosphereEstimator::PopulateEvent(ThinShellIonosphereParametersEvent& evt),device position invalid");
    goto LABEL_30;
  }
  *((_OWORD *)a2 + 8) = *((_OWORD *)this + 127);
  *((void *)a2 + 18) = *((void *)this + 256);
  uint64_t v46 = 0x10000000ALL;
  uint64_t v44 = &unk_1EDD17628;
  long long v45 = xmmword_18E200CF0;
  uint64_t v47 = &v48;
  if (*((_DWORD *)this + 1511)) {
    uint64_t v17 = (char *)this + 4952;
  }
  else {
    uint64_t v17 = (char *)this + 3872;
  }
  sub_18DFE2F24((uint64_t)&v44, (uint64_t)v17);
  sub_18E1475A0((uint64_t)this + 3864, (uint64_t)&v41);
  uint64_t v18 = v47;
  *((void *)a2 + 21) = *v47;
  *((void *)a2 + 22) = v18[1];
  *((void *)a2 + 23) = v18[2];
  *((void *)a2 + 24) = v18[3];
  *((void *)a2 + 25) = v18[4];
  *((void *)a2 + 26) = v18[5];
  *((void *)a2 + 27) = v18[6];
  int LogLevel = (cnprint::CNPrinter *)cnprint::CNPrinter::GetLogLevel(v19);
  if (LogLevel <= 1)
  {
    *(_WORD *)__src = 12;
    unsigned __int8 v40 = 1;
    char v21 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 3816, (uint64_t)this + 464, "#iono,hmax,%.3lf,vtec0,%.3lf,dvtec_dtheta,%.3lf,dvtec_dphi,%.3lf,d2vtec_dtheta2,%.3lf,d2vtec_dthetadphi,%.3lf,d2vtec_dphi2,%.3lf,converged,%d", *((double *)a2 + 21), *((double *)a2 + 22), *((double *)a2 + 23), *((double *)a2 + 24), *((double *)a2 + 25), *((double *)a2 + 26), *((double *)a2 + 27), *((unsigned __int8 *)a2 + 105));
    if (*((char *)this + 3839) >= 0) {
      LOBYTE(v27) = v21;
    }
    else {
      uint64_t v27 = *((void *)this + 477);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)__src, &v40, "%s", v22, v23, v24, v25, v26, v27);
  }
  double v28 = v43;
  *((void *)a2 + 28) = *v43;
  int v29 = v42;
  *((void *)a2 + 29) = v28[v42 + 1];
  *((void *)a2 + 30) = v28[2 * v29 + 2];
  *((void *)a2 + 31) = v28[3 * v29 + 3];
  *((void *)a2 + 32) = v28[4 * v29 + 4];
  *((void *)a2 + 33) = v28[5 * v29 + 5];
  *((void *)a2 + 34) = v28[6 * v29 + 6];
  if (!cnprint::CNPrinter::GetLogLevel(LogLevel))
  {
    *(_WORD *)__src = 12;
    unsigned __int8 v40 = 0;
    char v30 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 3816, (uint64_t)this + 464, "#iono,phmax_hmax,%.3lf,pvtec0_vtec0,%.3lf,pdvtec_dtheta_dvtec_dtheta,%.3lf,pdvtec_dphi_dvtec_dphi,%.3lf,pd2vtec_dtheta2_d2vtec_dtheta2,%.3lf,pd2vtec_dthetadphi_d2vtec_dthetadphi,%.3lf,pd2vtec_dphi2_d2vtec_dphi2,%.3lf", *((double *)a2 + 28), *((double *)a2 + 29), *((double *)a2 + 30), *((double *)a2 + 31), *((double *)a2 + 32), *((double *)a2 + 33), *((double *)a2 + 34));
    if (*((char *)this + 3839) >= 0) {
      LOBYTE(v36) = v30;
    }
    else {
      uint64_t v36 = *((void *)this + 477);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)__src, &v40, "%s", v31, v32, v33, v34, v35, v36);
  }
  raven::RavenIonosphereEstimator::GetEstimatorStatus(this, (uint64_t)__src);
  memcpy((char *)a2 + 280, __src, 0x224uLL);
  return 0;
}

uint64_t raven::RavenIonosphereEstimator::IsConsistent(raven::RavenIonosphereEstimator *this)
{
  if (!*((unsigned char *)this + 9)) {
    return 1;
  }
  long long v2 = (char *)this + 8160;
  uint64_t v3 = 16;
  if (!*((_DWORD *)this + 2046)) {
    uint64_t v3 = 8;
  }
  if (*(double *)&v2[v3] < *(double *)(*((void *)this + 476) + 3064)) {
    return 1;
  }
  if (cnprint::CNPrinter::GetLogLevel(this) <= 1)
  {
    __int16 v14 = 12;
    unsigned __int8 v13 = 1;
    uint64_t v5 = 16;
    if (!*((_DWORD *)this + 2046)) {
      uint64_t v5 = 8;
    }
    char v6 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 3816, (uint64_t)this + 32, "consistency failure,%.1lf > %.1lf", *(double *)&v2[v5], *(double *)(*((void *)this + 476) + 3064));
    if (*((char *)this + 3839) >= 0) {
      LOBYTE(v12) = v6;
    }
    else {
      uint64_t v12 = *((void *)this + 477);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v14, &v13, "%s", v7, v8, v9, v10, v11, v12);
  }
  return 0;
}

uint64_t raven::RavenIonosphereEstimator::IsObservable(raven::RavenIonosphereEstimator *this)
{
  if (*((unsigned char *)this + 9)) {
    return sub_18E147E70((uint64_t)this + 3864);
  }
  else {
    return 0;
  }
}

uint64_t raven::RavenIonosphereEstimator::IsSane(raven::RavenIonosphereEstimator *this)
{
  if (*((unsigned char *)this + 9))
  {
    uint64_t v19 = 0x10000000ALL;
    uint64_t v17 = &unk_1EDD17628;
    long long v18 = xmmword_18E200CF0;
    uint64_t v20 = (double *)&v21;
    if (*((_DWORD *)this + 1511)) {
      long long v2 = (char *)this + 4952;
    }
    else {
      long long v2 = (char *)this + 3872;
    }
    sub_18DFE2F24((uint64_t)&v17, (uint64_t)v2);
    double v4 = *v20;
    double v5 = v20[1];
    uint64_t v6 = *((void *)this + 476);
    if (*v20 >= *(double *)(v6 + 3112) && v4 <= *(double *)(v6 + 3120) && v5 >= 0.0) {
      return 1;
    }
    if (cnprint::CNPrinter::GetLogLevel(v3) <= 1)
    {
      __int16 v16 = 12;
      unsigned __int8 v15 = 1;
      char v8 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 3816, (uint64_t)this + 32, "Sanity failure,thin-shell height,%.1lf,vtec0,%.1lf", v4, v5);
      if (*((char *)this + 3839) >= 0) {
        LOBYTE(v14) = v8;
      }
      else {
        uint64_t v14 = *((void *)this + 477);
      }
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v16, &v15, "%s", v9, v10, v11, v12, v13, v14);
    }
  }
  return 0;
}

uint64_t raven::RavenIonosphereEstimator::IsConverged(double **this)
{
  if (*((unsigned char *)this + 9))
  {
    uint64_t result = raven::RavenIonosphereEstimator::IsSane((raven::RavenIonosphereEstimator *)this);
    if (!result) {
      return result;
    }
    if (*((unsigned char *)this + 9))
    {
      uint64_t result = sub_18E147E70((uint64_t)(this + 483));
      if (!result) {
        return result;
      }
      sub_18E1475A0((uint64_t)(this + 483), (uint64_t)v4);
      uint64_t v3 = this[476];
      if (*v6 <= v3[373] * v3[373]
        && v6[v5 + 1] <= v3[374] * v3[374]
        && v6[2 * v5 + 2] <= v3[375] * v3[375]
        && v6[3 * v5 + 3] <= v3[376] * v3[376]
        && v6[4 * v5 + 4] <= v3[377] * v3[377]
        && v6[5 * v5 + 5] <= v3[378] * v3[378]
        && v6[6 * v5 + 6] <= v3[379] * v3[379]
        && v6[7 * v5 + 7] <= v3[380] * v3[380]
        && v6[8 * v5 + 8] <= v3[381] * v3[381])
      {
        return v6[9 * v5 + 9] <= v3[382] * v3[382];
      }
    }
  }
  return 0;
}

double sub_18E147548@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 24) = 0x10000000ALL;
  *(void *)a2 = &unk_1EDD17628;
  *(_OWORD *)(a2 + 8) = xmmword_18E200CF0;
  *(void *)(a2 + 32) = a2 + 40;
  if (*(_DWORD *)(a1 + 2180)) {
    uint64_t v2 = a1 + 1088;
  }
  else {
    uint64_t v2 = a1 + 8;
  }
  *(void *)&double result = sub_18DFE2F24(a2, v2).n128_u64[0];
  return result;
}

__n128 sub_18E1475A0@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v21 = 0xA0000000ALL;
  uint64_t v19 = &unk_1EDD175C8;
  long long v20 = xmmword_18E1FD870;
  uint64_t v22 = &v23;
  if (*(_DWORD *)(a1 + 2180)) {
    uint64_t v3 = a1 + 1208;
  }
  else {
    uint64_t v3 = a1 + 128;
  }
  uint64_t v16 = 0xA0000000ALL;
  uint64_t v14 = &unk_1EDD175C8;
  long long v15 = xmmword_18E1FD870;
  uint64_t v17 = v18;
  uint64_t v31 = 0x10000000ALL;
  long long v30 = xmmword_18E200CF0;
  int v29 = &unk_1EDD17658;
  uint64_t v32 = &v33;
  uint64_t v26 = 0x100000028;
  long long v25 = xmmword_18E21A0C0;
  uint64_t v24 = &unk_1EDD18FD8;
  uint64_t v27 = &v28;
  sub_18E01BFEC(v3, (uint64_t)&v29, (uint64_t)&v24, (uint64_t)&v14);
  sub_18DFE2F24((uint64_t)&v19, (uint64_t)&v14);
  int v4 = DWORD1(v20);
  int v5 = v20;
  uint64_t v16 = 0xA0000000ALL;
  uint64_t v14 = &unk_1EDD175C8;
  uint64_t v17 = v18;
  *(void *)&long long v15 = __PAIR64__(v20, DWORD1(v20));
  DWORD2(v15) = v20 * DWORD1(v20);
  HIDWORD(v15) = DWORD1(v20);
  if (DWORD1(v20))
  {
    int v6 = 0;
    int v7 = 0;
    int v8 = HIDWORD(v20);
    uint64_t v9 = v22;
    do
    {
      int v10 = v6;
      int v11 = v7;
      for (int i = v5; i; --i)
      {
        v18[v11] = v9[v10];
        v11 += v4;
        ++v10;
      }
      ++v7;
      v6 += v8;
    }
    while (v7 != v4);
  }
  *(void *)(a2 + 24) = 0xA0000000ALL;
  *(void *)a2 = &unk_1EDD175C8;
  *(_OWORD *)(a2 + 8) = xmmword_18E1FD870;
  *(void *)(a2 + 32) = a2 + 40;
  sub_18DFE2B44((uint64_t)&v19, (uint64_t)&v14, a2);
  return result;
}

void sub_18E1477BC(_Unwind_Exception *a1)
{
  void *v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

__n128 raven::RavenIonosphereEstimator::GetEstimatorStatus@<Q0>(raven::RavenIonosphereEstimator *this@<X0>, uint64_t a2@<X8>)
{
  *(unsigned char *)(a2 + 96) = 0;
  *(_OWORD *)(a2 + 104) = 0u;
  *(_OWORD *)(a2 + 120) = 0u;
  *(_OWORD *)(a2 + 136) = 0u;
  if (*((unsigned char *)this + 9))
  {
    *(_OWORD *)(a2 + 48) = 0uLL;
    *(_OWORD *)(a2 + 64) = 0uLL;
    *(_OWORD *)(a2 + 16) = 0uLL;
    *(_OWORD *)(a2 + 32) = 0uLL;
    int8x16_t v4 = *((int8x16_t *)this + 2);
    *(int8x16_t *)a2 = v4;
    *(void *)(a2 + 80) = 0;
    *(void *)(a2 + 88) = 0x7FF8000000000000;
    raven::PopulateAllTimeFields(a2, (uint64_t)this + 464, (int8x16_t)0, v4);
    if (*((unsigned char *)this + 9)) {
      int v5 = sub_18E147E70((uint64_t)this + 3864);
    }
    else {
      int v5 = 0;
    }
    int IsSane = raven::RavenIonosphereEstimator::IsSane(this);
    char IsConsistent = (cnprint::CNPrinter *)raven::RavenIonosphereEstimator::IsConsistent(this);
    int v14 = (int)IsConsistent;
    if (v5 && IsSane && (IsConsistent & 1) != 0)
    {
      char v15 = 2;
    }
    else
    {
      char v15 = 1;
      if (cnprint::CNPrinter::GetLogLevel(IsConsistent) <= 1)
      {
        v37.i16[0] = 12;
        unsigned __int8 v38 = 1;
        unsigned __int8 v16 = cnprint::CNLogFormatter::FormatGeneral((const void **)this + 477, "Estimator unhealthy,observable,%d,sane,%d,consistent,%d", v5, IsSane, v14);
        if (*((char *)this + 3839) >= 0) {
          LOBYTE(v22) = v16;
        }
        else {
          uint64_t v22 = *((void *)this + 477);
        }
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v37, &v38, "%s", v17, v18, v19, v20, v21, v22);
      }
    }
    *(unsigned char *)(a2 + 96) = v15;
    uint64_t v23 = 16;
    if (!*((_DWORD *)this + 2046)) {
      uint64_t v23 = 8;
    }
    v13.i64[0] = 1.0;
    *(double *)(a2 + 104) = 1.0 - *(double *)((char *)this + v23 + 8160);
    int8x16_t v37 = *((int8x16_t *)this + 2);
    uint64_t v24 = CNTimeSpan::operator-((uint64_t)&v37, (void *)this + 2, v37, v13);
    long long v25 = *(_OWORD *)((char *)this + 3508);
    *(_OWORD *)(a2 + 264) = *(_OWORD *)((char *)this + 3524);
    *(_OWORD *)(a2 + 128) = *((_OWORD *)this + 187);
    long long v26 = *(_OWORD *)((char *)this + 3476);
    *(_OWORD *)(a2 + 232) = *(_OWORD *)((char *)this + 3492);
    *(_OWORD *)(a2 + 248) = v25;
    long long v27 = *(_OWORD *)((char *)this + 3412);
    *(_OWORD *)(a2 + 168) = *(_OWORD *)((char *)this + 3428);
    long long v28 = *(_OWORD *)((char *)this + 3460);
    *(_OWORD *)(a2 + 184) = *(_OWORD *)((char *)this + 3444);
    *(_OWORD *)(a2 + 200) = v28;
    *(void *)(a2 + 112) = v24;
    *(void *)(a2 + 120) = v29;
    *(void *)(a2 + 144) = *((void *)this + 376);
    *(_DWORD *)(a2 + 280) = *((_DWORD *)this + 885);
    *(_OWORD *)(a2 + 216) = v26;
    *(_OWORD *)(a2 + 152) = v27;
    long long v30 = *(_OWORD *)((char *)this + 3656);
    *(_OWORD *)(a2 + 380) = *(_OWORD *)((char *)this + 3640);
    *(_OWORD *)(a2 + 396) = v30;
    *(_DWORD *)(a2 + 412) = *((_DWORD *)this + 918);
    long long v31 = *(_OWORD *)((char *)this + 3592);
    *(_OWORD *)(a2 + 316) = *(_OWORD *)((char *)this + 3576);
    *(_OWORD *)(a2 + 332) = v31;
    long long v32 = *(_OWORD *)((char *)this + 3624);
    *(_OWORD *)(a2 + 348) = *(_OWORD *)((char *)this + 3608);
    *(_OWORD *)(a2 + 364) = v32;
    long long v33 = *(_OWORD *)((char *)this + 3560);
    *(_OWORD *)(a2 + 284) = *(_OWORD *)((char *)this + 3544);
    *(_OWORD *)(a2 + 300) = v33;
    long long v34 = *(_OWORD *)((char *)this + 3788);
    *(_OWORD *)(a2 + 512) = *(_OWORD *)((char *)this + 3772);
    *(_OWORD *)(a2 + 528) = v34;
    *(_DWORD *)(a2 + 544) = *((_DWORD *)this + 951);
    long long v35 = *(_OWORD *)((char *)this + 3724);
    *(_OWORD *)(a2 + 448) = *(_OWORD *)((char *)this + 3708);
    *(_OWORD *)(a2 + 464) = v35;
    long long v36 = *(_OWORD *)((char *)this + 3756);
    *(_OWORD *)(a2 + 480) = *(_OWORD *)((char *)this + 3740);
    *(_OWORD *)(a2 + 496) = v36;
    __n128 result = *(__n128 *)((char *)this + 3692);
    *(_OWORD *)(a2 + 416) = *(_OWORD *)((char *)this + 3676);
    *(__n128 *)(a2 + 432) = result;
  }
  else
  {
    long long v6 = *((_OWORD *)this + 32);
    *(_OWORD *)(a2 + 32) = *((_OWORD *)this + 31);
    *(_OWORD *)(a2 + 48) = v6;
    long long v7 = *((_OWORD *)this + 34);
    *(_OWORD *)(a2 + 64) = *((_OWORD *)this + 33);
    *(_OWORD *)(a2 + 80) = v7;
    int8x16_t v8 = *((int8x16_t *)this + 29);
    int8x16_t v9 = *((int8x16_t *)this + 30);
    *(int8x16_t *)a2 = v8;
    *(int8x16_t *)(a2 + 16) = v9;
    raven::PopulateAllTimeFields(a2, (uint64_t)this + 464, v8, v9);
  }
  return result;
}

uint64_t raven::RavenIonosphereEstimator::PopulateEvent(int8x16_t *this, int8x16_t *a2)
{
  char IsConsistent = raven::RavenIonosphereEstimator::IsConsistent((raven::RavenIonosphereEstimator *)this);
  if (!this->i8[9])
  {
    raven::RavenIonosphereEstimator::IsSane((raven::RavenIonosphereEstimator *)this);
    v31[0] = 12;
    __src[0] = 2;
    unsigned __int8 v22 = cnprint::CNLogFormatter::FormatWarning((cnprint::CNLogFormatter *)&this[238].u64[1], "RavenIonosphereEstimator::PopulateEvent(ReceiverDifferentialCodeBiasesEvent& evt), Estimator initialized,%d");
LABEL_18:
    if (this[239].i8[15] >= 0) {
      LOBYTE(v28) = v22;
    }
    else {
      uint64_t v28 = this[238].i64[1];
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v31, __src, "%s", v23, v24, v25, v26, v27, v28);
    return 0xFFFFFFFFLL;
  }
  char v5 = IsConsistent;
  char v6 = sub_18E147E70((uint64_t)&this[241].i64[1]);
  char IsSane = raven::RavenIonosphereEstimator::IsSane((raven::RavenIonosphereEstimator *)this);
  if ((v6 & 1) == 0)
  {
    v31[0] = 12;
    __src[0] = 2;
    unsigned __int8 v22 = cnprint::CNLogFormatter::FormatWarning((cnprint::CNLogFormatter *)&this[238].u64[1], "RavenIonosphereEstimator::PopulateEvent(ReceiverDifferentialCodeBiasesEvent& evt), Estimator observable,%d");
    goto LABEL_18;
  }
  if ((v5 & 1) == 0)
  {
    v31[0] = 12;
    __src[0] = 2;
    unsigned __int8 v22 = cnprint::CNLogFormatter::FormatWarning((cnprint::CNLogFormatter *)&this[238].u64[1], "RavenIonosphereEstimator::PopulateEvent(ReceiverDifferentialCodeBiasesEvent& evt), Estimator consistent,%d");
    goto LABEL_18;
  }
  if ((IsSane & 1) == 0)
  {
    v31[0] = 12;
    __src[0] = 2;
    unsigned __int8 v22 = cnprint::CNLogFormatter::FormatWarning((cnprint::CNLogFormatter *)&this[238].u64[1], "RavenIonosphereEstimator::PopulateEvent(ReceiverDifferentialCodeBiasesEvent& evt), Estimator sane,%d");
    goto LABEL_18;
  }
  uint64_t v36 = 0x10000000ALL;
  long long v34 = &unk_1EDD17628;
  long long v35 = xmmword_18E200CF0;
  int8x16_t v37 = &v38;
  if (this[377].i32[3]) {
    int8x16_t v8 = (int8x16_t *)((char *)this + 4952);
  }
  else {
    int8x16_t v8 = this + 242;
  }
  sub_18DFE2F24((uint64_t)&v34, (uint64_t)v8);
  sub_18E1475A0((uint64_t)&this[241].i64[1], (uint64_t)v31);
  a2[6].i8[8] = 1;
  a2[6].i8[9] = raven::RavenIonosphereEstimator::IsConverged((double **)this);
  int8x16_t v9 = this[2];
  a2[7] = v9;
  a2[8] = 0u;
  a2[9] = 0u;
  a2[10] = 0u;
  a2[11] = 0u;
  a2[12].i64[0] = 0;
  a2[12].i64[1] = 0x7FF8000000000000;
  int v10 = (cnprint::CNPrinter *)raven::PopulateAllTimeFields((uint64_t)a2[7].i64, (uint64_t)this[29].i64, v9, (int8x16_t)0);
  int v11 = v37;
  a2[13].i64[0] = v37[7];
  a2[14].i64[0] = v11[9];
  a2[13].i64[1] = v11[8];
  LODWORD(v11) = v32;
  int v12 = 8 * v32;
  uint64_t v13 = v33;
  a2[14].i64[1] = *(void *)(v33 + 8 * (7 * v32 + 7));
  a2[15].i64[0] = *(void *)(v13 + 8 * ((8 * (int)v11) | 7));
  LODWORD(v11) = 9 * v11;
  a2[15].i64[1] = *(void *)(v13 + 8 * ((int)v11 + 7));
  a2[16].i64[0] = *(void *)(v13 + 8 * (v12 + 8));
  a2[16].i64[1] = *(void *)(v13 + 8 * ((int)v11 + 8));
  a2[17].i64[0] = *(void *)(v13 + 8 * ((int)v11 + 9));
  if (cnprint::CNPrinter::GetLogLevel(v10) <= 1)
  {
    *(_WORD *)__src = 12;
    unsigned __int8 v30 = 1;
    char v14 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)&this[238].i64[1], (uint64_t)this[29].i64, "#iono,DCBs,gps,%.2lf,gal,%.2lf,bds,%.2lf,gps_var,%.2lf,gal_var,%.2lf,bds_var,%.2lf", *(double *)a2[13].i64, *(double *)&a2[13].i64[1], *(double *)a2[14].i64, *(double *)&a2[14].i64[1], *(double *)a2[16].i64, *(double *)a2[17].i64);
    if (this[239].i8[15] >= 0) {
      LOBYTE(v20) = v14;
    }
    else {
      uint64_t v20 = this[238].i64[1];
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)__src, &v30, "%s", v15, v16, v17, v18, v19, v20);
  }
  raven::RavenIonosphereEstimator::GetEstimatorStatus((raven::RavenIonosphereEstimator *)this, (uint64_t)__src);
  memcpy(&a2[17].u64[1], __src, 0x224uLL);
  return 0;
}

void sub_18E147D28(uint64_t a1)
{
  *(_WORD *)a1 = 0;
  sub_18E067BEC((void *)(a1 + 40));
  *(_DWORD *)(a1 + 3184) = 0;
  *(_DWORD *)(a1 + 12704) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 1528) = 0;
  *(void *)(a1 + 1520) = 0;
  *(void *)(a1 + 1920) = 0;
  *(void *)(a1 + 1912) = 0;
  *(void *)(a1 + 2664) = 0;
  *(void *)(a1 + 2656) = 0;
  *(void *)(a1 + 2712) = 0;
  *(void *)(a1 + 2704) = 0;
  *(void *)(a1 + 3104) = 0;
  *(void *)(a1 + 3096) = 0;
  *(void *)(a1 + 3152) = 0;
  *(void *)(a1 + 3144) = 0;
  *(void *)(a1 + 3200) = 0;
  *(void *)(a1 + 3208) = 0;
  *(void *)(a1 + 3944) = 0;
  *(void *)(a1 + 3952) = 0;
  *(void *)(a1 + 4696) = 0;
  *(void *)(a1 + 4688) = 0;
  *(void *)(a1 + 5440) = 0;
  *(void *)(a1 + 5432) = 0;
  *(void *)(a1 + 5656) = 0;
  *(void *)(a1 + 5648) = 0;
  *(void *)(a1 + 6048) = 0;
  *(void *)(a1 + 6040) = 0;
  *(void *)(a1 + 8200) = 0;
  *(void *)(a1 + 0x2000) = 0;
  *(void *)(a1 + 8416) = 0;
  *(void *)(a1 + 8408) = 0;
  *(void *)(a1 + 10568) = 0;
  *(void *)(a1 + 10560) = 0;
  *(void *)(a1 + 12728) = 0;
  *(void *)(a1 + 12720) = 0;
  *(void *)(a1 + 13120) = 0;
  *(void *)(a1 + 13112) = 0;
}

void sub_18E147DE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 24) = 0x10000000ALL;
  *(void *)a1 = &unk_1EDD17628;
  *(_OWORD *)(a1 + 8) = xmmword_18E200CF0;
  *(void *)(a1 + 32) = a1 + 40;
  sub_18DFE2B44(a2, a3, a1);
}

void sub_18E147E50(_Unwind_Exception *a1)
{
  void *v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

uint64_t sub_18E147E70(uint64_t a1)
{
  int v1 = *(unsigned __int8 *)(a1 + 2176);
  if (v1 == 2)
  {
    char v3 = 1;
  }
  else
  {
    if (v1 != 1)
    {
      if (!*(unsigned char *)(a1 + 2176))
      {
        (*(void (**)(void *__return_ptr, uint64_t))(*(void *)a1 + 40))(v12, a1);
        uint64_t v29 = 0xA0000000ALL;
        uint64_t v27 = &unk_1EDD175C8;
        long long v28 = xmmword_18E1FD870;
        unsigned __int8 v30 = &v31;
        uint64_t v24 = 0xA0000000ALL;
        unsigned __int8 v22 = &unk_1EDD175C8;
        long long v23 = xmmword_18E1FD870;
        uint64_t v25 = &v26;
        uint64_t v19 = 0x10000000ALL;
        long long v18 = xmmword_18E200CF0;
        uint64_t v17 = &unk_1EDD17658;
        uint64_t v20 = &v21;
        uint64_t v14 = 0x100000884;
        uint64_t v16 = 0;
        v12[120] = &unk_1EDD184F8;
        uint64_t v15 = 0;
        long long v13 = xmmword_18E21A0D0;
        sub_18E14F050();
      }
      LOWORD(v27) = 2;
      LOBYTE(v22) = 5;
      unsigned __int8 v4 = cnprint::CNLogFormatter::FormatGeneral((const void **)(a1 + 2344), "LeastSquaresEstimator::IsObservable called with unexpected observability state %hhu", v1);
      if (*(char *)(a1 + 2367) >= 0) {
        LOBYTE(v10) = v4;
      }
      else {
        uint64_t v10 = *(void *)(a1 + 2344);
      }
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v27, (unsigned __int8 *)&v22, "%s", v5, v6, v7, v8, v9, v10);
    }
    char v3 = 0;
  }
  return v3 & 1;
}

void sub_18E1480F8(_Unwind_Exception *a1)
{
}

double sub_18E148134(unsigned char *a1, __n128 *a2)
{
  sub_18E14BB40((uint64_t)a1, a2);
  *a1 = 0;

  *(void *)&double result = sub_18E059804((uint64_t)a1, a2, v4, v5, v6, v7, v8, v9).n128_u64[0];
  return result;
}

uint64_t sub_18E148178(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(unsigned char *)(a1 + 1)) {
    return *(unsigned int *)(a1 + 12704);
  }
  __int16 v11 = 2;
  unsigned __int8 v10 = 2;
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v11, &v10, "WARNING: MeasurementAccumulator.NumberLocked() called on unlocked accumulator.", a4, a5, a6, a7, a8, v9);
  return 0;
}

uint64_t sub_18E1481C8(uint64_t a1)
{
  double v3 = MEMORY[0x1F4188790](a1);
  uint64_t v5 = v4;
  uint64_t v6 = v2;
  uint64_t v7 = v1;
  for (uint64_t i = 0; i != 80; i += 8)
  {
    uint64_t v9 = *(void *)(v2 + 104 + i);
    BOOL v10 = (v9 & 0x7FFFFFFFFFFFFFFFuLL) - 1 < 0xFFFFFFFFFFFFFLL;
    BOOL v11 = ((v9 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 < 0x3FF;
    if (v9 >= 0)
    {
      BOOL v11 = 0;
      BOOL v10 = 0;
    }
    uint64_t v12 = v9 & 0x7FFFFFFFFFFFFFFFLL;
    if (!v12) {
      BOOL v10 = 1;
    }
    BOOL v13 = v12 <= 0x7FF0000000000000;
    int v14 = v12 == 0x7FF0000000000000 || v10;
    if (!v13) {
      int v14 = 1;
    }
    if ((v14 | v11) == 1)
    {
      LOWORD(v67) = 12;
      LOBYTE(v62) = 4;
      unsigned __int8 v32 = cnprint::CNLogFormatter::FormatGeneral((const void **)(v1 + 3816), "GetProcessNoiseInformationMatrix,non-positive correlation time constant specified", v3);
      if (*(char *)(v7 + 3839) >= 0) {
        LOBYTE(v38) = v32;
      }
      else {
        uint64_t v38 = *(void *)(v7 + 3816);
      }
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v67, (unsigned __int8 *)&v62, "%s", v33, v34, v35, v36, v37, v38);
      return 0xFFFFFFFFLL;
    }
  }
  uint64_t v64 = 0xA0000000ALL;
  uint64_t v62 = &unk_1EDD175C8;
  uint64_t v65 = &v66;
  long long v63 = xmmword_18E1FD870;
  sub_18DFE2CC8((uint64_t)&v62, 0.0);
  int v15 = 0;
  uint64_t v16 = 0;
  int v17 = HIDWORD(v63) + 1;
  long long v18 = v65;
  do
  {
    double v19 = *(double *)(v6 + 16) / *(double *)(v6 + v16 + 104);
    long double v20 = exp(-v19);
    double v21 = 1.0 - v20 * v20;
    if (v19 <= 0.00000001) {
      double v21 = v19 + v19;
    }
    *(double *)&v18[v15] = *(double *)(v6 + v16 + 24) * *(double *)(v6 + v16 + 24) * v21;
    v16 += 8;
    v15 += v17;
  }
  while (v16 != 80);
  uint64_t v41 = 0xA0000000ALL;
  int8x16_t v39 = &unk_1EDD175C8;
  long long v40 = xmmword_18E1FD870;
  int v42 = &v43;
  LOBYTE(v67) = 0;
  sub_18DFEEFE8((uint64_t)&v62, (uint64_t)&v39, (BOOL *)&v67);
  uint64_t v46 = 0xA0000000ALL;
  uint64_t v44 = &unk_1EDD175C8;
  long long v45 = xmmword_18E1FD870;
  uint64_t v47 = &v48;
  uint64_t v59 = 0x10000000ALL;
  long long v58 = xmmword_18E200CF0;
  uint64_t v57 = &unk_1EDD17658;
  double v60 = v61;
  uint64_t v69 = 0x100000028;
  long long v68 = xmmword_18E21A0C0;
  uint64_t v67 = &unk_1EDD18FD8;
  uint64_t v70 = v71;
  sub_18E01BFEC((uint64_t)&v39, (uint64_t)&v57, (uint64_t)&v67, (uint64_t)&v44);
  int v22 = DWORD1(v45);
  int v23 = v45;
  uint64_t v54 = 0xA0000000ALL;
  uint64_t v49 = &unk_1EDD175C8;
  uint64_t v55 = v56;
  int v50 = DWORD1(v45);
  int v51 = v45;
  int v52 = v45 * DWORD1(v45);
  int v53 = DWORD1(v45);
  if (DWORD1(v45))
  {
    int v24 = 0;
    int v25 = 0;
    int v26 = HIDWORD(v45);
    uint64_t v27 = v47;
    do
    {
      int v28 = v24;
      int v29 = v25;
      for (int j = v23; j; --j)
      {
        v56[v29] = v27[v28];
        v29 += v22;
        ++v28;
      }
      ++v25;
      v24 += v26;
    }
    while (v25 != v22);
  }
  uint64_t v74 = 0x10000000ALL;
  uint64_t v72 = &unk_1EDD17628;
  long long v73 = xmmword_18E200CF0;
  uint64_t v75 = &v76;
  uint64_t v69 = 0xA0000000ALL;
  long long v68 = xmmword_18E1FD870;
  uint64_t v67 = &unk_1EDD175C8;
  uint64_t v70 = v71;
  uint64_t v59 = 0xA0000000ALL;
  long long v58 = xmmword_18E1FD870;
  uint64_t v57 = &unk_1EDD175C8;
  double v60 = v61;
  sub_18E06EA40((uint64_t)&v49, (uint64_t)&v72, (uint64_t)&v67, (uint64_t)&v57);
  sub_18DFE2F24(v5, (uint64_t)&v57);
  return 0;
}

uint64_t sub_18E148638(uint64_t a1, uint64_t a2, double *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8 = *(_DWORD *)(a1 + 8);
  unsigned int v9 = *(_DWORD *)(a1 + 12);
  if (v8 <= v9) {
    int v10 = *(_DWORD *)(a1 + 12);
  }
  else {
    int v10 = *(_DWORD *)(a1 + 8);
  }
  if (v8) {
    BOOL v11 = v9 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  BOOL v12 = !v11 && v10 == 10;
  if (v12
    && ((unsigned int v14 = *(_DWORD *)(a2 + 8), v15 = *(_DWORD *)(a2 + 12), v14 <= v15)
      ? (int v16 = *(_DWORD *)(a2 + 12))
      : (int v16 = *(_DWORD *)(a2 + 8)),
        v14 ? (BOOL v17 = v15 == 0) : (BOOL v17 = 1),
        !v17 ? (BOOL v18 = v16 == 10) : (BOOL v18 = 0),
        v18))
  {
    uint64_t v25 = 0;
    double v26 = *a3;
    do
    {
      uint64_t v27 = *(void *)&a3[v25 + 11];
      BOOL v28 = (v27 & 0x7FFFFFFFFFFFFFFFuLL) - 1 < 0xFFFFFFFFFFFFFLL;
      BOOL v29 = ((v27 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 < 0x3FF;
      if (v27 >= 0)
      {
        BOOL v29 = 0;
        BOOL v28 = 0;
      }
      uint64_t v30 = v27 & 0x7FFFFFFFFFFFFFFFLL;
      if (!v30) {
        BOOL v28 = 1;
      }
      BOOL v31 = v30 <= 0x7FF0000000000000;
      int v32 = v30 == 0x7FF0000000000000 || v28;
      if (!v31) {
        int v32 = 1;
      }
      if ((v32 | v29) == 1)
      {
        LOWORD(v84) = 12;
        LOBYTE(v79) = 4;
        double v19 = "f_TenStateGaussMarkov, non-positive time constant specified";
        goto LABEL_23;
      }
      ++v25;
    }
    while (v25 != 10);
    uint64_t v86 = 0xA0000000ALL;
    uint64_t v84 = &unk_1EDD175C8;
    uint64_t v87 = &v88;
    long long v85 = xmmword_18E1FD870;
    sub_18DFE2CC8((uint64_t)&v84, 0.0);
    int v33 = 0;
    int v34 = HIDWORD(v85) + 1;
    uint64_t v35 = 10;
    uint64_t v36 = v87;
    do
    {
      v36[v33] = 0x3FF0000000000000;
      v33 += v34;
      --v35;
    }
    while (v35);
    uint64_t v81 = 0xA0000000ALL;
    uint64_t v79 = &unk_1EDD175C8;
    uint64_t v82 = &v83;
    long long v80 = xmmword_18E1FD870;
    sub_18DFE2CC8((uint64_t)&v79, 0.0);
    int v37 = 0;
    int v38 = HIDWORD(v80) + 1;
    uint64_t v39 = 10;
    long long v40 = v82;
    do
    {
      v40[v37] = 0x3FF0000000000000;
      v37 += v38;
      --v39;
    }
    while (v39);
    uint64_t v76 = 0x10000000ALL;
    uint64_t v74 = &unk_1EDD17628;
    double v77 = &v78;
    long long v75 = xmmword_18E200CF0;
    sub_18DFE2CC8((uint64_t)&v74, 0.0);
    int v41 = 0;
    uint64_t v42 = 0;
    int v43 = HIDWORD(v85) + 1;
    uint64_t v44 = v87;
    long long v45 = v77;
    do
    {
      double v46 = v26 / a3[v42 + 11];
      if (v46 <= 1.0e-12) {
        double v47 = 1.0 - v46;
      }
      else {
        double v47 = exp(-v46);
      }
      *(double *)&v44[v41] = v47;
      v45[v42] = *(void *)&a3[v42 + 1];
      ++v42;
      v41 += v43;
    }
    while (v42 != 10);
    uint64_t v61 = 0x10000000ALL;
    long long v60 = xmmword_18E200CF0;
    uint64_t v59 = &unk_1EDD17628;
    uint64_t v62 = &v63;
    sub_18DFE2AA8(a1, (uint64_t)&v74, (uint64_t)&v59);
    uint64_t v66 = 0x10000000ALL;
    long long v65 = xmmword_18E200CF0;
    uint64_t v64 = &unk_1EDD17628;
    uint64_t v67 = &v68;
    sub_18DFE2B44((uint64_t)&v84, (uint64_t)&v59, (uint64_t)&v64);
    uint64_t v71 = 0x10000000ALL;
    long long v70 = xmmword_18E200CF0;
    uint64_t v69 = &unk_1EDD17628;
    uint64_t v72 = &v73;
    sub_18DFEF1F4((uint64_t)&v74, (uint64_t)&v64, (uint64_t)&v69);
    uint64_t v56 = 0x10000000ALL;
    uint64_t v54 = &unk_1EDD17628;
    long long v55 = xmmword_18E200CF0;
    uint64_t v57 = v58;
    sub_18DFEF1F4((uint64_t)&v69, a2, (uint64_t)&v54);
    sub_18DFE2F24(a4, (uint64_t)&v54);
    sub_18DFE2F24(a5, (uint64_t)&v84);
    uint64_t v56 = 0xA0000000ALL;
    uint64_t v54 = &unk_1EDD175C8;
    uint64_t v57 = v58;
    long long v55 = xmmword_18E1FD870;
    sub_18DFE2CC8((uint64_t)&v54, 0.0);
    int v48 = 0;
    int v49 = HIDWORD(v55) + 1;
    uint64_t v50 = 10;
    int v51 = v57;
    do
    {
      *(void *)&v51[8 * v48] = 0x3FF0000000000000;
      v48 += v49;
      --v50;
    }
    while (v50);
    sub_18DFE2F24(a6, (uint64_t)&v54);
    return 0;
  }
  else
  {
    LOWORD(v84) = 12;
    LOBYTE(v79) = 4;
    double v19 = "f_TenStateGaussMarkov called with inadequate matrices";
LABEL_23:
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v84, (unsigned __int8 *)&v79, v19, a4, a5, a6, a7, a8, v52);
    return 0xFFFFFFFFLL;
  }
}

uint64_t sub_18E148AD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  unsigned int v9 = *(_DWORD *)(a1 + 8);
  unsigned int v10 = *(_DWORD *)(a1 + 12);
  if (v9 <= v10) {
    int v11 = *(_DWORD *)(a1 + 12);
  }
  else {
    int v11 = *(_DWORD *)(a1 + 8);
  }
  if (v9) {
    BOOL v12 = v10 == 0;
  }
  else {
    BOOL v12 = 1;
  }
  BOOL v13 = !v12 && v11 == 10;
  if (!v13
    || ((unsigned int v14 = *(_DWORD *)(a2 + 8), v15 = *(_DWORD *)(a2 + 12), v14 <= v15)
      ? (int v16 = *(_DWORD *)(a2 + 12))
      : (int v16 = *(_DWORD *)(a2 + 8)),
        v14 ? (BOOL v17 = v15 == 0) : (BOOL v17 = 1),
        !v17 ? (BOOL v18 = v16 == 10) : (BOOL v18 = 0),
        !v18))
  {
    LOWORD(v37) = 12;
    LOBYTE(v32) = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v37, (unsigned __int8 *)&v32, "in_TenStateGaussMarkov called with inadequate matrices", a4, a5, a6, a7, a8, v26);
    return 0xFFFFFFFFLL;
  }
  double v52 = *(double *)a3 * a9;
  long long v59 = *(_OWORD *)(a3 + 104);
  long long v60 = *(_OWORD *)(a3 + 120);
  long long v61 = *(_OWORD *)(a3 + 136);
  long long v62 = *(_OWORD *)(a3 + 152);
  long long v58 = *(_OWORD *)(a3 + 88);
  long long v54 = *(_OWORD *)(a3 + 24);
  long long v55 = *(_OWORD *)(a3 + 40);
  long long v56 = *(_OWORD *)(a3 + 56);
  long long v57 = *(_OWORD *)(a3 + 72);
  long long v53 = *(_OWORD *)(a3 + 8);
  uint64_t v49 = 0x10000000ALL;
  double v47 = &unk_1EDD17628;
  uint64_t v50 = &v51;
  long long v48 = xmmword_18E200CF0;
  sub_18DFE2CC8((uint64_t)&v47, 0.0);
  uint64_t v44 = 0x10000000ALL;
  long long v43 = xmmword_18E200CF0;
  uint64_t v42 = &unk_1EDD17628;
  long long v45 = &v46;
  uint64_t v39 = 0xA0000000ALL;
  int v37 = &unk_1EDD175C8;
  long long v38 = xmmword_18E1FD870;
  long long v40 = &v41;
  uint64_t v34 = 0xA0000000ALL;
  int v32 = &unk_1EDD175C8;
  long long v33 = xmmword_18E1FD870;
  uint64_t v35 = &v36;
  if (sub_18E148638(a1, (uint64_t)&v47, &v52, (uint64_t)&v42, (uint64_t)&v37, (uint64_t)&v32, v24, v25)) {
    return 0xFFFFFFFFLL;
  }
  sub_18DFE2F24(a4, (uint64_t)&v42);
  sub_18DFE2F24(a5, (uint64_t)&v37);
  uint64_t v29 = 0xA0000000ALL;
  uint64_t v27 = &unk_1EDD175C8;
  uint64_t v30 = &v31;
  long long v28 = xmmword_18E1FD870;
  sub_18DFE2CC8((uint64_t)&v27, 0.0);
  sub_18DFE2F24(a6, (uint64_t)&v27);
  return 0;
}

uint64_t sub_18E148D70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v92 = 0x10000000ALL;
  uint64_t v90 = &unk_1EDD17628;
  long long v91 = xmmword_18E200CF0;
  uint64_t v93 = &v94;
  uint64_t v87 = 0xA0000000ALL;
  long long v86 = xmmword_18E1FD870;
  long long v85 = &unk_1EDD175C8;
  uint64_t v88 = &v89;
  uint64_t v82 = 0x10000000ALL;
  long long v81 = xmmword_18E200CF0;
  long long v80 = &unk_1EDD17628;
  uint64_t v83 = &v84;
  if (*(_DWORD *)(a1 + 2180))
  {
    sub_18DFE2F24((uint64_t)&v90, a1 + 1088);
    sub_18DFE2F24((uint64_t)&v85, a1 + 1208);
    uint64_t v21 = a1 + 2048;
  }
  else
  {
    sub_18DFE2F24((uint64_t)&v90, a1 + 8);
    sub_18DFE2F24((uint64_t)&v85, a1 + 128);
    uint64_t v21 = a1 + 968;
  }
  sub_18DFE2F24((uint64_t)&v80, v21);
  if (v91 <= DWORD1(v91)) {
    unsigned int v22 = DWORD1(v91);
  }
  else {
    unsigned int v22 = v91;
  }
  if (DWORD1(v91)) {
    BOOL v23 = v91 == 0;
  }
  else {
    BOOL v23 = 1;
  }
  if (v23) {
    unsigned int v24 = 0;
  }
  else {
    unsigned int v24 = v22;
  }
  uint64_t v25 = *(unsigned int *)(a2 + 8);
  if ((v25 & 0x80000000) != 0) {
    __assert_rtn("Zeros", "cnmatrix.h", 3098, "nr >= 0");
  }
  unsigned int v52 = v24;
  uint64_t v53 = a8;
  uint64_t v54 = a3;
  uint64_t v55 = a1;
  uint64_t v56 = a2;
  uint64_t v77 = 0x10000000ALL;
  uint64_t v72 = &unk_1EDD17628;
  uint64_t v78 = &v79;
  int v73 = v25;
  int v74 = 1;
  int v75 = v25;
  int v76 = v25;
  sub_18DFE2CC8((uint64_t)&v72, 0.0);
  unsigned int v26 = *(_DWORD *)(a9 + 8);
  unsigned int v27 = *(_DWORD *)(a9 + 12);
  if (v26 <= v27) {
    unsigned int v28 = *(_DWORD *)(a9 + 12);
  }
  else {
    unsigned int v28 = *(_DWORD *)(a9 + 8);
  }
  if (v27) {
    BOOL v29 = v26 == 0;
  }
  else {
    BOOL v29 = 1;
  }
  if (v29) {
    uint64_t v30 = 0;
  }
  else {
    uint64_t v30 = v28;
  }
  sub_18E154EE0(v71, v30);
  if ((int)v30 < 1)
  {
    sub_18E154EE0(v69, v30);
    sub_18E154F9C(&v65, v30);
  }
  else
  {
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    do
    {
      sub_18E14CD0C((uint64_t)&v65, *(void *)(a4 + 32) + v32);
      if (v66 <= v67) {
        unsigned int v33 = v67;
      }
      else {
        unsigned int v33 = v66;
      }
      if (v67) {
        BOOL v34 = v66 == 0;
      }
      else {
        BOOL v34 = 1;
      }
      if (v34) {
        unsigned int v35 = 0;
      }
      else {
        unsigned int v35 = v33;
      }
      *(_DWORD *)(v71[4] + v31) = v35;
      v32 += 48;
      v31 += 4;
    }
    while (48 * v30 != v32);
    sub_18E154EE0(v69, v30);
    sub_18E154F9C(&v65, v30);
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    do
    {
      sub_18E14CD0C((uint64_t)&v57, *(void *)(a5 + 32) + v36);
      uint64_t v38 = v70;
      *(_DWORD *)(v70 + v37) = v58;
      int v39 = *(_DWORD *)(v38 + v37);
      if (v39 < 0) {
        __assert_rtn("Zeros", "cnmatrix.h", 3098, "nr >= 0");
      }
      uint64_t v62 = 0x100000001;
      long long v57 = &unk_1EDD18048;
      uint64_t v63 = &v64;
      int v58 = v39;
      int v59 = 1;
      int v60 = v39;
      int v61 = v39;
      sub_18DFE2CC8((uint64_t)&v57, 0.0);
      sub_18DFE2F24(v68 + v36, (uint64_t)&v57);
      v37 += 4;
      v36 += 48;
    }
    while (4 * v30 != v37);
  }
  unsigned int v40 = *(_DWORD *)(a7 + 8);
  unsigned int v41 = *(_DWORD *)(a7 + 12);
  if (v40 <= v41) {
    int v42 = *(_DWORD *)(a7 + 12);
  }
  else {
    int v42 = *(_DWORD *)(a7 + 8);
  }
  if (v41) {
    BOOL v43 = v40 == 0;
  }
  else {
    BOOL v43 = 1;
  }
  if (v43) {
    int v44 = 0;
  }
  else {
    int v44 = v42;
  }
  unsigned int v45 = *(_DWORD *)(a12 + 8);
  unsigned int v46 = *(_DWORD *)(a12 + 12);
  if (v45 <= v46) {
    int v47 = *(_DWORD *)(a12 + 12);
  }
  else {
    int v47 = *(_DWORD *)(a12 + 8);
  }
  if (v46) {
    BOOL v48 = v45 == 0;
  }
  else {
    BOOL v48 = 1;
  }
  if (v48) {
    int v49 = 0;
  }
  else {
    int v49 = v47;
  }
  uint64_t result = sub_18E14F41C(v55, v52, (uint64_t)&v90, (uint64_t)&v85, (uint64_t)&v80, v25, (uint64_t)&v72, v56, (uint64_t)v71, v54, a4, (uint64_t)v69, (uint64_t)&v65, a5, v44, a6, a7, v53, v30,
             a9,
             a10,
             v49,
             a11,
             a12,
             a13,
             v55 + 4192);
  for (uint64_t i = 2104; i != -8; i -= 48)
    *(uint64_t *)((char *)&v65 + i) = (uint64_t)&unk_1EDD17478;
  return result;
}

void sub_18E1491CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  for (uint64_t i = 2104; i != -8; i -= 48)
    *(void *)(&a41 + i) = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

uint64_t sub_18E14920C(uint64_t a1)
{
  MEMORY[0x1F4188790](a1);
  uint64_t v208 = v2;
  uint64_t v209 = v3;
  uint64_t v216 = v4;
  uint64_t v6 = v5;
  uint64_t v7 = v1;
  if (!*(_DWORD *)(v1 + 2180))
  {
    sub_18DFE2F24(v1 + 1088, v1 + 8);
    sub_18DFE2F24(v7 + 1208, v7 + 128);
    sub_18DFE2F24(v7 + 2048, v7 + 968);
  }
  uint64_t v8 = *(unsigned int *)(v6 + 8);
  if ((v8 & 0x80000000) != 0) {
    goto LABEL_226;
  }
  unsigned int v9 = *(_DWORD *)(v7 + 1096);
  unsigned int v10 = *(_DWORD *)(v7 + 1100);
  if (v9 <= v10) {
    unsigned int v11 = *(_DWORD *)(v7 + 1100);
  }
  else {
    unsigned int v11 = *(_DWORD *)(v7 + 1096);
  }
  if (v10) {
    BOOL v12 = v9 == 0;
  }
  else {
    BOOL v12 = 1;
  }
  uint64_t v222 = 0x10000000ALL;
  long long v217 = &unk_1EDD17628;
  if (v12) {
    uint64_t v13 = 0;
  }
  else {
    uint64_t v13 = v11;
  }
  uint64_t v215 = v13;
  uint64_t v223 = &v224;
  int v218 = v8;
  int v219 = 1;
  int v220 = v8;
  uint64_t v204 = v8;
  int v221 = v8;
  sub_18DFE2CC8((uint64_t)&v217, 0.0);
  unsigned int v14 = *(_DWORD *)(v209 + 8);
  unsigned int v15 = *(_DWORD *)(v209 + 12);
  if (v14 <= v15) {
    unsigned int v16 = *(_DWORD *)(v209 + 12);
  }
  else {
    unsigned int v16 = *(_DWORD *)(v209 + 8);
  }
  if (v15) {
    BOOL v17 = v14 == 0;
  }
  else {
    BOOL v17 = 1;
  }
  if (v17) {
    uint64_t v18 = 0;
  }
  else {
    uint64_t v18 = v16;
  }
  double v19 = *(double *)(v7 + 4256);
  int v206 = *(unsigned __int8 *)(v7 + 4281);
  sub_18E1550F8((uint64_t)&v260, v216, 0);
  *(_DWORD *)&v321[20] = 1;
  double v322 = v323;
  uint64_t v20 = DWORD1(v261);
  *(_DWORD *)v321 = 1;
  *(_DWORD *)&v321[4] = DWORD1(v261);
  *(_DWORD *)&v321[8] = DWORD1(v261);
  *(void *)&v321[12] = 0x100000001;
  if (DWORD1(v261))
  {
    uint64_t v21 = 0;
    unsigned int v22 = v263;
    unsigned int v23 = v261;
    uint64_t v24 = v261 - 1;
    int v25 = 1;
    do
    {
      int v26 = v22[v23 * v21];
      unsigned int v27 = v25;
      uint64_t v28 = v24;
      if (v23 >= 2)
      {
        do
        {
          v26 += v22[v27++];
          --v28;
        }
        while (v28);
      }
      v323[v21++] = v26;
      v25 += v23;
    }
    while (v21 != v20);
  }
  uint64_t v210 = v7 + 1088;
  sub_18E1550F8((uint64_t)&v260, v216, 1);
  *(_DWORD *)&v321[20] = 1;
  double v322 = v323;
  uint64_t v29 = DWORD1(v261);
  *(_DWORD *)v321 = 1;
  *(_DWORD *)&v321[4] = DWORD1(v261);
  *(_DWORD *)&v321[8] = DWORD1(v261);
  *(void *)&v321[12] = 0x100000001;
  if (DWORD1(v261))
  {
    uint64_t v30 = 0;
    uint64_t v31 = v263;
    unsigned int v32 = v261;
    uint64_t v33 = v261 - 1;
    int v34 = 1;
    do
    {
      int v35 = v31[v32 * v30];
      unsigned int v36 = v34;
      uint64_t v37 = v33;
      if (v32 >= 2)
      {
        do
        {
          v35 += v31[v36++];
          --v37;
        }
        while (v37);
      }
      v323[v30++] = v35;
      v34 += v32;
    }
    while (v30 != v29);
  }
  if (!*(_DWORD *)(v7 + 1096) || !*(_DWORD *)(v7 + 1100))
  {
    if ((v215 & 0x80000000) == 0)
    {
      *(void *)&v321[16] = 0x10000000ALL;
      uint64_t v320 = &unk_1EDD17628;
      double v322 = v323;
      *(_DWORD *)v321 = v215;
      *(_DWORD *)&v321[4] = 1;
      *(_DWORD *)&v321[8] = v215;
      *(_DWORD *)&v321[12] = v215;
      sub_18DFE2CC8((uint64_t)&v320, 0.0);
      sub_18DFE2F24(v210, (uint64_t)&v320);
      goto LABEL_36;
    }
LABEL_226:
    __assert_rtn("Zeros", "cnmatrix.h", 3098, "nr >= 0");
  }
LABEL_36:
  unsigned int v38 = v215;
  if (!*(_DWORD *)(v7 + 1216) || !*(_DWORD *)(v7 + 1220))
  {
    if ((v215 & 0x80000000) != 0) {
      __assert_rtn("Zeros", "cnmatrix.h", 3056, "n >= 0");
    }
    *(void *)&v321[16] = 0xA0000000ALL;
    uint64_t v320 = &unk_1EDD175C8;
    double v322 = v323;
    *(_DWORD *)v321 = v215;
    *(_DWORD *)&v321[4] = v215;
    *(_DWORD *)&v321[8] = v215 * v215;
    *(_DWORD *)&v321[12] = v215;
    sub_18DFE2CC8((uint64_t)&v320, 0.0);
    sub_18DFE2F24(v7 + 1208, (uint64_t)&v320);
    unsigned int v38 = v215;
  }
  if (!*(_DWORD *)(v7 + 2056) || !*(_DWORD *)(v7 + 2060))
  {
    *(void *)&v321[16] = 0x10000000ALL;
    *(_OWORD *)v321 = xmmword_18E200CF0;
    uint64_t v320 = &unk_1EDD17628;
    double v322 = v323;
    sub_18DFE2B44(v7 + 1208, v210, (uint64_t)&v320);
    sub_18DFE2F24(v7 + 2048, (uint64_t)&v320);
    unsigned int v38 = v215;
  }
  if ((v38 & 0x80000000) != 0) {
    __assert_rtn("Zeros", "cnmatrix.h", 3099, "nc >= 0");
  }
  uint64_t v196 = v7 + 2048;
  uint64_t v201 = v7 + 1208;
  *(void *)&v321[16] = 0xA0000000ALL;
  unsigned int v39 = v38;
  uint64_t v320 = &unk_1EDD175C8;
  double v322 = v323;
  *(_DWORD *)v321 = v204;
  *(_DWORD *)&v321[4] = v38;
  unsigned int v200 = v38 * v204;
  *(_DWORD *)&v321[8] = v38 * v204;
  *(_DWORD *)&v321[12] = v204;
  sub_18DFE2CC8((uint64_t)&v320, 0.0);
  uint64_t v199 = v7 + 2392;
  sub_18DFE2F24(v7 + 2392, (uint64_t)&v320);
  *(void *)&v321[16] = 0x10000000ALL;
  uint64_t v320 = &unk_1EDD17628;
  double v322 = v323;
  *(_DWORD *)v321 = v204;
  *(_DWORD *)&v321[4] = 1;
  *(_DWORD *)&v321[8] = v204;
  *(_DWORD *)&v321[12] = v204;
  sub_18DFE2CC8((uint64_t)&v320, 0.0);
  uint64_t v198 = v7 + 3232;
  sub_18DFE2F24(v7 + 3232, (uint64_t)&v320);
  uint64_t v197 = v7 + 3352;
  sub_18DFE2F24(v7 + 3352, v6);
  *(_DWORD *)(v7 + 2180) = 1;
  v40.i32[1] = 1;
  int32x4_t v41 = vdupq_lane_s32((int32x2_t)(v39 | 0x100000000), 0);
  v41.i32[1] = 1;
  *(int32x4_t *)(v7 + 16) = v41;
  uint64_t v313 = 0x100000001;
  long long v314 = 0;
  int32x4_t v312 = 0uLL;
  char v311 = &unk_1EDD17E98;
  uint64_t v317 = 0x10000000ALL;
  long long v316 = xmmword_18E200CF0;
  long long v315 = &unk_1EDD17628;
  char v318 = &v319;
  if ((v18 & 0x80000000) != 0) {
    __assert_rtn("CNMatrix", "cnmatrix.h", 419, "nr >= 0");
  }
  v40.i32[0] = v18;
  int32x4_t v42 = vdupq_lane_s32(v40, 0);
  v42.i32[1] = 1;
  uint64_t v205 = v7 + 8;
  int32x4_t v312 = v42;
  long long v314 = &v315;
  sub_18E15919C((uint64_t)&v309, v18);
  sub_18E15919C((uint64_t)&v307, v18);
  uint64_t v304 = 0x10000000ALL;
  long long v303 = xmmword_18E200CF0;
  long long v302 = &unk_1EDD17658;
  long long v305 = &v306;
  uint64_t v299 = 0x10000000ALL;
  long long v298 = xmmword_18E200CF0;
  uint64_t v297 = &unk_1EDD17658;
  double v300 = &v301;
  uint64_t v203 = v6;
  uint64_t v195 = v7;
  uint64_t v214 = v18;
  if (v18)
  {
    uint64_t v43 = 0;
    int v44 = 0;
    int v45 = 0;
    uint64_t v46 = *(void *)(v216 + 32);
    char v47 = 1;
    do
    {
      uint64_t v48 = *(unsigned int *)(v46 + 4 * v43);
      uint64_t v227 = 0xA00000001;
      uint64_t v225 = &unk_1EDD17DD8;
      int v228 = v229;
      if (v48 == 1)
      {
        char v49 = 0;
        *(void *)&long long v50 = 0x100000001;
        *((void *)&v50 + 1) = 0x100000001;
        long long v226 = v50;
        v229[0] = 0;
        int v51 = 1;
        LODWORD(v48) = 1;
      }
      else if ((int)v48 <= 0)
      {
        int v51 = 0;
        LODWORD(v48) = 0;
        long long v226 = 0uLL;
        char v49 = 1;
      }
      else
      {
        uint64_t v52 = 0;
        LODWORD(v226) = 1;
        DWORD1(v226) = v48;
        *((void *)&v226 + 1) = v48 | 0x100000000;
        do
        {
          v229[v52] = v52;
          ++v52;
        }
        while (v48 != v52);
        char v49 = 0;
        int v51 = 1;
      }
      uint64_t v262 = 0x10000000ALL;
      uint64_t v260 = &unk_1EDD17658;
      int v263 = v264;
      *(void *)&long long v261 = __PAIR64__(v51, v48);
      DWORD2(v261) = v48 * v51;
      HIDWORD(v261) = v48;
      if (v48)
      {
        int v53 = 0;
        int v54 = 0;
        do
        {
          if ((v49 & 1) == 0)
          {
            int v55 = 0;
            do
            {
              v264[v54 + HIDWORD(v261) * v55] = v229[v53 + v55];
              ++v55;
            }
            while (v51 != v55);
          }
          ++v54;
          v53 += v51;
        }
        while (v54 != v48);
        int v56 = v261;
        int v51 = DWORD1(v261);
      }
      else
      {
        int v56 = 0;
      }
      *(void *)&v321[16] = 0x10000000ALL;
      uint64_t v320 = &unk_1EDD17658;
      double v322 = v323;
      *(_DWORD *)v321 = v56;
      *(_DWORD *)&v321[4] = v51;
      uint64_t v57 = (v56 * v51);
      *(_DWORD *)&v321[8] = v57;
      *(_DWORD *)&v321[12] = v56;
      if ((int)v57 >= 1)
      {
        int v58 = v264;
        int v59 = v323;
        do
        {
          int v60 = *v58++;
          *v59++ = v60 + v45;
          --v57;
        }
        while (v57);
      }
      sub_18DFEEA3C((uint64_t)&v302, (uint64_t)&v320);
      uint64_t v61 = *(unsigned int *)(*(void *)(v216 + 32) + 4 * (*(_DWORD *)(v216 + 20) + (int)v43));
      uint64_t v227 = 0xA00000001;
      uint64_t v225 = &unk_1EDD17DD8;
      int v228 = v229;
      if (v61 == 1)
      {
        char v62 = 0;
        *(void *)&long long v63 = 0x100000001;
        *((void *)&v63 + 1) = 0x100000001;
        long long v226 = v63;
        v229[0] = 0;
        int v64 = 1;
        LODWORD(v61) = 1;
      }
      else if ((int)v61 <= 0)
      {
        int v64 = 0;
        LODWORD(v61) = 0;
        long long v226 = 0uLL;
        char v62 = 1;
      }
      else
      {
        uint64_t v65 = 0;
        LODWORD(v226) = 1;
        DWORD1(v226) = v61;
        *((void *)&v226 + 1) = v61 | 0x100000000;
        do
        {
          v229[v65] = v65;
          ++v65;
        }
        while (v61 != v65);
        char v62 = 0;
        int v64 = 1;
      }
      uint64_t v262 = 0x10000000ALL;
      uint64_t v260 = &unk_1EDD17658;
      int v263 = v264;
      *(void *)&long long v261 = __PAIR64__(v64, v61);
      DWORD2(v261) = v61 * v64;
      HIDWORD(v261) = v61;
      if (v61)
      {
        int v66 = 0;
        int v67 = 0;
        do
        {
          if ((v62 & 1) == 0)
          {
            int v68 = 0;
            do
            {
              v264[v67 + HIDWORD(v261) * v68] = v229[v66 + v68];
              ++v68;
            }
            while (v64 != v68);
          }
          ++v67;
          v66 += v64;
        }
        while (v67 != v61);
        int v69 = v261;
        int v64 = DWORD1(v261);
      }
      else
      {
        int v69 = 0;
      }
      *(void *)&v321[16] = 0x10000000ALL;
      uint64_t v320 = &unk_1EDD17658;
      double v322 = v323;
      *(_DWORD *)v321 = v69;
      *(_DWORD *)&v321[4] = v64;
      uint64_t v70 = (v69 * v64);
      *(_DWORD *)&v321[8] = v70;
      *(_DWORD *)&v321[12] = v69;
      if ((int)v70 >= 1)
      {
        uint64_t v71 = v264;
        uint64_t v72 = v323;
        do
        {
          int v73 = *v71++;
          *v72++ = v73 + v44;
          --v70;
        }
        while (v70);
      }
      sub_18DFEEA3C((uint64_t)&v297, (uint64_t)&v320);
      uint64_t v287 = 0x10000000ALL;
      long long v286 = xmmword_18E200CF0;
      unint64_t v285 = &unk_1EDD17628;
      double v288 = (double *)v289;
      *(void *)&v321[16] = 0xA0000000ALL;
      *(_OWORD *)v321 = xmmword_18E1FD870;
      uint64_t v320 = &unk_1EDD175C8;
      double v322 = v323;
      uint64_t v262 = 0xA0000000ALL;
      long long v261 = xmmword_18E1FD870;
      uint64_t v260 = &unk_1EDD175C8;
      int v263 = v264;
      int v74 = *(unsigned int (**)(void **, void **, void, void **, void **, void **, double))(*(void *)(v209 + 32) + 8 * v43);
      sub_18E1568D0((uint64_t)&v225, v210, (uint64_t)&v302);
      double v75 = sub_18E158F44((uint64_t)&v291, (uint64_t)v223, (uint64_t)&v297);
      if (v74(&v225, &v291, *(void *)(*(void *)(v208 + 32) + 8 * v43), &v285, &v320, &v260, v75))
      {
        *(unsigned char *)(v195 + 2176) = 0;
        return 20;
      }
      sub_18E1568D0((uint64_t)&v225, v205, (uint64_t)&v302);
      sub_18E1551BC((uint64_t)&v225, SDWORD2(v286), v288);
      sub_18DFE2F24((uint64_t)&v314[15 * v43], (uint64_t)&v285);
      uint64_t v227 = 0xA0000000ALL;
      long long v226 = xmmword_18E1FD870;
      uint64_t v225 = &unk_1EDD175C8;
      int v228 = v229;
      uint64_t v282 = 0x10000000ALL;
      double v280 = &unk_1EDD17658;
      long long v281 = xmmword_18E200CF0;
      double v283 = v284;
      uint64_t v277 = 0x10000000ALL;
      long long v276 = xmmword_18E200CF0;
      double v275 = &unk_1EDD17658;
      int v278 = v279;
      uint64_t v293 = 0x100000028;
      long long v291 = &unk_1EDD18FD8;
      long long v292 = xmmword_18E21A0C0;
      uint64_t v294 = &v295;
      double v76 = sub_18E01D7FC((uint64_t)&v320, (uint64_t)&v280, (uint64_t)&v275, (uint64_t)&v291, (uint64_t)&v225);
      sub_18DFE2F24(v310 + 840 * v43, (uint64_t)&v225);
      *(void *)&double v77 = sub_18DFE2F24(v308 + 840 * v43, (uint64_t)&v260).n128_u64[0];
      v47 &= v76 <= v19;
      uint64_t v46 = *(void *)(v216 + 32);
      v45 += *(_DWORD *)(v46 + 4 * v43);
      v44 += *(_DWORD *)(v46 + 4 * (*(_DWORD *)(v216 + 20) + (int)v43++));
    }
    while (v43 != v214);
    uint64_t v7 = v195;
    LODWORD(v18) = v214;
    if (v47) {
      goto LABEL_86;
    }
    LOWORD(v320) = 2;
    LOBYTE(v260) = 2;
    unsigned __int8 v188 = cnprint::CNLogFormatter::FormatWarning((cnprint::CNLogFormatter *)(v195 + 2344), "Predict state Jacobian matrix is not invertible.", v77);
    if (*(char *)(v195 + 2367) >= 0) {
      LOBYTE(v194) = v188;
    }
    else {
      uint64_t v194 = *(void *)(v195 + 2344);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v320, (unsigned __int8 *)&v260, "%s", v189, v190, v191, v192, v193, v194);
    sub_18DFE2F24(v195 + 128, v201);
    *(void *)&v321[16] = 0x10000000ALL;
    *(_OWORD *)v321 = xmmword_18E200CF0;
    uint64_t v320 = &unk_1EDD17628;
    double v322 = v323;
    sub_18DFE2B44(v195 + 128, v205, (uint64_t)&v320);
    sub_18DFE2F24(v195 + 968, (uint64_t)&v320);
    *(void *)&v321[16] = 0xA0000000ALL;
    uint64_t v320 = &unk_1EDD175C8;
    double v322 = v323;
    *(_DWORD *)v321 = v204;
    *(_DWORD *)&v321[4] = v215;
    *(_DWORD *)&v321[8] = v200;
    *(_DWORD *)&v321[12] = v204;
    sub_18DFE2CC8((uint64_t)&v320, 0.0);
    sub_18DFE2F24(v199, (uint64_t)&v320);
    *(void *)&v321[16] = 0x10000000ALL;
    uint64_t v320 = &unk_1EDD17628;
    double v322 = v323;
    *(_DWORD *)v321 = v204;
    *(_DWORD *)&v321[4] = 1;
    *(_DWORD *)&v321[8] = v204;
    *(_DWORD *)&v321[12] = v204;
    sub_18DFE2CC8((uint64_t)&v320, 0.0);
    sub_18DFE2F24(v198, (uint64_t)&v320);
    sub_18DFE2F24(v197, v6);
    *(_DWORD *)(v195 + 2180) = 0;
    *(unsigned char *)(v195 + 2176) = 0;
    return 21;
  }
  else
  {
LABEL_86:
    if (v206) {
      uint64_t v78 = v18;
    }
    else {
      uint64_t v78 = 1;
    }
    uint64_t v202 = v78;
    sub_18E14E5D4((uint64_t)v296, v210);
    sub_18E14EBB4((uint64_t)&v291, v201);
    sub_18E14E5D4((uint64_t)v290, v196);
    *(void *)(v7 + 2408) = 0;
    *(void *)(v7 + 2400) = 0;
    *(void *)(v7 + 3248) = 0;
    *(void *)(v7 + 3240) = 0;
    *(void *)(v7 + 3368) = 0;
    *(void *)(v7 + 3360) = 0;
    uint64_t v287 = 0xA0000000ALL;
    long long v286 = xmmword_18E1FD870;
    unint64_t v285 = &unk_1EDD175C8;
    double v288 = (double *)v289;
    uint64_t v282 = 0xA0000000ALL;
    double v280 = &unk_1EDD175C8;
    double v283 = v284;
    LODWORD(v281) = v215;
    DWORD1(v281) = v215;
    DWORD2(v281) = v215 * v215;
    HIDWORD(v281) = v215;
    sub_18DFE2CC8((uint64_t)&v280, 0.0);
    uint64_t v79 = v215;
    if (v215)
    {
      int v80 = 0;
      int v81 = HIDWORD(v281) + 1;
      uint64_t v82 = v283;
      do
      {
        *(void *)&v82[8 * v80] = 0x3FF0000000000000;
        v80 += v81;
        --v79;
      }
      while (v79);
    }
    uint64_t v277 = 0xA0000000ALL;
    long long v276 = xmmword_18E1FD870;
    double v275 = &unk_1EDD175C8;
    int v278 = v279;
    uint64_t v272 = 0x10000000ALL;
    long long v271 = xmmword_18E200CF0;
    uint64_t v270 = &unk_1EDD17628;
    uint64_t v273 = &v274;
    uint64_t v267 = 0x10000000ALL;
    long long v266 = xmmword_18E200CF0;
    char v265 = &unk_1EDD17628;
    int v83 = v215;
    double v268 = &v269;
    if ((int)v202 >= 1)
    {
      uint64_t v84 = 0;
      int v85 = 0;
      int v86 = 0;
      unsigned int v211 = v215;
      do
      {
        uint64_t v207 = v84;
        if (v206)
        {
          if (v84)
          {
            if ((v211 & 0x80000000) != 0) {
              __assert_rtn("Eye", "cnmatrix.h", 2094, "n >= 0");
            }
            uint64_t v262 = 0xA0000000ALL;
            uint64_t v260 = &unk_1EDD175C8;
            int v263 = v264;
            LODWORD(v261) = v211;
            DWORD1(v261) = v211;
            DWORD2(v261) = v211 * v211;
            HIDWORD(v261) = v211;
            sub_18DFE2CC8((uint64_t)&v260, 0.0);
            if (v211)
            {
              int v87 = 0;
              int v88 = HIDWORD(v261) + 1;
              uint64_t v89 = v263;
              uint64_t v90 = v211;
              do
              {
                *(void *)&v89[2 * v87] = 0x3FF0000000000000;
                v87 += v88;
                --v90;
              }
              while (v90);
            }
            sub_18E1569F8((uint64_t)&v320, (uint64_t)&v280, (uint64_t)&v302, (uint64_t)&v302);
            sub_18E155230((uint64_t)&v320, (uint64_t)&v260);
          }
          uint64_t v91 = *(unsigned int *)(*(void *)(v216 + 32) + 4 * v84);
          uint64_t v227 = 0xA00000001;
          uint64_t v225 = &unk_1EDD17DD8;
          int v228 = v229;
          if (v91 == 1)
          {
            char v92 = 0;
            *(void *)&long long v93 = 0x100000001;
            *((void *)&v93 + 1) = 0x100000001;
            long long v226 = v93;
            v229[0] = 0;
            int v94 = 1;
            LODWORD(v91) = 1;
          }
          else if ((int)v91 <= 0)
          {
            int v94 = 0;
            LODWORD(v91) = 0;
            long long v226 = 0uLL;
            char v92 = 1;
          }
          else
          {
            uint64_t v128 = 0;
            LODWORD(v226) = 1;
            DWORD1(v226) = v91;
            *((void *)&v226 + 1) = v91 | 0x100000000;
            do
            {
              v229[v128] = v128;
              ++v128;
            }
            while (v91 != v128);
            char v92 = 0;
            int v94 = 1;
          }
          uint64_t v262 = 0x10000000ALL;
          uint64_t v260 = &unk_1EDD17658;
          int v263 = v264;
          *(void *)&long long v261 = __PAIR64__(v94, v91);
          DWORD2(v261) = v91 * v94;
          HIDWORD(v261) = v91;
          if (v91)
          {
            int v132 = 0;
            int v133 = 0;
            do
            {
              if ((v92 & 1) == 0)
              {
                int v134 = 0;
                do
                {
                  v264[v133 + HIDWORD(v261) * v134] = v229[v132 + v134];
                  ++v134;
                }
                while (v94 != v134);
              }
              ++v133;
              v132 += v94;
            }
            while (v133 != v91);
            int v135 = v261;
            int v94 = DWORD1(v261);
          }
          else
          {
            int v135 = 0;
          }
          *(void *)&v321[16] = 0x10000000ALL;
          uint64_t v320 = &unk_1EDD17658;
          double v322 = v323;
          *(_DWORD *)v321 = v135;
          *(_DWORD *)&v321[4] = v94;
          uint64_t v136 = (v135 * v94);
          *(_DWORD *)&v321[8] = v136;
          *(_DWORD *)&v321[12] = v135;
          if ((int)v136 >= 1)
          {
            uint64_t v137 = v264;
            uint64_t v138 = v323;
            do
            {
              int v139 = *v137++;
              *v138++ = v139 + v86;
              --v136;
            }
            while (v136);
          }
          sub_18DFEEA3C((uint64_t)&v302, (uint64_t)&v320);
          uint64_t v140 = *(unsigned int *)(*(void *)(v216 + 32) + 4 * (*(_DWORD *)(v216 + 20) + (int)v84));
          uint64_t v227 = 0xA00000001;
          uint64_t v225 = &unk_1EDD17DD8;
          int v228 = v229;
          if (v140 == 1)
          {
            char v141 = 0;
            *(void *)&long long v142 = 0x100000001;
            *((void *)&v142 + 1) = 0x100000001;
            long long v226 = v142;
            v229[0] = 0;
            int v143 = 1;
            LODWORD(v140) = 1;
          }
          else if ((int)v140 <= 0)
          {
            int v143 = 0;
            LODWORD(v140) = 0;
            long long v226 = 0uLL;
            char v141 = 1;
          }
          else
          {
            uint64_t v144 = 0;
            LODWORD(v226) = 1;
            DWORD1(v226) = v140;
            *((void *)&v226 + 1) = v140 | 0x100000000;
            do
            {
              v229[v144] = v144;
              ++v144;
            }
            while (v140 != v144);
            char v141 = 0;
            int v143 = 1;
          }
          uint64_t v262 = 0x10000000ALL;
          uint64_t v260 = &unk_1EDD17658;
          int v263 = v264;
          *(void *)&long long v261 = __PAIR64__(v143, v140);
          DWORD2(v261) = v140 * v143;
          HIDWORD(v261) = v140;
          if (v140)
          {
            int v145 = 0;
            int v146 = 0;
            do
            {
              if ((v141 & 1) == 0)
              {
                int v147 = 0;
                do
                {
                  v264[v146 + HIDWORD(v261) * v147] = v229[v145 + v147];
                  ++v147;
                }
                while (v143 != v147);
              }
              ++v146;
              v145 += v143;
            }
            while (v146 != v140);
            int v148 = v261;
            int v143 = DWORD1(v261);
          }
          else
          {
            int v148 = 0;
          }
          *(void *)&v321[16] = 0x10000000ALL;
          uint64_t v320 = &unk_1EDD17658;
          double v322 = v323;
          *(_DWORD *)v321 = v148;
          *(_DWORD *)&v321[4] = v143;
          uint64_t v149 = (v148 * v143);
          *(_DWORD *)&v321[8] = v149;
          *(_DWORD *)&v321[12] = v148;
          if ((int)v149 >= 1)
          {
            char v150 = v264;
            double v151 = v323;
            do
            {
              int v152 = *v150++;
              *v151++ = v152 + v85;
              --v149;
            }
            while (v149);
          }
          sub_18DFEEA3C((uint64_t)&v297, (uint64_t)&v320);
          int v153 = *(_DWORD *)(v6 + 20);
          uint64_t v154 = *(void *)(v6 + 32);
          int v155 = DWORD2(v298);
          int v156 = v300;
          *(void *)&v321[16] = 0xA0000000ALL;
          *(_DWORD *)v321 = DWORD2(v298);
          *(_DWORD *)&v321[4] = DWORD2(v298);
          *(_DWORD *)&v321[8] = *(_DWORD *)&v321[4] * *(_DWORD *)&v321[4];
          *(_DWORD *)&v321[12] = DWORD2(v298);
          uint64_t v320 = &unk_1EDD175C8;
          double v322 = v323;
          if (DWORD2(v298))
          {
            int v157 = 0;
            int v158 = 0;
            do
            {
              int v159 = 0;
              int v160 = *((_DWORD *)v156 + v158) * v153;
              do
              {
                *(void *)&v323[2 * (v157 + v159)] = *(void *)(v154
                                                                + 8 * (*((_DWORD *)v156 + v159) + v160));
                ++v159;
              }
              while (v155 != v159);
              ++v158;
              v157 += v155;
            }
            while (v158 != v155);
          }
          sub_18DFE2F24((uint64_t)&v285, (uint64_t)&v320);
          uint64_t v161 = *(void *)(v216 + 32);
          unsigned int v162 = *(_DWORD *)(v161 + 4 * (*(_DWORD *)(v216 + 20) + (int)v84));
          unsigned int v211 = *(_DWORD *)(v161 + 4 * v84);
          uint64_t v163 = v310;
          sub_18E1569F8((uint64_t)&v320, (uint64_t)&v280, (uint64_t)&v302, (uint64_t)&v302);
          sub_18E155230((uint64_t)&v320, v163 + 840 * v207);
          if ((v162 & 0x80000000) != 0) {
            __assert_rtn("Zeros", "cnmatrix.h", 3099, "nc >= 0");
          }
          *(void *)&v321[16] = 0xA0000000ALL;
          unsigned int v164 = v162 * v215;
          uint64_t v320 = &unk_1EDD175C8;
          double v322 = v323;
          *(_DWORD *)v321 = v215;
          *(_DWORD *)&v321[4] = v162;
          unsigned int v212 = v162;
          *(_DWORD *)&v321[8] = v162 * v215;
          *(_DWORD *)&v321[12] = v215;
          sub_18DFE2CC8((uint64_t)&v320, 0.0);
          sub_18DFE2F24((uint64_t)&v275, (uint64_t)&v320);
          uint64_t v165 = v308;
          uint64_t v166 = DWORD1(v276);
          sub_18E156E30(&v260, DWORD1(v276));
          if ((int)v166 >= 1)
          {
            uint64_t v167 = 0;
            double v168 = v263;
            do
            {
              v168[v167] = v167;
              ++v167;
            }
            while (v166 != v167);
          }
          sub_18E1569F8((uint64_t)&v320, (uint64_t)&v275, (uint64_t)&v302, (uint64_t)&v260);
          sub_18E155230((uint64_t)&v320, v165 + 840 * v207);
          sub_18DFE2F24((uint64_t)&v270, (uint64_t)v296);
          double v169 = v314;
          sub_18E1568D0((uint64_t)&v320, (uint64_t)&v270, (uint64_t)&v302);
          sub_18E1551BC((uint64_t)&v320, (int)v169[15 * v207 + 2], (double *)v169[15 * v207 + 4]);
          uint64_t v6 = v203;
          sub_18E158F44((uint64_t)&v320, (uint64_t)v223, (uint64_t)&v297);
          sub_18DFE2F24((uint64_t)&v265, (uint64_t)&v320);
          uint64_t v170 = *(void *)(v216 + 32);
          v86 += *(_DWORD *)(v170 + 4 * v207);
          v85 += *(_DWORD *)(v170 + 4 * (*(_DWORD *)(v216 + 20) + (int)v207));
          unsigned int v131 = v215;
          unsigned int v130 = v212;
          unsigned int v129 = v164;
        }
        else
        {
          uint64_t v95 = v6;
          int v96 = v83;
          sub_18DFE2F24((uint64_t)&v285, v95);
          *(void *)&v321[16] = 0xA0000000ALL;
          uint64_t v320 = &unk_1EDD175C8;
          double v322 = v323;
          *(_DWORD *)v321 = v96;
          *(_DWORD *)&v321[4] = v204;
          *(_DWORD *)&v321[8] = v200;
          *(_DWORD *)&v321[12] = v96;
          sub_18DFE2CC8((uint64_t)&v320, 0.0);
          sub_18DFE2F24((uint64_t)&v275, (uint64_t)&v320);
          sub_18DFE2F24((uint64_t)&v270, v205);
          sub_18DFE2F24((uint64_t)&v265, (uint64_t)&v217);
          if (v214)
          {
            uint64_t v97 = 0;
            uint64_t v98 = *(void *)(v216 + 32);
            do
            {
              uint64_t v99 = *(unsigned int *)(v98 + 4 * v97);
              uint64_t v227 = 0xA00000001;
              uint64_t v225 = &unk_1EDD17DD8;
              int v228 = v229;
              if (v99 == 1)
              {
                char v100 = 0;
                *(void *)&long long v101 = 0x100000001;
                *((void *)&v101 + 1) = 0x100000001;
                long long v226 = v101;
                v229[0] = 0;
                int v102 = 1;
                LODWORD(v99) = 1;
              }
              else if ((int)v99 <= 0)
              {
                int v102 = 0;
                LODWORD(v99) = 0;
                long long v226 = 0uLL;
                char v100 = 1;
              }
              else
              {
                uint64_t v103 = 0;
                LODWORD(v226) = 1;
                DWORD1(v226) = v99;
                *((void *)&v226 + 1) = v99 | 0x100000000;
                do
                {
                  v229[v103] = v103;
                  ++v103;
                }
                while (v99 != v103);
                char v100 = 0;
                int v102 = 1;
              }
              uint64_t v262 = 0x10000000ALL;
              uint64_t v260 = &unk_1EDD17658;
              int v263 = v264;
              *(void *)&long long v261 = __PAIR64__(v102, v99);
              DWORD2(v261) = v99 * v102;
              HIDWORD(v261) = v99;
              if (v99)
              {
                int v104 = 0;
                int v105 = 0;
                do
                {
                  if ((v100 & 1) == 0)
                  {
                    int v106 = 0;
                    do
                    {
                      v264[v105 + HIDWORD(v261) * v106] = v229[v104 + v106];
                      ++v106;
                    }
                    while (v102 != v106);
                  }
                  ++v105;
                  v104 += v102;
                }
                while (v105 != v99);
                int v107 = v261;
                int v102 = DWORD1(v261);
              }
              else
              {
                int v107 = 0;
              }
              *(void *)&v321[16] = 0x10000000ALL;
              uint64_t v320 = &unk_1EDD17658;
              double v322 = v323;
              *(_DWORD *)v321 = v107;
              *(_DWORD *)&v321[4] = v102;
              uint64_t v108 = (v107 * v102);
              *(_DWORD *)&v321[8] = v108;
              *(_DWORD *)&v321[12] = v107;
              if ((int)v108 >= 1)
              {
                unsigned int v109 = v264;
                uint64_t v110 = v323;
                do
                {
                  int v111 = *v109++;
                  *v110++ = v111 + v86;
                  --v108;
                }
                while (v108);
              }
              sub_18DFEEA3C((uint64_t)&v302, (uint64_t)&v320);
              uint64_t v112 = *(unsigned int *)(*(void *)(v216 + 32) + 4 * (*(_DWORD *)(v216 + 20) + (int)v97));
              uint64_t v227 = 0xA00000001;
              uint64_t v225 = &unk_1EDD17DD8;
              int v228 = v229;
              if (v112 == 1)
              {
                char v113 = 0;
                *(void *)&long long v114 = 0x100000001;
                *((void *)&v114 + 1) = 0x100000001;
                long long v226 = v114;
                v229[0] = 0;
                int v115 = 1;
                LODWORD(v112) = 1;
              }
              else if ((int)v112 <= 0)
              {
                int v115 = 0;
                LODWORD(v112) = 0;
                long long v226 = 0uLL;
                char v113 = 1;
              }
              else
              {
                uint64_t v116 = 0;
                LODWORD(v226) = 1;
                DWORD1(v226) = v112;
                *((void *)&v226 + 1) = v112 | 0x100000000;
                do
                {
                  v229[v116] = v116;
                  ++v116;
                }
                while (v112 != v116);
                char v113 = 0;
                int v115 = 1;
              }
              uint64_t v262 = 0x10000000ALL;
              uint64_t v260 = &unk_1EDD17658;
              int v263 = v264;
              *(void *)&long long v261 = __PAIR64__(v115, v112);
              DWORD2(v261) = v112 * v115;
              HIDWORD(v261) = v112;
              if (v112)
              {
                int v117 = 0;
                int v118 = 0;
                do
                {
                  if ((v113 & 1) == 0)
                  {
                    int v119 = 0;
                    do
                    {
                      v264[v118 + HIDWORD(v261) * v119] = v229[v117 + v119];
                      ++v119;
                    }
                    while (v115 != v119);
                  }
                  ++v118;
                  v117 += v115;
                }
                while (v118 != v112);
                int v120 = v261;
                int v115 = DWORD1(v261);
              }
              else
              {
                int v120 = 0;
              }
              *(void *)&v321[16] = 0x10000000ALL;
              uint64_t v320 = &unk_1EDD17658;
              double v322 = v323;
              *(_DWORD *)v321 = v120;
              *(_DWORD *)&v321[4] = v115;
              uint64_t v121 = (v120 * v115);
              *(_DWORD *)&v321[8] = v121;
              *(_DWORD *)&v321[12] = v120;
              if ((int)v121 >= 1)
              {
                unsigned int v122 = v264;
                BOOL v123 = v323;
                do
                {
                  int v124 = *v122++;
                  *v123++ = v124 + v85;
                  --v121;
                }
                while (v121);
              }
              sub_18DFEEA3C((uint64_t)&v297, (uint64_t)&v320);
              uint64_t v125 = v310;
              sub_18E1569F8((uint64_t)&v320, (uint64_t)&v280, (uint64_t)&v302, (uint64_t)&v302);
              sub_18E155230((uint64_t)&v320, v125 + 840 * v97);
              uint64_t v126 = v308;
              sub_18E1569F8((uint64_t)&v320, (uint64_t)&v275, (uint64_t)&v302, (uint64_t)&v297);
              sub_18E155230((uint64_t)&v320, v126 + 840 * v97);
              uint64_t v98 = *(void *)(v216 + 32);
              v86 += *(_DWORD *)(v98 + 4 * v97);
              v85 += *(_DWORD *)(v98 + 4 * (*(_DWORD *)(v216 + 20) + (int)v97++));
              unsigned int v127 = v215;
            }
            while (v97 != v214);
          }
          else
          {
            unsigned int v127 = v215;
          }
          unsigned int v129 = v200;
          unsigned int v211 = v127;
          uint64_t v6 = v203;
          unsigned int v130 = v204;
          unsigned int v131 = v127;
        }
        uint64_t v257 = 0xA0000000ALL;
        BOOL v255 = &unk_1EDD175C8;
        uint64_t v258 = v259;
        *(void *)&long long v256 = __PAIR64__(v131, v130);
        *((void *)&v256 + 1) = __PAIR64__(v130, v129);
        unsigned int v213 = v130;
        sub_18DFE2CC8((uint64_t)&v255, 0.0);
        *(void *)&v321[16] = 0x140000000ALL;
        *(_OWORD *)v321 = xmmword_18E21A0E0;
        uint64_t v320 = &unk_1EDD17688;
        double v322 = v323;
        sub_18E064994((uint64_t)&v285, (uint64_t)&v255, (uint64_t)&v320);
        uint64_t v247 = 0xA0000000ALL;
        long long v246 = xmmword_18E1FD870;
        int8x16_t v245 = &unk_1EDD175C8;
        uint64_t v248 = v249;
        sub_18DFEF380((uint64_t)&v291, (uint64_t)&v245);
        uint64_t v242 = 0xA0000000ALL;
        long long v241 = xmmword_18E1FD870;
        uint64_t v240 = &unk_1EDD175C8;
        BOOL v243 = v244;
        sub_18DFE2B44((uint64_t)&v280, (uint64_t)&v275, (uint64_t)&v240);
        uint64_t v252 = 0xA0000000ALL;
        long long v251 = xmmword_18E1FD870;
        uint64_t v250 = &unk_1EDD175C8;
        uint64_t v253 = v254;
        sub_18DFE2B44((uint64_t)&v245, (uint64_t)&v240, (uint64_t)&v250);
        uint64_t v237 = 0xA0000000ALL;
        long long v236 = xmmword_18E1FD870;
        int v235 = &unk_1EDD175C8;
        int v238 = v239;
        sub_18DFE2B44((uint64_t)&v291, (uint64_t)&v280, (uint64_t)&v235);
        uint64_t v227 = 0x140000000ALL;
        long long v226 = xmmword_18E21A0E0;
        uint64_t v225 = &unk_1EDD17688;
        int v228 = v229;
        sub_18E064994((uint64_t)&v250, (uint64_t)&v235, (uint64_t)&v225);
        uint64_t v262 = 0x1400000014;
        long long v261 = xmmword_18E21A0F0;
        uint64_t v260 = &unk_1EDD184C8;
        int v263 = v264;
        sub_18E075DE4((uint64_t)&v320, (uint64_t)&v225, (uint64_t)&v260);
        *(void *)&v321[16] = 0x10000000ALL;
        *(_OWORD *)v321 = xmmword_18E200CF0;
        uint64_t v320 = &unk_1EDD17628;
        double v322 = v323;
        sub_18DFE2B44((uint64_t)&v285, (uint64_t)&v265, (uint64_t)&v320);
        uint64_t v232 = 0x10000000ALL;
        long long v231 = xmmword_18E200CF0;
        BOOL v230 = &unk_1EDD17628;
        uint64_t v233 = &v234;
        sub_18DFE2B44((uint64_t)&v275, (uint64_t)&v265, (uint64_t)&v230);
        uint64_t v237 = 0x10000000ALL;
        long long v236 = xmmword_18E200CF0;
        int v235 = &unk_1EDD17628;
        int v238 = v239;
        sub_18DFE2AA8((uint64_t)&v270, (uint64_t)&v230, (uint64_t)&v235);
        uint64_t v242 = 0x10000000ALL;
        long long v241 = xmmword_18E200CF0;
        uint64_t v240 = &unk_1EDD17628;
        BOOL v243 = v244;
        sub_18DFE2B44((uint64_t)&v280, (uint64_t)&v235, (uint64_t)&v240);
        uint64_t v247 = 0x10000000ALL;
        long long v246 = xmmword_18E200CF0;
        int8x16_t v245 = &unk_1EDD17628;
        uint64_t v248 = v249;
        sub_18DFE2AA8((uint64_t)&v240, (uint64_t)v296, (uint64_t)&v245);
        uint64_t v257 = 0x10000000ALL;
        long long v256 = xmmword_18E200CF0;
        BOOL v255 = &unk_1EDD17628;
        uint64_t v258 = v259;
        sub_18DFE2B44((uint64_t)&v291, (uint64_t)&v245, (uint64_t)&v255);
        uint64_t v227 = 0x10000000ALL;
        long long v226 = xmmword_18E200CF0;
        uint64_t v225 = &unk_1EDD17628;
        int v228 = v229;
        sub_18DFEF1F4((uint64_t)&v255, (uint64_t)v290, (uint64_t)&v225);
        uint64_t v252 = 0x100000014;
        long long v251 = xmmword_18E21A100;
        uint64_t v250 = &unk_1EDD18468;
        uint64_t v253 = v254;
        sub_18E075DE4((uint64_t)&v320, (uint64_t)&v225, (uint64_t)&v250);
        uint64_t v227 = 0x1400000014;
        long long v226 = xmmword_18E21A0F0;
        uint64_t v225 = &unk_1EDD184C8;
        int v228 = v229;
        uint64_t v247 = 0x100000014;
        long long v246 = xmmword_18E21A100;
        int8x16_t v245 = &unk_1EDD18468;
        uint64_t v248 = v249;
        uint64_t v257 = 0x100000014;
        long long v256 = xmmword_18E21A100;
        BOOL v255 = &unk_1EDD18468;
        uint64_t v258 = v259;
        *(void *)&v321[16] = 0x1400000014;
        *(_OWORD *)v321 = xmmword_18E21A0F0;
        uint64_t v320 = &unk_1EDD184C8;
        double v322 = v323;
        sub_18E075FB8((uint64_t)&v260, (uint64_t)&v250, (uint64_t)&v255, (uint64_t)&v320, (uint64_t)&v245, (uint64_t)&v225);
        *(void *)&v321[16] = 0xA00000001;
        uint64_t v320 = &unk_1EDD17DD8;
        double v322 = v323;
        if (v215 == 1)
        {
          char v171 = 0;
          *(void *)&long long v172 = 0x100000001;
          *((void *)&v172 + 1) = 0x100000001;
          *(_OWORD *)v321 = v172;
          v323[0] = v213;
          int v173 = 1;
          int v174 = 1;
        }
        else if ((int)v215 <= 0)
        {
          int v173 = 0;
          int v174 = 0;
          *(void *)v321 = 0;
          *(void *)&v321[8] = 0;
          char v171 = 1;
        }
        else
        {
          uint64_t v175 = 0;
          *(_DWORD *)v321 = 1;
          *(_DWORD *)&v321[4] = v215;
          *(_DWORD *)&v321[8] = v215;
          *(_DWORD *)&v321[12] = 1;
          do
          {
            v323[v175] = v213 + v175;
            ++v175;
          }
          while (v215 != v175);
          char v171 = 0;
          int v173 = 1;
          int v174 = v215;
        }
        uint64_t v257 = 0x10000000ALL;
        BOOL v255 = &unk_1EDD17658;
        uint64_t v258 = v259;
        *(void *)&long long v256 = __PAIR64__(v173, v174);
        DWORD2(v256) = v174 * v173;
        HIDWORD(v256) = v174;
        if (v174)
        {
          int v176 = 0;
          for (int i = 0; i != v174; ++i)
          {
            if ((v171 & 1) == 0)
            {
              int v178 = 0;
              do
              {
                v259[i + HIDWORD(v256) * v178] = v323[v176 + v178];
                ++v178;
              }
              while (v173 != v178);
            }
            v176 += v173;
          }
        }
        sub_18DFE2F24((uint64_t)v296, (uint64_t)&v270);
        sub_18E1569F8((uint64_t)&v320, (uint64_t)&v225, (uint64_t)&v255, (uint64_t)&v255);
        sub_18DFE2F24((uint64_t)&v291, (uint64_t)&v320);
        sub_18E1568D0((uint64_t)&v320, (uint64_t)&v245, (uint64_t)&v255);
        sub_18DFE2F24((uint64_t)v290, (uint64_t)&v320);
        if (!v206)
        {
          *(void *)&v321[16] = 0xA00000001;
          uint64_t v320 = &unk_1EDD17DD8;
          double v322 = v323;
          unsigned int v179 = v204;
          if (v204 == 1)
          {
            char v180 = 0;
            *(void *)&long long v181 = 0x100000001;
            *((void *)&v181 + 1) = 0x100000001;
            *(_OWORD *)v321 = v181;
            v323[0] = 0;
            int v182 = 1;
          }
          else if ((int)v204 <= 0)
          {
            int v182 = 0;
            unsigned int v179 = 0;
            *(void *)v321 = 0;
            *(void *)&v321[8] = 0;
            char v180 = 1;
          }
          else
          {
            uint64_t v183 = 0;
            *(_DWORD *)v321 = 1;
            *(_DWORD *)&v321[4] = v204;
            *(_DWORD *)&v321[8] = v204;
            *(_DWORD *)&v321[12] = 1;
            do
            {
              v323[v183] = v183;
              ++v183;
            }
            while (v204 != v183);
            char v180 = 0;
            int v182 = 1;
          }
          uint64_t v242 = 0x10000000ALL;
          uint64_t v240 = &unk_1EDD17658;
          BOOL v243 = v244;
          *(void *)&long long v241 = __PAIR64__(v182, v179);
          DWORD2(v241) = v179 * v182;
          HIDWORD(v241) = v179;
          if (v179)
          {
            int v184 = 0;
            for (int j = 0; j != v179; ++j)
            {
              if ((v180 & 1) == 0)
              {
                int v186 = 0;
                do
                {
                  v244[j + HIDWORD(v241) * v186] = v323[v184 + v186];
                  ++v186;
                }
                while (v182 != v186);
              }
              v184 += v182;
            }
          }
          sub_18E1569F8((uint64_t)&v320, (uint64_t)&v225, (uint64_t)&v240, (uint64_t)&v255);
          sub_18DFE2F24(v199, (uint64_t)&v320);
          sub_18E1568D0((uint64_t)&v320, (uint64_t)&v245, (uint64_t)&v240);
          sub_18DFE2F24(v198, (uint64_t)&v320);
          sub_18E1569F8((uint64_t)&v320, (uint64_t)&v225, (uint64_t)&v240, (uint64_t)&v240);
          sub_18DFE2F24(v197, (uint64_t)&v320);
        }
        uint64_t v84 = v207 + 1;
        int v83 = v215;
      }
      while (v207 + 1 != v202);
    }
    sub_18DFE2F24(v195 + 128, (uint64_t)&v291);
    sub_18DFE2F24(v195 + 968, (uint64_t)v290);
    uint64_t result = 0;
    *(_DWORD *)(v195 + 2180) = 0;
  }
  return result;
}