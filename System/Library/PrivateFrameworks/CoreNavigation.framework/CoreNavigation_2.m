uint64_t CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t vars8;

  v5 = this;
  v6 = *(_DWORD *)(this + 316);
  if (v6)
  {
    v7 = *(void *)(this + 8);
    if (!v7)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)this);
      v7 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_ + 8);
    }
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v7, a2, a4);
    v6 = *(_DWORD *)(v5 + 316);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_40;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  v8 = *(void *)(v5 + 16);
  if (!v8)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)this);
    v8 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_ + 16);
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v8, a2, a4);
  v6 = *(_DWORD *)(v5 + 316);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_43;
  }
LABEL_40:
  v9 = *(void *)(v5 + 24);
  if (!v9)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)this);
    v9 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_ + 24);
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v9, a2, a4);
  v6 = *(_DWORD *)(v5 + 316);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_46;
  }
LABEL_43:
  v10 = *(void *)(v5 + 32);
  if (!v10)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)this);
    v10 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_ + 32);
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v10, a2, a4);
  v6 = *(_DWORD *)(v5 + 316);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_49;
  }
LABEL_46:
  v11 = *(void *)(v5 + 40);
  if (!v11)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)this);
    v11 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_ + 40);
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, v11, a2, a4);
  v6 = *(_DWORD *)(v5 + 316);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_52;
  }
LABEL_49:
  v12 = *(void *)(v5 + 48);
  if (!v12)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)this);
    v12 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_ + 48);
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, v12, a2, a4);
  v6 = *(_DWORD *)(v5 + 316);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_55;
  }
LABEL_52:
  v13 = *(void *)(v5 + 56);
  if (!v13)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)this);
    v13 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_ + 56);
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, v13, a2, a4);
  v6 = *(_DWORD *)(v5 + 316);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_58;
  }
LABEL_55:
  v14 = *(void *)(v5 + 64);
  if (!v14)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)this);
    v14 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_ + 64);
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, v14, a2, a4);
  v6 = *(_DWORD *)(v5 + 316);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_61;
  }
LABEL_58:
  v15 = *(void *)(v5 + 72);
  if (!v15)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)this);
    v15 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_ + 72);
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9, v15, a2, a4);
  v6 = *(_DWORD *)(v5 + 316);
  if ((v6 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_64;
  }
LABEL_61:
  v16 = *(void *)(v5 + 80);
  if (!v16)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)this);
    v16 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_ + 80);
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA, v16, a2, a4);
  v6 = *(_DWORD *)(v5 + 316);
  if ((v6 & 0x400) == 0)
  {
LABEL_12:
    if ((v6 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_67;
  }
LABEL_64:
  v17 = *(void *)(v5 + 88);
  if (!v17)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)this);
    v17 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_ + 88);
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB, v17, a2, a4);
  v6 = *(_DWORD *)(v5 + 316);
  if ((v6 & 0x800) == 0)
  {
LABEL_13:
    if ((v6 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_70;
  }
LABEL_67:
  v18 = *(void *)(v5 + 96);
  if (!v18)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)this);
    v18 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_ + 96);
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xC, v18, a2, a4);
  v6 = *(_DWORD *)(v5 + 316);
  if ((v6 & 0x1000) == 0)
  {
LABEL_14:
    if ((v6 & 0x2000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_73;
  }
LABEL_70:
  v19 = *(void *)(v5 + 104);
  if (!v19)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)this);
    v19 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_ + 104);
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xD, v19, a2, a4);
  v6 = *(_DWORD *)(v5 + 316);
  if ((v6 & 0x2000) == 0)
  {
LABEL_15:
    if ((v6 & 0x4000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_76;
  }
LABEL_73:
  v20 = *(void *)(v5 + 112);
  if (!v20)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)this);
    v20 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_ + 112);
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xE, v20, a2, a4);
  v6 = *(_DWORD *)(v5 + 316);
  if ((v6 & 0x4000) == 0)
  {
LABEL_16:
    if ((v6 & 0x8000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_79;
  }
LABEL_76:
  v21 = *(void *)(v5 + 120);
  if (!v21)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)this);
    v21 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_ + 120);
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xF, v21, a2, a4);
  v6 = *(_DWORD *)(v5 + 316);
  if ((v6 & 0x8000) == 0)
  {
LABEL_17:
    if ((v6 & 0x10000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_82;
  }
LABEL_79:
  v22 = *(void *)(v5 + 128);
  if (!v22)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)this);
    v22 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_ + 128);
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x10, v22, a2, a4);
  v6 = *(_DWORD *)(v5 + 316);
  if ((v6 & 0x10000) == 0)
  {
LABEL_18:
    if ((v6 & 0x20000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_85;
  }
LABEL_82:
  v23 = *(void *)(v5 + 136);
  if (!v23)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)this);
    v23 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_ + 136);
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x13, v23, a2, a4);
  v6 = *(_DWORD *)(v5 + 316);
  if ((v6 & 0x20000) == 0)
  {
LABEL_19:
    if ((v6 & 0x40000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_88;
  }
LABEL_85:
  v24 = *(void *)(v5 + 144);
  if (!v24)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)this);
    v24 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_ + 144);
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x15, v24, a2, a4);
  v6 = *(_DWORD *)(v5 + 316);
  if ((v6 & 0x40000) == 0)
  {
LABEL_20:
    if ((v6 & 0x80000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_91;
  }
LABEL_88:
  v25 = *(void *)(v5 + 152);
  if (!v25)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)this);
    v25 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_ + 152);
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x16, v25, a2, a4);
  v6 = *(_DWORD *)(v5 + 316);
  if ((v6 & 0x80000) == 0)
  {
LABEL_21:
    if ((v6 & 0x100000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_94;
  }
LABEL_91:
  v26 = *(void *)(v5 + 160);
  if (!v26)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)this);
    v26 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_ + 160);
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x17, v26, a2, a4);
  v6 = *(_DWORD *)(v5 + 316);
  if ((v6 & 0x100000) == 0)
  {
LABEL_22:
    if ((v6 & 0x200000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_97;
  }
LABEL_94:
  v27 = *(void *)(v5 + 168);
  if (!v27)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)this);
    v27 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_ + 168);
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x18, v27, a2, a4);
  v6 = *(_DWORD *)(v5 + 316);
  if ((v6 & 0x200000) == 0)
  {
LABEL_23:
    if ((v6 & 0x400000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_100;
  }
LABEL_97:
  v28 = *(void *)(v5 + 176);
  if (!v28)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)this);
    v28 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_ + 176);
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x19, v28, a2, a4);
  v6 = *(_DWORD *)(v5 + 316);
  if ((v6 & 0x400000) == 0)
  {
LABEL_24:
    if ((v6 & 0x800000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_103;
  }
LABEL_100:
  v29 = *(void *)(v5 + 184);
  if (!v29)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)this);
    v29 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_ + 184);
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x1A, v29, a2, a4);
  v6 = *(_DWORD *)(v5 + 316);
  if ((v6 & 0x800000) == 0)
  {
LABEL_25:
    if ((v6 & 0x1000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_106;
  }
LABEL_103:
  v30 = *(void *)(v5 + 192);
  if (!v30)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)this);
    v30 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_ + 192);
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x1B, v30, a2, a4);
  v6 = *(_DWORD *)(v5 + 316);
  if ((v6 & 0x1000000) == 0)
  {
LABEL_26:
    if ((v6 & 0x2000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_109;
  }
LABEL_106:
  v31 = *(void *)(v5 + 200);
  if (!v31)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)this);
    v31 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_ + 200);
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x1C, v31, a2, a4);
  v6 = *(_DWORD *)(v5 + 316);
  if ((v6 & 0x2000000) == 0)
  {
LABEL_27:
    if ((v6 & 0x4000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_112;
  }
LABEL_109:
  v32 = *(void *)(v5 + 208);
  if (!v32)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)this);
    v32 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_ + 208);
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x1D, v32, a2, a4);
  v6 = *(_DWORD *)(v5 + 316);
  if ((v6 & 0x4000000) == 0)
  {
LABEL_28:
    if ((v6 & 0x8000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_115;
  }
LABEL_112:
  v33 = *(void *)(v5 + 216);
  if (!v33)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)this);
    v33 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_ + 216);
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x1E, v33, a2, a4);
  v6 = *(_DWORD *)(v5 + 316);
  if ((v6 & 0x8000000) == 0)
  {
LABEL_29:
    if ((v6 & 0x10000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_118;
  }
LABEL_115:
  v34 = *(void *)(v5 + 224);
  if (!v34)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)this);
    v34 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_ + 224);
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x1F, v34, a2, a4);
  v6 = *(_DWORD *)(v5 + 316);
  if ((v6 & 0x10000000) == 0)
  {
LABEL_30:
    if ((v6 & 0x20000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_121;
  }
LABEL_118:
  v35 = *(void *)(v5 + 232);
  if (!v35)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)this);
    v35 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_ + 232);
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x20, v35, a2, a4);
  v6 = *(_DWORD *)(v5 + 316);
  if ((v6 & 0x20000000) == 0)
  {
LABEL_31:
    if ((v6 & 0x40000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_124;
  }
LABEL_121:
  v36 = *(void *)(v5 + 240);
  if (!v36)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)this);
    v36 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_ + 240);
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x21, v36, a2, a4);
  v6 = *(_DWORD *)(v5 + 316);
  if ((v6 & 0x40000000) == 0)
  {
LABEL_32:
    if ((v6 & 0x80000000) == 0) {
      goto LABEL_130;
    }
    goto LABEL_127;
  }
LABEL_124:
  v37 = *(void *)(v5 + 248);
  if (!v37)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)this);
    v37 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_ + 248);
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x22, v37, a2, a4);
  if ((*(_DWORD *)(v5 + 316) & 0x80000000) != 0)
  {
LABEL_127:
    v38 = *(void *)(v5 + 256);
    if (!v38)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)this);
      v38 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_ + 256);
    }
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x23, v38, a2, a4);
  }
LABEL_130:
  v39 = *(_DWORD *)(v5 + 320);
  if (v39)
  {
    v40 = *(void *)(v5 + 264);
    if (!v40)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)this);
      v40 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_ + 264);
    }
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x3E8, v40, a2, a4);
    v39 = *(_DWORD *)(v5 + 320);
    if ((v39 & 2) == 0)
    {
LABEL_132:
      if ((v39 & 4) == 0) {
        goto LABEL_133;
      }
      goto LABEL_143;
    }
  }
  else if ((v39 & 2) == 0)
  {
    goto LABEL_132;
  }
  v41 = *(void *)(v5 + 272);
  if (!v41)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)this);
    v41 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_ + 272);
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x3EE, v41, a2, a4);
  v39 = *(_DWORD *)(v5 + 320);
  if ((v39 & 4) == 0)
  {
LABEL_133:
    if ((v39 & 8) == 0) {
      goto LABEL_134;
    }
    goto LABEL_146;
  }
LABEL_143:
  v42 = *(void *)(v5 + 280);
  if (!v42)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)this);
    v42 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_ + 280);
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x3EF, v42, a2, a4);
  v39 = *(_DWORD *)(v5 + 320);
  if ((v39 & 8) == 0)
  {
LABEL_134:
    if ((v39 & 0x10) == 0) {
      goto LABEL_135;
    }
    goto LABEL_149;
  }
LABEL_146:
  v43 = *(void *)(v5 + 288);
  if (!v43)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)this);
    v43 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_ + 288);
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x3F2, v43, a2, a4);
  v39 = *(_DWORD *)(v5 + 320);
  if ((v39 & 0x10) == 0)
  {
LABEL_135:
    if ((v39 & 0x20) == 0) {
      return this;
    }
    goto LABEL_152;
  }
LABEL_149:
  v44 = *(void *)(v5 + 296);
  if (!v44)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)this);
    v44 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_ + 296);
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x3F6, v44, a2, a4);
  if ((*(_DWORD *)(v5 + 320) & 0x20) != 0)
  {
LABEL_152:
    v45 = *(void *)(v5 + 304);
    if (!v45)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)this);
      v45 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_ + 304);
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x3F8, v45, a2, a4);
  }
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::ByteSize(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture *this)
{
  unsigned int v2 = *((_DWORD *)this + 79);
  if (!(_BYTE)v2)
  {
    uint64_t v3 = 0;
    goto LABEL_61;
  }
  if ((v2 & 1) == 0)
  {
    uint64_t v3 = 0;
    if ((v2 & 2) == 0) {
      goto LABEL_18;
    }
    goto LABEL_12;
  }
  v4 = (CoreNavigation::CLP::LogEntry::PrivateData::Accel *)*((void *)this + 1);
  if (!v4)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto(0);
    v4 = *(CoreNavigation::CLP::LogEntry::PrivateData::Accel **)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_
                                                               + 8);
  }
  v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CoreNavigation::CLP::LogEntry::PrivateData::Accel::ByteSize(v4);
  int v6 = (int)v5;
  if (v5 >= 0x80) {
    int v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5);
  }
  else {
    int v7 = 1;
  }
  uint64_t v3 = (v6 + v7 + 1);
  unsigned int v2 = *((_DWORD *)this + 79);
  if ((v2 & 2) != 0)
  {
LABEL_12:
    v8 = (CoreNavigation::CLP::LogEntry::PrivateData::Gyro *)*((void *)this + 2);
    if (!v8)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto(0);
      v8 = *(CoreNavigation::CLP::LogEntry::PrivateData::Gyro **)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_
                                                                + 16);
    }
    v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CoreNavigation::CLP::LogEntry::PrivateData::Gyro::ByteSize(v8);
    int v10 = (int)v9;
    if (v9 >= 0x80) {
      int v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9);
    }
    else {
      int v11 = 1;
    }
    uint64_t v3 = (v3 + v10 + v11 + 1);
    unsigned int v2 = *((_DWORD *)this + 79);
  }
LABEL_18:
  if ((v2 & 4) != 0)
  {
    v12 = (CoreNavigation::CLP::LogEntry::PrivateData::Baro *)*((void *)this + 3);
    if (!v12)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto(0);
      v12 = *(CoreNavigation::CLP::LogEntry::PrivateData::Baro **)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_
                                                                 + 24);
    }
    v13 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CoreNavigation::CLP::LogEntry::PrivateData::Baro::ByteSize(v12);
    int v14 = (int)v13;
    if (v13 >= 0x80) {
      int v15 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v13);
    }
    else {
      int v15 = 1;
    }
    uint64_t v3 = (v3 + v14 + v15 + 1);
    unsigned int v2 = *((_DWORD *)this + 79);
    if ((v2 & 8) == 0)
    {
LABEL_20:
      if ((v2 & 0x10) == 0) {
        goto LABEL_21;
      }
      goto LABEL_37;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_20;
  }
  uint64_t v16 = *((void *)this + 4);
  if (!v16)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto(0);
    uint64_t v16 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_ + 32);
  }
  v17 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CoreNavigation::CLP::LogEntry::PrivateData::Location::ByteSize(v16);
  int v18 = (int)v17;
  if (v17 >= 0x80) {
    int v19 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v17);
  }
  else {
    int v19 = 1;
  }
  uint64_t v3 = (v3 + v18 + v19 + 1);
  unsigned int v2 = *((_DWORD *)this + 79);
  if ((v2 & 0x10) == 0)
  {
LABEL_21:
    if ((v2 & 0x20) == 0) {
      goto LABEL_22;
    }
    goto LABEL_43;
  }
LABEL_37:
  v20 = (CoreNavigation::CLP::LogEntry::PrivateData::MotionState *)*((void *)this + 5);
  if (!v20)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto(0);
    v20 = *(CoreNavigation::CLP::LogEntry::PrivateData::MotionState **)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_
                                                                      + 40);
  }
  v21 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CoreNavigation::CLP::LogEntry::PrivateData::MotionState::ByteSize(v20);
  int v22 = (int)v21;
  if (v21 >= 0x80) {
    int v23 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v21);
  }
  else {
    int v23 = 1;
  }
  uint64_t v3 = (v3 + v22 + v23 + 1);
  unsigned int v2 = *((_DWORD *)this + 79);
  if ((v2 & 0x20) == 0)
  {
LABEL_22:
    if ((v2 & 0x40) == 0) {
      goto LABEL_23;
    }
    goto LABEL_49;
  }
LABEL_43:
  v24 = (CoreNavigation::CLP::LogEntry::PrivateData::MotionStateObserver *)*((void *)this + 6);
  if (!v24)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto(0);
    v24 = *(CoreNavigation::CLP::LogEntry::PrivateData::MotionStateObserver **)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_
                                                                              + 48);
  }
  v25 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CoreNavigation::CLP::LogEntry::PrivateData::MotionStateObserver::ByteSize(v24);
  int v26 = (int)v25;
  if (v25 >= 0x80) {
    int v27 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v25);
  }
  else {
    int v27 = 1;
  }
  uint64_t v3 = (v3 + v26 + v27 + 1);
  unsigned int v2 = *((_DWORD *)this + 79);
  if ((v2 & 0x40) == 0)
  {
LABEL_23:
    if ((v2 & 0x80) == 0) {
      goto LABEL_61;
    }
    goto LABEL_55;
  }
LABEL_49:
  v28 = (CoreNavigation::CLP::LogEntry::PrivateData::Natalimetry *)*((void *)this + 7);
  if (!v28)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto(0);
    v28 = *(CoreNavigation::CLP::LogEntry::PrivateData::Natalimetry **)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_
                                                                      + 56);
  }
  v29 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CoreNavigation::CLP::LogEntry::PrivateData::Natalimetry::ByteSize(v28);
  int v30 = (int)v29;
  if (v29 >= 0x80) {
    int v31 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v29);
  }
  else {
    int v31 = 1;
  }
  uint64_t v3 = (v3 + v30 + v31 + 1);
  unsigned int v2 = *((_DWORD *)this + 79);
  if ((v2 & 0x80) != 0)
  {
LABEL_55:
    v32 = (CoreNavigation::CLP::LogEntry::PrivateData::Timer *)*((void *)this + 8);
    if (!v32)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto(0);
      v32 = *(CoreNavigation::CLP::LogEntry::PrivateData::Timer **)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_
                                                                  + 64);
    }
    v33 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CoreNavigation::CLP::LogEntry::PrivateData::Timer::ByteSize(v32);
    int v34 = (int)v33;
    if (v33 >= 0x80) {
      int v35 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v33);
    }
    else {
      int v35 = 1;
    }
    uint64_t v3 = (v3 + v34 + v35 + 1);
    unsigned int v2 = *((_DWORD *)this + 79);
  }
LABEL_61:
  if ((v2 & 0xFF00) == 0) {
    goto LABEL_119;
  }
  if ((v2 & 0x100) != 0)
  {
    v36 = (CoreNavigation::CLP::LogEntry::PrivateData::DigitalElevationModel *)*((void *)this + 9);
    if (!v36)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto(0);
      v36 = *(CoreNavigation::CLP::LogEntry::PrivateData::DigitalElevationModel **)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_
                                                                                  + 72);
    }
    v37 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CoreNavigation::CLP::LogEntry::PrivateData::DigitalElevationModel::ByteSize(v36);
    int v38 = (int)v37;
    if (v37 >= 0x80) {
      int v39 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v37);
    }
    else {
      int v39 = 1;
    }
    uint64_t v3 = (v3 + v38 + v39 + 1);
    unsigned int v2 = *((_DWORD *)this + 79);
    if ((v2 & 0x200) == 0)
    {
LABEL_64:
      if ((v2 & 0x400) == 0) {
        goto LABEL_65;
      }
      goto LABEL_83;
    }
  }
  else if ((v2 & 0x200) == 0)
  {
    goto LABEL_64;
  }
  v40 = (CoreNavigation::CLP::LogEntry::PrivateData::MapVector *)*((void *)this + 10);
  if (!v40)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto(0);
    v40 = *(CoreNavigation::CLP::LogEntry::PrivateData::MapVector **)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_
                                                                    + 80);
  }
  v41 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CoreNavigation::CLP::LogEntry::PrivateData::MapVector::ByteSize(v40);
  int v42 = (int)v41;
  if (v41 >= 0x80) {
    int v43 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v41);
  }
  else {
    int v43 = 1;
  }
  uint64_t v3 = (v3 + v42 + v43 + 1);
  unsigned int v2 = *((_DWORD *)this + 79);
  if ((v2 & 0x400) == 0)
  {
LABEL_65:
    if ((v2 & 0x800) == 0) {
      goto LABEL_66;
    }
    goto LABEL_89;
  }
LABEL_83:
  v44 = (CoreNavigation::CLP::LogEntry::PrivateData::DeviceStatus *)*((void *)this + 11);
  if (!v44)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto(0);
    v44 = *(CoreNavigation::CLP::LogEntry::PrivateData::DeviceStatus **)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_
                                                                       + 88);
  }
  v45 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CoreNavigation::CLP::LogEntry::PrivateData::DeviceStatus::ByteSize(v44);
  int v46 = (int)v45;
  if (v45 >= 0x80) {
    int v47 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v45);
  }
  else {
    int v47 = 1;
  }
  uint64_t v3 = (v3 + v46 + v47 + 1);
  unsigned int v2 = *((_DWORD *)this + 79);
  if ((v2 & 0x800) == 0)
  {
LABEL_66:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_67;
    }
    goto LABEL_95;
  }
LABEL_89:
  v48 = (CoreNavigation::CLP::LogEntry::PrivateData::SignalEnvironment *)*((void *)this + 12);
  if (!v48)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto(0);
    v48 = *(CoreNavigation::CLP::LogEntry::PrivateData::SignalEnvironment **)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_
                                                                            + 96);
  }
  v49 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CoreNavigation::CLP::LogEntry::PrivateData::SignalEnvironment::ByteSize(v48);
  int v50 = (int)v49;
  if (v49 >= 0x80) {
    int v51 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v49);
  }
  else {
    int v51 = 1;
  }
  uint64_t v3 = (v3 + v50 + v51 + 1);
  unsigned int v2 = *((_DWORD *)this + 79);
  if ((v2 & 0x1000) == 0)
  {
LABEL_67:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_68;
    }
    goto LABEL_101;
  }
LABEL_95:
  v52 = (CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents *)*((void *)this + 13);
  if (!v52)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto(0);
    v52 = *(CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents **)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_
                                                                                            + 104);
  }
  v53 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents::ByteSize(v52);
  int v54 = (int)v53;
  if (v53 >= 0x80) {
    int v55 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v53);
  }
  else {
    int v55 = 1;
  }
  uint64_t v3 = (v3 + v54 + v55 + 1);
  unsigned int v2 = *((_DWORD *)this + 79);
  if ((v2 & 0x2000) == 0)
  {
LABEL_68:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_69;
    }
    goto LABEL_107;
  }
LABEL_101:
  v56 = (CoreNavigation::CLP::LogEntry::PrivateData::Magnetometer *)*((void *)this + 14);
  if (!v56)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto(0);
    v56 = *(CoreNavigation::CLP::LogEntry::PrivateData::Magnetometer **)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_
                                                                       + 112);
  }
  v57 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CoreNavigation::CLP::LogEntry::PrivateData::Magnetometer::ByteSize(v56);
  int v58 = (int)v57;
  if (v57 >= 0x80) {
    int v59 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v57);
  }
  else {
    int v59 = 1;
  }
  uint64_t v3 = (v3 + v58 + v59 + 1);
  unsigned int v2 = *((_DWORD *)this + 79);
  if ((v2 & 0x4000) == 0)
  {
LABEL_69:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_119;
    }
    goto LABEL_113;
  }
LABEL_107:
  v60 = (CoreNavigation::CLP::LogEntry::PrivateData::Reset *)*((void *)this + 15);
  if (!v60)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto(0);
    v60 = *(CoreNavigation::CLP::LogEntry::PrivateData::Reset **)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_
                                                                + 120);
  }
  v61 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CoreNavigation::CLP::LogEntry::PrivateData::Reset::ByteSize(v60);
  int v62 = (int)v61;
  if (v61 >= 0x80) {
    int v63 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v61);
  }
  else {
    int v63 = 1;
  }
  uint64_t v3 = (v3 + v62 + v63 + 1);
  unsigned int v2 = *((_DWORD *)this + 79);
  if ((v2 & 0x8000) != 0)
  {
LABEL_113:
    v64 = (CoreNavigation::CLP::LogEntry::PrivateData::StepCount *)*((void *)this + 16);
    if (!v64)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto(0);
      v64 = *(CoreNavigation::CLP::LogEntry::PrivateData::StepCount **)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_
                                                                      + 128);
    }
    v65 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CoreNavigation::CLP::LogEntry::PrivateData::StepCount::ByteSize(v64);
    int v66 = (int)v65;
    if (v65 >= 0x80) {
      int v67 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v65);
    }
    else {
      int v67 = 1;
    }
    uint64_t v3 = (v3 + v66 + v67 + 2);
    unsigned int v2 = *((_DWORD *)this + 79);
  }
LABEL_119:
  if ((v2 & 0xFF0000) == 0) {
    goto LABEL_177;
  }
  if ((v2 & 0x10000) != 0)
  {
    uint64_t v68 = *((void *)this + 17);
    if (!v68)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto(0);
      uint64_t v68 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_ + 136);
    }
    v69 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CoreNavigation::CLP::LogEntry::PrivateData::DeviceMotionSample::ByteSize(v68);
    int v70 = (int)v69;
    if (v69 >= 0x80) {
      int v71 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v69);
    }
    else {
      int v71 = 1;
    }
    uint64_t v3 = (v3 + v70 + v71 + 2);
    unsigned int v2 = *((_DWORD *)this + 79);
    if ((v2 & 0x20000) == 0)
    {
LABEL_122:
      if ((v2 & 0x40000) == 0) {
        goto LABEL_123;
      }
      goto LABEL_141;
    }
  }
  else if ((v2 & 0x20000) == 0)
  {
    goto LABEL_122;
  }
  v72 = (CoreNavigation::CLP::LogEntry::PrivateData::TunnelBridgeNotification *)*((void *)this + 18);
  if (!v72)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto(0);
    v72 = *(CoreNavigation::CLP::LogEntry::PrivateData::TunnelBridgeNotification **)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_
                                                                                   + 144);
  }
  v73 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CoreNavigation::CLP::LogEntry::PrivateData::TunnelBridgeNotification::ByteSize(v72);
  int v74 = (int)v73;
  if (v73 >= 0x80) {
    int v75 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v73);
  }
  else {
    int v75 = 1;
  }
  uint64_t v3 = (v3 + v74 + v75 + 2);
  unsigned int v2 = *((_DWORD *)this + 79);
  if ((v2 & 0x40000) == 0)
  {
LABEL_123:
    if ((v2 & 0x80000) == 0) {
      goto LABEL_124;
    }
    goto LABEL_147;
  }
LABEL_141:
  v76 = (CoreNavigation::CLP::LogEntry::PrivateData::WifiNotification *)*((void *)this + 19);
  if (!v76)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto(0);
    v76 = *(CoreNavigation::CLP::LogEntry::PrivateData::WifiNotification **)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_
                                                                           + 152);
  }
  v77 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CoreNavigation::CLP::LogEntry::PrivateData::WifiNotification::ByteSize(v76);
  int v78 = (int)v77;
  if (v77 >= 0x80) {
    int v79 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v77);
  }
  else {
    int v79 = 1;
  }
  uint64_t v3 = (v3 + v78 + v79 + 2);
  unsigned int v2 = *((_DWORD *)this + 79);
  if ((v2 & 0x80000) == 0)
  {
LABEL_124:
    if ((v2 & 0x100000) == 0) {
      goto LABEL_125;
    }
    goto LABEL_153;
  }
LABEL_147:
  v80 = (CoreNavigation::CLP::LogEntry::PrivateData::TunnelEndPoint *)*((void *)this + 20);
  if (!v80)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto(0);
    v80 = *(CoreNavigation::CLP::LogEntry::PrivateData::TunnelEndPoint **)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_
                                                                         + 160);
  }
  v81 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CoreNavigation::CLP::LogEntry::PrivateData::TunnelEndPoint::ByteSize(v80);
  int v82 = (int)v81;
  if (v81 >= 0x80) {
    int v83 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v81);
  }
  else {
    int v83 = 1;
  }
  uint64_t v3 = (v3 + v82 + v83 + 2);
  unsigned int v2 = *((_DWORD *)this + 79);
  if ((v2 & 0x100000) == 0)
  {
LABEL_125:
    if ((v2 & 0x200000) == 0) {
      goto LABEL_126;
    }
    goto LABEL_159;
  }
LABEL_153:
  v84 = (CoreNavigation::CLP::LogEntry::PrivateData::AccessoryVehicleSpeedNotification *)*((void *)this + 21);
  if (!v84)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto(0);
    v84 = *(CoreNavigation::CLP::LogEntry::PrivateData::AccessoryVehicleSpeedNotification **)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_
                                                                                            + 168);
  }
  v85 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CoreNavigation::CLP::LogEntry::PrivateData::AccessoryVehicleSpeedNotification::ByteSize(v84);
  int v86 = (int)v85;
  if (v85 >= 0x80) {
    int v87 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v85);
  }
  else {
    int v87 = 1;
  }
  uint64_t v3 = (v3 + v86 + v87 + 2);
  unsigned int v2 = *((_DWORD *)this + 79);
  if ((v2 & 0x200000) == 0)
  {
LABEL_126:
    if ((v2 & 0x400000) == 0) {
      goto LABEL_127;
    }
    goto LABEL_165;
  }
LABEL_159:
  v88 = (CoreNavigation::CLP::LogEntry::PrivateData::MapMatchingRouteHint *)*((void *)this + 22);
  if (!v88)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto(0);
    v88 = *(CoreNavigation::CLP::LogEntry::PrivateData::MapMatchingRouteHint **)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_
                                                                               + 176);
  }
  v89 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CoreNavigation::CLP::LogEntry::PrivateData::MapMatchingRouteHint::ByteSize(v88);
  int v90 = (int)v89;
  if (v89 >= 0x80) {
    int v91 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v89);
  }
  else {
    int v91 = 1;
  }
  uint64_t v3 = (v3 + v90 + v91 + 2);
  unsigned int v2 = *((_DWORD *)this + 79);
  if ((v2 & 0x400000) == 0)
  {
LABEL_127:
    if ((v2 & 0x800000) == 0) {
      goto LABEL_177;
    }
    goto LABEL_171;
  }
LABEL_165:
  v92 = (CoreNavigation::CLP::LogEntry::PrivateData::Compass *)*((void *)this + 23);
  if (!v92)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto(0);
    v92 = *(CoreNavigation::CLP::LogEntry::PrivateData::Compass **)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_
                                                                  + 184);
  }
  v93 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CoreNavigation::CLP::LogEntry::PrivateData::Compass::ByteSize(v92);
  int v94 = (int)v93;
  if (v93 >= 0x80) {
    int v95 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v93);
  }
  else {
    int v95 = 1;
  }
  uint64_t v3 = (v3 + v94 + v95 + 2);
  unsigned int v2 = *((_DWORD *)this + 79);
  if ((v2 & 0x800000) != 0)
  {
LABEL_171:
    v96 = (CoreNavigation::CLP::LogEntry::PrivateData::DeviceMotion *)*((void *)this + 24);
    if (!v96)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto(0);
      v96 = *(CoreNavigation::CLP::LogEntry::PrivateData::DeviceMotion **)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_
                                                                         + 192);
    }
    v97 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CoreNavigation::CLP::LogEntry::PrivateData::DeviceMotion::ByteSize(v96);
    int v98 = (int)v97;
    if (v97 >= 0x80) {
      int v99 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v97);
    }
    else {
      int v99 = 1;
    }
    uint64_t v3 = (v3 + v98 + v99 + 2);
    unsigned int v2 = *((_DWORD *)this + 79);
  }
LABEL_177:
  if (!HIBYTE(v2)) {
    goto LABEL_235;
  }
  if ((v2 & 0x1000000) != 0)
  {
    v100 = (CoreNavigation::CLP::LogEntry::PrivateData::GnssAvailabilityPrediction *)*((void *)this + 25);
    if (!v100)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto(0);
      v100 = *(CoreNavigation::CLP::LogEntry::PrivateData::GnssAvailabilityPrediction **)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_
                                                                                        + 200);
    }
    v101 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CoreNavigation::CLP::LogEntry::PrivateData::GnssAvailabilityPrediction::ByteSize(v100);
    int v102 = (int)v101;
    if (v101 >= 0x80) {
      int v103 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v101);
    }
    else {
      int v103 = 1;
    }
    uint64_t v3 = (v3 + v102 + v103 + 2);
    unsigned int v2 = *((_DWORD *)this + 79);
    if ((v2 & 0x2000000) == 0)
    {
LABEL_180:
      if ((v2 & 0x4000000) == 0) {
        goto LABEL_181;
      }
      goto LABEL_199;
    }
  }
  else if ((v2 & 0x2000000) == 0)
  {
    goto LABEL_180;
  }
  v104 = (CoreNavigation::CLP::LogEntry::PrivateData::GEOMapBuildingData *)*((void *)this + 26);
  if (!v104)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto(0);
    v104 = *(CoreNavigation::CLP::LogEntry::PrivateData::GEOMapBuildingData **)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_
                                                                              + 208);
  }
  v105 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CoreNavigation::CLP::LogEntry::PrivateData::GEOMapBuildingData::ByteSize(v104);
  int v106 = (int)v105;
  if (v105 >= 0x80) {
    int v107 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v105);
  }
  else {
    int v107 = 1;
  }
  uint64_t v3 = (v3 + v106 + v107 + 2);
  unsigned int v2 = *((_DWORD *)this + 79);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_181:
    if ((v2 & 0x8000000) == 0) {
      goto LABEL_182;
    }
    goto LABEL_205;
  }
LABEL_199:
  v108 = (CoreNavigation::CLP::LogEntry::PrivateData::GEOMapTropicalSavannaData *)*((void *)this + 27);
  if (!v108)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto(0);
    v108 = *(CoreNavigation::CLP::LogEntry::PrivateData::GEOMapTropicalSavannaData **)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_
                                                                                     + 216);
  }
  v109 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CoreNavigation::CLP::LogEntry::PrivateData::GEOMapTropicalSavannaData::ByteSize(v108);
  int v110 = (int)v109;
  if (v109 >= 0x80) {
    int v111 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v109);
  }
  else {
    int v111 = 1;
  }
  uint64_t v3 = (v3 + v110 + v111 + 2);
  unsigned int v2 = *((_DWORD *)this + 79);
  if ((v2 & 0x8000000) == 0)
  {
LABEL_182:
    if ((v2 & 0x10000000) == 0) {
      goto LABEL_183;
    }
    goto LABEL_211;
  }
LABEL_205:
  v112 = (CoreNavigation::CLP::LogEntry::PrivateData::WatchState *)*((void *)this + 28);
  if (!v112)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto(0);
    v112 = *(CoreNavigation::CLP::LogEntry::PrivateData::WatchState **)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_
                                                                      + 224);
  }
  v113 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CoreNavigation::CLP::LogEntry::PrivateData::WatchState::ByteSize(v112);
  int v114 = (int)v113;
  if (v113 >= 0x80) {
    int v115 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v113);
  }
  else {
    int v115 = 1;
  }
  uint64_t v3 = (v3 + v114 + v115 + 2);
  unsigned int v2 = *((_DWORD *)this + 79);
  if ((v2 & 0x10000000) == 0)
  {
LABEL_183:
    if ((v2 & 0x20000000) == 0) {
      goto LABEL_184;
    }
    goto LABEL_217;
  }
LABEL_211:
  v116 = (CoreNavigation::CLP::LogEntry::PrivateData::MotionStateMediator *)*((void *)this + 29);
  if (!v116)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto(0);
    v116 = *(CoreNavigation::CLP::LogEntry::PrivateData::MotionStateMediator **)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_
                                                                               + 232);
  }
  v117 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CoreNavigation::CLP::LogEntry::PrivateData::MotionStateMediator::ByteSize(v116);
  int v118 = (int)v117;
  if (v117 >= 0x80) {
    int v119 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v117);
  }
  else {
    int v119 = 1;
  }
  uint64_t v3 = (v3 + v118 + v119 + 2);
  unsigned int v2 = *((_DWORD *)this + 79);
  if ((v2 & 0x20000000) == 0)
  {
LABEL_184:
    if ((v2 & 0x40000000) == 0) {
      goto LABEL_185;
    }
    goto LABEL_223;
  }
LABEL_217:
  uint64_t v120 = *((void *)this + 30);
  if (!v120)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto(0);
    uint64_t v120 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_ + 240);
  }
  v121 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CoreNavigation::CLP::LogEntry::PrivateData::RoutineVisit::ByteSize(v120);
  int v122 = (int)v121;
  if (v121 >= 0x80) {
    int v123 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v121);
  }
  else {
    int v123 = 1;
  }
  uint64_t v3 = (v3 + v122 + v123 + 2);
  unsigned int v2 = *((_DWORD *)this + 79);
  if ((v2 & 0x40000000) == 0)
  {
LABEL_185:
    if ((v2 & 0x80000000) == 0) {
      goto LABEL_235;
    }
    goto LABEL_229;
  }
LABEL_223:
  v124 = (CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::AssistanceFileContents *)*((void *)this + 31);
  if (!v124)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto(0);
    v124 = *(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::AssistanceFileContents **)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_
                                                                                              + 248);
  }
  v125 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::AssistanceFileContents::ByteSize(v124);
  int v126 = (int)v125;
  if (v125 >= 0x80) {
    int v127 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v125);
  }
  else {
    int v127 = 1;
  }
  uint64_t v3 = (v3 + v126 + v127 + 2);
  if ((*((_DWORD *)this + 79) & 0x80000000) != 0)
  {
LABEL_229:
    v128 = (CoreNavigation::CLP::LogEntry::PrivateData::OutdoorUpdate *)*((void *)this + 32);
    if (!v128)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto(0);
      v128 = *(CoreNavigation::CLP::LogEntry::PrivateData::OutdoorUpdate **)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_
                                                                           + 256);
    }
    v129 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CoreNavigation::CLP::LogEntry::PrivateData::OutdoorUpdate::ByteSize(v128);
    int v130 = (int)v129;
    if (v129 >= 0x80) {
      int v131 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v129);
    }
    else {
      int v131 = 1;
    }
    uint64_t v3 = (v3 + v130 + v131 + 2);
  }
LABEL_235:
  LOBYTE(v132) = *((unsigned char *)this + 320);
  if (!(_BYTE)v132) {
    goto LABEL_279;
  }
  if (*((unsigned char *)this + 320))
  {
    v133 = (CoreNavigation::CLP::LogEntry::InternalToolData::InternalToolDataCapture *)*((void *)this + 33);
    if (!v133)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto(0);
      v133 = *(CoreNavigation::CLP::LogEntry::InternalToolData::InternalToolDataCapture **)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_
                                                                                          + 264);
    }
    v134 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CoreNavigation::CLP::LogEntry::InternalToolData::InternalToolDataCapture::ByteSize(v133);
    int v135 = (int)v134;
    if (v134 >= 0x80) {
      int v136 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v134);
    }
    else {
      int v136 = 1;
    }
    uint64_t v3 = (v3 + v135 + v136 + 2);
    int v132 = *((_DWORD *)this + 80);
    if ((v132 & 2) == 0)
    {
LABEL_238:
      if ((v132 & 4) == 0) {
        goto LABEL_239;
      }
      goto LABEL_255;
    }
  }
  else if ((*((unsigned char *)this + 320) & 2) == 0)
  {
    goto LABEL_238;
  }
  v137 = (CoreNavigation::CLP::LogEntry::Raven::LogEntry *)*((void *)this + 34);
  if (!v137)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto(0);
    v137 = *(CoreNavigation::CLP::LogEntry::Raven::LogEntry **)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_
                                                              + 272);
  }
  v138 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CoreNavigation::CLP::LogEntry::Raven::LogEntry::ByteSize(v137);
  int v139 = (int)v138;
  if (v138 >= 0x80) {
    int v140 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v138);
  }
  else {
    int v140 = 1;
  }
  uint64_t v3 = (v3 + v139 + v140 + 2);
  int v132 = *((_DWORD *)this + 80);
  if ((v132 & 4) == 0)
  {
LABEL_239:
    if ((v132 & 8) == 0) {
      goto LABEL_240;
    }
    goto LABEL_261;
  }
LABEL_255:
  v141 = (CoreNavigation::CLP::LogEntry::Vision::LogEntry *)*((void *)this + 35);
  if (!v141)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto(0);
    v141 = *(CoreNavigation::CLP::LogEntry::Vision::LogEntry **)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_
                                                               + 280);
  }
  v142 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CoreNavigation::CLP::LogEntry::Vision::LogEntry::ByteSize(v141);
  int v143 = (int)v142;
  if (v142 >= 0x80) {
    int v144 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v142);
  }
  else {
    int v144 = 1;
  }
  uint64_t v3 = (v3 + v143 + v144 + 2);
  int v132 = *((_DWORD *)this + 80);
  if ((v132 & 8) == 0)
  {
LABEL_240:
    if ((v132 & 0x10) == 0) {
      goto LABEL_241;
    }
    goto LABEL_267;
  }
LABEL_261:
  v145 = (CoreNavigation::CLP::LogEntry::TropicalSavanna::LogEntry *)*((void *)this + 36);
  if (!v145)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto(0);
    v145 = *(CoreNavigation::CLP::LogEntry::TropicalSavanna::LogEntry **)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_
                                                                        + 288);
  }
  v146 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CoreNavigation::CLP::LogEntry::TropicalSavanna::LogEntry::ByteSize(v145);
  int v147 = (int)v146;
  if (v146 >= 0x80) {
    int v148 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v146);
  }
  else {
    int v148 = 1;
  }
  uint64_t v3 = (v3 + v147 + v148 + 2);
  int v132 = *((_DWORD *)this + 80);
  if ((v132 & 0x10) == 0)
  {
LABEL_241:
    if ((v132 & 0x20) == 0) {
      goto LABEL_279;
    }
    goto LABEL_273;
  }
LABEL_267:
  v149 = (CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LogEntry *)*((void *)this + 37);
  if (!v149)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto(0);
    v149 = *(CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LogEntry **)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_
                                                                                    + 296);
  }
  v150 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CoreNavigation::CLP::LogEntry::RayTracingTilesAvailability::LogEntry::ByteSize(v149);
  int v151 = (int)v150;
  if (v150 >= 0x80) {
    int v152 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v150);
  }
  else {
    int v152 = 1;
  }
  uint64_t v3 = (v3 + v151 + v152 + 2);
  if ((*((_DWORD *)this + 80) & 0x20) != 0)
  {
LABEL_273:
    v153 = (CoreNavigation::CLP::LogEntry::RayTracingTileData::LogEntry *)*((void *)this + 38);
    if (!v153)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto(0);
      v153 = *(CoreNavigation::CLP::LogEntry::RayTracingTileData::LogEntry **)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_
                                                                             + 304);
    }
    v154 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CoreNavigation::CLP::LogEntry::RayTracingTileData::LogEntry::ByteSize(v153);
    int v155 = (int)v154;
    if (v154 >= 0x80) {
      int v156 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v154);
    }
    else {
      int v156 = 1;
    }
    uint64_t v3 = (v3 + v155 + v156 + 2);
  }
LABEL_279:
  *((_DWORD *)this + 78) = v3;
  return v3;
}

void CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::CheckTypeAndMergeFrom(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::MergeFrom(this, lpsrc);
}

void CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::CopyFrom(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture *this, const CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture *a2)
{
  if (a2 != this)
  {
    (*(void (**)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture *))(*(void *)this + 32))(this);
    CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::MergeFrom(this, a2);
  }
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::IsInitialized(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture *this)
{
  return 1;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::Swap(uint64_t this, CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture *a2)
{
  if (a2 != (CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture *)this)
  {
    uint64_t v2 = *(void *)(this + 8);
    *(void *)(this + 8) = *((void *)a2 + 1);
    *((void *)a2 + 1) = v2;
    uint64_t v3 = *(void *)(this + 16);
    *(void *)(this + 16) = *((void *)a2 + 2);
    *((void *)a2 + 2) = v3;
    uint64_t v4 = *(void *)(this + 24);
    *(void *)(this + 24) = *((void *)a2 + 3);
    *((void *)a2 + 3) = v4;
    uint64_t v5 = *(void *)(this + 32);
    *(void *)(this + 32) = *((void *)a2 + 4);
    *((void *)a2 + 4) = v5;
    uint64_t v6 = *(void *)(this + 40);
    *(void *)(this + 40) = *((void *)a2 + 5);
    *((void *)a2 + 5) = v6;
    uint64_t v7 = *(void *)(this + 48);
    *(void *)(this + 48) = *((void *)a2 + 6);
    *((void *)a2 + 6) = v7;
    uint64_t v8 = *(void *)(this + 56);
    *(void *)(this + 56) = *((void *)a2 + 7);
    *((void *)a2 + 7) = v8;
    uint64_t v9 = *(void *)(this + 64);
    *(void *)(this + 64) = *((void *)a2 + 8);
    *((void *)a2 + 8) = v9;
    uint64_t v10 = *(void *)(this + 72);
    *(void *)(this + 72) = *((void *)a2 + 9);
    *((void *)a2 + 9) = v10;
    uint64_t v11 = *(void *)(this + 80);
    *(void *)(this + 80) = *((void *)a2 + 10);
    *((void *)a2 + 10) = v11;
    uint64_t v12 = *(void *)(this + 88);
    *(void *)(this + 88) = *((void *)a2 + 11);
    *((void *)a2 + 11) = v12;
    uint64_t v13 = *(void *)(this + 96);
    *(void *)(this + 96) = *((void *)a2 + 12);
    *((void *)a2 + 12) = v13;
    uint64_t v14 = *(void *)(this + 104);
    *(void *)(this + 104) = *((void *)a2 + 13);
    *((void *)a2 + 13) = v14;
    uint64_t v15 = *(void *)(this + 112);
    *(void *)(this + 112) = *((void *)a2 + 14);
    *((void *)a2 + 14) = v15;
    uint64_t v16 = *(void *)(this + 120);
    *(void *)(this + 120) = *((void *)a2 + 15);
    *((void *)a2 + 15) = v16;
    uint64_t v17 = *(void *)(this + 128);
    *(void *)(this + 128) = *((void *)a2 + 16);
    *((void *)a2 + 16) = v17;
    uint64_t v18 = *(void *)(this + 136);
    *(void *)(this + 136) = *((void *)a2 + 17);
    *((void *)a2 + 17) = v18;
    uint64_t v19 = *(void *)(this + 144);
    *(void *)(this + 144) = *((void *)a2 + 18);
    *((void *)a2 + 18) = v19;
    uint64_t v20 = *(void *)(this + 152);
    *(void *)(this + 152) = *((void *)a2 + 19);
    *((void *)a2 + 19) = v20;
    uint64_t v21 = *(void *)(this + 160);
    *(void *)(this + 160) = *((void *)a2 + 20);
    *((void *)a2 + 20) = v21;
    uint64_t v22 = *(void *)(this + 168);
    *(void *)(this + 168) = *((void *)a2 + 21);
    *((void *)a2 + 21) = v22;
    uint64_t v23 = *(void *)(this + 176);
    *(void *)(this + 176) = *((void *)a2 + 22);
    *((void *)a2 + 22) = v23;
    uint64_t v24 = *(void *)(this + 184);
    *(void *)(this + 184) = *((void *)a2 + 23);
    *((void *)a2 + 23) = v24;
    uint64_t v25 = *(void *)(this + 192);
    *(void *)(this + 192) = *((void *)a2 + 24);
    *((void *)a2 + 24) = v25;
    uint64_t v26 = *(void *)(this + 200);
    *(void *)(this + 200) = *((void *)a2 + 25);
    *((void *)a2 + 25) = v26;
    uint64_t v27 = *(void *)(this + 208);
    *(void *)(this + 208) = *((void *)a2 + 26);
    *((void *)a2 + 26) = v27;
    uint64_t v28 = *(void *)(this + 216);
    *(void *)(this + 216) = *((void *)a2 + 27);
    *((void *)a2 + 27) = v28;
    uint64_t v29 = *(void *)(this + 224);
    *(void *)(this + 224) = *((void *)a2 + 28);
    *((void *)a2 + 28) = v29;
    uint64_t v30 = *(void *)(this + 232);
    *(void *)(this + 232) = *((void *)a2 + 29);
    *((void *)a2 + 29) = v30;
    uint64_t v31 = *(void *)(this + 240);
    *(void *)(this + 240) = *((void *)a2 + 30);
    *((void *)a2 + 30) = v31;
    uint64_t v32 = *(void *)(this + 248);
    *(void *)(this + 248) = *((void *)a2 + 31);
    *((void *)a2 + 31) = v32;
    uint64_t v33 = *(void *)(this + 256);
    *(void *)(this + 256) = *((void *)a2 + 32);
    *((void *)a2 + 32) = v33;
    uint64_t v34 = *(void *)(this + 264);
    *(void *)(this + 264) = *((void *)a2 + 33);
    *((void *)a2 + 33) = v34;
    uint64_t v35 = *(void *)(this + 272);
    *(void *)(this + 272) = *((void *)a2 + 34);
    *((void *)a2 + 34) = v35;
    uint64_t v36 = *(void *)(this + 280);
    *(void *)(this + 280) = *((void *)a2 + 35);
    *((void *)a2 + 35) = v36;
    uint64_t v37 = *(void *)(this + 288);
    *(void *)(this + 288) = *((void *)a2 + 36);
    *((void *)a2 + 36) = v37;
    uint64_t v38 = *(void *)(this + 296);
    *(void *)(this + 296) = *((void *)a2 + 37);
    *((void *)a2 + 37) = v38;
    uint64_t v39 = *(void *)(this + 304);
    *(void *)(this + 304) = *((void *)a2 + 38);
    *((void *)a2 + 38) = v39;
    LODWORD(v39) = *(_DWORD *)(this + 316);
    *(_DWORD *)(this + 316) = *((_DWORD *)a2 + 79);
    *((_DWORD *)a2 + 79) = v39;
    LODWORD(v39) = *(_DWORD *)(this + 320);
    *(_DWORD *)(this + 320) = *((_DWORD *)a2 + 80);
    *((_DWORD *)a2 + 80) = v39;
    LODWORD(v39) = *(_DWORD *)(this + 312);
    *(_DWORD *)(this + 312) = *((_DWORD *)a2 + 78);
    *((_DWORD *)a2 + 78) = v39;
  }
  return this;
}

void *CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::GetTypeName@<X0>(void *a1@<X8>)
{
  return sub_18DEDE7B0(a1, "CoreNavigation.CLP.LogEntry.PrivateData.PrivateDataCapture");
}

uint64_t sub_18DFAFDDC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 312);
}

uint64_t CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::protobuf_ShutdownFile_CoreNavigationCLPRavenGnssAssistanceFile_2eproto(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile *this)
{
  if (CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SvId::default_instance_) {
    (*(void (**)(uint64_t))(*(void *)CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SvId::default_instance_
  }
                                    + 8))(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SvId::default_instance_);
  if (CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GpsTime::default_instance_) {
    (*(void (**)(uint64_t))(*(void *)CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GpsTime::default_instance_
  }
                                    + 8))(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GpsTime::default_instance_);
  if (CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatellitePolynomialClock::default_instance_) {
    (*(void (**)(uint64_t))(*(void *)CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatellitePolynomialClock::default_instance_
  }
                                    + 8))(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatellitePolynomialClock::default_instance_);
  if (CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatelliteGroupDelay::default_instance_) {
    (*(void (**)(uint64_t))(*(void *)CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatelliteGroupDelay::default_instance_
  }
                                    + 8))(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatelliteGroupDelay::default_instance_);
  if (CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatelliteClockData::default_instance_) {
    (*(void (**)(uint64_t))(*(void *)CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatelliteClockData::default_instance_
  }
                                    + 8))(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatelliteClockData::default_instance_);
  if (CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GnssToGpsTimeOffset::default_instance_) {
    (*(void (**)(uint64_t))(*(void *)CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GnssToGpsTimeOffset::default_instance_
  }
                                    + 8))(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GnssToGpsTimeOffset::default_instance_);
  if (CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SpaceWeatherStatus::default_instance_) {
    (*(void (**)(uint64_t))(*(void *)CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SpaceWeatherStatus::default_instance_
  }
                                    + 8))(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SpaceWeatherStatus::default_instance_);
  if (CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::IonosphereVTECModel::default_instance_) {
    (*(void (**)(uint64_t))(*(void *)CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::IonosphereVTECModel::default_instance_
  }
                                    + 8))(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::IonosphereVTECModel::default_instance_);
  if (CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::IonosphereCorrections::default_instance_) {
    (*(void (**)(uint64_t))(*(void *)CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::IonosphereCorrections::default_instance_
  }
                                    + 8))(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::IonosphereCorrections::default_instance_);
  uint64_t result = CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::AssistanceFileContents::default_instance_;
  if (CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::AssistanceFileContents::default_instance_)
  {
    uint64_t v2 = *(uint64_t (**)(void))(*(void *)CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::AssistanceFileContents::default_instance_
                             + 8);
    return v2();
  }
  return result;
}

void CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::protobuf_AddDesc_CoreNavigationCLPRavenGnssAssistanceFile_2eproto_impl(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile *this, uint64_t a2, uint64_t a3, const char *a4)
{
}

void *CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SvId::SvId(void *this)
{
  this[1] = 0;
  this[2] = 0;
  *this = &unk_1EDD10790;
  return this;
}

{
  this[1] = 0;
  this[2] = 0;
  *this = &unk_1EDD10790;
  return this;
}

void *CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GpsTime::GpsTime(void *this)
{
  this[1] = 0;
  this[2] = 0;
  *this = &unk_1EDD10808;
  return this;
}

{
  this[1] = 0;
  this[2] = 0;
  *this = &unk_1EDD10808;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatellitePolynomialClock::SatellitePolynomialClock(uint64_t this)
{
  *(void *)this = &unk_1EDD10718;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(void *)this = &unk_1EDD10718;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

void *CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatelliteGroupDelay::SatelliteGroupDelay(void *this)
{
  this[1] = 0;
  this[2] = 0;
  *this = &unk_1EDD105B0;
  return this;
}

{
  this[1] = 0;
  this[2] = 0;
  *this = &unk_1EDD105B0;
  return this;
}

double CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatelliteClockData::SatelliteClockData(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatelliteClockData *this)
{
  *(void *)this = &unk_1EDD103D0;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  *((_DWORD *)this + 18) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 36) = 0u;
  return result;
}

{
  double result;

  *(void *)this = &unk_1EDD103D0;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  *((_DWORD *)this + 18) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 36) = 0u;
  return result;
}

uint64_t CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GnssToGpsTimeOffset::GnssToGpsTimeOffset(uint64_t this)
{
  *(void *)this = &unk_1EDD104C0;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(void *)this = &unk_1EDD104C0;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

double CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SpaceWeatherStatus::SpaceWeatherStatus(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SpaceWeatherStatus *this)
{
  *(void *)this = &unk_1EDD10448;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 4) = -1;
  double result = 0.0;
  *(void *)((char *)this + 20) = 0;
  *(void *)((char *)this + 28) = 0xFFFFFFFFLL;
  *(void *)((char *)this + 36) = 0;
  *((_DWORD *)this + 11) = 0;
  *((_DWORD *)this + 12) = 0;
  return result;
}

{
  double result;

  *(void *)this = &unk_1EDD10448;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 4) = -1;
  double result = 0.0;
  *(void *)((char *)this + 20) = 0;
  *(void *)((char *)this + 28) = 0xFFFFFFFFLL;
  *(void *)((char *)this + 36) = 0;
  *((_DWORD *)this + 11) = 0;
  *((_DWORD *)this + 12) = 0;
  return result;
}

double CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::IonosphereVTECModel::IonosphereVTECModel(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::IonosphereVTECModel *this)
{
  *(void *)this = &unk_1EDD10538;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 52) = 0u;
  return result;
}

{
  double result;

  *(void *)this = &unk_1EDD10538;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 52) = 0u;
  return result;
}

uint64_t CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::IonosphereCorrections::IonosphereCorrections(uint64_t this)
{
  *(void *)(this + 40) = 0;
  *(void *)(this + 48) = 0;
  *(void *)this = &unk_1EDD10628;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(void *)(this + 40) = 0;
  *(void *)(this + 48) = 0;
  *(void *)this = &unk_1EDD10628;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

double CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::AssistanceFileContents::AssistanceFileContents(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::AssistanceFileContents *this)
{
  *(void *)this = &unk_1EDD106A0;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  *((_DWORD *)this + 16) = 0;
  *((void *)this + 9) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_DWORD *)this + 10) = 0;
  return result;
}

{
  double result;

  *(void *)this = &unk_1EDD106A0;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  *((_DWORD *)this + 16) = 0;
  *((void *)this + 9) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_DWORD *)this + 10) = 0;
  return result;
}

uint64_t CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatellitePolynomialClock::InitAsDefaultInstance(uint64_t this)
{
  *(void *)(this + 8) = CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GpsTime::default_instance_;
  return this;
}

void *CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatelliteClockData::InitAsDefaultInstance(void *this)
{
  uint64_t v1 = CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatellitePolynomialClock::default_instance_;
  this[1] = CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SvId::default_instance_;
  this[2] = v1;
  this[3] = v1;
  this[7] = CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GpsTime::default_instance_;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GnssToGpsTimeOffset::InitAsDefaultInstance(uint64_t this)
{
  *(void *)(this + 8) = CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GpsTime::default_instance_;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SpaceWeatherStatus::InitAsDefaultInstance(uint64_t this)
{
  *(void *)(this + 8) = CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GpsTime::default_instance_;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::IonosphereCorrections::InitAsDefaultInstance(uint64_t this)
{
  *(void *)(this + 8) = CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GpsTime::default_instance_;
  *(void *)(this + 40) = CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SpaceWeatherStatus::default_instance_;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::AssistanceFileContents::InitAsDefaultInstance(uint64_t this)
{
  uint64_t v1 = CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::IonosphereCorrections::default_instance_;
  *(void *)(this + 8) = CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GpsTime::default_instance_;
  *(void *)(this + 16) = v1;
  return this;
}

void CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::protobuf_AddDesc_CoreNavigationCLPRavenGnssAssistanceFile_2eproto(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile *this)
{
  uint64_t v1 = CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::protobuf_AddDesc_CoreNavigationCLPRavenGnssAssistanceFile_2eproto_once_;
  __dmb(0xBu);
  if (v1 != 2)
  {
    v2[0] = MEMORY[0x1E4FBA938] + 16;
    v2[1] = CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::protobuf_AddDesc_CoreNavigationCLPRavenGnssAssistanceFile_2eproto_impl;
    char v3 = 0;
    wireless_diagnostics::google::protobuf::GoogleOnceInitImpl();
    wireless_diagnostics::google::protobuf::internal::FunctionClosure0::~FunctionClosure0((wireless_diagnostics::google::protobuf::internal::FunctionClosure0 *)v2);
  }
}

void sub_18DFB0674(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  wireless_diagnostics::google::protobuf::internal::FunctionClosure0::~FunctionClosure0((wireless_diagnostics::google::protobuf::internal::FunctionClosure0 *)va);
  _Unwind_Resume(a1);
}

BOOL CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::Constellation_IsValid(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile *this)
{
  return this < 5;
}

BOOL CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SignalType_IsValid(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile *this)
{
  return this < 7;
}

BOOL CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::StormScale_IsValid(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile *this)
{
  return (this + 1) < 7;
}

BOOL CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::IonosphereLayer_IsValid(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile *this)
{
  return this < 3;
}

uint64_t CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SvId::SharedCtor(uint64_t this)
{
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  return this;
}

CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SvId *CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SvId::SvId(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SvId *this, const CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SvId *a2)
{
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = &unk_1EDD10790;
  CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SvId::MergeFrom(this, a2);
  return this;
}

void sub_18DFB0730(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SvId::MergeFrom(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SvId *this, const CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SvId *a2)
{
  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v7);
  }
  LOBYTE(v4) = *((unsigned char *)a2 + 20);
  if ((_BYTE)v4)
  {
    if (*((unsigned char *)a2 + 20))
    {
      unsigned int v5 = *((_DWORD *)a2 + 2);
      if (v5 >= 5) {
        __assert_rtn("set_constellation", "CoreNavigationCLPRavenGnssAssistanceFile.pb.h", 1314, "::CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::Constellation_IsValid(value)");
      }
      *((_DWORD *)this + 5) |= 1u;
      *((_DWORD *)this + 2) = v5;
      int v4 = *((_DWORD *)a2 + 5);
    }
    if ((v4 & 2) != 0)
    {
      int v6 = *((_DWORD *)a2 + 3);
      *((_DWORD *)this + 5) |= 2u;
      *((_DWORD *)this + 3) = v6;
    }
  }
}

void sub_18DFB0818(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SvId::~SvId(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SvId *this)
{
  *(void *)this = &unk_1EDD10790;
  CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::protobuf_AddDesc_CoreNavigationCLPRavenGnssAssistanceFile_2eproto(this);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  uint64_t vars8;

  CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SvId::~SvId(this);

  JUMPOUT(0x192FA6240);
}

uint64_t CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SvId::default_instance(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SvId *this)
{
  return CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SvId::default_instance_;
}

uint64_t CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SvId::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 16) = a2;
  return this;
}

void CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SvId::New(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SvId *this)
{
}

uint64_t CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SvId::Clear(uint64_t this)
{
  if (*(unsigned char *)(this + 20)) {
    *(void *)(this + 8) = 0;
  }
  *(_DWORD *)(this + 20) = 0;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SvId::MergePartialFromCodedStream(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SvId *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  int v4 = (unsigned int *)((char *)this + 12);
  while (1)
  {
    while (1)
    {
      unsigned int v5 = (char *)*((void *)a2 + 1);
      if ((unint64_t)v5 >= *((void *)a2 + 2) || *v5 < 0)
      {
        unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
        *((_DWORD *)a2 + 8) = TagFallback;
        if (!TagFallback) {
          return 1;
        }
      }
      else
      {
        unint64_t TagFallback = *v5;
        *((_DWORD *)a2 + 8) = TagFallback;
        *((void *)a2 + 1) = v5 + 1;
        if (!TagFallback) {
          return 1;
        }
      }
      if (TagFallback >> 3 != 1) {
        break;
      }
      int v7 = TagFallback & 7;
      if ((TagFallback & 7) != 0) {
        goto LABEL_16;
      }
      unsigned int v15 = 0;
      uint64_t v10 = (char *)*((void *)a2 + 1);
      if ((unint64_t)v10 >= *((void *)a2 + 2) || *v10 < 0)
      {
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v15);
        if (!result) {
          return result;
        }
        unsigned int v11 = v15;
      }
      else
      {
        unsigned int v11 = *v10;
        *((void *)a2 + 1) = v10 + 1;
      }
      if (v11 <= 4)
      {
        *((_DWORD *)this + 5) |= 1u;
        *((_DWORD *)this + 2) = v11;
      }
      uint64_t v12 = (unsigned char *)*((void *)a2 + 1);
      unint64_t v8 = *((void *)a2 + 2);
      if ((unint64_t)v12 < v8 && *v12 == 16)
      {
        uint64_t v9 = v12 + 1;
        *((void *)a2 + 1) = v9;
LABEL_26:
        if ((unint64_t)v9 >= v8 || *v9 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v4);
          if (!result) {
            return result;
          }
          uint64_t v13 = (unsigned __int8 *)*((void *)a2 + 1);
          unint64_t v8 = *((void *)a2 + 2);
        }
        else
        {
          unsigned int *v4 = *v9;
          uint64_t v13 = (unsigned __int8 *)(v9 + 1);
          *((void *)a2 + 1) = v13;
        }
        *((_DWORD *)this + 5) |= 2u;
        if (v13 == (unsigned __int8 *)v8 && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
        {
          *((_DWORD *)a2 + 8) = 0;
          uint64_t result = 1;
          *((unsigned char *)a2 + 36) = 1;
          return result;
        }
      }
    }
    if (TagFallback >> 3 == 2)
    {
      int v7 = TagFallback & 7;
      if ((TagFallback & 7) == 0)
      {
        uint64_t v9 = (char *)*((void *)a2 + 1);
        unint64_t v8 = *((void *)a2 + 2);
        goto LABEL_26;
      }
    }
    else
    {
      int v7 = TagFallback & 7;
    }
LABEL_16:
    if (v7 == 4) {
      return 1;
    }
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0; {
  }
    }
}

uint64_t CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SvId::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  int v6 = *(_DWORD *)(this + 20);
  if (v6)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned int *)(this + 8), (uint64_t)a2, a4);
    int v6 = *(_DWORD *)(v5 + 20);
  }
  if ((v6 & 2) != 0)
  {
    uint64_t v7 = *(unsigned int *)(v5 + 12);
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v7, (uint64_t)a2, a4);
  }
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SvId::ByteSize(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SvId *this)
{
  char v2 = *((unsigned char *)this + 20);
  if (v2)
  {
    if (*((unsigned char *)this + 20))
    {
      int v4 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 2);
      if ((v4 & 0x80000000) != 0)
      {
        uint64_t v3 = 11;
        if ((v2 & 2) == 0) {
          goto LABEL_17;
        }
      }
      else if (v4 >= 0x80)
      {
        uint64_t v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v4) + 1;
        if ((*((_DWORD *)this + 5) & 2) == 0) {
          goto LABEL_17;
        }
      }
      else
      {
        uint64_t v3 = 2;
        if ((v2 & 2) == 0) {
          goto LABEL_17;
        }
      }
    }
    else
    {
      uint64_t v3 = 0;
      if ((*((unsigned char *)this + 20) & 2) == 0) {
        goto LABEL_17;
      }
    }
    uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 3);
    if (v5 >= 0x80) {
      int v6 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5) + 1;
    }
    else {
      int v6 = 2;
    }
    uint64_t v3 = (v6 + v3);
  }
  else
  {
    uint64_t v3 = 0;
  }
LABEL_17:
  *((_DWORD *)this + 4) = v3;
  return v3;
}

void CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SvId::CheckTypeAndMergeFrom(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SvId *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SvId::MergeFrom(this, lpsrc);
}

void CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SvId::CopyFrom(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SvId *this, const CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SvId *a2)
{
  if (a2 != this)
  {
    (*(void (**)(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SvId *))(*(void *)this + 32))(this);
    CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SvId::MergeFrom(this, a2);
  }
}

uint64_t CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SvId::IsInitialized(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SvId *this)
{
  return 1;
}

CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SvId *CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SvId::Swap(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SvId *this, CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SvId *a2)
{
  if (a2 != this)
  {
    int v2 = *((_DWORD *)this + 2);
    *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
    *((_DWORD *)a2 + 2) = v2;
    int v3 = *((_DWORD *)this + 3);
    *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
    *((_DWORD *)a2 + 3) = v3;
    int v4 = *((_DWORD *)this + 5);
    *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
    *((_DWORD *)a2 + 5) = v4;
    int v5 = *((_DWORD *)this + 4);
    *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
    *((_DWORD *)a2 + 4) = v5;
  }
  return this;
}

void *CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SvId::GetTypeName@<X0>(void *a1@<X8>)
{
  return sub_18DEDE7B0(a1, "CoreNavigation.CLP.LogEntry.RavenGnssAssistanceFile.SvId");
}

uint64_t CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GpsTime::SharedCtor(uint64_t this)
{
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  return this;
}

CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GpsTime *CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GpsTime::GpsTime(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GpsTime *this, const CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GpsTime *a2)
{
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = &unk_1EDD10808;
  CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GpsTime::MergeFrom(this, a2);
  return this;
}

void sub_18DFB0DFC(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

float CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GpsTime::MergeFrom(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GpsTime *this, const CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GpsTime *a2)
{
  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v7);
  }
  LOBYTE(v5) = *((unsigned char *)a2 + 20);
  if ((_BYTE)v5)
  {
    if (*((unsigned char *)a2 + 20))
    {
      int v6 = *((_DWORD *)a2 + 2);
      *((_DWORD *)this + 5) |= 1u;
      *((_DWORD *)this + 2) = v6;
      int v5 = *((_DWORD *)a2 + 5);
    }
    if ((v5 & 2) != 0)
    {
      float result = *((float *)a2 + 3);
      *((_DWORD *)this + 5) |= 2u;
      *((float *)this + 3) = result;
    }
  }
  return result;
}

void sub_18DFB0EBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GpsTime::~GpsTime(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GpsTime *this)
{
  *(void *)this = &unk_1EDD10808;
  CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::protobuf_AddDesc_CoreNavigationCLPRavenGnssAssistanceFile_2eproto(this);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  uint64_t vars8;

  CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GpsTime::~GpsTime(this);

  JUMPOUT(0x192FA6240);
}

uint64_t CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GpsTime::default_instance(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GpsTime *this)
{
  return CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GpsTime::default_instance_;
}

uint64_t CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GpsTime::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 16) = a2;
  return this;
}

void CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GpsTime::New(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GpsTime *this)
{
}

uint64_t CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GpsTime::Clear(uint64_t this)
{
  if (*(unsigned char *)(this + 20)) {
    *(void *)(this + 8) = 0;
  }
  *(_DWORD *)(this + 20) = 0;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GpsTime::MergePartialFromCodedStream(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GpsTime *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  int v4 = (unsigned int *)((char *)this + 8);
  do
  {
    while (1)
    {
      while (1)
      {
        int v5 = (char *)*((void *)a2 + 1);
        if ((unint64_t)v5 >= *((void *)a2 + 2) || *v5 < 0)
        {
          unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
          *((_DWORD *)a2 + 8) = TagFallback;
          if (!TagFallback) {
            return 1;
          }
        }
        else
        {
          unint64_t TagFallback = *v5;
          *((_DWORD *)a2 + 8) = TagFallback;
          *((void *)a2 + 1) = v5 + 1;
          if (!TagFallback) {
            return 1;
          }
        }
        if (TagFallback >> 3 != 1) {
          break;
        }
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_16;
        }
        uint64_t v9 = (char *)*((void *)a2 + 1);
        unint64_t v8 = *((void *)a2 + 2);
        if ((unint64_t)v9 >= v8 || *v9 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v4);
          if (!result) {
            return result;
          }
          uint64_t v10 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v8 = *((void *)a2 + 2);
        }
        else
        {
          unsigned int *v4 = *v9;
          uint64_t v10 = v9 + 1;
          *((void *)a2 + 1) = v10;
        }
        *((_DWORD *)this + 5) |= 1u;
        if ((unint64_t)v10 < v8 && *v10 == 21)
        {
          *((void *)a2 + 1) = v10 + 1;
          goto LABEL_24;
        }
      }
      if (TagFallback >> 3 != 2) {
        break;
      }
      int v7 = TagFallback & 7;
      if (v7 != 5) {
        goto LABEL_16;
      }
LABEL_24:
      unsigned int v12 = 0;
      if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(a2, &v12) & 1) == 0) {
        return 0;
      }
      *((_DWORD *)this + 3) = v12;
      *((_DWORD *)this + 5) |= 2u;
      if (*((void *)a2 + 1) == *((void *)a2 + 2)
        && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
      {
        *((_DWORD *)a2 + 8) = 0;
        uint64_t result = 1;
        *((unsigned char *)a2 + 36) = 1;
        return result;
      }
    }
    int v7 = TagFallback & 7;
LABEL_16:
    if (v7 == 4) {
      return 1;
    }
  }
  while ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) != 0);
  return 0;
}

uint64_t CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GpsTime::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  int v6 = *(_DWORD *)(this + 20);
  if (v6)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned int *)(this + 8), (uint64_t)a2, a4);
    int v6 = *(_DWORD *)(v5 + 20);
  }
  if ((v6 & 2) != 0)
  {
    float v7 = *(float *)(v5 + 12);
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, (uint64_t)a2, v7, a3);
  }
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GpsTime::ByteSize(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GpsTime *this)
{
  LOBYTE(v2) = *((unsigned char *)this + 20);
  if ((_BYTE)v2)
  {
    if (*((unsigned char *)this + 20))
    {
      uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 2);
      if (v5 >= 0x80)
      {
        unsigned int v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5) + 1;
        int v2 = *((_DWORD *)this + 5);
      }
      else
      {
        unsigned int v3 = 2;
      }
    }
    else
    {
      unsigned int v3 = 0;
    }
    if ((v2 & 2) != 0) {
      uint64_t result = v3 + 5;
    }
    else {
      uint64_t result = v3;
    }
  }
  else
  {
    uint64_t result = 0;
  }
  *((_DWORD *)this + 4) = result;
  return result;
}

float CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GpsTime::CheckTypeAndMergeFrom(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GpsTime *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  return CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GpsTime::MergeFrom(this, lpsrc);
}

float CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GpsTime::CopyFrom(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GpsTime *this, const CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GpsTime *a2)
{
  if (a2 != this)
  {
    (*(void (**)(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GpsTime *))(*(void *)this + 32))(this);
    return CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GpsTime::MergeFrom(this, a2);
  }
  return result;
}

uint64_t CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GpsTime::IsInitialized(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GpsTime *this)
{
  return 1;
}

float CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GpsTime::Swap(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GpsTime *this, CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GpsTime *a2)
{
  if (a2 != this)
  {
    int v2 = *((_DWORD *)this + 2);
    *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
    *((_DWORD *)a2 + 2) = v2;
    float result = *((float *)this + 3);
    *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
    *((float *)a2 + 3) = result;
    int v4 = *((_DWORD *)this + 5);
    *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
    *((_DWORD *)a2 + 5) = v4;
    int v5 = *((_DWORD *)this + 4);
    *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
    *((_DWORD *)a2 + 4) = v5;
  }
  return result;
}

void *CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GpsTime::GetTypeName@<X0>(void *a1@<X8>)
{
  return sub_18DEDE7B0(a1, "CoreNavigation.CLP.LogEntry.RavenGnssAssistanceFile.GpsTime");
}

uint64_t CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatellitePolynomialClock::SharedCtor(uint64_t this)
{
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(_DWORD *)(this + 32) = 0;
  *(void *)(this + 24) = 0;
  return this;
}

CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatellitePolynomialClock *CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatellitePolynomialClock::SatellitePolynomialClock(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatellitePolynomialClock *this, const CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatellitePolynomialClock *a2)
{
  *(void *)this = &unk_1EDD10718;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatellitePolynomialClock::MergeFrom(this, a2);
  return this;
}

void sub_18DFB1454(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

float CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatellitePolynomialClock::MergeFrom(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatellitePolynomialClock *this, const CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatellitePolynomialClock *a2)
{
  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v8);
  }
  LOBYTE(v5) = *((unsigned char *)a2 + 32);
  if ((_BYTE)v5)
  {
    if (*((unsigned char *)a2 + 32))
    {
      *((_DWORD *)this + 8) |= 1u;
      int v6 = (CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GpsTime *)*((void *)this + 1);
      if (!v6) {
        operator new();
      }
      float v7 = (const CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GpsTime *)*((void *)a2 + 1);
      if (!v7)
      {
        CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::protobuf_AddDesc_CoreNavigationCLPRavenGnssAssistanceFile_2eproto(this);
        float v7 = *(const CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GpsTime **)(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatellitePolynomialClock::default_instance_
                                                                                       + 8);
      }
      float result = CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GpsTime::MergeFrom(v6, v7);
      int v5 = *((_DWORD *)a2 + 8);
      if ((v5 & 2) == 0)
      {
LABEL_6:
        if ((v5 & 4) == 0) {
          goto LABEL_7;
        }
        goto LABEL_16;
      }
    }
    else if ((*((unsigned char *)a2 + 32) & 2) == 0)
    {
      goto LABEL_6;
    }
    float result = *((float *)a2 + 4);
    *((_DWORD *)this + 8) |= 2u;
    *((float *)this + 4) = result;
    int v5 = *((_DWORD *)a2 + 8);
    if ((v5 & 4) == 0)
    {
LABEL_7:
      if ((v5 & 8) == 0) {
        return result;
      }
      goto LABEL_8;
    }
LABEL_16:
    float result = *((float *)a2 + 5);
    *((_DWORD *)this + 8) |= 4u;
    *((float *)this + 5) = result;
    if ((*((_DWORD *)a2 + 8) & 8) == 0) {
      return result;
    }
LABEL_8:
    float result = *((float *)a2 + 6);
    *((_DWORD *)this + 8) |= 8u;
    *((float *)this + 6) = result;
  }
  return result;
}

void sub_18DFB15C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatellitePolynomialClock::~SatellitePolynomialClock(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatellitePolynomialClock *this)
{
  *(void *)this = &unk_1EDD10718;
  CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatellitePolynomialClock::SharedDtor(this);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  uint64_t vars8;

  CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatellitePolynomialClock::~SatellitePolynomialClock(this);

  JUMPOUT(0x192FA6240);
}

void CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatellitePolynomialClock::SharedDtor(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatellitePolynomialClock *this)
{
  CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::protobuf_AddDesc_CoreNavigationCLPRavenGnssAssistanceFile_2eproto(this);
  if ((CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatellitePolynomialClock *)CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatellitePolynomialClock::default_instance_ != this)
  {
    uint64_t v2 = *((void *)this + 1);
    if (v2)
    {
      unsigned int v3 = *(void (**)(void))(*(void *)v2 + 8);
      v3();
    }
  }
}

uint64_t CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatellitePolynomialClock::default_instance(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatellitePolynomialClock *this)
{
  return CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatellitePolynomialClock::default_instance_;
}

uint64_t CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatellitePolynomialClock::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 28) = a2;
  return this;
}

void CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatellitePolynomialClock::New(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatellitePolynomialClock *this)
{
}

uint64_t CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatellitePolynomialClock::Clear(uint64_t this)
{
  if (*(unsigned char *)(this + 32))
  {
    if (*(unsigned char *)(this + 32))
    {
      uint64_t v1 = *(void *)(this + 8);
      if (v1)
      {
        if (*(unsigned char *)(v1 + 20)) {
          *(void *)(v1 + 8) = 0;
        }
        *(_DWORD *)(v1 + 20) = 0;
      }
    }
    *(void *)(this + 16) = 0;
    *(_DWORD *)(this + 24) = 0;
  }
  *(_DWORD *)(this + 32) = 0;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatellitePolynomialClock::MergePartialFromCodedStream(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatellitePolynomialClock *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  while (2)
  {
    int v4 = (char *)*((void *)a2 + 1);
    if ((unint64_t)v4 >= *((void *)a2 + 2) || *v4 < 0)
    {
      unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      if (!TagFallback) {
        return 1;
      }
    }
    else
    {
      unint64_t TagFallback = *v4;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((void *)a2 + 1) = v4 + 1;
      if (!TagFallback) {
        return 1;
      }
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        int v6 = TagFallback & 7;
        if (v6 != 2) {
          goto LABEL_19;
        }
        *((_DWORD *)this + 8) |= 1u;
        float v7 = (CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GpsTime *)*((void *)this + 1);
        if (!v7) {
          operator new();
        }
        unsigned int v18 = 0;
        unint64_t v8 = (char *)*((void *)a2 + 1);
        if ((unint64_t)v8 >= *((void *)a2 + 2) || *v8 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v18))return 0; {
        }
          }
        else
        {
          unsigned int v18 = *v8;
          *((void *)a2 + 1) = v8 + 1;
        }
        int v9 = *((_DWORD *)a2 + 14);
        int v10 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v9 + 1;
        if (v9 >= v10) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GpsTime::MergePartialFromCodedStream(v7, a2)|| !*((unsigned char *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        int v11 = *((_DWORD *)a2 + 14);
        BOOL v12 = __OFSUB__(v11, 1);
        int v13 = v11 - 1;
        if (v13 < 0 == v12) {
          *((_DWORD *)a2 + 14) = v13;
        }
        uint64_t v14 = (unsigned char *)*((void *)a2 + 1);
        if ((unint64_t)v14 >= *((void *)a2 + 2) || *v14 != 21) {
          continue;
        }
        *((void *)a2 + 1) = v14 + 1;
        goto LABEL_31;
      case 2u:
        int v6 = TagFallback & 7;
        if (v6 != 5) {
          goto LABEL_19;
        }
LABEL_31:
        unsigned int v18 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(a2, &v18) & 1) == 0) {
          return 0;
        }
        *((_DWORD *)this + 4) = v18;
        *((_DWORD *)this + 8) |= 2u;
        unsigned int v15 = (unsigned char *)*((void *)a2 + 1);
        if ((unint64_t)v15 >= *((void *)a2 + 2) || *v15 != 29) {
          continue;
        }
        *((void *)a2 + 1) = v15 + 1;
LABEL_35:
        unsigned int v18 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(a2, &v18) & 1) == 0) {
          return 0;
        }
        *((_DWORD *)this + 5) = v18;
        *((_DWORD *)this + 8) |= 4u;
        uint64_t v16 = (unsigned char *)*((void *)a2 + 1);
        if ((unint64_t)v16 >= *((void *)a2 + 2) || *v16 != 37) {
          continue;
        }
        *((void *)a2 + 1) = v16 + 1;
LABEL_39:
        unsigned int v18 = 0;
        if (wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(a2, &v18))
        {
          *((_DWORD *)this + 6) = v18;
          *((_DWORD *)this + 8) |= 8u;
          if (*((void *)a2 + 1) == *((void *)a2 + 2)
            && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
          {
            *((_DWORD *)a2 + 8) = 0;
            uint64_t result = 1;
            *((unsigned char *)a2 + 36) = 1;
            return result;
          }
          continue;
        }
        return 0;
      case 3u:
        int v6 = TagFallback & 7;
        if (v6 == 5) {
          goto LABEL_35;
        }
        goto LABEL_19;
      case 4u:
        int v6 = TagFallback & 7;
        if (v6 != 5) {
          goto LABEL_19;
        }
        goto LABEL_39;
      default:
        int v6 = TagFallback & 7;
LABEL_19:
        if (v6 == 4) {
          return 1;
        }
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0; {
        continue;
        }
    }
  }
}

uint64_t CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatellitePolynomialClock::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  int v6 = *(_DWORD *)(this + 32);
  if (v6)
  {
    uint64_t v7 = *(void *)(this + 8);
    if (!v7)
    {
      CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::protobuf_AddDesc_CoreNavigationCLPRavenGnssAssistanceFile_2eproto((CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile *)this);
      uint64_t v7 = *(void *)(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatellitePolynomialClock::default_instance_
                     + 8);
    }
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v7, a2, a4);
    int v6 = *(_DWORD *)(v5 + 32);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
LABEL_10:
      this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, (uint64_t)a2, *(float *)(v5 + 20), a3);
      if ((*(_DWORD *)(v5 + 32) & 8) == 0) {
        return this;
      }
      goto LABEL_11;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, (uint64_t)a2, *(float *)(v5 + 16), a3);
  int v6 = *(_DWORD *)(v5 + 32);
  if ((v6 & 4) != 0) {
    goto LABEL_10;
  }
LABEL_4:
  if ((v6 & 8) == 0) {
    return this;
  }
LABEL_11:
  float v8 = *(float *)(v5 + 24);

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, (uint64_t)a2, v8, a3);
}

uint64_t CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatellitePolynomialClock::ByteSize(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatellitePolynomialClock *this)
{
  LOBYTE(v2) = *((unsigned char *)this + 32);
  if ((_BYTE)v2)
  {
    if (*((unsigned char *)this + 32))
    {
      uint64_t v5 = (CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GpsTime *)*((void *)this + 1);
      if (!v5)
      {
        CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::protobuf_AddDesc_CoreNavigationCLPRavenGnssAssistanceFile_2eproto(0);
        uint64_t v5 = *(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GpsTime **)(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatellitePolynomialClock::default_instance_
                                                                                 + 8);
      }
      int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GpsTime::ByteSize(v5);
      int v7 = (int)v6;
      if (v6 >= 0x80) {
        int v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6);
      }
      else {
        int v8 = 1;
      }
      unsigned int v3 = v7 + v8 + 1;
      int v2 = *((_DWORD *)this + 8);
    }
    else
    {
      unsigned int v3 = 0;
    }
    if ((v2 & 2) != 0) {
      v3 += 5;
    }
    if ((v2 & 4) != 0) {
      v3 += 5;
    }
    if ((v2 & 8) != 0) {
      uint64_t result = v3 + 5;
    }
    else {
      uint64_t result = v3;
    }
  }
  else
  {
    uint64_t result = 0;
  }
  *((_DWORD *)this + 7) = result;
  return result;
}

float CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatellitePolynomialClock::CheckTypeAndMergeFrom(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatellitePolynomialClock *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  return CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatellitePolynomialClock::MergeFrom(this, lpsrc);
}

float CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatellitePolynomialClock::CopyFrom(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatellitePolynomialClock *this, const CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatellitePolynomialClock *a2)
{
  if (a2 != this)
  {
    (*(void (**)(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatellitePolynomialClock *))(*(void *)this + 32))(this);
    return CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatellitePolynomialClock::MergeFrom(this, a2);
  }
  return result;
}

uint64_t CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatellitePolynomialClock::IsInitialized(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatellitePolynomialClock *this)
{
  return 1;
}

float CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatellitePolynomialClock::Swap(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatellitePolynomialClock *this, CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatellitePolynomialClock *a2)
{
  if (a2 != this)
  {
    uint64_t v2 = *((void *)this + 1);
    *((void *)this + 1) = *((void *)a2 + 1);
    *((void *)a2 + 1) = v2;
    int v3 = *((_DWORD *)this + 4);
    *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
    *((_DWORD *)a2 + 4) = v3;
    int v4 = *((_DWORD *)this + 5);
    *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
    *((_DWORD *)a2 + 5) = v4;
    float result = *((float *)this + 6);
    *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
    *((float *)a2 + 6) = result;
    LODWORD(v2) = *((_DWORD *)this + 8);
    *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
    *((_DWORD *)a2 + 8) = v2;
    LODWORD(v2) = *((_DWORD *)this + 7);
    *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
    *((_DWORD *)a2 + 7) = v2;
  }
  return result;
}

void *CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatellitePolynomialClock::GetTypeName@<X0>(void *a1@<X8>)
{
  return sub_18DEDE7B0(a1, "CoreNavigation.CLP.LogEntry.RavenGnssAssistanceFile.SatellitePolynomialClock");
}

uint64_t CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatelliteGroupDelay::SharedCtor(uint64_t this)
{
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  return this;
}

CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatelliteGroupDelay *CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatelliteGroupDelay::SatelliteGroupDelay(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatelliteGroupDelay *this, const CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatelliteGroupDelay *a2)
{
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = &unk_1EDD105B0;
  CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatelliteGroupDelay::MergeFrom(this, a2);
  return this;
}

void sub_18DFB1E10(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

float CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatelliteGroupDelay::MergeFrom(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatelliteGroupDelay *this, const CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatelliteGroupDelay *a2)
{
  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v7);
  }
  LOBYTE(v5) = *((unsigned char *)a2 + 20);
  if ((_BYTE)v5)
  {
    if (*((unsigned char *)a2 + 20))
    {
      unsigned int v6 = *((_DWORD *)a2 + 2);
      if (v6 >= 7) {
        __assert_rtn("set_signal_type", "CoreNavigationCLPRavenGnssAssistanceFile.pb.h", 1523, "::CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SignalType_IsValid(value)");
      }
      *((_DWORD *)this + 5) |= 1u;
      *((_DWORD *)this + 2) = v6;
      int v5 = *((_DWORD *)a2 + 5);
    }
    if ((v5 & 2) != 0)
    {
      float result = *((float *)a2 + 3);
      *((_DWORD *)this + 5) |= 2u;
      *((float *)this + 3) = result;
    }
  }
  return result;
}

void sub_18DFB1EF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatelliteGroupDelay::~SatelliteGroupDelay(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatelliteGroupDelay *this)
{
  *(void *)this = &unk_1EDD105B0;
  CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::protobuf_AddDesc_CoreNavigationCLPRavenGnssAssistanceFile_2eproto(this);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  uint64_t vars8;

  CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatelliteGroupDelay::~SatelliteGroupDelay(this);

  JUMPOUT(0x192FA6240);
}

uint64_t CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatelliteGroupDelay::default_instance(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatelliteGroupDelay *this)
{
  return CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatelliteGroupDelay::default_instance_;
}

uint64_t CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatelliteGroupDelay::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 16) = a2;
  return this;
}

void CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatelliteGroupDelay::New(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatelliteGroupDelay *this)
{
}

uint64_t CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatelliteGroupDelay::Clear(uint64_t this)
{
  if (*(unsigned char *)(this + 20)) {
    *(void *)(this + 8) = 0;
  }
  *(_DWORD *)(this + 20) = 0;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatelliteGroupDelay::MergePartialFromCodedStream(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatelliteGroupDelay *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  do
  {
    while (1)
    {
      while (1)
      {
        int v4 = (char *)*((void *)a2 + 1);
        if ((unint64_t)v4 >= *((void *)a2 + 2) || *v4 < 0)
        {
          unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
          *((_DWORD *)a2 + 8) = TagFallback;
          if (!TagFallback) {
            return 1;
          }
        }
        else
        {
          unint64_t TagFallback = *v4;
          *((_DWORD *)a2 + 8) = TagFallback;
          *((void *)a2 + 1) = v4 + 1;
          if (!TagFallback) {
            return 1;
          }
        }
        if (TagFallback >> 3 != 1) {
          break;
        }
        int v6 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_15;
        }
        unsigned int v11 = 0;
        int v7 = (char *)*((void *)a2 + 1);
        if ((unint64_t)v7 >= *((void *)a2 + 2) || *v7 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v11);
          if (!result) {
            return result;
          }
          unsigned int v8 = v11;
        }
        else
        {
          unsigned int v8 = *v7;
          *((void *)a2 + 1) = v7 + 1;
        }
        if (v8 <= 6)
        {
          *((_DWORD *)this + 5) |= 1u;
          *((_DWORD *)this + 2) = v8;
        }
        int v10 = (unsigned char *)*((void *)a2 + 1);
        if ((unint64_t)v10 < *((void *)a2 + 2) && *v10 == 21)
        {
          *((void *)a2 + 1) = v10 + 1;
          goto LABEL_25;
        }
      }
      if (TagFallback >> 3 != 2) {
        break;
      }
      int v6 = TagFallback & 7;
      if (v6 != 5) {
        goto LABEL_15;
      }
LABEL_25:
      unsigned int v12 = 0;
      if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(a2, &v12) & 1) == 0) {
        return 0;
      }
      *((_DWORD *)this + 3) = v12;
      *((_DWORD *)this + 5) |= 2u;
      if (*((void *)a2 + 1) == *((void *)a2 + 2)
        && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
      {
        *((_DWORD *)a2 + 8) = 0;
        uint64_t result = 1;
        *((unsigned char *)a2 + 36) = 1;
        return result;
      }
    }
    int v6 = TagFallback & 7;
LABEL_15:
    if (v6 == 4) {
      return 1;
    }
  }
  while ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) != 0);
  return 0;
}

uint64_t CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatelliteGroupDelay::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  int v6 = *(_DWORD *)(this + 20);
  if (v6)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned int *)(this + 8), (uint64_t)a2, a4);
    int v6 = *(_DWORD *)(v5 + 20);
  }
  if ((v6 & 2) != 0)
  {
    float v7 = *(float *)(v5 + 12);
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, (uint64_t)a2, v7, a3);
  }
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatelliteGroupDelay::ByteSize(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatelliteGroupDelay *this)
{
  LOBYTE(v2) = *((unsigned char *)this + 20);
  if ((_BYTE)v2)
  {
    if (*((unsigned char *)this + 20))
    {
      uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 2);
      if ((v5 & 0x80000000) != 0)
      {
        unsigned int v3 = 11;
      }
      else if (v5 >= 0x80)
      {
        unsigned int v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5) + 1;
        int v2 = *((_DWORD *)this + 5);
      }
      else
      {
        unsigned int v3 = 2;
      }
    }
    else
    {
      unsigned int v3 = 0;
    }
    if ((v2 & 2) != 0) {
      uint64_t result = v3 + 5;
    }
    else {
      uint64_t result = v3;
    }
  }
  else
  {
    uint64_t result = 0;
  }
  *((_DWORD *)this + 4) = result;
  return result;
}

float CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatelliteGroupDelay::CheckTypeAndMergeFrom(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatelliteGroupDelay *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  return CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatelliteGroupDelay::MergeFrom(this, lpsrc);
}

float CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatelliteGroupDelay::CopyFrom(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatelliteGroupDelay *this, const CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatelliteGroupDelay *a2)
{
  if (a2 != this)
  {
    (*(void (**)(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatelliteGroupDelay *))(*(void *)this + 32))(this);
    return CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatelliteGroupDelay::MergeFrom(this, a2);
  }
  return result;
}

uint64_t CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatelliteGroupDelay::IsInitialized(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatelliteGroupDelay *this)
{
  return 1;
}

float CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatelliteGroupDelay::Swap(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatelliteGroupDelay *this, CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatelliteGroupDelay *a2)
{
  if (a2 != this)
  {
    int v2 = *((_DWORD *)this + 2);
    *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
    *((_DWORD *)a2 + 2) = v2;
    float result = *((float *)this + 3);
    *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
    *((float *)a2 + 3) = result;
    int v4 = *((_DWORD *)this + 5);
    *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
    *((_DWORD *)a2 + 5) = v4;
    int v5 = *((_DWORD *)this + 4);
    *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
    *((_DWORD *)a2 + 4) = v5;
  }
  return result;
}

void *CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatelliteGroupDelay::GetTypeName@<X0>(void *a1@<X8>)
{
  return sub_18DEDE7B0(a1, "CoreNavigation.CLP.LogEntry.RavenGnssAssistanceFile.SatelliteGroupDelay");
}

uint64_t CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatelliteClockData::SharedCtor(uint64_t this)
{
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(void *)(this + 56) = 0;
  *(void *)(this + 64) = 0;
  *(_DWORD *)(this + 72) = 0;
  return this;
}

CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatelliteClockData *CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatelliteClockData::SatelliteClockData(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatelliteClockData *this, const CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatelliteClockData *a2)
{
  *(void *)this = &unk_1EDD103D0;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  *((_DWORD *)this + 18) = 0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 36) = 0u;
  CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatelliteClockData::MergeFrom(this, a2);
  return this;
}

void sub_18DFB24C4(_Unwind_Exception *a1)
{
  sub_18DF0C324(v1 + 4);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite((wireless_diagnostics::google::protobuf::MessageLite *)v1);
  _Unwind_Resume(a1);
}

float CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatelliteClockData::MergeFrom(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatelliteClockData *this, const CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatelliteClockData *a2)
{
  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v20);
  }
  int v4 = (CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile *)wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatelliteClockData *)((char *)this + 32));
  if (*((int *)a2 + 10) >= 1)
  {
    uint64_t v6 = 0;
    do
    {
      float v7 = *(const CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatelliteGroupDelay **)(*((void *)a2 + 4)
                                                                                                 + 8 * v6);
      int v8 = *((_DWORD *)this + 11);
      uint64_t v9 = *((int *)this + 10);
      if ((int)v9 >= v8)
      {
        if (v8 == *((_DWORD *)this + 12))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatelliteClockData *)((char *)this + 32));
          int v8 = *((_DWORD *)this + 11);
        }
        *((_DWORD *)this + 11) = v8 + 1;
        operator new();
      }
      uint64_t v10 = *((void *)this + 4);
      *((_DWORD *)this + 10) = v9 + 1;
      float result = CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatelliteGroupDelay::MergeFrom(*(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatelliteGroupDelay **)(v10 + 8 * v9), v7);
      ++v6;
    }
    while (v6 < *((int *)a2 + 10));
  }
  LOBYTE(v11) = *((unsigned char *)a2 + 72);
  if (!(_BYTE)v11) {
    return result;
  }
  if (*((unsigned char *)a2 + 72))
  {
    *((_DWORD *)this + 18) |= 1u;
    unsigned int v12 = (CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SvId *)*((void *)this + 1);
    if (!v12) {
      operator new();
    }
    int v13 = (const CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SvId *)*((void *)a2 + 1);
    if (!v13)
    {
      CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::protobuf_AddDesc_CoreNavigationCLPRavenGnssAssistanceFile_2eproto(v4);
      int v13 = *(const CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SvId **)(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatelliteClockData::default_instance_
                                                                                   + 8);
    }
    CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SvId::MergeFrom(v12, v13);
    int v11 = *((_DWORD *)a2 + 18);
    if ((v11 & 2) == 0)
    {
LABEL_14:
      if ((v11 & 4) == 0) {
        goto LABEL_15;
      }
LABEL_29:
      *((_DWORD *)this + 18) |= 4u;
      uint64_t v16 = (CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatellitePolynomialClock *)*((void *)this + 3);
      if (!v16) {
        operator new();
      }
      uint64_t v17 = (const CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatellitePolynomialClock *)*((void *)a2 + 3);
      if (!v17)
      {
        CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::protobuf_AddDesc_CoreNavigationCLPRavenGnssAssistanceFile_2eproto(v4);
        uint64_t v17 = *(const CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatellitePolynomialClock **)(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatelliteClockData::default_instance_ + 24);
      }
      float result = CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatellitePolynomialClock::MergeFrom(v16, v17);
      int v11 = *((_DWORD *)a2 + 18);
      if ((v11 & 0x10) == 0)
      {
LABEL_16:
        if ((v11 & 0x20) == 0) {
          return result;
        }
        goto LABEL_17;
      }
      goto LABEL_34;
    }
  }
  else if ((*((unsigned char *)a2 + 72) & 2) == 0)
  {
    goto LABEL_14;
  }
  *((_DWORD *)this + 18) |= 2u;
  uint64_t v14 = (CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatellitePolynomialClock *)*((void *)this + 2);
  if (!v14) {
    operator new();
  }
  unsigned int v15 = (const CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatellitePolynomialClock *)*((void *)a2 + 2);
  if (!v15)
  {
    CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::protobuf_AddDesc_CoreNavigationCLPRavenGnssAssistanceFile_2eproto(v4);
    unsigned int v15 = *(const CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatellitePolynomialClock **)(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatelliteClockData::default_instance_ + 16);
  }
  float result = CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatellitePolynomialClock::MergeFrom(v14, v15);
  int v11 = *((_DWORD *)a2 + 18);
  if ((v11 & 4) != 0) {
    goto LABEL_29;
  }
LABEL_15:
  if ((v11 & 0x10) == 0) {
    goto LABEL_16;
  }
LABEL_34:
  *((_DWORD *)this + 18) |= 0x10u;
  unsigned int v18 = (CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GpsTime *)*((void *)this + 7);
  if (!v18) {
    operator new();
  }
  uint64_t v19 = (const CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GpsTime *)*((void *)a2 + 7);
  if (!v19)
  {
    CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::protobuf_AddDesc_CoreNavigationCLPRavenGnssAssistanceFile_2eproto(v4);
    uint64_t v19 = *(const CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GpsTime **)(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatelliteClockData::default_instance_
                                                                                    + 56);
  }
  float result = CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GpsTime::MergeFrom(v18, v19);
  if ((*((_DWORD *)a2 + 18) & 0x20) != 0)
  {
LABEL_17:
    float result = *((float *)a2 + 16);
    *((_DWORD *)this + 18) |= 0x20u;
    *((float *)this + 16) = result;
  }
  return result;
}

void sub_18DFB286C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatelliteClockData::~SatelliteClockData(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatelliteClockData *this)
{
  *(void *)this = &unk_1EDD103D0;
  CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatelliteClockData::SharedDtor(this);
  sub_18DF0C324((uint64_t *)this + 4);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  uint64_t vars8;

  CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatelliteClockData::~SatelliteClockData(this);

  JUMPOUT(0x192FA6240);
}

void CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatelliteClockData::SharedDtor(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatelliteClockData *this)
{
  CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::protobuf_AddDesc_CoreNavigationCLPRavenGnssAssistanceFile_2eproto(this);
  if ((CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatelliteClockData *)CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatelliteClockData::default_instance_ != this)
  {
    uint64_t v2 = *((void *)this + 1);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
    uint64_t v3 = *((void *)this + 2);
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
    uint64_t v4 = *((void *)this + 3);
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
    uint64_t v5 = *((void *)this + 7);
    if (v5)
    {
      uint64_t v6 = *(void (**)(void))(*(void *)v5 + 8);
      v6();
    }
  }
}

uint64_t CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatelliteClockData::default_instance(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatelliteClockData *this)
{
  return CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatelliteClockData::default_instance_;
}

uint64_t CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatelliteClockData::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 68) = a2;
  return this;
}

void CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatelliteClockData::New(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatelliteClockData *this)
{
}

uint64_t CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatelliteClockData::Clear(uint64_t this)
{
  uint64_t v1 = this;
  LOBYTE(v2) = *(unsigned char *)(this + 72);
  if ((_BYTE)v2)
  {
    if (*(unsigned char *)(this + 72))
    {
      uint64_t v3 = *(void *)(this + 8);
      if (v3)
      {
        if (*(unsigned char *)(v3 + 20)) {
          *(void *)(v3 + 8) = 0;
        }
        *(_DWORD *)(v3 + 20) = 0;
        int v2 = *(_DWORD *)(this + 72);
      }
    }
    if ((v2 & 2) != 0)
    {
      this = *(void *)(this + 16);
      if (this)
      {
        this = CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatellitePolynomialClock::Clear(this);
        int v2 = *(_DWORD *)(v1 + 72);
      }
    }
    if ((v2 & 4) != 0)
    {
      this = *(void *)(v1 + 24);
      if (this)
      {
        this = CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatellitePolynomialClock::Clear(this);
        int v2 = *(_DWORD *)(v1 + 72);
      }
    }
    if ((v2 & 0x10) != 0)
    {
      uint64_t v4 = *(void *)(v1 + 56);
      if (v4)
      {
        if (*(unsigned char *)(v4 + 20)) {
          *(void *)(v4 + 8) = 0;
        }
        *(_DWORD *)(v4 + 20) = 0;
      }
    }
    *(_DWORD *)(v1 + 64) = 0;
  }
  if (*(int *)(v1 + 40) >= 1)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = *(void *)(*(void *)(v1 + 32) + 8 * v5);
      this = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 32))(v6);
      ++v5;
    }
    while (v5 < *(int *)(v1 + 40));
  }
  *(_DWORD *)(v1 + 40) = 0;
  *(_DWORD *)(v1 + 72) = 0;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatelliteClockData::MergePartialFromCodedStream(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatelliteClockData *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  uint64_t v4 = (CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatelliteClockData *)((char *)this + 32);
  while (1)
  {
LABEL_2:
    uint64_t v5 = (char *)*((void *)a2 + 1);
    if ((unint64_t)v5 < *((void *)a2 + 2) && (*v5 & 0x80000000) == 0)
    {
      unint64_t TagFallback = *v5;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((void *)a2 + 1) = v5 + 1;
      if (!TagFallback) {
        return 1;
      }
      goto LABEL_7;
    }
    unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
    *((_DWORD *)a2 + 8) = TagFallback;
    if (!TagFallback) {
      return 1;
    }
LABEL_7:
    switch(TagFallback >> 3)
    {
      case 1u:
        int v7 = TagFallback & 7;
        if (v7 != 2) {
          goto LABEL_24;
        }
        *((_DWORD *)this + 18) |= 1u;
        int v8 = (CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SvId *)*((void *)this + 1);
        if (!v8) {
          operator new();
        }
        unsigned int v48 = 0;
        uint64_t v9 = (char *)*((void *)a2 + 1);
        if ((unint64_t)v9 >= *((void *)a2 + 2) || *v9 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v48))return 0; {
        }
          }
        else
        {
          unsigned int v48 = *v9;
          *((void *)a2 + 1) = v9 + 1;
        }
        int v10 = *((_DWORD *)a2 + 14);
        int v11 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v10 + 1;
        if (v10 >= v11) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SvId::MergePartialFromCodedStream(v8, a2)|| !*((unsigned char *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        int v12 = *((_DWORD *)a2 + 14);
        BOOL v13 = __OFSUB__(v12, 1);
        int v14 = v12 - 1;
        if (v14 < 0 == v13) {
          *((_DWORD *)a2 + 14) = v14;
        }
        unsigned int v15 = (unsigned char *)*((void *)a2 + 1);
        if ((unint64_t)v15 >= *((void *)a2 + 2) || *v15 != 18) {
          continue;
        }
        *((void *)a2 + 1) = v15 + 1;
        goto LABEL_36;
      case 2u:
        int v7 = TagFallback & 7;
        if (v7 != 2) {
          goto LABEL_24;
        }
LABEL_36:
        *((_DWORD *)this + 18) |= 2u;
        uint64_t v16 = (CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatellitePolynomialClock *)*((void *)this + 2);
        if (!v16) {
          operator new();
        }
        unsigned int v48 = 0;
        uint64_t v17 = (char *)*((void *)a2 + 1);
        if ((unint64_t)v17 >= *((void *)a2 + 2) || *v17 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v48))return 0; {
        }
          }
        else
        {
          unsigned int v48 = *v17;
          *((void *)a2 + 1) = v17 + 1;
        }
        int v18 = *((_DWORD *)a2 + 14);
        int v19 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v18 + 1;
        if (v18 >= v19) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatellitePolynomialClock::MergePartialFromCodedStream(v16, a2)|| !*((unsigned char *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        int v20 = *((_DWORD *)a2 + 14);
        BOOL v13 = __OFSUB__(v20, 1);
        int v21 = v20 - 1;
        if (v21 < 0 == v13) {
          *((_DWORD *)a2 + 14) = v21;
        }
        uint64_t v22 = (unsigned char *)*((void *)a2 + 1);
        if ((unint64_t)v22 >= *((void *)a2 + 2) || *v22 != 26) {
          continue;
        }
        *((void *)a2 + 1) = v22 + 1;
LABEL_50:
        *((_DWORD *)this + 18) |= 4u;
        uint64_t v23 = (CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatellitePolynomialClock *)*((void *)this + 3);
        if (!v23) {
          operator new();
        }
        unsigned int v48 = 0;
        uint64_t v24 = (char *)*((void *)a2 + 1);
        if ((unint64_t)v24 >= *((void *)a2 + 2) || *v24 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v48))return 0; {
        }
          }
        else
        {
          unsigned int v48 = *v24;
          *((void *)a2 + 1) = v24 + 1;
        }
        int v25 = *((_DWORD *)a2 + 14);
        int v26 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v25 + 1;
        if (v25 >= v26) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatellitePolynomialClock::MergePartialFromCodedStream(v23, a2)|| !*((unsigned char *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        int v27 = *((_DWORD *)a2 + 14);
        BOOL v13 = __OFSUB__(v27, 1);
        int v28 = v27 - 1;
        if (v28 < 0 == v13) {
          *((_DWORD *)a2 + 14) = v28;
        }
        uint64_t v29 = (unsigned char *)*((void *)a2 + 1);
        if ((unint64_t)v29 >= *((void *)a2 + 2) || *v29 != 34) {
          continue;
        }
        do
        {
          *((void *)a2 + 1) = v29 + 1;
LABEL_64:
          int v30 = *((_DWORD *)this + 11);
          uint64_t v31 = *((int *)this + 10);
          if ((int)v31 >= v30)
          {
            if (v30 == *((_DWORD *)this + 12))
            {
              wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v4);
              int v30 = *((_DWORD *)this + 11);
            }
            *((_DWORD *)this + 11) = v30 + 1;
            operator new();
          }
          uint64_t v32 = *((void *)this + 4);
          *((_DWORD *)this + 10) = v31 + 1;
          uint64_t v33 = *(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatelliteGroupDelay **)(v32 + 8 * v31);
          unsigned int v48 = 0;
          uint64_t v34 = (char *)*((void *)a2 + 1);
          if ((unint64_t)v34 >= *((void *)a2 + 2) || *v34 < 0)
          {
            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v48))return 0; {
          }
            }
          else
          {
            unsigned int v48 = *v34;
            *((void *)a2 + 1) = v34 + 1;
          }
          int v35 = *((_DWORD *)a2 + 14);
          int v36 = *((_DWORD *)a2 + 15);
          *((_DWORD *)a2 + 14) = v35 + 1;
          if (v35 >= v36) {
            return 0;
          }
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
          if (!CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatelliteGroupDelay::MergePartialFromCodedStream(v33, a2)|| !*((unsigned char *)a2 + 36))
          {
            return 0;
          }
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
          int v37 = *((_DWORD *)a2 + 14);
          BOOL v13 = __OFSUB__(v37, 1);
          int v38 = v37 - 1;
          if (v38 < 0 == v13) {
            *((_DWORD *)a2 + 14) = v38;
          }
          uint64_t v29 = (unsigned char *)*((void *)a2 + 1);
          if ((unint64_t)v29 >= *((void *)a2 + 2)) {
            goto LABEL_2;
          }
          int v39 = *v29;
        }
        while (v39 == 34);
        if (v39 != 42) {
          continue;
        }
        *((void *)a2 + 1) = v29 + 1;
LABEL_82:
        *((_DWORD *)this + 18) |= 0x10u;
        v40 = (CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GpsTime *)*((void *)this + 7);
        if (!v40) {
          operator new();
        }
        unsigned int v48 = 0;
        v41 = (char *)*((void *)a2 + 1);
        if ((unint64_t)v41 >= *((void *)a2 + 2) || *v41 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v48))return 0; {
        }
          }
        else
        {
          unsigned int v48 = *v41;
          *((void *)a2 + 1) = v41 + 1;
        }
        int v42 = *((_DWORD *)a2 + 14);
        int v43 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v42 + 1;
        if (v42 >= v43) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GpsTime::MergePartialFromCodedStream(v40, a2)|| !*((unsigned char *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        int v44 = *((_DWORD *)a2 + 14);
        BOOL v13 = __OFSUB__(v44, 1);
        int v45 = v44 - 1;
        if (v45 < 0 == v13) {
          *((_DWORD *)a2 + 14) = v45;
        }
        int v46 = (unsigned char *)*((void *)a2 + 1);
        if ((unint64_t)v46 >= *((void *)a2 + 2) || *v46 != 53) {
          continue;
        }
        *((void *)a2 + 1) = v46 + 1;
LABEL_96:
        unsigned int v48 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(a2, &v48) & 1) == 0) {
          return 0;
        }
        *((_DWORD *)this + 16) = v48;
        *((_DWORD *)this + 18) |= 0x20u;
        if (*((void *)a2 + 1) == *((void *)a2 + 2)
          && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
        {
          *((_DWORD *)a2 + 8) = 0;
          uint64_t result = 1;
          *((unsigned char *)a2 + 36) = 1;
          return result;
        }
        break;
      case 3u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_50;
        }
        goto LABEL_24;
      case 4u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_64;
        }
        goto LABEL_24;
      case 5u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_82;
        }
        goto LABEL_24;
      case 6u:
        int v7 = TagFallback & 7;
        if (v7 != 5) {
          goto LABEL_24;
        }
        goto LABEL_96;
      default:
        int v7 = TagFallback & 7;
LABEL_24:
        if (v7 == 4) {
          return 1;
        }
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0; {
        continue;
        }
    }
  }
}

uint64_t CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatelliteClockData::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  int v6 = *(_DWORD *)(this + 72);
  if (v6)
  {
    uint64_t v7 = *(void *)(this + 8);
    if (!v7)
    {
      CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::protobuf_AddDesc_CoreNavigationCLPRavenGnssAssistanceFile_2eproto((CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile *)this);
      uint64_t v7 = *(void *)(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatelliteClockData::default_instance_ + 8);
    }
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v7, a2, a4);
    int v6 = *(_DWORD *)(v5 + 72);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_14;
      }
      goto LABEL_11;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t v8 = *(void *)(v5 + 16);
  if (!v8)
  {
    CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::protobuf_AddDesc_CoreNavigationCLPRavenGnssAssistanceFile_2eproto((CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile *)this);
    uint64_t v8 = *(void *)(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatelliteClockData::default_instance_ + 16);
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v8, a2, a4);
  if ((*(_DWORD *)(v5 + 72) & 4) != 0)
  {
LABEL_11:
    uint64_t v9 = *(void *)(v5 + 24);
    if (!v9)
    {
      CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::protobuf_AddDesc_CoreNavigationCLPRavenGnssAssistanceFile_2eproto((CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile *)this);
      uint64_t v9 = *(void *)(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatelliteClockData::default_instance_ + 24);
    }
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v9, a2, a4);
  }
LABEL_14:
  if (*(int *)(v5 + 40) >= 1)
  {
    uint64_t v10 = 0;
    do
      this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(void *)(*(void *)(v5 + 32) + 8 * v10++), a2, a4);
    while (v10 < *(int *)(v5 + 40));
  }
  int v11 = *(_DWORD *)(v5 + 72);
  if ((v11 & 0x10) == 0)
  {
    if ((v11 & 0x20) == 0) {
      return this;
    }
    goto LABEL_23;
  }
  uint64_t v12 = *(void *)(v5 + 56);
  if (!v12)
  {
    CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::protobuf_AddDesc_CoreNavigationCLPRavenGnssAssistanceFile_2eproto((CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile *)this);
    uint64_t v12 = *(void *)(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatelliteClockData::default_instance_ + 56);
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, v12, a2, a4);
  if ((*(_DWORD *)(v5 + 72) & 0x20) != 0)
  {
LABEL_23:
    float v13 = *(float *)(v5 + 64);
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, (uint64_t)a2, v13, a3);
  }
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatelliteClockData::ByteSize(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatelliteClockData *this)
{
  int v2 = *((unsigned __int8 *)this + 72);
  if (*((unsigned char *)this + 72))
  {
    if (v2)
    {
      uint64_t v4 = (CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SvId *)*((void *)this + 1);
      if (!v4)
      {
        CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::protobuf_AddDesc_CoreNavigationCLPRavenGnssAssistanceFile_2eproto(0);
        uint64_t v4 = *(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SvId **)(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatelliteClockData::default_instance_
                                                                              + 8);
      }
      uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SvId::ByteSize(v4);
      int v6 = (int)v5;
      if (v5 >= 0x80) {
        int v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5);
      }
      else {
        int v7 = 1;
      }
      int v3 = v6 + v7 + 1;
      int v2 = *((_DWORD *)this + 18);
      if ((v2 & 2) == 0)
      {
LABEL_17:
        if ((v2 & 4) != 0)
        {
          uint64_t v12 = (CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatellitePolynomialClock *)*((void *)this + 3);
          if (!v12)
          {
            CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::protobuf_AddDesc_CoreNavigationCLPRavenGnssAssistanceFile_2eproto(0);
            uint64_t v12 = *(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatellitePolynomialClock **)(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatelliteClockData::default_instance_ + 24);
          }
          float v13 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatellitePolynomialClock::ByteSize(v12);
          int v14 = (int)v13;
          if (v13 >= 0x80) {
            int v15 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v13);
          }
          else {
            int v15 = 1;
          }
          v3 += v14 + v15 + 1;
          int v2 = *((_DWORD *)this + 18);
          if ((v2 & 0x10) == 0) {
            goto LABEL_32;
          }
        }
        else if ((v2 & 0x10) == 0)
        {
LABEL_32:
          if ((v2 & 0x20) != 0) {
            int v2 = v3 + 5;
          }
          else {
            int v2 = v3;
          }
          goto LABEL_35;
        }
        uint64_t v16 = (CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GpsTime *)*((void *)this + 7);
        if (!v16)
        {
          CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::protobuf_AddDesc_CoreNavigationCLPRavenGnssAssistanceFile_2eproto(0);
          uint64_t v16 = *(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GpsTime **)(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatelliteClockData::default_instance_
                                                                                    + 56);
        }
        uint64_t v17 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GpsTime::ByteSize(v16);
        int v18 = (int)v17;
        if (v17 >= 0x80) {
          int v19 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v17);
        }
        else {
          int v19 = 1;
        }
        v3 += v18 + v19 + 1;
        int v2 = *((_DWORD *)this + 18);
        goto LABEL_32;
      }
    }
    else
    {
      int v3 = 0;
      if ((v2 & 2) == 0) {
        goto LABEL_17;
      }
    }
    uint64_t v8 = (CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatellitePolynomialClock *)*((void *)this + 2);
    if (!v8)
    {
      CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::protobuf_AddDesc_CoreNavigationCLPRavenGnssAssistanceFile_2eproto(0);
      uint64_t v8 = *(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatellitePolynomialClock **)(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatelliteClockData::default_instance_
                                                                                                + 16);
    }
    uint64_t v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatellitePolynomialClock::ByteSize(v8);
    int v10 = (int)v9;
    if (v9 >= 0x80) {
      int v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9);
    }
    else {
      int v11 = 1;
    }
    v3 += v10 + v11 + 1;
    int v2 = *((_DWORD *)this + 18);
    goto LABEL_17;
  }
LABEL_35:
  int v20 = *((_DWORD *)this + 10);
  uint64_t v21 = (v20 + v2);
  if (v20 >= 1)
  {
    uint64_t v22 = 0;
    do
    {
      uint64_t v23 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatelliteGroupDelay::ByteSize(*(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatelliteGroupDelay **)(*((void *)this + 4) + 8 * v22));
      int v24 = (int)v23;
      if (v23 >= 0x80) {
        int v25 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v23);
      }
      else {
        int v25 = 1;
      }
      uint64_t v21 = (v24 + v21 + v25);
      ++v22;
    }
    while (v22 < *((int *)this + 10));
  }
  *((_DWORD *)this + 17) = v21;
  return v21;
}

float CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatelliteClockData::CheckTypeAndMergeFrom(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatelliteClockData *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  return CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatelliteClockData::MergeFrom(this, lpsrc);
}

float CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatelliteClockData::CopyFrom(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatelliteClockData *this, const CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatelliteClockData *a2)
{
  if (a2 != this)
  {
    (*(void (**)(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatelliteClockData *))(*(void *)this + 32))(this);
    return CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatelliteClockData::MergeFrom(this, a2);
  }
  return result;
}

uint64_t CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatelliteClockData::IsInitialized(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatelliteClockData *this)
{
  return 1;
}

float CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatelliteClockData::Swap(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatelliteClockData *this, CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatelliteClockData *a2)
{
  if (a2 != this)
  {
    uint64_t v4 = *((void *)this + 1);
    *((void *)this + 1) = *((void *)a2 + 1);
    *((void *)a2 + 1) = v4;
    uint64_t v5 = *((void *)this + 2);
    *((void *)this + 2) = *((void *)a2 + 2);
    *((void *)a2 + 2) = v5;
    uint64_t v6 = *((void *)this + 3);
    *((void *)this + 3) = *((void *)a2 + 3);
    *((void *)a2 + 3) = v6;
    wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Swap();
    uint64_t v7 = *((void *)this + 7);
    *((void *)this + 7) = *((void *)a2 + 7);
    *((void *)a2 + 7) = v7;
    float result = *((float *)this + 16);
    *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
    *((float *)a2 + 16) = result;
    LODWORD(v7) = *((_DWORD *)this + 18);
    *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
    *((_DWORD *)a2 + 18) = v7;
    LODWORD(v7) = *((_DWORD *)this + 17);
    *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
    *((_DWORD *)a2 + 17) = v7;
  }
  return result;
}

void *CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatelliteClockData::GetTypeName@<X0>(void *a1@<X8>)
{
  return sub_18DEDE7B0(a1, "CoreNavigation.CLP.LogEntry.RavenGnssAssistanceFile.SatelliteClockData");
}

uint64_t CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GnssToGpsTimeOffset::SharedCtor(uint64_t this)
{
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(_DWORD *)(this + 32) = 0;
  *(void *)(this + 24) = 0;
  return this;
}

CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GnssToGpsTimeOffset *CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GnssToGpsTimeOffset::GnssToGpsTimeOffset(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GnssToGpsTimeOffset *this, const CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GnssToGpsTimeOffset *a2)
{
  *(void *)this = &unk_1EDD104C0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GnssToGpsTimeOffset::MergeFrom(this, a2);
  return this;
}

void sub_18DFB3838(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

float CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GnssToGpsTimeOffset::MergeFrom(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GnssToGpsTimeOffset *this, const CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GnssToGpsTimeOffset *a2)
{
  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }
  LOBYTE(v5) = *((unsigned char *)a2 + 32);
  if ((_BYTE)v5)
  {
    if (*((unsigned char *)a2 + 32))
    {
      *((_DWORD *)this + 8) |= 1u;
      uint64_t v6 = (CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GpsTime *)*((void *)this + 1);
      if (!v6) {
        operator new();
      }
      uint64_t v7 = (const CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GpsTime *)*((void *)a2 + 1);
      if (!v7)
      {
        CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::protobuf_AddDesc_CoreNavigationCLPRavenGnssAssistanceFile_2eproto(this);
        uint64_t v7 = *(const CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GpsTime **)(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GnssToGpsTimeOffset::default_instance_
                                                                                       + 8);
      }
      float result = CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GpsTime::MergeFrom(v6, v7);
      int v5 = *((_DWORD *)a2 + 8);
    }
    if ((v5 & 2) != 0)
    {
      unsigned int v8 = *((_DWORD *)a2 + 4);
      if (v8 >= 5) {
        __assert_rtn("set_constellation", "CoreNavigationCLPRavenGnssAssistanceFile.pb.h", 1833, "::CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::Constellation_IsValid(value)");
      }
      *((_DWORD *)this + 8) |= 2u;
      *((_DWORD *)this + 4) = v8;
      int v5 = *((_DWORD *)a2 + 8);
    }
    if ((v5 & 4) != 0)
    {
      float result = *((float *)a2 + 5);
      *((_DWORD *)this + 8) |= 4u;
      *((float *)this + 5) = result;
      int v5 = *((_DWORD *)a2 + 8);
    }
    if ((v5 & 8) != 0)
    {
      float result = *((float *)a2 + 6);
      *((_DWORD *)this + 8) |= 8u;
      *((float *)this + 6) = result;
    }
  }
  return result;
}

void sub_18DFB39C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GnssToGpsTimeOffset::~GnssToGpsTimeOffset(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GnssToGpsTimeOffset *this)
{
  *(void *)this = &unk_1EDD104C0;
  CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GnssToGpsTimeOffset::SharedDtor(this);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  uint64_t vars8;

  CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GnssToGpsTimeOffset::~GnssToGpsTimeOffset(this);

  JUMPOUT(0x192FA6240);
}

void CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GnssToGpsTimeOffset::SharedDtor(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GnssToGpsTimeOffset *this)
{
  CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::protobuf_AddDesc_CoreNavigationCLPRavenGnssAssistanceFile_2eproto(this);
  if ((CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GnssToGpsTimeOffset *)CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GnssToGpsTimeOffset::default_instance_ != this)
  {
    uint64_t v2 = *((void *)this + 1);
    if (v2)
    {
      int v3 = *(void (**)(void))(*(void *)v2 + 8);
      v3();
    }
  }
}

uint64_t CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GnssToGpsTimeOffset::default_instance(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GnssToGpsTimeOffset *this)
{
  return CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GnssToGpsTimeOffset::default_instance_;
}

uint64_t CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GnssToGpsTimeOffset::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 28) = a2;
  return this;
}

void CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GnssToGpsTimeOffset::New(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GnssToGpsTimeOffset *this)
{
}

uint64_t CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GnssToGpsTimeOffset::Clear(uint64_t this)
{
  if (*(unsigned char *)(this + 32))
  {
    if (*(unsigned char *)(this + 32))
    {
      uint64_t v1 = *(void *)(this + 8);
      if (v1)
      {
        if (*(unsigned char *)(v1 + 20)) {
          *(void *)(v1 + 8) = 0;
        }
        *(_DWORD *)(v1 + 20) = 0;
      }
    }
    *(_DWORD *)(this + 24) = 0;
    *(void *)(this + 16) = 0;
  }
  *(_DWORD *)(this + 32) = 0;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GnssToGpsTimeOffset::MergePartialFromCodedStream(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GnssToGpsTimeOffset *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  while (2)
  {
    uint64_t v4 = (char *)*((void *)a2 + 1);
    if ((unint64_t)v4 >= *((void *)a2 + 2) || *v4 < 0)
    {
      unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      if (!TagFallback) {
        return 1;
      }
    }
    else
    {
      unint64_t TagFallback = *v4;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((void *)a2 + 1) = v4 + 1;
      if (!TagFallback) {
        return 1;
      }
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        int v6 = TagFallback & 7;
        if (v6 != 2) {
          goto LABEL_19;
        }
        *((_DWORD *)this + 8) |= 1u;
        uint64_t v7 = (CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GpsTime *)*((void *)this + 1);
        if (!v7) {
          operator new();
        }
        unsigned int v21 = 0;
        unsigned int v8 = (char *)*((void *)a2 + 1);
        if ((unint64_t)v8 >= *((void *)a2 + 2) || *v8 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v21))return 0; {
        }
          }
        else
        {
          unsigned int v21 = *v8;
          *((void *)a2 + 1) = v8 + 1;
        }
        int v11 = *((_DWORD *)a2 + 14);
        int v12 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v11 + 1;
        if (v11 >= v12) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GpsTime::MergePartialFromCodedStream(v7, a2)|| !*((unsigned char *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        int v13 = *((_DWORD *)a2 + 14);
        BOOL v14 = __OFSUB__(v13, 1);
        int v15 = v13 - 1;
        if (v15 < 0 == v14) {
          *((_DWORD *)a2 + 14) = v15;
        }
        uint64_t v16 = (unsigned char *)*((void *)a2 + 1);
        unint64_t v9 = *((void *)a2 + 2);
        if ((unint64_t)v16 >= v9 || *v16 != 16) {
          continue;
        }
        int v10 = v16 + 1;
        *((void *)a2 + 1) = v10;
        goto LABEL_31;
      case 2u:
        int v6 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_19;
        }
        int v10 = (char *)*((void *)a2 + 1);
        unint64_t v9 = *((void *)a2 + 2);
LABEL_31:
        unsigned int v21 = 0;
        if ((unint64_t)v10 >= v9 || *v10 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v21);
          if (!result) {
            return result;
          }
          unsigned int v17 = v21;
        }
        else
        {
          unsigned int v17 = *v10;
          *((void *)a2 + 1) = v10 + 1;
        }
        if (v17 <= 4)
        {
          *((_DWORD *)this + 8) |= 2u;
          *((_DWORD *)this + 4) = v17;
        }
        int v19 = (unsigned char *)*((void *)a2 + 1);
        if ((unint64_t)v19 >= *((void *)a2 + 2) || *v19 != 29) {
          continue;
        }
        *((void *)a2 + 1) = v19 + 1;
LABEL_41:
        unsigned int v21 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(a2, &v21) & 1) == 0) {
          return 0;
        }
        *((_DWORD *)this + 5) = v21;
        *((_DWORD *)this + 8) |= 4u;
        int v20 = (unsigned char *)*((void *)a2 + 1);
        if ((unint64_t)v20 >= *((void *)a2 + 2) || *v20 != 37) {
          continue;
        }
        *((void *)a2 + 1) = v20 + 1;
LABEL_45:
        unsigned int v21 = 0;
        if (wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(a2, &v21))
        {
          *((_DWORD *)this + 6) = v21;
          *((_DWORD *)this + 8) |= 8u;
          if (*((void *)a2 + 1) == *((void *)a2 + 2)
            && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
          {
            *((_DWORD *)a2 + 8) = 0;
            uint64_t result = 1;
            *((unsigned char *)a2 + 36) = 1;
            return result;
          }
          continue;
        }
        return 0;
      case 3u:
        int v6 = TagFallback & 7;
        if (v6 == 5) {
          goto LABEL_41;
        }
        goto LABEL_19;
      case 4u:
        int v6 = TagFallback & 7;
        if (v6 != 5) {
          goto LABEL_19;
        }
        goto LABEL_45;
      default:
        int v6 = TagFallback & 7;
LABEL_19:
        if (v6 == 4) {
          return 1;
        }
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0; {
        continue;
        }
    }
  }
}

uint64_t CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GnssToGpsTimeOffset::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  int v6 = *(_DWORD *)(this + 32);
  if (v6)
  {
    uint64_t v7 = *(void *)(this + 8);
    if (!v7)
    {
      CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::protobuf_AddDesc_CoreNavigationCLPRavenGnssAssistanceFile_2eproto((CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile *)this);
      uint64_t v7 = *(void *)(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GnssToGpsTimeOffset::default_instance_ + 8);
    }
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v7, a2, a4);
    int v6 = *(_DWORD *)(v5 + 32);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
LABEL_10:
      this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, (uint64_t)a2, *(float *)(v5 + 20), a3);
      if ((*(_DWORD *)(v5 + 32) & 8) == 0) {
        return this;
      }
      goto LABEL_11;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(unsigned int *)(v5 + 16), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 32);
  if ((v6 & 4) != 0) {
    goto LABEL_10;
  }
LABEL_4:
  if ((v6 & 8) == 0) {
    return this;
  }
LABEL_11:
  float v8 = *(float *)(v5 + 24);

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, (uint64_t)a2, v8, a3);
}

uint64_t CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GnssToGpsTimeOffset::ByteSize(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GnssToGpsTimeOffset *this)
{
  LOBYTE(v2) = *((unsigned char *)this + 32);
  if (!(_BYTE)v2)
  {
    uint64_t result = 0;
    goto LABEL_23;
  }
  if (*((unsigned char *)this + 32))
  {
    uint64_t v5 = (CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GpsTime *)*((void *)this + 1);
    if (!v5)
    {
      CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::protobuf_AddDesc_CoreNavigationCLPRavenGnssAssistanceFile_2eproto(0);
      uint64_t v5 = *(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GpsTime **)(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GnssToGpsTimeOffset::default_instance_
                                                                               + 8);
    }
    int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GpsTime::ByteSize(v5);
    int v7 = (int)v6;
    if (v6 >= 0x80) {
      int v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6);
    }
    else {
      int v8 = 1;
    }
    int v3 = v7 + v8 + 1;
    int v2 = *((_DWORD *)this + 8);
    if ((v2 & 2) == 0) {
      goto LABEL_18;
    }
  }
  else
  {
    int v3 = 0;
    if ((*((unsigned char *)this + 32) & 2) == 0) {
      goto LABEL_18;
    }
  }
  unint64_t v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 4);
  if ((v9 & 0x80000000) != 0)
  {
    int v10 = 11;
  }
  else if (v9 >= 0x80)
  {
    int v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9) + 1;
    int v2 = *((_DWORD *)this + 8);
  }
  else
  {
    int v10 = 2;
  }
  v3 += v10;
LABEL_18:
  unsigned int v11 = v3 + 5;
  if ((v2 & 4) == 0) {
    unsigned int v11 = v3;
  }
  if ((v2 & 8) != 0) {
    uint64_t result = v11 + 5;
  }
  else {
    uint64_t result = v11;
  }
LABEL_23:
  *((_DWORD *)this + 7) = result;
  return result;
}

float CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GnssToGpsTimeOffset::CheckTypeAndMergeFrom(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GnssToGpsTimeOffset *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  return CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GnssToGpsTimeOffset::MergeFrom(this, lpsrc);
}

float CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GnssToGpsTimeOffset::CopyFrom(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GnssToGpsTimeOffset *this, const CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GnssToGpsTimeOffset *a2)
{
  if (a2 != this)
  {
    (*(void (**)(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GnssToGpsTimeOffset *))(*(void *)this + 32))(this);
    return CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GnssToGpsTimeOffset::MergeFrom(this, a2);
  }
  return result;
}

uint64_t CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GnssToGpsTimeOffset::IsInitialized(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GnssToGpsTimeOffset *this)
{
  return 1;
}

float CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GnssToGpsTimeOffset::Swap(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GnssToGpsTimeOffset *this, CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GnssToGpsTimeOffset *a2)
{
  if (a2 != this)
  {
    uint64_t v2 = *((void *)this + 1);
    *((void *)this + 1) = *((void *)a2 + 1);
    *((void *)a2 + 1) = v2;
    LODWORD(v2) = *((_DWORD *)this + 4);
    *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
    *((_DWORD *)a2 + 4) = v2;
    int v3 = *((_DWORD *)this + 5);
    *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
    *((_DWORD *)a2 + 5) = v3;
    float result = *((float *)this + 6);
    *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
    *((float *)a2 + 6) = result;
    LODWORD(v2) = *((_DWORD *)this + 8);
    *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
    *((_DWORD *)a2 + 8) = v2;
    LODWORD(v2) = *((_DWORD *)this + 7);
    *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
    *((_DWORD *)a2 + 7) = v2;
  }
  return result;
}

void *CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GnssToGpsTimeOffset::GetTypeName@<X0>(void *a1@<X8>)
{
  return sub_18DEDE7B0(a1, "CoreNavigation.CLP.LogEntry.RavenGnssAssistanceFile.GnssToGpsTimeOffset");
}

double CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SpaceWeatherStatus::SharedCtor(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SpaceWeatherStatus *this)
{
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 4) = -1;
  double result = 0.0;
  *(void *)((char *)this + 20) = 0;
  *(void *)((char *)this + 28) = 0xFFFFFFFFLL;
  *(void *)((char *)this + 36) = 0;
  *((_DWORD *)this + 11) = 0;
  *((_DWORD *)this + 12) = 0;
  return result;
}

CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SpaceWeatherStatus *CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SpaceWeatherStatus::SpaceWeatherStatus(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SpaceWeatherStatus *this, const CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SpaceWeatherStatus *a2)
{
  *(void *)this = &unk_1EDD10448;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 4) = -1;
  *(void *)((char *)this + 20) = 0;
  *(void *)((char *)this + 28) = 0xFFFFFFFFLL;
  *(void *)((char *)this + 36) = 0;
  *((_DWORD *)this + 11) = 0;
  *((_DWORD *)this + 12) = 0;
  CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SpaceWeatherStatus::MergeFrom(this, a2);
  return this;
}

void sub_18DFB42B8(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

float CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SpaceWeatherStatus::MergeFrom(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SpaceWeatherStatus *this, const CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SpaceWeatherStatus *a2)
{
  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v11);
  }
  LOBYTE(v5) = *((unsigned char *)a2 + 48);
  if (!(_BYTE)v5) {
    return result;
  }
  if (*((unsigned char *)a2 + 48))
  {
    *((_DWORD *)this + 12) |= 1u;
    int v6 = (CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GpsTime *)*((void *)this + 1);
    if (!v6) {
      operator new();
    }
    int v7 = (const CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GpsTime *)*((void *)a2 + 1);
    if (!v7)
    {
      CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::protobuf_AddDesc_CoreNavigationCLPRavenGnssAssistanceFile_2eproto(this);
      int v7 = *(const CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GpsTime **)(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SpaceWeatherStatus::default_instance_
                                                                                     + 8);
    }
    float result = CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GpsTime::MergeFrom(v6, v7);
    int v5 = *((_DWORD *)a2 + 12);
  }
  if ((v5 & 2) != 0)
  {
    int v8 = *((_DWORD *)a2 + 4);
    if ((v8 + 1) >= 7) {
      __assert_rtn("set_solar_radiation_storm_scale", "CoreNavigationCLPRavenGnssAssistanceFile.pb.h", 1946, "::CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::StormScale_IsValid(value)");
    }
    *((_DWORD *)this + 12) |= 2u;
    *((_DWORD *)this + 4) = v8;
    int v5 = *((_DWORD *)a2 + 12);
  }
  if ((v5 & 4) != 0)
  {
    float result = *((float *)a2 + 5);
    *((_DWORD *)this + 12) |= 4u;
    *((float *)this + 5) = result;
    int v5 = *((_DWORD *)a2 + 12);
    if ((v5 & 8) == 0)
    {
LABEL_15:
      if ((v5 & 0x10) == 0) {
        goto LABEL_16;
      }
      goto LABEL_23;
    }
  }
  else if ((v5 & 8) == 0)
  {
    goto LABEL_15;
  }
  float result = *((float *)a2 + 6);
  *((_DWORD *)this + 12) |= 8u;
  *((float *)this + 6) = result;
  int v5 = *((_DWORD *)a2 + 12);
  if ((v5 & 0x10) == 0)
  {
LABEL_16:
    if ((v5 & 0x20) == 0) {
      goto LABEL_17;
    }
LABEL_25:
    int v10 = *((_DWORD *)a2 + 8);
    *((_DWORD *)this + 12) |= 0x20u;
    *((_DWORD *)this + 8) = v10;
    int v5 = *((_DWORD *)a2 + 12);
    if ((v5 & 0x40) == 0)
    {
LABEL_18:
      if ((v5 & 0x80) == 0) {
        return result;
      }
      goto LABEL_19;
    }
    goto LABEL_26;
  }
LABEL_23:
  int v9 = *((_DWORD *)a2 + 7);
  if ((v9 + 1) >= 7) {
    __assert_rtn("set_geomagnetic_storm_scale", "CoreNavigationCLPRavenGnssAssistanceFile.pb.h", 2013, "::CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::StormScale_IsValid(value)");
  }
  *((_DWORD *)this + 12) |= 0x10u;
  *((_DWORD *)this + 7) = v9;
  int v5 = *((_DWORD *)a2 + 12);
  if ((v5 & 0x20) != 0) {
    goto LABEL_25;
  }
LABEL_17:
  if ((v5 & 0x40) == 0) {
    goto LABEL_18;
  }
LABEL_26:
  float result = *((float *)a2 + 9);
  *((_DWORD *)this + 12) |= 0x40u;
  *((float *)this + 9) = result;
  if ((*((_DWORD *)a2 + 12) & 0x80) != 0)
  {
LABEL_19:
    float result = *((float *)a2 + 10);
    *((_DWORD *)this + 12) |= 0x80u;
    *((float *)this + 10) = result;
  }
  return result;
}

void sub_18DFB44F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SpaceWeatherStatus::~SpaceWeatherStatus(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SpaceWeatherStatus *this)
{
  *(void *)this = &unk_1EDD10448;
  CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SpaceWeatherStatus::SharedDtor(this);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  uint64_t vars8;

  CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SpaceWeatherStatus::~SpaceWeatherStatus(this);

  JUMPOUT(0x192FA6240);
}

void CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SpaceWeatherStatus::SharedDtor(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SpaceWeatherStatus *this)
{
  CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::protobuf_AddDesc_CoreNavigationCLPRavenGnssAssistanceFile_2eproto(this);
  if ((CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SpaceWeatherStatus *)CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SpaceWeatherStatus::default_instance_ != this)
  {
    uint64_t v2 = *((void *)this + 1);
    if (v2)
    {
      int v3 = *(void (**)(void))(*(void *)v2 + 8);
      v3();
    }
  }
}

uint64_t CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SpaceWeatherStatus::default_instance(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SpaceWeatherStatus *this)
{
  return CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SpaceWeatherStatus::default_instance_;
}

uint64_t CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SpaceWeatherStatus::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 44) = a2;
  return this;
}

void CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SpaceWeatherStatus::New(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SpaceWeatherStatus *this)
{
}

uint64_t CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SpaceWeatherStatus::Clear(uint64_t this)
{
  if (*(unsigned char *)(this + 48))
  {
    if (*(unsigned char *)(this + 48))
    {
      uint64_t v1 = *(void *)(this + 8);
      if (v1)
      {
        if (*(unsigned char *)(v1 + 20)) {
          *(void *)(v1 + 8) = 0;
        }
        *(_DWORD *)(v1 + 20) = 0;
      }
    }
    *(_DWORD *)(this + 16) = -1;
    *(void *)(this + 20) = 0;
    *(void *)(this + 28) = 0xFFFFFFFFLL;
    *(void *)(this + 36) = 0;
  }
  *(_DWORD *)(this + 48) = 0;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SpaceWeatherStatus::MergePartialFromCodedStream(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SpaceWeatherStatus *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  uint64_t v4 = (unsigned int *)((char *)this + 32);
  while (2)
  {
    int v5 = (char *)*((void *)a2 + 1);
    if ((unint64_t)v5 >= *((void *)a2 + 2) || *v5 < 0)
    {
      unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      if (!TagFallback) {
        return 1;
      }
    }
    else
    {
      unint64_t TagFallback = *v5;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((void *)a2 + 1) = v5 + 1;
      if (!TagFallback) {
        return 1;
      }
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        int v7 = TagFallback & 7;
        if (v7 != 2) {
          goto LABEL_28;
        }
        *((_DWORD *)this + 12) |= 1u;
        int v8 = (CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GpsTime *)*((void *)this + 1);
        if (!v8) {
          operator new();
        }
        unsigned int v31 = 0;
        int v9 = (char *)*((void *)a2 + 1);
        if ((unint64_t)v9 >= *((void *)a2 + 2) || *v9 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v31))return 0; {
        }
          }
        else
        {
          unsigned int v31 = *v9;
          *((void *)a2 + 1) = v9 + 1;
        }
        int v16 = *((_DWORD *)a2 + 14);
        int v17 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v16 + 1;
        if (v16 >= v17) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GpsTime::MergePartialFromCodedStream(v8, a2)|| !*((unsigned char *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        int v18 = *((_DWORD *)a2 + 14);
        BOOL v19 = __OFSUB__(v18, 1);
        int v20 = v18 - 1;
        if (v20 < 0 == v19) {
          *((_DWORD *)a2 + 14) = v20;
        }
        unsigned int v21 = (unsigned char *)*((void *)a2 + 1);
        unint64_t v10 = *((void *)a2 + 2);
        if ((unint64_t)v21 >= v10 || *v21 != 16) {
          continue;
        }
        unsigned int v11 = v21 + 1;
        *((void *)a2 + 1) = v11;
        goto LABEL_40;
      case 2u:
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_28;
        }
        unsigned int v11 = (char *)*((void *)a2 + 1);
        unint64_t v10 = *((void *)a2 + 2);
LABEL_40:
        unsigned int v31 = 0;
        if ((unint64_t)v11 >= v10 || *v11 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v31);
          if (!result) {
            return result;
          }
          unsigned int v22 = v31;
        }
        else
        {
          unsigned int v22 = *v11;
          *((void *)a2 + 1) = v11 + 1;
        }
        if (v22 + 1 <= 6)
        {
          *((_DWORD *)this + 12) |= 2u;
          *((_DWORD *)this + 4) = v22;
        }
        int v24 = (unsigned char *)*((void *)a2 + 1);
        if ((unint64_t)v24 >= *((void *)a2 + 2) || *v24 != 29) {
          continue;
        }
        *((void *)a2 + 1) = v24 + 1;
LABEL_50:
        unsigned int v31 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(a2, &v31) & 1) == 0) {
          return 0;
        }
        *((_DWORD *)this + 5) = v31;
        *((_DWORD *)this + 12) |= 4u;
        int v25 = (unsigned char *)*((void *)a2 + 1);
        if ((unint64_t)v25 >= *((void *)a2 + 2) || *v25 != 37) {
          continue;
        }
        *((void *)a2 + 1) = v25 + 1;
LABEL_54:
        unsigned int v31 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(a2, &v31) & 1) == 0) {
          return 0;
        }
        *((_DWORD *)this + 6) = v31;
        *((_DWORD *)this + 12) |= 8u;
        int v26 = (unsigned char *)*((void *)a2 + 1);
        unint64_t v12 = *((void *)a2 + 2);
        if ((unint64_t)v26 >= v12 || *v26 != 40) {
          continue;
        }
        int v13 = v26 + 1;
        *((void *)a2 + 1) = v13;
LABEL_58:
        unsigned int v31 = 0;
        if ((unint64_t)v13 >= v12 || *v13 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v31);
          if (!result) {
            return result;
          }
          unsigned int v27 = v31;
        }
        else
        {
          unsigned int v27 = *v13;
          *((void *)a2 + 1) = v13 + 1;
        }
        if (v27 + 1 <= 6)
        {
          *((_DWORD *)this + 12) |= 0x10u;
          *((_DWORD *)this + 7) = v27;
        }
        int v28 = (unsigned char *)*((void *)a2 + 1);
        unint64_t v14 = *((void *)a2 + 2);
        if ((unint64_t)v28 >= v14 || *v28 != 48) {
          continue;
        }
        int v15 = v28 + 1;
        *((void *)a2 + 1) = v15;
LABEL_68:
        if ((unint64_t)v15 >= v14 || *v15 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v4);
          if (!result) {
            return result;
          }
          uint64_t v29 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v14 = *((void *)a2 + 2);
        }
        else
        {
          unsigned int *v4 = *v15;
          uint64_t v29 = v15 + 1;
          *((void *)a2 + 1) = v29;
        }
        *((_DWORD *)this + 12) |= 0x20u;
        if ((unint64_t)v29 >= v14 || *v29 != 61) {
          continue;
        }
        *((void *)a2 + 1) = v29 + 1;
LABEL_76:
        unsigned int v31 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(a2, &v31) & 1) == 0) {
          return 0;
        }
        *((_DWORD *)this + 9) = v31;
        *((_DWORD *)this + 12) |= 0x40u;
        int v30 = (unsigned char *)*((void *)a2 + 1);
        if ((unint64_t)v30 >= *((void *)a2 + 2) || *v30 != 69) {
          continue;
        }
        *((void *)a2 + 1) = v30 + 1;
LABEL_80:
        unsigned int v31 = 0;
        if (wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(a2, &v31))
        {
          *((_DWORD *)this + 10) = v31;
          *((_DWORD *)this + 12) |= 0x80u;
          if (*((void *)a2 + 1) == *((void *)a2 + 2)
            && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
          {
            *((_DWORD *)a2 + 8) = 0;
            uint64_t result = 1;
            *((unsigned char *)a2 + 36) = 1;
            return result;
          }
          continue;
        }
        return 0;
      case 3u:
        int v7 = TagFallback & 7;
        if (v7 == 5) {
          goto LABEL_50;
        }
        goto LABEL_28;
      case 4u:
        int v7 = TagFallback & 7;
        if (v7 == 5) {
          goto LABEL_54;
        }
        goto LABEL_28;
      case 5u:
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_28;
        }
        int v13 = (char *)*((void *)a2 + 1);
        unint64_t v12 = *((void *)a2 + 2);
        goto LABEL_58;
      case 6u:
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_28;
        }
        int v15 = (char *)*((void *)a2 + 1);
        unint64_t v14 = *((void *)a2 + 2);
        goto LABEL_68;
      case 7u:
        int v7 = TagFallback & 7;
        if (v7 == 5) {
          goto LABEL_76;
        }
        goto LABEL_28;
      case 8u:
        int v7 = TagFallback & 7;
        if (v7 != 5) {
          goto LABEL_28;
        }
        goto LABEL_80;
      default:
        int v7 = TagFallback & 7;
LABEL_28:
        if (v7 == 4) {
          return 1;
        }
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0; {
        continue;
        }
    }
  }
}

uint64_t CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SpaceWeatherStatus::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  int v6 = *(_DWORD *)(this + 48);
  if (v6)
  {
    uint64_t v7 = *(void *)(this + 8);
    if (!v7)
    {
      CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::protobuf_AddDesc_CoreNavigationCLPRavenGnssAssistanceFile_2eproto((CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile *)this);
      uint64_t v7 = *(void *)(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SpaceWeatherStatus::default_instance_ + 8);
    }
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v7, a2, a4);
    int v6 = *(_DWORD *)(v5 + 48);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(unsigned int *)(v5 + 16), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 48);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, (uint64_t)a2, *(float *)(v5 + 20), a3);
  int v6 = *(_DWORD *)(v5 + 48);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_15:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, (uint64_t)a2, *(float *)(v5 + 24), a3);
  int v6 = *(_DWORD *)(v5 + 48);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
LABEL_16:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(unsigned int *)(v5 + 28), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 48);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
LABEL_18:
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, (uint64_t)a2, *(float *)(v5 + 36), a3);
    if ((*(_DWORD *)(v5 + 48) & 0x80) == 0) {
      return this;
    }
    goto LABEL_19;
  }
LABEL_17:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, *(unsigned int *)(v5 + 32), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 48);
  if ((v6 & 0x40) != 0) {
    goto LABEL_18;
  }
LABEL_8:
  if ((v6 & 0x80) == 0) {
    return this;
  }
LABEL_19:
  float v8 = *(float *)(v5 + 40);

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, (uint64_t)a2, v8, a3);
}

uint64_t CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SpaceWeatherStatus::ByteSize(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SpaceWeatherStatus *this)
{
  LOBYTE(v2) = *((unsigned char *)this + 48);
  if (!(_BYTE)v2)
  {
    uint64_t result = 0;
    goto LABEL_40;
  }
  if (*((unsigned char *)this + 48))
  {
    uint64_t v5 = (CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GpsTime *)*((void *)this + 1);
    if (!v5)
    {
      CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::protobuf_AddDesc_CoreNavigationCLPRavenGnssAssistanceFile_2eproto(0);
      uint64_t v5 = *(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GpsTime **)(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SpaceWeatherStatus::default_instance_
                                                                               + 8);
    }
    int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GpsTime::ByteSize(v5);
    int v7 = (int)v6;
    if (v6 >= 0x80) {
      int v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6);
    }
    else {
      int v8 = 1;
    }
    int v3 = v7 + v8 + 1;
    int v2 = *((_DWORD *)this + 12);
    if ((v2 & 2) == 0) {
      goto LABEL_18;
    }
    goto LABEL_12;
  }
  int v3 = 0;
  if ((*((unsigned char *)this + 48) & 2) != 0)
  {
LABEL_12:
    int v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 4);
    if ((v9 & 0x80000000) != 0)
    {
      int v10 = 11;
    }
    else if (v9 >= 0x80)
    {
      int v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9) + 1;
      int v2 = *((_DWORD *)this + 12);
    }
    else
    {
      int v10 = 2;
    }
    v3 += v10;
  }
LABEL_18:
  int v11 = v3 + 5;
  if ((v2 & 4) == 0) {
    int v11 = v3;
  }
  if ((v2 & 8) != 0) {
    int v12 = v11 + 5;
  }
  else {
    int v12 = v11;
  }
  if ((v2 & 0x10) != 0)
  {
    int v13 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 7);
    if ((v13 & 0x80000000) != 0)
    {
      int v14 = 11;
    }
    else if (v13 >= 0x80)
    {
      int v14 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v13) + 1;
      int v2 = *((_DWORD *)this + 12);
    }
    else
    {
      int v14 = 2;
    }
    v12 += v14;
  }
  if ((v2 & 0x20) != 0)
  {
    int v15 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 8);
    if (v15 >= 0x80)
    {
      int v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v15) + 1;
      int v2 = *((_DWORD *)this + 12);
    }
    else
    {
      int v16 = 2;
    }
    v12 += v16;
  }
  unsigned int v17 = v12 + 5;
  if ((v2 & 0x40) == 0) {
    unsigned int v17 = v12;
  }
  if ((v2 & 0x80) != 0) {
    uint64_t result = v17 + 5;
  }
  else {
    uint64_t result = v17;
  }
LABEL_40:
  *((_DWORD *)this + 11) = result;
  return result;
}

float CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SpaceWeatherStatus::CheckTypeAndMergeFrom(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SpaceWeatherStatus *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  return CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SpaceWeatherStatus::MergeFrom(this, lpsrc);
}

float CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SpaceWeatherStatus::CopyFrom(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SpaceWeatherStatus *this, const CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SpaceWeatherStatus *a2)
{
  if (a2 != this)
  {
    (*(void (**)(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SpaceWeatherStatus *))(*(void *)this + 32))(this);
    return CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SpaceWeatherStatus::MergeFrom(this, a2);
  }
  return result;
}

uint64_t CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SpaceWeatherStatus::IsInitialized(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SpaceWeatherStatus *this)
{
  return 1;
}

float CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SpaceWeatherStatus::Swap(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SpaceWeatherStatus *this, CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SpaceWeatherStatus *a2)
{
  if (a2 != this)
  {
    uint64_t v2 = *((void *)this + 1);
    *((void *)this + 1) = *((void *)a2 + 1);
    *((void *)a2 + 1) = v2;
    LODWORD(v2) = *((_DWORD *)this + 4);
    *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
    *((_DWORD *)a2 + 4) = v2;
    int v3 = *((_DWORD *)this + 5);
    *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
    *((_DWORD *)a2 + 5) = v3;
    int v4 = *((_DWORD *)this + 6);
    *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
    *((_DWORD *)a2 + 6) = v4;
    LODWORD(v2) = *((_DWORD *)this + 7);
    *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
    *((_DWORD *)a2 + 7) = v2;
    LODWORD(v2) = *((_DWORD *)this + 8);
    *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
    *((_DWORD *)a2 + 8) = v2;
    int v5 = *((_DWORD *)this + 9);
    *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
    *((_DWORD *)a2 + 9) = v5;
    float result = *((float *)this + 10);
    *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
    *((float *)a2 + 10) = result;
    LODWORD(v2) = *((_DWORD *)this + 12);
    *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
    *((_DWORD *)a2 + 12) = v2;
    LODWORD(v2) = *((_DWORD *)this + 11);
    *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
    *((_DWORD *)a2 + 11) = v2;
  }
  return result;
}

void *CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SpaceWeatherStatus::GetTypeName@<X0>(void *a1@<X8>)
{
  return sub_18DEDE7B0(a1, "CoreNavigation.CLP.LogEntry.RavenGnssAssistanceFile.SpaceWeatherStatus");
}

uint64_t CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::IonosphereVTECModel::SharedCtor(uint64_t this)
{
  *(_DWORD *)(this + 64) = 0;
  *(void *)(this + 56) = 0;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  return this;
}

CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::IonosphereVTECModel *CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::IonosphereVTECModel::IonosphereVTECModel(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::IonosphereVTECModel *this, const CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::IonosphereVTECModel *a2)
{
  *(void *)this = &unk_1EDD10538;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 52) = 0u;
  CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::IonosphereVTECModel::MergeFrom(this, a2);
  return this;
}

void sub_18DFB50D4(_Unwind_Exception *a1)
{
  uint64_t v3 = *((void *)v1 + 5);
  if (v3) {
    MEMORY[0x192FA6220](v3, 0x1000C8052888210);
  }
  uint64_t v4 = *((void *)v1 + 3);
  if (v4) {
    MEMORY[0x192FA6220](v4, 0x1000C8052888210);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::IonosphereVTECModel::MergeFrom(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::IonosphereVTECModel *this, const CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::IonosphereVTECModel *a2)
{
  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v12);
  }
  int v4 = *((_DWORD *)a2 + 8);
  if (v4)
  {
    sub_18DF47D54((uint64_t)this + 24, *((_DWORD *)this + 8) + v4);
    memcpy((void *)(*((void *)this + 3) + 4 * *((int *)this + 8)), *((const void **)a2 + 3), 4 * *((int *)a2 + 8));
    *((_DWORD *)this + 8) += *((_DWORD *)a2 + 8);
  }
  int v5 = *((_DWORD *)a2 + 12);
  if (v5)
  {
    sub_18DF47D54((uint64_t)this + 40, *((_DWORD *)this + 12) + v5);
    memcpy((void *)(*((void *)this + 5) + 4 * *((int *)this + 12)), *((const void **)a2 + 5), 4 * *((int *)a2 + 12));
    *((_DWORD *)this + 12) += *((_DWORD *)a2 + 12);
  }
  LOBYTE(v6) = *((unsigned char *)a2 + 64);
  if (!(_BYTE)v6) {
    return;
  }
  if (*((unsigned char *)a2 + 64))
  {
    unsigned int v7 = *((_DWORD *)a2 + 2);
    if (v7 >= 3) {
      __assert_rtn("set_layer_number", "CoreNavigationCLPRavenGnssAssistanceFile.pb.h", 2106, "::CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::IonosphereLayer_IsValid(value)");
    }
    *((_DWORD *)this + 16) |= 1u;
    *((_DWORD *)this + 2) = v7;
    int v6 = *((_DWORD *)a2 + 16);
  }
  if ((v6 & 2) == 0)
  {
    if ((v6 & 4) == 0) {
      goto LABEL_13;
    }
LABEL_18:
    int v10 = *((_DWORD *)a2 + 4);
    *((_DWORD *)this + 16) |= 4u;
    *((_DWORD *)this + 4) = v10;
    int v6 = *((_DWORD *)a2 + 16);
    if ((v6 & 8) == 0)
    {
LABEL_14:
      if ((v6 & 0x40) == 0) {
        return;
      }
      goto LABEL_15;
    }
    goto LABEL_19;
  }
  int v9 = *((_DWORD *)a2 + 3);
  *((_DWORD *)this + 16) |= 2u;
  *((_DWORD *)this + 3) = v9;
  int v6 = *((_DWORD *)a2 + 16);
  if ((v6 & 4) != 0) {
    goto LABEL_18;
  }
LABEL_13:
  if ((v6 & 8) == 0) {
    goto LABEL_14;
  }
LABEL_19:
  int v11 = *((_DWORD *)a2 + 5);
  *((_DWORD *)this + 16) |= 8u;
  *((_DWORD *)this + 5) = v11;
  if ((*((_DWORD *)a2 + 16) & 0x40) != 0)
  {
LABEL_15:
    int v8 = *((_DWORD *)a2 + 14);
    *((_DWORD *)this + 16) |= 0x40u;
    *((_DWORD *)this + 14) = v8;
  }
}

void sub_18DFB52E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::IonosphereVTECModel::~IonosphereVTECModel(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::IonosphereVTECModel *this)
{
  *(void *)this = &unk_1EDD10538;
  CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::protobuf_AddDesc_CoreNavigationCLPRavenGnssAssistanceFile_2eproto(this);
  uint64_t v2 = *((void *)this + 5);
  if (v2) {
    MEMORY[0x192FA6220](v2, 0x1000C8052888210);
  }
  uint64_t v3 = *((void *)this + 3);
  if (v3) {
    MEMORY[0x192FA6220](v3, 0x1000C8052888210);
  }

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  uint64_t vars8;

  CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::IonosphereVTECModel::~IonosphereVTECModel(this);

  JUMPOUT(0x192FA6240);
}

uint64_t CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::IonosphereVTECModel::default_instance(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::IonosphereVTECModel *this)
{
  return CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::IonosphereVTECModel::default_instance_;
}

uint64_t CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::IonosphereVTECModel::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 60) = a2;
  return this;
}

void CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::IonosphereVTECModel::New(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::IonosphereVTECModel *this)
{
}

uint64_t CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::IonosphereVTECModel::Clear(uint64_t this)
{
  if (*(unsigned char *)(this + 64))
  {
    *(_DWORD *)(this + 56) = 0;
    *(void *)(this + 8) = 0;
    *(void *)(this + 16) = 0;
  }
  *(_DWORD *)(this + 32) = 0;
  *(_DWORD *)(this + 48) = 0;
  *(_DWORD *)(this + 64) = 0;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::IonosphereVTECModel::MergePartialFromCodedStream(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::IonosphereVTECModel *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  int v4 = (char *)this + 40;
  int v5 = (char *)this + 24;
  int v43 = (unsigned int *)((char *)this + 12);
  int v44 = (unsigned int *)((char *)this + 16);
  int v6 = (unsigned int *)((char *)this + 20);
LABEL_2:
  while (2)
  {
    unsigned int v7 = (char *)*((void *)a2 + 1);
    if ((unint64_t)v7 >= *((void *)a2 + 2) || *v7 < 0)
    {
      unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      if (!TagFallback) {
        return 1;
      }
    }
    else
    {
      unint64_t TagFallback = *v7;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((void *)a2 + 1) = v7 + 1;
      if (!TagFallback) {
        return 1;
      }
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        int v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_26;
        }
        v45[0] = 0;
        int v10 = (char *)*((void *)a2 + 1);
        if ((unint64_t)v10 >= *((void *)a2 + 2) || *v10 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v45);
          if (!result) {
            return result;
          }
          unsigned int v11 = v45[0];
        }
        else
        {
          unsigned int v11 = *v10;
          *((void *)a2 + 1) = v10 + 1;
        }
        if (v11 <= 2)
        {
          *((_DWORD *)this + 16) |= 1u;
          *((_DWORD *)this + 2) = v11;
        }
        unsigned int v17 = (unsigned char *)*((void *)a2 + 1);
        unint64_t v12 = *((void *)a2 + 2);
        if ((unint64_t)v17 < v12 && *v17 == 16)
        {
          int v13 = v17 + 1;
          *((void *)a2 + 1) = v13;
          goto LABEL_40;
        }
        continue;
      case 2u:
        int v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_26;
        }
        int v13 = (char *)*((void *)a2 + 1);
        unint64_t v12 = *((void *)a2 + 2);
LABEL_40:
        if ((unint64_t)v13 >= v12 || *v13 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v43);
          if (!result) {
            return result;
          }
          int v18 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v12 = *((void *)a2 + 2);
        }
        else
        {
          *int v43 = *v13;
          int v18 = v13 + 1;
          *((void *)a2 + 1) = v18;
        }
        *((_DWORD *)this + 16) |= 2u;
        if ((unint64_t)v18 >= v12 || *v18 != 24) {
          continue;
        }
        int v14 = v18 + 1;
        *((void *)a2 + 1) = v14;
LABEL_48:
        if ((unint64_t)v14 >= v12 || *v14 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v44);
          if (!result) {
            return result;
          }
          BOOL v19 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v12 = *((void *)a2 + 2);
        }
        else
        {
          unsigned int *v44 = *v14;
          BOOL v19 = v14 + 1;
          *((void *)a2 + 1) = v19;
        }
        *((_DWORD *)this + 16) |= 4u;
        if ((unint64_t)v19 >= v12 || *v19 != 32) {
          continue;
        }
        int v15 = v19 + 1;
        *((void *)a2 + 1) = v15;
LABEL_56:
        if ((unint64_t)v15 >= v12 || *v15 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v6);
          if (!result) {
            return result;
          }
          int v20 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v12 = *((void *)a2 + 2);
        }
        else
        {
          *int v6 = *v15;
          int v20 = v15 + 1;
          *((void *)a2 + 1) = v20;
        }
        *((_DWORD *)this + 16) |= 8u;
        if ((unint64_t)v20 < v12 && *v20 == 45) {
          goto LABEL_63;
        }
        continue;
      case 3u:
        int v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_26;
        }
        int v14 = (char *)*((void *)a2 + 1);
        unint64_t v12 = *((void *)a2 + 2);
        goto LABEL_48;
      case 4u:
        int v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_26;
        }
        int v15 = (char *)*((void *)a2 + 1);
        unint64_t v12 = *((void *)a2 + 2);
        goto LABEL_56;
      case 5u:
        int v9 = TagFallback & 7;
        if (v9 == 2)
        {
          uint64_t result = sub_18DF49B3C(a2, (uint64_t)v5);
          if (!result) {
            return result;
          }
          goto LABEL_80;
        }
        if (v9 != 5) {
          goto LABEL_26;
        }
        while (2)
        {
          v45[0] = 0;
          if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(a2, v45) & 1) == 0) {
            return 0;
          }
          unsigned int v21 = v45[0];
          int v22 = *((_DWORD *)this + 8);
          if (v22 == *((_DWORD *)this + 9))
          {
            sub_18DF47D54((uint64_t)v5, v22 + 1);
            int v22 = *((_DWORD *)this + 8);
          }
          uint64_t v23 = *((void *)this + 3);
          int v24 = v22 + 1;
          *((_DWORD *)this + 8) = v22 + 1;
          *(_DWORD *)(v23 + 4 * v22) = v21;
          uint64_t v25 = *((void *)a2 + 1);
          int v26 = *((_DWORD *)a2 + 4) - v25;
          if (v26 >= 1)
          {
            signed int v27 = v26 / 5u;
            int v28 = v27 >= *((_DWORD *)this + 9) - v24 ? *((_DWORD *)this + 9) - v24 : v27;
            if (v28 >= 1)
            {
              int v29 = 0;
              while (*(unsigned char *)v25 == 45)
              {
                int v30 = *(_DWORD *)(v25 + 1);
                if (v24 >= *((_DWORD *)this + 9))
                {
                  wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
                  wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
                  wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
                  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v45);
                  int v24 = *((_DWORD *)this + 8);
                  uint64_t v23 = *((void *)this + 3);
                }
                *((_DWORD *)this + 8) = v24 + 1;
                *(_DWORD *)(v23 + 4 * v24) = v30;
                ++v29;
                v25 += 5;
                ++v24;
                if (v28 == v29)
                {
                  int v29 = v28;
                  break;
                }
              }
              if (v29) {
                wireless_diagnostics::google::protobuf::io::CodedInputStream::Skip(a2);
              }
            }
          }
LABEL_80:
          int v20 = (unsigned char *)*((void *)a2 + 1);
          if ((unint64_t)v20 < *((void *)a2 + 2))
          {
            int v31 = *v20;
            if (v31 == 45)
            {
LABEL_63:
              *((void *)a2 + 1) = v20 + 1;
              continue;
            }
            if (v31 == 53) {
              goto LABEL_83;
            }
          }
          goto LABEL_2;
        }
      case 6u:
        int v9 = TagFallback & 7;
        if (v9 == 2)
        {
          uint64_t result = sub_18DF49B3C(a2, (uint64_t)v4);
          if (!result) {
            return result;
          }
          goto LABEL_100;
        }
        if (v9 != 5)
        {
LABEL_26:
          if (v9 == 4) {
            return 1;
          }
          if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0; {
          continue;
          }
        }
        while (1)
        {
          v45[0] = 0;
          if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(a2, v45) & 1) == 0) {
            return 0;
          }
          unsigned int v32 = v45[0];
          int v33 = *((_DWORD *)this + 12);
          if (v33 == *((_DWORD *)this + 13))
          {
            sub_18DF47D54((uint64_t)v4, v33 + 1);
            int v33 = *((_DWORD *)this + 12);
          }
          uint64_t v34 = *((void *)this + 5);
          int v35 = v33 + 1;
          *((_DWORD *)this + 12) = v33 + 1;
          *(_DWORD *)(v34 + 4 * v33) = v32;
          uint64_t v36 = *((void *)a2 + 1);
          int v37 = *((_DWORD *)a2 + 4) - v36;
          if (v37 >= 1)
          {
            signed int v38 = v37 / 5u;
            int v39 = v38 >= *((_DWORD *)this + 13) - v35 ? *((_DWORD *)this + 13) - v35 : v38;
            if (v39 >= 1)
            {
              int v40 = 0;
              while (*(unsigned char *)v36 == 53)
              {
                int v41 = *(_DWORD *)(v36 + 1);
                if (v35 >= *((_DWORD *)this + 13))
                {
                  wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
                  wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
                  wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
                  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v45);
                  int v35 = *((_DWORD *)this + 12);
                  uint64_t v34 = *((void *)this + 5);
                }
                *((_DWORD *)this + 12) = v35 + 1;
                *(_DWORD *)(v34 + 4 * v35) = v41;
                ++v40;
                v36 += 5;
                ++v35;
                if (v39 == v40)
                {
                  int v40 = v39;
                  break;
                }
              }
              if (v40) {
                wireless_diagnostics::google::protobuf::io::CodedInputStream::Skip(a2);
              }
            }
          }
LABEL_100:
          int v20 = (unsigned char *)*((void *)a2 + 1);
          if ((unint64_t)v20 >= *((void *)a2 + 2)) {
            goto LABEL_2;
          }
          int v42 = *v20;
          if (v42 != 53) {
            break;
          }
LABEL_83:
          *((void *)a2 + 1) = v20 + 1;
        }
        if (v42 != 61) {
          continue;
        }
        *((void *)a2 + 1) = v20 + 1;
LABEL_104:
        v45[0] = 0;
        if (wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(a2, v45))
        {
          *((_DWORD *)this + 14) = v45[0];
          *((_DWORD *)this + 16) |= 0x40u;
          if (*((void *)a2 + 1) == *((void *)a2 + 2)
            && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
          {
            *((_DWORD *)a2 + 8) = 0;
            uint64_t result = 1;
            *((unsigned char *)a2 + 36) = 1;
            return result;
          }
          continue;
        }
        return 0;
      case 7u:
        int v9 = TagFallback & 7;
        if (v9 != 5) {
          goto LABEL_26;
        }
        goto LABEL_104;
      default:
        int v9 = TagFallback & 7;
        goto LABEL_26;
    }
  }
}

void sub_18DFB5A8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::IonosphereVTECModel::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  int v6 = *(_DWORD *)(this + 64);
  if (v6)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned int *)(this + 8), (uint64_t)a2, a4);
    int v6 = *(_DWORD *)(v5 + 64);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_16;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(unsigned int *)(v5 + 12), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 64);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_16:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(unsigned int *)(v5 + 16), (uint64_t)a2, a4);
  if ((*(_DWORD *)(v5 + 64) & 8) != 0) {
LABEL_5:
  }
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(unsigned int *)(v5 + 20), (uint64_t)a2, a4);
LABEL_6:
  if (*(int *)(v5 + 32) >= 1)
  {
    uint64_t v7 = 0;
    do
      this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, (uint64_t)a2, *(float *)(*(void *)(v5 + 24) + 4 * v7++), a3);
    while (v7 < *(int *)(v5 + 32));
  }
  if (*(int *)(v5 + 48) >= 1)
  {
    uint64_t v8 = 0;
    do
      this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, (uint64_t)a2, *(float *)(*(void *)(v5 + 40) + 4 * v8++), a3);
    while (v8 < *(int *)(v5 + 48));
  }
  if ((*(unsigned char *)(v5 + 64) & 0x40) != 0)
  {
    float v9 = *(float *)(v5 + 56);
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, (uint64_t)a2, v9, a3);
  }
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::IonosphereVTECModel::ByteSize(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::IonosphereVTECModel *this)
{
  int v2 = *((unsigned __int8 *)this + 64);
  if (*((unsigned char *)this + 64))
  {
    if (v2)
    {
      int v4 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 2);
      if ((v4 & 0x80000000) != 0)
      {
        int v3 = 11;
        if ((v2 & 2) == 0) {
          goto LABEL_16;
        }
      }
      else if (v4 >= 0x80)
      {
        int v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v4) + 1;
        int v2 = *((_DWORD *)this + 16);
        if ((v2 & 2) == 0) {
          goto LABEL_16;
        }
      }
      else
      {
        int v3 = 2;
        if ((v2 & 2) == 0) {
          goto LABEL_16;
        }
      }
    }
    else
    {
      int v3 = 0;
      if ((v2 & 2) == 0) {
        goto LABEL_16;
      }
    }
    uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 3);
    if (v5 >= 0x80)
    {
      int v6 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5) + 1;
      int v2 = *((_DWORD *)this + 16);
    }
    else
    {
      int v6 = 2;
    }
    v3 += v6;
LABEL_16:
    if ((v2 & 4) != 0)
    {
      uint64_t v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 4);
      if (v7 >= 0x80)
      {
        int v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7) + 1;
        int v2 = *((_DWORD *)this + 16);
      }
      else
      {
        int v8 = 2;
      }
      v3 += v8;
      if ((v2 & 8) == 0) {
        goto LABEL_27;
      }
    }
    else if ((v2 & 8) == 0)
    {
LABEL_27:
      if ((v2 & 0x40) != 0) {
        int v2 = v3 + 5;
      }
      else {
        int v2 = v3;
      }
      goto LABEL_30;
    }
    float v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 5);
    if (v9 >= 0x80)
    {
      int v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9) + 1;
      int v2 = *((_DWORD *)this + 16);
    }
    else
    {
      int v10 = 2;
    }
    v3 += v10;
    goto LABEL_27;
  }
LABEL_30:
  uint64_t result = (5 * (*((_DWORD *)this + 12) + *((_DWORD *)this + 8)) + v2);
  *((_DWORD *)this + 15) = result;
  return result;
}

void CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::IonosphereVTECModel::CheckTypeAndMergeFrom(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::IonosphereVTECModel *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::IonosphereVTECModel::MergeFrom(this, lpsrc);
}

void CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::IonosphereVTECModel::CopyFrom(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::IonosphereVTECModel *this, const CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::IonosphereVTECModel *a2)
{
  if (a2 != this)
  {
    (*(void (**)(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::IonosphereVTECModel *))(*(void *)this + 32))(this);
    CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::IonosphereVTECModel::MergeFrom(this, a2);
  }
}

uint64_t CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::IonosphereVTECModel::IsInitialized(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::IonosphereVTECModel *this)
{
  return 1;
}

float CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::IonosphereVTECModel::Swap(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::IonosphereVTECModel *this, CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::IonosphereVTECModel *a2)
{
  if (a2 != this)
  {
    int v2 = *((_DWORD *)this + 2);
    *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
    *((_DWORD *)a2 + 2) = v2;
    int v3 = *((_DWORD *)this + 3);
    *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
    *((_DWORD *)a2 + 3) = v3;
    int v4 = *((_DWORD *)this + 4);
    *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
    *((_DWORD *)a2 + 4) = v4;
    int v5 = *((_DWORD *)this + 5);
    *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
    *((_DWORD *)a2 + 5) = v5;
    uint64_t v6 = *((void *)this + 3);
    *((void *)this + 3) = *((void *)a2 + 3);
    uint64_t v7 = *((void *)a2 + 4);
    *((void *)a2 + 3) = v6;
    uint64_t v8 = *((void *)this + 4);
    *((void *)this + 4) = v7;
    *((void *)a2 + 4) = v8;
    uint64_t v9 = *((void *)this + 5);
    *((void *)this + 5) = *((void *)a2 + 5);
    uint64_t v10 = *((void *)a2 + 6);
    *((void *)a2 + 5) = v9;
    uint64_t v11 = *((void *)this + 6);
    *((void *)this + 6) = v10;
    *((void *)a2 + 6) = v11;
    float result = *((float *)this + 14);
    *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
    *((float *)a2 + 14) = result;
    LODWORD(v9) = *((_DWORD *)this + 16);
    *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
    *((_DWORD *)a2 + 16) = v9;
    LODWORD(v9) = *((_DWORD *)this + 15);
    *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
    *((_DWORD *)a2 + 15) = v9;
  }
  return result;
}

void *CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::IonosphereVTECModel::GetTypeName@<X0>(void *a1@<X8>)
{
  return sub_18DEDE7B0(a1, "CoreNavigation.CLP.LogEntry.RavenGnssAssistanceFile.IonosphereVTECModel");
}

void *CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::IonosphereCorrections::SharedCtor(void *this)
{
  this[1] = 0;
  this[5] = 0;
  this[6] = 0;
  return this;
}

CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::IonosphereCorrections *CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::IonosphereCorrections::IonosphereCorrections(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::IonosphereCorrections *this, const CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::IonosphereCorrections *a2)
{
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  *(void *)this = &unk_1EDD10628;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::IonosphereCorrections::MergeFrom(this, a2);
  return this;
}

void sub_18DFB5F7C(_Unwind_Exception *a1)
{
  sub_18DF0C324(v1 + 2);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite((wireless_diagnostics::google::protobuf::MessageLite *)v1);
  _Unwind_Resume(a1);
}

float CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::IonosphereCorrections::MergeFrom(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::IonosphereCorrections *this, const CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::IonosphereCorrections *a2)
{
  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v16);
  }
  int v4 = (CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile *)wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::IonosphereCorrections *)((char *)this + 16));
  if (*((int *)a2 + 6) >= 1)
  {
    uint64_t v6 = 0;
    do
    {
      uint64_t v7 = *(const CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::IonosphereVTECModel **)(*((void *)a2 + 2)
                                                                                                 + 8 * v6);
      int v8 = *((_DWORD *)this + 7);
      uint64_t v9 = *((int *)this + 6);
      if ((int)v9 >= v8)
      {
        if (v8 == *((_DWORD *)this + 8))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::IonosphereCorrections *)((char *)this + 16));
          int v8 = *((_DWORD *)this + 7);
        }
        *((_DWORD *)this + 7) = v8 + 1;
        operator new();
      }
      uint64_t v10 = *((void *)this + 2);
      *((_DWORD *)this + 6) = v9 + 1;
      CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::IonosphereVTECModel::MergeFrom(*(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::IonosphereVTECModel **)(v10 + 8 * v9), v7);
      ++v6;
    }
    while (v6 < *((int *)a2 + 6));
  }
  LOBYTE(v11) = *((unsigned char *)a2 + 52);
  if ((_BYTE)v11)
  {
    if (*((unsigned char *)a2 + 52))
    {
      *((_DWORD *)this + 13) |= 1u;
      unint64_t v12 = (CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GpsTime *)*((void *)this + 1);
      if (!v12) {
        operator new();
      }
      int v13 = (const CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GpsTime *)*((void *)a2 + 1);
      if (!v13)
      {
        CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::protobuf_AddDesc_CoreNavigationCLPRavenGnssAssistanceFile_2eproto(v4);
        int v13 = *(const CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GpsTime **)(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::IonosphereCorrections::default_instance_
                                                                                        + 8);
      }
      float result = CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GpsTime::MergeFrom(v12, v13);
      int v11 = *((_DWORD *)a2 + 13);
    }
    if ((v11 & 4) != 0)
    {
      *((_DWORD *)this + 13) |= 4u;
      int v14 = (CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SpaceWeatherStatus *)*((void *)this + 5);
      if (!v14) {
        operator new();
      }
      int v15 = (const CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SpaceWeatherStatus *)*((void *)a2 + 5);
      if (!v15)
      {
        CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::protobuf_AddDesc_CoreNavigationCLPRavenGnssAssistanceFile_2eproto(v4);
        int v15 = *(const CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SpaceWeatherStatus **)(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::IonosphereCorrections::default_instance_ + 40);
      }
      return CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SpaceWeatherStatus::MergeFrom(v14, v15);
    }
  }
  return result;
}

void sub_18DFB6220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::IonosphereCorrections::~IonosphereCorrections(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::IonosphereCorrections *this)
{
  *(void *)this = &unk_1EDD10628;
  CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::IonosphereCorrections::SharedDtor(this);
  sub_18DF0C324((uint64_t *)this + 2);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  uint64_t vars8;

  CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::IonosphereCorrections::~IonosphereCorrections(this);

  JUMPOUT(0x192FA6240);
}

void CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::IonosphereCorrections::SharedDtor(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::IonosphereCorrections *this)
{
  CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::protobuf_AddDesc_CoreNavigationCLPRavenGnssAssistanceFile_2eproto(this);
  if ((CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::IonosphereCorrections *)CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::IonosphereCorrections::default_instance_ != this)
  {
    uint64_t v2 = *((void *)this + 1);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
    uint64_t v3 = *((void *)this + 5);
    if (v3)
    {
      int v4 = *(void (**)(void))(*(void *)v3 + 8);
      v4();
    }
  }
}

uint64_t CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::IonosphereCorrections::default_instance(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::IonosphereCorrections *this)
{
  return CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::IonosphereCorrections::default_instance_;
}

uint64_t CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::IonosphereCorrections::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 48) = a2;
  return this;
}

void CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::IonosphereCorrections::New(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::IonosphereCorrections *this)
{
}

uint64_t CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::IonosphereCorrections::Clear(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::IonosphereCorrections *this)
{
  LOBYTE(v2) = *((unsigned char *)this + 52);
  if ((_BYTE)v2)
  {
    if (*((unsigned char *)this + 52))
    {
      uint64_t v3 = *((void *)this + 1);
      if (v3)
      {
        if (*(unsigned char *)(v3 + 20)) {
          *(void *)(v3 + 8) = 0;
        }
        *(_DWORD *)(v3 + 20) = 0;
        int v2 = *((_DWORD *)this + 13);
      }
    }
    if ((v2 & 4) != 0)
    {
      uint64_t v4 = *((void *)this + 5);
      if (v4) {
        CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SpaceWeatherStatus::Clear(v4);
      }
    }
  }
  uint64_t result = sub_18DF0C208((uint64_t)this + 16);
  *((_DWORD *)this + 13) = 0;
  return result;
}

uint64_t CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::IonosphereCorrections::MergePartialFromCodedStream(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::IonosphereCorrections *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  uint64_t v4 = (CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::IonosphereCorrections *)((char *)this + 16);
  while (1)
  {
    while (1)
    {
LABEL_2:
      int v5 = (char *)*((void *)a2 + 1);
      if ((unint64_t)v5 >= *((void *)a2 + 2) || *v5 < 0)
      {
        unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
        *((_DWORD *)a2 + 8) = TagFallback;
        if (!TagFallback) {
          return 1;
        }
      }
      else
      {
        unint64_t TagFallback = *v5;
        *((_DWORD *)a2 + 8) = TagFallback;
        *((void *)a2 + 1) = v5 + 1;
        if (!TagFallback) {
          return 1;
        }
      }
      unsigned int v7 = TagFallback >> 3;
      if (TagFallback >> 3 != 1) {
        break;
      }
      int v8 = TagFallback & 7;
      if (v8 != 2) {
        goto LABEL_21;
      }
      *((_DWORD *)this + 13) |= 1u;
      uint64_t v9 = (CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GpsTime *)*((void *)this + 1);
      if (!v9) {
        operator new();
      }
      unsigned int v34 = 0;
      uint64_t v10 = (char *)*((void *)a2 + 1);
      if ((unint64_t)v10 >= *((void *)a2 + 2) || *v10 < 0)
      {
        if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v34)) {
          return 0;
        }
      }
      else
      {
        unsigned int v34 = *v10;
        *((void *)a2 + 1) = v10 + 1;
      }
      int v11 = *((_DWORD *)a2 + 14);
      int v12 = *((_DWORD *)a2 + 15);
      *((_DWORD *)a2 + 14) = v11 + 1;
      if (v11 >= v12) {
        return 0;
      }
      wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
      if (!CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GpsTime::MergePartialFromCodedStream(v9, a2)|| !*((unsigned char *)a2 + 36))
      {
        return 0;
      }
      wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
      int v13 = *((_DWORD *)a2 + 14);
      BOOL v14 = __OFSUB__(v13, 1);
      int v15 = v13 - 1;
      if (v15 < 0 == v14) {
        *((_DWORD *)a2 + 14) = v15;
      }
      int v16 = (unsigned char *)*((void *)a2 + 1);
      if ((unint64_t)v16 < *((void *)a2 + 2) && *v16 == 18)
      {
        while (1)
        {
          *((void *)a2 + 1) = v16 + 1;
LABEL_33:
          int v17 = *((_DWORD *)this + 7);
          uint64_t v18 = *((int *)this + 6);
          if ((int)v18 >= v17)
          {
            if (v17 == *((_DWORD *)this + 8))
            {
              wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v4);
              int v17 = *((_DWORD *)this + 7);
            }
            *((_DWORD *)this + 7) = v17 + 1;
            operator new();
          }
          uint64_t v19 = *((void *)this + 2);
          *((_DWORD *)this + 6) = v18 + 1;
          int v20 = *(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::IonosphereVTECModel **)(v19 + 8 * v18);
          unsigned int v35 = 0;
          unsigned int v21 = (char *)*((void *)a2 + 1);
          if ((unint64_t)v21 >= *((void *)a2 + 2) || *v21 < 0)
          {
            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v35))return 0; {
          }
            }
          else
          {
            unsigned int v35 = *v21;
            *((void *)a2 + 1) = v21 + 1;
          }
          int v22 = *((_DWORD *)a2 + 14);
          int v23 = *((_DWORD *)a2 + 15);
          *((_DWORD *)a2 + 14) = v22 + 1;
          if (v22 >= v23) {
            return 0;
          }
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
          if (!CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::IonosphereVTECModel::MergePartialFromCodedStream(v20, a2)|| !*((unsigned char *)a2 + 36))
          {
            return 0;
          }
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
          int v24 = *((_DWORD *)a2 + 14);
          BOOL v14 = __OFSUB__(v24, 1);
          int v25 = v24 - 1;
          if (v25 < 0 == v14) {
            *((_DWORD *)a2 + 14) = v25;
          }
          int v16 = (unsigned char *)*((void *)a2 + 1);
          if ((unint64_t)v16 >= *((void *)a2 + 2)) {
            break;
          }
          int v26 = *v16;
          if (v26 != 18)
          {
            if (v26 == 26)
            {
              *((void *)a2 + 1) = v16 + 1;
LABEL_51:
              *((_DWORD *)this + 13) |= 4u;
              signed int v27 = (CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SpaceWeatherStatus *)*((void *)this + 5);
              if (!v27) {
                operator new();
              }
              unsigned int v36 = 0;
              int v28 = (char *)*((void *)a2 + 1);
              if ((unint64_t)v28 >= *((void *)a2 + 2) || *v28 < 0)
              {
                if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v36))return 0; {
              }
                }
              else
              {
                unsigned int v36 = *v28;
                *((void *)a2 + 1) = v28 + 1;
              }
              int v29 = *((_DWORD *)a2 + 14);
              int v30 = *((_DWORD *)a2 + 15);
              *((_DWORD *)a2 + 14) = v29 + 1;
              if (v29 >= v30) {
                return 0;
              }
              wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
              if (!CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SpaceWeatherStatus::MergePartialFromCodedStream(v27, a2)|| !*((unsigned char *)a2 + 36))
              {
                return 0;
              }
              wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
              int v31 = *((_DWORD *)a2 + 14);
              BOOL v14 = __OFSUB__(v31, 1);
              int v32 = v31 - 1;
              if (v32 < 0 == v14) {
                *((_DWORD *)a2 + 14) = v32;
              }
              if (*((void *)a2 + 1) == *((void *)a2 + 2)
                && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
              {
                *((_DWORD *)a2 + 8) = 0;
                uint64_t result = 1;
                *((unsigned char *)a2 + 36) = 1;
                return result;
              }
            }
            goto LABEL_2;
          }
        }
      }
    }
    if (v7 == 2)
    {
      int v8 = TagFallback & 7;
      if (v8 != 2) {
        goto LABEL_21;
      }
      goto LABEL_33;
    }
    if (v7 == 3)
    {
      int v8 = TagFallback & 7;
      if (v8 == 2) {
        goto LABEL_51;
      }
    }
    else
    {
      int v8 = TagFallback & 7;
    }
LABEL_21:
    if (v8 == 4) {
      return 1;
    }
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0; {
  }
    }
}

uint64_t CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::IonosphereCorrections::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  if (*(unsigned char *)(this + 52))
  {
    uint64_t v6 = *(void *)(this + 8);
    if (!v6)
    {
      CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::protobuf_AddDesc_CoreNavigationCLPRavenGnssAssistanceFile_2eproto((CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile *)this);
      uint64_t v6 = *(void *)(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::IonosphereCorrections::default_instance_
                     + 8);
    }
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v6, a2, a4);
  }
  if (*(int *)(v5 + 24) >= 1)
  {
    uint64_t v7 = 0;
    do
      this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(void *)(*(void *)(v5 + 16) + 8 * v7++), a2, a4);
    while (v7 < *(int *)(v5 + 24));
  }
  if ((*(unsigned char *)(v5 + 52) & 4) != 0)
  {
    uint64_t v8 = *(void *)(v5 + 40);
    if (!v8)
    {
      CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::protobuf_AddDesc_CoreNavigationCLPRavenGnssAssistanceFile_2eproto((CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile *)this);
      uint64_t v8 = *(void *)(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::IonosphereCorrections::default_instance_
                     + 40);
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v8, a2, a4);
  }
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::IonosphereCorrections::ByteSize(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::IonosphereCorrections *this)
{
  if (!*((unsigned char *)this + 52))
  {
    int v2 = 0;
    goto LABEL_18;
  }
  if ((*((unsigned char *)this + 52) & 1) == 0)
  {
    int v2 = 0;
    if ((*((unsigned char *)this + 52) & 4) == 0) {
      goto LABEL_18;
    }
    goto LABEL_12;
  }
  uint64_t v3 = (CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GpsTime *)*((void *)this + 1);
  if (!v3)
  {
    CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::protobuf_AddDesc_CoreNavigationCLPRavenGnssAssistanceFile_2eproto(0);
    uint64_t v3 = *(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GpsTime **)(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::IonosphereCorrections::default_instance_
                                                                             + 8);
  }
  uint64_t v4 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GpsTime::ByteSize(v3);
  int v5 = (int)v4;
  if (v4 >= 0x80) {
    int v6 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v4);
  }
  else {
    int v6 = 1;
  }
  int v2 = v5 + v6 + 1;
  if ((*((_DWORD *)this + 13) & 4) != 0)
  {
LABEL_12:
    uint64_t v7 = (CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SpaceWeatherStatus *)*((void *)this + 5);
    if (!v7)
    {
      CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::protobuf_AddDesc_CoreNavigationCLPRavenGnssAssistanceFile_2eproto(0);
      uint64_t v7 = *(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SpaceWeatherStatus **)(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::IonosphereCorrections::default_instance_
                                                                                          + 40);
    }
    uint64_t v8 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SpaceWeatherStatus::ByteSize(v7);
    int v9 = (int)v8;
    if (v8 >= 0x80) {
      int v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v8);
    }
    else {
      int v10 = 1;
    }
    v2 += v9 + v10 + 1;
  }
LABEL_18:
  int v11 = *((_DWORD *)this + 6);
  uint64_t v12 = (v11 + v2);
  if (v11 >= 1)
  {
    uint64_t v13 = 0;
    do
    {
      BOOL v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::IonosphereVTECModel::ByteSize(*(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::IonosphereVTECModel **)(*((void *)this + 2) + 8 * v13));
      int v15 = (int)v14;
      if (v14 >= 0x80) {
        int v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v14);
      }
      else {
        int v16 = 1;
      }
      uint64_t v12 = (v15 + v12 + v16);
      ++v13;
    }
    while (v13 < *((int *)this + 6));
  }
  *((_DWORD *)this + 12) = v12;
  return v12;
}

float CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::IonosphereCorrections::CheckTypeAndMergeFrom(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::IonosphereCorrections *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  return CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::IonosphereCorrections::MergeFrom(this, lpsrc);
}

float CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::IonosphereCorrections::CopyFrom(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::IonosphereCorrections *this, const CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::IonosphereCorrections *a2)
{
  if (a2 != this)
  {
    (*(void (**)(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::IonosphereCorrections *))(*(void *)this + 32))(this);
    return CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::IonosphereCorrections::MergeFrom(this, a2);
  }
  return result;
}

uint64_t CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::IonosphereCorrections::IsInitialized(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::IonosphereCorrections *this)
{
  return 1;
}

CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::IonosphereCorrections *CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::IonosphereCorrections::Swap(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::IonosphereCorrections *this, CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::IonosphereCorrections *a2)
{
  if (a2 != this)
  {
    uint64_t v3 = this;
    uint64_t v4 = *((void *)this + 1);
    *((void *)this + 1) = *((void *)a2 + 1);
    *((void *)a2 + 1) = v4;
    this = (CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::IonosphereCorrections *)wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Swap();
    uint64_t v5 = *((void *)v3 + 5);
    *((void *)v3 + 5) = *((void *)a2 + 5);
    *((void *)a2 + 5) = v5;
    LODWORD(v5) = *((_DWORD *)v3 + 13);
    *((_DWORD *)v3 + 13) = *((_DWORD *)a2 + 13);
    *((_DWORD *)a2 + 13) = v5;
    LODWORD(v5) = *((_DWORD *)v3 + 12);
    *((_DWORD *)v3 + 12) = *((_DWORD *)a2 + 12);
    *((_DWORD *)a2 + 12) = v5;
  }
  return this;
}

void *CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::IonosphereCorrections::GetTypeName@<X0>(void *a1@<X8>)
{
  return sub_18DEDE7B0(a1, "CoreNavigation.CLP.LogEntry.RavenGnssAssistanceFile.IonosphereCorrections");
}

void *CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::AssistanceFileContents::SharedCtor(void *this)
{
  this[9] = 0;
  this[1] = 0;
  this[2] = 0;
  return this;
}

CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::AssistanceFileContents *CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::AssistanceFileContents::AssistanceFileContents(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::AssistanceFileContents *this, const CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::AssistanceFileContents *a2)
{
  *(void *)this = &unk_1EDD106A0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  *((_DWORD *)this + 16) = 0;
  *((void *)this + 9) = 0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *((_DWORD *)this + 10) = 0;
  CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::AssistanceFileContents::MergeFrom(this, a2);
  return this;
}

void sub_18DFB6D60(_Unwind_Exception *a1)
{
  sub_18DF0C324(v3);
  sub_18DF0C324(v2);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

float CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::AssistanceFileContents::MergeFrom(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::AssistanceFileContents *this, const CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::AssistanceFileContents *a2)
{
  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v21);
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::AssistanceFileContents *)((char *)this + 24));
  if (*((int *)a2 + 8) >= 1)
  {
    uint64_t v4 = 0;
    do
    {
      uint64_t v5 = *(const CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatelliteClockData **)(*((void *)a2 + 3)
                                                                                                + 8 * v4);
      int v6 = *((_DWORD *)this + 9);
      uint64_t v7 = *((int *)this + 8);
      if ((int)v7 >= v6)
      {
        if (v6 == *((_DWORD *)this + 10))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::AssistanceFileContents *)((char *)this + 24));
          int v6 = *((_DWORD *)this + 9);
        }
        *((_DWORD *)this + 9) = v6 + 1;
        operator new();
      }
      uint64_t v8 = *((void *)this + 3);
      *((_DWORD *)this + 8) = v7 + 1;
      CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatelliteClockData::MergeFrom(*(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatelliteClockData **)(v8 + 8 * v7), v5);
      ++v4;
    }
    while (v4 < *((int *)a2 + 8));
  }
  int v9 = (CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile *)wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::AssistanceFileContents *)((char *)this + 48));
  if (*((int *)a2 + 14) >= 1)
  {
    uint64_t v11 = 0;
    do
    {
      uint64_t v12 = *(const CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GnssToGpsTimeOffset **)(*((void *)a2 + 6)
                                                                                                  + 8 * v11);
      int v13 = *((_DWORD *)this + 15);
      uint64_t v14 = *((int *)this + 14);
      if ((int)v14 >= v13)
      {
        if (v13 == *((_DWORD *)this + 16))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::AssistanceFileContents *)((char *)this + 48));
          int v13 = *((_DWORD *)this + 15);
        }
        *((_DWORD *)this + 15) = v13 + 1;
        operator new();
      }
      uint64_t v15 = *((void *)this + 6);
      *((_DWORD *)this + 14) = v14 + 1;
      float result = CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GnssToGpsTimeOffset::MergeFrom(*(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GnssToGpsTimeOffset **)(v15 + 8 * v14), v12);
      ++v11;
    }
    while (v11 < *((int *)a2 + 14));
  }
  LOBYTE(v16) = *((unsigned char *)a2 + 76);
  if ((_BYTE)v16)
  {
    if (*((unsigned char *)a2 + 76))
    {
      *((_DWORD *)this + 19) |= 1u;
      int v17 = (CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GpsTime *)*((void *)this + 1);
      if (!v17) {
        operator new();
      }
      uint64_t v18 = (const CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GpsTime *)*((void *)a2 + 1);
      if (!v18)
      {
        CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::protobuf_AddDesc_CoreNavigationCLPRavenGnssAssistanceFile_2eproto(v9);
        uint64_t v18 = *(const CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GpsTime **)(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::AssistanceFileContents::default_instance_
                                                                                        + 8);
      }
      float result = CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GpsTime::MergeFrom(v17, v18);
      int v16 = *((_DWORD *)a2 + 19);
    }
    if ((v16 & 2) != 0)
    {
      *((_DWORD *)this + 19) |= 2u;
      uint64_t v19 = (CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::IonosphereCorrections *)*((void *)this + 2);
      if (!v19) {
        operator new();
      }
      int v20 = (const CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::IonosphereCorrections *)*((void *)a2 + 2);
      if (!v20)
      {
        CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::protobuf_AddDesc_CoreNavigationCLPRavenGnssAssistanceFile_2eproto(v9);
        int v20 = *(const CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::IonosphereCorrections **)(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::AssistanceFileContents::default_instance_ + 16);
      }
      return CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::IonosphereCorrections::MergeFrom(v19, v20);
    }
  }
  return result;
}

void sub_18DFB70E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::AssistanceFileContents::~AssistanceFileContents(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::AssistanceFileContents *this)
{
  *(void *)this = &unk_1EDD106A0;
  CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::AssistanceFileContents::SharedDtor(this);
  sub_18DF0C324((uint64_t *)this + 6);
  sub_18DF0C324((uint64_t *)this + 3);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  uint64_t vars8;

  CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::AssistanceFileContents::~AssistanceFileContents(this);

  JUMPOUT(0x192FA6240);
}

void CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::AssistanceFileContents::SharedDtor(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::AssistanceFileContents *this)
{
  CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::protobuf_AddDesc_CoreNavigationCLPRavenGnssAssistanceFile_2eproto(this);
  if ((CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::AssistanceFileContents *)CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::AssistanceFileContents::default_instance_ != this)
  {
    uint64_t v2 = *((void *)this + 1);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
    uint64_t v3 = *((void *)this + 2);
    if (v3)
    {
      uint64_t v4 = *(void (**)(void))(*(void *)v3 + 8);
      v4();
    }
  }
}

uint64_t CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::AssistanceFileContents::default_instance(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::AssistanceFileContents *this)
{
  return CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::AssistanceFileContents::default_instance_;
}

uint64_t CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::AssistanceFileContents::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 72) = a2;
  return this;
}

void CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::AssistanceFileContents::New(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::AssistanceFileContents *this)
{
}

uint64_t CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::AssistanceFileContents::Clear(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::AssistanceFileContents *this)
{
  LOBYTE(v2) = *((unsigned char *)this + 76);
  if ((_BYTE)v2)
  {
    if (*((unsigned char *)this + 76))
    {
      uint64_t v3 = *((void *)this + 1);
      if (v3)
      {
        if (*(unsigned char *)(v3 + 20)) {
          *(void *)(v3 + 8) = 0;
        }
        *(_DWORD *)(v3 + 20) = 0;
        int v2 = *((_DWORD *)this + 19);
      }
    }
    if ((v2 & 2) != 0)
    {
      uint64_t v4 = (CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::IonosphereCorrections *)*((void *)this + 2);
      if (v4) {
        CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::IonosphereCorrections::Clear(v4);
      }
    }
  }
  sub_18DF0C208((uint64_t)this + 24);
  uint64_t result = sub_18DF0C208((uint64_t)this + 48);
  *((_DWORD *)this + 19) = 0;
  return result;
}

uint64_t CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::AssistanceFileContents::MergePartialFromCodedStream(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::AssistanceFileContents *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  uint64_t v4 = (CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::AssistanceFileContents *)((char *)this + 24);
  uint64_t v5 = (CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::AssistanceFileContents *)((char *)this + 48);
  while (1)
  {
LABEL_2:
    int v6 = (char *)*((void *)a2 + 1);
    if ((unint64_t)v6 < *((void *)a2 + 2) && (*v6 & 0x80000000) == 0)
    {
      unint64_t TagFallback = *v6;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((void *)a2 + 1) = v6 + 1;
      if (!TagFallback) {
        return 1;
      }
      goto LABEL_7;
    }
    unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
    *((_DWORD *)a2 + 8) = TagFallback;
    if (!TagFallback) {
      return 1;
    }
LABEL_7:
    switch(TagFallback >> 3)
    {
      case 1u:
        int v8 = TagFallback & 7;
        if (v8 != 2) {
          goto LABEL_20;
        }
        *((_DWORD *)this + 19) |= 1u;
        int v9 = (CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GpsTime *)*((void *)this + 1);
        if (!v9) {
          operator new();
        }
        unsigned int v45 = 0;
        int v10 = (char *)*((void *)a2 + 1);
        if ((unint64_t)v10 >= *((void *)a2 + 2) || *v10 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v45))return 0; {
        }
          }
        else
        {
          unsigned int v45 = *v10;
          *((void *)a2 + 1) = v10 + 1;
        }
        int v11 = *((_DWORD *)a2 + 14);
        int v12 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v11 + 1;
        if (v11 >= v12) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GpsTime::MergePartialFromCodedStream(v9, a2)|| !*((unsigned char *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        int v13 = *((_DWORD *)a2 + 14);
        BOOL v14 = __OFSUB__(v13, 1);
        int v15 = v13 - 1;
        if (v15 < 0 == v14) {
          *((_DWORD *)a2 + 14) = v15;
        }
        int v16 = (unsigned char *)*((void *)a2 + 1);
        if ((unint64_t)v16 >= *((void *)a2 + 2) || *v16 != 18) {
          continue;
        }
        *((void *)a2 + 1) = v16 + 1;
        goto LABEL_32;
      case 2u:
        int v8 = TagFallback & 7;
        if (v8 != 2) {
          goto LABEL_20;
        }
LABEL_32:
        *((_DWORD *)this + 19) |= 2u;
        int v17 = (CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::IonosphereCorrections *)*((void *)this + 2);
        if (!v17) {
          operator new();
        }
        unsigned int v45 = 0;
        uint64_t v18 = (char *)*((void *)a2 + 1);
        if ((unint64_t)v18 >= *((void *)a2 + 2) || *v18 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v45))return 0; {
        }
          }
        else
        {
          unsigned int v45 = *v18;
          *((void *)a2 + 1) = v18 + 1;
        }
        int v19 = *((_DWORD *)a2 + 14);
        int v20 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v19 + 1;
        if (v19 >= v20) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::IonosphereCorrections::MergePartialFromCodedStream(v17, a2)|| !*((unsigned char *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        int v21 = *((_DWORD *)a2 + 14);
        BOOL v14 = __OFSUB__(v21, 1);
        int v22 = v21 - 1;
        if (v22 < 0 == v14) {
          *((_DWORD *)a2 + 14) = v22;
        }
        int v23 = (unsigned char *)*((void *)a2 + 1);
        if ((unint64_t)v23 < *((void *)a2 + 2) && *v23 == 26)
        {
          do
          {
            *((void *)a2 + 1) = v23 + 1;
LABEL_46:
            int v24 = *((_DWORD *)this + 9);
            uint64_t v25 = *((int *)this + 8);
            if ((int)v25 >= v24)
            {
              if (v24 == *((_DWORD *)this + 10))
              {
                wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v4);
                int v24 = *((_DWORD *)this + 9);
              }
              *((_DWORD *)this + 9) = v24 + 1;
              operator new();
            }
            uint64_t v26 = *((void *)this + 3);
            *((_DWORD *)this + 8) = v25 + 1;
            signed int v27 = *(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatelliteClockData **)(v26 + 8 * v25);
            unsigned int v45 = 0;
            int v28 = (char *)*((void *)a2 + 1);
            if ((unint64_t)v28 >= *((void *)a2 + 2) || *v28 < 0)
            {
              if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v45))return 0; {
            }
              }
            else
            {
              unsigned int v45 = *v28;
              *((void *)a2 + 1) = v28 + 1;
            }
            int v29 = *((_DWORD *)a2 + 14);
            int v30 = *((_DWORD *)a2 + 15);
            *((_DWORD *)a2 + 14) = v29 + 1;
            if (v29 >= v30) {
              return 0;
            }
            wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
            if (!CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatelliteClockData::MergePartialFromCodedStream(v27, a2)|| !*((unsigned char *)a2 + 36))
            {
              return 0;
            }
            wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
            int v31 = *((_DWORD *)a2 + 14);
            BOOL v14 = __OFSUB__(v31, 1);
            int v32 = v31 - 1;
            if (v32 < 0 == v14) {
              *((_DWORD *)a2 + 14) = v32;
            }
            int v23 = (unsigned char *)*((void *)a2 + 1);
            if ((unint64_t)v23 >= *((void *)a2 + 2)) {
              goto LABEL_2;
            }
            int v33 = *v23;
          }
          while (v33 == 26);
          if (v33 == 34)
          {
            do
            {
              *((void *)a2 + 1) = v23 + 1;
LABEL_64:
              int v34 = *((_DWORD *)this + 15);
              uint64_t v35 = *((int *)this + 14);
              if ((int)v35 >= v34)
              {
                if (v34 == *((_DWORD *)this + 16))
                {
                  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v5);
                  int v34 = *((_DWORD *)this + 15);
                }
                *((_DWORD *)this + 15) = v34 + 1;
                operator new();
              }
              uint64_t v36 = *((void *)this + 6);
              *((_DWORD *)this + 14) = v35 + 1;
              int v37 = *(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GnssToGpsTimeOffset **)(v36 + 8 * v35);
              unsigned int v45 = 0;
              signed int v38 = (char *)*((void *)a2 + 1);
              if ((unint64_t)v38 >= *((void *)a2 + 2) || *v38 < 0)
              {
                if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v45))return 0; {
              }
                }
              else
              {
                unsigned int v45 = *v38;
                *((void *)a2 + 1) = v38 + 1;
              }
              int v39 = *((_DWORD *)a2 + 14);
              int v40 = *((_DWORD *)a2 + 15);
              *((_DWORD *)a2 + 14) = v39 + 1;
              if (v39 >= v40) {
                return 0;
              }
              wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
              if (!CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GnssToGpsTimeOffset::MergePartialFromCodedStream(v37, a2)|| !*((unsigned char *)a2 + 36))
              {
                return 0;
              }
              wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
              int v41 = *((_DWORD *)a2 + 14);
              BOOL v14 = __OFSUB__(v41, 1);
              int v42 = v41 - 1;
              if (v42 < 0 == v14) {
                *((_DWORD *)a2 + 14) = v42;
              }
              int v23 = (unsigned char *)*((void *)a2 + 1);
              int v43 = (unsigned char *)*((void *)a2 + 2);
            }
            while (v23 < v43 && *v23 == 34);
            if (v23 == v43 && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
            {
              *((_DWORD *)a2 + 8) = 0;
              uint64_t result = 1;
              *((unsigned char *)a2 + 36) = 1;
              return result;
            }
          }
        }
        break;
      case 3u:
        int v8 = TagFallback & 7;
        if (v8 == 2) {
          goto LABEL_46;
        }
        goto LABEL_20;
      case 4u:
        int v8 = TagFallback & 7;
        if (v8 != 2) {
          goto LABEL_20;
        }
        goto LABEL_64;
      default:
        int v8 = TagFallback & 7;
LABEL_20:
        if (v8 == 4) {
          return 1;
        }
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0; {
        continue;
        }
    }
  }
}

uint64_t CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::AssistanceFileContents::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  int v6 = *(_DWORD *)(this + 76);
  if (v6)
  {
    uint64_t v7 = *(void *)(this + 8);
    if (!v7)
    {
      CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::protobuf_AddDesc_CoreNavigationCLPRavenGnssAssistanceFile_2eproto((CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile *)this);
      uint64_t v7 = *(void *)(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::AssistanceFileContents::default_instance_
                     + 8);
    }
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v7, a2, a4);
    int v6 = *(_DWORD *)(v5 + 76);
  }
  if ((v6 & 2) != 0)
  {
    uint64_t v8 = *(void *)(v5 + 16);
    if (!v8)
    {
      CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::protobuf_AddDesc_CoreNavigationCLPRavenGnssAssistanceFile_2eproto((CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile *)this);
      uint64_t v8 = *(void *)(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::AssistanceFileContents::default_instance_
                     + 16);
    }
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v8, a2, a4);
  }
  if (*(int *)(v5 + 32) >= 1)
  {
    uint64_t v9 = 0;
    do
      this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(void *)(*(void *)(v5 + 24) + 8 * v9++), a2, a4);
    while (v9 < *(int *)(v5 + 32));
  }
  if (*(int *)(v5 + 56) >= 1)
  {
    uint64_t v10 = 0;
    do
      this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(void *)(*(void *)(v5 + 48) + 8 * v10++), a2, a4);
    while (v10 < *(int *)(v5 + 56));
  }
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::AssistanceFileContents::ByteSize(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::AssistanceFileContents *this)
{
  if (!*((unsigned char *)this + 76))
  {
    int v2 = 0;
    goto LABEL_18;
  }
  if ((*((unsigned char *)this + 76) & 1) == 0)
  {
    int v2 = 0;
    if ((*((unsigned char *)this + 76) & 2) == 0) {
      goto LABEL_18;
    }
    goto LABEL_12;
  }
  uint64_t v3 = (CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GpsTime *)*((void *)this + 1);
  if (!v3)
  {
    CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::protobuf_AddDesc_CoreNavigationCLPRavenGnssAssistanceFile_2eproto(0);
    uint64_t v3 = *(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GpsTime **)(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::AssistanceFileContents::default_instance_
                                                                             + 8);
  }
  uint64_t v4 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GpsTime::ByteSize(v3);
  int v5 = (int)v4;
  if (v4 >= 0x80) {
    int v6 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v4);
  }
  else {
    int v6 = 1;
  }
  int v2 = v5 + v6 + 1;
  if ((*((_DWORD *)this + 19) & 2) != 0)
  {
LABEL_12:
    uint64_t v7 = (CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::IonosphereCorrections *)*((void *)this + 2);
    if (!v7)
    {
      CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::protobuf_AddDesc_CoreNavigationCLPRavenGnssAssistanceFile_2eproto(0);
      uint64_t v7 = *(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::IonosphereCorrections **)(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::AssistanceFileContents::default_instance_
                                                                                             + 16);
    }
    uint64_t v8 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::IonosphereCorrections::ByteSize(v7);
    int v9 = (int)v8;
    if (v8 >= 0x80) {
      int v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v8);
    }
    else {
      int v10 = 1;
    }
    v2 += v9 + v10 + 1;
  }
LABEL_18:
  int v11 = *((_DWORD *)this + 8);
  int v12 = v11 + v2;
  if (v11 >= 1)
  {
    uint64_t v13 = 0;
    do
    {
      BOOL v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatelliteClockData::ByteSize(*(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::SatelliteClockData **)(*((void *)this + 3) + 8 * v13));
      int v15 = (int)v14;
      if (v14 >= 0x80) {
        int v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v14);
      }
      else {
        int v16 = 1;
      }
      v12 += v15 + v16;
      ++v13;
    }
    while (v13 < *((int *)this + 8));
  }
  int v17 = *((_DWORD *)this + 14);
  uint64_t v18 = (v17 + v12);
  if (v17 >= 1)
  {
    uint64_t v19 = 0;
    do
    {
      int v20 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GnssToGpsTimeOffset::ByteSize(*(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::GnssToGpsTimeOffset **)(*((void *)this + 6) + 8 * v19));
      int v21 = (int)v20;
      if (v20 >= 0x80) {
        int v22 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v20);
      }
      else {
        int v22 = 1;
      }
      uint64_t v18 = (v21 + v18 + v22);
      ++v19;
    }
    while (v19 < *((int *)this + 14));
  }
  *((_DWORD *)this + 18) = v18;
  return v18;
}

float CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::AssistanceFileContents::CheckTypeAndMergeFrom(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::AssistanceFileContents *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  return CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::AssistanceFileContents::MergeFrom(this, lpsrc);
}

float CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::AssistanceFileContents::CopyFrom(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::AssistanceFileContents *this, const CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::AssistanceFileContents *a2)
{
  if (a2 != this)
  {
    (*(void (**)(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::AssistanceFileContents *))(*(void *)this + 32))(this);
    return CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::AssistanceFileContents::MergeFrom(this, a2);
  }
  return result;
}

uint64_t CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::AssistanceFileContents::IsInitialized(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::AssistanceFileContents *this)
{
  return 1;
}

CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::AssistanceFileContents *CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::AssistanceFileContents::Swap(CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::AssistanceFileContents *this, CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::AssistanceFileContents *a2)
{
  if (a2 != this)
  {
    uint64_t v3 = this;
    uint64_t v4 = *((void *)this + 1);
    *((void *)this + 1) = *((void *)a2 + 1);
    *((void *)a2 + 1) = v4;
    uint64_t v5 = *((void *)this + 2);
    *((void *)this + 2) = *((void *)a2 + 2);
    *((void *)a2 + 2) = v5;
    wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Swap();
    this = (CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::AssistanceFileContents *)wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Swap();
    int v6 = *((_DWORD *)v3 + 19);
    *((_DWORD *)v3 + 19) = *((_DWORD *)a2 + 19);
    *((_DWORD *)a2 + 19) = v6;
    int v7 = *((_DWORD *)v3 + 18);
    *((_DWORD *)v3 + 18) = *((_DWORD *)a2 + 18);
    *((_DWORD *)a2 + 18) = v7;
  }
  return this;
}

void *CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::AssistanceFileContents::GetTypeName@<X0>(void *a1@<X8>)
{
  return sub_18DEDE7B0(a1, "CoreNavigation.CLP.LogEntry.RavenGnssAssistanceFile.AssistanceFileContents");
}

uint64_t sub_18DFB7D84(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16);
}

uint64_t sub_18DFB7D8C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16);
}

uint64_t sub_18DFB7D94(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

uint64_t sub_18DFB7D9C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16);
}

uint64_t sub_18DFB7DA4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 68);
}

uint64_t sub_18DFB7DAC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

uint64_t sub_18DFB7DB4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 44);
}

uint64_t sub_18DFB7DBC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 60);
}

uint64_t sub_18DFB7DC4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

uint64_t sub_18DFB7DCC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 72);
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::protobuf_ShutdownFile_CoreNavigationCLPGnssMeasApi_2eproto(CoreNavigation::CLP::LogEntry::PrivateData *this)
{
  if (CoreNavigation::CLP::LogEntry::PrivateData::GlonassSlotInfo::default_instance_) {
    (*(void (**)(uint64_t))(*(void *)CoreNavigation::CLP::LogEntry::PrivateData::GlonassSlotInfo::default_instance_
  }
                                    + 8))(CoreNavigation::CLP::LogEntry::PrivateData::GlonassSlotInfo::default_instance_);
  if (CoreNavigation::CLP::LogEntry::PrivateData::GlonassId::default_instance_) {
    (*(void (**)(uint64_t))(*(void *)CoreNavigation::CLP::LogEntry::PrivateData::GlonassId::default_instance_
  }
                                    + 8))(CoreNavigation::CLP::LogEntry::PrivateData::GlonassId::default_instance_);
  if (CoreNavigation::CLP::LogEntry::PrivateData::ConstellationId::default_instance_) {
    (*(void (**)(uint64_t))(*(void *)CoreNavigation::CLP::LogEntry::PrivateData::ConstellationId::default_instance_
  }
                                    + 8))(CoreNavigation::CLP::LogEntry::PrivateData::ConstellationId::default_instance_);
  if (CoreNavigation::CLP::LogEntry::PrivateData::SvId::default_instance_) {
    (*(void (**)(uint64_t))(*(void *)CoreNavigation::CLP::LogEntry::PrivateData::SvId::default_instance_
  }
                                    + 8))(CoreNavigation::CLP::LogEntry::PrivateData::SvId::default_instance_);
  if (CoreNavigation::CLP::LogEntry::PrivateData::GpsL1SyncState::default_instance_) {
    (*(void (**)(uint64_t))(*(void *)CoreNavigation::CLP::LogEntry::PrivateData::GpsL1SyncState::default_instance_
  }
                                    + 8))(CoreNavigation::CLP::LogEntry::PrivateData::GpsL1SyncState::default_instance_);
  if (CoreNavigation::CLP::LogEntry::PrivateData::GpsL2CSyncState::default_instance_) {
    (*(void (**)(uint64_t))(*(void *)CoreNavigation::CLP::LogEntry::PrivateData::GpsL2CSyncState::default_instance_
  }
                                    + 8))(CoreNavigation::CLP::LogEntry::PrivateData::GpsL2CSyncState::default_instance_);
  if (CoreNavigation::CLP::LogEntry::PrivateData::GpsL5SyncState::default_instance_) {
    (*(void (**)(uint64_t))(*(void *)CoreNavigation::CLP::LogEntry::PrivateData::GpsL5SyncState::default_instance_
  }
                                    + 8))(CoreNavigation::CLP::LogEntry::PrivateData::GpsL5SyncState::default_instance_);
  if (CoreNavigation::CLP::LogEntry::PrivateData::GlonassL1fSyncState::default_instance_) {
    (*(void (**)(uint64_t))(*(void *)CoreNavigation::CLP::LogEntry::PrivateData::GlonassL1fSyncState::default_instance_
  }
                                    + 8))(CoreNavigation::CLP::LogEntry::PrivateData::GlonassL1fSyncState::default_instance_);
  if (CoreNavigation::CLP::LogEntry::PrivateData::BeidouB1SyncState::default_instance_) {
    (*(void (**)(uint64_t))(*(void *)CoreNavigation::CLP::LogEntry::PrivateData::BeidouB1SyncState::default_instance_
  }
                                    + 8))(CoreNavigation::CLP::LogEntry::PrivateData::BeidouB1SyncState::default_instance_);
  if (CoreNavigation::CLP::LogEntry::PrivateData::BeidouB2SyncState::default_instance_) {
    (*(void (**)(uint64_t))(*(void *)CoreNavigation::CLP::LogEntry::PrivateData::BeidouB2SyncState::default_instance_
  }
                                    + 8))(CoreNavigation::CLP::LogEntry::PrivateData::BeidouB2SyncState::default_instance_);
  if (CoreNavigation::CLP::LogEntry::PrivateData::GalileoE1SyncState::default_instance_) {
    (*(void (**)(uint64_t))(*(void *)CoreNavigation::CLP::LogEntry::PrivateData::GalileoE1SyncState::default_instance_
  }
                                    + 8))(CoreNavigation::CLP::LogEntry::PrivateData::GalileoE1SyncState::default_instance_);
  if (CoreNavigation::CLP::LogEntry::PrivateData::GalileoE5SyncState::default_instance_) {
    (*(void (**)(uint64_t))(*(void *)CoreNavigation::CLP::LogEntry::PrivateData::GalileoE5SyncState::default_instance_
  }
                                    + 8))(CoreNavigation::CLP::LogEntry::PrivateData::GalileoE5SyncState::default_instance_);
  if (CoreNavigation::CLP::LogEntry::PrivateData::SbasL1SyncState::default_instance_) {
    (*(void (**)(uint64_t))(*(void *)CoreNavigation::CLP::LogEntry::PrivateData::SbasL1SyncState::default_instance_
  }
                                    + 8))(CoreNavigation::CLP::LogEntry::PrivateData::SbasL1SyncState::default_instance_);
  if (CoreNavigation::CLP::LogEntry::PrivateData::SyncState::default_instance_) {
    (*(void (**)(uint64_t))(*(void *)CoreNavigation::CLP::LogEntry::PrivateData::SyncState::default_instance_
  }
                                    + 8))(CoreNavigation::CLP::LogEntry::PrivateData::SyncState::default_instance_);
  if (CoreNavigation::CLP::LogEntry::PrivateData::SvTime::default_instance_) {
    (*(void (**)(uint64_t))(*(void *)CoreNavigation::CLP::LogEntry::PrivateData::SvTime::default_instance_
  }
                                    + 8))(CoreNavigation::CLP::LogEntry::PrivateData::SvTime::default_instance_);
  if (CoreNavigation::CLP::LogEntry::PrivateData::FrequencyOffset::default_instance_) {
    (*(void (**)(uint64_t))(*(void *)CoreNavigation::CLP::LogEntry::PrivateData::FrequencyOffset::default_instance_
  }
                                    + 8))(CoreNavigation::CLP::LogEntry::PrivateData::FrequencyOffset::default_instance_);
  if (CoreNavigation::CLP::LogEntry::PrivateData::FrequencyOffsetFromPhaseTracking::default_instance_) {
    (*(void (**)(uint64_t))(*(void *)CoreNavigation::CLP::LogEntry::PrivateData::FrequencyOffsetFromPhaseTracking::default_instance_
  }
                                    + 8))(CoreNavigation::CLP::LogEntry::PrivateData::FrequencyOffsetFromPhaseTracking::default_instance_);
  if (CoreNavigation::CLP::LogEntry::PrivateData::PhaseTracking::default_instance_) {
    (*(void (**)(uint64_t))(*(void *)CoreNavigation::CLP::LogEntry::PrivateData::PhaseTracking::default_instance_
  }
                                    + 8))(CoreNavigation::CLP::LogEntry::PrivateData::PhaseTracking::default_instance_);
  if (CoreNavigation::CLP::LogEntry::PrivateData::SignalCorrelationPeak::default_instance_) {
    (*(void (**)(uint64_t))(*(void *)CoreNavigation::CLP::LogEntry::PrivateData::SignalCorrelationPeak::default_instance_
  }
                                    + 8))(CoreNavigation::CLP::LogEntry::PrivateData::SignalCorrelationPeak::default_instance_);
  if (CoreNavigation::CLP::LogEntry::PrivateData::FullSvTime::default_instance_) {
    (*(void (**)(uint64_t))(*(void *)CoreNavigation::CLP::LogEntry::PrivateData::FullSvTime::default_instance_
  }
                                    + 8))(CoreNavigation::CLP::LogEntry::PrivateData::FullSvTime::default_instance_);
  if (CoreNavigation::CLP::LogEntry::PrivateData::SvMeasurementUsage::default_instance_) {
    (*(void (**)(uint64_t))(*(void *)CoreNavigation::CLP::LogEntry::PrivateData::SvMeasurementUsage::default_instance_
  }
                                    + 8))(CoreNavigation::CLP::LogEntry::PrivateData::SvMeasurementUsage::default_instance_);
  if (CoreNavigation::CLP::LogEntry::PrivateData::MeasurementExtension::default_instance_) {
    (*(void (**)(uint64_t))(*(void *)CoreNavigation::CLP::LogEntry::PrivateData::MeasurementExtension::default_instance_
  }
                                    + 8))(CoreNavigation::CLP::LogEntry::PrivateData::MeasurementExtension::default_instance_);
  if (CoreNavigation::CLP::LogEntry::PrivateData::Measurement::default_instance_) {
    (*(void (**)(uint64_t))(*(void *)CoreNavigation::CLP::LogEntry::PrivateData::Measurement::default_instance_
  }
                                    + 8))(CoreNavigation::CLP::LogEntry::PrivateData::Measurement::default_instance_);
  if (CoreNavigation::CLP::LogEntry::PrivateData::ReceiverClockModel::default_instance_) {
    (*(void (**)(uint64_t))(*(void *)CoreNavigation::CLP::LogEntry::PrivateData::ReceiverClockModel::default_instance_
  }
                                    + 8))(CoreNavigation::CLP::LogEntry::PrivateData::ReceiverClockModel::default_instance_);
  if (CoreNavigation::CLP::LogEntry::PrivateData::ReceiverClockCorrections::default_instance_) {
    (*(void (**)(uint64_t))(*(void *)CoreNavigation::CLP::LogEntry::PrivateData::ReceiverClockCorrections::default_instance_
  }
                                    + 8))(CoreNavigation::CLP::LogEntry::PrivateData::ReceiverClockCorrections::default_instance_);
  if (CoreNavigation::CLP::LogEntry::PrivateData::ReceiverToGpsTimeConversion::default_instance_) {
    (*(void (**)(uint64_t))(*(void *)CoreNavigation::CLP::LogEntry::PrivateData::ReceiverToGpsTimeConversion::default_instance_
  }
                                    + 8))(CoreNavigation::CLP::LogEntry::PrivateData::ReceiverToGpsTimeConversion::default_instance_);
  if (CoreNavigation::CLP::LogEntry::PrivateData::Clock::default_instance_) {
    (*(void (**)(uint64_t))(*(void *)CoreNavigation::CLP::LogEntry::PrivateData::Clock::default_instance_
  }
                                    + 8))(CoreNavigation::CLP::LogEntry::PrivateData::Clock::default_instance_);
  if (CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReport::default_instance_) {
    (*(void (**)(uint64_t))(*(void *)CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReport::default_instance_
  }
                                    + 8))(CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReport::default_instance_);
  if (CoreNavigation::CLP::LogEntry::PrivateData::Wgs84Ecef::default_instance_) {
    (*(void (**)(uint64_t))(*(void *)CoreNavigation::CLP::LogEntry::PrivateData::Wgs84Ecef::default_instance_
  }
                                    + 8))(CoreNavigation::CLP::LogEntry::PrivateData::Wgs84Ecef::default_instance_);
  if (CoreNavigation::CLP::LogEntry::PrivateData::SvBandCorrections::default_instance_) {
    (*(void (**)(uint64_t))(*(void *)CoreNavigation::CLP::LogEntry::PrivateData::SvBandCorrections::default_instance_
  }
                                    + 8))(CoreNavigation::CLP::LogEntry::PrivateData::SvBandCorrections::default_instance_);
  if (CoreNavigation::CLP::LogEntry::PrivateData::SvPositionAtTime::default_instance_) {
    (*(void (**)(uint64_t))(*(void *)CoreNavigation::CLP::LogEntry::PrivateData::SvPositionAtTime::default_instance_
  }
                                    + 8))(CoreNavigation::CLP::LogEntry::PrivateData::SvPositionAtTime::default_instance_);
  if (CoreNavigation::CLP::LogEntry::PrivateData::PolynomialOrbit::default_instance_) {
    (*(void (**)(uint64_t))(*(void *)CoreNavigation::CLP::LogEntry::PrivateData::PolynomialOrbit::default_instance_
  }
                                    + 8))(CoreNavigation::CLP::LogEntry::PrivateData::PolynomialOrbit::default_instance_);
  if (CoreNavigation::CLP::LogEntry::PrivateData::SvInfo::default_instance_) {
    (*(void (**)(uint64_t))(*(void *)CoreNavigation::CLP::LogEntry::PrivateData::SvInfo::default_instance_
  }
                                    + 8))(CoreNavigation::CLP::LogEntry::PrivateData::SvInfo::default_instance_);
  if (CoreNavigation::CLP::LogEntry::PrivateData::ReceiverBandCorrections::default_instance_) {
    (*(void (**)(uint64_t))(*(void *)CoreNavigation::CLP::LogEntry::PrivateData::ReceiverBandCorrections::default_instance_
  }
                                    + 8))(CoreNavigation::CLP::LogEntry::PrivateData::ReceiverBandCorrections::default_instance_);
  if (CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondChange::default_instance_) {
    (*(void (**)(uint64_t))(*(void *)CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondChange::default_instance_
  }
                                    + 8))(CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondChange::default_instance_);
  if (CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondInfo::default_instance_) {
    (*(void (**)(uint64_t))(*(void *)CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondInfo::default_instance_
  }
                                    + 8))(CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondInfo::default_instance_);
  if (CoreNavigation::CLP::LogEntry::PrivateData::GpsToUtcConversion::default_instance_) {
    (*(void (**)(uint64_t))(*(void *)CoreNavigation::CLP::LogEntry::PrivateData::GpsToUtcConversion::default_instance_
  }
                                    + 8))(CoreNavigation::CLP::LogEntry::PrivateData::GpsToUtcConversion::default_instance_);
  if (CoreNavigation::CLP::LogEntry::PrivateData::GpsTimeInfo::default_instance_) {
    (*(void (**)(uint64_t))(*(void *)CoreNavigation::CLP::LogEntry::PrivateData::GpsTimeInfo::default_instance_
  }
                                    + 8))(CoreNavigation::CLP::LogEntry::PrivateData::GpsTimeInfo::default_instance_);
  if (CoreNavigation::CLP::LogEntry::PrivateData::GlonassSubsecondConversion::default_instance_) {
    (*(void (**)(uint64_t))(*(void *)CoreNavigation::CLP::LogEntry::PrivateData::GlonassSubsecondConversion::default_instance_
  }
                                    + 8))(CoreNavigation::CLP::LogEntry::PrivateData::GlonassSubsecondConversion::default_instance_);
  if (CoreNavigation::CLP::LogEntry::PrivateData::GlonassTimeInfo::default_instance_) {
    (*(void (**)(uint64_t))(*(void *)CoreNavigation::CLP::LogEntry::PrivateData::GlonassTimeInfo::default_instance_
  }
                                    + 8))(CoreNavigation::CLP::LogEntry::PrivateData::GlonassTimeInfo::default_instance_);
  if (CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion::default_instance_) {
    (*(void (**)(uint64_t))(*(void *)CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion::default_instance_
  }
                                    + 8))(CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion::default_instance_);
  if (CoreNavigation::CLP::LogEntry::PrivateData::BeidouTimeInfo::default_instance_) {
    (*(void (**)(uint64_t))(*(void *)CoreNavigation::CLP::LogEntry::PrivateData::BeidouTimeInfo::default_instance_
  }
                                    + 8))(CoreNavigation::CLP::LogEntry::PrivateData::BeidouTimeInfo::default_instance_);
  if (CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo::default_instance_) {
    (*(void (**)(uint64_t))(*(void *)CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo::default_instance_
  }
                                    + 8))(CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo::default_instance_);
  if (CoreNavigation::CLP::LogEntry::PrivateData::NavicTimeInfo::default_instance_) {
    (*(void (**)(uint64_t))(*(void *)CoreNavigation::CLP::LogEntry::PrivateData::NavicTimeInfo::default_instance_
  }
                                    + 8))(CoreNavigation::CLP::LogEntry::PrivateData::NavicTimeInfo::default_instance_);
  if (CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo::default_instance_) {
    (*(void (**)(uint64_t))(*(void *)CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo::default_instance_
  }
                                    + 8))(CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo::default_instance_);
  if (CoreNavigation::CLP::LogEntry::PrivateData::KlobucharModelParameters::default_instance_) {
    (*(void (**)(uint64_t))(*(void *)CoreNavigation::CLP::LogEntry::PrivateData::KlobucharModelParameters::default_instance_
  }
                                    + 8))(CoreNavigation::CLP::LogEntry::PrivateData::KlobucharModelParameters::default_instance_);
  if (CoreNavigation::CLP::LogEntry::PrivateData::SfcfXyz::default_instance_) {
    (*(void (**)(uint64_t))(*(void *)CoreNavigation::CLP::LogEntry::PrivateData::SfcfXyz::default_instance_
  }
                                    + 8))(CoreNavigation::CLP::LogEntry::PrivateData::SfcfXyz::default_instance_);
  if (CoreNavigation::CLP::LogEntry::PrivateData::AntennaPhaseCenterSvOffset::default_instance_) {
    (*(void (**)(uint64_t))(*(void *)CoreNavigation::CLP::LogEntry::PrivateData::AntennaPhaseCenterSvOffset::default_instance_
  }
                                    + 8))(CoreNavigation::CLP::LogEntry::PrivateData::AntennaPhaseCenterSvOffset::default_instance_);
  if (CoreNavigation::CLP::LogEntry::PrivateData::ReceivedTimeStamp::default_instance_) {
    (*(void (**)(uint64_t))(*(void *)CoreNavigation::CLP::LogEntry::PrivateData::ReceivedTimeStamp::default_instance_
  }
                                    + 8))(CoreNavigation::CLP::LogEntry::PrivateData::ReceivedTimeStamp::default_instance_);
  uint64_t result = CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents::default_instance_;
  if (CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents::default_instance_)
  {
    uint64_t v2 = *(uint64_t (**)(void))(*(void *)CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents::default_instance_
                             + 8);
    return v2();
  }
  return result;
}

void CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto_impl(CoreNavigation::CLP::LogEntry::PrivateData *this, uint64_t a2, uint64_t a3, const char *a4)
{
}

void *CoreNavigation::CLP::LogEntry::PrivateData::GlonassSlotInfo::GlonassSlotInfo(void *this)
{
  this[1] = 0;
  this[2] = 0;
  *this = &unk_1EDD0C410;
  return this;
}

{
  this[1] = 0;
  this[2] = 0;
  *this = &unk_1EDD0C410;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::GlonassId::GlonassId(uint64_t this)
{
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)this = &unk_1EDD0EFA8;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

{
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)this = &unk_1EDD0EFA8;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

double CoreNavigation::CLP::LogEntry::PrivateData::ConstellationId::ConstellationId(CoreNavigation::CLP::LogEntry::PrivateData::ConstellationId *this)
{
  *(void *)this = &unk_1EDD0C2A8;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((void *)this + 5) = 0;
  return result;
}

{
  double result;

  *(void *)this = &unk_1EDD0C2A8;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((void *)this + 5) = 0;
  return result;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::SvId::SvId(uint64_t this)
{
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)this = &unk_1EDD0EA80;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

{
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)this = &unk_1EDD0EA80;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::GpsL1SyncState::GpsL1SyncState(uint64_t this)
{
  *(void *)this = &unk_1EDD0BD80;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

{
  *(void *)this = &unk_1EDD0BD80;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::GpsL2CSyncState::GpsL2CSyncState(uint64_t this)
{
  *(void *)this = &unk_1EDD0C500;
  *(void *)(this + 16) = 0;
  *(_DWORD *)(this + 8) = 0;
  *(unsigned char *)(this + 12) = 0;
  return this;
}

{
  *(void *)this = &unk_1EDD0C500;
  *(void *)(this + 16) = 0;
  *(_DWORD *)(this + 8) = 0;
  *(unsigned char *)(this + 12) = 0;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::GpsL5SyncState::GpsL5SyncState(uint64_t this)
{
  *(void *)this = &unk_1EDD0BDF8;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

{
  *(void *)this = &unk_1EDD0BDF8;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::GlonassL1fSyncState::GlonassL1fSyncState(uint64_t this)
{
  *(void *)this = &unk_1EDD0D5E0;
  *(void *)(this + 16) = 0;
  *(_DWORD *)(this + 8) = 0;
  *(unsigned char *)(this + 12) = 0;
  return this;
}

{
  *(void *)this = &unk_1EDD0D5E0;
  *(void *)(this + 16) = 0;
  *(_DWORD *)(this + 8) = 0;
  *(unsigned char *)(this + 12) = 0;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::BeidouB1SyncState::BeidouB1SyncState(uint64_t this)
{
  *(void *)this = &unk_1EDD0CAA0;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

{
  *(void *)this = &unk_1EDD0CAA0;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::BeidouB2SyncState::BeidouB2SyncState(uint64_t this)
{
  *(void *)this = &unk_1EDD0CB18;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

{
  *(void *)this = &unk_1EDD0CB18;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::GalileoE1SyncState::GalileoE1SyncState(uint64_t this)
{
  *(void *)this = &unk_1EDD0D1A8;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

{
  *(void *)this = &unk_1EDD0D1A8;
  *(void *)(this + 8) = 0;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::GalileoE5SyncState::GalileoE5SyncState(uint64_t this)
{
  *(_DWORD *)(this + 20) = 0;
  *(_DWORD *)(this + 24) = 0;
  *(void *)this = &unk_1EDD0D220;
  *(void *)(this + 8) = 0;
  *(_WORD *)(this + 16) = 0;
  return this;
}

{
  *(_DWORD *)(this + 20) = 0;
  *(_DWORD *)(this + 24) = 0;
  *(void *)this = &unk_1EDD0D220;
  *(void *)(this + 8) = 0;
  *(_WORD *)(this + 16) = 0;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::SbasL1SyncState::SbasL1SyncState(uint64_t this)
{
  *(void *)this = &unk_1EDD0C5F0;
  *(_WORD *)(this + 8) = 0;
  *(unsigned char *)(this + 10) = 0;
  *(_DWORD *)(this + 12) = 0;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

{
  *(void *)this = &unk_1EDD0C5F0;
  *(_WORD *)(this + 8) = 0;
  *(unsigned char *)(this + 10) = 0;
  *(_DWORD *)(this + 12) = 0;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

double CoreNavigation::CLP::LogEntry::PrivateData::SyncState::SyncState(CoreNavigation::CLP::LogEntry::PrivateData::SyncState *this)
{
  *(void *)this = &unk_1EDD0F188;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 84) = 0u;
  return result;
}

{
  double result;

  *(void *)this = &unk_1EDD0F188;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 84) = 0u;
  return result;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::SvTime::SvTime(uint64_t this)
{
  *(_DWORD *)(this + 28) = 0;
  *(_DWORD *)(this + 32) = 0;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)this = &unk_1EDD0ED50;
  *(unsigned char *)(this + 24) = 0;
  return this;
}

{
  *(_DWORD *)(this + 28) = 0;
  *(_DWORD *)(this + 32) = 0;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)this = &unk_1EDD0ED50;
  *(unsigned char *)(this + 24) = 0;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::FrequencyOffset::FrequencyOffset(uint64_t this)
{
  *(_DWORD *)(this + 28) = 0;
  *(_DWORD *)(this + 32) = 0;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)this = &unk_1EDD0C320;
  *(unsigned char *)(this + 24) = 0;
  return this;
}

{
  *(_DWORD *)(this + 28) = 0;
  *(_DWORD *)(this + 32) = 0;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)this = &unk_1EDD0C320;
  *(unsigned char *)(this + 24) = 0;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::FrequencyOffsetFromPhaseTracking::FrequencyOffsetFromPhaseTracking(uint64_t this)
{
  *(_DWORD *)(this + 28) = 0;
  *(_DWORD *)(this + 32) = 0;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)this = &unk_1EDD0E648;
  *(_WORD *)(this + 24) = 0;
  return this;
}

{
  *(_DWORD *)(this + 28) = 0;
  *(_DWORD *)(this + 32) = 0;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)this = &unk_1EDD0E648;
  *(_WORD *)(this + 24) = 0;
  return this;
}

double CoreNavigation::CLP::LogEntry::PrivateData::PhaseTracking::PhaseTracking(CoreNavigation::CLP::LogEntry::PrivateData::PhaseTracking *this)
{
  *(void *)this = &unk_1EDD0BBA0;
  *((_DWORD *)this + 11) = 0;
  *((_DWORD *)this + 12) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((unsigned char *)this + 40) = 0;
  return result;
}

{
  double result;

  *(void *)this = &unk_1EDD0BBA0;
  *((_DWORD *)this + 11) = 0;
  *((_DWORD *)this + 12) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((unsigned char *)this + 40) = 0;
  return result;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::SignalCorrelationPeak::SignalCorrelationPeak(uint64_t this)
{
  *(void *)this = &unk_1EDD0DB80;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(void *)this = &unk_1EDD0DB80;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::FullSvTime::FullSvTime(uint64_t this)
{
  *(void *)this = &unk_1EDD0B3A8;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(void *)this = &unk_1EDD0B3A8;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::SvMeasurementUsage::SvMeasurementUsage(uint64_t this)
{
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)this = &unk_1EDD0D478;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

{
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)this = &unk_1EDD0D478;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

double CoreNavigation::CLP::LogEntry::PrivateData::MeasurementExtension::MeasurementExtension(CoreNavigation::CLP::LogEntry::PrivateData::MeasurementExtension *this)
{
  *(void *)this = &unk_1EDD0D928;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((_DWORD *)this + 26) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  uint64_t v2 = MEMORY[0x1E4FBA920];
  *(_OWORD *)((char *)this + 56) = 0u;
  *((void *)this + 9) = 0;
  *((void *)this + 10) = v2;
  *((void *)this + 14) = 0;
  return result;
}

{
  double result;
  uint64_t v2;

  *(void *)this = &unk_1EDD0D928;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((_DWORD *)this + 26) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  uint64_t v2 = MEMORY[0x1E4FBA920];
  *(_OWORD *)((char *)this + 56) = 0u;
  *((void *)this + 9) = 0;
  *((void *)this + 10) = v2;
  *((void *)this + 14) = 0;
  return result;
}

double CoreNavigation::CLP::LogEntry::PrivateData::Measurement::Measurement(CoreNavigation::CLP::LogEntry::PrivateData::Measurement *this)
{
  *(void *)this = &unk_1EDD0B6F0;
  *((_DWORD *)this + 27) = 0;
  *((_DWORD *)this + 28) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *((unsigned char *)this + 104) = 0;
  return result;
}

{
  double result;

  *(void *)this = &unk_1EDD0B6F0;
  *((_DWORD *)this + 27) = 0;
  *((_DWORD *)this + 28) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *((unsigned char *)this + 104) = 0;
  return result;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::ReceiverClockModel::ReceiverClockModel(uint64_t this)
{
  *(_DWORD *)(this + 28) = 0;
  *(_DWORD *)(this + 32) = 0;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)this = &unk_1EDD0D388;
  *(unsigned char *)(this + 24) = 0;
  return this;
}

{
  *(_DWORD *)(this + 28) = 0;
  *(_DWORD *)(this + 32) = 0;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)this = &unk_1EDD0D388;
  *(unsigned char *)(this + 24) = 0;
  return this;
}

double CoreNavigation::CLP::LogEntry::PrivateData::ReceiverClockCorrections::ReceiverClockCorrections(CoreNavigation::CLP::LogEntry::PrivateData::ReceiverClockCorrections *this)
{
  *(void *)this = &unk_1EDD0E030;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

{
  double result;

  *(void *)this = &unk_1EDD0E030;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

double CoreNavigation::CLP::LogEntry::PrivateData::ReceiverToGpsTimeConversion::ReceiverToGpsTimeConversion(CoreNavigation::CLP::LogEntry::PrivateData::ReceiverToGpsTimeConversion *this)
{
  *(void *)this = &unk_1EDD0E468;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_DWORD *)this + 10) = 0;
  return result;
}

{
  double result;

  *(void *)this = &unk_1EDD0E468;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_DWORD *)this + 10) = 0;
  return result;
}

double CoreNavigation::CLP::LogEntry::PrivateData::Clock::Clock(CoreNavigation::CLP::LogEntry::PrivateData::Clock *this)
{
  *(void *)this = &unk_1EDD0EB70;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((void *)this + 5) = 0;
  return result;
}

{
  double result;

  *(void *)this = &unk_1EDD0EB70;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((void *)this + 5) = 0;
  return result;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReport::MeasurementReport(uint64_t this)
{
  *(void *)(this + 40) = 0;
  *(void *)this = &unk_1EDD0CCF8;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(void *)(this + 40) = 0;
  *(void *)this = &unk_1EDD0CCF8;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

double CoreNavigation::CLP::LogEntry::PrivateData::Wgs84Ecef::Wgs84Ecef(CoreNavigation::CLP::LogEntry::PrivateData::Wgs84Ecef *this)
{
  *(void *)this = &unk_1EDD0F278;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

{
  double result;

  *(void *)this = &unk_1EDD0F278;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

double CoreNavigation::CLP::LogEntry::PrivateData::SvBandCorrections::SvBandCorrections(CoreNavigation::CLP::LogEntry::PrivateData::SvBandCorrections *this)
{
  *(void *)this = &unk_1EDD0CFC8;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((void *)this + 5) = 0;
  return result;
}

{
  double result;

  *(void *)this = &unk_1EDD0CFC8;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((void *)this + 5) = 0;
  return result;
}

void *CoreNavigation::CLP::LogEntry::PrivateData::SvPositionAtTime::SvPositionAtTime(void *this)
{
  *this = &unk_1EDD0C848;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

{
  *this = &unk_1EDD0C848;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

double CoreNavigation::CLP::LogEntry::PrivateData::PolynomialOrbit::PolynomialOrbit(CoreNavigation::CLP::LogEntry::PrivateData::PolynomialOrbit *this)
{
  *(void *)this = &unk_1EDD0C578;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((void *)this + 9) = 0;
  return result;
}

{
  double result;

  *(void *)this = &unk_1EDD0C578;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((void *)this + 9) = 0;
  return result;
}

double CoreNavigation::CLP::LogEntry::PrivateData::SvInfo::SvInfo(CoreNavigation::CLP::LogEntry::PrivateData::SvInfo *this)
{
  *(void *)this = &unk_1EDD0ECD8;
  double result = 0.0;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_DWORD *)this + 10) = 0;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *(_OWORD *)((char *)this + 108) = 0u;
  return result;
}

{
  double result;

  *(void *)this = &unk_1EDD0ECD8;
  double result = 0.0;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_DWORD *)this + 10) = 0;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *(_OWORD *)((char *)this + 108) = 0u;
  return result;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::ReceiverBandCorrections::ReceiverBandCorrections(uint64_t this)
{
  *(void *)this = &unk_1EDD0DEC8;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(void *)this = &unk_1EDD0DEC8;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondChange::LeapSecondChange(uint64_t this)
{
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)this = &unk_1EDD0C7D0;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

{
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)this = &unk_1EDD0C7D0;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

void *CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondInfo::LeapSecondInfo(void *this)
{
  *this = &unk_1EDD0BE70;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

{
  *this = &unk_1EDD0BE70;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

double CoreNavigation::CLP::LogEntry::PrivateData::GpsToUtcConversion::GpsToUtcConversion(CoreNavigation::CLP::LogEntry::PrivateData::GpsToUtcConversion *this)
{
  *(void *)this = &unk_1EDD0D298;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((void *)this + 5) = 0;
  return result;
}

{
  double result;

  *(void *)this = &unk_1EDD0D298;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((void *)this + 5) = 0;
  return result;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::GpsTimeInfo::GpsTimeInfo(uint64_t this)
{
  *(void *)this = &unk_1EDD0B678;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

{
  *(void *)this = &unk_1EDD0B678;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  return this;
}

void *CoreNavigation::CLP::LogEntry::PrivateData::GlonassSubsecondConversion::GlonassSubsecondConversion(void *this)
{
  *this = &unk_1EDD0E378;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

{
  *this = &unk_1EDD0E378;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

double CoreNavigation::CLP::LogEntry::PrivateData::GlonassTimeInfo::GlonassTimeInfo(CoreNavigation::CLP::LogEntry::PrivateData::GlonassTimeInfo *this)
{
  *(void *)this = &unk_1EDD0C488;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_DWORD *)this + 10) = 0;
  return result;
}

{
  double result;

  *(void *)this = &unk_1EDD0C488;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_DWORD *)this + 10) = 0;
  return result;
}

double CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion::SubSecondConversion(CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion *this)
{
  *(void *)this = &unk_1EDD0D748;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

{
  double result;

  *(void *)this = &unk_1EDD0D748;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

double CoreNavigation::CLP::LogEntry::PrivateData::BeidouTimeInfo::BeidouTimeInfo(CoreNavigation::CLP::LogEntry::PrivateData::BeidouTimeInfo *this)
{
  *(void *)this = &unk_1EDD0BC90;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  return result;
}

{
  double result;

  *(void *)this = &unk_1EDD0BC90;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  return result;
}

double CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo::GalileoTimeInfo(CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo *this)
{
  *(void *)this = &unk_1EDD0C398;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_DWORD *)this + 10) = 0;
  return result;
}

{
  double result;

  *(void *)this = &unk_1EDD0C398;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_DWORD *)this + 10) = 0;
  return result;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::NavicTimeInfo::NavicTimeInfo(uint64_t this)
{
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)this = &unk_1EDD0BB28;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

{
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(void *)this = &unk_1EDD0BB28;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

double CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo::TimeConversionInfo(CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo *this)
{
  *(void *)this = &unk_1EDD0D4F0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

{
  double result;

  *(void *)this = &unk_1EDD0D4F0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

double CoreNavigation::CLP::LogEntry::PrivateData::KlobucharModelParameters::KlobucharModelParameters(CoreNavigation::CLP::LogEntry::PrivateData::KlobucharModelParameters *this)
{
  *(void *)this = &unk_1EDD0DFB8;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

{
  double result;

  *(void *)this = &unk_1EDD0DFB8;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  return result;
}

double CoreNavigation::CLP::LogEntry::PrivateData::SfcfXyz::SfcfXyz(CoreNavigation::CLP::LogEntry::PrivateData::SfcfXyz *this)
{
  *(void *)this = &unk_1EDD0EEB8;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

{
  double result;

  *(void *)this = &unk_1EDD0EEB8;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

double CoreNavigation::CLP::LogEntry::PrivateData::AntennaPhaseCenterSvOffset::AntennaPhaseCenterSvOffset(CoreNavigation::CLP::LogEntry::PrivateData::AntennaPhaseCenterSvOffset *this)
{
  *(void *)this = &unk_1EDD0E300;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

{
  double result;

  *(void *)this = &unk_1EDD0E300;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

double CoreNavigation::CLP::LogEntry::PrivateData::ReceivedTimeStamp::ReceivedTimeStamp(CoreNavigation::CLP::LogEntry::PrivateData::ReceivedTimeStamp *this)
{
  *(void *)this = &unk_1EDD0CED8;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

{
  double result;

  *(void *)this = &unk_1EDD0CED8;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  return result;
}

double CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents::MeasurementReportCallbackContents(CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents *this)
{
  *(void *)this = &unk_1EDD0E738;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  *((_DWORD *)this + 16) = 0;
  *((void *)this + 16) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_DWORD *)this + 10) = 0;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_DWORD *)this + 30) = 0;
  return result;
}

{
  double result;

  *(void *)this = &unk_1EDD0E738;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  *((_DWORD *)this + 16) = 0;
  *((void *)this + 16) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_DWORD *)this + 10) = 0;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_DWORD *)this + 30) = 0;
  return result;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::GlonassId::InitAsDefaultInstance(uint64_t this)
{
  *(void *)(this + 8) = CoreNavigation::CLP::LogEntry::PrivateData::GlonassSlotInfo::default_instance_;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::ConstellationId::InitAsDefaultInstance(uint64_t this)
{
  *(void *)(this + 8) = CoreNavigation::CLP::LogEntry::PrivateData::GlonassId::default_instance_;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::SvId::InitAsDefaultInstance(uint64_t this)
{
  *(void *)(this + 8) = CoreNavigation::CLP::LogEntry::PrivateData::ConstellationId::default_instance_;
  return this;
}

void *CoreNavigation::CLP::LogEntry::PrivateData::SyncState::InitAsDefaultInstance(void *this)
{
  uint64_t v1 = CoreNavigation::CLP::LogEntry::PrivateData::GpsL1SyncState::default_instance_;
  uint64_t v2 = CoreNavigation::CLP::LogEntry::PrivateData::GpsL2CSyncState::default_instance_;
  this[1] = CoreNavigation::CLP::LogEntry::PrivateData::GpsL1SyncState::default_instance_;
  this[2] = v2;
  uint64_t v3 = CoreNavigation::CLP::LogEntry::PrivateData::GlonassL1fSyncState::default_instance_;
  this[3] = CoreNavigation::CLP::LogEntry::PrivateData::GpsL5SyncState::default_instance_;
  this[4] = v3;
  uint64_t v4 = CoreNavigation::CLP::LogEntry::PrivateData::BeidouB2SyncState::default_instance_;
  this[5] = CoreNavigation::CLP::LogEntry::PrivateData::BeidouB1SyncState::default_instance_;
  this[6] = v4;
  uint64_t v5 = CoreNavigation::CLP::LogEntry::PrivateData::GalileoE5SyncState::default_instance_;
  this[7] = CoreNavigation::CLP::LogEntry::PrivateData::GalileoE1SyncState::default_instance_;
  this[8] = v5;
  this[9] = CoreNavigation::CLP::LogEntry::PrivateData::SbasL1SyncState::default_instance_;
  this[10] = v1;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::SignalCorrelationPeak::InitAsDefaultInstance(uint64_t this)
{
  uint64_t v1 = CoreNavigation::CLP::LogEntry::PrivateData::FrequencyOffset::default_instance_;
  *(void *)(this + 8) = CoreNavigation::CLP::LogEntry::PrivateData::SvTime::default_instance_;
  *(void *)(this + 16) = v1;
  return this;
}

void *CoreNavigation::CLP::LogEntry::PrivateData::MeasurementExtension::InitAsDefaultInstance(void *this)
{
  uint64_t v1 = CoreNavigation::CLP::LogEntry::PrivateData::SvMeasurementUsage::default_instance_;
  this[2] = CoreNavigation::CLP::LogEntry::PrivateData::FullSvTime::default_instance_;
  this[3] = v1;
  this[4] = v1;
  this[5] = v1;
  return this;
}

void *CoreNavigation::CLP::LogEntry::PrivateData::Measurement::InitAsDefaultInstance(void *this)
{
  uint64_t v1 = CoreNavigation::CLP::LogEntry::PrivateData::SyncState::default_instance_;
  this[1] = CoreNavigation::CLP::LogEntry::PrivateData::SvId::default_instance_;
  this[2] = v1;
  uint64_t v2 = CoreNavigation::CLP::LogEntry::PrivateData::FrequencyOffset::default_instance_;
  this[6] = CoreNavigation::CLP::LogEntry::PrivateData::SvTime::default_instance_;
  this[7] = v2;
  uint64_t v3 = CoreNavigation::CLP::LogEntry::PrivateData::MeasurementExtension::default_instance_;
  this[8] = CoreNavigation::CLP::LogEntry::PrivateData::PhaseTracking::default_instance_;
  this[9] = v3;
  uint64_t v4 = CoreNavigation::CLP::LogEntry::PrivateData::FrequencyOffsetFromPhaseTracking::default_instance_;
  this[11] = v2;
  this[12] = v4;
  return this;
}

void *CoreNavigation::CLP::LogEntry::PrivateData::Clock::InitAsDefaultInstance(void *this)
{
  uint64_t v1 = CoreNavigation::CLP::LogEntry::PrivateData::ReceiverClockCorrections::default_instance_;
  this[2] = CoreNavigation::CLP::LogEntry::PrivateData::ReceiverClockModel::default_instance_;
  this[3] = v1;
  this[4] = CoreNavigation::CLP::LogEntry::PrivateData::ReceiverToGpsTimeConversion::default_instance_;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReport::InitAsDefaultInstance(uint64_t this)
{
  *(void *)(this + 8) = CoreNavigation::CLP::LogEntry::PrivateData::Clock::default_instance_;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::SvPositionAtTime::InitAsDefaultInstance(uint64_t this)
{
  *(void *)(this + 16) = CoreNavigation::CLP::LogEntry::PrivateData::Wgs84Ecef::default_instance_;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::SvInfo::InitAsDefaultInstance(uint64_t this)
{
  *(void *)(this + 8) = CoreNavigation::CLP::LogEntry::PrivateData::SvId::default_instance_;
  *(void *)(this + 128) = CoreNavigation::CLP::LogEntry::PrivateData::PolynomialOrbit::default_instance_;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondInfo::InitAsDefaultInstance(uint64_t this)
{
  *(void *)(this + 16) = CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondChange::default_instance_;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::GpsTimeInfo::InitAsDefaultInstance(uint64_t this)
{
  uint64_t v1 = CoreNavigation::CLP::LogEntry::PrivateData::GpsToUtcConversion::default_instance_;
  *(void *)(this + 8) = CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondInfo::default_instance_;
  *(void *)(this + 16) = v1;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::GlonassTimeInfo::InitAsDefaultInstance(uint64_t this)
{
  uint64_t v1 = CoreNavigation::CLP::LogEntry::PrivateData::GlonassSubsecondConversion::default_instance_;
  *(void *)(this + 16) = CoreNavigation::CLP::LogEntry::PrivateData::GlonassSubsecondConversion::default_instance_;
  *(void *)(this + 24) = v1;
  return this;
}

void *CoreNavigation::CLP::LogEntry::PrivateData::BeidouTimeInfo::InitAsDefaultInstance(void *this)
{
  uint64_t v1 = CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion::default_instance_;
  this[1] = CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondInfo::default_instance_;
  this[2] = v1;
  this[3] = v1;
  this[4] = v1;
  this[5] = v1;
  return this;
}

void *CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo::InitAsDefaultInstance(void *this)
{
  uint64_t v1 = CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion::default_instance_;
  this[1] = CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondInfo::default_instance_;
  this[2] = v1;
  this[3] = v1;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::NavicTimeInfo::InitAsDefaultInstance(uint64_t this)
{
  *(void *)(this + 8) = CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion::default_instance_;
  return this;
}

void *CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo::InitAsDefaultInstance(void *this)
{
  uint64_t v1 = CoreNavigation::CLP::LogEntry::PrivateData::GlonassTimeInfo::default_instance_;
  this[1] = CoreNavigation::CLP::LogEntry::PrivateData::GpsTimeInfo::default_instance_;
  this[2] = v1;
  uint64_t v2 = CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo::default_instance_;
  this[3] = CoreNavigation::CLP::LogEntry::PrivateData::BeidouTimeInfo::default_instance_;
  this[4] = v2;
  this[5] = CoreNavigation::CLP::LogEntry::PrivateData::NavicTimeInfo::default_instance_;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::AntennaPhaseCenterSvOffset::InitAsDefaultInstance(uint64_t this)
{
  *(void *)(this + 8) = CoreNavigation::CLP::LogEntry::PrivateData::SvId::default_instance_;
  *(void *)(this + 24) = CoreNavigation::CLP::LogEntry::PrivateData::SfcfXyz::default_instance_;
  return this;
}

void *CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents::InitAsDefaultInstance(void *this)
{
  uint64_t v1 = CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReport::default_instance_;
  this[1] = CoreNavigation::CLP::LogEntry::PrivateData::ReceivedTimeStamp::default_instance_;
  this[2] = v1;
  this[9] = CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo::default_instance_;
  this[12] = CoreNavigation::CLP::LogEntry::PrivateData::KlobucharModelParameters::default_instance_;
  return this;
}

void CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(CoreNavigation::CLP::LogEntry::PrivateData *this)
{
  uint64_t v1 = CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto_once_;
  __dmb(0xBu);
  if (v1 != 2)
  {
    v2[0] = MEMORY[0x1E4FBA938] + 16;
    v2[1] = CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto_impl;
    char v3 = 0;
    wireless_diagnostics::google::protobuf::GoogleOnceInitImpl();
    wireless_diagnostics::google::protobuf::internal::FunctionClosure0::~FunctionClosure0((wireless_diagnostics::google::protobuf::internal::FunctionClosure0 *)v2);
  }
}

void sub_18DFBA4A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  wireless_diagnostics::google::protobuf::internal::FunctionClosure0::~FunctionClosure0((wireless_diagnostics::google::protobuf::internal::FunctionClosure0 *)va);
  _Unwind_Resume(a1);
}

BOOL CoreNavigation::CLP::LogEntry::PrivateData::GlonassSlotSource_IsValid(CoreNavigation::CLP::LogEntry::PrivateData *this)
{
  return this < 5;
}

BOOL CoreNavigation::CLP::LogEntry::PrivateData::SatelliteSystem_IsValid(CoreNavigation::CLP::LogEntry::PrivateData *this)
{
  unsigned int v1 = this;
  BOOL result = 1;
  if (v1 - 4 > 0x3C || ((1 << (v1 - 4)) & 0x1000000010001011) == 0) {
    return v1 < 3;
  }
  return result;
}

BOOL CoreNavigation::CLP::LogEntry::PrivateData::Band_IsValid(CoreNavigation::CLP::LogEntry::PrivateData *this)
{
  return this < 0xD;
}

BOOL CoreNavigation::CLP::LogEntry::PrivateData::FullSvTimeSource_IsValid(CoreNavigation::CLP::LogEntry::PrivateData *this)
{
  return this < 6;
}

BOOL CoreNavigation::CLP::LogEntry::PrivateData::MeasurementDetectionMethod_IsValid(CoreNavigation::CLP::LogEntry::PrivateData *this)
{
  return this < 7;
}

BOOL CoreNavigation::CLP::LogEntry::PrivateData::MultipathIndicator_IsValid(CoreNavigation::CLP::LogEntry::PrivateData *this)
{
  return this < 5;
}

BOOL CoreNavigation::CLP::LogEntry::PrivateData::SvPositionSource_IsValid(CoreNavigation::CLP::LogEntry::PrivateData *this)
{
  return this < 7;
}

BOOL CoreNavigation::CLP::LogEntry::PrivateData::SvHealthIndication_IsValid(CoreNavigation::CLP::LogEntry::PrivateData *this)
{
  return this < 5;
}

BOOL CoreNavigation::CLP::LogEntry::PrivateData::IonosphericCorrectionSource_IsValid(CoreNavigation::CLP::LogEntry::PrivateData *this)
{
  return this < 3;
}

BOOL CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondChangeKnowledge_IsValid(CoreNavigation::CLP::LogEntry::PrivateData *this)
{
  return this < 5;
}

BOOL CoreNavigation::CLP::LogEntry::PrivateData::GlonassLeapSecondDeprecated_IsValid(CoreNavigation::CLP::LogEntry::PrivateData *this)
{
  return this < 6;
}

BOOL CoreNavigation::CLP::LogEntry::PrivateData::SvReferencePoint_IsValid(CoreNavigation::CLP::LogEntry::PrivateData *this)
{
  return this < 4;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::GlonassSlotInfo::SharedCtor(uint64_t this)
{
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  return this;
}

CoreNavigation::CLP::LogEntry::PrivateData::GlonassSlotInfo *CoreNavigation::CLP::LogEntry::PrivateData::GlonassSlotInfo::GlonassSlotInfo(CoreNavigation::CLP::LogEntry::PrivateData::GlonassSlotInfo *this, const CoreNavigation::CLP::LogEntry::PrivateData::GlonassSlotInfo *a2)
{
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = &unk_1EDD0C410;
  CoreNavigation::CLP::LogEntry::PrivateData::GlonassSlotInfo::MergeFrom(this, a2);
  return this;
}

void sub_18DFBA5EC(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void CoreNavigation::CLP::LogEntry::PrivateData::GlonassSlotInfo::MergeFrom(CoreNavigation::CLP::LogEntry::PrivateData::GlonassSlotInfo *this, const CoreNavigation::CLP::LogEntry::PrivateData::GlonassSlotInfo *a2)
{
  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v7);
  }
  LOBYTE(v4) = *((unsigned char *)a2 + 20);
  if ((_BYTE)v4)
  {
    if (*((unsigned char *)a2 + 20))
    {
      int v5 = *((_DWORD *)a2 + 2);
      *((_DWORD *)this + 5) |= 1u;
      *((_DWORD *)this + 2) = v5;
      int v4 = *((_DWORD *)a2 + 5);
    }
    if ((v4 & 2) != 0)
    {
      unsigned int v6 = *((_DWORD *)a2 + 3);
      if (v6 >= 5) {
        __assert_rtn("set_slot_source", "CoreNavigationCLPGnssMeasApi.pb.h", 6607, "::CoreNavigation::CLP::LogEntry::PrivateData::GlonassSlotSource_IsValid(value)");
      }
      *((_DWORD *)this + 5) |= 2u;
      *((_DWORD *)this + 3) = v6;
    }
  }
}

void sub_18DFBA6D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CoreNavigation::CLP::LogEntry::PrivateData::GlonassSlotInfo::~GlonassSlotInfo(CoreNavigation::CLP::LogEntry::PrivateData::GlonassSlotInfo *this)
{
  *(void *)this = &unk_1EDD0C410;
  CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  uint64_t vars8;

  CoreNavigation::CLP::LogEntry::PrivateData::GlonassSlotInfo::~GlonassSlotInfo(this);

  JUMPOUT(0x192FA6240);
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::GlonassSlotInfo::default_instance(CoreNavigation::CLP::LogEntry::PrivateData::GlonassSlotInfo *this)
{
  return CoreNavigation::CLP::LogEntry::PrivateData::GlonassSlotInfo::default_instance_;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::GlonassSlotInfo::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 16) = a2;
  return this;
}

void CoreNavigation::CLP::LogEntry::PrivateData::GlonassSlotInfo::New(CoreNavigation::CLP::LogEntry::PrivateData::GlonassSlotInfo *this)
{
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::GlonassSlotInfo::Clear(uint64_t this)
{
  if (*(unsigned char *)(this + 20)) {
    *(void *)(this + 8) = 0;
  }
  *(_DWORD *)(this + 20) = 0;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::GlonassSlotInfo::MergePartialFromCodedStream(CoreNavigation::CLP::LogEntry::PrivateData::GlonassSlotInfo *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  int v4 = (unsigned int *)((char *)this + 8);
  while (1)
  {
    while (1)
    {
      int v5 = (char *)*((void *)a2 + 1);
      if ((unint64_t)v5 >= *((void *)a2 + 2) || *v5 < 0)
      {
        unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
        *((_DWORD *)a2 + 8) = TagFallback;
        if (!TagFallback) {
          return 1;
        }
      }
      else
      {
        unint64_t TagFallback = *v5;
        *((_DWORD *)a2 + 8) = TagFallback;
        *((void *)a2 + 1) = v5 + 1;
        if (!TagFallback) {
          return 1;
        }
      }
      if (TagFallback >> 3 != 1) {
        break;
      }
      int v7 = TagFallback & 7;
      if ((TagFallback & 7) != 0) {
        goto LABEL_16;
      }
      int v10 = (char *)*((void *)a2 + 1);
      unint64_t v8 = *((void *)a2 + 2);
      if ((unint64_t)v10 >= v8 || *v10 < 0)
      {
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v4);
        if (!result) {
          return result;
        }
        int v11 = (unsigned char *)*((void *)a2 + 1);
        unint64_t v8 = *((void *)a2 + 2);
      }
      else
      {
        unsigned int *v4 = *v10;
        int v11 = v10 + 1;
        *((void *)a2 + 1) = v11;
      }
      *((_DWORD *)this + 5) |= 1u;
      if ((unint64_t)v11 < v8 && *v11 == 16)
      {
        int v9 = v11 + 1;
        *((void *)a2 + 1) = v9;
LABEL_24:
        unsigned int v14 = 0;
        if ((unint64_t)v9 >= v8 || *v9 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v14);
          if (!result) {
            return result;
          }
          unsigned int v12 = v14;
        }
        else
        {
          unsigned int v12 = *v9;
          *((void *)a2 + 1) = v9 + 1;
        }
        if (v12 <= 4)
        {
          *((_DWORD *)this + 5) |= 2u;
          *((_DWORD *)this + 3) = v12;
        }
        if (*((void *)a2 + 1) == *((void *)a2 + 2)
          && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
        {
          *((_DWORD *)a2 + 8) = 0;
          uint64_t result = 1;
          *((unsigned char *)a2 + 36) = 1;
          return result;
        }
      }
    }
    if (TagFallback >> 3 == 2)
    {
      int v7 = TagFallback & 7;
      if ((TagFallback & 7) == 0)
      {
        int v9 = (char *)*((void *)a2 + 1);
        unint64_t v8 = *((void *)a2 + 2);
        goto LABEL_24;
      }
    }
    else
    {
      int v7 = TagFallback & 7;
    }
LABEL_16:
    if (v7 == 4) {
      return 1;
    }
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0; {
  }
    }
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::GlonassSlotInfo::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  int v6 = *(_DWORD *)(this + 20);
  if (v6)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned int *)(this + 8), (uint64_t)a2, a4);
    int v6 = *(_DWORD *)(v5 + 20);
  }
  if ((v6 & 2) != 0)
  {
    uint64_t v7 = *(unsigned int *)(v5 + 12);
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v7, (uint64_t)a2, a4);
  }
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::GlonassSlotInfo::ByteSize(CoreNavigation::CLP::LogEntry::PrivateData::GlonassSlotInfo *this)
{
  char v2 = *((unsigned char *)this + 20);
  if (v2)
  {
    if (*((unsigned char *)this + 20))
    {
      int v4 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 2);
      if (v4 >= 0x80)
      {
        uint64_t v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v4) + 1;
        if ((*((_DWORD *)this + 5) & 2) == 0) {
          goto LABEL_16;
        }
      }
      else
      {
        uint64_t v3 = 2;
        if ((v2 & 2) == 0) {
          goto LABEL_16;
        }
      }
    }
    else
    {
      uint64_t v3 = 0;
      if ((*((unsigned char *)this + 20) & 2) == 0) {
        goto LABEL_16;
      }
    }
    uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 3);
    if ((v5 & 0x80000000) != 0)
    {
      int v6 = 11;
    }
    else if (v5 >= 0x80)
    {
      int v6 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5) + 1;
    }
    else
    {
      int v6 = 2;
    }
    uint64_t v3 = (v6 + v3);
  }
  else
  {
    uint64_t v3 = 0;
  }
LABEL_16:
  *((_DWORD *)this + 4) = v3;
  return v3;
}

void CoreNavigation::CLP::LogEntry::PrivateData::GlonassSlotInfo::CheckTypeAndMergeFrom(CoreNavigation::CLP::LogEntry::PrivateData::GlonassSlotInfo *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  CoreNavigation::CLP::LogEntry::PrivateData::GlonassSlotInfo::MergeFrom(this, lpsrc);
}

void CoreNavigation::CLP::LogEntry::PrivateData::GlonassSlotInfo::CopyFrom(CoreNavigation::CLP::LogEntry::PrivateData::GlonassSlotInfo *this, const CoreNavigation::CLP::LogEntry::PrivateData::GlonassSlotInfo *a2)
{
  if (a2 != this)
  {
    (*(void (**)(CoreNavigation::CLP::LogEntry::PrivateData::GlonassSlotInfo *))(*(void *)this + 32))(this);
    CoreNavigation::CLP::LogEntry::PrivateData::GlonassSlotInfo::MergeFrom(this, a2);
  }
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::GlonassSlotInfo::IsInitialized(CoreNavigation::CLP::LogEntry::PrivateData::GlonassSlotInfo *this)
{
  return 1;
}

CoreNavigation::CLP::LogEntry::PrivateData::GlonassSlotInfo *CoreNavigation::CLP::LogEntry::PrivateData::GlonassSlotInfo::Swap(CoreNavigation::CLP::LogEntry::PrivateData::GlonassSlotInfo *this, CoreNavigation::CLP::LogEntry::PrivateData::GlonassSlotInfo *a2)
{
  if (a2 != this)
  {
    int v2 = *((_DWORD *)this + 2);
    *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
    *((_DWORD *)a2 + 2) = v2;
    int v3 = *((_DWORD *)this + 3);
    *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
    *((_DWORD *)a2 + 3) = v3;
    int v4 = *((_DWORD *)this + 5);
    *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
    *((_DWORD *)a2 + 5) = v4;
    int v5 = *((_DWORD *)this + 4);
    *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
    *((_DWORD *)a2 + 4) = v5;
  }
  return this;
}

void *CoreNavigation::CLP::LogEntry::PrivateData::GlonassSlotInfo::GetTypeName@<X0>(void *a1@<X8>)
{
  return sub_18DEDE7B0(a1, "CoreNavigation.CLP.LogEntry.PrivateData.GlonassSlotInfo");
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::GlonassId::SharedCtor(uint64_t this)
{
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

CoreNavigation::CLP::LogEntry::PrivateData::GlonassId *CoreNavigation::CLP::LogEntry::PrivateData::GlonassId::GlonassId(CoreNavigation::CLP::LogEntry::PrivateData::GlonassId *this, const CoreNavigation::CLP::LogEntry::PrivateData::GlonassId *a2)
{
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = &unk_1EDD0EFA8;
  *((_DWORD *)this + 6) = 0;
  CoreNavigation::CLP::LogEntry::PrivateData::GlonassId::MergeFrom(this, a2);
  return this;
}

void sub_18DFBACC0(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void CoreNavigation::CLP::LogEntry::PrivateData::GlonassId::MergeFrom(CoreNavigation::CLP::LogEntry::PrivateData::GlonassId *this, const CoreNavigation::CLP::LogEntry::PrivateData::GlonassId *a2)
{
  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v8);
  }
  LOBYTE(v4) = *((unsigned char *)a2 + 24);
  if ((_BYTE)v4)
  {
    if (*((unsigned char *)a2 + 24))
    {
      int v5 = *((_DWORD *)a2 + 4);
      *((_DWORD *)this + 6) |= 1u;
      *((_DWORD *)this + 4) = v5;
      int v4 = *((_DWORD *)a2 + 6);
    }
    if ((v4 & 2) != 0)
    {
      *((_DWORD *)this + 6) |= 2u;
      int v6 = (CoreNavigation::CLP::LogEntry::PrivateData::GlonassSlotInfo *)*((void *)this + 1);
      if (!v6) {
        operator new();
      }
      uint64_t v7 = (const CoreNavigation::CLP::LogEntry::PrivateData::GlonassSlotInfo *)*((void *)a2 + 1);
      if (!v7)
      {
        CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);
        uint64_t v7 = *(const CoreNavigation::CLP::LogEntry::PrivateData::GlonassSlotInfo **)(CoreNavigation::CLP::LogEntry::PrivateData::GlonassId::default_instance_
                                                                                   + 8);
      }
      CoreNavigation::CLP::LogEntry::PrivateData::GlonassSlotInfo::MergeFrom(v6, v7);
    }
  }
}

void sub_18DFBADE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CoreNavigation::CLP::LogEntry::PrivateData::GlonassId::~GlonassId(CoreNavigation::CLP::LogEntry::PrivateData::GlonassId *this)
{
  *(void *)this = &unk_1EDD0EFA8;
  CoreNavigation::CLP::LogEntry::PrivateData::GlonassId::SharedDtor(this);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  uint64_t vars8;

  CoreNavigation::CLP::LogEntry::PrivateData::GlonassId::~GlonassId(this);

  JUMPOUT(0x192FA6240);
}

void CoreNavigation::CLP::LogEntry::PrivateData::GlonassId::SharedDtor(CoreNavigation::CLP::LogEntry::PrivateData::GlonassId *this)
{
  CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);
  if ((CoreNavigation::CLP::LogEntry::PrivateData::GlonassId *)CoreNavigation::CLP::LogEntry::PrivateData::GlonassId::default_instance_ != this)
  {
    uint64_t v2 = *((void *)this + 1);
    if (v2)
    {
      int v3 = *(void (**)(void))(*(void *)v2 + 8);
      v3();
    }
  }
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::GlonassId::default_instance(CoreNavigation::CLP::LogEntry::PrivateData::GlonassId *this)
{
  return CoreNavigation::CLP::LogEntry::PrivateData::GlonassId::default_instance_;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::GlonassId::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 20) = a2;
  return this;
}

void CoreNavigation::CLP::LogEntry::PrivateData::GlonassId::New(CoreNavigation::CLP::LogEntry::PrivateData::GlonassId *this)
{
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::GlonassId::Clear(uint64_t this)
{
  char v1 = *(unsigned char *)(this + 24);
  if (v1)
  {
    *(_DWORD *)(this + 16) = 0;
    if ((v1 & 2) != 0)
    {
      uint64_t v2 = *(void *)(this + 8);
      if (v2)
      {
        if (*(unsigned char *)(v2 + 20)) {
          *(void *)(v2 + 8) = 0;
        }
        *(_DWORD *)(v2 + 20) = 0;
      }
    }
  }
  *(_DWORD *)(this + 24) = 0;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::GlonassId::MergePartialFromCodedStream(CoreNavigation::CLP::LogEntry::PrivateData::GlonassId *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  while (1)
  {
    do
    {
      while (1)
      {
        int v4 = (char *)*((void *)a2 + 1);
        if ((unint64_t)v4 >= *((void *)a2 + 2) || *v4 < 0)
        {
          unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
          *((_DWORD *)a2 + 8) = TagFallback;
          if (!TagFallback) {
            return 1;
          }
        }
        else
        {
          unint64_t TagFallback = *v4;
          *((_DWORD *)a2 + 8) = TagFallback;
          *((void *)a2 + 1) = v4 + 1;
          if (!TagFallback) {
            return 1;
          }
        }
        if (TagFallback >> 3 == 1) {
          break;
        }
        if (TagFallback >> 3 == 2)
        {
          int v6 = TagFallback & 7;
          if (v6 == 2)
          {
            int v7 = *((_DWORD *)this + 6);
            goto LABEL_23;
          }
        }
        else
        {
          int v6 = TagFallback & 7;
        }
LABEL_15:
        if (v6 == 4) {
          return 1;
        }
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0; {
      }
        }
      int v6 = TagFallback & 7;
      if ((TagFallback & 7) != 0) {
        goto LABEL_15;
      }
      unsigned int v20 = 0;
      int v9 = (char *)*((void *)a2 + 1);
      unint64_t v8 = *((void *)a2 + 2);
      if ((unint64_t)v9 >= v8 || *v9 < 0)
      {
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v20);
        if (!result) {
          return result;
        }
        unsigned int v10 = v20;
        int v11 = (unsigned char *)*((void *)a2 + 1);
        unint64_t v8 = *((void *)a2 + 2);
      }
      else
      {
        unsigned int v10 = *v9;
        int v11 = v9 + 1;
        *((void *)a2 + 1) = v11;
      }
      *((_DWORD *)this + 4) = v10;
      int v7 = *((_DWORD *)this + 6) | 1;
      *((_DWORD *)this + 6) = v7;
    }
    while ((unint64_t)v11 >= v8 || *v11 != 18);
    *((void *)a2 + 1) = v11 + 1;
LABEL_23:
    *((_DWORD *)this + 6) = v7 | 2;
    uint64_t v13 = (CoreNavigation::CLP::LogEntry::PrivateData::GlonassSlotInfo *)*((void *)this + 1);
    if (!v13) {
      operator new();
    }
    unsigned int v21 = 0;
    unsigned int v14 = (char *)*((void *)a2 + 1);
    if ((unint64_t)v14 >= *((void *)a2 + 2) || *v14 < 0)
    {
      if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v21)) {
        return 0;
      }
    }
    else
    {
      unsigned int v21 = *v14;
      *((void *)a2 + 1) = v14 + 1;
    }
    int v15 = *((_DWORD *)a2 + 14);
    int v16 = *((_DWORD *)a2 + 15);
    *((_DWORD *)a2 + 14) = v15 + 1;
    if (v15 >= v16) {
      return 0;
    }
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
    if (!CoreNavigation::CLP::LogEntry::PrivateData::GlonassSlotInfo::MergePartialFromCodedStream(v13, a2)|| !*((unsigned char *)a2 + 36))
    {
      return 0;
    }
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
    int v17 = *((_DWORD *)a2 + 14);
    BOOL v18 = __OFSUB__(v17, 1);
    int v19 = v17 - 1;
    if (v19 < 0 == v18) {
      *((_DWORD *)a2 + 14) = v19;
    }
    if (*((void *)a2 + 1) == *((void *)a2 + 2)
      && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
    {
      *((_DWORD *)a2 + 8) = 0;
      uint64_t result = 1;
      *((unsigned char *)a2 + 36) = 1;
      return result;
    }
  }
}

unsigned int *CoreNavigation::CLP::LogEntry::PrivateData::GlonassId::SerializeWithCachedSizes(unsigned int *this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  int v5 = this;
  unsigned int v6 = this[6];
  if (v6)
  {
    this = (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, this[4], (uint64_t)a2, a4);
    if ((v5[6] & 2) == 0) {
      return this;
    }
  }
  else if ((v6 & 2) == 0)
  {
    return this;
  }
  uint64_t v7 = *((void *)v5 + 1);
  if (!v7)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)this);
    uint64_t v7 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::GlonassId::default_instance_ + 8);
  }

  return (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v7, a2, a4);
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::GlonassId::ByteSize(CoreNavigation::CLP::LogEntry::PrivateData::GlonassId *this)
{
  char v2 = *((unsigned char *)this + 24);
  if (v2)
  {
    if (*((unsigned char *)this + 24))
    {
      int v4 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 4);
      if ((v4 & 0x80000000) != 0)
      {
        uint64_t v3 = 11;
        if ((v2 & 2) == 0) {
          goto LABEL_19;
        }
      }
      else if (v4 >= 0x80)
      {
        uint64_t v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v4) + 1;
        if ((*((_DWORD *)this + 6) & 2) == 0) {
          goto LABEL_19;
        }
      }
      else
      {
        uint64_t v3 = 2;
        if ((v2 & 2) == 0) {
          goto LABEL_19;
        }
      }
    }
    else
    {
      uint64_t v3 = 0;
      if ((*((unsigned char *)this + 24) & 2) == 0) {
        goto LABEL_19;
      }
    }
    int v5 = (CoreNavigation::CLP::LogEntry::PrivateData::GlonassSlotInfo *)*((void *)this + 1);
    if (!v5)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(0);
      int v5 = *(CoreNavigation::CLP::LogEntry::PrivateData::GlonassSlotInfo **)(CoreNavigation::CLP::LogEntry::PrivateData::GlonassId::default_instance_
                                                                           + 8);
    }
    unsigned int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CoreNavigation::CLP::LogEntry::PrivateData::GlonassSlotInfo::ByteSize(v5);
    int v7 = (int)v6;
    if (v6 >= 0x80) {
      int v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6);
    }
    else {
      int v8 = 1;
    }
    uint64_t v3 = (v3 + v7 + v8 + 1);
  }
  else
  {
    uint64_t v3 = 0;
  }
LABEL_19:
  *((_DWORD *)this + 5) = v3;
  return v3;
}

void CoreNavigation::CLP::LogEntry::PrivateData::GlonassId::CheckTypeAndMergeFrom(CoreNavigation::CLP::LogEntry::PrivateData::GlonassId *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  CoreNavigation::CLP::LogEntry::PrivateData::GlonassId::MergeFrom(this, lpsrc);
}

void CoreNavigation::CLP::LogEntry::PrivateData::GlonassId::CopyFrom(CoreNavigation::CLP::LogEntry::PrivateData::GlonassId *this, const CoreNavigation::CLP::LogEntry::PrivateData::GlonassId *a2)
{
  if (a2 != this)
  {
    (*(void (**)(CoreNavigation::CLP::LogEntry::PrivateData::GlonassId *))(*(void *)this + 32))(this);
    CoreNavigation::CLP::LogEntry::PrivateData::GlonassId::MergeFrom(this, a2);
  }
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::GlonassId::IsInitialized(CoreNavigation::CLP::LogEntry::PrivateData::GlonassId *this)
{
  return 1;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::GlonassId::Swap(uint64_t this, CoreNavigation::CLP::LogEntry::PrivateData::GlonassId *a2)
{
  if (a2 != (CoreNavigation::CLP::LogEntry::PrivateData::GlonassId *)this)
  {
    int v2 = *(_DWORD *)(this + 16);
    *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
    *((_DWORD *)a2 + 4) = v2;
    uint64_t v3 = *(void *)(this + 8);
    *(void *)(this + 8) = *((void *)a2 + 1);
    *((void *)a2 + 1) = v3;
    LODWORD(v3) = *(_DWORD *)(this + 24);
    *(_DWORD *)(this + 24) = *((_DWORD *)a2 + 6);
    *((_DWORD *)a2 + 6) = v3;
    LODWORD(v3) = *(_DWORD *)(this + 20);
    *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
    *((_DWORD *)a2 + 5) = v3;
  }
  return this;
}

void *CoreNavigation::CLP::LogEntry::PrivateData::GlonassId::GetTypeName@<X0>(void *a1@<X8>)
{
  return sub_18DEDE7B0(a1, "CoreNavigation.CLP.LogEntry.PrivateData.GlonassId");
}

double CoreNavigation::CLP::LogEntry::PrivateData::ConstellationId::SharedCtor(CoreNavigation::CLP::LogEntry::PrivateData::ConstellationId *this)
{
  *((void *)this + 5) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  return result;
}

CoreNavigation::CLP::LogEntry::PrivateData::ConstellationId *CoreNavigation::CLP::LogEntry::PrivateData::ConstellationId::ConstellationId(CoreNavigation::CLP::LogEntry::PrivateData::ConstellationId *this, const CoreNavigation::CLP::LogEntry::PrivateData::ConstellationId *a2)
{
  *(void *)this = &unk_1EDD0C2A8;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((void *)this + 5) = 0;
  CoreNavigation::CLP::LogEntry::PrivateData::ConstellationId::MergeFrom(this, a2);
  return this;
}

void sub_18DFBB564(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void CoreNavigation::CLP::LogEntry::PrivateData::ConstellationId::MergeFrom(CoreNavigation::CLP::LogEntry::PrivateData::ConstellationId *this, const CoreNavigation::CLP::LogEntry::PrivateData::ConstellationId *a2)
{
  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v13);
  }
  LOBYTE(v4) = *((unsigned char *)a2 + 44);
  if ((_BYTE)v4)
  {
    if (*((unsigned char *)a2 + 44))
    {
      int v6 = *((_DWORD *)a2 + 4);
      *((_DWORD *)this + 11) |= 1u;
      *((_DWORD *)this + 4) = v6;
      int v4 = *((_DWORD *)a2 + 11);
      if ((v4 & 2) == 0)
      {
LABEL_6:
        if ((v4 & 4) == 0) {
          goto LABEL_7;
        }
        goto LABEL_19;
      }
    }
    else if ((*((unsigned char *)a2 + 44) & 2) == 0)
    {
      goto LABEL_6;
    }
    *((_DWORD *)this + 11) |= 2u;
    int v7 = (CoreNavigation::CLP::LogEntry::PrivateData::GlonassId *)*((void *)this + 1);
    if (!v7) {
      operator new();
    }
    int v8 = (const CoreNavigation::CLP::LogEntry::PrivateData::GlonassId *)*((void *)a2 + 1);
    if (!v8)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);
      int v8 = *(const CoreNavigation::CLP::LogEntry::PrivateData::GlonassId **)(CoreNavigation::CLP::LogEntry::PrivateData::ConstellationId::default_instance_
                                                                           + 8);
    }
    CoreNavigation::CLP::LogEntry::PrivateData::GlonassId::MergeFrom(v7, v8);
    int v4 = *((_DWORD *)a2 + 11);
    if ((v4 & 4) == 0)
    {
LABEL_7:
      if ((v4 & 8) == 0) {
        goto LABEL_8;
      }
      goto LABEL_20;
    }
LABEL_19:
    int v9 = *((_DWORD *)a2 + 5);
    *((_DWORD *)this + 11) |= 4u;
    *((_DWORD *)this + 5) = v9;
    int v4 = *((_DWORD *)a2 + 11);
    if ((v4 & 8) == 0)
    {
LABEL_8:
      if ((v4 & 0x10) == 0) {
        goto LABEL_9;
      }
      goto LABEL_21;
    }
LABEL_20:
    int v10 = *((_DWORD *)a2 + 6);
    *((_DWORD *)this + 11) |= 8u;
    *((_DWORD *)this + 6) = v10;
    int v4 = *((_DWORD *)a2 + 11);
    if ((v4 & 0x10) == 0)
    {
LABEL_9:
      if ((v4 & 0x20) == 0) {
        goto LABEL_10;
      }
      goto LABEL_22;
    }
LABEL_21:
    int v11 = *((_DWORD *)a2 + 7);
    *((_DWORD *)this + 11) |= 0x10u;
    *((_DWORD *)this + 7) = v11;
    int v4 = *((_DWORD *)a2 + 11);
    if ((v4 & 0x20) == 0)
    {
LABEL_10:
      if ((v4 & 0x40) == 0) {
        return;
      }
      goto LABEL_11;
    }
LABEL_22:
    int v12 = *((_DWORD *)a2 + 8);
    *((_DWORD *)this + 11) |= 0x20u;
    *((_DWORD *)this + 8) = v12;
    if ((*((_DWORD *)a2 + 11) & 0x40) == 0) {
      return;
    }
LABEL_11:
    int v5 = *((_DWORD *)a2 + 9);
    *((_DWORD *)this + 11) |= 0x40u;
    *((_DWORD *)this + 9) = v5;
  }
}

void sub_18DFBB738(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CoreNavigation::CLP::LogEntry::PrivateData::ConstellationId::~ConstellationId(CoreNavigation::CLP::LogEntry::PrivateData::ConstellationId *this)
{
  *(void *)this = &unk_1EDD0C2A8;
  CoreNavigation::CLP::LogEntry::PrivateData::ConstellationId::SharedDtor(this);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  uint64_t vars8;

  CoreNavigation::CLP::LogEntry::PrivateData::ConstellationId::~ConstellationId(this);

  JUMPOUT(0x192FA6240);
}

void CoreNavigation::CLP::LogEntry::PrivateData::ConstellationId::SharedDtor(CoreNavigation::CLP::LogEntry::PrivateData::ConstellationId *this)
{
  CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);
  if ((CoreNavigation::CLP::LogEntry::PrivateData::ConstellationId *)CoreNavigation::CLP::LogEntry::PrivateData::ConstellationId::default_instance_ != this)
  {
    uint64_t v2 = *((void *)this + 1);
    if (v2)
    {
      uint64_t v3 = *(void (**)(void))(*(void *)v2 + 8);
      v3();
    }
  }
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::ConstellationId::default_instance(CoreNavigation::CLP::LogEntry::PrivateData::ConstellationId *this)
{
  return CoreNavigation::CLP::LogEntry::PrivateData::ConstellationId::default_instance_;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::ConstellationId::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 40) = a2;
  return this;
}

void CoreNavigation::CLP::LogEntry::PrivateData::ConstellationId::New(CoreNavigation::CLP::LogEntry::PrivateData::ConstellationId *this)
{
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::ConstellationId::Clear(uint64_t this)
{
  uint64_t v1 = this;
  char v2 = *(unsigned char *)(this + 44);
  if (v2)
  {
    *(_DWORD *)(this + 16) = 0;
    if ((v2 & 2) != 0)
    {
      this = *(void *)(this + 8);
      if (this) {
        this = CoreNavigation::CLP::LogEntry::PrivateData::GlonassId::Clear(this);
      }
    }
    *(void *)(v1 + 28) = 0;
    *(void *)(v1 + 20) = 0;
    *(_DWORD *)(v1 + 36) = 0;
  }
  *(_DWORD *)(v1 + 44) = 0;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::ConstellationId::MergePartialFromCodedStream(CoreNavigation::CLP::LogEntry::PrivateData::ConstellationId *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  int v4 = (unsigned int *)((char *)this + 16);
  int v5 = (unsigned int *)((char *)this + 20);
  int v6 = (unsigned int *)((char *)this + 24);
  int v7 = (unsigned int *)((char *)this + 28);
  int v8 = (unsigned int *)((char *)this + 32);
  int v9 = (unsigned int *)((char *)this + 36);
  while (2)
  {
    int v10 = (char *)*((void *)a2 + 1);
    if ((unint64_t)v10 >= *((void *)a2 + 2) || *v10 < 0)
    {
      unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      if (!TagFallback) {
        return 1;
      }
    }
    else
    {
      unint64_t TagFallback = *v10;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((void *)a2 + 1) = v10 + 1;
      if (!TagFallback) {
        return 1;
      }
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        int v12 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_24;
        }
        unsigned int v14 = (char *)*((void *)a2 + 1);
        unint64_t v13 = *((void *)a2 + 2);
        if ((unint64_t)v14 >= v13 || *v14 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v4);
          if (!result) {
            return result;
          }
          int v15 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v13 = *((void *)a2 + 2);
        }
        else
        {
          unsigned int *v4 = *v14;
          int v15 = v14 + 1;
          *((void *)a2 + 1) = v15;
        }
        int v16 = *((_DWORD *)this + 11) | 1;
        *((_DWORD *)this + 11) = v16;
        if ((unint64_t)v15 < v13 && *v15 == 18)
        {
          *((void *)a2 + 1) = v15 + 1;
          goto LABEL_33;
        }
        continue;
      case 2u:
        int v12 = TagFallback & 7;
        if (v12 != 2) {
          goto LABEL_24;
        }
        int v16 = *((_DWORD *)this + 11);
LABEL_33:
        *((_DWORD *)this + 11) = v16 | 2;
        int v24 = (CoreNavigation::CLP::LogEntry::PrivateData::GlonassId *)*((void *)this + 1);
        if (!v24) {
          operator new();
        }
        unsigned int v37 = 0;
        uint64_t v25 = (char *)*((void *)a2 + 1);
        if ((unint64_t)v25 >= *((void *)a2 + 2) || *v25 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v37))return 0; {
        }
          }
        else
        {
          unsigned int v37 = *v25;
          *((void *)a2 + 1) = v25 + 1;
        }
        int v26 = *((_DWORD *)a2 + 14);
        int v27 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v26 + 1;
        if (v26 < v27)
        {
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
          if (CoreNavigation::CLP::LogEntry::PrivateData::GlonassId::MergePartialFromCodedStream(v24, a2))
          {
            if (*((unsigned char *)a2 + 36))
            {
              wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
              int v28 = *((_DWORD *)a2 + 14);
              BOOL v29 = __OFSUB__(v28, 1);
              int v30 = v28 - 1;
              if (v30 < 0 == v29) {
                *((_DWORD *)a2 + 14) = v30;
              }
              int v31 = (unsigned char *)*((void *)a2 + 1);
              unint64_t v17 = *((void *)a2 + 2);
              if ((unint64_t)v31 < v17 && *v31 == 24)
              {
                BOOL v18 = v31 + 1;
                *((void *)a2 + 1) = v18;
LABEL_47:
                if ((unint64_t)v18 >= v17 || *v18 < 0)
                {
                  uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v5);
                  if (!result) {
                    return result;
                  }
                  int v32 = (unsigned char *)*((void *)a2 + 1);
                  unint64_t v17 = *((void *)a2 + 2);
                }
                else
                {
                  unsigned int *v5 = *v18;
                  int v32 = v18 + 1;
                  *((void *)a2 + 1) = v32;
                }
                *((_DWORD *)this + 11) |= 4u;
                if ((unint64_t)v32 < v17 && *v32 == 32)
                {
                  int v19 = v32 + 1;
                  *((void *)a2 + 1) = v19;
LABEL_55:
                  if ((unint64_t)v19 >= v17 || *v19 < 0)
                  {
                    uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v6);
                    if (!result) {
                      return result;
                    }
                    int v33 = (unsigned char *)*((void *)a2 + 1);
                    unint64_t v17 = *((void *)a2 + 2);
                  }
                  else
                  {
                    *int v6 = *v19;
                    int v33 = v19 + 1;
                    *((void *)a2 + 1) = v33;
                  }
                  *((_DWORD *)this + 11) |= 8u;
                  if ((unint64_t)v33 < v17 && *v33 == 40)
                  {
                    unsigned int v20 = v33 + 1;
                    *((void *)a2 + 1) = v20;
LABEL_63:
                    if ((unint64_t)v20 >= v17 || *v20 < 0)
                    {
                      uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v7);
                      if (!result) {
                        return result;
                      }
                      int v34 = (unsigned char *)*((void *)a2 + 1);
                      unint64_t v17 = *((void *)a2 + 2);
                    }
                    else
                    {
                      *int v7 = *v20;
                      int v34 = v20 + 1;
                      *((void *)a2 + 1) = v34;
                    }
                    *((_DWORD *)this + 11) |= 0x10u;
                    if ((unint64_t)v34 < v17 && *v34 == 48)
                    {
                      unsigned int v21 = v34 + 1;
                      *((void *)a2 + 1) = v21;
LABEL_71:
                      if ((unint64_t)v21 >= v17 || *v21 < 0)
                      {
                        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v8);
                        if (!result) {
                          return result;
                        }
                        uint64_t v35 = (unsigned char *)*((void *)a2 + 1);
                        unint64_t v17 = *((void *)a2 + 2);
                      }
                      else
                      {
                        unsigned int *v8 = *v21;
                        uint64_t v35 = v21 + 1;
                        *((void *)a2 + 1) = v35;
                      }
                      *((_DWORD *)this + 11) |= 0x20u;
                      if ((unint64_t)v35 < v17 && *v35 == 56)
                      {
                        int v22 = v35 + 1;
                        *((void *)a2 + 1) = v22;
LABEL_79:
                        if ((unint64_t)v22 >= v17 || *v22 < 0)
                        {
                          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v9);
                          if (!result) {
                            return result;
                          }
                          uint64_t v36 = (unsigned __int8 *)*((void *)a2 + 1);
                          unint64_t v17 = *((void *)a2 + 2);
                        }
                        else
                        {
                          unsigned int *v9 = *v22;
                          uint64_t v36 = (unsigned __int8 *)(v22 + 1);
                          *((void *)a2 + 1) = v36;
                        }
                        *((_DWORD *)this + 11) |= 0x40u;
                        if (v36 == (unsigned __int8 *)v17
                          && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
                        {
                          *((_DWORD *)a2 + 8) = 0;
                          uint64_t result = 1;
                          *((unsigned char *)a2 + 36) = 1;
                          return result;
                        }
                      }
                    }
                  }
                }
              }
              continue;
            }
          }
        }
        return 0;
      case 3u:
        int v12 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_24;
        }
        BOOL v18 = (char *)*((void *)a2 + 1);
        unint64_t v17 = *((void *)a2 + 2);
        goto LABEL_47;
      case 4u:
        int v12 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_24;
        }
        int v19 = (char *)*((void *)a2 + 1);
        unint64_t v17 = *((void *)a2 + 2);
        goto LABEL_55;
      case 5u:
        int v12 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_24;
        }
        unsigned int v20 = (char *)*((void *)a2 + 1);
        unint64_t v17 = *((void *)a2 + 2);
        goto LABEL_63;
      case 6u:
        int v12 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_24;
        }
        unsigned int v21 = (char *)*((void *)a2 + 1);
        unint64_t v17 = *((void *)a2 + 2);
        goto LABEL_71;
      case 7u:
        int v12 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_24;
        }
        int v22 = (char *)*((void *)a2 + 1);
        unint64_t v17 = *((void *)a2 + 2);
        goto LABEL_79;
      default:
        int v12 = TagFallback & 7;
LABEL_24:
        if (v12 == 4) {
          return 1;
        }
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0; {
        continue;
        }
    }
  }
}

unsigned int *CoreNavigation::CLP::LogEntry::PrivateData::ConstellationId::SerializeWithCachedSizes(unsigned int *this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  int v5 = this;
  unsigned int v6 = this[11];
  if (v6)
  {
    this = (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, this[4], (uint64_t)a2, a4);
    unsigned int v6 = v5[11];
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t v7 = *((void *)v5 + 1);
  if (!v7)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)this);
    uint64_t v7 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::ConstellationId::default_instance_ + 8);
  }
  this = (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v7, a2, a4);
  unsigned int v6 = v5[11];
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }
LABEL_13:
  this = (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v5[5], (uint64_t)a2, a4);
  unsigned int v6 = v5[11];
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }
LABEL_14:
  this = (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v5[6], (uint64_t)a2, a4);
  unsigned int v6 = v5[11];
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
LABEL_16:
    this = (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, v5[8], (uint64_t)a2, a4);
    if ((v5[11] & 0x40) == 0) {
      return this;
    }
    goto LABEL_17;
  }
LABEL_15:
  this = (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, v5[7], (uint64_t)a2, a4);
  unsigned int v6 = v5[11];
  if ((v6 & 0x20) != 0) {
    goto LABEL_16;
  }
LABEL_7:
  if ((v6 & 0x40) == 0) {
    return this;
  }
LABEL_17:
  uint64_t v8 = v5[9];

  return (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, v8, (uint64_t)a2, a4);
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::ConstellationId::ByteSize(CoreNavigation::CLP::LogEntry::PrivateData::ConstellationId *this)
{
  LOBYTE(v2) = *((unsigned char *)this + 44);
  if (!(_BYTE)v2)
  {
    uint64_t v3 = 0;
    goto LABEL_42;
  }
  if (*((unsigned char *)this + 44))
  {
    int v4 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 4);
    if (v4 >= 0x80)
    {
      uint64_t v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v4) + 1;
      int v2 = *((_DWORD *)this + 11);
      if ((v2 & 2) == 0) {
        goto LABEL_16;
      }
    }
    else
    {
      uint64_t v3 = 2;
      if ((v2 & 2) == 0) {
        goto LABEL_16;
      }
    }
  }
  else
  {
    uint64_t v3 = 0;
    if ((*((unsigned char *)this + 44) & 2) == 0) {
      goto LABEL_16;
    }
  }
  int v5 = (CoreNavigation::CLP::LogEntry::PrivateData::GlonassId *)*((void *)this + 1);
  if (!v5)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(0);
    int v5 = *(CoreNavigation::CLP::LogEntry::PrivateData::GlonassId **)(CoreNavigation::CLP::LogEntry::PrivateData::ConstellationId::default_instance_
                                                                   + 8);
  }
  unsigned int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CoreNavigation::CLP::LogEntry::PrivateData::GlonassId::ByteSize(v5);
  int v7 = (int)v6;
  if (v6 >= 0x80) {
    int v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6);
  }
  else {
    int v8 = 1;
  }
  uint64_t v3 = (v3 + v7 + v8 + 1);
  int v2 = *((_DWORD *)this + 11);
LABEL_16:
  if ((v2 & 4) != 0)
  {
    int v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 5);
    if (v9 >= 0x80)
    {
      int v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9) + 1;
      int v2 = *((_DWORD *)this + 11);
    }
    else
    {
      int v10 = 2;
    }
    uint64_t v3 = (v10 + v3);
    if ((v2 & 8) == 0)
    {
LABEL_18:
      if ((v2 & 0x10) == 0) {
        goto LABEL_19;
      }
      goto LABEL_30;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_18;
  }
  int v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 6);
  if (v11 >= 0x80)
  {
    int v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v11) + 1;
    int v2 = *((_DWORD *)this + 11);
  }
  else
  {
    int v12 = 2;
  }
  uint64_t v3 = (v12 + v3);
  if ((v2 & 0x10) == 0)
  {
LABEL_19:
    if ((v2 & 0x20) == 0) {
      goto LABEL_20;
    }
    goto LABEL_34;
  }
LABEL_30:
  unint64_t v13 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 7);
  if (v13 >= 0x80)
  {
    int v14 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v13) + 1;
    int v2 = *((_DWORD *)this + 11);
  }
  else
  {
    int v14 = 2;
  }
  uint64_t v3 = (v14 + v3);
  if ((v2 & 0x20) == 0)
  {
LABEL_20:
    if ((v2 & 0x40) == 0) {
      goto LABEL_42;
    }
    goto LABEL_38;
  }
LABEL_34:
  int v15 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 8);
  if (v15 >= 0x80)
  {
    int v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v15) + 1;
    int v2 = *((_DWORD *)this + 11);
  }
  else
  {
    int v16 = 2;
  }
  uint64_t v3 = (v16 + v3);
  if ((v2 & 0x40) != 0)
  {
LABEL_38:
    unint64_t v17 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 9);
    if (v17 >= 0x80) {
      int v18 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v17) + 1;
    }
    else {
      int v18 = 2;
    }
    uint64_t v3 = (v18 + v3);
  }
LABEL_42:
  *((_DWORD *)this + 10) = v3;
  return v3;
}

void CoreNavigation::CLP::LogEntry::PrivateData::ConstellationId::CheckTypeAndMergeFrom(CoreNavigation::CLP::LogEntry::PrivateData::ConstellationId *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  CoreNavigation::CLP::LogEntry::PrivateData::ConstellationId::MergeFrom(this, lpsrc);
}

void CoreNavigation::CLP::LogEntry::PrivateData::ConstellationId::CopyFrom(CoreNavigation::CLP::LogEntry::PrivateData::ConstellationId *this, const CoreNavigation::CLP::LogEntry::PrivateData::ConstellationId *a2)
{
  if (a2 != this)
  {
    (*(void (**)(CoreNavigation::CLP::LogEntry::PrivateData::ConstellationId *))(*(void *)this + 32))(this);
    CoreNavigation::CLP::LogEntry::PrivateData::ConstellationId::MergeFrom(this, a2);
  }
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::ConstellationId::IsInitialized(CoreNavigation::CLP::LogEntry::PrivateData::ConstellationId *this)
{
  return 1;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::ConstellationId::Swap(uint64_t this, CoreNavigation::CLP::LogEntry::PrivateData::ConstellationId *a2)
{
  if (a2 != (CoreNavigation::CLP::LogEntry::PrivateData::ConstellationId *)this)
  {
    int v2 = *(_DWORD *)(this + 16);
    *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
    *((_DWORD *)a2 + 4) = v2;
    uint64_t v3 = *(void *)(this + 8);
    *(void *)(this + 8) = *((void *)a2 + 1);
    *((void *)a2 + 1) = v3;
    LODWORD(v3) = *(_DWORD *)(this + 20);
    *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
    *((_DWORD *)a2 + 5) = v3;
    LODWORD(v3) = *(_DWORD *)(this + 24);
    *(_DWORD *)(this + 24) = *((_DWORD *)a2 + 6);
    *((_DWORD *)a2 + 6) = v3;
    LODWORD(v3) = *(_DWORD *)(this + 28);
    *(_DWORD *)(this + 28) = *((_DWORD *)a2 + 7);
    *((_DWORD *)a2 + 7) = v3;
    LODWORD(v3) = *(_DWORD *)(this + 32);
    *(_DWORD *)(this + 32) = *((_DWORD *)a2 + 8);
    *((_DWORD *)a2 + 8) = v3;
    LODWORD(v3) = *(_DWORD *)(this + 36);
    *(_DWORD *)(this + 36) = *((_DWORD *)a2 + 9);
    *((_DWORD *)a2 + 9) = v3;
    LODWORD(v3) = *(_DWORD *)(this + 44);
    *(_DWORD *)(this + 44) = *((_DWORD *)a2 + 11);
    *((_DWORD *)a2 + 11) = v3;
    LODWORD(v3) = *(_DWORD *)(this + 40);
    *(_DWORD *)(this + 40) = *((_DWORD *)a2 + 10);
    *((_DWORD *)a2 + 10) = v3;
  }
  return this;
}

void *CoreNavigation::CLP::LogEntry::PrivateData::ConstellationId::GetTypeName@<X0>(void *a1@<X8>)
{
  return sub_18DEDE7B0(a1, "CoreNavigation.CLP.LogEntry.PrivateData.ConstellationId");
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::SvId::SharedCtor(uint64_t this)
{
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

CoreNavigation::CLP::LogEntry::PrivateData::SvId *CoreNavigation::CLP::LogEntry::PrivateData::SvId::SvId(CoreNavigation::CLP::LogEntry::PrivateData::SvId *this, const CoreNavigation::CLP::LogEntry::PrivateData::SvId *a2)
{
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = &unk_1EDD0EA80;
  *((_DWORD *)this + 6) = 0;
  CoreNavigation::CLP::LogEntry::PrivateData::SvId::MergeFrom(this, a2);
  return this;
}

void sub_18DFBC300(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void CoreNavigation::CLP::LogEntry::PrivateData::SvId::MergeFrom(CoreNavigation::CLP::LogEntry::PrivateData::SvId *this, const CoreNavigation::CLP::LogEntry::PrivateData::SvId *a2)
{
  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v8);
  }
  LOBYTE(v4) = *((unsigned char *)a2 + 24);
  if ((_BYTE)v4)
  {
    if (*((unsigned char *)a2 + 24))
    {
      int v5 = *((_DWORD *)a2 + 4);
      *((_DWORD *)this + 6) |= 1u;
      *((_DWORD *)this + 4) = v5;
      int v4 = *((_DWORD *)a2 + 6);
    }
    if ((v4 & 2) != 0)
    {
      *((_DWORD *)this + 6) |= 2u;
      unsigned int v6 = (CoreNavigation::CLP::LogEntry::PrivateData::ConstellationId *)*((void *)this + 1);
      if (!v6) {
        operator new();
      }
      int v7 = (const CoreNavigation::CLP::LogEntry::PrivateData::ConstellationId *)*((void *)a2 + 1);
      if (!v7)
      {
        CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);
        int v7 = *(const CoreNavigation::CLP::LogEntry::PrivateData::ConstellationId **)(CoreNavigation::CLP::LogEntry::PrivateData::SvId::default_instance_
                                                                                   + 8);
      }
      CoreNavigation::CLP::LogEntry::PrivateData::ConstellationId::MergeFrom(v6, v7);
    }
  }
}

void sub_18DFBC434(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CoreNavigation::CLP::LogEntry::PrivateData::SvId::~SvId(CoreNavigation::CLP::LogEntry::PrivateData::SvId *this)
{
  *(void *)this = &unk_1EDD0EA80;
  CoreNavigation::CLP::LogEntry::PrivateData::SvId::SharedDtor(this);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  uint64_t vars8;

  CoreNavigation::CLP::LogEntry::PrivateData::SvId::~SvId(this);

  JUMPOUT(0x192FA6240);
}

void CoreNavigation::CLP::LogEntry::PrivateData::SvId::SharedDtor(CoreNavigation::CLP::LogEntry::PrivateData::SvId *this)
{
  CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);
  if ((CoreNavigation::CLP::LogEntry::PrivateData::SvId *)CoreNavigation::CLP::LogEntry::PrivateData::SvId::default_instance_ != this)
  {
    uint64_t v2 = *((void *)this + 1);
    if (v2)
    {
      uint64_t v3 = *(void (**)(void))(*(void *)v2 + 8);
      v3();
    }
  }
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::SvId::default_instance(CoreNavigation::CLP::LogEntry::PrivateData::SvId *this)
{
  return CoreNavigation::CLP::LogEntry::PrivateData::SvId::default_instance_;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::SvId::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 20) = a2;
  return this;
}

void CoreNavigation::CLP::LogEntry::PrivateData::SvId::New(CoreNavigation::CLP::LogEntry::PrivateData::SvId *this)
{
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::SvId::Clear(uint64_t this)
{
  uint64_t v1 = this;
  char v2 = *(unsigned char *)(this + 24);
  if (v2)
  {
    *(_DWORD *)(this + 16) = 0;
    if ((v2 & 2) != 0)
    {
      this = *(void *)(this + 8);
      if (this) {
        this = CoreNavigation::CLP::LogEntry::PrivateData::ConstellationId::Clear(this);
      }
    }
  }
  *(_DWORD *)(v1 + 24) = 0;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::SvId::MergePartialFromCodedStream(CoreNavigation::CLP::LogEntry::PrivateData::SvId *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  int v4 = (unsigned int *)((char *)this + 16);
  while (1)
  {
    do
    {
      while (1)
      {
        int v5 = (char *)*((void *)a2 + 1);
        if ((unint64_t)v5 >= *((void *)a2 + 2) || *v5 < 0)
        {
          unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
          *((_DWORD *)a2 + 8) = TagFallback;
          if (!TagFallback) {
            return 1;
          }
        }
        else
        {
          unint64_t TagFallback = *v5;
          *((_DWORD *)a2 + 8) = TagFallback;
          *((void *)a2 + 1) = v5 + 1;
          if (!TagFallback) {
            return 1;
          }
        }
        if (TagFallback >> 3 == 1) {
          break;
        }
        if (TagFallback >> 3 == 2)
        {
          int v7 = TagFallback & 7;
          if (v7 == 2)
          {
            int v8 = *((_DWORD *)this + 6);
            goto LABEL_24;
          }
        }
        else
        {
          int v7 = TagFallback & 7;
        }
LABEL_16:
        if (v7 == 4) {
          return 1;
        }
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0; {
      }
        }
      int v7 = TagFallback & 7;
      if ((TagFallback & 7) != 0) {
        goto LABEL_16;
      }
      int v10 = (char *)*((void *)a2 + 1);
      unint64_t v9 = *((void *)a2 + 2);
      if ((unint64_t)v10 >= v9 || *v10 < 0)
      {
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v4);
        if (!result) {
          return result;
        }
        int v11 = (unsigned char *)*((void *)a2 + 1);
        unint64_t v9 = *((void *)a2 + 2);
      }
      else
      {
        unsigned int *v4 = *v10;
        int v11 = v10 + 1;
        *((void *)a2 + 1) = v11;
      }
      int v8 = *((_DWORD *)this + 6) | 1;
      *((_DWORD *)this + 6) = v8;
    }
    while ((unint64_t)v11 >= v9 || *v11 != 18);
    *((void *)a2 + 1) = v11 + 1;
LABEL_24:
    *((_DWORD *)this + 6) = v8 | 2;
    unint64_t v13 = (CoreNavigation::CLP::LogEntry::PrivateData::ConstellationId *)*((void *)this + 1);
    if (!v13) {
      operator new();
    }
    unsigned int v20 = 0;
    int v14 = (char *)*((void *)a2 + 1);
    if ((unint64_t)v14 >= *((void *)a2 + 2) || *v14 < 0)
    {
      if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v20)) {
        return 0;
      }
    }
    else
    {
      unsigned int v20 = *v14;
      *((void *)a2 + 1) = v14 + 1;
    }
    int v15 = *((_DWORD *)a2 + 14);
    int v16 = *((_DWORD *)a2 + 15);
    *((_DWORD *)a2 + 14) = v15 + 1;
    if (v15 >= v16) {
      return 0;
    }
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
    if (!CoreNavigation::CLP::LogEntry::PrivateData::ConstellationId::MergePartialFromCodedStream(v13, a2)|| !*((unsigned char *)a2 + 36))
    {
      return 0;
    }
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
    int v17 = *((_DWORD *)a2 + 14);
    BOOL v18 = __OFSUB__(v17, 1);
    int v19 = v17 - 1;
    if (v19 < 0 == v18) {
      *((_DWORD *)a2 + 14) = v19;
    }
    if (*((void *)a2 + 1) == *((void *)a2 + 2)
      && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
    {
      *((_DWORD *)a2 + 8) = 0;
      uint64_t result = 1;
      *((unsigned char *)a2 + 36) = 1;
      return result;
    }
  }
}

unsigned int *CoreNavigation::CLP::LogEntry::PrivateData::SvId::SerializeWithCachedSizes(unsigned int *this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  int v5 = this;
  unsigned int v6 = this[6];
  if (v6)
  {
    this = (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, this[4], (uint64_t)a2, a4);
    if ((v5[6] & 2) == 0) {
      return this;
    }
  }
  else if ((v6 & 2) == 0)
  {
    return this;
  }
  uint64_t v7 = *((void *)v5 + 1);
  if (!v7)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)this);
    uint64_t v7 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::SvId::default_instance_ + 8);
  }

  return (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v7, a2, a4);
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::SvId::ByteSize(CoreNavigation::CLP::LogEntry::PrivateData::SvId *this)
{
  char v2 = *((unsigned char *)this + 24);
  if (v2)
  {
    if (*((unsigned char *)this + 24))
    {
      int v4 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 4);
      if (v4 >= 0x80)
      {
        uint64_t v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v4) + 1;
        if ((*((_DWORD *)this + 6) & 2) == 0) {
          goto LABEL_16;
        }
      }
      else
      {
        uint64_t v3 = 2;
        if ((v2 & 2) == 0) {
          goto LABEL_16;
        }
      }
    }
    else
    {
      uint64_t v3 = 0;
      if ((*((unsigned char *)this + 24) & 2) == 0) {
        goto LABEL_16;
      }
    }
    int v5 = (CoreNavigation::CLP::LogEntry::PrivateData::ConstellationId *)*((void *)this + 1);
    if (!v5)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(0);
      int v5 = *(CoreNavigation::CLP::LogEntry::PrivateData::ConstellationId **)(CoreNavigation::CLP::LogEntry::PrivateData::SvId::default_instance_
                                                                           + 8);
    }
    unsigned int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CoreNavigation::CLP::LogEntry::PrivateData::ConstellationId::ByteSize(v5);
    int v7 = (int)v6;
    if (v6 >= 0x80) {
      int v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6);
    }
    else {
      int v8 = 1;
    }
    uint64_t v3 = (v3 + v7 + v8 + 1);
  }
  else
  {
    uint64_t v3 = 0;
  }
LABEL_16:
  *((_DWORD *)this + 5) = v3;
  return v3;
}

void CoreNavigation::CLP::LogEntry::PrivateData::SvId::CheckTypeAndMergeFrom(CoreNavigation::CLP::LogEntry::PrivateData::SvId *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  CoreNavigation::CLP::LogEntry::PrivateData::SvId::MergeFrom(this, lpsrc);
}

void CoreNavigation::CLP::LogEntry::PrivateData::SvId::CopyFrom(CoreNavigation::CLP::LogEntry::PrivateData::SvId *this, const CoreNavigation::CLP::LogEntry::PrivateData::SvId *a2)
{
  if (a2 != this)
  {
    (*(void (**)(CoreNavigation::CLP::LogEntry::PrivateData::SvId *))(*(void *)this + 32))(this);
    CoreNavigation::CLP::LogEntry::PrivateData::SvId::MergeFrom(this, a2);
  }
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::SvId::IsInitialized(CoreNavigation::CLP::LogEntry::PrivateData::SvId *this)
{
  return 1;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::SvId::Swap(uint64_t this, CoreNavigation::CLP::LogEntry::PrivateData::SvId *a2)
{
  if (a2 != (CoreNavigation::CLP::LogEntry::PrivateData::SvId *)this)
  {
    int v2 = *(_DWORD *)(this + 16);
    *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
    *((_DWORD *)a2 + 4) = v2;
    uint64_t v3 = *(void *)(this + 8);
    *(void *)(this + 8) = *((void *)a2 + 1);
    *((void *)a2 + 1) = v3;
    LODWORD(v3) = *(_DWORD *)(this + 24);
    *(_DWORD *)(this + 24) = *((_DWORD *)a2 + 6);
    *((_DWORD *)a2 + 6) = v3;
    LODWORD(v3) = *(_DWORD *)(this + 20);
    *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
    *((_DWORD *)a2 + 5) = v3;
  }
  return this;
}

void *CoreNavigation::CLP::LogEntry::PrivateData::SvId::GetTypeName@<X0>(void *a1@<X8>)
{
  return sub_18DEDE7B0(a1, "CoreNavigation.CLP.LogEntry.PrivateData.SvId");
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::GpsL1SyncState::SharedCtor(uint64_t this)
{
  *(_DWORD *)(this + 16) = 0;
  *(void *)(this + 8) = 0;
  return this;
}

CoreNavigation::CLP::LogEntry::PrivateData::GpsL1SyncState *CoreNavigation::CLP::LogEntry::PrivateData::GpsL1SyncState::GpsL1SyncState(CoreNavigation::CLP::LogEntry::PrivateData::GpsL1SyncState *this, const CoreNavigation::CLP::LogEntry::PrivateData::GpsL1SyncState *a2)
{
  *(void *)this = &unk_1EDD0BD80;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 4) = 0;
  CoreNavigation::CLP::LogEntry::PrivateData::GpsL1SyncState::MergeFrom(this, a2);
  return this;
}

void sub_18DFBCBA0(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void CoreNavigation::CLP::LogEntry::PrivateData::GpsL1SyncState::MergeFrom(CoreNavigation::CLP::LogEntry::PrivateData::GpsL1SyncState *this, const CoreNavigation::CLP::LogEntry::PrivateData::GpsL1SyncState *a2)
{
  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }
  LOBYTE(v4) = *((unsigned char *)a2 + 16);
  if ((_BYTE)v4)
  {
    if (*((unsigned char *)a2 + 16))
    {
      char v6 = *((unsigned char *)a2 + 8);
      *((_DWORD *)this + 4) |= 1u;
      *((unsigned char *)this + 8) = v6;
      int v4 = *((_DWORD *)a2 + 4);
      if ((v4 & 2) == 0)
      {
LABEL_6:
        if ((v4 & 4) == 0) {
          goto LABEL_7;
        }
        goto LABEL_12;
      }
    }
    else if ((*((unsigned char *)a2 + 16) & 2) == 0)
    {
      goto LABEL_6;
    }
    char v7 = *((unsigned char *)a2 + 9);
    *((_DWORD *)this + 4) |= 2u;
    *((unsigned char *)this + 9) = v7;
    int v4 = *((_DWORD *)a2 + 4);
    if ((v4 & 4) == 0)
    {
LABEL_7:
      if ((v4 & 8) == 0) {
        return;
      }
      goto LABEL_8;
    }
LABEL_12:
    char v8 = *((unsigned char *)a2 + 10);
    *((_DWORD *)this + 4) |= 4u;
    *((unsigned char *)this + 10) = v8;
    if ((*((_DWORD *)a2 + 4) & 8) == 0) {
      return;
    }
LABEL_8:
    char v5 = *((unsigned char *)a2 + 11);
    *((_DWORD *)this + 4) |= 8u;
    *((unsigned char *)this + 11) = v5;
  }
}

void sub_18DFBCCA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CoreNavigation::CLP::LogEntry::PrivateData::GpsL1SyncState::~GpsL1SyncState(CoreNavigation::CLP::LogEntry::PrivateData::GpsL1SyncState *this)
{
  *(void *)this = &unk_1EDD0BD80;
  CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  uint64_t vars8;

  CoreNavigation::CLP::LogEntry::PrivateData::GpsL1SyncState::~GpsL1SyncState(this);

  JUMPOUT(0x192FA6240);
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::GpsL1SyncState::default_instance(CoreNavigation::CLP::LogEntry::PrivateData::GpsL1SyncState *this)
{
  return CoreNavigation::CLP::LogEntry::PrivateData::GpsL1SyncState::default_instance_;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::GpsL1SyncState::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 12) = a2;
  return this;
}

void CoreNavigation::CLP::LogEntry::PrivateData::GpsL1SyncState::New(CoreNavigation::CLP::LogEntry::PrivateData::GpsL1SyncState *this)
{
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::GpsL1SyncState::Clear(uint64_t this)
{
  if (*(unsigned char *)(this + 16)) {
    *(_DWORD *)(this + 8) = 0;
  }
  *(_DWORD *)(this + 16) = 0;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::GpsL1SyncState::MergePartialFromCodedStream(CoreNavigation::CLP::LogEntry::PrivateData::GpsL1SyncState *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  while (2)
  {
    int v4 = (char *)*((void *)a2 + 1);
    if ((unint64_t)v4 >= *((void *)a2 + 2) || *v4 < 0)
    {
      unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      if (!TagFallback) {
        return 1;
      }
    }
    else
    {
      unint64_t TagFallback = *v4;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((void *)a2 + 1) = v4 + 1;
      if (!TagFallback) {
        return 1;
      }
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        int v6 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_17;
        }
        unsigned int v21 = 0;
        char v8 = (char *)*((void *)a2 + 1);
        unint64_t v7 = *((void *)a2 + 2);
        if ((unint64_t)v8 < v7 && (*v8 & 0x80000000) == 0)
        {
          unsigned int v9 = *v8;
          int v10 = v8 + 1;
          *((void *)a2 + 1) = v10;
LABEL_23:
          *((unsigned char *)this + 8) = v9 != 0;
          *((_DWORD *)this + 4) |= 1u;
          if ((unint64_t)v10 < v7 && *v10 == 16)
          {
            int v11 = v10 + 1;
            *((void *)a2 + 1) = v11;
            goto LABEL_26;
          }
          continue;
        }
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v21);
        if (result)
        {
          unsigned int v9 = v21;
          int v10 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v7 = *((void *)a2 + 2);
          goto LABEL_23;
        }
        break;
      case 2u:
        int v6 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_17;
        }
        int v11 = (char *)*((void *)a2 + 1);
        unint64_t v7 = *((void *)a2 + 2);
LABEL_26:
        unsigned int v21 = 0;
        if ((unint64_t)v11 >= v7 || *v11 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v21);
          if (!result) {
            return result;
          }
          unsigned int v14 = v21;
          int v15 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v7 = *((void *)a2 + 2);
        }
        else
        {
          unsigned int v14 = *v11;
          int v15 = v11 + 1;
          *((void *)a2 + 1) = v15;
        }
        *((unsigned char *)this + 9) = v14 != 0;
        *((_DWORD *)this + 4) |= 2u;
        if ((unint64_t)v15 >= v7 || *v15 != 24) {
          continue;
        }
        int v12 = v15 + 1;
        *((void *)a2 + 1) = v12;
LABEL_34:
        unsigned int v21 = 0;
        if ((unint64_t)v12 >= v7 || *v12 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v21);
          if (!result) {
            return result;
          }
          unsigned int v16 = v21;
          int v17 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v7 = *((void *)a2 + 2);
        }
        else
        {
          unsigned int v16 = *v12;
          int v17 = v12 + 1;
          *((void *)a2 + 1) = v17;
        }
        *((unsigned char *)this + 10) = v16 != 0;
        *((_DWORD *)this + 4) |= 4u;
        if ((unint64_t)v17 >= v7 || *v17 != 32) {
          continue;
        }
        unint64_t v13 = v17 + 1;
        *((void *)a2 + 1) = v13;
LABEL_42:
        unsigned int v21 = 0;
        if ((unint64_t)v13 >= v7 || *v13 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v21);
          if (!result) {
            return result;
          }
          unsigned int v18 = v21;
          int v19 = (unsigned __int8 *)*((void *)a2 + 1);
          unint64_t v7 = *((void *)a2 + 2);
        }
        else
        {
          unsigned int v18 = *v13;
          int v19 = (unsigned __int8 *)(v13 + 1);
          *((void *)a2 + 1) = v19;
        }
        *((unsigned char *)this + 11) = v18 != 0;
        *((_DWORD *)this + 4) |= 8u;
        if (v19 != (unsigned __int8 *)v7 || !*((_DWORD *)a2 + 11) && *((_DWORD *)a2 + 6) != *((_DWORD *)a2 + 10)) {
          continue;
        }
        *((_DWORD *)a2 + 8) = 0;
        uint64_t result = 1;
        *((unsigned char *)a2 + 36) = 1;
        return result;
      case 3u:
        int v6 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_17;
        }
        int v12 = (char *)*((void *)a2 + 1);
        unint64_t v7 = *((void *)a2 + 2);
        goto LABEL_34;
      case 4u:
        int v6 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_17;
        }
        unint64_t v13 = (char *)*((void *)a2 + 1);
        unint64_t v7 = *((void *)a2 + 2);
        goto LABEL_42;
      default:
        int v6 = TagFallback & 7;
LABEL_17:
        if (v6 == 4) {
          return 1;
        }
        if (wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback))continue; {
        return 0;
        }
    }
    return result;
  }
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::GpsL1SyncState::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  int v6 = *(_DWORD *)(this + 16);
  if (v6)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned __int8 *)(this + 8), (uint64_t)a2, a4);
    int v6 = *(_DWORD *)(v5 + 16);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(unsigned __int8 *)(v5 + 10), (uint64_t)a2, a4);
      if ((*(_DWORD *)(v5 + 16) & 8) == 0) {
        return this;
      }
      goto LABEL_9;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(unsigned __int8 *)(v5 + 9), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 16);
  if ((v6 & 4) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v6 & 8) == 0) {
    return this;
  }
LABEL_9:
  uint64_t v7 = *(unsigned __int8 *)(v5 + 11);

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v7, (uint64_t)a2, a4);
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::GpsL1SyncState::ByteSize(CoreNavigation::CLP::LogEntry::PrivateData::GpsL1SyncState *this)
{
  int v1 = *((_DWORD *)this + 4);
  unsigned int v2 = 2 * (v1 & 1);
  if ((v1 & 2) != 0) {
    v2 += 2;
  }
  if ((v1 & 4) != 0) {
    v2 += 2;
  }
  if ((v1 & 8) != 0) {
    v2 += 2;
  }
  if (*((_DWORD *)this + 4)) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 0;
  }
  *((_DWORD *)this + 3) = v3;
  return v3;
}

void CoreNavigation::CLP::LogEntry::PrivateData::GpsL1SyncState::CheckTypeAndMergeFrom(CoreNavigation::CLP::LogEntry::PrivateData::GpsL1SyncState *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  CoreNavigation::CLP::LogEntry::PrivateData::GpsL1SyncState::MergeFrom(this, lpsrc);
}

void CoreNavigation::CLP::LogEntry::PrivateData::GpsL1SyncState::CopyFrom(CoreNavigation::CLP::LogEntry::PrivateData::GpsL1SyncState *this, const CoreNavigation::CLP::LogEntry::PrivateData::GpsL1SyncState *a2)
{
  if (a2 != this)
  {
    (*(void (**)(CoreNavigation::CLP::LogEntry::PrivateData::GpsL1SyncState *))(*(void *)this + 32))(this);
    CoreNavigation::CLP::LogEntry::PrivateData::GpsL1SyncState::MergeFrom(this, a2);
  }
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::GpsL1SyncState::IsInitialized(CoreNavigation::CLP::LogEntry::PrivateData::GpsL1SyncState *this)
{
  return 1;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::GpsL1SyncState::Swap(uint64_t this, CoreNavigation::CLP::LogEntry::PrivateData::GpsL1SyncState *a2)
{
  if (a2 != (CoreNavigation::CLP::LogEntry::PrivateData::GpsL1SyncState *)this)
  {
    char v2 = *(unsigned char *)(this + 8);
    *(unsigned char *)(this + 8) = *((unsigned char *)a2 + 8);
    *((unsigned char *)a2 + 8) = v2;
    char v3 = *(unsigned char *)(this + 9);
    *(unsigned char *)(this + 9) = *((unsigned char *)a2 + 9);
    *((unsigned char *)a2 + 9) = v3;
    char v4 = *(unsigned char *)(this + 10);
    *(unsigned char *)(this + 10) = *((unsigned char *)a2 + 10);
    *((unsigned char *)a2 + 10) = v4;
    char v5 = *(unsigned char *)(this + 11);
    *(unsigned char *)(this + 11) = *((unsigned char *)a2 + 11);
    *((unsigned char *)a2 + 11) = v5;
    int v6 = *(_DWORD *)(this + 16);
    *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
    *((_DWORD *)a2 + 4) = v6;
    int v7 = *(_DWORD *)(this + 12);
    *(_DWORD *)(this + 12) = *((_DWORD *)a2 + 3);
    *((_DWORD *)a2 + 3) = v7;
  }
  return this;
}

void *CoreNavigation::CLP::LogEntry::PrivateData::GpsL1SyncState::GetTypeName@<X0>(void *a1@<X8>)
{
  return sub_18DEDE7B0(a1, "CoreNavigation.CLP.LogEntry.PrivateData.GpsL1SyncState");
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::GpsL2CSyncState::SharedCtor(uint64_t this)
{
  *(void *)(this + 16) = 0;
  *(_DWORD *)(this + 8) = 0;
  *(unsigned char *)(this + 12) = 0;
  return this;
}

CoreNavigation::CLP::LogEntry::PrivateData::GpsL2CSyncState *CoreNavigation::CLP::LogEntry::PrivateData::GpsL2CSyncState::GpsL2CSyncState(CoreNavigation::CLP::LogEntry::PrivateData::GpsL2CSyncState *this, const CoreNavigation::CLP::LogEntry::PrivateData::GpsL2CSyncState *a2)
{
  *(void *)this = &unk_1EDD0C500;
  *((void *)this + 2) = 0;
  *((_DWORD *)this + 2) = 0;
  *((unsigned char *)this + 12) = 0;
  CoreNavigation::CLP::LogEntry::PrivateData::GpsL2CSyncState::MergeFrom(this, a2);
  return this;
}

void sub_18DFBD3D4(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void CoreNavigation::CLP::LogEntry::PrivateData::GpsL2CSyncState::MergeFrom(CoreNavigation::CLP::LogEntry::PrivateData::GpsL2CSyncState *this, const CoreNavigation::CLP::LogEntry::PrivateData::GpsL2CSyncState *a2)
{
  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v10);
  }
  LOBYTE(v4) = *((unsigned char *)a2 + 20);
  if ((_BYTE)v4)
  {
    if (*((unsigned char *)a2 + 20))
    {
      char v6 = *((unsigned char *)a2 + 8);
      *((_DWORD *)this + 5) |= 1u;
      *((unsigned char *)this + 8) = v6;
      int v4 = *((_DWORD *)a2 + 5);
      if ((v4 & 2) == 0)
      {
LABEL_6:
        if ((v4 & 4) == 0) {
          goto LABEL_7;
        }
        goto LABEL_13;
      }
    }
    else if ((*((unsigned char *)a2 + 20) & 2) == 0)
    {
      goto LABEL_6;
    }
    char v7 = *((unsigned char *)a2 + 9);
    *((_DWORD *)this + 5) |= 2u;
    *((unsigned char *)this + 9) = v7;
    int v4 = *((_DWORD *)a2 + 5);
    if ((v4 & 4) == 0)
    {
LABEL_7:
      if ((v4 & 8) == 0) {
        goto LABEL_8;
      }
      goto LABEL_14;
    }
LABEL_13:
    char v8 = *((unsigned char *)a2 + 10);
    *((_DWORD *)this + 5) |= 4u;
    *((unsigned char *)this + 10) = v8;
    int v4 = *((_DWORD *)a2 + 5);
    if ((v4 & 8) == 0)
    {
LABEL_8:
      if ((v4 & 0x10) == 0) {
        return;
      }
      goto LABEL_9;
    }
LABEL_14:
    char v9 = *((unsigned char *)a2 + 11);
    *((_DWORD *)this + 5) |= 8u;
    *((unsigned char *)this + 11) = v9;
    if ((*((_DWORD *)a2 + 5) & 0x10) == 0) {
      return;
    }
LABEL_9:
    char v5 = *((unsigned char *)a2 + 12);
    *((_DWORD *)this + 5) |= 0x10u;
    *((unsigned char *)this + 12) = v5;
  }
}

void sub_18DFBD4FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CoreNavigation::CLP::LogEntry::PrivateData::GpsL2CSyncState::~GpsL2CSyncState(CoreNavigation::CLP::LogEntry::PrivateData::GpsL2CSyncState *this)
{
  *(void *)this = &unk_1EDD0C500;
  CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  uint64_t vars8;

  CoreNavigation::CLP::LogEntry::PrivateData::GpsL2CSyncState::~GpsL2CSyncState(this);

  JUMPOUT(0x192FA6240);
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::GpsL2CSyncState::default_instance(CoreNavigation::CLP::LogEntry::PrivateData::GpsL2CSyncState *this)
{
  return CoreNavigation::CLP::LogEntry::PrivateData::GpsL2CSyncState::default_instance_;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::GpsL2CSyncState::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 16) = a2;
  return this;
}

void CoreNavigation::CLP::LogEntry::PrivateData::GpsL2CSyncState::New(CoreNavigation::CLP::LogEntry::PrivateData::GpsL2CSyncState *this)
{
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::GpsL2CSyncState::Clear(uint64_t this)
{
  if (*(unsigned char *)(this + 20))
  {
    *(unsigned char *)(this + 12) = 0;
    *(_DWORD *)(this + 8) = 0;
  }
  *(_DWORD *)(this + 20) = 0;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::GpsL2CSyncState::MergePartialFromCodedStream(CoreNavigation::CLP::LogEntry::PrivateData::GpsL2CSyncState *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  while (2)
  {
    int v4 = (char *)*((void *)a2 + 1);
    if ((unint64_t)v4 >= *((void *)a2 + 2) || *v4 < 0)
    {
      unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      if (!TagFallback) {
        return 1;
      }
    }
    else
    {
      unint64_t TagFallback = *v4;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((void *)a2 + 1) = v4 + 1;
      if (!TagFallback) {
        return 1;
      }
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        int v6 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_19;
        }
        unsigned int v24 = 0;
        char v8 = (char *)*((void *)a2 + 1);
        unint64_t v7 = *((void *)a2 + 2);
        if ((unint64_t)v8 < v7 && (*v8 & 0x80000000) == 0)
        {
          unsigned int v9 = *v8;
          int v10 = v8 + 1;
          *((void *)a2 + 1) = v10;
LABEL_25:
          *((unsigned char *)this + 8) = v9 != 0;
          *((_DWORD *)this + 5) |= 1u;
          if ((unint64_t)v10 < v7 && *v10 == 16)
          {
            int v11 = v10 + 1;
            *((void *)a2 + 1) = v11;
            goto LABEL_28;
          }
          continue;
        }
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v24);
        if (result)
        {
          unsigned int v9 = v24;
          int v10 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v7 = *((void *)a2 + 2);
          goto LABEL_25;
        }
        break;
      case 2u:
        int v6 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_19;
        }
        int v11 = (char *)*((void *)a2 + 1);
        unint64_t v7 = *((void *)a2 + 2);
LABEL_28:
        unsigned int v24 = 0;
        if ((unint64_t)v11 >= v7 || *v11 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v24);
          if (!result) {
            return result;
          }
          unsigned int v15 = v24;
          unsigned int v16 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v7 = *((void *)a2 + 2);
        }
        else
        {
          unsigned int v15 = *v11;
          unsigned int v16 = v11 + 1;
          *((void *)a2 + 1) = v16;
        }
        *((unsigned char *)this + 9) = v15 != 0;
        *((_DWORD *)this + 5) |= 2u;
        if ((unint64_t)v16 >= v7 || *v16 != 24) {
          continue;
        }
        int v12 = v16 + 1;
        *((void *)a2 + 1) = v12;
LABEL_36:
        unsigned int v24 = 0;
        if ((unint64_t)v12 >= v7 || *v12 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v24);
          if (!result) {
            return result;
          }
          unsigned int v17 = v24;
          unsigned int v18 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v7 = *((void *)a2 + 2);
        }
        else
        {
          unsigned int v17 = *v12;
          unsigned int v18 = v12 + 1;
          *((void *)a2 + 1) = v18;
        }
        *((unsigned char *)this + 10) = v17 != 0;
        *((_DWORD *)this + 5) |= 4u;
        if ((unint64_t)v18 >= v7 || *v18 != 32) {
          continue;
        }
        unint64_t v13 = v18 + 1;
        *((void *)a2 + 1) = v13;
LABEL_44:
        unsigned int v24 = 0;
        if ((unint64_t)v13 >= v7 || *v13 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v24);
          if (!result) {
            return result;
          }
          unsigned int v19 = v24;
          unsigned int v20 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v7 = *((void *)a2 + 2);
        }
        else
        {
          unsigned int v19 = *v13;
          unsigned int v20 = v13 + 1;
          *((void *)a2 + 1) = v20;
        }
        *((unsigned char *)this + 11) = v19 != 0;
        *((_DWORD *)this + 5) |= 8u;
        if ((unint64_t)v20 >= v7 || *v20 != 40) {
          continue;
        }
        unsigned int v14 = v20 + 1;
        *((void *)a2 + 1) = v14;
LABEL_52:
        unsigned int v24 = 0;
        if ((unint64_t)v14 >= v7 || *v14 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v24);
          if (!result) {
            return result;
          }
          unsigned int v21 = v24;
          int v22 = (unsigned __int8 *)*((void *)a2 + 1);
          unint64_t v7 = *((void *)a2 + 2);
        }
        else
        {
          unsigned int v21 = *v14;
          int v22 = (unsigned __int8 *)(v14 + 1);
          *((void *)a2 + 1) = v22;
        }
        *((unsigned char *)this + 12) = v21 != 0;
        *((_DWORD *)this + 5) |= 0x10u;
        if (v22 != (unsigned __int8 *)v7 || !*((_DWORD *)a2 + 11) && *((_DWORD *)a2 + 6) != *((_DWORD *)a2 + 10)) {
          continue;
        }
        *((_DWORD *)a2 + 8) = 0;
        uint64_t result = 1;
        *((unsigned char *)a2 + 36) = 1;
        return result;
      case 3u:
        int v6 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_19;
        }
        int v12 = (char *)*((void *)a2 + 1);
        unint64_t v7 = *((void *)a2 + 2);
        goto LABEL_36;
      case 4u:
        int v6 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_19;
        }
        unint64_t v13 = (char *)*((void *)a2 + 1);
        unint64_t v7 = *((void *)a2 + 2);
        goto LABEL_44;
      case 5u:
        int v6 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_19;
        }
        unsigned int v14 = (char *)*((void *)a2 + 1);
        unint64_t v7 = *((void *)a2 + 2);
        goto LABEL_52;
      default:
        int v6 = TagFallback & 7;
LABEL_19:
        if (v6 == 4) {
          return 1;
        }
        if (wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback))continue; {
        return 0;
        }
    }
    return result;
  }
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::GpsL2CSyncState::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  int v6 = *(_DWORD *)(this + 20);
  if (v6)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned __int8 *)(this + 8), (uint64_t)a2, a4);
    int v6 = *(_DWORD *)(v5 + 20);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(unsigned __int8 *)(v5 + 9), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 20);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
LABEL_10:
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(unsigned __int8 *)(v5 + 11), (uint64_t)a2, a4);
    if ((*(_DWORD *)(v5 + 20) & 0x10) == 0) {
      return this;
    }
    goto LABEL_11;
  }
LABEL_9:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(unsigned __int8 *)(v5 + 10), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 20);
  if ((v6 & 8) != 0) {
    goto LABEL_10;
  }
LABEL_5:
  if ((v6 & 0x10) == 0) {
    return this;
  }
LABEL_11:
  uint64_t v7 = *(unsigned __int8 *)(v5 + 12);

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, v7, (uint64_t)a2, a4);
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::GpsL2CSyncState::ByteSize(CoreNavigation::CLP::LogEntry::PrivateData::GpsL2CSyncState *this)
{
  int v1 = *((_DWORD *)this + 5);
  if ((_BYTE)v1)
  {
    unsigned int v2 = 2 * (v1 & 1);
    if ((v1 & 2) != 0) {
      v2 += 2;
    }
    if ((v1 & 4) != 0) {
      v2 += 2;
    }
    if ((v1 & 8) != 0) {
      v2 += 2;
    }
    if ((v1 & 0x10) != 0) {
      uint64_t v3 = v2 + 2;
    }
    else {
      uint64_t v3 = v2;
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  *((_DWORD *)this + 4) = v3;
  return v3;
}

void CoreNavigation::CLP::LogEntry::PrivateData::GpsL2CSyncState::CheckTypeAndMergeFrom(CoreNavigation::CLP::LogEntry::PrivateData::GpsL2CSyncState *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  CoreNavigation::CLP::LogEntry::PrivateData::GpsL2CSyncState::MergeFrom(this, lpsrc);
}

void CoreNavigation::CLP::LogEntry::PrivateData::GpsL2CSyncState::CopyFrom(CoreNavigation::CLP::LogEntry::PrivateData::GpsL2CSyncState *this, const CoreNavigation::CLP::LogEntry::PrivateData::GpsL2CSyncState *a2)
{
  if (a2 != this)
  {
    (*(void (**)(CoreNavigation::CLP::LogEntry::PrivateData::GpsL2CSyncState *))(*(void *)this + 32))(this);
    CoreNavigation::CLP::LogEntry::PrivateData::GpsL2CSyncState::MergeFrom(this, a2);
  }
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::GpsL2CSyncState::IsInitialized(CoreNavigation::CLP::LogEntry::PrivateData::GpsL2CSyncState *this)
{
  return 1;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::GpsL2CSyncState::Swap(uint64_t this, CoreNavigation::CLP::LogEntry::PrivateData::GpsL2CSyncState *a2)
{
  if (a2 != (CoreNavigation::CLP::LogEntry::PrivateData::GpsL2CSyncState *)this)
  {
    char v2 = *(unsigned char *)(this + 8);
    *(unsigned char *)(this + 8) = *((unsigned char *)a2 + 8);
    *((unsigned char *)a2 + 8) = v2;
    char v3 = *(unsigned char *)(this + 9);
    *(unsigned char *)(this + 9) = *((unsigned char *)a2 + 9);
    *((unsigned char *)a2 + 9) = v3;
    char v4 = *(unsigned char *)(this + 10);
    *(unsigned char *)(this + 10) = *((unsigned char *)a2 + 10);
    *((unsigned char *)a2 + 10) = v4;
    char v5 = *(unsigned char *)(this + 11);
    *(unsigned char *)(this + 11) = *((unsigned char *)a2 + 11);
    *((unsigned char *)a2 + 11) = v5;
    char v6 = *(unsigned char *)(this + 12);
    *(unsigned char *)(this + 12) = *((unsigned char *)a2 + 12);
    *((unsigned char *)a2 + 12) = v6;
    int v7 = *(_DWORD *)(this + 20);
    *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
    *((_DWORD *)a2 + 5) = v7;
    int v8 = *(_DWORD *)(this + 16);
    *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
    *((_DWORD *)a2 + 4) = v8;
  }
  return this;
}

void *CoreNavigation::CLP::LogEntry::PrivateData::GpsL2CSyncState::GetTypeName@<X0>(void *a1@<X8>)
{
  return sub_18DEDE7B0(a1, "CoreNavigation.CLP.LogEntry.PrivateData.GpsL2CSyncState");
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::GpsL5SyncState::SharedCtor(uint64_t this)
{
  *(_DWORD *)(this + 16) = 0;
  *(void *)(this + 8) = 0;
  return this;
}

CoreNavigation::CLP::LogEntry::PrivateData::GpsL5SyncState *CoreNavigation::CLP::LogEntry::PrivateData::GpsL5SyncState::GpsL5SyncState(CoreNavigation::CLP::LogEntry::PrivateData::GpsL5SyncState *this, const CoreNavigation::CLP::LogEntry::PrivateData::GpsL5SyncState *a2)
{
  *(void *)this = &unk_1EDD0BDF8;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 4) = 0;
  CoreNavigation::CLP::LogEntry::PrivateData::GpsL5SyncState::MergeFrom(this, a2);
  return this;
}

void sub_18DFBDCE4(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void CoreNavigation::CLP::LogEntry::PrivateData::GpsL5SyncState::MergeFrom(CoreNavigation::CLP::LogEntry::PrivateData::GpsL5SyncState *this, const CoreNavigation::CLP::LogEntry::PrivateData::GpsL5SyncState *a2)
{
  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }
  LOBYTE(v4) = *((unsigned char *)a2 + 16);
  if ((_BYTE)v4)
  {
    if (*((unsigned char *)a2 + 16))
    {
      char v6 = *((unsigned char *)a2 + 8);
      *((_DWORD *)this + 4) |= 1u;
      *((unsigned char *)this + 8) = v6;
      int v4 = *((_DWORD *)a2 + 4);
      if ((v4 & 2) == 0)
      {
LABEL_6:
        if ((v4 & 4) == 0) {
          goto LABEL_7;
        }
        goto LABEL_12;
      }
    }
    else if ((*((unsigned char *)a2 + 16) & 2) == 0)
    {
      goto LABEL_6;
    }
    char v7 = *((unsigned char *)a2 + 9);
    *((_DWORD *)this + 4) |= 2u;
    *((unsigned char *)this + 9) = v7;
    int v4 = *((_DWORD *)a2 + 4);
    if ((v4 & 4) == 0)
    {
LABEL_7:
      if ((v4 & 8) == 0) {
        return;
      }
      goto LABEL_8;
    }
LABEL_12:
    char v8 = *((unsigned char *)a2 + 10);
    *((_DWORD *)this + 4) |= 4u;
    *((unsigned char *)this + 10) = v8;
    if ((*((_DWORD *)a2 + 4) & 8) == 0) {
      return;
    }
LABEL_8:
    char v5 = *((unsigned char *)a2 + 11);
    *((_DWORD *)this + 4) |= 8u;
    *((unsigned char *)this + 11) = v5;
  }
}

void sub_18DFBDDEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CoreNavigation::CLP::LogEntry::PrivateData::GpsL5SyncState::~GpsL5SyncState(CoreNavigation::CLP::LogEntry::PrivateData::GpsL5SyncState *this)
{
  *(void *)this = &unk_1EDD0BDF8;
  CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  uint64_t vars8;

  CoreNavigation::CLP::LogEntry::PrivateData::GpsL5SyncState::~GpsL5SyncState(this);

  JUMPOUT(0x192FA6240);
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::GpsL5SyncState::default_instance(CoreNavigation::CLP::LogEntry::PrivateData::GpsL5SyncState *this)
{
  return CoreNavigation::CLP::LogEntry::PrivateData::GpsL5SyncState::default_instance_;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::GpsL5SyncState::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 12) = a2;
  return this;
}

void CoreNavigation::CLP::LogEntry::PrivateData::GpsL5SyncState::New(CoreNavigation::CLP::LogEntry::PrivateData::GpsL5SyncState *this)
{
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::GpsL5SyncState::Clear(uint64_t this)
{
  if (*(unsigned char *)(this + 16)) {
    *(_DWORD *)(this + 8) = 0;
  }
  *(_DWORD *)(this + 16) = 0;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::GpsL5SyncState::MergePartialFromCodedStream(CoreNavigation::CLP::LogEntry::PrivateData::GpsL5SyncState *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  while (2)
  {
    int v4 = (char *)*((void *)a2 + 1);
    if ((unint64_t)v4 >= *((void *)a2 + 2) || *v4 < 0)
    {
      unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      if (!TagFallback) {
        return 1;
      }
    }
    else
    {
      unint64_t TagFallback = *v4;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((void *)a2 + 1) = v4 + 1;
      if (!TagFallback) {
        return 1;
      }
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        int v6 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_17;
        }
        unsigned int v21 = 0;
        char v8 = (char *)*((void *)a2 + 1);
        unint64_t v7 = *((void *)a2 + 2);
        if ((unint64_t)v8 < v7 && (*v8 & 0x80000000) == 0)
        {
          unsigned int v9 = *v8;
          int v10 = v8 + 1;
          *((void *)a2 + 1) = v10;
LABEL_23:
          *((unsigned char *)this + 8) = v9 != 0;
          *((_DWORD *)this + 4) |= 1u;
          if ((unint64_t)v10 < v7 && *v10 == 16)
          {
            int v11 = v10 + 1;
            *((void *)a2 + 1) = v11;
            goto LABEL_26;
          }
          continue;
        }
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v21);
        if (result)
        {
          unsigned int v9 = v21;
          int v10 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v7 = *((void *)a2 + 2);
          goto LABEL_23;
        }
        break;
      case 2u:
        int v6 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_17;
        }
        int v11 = (char *)*((void *)a2 + 1);
        unint64_t v7 = *((void *)a2 + 2);
LABEL_26:
        unsigned int v21 = 0;
        if ((unint64_t)v11 >= v7 || *v11 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v21);
          if (!result) {
            return result;
          }
          unsigned int v14 = v21;
          unsigned int v15 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v7 = *((void *)a2 + 2);
        }
        else
        {
          unsigned int v14 = *v11;
          unsigned int v15 = v11 + 1;
          *((void *)a2 + 1) = v15;
        }
        *((unsigned char *)this + 9) = v14 != 0;
        *((_DWORD *)this + 4) |= 2u;
        if ((unint64_t)v15 >= v7 || *v15 != 24) {
          continue;
        }
        int v12 = v15 + 1;
        *((void *)a2 + 1) = v12;
LABEL_34:
        unsigned int v21 = 0;
        if ((unint64_t)v12 >= v7 || *v12 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v21);
          if (!result) {
            return result;
          }
          unsigned int v16 = v21;
          unsigned int v17 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v7 = *((void *)a2 + 2);
        }
        else
        {
          unsigned int v16 = *v12;
          unsigned int v17 = v12 + 1;
          *((void *)a2 + 1) = v17;
        }
        *((unsigned char *)this + 10) = v16 != 0;
        *((_DWORD *)this + 4) |= 4u;
        if ((unint64_t)v17 >= v7 || *v17 != 32) {
          continue;
        }
        unint64_t v13 = v17 + 1;
        *((void *)a2 + 1) = v13;
LABEL_42:
        unsigned int v21 = 0;
        if ((unint64_t)v13 >= v7 || *v13 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v21);
          if (!result) {
            return result;
          }
          unsigned int v18 = v21;
          unsigned int v19 = (unsigned __int8 *)*((void *)a2 + 1);
          unint64_t v7 = *((void *)a2 + 2);
        }
        else
        {
          unsigned int v18 = *v13;
          unsigned int v19 = (unsigned __int8 *)(v13 + 1);
          *((void *)a2 + 1) = v19;
        }
        *((unsigned char *)this + 11) = v18 != 0;
        *((_DWORD *)this + 4) |= 8u;
        if (v19 != (unsigned __int8 *)v7 || !*((_DWORD *)a2 + 11) && *((_DWORD *)a2 + 6) != *((_DWORD *)a2 + 10)) {
          continue;
        }
        *((_DWORD *)a2 + 8) = 0;
        uint64_t result = 1;
        *((unsigned char *)a2 + 36) = 1;
        return result;
      case 3u:
        int v6 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_17;
        }
        int v12 = (char *)*((void *)a2 + 1);
        unint64_t v7 = *((void *)a2 + 2);
        goto LABEL_34;
      case 4u:
        int v6 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_17;
        }
        unint64_t v13 = (char *)*((void *)a2 + 1);
        unint64_t v7 = *((void *)a2 + 2);
        goto LABEL_42;
      default:
        int v6 = TagFallback & 7;
LABEL_17:
        if (v6 == 4) {
          return 1;
        }
        if (wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback))continue; {
        return 0;
        }
    }
    return result;
  }
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::GpsL5SyncState::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  int v6 = *(_DWORD *)(this + 16);
  if (v6)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned __int8 *)(this + 8), (uint64_t)a2, a4);
    int v6 = *(_DWORD *)(v5 + 16);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(unsigned __int8 *)(v5 + 10), (uint64_t)a2, a4);
      if ((*(_DWORD *)(v5 + 16) & 8) == 0) {
        return this;
      }
      goto LABEL_9;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(unsigned __int8 *)(v5 + 9), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 16);
  if ((v6 & 4) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v6 & 8) == 0) {
    return this;
  }
LABEL_9:
  uint64_t v7 = *(unsigned __int8 *)(v5 + 11);

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v7, (uint64_t)a2, a4);
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::GpsL5SyncState::ByteSize(CoreNavigation::CLP::LogEntry::PrivateData::GpsL5SyncState *this)
{
  int v1 = *((_DWORD *)this + 4);
  unsigned int v2 = 2 * (v1 & 1);
  if ((v1 & 2) != 0) {
    v2 += 2;
  }
  if ((v1 & 4) != 0) {
    v2 += 2;
  }
  if ((v1 & 8) != 0) {
    v2 += 2;
  }
  if (*((_DWORD *)this + 4)) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 0;
  }
  *((_DWORD *)this + 3) = v3;
  return v3;
}

void CoreNavigation::CLP::LogEntry::PrivateData::GpsL5SyncState::CheckTypeAndMergeFrom(CoreNavigation::CLP::LogEntry::PrivateData::GpsL5SyncState *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  CoreNavigation::CLP::LogEntry::PrivateData::GpsL5SyncState::MergeFrom(this, lpsrc);
}

void CoreNavigation::CLP::LogEntry::PrivateData::GpsL5SyncState::CopyFrom(CoreNavigation::CLP::LogEntry::PrivateData::GpsL5SyncState *this, const CoreNavigation::CLP::LogEntry::PrivateData::GpsL5SyncState *a2)
{
  if (a2 != this)
  {
    (*(void (**)(CoreNavigation::CLP::LogEntry::PrivateData::GpsL5SyncState *))(*(void *)this + 32))(this);
    CoreNavigation::CLP::LogEntry::PrivateData::GpsL5SyncState::MergeFrom(this, a2);
  }
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::GpsL5SyncState::IsInitialized(CoreNavigation::CLP::LogEntry::PrivateData::GpsL5SyncState *this)
{
  return 1;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::GpsL5SyncState::Swap(uint64_t this, CoreNavigation::CLP::LogEntry::PrivateData::GpsL5SyncState *a2)
{
  if (a2 != (CoreNavigation::CLP::LogEntry::PrivateData::GpsL5SyncState *)this)
  {
    char v2 = *(unsigned char *)(this + 8);
    *(unsigned char *)(this + 8) = *((unsigned char *)a2 + 8);
    *((unsigned char *)a2 + 8) = v2;
    char v3 = *(unsigned char *)(this + 9);
    *(unsigned char *)(this + 9) = *((unsigned char *)a2 + 9);
    *((unsigned char *)a2 + 9) = v3;
    char v4 = *(unsigned char *)(this + 10);
    *(unsigned char *)(this + 10) = *((unsigned char *)a2 + 10);
    *((unsigned char *)a2 + 10) = v4;
    char v5 = *(unsigned char *)(this + 11);
    *(unsigned char *)(this + 11) = *((unsigned char *)a2 + 11);
    *((unsigned char *)a2 + 11) = v5;
    int v6 = *(_DWORD *)(this + 16);
    *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
    *((_DWORD *)a2 + 4) = v6;
    int v7 = *(_DWORD *)(this + 12);
    *(_DWORD *)(this + 12) = *((_DWORD *)a2 + 3);
    *((_DWORD *)a2 + 3) = v7;
  }
  return this;
}

void *CoreNavigation::CLP::LogEntry::PrivateData::GpsL5SyncState::GetTypeName@<X0>(void *a1@<X8>)
{
  return sub_18DEDE7B0(a1, "CoreNavigation.CLP.LogEntry.PrivateData.GpsL5SyncState");
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::GlonassL1fSyncState::SharedCtor(uint64_t this)
{
  *(void *)(this + 16) = 0;
  *(_DWORD *)(this + 8) = 0;
  *(unsigned char *)(this + 12) = 0;
  return this;
}

CoreNavigation::CLP::LogEntry::PrivateData::GlonassL1fSyncState *CoreNavigation::CLP::LogEntry::PrivateData::GlonassL1fSyncState::GlonassL1fSyncState(CoreNavigation::CLP::LogEntry::PrivateData::GlonassL1fSyncState *this, const CoreNavigation::CLP::LogEntry::PrivateData::GlonassL1fSyncState *a2)
{
  *(void *)this = &unk_1EDD0D5E0;
  *((void *)this + 2) = 0;
  *((_DWORD *)this + 2) = 0;
  *((unsigned char *)this + 12) = 0;
  CoreNavigation::CLP::LogEntry::PrivateData::GlonassL1fSyncState::MergeFrom(this, a2);
  return this;
}

void sub_18DFBE518(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void CoreNavigation::CLP::LogEntry::PrivateData::GlonassL1fSyncState::MergeFrom(CoreNavigation::CLP::LogEntry::PrivateData::GlonassL1fSyncState *this, const CoreNavigation::CLP::LogEntry::PrivateData::GlonassL1fSyncState *a2)
{
  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v10);
  }
  LOBYTE(v4) = *((unsigned char *)a2 + 20);
  if ((_BYTE)v4)
  {
    if (*((unsigned char *)a2 + 20))
    {
      char v6 = *((unsigned char *)a2 + 8);
      *((_DWORD *)this + 5) |= 1u;
      *((unsigned char *)this + 8) = v6;
      int v4 = *((_DWORD *)a2 + 5);
      if ((v4 & 2) == 0)
      {
LABEL_6:
        if ((v4 & 4) == 0) {
          goto LABEL_7;
        }
        goto LABEL_13;
      }
    }
    else if ((*((unsigned char *)a2 + 20) & 2) == 0)
    {
      goto LABEL_6;
    }
    char v7 = *((unsigned char *)a2 + 9);
    *((_DWORD *)this + 5) |= 2u;
    *((unsigned char *)this + 9) = v7;
    int v4 = *((_DWORD *)a2 + 5);
    if ((v4 & 4) == 0)
    {
LABEL_7:
      if ((v4 & 8) == 0) {
        goto LABEL_8;
      }
      goto LABEL_14;
    }
LABEL_13:
    char v8 = *((unsigned char *)a2 + 10);
    *((_DWORD *)this + 5) |= 4u;
    *((unsigned char *)this + 10) = v8;
    int v4 = *((_DWORD *)a2 + 5);
    if ((v4 & 8) == 0)
    {
LABEL_8:
      if ((v4 & 0x10) == 0) {
        return;
      }
      goto LABEL_9;
    }
LABEL_14:
    char v9 = *((unsigned char *)a2 + 11);
    *((_DWORD *)this + 5) |= 8u;
    *((unsigned char *)this + 11) = v9;
    if ((*((_DWORD *)a2 + 5) & 0x10) == 0) {
      return;
    }
LABEL_9:
    char v5 = *((unsigned char *)a2 + 12);
    *((_DWORD *)this + 5) |= 0x10u;
    *((unsigned char *)this + 12) = v5;
  }
}

void sub_18DFBE640(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CoreNavigation::CLP::LogEntry::PrivateData::GlonassL1fSyncState::~GlonassL1fSyncState(CoreNavigation::CLP::LogEntry::PrivateData::GlonassL1fSyncState *this)
{
  *(void *)this = &unk_1EDD0D5E0;
  CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  uint64_t vars8;

  CoreNavigation::CLP::LogEntry::PrivateData::GlonassL1fSyncState::~GlonassL1fSyncState(this);

  JUMPOUT(0x192FA6240);
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::GlonassL1fSyncState::default_instance(CoreNavigation::CLP::LogEntry::PrivateData::GlonassL1fSyncState *this)
{
  return CoreNavigation::CLP::LogEntry::PrivateData::GlonassL1fSyncState::default_instance_;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::GlonassL1fSyncState::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 16) = a2;
  return this;
}

void CoreNavigation::CLP::LogEntry::PrivateData::GlonassL1fSyncState::New(CoreNavigation::CLP::LogEntry::PrivateData::GlonassL1fSyncState *this)
{
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::GlonassL1fSyncState::Clear(uint64_t this)
{
  if (*(unsigned char *)(this + 20))
  {
    *(unsigned char *)(this + 12) = 0;
    *(_DWORD *)(this + 8) = 0;
  }
  *(_DWORD *)(this + 20) = 0;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::GlonassL1fSyncState::MergePartialFromCodedStream(CoreNavigation::CLP::LogEntry::PrivateData::GlonassL1fSyncState *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  while (2)
  {
    int v4 = (char *)*((void *)a2 + 1);
    if ((unint64_t)v4 >= *((void *)a2 + 2) || *v4 < 0)
    {
      unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      if (!TagFallback) {
        return 1;
      }
    }
    else
    {
      unint64_t TagFallback = *v4;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((void *)a2 + 1) = v4 + 1;
      if (!TagFallback) {
        return 1;
      }
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        int v6 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_19;
        }
        unsigned int v24 = 0;
        char v8 = (char *)*((void *)a2 + 1);
        unint64_t v7 = *((void *)a2 + 2);
        if ((unint64_t)v8 < v7 && (*v8 & 0x80000000) == 0)
        {
          unsigned int v9 = *v8;
          int v10 = v8 + 1;
          *((void *)a2 + 1) = v10;
LABEL_25:
          *((unsigned char *)this + 8) = v9 != 0;
          *((_DWORD *)this + 5) |= 1u;
          if ((unint64_t)v10 < v7 && *v10 == 16)
          {
            int v11 = v10 + 1;
            *((void *)a2 + 1) = v11;
            goto LABEL_28;
          }
          continue;
        }
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v24);
        if (result)
        {
          unsigned int v9 = v24;
          int v10 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v7 = *((void *)a2 + 2);
          goto LABEL_25;
        }
        break;
      case 2u:
        int v6 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_19;
        }
        int v11 = (char *)*((void *)a2 + 1);
        unint64_t v7 = *((void *)a2 + 2);
LABEL_28:
        unsigned int v24 = 0;
        if ((unint64_t)v11 >= v7 || *v11 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v24);
          if (!result) {
            return result;
          }
          unsigned int v15 = v24;
          unsigned int v16 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v7 = *((void *)a2 + 2);
        }
        else
        {
          unsigned int v15 = *v11;
          unsigned int v16 = v11 + 1;
          *((void *)a2 + 1) = v16;
        }
        *((unsigned char *)this + 9) = v15 != 0;
        *((_DWORD *)this + 5) |= 2u;
        if ((unint64_t)v16 >= v7 || *v16 != 24) {
          continue;
        }
        int v12 = v16 + 1;
        *((void *)a2 + 1) = v12;
LABEL_36:
        unsigned int v24 = 0;
        if ((unint64_t)v12 >= v7 || *v12 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v24);
          if (!result) {
            return result;
          }
          unsigned int v17 = v24;
          unsigned int v18 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v7 = *((void *)a2 + 2);
        }
        else
        {
          unsigned int v17 = *v12;
          unsigned int v18 = v12 + 1;
          *((void *)a2 + 1) = v18;
        }
        *((unsigned char *)this + 10) = v17 != 0;
        *((_DWORD *)this + 5) |= 4u;
        if ((unint64_t)v18 >= v7 || *v18 != 32) {
          continue;
        }
        unint64_t v13 = v18 + 1;
        *((void *)a2 + 1) = v13;
LABEL_44:
        unsigned int v24 = 0;
        if ((unint64_t)v13 >= v7 || *v13 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v24);
          if (!result) {
            return result;
          }
          unsigned int v19 = v24;
          unsigned int v20 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v7 = *((void *)a2 + 2);
        }
        else
        {
          unsigned int v19 = *v13;
          unsigned int v20 = v13 + 1;
          *((void *)a2 + 1) = v20;
        }
        *((unsigned char *)this + 11) = v19 != 0;
        *((_DWORD *)this + 5) |= 8u;
        if ((unint64_t)v20 >= v7 || *v20 != 40) {
          continue;
        }
        unsigned int v14 = v20 + 1;
        *((void *)a2 + 1) = v14;
LABEL_52:
        unsigned int v24 = 0;
        if ((unint64_t)v14 >= v7 || *v14 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v24);
          if (!result) {
            return result;
          }
          unsigned int v21 = v24;
          int v22 = (unsigned __int8 *)*((void *)a2 + 1);
          unint64_t v7 = *((void *)a2 + 2);
        }
        else
        {
          unsigned int v21 = *v14;
          int v22 = (unsigned __int8 *)(v14 + 1);
          *((void *)a2 + 1) = v22;
        }
        *((unsigned char *)this + 12) = v21 != 0;
        *((_DWORD *)this + 5) |= 0x10u;
        if (v22 != (unsigned __int8 *)v7 || !*((_DWORD *)a2 + 11) && *((_DWORD *)a2 + 6) != *((_DWORD *)a2 + 10)) {
          continue;
        }
        *((_DWORD *)a2 + 8) = 0;
        uint64_t result = 1;
        *((unsigned char *)a2 + 36) = 1;
        return result;
      case 3u:
        int v6 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_19;
        }
        int v12 = (char *)*((void *)a2 + 1);
        unint64_t v7 = *((void *)a2 + 2);
        goto LABEL_36;
      case 4u:
        int v6 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_19;
        }
        unint64_t v13 = (char *)*((void *)a2 + 1);
        unint64_t v7 = *((void *)a2 + 2);
        goto LABEL_44;
      case 5u:
        int v6 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_19;
        }
        unsigned int v14 = (char *)*((void *)a2 + 1);
        unint64_t v7 = *((void *)a2 + 2);
        goto LABEL_52;
      default:
        int v6 = TagFallback & 7;
LABEL_19:
        if (v6 == 4) {
          return 1;
        }
        if (wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback))continue; {
        return 0;
        }
    }
    return result;
  }
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::GlonassL1fSyncState::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  int v6 = *(_DWORD *)(this + 20);
  if (v6)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned __int8 *)(this + 8), (uint64_t)a2, a4);
    int v6 = *(_DWORD *)(v5 + 20);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(unsigned __int8 *)(v5 + 9), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 20);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
LABEL_10:
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(unsigned __int8 *)(v5 + 11), (uint64_t)a2, a4);
    if ((*(_DWORD *)(v5 + 20) & 0x10) == 0) {
      return this;
    }
    goto LABEL_11;
  }
LABEL_9:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(unsigned __int8 *)(v5 + 10), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 20);
  if ((v6 & 8) != 0) {
    goto LABEL_10;
  }
LABEL_5:
  if ((v6 & 0x10) == 0) {
    return this;
  }
LABEL_11:
  uint64_t v7 = *(unsigned __int8 *)(v5 + 12);

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, v7, (uint64_t)a2, a4);
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::GlonassL1fSyncState::ByteSize(CoreNavigation::CLP::LogEntry::PrivateData::GlonassL1fSyncState *this)
{
  int v1 = *((_DWORD *)this + 5);
  if ((_BYTE)v1)
  {
    unsigned int v2 = 2 * (v1 & 1);
    if ((v1 & 2) != 0) {
      v2 += 2;
    }
    if ((v1 & 4) != 0) {
      v2 += 2;
    }
    if ((v1 & 8) != 0) {
      v2 += 2;
    }
    if ((v1 & 0x10) != 0) {
      uint64_t v3 = v2 + 2;
    }
    else {
      uint64_t v3 = v2;
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  *((_DWORD *)this + 4) = v3;
  return v3;
}

void CoreNavigation::CLP::LogEntry::PrivateData::GlonassL1fSyncState::CheckTypeAndMergeFrom(CoreNavigation::CLP::LogEntry::PrivateData::GlonassL1fSyncState *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  CoreNavigation::CLP::LogEntry::PrivateData::GlonassL1fSyncState::MergeFrom(this, lpsrc);
}

void CoreNavigation::CLP::LogEntry::PrivateData::GlonassL1fSyncState::CopyFrom(CoreNavigation::CLP::LogEntry::PrivateData::GlonassL1fSyncState *this, const CoreNavigation::CLP::LogEntry::PrivateData::GlonassL1fSyncState *a2)
{
  if (a2 != this)
  {
    (*(void (**)(CoreNavigation::CLP::LogEntry::PrivateData::GlonassL1fSyncState *))(*(void *)this + 32))(this);
    CoreNavigation::CLP::LogEntry::PrivateData::GlonassL1fSyncState::MergeFrom(this, a2);
  }
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::GlonassL1fSyncState::IsInitialized(CoreNavigation::CLP::LogEntry::PrivateData::GlonassL1fSyncState *this)
{
  return 1;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::GlonassL1fSyncState::Swap(uint64_t this, CoreNavigation::CLP::LogEntry::PrivateData::GlonassL1fSyncState *a2)
{
  if (a2 != (CoreNavigation::CLP::LogEntry::PrivateData::GlonassL1fSyncState *)this)
  {
    char v2 = *(unsigned char *)(this + 8);
    *(unsigned char *)(this + 8) = *((unsigned char *)a2 + 8);
    *((unsigned char *)a2 + 8) = v2;
    char v3 = *(unsigned char *)(this + 9);
    *(unsigned char *)(this + 9) = *((unsigned char *)a2 + 9);
    *((unsigned char *)a2 + 9) = v3;
    char v4 = *(unsigned char *)(this + 10);
    *(unsigned char *)(this + 10) = *((unsigned char *)a2 + 10);
    *((unsigned char *)a2 + 10) = v4;
    char v5 = *(unsigned char *)(this + 11);
    *(unsigned char *)(this + 11) = *((unsigned char *)a2 + 11);
    *((unsigned char *)a2 + 11) = v5;
    char v6 = *(unsigned char *)(this + 12);
    *(unsigned char *)(this + 12) = *((unsigned char *)a2 + 12);
    *((unsigned char *)a2 + 12) = v6;
    int v7 = *(_DWORD *)(this + 20);
    *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
    *((_DWORD *)a2 + 5) = v7;
    int v8 = *(_DWORD *)(this + 16);
    *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
    *((_DWORD *)a2 + 4) = v8;
  }
  return this;
}

void *CoreNavigation::CLP::LogEntry::PrivateData::GlonassL1fSyncState::GetTypeName@<X0>(void *a1@<X8>)
{
  return sub_18DEDE7B0(a1, "CoreNavigation.CLP.LogEntry.PrivateData.GlonassL1fSyncState");
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::BeidouB1SyncState::SharedCtor(uint64_t this)
{
  *(_DWORD *)(this + 16) = 0;
  *(void *)(this + 8) = 0;
  return this;
}

CoreNavigation::CLP::LogEntry::PrivateData::BeidouB1SyncState *CoreNavigation::CLP::LogEntry::PrivateData::BeidouB1SyncState::BeidouB1SyncState(CoreNavigation::CLP::LogEntry::PrivateData::BeidouB1SyncState *this, const CoreNavigation::CLP::LogEntry::PrivateData::BeidouB1SyncState *a2)
{
  *(void *)this = &unk_1EDD0CAA0;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 4) = 0;
  CoreNavigation::CLP::LogEntry::PrivateData::BeidouB1SyncState::MergeFrom(this, a2);
  return this;
}

void sub_18DFBEE28(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void CoreNavigation::CLP::LogEntry::PrivateData::BeidouB1SyncState::MergeFrom(CoreNavigation::CLP::LogEntry::PrivateData::BeidouB1SyncState *this, const CoreNavigation::CLP::LogEntry::PrivateData::BeidouB1SyncState *a2)
{
  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }
  LOBYTE(v4) = *((unsigned char *)a2 + 16);
  if ((_BYTE)v4)
  {
    if (*((unsigned char *)a2 + 16))
    {
      char v6 = *((unsigned char *)a2 + 8);
      *((_DWORD *)this + 4) |= 1u;
      *((unsigned char *)this + 8) = v6;
      int v4 = *((_DWORD *)a2 + 4);
      if ((v4 & 2) == 0)
      {
LABEL_6:
        if ((v4 & 4) == 0) {
          goto LABEL_7;
        }
        goto LABEL_12;
      }
    }
    else if ((*((unsigned char *)a2 + 16) & 2) == 0)
    {
      goto LABEL_6;
    }
    char v7 = *((unsigned char *)a2 + 9);
    *((_DWORD *)this + 4) |= 2u;
    *((unsigned char *)this + 9) = v7;
    int v4 = *((_DWORD *)a2 + 4);
    if ((v4 & 4) == 0)
    {
LABEL_7:
      if ((v4 & 8) == 0) {
        return;
      }
      goto LABEL_8;
    }
LABEL_12:
    char v8 = *((unsigned char *)a2 + 10);
    *((_DWORD *)this + 4) |= 4u;
    *((unsigned char *)this + 10) = v8;
    if ((*((_DWORD *)a2 + 4) & 8) == 0) {
      return;
    }
LABEL_8:
    char v5 = *((unsigned char *)a2 + 11);
    *((_DWORD *)this + 4) |= 8u;
    *((unsigned char *)this + 11) = v5;
  }
}

void sub_18DFBEF30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CoreNavigation::CLP::LogEntry::PrivateData::BeidouB1SyncState::~BeidouB1SyncState(CoreNavigation::CLP::LogEntry::PrivateData::BeidouB1SyncState *this)
{
  *(void *)this = &unk_1EDD0CAA0;
  CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  uint64_t vars8;

  CoreNavigation::CLP::LogEntry::PrivateData::BeidouB1SyncState::~BeidouB1SyncState(this);

  JUMPOUT(0x192FA6240);
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::BeidouB1SyncState::default_instance(CoreNavigation::CLP::LogEntry::PrivateData::BeidouB1SyncState *this)
{
  return CoreNavigation::CLP::LogEntry::PrivateData::BeidouB1SyncState::default_instance_;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::BeidouB1SyncState::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 12) = a2;
  return this;
}

void CoreNavigation::CLP::LogEntry::PrivateData::BeidouB1SyncState::New(CoreNavigation::CLP::LogEntry::PrivateData::BeidouB1SyncState *this)
{
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::BeidouB1SyncState::Clear(uint64_t this)
{
  if (*(unsigned char *)(this + 16)) {
    *(_DWORD *)(this + 8) = 0;
  }
  *(_DWORD *)(this + 16) = 0;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::BeidouB1SyncState::MergePartialFromCodedStream(CoreNavigation::CLP::LogEntry::PrivateData::BeidouB1SyncState *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  while (2)
  {
    int v4 = (char *)*((void *)a2 + 1);
    if ((unint64_t)v4 >= *((void *)a2 + 2) || *v4 < 0)
    {
      unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      if (!TagFallback) {
        return 1;
      }
    }
    else
    {
      unint64_t TagFallback = *v4;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((void *)a2 + 1) = v4 + 1;
      if (!TagFallback) {
        return 1;
      }
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        int v6 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_17;
        }
        unsigned int v21 = 0;
        char v8 = (char *)*((void *)a2 + 1);
        unint64_t v7 = *((void *)a2 + 2);
        if ((unint64_t)v8 < v7 && (*v8 & 0x80000000) == 0)
        {
          unsigned int v9 = *v8;
          int v10 = v8 + 1;
          *((void *)a2 + 1) = v10;
LABEL_23:
          *((unsigned char *)this + 8) = v9 != 0;
          *((_DWORD *)this + 4) |= 1u;
          if ((unint64_t)v10 < v7 && *v10 == 16)
          {
            int v11 = v10 + 1;
            *((void *)a2 + 1) = v11;
            goto LABEL_26;
          }
          continue;
        }
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v21);
        if (result)
        {
          unsigned int v9 = v21;
          int v10 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v7 = *((void *)a2 + 2);
          goto LABEL_23;
        }
        break;
      case 2u:
        int v6 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_17;
        }
        int v11 = (char *)*((void *)a2 + 1);
        unint64_t v7 = *((void *)a2 + 2);
LABEL_26:
        unsigned int v21 = 0;
        if ((unint64_t)v11 >= v7 || *v11 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v21);
          if (!result) {
            return result;
          }
          unsigned int v14 = v21;
          unsigned int v15 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v7 = *((void *)a2 + 2);
        }
        else
        {
          unsigned int v14 = *v11;
          unsigned int v15 = v11 + 1;
          *((void *)a2 + 1) = v15;
        }
        *((unsigned char *)this + 9) = v14 != 0;
        *((_DWORD *)this + 4) |= 2u;
        if ((unint64_t)v15 >= v7 || *v15 != 24) {
          continue;
        }
        int v12 = v15 + 1;
        *((void *)a2 + 1) = v12;
LABEL_34:
        unsigned int v21 = 0;
        if ((unint64_t)v12 >= v7 || *v12 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v21);
          if (!result) {
            return result;
          }
          unsigned int v16 = v21;
          unsigned int v17 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v7 = *((void *)a2 + 2);
        }
        else
        {
          unsigned int v16 = *v12;
          unsigned int v17 = v12 + 1;
          *((void *)a2 + 1) = v17;
        }
        *((unsigned char *)this + 10) = v16 != 0;
        *((_DWORD *)this + 4) |= 4u;
        if ((unint64_t)v17 >= v7 || *v17 != 32) {
          continue;
        }
        unint64_t v13 = v17 + 1;
        *((void *)a2 + 1) = v13;
LABEL_42:
        unsigned int v21 = 0;
        if ((unint64_t)v13 >= v7 || *v13 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v21);
          if (!result) {
            return result;
          }
          unsigned int v18 = v21;
          unsigned int v19 = (unsigned __int8 *)*((void *)a2 + 1);
          unint64_t v7 = *((void *)a2 + 2);
        }
        else
        {
          unsigned int v18 = *v13;
          unsigned int v19 = (unsigned __int8 *)(v13 + 1);
          *((void *)a2 + 1) = v19;
        }
        *((unsigned char *)this + 11) = v18 != 0;
        *((_DWORD *)this + 4) |= 8u;
        if (v19 != (unsigned __int8 *)v7 || !*((_DWORD *)a2 + 11) && *((_DWORD *)a2 + 6) != *((_DWORD *)a2 + 10)) {
          continue;
        }
        *((_DWORD *)a2 + 8) = 0;
        uint64_t result = 1;
        *((unsigned char *)a2 + 36) = 1;
        return result;
      case 3u:
        int v6 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_17;
        }
        int v12 = (char *)*((void *)a2 + 1);
        unint64_t v7 = *((void *)a2 + 2);
        goto LABEL_34;
      case 4u:
        int v6 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_17;
        }
        unint64_t v13 = (char *)*((void *)a2 + 1);
        unint64_t v7 = *((void *)a2 + 2);
        goto LABEL_42;
      default:
        int v6 = TagFallback & 7;
LABEL_17:
        if (v6 == 4) {
          return 1;
        }
        if (wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback))continue; {
        return 0;
        }
    }
    return result;
  }
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::BeidouB1SyncState::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  int v6 = *(_DWORD *)(this + 16);
  if (v6)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned __int8 *)(this + 8), (uint64_t)a2, a4);
    int v6 = *(_DWORD *)(v5 + 16);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(unsigned __int8 *)(v5 + 10), (uint64_t)a2, a4);
      if ((*(_DWORD *)(v5 + 16) & 8) == 0) {
        return this;
      }
      goto LABEL_9;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(unsigned __int8 *)(v5 + 9), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 16);
  if ((v6 & 4) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v6 & 8) == 0) {
    return this;
  }
LABEL_9:
  uint64_t v7 = *(unsigned __int8 *)(v5 + 11);

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v7, (uint64_t)a2, a4);
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::BeidouB1SyncState::ByteSize(CoreNavigation::CLP::LogEntry::PrivateData::BeidouB1SyncState *this)
{
  int v1 = *((_DWORD *)this + 4);
  unsigned int v2 = 2 * (v1 & 1);
  if ((v1 & 2) != 0) {
    v2 += 2;
  }
  if ((v1 & 4) != 0) {
    v2 += 2;
  }
  if ((v1 & 8) != 0) {
    v2 += 2;
  }
  if (*((_DWORD *)this + 4)) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 0;
  }
  *((_DWORD *)this + 3) = v3;
  return v3;
}

void CoreNavigation::CLP::LogEntry::PrivateData::BeidouB1SyncState::CheckTypeAndMergeFrom(CoreNavigation::CLP::LogEntry::PrivateData::BeidouB1SyncState *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  CoreNavigation::CLP::LogEntry::PrivateData::BeidouB1SyncState::MergeFrom(this, lpsrc);
}

void CoreNavigation::CLP::LogEntry::PrivateData::BeidouB1SyncState::CopyFrom(CoreNavigation::CLP::LogEntry::PrivateData::BeidouB1SyncState *this, const CoreNavigation::CLP::LogEntry::PrivateData::BeidouB1SyncState *a2)
{
  if (a2 != this)
  {
    (*(void (**)(CoreNavigation::CLP::LogEntry::PrivateData::BeidouB1SyncState *))(*(void *)this + 32))(this);
    CoreNavigation::CLP::LogEntry::PrivateData::BeidouB1SyncState::MergeFrom(this, a2);
  }
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::BeidouB1SyncState::IsInitialized(CoreNavigation::CLP::LogEntry::PrivateData::BeidouB1SyncState *this)
{
  return 1;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::BeidouB1SyncState::Swap(uint64_t this, CoreNavigation::CLP::LogEntry::PrivateData::BeidouB1SyncState *a2)
{
  if (a2 != (CoreNavigation::CLP::LogEntry::PrivateData::BeidouB1SyncState *)this)
  {
    char v2 = *(unsigned char *)(this + 8);
    *(unsigned char *)(this + 8) = *((unsigned char *)a2 + 8);
    *((unsigned char *)a2 + 8) = v2;
    char v3 = *(unsigned char *)(this + 9);
    *(unsigned char *)(this + 9) = *((unsigned char *)a2 + 9);
    *((unsigned char *)a2 + 9) = v3;
    char v4 = *(unsigned char *)(this + 10);
    *(unsigned char *)(this + 10) = *((unsigned char *)a2 + 10);
    *((unsigned char *)a2 + 10) = v4;
    char v5 = *(unsigned char *)(this + 11);
    *(unsigned char *)(this + 11) = *((unsigned char *)a2 + 11);
    *((unsigned char *)a2 + 11) = v5;
    int v6 = *(_DWORD *)(this + 16);
    *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
    *((_DWORD *)a2 + 4) = v6;
    int v7 = *(_DWORD *)(this + 12);
    *(_DWORD *)(this + 12) = *((_DWORD *)a2 + 3);
    *((_DWORD *)a2 + 3) = v7;
  }
  return this;
}

void *CoreNavigation::CLP::LogEntry::PrivateData::BeidouB1SyncState::GetTypeName@<X0>(void *a1@<X8>)
{
  return sub_18DEDE7B0(a1, "CoreNavigation.CLP.LogEntry.PrivateData.BeidouB1SyncState");
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::BeidouB2SyncState::SharedCtor(uint64_t this)
{
  *(_DWORD *)(this + 16) = 0;
  *(void *)(this + 8) = 0;
  return this;
}

CoreNavigation::CLP::LogEntry::PrivateData::BeidouB2SyncState *CoreNavigation::CLP::LogEntry::PrivateData::BeidouB2SyncState::BeidouB2SyncState(CoreNavigation::CLP::LogEntry::PrivateData::BeidouB2SyncState *this, const CoreNavigation::CLP::LogEntry::PrivateData::BeidouB2SyncState *a2)
{
  *(void *)this = &unk_1EDD0CB18;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 4) = 0;
  CoreNavigation::CLP::LogEntry::PrivateData::BeidouB2SyncState::MergeFrom(this, a2);
  return this;
}

void sub_18DFBF648(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void CoreNavigation::CLP::LogEntry::PrivateData::BeidouB2SyncState::MergeFrom(CoreNavigation::CLP::LogEntry::PrivateData::BeidouB2SyncState *this, const CoreNavigation::CLP::LogEntry::PrivateData::BeidouB2SyncState *a2)
{
  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }
  LOBYTE(v4) = *((unsigned char *)a2 + 16);
  if ((_BYTE)v4)
  {
    if (*((unsigned char *)a2 + 16))
    {
      char v6 = *((unsigned char *)a2 + 8);
      *((_DWORD *)this + 4) |= 1u;
      *((unsigned char *)this + 8) = v6;
      int v4 = *((_DWORD *)a2 + 4);
      if ((v4 & 2) == 0)
      {
LABEL_6:
        if ((v4 & 4) == 0) {
          goto LABEL_7;
        }
        goto LABEL_12;
      }
    }
    else if ((*((unsigned char *)a2 + 16) & 2) == 0)
    {
      goto LABEL_6;
    }
    char v7 = *((unsigned char *)a2 + 9);
    *((_DWORD *)this + 4) |= 2u;
    *((unsigned char *)this + 9) = v7;
    int v4 = *((_DWORD *)a2 + 4);
    if ((v4 & 4) == 0)
    {
LABEL_7:
      if ((v4 & 8) == 0) {
        return;
      }
      goto LABEL_8;
    }
LABEL_12:
    char v8 = *((unsigned char *)a2 + 10);
    *((_DWORD *)this + 4) |= 4u;
    *((unsigned char *)this + 10) = v8;
    if ((*((_DWORD *)a2 + 4) & 8) == 0) {
      return;
    }
LABEL_8:
    char v5 = *((unsigned char *)a2 + 11);
    *((_DWORD *)this + 4) |= 8u;
    *((unsigned char *)this + 11) = v5;
  }
}

void sub_18DFBF750(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CoreNavigation::CLP::LogEntry::PrivateData::BeidouB2SyncState::~BeidouB2SyncState(CoreNavigation::CLP::LogEntry::PrivateData::BeidouB2SyncState *this)
{
  *(void *)this = &unk_1EDD0CB18;
  CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  uint64_t vars8;

  CoreNavigation::CLP::LogEntry::PrivateData::BeidouB2SyncState::~BeidouB2SyncState(this);

  JUMPOUT(0x192FA6240);
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::BeidouB2SyncState::default_instance(CoreNavigation::CLP::LogEntry::PrivateData::BeidouB2SyncState *this)
{
  return CoreNavigation::CLP::LogEntry::PrivateData::BeidouB2SyncState::default_instance_;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::BeidouB2SyncState::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 12) = a2;
  return this;
}

void CoreNavigation::CLP::LogEntry::PrivateData::BeidouB2SyncState::New(CoreNavigation::CLP::LogEntry::PrivateData::BeidouB2SyncState *this)
{
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::BeidouB2SyncState::Clear(uint64_t this)
{
  if (*(unsigned char *)(this + 16)) {
    *(_DWORD *)(this + 8) = 0;
  }
  *(_DWORD *)(this + 16) = 0;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::BeidouB2SyncState::MergePartialFromCodedStream(CoreNavigation::CLP::LogEntry::PrivateData::BeidouB2SyncState *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  while (2)
  {
    int v4 = (char *)*((void *)a2 + 1);
    if ((unint64_t)v4 >= *((void *)a2 + 2) || *v4 < 0)
    {
      unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      if (!TagFallback) {
        return 1;
      }
    }
    else
    {
      unint64_t TagFallback = *v4;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((void *)a2 + 1) = v4 + 1;
      if (!TagFallback) {
        return 1;
      }
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        int v6 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_17;
        }
        unsigned int v21 = 0;
        char v8 = (char *)*((void *)a2 + 1);
        unint64_t v7 = *((void *)a2 + 2);
        if ((unint64_t)v8 < v7 && (*v8 & 0x80000000) == 0)
        {
          unsigned int v9 = *v8;
          int v10 = v8 + 1;
          *((void *)a2 + 1) = v10;
LABEL_23:
          *((unsigned char *)this + 8) = v9 != 0;
          *((_DWORD *)this + 4) |= 1u;
          if ((unint64_t)v10 < v7 && *v10 == 16)
          {
            int v11 = v10 + 1;
            *((void *)a2 + 1) = v11;
            goto LABEL_26;
          }
          continue;
        }
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v21);
        if (result)
        {
          unsigned int v9 = v21;
          int v10 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v7 = *((void *)a2 + 2);
          goto LABEL_23;
        }
        break;
      case 2u:
        int v6 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_17;
        }
        int v11 = (char *)*((void *)a2 + 1);
        unint64_t v7 = *((void *)a2 + 2);
LABEL_26:
        unsigned int v21 = 0;
        if ((unint64_t)v11 >= v7 || *v11 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v21);
          if (!result) {
            return result;
          }
          unsigned int v14 = v21;
          unsigned int v15 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v7 = *((void *)a2 + 2);
        }
        else
        {
          unsigned int v14 = *v11;
          unsigned int v15 = v11 + 1;
          *((void *)a2 + 1) = v15;
        }
        *((unsigned char *)this + 9) = v14 != 0;
        *((_DWORD *)this + 4) |= 2u;
        if ((unint64_t)v15 >= v7 || *v15 != 24) {
          continue;
        }
        int v12 = v15 + 1;
        *((void *)a2 + 1) = v12;
LABEL_34:
        unsigned int v21 = 0;
        if ((unint64_t)v12 >= v7 || *v12 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v21);
          if (!result) {
            return result;
          }
          unsigned int v16 = v21;
          unsigned int v17 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v7 = *((void *)a2 + 2);
        }
        else
        {
          unsigned int v16 = *v12;
          unsigned int v17 = v12 + 1;
          *((void *)a2 + 1) = v17;
        }
        *((unsigned char *)this + 10) = v16 != 0;
        *((_DWORD *)this + 4) |= 4u;
        if ((unint64_t)v17 >= v7 || *v17 != 32) {
          continue;
        }
        unint64_t v13 = v17 + 1;
        *((void *)a2 + 1) = v13;
LABEL_42:
        unsigned int v21 = 0;
        if ((unint64_t)v13 >= v7 || *v13 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v21);
          if (!result) {
            return result;
          }
          unsigned int v18 = v21;
          unsigned int v19 = (unsigned __int8 *)*((void *)a2 + 1);
          unint64_t v7 = *((void *)a2 + 2);
        }
        else
        {
          unsigned int v18 = *v13;
          unsigned int v19 = (unsigned __int8 *)(v13 + 1);
          *((void *)a2 + 1) = v19;
        }
        *((unsigned char *)this + 11) = v18 != 0;
        *((_DWORD *)this + 4) |= 8u;
        if (v19 != (unsigned __int8 *)v7 || !*((_DWORD *)a2 + 11) && *((_DWORD *)a2 + 6) != *((_DWORD *)a2 + 10)) {
          continue;
        }
        *((_DWORD *)a2 + 8) = 0;
        uint64_t result = 1;
        *((unsigned char *)a2 + 36) = 1;
        return result;
      case 3u:
        int v6 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_17;
        }
        int v12 = (char *)*((void *)a2 + 1);
        unint64_t v7 = *((void *)a2 + 2);
        goto LABEL_34;
      case 4u:
        int v6 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_17;
        }
        unint64_t v13 = (char *)*((void *)a2 + 1);
        unint64_t v7 = *((void *)a2 + 2);
        goto LABEL_42;
      default:
        int v6 = TagFallback & 7;
LABEL_17:
        if (v6 == 4) {
          return 1;
        }
        if (wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback))continue; {
        return 0;
        }
    }
    return result;
  }
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::BeidouB2SyncState::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  int v6 = *(_DWORD *)(this + 16);
  if (v6)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned __int8 *)(this + 8), (uint64_t)a2, a4);
    int v6 = *(_DWORD *)(v5 + 16);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(unsigned __int8 *)(v5 + 10), (uint64_t)a2, a4);
      if ((*(_DWORD *)(v5 + 16) & 8) == 0) {
        return this;
      }
      goto LABEL_9;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(unsigned __int8 *)(v5 + 9), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 16);
  if ((v6 & 4) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v6 & 8) == 0) {
    return this;
  }
LABEL_9:
  uint64_t v7 = *(unsigned __int8 *)(v5 + 11);

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v7, (uint64_t)a2, a4);
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::BeidouB2SyncState::ByteSize(CoreNavigation::CLP::LogEntry::PrivateData::BeidouB2SyncState *this)
{
  int v1 = *((_DWORD *)this + 4);
  unsigned int v2 = 2 * (v1 & 1);
  if ((v1 & 2) != 0) {
    v2 += 2;
  }
  if ((v1 & 4) != 0) {
    v2 += 2;
  }
  if ((v1 & 8) != 0) {
    v2 += 2;
  }
  if (*((_DWORD *)this + 4)) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 0;
  }
  *((_DWORD *)this + 3) = v3;
  return v3;
}

void CoreNavigation::CLP::LogEntry::PrivateData::BeidouB2SyncState::CheckTypeAndMergeFrom(CoreNavigation::CLP::LogEntry::PrivateData::BeidouB2SyncState *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  CoreNavigation::CLP::LogEntry::PrivateData::BeidouB2SyncState::MergeFrom(this, lpsrc);
}

void CoreNavigation::CLP::LogEntry::PrivateData::BeidouB2SyncState::CopyFrom(CoreNavigation::CLP::LogEntry::PrivateData::BeidouB2SyncState *this, const CoreNavigation::CLP::LogEntry::PrivateData::BeidouB2SyncState *a2)
{
  if (a2 != this)
  {
    (*(void (**)(CoreNavigation::CLP::LogEntry::PrivateData::BeidouB2SyncState *))(*(void *)this + 32))(this);
    CoreNavigation::CLP::LogEntry::PrivateData::BeidouB2SyncState::MergeFrom(this, a2);
  }
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::BeidouB2SyncState::IsInitialized(CoreNavigation::CLP::LogEntry::PrivateData::BeidouB2SyncState *this)
{
  return 1;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::BeidouB2SyncState::Swap(uint64_t this, CoreNavigation::CLP::LogEntry::PrivateData::BeidouB2SyncState *a2)
{
  if (a2 != (CoreNavigation::CLP::LogEntry::PrivateData::BeidouB2SyncState *)this)
  {
    char v2 = *(unsigned char *)(this + 8);
    *(unsigned char *)(this + 8) = *((unsigned char *)a2 + 8);
    *((unsigned char *)a2 + 8) = v2;
    char v3 = *(unsigned char *)(this + 9);
    *(unsigned char *)(this + 9) = *((unsigned char *)a2 + 9);
    *((unsigned char *)a2 + 9) = v3;
    char v4 = *(unsigned char *)(this + 10);
    *(unsigned char *)(this + 10) = *((unsigned char *)a2 + 10);
    *((unsigned char *)a2 + 10) = v4;
    char v5 = *(unsigned char *)(this + 11);
    *(unsigned char *)(this + 11) = *((unsigned char *)a2 + 11);
    *((unsigned char *)a2 + 11) = v5;
    int v6 = *(_DWORD *)(this + 16);
    *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
    *((_DWORD *)a2 + 4) = v6;
    int v7 = *(_DWORD *)(this + 12);
    *(_DWORD *)(this + 12) = *((_DWORD *)a2 + 3);
    *((_DWORD *)a2 + 3) = v7;
  }
  return this;
}

void *CoreNavigation::CLP::LogEntry::PrivateData::BeidouB2SyncState::GetTypeName@<X0>(void *a1@<X8>)
{
  return sub_18DEDE7B0(a1, "CoreNavigation.CLP.LogEntry.PrivateData.BeidouB2SyncState");
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::GalileoE1SyncState::SharedCtor(uint64_t this)
{
  *(_DWORD *)(this + 16) = 0;
  *(void *)(this + 8) = 0;
  return this;
}

CoreNavigation::CLP::LogEntry::PrivateData::GalileoE1SyncState *CoreNavigation::CLP::LogEntry::PrivateData::GalileoE1SyncState::GalileoE1SyncState(CoreNavigation::CLP::LogEntry::PrivateData::GalileoE1SyncState *this, const CoreNavigation::CLP::LogEntry::PrivateData::GalileoE1SyncState *a2)
{
  *(void *)this = &unk_1EDD0D1A8;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 4) = 0;
  CoreNavigation::CLP::LogEntry::PrivateData::GalileoE1SyncState::MergeFrom(this, a2);
  return this;
}

void sub_18DFBFE68(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void CoreNavigation::CLP::LogEntry::PrivateData::GalileoE1SyncState::MergeFrom(CoreNavigation::CLP::LogEntry::PrivateData::GalileoE1SyncState *this, const CoreNavigation::CLP::LogEntry::PrivateData::GalileoE1SyncState *a2)
{
  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }
  LOBYTE(v4) = *((unsigned char *)a2 + 16);
  if ((_BYTE)v4)
  {
    if (*((unsigned char *)a2 + 16))
    {
      char v6 = *((unsigned char *)a2 + 8);
      *((_DWORD *)this + 4) |= 1u;
      *((unsigned char *)this + 8) = v6;
      int v4 = *((_DWORD *)a2 + 4);
      if ((v4 & 2) == 0)
      {
LABEL_6:
        if ((v4 & 4) == 0) {
          goto LABEL_7;
        }
        goto LABEL_12;
      }
    }
    else if ((*((unsigned char *)a2 + 16) & 2) == 0)
    {
      goto LABEL_6;
    }
    char v7 = *((unsigned char *)a2 + 9);
    *((_DWORD *)this + 4) |= 2u;
    *((unsigned char *)this + 9) = v7;
    int v4 = *((_DWORD *)a2 + 4);
    if ((v4 & 4) == 0)
    {
LABEL_7:
      if ((v4 & 8) == 0) {
        return;
      }
      goto LABEL_8;
    }
LABEL_12:
    char v8 = *((unsigned char *)a2 + 10);
    *((_DWORD *)this + 4) |= 4u;
    *((unsigned char *)this + 10) = v8;
    if ((*((_DWORD *)a2 + 4) & 8) == 0) {
      return;
    }
LABEL_8:
    char v5 = *((unsigned char *)a2 + 11);
    *((_DWORD *)this + 4) |= 8u;
    *((unsigned char *)this + 11) = v5;
  }
}

void sub_18DFBFF70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CoreNavigation::CLP::LogEntry::PrivateData::GalileoE1SyncState::~GalileoE1SyncState(CoreNavigation::CLP::LogEntry::PrivateData::GalileoE1SyncState *this)
{
  *(void *)this = &unk_1EDD0D1A8;
  CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  uint64_t vars8;

  CoreNavigation::CLP::LogEntry::PrivateData::GalileoE1SyncState::~GalileoE1SyncState(this);

  JUMPOUT(0x192FA6240);
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::GalileoE1SyncState::default_instance(CoreNavigation::CLP::LogEntry::PrivateData::GalileoE1SyncState *this)
{
  return CoreNavigation::CLP::LogEntry::PrivateData::GalileoE1SyncState::default_instance_;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::GalileoE1SyncState::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 12) = a2;
  return this;
}

void CoreNavigation::CLP::LogEntry::PrivateData::GalileoE1SyncState::New(CoreNavigation::CLP::LogEntry::PrivateData::GalileoE1SyncState *this)
{
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::GalileoE1SyncState::Clear(uint64_t this)
{
  if (*(unsigned char *)(this + 16)) {
    *(_DWORD *)(this + 8) = 0;
  }
  *(_DWORD *)(this + 16) = 0;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::GalileoE1SyncState::MergePartialFromCodedStream(CoreNavigation::CLP::LogEntry::PrivateData::GalileoE1SyncState *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  while (2)
  {
    int v4 = (char *)*((void *)a2 + 1);
    if ((unint64_t)v4 >= *((void *)a2 + 2) || *v4 < 0)
    {
      unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      if (!TagFallback) {
        return 1;
      }
    }
    else
    {
      unint64_t TagFallback = *v4;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((void *)a2 + 1) = v4 + 1;
      if (!TagFallback) {
        return 1;
      }
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        int v6 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_17;
        }
        unsigned int v21 = 0;
        char v8 = (char *)*((void *)a2 + 1);
        unint64_t v7 = *((void *)a2 + 2);
        if ((unint64_t)v8 < v7 && (*v8 & 0x80000000) == 0)
        {
          unsigned int v9 = *v8;
          int v10 = v8 + 1;
          *((void *)a2 + 1) = v10;
LABEL_23:
          *((unsigned char *)this + 8) = v9 != 0;
          *((_DWORD *)this + 4) |= 1u;
          if ((unint64_t)v10 < v7 && *v10 == 16)
          {
            int v11 = v10 + 1;
            *((void *)a2 + 1) = v11;
            goto LABEL_26;
          }
          continue;
        }
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v21);
        if (result)
        {
          unsigned int v9 = v21;
          int v10 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v7 = *((void *)a2 + 2);
          goto LABEL_23;
        }
        break;
      case 2u:
        int v6 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_17;
        }
        int v11 = (char *)*((void *)a2 + 1);
        unint64_t v7 = *((void *)a2 + 2);
LABEL_26:
        unsigned int v21 = 0;
        if ((unint64_t)v11 >= v7 || *v11 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v21);
          if (!result) {
            return result;
          }
          unsigned int v14 = v21;
          unsigned int v15 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v7 = *((void *)a2 + 2);
        }
        else
        {
          unsigned int v14 = *v11;
          unsigned int v15 = v11 + 1;
          *((void *)a2 + 1) = v15;
        }
        *((unsigned char *)this + 9) = v14 != 0;
        *((_DWORD *)this + 4) |= 2u;
        if ((unint64_t)v15 >= v7 || *v15 != 24) {
          continue;
        }
        int v12 = v15 + 1;
        *((void *)a2 + 1) = v12;
LABEL_34:
        unsigned int v21 = 0;
        if ((unint64_t)v12 >= v7 || *v12 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v21);
          if (!result) {
            return result;
          }
          unsigned int v16 = v21;
          unsigned int v17 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v7 = *((void *)a2 + 2);
        }
        else
        {
          unsigned int v16 = *v12;
          unsigned int v17 = v12 + 1;
          *((void *)a2 + 1) = v17;
        }
        *((unsigned char *)this + 10) = v16 != 0;
        *((_DWORD *)this + 4) |= 4u;
        if ((unint64_t)v17 >= v7 || *v17 != 32) {
          continue;
        }
        unint64_t v13 = v17 + 1;
        *((void *)a2 + 1) = v13;
LABEL_42:
        unsigned int v21 = 0;
        if ((unint64_t)v13 >= v7 || *v13 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v21);
          if (!result) {
            return result;
          }
          unsigned int v18 = v21;
          unsigned int v19 = (unsigned __int8 *)*((void *)a2 + 1);
          unint64_t v7 = *((void *)a2 + 2);
        }
        else
        {
          unsigned int v18 = *v13;
          unsigned int v19 = (unsigned __int8 *)(v13 + 1);
          *((void *)a2 + 1) = v19;
        }
        *((unsigned char *)this + 11) = v18 != 0;
        *((_DWORD *)this + 4) |= 8u;
        if (v19 != (unsigned __int8 *)v7 || !*((_DWORD *)a2 + 11) && *((_DWORD *)a2 + 6) != *((_DWORD *)a2 + 10)) {
          continue;
        }
        *((_DWORD *)a2 + 8) = 0;
        uint64_t result = 1;
        *((unsigned char *)a2 + 36) = 1;
        return result;
      case 3u:
        int v6 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_17;
        }
        int v12 = (char *)*((void *)a2 + 1);
        unint64_t v7 = *((void *)a2 + 2);
        goto LABEL_34;
      case 4u:
        int v6 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_17;
        }
        unint64_t v13 = (char *)*((void *)a2 + 1);
        unint64_t v7 = *((void *)a2 + 2);
        goto LABEL_42;
      default:
        int v6 = TagFallback & 7;
LABEL_17:
        if (v6 == 4) {
          return 1;
        }
        if (wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback))continue; {
        return 0;
        }
    }
    return result;
  }
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::GalileoE1SyncState::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  int v6 = *(_DWORD *)(this + 16);
  if (v6)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned __int8 *)(this + 8), (uint64_t)a2, a4);
    int v6 = *(_DWORD *)(v5 + 16);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(unsigned __int8 *)(v5 + 10), (uint64_t)a2, a4);
      if ((*(_DWORD *)(v5 + 16) & 8) == 0) {
        return this;
      }
      goto LABEL_9;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(unsigned __int8 *)(v5 + 9), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 16);
  if ((v6 & 4) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v6 & 8) == 0) {
    return this;
  }
LABEL_9:
  uint64_t v7 = *(unsigned __int8 *)(v5 + 11);

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v7, (uint64_t)a2, a4);
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::GalileoE1SyncState::ByteSize(CoreNavigation::CLP::LogEntry::PrivateData::GalileoE1SyncState *this)
{
  int v1 = *((_DWORD *)this + 4);
  unsigned int v2 = 2 * (v1 & 1);
  if ((v1 & 2) != 0) {
    v2 += 2;
  }
  if ((v1 & 4) != 0) {
    v2 += 2;
  }
  if ((v1 & 8) != 0) {
    v2 += 2;
  }
  if (*((_DWORD *)this + 4)) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 0;
  }
  *((_DWORD *)this + 3) = v3;
  return v3;
}

void CoreNavigation::CLP::LogEntry::PrivateData::GalileoE1SyncState::CheckTypeAndMergeFrom(CoreNavigation::CLP::LogEntry::PrivateData::GalileoE1SyncState *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  CoreNavigation::CLP::LogEntry::PrivateData::GalileoE1SyncState::MergeFrom(this, lpsrc);
}

void CoreNavigation::CLP::LogEntry::PrivateData::GalileoE1SyncState::CopyFrom(CoreNavigation::CLP::LogEntry::PrivateData::GalileoE1SyncState *this, const CoreNavigation::CLP::LogEntry::PrivateData::GalileoE1SyncState *a2)
{
  if (a2 != this)
  {
    (*(void (**)(CoreNavigation::CLP::LogEntry::PrivateData::GalileoE1SyncState *))(*(void *)this + 32))(this);
    CoreNavigation::CLP::LogEntry::PrivateData::GalileoE1SyncState::MergeFrom(this, a2);
  }
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::GalileoE1SyncState::IsInitialized(CoreNavigation::CLP::LogEntry::PrivateData::GalileoE1SyncState *this)
{
  return 1;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::GalileoE1SyncState::Swap(uint64_t this, CoreNavigation::CLP::LogEntry::PrivateData::GalileoE1SyncState *a2)
{
  if (a2 != (CoreNavigation::CLP::LogEntry::PrivateData::GalileoE1SyncState *)this)
  {
    char v2 = *(unsigned char *)(this + 8);
    *(unsigned char *)(this + 8) = *((unsigned char *)a2 + 8);
    *((unsigned char *)a2 + 8) = v2;
    char v3 = *(unsigned char *)(this + 9);
    *(unsigned char *)(this + 9) = *((unsigned char *)a2 + 9);
    *((unsigned char *)a2 + 9) = v3;
    char v4 = *(unsigned char *)(this + 10);
    *(unsigned char *)(this + 10) = *((unsigned char *)a2 + 10);
    *((unsigned char *)a2 + 10) = v4;
    char v5 = *(unsigned char *)(this + 11);
    *(unsigned char *)(this + 11) = *((unsigned char *)a2 + 11);
    *((unsigned char *)a2 + 11) = v5;
    int v6 = *(_DWORD *)(this + 16);
    *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
    *((_DWORD *)a2 + 4) = v6;
    int v7 = *(_DWORD *)(this + 12);
    *(_DWORD *)(this + 12) = *((_DWORD *)a2 + 3);
    *((_DWORD *)a2 + 3) = v7;
  }
  return this;
}

void *CoreNavigation::CLP::LogEntry::PrivateData::GalileoE1SyncState::GetTypeName@<X0>(void *a1@<X8>)
{
  return sub_18DEDE7B0(a1, "CoreNavigation.CLP.LogEntry.PrivateData.GalileoE1SyncState");
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::GalileoE5SyncState::SharedCtor(uint64_t this)
{
  *(_DWORD *)(this + 20) = 0;
  *(_DWORD *)(this + 24) = 0;
  *(void *)(this + 8) = 0;
  *(_WORD *)(this + 16) = 0;
  return this;
}

CoreNavigation::CLP::LogEntry::PrivateData::GalileoE5SyncState *CoreNavigation::CLP::LogEntry::PrivateData::GalileoE5SyncState::GalileoE5SyncState(CoreNavigation::CLP::LogEntry::PrivateData::GalileoE5SyncState *this, const CoreNavigation::CLP::LogEntry::PrivateData::GalileoE5SyncState *a2)
{
  *((_DWORD *)this + 5) = 0;
  *((_DWORD *)this + 6) = 0;
  *(void *)this = &unk_1EDD0D220;
  *((void *)this + 1) = 0;
  *((_WORD *)this + 8) = 0;
  CoreNavigation::CLP::LogEntry::PrivateData::GalileoE5SyncState::MergeFrom(this, a2);
  return this;
}

void sub_18DFC0694(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void CoreNavigation::CLP::LogEntry::PrivateData::GalileoE5SyncState::MergeFrom(CoreNavigation::CLP::LogEntry::PrivateData::GalileoE5SyncState *this, const CoreNavigation::CLP::LogEntry::PrivateData::GalileoE5SyncState *a2)
{
  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v15);
  }
  int v4 = *((_DWORD *)a2 + 6);
  if (!(_BYTE)v4) {
    goto LABEL_13;
  }
  if (v4)
  {
    char v8 = *((unsigned char *)a2 + 8);
    *((_DWORD *)this + 6) |= 1u;
    *((unsigned char *)this + 8) = v8;
    int v4 = *((_DWORD *)a2 + 6);
    if ((v4 & 2) == 0)
    {
LABEL_6:
      if ((v4 & 4) == 0) {
        goto LABEL_7;
      }
      goto LABEL_21;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_6;
  }
  char v9 = *((unsigned char *)a2 + 9);
  *((_DWORD *)this + 6) |= 2u;
  *((unsigned char *)this + 9) = v9;
  int v4 = *((_DWORD *)a2 + 6);
  if ((v4 & 4) == 0)
  {
LABEL_7:
    if ((v4 & 8) == 0) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }
LABEL_21:
  char v10 = *((unsigned char *)a2 + 10);
  *((_DWORD *)this + 6) |= 4u;
  *((unsigned char *)this + 10) = v10;
  int v4 = *((_DWORD *)a2 + 6);
  if ((v4 & 8) == 0)
  {
LABEL_8:
    if ((v4 & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }
LABEL_22:
  char v11 = *((unsigned char *)a2 + 11);
  *((_DWORD *)this + 6) |= 8u;
  *((unsigned char *)this + 11) = v11;
  int v4 = *((_DWORD *)a2 + 6);
  if ((v4 & 0x10) == 0)
  {
LABEL_9:
    if ((v4 & 0x20) == 0) {
      goto LABEL_10;
    }
LABEL_24:
    char v13 = *((unsigned char *)a2 + 13);
    *((_DWORD *)this + 6) |= 0x20u;
    *((unsigned char *)this + 13) = v13;
    int v4 = *((_DWORD *)a2 + 6);
    if ((v4 & 0x40) == 0)
    {
LABEL_11:
      if ((v4 & 0x80) == 0) {
        goto LABEL_13;
      }
      goto LABEL_12;
    }
    goto LABEL_25;
  }
LABEL_23:
  char v12 = *((unsigned char *)a2 + 12);
  *((_DWORD *)this + 6) |= 0x10u;
  *((unsigned char *)this + 12) = v12;
  int v4 = *((_DWORD *)a2 + 6);
  if ((v4 & 0x20) != 0) {
    goto LABEL_24;
  }
LABEL_10:
  if ((v4 & 0x40) == 0) {
    goto LABEL_11;
  }
LABEL_25:
  char v14 = *((unsigned char *)a2 + 14);
  *((_DWORD *)this + 6) |= 0x40u;
  *((unsigned char *)this + 14) = v14;
  int v4 = *((_DWORD *)a2 + 6);
  if ((v4 & 0x80) != 0)
  {
LABEL_12:
    char v5 = *((unsigned char *)a2 + 15);
    *((_DWORD *)this + 6) |= 0x80u;
    *((unsigned char *)this + 15) = v5;
    int v4 = *((_DWORD *)a2 + 6);
  }
LABEL_13:
  if ((v4 & 0xFF00) != 0)
  {
    if ((v4 & 0x100) != 0)
    {
      char v6 = *((unsigned char *)a2 + 16);
      *((_DWORD *)this + 6) |= 0x100u;
      *((unsigned char *)this + 16) = v6;
      int v4 = *((_DWORD *)a2 + 6);
    }
    if ((v4 & 0x200) != 0)
    {
      char v7 = *((unsigned char *)a2 + 17);
      *((_DWORD *)this + 6) |= 0x200u;
      *((unsigned char *)this + 17) = v7;
    }
  }
}

void sub_18DFC0860(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CoreNavigation::CLP::LogEntry::PrivateData::GalileoE5SyncState::~GalileoE5SyncState(CoreNavigation::CLP::LogEntry::PrivateData::GalileoE5SyncState *this)
{
  *(void *)this = &unk_1EDD0D220;
  CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  uint64_t vars8;

  CoreNavigation::CLP::LogEntry::PrivateData::GalileoE5SyncState::~GalileoE5SyncState(this);

  JUMPOUT(0x192FA6240);
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::GalileoE5SyncState::default_instance(CoreNavigation::CLP::LogEntry::PrivateData::GalileoE5SyncState *this)
{
  return CoreNavigation::CLP::LogEntry::PrivateData::GalileoE5SyncState::default_instance_;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::GalileoE5SyncState::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 20) = a2;
  return this;
}

void CoreNavigation::CLP::LogEntry::PrivateData::GalileoE5SyncState::New(CoreNavigation::CLP::LogEntry::PrivateData::GalileoE5SyncState *this)
{
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::GalileoE5SyncState::Clear(uint64_t this)
{
  int v1 = *(_DWORD *)(this + 24);
  if ((_BYTE)v1) {
    *(void *)(this + 8) = 0;
  }
  if ((v1 & 0xFF00) != 0) {
    *(_WORD *)(this + 16) = 0;
  }
  *(_DWORD *)(this + 24) = 0;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::GalileoE5SyncState::MergePartialFromCodedStream(CoreNavigation::CLP::LogEntry::PrivateData::GalileoE5SyncState *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  while (2)
  {
    int v4 = (char *)*((void *)a2 + 1);
    if ((unint64_t)v4 >= *((void *)a2 + 2) || *v4 < 0)
    {
      unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      if (!TagFallback) {
        return 1;
      }
    }
    else
    {
      unint64_t TagFallback = *v4;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((void *)a2 + 1) = v4 + 1;
      if (!TagFallback) {
        return 1;
      }
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        int v6 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_29;
        }
        unsigned int v39 = 0;
        char v8 = (char *)*((void *)a2 + 1);
        unint64_t v7 = *((void *)a2 + 2);
        if ((unint64_t)v8 < v7 && (*v8 & 0x80000000) == 0)
        {
          unsigned int v9 = *v8;
          char v10 = v8 + 1;
          *((void *)a2 + 1) = v10;
LABEL_35:
          *((unsigned char *)this + 8) = v9 != 0;
          *((_DWORD *)this + 6) |= 1u;
          if ((unint64_t)v10 < v7 && *v10 == 16)
          {
            char v11 = v10 + 1;
            *((void *)a2 + 1) = v11;
            goto LABEL_38;
          }
          continue;
        }
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v39);
        if (result)
        {
          unsigned int v9 = v39;
          char v10 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v7 = *((void *)a2 + 2);
          goto LABEL_35;
        }
        break;
      case 2u:
        int v6 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_29;
        }
        char v11 = (char *)*((void *)a2 + 1);
        unint64_t v7 = *((void *)a2 + 2);
LABEL_38:
        unsigned int v39 = 0;
        if ((unint64_t)v11 >= v7 || *v11 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v39);
          if (!result) {
            return result;
          }
          unsigned int v20 = v39;
          unsigned int v21 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v7 = *((void *)a2 + 2);
        }
        else
        {
          unsigned int v20 = *v11;
          unsigned int v21 = v11 + 1;
          *((void *)a2 + 1) = v21;
        }
        *((unsigned char *)this + 9) = v20 != 0;
        *((_DWORD *)this + 6) |= 2u;
        if ((unint64_t)v21 >= v7 || *v21 != 24) {
          continue;
        }
        char v12 = v21 + 1;
        *((void *)a2 + 1) = v12;
LABEL_46:
        unsigned int v39 = 0;
        if ((unint64_t)v12 >= v7 || *v12 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v39);
          if (!result) {
            return result;
          }
          unsigned int v22 = v39;
          int v23 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v7 = *((void *)a2 + 2);
        }
        else
        {
          unsigned int v22 = *v12;
          int v23 = v12 + 1;
          *((void *)a2 + 1) = v23;
        }
        *((unsigned char *)this + 10) = v22 != 0;
        *((_DWORD *)this + 6) |= 4u;
        if ((unint64_t)v23 >= v7 || *v23 != 32) {
          continue;
        }
        char v13 = v23 + 1;
        *((void *)a2 + 1) = v13;
LABEL_54:
        unsigned int v39 = 0;
        if ((unint64_t)v13 >= v7 || *v13 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v39);
          if (!result) {
            return result;
          }
          unsigned int v24 = v39;
          uint64_t v25 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v7 = *((void *)a2 + 2);
        }
        else
        {
          unsigned int v24 = *v13;
          uint64_t v25 = v13 + 1;
          *((void *)a2 + 1) = v25;
        }
        *((unsigned char *)this + 11) = v24 != 0;
        *((_DWORD *)this + 6) |= 8u;
        if ((unint64_t)v25 >= v7 || *v25 != 40) {
          continue;
        }
        char v14 = v25 + 1;
        *((void *)a2 + 1) = v14;
LABEL_62:
        unsigned int v39 = 0;
        if ((unint64_t)v14 >= v7 || *v14 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v39);
          if (!result) {
            return result;
          }
          unsigned int v26 = v39;
          int v27 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v7 = *((void *)a2 + 2);
        }
        else
        {
          unsigned int v26 = *v14;
          int v27 = v14 + 1;
          *((void *)a2 + 1) = v27;
        }
        *((unsigned char *)this + 12) = v26 != 0;
        *((_DWORD *)this + 6) |= 0x10u;
        if ((unint64_t)v27 >= v7 || *v27 != 48) {
          continue;
        }
        unsigned int v15 = v27 + 1;
        *((void *)a2 + 1) = v15;
LABEL_70:
        unsigned int v39 = 0;
        if ((unint64_t)v15 >= v7 || *v15 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v39);
          if (!result) {
            return result;
          }
          unsigned int v28 = v39;
          BOOL v29 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v7 = *((void *)a2 + 2);
        }
        else
        {
          unsigned int v28 = *v15;
          BOOL v29 = v15 + 1;
          *((void *)a2 + 1) = v29;
        }
        *((unsigned char *)this + 13) = v28 != 0;
        *((_DWORD *)this + 6) |= 0x20u;
        if ((unint64_t)v29 >= v7 || *v29 != 56) {
          continue;
        }
        unsigned int v16 = v29 + 1;
        *((void *)a2 + 1) = v16;
LABEL_78:
        unsigned int v39 = 0;
        if ((unint64_t)v16 >= v7 || *v16 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v39);
          if (!result) {
            return result;
          }
          unsigned int v30 = v39;
          int v31 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v7 = *((void *)a2 + 2);
        }
        else
        {
          unsigned int v30 = *v16;
          int v31 = v16 + 1;
          *((void *)a2 + 1) = v31;
        }
        *((unsigned char *)this + 14) = v30 != 0;
        *((_DWORD *)this + 6) |= 0x40u;
        if ((unint64_t)v31 >= v7 || *v31 != 64) {
          continue;
        }
        unsigned int v17 = v31 + 1;
        *((void *)a2 + 1) = v17;
LABEL_86:
        unsigned int v39 = 0;
        if ((unint64_t)v17 >= v7 || *v17 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v39);
          if (!result) {
            return result;
          }
          unsigned int v32 = v39;
          int v33 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v7 = *((void *)a2 + 2);
        }
        else
        {
          unsigned int v32 = *v17;
          int v33 = v17 + 1;
          *((void *)a2 + 1) = v33;
        }
        *((unsigned char *)this + 15) = v32 != 0;
        *((_DWORD *)this + 6) |= 0x80u;
        if ((unint64_t)v33 >= v7 || *v33 != 72) {
          continue;
        }
        unsigned int v18 = v33 + 1;
        *((void *)a2 + 1) = v18;
LABEL_94:
        unsigned int v39 = 0;
        if ((unint64_t)v18 >= v7 || *v18 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v39);
          if (!result) {
            return result;
          }
          unsigned int v34 = v39;
          uint64_t v35 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v7 = *((void *)a2 + 2);
        }
        else
        {
          unsigned int v34 = *v18;
          uint64_t v35 = v18 + 1;
          *((void *)a2 + 1) = v35;
        }
        *((unsigned char *)this + 16) = v34 != 0;
        *((_DWORD *)this + 6) |= 0x100u;
        if ((unint64_t)v35 >= v7 || *v35 != 80) {
          continue;
        }
        unsigned int v19 = v35 + 1;
        *((void *)a2 + 1) = v19;
LABEL_102:
        unsigned int v39 = 0;
        if ((unint64_t)v19 >= v7 || *v19 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v39);
          if (!result) {
            return result;
          }
          unsigned int v36 = v39;
          unsigned int v37 = (unsigned __int8 *)*((void *)a2 + 1);
          unint64_t v7 = *((void *)a2 + 2);
        }
        else
        {
          unsigned int v36 = *v19;
          unsigned int v37 = (unsigned __int8 *)(v19 + 1);
          *((void *)a2 + 1) = v37;
        }
        *((unsigned char *)this + 17) = v36 != 0;
        *((_DWORD *)this + 6) |= 0x200u;
        if (v37 != (unsigned __int8 *)v7 || !*((_DWORD *)a2 + 11) && *((_DWORD *)a2 + 6) != *((_DWORD *)a2 + 10)) {
          continue;
        }
        *((_DWORD *)a2 + 8) = 0;
        uint64_t result = 1;
        *((unsigned char *)a2 + 36) = 1;
        return result;
      case 3u:
        int v6 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_29;
        }
        char v12 = (char *)*((void *)a2 + 1);
        unint64_t v7 = *((void *)a2 + 2);
        goto LABEL_46;
      case 4u:
        int v6 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_29;
        }
        char v13 = (char *)*((void *)a2 + 1);
        unint64_t v7 = *((void *)a2 + 2);
        goto LABEL_54;
      case 5u:
        int v6 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_29;
        }
        char v14 = (char *)*((void *)a2 + 1);
        unint64_t v7 = *((void *)a2 + 2);
        goto LABEL_62;
      case 6u:
        int v6 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_29;
        }
        unsigned int v15 = (char *)*((void *)a2 + 1);
        unint64_t v7 = *((void *)a2 + 2);
        goto LABEL_70;
      case 7u:
        int v6 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_29;
        }
        unsigned int v16 = (char *)*((void *)a2 + 1);
        unint64_t v7 = *((void *)a2 + 2);
        goto LABEL_78;
      case 8u:
        int v6 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_29;
        }
        unsigned int v17 = (char *)*((void *)a2 + 1);
        unint64_t v7 = *((void *)a2 + 2);
        goto LABEL_86;
      case 9u:
        int v6 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_29;
        }
        unsigned int v18 = (char *)*((void *)a2 + 1);
        unint64_t v7 = *((void *)a2 + 2);
        goto LABEL_94;
      case 0xAu:
        int v6 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_29;
        }
        unsigned int v19 = (char *)*((void *)a2 + 1);
        unint64_t v7 = *((void *)a2 + 2);
        goto LABEL_102;
      default:
        int v6 = TagFallback & 7;
LABEL_29:
        if (v6 == 4) {
          return 1;
        }
        if (wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback))continue; {
        return 0;
        }
    }
    return result;
  }
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::GalileoE5SyncState::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  int v6 = *(_DWORD *)(this + 24);
  if (v6)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned __int8 *)(this + 8), (uint64_t)a2, a4);
    int v6 = *(_DWORD *)(v5 + 24);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(unsigned __int8 *)(v5 + 9), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 24);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(unsigned __int8 *)(v5 + 10), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 24);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_15:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(unsigned __int8 *)(v5 + 11), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 24);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
LABEL_16:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(unsigned __int8 *)(v5 + 12), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 24);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_18;
  }
LABEL_17:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, *(unsigned __int8 *)(v5 + 13), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 24);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_19;
  }
LABEL_18:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, *(unsigned __int8 *)(v5 + 14), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 24);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0) {
      goto LABEL_10;
    }
LABEL_20:
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9, *(unsigned __int8 *)(v5 + 16), (uint64_t)a2, a4);
    if ((*(_DWORD *)(v5 + 24) & 0x200) == 0) {
      return this;
    }
    goto LABEL_21;
  }
LABEL_19:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, *(unsigned __int8 *)(v5 + 15), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 24);
  if ((v6 & 0x100) != 0) {
    goto LABEL_20;
  }
LABEL_10:
  if ((v6 & 0x200) == 0) {
    return this;
  }
LABEL_21:
  uint64_t v7 = *(unsigned __int8 *)(v5 + 17);

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA, v7, (uint64_t)a2, a4);
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::GalileoE5SyncState::ByteSize(CoreNavigation::CLP::LogEntry::PrivateData::GalileoE5SyncState *this)
{
  int v1 = *((_DWORD *)this + 6);
  if ((_BYTE)v1)
  {
    unsigned int v2 = 2 * (v1 & 1);
    if ((v1 & 2) != 0) {
      v2 += 2;
    }
    if ((v1 & 4) != 0) {
      v2 += 2;
    }
    if ((v1 & 8) != 0) {
      v2 += 2;
    }
    if ((v1 & 0x10) != 0) {
      v2 += 2;
    }
    if ((v1 & 0x20) != 0) {
      v2 += 2;
    }
    if ((v1 & 0x40) != 0) {
      v2 += 2;
    }
    if ((v1 & 0x80) != 0) {
      v2 += 2;
    }
  }
  else
  {
    unsigned int v2 = 0;
  }
  unsigned int v3 = v2 + 2;
  if ((v1 & 0x100) == 0) {
    unsigned int v3 = v2;
  }
  if ((v1 & 0x200) != 0) {
    v3 += 2;
  }
  if ((v1 & 0xFF00) != 0) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = v2;
  }
  *((_DWORD *)this + 5) = v4;
  return v4;
}

void CoreNavigation::CLP::LogEntry::PrivateData::GalileoE5SyncState::CheckTypeAndMergeFrom(CoreNavigation::CLP::LogEntry::PrivateData::GalileoE5SyncState *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  CoreNavigation::CLP::LogEntry::PrivateData::GalileoE5SyncState::MergeFrom(this, lpsrc);
}

void CoreNavigation::CLP::LogEntry::PrivateData::GalileoE5SyncState::CopyFrom(CoreNavigation::CLP::LogEntry::PrivateData::GalileoE5SyncState *this, const CoreNavigation::CLP::LogEntry::PrivateData::GalileoE5SyncState *a2)
{
  if (a2 != this)
  {
    (*(void (**)(CoreNavigation::CLP::LogEntry::PrivateData::GalileoE5SyncState *))(*(void *)this + 32))(this);
    CoreNavigation::CLP::LogEntry::PrivateData::GalileoE5SyncState::MergeFrom(this, a2);
  }
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::GalileoE5SyncState::IsInitialized(CoreNavigation::CLP::LogEntry::PrivateData::GalileoE5SyncState *this)
{
  return 1;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::GalileoE5SyncState::Swap(uint64_t this, CoreNavigation::CLP::LogEntry::PrivateData::GalileoE5SyncState *a2)
{
  if (a2 != (CoreNavigation::CLP::LogEntry::PrivateData::GalileoE5SyncState *)this)
  {
    char v2 = *(unsigned char *)(this + 8);
    *(unsigned char *)(this + 8) = *((unsigned char *)a2 + 8);
    *((unsigned char *)a2 + 8) = v2;
    char v3 = *(unsigned char *)(this + 9);
    *(unsigned char *)(this + 9) = *((unsigned char *)a2 + 9);
    *((unsigned char *)a2 + 9) = v3;
    char v4 = *(unsigned char *)(this + 10);
    *(unsigned char *)(this + 10) = *((unsigned char *)a2 + 10);
    *((unsigned char *)a2 + 10) = v4;
    char v5 = *(unsigned char *)(this + 11);
    *(unsigned char *)(this + 11) = *((unsigned char *)a2 + 11);
    *((unsigned char *)a2 + 11) = v5;
    char v6 = *(unsigned char *)(this + 12);
    *(unsigned char *)(this + 12) = *((unsigned char *)a2 + 12);
    *((unsigned char *)a2 + 12) = v6;
    char v7 = *(unsigned char *)(this + 13);
    *(unsigned char *)(this + 13) = *((unsigned char *)a2 + 13);
    *((unsigned char *)a2 + 13) = v7;
    char v8 = *(unsigned char *)(this + 14);
    *(unsigned char *)(this + 14) = *((unsigned char *)a2 + 14);
    *((unsigned char *)a2 + 14) = v8;
    char v9 = *(unsigned char *)(this + 15);
    *(unsigned char *)(this + 15) = *((unsigned char *)a2 + 15);
    *((unsigned char *)a2 + 15) = v9;
    char v10 = *(unsigned char *)(this + 16);
    *(unsigned char *)(this + 16) = *((unsigned char *)a2 + 16);
    *((unsigned char *)a2 + 16) = v10;
    char v11 = *(unsigned char *)(this + 17);
    *(unsigned char *)(this + 17) = *((unsigned char *)a2 + 17);
    *((unsigned char *)a2 + 17) = v11;
    int v12 = *(_DWORD *)(this + 24);
    *(_DWORD *)(this + 24) = *((_DWORD *)a2 + 6);
    *((_DWORD *)a2 + 6) = v12;
    int v13 = *(_DWORD *)(this + 20);
    *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
    *((_DWORD *)a2 + 5) = v13;
  }
  return this;
}

void *CoreNavigation::CLP::LogEntry::PrivateData::GalileoE5SyncState::GetTypeName@<X0>(void *a1@<X8>)
{
  return sub_18DEDE7B0(a1, "CoreNavigation.CLP.LogEntry.PrivateData.GalileoE5SyncState");
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::SbasL1SyncState::SharedCtor(uint64_t this)
{
  *(_WORD *)(this + 8) = 0;
  *(unsigned char *)(this + 10) = 0;
  *(_DWORD *)(this + 12) = 0;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

CoreNavigation::CLP::LogEntry::PrivateData::SbasL1SyncState *CoreNavigation::CLP::LogEntry::PrivateData::SbasL1SyncState::SbasL1SyncState(CoreNavigation::CLP::LogEntry::PrivateData::SbasL1SyncState *this, const CoreNavigation::CLP::LogEntry::PrivateData::SbasL1SyncState *a2)
{
  *(void *)this = &unk_1EDD0C5F0;
  *((_WORD *)this + 4) = 0;
  *((unsigned char *)this + 10) = 0;
  *((_DWORD *)this + 3) = 0;
  *((_DWORD *)this + 4) = 0;
  CoreNavigation::CLP::LogEntry::PrivateData::SbasL1SyncState::MergeFrom(this, a2);
  return this;
}

void sub_18DFC1418(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void CoreNavigation::CLP::LogEntry::PrivateData::SbasL1SyncState::MergeFrom(CoreNavigation::CLP::LogEntry::PrivateData::SbasL1SyncState *this, const CoreNavigation::CLP::LogEntry::PrivateData::SbasL1SyncState *a2)
{
  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v8);
  }
  LOBYTE(v4) = *((unsigned char *)a2 + 16);
  if ((_BYTE)v4)
  {
    if (*((unsigned char *)a2 + 16))
    {
      char v6 = *((unsigned char *)a2 + 8);
      *((_DWORD *)this + 4) |= 1u;
      *((unsigned char *)this + 8) = v6;
      int v4 = *((_DWORD *)a2 + 4);
      if ((v4 & 2) == 0)
      {
LABEL_6:
        if ((v4 & 4) == 0) {
          return;
        }
        goto LABEL_7;
      }
    }
    else if ((*((unsigned char *)a2 + 16) & 2) == 0)
    {
      goto LABEL_6;
    }
    char v7 = *((unsigned char *)a2 + 9);
    *((_DWORD *)this + 4) |= 2u;
    *((unsigned char *)this + 9) = v7;
    if ((*((_DWORD *)a2 + 4) & 4) == 0) {
      return;
    }
LABEL_7:
    char v5 = *((unsigned char *)a2 + 10);
    *((_DWORD *)this + 4) |= 4u;
    *((unsigned char *)this + 10) = v5;
  }
}

void sub_18DFC1500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CoreNavigation::CLP::LogEntry::PrivateData::SbasL1SyncState::~SbasL1SyncState(CoreNavigation::CLP::LogEntry::PrivateData::SbasL1SyncState *this)
{
  *(void *)this = &unk_1EDD0C5F0;
  CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  uint64_t vars8;

  CoreNavigation::CLP::LogEntry::PrivateData::SbasL1SyncState::~SbasL1SyncState(this);

  JUMPOUT(0x192FA6240);
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::SbasL1SyncState::default_instance(CoreNavigation::CLP::LogEntry::PrivateData::SbasL1SyncState *this)
{
  return CoreNavigation::CLP::LogEntry::PrivateData::SbasL1SyncState::default_instance_;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::SbasL1SyncState::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 12) = a2;
  return this;
}

void CoreNavigation::CLP::LogEntry::PrivateData::SbasL1SyncState::New(CoreNavigation::CLP::LogEntry::PrivateData::SbasL1SyncState *this)
{
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::SbasL1SyncState::Clear(uint64_t this)
{
  if (*(unsigned char *)(this + 16))
  {
    *(_WORD *)(this + 8) = 0;
    *(unsigned char *)(this + 10) = 0;
  }
  *(_DWORD *)(this + 16) = 0;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::SbasL1SyncState::MergePartialFromCodedStream(CoreNavigation::CLP::LogEntry::PrivateData::SbasL1SyncState *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  while (1)
  {
    while (1)
    {
      while (1)
      {
        int v4 = (char *)*((void *)a2 + 1);
        if ((unint64_t)v4 >= *((void *)a2 + 2) || *v4 < 0)
        {
          unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
          *((_DWORD *)a2 + 8) = TagFallback;
          if (!TagFallback) {
            return 1;
          }
        }
        else
        {
          unint64_t TagFallback = *v4;
          *((_DWORD *)a2 + 8) = TagFallback;
          *((void *)a2 + 1) = v4 + 1;
          if (!TagFallback) {
            return 1;
          }
        }
        unsigned int v6 = TagFallback >> 3;
        if (TagFallback >> 3 != 1) {
          break;
        }
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_18;
        }
        unsigned int v21 = 0;
        char v10 = (char *)*((void *)a2 + 1);
        unint64_t v8 = *((void *)a2 + 2);
        if ((unint64_t)v10 >= v8 || *v10 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v21);
          if (!result) {
            return result;
          }
          unsigned int v11 = v21;
          int v12 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v8 = *((void *)a2 + 2);
        }
        else
        {
          unsigned int v11 = *v10;
          int v12 = v10 + 1;
          *((void *)a2 + 1) = v12;
        }
        *((unsigned char *)this + 8) = v11 != 0;
        *((_DWORD *)this + 4) |= 1u;
        if ((unint64_t)v12 < v8 && *v12 == 16)
        {
          int v13 = v12 + 1;
          *((void *)a2 + 1) = v13;
          goto LABEL_26;
        }
      }
      if (v6 != 2) {
        break;
      }
      int v7 = TagFallback & 7;
      if ((TagFallback & 7) != 0) {
        goto LABEL_18;
      }
      int v13 = (char *)*((void *)a2 + 1);
      unint64_t v8 = *((void *)a2 + 2);
LABEL_26:
      unsigned int v20 = 0;
      if ((unint64_t)v13 >= v8 || *v13 < 0)
      {
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v20);
        if (!result) {
          return result;
        }
        unsigned int v14 = v20;
        unsigned int v15 = (unsigned char *)*((void *)a2 + 1);
        unint64_t v8 = *((void *)a2 + 2);
      }
      else
      {
        unsigned int v14 = *v13;
        unsigned int v15 = v13 + 1;
        *((void *)a2 + 1) = v15;
      }
      *((unsigned char *)this + 9) = v14 != 0;
      *((_DWORD *)this + 4) |= 2u;
      if ((unint64_t)v15 < v8 && *v15 == 24)
      {
        char v9 = v15 + 1;
        *((void *)a2 + 1) = v9;
LABEL_34:
        unsigned int v19 = 0;
        if ((unint64_t)v9 >= v8 || *v9 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v19);
          if (!result) {
            return result;
          }
          unsigned int v16 = v19;
          unsigned int v17 = (unsigned __int8 *)*((void *)a2 + 1);
          unint64_t v8 = *((void *)a2 + 2);
        }
        else
        {
          unsigned int v16 = *v9;
          unsigned int v17 = (unsigned __int8 *)(v9 + 1);
          *((void *)a2 + 1) = v17;
        }
        *((unsigned char *)this + 10) = v16 != 0;
        *((_DWORD *)this + 4) |= 4u;
        if (v17 == (unsigned __int8 *)v8 && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
        {
          *((_DWORD *)a2 + 8) = 0;
          uint64_t result = 1;
          *((unsigned char *)a2 + 36) = 1;
          return result;
        }
      }
    }
    if (v6 == 3)
    {
      int v7 = TagFallback & 7;
      if ((TagFallback & 7) == 0)
      {
        char v9 = (char *)*((void *)a2 + 1);
        unint64_t v8 = *((void *)a2 + 2);
        goto LABEL_34;
      }
    }
    else
    {
      int v7 = TagFallback & 7;
    }
LABEL_18:
    if (v7 == 4) {
      return 1;
    }
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0; {
  }
    }
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::SbasL1SyncState::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  int v6 = *(_DWORD *)(this + 16);
  if ((v6 & 1) == 0)
  {
    if ((v6 & 2) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(unsigned __int8 *)(v5 + 9), (uint64_t)a2, a4);
    if ((*(_DWORD *)(v5 + 16) & 4) == 0) {
      return this;
    }
    goto LABEL_7;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned __int8 *)(this + 8), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 16);
  if ((v6 & 2) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v6 & 4) == 0) {
    return this;
  }
LABEL_7:
  uint64_t v7 = *(unsigned __int8 *)(v5 + 10);

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v7, (uint64_t)a2, a4);
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::SbasL1SyncState::ByteSize(CoreNavigation::CLP::LogEntry::PrivateData::SbasL1SyncState *this)
{
  int v1 = *((_DWORD *)this + 4);
  unsigned int v2 = 2 * (v1 & 1);
  if ((v1 & 2) != 0) {
    v2 += 2;
  }
  if ((v1 & 4) != 0) {
    v2 += 2;
  }
  if (*((_DWORD *)this + 4)) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 0;
  }
  *((_DWORD *)this + 3) = v3;
  return v3;
}

void CoreNavigation::CLP::LogEntry::PrivateData::SbasL1SyncState::CheckTypeAndMergeFrom(CoreNavigation::CLP::LogEntry::PrivateData::SbasL1SyncState *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  CoreNavigation::CLP::LogEntry::PrivateData::SbasL1SyncState::MergeFrom(this, lpsrc);
}

void CoreNavigation::CLP::LogEntry::PrivateData::SbasL1SyncState::CopyFrom(CoreNavigation::CLP::LogEntry::PrivateData::SbasL1SyncState *this, const CoreNavigation::CLP::LogEntry::PrivateData::SbasL1SyncState *a2)
{
  if (a2 != this)
  {
    (*(void (**)(CoreNavigation::CLP::LogEntry::PrivateData::SbasL1SyncState *))(*(void *)this + 32))(this);
    CoreNavigation::CLP::LogEntry::PrivateData::SbasL1SyncState::MergeFrom(this, a2);
  }
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::SbasL1SyncState::IsInitialized(CoreNavigation::CLP::LogEntry::PrivateData::SbasL1SyncState *this)
{
  return 1;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::SbasL1SyncState::Swap(uint64_t this, CoreNavigation::CLP::LogEntry::PrivateData::SbasL1SyncState *a2)
{
  if (a2 != (CoreNavigation::CLP::LogEntry::PrivateData::SbasL1SyncState *)this)
  {
    char v2 = *(unsigned char *)(this + 8);
    *(unsigned char *)(this + 8) = *((unsigned char *)a2 + 8);
    *((unsigned char *)a2 + 8) = v2;
    char v3 = *(unsigned char *)(this + 9);
    *(unsigned char *)(this + 9) = *((unsigned char *)a2 + 9);
    *((unsigned char *)a2 + 9) = v3;
    char v4 = *(unsigned char *)(this + 10);
    *(unsigned char *)(this + 10) = *((unsigned char *)a2 + 10);
    *((unsigned char *)a2 + 10) = v4;
    int v5 = *(_DWORD *)(this + 16);
    *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
    *((_DWORD *)a2 + 4) = v5;
    int v6 = *(_DWORD *)(this + 12);
    *(_DWORD *)(this + 12) = *((_DWORD *)a2 + 3);
    *((_DWORD *)a2 + 3) = v6;
  }
  return this;
}

void *CoreNavigation::CLP::LogEntry::PrivateData::SbasL1SyncState::GetTypeName@<X0>(void *a1@<X8>)
{
  return sub_18DEDE7B0(a1, "CoreNavigation.CLP.LogEntry.PrivateData.SbasL1SyncState");
}

double CoreNavigation::CLP::LogEntry::PrivateData::SyncState::SharedCtor(CoreNavigation::CLP::LogEntry::PrivateData::SyncState *this)
{
  double result = 0.0;
  *(_OWORD *)((char *)this + 84) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  return result;
}

CoreNavigation::CLP::LogEntry::PrivateData::SyncState *CoreNavigation::CLP::LogEntry::PrivateData::SyncState::SyncState(CoreNavigation::CLP::LogEntry::PrivateData::SyncState *this, const CoreNavigation::CLP::LogEntry::PrivateData::SyncState *a2)
{
  *(void *)this = &unk_1EDD0F188;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 84) = 0u;
  CoreNavigation::CLP::LogEntry::PrivateData::SyncState::MergeFrom(this, a2);
  return this;
}

void sub_18DFC1B88(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void CoreNavigation::CLP::LogEntry::PrivateData::SyncState::MergeFrom(CoreNavigation::CLP::LogEntry::PrivateData::SyncState *this, const CoreNavigation::CLP::LogEntry::PrivateData::SyncState *a2)
{
  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v26);
  }
  int v4 = *((_DWORD *)a2 + 24);
  if (!(_BYTE)v4) {
    goto LABEL_50;
  }
  if (v4)
  {
    unsigned int v5 = *((_DWORD *)a2 + 22);
    if (v5 >= 0xD) {
      __assert_rtn("set_band", "CoreNavigationCLPGnssMeasApi.pb.h", 7930, "::CoreNavigation::CLP::LogEntry::PrivateData::Band_IsValid(value)");
    }
    *((_DWORD *)this + 24) |= 1u;
    *((_DWORD *)this + 22) = v5;
    int v4 = *((_DWORD *)a2 + 24);
  }
  if ((v4 & 2) != 0)
  {
    *((_DWORD *)this + 24) |= 2u;
    int v6 = (CoreNavigation::CLP::LogEntry::PrivateData::GpsL1SyncState *)*((void *)this + 1);
    if (!v6) {
      operator new();
    }
    uint64_t v7 = (const CoreNavigation::CLP::LogEntry::PrivateData::GpsL1SyncState *)*((void *)a2 + 1);
    if (!v7)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);
      uint64_t v7 = *(const CoreNavigation::CLP::LogEntry::PrivateData::GpsL1SyncState **)(CoreNavigation::CLP::LogEntry::PrivateData::SyncState::default_instance_
                                                                                + 8);
    }
    CoreNavigation::CLP::LogEntry::PrivateData::GpsL1SyncState::MergeFrom(v6, v7);
    int v4 = *((_DWORD *)a2 + 24);
    if ((v4 & 4) == 0)
    {
LABEL_9:
      if ((v4 & 8) == 0) {
        goto LABEL_10;
      }
      goto LABEL_25;
    }
  }
  else if ((v4 & 4) == 0)
  {
    goto LABEL_9;
  }
  *((_DWORD *)this + 24) |= 4u;
  unint64_t v8 = (CoreNavigation::CLP::LogEntry::PrivateData::GpsL2CSyncState *)*((void *)this + 2);
  if (!v8) {
    operator new();
  }
  char v9 = (const CoreNavigation::CLP::LogEntry::PrivateData::GpsL2CSyncState *)*((void *)a2 + 2);
  if (!v9)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);
    char v9 = *(const CoreNavigation::CLP::LogEntry::PrivateData::GpsL2CSyncState **)(CoreNavigation::CLP::LogEntry::PrivateData::SyncState::default_instance_
                                                                               + 16);
  }
  CoreNavigation::CLP::LogEntry::PrivateData::GpsL2CSyncState::MergeFrom(v8, v9);
  int v4 = *((_DWORD *)a2 + 24);
  if ((v4 & 8) == 0)
  {
LABEL_10:
    if ((v4 & 0x10) == 0) {
      goto LABEL_11;
    }
    goto LABEL_30;
  }
LABEL_25:
  *((_DWORD *)this + 24) |= 8u;
  char v10 = (CoreNavigation::CLP::LogEntry::PrivateData::GpsL5SyncState *)*((void *)this + 3);
  if (!v10) {
    operator new();
  }
  unsigned int v11 = (const CoreNavigation::CLP::LogEntry::PrivateData::GpsL5SyncState *)*((void *)a2 + 3);
  if (!v11)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);
    unsigned int v11 = *(const CoreNavigation::CLP::LogEntry::PrivateData::GpsL5SyncState **)(CoreNavigation::CLP::LogEntry::PrivateData::SyncState::default_instance_
                                                                               + 24);
  }
  CoreNavigation::CLP::LogEntry::PrivateData::GpsL5SyncState::MergeFrom(v10, v11);
  int v4 = *((_DWORD *)a2 + 24);
  if ((v4 & 0x10) == 0)
  {
LABEL_11:
    if ((v4 & 0x20) == 0) {
      goto LABEL_12;
    }
LABEL_35:
    *((_DWORD *)this + 24) |= 0x20u;
    unsigned int v14 = (CoreNavigation::CLP::LogEntry::PrivateData::BeidouB1SyncState *)*((void *)this + 5);
    if (!v14) {
      operator new();
    }
    unsigned int v15 = (const CoreNavigation::CLP::LogEntry::PrivateData::BeidouB1SyncState *)*((void *)a2 + 5);
    if (!v15)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);
      unsigned int v15 = *(const CoreNavigation::CLP::LogEntry::PrivateData::BeidouB1SyncState **)(CoreNavigation::CLP::LogEntry::PrivateData::SyncState::default_instance_
                                                                                    + 40);
    }
    CoreNavigation::CLP::LogEntry::PrivateData::BeidouB1SyncState::MergeFrom(v14, v15);
    int v4 = *((_DWORD *)a2 + 24);
    if ((v4 & 0x40) == 0)
    {
LABEL_13:
      if ((v4 & 0x80) == 0) {
        goto LABEL_50;
      }
      goto LABEL_45;
    }
    goto LABEL_40;
  }
LABEL_30:
  *((_DWORD *)this + 24) |= 0x10u;
  int v12 = (CoreNavigation::CLP::LogEntry::PrivateData::GlonassL1fSyncState *)*((void *)this + 4);
  if (!v12) {
    operator new();
  }
  int v13 = (const CoreNavigation::CLP::LogEntry::PrivateData::GlonassL1fSyncState *)*((void *)a2 + 4);
  if (!v13)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);
    int v13 = *(const CoreNavigation::CLP::LogEntry::PrivateData::GlonassL1fSyncState **)(CoreNavigation::CLP::LogEntry::PrivateData::SyncState::default_instance_
                                                                                    + 32);
  }
  CoreNavigation::CLP::LogEntry::PrivateData::GlonassL1fSyncState::MergeFrom(v12, v13);
  int v4 = *((_DWORD *)a2 + 24);
  if ((v4 & 0x20) != 0) {
    goto LABEL_35;
  }
LABEL_12:
  if ((v4 & 0x40) == 0) {
    goto LABEL_13;
  }
LABEL_40:
  *((_DWORD *)this + 24) |= 0x40u;
  unsigned int v16 = (CoreNavigation::CLP::LogEntry::PrivateData::BeidouB2SyncState *)*((void *)this + 6);
  if (!v16) {
    operator new();
  }
  unsigned int v17 = (const CoreNavigation::CLP::LogEntry::PrivateData::BeidouB2SyncState *)*((void *)a2 + 6);
  if (!v17)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);
    unsigned int v17 = *(const CoreNavigation::CLP::LogEntry::PrivateData::BeidouB2SyncState **)(CoreNavigation::CLP::LogEntry::PrivateData::SyncState::default_instance_
                                                                                  + 48);
  }
  CoreNavigation::CLP::LogEntry::PrivateData::BeidouB2SyncState::MergeFrom(v16, v17);
  int v4 = *((_DWORD *)a2 + 24);
  if ((v4 & 0x80) != 0)
  {
LABEL_45:
    *((_DWORD *)this + 24) |= 0x80u;
    unsigned int v18 = (CoreNavigation::CLP::LogEntry::PrivateData::GalileoE1SyncState *)*((void *)this + 7);
    if (!v18) {
      operator new();
    }
    unsigned int v19 = (const CoreNavigation::CLP::LogEntry::PrivateData::GalileoE1SyncState *)*((void *)a2 + 7);
    if (!v19)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);
      unsigned int v19 = *(const CoreNavigation::CLP::LogEntry::PrivateData::GalileoE1SyncState **)(CoreNavigation::CLP::LogEntry::PrivateData::SyncState::default_instance_
                                                                                     + 56);
    }
    CoreNavigation::CLP::LogEntry::PrivateData::GalileoE1SyncState::MergeFrom(v18, v19);
    int v4 = *((_DWORD *)a2 + 24);
  }
LABEL_50:
  if ((v4 & 0xFF00) == 0) {
    return;
  }
  if ((v4 & 0x100) != 0)
  {
    *((_DWORD *)this + 24) |= 0x100u;
    unsigned int v20 = (CoreNavigation::CLP::LogEntry::PrivateData::GalileoE5SyncState *)*((void *)this + 8);
    if (!v20) {
      operator new();
    }
    unsigned int v21 = (const CoreNavigation::CLP::LogEntry::PrivateData::GalileoE5SyncState *)*((void *)a2 + 8);
    if (!v21)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);
      unsigned int v21 = *(const CoreNavigation::CLP::LogEntry::PrivateData::GalileoE5SyncState **)(CoreNavigation::CLP::LogEntry::PrivateData::SyncState::default_instance_
                                                                                     + 64);
    }
    CoreNavigation::CLP::LogEntry::PrivateData::GalileoE5SyncState::MergeFrom(v20, v21);
    int v4 = *((_DWORD *)a2 + 24);
    if ((v4 & 0x200) == 0)
    {
LABEL_53:
      if ((v4 & 0x400) == 0) {
        return;
      }
      goto LABEL_65;
    }
  }
  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_53;
  }
  *((_DWORD *)this + 24) |= 0x200u;
  unsigned int v22 = (CoreNavigation::CLP::LogEntry::PrivateData::SbasL1SyncState *)*((void *)this + 9);
  if (!v22) {
    operator new();
  }
  int v23 = (const CoreNavigation::CLP::LogEntry::PrivateData::SbasL1SyncState *)*((void *)a2 + 9);
  if (!v23)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);
    int v23 = *(const CoreNavigation::CLP::LogEntry::PrivateData::SbasL1SyncState **)(CoreNavigation::CLP::LogEntry::PrivateData::SyncState::default_instance_
                                                                                + 72);
  }
  CoreNavigation::CLP::LogEntry::PrivateData::SbasL1SyncState::MergeFrom(v22, v23);
  if ((*((_DWORD *)a2 + 24) & 0x400) != 0)
  {
LABEL_65:
    *((_DWORD *)this + 24) |= 0x400u;
    unsigned int v24 = (CoreNavigation::CLP::LogEntry::PrivateData::GpsL1SyncState *)*((void *)this + 10);
    if (!v24) {
      operator new();
    }
    uint64_t v25 = (const CoreNavigation::CLP::LogEntry::PrivateData::GpsL1SyncState *)*((void *)a2 + 10);
    if (!v25)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);
      uint64_t v25 = *(const CoreNavigation::CLP::LogEntry::PrivateData::GpsL1SyncState **)(CoreNavigation::CLP::LogEntry::PrivateData::SyncState::default_instance_
                                                                                 + 80);
    }
    CoreNavigation::CLP::LogEntry::PrivateData::GpsL1SyncState::MergeFrom(v24, v25);
  }
}

void sub_18DFC2184(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CoreNavigation::CLP::LogEntry::PrivateData::SyncState::~SyncState(CoreNavigation::CLP::LogEntry::PrivateData::SyncState *this)
{
  *(void *)this = &unk_1EDD0F188;
  CoreNavigation::CLP::LogEntry::PrivateData::SyncState::SharedDtor(this);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  uint64_t vars8;

  CoreNavigation::CLP::LogEntry::PrivateData::SyncState::~SyncState(this);

  JUMPOUT(0x192FA6240);
}

void CoreNavigation::CLP::LogEntry::PrivateData::SyncState::SharedDtor(CoreNavigation::CLP::LogEntry::PrivateData::SyncState *this)
{
  CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);
  if ((CoreNavigation::CLP::LogEntry::PrivateData::SyncState *)CoreNavigation::CLP::LogEntry::PrivateData::SyncState::default_instance_ != this)
  {
    uint64_t v2 = *((void *)this + 1);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
    uint64_t v3 = *((void *)this + 2);
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
    uint64_t v4 = *((void *)this + 3);
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
    uint64_t v5 = *((void *)this + 4);
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    }
    uint64_t v6 = *((void *)this + 5);
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
    uint64_t v7 = *((void *)this + 6);
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    }
    uint64_t v8 = *((void *)this + 7);
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    }
    uint64_t v9 = *((void *)this + 8);
    if (v9) {
      (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
    }
    uint64_t v10 = *((void *)this + 9);
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
    uint64_t v11 = *((void *)this + 10);
    if (v11)
    {
      int v12 = *(void (**)(void))(*(void *)v11 + 8);
      v12();
    }
  }
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::SyncState::default_instance(CoreNavigation::CLP::LogEntry::PrivateData::SyncState *this)
{
  return CoreNavigation::CLP::LogEntry::PrivateData::SyncState::default_instance_;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::SyncState::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 92) = a2;
  return this;
}

void CoreNavigation::CLP::LogEntry::PrivateData::SyncState::New(CoreNavigation::CLP::LogEntry::PrivateData::SyncState *this)
{
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::SyncState::Clear(uint64_t this)
{
  int v1 = *(_DWORD *)(this + 96);
  if ((_BYTE)v1)
  {
    *(_DWORD *)(this + 88) = 0;
    if ((v1 & 2) != 0)
    {
      uint64_t v2 = *(void *)(this + 8);
      if (v2)
      {
        if (*(unsigned char *)(v2 + 16)) {
          *(_DWORD *)(v2 + 8) = 0;
        }
        *(_DWORD *)(v2 + 16) = 0;
        int v1 = *(_DWORD *)(this + 96);
      }
    }
    if ((v1 & 4) != 0)
    {
      uint64_t v3 = *(void *)(this + 16);
      if (v3)
      {
        if (*(unsigned char *)(v3 + 20))
        {
          *(unsigned char *)(v3 + 12) = 0;
          *(_DWORD *)(v3 + 8) = 0;
        }
        *(_DWORD *)(v3 + 20) = 0;
        int v1 = *(_DWORD *)(this + 96);
      }
    }
    if ((v1 & 8) != 0)
    {
      uint64_t v4 = *(void *)(this + 24);
      if (v4)
      {
        if (*(unsigned char *)(v4 + 16)) {
          *(_DWORD *)(v4 + 8) = 0;
        }
        *(_DWORD *)(v4 + 16) = 0;
        int v1 = *(_DWORD *)(this + 96);
      }
    }
    if ((v1 & 0x10) != 0)
    {
      uint64_t v5 = *(void *)(this + 32);
      if (v5)
      {
        if (*(unsigned char *)(v5 + 20))
        {
          *(unsigned char *)(v5 + 12) = 0;
          *(_DWORD *)(v5 + 8) = 0;
        }
        *(_DWORD *)(v5 + 20) = 0;
        int v1 = *(_DWORD *)(this + 96);
      }
    }
    if ((v1 & 0x20) != 0)
    {
      uint64_t v6 = *(void *)(this + 40);
      if (v6)
      {
        if (*(unsigned char *)(v6 + 16)) {
          *(_DWORD *)(v6 + 8) = 0;
        }
        *(_DWORD *)(v6 + 16) = 0;
        int v1 = *(_DWORD *)(this + 96);
      }
    }
    if ((v1 & 0x40) != 0)
    {
      uint64_t v7 = *(void *)(this + 48);
      if (v7)
      {
        if (*(unsigned char *)(v7 + 16)) {
          *(_DWORD *)(v7 + 8) = 0;
        }
        *(_DWORD *)(v7 + 16) = 0;
        int v1 = *(_DWORD *)(this + 96);
      }
    }
    if ((v1 & 0x80) != 0)
    {
      uint64_t v8 = *(void *)(this + 56);
      if (v8)
      {
        if (*(unsigned char *)(v8 + 16)) {
          *(_DWORD *)(v8 + 8) = 0;
        }
        *(_DWORD *)(v8 + 16) = 0;
        int v1 = *(_DWORD *)(this + 96);
      }
    }
  }
  if ((v1 & 0xFF00) != 0)
  {
    if ((v1 & 0x100) != 0)
    {
      uint64_t v9 = *(void *)(this + 64);
      if (v9)
      {
        int v10 = *(_DWORD *)(v9 + 24);
        if ((_BYTE)v10) {
          *(void *)(v9 + 8) = 0;
        }
        if ((v10 & 0xFF00) != 0) {
          *(_WORD *)(v9 + 16) = 0;
        }
        *(_DWORD *)(v9 + 24) = 0;
        int v1 = *(_DWORD *)(this + 96);
      }
    }
    if ((v1 & 0x200) != 0)
    {
      uint64_t v11 = *(void *)(this + 72);
      if (v11)
      {
        if (*(unsigned char *)(v11 + 16))
        {
          *(_WORD *)(v11 + 8) = 0;
          *(unsigned char *)(v11 + 10) = 0;
        }
        *(_DWORD *)(v11 + 16) = 0;
        int v1 = *(_DWORD *)(this + 96);
      }
    }
    if ((v1 & 0x400) != 0)
    {
      uint64_t v12 = *(void *)(this + 80);
      if (v12)
      {
        if (*(unsigned char *)(v12 + 16)) {
          *(_DWORD *)(v12 + 8) = 0;
        }
        *(_DWORD *)(v12 + 16) = 0;
      }
    }
  }
  *(_DWORD *)(this + 96) = 0;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::SyncState::MergePartialFromCodedStream(CoreNavigation::CLP::LogEntry::PrivateData::SyncState *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  while (1)
  {
    uint64_t v4 = (char *)*((void *)a2 + 1);
    if ((unint64_t)v4 < *((void *)a2 + 2) && (*v4 & 0x80000000) == 0)
    {
      unint64_t TagFallback = *v4;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((void *)a2 + 1) = v4 + 1;
      if (!TagFallback) {
        return 1;
      }
      goto LABEL_6;
    }
    unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
    *((_DWORD *)a2 + 8) = TagFallback;
    if (!TagFallback) {
      return 1;
    }
LABEL_6:
    switch(TagFallback >> 3)
    {
      case 1u:
        int v6 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_31;
        }
        unsigned int v81 = 0;
        uint64_t v7 = (char *)*((void *)a2 + 1);
        if ((unint64_t)v7 >= *((void *)a2 + 2) || *v7 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v81);
          if (!result) {
            return result;
          }
          unsigned int v8 = v81;
        }
        else
        {
          unsigned int v8 = *v7;
          *((void *)a2 + 1) = v7 + 1;
        }
        if (v8 <= 0xC)
        {
          *((_DWORD *)this + 24) |= 1u;
          *((_DWORD *)this + 22) = v8;
        }
        int v10 = (unsigned char *)*((void *)a2 + 1);
        if ((unint64_t)v10 < *((void *)a2 + 2) && *v10 == 18)
        {
          *((void *)a2 + 1) = v10 + 1;
          goto LABEL_41;
        }
        continue;
      case 2u:
        int v6 = TagFallback & 7;
        if (v6 != 2) {
          goto LABEL_31;
        }
LABEL_41:
        *((_DWORD *)this + 24) |= 2u;
        uint64_t v11 = (CoreNavigation::CLP::LogEntry::PrivateData::GpsL1SyncState *)*((void *)this + 1);
        if (!v11) {
          operator new();
        }
        unsigned int v81 = 0;
        uint64_t v12 = (char *)*((void *)a2 + 1);
        if ((unint64_t)v12 >= *((void *)a2 + 2) || *v12 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v81))return 0; {
        }
          }
        else
        {
          unsigned int v81 = *v12;
          *((void *)a2 + 1) = v12 + 1;
        }
        int v13 = *((_DWORD *)a2 + 14);
        int v14 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v13 + 1;
        if (v13 >= v14) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CoreNavigation::CLP::LogEntry::PrivateData::GpsL1SyncState::MergePartialFromCodedStream(v11, a2)|| !*((unsigned char *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        int v15 = *((_DWORD *)a2 + 14);
        BOOL v16 = __OFSUB__(v15, 1);
        int v17 = v15 - 1;
        if (v17 < 0 == v16) {
          *((_DWORD *)a2 + 14) = v17;
        }
        unsigned int v18 = (unsigned char *)*((void *)a2 + 1);
        if ((unint64_t)v18 >= *((void *)a2 + 2) || *v18 != 26) {
          continue;
        }
        *((void *)a2 + 1) = v18 + 1;
LABEL_55:
        *((_DWORD *)this + 24) |= 4u;
        unsigned int v19 = (CoreNavigation::CLP::LogEntry::PrivateData::GpsL2CSyncState *)*((void *)this + 2);
        if (!v19) {
          operator new();
        }
        unsigned int v81 = 0;
        unsigned int v20 = (char *)*((void *)a2 + 1);
        if ((unint64_t)v20 >= *((void *)a2 + 2) || *v20 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v81))return 0; {
        }
          }
        else
        {
          unsigned int v81 = *v20;
          *((void *)a2 + 1) = v20 + 1;
        }
        int v21 = *((_DWORD *)a2 + 14);
        int v22 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v21 + 1;
        if (v21 >= v22) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CoreNavigation::CLP::LogEntry::PrivateData::GpsL2CSyncState::MergePartialFromCodedStream(v19, a2)|| !*((unsigned char *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        int v23 = *((_DWORD *)a2 + 14);
        BOOL v16 = __OFSUB__(v23, 1);
        int v24 = v23 - 1;
        if (v24 < 0 == v16) {
          *((_DWORD *)a2 + 14) = v24;
        }
        uint64_t v25 = (unsigned char *)*((void *)a2 + 1);
        if ((unint64_t)v25 >= *((void *)a2 + 2) || *v25 != 34) {
          continue;
        }
        *((void *)a2 + 1) = v25 + 1;
LABEL_69:
        *((_DWORD *)this + 24) |= 8u;
        unsigned int v26 = (CoreNavigation::CLP::LogEntry::PrivateData::GpsL5SyncState *)*((void *)this + 3);
        if (!v26) {
          operator new();
        }
        unsigned int v81 = 0;
        int v27 = (char *)*((void *)a2 + 1);
        if ((unint64_t)v27 >= *((void *)a2 + 2) || *v27 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v81))return 0; {
        }
          }
        else
        {
          unsigned int v81 = *v27;
          *((void *)a2 + 1) = v27 + 1;
        }
        int v28 = *((_DWORD *)a2 + 14);
        int v29 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v28 + 1;
        if (v28 >= v29) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CoreNavigation::CLP::LogEntry::PrivateData::GpsL5SyncState::MergePartialFromCodedStream(v26, a2)|| !*((unsigned char *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        int v30 = *((_DWORD *)a2 + 14);
        BOOL v16 = __OFSUB__(v30, 1);
        int v31 = v30 - 1;
        if (v31 < 0 == v16) {
          *((_DWORD *)a2 + 14) = v31;
        }
        unsigned int v32 = (unsigned char *)*((void *)a2 + 1);
        if ((unint64_t)v32 >= *((void *)a2 + 2) || *v32 != 42) {
          continue;
        }
        *((void *)a2 + 1) = v32 + 1;
LABEL_83:
        *((_DWORD *)this + 24) |= 0x10u;
        int v33 = (CoreNavigation::CLP::LogEntry::PrivateData::GlonassL1fSyncState *)*((void *)this + 4);
        if (!v33) {
          operator new();
        }
        unsigned int v81 = 0;
        unsigned int v34 = (char *)*((void *)a2 + 1);
        if ((unint64_t)v34 >= *((void *)a2 + 2) || *v34 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v81))return 0; {
        }
          }
        else
        {
          unsigned int v81 = *v34;
          *((void *)a2 + 1) = v34 + 1;
        }
        int v35 = *((_DWORD *)a2 + 14);
        int v36 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v35 + 1;
        if (v35 >= v36) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CoreNavigation::CLP::LogEntry::PrivateData::GlonassL1fSyncState::MergePartialFromCodedStream(v33, a2)|| !*((unsigned char *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        int v37 = *((_DWORD *)a2 + 14);
        BOOL v16 = __OFSUB__(v37, 1);
        int v38 = v37 - 1;
        if (v38 < 0 == v16) {
          *((_DWORD *)a2 + 14) = v38;
        }
        unsigned int v39 = (unsigned char *)*((void *)a2 + 1);
        if ((unint64_t)v39 >= *((void *)a2 + 2) || *v39 != 50) {
          continue;
        }
        *((void *)a2 + 1) = v39 + 1;
LABEL_97:
        *((_DWORD *)this + 24) |= 0x20u;
        int v40 = (CoreNavigation::CLP::LogEntry::PrivateData::BeidouB1SyncState *)*((void *)this + 5);
        if (!v40) {
          operator new();
        }
        unsigned int v81 = 0;
        int v41 = (char *)*((void *)a2 + 1);
        if ((unint64_t)v41 >= *((void *)a2 + 2) || *v41 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v81))return 0; {
        }
          }
        else
        {
          unsigned int v81 = *v41;
          *((void *)a2 + 1) = v41 + 1;
        }
        int v42 = *((_DWORD *)a2 + 14);
        int v43 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v42 + 1;
        if (v42 >= v43) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CoreNavigation::CLP::LogEntry::PrivateData::BeidouB1SyncState::MergePartialFromCodedStream(v40, a2)|| !*((unsigned char *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        int v44 = *((_DWORD *)a2 + 14);
        BOOL v16 = __OFSUB__(v44, 1);
        int v45 = v44 - 1;
        if (v45 < 0 == v16) {
          *((_DWORD *)a2 + 14) = v45;
        }
        int v46 = (unsigned char *)*((void *)a2 + 1);
        if ((unint64_t)v46 >= *((void *)a2 + 2) || *v46 != 58) {
          continue;
        }
        *((void *)a2 + 1) = v46 + 1;
LABEL_111:
        *((_DWORD *)this + 24) |= 0x40u;
        int v47 = (CoreNavigation::CLP::LogEntry::PrivateData::BeidouB2SyncState *)*((void *)this + 6);
        if (!v47) {
          operator new();
        }
        unsigned int v81 = 0;
        unsigned int v48 = (char *)*((void *)a2 + 1);
        if ((unint64_t)v48 >= *((void *)a2 + 2) || *v48 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v81))return 0; {
        }
          }
        else
        {
          unsigned int v81 = *v48;
          *((void *)a2 + 1) = v48 + 1;
        }
        int v49 = *((_DWORD *)a2 + 14);
        int v50 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v49 + 1;
        if (v49 >= v50) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CoreNavigation::CLP::LogEntry::PrivateData::BeidouB2SyncState::MergePartialFromCodedStream(v47, a2)|| !*((unsigned char *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        int v51 = *((_DWORD *)a2 + 14);
        BOOL v16 = __OFSUB__(v51, 1);
        int v52 = v51 - 1;
        if (v52 < 0 == v16) {
          *((_DWORD *)a2 + 14) = v52;
        }
        v53 = (unsigned char *)*((void *)a2 + 1);
        if ((unint64_t)v53 >= *((void *)a2 + 2) || *v53 != 66) {
          continue;
        }
        *((void *)a2 + 1) = v53 + 1;
LABEL_125:
        *((_DWORD *)this + 24) |= 0x80u;
        int v54 = (CoreNavigation::CLP::LogEntry::PrivateData::GalileoE1SyncState *)*((void *)this + 7);
        if (!v54) {
          operator new();
        }
        unsigned int v81 = 0;
        int v55 = (char *)*((void *)a2 + 1);
        if ((unint64_t)v55 >= *((void *)a2 + 2) || *v55 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v81))return 0; {
        }
          }
        else
        {
          unsigned int v81 = *v55;
          *((void *)a2 + 1) = v55 + 1;
        }
        int v56 = *((_DWORD *)a2 + 14);
        int v57 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v56 + 1;
        if (v56 >= v57) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CoreNavigation::CLP::LogEntry::PrivateData::GalileoE1SyncState::MergePartialFromCodedStream(v54, a2)|| !*((unsigned char *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        int v58 = *((_DWORD *)a2 + 14);
        BOOL v16 = __OFSUB__(v58, 1);
        int v59 = v58 - 1;
        if (v59 < 0 == v16) {
          *((_DWORD *)a2 + 14) = v59;
        }
        v60 = (unsigned char *)*((void *)a2 + 1);
        if ((unint64_t)v60 >= *((void *)a2 + 2) || *v60 != 74) {
          continue;
        }
        *((void *)a2 + 1) = v60 + 1;
LABEL_139:
        *((_DWORD *)this + 24) |= 0x100u;
        v61 = (CoreNavigation::CLP::LogEntry::PrivateData::GalileoE5SyncState *)*((void *)this + 8);
        if (!v61) {
          operator new();
        }
        unsigned int v81 = 0;
        int v62 = (char *)*((void *)a2 + 1);
        if ((unint64_t)v62 >= *((void *)a2 + 2) || *v62 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v81))return 0; {
        }
          }
        else
        {
          unsigned int v81 = *v62;
          *((void *)a2 + 1) = v62 + 1;
        }
        int v63 = *((_DWORD *)a2 + 14);
        int v64 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v63 + 1;
        if (v63 >= v64) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CoreNavigation::CLP::LogEntry::PrivateData::GalileoE5SyncState::MergePartialFromCodedStream(v61, a2)|| !*((unsigned char *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        int v65 = *((_DWORD *)a2 + 14);
        BOOL v16 = __OFSUB__(v65, 1);
        int v66 = v65 - 1;
        if (v66 < 0 == v16) {
          *((_DWORD *)a2 + 14) = v66;
        }
        int v67 = (unsigned char *)*((void *)a2 + 1);
        if ((unint64_t)v67 >= *((void *)a2 + 2) || *v67 != 82) {
          continue;
        }
        *((void *)a2 + 1) = v67 + 1;
LABEL_153:
        *((_DWORD *)this + 24) |= 0x200u;
        uint64_t v68 = (CoreNavigation::CLP::LogEntry::PrivateData::SbasL1SyncState *)*((void *)this + 9);
        if (!v68) {
          operator new();
        }
        unsigned int v81 = 0;
        v69 = (char *)*((void *)a2 + 1);
        if ((unint64_t)v69 >= *((void *)a2 + 2) || *v69 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v81))return 0; {
        }
          }
        else
        {
          unsigned int v81 = *v69;
          *((void *)a2 + 1) = v69 + 1;
        }
        int v70 = *((_DWORD *)a2 + 14);
        int v71 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v70 + 1;
        if (v70 >= v71) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CoreNavigation::CLP::LogEntry::PrivateData::SbasL1SyncState::MergePartialFromCodedStream(v68, a2)|| !*((unsigned char *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        int v72 = *((_DWORD *)a2 + 14);
        BOOL v16 = __OFSUB__(v72, 1);
        int v73 = v72 - 1;
        if (v73 < 0 == v16) {
          *((_DWORD *)a2 + 14) = v73;
        }
        int v74 = (unsigned char *)*((void *)a2 + 1);
        if ((unint64_t)v74 >= *((void *)a2 + 2) || *v74 != 90) {
          continue;
        }
        *((void *)a2 + 1) = v74 + 1;
LABEL_167:
        *((_DWORD *)this + 24) |= 0x400u;
        int v75 = (CoreNavigation::CLP::LogEntry::PrivateData::GpsL1SyncState *)*((void *)this + 10);
        if (!v75) {
          operator new();
        }
        unsigned int v81 = 0;
        v76 = (char *)*((void *)a2 + 1);
        if ((unint64_t)v76 >= *((void *)a2 + 2) || *v76 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v81))return 0; {
        }
          }
        else
        {
          unsigned int v81 = *v76;
          *((void *)a2 + 1) = v76 + 1;
        }
        int v77 = *((_DWORD *)a2 + 14);
        int v78 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v77 + 1;
        if (v77 >= v78) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CoreNavigation::CLP::LogEntry::PrivateData::GpsL1SyncState::MergePartialFromCodedStream(v75, a2)|| !*((unsigned char *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        int v79 = *((_DWORD *)a2 + 14);
        BOOL v16 = __OFSUB__(v79, 1);
        int v80 = v79 - 1;
        if (v80 < 0 == v16) {
          *((_DWORD *)a2 + 14) = v80;
        }
        if (*((void *)a2 + 1) == *((void *)a2 + 2)
          && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
        {
          *((_DWORD *)a2 + 8) = 0;
          uint64_t result = 1;
          *((unsigned char *)a2 + 36) = 1;
          return result;
        }
        break;
      case 3u:
        int v6 = TagFallback & 7;
        if (v6 == 2) {
          goto LABEL_55;
        }
        goto LABEL_31;
      case 4u:
        int v6 = TagFallback & 7;
        if (v6 == 2) {
          goto LABEL_69;
        }
        goto LABEL_31;
      case 5u:
        int v6 = TagFallback & 7;
        if (v6 == 2) {
          goto LABEL_83;
        }
        goto LABEL_31;
      case 6u:
        int v6 = TagFallback & 7;
        if (v6 == 2) {
          goto LABEL_97;
        }
        goto LABEL_31;
      case 7u:
        int v6 = TagFallback & 7;
        if (v6 == 2) {
          goto LABEL_111;
        }
        goto LABEL_31;
      case 8u:
        int v6 = TagFallback & 7;
        if (v6 == 2) {
          goto LABEL_125;
        }
        goto LABEL_31;
      case 9u:
        int v6 = TagFallback & 7;
        if (v6 == 2) {
          goto LABEL_139;
        }
        goto LABEL_31;
      case 0xAu:
        int v6 = TagFallback & 7;
        if (v6 == 2) {
          goto LABEL_153;
        }
        goto LABEL_31;
      case 0xBu:
        int v6 = TagFallback & 7;
        if (v6 != 2) {
          goto LABEL_31;
        }
        goto LABEL_167;
      default:
        int v6 = TagFallback & 7;
LABEL_31:
        if (v6 == 4) {
          return 1;
        }
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0; {
        continue;
        }
    }
  }
}

unsigned int *CoreNavigation::CLP::LogEntry::PrivateData::SyncState::SerializeWithCachedSizes(unsigned int *this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  unsigned int v6 = this[24];
  if (v6)
  {
    this = (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, this[22], (uint64_t)a2, a4);
    unsigned int v6 = v5[24];
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_17;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t v7 = *((void *)v5 + 1);
  if (!v7)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)this);
    uint64_t v7 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::SyncState::default_instance_ + 8);
  }
  this = (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v7, a2, a4);
  unsigned int v6 = v5[24];
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_20;
  }
LABEL_17:
  uint64_t v8 = *((void *)v5 + 2);
  if (!v8)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)this);
    uint64_t v8 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::SyncState::default_instance_ + 16);
  }
  this = (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v8, a2, a4);
  unsigned int v6 = v5[24];
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_23;
  }
LABEL_20:
  uint64_t v9 = *((void *)v5 + 3);
  if (!v9)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)this);
    uint64_t v9 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::SyncState::default_instance_ + 24);
  }
  this = (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v9, a2, a4);
  unsigned int v6 = v5[24];
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_26;
  }
LABEL_23:
  uint64_t v10 = *((void *)v5 + 4);
  if (!v10)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)this);
    uint64_t v10 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::SyncState::default_instance_ + 32);
  }
  this = (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, v10, a2, a4);
  unsigned int v6 = v5[24];
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_29;
  }
LABEL_26:
  uint64_t v11 = *((void *)v5 + 5);
  if (!v11)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)this);
    uint64_t v11 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::SyncState::default_instance_ + 40);
  }
  this = (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, v11, a2, a4);
  unsigned int v6 = v5[24];
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_32;
  }
LABEL_29:
  uint64_t v12 = *((void *)v5 + 6);
  if (!v12)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)this);
    uint64_t v12 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::SyncState::default_instance_ + 48);
  }
  this = (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, v12, a2, a4);
  unsigned int v6 = v5[24];
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_35;
  }
LABEL_32:
  uint64_t v13 = *((void *)v5 + 7);
  if (!v13)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)this);
    uint64_t v13 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::SyncState::default_instance_ + 56);
  }
  this = (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, v13, a2, a4);
  unsigned int v6 = v5[24];
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_38;
  }
LABEL_35:
  uint64_t v14 = *((void *)v5 + 8);
  if (!v14)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)this);
    uint64_t v14 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::SyncState::default_instance_ + 64);
  }
  this = (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9, v14, a2, a4);
  unsigned int v6 = v5[24];
  if ((v6 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0) {
      return this;
    }
    goto LABEL_41;
  }
LABEL_38:
  uint64_t v15 = *((void *)v5 + 9);
  if (!v15)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)this);
    uint64_t v15 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::SyncState::default_instance_ + 72);
  }
  this = (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA, v15, a2, a4);
  if ((v5[24] & 0x400) != 0)
  {
LABEL_41:
    uint64_t v16 = *((void *)v5 + 10);
    if (!v16)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)this);
      uint64_t v16 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::SyncState::default_instance_ + 80);
    }
    return (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB, v16, a2, a4);
  }
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::SyncState::ByteSize(uint64_t this)
{
  uint64_t v1 = this;
  int v2 = *(_DWORD *)(this + 96);
  if (!(_BYTE)v2)
  {
    uint64_t v3 = 0;
    goto LABEL_40;
  }
  if (v2)
  {
    uint64_t v4 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(this + 88);
    if ((v4 & 0x80000000) != 0)
    {
      this = 10;
    }
    else if (v4 >= 0x80)
    {
      this = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v4);
      int v2 = *(_DWORD *)(v1 + 96);
    }
    else
    {
      this = 1;
    }
    uint64_t v3 = (this + 1);
    if ((v2 & 2) == 0) {
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v3 = 0;
    if ((v2 & 2) == 0) {
      goto LABEL_15;
    }
  }
  uint64_t v5 = *(CoreNavigation::CLP::LogEntry::PrivateData::GpsL1SyncState **)(v1 + 8);
  if (!v5)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(0);
    uint64_t v5 = *(CoreNavigation::CLP::LogEntry::PrivateData::GpsL1SyncState **)(CoreNavigation::CLP::LogEntry::PrivateData::SyncState::default_instance_
                                                                        + 8);
  }
  this = CoreNavigation::CLP::LogEntry::PrivateData::GpsL1SyncState::ByteSize(v5);
  uint64_t v3 = (v3 + this + 2);
  int v2 = *(_DWORD *)(v1 + 96);
LABEL_15:
  if ((v2 & 4) != 0)
  {
    unsigned int v6 = *(CoreNavigation::CLP::LogEntry::PrivateData::GpsL2CSyncState **)(v1 + 16);
    if (!v6)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(0);
      unsigned int v6 = *(CoreNavigation::CLP::LogEntry::PrivateData::GpsL2CSyncState **)(CoreNavigation::CLP::LogEntry::PrivateData::SyncState::default_instance_
                                                                           + 16);
    }
    this = CoreNavigation::CLP::LogEntry::PrivateData::GpsL2CSyncState::ByteSize(v6);
    uint64_t v3 = (v3 + this + 2);
    int v2 = *(_DWORD *)(v1 + 96);
    if ((v2 & 8) == 0)
    {
LABEL_17:
      if ((v2 & 0x10) == 0) {
        goto LABEL_18;
      }
      goto LABEL_28;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_17;
  }
  uint64_t v7 = *(CoreNavigation::CLP::LogEntry::PrivateData::GpsL5SyncState **)(v1 + 24);
  if (!v7)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(0);
    uint64_t v7 = *(CoreNavigation::CLP::LogEntry::PrivateData::GpsL5SyncState **)(CoreNavigation::CLP::LogEntry::PrivateData::SyncState::default_instance_
                                                                        + 24);
  }
  this = CoreNavigation::CLP::LogEntry::PrivateData::GpsL5SyncState::ByteSize(v7);
  uint64_t v3 = (v3 + this + 2);
  int v2 = *(_DWORD *)(v1 + 96);
  if ((v2 & 0x10) == 0)
  {
LABEL_18:
    if ((v2 & 0x20) == 0) {
      goto LABEL_19;
    }
    goto LABEL_31;
  }
LABEL_28:
  uint64_t v8 = *(CoreNavigation::CLP::LogEntry::PrivateData::GlonassL1fSyncState **)(v1 + 32);
  if (!v8)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(0);
    uint64_t v8 = *(CoreNavigation::CLP::LogEntry::PrivateData::GlonassL1fSyncState **)(CoreNavigation::CLP::LogEntry::PrivateData::SyncState::default_instance_
                                                                             + 32);
  }
  this = CoreNavigation::CLP::LogEntry::PrivateData::GlonassL1fSyncState::ByteSize(v8);
  uint64_t v3 = (v3 + this + 2);
  int v2 = *(_DWORD *)(v1 + 96);
  if ((v2 & 0x20) == 0)
  {
LABEL_19:
    if ((v2 & 0x40) == 0) {
      goto LABEL_20;
    }
    goto LABEL_34;
  }
LABEL_31:
  uint64_t v9 = *(CoreNavigation::CLP::LogEntry::PrivateData::BeidouB1SyncState **)(v1 + 40);
  if (!v9)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(0);
    uint64_t v9 = *(CoreNavigation::CLP::LogEntry::PrivateData::BeidouB1SyncState **)(CoreNavigation::CLP::LogEntry::PrivateData::SyncState::default_instance_
                                                                           + 40);
  }
  this = CoreNavigation::CLP::LogEntry::PrivateData::BeidouB1SyncState::ByteSize(v9);
  uint64_t v3 = (v3 + this + 2);
  int v2 = *(_DWORD *)(v1 + 96);
  if ((v2 & 0x40) == 0)
  {
LABEL_20:
    if ((v2 & 0x80) == 0) {
      goto LABEL_40;
    }
    goto LABEL_37;
  }
LABEL_34:
  uint64_t v10 = *(CoreNavigation::CLP::LogEntry::PrivateData::BeidouB2SyncState **)(v1 + 48);
  if (!v10)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(0);
    uint64_t v10 = *(CoreNavigation::CLP::LogEntry::PrivateData::BeidouB2SyncState **)(CoreNavigation::CLP::LogEntry::PrivateData::SyncState::default_instance_
                                                                            + 48);
  }
  this = CoreNavigation::CLP::LogEntry::PrivateData::BeidouB2SyncState::ByteSize(v10);
  uint64_t v3 = (v3 + this + 2);
  int v2 = *(_DWORD *)(v1 + 96);
  if ((v2 & 0x80) != 0)
  {
LABEL_37:
    uint64_t v11 = *(CoreNavigation::CLP::LogEntry::PrivateData::GalileoE1SyncState **)(v1 + 56);
    if (!v11)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(0);
      uint64_t v11 = *(CoreNavigation::CLP::LogEntry::PrivateData::GalileoE1SyncState **)(CoreNavigation::CLP::LogEntry::PrivateData::SyncState::default_instance_
                                                                               + 56);
    }
    this = CoreNavigation::CLP::LogEntry::PrivateData::GalileoE1SyncState::ByteSize(v11);
    uint64_t v3 = (v3 + this + 2);
    int v2 = *(_DWORD *)(v1 + 96);
  }
LABEL_40:
  if ((v2 & 0xFF00) == 0) {
    goto LABEL_61;
  }
  if ((v2 & 0x100) != 0)
  {
    uint64_t v12 = *(CoreNavigation::CLP::LogEntry::PrivateData::GalileoE5SyncState **)(v1 + 64);
    if (!v12)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(0);
      uint64_t v12 = *(CoreNavigation::CLP::LogEntry::PrivateData::GalileoE5SyncState **)(CoreNavigation::CLP::LogEntry::PrivateData::SyncState::default_instance_
                                                                               + 64);
    }
    this = CoreNavigation::CLP::LogEntry::PrivateData::GalileoE5SyncState::ByteSize(v12);
    uint64_t v3 = (v3 + this + 2);
    int v2 = *(_DWORD *)(v1 + 96);
    if ((v2 & 0x200) == 0)
    {
LABEL_43:
      if ((v2 & 0x400) == 0) {
        goto LABEL_61;
      }
      goto LABEL_58;
    }
  }
  else if ((v2 & 0x200) == 0)
  {
    goto LABEL_43;
  }
  uint64_t v13 = *(void *)(v1 + 72);
  if (!v13)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)this);
    uint64_t v13 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::SyncState::default_instance_ + 72);
  }
  int v14 = *(_DWORD *)(v13 + 16);
  int v15 = 2 * (v14 & 1);
  if ((v14 & 2) != 0) {
    v15 += 2;
  }
  if ((v14 & 4) != 0) {
    v15 += 2;
  }
  if (*(_DWORD *)(v13 + 16)) {
    int v16 = v15;
  }
  else {
    int v16 = 0;
  }
  *(_DWORD *)(v13 + 12) = v16;
  uint64_t v3 = (v3 + v16 + 2);
  if ((*(_DWORD *)(v1 + 96) & 0x400) != 0)
  {
LABEL_58:
    int v17 = *(CoreNavigation::CLP::LogEntry::PrivateData::GpsL1SyncState **)(v1 + 80);
    if (!v17)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(0);
      int v17 = *(CoreNavigation::CLP::LogEntry::PrivateData::GpsL1SyncState **)(CoreNavigation::CLP::LogEntry::PrivateData::SyncState::default_instance_
                                                                           + 80);
    }
    uint64_t v3 = v3 + CoreNavigation::CLP::LogEntry::PrivateData::GpsL1SyncState::ByteSize(v17) + 2;
  }
LABEL_61:
  *(_DWORD *)(v1 + 92) = v3;
  return v3;
}

void CoreNavigation::CLP::LogEntry::PrivateData::SyncState::CheckTypeAndMergeFrom(CoreNavigation::CLP::LogEntry::PrivateData::SyncState *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  CoreNavigation::CLP::LogEntry::PrivateData::SyncState::MergeFrom(this, lpsrc);
}

void CoreNavigation::CLP::LogEntry::PrivateData::SyncState::CopyFrom(CoreNavigation::CLP::LogEntry::PrivateData::SyncState *this, const CoreNavigation::CLP::LogEntry::PrivateData::SyncState *a2)
{
  if (a2 != this)
  {
    (*(void (**)(CoreNavigation::CLP::LogEntry::PrivateData::SyncState *))(*(void *)this + 32))(this);
    CoreNavigation::CLP::LogEntry::PrivateData::SyncState::MergeFrom(this, a2);
  }
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::SyncState::IsInitialized(CoreNavigation::CLP::LogEntry::PrivateData::SyncState *this)
{
  return 1;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::SyncState::Swap(uint64_t this, CoreNavigation::CLP::LogEntry::PrivateData::SyncState *a2)
{
  if (a2 != (CoreNavigation::CLP::LogEntry::PrivateData::SyncState *)this)
  {
    int v2 = *(_DWORD *)(this + 88);
    *(_DWORD *)(this + 88) = *((_DWORD *)a2 + 22);
    *((_DWORD *)a2 + 22) = v2;
    uint64_t v3 = *(void *)(this + 8);
    *(void *)(this + 8) = *((void *)a2 + 1);
    *((void *)a2 + 1) = v3;
    uint64_t v4 = *(void *)(this + 16);
    *(void *)(this + 16) = *((void *)a2 + 2);
    *((void *)a2 + 2) = v4;
    uint64_t v5 = *(void *)(this + 24);
    *(void *)(this + 24) = *((void *)a2 + 3);
    *((void *)a2 + 3) = v5;
    uint64_t v6 = *(void *)(this + 32);
    *(void *)(this + 32) = *((void *)a2 + 4);
    *((void *)a2 + 4) = v6;
    uint64_t v7 = *(void *)(this + 40);
    *(void *)(this + 40) = *((void *)a2 + 5);
    *((void *)a2 + 5) = v7;
    uint64_t v8 = *(void *)(this + 48);
    *(void *)(this + 48) = *((void *)a2 + 6);
    *((void *)a2 + 6) = v8;
    uint64_t v9 = *(void *)(this + 56);
    *(void *)(this + 56) = *((void *)a2 + 7);
    *((void *)a2 + 7) = v9;
    uint64_t v10 = *(void *)(this + 64);
    *(void *)(this + 64) = *((void *)a2 + 8);
    *((void *)a2 + 8) = v10;
    uint64_t v11 = *(void *)(this + 72);
    *(void *)(this + 72) = *((void *)a2 + 9);
    *((void *)a2 + 9) = v11;
    uint64_t v12 = *(void *)(this + 80);
    *(void *)(this + 80) = *((void *)a2 + 10);
    *((void *)a2 + 10) = v12;
    LODWORD(v12) = *(_DWORD *)(this + 96);
    *(_DWORD *)(this + 96) = *((_DWORD *)a2 + 24);
    *((_DWORD *)a2 + 24) = v12;
    LODWORD(v12) = *(_DWORD *)(this + 92);
    *(_DWORD *)(this + 92) = *((_DWORD *)a2 + 23);
    *((_DWORD *)a2 + 23) = v12;
  }
  return this;
}

void *CoreNavigation::CLP::LogEntry::PrivateData::SyncState::GetTypeName@<X0>(void *a1@<X8>)
{
  return sub_18DEDE7B0(a1, "CoreNavigation.CLP.LogEntry.PrivateData.SyncState");
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::SvTime::SharedCtor(uint64_t this)
{
  *(_DWORD *)(this + 28) = 0;
  *(_DWORD *)(this + 32) = 0;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(unsigned char *)(this + 24) = 0;
  return this;
}

CoreNavigation::CLP::LogEntry::PrivateData::SvTime *CoreNavigation::CLP::LogEntry::PrivateData::SvTime::SvTime(CoreNavigation::CLP::LogEntry::PrivateData::SvTime *this, const CoreNavigation::CLP::LogEntry::PrivateData::SvTime *a2)
{
  *((_DWORD *)this + 7) = 0;
  *((_DWORD *)this + 8) = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = &unk_1EDD0ED50;
  *((unsigned char *)this + 24) = 0;
  CoreNavigation::CLP::LogEntry::PrivateData::SvTime::MergeFrom(this, a2);
  return this;
}

void sub_18DFC3A14(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

double CoreNavigation::CLP::LogEntry::PrivateData::SvTime::MergeFrom(CoreNavigation::CLP::LogEntry::PrivateData::SvTime *this, const CoreNavigation::CLP::LogEntry::PrivateData::SvTime *a2)
{
  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v7);
  }
  LOBYTE(v5) = *((unsigned char *)a2 + 32);
  if ((_BYTE)v5)
  {
    if (*((unsigned char *)a2 + 32))
    {
      double result = *((double *)a2 + 1);
      *((_DWORD *)this + 8) |= 1u;
      *((double *)this + 1) = result;
      int v5 = *((_DWORD *)a2 + 8);
      if ((v5 & 2) == 0)
      {
LABEL_6:
        if ((v5 & 4) == 0) {
          return result;
        }
        goto LABEL_7;
      }
    }
    else if ((*((unsigned char *)a2 + 32) & 2) == 0)
    {
      goto LABEL_6;
    }
    double result = *((double *)a2 + 2);
    *((_DWORD *)this + 8) |= 2u;
    *((double *)this + 2) = result;
    if ((*((_DWORD *)a2 + 8) & 4) == 0) {
      return result;
    }
LABEL_7:
    char v6 = *((unsigned char *)a2 + 24);
    *((_DWORD *)this + 8) |= 4u;
    *((unsigned char *)this + 24) = v6;
  }
  return result;
}

void sub_18DFC3AFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CoreNavigation::CLP::LogEntry::PrivateData::SvTime::~SvTime(CoreNavigation::CLP::LogEntry::PrivateData::SvTime *this)
{
  *(void *)this = &unk_1EDD0ED50;
  CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  uint64_t vars8;

  CoreNavigation::CLP::LogEntry::PrivateData::SvTime::~SvTime(this);

  JUMPOUT(0x192FA6240);
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::SvTime::default_instance(CoreNavigation::CLP::LogEntry::PrivateData::SvTime *this)
{
  return CoreNavigation::CLP::LogEntry::PrivateData::SvTime::default_instance_;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::SvTime::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 28) = a2;
  return this;
}

void CoreNavigation::CLP::LogEntry::PrivateData::SvTime::New(CoreNavigation::CLP::LogEntry::PrivateData::SvTime *this)
{
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::SvTime::Clear(uint64_t this)
{
  if (*(unsigned char *)(this + 32))
  {
    *(void *)(this + 8) = 0;
    *(void *)(this + 16) = 0;
    *(unsigned char *)(this + 24) = 0;
  }
  *(_DWORD *)(this + 32) = 0;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::SvTime::MergePartialFromCodedStream(CoreNavigation::CLP::LogEntry::PrivateData::SvTime *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  do
  {
    while (1)
    {
      while (1)
      {
        uint64_t v4 = (char *)*((void *)a2 + 1);
        if ((unint64_t)v4 >= *((void *)a2 + 2) || *v4 < 0)
        {
          unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
          *((_DWORD *)a2 + 8) = TagFallback;
          if (!TagFallback) {
            return 1;
          }
        }
        else
        {
          unint64_t TagFallback = *v4;
          *((_DWORD *)a2 + 8) = TagFallback;
          *((void *)a2 + 1) = v4 + 1;
          if (!TagFallback) {
            return 1;
          }
        }
        unsigned int v6 = TagFallback >> 3;
        if (TagFallback >> 3 != 1) {
          break;
        }
        int v7 = TagFallback & 7;
        if (v7 != 1) {
          goto LABEL_25;
        }
        *(void *)int v15 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, (unint64_t *)v15) & 1) == 0)return 0; {
        *((void *)this + 1) = *(void *)v15;
        }
        *((_DWORD *)this + 8) |= 1u;
        uint64_t v10 = (unsigned char *)*((void *)a2 + 1);
        if ((unint64_t)v10 < *((void *)a2 + 2) && *v10 == 17)
        {
          *((void *)a2 + 1) = v10 + 1;
          goto LABEL_17;
        }
      }
      if (v6 != 2) {
        break;
      }
      int v7 = TagFallback & 7;
      if (v7 != 1) {
        goto LABEL_25;
      }
LABEL_17:
      *(void *)int v15 = 0;
      if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, (unint64_t *)v15) & 1) == 0)return 0; {
      *((void *)this + 2) = *(void *)v15;
      }
      *((_DWORD *)this + 8) |= 2u;
      uint64_t v11 = (unsigned char *)*((void *)a2 + 1);
      unint64_t v8 = *((void *)a2 + 2);
      if ((unint64_t)v11 < v8 && *v11 == 24)
      {
        uint64_t v9 = v11 + 1;
        *((void *)a2 + 1) = v9;
LABEL_21:
        v15[0] = 0;
        if ((unint64_t)v9 >= v8 || *v9 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v15);
          if (!result) {
            return result;
          }
          unsigned int v12 = v15[0];
          uint64_t v13 = (unsigned __int8 *)*((void *)a2 + 1);
          unint64_t v8 = *((void *)a2 + 2);
        }
        else
        {
          unsigned int v12 = *v9;
          uint64_t v13 = (unsigned __int8 *)(v9 + 1);
          *((void *)a2 + 1) = v13;
        }
        *((unsigned char *)this + 24) = v12 != 0;
        *((_DWORD *)this + 8) |= 4u;
        if (v13 == (unsigned __int8 *)v8 && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
        {
          *((_DWORD *)a2 + 8) = 0;
          uint64_t result = 1;
          *((unsigned char *)a2 + 36) = 1;
          return result;
        }
      }
    }
    if (v6 == 3)
    {
      int v7 = TagFallback & 7;
      if ((TagFallback & 7) == 0)
      {
        uint64_t v9 = (char *)*((void *)a2 + 1);
        unint64_t v8 = *((void *)a2 + 2);
        goto LABEL_21;
      }
    }
    else
    {
      int v7 = TagFallback & 7;
    }
LABEL_25:
    if (v7 == 4) {
      return 1;
    }
  }
  while ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) != 0);
  return 0;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::SvTime::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  int v6 = *(_DWORD *)(this + 32);
  if ((v6 & 1) == 0)
  {
    if ((v6 & 2) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, (uint64_t)a2, *(double *)(v5 + 16), a3);
    if ((*(_DWORD *)(v5 + 32) & 4) == 0) {
      return this;
    }
    goto LABEL_7;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, (uint64_t)a2, *(double *)(this + 8), a3);
  int v6 = *(_DWORD *)(v5 + 32);
  if ((v6 & 2) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v6 & 4) == 0) {
    return this;
  }
LABEL_7:
  uint64_t v7 = *(unsigned __int8 *)(v5 + 24);

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v7, (uint64_t)a2, a4);
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::SvTime::ByteSize(CoreNavigation::CLP::LogEntry::PrivateData::SvTime *this)
{
  uint64_t v1 = *((unsigned __int8 *)this + 32);
  if (*((unsigned char *)this + 32))
  {
    unsigned int v2 = ((int)(v1 << 31) >> 31) & 9;
    if ((v1 & 2) != 0) {
      v2 += 9;
    }
    if ((v1 & 4) != 0) {
      uint64_t v1 = v2 + 2;
    }
    else {
      uint64_t v1 = v2;
    }
  }
  *((_DWORD *)this + 7) = v1;
  return v1;
}

double CoreNavigation::CLP::LogEntry::PrivateData::SvTime::CheckTypeAndMergeFrom(CoreNavigation::CLP::LogEntry::PrivateData::SvTime *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  return CoreNavigation::CLP::LogEntry::PrivateData::SvTime::MergeFrom(this, lpsrc);
}

double CoreNavigation::CLP::LogEntry::PrivateData::SvTime::CopyFrom(CoreNavigation::CLP::LogEntry::PrivateData::SvTime *this, const CoreNavigation::CLP::LogEntry::PrivateData::SvTime *a2)
{
  if (a2 != this)
  {
    (*(void (**)(CoreNavigation::CLP::LogEntry::PrivateData::SvTime *))(*(void *)this + 32))(this);
    return CoreNavigation::CLP::LogEntry::PrivateData::SvTime::MergeFrom(this, a2);
  }
  return result;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::SvTime::IsInitialized(CoreNavigation::CLP::LogEntry::PrivateData::SvTime *this)
{
  return 1;
}

double CoreNavigation::CLP::LogEntry::PrivateData::SvTime::Swap(CoreNavigation::CLP::LogEntry::PrivateData::SvTime *this, CoreNavigation::CLP::LogEntry::PrivateData::SvTime *a2)
{
  if (a2 != this)
  {
    uint64_t v2 = *((void *)this + 1);
    *((void *)this + 1) = *((void *)a2 + 1);
    *((void *)a2 + 1) = v2;
    double result = *((double *)this + 2);
    *((void *)this + 2) = *((void *)a2 + 2);
    *((double *)a2 + 2) = result;
    char v4 = *((unsigned char *)this + 24);
    *((unsigned char *)this + 24) = *((unsigned char *)a2 + 24);
    *((unsigned char *)a2 + 24) = v4;
    int v5 = *((_DWORD *)this + 8);
    *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
    *((_DWORD *)a2 + 8) = v5;
    int v6 = *((_DWORD *)this + 7);
    *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
    *((_DWORD *)a2 + 7) = v6;
  }
  return result;
}

void *CoreNavigation::CLP::LogEntry::PrivateData::SvTime::GetTypeName@<X0>(void *a1@<X8>)
{
  return sub_18DEDE7B0(a1, "CoreNavigation.CLP.LogEntry.PrivateData.SvTime");
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::FrequencyOffset::SharedCtor(uint64_t this)
{
  *(_DWORD *)(this + 28) = 0;
  *(_DWORD *)(this + 32) = 0;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(unsigned char *)(this + 24) = 0;
  return this;
}

CoreNavigation::CLP::LogEntry::PrivateData::FrequencyOffset *CoreNavigation::CLP::LogEntry::PrivateData::FrequencyOffset::FrequencyOffset(CoreNavigation::CLP::LogEntry::PrivateData::FrequencyOffset *this, const CoreNavigation::CLP::LogEntry::PrivateData::FrequencyOffset *a2)
{
  *((_DWORD *)this + 7) = 0;
  *((_DWORD *)this + 8) = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = &unk_1EDD0C320;
  *((unsigned char *)this + 24) = 0;
  CoreNavigation::CLP::LogEntry::PrivateData::FrequencyOffset::MergeFrom(this, a2);
  return this;
}

void sub_18DFC4108(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

double CoreNavigation::CLP::LogEntry::PrivateData::FrequencyOffset::MergeFrom(CoreNavigation::CLP::LogEntry::PrivateData::FrequencyOffset *this, const CoreNavigation::CLP::LogEntry::PrivateData::FrequencyOffset *a2)
{
  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v7);
  }
  LOBYTE(v5) = *((unsigned char *)a2 + 32);
  if ((_BYTE)v5)
  {
    if (*((unsigned char *)a2 + 32))
    {
      double result = *((double *)a2 + 1);
      *((_DWORD *)this + 8) |= 1u;
      *((double *)this + 1) = result;
      int v5 = *((_DWORD *)a2 + 8);
      if ((v5 & 2) == 0)
      {
LABEL_6:
        if ((v5 & 4) == 0) {
          return result;
        }
        goto LABEL_7;
      }
    }
    else if ((*((unsigned char *)a2 + 32) & 2) == 0)
    {
      goto LABEL_6;
    }
    double result = *((double *)a2 + 2);
    *((_DWORD *)this + 8) |= 2u;
    *((double *)this + 2) = result;
    if ((*((_DWORD *)a2 + 8) & 4) == 0) {
      return result;
    }
LABEL_7:
    char v6 = *((unsigned char *)a2 + 24);
    *((_DWORD *)this + 8) |= 4u;
    *((unsigned char *)this + 24) = v6;
  }
  return result;
}

void sub_18DFC41F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CoreNavigation::CLP::LogEntry::PrivateData::FrequencyOffset::~FrequencyOffset(CoreNavigation::CLP::LogEntry::PrivateData::FrequencyOffset *this)
{
  *(void *)this = &unk_1EDD0C320;
  CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  uint64_t vars8;

  CoreNavigation::CLP::LogEntry::PrivateData::FrequencyOffset::~FrequencyOffset(this);

  JUMPOUT(0x192FA6240);
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::FrequencyOffset::default_instance(CoreNavigation::CLP::LogEntry::PrivateData::FrequencyOffset *this)
{
  return CoreNavigation::CLP::LogEntry::PrivateData::FrequencyOffset::default_instance_;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::FrequencyOffset::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 28) = a2;
  return this;
}

void CoreNavigation::CLP::LogEntry::PrivateData::FrequencyOffset::New(CoreNavigation::CLP::LogEntry::PrivateData::FrequencyOffset *this)
{
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::FrequencyOffset::Clear(uint64_t this)
{
  if (*(unsigned char *)(this + 32))
  {
    *(void *)(this + 8) = 0;
    *(void *)(this + 16) = 0;
    *(unsigned char *)(this + 24) = 0;
  }
  *(_DWORD *)(this + 32) = 0;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::FrequencyOffset::MergePartialFromCodedStream(CoreNavigation::CLP::LogEntry::PrivateData::FrequencyOffset *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  do
  {
    while (1)
    {
      while (1)
      {
        char v4 = (char *)*((void *)a2 + 1);
        if ((unint64_t)v4 >= *((void *)a2 + 2) || *v4 < 0)
        {
          unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
          *((_DWORD *)a2 + 8) = TagFallback;
          if (!TagFallback) {
            return 1;
          }
        }
        else
        {
          unint64_t TagFallback = *v4;
          *((_DWORD *)a2 + 8) = TagFallback;
          *((void *)a2 + 1) = v4 + 1;
          if (!TagFallback) {
            return 1;
          }
        }
        unsigned int v6 = TagFallback >> 3;
        if (TagFallback >> 3 != 1) {
          break;
        }
        int v7 = TagFallback & 7;
        if (v7 != 1) {
          goto LABEL_25;
        }
        *(void *)int v15 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, (unint64_t *)v15) & 1) == 0)return 0; {
        *((void *)this + 1) = *(void *)v15;
        }
        *((_DWORD *)this + 8) |= 1u;
        uint64_t v10 = (unsigned char *)*((void *)a2 + 1);
        if ((unint64_t)v10 < *((void *)a2 + 2) && *v10 == 17)
        {
          *((void *)a2 + 1) = v10 + 1;
          goto LABEL_17;
        }
      }
      if (v6 != 2) {
        break;
      }
      int v7 = TagFallback & 7;
      if (v7 != 1) {
        goto LABEL_25;
      }
LABEL_17:
      *(void *)int v15 = 0;
      if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, (unint64_t *)v15) & 1) == 0)return 0; {
      *((void *)this + 2) = *(void *)v15;
      }
      *((_DWORD *)this + 8) |= 2u;
      uint64_t v11 = (unsigned char *)*((void *)a2 + 1);
      unint64_t v8 = *((void *)a2 + 2);
      if ((unint64_t)v11 < v8 && *v11 == 24)
      {
        uint64_t v9 = v11 + 1;
        *((void *)a2 + 1) = v9;
LABEL_21:
        v15[0] = 0;
        if ((unint64_t)v9 >= v8 || *v9 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v15);
          if (!result) {
            return result;
          }
          unsigned int v12 = v15[0];
          uint64_t v13 = (unsigned __int8 *)*((void *)a2 + 1);
          unint64_t v8 = *((void *)a2 + 2);
        }
        else
        {
          unsigned int v12 = *v9;
          uint64_t v13 = (unsigned __int8 *)(v9 + 1);
          *((void *)a2 + 1) = v13;
        }
        *((unsigned char *)this + 24) = v12 != 0;
        *((_DWORD *)this + 8) |= 4u;
        if (v13 == (unsigned __int8 *)v8 && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
        {
          *((_DWORD *)a2 + 8) = 0;
          uint64_t result = 1;
          *((unsigned char *)a2 + 36) = 1;
          return result;
        }
      }
    }
    if (v6 == 3)
    {
      int v7 = TagFallback & 7;
      if ((TagFallback & 7) == 0)
      {
        uint64_t v9 = (char *)*((void *)a2 + 1);
        unint64_t v8 = *((void *)a2 + 2);
        goto LABEL_21;
      }
    }
    else
    {
      int v7 = TagFallback & 7;
    }
LABEL_25:
    if (v7 == 4) {
      return 1;
    }
  }
  while ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) != 0);
  return 0;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::FrequencyOffset::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  int v6 = *(_DWORD *)(this + 32);
  if ((v6 & 1) == 0)
  {
    if ((v6 & 2) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, (uint64_t)a2, *(double *)(v5 + 16), a3);
    if ((*(_DWORD *)(v5 + 32) & 4) == 0) {
      return this;
    }
    goto LABEL_7;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, (uint64_t)a2, *(double *)(this + 8), a3);
  int v6 = *(_DWORD *)(v5 + 32);
  if ((v6 & 2) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v6 & 4) == 0) {
    return this;
  }
LABEL_7:
  uint64_t v7 = *(unsigned __int8 *)(v5 + 24);

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v7, (uint64_t)a2, a4);
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::FrequencyOffset::ByteSize(CoreNavigation::CLP::LogEntry::PrivateData::FrequencyOffset *this)
{
  uint64_t v1 = *((unsigned __int8 *)this + 32);
  if (*((unsigned char *)this + 32))
  {
    unsigned int v2 = ((int)(v1 << 31) >> 31) & 9;
    if ((v1 & 2) != 0) {
      v2 += 9;
    }
    if ((v1 & 4) != 0) {
      uint64_t v1 = v2 + 2;
    }
    else {
      uint64_t v1 = v2;
    }
  }
  *((_DWORD *)this + 7) = v1;
  return v1;
}

double CoreNavigation::CLP::LogEntry::PrivateData::FrequencyOffset::CheckTypeAndMergeFrom(CoreNavigation::CLP::LogEntry::PrivateData::FrequencyOffset *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  return CoreNavigation::CLP::LogEntry::PrivateData::FrequencyOffset::MergeFrom(this, lpsrc);
}

double CoreNavigation::CLP::LogEntry::PrivateData::FrequencyOffset::CopyFrom(CoreNavigation::CLP::LogEntry::PrivateData::FrequencyOffset *this, const CoreNavigation::CLP::LogEntry::PrivateData::FrequencyOffset *a2)
{
  if (a2 != this)
  {
    (*(void (**)(CoreNavigation::CLP::LogEntry::PrivateData::FrequencyOffset *))(*(void *)this + 32))(this);
    return CoreNavigation::CLP::LogEntry::PrivateData::FrequencyOffset::MergeFrom(this, a2);
  }
  return result;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::FrequencyOffset::IsInitialized(CoreNavigation::CLP::LogEntry::PrivateData::FrequencyOffset *this)
{
  return 1;
}

double CoreNavigation::CLP::LogEntry::PrivateData::FrequencyOffset::Swap(CoreNavigation::CLP::LogEntry::PrivateData::FrequencyOffset *this, CoreNavigation::CLP::LogEntry::PrivateData::FrequencyOffset *a2)
{
  if (a2 != this)
  {
    uint64_t v2 = *((void *)this + 1);
    *((void *)this + 1) = *((void *)a2 + 1);
    *((void *)a2 + 1) = v2;
    double result = *((double *)this + 2);
    *((void *)this + 2) = *((void *)a2 + 2);
    *((double *)a2 + 2) = result;
    char v4 = *((unsigned char *)this + 24);
    *((unsigned char *)this + 24) = *((unsigned char *)a2 + 24);
    *((unsigned char *)a2 + 24) = v4;
    int v5 = *((_DWORD *)this + 8);
    *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
    *((_DWORD *)a2 + 8) = v5;
    int v6 = *((_DWORD *)this + 7);
    *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
    *((_DWORD *)a2 + 7) = v6;
  }
  return result;
}

void *CoreNavigation::CLP::LogEntry::PrivateData::FrequencyOffset::GetTypeName@<X0>(void *a1@<X8>)
{
  return sub_18DEDE7B0(a1, "CoreNavigation.CLP.LogEntry.PrivateData.FrequencyOffset");
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::FrequencyOffsetFromPhaseTracking::SharedCtor(uint64_t this)
{
  *(_DWORD *)(this + 28) = 0;
  *(_DWORD *)(this + 32) = 0;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(_WORD *)(this + 24) = 0;
  return this;
}

CoreNavigation::CLP::LogEntry::PrivateData::FrequencyOffsetFromPhaseTracking *CoreNavigation::CLP::LogEntry::PrivateData::FrequencyOffsetFromPhaseTracking::FrequencyOffsetFromPhaseTracking(CoreNavigation::CLP::LogEntry::PrivateData::FrequencyOffsetFromPhaseTracking *this, const CoreNavigation::CLP::LogEntry::PrivateData::FrequencyOffsetFromPhaseTracking *a2)
{
  *((_DWORD *)this + 7) = 0;
  *((_DWORD *)this + 8) = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = &unk_1EDD0E648;
  *((_WORD *)this + 12) = 0;
  CoreNavigation::CLP::LogEntry::PrivateData::FrequencyOffsetFromPhaseTracking::MergeFrom(this, a2);
  return this;
}

void sub_18DFC47FC(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void CoreNavigation::CLP::LogEntry::PrivateData::FrequencyOffsetFromPhaseTracking::MergeFrom(CoreNavigation::CLP::LogEntry::PrivateData::FrequencyOffsetFromPhaseTracking *this, const CoreNavigation::CLP::LogEntry::PrivateData::FrequencyOffsetFromPhaseTracking *a2)
{
  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }
  LOBYTE(v4) = *((unsigned char *)a2 + 32);
  if ((_BYTE)v4)
  {
    if (*((unsigned char *)a2 + 32))
    {
      uint64_t v6 = *((void *)a2 + 1);
      *((_DWORD *)this + 8) |= 1u;
      *((void *)this + 1) = v6;
      int v4 = *((_DWORD *)a2 + 8);
      if ((v4 & 2) == 0)
      {
LABEL_6:
        if ((v4 & 4) == 0) {
          goto LABEL_7;
        }
        goto LABEL_12;
      }
    }
    else if ((*((unsigned char *)a2 + 32) & 2) == 0)
    {
      goto LABEL_6;
    }
    uint64_t v7 = *((void *)a2 + 2);
    *((_DWORD *)this + 8) |= 2u;
    *((void *)this + 2) = v7;
    int v4 = *((_DWORD *)a2 + 8);
    if ((v4 & 4) == 0)
    {
LABEL_7:
      if ((v4 & 8) == 0) {
        return;
      }
      goto LABEL_8;
    }
LABEL_12:
    char v8 = *((unsigned char *)a2 + 24);
    *((_DWORD *)this + 8) |= 4u;
    *((unsigned char *)this + 24) = v8;
    if ((*((_DWORD *)a2 + 8) & 8) == 0) {
      return;
    }
LABEL_8:
    char v5 = *((unsigned char *)a2 + 25);
    *((_DWORD *)this + 8) |= 8u;
    *((unsigned char *)this + 25) = v5;
  }
}

void sub_18DFC4904(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CoreNavigation::CLP::LogEntry::PrivateData::FrequencyOffsetFromPhaseTracking::~FrequencyOffsetFromPhaseTracking(CoreNavigation::CLP::LogEntry::PrivateData::FrequencyOffsetFromPhaseTracking *this)
{
  *(void *)this = &unk_1EDD0E648;
  CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  uint64_t vars8;

  CoreNavigation::CLP::LogEntry::PrivateData::FrequencyOffsetFromPhaseTracking::~FrequencyOffsetFromPhaseTracking(this);

  JUMPOUT(0x192FA6240);
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::FrequencyOffsetFromPhaseTracking::default_instance(CoreNavigation::CLP::LogEntry::PrivateData::FrequencyOffsetFromPhaseTracking *this)
{
  return CoreNavigation::CLP::LogEntry::PrivateData::FrequencyOffsetFromPhaseTracking::default_instance_;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::FrequencyOffsetFromPhaseTracking::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 28) = a2;
  return this;
}

void CoreNavigation::CLP::LogEntry::PrivateData::FrequencyOffsetFromPhaseTracking::New(CoreNavigation::CLP::LogEntry::PrivateData::FrequencyOffsetFromPhaseTracking *this)
{
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::FrequencyOffsetFromPhaseTracking::Clear(uint64_t this)
{
  if (*(unsigned char *)(this + 32))
  {
    *(void *)(this + 8) = 0;
    *(void *)(this + 16) = 0;
    *(_WORD *)(this + 24) = 0;
  }
  *(_DWORD *)(this + 32) = 0;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::FrequencyOffsetFromPhaseTracking::MergePartialFromCodedStream(CoreNavigation::CLP::LogEntry::PrivateData::FrequencyOffsetFromPhaseTracking *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  while (2)
  {
    int v4 = (char *)*((void *)a2 + 1);
    if ((unint64_t)v4 >= *((void *)a2 + 2) || *v4 < 0)
    {
      unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      if (!TagFallback) {
        return 1;
      }
    }
    else
    {
      unint64_t TagFallback = *v4;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((void *)a2 + 1) = v4 + 1;
      if (!TagFallback) {
        return 1;
      }
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        int v6 = TagFallback & 7;
        if (v6 != 1) {
          goto LABEL_24;
        }
        *(void *)int v17 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, (unint64_t *)v17) & 1) == 0)return 0; {
        *((void *)this + 1) = *(void *)v17;
        }
        *((_DWORD *)this + 8) |= 1u;
        uint64_t v7 = (unsigned char *)*((void *)a2 + 1);
        if ((unint64_t)v7 >= *((void *)a2 + 2) || *v7 != 17) {
          continue;
        }
        *((void *)a2 + 1) = v7 + 1;
        goto LABEL_14;
      case 2u:
        int v6 = TagFallback & 7;
        if (v6 != 1) {
          goto LABEL_24;
        }
LABEL_14:
        *(void *)int v17 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, (unint64_t *)v17) & 1) == 0)return 0; {
        *((void *)this + 2) = *(void *)v17;
        }
        *((_DWORD *)this + 8) |= 2u;
        uint64_t v9 = (unsigned char *)*((void *)a2 + 1);
        unint64_t v8 = *((void *)a2 + 2);
        if ((unint64_t)v9 >= v8 || *v9 != 24) {
          continue;
        }
        uint64_t v10 = v9 + 1;
        *((void *)a2 + 1) = v10;
LABEL_20:
        v17[0] = 0;
        if ((unint64_t)v10 >= v8 || *v10 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v17);
          if (!result) {
            return result;
          }
          unsigned int v11 = v17[0];
          unsigned int v12 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v8 = *((void *)a2 + 2);
        }
        else
        {
          unsigned int v11 = *v10;
          unsigned int v12 = v10 + 1;
          *((void *)a2 + 1) = v12;
        }
        *((unsigned char *)this + 24) = v11 != 0;
        *((_DWORD *)this + 8) |= 4u;
        if ((unint64_t)v12 >= v8 || *v12 != 32) {
          continue;
        }
        uint64_t v13 = v12 + 1;
        *((void *)a2 + 1) = v13;
LABEL_33:
        v17[0] = 0;
        if ((unint64_t)v13 >= v8 || *v13 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v17);
          if (!result) {
            return result;
          }
          unsigned int v15 = v17[0];
          int v16 = (unsigned __int8 *)*((void *)a2 + 1);
          unint64_t v8 = *((void *)a2 + 2);
        }
        else
        {
          unsigned int v15 = *v13;
          int v16 = (unsigned __int8 *)(v13 + 1);
          *((void *)a2 + 1) = v16;
        }
        *((unsigned char *)this + 25) = v15 != 0;
        *((_DWORD *)this + 8) |= 8u;
        if (v16 != (unsigned __int8 *)v8 || !*((_DWORD *)a2 + 11) && *((_DWORD *)a2 + 6) != *((_DWORD *)a2 + 10)) {
          continue;
        }
        *((_DWORD *)a2 + 8) = 0;
        uint64_t result = 1;
        *((unsigned char *)a2 + 36) = 1;
        break;
      case 3u:
        int v6 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_24;
        }
        uint64_t v10 = (char *)*((void *)a2 + 1);
        unint64_t v8 = *((void *)a2 + 2);
        goto LABEL_20;
      case 4u:
        int v6 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_24;
        }
        uint64_t v13 = (char *)*((void *)a2 + 1);
        unint64_t v8 = *((void *)a2 + 2);
        goto LABEL_33;
      default:
        int v6 = TagFallback & 7;
LABEL_24:
        if (v6 == 4) {
          return 1;
        }
        if (wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback))continue; {
        return 0;
        }
    }
    return result;
  }
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::FrequencyOffsetFromPhaseTracking::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  int v6 = *(_DWORD *)(this + 32);
  if (v6)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, (uint64_t)a2, *(double *)(this + 8), a3);
    int v6 = *(_DWORD *)(v5 + 32);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(unsigned __int8 *)(v5 + 24), (uint64_t)a2, a4);
      if ((*(_DWORD *)(v5 + 32) & 8) == 0) {
        return this;
      }
      goto LABEL_9;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, (uint64_t)a2, *(double *)(v5 + 16), a3);
  int v6 = *(_DWORD *)(v5 + 32);
  if ((v6 & 4) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v6 & 8) == 0) {
    return this;
  }
LABEL_9:
  uint64_t v7 = *(unsigned __int8 *)(v5 + 25);

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v7, (uint64_t)a2, a4);
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::FrequencyOffsetFromPhaseTracking::ByteSize(CoreNavigation::CLP::LogEntry::PrivateData::FrequencyOffsetFromPhaseTracking *this)
{
  uint64_t v1 = *((unsigned __int8 *)this + 32);
  if (*((unsigned char *)this + 32))
  {
    unsigned int v2 = ((int)(v1 << 31) >> 31) & 9;
    if ((v1 & 2) != 0) {
      v2 += 9;
    }
    if ((v1 & 4) != 0) {
      v2 += 2;
    }
    if ((v1 & 8) != 0) {
      uint64_t v1 = v2 + 2;
    }
    else {
      uint64_t v1 = v2;
    }
  }
  *((_DWORD *)this + 7) = v1;
  return v1;
}

void CoreNavigation::CLP::LogEntry::PrivateData::FrequencyOffsetFromPhaseTracking::CheckTypeAndMergeFrom(CoreNavigation::CLP::LogEntry::PrivateData::FrequencyOffsetFromPhaseTracking *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  CoreNavigation::CLP::LogEntry::PrivateData::FrequencyOffsetFromPhaseTracking::MergeFrom(this, lpsrc);
}

void CoreNavigation::CLP::LogEntry::PrivateData::FrequencyOffsetFromPhaseTracking::CopyFrom(CoreNavigation::CLP::LogEntry::PrivateData::FrequencyOffsetFromPhaseTracking *this, const CoreNavigation::CLP::LogEntry::PrivateData::FrequencyOffsetFromPhaseTracking *a2)
{
  if (a2 != this)
  {
    (*(void (**)(CoreNavigation::CLP::LogEntry::PrivateData::FrequencyOffsetFromPhaseTracking *))(*(void *)this + 32))(this);
    CoreNavigation::CLP::LogEntry::PrivateData::FrequencyOffsetFromPhaseTracking::MergeFrom(this, a2);
  }
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::FrequencyOffsetFromPhaseTracking::IsInitialized(CoreNavigation::CLP::LogEntry::PrivateData::FrequencyOffsetFromPhaseTracking *this)
{
  return 1;
}

double CoreNavigation::CLP::LogEntry::PrivateData::FrequencyOffsetFromPhaseTracking::Swap(CoreNavigation::CLP::LogEntry::PrivateData::FrequencyOffsetFromPhaseTracking *this, CoreNavigation::CLP::LogEntry::PrivateData::FrequencyOffsetFromPhaseTracking *a2)
{
  if (a2 != this)
  {
    uint64_t v2 = *((void *)this + 1);
    *((void *)this + 1) = *((void *)a2 + 1);
    *((void *)a2 + 1) = v2;
    double result = *((double *)this + 2);
    *((void *)this + 2) = *((void *)a2 + 2);
    *((double *)a2 + 2) = result;
    char v4 = *((unsigned char *)this + 24);
    *((unsigned char *)this + 24) = *((unsigned char *)a2 + 24);
    *((unsigned char *)a2 + 24) = v4;
    char v5 = *((unsigned char *)this + 25);
    *((unsigned char *)this + 25) = *((unsigned char *)a2 + 25);
    *((unsigned char *)a2 + 25) = v5;
    int v6 = *((_DWORD *)this + 8);
    *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
    *((_DWORD *)a2 + 8) = v6;
    int v7 = *((_DWORD *)this + 7);
    *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
    *((_DWORD *)a2 + 7) = v7;
  }
  return result;
}

void *CoreNavigation::CLP::LogEntry::PrivateData::FrequencyOffsetFromPhaseTracking::GetTypeName@<X0>(void *a1@<X8>)
{
  return sub_18DEDE7B0(a1, "CoreNavigation.CLP.LogEntry.PrivateData.FrequencyOffsetFromPhaseTracking");
}

double CoreNavigation::CLP::LogEntry::PrivateData::PhaseTracking::SharedCtor(CoreNavigation::CLP::LogEntry::PrivateData::PhaseTracking *this)
{
  *((_DWORD *)this + 11) = 0;
  *((_DWORD *)this + 12) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((unsigned char *)this + 40) = 0;
  return result;
}

CoreNavigation::CLP::LogEntry::PrivateData::PhaseTracking *CoreNavigation::CLP::LogEntry::PrivateData::PhaseTracking::PhaseTracking(CoreNavigation::CLP::LogEntry::PrivateData::PhaseTracking *this, const CoreNavigation::CLP::LogEntry::PrivateData::PhaseTracking *a2)
{
  *(void *)this = &unk_1EDD0BBA0;
  *((_DWORD *)this + 11) = 0;
  *((_DWORD *)this + 12) = 0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((unsigned char *)this + 40) = 0;
  CoreNavigation::CLP::LogEntry::PrivateData::PhaseTracking::MergeFrom(this, a2);
  return this;
}

void sub_18DFC5008(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

double CoreNavigation::CLP::LogEntry::PrivateData::PhaseTracking::MergeFrom(CoreNavigation::CLP::LogEntry::PrivateData::PhaseTracking *this, const CoreNavigation::CLP::LogEntry::PrivateData::PhaseTracking *a2)
{
  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }
  LOBYTE(v5) = *((unsigned char *)a2 + 48);
  if ((_BYTE)v5)
  {
    if (*((unsigned char *)a2 + 48))
    {
      uint64_t v7 = *((void *)a2 + 1);
      *((_DWORD *)this + 12) |= 1u;
      *((void *)this + 1) = v7;
      int v5 = *((_DWORD *)a2 + 12);
      if ((v5 & 2) == 0)
      {
LABEL_6:
        if ((v5 & 4) == 0) {
          goto LABEL_7;
        }
        goto LABEL_13;
      }
    }
    else if ((*((unsigned char *)a2 + 48) & 2) == 0)
    {
      goto LABEL_6;
    }
    uint64_t v8 = *((void *)a2 + 2);
    *((_DWORD *)this + 12) |= 2u;
    *((void *)this + 2) = v8;
    int v5 = *((_DWORD *)a2 + 12);
    if ((v5 & 4) == 0)
    {
LABEL_7:
      if ((v5 & 8) == 0) {
        goto LABEL_8;
      }
      goto LABEL_14;
    }
LABEL_13:
    double result = *((double *)a2 + 3);
    *((_DWORD *)this + 12) |= 4u;
    *((double *)this + 3) = result;
    int v5 = *((_DWORD *)a2 + 12);
    if ((v5 & 8) == 0)
    {
LABEL_8:
      if ((v5 & 0x10) == 0) {
        return result;
      }
      goto LABEL_9;
    }
LABEL_14:
    double result = *((double *)a2 + 4);
    *((_DWORD *)this + 12) |= 8u;
    *((double *)this + 4) = result;
    if ((*((_DWORD *)a2 + 12) & 0x10) == 0) {
      return result;
    }
LABEL_9:
    char v6 = *((unsigned char *)a2 + 40);
    *((_DWORD *)this + 12) |= 0x10u;
    *((unsigned char *)this + 40) = v6;
  }
  return result;
}

void sub_18DFC5130(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CoreNavigation::CLP::LogEntry::PrivateData::PhaseTracking::~PhaseTracking(CoreNavigation::CLP::LogEntry::PrivateData::PhaseTracking *this)
{
  *(void *)this = &unk_1EDD0BBA0;
  CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  uint64_t vars8;

  CoreNavigation::CLP::LogEntry::PrivateData::PhaseTracking::~PhaseTracking(this);

  JUMPOUT(0x192FA6240);
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::PhaseTracking::default_instance(CoreNavigation::CLP::LogEntry::PrivateData::PhaseTracking *this)
{
  return CoreNavigation::CLP::LogEntry::PrivateData::PhaseTracking::default_instance_;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::PhaseTracking::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 44) = a2;
  return this;
}

void CoreNavigation::CLP::LogEntry::PrivateData::PhaseTracking::New(CoreNavigation::CLP::LogEntry::PrivateData::PhaseTracking *this)
{
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::PhaseTracking::Clear(uint64_t this)
{
  if (*(unsigned char *)(this + 48))
  {
    *(unsigned char *)(this + 40) = 0;
    *(_OWORD *)(this + 24) = 0u;
    *(_OWORD *)(this + 8) = 0u;
  }
  *(_DWORD *)(this + 48) = 0;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::PhaseTracking::MergePartialFromCodedStream(CoreNavigation::CLP::LogEntry::PrivateData::PhaseTracking *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  char v4 = (unint64_t *)((char *)this + 8);
  int v5 = (unint64_t *)((char *)this + 16);
  while (2)
  {
    char v6 = (char *)*((void *)a2 + 1);
    if ((unint64_t)v6 >= *((void *)a2 + 2) || *v6 < 0)
    {
      unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      if (!TagFallback) {
        return 1;
      }
    }
    else
    {
      unint64_t TagFallback = *v6;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((void *)a2 + 1) = v6 + 1;
      if (!TagFallback) {
        return 1;
      }
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        int v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_20;
        }
        uint64_t v10 = (char *)*((void *)a2 + 1);
        unint64_t v9 = *((void *)a2 + 2);
        if ((unint64_t)v10 >= v9 || *v10 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v4);
          if (!result) {
            return result;
          }
          unsigned int v11 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v9 = *((void *)a2 + 2);
        }
        else
        {
          unint64_t *v4 = *v10;
          unsigned int v11 = v10 + 1;
          *((void *)a2 + 1) = v11;
        }
        *((_DWORD *)this + 12) |= 1u;
        if ((unint64_t)v11 < v9 && *v11 == 16)
        {
          unsigned int v12 = v11 + 1;
          *((void *)a2 + 1) = v12;
          goto LABEL_29;
        }
        continue;
      case 2u:
        int v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_20;
        }
        unsigned int v12 = (char *)*((void *)a2 + 1);
        unint64_t v9 = *((void *)a2 + 2);
LABEL_29:
        if ((unint64_t)v12 >= v9 || *v12 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v5);
          if (!result) {
            return result;
          }
          int v16 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v9 = *((void *)a2 + 2);
        }
        else
        {
          unint64_t *v5 = *v12;
          int v16 = v12 + 1;
          *((void *)a2 + 1) = v16;
        }
        *((_DWORD *)this + 12) |= 2u;
        if ((unint64_t)v16 >= v9 || *v16 != 25) {
          continue;
        }
        *((void *)a2 + 1) = v16 + 1;
LABEL_37:
        *(void *)int v21 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, (unint64_t *)v21) & 1) == 0)return 0; {
        *((void *)this + 3) = *(void *)v21;
        }
        *((_DWORD *)this + 12) |= 4u;
        int v17 = (unsigned char *)*((void *)a2 + 1);
        if ((unint64_t)v17 >= *((void *)a2 + 2) || *v17 != 33) {
          continue;
        }
        *((void *)a2 + 1) = v17 + 1;
LABEL_41:
        *(void *)int v21 = 0;
        if (wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, (unint64_t *)v21))
        {
          *((void *)this + 4) = *(void *)v21;
          *((_DWORD *)this + 12) |= 8u;
          unsigned int v18 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v13 = *((void *)a2 + 2);
          if ((unint64_t)v18 < v13 && *v18 == 40)
          {
            int v14 = v18 + 1;
            *((void *)a2 + 1) = v14;
LABEL_45:
            v21[0] = 0;
            if ((unint64_t)v14 >= v13 || *v14 < 0)
            {
              uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v21);
              if (!result) {
                return result;
              }
              unsigned int v19 = v21[0];
              unsigned int v20 = (unsigned __int8 *)*((void *)a2 + 1);
              unint64_t v13 = *((void *)a2 + 2);
            }
            else
            {
              unsigned int v19 = *v14;
              unsigned int v20 = (unsigned __int8 *)(v14 + 1);
              *((void *)a2 + 1) = v20;
            }
            *((unsigned char *)this + 40) = v19 != 0;
            *((_DWORD *)this + 12) |= 0x10u;
            if (v20 == (unsigned __int8 *)v13 && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
            {
              *((_DWORD *)a2 + 8) = 0;
              uint64_t result = 1;
              *((unsigned char *)a2 + 36) = 1;
              return result;
            }
          }
          continue;
        }
        return 0;
      case 3u:
        int v8 = TagFallback & 7;
        if (v8 == 1) {
          goto LABEL_37;
        }
        goto LABEL_20;
      case 4u:
        int v8 = TagFallback & 7;
        if (v8 == 1) {
          goto LABEL_41;
        }
        goto LABEL_20;
      case 5u:
        int v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_20;
        }
        int v14 = (char *)*((void *)a2 + 1);
        unint64_t v13 = *((void *)a2 + 2);
        goto LABEL_45;
      default:
        int v8 = TagFallback & 7;
LABEL_20:
        if (v8 == 4) {
          return 1;
        }
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0; {
        continue;
        }
    }
  }
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::PhaseTracking::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  int v6 = *(_DWORD *)(this + 48);
  if (v6)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(void *)(this + 8), (uint64_t)a2, a4);
    int v6 = *(_DWORD *)(v5 + 48);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(void *)(v5 + 16), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 48);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
LABEL_10:
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, (uint64_t)a2, *(double *)(v5 + 32), a3);
    if ((*(_DWORD *)(v5 + 48) & 0x10) == 0) {
      return this;
    }
    goto LABEL_11;
  }
LABEL_9:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, (uint64_t)a2, *(double *)(v5 + 24), a3);
  int v6 = *(_DWORD *)(v5 + 48);
  if ((v6 & 8) != 0) {
    goto LABEL_10;
  }
LABEL_5:
  if ((v6 & 0x10) == 0) {
    return this;
  }
LABEL_11:
  uint64_t v7 = *(unsigned __int8 *)(v5 + 40);

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, v7, (uint64_t)a2, a4);
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::PhaseTracking::ByteSize(CoreNavigation::CLP::LogEntry::PrivateData::PhaseTracking *this)
{
  LOBYTE(v2) = *((unsigned char *)this + 48);
  if (!(_BYTE)v2)
  {
    uint64_t result = 0;
    goto LABEL_15;
  }
  if ((*((unsigned char *)this + 48) & 1) == 0)
  {
    unsigned int v3 = 0;
    if ((*((unsigned char *)this + 48) & 2) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  unsigned int v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this
                                                                                   + 1))
     + 1;
  int v2 = *((_DWORD *)this + 12);
  if ((v2 & 2) != 0)
  {
LABEL_7:
    v3 += wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this
                                                                                      + 2))
        + 1;
    int v2 = *((_DWORD *)this + 12);
  }
LABEL_8:
  unsigned int v5 = v3 + 9;
  if ((v2 & 4) == 0) {
    unsigned int v5 = v3;
  }
  if ((v2 & 8) != 0) {
    v5 += 9;
  }
  if ((v2 & 0x10) != 0) {
    uint64_t result = v5 + 2;
  }
  else {
    uint64_t result = v5;
  }
LABEL_15:
  *((_DWORD *)this + 11) = result;
  return result;
}

double CoreNavigation::CLP::LogEntry::PrivateData::PhaseTracking::CheckTypeAndMergeFrom(CoreNavigation::CLP::LogEntry::PrivateData::PhaseTracking *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  return CoreNavigation::CLP::LogEntry::PrivateData::PhaseTracking::MergeFrom(this, lpsrc);
}

double CoreNavigation::CLP::LogEntry::PrivateData::PhaseTracking::CopyFrom(CoreNavigation::CLP::LogEntry::PrivateData::PhaseTracking *this, const CoreNavigation::CLP::LogEntry::PrivateData::PhaseTracking *a2)
{
  if (a2 != this)
  {
    (*(void (**)(CoreNavigation::CLP::LogEntry::PrivateData::PhaseTracking *))(*(void *)this + 32))(this);
    return CoreNavigation::CLP::LogEntry::PrivateData::PhaseTracking::MergeFrom(this, a2);
  }
  return result;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::PhaseTracking::IsInitialized(CoreNavigation::CLP::LogEntry::PrivateData::PhaseTracking *this)
{
  return 1;
}

double CoreNavigation::CLP::LogEntry::PrivateData::PhaseTracking::Swap(CoreNavigation::CLP::LogEntry::PrivateData::PhaseTracking *this, CoreNavigation::CLP::LogEntry::PrivateData::PhaseTracking *a2)
{
  if (a2 != this)
  {
    uint64_t v2 = *((void *)this + 1);
    *((void *)this + 1) = *((void *)a2 + 1);
    *((void *)a2 + 1) = v2;
    uint64_t v3 = *((void *)this + 2);
    *((void *)this + 2) = *((void *)a2 + 2);
    *((void *)a2 + 2) = v3;
    uint64_t v4 = *((void *)this + 3);
    *((void *)this + 3) = *((void *)a2 + 3);
    *((void *)a2 + 3) = v4;
    double result = *((double *)this + 4);
    *((void *)this + 4) = *((void *)a2 + 4);
    *((double *)a2 + 4) = result;
    LOBYTE(v3) = *((unsigned char *)this + 40);
    *((unsigned char *)this + 40) = *((unsigned char *)a2 + 40);
    *((unsigned char *)a2 + 40) = v3;
    LODWORD(v3) = *((_DWORD *)this + 12);
    *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
    *((_DWORD *)a2 + 12) = v3;
    LODWORD(v3) = *((_DWORD *)this + 11);
    *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
    *((_DWORD *)a2 + 11) = v3;
  }
  return result;
}

void *CoreNavigation::CLP::LogEntry::PrivateData::PhaseTracking::GetTypeName@<X0>(void *a1@<X8>)
{
  return sub_18DEDE7B0(a1, "CoreNavigation.CLP.LogEntry.PrivateData.PhaseTracking");
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::SignalCorrelationPeak::SharedCtor(uint64_t this)
{
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(_DWORD *)(this + 32) = 0;
  *(void *)(this + 24) = 0;
  return this;
}

CoreNavigation::CLP::LogEntry::PrivateData::SignalCorrelationPeak *CoreNavigation::CLP::LogEntry::PrivateData::SignalCorrelationPeak::SignalCorrelationPeak(CoreNavigation::CLP::LogEntry::PrivateData::SignalCorrelationPeak *this, const CoreNavigation::CLP::LogEntry::PrivateData::SignalCorrelationPeak *a2)
{
  *(void *)this = &unk_1EDD0DB80;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  CoreNavigation::CLP::LogEntry::PrivateData::SignalCorrelationPeak::MergeFrom(this, a2);
  return this;
}

void sub_18DFC5910(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

double CoreNavigation::CLP::LogEntry::PrivateData::SignalCorrelationPeak::MergeFrom(CoreNavigation::CLP::LogEntry::PrivateData::SignalCorrelationPeak *this, const CoreNavigation::CLP::LogEntry::PrivateData::SignalCorrelationPeak *a2)
{
  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v10);
  }
  LOBYTE(v5) = *((unsigned char *)a2 + 32);
  if ((_BYTE)v5)
  {
    if (*((unsigned char *)a2 + 32))
    {
      *((_DWORD *)this + 8) |= 1u;
      int v6 = (CoreNavigation::CLP::LogEntry::PrivateData::SvTime *)*((void *)this + 1);
      if (!v6) {
        operator new();
      }
      uint64_t v7 = (const CoreNavigation::CLP::LogEntry::PrivateData::SvTime *)*((void *)a2 + 1);
      if (!v7)
      {
        CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);
        uint64_t v7 = *(const CoreNavigation::CLP::LogEntry::PrivateData::SvTime **)(CoreNavigation::CLP::LogEntry::PrivateData::SignalCorrelationPeak::default_instance_
                                                                          + 8);
      }
      double result = CoreNavigation::CLP::LogEntry::PrivateData::SvTime::MergeFrom(v6, v7);
      int v5 = *((_DWORD *)a2 + 8);
      if ((v5 & 2) == 0)
      {
LABEL_6:
        if ((v5 & 4) == 0) {
          return result;
        }
        goto LABEL_7;
      }
    }
    else if ((*((unsigned char *)a2 + 32) & 2) == 0)
    {
      goto LABEL_6;
    }
    *((_DWORD *)this + 8) |= 2u;
    int v8 = (CoreNavigation::CLP::LogEntry::PrivateData::FrequencyOffset *)*((void *)this + 2);
    if (!v8) {
      operator new();
    }
    unint64_t v9 = (const CoreNavigation::CLP::LogEntry::PrivateData::FrequencyOffset *)*((void *)a2 + 2);
    if (!v9)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);
      unint64_t v9 = *(const CoreNavigation::CLP::LogEntry::PrivateData::FrequencyOffset **)(CoreNavigation::CLP::LogEntry::PrivateData::SignalCorrelationPeak::default_instance_
                                                                                 + 16);
    }
    double result = CoreNavigation::CLP::LogEntry::PrivateData::FrequencyOffset::MergeFrom(v8, v9);
    if ((*((_DWORD *)a2 + 8) & 4) != 0)
    {
LABEL_7:
      LODWORD(result) = *((_DWORD *)a2 + 6);
      *((_DWORD *)this + 8) |= 4u;
      *((_DWORD *)this + 6) = LODWORD(result);
    }
  }
  return result;
}

void sub_18DFC5AD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CoreNavigation::CLP::LogEntry::PrivateData::SignalCorrelationPeak::~SignalCorrelationPeak(CoreNavigation::CLP::LogEntry::PrivateData::SignalCorrelationPeak *this)
{
  *(void *)this = &unk_1EDD0DB80;
  CoreNavigation::CLP::LogEntry::PrivateData::SignalCorrelationPeak::SharedDtor(this);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  uint64_t vars8;

  CoreNavigation::CLP::LogEntry::PrivateData::SignalCorrelationPeak::~SignalCorrelationPeak(this);

  JUMPOUT(0x192FA6240);
}

void CoreNavigation::CLP::LogEntry::PrivateData::SignalCorrelationPeak::SharedDtor(CoreNavigation::CLP::LogEntry::PrivateData::SignalCorrelationPeak *this)
{
  CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);
  if ((CoreNavigation::CLP::LogEntry::PrivateData::SignalCorrelationPeak *)CoreNavigation::CLP::LogEntry::PrivateData::SignalCorrelationPeak::default_instance_ != this)
  {
    uint64_t v2 = *((void *)this + 1);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
    uint64_t v3 = *((void *)this + 2);
    if (v3)
    {
      uint64_t v4 = *(void (**)(void))(*(void *)v3 + 8);
      v4();
    }
  }
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::SignalCorrelationPeak::default_instance(CoreNavigation::CLP::LogEntry::PrivateData::SignalCorrelationPeak *this)
{
  return CoreNavigation::CLP::LogEntry::PrivateData::SignalCorrelationPeak::default_instance_;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::SignalCorrelationPeak::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 28) = a2;
  return this;
}

void CoreNavigation::CLP::LogEntry::PrivateData::SignalCorrelationPeak::New(CoreNavigation::CLP::LogEntry::PrivateData::SignalCorrelationPeak *this)
{
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::SignalCorrelationPeak::Clear(uint64_t this)
{
  LOBYTE(v1) = *(unsigned char *)(this + 32);
  if ((_BYTE)v1)
  {
    if (*(unsigned char *)(this + 32))
    {
      uint64_t v2 = *(void *)(this + 8);
      if (v2)
      {
        if (*(unsigned char *)(v2 + 32))
        {
          *(void *)(v2 + 8) = 0;
          *(void *)(v2 + 16) = 0;
          *(unsigned char *)(v2 + 24) = 0;
        }
        *(_DWORD *)(v2 + 32) = 0;
        int v1 = *(_DWORD *)(this + 32);
      }
    }
    if ((v1 & 2) != 0)
    {
      uint64_t v3 = *(void *)(this + 16);
      if (v3)
      {
        if (*(unsigned char *)(v3 + 32))
        {
          *(void *)(v3 + 8) = 0;
          *(void *)(v3 + 16) = 0;
          *(unsigned char *)(v3 + 24) = 0;
        }
        *(_DWORD *)(v3 + 32) = 0;
      }
    }
    *(_DWORD *)(this + 24) = 0;
  }
  *(_DWORD *)(this + 32) = 0;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::SignalCorrelationPeak::MergePartialFromCodedStream(CoreNavigation::CLP::LogEntry::PrivateData::SignalCorrelationPeak *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  while (1)
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v4 = (char *)*((void *)a2 + 1);
          if ((unint64_t)v4 >= *((void *)a2 + 2) || *v4 < 0)
          {
            unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
            *((_DWORD *)a2 + 8) = TagFallback;
            if (!TagFallback) {
              return 1;
            }
          }
          else
          {
            unint64_t TagFallback = *v4;
            *((_DWORD *)a2 + 8) = TagFallback;
            *((void *)a2 + 1) = v4 + 1;
            if (!TagFallback) {
              return 1;
            }
          }
          unsigned int v6 = TagFallback >> 3;
          if (TagFallback >> 3 != 1) {
            break;
          }
          int v7 = TagFallback & 7;
          if (v7 != 2) {
            goto LABEL_20;
          }
          *((_DWORD *)this + 8) |= 1u;
          int v8 = (CoreNavigation::CLP::LogEntry::PrivateData::SvTime *)*((void *)this + 1);
          if (!v8) {
            operator new();
          }
          unsigned int v25 = 0;
          unint64_t v9 = (char *)*((void *)a2 + 1);
          if ((unint64_t)v9 >= *((void *)a2 + 2) || *v9 < 0)
          {
            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v25))return 0; {
          }
            }
          else
          {
            unsigned int v25 = *v9;
            *((void *)a2 + 1) = v9 + 1;
          }
          int v10 = *((_DWORD *)a2 + 14);
          int v11 = *((_DWORD *)a2 + 15);
          *((_DWORD *)a2 + 14) = v10 + 1;
          if (v10 >= v11) {
            return 0;
          }
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
          if (!CoreNavigation::CLP::LogEntry::PrivateData::SvTime::MergePartialFromCodedStream(v8, a2)
            || !*((unsigned char *)a2 + 36))
          {
            return 0;
          }
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
          int v12 = *((_DWORD *)a2 + 14);
          BOOL v13 = __OFSUB__(v12, 1);
          int v14 = v12 - 1;
          if (v14 < 0 == v13) {
            *((_DWORD *)a2 + 14) = v14;
          }
          unsigned int v15 = (unsigned char *)*((void *)a2 + 1);
          if ((unint64_t)v15 < *((void *)a2 + 2) && *v15 == 18)
          {
            *((void *)a2 + 1) = v15 + 1;
            goto LABEL_32;
          }
        }
        if (v6 != 2) {
          break;
        }
        int v7 = TagFallback & 7;
        if (v7 != 2) {
          goto LABEL_20;
        }
LABEL_32:
        *((_DWORD *)this + 8) |= 2u;
        int v16 = (CoreNavigation::CLP::LogEntry::PrivateData::FrequencyOffset *)*((void *)this + 2);
        if (!v16) {
          operator new();
        }
        unsigned int v26 = 0;
        int v17 = (char *)*((void *)a2 + 1);
        if ((unint64_t)v17 >= *((void *)a2 + 2) || *v17 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v26))return 0; {
        }
          }
        else
        {
          unsigned int v26 = *v17;
          *((void *)a2 + 1) = v17 + 1;
        }
        int v18 = *((_DWORD *)a2 + 14);
        int v19 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v18 + 1;
        if (v18 >= v19) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CoreNavigation::CLP::LogEntry::PrivateData::FrequencyOffset::MergePartialFromCodedStream(v16, a2)|| !*((unsigned char *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        int v20 = *((_DWORD *)a2 + 14);
        BOOL v13 = __OFSUB__(v20, 1);
        int v21 = v20 - 1;
        if (v21 < 0 == v13) {
          *((_DWORD *)a2 + 14) = v21;
        }
        int v22 = (unsigned char *)*((void *)a2 + 1);
        if ((unint64_t)v22 < *((void *)a2 + 2) && *v22 == 29)
        {
          *((void *)a2 + 1) = v22 + 1;
          goto LABEL_46;
        }
      }
      if (v6 != 3) {
        break;
      }
      int v7 = TagFallback & 7;
      if (v7 != 5) {
        goto LABEL_20;
      }
LABEL_46:
      unsigned int v24 = 0;
      if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(a2, &v24) & 1) == 0) {
        return 0;
      }
      *((_DWORD *)this + 6) = v24;
      *((_DWORD *)this + 8) |= 4u;
      if (*((void *)a2 + 1) == *((void *)a2 + 2)
        && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
      {
        *((_DWORD *)a2 + 8) = 0;
        uint64_t result = 1;
        *((unsigned char *)a2 + 36) = 1;
        return result;
      }
    }
    int v7 = TagFallback & 7;
LABEL_20:
    if (v7 == 4) {
      return 1;
    }
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0; {
  }
    }
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::SignalCorrelationPeak::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  int v6 = *(_DWORD *)(this + 32);
  if (v6)
  {
    uint64_t v7 = *(void *)(this + 8);
    if (!v7)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)this);
      uint64_t v7 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::SignalCorrelationPeak::default_instance_ + 8);
    }
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v7, a2, a4);
    int v6 = *(_DWORD *)(v5 + 32);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        return this;
      }
      goto LABEL_11;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t v8 = *(void *)(v5 + 16);
  if (!v8)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)this);
    uint64_t v8 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::SignalCorrelationPeak::default_instance_ + 16);
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v8, a2, a4);
  if ((*(_DWORD *)(v5 + 32) & 4) != 0)
  {
LABEL_11:
    float v9 = *(float *)(v5 + 24);
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, (uint64_t)a2, v9, a3);
  }
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::SignalCorrelationPeak::ByteSize(CoreNavigation::CLP::LogEntry::PrivateData::SignalCorrelationPeak *this)
{
  LOBYTE(v2) = *((unsigned char *)this + 32);
  if (!(_BYTE)v2)
  {
    uint64_t result = 0;
    goto LABEL_27;
  }
  if (*((unsigned char *)this + 32))
  {
    uint64_t v5 = *((void *)this + 1);
    if (!v5)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);
      uint64_t v5 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::SignalCorrelationPeak::default_instance_ + 8);
    }
    int v6 = *(unsigned __int8 *)(v5 + 32);
    if (*(unsigned char *)(v5 + 32))
    {
      int v7 = (v6 << 31 >> 31) & 9;
      if ((v6 & 2) != 0) {
        v7 += 9;
      }
      if ((v6 & 4) != 0) {
        int v6 = v7 + 2;
      }
      else {
        int v6 = v7;
      }
    }
    *(_DWORD *)(v5 + 28) = v6;
    unsigned int v3 = v6 + 2;
    int v2 = *((_DWORD *)this + 8);
    if ((v2 & 2) == 0) {
      goto LABEL_24;
    }
    goto LABEL_15;
  }
  unsigned int v3 = 0;
  if ((*((unsigned char *)this + 32) & 2) != 0)
  {
LABEL_15:
    uint64_t v8 = *((void *)this + 2);
    if (!v8)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);
      uint64_t v8 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::SignalCorrelationPeak::default_instance_ + 16);
    }
    int v9 = *(unsigned __int8 *)(v8 + 32);
    if (*(unsigned char *)(v8 + 32))
    {
      int v10 = (v9 << 31 >> 31) & 9;
      if ((v9 & 2) != 0) {
        v10 += 9;
      }
      if ((v9 & 4) != 0) {
        int v9 = v10 + 2;
      }
      else {
        int v9 = v10;
      }
    }
    *(_DWORD *)(v8 + 28) = v9;
    v3 += v9 + 2;
    int v2 = *((_DWORD *)this + 8);
  }
LABEL_24:
  if ((v2 & 4) != 0) {
    uint64_t result = v3 + 5;
  }
  else {
    uint64_t result = v3;
  }
LABEL_27:
  *((_DWORD *)this + 7) = result;
  return result;
}

double CoreNavigation::CLP::LogEntry::PrivateData::SignalCorrelationPeak::CheckTypeAndMergeFrom(CoreNavigation::CLP::LogEntry::PrivateData::SignalCorrelationPeak *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  return CoreNavigation::CLP::LogEntry::PrivateData::SignalCorrelationPeak::MergeFrom(this, lpsrc);
}

double CoreNavigation::CLP::LogEntry::PrivateData::SignalCorrelationPeak::CopyFrom(CoreNavigation::CLP::LogEntry::PrivateData::SignalCorrelationPeak *this, const CoreNavigation::CLP::LogEntry::PrivateData::SignalCorrelationPeak *a2)
{
  if (a2 != this)
  {
    (*(void (**)(CoreNavigation::CLP::LogEntry::PrivateData::SignalCorrelationPeak *))(*(void *)this + 32))(this);
    return CoreNavigation::CLP::LogEntry::PrivateData::SignalCorrelationPeak::MergeFrom(this, a2);
  }
  return result;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::SignalCorrelationPeak::IsInitialized(CoreNavigation::CLP::LogEntry::PrivateData::SignalCorrelationPeak *this)
{
  return 1;
}

float CoreNavigation::CLP::LogEntry::PrivateData::SignalCorrelationPeak::Swap(CoreNavigation::CLP::LogEntry::PrivateData::SignalCorrelationPeak *this, CoreNavigation::CLP::LogEntry::PrivateData::SignalCorrelationPeak *a2)
{
  if (a2 != this)
  {
    uint64_t v2 = *((void *)this + 1);
    *((void *)this + 1) = *((void *)a2 + 1);
    *((void *)a2 + 1) = v2;
    uint64_t v3 = *((void *)this + 2);
    *((void *)this + 2) = *((void *)a2 + 2);
    *((void *)a2 + 2) = v3;
    float result = *((float *)this + 6);
    *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
    *((float *)a2 + 6) = result;
    LODWORD(v3) = *((_DWORD *)this + 8);
    *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
    *((_DWORD *)a2 + 8) = v3;
    LODWORD(v3) = *((_DWORD *)this + 7);
    *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
    *((_DWORD *)a2 + 7) = v3;
  }
  return result;
}

void *CoreNavigation::CLP::LogEntry::PrivateData::SignalCorrelationPeak::GetTypeName@<X0>(void *a1@<X8>)
{
  return sub_18DEDE7B0(a1, "CoreNavigation.CLP.LogEntry.PrivateData.SignalCorrelationPeak");
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::FullSvTime::SharedCtor(uint64_t this)
{
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(_DWORD *)(this + 32) = 0;
  *(void *)(this + 24) = 0;
  return this;
}

CoreNavigation::CLP::LogEntry::PrivateData::FullSvTime *CoreNavigation::CLP::LogEntry::PrivateData::FullSvTime::FullSvTime(CoreNavigation::CLP::LogEntry::PrivateData::FullSvTime *this, const CoreNavigation::CLP::LogEntry::PrivateData::FullSvTime *a2)
{
  *(void *)this = &unk_1EDD0B3A8;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  CoreNavigation::CLP::LogEntry::PrivateData::FullSvTime::MergeFrom(this, a2);
  return this;
}

void sub_18DFC6408(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void CoreNavigation::CLP::LogEntry::PrivateData::FullSvTime::MergeFrom(CoreNavigation::CLP::LogEntry::PrivateData::FullSvTime *this, const CoreNavigation::CLP::LogEntry::PrivateData::FullSvTime *a2)
{
  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v8);
  }
  LOBYTE(v4) = *((unsigned char *)a2 + 32);
  if ((_BYTE)v4)
  {
    if (*((unsigned char *)a2 + 32))
    {
      uint64_t v5 = *((void *)a2 + 1);
      *((_DWORD *)this + 8) |= 1u;
      *((void *)this + 1) = v5;
      int v4 = *((_DWORD *)a2 + 8);
      if ((v4 & 2) == 0)
      {
LABEL_6:
        if ((v4 & 4) == 0) {
          return;
        }
LABEL_10:
        unsigned int v7 = *((_DWORD *)a2 + 6);
        if (v7 >= 6) {
          __assert_rtn("set_full_sv_time_source", "CoreNavigationCLPGnssMeasApi.pb.h", 8877, "::CoreNavigation::CLP::LogEntry::PrivateData::FullSvTimeSource_IsValid(value)");
        }
        *((_DWORD *)this + 8) |= 4u;
        *((_DWORD *)this + 6) = v7;
        return;
      }
    }
    else if ((*((unsigned char *)a2 + 32) & 2) == 0)
    {
      goto LABEL_6;
    }
    uint64_t v6 = *((void *)a2 + 2);
    *((_DWORD *)this + 8) |= 2u;
    *((void *)this + 2) = v6;
    if ((*((_DWORD *)a2 + 8) & 4) == 0) {
      return;
    }
    goto LABEL_10;
  }
}

void sub_18DFC6518(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CoreNavigation::CLP::LogEntry::PrivateData::FullSvTime::~FullSvTime(CoreNavigation::CLP::LogEntry::PrivateData::FullSvTime *this)
{
  *(void *)this = &unk_1EDD0B3A8;
  CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  uint64_t vars8;

  CoreNavigation::CLP::LogEntry::PrivateData::FullSvTime::~FullSvTime(this);

  JUMPOUT(0x192FA6240);
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::FullSvTime::default_instance(CoreNavigation::CLP::LogEntry::PrivateData::FullSvTime *this)
{
  return CoreNavigation::CLP::LogEntry::PrivateData::FullSvTime::default_instance_;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::FullSvTime::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 28) = a2;
  return this;
}

void CoreNavigation::CLP::LogEntry::PrivateData::FullSvTime::New(CoreNavigation::CLP::LogEntry::PrivateData::FullSvTime *this)
{
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::FullSvTime::Clear(uint64_t this)
{
  if (*(unsigned char *)(this + 32))
  {
    *(void *)(this + 8) = 0;
    *(void *)(this + 16) = 0;
    *(_DWORD *)(this + 24) = 0;
  }
  *(_DWORD *)(this + 32) = 0;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::FullSvTime::MergePartialFromCodedStream(CoreNavigation::CLP::LogEntry::PrivateData::FullSvTime *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  do
  {
    while (1)
    {
      while (1)
      {
        int v4 = (char *)*((void *)a2 + 1);
        if ((unint64_t)v4 >= *((void *)a2 + 2) || *v4 < 0)
        {
          unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
          *((_DWORD *)a2 + 8) = TagFallback;
          if (!TagFallback) {
            return 1;
          }
        }
        else
        {
          unint64_t TagFallback = *v4;
          *((_DWORD *)a2 + 8) = TagFallback;
          *((void *)a2 + 1) = v4 + 1;
          if (!TagFallback) {
            return 1;
          }
        }
        unsigned int v6 = TagFallback >> 3;
        if (TagFallback >> 3 != 1) {
          break;
        }
        int v7 = TagFallback & 7;
        if (v7 != 1) {
          goto LABEL_25;
        }
        *(void *)int v14 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, (unint64_t *)v14) & 1) == 0)return 0; {
        *((void *)this + 1) = *(void *)v14;
        }
        *((_DWORD *)this + 8) |= 1u;
        int v10 = (unsigned char *)*((void *)a2 + 1);
        if ((unint64_t)v10 < *((void *)a2 + 2) && *v10 == 17)
        {
          *((void *)a2 + 1) = v10 + 1;
          goto LABEL_17;
        }
      }
      if (v6 != 2) {
        break;
      }
      int v7 = TagFallback & 7;
      if (v7 != 1) {
        goto LABEL_25;
      }
LABEL_17:
      *(void *)int v14 = 0;
      if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, (unint64_t *)v14) & 1) == 0)return 0; {
      *((void *)this + 2) = *(void *)v14;
      }
      *((_DWORD *)this + 8) |= 2u;
      int v11 = (unsigned char *)*((void *)a2 + 1);
      unint64_t v8 = *((void *)a2 + 2);
      if ((unint64_t)v11 < v8 && *v11 == 24)
      {
        int v9 = v11 + 1;
        *((void *)a2 + 1) = v9;
LABEL_21:
        v14[0] = 0;
        if ((unint64_t)v9 >= v8 || *v9 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v14);
          if (!result) {
            return result;
          }
          unsigned int v12 = v14[0];
        }
        else
        {
          unsigned int v12 = *v9;
          *((void *)a2 + 1) = v9 + 1;
        }
        if (v12 <= 5)
        {
          *((_DWORD *)this + 8) |= 4u;
          *((_DWORD *)this + 6) = v12;
        }
        if (*((void *)a2 + 1) == *((void *)a2 + 2)
          && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
        {
          *((_DWORD *)a2 + 8) = 0;
          uint64_t result = 1;
          *((unsigned char *)a2 + 36) = 1;
          return result;
        }
      }
    }
    if (v6 == 3)
    {
      int v7 = TagFallback & 7;
      if ((TagFallback & 7) == 0)
      {
        int v9 = (char *)*((void *)a2 + 1);
        unint64_t v8 = *((void *)a2 + 2);
        goto LABEL_21;
      }
    }
    else
    {
      int v7 = TagFallback & 7;
    }
LABEL_25:
    if (v7 == 4) {
      return 1;
    }
  }
  while ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) != 0);
  return 0;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::FullSvTime::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  int v6 = *(_DWORD *)(this + 32);
  if ((v6 & 1) == 0)
  {
    if ((v6 & 2) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, (uint64_t)a2, *(double *)(v5 + 16), a3);
    if ((*(_DWORD *)(v5 + 32) & 4) == 0) {
      return this;
    }
    goto LABEL_7;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, (uint64_t)a2, *(double *)(this + 8), a3);
  int v6 = *(_DWORD *)(v5 + 32);
  if ((v6 & 2) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v6 & 4) == 0) {
    return this;
  }
LABEL_7:
  uint64_t v7 = *(unsigned int *)(v5 + 24);

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v7, (uint64_t)a2, a4);
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::FullSvTime::ByteSize(CoreNavigation::CLP::LogEntry::PrivateData::FullSvTime *this)
{
  int v2 = *((unsigned __int8 *)this + 32);
  if (*((unsigned char *)this + 32))
  {
    unsigned int v3 = (v2 << 31 >> 31) & 9;
    if ((v2 & 2) != 0) {
      uint64_t v4 = v3 + 9;
    }
    else {
      uint64_t v4 = v3;
    }
    if ((v2 & 4) != 0)
    {
      uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 6);
      if ((v5 & 0x80000000) != 0)
      {
        int v6 = 11;
      }
      else if (v5 >= 0x80)
      {
        int v6 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5) + 1;
      }
      else
      {
        int v6 = 2;
      }
      uint64_t v4 = (v6 + v4);
    }
  }
  else
  {
    uint64_t v4 = 0;
  }
  *((_DWORD *)this + 7) = v4;
  return v4;
}

void CoreNavigation::CLP::LogEntry::PrivateData::FullSvTime::CheckTypeAndMergeFrom(CoreNavigation::CLP::LogEntry::PrivateData::FullSvTime *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  CoreNavigation::CLP::LogEntry::PrivateData::FullSvTime::MergeFrom(this, lpsrc);
}

void CoreNavigation::CLP::LogEntry::PrivateData::FullSvTime::CopyFrom(CoreNavigation::CLP::LogEntry::PrivateData::FullSvTime *this, const CoreNavigation::CLP::LogEntry::PrivateData::FullSvTime *a2)
{
  if (a2 != this)
  {
    (*(void (**)(CoreNavigation::CLP::LogEntry::PrivateData::FullSvTime *))(*(void *)this + 32))(this);
    CoreNavigation::CLP::LogEntry::PrivateData::FullSvTime::MergeFrom(this, a2);
  }
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::FullSvTime::IsInitialized(CoreNavigation::CLP::LogEntry::PrivateData::FullSvTime *this)
{
  return 1;
}

double CoreNavigation::CLP::LogEntry::PrivateData::FullSvTime::Swap(CoreNavigation::CLP::LogEntry::PrivateData::FullSvTime *this, CoreNavigation::CLP::LogEntry::PrivateData::FullSvTime *a2)
{
  if (a2 != this)
  {
    uint64_t v2 = *((void *)this + 1);
    *((void *)this + 1) = *((void *)a2 + 1);
    *((void *)a2 + 1) = v2;
    double result = *((double *)this + 2);
    *((void *)this + 2) = *((void *)a2 + 2);
    *((double *)a2 + 2) = result;
    int v4 = *((_DWORD *)this + 6);
    *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
    *((_DWORD *)a2 + 6) = v4;
    int v5 = *((_DWORD *)this + 8);
    *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
    *((_DWORD *)a2 + 8) = v5;
    int v6 = *((_DWORD *)this + 7);
    *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
    *((_DWORD *)a2 + 7) = v6;
  }
  return result;
}

void *CoreNavigation::CLP::LogEntry::PrivateData::FullSvTime::GetTypeName@<X0>(void *a1@<X8>)
{
  return sub_18DEDE7B0(a1, "CoreNavigation.CLP.LogEntry.PrivateData.FullSvTime");
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::SvMeasurementUsage::SharedCtor(uint64_t this)
{
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

CoreNavigation::CLP::LogEntry::PrivateData::SvMeasurementUsage *CoreNavigation::CLP::LogEntry::PrivateData::SvMeasurementUsage::SvMeasurementUsage(CoreNavigation::CLP::LogEntry::PrivateData::SvMeasurementUsage *this, const CoreNavigation::CLP::LogEntry::PrivateData::SvMeasurementUsage *a2)
{
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = &unk_1EDD0D478;
  *((_DWORD *)this + 6) = 0;
  CoreNavigation::CLP::LogEntry::PrivateData::SvMeasurementUsage::MergeFrom(this, a2);
  return this;
}

void sub_18DFC6B5C(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

float CoreNavigation::CLP::LogEntry::PrivateData::SvMeasurementUsage::MergeFrom(CoreNavigation::CLP::LogEntry::PrivateData::SvMeasurementUsage *this, const CoreNavigation::CLP::LogEntry::PrivateData::SvMeasurementUsage *a2)
{
  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v6);
  }
  LOBYTE(v5) = *((unsigned char *)a2 + 24);
  if ((_BYTE)v5)
  {
    if (*((unsigned char *)a2 + 24))
    {
      float result = *((float *)a2 + 2);
      *((_DWORD *)this + 6) |= 1u;
      *((float *)this + 2) = result;
      int v5 = *((_DWORD *)a2 + 6);
      if ((v5 & 2) == 0)
      {
LABEL_6:
        if ((v5 & 4) == 0) {
          return result;
        }
        goto LABEL_7;
      }
    }
    else if ((*((unsigned char *)a2 + 24) & 2) == 0)
    {
      goto LABEL_6;
    }
    float result = *((float *)a2 + 3);
    *((_DWORD *)this + 6) |= 2u;
    *((float *)this + 3) = result;
    if ((*((_DWORD *)a2 + 6) & 4) == 0) {
      return result;
    }
LABEL_7:
    float result = *((float *)a2 + 4);
    *((_DWORD *)this + 6) |= 4u;
    *((float *)this + 4) = result;
  }
  return result;
}

void sub_18DFC6C44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CoreNavigation::CLP::LogEntry::PrivateData::SvMeasurementUsage::~SvMeasurementUsage(CoreNavigation::CLP::LogEntry::PrivateData::SvMeasurementUsage *this)
{
  *(void *)this = &unk_1EDD0D478;
  CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  uint64_t vars8;

  CoreNavigation::CLP::LogEntry::PrivateData::SvMeasurementUsage::~SvMeasurementUsage(this);

  JUMPOUT(0x192FA6240);
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::SvMeasurementUsage::default_instance(CoreNavigation::CLP::LogEntry::PrivateData::SvMeasurementUsage *this)
{
  return CoreNavigation::CLP::LogEntry::PrivateData::SvMeasurementUsage::default_instance_;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::SvMeasurementUsage::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 20) = a2;
  return this;
}

void CoreNavigation::CLP::LogEntry::PrivateData::SvMeasurementUsage::New(CoreNavigation::CLP::LogEntry::PrivateData::SvMeasurementUsage *this)
{
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::SvMeasurementUsage::Clear(uint64_t this)
{
  if (*(unsigned char *)(this + 24))
  {
    *(void *)(this + 8) = 0;
    *(_DWORD *)(this + 16) = 0;
  }
  *(_DWORD *)(this + 24) = 0;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::SvMeasurementUsage::MergePartialFromCodedStream(CoreNavigation::CLP::LogEntry::PrivateData::SvMeasurementUsage *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  do
  {
    while (1)
    {
      while (1)
      {
        int v4 = (char *)*((void *)a2 + 1);
        if ((unint64_t)v4 >= *((void *)a2 + 2) || *v4 < 0)
        {
          unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
          *((_DWORD *)a2 + 8) = TagFallback;
          if (!TagFallback) {
            return 1;
          }
        }
        else
        {
          unint64_t TagFallback = *v4;
          *((_DWORD *)a2 + 8) = TagFallback;
          *((void *)a2 + 1) = v4 + 1;
          if (!TagFallback) {
            return 1;
          }
        }
        unsigned int v6 = TagFallback >> 3;
        if (TagFallback >> 3 != 1) {
          break;
        }
        int v7 = TagFallback & 7;
        if (v7 != 5) {
          goto LABEL_27;
        }
        unsigned int v13 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(a2, &v13) & 1) == 0) {
          return 0;
        }
        *((_DWORD *)this + 2) = v13;
        *((_DWORD *)this + 6) |= 1u;
        unint64_t v8 = (unsigned char *)*((void *)a2 + 1);
        if ((unint64_t)v8 < *((void *)a2 + 2) && *v8 == 21)
        {
          *((void *)a2 + 1) = v8 + 1;
LABEL_17:
          unsigned int v12 = 0;
          if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(a2, &v12) & 1) == 0) {
            return 0;
          }
          *((_DWORD *)this + 3) = v12;
          *((_DWORD *)this + 6) |= 2u;
          int v9 = (unsigned char *)*((void *)a2 + 1);
          if ((unint64_t)v9 < *((void *)a2 + 2) && *v9 == 29)
          {
            *((void *)a2 + 1) = v9 + 1;
            goto LABEL_21;
          }
        }
      }
      if (v6 == 2)
      {
        int v7 = TagFallback & 7;
        if (v7 != 5) {
          goto LABEL_27;
        }
        goto LABEL_17;
      }
      if (v6 != 3)
      {
        int v7 = TagFallback & 7;
        goto LABEL_27;
      }
      int v7 = TagFallback & 7;
      if (v7 == 5) {
        break;
      }
LABEL_27:
      if (v7 == 4) {
        return 1;
      }
      if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0; {
    }
      }
LABEL_21:
    unsigned int v11 = 0;
    if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(a2, &v11) & 1) == 0) {
      return 0;
    }
    *((_DWORD *)this + 4) = v11;
    *((_DWORD *)this + 6) |= 4u;
  }
  while (*((void *)a2 + 1) != *((void *)a2 + 2)
       || !*((_DWORD *)a2 + 11) && *((_DWORD *)a2 + 6) != *((_DWORD *)a2 + 10));
  *((_DWORD *)a2 + 8) = 0;
  uint64_t result = 1;
  *((unsigned char *)a2 + 36) = 1;
  return result;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::SvMeasurementUsage::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3)
{
  uint64_t v4 = this;
  int v5 = *(_DWORD *)(this + 24);
  if ((v5 & 1) == 0)
  {
    if ((v5 & 2) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, (uint64_t)a2, *(float *)(v4 + 12), a3);
    if ((*(_DWORD *)(v4 + 24) & 4) == 0) {
      return this;
    }
    goto LABEL_7;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, (uint64_t)a2, *(float *)(this + 8), a3);
  int v5 = *(_DWORD *)(v4 + 24);
  if ((v5 & 2) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v5 & 4) == 0) {
    return this;
  }
LABEL_7:
  float v6 = *(float *)(v4 + 16);

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, (uint64_t)a2, v6, a3);
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::SvMeasurementUsage::ByteSize(CoreNavigation::CLP::LogEntry::PrivateData::SvMeasurementUsage *this)
{
  uint64_t v1 = *((unsigned __int8 *)this + 24);
  if (*((unsigned char *)this + 24))
  {
    unsigned int v2 = ((int)(v1 << 31) >> 31) & 5;
    if ((v1 & 2) != 0) {
      v2 += 5;
    }
    if ((v1 & 4) != 0) {
      uint64_t v1 = v2 + 5;
    }
    else {
      uint64_t v1 = v2;
    }
  }
  *((_DWORD *)this + 5) = v1;
  return v1;
}

float CoreNavigation::CLP::LogEntry::PrivateData::SvMeasurementUsage::CheckTypeAndMergeFrom(CoreNavigation::CLP::LogEntry::PrivateData::SvMeasurementUsage *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  return CoreNavigation::CLP::LogEntry::PrivateData::SvMeasurementUsage::MergeFrom(this, lpsrc);
}

float CoreNavigation::CLP::LogEntry::PrivateData::SvMeasurementUsage::CopyFrom(CoreNavigation::CLP::LogEntry::PrivateData::SvMeasurementUsage *this, const CoreNavigation::CLP::LogEntry::PrivateData::SvMeasurementUsage *a2)
{
  if (a2 != this)
  {
    (*(void (**)(CoreNavigation::CLP::LogEntry::PrivateData::SvMeasurementUsage *))(*(void *)this + 32))(this);
    return CoreNavigation::CLP::LogEntry::PrivateData::SvMeasurementUsage::MergeFrom(this, a2);
  }
  return result;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::SvMeasurementUsage::IsInitialized(CoreNavigation::CLP::LogEntry::PrivateData::SvMeasurementUsage *this)
{
  return 1;
}

float CoreNavigation::CLP::LogEntry::PrivateData::SvMeasurementUsage::Swap(CoreNavigation::CLP::LogEntry::PrivateData::SvMeasurementUsage *this, CoreNavigation::CLP::LogEntry::PrivateData::SvMeasurementUsage *a2)
{
  if (a2 != this)
  {
    int v2 = *((_DWORD *)this + 2);
    *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
    *((_DWORD *)a2 + 2) = v2;
    int v3 = *((_DWORD *)this + 3);
    *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
    *((_DWORD *)a2 + 3) = v3;
    float result = *((float *)this + 4);
    *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
    *((float *)a2 + 4) = result;
    int v5 = *((_DWORD *)this + 6);
    *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
    *((_DWORD *)a2 + 6) = v5;
    int v6 = *((_DWORD *)this + 5);
    *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
    *((_DWORD *)a2 + 5) = v6;
  }
  return result;
}

void *CoreNavigation::CLP::LogEntry::PrivateData::SvMeasurementUsage::GetTypeName@<X0>(void *a1@<X8>)
{
  return sub_18DEDE7B0(a1, "CoreNavigation.CLP.LogEntry.PrivateData.SvMeasurementUsage");
}

double CoreNavigation::CLP::LogEntry::PrivateData::MeasurementExtension::SharedCtor(CoreNavigation::CLP::LogEntry::PrivateData::MeasurementExtension *this)
{
  double result = 0.0;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  uint64_t v2 = MEMORY[0x1E4FBA920];
  *((void *)this + 9) = 0;
  *((void *)this + 10) = v2;
  *((void *)this + 14) = 0;
  return result;
}

CoreNavigation::CLP::LogEntry::PrivateData::MeasurementExtension *CoreNavigation::CLP::LogEntry::PrivateData::MeasurementExtension::MeasurementExtension(CoreNavigation::CLP::LogEntry::PrivateData::MeasurementExtension *this, const CoreNavigation::CLP::LogEntry::PrivateData::MeasurementExtension *a2)
{
  *(void *)this = &unk_1EDD0D928;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((_DWORD *)this + 26) = 0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  uint64_t v3 = MEMORY[0x1E4FBA920];
  *((void *)this + 9) = 0;
  *((void *)this + 10) = v3;
  *((void *)this + 14) = 0;
  CoreNavigation::CLP::LogEntry::PrivateData::MeasurementExtension::MergeFrom(this, a2);
  return this;
}

void sub_18DFC728C(_Unwind_Exception *a1)
{
  sub_18DF0C324(v2);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void CoreNavigation::CLP::LogEntry::PrivateData::MeasurementExtension::MergeFrom(CoreNavigation::CLP::LogEntry::PrivateData::MeasurementExtension *this, const CoreNavigation::CLP::LogEntry::PrivateData::MeasurementExtension *a2)
{
  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v31);
  }
  uint64_t v4 = (CoreNavigation::CLP::LogEntry::PrivateData *)wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((CoreNavigation::CLP::LogEntry::PrivateData::MeasurementExtension *)((char *)this + 88));
  if (*((int *)a2 + 24) >= 1)
  {
    uint64_t v5 = 0;
    do
    {
      int v6 = *(const CoreNavigation::CLP::LogEntry::PrivateData::SignalCorrelationPeak **)(*((void *)a2 + 11) + 8 * v5);
      int v7 = *((_DWORD *)this + 25);
      uint64_t v8 = *((int *)this + 24);
      if ((int)v8 >= v7)
      {
        if (v7 == *((_DWORD *)this + 26))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((CoreNavigation::CLP::LogEntry::PrivateData::MeasurementExtension *)((char *)this + 88));
          int v7 = *((_DWORD *)this + 25);
        }
        *((_DWORD *)this + 25) = v7 + 1;
        operator new();
      }
      uint64_t v9 = *((void *)this + 11);
      *((_DWORD *)this + 24) = v8 + 1;
      CoreNavigation::CLP::LogEntry::PrivateData::SignalCorrelationPeak::MergeFrom(*(CoreNavigation::CLP::LogEntry::PrivateData::SignalCorrelationPeak **)(v9 + 8 * v8), v6);
      ++v5;
    }
    while (v5 < *((int *)a2 + 24));
  }
  int v10 = *((_DWORD *)a2 + 29);
  if (!(_BYTE)v10) {
    goto LABEL_21;
  }
  if (v10)
  {
    int v15 = *((_DWORD *)a2 + 2);
    *((_DWORD *)this + 29) |= 1u;
    *((_DWORD *)this + 2) = v15;
    int v10 = *((_DWORD *)a2 + 29);
    if ((v10 & 2) == 0)
    {
LABEL_14:
      if ((v10 & 4) == 0) {
        goto LABEL_15;
      }
      goto LABEL_37;
    }
  }
  else if ((v10 & 2) == 0)
  {
    goto LABEL_14;
  }
  int v16 = *((_DWORD *)a2 + 3);
  *((_DWORD *)this + 29) |= 2u;
  *((_DWORD *)this + 3) = v16;
  int v10 = *((_DWORD *)a2 + 29);
  if ((v10 & 4) == 0)
  {
LABEL_15:
    if ((v10 & 8) == 0) {
      goto LABEL_16;
    }
    goto LABEL_42;
  }
LABEL_37:
  *((_DWORD *)this + 29) |= 4u;
  int v17 = (CoreNavigation::CLP::LogEntry::PrivateData::FullSvTime *)*((void *)this + 2);
  if (!v17) {
    operator new();
  }
  int v18 = (const CoreNavigation::CLP::LogEntry::PrivateData::FullSvTime *)*((void *)a2 + 2);
  if (!v18)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(v4);
    int v18 = *(const CoreNavigation::CLP::LogEntry::PrivateData::FullSvTime **)(CoreNavigation::CLP::LogEntry::PrivateData::MeasurementExtension::default_instance_
                                                                           + 16);
  }
  CoreNavigation::CLP::LogEntry::PrivateData::FullSvTime::MergeFrom(v17, v18);
  int v10 = *((_DWORD *)a2 + 29);
  if ((v10 & 8) == 0)
  {
LABEL_16:
    if ((v10 & 0x10) == 0) {
      goto LABEL_17;
    }
    goto LABEL_47;
  }
LABEL_42:
  *((_DWORD *)this + 29) |= 8u;
  int v19 = (CoreNavigation::CLP::LogEntry::PrivateData::SvMeasurementUsage *)*((void *)this + 3);
  if (!v19) {
    operator new();
  }
  int v20 = (const CoreNavigation::CLP::LogEntry::PrivateData::SvMeasurementUsage *)*((void *)a2 + 3);
  if (!v20)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(v4);
    int v20 = *(const CoreNavigation::CLP::LogEntry::PrivateData::SvMeasurementUsage **)(CoreNavigation::CLP::LogEntry::PrivateData::MeasurementExtension::default_instance_
                                                                                   + 24);
  }
  CoreNavigation::CLP::LogEntry::PrivateData::SvMeasurementUsage::MergeFrom(v19, v20);
  int v10 = *((_DWORD *)a2 + 29);
  if ((v10 & 0x10) == 0)
  {
LABEL_17:
    if ((v10 & 0x20) == 0) {
      goto LABEL_18;
    }
LABEL_52:
    *((_DWORD *)this + 29) |= 0x20u;
    int v23 = (CoreNavigation::CLP::LogEntry::PrivateData::SvMeasurementUsage *)*((void *)this + 5);
    if (!v23) {
      operator new();
    }
    unsigned int v24 = (const CoreNavigation::CLP::LogEntry::PrivateData::SvMeasurementUsage *)*((void *)a2 + 5);
    if (!v24)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(v4);
      unsigned int v24 = *(const CoreNavigation::CLP::LogEntry::PrivateData::SvMeasurementUsage **)(CoreNavigation::CLP::LogEntry::PrivateData::MeasurementExtension::default_instance_
                                                                                     + 40);
    }
    CoreNavigation::CLP::LogEntry::PrivateData::SvMeasurementUsage::MergeFrom(v23, v24);
    int v10 = *((_DWORD *)a2 + 29);
    if ((v10 & 0x40) == 0)
    {
LABEL_19:
      if ((v10 & 0x80) == 0) {
        goto LABEL_21;
      }
      goto LABEL_20;
    }
    goto LABEL_57;
  }
LABEL_47:
  *((_DWORD *)this + 29) |= 0x10u;
  int v21 = (CoreNavigation::CLP::LogEntry::PrivateData::SvMeasurementUsage *)*((void *)this + 4);
  if (!v21) {
    operator new();
  }
  int v22 = (const CoreNavigation::CLP::LogEntry::PrivateData::SvMeasurementUsage *)*((void *)a2 + 4);
  if (!v22)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(v4);
    int v22 = *(const CoreNavigation::CLP::LogEntry::PrivateData::SvMeasurementUsage **)(CoreNavigation::CLP::LogEntry::PrivateData::MeasurementExtension::default_instance_
                                                                                   + 32);
  }
  CoreNavigation::CLP::LogEntry::PrivateData::SvMeasurementUsage::MergeFrom(v21, v22);
  int v10 = *((_DWORD *)a2 + 29);
  if ((v10 & 0x20) != 0) {
    goto LABEL_52;
  }
LABEL_18:
  if ((v10 & 0x40) == 0) {
    goto LABEL_19;
  }
LABEL_57:
  int v25 = *((_DWORD *)a2 + 12);
  *((_DWORD *)this + 29) |= 0x40u;
  *((_DWORD *)this + 12) = v25;
  int v10 = *((_DWORD *)a2 + 29);
  if ((v10 & 0x80) != 0)
  {
LABEL_20:
    int v11 = *((_DWORD *)a2 + 13);
    *((_DWORD *)this + 29) |= 0x80u;
    *((_DWORD *)this + 13) = v11;
    int v10 = *((_DWORD *)a2 + 29);
  }
LABEL_21:
  if ((v10 & 0xFF00) == 0) {
    return;
  }
  if ((v10 & 0x100) != 0)
  {
    unsigned int v12 = *((_DWORD *)a2 + 14);
    if (v12 >= 7) {
      __assert_rtn("set_sv_time_detection_method", "CoreNavigationCLPGnssMeasApi.pb.h", 9230, "::CoreNavigation::CLP::LogEntry::PrivateData::MeasurementDetectionMethod_IsValid(value)");
    }
    *((_DWORD *)this + 29) |= 0x100u;
    *((_DWORD *)this + 14) = v12;
    int v10 = *((_DWORD *)a2 + 29);
  }
  if ((v10 & 0x200) != 0)
  {
    unsigned int v13 = *((_DWORD *)a2 + 15);
    if (v13 >= 7) {
      __assert_rtn("set_frequency_detection_method", "CoreNavigationCLPGnssMeasApi.pb.h", 9253, "::CoreNavigation::CLP::LogEntry::PrivateData::MeasurementDetectionMethod_IsValid(value)");
    }
    *((_DWORD *)this + 29) |= 0x200u;
    *((_DWORD *)this + 15) = v13;
    int v10 = *((_DWORD *)a2 + 29);
  }
  if ((v10 & 0x400) != 0)
  {
    int v26 = *((_DWORD *)a2 + 16);
    *((_DWORD *)this + 29) |= 0x400u;
    *((_DWORD *)this + 16) = v26;
    int v10 = *((_DWORD *)a2 + 29);
    if ((v10 & 0x800) == 0)
    {
LABEL_30:
      if ((v10 & 0x1000) == 0) {
        goto LABEL_31;
      }
      goto LABEL_61;
    }
  }
  else if ((v10 & 0x800) == 0)
  {
    goto LABEL_30;
  }
  int v27 = *((_DWORD *)a2 + 17);
  *((_DWORD *)this + 29) |= 0x800u;
  *((_DWORD *)this + 17) = v27;
  int v10 = *((_DWORD *)a2 + 29);
  if ((v10 & 0x1000) == 0)
  {
LABEL_31:
    if ((v10 & 0x2000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_62;
  }
LABEL_61:
  int v28 = *((_DWORD *)a2 + 18);
  *((_DWORD *)this + 29) |= 0x1000u;
  *((_DWORD *)this + 18) = v28;
  int v10 = *((_DWORD *)a2 + 29);
  if ((v10 & 0x2000) == 0)
  {
LABEL_32:
    if ((v10 & 0x4000) == 0) {
      return;
    }
    goto LABEL_33;
  }
LABEL_62:
  int v29 = (const std::string *)*((void *)a2 + 10);
  *((_DWORD *)this + 29) |= 0x2000u;
  int v30 = (std::string *)*((void *)this + 10);
  if (v30 == (std::string *)MEMORY[0x1E4FBA920]) {
    operator new();
  }
  std::string::operator=(v30, v29);
  if ((*((_DWORD *)a2 + 29) & 0x4000) != 0)
  {
LABEL_33:
    int v14 = *((_DWORD *)a2 + 19);
    *((_DWORD *)this + 29) |= 0x4000u;
    *((_DWORD *)this + 19) = v14;
  }
}

void sub_18DFC7810(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CoreNavigation::CLP::LogEntry::PrivateData::MeasurementExtension::~MeasurementExtension(CoreNavigation::CLP::LogEntry::PrivateData::MeasurementExtension *this)
{
  *(void *)this = &unk_1EDD0D928;
  CoreNavigation::CLP::LogEntry::PrivateData::MeasurementExtension::SharedDtor(this);
  sub_18DF0C324((uint64_t *)this + 11);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  uint64_t vars8;

  CoreNavigation::CLP::LogEntry::PrivateData::MeasurementExtension::~MeasurementExtension(this);

  JUMPOUT(0x192FA6240);
}

void CoreNavigation::CLP::LogEntry::PrivateData::MeasurementExtension::SharedDtor(CoreNavigation::CLP::LogEntry::PrivateData::MeasurementExtension *this)
{
  uint64_t v1 = this;
  uint64_t v2 = *((void *)this + 10);
  if (v2 != MEMORY[0x1E4FBA920] && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    this = (CoreNavigation::CLP::LogEntry::PrivateData::MeasurementExtension *)MEMORY[0x192FA6240](v2, 0x1012C40EC159624);
  }
  CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);
  if ((CoreNavigation::CLP::LogEntry::PrivateData::MeasurementExtension *)CoreNavigation::CLP::LogEntry::PrivateData::MeasurementExtension::default_instance_ != v1)
  {
    uint64_t v4 = *((void *)v1 + 2);
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
    uint64_t v5 = *((void *)v1 + 3);
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    }
    uint64_t v6 = *((void *)v1 + 4);
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
    uint64_t v7 = *((void *)v1 + 5);
    if (v7)
    {
      uint64_t v8 = *(void (**)(void))(*(void *)v7 + 8);
      v8();
    }
  }
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::MeasurementExtension::default_instance(CoreNavigation::CLP::LogEntry::PrivateData::MeasurementExtension *this)
{
  return CoreNavigation::CLP::LogEntry::PrivateData::MeasurementExtension::default_instance_;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::MeasurementExtension::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 112) = a2;
  return this;
}

void CoreNavigation::CLP::LogEntry::PrivateData::MeasurementExtension::New(CoreNavigation::CLP::LogEntry::PrivateData::MeasurementExtension *this)
{
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::MeasurementExtension::Clear(uint64_t this)
{
  uint64_t v1 = this;
  int v2 = *(_DWORD *)(this + 116);
  if ((_BYTE)v2)
  {
    *(void *)(this + 8) = 0;
    if ((v2 & 4) != 0)
    {
      uint64_t v3 = *(void *)(this + 16);
      if (v3)
      {
        if (*(unsigned char *)(v3 + 32))
        {
          *(void *)(v3 + 8) = 0;
          *(void *)(v3 + 16) = 0;
          *(_DWORD *)(v3 + 24) = 0;
        }
        *(_DWORD *)(v3 + 32) = 0;
        int v2 = *(_DWORD *)(this + 116);
      }
    }
    if ((v2 & 8) != 0)
    {
      uint64_t v4 = *(void *)(this + 24);
      if (v4)
      {
        if (*(unsigned char *)(v4 + 24))
        {
          *(void *)(v4 + 8) = 0;
          *(_DWORD *)(v4 + 16) = 0;
        }
        *(_DWORD *)(v4 + 24) = 0;
        int v2 = *(_DWORD *)(this + 116);
      }
    }
    if ((v2 & 0x10) != 0)
    {
      uint64_t v5 = *(void *)(this + 32);
      if (v5)
      {
        if (*(unsigned char *)(v5 + 24))
        {
          *(void *)(v5 + 8) = 0;
          *(_DWORD *)(v5 + 16) = 0;
        }
        *(_DWORD *)(v5 + 24) = 0;
        int v2 = *(_DWORD *)(this + 116);
      }
    }
    if ((v2 & 0x20) != 0)
    {
      uint64_t v6 = *(void *)(this + 40);
      if (v6)
      {
        if (*(unsigned char *)(v6 + 24))
        {
          *(void *)(v6 + 8) = 0;
          *(_DWORD *)(v6 + 16) = 0;
        }
        *(_DWORD *)(v6 + 24) = 0;
        int v2 = *(_DWORD *)(this + 116);
      }
    }
    *(void *)(this + 48) = 0;
  }
  if ((v2 & 0xFF00) != 0)
  {
    *(void *)(this + 56) = 0;
    *(void *)(this + 64) = 0;
    *(_DWORD *)(this + 72) = 0;
    if ((v2 & 0x2000) != 0)
    {
      uint64_t v7 = *(void *)(this + 80);
      if (v7 != MEMORY[0x1E4FBA920])
      {
        if (*(char *)(v7 + 23) < 0)
        {
          **(unsigned char **)uint64_t v7 = 0;
          *(void *)(v7 + 8) = 0;
        }
        else
        {
          *(unsigned char *)uint64_t v7 = 0;
          *(unsigned char *)(v7 + 23) = 0;
        }
      }
    }
    *(_DWORD *)(this + 76) = 0;
  }
  if (*(int *)(this + 96) >= 1)
  {
    uint64_t v8 = 0;
    do
    {
      uint64_t v9 = *(void *)(*(void *)(v1 + 88) + 8 * v8);
      this = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 32))(v9);
      ++v8;
    }
    while (v8 < *(int *)(v1 + 96));
  }
  *(_DWORD *)(v1 + 96) = 0;
  *(_DWORD *)(v1 + 116) = 0;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::MeasurementExtension::MergePartialFromCodedStream(CoreNavigation::CLP::LogEntry::PrivateData::MeasurementExtension *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  uint64_t v4 = (unsigned int *)((char *)this + 48);
  uint64_t v5 = (unsigned int *)((char *)this + 52);
  uint64_t v6 = (unsigned int *)((char *)this + 76);
  uint64_t v7 = (CoreNavigation::CLP::LogEntry::PrivateData::MeasurementExtension *)((char *)this + 88);
  uint64_t v8 = MEMORY[0x1E4FBA920];
  while (2)
  {
    uint64_t v9 = (char *)*((void *)a2 + 1);
    if ((unint64_t)v9 >= *((void *)a2 + 2) || *v9 < 0)
    {
      unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      if (!TagFallback) {
        return 1;
      }
    }
    else
    {
      unint64_t TagFallback = *v9;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((void *)a2 + 1) = v9 + 1;
      if (!TagFallback) {
        return 1;
      }
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        int v11 = TagFallback & 7;
        if (v11 != 5) {
          goto LABEL_51;
        }
        unsigned int v78 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(a2, &v78) & 1) == 0) {
          return 0;
        }
        *((_DWORD *)this + 2) = v78;
        *((_DWORD *)this + 29) |= 1u;
        unsigned int v12 = (unsigned char *)*((void *)a2 + 1);
        if ((unint64_t)v12 >= *((void *)a2 + 2) || *v12 != 21) {
          continue;
        }
        *((void *)a2 + 1) = v12 + 1;
        goto LABEL_15;
      case 2u:
        int v11 = TagFallback & 7;
        if (v11 != 5) {
          goto LABEL_51;
        }
LABEL_15:
        unsigned int v78 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(a2, &v78) & 1) == 0) {
          return 0;
        }
        *((_DWORD *)this + 3) = v78;
        int v13 = *((_DWORD *)this + 29) | 2;
        *((_DWORD *)this + 29) = v13;
        int v14 = (unsigned char *)*((void *)a2 + 1);
        if ((unint64_t)v14 >= *((void *)a2 + 2) || *v14 != 26) {
          continue;
        }
        *((void *)a2 + 1) = v14 + 1;
LABEL_21:
        *((_DWORD *)this + 29) = v13 | 4;
        int v15 = (CoreNavigation::CLP::LogEntry::PrivateData::FullSvTime *)*((void *)this + 2);
        if (!v15) {
          operator new();
        }
        unsigned int v78 = 0;
        int v16 = (char *)*((void *)a2 + 1);
        if ((unint64_t)v16 >= *((void *)a2 + 2) || *v16 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v78))return 0; {
        }
          }
        else
        {
          unsigned int v78 = *v16;
          *((void *)a2 + 1) = v16 + 1;
        }
        int v28 = *((_DWORD *)a2 + 14);
        int v29 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v28 + 1;
        if (v28 >= v29) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CoreNavigation::CLP::LogEntry::PrivateData::FullSvTime::MergePartialFromCodedStream(v15, a2)
          || !*((unsigned char *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        int v30 = *((_DWORD *)a2 + 14);
        BOOL v31 = __OFSUB__(v30, 1);
        int v32 = v30 - 1;
        if (v32 < 0 == v31) {
          *((_DWORD *)a2 + 14) = v32;
        }
        int v33 = (unsigned char *)*((void *)a2 + 1);
        if ((unint64_t)v33 >= *((void *)a2 + 2) || *v33 != 34) {
          continue;
        }
        *((void *)a2 + 1) = v33 + 1;
LABEL_63:
        *((_DWORD *)this + 29) |= 8u;
        unsigned int v34 = (CoreNavigation::CLP::LogEntry::PrivateData::SvMeasurementUsage *)*((void *)this + 3);
        if (!v34) {
          operator new();
        }
        unsigned int v78 = 0;
        int v35 = (char *)*((void *)a2 + 1);
        if ((unint64_t)v35 >= *((void *)a2 + 2) || *v35 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v78))return 0; {
        }
          }
        else
        {
          unsigned int v78 = *v35;
          *((void *)a2 + 1) = v35 + 1;
        }
        int v36 = *((_DWORD *)a2 + 14);
        int v37 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v36 + 1;
        if (v36 >= v37) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CoreNavigation::CLP::LogEntry::PrivateData::SvMeasurementUsage::MergePartialFromCodedStream(v34, a2)|| !*((unsigned char *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        int v38 = *((_DWORD *)a2 + 14);
        BOOL v31 = __OFSUB__(v38, 1);
        int v39 = v38 - 1;
        if (v39 < 0 == v31) {
          *((_DWORD *)a2 + 14) = v39;
        }
        int v40 = (unsigned char *)*((void *)a2 + 1);
        if ((unint64_t)v40 >= *((void *)a2 + 2) || *v40 != 42) {
          continue;
        }
        *((void *)a2 + 1) = v40 + 1;
LABEL_77:
        *((_DWORD *)this + 29) |= 0x10u;
        int v41 = (CoreNavigation::CLP::LogEntry::PrivateData::SvMeasurementUsage *)*((void *)this + 4);
        if (!v41) {
          operator new();
        }
        unsigned int v78 = 0;
        int v42 = (char *)*((void *)a2 + 1);
        if ((unint64_t)v42 >= *((void *)a2 + 2) || *v42 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v78))return 0; {
        }
          }
        else
        {
          unsigned int v78 = *v42;
          *((void *)a2 + 1) = v42 + 1;
        }
        int v43 = *((_DWORD *)a2 + 14);
        int v44 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v43 + 1;
        if (v43 >= v44) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CoreNavigation::CLP::LogEntry::PrivateData::SvMeasurementUsage::MergePartialFromCodedStream(v41, a2)|| !*((unsigned char *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        int v45 = *((_DWORD *)a2 + 14);
        BOOL v31 = __OFSUB__(v45, 1);
        int v46 = v45 - 1;
        if (v46 < 0 == v31) {
          *((_DWORD *)a2 + 14) = v46;
        }
        int v47 = (unsigned char *)*((void *)a2 + 1);
        if ((unint64_t)v47 >= *((void *)a2 + 2) || *v47 != 50) {
          continue;
        }
        *((void *)a2 + 1) = v47 + 1;
LABEL_91:
        *((_DWORD *)this + 29) |= 0x20u;
        unsigned int v48 = (CoreNavigation::CLP::LogEntry::PrivateData::SvMeasurementUsage *)*((void *)this + 5);
        if (!v48) {
          operator new();
        }
        unsigned int v78 = 0;
        int v49 = (char *)*((void *)a2 + 1);
        if ((unint64_t)v49 >= *((void *)a2 + 2) || *v49 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v78))return 0; {
        }
          }
        else
        {
          unsigned int v78 = *v49;
          *((void *)a2 + 1) = v49 + 1;
        }
        int v50 = *((_DWORD *)a2 + 14);
        int v51 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v50 + 1;
        if (v50 >= v51) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CoreNavigation::CLP::LogEntry::PrivateData::SvMeasurementUsage::MergePartialFromCodedStream(v48, a2)|| !*((unsigned char *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        int v52 = *((_DWORD *)a2 + 14);
        BOOL v31 = __OFSUB__(v52, 1);
        int v53 = v52 - 1;
        if (v53 < 0 == v31) {
          *((_DWORD *)a2 + 14) = v53;
        }
        int v54 = (unsigned char *)*((void *)a2 + 1);
        unint64_t v17 = *((void *)a2 + 2);
        if ((unint64_t)v54 >= v17 || *v54 != 56) {
          continue;
        }
        int v18 = v54 + 1;
        *((void *)a2 + 1) = v18;
LABEL_105:
        if ((unint64_t)v18 >= v17 || *v18 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v4);
          if (!result) {
            return result;
          }
          int v55 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v17 = *((void *)a2 + 2);
        }
        else
        {
          unsigned int *v4 = *v18;
          int v55 = v18 + 1;
          *((void *)a2 + 1) = v55;
        }
        *((_DWORD *)this + 29) |= 0x40u;
        if ((unint64_t)v55 >= v17 || *v55 != 64) {
          continue;
        }
        int v19 = v55 + 1;
        *((void *)a2 + 1) = v19;
LABEL_113:
        if ((unint64_t)v19 >= v17 || *v19 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v5);
          if (!result) {
            return result;
          }
          int v57 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v17 = *((void *)a2 + 2);
        }
        else
        {
          unsigned int *v5 = *v19;
          int v57 = v19 + 1;
          *((void *)a2 + 1) = v57;
        }
        *((_DWORD *)this + 29) |= 0x80u;
        if ((unint64_t)v57 >= v17 || *v57 != 72) {
          continue;
        }
        int v20 = v57 + 1;
        *((void *)a2 + 1) = v20;
LABEL_121:
        unsigned int v78 = 0;
        if ((unint64_t)v20 >= v17 || *v20 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v78);
          if (!result) {
            return result;
          }
          unsigned int v58 = v78;
        }
        else
        {
          unsigned int v58 = *v20;
          *((void *)a2 + 1) = v20 + 1;
        }
        if (v58 <= 6)
        {
          *((_DWORD *)this + 29) |= 0x100u;
          *((_DWORD *)this + 14) = v58;
        }
        int v59 = (unsigned char *)*((void *)a2 + 1);
        unint64_t v21 = *((void *)a2 + 2);
        if ((unint64_t)v59 >= v21 || *v59 != 80) {
          continue;
        }
        int v22 = v59 + 1;
        *((void *)a2 + 1) = v22;
LABEL_131:
        unsigned int v78 = 0;
        if ((unint64_t)v22 >= v21 || *v22 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v78);
          if (!result) {
            return result;
          }
          unsigned int v60 = v78;
        }
        else
        {
          unsigned int v60 = *v22;
          *((void *)a2 + 1) = v22 + 1;
        }
        if (v60 <= 6)
        {
          *((_DWORD *)this + 29) |= 0x200u;
          *((_DWORD *)this + 15) = v60;
        }
        v61 = (unsigned char *)*((void *)a2 + 1);
        unint64_t v23 = *((void *)a2 + 2);
        if ((unint64_t)v61 >= v23 || *v61 != 88) {
          continue;
        }
        unsigned int v24 = v61 + 1;
        *((void *)a2 + 1) = v24;
LABEL_141:
        unsigned int v78 = 0;
        if ((unint64_t)v24 >= v23 || *v24 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v78);
          if (!result) {
            return result;
          }
          unsigned int v62 = v78;
          int v63 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v23 = *((void *)a2 + 2);
        }
        else
        {
          unsigned int v62 = *v24;
          int v63 = v24 + 1;
          *((void *)a2 + 1) = v63;
        }
        *((_DWORD *)this + 16) = v62;
        *((_DWORD *)this + 29) |= 0x400u;
        if ((unint64_t)v63 >= v23 || *v63 != 101) {
          continue;
        }
        *((void *)a2 + 1) = v63 + 1;
LABEL_149:
        unsigned int v78 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(a2, &v78) & 1) == 0) {
          return 0;
        }
        *((_DWORD *)this + 17) = v78;
        *((_DWORD *)this + 29) |= 0x800u;
        int v64 = (unsigned char *)*((void *)a2 + 1);
        if ((unint64_t)v64 >= *((void *)a2 + 2) || *v64 != 109) {
          continue;
        }
        *((void *)a2 + 1) = v64 + 1;
LABEL_153:
        unsigned int v78 = 0;
        if (wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(a2, &v78))
        {
          *((_DWORD *)this + 18) = v78;
          int v25 = *((_DWORD *)this + 29) | 0x1000;
          *((_DWORD *)this + 29) = v25;
          int v65 = (unsigned char *)*((void *)a2 + 1);
          if ((unint64_t)v65 < *((void *)a2 + 2) && *v65 == 114)
          {
            *((void *)a2 + 1) = v65 + 1;
LABEL_157:
            *((_DWORD *)this + 29) = v25 | 0x2000;
            if (*((void *)this + 10) == v8) {
              operator new();
            }
            uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadBytes();
            if (!result) {
              return result;
            }
            int v66 = (unsigned char *)*((void *)a2 + 1);
            unint64_t v26 = *((void *)a2 + 2);
            if ((unint64_t)v66 < v26 && *v66 == 120)
            {
              int v27 = v66 + 1;
              *((void *)a2 + 1) = v27;
LABEL_163:
              if ((unint64_t)v27 >= v26 || (char)*v27 < 0)
              {
                uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v6);
                if (!result) {
                  return result;
                }
                int v67 = (unsigned __int8 *)*((void *)a2 + 1);
                unint64_t v26 = *((void *)a2 + 2);
              }
              else
              {
                *uint64_t v6 = *v27;
                int v67 = v27 + 1;
                *((void *)a2 + 1) = v67;
              }
              *((_DWORD *)this + 29) |= 0x4000u;
              if ((int)v26 - (int)v67 >= 2 && *v67 == 130 && v67[1] == 1)
              {
                do
                {
                  *((void *)a2 + 1) = v67 + 2;
LABEL_172:
                  int v68 = *((_DWORD *)this + 25);
                  uint64_t v69 = *((int *)this + 24);
                  if ((int)v69 >= v68)
                  {
                    if (v68 == *((_DWORD *)this + 26))
                    {
                      wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v7);
                      int v68 = *((_DWORD *)this + 25);
                    }
                    *((_DWORD *)this + 25) = v68 + 1;
                    operator new();
                  }
                  uint64_t v70 = *((void *)this + 11);
                  *((_DWORD *)this + 24) = v69 + 1;
                  int v71 = *(CoreNavigation::CLP::LogEntry::PrivateData::SignalCorrelationPeak **)(v70 + 8 * v69);
                  unsigned int v78 = 0;
                  int v72 = (char *)*((void *)a2 + 1);
                  if ((unint64_t)v72 >= *((void *)a2 + 2) || *v72 < 0)
                  {
                    if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v78))return 0; {
                  }
                    }
                  else
                  {
                    unsigned int v78 = *v72;
                    *((void *)a2 + 1) = v72 + 1;
                  }
                  int v73 = *((_DWORD *)a2 + 14);
                  int v74 = *((_DWORD *)a2 + 15);
                  *((_DWORD *)a2 + 14) = v73 + 1;
                  if (v73 >= v74) {
                    return 0;
                  }
                  wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
                  if (!CoreNavigation::CLP::LogEntry::PrivateData::SignalCorrelationPeak::MergePartialFromCodedStream(v71, a2)|| !*((unsigned char *)a2 + 36))
                  {
                    return 0;
                  }
                  wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
                  int v75 = *((_DWORD *)a2 + 14);
                  BOOL v31 = __OFSUB__(v75, 1);
                  int v76 = v75 - 1;
                  if (v76 < 0 == v31) {
                    *((_DWORD *)a2 + 14) = v76;
                  }
                  int v67 = (unsigned __int8 *)*((void *)a2 + 1);
                  int v77 = (unsigned __int8 *)*((void *)a2 + 2);
                }
                while ((int)v77 - (int)v67 > 1 && *v67 == 130 && v67[1] == 1);
                if (v67 == v77 && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
                {
                  *((_DWORD *)a2 + 8) = 0;
                  uint64_t result = 1;
                  *((unsigned char *)a2 + 36) = 1;
                  return result;
                }
              }
            }
          }
          continue;
        }
        return 0;
      case 3u:
        int v11 = TagFallback & 7;
        if (v11 != 2) {
          goto LABEL_51;
        }
        int v13 = *((_DWORD *)this + 29);
        goto LABEL_21;
      case 4u:
        int v11 = TagFallback & 7;
        if (v11 == 2) {
          goto LABEL_63;
        }
        goto LABEL_51;
      case 5u:
        int v11 = TagFallback & 7;
        if (v11 == 2) {
          goto LABEL_77;
        }
        goto LABEL_51;
      case 6u:
        int v11 = TagFallback & 7;
        if (v11 == 2) {
          goto LABEL_91;
        }
        goto LABEL_51;
      case 7u:
        int v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_51;
        }
        int v18 = (char *)*((void *)a2 + 1);
        unint64_t v17 = *((void *)a2 + 2);
        goto LABEL_105;
      case 8u:
        int v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_51;
        }
        int v19 = (char *)*((void *)a2 + 1);
        unint64_t v17 = *((void *)a2 + 2);
        goto LABEL_113;
      case 9u:
        int v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_51;
        }
        int v20 = (char *)*((void *)a2 + 1);
        unint64_t v17 = *((void *)a2 + 2);
        goto LABEL_121;
      case 0xAu:
        int v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_51;
        }
        int v22 = (char *)*((void *)a2 + 1);
        unint64_t v21 = *((void *)a2 + 2);
        goto LABEL_131;
      case 0xBu:
        int v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_51;
        }
        unsigned int v24 = (char *)*((void *)a2 + 1);
        unint64_t v23 = *((void *)a2 + 2);
        goto LABEL_141;
      case 0xCu:
        int v11 = TagFallback & 7;
        if (v11 == 5) {
          goto LABEL_149;
        }
        goto LABEL_51;
      case 0xDu:
        int v11 = TagFallback & 7;
        if (v11 == 5) {
          goto LABEL_153;
        }
        goto LABEL_51;
      case 0xEu:
        int v11 = TagFallback & 7;
        if (v11 != 2) {
          goto LABEL_51;
        }
        int v25 = *((_DWORD *)this + 29);
        goto LABEL_157;
      case 0xFu:
        int v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_51;
        }
        int v27 = (unsigned __int8 *)*((void *)a2 + 1);
        unint64_t v26 = *((void *)a2 + 2);
        goto LABEL_163;
      case 0x10u:
        int v11 = TagFallback & 7;
        if (v11 != 2) {
          goto LABEL_51;
        }
        goto LABEL_172;
      default:
        int v11 = TagFallback & 7;
LABEL_51:
        if (v11 == 4) {
          return 1;
        }
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0; {
        continue;
        }
    }
  }
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::MeasurementExtension::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  int v6 = *(_DWORD *)(this + 116);
  if (v6)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, (uint64_t)a2, *(float *)(this + 8), a3);
    int v6 = *(_DWORD *)(v5 + 116);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_23;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, (uint64_t)a2, *(float *)(v5 + 12), a3);
  int v6 = *(_DWORD *)(v5 + 116);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_26;
  }
LABEL_23:
  uint64_t v8 = *(void *)(v5 + 16);
  if (!v8)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)this);
    uint64_t v8 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::MeasurementExtension::default_instance_ + 16);
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v8, a2, a4);
  int v6 = *(_DWORD *)(v5 + 116);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_29;
  }
LABEL_26:
  uint64_t v9 = *(void *)(v5 + 24);
  if (!v9)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)this);
    uint64_t v9 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::MeasurementExtension::default_instance_ + 24);
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v9, a2, a4);
  int v6 = *(_DWORD *)(v5 + 116);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_32;
  }
LABEL_29:
  uint64_t v10 = *(void *)(v5 + 32);
  if (!v10)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)this);
    uint64_t v10 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::MeasurementExtension::default_instance_ + 32);
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, v10, a2, a4);
  int v6 = *(_DWORD *)(v5 + 116);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_35;
  }
LABEL_32:
  uint64_t v11 = *(void *)(v5 + 40);
  if (!v11)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)this);
    uint64_t v11 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::MeasurementExtension::default_instance_ + 40);
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, v11, a2, a4);
  int v6 = *(_DWORD *)(v5 + 116);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_36;
  }
LABEL_35:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, *(unsigned int *)(v5 + 48), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 116);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_37;
  }
LABEL_36:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, *(unsigned int *)(v5 + 52), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 116);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_38;
  }
LABEL_37:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9, *(unsigned int *)(v5 + 56), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 116);
  if ((v6 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_39;
  }
LABEL_38:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA, *(unsigned int *)(v5 + 60), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 116);
  if ((v6 & 0x400) == 0)
  {
LABEL_12:
    if ((v6 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_40;
  }
LABEL_39:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB, *(unsigned int *)(v5 + 64), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 116);
  if ((v6 & 0x800) == 0)
  {
LABEL_13:
    if ((v6 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_41;
  }
LABEL_40:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xC, (uint64_t)a2, *(float *)(v5 + 68), a3);
  int v6 = *(_DWORD *)(v5 + 116);
  if ((v6 & 0x1000) == 0)
  {
LABEL_14:
    if ((v6 & 0x2000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_42;
  }
LABEL_41:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xD, (uint64_t)a2, *(float *)(v5 + 72), a3);
  int v6 = *(_DWORD *)(v5 + 116);
  if ((v6 & 0x2000) == 0)
  {
LABEL_15:
    if ((v6 & 0x4000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
LABEL_42:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBytes();
  if ((*(_DWORD *)(v5 + 116) & 0x4000) != 0) {
LABEL_16:
  }
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xF, *(unsigned int *)(v5 + 76), (uint64_t)a2, a4);
LABEL_17:
  if (*(int *)(v5 + 96) >= 1)
  {
    uint64_t v7 = 0;
    do
      this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x10, *(void *)(*(void *)(v5 + 88) + 8 * v7++), a2, a4);
    while (v7 < *(int *)(v5 + 96));
  }
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::MeasurementExtension::ByteSize(uint64_t this)
{
  uint64_t v1 = this;
  int v2 = *(_DWORD *)(this + 116);
  if (!(_BYTE)v2)
  {
    int v3 = 0;
    goto LABEL_57;
  }
  if ((v2 & 2) != 0) {
    int v3 = ((v2 << 31 >> 31) & 5) + 5;
  }
  else {
    int v3 = (v2 << 31 >> 31) & 5;
  }
  if ((v2 & 4) != 0)
  {
    uint64_t v4 = *(CoreNavigation::CLP::LogEntry::PrivateData::FullSvTime **)(this + 16);
    if (!v4)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(0);
      uint64_t v4 = *(CoreNavigation::CLP::LogEntry::PrivateData::FullSvTime **)(CoreNavigation::CLP::LogEntry::PrivateData::MeasurementExtension::default_instance_
                                                                      + 16);
    }
    uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CoreNavigation::CLP::LogEntry::PrivateData::FullSvTime::ByteSize(v4);
    int v6 = (int)v5;
    if (v5 >= 0x80) {
      this = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5);
    }
    else {
      this = 1;
    }
    v3 += v6 + this + 1;
    int v2 = *(_DWORD *)(v1 + 116);
    if ((v2 & 8) == 0)
    {
LABEL_7:
      if ((v2 & 0x10) == 0) {
        goto LABEL_8;
      }
      goto LABEL_29;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_7;
  }
  uint64_t v7 = *(void *)(v1 + 24);
  if (!v7)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)this);
    uint64_t v7 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::MeasurementExtension::default_instance_ + 24);
  }
  int v8 = *(unsigned __int8 *)(v7 + 24);
  int v9 = (v8 << 31 >> 31) & 5;
  if ((v8 & 2) != 0) {
    v9 += 5;
  }
  if ((v8 & 4) != 0) {
    v9 += 5;
  }
  if (*(unsigned char *)(v7 + 24)) {
    int v10 = v9;
  }
  else {
    int v10 = 0;
  }
  *(_DWORD *)(v7 + 20) = v10;
  v3 += v10 + 2;
  int v2 = *(_DWORD *)(v1 + 116);
  if ((v2 & 0x10) == 0)
  {
LABEL_8:
    if ((v2 & 0x20) == 0) {
      goto LABEL_9;
    }
    goto LABEL_39;
  }
LABEL_29:
  uint64_t v11 = *(void *)(v1 + 32);
  if (!v11)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)this);
    uint64_t v11 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::MeasurementExtension::default_instance_ + 32);
  }
  int v12 = *(unsigned __int8 *)(v11 + 24);
  int v13 = (v12 << 31 >> 31) & 5;
  if ((v12 & 2) != 0) {
    v13 += 5;
  }
  if ((v12 & 4) != 0) {
    v13 += 5;
  }
  if (*(unsigned char *)(v11 + 24)) {
    int v14 = v13;
  }
  else {
    int v14 = 0;
  }
  *(_DWORD *)(v11 + 20) = v14;
  v3 += v14 + 2;
  int v2 = *(_DWORD *)(v1 + 116);
  if ((v2 & 0x20) == 0)
  {
LABEL_9:
    if ((v2 & 0x40) == 0) {
      goto LABEL_10;
    }
    goto LABEL_49;
  }
LABEL_39:
  uint64_t v15 = *(void *)(v1 + 40);
  if (!v15)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)this);
    uint64_t v15 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::MeasurementExtension::default_instance_ + 40);
  }
  int v16 = *(unsigned __int8 *)(v15 + 24);
  int v17 = (v16 << 31 >> 31) & 5;
  if ((v16 & 2) != 0) {
    v17 += 5;
  }
  if ((v16 & 4) != 0) {
    v17 += 5;
  }
  if (*(unsigned char *)(v15 + 24)) {
    int v18 = v17;
  }
  else {
    int v18 = 0;
  }
  *(_DWORD *)(v15 + 20) = v18;
  v3 += v18 + 2;
  int v2 = *(_DWORD *)(v1 + 116);
  if ((v2 & 0x40) == 0)
  {
LABEL_10:
    if ((v2 & 0x80) == 0) {
      goto LABEL_57;
    }
    goto LABEL_53;
  }
LABEL_49:
  int v19 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(v1 + 48);
  if (v19 >= 0x80)
  {
    int v20 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v19);
    int v2 = *(_DWORD *)(v1 + 116);
  }
  else
  {
    int v20 = 1;
  }
  v3 += v20 + 1;
  if ((v2 & 0x80) != 0)
  {
LABEL_53:
    unint64_t v21 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(v1 + 52);
    if (v21 >= 0x80)
    {
      int v22 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v21) + 1;
      int v2 = *(_DWORD *)(v1 + 116);
    }
    else
    {
      int v22 = 2;
    }
    v3 += v22;
  }
LABEL_57:
  if ((v2 & 0xFF00) == 0) {
    goto LABEL_100;
  }
  if ((v2 & 0x100) == 0)
  {
    if ((v2 & 0x200) == 0) {
      goto LABEL_60;
    }
LABEL_68:
    int v25 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(v1 + 60);
    if ((v25 & 0x80000000) != 0)
    {
      int v26 = 11;
    }
    else if (v25 >= 0x80)
    {
      int v26 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v25) + 1;
      int v2 = *(_DWORD *)(v1 + 116);
    }
    else
    {
      int v26 = 2;
    }
    v3 += v26;
    if ((v2 & 0x400) == 0) {
      goto LABEL_80;
    }
    goto LABEL_74;
  }
  unint64_t v23 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(v1 + 56);
  if ((v23 & 0x80000000) != 0)
  {
    int v24 = 11;
  }
  else if (v23 >= 0x80)
  {
    int v24 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v23) + 1;
    int v2 = *(_DWORD *)(v1 + 116);
  }
  else
  {
    int v24 = 2;
  }
  v3 += v24;
  if ((v2 & 0x200) != 0) {
    goto LABEL_68;
  }
LABEL_60:
  if ((v2 & 0x400) != 0)
  {
LABEL_74:
    int v27 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(v1 + 64);
    if ((v27 & 0x80000000) != 0)
    {
      int v28 = 11;
    }
    else if (v27 >= 0x80)
    {
      int v28 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v27) + 1;
      int v2 = *(_DWORD *)(v1 + 116);
    }
    else
    {
      int v28 = 2;
    }
    v3 += v28;
  }
LABEL_80:
  int v29 = v3 + 5;
  if ((v2 & 0x800) == 0) {
    int v29 = v3;
  }
  if ((v2 & 0x1000) != 0) {
    int v3 = v29 + 5;
  }
  else {
    int v3 = v29;
  }
  if ((v2 & 0x2000) != 0)
  {
    uint64_t v30 = *(void *)(v1 + 80);
    int v31 = *(unsigned __int8 *)(v30 + 23);
    char v32 = v31;
    uint64_t v33 = *(void *)(v30 + 8);
    if ((v31 & 0x80u) == 0) {
      unint64_t v34 = *(unsigned __int8 *)(v30 + 23);
    }
    else {
      unint64_t v34 = v33;
    }
    if (v34 >= 0x80)
    {
      int v35 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)v34);
      int v31 = *(unsigned __int8 *)(v30 + 23);
      uint64_t v33 = *(void *)(v30 + 8);
      int v2 = *(_DWORD *)(v1 + 116);
      char v32 = *(unsigned char *)(v30 + 23);
    }
    else
    {
      int v35 = 1;
    }
    if (v32 < 0) {
      int v31 = v33;
    }
    v3 += v35 + v31 + 1;
  }
  if ((v2 & 0x4000) != 0)
  {
    int v36 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(v1 + 76);
    if (v36 >= 0x80) {
      int v37 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v36) + 1;
    }
    else {
      int v37 = 2;
    }
    v3 += v37;
  }
LABEL_100:
  int v38 = *(_DWORD *)(v1 + 96);
  uint64_t v39 = (v3 + 2 * v38);
  if (v38 >= 1)
  {
    uint64_t v40 = 0;
    do
      uint64_t v39 = v39
          + CoreNavigation::CLP::LogEntry::PrivateData::SignalCorrelationPeak::ByteSize(*(CoreNavigation::CLP::LogEntry::PrivateData::SignalCorrelationPeak **)(*(void *)(v1 + 88) + 8 * v40++))
          + 1;
    while (v40 < *(int *)(v1 + 96));
  }
  *(_DWORD *)(v1 + 112) = v39;
  return v39;
}

void CoreNavigation::CLP::LogEntry::PrivateData::MeasurementExtension::CheckTypeAndMergeFrom(CoreNavigation::CLP::LogEntry::PrivateData::MeasurementExtension *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  CoreNavigation::CLP::LogEntry::PrivateData::MeasurementExtension::MergeFrom(this, lpsrc);
}

void CoreNavigation::CLP::LogEntry::PrivateData::MeasurementExtension::CopyFrom(CoreNavigation::CLP::LogEntry::PrivateData::MeasurementExtension *this, const CoreNavigation::CLP::LogEntry::PrivateData::MeasurementExtension *a2)
{
  if (a2 != this)
  {
    (*(void (**)(CoreNavigation::CLP::LogEntry::PrivateData::MeasurementExtension *))(*(void *)this + 32))(this);
    CoreNavigation::CLP::LogEntry::PrivateData::MeasurementExtension::MergeFrom(this, a2);
  }
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::MeasurementExtension::IsInitialized(CoreNavigation::CLP::LogEntry::PrivateData::MeasurementExtension *this)
{
  return 1;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::MeasurementExtension::Swap(uint64_t this, CoreNavigation::CLP::LogEntry::PrivateData::MeasurementExtension *a2)
{
  if (a2 != (CoreNavigation::CLP::LogEntry::PrivateData::MeasurementExtension *)this)
  {
    uint64_t v3 = this;
    int v4 = *(_DWORD *)(this + 8);
    *(_DWORD *)(this + 8) = *((_DWORD *)a2 + 2);
    *((_DWORD *)a2 + 2) = v4;
    int v5 = *(_DWORD *)(this + 12);
    *(_DWORD *)(this + 12) = *((_DWORD *)a2 + 3);
    *((_DWORD *)a2 + 3) = v5;
    uint64_t v6 = *(void *)(this + 16);
    *(void *)(this + 16) = *((void *)a2 + 2);
    *((void *)a2 + 2) = v6;
    uint64_t v7 = *(void *)(this + 24);
    *(void *)(this + 24) = *((void *)a2 + 3);
    *((void *)a2 + 3) = v7;
    uint64_t v8 = *(void *)(this + 32);
    *(void *)(this + 32) = *((void *)a2 + 4);
    *((void *)a2 + 4) = v8;
    uint64_t v9 = *(void *)(this + 40);
    *(void *)(this + 40) = *((void *)a2 + 5);
    *((void *)a2 + 5) = v9;
    LODWORD(v9) = *(_DWORD *)(this + 48);
    *(_DWORD *)(this + 48) = *((_DWORD *)a2 + 12);
    *((_DWORD *)a2 + 12) = v9;
    LODWORD(v9) = *(_DWORD *)(this + 52);
    *(_DWORD *)(this + 52) = *((_DWORD *)a2 + 13);
    *((_DWORD *)a2 + 13) = v9;
    LODWORD(v9) = *(_DWORD *)(this + 56);
    *(_DWORD *)(this + 56) = *((_DWORD *)a2 + 14);
    *((_DWORD *)a2 + 14) = v9;
    LODWORD(v9) = *(_DWORD *)(this + 60);
    *(_DWORD *)(this + 60) = *((_DWORD *)a2 + 15);
    *((_DWORD *)a2 + 15) = v9;
    LODWORD(v9) = *(_DWORD *)(this + 64);
    *(_DWORD *)(this + 64) = *((_DWORD *)a2 + 16);
    *((_DWORD *)a2 + 16) = v9;
    int v10 = *(_DWORD *)(this + 68);
    *(_DWORD *)(this + 68) = *((_DWORD *)a2 + 17);
    *((_DWORD *)a2 + 17) = v10;
    int v11 = *(_DWORD *)(this + 72);
    *(_DWORD *)(this + 72) = *((_DWORD *)a2 + 18);
    *((_DWORD *)a2 + 18) = v11;
    uint64_t v12 = *(void *)(this + 80);
    *(void *)(this + 80) = *((void *)a2 + 10);
    *((void *)a2 + 10) = v12;
    LODWORD(v12) = *(_DWORD *)(this + 76);
    *(_DWORD *)(this + 76) = *((_DWORD *)a2 + 19);
    *((_DWORD *)a2 + 19) = v12;
    this = wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Swap();
    int v13 = *(_DWORD *)(v3 + 116);
    *(_DWORD *)(v3 + 116) = *((_DWORD *)a2 + 29);
    *((_DWORD *)a2 + 29) = v13;
    int v14 = *(_DWORD *)(v3 + 112);
    *(_DWORD *)(v3 + 112) = *((_DWORD *)a2 + 28);
    *((_DWORD *)a2 + 28) = v14;
  }
  return this;
}

void *CoreNavigation::CLP::LogEntry::PrivateData::MeasurementExtension::GetTypeName@<X0>(void *a1@<X8>)
{
  return sub_18DEDE7B0(a1, "CoreNavigation.CLP.LogEntry.PrivateData.MeasurementExtension");
}

double CoreNavigation::CLP::LogEntry::PrivateData::Measurement::SharedCtor(CoreNavigation::CLP::LogEntry::PrivateData::Measurement *this)
{
  *((_DWORD *)this + 27) = 0;
  *((_DWORD *)this + 28) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *((unsigned char *)this + 104) = 0;
  return result;
}

CoreNavigation::CLP::LogEntry::PrivateData::Measurement *CoreNavigation::CLP::LogEntry::PrivateData::Measurement::Measurement(CoreNavigation::CLP::LogEntry::PrivateData::Measurement *this, const CoreNavigation::CLP::LogEntry::PrivateData::Measurement *a2)
{
  *(void *)this = &unk_1EDD0B6F0;
  *((_DWORD *)this + 27) = 0;
  *((_DWORD *)this + 28) = 0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *((unsigned char *)this + 104) = 0;
  CoreNavigation::CLP::LogEntry::PrivateData::Measurement::MergeFrom(this, a2);
  return this;
}

void sub_18DFC9138(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void CoreNavigation::CLP::LogEntry::PrivateData::Measurement::MergeFrom(CoreNavigation::CLP::LogEntry::PrivateData::Measurement *this, const CoreNavigation::CLP::LogEntry::PrivateData::Measurement *a2)
{
  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v27);
  }
  int v4 = *((_DWORD *)a2 + 28);
  if (!(_BYTE)v4) {
    goto LABEL_41;
  }
  if (v4)
  {
    *((_DWORD *)this + 28) |= 1u;
    int v5 = (CoreNavigation::CLP::LogEntry::PrivateData::SvId *)*((void *)this + 1);
    if (!v5) {
      operator new();
    }
    uint64_t v6 = (const CoreNavigation::CLP::LogEntry::PrivateData::SvId *)*((void *)a2 + 1);
    if (!v6)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);
      uint64_t v6 = *(const CoreNavigation::CLP::LogEntry::PrivateData::SvId **)(CoreNavigation::CLP::LogEntry::PrivateData::Measurement::default_instance_
                                                                      + 8);
    }
    CoreNavigation::CLP::LogEntry::PrivateData::SvId::MergeFrom(v5, v6);
    int v4 = *((_DWORD *)a2 + 28);
    if ((v4 & 2) == 0)
    {
LABEL_6:
      if ((v4 & 4) == 0) {
        goto LABEL_7;
      }
      goto LABEL_23;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_6;
  }
  *((_DWORD *)this + 28) |= 2u;
  uint64_t v7 = (CoreNavigation::CLP::LogEntry::PrivateData::SyncState *)*((void *)this + 2);
  if (!v7) {
    operator new();
  }
  uint64_t v8 = (const CoreNavigation::CLP::LogEntry::PrivateData::SyncState *)*((void *)a2 + 2);
  if (!v8)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);
    uint64_t v8 = *(const CoreNavigation::CLP::LogEntry::PrivateData::SyncState **)(CoreNavigation::CLP::LogEntry::PrivateData::Measurement::default_instance_
                                                                         + 16);
  }
  CoreNavigation::CLP::LogEntry::PrivateData::SyncState::MergeFrom(v7, v8);
  int v4 = *((_DWORD *)a2 + 28);
  if ((v4 & 4) == 0)
  {
LABEL_7:
    if ((v4 & 8) == 0) {
      goto LABEL_8;
    }
    goto LABEL_24;
  }
LABEL_23:
  uint64_t v9 = *((void *)a2 + 3);
  *((_DWORD *)this + 28) |= 4u;
  *((void *)this + 3) = v9;
  int v4 = *((_DWORD *)a2 + 28);
  if ((v4 & 8) == 0)
  {
LABEL_8:
    if ((v4 & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_25;
  }
LABEL_24:
  uint64_t v10 = *((void *)a2 + 4);
  *((_DWORD *)this + 28) |= 8u;
  *((void *)this + 4) = v10;
  int v4 = *((_DWORD *)a2 + 28);
  if ((v4 & 0x10) == 0)
  {
LABEL_9:
    if ((v4 & 0x20) == 0) {
      goto LABEL_10;
    }
LABEL_26:
    *((_DWORD *)this + 28) |= 0x20u;
    uint64_t v12 = (CoreNavigation::CLP::LogEntry::PrivateData::SvTime *)*((void *)this + 6);
    if (!v12) {
      operator new();
    }
    int v13 = (const CoreNavigation::CLP::LogEntry::PrivateData::SvTime *)*((void *)a2 + 6);
    if (!v13)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);
      int v13 = *(const CoreNavigation::CLP::LogEntry::PrivateData::SvTime **)(CoreNavigation::CLP::LogEntry::PrivateData::Measurement::default_instance_
                                                                         + 48);
    }
    CoreNavigation::CLP::LogEntry::PrivateData::SvTime::MergeFrom(v12, v13);
    int v4 = *((_DWORD *)a2 + 28);
    if ((v4 & 0x40) == 0)
    {
LABEL_11:
      if ((v4 & 0x80) == 0) {
        goto LABEL_41;
      }
      goto LABEL_36;
    }
    goto LABEL_31;
  }
LABEL_25:
  uint64_t v11 = *((void *)a2 + 5);
  *((_DWORD *)this + 28) |= 0x10u;
  *((void *)this + 5) = v11;
  int v4 = *((_DWORD *)a2 + 28);
  if ((v4 & 0x20) != 0) {
    goto LABEL_26;
  }
LABEL_10:
  if ((v4 & 0x40) == 0) {
    goto LABEL_11;
  }
LABEL_31:
  *((_DWORD *)this + 28) |= 0x40u;
  int v14 = (CoreNavigation::CLP::LogEntry::PrivateData::FrequencyOffset *)*((void *)this + 7);
  if (!v14) {
    operator new();
  }
  uint64_t v15 = (const CoreNavigation::CLP::LogEntry::PrivateData::FrequencyOffset *)*((void *)a2 + 7);
  if (!v15)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);
    uint64_t v15 = *(const CoreNavigation::CLP::LogEntry::PrivateData::FrequencyOffset **)(CoreNavigation::CLP::LogEntry::PrivateData::Measurement::default_instance_
                                                                                + 56);
  }
  CoreNavigation::CLP::LogEntry::PrivateData::FrequencyOffset::MergeFrom(v14, v15);
  int v4 = *((_DWORD *)a2 + 28);
  if ((v4 & 0x80) != 0)
  {
LABEL_36:
    *((_DWORD *)this + 28) |= 0x80u;
    int v16 = (CoreNavigation::CLP::LogEntry::PrivateData::PhaseTracking *)*((void *)this + 8);
    if (!v16) {
      operator new();
    }
    int v17 = (const CoreNavigation::CLP::LogEntry::PrivateData::PhaseTracking *)*((void *)a2 + 8);
    if (!v17)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);
      int v17 = *(const CoreNavigation::CLP::LogEntry::PrivateData::PhaseTracking **)(CoreNavigation::CLP::LogEntry::PrivateData::Measurement::default_instance_
                                                                                + 64);
    }
    CoreNavigation::CLP::LogEntry::PrivateData::PhaseTracking::MergeFrom(v16, v17);
    int v4 = *((_DWORD *)a2 + 28);
  }
LABEL_41:
  if ((v4 & 0xFF00) == 0) {
    return;
  }
  if ((v4 & 0x100) != 0)
  {
    *((_DWORD *)this + 28) |= 0x100u;
    int v18 = (CoreNavigation::CLP::LogEntry::PrivateData::MeasurementExtension *)*((void *)this + 9);
    if (!v18) {
      operator new();
    }
    int v19 = (const CoreNavigation::CLP::LogEntry::PrivateData::MeasurementExtension *)*((void *)a2 + 9);
    if (!v19)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);
      int v19 = *(const CoreNavigation::CLP::LogEntry::PrivateData::MeasurementExtension **)(CoreNavigation::CLP::LogEntry::PrivateData::Measurement::default_instance_
                                                                                       + 72);
    }
    CoreNavigation::CLP::LogEntry::PrivateData::MeasurementExtension::MergeFrom(v18, v19);
    int v4 = *((_DWORD *)a2 + 28);
    if ((v4 & 0x200) == 0)
    {
LABEL_44:
      if ((v4 & 0x400) == 0) {
        goto LABEL_45;
      }
      goto LABEL_55;
    }
  }
  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_44;
  }
  int v20 = *((_DWORD *)a2 + 20);
  *((_DWORD *)this + 28) |= 0x200u;
  *((_DWORD *)this + 20) = v20;
  int v4 = *((_DWORD *)a2 + 28);
  if ((v4 & 0x400) == 0)
  {
LABEL_45:
    if ((v4 & 0x800) == 0) {
      goto LABEL_46;
    }
    goto LABEL_57;
  }
LABEL_55:
  unsigned int v21 = *((_DWORD *)a2 + 21);
  if (v21 >= 5) {
    __assert_rtn("set_multipath_indicator", "CoreNavigationCLPGnssMeasApi.pb.h", 9803, "::CoreNavigation::CLP::LogEntry::PrivateData::MultipathIndicator_IsValid(value)");
  }
  *((_DWORD *)this + 28) |= 0x400u;
  *((_DWORD *)this + 21) = v21;
  int v4 = *((_DWORD *)a2 + 28);
  if ((v4 & 0x800) == 0)
  {
LABEL_46:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_47;
    }
LABEL_62:
    char v24 = *((unsigned char *)a2 + 104);
    *((_DWORD *)this + 28) |= 0x1000u;
    *((unsigned char *)this + 104) = v24;
    if ((*((_DWORD *)a2 + 28) & 0x2000) == 0) {
      return;
    }
    goto LABEL_63;
  }
LABEL_57:
  *((_DWORD *)this + 28) |= 0x800u;
  int v22 = (CoreNavigation::CLP::LogEntry::PrivateData::FrequencyOffset *)*((void *)this + 11);
  if (!v22) {
    operator new();
  }
  unint64_t v23 = (const CoreNavigation::CLP::LogEntry::PrivateData::FrequencyOffset *)*((void *)a2 + 11);
  if (!v23)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);
    unint64_t v23 = *(const CoreNavigation::CLP::LogEntry::PrivateData::FrequencyOffset **)(CoreNavigation::CLP::LogEntry::PrivateData::Measurement::default_instance_
                                                                                + 88);
  }
  CoreNavigation::CLP::LogEntry::PrivateData::FrequencyOffset::MergeFrom(v22, v23);
  int v4 = *((_DWORD *)a2 + 28);
  if ((v4 & 0x1000) != 0) {
    goto LABEL_62;
  }
LABEL_47:
  if ((v4 & 0x2000) == 0) {
    return;
  }
LABEL_63:
  *((_DWORD *)this + 28) |= 0x2000u;
  int v25 = (CoreNavigation::CLP::LogEntry::PrivateData::FrequencyOffsetFromPhaseTracking *)*((void *)this + 12);
  if (!v25) {
    operator new();
  }
  int v26 = (const CoreNavigation::CLP::LogEntry::PrivateData::FrequencyOffsetFromPhaseTracking *)*((void *)a2 + 12);
  if (!v26)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);
    int v26 = *(const CoreNavigation::CLP::LogEntry::PrivateData::FrequencyOffsetFromPhaseTracking **)(CoreNavigation::CLP::LogEntry::PrivateData::Measurement::default_instance_
                                                                                                 + 96);
  }
  CoreNavigation::CLP::LogEntry::PrivateData::FrequencyOffsetFromPhaseTracking::MergeFrom(v25, v26);
}

void sub_18DFC9730(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CoreNavigation::CLP::LogEntry::PrivateData::Measurement::~Measurement(CoreNavigation::CLP::LogEntry::PrivateData::Measurement *this)
{
  *(void *)this = &unk_1EDD0B6F0;
  CoreNavigation::CLP::LogEntry::PrivateData::Measurement::SharedDtor(this);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  uint64_t vars8;

  CoreNavigation::CLP::LogEntry::PrivateData::Measurement::~Measurement(this);

  JUMPOUT(0x192FA6240);
}

void CoreNavigation::CLP::LogEntry::PrivateData::Measurement::SharedDtor(CoreNavigation::CLP::LogEntry::PrivateData::Measurement *this)
{
  CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);
  if ((CoreNavigation::CLP::LogEntry::PrivateData::Measurement *)CoreNavigation::CLP::LogEntry::PrivateData::Measurement::default_instance_ != this)
  {
    uint64_t v2 = *((void *)this + 1);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
    uint64_t v3 = *((void *)this + 2);
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
    uint64_t v4 = *((void *)this + 6);
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
    uint64_t v5 = *((void *)this + 7);
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    }
    uint64_t v6 = *((void *)this + 8);
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
    uint64_t v7 = *((void *)this + 9);
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    }
    uint64_t v8 = *((void *)this + 11);
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    }
    uint64_t v9 = *((void *)this + 12);
    if (v9)
    {
      uint64_t v10 = *(void (**)(void))(*(void *)v9 + 8);
      v10();
    }
  }
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::Measurement::default_instance(CoreNavigation::CLP::LogEntry::PrivateData::Measurement *this)
{
  return CoreNavigation::CLP::LogEntry::PrivateData::Measurement::default_instance_;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::Measurement::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 108) = a2;
  return this;
}

void CoreNavigation::CLP::LogEntry::PrivateData::Measurement::New(CoreNavigation::CLP::LogEntry::PrivateData::Measurement *this)
{
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::Measurement::Clear(uint64_t this)
{
  uint64_t v1 = this;
  int v2 = *(_DWORD *)(this + 112);
  if ((_BYTE)v2)
  {
    if (v2)
    {
      this = *(void *)(this + 8);
      if (this)
      {
        this = CoreNavigation::CLP::LogEntry::PrivateData::SvId::Clear(this);
        int v2 = *(_DWORD *)(v1 + 112);
      }
    }
    if ((v2 & 2) != 0)
    {
      this = *(void *)(v1 + 16);
      if (this)
      {
        this = CoreNavigation::CLP::LogEntry::PrivateData::SyncState::Clear(this);
        int v2 = *(_DWORD *)(v1 + 112);
      }
    }
    *(void *)(v1 + 24) = 0;
    *(void *)(v1 + 32) = 0;
    *(void *)(v1 + 40) = 0;
    if ((v2 & 0x20) != 0)
    {
      uint64_t v3 = *(void *)(v1 + 48);
      if (v3)
      {
        if (*(unsigned char *)(v3 + 32))
        {
          *(void *)(v3 + 8) = 0;
          *(void *)(v3 + 16) = 0;
          *(unsigned char *)(v3 + 24) = 0;
        }
        *(_DWORD *)(v3 + 32) = 0;
        int v2 = *(_DWORD *)(v1 + 112);
      }
    }
    if ((v2 & 0x40) != 0)
    {
      uint64_t v4 = *(void *)(v1 + 56);
      if (v4)
      {
        if (*(unsigned char *)(v4 + 32))
        {
          *(void *)(v4 + 8) = 0;
          *(void *)(v4 + 16) = 0;
          *(unsigned char *)(v4 + 24) = 0;
        }
        *(_DWORD *)(v4 + 32) = 0;
        int v2 = *(_DWORD *)(v1 + 112);
      }
    }
    if ((v2 & 0x80) != 0)
    {
      uint64_t v5 = *(void *)(v1 + 64);
      if (v5)
      {
        if (*(unsigned char *)(v5 + 48))
        {
          *(unsigned char *)(v5 + 40) = 0;
          *(_OWORD *)(v5 + 24) = 0u;
          *(_OWORD *)(v5 + 8) = 0u;
        }
        *(_DWORD *)(v5 + 48) = 0;
        int v2 = *(_DWORD *)(v1 + 112);
      }
    }
  }
  if ((v2 & 0xFF00) != 0)
  {
    if ((v2 & 0x100) != 0)
    {
      this = *(void *)(v1 + 72);
      if (this)
      {
        this = CoreNavigation::CLP::LogEntry::PrivateData::MeasurementExtension::Clear(this);
        int v2 = *(_DWORD *)(v1 + 112);
      }
    }
    *(void *)(v1 + 80) = 0;
    if ((v2 & 0x800) != 0)
    {
      uint64_t v6 = *(void *)(v1 + 88);
      if (v6)
      {
        if (*(unsigned char *)(v6 + 32))
        {
          *(void *)(v6 + 8) = 0;
          *(void *)(v6 + 16) = 0;
          *(unsigned char *)(v6 + 24) = 0;
        }
        *(_DWORD *)(v6 + 32) = 0;
        int v2 = *(_DWORD *)(v1 + 112);
      }
    }
    *(unsigned char *)(v1 + 104) = 0;
    if ((v2 & 0x2000) != 0)
    {
      uint64_t v7 = *(void *)(v1 + 96);
      if (v7)
      {
        if (*(unsigned char *)(v7 + 32))
        {
          *(void *)(v7 + 8) = 0;
          *(void *)(v7 + 16) = 0;
          *(_WORD *)(v7 + 24) = 0;
        }
        *(_DWORD *)(v7 + 32) = 0;
      }
    }
  }
  *(_DWORD *)(v1 + 112) = 0;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::Measurement::MergePartialFromCodedStream(CoreNavigation::CLP::LogEntry::PrivateData::Measurement *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  uint64_t v4 = (unint64_t *)((char *)this + 24);
  uint64_t v5 = (unint64_t *)((char *)this + 32);
  uint64_t v6 = (unint64_t *)((char *)this + 40);
  while (1)
  {
    uint64_t v7 = (char *)*((void *)a2 + 1);
    if ((unint64_t)v7 < *((void *)a2 + 2) && (*v7 & 0x80000000) == 0)
    {
      unint64_t TagFallback = *v7;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((void *)a2 + 1) = v7 + 1;
      if (!TagFallback) {
        return 1;
      }
      goto LABEL_7;
    }
    unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
    *((_DWORD *)a2 + 8) = TagFallback;
    if (!TagFallback) {
      return 1;
    }
LABEL_7:
    switch(TagFallback >> 3)
    {
      case 1u:
        int v9 = TagFallback & 7;
        if (v9 != 2) {
          goto LABEL_41;
        }
        *((_DWORD *)this + 28) |= 1u;
        uint64_t v10 = (CoreNavigation::CLP::LogEntry::PrivateData::SvId *)*((void *)this + 1);
        if (!v10) {
          operator new();
        }
        unsigned int v85 = 0;
        uint64_t v11 = (char *)*((void *)a2 + 1);
        if ((unint64_t)v11 >= *((void *)a2 + 2) || *v11 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v85))return 0; {
        }
          }
        else
        {
          unsigned int v85 = *v11;
          *((void *)a2 + 1) = v11 + 1;
        }
        int v22 = *((_DWORD *)a2 + 14);
        int v23 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v22 + 1;
        if (v22 >= v23) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CoreNavigation::CLP::LogEntry::PrivateData::SvId::MergePartialFromCodedStream(v10, a2)
          || !*((unsigned char *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        int v24 = *((_DWORD *)a2 + 14);
        BOOL v25 = __OFSUB__(v24, 1);
        int v26 = v24 - 1;
        if (v26 < 0 == v25) {
          *((_DWORD *)a2 + 14) = v26;
        }
        int v27 = (unsigned char *)*((void *)a2 + 1);
        if ((unint64_t)v27 >= *((void *)a2 + 2) || *v27 != 18) {
          continue;
        }
        *((void *)a2 + 1) = v27 + 1;
        goto LABEL_53;
      case 2u:
        int v9 = TagFallback & 7;
        if (v9 != 2) {
          goto LABEL_41;
        }
LABEL_53:
        *((_DWORD *)this + 28) |= 2u;
        int v28 = (CoreNavigation::CLP::LogEntry::PrivateData::SyncState *)*((void *)this + 2);
        if (!v28) {
          operator new();
        }
        unsigned int v85 = 0;
        int v29 = (char *)*((void *)a2 + 1);
        if ((unint64_t)v29 >= *((void *)a2 + 2) || *v29 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v85))return 0; {
        }
          }
        else
        {
          unsigned int v85 = *v29;
          *((void *)a2 + 1) = v29 + 1;
        }
        int v30 = *((_DWORD *)a2 + 14);
        int v31 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v30 + 1;
        if (v30 >= v31) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CoreNavigation::CLP::LogEntry::PrivateData::SyncState::MergePartialFromCodedStream(v28, a2)
          || !*((unsigned char *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        int v32 = *((_DWORD *)a2 + 14);
        BOOL v25 = __OFSUB__(v32, 1);
        int v33 = v32 - 1;
        if (v33 < 0 == v25) {
          *((_DWORD *)a2 + 14) = v33;
        }
        unint64_t v34 = (unsigned char *)*((void *)a2 + 1);
        unint64_t v12 = *((void *)a2 + 2);
        if ((unint64_t)v34 >= v12 || *v34 != 24) {
          continue;
        }
        int v13 = v34 + 1;
        *((void *)a2 + 1) = v13;
LABEL_67:
        if ((unint64_t)v13 >= v12 || *v13 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v4);
          if (!result) {
            return result;
          }
          int v35 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v12 = *((void *)a2 + 2);
        }
        else
        {
          unint64_t *v4 = *v13;
          int v35 = v13 + 1;
          *((void *)a2 + 1) = v35;
        }
        *((_DWORD *)this + 28) |= 4u;
        if ((unint64_t)v35 >= v12 || *v35 != 32) {
          continue;
        }
        int v14 = v35 + 1;
        *((void *)a2 + 1) = v14;
LABEL_75:
        if ((unint64_t)v14 >= v12 || *v14 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v5);
          if (!result) {
            return result;
          }
          int v37 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v12 = *((void *)a2 + 2);
        }
        else
        {
          unint64_t *v5 = *v14;
          int v37 = v14 + 1;
          *((void *)a2 + 1) = v37;
        }
        *((_DWORD *)this + 28) |= 8u;
        if ((unint64_t)v37 >= v12 || *v37 != 40) {
          continue;
        }
        uint64_t v15 = v37 + 1;
        *((void *)a2 + 1) = v15;
LABEL_83:
        if ((unint64_t)v15 >= v12 || *v15 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v6);
          if (!result) {
            return result;
          }
          int v38 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v12 = *((void *)a2 + 2);
        }
        else
        {
          *uint64_t v6 = *v15;
          int v38 = v15 + 1;
          *((void *)a2 + 1) = v38;
        }
        int v16 = *((_DWORD *)this + 28) | 0x10;
        *((_DWORD *)this + 28) = v16;
        if ((unint64_t)v38 >= v12 || *v38 != 50) {
          continue;
        }
        *((void *)a2 + 1) = v38 + 1;
LABEL_91:
        *((_DWORD *)this + 28) = v16 | 0x20;
        uint64_t v39 = (CoreNavigation::CLP::LogEntry::PrivateData::SvTime *)*((void *)this + 6);
        if (!v39) {
          operator new();
        }
        unsigned int v85 = 0;
        uint64_t v40 = (char *)*((void *)a2 + 1);
        if ((unint64_t)v40 >= *((void *)a2 + 2) || *v40 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v85))return 0; {
        }
          }
        else
        {
          unsigned int v85 = *v40;
          *((void *)a2 + 1) = v40 + 1;
        }
        int v41 = *((_DWORD *)a2 + 14);
        int v42 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v41 + 1;
        if (v41 >= v42) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CoreNavigation::CLP::LogEntry::PrivateData::SvTime::MergePartialFromCodedStream(v39, a2)
          || !*((unsigned char *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        int v43 = *((_DWORD *)a2 + 14);
        BOOL v25 = __OFSUB__(v43, 1);
        int v44 = v43 - 1;
        if (v44 < 0 == v25) {
          *((_DWORD *)a2 + 14) = v44;
        }
        int v45 = (unsigned char *)*((void *)a2 + 1);
        if ((unint64_t)v45 >= *((void *)a2 + 2) || *v45 != 58) {
          continue;
        }
        *((void *)a2 + 1) = v45 + 1;
LABEL_105:
        *((_DWORD *)this + 28) |= 0x40u;
        int v46 = (CoreNavigation::CLP::LogEntry::PrivateData::FrequencyOffset *)*((void *)this + 7);
        if (!v46) {
          operator new();
        }
        unsigned int v85 = 0;
        int v47 = (char *)*((void *)a2 + 1);
        if ((unint64_t)v47 >= *((void *)a2 + 2) || *v47 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v85))return 0; {
        }
          }
        else
        {
          unsigned int v85 = *v47;
          *((void *)a2 + 1) = v47 + 1;
        }
        int v48 = *((_DWORD *)a2 + 14);
        int v49 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v48 + 1;
        if (v48 >= v49) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CoreNavigation::CLP::LogEntry::PrivateData::FrequencyOffset::MergePartialFromCodedStream(v46, a2)|| !*((unsigned char *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        int v50 = *((_DWORD *)a2 + 14);
        BOOL v25 = __OFSUB__(v50, 1);
        int v51 = v50 - 1;
        if (v51 < 0 == v25) {
          *((_DWORD *)a2 + 14) = v51;
        }
        int v52 = (unsigned char *)*((void *)a2 + 1);
        if ((unint64_t)v52 >= *((void *)a2 + 2) || *v52 != 66) {
          continue;
        }
        *((void *)a2 + 1) = v52 + 1;
LABEL_119:
        *((_DWORD *)this + 28) |= 0x80u;
        int v53 = (CoreNavigation::CLP::LogEntry::PrivateData::PhaseTracking *)*((void *)this + 8);
        if (!v53) {
          operator new();
        }
        unsigned int v85 = 0;
        int v54 = (char *)*((void *)a2 + 1);
        if ((unint64_t)v54 >= *((void *)a2 + 2) || *v54 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v85))return 0; {
        }
          }
        else
        {
          unsigned int v85 = *v54;
          *((void *)a2 + 1) = v54 + 1;
        }
        int v55 = *((_DWORD *)a2 + 14);
        int v56 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v55 + 1;
        if (v55 >= v56) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CoreNavigation::CLP::LogEntry::PrivateData::PhaseTracking::MergePartialFromCodedStream(v53, a2)|| !*((unsigned char *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        int v57 = *((_DWORD *)a2 + 14);
        BOOL v25 = __OFSUB__(v57, 1);
        int v58 = v57 - 1;
        if (v58 < 0 == v25) {
          *((_DWORD *)a2 + 14) = v58;
        }
        int v59 = (unsigned char *)*((void *)a2 + 1);
        if ((unint64_t)v59 >= *((void *)a2 + 2) || *v59 != 74) {
          continue;
        }
        *((void *)a2 + 1) = v59 + 1;
LABEL_133:
        *((_DWORD *)this + 28) |= 0x100u;
        unsigned int v60 = (CoreNavigation::CLP::LogEntry::PrivateData::MeasurementExtension *)*((void *)this + 9);
        if (!v60) {
          operator new();
        }
        unsigned int v85 = 0;
        v61 = (char *)*((void *)a2 + 1);
        if ((unint64_t)v61 >= *((void *)a2 + 2) || *v61 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v85))return 0; {
        }
          }
        else
        {
          unsigned int v85 = *v61;
          *((void *)a2 + 1) = v61 + 1;
        }
        int v62 = *((_DWORD *)a2 + 14);
        int v63 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v62 + 1;
        if (v62 >= v63) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CoreNavigation::CLP::LogEntry::PrivateData::MeasurementExtension::MergePartialFromCodedStream(v60, a2)|| !*((unsigned char *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        int v64 = *((_DWORD *)a2 + 14);
        BOOL v25 = __OFSUB__(v64, 1);
        int v65 = v64 - 1;
        if (v65 < 0 == v25) {
          *((_DWORD *)a2 + 14) = v65;
        }
        int v66 = (unsigned char *)*((void *)a2 + 1);
        if ((unint64_t)v66 >= *((void *)a2 + 2) || *v66 != 85) {
          continue;
        }
        *((void *)a2 + 1) = v66 + 1;
LABEL_147:
        unsigned int v85 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(a2, &v85) & 1) == 0) {
          return 0;
        }
        *((_DWORD *)this + 20) = v85;
        *((_DWORD *)this + 28) |= 0x200u;
        int v67 = (unsigned char *)*((void *)a2 + 1);
        unint64_t v17 = *((void *)a2 + 2);
        if ((unint64_t)v67 >= v17 || *v67 != 88) {
          continue;
        }
        int v18 = v67 + 1;
        *((void *)a2 + 1) = v18;
LABEL_151:
        unsigned int v85 = 0;
        if ((unint64_t)v18 >= v17 || *v18 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v85);
          if (!result) {
            return result;
          }
          unsigned int v68 = v85;
        }
        else
        {
          unsigned int v68 = *v18;
          *((void *)a2 + 1) = v18 + 1;
        }
        if (v68 <= 4)
        {
          *((_DWORD *)this + 28) |= 0x400u;
          *((_DWORD *)this + 21) = v68;
        }
        uint64_t v69 = (unsigned char *)*((void *)a2 + 1);
        if ((unint64_t)v69 >= *((void *)a2 + 2) || *v69 != 98) {
          continue;
        }
        *((void *)a2 + 1) = v69 + 1;
LABEL_161:
        *((_DWORD *)this + 28) |= 0x800u;
        uint64_t v70 = (CoreNavigation::CLP::LogEntry::PrivateData::FrequencyOffset *)*((void *)this + 11);
        if (!v70) {
          operator new();
        }
        unsigned int v85 = 0;
        int v71 = (char *)*((void *)a2 + 1);
        if ((unint64_t)v71 >= *((void *)a2 + 2) || *v71 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v85))return 0; {
        }
          }
        else
        {
          unsigned int v85 = *v71;
          *((void *)a2 + 1) = v71 + 1;
        }
        int v72 = *((_DWORD *)a2 + 14);
        int v73 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v72 + 1;
        if (v72 >= v73) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CoreNavigation::CLP::LogEntry::PrivateData::FrequencyOffset::MergePartialFromCodedStream(v70, a2)|| !*((unsigned char *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        int v74 = *((_DWORD *)a2 + 14);
        BOOL v25 = __OFSUB__(v74, 1);
        int v75 = v74 - 1;
        if (v75 < 0 == v25) {
          *((_DWORD *)a2 + 14) = v75;
        }
        int v76 = (unsigned char *)*((void *)a2 + 1);
        unint64_t v19 = *((void *)a2 + 2);
        if ((unint64_t)v76 >= v19 || *v76 != 104) {
          continue;
        }
        int v20 = v76 + 1;
        *((void *)a2 + 1) = v20;
LABEL_175:
        unsigned int v85 = 0;
        if ((unint64_t)v20 >= v19 || *v20 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v85);
          if (!result) {
            return result;
          }
          unsigned int v77 = v85;
          unsigned int v78 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v19 = *((void *)a2 + 2);
        }
        else
        {
          unsigned int v77 = *v20;
          unsigned int v78 = v20 + 1;
          *((void *)a2 + 1) = v78;
        }
        *((unsigned char *)this + 104) = v77 != 0;
        int v21 = *((_DWORD *)this + 28) | 0x1000;
        *((_DWORD *)this + 28) = v21;
        if ((unint64_t)v78 >= v19 || *v78 != 114) {
          continue;
        }
        *((void *)a2 + 1) = v78 + 1;
LABEL_183:
        *((_DWORD *)this + 28) = v21 | 0x2000;
        int v79 = (CoreNavigation::CLP::LogEntry::PrivateData::FrequencyOffsetFromPhaseTracking *)*((void *)this + 12);
        if (!v79) {
          operator new();
        }
        unsigned int v85 = 0;
        int v80 = (char *)*((void *)a2 + 1);
        if ((unint64_t)v80 >= *((void *)a2 + 2) || *v80 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v85))return 0; {
        }
          }
        else
        {
          unsigned int v85 = *v80;
          *((void *)a2 + 1) = v80 + 1;
        }
        int v81 = *((_DWORD *)a2 + 14);
        int v82 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v81 + 1;
        if (v81 >= v82) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CoreNavigation::CLP::LogEntry::PrivateData::FrequencyOffsetFromPhaseTracking::MergePartialFromCodedStream(v79, a2)|| !*((unsigned char *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        int v83 = *((_DWORD *)a2 + 14);
        BOOL v25 = __OFSUB__(v83, 1);
        int v84 = v83 - 1;
        if (v84 < 0 == v25) {
          *((_DWORD *)a2 + 14) = v84;
        }
        if (*((void *)a2 + 1) == *((void *)a2 + 2)
          && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
        {
          *((_DWORD *)a2 + 8) = 0;
          uint64_t result = 1;
          *((unsigned char *)a2 + 36) = 1;
          return result;
        }
        break;
      case 3u:
        int v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_41;
        }
        int v13 = (char *)*((void *)a2 + 1);
        unint64_t v12 = *((void *)a2 + 2);
        goto LABEL_67;
      case 4u:
        int v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_41;
        }
        int v14 = (char *)*((void *)a2 + 1);
        unint64_t v12 = *((void *)a2 + 2);
        goto LABEL_75;
      case 5u:
        int v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_41;
        }
        uint64_t v15 = (char *)*((void *)a2 + 1);
        unint64_t v12 = *((void *)a2 + 2);
        goto LABEL_83;
      case 6u:
        int v9 = TagFallback & 7;
        if (v9 != 2) {
          goto LABEL_41;
        }
        int v16 = *((_DWORD *)this + 28);
        goto LABEL_91;
      case 7u:
        int v9 = TagFallback & 7;
        if (v9 == 2) {
          goto LABEL_105;
        }
        goto LABEL_41;
      case 8u:
        int v9 = TagFallback & 7;
        if (v9 == 2) {
          goto LABEL_119;
        }
        goto LABEL_41;
      case 9u:
        int v9 = TagFallback & 7;
        if (v9 == 2) {
          goto LABEL_133;
        }
        goto LABEL_41;
      case 0xAu:
        int v9 = TagFallback & 7;
        if (v9 == 5) {
          goto LABEL_147;
        }
        goto LABEL_41;
      case 0xBu:
        int v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_41;
        }
        int v18 = (char *)*((void *)a2 + 1);
        unint64_t v17 = *((void *)a2 + 2);
        goto LABEL_151;
      case 0xCu:
        int v9 = TagFallback & 7;
        if (v9 == 2) {
          goto LABEL_161;
        }
        goto LABEL_41;
      case 0xDu:
        int v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_41;
        }
        int v20 = (char *)*((void *)a2 + 1);
        unint64_t v19 = *((void *)a2 + 2);
        goto LABEL_175;
      case 0xEu:
        int v9 = TagFallback & 7;
        if (v9 != 2) {
          goto LABEL_41;
        }
        int v21 = *((_DWORD *)this + 28);
        goto LABEL_183;
      default:
        int v9 = TagFallback & 7;
LABEL_41:
        if (v9 == 4) {
          return 1;
        }
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0; {
        continue;
        }
    }
  }
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::Measurement::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  int v6 = *(_DWORD *)(this + 112);
  if (v6)
  {
    uint64_t v7 = *(void *)(this + 8);
    if (!v7)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)this);
      uint64_t v7 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::Measurement::default_instance_ + 8);
    }
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v7, a2, a4);
    int v6 = *(_DWORD *)(v5 + 112);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_22;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t v8 = *(void *)(v5 + 16);
  if (!v8)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)this);
    uint64_t v8 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::Measurement::default_instance_ + 16);
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v8, a2, a4);
  int v6 = *(_DWORD *)(v5 + 112);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_23;
  }
LABEL_22:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(void *)(v5 + 24), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 112);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_24;
  }
LABEL_23:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(void *)(v5 + 32), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 112);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_25;
  }
LABEL_24:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(void *)(v5 + 40), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 112);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_28;
  }
LABEL_25:
  uint64_t v9 = *(void *)(v5 + 48);
  if (!v9)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)this);
    uint64_t v9 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::Measurement::default_instance_ + 48);
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, v9, a2, a4);
  int v6 = *(_DWORD *)(v5 + 112);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_31;
  }
LABEL_28:
  uint64_t v10 = *(void *)(v5 + 56);
  if (!v10)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)this);
    uint64_t v10 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::Measurement::default_instance_ + 56);
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, v10, a2, a4);
  int v6 = *(_DWORD *)(v5 + 112);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_34;
  }
LABEL_31:
  uint64_t v11 = *(void *)(v5 + 64);
  if (!v11)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)this);
    uint64_t v11 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::Measurement::default_instance_ + 64);
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, v11, a2, a4);
  int v6 = *(_DWORD *)(v5 + 112);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_37;
  }
LABEL_34:
  uint64_t v12 = *(void *)(v5 + 72);
  if (!v12)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)this);
    uint64_t v12 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::Measurement::default_instance_ + 72);
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9, v12, a2, a4);
  int v6 = *(_DWORD *)(v5 + 112);
  if ((v6 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_38;
  }
LABEL_37:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA, (uint64_t)a2, *(float *)(v5 + 80), a3);
  int v6 = *(_DWORD *)(v5 + 112);
  if ((v6 & 0x400) == 0)
  {
LABEL_12:
    if ((v6 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_39;
  }
LABEL_38:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB, *(unsigned int *)(v5 + 84), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 112);
  if ((v6 & 0x800) == 0)
  {
LABEL_13:
    if ((v6 & 0x1000) == 0) {
      goto LABEL_14;
    }
LABEL_42:
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xD, *(unsigned __int8 *)(v5 + 104), (uint64_t)a2, a4);
    if ((*(_DWORD *)(v5 + 112) & 0x2000) == 0) {
      return this;
    }
    goto LABEL_43;
  }
LABEL_39:
  uint64_t v13 = *(void *)(v5 + 88);
  if (!v13)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)this);
    uint64_t v13 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::Measurement::default_instance_ + 88);
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xC, v13, a2, a4);
  int v6 = *(_DWORD *)(v5 + 112);
  if ((v6 & 0x1000) != 0) {
    goto LABEL_42;
  }
LABEL_14:
  if ((v6 & 0x2000) == 0) {
    return this;
  }
LABEL_43:
  uint64_t v14 = *(void *)(v5 + 96);
  if (!v14)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)this);
    uint64_t v14 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::Measurement::default_instance_ + 96);
  }

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xE, v14, a2, a4);
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::Measurement::ByteSize(uint64_t this)
{
  uint64_t v1 = this;
  int v2 = *(_DWORD *)(this + 112);
  if (!(_BYTE)v2)
  {
    uint64_t v3 = 0;
    goto LABEL_52;
  }
  if ((v2 & 1) == 0)
  {
    uint64_t v3 = 0;
    if ((v2 & 2) == 0) {
      goto LABEL_18;
    }
    goto LABEL_12;
  }
  uint64_t v4 = *(CoreNavigation::CLP::LogEntry::PrivateData::SvId **)(this + 8);
  if (!v4)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(0);
    uint64_t v4 = *(CoreNavigation::CLP::LogEntry::PrivateData::SvId **)(CoreNavigation::CLP::LogEntry::PrivateData::Measurement::default_instance_
                                                              + 8);
  }
  uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CoreNavigation::CLP::LogEntry::PrivateData::SvId::ByteSize(v4);
  int v6 = (int)v5;
  if (v5 >= 0x80) {
    this = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5);
  }
  else {
    this = 1;
  }
  uint64_t v3 = (v6 + this + 1);
  int v2 = *(_DWORD *)(v1 + 112);
  if ((v2 & 2) != 0)
  {
LABEL_12:
    uint64_t v7 = *(void *)(v1 + 16);
    if (!v7)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(0);
      uint64_t v7 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::Measurement::default_instance_ + 16);
    }
    uint64_t v8 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CoreNavigation::CLP::LogEntry::PrivateData::SyncState::ByteSize(v7);
    int v9 = (int)v8;
    if (v8 >= 0x80) {
      this = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v8);
    }
    else {
      this = 1;
    }
    uint64_t v3 = (v3 + v9 + this + 1);
    int v2 = *(_DWORD *)(v1 + 112);
  }
LABEL_18:
  if ((v2 & 4) != 0)
  {
    this = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(v1 + 24));
    uint64_t v3 = (v3 + this + 1);
    int v2 = *(_DWORD *)(v1 + 112);
    if ((v2 & 8) == 0)
    {
LABEL_20:
      if ((v2 & 0x10) == 0) {
        goto LABEL_21;
      }
      goto LABEL_27;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_20;
  }
  this = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(v1 + 32));
  uint64_t v3 = (v3 + this + 1);
  int v2 = *(_DWORD *)(v1 + 112);
  if ((v2 & 0x10) == 0)
  {
LABEL_21:
    if ((v2 & 0x20) == 0) {
      goto LABEL_22;
    }
    goto LABEL_28;
  }
LABEL_27:
  this = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(v1 + 40));
  uint64_t v3 = (v3 + this + 1);
  int v2 = *(_DWORD *)(v1 + 112);
  if ((v2 & 0x20) == 0)
  {
LABEL_22:
    if ((v2 & 0x40) == 0) {
      goto LABEL_23;
    }
    goto LABEL_37;
  }
LABEL_28:
  uint64_t v10 = *(void *)(v1 + 48);
  if (!v10)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)this);
    uint64_t v10 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::Measurement::default_instance_ + 48);
  }
  int v11 = *(unsigned __int8 *)(v10 + 32);
  if (*(unsigned char *)(v10 + 32))
  {
    int v12 = (v11 << 31 >> 31) & 9;
    if ((v11 & 2) != 0) {
      v12 += 9;
    }
    if ((v11 & 4) != 0) {
      int v11 = v12 + 2;
    }
    else {
      int v11 = v12;
    }
  }
  *(_DWORD *)(v10 + 28) = v11;
  uint64_t v3 = (v3 + v11 + 2);
  int v2 = *(_DWORD *)(v1 + 112);
  if ((v2 & 0x40) == 0)
  {
LABEL_23:
    if ((v2 & 0x80) == 0) {
      goto LABEL_52;
    }
    goto LABEL_46;
  }
LABEL_37:
  uint64_t v13 = *(void *)(v1 + 56);
  if (!v13)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)this);
    uint64_t v13 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::Measurement::default_instance_ + 56);
  }
  int v14 = *(unsigned __int8 *)(v13 + 32);
  if (*(unsigned char *)(v13 + 32))
  {
    int v15 = (v14 << 31 >> 31) & 9;
    if ((v14 & 2) != 0) {
      v15 += 9;
    }
    if ((v14 & 4) != 0) {
      int v14 = v15 + 2;
    }
    else {
      int v14 = v15;
    }
  }
  *(_DWORD *)(v13 + 28) = v14;
  uint64_t v3 = (v3 + v14 + 2);
  int v2 = *(_DWORD *)(v1 + 112);
  if ((v2 & 0x80) != 0)
  {
LABEL_46:
    int v16 = *(CoreNavigation::CLP::LogEntry::PrivateData::PhaseTracking **)(v1 + 64);
    if (!v16)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(0);
      int v16 = *(CoreNavigation::CLP::LogEntry::PrivateData::PhaseTracking **)(CoreNavigation::CLP::LogEntry::PrivateData::Measurement::default_instance_
                                                                          + 64);
    }
    unint64_t v17 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CoreNavigation::CLP::LogEntry::PrivateData::PhaseTracking::ByteSize(v16);
    int v18 = (int)v17;
    if (v17 >= 0x80) {
      this = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v17);
    }
    else {
      this = 1;
    }
    uint64_t v3 = (v3 + v18 + this + 1);
    int v2 = *(_DWORD *)(v1 + 112);
  }
LABEL_52:
  if ((v2 & 0xFF00) != 0)
  {
    if ((v2 & 0x100) != 0)
    {
      uint64_t v19 = *(void *)(v1 + 72);
      if (!v19)
      {
        CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(0);
        uint64_t v19 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::Measurement::default_instance_ + 72);
      }
      int v20 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CoreNavigation::CLP::LogEntry::PrivateData::MeasurementExtension::ByteSize(v19);
      int v21 = (int)v20;
      if (v20 >= 0x80) {
        this = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v20);
      }
      else {
        this = 1;
      }
      LODWORD(v3) = v3 + v21 + this + 1;
      int v2 = *(_DWORD *)(v1 + 112);
    }
    if ((v2 & 0x200) != 0) {
      LODWORD(v3) = v3 + 5;
    }
    if ((v2 & 0x400) != 0)
    {
      this = *(unsigned int *)(v1 + 84);
      if ((this & 0x80000000) != 0)
      {
        int v22 = 11;
      }
      else if (this >= 0x80)
      {
        this = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)this);
        int v22 = this + 1;
        int v2 = *(_DWORD *)(v1 + 112);
      }
      else
      {
        int v22 = 2;
      }
      LODWORD(v3) = v22 + v3;
    }
    if ((v2 & 0x800) != 0)
    {
      uint64_t v23 = *(void *)(v1 + 88);
      if (!v23)
      {
        CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)this);
        uint64_t v23 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::Measurement::default_instance_ + 88);
      }
      int v24 = *(unsigned __int8 *)(v23 + 32);
      int v25 = (v24 << 31 >> 31) & 9;
      if ((v24 & 2) != 0) {
        v25 += 9;
      }
      if ((v24 & 4) != 0) {
        v25 += 2;
      }
      if (*(unsigned char *)(v23 + 32)) {
        int v26 = v25;
      }
      else {
        int v26 = 0;
      }
      *(_DWORD *)(v23 + 28) = v26;
      LODWORD(v3) = v3 + v26 + 2;
      int v2 = *(_DWORD *)(v1 + 112);
    }
    if ((v2 & 0x1000) != 0) {
      uint64_t v3 = (v3 + 2);
    }
    else {
      uint64_t v3 = v3;
    }
    if ((v2 & 0x2000) != 0)
    {
      int v27 = *(CoreNavigation::CLP::LogEntry::PrivateData::FrequencyOffsetFromPhaseTracking **)(v1 + 96);
      if (!v27)
      {
        CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(0);
        int v27 = *(CoreNavigation::CLP::LogEntry::PrivateData::FrequencyOffsetFromPhaseTracking **)(CoreNavigation::CLP::LogEntry::PrivateData::Measurement::default_instance_
                                                                                               + 96);
      }
      uint64_t v3 = v3
         + CoreNavigation::CLP::LogEntry::PrivateData::FrequencyOffsetFromPhaseTracking::ByteSize(v27)
         + 2;
    }
  }
  *(_DWORD *)(v1 + 108) = v3;
  return v3;
}

void CoreNavigation::CLP::LogEntry::PrivateData::Measurement::CheckTypeAndMergeFrom(CoreNavigation::CLP::LogEntry::PrivateData::Measurement *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  CoreNavigation::CLP::LogEntry::PrivateData::Measurement::MergeFrom(this, lpsrc);
}

void CoreNavigation::CLP::LogEntry::PrivateData::Measurement::CopyFrom(CoreNavigation::CLP::LogEntry::PrivateData::Measurement *this, const CoreNavigation::CLP::LogEntry::PrivateData::Measurement *a2)
{
  if (a2 != this)
  {
    (*(void (**)(CoreNavigation::CLP::LogEntry::PrivateData::Measurement *))(*(void *)this + 32))(this);
    CoreNavigation::CLP::LogEntry::PrivateData::Measurement::MergeFrom(this, a2);
  }
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::Measurement::IsInitialized(CoreNavigation::CLP::LogEntry::PrivateData::Measurement *this)
{
  return 1;
}

float CoreNavigation::CLP::LogEntry::PrivateData::Measurement::Swap(CoreNavigation::CLP::LogEntry::PrivateData::Measurement *this, CoreNavigation::CLP::LogEntry::PrivateData::Measurement *a2)
{
  if (a2 != this)
  {
    uint64_t v2 = *((void *)this + 1);
    *((void *)this + 1) = *((void *)a2 + 1);
    *((void *)a2 + 1) = v2;
    uint64_t v3 = *((void *)this + 2);
    uint64_t v4 = *((void *)this + 3);
    uint64_t v5 = *((void *)a2 + 3);
    *((void *)this + 2) = *((void *)a2 + 2);
    *((void *)this + 3) = v5;
    *((void *)a2 + 2) = v3;
    *((void *)a2 + 3) = v4;
    uint64_t v6 = *((void *)this + 4);
    *((void *)this + 4) = *((void *)a2 + 4);
    *((void *)a2 + 4) = v6;
    uint64_t v7 = *((void *)this + 5);
    uint64_t v8 = *((void *)this + 6);
    uint64_t v9 = *((void *)a2 + 6);
    *((void *)this + 5) = *((void *)a2 + 5);
    *((void *)this + 6) = v9;
    *((void *)a2 + 5) = v7;
    *((void *)a2 + 6) = v8;
    uint64_t v10 = *((void *)this + 7);
    *((void *)this + 7) = *((void *)a2 + 7);
    *((void *)a2 + 7) = v10;
    uint64_t v11 = *((void *)this + 8);
    *((void *)this + 8) = *((void *)a2 + 8);
    *((void *)a2 + 8) = v11;
    uint64_t v12 = *((void *)this + 9);
    *((void *)this + 9) = *((void *)a2 + 9);
    *((void *)a2 + 9) = v12;
    float result = *((float *)this + 20);
    *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
    *((float *)a2 + 20) = result;
    LODWORD(v12) = *((_DWORD *)this + 21);
    *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
    *((_DWORD *)a2 + 21) = v12;
    uint64_t v14 = *((void *)this + 11);
    *((void *)this + 11) = *((void *)a2 + 11);
    *((void *)a2 + 11) = v14;
    LOBYTE(v14) = *((unsigned char *)this + 104);
    *((unsigned char *)this + 104) = *((unsigned char *)a2 + 104);
    *((unsigned char *)a2 + 104) = v14;
    uint64_t v15 = *((void *)this + 12);
    *((void *)this + 12) = *((void *)a2 + 12);
    *((void *)a2 + 12) = v15;
    LODWORD(v15) = *((_DWORD *)this + 28);
    *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
    *((_DWORD *)a2 + 28) = v15;
    LODWORD(v15) = *((_DWORD *)this + 27);
    *((_DWORD *)this + 27) = *((_DWORD *)a2 + 27);
    *((_DWORD *)a2 + 27) = v15;
  }
  return result;
}

void *CoreNavigation::CLP::LogEntry::PrivateData::Measurement::GetTypeName@<X0>(void *a1@<X8>)
{
  return sub_18DEDE7B0(a1, "CoreNavigation.CLP.LogEntry.PrivateData.Measurement");
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::ReceiverClockModel::SharedCtor(uint64_t this)
{
  *(_DWORD *)(this + 28) = 0;
  *(_DWORD *)(this + 32) = 0;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(unsigned char *)(this + 24) = 0;
  return this;
}

CoreNavigation::CLP::LogEntry::PrivateData::ReceiverClockModel *CoreNavigation::CLP::LogEntry::PrivateData::ReceiverClockModel::ReceiverClockModel(CoreNavigation::CLP::LogEntry::PrivateData::ReceiverClockModel *this, const CoreNavigation::CLP::LogEntry::PrivateData::ReceiverClockModel *a2)
{
  *((_DWORD *)this + 7) = 0;
  *((_DWORD *)this + 8) = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = &unk_1EDD0D388;
  *((unsigned char *)this + 24) = 0;
  CoreNavigation::CLP::LogEntry::PrivateData::ReceiverClockModel::MergeFrom(this, a2);
  return this;
}

void sub_18DFCB0D0(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

float CoreNavigation::CLP::LogEntry::PrivateData::ReceiverClockModel::MergeFrom(CoreNavigation::CLP::LogEntry::PrivateData::ReceiverClockModel *this, const CoreNavigation::CLP::LogEntry::PrivateData::ReceiverClockModel *a2)
{
  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v7);
  }
  LOBYTE(v5) = *((unsigned char *)a2 + 32);
  if ((_BYTE)v5)
  {
    if (*((unsigned char *)a2 + 32))
    {
      float result = *((float *)a2 + 2);
      *((_DWORD *)this + 8) |= 1u;
      *((float *)this + 2) = result;
      int v5 = *((_DWORD *)a2 + 8);
      if ((v5 & 2) == 0)
      {
LABEL_6:
        if ((v5 & 4) == 0) {
          goto LABEL_7;
        }
        goto LABEL_13;
      }
    }
    else if ((*((unsigned char *)a2 + 32) & 2) == 0)
    {
      goto LABEL_6;
    }
    float result = *((float *)a2 + 3);
    *((_DWORD *)this + 8) |= 2u;
    *((float *)this + 3) = result;
    int v5 = *((_DWORD *)a2 + 8);
    if ((v5 & 4) == 0)
    {
LABEL_7:
      if ((v5 & 8) == 0) {
        goto LABEL_8;
      }
      goto LABEL_14;
    }
LABEL_13:
    float result = *((float *)a2 + 4);
    *((_DWORD *)this + 8) |= 4u;
    *((float *)this + 4) = result;
    int v5 = *((_DWORD *)a2 + 8);
    if ((v5 & 8) == 0)
    {
LABEL_8:
      if ((v5 & 0x10) == 0) {
        return result;
      }
      goto LABEL_9;
    }
LABEL_14:
    float result = *((float *)a2 + 5);
    *((_DWORD *)this + 8) |= 8u;
    *((float *)this + 5) = result;
    if ((*((_DWORD *)a2 + 8) & 0x10) == 0) {
      return result;
    }
LABEL_9:
    char v6 = *((unsigned char *)a2 + 24);
    *((_DWORD *)this + 8) |= 0x10u;
    *((unsigned char *)this + 24) = v6;
  }
  return result;
}

void sub_18DFCB1F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CoreNavigation::CLP::LogEntry::PrivateData::ReceiverClockModel::~ReceiverClockModel(CoreNavigation::CLP::LogEntry::PrivateData::ReceiverClockModel *this)
{
  *(void *)this = &unk_1EDD0D388;
  CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  uint64_t vars8;

  CoreNavigation::CLP::LogEntry::PrivateData::ReceiverClockModel::~ReceiverClockModel(this);

  JUMPOUT(0x192FA6240);
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::ReceiverClockModel::default_instance(CoreNavigation::CLP::LogEntry::PrivateData::ReceiverClockModel *this)
{
  return CoreNavigation::CLP::LogEntry::PrivateData::ReceiverClockModel::default_instance_;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::ReceiverClockModel::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 28) = a2;
  return this;
}

void CoreNavigation::CLP::LogEntry::PrivateData::ReceiverClockModel::New(CoreNavigation::CLP::LogEntry::PrivateData::ReceiverClockModel *this)
{
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::ReceiverClockModel::Clear(uint64_t this)
{
  if (*(unsigned char *)(this + 32))
  {
    *(void *)(this + 8) = 0;
    *(void *)(this + 16) = 0;
    *(unsigned char *)(this + 24) = 0;
  }
  *(_DWORD *)(this + 32) = 0;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::ReceiverClockModel::MergePartialFromCodedStream(CoreNavigation::CLP::LogEntry::PrivateData::ReceiverClockModel *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  while (2)
  {
    uint64_t v4 = (char *)*((void *)a2 + 1);
    if ((unint64_t)v4 >= *((void *)a2 + 2) || *v4 < 0)
    {
      unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      if (!TagFallback) {
        return 1;
      }
    }
    else
    {
      unint64_t TagFallback = *v4;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((void *)a2 + 1) = v4 + 1;
      if (!TagFallback) {
        return 1;
      }
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        int v6 = TagFallback & 7;
        if (v6 != 5) {
          goto LABEL_29;
        }
        unsigned int v16 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(a2, &v16) & 1) == 0) {
          return 0;
        }
        *((_DWORD *)this + 2) = v16;
        *((_DWORD *)this + 8) |= 1u;
        uint64_t v7 = (unsigned char *)*((void *)a2 + 1);
        if ((unint64_t)v7 >= *((void *)a2 + 2) || *v7 != 21) {
          continue;
        }
        *((void *)a2 + 1) = v7 + 1;
        goto LABEL_14;
      case 2u:
        int v6 = TagFallback & 7;
        if (v6 != 5) {
          goto LABEL_29;
        }
LABEL_14:
        unsigned int v16 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(a2, &v16) & 1) == 0) {
          return 0;
        }
        *((_DWORD *)this + 3) = v16;
        *((_DWORD *)this + 8) |= 2u;
        uint64_t v8 = (unsigned char *)*((void *)a2 + 1);
        if ((unint64_t)v8 >= *((void *)a2 + 2) || *v8 != 29) {
          continue;
        }
        *((void *)a2 + 1) = v8 + 1;
LABEL_19:
        unsigned int v16 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(a2, &v16) & 1) == 0) {
          return 0;
        }
        *((_DWORD *)this + 4) = v16;
        *((_DWORD *)this + 8) |= 4u;
        uint64_t v9 = (unsigned char *)*((void *)a2 + 1);
        if ((unint64_t)v9 >= *((void *)a2 + 2) || *v9 != 37) {
          continue;
        }
        *((void *)a2 + 1) = v9 + 1;
LABEL_24:
        unsigned int v16 = 0;
        if (wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(a2, &v16))
        {
          *((_DWORD *)this + 5) = v16;
          *((_DWORD *)this + 8) |= 8u;
          uint64_t v11 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v10 = *((void *)a2 + 2);
          if ((unint64_t)v11 < v10 && *v11 == 40)
          {
            uint64_t v12 = v11 + 1;
            *((void *)a2 + 1) = v12;
LABEL_33:
            unsigned int v16 = 0;
            if ((unint64_t)v12 >= v10 || *v12 < 0)
            {
              uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v16);
              if (!result) {
                return result;
              }
              unsigned int v13 = v16;
              uint64_t v14 = (unsigned __int8 *)*((void *)a2 + 1);
              unint64_t v10 = *((void *)a2 + 2);
            }
            else
            {
              unsigned int v13 = *v12;
              uint64_t v14 = (unsigned __int8 *)(v12 + 1);
              *((void *)a2 + 1) = v14;
            }
            *((unsigned char *)this + 24) = v13 != 0;
            *((_DWORD *)this + 8) |= 0x10u;
            if (v14 == (unsigned __int8 *)v10 && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
            {
              *((_DWORD *)a2 + 8) = 0;
              uint64_t result = 1;
              *((unsigned char *)a2 + 36) = 1;
              return result;
            }
          }
          continue;
        }
        return 0;
      case 3u:
        int v6 = TagFallback & 7;
        if (v6 == 5) {
          goto LABEL_19;
        }
        goto LABEL_29;
      case 4u:
        int v6 = TagFallback & 7;
        if (v6 == 5) {
          goto LABEL_24;
        }
        goto LABEL_29;
      case 5u:
        int v6 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_29;
        }
        uint64_t v12 = (char *)*((void *)a2 + 1);
        unint64_t v10 = *((void *)a2 + 2);
        goto LABEL_33;
      default:
        int v6 = TagFallback & 7;
LABEL_29:
        if (v6 == 4) {
          return 1;
        }
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0; {
        continue;
        }
    }
  }
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::ReceiverClockModel::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  int v6 = *(_DWORD *)(this + 32);
  if (v6)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, (uint64_t)a2, *(float *)(this + 8), a3);
    int v6 = *(_DWORD *)(v5 + 32);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, (uint64_t)a2, *(float *)(v5 + 12), a3);
  int v6 = *(_DWORD *)(v5 + 32);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
LABEL_10:
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, (uint64_t)a2, *(float *)(v5 + 20), a3);
    if ((*(_DWORD *)(v5 + 32) & 0x10) == 0) {
      return this;
    }
    goto LABEL_11;
  }
LABEL_9:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, (uint64_t)a2, *(float *)(v5 + 16), a3);
  int v6 = *(_DWORD *)(v5 + 32);
  if ((v6 & 8) != 0) {
    goto LABEL_10;
  }
LABEL_5:
  if ((v6 & 0x10) == 0) {
    return this;
  }
LABEL_11:
  uint64_t v7 = *(unsigned __int8 *)(v5 + 24);

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, v7, (uint64_t)a2, a4);
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::ReceiverClockModel::ByteSize(CoreNavigation::CLP::LogEntry::PrivateData::ReceiverClockModel *this)
{
  uint64_t v1 = *((unsigned __int8 *)this + 32);
  if (*((unsigned char *)this + 32))
  {
    unsigned int v2 = ((int)(v1 << 31) >> 31) & 5;
    if ((v1 & 2) != 0) {
      v2 += 5;
    }
    if ((v1 & 4) != 0) {
      v2 += 5;
    }
    if ((v1 & 8) != 0) {
      v2 += 5;
    }
    if ((v1 & 0x10) != 0) {
      uint64_t v1 = v2 + 2;
    }
    else {
      uint64_t v1 = v2;
    }
  }
  *((_DWORD *)this + 7) = v1;
  return v1;
}

float CoreNavigation::CLP::LogEntry::PrivateData::ReceiverClockModel::CheckTypeAndMergeFrom(CoreNavigation::CLP::LogEntry::PrivateData::ReceiverClockModel *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  return CoreNavigation::CLP::LogEntry::PrivateData::ReceiverClockModel::MergeFrom(this, lpsrc);
}

float CoreNavigation::CLP::LogEntry::PrivateData::ReceiverClockModel::CopyFrom(CoreNavigation::CLP::LogEntry::PrivateData::ReceiverClockModel *this, const CoreNavigation::CLP::LogEntry::PrivateData::ReceiverClockModel *a2)
{
  if (a2 != this)
  {
    (*(void (**)(CoreNavigation::CLP::LogEntry::PrivateData::ReceiverClockModel *))(*(void *)this + 32))(this);
    return CoreNavigation::CLP::LogEntry::PrivateData::ReceiverClockModel::MergeFrom(this, a2);
  }
  return result;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::ReceiverClockModel::IsInitialized(CoreNavigation::CLP::LogEntry::PrivateData::ReceiverClockModel *this)
{
  return 1;
}

float CoreNavigation::CLP::LogEntry::PrivateData::ReceiverClockModel::Swap(CoreNavigation::CLP::LogEntry::PrivateData::ReceiverClockModel *this, CoreNavigation::CLP::LogEntry::PrivateData::ReceiverClockModel *a2)
{
  if (a2 != this)
  {
    int v2 = *((_DWORD *)this + 2);
    *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
    *((_DWORD *)a2 + 2) = v2;
    int v3 = *((_DWORD *)this + 3);
    *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
    *((_DWORD *)a2 + 3) = v3;
    int v4 = *((_DWORD *)this + 4);
    *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
    *((_DWORD *)a2 + 4) = v4;
    float result = *((float *)this + 5);
    *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
    *((float *)a2 + 5) = result;
    char v6 = *((unsigned char *)this + 24);
    *((unsigned char *)this + 24) = *((unsigned char *)a2 + 24);
    *((unsigned char *)a2 + 24) = v6;
    int v7 = *((_DWORD *)this + 8);
    *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
    *((_DWORD *)a2 + 8) = v7;
    int v8 = *((_DWORD *)this + 7);
    *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
    *((_DWORD *)a2 + 7) = v8;
  }
  return result;
}

void *CoreNavigation::CLP::LogEntry::PrivateData::ReceiverClockModel::GetTypeName@<X0>(void *a1@<X8>)
{
  return sub_18DEDE7B0(a1, "CoreNavigation.CLP.LogEntry.PrivateData.ReceiverClockModel");
}

double CoreNavigation::CLP::LogEntry::PrivateData::ReceiverClockCorrections::SharedCtor(CoreNavigation::CLP::LogEntry::PrivateData::ReceiverClockCorrections *this)
{
  double result = 0.0;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  return result;
}

CoreNavigation::CLP::LogEntry::PrivateData::ReceiverClockCorrections *CoreNavigation::CLP::LogEntry::PrivateData::ReceiverClockCorrections::ReceiverClockCorrections(CoreNavigation::CLP::LogEntry::PrivateData::ReceiverClockCorrections *this, const CoreNavigation::CLP::LogEntry::PrivateData::ReceiverClockCorrections *a2)
{
  *(void *)this = &unk_1EDD0E030;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  CoreNavigation::CLP::LogEntry::PrivateData::ReceiverClockCorrections::MergeFrom(this, a2);
  return this;
}

void sub_18DFCB95C(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

double CoreNavigation::CLP::LogEntry::PrivateData::ReceiverClockCorrections::MergeFrom(CoreNavigation::CLP::LogEntry::PrivateData::ReceiverClockCorrections *this, const CoreNavigation::CLP::LogEntry::PrivateData::ReceiverClockCorrections *a2)
{
  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v6);
  }
  LOBYTE(v5) = *((unsigned char *)a2 + 52);
  if ((_BYTE)v5)
  {
    if (*((unsigned char *)a2 + 52))
    {
      double result = *((double *)a2 + 1);
      *((_DWORD *)this + 13) |= 1u;
      *((double *)this + 1) = result;
      int v5 = *((_DWORD *)a2 + 13);
      if ((v5 & 2) == 0)
      {
LABEL_6:
        if ((v5 & 4) == 0) {
          goto LABEL_7;
        }
        goto LABEL_13;
      }
    }
    else if ((*((unsigned char *)a2 + 52) & 2) == 0)
    {
      goto LABEL_6;
    }
    double result = *((double *)a2 + 2);
    *((_DWORD *)this + 13) |= 2u;
    *((double *)this + 2) = result;
    int v5 = *((_DWORD *)a2 + 13);
    if ((v5 & 4) == 0)
    {
LABEL_7:
      if ((v5 & 8) == 0) {
        goto LABEL_8;
      }
      goto LABEL_14;
    }
LABEL_13:
    double result = *((double *)a2 + 3);
    *((_DWORD *)this + 13) |= 4u;
    *((double *)this + 3) = result;
    int v5 = *((_DWORD *)a2 + 13);
    if ((v5 & 8) == 0)
    {
LABEL_8:
      if ((v5 & 0x10) == 0) {
        return result;
      }
      goto LABEL_9;
    }
LABEL_14:
    double result = *((double *)a2 + 4);
    *((_DWORD *)this + 13) |= 8u;
    *((double *)this + 4) = result;
    if ((*((_DWORD *)a2 + 13) & 0x10) == 0) {
      return result;
    }
LABEL_9:
    double result = *((double *)a2 + 5);
    *((_DWORD *)this + 13) |= 0x10u;
    *((double *)this + 5) = result;
  }
  return result;
}

void sub_18DFCBA84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CoreNavigation::CLP::LogEntry::PrivateData::ReceiverClockCorrections::~ReceiverClockCorrections(CoreNavigation::CLP::LogEntry::PrivateData::ReceiverClockCorrections *this)
{
  *(void *)this = &unk_1EDD0E030;
  CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  uint64_t vars8;

  CoreNavigation::CLP::LogEntry::PrivateData::ReceiverClockCorrections::~ReceiverClockCorrections(this);

  JUMPOUT(0x192FA6240);
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::ReceiverClockCorrections::default_instance(CoreNavigation::CLP::LogEntry::PrivateData::ReceiverClockCorrections *this)
{
  return CoreNavigation::CLP::LogEntry::PrivateData::ReceiverClockCorrections::default_instance_;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::ReceiverClockCorrections::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 48) = a2;
  return this;
}

void CoreNavigation::CLP::LogEntry::PrivateData::ReceiverClockCorrections::New(CoreNavigation::CLP::LogEntry::PrivateData::ReceiverClockCorrections *this)
{
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::ReceiverClockCorrections::Clear(uint64_t this)
{
  if (*(unsigned char *)(this + 52))
  {
    *(void *)(this + 40) = 0;
    *(_OWORD *)(this + 24) = 0u;
    *(_OWORD *)(this + 8) = 0u;
  }
  *(_DWORD *)(this + 52) = 0;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::ReceiverClockCorrections::MergePartialFromCodedStream(CoreNavigation::CLP::LogEntry::PrivateData::ReceiverClockCorrections *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  while (2)
  {
    int v4 = (char *)*((void *)a2 + 1);
    if ((unint64_t)v4 >= *((void *)a2 + 2) || *v4 < 0)
    {
      unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      if (!TagFallback) {
        return 1;
      }
    }
    else
    {
      unint64_t TagFallback = *v4;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((void *)a2 + 1) = v4 + 1;
      if (!TagFallback) {
        return 1;
      }
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        int v6 = TagFallback & 7;
        if (v6 != 1) {
          goto LABEL_34;
        }
        unint64_t v12 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, &v12) & 1) == 0) {
          return 0;
        }
        *((void *)this + 1) = v12;
        *((_DWORD *)this + 13) |= 1u;
        int v7 = (unsigned char *)*((void *)a2 + 1);
        if ((unint64_t)v7 >= *((void *)a2 + 2) || *v7 != 17) {
          continue;
        }
        *((void *)a2 + 1) = v7 + 1;
        goto LABEL_14;
      case 2u:
        int v6 = TagFallback & 7;
        if (v6 != 1) {
          goto LABEL_34;
        }
LABEL_14:
        unint64_t v12 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, &v12) & 1) == 0) {
          return 0;
        }
        *((void *)this + 2) = v12;
        *((_DWORD *)this + 13) |= 2u;
        int v8 = (unsigned char *)*((void *)a2 + 1);
        if ((unint64_t)v8 >= *((void *)a2 + 2) || *v8 != 25) {
          continue;
        }
        *((void *)a2 + 1) = v8 + 1;
LABEL_19:
        unint64_t v12 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, &v12) & 1) == 0) {
          return 0;
        }
        *((void *)this + 3) = v12;
        *((_DWORD *)this + 13) |= 4u;
        uint64_t v9 = (unsigned char *)*((void *)a2 + 1);
        if ((unint64_t)v9 >= *((void *)a2 + 2) || *v9 != 33) {
          continue;
        }
        *((void *)a2 + 1) = v9 + 1;
LABEL_24:
        unint64_t v12 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, &v12) & 1) == 0) {
          return 0;
        }
        *((void *)this + 4) = v12;
        *((_DWORD *)this + 13) |= 8u;
        unint64_t v10 = (unsigned char *)*((void *)a2 + 1);
        if ((unint64_t)v10 >= *((void *)a2 + 2) || *v10 != 41) {
          continue;
        }
        *((void *)a2 + 1) = v10 + 1;
LABEL_29:
        unint64_t v12 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, &v12) & 1) == 0) {
          return 0;
        }
        *((void *)this + 5) = v12;
        *((_DWORD *)this + 13) |= 0x10u;
        if (*((void *)a2 + 1) != *((void *)a2 + 2)
          || !*((_DWORD *)a2 + 11) && *((_DWORD *)a2 + 6) != *((_DWORD *)a2 + 10))
        {
          continue;
        }
        *((_DWORD *)a2 + 8) = 0;
        uint64_t result = 1;
        *((unsigned char *)a2 + 36) = 1;
        break;
      case 3u:
        int v6 = TagFallback & 7;
        if (v6 == 1) {
          goto LABEL_19;
        }
        goto LABEL_34;
      case 4u:
        int v6 = TagFallback & 7;
        if (v6 == 1) {
          goto LABEL_24;
        }
        goto LABEL_34;
      case 5u:
        int v6 = TagFallback & 7;
        if (v6 == 1) {
          goto LABEL_29;
        }
        goto LABEL_34;
      default:
        int v6 = TagFallback & 7;
LABEL_34:
        if (v6 == 4) {
          return 1;
        }
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0; {
        continue;
        }
    }
    return result;
  }
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::ReceiverClockCorrections::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3)
{
  uint64_t v4 = this;
  int v5 = *(_DWORD *)(this + 52);
  if (v5)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, (uint64_t)a2, *(double *)(this + 8), a3);
    int v5 = *(_DWORD *)(v4 + 52);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, (uint64_t)a2, *(double *)(v4 + 16), a3);
  int v5 = *(_DWORD *)(v4 + 52);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
LABEL_10:
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, (uint64_t)a2, *(double *)(v4 + 32), a3);
    if ((*(_DWORD *)(v4 + 52) & 0x10) == 0) {
      return this;
    }
    goto LABEL_11;
  }
LABEL_9:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, (uint64_t)a2, *(double *)(v4 + 24), a3);
  int v5 = *(_DWORD *)(v4 + 52);
  if ((v5 & 8) != 0) {
    goto LABEL_10;
  }
LABEL_5:
  if ((v5 & 0x10) == 0) {
    return this;
  }
LABEL_11:
  double v6 = *(double *)(v4 + 40);

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, (uint64_t)a2, v6, a3);
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::ReceiverClockCorrections::ByteSize(CoreNavigation::CLP::LogEntry::PrivateData::ReceiverClockCorrections *this)
{
  uint64_t v1 = *((unsigned __int8 *)this + 52);
  if (*((unsigned char *)this + 52))
  {
    unsigned int v2 = ((int)(v1 << 31) >> 31) & 9;
    if ((v1 & 2) != 0) {
      v2 += 9;
    }
    if ((v1 & 4) != 0) {
      v2 += 9;
    }
    if ((v1 & 8) != 0) {
      v2 += 9;
    }
    if ((v1 & 0x10) != 0) {
      uint64_t v1 = v2 + 9;
    }
    else {
      uint64_t v1 = v2;
    }
  }
  *((_DWORD *)this + 12) = v1;
  return v1;
}

double CoreNavigation::CLP::LogEntry::PrivateData::ReceiverClockCorrections::CheckTypeAndMergeFrom(CoreNavigation::CLP::LogEntry::PrivateData::ReceiverClockCorrections *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  return CoreNavigation::CLP::LogEntry::PrivateData::ReceiverClockCorrections::MergeFrom(this, lpsrc);
}

double CoreNavigation::CLP::LogEntry::PrivateData::ReceiverClockCorrections::CopyFrom(CoreNavigation::CLP::LogEntry::PrivateData::ReceiverClockCorrections *this, const CoreNavigation::CLP::LogEntry::PrivateData::ReceiverClockCorrections *a2)
{
  if (a2 != this)
  {
    (*(void (**)(CoreNavigation::CLP::LogEntry::PrivateData::ReceiverClockCorrections *))(*(void *)this + 32))(this);
    return CoreNavigation::CLP::LogEntry::PrivateData::ReceiverClockCorrections::MergeFrom(this, a2);
  }
  return result;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::ReceiverClockCorrections::IsInitialized(CoreNavigation::CLP::LogEntry::PrivateData::ReceiverClockCorrections *this)
{
  return 1;
}

double CoreNavigation::CLP::LogEntry::PrivateData::ReceiverClockCorrections::Swap(CoreNavigation::CLP::LogEntry::PrivateData::ReceiverClockCorrections *this, CoreNavigation::CLP::LogEntry::PrivateData::ReceiverClockCorrections *a2)
{
  if (a2 != this)
  {
    uint64_t v2 = *((void *)this + 1);
    *((void *)this + 1) = *((void *)a2 + 1);
    *((void *)a2 + 1) = v2;
    uint64_t v3 = *((void *)this + 2);
    *((void *)this + 2) = *((void *)a2 + 2);
    *((void *)a2 + 2) = v3;
    uint64_t v4 = *((void *)this + 3);
    *((void *)this + 3) = *((void *)a2 + 3);
    *((void *)a2 + 3) = v4;
    uint64_t v5 = *((void *)this + 4);
    *((void *)this + 4) = *((void *)a2 + 4);
    *((void *)a2 + 4) = v5;
    double result = *((double *)this + 5);
    *((void *)this + 5) = *((void *)a2 + 5);
    *((double *)a2 + 5) = result;
    int v7 = *((_DWORD *)this + 13);
    *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
    *((_DWORD *)a2 + 13) = v7;
    int v8 = *((_DWORD *)this + 12);
    *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
    *((_DWORD *)a2 + 12) = v8;
  }
  return result;
}

void *CoreNavigation::CLP::LogEntry::PrivateData::ReceiverClockCorrections::GetTypeName@<X0>(void *a1@<X8>)
{
  return sub_18DEDE7B0(a1, "CoreNavigation.CLP.LogEntry.PrivateData.ReceiverClockCorrections");
}

double CoreNavigation::CLP::LogEntry::PrivateData::ReceiverToGpsTimeConversion::SharedCtor(CoreNavigation::CLP::LogEntry::PrivateData::ReceiverToGpsTimeConversion *this)
{
  *((_DWORD *)this + 10) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  return result;
}

CoreNavigation::CLP::LogEntry::PrivateData::ReceiverToGpsTimeConversion *CoreNavigation::CLP::LogEntry::PrivateData::ReceiverToGpsTimeConversion::ReceiverToGpsTimeConversion(CoreNavigation::CLP::LogEntry::PrivateData::ReceiverToGpsTimeConversion *this, const CoreNavigation::CLP::LogEntry::PrivateData::ReceiverToGpsTimeConversion *a2)
{
  *(void *)this = &unk_1EDD0E468;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_DWORD *)this + 10) = 0;
  CoreNavigation::CLP::LogEntry::PrivateData::ReceiverToGpsTimeConversion::MergeFrom(this, a2);
  return this;
}

void sub_18DFCC1CC(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

double CoreNavigation::CLP::LogEntry::PrivateData::ReceiverToGpsTimeConversion::MergeFrom(CoreNavigation::CLP::LogEntry::PrivateData::ReceiverToGpsTimeConversion *this, const CoreNavigation::CLP::LogEntry::PrivateData::ReceiverToGpsTimeConversion *a2)
{
  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v7);
  }
  LOBYTE(v5) = *((unsigned char *)a2 + 40);
  if ((_BYTE)v5)
  {
    if (*((unsigned char *)a2 + 40))
    {
      uint64_t v6 = *((void *)a2 + 1);
      *((_DWORD *)this + 10) |= 1u;
      *((void *)this + 1) = v6;
      int v5 = *((_DWORD *)a2 + 10);
      if ((v5 & 2) == 0)
      {
LABEL_6:
        if ((v5 & 4) == 0) {
          goto LABEL_7;
        }
        goto LABEL_13;
      }
    }
    else if ((*((unsigned char *)a2 + 40) & 2) == 0)
    {
      goto LABEL_6;
    }
    LODWORD(result) = *((_DWORD *)a2 + 4);
    *((_DWORD *)this + 10) |= 2u;
    *((_DWORD *)this + 4) = LODWORD(result);
    int v5 = *((_DWORD *)a2 + 10);
    if ((v5 & 4) == 0)
    {
LABEL_7:
      if ((v5 & 8) == 0) {
        goto LABEL_8;
      }
      goto LABEL_14;
    }
LABEL_13:
    LODWORD(result) = *((_DWORD *)a2 + 5);
    *((_DWORD *)this + 10) |= 4u;
    *((_DWORD *)this + 5) = LODWORD(result);
    int v5 = *((_DWORD *)a2 + 10);
    if ((v5 & 8) == 0)
    {
LABEL_8:
      if ((v5 & 0x10) == 0) {
        return result;
      }
      goto LABEL_9;
    }
LABEL_14:
    double result = *((double *)a2 + 3);
    *((_DWORD *)this + 10) |= 8u;
    *((double *)this + 3) = result;
    if ((*((_DWORD *)a2 + 10) & 0x10) == 0) {
      return result;
    }
LABEL_9:
    LODWORD(result) = *((_DWORD *)a2 + 8);
    *((_DWORD *)this + 10) |= 0x10u;
    *((_DWORD *)this + 8) = LODWORD(result);
  }
  return result;
}

void sub_18DFCC2F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CoreNavigation::CLP::LogEntry::PrivateData::ReceiverToGpsTimeConversion::~ReceiverToGpsTimeConversion(CoreNavigation::CLP::LogEntry::PrivateData::ReceiverToGpsTimeConversion *this)
{
  *(void *)this = &unk_1EDD0E468;
  CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  uint64_t vars8;

  CoreNavigation::CLP::LogEntry::PrivateData::ReceiverToGpsTimeConversion::~ReceiverToGpsTimeConversion(this);

  JUMPOUT(0x192FA6240);
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::ReceiverToGpsTimeConversion::default_instance(CoreNavigation::CLP::LogEntry::PrivateData::ReceiverToGpsTimeConversion *this)
{
  return CoreNavigation::CLP::LogEntry::PrivateData::ReceiverToGpsTimeConversion::default_instance_;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::ReceiverToGpsTimeConversion::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 36) = a2;
  return this;
}

void CoreNavigation::CLP::LogEntry::PrivateData::ReceiverToGpsTimeConversion::New(CoreNavigation::CLP::LogEntry::PrivateData::ReceiverToGpsTimeConversion *this)
{
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::ReceiverToGpsTimeConversion::Clear(uint64_t this)
{
  if (*(unsigned char *)(this + 40))
  {
    *(void *)(this + 8) = 0;
    *(void *)(this + 16) = 0;
    *(_DWORD *)(this + 32) = 0;
    *(void *)(this + 24) = 0;
  }
  *(_DWORD *)(this + 40) = 0;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::ReceiverToGpsTimeConversion::MergePartialFromCodedStream(CoreNavigation::CLP::LogEntry::PrivateData::ReceiverToGpsTimeConversion *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  while (2)
  {
    uint64_t v4 = (char *)*((void *)a2 + 1);
    if ((unint64_t)v4 >= *((void *)a2 + 2) || *v4 < 0)
    {
      unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      if (!TagFallback) {
        return 1;
      }
    }
    else
    {
      unint64_t TagFallback = *v4;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((void *)a2 + 1) = v4 + 1;
      if (!TagFallback) {
        return 1;
      }
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        int v6 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_19;
        }
        *(void *)uint64_t v15 = 0;
        int v8 = (char *)*((void *)a2 + 1);
        unint64_t v7 = *((void *)a2 + 2);
        if ((unint64_t)v8 >= v7 || *v8 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, (unint64_t *)v15);
          if (!result) {
            return result;
          }
          uint64_t v9 = *(void *)v15;
          unint64_t v10 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v7 = *((void *)a2 + 2);
        }
        else
        {
          uint64_t v9 = *v8;
          unint64_t v10 = v8 + 1;
          *((void *)a2 + 1) = v10;
        }
        *((void *)this + 1) = v9;
        *((_DWORD *)this + 10) |= 1u;
        if ((unint64_t)v10 < v7 && *v10 == 21)
        {
          *((void *)a2 + 1) = v10 + 1;
          goto LABEL_27;
        }
        continue;
      case 2u:
        int v6 = TagFallback & 7;
        if (v6 != 5) {
          goto LABEL_19;
        }
LABEL_27:
        v15[0] = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(a2, v15) & 1) == 0) {
          return 0;
        }
        *((_DWORD *)this + 4) = v15[0];
        *((_DWORD *)this + 10) |= 2u;
        unint64_t v12 = (unsigned char *)*((void *)a2 + 1);
        if ((unint64_t)v12 >= *((void *)a2 + 2) || *v12 != 29) {
          continue;
        }
        *((void *)a2 + 1) = v12 + 1;
LABEL_31:
        v15[0] = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(a2, v15) & 1) == 0) {
          return 0;
        }
        *((_DWORD *)this + 5) = v15[0];
        *((_DWORD *)this + 10) |= 4u;
        unsigned int v13 = (unsigned char *)*((void *)a2 + 1);
        if ((unint64_t)v13 >= *((void *)a2 + 2) || *v13 != 33) {
          continue;
        }
        *((void *)a2 + 1) = v13 + 1;
LABEL_35:
        *(void *)uint64_t v15 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, (unint64_t *)v15) & 1) == 0)return 0; {
        *((void *)this + 3) = *(void *)v15;
        }
        *((_DWORD *)this + 10) |= 8u;
        uint64_t v14 = (unsigned char *)*((void *)a2 + 1);
        if ((unint64_t)v14 >= *((void *)a2 + 2) || *v14 != 45) {
          continue;
        }
        *((void *)a2 + 1) = v14 + 1;
LABEL_39:
        v15[0] = 0;
        if (wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(a2, v15))
        {
          *((_DWORD *)this + 8) = v15[0];
          *((_DWORD *)this + 10) |= 0x10u;
          if (*((void *)a2 + 1) == *((void *)a2 + 2)
            && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
          {
            *((_DWORD *)a2 + 8) = 0;
            uint64_t result = 1;
            *((unsigned char *)a2 + 36) = 1;
            return result;
          }
          continue;
        }
        return 0;
      case 3u:
        int v6 = TagFallback & 7;
        if (v6 == 5) {
          goto LABEL_31;
        }
        goto LABEL_19;
      case 4u:
        int v6 = TagFallback & 7;
        if (v6 == 1) {
          goto LABEL_35;
        }
        goto LABEL_19;
      case 5u:
        int v6 = TagFallback & 7;
        if (v6 != 5) {
          goto LABEL_19;
        }
        goto LABEL_39;
      default:
        int v6 = TagFallback & 7;
LABEL_19:
        if (v6 == 4) {
          return 1;
        }
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0; {
        continue;
        }
    }
  }
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::ReceiverToGpsTimeConversion::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  int v6 = *(_DWORD *)(this + 40);
  if (v6)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(void *)(this + 8), (uint64_t)a2, a4);
    int v6 = *(_DWORD *)(v5 + 40);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, (uint64_t)a2, *(float *)(v5 + 16), a3);
  int v6 = *(_DWORD *)(v5 + 40);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
LABEL_10:
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, (uint64_t)a2, *(double *)(v5 + 24), a3);
    if ((*(_DWORD *)(v5 + 40) & 0x10) == 0) {
      return this;
    }
    goto LABEL_11;
  }
LABEL_9:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, (uint64_t)a2, *(float *)(v5 + 20), a3);
  int v6 = *(_DWORD *)(v5 + 40);
  if ((v6 & 8) != 0) {
    goto LABEL_10;
  }
LABEL_5:
  if ((v6 & 0x10) == 0) {
    return this;
  }
LABEL_11:
  float v7 = *(float *)(v5 + 32);

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, (uint64_t)a2, v7, a3);
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::ReceiverToGpsTimeConversion::ByteSize(CoreNavigation::CLP::LogEntry::PrivateData::ReceiverToGpsTimeConversion *this)
{
  LOBYTE(v2) = *((unsigned char *)this + 40);
  if ((_BYTE)v2)
  {
    if (*((unsigned char *)this + 40))
    {
      unsigned int v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this
                                                                                       + 1))
         + 1;
      int v2 = *((_DWORD *)this + 10);
    }
    else
    {
      unsigned int v3 = 0;
    }
    if ((v2 & 2) != 0) {
      v3 += 5;
    }
    if ((v2 & 4) != 0) {
      v3 += 5;
    }
    if ((v2 & 8) != 0) {
      v3 += 9;
    }
    if ((v2 & 0x10) != 0) {
      uint64_t result = v3 + 5;
    }
    else {
      uint64_t result = v3;
    }
  }
  else
  {
    uint64_t result = 0;
  }
  *((_DWORD *)this + 9) = result;
  return result;
}

double CoreNavigation::CLP::LogEntry::PrivateData::ReceiverToGpsTimeConversion::CheckTypeAndMergeFrom(CoreNavigation::CLP::LogEntry::PrivateData::ReceiverToGpsTimeConversion *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  return CoreNavigation::CLP::LogEntry::PrivateData::ReceiverToGpsTimeConversion::MergeFrom(this, lpsrc);
}

double CoreNavigation::CLP::LogEntry::PrivateData::ReceiverToGpsTimeConversion::CopyFrom(CoreNavigation::CLP::LogEntry::PrivateData::ReceiverToGpsTimeConversion *this, const CoreNavigation::CLP::LogEntry::PrivateData::ReceiverToGpsTimeConversion *a2)
{
  if (a2 != this)
  {
    (*(void (**)(CoreNavigation::CLP::LogEntry::PrivateData::ReceiverToGpsTimeConversion *))(*(void *)this + 32))(this);
    return CoreNavigation::CLP::LogEntry::PrivateData::ReceiverToGpsTimeConversion::MergeFrom(this, a2);
  }
  return result;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::ReceiverToGpsTimeConversion::IsInitialized(CoreNavigation::CLP::LogEntry::PrivateData::ReceiverToGpsTimeConversion *this)
{
  return 1;
}

float CoreNavigation::CLP::LogEntry::PrivateData::ReceiverToGpsTimeConversion::Swap(CoreNavigation::CLP::LogEntry::PrivateData::ReceiverToGpsTimeConversion *this, CoreNavigation::CLP::LogEntry::PrivateData::ReceiverToGpsTimeConversion *a2)
{
  if (a2 != this)
  {
    uint64_t v2 = *((void *)this + 1);
    *((void *)this + 1) = *((void *)a2 + 1);
    *((void *)a2 + 1) = v2;
    int v3 = *((_DWORD *)this + 4);
    *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
    *((_DWORD *)a2 + 4) = v3;
    int v4 = *((_DWORD *)this + 5);
    *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
    *((_DWORD *)a2 + 5) = v4;
    uint64_t v5 = *((void *)this + 3);
    *((void *)this + 3) = *((void *)a2 + 3);
    *((void *)a2 + 3) = v5;
    float result = *((float *)this + 8);
    *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
    *((float *)a2 + 8) = result;
    LODWORD(v2) = *((_DWORD *)this + 10);
    *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
    *((_DWORD *)a2 + 10) = v2;
    LODWORD(v2) = *((_DWORD *)this + 9);
    *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
    *((_DWORD *)a2 + 9) = v2;
  }
  return result;
}

void *CoreNavigation::CLP::LogEntry::PrivateData::ReceiverToGpsTimeConversion::GetTypeName@<X0>(void *a1@<X8>)
{
  return sub_18DEDE7B0(a1, "CoreNavigation.CLP.LogEntry.PrivateData.ReceiverToGpsTimeConversion");
}

double CoreNavigation::CLP::LogEntry::PrivateData::Clock::SharedCtor(CoreNavigation::CLP::LogEntry::PrivateData::Clock *this)
{
  *((void *)this + 5) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  return result;
}

CoreNavigation::CLP::LogEntry::PrivateData::Clock *CoreNavigation::CLP::LogEntry::PrivateData::Clock::Clock(CoreNavigation::CLP::LogEntry::PrivateData::Clock *this, const CoreNavigation::CLP::LogEntry::PrivateData::Clock *a2)
{
  *(void *)this = &unk_1EDD0EB70;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((void *)this + 5) = 0;
  CoreNavigation::CLP::LogEntry::PrivateData::Clock::MergeFrom(this, a2);
  return this;
}

void sub_18DFCCA84(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

double CoreNavigation::CLP::LogEntry::PrivateData::Clock::MergeFrom(CoreNavigation::CLP::LogEntry::PrivateData::Clock *this, const CoreNavigation::CLP::LogEntry::PrivateData::Clock *a2)
{
  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v13);
  }
  LOBYTE(v5) = *((unsigned char *)a2 + 44);
  if (!(_BYTE)v5) {
    return result;
  }
  if ((*((unsigned char *)a2 + 44) & 1) == 0)
  {
    if ((*((unsigned char *)a2 + 44) & 2) == 0) {
      goto LABEL_6;
    }
LABEL_10:
    *((_DWORD *)this + 11) |= 2u;
    float v7 = (CoreNavigation::CLP::LogEntry::PrivateData::ReceiverClockModel *)*((void *)this + 2);
    if (!v7) {
      operator new();
    }
    int v8 = (const CoreNavigation::CLP::LogEntry::PrivateData::ReceiverClockModel *)*((void *)a2 + 2);
    if (!v8)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);
      int v8 = *(const CoreNavigation::CLP::LogEntry::PrivateData::ReceiverClockModel **)(CoreNavigation::CLP::LogEntry::PrivateData::Clock::default_instance_
                                                                                    + 16);
    }
    *(float *)&double result = CoreNavigation::CLP::LogEntry::PrivateData::ReceiverClockModel::MergeFrom(v7, v8);
    int v5 = *((_DWORD *)a2 + 11);
    if ((v5 & 4) == 0)
    {
LABEL_7:
      if ((v5 & 8) == 0) {
        return result;
      }
      goto LABEL_20;
    }
    goto LABEL_15;
  }
  uint64_t v6 = *((void *)a2 + 1);
  *((_DWORD *)this + 11) |= 1u;
  *((void *)this + 1) = v6;
  int v5 = *((_DWORD *)a2 + 11);
  if ((v5 & 2) != 0) {
    goto LABEL_10;
  }
LABEL_6:
  if ((v5 & 4) == 0) {
    goto LABEL_7;
  }
LABEL_15:
  *((_DWORD *)this + 11) |= 4u;
  uint64_t v9 = (CoreNavigation::CLP::LogEntry::PrivateData::ReceiverClockCorrections *)*((void *)this + 3);
  if (!v9) {
    operator new();
  }
  unint64_t v10 = (const CoreNavigation::CLP::LogEntry::PrivateData::ReceiverClockCorrections *)*((void *)a2 + 3);
  if (!v10)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);
    unint64_t v10 = *(const CoreNavigation::CLP::LogEntry::PrivateData::ReceiverClockCorrections **)(CoreNavigation::CLP::LogEntry::PrivateData::Clock::default_instance_
                                                                                         + 24);
  }
  double result = CoreNavigation::CLP::LogEntry::PrivateData::ReceiverClockCorrections::MergeFrom(v9, v10);
  if ((*((_DWORD *)a2 + 11) & 8) != 0)
  {
LABEL_20:
    *((_DWORD *)this + 11) |= 8u;
    uint64_t v11 = (CoreNavigation::CLP::LogEntry::PrivateData::ReceiverToGpsTimeConversion *)*((void *)this + 4);
    if (!v11) {
      operator new();
    }
    unint64_t v12 = (const CoreNavigation::CLP::LogEntry::PrivateData::ReceiverToGpsTimeConversion *)*((void *)a2 + 4);
    if (!v12)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);
      unint64_t v12 = *(const CoreNavigation::CLP::LogEntry::PrivateData::ReceiverToGpsTimeConversion **)(CoreNavigation::CLP::LogEntry::PrivateData::Clock::default_instance_
                                                                                              + 32);
    }
    return CoreNavigation::CLP::LogEntry::PrivateData::ReceiverToGpsTimeConversion::MergeFrom(v11, v12);
  }
  return result;
}

void sub_18DFCCCD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CoreNavigation::CLP::LogEntry::PrivateData::Clock::~Clock(CoreNavigation::CLP::LogEntry::PrivateData::Clock *this)
{
  *(void *)this = &unk_1EDD0EB70;
  CoreNavigation::CLP::LogEntry::PrivateData::Clock::SharedDtor(this);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  uint64_t vars8;

  CoreNavigation::CLP::LogEntry::PrivateData::Clock::~Clock(this);

  JUMPOUT(0x192FA6240);
}

void CoreNavigation::CLP::LogEntry::PrivateData::Clock::SharedDtor(CoreNavigation::CLP::LogEntry::PrivateData::Clock *this)
{
  CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);
  if ((CoreNavigation::CLP::LogEntry::PrivateData::Clock *)CoreNavigation::CLP::LogEntry::PrivateData::Clock::default_instance_ != this)
  {
    uint64_t v2 = *((void *)this + 2);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
    uint64_t v3 = *((void *)this + 3);
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
    uint64_t v4 = *((void *)this + 4);
    if (v4)
    {
      int v5 = *(void (**)(void))(*(void *)v4 + 8);
      v5();
    }
  }
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::Clock::default_instance(CoreNavigation::CLP::LogEntry::PrivateData::Clock *this)
{
  return CoreNavigation::CLP::LogEntry::PrivateData::Clock::default_instance_;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::Clock::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 40) = a2;
  return this;
}

void CoreNavigation::CLP::LogEntry::PrivateData::Clock::New(CoreNavigation::CLP::LogEntry::PrivateData::Clock *this)
{
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::Clock::Clear(uint64_t this)
{
  LOBYTE(v1) = *(unsigned char *)(this + 44);
  if ((_BYTE)v1)
  {
    *(void *)(this + 8) = 0;
    if ((v1 & 2) != 0)
    {
      uint64_t v2 = *(void *)(this + 16);
      if (v2)
      {
        if (*(unsigned char *)(v2 + 32))
        {
          *(void *)(v2 + 8) = 0;
          *(void *)(v2 + 16) = 0;
          *(unsigned char *)(v2 + 24) = 0;
        }
        *(_DWORD *)(v2 + 32) = 0;
        int v1 = *(_DWORD *)(this + 44);
      }
    }
    if ((v1 & 4) != 0)
    {
      uint64_t v3 = *(void *)(this + 24);
      if (v3)
      {
        if (*(unsigned char *)(v3 + 52))
        {
          *(void *)(v3 + 40) = 0;
          *(_OWORD *)(v3 + 24) = 0u;
          *(_OWORD *)(v3 + 8) = 0u;
        }
        *(_DWORD *)(v3 + 52) = 0;
        int v1 = *(_DWORD *)(this + 44);
      }
    }
    if ((v1 & 8) != 0)
    {
      uint64_t v4 = *(void *)(this + 32);
      if (v4)
      {
        if (*(unsigned char *)(v4 + 40))
        {
          *(void *)(v4 + 8) = 0;
          *(void *)(v4 + 16) = 0;
          *(_DWORD *)(v4 + 32) = 0;
          *(void *)(v4 + 24) = 0;
        }
        *(_DWORD *)(v4 + 40) = 0;
      }
    }
  }
  *(_DWORD *)(this + 44) = 0;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::Clock::MergePartialFromCodedStream(CoreNavigation::CLP::LogEntry::PrivateData::Clock *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  uint64_t v4 = (unint64_t *)((char *)this + 8);
  while (1)
  {
    int v5 = (char *)*((void *)a2 + 1);
    if ((unint64_t)v5 < *((void *)a2 + 2) && (*v5 & 0x80000000) == 0)
    {
      unint64_t TagFallback = *v5;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((void *)a2 + 1) = v5 + 1;
      if (!TagFallback) {
        return 1;
      }
      goto LABEL_7;
    }
    unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
    *((_DWORD *)a2 + 8) = TagFallback;
    if (!TagFallback) {
      return 1;
    }
LABEL_7:
    switch(TagFallback >> 3)
    {
      case 1u:
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_18;
        }
        uint64_t v9 = (char *)*((void *)a2 + 1);
        unint64_t v8 = *((void *)a2 + 2);
        if ((unint64_t)v9 >= v8 || *v9 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v4);
          if (!result) {
            return result;
          }
          unint64_t v10 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v8 = *((void *)a2 + 2);
        }
        else
        {
          unint64_t *v4 = *v9;
          unint64_t v10 = v9 + 1;
          *((void *)a2 + 1) = v10;
        }
        int v11 = *((_DWORD *)this + 11) | 1;
        *((_DWORD *)this + 11) = v11;
        if ((unint64_t)v10 < v8 && *v10 == 18)
        {
          *((void *)a2 + 1) = v10 + 1;
          goto LABEL_26;
        }
        continue;
      case 2u:
        int v7 = TagFallback & 7;
        if (v7 != 2) {
          goto LABEL_18;
        }
        int v11 = *((_DWORD *)this + 11);
LABEL_26:
        *((_DWORD *)this + 11) = v11 | 2;
        unsigned int v13 = (CoreNavigation::CLP::LogEntry::PrivateData::ReceiverClockModel *)*((void *)this + 2);
        if (!v13) {
          operator new();
        }
        unsigned int v34 = 0;
        uint64_t v14 = (char *)*((void *)a2 + 1);
        if ((unint64_t)v14 >= *((void *)a2 + 2) || *v14 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v34))return 0; {
        }
          }
        else
        {
          unsigned int v34 = *v14;
          *((void *)a2 + 1) = v14 + 1;
        }
        int v15 = *((_DWORD *)a2 + 14);
        int v16 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v15 + 1;
        if (v15 >= v16) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CoreNavigation::CLP::LogEntry::PrivateData::ReceiverClockModel::MergePartialFromCodedStream(v13, a2)|| !*((unsigned char *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        int v17 = *((_DWORD *)a2 + 14);
        BOOL v18 = __OFSUB__(v17, 1);
        int v19 = v17 - 1;
        if (v19 < 0 == v18) {
          *((_DWORD *)a2 + 14) = v19;
        }
        int v20 = (unsigned char *)*((void *)a2 + 1);
        if ((unint64_t)v20 >= *((void *)a2 + 2) || *v20 != 26) {
          continue;
        }
        *((void *)a2 + 1) = v20 + 1;
LABEL_40:
        *((_DWORD *)this + 11) |= 4u;
        int v21 = (CoreNavigation::CLP::LogEntry::PrivateData::ReceiverClockCorrections *)*((void *)this + 3);
        if (!v21) {
          operator new();
        }
        unsigned int v35 = 0;
        int v22 = (char *)*((void *)a2 + 1);
        if ((unint64_t)v22 >= *((void *)a2 + 2) || *v22 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v35))return 0; {
        }
          }
        else
        {
          unsigned int v35 = *v22;
          *((void *)a2 + 1) = v22 + 1;
        }
        int v23 = *((_DWORD *)a2 + 14);
        int v24 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v23 + 1;
        if (v23 >= v24) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CoreNavigation::CLP::LogEntry::PrivateData::ReceiverClockCorrections::MergePartialFromCodedStream(v21, a2)|| !*((unsigned char *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        int v25 = *((_DWORD *)a2 + 14);
        BOOL v18 = __OFSUB__(v25, 1);
        int v26 = v25 - 1;
        if (v26 < 0 == v18) {
          *((_DWORD *)a2 + 14) = v26;
        }
        int v27 = (unsigned char *)*((void *)a2 + 1);
        if ((unint64_t)v27 >= *((void *)a2 + 2) || *v27 != 34) {
          continue;
        }
        *((void *)a2 + 1) = v27 + 1;
LABEL_54:
        *((_DWORD *)this + 11) |= 8u;
        int v28 = (CoreNavigation::CLP::LogEntry::PrivateData::ReceiverToGpsTimeConversion *)*((void *)this + 4);
        if (!v28) {
          operator new();
        }
        unsigned int v36 = 0;
        int v29 = (char *)*((void *)a2 + 1);
        if ((unint64_t)v29 >= *((void *)a2 + 2) || *v29 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v36))return 0; {
        }
          }
        else
        {
          unsigned int v36 = *v29;
          *((void *)a2 + 1) = v29 + 1;
        }
        int v30 = *((_DWORD *)a2 + 14);
        int v31 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v30 + 1;
        if (v30 >= v31) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CoreNavigation::CLP::LogEntry::PrivateData::ReceiverToGpsTimeConversion::MergePartialFromCodedStream(v28, a2)|| !*((unsigned char *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        int v32 = *((_DWORD *)a2 + 14);
        BOOL v18 = __OFSUB__(v32, 1);
        int v33 = v32 - 1;
        if (v33 < 0 == v18) {
          *((_DWORD *)a2 + 14) = v33;
        }
        if (*((void *)a2 + 1) == *((void *)a2 + 2)
          && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
        {
          *((_DWORD *)a2 + 8) = 0;
          uint64_t result = 1;
          *((unsigned char *)a2 + 36) = 1;
          return result;
        }
        break;
      case 3u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_40;
        }
        goto LABEL_18;
      case 4u:
        int v7 = TagFallback & 7;
        if (v7 != 2) {
          goto LABEL_18;
        }
        goto LABEL_54;
      default:
        int v7 = TagFallback & 7;
LABEL_18:
        if (v7 == 4) {
          return 1;
        }
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0; {
        continue;
        }
    }
  }
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::Clock::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  int v6 = *(_DWORD *)(this + 44);
  if (v6)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(void *)(this + 8), (uint64_t)a2, a4);
    int v6 = *(_DWORD *)(v5 + 44);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t v7 = *(void *)(v5 + 16);
  if (!v7)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)this);
    uint64_t v7 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::Clock::default_instance_ + 16);
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v7, a2, a4);
  int v6 = *(_DWORD *)(v5 + 44);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      return this;
    }
    goto LABEL_13;
  }
LABEL_10:
  uint64_t v8 = *(void *)(v5 + 24);
  if (!v8)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)this);
    uint64_t v8 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::Clock::default_instance_ + 24);
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v8, a2, a4);
  if ((*(_DWORD *)(v5 + 44) & 8) != 0)
  {
LABEL_13:
    uint64_t v9 = *(void *)(v5 + 32);
    if (!v9)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)this);
      uint64_t v9 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::Clock::default_instance_ + 32);
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v9, a2, a4);
  }
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::Clock::ByteSize(CoreNavigation::CLP::LogEntry::PrivateData::Clock *this)
{
  LOBYTE(v2) = *((unsigned char *)this + 44);
  if (!(_BYTE)v2)
  {
    uint64_t v3 = 0;
    goto LABEL_22;
  }
  if (*((unsigned char *)this + 44))
  {
    uint64_t v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this + 1))
       + 1;
    int v2 = *((_DWORD *)this + 11);
    if ((v2 & 2) == 0) {
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v3 = 0;
    if ((*((unsigned char *)this + 44) & 2) == 0) {
      goto LABEL_10;
    }
  }
  uint64_t v4 = (CoreNavigation::CLP::LogEntry::PrivateData::ReceiverClockModel *)*((void *)this + 2);
  if (!v4)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(0);
    uint64_t v4 = *(CoreNavigation::CLP::LogEntry::PrivateData::ReceiverClockModel **)(CoreNavigation::CLP::LogEntry::PrivateData::Clock::default_instance_
                                                                            + 16);
  }
  uint64_t v3 = v3 + CoreNavigation::CLP::LogEntry::PrivateData::ReceiverClockModel::ByteSize(v4) + 2;
  int v2 = *((_DWORD *)this + 11);
LABEL_10:
  if ((v2 & 4) == 0)
  {
    if ((v2 & 8) == 0) {
      goto LABEL_22;
    }
    goto LABEL_16;
  }
  uint64_t v5 = (CoreNavigation::CLP::LogEntry::PrivateData::ReceiverClockCorrections *)*((void *)this + 3);
  if (!v5)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(0);
    uint64_t v5 = *(CoreNavigation::CLP::LogEntry::PrivateData::ReceiverClockCorrections **)(CoreNavigation::CLP::LogEntry::PrivateData::Clock::default_instance_
                                                                                  + 24);
  }
  uint64_t v3 = v3
     + CoreNavigation::CLP::LogEntry::PrivateData::ReceiverClockCorrections::ByteSize(v5)
     + 2;
  if ((*((_DWORD *)this + 11) & 8) != 0)
  {
LABEL_16:
    int v6 = (CoreNavigation::CLP::LogEntry::PrivateData::ReceiverToGpsTimeConversion *)*((void *)this + 4);
    if (!v6)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(0);
      int v6 = *(CoreNavigation::CLP::LogEntry::PrivateData::ReceiverToGpsTimeConversion **)(CoreNavigation::CLP::LogEntry::PrivateData::Clock::default_instance_
                                                                                       + 32);
    }
    uint64_t v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CoreNavigation::CLP::LogEntry::PrivateData::ReceiverToGpsTimeConversion::ByteSize(v6);
    int v8 = (int)v7;
    if (v7 >= 0x80) {
      int v9 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7);
    }
    else {
      int v9 = 1;
    }
    uint64_t v3 = (v3 + v8 + v9 + 1);
  }
LABEL_22:
  *((_DWORD *)this + 10) = v3;
  return v3;
}

double CoreNavigation::CLP::LogEntry::PrivateData::Clock::CheckTypeAndMergeFrom(CoreNavigation::CLP::LogEntry::PrivateData::Clock *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  return CoreNavigation::CLP::LogEntry::PrivateData::Clock::MergeFrom(this, lpsrc);
}

double CoreNavigation::CLP::LogEntry::PrivateData::Clock::CopyFrom(CoreNavigation::CLP::LogEntry::PrivateData::Clock *this, const CoreNavigation::CLP::LogEntry::PrivateData::Clock *a2)
{
  if (a2 != this)
  {
    (*(void (**)(CoreNavigation::CLP::LogEntry::PrivateData::Clock *))(*(void *)this + 32))(this);
    return CoreNavigation::CLP::LogEntry::PrivateData::Clock::MergeFrom(this, a2);
  }
  return result;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::Clock::IsInitialized(CoreNavigation::CLP::LogEntry::PrivateData::Clock *this)
{
  return 1;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::Clock::Swap(uint64_t this, CoreNavigation::CLP::LogEntry::PrivateData::Clock *a2)
{
  if (a2 != (CoreNavigation::CLP::LogEntry::PrivateData::Clock *)this)
  {
    uint64_t v2 = *(void *)(this + 8);
    uint64_t v3 = *(void *)(this + 16);
    uint64_t v4 = *((void *)a2 + 2);
    *(void *)(this + 8) = *((void *)a2 + 1);
    *(void *)(this + 16) = v4;
    *((void *)a2 + 1) = v2;
    *((void *)a2 + 2) = v3;
    uint64_t v5 = *(void *)(this + 24);
    *(void *)(this + 24) = *((void *)a2 + 3);
    *((void *)a2 + 3) = v5;
    uint64_t v6 = *(void *)(this + 32);
    *(void *)(this + 32) = *((void *)a2 + 4);
    *((void *)a2 + 4) = v6;
    LODWORD(v6) = *(_DWORD *)(this + 44);
    *(_DWORD *)(this + 44) = *((_DWORD *)a2 + 11);
    *((_DWORD *)a2 + 11) = v6;
    LODWORD(v6) = *(_DWORD *)(this + 40);
    *(_DWORD *)(this + 40) = *((_DWORD *)a2 + 10);
    *((_DWORD *)a2 + 10) = v6;
  }
  return this;
}

void *CoreNavigation::CLP::LogEntry::PrivateData::Clock::GetTypeName@<X0>(void *a1@<X8>)
{
  return sub_18DEDE7B0(a1, "CoreNavigation.CLP.LogEntry.PrivateData.Clock");
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReport::SharedCtor(uint64_t this)
{
  *(void *)(this + 8) = 0;
  *(void *)(this + 40) = 0;
  return this;
}

CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReport *CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReport::MeasurementReport(CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReport *this, const CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReport *a2)
{
  *((void *)this + 5) = 0;
  *(void *)this = &unk_1EDD0CCF8;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReport::MergeFrom(this, a2);
  return this;
}

void sub_18DFCD824(_Unwind_Exception *a1)
{
  sub_18DF0C324(v1 + 2);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite((wireless_diagnostics::google::protobuf::MessageLite *)v1);
  _Unwind_Resume(a1);
}

double CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReport::MergeFrom(CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReport *this, const CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReport *a2)
{
  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v13);
  }
  uint64_t v4 = (CoreNavigation::CLP::LogEntry::PrivateData *)wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReport *)((char *)this + 16));
  if (*((int *)a2 + 6) >= 1)
  {
    uint64_t v6 = 0;
    do
    {
      uint64_t v7 = *(const CoreNavigation::CLP::LogEntry::PrivateData::Measurement **)(*((void *)a2 + 2) + 8 * v6);
      int v8 = *((_DWORD *)this + 7);
      uint64_t v9 = *((int *)this + 6);
      if ((int)v9 >= v8)
      {
        if (v8 == *((_DWORD *)this + 8))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReport *)((char *)this + 16));
          int v8 = *((_DWORD *)this + 7);
        }
        *((_DWORD *)this + 7) = v8 + 1;
        operator new();
      }
      uint64_t v10 = *((void *)this + 2);
      *((_DWORD *)this + 6) = v9 + 1;
      CoreNavigation::CLP::LogEntry::PrivateData::Measurement::MergeFrom(*(CoreNavigation::CLP::LogEntry::PrivateData::Measurement **)(v10 + 8 * v9), v7);
      ++v6;
    }
    while (v6 < *((int *)a2 + 6));
  }
  if (*((unsigned char *)a2 + 44))
  {
    *((_DWORD *)this + 11) |= 1u;
    int v11 = (CoreNavigation::CLP::LogEntry::PrivateData::Clock *)*((void *)this + 1);
    if (!v11) {
      operator new();
    }
    unint64_t v12 = (const CoreNavigation::CLP::LogEntry::PrivateData::Clock *)*((void *)a2 + 1);
    if (!v12)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(v4);
      unint64_t v12 = *(const CoreNavigation::CLP::LogEntry::PrivateData::Clock **)(CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReport::default_instance_
                                                                        + 8);
    }
    return CoreNavigation::CLP::LogEntry::PrivateData::Clock::MergeFrom(v11, v12);
  }
  return result;
}

void sub_18DFCDA48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReport::~MeasurementReport(CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReport *this)
{
  *(void *)this = &unk_1EDD0CCF8;
  CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReport::SharedDtor(this);
  sub_18DF0C324((uint64_t *)this + 2);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  uint64_t vars8;

  CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReport::~MeasurementReport(this);

  JUMPOUT(0x192FA6240);
}

void CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReport::SharedDtor(CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReport *this)
{
  CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);
  if ((CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReport *)CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReport::default_instance_ != this)
  {
    uint64_t v2 = *((void *)this + 1);
    if (v2)
    {
      uint64_t v3 = *(void (**)(void))(*(void *)v2 + 8);
      v3();
    }
  }
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReport::default_instance(CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReport *this)
{
  return CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReport::default_instance_;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReport::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 40) = a2;
  return this;
}

void CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReport::New(CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReport *this)
{
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReport::Clear(CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReport *this)
{
  if (*((unsigned char *)this + 44))
  {
    uint64_t v2 = *((void *)this + 1);
    if (v2) {
      CoreNavigation::CLP::LogEntry::PrivateData::Clock::Clear(v2);
    }
  }
  uint64_t result = sub_18DF0C208((uint64_t)this + 16);
  *((_DWORD *)this + 11) = 0;
  return result;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReport::MergePartialFromCodedStream(CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReport *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  uint64_t v4 = (CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReport *)((char *)this + 16);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v5 = (char *)*((void *)a2 + 1);
        if ((unint64_t)v5 >= *((void *)a2 + 2) || *v5 < 0)
        {
          unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
          *((_DWORD *)a2 + 8) = TagFallback;
          if (!TagFallback) {
            return 1;
          }
        }
        else
        {
          unint64_t TagFallback = *v5;
          *((_DWORD *)a2 + 8) = TagFallback;
          *((void *)a2 + 1) = v5 + 1;
          if (!TagFallback) {
            return 1;
          }
        }
        if (TagFallback >> 3 != 1) {
          break;
        }
        int v7 = TagFallback & 7;
        if (v7 != 2) {
          goto LABEL_18;
        }
        *((_DWORD *)this + 11) |= 1u;
        int v8 = (CoreNavigation::CLP::LogEntry::PrivateData::Clock *)*((void *)this + 1);
        if (!v8) {
          operator new();
        }
        unsigned int v27 = 0;
        uint64_t v9 = (char *)*((void *)a2 + 1);
        if ((unint64_t)v9 >= *((void *)a2 + 2) || *v9 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v27))return 0; {
        }
          }
        else
        {
          unsigned int v27 = *v9;
          *((void *)a2 + 1) = v9 + 1;
        }
        int v10 = *((_DWORD *)a2 + 14);
        int v11 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v10 + 1;
        if (v10 >= v11) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CoreNavigation::CLP::LogEntry::PrivateData::Clock::MergePartialFromCodedStream(v8, a2)
          || !*((unsigned char *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        int v12 = *((_DWORD *)a2 + 14);
        BOOL v13 = __OFSUB__(v12, 1);
        int v14 = v12 - 1;
        if (v14 < 0 == v13) {
          *((_DWORD *)a2 + 14) = v14;
        }
        int v15 = (unsigned char *)*((void *)a2 + 1);
        if ((unint64_t)v15 < *((void *)a2 + 2) && *v15 == 18) {
          goto LABEL_29;
        }
      }
      if (TagFallback >> 3 != 2) {
        break;
      }
      int v7 = TagFallback & 7;
      if (v7 != 2) {
        goto LABEL_18;
      }
      while (1)
      {
        int v16 = *((_DWORD *)this + 7);
        uint64_t v17 = *((int *)this + 6);
        if ((int)v17 >= v16)
        {
          if (v16 == *((_DWORD *)this + 8))
          {
            wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v4);
            int v16 = *((_DWORD *)this + 7);
          }
          *((_DWORD *)this + 7) = v16 + 1;
          operator new();
        }
        uint64_t v18 = *((void *)this + 2);
        *((_DWORD *)this + 6) = v17 + 1;
        int v19 = *(CoreNavigation::CLP::LogEntry::PrivateData::Measurement **)(v18 + 8 * v17);
        unsigned int v28 = 0;
        int v20 = (char *)*((void *)a2 + 1);
        if ((unint64_t)v20 >= *((void *)a2 + 2) || *v20 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v28))return 0; {
        }
          }
        else
        {
          unsigned int v28 = *v20;
          *((void *)a2 + 1) = v20 + 1;
        }
        int v21 = *((_DWORD *)a2 + 14);
        int v22 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v21 + 1;
        if (v21 >= v22) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CoreNavigation::CLP::LogEntry::PrivateData::Measurement::MergePartialFromCodedStream(v19, a2)|| !*((unsigned char *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        int v23 = *((_DWORD *)a2 + 14);
        BOOL v13 = __OFSUB__(v23, 1);
        int v24 = v23 - 1;
        if (v24 < 0 == v13) {
          *((_DWORD *)a2 + 14) = v24;
        }
        int v15 = (unsigned char *)*((void *)a2 + 1);
        int v25 = (unsigned char *)*((void *)a2 + 2);
        if (v15 >= v25 || *v15 != 18) {
          break;
        }
LABEL_29:
        *((void *)a2 + 1) = v15 + 1;
      }
      if (v15 == v25 && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
      {
        *((_DWORD *)a2 + 8) = 0;
        uint64_t result = 1;
        *((unsigned char *)a2 + 36) = 1;
        return result;
      }
    }
    int v7 = TagFallback & 7;
LABEL_18:
    if (v7 == 4) {
      return 1;
    }
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0; {
  }
    }
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReport::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  if (*(unsigned char *)(this + 44))
  {
    uint64_t v6 = *(void *)(this + 8);
    if (!v6)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)this);
      uint64_t v6 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReport::default_instance_ + 8);
    }
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v6, a2, a4);
  }
  if (*(int *)(v5 + 24) >= 1)
  {
    uint64_t v7 = 0;
    do
      this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(void *)(*(void *)(v5 + 16) + 8 * v7++), a2, a4);
    while (v7 < *(int *)(v5 + 24));
  }
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReport::ByteSize(CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReport *this)
{
  if (*((unsigned char *)this + 44))
  {
    uint64_t v3 = (CoreNavigation::CLP::LogEntry::PrivateData::Clock *)*((void *)this + 1);
    if (!v3)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(0);
      uint64_t v3 = *(CoreNavigation::CLP::LogEntry::PrivateData::Clock **)(CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReport::default_instance_
                                                                 + 8);
    }
    uint64_t v4 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CoreNavigation::CLP::LogEntry::PrivateData::Clock::ByteSize(v3);
    int v5 = (int)v4;
    if (v4 >= 0x80) {
      int v6 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v4);
    }
    else {
      int v6 = 1;
    }
    int v2 = v5 + v6 + 1;
  }
  else
  {
    int v2 = 0;
  }
  int v7 = *((_DWORD *)this + 6);
  uint64_t v8 = (v7 + v2);
  if (v7 >= 1)
  {
    uint64_t v9 = 0;
    do
    {
      int v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CoreNavigation::CLP::LogEntry::PrivateData::Measurement::ByteSize(*(void *)(*((void *)this + 2) + 8 * v9));
      int v11 = (int)v10;
      if (v10 >= 0x80) {
        int v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v10);
      }
      else {
        int v12 = 1;
      }
      uint64_t v8 = (v11 + v8 + v12);
      ++v9;
    }
    while (v9 < *((int *)this + 6));
  }
  *((_DWORD *)this + 10) = v8;
  return v8;
}

double CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReport::CheckTypeAndMergeFrom(CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReport *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  return CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReport::MergeFrom(this, lpsrc);
}

double CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReport::CopyFrom(CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReport *this, const CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReport *a2)
{
  if (a2 != this)
  {
    (*(void (**)(CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReport *))(*(void *)this + 32))(this);
    return CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReport::MergeFrom(this, a2);
  }
  return result;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReport::IsInitialized(CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReport *this)
{
  return 1;
}

CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReport *CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReport::Swap(CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReport *this, CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReport *a2)
{
  if (a2 != this)
  {
    uint64_t v3 = this;
    uint64_t v4 = *((void *)this + 1);
    *((void *)this + 1) = *((void *)a2 + 1);
    *((void *)a2 + 1) = v4;
    this = (CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReport *)wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Swap();
    int v5 = *((_DWORD *)v3 + 11);
    *((_DWORD *)v3 + 11) = *((_DWORD *)a2 + 11);
    *((_DWORD *)a2 + 11) = v5;
    int v6 = *((_DWORD *)v3 + 10);
    *((_DWORD *)v3 + 10) = *((_DWORD *)a2 + 10);
    *((_DWORD *)a2 + 10) = v6;
  }
  return this;
}

void *CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReport::GetTypeName@<X0>(void *a1@<X8>)
{
  return sub_18DEDE7B0(a1, "CoreNavigation.CLP.LogEntry.PrivateData.MeasurementReport");
}

double CoreNavigation::CLP::LogEntry::PrivateData::Wgs84Ecef::SharedCtor(CoreNavigation::CLP::LogEntry::PrivateData::Wgs84Ecef *this)
{
  double result = 0.0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  return result;
}

CoreNavigation::CLP::LogEntry::PrivateData::Wgs84Ecef *CoreNavigation::CLP::LogEntry::PrivateData::Wgs84Ecef::Wgs84Ecef(CoreNavigation::CLP::LogEntry::PrivateData::Wgs84Ecef *this, const CoreNavigation::CLP::LogEntry::PrivateData::Wgs84Ecef *a2)
{
  *(void *)this = &unk_1EDD0F278;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  CoreNavigation::CLP::LogEntry::PrivateData::Wgs84Ecef::MergeFrom(this, a2);
  return this;
}

void sub_18DFCE338(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

double CoreNavigation::CLP::LogEntry::PrivateData::Wgs84Ecef::MergeFrom(CoreNavigation::CLP::LogEntry::PrivateData::Wgs84Ecef *this, const CoreNavigation::CLP::LogEntry::PrivateData::Wgs84Ecef *a2)
{
  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v6);
  }
  LOBYTE(v5) = *((unsigned char *)a2 + 36);
  if ((_BYTE)v5)
  {
    if (*((unsigned char *)a2 + 36))
    {
      double result = *((double *)a2 + 1);
      *((_DWORD *)this + 9) |= 1u;
      *((double *)this + 1) = result;
      int v5 = *((_DWORD *)a2 + 9);
      if ((v5 & 2) == 0)
      {
LABEL_6:
        if ((v5 & 4) == 0) {
          return result;
        }
        goto LABEL_7;
      }
    }
    else if ((*((unsigned char *)a2 + 36) & 2) == 0)
    {
      goto LABEL_6;
    }
    double result = *((double *)a2 + 2);
    *((_DWORD *)this + 9) |= 2u;
    *((double *)this + 2) = result;
    if ((*((_DWORD *)a2 + 9) & 4) == 0) {
      return result;
    }
LABEL_7:
    double result = *((double *)a2 + 3);
    *((_DWORD *)this + 9) |= 4u;
    *((double *)this + 3) = result;
  }
  return result;
}

void sub_18DFCE420(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CoreNavigation::CLP::LogEntry::PrivateData::Wgs84Ecef::~Wgs84Ecef(CoreNavigation::CLP::LogEntry::PrivateData::Wgs84Ecef *this)
{
  *(void *)this = &unk_1EDD0F278;
  CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  uint64_t vars8;

  CoreNavigation::CLP::LogEntry::PrivateData::Wgs84Ecef::~Wgs84Ecef(this);

  JUMPOUT(0x192FA6240);
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::Wgs84Ecef::default_instance(CoreNavigation::CLP::LogEntry::PrivateData::Wgs84Ecef *this)
{
  return CoreNavigation::CLP::LogEntry::PrivateData::Wgs84Ecef::default_instance_;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::Wgs84Ecef::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 32) = a2;
  return this;
}

void CoreNavigation::CLP::LogEntry::PrivateData::Wgs84Ecef::New(CoreNavigation::CLP::LogEntry::PrivateData::Wgs84Ecef *this)
{
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::Wgs84Ecef::Clear(uint64_t this)
{
  if (*(unsigned char *)(this + 36))
  {
    *(void *)(this + 8) = 0;
    *(void *)(this + 16) = 0;
    *(void *)(this + 24) = 0;
  }
  *(_DWORD *)(this + 36) = 0;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::Wgs84Ecef::MergePartialFromCodedStream(CoreNavigation::CLP::LogEntry::PrivateData::Wgs84Ecef *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  do
  {
    while (1)
    {
      while (1)
      {
        uint64_t v4 = (char *)*((void *)a2 + 1);
        if ((unint64_t)v4 >= *((void *)a2 + 2) || *v4 < 0)
        {
          unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
          *((_DWORD *)a2 + 8) = TagFallback;
          if (!TagFallback) {
            return 1;
          }
        }
        else
        {
          unint64_t TagFallback = *v4;
          *((_DWORD *)a2 + 8) = TagFallback;
          *((void *)a2 + 1) = v4 + 1;
          if (!TagFallback) {
            return 1;
          }
        }
        unsigned int v6 = TagFallback >> 3;
        if (TagFallback >> 3 != 1) {
          break;
        }
        int v7 = TagFallback & 7;
        if (v7 != 1) {
          goto LABEL_27;
        }
        unint64_t v11 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, &v11) & 1) == 0) {
          return 0;
        }
        *((void *)this + 1) = v11;
        *((_DWORD *)this + 9) |= 1u;
        uint64_t v8 = (unsigned char *)*((void *)a2 + 1);
        if ((unint64_t)v8 < *((void *)a2 + 2) && *v8 == 17)
        {
          *((void *)a2 + 1) = v8 + 1;
LABEL_17:
          unint64_t v11 = 0;
          if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, &v11) & 1) == 0) {
            return 0;
          }
          *((void *)this + 2) = v11;
          *((_DWORD *)this + 9) |= 2u;
          uint64_t v9 = (unsigned char *)*((void *)a2 + 1);
          if ((unint64_t)v9 < *((void *)a2 + 2) && *v9 == 25)
          {
            *((void *)a2 + 1) = v9 + 1;
            goto LABEL_21;
          }
        }
      }
      if (v6 == 2)
      {
        int v7 = TagFallback & 7;
        if (v7 != 1) {
          goto LABEL_27;
        }
        goto LABEL_17;
      }
      if (v6 != 3)
      {
        int v7 = TagFallback & 7;
        goto LABEL_27;
      }
      int v7 = TagFallback & 7;
      if (v7 == 1) {
        break;
      }
LABEL_27:
      if (v7 == 4) {
        return 1;
      }
      if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0; {
    }
      }
LABEL_21:
    unint64_t v11 = 0;
    if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, &v11) & 1) == 0) {
      return 0;
    }
    *((void *)this + 3) = v11;
    *((_DWORD *)this + 9) |= 4u;
  }
  while (*((void *)a2 + 1) != *((void *)a2 + 2)
       || !*((_DWORD *)a2 + 11) && *((_DWORD *)a2 + 6) != *((_DWORD *)a2 + 10));
  *((_DWORD *)a2 + 8) = 0;
  uint64_t result = 1;
  *((unsigned char *)a2 + 36) = 1;
  return result;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::Wgs84Ecef::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3)
{
  uint64_t v4 = this;
  int v5 = *(_DWORD *)(this + 36);
  if ((v5 & 1) == 0)
  {
    if ((v5 & 2) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, (uint64_t)a2, *(double *)(v4 + 16), a3);
    if ((*(_DWORD *)(v4 + 36) & 4) == 0) {
      return this;
    }
    goto LABEL_7;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, (uint64_t)a2, *(double *)(this + 8), a3);
  int v5 = *(_DWORD *)(v4 + 36);
  if ((v5 & 2) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v5 & 4) == 0) {
    return this;
  }
LABEL_7:
  double v6 = *(double *)(v4 + 24);

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, (uint64_t)a2, v6, a3);
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::Wgs84Ecef::ByteSize(CoreNavigation::CLP::LogEntry::PrivateData::Wgs84Ecef *this)
{
  uint64_t v1 = *((unsigned __int8 *)this + 36);
  if (*((unsigned char *)this + 36))
  {
    unsigned int v2 = ((int)(v1 << 31) >> 31) & 9;
    if ((v1 & 2) != 0) {
      v2 += 9;
    }
    if ((v1 & 4) != 0) {
      uint64_t v1 = v2 + 9;
    }
    else {
      uint64_t v1 = v2;
    }
  }
  *((_DWORD *)this + 8) = v1;
  return v1;
}

double CoreNavigation::CLP::LogEntry::PrivateData::Wgs84Ecef::CheckTypeAndMergeFrom(CoreNavigation::CLP::LogEntry::PrivateData::Wgs84Ecef *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  return CoreNavigation::CLP::LogEntry::PrivateData::Wgs84Ecef::MergeFrom(this, lpsrc);
}

double CoreNavigation::CLP::LogEntry::PrivateData::Wgs84Ecef::CopyFrom(CoreNavigation::CLP::LogEntry::PrivateData::Wgs84Ecef *this, const CoreNavigation::CLP::LogEntry::PrivateData::Wgs84Ecef *a2)
{
  if (a2 != this)
  {
    (*(void (**)(CoreNavigation::CLP::LogEntry::PrivateData::Wgs84Ecef *))(*(void *)this + 32))(this);
    return CoreNavigation::CLP::LogEntry::PrivateData::Wgs84Ecef::MergeFrom(this, a2);
  }
  return result;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::Wgs84Ecef::IsInitialized(CoreNavigation::CLP::LogEntry::PrivateData::Wgs84Ecef *this)
{
  return 1;
}

double CoreNavigation::CLP::LogEntry::PrivateData::Wgs84Ecef::Swap(CoreNavigation::CLP::LogEntry::PrivateData::Wgs84Ecef *this, CoreNavigation::CLP::LogEntry::PrivateData::Wgs84Ecef *a2)
{
  if (a2 != this)
  {
    uint64_t v2 = *((void *)this + 1);
    *((void *)this + 1) = *((void *)a2 + 1);
    *((void *)a2 + 1) = v2;
    uint64_t v3 = *((void *)this + 2);
    *((void *)this + 2) = *((void *)a2 + 2);
    *((void *)a2 + 2) = v3;
    double result = *((double *)this + 3);
    *((void *)this + 3) = *((void *)a2 + 3);
    *((double *)a2 + 3) = result;
    int v5 = *((_DWORD *)this + 9);
    *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
    *((_DWORD *)a2 + 9) = v5;
    int v6 = *((_DWORD *)this + 8);
    *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
    *((_DWORD *)a2 + 8) = v6;
  }
  return result;
}

void *CoreNavigation::CLP::LogEntry::PrivateData::Wgs84Ecef::GetTypeName@<X0>(void *a1@<X8>)
{
  return sub_18DEDE7B0(a1, "CoreNavigation.CLP.LogEntry.PrivateData.Wgs84Ecef");
}

double CoreNavigation::CLP::LogEntry::PrivateData::SvBandCorrections::SharedCtor(CoreNavigation::CLP::LogEntry::PrivateData::SvBandCorrections *this)
{
  *((void *)this + 5) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  return result;
}

CoreNavigation::CLP::LogEntry::PrivateData::SvBandCorrections *CoreNavigation::CLP::LogEntry::PrivateData::SvBandCorrections::SvBandCorrections(CoreNavigation::CLP::LogEntry::PrivateData::SvBandCorrections *this, const CoreNavigation::CLP::LogEntry::PrivateData::SvBandCorrections *a2)
{
  *(void *)this = &unk_1EDD0CFC8;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((void *)this + 5) = 0;
  CoreNavigation::CLP::LogEntry::PrivateData::SvBandCorrections::MergeFrom(this, a2);
  return this;
}

void sub_18DFCEA10(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void CoreNavigation::CLP::LogEntry::PrivateData::SvBandCorrections::MergeFrom(CoreNavigation::CLP::LogEntry::PrivateData::SvBandCorrections *this, const CoreNavigation::CLP::LogEntry::PrivateData::SvBandCorrections *a2)
{
  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v10);
  }
  LOBYTE(v4) = *((unsigned char *)a2 + 44);
  if ((_BYTE)v4)
  {
    if (*((unsigned char *)a2 + 44))
    {
      unsigned int v5 = *((_DWORD *)a2 + 6);
      if (v5 >= 0xD) {
        __assert_rtn("set_band", "CoreNavigationCLPGnssMeasApi.pb.h", 10571, "::CoreNavigation::CLP::LogEntry::PrivateData::Band_IsValid(value)");
      }
      *((_DWORD *)this + 11) |= 1u;
      *((_DWORD *)this + 6) = v5;
      int v4 = *((_DWORD *)a2 + 11);
    }
    if ((v4 & 2) != 0)
    {
      uint64_t v6 = *((void *)a2 + 1);
      *((_DWORD *)this + 11) |= 2u;
      *((void *)this + 1) = v6;
      int v4 = *((_DWORD *)a2 + 11);
      if ((v4 & 4) == 0)
      {
LABEL_9:
        if ((v4 & 8) == 0) {
          goto LABEL_10;
        }
        goto LABEL_14;
      }
    }
    else if ((v4 & 4) == 0)
    {
      goto LABEL_9;
    }
    uint64_t v7 = *((void *)a2 + 2);
    *((_DWORD *)this + 11) |= 4u;
    *((void *)this + 2) = v7;
    int v4 = *((_DWORD *)a2 + 11);
    if ((v4 & 8) == 0)
    {
LABEL_10:
      if ((v4 & 0x10) == 0) {
        return;
      }
LABEL_15:
      unsigned int v9 = *((_DWORD *)a2 + 7);
      if (v9 >= 3) {
        __assert_rtn("set_ionospheric_model", "CoreNavigationCLPGnssMeasApi.pb.h", 10660, "::CoreNavigation::CLP::LogEntry::PrivateData::IonosphericCorrectionSource_IsValid(value)");
      }
      *((_DWORD *)this + 11) |= 0x10u;
      *((_DWORD *)this + 7) = v9;
      return;
    }
LABEL_14:
    uint64_t v8 = *((void *)a2 + 4);
    *((_DWORD *)this + 11) |= 8u;
    *((void *)this + 4) = v8;
    if ((*((_DWORD *)a2 + 11) & 0x10) == 0) {
      return;
    }
    goto LABEL_15;
  }
}

void sub_18DFCEB84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CoreNavigation::CLP::LogEntry::PrivateData::SvBandCorrections::~SvBandCorrections(CoreNavigation::CLP::LogEntry::PrivateData::SvBandCorrections *this)
{
  *(void *)this = &unk_1EDD0CFC8;
  CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  uint64_t vars8;

  CoreNavigation::CLP::LogEntry::PrivateData::SvBandCorrections::~SvBandCorrections(this);

  JUMPOUT(0x192FA6240);
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::SvBandCorrections::default_instance(CoreNavigation::CLP::LogEntry::PrivateData::SvBandCorrections *this)
{
  return CoreNavigation::CLP::LogEntry::PrivateData::SvBandCorrections::default_instance_;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::SvBandCorrections::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 40) = a2;
  return this;
}

void CoreNavigation::CLP::LogEntry::PrivateData::SvBandCorrections::New(CoreNavigation::CLP::LogEntry::PrivateData::SvBandCorrections *this)
{
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::SvBandCorrections::Clear(uint64_t this)
{
  if (*(unsigned char *)(this + 44))
  {
    *(_OWORD *)(this + 24) = 0u;
    *(_OWORD *)(this + 8) = 0u;
  }
  *(_DWORD *)(this + 44) = 0;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::SvBandCorrections::MergePartialFromCodedStream(CoreNavigation::CLP::LogEntry::PrivateData::SvBandCorrections *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  while (2)
  {
    int v4 = (char *)*((void *)a2 + 1);
    if ((unint64_t)v4 >= *((void *)a2 + 2) || *v4 < 0)
    {
      unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      if (!TagFallback) {
        return 1;
      }
    }
    else
    {
      unint64_t TagFallback = *v4;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((void *)a2 + 1) = v4 + 1;
      if (!TagFallback) {
        return 1;
      }
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        int v6 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_19;
        }
        v17[0] = 0;
        uint64_t v7 = (char *)*((void *)a2 + 1);
        if ((unint64_t)v7 >= *((void *)a2 + 2) || *v7 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v17);
          if (!result) {
            return result;
          }
          unsigned int v8 = v17[0];
        }
        else
        {
          unsigned int v8 = *v7;
          *((void *)a2 + 1) = v7 + 1;
        }
        if (v8 <= 0xC)
        {
          *((_DWORD *)this + 11) |= 1u;
          *((_DWORD *)this + 6) = v8;
        }
        int v12 = (unsigned char *)*((void *)a2 + 1);
        if ((unint64_t)v12 < *((void *)a2 + 2) && *v12 == 17)
        {
          *((void *)a2 + 1) = v12 + 1;
          goto LABEL_30;
        }
        continue;
      case 2u:
        int v6 = TagFallback & 7;
        if (v6 != 1) {
          goto LABEL_19;
        }
LABEL_30:
        *(void *)uint64_t v17 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, (unint64_t *)v17) & 1) == 0)return 0; {
        *((void *)this + 1) = *(void *)v17;
        }
        *((_DWORD *)this + 11) |= 2u;
        BOOL v13 = (unsigned char *)*((void *)a2 + 1);
        if ((unint64_t)v13 >= *((void *)a2 + 2) || *v13 != 25) {
          continue;
        }
        *((void *)a2 + 1) = v13 + 1;
LABEL_34:
        *(void *)uint64_t v17 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, (unint64_t *)v17) & 1) == 0)return 0; {
        *((void *)this + 2) = *(void *)v17;
        }
        *((_DWORD *)this + 11) |= 4u;
        int v14 = (unsigned char *)*((void *)a2 + 1);
        if ((unint64_t)v14 >= *((void *)a2 + 2) || *v14 != 33) {
          continue;
        }
        *((void *)a2 + 1) = v14 + 1;
LABEL_38:
        *(void *)uint64_t v17 = 0;
        if (wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, (unint64_t *)v17))
        {
          *((void *)this + 4) = *(void *)v17;
          *((_DWORD *)this + 11) |= 8u;
          int v15 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v9 = *((void *)a2 + 2);
          if ((unint64_t)v15 < v9 && *v15 == 40)
          {
            int v10 = v15 + 1;
            *((void *)a2 + 1) = v10;
LABEL_42:
            v17[0] = 0;
            if ((unint64_t)v10 >= v9 || *v10 < 0)
            {
              uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v17);
              if (!result) {
                return result;
              }
              unsigned int v16 = v17[0];
            }
            else
            {
              unsigned int v16 = *v10;
              *((void *)a2 + 1) = v10 + 1;
            }
            if (v16 <= 2)
            {
              *((_DWORD *)this + 11) |= 0x10u;
              *((_DWORD *)this + 7) = v16;
            }
            if (*((void *)a2 + 1) == *((void *)a2 + 2)
              && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
            {
              *((_DWORD *)a2 + 8) = 0;
              uint64_t result = 1;
              *((unsigned char *)a2 + 36) = 1;
              return result;
            }
          }
          continue;
        }
        return 0;
      case 3u:
        int v6 = TagFallback & 7;
        if (v6 == 1) {
          goto LABEL_34;
        }
        goto LABEL_19;
      case 4u:
        int v6 = TagFallback & 7;
        if (v6 == 1) {
          goto LABEL_38;
        }
        goto LABEL_19;
      case 5u:
        int v6 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_19;
        }
        int v10 = (char *)*((void *)a2 + 1);
        unint64_t v9 = *((void *)a2 + 2);
        goto LABEL_42;
      default:
        int v6 = TagFallback & 7;
LABEL_19:
        if (v6 == 4) {
          return 1;
        }
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0; {
        continue;
        }
    }
  }
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::SvBandCorrections::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  int v6 = *(_DWORD *)(this + 44);
  if (v6)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned int *)(this + 24), (uint64_t)a2, a4);
    int v6 = *(_DWORD *)(v5 + 44);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, (uint64_t)a2, *(double *)(v5 + 8), a3);
  int v6 = *(_DWORD *)(v5 + 44);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
LABEL_10:
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, (uint64_t)a2, *(double *)(v5 + 32), a3);
    if ((*(_DWORD *)(v5 + 44) & 0x10) == 0) {
      return this;
    }
    goto LABEL_11;
  }
LABEL_9:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, (uint64_t)a2, *(double *)(v5 + 16), a3);
  int v6 = *(_DWORD *)(v5 + 44);
  if ((v6 & 8) != 0) {
    goto LABEL_10;
  }
LABEL_5:
  if ((v6 & 0x10) == 0) {
    return this;
  }
LABEL_11:
  uint64_t v7 = *(unsigned int *)(v5 + 28);

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, v7, (uint64_t)a2, a4);
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::SvBandCorrections::ByteSize(CoreNavigation::CLP::LogEntry::PrivateData::SvBandCorrections *this)
{
  LOBYTE(v2) = *((unsigned char *)this + 44);
  if ((_BYTE)v2)
  {
    if (*((unsigned char *)this + 44))
    {
      uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 6);
      if ((v5 & 0x80000000) != 0)
      {
        unsigned int v3 = 11;
      }
      else if (v5 >= 0x80)
      {
        unsigned int v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5) + 1;
        int v2 = *((_DWORD *)this + 11);
      }
      else
      {
        unsigned int v3 = 2;
      }
    }
    else
    {
      unsigned int v3 = 0;
    }
    if ((v2 & 2) != 0) {
      v3 += 9;
    }
    if ((v2 & 4) != 0) {
      v3 += 9;
    }
    if ((v2 & 8) != 0) {
      uint64_t v4 = v3 + 9;
    }
    else {
      uint64_t v4 = v3;
    }
    if ((v2 & 0x10) != 0)
    {
      int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 7);
      if ((v6 & 0x80000000) != 0)
      {
        int v7 = 11;
      }
      else if (v6 >= 0x80)
      {
        int v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6) + 1;
      }
      else
      {
        int v7 = 2;
      }
      uint64_t v4 = (v7 + v4);
    }
  }
  else
  {
    uint64_t v4 = 0;
  }
  *((_DWORD *)this + 10) = v4;
  return v4;
}

void CoreNavigation::CLP::LogEntry::PrivateData::SvBandCorrections::CheckTypeAndMergeFrom(CoreNavigation::CLP::LogEntry::PrivateData::SvBandCorrections *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  CoreNavigation::CLP::LogEntry::PrivateData::SvBandCorrections::MergeFrom(this, lpsrc);
}

void CoreNavigation::CLP::LogEntry::PrivateData::SvBandCorrections::CopyFrom(CoreNavigation::CLP::LogEntry::PrivateData::SvBandCorrections *this, const CoreNavigation::CLP::LogEntry::PrivateData::SvBandCorrections *a2)
{
  if (a2 != this)
  {
    (*(void (**)(CoreNavigation::CLP::LogEntry::PrivateData::SvBandCorrections *))(*(void *)this + 32))(this);
    CoreNavigation::CLP::LogEntry::PrivateData::SvBandCorrections::MergeFrom(this, a2);
  }
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::SvBandCorrections::IsInitialized(CoreNavigation::CLP::LogEntry::PrivateData::SvBandCorrections *this)
{
  return 1;
}

double CoreNavigation::CLP::LogEntry::PrivateData::SvBandCorrections::Swap(CoreNavigation::CLP::LogEntry::PrivateData::SvBandCorrections *this, CoreNavigation::CLP::LogEntry::PrivateData::SvBandCorrections *a2)
{
  if (a2 != this)
  {
    int v2 = *((_DWORD *)this + 6);
    *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
    *((_DWORD *)a2 + 6) = v2;
    uint64_t v3 = *((void *)this + 1);
    *((void *)this + 1) = *((void *)a2 + 1);
    *((void *)a2 + 1) = v3;
    uint64_t v4 = *((void *)this + 2);
    *((void *)this + 2) = *((void *)a2 + 2);
    *((void *)a2 + 2) = v4;
    double result = *((double *)this + 4);
    *((void *)this + 4) = *((void *)a2 + 4);
    *((double *)a2 + 4) = result;
    int v6 = *((_DWORD *)this + 7);
    *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
    *((_DWORD *)a2 + 7) = v6;
    int v7 = *((_DWORD *)this + 11);
    *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
    *((_DWORD *)a2 + 11) = v7;
    int v8 = *((_DWORD *)this + 10);
    *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
    *((_DWORD *)a2 + 10) = v8;
  }
  return result;
}

void *CoreNavigation::CLP::LogEntry::PrivateData::SvBandCorrections::GetTypeName@<X0>(void *a1@<X8>)
{
  return sub_18DEDE7B0(a1, "CoreNavigation.CLP.LogEntry.PrivateData.SvBandCorrections");
}

void *CoreNavigation::CLP::LogEntry::PrivateData::SvPositionAtTime::SharedCtor(void *this)
{
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

CoreNavigation::CLP::LogEntry::PrivateData::SvPositionAtTime *CoreNavigation::CLP::LogEntry::PrivateData::SvPositionAtTime::SvPositionAtTime(CoreNavigation::CLP::LogEntry::PrivateData::SvPositionAtTime *this, const CoreNavigation::CLP::LogEntry::PrivateData::SvPositionAtTime *a2)
{
  *(void *)this = &unk_1EDD0C848;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  CoreNavigation::CLP::LogEntry::PrivateData::SvPositionAtTime::MergeFrom(this, a2);
  return this;
}

void sub_18DFCF36C(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

double CoreNavigation::CLP::LogEntry::PrivateData::SvPositionAtTime::MergeFrom(CoreNavigation::CLP::LogEntry::PrivateData::SvPositionAtTime *this, const CoreNavigation::CLP::LogEntry::PrivateData::SvPositionAtTime *a2)
{
  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v8);
  }
  LOBYTE(v5) = *((unsigned char *)a2 + 28);
  if ((_BYTE)v5)
  {
    if (*((unsigned char *)a2 + 28))
    {
      double result = *((double *)a2 + 1);
      *((_DWORD *)this + 7) |= 1u;
      *((double *)this + 1) = result;
      int v5 = *((_DWORD *)a2 + 7);
    }
    if ((v5 & 2) != 0)
    {
      *((_DWORD *)this + 7) |= 2u;
      int v6 = (CoreNavigation::CLP::LogEntry::PrivateData::Wgs84Ecef *)*((void *)this + 2);
      if (!v6) {
        operator new();
      }
      int v7 = (const CoreNavigation::CLP::LogEntry::PrivateData::Wgs84Ecef *)*((void *)a2 + 2);
      if (!v7)
      {
        CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);
        int v7 = *(const CoreNavigation::CLP::LogEntry::PrivateData::Wgs84Ecef **)(CoreNavigation::CLP::LogEntry::PrivateData::SvPositionAtTime::default_instance_
                                                                             + 16);
      }
      return CoreNavigation::CLP::LogEntry::PrivateData::Wgs84Ecef::MergeFrom(v6, v7);
    }
  }
  return result;
}

void sub_18DFCF49C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CoreNavigation::CLP::LogEntry::PrivateData::SvPositionAtTime::~SvPositionAtTime(CoreNavigation::CLP::LogEntry::PrivateData::SvPositionAtTime *this)
{
  *(void *)this = &unk_1EDD0C848;
  CoreNavigation::CLP::LogEntry::PrivateData::SvPositionAtTime::SharedDtor(this);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  uint64_t vars8;

  CoreNavigation::CLP::LogEntry::PrivateData::SvPositionAtTime::~SvPositionAtTime(this);

  JUMPOUT(0x192FA6240);
}

void CoreNavigation::CLP::LogEntry::PrivateData::SvPositionAtTime::SharedDtor(CoreNavigation::CLP::LogEntry::PrivateData::SvPositionAtTime *this)
{
  CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);
  if ((CoreNavigation::CLP::LogEntry::PrivateData::SvPositionAtTime *)CoreNavigation::CLP::LogEntry::PrivateData::SvPositionAtTime::default_instance_ != this)
  {
    uint64_t v2 = *((void *)this + 2);
    if (v2)
    {
      uint64_t v3 = *(void (**)(void))(*(void *)v2 + 8);
      v3();
    }
  }
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::SvPositionAtTime::default_instance(CoreNavigation::CLP::LogEntry::PrivateData::SvPositionAtTime *this)
{
  return CoreNavigation::CLP::LogEntry::PrivateData::SvPositionAtTime::default_instance_;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::SvPositionAtTime::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 24) = a2;
  return this;
}

void CoreNavigation::CLP::LogEntry::PrivateData::SvPositionAtTime::New(CoreNavigation::CLP::LogEntry::PrivateData::SvPositionAtTime *this)
{
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::SvPositionAtTime::Clear(uint64_t this)
{
  char v1 = *(unsigned char *)(this + 28);
  if (v1)
  {
    *(void *)(this + 8) = 0;
    if ((v1 & 2) != 0)
    {
      uint64_t v2 = *(void *)(this + 16);
      if (v2)
      {
        if (*(unsigned char *)(v2 + 36))
        {
          *(void *)(v2 + 8) = 0;
          *(void *)(v2 + 16) = 0;
          *(void *)(v2 + 24) = 0;
        }
        *(_DWORD *)(v2 + 36) = 0;
      }
    }
  }
  *(_DWORD *)(this + 28) = 0;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::SvPositionAtTime::MergePartialFromCodedStream(CoreNavigation::CLP::LogEntry::PrivateData::SvPositionAtTime *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  while (1)
  {
    do
    {
      while (1)
      {
        uint64_t v4 = (char *)*((void *)a2 + 1);
        if ((unint64_t)v4 >= *((void *)a2 + 2) || *v4 < 0)
        {
          unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
          *((_DWORD *)a2 + 8) = TagFallback;
          if (!TagFallback) {
            return 1;
          }
        }
        else
        {
          unint64_t TagFallback = *v4;
          *((_DWORD *)a2 + 8) = TagFallback;
          *((void *)a2 + 1) = v4 + 1;
          if (!TagFallback) {
            return 1;
          }
        }
        if (TagFallback >> 3 == 1) {
          break;
        }
        if (TagFallback >> 3 == 2)
        {
          int v6 = TagFallback & 7;
          if (v6 == 2)
          {
            int v7 = *((_DWORD *)this + 7);
            goto LABEL_15;
          }
        }
        else
        {
          int v6 = TagFallback & 7;
        }
LABEL_21:
        if (v6 == 4) {
          return 1;
        }
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0; {
      }
        }
      int v6 = TagFallback & 7;
      if (v6 != 1) {
        goto LABEL_21;
      }
      unint64_t v17 = 0;
      if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, &v17) & 1) == 0) {
        return 0;
      }
      *((void *)this + 1) = v17;
      int v7 = *((_DWORD *)this + 7) | 1;
      *((_DWORD *)this + 7) = v7;
      int v8 = (unsigned char *)*((void *)a2 + 1);
    }
    while ((unint64_t)v8 >= *((void *)a2 + 2) || *v8 != 18);
    *((void *)a2 + 1) = v8 + 1;
LABEL_15:
    *((_DWORD *)this + 7) = v7 | 2;
    unint64_t v9 = (CoreNavigation::CLP::LogEntry::PrivateData::Wgs84Ecef *)*((void *)this + 2);
    if (!v9) {
      operator new();
    }
    unsigned int v18 = 0;
    int v10 = (char *)*((void *)a2 + 1);
    if ((unint64_t)v10 >= *((void *)a2 + 2) || *v10 < 0)
    {
      if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v18)) {
        return 0;
      }
    }
    else
    {
      unsigned int v18 = *v10;
      *((void *)a2 + 1) = v10 + 1;
    }
    int v11 = *((_DWORD *)a2 + 14);
    int v12 = *((_DWORD *)a2 + 15);
    *((_DWORD *)a2 + 14) = v11 + 1;
    if (v11 >= v12) {
      return 0;
    }
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
    if (!CoreNavigation::CLP::LogEntry::PrivateData::Wgs84Ecef::MergePartialFromCodedStream(v9, a2)
      || !*((unsigned char *)a2 + 36))
    {
      return 0;
    }
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
    int v13 = *((_DWORD *)a2 + 14);
    BOOL v14 = __OFSUB__(v13, 1);
    int v15 = v13 - 1;
    if (v15 < 0 == v14) {
      *((_DWORD *)a2 + 14) = v15;
    }
    if (*((void *)a2 + 1) == *((void *)a2 + 2)
      && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
    {
      *((_DWORD *)a2 + 8) = 0;
      uint64_t result = 1;
      *((unsigned char *)a2 + 36) = 1;
      return result;
    }
  }
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::SvPositionAtTime::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  int v6 = *(_DWORD *)(this + 28);
  if (v6)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, (uint64_t)a2, *(double *)(this + 8), a3);
    if ((*(_DWORD *)(v5 + 28) & 2) == 0) {
      return this;
    }
  }
  else if ((v6 & 2) == 0)
  {
    return this;
  }
  uint64_t v7 = *(void *)(v5 + 16);
  if (!v7)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)this);
    uint64_t v7 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::SvPositionAtTime::default_instance_ + 16);
  }

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v7, a2, a4);
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::SvPositionAtTime::ByteSize(CoreNavigation::CLP::LogEntry::PrivateData::SvPositionAtTime *this)
{
  int v2 = *((unsigned __int8 *)this + 28);
  if (*((unsigned char *)this + 28))
  {
    uint64_t v3 = (v2 << 31 >> 31) & 9;
    if ((v2 & 2) != 0)
    {
      uint64_t v4 = *((void *)this + 2);
      if (!v4)
      {
        CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);
        uint64_t v4 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::SvPositionAtTime::default_instance_ + 16);
      }
      int v5 = *(unsigned __int8 *)(v4 + 36);
      int v6 = (v5 << 31 >> 31) & 9;
      if ((v5 & 2) != 0) {
        v6 += 9;
      }
      if ((v5 & 4) != 0) {
        v6 += 9;
      }
      if (*(unsigned char *)(v4 + 36)) {
        int v7 = v6;
      }
      else {
        int v7 = 0;
      }
      *(_DWORD *)(v4 + 32) = v7;
      uint64_t v3 = (v3 | 2) + v7;
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  *((_DWORD *)this + 6) = v3;
  return v3;
}

double CoreNavigation::CLP::LogEntry::PrivateData::SvPositionAtTime::CheckTypeAndMergeFrom(CoreNavigation::CLP::LogEntry::PrivateData::SvPositionAtTime *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  return CoreNavigation::CLP::LogEntry::PrivateData::SvPositionAtTime::MergeFrom(this, lpsrc);
}

double CoreNavigation::CLP::LogEntry::PrivateData::SvPositionAtTime::CopyFrom(CoreNavigation::CLP::LogEntry::PrivateData::SvPositionAtTime *this, const CoreNavigation::CLP::LogEntry::PrivateData::SvPositionAtTime *a2)
{
  if (a2 != this)
  {
    (*(void (**)(CoreNavigation::CLP::LogEntry::PrivateData::SvPositionAtTime *))(*(void *)this + 32))(this);
    return CoreNavigation::CLP::LogEntry::PrivateData::SvPositionAtTime::MergeFrom(this, a2);
  }
  return result;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::SvPositionAtTime::IsInitialized(CoreNavigation::CLP::LogEntry::PrivateData::SvPositionAtTime *this)
{
  return 1;
}

double CoreNavigation::CLP::LogEntry::PrivateData::SvPositionAtTime::Swap(CoreNavigation::CLP::LogEntry::PrivateData::SvPositionAtTime *this, CoreNavigation::CLP::LogEntry::PrivateData::SvPositionAtTime *a2)
{
  if (a2 != this)
  {
    double result = *((double *)this + 1);
    *((void *)this + 1) = *((void *)a2 + 1);
    *((double *)a2 + 1) = result;
    uint64_t v3 = *((void *)this + 2);
    *((void *)this + 2) = *((void *)a2 + 2);
    *((void *)a2 + 2) = v3;
    LODWORD(v3) = *((_DWORD *)this + 7);
    *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
    *((_DWORD *)a2 + 7) = v3;
    LODWORD(v3) = *((_DWORD *)this + 6);
    *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
    *((_DWORD *)a2 + 6) = v3;
  }
  return result;
}

void *CoreNavigation::CLP::LogEntry::PrivateData::SvPositionAtTime::GetTypeName@<X0>(void *a1@<X8>)
{
  return sub_18DEDE7B0(a1, "CoreNavigation.CLP.LogEntry.PrivateData.SvPositionAtTime");
}

void *CoreNavigation::CLP::LogEntry::PrivateData::PolynomialOrbit::SharedCtor(void *this)
{
  this[9] = 0;
  this[1] = 0;
  this[2] = 0;
  return this;
}

CoreNavigation::CLP::LogEntry::PrivateData::PolynomialOrbit *CoreNavigation::CLP::LogEntry::PrivateData::PolynomialOrbit::PolynomialOrbit(CoreNavigation::CLP::LogEntry::PrivateData::PolynomialOrbit *this, const CoreNavigation::CLP::LogEntry::PrivateData::PolynomialOrbit *a2)
{
  *(void *)this = &unk_1EDD0C578;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((void *)this + 9) = 0;
  CoreNavigation::CLP::LogEntry::PrivateData::PolynomialOrbit::MergeFrom(this, a2);
  return this;
}

void sub_18DFCFBD8(_Unwind_Exception *a1)
{
  uint64_t v3 = *((void *)v1 + 7);
  if (v3) {
    MEMORY[0x192FA6220](v3, 0x1000C8000313F17);
  }
  uint64_t v4 = *((void *)v1 + 5);
  if (v4) {
    MEMORY[0x192FA6220](v4, 0x1000C8000313F17);
  }
  uint64_t v5 = *((void *)v1 + 3);
  if (v5) {
    MEMORY[0x192FA6220](v5, 0x1000C8000313F17);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

double CoreNavigation::CLP::LogEntry::PrivateData::PolynomialOrbit::MergeFrom(CoreNavigation::CLP::LogEntry::PrivateData::PolynomialOrbit *this, const CoreNavigation::CLP::LogEntry::PrivateData::PolynomialOrbit *a2)
{
  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }
  int v5 = *((_DWORD *)a2 + 8);
  if (v5)
  {
    sub_18DF0C278((uint64_t)this + 24, *((_DWORD *)this + 8) + v5);
    memcpy((void *)(*((void *)this + 3) + 8 * *((int *)this + 8)), *((const void **)a2 + 3), 8 * *((int *)a2 + 8));
    *((_DWORD *)this + 8) += *((_DWORD *)a2 + 8);
  }
  int v6 = *((_DWORD *)a2 + 12);
  if (v6)
  {
    sub_18DF0C278((uint64_t)this + 40, *((_DWORD *)this + 12) + v6);
    memcpy((void *)(*((void *)this + 5) + 8 * *((int *)this + 12)), *((const void **)a2 + 5), 8 * *((int *)a2 + 12));
    *((_DWORD *)this + 12) += *((_DWORD *)a2 + 12);
  }
  int v7 = *((_DWORD *)a2 + 16);
  if (v7)
  {
    sub_18DF0C278((uint64_t)this + 56, *((_DWORD *)this + 16) + v7);
    memcpy((void *)(*((void *)this + 7) + 8 * *((int *)this + 16)), *((const void **)a2 + 7), 8 * *((int *)a2 + 16));
    *((_DWORD *)this + 16) += *((_DWORD *)a2 + 16);
  }
  LOBYTE(v8) = *((unsigned char *)a2 + 76);
  if ((_BYTE)v8)
  {
    if (*((unsigned char *)a2 + 76))
    {
      double result = *((double *)a2 + 1);
      *((_DWORD *)this + 19) |= 1u;
      *((double *)this + 1) = result;
      int v8 = *((_DWORD *)a2 + 19);
    }
    if ((v8 & 2) != 0)
    {
      double result = *((double *)a2 + 2);
      *((_DWORD *)this + 19) |= 2u;
      *((double *)this + 2) = result;
    }
  }
  return result;
}

void sub_18DFCFDB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CoreNavigation::CLP::LogEntry::PrivateData::PolynomialOrbit::~PolynomialOrbit(CoreNavigation::CLP::LogEntry::PrivateData::PolynomialOrbit *this)
{
  *(void *)this = &unk_1EDD0C578;
  CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);
  uint64_t v2 = *((void *)this + 7);
  if (v2) {
    MEMORY[0x192FA6220](v2, 0x1000C8000313F17);
  }
  uint64_t v3 = *((void *)this + 5);
  if (v3) {
    MEMORY[0x192FA6220](v3, 0x1000C8000313F17);
  }
  uint64_t v4 = *((void *)this + 3);
  if (v4) {
    MEMORY[0x192FA6220](v4, 0x1000C8000313F17);
  }

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  uint64_t vars8;

  CoreNavigation::CLP::LogEntry::PrivateData::PolynomialOrbit::~PolynomialOrbit(this);

  JUMPOUT(0x192FA6240);
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::PolynomialOrbit::default_instance(CoreNavigation::CLP::LogEntry::PrivateData::PolynomialOrbit *this)
{
  return CoreNavigation::CLP::LogEntry::PrivateData::PolynomialOrbit::default_instance_;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::PolynomialOrbit::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 72) = a2;
  return this;
}

void CoreNavigation::CLP::LogEntry::PrivateData::PolynomialOrbit::New(CoreNavigation::CLP::LogEntry::PrivateData::PolynomialOrbit *this)
{
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::PolynomialOrbit::Clear(uint64_t this)
{
  if (*(unsigned char *)(this + 76))
  {
    *(void *)(this + 8) = 0;
    *(void *)(this + 16) = 0;
  }
  *(_DWORD *)(this + 32) = 0;
  *(_DWORD *)(this + 48) = 0;
  *(_DWORD *)(this + 64) = 0;
  *(_DWORD *)(this + 76) = 0;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::PolynomialOrbit::MergePartialFromCodedStream(CoreNavigation::CLP::LogEntry::PrivateData::PolynomialOrbit *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  uint64_t v4 = (char *)this + 56;
  int v44 = (char *)this + 24;
  int v45 = (char *)this + 40;
LABEL_2:
  while (2)
  {
    int v5 = (char *)*((void *)a2 + 1);
    if ((unint64_t)v5 >= *((void *)a2 + 2) || *v5 < 0)
    {
      unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      if (!TagFallback) {
        return 1;
      }
    }
    else
    {
      unint64_t TagFallback = *v5;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((void *)a2 + 1) = v5 + 1;
      if (!TagFallback) {
        return 1;
      }
    }
    switch(TagFallback >> 3)
    {
      case 2u:
        int v7 = TagFallback & 7;
        if (v7 != 1) {
          goto LABEL_31;
        }
        v46[0] = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, v46) & 1) == 0) {
          return 0;
        }
        *((void *)this + 1) = v46[0];
        *((_DWORD *)this + 19) |= 1u;
        int v8 = (unsigned char *)*((void *)a2 + 1);
        if ((unint64_t)v8 >= *((void *)a2 + 2) || *v8 != 25) {
          continue;
        }
        *((void *)a2 + 1) = v8 + 1;
        goto LABEL_15;
      case 3u:
        int v7 = TagFallback & 7;
        if (v7 != 1) {
          goto LABEL_31;
        }
LABEL_15:
        v46[0] = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, v46) & 1) == 0) {
          return 0;
        }
        *((void *)this + 2) = v46[0];
        *((_DWORD *)this + 19) |= 2u;
        unint64_t v9 = (unsigned char *)*((void *)a2 + 1);
        if ((unint64_t)v9 < *((void *)a2 + 2) && *v9 == 33) {
          goto LABEL_34;
        }
        continue;
      case 4u:
        int v7 = TagFallback & 7;
        if (v7 == 1) {
          goto LABEL_35;
        }
        if (v7 != 2) {
          goto LABEL_31;
        }
        uint64_t result = sub_18DF39FAC(a2, (uint64_t)v44);
        if (!result) {
          return result;
        }
        while (2)
        {
          unint64_t v9 = (unsigned char *)*((void *)a2 + 1);
          if ((unint64_t)v9 < *((void *)a2 + 2))
          {
            int v21 = *v9;
            if (v21 == 33)
            {
LABEL_34:
              *((void *)a2 + 1) = v9 + 1;
LABEL_35:
              v46[0] = 0;
              if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, v46) & 1) == 0) {
                return 0;
              }
              unint64_t v11 = v46[0];
              int v12 = *((_DWORD *)this + 8);
              if (v12 == *((_DWORD *)this + 9))
              {
                sub_18DF0C278((uint64_t)v44, v12 + 1);
                int v12 = *((_DWORD *)this + 8);
              }
              uint64_t v13 = *((void *)this + 3);
              int v14 = v12 + 1;
              *((_DWORD *)this + 8) = v12 + 1;
              *(void *)(v13 + 8 * v12) = v11;
              uint64_t v15 = *((void *)a2 + 1);
              int v16 = *((_DWORD *)a2 + 4) - v15;
              if (v16 >= 1)
              {
                signed int v17 = v16 / 9u;
                int v18 = v17 >= *((_DWORD *)this + 9) - v14 ? *((_DWORD *)this + 9) - v14 : v17;
                if (v18 >= 1)
                {
                  for (int i = 0; i != v18; ++i)
                  {
                    if (*(unsigned char *)v15 != 33) {
                      goto LABEL_49;
                    }
                    uint64_t v20 = *(void *)(v15 + 1);
                    if (v14 >= *((_DWORD *)this + 9))
                    {
                      wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
                      wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
                      wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
                      wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v46);
                      int v14 = *((_DWORD *)this + 8);
                      uint64_t v13 = *((void *)this + 3);
                    }
                    *((_DWORD *)this + 8) = v14 + 1;
                    *(void *)(v13 + 8 * v14) = v20;
                    v15 += 9;
                    ++v14;
                  }
                  int i = v18;
LABEL_49:
                  if (i) {
                    wireless_diagnostics::google::protobuf::io::CodedInputStream::Skip(a2);
                  }
                  continue;
                }
              }
              continue;
            }
            if (v21 == 41)
            {
              do
              {
                *((void *)a2 + 1) = v9 + 1;
LABEL_55:
                v46[0] = 0;
                if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, v46) & 1) == 0) {
                  return 0;
                }
                unint64_t v22 = v46[0];
                int v23 = *((_DWORD *)this + 12);
                if (v23 == *((_DWORD *)this + 13))
                {
                  sub_18DF0C278((uint64_t)v45, v23 + 1);
                  int v23 = *((_DWORD *)this + 12);
                }
                uint64_t v24 = *((void *)this + 5);
                int v25 = v23 + 1;
                *((_DWORD *)this + 12) = v23 + 1;
                *(void *)(v24 + 8 * v23) = v22;
                uint64_t v26 = *((void *)a2 + 1);
                int v27 = *((_DWORD *)a2 + 4) - v26;
                if (v27 >= 1)
                {
                  signed int v28 = v27 / 9u;
                  int v29 = v28 >= *((_DWORD *)this + 13) - v25 ? *((_DWORD *)this + 13) - v25 : v28;
                  if (v29 >= 1)
                  {
                    int v30 = 0;
                    while (*(unsigned char *)v26 == 41)
                    {
                      uint64_t v31 = *(void *)(v26 + 1);
                      if (v25 >= *((_DWORD *)this + 13))
                      {
                        wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
                        wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
                        wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
                        wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v46);
                        int v25 = *((_DWORD *)this + 12);
                        uint64_t v24 = *((void *)this + 5);
                      }
                      *((_DWORD *)this + 12) = v25 + 1;
                      *(void *)(v24 + 8 * v25) = v31;
                      ++v30;
                      v26 += 9;
                      ++v25;
                      if (v29 == v30)
                      {
                        int v30 = v29;
                        break;
                      }
                    }
                    if (v30) {
                      wireless_diagnostics::google::protobuf::io::CodedInputStream::Skip(a2);
                    }
                  }
                }
LABEL_71:
                unint64_t v9 = (unsigned char *)*((void *)a2 + 1);
                if ((unint64_t)v9 >= *((void *)a2 + 2)) {
                  goto LABEL_2;
                }
                int v32 = *v9;
              }
              while (v32 == 41);
              if (v32 == 49) {
                goto LABEL_74;
              }
            }
          }
          goto LABEL_2;
        }
      case 5u:
        int v7 = TagFallback & 7;
        if (v7 == 1) {
          goto LABEL_55;
        }
        if (v7 != 2) {
          goto LABEL_31;
        }
        uint64_t result = sub_18DF39FAC(a2, (uint64_t)v45);
        if (!result) {
          return result;
        }
        goto LABEL_71;
      case 6u:
        int v7 = TagFallback & 7;
        if (v7 == 1) {
          goto LABEL_75;
        }
        if (v7 == 2)
        {
          uint64_t result = sub_18DF39FAC(a2, (uint64_t)v4);
          if (!result) {
            return result;
          }
          while (1)
          {
            unint64_t v9 = (unsigned char *)*((void *)a2 + 1);
            int v43 = (unsigned char *)*((void *)a2 + 2);
            if (v9 >= v43 || *v9 != 49) {
              break;
            }
LABEL_74:
            *((void *)a2 + 1) = v9 + 1;
LABEL_75:
            v46[0] = 0;
            if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, v46) & 1) == 0) {
              return 0;
            }
            unint64_t v33 = v46[0];
            int v34 = *((_DWORD *)this + 16);
            if (v34 == *((_DWORD *)this + 17))
            {
              sub_18DF0C278((uint64_t)v4, v34 + 1);
              int v34 = *((_DWORD *)this + 16);
            }
            uint64_t v35 = *((void *)this + 7);
            int v36 = v34 + 1;
            *((_DWORD *)this + 16) = v34 + 1;
            *(void *)(v35 + 8 * v34) = v33;
            uint64_t v37 = *((void *)a2 + 1);
            int v38 = *((_DWORD *)a2 + 4) - v37;
            if (v38 >= 1)
            {
              signed int v39 = v38 / 9u;
              int v40 = v39 >= *((_DWORD *)this + 17) - v36 ? *((_DWORD *)this + 17) - v36 : v39;
              if (v40 >= 1)
              {
                int v41 = 0;
                while (*(unsigned char *)v37 == 49)
                {
                  uint64_t v42 = *(void *)(v37 + 1);
                  if (v36 >= *((_DWORD *)this + 17))
                  {
                    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
                    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
                    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
                    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v46);
                    int v36 = *((_DWORD *)this + 16);
                    uint64_t v35 = *((void *)this + 7);
                  }
                  *((_DWORD *)this + 16) = v36 + 1;
                  *(void *)(v35 + 8 * v36) = v42;
                  ++v41;
                  v37 += 9;
                  ++v36;
                  if (v40 == v41)
                  {
                    int v41 = v40;
                    break;
                  }
                }
                if (v41) {
                  wireless_diagnostics::google::protobuf::io::CodedInputStream::Skip(a2);
                }
              }
            }
          }
          if (v9 == v43 && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
          {
            *((_DWORD *)a2 + 8) = 0;
            uint64_t result = 1;
            *((unsigned char *)a2 + 36) = 1;
            return result;
          }
          continue;
        }
LABEL_31:
        if (v7 != 4)
        {
          if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0; {
          continue;
          }
        }
        return 1;
      default:
        int v7 = TagFallback & 7;
        goto LABEL_31;
    }
  }
}

void sub_18DFD0558(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::PolynomialOrbit::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3)
{
  uint64_t v4 = this;
  int v5 = *(_DWORD *)(this + 76);
  if (v5)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, (uint64_t)a2, *(double *)(this + 8), a3);
    int v5 = *(_DWORD *)(v4 + 76);
  }
  if ((v5 & 2) != 0) {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, (uint64_t)a2, *(double *)(v4 + 16), a3);
  }
  if (*(int *)(v4 + 32) >= 1)
  {
    uint64_t v6 = 0;
    do
      this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, (uint64_t)a2, *(double *)(*(void *)(v4 + 24) + 8 * v6++), a3);
    while (v6 < *(int *)(v4 + 32));
  }
  if (*(int *)(v4 + 48) >= 1)
  {
    uint64_t v7 = 0;
    do
      this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, (uint64_t)a2, *(double *)(*(void *)(v4 + 40) + 8 * v7++), a3);
    while (v7 < *(int *)(v4 + 48));
  }
  if (*(int *)(v4 + 64) >= 1)
  {
    uint64_t v8 = 0;
    do
      this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, (uint64_t)a2, *(double *)(*(void *)(v4 + 56) + 8 * v8++), a3);
    while (v8 < *(int *)(v4 + 64));
  }
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::PolynomialOrbit::ByteSize(CoreNavigation::CLP::LogEntry::PrivateData::PolynomialOrbit *this)
{
  int v1 = *((unsigned __int8 *)this + 76);
  int v2 = (v1 << 31 >> 31) & 9;
  if ((v1 & 2) != 0) {
    v2 += 9;
  }
  if (*((unsigned char *)this + 76)) {
    int v3 = v2;
  }
  else {
    int v3 = 0;
  }
  uint64_t v4 = (9 * (*((_DWORD *)this + 12) + *((_DWORD *)this + 8) + *((_DWORD *)this + 16)) + v3);
  *((_DWORD *)this + 18) = v4;
  return v4;
}

double CoreNavigation::CLP::LogEntry::PrivateData::PolynomialOrbit::CheckTypeAndMergeFrom(CoreNavigation::CLP::LogEntry::PrivateData::PolynomialOrbit *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  return CoreNavigation::CLP::LogEntry::PrivateData::PolynomialOrbit::MergeFrom(this, lpsrc);
}

double CoreNavigation::CLP::LogEntry::PrivateData::PolynomialOrbit::CopyFrom(CoreNavigation::CLP::LogEntry::PrivateData::PolynomialOrbit *this, const CoreNavigation::CLP::LogEntry::PrivateData::PolynomialOrbit *a2)
{
  if (a2 != this)
  {
    (*(void (**)(CoreNavigation::CLP::LogEntry::PrivateData::PolynomialOrbit *))(*(void *)this + 32))(this);
    return CoreNavigation::CLP::LogEntry::PrivateData::PolynomialOrbit::MergeFrom(this, a2);
  }
  return result;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::PolynomialOrbit::IsInitialized(CoreNavigation::CLP::LogEntry::PrivateData::PolynomialOrbit *this)
{
  return 1;
}

double CoreNavigation::CLP::LogEntry::PrivateData::PolynomialOrbit::Swap(CoreNavigation::CLP::LogEntry::PrivateData::PolynomialOrbit *this, CoreNavigation::CLP::LogEntry::PrivateData::PolynomialOrbit *a2)
{
  if (a2 != this)
  {
    uint64_t v2 = *((void *)this + 1);
    *((void *)this + 1) = *((void *)a2 + 1);
    *((void *)a2 + 1) = v2;
    uint64_t v3 = *((void *)this + 2);
    *((void *)this + 2) = *((void *)a2 + 2);
    *((void *)a2 + 2) = v3;
    uint64_t v4 = *((void *)this + 3);
    *((void *)this + 3) = *((void *)a2 + 3);
    uint64_t v5 = *((void *)a2 + 4);
    *((void *)a2 + 3) = v4;
    uint64_t v6 = *((void *)this + 4);
    *((void *)this + 4) = v5;
    *((void *)a2 + 4) = v6;
    uint64_t v7 = *((void *)this + 5);
    *((void *)this + 5) = *((void *)a2 + 5);
    uint64_t v8 = *((void *)a2 + 6);
    *((void *)a2 + 5) = v7;
    uint64_t v9 = *((void *)this + 6);
    *((void *)this + 6) = v8;
    *((void *)a2 + 6) = v9;
    uint64_t v10 = *((void *)this + 7);
    *((void *)this + 7) = *((void *)a2 + 7);
    double result = *((double *)a2 + 8);
    *((void *)a2 + 7) = v10;
    uint64_t v12 = *((void *)this + 8);
    *((double *)this + 8) = result;
    *((void *)a2 + 8) = v12;
    LODWORD(v10) = *((_DWORD *)this + 19);
    *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
    *((_DWORD *)a2 + 19) = v10;
    LODWORD(v10) = *((_DWORD *)this + 18);
    *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
    *((_DWORD *)a2 + 18) = v10;
  }
  return result;
}

void *CoreNavigation::CLP::LogEntry::PrivateData::PolynomialOrbit::GetTypeName@<X0>(void *a1@<X8>)
{
  return sub_18DEDE7B0(a1, "CoreNavigation.CLP.LogEntry.PrivateData.PolynomialOrbit");
}

double CoreNavigation::CLP::LogEntry::PrivateData::SvInfo::SharedCtor(CoreNavigation::CLP::LogEntry::PrivateData::SvInfo *this)
{
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  double result = 0.0;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((void *)this + 12) = 0;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  return result;
}

CoreNavigation::CLP::LogEntry::PrivateData::SvInfo *CoreNavigation::CLP::LogEntry::PrivateData::SvInfo::SvInfo(CoreNavigation::CLP::LogEntry::PrivateData::SvInfo *this, const CoreNavigation::CLP::LogEntry::PrivateData::SvInfo *a2)
{
  *(void *)this = &unk_1EDD0ECD8;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  *((_DWORD *)this + 10) = 0;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *(_OWORD *)((char *)this + 108) = 0u;
  CoreNavigation::CLP::LogEntry::PrivateData::SvInfo::MergeFrom(this, a2);
  return this;
}

void sub_18DFD0984(_Unwind_Exception *a1)
{
  sub_18DF0C324(v1 + 13);
  sub_18DF0C324(v2);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite((wireless_diagnostics::google::protobuf::MessageLite *)v1);
  _Unwind_Resume(a1);
}

void CoreNavigation::CLP::LogEntry::PrivateData::SvInfo::MergeFrom(CoreNavigation::CLP::LogEntry::PrivateData::SvInfo *this, const CoreNavigation::CLP::LogEntry::PrivateData::SvInfo *a2)
{
  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v39);
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((CoreNavigation::CLP::LogEntry::PrivateData::SvInfo *)((char *)this + 24));
  if (*((int *)a2 + 8) >= 1)
  {
    uint64_t v4 = 0;
    do
    {
      uint64_t v5 = *(const CoreNavigation::CLP::LogEntry::PrivateData::SvPositionAtTime **)(*((void *)a2 + 3) + 8 * v4);
      int v6 = *((_DWORD *)this + 9);
      uint64_t v7 = *((int *)this + 8);
      if ((int)v7 >= v6)
      {
        if (v6 == *((_DWORD *)this + 10))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((CoreNavigation::CLP::LogEntry::PrivateData::SvInfo *)((char *)this + 24));
          int v6 = *((_DWORD *)this + 9);
        }
        *((_DWORD *)this + 9) = v6 + 1;
        operator new();
      }
      uint64_t v8 = *((void *)this + 3);
      *((_DWORD *)this + 8) = v7 + 1;
      CoreNavigation::CLP::LogEntry::PrivateData::SvPositionAtTime::MergeFrom(*(CoreNavigation::CLP::LogEntry::PrivateData::SvPositionAtTime **)(v8 + 8 * v7), v5);
      ++v4;
    }
    while (v4 < *((int *)a2 + 8));
  }
  uint64_t v9 = (CoreNavigation::CLP::LogEntry::PrivateData *)wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((CoreNavigation::CLP::LogEntry::PrivateData::SvInfo *)((char *)this + 104));
  if (*((int *)a2 + 28) >= 1)
  {
    uint64_t v10 = 0;
    do
    {
      unint64_t v11 = *(const CoreNavigation::CLP::LogEntry::PrivateData::SvBandCorrections **)(*((void *)a2 + 13) + 8 * v10);
      int v12 = *((_DWORD *)this + 29);
      uint64_t v13 = *((int *)this + 28);
      if ((int)v13 >= v12)
      {
        if (v12 == *((_DWORD *)this + 30))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((CoreNavigation::CLP::LogEntry::PrivateData::SvInfo *)((char *)this + 104));
          int v12 = *((_DWORD *)this + 29);
        }
        *((_DWORD *)this + 29) = v12 + 1;
        operator new();
      }
      uint64_t v14 = *((void *)this + 13);
      *((_DWORD *)this + 28) = v13 + 1;
      CoreNavigation::CLP::LogEntry::PrivateData::SvBandCorrections::MergeFrom(*(CoreNavigation::CLP::LogEntry::PrivateData::SvBandCorrections **)(v14 + 8 * v13), v11);
      ++v10;
    }
    while (v10 < *((int *)a2 + 28));
  }
  int v15 = *((_DWORD *)a2 + 43);
  if (!(_BYTE)v15) {
    goto LABEL_28;
  }
  if (v15)
  {
    *((_DWORD *)this + 43) |= 1u;
    int v32 = (CoreNavigation::CLP::LogEntry::PrivateData::SvId *)*((void *)this + 1);
    if (!v32) {
      operator new();
    }
    unint64_t v33 = (const CoreNavigation::CLP::LogEntry::PrivateData::SvId *)*((void *)a2 + 1);
    if (!v33)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(v9);
      unint64_t v33 = *(const CoreNavigation::CLP::LogEntry::PrivateData::SvId **)(CoreNavigation::CLP::LogEntry::PrivateData::SvInfo::default_instance_
                                                                       + 8);
    }
    CoreNavigation::CLP::LogEntry::PrivateData::SvId::MergeFrom(v32, v33);
    int v15 = *((_DWORD *)a2 + 43);
    if ((v15 & 2) == 0)
    {
LABEL_22:
      if ((v15 & 4) == 0) {
        goto LABEL_23;
      }
      goto LABEL_80;
    }
  }
  else if ((v15 & 2) == 0)
  {
    goto LABEL_22;
  }
  uint64_t v34 = *((void *)a2 + 2);
  *((_DWORD *)this + 43) |= 2u;
  *((void *)this + 2) = v34;
  int v15 = *((_DWORD *)a2 + 43);
  if ((v15 & 4) == 0)
  {
LABEL_23:
    if ((v15 & 0x10) == 0) {
      goto LABEL_24;
    }
    goto LABEL_82;
  }
LABEL_80:
  unsigned int v35 = *((_DWORD *)a2 + 14);
  if (v35 >= 7) {
    __assert_rtn("set_position_source", "CoreNavigationCLPGnssMeasApi.pb.h", 10942, "::CoreNavigation::CLP::LogEntry::PrivateData::SvPositionSource_IsValid(value)");
  }
  *((_DWORD *)this + 43) |= 4u;
  *((_DWORD *)this + 14) = v35;
  int v15 = *((_DWORD *)a2 + 43);
  if ((v15 & 0x10) == 0)
  {
LABEL_24:
    if ((v15 & 0x20) == 0) {
      goto LABEL_25;
    }
LABEL_83:
    uint64_t v37 = *((void *)a2 + 8);
    *((_DWORD *)this + 43) |= 0x20u;
    *((void *)this + 8) = v37;
    int v15 = *((_DWORD *)a2 + 43);
    if ((v15 & 0x40) == 0)
    {
LABEL_26:
      if ((v15 & 0x80) == 0) {
        goto LABEL_28;
      }
      goto LABEL_27;
    }
    goto LABEL_84;
  }
LABEL_82:
  uint64_t v36 = *((void *)a2 + 6);
  *((_DWORD *)this + 43) |= 0x10u;
  *((void *)this + 6) = v36;
  int v15 = *((_DWORD *)a2 + 43);
  if ((v15 & 0x20) != 0) {
    goto LABEL_83;
  }
LABEL_25:
  if ((v15 & 0x40) == 0) {
    goto LABEL_26;
  }
LABEL_84:
  uint64_t v38 = *((void *)a2 + 9);
  *((_DWORD *)this + 43) |= 0x40u;
  *((void *)this + 9) = v38;
  int v15 = *((_DWORD *)a2 + 43);
  if ((v15 & 0x80) != 0)
  {
LABEL_27:
    int v16 = *((_DWORD *)a2 + 15);
    *((_DWORD *)this + 43) |= 0x80u;
    *((_DWORD *)this + 15) = v16;
    int v15 = *((_DWORD *)a2 + 43);
  }
LABEL_28:
  if ((v15 & 0xFF00) != 0)
  {
    if ((v15 & 0x100) != 0)
    {
      int v17 = *((_DWORD *)a2 + 20);
      *((_DWORD *)this + 43) |= 0x100u;
      *((_DWORD *)this + 20) = v17;
      int v15 = *((_DWORD *)a2 + 43);
    }
    if ((v15 & 0x200) != 0)
    {
      unsigned int v18 = *((_DWORD *)a2 + 21);
      if (v18 >= 5) {
        __assert_rtn("set_over_the_air_from_sv_health_l1", "CoreNavigationCLPGnssMeasApi.pb.h", 11100, "::CoreNavigation::CLP::LogEntry::PrivateData::SvHealthIndication_IsValid(value)");
      }
      *((_DWORD *)this + 43) |= 0x200u;
      *((_DWORD *)this + 21) = v18;
      int v15 = *((_DWORD *)a2 + 43);
    }
    if ((v15 & 0x400) != 0)
    {
      unsigned int v19 = *((_DWORD *)a2 + 22);
      if (v19 >= 5) {
        __assert_rtn("set_over_the_air_from_other_sv_health_l1", "CoreNavigationCLPGnssMeasApi.pb.h", 11123, "::CoreNavigation::CLP::LogEntry::PrivateData::SvHealthIndication_IsValid(value)");
      }
      *((_DWORD *)this + 43) |= 0x400u;
      *((_DWORD *)this + 22) = v19;
      int v15 = *((_DWORD *)a2 + 43);
    }
    if ((v15 & 0x800) != 0)
    {
      unsigned int v20 = *((_DWORD *)a2 + 23);
      if (v20 >= 5) {
        __assert_rtn("set_assistance_file_health_l1", "CoreNavigationCLPGnssMeasApi.pb.h", 11146, "::CoreNavigation::CLP::LogEntry::PrivateData::SvHealthIndication_IsValid(value)");
      }
      *((_DWORD *)this + 43) |= 0x800u;
      *((_DWORD *)this + 23) = v20;
      int v15 = *((_DWORD *)a2 + 43);
    }
    if ((v15 & 0x1000) != 0)
    {
      unsigned int v21 = *((_DWORD *)a2 + 24);
      if (v21 >= 5) {
        __assert_rtn("set_ms_based_health_l1", "CoreNavigationCLPGnssMeasApi.pb.h", 11169, "::CoreNavigation::CLP::LogEntry::PrivateData::SvHealthIndication_IsValid(value)");
      }
      *((_DWORD *)this + 43) |= 0x1000u;
      *((_DWORD *)this + 24) = v21;
      int v15 = *((_DWORD *)a2 + 43);
    }
    if ((v15 & 0x2000) != 0)
    {
      unsigned int v22 = *((_DWORD *)a2 + 25);
      if (v22 >= 5) {
        __assert_rtn("set_integrity_health_l1", "CoreNavigationCLPGnssMeasApi.pb.h", 11192, "::CoreNavigation::CLP::LogEntry::PrivateData::SvHealthIndication_IsValid(value)");
      }
      *((_DWORD *)this + 43) |= 0x2000u;
      *((_DWORD *)this + 25) = v22;
      int v15 = *((_DWORD *)a2 + 43);
    }
    if ((v15 & 0x8000) != 0)
    {
      *((_DWORD *)this + 43) |= 0x8000u;
      int v23 = (CoreNavigation::CLP::LogEntry::PrivateData::PolynomialOrbit *)*((void *)this + 16);
      if (!v23) {
        operator new();
      }
      uint64_t v24 = (const CoreNavigation::CLP::LogEntry::PrivateData::PolynomialOrbit *)*((void *)a2 + 16);
      if (!v24)
      {
        CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(v9);
        uint64_t v24 = *(const CoreNavigation::CLP::LogEntry::PrivateData::PolynomialOrbit **)(CoreNavigation::CLP::LogEntry::PrivateData::SvInfo::default_instance_
                                                                                    + 128);
      }
      CoreNavigation::CLP::LogEntry::PrivateData::PolynomialOrbit::MergeFrom(v23, v24);
      int v15 = *((_DWORD *)a2 + 43);
    }
  }
  if ((v15 & 0xFF0000) != 0)
  {
    if ((v15 & 0x10000) != 0)
    {
      unsigned int v25 = *((_DWORD *)a2 + 34);
      if (v25 >= 5) {
        __assert_rtn("set_over_the_air_from_sv_health_l5", "CoreNavigationCLPGnssMeasApi.pb.h", 11282, "::CoreNavigation::CLP::LogEntry::PrivateData::SvHealthIndication_IsValid(value)");
      }
      *((_DWORD *)this + 43) |= 0x10000u;
      *((_DWORD *)this + 34) = v25;
      int v15 = *((_DWORD *)a2 + 43);
    }
    if ((v15 & 0x20000) != 0)
    {
      unsigned int v26 = *((_DWORD *)a2 + 35);
      if (v26 >= 5) {
        __assert_rtn("set_over_the_air_from_other_sv_health_l5", "CoreNavigationCLPGnssMeasApi.pb.h", 11305, "::CoreNavigation::CLP::LogEntry::PrivateData::SvHealthIndication_IsValid(value)");
      }
      *((_DWORD *)this + 43) |= 0x20000u;
      *((_DWORD *)this + 35) = v26;
      int v15 = *((_DWORD *)a2 + 43);
    }
    if ((v15 & 0x40000) != 0)
    {
      unsigned int v27 = *((_DWORD *)a2 + 36);
      if (v27 >= 5) {
        __assert_rtn("set_assistance_file_health_l5", "CoreNavigationCLPGnssMeasApi.pb.h", 11328, "::CoreNavigation::CLP::LogEntry::PrivateData::SvHealthIndication_IsValid(value)");
      }
      *((_DWORD *)this + 43) |= 0x40000u;
      *((_DWORD *)this + 36) = v27;
      int v15 = *((_DWORD *)a2 + 43);
    }
    if ((v15 & 0x80000) != 0)
    {
      unsigned int v28 = *((_DWORD *)a2 + 37);
      if (v28 >= 5) {
        __assert_rtn("set_ms_based_health_l5", "CoreNavigationCLPGnssMeasApi.pb.h", 11351, "::CoreNavigation::CLP::LogEntry::PrivateData::SvHealthIndication_IsValid(value)");
      }
      *((_DWORD *)this + 43) |= 0x80000u;
      *((_DWORD *)this + 37) = v28;
      int v15 = *((_DWORD *)a2 + 43);
    }
    if ((v15 & 0x100000) != 0)
    {
      unsigned int v29 = *((_DWORD *)a2 + 40);
      if (v29 >= 5) {
        __assert_rtn("set_integrity_health_l5", "CoreNavigationCLPGnssMeasApi.pb.h", 11374, "::CoreNavigation::CLP::LogEntry::PrivateData::SvHealthIndication_IsValid(value)");
      }
      *((_DWORD *)this + 43) |= 0x100000u;
      *((_DWORD *)this + 40) = v29;
      int v15 = *((_DWORD *)a2 + 43);
    }
    if ((v15 & 0x200000) != 0)
    {
      uint64_t v30 = *((void *)a2 + 19);
      *((_DWORD *)this + 43) |= 0x200000u;
      *((void *)this + 19) = v30;
      int v15 = *((_DWORD *)a2 + 43);
    }
    if ((v15 & 0x400000) != 0)
    {
      unsigned int v31 = *((_DWORD *)a2 + 41);
      if (v31 >= 4) {
        __assert_rtn("set_sv_reference_point", "CoreNavigationCLPGnssMeasApi.pb.h", 11419, "::CoreNavigation::CLP::LogEntry::PrivateData::SvReferencePoint_IsValid(value)");
      }
      *((_DWORD *)this + 43) |= 0x400000u;
      *((_DWORD *)this + 41) = v31;
    }
  }
}

void sub_18DFD112C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CoreNavigation::CLP::LogEntry::PrivateData::SvInfo::~SvInfo(CoreNavigation::CLP::LogEntry::PrivateData::SvInfo *this)
{
  *(void *)this = &unk_1EDD0ECD8;
  CoreNavigation::CLP::LogEntry::PrivateData::SvInfo::SharedDtor(this);
  sub_18DF0C324((uint64_t *)this + 13);
  sub_18DF0C324((uint64_t *)this + 3);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  uint64_t vars8;

  CoreNavigation::CLP::LogEntry::PrivateData::SvInfo::~SvInfo(this);

  JUMPOUT(0x192FA6240);
}

void CoreNavigation::CLP::LogEntry::PrivateData::SvInfo::SharedDtor(CoreNavigation::CLP::LogEntry::PrivateData::SvInfo *this)
{
  CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);
  if ((CoreNavigation::CLP::LogEntry::PrivateData::SvInfo *)CoreNavigation::CLP::LogEntry::PrivateData::SvInfo::default_instance_ != this)
  {
    uint64_t v2 = *((void *)this + 1);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
    uint64_t v3 = *((void *)this + 16);
    if (v3)
    {
      uint64_t v4 = *(void (**)(void))(*(void *)v3 + 8);
      v4();
    }
  }
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::SvInfo::default_instance(CoreNavigation::CLP::LogEntry::PrivateData::SvInfo *this)
{
  return CoreNavigation::CLP::LogEntry::PrivateData::SvInfo::default_instance_;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::SvInfo::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 168) = a2;
  return this;
}

void CoreNavigation::CLP::LogEntry::PrivateData::SvInfo::New(CoreNavigation::CLP::LogEntry::PrivateData::SvInfo *this)
{
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::SvInfo::Clear(uint64_t this)
{
  uint64_t v1 = this;
  int v2 = *(_DWORD *)(this + 172);
  if ((_BYTE)v2)
  {
    if (v2)
    {
      this = *(void *)(this + 8);
      if (this)
      {
        this = CoreNavigation::CLP::LogEntry::PrivateData::SvId::Clear(this);
        int v2 = *(_DWORD *)(v1 + 172);
      }
    }
    *(void *)(v1 + 16) = 0;
    *(_OWORD *)(v1 + 48) = 0u;
    *(_OWORD *)(v1 + 64) = 0u;
  }
  if ((v2 & 0xFF00) != 0)
  {
    *(void *)(v1 + 80) = 0;
    *(void *)(v1 + 88) = 0;
    *(void *)(v1 + 96) = 0;
    if ((v2 & 0x8000) != 0)
    {
      uint64_t v3 = *(void *)(v1 + 128);
      if (v3)
      {
        if (*(unsigned char *)(v3 + 76))
        {
          *(void *)(v3 + 8) = 0;
          *(void *)(v3 + 16) = 0;
        }
        *(_DWORD *)(v3 + 32) = 0;
        *(_DWORD *)(v3 + 48) = 0;
        *(_DWORD *)(v3 + 64) = 0;
        *(_DWORD *)(v3 + 76) = 0;
        int v2 = *(_DWORD *)(v1 + 172);
      }
    }
  }
  if ((v2 & 0xFF0000) != 0)
  {
    *(_OWORD *)(v1 + 152) = 0u;
    *(_OWORD *)(v1 + 136) = 0u;
  }
  if (*(int *)(v1 + 32) >= 1)
  {
    uint64_t v4 = 0;
    do
    {
      uint64_t v5 = *(void *)(*(void *)(v1 + 24) + 8 * v4);
      this = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 32))(v5);
      ++v4;
    }
    while (v4 < *(int *)(v1 + 32));
  }
  *(_DWORD *)(v1 + 32) = 0;
  if (*(int *)(v1 + 112) >= 1)
  {
    uint64_t v6 = 0;
    do
    {
      uint64_t v7 = *(void *)(*(void *)(v1 + 104) + 8 * v6);
      this = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 32))(v7);
      ++v6;
    }
    while (v6 < *(int *)(v1 + 112));
  }
  *(_DWORD *)(v1 + 112) = 0;
  *(_DWORD *)(v1 + 172) = 0;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::SvInfo::MergePartialFromCodedStream(CoreNavigation::CLP::LogEntry::PrivateData::SvInfo *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  uint64_t v4 = (CoreNavigation::CLP::LogEntry::PrivateData::SvInfo *)((char *)this + 24);
  uint64_t v5 = (CoreNavigation::CLP::LogEntry::PrivateData::SvInfo *)((char *)this + 104);
LABEL_2:
  while (2)
  {
    uint64_t v6 = (char *)*((void *)a2 + 1);
    if ((unint64_t)v6 >= *((void *)a2 + 2) || *v6 < 0)
    {
      unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      if (!TagFallback) {
        return 1;
      }
    }
    else
    {
      unint64_t TagFallback = *v6;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((void *)a2 + 1) = v6 + 1;
      if (!TagFallback) {
        return 1;
      }
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        int v8 = TagFallback & 7;
        if (v8 != 2) {
          goto LABEL_62;
        }
        *((_DWORD *)this + 43) |= 1u;
        uint64_t v9 = (CoreNavigation::CLP::LogEntry::PrivateData::SvId *)*((void *)this + 1);
        if (!v9) {
          operator new();
        }
        v99[0] = 0;
        uint64_t v10 = (char *)*((void *)a2 + 1);
        if ((unint64_t)v10 >= *((void *)a2 + 2) || *v10 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v99))return 0; {
        }
          }
        else
        {
          v99[0] = *v10;
          *((void *)a2 + 1) = v10 + 1;
        }
        int v38 = *((_DWORD *)a2 + 14);
        int v39 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v38 + 1;
        if (v38 >= v39) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CoreNavigation::CLP::LogEntry::PrivateData::SvId::MergePartialFromCodedStream(v9, a2)
          || !*((unsigned char *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        int v40 = *((_DWORD *)a2 + 14);
        BOOL v41 = __OFSUB__(v40, 1);
        int v42 = v40 - 1;
        if (v42 < 0 == v41) {
          *((_DWORD *)a2 + 14) = v42;
        }
        int v43 = (unsigned char *)*((void *)a2 + 1);
        if ((unint64_t)v43 >= *((void *)a2 + 2) || *v43 != 17) {
          continue;
        }
        *((void *)a2 + 1) = v43 + 1;
        goto LABEL_86;
      case 2u:
        int v8 = TagFallback & 7;
        if (v8 != 1) {
          goto LABEL_62;
        }
LABEL_86:
        *(void *)int v99 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, (unint64_t *)v99) & 1) == 0)return 0; {
        *((void *)this + 2) = *(void *)v99;
        }
        *((_DWORD *)this + 43) |= 2u;
        int v44 = (unsigned char *)*((void *)a2 + 1);
        unint64_t v11 = *((void *)a2 + 2);
        if ((unint64_t)v44 >= v11 || *v44 != 24) {
          continue;
        }
        int v12 = v44 + 1;
        *((void *)a2 + 1) = v12;
LABEL_90:
        v99[0] = 0;
        if ((unint64_t)v12 >= v11 || *v12 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v99);
          if (!result) {
            return result;
          }
          unsigned int v45 = v99[0];
        }
        else
        {
          unsigned int v45 = *v12;
          *((void *)a2 + 1) = v12 + 1;
        }
        if (v45 <= 6)
        {
          *((_DWORD *)this + 43) |= 4u;
          *((_DWORD *)this + 14) = v45;
        }
        int v46 = (unsigned char *)*((void *)a2 + 1);
        if ((unint64_t)v46 >= *((void *)a2 + 2) || *v46 != 34) {
          continue;
        }
        do
        {
          *((void *)a2 + 1) = v46 + 1;
LABEL_100:
          int v47 = *((_DWORD *)this + 9);
          uint64_t v48 = *((int *)this + 8);
          if ((int)v48 >= v47)
          {
            if (v47 == *((_DWORD *)this + 10))
            {
              wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v4);
              int v47 = *((_DWORD *)this + 9);
            }
            *((_DWORD *)this + 9) = v47 + 1;
            operator new();
          }
          uint64_t v49 = *((void *)this + 3);
          *((_DWORD *)this + 8) = v48 + 1;
          int v50 = *(CoreNavigation::CLP::LogEntry::PrivateData::SvPositionAtTime **)(v49 + 8 * v48);
          v99[0] = 0;
          int v51 = (char *)*((void *)a2 + 1);
          if ((unint64_t)v51 >= *((void *)a2 + 2) || *v51 < 0)
          {
            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v99))return 0; {
          }
            }
          else
          {
            v99[0] = *v51;
            *((void *)a2 + 1) = v51 + 1;
          }
          int v52 = *((_DWORD *)a2 + 14);
          int v53 = *((_DWORD *)a2 + 15);
          *((_DWORD *)a2 + 14) = v52 + 1;
          if (v52 >= v53) {
            return 0;
          }
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
          if (!CoreNavigation::CLP::LogEntry::PrivateData::SvPositionAtTime::MergePartialFromCodedStream(v50, a2)|| !*((unsigned char *)a2 + 36))
          {
            return 0;
          }
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
          int v54 = *((_DWORD *)a2 + 14);
          BOOL v41 = __OFSUB__(v54, 1);
          int v55 = v54 - 1;
          if (v55 < 0 == v41) {
            *((_DWORD *)a2 + 14) = v55;
          }
          int v46 = (unsigned char *)*((void *)a2 + 1);
          if ((unint64_t)v46 >= *((void *)a2 + 2)) {
            goto LABEL_2;
          }
          int v56 = *v46;
        }
        while (v56 == 34);
        if (v56 != 41) {
          continue;
        }
        *((void *)a2 + 1) = v46 + 1;
LABEL_118:
        *(void *)int v99 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, (unint64_t *)v99) & 1) == 0)return 0; {
        *((void *)this + 6) = *(void *)v99;
        }
        *((_DWORD *)this + 43) |= 0x10u;
        int v57 = (unsigned char *)*((void *)a2 + 1);
        if ((unint64_t)v57 >= *((void *)a2 + 2) || *v57 != 49) {
          continue;
        }
        *((void *)a2 + 1) = v57 + 1;
LABEL_122:
        *(void *)int v99 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, (unint64_t *)v99) & 1) == 0)return 0; {
        *((void *)this + 8) = *(void *)v99;
        }
        *((_DWORD *)this + 43) |= 0x20u;
        int v58 = (unsigned char *)*((void *)a2 + 1);
        if ((unint64_t)v58 >= *((void *)a2 + 2) || *v58 != 57) {
          continue;
        }
        *((void *)a2 + 1) = v58 + 1;
LABEL_126:
        *(void *)int v99 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, (unint64_t *)v99) & 1) == 0)return 0; {
        *((void *)this + 9) = *(void *)v99;
        }
        *((_DWORD *)this + 43) |= 0x40u;
        int v59 = (unsigned char *)*((void *)a2 + 1);
        if ((unint64_t)v59 >= *((void *)a2 + 2) || *v59 != 69) {
          continue;
        }
        *((void *)a2 + 1) = v59 + 1;
LABEL_130:
        v99[0] = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(a2, v99) & 1) == 0) {
          return 0;
        }
        *((_DWORD *)this + 15) = v99[0];
        *((_DWORD *)this + 43) |= 0x80u;
        unsigned int v60 = (unsigned char *)*((void *)a2 + 1);
        if ((unint64_t)v60 >= *((void *)a2 + 2) || *v60 != 77) {
          continue;
        }
        *((void *)a2 + 1) = v60 + 1;
LABEL_134:
        v99[0] = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(a2, v99) & 1) == 0) {
          return 0;
        }
        *((_DWORD *)this + 20) = v99[0];
        *((_DWORD *)this + 43) |= 0x100u;
        v61 = (unsigned char *)*((void *)a2 + 1);
        unint64_t v13 = *((void *)a2 + 2);
        if ((unint64_t)v61 >= v13 || *v61 != 80) {
          continue;
        }
        uint64_t v14 = v61 + 1;
        *((void *)a2 + 1) = v14;
LABEL_138:
        v99[0] = 0;
        if ((unint64_t)v14 >= v13 || *v14 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v99);
          if (!result) {
            return result;
          }
          unsigned int v62 = v99[0];
        }
        else
        {
          unsigned int v62 = *v14;
          *((void *)a2 + 1) = v14 + 1;
        }
        if (v62 <= 4)
        {
          *((_DWORD *)this + 43) |= 0x200u;
          *((_DWORD *)this + 21) = v62;
        }
        int v63 = (unsigned char *)*((void *)a2 + 1);
        unint64_t v15 = *((void *)a2 + 2);
        if ((unint64_t)v63 >= v15 || *v63 != 88) {
          continue;
        }
        int v16 = v63 + 1;
        *((void *)a2 + 1) = v16;
LABEL_148:
        v99[0] = 0;
        if ((unint64_t)v16 >= v15 || *v16 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v99);
          if (!result) {
            return result;
          }
          unsigned int v64 = v99[0];
        }
        else
        {
          unsigned int v64 = *v16;
          *((void *)a2 + 1) = v16 + 1;
        }
        if (v64 <= 4)
        {
          *((_DWORD *)this + 43) |= 0x400u;
          *((_DWORD *)this + 22) = v64;
        }
        int v65 = (unsigned char *)*((void *)a2 + 1);
        unint64_t v17 = *((void *)a2 + 2);
        if ((unint64_t)v65 >= v17 || *v65 != 96) {
          continue;
        }
        unsigned int v18 = v65 + 1;
        *((void *)a2 + 1) = v18;
LABEL_158:
        v99[0] = 0;
        if ((unint64_t)v18 >= v17 || *v18 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v99);
          if (!result) {
            return result;
          }
          unsigned int v66 = v99[0];
        }
        else
        {
          unsigned int v66 = *v18;
          *((void *)a2 + 1) = v18 + 1;
        }
        if (v66 <= 4)
        {
          *((_DWORD *)this + 43) |= 0x800u;
          *((_DWORD *)this + 23) = v66;
        }
        int v67 = (unsigned char *)*((void *)a2 + 1);
        unint64_t v19 = *((void *)a2 + 2);
        if ((unint64_t)v67 >= v19 || *v67 != 104) {
          continue;
        }
        unsigned int v20 = v67 + 1;
        *((void *)a2 + 1) = v20;
LABEL_168:
        v99[0] = 0;
        if ((unint64_t)v20 >= v19 || *v20 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v99);
          if (!result) {
            return result;
          }
          unsigned int v68 = v99[0];
        }
        else
        {
          unsigned int v68 = *v20;
          *((void *)a2 + 1) = v20 + 1;
        }
        if (v68 <= 4)
        {
          *((_DWORD *)this + 43) |= 0x1000u;
          *((_DWORD *)this + 24) = v68;
        }
        uint64_t v69 = (unsigned char *)*((void *)a2 + 1);
        unint64_t v21 = *((void *)a2 + 2);
        if ((unint64_t)v69 >= v21 || *v69 != 112) {
          continue;
        }
        unsigned int v22 = v69 + 1;
        *((void *)a2 + 1) = v22;
LABEL_178:
        v99[0] = 0;
        if ((unint64_t)v22 >= v21 || *v22 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v99);
          if (!result) {
            return result;
          }
          unsigned int v70 = v99[0];
        }
        else
        {
          unsigned int v70 = *v22;
          *((void *)a2 + 1) = v22 + 1;
        }
        if (v70 <= 4)
        {
          *((_DWORD *)this + 43) |= 0x2000u;
          *((_DWORD *)this + 25) = v70;
        }
        int v71 = (unsigned __int8 *)*((void *)a2 + 1);
        if ((unint64_t)v71 >= *((void *)a2 + 2) || *v71 != 122) {
          continue;
        }
        do
        {
          *((void *)a2 + 1) = v71 + 1;
LABEL_188:
          int v72 = *((_DWORD *)this + 29);
          uint64_t v73 = *((int *)this + 28);
          if ((int)v73 >= v72)
          {
            if (v72 == *((_DWORD *)this + 30))
            {
              wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v5);
              int v72 = *((_DWORD *)this + 29);
            }
            *((_DWORD *)this + 29) = v72 + 1;
            operator new();
          }
          uint64_t v74 = *((void *)this + 13);
          *((_DWORD *)this + 28) = v73 + 1;
          int v75 = *(CoreNavigation::CLP::LogEntry::PrivateData::SvBandCorrections **)(v74 + 8 * v73);
          v99[0] = 0;
          int v76 = (char *)*((void *)a2 + 1);
          if ((unint64_t)v76 >= *((void *)a2 + 2) || *v76 < 0)
          {
            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v99))return 0; {
          }
            }
          else
          {
            v99[0] = *v76;
            *((void *)a2 + 1) = v76 + 1;
          }
          int v77 = *((_DWORD *)a2 + 14);
          int v78 = *((_DWORD *)a2 + 15);
          *((_DWORD *)a2 + 14) = v77 + 1;
          if (v77 >= v78) {
            return 0;
          }
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
          if (!CoreNavigation::CLP::LogEntry::PrivateData::SvBandCorrections::MergePartialFromCodedStream(v75, a2)|| !*((unsigned char *)a2 + 36))
          {
            return 0;
          }
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
          int v79 = *((_DWORD *)a2 + 14);
          BOOL v41 = __OFSUB__(v79, 1);
          int v80 = v79 - 1;
          if (v80 < 0 == v41) {
            *((_DWORD *)a2 + 14) = v80;
          }
          int v71 = (unsigned __int8 *)*((void *)a2 + 1);
          unint64_t v81 = *((void *)a2 + 2);
        }
        while ((unint64_t)v71 < v81 && *v71 == 122);
        if ((int)v81 - (int)v71 < 2 || *v71 != 130 || v71[1] != 1) {
          continue;
        }
        *((void *)a2 + 1) = v71 + 2;
LABEL_208:
        *((_DWORD *)this + 43) |= 0x8000u;
        int v82 = (CoreNavigation::CLP::LogEntry::PrivateData::PolynomialOrbit *)*((void *)this + 16);
        if (!v82) {
          operator new();
        }
        v99[0] = 0;
        int v83 = (char *)*((void *)a2 + 1);
        if ((unint64_t)v83 >= *((void *)a2 + 2) || *v83 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v99))return 0; {
        }
          }
        else
        {
          v99[0] = *v83;
          *((void *)a2 + 1) = v83 + 1;
        }
        int v84 = *((_DWORD *)a2 + 14);
        int v85 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v84 + 1;
        if (v84 >= v85) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CoreNavigation::CLP::LogEntry::PrivateData::PolynomialOrbit::MergePartialFromCodedStream(v82, a2)|| !*((unsigned char *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        int v86 = *((_DWORD *)a2 + 14);
        BOOL v41 = __OFSUB__(v86, 1);
        int v87 = v86 - 1;
        if (v87 < 0 == v41) {
          *((_DWORD *)a2 + 14) = v87;
        }
        v88 = (unsigned __int8 *)*((void *)a2 + 1);
        unint64_t v23 = *((void *)a2 + 2);
        if ((int)v23 - (int)v88 <= 1 || *v88 != 144 || v88[1] != 1) {
          continue;
        }
        uint64_t v24 = (char *)(v88 + 2);
        *((void *)a2 + 1) = v24;
LABEL_223:
        v99[0] = 0;
        if ((unint64_t)v24 >= v23 || *v24 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v99);
          if (!result) {
            return result;
          }
          unsigned int v89 = v99[0];
        }
        else
        {
          unsigned int v89 = *v24;
          *((void *)a2 + 1) = v24 + 1;
        }
        if (v89 <= 4)
        {
          *((_DWORD *)this + 43) |= 0x10000u;
          *((_DWORD *)this + 34) = v89;
        }
        int v90 = (unsigned __int8 *)*((void *)a2 + 1);
        unint64_t v25 = *((void *)a2 + 2);
        if ((int)v25 - (int)v90 < 2 || *v90 != 152 || v90[1] != 1) {
          continue;
        }
        unsigned int v26 = (char *)(v90 + 2);
        *((void *)a2 + 1) = v26;
LABEL_234:
        v99[0] = 0;
        if ((unint64_t)v26 >= v25 || *v26 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v99);
          if (!result) {
            return result;
          }
          unsigned int v91 = v99[0];
        }
        else
        {
          unsigned int v91 = *v26;
          *((void *)a2 + 1) = v26 + 1;
        }
        if (v91 <= 4)
        {
          *((_DWORD *)this + 43) |= 0x20000u;
          *((_DWORD *)this + 35) = v91;
        }
        v92 = (unsigned __int8 *)*((void *)a2 + 1);
        unint64_t v27 = *((void *)a2 + 2);
        if ((int)v27 - (int)v92 < 2 || *v92 != 160 || v92[1] != 1) {
          continue;
        }
        unsigned int v28 = (char *)(v92 + 2);
        *((void *)a2 + 1) = v28;
LABEL_245:
        v99[0] = 0;
        if ((unint64_t)v28 >= v27 || *v28 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v99);
          if (!result) {
            return result;
          }
          unsigned int v93 = v99[0];
        }
        else
        {
          unsigned int v93 = *v28;
          *((void *)a2 + 1) = v28 + 1;
        }
        if (v93 <= 4)
        {
          *((_DWORD *)this + 43) |= 0x40000u;
          *((_DWORD *)this + 36) = v93;
        }
        int v94 = (unsigned __int8 *)*((void *)a2 + 1);
        unint64_t v29 = *((void *)a2 + 2);
        if ((int)v29 - (int)v94 < 2 || *v94 != 168 || v94[1] != 1) {
          continue;
        }
        uint64_t v30 = (char *)(v94 + 2);
        *((void *)a2 + 1) = v30;
LABEL_256:
        v99[0] = 0;
        if ((unint64_t)v30 >= v29 || *v30 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v99);
          if (!result) {
            return result;
          }
          unsigned int v95 = v99[0];
        }
        else
        {
          unsigned int v95 = *v30;
          *((void *)a2 + 1) = v30 + 1;
        }
        if (v95 <= 4)
        {
          *((_DWORD *)this + 43) |= 0x80000u;
          *((_DWORD *)this + 37) = v95;
        }
        v96 = (unsigned __int8 *)*((void *)a2 + 1);
        unint64_t v31 = *((void *)a2 + 2);
        if ((int)v31 - (int)v96 < 2 || *v96 != 176 || v96[1] != 1) {
          continue;
        }
        int v32 = (char *)(v96 + 2);
        *((void *)a2 + 1) = v32;
LABEL_267:
        v99[0] = 0;
        if ((unint64_t)v32 >= v31 || *v32 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v99);
          if (!result) {
            return result;
          }
          unsigned int v97 = v99[0];
        }
        else
        {
          unsigned int v97 = *v32;
          *((void *)a2 + 1) = v32 + 1;
        }
        if (v97 <= 4)
        {
          *((_DWORD *)this + 43) |= 0x100000u;
          *((_DWORD *)this + 40) = v97;
        }
        int v98 = (unsigned __int8 *)*((void *)a2 + 1);
        if (*((_DWORD *)a2 + 4) - (int)v98 < 2 || *v98 != 185 || v98[1] != 1) {
          continue;
        }
        *((void *)a2 + 1) = v98 + 2;
LABEL_56:
        *(void *)int v99 = 0;
        if (wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, (unint64_t *)v99))
        {
          *((void *)this + 19) = *(void *)v99;
          *((_DWORD *)this + 43) |= 0x200000u;
          uint64_t v34 = (unsigned __int8 *)*((void *)a2 + 1);
          unint64_t v33 = *((void *)a2 + 2);
          if ((int)v33 - (int)v34 >= 2 && *v34 == 192 && v34[1] == 1)
          {
            unsigned int v35 = (char *)(v34 + 2);
            *((void *)a2 + 1) = v35;
LABEL_66:
            v99[0] = 0;
            if ((unint64_t)v35 >= v33 || *v35 < 0)
            {
              uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v99);
              if (!result) {
                return result;
              }
              unsigned int v36 = v99[0];
            }
            else
            {
              unsigned int v36 = *v35;
              *((void *)a2 + 1) = v35 + 1;
            }
            if (v36 <= 3)
            {
              *((_DWORD *)this + 43) |= 0x400000u;
              *((_DWORD *)this + 41) = v36;
            }
            if (*((void *)a2 + 1) == *((void *)a2 + 2)
              && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
            {
              *((_DWORD *)a2 + 8) = 0;
              uint64_t result = 1;
              *((unsigned char *)a2 + 36) = 1;
              return result;
            }
          }
          continue;
        }
        return 0;
      case 3u:
        int v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_62;
        }
        int v12 = (char *)*((void *)a2 + 1);
        unint64_t v11 = *((void *)a2 + 2);
        goto LABEL_90;
      case 4u:
        int v8 = TagFallback & 7;
        if (v8 == 2) {
          goto LABEL_100;
        }
        goto LABEL_62;
      case 5u:
        int v8 = TagFallback & 7;
        if (v8 == 1) {
          goto LABEL_118;
        }
        goto LABEL_62;
      case 6u:
        int v8 = TagFallback & 7;
        if (v8 == 1) {
          goto LABEL_122;
        }
        goto LABEL_62;
      case 7u:
        int v8 = TagFallback & 7;
        if (v8 == 1) {
          goto LABEL_126;
        }
        goto LABEL_62;
      case 8u:
        int v8 = TagFallback & 7;
        if (v8 == 5) {
          goto LABEL_130;
        }
        goto LABEL_62;
      case 9u:
        int v8 = TagFallback & 7;
        if (v8 == 5) {
          goto LABEL_134;
        }
        goto LABEL_62;
      case 0xAu:
        int v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_62;
        }
        uint64_t v14 = (char *)*((void *)a2 + 1);
        unint64_t v13 = *((void *)a2 + 2);
        goto LABEL_138;
      case 0xBu:
        int v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_62;
        }
        int v16 = (char *)*((void *)a2 + 1);
        unint64_t v15 = *((void *)a2 + 2);
        goto LABEL_148;
      case 0xCu:
        int v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_62;
        }
        unsigned int v18 = (char *)*((void *)a2 + 1);
        unint64_t v17 = *((void *)a2 + 2);
        goto LABEL_158;
      case 0xDu:
        int v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_62;
        }
        unsigned int v20 = (char *)*((void *)a2 + 1);
        unint64_t v19 = *((void *)a2 + 2);
        goto LABEL_168;
      case 0xEu:
        int v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_62;
        }
        unsigned int v22 = (char *)*((void *)a2 + 1);
        unint64_t v21 = *((void *)a2 + 2);
        goto LABEL_178;
      case 0xFu:
        int v8 = TagFallback & 7;
        if (v8 == 2) {
          goto LABEL_188;
        }
        goto LABEL_62;
      case 0x10u:
        int v8 = TagFallback & 7;
        if (v8 == 2) {
          goto LABEL_208;
        }
        goto LABEL_62;
      case 0x12u:
        int v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_62;
        }
        uint64_t v24 = (char *)*((void *)a2 + 1);
        unint64_t v23 = *((void *)a2 + 2);
        goto LABEL_223;
      case 0x13u:
        int v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_62;
        }
        unsigned int v26 = (char *)*((void *)a2 + 1);
        unint64_t v25 = *((void *)a2 + 2);
        goto LABEL_234;
      case 0x14u:
        int v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_62;
        }
        unsigned int v28 = (char *)*((void *)a2 + 1);
        unint64_t v27 = *((void *)a2 + 2);
        goto LABEL_245;
      case 0x15u:
        int v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_62;
        }
        uint64_t v30 = (char *)*((void *)a2 + 1);
        unint64_t v29 = *((void *)a2 + 2);
        goto LABEL_256;
      case 0x16u:
        int v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_62;
        }
        int v32 = (char *)*((void *)a2 + 1);
        unint64_t v31 = *((void *)a2 + 2);
        goto LABEL_267;
      case 0x17u:
        int v8 = TagFallback & 7;
        if (v8 == 1) {
          goto LABEL_56;
        }
        goto LABEL_62;
      case 0x18u:
        int v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_62;
        }
        unsigned int v35 = (char *)*((void *)a2 + 1);
        unint64_t v33 = *((void *)a2 + 2);
        goto LABEL_66;
      default:
        int v8 = TagFallback & 7;
LABEL_62:
        if (v8 == 4) {
          return 1;
        }
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0; {
        continue;
        }
    }
  }
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::SvInfo::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  int v6 = *(_DWORD *)(this + 172);
  if (v6)
  {
    uint64_t v11 = *(void *)(this + 8);
    if (!v11)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)this);
      uint64_t v11 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::SvInfo::default_instance_ + 8);
    }
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v11, a2, a4);
    int v6 = *(_DWORD *)(v5 + 172);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, (uint64_t)a2, *(double *)(v5 + 16), a3);
  if ((*(_DWORD *)(v5 + 172) & 4) != 0) {
LABEL_4:
  }
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(unsigned int *)(v5 + 56), (uint64_t)a2, a4);
LABEL_5:
  if (*(int *)(v5 + 32) >= 1)
  {
    uint64_t v7 = 0;
    do
      this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(void *)(*(void *)(v5 + 24) + 8 * v7++), a2, a4);
    while (v7 < *(int *)(v5 + 32));
  }
  int v8 = *(_DWORD *)(v5 + 172);
  if ((v8 & 0x10) != 0)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, (uint64_t)a2, *(double *)(v5 + 48), a3);
    int v8 = *(_DWORD *)(v5 + 172);
    if ((v8 & 0x20) == 0)
    {
LABEL_10:
      if ((v8 & 0x40) == 0) {
        goto LABEL_11;
      }
      goto LABEL_38;
    }
  }
  else if ((v8 & 0x20) == 0)
  {
    goto LABEL_10;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, (uint64_t)a2, *(double *)(v5 + 64), a3);
  int v8 = *(_DWORD *)(v5 + 172);
  if ((v8 & 0x40) == 0)
  {
LABEL_11:
    if ((v8 & 0x80) == 0) {
      goto LABEL_12;
    }
    goto LABEL_39;
  }
LABEL_38:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, (uint64_t)a2, *(double *)(v5 + 72), a3);
  int v8 = *(_DWORD *)(v5 + 172);
  if ((v8 & 0x80) == 0)
  {
LABEL_12:
    if ((v8 & 0x100) == 0) {
      goto LABEL_13;
    }
    goto LABEL_40;
  }
LABEL_39:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, (uint64_t)a2, *(float *)(v5 + 60), a3);
  int v8 = *(_DWORD *)(v5 + 172);
  if ((v8 & 0x100) == 0)
  {
LABEL_13:
    if ((v8 & 0x200) == 0) {
      goto LABEL_14;
    }
    goto LABEL_41;
  }
LABEL_40:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9, (uint64_t)a2, *(float *)(v5 + 80), a3);
  int v8 = *(_DWORD *)(v5 + 172);
  if ((v8 & 0x200) == 0)
  {
LABEL_14:
    if ((v8 & 0x400) == 0) {
      goto LABEL_15;
    }
    goto LABEL_42;
  }
LABEL_41:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA, *(unsigned int *)(v5 + 84), (uint64_t)a2, a4);
  int v8 = *(_DWORD *)(v5 + 172);
  if ((v8 & 0x400) == 0)
  {
LABEL_15:
    if ((v8 & 0x800) == 0) {
      goto LABEL_16;
    }
    goto LABEL_43;
  }
LABEL_42:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB, *(unsigned int *)(v5 + 88), (uint64_t)a2, a4);
  int v8 = *(_DWORD *)(v5 + 172);
  if ((v8 & 0x800) == 0)
  {
LABEL_16:
    if ((v8 & 0x1000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_44;
  }
LABEL_43:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xC, *(unsigned int *)(v5 + 92), (uint64_t)a2, a4);
  int v8 = *(_DWORD *)(v5 + 172);
  if ((v8 & 0x1000) == 0)
  {
LABEL_17:
    if ((v8 & 0x2000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
LABEL_44:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xD, *(unsigned int *)(v5 + 96), (uint64_t)a2, a4);
  if ((*(_DWORD *)(v5 + 172) & 0x2000) != 0) {
LABEL_18:
  }
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xE, *(unsigned int *)(v5 + 100), (uint64_t)a2, a4);
LABEL_19:
  if (*(int *)(v5 + 112) >= 1)
  {
    uint64_t v9 = 0;
    do
      this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xF, *(void *)(*(void *)(v5 + 104) + 8 * v9++), a2, a4);
    while (v9 < *(int *)(v5 + 112));
  }
  int v10 = *(_DWORD *)(v5 + 172);
  if ((v10 & 0x8000) != 0)
  {
    uint64_t v12 = *(void *)(v5 + 128);
    if (!v12)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)this);
      uint64_t v12 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::SvInfo::default_instance_ + 128);
    }
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x10, v12, a2, a4);
    int v10 = *(_DWORD *)(v5 + 172);
    if ((v10 & 0x10000) == 0)
    {
LABEL_24:
      if ((v10 & 0x20000) == 0) {
        goto LABEL_25;
      }
      goto LABEL_50;
    }
  }
  else if ((v10 & 0x10000) == 0)
  {
    goto LABEL_24;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x12, *(unsigned int *)(v5 + 136), (uint64_t)a2, a4);
  int v10 = *(_DWORD *)(v5 + 172);
  if ((v10 & 0x20000) == 0)
  {
LABEL_25:
    if ((v10 & 0x40000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_51;
  }
LABEL_50:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x13, *(unsigned int *)(v5 + 140), (uint64_t)a2, a4);
  int v10 = *(_DWORD *)(v5 + 172);
  if ((v10 & 0x40000) == 0)
  {
LABEL_26:
    if ((v10 & 0x80000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_52;
  }
LABEL_51:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x14, *(unsigned int *)(v5 + 144), (uint64_t)a2, a4);
  int v10 = *(_DWORD *)(v5 + 172);
  if ((v10 & 0x80000) == 0)
  {
LABEL_27:
    if ((v10 & 0x100000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_53;
  }
LABEL_52:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x15, *(unsigned int *)(v5 + 148), (uint64_t)a2, a4);
  int v10 = *(_DWORD *)(v5 + 172);
  if ((v10 & 0x100000) == 0)
  {
LABEL_28:
    if ((v10 & 0x200000) == 0) {
      goto LABEL_29;
    }
LABEL_54:
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x17, (uint64_t)a2, *(double *)(v5 + 152), a3);
    if ((*(_DWORD *)(v5 + 172) & 0x400000) == 0) {
      return this;
    }
    goto LABEL_55;
  }
LABEL_53:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x16, *(unsigned int *)(v5 + 160), (uint64_t)a2, a4);
  int v10 = *(_DWORD *)(v5 + 172);
  if ((v10 & 0x200000) != 0) {
    goto LABEL_54;
  }
LABEL_29:
  if ((v10 & 0x400000) == 0) {
    return this;
  }
LABEL_55:
  uint64_t v13 = *(unsigned int *)(v5 + 164);

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0x18, v13, (uint64_t)a2, a4);
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::SvInfo::ByteSize(CoreNavigation::CLP::LogEntry::PrivateData::SvInfo *this)
{
  int v2 = *((_DWORD *)this + 43);
  if ((_BYTE)v2)
  {
    if (v2)
    {
      uint64_t v5 = (CoreNavigation::CLP::LogEntry::PrivateData::SvId *)*((void *)this + 1);
      if (!v5)
      {
        CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(0);
        uint64_t v5 = *(CoreNavigation::CLP::LogEntry::PrivateData::SvId **)(CoreNavigation::CLP::LogEntry::PrivateData::SvInfo::default_instance_
                                                                  + 8);
      }
      int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CoreNavigation::CLP::LogEntry::PrivateData::SvId::ByteSize(v5);
      int v7 = (int)v6;
      if (v6 >= 0x80) {
        int v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6);
      }
      else {
        int v8 = 1;
      }
      int v3 = v7 + v8 + 1;
      int v2 = *((_DWORD *)this + 43);
    }
    else
    {
      int v3 = 0;
    }
    if ((v2 & 2) != 0) {
      int v9 = v3 + 9;
    }
    else {
      int v9 = v3;
    }
    if ((v2 & 4) != 0)
    {
      int v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 14);
      if ((v10 & 0x80000000) != 0)
      {
        int v11 = 10;
      }
      else if (v10 >= 0x80)
      {
        int v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v10);
        int v2 = *((_DWORD *)this + 43);
      }
      else
      {
        int v11 = 1;
      }
      v9 += v11 + 1;
    }
    int v12 = v9 + 9;
    if ((v2 & 0x10) == 0) {
      int v12 = v9;
    }
    if ((v2 & 0x20) != 0) {
      v12 += 9;
    }
    if ((v2 & 0x40) != 0) {
      v12 += 9;
    }
    if ((v2 & 0x80) != 0) {
      int v4 = v12 + 5;
    }
    else {
      int v4 = v12;
    }
  }
  else
  {
    int v4 = 0;
  }
  if ((v2 & 0xFF00) != 0)
  {
    if ((v2 & 0x100) != 0) {
      v4 += 5;
    }
    if ((v2 & 0x200) != 0)
    {
      uint64_t v13 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 21);
      if ((v13 & 0x80000000) != 0)
      {
        int v14 = 10;
      }
      else if (v13 >= 0x80)
      {
        int v14 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v13);
        int v2 = *((_DWORD *)this + 43);
      }
      else
      {
        int v14 = 1;
      }
      v4 += v14 + 1;
      if ((v2 & 0x400) == 0)
      {
LABEL_35:
        if ((v2 & 0x800) == 0) {
          goto LABEL_36;
        }
        goto LABEL_52;
      }
    }
    else if ((v2 & 0x400) == 0)
    {
      goto LABEL_35;
    }
    unint64_t v15 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 22);
    if ((v15 & 0x80000000) != 0)
    {
      int v16 = 10;
    }
    else if (v15 >= 0x80)
    {
      int v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v15);
      int v2 = *((_DWORD *)this + 43);
    }
    else
    {
      int v16 = 1;
    }
    v4 += v16 + 1;
    if ((v2 & 0x800) == 0)
    {
LABEL_36:
      if ((v2 & 0x1000) == 0) {
        goto LABEL_37;
      }
      goto LABEL_58;
    }
LABEL_52:
    unint64_t v17 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 23);
    if ((v17 & 0x80000000) != 0)
    {
      int v18 = 10;
    }
    else if (v17 >= 0x80)
    {
      int v18 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v17);
      int v2 = *((_DWORD *)this + 43);
    }
    else
    {
      int v18 = 1;
    }
    v4 += v18 + 1;
    if ((v2 & 0x1000) == 0)
    {
LABEL_37:
      if ((v2 & 0x2000) == 0) {
        goto LABEL_38;
      }
      goto LABEL_64;
    }
LABEL_58:
    unint64_t v19 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 24);
    if ((v19 & 0x80000000) != 0)
    {
      int v20 = 10;
    }
    else if (v19 >= 0x80)
    {
      int v20 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v19);
      int v2 = *((_DWORD *)this + 43);
    }
    else
    {
      int v20 = 1;
    }
    v4 += v20 + 1;
    if ((v2 & 0x2000) == 0)
    {
LABEL_38:
      if ((v2 & 0x8000) == 0) {
        goto LABEL_76;
      }
LABEL_70:
      unint64_t v23 = (CoreNavigation::CLP::LogEntry::PrivateData::PolynomialOrbit *)*((void *)this + 16);
      if (!v23)
      {
        CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(0);
        unint64_t v23 = *(CoreNavigation::CLP::LogEntry::PrivateData::PolynomialOrbit **)(CoreNavigation::CLP::LogEntry::PrivateData::SvInfo::default_instance_
                                                                              + 128);
      }
      uint64_t v24 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CoreNavigation::CLP::LogEntry::PrivateData::PolynomialOrbit::ByteSize(v23);
      int v25 = (int)v24;
      if (v24 >= 0x80) {
        int v26 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v24);
      }
      else {
        int v26 = 1;
      }
      v4 += v25 + v26 + 2;
      int v2 = *((_DWORD *)this + 43);
      goto LABEL_76;
    }
LABEL_64:
    unint64_t v21 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 25);
    if ((v21 & 0x80000000) != 0)
    {
      int v22 = 10;
    }
    else if (v21 >= 0x80)
    {
      int v22 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v21);
      int v2 = *((_DWORD *)this + 43);
    }
    else
    {
      int v22 = 1;
    }
    v4 += v22 + 1;
    if ((v2 & 0x8000) == 0) {
      goto LABEL_76;
    }
    goto LABEL_70;
  }
LABEL_76:
  if ((v2 & 0xFF0000) == 0) {
    goto LABEL_122;
  }
  if ((v2 & 0x10000) != 0)
  {
    unint64_t v27 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 34);
    if ((v27 & 0x80000000) != 0)
    {
      int v28 = 10;
    }
    else if (v27 >= 0x80)
    {
      int v28 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v27);
      int v2 = *((_DWORD *)this + 43);
    }
    else
    {
      int v28 = 1;
    }
    v4 += v28 + 2;
    if ((v2 & 0x20000) == 0)
    {
LABEL_79:
      if ((v2 & 0x40000) == 0) {
        goto LABEL_80;
      }
      goto LABEL_95;
    }
  }
  else if ((v2 & 0x20000) == 0)
  {
    goto LABEL_79;
  }
  unint64_t v29 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 35);
  if ((v29 & 0x80000000) != 0)
  {
    int v30 = 10;
  }
  else if (v29 >= 0x80)
  {
    int v30 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v29);
    int v2 = *((_DWORD *)this + 43);
  }
  else
  {
    int v30 = 1;
  }
  v4 += v30 + 2;
  if ((v2 & 0x40000) == 0)
  {
LABEL_80:
    if ((v2 & 0x80000) == 0) {
      goto LABEL_81;
    }
LABEL_101:
    unint64_t v33 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 37);
    if ((v33 & 0x80000000) != 0)
    {
      int v34 = 12;
    }
    else if (v33 >= 0x80)
    {
      int v34 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v33) + 2;
      int v2 = *((_DWORD *)this + 43);
    }
    else
    {
      int v34 = 3;
    }
    v4 += v34;
    if ((v2 & 0x100000) == 0) {
      goto LABEL_113;
    }
    goto LABEL_107;
  }
LABEL_95:
  unint64_t v31 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 36);
  if ((v31 & 0x80000000) != 0)
  {
    int v32 = 12;
  }
  else if (v31 >= 0x80)
  {
    int v32 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v31) + 2;
    int v2 = *((_DWORD *)this + 43);
  }
  else
  {
    int v32 = 3;
  }
  v4 += v32;
  if ((v2 & 0x80000) != 0) {
    goto LABEL_101;
  }
LABEL_81:
  if ((v2 & 0x100000) != 0)
  {
LABEL_107:
    unsigned int v35 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 40);
    if ((v35 & 0x80000000) != 0)
    {
      int v36 = 12;
    }
    else if (v35 >= 0x80)
    {
      int v36 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v35) + 2;
      int v2 = *((_DWORD *)this + 43);
    }
    else
    {
      int v36 = 3;
    }
    v4 += v36;
  }
LABEL_113:
  if ((v2 & 0x200000) != 0) {
    v4 += 10;
  }
  if ((v2 & 0x400000) != 0)
  {
    uint64_t v37 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 41);
    if ((v37 & 0x80000000) != 0)
    {
      int v38 = 12;
    }
    else if (v37 >= 0x80)
    {
      int v38 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v37) + 2;
    }
    else
    {
      int v38 = 3;
    }
    v4 += v38;
  }
LABEL_122:
  int v39 = *((_DWORD *)this + 8);
  int v40 = v39 + v4;
  if (v39 >= 1)
  {
    uint64_t v41 = 0;
    do
      v40 += CoreNavigation::CLP::LogEntry::PrivateData::SvPositionAtTime::ByteSize(*(CoreNavigation::CLP::LogEntry::PrivateData::SvPositionAtTime **)(*((void *)this + 3) + 8 * v41++))
           + 1;
    while (v41 < *((int *)this + 8));
  }
  int v42 = *((_DWORD *)this + 28);
  uint64_t v43 = (v42 + v40);
  if (v42 >= 1)
  {
    uint64_t v44 = 0;
    do
    {
      unsigned int v45 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CoreNavigation::CLP::LogEntry::PrivateData::SvBandCorrections::ByteSize(*(CoreNavigation::CLP::LogEntry::PrivateData::SvBandCorrections **)(*((void *)this + 13) + 8 * v44));
      int v46 = (int)v45;
      if (v45 >= 0x80) {
        int v47 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v45);
      }
      else {
        int v47 = 1;
      }
      uint64_t v43 = (v46 + v43 + v47);
      ++v44;
    }
    while (v44 < *((int *)this + 28));
  }
  *((_DWORD *)this + 42) = v43;
  return v43;
}

void CoreNavigation::CLP::LogEntry::PrivateData::SvInfo::CheckTypeAndMergeFrom(CoreNavigation::CLP::LogEntry::PrivateData::SvInfo *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  CoreNavigation::CLP::LogEntry::PrivateData::SvInfo::MergeFrom(this, lpsrc);
}

void CoreNavigation::CLP::LogEntry::PrivateData::SvInfo::CopyFrom(CoreNavigation::CLP::LogEntry::PrivateData::SvInfo *this, const CoreNavigation::CLP::LogEntry::PrivateData::SvInfo *a2)
{
  if (a2 != this)
  {
    (*(void (**)(CoreNavigation::CLP::LogEntry::PrivateData::SvInfo *))(*(void *)this + 32))(this);
    CoreNavigation::CLP::LogEntry::PrivateData::SvInfo::MergeFrom(this, a2);
  }
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::SvInfo::IsInitialized(CoreNavigation::CLP::LogEntry::PrivateData::SvInfo *this)
{
  return 1;
}

double CoreNavigation::CLP::LogEntry::PrivateData::SvInfo::Swap(CoreNavigation::CLP::LogEntry::PrivateData::SvInfo *this, CoreNavigation::CLP::LogEntry::PrivateData::SvInfo *a2)
{
  if (a2 != this)
  {
    uint64_t v4 = *((void *)this + 1);
    *((void *)this + 1) = *((void *)a2 + 1);
    *((void *)a2 + 1) = v4;
    uint64_t v5 = *((void *)this + 2);
    *((void *)this + 2) = *((void *)a2 + 2);
    *((void *)a2 + 2) = v5;
    LODWORD(v4) = *((_DWORD *)this + 14);
    *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
    *((_DWORD *)a2 + 14) = v4;
    wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Swap();
    uint64_t v6 = *((void *)this + 6);
    *((void *)this + 6) = *((void *)a2 + 6);
    *((void *)a2 + 6) = v6;
    uint64_t v7 = *((void *)this + 8);
    *((void *)this + 8) = *((void *)a2 + 8);
    *((void *)a2 + 8) = v7;
    uint64_t v8 = *((void *)this + 9);
    *((void *)this + 9) = *((void *)a2 + 9);
    *((void *)a2 + 9) = v8;
    LODWORD(v8) = *((_DWORD *)this + 15);
    *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
    *((_DWORD *)a2 + 15) = v8;
    LODWORD(v8) = *((_DWORD *)this + 20);
    *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
    *((_DWORD *)a2 + 20) = v8;
    int v9 = *((_DWORD *)this + 21);
    *((_DWORD *)this + 21) = *((_DWORD *)a2 + 21);
    *((_DWORD *)a2 + 21) = v9;
    int v10 = *((_DWORD *)this + 22);
    *((_DWORD *)this + 22) = *((_DWORD *)a2 + 22);
    *((_DWORD *)a2 + 22) = v10;
    int v11 = *((_DWORD *)this + 23);
    *((_DWORD *)this + 23) = *((_DWORD *)a2 + 23);
    *((_DWORD *)a2 + 23) = v11;
    int v12 = *((_DWORD *)this + 24);
    *((_DWORD *)this + 24) = *((_DWORD *)a2 + 24);
    *((_DWORD *)a2 + 24) = v12;
    int v13 = *((_DWORD *)this + 25);
    *((_DWORD *)this + 25) = *((_DWORD *)a2 + 25);
    *((_DWORD *)a2 + 25) = v13;
    wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Swap();
    uint64_t v14 = *((void *)this + 16);
    *((void *)this + 16) = *((void *)a2 + 16);
    *((void *)a2 + 16) = v14;
    LODWORD(v14) = *((_DWORD *)this + 34);
    *((_DWORD *)this + 34) = *((_DWORD *)a2 + 34);
    *((_DWORD *)a2 + 34) = v14;
    LODWORD(v14) = *((_DWORD *)this + 35);
    *((_DWORD *)this + 35) = *((_DWORD *)a2 + 35);
    *((_DWORD *)a2 + 35) = v14;
    LODWORD(v14) = *((_DWORD *)this + 36);
    *((_DWORD *)this + 36) = *((_DWORD *)a2 + 36);
    *((_DWORD *)a2 + 36) = v14;
    LODWORD(v14) = *((_DWORD *)this + 37);
    *((_DWORD *)this + 37) = *((_DWORD *)a2 + 37);
    *((_DWORD *)a2 + 37) = v14;
    LODWORD(v14) = *((_DWORD *)this + 40);
    *((_DWORD *)this + 40) = *((_DWORD *)a2 + 40);
    *((_DWORD *)a2 + 40) = v14;
    double result = *((double *)this + 19);
    *((void *)this + 19) = *((void *)a2 + 19);
    *((double *)a2 + 19) = result;
    LODWORD(v14) = *((_DWORD *)this + 41);
    *((_DWORD *)this + 41) = *((_DWORD *)a2 + 41);
    *((_DWORD *)a2 + 41) = v14;
    LODWORD(v14) = *((_DWORD *)this + 43);
    *((_DWORD *)this + 43) = *((_DWORD *)a2 + 43);
    *((_DWORD *)a2 + 43) = v14;
    LODWORD(v14) = *((_DWORD *)this + 42);
    *((_DWORD *)this + 42) = *((_DWORD *)a2 + 42);
    *((_DWORD *)a2 + 42) = v14;
  }
  return result;
}

void *CoreNavigation::CLP::LogEntry::PrivateData::SvInfo::GetTypeName@<X0>(void *a1@<X8>)
{
  return sub_18DEDE7B0(a1, "CoreNavigation.CLP.LogEntry.PrivateData.SvInfo");
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::ReceiverBandCorrections::SharedCtor(uint64_t this)
{
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(_DWORD *)(this + 32) = 0;
  *(void *)(this + 24) = 0;
  return this;
}

CoreNavigation::CLP::LogEntry::PrivateData::ReceiverBandCorrections *CoreNavigation::CLP::LogEntry::PrivateData::ReceiverBandCorrections::ReceiverBandCorrections(CoreNavigation::CLP::LogEntry::PrivateData::ReceiverBandCorrections *this, const CoreNavigation::CLP::LogEntry::PrivateData::ReceiverBandCorrections *a2)
{
  *(void *)this = &unk_1EDD0DEC8;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  CoreNavigation::CLP::LogEntry::PrivateData::ReceiverBandCorrections::MergeFrom(this, a2);
  return this;
}

void sub_18DFD2EC0(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

float CoreNavigation::CLP::LogEntry::PrivateData::ReceiverBandCorrections::MergeFrom(CoreNavigation::CLP::LogEntry::PrivateData::ReceiverBandCorrections *this, const CoreNavigation::CLP::LogEntry::PrivateData::ReceiverBandCorrections *a2)
{
  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v8);
  }
  LOBYTE(v5) = *((unsigned char *)a2 + 32);
  if (!(_BYTE)v5) {
    return *(float *)&v4;
  }
  if (*((unsigned char *)a2 + 32))
  {
    unsigned int v6 = *((_DWORD *)a2 + 4);
    if (v6 >= 0xD) {
      __assert_rtn("set_band", "CoreNavigationCLPGnssMeasApi.pb.h", 11446, "::CoreNavigation::CLP::LogEntry::PrivateData::Band_IsValid(value)");
    }
    *((_DWORD *)this + 8) |= 1u;
    *((_DWORD *)this + 4) = v6;
    int v5 = *((_DWORD *)a2 + 8);
  }
  if ((v5 & 2) == 0)
  {
    if ((v5 & 4) == 0) {
      goto LABEL_9;
    }
LABEL_13:
    LODWORD(v4) = *((_DWORD *)a2 + 5);
    *((_DWORD *)this + 8) |= 4u;
    *((_DWORD *)this + 5) = v4;
    if ((*((_DWORD *)a2 + 8) & 8) == 0) {
      return *(float *)&v4;
    }
    goto LABEL_10;
  }
  uint64_t v4 = *((void *)a2 + 1);
  *((_DWORD *)this + 8) |= 2u;
  *((void *)this + 1) = v4;
  int v5 = *((_DWORD *)a2 + 8);
  if ((v5 & 4) != 0) {
    goto LABEL_13;
  }
LABEL_9:
  if ((v5 & 8) != 0)
  {
LABEL_10:
    LODWORD(v4) = *((_DWORD *)a2 + 6);
    *((_DWORD *)this + 8) |= 8u;
    *((_DWORD *)this + 6) = v4;
  }
  return *(float *)&v4;
}

void sub_18DFD2FEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CoreNavigation::CLP::LogEntry::PrivateData::ReceiverBandCorrections::~ReceiverBandCorrections(CoreNavigation::CLP::LogEntry::PrivateData::ReceiverBandCorrections *this)
{
  *(void *)this = &unk_1EDD0DEC8;
  CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  uint64_t vars8;

  CoreNavigation::CLP::LogEntry::PrivateData::ReceiverBandCorrections::~ReceiverBandCorrections(this);

  JUMPOUT(0x192FA6240);
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::ReceiverBandCorrections::default_instance(CoreNavigation::CLP::LogEntry::PrivateData::ReceiverBandCorrections *this)
{
  return CoreNavigation::CLP::LogEntry::PrivateData::ReceiverBandCorrections::default_instance_;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::ReceiverBandCorrections::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 28) = a2;
  return this;
}

void CoreNavigation::CLP::LogEntry::PrivateData::ReceiverBandCorrections::New(CoreNavigation::CLP::LogEntry::PrivateData::ReceiverBandCorrections *this)
{
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::ReceiverBandCorrections::Clear(uint64_t this)
{
  if (*(unsigned char *)(this + 32))
  {
    *(void *)(this + 8) = 0;
    *(void *)(this + 16) = 0;
    *(_DWORD *)(this + 24) = 0;
  }
  *(_DWORD *)(this + 32) = 0;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::ReceiverBandCorrections::MergePartialFromCodedStream(CoreNavigation::CLP::LogEntry::PrivateData::ReceiverBandCorrections *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  while (2)
  {
    uint64_t v4 = (char *)*((void *)a2 + 1);
    if ((unint64_t)v4 >= *((void *)a2 + 2) || *v4 < 0)
    {
      unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      if (!TagFallback) {
        return 1;
      }
    }
    else
    {
      unint64_t TagFallback = *v4;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((void *)a2 + 1) = v4 + 1;
      if (!TagFallback) {
        return 1;
      }
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        int v6 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_17;
        }
        v13[0] = 0;
        uint64_t v7 = (char *)*((void *)a2 + 1);
        if ((unint64_t)v7 >= *((void *)a2 + 2) || *v7 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v13);
          if (!result) {
            return result;
          }
          unsigned int v8 = v13[0];
        }
        else
        {
          unsigned int v8 = *v7;
          *((void *)a2 + 1) = v7 + 1;
        }
        if (v8 <= 0xC)
        {
          *((_DWORD *)this + 8) |= 1u;
          *((_DWORD *)this + 4) = v8;
        }
        int v10 = (unsigned char *)*((void *)a2 + 1);
        if ((unint64_t)v10 < *((void *)a2 + 2) && *v10 == 17)
        {
          *((void *)a2 + 1) = v10 + 1;
          goto LABEL_27;
        }
        continue;
      case 2u:
        int v6 = TagFallback & 7;
        if (v6 != 1) {
          goto LABEL_17;
        }
LABEL_27:
        *(void *)int v13 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, (unint64_t *)v13) & 1) == 0)return 0; {
        *((void *)this + 1) = *(void *)v13;
        }
        *((_DWORD *)this + 8) |= 2u;
        int v11 = (unsigned char *)*((void *)a2 + 1);
        if ((unint64_t)v11 >= *((void *)a2 + 2) || *v11 != 29) {
          continue;
        }
        *((void *)a2 + 1) = v11 + 1;
LABEL_31:
        v13[0] = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(a2, v13) & 1) == 0) {
          return 0;
        }
        *((_DWORD *)this + 5) = v13[0];
        *((_DWORD *)this + 8) |= 4u;
        int v12 = (unsigned char *)*((void *)a2 + 1);
        if ((unint64_t)v12 >= *((void *)a2 + 2) || *v12 != 37) {
          continue;
        }
        *((void *)a2 + 1) = v12 + 1;
LABEL_35:
        v13[0] = 0;
        if (wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(a2, v13))
        {
          *((_DWORD *)this + 6) = v13[0];
          *((_DWORD *)this + 8) |= 8u;
          if (*((void *)a2 + 1) == *((void *)a2 + 2)
            && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
          {
            *((_DWORD *)a2 + 8) = 0;
            uint64_t result = 1;
            *((unsigned char *)a2 + 36) = 1;
            return result;
          }
          continue;
        }
        return 0;
      case 3u:
        int v6 = TagFallback & 7;
        if (v6 == 5) {
          goto LABEL_31;
        }
        goto LABEL_17;
      case 4u:
        int v6 = TagFallback & 7;
        if (v6 != 5) {
          goto LABEL_17;
        }
        goto LABEL_35;
      default:
        int v6 = TagFallback & 7;
LABEL_17:
        if (v6 == 4) {
          return 1;
        }
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0; {
        continue;
        }
    }
  }
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::ReceiverBandCorrections::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  int v6 = *(_DWORD *)(this + 32);
  if (v6)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned int *)(this + 16), (uint64_t)a2, a4);
    int v6 = *(_DWORD *)(v5 + 32);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, (uint64_t)a2, *(float *)(v5 + 20), a3);
      if ((*(_DWORD *)(v5 + 32) & 8) == 0) {
        return this;
      }
      goto LABEL_9;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, (uint64_t)a2, *(double *)(v5 + 8), a3);
  int v6 = *(_DWORD *)(v5 + 32);
  if ((v6 & 4) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v6 & 8) == 0) {
    return this;
  }
LABEL_9:
  float v7 = *(float *)(v5 + 24);

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, (uint64_t)a2, v7, a3);
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::ReceiverBandCorrections::ByteSize(CoreNavigation::CLP::LogEntry::PrivateData::ReceiverBandCorrections *this)
{
  LOBYTE(v2) = *((unsigned char *)this + 32);
  if ((_BYTE)v2)
  {
    if (*((unsigned char *)this + 32))
    {
      uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 4);
      if ((v5 & 0x80000000) != 0)
      {
        unsigned int v3 = 11;
      }
      else if (v5 >= 0x80)
      {
        unsigned int v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5) + 1;
        int v2 = *((_DWORD *)this + 8);
      }
      else
      {
        unsigned int v3 = 2;
      }
    }
    else
    {
      unsigned int v3 = 0;
    }
    if ((v2 & 2) != 0) {
      v3 += 9;
    }
    if ((v2 & 4) != 0) {
      v3 += 5;
    }
    if ((v2 & 8) != 0) {
      uint64_t result = v3 + 5;
    }
    else {
      uint64_t result = v3;
    }
  }
  else
  {
    uint64_t result = 0;
  }
  *((_DWORD *)this + 7) = result;
  return result;
}

float CoreNavigation::CLP::LogEntry::PrivateData::ReceiverBandCorrections::CheckTypeAndMergeFrom(CoreNavigation::CLP::LogEntry::PrivateData::ReceiverBandCorrections *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  return CoreNavigation::CLP::LogEntry::PrivateData::ReceiverBandCorrections::MergeFrom(this, lpsrc);
}

float CoreNavigation::CLP::LogEntry::PrivateData::ReceiverBandCorrections::CopyFrom(CoreNavigation::CLP::LogEntry::PrivateData::ReceiverBandCorrections *this, const CoreNavigation::CLP::LogEntry::PrivateData::ReceiverBandCorrections *a2)
{
  if (a2 != this)
  {
    (*(void (**)(CoreNavigation::CLP::LogEntry::PrivateData::ReceiverBandCorrections *))(*(void *)this
                                                                                                  + 32))(this);
    return CoreNavigation::CLP::LogEntry::PrivateData::ReceiverBandCorrections::MergeFrom(this, a2);
  }
  return result;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::ReceiverBandCorrections::IsInitialized(CoreNavigation::CLP::LogEntry::PrivateData::ReceiverBandCorrections *this)
{
  return 1;
}

float CoreNavigation::CLP::LogEntry::PrivateData::ReceiverBandCorrections::Swap(CoreNavigation::CLP::LogEntry::PrivateData::ReceiverBandCorrections *this, CoreNavigation::CLP::LogEntry::PrivateData::ReceiverBandCorrections *a2)
{
  if (a2 != this)
  {
    int v2 = *((_DWORD *)this + 4);
    *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
    *((_DWORD *)a2 + 4) = v2;
    uint64_t v3 = *((void *)this + 1);
    *((void *)this + 1) = *((void *)a2 + 1);
    *((void *)a2 + 1) = v3;
    LODWORD(v3) = *((_DWORD *)this + 5);
    *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
    *((_DWORD *)a2 + 5) = v3;
    float result = *((float *)this + 6);
    *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
    *((float *)a2 + 6) = result;
    int v5 = *((_DWORD *)this + 8);
    *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
    *((_DWORD *)a2 + 8) = v5;
    int v6 = *((_DWORD *)this + 7);
    *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
    *((_DWORD *)a2 + 7) = v6;
  }
  return result;
}

void *CoreNavigation::CLP::LogEntry::PrivateData::ReceiverBandCorrections::GetTypeName@<X0>(void *a1@<X8>)
{
  return sub_18DEDE7B0(a1, "CoreNavigation.CLP.LogEntry.PrivateData.ReceiverBandCorrections");
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondChange::SharedCtor(uint64_t this)
{
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondChange *CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondChange::LeapSecondChange(CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondChange *this, const CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondChange *a2)
{
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = &unk_1EDD0C7D0;
  *((_DWORD *)this + 6) = 0;
  CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondChange::MergeFrom(this, a2);
  return this;
}

void sub_18DFD36E8(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondChange::MergeFrom(CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondChange *this, const CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondChange *a2)
{
  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v7);
  }
  LOBYTE(v4) = *((unsigned char *)a2 + 24);
  if ((_BYTE)v4)
  {
    if (*((unsigned char *)a2 + 24))
    {
      uint64_t v5 = *((void *)a2 + 1);
      *((_DWORD *)this + 6) |= 1u;
      *((void *)this + 1) = v5;
      int v4 = *((_DWORD *)a2 + 6);
    }
    if ((v4 & 2) != 0)
    {
      int v6 = *((_DWORD *)a2 + 4);
      *((_DWORD *)this + 6) |= 2u;
      *((_DWORD *)this + 4) = v6;
    }
  }
}

void sub_18DFD37A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondChange::~LeapSecondChange(CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondChange *this)
{
  *(void *)this = &unk_1EDD0C7D0;
  CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  uint64_t vars8;

  CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondChange::~LeapSecondChange(this);

  JUMPOUT(0x192FA6240);
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondChange::default_instance(CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondChange *this)
{
  return CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondChange::default_instance_;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondChange::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 20) = a2;
  return this;
}

void CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondChange::New(CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondChange *this)
{
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondChange::Clear(uint64_t this)
{
  if (*(unsigned char *)(this + 24))
  {
    *(void *)(this + 8) = 0;
    *(_DWORD *)(this + 16) = 0;
  }
  *(_DWORD *)(this + 24) = 0;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondChange::MergePartialFromCodedStream(CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondChange *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  int v4 = (unint64_t *)((char *)this + 8);
  while (1)
  {
    while (1)
    {
      uint64_t v5 = (char *)*((void *)a2 + 1);
      if ((unint64_t)v5 >= *((void *)a2 + 2) || *v5 < 0)
      {
        unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
        *((_DWORD *)a2 + 8) = TagFallback;
        if (!TagFallback) {
          return 1;
        }
      }
      else
      {
        unint64_t TagFallback = *v5;
        *((_DWORD *)a2 + 8) = TagFallback;
        *((void *)a2 + 1) = v5 + 1;
        if (!TagFallback) {
          return 1;
        }
      }
      if (TagFallback >> 3 != 1) {
        break;
      }
      int v7 = TagFallback & 7;
      if ((TagFallback & 7) != 0) {
        goto LABEL_16;
      }
      int v10 = (char *)*((void *)a2 + 1);
      unint64_t v8 = *((void *)a2 + 2);
      if ((unint64_t)v10 >= v8 || *v10 < 0)
      {
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v4);
        if (!result) {
          return result;
        }
        int v11 = (unsigned char *)*((void *)a2 + 1);
        unint64_t v8 = *((void *)a2 + 2);
      }
      else
      {
        unint64_t *v4 = *v10;
        int v11 = v10 + 1;
        *((void *)a2 + 1) = v11;
      }
      *((_DWORD *)this + 6) |= 1u;
      if ((unint64_t)v11 < v8 && *v11 == 16)
      {
        int v9 = v11 + 1;
        *((void *)a2 + 1) = v9;
LABEL_24:
        unsigned int v15 = 0;
        if ((unint64_t)v9 >= v8 || *v9 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v15);
          if (!result) {
            return result;
          }
          unsigned int v12 = v15;
          int v13 = (unsigned __int8 *)*((void *)a2 + 1);
          unint64_t v8 = *((void *)a2 + 2);
        }
        else
        {
          unsigned int v12 = *v9;
          int v13 = (unsigned __int8 *)(v9 + 1);
          *((void *)a2 + 1) = v13;
        }
        *((_DWORD *)this + 4) = v12;
        *((_DWORD *)this + 6) |= 2u;
        if (v13 == (unsigned __int8 *)v8 && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
        {
          *((_DWORD *)a2 + 8) = 0;
          uint64_t result = 1;
          *((unsigned char *)a2 + 36) = 1;
          return result;
        }
      }
    }
    if (TagFallback >> 3 == 2)
    {
      int v7 = TagFallback & 7;
      if ((TagFallback & 7) == 0)
      {
        int v9 = (char *)*((void *)a2 + 1);
        unint64_t v8 = *((void *)a2 + 2);
        goto LABEL_24;
      }
    }
    else
    {
      int v7 = TagFallback & 7;
    }
LABEL_16:
    if (v7 == 4) {
      return 1;
    }
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0; {
  }
    }
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondChange::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  int v6 = *(_DWORD *)(this + 24);
  if (v6)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(void *)(this + 8), (uint64_t)a2, a4);
    int v6 = *(_DWORD *)(v5 + 24);
  }
  if ((v6 & 2) != 0)
  {
    uint64_t v7 = *(unsigned int *)(v5 + 16);
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v7, (uint64_t)a2, a4);
  }
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondChange::ByteSize(wireless_diagnostics::google::protobuf::io::CodedOutputStream **this)
{
  if (*((unsigned char *)this + 24))
  {
    if ((_BYTE)this[3])
    {
      uint64_t v2 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(this[1]) + 1;
      if ((this[3] & 2) == 0) {
        goto LABEL_13;
      }
    }
    else
    {
      uint64_t v2 = 0;
      if (((_BYTE)this[3] & 2) == 0) {
        goto LABEL_13;
      }
    }
    uint64_t v3 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 4);
    if ((v3 & 0x80000000) != 0)
    {
      int v4 = 11;
    }
    else if (v3 >= 0x80)
    {
      int v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v3) + 1;
    }
    else
    {
      int v4 = 2;
    }
    uint64_t v2 = (v4 + v2);
  }
  else
  {
    uint64_t v2 = 0;
  }
LABEL_13:
  *((_DWORD *)this + 5) = v2;
  return v2;
}

void CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondChange::CheckTypeAndMergeFrom(CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondChange *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondChange::MergeFrom(this, lpsrc);
}

void CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondChange::CopyFrom(CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondChange *this, const CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondChange *a2)
{
  if (a2 != this)
  {
    (*(void (**)(CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondChange *))(*(void *)this + 32))(this);
    CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondChange::MergeFrom(this, a2);
  }
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondChange::IsInitialized(CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondChange *this)
{
  return 1;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondChange::Swap(uint64_t this, CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondChange *a2)
{
  if (a2 != (CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondChange *)this)
  {
    uint64_t v2 = *(void *)(this + 8);
    *(void *)(this + 8) = *((void *)a2 + 1);
    *((void *)a2 + 1) = v2;
    LODWORD(v2) = *(_DWORD *)(this + 16);
    *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
    *((_DWORD *)a2 + 4) = v2;
    LODWORD(v2) = *(_DWORD *)(this + 24);
    *(_DWORD *)(this + 24) = *((_DWORD *)a2 + 6);
    *((_DWORD *)a2 + 6) = v2;
    LODWORD(v2) = *(_DWORD *)(this + 20);
    *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
    *((_DWORD *)a2 + 5) = v2;
  }
  return this;
}

void *CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondChange::GetTypeName@<X0>(void *a1@<X8>)
{
  return sub_18DEDE7B0(a1, "CoreNavigation.CLP.LogEntry.PrivateData.LeapSecondChange");
}

void *CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondInfo::SharedCtor(void *this)
{
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondInfo *CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondInfo::LeapSecondInfo(CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondInfo *this, const CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondInfo *a2)
{
  *(void *)this = &unk_1EDD0BE70;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondInfo::MergeFrom(this, a2);
  return this;
}

void sub_18DFD3D78(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondInfo::MergeFrom(CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondInfo *this, const CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondInfo *a2)
{
  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }
  LOBYTE(v4) = *((unsigned char *)a2 + 28);
  if ((_BYTE)v4)
  {
    if (*((unsigned char *)a2 + 28))
    {
      int v5 = *((_DWORD *)a2 + 2);
      *((_DWORD *)this + 7) |= 1u;
      *((_DWORD *)this + 2) = v5;
      int v4 = *((_DWORD *)a2 + 7);
    }
    if ((v4 & 2) != 0)
    {
      unsigned int v6 = *((_DWORD *)a2 + 3);
      if (v6 >= 5) {
        __assert_rtn("set_change_knowledge", "CoreNavigationCLPGnssMeasApi.pb.h", 11609, "::CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondChangeKnowledge_IsValid(value)");
      }
      *((_DWORD *)this + 7) |= 2u;
      *((_DWORD *)this + 3) = v6;
      int v4 = *((_DWORD *)a2 + 7);
    }
    if ((v4 & 4) != 0)
    {
      *((_DWORD *)this + 7) |= 4u;
      uint64_t v7 = (CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondChange *)*((void *)this + 2);
      if (!v7) {
        operator new();
      }
      unint64_t v8 = (const CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondChange *)*((void *)a2 + 2);
      if (!v8)
      {
        CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);
        unint64_t v8 = *(const CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondChange **)(CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondInfo::default_instance_
                                                                                    + 16);
      }
      CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondChange::MergeFrom(v7, v8);
    }
  }
}

void sub_18DFD3EE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondInfo::~LeapSecondInfo(CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondInfo *this)
{
  *(void *)this = &unk_1EDD0BE70;
  CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondInfo::SharedDtor(this);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  uint64_t vars8;

  CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondInfo::~LeapSecondInfo(this);

  JUMPOUT(0x192FA6240);
}

void CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondInfo::SharedDtor(CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondInfo *this)
{
  CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);
  if ((CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondInfo *)CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondInfo::default_instance_ != this)
  {
    uint64_t v2 = *((void *)this + 2);
    if (v2)
    {
      uint64_t v3 = *(void (**)(void))(*(void *)v2 + 8);
      v3();
    }
  }
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondInfo::default_instance(CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondInfo *this)
{
  return CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondInfo::default_instance_;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondInfo::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 24) = a2;
  return this;
}

void CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondInfo::New(CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondInfo *this)
{
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondInfo::Clear(uint64_t this)
{
  char v1 = *(unsigned char *)(this + 28);
  if (v1)
  {
    *(void *)(this + 8) = 0;
    if ((v1 & 4) != 0)
    {
      uint64_t v2 = *(void *)(this + 16);
      if (v2)
      {
        if (*(unsigned char *)(v2 + 24))
        {
          *(void *)(v2 + 8) = 0;
          *(_DWORD *)(v2 + 16) = 0;
        }
        *(_DWORD *)(v2 + 24) = 0;
      }
    }
  }
  *(_DWORD *)(this + 28) = 0;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondInfo::MergePartialFromCodedStream(CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondInfo *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  int v4 = (unsigned int *)((char *)this + 8);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          int v5 = (char *)*((void *)a2 + 1);
          if ((unint64_t)v5 >= *((void *)a2 + 2) || *v5 < 0)
          {
            unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
            *((_DWORD *)a2 + 8) = TagFallback;
            if (!TagFallback) {
              return 1;
            }
          }
          else
          {
            unint64_t TagFallback = *v5;
            *((_DWORD *)a2 + 8) = TagFallback;
            *((void *)a2 + 1) = v5 + 1;
            if (!TagFallback) {
              return 1;
            }
          }
          unsigned int v7 = TagFallback >> 3;
          if (TagFallback >> 3 != 1) {
            break;
          }
          int v8 = TagFallback & 7;
          if ((TagFallback & 7) != 0) {
            goto LABEL_19;
          }
          int v10 = (char *)*((void *)a2 + 1);
          unint64_t v9 = *((void *)a2 + 2);
          if ((unint64_t)v10 >= v9 || *v10 < 0)
          {
            uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v4);
            if (!result) {
              return result;
            }
            int v11 = (unsigned char *)*((void *)a2 + 1);
            unint64_t v9 = *((void *)a2 + 2);
          }
          else
          {
            unsigned int *v4 = *v10;
            int v11 = v10 + 1;
            *((void *)a2 + 1) = v11;
          }
          *((_DWORD *)this + 7) |= 1u;
          if ((unint64_t)v11 < v9 && *v11 == 16)
          {
            unsigned int v12 = v11 + 1;
            *((void *)a2 + 1) = v12;
            goto LABEL_27;
          }
        }
        if (v7 != 2) {
          break;
        }
        int v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_19;
        }
        unsigned int v12 = (char *)*((void *)a2 + 1);
        unint64_t v9 = *((void *)a2 + 2);
LABEL_27:
        unsigned int v23 = 0;
        if ((unint64_t)v12 >= v9 || *v12 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v23);
          if (!result) {
            return result;
          }
          unsigned int v14 = v23;
        }
        else
        {
          unsigned int v14 = *v12;
          *((void *)a2 + 1) = v12 + 1;
        }
        if (v14 <= 4)
        {
          *((_DWORD *)this + 7) |= 2u;
          *((_DWORD *)this + 3) = v14;
        }
        unsigned int v15 = (unsigned char *)*((void *)a2 + 1);
        if ((unint64_t)v15 < *((void *)a2 + 2) && *v15 == 26)
        {
          *((void *)a2 + 1) = v15 + 1;
          goto LABEL_37;
        }
      }
      if (v7 != 3)
      {
        int v8 = TagFallback & 7;
        goto LABEL_19;
      }
      int v8 = TagFallback & 7;
      if (v8 == 2) {
        break;
      }
LABEL_19:
      if (v8 == 4) {
        return 1;
      }
      if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0; {
    }
      }
LABEL_37:
    *((_DWORD *)this + 7) |= 4u;
    int v16 = (CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondChange *)*((void *)this + 2);
    if (!v16) {
      operator new();
    }
    unsigned int v24 = 0;
    unint64_t v17 = (char *)*((void *)a2 + 1);
    if ((unint64_t)v17 >= *((void *)a2 + 2) || *v17 < 0)
    {
      if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v24)) {
        return 0;
      }
    }
    else
    {
      unsigned int v24 = *v17;
      *((void *)a2 + 1) = v17 + 1;
    }
    int v18 = *((_DWORD *)a2 + 14);
    int v19 = *((_DWORD *)a2 + 15);
    *((_DWORD *)a2 + 14) = v18 + 1;
    if (v18 >= v19) {
      return 0;
    }
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
    if (!CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondChange::MergePartialFromCodedStream(v16, a2)|| !*((unsigned char *)a2 + 36))
    {
      return 0;
    }
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
    int v20 = *((_DWORD *)a2 + 14);
    BOOL v21 = __OFSUB__(v20, 1);
    int v22 = v20 - 1;
    if (v22 < 0 == v21) {
      *((_DWORD *)a2 + 14) = v22;
    }
    if (*((void *)a2 + 1) == *((void *)a2 + 2)
      && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
    {
      *((_DWORD *)a2 + 8) = 0;
      uint64_t result = 1;
      *((unsigned char *)a2 + 36) = 1;
      return result;
    }
  }
}

unsigned int *CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondInfo::SerializeWithCachedSizes(unsigned int *this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  int v5 = this;
  unsigned int v6 = this[7];
  if ((v6 & 1) == 0)
  {
    if ((v6 & 2) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    this = (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v5[3], (uint64_t)a2, a4);
    if ((v5[7] & 4) == 0) {
      return this;
    }
    goto LABEL_7;
  }
  this = (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, this[2], (uint64_t)a2, a4);
  unsigned int v6 = v5[7];
  if ((v6 & 2) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v6 & 4) == 0) {
    return this;
  }
LABEL_7:
  uint64_t v7 = *((void *)v5 + 2);
  if (!v7)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)this);
    uint64_t v7 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondInfo::default_instance_ + 16);
  }

  return (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v7, a2, a4);
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondInfo::ByteSize(CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondInfo *this)
{
  LOBYTE(v2) = *((unsigned char *)this + 28);
  if (!(_BYTE)v2)
  {
    uint64_t v3 = 0;
    goto LABEL_23;
  }
  if (*((unsigned char *)this + 28))
  {
    int v4 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 2);
    if (v4 >= 0x80)
    {
      uint64_t v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v4) + 1;
      int v2 = *((_DWORD *)this + 7);
      if ((v2 & 2) == 0) {
        goto LABEL_16;
      }
    }
    else
    {
      uint64_t v3 = 2;
      if ((v2 & 2) == 0) {
        goto LABEL_16;
      }
    }
  }
  else
  {
    uint64_t v3 = 0;
    if ((*((unsigned char *)this + 28) & 2) == 0) {
      goto LABEL_16;
    }
  }
  int v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 3);
  if ((v5 & 0x80000000) != 0)
  {
    int v6 = 11;
  }
  else if (v5 >= 0x80)
  {
    int v6 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5) + 1;
    int v2 = *((_DWORD *)this + 7);
  }
  else
  {
    int v6 = 2;
  }
  uint64_t v3 = (v6 + v3);
LABEL_16:
  if ((v2 & 4) != 0)
  {
    uint64_t v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream **)*((void *)this + 2);
    if (!v7)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(0);
      uint64_t v7 = *(wireless_diagnostics::google::protobuf::io::CodedOutputStream ***)(CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondInfo::default_instance_
                                                                              + 16);
    }
    int v8 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondChange::ByteSize(v7);
    int v9 = (int)v8;
    if (v8 >= 0x80) {
      int v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v8);
    }
    else {
      int v10 = 1;
    }
    uint64_t v3 = (v3 + v9 + v10 + 1);
  }
LABEL_23:
  *((_DWORD *)this + 6) = v3;
  return v3;
}

void CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondInfo::CheckTypeAndMergeFrom(CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondInfo *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondInfo::MergeFrom(this, lpsrc);
}

void CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondInfo::CopyFrom(CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondInfo *this, const CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondInfo *a2)
{
  if (a2 != this)
  {
    (*(void (**)(CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondInfo *))(*(void *)this + 32))(this);
    CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondInfo::MergeFrom(this, a2);
  }
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondInfo::IsInitialized(CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondInfo *this)
{
  return 1;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondInfo::Swap(uint64_t this, CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondInfo *a2)
{
  if (a2 != (CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondInfo *)this)
  {
    int v2 = *(_DWORD *)(this + 8);
    *(_DWORD *)(this + 8) = *((_DWORD *)a2 + 2);
    *((_DWORD *)a2 + 2) = v2;
    int v3 = *(_DWORD *)(this + 12);
    *(_DWORD *)(this + 12) = *((_DWORD *)a2 + 3);
    *((_DWORD *)a2 + 3) = v3;
    uint64_t v4 = *(void *)(this + 16);
    *(void *)(this + 16) = *((void *)a2 + 2);
    *((void *)a2 + 2) = v4;
    LODWORD(v4) = *(_DWORD *)(this + 28);
    *(_DWORD *)(this + 28) = *((_DWORD *)a2 + 7);
    *((_DWORD *)a2 + 7) = v4;
    LODWORD(v4) = *(_DWORD *)(this + 24);
    *(_DWORD *)(this + 24) = *((_DWORD *)a2 + 6);
    *((_DWORD *)a2 + 6) = v4;
  }
  return this;
}

void *CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondInfo::GetTypeName@<X0>(void *a1@<X8>)
{
  return sub_18DEDE7B0(a1, "CoreNavigation.CLP.LogEntry.PrivateData.LeapSecondInfo");
}

double CoreNavigation::CLP::LogEntry::PrivateData::GpsToUtcConversion::SharedCtor(CoreNavigation::CLP::LogEntry::PrivateData::GpsToUtcConversion *this)
{
  *((void *)this + 5) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  return result;
}

CoreNavigation::CLP::LogEntry::PrivateData::GpsToUtcConversion *CoreNavigation::CLP::LogEntry::PrivateData::GpsToUtcConversion::GpsToUtcConversion(CoreNavigation::CLP::LogEntry::PrivateData::GpsToUtcConversion *this, const CoreNavigation::CLP::LogEntry::PrivateData::GpsToUtcConversion *a2)
{
  *(void *)this = &unk_1EDD0D298;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((void *)this + 5) = 0;
  CoreNavigation::CLP::LogEntry::PrivateData::GpsToUtcConversion::MergeFrom(this, a2);
  return this;
}

void sub_18DFD4744(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

double CoreNavigation::CLP::LogEntry::PrivateData::GpsToUtcConversion::MergeFrom(CoreNavigation::CLP::LogEntry::PrivateData::GpsToUtcConversion *this, const CoreNavigation::CLP::LogEntry::PrivateData::GpsToUtcConversion *a2)
{
  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v7);
  }
  LOBYTE(v5) = *((unsigned char *)a2 + 44);
  if ((_BYTE)v5)
  {
    if (*((unsigned char *)a2 + 44))
    {
      uint64_t v6 = *((void *)a2 + 1);
      *((_DWORD *)this + 11) |= 1u;
      *((void *)this + 1) = v6;
      int v5 = *((_DWORD *)a2 + 11);
      if ((v5 & 2) == 0)
      {
LABEL_6:
        if ((v5 & 4) == 0) {
          goto LABEL_7;
        }
        goto LABEL_12;
      }
    }
    else if ((*((unsigned char *)a2 + 44) & 2) == 0)
    {
      goto LABEL_6;
    }
    double result = *((double *)a2 + 2);
    *((_DWORD *)this + 11) |= 2u;
    *((double *)this + 2) = result;
    int v5 = *((_DWORD *)a2 + 11);
    if ((v5 & 4) == 0)
    {
LABEL_7:
      if ((v5 & 8) == 0) {
        return result;
      }
      goto LABEL_8;
    }
LABEL_12:
    double result = *((double *)a2 + 3);
    *((_DWORD *)this + 11) |= 4u;
    *((double *)this + 3) = result;
    if ((*((_DWORD *)a2 + 11) & 8) == 0) {
      return result;
    }
LABEL_8:
    double result = *((double *)a2 + 4);
    *((_DWORD *)this + 11) |= 8u;
    *((double *)this + 4) = result;
  }
  return result;
}

void sub_18DFD484C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CoreNavigation::CLP::LogEntry::PrivateData::GpsToUtcConversion::~GpsToUtcConversion(CoreNavigation::CLP::LogEntry::PrivateData::GpsToUtcConversion *this)
{
  *(void *)this = &unk_1EDD0D298;
  CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  uint64_t vars8;

  CoreNavigation::CLP::LogEntry::PrivateData::GpsToUtcConversion::~GpsToUtcConversion(this);

  JUMPOUT(0x192FA6240);
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::GpsToUtcConversion::default_instance(CoreNavigation::CLP::LogEntry::PrivateData::GpsToUtcConversion *this)
{
  return CoreNavigation::CLP::LogEntry::PrivateData::GpsToUtcConversion::default_instance_;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::GpsToUtcConversion::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 40) = a2;
  return this;
}

void CoreNavigation::CLP::LogEntry::PrivateData::GpsToUtcConversion::New(CoreNavigation::CLP::LogEntry::PrivateData::GpsToUtcConversion *this)
{
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::GpsToUtcConversion::Clear(uint64_t this)
{
  if (*(unsigned char *)(this + 44))
  {
    *(_OWORD *)(this + 24) = 0u;
    *(_OWORD *)(this + 8) = 0u;
  }
  *(_DWORD *)(this + 44) = 0;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::GpsToUtcConversion::MergePartialFromCodedStream(CoreNavigation::CLP::LogEntry::PrivateData::GpsToUtcConversion *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  uint64_t v4 = (unint64_t *)((char *)this + 8);
  while (2)
  {
    int v5 = (char *)*((void *)a2 + 1);
    if ((unint64_t)v5 >= *((void *)a2 + 2) || *v5 < 0)
    {
      unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      if (!TagFallback) {
        return 1;
      }
    }
    else
    {
      unint64_t TagFallback = *v5;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((void *)a2 + 1) = v5 + 1;
      if (!TagFallback) {
        return 1;
      }
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_18;
        }
        int v9 = (char *)*((void *)a2 + 1);
        unint64_t v8 = *((void *)a2 + 2);
        if ((unint64_t)v9 >= v8 || *v9 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v4);
          if (!result) {
            return result;
          }
          int v10 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v8 = *((void *)a2 + 2);
        }
        else
        {
          unint64_t *v4 = *v9;
          int v10 = v9 + 1;
          *((void *)a2 + 1) = v10;
        }
        *((_DWORD *)this + 11) |= 1u;
        if ((unint64_t)v10 < v8 && *v10 == 17)
        {
          *((void *)a2 + 1) = v10 + 1;
          goto LABEL_26;
        }
        continue;
      case 2u:
        int v7 = TagFallback & 7;
        if (v7 != 1) {
          goto LABEL_18;
        }
LABEL_26:
        unint64_t v14 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, &v14) & 1) == 0) {
          return 0;
        }
        *((void *)this + 2) = v14;
        *((_DWORD *)this + 11) |= 2u;
        unsigned int v12 = (unsigned char *)*((void *)a2 + 1);
        if ((unint64_t)v12 >= *((void *)a2 + 2) || *v12 != 25) {
          continue;
        }
        *((void *)a2 + 1) = v12 + 1;
LABEL_30:
        unint64_t v14 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, &v14) & 1) == 0) {
          return 0;
        }
        *((void *)this + 3) = v14;
        *((_DWORD *)this + 11) |= 4u;
        int v13 = (unsigned char *)*((void *)a2 + 1);
        if ((unint64_t)v13 >= *((void *)a2 + 2) || *v13 != 33) {
          continue;
        }
        *((void *)a2 + 1) = v13 + 1;
LABEL_34:
        unint64_t v14 = 0;
        if (wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, &v14))
        {
          *((void *)this + 4) = v14;
          *((_DWORD *)this + 11) |= 8u;
          if (*((void *)a2 + 1) == *((void *)a2 + 2)
            && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
          {
            *((_DWORD *)a2 + 8) = 0;
            uint64_t result = 1;
            *((unsigned char *)a2 + 36) = 1;
            return result;
          }
          continue;
        }
        return 0;
      case 3u:
        int v7 = TagFallback & 7;
        if (v7 == 1) {
          goto LABEL_30;
        }
        goto LABEL_18;
      case 4u:
        int v7 = TagFallback & 7;
        if (v7 != 1) {
          goto LABEL_18;
        }
        goto LABEL_34;
      default:
        int v7 = TagFallback & 7;
LABEL_18:
        if (v7 == 4) {
          return 1;
        }
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0; {
        continue;
        }
    }
  }
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::GpsToUtcConversion::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  int v6 = *(_DWORD *)(this + 44);
  if (v6)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(void *)(this + 8), (uint64_t)a2, a4);
    int v6 = *(_DWORD *)(v5 + 44);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, (uint64_t)a2, *(double *)(v5 + 24), a3);
      if ((*(_DWORD *)(v5 + 44) & 8) == 0) {
        return this;
      }
      goto LABEL_9;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, (uint64_t)a2, *(double *)(v5 + 16), a3);
  int v6 = *(_DWORD *)(v5 + 44);
  if ((v6 & 4) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v6 & 8) == 0) {
    return this;
  }
LABEL_9:
  double v7 = *(double *)(v5 + 32);

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, (uint64_t)a2, v7, a3);
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::GpsToUtcConversion::ByteSize(CoreNavigation::CLP::LogEntry::PrivateData::GpsToUtcConversion *this)
{
  LOBYTE(v2) = *((unsigned char *)this + 44);
  if ((_BYTE)v2)
  {
    if (*((unsigned char *)this + 44))
    {
      unsigned int v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this
                                                                                       + 1))
         + 1;
      int v2 = *((_DWORD *)this + 11);
    }
    else
    {
      unsigned int v3 = 0;
    }
    if ((v2 & 2) != 0) {
      v3 += 9;
    }
    if ((v2 & 4) != 0) {
      v3 += 9;
    }
    if ((v2 & 8) != 0) {
      uint64_t result = v3 + 9;
    }
    else {
      uint64_t result = v3;
    }
  }
  else
  {
    uint64_t result = 0;
  }
  *((_DWORD *)this + 10) = result;
  return result;
}

double CoreNavigation::CLP::LogEntry::PrivateData::GpsToUtcConversion::CheckTypeAndMergeFrom(CoreNavigation::CLP::LogEntry::PrivateData::GpsToUtcConversion *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  return CoreNavigation::CLP::LogEntry::PrivateData::GpsToUtcConversion::MergeFrom(this, lpsrc);
}

double CoreNavigation::CLP::LogEntry::PrivateData::GpsToUtcConversion::CopyFrom(CoreNavigation::CLP::LogEntry::PrivateData::GpsToUtcConversion *this, const CoreNavigation::CLP::LogEntry::PrivateData::GpsToUtcConversion *a2)
{
  if (a2 != this)
  {
    (*(void (**)(CoreNavigation::CLP::LogEntry::PrivateData::GpsToUtcConversion *))(*(void *)this + 32))(this);
    return CoreNavigation::CLP::LogEntry::PrivateData::GpsToUtcConversion::MergeFrom(this, a2);
  }
  return result;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::GpsToUtcConversion::IsInitialized(CoreNavigation::CLP::LogEntry::PrivateData::GpsToUtcConversion *this)
{
  return 1;
}

double CoreNavigation::CLP::LogEntry::PrivateData::GpsToUtcConversion::Swap(CoreNavigation::CLP::LogEntry::PrivateData::GpsToUtcConversion *this, CoreNavigation::CLP::LogEntry::PrivateData::GpsToUtcConversion *a2)
{
  if (a2 != this)
  {
    uint64_t v2 = *((void *)this + 1);
    *((void *)this + 1) = *((void *)a2 + 1);
    *((void *)a2 + 1) = v2;
    uint64_t v3 = *((void *)this + 2);
    *((void *)this + 2) = *((void *)a2 + 2);
    *((void *)a2 + 2) = v3;
    uint64_t v4 = *((void *)this + 3);
    *((void *)this + 3) = *((void *)a2 + 3);
    *((void *)a2 + 3) = v4;
    double result = *((double *)this + 4);
    *((void *)this + 4) = *((void *)a2 + 4);
    *((double *)a2 + 4) = result;
    LODWORD(v2) = *((_DWORD *)this + 11);
    *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
    *((_DWORD *)a2 + 11) = v2;
    LODWORD(v2) = *((_DWORD *)this + 10);
    *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
    *((_DWORD *)a2 + 10) = v2;
  }
  return result;
}

void *CoreNavigation::CLP::LogEntry::PrivateData::GpsToUtcConversion::GetTypeName@<X0>(void *a1@<X8>)
{
  return sub_18DEDE7B0(a1, "CoreNavigation.CLP.LogEntry.PrivateData.GpsToUtcConversion");
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::GpsTimeInfo::SharedCtor(uint64_t this)
{
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(_DWORD *)(this + 32) = 0;
  *(void *)(this + 24) = 0;
  return this;
}

CoreNavigation::CLP::LogEntry::PrivateData::GpsTimeInfo *CoreNavigation::CLP::LogEntry::PrivateData::GpsTimeInfo::GpsTimeInfo(CoreNavigation::CLP::LogEntry::PrivateData::GpsTimeInfo *this, const CoreNavigation::CLP::LogEntry::PrivateData::GpsTimeInfo *a2)
{
  *(void *)this = &unk_1EDD0B678;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  CoreNavigation::CLP::LogEntry::PrivateData::GpsTimeInfo::MergeFrom(this, a2);
  return this;
}

void sub_18DFD4F38(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

double CoreNavigation::CLP::LogEntry::PrivateData::GpsTimeInfo::MergeFrom(CoreNavigation::CLP::LogEntry::PrivateData::GpsTimeInfo *this, const CoreNavigation::CLP::LogEntry::PrivateData::GpsTimeInfo *a2)
{
  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v11);
  }
  LOBYTE(v5) = *((unsigned char *)a2 + 32);
  if ((_BYTE)v5)
  {
    if (*((unsigned char *)a2 + 32))
    {
      int v6 = *((_DWORD *)a2 + 6);
      *((_DWORD *)this + 8) |= 1u;
      *((_DWORD *)this + 6) = v6;
      int v5 = *((_DWORD *)a2 + 8);
      if ((v5 & 2) == 0)
      {
LABEL_6:
        if ((v5 & 4) == 0) {
          return result;
        }
        goto LABEL_14;
      }
    }
    else if ((*((unsigned char *)a2 + 32) & 2) == 0)
    {
      goto LABEL_6;
    }
    *((_DWORD *)this + 8) |= 2u;
    double v7 = (CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondInfo *)*((void *)this + 1);
    if (!v7) {
      operator new();
    }
    unint64_t v8 = (const CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondInfo *)*((void *)a2 + 1);
    if (!v8)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);
      unint64_t v8 = *(const CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondInfo **)(CoreNavigation::CLP::LogEntry::PrivateData::GpsTimeInfo::default_instance_
                                                                                + 8);
    }
    CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondInfo::MergeFrom(v7, v8);
    if ((*((_DWORD *)a2 + 8) & 4) != 0)
    {
LABEL_14:
      *((_DWORD *)this + 8) |= 4u;
      int v9 = (CoreNavigation::CLP::LogEntry::PrivateData::GpsToUtcConversion *)*((void *)this + 2);
      if (!v9) {
        operator new();
      }
      int v10 = (const CoreNavigation::CLP::LogEntry::PrivateData::GpsToUtcConversion *)*((void *)a2 + 2);
      if (!v10)
      {
        CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);
        int v10 = *(const CoreNavigation::CLP::LogEntry::PrivateData::GpsToUtcConversion **)(CoreNavigation::CLP::LogEntry::PrivateData::GpsTimeInfo::default_instance_
                                                                                       + 16);
      }
      return CoreNavigation::CLP::LogEntry::PrivateData::GpsToUtcConversion::MergeFrom(v9, v10);
    }
  }
  return result;
}

void sub_18DFD50F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CoreNavigation::CLP::LogEntry::PrivateData::GpsTimeInfo::~GpsTimeInfo(CoreNavigation::CLP::LogEntry::PrivateData::GpsTimeInfo *this)
{
  *(void *)this = &unk_1EDD0B678;
  CoreNavigation::CLP::LogEntry::PrivateData::GpsTimeInfo::SharedDtor(this);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  uint64_t vars8;

  CoreNavigation::CLP::LogEntry::PrivateData::GpsTimeInfo::~GpsTimeInfo(this);

  JUMPOUT(0x192FA6240);
}

void CoreNavigation::CLP::LogEntry::PrivateData::GpsTimeInfo::SharedDtor(CoreNavigation::CLP::LogEntry::PrivateData::GpsTimeInfo *this)
{
  CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);
  if ((CoreNavigation::CLP::LogEntry::PrivateData::GpsTimeInfo *)CoreNavigation::CLP::LogEntry::PrivateData::GpsTimeInfo::default_instance_ != this)
  {
    uint64_t v2 = *((void *)this + 1);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
    uint64_t v3 = *((void *)this + 2);
    if (v3)
    {
      uint64_t v4 = *(void (**)(void))(*(void *)v3 + 8);
      v4();
    }
  }
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::GpsTimeInfo::default_instance(CoreNavigation::CLP::LogEntry::PrivateData::GpsTimeInfo *this)
{
  return CoreNavigation::CLP::LogEntry::PrivateData::GpsTimeInfo::default_instance_;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::GpsTimeInfo::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 28) = a2;
  return this;
}

void CoreNavigation::CLP::LogEntry::PrivateData::GpsTimeInfo::New(CoreNavigation::CLP::LogEntry::PrivateData::GpsTimeInfo *this)
{
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::GpsTimeInfo::Clear(uint64_t this)
{
  uint64_t v1 = this;
  LOBYTE(v2) = *(unsigned char *)(this + 32);
  if ((_BYTE)v2)
  {
    *(_DWORD *)(this + 24) = 0;
    if ((v2 & 2) != 0)
    {
      this = *(void *)(this + 8);
      if (this)
      {
        this = CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondInfo::Clear(this);
        int v2 = *(_DWORD *)(v1 + 32);
      }
    }
    if ((v2 & 4) != 0)
    {
      uint64_t v3 = *(void *)(v1 + 16);
      if (v3)
      {
        if (*(unsigned char *)(v3 + 44))
        {
          *(_OWORD *)(v3 + 24) = 0u;
          *(_OWORD *)(v3 + 8) = 0u;
        }
        *(_DWORD *)(v3 + 44) = 0;
      }
    }
  }
  *(_DWORD *)(v1 + 32) = 0;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::GpsTimeInfo::MergePartialFromCodedStream(CoreNavigation::CLP::LogEntry::PrivateData::GpsTimeInfo *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  uint64_t v4 = (unsigned int *)((char *)this + 24);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          int v5 = (char *)*((void *)a2 + 1);
          if ((unint64_t)v5 >= *((void *)a2 + 2) || *v5 < 0)
          {
            unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
            *((_DWORD *)a2 + 8) = TagFallback;
            if (!TagFallback) {
              return 1;
            }
          }
          else
          {
            unint64_t TagFallback = *v5;
            *((_DWORD *)a2 + 8) = TagFallback;
            *((void *)a2 + 1) = v5 + 1;
            if (!TagFallback) {
              return 1;
            }
          }
          unsigned int v7 = TagFallback >> 3;
          if (TagFallback >> 3 != 1) {
            break;
          }
          int v8 = TagFallback & 7;
          if ((TagFallback & 7) != 0) {
            goto LABEL_19;
          }
          int v10 = (char *)*((void *)a2 + 1);
          unint64_t v9 = *((void *)a2 + 2);
          if ((unint64_t)v10 >= v9 || *v10 < 0)
          {
            uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v4);
            if (!result) {
              return result;
            }
            int v11 = (unsigned char *)*((void *)a2 + 1);
            unint64_t v9 = *((void *)a2 + 2);
          }
          else
          {
            unsigned int *v4 = *v10;
            int v11 = v10 + 1;
            *((void *)a2 + 1) = v11;
          }
          int v12 = *((_DWORD *)this + 8) | 1;
          *((_DWORD *)this + 8) = v12;
          if ((unint64_t)v11 < v9 && *v11 == 18)
          {
            *((void *)a2 + 1) = v11 + 1;
            goto LABEL_27;
          }
        }
        if (v7 != 2) {
          break;
        }
        int v8 = TagFallback & 7;
        if (v8 != 2) {
          goto LABEL_19;
        }
        int v12 = *((_DWORD *)this + 8);
LABEL_27:
        *((_DWORD *)this + 8) = v12 | 2;
        unint64_t v14 = (CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondInfo *)*((void *)this + 1);
        if (!v14) {
          operator new();
        }
        unsigned int v28 = 0;
        unsigned int v15 = (char *)*((void *)a2 + 1);
        if ((unint64_t)v15 >= *((void *)a2 + 2) || *v15 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v28))return 0; {
        }
          }
        else
        {
          unsigned int v28 = *v15;
          *((void *)a2 + 1) = v15 + 1;
        }
        int v16 = *((_DWORD *)a2 + 14);
        int v17 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v16 + 1;
        if (v16 >= v17) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondInfo::MergePartialFromCodedStream(v14, a2)|| !*((unsigned char *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        int v18 = *((_DWORD *)a2 + 14);
        BOOL v19 = __OFSUB__(v18, 1);
        int v20 = v18 - 1;
        if (v20 < 0 == v19) {
          *((_DWORD *)a2 + 14) = v20;
        }
        BOOL v21 = (unsigned char *)*((void *)a2 + 1);
        if ((unint64_t)v21 < *((void *)a2 + 2) && *v21 == 26)
        {
          *((void *)a2 + 1) = v21 + 1;
          goto LABEL_41;
        }
      }
      if (v7 != 3) {
        break;
      }
      int v8 = TagFallback & 7;
      if (v8 != 2) {
        goto LABEL_19;
      }
LABEL_41:
      *((_DWORD *)this + 8) |= 4u;
      int v22 = (CoreNavigation::CLP::LogEntry::PrivateData::GpsToUtcConversion *)*((void *)this + 2);
      if (!v22) {
        operator new();
      }
      unsigned int v29 = 0;
      unsigned int v23 = (char *)*((void *)a2 + 1);
      if ((unint64_t)v23 >= *((void *)a2 + 2) || *v23 < 0)
      {
        if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v29)) {
          return 0;
        }
      }
      else
      {
        unsigned int v29 = *v23;
        *((void *)a2 + 1) = v23 + 1;
      }
      int v24 = *((_DWORD *)a2 + 14);
      int v25 = *((_DWORD *)a2 + 15);
      *((_DWORD *)a2 + 14) = v24 + 1;
      if (v24 >= v25) {
        return 0;
      }
      wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
      if (!CoreNavigation::CLP::LogEntry::PrivateData::GpsToUtcConversion::MergePartialFromCodedStream(v22, a2)|| !*((unsigned char *)a2 + 36))
      {
        return 0;
      }
      wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
      int v26 = *((_DWORD *)a2 + 14);
      BOOL v19 = __OFSUB__(v26, 1);
      int v27 = v26 - 1;
      if (v27 < 0 == v19) {
        *((_DWORD *)a2 + 14) = v27;
      }
      if (*((void *)a2 + 1) == *((void *)a2 + 2)
        && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
      {
        *((_DWORD *)a2 + 8) = 0;
        uint64_t result = 1;
        *((unsigned char *)a2 + 36) = 1;
        return result;
      }
    }
    int v8 = TagFallback & 7;
LABEL_19:
    if (v8 == 4) {
      return 1;
    }
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0; {
  }
    }
}

unsigned int *CoreNavigation::CLP::LogEntry::PrivateData::GpsTimeInfo::SerializeWithCachedSizes(unsigned int *this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  int v5 = this;
  unsigned int v6 = this[8];
  if (v6)
  {
    this = (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, this[6], (uint64_t)a2, a4);
    unsigned int v6 = v5[8];
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        return this;
      }
      goto LABEL_9;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t v7 = *((void *)v5 + 1);
  if (!v7)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)this);
    uint64_t v7 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::GpsTimeInfo::default_instance_ + 8);
  }
  this = (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v7, a2, a4);
  if ((v5[8] & 4) != 0)
  {
LABEL_9:
    uint64_t v8 = *((void *)v5 + 2);
    if (!v8)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)this);
      uint64_t v8 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::GpsTimeInfo::default_instance_ + 16);
    }
    return (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v8, a2, a4);
  }
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::GpsTimeInfo::ByteSize(CoreNavigation::CLP::LogEntry::PrivateData::GpsTimeInfo *this)
{
  LOBYTE(v2) = *((unsigned char *)this + 32);
  if (!(_BYTE)v2)
  {
    uint64_t v3 = 0;
    goto LABEL_23;
  }
  if ((*((unsigned char *)this + 32) & 1) == 0)
  {
    uint64_t v3 = 0;
    if ((*((unsigned char *)this + 32) & 2) == 0) {
      goto LABEL_16;
    }
LABEL_10:
    int v5 = (CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondInfo *)*((void *)this + 1);
    if (!v5)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(0);
      int v5 = *(CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondInfo **)(CoreNavigation::CLP::LogEntry::PrivateData::GpsTimeInfo::default_instance_
                                                                          + 8);
    }
    unsigned int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondInfo::ByteSize(v5);
    int v7 = (int)v6;
    if (v6 >= 0x80) {
      int v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6);
    }
    else {
      int v8 = 1;
    }
    uint64_t v3 = (v3 + v7 + v8 + 1);
    int v2 = *((_DWORD *)this + 8);
    goto LABEL_16;
  }
  uint64_t v4 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 6);
  if (v4 >= 0x80)
  {
    uint64_t v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v4) + 1;
    int v2 = *((_DWORD *)this + 8);
    if ((v2 & 2) == 0) {
      goto LABEL_16;
    }
    goto LABEL_10;
  }
  uint64_t v3 = 2;
  if ((v2 & 2) != 0) {
    goto LABEL_10;
  }
LABEL_16:
  if ((v2 & 4) != 0)
  {
    unint64_t v9 = (CoreNavigation::CLP::LogEntry::PrivateData::GpsToUtcConversion *)*((void *)this + 2);
    if (!v9)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(0);
      unint64_t v9 = *(CoreNavigation::CLP::LogEntry::PrivateData::GpsToUtcConversion **)(CoreNavigation::CLP::LogEntry::PrivateData::GpsTimeInfo::default_instance_
                                                                              + 16);
    }
    int v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CoreNavigation::CLP::LogEntry::PrivateData::GpsToUtcConversion::ByteSize(v9);
    int v11 = (int)v10;
    if (v10 >= 0x80) {
      int v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v10);
    }
    else {
      int v12 = 1;
    }
    uint64_t v3 = (v3 + v11 + v12 + 1);
  }
LABEL_23:
  *((_DWORD *)this + 7) = v3;
  return v3;
}

double CoreNavigation::CLP::LogEntry::PrivateData::GpsTimeInfo::CheckTypeAndMergeFrom(CoreNavigation::CLP::LogEntry::PrivateData::GpsTimeInfo *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  return CoreNavigation::CLP::LogEntry::PrivateData::GpsTimeInfo::MergeFrom(this, lpsrc);
}

double CoreNavigation::CLP::LogEntry::PrivateData::GpsTimeInfo::CopyFrom(CoreNavigation::CLP::LogEntry::PrivateData::GpsTimeInfo *this, const CoreNavigation::CLP::LogEntry::PrivateData::GpsTimeInfo *a2)
{
  if (a2 != this)
  {
    (*(void (**)(CoreNavigation::CLP::LogEntry::PrivateData::GpsTimeInfo *))(*(void *)this + 32))(this);
    return CoreNavigation::CLP::LogEntry::PrivateData::GpsTimeInfo::MergeFrom(this, a2);
  }
  return result;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::GpsTimeInfo::IsInitialized(CoreNavigation::CLP::LogEntry::PrivateData::GpsTimeInfo *this)
{
  return 1;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::GpsTimeInfo::Swap(uint64_t this, CoreNavigation::CLP::LogEntry::PrivateData::GpsTimeInfo *a2)
{
  if (a2 != (CoreNavigation::CLP::LogEntry::PrivateData::GpsTimeInfo *)this)
  {
    int v2 = *(_DWORD *)(this + 24);
    *(_DWORD *)(this + 24) = *((_DWORD *)a2 + 6);
    *((_DWORD *)a2 + 6) = v2;
    uint64_t v3 = *(void *)(this + 8);
    *(void *)(this + 8) = *((void *)a2 + 1);
    *((void *)a2 + 1) = v3;
    uint64_t v4 = *(void *)(this + 16);
    *(void *)(this + 16) = *((void *)a2 + 2);
    *((void *)a2 + 2) = v4;
    LODWORD(v4) = *(_DWORD *)(this + 32);
    *(_DWORD *)(this + 32) = *((_DWORD *)a2 + 8);
    *((_DWORD *)a2 + 8) = v4;
    LODWORD(v4) = *(_DWORD *)(this + 28);
    *(_DWORD *)(this + 28) = *((_DWORD *)a2 + 7);
    *((_DWORD *)a2 + 7) = v4;
  }
  return this;
}

void *CoreNavigation::CLP::LogEntry::PrivateData::GpsTimeInfo::GetTypeName@<X0>(void *a1@<X8>)
{
  return sub_18DEDE7B0(a1, "CoreNavigation.CLP.LogEntry.PrivateData.GpsTimeInfo");
}

void *CoreNavigation::CLP::LogEntry::PrivateData::GlonassSubsecondConversion::SharedCtor(void *this)
{
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

CoreNavigation::CLP::LogEntry::PrivateData::GlonassSubsecondConversion *CoreNavigation::CLP::LogEntry::PrivateData::GlonassSubsecondConversion::GlonassSubsecondConversion(CoreNavigation::CLP::LogEntry::PrivateData::GlonassSubsecondConversion *this, const CoreNavigation::CLP::LogEntry::PrivateData::GlonassSubsecondConversion *a2)
{
  *(void *)this = &unk_1EDD0E378;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  CoreNavigation::CLP::LogEntry::PrivateData::GlonassSubsecondConversion::MergeFrom(this, a2);
  return this;
}

void sub_18DFD5A60(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

double CoreNavigation::CLP::LogEntry::PrivateData::GlonassSubsecondConversion::MergeFrom(CoreNavigation::CLP::LogEntry::PrivateData::GlonassSubsecondConversion *this, const CoreNavigation::CLP::LogEntry::PrivateData::GlonassSubsecondConversion *a2)
{
  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v7);
  }
  LOBYTE(v5) = *((unsigned char *)a2 + 28);
  if ((_BYTE)v5)
  {
    if (*((unsigned char *)a2 + 28))
    {
      uint64_t v6 = *((void *)a2 + 1);
      *((_DWORD *)this + 7) |= 1u;
      *((void *)this + 1) = v6;
      int v5 = *((_DWORD *)a2 + 7);
    }
    if ((v5 & 2) != 0)
    {
      double result = *((double *)a2 + 2);
      *((_DWORD *)this + 7) |= 2u;
      *((double *)this + 2) = result;
    }
  }
  return result;
}

void sub_18DFD5B20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CoreNavigation::CLP::LogEntry::PrivateData::GlonassSubsecondConversion::~GlonassSubsecondConversion(CoreNavigation::CLP::LogEntry::PrivateData::GlonassSubsecondConversion *this)
{
  *(void *)this = &unk_1EDD0E378;
  CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  uint64_t vars8;

  CoreNavigation::CLP::LogEntry::PrivateData::GlonassSubsecondConversion::~GlonassSubsecondConversion(this);

  JUMPOUT(0x192FA6240);
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::GlonassSubsecondConversion::default_instance(CoreNavigation::CLP::LogEntry::PrivateData::GlonassSubsecondConversion *this)
{
  return CoreNavigation::CLP::LogEntry::PrivateData::GlonassSubsecondConversion::default_instance_;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::GlonassSubsecondConversion::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 24) = a2;
  return this;
}

void CoreNavigation::CLP::LogEntry::PrivateData::GlonassSubsecondConversion::New(CoreNavigation::CLP::LogEntry::PrivateData::GlonassSubsecondConversion *this)
{
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::GlonassSubsecondConversion::Clear(uint64_t this)
{
  if (*(unsigned char *)(this + 28))
  {
    *(void *)(this + 8) = 0;
    *(void *)(this + 16) = 0;
  }
  *(_DWORD *)(this + 28) = 0;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::GlonassSubsecondConversion::MergePartialFromCodedStream(CoreNavigation::CLP::LogEntry::PrivateData::GlonassSubsecondConversion *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  uint64_t v4 = (unint64_t *)((char *)this + 8);
  do
  {
    while (1)
    {
      while (1)
      {
        int v5 = (char *)*((void *)a2 + 1);
        if ((unint64_t)v5 >= *((void *)a2 + 2) || *v5 < 0)
        {
          unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
          *((_DWORD *)a2 + 8) = TagFallback;
          if (!TagFallback) {
            return 1;
          }
        }
        else
        {
          unint64_t TagFallback = *v5;
          *((_DWORD *)a2 + 8) = TagFallback;
          *((void *)a2 + 1) = v5 + 1;
          if (!TagFallback) {
            return 1;
          }
        }
        if (TagFallback >> 3 != 1) {
          break;
        }
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_16;
        }
        unint64_t v9 = (char *)*((void *)a2 + 1);
        unint64_t v8 = *((void *)a2 + 2);
        if ((unint64_t)v9 >= v8 || *v9 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v4);
          if (!result) {
            return result;
          }
          int v10 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v8 = *((void *)a2 + 2);
        }
        else
        {
          unint64_t *v4 = *v9;
          int v10 = v9 + 1;
          *((void *)a2 + 1) = v10;
        }
        *((_DWORD *)this + 7) |= 1u;
        if ((unint64_t)v10 < v8 && *v10 == 17)
        {
          *((void *)a2 + 1) = v10 + 1;
          goto LABEL_24;
        }
      }
      if (TagFallback >> 3 != 2) {
        break;
      }
      int v7 = TagFallback & 7;
      if (v7 != 1) {
        goto LABEL_16;
      }
LABEL_24:
      unint64_t v12 = 0;
      if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, &v12) & 1) == 0) {
        return 0;
      }
      *((void *)this + 2) = v12;
      *((_DWORD *)this + 7) |= 2u;
      if (*((void *)a2 + 1) == *((void *)a2 + 2)
        && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
      {
        *((_DWORD *)a2 + 8) = 0;
        uint64_t result = 1;
        *((unsigned char *)a2 + 36) = 1;
        return result;
      }
    }
    int v7 = TagFallback & 7;
LABEL_16:
    if (v7 == 4) {
      return 1;
    }
  }
  while ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) != 0);
  return 0;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::GlonassSubsecondConversion::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  int v6 = *(_DWORD *)(this + 28);
  if (v6)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(void *)(this + 8), (uint64_t)a2, a4);
    int v6 = *(_DWORD *)(v5 + 28);
  }
  if ((v6 & 2) != 0)
  {
    double v7 = *(double *)(v5 + 16);
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, (uint64_t)a2, v7, a3);
  }
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::GlonassSubsecondConversion::ByteSize(CoreNavigation::CLP::LogEntry::PrivateData::GlonassSubsecondConversion *this)
{
  LOBYTE(v2) = *((unsigned char *)this + 28);
  if ((_BYTE)v2)
  {
    if (*((unsigned char *)this + 28))
    {
      unsigned int v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this
                                                                                       + 1))
         + 1;
      int v2 = *((_DWORD *)this + 7);
    }
    else
    {
      unsigned int v3 = 0;
    }
    if ((v2 & 2) != 0) {
      uint64_t result = v3 + 9;
    }
    else {
      uint64_t result = v3;
    }
  }
  else
  {
    uint64_t result = 0;
  }
  *((_DWORD *)this + 6) = result;
  return result;
}

double CoreNavigation::CLP::LogEntry::PrivateData::GlonassSubsecondConversion::CheckTypeAndMergeFrom(CoreNavigation::CLP::LogEntry::PrivateData::GlonassSubsecondConversion *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  return CoreNavigation::CLP::LogEntry::PrivateData::GlonassSubsecondConversion::MergeFrom(this, lpsrc);
}

double CoreNavigation::CLP::LogEntry::PrivateData::GlonassSubsecondConversion::CopyFrom(CoreNavigation::CLP::LogEntry::PrivateData::GlonassSubsecondConversion *this, const CoreNavigation::CLP::LogEntry::PrivateData::GlonassSubsecondConversion *a2)
{
  if (a2 != this)
  {
    (*(void (**)(CoreNavigation::CLP::LogEntry::PrivateData::GlonassSubsecondConversion *))(*(void *)this + 32))(this);
    return CoreNavigation::CLP::LogEntry::PrivateData::GlonassSubsecondConversion::MergeFrom(this, a2);
  }
  return result;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::GlonassSubsecondConversion::IsInitialized(CoreNavigation::CLP::LogEntry::PrivateData::GlonassSubsecondConversion *this)
{
  return 1;
}

double CoreNavigation::CLP::LogEntry::PrivateData::GlonassSubsecondConversion::Swap(CoreNavigation::CLP::LogEntry::PrivateData::GlonassSubsecondConversion *this, CoreNavigation::CLP::LogEntry::PrivateData::GlonassSubsecondConversion *a2)
{
  if (a2 != this)
  {
    uint64_t v2 = *((void *)this + 1);
    *((void *)this + 1) = *((void *)a2 + 1);
    *((void *)a2 + 1) = v2;
    double result = *((double *)this + 2);
    *((void *)this + 2) = *((void *)a2 + 2);
    *((double *)a2 + 2) = result;
    LODWORD(v2) = *((_DWORD *)this + 7);
    *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
    *((_DWORD *)a2 + 7) = v2;
    LODWORD(v2) = *((_DWORD *)this + 6);
    *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
    *((_DWORD *)a2 + 6) = v2;
  }
  return result;
}

void *CoreNavigation::CLP::LogEntry::PrivateData::GlonassSubsecondConversion::GetTypeName@<X0>(void *a1@<X8>)
{
  return sub_18DEDE7B0(a1, "CoreNavigation.CLP.LogEntry.PrivateData.GlonassSubsecondConversion");
}

double CoreNavigation::CLP::LogEntry::PrivateData::GlonassTimeInfo::SharedCtor(CoreNavigation::CLP::LogEntry::PrivateData::GlonassTimeInfo *this)
{
  *((_DWORD *)this + 10) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  return result;
}

CoreNavigation::CLP::LogEntry::PrivateData::GlonassTimeInfo *CoreNavigation::CLP::LogEntry::PrivateData::GlonassTimeInfo::GlonassTimeInfo(CoreNavigation::CLP::LogEntry::PrivateData::GlonassTimeInfo *this, const CoreNavigation::CLP::LogEntry::PrivateData::GlonassTimeInfo *a2)
{
  *(void *)this = &unk_1EDD0C488;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_DWORD *)this + 10) = 0;
  CoreNavigation::CLP::LogEntry::PrivateData::GlonassTimeInfo::MergeFrom(this, a2);
  return this;
}

void sub_18DFD60BC(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

double CoreNavigation::CLP::LogEntry::PrivateData::GlonassTimeInfo::MergeFrom(CoreNavigation::CLP::LogEntry::PrivateData::GlonassTimeInfo *this, const CoreNavigation::CLP::LogEntry::PrivateData::GlonassTimeInfo *a2)
{
  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v13);
  }
  LOBYTE(v5) = *((unsigned char *)a2 + 40);
  if (!(_BYTE)v5) {
    return result;
  }
  if (*((unsigned char *)a2 + 40))
  {
    int v6 = *((_DWORD *)a2 + 2);
    *((_DWORD *)this + 10) |= 1u;
    *((_DWORD *)this + 2) = v6;
    int v5 = *((_DWORD *)a2 + 10);
    if ((v5 & 2) == 0)
    {
LABEL_6:
      if ((v5 & 4) == 0) {
        goto LABEL_7;
      }
LABEL_12:
      unsigned int v8 = *((_DWORD *)a2 + 8);
      if (v8 >= 6) {
        __assert_rtn("set_leap_second_deprecated", "CoreNavigationCLPGnssMeasApi.pb.h", 11972, "::CoreNavigation::CLP::LogEntry::PrivateData::GlonassLeapSecondDeprecated_IsValid(value)");
      }
      *((_DWORD *)this + 10) |= 4u;
      *((_DWORD *)this + 8) = v8;
      int v5 = *((_DWORD *)a2 + 10);
      if ((v5 & 8) == 0)
      {
LABEL_8:
        if ((v5 & 0x10) == 0) {
          return result;
        }
        goto LABEL_19;
      }
      goto LABEL_14;
    }
  }
  else if ((*((unsigned char *)a2 + 40) & 2) == 0)
  {
    goto LABEL_6;
  }
  int v7 = *((_DWORD *)a2 + 3);
  *((_DWORD *)this + 10) |= 2u;
  *((_DWORD *)this + 3) = v7;
  int v5 = *((_DWORD *)a2 + 10);
  if ((v5 & 4) != 0) {
    goto LABEL_12;
  }
LABEL_7:
  if ((v5 & 8) == 0) {
    goto LABEL_8;
  }
LABEL_14:
  *((_DWORD *)this + 10) |= 8u;
  unint64_t v9 = (CoreNavigation::CLP::LogEntry::PrivateData::GlonassSubsecondConversion *)*((void *)this + 2);
  if (!v9) {
    operator new();
  }
  int v10 = (const CoreNavigation::CLP::LogEntry::PrivateData::GlonassSubsecondConversion *)*((void *)a2 + 2);
  if (!v10)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);
    int v10 = *(const CoreNavigation::CLP::LogEntry::PrivateData::GlonassSubsecondConversion **)(CoreNavigation::CLP::LogEntry::PrivateData::GlonassTimeInfo::default_instance_
                                                                                           + 16);
  }
  double result = CoreNavigation::CLP::LogEntry::PrivateData::GlonassSubsecondConversion::MergeFrom(v9, v10);
  if ((*((_DWORD *)a2 + 10) & 0x10) != 0)
  {
LABEL_19:
    *((_DWORD *)this + 10) |= 0x10u;
    int v11 = (CoreNavigation::CLP::LogEntry::PrivateData::GlonassSubsecondConversion *)*((void *)this + 3);
    if (!v11) {
      operator new();
    }
    unint64_t v12 = (const CoreNavigation::CLP::LogEntry::PrivateData::GlonassSubsecondConversion *)*((void *)a2 + 3);
    if (!v12)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);
      unint64_t v12 = *(const CoreNavigation::CLP::LogEntry::PrivateData::GlonassSubsecondConversion **)(CoreNavigation::CLP::LogEntry::PrivateData::GlonassTimeInfo::default_instance_
                                                                                             + 24);
    }
    return CoreNavigation::CLP::LogEntry::PrivateData::GlonassSubsecondConversion::MergeFrom(v11, v12);
  }
  return result;
}

void sub_18DFD62D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CoreNavigation::CLP::LogEntry::PrivateData::GlonassTimeInfo::~GlonassTimeInfo(CoreNavigation::CLP::LogEntry::PrivateData::GlonassTimeInfo *this)
{
  *(void *)this = &unk_1EDD0C488;
  CoreNavigation::CLP::LogEntry::PrivateData::GlonassTimeInfo::SharedDtor(this);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  uint64_t vars8;

  CoreNavigation::CLP::LogEntry::PrivateData::GlonassTimeInfo::~GlonassTimeInfo(this);

  JUMPOUT(0x192FA6240);
}

void CoreNavigation::CLP::LogEntry::PrivateData::GlonassTimeInfo::SharedDtor(CoreNavigation::CLP::LogEntry::PrivateData::GlonassTimeInfo *this)
{
  CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);
  if ((CoreNavigation::CLP::LogEntry::PrivateData::GlonassTimeInfo *)CoreNavigation::CLP::LogEntry::PrivateData::GlonassTimeInfo::default_instance_ != this)
  {
    uint64_t v2 = *((void *)this + 2);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
    uint64_t v3 = *((void *)this + 3);
    if (v3)
    {
      uint64_t v4 = *(void (**)(void))(*(void *)v3 + 8);
      v4();
    }
  }
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::GlonassTimeInfo::default_instance(CoreNavigation::CLP::LogEntry::PrivateData::GlonassTimeInfo *this)
{
  return CoreNavigation::CLP::LogEntry::PrivateData::GlonassTimeInfo::default_instance_;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::GlonassTimeInfo::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 36) = a2;
  return this;
}

void CoreNavigation::CLP::LogEntry::PrivateData::GlonassTimeInfo::New(CoreNavigation::CLP::LogEntry::PrivateData::GlonassTimeInfo *this)
{
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::GlonassTimeInfo::Clear(uint64_t this)
{
  LOBYTE(v1) = *(unsigned char *)(this + 40);
  if ((_BYTE)v1)
  {
    *(void *)(this + 8) = 0;
    *(_DWORD *)(this + 32) = 0;
    if ((v1 & 8) != 0)
    {
      uint64_t v2 = *(void *)(this + 16);
      if (v2)
      {
        if (*(unsigned char *)(v2 + 28))
        {
          *(void *)(v2 + 8) = 0;
          *(void *)(v2 + 16) = 0;
        }
        *(_DWORD *)(v2 + 28) = 0;
        int v1 = *(_DWORD *)(this + 40);
      }
    }
    if ((v1 & 0x10) != 0)
    {
      uint64_t v3 = *(void *)(this + 24);
      if (v3)
      {
        if (*(unsigned char *)(v3 + 28))
        {
          *(void *)(v3 + 8) = 0;
          *(void *)(v3 + 16) = 0;
        }
        *(_DWORD *)(v3 + 28) = 0;
      }
    }
  }
  *(_DWORD *)(this + 40) = 0;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::GlonassTimeInfo::MergePartialFromCodedStream(CoreNavigation::CLP::LogEntry::PrivateData::GlonassTimeInfo *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  uint64_t v4 = (unsigned int *)((char *)this + 8);
  int v5 = (unsigned int *)((char *)this + 12);
  while (2)
  {
    int v6 = (char *)*((void *)a2 + 1);
    if ((unint64_t)v6 >= *((void *)a2 + 2) || *v6 < 0)
    {
      unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      if (!TagFallback) {
        return 1;
      }
    }
    else
    {
      unint64_t TagFallback = *v6;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((void *)a2 + 1) = v6 + 1;
      if (!TagFallback) {
        return 1;
      }
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        int v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_20;
        }
        int v10 = (char *)*((void *)a2 + 1);
        unint64_t v9 = *((void *)a2 + 2);
        if ((unint64_t)v10 >= v9 || *v10 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v4);
          if (!result) {
            return result;
          }
          int v11 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v9 = *((void *)a2 + 2);
        }
        else
        {
          unsigned int *v4 = *v10;
          int v11 = v10 + 1;
          *((void *)a2 + 1) = v11;
        }
        *((_DWORD *)this + 10) |= 1u;
        if ((unint64_t)v11 < v9 && *v11 == 16)
        {
          unint64_t v12 = v11 + 1;
          *((void *)a2 + 1) = v12;
          goto LABEL_28;
        }
        continue;
      case 2u:
        int v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_20;
        }
        unint64_t v12 = (char *)*((void *)a2 + 1);
        unint64_t v9 = *((void *)a2 + 2);
LABEL_28:
        if ((unint64_t)v12 >= v9 || *v12 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v5);
          if (!result) {
            return result;
          }
          unsigned int v15 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v9 = *((void *)a2 + 2);
        }
        else
        {
          unsigned int *v5 = *v12;
          unsigned int v15 = v12 + 1;
          *((void *)a2 + 1) = v15;
        }
        *((_DWORD *)this + 10) |= 2u;
        if ((unint64_t)v15 >= v9 || *v15 != 24) {
          continue;
        }
        int v13 = v15 + 1;
        *((void *)a2 + 1) = v13;
LABEL_36:
        unsigned int v32 = 0;
        if ((unint64_t)v13 >= v9 || *v13 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v32);
          if (!result) {
            return result;
          }
          unsigned int v16 = v32;
        }
        else
        {
          unsigned int v16 = *v13;
          *((void *)a2 + 1) = v13 + 1;
        }
        if (v16 <= 5)
        {
          *((_DWORD *)this + 10) |= 4u;
          *((_DWORD *)this + 8) = v16;
        }
        int v17 = (unsigned char *)*((void *)a2 + 1);
        if ((unint64_t)v17 >= *((void *)a2 + 2) || *v17 != 34) {
          continue;
        }
        *((void *)a2 + 1) = v17 + 1;
LABEL_46:
        *((_DWORD *)this + 10) |= 8u;
        int v18 = (CoreNavigation::CLP::LogEntry::PrivateData::GlonassSubsecondConversion *)*((void *)this + 2);
        if (!v18) {
          operator new();
        }
        unsigned int v33 = 0;
        BOOL v19 = (char *)*((void *)a2 + 1);
        if ((unint64_t)v19 >= *((void *)a2 + 2) || *v19 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v33))return 0; {
        }
          }
        else
        {
          unsigned int v33 = *v19;
          *((void *)a2 + 1) = v19 + 1;
        }
        int v20 = *((_DWORD *)a2 + 14);
        int v21 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v20 + 1;
        if (v20 >= v21) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CoreNavigation::CLP::LogEntry::PrivateData::GlonassSubsecondConversion::MergePartialFromCodedStream(v18, a2)|| !*((unsigned char *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        int v22 = *((_DWORD *)a2 + 14);
        BOOL v23 = __OFSUB__(v22, 1);
        int v24 = v22 - 1;
        if (v24 < 0 == v23) {
          *((_DWORD *)a2 + 14) = v24;
        }
        int v25 = (unsigned char *)*((void *)a2 + 1);
        if ((unint64_t)v25 >= *((void *)a2 + 2) || *v25 != 42) {
          continue;
        }
        *((void *)a2 + 1) = v25 + 1;
LABEL_60:
        *((_DWORD *)this + 10) |= 0x10u;
        int v26 = (CoreNavigation::CLP::LogEntry::PrivateData::GlonassSubsecondConversion *)*((void *)this + 3);
        if (!v26) {
          operator new();
        }
        unsigned int v34 = 0;
        int v27 = (char *)*((void *)a2 + 1);
        if ((unint64_t)v27 >= *((void *)a2 + 2) || *v27 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v34))return 0; {
        }
          }
        else
        {
          unsigned int v34 = *v27;
          *((void *)a2 + 1) = v27 + 1;
        }
        int v28 = *((_DWORD *)a2 + 14);
        int v29 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v28 + 1;
        if (v28 < v29)
        {
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
          if (CoreNavigation::CLP::LogEntry::PrivateData::GlonassSubsecondConversion::MergePartialFromCodedStream(v26, a2))
          {
            if (*((unsigned char *)a2 + 36))
            {
              wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
              int v30 = *((_DWORD *)a2 + 14);
              BOOL v23 = __OFSUB__(v30, 1);
              int v31 = v30 - 1;
              if (v31 < 0 == v23) {
                *((_DWORD *)a2 + 14) = v31;
              }
              if (*((void *)a2 + 1) == *((void *)a2 + 2)
                && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
              {
                *((_DWORD *)a2 + 8) = 0;
                uint64_t result = 1;
                *((unsigned char *)a2 + 36) = 1;
                return result;
              }
              continue;
            }
          }
        }
        return 0;
      case 3u:
        int v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_20;
        }
        int v13 = (char *)*((void *)a2 + 1);
        unint64_t v9 = *((void *)a2 + 2);
        goto LABEL_36;
      case 4u:
        int v8 = TagFallback & 7;
        if (v8 == 2) {
          goto LABEL_46;
        }
        goto LABEL_20;
      case 5u:
        int v8 = TagFallback & 7;
        if (v8 != 2) {
          goto LABEL_20;
        }
        goto LABEL_60;
      default:
        int v8 = TagFallback & 7;
LABEL_20:
        if (v8 == 4) {
          return 1;
        }
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0; {
        continue;
        }
    }
  }
}

unsigned int *CoreNavigation::CLP::LogEntry::PrivateData::GlonassTimeInfo::SerializeWithCachedSizes(unsigned int *this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  int v5 = this;
  unsigned int v6 = this[10];
  if (v6)
  {
    this = (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, this[2], (uint64_t)a2, a4);
    unsigned int v6 = v5[10];
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v5[3], (uint64_t)a2, a4);
  unsigned int v6 = v5[10];
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
LABEL_9:
  this = (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v5[8], (uint64_t)a2, a4);
  unsigned int v6 = v5[10];
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      return this;
    }
    goto LABEL_13;
  }
LABEL_10:
  uint64_t v7 = *((void *)v5 + 2);
  if (!v7)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)this);
    uint64_t v7 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::GlonassTimeInfo::default_instance_ + 16);
  }
  this = (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v7, a2, a4);
  if ((v5[10] & 0x10) != 0)
  {
LABEL_13:
    uint64_t v8 = *((void *)v5 + 3);
    if (!v8)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)this);
      uint64_t v8 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::GlonassTimeInfo::default_instance_ + 24);
    }
    return (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, v8, a2, a4);
  }
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::GlonassTimeInfo::ByteSize(CoreNavigation::CLP::LogEntry::PrivateData::GlonassTimeInfo *this)
{
  LOBYTE(v2) = *((unsigned char *)this + 40);
  if (!(_BYTE)v2)
  {
    uint64_t v3 = 0;
    goto LABEL_36;
  }
  if (*((unsigned char *)this + 40))
  {
    uint64_t v4 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 2);
    if (v4 >= 0x80)
    {
      uint64_t v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v4) + 1;
      int v2 = *((_DWORD *)this + 10);
      if ((v2 & 2) == 0) {
        goto LABEL_14;
      }
    }
    else
    {
      uint64_t v3 = 2;
      if ((v2 & 2) == 0) {
        goto LABEL_14;
      }
    }
  }
  else
  {
    uint64_t v3 = 0;
    if ((*((unsigned char *)this + 40) & 2) == 0) {
      goto LABEL_14;
    }
  }
  int v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 3);
  if (v5 >= 0x80)
  {
    int v6 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5) + 1;
    int v2 = *((_DWORD *)this + 10);
  }
  else
  {
    int v6 = 2;
  }
  uint64_t v3 = (v6 + v3);
LABEL_14:
  if ((v2 & 4) != 0)
  {
    uint64_t v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 8);
    if ((v7 & 0x80000000) != 0)
    {
      int v8 = 11;
    }
    else if (v7 >= 0x80)
    {
      int v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7) + 1;
      int v2 = *((_DWORD *)this + 10);
    }
    else
    {
      int v8 = 2;
    }
    uint64_t v3 = (v8 + v3);
    if ((v2 & 8) == 0)
    {
LABEL_16:
      if ((v2 & 0x10) == 0) {
        goto LABEL_36;
      }
      goto LABEL_30;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_16;
  }
  unint64_t v9 = (CoreNavigation::CLP::LogEntry::PrivateData::GlonassSubsecondConversion *)*((void *)this + 2);
  if (!v9)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(0);
    unint64_t v9 = *(CoreNavigation::CLP::LogEntry::PrivateData::GlonassSubsecondConversion **)(CoreNavigation::CLP::LogEntry::PrivateData::GlonassTimeInfo::default_instance_
                                                                                    + 16);
  }
  int v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CoreNavigation::CLP::LogEntry::PrivateData::GlonassSubsecondConversion::ByteSize(v9);
  int v11 = (int)v10;
  if (v10 >= 0x80) {
    int v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v10);
  }
  else {
    int v12 = 1;
  }
  uint64_t v3 = (v3 + v11 + v12 + 1);
  if ((*((_DWORD *)this + 10) & 0x10) != 0)
  {
LABEL_30:
    int v13 = (CoreNavigation::CLP::LogEntry::PrivateData::GlonassSubsecondConversion *)*((void *)this + 3);
    if (!v13)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(0);
      int v13 = *(CoreNavigation::CLP::LogEntry::PrivateData::GlonassSubsecondConversion **)(CoreNavigation::CLP::LogEntry::PrivateData::GlonassTimeInfo::default_instance_
                                                                                       + 24);
    }
    unint64_t v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CoreNavigation::CLP::LogEntry::PrivateData::GlonassSubsecondConversion::ByteSize(v13);
    int v15 = (int)v14;
    if (v14 >= 0x80) {
      int v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v14);
    }
    else {
      int v16 = 1;
    }
    uint64_t v3 = (v3 + v15 + v16 + 1);
  }
LABEL_36:
  *((_DWORD *)this + 9) = v3;
  return v3;
}

double CoreNavigation::CLP::LogEntry::PrivateData::GlonassTimeInfo::CheckTypeAndMergeFrom(CoreNavigation::CLP::LogEntry::PrivateData::GlonassTimeInfo *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  return CoreNavigation::CLP::LogEntry::PrivateData::GlonassTimeInfo::MergeFrom(this, lpsrc);
}

double CoreNavigation::CLP::LogEntry::PrivateData::GlonassTimeInfo::CopyFrom(CoreNavigation::CLP::LogEntry::PrivateData::GlonassTimeInfo *this, const CoreNavigation::CLP::LogEntry::PrivateData::GlonassTimeInfo *a2)
{
  if (a2 != this)
  {
    (*(void (**)(CoreNavigation::CLP::LogEntry::PrivateData::GlonassTimeInfo *))(*(void *)this + 32))(this);
    return CoreNavigation::CLP::LogEntry::PrivateData::GlonassTimeInfo::MergeFrom(this, a2);
  }
  return result;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::GlonassTimeInfo::IsInitialized(CoreNavigation::CLP::LogEntry::PrivateData::GlonassTimeInfo *this)
{
  return 1;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::GlonassTimeInfo::Swap(uint64_t this, CoreNavigation::CLP::LogEntry::PrivateData::GlonassTimeInfo *a2)
{
  if (a2 != (CoreNavigation::CLP::LogEntry::PrivateData::GlonassTimeInfo *)this)
  {
    int v2 = *(_DWORD *)(this + 8);
    *(_DWORD *)(this + 8) = *((_DWORD *)a2 + 2);
    *((_DWORD *)a2 + 2) = v2;
    int v3 = *(_DWORD *)(this + 12);
    *(_DWORD *)(this + 12) = *((_DWORD *)a2 + 3);
    *((_DWORD *)a2 + 3) = v3;
    int v4 = *(_DWORD *)(this + 32);
    *(_DWORD *)(this + 32) = *((_DWORD *)a2 + 8);
    *((_DWORD *)a2 + 8) = v4;
    uint64_t v5 = *(void *)(this + 16);
    *(void *)(this + 16) = *((void *)a2 + 2);
    *((void *)a2 + 2) = v5;
    uint64_t v6 = *(void *)(this + 24);
    *(void *)(this + 24) = *((void *)a2 + 3);
    *((void *)a2 + 3) = v6;
    LODWORD(v6) = *(_DWORD *)(this + 40);
    *(_DWORD *)(this + 40) = *((_DWORD *)a2 + 10);
    *((_DWORD *)a2 + 10) = v6;
    LODWORD(v6) = *(_DWORD *)(this + 36);
    *(_DWORD *)(this + 36) = *((_DWORD *)a2 + 9);
    *((_DWORD *)a2 + 9) = v6;
  }
  return this;
}

void *CoreNavigation::CLP::LogEntry::PrivateData::GlonassTimeInfo::GetTypeName@<X0>(void *a1@<X8>)
{
  return sub_18DEDE7B0(a1, "CoreNavigation.CLP.LogEntry.PrivateData.GlonassTimeInfo");
}

double CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion::SharedCtor(CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion *this)
{
  double result = 0.0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  return result;
}

CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion *CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion::SubSecondConversion(CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion *this, const CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion *a2)
{
  *(void *)this = &unk_1EDD0D748;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion::MergeFrom(this, a2);
  return this;
}

void sub_18DFD6E18(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

double CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion::MergeFrom(CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion *this, const CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion *a2)
{
  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v7);
  }
  LOBYTE(v5) = *((unsigned char *)a2 + 36);
  if ((_BYTE)v5)
  {
    if (*((unsigned char *)a2 + 36))
    {
      uint64_t v6 = *((void *)a2 + 1);
      *((_DWORD *)this + 9) |= 1u;
      *((void *)this + 1) = v6;
      int v5 = *((_DWORD *)a2 + 9);
      if ((v5 & 2) == 0)
      {
LABEL_6:
        if ((v5 & 4) == 0) {
          return result;
        }
        goto LABEL_7;
      }
    }
    else if ((*((unsigned char *)a2 + 36) & 2) == 0)
    {
      goto LABEL_6;
    }
    double result = *((double *)a2 + 2);
    *((_DWORD *)this + 9) |= 2u;
    *((double *)this + 2) = result;
    if ((*((_DWORD *)a2 + 9) & 4) == 0) {
      return result;
    }
LABEL_7:
    double result = *((double *)a2 + 3);
    *((_DWORD *)this + 9) |= 4u;
    *((double *)this + 3) = result;
  }
  return result;
}

void sub_18DFD6F00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion::~SubSecondConversion(CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion *this)
{
  *(void *)this = &unk_1EDD0D748;
  CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  uint64_t vars8;

  CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion::~SubSecondConversion(this);

  JUMPOUT(0x192FA6240);
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion::default_instance(CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion *this)
{
  return CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion::default_instance_;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 32) = a2;
  return this;
}

void CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion::New(CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion *this)
{
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion::Clear(uint64_t this)
{
  if (*(unsigned char *)(this + 36))
  {
    *(void *)(this + 8) = 0;
    *(void *)(this + 16) = 0;
    *(void *)(this + 24) = 0;
  }
  *(_DWORD *)(this + 36) = 0;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion::MergePartialFromCodedStream(CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  int v4 = (unint64_t *)((char *)this + 8);
  do
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          int v5 = (char *)*((void *)a2 + 1);
          if ((unint64_t)v5 >= *((void *)a2 + 2) || *v5 < 0)
          {
            unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
            *((_DWORD *)a2 + 8) = TagFallback;
            if (!TagFallback) {
              return 1;
            }
          }
          else
          {
            unint64_t TagFallback = *v5;
            *((_DWORD *)a2 + 8) = TagFallback;
            *((void *)a2 + 1) = v5 + 1;
            if (!TagFallback) {
              return 1;
            }
          }
          unsigned int v7 = TagFallback >> 3;
          if (TagFallback >> 3 != 1) {
            break;
          }
          int v8 = TagFallback & 7;
          if ((TagFallback & 7) != 0) {
            goto LABEL_19;
          }
          int v10 = (char *)*((void *)a2 + 1);
          unint64_t v9 = *((void *)a2 + 2);
          if ((unint64_t)v10 >= v9 || *v10 < 0)
          {
            uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v4);
            if (!result) {
              return result;
            }
            int v11 = (unsigned char *)*((void *)a2 + 1);
            unint64_t v9 = *((void *)a2 + 2);
          }
          else
          {
            unint64_t *v4 = *v10;
            int v11 = v10 + 1;
            *((void *)a2 + 1) = v11;
          }
          *((_DWORD *)this + 9) |= 1u;
          if ((unint64_t)v11 < v9 && *v11 == 17)
          {
            *((void *)a2 + 1) = v11 + 1;
            goto LABEL_27;
          }
        }
        if (v7 != 2) {
          break;
        }
        int v8 = TagFallback & 7;
        if (v8 != 1) {
          goto LABEL_19;
        }
LABEL_27:
        unint64_t v14 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, &v14) & 1) == 0) {
          return 0;
        }
        *((void *)this + 2) = v14;
        *((_DWORD *)this + 9) |= 2u;
        int v13 = (unsigned char *)*((void *)a2 + 1);
        if ((unint64_t)v13 < *((void *)a2 + 2) && *v13 == 25)
        {
          *((void *)a2 + 1) = v13 + 1;
          goto LABEL_31;
        }
      }
      if (v7 != 3) {
        break;
      }
      int v8 = TagFallback & 7;
      if (v8 != 1) {
        goto LABEL_19;
      }
LABEL_31:
      unint64_t v14 = 0;
      if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, &v14) & 1) == 0) {
        return 0;
      }
      *((void *)this + 3) = v14;
      *((_DWORD *)this + 9) |= 4u;
      if (*((void *)a2 + 1) == *((void *)a2 + 2)
        && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
      {
        *((_DWORD *)a2 + 8) = 0;
        uint64_t result = 1;
        *((unsigned char *)a2 + 36) = 1;
        return result;
      }
    }
    int v8 = TagFallback & 7;
LABEL_19:
    if (v8 == 4) {
      return 1;
    }
  }
  while ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) != 0);
  return 0;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  int v6 = *(_DWORD *)(this + 36);
  if ((v6 & 1) == 0)
  {
    if ((v6 & 2) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, (uint64_t)a2, *(double *)(v5 + 16), a3);
    if ((*(_DWORD *)(v5 + 36) & 4) == 0) {
      return this;
    }
    goto LABEL_7;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(void *)(this + 8), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 36);
  if ((v6 & 2) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v6 & 4) == 0) {
    return this;
  }
LABEL_7:
  double v7 = *(double *)(v5 + 24);

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, (uint64_t)a2, v7, a3);
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion::ByteSize(CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion *this)
{
  LOBYTE(v2) = *((unsigned char *)this + 36);
  if ((_BYTE)v2)
  {
    if (*((unsigned char *)this + 36))
    {
      unsigned int v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this
                                                                                       + 1))
         + 1;
      int v2 = *((_DWORD *)this + 9);
    }
    else
    {
      unsigned int v3 = 0;
    }
    if ((v2 & 2) != 0) {
      v3 += 9;
    }
    if ((v2 & 4) != 0) {
      uint64_t result = v3 + 9;
    }
    else {
      uint64_t result = v3;
    }
  }
  else
  {
    uint64_t result = 0;
  }
  *((_DWORD *)this + 8) = result;
  return result;
}

double CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion::CheckTypeAndMergeFrom(CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  return CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion::MergeFrom(this, lpsrc);
}

double CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion::CopyFrom(CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion *this, const CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion *a2)
{
  if (a2 != this)
  {
    (*(void (**)(CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion *))(*(void *)this + 32))(this);
    return CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion::MergeFrom(this, a2);
  }
  return result;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion::IsInitialized(CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion *this)
{
  return 1;
}

double CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion::Swap(CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion *this, CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion *a2)
{
  if (a2 != this)
  {
    uint64_t v2 = *((void *)this + 1);
    *((void *)this + 1) = *((void *)a2 + 1);
    *((void *)a2 + 1) = v2;
    uint64_t v3 = *((void *)this + 2);
    *((void *)this + 2) = *((void *)a2 + 2);
    *((void *)a2 + 2) = v3;
    double result = *((double *)this + 3);
    *((void *)this + 3) = *((void *)a2 + 3);
    *((double *)a2 + 3) = result;
    LODWORD(v2) = *((_DWORD *)this + 9);
    *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
    *((_DWORD *)a2 + 9) = v2;
    LODWORD(v2) = *((_DWORD *)this + 8);
    *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
    *((_DWORD *)a2 + 8) = v2;
  }
  return result;
}

void *CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion::GetTypeName@<X0>(void *a1@<X8>)
{
  return sub_18DEDE7B0(a1, "CoreNavigation.CLP.LogEntry.PrivateData.SubSecondConversion");
}

double CoreNavigation::CLP::LogEntry::PrivateData::BeidouTimeInfo::SharedCtor(CoreNavigation::CLP::LogEntry::PrivateData::BeidouTimeInfo *this)
{
  *((_DWORD *)this + 14) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  return result;
}

CoreNavigation::CLP::LogEntry::PrivateData::BeidouTimeInfo *CoreNavigation::CLP::LogEntry::PrivateData::BeidouTimeInfo::BeidouTimeInfo(CoreNavigation::CLP::LogEntry::PrivateData::BeidouTimeInfo *this, const CoreNavigation::CLP::LogEntry::PrivateData::BeidouTimeInfo *a2)
{
  *(void *)this = &unk_1EDD0BC90;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 0;
  CoreNavigation::CLP::LogEntry::PrivateData::BeidouTimeInfo::MergeFrom(this, a2);
  return this;
}

void sub_18DFD7550(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

double CoreNavigation::CLP::LogEntry::PrivateData::BeidouTimeInfo::MergeFrom(CoreNavigation::CLP::LogEntry::PrivateData::BeidouTimeInfo *this, const CoreNavigation::CLP::LogEntry::PrivateData::BeidouTimeInfo *a2)
{
  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v17);
  }
  LOBYTE(v5) = *((unsigned char *)a2 + 56);
  if (!(_BYTE)v5) {
    return result;
  }
  if (*((unsigned char *)a2 + 56))
  {
    int v6 = *((_DWORD *)a2 + 12);
    *((_DWORD *)this + 14) |= 1u;
    *((_DWORD *)this + 12) = v6;
    int v5 = *((_DWORD *)a2 + 14);
    if ((v5 & 2) == 0)
    {
LABEL_6:
      if ((v5 & 4) == 0) {
        goto LABEL_7;
      }
      goto LABEL_17;
    }
  }
  else if ((*((unsigned char *)a2 + 56) & 2) == 0)
  {
    goto LABEL_6;
  }
  *((_DWORD *)this + 14) |= 2u;
  double v7 = (CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondInfo *)*((void *)this + 1);
  if (!v7) {
    operator new();
  }
  int v8 = (const CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondInfo *)*((void *)a2 + 1);
  if (!v8)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);
    int v8 = *(const CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondInfo **)(CoreNavigation::CLP::LogEntry::PrivateData::BeidouTimeInfo::default_instance_
                                                                              + 8);
  }
  CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondInfo::MergeFrom(v7, v8);
  int v5 = *((_DWORD *)a2 + 14);
  if ((v5 & 4) == 0)
  {
LABEL_7:
    if ((v5 & 8) == 0) {
      goto LABEL_8;
    }
LABEL_22:
    *((_DWORD *)this + 14) |= 8u;
    int v11 = (CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion *)*((void *)this + 3);
    if (!v11) {
      operator new();
    }
    int v12 = (const CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion *)*((void *)a2 + 3);
    if (!v12)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);
      int v12 = *(const CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion **)(CoreNavigation::CLP::LogEntry::PrivateData::BeidouTimeInfo::default_instance_
                                                                                      + 24);
    }
    double result = CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion::MergeFrom(v11, v12);
    int v5 = *((_DWORD *)a2 + 14);
    if ((v5 & 0x10) == 0)
    {
LABEL_9:
      if ((v5 & 0x20) == 0) {
        return result;
      }
      goto LABEL_32;
    }
    goto LABEL_27;
  }
LABEL_17:
  *((_DWORD *)this + 14) |= 4u;
  unint64_t v9 = (CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion *)*((void *)this + 2);
  if (!v9) {
    operator new();
  }
  int v10 = (const CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion *)*((void *)a2 + 2);
  if (!v10)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);
    int v10 = *(const CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion **)(CoreNavigation::CLP::LogEntry::PrivateData::BeidouTimeInfo::default_instance_
                                                                                    + 16);
  }
  double result = CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion::MergeFrom(v9, v10);
  int v5 = *((_DWORD *)a2 + 14);
  if ((v5 & 8) != 0) {
    goto LABEL_22;
  }
LABEL_8:
  if ((v5 & 0x10) == 0) {
    goto LABEL_9;
  }
LABEL_27:
  *((_DWORD *)this + 14) |= 0x10u;
  int v13 = (CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion *)*((void *)this + 4);
  if (!v13) {
    operator new();
  }
  unint64_t v14 = (const CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion *)*((void *)a2 + 4);
  if (!v14)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);
    unint64_t v14 = *(const CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion **)(CoreNavigation::CLP::LogEntry::PrivateData::BeidouTimeInfo::default_instance_
                                                                                    + 32);
  }
  double result = CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion::MergeFrom(v13, v14);
  if ((*((_DWORD *)a2 + 14) & 0x20) != 0)
  {
LABEL_32:
    *((_DWORD *)this + 14) |= 0x20u;
    int v15 = (CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion *)*((void *)this + 5);
    if (!v15) {
      operator new();
    }
    int v16 = (const CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion *)*((void *)a2 + 5);
    if (!v16)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);
      int v16 = *(const CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion **)(CoreNavigation::CLP::LogEntry::PrivateData::BeidouTimeInfo::default_instance_
                                                                                      + 40);
    }
    return CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion::MergeFrom(v15, v16);
  }
  return result;
}

void sub_18DFD78A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CoreNavigation::CLP::LogEntry::PrivateData::BeidouTimeInfo::~BeidouTimeInfo(CoreNavigation::CLP::LogEntry::PrivateData::BeidouTimeInfo *this)
{
  *(void *)this = &unk_1EDD0BC90;
  CoreNavigation::CLP::LogEntry::PrivateData::BeidouTimeInfo::SharedDtor(this);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  uint64_t vars8;

  CoreNavigation::CLP::LogEntry::PrivateData::BeidouTimeInfo::~BeidouTimeInfo(this);

  JUMPOUT(0x192FA6240);
}

void CoreNavigation::CLP::LogEntry::PrivateData::BeidouTimeInfo::SharedDtor(CoreNavigation::CLP::LogEntry::PrivateData::BeidouTimeInfo *this)
{
  CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);
  if ((CoreNavigation::CLP::LogEntry::PrivateData::BeidouTimeInfo *)CoreNavigation::CLP::LogEntry::PrivateData::BeidouTimeInfo::default_instance_ != this)
  {
    uint64_t v2 = *((void *)this + 1);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
    uint64_t v3 = *((void *)this + 2);
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
    uint64_t v4 = *((void *)this + 3);
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
    uint64_t v5 = *((void *)this + 4);
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    }
    uint64_t v6 = *((void *)this + 5);
    if (v6)
    {
      double v7 = *(void (**)(void))(*(void *)v6 + 8);
      v7();
    }
  }
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::BeidouTimeInfo::default_instance(CoreNavigation::CLP::LogEntry::PrivateData::BeidouTimeInfo *this)
{
  return CoreNavigation::CLP::LogEntry::PrivateData::BeidouTimeInfo::default_instance_;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::BeidouTimeInfo::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 52) = a2;
  return this;
}

void CoreNavigation::CLP::LogEntry::PrivateData::BeidouTimeInfo::New(CoreNavigation::CLP::LogEntry::PrivateData::BeidouTimeInfo *this)
{
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::BeidouTimeInfo::Clear(uint64_t this)
{
  uint64_t v1 = this;
  LOBYTE(v2) = *(unsigned char *)(this + 56);
  if ((_BYTE)v2)
  {
    *(_DWORD *)(this + 48) = 0;
    if ((v2 & 2) != 0)
    {
      this = *(void *)(this + 8);
      if (this)
      {
        this = CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondInfo::Clear(this);
        int v2 = *(_DWORD *)(v1 + 56);
      }
    }
    if ((v2 & 4) != 0)
    {
      uint64_t v3 = *(void *)(v1 + 16);
      if (v3)
      {
        if (*(unsigned char *)(v3 + 36))
        {
          *(void *)(v3 + 8) = 0;
          *(void *)(v3 + 16) = 0;
          *(void *)(v3 + 24) = 0;
        }
        *(_DWORD *)(v3 + 36) = 0;
        int v2 = *(_DWORD *)(v1 + 56);
      }
    }
    if ((v2 & 8) != 0)
    {
      uint64_t v4 = *(void *)(v1 + 24);
      if (v4)
      {
        if (*(unsigned char *)(v4 + 36))
        {
          *(void *)(v4 + 8) = 0;
          *(void *)(v4 + 16) = 0;
          *(void *)(v4 + 24) = 0;
        }
        *(_DWORD *)(v4 + 36) = 0;
        int v2 = *(_DWORD *)(v1 + 56);
      }
    }
    if ((v2 & 0x10) != 0)
    {
      uint64_t v5 = *(void *)(v1 + 32);
      if (v5)
      {
        if (*(unsigned char *)(v5 + 36))
        {
          *(void *)(v5 + 8) = 0;
          *(void *)(v5 + 16) = 0;
          *(void *)(v5 + 24) = 0;
        }
        *(_DWORD *)(v5 + 36) = 0;
        int v2 = *(_DWORD *)(v1 + 56);
      }
    }
    if ((v2 & 0x20) != 0)
    {
      uint64_t v6 = *(void *)(v1 + 40);
      if (v6)
      {
        if (*(unsigned char *)(v6 + 36))
        {
          *(void *)(v6 + 8) = 0;
          *(void *)(v6 + 16) = 0;
          *(void *)(v6 + 24) = 0;
        }
        *(_DWORD *)(v6 + 36) = 0;
      }
    }
  }
  *(_DWORD *)(v1 + 56) = 0;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::BeidouTimeInfo::MergePartialFromCodedStream(CoreNavigation::CLP::LogEntry::PrivateData::BeidouTimeInfo *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  uint64_t v4 = (unsigned int *)((char *)this + 48);
  while (1)
  {
    uint64_t v5 = (char *)*((void *)a2 + 1);
    if ((unint64_t)v5 < *((void *)a2 + 2) && (*v5 & 0x80000000) == 0)
    {
      unint64_t TagFallback = *v5;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((void *)a2 + 1) = v5 + 1;
      if (!TagFallback) {
        return 1;
      }
      goto LABEL_7;
    }
    unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
    *((_DWORD *)a2 + 8) = TagFallback;
    if (!TagFallback) {
      return 1;
    }
LABEL_7:
    switch(TagFallback >> 3)
    {
      case 1u:
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_22;
        }
        unint64_t v9 = (char *)*((void *)a2 + 1);
        unint64_t v8 = *((void *)a2 + 2);
        if ((unint64_t)v9 >= v8 || *v9 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v4);
          if (!result) {
            return result;
          }
          int v10 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v8 = *((void *)a2 + 2);
        }
        else
        {
          unsigned int *v4 = *v9;
          int v10 = v9 + 1;
          *((void *)a2 + 1) = v10;
        }
        int v11 = *((_DWORD *)this + 14) | 1;
        *((_DWORD *)this + 14) = v11;
        if ((unint64_t)v10 < v8 && *v10 == 18)
        {
          *((void *)a2 + 1) = v10 + 1;
          goto LABEL_30;
        }
        continue;
      case 2u:
        int v7 = TagFallback & 7;
        if (v7 != 2) {
          goto LABEL_22;
        }
        int v11 = *((_DWORD *)this + 14);
LABEL_30:
        *((_DWORD *)this + 14) = v11 | 2;
        int v13 = (CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondInfo *)*((void *)this + 1);
        if (!v13) {
          operator new();
        }
        unsigned int v48 = 0;
        unint64_t v14 = (char *)*((void *)a2 + 1);
        if ((unint64_t)v14 >= *((void *)a2 + 2) || *v14 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v48))return 0; {
        }
          }
        else
        {
          unsigned int v48 = *v14;
          *((void *)a2 + 1) = v14 + 1;
        }
        int v15 = *((_DWORD *)a2 + 14);
        int v16 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v15 + 1;
        if (v15 >= v16) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondInfo::MergePartialFromCodedStream(v13, a2)|| !*((unsigned char *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        int v17 = *((_DWORD *)a2 + 14);
        BOOL v18 = __OFSUB__(v17, 1);
        int v19 = v17 - 1;
        if (v19 < 0 == v18) {
          *((_DWORD *)a2 + 14) = v19;
        }
        int v20 = (unsigned char *)*((void *)a2 + 1);
        if ((unint64_t)v20 >= *((void *)a2 + 2) || *v20 != 26) {
          continue;
        }
        *((void *)a2 + 1) = v20 + 1;
LABEL_44:
        *((_DWORD *)this + 14) |= 4u;
        int v21 = (CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion *)*((void *)this + 2);
        if (!v21) {
          operator new();
        }
        unsigned int v48 = 0;
        int v22 = (char *)*((void *)a2 + 1);
        if ((unint64_t)v22 >= *((void *)a2 + 2) || *v22 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v48))return 0; {
        }
          }
        else
        {
          unsigned int v48 = *v22;
          *((void *)a2 + 1) = v22 + 1;
        }
        int v23 = *((_DWORD *)a2 + 14);
        int v24 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v23 + 1;
        if (v23 >= v24) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion::MergePartialFromCodedStream(v21, a2)|| !*((unsigned char *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        int v25 = *((_DWORD *)a2 + 14);
        BOOL v18 = __OFSUB__(v25, 1);
        int v26 = v25 - 1;
        if (v26 < 0 == v18) {
          *((_DWORD *)a2 + 14) = v26;
        }
        int v27 = (unsigned char *)*((void *)a2 + 1);
        if ((unint64_t)v27 >= *((void *)a2 + 2) || *v27 != 34) {
          continue;
        }
        *((void *)a2 + 1) = v27 + 1;
LABEL_58:
        *((_DWORD *)this + 14) |= 8u;
        int v28 = (CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion *)*((void *)this + 3);
        if (!v28) {
          operator new();
        }
        unsigned int v48 = 0;
        int v29 = (char *)*((void *)a2 + 1);
        if ((unint64_t)v29 >= *((void *)a2 + 2) || *v29 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v48))return 0; {
        }
          }
        else
        {
          unsigned int v48 = *v29;
          *((void *)a2 + 1) = v29 + 1;
        }
        int v30 = *((_DWORD *)a2 + 14);
        int v31 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v30 + 1;
        if (v30 >= v31) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion::MergePartialFromCodedStream(v28, a2)|| !*((unsigned char *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        int v32 = *((_DWORD *)a2 + 14);
        BOOL v18 = __OFSUB__(v32, 1);
        int v33 = v32 - 1;
        if (v33 < 0 == v18) {
          *((_DWORD *)a2 + 14) = v33;
        }
        unsigned int v34 = (unsigned char *)*((void *)a2 + 1);
        if ((unint64_t)v34 >= *((void *)a2 + 2) || *v34 != 42) {
          continue;
        }
        *((void *)a2 + 1) = v34 + 1;
LABEL_72:
        *((_DWORD *)this + 14) |= 0x10u;
        unsigned int v35 = (CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion *)*((void *)this + 4);
        if (!v35) {
          operator new();
        }
        unsigned int v48 = 0;
        int v36 = (char *)*((void *)a2 + 1);
        if ((unint64_t)v36 >= *((void *)a2 + 2) || *v36 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v48))return 0; {
        }
          }
        else
        {
          unsigned int v48 = *v36;
          *((void *)a2 + 1) = v36 + 1;
        }
        int v37 = *((_DWORD *)a2 + 14);
        int v38 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v37 + 1;
        if (v37 >= v38) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion::MergePartialFromCodedStream(v35, a2)|| !*((unsigned char *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        int v39 = *((_DWORD *)a2 + 14);
        BOOL v18 = __OFSUB__(v39, 1);
        int v40 = v39 - 1;
        if (v40 < 0 == v18) {
          *((_DWORD *)a2 + 14) = v40;
        }
        uint64_t v41 = (unsigned char *)*((void *)a2 + 1);
        if ((unint64_t)v41 >= *((void *)a2 + 2) || *v41 != 50) {
          continue;
        }
        *((void *)a2 + 1) = v41 + 1;
LABEL_86:
        *((_DWORD *)this + 14) |= 0x20u;
        int v42 = (CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion *)*((void *)this + 5);
        if (!v42) {
          operator new();
        }
        unsigned int v48 = 0;
        uint64_t v43 = (char *)*((void *)a2 + 1);
        if ((unint64_t)v43 >= *((void *)a2 + 2) || *v43 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v48))return 0; {
        }
          }
        else
        {
          unsigned int v48 = *v43;
          *((void *)a2 + 1) = v43 + 1;
        }
        int v44 = *((_DWORD *)a2 + 14);
        int v45 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v44 + 1;
        if (v44 >= v45) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion::MergePartialFromCodedStream(v42, a2)|| !*((unsigned char *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        int v46 = *((_DWORD *)a2 + 14);
        BOOL v18 = __OFSUB__(v46, 1);
        int v47 = v46 - 1;
        if (v47 < 0 == v18) {
          *((_DWORD *)a2 + 14) = v47;
        }
        if (*((void *)a2 + 1) == *((void *)a2 + 2)
          && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
        {
          *((_DWORD *)a2 + 8) = 0;
          uint64_t result = 1;
          *((unsigned char *)a2 + 36) = 1;
          return result;
        }
        break;
      case 3u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_44;
        }
        goto LABEL_22;
      case 4u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_58;
        }
        goto LABEL_22;
      case 5u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_72;
        }
        goto LABEL_22;
      case 6u:
        int v7 = TagFallback & 7;
        if (v7 != 2) {
          goto LABEL_22;
        }
        goto LABEL_86;
      default:
        int v7 = TagFallback & 7;
LABEL_22:
        if (v7 == 4) {
          return 1;
        }
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0; {
        continue;
        }
    }
  }
}

unsigned int *CoreNavigation::CLP::LogEntry::PrivateData::BeidouTimeInfo::SerializeWithCachedSizes(unsigned int *this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  unsigned int v6 = this[14];
  if (v6)
  {
    this = (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, this[12], (uint64_t)a2, a4);
    unsigned int v6 = v5[14];
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t v7 = *((void *)v5 + 1);
  if (!v7)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)this);
    uint64_t v7 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::BeidouTimeInfo::default_instance_ + 8);
  }
  this = (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v7, a2, a4);
  unsigned int v6 = v5[14];
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_12:
  uint64_t v8 = *((void *)v5 + 2);
  if (!v8)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)this);
    uint64_t v8 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::BeidouTimeInfo::default_instance_ + 16);
  }
  this = (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v8, a2, a4);
  unsigned int v6 = v5[14];
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_18;
  }
LABEL_15:
  uint64_t v9 = *((void *)v5 + 3);
  if (!v9)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)this);
    uint64_t v9 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::BeidouTimeInfo::default_instance_ + 24);
  }
  this = (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v9, a2, a4);
  unsigned int v6 = v5[14];
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      return this;
    }
    goto LABEL_21;
  }
LABEL_18:
  uint64_t v10 = *((void *)v5 + 4);
  if (!v10)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)this);
    uint64_t v10 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::BeidouTimeInfo::default_instance_ + 32);
  }
  this = (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, v10, a2, a4);
  if ((v5[14] & 0x20) != 0)
  {
LABEL_21:
    uint64_t v11 = *((void *)v5 + 5);
    if (!v11)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)this);
      uint64_t v11 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::BeidouTimeInfo::default_instance_ + 40);
    }
    return (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, v11, a2, a4);
  }
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::BeidouTimeInfo::ByteSize(CoreNavigation::CLP::LogEntry::PrivateData::BeidouTimeInfo *this)
{
  LOBYTE(v2) = *((unsigned char *)this + 56);
  if (!(_BYTE)v2)
  {
    uint64_t v3 = 0;
    goto LABEL_45;
  }
  if (*((unsigned char *)this + 56))
  {
    uint64_t v4 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 12);
    if (v4 >= 0x80)
    {
      int v5 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v4);
      int v2 = *((_DWORD *)this + 14);
    }
    else
    {
      int v5 = 1;
    }
    uint64_t v3 = (v5 + 1);
    if ((v2 & 2) == 0) {
      goto LABEL_16;
    }
  }
  else
  {
    uint64_t v3 = 0;
    if ((*((unsigned char *)this + 56) & 2) == 0) {
      goto LABEL_16;
    }
  }
  unsigned int v6 = (CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondInfo *)*((void *)this + 1);
  if (!v6)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(0);
    unsigned int v6 = *(CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondInfo **)(CoreNavigation::CLP::LogEntry::PrivateData::BeidouTimeInfo::default_instance_
                                                                        + 8);
  }
  uint64_t v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondInfo::ByteSize(v6);
  int v8 = (int)v7;
  if (v7 >= 0x80) {
    int v9 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7);
  }
  else {
    int v9 = 1;
  }
  uint64_t v3 = (v3 + v8 + v9 + 1);
  int v2 = *((_DWORD *)this + 14);
LABEL_16:
  if ((v2 & 4) != 0)
  {
    uint64_t v10 = (CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion *)*((void *)this + 2);
    if (!v10)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(0);
      uint64_t v10 = *(CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion **)(CoreNavigation::CLP::LogEntry::PrivateData::BeidouTimeInfo::default_instance_
                                                                                + 16);
    }
    uint64_t v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion::ByteSize(v10);
    int v12 = (int)v11;
    if (v11 >= 0x80) {
      int v13 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v11);
    }
    else {
      int v13 = 1;
    }
    uint64_t v3 = (v3 + v12 + v13 + 1);
    int v2 = *((_DWORD *)this + 14);
    if ((v2 & 8) == 0)
    {
LABEL_18:
      if ((v2 & 0x10) == 0) {
        goto LABEL_19;
      }
      goto LABEL_33;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_18;
  }
  unint64_t v14 = (CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion *)*((void *)this + 3);
  if (!v14)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(0);
    unint64_t v14 = *(CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion **)(CoreNavigation::CLP::LogEntry::PrivateData::BeidouTimeInfo::default_instance_
                                                                              + 24);
  }
  int v15 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion::ByteSize(v14);
  int v16 = (int)v15;
  if (v15 >= 0x80) {
    int v17 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v15);
  }
  else {
    int v17 = 1;
  }
  uint64_t v3 = (v3 + v16 + v17 + 1);
  int v2 = *((_DWORD *)this + 14);
  if ((v2 & 0x10) == 0)
  {
LABEL_19:
    if ((v2 & 0x20) == 0) {
      goto LABEL_45;
    }
    goto LABEL_39;
  }
LABEL_33:
  BOOL v18 = (CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion *)*((void *)this + 4);
  if (!v18)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(0);
    BOOL v18 = *(CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion **)(CoreNavigation::CLP::LogEntry::PrivateData::BeidouTimeInfo::default_instance_
                                                                              + 32);
  }
  int v19 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion::ByteSize(v18);
  int v20 = (int)v19;
  if (v19 >= 0x80) {
    int v21 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v19);
  }
  else {
    int v21 = 1;
  }
  uint64_t v3 = (v3 + v20 + v21 + 1);
  if ((*((_DWORD *)this + 14) & 0x20) != 0)
  {
LABEL_39:
    int v22 = (CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion *)*((void *)this + 5);
    if (!v22)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(0);
      int v22 = *(CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion **)(CoreNavigation::CLP::LogEntry::PrivateData::BeidouTimeInfo::default_instance_
                                                                                + 40);
    }
    int v23 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion::ByteSize(v22);
    int v24 = (int)v23;
    if (v23 >= 0x80) {
      int v25 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v23);
    }
    else {
      int v25 = 1;
    }
    uint64_t v3 = (v3 + v24 + v25 + 1);
  }
LABEL_45:
  *((_DWORD *)this + 13) = v3;
  return v3;
}

double CoreNavigation::CLP::LogEntry::PrivateData::BeidouTimeInfo::CheckTypeAndMergeFrom(CoreNavigation::CLP::LogEntry::PrivateData::BeidouTimeInfo *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  return CoreNavigation::CLP::LogEntry::PrivateData::BeidouTimeInfo::MergeFrom(this, lpsrc);
}

double CoreNavigation::CLP::LogEntry::PrivateData::BeidouTimeInfo::CopyFrom(CoreNavigation::CLP::LogEntry::PrivateData::BeidouTimeInfo *this, const CoreNavigation::CLP::LogEntry::PrivateData::BeidouTimeInfo *a2)
{
  if (a2 != this)
  {
    (*(void (**)(CoreNavigation::CLP::LogEntry::PrivateData::BeidouTimeInfo *))(*(void *)this + 32))(this);
    return CoreNavigation::CLP::LogEntry::PrivateData::BeidouTimeInfo::MergeFrom(this, a2);
  }
  return result;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::BeidouTimeInfo::IsInitialized(CoreNavigation::CLP::LogEntry::PrivateData::BeidouTimeInfo *this)
{
  return 1;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::BeidouTimeInfo::Swap(uint64_t this, CoreNavigation::CLP::LogEntry::PrivateData::BeidouTimeInfo *a2)
{
  if (a2 != (CoreNavigation::CLP::LogEntry::PrivateData::BeidouTimeInfo *)this)
  {
    int v2 = *(_DWORD *)(this + 48);
    *(_DWORD *)(this + 48) = *((_DWORD *)a2 + 12);
    *((_DWORD *)a2 + 12) = v2;
    uint64_t v3 = *(void *)(this + 8);
    *(void *)(this + 8) = *((void *)a2 + 1);
    *((void *)a2 + 1) = v3;
    uint64_t v4 = *(void *)(this + 16);
    *(void *)(this + 16) = *((void *)a2 + 2);
    *((void *)a2 + 2) = v4;
    uint64_t v5 = *(void *)(this + 24);
    *(void *)(this + 24) = *((void *)a2 + 3);
    *((void *)a2 + 3) = v5;
    uint64_t v6 = *(void *)(this + 32);
    *(void *)(this + 32) = *((void *)a2 + 4);
    *((void *)a2 + 4) = v6;
    uint64_t v7 = *(void *)(this + 40);
    *(void *)(this + 40) = *((void *)a2 + 5);
    *((void *)a2 + 5) = v7;
    LODWORD(v7) = *(_DWORD *)(this + 56);
    *(_DWORD *)(this + 56) = *((_DWORD *)a2 + 14);
    *((_DWORD *)a2 + 14) = v7;
    LODWORD(v7) = *(_DWORD *)(this + 52);
    *(_DWORD *)(this + 52) = *((_DWORD *)a2 + 13);
    *((_DWORD *)a2 + 13) = v7;
  }
  return this;
}

void *CoreNavigation::CLP::LogEntry::PrivateData::BeidouTimeInfo::GetTypeName@<X0>(void *a1@<X8>)
{
  return sub_18DEDE7B0(a1, "CoreNavigation.CLP.LogEntry.PrivateData.BeidouTimeInfo");
}

double CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo::SharedCtor(CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo *this)
{
  *((_DWORD *)this + 10) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  return result;
}

CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo *CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo::GalileoTimeInfo(CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo *this, const CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo *a2)
{
  *(void *)this = &unk_1EDD0C398;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_DWORD *)this + 10) = 0;
  CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo::MergeFrom(this, a2);
  return this;
}

void sub_18DFD885C(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

double CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo::MergeFrom(CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo *this, const CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo *a2)
{
  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v13);
  }
  LOBYTE(v5) = *((unsigned char *)a2 + 40);
  if (!(_BYTE)v5) {
    return result;
  }
  if ((*((unsigned char *)a2 + 40) & 1) == 0)
  {
    if ((*((unsigned char *)a2 + 40) & 2) == 0) {
      goto LABEL_6;
    }
LABEL_10:
    *((_DWORD *)this + 10) |= 2u;
    uint64_t v7 = (CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondInfo *)*((void *)this + 1);
    if (!v7) {
      operator new();
    }
    int v8 = (const CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondInfo *)*((void *)a2 + 1);
    if (!v8)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);
      int v8 = *(const CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondInfo **)(CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo::default_instance_
                                                                                + 8);
    }
    CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondInfo::MergeFrom(v7, v8);
    int v5 = *((_DWORD *)a2 + 10);
    if ((v5 & 4) == 0)
    {
LABEL_7:
      if ((v5 & 8) == 0) {
        return result;
      }
      goto LABEL_20;
    }
    goto LABEL_15;
  }
  int v6 = *((_DWORD *)a2 + 8);
  *((_DWORD *)this + 10) |= 1u;
  *((_DWORD *)this + 8) = v6;
  int v5 = *((_DWORD *)a2 + 10);
  if ((v5 & 2) != 0) {
    goto LABEL_10;
  }
LABEL_6:
  if ((v5 & 4) == 0) {
    goto LABEL_7;
  }
LABEL_15:
  *((_DWORD *)this + 10) |= 4u;
  int v9 = (CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion *)*((void *)this + 2);
  if (!v9) {
    operator new();
  }
  uint64_t v10 = (const CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion *)*((void *)a2 + 2);
  if (!v10)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);
    uint64_t v10 = *(const CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion **)(CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo::default_instance_
                                                                                    + 16);
  }
  double result = CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion::MergeFrom(v9, v10);
  if ((*((_DWORD *)a2 + 10) & 8) != 0)
  {
LABEL_20:
    *((_DWORD *)this + 10) |= 8u;
    uint64_t v11 = (CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion *)*((void *)this + 3);
    if (!v11) {
      operator new();
    }
    int v12 = (const CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion *)*((void *)a2 + 3);
    if (!v12)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);
      int v12 = *(const CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion **)(CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo::default_instance_
                                                                                      + 24);
    }
    return CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion::MergeFrom(v11, v12);
  }
  return result;
}

void sub_18DFD8A9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo::~GalileoTimeInfo(CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo *this)
{
  *(void *)this = &unk_1EDD0C398;
  CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo::SharedDtor(this);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  uint64_t vars8;

  CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo::~GalileoTimeInfo(this);

  JUMPOUT(0x192FA6240);
}

void CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo::SharedDtor(CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo *this)
{
  CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);
  if ((CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo *)CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo::default_instance_ != this)
  {
    uint64_t v2 = *((void *)this + 1);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
    uint64_t v3 = *((void *)this + 2);
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
    uint64_t v4 = *((void *)this + 3);
    if (v4)
    {
      int v5 = *(void (**)(void))(*(void *)v4 + 8);
      v5();
    }
  }
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo::default_instance(CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo *this)
{
  return CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo::default_instance_;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 36) = a2;
  return this;
}

void CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo::New(CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo *this)
{
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo::Clear(uint64_t this)
{
  uint64_t v1 = this;
  LOBYTE(v2) = *(unsigned char *)(this + 40);
  if ((_BYTE)v2)
  {
    *(_DWORD *)(this + 32) = 0;
    if ((v2 & 2) != 0)
    {
      this = *(void *)(this + 8);
      if (this)
      {
        this = CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondInfo::Clear(this);
        int v2 = *(_DWORD *)(v1 + 40);
      }
    }
    if ((v2 & 4) != 0)
    {
      uint64_t v3 = *(void *)(v1 + 16);
      if (v3)
      {
        if (*(unsigned char *)(v3 + 36))
        {
          *(void *)(v3 + 8) = 0;
          *(void *)(v3 + 16) = 0;
          *(void *)(v3 + 24) = 0;
        }
        *(_DWORD *)(v3 + 36) = 0;
        int v2 = *(_DWORD *)(v1 + 40);
      }
    }
    if ((v2 & 8) != 0)
    {
      uint64_t v4 = *(void *)(v1 + 24);
      if (v4)
      {
        if (*(unsigned char *)(v4 + 36))
        {
          *(void *)(v4 + 8) = 0;
          *(void *)(v4 + 16) = 0;
          *(void *)(v4 + 24) = 0;
        }
        *(_DWORD *)(v4 + 36) = 0;
      }
    }
  }
  *(_DWORD *)(v1 + 40) = 0;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo::MergePartialFromCodedStream(CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  uint64_t v4 = (unsigned int *)((char *)this + 32);
  while (1)
  {
    int v5 = (char *)*((void *)a2 + 1);
    if ((unint64_t)v5 < *((void *)a2 + 2) && (*v5 & 0x80000000) == 0)
    {
      unint64_t TagFallback = *v5;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((void *)a2 + 1) = v5 + 1;
      if (!TagFallback) {
        return 1;
      }
      goto LABEL_7;
    }
    unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
    *((_DWORD *)a2 + 8) = TagFallback;
    if (!TagFallback) {
      return 1;
    }
LABEL_7:
    switch(TagFallback >> 3)
    {
      case 1u:
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_18;
        }
        int v9 = (char *)*((void *)a2 + 1);
        unint64_t v8 = *((void *)a2 + 2);
        if ((unint64_t)v9 >= v8 || *v9 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v4);
          if (!result) {
            return result;
          }
          uint64_t v10 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v8 = *((void *)a2 + 2);
        }
        else
        {
          unsigned int *v4 = *v9;
          uint64_t v10 = v9 + 1;
          *((void *)a2 + 1) = v10;
        }
        int v11 = *((_DWORD *)this + 10) | 1;
        *((_DWORD *)this + 10) = v11;
        if ((unint64_t)v10 < v8 && *v10 == 18)
        {
          *((void *)a2 + 1) = v10 + 1;
          goto LABEL_26;
        }
        continue;
      case 2u:
        int v7 = TagFallback & 7;
        if (v7 != 2) {
          goto LABEL_18;
        }
        int v11 = *((_DWORD *)this + 10);
LABEL_26:
        *((_DWORD *)this + 10) = v11 | 2;
        int v13 = (CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondInfo *)*((void *)this + 1);
        if (!v13) {
          operator new();
        }
        unsigned int v34 = 0;
        unint64_t v14 = (char *)*((void *)a2 + 1);
        if ((unint64_t)v14 >= *((void *)a2 + 2) || *v14 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v34))return 0; {
        }
          }
        else
        {
          unsigned int v34 = *v14;
          *((void *)a2 + 1) = v14 + 1;
        }
        int v15 = *((_DWORD *)a2 + 14);
        int v16 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v15 + 1;
        if (v15 >= v16) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondInfo::MergePartialFromCodedStream(v13, a2)|| !*((unsigned char *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        int v17 = *((_DWORD *)a2 + 14);
        BOOL v18 = __OFSUB__(v17, 1);
        int v19 = v17 - 1;
        if (v19 < 0 == v18) {
          *((_DWORD *)a2 + 14) = v19;
        }
        int v20 = (unsigned char *)*((void *)a2 + 1);
        if ((unint64_t)v20 >= *((void *)a2 + 2) || *v20 != 26) {
          continue;
        }
        *((void *)a2 + 1) = v20 + 1;
LABEL_40:
        *((_DWORD *)this + 10) |= 4u;
        int v21 = (CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion *)*((void *)this + 2);
        if (!v21) {
          operator new();
        }
        unsigned int v35 = 0;
        int v22 = (char *)*((void *)a2 + 1);
        if ((unint64_t)v22 >= *((void *)a2 + 2) || *v22 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v35))return 0; {
        }
          }
        else
        {
          unsigned int v35 = *v22;
          *((void *)a2 + 1) = v22 + 1;
        }
        int v23 = *((_DWORD *)a2 + 14);
        int v24 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v23 + 1;
        if (v23 >= v24) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion::MergePartialFromCodedStream(v21, a2)|| !*((unsigned char *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        int v25 = *((_DWORD *)a2 + 14);
        BOOL v18 = __OFSUB__(v25, 1);
        int v26 = v25 - 1;
        if (v26 < 0 == v18) {
          *((_DWORD *)a2 + 14) = v26;
        }
        int v27 = (unsigned char *)*((void *)a2 + 1);
        if ((unint64_t)v27 >= *((void *)a2 + 2) || *v27 != 34) {
          continue;
        }
        *((void *)a2 + 1) = v27 + 1;
LABEL_54:
        *((_DWORD *)this + 10) |= 8u;
        int v28 = (CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion *)*((void *)this + 3);
        if (!v28) {
          operator new();
        }
        unsigned int v36 = 0;
        int v29 = (char *)*((void *)a2 + 1);
        if ((unint64_t)v29 >= *((void *)a2 + 2) || *v29 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v36))return 0; {
        }
          }
        else
        {
          unsigned int v36 = *v29;
          *((void *)a2 + 1) = v29 + 1;
        }
        int v30 = *((_DWORD *)a2 + 14);
        int v31 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v30 + 1;
        if (v30 >= v31) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion::MergePartialFromCodedStream(v28, a2)|| !*((unsigned char *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        int v32 = *((_DWORD *)a2 + 14);
        BOOL v18 = __OFSUB__(v32, 1);
        int v33 = v32 - 1;
        if (v33 < 0 == v18) {
          *((_DWORD *)a2 + 14) = v33;
        }
        if (*((void *)a2 + 1) == *((void *)a2 + 2)
          && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
        {
          *((_DWORD *)a2 + 8) = 0;
          uint64_t result = 1;
          *((unsigned char *)a2 + 36) = 1;
          return result;
        }
        break;
      case 3u:
        int v7 = TagFallback & 7;
        if (v7 == 2) {
          goto LABEL_40;
        }
        goto LABEL_18;
      case 4u:
        int v7 = TagFallback & 7;
        if (v7 != 2) {
          goto LABEL_18;
        }
        goto LABEL_54;
      default:
        int v7 = TagFallback & 7;
LABEL_18:
        if (v7 == 4) {
          return 1;
        }
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0; {
        continue;
        }
    }
  }
}

unsigned int *CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo::SerializeWithCachedSizes(unsigned int *this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  int v5 = this;
  unsigned int v6 = this[10];
  if (v6)
  {
    this = (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, this[8], (uint64_t)a2, a4);
    unsigned int v6 = v5[10];
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t v7 = *((void *)v5 + 1);
  if (!v7)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)this);
    uint64_t v7 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo::default_instance_ + 8);
  }
  this = (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v7, a2, a4);
  unsigned int v6 = v5[10];
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      return this;
    }
    goto LABEL_13;
  }
LABEL_10:
  uint64_t v8 = *((void *)v5 + 2);
  if (!v8)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)this);
    uint64_t v8 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo::default_instance_ + 16);
  }
  this = (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v8, a2, a4);
  if ((v5[10] & 8) != 0)
  {
LABEL_13:
    uint64_t v9 = *((void *)v5 + 3);
    if (!v9)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)this);
      uint64_t v9 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo::default_instance_ + 24);
    }
    return (unsigned int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v9, a2, a4);
  }
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo::ByteSize(CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo *this)
{
  LOBYTE(v2) = *((unsigned char *)this + 40);
  if (!(_BYTE)v2)
  {
    uint64_t v3 = 0;
    goto LABEL_31;
  }
  if (*((unsigned char *)this + 40))
  {
    uint64_t v4 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 8);
    if (v4 >= 0x80)
    {
      uint64_t v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v4) + 1;
      int v2 = *((_DWORD *)this + 10);
      if ((v2 & 2) == 0) {
        goto LABEL_16;
      }
    }
    else
    {
      uint64_t v3 = 2;
      if ((v2 & 2) == 0) {
        goto LABEL_16;
      }
    }
  }
  else
  {
    uint64_t v3 = 0;
    if ((*((unsigned char *)this + 40) & 2) == 0) {
      goto LABEL_16;
    }
  }
  int v5 = (CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondInfo *)*((void *)this + 1);
  if (!v5)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(0);
    int v5 = *(CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondInfo **)(CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo::default_instance_
                                                                        + 8);
  }
  unsigned int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CoreNavigation::CLP::LogEntry::PrivateData::LeapSecondInfo::ByteSize(v5);
  int v7 = (int)v6;
  if (v6 >= 0x80) {
    int v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6);
  }
  else {
    int v8 = 1;
  }
  uint64_t v3 = (v3 + v7 + v8 + 1);
  int v2 = *((_DWORD *)this + 10);
LABEL_16:
  if ((v2 & 4) == 0)
  {
    if ((v2 & 8) == 0) {
      goto LABEL_31;
    }
    goto LABEL_25;
  }
  uint64_t v9 = (CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion *)*((void *)this + 2);
  if (!v9)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(0);
    uint64_t v9 = *(CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion **)(CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo::default_instance_
                                                                             + 16);
  }
  uint64_t v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion::ByteSize(v9);
  int v11 = (int)v10;
  if (v10 >= 0x80) {
    int v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v10);
  }
  else {
    int v12 = 1;
  }
  uint64_t v3 = (v3 + v11 + v12 + 1);
  if ((*((_DWORD *)this + 10) & 8) != 0)
  {
LABEL_25:
    int v13 = (CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion *)*((void *)this + 3);
    if (!v13)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(0);
      int v13 = *(CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion **)(CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo::default_instance_
                                                                                + 24);
    }
    unint64_t v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion::ByteSize(v13);
    int v15 = (int)v14;
    if (v14 >= 0x80) {
      int v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v14);
    }
    else {
      int v16 = 1;
    }
    uint64_t v3 = (v3 + v15 + v16 + 1);
  }
LABEL_31:
  *((_DWORD *)this + 9) = v3;
  return v3;
}

double CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo::CheckTypeAndMergeFrom(CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  return CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo::MergeFrom(this, lpsrc);
}

double CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo::CopyFrom(CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo *this, const CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo *a2)
{
  if (a2 != this)
  {
    (*(void (**)(CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo *))(*(void *)this + 32))(this);
    return CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo::MergeFrom(this, a2);
  }
  return result;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo::IsInitialized(CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo *this)
{
  return 1;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo::Swap(uint64_t this, CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo *a2)
{
  if (a2 != (CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo *)this)
  {
    int v2 = *(_DWORD *)(this + 32);
    *(_DWORD *)(this + 32) = *((_DWORD *)a2 + 8);
    *((_DWORD *)a2 + 8) = v2;
    uint64_t v3 = *(void *)(this + 8);
    *(void *)(this + 8) = *((void *)a2 + 1);
    *((void *)a2 + 1) = v3;
    uint64_t v4 = *(void *)(this + 16);
    *(void *)(this + 16) = *((void *)a2 + 2);
    *((void *)a2 + 2) = v4;
    uint64_t v5 = *(void *)(this + 24);
    *(void *)(this + 24) = *((void *)a2 + 3);
    *((void *)a2 + 3) = v5;
    LODWORD(v5) = *(_DWORD *)(this + 40);
    *(_DWORD *)(this + 40) = *((_DWORD *)a2 + 10);
    *((_DWORD *)a2 + 10) = v5;
    LODWORD(v5) = *(_DWORD *)(this + 36);
    *(_DWORD *)(this + 36) = *((_DWORD *)a2 + 9);
    *((_DWORD *)a2 + 9) = v5;
  }
  return this;
}

void *CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo::GetTypeName@<X0>(void *a1@<X8>)
{
  return sub_18DEDE7B0(a1, "CoreNavigation.CLP.LogEntry.PrivateData.GalileoTimeInfo");
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::NavicTimeInfo::SharedCtor(uint64_t this)
{
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

CoreNavigation::CLP::LogEntry::PrivateData::NavicTimeInfo *CoreNavigation::CLP::LogEntry::PrivateData::NavicTimeInfo::NavicTimeInfo(CoreNavigation::CLP::LogEntry::PrivateData::NavicTimeInfo *this, const CoreNavigation::CLP::LogEntry::PrivateData::NavicTimeInfo *a2)
{
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = &unk_1EDD0BB28;
  *((_DWORD *)this + 6) = 0;
  CoreNavigation::CLP::LogEntry::PrivateData::NavicTimeInfo::MergeFrom(this, a2);
  return this;
}

void sub_18DFD9638(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void CoreNavigation::CLP::LogEntry::PrivateData::NavicTimeInfo::MergeFrom(CoreNavigation::CLP::LogEntry::PrivateData::NavicTimeInfo *this, const CoreNavigation::CLP::LogEntry::PrivateData::NavicTimeInfo *a2)
{
  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v8);
  }
  LOBYTE(v4) = *((unsigned char *)a2 + 24);
  if ((_BYTE)v4)
  {
    if (*((unsigned char *)a2 + 24))
    {
      *((_DWORD *)this + 6) |= 1u;
      uint64_t v5 = (CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion *)*((void *)this + 1);
      if (!v5) {
        operator new();
      }
      unsigned int v6 = (const CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion *)*((void *)a2 + 1);
      if (!v6)
      {
        CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);
        unsigned int v6 = *(const CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion **)(CoreNavigation::CLP::LogEntry::PrivateData::NavicTimeInfo::default_instance_
                                                                                       + 8);
      }
      CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion::MergeFrom(v5, v6);
      int v4 = *((_DWORD *)a2 + 6);
    }
    if ((v4 & 2) != 0)
    {
      int v7 = *((_DWORD *)a2 + 4);
      *((_DWORD *)this + 6) |= 2u;
      *((_DWORD *)this + 4) = v7;
    }
  }
}

void sub_18DFD9768(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CoreNavigation::CLP::LogEntry::PrivateData::NavicTimeInfo::~NavicTimeInfo(CoreNavigation::CLP::LogEntry::PrivateData::NavicTimeInfo *this)
{
  *(void *)this = &unk_1EDD0BB28;
  CoreNavigation::CLP::LogEntry::PrivateData::NavicTimeInfo::SharedDtor(this);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  uint64_t vars8;

  CoreNavigation::CLP::LogEntry::PrivateData::NavicTimeInfo::~NavicTimeInfo(this);

  JUMPOUT(0x192FA6240);
}

void CoreNavigation::CLP::LogEntry::PrivateData::NavicTimeInfo::SharedDtor(CoreNavigation::CLP::LogEntry::PrivateData::NavicTimeInfo *this)
{
  CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);
  if ((CoreNavigation::CLP::LogEntry::PrivateData::NavicTimeInfo *)CoreNavigation::CLP::LogEntry::PrivateData::NavicTimeInfo::default_instance_ != this)
  {
    uint64_t v2 = *((void *)this + 1);
    if (v2)
    {
      uint64_t v3 = *(void (**)(void))(*(void *)v2 + 8);
      v3();
    }
  }
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::NavicTimeInfo::default_instance(CoreNavigation::CLP::LogEntry::PrivateData::NavicTimeInfo *this)
{
  return CoreNavigation::CLP::LogEntry::PrivateData::NavicTimeInfo::default_instance_;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::NavicTimeInfo::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 20) = a2;
  return this;
}

void CoreNavigation::CLP::LogEntry::PrivateData::NavicTimeInfo::New(CoreNavigation::CLP::LogEntry::PrivateData::NavicTimeInfo *this)
{
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::NavicTimeInfo::Clear(uint64_t this)
{
  if (*(unsigned char *)(this + 24))
  {
    if (*(unsigned char *)(this + 24))
    {
      uint64_t v1 = *(void *)(this + 8);
      if (v1)
      {
        if (*(unsigned char *)(v1 + 36))
        {
          *(void *)(v1 + 8) = 0;
          *(void *)(v1 + 16) = 0;
          *(void *)(v1 + 24) = 0;
        }
        *(_DWORD *)(v1 + 36) = 0;
      }
    }
    *(_DWORD *)(this + 16) = 0;
  }
  *(_DWORD *)(this + 24) = 0;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::NavicTimeInfo::MergePartialFromCodedStream(CoreNavigation::CLP::LogEntry::PrivateData::NavicTimeInfo *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  int v4 = (unsigned int *)((char *)this + 16);
  while (1)
  {
    while (1)
    {
      uint64_t v5 = (char *)*((void *)a2 + 1);
      if ((unint64_t)v5 >= *((void *)a2 + 2) || *v5 < 0)
      {
        unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
        *((_DWORD *)a2 + 8) = TagFallback;
        if (!TagFallback) {
          return 1;
        }
      }
      else
      {
        unint64_t TagFallback = *v5;
        *((_DWORD *)a2 + 8) = TagFallback;
        *((void *)a2 + 1) = v5 + 1;
        if (!TagFallback) {
          return 1;
        }
      }
      if (TagFallback >> 3 == 1) {
        break;
      }
      if (TagFallback >> 3 == 2)
      {
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) == 0)
        {
          uint64_t v9 = (char *)*((void *)a2 + 1);
          unint64_t v8 = *((void *)a2 + 2);
          goto LABEL_30;
        }
      }
      else
      {
        int v7 = TagFallback & 7;
      }
LABEL_18:
      if (v7 == 4) {
        return 1;
      }
      if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0; {
    }
      }
    int v7 = TagFallback & 7;
    if (v7 != 2) {
      goto LABEL_18;
    }
    *((_DWORD *)this + 6) |= 1u;
    uint64_t v10 = (CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion *)*((void *)this + 1);
    if (!v10) {
      operator new();
    }
    unsigned int v20 = 0;
    int v11 = (char *)*((void *)a2 + 1);
    if ((unint64_t)v11 >= *((void *)a2 + 2) || *v11 < 0)
    {
      if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v20)) {
        return 0;
      }
    }
    else
    {
      unsigned int v20 = *v11;
      *((void *)a2 + 1) = v11 + 1;
    }
    int v12 = *((_DWORD *)a2 + 14);
    int v13 = *((_DWORD *)a2 + 15);
    *((_DWORD *)a2 + 14) = v12 + 1;
    if (v12 >= v13) {
      return 0;
    }
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
    if (!CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion::MergePartialFromCodedStream(v10, a2)|| !*((unsigned char *)a2 + 36))
    {
      return 0;
    }
    wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
    int v14 = *((_DWORD *)a2 + 14);
    BOOL v15 = __OFSUB__(v14, 1);
    int v16 = v14 - 1;
    if (v16 < 0 == v15) {
      *((_DWORD *)a2 + 14) = v16;
    }
    int v17 = (unsigned char *)*((void *)a2 + 1);
    unint64_t v8 = *((void *)a2 + 2);
    if ((unint64_t)v17 < v8 && *v17 == 16)
    {
      uint64_t v9 = v17 + 1;
      *((void *)a2 + 1) = v9;
LABEL_30:
      if ((unint64_t)v9 >= v8 || *v9 < 0)
      {
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v4);
        if (!result) {
          return result;
        }
        BOOL v18 = (unsigned __int8 *)*((void *)a2 + 1);
        unint64_t v8 = *((void *)a2 + 2);
      }
      else
      {
        unsigned int *v4 = *v9;
        BOOL v18 = (unsigned __int8 *)(v9 + 1);
        *((void *)a2 + 1) = v18;
      }
      *((_DWORD *)this + 6) |= 2u;
      if (v18 == (unsigned __int8 *)v8 && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
      {
        *((_DWORD *)a2 + 8) = 0;
        uint64_t result = 1;
        *((unsigned char *)a2 + 36) = 1;
        return result;
      }
    }
  }
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::NavicTimeInfo::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  int v6 = *(_DWORD *)(this + 24);
  if ((v6 & 1) == 0)
  {
    if ((v6 & 2) == 0) {
      return this;
    }
    goto LABEL_7;
  }
  uint64_t v7 = *(void *)(this + 8);
  if (!v7)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)this);
    uint64_t v7 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::NavicTimeInfo::default_instance_ + 8);
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v7, a2, a4);
  if ((*(_DWORD *)(v5 + 24) & 2) != 0)
  {
LABEL_7:
    uint64_t v8 = *(unsigned int *)(v5 + 16);
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v8, (uint64_t)a2, a4);
  }
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::NavicTimeInfo::ByteSize(CoreNavigation::CLP::LogEntry::PrivateData::NavicTimeInfo *this)
{
  if (!*((unsigned char *)this + 24))
  {
    uint64_t v2 = 0;
    goto LABEL_16;
  }
  if ((*((unsigned char *)this + 24) & 1) == 0)
  {
    uint64_t v2 = 0;
    if ((*((unsigned char *)this + 24) & 2) == 0) {
      goto LABEL_16;
    }
    goto LABEL_12;
  }
  uint64_t v3 = (CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion *)*((void *)this + 1);
  if (!v3)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(0);
    uint64_t v3 = *(CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion **)(CoreNavigation::CLP::LogEntry::PrivateData::NavicTimeInfo::default_instance_
                                                                             + 8);
  }
  int v4 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CoreNavigation::CLP::LogEntry::PrivateData::SubSecondConversion::ByteSize(v3);
  int v5 = (int)v4;
  if (v4 >= 0x80) {
    int v6 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v4);
  }
  else {
    int v6 = 1;
  }
  uint64_t v2 = (v5 + v6 + 1);
  if ((*((_DWORD *)this + 6) & 2) != 0)
  {
LABEL_12:
    uint64_t v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 4);
    if (v7 >= 0x80) {
      int v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7) + 1;
    }
    else {
      int v8 = 2;
    }
    uint64_t v2 = (v8 + v2);
  }
LABEL_16:
  *((_DWORD *)this + 5) = v2;
  return v2;
}

void CoreNavigation::CLP::LogEntry::PrivateData::NavicTimeInfo::CheckTypeAndMergeFrom(CoreNavigation::CLP::LogEntry::PrivateData::NavicTimeInfo *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  CoreNavigation::CLP::LogEntry::PrivateData::NavicTimeInfo::MergeFrom(this, lpsrc);
}

void CoreNavigation::CLP::LogEntry::PrivateData::NavicTimeInfo::CopyFrom(CoreNavigation::CLP::LogEntry::PrivateData::NavicTimeInfo *this, const CoreNavigation::CLP::LogEntry::PrivateData::NavicTimeInfo *a2)
{
  if (a2 != this)
  {
    (*(void (**)(CoreNavigation::CLP::LogEntry::PrivateData::NavicTimeInfo *))(*(void *)this + 32))(this);
    CoreNavigation::CLP::LogEntry::PrivateData::NavicTimeInfo::MergeFrom(this, a2);
  }
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::NavicTimeInfo::IsInitialized(CoreNavigation::CLP::LogEntry::PrivateData::NavicTimeInfo *this)
{
  return 1;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::NavicTimeInfo::Swap(uint64_t this, CoreNavigation::CLP::LogEntry::PrivateData::NavicTimeInfo *a2)
{
  if (a2 != (CoreNavigation::CLP::LogEntry::PrivateData::NavicTimeInfo *)this)
  {
    uint64_t v2 = *(void *)(this + 8);
    *(void *)(this + 8) = *((void *)a2 + 1);
    *((void *)a2 + 1) = v2;
    LODWORD(v2) = *(_DWORD *)(this + 16);
    *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
    *((_DWORD *)a2 + 4) = v2;
    LODWORD(v2) = *(_DWORD *)(this + 24);
    *(_DWORD *)(this + 24) = *((_DWORD *)a2 + 6);
    *((_DWORD *)a2 + 6) = v2;
    LODWORD(v2) = *(_DWORD *)(this + 20);
    *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
    *((_DWORD *)a2 + 5) = v2;
  }
  return this;
}

void *CoreNavigation::CLP::LogEntry::PrivateData::NavicTimeInfo::GetTypeName@<X0>(void *a1@<X8>)
{
  return sub_18DEDE7B0(a1, "CoreNavigation.CLP.LogEntry.PrivateData.NavicTimeInfo");
}

double CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo::SharedCtor(CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo *this)
{
  double result = 0.0;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  return result;
}

CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo *CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo::TimeConversionInfo(CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo *this, const CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo *a2)
{
  *(void *)this = &unk_1EDD0D4F0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo::MergeFrom(this, a2);
  return this;
}

void sub_18DFD9ED8(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo::MergeFrom(CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo *this, const CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo *a2)
{
  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v15);
  }
  LOBYTE(v4) = *((unsigned char *)a2 + 52);
  if (!(_BYTE)v4) {
    return;
  }
  if (*((unsigned char *)a2 + 52))
  {
    *((_DWORD *)this + 13) |= 1u;
    int v5 = (CoreNavigation::CLP::LogEntry::PrivateData::GpsTimeInfo *)*((void *)this + 1);
    if (!v5) {
      operator new();
    }
    int v6 = (const CoreNavigation::CLP::LogEntry::PrivateData::GpsTimeInfo *)*((void *)a2 + 1);
    if (!v6)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);
      int v6 = *(const CoreNavigation::CLP::LogEntry::PrivateData::GpsTimeInfo **)(CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo::default_instance_
                                                                             + 8);
    }
    CoreNavigation::CLP::LogEntry::PrivateData::GpsTimeInfo::MergeFrom(v5, v6);
    int v4 = *((_DWORD *)a2 + 13);
    if ((v4 & 2) == 0)
    {
LABEL_6:
      if ((v4 & 4) == 0) {
        goto LABEL_7;
      }
LABEL_20:
      *((_DWORD *)this + 13) |= 4u;
      uint64_t v9 = (CoreNavigation::CLP::LogEntry::PrivateData::BeidouTimeInfo *)*((void *)this + 3);
      if (!v9) {
        operator new();
      }
      uint64_t v10 = (const CoreNavigation::CLP::LogEntry::PrivateData::BeidouTimeInfo *)*((void *)a2 + 3);
      if (!v10)
      {
        CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);
        uint64_t v10 = *(const CoreNavigation::CLP::LogEntry::PrivateData::BeidouTimeInfo **)(CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo::default_instance_
                                                                                   + 24);
      }
      CoreNavigation::CLP::LogEntry::PrivateData::BeidouTimeInfo::MergeFrom(v9, v10);
      int v4 = *((_DWORD *)a2 + 13);
      if ((v4 & 8) == 0)
      {
LABEL_8:
        if ((v4 & 0x10) == 0) {
          return;
        }
        goto LABEL_30;
      }
      goto LABEL_25;
    }
  }
  else if ((*((unsigned char *)a2 + 52) & 2) == 0)
  {
    goto LABEL_6;
  }
  *((_DWORD *)this + 13) |= 2u;
  uint64_t v7 = (CoreNavigation::CLP::LogEntry::PrivateData::GlonassTimeInfo *)*((void *)this + 2);
  if (!v7) {
    operator new();
  }
  int v8 = (const CoreNavigation::CLP::LogEntry::PrivateData::GlonassTimeInfo *)*((void *)a2 + 2);
  if (!v8)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);
    int v8 = *(const CoreNavigation::CLP::LogEntry::PrivateData::GlonassTimeInfo **)(CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo::default_instance_
                                                                               + 16);
  }
  CoreNavigation::CLP::LogEntry::PrivateData::GlonassTimeInfo::MergeFrom(v7, v8);
  int v4 = *((_DWORD *)a2 + 13);
  if ((v4 & 4) != 0) {
    goto LABEL_20;
  }
LABEL_7:
  if ((v4 & 8) == 0) {
    goto LABEL_8;
  }
LABEL_25:
  *((_DWORD *)this + 13) |= 8u;
  int v11 = (CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo *)*((void *)this + 4);
  if (!v11) {
    operator new();
  }
  int v12 = (const CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo *)*((void *)a2 + 4);
  if (!v12)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);
    int v12 = *(const CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo **)(CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo::default_instance_
                                                                                + 32);
  }
  CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo::MergeFrom(v11, v12);
  if ((*((_DWORD *)a2 + 13) & 0x10) != 0)
  {
LABEL_30:
    *((_DWORD *)this + 13) |= 0x10u;
    int v13 = (CoreNavigation::CLP::LogEntry::PrivateData::NavicTimeInfo *)*((void *)this + 5);
    if (!v13) {
      operator new();
    }
    int v14 = (const CoreNavigation::CLP::LogEntry::PrivateData::NavicTimeInfo *)*((void *)a2 + 5);
    if (!v14)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);
      int v14 = *(const CoreNavigation::CLP::LogEntry::PrivateData::NavicTimeInfo **)(CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo::default_instance_
                                                                                + 40);
    }
    CoreNavigation::CLP::LogEntry::PrivateData::NavicTimeInfo::MergeFrom(v13, v14);
  }
}

void sub_18DFDA218(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo::~TimeConversionInfo(CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo *this)
{
  *(void *)this = &unk_1EDD0D4F0;
  CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo::SharedDtor(this);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  uint64_t vars8;

  CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo::~TimeConversionInfo(this);

  JUMPOUT(0x192FA6240);
}

void CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo::SharedDtor(CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo *this)
{
  CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);
  if ((CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo *)CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo::default_instance_ != this)
  {
    uint64_t v2 = *((void *)this + 1);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
    uint64_t v3 = *((void *)this + 2);
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
    uint64_t v4 = *((void *)this + 3);
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
    uint64_t v5 = *((void *)this + 4);
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    }
    uint64_t v6 = *((void *)this + 5);
    if (v6)
    {
      uint64_t v7 = *(void (**)(void))(*(void *)v6 + 8);
      v7();
    }
  }
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo::default_instance(CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo *this)
{
  return CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo::default_instance_;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 48) = a2;
  return this;
}

void CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo::New(CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo *this)
{
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo::Clear(uint64_t this)
{
  uint64_t v1 = this;
  LOBYTE(v2) = *(unsigned char *)(this + 52);
  if ((_BYTE)v2)
  {
    if (*(unsigned char *)(this + 52))
    {
      this = *(void *)(this + 8);
      if (this)
      {
        this = CoreNavigation::CLP::LogEntry::PrivateData::GpsTimeInfo::Clear(this);
        int v2 = *(_DWORD *)(v1 + 52);
      }
    }
    if ((v2 & 2) != 0)
    {
      this = *(void *)(v1 + 16);
      if (this)
      {
        this = CoreNavigation::CLP::LogEntry::PrivateData::GlonassTimeInfo::Clear(this);
        int v2 = *(_DWORD *)(v1 + 52);
      }
    }
    if ((v2 & 4) != 0)
    {
      this = *(void *)(v1 + 24);
      if (this)
      {
        this = CoreNavigation::CLP::LogEntry::PrivateData::BeidouTimeInfo::Clear(this);
        int v2 = *(_DWORD *)(v1 + 52);
      }
    }
    if ((v2 & 8) != 0)
    {
      this = *(void *)(v1 + 32);
      if (this)
      {
        this = CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo::Clear(this);
        int v2 = *(_DWORD *)(v1 + 52);
      }
    }
    if ((v2 & 0x10) != 0)
    {
      this = *(void *)(v1 + 40);
      if (this) {
        this = CoreNavigation::CLP::LogEntry::PrivateData::NavicTimeInfo::Clear(this);
      }
    }
  }
  *(_DWORD *)(v1 + 52) = 0;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo::MergePartialFromCodedStream(CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  while (1)
  {
    uint64_t v4 = (char *)*((void *)a2 + 1);
    if ((unint64_t)v4 < *((void *)a2 + 2) && (*v4 & 0x80000000) == 0)
    {
      unint64_t TagFallback = *v4;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((void *)a2 + 1) = v4 + 1;
      if (!TagFallback) {
        return 1;
      }
      goto LABEL_6;
    }
    unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
    *((_DWORD *)a2 + 8) = TagFallback;
    if (!TagFallback) {
      return 1;
    }
LABEL_6:
    switch(TagFallback >> 3)
    {
      case 1u:
        int v6 = TagFallback & 7;
        if (v6 != 2) {
          goto LABEL_21;
        }
        *((_DWORD *)this + 13) |= 1u;
        uint64_t v7 = (CoreNavigation::CLP::LogEntry::PrivateData::GpsTimeInfo *)*((void *)this + 1);
        if (!v7) {
          operator new();
        }
        unsigned int v43 = 0;
        int v8 = (char *)*((void *)a2 + 1);
        if ((unint64_t)v8 >= *((void *)a2 + 2) || *v8 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v43))return 0; {
        }
          }
        else
        {
          unsigned int v43 = *v8;
          *((void *)a2 + 1) = v8 + 1;
        }
        int v9 = *((_DWORD *)a2 + 14);
        int v10 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v9 + 1;
        if (v9 >= v10) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CoreNavigation::CLP::LogEntry::PrivateData::GpsTimeInfo::MergePartialFromCodedStream(v7, a2)
          || !*((unsigned char *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        int v11 = *((_DWORD *)a2 + 14);
        BOOL v12 = __OFSUB__(v11, 1);
        int v13 = v11 - 1;
        if (v13 < 0 == v12) {
          *((_DWORD *)a2 + 14) = v13;
        }
        int v14 = (unsigned char *)*((void *)a2 + 1);
        if ((unint64_t)v14 >= *((void *)a2 + 2) || *v14 != 18) {
          continue;
        }
        *((void *)a2 + 1) = v14 + 1;
        goto LABEL_33;
      case 2u:
        int v6 = TagFallback & 7;
        if (v6 != 2) {
          goto LABEL_21;
        }
LABEL_33:
        *((_DWORD *)this + 13) |= 2u;
        BOOL v15 = (CoreNavigation::CLP::LogEntry::PrivateData::GlonassTimeInfo *)*((void *)this + 2);
        if (!v15) {
          operator new();
        }
        unsigned int v43 = 0;
        int v16 = (char *)*((void *)a2 + 1);
        if ((unint64_t)v16 >= *((void *)a2 + 2) || *v16 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v43))return 0; {
        }
          }
        else
        {
          unsigned int v43 = *v16;
          *((void *)a2 + 1) = v16 + 1;
        }
        int v17 = *((_DWORD *)a2 + 14);
        int v18 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v17 + 1;
        if (v17 >= v18) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CoreNavigation::CLP::LogEntry::PrivateData::GlonassTimeInfo::MergePartialFromCodedStream(v15, a2)|| !*((unsigned char *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        int v19 = *((_DWORD *)a2 + 14);
        BOOL v12 = __OFSUB__(v19, 1);
        int v20 = v19 - 1;
        if (v20 < 0 == v12) {
          *((_DWORD *)a2 + 14) = v20;
        }
        int v21 = (unsigned char *)*((void *)a2 + 1);
        if ((unint64_t)v21 >= *((void *)a2 + 2) || *v21 != 26) {
          continue;
        }
        *((void *)a2 + 1) = v21 + 1;
LABEL_47:
        *((_DWORD *)this + 13) |= 4u;
        int v22 = (CoreNavigation::CLP::LogEntry::PrivateData::BeidouTimeInfo *)*((void *)this + 3);
        if (!v22) {
          operator new();
        }
        unsigned int v43 = 0;
        int v23 = (char *)*((void *)a2 + 1);
        if ((unint64_t)v23 >= *((void *)a2 + 2) || *v23 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v43))return 0; {
        }
          }
        else
        {
          unsigned int v43 = *v23;
          *((void *)a2 + 1) = v23 + 1;
        }
        int v24 = *((_DWORD *)a2 + 14);
        int v25 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v24 + 1;
        if (v24 >= v25) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CoreNavigation::CLP::LogEntry::PrivateData::BeidouTimeInfo::MergePartialFromCodedStream(v22, a2)|| !*((unsigned char *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        int v26 = *((_DWORD *)a2 + 14);
        BOOL v12 = __OFSUB__(v26, 1);
        int v27 = v26 - 1;
        if (v27 < 0 == v12) {
          *((_DWORD *)a2 + 14) = v27;
        }
        int v28 = (unsigned char *)*((void *)a2 + 1);
        if ((unint64_t)v28 >= *((void *)a2 + 2) || *v28 != 34) {
          continue;
        }
        *((void *)a2 + 1) = v28 + 1;
LABEL_61:
        *((_DWORD *)this + 13) |= 8u;
        int v29 = (CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo *)*((void *)this + 4);
        if (!v29) {
          operator new();
        }
        unsigned int v43 = 0;
        int v30 = (char *)*((void *)a2 + 1);
        if ((unint64_t)v30 >= *((void *)a2 + 2) || *v30 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v43))return 0; {
        }
          }
        else
        {
          unsigned int v43 = *v30;
          *((void *)a2 + 1) = v30 + 1;
        }
        int v31 = *((_DWORD *)a2 + 14);
        int v32 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v31 + 1;
        if (v31 >= v32) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo::MergePartialFromCodedStream(v29, a2)|| !*((unsigned char *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        int v33 = *((_DWORD *)a2 + 14);
        BOOL v12 = __OFSUB__(v33, 1);
        int v34 = v33 - 1;
        if (v34 < 0 == v12) {
          *((_DWORD *)a2 + 14) = v34;
        }
        unsigned int v35 = (unsigned char *)*((void *)a2 + 1);
        if ((unint64_t)v35 >= *((void *)a2 + 2) || *v35 != 42) {
          continue;
        }
        *((void *)a2 + 1) = v35 + 1;
LABEL_75:
        *((_DWORD *)this + 13) |= 0x10u;
        unsigned int v36 = (CoreNavigation::CLP::LogEntry::PrivateData::NavicTimeInfo *)*((void *)this + 5);
        if (!v36) {
          operator new();
        }
        unsigned int v43 = 0;
        int v37 = (char *)*((void *)a2 + 1);
        if ((unint64_t)v37 >= *((void *)a2 + 2) || *v37 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v43))return 0; {
        }
          }
        else
        {
          unsigned int v43 = *v37;
          *((void *)a2 + 1) = v37 + 1;
        }
        int v38 = *((_DWORD *)a2 + 14);
        int v39 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v38 + 1;
        if (v38 >= v39) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CoreNavigation::CLP::LogEntry::PrivateData::NavicTimeInfo::MergePartialFromCodedStream(v36, a2)|| !*((unsigned char *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        int v40 = *((_DWORD *)a2 + 14);
        BOOL v12 = __OFSUB__(v40, 1);
        int v41 = v40 - 1;
        if (v41 < 0 == v12) {
          *((_DWORD *)a2 + 14) = v41;
        }
        if (*((void *)a2 + 1) == *((void *)a2 + 2)
          && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
        {
          *((_DWORD *)a2 + 8) = 0;
          uint64_t result = 1;
          *((unsigned char *)a2 + 36) = 1;
          return result;
        }
        break;
      case 3u:
        int v6 = TagFallback & 7;
        if (v6 == 2) {
          goto LABEL_47;
        }
        goto LABEL_21;
      case 4u:
        int v6 = TagFallback & 7;
        if (v6 == 2) {
          goto LABEL_61;
        }
        goto LABEL_21;
      case 5u:
        int v6 = TagFallback & 7;
        if (v6 != 2) {
          goto LABEL_21;
        }
        goto LABEL_75;
      default:
        int v6 = TagFallback & 7;
LABEL_21:
        if (v6 == 4) {
          return 1;
        }
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0; {
        continue;
        }
    }
  }
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  int v6 = *(_DWORD *)(this + 52);
  if (v6)
  {
    uint64_t v7 = *(void *)(this + 8);
    if (!v7)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)this);
      uint64_t v7 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo::default_instance_ + 8);
    }
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v7, a2, a4);
    int v6 = *(_DWORD *)(v5 + 52);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t v8 = *(void *)(v5 + 16);
  if (!v8)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)this);
    uint64_t v8 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo::default_instance_ + 16);
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v8, a2, a4);
  int v6 = *(_DWORD *)(v5 + 52);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_16;
  }
LABEL_13:
  uint64_t v9 = *(void *)(v5 + 24);
  if (!v9)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)this);
    uint64_t v9 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo::default_instance_ + 24);
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v9, a2, a4);
  int v6 = *(_DWORD *)(v5 + 52);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      return this;
    }
    goto LABEL_19;
  }
LABEL_16:
  uint64_t v10 = *(void *)(v5 + 32);
  if (!v10)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)this);
    uint64_t v10 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo::default_instance_ + 32);
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v10, a2, a4);
  if ((*(_DWORD *)(v5 + 52) & 0x10) != 0)
  {
LABEL_19:
    uint64_t v11 = *(void *)(v5 + 40);
    if (!v11)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)this);
      uint64_t v11 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo::default_instance_ + 40);
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, v11, a2, a4);
  }
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo::ByteSize(CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo *this)
{
  LOBYTE(v2) = *((unsigned char *)this + 52);
  if (!(_BYTE)v2)
  {
    uint64_t v3 = 0;
    goto LABEL_40;
  }
  if ((*((unsigned char *)this + 52) & 1) == 0)
  {
    uint64_t v3 = 0;
    if ((*((unsigned char *)this + 52) & 2) == 0) {
      goto LABEL_18;
    }
    goto LABEL_12;
  }
  uint64_t v4 = (CoreNavigation::CLP::LogEntry::PrivateData::GpsTimeInfo *)*((void *)this + 1);
  if (!v4)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(0);
    uint64_t v4 = *(CoreNavigation::CLP::LogEntry::PrivateData::GpsTimeInfo **)(CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo::default_instance_
                                                                     + 8);
  }
  uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CoreNavigation::CLP::LogEntry::PrivateData::GpsTimeInfo::ByteSize(v4);
  int v6 = (int)v5;
  if (v5 >= 0x80) {
    int v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5);
  }
  else {
    int v7 = 1;
  }
  uint64_t v3 = (v6 + v7 + 1);
  int v2 = *((_DWORD *)this + 13);
  if ((v2 & 2) != 0)
  {
LABEL_12:
    uint64_t v8 = (CoreNavigation::CLP::LogEntry::PrivateData::GlonassTimeInfo *)*((void *)this + 2);
    if (!v8)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(0);
      uint64_t v8 = *(CoreNavigation::CLP::LogEntry::PrivateData::GlonassTimeInfo **)(CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo::default_instance_
                                                                           + 16);
    }
    uint64_t v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CoreNavigation::CLP::LogEntry::PrivateData::GlonassTimeInfo::ByteSize(v8);
    int v10 = (int)v9;
    if (v9 >= 0x80) {
      int v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9);
    }
    else {
      int v11 = 1;
    }
    uint64_t v3 = (v3 + v10 + v11 + 1);
    int v2 = *((_DWORD *)this + 13);
  }
LABEL_18:
  if ((v2 & 4) != 0)
  {
    BOOL v12 = (CoreNavigation::CLP::LogEntry::PrivateData::BeidouTimeInfo *)*((void *)this + 3);
    if (!v12)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(0);
      BOOL v12 = *(CoreNavigation::CLP::LogEntry::PrivateData::BeidouTimeInfo **)(CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo::default_instance_
                                                                           + 24);
    }
    int v13 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CoreNavigation::CLP::LogEntry::PrivateData::BeidouTimeInfo::ByteSize(v12);
    int v14 = (int)v13;
    if (v13 >= 0x80) {
      int v15 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v13);
    }
    else {
      int v15 = 1;
    }
    uint64_t v3 = (v3 + v14 + v15 + 1);
    int v2 = *((_DWORD *)this + 13);
    if ((v2 & 8) == 0)
    {
LABEL_20:
      if ((v2 & 0x10) == 0) {
        goto LABEL_40;
      }
      goto LABEL_34;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_20;
  }
  int v16 = (CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo *)*((void *)this + 4);
  if (!v16)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(0);
    int v16 = *(CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo **)(CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo::default_instance_
                                                                          + 32);
  }
  int v17 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CoreNavigation::CLP::LogEntry::PrivateData::GalileoTimeInfo::ByteSize(v16);
  int v18 = (int)v17;
  if (v17 >= 0x80) {
    int v19 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v17);
  }
  else {
    int v19 = 1;
  }
  uint64_t v3 = (v3 + v18 + v19 + 1);
  if ((*((_DWORD *)this + 13) & 0x10) != 0)
  {
LABEL_34:
    int v20 = (CoreNavigation::CLP::LogEntry::PrivateData::NavicTimeInfo *)*((void *)this + 5);
    if (!v20)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(0);
      int v20 = *(CoreNavigation::CLP::LogEntry::PrivateData::NavicTimeInfo **)(CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo::default_instance_
                                                                          + 40);
    }
    int v21 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CoreNavigation::CLP::LogEntry::PrivateData::NavicTimeInfo::ByteSize(v20);
    int v22 = (int)v21;
    if (v21 >= 0x80) {
      int v23 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v21);
    }
    else {
      int v23 = 1;
    }
    uint64_t v3 = (v3 + v22 + v23 + 1);
  }
LABEL_40:
  *((_DWORD *)this + 12) = v3;
  return v3;
}

void CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo::CheckTypeAndMergeFrom(CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo::MergeFrom(this, lpsrc);
}

void CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo::CopyFrom(CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo *this, const CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo *a2)
{
  if (a2 != this)
  {
    (*(void (**)(CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo *))(*(void *)this + 32))(this);
    CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo::MergeFrom(this, a2);
  }
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo::IsInitialized(CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo *this)
{
  return 1;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo::Swap(uint64_t this, CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo *a2)
{
  if (a2 != (CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo *)this)
  {
    uint64_t v2 = *(void *)(this + 8);
    *(void *)(this + 8) = *((void *)a2 + 1);
    *((void *)a2 + 1) = v2;
    uint64_t v3 = *(void *)(this + 16);
    *(void *)(this + 16) = *((void *)a2 + 2);
    *((void *)a2 + 2) = v3;
    uint64_t v4 = *(void *)(this + 24);
    *(void *)(this + 24) = *((void *)a2 + 3);
    *((void *)a2 + 3) = v4;
    uint64_t v5 = *(void *)(this + 32);
    *(void *)(this + 32) = *((void *)a2 + 4);
    *((void *)a2 + 4) = v5;
    uint64_t v6 = *(void *)(this + 40);
    *(void *)(this + 40) = *((void *)a2 + 5);
    *((void *)a2 + 5) = v6;
    LODWORD(v6) = *(_DWORD *)(this + 52);
    *(_DWORD *)(this + 52) = *((_DWORD *)a2 + 13);
    *((_DWORD *)a2 + 13) = v6;
    LODWORD(v6) = *(_DWORD *)(this + 48);
    *(_DWORD *)(this + 48) = *((_DWORD *)a2 + 12);
    *((_DWORD *)a2 + 12) = v6;
  }
  return this;
}

void *CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo::GetTypeName@<X0>(void *a1@<X8>)
{
  return sub_18DEDE7B0(a1, "CoreNavigation.CLP.LogEntry.PrivateData.TimeConversionInfo");
}

double CoreNavigation::CLP::LogEntry::PrivateData::KlobucharModelParameters::SharedCtor(CoreNavigation::CLP::LogEntry::PrivateData::KlobucharModelParameters *this)
{
  double result = 0.0;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  return result;
}

CoreNavigation::CLP::LogEntry::PrivateData::KlobucharModelParameters *CoreNavigation::CLP::LogEntry::PrivateData::KlobucharModelParameters::KlobucharModelParameters(CoreNavigation::CLP::LogEntry::PrivateData::KlobucharModelParameters *this, const CoreNavigation::CLP::LogEntry::PrivateData::KlobucharModelParameters *a2)
{
  *(void *)this = &unk_1EDD0DFB8;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  CoreNavigation::CLP::LogEntry::PrivateData::KlobucharModelParameters::MergeFrom(this, a2);
  return this;
}

void sub_18DFDB0C4(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

float CoreNavigation::CLP::LogEntry::PrivateData::KlobucharModelParameters::MergeFrom(CoreNavigation::CLP::LogEntry::PrivateData::KlobucharModelParameters *this, const CoreNavigation::CLP::LogEntry::PrivateData::KlobucharModelParameters *a2)
{
  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v7);
  }
  int v5 = *((_DWORD *)a2 + 13);
  if (!(_BYTE)v5) {
    goto LABEL_13;
  }
  if (v5)
  {
    uint64_t v6 = *((void *)a2 + 1);
    *((_DWORD *)this + 13) |= 1u;
    *((void *)this + 1) = v6;
    int v5 = *((_DWORD *)a2 + 13);
    if ((v5 & 2) == 0)
    {
LABEL_6:
      if ((v5 & 4) == 0) {
        goto LABEL_7;
      }
      goto LABEL_18;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_6;
  }
  float result = *((float *)a2 + 4);
  *((_DWORD *)this + 13) |= 2u;
  *((float *)this + 4) = result;
  int v5 = *((_DWORD *)a2 + 13);
  if ((v5 & 4) == 0)
  {
LABEL_7:
    if ((v5 & 8) == 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }
LABEL_18:
  float result = *((float *)a2 + 5);
  *((_DWORD *)this + 13) |= 4u;
  *((float *)this + 5) = result;
  int v5 = *((_DWORD *)a2 + 13);
  if ((v5 & 8) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }
LABEL_19:
  float result = *((float *)a2 + 6);
  *((_DWORD *)this + 13) |= 8u;
  *((float *)this + 6) = result;
  int v5 = *((_DWORD *)a2 + 13);
  if ((v5 & 0x10) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0) {
      goto LABEL_10;
    }
LABEL_21:
    float result = *((float *)a2 + 8);
    *((_DWORD *)this + 13) |= 0x20u;
    *((float *)this + 8) = result;
    int v5 = *((_DWORD *)a2 + 13);
    if ((v5 & 0x40) == 0)
    {
LABEL_11:
      if ((v5 & 0x80) == 0) {
        goto LABEL_13;
      }
      goto LABEL_12;
    }
    goto LABEL_22;
  }
LABEL_20:
  float result = *((float *)a2 + 7);
  *((_DWORD *)this + 13) |= 0x10u;
  *((float *)this + 7) = result;
  int v5 = *((_DWORD *)a2 + 13);
  if ((v5 & 0x20) != 0) {
    goto LABEL_21;
  }
LABEL_10:
  if ((v5 & 0x40) == 0) {
    goto LABEL_11;
  }
LABEL_22:
  float result = *((float *)a2 + 9);
  *((_DWORD *)this + 13) |= 0x40u;
  *((float *)this + 9) = result;
  int v5 = *((_DWORD *)a2 + 13);
  if ((v5 & 0x80) != 0)
  {
LABEL_12:
    float result = *((float *)a2 + 10);
    *((_DWORD *)this + 13) |= 0x80u;
    *((float *)this + 10) = result;
    int v5 = *((_DWORD *)a2 + 13);
  }
LABEL_13:
  if ((v5 & 0x100) != 0)
  {
    float result = *((float *)a2 + 11);
    *((_DWORD *)this + 13) |= 0x100u;
    *((float *)this + 11) = result;
  }
  return result;
}

void sub_18DFDB26C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CoreNavigation::CLP::LogEntry::PrivateData::KlobucharModelParameters::~KlobucharModelParameters(CoreNavigation::CLP::LogEntry::PrivateData::KlobucharModelParameters *this)
{
  *(void *)this = &unk_1EDD0DFB8;
  CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  uint64_t vars8;

  CoreNavigation::CLP::LogEntry::PrivateData::KlobucharModelParameters::~KlobucharModelParameters(this);

  JUMPOUT(0x192FA6240);
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::KlobucharModelParameters::default_instance(CoreNavigation::CLP::LogEntry::PrivateData::KlobucharModelParameters *this)
{
  return CoreNavigation::CLP::LogEntry::PrivateData::KlobucharModelParameters::default_instance_;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::KlobucharModelParameters::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 48) = a2;
  return this;
}

void CoreNavigation::CLP::LogEntry::PrivateData::KlobucharModelParameters::New(CoreNavigation::CLP::LogEntry::PrivateData::KlobucharModelParameters *this)
{
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::KlobucharModelParameters::Clear(uint64_t this)
{
  int v1 = *(_DWORD *)(this + 52);
  if ((_BYTE)v1)
  {
    *(_DWORD *)(this + 40) = 0;
    *(_OWORD *)(this + 24) = 0u;
    *(_OWORD *)(this + 8) = 0u;
  }
  if ((v1 & 0xFF00) != 0) {
    *(_DWORD *)(this + 44) = 0;
  }
  *(_DWORD *)(this + 52) = 0;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::KlobucharModelParameters::MergePartialFromCodedStream(CoreNavigation::CLP::LogEntry::PrivateData::KlobucharModelParameters *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  uint64_t v4 = (unint64_t *)((char *)this + 8);
  while (2)
  {
    int v5 = (char *)*((void *)a2 + 1);
    if ((unint64_t)v5 >= *((void *)a2 + 2) || *v5 < 0)
    {
      unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      if (!TagFallback) {
        return 1;
      }
    }
    else
    {
      unint64_t TagFallback = *v5;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((void *)a2 + 1) = v5 + 1;
      if (!TagFallback) {
        return 1;
      }
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_28;
        }
        uint64_t v9 = (char *)*((void *)a2 + 1);
        unint64_t v8 = *((void *)a2 + 2);
        if ((unint64_t)v9 >= v8 || *v9 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(a2, v4);
          if (!result) {
            return result;
          }
          int v10 = (unsigned char *)*((void *)a2 + 1);
          unint64_t v8 = *((void *)a2 + 2);
        }
        else
        {
          unint64_t *v4 = *v9;
          int v10 = v9 + 1;
          *((void *)a2 + 1) = v10;
        }
        *((_DWORD *)this + 13) |= 1u;
        if ((unint64_t)v10 < v8 && *v10 == 21)
        {
          *((void *)a2 + 1) = v10 + 1;
          goto LABEL_36;
        }
        continue;
      case 2u:
        int v7 = TagFallback & 7;
        if (v7 != 5) {
          goto LABEL_28;
        }
LABEL_36:
        unsigned int v19 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(a2, &v19) & 1) == 0) {
          return 0;
        }
        *((_DWORD *)this + 4) = v19;
        *((_DWORD *)this + 13) |= 2u;
        BOOL v12 = (unsigned char *)*((void *)a2 + 1);
        if ((unint64_t)v12 >= *((void *)a2 + 2) || *v12 != 29) {
          continue;
        }
        *((void *)a2 + 1) = v12 + 1;
LABEL_40:
        unsigned int v19 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(a2, &v19) & 1) == 0) {
          return 0;
        }
        *((_DWORD *)this + 5) = v19;
        *((_DWORD *)this + 13) |= 4u;
        int v13 = (unsigned char *)*((void *)a2 + 1);
        if ((unint64_t)v13 >= *((void *)a2 + 2) || *v13 != 37) {
          continue;
        }
        *((void *)a2 + 1) = v13 + 1;
LABEL_44:
        unsigned int v19 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(a2, &v19) & 1) == 0) {
          return 0;
        }
        *((_DWORD *)this + 6) = v19;
        *((_DWORD *)this + 13) |= 8u;
        int v14 = (unsigned char *)*((void *)a2 + 1);
        if ((unint64_t)v14 >= *((void *)a2 + 2) || *v14 != 45) {
          continue;
        }
        *((void *)a2 + 1) = v14 + 1;
LABEL_48:
        unsigned int v19 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(a2, &v19) & 1) == 0) {
          return 0;
        }
        *((_DWORD *)this + 7) = v19;
        *((_DWORD *)this + 13) |= 0x10u;
        int v15 = (unsigned char *)*((void *)a2 + 1);
        if ((unint64_t)v15 >= *((void *)a2 + 2) || *v15 != 53) {
          continue;
        }
        *((void *)a2 + 1) = v15 + 1;
LABEL_52:
        unsigned int v19 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(a2, &v19) & 1) == 0) {
          return 0;
        }
        *((_DWORD *)this + 8) = v19;
        *((_DWORD *)this + 13) |= 0x20u;
        int v16 = (unsigned char *)*((void *)a2 + 1);
        if ((unint64_t)v16 >= *((void *)a2 + 2) || *v16 != 61) {
          continue;
        }
        *((void *)a2 + 1) = v16 + 1;
LABEL_56:
        unsigned int v19 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(a2, &v19) & 1) == 0) {
          return 0;
        }
        *((_DWORD *)this + 9) = v19;
        *((_DWORD *)this + 13) |= 0x40u;
        int v17 = (unsigned char *)*((void *)a2 + 1);
        if ((unint64_t)v17 >= *((void *)a2 + 2) || *v17 != 69) {
          continue;
        }
        *((void *)a2 + 1) = v17 + 1;
LABEL_60:
        unsigned int v19 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(a2, &v19) & 1) == 0) {
          return 0;
        }
        *((_DWORD *)this + 10) = v19;
        *((_DWORD *)this + 13) |= 0x80u;
        int v18 = (unsigned char *)*((void *)a2 + 1);
        if ((unint64_t)v18 >= *((void *)a2 + 2) || *v18 != 77) {
          continue;
        }
        *((void *)a2 + 1) = v18 + 1;
LABEL_64:
        unsigned int v19 = 0;
        if (wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(a2, &v19))
        {
          *((_DWORD *)this + 11) = v19;
          *((_DWORD *)this + 13) |= 0x100u;
          if (*((void *)a2 + 1) == *((void *)a2 + 2)
            && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
          {
            *((_DWORD *)a2 + 8) = 0;
            uint64_t result = 1;
            *((unsigned char *)a2 + 36) = 1;
            return result;
          }
          continue;
        }
        return 0;
      case 3u:
        int v7 = TagFallback & 7;
        if (v7 == 5) {
          goto LABEL_40;
        }
        goto LABEL_28;
      case 4u:
        int v7 = TagFallback & 7;
        if (v7 == 5) {
          goto LABEL_44;
        }
        goto LABEL_28;
      case 5u:
        int v7 = TagFallback & 7;
        if (v7 == 5) {
          goto LABEL_48;
        }
        goto LABEL_28;
      case 6u:
        int v7 = TagFallback & 7;
        if (v7 == 5) {
          goto LABEL_52;
        }
        goto LABEL_28;
      case 7u:
        int v7 = TagFallback & 7;
        if (v7 == 5) {
          goto LABEL_56;
        }
        goto LABEL_28;
      case 8u:
        int v7 = TagFallback & 7;
        if (v7 == 5) {
          goto LABEL_60;
        }
        goto LABEL_28;
      case 9u:
        int v7 = TagFallback & 7;
        if (v7 != 5) {
          goto LABEL_28;
        }
        goto LABEL_64;
      default:
        int v7 = TagFallback & 7;
LABEL_28:
        if (v7 == 4) {
          return 1;
        }
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0; {
        continue;
        }
    }
  }
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::KlobucharModelParameters::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  int v6 = *(_DWORD *)(this + 52);
  if (v6)
  {
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(void *)(this + 8), (uint64_t)a2, a4);
    int v6 = *(_DWORD *)(v5 + 52);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, (uint64_t)a2, *(float *)(v5 + 16), a3);
  int v6 = *(_DWORD *)(v5 + 52);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }
LABEL_13:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, (uint64_t)a2, *(float *)(v5 + 20), a3);
  int v6 = *(_DWORD *)(v5 + 52);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }
LABEL_14:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, (uint64_t)a2, *(float *)(v5 + 24), a3);
  int v6 = *(_DWORD *)(v5 + 52);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_16;
  }
LABEL_15:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, (uint64_t)a2, *(float *)(v5 + 28), a3);
  int v6 = *(_DWORD *)(v5 + 52);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_17;
  }
LABEL_16:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, (uint64_t)a2, *(float *)(v5 + 32), a3);
  int v6 = *(_DWORD *)(v5 + 52);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      goto LABEL_9;
    }
LABEL_18:
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, (uint64_t)a2, *(float *)(v5 + 40), a3);
    if ((*(_DWORD *)(v5 + 52) & 0x100) == 0) {
      return this;
    }
    goto LABEL_19;
  }
LABEL_17:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, (uint64_t)a2, *(float *)(v5 + 36), a3);
  int v6 = *(_DWORD *)(v5 + 52);
  if ((v6 & 0x80) != 0) {
    goto LABEL_18;
  }
LABEL_9:
  if ((v6 & 0x100) == 0) {
    return this;
  }
LABEL_19:
  float v7 = *(float *)(v5 + 44);

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9, (uint64_t)a2, v7, a3);
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::KlobucharModelParameters::ByteSize(CoreNavigation::CLP::LogEntry::PrivateData::KlobucharModelParameters *this)
{
  int v2 = *((_DWORD *)this + 13);
  if ((_BYTE)v2)
  {
    if (v2)
    {
      unsigned int v3 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*((wireless_diagnostics::google::protobuf::io::CodedOutputStream **)this
                                                                                       + 1))
         + 1;
      int v2 = *((_DWORD *)this + 13);
    }
    else
    {
      unsigned int v3 = 0;
    }
    if ((v2 & 2) != 0) {
      v3 += 5;
    }
    if ((v2 & 4) != 0) {
      v3 += 5;
    }
    if ((v2 & 8) != 0) {
      v3 += 5;
    }
    if ((v2 & 0x10) != 0) {
      v3 += 5;
    }
    if ((v2 & 0x20) != 0) {
      v3 += 5;
    }
    if ((v2 & 0x40) != 0) {
      v3 += 5;
    }
    if ((v2 & 0x80) != 0) {
      v3 += 5;
    }
  }
  else
  {
    unsigned int v3 = 0;
  }
  if ((v2 & 0x100) != 0) {
    uint64_t result = v3 + 5;
  }
  else {
    uint64_t result = v3;
  }
  *((_DWORD *)this + 12) = result;
  return result;
}

float CoreNavigation::CLP::LogEntry::PrivateData::KlobucharModelParameters::CheckTypeAndMergeFrom(CoreNavigation::CLP::LogEntry::PrivateData::KlobucharModelParameters *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  return CoreNavigation::CLP::LogEntry::PrivateData::KlobucharModelParameters::MergeFrom(this, lpsrc);
}

float CoreNavigation::CLP::LogEntry::PrivateData::KlobucharModelParameters::CopyFrom(CoreNavigation::CLP::LogEntry::PrivateData::KlobucharModelParameters *this, const CoreNavigation::CLP::LogEntry::PrivateData::KlobucharModelParameters *a2)
{
  if (a2 != this)
  {
    (*(void (**)(CoreNavigation::CLP::LogEntry::PrivateData::KlobucharModelParameters *))(*(void *)this + 32))(this);
    return CoreNavigation::CLP::LogEntry::PrivateData::KlobucharModelParameters::MergeFrom(this, a2);
  }
  return result;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::KlobucharModelParameters::IsInitialized(CoreNavigation::CLP::LogEntry::PrivateData::KlobucharModelParameters *this)
{
  return 1;
}

float CoreNavigation::CLP::LogEntry::PrivateData::KlobucharModelParameters::Swap(CoreNavigation::CLP::LogEntry::PrivateData::KlobucharModelParameters *this, CoreNavigation::CLP::LogEntry::PrivateData::KlobucharModelParameters *a2)
{
  if (a2 != this)
  {
    uint64_t v2 = *((void *)this + 1);
    *((void *)this + 1) = *((void *)a2 + 1);
    *((void *)a2 + 1) = v2;
    int v3 = *((_DWORD *)this + 4);
    *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
    *((_DWORD *)a2 + 4) = v3;
    int v4 = *((_DWORD *)this + 5);
    *((_DWORD *)this + 5) = *((_DWORD *)a2 + 5);
    *((_DWORD *)a2 + 5) = v4;
    int v5 = *((_DWORD *)this + 6);
    *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
    *((_DWORD *)a2 + 6) = v5;
    int v6 = *((_DWORD *)this + 7);
    *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7);
    *((_DWORD *)a2 + 7) = v6;
    int v7 = *((_DWORD *)this + 8);
    *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
    *((_DWORD *)a2 + 8) = v7;
    int v8 = *((_DWORD *)this + 9);
    *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
    *((_DWORD *)a2 + 9) = v8;
    int v9 = *((_DWORD *)this + 10);
    *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
    *((_DWORD *)a2 + 10) = v9;
    float result = *((float *)this + 11);
    *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
    *((float *)a2 + 11) = result;
    LODWORD(v2) = *((_DWORD *)this + 13);
    *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
    *((_DWORD *)a2 + 13) = v2;
    LODWORD(v2) = *((_DWORD *)this + 12);
    *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
    *((_DWORD *)a2 + 12) = v2;
  }
  return result;
}

void *CoreNavigation::CLP::LogEntry::PrivateData::KlobucharModelParameters::GetTypeName@<X0>(void *a1@<X8>)
{
  return sub_18DEDE7B0(a1, "CoreNavigation.CLP.LogEntry.PrivateData.KlobucharModelParameters");
}

double CoreNavigation::CLP::LogEntry::PrivateData::SfcfXyz::SharedCtor(CoreNavigation::CLP::LogEntry::PrivateData::SfcfXyz *this)
{
  double result = 0.0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  return result;
}

CoreNavigation::CLP::LogEntry::PrivateData::SfcfXyz *CoreNavigation::CLP::LogEntry::PrivateData::SfcfXyz::SfcfXyz(CoreNavigation::CLP::LogEntry::PrivateData::SfcfXyz *this, const CoreNavigation::CLP::LogEntry::PrivateData::SfcfXyz *a2)
{
  *(void *)this = &unk_1EDD0EEB8;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  CoreNavigation::CLP::LogEntry::PrivateData::SfcfXyz::MergeFrom(this, a2);
  return this;
}

void sub_18DFDBC5C(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

double CoreNavigation::CLP::LogEntry::PrivateData::SfcfXyz::MergeFrom(CoreNavigation::CLP::LogEntry::PrivateData::SfcfXyz *this, const CoreNavigation::CLP::LogEntry::PrivateData::SfcfXyz *a2)
{
  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v6);
  }
  LOBYTE(v5) = *((unsigned char *)a2 + 36);
  if ((_BYTE)v5)
  {
    if (*((unsigned char *)a2 + 36))
    {
      double result = *((double *)a2 + 1);
      *((_DWORD *)this + 9) |= 1u;
      *((double *)this + 1) = result;
      int v5 = *((_DWORD *)a2 + 9);
      if ((v5 & 2) == 0)
      {
LABEL_6:
        if ((v5 & 4) == 0) {
          return result;
        }
        goto LABEL_7;
      }
    }
    else if ((*((unsigned char *)a2 + 36) & 2) == 0)
    {
      goto LABEL_6;
    }
    double result = *((double *)a2 + 2);
    *((_DWORD *)this + 9) |= 2u;
    *((double *)this + 2) = result;
    if ((*((_DWORD *)a2 + 9) & 4) == 0) {
      return result;
    }
LABEL_7:
    double result = *((double *)a2 + 3);
    *((_DWORD *)this + 9) |= 4u;
    *((double *)this + 3) = result;
  }
  return result;
}

void sub_18DFDBD44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CoreNavigation::CLP::LogEntry::PrivateData::SfcfXyz::~SfcfXyz(CoreNavigation::CLP::LogEntry::PrivateData::SfcfXyz *this)
{
  *(void *)this = &unk_1EDD0EEB8;
  CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  uint64_t vars8;

  CoreNavigation::CLP::LogEntry::PrivateData::SfcfXyz::~SfcfXyz(this);

  JUMPOUT(0x192FA6240);
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::SfcfXyz::default_instance(CoreNavigation::CLP::LogEntry::PrivateData::SfcfXyz *this)
{
  return CoreNavigation::CLP::LogEntry::PrivateData::SfcfXyz::default_instance_;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::SfcfXyz::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 32) = a2;
  return this;
}

void CoreNavigation::CLP::LogEntry::PrivateData::SfcfXyz::New(CoreNavigation::CLP::LogEntry::PrivateData::SfcfXyz *this)
{
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::SfcfXyz::Clear(uint64_t this)
{
  if (*(unsigned char *)(this + 36))
  {
    *(void *)(this + 8) = 0;
    *(void *)(this + 16) = 0;
    *(void *)(this + 24) = 0;
  }
  *(_DWORD *)(this + 36) = 0;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::SfcfXyz::MergePartialFromCodedStream(CoreNavigation::CLP::LogEntry::PrivateData::SfcfXyz *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  do
  {
    while (1)
    {
      while (1)
      {
        int v4 = (char *)*((void *)a2 + 1);
        if ((unint64_t)v4 >= *((void *)a2 + 2) || *v4 < 0)
        {
          unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
          *((_DWORD *)a2 + 8) = TagFallback;
          if (!TagFallback) {
            return 1;
          }
        }
        else
        {
          unint64_t TagFallback = *v4;
          *((_DWORD *)a2 + 8) = TagFallback;
          *((void *)a2 + 1) = v4 + 1;
          if (!TagFallback) {
            return 1;
          }
        }
        unsigned int v6 = TagFallback >> 3;
        if (TagFallback >> 3 != 1) {
          break;
        }
        int v7 = TagFallback & 7;
        if (v7 != 1) {
          goto LABEL_27;
        }
        unint64_t v11 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, &v11) & 1) == 0) {
          return 0;
        }
        *((void *)this + 1) = v11;
        *((_DWORD *)this + 9) |= 1u;
        int v8 = (unsigned char *)*((void *)a2 + 1);
        if ((unint64_t)v8 < *((void *)a2 + 2) && *v8 == 17)
        {
          *((void *)a2 + 1) = v8 + 1;
LABEL_17:
          unint64_t v11 = 0;
          if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, &v11) & 1) == 0) {
            return 0;
          }
          *((void *)this + 2) = v11;
          *((_DWORD *)this + 9) |= 2u;
          int v9 = (unsigned char *)*((void *)a2 + 1);
          if ((unint64_t)v9 < *((void *)a2 + 2) && *v9 == 25)
          {
            *((void *)a2 + 1) = v9 + 1;
            goto LABEL_21;
          }
        }
      }
      if (v6 == 2)
      {
        int v7 = TagFallback & 7;
        if (v7 != 1) {
          goto LABEL_27;
        }
        goto LABEL_17;
      }
      if (v6 != 3)
      {
        int v7 = TagFallback & 7;
        goto LABEL_27;
      }
      int v7 = TagFallback & 7;
      if (v7 == 1) {
        break;
      }
LABEL_27:
      if (v7 == 4) {
        return 1;
      }
      if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0; {
    }
      }
LABEL_21:
    unint64_t v11 = 0;
    if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, &v11) & 1) == 0) {
      return 0;
    }
    *((void *)this + 3) = v11;
    *((_DWORD *)this + 9) |= 4u;
  }
  while (*((void *)a2 + 1) != *((void *)a2 + 2)
       || !*((_DWORD *)a2 + 11) && *((_DWORD *)a2 + 6) != *((_DWORD *)a2 + 10));
  *((_DWORD *)a2 + 8) = 0;
  uint64_t result = 1;
  *((unsigned char *)a2 + 36) = 1;
  return result;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::SfcfXyz::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3)
{
  uint64_t v4 = this;
  int v5 = *(_DWORD *)(this + 36);
  if ((v5 & 1) == 0)
  {
    if ((v5 & 2) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, (uint64_t)a2, *(double *)(v4 + 16), a3);
    if ((*(_DWORD *)(v4 + 36) & 4) == 0) {
      return this;
    }
    goto LABEL_7;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, (uint64_t)a2, *(double *)(this + 8), a3);
  int v5 = *(_DWORD *)(v4 + 36);
  if ((v5 & 2) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v5 & 4) == 0) {
    return this;
  }
LABEL_7:
  double v6 = *(double *)(v4 + 24);

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, (uint64_t)a2, v6, a3);
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::SfcfXyz::ByteSize(CoreNavigation::CLP::LogEntry::PrivateData::SfcfXyz *this)
{
  uint64_t v1 = *((unsigned __int8 *)this + 36);
  if (*((unsigned char *)this + 36))
  {
    unsigned int v2 = ((int)(v1 << 31) >> 31) & 9;
    if ((v1 & 2) != 0) {
      v2 += 9;
    }
    if ((v1 & 4) != 0) {
      uint64_t v1 = v2 + 9;
    }
    else {
      uint64_t v1 = v2;
    }
  }
  *((_DWORD *)this + 8) = v1;
  return v1;
}

double CoreNavigation::CLP::LogEntry::PrivateData::SfcfXyz::CheckTypeAndMergeFrom(CoreNavigation::CLP::LogEntry::PrivateData::SfcfXyz *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  return CoreNavigation::CLP::LogEntry::PrivateData::SfcfXyz::MergeFrom(this, lpsrc);
}

double CoreNavigation::CLP::LogEntry::PrivateData::SfcfXyz::CopyFrom(CoreNavigation::CLP::LogEntry::PrivateData::SfcfXyz *this, const CoreNavigation::CLP::LogEntry::PrivateData::SfcfXyz *a2)
{
  if (a2 != this)
  {
    (*(void (**)(CoreNavigation::CLP::LogEntry::PrivateData::SfcfXyz *))(*(void *)this + 32))(this);
    return CoreNavigation::CLP::LogEntry::PrivateData::SfcfXyz::MergeFrom(this, a2);
  }
  return result;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::SfcfXyz::IsInitialized(CoreNavigation::CLP::LogEntry::PrivateData::SfcfXyz *this)
{
  return 1;
}

double CoreNavigation::CLP::LogEntry::PrivateData::SfcfXyz::Swap(CoreNavigation::CLP::LogEntry::PrivateData::SfcfXyz *this, CoreNavigation::CLP::LogEntry::PrivateData::SfcfXyz *a2)
{
  if (a2 != this)
  {
    uint64_t v2 = *((void *)this + 1);
    *((void *)this + 1) = *((void *)a2 + 1);
    *((void *)a2 + 1) = v2;
    uint64_t v3 = *((void *)this + 2);
    *((void *)this + 2) = *((void *)a2 + 2);
    *((void *)a2 + 2) = v3;
    double result = *((double *)this + 3);
    *((void *)this + 3) = *((void *)a2 + 3);
    *((double *)a2 + 3) = result;
    int v5 = *((_DWORD *)this + 9);
    *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
    *((_DWORD *)a2 + 9) = v5;
    int v6 = *((_DWORD *)this + 8);
    *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
    *((_DWORD *)a2 + 8) = v6;
  }
  return result;
}

void *CoreNavigation::CLP::LogEntry::PrivateData::SfcfXyz::GetTypeName@<X0>(void *a1@<X8>)
{
  return sub_18DEDE7B0(a1, "CoreNavigation.CLP.LogEntry.PrivateData.SfcfXyz");
}

double CoreNavigation::CLP::LogEntry::PrivateData::AntennaPhaseCenterSvOffset::SharedCtor(CoreNavigation::CLP::LogEntry::PrivateData::AntennaPhaseCenterSvOffset *this)
{
  double result = 0.0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  return result;
}

CoreNavigation::CLP::LogEntry::PrivateData::AntennaPhaseCenterSvOffset *CoreNavigation::CLP::LogEntry::PrivateData::AntennaPhaseCenterSvOffset::AntennaPhaseCenterSvOffset(CoreNavigation::CLP::LogEntry::PrivateData::AntennaPhaseCenterSvOffset *this, const CoreNavigation::CLP::LogEntry::PrivateData::AntennaPhaseCenterSvOffset *a2)
{
  *(void *)this = &unk_1EDD0E300;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  CoreNavigation::CLP::LogEntry::PrivateData::AntennaPhaseCenterSvOffset::MergeFrom(this, a2);
  return this;
}

void sub_18DFDC328(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

double CoreNavigation::CLP::LogEntry::PrivateData::AntennaPhaseCenterSvOffset::MergeFrom(CoreNavigation::CLP::LogEntry::PrivateData::AntennaPhaseCenterSvOffset *this, const CoreNavigation::CLP::LogEntry::PrivateData::AntennaPhaseCenterSvOffset *a2)
{
  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v12);
  }
  LOBYTE(v5) = *((unsigned char *)a2 + 36);
  if ((_BYTE)v5)
  {
    if (*((unsigned char *)a2 + 36))
    {
      *((_DWORD *)this + 9) |= 1u;
      int v6 = (CoreNavigation::CLP::LogEntry::PrivateData::SvId *)*((void *)this + 1);
      if (!v6) {
        operator new();
      }
      int v7 = (const CoreNavigation::CLP::LogEntry::PrivateData::SvId *)*((void *)a2 + 1);
      if (!v7)
      {
        CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);
        int v7 = *(const CoreNavigation::CLP::LogEntry::PrivateData::SvId **)(CoreNavigation::CLP::LogEntry::PrivateData::AntennaPhaseCenterSvOffset::default_instance_
                                                                        + 8);
      }
      CoreNavigation::CLP::LogEntry::PrivateData::SvId::MergeFrom(v6, v7);
      int v5 = *((_DWORD *)a2 + 9);
    }
    if ((v5 & 2) != 0)
    {
      unsigned int v8 = *((_DWORD *)a2 + 4);
      if (v8 >= 0xD) {
        __assert_rtn("set_band", "CoreNavigationCLPGnssMeasApi.pb.h", 13137, "::CoreNavigation::CLP::LogEntry::PrivateData::Band_IsValid(value)");
      }
      *((_DWORD *)this + 9) |= 2u;
      *((_DWORD *)this + 4) = v8;
      int v5 = *((_DWORD *)a2 + 9);
    }
    if ((v5 & 4) != 0)
    {
      unsigned int v9 = *((_DWORD *)a2 + 5);
      if (v9 >= 4) {
        __assert_rtn("set_sv_reference_point", "CoreNavigationCLPGnssMeasApi.pb.h", 13160, "::CoreNavigation::CLP::LogEntry::PrivateData::SvReferencePoint_IsValid(value)");
      }
      *((_DWORD *)this + 9) |= 4u;
      *((_DWORD *)this + 5) = v9;
      int v5 = *((_DWORD *)a2 + 9);
    }
    if ((v5 & 8) != 0)
    {
      *((_DWORD *)this + 9) |= 8u;
      int v10 = (CoreNavigation::CLP::LogEntry::PrivateData::SfcfXyz *)*((void *)this + 3);
      if (!v10) {
        operator new();
      }
      unint64_t v11 = (const CoreNavigation::CLP::LogEntry::PrivateData::SfcfXyz *)*((void *)a2 + 3);
      if (!v11)
      {
        CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);
        unint64_t v11 = *(const CoreNavigation::CLP::LogEntry::PrivateData::SfcfXyz **)(CoreNavigation::CLP::LogEntry::PrivateData::AntennaPhaseCenterSvOffset::default_instance_
                                                                            + 24);
      }
      return CoreNavigation::CLP::LogEntry::PrivateData::SfcfXyz::MergeFrom(v10, v11);
    }
  }
  return result;
}

void sub_18DFDC544(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CoreNavigation::CLP::LogEntry::PrivateData::AntennaPhaseCenterSvOffset::~AntennaPhaseCenterSvOffset(CoreNavigation::CLP::LogEntry::PrivateData::AntennaPhaseCenterSvOffset *this)
{
  *(void *)this = &unk_1EDD0E300;
  CoreNavigation::CLP::LogEntry::PrivateData::AntennaPhaseCenterSvOffset::SharedDtor(this);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  uint64_t vars8;

  CoreNavigation::CLP::LogEntry::PrivateData::AntennaPhaseCenterSvOffset::~AntennaPhaseCenterSvOffset(this);

  JUMPOUT(0x192FA6240);
}

void CoreNavigation::CLP::LogEntry::PrivateData::AntennaPhaseCenterSvOffset::SharedDtor(CoreNavigation::CLP::LogEntry::PrivateData::AntennaPhaseCenterSvOffset *this)
{
  CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);
  if ((CoreNavigation::CLP::LogEntry::PrivateData::AntennaPhaseCenterSvOffset *)CoreNavigation::CLP::LogEntry::PrivateData::AntennaPhaseCenterSvOffset::default_instance_ != this)
  {
    uint64_t v2 = *((void *)this + 1);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
    uint64_t v3 = *((void *)this + 3);
    if (v3)
    {
      uint64_t v4 = *(void (**)(void))(*(void *)v3 + 8);
      v4();
    }
  }
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::AntennaPhaseCenterSvOffset::default_instance(CoreNavigation::CLP::LogEntry::PrivateData::AntennaPhaseCenterSvOffset *this)
{
  return CoreNavigation::CLP::LogEntry::PrivateData::AntennaPhaseCenterSvOffset::default_instance_;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::AntennaPhaseCenterSvOffset::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 32) = a2;
  return this;
}

void CoreNavigation::CLP::LogEntry::PrivateData::AntennaPhaseCenterSvOffset::New(CoreNavigation::CLP::LogEntry::PrivateData::AntennaPhaseCenterSvOffset *this)
{
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::AntennaPhaseCenterSvOffset::Clear(uint64_t this)
{
  uint64_t v1 = this;
  LOBYTE(v2) = *(unsigned char *)(this + 36);
  if ((_BYTE)v2)
  {
    if (*(unsigned char *)(this + 36))
    {
      this = *(void *)(this + 8);
      if (this)
      {
        this = CoreNavigation::CLP::LogEntry::PrivateData::SvId::Clear(this);
        int v2 = *(_DWORD *)(v1 + 36);
      }
    }
    *(void *)(v1 + 16) = 0;
    if ((v2 & 8) != 0)
    {
      uint64_t v3 = *(void *)(v1 + 24);
      if (v3)
      {
        if (*(unsigned char *)(v3 + 36))
        {
          *(void *)(v3 + 8) = 0;
          *(void *)(v3 + 16) = 0;
          *(void *)(v3 + 24) = 0;
        }
        *(_DWORD *)(v3 + 36) = 0;
      }
    }
  }
  *(_DWORD *)(v1 + 36) = 0;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::AntennaPhaseCenterSvOffset::MergePartialFromCodedStream(CoreNavigation::CLP::LogEntry::PrivateData::AntennaPhaseCenterSvOffset *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  while (2)
  {
    uint64_t v4 = (char *)*((void *)a2 + 1);
    if ((unint64_t)v4 >= *((void *)a2 + 2) || *v4 < 0)
    {
      unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
      if (!TagFallback) {
        return 1;
      }
    }
    else
    {
      unint64_t TagFallback = *v4;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((void *)a2 + 1) = v4 + 1;
      if (!TagFallback) {
        return 1;
      }
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        int v6 = TagFallback & 7;
        if (v6 != 2) {
          goto LABEL_19;
        }
        *((_DWORD *)this + 9) |= 1u;
        int v7 = (CoreNavigation::CLP::LogEntry::PrivateData::SvId *)*((void *)this + 1);
        if (!v7) {
          operator new();
        }
        unsigned int v30 = 0;
        unsigned int v8 = (char *)*((void *)a2 + 1);
        if ((unint64_t)v8 >= *((void *)a2 + 2) || *v8 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v30))return 0; {
        }
          }
        else
        {
          unsigned int v30 = *v8;
          *((void *)a2 + 1) = v8 + 1;
        }
        int v13 = *((_DWORD *)a2 + 14);
        int v14 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v13 + 1;
        if (v13 >= v14) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CoreNavigation::CLP::LogEntry::PrivateData::SvId::MergePartialFromCodedStream(v7, a2)
          || !*((unsigned char *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        int v15 = *((_DWORD *)a2 + 14);
        BOOL v16 = __OFSUB__(v15, 1);
        int v17 = v15 - 1;
        if (v17 < 0 == v16) {
          *((_DWORD *)a2 + 14) = v17;
        }
        int v18 = (unsigned char *)*((void *)a2 + 1);
        unint64_t v9 = *((void *)a2 + 2);
        if ((unint64_t)v18 >= v9 || *v18 != 16) {
          continue;
        }
        int v10 = v18 + 1;
        *((void *)a2 + 1) = v10;
        goto LABEL_31;
      case 2u:
        int v6 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_19;
        }
        int v10 = (char *)*((void *)a2 + 1);
        unint64_t v9 = *((void *)a2 + 2);
LABEL_31:
        unsigned int v30 = 0;
        if ((unint64_t)v10 >= v9 || *v10 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v30);
          if (!result) {
            return result;
          }
          unsigned int v19 = v30;
        }
        else
        {
          unsigned int v19 = *v10;
          *((void *)a2 + 1) = v10 + 1;
        }
        if (v19 <= 0xC)
        {
          *((_DWORD *)this + 9) |= 2u;
          *((_DWORD *)this + 4) = v19;
        }
        int v21 = (unsigned char *)*((void *)a2 + 1);
        unint64_t v11 = *((void *)a2 + 2);
        if ((unint64_t)v21 >= v11 || *v21 != 24) {
          continue;
        }
        BOOL v12 = v21 + 1;
        *((void *)a2 + 1) = v12;
LABEL_41:
        unsigned int v30 = 0;
        if ((unint64_t)v12 >= v11 || *v12 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v30);
          if (!result) {
            return result;
          }
          unsigned int v22 = v30;
        }
        else
        {
          unsigned int v22 = *v12;
          *((void *)a2 + 1) = v12 + 1;
        }
        if (v22 <= 3)
        {
          *((_DWORD *)this + 9) |= 4u;
          *((_DWORD *)this + 5) = v22;
        }
        int v23 = (unsigned char *)*((void *)a2 + 1);
        if ((unint64_t)v23 >= *((void *)a2 + 2) || *v23 != 34) {
          continue;
        }
        *((void *)a2 + 1) = v23 + 1;
LABEL_51:
        *((_DWORD *)this + 9) |= 8u;
        int v24 = (CoreNavigation::CLP::LogEntry::PrivateData::SfcfXyz *)*((void *)this + 3);
        if (!v24) {
          operator new();
        }
        unsigned int v30 = 0;
        int v25 = (char *)*((void *)a2 + 1);
        if ((unint64_t)v25 >= *((void *)a2 + 2) || *v25 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v30))return 0; {
        }
          }
        else
        {
          unsigned int v30 = *v25;
          *((void *)a2 + 1) = v25 + 1;
        }
        int v26 = *((_DWORD *)a2 + 14);
        int v27 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v26 + 1;
        if (v26 < v27)
        {
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
          if (CoreNavigation::CLP::LogEntry::PrivateData::SfcfXyz::MergePartialFromCodedStream(v24, a2))
          {
            if (*((unsigned char *)a2 + 36))
            {
              wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
              int v28 = *((_DWORD *)a2 + 14);
              BOOL v16 = __OFSUB__(v28, 1);
              int v29 = v28 - 1;
              if (v29 < 0 == v16) {
                *((_DWORD *)a2 + 14) = v29;
              }
              if (*((void *)a2 + 1) == *((void *)a2 + 2)
                && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
              {
                *((_DWORD *)a2 + 8) = 0;
                uint64_t result = 1;
                *((unsigned char *)a2 + 36) = 1;
                return result;
              }
              continue;
            }
          }
        }
        return 0;
      case 3u:
        int v6 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_19;
        }
        BOOL v12 = (char *)*((void *)a2 + 1);
        unint64_t v11 = *((void *)a2 + 2);
        goto LABEL_41;
      case 4u:
        int v6 = TagFallback & 7;
        if (v6 != 2) {
          goto LABEL_19;
        }
        goto LABEL_51;
      default:
        int v6 = TagFallback & 7;
LABEL_19:
        if (v6 == 4) {
          return 1;
        }
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0; {
        continue;
        }
    }
  }
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::AntennaPhaseCenterSvOffset::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  int v6 = *(_DWORD *)(this + 36);
  if (v6)
  {
    uint64_t v7 = *(void *)(this + 8);
    if (!v7)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)this);
      uint64_t v7 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::AntennaPhaseCenterSvOffset::default_instance_ + 8);
    }
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v7, a2, a4);
    int v6 = *(_DWORD *)(v5 + 36);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
LABEL_10:
      this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(unsigned int *)(v5 + 20), (uint64_t)a2, a4);
      if ((*(_DWORD *)(v5 + 36) & 8) == 0) {
        return this;
      }
      goto LABEL_11;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(unsigned int *)(v5 + 16), (uint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 36);
  if ((v6 & 4) != 0) {
    goto LABEL_10;
  }
LABEL_4:
  if ((v6 & 8) == 0) {
    return this;
  }
LABEL_11:
  uint64_t v8 = *(void *)(v5 + 24);
  if (!v8)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)this);
    uint64_t v8 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::AntennaPhaseCenterSvOffset::default_instance_ + 24);
  }

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v8, a2, a4);
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::AntennaPhaseCenterSvOffset::ByteSize(uint64_t this)
{
  uint64_t v1 = this;
  LOBYTE(v2) = *(unsigned char *)(this + 36);
  if (!(_BYTE)v2)
  {
    uint64_t v3 = 0;
    goto LABEL_36;
  }
  if ((*(unsigned char *)(this + 36) & 1) == 0)
  {
    uint64_t v3 = 0;
    if ((*(unsigned char *)(this + 36) & 2) == 0) {
      goto LABEL_18;
    }
    goto LABEL_12;
  }
  uint64_t v4 = *(CoreNavigation::CLP::LogEntry::PrivateData::SvId **)(this + 8);
  if (!v4)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(0);
    uint64_t v4 = *(CoreNavigation::CLP::LogEntry::PrivateData::SvId **)(CoreNavigation::CLP::LogEntry::PrivateData::AntennaPhaseCenterSvOffset::default_instance_
                                                              + 8);
  }
  uint64_t v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CoreNavigation::CLP::LogEntry::PrivateData::SvId::ByteSize(v4);
  int v6 = (int)v5;
  if (v5 >= 0x80) {
    this = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5);
  }
  else {
    this = 1;
  }
  uint64_t v3 = (v6 + this + 1);
  int v2 = *(_DWORD *)(v1 + 36);
  if ((v2 & 2) != 0)
  {
LABEL_12:
    this = *(unsigned int *)(v1 + 16);
    if ((this & 0x80000000) != 0)
    {
      int v7 = 11;
    }
    else if (this >= 0x80)
    {
      this = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)this);
      int v7 = this + 1;
      int v2 = *(_DWORD *)(v1 + 36);
    }
    else
    {
      int v7 = 2;
    }
    uint64_t v3 = (v7 + v3);
  }
LABEL_18:
  if ((v2 & 4) != 0)
  {
    this = *(unsigned int *)(v1 + 20);
    if ((this & 0x80000000) != 0)
    {
      int v8 = 11;
    }
    else if (this >= 0x80)
    {
      this = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback((wireless_diagnostics::google::protobuf::io::CodedOutputStream *)this);
      int v8 = this + 1;
      int v2 = *(_DWORD *)(v1 + 36);
    }
    else
    {
      int v8 = 2;
    }
    uint64_t v3 = (v8 + v3);
    if ((v2 & 8) == 0) {
      goto LABEL_36;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_36;
  }
  uint64_t v9 = *(void *)(v1 + 24);
  if (!v9)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)this);
    uint64_t v9 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::AntennaPhaseCenterSvOffset::default_instance_ + 24);
  }
  int v10 = *(unsigned __int8 *)(v9 + 36);
  if (*(unsigned char *)(v9 + 36))
  {
    int v11 = (v10 << 31 >> 31) & 9;
    if ((v10 & 2) != 0) {
      v11 += 9;
    }
    if ((v10 & 4) != 0) {
      int v10 = v11 + 9;
    }
    else {
      int v10 = v11;
    }
  }
  *(_DWORD *)(v9 + 32) = v10;
  uint64_t v3 = (v3 + v10 + 2);
LABEL_36:
  *(_DWORD *)(v1 + 32) = v3;
  return v3;
}

double CoreNavigation::CLP::LogEntry::PrivateData::AntennaPhaseCenterSvOffset::CheckTypeAndMergeFrom(CoreNavigation::CLP::LogEntry::PrivateData::AntennaPhaseCenterSvOffset *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  return CoreNavigation::CLP::LogEntry::PrivateData::AntennaPhaseCenterSvOffset::MergeFrom(this, lpsrc);
}

double CoreNavigation::CLP::LogEntry::PrivateData::AntennaPhaseCenterSvOffset::CopyFrom(CoreNavigation::CLP::LogEntry::PrivateData::AntennaPhaseCenterSvOffset *this, const CoreNavigation::CLP::LogEntry::PrivateData::AntennaPhaseCenterSvOffset *a2)
{
  if (a2 != this)
  {
    (*(void (**)(CoreNavigation::CLP::LogEntry::PrivateData::AntennaPhaseCenterSvOffset *))(*(void *)this + 32))(this);
    return CoreNavigation::CLP::LogEntry::PrivateData::AntennaPhaseCenterSvOffset::MergeFrom(this, a2);
  }
  return result;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::AntennaPhaseCenterSvOffset::IsInitialized(CoreNavigation::CLP::LogEntry::PrivateData::AntennaPhaseCenterSvOffset *this)
{
  return 1;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::AntennaPhaseCenterSvOffset::Swap(uint64_t this, CoreNavigation::CLP::LogEntry::PrivateData::AntennaPhaseCenterSvOffset *a2)
{
  if (a2 != (CoreNavigation::CLP::LogEntry::PrivateData::AntennaPhaseCenterSvOffset *)this)
  {
    uint64_t v2 = *(void *)(this + 8);
    *(void *)(this + 8) = *((void *)a2 + 1);
    *((void *)a2 + 1) = v2;
    LODWORD(v2) = *(_DWORD *)(this + 16);
    *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
    *((_DWORD *)a2 + 4) = v2;
    LODWORD(v2) = *(_DWORD *)(this + 20);
    *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
    *((_DWORD *)a2 + 5) = v2;
    uint64_t v3 = *(void *)(this + 24);
    *(void *)(this + 24) = *((void *)a2 + 3);
    *((void *)a2 + 3) = v3;
    LODWORD(v3) = *(_DWORD *)(this + 36);
    *(_DWORD *)(this + 36) = *((_DWORD *)a2 + 9);
    *((_DWORD *)a2 + 9) = v3;
    LODWORD(v3) = *(_DWORD *)(this + 32);
    *(_DWORD *)(this + 32) = *((_DWORD *)a2 + 8);
    *((_DWORD *)a2 + 8) = v3;
  }
  return this;
}

void *CoreNavigation::CLP::LogEntry::PrivateData::AntennaPhaseCenterSvOffset::GetTypeName@<X0>(void *a1@<X8>)
{
  return sub_18DEDE7B0(a1, "CoreNavigation.CLP.LogEntry.PrivateData.AntennaPhaseCenterSvOffset");
}

double CoreNavigation::CLP::LogEntry::PrivateData::ReceivedTimeStamp::SharedCtor(CoreNavigation::CLP::LogEntry::PrivateData::ReceivedTimeStamp *this)
{
  double result = 0.0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  return result;
}

CoreNavigation::CLP::LogEntry::PrivateData::ReceivedTimeStamp *CoreNavigation::CLP::LogEntry::PrivateData::ReceivedTimeStamp::ReceivedTimeStamp(CoreNavigation::CLP::LogEntry::PrivateData::ReceivedTimeStamp *this, const CoreNavigation::CLP::LogEntry::PrivateData::ReceivedTimeStamp *a2)
{
  *(void *)this = &unk_1EDD0CED8;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  CoreNavigation::CLP::LogEntry::PrivateData::ReceivedTimeStamp::MergeFrom(this, a2);
  return this;
}

void sub_18DFDCFE0(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

double CoreNavigation::CLP::LogEntry::PrivateData::ReceivedTimeStamp::MergeFrom(CoreNavigation::CLP::LogEntry::PrivateData::ReceivedTimeStamp *this, const CoreNavigation::CLP::LogEntry::PrivateData::ReceivedTimeStamp *a2)
{
  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v6);
  }
  LOBYTE(v5) = *((unsigned char *)a2 + 36);
  if ((_BYTE)v5)
  {
    if (*((unsigned char *)a2 + 36))
    {
      double result = *((double *)a2 + 1);
      *((_DWORD *)this + 9) |= 1u;
      *((double *)this + 1) = result;
      int v5 = *((_DWORD *)a2 + 9);
      if ((v5 & 2) == 0)
      {
LABEL_6:
        if ((v5 & 4) == 0) {
          return result;
        }
        goto LABEL_7;
      }
    }
    else if ((*((unsigned char *)a2 + 36) & 2) == 0)
    {
      goto LABEL_6;
    }
    double result = *((double *)a2 + 2);
    *((_DWORD *)this + 9) |= 2u;
    *((double *)this + 2) = result;
    if ((*((_DWORD *)a2 + 9) & 4) == 0) {
      return result;
    }
LABEL_7:
    double result = *((double *)a2 + 3);
    *((_DWORD *)this + 9) |= 4u;
    *((double *)this + 3) = result;
  }
  return result;
}

void sub_18DFDD0C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CoreNavigation::CLP::LogEntry::PrivateData::ReceivedTimeStamp::~ReceivedTimeStamp(CoreNavigation::CLP::LogEntry::PrivateData::ReceivedTimeStamp *this)
{
  *(void *)this = &unk_1EDD0CED8;
  CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  uint64_t vars8;

  CoreNavigation::CLP::LogEntry::PrivateData::ReceivedTimeStamp::~ReceivedTimeStamp(this);

  JUMPOUT(0x192FA6240);
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::ReceivedTimeStamp::default_instance(CoreNavigation::CLP::LogEntry::PrivateData::ReceivedTimeStamp *this)
{
  return CoreNavigation::CLP::LogEntry::PrivateData::ReceivedTimeStamp::default_instance_;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::ReceivedTimeStamp::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 32) = a2;
  return this;
}

void CoreNavigation::CLP::LogEntry::PrivateData::ReceivedTimeStamp::New(CoreNavigation::CLP::LogEntry::PrivateData::ReceivedTimeStamp *this)
{
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::ReceivedTimeStamp::Clear(uint64_t this)
{
  if (*(unsigned char *)(this + 36))
  {
    *(void *)(this + 8) = 0;
    *(void *)(this + 16) = 0;
    *(void *)(this + 24) = 0;
  }
  *(_DWORD *)(this + 36) = 0;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::ReceivedTimeStamp::MergePartialFromCodedStream(CoreNavigation::CLP::LogEntry::PrivateData::ReceivedTimeStamp *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  do
  {
    while (1)
    {
      while (1)
      {
        uint64_t v4 = (char *)*((void *)a2 + 1);
        if ((unint64_t)v4 >= *((void *)a2 + 2) || *v4 < 0)
        {
          unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
          *((_DWORD *)a2 + 8) = TagFallback;
          if (!TagFallback) {
            return 1;
          }
        }
        else
        {
          unint64_t TagFallback = *v4;
          *((_DWORD *)a2 + 8) = TagFallback;
          *((void *)a2 + 1) = v4 + 1;
          if (!TagFallback) {
            return 1;
          }
        }
        unsigned int v6 = TagFallback >> 3;
        if (TagFallback >> 3 != 1) {
          break;
        }
        int v7 = TagFallback & 7;
        if (v7 != 1) {
          goto LABEL_27;
        }
        unint64_t v11 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, &v11) & 1) == 0) {
          return 0;
        }
        *((void *)this + 1) = v11;
        *((_DWORD *)this + 9) |= 1u;
        int v8 = (unsigned char *)*((void *)a2 + 1);
        if ((unint64_t)v8 < *((void *)a2 + 2) && *v8 == 17)
        {
          *((void *)a2 + 1) = v8 + 1;
LABEL_17:
          unint64_t v11 = 0;
          if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, &v11) & 1) == 0) {
            return 0;
          }
          *((void *)this + 2) = v11;
          *((_DWORD *)this + 9) |= 2u;
          uint64_t v9 = (unsigned char *)*((void *)a2 + 1);
          if ((unint64_t)v9 < *((void *)a2 + 2) && *v9 == 25)
          {
            *((void *)a2 + 1) = v9 + 1;
            goto LABEL_21;
          }
        }
      }
      if (v6 == 2)
      {
        int v7 = TagFallback & 7;
        if (v7 != 1) {
          goto LABEL_27;
        }
        goto LABEL_17;
      }
      if (v6 != 3)
      {
        int v7 = TagFallback & 7;
        goto LABEL_27;
      }
      int v7 = TagFallback & 7;
      if (v7 == 1) {
        break;
      }
LABEL_27:
      if (v7 == 4) {
        return 1;
      }
      if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0; {
    }
      }
LABEL_21:
    unint64_t v11 = 0;
    if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, &v11) & 1) == 0) {
      return 0;
    }
    *((void *)this + 3) = v11;
    *((_DWORD *)this + 9) |= 4u;
  }
  while (*((void *)a2 + 1) != *((void *)a2 + 2)
       || !*((_DWORD *)a2 + 11) && *((_DWORD *)a2 + 6) != *((_DWORD *)a2 + 10));
  *((_DWORD *)a2 + 8) = 0;
  uint64_t result = 1;
  *((unsigned char *)a2 + 36) = 1;
  return result;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::ReceivedTimeStamp::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3)
{
  uint64_t v4 = this;
  int v5 = *(_DWORD *)(this + 36);
  if ((v5 & 1) == 0)
  {
    if ((v5 & 2) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, (uint64_t)a2, *(double *)(v4 + 16), a3);
    if ((*(_DWORD *)(v4 + 36) & 4) == 0) {
      return this;
    }
    goto LABEL_7;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, (uint64_t)a2, *(double *)(this + 8), a3);
  int v5 = *(_DWORD *)(v4 + 36);
  if ((v5 & 2) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v5 & 4) == 0) {
    return this;
  }
LABEL_7:
  double v6 = *(double *)(v4 + 24);

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, (uint64_t)a2, v6, a3);
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::ReceivedTimeStamp::ByteSize(CoreNavigation::CLP::LogEntry::PrivateData::ReceivedTimeStamp *this)
{
  uint64_t v1 = *((unsigned __int8 *)this + 36);
  if (*((unsigned char *)this + 36))
  {
    unsigned int v2 = ((int)(v1 << 31) >> 31) & 9;
    if ((v1 & 2) != 0) {
      v2 += 9;
    }
    if ((v1 & 4) != 0) {
      uint64_t v1 = v2 + 9;
    }
    else {
      uint64_t v1 = v2;
    }
  }
  *((_DWORD *)this + 8) = v1;
  return v1;
}

double CoreNavigation::CLP::LogEntry::PrivateData::ReceivedTimeStamp::CheckTypeAndMergeFrom(CoreNavigation::CLP::LogEntry::PrivateData::ReceivedTimeStamp *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  return CoreNavigation::CLP::LogEntry::PrivateData::ReceivedTimeStamp::MergeFrom(this, lpsrc);
}

double CoreNavigation::CLP::LogEntry::PrivateData::ReceivedTimeStamp::CopyFrom(CoreNavigation::CLP::LogEntry::PrivateData::ReceivedTimeStamp *this, const CoreNavigation::CLP::LogEntry::PrivateData::ReceivedTimeStamp *a2)
{
  if (a2 != this)
  {
    (*(void (**)(CoreNavigation::CLP::LogEntry::PrivateData::ReceivedTimeStamp *))(*(void *)this + 32))(this);
    return CoreNavigation::CLP::LogEntry::PrivateData::ReceivedTimeStamp::MergeFrom(this, a2);
  }
  return result;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::ReceivedTimeStamp::IsInitialized(CoreNavigation::CLP::LogEntry::PrivateData::ReceivedTimeStamp *this)
{
  return 1;
}

double CoreNavigation::CLP::LogEntry::PrivateData::ReceivedTimeStamp::Swap(CoreNavigation::CLP::LogEntry::PrivateData::ReceivedTimeStamp *this, CoreNavigation::CLP::LogEntry::PrivateData::ReceivedTimeStamp *a2)
{
  if (a2 != this)
  {
    uint64_t v2 = *((void *)this + 1);
    *((void *)this + 1) = *((void *)a2 + 1);
    *((void *)a2 + 1) = v2;
    uint64_t v3 = *((void *)this + 2);
    *((void *)this + 2) = *((void *)a2 + 2);
    *((void *)a2 + 2) = v3;
    double result = *((double *)this + 3);
    *((void *)this + 3) = *((void *)a2 + 3);
    *((double *)a2 + 3) = result;
    int v5 = *((_DWORD *)this + 9);
    *((_DWORD *)this + 9) = *((_DWORD *)a2 + 9);
    *((_DWORD *)a2 + 9) = v5;
    int v6 = *((_DWORD *)this + 8);
    *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
    *((_DWORD *)a2 + 8) = v6;
  }
  return result;
}

void *CoreNavigation::CLP::LogEntry::PrivateData::ReceivedTimeStamp::GetTypeName@<X0>(void *a1@<X8>)
{
  return sub_18DEDE7B0(a1, "CoreNavigation.CLP.LogEntry.PrivateData.ReceivedTimeStamp");
}

double CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents::SharedCtor(CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents *this)
{
  *((void *)this + 16) = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  return result;
}

CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents *CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents::MeasurementReportCallbackContents(CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents *this, const CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents *a2)
{
  *(void *)this = &unk_1EDD0E738;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  *((_DWORD *)this + 16) = 0;
  *((void *)this + 16) = 0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *((_DWORD *)this + 10) = 0;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_DWORD *)this + 30) = 0;
  CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents::MergeFrom(this, a2);
  return this;
}

void sub_18DFDD708(_Unwind_Exception *a1)
{
  sub_18DF0C324(v1 + 13);
  sub_18DF0C324(v3);
  sub_18DF0C324(v2);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite((wireless_diagnostics::google::protobuf::MessageLite *)v1);
  _Unwind_Resume(a1);
}

float CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents::MergeFrom(CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents *this, const CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents *a2)
{
  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v31);
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents *)((char *)this + 24));
  if (*((int *)a2 + 8) >= 1)
  {
    uint64_t v4 = 0;
    do
    {
      int v5 = *(const CoreNavigation::CLP::LogEntry::PrivateData::SvInfo **)(*((void *)a2 + 3) + 8 * v4);
      int v6 = *((_DWORD *)this + 9);
      uint64_t v7 = *((int *)this + 8);
      if ((int)v7 >= v6)
      {
        if (v6 == *((_DWORD *)this + 10))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents *)((char *)this + 24));
          int v6 = *((_DWORD *)this + 9);
        }
        *((_DWORD *)this + 9) = v6 + 1;
        operator new();
      }
      uint64_t v8 = *((void *)this + 3);
      *((_DWORD *)this + 8) = v7 + 1;
      CoreNavigation::CLP::LogEntry::PrivateData::SvInfo::MergeFrom(*(CoreNavigation::CLP::LogEntry::PrivateData::SvInfo **)(v8 + 8 * v7), v5);
      ++v4;
    }
    while (v4 < *((int *)a2 + 8));
  }
  wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents *)((char *)this + 48));
  if (*((int *)a2 + 14) >= 1)
  {
    uint64_t v9 = 0;
    do
    {
      int v10 = *(const CoreNavigation::CLP::LogEntry::PrivateData::ReceiverBandCorrections **)(*((void *)a2 + 6) + 8 * v9);
      int v11 = *((_DWORD *)this + 15);
      uint64_t v12 = *((int *)this + 14);
      if ((int)v12 >= v11)
      {
        if (v11 == *((_DWORD *)this + 16))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents *)((char *)this + 48));
          int v11 = *((_DWORD *)this + 15);
        }
        *((_DWORD *)this + 15) = v11 + 1;
        operator new();
      }
      uint64_t v13 = *((void *)this + 6);
      *((_DWORD *)this + 14) = v12 + 1;
      CoreNavigation::CLP::LogEntry::PrivateData::ReceiverBandCorrections::MergeFrom(*(CoreNavigation::CLP::LogEntry::PrivateData::ReceiverBandCorrections **)(v13 + 8 * v12), v10);
      ++v9;
    }
    while (v9 < *((int *)a2 + 14));
  }
  int v14 = (CoreNavigation::CLP::LogEntry::PrivateData *)wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents *)((char *)this + 104));
  if (*((int *)a2 + 28) >= 1)
  {
    uint64_t v16 = 0;
    do
    {
      int v17 = *(const CoreNavigation::CLP::LogEntry::PrivateData::AntennaPhaseCenterSvOffset **)(*((void *)a2 + 13)
                                                                                             + 8 * v16);
      int v18 = *((_DWORD *)this + 29);
      uint64_t v19 = *((int *)this + 28);
      if ((int)v19 >= v18)
      {
        if (v18 == *((_DWORD *)this + 30))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents *)((char *)this + 104));
          int v18 = *((_DWORD *)this + 29);
        }
        *((_DWORD *)this + 29) = v18 + 1;
        operator new();
      }
      uint64_t v20 = *((void *)this + 13);
      *((_DWORD *)this + 28) = v19 + 1;
      double v15 = CoreNavigation::CLP::LogEntry::PrivateData::AntennaPhaseCenterSvOffset::MergeFrom(*(CoreNavigation::CLP::LogEntry::PrivateData::AntennaPhaseCenterSvOffset **)(v20 + 8 * v19), v17);
      ++v16;
    }
    while (v16 < *((int *)a2 + 28));
  }
  LOBYTE(v21) = *((unsigned char *)a2 + 132);
  if ((_BYTE)v21)
  {
    if (*((unsigned char *)a2 + 132))
    {
      *((_DWORD *)this + 33) |= 1u;
      unsigned int v22 = (CoreNavigation::CLP::LogEntry::PrivateData::ReceivedTimeStamp *)*((void *)this + 1);
      if (!v22) {
        operator new();
      }
      int v23 = (const CoreNavigation::CLP::LogEntry::PrivateData::ReceivedTimeStamp *)*((void *)a2 + 1);
      if (!v23)
      {
        CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(v14);
        int v23 = *(const CoreNavigation::CLP::LogEntry::PrivateData::ReceivedTimeStamp **)(CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents::default_instance_
                                                                                      + 8);
      }
      double v15 = CoreNavigation::CLP::LogEntry::PrivateData::ReceivedTimeStamp::MergeFrom(v22, v23);
      int v21 = *((_DWORD *)a2 + 33);
      if ((v21 & 2) == 0)
      {
LABEL_30:
        if ((v21 & 0x10) == 0) {
          goto LABEL_31;
        }
        goto LABEL_45;
      }
    }
    else if ((*((unsigned char *)a2 + 132) & 2) == 0)
    {
      goto LABEL_30;
    }
    *((_DWORD *)this + 33) |= 2u;
    int v24 = (CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReport *)*((void *)this + 2);
    if (!v24) {
      operator new();
    }
    int v25 = (const CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReport *)*((void *)a2 + 2);
    if (!v25)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(v14);
      int v25 = *(const CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReport **)(CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents::default_instance_
                                                                                    + 16);
    }
    double v15 = CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReport::MergeFrom(v24, v25);
    int v21 = *((_DWORD *)a2 + 33);
    if ((v21 & 0x10) == 0)
    {
LABEL_31:
      if ((v21 & 0x20) == 0) {
        goto LABEL_32;
      }
      goto LABEL_50;
    }
LABEL_45:
    *((_DWORD *)this + 33) |= 0x10u;
    int v26 = (CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo *)*((void *)this + 9);
    if (!v26) {
      operator new();
    }
    int v27 = (const CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo *)*((void *)a2 + 9);
    if (!v27)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(v14);
      int v27 = *(const CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo **)(CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents::default_instance_
                                                                                     + 72);
    }
    CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo::MergeFrom(v26, v27);
    int v21 = *((_DWORD *)a2 + 33);
    if ((v21 & 0x20) == 0)
    {
LABEL_32:
      if ((v21 & 0x40) == 0) {
        goto LABEL_33;
      }
      goto LABEL_51;
    }
LABEL_50:
    double v15 = *((double *)a2 + 10);
    *((_DWORD *)this + 33) |= 0x20u;
    *((double *)this + 10) = v15;
    int v21 = *((_DWORD *)a2 + 33);
    if ((v21 & 0x40) == 0)
    {
LABEL_33:
      if ((v21 & 0x80) == 0) {
        return *(float *)&v15;
      }
LABEL_52:
      *((_DWORD *)this + 33) |= 0x80u;
      int v28 = (CoreNavigation::CLP::LogEntry::PrivateData::KlobucharModelParameters *)*((void *)this + 12);
      if (!v28) {
        operator new();
      }
      int v29 = (const CoreNavigation::CLP::LogEntry::PrivateData::KlobucharModelParameters *)*((void *)a2 + 12);
      if (!v29)
      {
        CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(v14);
        int v29 = *(const CoreNavigation::CLP::LogEntry::PrivateData::KlobucharModelParameters **)(CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents::default_instance_
                                                                                             + 96);
      }
      *(float *)&double v15 = CoreNavigation::CLP::LogEntry::PrivateData::KlobucharModelParameters::MergeFrom(v28, v29);
      return *(float *)&v15;
    }
LABEL_51:
    double v15 = *((double *)a2 + 11);
    *((_DWORD *)this + 33) |= 0x40u;
    *((double *)this + 11) = v15;
    if ((*((_DWORD *)a2 + 33) & 0x80) == 0) {
      return *(float *)&v15;
    }
    goto LABEL_52;
  }
  return *(float *)&v15;
}

void sub_18DFDDCEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents::~MeasurementReportCallbackContents(CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents *this)
{
  *(void *)this = &unk_1EDD0E738;
  CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents::SharedDtor(this);
  sub_18DF0C324((uint64_t *)this + 13);
  sub_18DF0C324((uint64_t *)this + 6);
  sub_18DF0C324((uint64_t *)this + 3);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  uint64_t vars8;

  CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents::~MeasurementReportCallbackContents(this);

  JUMPOUT(0x192FA6240);
}

void CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents::SharedDtor(CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents *this)
{
  CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);
  if ((CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents *)CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents::default_instance_ != this)
  {
    uint64_t v2 = *((void *)this + 1);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
    uint64_t v3 = *((void *)this + 2);
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
    uint64_t v4 = *((void *)this + 9);
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
    uint64_t v5 = *((void *)this + 12);
    if (v5)
    {
      int v6 = *(void (**)(void))(*(void *)v5 + 8);
      v6();
    }
  }
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents::default_instance(CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents *this)
{
  return CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents::default_instance_;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 128) = a2;
  return this;
}

void CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents::New(CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents *this)
{
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents::Clear(CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents *this)
{
  LOBYTE(v2) = *((unsigned char *)this + 132);
  if ((_BYTE)v2)
  {
    if (*((unsigned char *)this + 132))
    {
      uint64_t v3 = *((void *)this + 1);
      if (v3)
      {
        if (*(unsigned char *)(v3 + 36))
        {
          *(void *)(v3 + 8) = 0;
          *(void *)(v3 + 16) = 0;
          *(void *)(v3 + 24) = 0;
        }
        *(_DWORD *)(v3 + 36) = 0;
        int v2 = *((_DWORD *)this + 33);
      }
    }
    if ((v2 & 2) != 0)
    {
      uint64_t v4 = (CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReport *)*((void *)this + 2);
      if (v4)
      {
        CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReport::Clear(v4);
        int v2 = *((_DWORD *)this + 33);
      }
    }
    if ((v2 & 0x10) != 0)
    {
      uint64_t v5 = *((void *)this + 9);
      if (v5)
      {
        CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo::Clear(v5);
        int v2 = *((_DWORD *)this + 33);
      }
    }
    *((void *)this + 10) = 0;
    *((void *)this + 11) = 0;
    if ((v2 & 0x80) != 0)
    {
      uint64_t v6 = *((void *)this + 12);
      if (v6)
      {
        int v7 = *(_DWORD *)(v6 + 52);
        if ((_BYTE)v7)
        {
          *(_DWORD *)(v6 + 40) = 0;
          *(_OWORD *)(v6 + 24) = 0u;
          *(_OWORD *)(v6 + 8) = 0u;
        }
        if ((v7 & 0xFF00) != 0) {
          *(_DWORD *)(v6 + 44) = 0;
        }
        *(_DWORD *)(v6 + 52) = 0;
      }
    }
  }
  sub_18DF0C208((uint64_t)this + 24);
  sub_18DF0C208((uint64_t)this + 48);
  uint64_t result = sub_18DF0C208((uint64_t)this + 104);
  *((_DWORD *)this + 33) = 0;
  return result;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents::MergePartialFromCodedStream(CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  uint64_t v4 = (CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents *)((char *)this + 24);
  uint64_t v5 = (CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents *)((char *)this + 48);
  uint64_t v6 = (CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents *)((char *)this + 104);
  while (1)
  {
LABEL_2:
    int v7 = (char *)*((void *)a2 + 1);
    if ((unint64_t)v7 < *((void *)a2 + 2) && (*v7 & 0x80000000) == 0)
    {
      unint64_t TagFallback = *v7;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((void *)a2 + 1) = v7 + 1;
      if (!TagFallback) {
        return 1;
      }
      goto LABEL_7;
    }
    unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
    *((_DWORD *)a2 + 8) = TagFallback;
    if (!TagFallback) {
      return 1;
    }
LABEL_7:
    switch(TagFallback >> 3)
    {
      case 1u:
        int v9 = TagFallback & 7;
        if (v9 != 2) {
          goto LABEL_30;
        }
        *((_DWORD *)this + 33) |= 1u;
        int v10 = (CoreNavigation::CLP::LogEntry::PrivateData::ReceivedTimeStamp *)*((void *)this + 1);
        if (!v10) {
          operator new();
        }
        v73[0] = 0;
        int v11 = (char *)*((void *)a2 + 1);
        if ((unint64_t)v11 >= *((void *)a2 + 2) || *v11 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v73))return 0; {
        }
          }
        else
        {
          v73[0] = *v11;
          *((void *)a2 + 1) = v11 + 1;
        }
        int v13 = *((_DWORD *)a2 + 14);
        int v14 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v13 + 1;
        if (v13 >= v14) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CoreNavigation::CLP::LogEntry::PrivateData::ReceivedTimeStamp::MergePartialFromCodedStream(v10, a2)|| !*((unsigned char *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        int v15 = *((_DWORD *)a2 + 14);
        BOOL v16 = __OFSUB__(v15, 1);
        int v17 = v15 - 1;
        if (v17 < 0 == v16) {
          *((_DWORD *)a2 + 14) = v17;
        }
        int v18 = (unsigned char *)*((void *)a2 + 1);
        if ((unint64_t)v18 >= *((void *)a2 + 2) || *v18 != 18) {
          continue;
        }
        *((void *)a2 + 1) = v18 + 1;
        goto LABEL_42;
      case 2u:
        int v9 = TagFallback & 7;
        if (v9 != 2) {
          goto LABEL_30;
        }
LABEL_42:
        *((_DWORD *)this + 33) |= 2u;
        uint64_t v19 = (CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReport *)*((void *)this + 2);
        if (!v19) {
          operator new();
        }
        v73[0] = 0;
        uint64_t v20 = (char *)*((void *)a2 + 1);
        if ((unint64_t)v20 >= *((void *)a2 + 2) || *v20 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v73))return 0; {
        }
          }
        else
        {
          v73[0] = *v20;
          *((void *)a2 + 1) = v20 + 1;
        }
        int v21 = *((_DWORD *)a2 + 14);
        int v22 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v21 + 1;
        if (v21 >= v22) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReport::MergePartialFromCodedStream(v19, a2)|| !*((unsigned char *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        int v23 = *((_DWORD *)a2 + 14);
        BOOL v16 = __OFSUB__(v23, 1);
        int v24 = v23 - 1;
        if (v24 < 0 == v16) {
          *((_DWORD *)a2 + 14) = v24;
        }
        int v25 = (unsigned char *)*((void *)a2 + 1);
        if ((unint64_t)v25 >= *((void *)a2 + 2) || *v25 != 26) {
          continue;
        }
        do
        {
          *((void *)a2 + 1) = v25 + 1;
LABEL_56:
          int v26 = *((_DWORD *)this + 9);
          uint64_t v27 = *((int *)this + 8);
          if ((int)v27 >= v26)
          {
            if (v26 == *((_DWORD *)this + 10))
            {
              wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v4);
              int v26 = *((_DWORD *)this + 9);
            }
            *((_DWORD *)this + 9) = v26 + 1;
            operator new();
          }
          uint64_t v28 = *((void *)this + 3);
          *((_DWORD *)this + 8) = v27 + 1;
          int v29 = *(CoreNavigation::CLP::LogEntry::PrivateData::SvInfo **)(v28 + 8 * v27);
          v73[0] = 0;
          unsigned int v30 = (char *)*((void *)a2 + 1);
          if ((unint64_t)v30 >= *((void *)a2 + 2) || *v30 < 0)
          {
            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v73))return 0; {
          }
            }
          else
          {
            v73[0] = *v30;
            *((void *)a2 + 1) = v30 + 1;
          }
          int v31 = *((_DWORD *)a2 + 14);
          int v32 = *((_DWORD *)a2 + 15);
          *((_DWORD *)a2 + 14) = v31 + 1;
          if (v31 >= v32) {
            return 0;
          }
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
          if (!CoreNavigation::CLP::LogEntry::PrivateData::SvInfo::MergePartialFromCodedStream(v29, a2)
            || !*((unsigned char *)a2 + 36))
          {
            return 0;
          }
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
          int v33 = *((_DWORD *)a2 + 14);
          BOOL v16 = __OFSUB__(v33, 1);
          int v34 = v33 - 1;
          if (v34 < 0 == v16) {
            *((_DWORD *)a2 + 14) = v34;
          }
          int v25 = (unsigned char *)*((void *)a2 + 1);
          if ((unint64_t)v25 >= *((void *)a2 + 2)) {
            goto LABEL_2;
          }
          int v35 = *v25;
        }
        while (v35 == 26);
        if (v35 != 34) {
          continue;
        }
        do
        {
          *((void *)a2 + 1) = v25 + 1;
LABEL_74:
          int v36 = *((_DWORD *)this + 15);
          uint64_t v37 = *((int *)this + 14);
          if ((int)v37 >= v36)
          {
            if (v36 == *((_DWORD *)this + 16))
            {
              wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v5);
              int v36 = *((_DWORD *)this + 15);
            }
            *((_DWORD *)this + 15) = v36 + 1;
            operator new();
          }
          uint64_t v38 = *((void *)this + 6);
          *((_DWORD *)this + 14) = v37 + 1;
          int v39 = *(CoreNavigation::CLP::LogEntry::PrivateData::ReceiverBandCorrections **)(v38 + 8 * v37);
          v73[0] = 0;
          int v40 = (char *)*((void *)a2 + 1);
          if ((unint64_t)v40 >= *((void *)a2 + 2) || *v40 < 0)
          {
            if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v73))return 0; {
          }
            }
          else
          {
            v73[0] = *v40;
            *((void *)a2 + 1) = v40 + 1;
          }
          int v41 = *((_DWORD *)a2 + 14);
          int v42 = *((_DWORD *)a2 + 15);
          *((_DWORD *)a2 + 14) = v41 + 1;
          if (v41 >= v42) {
            return 0;
          }
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
          if (!CoreNavigation::CLP::LogEntry::PrivateData::ReceiverBandCorrections::MergePartialFromCodedStream(v39, a2)|| !*((unsigned char *)a2 + 36))
          {
            return 0;
          }
          wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
          int v43 = *((_DWORD *)a2 + 14);
          BOOL v16 = __OFSUB__(v43, 1);
          int v44 = v43 - 1;
          if (v44 < 0 == v16) {
            *((_DWORD *)a2 + 14) = v44;
          }
          int v25 = (unsigned char *)*((void *)a2 + 1);
          if ((unint64_t)v25 >= *((void *)a2 + 2)) {
            goto LABEL_2;
          }
          int v45 = *v25;
        }
        while (v45 == 34);
        if (v45 != 42) {
          continue;
        }
        *((void *)a2 + 1) = v25 + 1;
LABEL_92:
        *((_DWORD *)this + 33) |= 0x10u;
        int v46 = (CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo *)*((void *)this + 9);
        if (!v46) {
          operator new();
        }
        v73[0] = 0;
        int v47 = (char *)*((void *)a2 + 1);
        if ((unint64_t)v47 >= *((void *)a2 + 2) || *v47 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v73))return 0; {
        }
          }
        else
        {
          v73[0] = *v47;
          *((void *)a2 + 1) = v47 + 1;
        }
        int v48 = *((_DWORD *)a2 + 14);
        int v49 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v48 + 1;
        if (v48 >= v49) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo::MergePartialFromCodedStream(v46, a2)|| !*((unsigned char *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        int v50 = *((_DWORD *)a2 + 14);
        BOOL v16 = __OFSUB__(v50, 1);
        int v51 = v50 - 1;
        if (v51 < 0 == v16) {
          *((_DWORD *)a2 + 14) = v51;
        }
        int v52 = (unsigned char *)*((void *)a2 + 1);
        if ((unint64_t)v52 >= *((void *)a2 + 2) || *v52 != 49) {
          continue;
        }
        *((void *)a2 + 1) = v52 + 1;
LABEL_106:
        *(void *)uint64_t v73 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, (unint64_t *)v73) & 1) == 0)return 0; {
        *((void *)this + 10) = *(void *)v73;
        }
        *((_DWORD *)this + 33) |= 0x20u;
        int v53 = (unsigned char *)*((void *)a2 + 1);
        if ((unint64_t)v53 >= *((void *)a2 + 2) || *v53 != 57) {
          continue;
        }
        *((void *)a2 + 1) = v53 + 1;
LABEL_110:
        *(void *)uint64_t v73 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(a2, (unint64_t *)v73) & 1) == 0)return 0; {
        *((void *)this + 11) = *(void *)v73;
        }
        int v12 = *((_DWORD *)this + 33) | 0x40;
        *((_DWORD *)this + 33) = v12;
        int v54 = (unsigned char *)*((void *)a2 + 1);
        if ((unint64_t)v54 >= *((void *)a2 + 2) || *v54 != 66) {
          continue;
        }
        *((void *)a2 + 1) = v54 + 1;
LABEL_114:
        *((_DWORD *)this + 33) = v12 | 0x80;
        int v55 = (CoreNavigation::CLP::LogEntry::PrivateData::KlobucharModelParameters *)*((void *)this + 12);
        if (!v55) {
          operator new();
        }
        v73[0] = 0;
        int v56 = (char *)*((void *)a2 + 1);
        if ((unint64_t)v56 >= *((void *)a2 + 2) || *v56 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v73))return 0; {
        }
          }
        else
        {
          v73[0] = *v56;
          *((void *)a2 + 1) = v56 + 1;
        }
        int v57 = *((_DWORD *)a2 + 14);
        int v58 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v57 + 1;
        if (v57 >= v58) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
        if (!CoreNavigation::CLP::LogEntry::PrivateData::KlobucharModelParameters::MergePartialFromCodedStream(v55, a2)|| !*((unsigned char *)a2 + 36))
        {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
        int v59 = *((_DWORD *)a2 + 14);
        BOOL v16 = __OFSUB__(v59, 1);
        int v60 = v59 - 1;
        if (v60 < 0 == v16) {
          *((_DWORD *)a2 + 14) = v60;
        }
        v61 = (unsigned char *)*((void *)a2 + 1);
        if ((unint64_t)v61 < *((void *)a2 + 2) && *v61 == 74)
        {
          do
          {
            *((void *)a2 + 1) = v61 + 1;
LABEL_128:
            int v62 = *((_DWORD *)this + 29);
            uint64_t v63 = *((int *)this + 28);
            if ((int)v63 >= v62)
            {
              if (v62 == *((_DWORD *)this + 30))
              {
                wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v6);
                int v62 = *((_DWORD *)this + 29);
              }
              *((_DWORD *)this + 29) = v62 + 1;
              operator new();
            }
            uint64_t v64 = *((void *)this + 13);
            *((_DWORD *)this + 28) = v63 + 1;
            int v65 = *(CoreNavigation::CLP::LogEntry::PrivateData::AntennaPhaseCenterSvOffset **)(v64 + 8 * v63);
            v73[0] = 0;
            unsigned int v66 = (char *)*((void *)a2 + 1);
            if ((unint64_t)v66 >= *((void *)a2 + 2) || *v66 < 0)
            {
              if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v73))return 0; {
            }
              }
            else
            {
              v73[0] = *v66;
              *((void *)a2 + 1) = v66 + 1;
            }
            int v67 = *((_DWORD *)a2 + 14);
            int v68 = *((_DWORD *)a2 + 15);
            *((_DWORD *)a2 + 14) = v67 + 1;
            if (v67 >= v68) {
              return 0;
            }
            wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
            if (!CoreNavigation::CLP::LogEntry::PrivateData::AntennaPhaseCenterSvOffset::MergePartialFromCodedStream(v65, a2)|| !*((unsigned char *)a2 + 36))
            {
              return 0;
            }
            wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
            int v69 = *((_DWORD *)a2 + 14);
            BOOL v16 = __OFSUB__(v69, 1);
            int v70 = v69 - 1;
            if (v70 < 0 == v16) {
              *((_DWORD *)a2 + 14) = v70;
            }
            v61 = (unsigned char *)*((void *)a2 + 1);
            int v71 = (unsigned char *)*((void *)a2 + 2);
          }
          while (v61 < v71 && *v61 == 74);
          if (v61 == v71 && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
          {
            *((_DWORD *)a2 + 8) = 0;
            uint64_t result = 1;
            *((unsigned char *)a2 + 36) = 1;
            return result;
          }
        }
        break;
      case 3u:
        int v9 = TagFallback & 7;
        if (v9 == 2) {
          goto LABEL_56;
        }
        goto LABEL_30;
      case 4u:
        int v9 = TagFallback & 7;
        if (v9 == 2) {
          goto LABEL_74;
        }
        goto LABEL_30;
      case 5u:
        int v9 = TagFallback & 7;
        if (v9 == 2) {
          goto LABEL_92;
        }
        goto LABEL_30;
      case 6u:
        int v9 = TagFallback & 7;
        if (v9 == 1) {
          goto LABEL_106;
        }
        goto LABEL_30;
      case 7u:
        int v9 = TagFallback & 7;
        if (v9 == 1) {
          goto LABEL_110;
        }
        goto LABEL_30;
      case 8u:
        int v9 = TagFallback & 7;
        if (v9 != 2) {
          goto LABEL_30;
        }
        int v12 = *((_DWORD *)this + 33);
        goto LABEL_114;
      case 9u:
        int v9 = TagFallback & 7;
        if (v9 != 2) {
          goto LABEL_30;
        }
        goto LABEL_128;
      default:
        int v9 = TagFallback & 7;
LABEL_30:
        if (v9 == 4) {
          return 1;
        }
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0; {
        continue;
        }
    }
  }
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = this;
  int v6 = *(_DWORD *)(this + 132);
  if (v6)
  {
    uint64_t v7 = *(void *)(this + 8);
    if (!v7)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)this);
      uint64_t v7 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents::default_instance_
                     + 8);
    }
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v7, a2, a4);
    int v6 = *(_DWORD *)(v5 + 132);
  }
  if ((v6 & 2) != 0)
  {
    uint64_t v8 = *(void *)(v5 + 16);
    if (!v8)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)this);
      uint64_t v8 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents::default_instance_
                     + 16);
    }
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v8, a2, a4);
  }
  if (*(int *)(v5 + 32) >= 1)
  {
    uint64_t v9 = 0;
    do
      this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(void *)(*(void *)(v5 + 24) + 8 * v9++), a2, a4);
    while (v9 < *(int *)(v5 + 32));
  }
  if (*(int *)(v5 + 56) >= 1)
  {
    uint64_t v10 = 0;
    do
      this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(void *)(*(void *)(v5 + 48) + 8 * v10++), a2, a4);
    while (v10 < *(int *)(v5 + 56));
  }
  int v11 = *(_DWORD *)(v5 + 132);
  if ((v11 & 0x10) != 0)
  {
    uint64_t v12 = *(void *)(v5 + 72);
    if (!v12)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)this);
      uint64_t v12 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents::default_instance_
                      + 72);
    }
    this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, v12, a2, a4);
    int v11 = *(_DWORD *)(v5 + 132);
    if ((v11 & 0x20) == 0)
    {
LABEL_17:
      if ((v11 & 0x40) == 0) {
        goto LABEL_18;
      }
      goto LABEL_24;
    }
  }
  else if ((v11 & 0x20) == 0)
  {
    goto LABEL_17;
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, (uint64_t)a2, *(double *)(v5 + 80), a3);
  int v11 = *(_DWORD *)(v5 + 132);
  if ((v11 & 0x40) == 0)
  {
LABEL_18:
    if ((v11 & 0x80) == 0) {
      goto LABEL_28;
    }
    goto LABEL_25;
  }
LABEL_24:
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, (uint64_t)a2, *(double *)(v5 + 88), a3);
  if ((*(_DWORD *)(v5 + 132) & 0x80) == 0) {
    goto LABEL_28;
  }
LABEL_25:
  uint64_t v13 = *(void *)(v5 + 96);
  if (!v13)
  {
    CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto((CoreNavigation::CLP::LogEntry::PrivateData *)this);
    uint64_t v13 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents::default_instance_
                    + 96);
  }
  this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, v13, a2, a4);
LABEL_28:
  if (*(int *)(v5 + 112) >= 1)
  {
    uint64_t v14 = 0;
    do
      this = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9, *(void *)(*(void *)(v5 + 104) + 8 * v14++), a2, a4);
    while (v14 < *(int *)(v5 + 112));
  }
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents::ByteSize(CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents *this)
{
  LOBYTE(v2) = *((unsigned char *)this + 132);
  if (!(_BYTE)v2)
  {
    int v4 = 0;
    goto LABEL_40;
  }
  if (*((unsigned char *)this + 132))
  {
    uint64_t v5 = *((void *)this + 1);
    if (!v5)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(this);
      uint64_t v5 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents::default_instance_
                     + 8);
    }
    int v6 = *(unsigned __int8 *)(v5 + 36);
    if (*(unsigned char *)(v5 + 36))
    {
      int v7 = (v6 << 31 >> 31) & 9;
      if ((v6 & 2) != 0) {
        v7 += 9;
      }
      if ((v6 & 4) != 0) {
        int v6 = v7 + 9;
      }
      else {
        int v6 = v7;
      }
    }
    *(_DWORD *)(v5 + 32) = v6;
    int v3 = v6 + 2;
    int v2 = *((_DWORD *)this + 33);
    if ((v2 & 2) == 0) {
      goto LABEL_21;
    }
    goto LABEL_15;
  }
  int v3 = 0;
  if ((*((unsigned char *)this + 132) & 2) != 0)
  {
LABEL_15:
    uint64_t v8 = (CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReport *)*((void *)this + 2);
    if (!v8)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(0);
      uint64_t v8 = *(CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReport **)(CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents::default_instance_
                                                                             + 16);
    }
    uint64_t v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReport::ByteSize(v8);
    int v10 = (int)v9;
    if (v9 >= 0x80) {
      int v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9);
    }
    else {
      int v11 = 1;
    }
    v3 += v10 + v11 + 1;
    int v2 = *((_DWORD *)this + 33);
  }
LABEL_21:
  if ((v2 & 0x10) != 0)
  {
    uint64_t v12 = (CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo *)*((void *)this + 9);
    if (!v12)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(0);
      uint64_t v12 = *(CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo **)(CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents::default_instance_
                                                                               + 72);
    }
    uint64_t v13 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CoreNavigation::CLP::LogEntry::PrivateData::TimeConversionInfo::ByteSize(v12);
    int v14 = (int)v13;
    if (v13 >= 0x80) {
      int v15 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v13);
    }
    else {
      int v15 = 1;
    }
    v3 += v14 + v15 + 1;
    int v2 = *((_DWORD *)this + 33);
  }
  int v16 = v3 + 9;
  if ((v2 & 0x20) == 0) {
    int v16 = v3;
  }
  if ((v2 & 0x40) != 0) {
    int v4 = v16 + 9;
  }
  else {
    int v4 = v16;
  }
  if ((v2 & 0x80) != 0)
  {
    int v17 = (CoreNavigation::CLP::LogEntry::PrivateData::KlobucharModelParameters *)*((void *)this + 12);
    if (!v17)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPGnssMeasApi_2eproto(0);
      int v17 = *(CoreNavigation::CLP::LogEntry::PrivateData::KlobucharModelParameters **)(CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents::default_instance_
                                                                                     + 96);
    }
    int v18 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CoreNavigation::CLP::LogEntry::PrivateData::KlobucharModelParameters::ByteSize(v17);
    int v19 = (int)v18;
    if (v18 >= 0x80) {
      int v20 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v18);
    }
    else {
      int v20 = 1;
    }
    v4 += v19 + v20 + 1;
  }
LABEL_40:
  int v21 = *((_DWORD *)this + 8);
  int v22 = v21 + v4;
  if (v21 >= 1)
  {
    uint64_t v23 = 0;
    do
    {
      int v24 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CoreNavigation::CLP::LogEntry::PrivateData::SvInfo::ByteSize(*(CoreNavigation::CLP::LogEntry::PrivateData::SvInfo **)(*((void *)this + 3) + 8 * v23));
      int v25 = (int)v24;
      if (v24 >= 0x80) {
        int v26 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v24);
      }
      else {
        int v26 = 1;
      }
      v22 += v25 + v26;
      ++v23;
    }
    while (v23 < *((int *)this + 8));
  }
  int v27 = *((_DWORD *)this + 14);
  int v28 = v27 + v22;
  if (v27 >= 1)
  {
    uint64_t v29 = 0;
    do
    {
      unsigned int v30 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CoreNavigation::CLP::LogEntry::PrivateData::ReceiverBandCorrections::ByteSize(*(CoreNavigation::CLP::LogEntry::PrivateData::ReceiverBandCorrections **)(*((void *)this + 6) + 8 * v29));
      int v31 = (int)v30;
      if (v30 >= 0x80) {
        int v32 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v30);
      }
      else {
        int v32 = 1;
      }
      v28 += v31 + v32;
      ++v29;
    }
    while (v29 < *((int *)this + 14));
  }
  int v33 = *((_DWORD *)this + 28);
  uint64_t v34 = (v33 + v28);
  if (v33 >= 1)
  {
    uint64_t v35 = 0;
    do
    {
      int v36 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CoreNavigation::CLP::LogEntry::PrivateData::AntennaPhaseCenterSvOffset::ByteSize(*(void *)(*((void *)this + 13) + 8 * v35));
      int v37 = (int)v36;
      if (v36 >= 0x80) {
        int v38 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v36);
      }
      else {
        int v38 = 1;
      }
      uint64_t v34 = (v37 + v34 + v38);
      ++v35;
    }
    while (v35 < *((int *)this + 28));
  }
  *((_DWORD *)this + 32) = v34;
  return v34;
}

float CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents::CheckTypeAndMergeFrom(CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  return CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents::MergeFrom(this, lpsrc);
}

float CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents::CopyFrom(CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents *this, const CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents *a2)
{
  if (a2 != this)
  {
    (*(void (**)(CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents *))(*(void *)this + 32))(this);
    return CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents::MergeFrom(this, a2);
  }
  return result;
}

uint64_t CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents::IsInitialized(CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents *this)
{
  return 1;
}

CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents *CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents::Swap(CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents *this, CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents *a2)
{
  if (a2 != this)
  {
    int v3 = this;
    uint64_t v4 = *((void *)this + 1);
    *((void *)this + 1) = *((void *)a2 + 1);
    *((void *)a2 + 1) = v4;
    uint64_t v5 = *((void *)this + 2);
    *((void *)this + 2) = *((void *)a2 + 2);
    *((void *)a2 + 2) = v5;
    wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Swap();
    wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Swap();
    uint64_t v6 = *((void *)v3 + 9);
    *((void *)v3 + 9) = *((void *)a2 + 9);
    *((void *)a2 + 9) = v6;
    uint64_t v7 = *((void *)v3 + 10);
    *((void *)v3 + 10) = *((void *)a2 + 10);
    *((void *)a2 + 10) = v7;
    uint64_t v8 = *((void *)v3 + 11);
    *((void *)v3 + 11) = *((void *)a2 + 11);
    *((void *)a2 + 11) = v8;
    uint64_t v9 = *((void *)v3 + 12);
    *((void *)v3 + 12) = *((void *)a2 + 12);
    *((void *)a2 + 12) = v9;
    this = (CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents *)wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Swap();
    int v10 = *((_DWORD *)v3 + 33);
    *((_DWORD *)v3 + 33) = *((_DWORD *)a2 + 33);
    *((_DWORD *)a2 + 33) = v10;
    int v11 = *((_DWORD *)v3 + 32);
    *((_DWORD *)v3 + 32) = *((_DWORD *)a2 + 32);
    *((_DWORD *)a2 + 32) = v11;
  }
  return this;
}

void *CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents::GetTypeName@<X0>(void *a1@<X8>)
{
  return sub_18DEDE7B0(a1, "CoreNavigation.CLP.LogEntry.PrivateData.MeasurementReportCallbackContents");
}

uint64_t sub_18DFDF124(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16);
}

uint64_t sub_18DFDF12C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

uint64_t sub_18DFDF134(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t sub_18DFDF13C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

uint64_t sub_18DFDF144(uint64_t a1)
{
  return *(unsigned int *)(a1 + 12);
}

uint64_t sub_18DFDF14C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16);
}

uint64_t sub_18DFDF154(uint64_t a1)
{
  return *(unsigned int *)(a1 + 12);
}

uint64_t sub_18DFDF15C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16);
}

uint64_t sub_18DFDF164(uint64_t a1)
{
  return *(unsigned int *)(a1 + 12);
}

uint64_t sub_18DFDF16C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 12);
}

uint64_t sub_18DFDF174(uint64_t a1)
{
  return *(unsigned int *)(a1 + 12);
}

uint64_t sub_18DFDF17C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

uint64_t sub_18DFDF184(uint64_t a1)
{
  return *(unsigned int *)(a1 + 12);
}

uint64_t sub_18DFDF18C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 92);
}

uint64_t sub_18DFDF194(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

uint64_t sub_18DFDF19C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

uint64_t sub_18DFDF1A4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

uint64_t sub_18DFDF1AC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 44);
}

uint64_t sub_18DFDF1B4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

uint64_t sub_18DFDF1BC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

uint64_t sub_18DFDF1C4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

uint64_t sub_18DFDF1CC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 112);
}

uint64_t sub_18DFDF1D4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 108);
}

uint64_t sub_18DFDF1DC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

uint64_t sub_18DFDF1E4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

uint64_t sub_18DFDF1EC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 36);
}

uint64_t sub_18DFDF1F4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t sub_18DFDF1FC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t sub_18DFDF204(uint64_t a1)
{
  return *(unsigned int *)(a1 + 32);
}

uint64_t sub_18DFDF20C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t sub_18DFDF214(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t sub_18DFDF21C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 72);
}

uint64_t sub_18DFDF224(uint64_t a1)
{
  return *(unsigned int *)(a1 + 168);
}

uint64_t sub_18DFDF22C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

uint64_t sub_18DFDF234(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

uint64_t sub_18DFDF23C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t sub_18DFDF244(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t sub_18DFDF24C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

uint64_t sub_18DFDF254(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t sub_18DFDF25C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 36);
}

uint64_t sub_18DFDF264(uint64_t a1)
{
  return *(unsigned int *)(a1 + 32);
}

uint64_t sub_18DFDF26C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 52);
}

uint64_t sub_18DFDF274(uint64_t a1)
{
  return *(unsigned int *)(a1 + 36);
}

uint64_t sub_18DFDF27C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

uint64_t sub_18DFDF284(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

uint64_t sub_18DFDF28C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

uint64_t sub_18DFDF294(uint64_t a1)
{
  return *(unsigned int *)(a1 + 32);
}

uint64_t sub_18DFDF29C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 32);
}

uint64_t sub_18DFDF2A4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 32);
}

uint64_t sub_18DFDF2AC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 128);
}

uint64_t CoreNavigation::CLP::LogEntry::InternalToolData::protobuf_ShutdownFile_CoreNavigationCLPInternalToolData_2eproto(CoreNavigation::CLP::LogEntry::InternalToolData *this)
{
  uint64_t result = CoreNavigation::CLP::LogEntry::InternalToolData::InternalToolDataCapture::default_instance_;
  if (CoreNavigation::CLP::LogEntry::InternalToolData::InternalToolDataCapture::default_instance_) {
    return (*(uint64_t (**)(void))(*(void *)CoreNavigation::CLP::LogEntry::InternalToolData::InternalToolDataCapture::default_instance_
  }
                                + 8))();
  return result;
}

void CoreNavigation::CLP::LogEntry::InternalToolData::protobuf_AddDesc_CoreNavigationCLPInternalToolData_2eproto_impl(CoreNavigation::CLP::LogEntry::InternalToolData *this, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t v4 = (CoreNavigation::CLP::LogEntry::InternalToolData::GnssMsmtAnalysisToolData *)wireless_diagnostics::google::protobuf::internal::VerifyVersion((wireless_diagnostics::google::protobuf::internal *)0x1E9808, 2005000, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CoreNavigation/shared/cnprotobuf/CoreNavigationCLPInternalToolData.pb.cc", a4);
  CoreNavigation::CLP::LogEntry::InternalToolData::GnssMsmtAnalysisToolData::protobuf_AddDesc_CoreNavigationCLPGnssMsmtAnalysisToolData_2eproto(v4);
  operator new();
}

void *CoreNavigation::CLP::LogEntry::InternalToolData::InternalToolDataCapture::InternalToolDataCapture(void *this)
{
  this[1] = 0;
  this[2] = 0;
  *this = &unk_1EDD0F458;
  return this;
}

{
  this[1] = 0;
  this[2] = 0;
  *this = &unk_1EDD0F458;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::InternalToolData::InternalToolDataCapture::InitAsDefaultInstance(uint64_t this)
{
  *(void *)(this + 8) = CoreNavigation::CLP::LogEntry::InternalToolData::GnssMsmtAnalysisToolData::GnssMsmtAnalysisToolDataCapture::default_instance_;
  return this;
}

void CoreNavigation::CLP::LogEntry::InternalToolData::protobuf_AddDesc_CoreNavigationCLPInternalToolData_2eproto(CoreNavigation::CLP::LogEntry::InternalToolData *this)
{
  uint64_t v1 = CoreNavigation::CLP::LogEntry::InternalToolData::protobuf_AddDesc_CoreNavigationCLPInternalToolData_2eproto_once_;
  __dmb(0xBu);
  if (v1 != 2)
  {
    v2[0] = MEMORY[0x1E4FBA938] + 16;
    v2[1] = CoreNavigation::CLP::LogEntry::InternalToolData::protobuf_AddDesc_CoreNavigationCLPInternalToolData_2eproto_impl;
    char v3 = 0;
    wireless_diagnostics::google::protobuf::GoogleOnceInitImpl();
    wireless_diagnostics::google::protobuf::internal::FunctionClosure0::~FunctionClosure0((wireless_diagnostics::google::protobuf::internal::FunctionClosure0 *)v2);
  }
}

void sub_18DFDF444(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  wireless_diagnostics::google::protobuf::internal::FunctionClosure0::~FunctionClosure0((wireless_diagnostics::google::protobuf::internal::FunctionClosure0 *)va);
  _Unwind_Resume(a1);
}

uint64_t CoreNavigation::CLP::LogEntry::InternalToolData::InternalToolDataCapture::SharedCtor(uint64_t this)
{
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  return this;
}

CoreNavigation::CLP::LogEntry::InternalToolData::InternalToolDataCapture *CoreNavigation::CLP::LogEntry::InternalToolData::InternalToolDataCapture::InternalToolDataCapture(CoreNavigation::CLP::LogEntry::InternalToolData::InternalToolDataCapture *this, const CoreNavigation::CLP::LogEntry::InternalToolData::InternalToolDataCapture *a2)
{
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = &unk_1EDD0F458;
  CoreNavigation::CLP::LogEntry::InternalToolData::InternalToolDataCapture::MergeFrom(this, a2);
  return this;
}

void sub_18DFDF4CC(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(v1);
  _Unwind_Resume(a1);
}

void CoreNavigation::CLP::LogEntry::InternalToolData::InternalToolDataCapture::MergeFrom(CoreNavigation::CLP::LogEntry::InternalToolData::InternalToolDataCapture *this, const CoreNavigation::CLP::LogEntry::InternalToolData::InternalToolDataCapture *a2)
{
  if (a2 == this)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v6);
  }
  if (*((unsigned char *)a2 + 20))
  {
    *((_DWORD *)this + 5) |= 1u;
    uint64_t v4 = (CoreNavigation::CLP::LogEntry::InternalToolData::GnssMsmtAnalysisToolData::GnssMsmtAnalysisToolDataCapture *)*((void *)this + 1);
    if (!v4) {
      operator new();
    }
    uint64_t v5 = (const CoreNavigation::CLP::LogEntry::InternalToolData::GnssMsmtAnalysisToolData::GnssMsmtAnalysisToolDataCapture *)*((void *)a2 + 1);
    if (!v5)
    {
      CoreNavigation::CLP::LogEntry::InternalToolData::protobuf_AddDesc_CoreNavigationCLPInternalToolData_2eproto(this);
      uint64_t v5 = *(const CoreNavigation::CLP::LogEntry::InternalToolData::GnssMsmtAnalysisToolData::GnssMsmtAnalysisToolDataCapture **)(CoreNavigation::CLP::LogEntry::InternalToolData::InternalToolDataCapture::default_instance_ + 8);
    }
    CoreNavigation::CLP::LogEntry::InternalToolData::GnssMsmtAnalysisToolData::GnssMsmtAnalysisToolDataCapture::MergeFrom(v4, v5);
  }
}

void sub_18DFDF61C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void CoreNavigation::CLP::LogEntry::InternalToolData::InternalToolDataCapture::~InternalToolDataCapture(CoreNavigation::CLP::LogEntry::InternalToolData::InternalToolDataCapture *this)
{
  *(void *)this = &unk_1EDD0F458;
  CoreNavigation::CLP::LogEntry::InternalToolData::InternalToolDataCapture::SharedDtor(this);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

{
  uint64_t vars8;

  CoreNavigation::CLP::LogEntry::InternalToolData::InternalToolDataCapture::~InternalToolDataCapture(this);

  JUMPOUT(0x192FA6240);
}

void CoreNavigation::CLP::LogEntry::InternalToolData::InternalToolDataCapture::SharedDtor(CoreNavigation::CLP::LogEntry::InternalToolData::InternalToolDataCapture *this)
{
  CoreNavigation::CLP::LogEntry::InternalToolData::protobuf_AddDesc_CoreNavigationCLPInternalToolData_2eproto(this);
  if ((CoreNavigation::CLP::LogEntry::InternalToolData::InternalToolDataCapture *)CoreNavigation::CLP::LogEntry::InternalToolData::InternalToolDataCapture::default_instance_ != this)
  {
    uint64_t v2 = *((void *)this + 1);
    if (v2)
    {
      char v3 = *(void (**)(void))(*(void *)v2 + 8);
      v3();
    }
  }
}

uint64_t CoreNavigation::CLP::LogEntry::InternalToolData::InternalToolDataCapture::default_instance(CoreNavigation::CLP::LogEntry::InternalToolData::InternalToolDataCapture *this)
{
  return CoreNavigation::CLP::LogEntry::InternalToolData::InternalToolDataCapture::default_instance_;
}

uint64_t CoreNavigation::CLP::LogEntry::InternalToolData::InternalToolDataCapture::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 16) = a2;
  return this;
}

void CoreNavigation::CLP::LogEntry::InternalToolData::InternalToolDataCapture::New(CoreNavigation::CLP::LogEntry::InternalToolData::InternalToolDataCapture *this)
{
}

uint64_t CoreNavigation::CLP::LogEntry::InternalToolData::InternalToolDataCapture::Clear(uint64_t this)
{
  uint64_t v1 = this;
  if (*(unsigned char *)(this + 20))
  {
    this = *(void *)(this + 8);
    if (this) {
      this = CoreNavigation::CLP::LogEntry::InternalToolData::GnssMsmtAnalysisToolData::GnssMsmtAnalysisToolDataCapture::Clear((CoreNavigation::CLP::LogEntry::InternalToolData::GnssMsmtAnalysisToolData::GnssMsmtAnalysisToolDataCapture *)this);
    }
  }
  *(_DWORD *)(v1 + 20) = 0;
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::InternalToolData::InternalToolDataCapture::MergePartialFromCodedStream(CoreNavigation::CLP::LogEntry::InternalToolData::InternalToolDataCapture *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  while (1)
  {
    while (1)
    {
      uint64_t v4 = (char *)*((void *)a2 + 1);
      if ((unint64_t)v4 >= *((void *)a2 + 2) || *v4 < 0)
      {
        unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(a2);
        *((_DWORD *)a2 + 8) = TagFallback;
      }
      else
      {
        unint64_t TagFallback = *v4;
        *((_DWORD *)a2 + 8) = TagFallback;
        *((void *)a2 + 1) = v4 + 1;
      }
      if (TagFallback != 10) {
        break;
      }
      *((_DWORD *)this + 5) |= 1u;
      uint64_t v6 = (CoreNavigation::CLP::LogEntry::InternalToolData::GnssMsmtAnalysisToolData::GnssMsmtAnalysisToolDataCapture *)*((void *)this + 1);
      if (!v6) {
        operator new();
      }
      unsigned int v14 = 0;
      uint64_t v7 = (char *)*((void *)a2 + 1);
      if ((unint64_t)v7 >= *((void *)a2 + 2) || *v7 < 0)
      {
        if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v14)) {
          return 0;
        }
      }
      else
      {
        unsigned int v14 = *v7;
        *((void *)a2 + 1) = v7 + 1;
      }
      int v8 = *((_DWORD *)a2 + 14);
      int v9 = *((_DWORD *)a2 + 15);
      *((_DWORD *)a2 + 14) = v8 + 1;
      if (v8 >= v9) {
        return 0;
      }
      wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(a2);
      if (!CoreNavigation::CLP::LogEntry::InternalToolData::GnssMsmtAnalysisToolData::GnssMsmtAnalysisToolDataCapture::MergePartialFromCodedStream(v6, a2)|| !*((unsigned char *)a2 + 36))
      {
        return 0;
      }
      wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(a2);
      int v10 = *((_DWORD *)a2 + 14);
      BOOL v11 = __OFSUB__(v10, 1);
      int v12 = v10 - 1;
      if (v12 < 0 == v11) {
        *((_DWORD *)a2 + 14) = v12;
      }
      if (*((void *)a2 + 1) == *((void *)a2 + 2)
        && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
      {
        *((_DWORD *)a2 + 8) = 0;
        uint64_t result = 1;
        *((unsigned char *)a2 + 36) = 1;
        return result;
      }
    }
    if (!TagFallback || (TagFallback & 7) == 4) {
      break;
    }
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(a2, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback) & 1) == 0)return 0; {
  }
    }
  return 1;
}

uint64_t CoreNavigation::CLP::LogEntry::InternalToolData::InternalToolDataCapture::SerializeWithCachedSizes(uint64_t this, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  if (*(unsigned char *)(this + 20))
  {
    uint64_t v5 = *(void *)(this + 8);
    if (!v5)
    {
      CoreNavigation::CLP::LogEntry::InternalToolData::protobuf_AddDesc_CoreNavigationCLPInternalToolData_2eproto((CoreNavigation::CLP::LogEntry::InternalToolData *)this);
      uint64_t v5 = *(void *)(CoreNavigation::CLP::LogEntry::InternalToolData::InternalToolDataCapture::default_instance_ + 8);
    }
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v5, a2, a4);
  }
  return this;
}

uint64_t CoreNavigation::CLP::LogEntry::InternalToolData::InternalToolDataCapture::ByteSize(CoreNavigation::CLP::LogEntry::InternalToolData::InternalToolDataCapture *this)
{
  if (*((unsigned char *)this + 20))
  {
    char v3 = (CoreNavigation::CLP::LogEntry::InternalToolData::GnssMsmtAnalysisToolData::GnssMsmtAnalysisToolDataCapture *)*((void *)this + 1);
    if (!v3)
    {
      CoreNavigation::CLP::LogEntry::InternalToolData::protobuf_AddDesc_CoreNavigationCLPInternalToolData_2eproto(0);
      char v3 = *(CoreNavigation::CLP::LogEntry::InternalToolData::GnssMsmtAnalysisToolData::GnssMsmtAnalysisToolDataCapture **)(CoreNavigation::CLP::LogEntry::InternalToolData::InternalToolDataCapture::default_instance_ + 8);
    }
    uint64_t v4 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)CoreNavigation::CLP::LogEntry::InternalToolData::GnssMsmtAnalysisToolData::GnssMsmtAnalysisToolDataCapture::ByteSize(v3);
    int v5 = (int)v4;
    if (v4 >= 0x80) {
      int v6 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v4);
    }
    else {
      int v6 = 1;
    }
    uint64_t result = (v5 + v6 + 1);
  }
  else
  {
    uint64_t result = 0;
  }
  *((_DWORD *)this + 4) = result;
  return result;
}

void CoreNavigation::CLP::LogEntry::InternalToolData::InternalToolDataCapture::CheckTypeAndMergeFrom(CoreNavigation::CLP::LogEntry::InternalToolData::InternalToolDataCapture *this, const wireless_diagnostics::google::protobuf::MessageLite *lpsrc)
{
  CoreNavigation::CLP::LogEntry::InternalToolData::InternalToolDataCapture::MergeFrom(this, lpsrc);
}

void CoreNavigation::CLP::LogEntry::InternalToolData::InternalToolDataCapture::CopyFrom(CoreNavigation::CLP::LogEntry::InternalToolData::InternalToolDataCapture *this, const CoreNavigation::CLP::LogEntry::InternalToolData::InternalToolDataCapture *a2)
{
  if (a2 != this)
  {
    (*(void (**)(CoreNavigation::CLP::LogEntry::InternalToolData::InternalToolDataCapture *))(*(void *)this + 32))(this);
    CoreNavigation::CLP::LogEntry::InternalToolData::InternalToolDataCapture::MergeFrom(this, a2);
  }
}

uint64_t CoreNavigation::CLP::LogEntry::InternalToolData::InternalToolDataCapture::IsInitialized(CoreNavigation::CLP::LogEntry::InternalToolData::InternalToolDataCapture *this)
{
  return 1;
}

uint64_t CoreNavigation::CLP::LogEntry::InternalToolData::InternalToolDataCapture::Swap(uint64_t this, CoreNavigation::CLP::LogEntry::InternalToolData::InternalToolDataCapture *a2)
{
  if (a2 != (CoreNavigation::CLP::LogEntry::InternalToolData::InternalToolDataCapture *)this)
  {
    uint64_t v2 = *(void *)(this + 8);
    *(void *)(this + 8) = *((void *)a2 + 1);
    *((void *)a2 + 1) = v2;
    LODWORD(v2) = *(_DWORD *)(this + 20);
    *(_DWORD *)(this + 20) = *((_DWORD *)a2 + 5);
    *((_DWORD *)a2 + 5) = v2;
    LODWORD(v2) = *(_DWORD *)(this + 16);
    *(_DWORD *)(this + 16) = *((_DWORD *)a2 + 4);
    *((_DWORD *)a2 + 4) = v2;
  }
  return this;
}

void *CoreNavigation::CLP::LogEntry::InternalToolData::InternalToolDataCapture::GetTypeName@<X0>(void *a1@<X8>)
{
  return sub_18DEDE7B0(a1, "CoreNavigation.CLP.LogEntry.InternalToolData.InternalToolDataCapture");
}

uint64_t sub_18DFDFC30(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16);
}

double *cnquaternion::CNQuaternion::CNQuaternion(double *this, double a2, double a3, double a4, double a5)
{
  *this = a2;
  this[1] = a3;
  this[2] = a4;
  this[3] = a5;
  return this;
}

{
  *this = a2;
  this[1] = a3;
  this[2] = a4;
  this[3] = a5;
  return this;
}

__n128 cnquaternion::CNQuaternion::CNQuaternion(cnquaternion::CNQuaternion *this, __n128 *a2)
{
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *(__n128 *)this = *a2;
  __n128 result = a2[1];
  *((__n128 *)this + 1) = result;
  return result;
}

{
  __n128 result;

  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *(__n128 *)this = *a2;
  __n128 result = a2[1];
  *((__n128 *)this + 1) = result;
  return result;
}

__n128 cnquaternion::CNQuaternion::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    __n128 result = *(__n128 *)(a2 + 16);
    *(__n128 *)(a1 + 16) = result;
  }
  return result;
}

double cnquaternion::CNQuaternion::q1(cnquaternion::CNQuaternion *this)
{
  return *(double *)this;
}

double cnquaternion::CNQuaternion::q2(cnquaternion::CNQuaternion *this)
{
  return *((double *)this + 1);
}

double cnquaternion::CNQuaternion::q3(cnquaternion::CNQuaternion *this)
{
  return *((double *)this + 2);
}

double cnquaternion::CNQuaternion::q4(cnquaternion::CNQuaternion *this)
{
  return *((double *)this + 3);
}

double *cnquaternion::CNQuaternion::Setq1(double *this, double a2)
{
  *this = a2;
  return this;
}

uint64_t cnquaternion::CNQuaternion::Setq2(uint64_t this, double a2)
{
  *(double *)(this + 8) = a2;
  return this;
}

uint64_t cnquaternion::CNQuaternion::Setq3(uint64_t this, double a2)
{
  *(double *)(this + 16) = a2;
  return this;
}

uint64_t cnquaternion::CNQuaternion::Setq4(uint64_t this, double a2)
{
  *(double *)(this + 24) = a2;
  return this;
}

float64x2_t cnquaternion::CNQuaternion::operator+@<Q0>(float64x2_t *a1@<X0>, float64x2_t *a2@<X1>, float64x2_t *a3@<X8>)
{
  float64x2_t result = vaddq_f64(*a1, *a2);
  float64x2_t v4 = vaddq_f64(a1[1], a2[1]);
  *a3 = result;
  a3[1] = v4;
  return result;
}

float64x2_t cnquaternion::CNQuaternion::operator-@<Q0>(float64x2_t *a1@<X0>, float64x2_t *a2@<X1>, float64x2_t *a3@<X8>)
{
  float64x2_t result = vsubq_f64(*a1, *a2);
  float64x2_t v4 = vsubq_f64(a1[1], a2[1]);
  *a3 = result;
  a3[1] = v4;
  return result;
}

double cnquaternion::CNQuaternion::operator*@<D0>(double *a1@<X0>, double *a2@<X1>, double *a3@<X8>)
{
  double v4 = a1[2];
  double v3 = a1[3];
  double v5 = a2[1];
  double v6 = a1[1];
  double v7 = a2[2];
  double v8 = a2[3];
  double v9 = v4 * v5 + v3 * *a2 - v6 * v7 + *a1 * v8;
  double v10 = v3 * v5 - v4 * *a2 + *a1 * v7 + v6 * v8;
  double v11 = v6 * *a2 - *a1 * v5 + v3 * v7 + v4 * v8;
  double v12 = -(v6 * v5) - *a1 * *a2 - v4 * v7;
  *a3 = v9;
  a3[1] = v10;
  double result = v12 + v3 * v8;
  a3[2] = v11;
  a3[3] = result;
  return result;
}

void cnrand::RandomNumberGenerator::RandomNumberGenerator(cnrand::RandomNumberGenerator *this)
{
}

{
  bzero(this, 0x9C9uLL);
}

cnrand::RandomNumberGenerator *cnrand::RandomNumberGenerator::RandomNumberGenerator(cnrand::RandomNumberGenerator *this, const cnrand::RandomNumberGenerator *a2)
{
  *(void *)this = *(void *)a2;
  memcpy((char *)this + 8, (char *)a2 + 8, 0x9C0uLL);
  *((unsigned char *)this + 2504) = *((unsigned char *)a2 + 2504);
  return this;
}

{
  *(void *)this = *(void *)a2;
  memcpy((char *)this + 8, (char *)a2 + 8, 0x9C0uLL);
  *((unsigned char *)this + 2504) = *((unsigned char *)a2 + 2504);
  return this;
}

uint64_t cnrand::RandomNumberGenerator::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    *(void *)a1 = *(void *)a2;
    memcpy((void *)(a1 + 8), (const void *)(a2 + 8), 0x9C0uLL);
    *(unsigned char *)(a1 + 2504) = *(unsigned char *)(a2 + 2504);
  }
  return a1;
}

uint64_t cnrand::RandomNumberGenerator::FillGenerator(uint64_t this)
{
  if (!*(_DWORD *)(this + 4))
  {
    unint64_t v1 = 0;
    uint64_t v2 = this + 8;
    do
    {
      if (v1 == 623) {
        unint64_t v3 = 0;
      }
      else {
        unint64_t v3 = v1 + 1;
      }
      int v4 = *(_DWORD *)(v2 + 4 * v3);
      if (v1 >= 0xE3) {
        int v5 = -227;
      }
      else {
        int v5 = 397;
      }
      unsigned int v6 = *(_DWORD *)(v2 + 4 * (v5 + (int)v1)) ^ ((v4 & 0x7FFFFFFE | *(_DWORD *)(v2 + 4 * v1) & 0x80000000) >> 1);
      if (v4) {
        v6 ^= 0x9908B0DF;
      }
      *(_DWORD *)(v2 + 4 * v1++) = v6;
    }
    while (v1 != 624);
  }
  return this;
}

uint64_t cnrand::RandomNumberGenerator::Initialize(cnrand::RandomNumberGenerator *this)
{
  unsigned int v2 = time(0);
  srand(v2);
  LODWORD(result) = rand();
  *(_DWORD *)this = result;
  *((_DWORD *)this + 1) = 0;
  *((_DWORD *)this + 2) = result;
  uint64_t v4 = 1;
  for (uint64_t i = 3; i != 626; ++i)
  {
    int v6 = 1812433253 * (result ^ (result >> 30));
    uint64_t result = (v6 + v4);
    *((_DWORD *)this + i) = i + v6 - 2;
    ++v4;
  }
  *((unsigned char *)this + 2504) = 1;
  return result;
}

uint64_t cnrand::RandomNumberGenerator::Initialize(uint64_t this, unsigned int a2)
{
  *(_DWORD *)this = a2;
  *(_DWORD *)(this + 4) = 0;
  *(_DWORD *)(this + 8) = a2;
  uint64_t v2 = 1;
  for (uint64_t i = 3; i != 626; ++i)
  {
    int v4 = 1812433253 * (a2 ^ (a2 >> 30));
    a2 = v4 + v2;
    *(_DWORD *)(this + 4 * i) = i + v4 - 2;
    ++v2;
  }
  *(unsigned char *)(this + 2504) = 1;
  return this;
}

uint64_t cnrand::RandomNumberGenerator::RandomInteger(cnrand::RandomNumberGenerator *this)
{
  if (!*((unsigned char *)this + 2504)) {
    cnrand::RandomNumberGenerator::Initialize(this);
  }
  cnrand::RandomNumberGenerator::FillGenerator((uint64_t)this);
  uint64_t v2 = *((unsigned int *)this + 1);
  int v3 = *((_DWORD *)this + v2 + 2) ^ (*((_DWORD *)this + v2 + 2) >> 11);
  unsigned int v4 = (((v3 << 7) & 0x9D2C5680 ^ v3) << 15) & 0xEFC60000 ^ (v3 << 7) & 0x9D2C5680 ^ v3;
  uint64_t result = v4 ^ (v4 >> 18);
  *((_DWORD *)this + 1) = ((int)v2 + 1) % 0x270u;
  return result;
}

double cnrand::RandomNumberGenerator::RandomUniform(cnrand::RandomNumberGenerator *this)
{
  return ((double)cnrand::RandomNumberGenerator::RandomInteger(this) + 0.5) * 2.32830644e-10;
}

double cnrand::RandomNumberGenerator::RandomGaussian(cnrand::RandomNumberGenerator *this)
{
  do
  {
    double v2 = ((double)cnrand::RandomNumberGenerator::RandomInteger(this) + 0.5) * 2.32830644e-10 * 2.0 + -1.0;
    double v3 = ((double)cnrand::RandomNumberGenerator::RandomInteger(this) + 0.5) * 2.32830644e-10 * 2.0 + -1.0;
    double v4 = v3 * v3;
    double v5 = v4 + v2 * v2;
  }
  while (v5 >= 1.0);
  return v2 * sqrt(log(v4 + v2 * v2) * -2.0 / v5);
}

FILE *cnrand::RandomNumberGenerator::WriteState(cnrand::RandomNumberGenerator *this, const char *__filename)
{
  if (!*((unsigned char *)this + 2504)) {
    cnrand::RandomNumberGenerator::Initialize(this);
  }
  uint64_t result = fopen(__filename, "w");
  if (result)
  {
    double v5 = result;
    int v6 = fprintf(result, "%u\n", *(_DWORD *)this);
    int v7 = fprintf(v5, "%u\n", *((_DWORD *)this + 1));
    if (v6 >= 1) {
      int v8 = 1;
    }
    else {
      int v8 = 2;
    }
    if (v7 >= 1) {
      int v9 = v6 < 1;
    }
    else {
      int v9 = v8;
    }
    for (uint64_t i = 8; i != 2504; i += 4)
    {
      if (fprintf(v5, "%u\n", *(_DWORD *)((char *)this + i)) < 1) {
        ++v9;
      }
    }
    if (fflush(v5)) {
      int v11 = -1;
    }
    else {
      int v11 = 0;
    }
    fclose(v5);
    return (FILE *)(v9 == v11);
  }
  return result;
}

uint64_t cnrand::RandomNumberGenerator::LoadState(cnrand::RandomNumberGenerator *this, const char *__filename)
{
  *((unsigned char *)this + 2504) = 0;
  uint64_t result = (uint64_t)fopen(__filename, "r");
  if (result)
  {
    double v4 = (FILE *)result;
    int v5 = fscanf((FILE *)result, "%u\n", this);
    int v6 = fscanf(v4, "%u\n", (char *)this + 4);
    if (v5 >= 1) {
      int v7 = 1;
    }
    else {
      int v7 = 2;
    }
    if (v6 >= 1) {
      int v8 = v5 < 1;
    }
    else {
      int v8 = v7;
    }
    for (uint64_t i = 8; i != 2504; i += 4)
    {
      if (fscanf(v4, "%u\n", (char *)this + i) < 1) {
        ++v8;
      }
    }
    fclose(v4);
    if (v8)
    {
      return 0;
    }
    else
    {
      uint64_t result = 1;
      *((unsigned char *)this + 2504) = 1;
    }
  }
  return result;
}

void *cnrotation::CNRotation::CNRotation(void *this)
{
  *this = 0;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0x3FF0000000000000;
  return this;
}

{
  *this = 0;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0x3FF0000000000000;
  return this;
}

uint64_t cnrotation::CNRotation::CNRotation(uint64_t this, const cnquaternion::CNQuaternion *a2)
{
  *(_OWORD *)this = 0u;
  *(_OWORD *)(this + 16) = 0u;
  double v2 = *(double *)a2;
  double v3 = *((double *)a2 + 1);
  double v4 = *((double *)a2 + 2);
  double v5 = *((double *)a2 + 3);
  double v6 = sqrt(v3 * v3 + v2 * v2 + v4 * v4 + v5 * v5);
  if (fabs(v6) >= 2.22044605e-16)
  {
    double v8 = v2 / v6;
    double v9 = v3 / v6;
    double v10 = v4 / v6;
    double v7 = v5 / v6;
  }
  else
  {
    double v7 = 1.0;
    double v8 = 0.0;
    double v9 = 0.0;
    double v10 = 0.0;
  }
  *(double *)this = v8;
  *(double *)(this + 8) = v9;
  *(double *)(this + 16) = v10;
  *(double *)(this + 24) = v7;
  return this;
}

{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;

  *(_OWORD *)this = 0u;
  *(_OWORD *)(this + 16) = 0u;
  double v2 = *(double *)a2;
  double v3 = *((double *)a2 + 1);
  double v4 = *((double *)a2 + 2);
  double v5 = *((double *)a2 + 3);
  double v6 = sqrt(v3 * v3 + v2 * v2 + v4 * v4 + v5 * v5);
  if (fabs(v6) >= 2.22044605e-16)
  {
    double v8 = v2 / v6;
    double v9 = v3 / v6;
    double v10 = v4 / v6;
    double v7 = v5 / v6;
  }
  else
  {
    double v7 = 1.0;
    double v8 = 0.0;
    double v9 = 0.0;
    double v10 = 0.0;
  }
  *(double *)this = v8;
  *(double *)(this + 8) = v9;
  *(double *)(this + 16) = v10;
  *(double *)(this + 24) = v7;
  return this;
}

double *cnrotation::CNRotation::Normalize@<X0>(double *this@<X0>, double *a2@<X8>)
{
  double v3 = *this;
  double v4 = this[1];
  double v5 = this[2];
  double v6 = this[3];
  double v7 = sqrt(v4 * v4 + v3 * v3 + v5 * v5 + v6 * v6);
  if (fabs(v7) >= 2.22044605e-16)
  {
    double v9 = v3 / v7;
    double v10 = v4 / v7;
    double v11 = v5 / v7;
    double v8 = v6 / v7;
  }
  else
  {
    double v8 = 1.0;
    double v9 = 0.0;
    double v10 = 0.0;
    double v11 = 0.0;
  }
  *a2 = v9;
  a2[1] = v10;
  a2[2] = v11;
  a2[3] = v8;
  return this;
}

cnrotation::CNRotation *cnrotation::CNRotation::CNRotation(cnrotation::CNRotation *this, double a2, double a3, double a4)
{
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  if (fabs(a3) >= 1.57079633)
  {
    *(void *)this = 0;
    *((void *)this + 1) = 0;
    *((void *)this + 2) = 0;
    *((void *)this + 3) = 0x3FF0000000000000;
    __assert_rtn("CNRotation", "cnrotation.cpp", 90, "false && \"Error: attempted to construct CNRotation from invalid YPR.\"");
  }
  uint64_t v15 = 0x300000003;
  uint64_t v13 = &unk_1EDD18EE8;
  long long v14 = xmmword_18E1F0010;
  int v16 = v17;
  __double2 v7 = __sincos_stret(a2);
  __double2 v8 = __sincos_stret(a3);
  __double2 v9 = __sincos_stret(a4);
  v17[0] = v7.__cosval * v8.__cosval;
  v17[1] = v7.__cosval * v8.__sinval * v9.__sinval - v7.__sinval * v9.__cosval;
  v17[6] = -v8.__sinval;
  v17[7] = v8.__cosval * v9.__sinval;
  unsigned int v17[2] = v7.__sinval * v9.__sinval + v7.__cosval * v8.__sinval * v9.__cosval;
  v17[3] = v7.__sinval * v8.__cosval;
  v17[4] = v7.__cosval * v9.__cosval + v7.__sinval * v8.__sinval * v9.__sinval;
  v17[5] = v7.__sinval * v8.__sinval * v9.__cosval - v7.__cosval * v9.__sinval;
  v17[8] = v8.__cosval * v9.__cosval;
  sub_18DFE20A0((uint64_t)v12, (uint64_t)&v13);
  if (v12 != (_OWORD *)this)
  {
    long long v10 = v12[1];
    *(_OWORD *)this = v12[0];
    *((_OWORD *)this + 1) = v10;
  }
  return this;
}

__n128 cnrotation::CNRotation::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    __n128 result = *(__n128 *)(a2 + 16);
    *(__n128 *)(a1 + 16) = result;
  }
  return result;
}

uint64_t cnrotation::CNRotation::CNRotation(uint64_t a1, double *a2, double a3, double a4, double a5, int8x16_t a6)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  double v8 = *a2;
  double v7 = a2[1];
  double v9 = a2[2];
  *(double *)a6.i64 = sqrt(v7 * v7 + v8 * v8 + v9 * v9);
  double v10 = fabs(*(double *)a6.i64);
  double v11 = *(double *)a6.i64;
  if (v10 > 3.14159265)
  {
    v12.f64[0] = NAN;
    v12.f64[1] = NAN;
    double v26 = *(double *)vbslq_s8((int8x16_t)vnegq_f64(v12), (int8x16_t)0x400921FB54442D18uLL, a6).i64;
    unint64_t v27 = a6.i64[0];
    long double v13 = fmod(*(double *)a6.i64 + v26, 6.28318531);
    a6.i64[0] = v27;
    double v11 = v13 - v26;
  }
  if (fabs(v11 * 0.5) >= 2.22044605e-16)
  {
    __double2 v18 = __sincos_stret(v11 * 0.5);
    double cosval = v18.__cosval;
    double v14 = -(v8 * (v18.__sinval / v11));
    double v15 = -(v7 * (v18.__sinval / v11));
    double v16 = -(v9 * (v18.__sinval / v11));
    double v19 = v15 * v15 + v14 * v14 + v16 * v16;
  }
  else
  {
    if (v10 >= 2.22044605e-16)
    {
      double v14 = -(v8 * (v11 / *(double *)a6.i64)) * 0.5;
      double v15 = -(v7 * (v11 / *(double *)a6.i64)) * 0.5;
      double v16 = -(v9 * (v11 / *(double *)a6.i64)) * 0.5;
    }
    else
    {
      double v14 = v8 * -0.5;
      double v15 = v7 * -0.5;
      double v16 = v9 * -0.5;
    }
    double v19 = v15 * v15 + v14 * v14 + v16 * v16;
    double cosval = sqrt(1.0 - v19);
  }
  double v20 = sqrt(v19 + cosval * cosval);
  if (fabs(v20) >= 2.22044605e-16)
  {
    double v22 = v14 / v20;
    double v23 = v15 / v20;
    double v24 = v16 / v20;
    double v21 = cosval / v20;
  }
  else
  {
    double v21 = 1.0;
    double v22 = 0.0;
    double v23 = 0.0;
    double v24 = 0.0;
  }
  *(double *)a1 = v22;
  *(double *)(a1 + 8) = v23;
  *(double *)(a1 + 16) = v24;
  *(double *)(a1 + 24) = v21;
  return a1;
}

double cnrotation::CNRotation::WrapToPi(cnrotation::CNRotation *this, int8x16_t a2, int8x16_t a3)
{
  a3.i64[0] = 0x400921FB54442D18;
  if (fabs(*(double *)a2.i64) > 3.14159265)
  {
    v3.f64[0] = NAN;
    v3.f64[1] = NAN;
    double v5 = *(double *)vbslq_s8((int8x16_t)vnegq_f64(v3), a3, a2).i64;
    *(double *)a2.i64 = fmod(v5 + *(double *)a2.i64, 6.28318531) - v5;
  }
  return *(double *)a2.i64;
}

__n128 cnrotation::CNRotation::CNRotation(__n128 *this, __n128 *a2)
{
  result.n128_u64[0] = 0;
  *this = 0u;
  this[1] = 0u;
  if (this != a2)
  {
    *this = *a2;
    __n128 result = a2[1];
    this[1] = result;
  }
  return result;
}

{
  __n128 result;

  result.n128_u64[0] = 0;
  *this = 0u;
  this[1] = 0u;
  if (this != a2)
  {
    *this = *a2;
    __n128 result = a2[1];
    this[1] = result;
  }
  return result;
}

double cnrotation::CNRotation::CrossProductMatrix@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 24) = 0x300000003;
  *(void *)a2 = &unk_1EDD18EE8;
  *(void *)(a2 + 32) = a2 + 40;
  *(_OWORD *)(a2 + 8) = xmmword_18E1F0010;
  sub_18DFE2CC8(a2, 0.0);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(v5 + 8) = *(void *)(v4 + 16);
  *(double *)(v5 + 16) = -*(double *)(v4 + 8);
  uint64_t v6 = *(int *)(a2 + 20);
  uint64_t v7 = v5 + 8 * v6;
  *(double *)uint64_t v7 = -*(double *)(v4 + 16);
  *(void *)(v7 + 16) = *(void *)v4;
  *(void *)(v5 + 16 * v6) = *(void *)(v4 + 8);
  double result = -*(double *)v4;
  *(double *)(v5 + 8 * (int)((2 * v6) | 1)) = result;
  return result;
}

double cnrotation::CNRotation::RotationMatrix@<D0>(cnrotation::CNRotation *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 24) = 0x300000003;
  *(void *)a2 = &unk_1EDD18EE8;
  *(_OWORD *)(a2 + 8) = xmmword_18E1F0010;
  double v2 = *(double *)this;
  double v3 = *((double *)this + 1);
  double v4 = *((double *)this + 2);
  double v5 = *((double *)this + 3);
  double v6 = v3 * v3;
  *(double *)(a2 + 40) = -(v3 * v3 - *(double *)this * *(double *)this) - v4 * v4 + v5 * v5;
  *(void *)(a2 + 32) = a2 + 40;
  double v7 = v3 * v5;
  *(double *)(a2 + 48) = -(v4 * v5 - v2 * v3) - (v4 * v5 - v2 * v3);
  *(double *)(a2 + 56) = v3 * v5 + v2 * v4 + v3 * v5 + v2 * v4;
  *(double *)(a2 + 64) = v4 * v5 + v2 * v3 + v4 * v5 + v2 * v3;
  *(double *)(a2 + 72) = v3 * v3 - v2 * v2 - v4 * v4 + v5 * v5;
  double v8 = v3 * v4;
  *(double *)(a2 + 80) = v8 - v2 * v5 + v8 - v2 * v5;
  *(double *)(a2 + 88) = -(v7 - v2 * v4) - (v7 - v2 * v4);
  double v9 = v8 + v2 * v5 + v8 + v2 * v5;
  double result = v4 * v4 - (v6 + v2 * v2) + v5 * v5;
  *(double *)(a2 + 96) = v9;
  *(double *)(a2 + 104) = result;
  return result;
}

__n128 cnrotation::CNRotation::RotationQuaternion@<Q0>(cnrotation::CNRotation *this@<X0>, _OWORD *a2@<X8>)
{
  __n128 result = *(__n128 *)this;
  long long v3 = *((_OWORD *)this + 1);
  *a2 = *(_OWORD *)this;
  a2[1] = v3;
  return result;
}

void cnrotation::CNRotation::RotationVector(cnrotation::CNRotation *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 24) = 0x100000003;
  *(void *)a2 = &unk_1EDD18D98;
  *(_OWORD *)(a2 + 8) = xmmword_18E1F6F60;
  *(void *)(a2 + 32) = a2 + 40;
  double v5 = *(double *)this;
  double v4 = *((double *)this + 1);
  double v6 = *((double *)this + 2);
  double v7 = sqrt(v4 * v4 + v5 * v5 + v6 * v6);
  if (v7 <= 1.0) {
    double v8 = v7;
  }
  else {
    double v8 = 1.0;
  }
  *(double *)v9.i64 = asin(v8);
  if (fabs(*(double *)v9.i64) >= 2.22044605e-16)
  {
    v10.i64[0] = *((void *)this + 3);
    *(double *)v9.i64 = (*(double *)v9.i64 + *(double *)v9.i64) / v8;
    v14.f64[0] = NAN;
    v14.f64[1] = NAN;
    v14.f64[0] = *(double *)vbslq_s8((int8x16_t)vnegq_f64(v14), v9, v10).i64;
    double v11 = -(v5 * v14.f64[0]);
    double v12 = -(v4 * v14.f64[0]);
    double v13 = -(v6 * v14.f64[0]);
  }
  else
  {
    double v11 = v5 * -2.0;
    double v12 = v4 * -2.0;
    double v13 = v6 * -2.0;
  }
  *(double *)(a2 + 40) = v11;
  *(double *)(a2 + 48) = v12;
  *(double *)(a2 + 56) = v13;
}

void *sub_18DFE0A40(void *result)
{
  *__n128 result = &unk_1EDD17478;
  return result;
}

uint64_t cnrotation::CNRotation::RotationYawPitchRoll(cnrotation::CNRotation *this, long double *a2, long double *a3, double *a4)
{
  cnrotation::CNRotation::RotationMatrix(this, (uint64_t)&v16);
  uint64_t v7 = v17;
  double v8 = v18;
  uint64_t v9 = 2 * v17;
  double v10 = -v18[2 * v17];
  uint64_t v11 = (int)v9 | 1;
  uint64_t v12 = (int)v9 + 2;
  double v13 = sqrt(v18[v12] * v18[v12] + v18[v11] * v18[v11]);
  *a3 = atan2(v10, v13);
  if (fabs(v13) >= 2.22044605e-16)
  {
    *a2 = atan2(v8[v7] / v13, *v8 / v13);
    double v15 = atan2(v8[v11] / v13, v8[v12] / v13);
  }
  else
  {
    if (fabs(v10) < 2.22044605e-16) {
      return 0xFFFFFFFFLL;
    }
    *a2 = atan2(v8[v11] / v10, v8[v9] / v10);
    double v15 = 0.0;
  }
  uint64_t result = 0;
  *a4 = v15;
  return result;
}

void cnrotation::CNRotation::RotationDerivativeQuaternion(cnrotation::CNRotation *this@<X0>, double a2@<D0>, double a3@<D1>, double a4@<D2>, uint64_t a5@<X8>)
{
  uint64_t v25 = 0x400000004;
  long long v24 = xmmword_18E1F6F70;
  double v23 = &unk_1EDD195A8;
  double v26 = v27;
  v27[0] = 0;
  v27[5] = 0;
  *(double *)&v27[8] = -a3;
  *(double *)&v27[9] = a2;
  *(double *)&v27[1] = -a4;
  *(double *)&v27[2] = a3;
  v27[10] = 0;
  *(double *)&v27[13] = a3;
  *(double *)&v27[14] = a4;
  *(double *)&v27[3] = -a2;
  *(double *)&v27[4] = a4;
  *(double *)&v27[6] = -a2;
  *(double *)&v27[7] = -a3;
  *(double *)&v27[11] = -a4;
  *(double *)&v27[12] = a2;
  v27[15] = 0;
  uint64_t v20 = 0x100000004;
  long long v19 = xmmword_18E1F6F80;
  __double2 v18 = &unk_1EDD19458;
  double v21 = v22;
  long long v7 = *((_OWORD *)this + 1);
  v22[0] = *(_OWORD *)this;
  v6.f64[1] = *((float64_t *)v22 + 1);
  v22[1] = v7;
  uint64_t v10 = 0x400000004;
  double v8 = &unk_1EDD195A8;
  long long v9 = xmmword_18E1F6F70;
  uint64_t v11 = &v12;
  v6.f64[0] = 0.5;
  sub_18DFE3240((uint64_t)&v23, (uint64_t)&v8, v6);
  uint64_t v15 = 0x100000004;
  long long v14 = xmmword_18E1F6F80;
  double v13 = &unk_1EDD19458;
  uint64_t v16 = &v17;
  sub_18DFE2B44((uint64_t)&v8, (uint64_t)&v18, (uint64_t)&v13);
  sub_18DFE32C4(a5, (uint64_t)&v13);
}

void *sub_18DFE0D00(void *result)
{
  *uint64_t result = &unk_1EDD17478;
  return result;
}

void *sub_18DFE0D20(void *result)
{
  *uint64_t result = &unk_1EDD17478;
  return result;
}

double cnrotation::CNRotation::dqddq@<D0>(cnrotation::CNRotation *this@<X0>, uint64_t a2@<X8>)
{
  double v2 = *(double *)this;
  double v3 = *((double *)this + 1);
  double v4 = *((double *)this + 2);
  uint64_t v5 = *((void *)this + 3);
  *(void *)(a2 + 24) = 0x300000004;
  *(void *)a2 = &unk_1EDD19578;
  *(_OWORD *)(a2 + 8) = xmmword_18E1F6F90;
  *(void *)(a2 + 40) = v5;
  *(void *)(a2 + 32) = a2 + 40;
  double v6 = -v2;
  *(void *)(a2 + 80) = v5;
  *(double *)(a2 + 88) = v2;
  double result = -v3;
  *(double *)(a2 + 48) = v4;
  *(double *)(a2 + 56) = -v3;
  *(double *)(a2 + 112) = v6;
  *(void *)(a2 + 120) = v5;
  *(double *)(a2 + 64) = v6;
  *(double *)(a2 + 72) = -v4;
  *(double *)(a2 + 96) = -v3;
  *(double *)(a2 + 104) = v3;
  *(double *)(a2 + 128) = -v4;
  return result;
}

void *sub_18DFE0DB0(void *result)
{
  *double result = &unk_1EDD17478;
  return result;
}

double cnrotation::CNRotation::dRdq1@<D0>(cnrotation::CNRotation *this@<X0>, uint64_t a2@<X8>)
{
  double v2 = *(double *)this;
  double v3 = *((double *)this + 1);
  double v4 = *((double *)this + 2);
  double v5 = *((double *)this + 3);
  double v6 = v3 * v3;
  double v7 = v4 * v4;
  double v8 = *(double *)this * v3;
  double v9 = v8 * v4;
  double v10 = 1.0 - v2 * v2;
  double v11 = v10 - v2 * v2;
  *(void *)(a2 + 24) = 0x300000003;
  *(void *)a2 = &unk_1EDD18EE8;
  double v12 = v10 + v3 * v3;
  *(double *)(a2 + 40) = (v2 + v2) * (v12 + v4 * v4 - v5 * v5);
  *(_OWORD *)(a2 + 8) = xmmword_18E1F0010;
  *(void *)(a2 + 32) = a2 + 40;
  double v13 = v3 + v3;
  double v14 = v2 * v4 * v5 * 4.0;
  double v15 = v4 + v4;
  double v16 = v8 * v5 * 4.0;
  *(double *)(a2 + 48) = v14 + v13 * v11;
  *(double *)(a2 + 56) = -(v16 - v15 * v11);
  double v17 = v2 * -2.0;
  *(double *)(a2 + 64) = -(v14 - v13 * v11);
  *(double *)(a2 + 72) = v17 * (v12 - v7 + v5 * v5);
  *(double *)(a2 + 80) = v9 * -4.0 + v5 * -2.0 * v11;
  *(double *)(a2 + 88) = v16 + v15 * v11;
  double result = v17 * (v10 - v6 + v7 + v5 * v5);
  *(double *)(a2 + 96) = v9 * -4.0 + (v5 + v5) * v11;
  *(double *)(a2 + 104) = result;
  return result;
}

double cnrotation::CNRotation::dRdq2@<D0>(cnrotation::CNRotation *this@<X0>, uint64_t a2@<X8>)
{
  double v2 = *(double *)this;
  double v3 = *((double *)this + 1);
  double v4 = *((double *)this + 2);
  double v5 = *((double *)this + 3);
  double v6 = v2 * v2;
  double v7 = *(double *)this * v3;
  double v8 = v7 * v4;
  double v9 = v7 * v5;
  double v10 = 1.0 - v3 * v3;
  double v11 = v10 - v3 * v3;
  *(void *)(a2 + 24) = 0x300000003;
  *(void *)a2 = &unk_1EDD18EE8;
  *(_OWORD *)(a2 + 8) = xmmword_18E1F0010;
  double v12 = v2 * v2 + v10;
  *(double *)(a2 + 40) = v3 * -2.0 * (v5 * v5 + v12 - v4 * v4);
  *(void *)(a2 + 32) = a2 + 40;
  double v13 = v2 + v2;
  double v14 = v3 * v4 * v5 * 4.0;
  double v15 = v8 * -4.0;
  *(double *)(a2 + 48) = v14 + v13 * v11;
  *(double *)(a2 + 56) = v15 + (v5 + v5) * v11;
  *(double *)(a2 + 64) = -(v14 - v13 * v11);
  *(double *)(a2 + 72) = (v3 + v3) * (v4 * v4 + v12 - v5 * v5);
  *(double *)(a2 + 80) = v9 * 4.0 + (v4 + v4) * v11;
  *(double *)(a2 + 88) = v15 + v5 * -2.0 * v11;
  double result = -(v9 * 4.0 - (v4 + v4) * v11);
  *(double *)(a2 + 96) = result;
  *(double *)(a2 + 104) = v3 * -2.0 * (v5 * v5 + v4 * v4 + v10 - v6);
  return result;
}

double cnrotation::CNRotation::dRdq3@<D0>(cnrotation::CNRotation *this@<X0>, uint64_t a2@<X8>)
{
  double v2 = *(double *)this;
  double v3 = *((double *)this + 1);
  double v4 = *((double *)this + 2);
  double v5 = *((double *)this + 3);
  double v6 = v2 * v2;
  double v7 = v3 * v3;
  double v8 = *(double *)this * v4;
  double v9 = v8 * v5;
  double v10 = 1.0 - v4 * v4;
  double v11 = v10 - v4 * v4;
  *(void *)(a2 + 24) = 0x300000003;
  *(void *)a2 = &unk_1EDD18EE8;
  *(_OWORD *)(a2 + 8) = xmmword_18E1F0010;
  double v12 = v2 * v2 + v10;
  *(double *)(a2 + 40) = v4 * -2.0 * (v5 * v5 + v12 - v3 * v3);
  *(void *)(a2 + 32) = a2 + 40;
  double v13 = v3 * v8 * -4.0;
  double v14 = v2 + v2;
  double v15 = v3 * v4 * v5 * 4.0;
  *(double *)(a2 + 48) = v13 + v5 * -2.0 * v11;
  *(double *)(a2 + 56) = -(v15 - v14 * v11);
  *(double *)(a2 + 64) = v13 + (v5 + v5) * v11;
  *(double *)(a2 + 72) = v4 * -2.0 * (v5 * v5 + v3 * v3 + v10 - v6);
  double v16 = v3 + v3;
  *(double *)(a2 + 80) = v9 * 4.0 + v16 * v11;
  *(double *)(a2 + 88) = v15 + v14 * v11;
  double result = -(v9 * 4.0 - v16 * v11);
  *(double *)(a2 + 96) = result;
  *(double *)(a2 + 104) = (v4 + v4) * (v7 + v12 - v5 * v5);
  return result;
}

double cnrotation::CNRotation::dRdq4@<D0>(float64x2_t *this@<X0>, uint64_t a2@<X8>)
{
  double v2 = this[1].f64[0];
  double v3 = this[1].f64[1];
  double v4 = v2 * v2;
  double v5 = 1.0 - v3 * v3;
  double v6 = v5 - v3 * v3;
  *(void *)(a2 + 24) = 0x300000003;
  *(void *)a2 = &unk_1EDD18EE8;
  *(_OWORD *)(a2 + 8) = xmmword_18E1F0010;
  double v7 = v3 + v3;
  float64x2_t v8 = *this;
  double v9 = vmulq_f64(v8, v8).f64[0];
  double v10 = this->f64[1];
  double v11 = vmuld_lane_f64(v10, *this, 1);
  *(double *)(a2 + 40) = (v3 + v3) * (v2 * v2 + v11 + v5 - v9);
  *(void *)(a2 + 32) = a2 + 40;
  double v12 = v2 * -2.0;
  double v13 = v2 + v2;
  float64x2_t v14 = vmulq_n_f64(v8, v3);
  float64x2_t v15 = vmulq_n_f64(v14, v2);
  v14.f64[0] = vmuld_lane_f64(v14.f64[0], v8, 1) * -4.0;
  __asm { FMOV            V20.2D, #-4.0 }
  int8x16_t v21 = (int8x16_t)vmulq_f64(v15, _Q20);
  *(double *)(a2 + 48) = v14.f64[0] + v12 * v6;
  *(double *)(a2 + 56) = *(double *)v21.i64 + (v10 + v10) * v6;
  double v22 = v9 + v5;
  *(double *)(a2 + 64) = v14.f64[0] + v13 * v6;
  *(double *)(a2 + 72) = v7 * (v4 + v22 - v11);
  __asm { FMOV            V2.2D, #-2.0 }
  *(float64x2_t *)(a2 + 80) = vmlaq_n_f64((float64x2_t)vextq_s8(v21, v21, 8uLL), vmulq_f64(v8, _Q2), v6);
  double result = v7 * (v11 + v22 - v4);
  *(double *)(a2 + 96) = *(double *)&v21.i64[1] + (v8.f64[0] + v8.f64[0]) * v6;
  *(double *)(a2 + 104) = result;
  return result;
}

void cnrotation::CNRotation::drdq(cnrotation::CNRotation *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 24) = 0x400000003;
  *(void *)a2 = &unk_1EDD18F48;
  *(void *)(a2 + 32) = a2 + 40;
  *(_OWORD *)(a2 + 8) = xmmword_18E1F6FA0;
  sub_18DFE2CC8(a2, 0.0);
  cnrotation::CNRotation::RotationVector(this, (uint64_t)v21);
  double v5 = *v22;
  double v4 = v22[1];
  double v6 = v22[2];
  uint64_t v35 = 0x100000003;
  int v33 = &unk_1EDD18D98;
  long long v34 = xmmword_18E1F6F60;
  int v36 = &v37;
  uint64_t v30 = 0x100000134;
  int v28 = &unk_1EDD18C48;
  long long v29 = xmmword_18E1F6FB0;
  int v31 = &v32;
  uint64_t v25 = 0x100000003;
  double v23 = &unk_1EDD18D98;
  long long v24 = xmmword_18E1F6F60;
  double v26 = &v27;
  sub_18DFE345C((uint64_t)v21, (uint64_t)&v33, (uint64_t)&v28, (uint64_t)&v23, "2");
  double v8 = v7;
  double v9 = v7 * 0.5;
  if (fabs(v9) >= 2.22044605e-16)
  {
    double v14 = *((double *)this + 3);
    long double v15 = sin(v9);
    long double v16 = v8 / v15;
    long double v17 = v8 / v15 + fabs(v14) * -2.0;
    long double v18 = v15 + v15;
    double v10 = *(double **)(a2 + 32);
    *double v10 = -(v16 - v5 / v8 * (v5 / v8) * v17);
    uint64_t v19 = *(int *)(a2 + 20);
    v10[(int)v19 + 1] = -(v16 - v4 / v8 * (v4 / v8) * v17);
    uint64_t v20 = &v10[2 * (int)v19];
    v20[2] = -(v16 - v6 / v8 * (v6 / v8) * v17);
    v10[1] = v5 / v8 * (v4 / v8) * v17;
    v10[2] = v5 / v8 * (v6 / v8) * v17;
    v10[(int)v19 + 2] = v4 / v8 * (v6 / v8) * v17;
    v10[v19] = v10[1];
    v10[2 * v19] = v10[2];
    v20[1] = v10[(int)v19 + 2];
    LODWORD(v19) = 3 * v19;
    v10[(int)v19] = -(v5 / v8 * v18);
    v10[(int)v19 + 1] = -(v4 / v8 * v18);
    int v12 = v19 + 2;
    double v13 = -(v6 / v8 * v18);
  }
  else
  {
    double v10 = *(double **)(a2 + 32);
    *double v10 = -2.0;
    int v11 = *(_DWORD *)(a2 + 20);
    v10[v11 + 1] = -2.0;
    v10[2 * v11 + 2] = -2.0;
    v10[3 * v11] = -v5;
    v10[3 * v11 + 1] = -v4;
    int v12 = 3 * v11 + 2;
    double v13 = -v6;
  }
  v10[v12] = v13;
}

void sub_18DFE1464(_Unwind_Exception *a1)
{
  *unint64_t v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

void *sub_18DFE1484(void *result)
{
  *double result = &unk_1EDD17478;
  return result;
}

void cnrotation::CNRotation::dqdr(cnrotation::CNRotation *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 24) = 0x300000004;
  *(void *)a2 = &unk_1EDD19578;
  *(void *)(a2 + 32) = a2 + 40;
  *(_OWORD *)(a2 + 8) = xmmword_18E1F6F90;
  sub_18DFE2CC8(a2, 0.0);
  cnrotation::CNRotation::RotationVector(this, (uint64_t)v21);
  double v5 = *v22;
  double v4 = v22[1];
  double v6 = v22[2];
  uint64_t v35 = 0x100000003;
  int v33 = &unk_1EDD18D98;
  long long v34 = xmmword_18E1F6F60;
  int v36 = &v37;
  uint64_t v30 = 0x100000134;
  int v28 = &unk_1EDD18C48;
  long long v29 = xmmword_18E1F6FB0;
  int v31 = &v32;
  uint64_t v25 = 0x100000003;
  double v23 = &unk_1EDD18D98;
  long long v24 = xmmword_18E1F6F60;
  double v26 = &v27;
  sub_18DFE345C((uint64_t)v21, (uint64_t)&v33, (uint64_t)&v28, (uint64_t)&v23, "2");
  double v8 = v7;
  double v9 = v7 * 0.5;
  if (fabs(v9) >= 2.22044605e-16)
  {
    double v13 = *((double *)this + 3);
    long double v14 = sin(v9);
    long double v15 = v14 / v8;
    long double v16 = v14 / v8 + fabs(v13) * -0.5;
    long double v17 = v14 * 0.5;
    long double v18 = *(double **)(a2 + 32);
    *long double v18 = -(v15 - v5 / v8 * (v5 / v8) * v16);
    uint64_t v19 = *(int *)(a2 + 20);
    v18[(int)v19 + 1] = -(v15 - v4 / v8 * (v4 / v8) * v16);
    v18[2 * (int)v19 + 2] = -(v15 - v6 / v8 * (v6 / v8) * v16);
    v18[1] = v5 / v8 * (v4 / v8) * v16;
    v18[2] = v5 / v8 * (v6 / v8) * v16;
    v18[(int)v19 + 2] = v4 / v8 * (v6 / v8) * v16;
    v18[v19] = v18[1];
    v18[2 * v19] = v18[2];
    uint64_t v20 = &v18[2 * (int)v19];
    v20[1] = v18[(int)v19 + 2];
    v18[3] = -(v5 / v8 * v17);
    v18[(int)v19 + 3] = -(v4 / v8 * v17);
    v20[3] = -(v6 / v8 * v17);
  }
  else
  {
    uint64_t v10 = *(void *)(a2 + 32);
    *(void *)uint64_t v10 = 0xBFE0000000000000;
    int v11 = *(_DWORD *)(a2 + 20);
    *(void *)(v10 + 8 * (v11 + 1)) = 0xBFE0000000000000;
    int v12 = 2 * v11;
    *(void *)(v10 + 8 * (v12 + 2)) = 0xBFE0000000000000;
    *(double *)(v10 + 24) = v5 * -0.25;
    *(double *)(v10 + 8 * (v11 + 3)) = v4 * -0.25;
    *(double *)(v10 + 8 * (v12 + 3)) = v6 * -0.25;
  }
}

void sub_18DFE1748(_Unwind_Exception *a1)
{
  *unint64_t v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

double cnrotation::CNRotation::dqaqdqa@<D0>(cnrotation::CNRotation *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 24) = 0x400000004;
  *(void *)a2 = &unk_1EDD195A8;
  *(_OWORD *)(a2 + 8) = xmmword_18E1F6F70;
  double v3 = *((double *)this + 2);
  double result = *((double *)this + 3);
  *(double *)(a2 + 40) = result;
  *(void *)(a2 + 32) = a2 + 40;
  double v4 = *(double *)this;
  double v5 = *((double *)this + 1);
  *(double *)(a2 + 48) = v3;
  *(double *)(a2 + 56) = -v5;
  *(double *)(a2 + 64) = -v4;
  *(double *)(a2 + 72) = -v3;
  *(double *)(a2 + 80) = result;
  *(double *)(a2 + 88) = v4;
  *(double *)(a2 + 96) = -v5;
  *(double *)(a2 + 104) = v5;
  *(double *)(a2 + 112) = -v4;
  *(double *)(a2 + 120) = result;
  *(double *)(a2 + 128) = -v3;
  *(double *)(a2 + 136) = v4;
  *(double *)(a2 + 144) = v5;
  *(double *)(a2 + 152) = v3;
  *(double *)(a2 + 160) = result;
  return result;
}

double cnrotation::CNRotation::dqqbdqb@<D0>(cnrotation::CNRotation *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 24) = 0x400000004;
  *(void *)a2 = &unk_1EDD195A8;
  *(_OWORD *)(a2 + 8) = xmmword_18E1F6F70;
  double v3 = *((double *)this + 2);
  double result = *((double *)this + 3);
  *(double *)(a2 + 40) = result;
  *(void *)(a2 + 32) = a2 + 40;
  double v4 = *(double *)this;
  double v5 = *((double *)this + 1);
  *(double *)(a2 + 48) = -v3;
  *(double *)(a2 + 56) = v5;
  *(double *)(a2 + 64) = -v4;
  *(double *)(a2 + 72) = v3;
  *(double *)(a2 + 80) = result;
  *(double *)(a2 + 88) = -v4;
  *(double *)(a2 + 96) = -v5;
  *(double *)(a2 + 104) = -v5;
  *(double *)(a2 + 112) = v4;
  *(double *)(a2 + 120) = result;
  *(double *)(a2 + 128) = -v3;
  *(double *)(a2 + 136) = v4;
  *(double *)(a2 + 144) = v5;
  *(double *)(a2 + 152) = v3;
  *(double *)(a2 + 160) = result;
  return result;
}

double cnrotation::CNRotation::dRotateVectordq@<D0>(double *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 24) = 0x400000003;
  *(void *)a3 = &unk_1EDD18F48;
  *(_OWORD *)(a3 + 8) = xmmword_18E1F6FA0;
  double v5 = *a1;
  double v4 = a1[1];
  double v6 = *(double **)(a2 + 32);
  double v7 = *v6;
  double v8 = v6[1];
  double v9 = v6[2];
  double v10 = a1[2];
  double v11 = a1[3];
  double v12 = v4 * v8 + *a1 * *v6 + v10 * v9;
  double v13 = v12 + v12;
  *(double *)(a3 + 40) = v13;
  *(void *)(a3 + 32) = a3 + 40;
  double v14 = v11 * v9 - (v5 * v8 - v4 * v7);
  double v15 = v14 + v14;
  double v16 = v11 * v8;
  double v17 = -(v11 * v8 - v10 * v7) - v5 * v9;
  *(double *)(a3 + 48) = v15;
  *(double *)(a3 + 56) = v17 + v17;
  double v18 = v5 * v8 - v4 * v7 - v11 * v9;
  *(double *)(a3 + 64) = v18 + v18;
  *(double *)(a3 + 72) = v13;
  double v19 = v10 * v8;
  double v20 = v19 + v11 * v7 - v4 * v9 + v19 + v11 * v7 - v4 * v9;
  double v21 = v16 - v10 * v7 + v5 * v9 + v16 - v10 * v7 + v5 * v9;
  *(double *)(a3 + 80) = v20;
  *(double *)(a3 + 88) = v21;
  *(double *)(a3 + 96) = v4 * v9 - (v19 + v11 * v7) + v4 * v9 - (v19 + v11 * v7);
  *(double *)(a3 + 104) = v13;
  *(double *)(a3 + 112) = v20;
  *(double *)(a3 + 120) = v21;
  *(double *)(a3 + 128) = v15;
  uint64_t v30 = 0x400000004;
  int v28 = &unk_1EDD195A8;
  long long v29 = xmmword_18E1F6F70;
  int v31 = &v32;
  double v32 = 1.0 - v5 * v5;
  double v33 = -(v5 * v4);
  double v34 = -(v5 * v10);
  double v35 = -(v5 * v11);
  double v36 = v33;
  double v37 = 1.0 - v4 * v4;
  double v38 = -(v4 * v10);
  double v39 = -(v4 * v11);
  double v40 = v34;
  double v41 = v38;
  double v42 = 1.0 - v10 * v10;
  double v43 = -(v10 * v11);
  double v44 = v35;
  double v45 = v39;
  double v46 = v43;
  double v47 = 1.0 - v11 * v11;
  uint64_t v25 = 0x400000003;
  double v23 = &unk_1EDD18F48;
  long long v24 = xmmword_18E1F6FA0;
  double v26 = &v27;
  sub_18DFE2B44(a3, (uint64_t)&v28, (uint64_t)&v23);
  *(void *)&double result = sub_18DFE2F24(a3, (uint64_t)&v23).n128_u64[0];
  return result;
}

void sub_18DFE1A1C(_Unwind_Exception *a1)
{
  *unint64_t v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

void cnrotation::CNRotation::dRotateVectordr(double *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  cnrotation::CNRotation::dRotateVectordq(a1, a2, (uint64_t)v6);
  cnrotation::CNRotation::dqdr((cnrotation::CNRotation *)a1, (uint64_t)v5);
  *(void *)(a3 + 24) = 0x300000003;
  *(void *)a3 = &unk_1EDD18EE8;
  *(_OWORD *)(a3 + 8) = xmmword_18E1F0010;
  *(void *)(a3 + 32) = a3 + 40;
  sub_18DFE2B44((uint64_t)v6, (uint64_t)v5, a3);
}

void sub_18DFE1ACC(_Unwind_Exception *a1)
{
  *unint64_t v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

double cnrotation::CNRotation::Q@<D0>(float64x2_t a1@<Q0>, double a2@<D1>, double a3@<D2>, uint64_t a4@<X8>)
{
  uint64_t v8 = 0x400000004;
  double v6 = &unk_1EDD195A8;
  long long v7 = xmmword_18E1F6F70;
  double v9 = v10;
  v10[0] = 0;
  v10[5] = 0;
  *(double *)&v10[8] = -a2;
  v10[9] = *(void *)&a1.f64[0];
  *(double *)&v10[1] = -a3;
  *(double *)&v10[2] = a2;
  v10[10] = 0;
  *(double *)&v10[13] = a2;
  *(double *)&v10[14] = a3;
  *(double *)&v10[3] = -a1.f64[0];
  *(double *)&v10[4] = a3;
  *(double *)&v10[6] = -a1.f64[0];
  *(double *)&v10[7] = -a2;
  *(double *)&v10[11] = -a3;
  v10[12] = *(void *)&a1.f64[0];
  v10[15] = 0;
  *(void *)(a4 + 24) = 0x400000004;
  *(void *)a4 = &unk_1EDD195A8;
  *(_OWORD *)(a4 + 8) = xmmword_18E1F6F70;
  *(void *)(a4 + 32) = a4 + 40;
  a1.f64[0] = 0.5;
  *(void *)&double result = *(_OWORD *)&sub_18DFE3240((uint64_t)&v6, a4, a1);
  return result;
}

uint64_t cnrotation::CNRotation::dQdwx@<X0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 24) = 0x400000004;
  *(void *)a1 = &unk_1EDD195A8;
  *(void *)(a1 + 32) = a1 + 40;
  *(_OWORD *)(a1 + 8) = xmmword_18E1F6F70;
  uint64_t result = sub_18DFE2CC8(a1, 0.0);
  int v4 = *(_DWORD *)(a1 + 20);
  uint64_t v5 = *(void *)(a1 + 32);
  *(void *)(v5 + 24 * v4) = 0x3FE0000000000000;
  *(void *)(v5 + 8 * ((2 * v4) | 1)) = 0x3FE0000000000000;
  *(void *)(v5 + 8 * (v4 + 2)) = 0xBFE0000000000000;
  *(void *)(v5 + 24) = 0xBFE0000000000000;
  return result;
}

uint64_t cnrotation::CNRotation::dQdwy@<X0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 24) = 0x400000004;
  *(void *)a1 = &unk_1EDD195A8;
  *(void *)(a1 + 32) = a1 + 40;
  *(_OWORD *)(a1 + 8) = xmmword_18E1F6F70;
  uint64_t result = sub_18DFE2CC8(a1, 0.0);
  uint64_t v4 = *(int *)(a1 + 20);
  uint64_t v5 = *(void *)(a1 + 32);
  *(void *)(v5 + 16 * v4) = 0xBFE0000000000000;
  *(void *)(v5 + 8 * (3 * (int)v4 + 1)) = 0x3FE0000000000000;
  *(void *)(v5 + 16) = 0x3FE0000000000000;
  *(void *)(v5 + 8 * ((int)v4 + 3)) = 0xBFE0000000000000;
  return result;
}

uint64_t cnrotation::CNRotation::dQdwz@<X0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 24) = 0x400000004;
  *(void *)a1 = &unk_1EDD195A8;
  *(void *)(a1 + 32) = a1 + 40;
  *(_OWORD *)(a1 + 8) = xmmword_18E1F6F70;
  uint64_t result = sub_18DFE2CC8(a1, 0.0);
  uint64_t v4 = *(int *)(a1 + 20);
  uint64_t v5 = *(void *)(a1 + 32);
  *(void *)(v5 + 8 * v4) = 0x3FE0000000000000;
  *(void *)(v5 + 8) = 0xBFE0000000000000;
  *(void *)(v5 + 8 * (3 * (int)v4 + 2)) = 0x3FE0000000000000;
  *(void *)(v5 + 8 * (2 * (int)v4 + 3)) = 0xBFE0000000000000;
  return result;
}

double *cnrotation::Cat@<X0>(double *this@<X0>, const cnrotation::CNRotation *a2@<X1>, double *a3@<X8>)
{
  double v4 = this[1];
  double v5 = this[2];
  double v6 = this[3];
  double v7 = *((double *)a2 + 1);
  double v8 = *((double *)a2 + 2);
  double v9 = *((double *)a2 + 3);
  double v10 = v5 * v7 + v6 * *(double *)a2 - v4 * v8 + *this * v9;
  double v11 = v6 * v7 - v5 * *(double *)a2 + *this * v8 + v4 * v9;
  double v12 = v4 * *(double *)a2 - *this * v7 + v6 * v8 + v5 * v9;
  double v13 = -(v4 * v7) - *this * *(double *)a2 - v5 * v8 + v6 * v9;
  double v14 = sqrt(v11 * v11 + v10 * v10 + v12 * v12 + v13 * v13);
  if (fabs(v14) >= 2.22044605e-16)
  {
    double v16 = v10 / v14;
    double v17 = v11 / v14;
    double v18 = v12 / v14;
    double v15 = v13 / v14;
  }
  else
  {
    double v15 = 1.0;
    double v16 = 0.0;
    double v17 = 0.0;
    double v18 = 0.0;
  }
  *a3 = v16;
  a3[1] = v17;
  a3[2] = v18;
  a3[3] = v15;
  return this;
}

float64x2_t *cnrotation::Inv@<X0>(float64x2_t *this@<X0>, float64x2_t *a2@<X8>)
{
  float64x2_t v3 = *this;
  double v5 = this[1].f64[0];
  double v4 = this[1].f64[1];
  double v6 = sqrt(vmlad_n_f64(COERCE_DOUBLE(*(void *)&vmulq_f64(v3, v3).f64[1]), v3.f64[0], v3.f64[0]) + v5 * v5 + v4 * v4);
  if (fabs(v6) >= 2.22044605e-16)
  {
    float64x2_t v7 = vdivq_f64(vnegq_f64(v3), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v6, 0));
    double v9 = -v5 / v6;
    double v8 = v4 / v6;
  }
  else
  {
    float64x2_t v7 = 0uLL;
    double v8 = 1.0;
    double v9 = 0.0;
  }
  *a2 = v7;
  a2[1].f64[0] = v9;
  a2[1].f64[1] = v8;
  return this;
}

uint64_t cnrotation::Slerp(cnrotation *this, const cnrotation::CNRotation *a2, const cnrotation::CNRotation *a3, double a4, cnrotation::CNRotation *a5)
{
  if ((a5 - 17) < 0xFFFFFFF0) {
    return 0xFFFFFFFFLL;
  }
  BOOL v6 = (*(void *)&a4 & 0x7FFFFFFFFFFFFFFFuLL) - 1 < 0xFFFFFFFFFFFFFLL;
  BOOL v7 = a4 < 0.0 && ((*(void *)&a4 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 < 0x3FF;
  if (a4 >= 0.0) {
    BOOL v6 = 0;
  }
  char v8 = (*(void *)&a4 & 0x7FFFFFFFFFFFFFFFLL) == 0x7FF0000000000000 || v6;
  if ((*(void *)&a4 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FF0000000000000) {
    char v8 = 1;
  }
  char v9 = v8 | v7;
  uint64_t v5 = 4294967294;
  if ((v9 & 1) == 0 && a4 <= 1.0)
  {
    *(void *)a3 = 0;
    *((void *)a3 + 1) = 0;
    *((void *)a3 + 2) = 0;
    *((void *)a3 + 3) = 0x3FF0000000000000;
    if (fabs(a4) <= 0.001)
    {
      if (a3 != this)
      {
        *(_OWORD *)a3 = *(_OWORD *)this;
        uint64_t v42 = *((void *)this + 2);
        double v38 = *((double *)this + 3);
LABEL_29:
        *((void *)a3 + 2) = v42;
LABEL_33:
        uint64_t v5 = 0;
        *((double *)a3 + 3) = v38;
        return v5;
      }
    }
    else
    {
      if (vabdd_f64(1.0, a4) > 0.001)
      {
        double v10 = 1.0 - a4;
        double v11 = *((double *)this + 1);
        double v13 = *((double *)this + 2);
        double v12 = *((double *)this + 3);
        double v14 = *((double *)a2 + 1);
        double v16 = *((double *)a2 + 2);
        double v15 = *((double *)a2 + 3);
        double v17 = v11 * v14 + *(double *)this * *(double *)a2 + v13 * v16 + v12 * v15;
        if (v17 < 0.0) {
          double v18 = -1.0;
        }
        else {
          double v18 = 1.0;
        }
        double v19 = v18 * v17 + -1.0;
        uint64_t v20 = (a5 - 1);
        double v21 = dbl_18E1F6FC0[v20];
        double v22 = dbl_18E1F7040[v20];
        double v23 = dbl_18E1F70C0[v20];
        double v24 = v23 * (-(v22 - v21 * (a4 * a4)) * v19);
        double v25 = v23 * (-(v22 - v21 * (v10 * v10)) * v19);
        double v26 = v24 + 1.0;
        double v27 = v25 + 1.0;
        if (a5 != 1)
        {
          uint64_t v28 = v20;
          do
          {
            double v29 = dbl_18E1F6FC0[v28 - 1];
            double v30 = dbl_18E1F7040[v28 - 1];
            double v26 = v19 * -(v30 - v29 * (a4 * a4)) * v26 + 1.0;
            double v27 = v19 * -(v30 - v29 * (v10 * v10)) * v27 + 1.0;
            --v28;
          }
          while (v28 * 8);
        }
        double v31 = v18 * a4 * v26;
        double v32 = v10 * v27;
        double v33 = *(double *)a2 * v31 + *(double *)this * v32;
        double v34 = v14 * v31 + v11 * v32;
        double v35 = v16 * v31 + v13 * v32;
        double v36 = v15 * v31 + v12 * v32;
        double v37 = sqrt(v34 * v34 + v33 * v33 + v35 * v35 + v36 * v36);
        if (fabs(v37) >= 2.22044605e-16)
        {
          double v39 = v33 / v37;
          double v40 = v34 / v37;
          double v41 = v35 / v37;
          double v38 = v36 / v37;
        }
        else
        {
          double v38 = 1.0;
          double v39 = 0.0;
          double v40 = 0.0;
          double v41 = 0.0;
        }
        *(double *)a3 = v39;
        *((double *)a3 + 1) = v40;
        *((double *)a3 + 2) = v41;
        goto LABEL_33;
      }
      if (a3 != a2)
      {
        *(_OWORD *)a3 = *(_OWORD *)a2;
        uint64_t v42 = *((void *)a2 + 2);
        double v38 = *((double *)a2 + 3);
        goto LABEL_29;
      }
    }
    return 0;
  }
  return v5;
}

uint64_t sub_18DFE20A0(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  if (*(_DWORD *)(a2 + 8) != 3 || *(_DWORD *)(a2 + 12) != 3)
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0x3FF0000000000000;
    __assert_rtn("CNRotation", "cnrotation.h", 85, "false && \"Error: attempted to construct CNRotation from invalid CNMatrix.\"");
  }
  uint64_t v56 = 0x300000003;
  int v54 = &unk_1EDD18EE8;
  long long v55 = xmmword_18E1F0010;
  int v57 = &v58;
  sub_18DFE2C64(a2, (uint64_t)&v54);
  uint64_t v61 = 0x300000003;
  long long v60 = xmmword_18E1F0010;
  int v59 = &unk_1EDD18EE8;
  int v62 = &v63;
  sub_18DFE2B44((uint64_t)&v54, a2, (uint64_t)&v59);
  uint64_t v51 = 0x300000003;
  int v49 = &unk_1EDD18EE8;
  int v52 = &v53;
  long long v50 = xmmword_18E1F0010;
  sub_18DFE2CC8((uint64_t)&v49, 0.0);
  int v5 = HIDWORD(v50) + 1;
  BOOL v6 = v52;
  uint64_t *v52 = 0x3FF0000000000000;
  v6[v5] = 0x3FF0000000000000;
  v6[2 * v5] = 0x3FF0000000000000;
  uint64_t v66 = 0x300000003;
  long long v65 = xmmword_18E1F0010;
  uint64_t v64 = &unk_1EDD18EE8;
  int v67 = (double *)&v68;
  sub_18DFE2AA8((uint64_t)&v59, (uint64_t)&v49, (uint64_t)&v64);
  uint64_t v72 = 0x300000003;
  v69[0] = &unk_1EDD18EE8;
  uint64_t v7 = (DWORD1(v65) * v65);
  char v8 = (double *)v74;
  uint64_t v73 = v74;
  v69[1] = v65;
  int v70 = v7;
  int v71 = v65;
  if ((int)v7 >= 1)
  {
    char v9 = v67;
    do
    {
      double v10 = *v9++;
      *v8++ = fabs(v10);
      --v7;
    }
    while (v7);
  }
  uint64_t v77 = 0x300000003;
  long long v76 = xmmword_18E1F0010;
  int v75 = &unk_1EDD18EE8;
  int v78 = v79;
  uint64_t v87 = 0x300000003;
  long long v86 = xmmword_18E1F0010;
  int v85 = &unk_1EDD18F18;
  v88 = (double *)v89;
  sub_18DFE2718((uint64_t)v69, (uint64_t)&v75, (uint64_t)&v85);
  uint64_t v87 = 0x300000003;
  long long v86 = xmmword_18E1F0010;
  int v85 = &unk_1EDD18EE8;
  v88 = (double *)v89;
  uint64_t v82 = 0x300000003;
  long long v81 = xmmword_18E1F0010;
  int v80 = &unk_1EDD18F18;
  int v83 = &v84;
  sub_18DFE2718((uint64_t)&v75, (uint64_t)&v85, (uint64_t)&v80);
  if (fabs(*v88) > 0.00001)
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0x3FF0000000000000;
    __assert_rtn("CNRotation", "cnrotation.h", 93, "false && \"Error: attempted to construct CNRotation from non-orthogonal CNMatrix.\"");
  }
  uint64_t v77 = 0x100000003;
  long long v76 = xmmword_18E1F6F60;
  int v75 = &unk_1EDD18DC8;
  int v78 = v79;
  uint64_t v87 = 0x300000003;
  long long v86 = xmmword_18E1F0010;
  int v85 = &unk_1EDD18EE8;
  v88 = (double *)v89;
  if (fabs(sub_18DFE2D1C(a2, (uint64_t)&v75, (uint64_t)&v85) + -1.0) > 0.00001)
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0x3FF0000000000000;
    __assert_rtn("CNRotation", "cnrotation.h", 101, "false && \"Error: attempted to construct CNRotation from non-special-orthogonal CNMatrix.\"");
  }
  sub_18DFE2FA8((uint64_t)&v85, a2);
  uint64_t v11 = v86;
  if ((int)v86 <= 0)
  {
    double v16 = v88;
    int v13 = HIDWORD(v86);
    int v14 = HIDWORD(v86) + 1;
  }
  else
  {
    int v12 = 0;
    int v13 = HIDWORD(v86);
    int v14 = HIDWORD(v86) + 1;
    double v15 = 0.0;
    double v16 = v88;
    do
    {
      double v15 = v15 + v88[v12];
      v12 += v14;
      --v11;
    }
    while (v11);
    if (v15 > 0.0)
    {
      double v17 = v88[v14];
      double v18 = &v88[2 * HIDWORD(v86)];
      double v19 = sqrt(*v88 + 1.0 + v17 + v18[2]);
      double v20 = (v18[1] - v88[HIDWORD(v86) + 2]) / (v19 + v19);
      double v21 = (v88[2] - v88[2 * SHIDWORD(v86)]) / (v19 + v19);
      double v22 = (v88[SHIDWORD(v86)] - v88[1]) / (v19 + v19);
      double v23 = v19 * 0.5;
      goto LABEL_27;
    }
  }
  double v24 = v16[v14];
  double v25 = *v16;
  uint64_t v26 = v13;
  uint64_t v27 = 2 * v13;
  uint64_t v28 = v27 + 2;
  if (*v16 <= v24 || (double v29 = v16[v28], v25 <= v29))
  {
    double v33 = v16[v28];
    if (v24 <= v25 || v24 <= v33)
    {
      double v35 = sqrt(v33 + 1.0 - v25 - v24);
      double v36 = v16[1];
      double v41 = v35 + v35;
      double v20 = (v16[2] + v16[(int)v27]) / (v35 + v35);
      double v37 = *(double *)((char *)v16 + ((8 * (int)v27) | 8));
      double v38 = &v16[v26];
      double v21 = (v37 + v38[2]) / (v35 + v35);
      double v22 = v35 * 0.5;
      double v42 = *v38 - v36;
    }
    else
    {
      double v39 = sqrt(v24 + 1.0 - v25 - v33);
      double v40 = &v16[v26];
      double v41 = v39 + v39;
      double v20 = (v16[1] + *v40) / (v39 + v39);
      double v21 = v39 * 0.5;
      double v22 = (*(double *)((char *)v16 + ((8 * (int)v27) | 8)) + v40[2]) / v41;
      double v42 = v16[2] - v16[(int)v27];
    }
    double v23 = v42 / v41;
  }
  else
  {
    double v30 = sqrt(v25 + 1.0 - v24 - v29);
    double v20 = v30 * 0.5;
    double v31 = &v16[v26];
    double v32 = v30 + v30;
    double v21 = (v16[1] + *v31) / (v30 + v30);
    double v22 = (v16[2] + v16[(int)v27]) / v32;
    double v23 = (*(double *)((char *)v16 + ((8 * (int)v27) | 8)) - v31[2]) / v32;
  }
LABEL_27:
  double v43 = sqrt(v21 * v21 + v20 * v20 + v22 * v22 + v23 * v23);
  if (fabs(v43) >= 2.22044605e-16)
  {
    double v45 = v20 / v43;
    double v46 = v21 / v43;
    double v47 = v22 / v43;
    double v44 = v23 / v43;
  }
  else
  {
    double v44 = 1.0;
    double v45 = 0.0;
    double v46 = 0.0;
    double v47 = 0.0;
  }
  *(double *)a1 = v45;
  *(double *)(a1 + 8) = v46;
  *(double *)(a1 + 16) = v47;
  *(double *)(a1 + 24) = v44;
  return a1;
}

__n128 sub_18DFE2718(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_18DFE2934(a1, 1, a2, a3);
  if (*(_DWORD *)(a1 + 8) == 1 || *(_DWORD *)(a1 + 12) == 1)
  {
    int v8 = *(_DWORD *)(a2 + 16);
    if (v8 >= 2)
    {
      char v9 = *(double **)(a2 + 32);
      double v10 = *(_DWORD **)(a3 + 32);
      double v11 = *v9;
      for (uint64_t i = 1; i < v8; ++i)
      {
        double v13 = v9[i];
        if (v13 > v11)
        {
          double *v9 = v13;
          *double v10 = v10[i];
          int v8 = *(_DWORD *)(a2 + 16);
          double v11 = v13;
        }
      }
    }
    result.n128_u64[0] = 0x100000001;
    result.n128_u64[1] = 0x100000001;
    *(__n128 *)(a2 + 8) = result;
    *(__n128 *)(a3 + 8) = result;
  }
  return result;
}

void *sub_18DFE27BC(void *result)
{
  *__n128 result = &unk_1EDD174D8;
  return result;
}

void sub_18DFE27DC(void *a1)
{
  *a1 = &unk_1EDD174D8;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18DFE280C(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18DFE2818(uint64_t a1)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  sub_18DFE2870(a1, v1);
}

void sub_18DFE2870(uint64_t a1, char *a2)
{
  unsigned int v2 = *(_DWORD *)(a1 + 8);
  if (v2 >= 2)
  {
    unsigned int v4 = *(_DWORD *)(a1 + 12);
    if (v4 >= 2)
    {
      int v6 = *(_DWORD *)(a1 + 20);
      bzero(a2, *(unsigned int *)(a1 + 16));
      int v7 = *(_DWORD *)(a1 + 16);
      if (v7 >= 3)
      {
        uint64_t v8 = (v7 - 1);
        uint64_t v9 = *(void *)(a1 + 32);
        uint64_t v10 = 1;
        do
        {
          double v11 = &a2[v10];
          if (!a2[v10])
          {
            int v12 = *(_DWORD *)(v9 + 4 * v10);
            int v13 = v10;
            do
            {
              int v13 = (int)(v13 * (v4 + v2 - v6)) % (int)v8;
              int v14 = *(_DWORD *)(v9 + 4 * v13);
              *(_DWORD *)(v9 + 4 * v13) = v12;
              *double v11 = 1;
              double v11 = &a2[v13];
              int v12 = v14;
            }
            while (!*v11);
          }
          ++v10;
        }
        while (v10 != v8);
      }
    }
  }
}

uint64_t sub_18DFE2934(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  if (a2 == 1)
  {
    int v4 = *(_DWORD *)(result + 12);
    *(_DWORD *)(a3 + 8) = 1;
    *(_DWORD *)(a3 + 12) = v4;
    *(_DWORD *)(a3 + 16) = v4;
    *(_DWORD *)(a3 + 20) = 1;
    int v5 = *(_DWORD *)(result + 12);
    *(_DWORD *)(a4 + 8) = 1;
    *(_DWORD *)(a4 + 12) = v5;
    *(_DWORD *)(a4 + 16) = v5;
    *(_DWORD *)(a4 + 20) = 1;
    if (v5)
    {
      unint64_t v6 = 0;
      uint64_t v7 = *(void *)(result + 32);
      uint64_t v8 = *(void *)(a3 + 32);
      uint64_t v9 = *(void *)(a4 + 32);
      do
      {
        uint64_t v10 = *(unsigned int *)(result + 8);
        double v11 = *(double *)(v7 + 8 * (v10 * v6));
        if (v10 < 2)
        {
          int v12 = 0;
        }
        else
        {
          int v12 = 0;
          int v13 = v10 * v6;
          for (uint64_t i = 1; i != v10; ++i)
          {
            if (*(double *)(v7 + 8 * (v13 + i)) > v11)
            {
              double v11 = *(double *)(v7 + 8 * (v13 + i));
              int v12 = i;
            }
          }
        }
        *(double *)(v8 + 8 * v6) = v11;
        *(_DWORD *)(v9 + 4 * v6++) = v12;
      }
      while (v6 < *(unsigned int *)(result + 12));
    }
  }
  else
  {
    v15.i32[1] = 1;
    v15.i32[0] = *(_DWORD *)(result + 8);
    int32x4_t v16 = vdupq_lane_s32(v15, 0);
    v16.i32[1] = 1;
    *(int32x4_t *)(a3 + 8) = v16;
    unsigned int v17 = *(_DWORD *)(result + 8);
    int32x4_t v18 = vdupq_lane_s32((int32x2_t)(v17 | 0x100000000), 0);
    v18.i32[1] = 1;
    *(int32x4_t *)(a4 + 8) = v18;
    if (v17)
    {
      unint64_t v19 = 0;
      uint64_t v20 = *(void *)(result + 32);
      uint64_t v21 = *(void *)(a3 + 32);
      uint64_t v22 = *(void *)(a4 + 32);
      do
      {
        *(void *)(v21 + 8 * v19) = *(void *)(v20 + 8 * v19);
        *(_DWORD *)(v22 + 4 * v19++) = 0;
      }
      while (v19 < *(unsigned int *)(result + 8));
    }
    unsigned int v23 = *(_DWORD *)(result + 12);
    if (v23 >= 2)
    {
      uint64_t v24 = *(void *)(result + 32);
      uint64_t v25 = *(void *)(a3 + 32);
      unsigned int v26 = *(_DWORD *)(result + 8);
      unsigned int v27 = 1;
      unsigned int v28 = v26;
      do
      {
        if (v28)
        {
          unint64_t v29 = 0;
          uint64_t v30 = *(void *)(a4 + 32);
          int v31 = v28 * v27;
          do
          {
            double v32 = *(double *)(v24 + 8 * (v31 + v29));
            if (v32 > *(double *)(v25 + 8 * v29))
            {
              *(double *)(v25 + 8 * v29) = v32;
              *(_DWORD *)(v30 + 4 * v29) = v27;
              unsigned int v26 = *(_DWORD *)(result + 8);
            }
            ++v29;
          }
          while (v29 < v26);
          unsigned int v23 = *(_DWORD *)(result + 12);
          unsigned int v28 = v26;
        }
        ++v27;
      }
      while (v27 < v23);
    }
  }
  return result;
}

float64x2_t sub_18DFE2AA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(a1 + 8);
  int v3 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a3 + 8) = v4;
  *(_DWORD *)(a3 + 12) = v3;
  uint64_t v5 = (v3 * v4);
  *(_DWORD *)(a3 + 16) = v5;
  *(_DWORD *)(a3 + 20) = v4;
  if ((int)v5 > 3)
  {
    uint64_t v13 = (v5 - 2);
    int v14 = *(float64x2_t **)(a1 + 32);
    int32x2_t v15 = *(float64x2_t **)(a2 + 32);
    int32x4_t v16 = *(float64x2_t **)(a3 + 32);
    unsigned int v17 = (float64x2_t *)((char *)v15 + 8 * v13);
    uint64_t v18 = (v5 - 1) >> 1;
    unint64_t v19 = v14;
    uint64_t v20 = v16;
    do
    {
      float64x2_t v21 = *v19++;
      float64x2_t v22 = v21;
      float64x2_t v23 = *v15++;
      *v20++ = vsubq_f64(v22, v23);
      --v18;
    }
    while (v18);
    float64x2_t result = vsubq_f64(*(float64x2_t *)((char *)v14 + 8 * v13), *v17);
    *(float64x2_t *)((char *)v16 + 8 * v13) = result;
  }
  else if ((int)v5 >= 1)
  {
    unint64_t v6 = *(double **)(a1 + 32);
    uint64_t v7 = *(double **)(a2 + 32);
    uint64_t v8 = *(float64_t **)(a3 + 32);
    do
    {
      double v9 = *v6++;
      double v10 = v9;
      double v11 = *v7++;
      result.f64[0] = v10 - v11;
      *v8++ = result.f64[0];
      --v5;
    }
    while (v5);
  }
  return result;
}

void sub_18DFE2B44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t __ldc = *(void *)(a1 + 8);
  uint64_t __ldb = *(void *)(a2 + 8);
  uint64_t v5 = __ldc;
  *(void *)(a3 + 8) = __PAIR64__(HIDWORD(__ldb), __ldc);
  *(_DWORD *)(a3 + 16) = HIDWORD(__ldb) * __ldc;
  *(_DWORD *)(a3 + 20) = __ldc;
  v6.i64[0] = __ldc;
  v6.i64[1] = __ldb;
  uint64_t v7 = *(const double **)(a1 + 32);
  if ((int)vmaxvq_u32(v6) > 5)
  {
    cblas_dgemm(CblasColMajor, CblasNoTrans, CblasNoTrans, __ldc, SHIDWORD(__ldb), SHIDWORD(__ldc), 1.0, v7, __ldc, *(const double **)(a2 + 32), __ldb, 0.0, *(double **)(a3 + 32), __ldc);
  }
  else if (HIDWORD(__ldb))
  {
    uint64_t v8 = 0;
    double v9 = *(double **)(a2 + 32);
    uint64_t v10 = *(void *)(a3 + 32);
    uint64_t v11 = HIDWORD(__ldc);
    do
    {
      if (v5)
      {
        uint64_t v12 = 0;
        uint64_t v13 = (double *)v7;
        do
        {
          double v14 = 0.0;
          if (v11)
          {
            int32x2_t v15 = v13;
            int32x4_t v16 = v9;
            uint64_t v17 = v11;
            do
            {
              double v18 = *v16++;
              double v14 = v14 + *v15 * v18;
              v15 += v5;
              --v17;
            }
            while (v17);
          }
          *(double *)(v10 + 8 * (v12 + v8 * v5)) = v14;
          ++v12;
          ++v13;
        }
        while (v12 != v5);
      }
      ++v8;
      v9 += __ldb;
    }
    while (v8 != HIDWORD(__ldb));
  }
}

uint64_t sub_18DFE2C64(uint64_t result, uint64_t a2)
{
  int v3 = *(_DWORD *)(result + 8);
  int v2 = *(_DWORD *)(result + 12);
  *(_DWORD *)(a2 + 8) = v2;
  *(_DWORD *)(a2 + 12) = v3;
  *(_DWORD *)(a2 + 16) = v3 * v2;
  *(_DWORD *)(a2 + 20) = v2;
  if (v2)
  {
    int v4 = 0;
    int v5 = 0;
    int v6 = *(_DWORD *)(result + 20);
    uint64_t v7 = *(void *)(result + 32);
    uint64_t v8 = *(void *)(a2 + 32);
    do
    {
      int v9 = v4;
      int v10 = v5;
      for (int i = v3; i; --i)
      {
        *(void *)(v8 + 8 * v10) = *(void *)(v7 + 8 * v9);
        v10 += v2;
        ++v9;
      }
      ++v5;
      v4 += v6;
    }
    while (v5 != v2);
  }
  return result;
}

uint64_t sub_18DFE2CC8(uint64_t result, double a2)
{
  int v2 = *(double **)(result + 32);
  uint64_t v3 = *(unsigned int *)(result + 16);
  if ((int)v3 > 3)
  {
    uint64_t v4 = (v3 - 2);
    uint64_t v5 = (v3 - 1) >> 1;
    int64x2_t v6 = vdupq_lane_s64(*(uint64_t *)&a2, 0);
    uint64_t v7 = *(int64x2_t **)(result + 32);
    do
    {
      *v7++ = v6;
      --v5;
    }
    while (v5);
    *(int64x2_t *)&v2[v4] = v6;
  }
  else if ((int)v3 >= 1)
  {
    do
    {
      *v2++ = a2;
      --v3;
    }
    while (v3);
  }
  return result;
}

double sub_18DFE2D1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_18DFE2F24(a3, a1);
  uint64_t v10 = *(unsigned int *)(a3 + 8);
  unint64_t v11 = *(unsigned int *)(a3 + 12);
  uint64_t v12 = *(__CLPK_doublereal **)(a3 + 32);
  __CLPK_integer v13 = *(_DWORD *)(a3 + 20);
  double v14 = *(void **)(a2 + 32);
  __CLPK_integer __n = *(_DWORD *)(a3 + 12);
  __CLPK_integer __m = v10;
  __CLPK_integer __lda = v13;
  if ((int)v10 < 1)
  {
    char v18 = -1;
  }
  else
  {
    size_t v15 = 4 * v10;
    int32x4_t v16 = (__CLPK_integer *)operator new[](4 * v10, MEMORY[0x1E4FBA2D0]);
    if (v16)
    {
      uint64_t v17 = v16;
      __CLPK_integer __info = 0;
      dgetrf_(&__m, &__n, v12, &__lda, v16, &__info);
      memcpy(v14, v17, v15);
      MEMORY[0x192FA6220](v17, 0x1000C8052888210);
      char v18 = __info;
      if ((__info & 0x80000000) == 0) {
        goto LABEL_8;
      }
    }
    else
    {
      char v18 = -5;
    }
  }
  LOWORD(__m) = 4;
  LOBYTE(__n) = 5;
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&__m, (unsigned __int8 *)&__n, "Error using Det: input argument %d invalid in getrf.", v5, v6, v7, v8, v9, -v18);
LABEL_8:
  unint64_t v19 = *(double **)(a3 + 32);
  double result = *v19;
  if (v11 >= 2)
  {
    int v21 = v11 - 1;
    int v22 = v11 + 1;
    do
    {
      double result = result * v19[v22];
      v22 += v11 + 1;
      --v21;
    }
    while (v21);
  }
  if ((int)v11 >= 1)
  {
    char v23 = 0;
    do
      v23 += v11 != *(unsigned int *)(*(void *)(a2 + 32) + 4 * (v11 - 1));
    while (v11-- > 1);
    if (v23) {
      return -result;
    }
  }
  return result;
}

void *sub_18DFE2E9C(void *result)
{
  *double result = &unk_1EDD174A8;
  return result;
}

void sub_18DFE2EBC(void *a1)
{
  *a1 = &unk_1EDD174A8;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18DFE2EEC(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18DFE2EF8(uint64_t a1)
{
  sub_18DFE2870(a1, v1);
}

__n128 sub_18DFE2F24(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    int v3 = *(_DWORD *)(a2 + 8);
    int v2 = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(a1 + 8) = v3;
    *(_DWORD *)(a1 + 12) = v2;
    uint64_t v4 = (v2 * v3);
    *(_DWORD *)(a1 + 16) = v4;
    *(_DWORD *)(a1 + 20) = v3;
    int v5 = *(_DWORD *)(a2 + 16);
    if (v5 > 3)
    {
      uint64_t v10 = (v5 - 2);
      unint64_t v11 = *(_OWORD **)(a1 + 32);
      uint64_t v12 = *(long long **)(a2 + 32);
      __CLPK_integer v13 = (__n128 *)((char *)v11 + 8 * v10);
      uint64_t v14 = (v5 - 1) >> 1;
      size_t v15 = v12;
      do
      {
        long long v16 = *v15++;
        *v11++ = v16;
        --v14;
      }
      while (v14);
      __n128 result = *(__n128 *)((char *)v12 + 8 * v10);
      __n128 *v13 = result;
    }
    else if ((int)v4 >= 1)
    {
      uint64_t v6 = *(unint64_t **)(a2 + 32);
      uint64_t v7 = *(unint64_t **)(a1 + 32);
      do
      {
        unint64_t v8 = *v6++;
        result.n128_u64[0] = v8;
        *v7++ = v8;
        --v4;
      }
      while (v4);
    }
  }
  return result;
}

__n128 sub_18DFE2FA8(uint64_t a1, uint64_t a2)
{
  result.n128_u64[0] = 0x300000003;
  *(void *)(a1 + 24) = 0x300000003;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1EDD18EE8;
  if (a1 == a2)
  {
    uint64_t v17 = "this != &(A)";
    int v18 = 603;
    goto LABEL_16;
  }
  int v3 = *(_DWORD *)(a2 + 8);
  int v4 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = v4;
  uint64_t v5 = (v4 * v3);
  *(_DWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 20) = v3;
  uint64_t v6 = (unint64_t *)(a1 + 40);
  *(void *)(a1 + 32) = a1 + 40;
  if (*(_DWORD *)(a2 + 8) > 3u)
  {
    uint64_t v17 = "this->max_num_rows_ >= A.num_rows_";
    int v18 = 616;
    goto LABEL_16;
  }
  if (*(_DWORD *)(a2 + 12) >= 4u)
  {
    uint64_t v17 = "this->max_num_cols_ >= A.num_cols_";
    int v18 = 617;
LABEL_16:
    __assert_rtn("CNMatrix", "cnmatrix.h", v18, v17);
  }
  int v7 = *(_DWORD *)(a2 + 16);
  if (v7 > 3)
  {
    uint64_t v10 = (v7 - 2);
    unint64_t v11 = *(long long **)(a2 + 32);
    uint64_t v12 = (v7 - 1) >> 1;
    __CLPK_integer v13 = v11;
    uint64_t v14 = (_OWORD *)(a1 + 40);
    do
    {
      long long v15 = *v13++;
      *v14++ = v15;
      --v12;
    }
    while (v12);
    uint64_t v16 = v10;
    __n128 result = *(__n128 *)((char *)v11 + v16 * 8);
    *(__n128 *)&v6[v16] = result;
  }
  else if ((int)v5 >= 1)
  {
    unint64_t v8 = *(unint64_t **)(a2 + 32);
    do
    {
      unint64_t v9 = *v8++;
      result.n128_u64[0] = v9;
      *v6++ = v9;
      --v5;
    }
    while (v5);
  }
  return result;
}

void sub_18DFE30D4(_Unwind_Exception *a1)
{
  *unint64_t v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

void sub_18DFE30F4(void *a1)
{
  *a1 = &unk_1EDD17478;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18DFE3124(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18DFE3130(uint64_t a1)
{
  sub_18DEF3CF4(a1, v1);
}

void sub_18DFE3154(void *a1)
{
  *a1 = &unk_1EDD17478;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18DFE3184(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18DFE3190(uint64_t a1)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  sub_18DEF3CF4(a1, v1);
}

void sub_18DFE31E0(void *a1)
{
  *a1 = &unk_1EDD17478;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18DFE3210(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18DFE321C(uint64_t a1)
{
  sub_18DEF3CF4(a1, v1);
}

float64x2_t sub_18DFE3240(uint64_t a1, uint64_t a2, float64x2_t result)
{
  int v4 = *(_DWORD *)(a1 + 8);
  int v3 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a2 + 8) = v4;
  *(_DWORD *)(a2 + 12) = v3;
  uint64_t v5 = (v3 * v4);
  *(_DWORD *)(a2 + 16) = v5;
  *(_DWORD *)(a2 + 20) = v4;
  if ((int)v5 > 3)
  {
    uint64_t v9 = (v5 - 2);
    uint64_t v10 = *(float64x2_t **)(a1 + 32);
    unint64_t v11 = *(float64x2_t **)(a2 + 32);
    uint64_t v12 = (float64x2_t *)((char *)v10 + 8 * v9);
    uint64_t v13 = (v5 - 1) >> 1;
    uint64_t v14 = v11;
    do
    {
      float64x2_t v15 = *v10++;
      *v14++ = vmulq_n_f64(v15, result.f64[0]);
      --v13;
    }
    while (v13);
    __n128 result = vmulq_n_f64(*v12, result.f64[0]);
    *(float64x2_t *)((char *)v11 + 8 * v9) = result;
  }
  else if ((int)v5 >= 1)
  {
    uint64_t v6 = *(double **)(a1 + 32);
    int v7 = *(double **)(a2 + 32);
    do
    {
      double v8 = *v6++;
      *v7++ = v8 * result.f64[0];
      --v5;
    }
    while (v5);
  }
  return result;
}

double sub_18DFE32C4(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  unsigned int v2 = *(_DWORD *)(a2 + 8);
  unsigned int v3 = *(_DWORD *)(a2 + 12);
  if (v2 <= v3) {
    int v4 = *(_DWORD *)(a2 + 12);
  }
  else {
    int v4 = *(_DWORD *)(a2 + 8);
  }
  if (v2) {
    BOOL v5 = v3 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5 || v4 != 4)
  {
    *(_OWORD *)a1 = 0uLL;
    *(_OWORD *)(a1 + 16) = 0uLL;
    __assert_rtn("CNQuaternion", "cnquaternion.h", 60, "false && \"Error: attempted to create a CNQuaternion from an invalid CNMatrix.\"");
  }
  uint64_t v7 = *(void *)(a2 + 32);
  *(void *)a1 = *(void *)v7;
  *(void *)(a1 + 8) = *(void *)(v7 + 8);
  *(void *)(a1 + 16) = *(void *)(v7 + 16);
  double result = *(double *)(v7 + 24);
  *(double *)(a1 + 24) = result;
  return result;
}

void sub_18DFE3344(void *a1)
{
  *a1 = &unk_1EDD17478;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18DFE3374(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18DFE3380(uint64_t a1)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  sub_18DEF3CF4(a1, v1);
}

void sub_18DFE33D0(void *a1)
{
  *a1 = &unk_1EDD17478;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18DFE3400(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18DFE340C(uint64_t a1)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  sub_18DEF3CF4(a1, v1);
}

void sub_18DFE345C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char *__s1)
{
  uint64_t v5 = *(unsigned int *)(a1 + 16);
  if (v5)
  {
    uint64_t v11 = *(unsigned int *)(a1 + 8);
    uint64_t v12 = *(unsigned int *)(a1 + 12);
    int v13 = strcmp(__s1, "2");
    if (v11 == 1 || v12 == 1)
    {
      if (v13)
      {
        if (!strcmp(__s1, "1"))
        {
          int v31 = *(double **)(a1 + 32);
          double v32 = fabs(*v31);
          if (v5 >= 2)
          {
            uint64_t v33 = v5 - 1;
            double v34 = v31 + 1;
            do
            {
              double v35 = *v34++;
              double v32 = v32 + fabs(v35);
              --v33;
            }
            while (v33);
          }
        }
        else if (!strcmp(__s1, "inf"))
        {
          int v49 = *(double **)(a1 + 32);
          double v50 = fabs(*v49);
          if (v5 >= 2)
          {
            uint64_t v51 = v5 - 1;
            int v52 = v49 + 1;
            do
            {
              double v53 = *v52++;
              double v54 = fabs(v53);
              if (v54 > v50) {
                double v50 = v54;
              }
              --v51;
            }
            while (v51);
          }
        }
        else if (!strcmp(__s1, "-inf"))
        {
          uint64_t v66 = *(double **)(a1 + 32);
          double v67 = fabs(*v66);
          if (v5 >= 2)
          {
            uint64_t v68 = v5 - 1;
            int v69 = v66 + 1;
            do
            {
              double v70 = *v69++;
              double v71 = fabs(v70);
              if (v71 < v67) {
                double v67 = v71;
              }
              --v68;
            }
            while (v68);
          }
        }
        else
        {
          long double v89 = 0.0;
          if (sscanf(__s1, "%lg", &v89) == 1)
          {
            long double v20 = v89;
            if (fabs(v89) >= 2.22044605e-16)
            {
              uint64_t v82 = *(double **)(a1 + 32);
              long double v83 = pow(fabs(*v82), v89);
              if (v5 >= 2)
              {
                uint64_t v84 = v5 - 1;
                int v85 = v82 + 1;
                do
                {
                  double v86 = *v85++;
                  long double v83 = v83 + pow(fabs(v86), v20);
                  --v84;
                }
                while (v84);
              }
              pow(v83, 1.0 / v20);
            }
          }
          else
          {
            __int16 v88 = 4;
            unsigned __int8 v87 = 5;
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v88, &v87, "Error using Norm: invalid %s-norm.", v15, v16, v17, v18, v19, (char)__s1);
          }
        }
      }
      else
      {
        unsigned int v26 = *(double **)(a1 + 32);
        double v27 = *v26 * *v26;
        if (v5 >= 2)
        {
          uint64_t v28 = v5 - 1;
          unint64_t v29 = v26 + 1;
          do
          {
            double v30 = *v29++;
            double v27 = v27 + v30 * v30;
            --v28;
          }
          while (v28);
        }
      }
    }
    else if (v13)
    {
      if (!strcmp(__s1, "1"))
      {
        if (v12)
        {
          uint64_t v36 = 0;
          uint64_t v37 = *(void *)(a1 + 32);
          double v38 = *(double **)(a2 + 32);
          int v39 = 1;
          do
          {
            double v40 = fabs(*(double *)(v37 + 8 * (v11 * v36)));
            v38[v36] = v40;
            unsigned int v41 = v39;
            uint64_t v42 = v11 - 1;
            if (v11 >= 2)
            {
              do
              {
                double v40 = v40 + fabs(*(double *)(v37 + 8 * v41));
                v38[v36] = v40;
                ++v41;
                --v42;
              }
              while (v42);
            }
            ++v36;
            v39 += v11;
          }
          while (v36 != v12);
          double v44 = *v38;
          double v43 = v38 + 1;
          double v45 = v44;
          uint64_t v46 = v12 - 1;
          do
          {
            double v47 = *v43++;
            double v48 = v47;
            if (v47 > v45) {
              double v45 = v48;
            }
            --v46;
          }
          while (v46);
        }
      }
      else if (!strcmp(__s1, "inf"))
      {
        if (v11)
        {
          long long v55 = *(double **)(a1 + 32);
          uint64_t v56 = *(double **)(a2 + 32);
          uint64_t v57 = v11;
          do
          {
            double v58 = *v55++;
            *v56++ = fabs(v58);
            --v57;
          }
          while (v57);
        }
        if (v12 <= 1)
        {
          long long v60 = *(double **)(a2 + 32);
        }
        else
        {
          uint64_t v59 = *(void *)(a1 + 32);
          long long v60 = *(double **)(a2 + 32);
          int v61 = 1;
          unsigned int v62 = v11;
          do
          {
            unsigned int v63 = v62;
            uint64_t v64 = v60;
            uint64_t v65 = v11;
            if (v11)
            {
              do
              {
                double *v64 = fabs(*(double *)(v59 + 8 * v63)) + *v64;
                ++v64;
                ++v63;
                --v65;
              }
              while (v65);
            }
            ++v61;
            v62 += v11;
          }
          while (v61 != v12);
        }
        double v77 = *v60;
        if (v11 >= 2)
        {
          uint64_t v78 = v11 - 1;
          int v79 = v60 + 1;
          do
          {
            double v80 = *v79++;
            double v81 = v80;
            if (v80 > v77) {
              double v77 = v81;
            }
            --v78;
          }
          while (v78);
        }
      }
      else if (!strcmp(__s1, "fro"))
      {
        uint64_t v72 = *(double **)(a1 + 32);
        double v73 = *v72 * *v72;
        if (v5 >= 2)
        {
          uint64_t v74 = v5 - 1;
          int v75 = v72 + 1;
          do
          {
            double v76 = *v75++;
            double v73 = v73 + v76 * v76;
            --v74;
          }
          while (v74);
        }
      }
      else
      {
        __int16 v91 = 4;
        unsigned __int8 v90 = 5;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v91, &v90, "Error using Norm: invalid %s-norm.", v21, v22, v23, v24, v25, (char)__s1);
      }
    }
    else
    {
      sub_18DFE3970(a1, a2, a3, a4);
    }
  }
}

void *sub_18DFE38BC(void *result)
{
  *double result = &unk_1EDD17478;
  return result;
}

void sub_18DFE38DC(void *a1)
{
  *a1 = &unk_1EDD17478;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18DFE390C(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18DFE3918(uint64_t a1)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  sub_18DEF3CF4(a1, v1);
}

double sub_18DFE3970(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v7 = *(_DWORD *)(a1 + 8);
  unsigned int v8 = *(_DWORD *)(a1 + 12);
  unsigned int v9 = *(_DWORD *)(a3 + 28) * *(_DWORD *)(a3 + 24);
  sub_18DFE2F24(a2, a1);
  __CLPK_integer v10 = *(_DWORD *)(a2 + 8);
  __CLPK_integer v11 = *(_DWORD *)(a2 + 12);
  uint64_t v12 = *(__CLPK_doublereal **)(a2 + 32);
  int v13 = *(__CLPK_doublereal **)(a4 + 32);
  uint64_t v14 = *(__CLPK_doublereal **)(a3 + 32);
  char __jobu = 78;
  char __jobvt = 78;
  __CLPK_integer __n = v11;
  __CLPK_integer __m = v10;
  __CLPK_integer __lda = v10;
  __CLPK_integer __ldvt = 1;
  __CLPK_integer __ldu = 1;
  __CLPK_integer v32 = 0;
  __CLPK_integer __lwork = v9;
  uint64_t v15 = (cnprint::CNPrinter *)dgesvd_(&__jobu, &__jobvt, &__m, &__n, v12, &__lda, v13, 0, &__ldu, 0, &__ldvt, v14, &__lwork, &v32);
  if (v32)
  {
    LOWORD(__m) = 4;
    if (v32 < 0)
    {
      LOBYTE(__n) = 5;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&__m, (unsigned __int8 *)&__n, "Error using Svd: input argument %d invalid in gesvd.", v16, v17, v18, v19, v20, -(char)v32);
    }
    else
    {
      LOBYTE(__n) = 4;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&__m, (unsigned __int8 *)&__n, "Error using Svd: gesvd failed to converge on %d superdiagonals.", v16, v17, v18, v19, v20, v32);
    }
  }
  unsigned int v21 = **(double **)(a3 + 32);
  if (v9 < v21 && cnprint::CNPrinter::GetLogLevel(v15) <= 1)
  {
    LOWORD(__m) = 4;
    LOBYTE(__n) = 1;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&__m, (unsigned __int8 *)&__n, "Warning: Svd optimal workspace size %u is greater than provided workspace size %u; performance may suffer.",
      v22,
      v23,
      v24,
      v25,
      v26,
      v21);
  }
  if (v8 >= v7) {
    unsigned int v27 = v7;
  }
  else {
    unsigned int v27 = v8;
  }
  int v28 = *(_DWORD *)(a3 + 24);
  int v29 = *(_DWORD *)(a3 + 28);
  *(_DWORD *)(a3 + 8) = v28;
  *(_DWORD *)(a3 + 12) = v29;
  *(_DWORD *)(a3 + 16) = v29 * v28;
  *(_DWORD *)(a3 + 20) = v28;
  int32x4_t v30 = vdupq_lane_s32((int32x2_t)(v27 | 0x100000000), 0);
  v30.i32[1] = 1;
  *(int32x4_t *)(a4 + 8) = v30;
  return *(double *)v30.i64;
}

void cnstatistics::NormalPDF(cnstatistics *this, double a2, double a3, double a4)
{
  if (a4 > 0.0)
  {
    uint64_t v14 = v7;
    uint64_t v15 = v6;
    uint64_t v16 = v4;
    uint64_t v17 = v5;
    if (fabs(a2) != INFINITY && fabs(a3) != INFINITY && fabs(a4) != INFINITY)
    {
      sub_18DFE4028(&v11, a3, a4);
      double v13 = v12;
      if (v12 <= 0.0 || (*(void *)&v12 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
      {
        __CLPK_integer v10 = "Scale parameter is %1%, but must be > 0 !";
        goto LABEL_11;
      }
      double v13 = v11;
      if ((*(void *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
      {
        __CLPK_integer v10 = "Location parameter is %1%, but must be finite!";
      }
      else
      {
        double v13 = a2;
        if ((*(void *)&a2 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
        {
          exp(-((a2 - v11) * (a2 - v11)) / (v12 * (v12 + v12)));
          return;
        }
        __CLPK_integer v10 = "Random variate x is %1%, but must be finite!";
      }
LABEL_11:
      sub_18DFE40C4("boost::math::pdf(const normal_distribution<%1%>&, %1%)", v10);
    }
  }
}

double cnstatistics::NormalCDF(cnstatistics *this, double a2, double a3, double a4)
{
  double v9 = a2;
  if (a4 < 0.0) {
    return NAN;
  }
  if (fabs(a2) == INFINITY)
  {
    if (a2 != a3 && fabs(a4) != INFINITY)
    {
      BOOL v4 = a2 <= 0.0;
      goto LABEL_18;
    }
    return NAN;
  }
  if (fabs(a3) == INFINITY)
  {
    if (a2 != a3 && fabs(a4) != INFINITY)
    {
      BOOL v4 = a2 <= a3;
LABEL_18:
      double result = 0.0;
      if (!v4) {
        return 1.0;
      }
      return result;
    }
    return NAN;
  }
  double v6 = fabs(a4);
  if (v6 >= 2.22044605e-16)
  {
    double result = 0.5;
    if (v6 != INFINITY)
    {
      sub_18DFE4028(v8, a3, a4);
      sub_18DFE3D74(v8, &v9);
    }
  }
  else
  {
    BOOL v7 = a2 < a3;
    double result = 1.0;
    if (v7) {
      return 0.0;
    }
  }
  return result;
}

void sub_18DFE3D74(double *a1, double *a2)
{
  double v3 = *a1;
  double v2 = a1[1];
  if (v2 <= 0.0 || (*(void *)&v2 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    uint64_t v5 = "Scale parameter is %1%, but must be > 0 !";
    goto LABEL_6;
  }
  if ((*(void *)&v3 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    uint64_t v5 = "Location parameter is %1%, but must be finite!";
    goto LABEL_6;
  }
  double v6 = *a2;
  if (fabs(*a2) == INFINITY) {
    return;
  }
  if ((*(void *)&v6 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    uint64_t v5 = "Random variate x is %1%, but must be finite!";
LABEL_6:
    sub_18DFE40C4("boost::math::cdf(const normal_distribution<%1%>&, %1%)", v5);
  }
  if (fabs(sub_18DFE4DB4(1, (v6 - v3) / (v2 * -1.41421356))) > 1.79769313e308) {
    sub_18DFE51F4("boost::math::erfc<%1%>(%1%, %1%)", "numeric overflow");
  }
}

double cnstatistics::InverseNormal(cnstatistics *this, double a2, double a3, double a4)
{
  if (a4 <= 0.0) {
    return NAN;
  }
  double v4 = NAN;
  if (a2 < 0.0 || a2 > 1.0) {
    return v4;
  }
  if (fabs(a2) < 2.22044605e-16)
  {
    BOOL v7 = a3 == INFINITY;
    double v8 = -INFINITY;
    goto LABEL_9;
  }
  if (fabs(a2 + -1.0) < 2.22044605e-16)
  {
    BOOL v7 = a3 == -INFINITY;
    double v8 = INFINITY;
LABEL_9:
    double v4 = NAN;
    if (!v7) {
      return v8;
    }
    return v4;
  }
  BOOL v10 = fabs(a4) == INFINITY;
  if (fabs(a3) != INFINITY)
  {
    if (v10)
    {
      if (a2 >= 0.5)
      {
        if (a2 <= 0.5)
        {
LABEL_29:
          unint64_t v11 = 0x7FF8000000000000;
          return *(double *)&v11;
        }
        unint64_t v11 = 0x7FF0000000000000;
        return *(double *)&v11;
      }
LABEL_19:
      unint64_t v11 = 0xFFF0000000000000;
      return *(double *)&v11;
    }
LABEL_20:
    sub_18DFE5ABC(a2 + a2);
    return a3 + a4 * (v12 * -1.41421356);
  }
  if (!v10) {
    goto LABEL_20;
  }
  if (a2 < 0.5)
  {
    if (a3 > 0.0) {
      goto LABEL_29;
    }
    goto LABEL_19;
  }
  BOOL v13 = a3 < 0.0 || a2 <= 0.5;
  double v4 = NAN;
  if (!v13) {
    return INFINITY;
  }
  return v4;
}

double *sub_18DFE4028(double *result, double a2, double a3)
{
  *double result = a2;
  result[1] = a3;
  if (a3 <= 0.0 || (*(void *)&a3 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000) {
    sub_18DFE40C4("boost::math::normal_distribution<%1%>::normal_distribution", "Scale parameter is %1%, but must be > 0 !");
  }
  if ((*(void *)&a2 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000) {
    sub_18DFE40C4("boost::math::normal_distribution<%1%>::normal_distribution", "Location parameter is %1%, but must be finite!");
  }
  return result;
}

void sub_18DFE40C4(char *a1, char *a2)
{
  double v2 = "Unknown function operating on type %1%";
  if (a1) {
    double v2 = a1;
  }
  if (a2) {
    double v3 = a2;
  }
  else {
    double v3 = "Cause unknown: error caused by bad argument with value %1%";
  }
  sub_18DEDE7B0(&v14, v2);
  sub_18DEDE7B0(&v13, v3);
  sub_18DEDE7B0(&v12, "Error in function ");
  sub_18DFE427C(&v14, "%1%", "double");
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    double v4 = &v14;
  }
  else {
    double v4 = (std::string *)v14.__r_.__value_.__r.__words[0];
  }
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v14.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v14.__r_.__value_.__l.__size_;
  }
  std::string::append(&v12, (const std::string::value_type *)v4, size);
  std::string::append(&v12, ": ", 2uLL);
  sub_18DFE43C4(v10);
  if (v11 >= 0) {
    double v6 = (const char *)v10;
  }
  else {
    double v6 = (const char *)v10[0];
  }
  sub_18DFE427C(&v13, "%1%", v6);
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    BOOL v7 = &v13;
  }
  else {
    BOOL v7 = (std::string *)v13.__r_.__value_.__r.__words[0];
  }
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v8 = HIBYTE(v13.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v8 = v13.__r_.__value_.__l.__size_;
  }
  std::string::append(&v12, (const std::string::value_type *)v7, v8);
  std::logic_error::logic_error(&v9, &v12);
  v9.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
  sub_18DFE456C(&v9);
}

void sub_18DFE4200(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::logic_error a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  std::logic_error::~logic_error(&a9);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (*(char *)(v27 - 17) < 0) {
    operator delete(*(void **)(v27 - 40));
  }
  _Unwind_Resume(a1);
}

uint64_t sub_18DFE427C(std::string *a1, char *__s, const char *a3)
{
  std::string::size_type v6 = strlen(__s);
  size_t v7 = strlen(a3);
  int v8 = SHIBYTE(a1->__r_.__value_.__r.__words[2]);
  if (v8 >= 0) {
    std::logic_error v9 = (uint64_t *)a1;
  }
  else {
    std::logic_error v9 = (uint64_t *)a1->__r_.__value_.__r.__words[0];
  }
  if (v8 >= 0) {
    std::string::size_type size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = a1->__r_.__value_.__l.__size_;
  }
  uint64_t result = strlen(__s);
  int64_t v12 = result;
  std::string::size_type v13 = 0;
  while (!v12)
  {
LABEL_18:
    if (v13 != -1)
    {
      std::string::size_type v19 = strlen(a3);
      std::string::replace(a1, v13, v6, a3, v19);
      v13 += v7;
      int v20 = SHIBYTE(a1->__r_.__value_.__r.__words[2]);
      std::logic_error v9 = v20 >= 0 ? (uint64_t *)a1 : (uint64_t *)a1->__r_.__value_.__r.__words[0];
      std::string::size_type size = v20 >= 0 ? HIBYTE(a1->__r_.__value_.__r.__words[2]) : a1->__r_.__value_.__l.__size_;
      uint64_t result = strlen(__s);
      int64_t v12 = result;
      if (size >= v13) {
        continue;
      }
    }
    return result;
  }
  uint64_t result = (uint64_t)v9 + v13;
  std::string::size_type v14 = (std::string::size_type)v9 + size;
  int64_t v15 = size - v13;
  if ((uint64_t)(size - v13) >= v12)
  {
    int v16 = *__s;
    do
    {
      int64_t v17 = v15 - v12;
      if (v17 == -1) {
        break;
      }
      uint64_t result = (uint64_t)memchr((void *)result, v16, v17 + 1);
      if (!result) {
        break;
      }
      uint64_t v18 = result;
      uint64_t result = memcmp((const void *)result, __s, v12);
      if (!result)
      {
        if (v18 == v14) {
          return result;
        }
        std::string::size_type v13 = v18 - (void)v9;
        goto LABEL_18;
      }
      uint64_t result = v18 + 1;
      int64_t v15 = v14 - (v18 + 1);
    }
    while (v15 >= v12);
  }
  return result;
}

uint64_t sub_18DFE43C4@<X0>(void *a1@<X8>)
{
  sub_18DEDC798((uint64_t)v4);
  *(void *)((char *)&v6[1] + *(void *)(v5 - 24)) = 17;
  std::ostream::operator<<();
  sub_18DEDD9B8((uint64_t)v6, a1);
  v4[0] = *MEMORY[0x1E4FBA408];
  uint64_t v2 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v4 + *(void *)(v4[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  uint64_t v5 = v2;
  v6[0] = MEMORY[0x1E4FBA470] + 16;
  if (v7 < 0) {
    operator delete((void *)v6[8]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x192FA6190](&v8);
}

void sub_18DFE4558(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_18DFE456C(const std::logic_error *a1)
{
  exception = __cxa_allocate_exception(0x40uLL);
  sub_18DFE45C8((uint64_t)exception, a1);
  __cxa_throw(exception, (struct type_info *)&unk_1EDD04848, (void (*)(void *))sub_18DFE4674);
}

void sub_18DFE45B4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_18DFE45C8(uint64_t a1, const std::logic_error *a2)
{
  *(void *)a1 = &unk_1EDD12A90;
  std::logic_error::logic_error((std::logic_error *)(a1 + 8), a2);
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = -1;
  *(void *)a1 = &unk_1EDD12928;
  *(void *)(a1 + 8) = &unk_1EDD12958;
  *(void *)(a1 + 24) = &unk_1EDD12980;
  return a1;
}

uint64_t sub_18DFE4674(uint64_t a1)
{
  *(void *)(a1 + 24) = &unk_1EDD136E0;
  sub_18DFE4B84((uint64_t *)(a1 + 32));
  std::logic_error::~logic_error((std::logic_error *)(a1 + 8));
  return a1;
}

void sub_18DFE46C8()
{
}

void sub_18DFE4894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_18DFE4B84(&a9);
  sub_18DFE4B84(&a10);
  (*(void (**)(uint64_t))(*(void *)v10 + 24))(v10);
  _Unwind_Resume(a1);
}

void sub_18DFE490C(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x40uLL);
  sub_18DFE4BE0((uint64_t)exception, a1);
  __cxa_throw(exception, (struct type_info *)&unk_1EDD04848, (void (*)(void *))sub_18DFE4674);
}

void sub_18DFE4954(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_18DFE4968(uint64_t a1)
{
  *(void *)(a1 + 24) = &unk_1EDD136E0;
  sub_18DFE4B84((uint64_t *)(a1 + 32));
  std::logic_error::~logic_error((std::logic_error *)(a1 + 8));

  JUMPOUT(0x192FA6240);
}

void sub_18DFE49DC(uint64_t a1)
{
  *(void *)(a1 + 16) = &unk_1EDD136E0;
  sub_18DFE4B84((uint64_t *)(a1 + 24));

  std::logic_error::~logic_error((std::logic_error *)a1);
}

void sub_18DFE4A38(uint64_t a1)
{
  *(void *)(a1 + 16) = &unk_1EDD136E0;
  sub_18DFE4B84((uint64_t *)(a1 + 24));
  std::logic_error::~logic_error((std::logic_error *)a1);

  JUMPOUT(0x192FA6240);
}

void sub_18DFE4AB0(void *a1)
{
  *a1 = &unk_1EDD136E0;
  sub_18DFE4B84(a1 + 1);

  std::logic_error::~logic_error((std::logic_error *)a1 - 1);
}

void sub_18DFE4B08(void *a1)
{
  *a1 = &unk_1EDD136E0;
  sub_18DFE4B84(a1 + 1);
  std::logic_error::~logic_error((std::logic_error *)a1 - 1);

  JUMPOUT(0x192FA6240);
}

uint64_t *sub_18DFE4B84(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2 && (*(unsigned int (**)(uint64_t))(*(void *)v2 + 32))(v2)) {
    *a1 = 0;
  }
  return a1;
}

uint64_t sub_18DFE4BE0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1EDD12A90;
  std::logic_error::logic_error((std::logic_error *)(a1 + 8), (const std::logic_error *)(a2 + 8));
  *(void *)(a1 + 8) = MEMORY[0x1E4FBA4C8] + 16;
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = &unk_1EDD136E0;
  *(void *)(a1 + 32) = v4;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  long long v5 = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v5;
  *(void *)a1 = &unk_1EDD12928;
  *(void *)(a1 + 8) = &unk_1EDD12958;
  *(void *)(a1 + 24) = &unk_1EDD12980;
  return a1;
}

void sub_18DFE4D08(_Unwind_Exception *a1)
{
  std::logic_error::~logic_error(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_18DFE4D1C(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 32))(result);
  }
  *a1 = a2;
  if (a2)
  {
    long long v5 = *(uint64_t (**)(uint64_t))(*(void *)a2 + 24);
    return v5(a2);
  }
  return result;
}

double sub_18DFE4DB4(int a1, long double a2)
{
  int v3 = a1;
  if (a2 < 0.0)
  {
    if ((a1 & 1) == 0) {
      return -sub_18DFE4DB4(0, -a2);
    }
    double v4 = -a2;
    if (a2 >= -0.5) {
      return sub_18DFE4DB4(0, v4) + 1.0;
    }
    else {
      return 2.0 - sub_18DFE4DB4(1, v4);
    }
  }
  if (a2 < 0.5)
  {
    if (a2 >= 1.0e-10)
    {
      float64x2_t v8 = vaddq_f64(vmulq_n_f64(vmlaq_n_f64((float64x2_t)xmmword_18E1F75B0, (float64x2_t)xmmword_18E1F75A0, a2 * a2 * (a2 * a2)), a2 * a2), vaddq_f64(vmulq_n_f64(vmlaq_n_f64((float64x2_t)xmmword_18E1F7590, (float64x2_t)xmmword_18E1F7580, a2 * a2 * (a2 * a2)), a2 * a2 * (a2 * a2)), (float64x2_t)xmmword_18E1F75C0));
      double v6 = (vdivq_f64(v8, (float64x2_t)vdupq_laneq_s64((int64x2_t)v8, 1)).f64[0] + 1.04494858) * a2;
    }
    else
    {
      double v6 = 0.0;
      if (a2 != 0.0) {
        double v6 = a2 * 0.0033791671 + a2 * 1.125;
      }
    }
    goto LABEL_25;
  }
  if (a1) {
    double v7 = 28.0;
  }
  else {
    double v7 = 5.92999983;
  }
  int v3 = a1 ^ 1;
  if (a2 >= v7)
  {
    double v6 = 0.0;
    goto LABEL_25;
  }
  if (a2 < 1.5)
  {
    long double v9 = a2 + -0.5;
    v10.f64[0] = v9 * v9 * 0.0195049001 + 0.191003696;
    v10.f64[1] = v9 * v9 * (v9 * v9 * 0.00000337511472 + 0.123850975) + 1.42628005;
    float64x2_t v11 = vaddq_f64(vaddq_f64(vmulq_n_f64(v10, v9 * v9), (float64x2_t)xmmword_18E1F7570), vmulq_n_f64(vaddq_f64(vmulq_n_f64(vmlaq_n_f64((float64x2_t)xmmword_18E1F7550, (float64x2_t)xmmword_18E1F7540, v9 * v9), v9 * v9), (float64x2_t)xmmword_18E1F7560), a2 + -0.5));
    double v6 = exp(-(a2 * a2)) / a2 * (vdivq_f64(v11, (float64x2_t)vdupq_laneq_s64((int64x2_t)v11, 1)).f64[0] + 0.405935764);
    goto LABEL_25;
  }
  if (a2 < 2.5)
  {
    long double v12 = a2 + -1.5;
    float64x2_t v13 = vaddq_f64(vaddq_f64(vmulq_n_f64(vmlaq_n_f64((float64x2_t)xmmword_18E1F7510, (float64x2_t)xmmword_18E1F7500, v12 * v12), v12 * v12), (float64x2_t)xmmword_18E1F7530), vmulq_n_f64(vaddq_f64(vmulq_n_f64(vmlaq_n_f64((float64x2_t)xmmword_18E1F74F0, (float64x2_t)xmmword_18E1F74E0, v12 * v12), v12 * v12), (float64x2_t)xmmword_18E1F7520), a2 + -1.5));
    double v14 = vdivq_f64(v13, (float64x2_t)vdupq_laneq_s64((int64x2_t)v13, 1)).f64[0] + 0.506728172;
    long double v15 = frexp(a2, &__e);
    int v16 = __e;
LABEL_23:
    double v19 = ldexp(v15, 26);
    long double v20 = ldexp(floor(v19), v16 - 26);
    long double v21 = a2 - v20;
    long double v22 = v20 * v20 - a2 * a2 + (v20 + v20) * (a2 - v20);
    double v23 = exp(-(a2 * a2));
    double v6 = v14 * (v23 * exp(-(v22 + v21 * v21)) / a2);
    goto LABEL_25;
  }
  if (a2 < 4.5)
  {
    long double v17 = a2 + -3.5;
    float64x2_t v18 = vaddq_f64(vaddq_f64(vmulq_n_f64(vmlaq_n_f64((float64x2_t)xmmword_18E1F74B0, (float64x2_t)xmmword_18E1F74A0, v17 * v17), v17 * v17), (float64x2_t)xmmword_18E1F74D0), vmulq_n_f64(vaddq_f64(vmulq_n_f64(vmlaq_n_f64((float64x2_t)xmmword_18E1F7490, (float64x2_t)xmmword_18E1F7480, v17 * v17), v17 * v17), (float64x2_t)xmmword_18E1F74C0), a2 + -3.5));
    double v14 = vdivq_f64(v18, (float64x2_t)vdupq_laneq_s64((int64x2_t)v18, 1)).f64[0] + 0.540575027;
    long double v15 = frexp(a2, &v35);
    int v16 = v35;
    goto LABEL_23;
  }
  double v38 = 1.0 / a2;
  double v24 = sub_18DFE5A78(dbl_18E1F77D0, &v38);
  double v37 = 1.0 / a2;
  double v25 = v24 / sub_18DFE5A78(dbl_18E1F7808, &v37) + 0.557909012;
  long double v26 = frexp(a2, &v36);
  int v27 = v36;
  double v28 = ldexp(v26, 26);
  long double v29 = ldexp(floor(v28), v27 - 26);
  long double v30 = a2 - v29;
  long double v31 = v29 * v29 - a2 * a2 + (v29 + v29) * (a2 - v29);
  double v32 = exp(-(a2 * a2));
  double v6 = v32 * exp(-(v31 + v30 * v30)) / a2 * v25;
LABEL_25:
  if (v3) {
    return 1.0 - v6;
  }
  else {
    return v6;
  }
}

void sub_18DFE51F4(char *a1, const char *a2)
{
  uint64_t v2 = "Unknown function operating on type %1%";
  if (a1) {
    uint64_t v2 = a1;
  }
  if (a2) {
    int v3 = a2;
  }
  else {
    int v3 = "Cause unknown";
  }
  sub_18DEDE7B0(&v9, v2);
  sub_18DEDE7B0(&v8, "Error in function ");
  sub_18DFE427C(&v9, "%1%", "double");
  if ((v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    double v4 = &v9;
  }
  else {
    double v4 = (std::string *)v9.__r_.__value_.__r.__words[0];
  }
  if ((v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v9.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v9.__r_.__value_.__l.__size_;
  }
  std::string::append(&v8, (const std::string::value_type *)v4, size);
  std::string::append(&v8, ": ", 2uLL);
  std::string::size_type v6 = strlen(v3);
  std::string::append(&v8, v3, v6);
  std::runtime_error::runtime_error(&v7, &v8);
  v7.__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E4FBA4E0] + 16);
  sub_18DFE532C(&v7);
}

void sub_18DFE52E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::runtime_error a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(a1);
}

void sub_18DFE532C(const std::runtime_error *a1)
{
  exception = __cxa_allocate_exception(0x40uLL);
  sub_18DFE5388((uint64_t)exception, a1);
  __cxa_throw(exception, (struct type_info *)&unk_1EDD04890, (void (*)(void *))sub_18DFE5434);
}

void sub_18DFE5374(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_18DFE5388(uint64_t a1, const std::runtime_error *a2)
{
  *(void *)a1 = &unk_1EDD12A90;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), a2);
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = -1;
  *(void *)a1 = &unk_1EDD129A0;
  *(void *)(a1 + 8) = &unk_1EDD129D0;
  *(void *)(a1 + 24) = &unk_1EDD129F8;
  return a1;
}

uint64_t sub_18DFE5434(uint64_t a1)
{
  *(void *)(a1 + 24) = &unk_1EDD136E0;
  sub_18DFE4B84((uint64_t *)(a1 + 32));
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));
  return a1;
}

void sub_18DFE5488()
{
}

void sub_18DFE5654(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_18DFE4B84(&a9);
  sub_18DFE4B84(&a10);
  (*(void (**)(uint64_t))(*(void *)v10 + 24))(v10);
  _Unwind_Resume(a1);
}

void sub_18DFE56CC(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x40uLL);
  sub_18DFE593C((uint64_t)exception, a1);
  __cxa_throw(exception, (struct type_info *)&unk_1EDD04890, (void (*)(void *))sub_18DFE5434);
}

void sub_18DFE5714(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_18DFE5728(uint64_t a1)
{
  *(void *)(a1 + 24) = &unk_1EDD136E0;
  sub_18DFE4B84((uint64_t *)(a1 + 32));
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));

  JUMPOUT(0x192FA6240);
}

void sub_18DFE579C(uint64_t a1)
{
  *(void *)(a1 + 16) = &unk_1EDD136E0;
  sub_18DFE4B84((uint64_t *)(a1 + 24));

  std::runtime_error::~runtime_error((std::runtime_error *)a1);
}

void sub_18DFE57F8(uint64_t a1)
{
  *(void *)(a1 + 16) = &unk_1EDD136E0;
  sub_18DFE4B84((uint64_t *)(a1 + 24));
  std::runtime_error::~runtime_error((std::runtime_error *)a1);

  JUMPOUT(0x192FA6240);
}

void sub_18DFE5870(void *a1)
{
  *a1 = &unk_1EDD136E0;
  sub_18DFE4B84(a1 + 1);

  std::runtime_error::~runtime_error((std::runtime_error *)a1 - 1);
}

void sub_18DFE58C8(void *a1)
{
  *a1 = &unk_1EDD136E0;
  sub_18DFE4B84(a1 + 1);
  std::runtime_error::~runtime_error((std::runtime_error *)a1 - 1);

  JUMPOUT(0x192FA6240);
}

uint64_t sub_18DFE593C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1EDD12A90;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), (const std::runtime_error *)(a2 + 8));
  *(void *)(a1 + 8) = MEMORY[0x1E4FBA4E0] + 16;
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = &unk_1EDD136E0;
  *(void *)(a1 + 32) = v4;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  long long v5 = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v5;
  *(void *)a1 = &unk_1EDD129A0;
  *(void *)(a1 + 8) = &unk_1EDD129D0;
  *(void *)(a1 + 24) = &unk_1EDD129F8;
  return a1;
}

void sub_18DFE5A64(_Unwind_Exception *a1)
{
  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

double sub_18DFE5A78(double *a1, double *a2)
{
  double v2 = *a2;
  return v2 * v2 * (v2 * v2 * (a1[4] + a1[6] * (v2 * v2)) + a1[2])
       + *a1
       + *a2 * (v2 * v2 * (a1[3] + a1[5] * (v2 * v2)) + a1[1]);
}

void sub_18DFE5ABC(double a1)
{
  v6[1] = a1;
  if (a1 < 0.0 || a1 > 2.0) {
    sub_18DFE40C4((char *)qword_1E91C96E8, "Argument outside range [0,2] in inverse erfc function (got p=%1%).");
  }
  if (a1 == 0.0) {
    sub_18DFE51F4((char *)qword_1E91C96E8, "Overflow Error");
  }
  if (a1 == 2.0) {
    sub_18DFE51F4((char *)qword_1E91C96E8, "Overflow Error");
  }
  double v3 = 2.0 - a1;
  if (a1 <= 1.0) {
    double v3 = a1;
  }
  double v5 = v3;
  v6[0] = 1.0 - v3;
  sub_18DFE5BD0(v6, &v5);
  if (fabs(v4) > 1.79769313e308) {
    sub_18DFE51F4((char *)qword_1E91C96E8, "numeric overflow");
  }
}

void sub_18DFE5BD0(double *a1, long double *a2)
{
  if (*a1 > 0.5)
  {
    double v2 = *a2;
    double v3 = log(*a2);
    if (v2 < 0.25)
    {
      double v4 = sqrt(-v3);
      if (v4 >= 3.0 && v4 >= 6.0 && v4 >= 18.0)
      {
        if (v4 >= 44.0)
        {
          double v5 = v4 + -44.0;
          sub_18DFE6120(xmmword_18E1F78B8, &v5);
          sub_18DFE5A78(dbl_18E1F78F8, &v5);
        }
        else
        {
          double v5 = v4 + -18.0;
          sub_18DFE6120(xmmword_18E1F7840, &v5);
          sub_18DFE5A78(dbl_18E1F7880, &v5);
        }
      }
    }
  }
}

double sub_18DFE6120(float64x2_t *a1, double *a2)
{
  float64x2_t v2 = vaddq_f64(vmulq_n_f64(vaddq_f64(vmulq_n_f64(vmlaq_n_f64(a1[2], a1[3], *a2 * *a2), *a2 * *a2), a1[1]), *a2 * *a2), *a1);
  return vmuld_lane_f64(*a2, v2, 1) + v2.f64[0];
}

double cnstatistics::GammaPDF(cnstatistics *this, double a2, double a3, double a4)
{
  double v10 = a2;
  double result = NAN;
  if (a3 >= 0.0 && a4 > 0.0)
  {
    double v6 = fabs(a3);
    double v7 = fabs(a4);
    if (v6 < 2.22044605e-16 && v7 == INFINITY)
    {
      double result = 0.0;
      if (fabs(a2) != INFINITY) {
        return INFINITY;
      }
    }
    else
    {
      double result = 0.0;
      if (a2 >= 0.0 && fabs(a2) != INFINITY)
      {
        if (v6 >= 2.22044605e-16)
        {
          if (v6 != INFINITY && v7 != INFINITY)
          {
            sub_18DFE6980(v9, a3, a4);
            return sub_18DFE6258(&v10, v9[0], v9[1]);
          }
        }
        else if (a2 >= 0.0 && a2 <= 0.0)
        {
          return INFINITY;
        }
      }
    }
  }
  return result;
}

double sub_18DFE6258(double *a1, double a2, double a3)
{
  double v12 = a3;
  if (a3 <= 0.0 || (*(void *)&a3 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    double v5 = "Scale parameter is %1%, but must be > 0 !";
    goto LABEL_11;
  }
  double v12 = a2;
  if (a2 <= 0.0 || (*(void *)&a2 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    double v5 = "Shape parameter is %1%, but must be > 0 !";
    goto LABEL_11;
  }
  double v8 = *a1;
  if (*a1 < 0.0 || (*(void *)a1 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    double v5 = "Random variate is %1% but must be >= 0 !";
LABEL_11:
    sub_18DFE40C4("boost::math::pdf(const gamma_distribution<%1%>&, %1%)", v5);
  }
  double v10 = 0.0;
  if (v8 != 0.0)
  {
    sub_18DFE6A10((uint64_t)&v12, a2, v8 / a3);
    if (fabs(v11) > 1.79769313e308) {
      sub_18DFE51F4("boost::math::gamma_p_derivative<%1%>(%1%, %1%)", "numeric overflow");
    }
    return v11 / a3;
  }
  return v10;
}

double cnstatistics::GammaCDF(cnstatistics *this, double a2, double a3, double a4)
{
  double v15 = a2;
  double result = NAN;
  if (a3 >= 0.0 && a4 > 0.0)
  {
    if (a2 >= 0.0)
    {
      if (fabs(a2) == INFINITY)
      {
        if (fabs(a3) == INFINITY) {
          return NAN;
        }
        double result = 1.0;
        if (fabs(a4) == INFINITY) {
          return NAN;
        }
      }
      else
      {
        double v6 = fabs(a3);
        double result = 1.0;
        if (v6 >= 2.22044605e-16)
        {
          double result = 0.0;
          if (v6 != INFINITY && fabs(a4) != INFINITY)
          {
            sub_18DFE6980(v14, a3, a4);
            v7.n128_f64[0] = v14[1];
            return sub_18DFE647C(&v15, v14[0], v7, v8, v9, v10, v11, v12, v13);
          }
        }
      }
    }
    else
    {
      double result = 0.0;
      if (fabs(a3) < 2.22044605e-16) {
        return 1.0;
      }
    }
  }
  return result;
}

double sub_18DFE647C(double *a1, double a2, __n128 a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  unint64_t v16 = a3.n128_u64[0];
  if (a3.n128_f64[0] <= 0.0 || (a3.n128_u64[0] & 0x7FFFFFFFFFFFFFFFLL) >= 0x7FF0000000000000)
  {
    double v10 = "Scale parameter is %1%, but must be > 0 !";
    goto LABEL_11;
  }
  unint64_t v16 = *(void *)&a2;
  if (a2 <= 0.0 || (*(void *)&a2 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    double v10 = "Shape parameter is %1%, but must be > 0 !";
    goto LABEL_11;
  }
  double v13 = *a1;
  if (*a1 < 0.0 || (*(void *)a1 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    double v10 = "Random variate is %1% but must be >= 0 !";
LABEL_11:
    sub_18DFE40C4("boost::math::cdf(const gamma_distribution<%1%>&, %1%)", v10);
  }
  a3.n128_f64[0] = v13 / a3.n128_f64[0];
  double v15 = sub_18DFE9224(1, 0, (uint64_t)&v16, 0, a2, a3, v13, a5, a6, a7, a8, a9);
  if (fabs(v15) > 1.79769313e308) {
    sub_18DFE51F4("gamma_p<%1%>(%1%, %1%)", "numeric overflow");
  }
  return v15;
}

void cnstatistics::InverseGamma(cnstatistics *this, double a2, double a3, double a4)
{
  if (a3 >= 0.0)
  {
    v45[1] = v13;
    v45[2] = v12;
    v45[3] = v11;
    v45[4] = v10;
    v45[5] = v9;
    v45[6] = v8;
    v45[7] = v7;
    v45[8] = v6;
    v45[19] = v4;
    v45[20] = v5;
    double v16 = fabs(a3);
    if (v16 != INFINITY
      && a4 > 0.0
      && a2 >= 0.0
      && a2 <= 1.0
      && fabs(a2) >= 2.22044605e-16
      && fabs(a2 + -1.0) >= 2.22044605e-16
      && v16 >= 2.22044605e-16
      && fabs(a4) != INFINITY)
    {
      *(double *)double v45 = a3;
      if (a3 <= 0.0 || (*(void *)&a3 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000) {
        sub_18DFE40C4("boost::math::gamma_distribution<%1%>::gamma_distribution", "Shape parameter is %1%, but must be > 0 !");
      }
      double v17 = log(a3);
      long double v18 = log(a3 + 1.0) - v17;
      long double v19 = v17 + v18 * -0.5;
      double v20 = sqrt(v18 + v18);
      sub_18DFE5ABC(a2 + a2);
      v22.n128_u64[0] = exp(v19 - v20 * v21);
      int v29 = 500;
      long double v44 = v22.n128_f64[0];
      while (1)
      {
        *(double *)double v45 = a3;
        if (a3 <= 0.0) {
          sub_18DFE40C4("boost::math::cdf(const gamma_distribution<%1%>&, %1%)", "Shape parameter is %1%, but must be > 0 !");
        }
        if (v22.n128_f64[0] < 0.0 || (v22.n128_u64[0] & 0x7FFFFFFFFFFFFFFFLL) >= 0x7FF0000000000000) {
          sub_18DFE40C4("boost::math::cdf(const gamma_distribution<%1%>&, %1%)", "Random variate is %1% but must be >= 0 !");
        }
        double v40 = sub_18DFE9224(1, 0, (uint64_t)v45, 0, a3, v22, v23, v24, v25, v26, v27, v28);
        if (fabs(v40) > 1.79769313e308) {
          sub_18DFE51F4("gamma_p<%1%>(%1%, %1%)", "numeric overflow");
        }
        double v31 = a2 - v40;
        if (v44 < 0.0 || (*(void *)&v44 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000) {
          sub_18DFE40C4("boost::math::pdf(const gamma_distribution<%1%>&, %1%)", "Random variate is %1% but must be >= 0 !");
        }
        double v41 = 0.0;
        if (v44 != 0.0)
        {
          sub_18DFE6A10((uint64_t)v45, a3, v44);
          double v41 = v42;
          if (fabs(v42) > 1.79769313e308) {
            sub_18DFE51F4("boost::math::gamma_p_derivative<%1%>(%1%, %1%)", "numeric overflow");
          }
        }
        double v33 = v31 / fmax(v41, 2.22507386e-308);
        if (fabs(v33) <= 1.8189894e-12) {
          break;
        }
        double v23 = v44 * 0.1;
        double v24 = v44 * 10.0;
        double v34 = v33 + v44;
        double v25 = v44 * 10.0;
        if (v44 * 10.0 < v34) {
          double v34 = v44 * 10.0;
        }
        if (v23 > v34) {
          double v34 = v44 * 0.1;
        }
        v22.n128_f64[0] = v34;
        long double v44 = v34;
        if (!--v29)
        {
          LOWORD(v45[0]) = 10;
          unsigned __int8 v43 = 4;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)v45, &v43, "Error: InverseGamma failed to converge for p=%lg, a=%lg, b=%lg.", v35, v36, v37, v38, v39, SLOBYTE(a2));
          return;
        }
      }
    }
  }
}

double *sub_18DFE6980(double *result, double a2, double a3)
{
  *double result = a2;
  result[1] = a3;
  if (a3 <= 0.0 || (*(void *)&a3 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    uint64_t v4 = "Scale parameter is %1%, but must be > 0 !";
    goto LABEL_11;
  }
  if (a2 <= 0.0 || (*(void *)&a2 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    uint64_t v4 = "Shape parameter is %1%, but must be > 0 !";
LABEL_11:
    sub_18DFE40C4("boost::math::gamma_distribution<%1%>::gamma_distribution", v4);
  }
  return result;
}

void sub_18DFE6A10(uint64_t a1, double a2, long double a3)
{
  if (a2 <= 0.0)
  {
    uint64_t v4 = "Argument a to the incomplete gamma function must be greater than zero (got a=%1%).";
LABEL_5:
    sub_18DFE6FEC("boost::math::gamma_p_derivative<%1%>(%1%, %1%)", v4);
  }
  if (a3 < 0.0)
  {
    uint64_t v4 = "Argument x to the incomplete gamma function must be >= 0 (got x=%1%).";
    goto LABEL_5;
  }
  if (a3 == 0.0)
  {
    if (a2 >= 1.0) {
      return;
    }
LABEL_19:
    sub_18DFE734C("boost::math::gamma_p_derivative<%1%>(%1%, %1%)", "Overflow Error");
  }
  double v6 = sub_18DFE6B68(a1, (uint64_t)&v19, a2, a3);
  if (a3 < 1.0 && a3 * 1.79769313e308 < v6) {
    goto LABEL_19;
  }
  if (v6 == 0.0)
  {
    double v8 = log(a3);
    double v9 = -(a3 - a2 * v8);
    double v17 = sub_18DFE7484((uint64_t)&v19, (uint64_t)&v18, 0, a2, v10, v11, v12, v13, v14, v15, v16);
    if (fabs(v17) > 1.79769313e308) {
      sub_18DFE734C("boost::math::lgamma<%1%>(%1%)", "numeric overflow");
    }
    exp(v9 - v17 - v8);
  }
}

double sub_18DFE6B68(uint64_t a1, uint64_t a2, double a3, long double a4)
{
  v62[0] = a3;
  double result = 0.0;
  if (a4 >= 1.79769313e308) {
    return result;
  }
  if (a3 >= 1.0)
  {
    double v20 = a3 + 6.02468004 + -0.5;
    if (a3 > 150.0)
    {
      double v21 = (a4 - a3 + -6.02468004 + 0.5) / v20;
      if (fabs(v21 * v21 * a3) <= 100.0)
      {
        v62[1] = (a4 - a3 + -6.02468004 + 0.5) / v20;
        if (v21 < -1.0) {
          sub_18DFE6FEC((char *)qword_1E91C9700, "log1pmx(x) requires x > -1, but got x = %1%.");
        }
        if (v21 == -1.0) {
          sub_18DFE734C((char *)qword_1E91C9700, "Overflow Error");
        }
        double v56 = fabs(v21);
        if (v56 <= 0.949999988)
        {
          double v58 = -v21;
          if (v56 >= 2.22044605e-16)
          {
            double v57 = 0.0;
            int v59 = 2;
            uint64_t v60 = 1000000;
            do
            {
              double v21 = v21 * v58;
              double v61 = v21 / (double)v59;
              double v57 = v57 + v61;
              if (fabs(v57 * 2.22044605e-16) >= fabs(v61)) {
                break;
              }
              ++v59;
              --v60;
            }
            while (v60);
            if ((unint64_t)(1000000 - v60) >= 0xF4240)
            {
              v62[2] = (double)(unint64_t)(1000000 - v60);
              sub_18DFE88E4((char *)qword_1E91C9700, "Series evaluation exceeded %1% iterations, giving up now.");
            }
          }
          else
          {
            double v57 = v21 * v58 * 0.5;
          }
        }
        else
        {
          double v57 = log(v21 + 1.0) - v21;
        }
        double v52 = a4 * -5.52468004 / v20 + a3 * v57;
        goto LABEL_38;
      }
    }
    double v31 = a4 / v20;
    double v32 = log(a4 / v20);
    double v33 = v32 * a3;
    double v34 = a3 - a4;
    if (a3 - a4 >= v32 * a3) {
      double v35 = v32 * a3;
    }
    else {
      double v35 = a3 - a4;
    }
    if (v35 <= -708.0 || (v33 >= v34 ? (double v36 = v33) : (double v36 = a3 - a4), v36 >= 709.0))
    {
      if (v35 * 0.5 <= -708.0 || (v33 >= v34 ? (double v46 = v33) : (double v46 = a3 - a4), v46 * 0.5 >= 709.0))
      {
        if (v35 * 0.25 <= -708.0 || (v33 >= v34 ? (double v49 = v33) : (double v49 = a3 - a4), a3 >= a4 || v49 * 0.25 >= 709.0))
        {
          double v54 = v34 / a3;
          if (v34 / a3 > -708.0 && v54 < 709.0)
          {
            long double v55 = exp(v54);
            double v53 = pow(v55 * a4 / v20, a3);
            goto LABEL_39;
          }
          double v52 = v34 + v33;
LABEL_38:
          double v53 = exp(v52);
LABEL_39:
          double v45 = v53;
          return v45
               * (sqrt(v20 / 2.71828183)
                / sub_18DFE870C((uint64_t)&unk_18E1F84B8, (uint64_t)&unk_18E1F8520, v62, v20 / 2.71828183, v38, v39, v40, v41, v42, v43, v44));
        }
        double v50 = pow(v31, a3 * 0.25);
        long double v51 = exp(v34 * 0.25);
        double v48 = v50 * v51 * (v50 * v51);
      }
      else
      {
        double v47 = pow(v31, a3 * 0.5);
        double v48 = v47 * exp(v34 * 0.5);
      }
      double v45 = v48 * v48;
    }
    else
    {
      double v37 = pow(a4 / v20, a3);
      double v45 = exp(v34) * v37;
    }
    return v45
         * (sqrt(v20 / 2.71828183)
          / sub_18DFE870C((uint64_t)&unk_18E1F84B8, (uint64_t)&unk_18E1F8520, v62, v20 / 2.71828183, v38, v39, v40, v41, v42, v43, v44));
  }
  double v9 = -a4;
  if (a4 <= -708.0)
  {
    long double v22 = a3 * log(a4) - a4;
    double v30 = v22 - sub_18DFE7484(a1, a2, 0, a3, v23, v24, v25, v26, v27, v28, v29);
    return exp(v30);
  }
  else
  {
    double v10 = pow(a4, a3);
    long double v11 = v10 * exp(v9);
    sub_18DFE76C4(a3, v12, v13, v14, v15, v16, v17, v18);
    return v11 / v19;
  }
}

double sub_18DFE6F88(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  double v8 = sub_18DFE7484((uint64_t)&v11, (uint64_t)&v10, 0, a1, a2, a3, a4, a5, a6, a7, a8);
  if (fabs(v8) > 1.79769313e308) {
    sub_18DFE734C("boost::math::lgamma<%1%>(%1%)", "numeric overflow");
  }
  return v8;
}

void sub_18DFE6FEC(char *a1, char *a2)
{
  float64x2_t v2 = "Unknown function operating on type %1%";
  if (a1) {
    float64x2_t v2 = a1;
  }
  if (a2) {
    double v3 = a2;
  }
  else {
    double v3 = "Cause unknown: error caused by bad argument with value %1%";
  }
  sub_18DEDE7B0(&v14, v2);
  sub_18DEDE7B0(&v13, v3);
  sub_18DEDE7B0(&v12, "Error in function ");
  sub_18DFE427C(&v14, "%1%", "long double");
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v4 = &v14;
  }
  else {
    uint64_t v4 = (std::string *)v14.__r_.__value_.__r.__words[0];
  }
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v14.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v14.__r_.__value_.__l.__size_;
  }
  std::string::append(&v12, (const std::string::value_type *)v4, size);
  std::string::append(&v12, ": ", 2uLL);
  sub_18DFE71A4(v10);
  if (v11 >= 0) {
    double v6 = (const char *)v10;
  }
  else {
    double v6 = (const char *)v10[0];
  }
  sub_18DFE427C(&v13, "%1%", v6);
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v7 = &v13;
  }
  else {
    uint64_t v7 = (std::string *)v13.__r_.__value_.__r.__words[0];
  }
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v8 = HIBYTE(v13.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v8 = v13.__r_.__value_.__l.__size_;
  }
  std::string::append(&v12, (const std::string::value_type *)v7, v8);
  std::logic_error::logic_error(&v9, &v12);
  v9.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
  sub_18DFE456C(&v9);
}

void sub_18DFE7128(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::logic_error a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  std::logic_error::~logic_error(&a9);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (*(char *)(v27 - 17) < 0) {
    operator delete(*(void **)(v27 - 40));
  }
  _Unwind_Resume(a1);
}

uint64_t sub_18DFE71A4@<X0>(void *a1@<X8>)
{
  sub_18DEDC798((uint64_t)v4);
  *(void *)((char *)&v6[1] + *(void *)(v5 - 24)) = 17;
  std::ostream::operator<<();
  sub_18DEDD9B8((uint64_t)v6, a1);
  v4[0] = *MEMORY[0x1E4FBA408];
  uint64_t v2 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v4 + *(void *)(v4[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  uint64_t v5 = v2;
  v6[0] = MEMORY[0x1E4FBA470] + 16;
  if (v7 < 0) {
    operator delete((void *)v6[8]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x192FA6190](&v8);
}

void sub_18DFE7338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_18DFE734C(char *a1, const char *a2)
{
  uint64_t v2 = "Unknown function operating on type %1%";
  if (a1) {
    uint64_t v2 = a1;
  }
  if (a2) {
    double v3 = a2;
  }
  else {
    double v3 = "Cause unknown";
  }
  sub_18DEDE7B0(&v9, v2);
  sub_18DEDE7B0(&v8, "Error in function ");
  sub_18DFE427C(&v9, "%1%", "long double");
  if ((v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v4 = &v9;
  }
  else {
    uint64_t v4 = (std::string *)v9.__r_.__value_.__r.__words[0];
  }
  if ((v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v9.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v9.__r_.__value_.__l.__size_;
  }
  std::string::append(&v8, (const std::string::value_type *)v4, size);
  std::string::append(&v8, ": ", 2uLL);
  std::string::size_type v6 = strlen(v3);
  std::string::append(&v8, v3, v6);
  std::runtime_error::runtime_error(&v7, &v8);
  v7.__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E4FBA4E0] + 16);
  sub_18DFE532C(&v7);
}

void sub_18DFE743C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::runtime_error a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(a1);
}

double sub_18DFE7484(uint64_t a1, uint64_t a2, int *a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10, double a11)
{
  double v35 = a4;
  if (a4 <= -0.0000000149011612)
  {
    if (floor(a4) == a4)
    {
      double v15 = (char *)qword_1E91C96F0;
      double v16 = "Evaluation of lgamma at a negative integer %1%.";
LABEL_7:
      sub_18DFE6FEC(v15, v16);
    }
    double v18 = sub_18DFE7A70(a4);
    double v19 = -a4;
    if (v18 < 0.0) {
      int v20 = 1;
    }
    else {
      int v20 = -1;
    }
    if (v18 >= 0.0) {
      double v21 = v18;
    }
    else {
      double v21 = -v18;
    }
    double v22 = 1.14472989 - sub_18DFE7484(a1, a2, 0, v19);
    double v23 = v22 - log(v21);
    if (a3) {
      goto LABEL_29;
    }
    return v23;
  }
  if (a4 >= 0.0000000149011612)
  {
    if (a4 >= 15.0)
    {
      if (a4 < 3.0 || a4 >= 100.0)
      {
        double v23 = (a4 + -0.5) * (log(a4 + 6.02468004 + -0.5) + -1.0);
        if (v23 * 2.22044605e-16 < 20.0)
        {
          double v31 = sub_18DFE870C((uint64_t)&unk_18E1F84B8, (uint64_t)&unk_18E1F8520, &v35, v23 * 2.22044605e-16, 20.0, v25, v26, v27, v28, v29, v30);
          double v23 = v23 + log(v31);
        }
        goto LABEL_28;
      }
      sub_18DFE76C4(a4, a5, a6, a7, a8, a9, a10, a11);
      double v17 = log(v33);
    }
    else
    {
      sub_18DFE7B14(a4, a4 + -1.0, a4 + -2.0);
    }
    double v23 = v17;
    goto LABEL_28;
  }
  if (a4 == 0.0)
  {
    double v15 = (char *)qword_1E91C96F0;
    double v16 = "Evaluation of lgamma at %1%.";
    goto LABEL_7;
  }
  double v32 = fabs(a4);
  if (v32 * 4.0 >= 2.22044605e-16) {
    double v23 = log(fabs(1.0 / a4 + -0.577215665));
  }
  else {
    double v23 = -log(v32);
  }
  if (a4 < 0.0)
  {
    int v20 = -1;
    if (!a3) {
      return v23;
    }
    goto LABEL_29;
  }
LABEL_28:
  int v20 = 1;
  if (a3) {
LABEL_29:
  }
    *a3 = v20;
  return v23;
}

void sub_18DFE76C4(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  double v8 = a1;
  double v22 = a1;
  double v9 = 1.0;
  if (a1 <= 0.0)
  {
    if (floor(a1) == a1) {
      sub_18DFE6FEC((char *)qword_1E91C96F8, "Evaluation of tgamma at a negative integer %1%.");
    }
    if (a1 <= -20.0)
    {
      double v18 = sub_18DFE76C4(-a1);
      double v19 = fabs(v18 * sub_18DFE7A70(v8));
      if (v19 < 1.0 && v19 * 1.79769313e308 < 3.14159265) {
        sub_18DFE734C((char *)qword_1E91C96F8, "Result of tgamma is too large to represent.");
      }
      return;
    }
    if (a1 < 0.0)
    {
      do
      {
        double v9 = v9 / v8;
        double v8 = v8 + 1.0;
      }
      while (v8 < 0.0);
    }
    double v22 = v8;
  }
  double v10 = floor(v8);
  if (v8 < 170.0 && v10 == v8)
  {
    if ((*(void *)&v8 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
      double v23 = v8;
      sub_18DFE7DCC("boost::math::trunc<%1%>(%1%)", "Value %1% can not be represented in the target integer type.");
    }
    double v12 = ceil(v8);
    if (v8 < 0.0) {
      double v10 = v12;
    }
    if (v10 > 2147483650.0 || v10 < -2147483650.0)
    {
      double v23 = v8;
      sub_18DFE7DCC("boost::math::itrunc<%1%>(%1%)", "Value %1% can not be represented in the target integer type.");
    }
  }
  else
  {
    if (v8 >= 0.0000000149011612)
    {
      double v21 = v9
          * sub_18DFE870C((uint64_t)&unk_18E1F83C8, (uint64_t)&unk_18E1F8430, &v22, 0.0000000149011612, 170.0, a3, a4, a5, a6, a7, a8);
      double v14 = v22;
      double v15 = v22 + 6.02468004 + -0.5;
      double v16 = v14 * log(v15);
      if (v16 <= 709.0)
      {
        pow(v15, v14 + -0.5);
        exp(v15);
        return;
      }
      if (v16 * 0.5 <= 709.0)
      {
        double v20 = pow(v15, v14 * 0.5 + -0.25);
        if (1.79769313e308 / v20 >= v21 * (v20 / exp(v15))) {
          return;
        }
        double v17 = (char *)qword_1E91C96F8;
      }
      else
      {
        double v17 = (char *)qword_1E91C96F8;
      }
      sub_18DFE734C(v17, "Result of tgamma is too large to represent.");
    }
    if (v8 < COERCE_DOUBLE(0x4000000000000)) {
      sub_18DFE734C((char *)qword_1E91C96F8, "Overflow Error");
    }
  }
}

void sub_18DFE7A58()
{
}

long double sub_18DFE7A70(double a1)
{
  if (a1 < 0.0) {
    a1 = -a1;
  }
  char v1 = vcvtmd_s64_f64(a1);
  double v2 = floor(a1);
  double v3 = v2 + 1.0;
  if (v1) {
    double v4 = v2 + 1.0;
  }
  else {
    double v4 = v2;
  }
  if (v4 < 0.0) {
    __assert_rtn("sinpx", "gamma.hpp", 100, "fl >= 0");
  }
  double v5 = a1 - v2;
  double v6 = v3 - a1;
  if (v1)
  {
    double v5 = v6;
    double v7 = -a1;
  }
  else
  {
    double v7 = a1;
  }
  if (v5 <= 0.5) {
    double v8 = v5;
  }
  else {
    double v8 = 1.0 - v5;
  }
  return v7 * sin(v8 * 3.14159265);
}

void sub_18DFE7B14(long double a1, double a2, double a3)
{
  double v3 = a1;
  if (a1 < 2.22044605e-16)
  {
LABEL_9:
    log(a1);
    return;
  }
  if (a2 == 0.0 || a3 == 0.0) {
    return;
  }
  if (a1 <= 2.0)
  {
    if (a1 >= 1.0) {
      return;
    }
    goto LABEL_9;
  }
  double v4 = 0.0;
  if (a1 >= 3.0)
  {
    do
    {
      double v3 = v3 + -1.0;
      double v4 = v4 + log(v3);
    }
    while (v3 >= 3.0);
  }
}

void sub_18DFE7DCC(char *a1, char *a2)
{
  double v2 = "Unknown function operating on type %1%";
  if (a1) {
    double v2 = a1;
  }
  if (a2) {
    double v3 = a2;
  }
  else {
    double v3 = "Cause unknown: error caused by bad argument with value %1%";
  }
  sub_18DEDE7B0(&v14, v2);
  sub_18DEDE7B0(&v13, v3);
  sub_18DEDE7B0(&v12, "Error in function ");
  sub_18DFE427C(&v14, "%1%", "long double");
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    double v4 = &v14;
  }
  else {
    double v4 = (std::string *)v14.__r_.__value_.__r.__words[0];
  }
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v14.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v14.__r_.__value_.__l.__size_;
  }
  std::string::append(&v12, (const std::string::value_type *)v4, size);
  std::string::append(&v12, ": ", 2uLL);
  sub_18DFE71A4(v10);
  if (v11 >= 0) {
    double v6 = (const char *)v10;
  }
  else {
    double v6 = (const char *)v10[0];
  }
  sub_18DFE427C(&v13, "%1%", v6);
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    double v7 = &v13;
  }
  else {
    double v7 = (std::string *)v13.__r_.__value_.__r.__words[0];
  }
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v8 = HIBYTE(v13.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v8 = v13.__r_.__value_.__l.__size_;
  }
  std::string::append(&v12, (const std::string::value_type *)v7, v8);
  std::runtime_error::runtime_error(&v9, &v12);
  v9.__vftable = (std::runtime_error_vtbl *)&unk_1EDD13598;
  sub_18DFE7F84(&v9);
}

void sub_18DFE7F08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::runtime_error a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  std::runtime_error::~runtime_error(&a9);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (*(char *)(v27 - 17) < 0) {
    operator delete(*(void **)(v27 - 40));
  }
  _Unwind_Resume(a1);
}

void sub_18DFE7F84(const std::runtime_error *a1)
{
  exception = __cxa_allocate_exception(0x40uLL);
  sub_18DFE801C((uint64_t)exception, a1);
  __cxa_throw(exception, (struct type_info *)&unk_1EDD04770, (void (*)(void *))sub_18DFE80C8);
}

void sub_18DFE7FCC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_18DFE7FE4(std::runtime_error *a1)
{
  std::runtime_error::~runtime_error(a1);

  JUMPOUT(0x192FA6240);
}

uint64_t sub_18DFE801C(uint64_t a1, const std::runtime_error *a2)
{
  *(void *)a1 = &unk_1EDD12A90;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), a2);
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = -1;
  *(void *)a1 = &unk_1EDD127C0;
  *(void *)(a1 + 8) = &unk_1EDD127F0;
  *(void *)(a1 + 24) = &unk_1EDD12818;
  return a1;
}

uint64_t sub_18DFE80C8(uint64_t a1)
{
  *(void *)(a1 + 24) = &unk_1EDD136E0;
  sub_18DFE4B84((uint64_t *)(a1 + 32));
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));
  return a1;
}

void sub_18DFE811C()
{
}

void sub_18DFE82E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_18DFE4B84(&a9);
  sub_18DFE4B84(&a10);
  (*(void (**)(uint64_t))(*(void *)v10 + 24))(v10);
  _Unwind_Resume(a1);
}

void sub_18DFE8360(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x40uLL);
  sub_18DFE85D0((uint64_t)exception, a1);
  __cxa_throw(exception, (struct type_info *)&unk_1EDD04770, (void (*)(void *))sub_18DFE80C8);
}

void sub_18DFE83A8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_18DFE83BC(uint64_t a1)
{
  *(void *)(a1 + 24) = &unk_1EDD136E0;
  sub_18DFE4B84((uint64_t *)(a1 + 32));
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));

  JUMPOUT(0x192FA6240);
}

void sub_18DFE8430(uint64_t a1)
{
  *(void *)(a1 + 16) = &unk_1EDD136E0;
  sub_18DFE4B84((uint64_t *)(a1 + 24));

  std::runtime_error::~runtime_error((std::runtime_error *)a1);
}

void sub_18DFE848C(uint64_t a1)
{
  *(void *)(a1 + 16) = &unk_1EDD136E0;
  sub_18DFE4B84((uint64_t *)(a1 + 24));
  std::runtime_error::~runtime_error((std::runtime_error *)a1);

  JUMPOUT(0x192FA6240);
}

void sub_18DFE8504(void *a1)
{
  *a1 = &unk_1EDD136E0;
  sub_18DFE4B84(a1 + 1);

  std::runtime_error::~runtime_error((std::runtime_error *)a1 - 1);
}

void sub_18DFE855C(void *a1)
{
  *a1 = &unk_1EDD136E0;
  sub_18DFE4B84(a1 + 1);
  std::runtime_error::~runtime_error((std::runtime_error *)a1 - 1);

  JUMPOUT(0x192FA6240);
}

uint64_t sub_18DFE85D0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1EDD12A90;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), (const std::runtime_error *)(a2 + 8));
  *(void *)(a1 + 8) = &unk_1EDD13598;
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = &unk_1EDD136E0;
  *(void *)(a1 + 32) = v4;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  long long v5 = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v5;
  *(void *)a1 = &unk_1EDD127C0;
  *(void *)(a1 + 8) = &unk_1EDD127F0;
  *(void *)(a1 + 24) = &unk_1EDD12818;
  return a1;
}

void sub_18DFE86F8(_Unwind_Exception *a1)
{
  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

double sub_18DFE870C(uint64_t a1, uint64_t a2, double *a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10, double a11)
{
  double v13 = *a3;
  v14.f64[0] = v13 * v13;
  if (*a3 <= 1.0)
  {
    double v37 = *(double *)(a1 + 88);
    double v38 = *(double *)(a1 + 72) + v37 * v14.f64[0];
    LODWORD(a11) = *(_DWORD *)(a2 + 44);
    LODWORD(v37) = *(_DWORD *)(a2 + 48);
    LODWORD(a10) = *(_DWORD *)(a2 + 40);
    double v39 = (double)*(unint64_t *)&a10 + (double)*(unint64_t *)&v37 * v14.f64[0];
    double v40 = (double)*(unint64_t *)&a11;
    LODWORD(v11) = *(_DWORD *)(a2 + 32);
    LODWORD(a11) = *(_DWORD *)(a2 + 36);
    v41.f64[0] = v14.f64[0] * (*(double *)(a1 + 80) + *(double *)(a1 + 96) * v14.f64[0]) + *(double *)(a1 + 64);
    v42.f64[0] = v14.f64[0] * v39 + (double)v11;
    v41.f64[1] = v38;
    float64x2_t v43 = vaddq_f64(vmulq_n_f64(vaddq_f64(vmulq_n_f64(vaddq_f64(vmulq_n_f64(vaddq_f64(vmulq_n_f64(v41, v14.f64[0]), *(float64x2_t *)(a1 + 48)), v14.f64[0]), *(float64x2_t *)(a1 + 32)), v14.f64[0]), *(float64x2_t *)(a1 + 16)), v14.f64[0]), *(float64x2_t *)a1);
    v42.f64[1] = (double)*(unint64_t *)&a11 + v40 * v14.f64[0];
    float64x2_t v44 = vmulq_n_f64(v42, v14.f64[0]);
    uint64_t v45 = *(void *)(a2 + 16);
    v42.f64[0] = *(float64_t *)(a2 + 24);
    v46.i64[0] = LODWORD(v42.f64[0]);
    v46.i64[1] = HIDWORD(v42.f64[0]);
    float64x2_t v47 = vmulq_n_f64(vaddq_f64(v44, vcvtq_f64_u64(v46)), v14.f64[0]);
    v46.i64[0] = v45;
    v46.i64[1] = HIDWORD(v45);
    float64x2_t v48 = vmulq_n_f64(vaddq_f64(v47, vcvtq_f64_u64(v46)), v14.f64[0]);
    v42.f64[0] = *(float64_t *)(a2 + 8);
    v46.i64[0] = LODWORD(v42.f64[0]);
    v46.i64[1] = HIDWORD(v42.f64[0]);
    float64x2_t v49 = vmulq_n_f64(vaddq_f64(v48, vcvtq_f64_u64(v46)), v14.f64[0]);
    v46.i64[0] = *(void *)a2;
    v46.i64[1] = HIDWORD(*(void *)a2);
    float64x2_t v50 = vaddq_f64(v49, vcvtq_f64_u64(v46));
    return (vmuld_lane_f64(v13, v43, 1) + v43.f64[0]) / (vmuld_lane_f64(v13, v50, 1) + v50.f64[0]);
  }
  else
  {
    LODWORD(v12) = *(_DWORD *)(a2 + 48);
    v14.f64[1] = *a3;
    __asm { FMOV            V0.2D, #1.0 }
    float64x2_t v20 = vdivq_f64(_Q0, v14);
    v21.f64[0] = vmlad_n_f64(*(double *)(a1 + 24), *(double *)(a1 + 8), v20.f64[0]);
    uint64_t v22 = *(void *)(a2 + 8);
    v23.i64[0] = *(void *)a2;
    v23.i64[1] = HIDWORD(*(void *)a2);
    float64x2_t v24 = vcvtq_f64_u64(v23);
    v23.i64[0] = v22;
    v23.i64[1] = HIDWORD(v22);
    float64x2_t v25 = vmulq_n_f64(vmlaq_n_f64(vcvtq_f64_u64(v23), v24, v20.f64[0]), v20.f64[0]);
    uint64_t v26 = *(void *)(a2 + 16);
    uint64_t v27 = *(void *)(a2 + 24);
    v23.i64[0] = v26;
    v23.i64[1] = HIDWORD(v26);
    float64x2_t v28 = vmulq_n_f64(vaddq_f64(v25, vcvtq_f64_u64(v23)), v20.f64[0]);
    v23.i64[0] = v27;
    v23.i64[1] = HIDWORD(v27);
    float64x2_t v29 = vmulq_n_f64(vaddq_f64(v28, vcvtq_f64_u64(v23)), v20.f64[0]);
    uint64_t v30 = *(void *)(a2 + 32);
    uint64_t v31 = *(void *)(a2 + 40);
    v23.i64[0] = v30;
    v23.i64[1] = HIDWORD(v30);
    float64x2_t v32 = vmulq_n_f64(vaddq_f64(v29, vcvtq_f64_u64(v23)), v20.f64[0]);
    v23.i64[0] = v31;
    v23.i64[1] = HIDWORD(v31);
    v21.f64[1] = vmlad_n_f64(*(double *)(a1 + 16), *(double *)a1, v20.f64[0]) * v20.f64[0] + *(double *)(a1 + 32);
    float64x2_t v33 = vaddq_f64(v32, vcvtq_f64_u64(v23));
    float64x2_t v34 = vaddq_f64(vmulq_n_f64(vaddq_f64(vmulq_n_f64(vaddq_f64(vmulq_n_f64(vaddq_f64(vmulq_n_f64(v21, v20.f64[0]), *(float64x2_t *)(a1 + 40)), v20.f64[0]), *(float64x2_t *)(a1 + 56)), v20.f64[0]), *(float64x2_t *)(a1 + 72)), v20.f64[0]), *(float64x2_t *)(a1 + 88));
    float64x2_t v35 = vmulq_f64(v20, v33);
    return vaddq_f64(vmulq_laneq_f64(v34, v20, 1), (float64x2_t)vdupq_laneq_s64((int64x2_t)v34, 1)).f64[0]
         / (v35.f64[1] + v35.f64[0] + (double)v12);
  }
}

void sub_18DFE88E4(char *a1, char *a2)
{
  double v2 = "Unknown function operating on type %1%";
  if (a1) {
    double v2 = a1;
  }
  if (a2) {
    double v3 = a2;
  }
  else {
    double v3 = "Cause unknown: error caused by bad argument with value %1%";
  }
  sub_18DEDE7B0(&v14, v2);
  sub_18DEDE7B0(&v13, v3);
  sub_18DEDE7B0(&v12, "Error in function ");
  sub_18DFE427C(&v14, "%1%", "long double");
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v4 = &v14;
  }
  else {
    uint64_t v4 = (std::string *)v14.__r_.__value_.__r.__words[0];
  }
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v14.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v14.__r_.__value_.__l.__size_;
  }
  std::string::append(&v12, (const std::string::value_type *)v4, size);
  std::string::append(&v12, ": ", 2uLL);
  sub_18DFE71A4(v10);
  if (v11 >= 0) {
    double v6 = (const char *)v10;
  }
  else {
    double v6 = (const char *)v10[0];
  }
  sub_18DFE427C(&v13, "%1%", v6);
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    double v7 = &v13;
  }
  else {
    double v7 = (std::string *)v13.__r_.__value_.__r.__words[0];
  }
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v8 = HIBYTE(v13.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v8 = v13.__r_.__value_.__l.__size_;
  }
  std::string::append(&v12, (const std::string::value_type *)v7, v8);
  std::runtime_error::runtime_error(&v9, &v12);
  v9.__vftable = (std::runtime_error_vtbl *)&unk_1EDD135C0;
  sub_18DFE8A9C(&v9);
}

void sub_18DFE8A20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::runtime_error a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  std::runtime_error::~runtime_error(&a9);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (*(char *)(v27 - 17) < 0) {
    operator delete(*(void **)(v27 - 40));
  }
  _Unwind_Resume(a1);
}

void sub_18DFE8A9C(const std::runtime_error *a1)
{
  exception = __cxa_allocate_exception(0x40uLL);
  sub_18DFE8B34((uint64_t)exception, a1);
  __cxa_throw(exception, (struct type_info *)&unk_1EDD047B8, (void (*)(void *))sub_18DFE8BE0);
}

void sub_18DFE8AE4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_18DFE8AFC(std::runtime_error *a1)
{
  std::runtime_error::~runtime_error(a1);

  JUMPOUT(0x192FA6240);
}

uint64_t sub_18DFE8B34(uint64_t a1, const std::runtime_error *a2)
{
  *(void *)a1 = &unk_1EDD12A90;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), a2);
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = -1;
  *(void *)a1 = &unk_1EDD12838;
  *(void *)(a1 + 8) = &unk_1EDD12868;
  *(void *)(a1 + 24) = &unk_1EDD12890;
  return a1;
}

uint64_t sub_18DFE8BE0(uint64_t a1)
{
  *(void *)(a1 + 24) = &unk_1EDD136E0;
  sub_18DFE4B84((uint64_t *)(a1 + 32));
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));
  return a1;
}

void sub_18DFE8C34()
{
}

void sub_18DFE8E00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_18DFE4B84(&a9);
  sub_18DFE4B84(&a10);
  (*(void (**)(uint64_t))(*(void *)v10 + 24))(v10);
  _Unwind_Resume(a1);
}

void sub_18DFE8E78(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x40uLL);
  sub_18DFE90E8((uint64_t)exception, a1);
  __cxa_throw(exception, (struct type_info *)&unk_1EDD047B8, (void (*)(void *))sub_18DFE8BE0);
}

void sub_18DFE8EC0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_18DFE8ED4(uint64_t a1)
{
  *(void *)(a1 + 24) = &unk_1EDD136E0;
  sub_18DFE4B84((uint64_t *)(a1 + 32));
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));

  JUMPOUT(0x192FA6240);
}

void sub_18DFE8F48(uint64_t a1)
{
  *(void *)(a1 + 16) = &unk_1EDD136E0;
  sub_18DFE4B84((uint64_t *)(a1 + 24));

  std::runtime_error::~runtime_error((std::runtime_error *)a1);
}

void sub_18DFE8FA4(uint64_t a1)
{
  *(void *)(a1 + 16) = &unk_1EDD136E0;
  sub_18DFE4B84((uint64_t *)(a1 + 24));
  std::runtime_error::~runtime_error((std::runtime_error *)a1);

  JUMPOUT(0x192FA6240);
}

void sub_18DFE901C(void *a1)
{
  *a1 = &unk_1EDD136E0;
  sub_18DFE4B84(a1 + 1);

  std::runtime_error::~runtime_error((std::runtime_error *)a1 - 1);
}

void sub_18DFE9074(void *a1)
{
  *a1 = &unk_1EDD136E0;
  sub_18DFE4B84(a1 + 1);
  std::runtime_error::~runtime_error((std::runtime_error *)a1 - 1);

  JUMPOUT(0x192FA6240);
}

uint64_t sub_18DFE90E8(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1EDD12A90;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), (const std::runtime_error *)(a2 + 8));
  *(void *)(a1 + 8) = &unk_1EDD135C0;
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = &unk_1EDD136E0;
  *(void *)(a1 + 32) = v4;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  long long v5 = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v5;
  *(void *)a1 = &unk_1EDD12838;
  *(void *)(a1 + 8) = &unk_1EDD12868;
  *(void *)(a1 + 24) = &unk_1EDD12890;
  return a1;
}

void sub_18DFE9210(_Unwind_Exception *a1)
{
  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

double sub_18DFE9224(int a1, int a2, uint64_t a3, double *a4, double a5, __n128 a6, double a7, double a8, double a9, double a10, double a11, double a12)
{
  double v84 = a6.n128_f64[0];
  double v85 = a5;
  if (a5 <= 0.0)
  {
    std::string v13 = (char *)qword_1E91C9708;
    std::string v14 = "Argument a to the incomplete gamma function must be greater than zero (got a=%1%).";
LABEL_5:
    sub_18DFE6FEC(v13, v14);
  }
  double v12 = a6.n128_f64[0];
  if (a6.n128_f64[0] < 0.0)
  {
    std::string v13 = (char *)qword_1E91C9708;
    std::string v14 = "Argument x to the incomplete gamma function must be >= 0 (got x=%1%).";
    goto LABEL_5;
  }
  int v18 = a2;
  double v20 = a5;
  if (a5 < 170.0 || (a1 & 1) != 0)
  {
    if (a4 && (a1 & 1) == 0) {
      __assert_rtn("gamma_incomplete_imp", "gamma.hpp", 1221, "(p_derivative == 0) || normalised");
    }
    double v26 = a6.n128_f64[0] + 1.0;
    double v27 = 30.0;
    if (v12 < 709.0 && a5 < 30.0 && v26 >= a5)
    {
      double v30 = floor(a5);
      if (v30 == a5)
      {
        double v26 = 0.6;
        if (v12 > 0.6)
        {
          double v38 = sub_18DFE9C94(a5, v12, a3, a4);
          if ((a1 & 1) == 0)
          {
            double v39 = v38 * sub_18DFE9DFC(v20, v31, v32, v33, v34, v35, v36, v37);
            if (v18) {
              goto LABEL_161;
            }
            goto LABEL_158;
          }
          goto LABEL_151;
        }
      }
      else
      {
        double v26 = vabdd_f64(v30, a5);
        double v27 = 0.5;
        if (v12 > 0.2 && v26 == 0.5)
        {
          double v38 = sub_18DFE9E5C(a4, a5, v12);
          if ((a1 & 1) == 0) {
            double v38 = v38 * sub_18DFE9DFC(v20, v31, v32, v33, v34, v35, v36, v37);
          }
          if (!a4 || *a4 != 0.0)
          {
            v18 ^= 1u;
            goto LABEL_152;
          }
          double v58 = sub_18DFE6B68(a3, (uint64_t)&v83, v20, v12);
          *a4 = v58;
          double v31 = 1.0;
          if ((a1 & (v38 > 1.0)) != 0) {
            double v39 = 1.0;
          }
          else {
            double v39 = v38;
          }
          if (v18) {
            goto LABEL_163;
          }
          goto LABEL_156;
        }
      }
    }
    if (a5 > 1.0 && v12 < 0.0000000149011612)
    {
      if (a1)
      {
        sub_18DFE76C4(a5 + 1.0, v26, v27, a8, a9, a10, a11, a12);
        if (fabs(v55) > 1.79769313e308) {
          sub_18DFE734C("boost::math::tgamma<%1%>(%1%)", "numeric overflow");
        }
        double v32 = pow(v12, v20) / v55;
      }
      else
      {
        double v32 = pow(v12, a5) / a5;
      }
      double v31 = v84;
      double v34 = v85 + 1.0;
      double v33 = 1.0 - v85 * v84 / (v85 + 1.0);
      double v38 = v32 * v33;
      if (a4)
      {
        double v58 = sub_18DFE6B68(a3, (uint64_t)&v86, v85, v84);
        *a4 = v58;
        if ((a1 & (v38 > 1.0)) != 0) {
          double v39 = 1.0;
        }
        else {
          double v39 = v38;
        }
        if ((v18 & 1) == 0) {
          goto LABEL_163;
        }
        goto LABEL_156;
      }
LABEL_152:
      if ((a1 & (v38 > 1.0)) != 0) {
        double v39 = 1.0;
      }
      else {
        double v39 = v38;
      }
      if (!v18) {
        goto LABEL_161;
      }
      goto LABEL_156;
    }
    if (v12 > 1000.0 && (a5 < v12 || fabs(a5 + -50.0) / v12 < 1.0))
    {
      if (a1) {
        double v56 = sub_18DFE6B68(a3, (uint64_t)&v83, a5, v12);
      }
      else {
        sub_18DFE9F84(a5, v12);
      }
      if (a4) {
        *a4 = v56;
      }
      double v31 = v84;
      double v38 = v56 / v84;
      if (v56 / v84 != 0.0)
      {
        double v69 = sub_18DFEA7E0(&v85, &v84);
        goto LABEL_104;
      }
      goto LABEL_151;
    }
    if (v12 < 0.5)
    {
      double v57 = -0.4 / log(v12);
      goto LABEL_85;
    }
    if (v12 < 1.1)
    {
      double v57 = v12 * 0.75;
LABEL_85:
      if (v57 >= v20)
      {
        double v83 = 0.0;
        sub_18DFEA0C4(a3, &v83, v18 ^ 1, a4, v20, v12, v27, a8, a9, a10, a11, a12);
        if (a1) {
          double v68 = v68 / v83;
        }
        goto LABEL_133;
      }
LABEL_86:
      if (a1) {
        double v67 = sub_18DFE6B68(a3, (uint64_t)&v83, v20, v12);
      }
      else {
        sub_18DFE9F84(v20, v12);
      }
      double v38 = v67;
      if (a4) {
        *a4 = v67;
      }
      if (v67 == 0.0) {
        goto LABEL_152;
      }
      if (v18)
      {
        if (a1)
        {
          double v73 = v85;
          double v74 = 1.0 / v38;
        }
        else
        {
          double v77 = sub_18DFE9DFC(v85, v31, v32, v33, v34, v35, v36, v37);
          double v75 = 0.0;
          double v73 = v85;
          if (v38 < 1.0 && v38 * 1.79769313e308 <= v77 || (double v74 = v77 / v38, v85 >= 1.0) && 1.79769313e308 / v85 <= v74)
          {
            char v76 = 0;
            goto LABEL_131;
          }
        }
        double v75 = -(v73 * v74);
        char v76 = 1;
      }
      else
      {
        char v76 = 0;
        double v75 = 0.0;
        double v73 = v85;
      }
LABEL_131:
      double v78 = sub_18DFE9BF0(v73, v84, v75);
      double v31 = v85;
      double v79 = v78 / v85;
      if ((v76 & 1) == 0)
      {
        double v38 = v38 * v79;
        goto LABEL_152;
      }
      double v68 = -(v38 * v79);
LABEL_133:
      if ((a1 & (v68 > 1.0)) != 0) {
        double v39 = 1.0;
      }
      else {
        double v39 = v68;
      }
      goto LABEL_161;
    }
    if (a5 > 20.0 && a1)
    {
      double v71 = (v12 - a5) / a5;
      if (v20 > 200.0)
      {
        if (20.0 / v20 <= v71 * v71) {
          goto LABEL_113;
        }
        goto LABEL_138;
      }
      if (fabs(v71) < 0.4)
      {
LABEL_138:
        double v38 = sub_18DFEA260(v20, v12);
        if (v12 >= v20) {
          v18 ^= 1u;
        }
        if (!a4) {
          goto LABEL_152;
        }
        double v58 = sub_18DFE6B68(a3, (uint64_t)&v83, v20, v12);
        *a4 = v58;
        double v31 = 1.0;
        if (v38 <= 1.0) {
          double v39 = v38;
        }
        else {
          double v39 = 1.0;
        }
        if ((v18 & 1) == 0) {
          goto LABEL_163;
        }
LABEL_156:
        double v80 = 1.0;
        if (a1)
        {
LABEL_160:
          double v39 = v80 - v39;
LABEL_161:
          if (!a4) {
            return v39;
          }
          double v58 = *a4;
LABEL_163:
          double v82 = v84;
          if (v84 < 1.0 && v84 * 1.79769313e308 < v58)
          {
            *a4 = 8.98846567e307;
            double v58 = 8.98846567e307;
          }
          *a4 = v58 / v82;
          return v39;
        }
        double v20 = v85;
LABEL_158:
        sub_18DFE76C4(v20, v31, v32, v33, v34, v35, v36, v37);
        double v80 = v81;
        if (fabs(v81) > 1.79769313e308) {
          sub_18DFE734C("boost::math::tgamma<%1%>(%1%)", "numeric overflow");
        }
        goto LABEL_160;
      }
    }
LABEL_113:
    if (v12 + -1.0 / (v12 * 3.0) >= v20)
    {
      if (a1) {
        double v72 = sub_18DFE6B68(a3, (uint64_t)&v83, v20, v12);
      }
      else {
        sub_18DFE9F84(v20, v12);
      }
      double v38 = v72;
      if (a4) {
        *a4 = v72;
      }
      if (v72 != 0.0)
      {
        double v69 = sub_18DFE9B40(v85, v84, 2.22044605e-16);
LABEL_104:
        double v70 = v38 * v69;
        double v31 = 1.0;
        if ((a1 & (v70 > 1.0)) != 0) {
          double v39 = 1.0;
        }
        else {
          double v39 = v70;
        }
        if (v18) {
          goto LABEL_161;
        }
        goto LABEL_156;
      }
LABEL_151:
      v18 ^= 1u;
      goto LABEL_152;
    }
    goto LABEL_86;
  }
  BOOL v21 = a5 * 4.0 >= a6.n128_f64[0] || a2 == 0;
  if (v21)
  {
    if (a2)
    {
      double v22 = sub_18DFE9224(1, 1, a3, a4, a5, a6);
      if (v22 == 0.0)
      {
        long double v23 = log(1.0 / (v20 * 12.0) + 1.0 + 1.0 / (v20 * 288.0 * v20)) - v20;
        double v24 = v23 + (v20 + -0.5) * log(v20) + 0.918938533;
        if (a4)
        {
          long double v25 = log(v12);
          *a4 = exp(-(v12 - v20 * v25));
        }
        goto LABEL_53;
      }
    }
    else if (a6.n128_f64[0] * 4.0 < a5 || (double v22 = sub_18DFE9224(1, 0, a3, a4, a5, a6), v22 == 0.0))
    {
      double v53 = log(v12);
      double v41 = -(v12 - v20 * v53);
      if (a4) {
        *a4 = exp(-(v12 - v20 * v53));
      }
      double v52 = sub_18DFE9BF0(v20, v12, 0.0) / v20;
      goto LABEL_52;
    }
    double v59 = log(v22);
    double v24 = v59 + sub_18DFE6F88(v20, v60, v61, v62, v63, v64, v65, v66);
    goto LABEL_53;
  }
  double v40 = log(a6.n128_f64[0]);
  double v41 = -(v12 - v20 * v40);
  if (a4) {
    *a4 = exp(-(v12 - v20 * v40));
  }
  double v42 = v12 - v20 + 1.0;
  double v43 = v42 + 2.0;
  double v44 = 3.56011817e-307;
  if (v42 + 2.0 != 0.0) {
    double v44 = v42 + 2.0;
  }
  double v45 = 0.0;
  uint64_t v46 = 2;
  double v47 = v44;
  do
  {
    double v43 = v43 + 2.0;
    double v48 = (v20 - (double)(int)v46) * (double)(int)v46;
    double v49 = v43 + v48 * v45;
    double v50 = 1.0 / v49;
    double v47 = v43 + v48 / v47;
    if (v47 == 0.0) {
      double v47 = 3.56011817e-307;
    }
    BOOL v21 = v49 == 0.0;
    double v45 = 2.80889552e306;
    if (!v21) {
      double v45 = v50;
    }
    double v44 = v44 * (v45 * v47);
  }
  while (fabs(v45 * v47 + -1.0) > 2.22044605e-16 && v46++ != 0);
  double v52 = 1.0 / (v42 + (v20 + -1.0) / v44);
LABEL_52:
  double v24 = v41 + log(v52);
LABEL_53:
  if (v24 > 709.0) {
    sub_18DFE734C((char *)qword_1E91C9708, "Overflow Error");
  }

  return exp(v24);
}

double sub_18DFE9B40(double a1, double a2, double a3)
{
  double v3 = a2 - a1 + 1.0;
  double v4 = fabs(a3);
  double v5 = v3 + 2.0;
  double v6 = 3.56011817e-307;
  if (v3 + 2.0 != 0.0) {
    double v6 = v3 + 2.0;
  }
  double v7 = 0.0;
  uint64_t v8 = 2;
  double v9 = v6;
  do
  {
    double v5 = v5 + 2.0;
    double v10 = (a1 - (double)(int)v8) * (double)(int)v8;
    double v11 = v5 + v10 * v7;
    double v12 = 1.0 / v11;
    double v9 = v5 + v10 / v9;
    if (v9 == 0.0) {
      double v9 = 3.56011817e-307;
    }
    BOOL v13 = v11 == 0.0;
    double v7 = 2.80889552e306;
    if (!v13) {
      double v7 = v12;
    }
    double v6 = v6 * (v7 * v9);
    BOOL v13 = fabs(v7 * v9 + -1.0) <= v4 || v8++ == 0;
  }
  while (!v13);
  return 1.0 / (v3 + (a1 + -1.0) / v6);
}

double sub_18DFE9BF0(double a1, double a2, double a3)
{
  double v4 = 1.0;
  uint64_t v5 = 1000000;
  do
  {
    a3 = v4 + a3;
    if (fabs(a3 * 2.22044605e-16) >= fabs(v4)) {
      break;
    }
    a1 = a1 + 1.0;
    double v4 = v4 * (a2 / a1);
    --v5;
  }
  while (v5);
  if ((unint64_t)(1000000 - v5) >= 0xF4240) {
    sub_18DFE88E4("boost::math::detail::lower_gamma_series<%1%>(%1%)", "Series evaluation exceeded %1% iterations, giving up now.");
  }
  return a3;
}

double sub_18DFE9C94(long double a1, long double a2, uint64_t a3, double *a4)
{
  double v7 = exp(-a2);
  double v8 = 1.0;
  if (a1 <= 1.0 || v7 == 0.0)
  {
    double v11 = v7;
    if (!a4) {
      return v11;
    }
  }
  else
  {
    unsigned int v9 = 2;
    double v10 = v7;
    double v11 = v7;
    do
    {
      double v10 = v10 / v8 * a2;
      double v11 = v11 + v10;
      double v8 = (double)v9++;
    }
    while (v8 < a1);
    if (!a4) {
      return v11;
    }
  }
  double v12 = v7 * pow(a2, a1);
  double v13 = a1 + -1.0;
  double v14 = fabs(a1 + -1.0);
  if ((unint64_t)(*(void *)&v14 - 0x10000000000000) >> 53 >= 0x3FF
    && (unint64_t)(*(void *)&v14 - 1) >= 0xFFFFFFFFFFFFFLL
    && COERCE__INT64(a1 + -1.0) != 0)
  {
    sub_18DFE7DCC("boost::math::trunc<%1%>(%1%)", "Value %1% can not be represented in the target integer type.");
  }
  double v17 = floor(v13);
  double v18 = ceil(v13);
  if (v13 < 0.0) {
    double v17 = v18;
  }
  if (v17 > 2147483650.0 || v17 < -2147483650.0) {
    sub_18DFE7DCC("boost::math::itrunc<%1%>(%1%)", "Value %1% can not be represented in the target integer type.");
  }
  *a4 = v12 / dbl_18E1F7E20[(int)v17];
  return v11;
}

double sub_18DFE9DFC(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  sub_18DFE76C4(a1, a2, a3, a4, a5, a6, a7, a8);
  if (fabs(result) > 1.79769313e308) {
    sub_18DFE734C("boost::math::tgamma<%1%>(%1%)", "numeric overflow");
  }
  return result;
}

double sub_18DFE9E5C(double *a1, double a2, double a3)
{
  double v6 = sqrt(a3);
  double v7 = sub_18DFE4DB4(1, v6);
  if (fabs(v7) > 1.79769313e308) {
    sub_18DFE734C("boost::math::erfc<%1%>(%1%, %1%)", "numeric overflow");
  }
  if (a2 <= 1.0 || v7 == 0.0)
  {
    if (!a1) {
      return v7;
    }
    double v14 = v6 * exp(-a3) / 1.77245385;
LABEL_12:
    *a1 = v14;
    return v7;
  }
  long double v8 = exp(-a3);
  double v9 = sqrt(a3 * 3.14159265);
  double v10 = v8 / v9 * a3 + v8 / v9 * a3;
  double v11 = 2.0;
  if (a2 > 2.0)
  {
    unsigned int v12 = 3;
    double v13 = v10;
    do
    {
      double v13 = v13 / (v11 + -0.5) * a3;
      double v10 = v10 + v13;
      double v11 = (double)v12++;
    }
    while (v11 < a2);
  }
  double v7 = v7 + v10;
  double v14 = 0.0;
  if (a1) {
    goto LABEL_12;
  }
  return v7;
}

void sub_18DFE9F84(long double a1, long double a2)
{
  if (a2 <= 1.79769313e308)
  {
    double v4 = log(a2) * a1;
    if (a2 >= 1.0)
    {
      if (a2 < 708.0 && v4 < 709.0)
      {
        long double v7 = -a2;
        double v8 = pow(a2, a1);
        double v6 = v8 * exp(v7);
        goto LABEL_13;
      }
      if (a1 >= 1.0)
      {
        double v9 = a2 / a1;
LABEL_11:
        long double v10 = exp(v9);
        double v6 = pow(a2 / v10, a1);
        goto LABEL_13;
      }
    }
    else
    {
      if (v4 > -708.0)
      {
        double v5 = pow(a2, a1);
        double v6 = v5 * exp(-a2);
        goto LABEL_13;
      }
      double v9 = a2 / a1;
      if (a2 / a1 < 709.0) {
        goto LABEL_11;
      }
    }
    double v6 = exp(v4 - a2);
LABEL_13:
    if (fabs(v6) == INFINITY) {
      sub_18DFE734C("boost::math::detail::full_igamma_prefix<%1%>(%1%, %1%)", "Result of incomplete gamma function is too large to represent.");
    }
  }
}

void sub_18DFEA0C4(uint64_t a1, double *a2, int a3, long double *a4, double a5, long double a6, double a7, double a8, double a9, double a10, double a11, double a12)
{
  double v17 = a5;
  double v18 = sub_18DFEA88C(a5, a6, a7, a8, a9, a10, a11, a12);
  if (fabs(v18) > 1.79769313e308) {
    sub_18DFE734C("boost::math::tgamma1pm1<%!%>(%1%)", "numeric overflow");
  }
  if (a2) {
    *a2 = (v18 + 1.0) / v17;
  }
  double v19 = sub_18DFEAB0C(a1, a6, v17);
  double v20 = v18 - v19;
  double v21 = v19 + 1.0;
  if (a4)
  {
    double v22 = *a2;
    *a4 = v21 / (exp(a6) * v22);
  }
  double v23 = 0.0;
  if (a3) {
    double v23 = *a2;
  }
  double v24 = -a6;
  double v25 = v23 - v20 / v17;
  int v26 = 2;
  double v27 = -a6;
  uint64_t v28 = 999990;
  double v29 = v25 / v21;
  do
  {
    double v17 = v17 + 1.0;
    double v29 = v27 / v17 + v29;
    if (fabs(v29 * 2.22044605e-16) >= fabs(v27 / v17)) {
      break;
    }
    double v27 = v27 * v24 / (double)v26++;
    --v28;
  }
  while (v28);
  if ((unint64_t)(999990 - v28) >= 0xF4240) {
    sub_18DFE88E4("boost::math::tgamma_small_upper_part<%1%>(%1%, %1%)", "Series evaluation exceeded %1% iterations, giving up now.");
  }
}

double sub_18DFEA260(double a1, double a2)
{
  double v4 = (a2 - a1) / a1;
  if (v4 < -1.0) {
    sub_18DFE6FEC((char *)qword_1E91C9700, "log1pmx(x) requires x > -1, but got x = %1%.");
  }
  if (v4 == -1.0) {
    sub_18DFE734C((char *)qword_1E91C9700, "Overflow Error");
  }
  double v25 = fabs(v4);
  if (v25 <= 0.949999988)
  {
    double v27 = -v4;
    if (v25 >= 2.22044605e-16)
    {
      double v26 = 0.0;
      int v28 = 2;
      uint64_t v29 = 1000000;
      do
      {
        double v4 = v4 * v27;
        double v30 = v4 / (double)v28;
        double v26 = v26 + v30;
        if (fabs(v26 * 2.22044605e-16) >= fabs(v30)) {
          break;
        }
        ++v28;
        --v29;
      }
      while (v29);
      if ((unint64_t)(1000000 - v29) >= 0xF4240) {
        sub_18DFE88E4((char *)qword_1E91C9700, "Series evaluation exceeded %1% iterations, giving up now.");
      }
    }
    else
    {
      double v26 = v4 * v27 * 0.5;
    }
  }
  else
  {
    double v26 = log(v4 + 1.0) - v4;
  }
  double v5 = -(v26 * a1);
  double v6 = sub_18DFE4DB4(1, sqrt(v5));
  if (fabs(v6) > 1.79769313e308) {
    sub_18DFE734C("boost::math::erfc<%1%>(%1%, %1%)", "numeric overflow");
  }
  double v7 = sqrt(v26 * -2.0);
  double v8 = exp(-v5);
  if (a2 >= a1) {
    double v9 = v7;
  }
  else {
    double v9 = -v7;
  }
  v10.f64[0] = v9 * v9 * -0.000109765822 + -0.000334931611;
  v11.f64[0] = v9 * v9 * 0.000281269515 + 0.0000517179091;
  v12.f64[0] = v9 * v9 * (v9 * v9 * -0.00000229148118 + -0.0000135940482) + 0.0000679778048;
  v13.f64[0] = v9 * v9 * (v9 * v9 * 0.00000801847026 + 0.000000141906292) + -0.000199325705;
  v14.f64[0] = v9 * v9 * 0.00000142309007 + 0.0000110826541;
  v15.f64[0] = v9 * v9 * -0.00000567495283 + -0.000000239650511;
  v16.f64[0] = v9 * v9 * 0.0000000119516286 + 0.000000137863345;
  v17.f64[0] = v9 * v9 * -0.000000057525456 + 0.0000000046471278;
  v10.f64[1] = v9 * v9 * (v9 * v9 * -0.0000183291166 + -0.0000815396937) + 0.00027087821;
  v11.f64[1] = v9 * v9 * (v9 * v9 * 0.0000561168275 + 0.000000790235323) + -0.000592166437;
  double v18 = (const double *)&unk_18E1F7B90;
  *(void *)&v19.f64[0] = *(_OWORD *)&vld1q_dup_f64(v18);
  float64x2_t v20 = vaddq_f64(vmulq_n_f64(v11, v9), vaddq_f64(vmulq_n_f64(v10, v9 * v9), (float64x2_t)xmmword_18E1F7CA0));
  v19.f64[1] = 1.0 / a1 * (1.0 / a1);
  v10.f64[0] = v19.f64[1];
  v10.f64[1] = (v9 * -0.000438297099 + 0.000839498721) * v9 + -0.000652623919;
  v12.f64[1] = v9 * v9 * 0.000011375727 + 0.0000664149822;
  v13.f64[1] = v9 * v9 * -0.0000396836505 + -0.00000146384526;
  v14.f64[1] = v9 * v9 * (v9 * v9 * 0.000000142806142 + 0.00000137219573) + -0.0000127606352;
  v15.f64[1] = v9 * v9 * (v9 * v9 * -0.000000629899214 + 0.0000000342357873) + 0.0000529234488;
  v16.f64[1] = v9 * v9 * (v9 * v9 * 9.14769958e-10 + 0.0000000102618098) + -0.000000176659527;
  v17.f64[1] = v9 * v9 * (v9 * v9 * -0.00000000438203602 + 0.00000000670785354) + 0.000000829671134;
  float64x2_t v21 = vaddq_f64(vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64(vaddq_f64(vmulq_n_f64(vaddq_f64(vmulq_n_f64(v15, v9 * v9), (float64x2_t)xmmword_18E1F7D10), v9 * v9), (float64x2_t)xmmword_18E1F7D20), v9), vaddq_f64(vmulq_n_f64(vaddq_f64(vmulq_n_f64(vaddq_f64(vmulq_n_f64(v14, v9 * v9), (float64x2_t)xmmword_18E1F7CE0), v9 * v9), (float64x2_t)xmmword_18E1F7CF0), v9 * v9), (float64x2_t)xmmword_18E1F7D00)), vmulq_n_f64(vaddq_f64(vmulq_n_f64(vmlaq_f64(v20, v19, v10), v19.f64[1]), vaddq_f64(
                    vmulq_n_f64(vaddq_f64(vmulq_n_f64(v13, v9 * v9), (float64x2_t)xmmword_18E1F7CD0), v9),
                    vaddq_f64(vmulq_n_f64(vaddq_f64(vmulq_n_f64(v12, v9 * v9), (float64x2_t)xmmword_18E1F7CB0), v9 * v9), (float64x2_t)xmmword_18E1F7CC0))), v19.f64[1])), v19.f64[1]), vaddq_f64(vmulq_n_f64(vaddq_f64(vmulq_n_f64(vaddq_f64(vmulq_n_f64(vaddq_f64(vmulq_n_f64(vaddq_f64(vmulq_n_f64(v17, v9 * v9), (float64x2_t)xmmword_18E1F7D80), v9 * v9), (float64x2_t)xmmword_18E1F7D90), v9 * v9), (float64x2_t)xmmword_18E1F7DA0), v9 * v9), (float64x2_t)xmmword_18E1F7DB0), v9), vaddq_f64(
              vmulq_n_f64(vaddq_f64(vmulq_n_f64(vaddq_f64(vmulq_n_f64(vaddq_f64(vmulq_n_f64(vaddq_f64(vmulq_n_f64(v16, v9 * v9), (float64x2_t)xmmword_18E1F7D30), v9 * v9), (float64x2_t)xmmword_18E1F7D40), v9 * v9), (float64x2_t)xmmword_18E1F7D50), v9 * v9), (float64x2_t)xmmword_18E1F7D60), v9 * v9), (float64x2_t)xmmword_18E1F7D70)));
  double v22 = v8 / sqrt(a1 * 6.28318531) * (1.0 / a1 * v21.f64[0] + v21.f64[1]);
  double v23 = -v22;
  if (a2 >= a1) {
    double v23 = v22;
  }
  return v6 * 0.5 + v23;
}

double sub_18DFEA7E0(double *a1, double *a2)
{
  double v2 = *a1;
  double v3 = 0.0;
  double v4 = 1.0;
  uint64_t v5 = 1000000;
  do
  {
    double v3 = v4 + v3;
    if (fabs(v3 * 2.22044605e-16) >= fabs(v4)) {
      break;
    }
    double v2 = v2 + -1.0;
    double v4 = v4 * (v2 / *a2);
    --v5;
  }
  while (v5);
  if ((unint64_t)(1000000 - v5) >= 0xF4240) {
    sub_18DFE88E4("boost::math::tgamma<%1%>(%1%,%1%)", "Series evaluation exceeded %1% iterations, giving up now.");
  }
  return v3;
}

double sub_18DFEA88C(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  if (a1 >= 0.0)
  {
    double v9 = a1 + 1.0;
    a2 = 2.0;
    if (a1 >= 2.0) {
      goto LABEL_6;
    }
    sub_18DFE7B14(v9, a1, a1 + -1.0);
  }
  else
  {
    if (a1 < -0.5)
    {
      double v9 = a1 + 1.0;
LABEL_6:
      sub_18DFE76C4(v9, a2, a3, a4, a5, a6, a7, a8);
      if (fabs(v11) > 1.79769313e308) {
        sub_18DFE734C("boost::math::tgamma<%1%>(%1%)", "numeric overflow");
      }
      return v11 + -1.0;
    }
    if (a1 < -1.0) {
      sub_18DFE6FEC("log1p<%1%>(%1%)", "log1p(x) requires x > -1, but got x = %1%.");
    }
    if (a1 == -1.0) {
      sub_18DFE734C("log1p<%1%>(%1%)", "Overflow Error");
    }
    double v15 = log1pl(a1);
    sub_18DFE7B14(a1 + 2.0, a1 + 1.0, a1);
    double v10 = v13 - v15;
  }
  double v12 = sub_18DFEAA20(v10);
  if (fabs(v12) > 1.79769313e308) {
    sub_18DFE734C("boost::math::expm1<%1%>(%1%)", "numeric overflow");
  }
  return v12;
}

double sub_18DFEAA20(double result)
{
  double v1 = fabs(result);
  if (v1 <= 0.5)
  {
    if (v1 >= 2.22044605e-16)
    {
      float64x2_t v2 = vaddq_f64(vaddq_f64(vmulq_n_f64(vmlaq_n_f64((float64x2_t)xmmword_18E1F7DF0, (float64x2_t)xmmword_18E1F7DE0, result * result), result * result), (float64x2_t)xmmword_18E1F7E10), vmulq_n_f64(vaddq_f64(vmulq_n_f64(vmlaq_n_f64((float64x2_t)xmmword_18E1F7DD0, (float64x2_t)xmmword_18E1F7DC0, result * result), result * result), (float64x2_t)xmmword_18E1F7E00), result));
      return result * v2.f64[0] / v2.f64[1] + result * 1.02812767;
    }
  }
  else if (v1 >= 709.0)
  {
    BOOL v3 = result <= 0.0;
    double result = -1.0;
    if (!v3) {
      sub_18DFE734C("boost::math::expm1<%1%>(%1%)", "Overflow Error");
    }
  }
  else
  {
    return exp(result) + -1.0;
  }
  return result;
}

double sub_18DFEAB0C(uint64_t a1, long double a2, double a3)
{
  if (a2 <= 0.0)
  {
    if ((*(void *)&a3 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000) {
      sub_18DFE7DCC("boost::math::trunc<%1%>(%1%)", "Value %1% can not be represented in the target integer type.");
    }
    double v9 = ceil(a3);
    double v10 = floor(a3);
    if (a3 >= 0.0) {
      double v9 = v10;
    }
    if (v9 != a3) {
      sub_18DFE6FEC((char *)qword_1E91C9710, "For non-integral exponent, expected base > 0 but got %1%");
    }
    double v11 = a3 * 0.5;
    if (COERCE__INT64(fabs(a3 * 0.5)) >= 0x7FF0000000000000) {
      sub_18DFE7DCC("boost::math::trunc<%1%>(%1%)", "Value %1% can not be represented in the target integer type.");
    }
    if (v11 >= 0.0) {
      double v12 = floor(v11);
    }
    else {
      double v12 = ceil(v11);
    }
    if (v12 != v11) {
      return pow(a2, a3) + -1.0;
    }
    return sub_18DFEAB0C(a1, -a2, a3);
  }
  else
  {
    double v5 = fabs((a2 + -1.0) * a3);
    if (fabs(a3) >= 0.2 && v5 >= 0.5) {
      return pow(a2, a3) + -1.0;
    }
    double v7 = log(a2) * a3;
    if (v7 >= 0.5)
    {
      if (v7 > 709.0) {
        sub_18DFE734C((char *)qword_1E91C9710, "Overflow Error");
      }
      return pow(a2, a3) + -1.0;
    }
    double v8 = sub_18DFEAA20(v7);
    if (fabs(v8) > 1.79769313e308) {
      sub_18DFE734C("boost::math::expm1<%1%>(%1%)", "numeric overflow");
    }
  }
  return v8;
}

void cnstatistics::Chi2PDF(cnstatistics *this, double a2, double a3)
{
  if (a3 < 0.0) {
    return;
  }
  if (a2 < 0.0) {
    return;
  }
  if (fabs(a2) == INFINITY) {
    return;
  }
  double v3 = fabs(a3);
  if (v3 < 2.22044605e-16 || v3 == INFINITY) {
    return;
  }
  if (a3 <= 0.0 || (*(void *)&a3 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000) {
    sub_18DFE40C4("boost::math::chi_squared_distribution<%1%>::chi_squared_distribution", "Degrees of freedom argument is %1%, but must be > 0 !");
  }
  if (a3 <= 0.0 || (*(void *)&a3 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    double v4 = "Degrees of freedom argument is %1%, but must be > 0 !";
    goto LABEL_16;
  }
  if ((*(void *)&a2 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    double v4 = "Chi Square parameter was %1%, but must be > 0 !";
LABEL_16:
    sub_18DFE40C4("boost::math::pdf(const chi_squared_distribution<%1%>&, %1%)", v4);
  }
  if (a2 == 0.0)
  {
    if (a3 < 2.0) {
      sub_18DFE51F4("boost::math::pdf(const chi_squared_distribution<%1%>&, %1%)", "Overflow Error");
    }
  }
  else
  {
    sub_18DFE6A10((uint64_t)&v6, a3 * 0.5, a2 * 0.5);
    if (fabs(v5) > 1.79769313e308) {
      sub_18DFE51F4("boost::math::gamma_p_derivative<%1%>(%1%, %1%)", "numeric overflow");
    }
  }
}

double cnstatistics::Chi2CDF(cnstatistics *this, double a2, __n128 a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  double v9 = NAN;
  if (a3.n128_f64[0] >= 0.0)
  {
    if (a2 >= 0.0 || (double v9 = 0.0, a3.n128_f64[0] <= 0.0))
    {
      double v11 = fabs(a2);
      BOOL v12 = v11 == INFINITY;
      if (v11 == INFINITY && a3.n128_f64[0] > 0.0)
      {
        double v13 = fabs(a3.n128_f64[0]);
        double v9 = 1.0;
        if (v13 != INFINITY) {
          return v9;
        }
      }
      else
      {
        double v13 = fabs(a3.n128_f64[0]);
        double v9 = 1.0;
      }
      if (v13 >= 2.22044605e-16)
      {
        if (fabs(a3.n128_f64[0]) == INFINITY)
        {
          if (v12 && a2 > 0.0) {
            return NAN;
          }
          else {
            return 0.0;
          }
        }
        if (a3.n128_f64[0] <= 0.0 || (a3.n128_u64[0] & 0x7FFFFFFFFFFFFFFFLL) >= 0x7FF0000000000000) {
          sub_18DFE40C4("boost::math::chi_squared_distribution<%1%>::chi_squared_distribution", "Degrees of freedom argument is %1%, but must be > 0 !");
        }
        if (a3.n128_f64[0] <= 0.0 || (a3.n128_u64[0] & 0x7FFFFFFFFFFFFFFFLL) >= 0x7FF0000000000000)
        {
          double v15 = "Degrees of freedom argument is %1%, but must be > 0 !";
        }
        else
        {
          if (a2 >= 0.0 && (*(void *)&a2 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
          {
            double v14 = a3.n128_f64[0] * 0.5;
            a3.n128_f64[0] = a2 * 0.5;
            double v9 = sub_18DFE9224(1, 0, (uint64_t)&v17, 0, v14, a3, 0.5, a5, a6, a7, a8, a9);
            if (fabs(v9) > 1.79769313e308) {
              sub_18DFE51F4("gamma_p<%1%>(%1%, %1%)", "numeric overflow");
            }
            return v9;
          }
          double v15 = "Chi Square parameter was %1%, but must be > 0 !";
        }
        sub_18DFE40C4("boost::math::cdf(const chi_squared_distribution<%1%>&, %1%)", v15);
      }
    }
  }
  return v9;
}

void cnstatistics::InverseChi2(cnstatistics *this, double a2, double a3)
{
  if (a3 >= 0.0 && a2 >= 0.0 && a2 <= 1.0 && fabs(a2) >= 2.22044605e-16)
  {
    double v4 = fabs(a3);
    if (fabs(a2 + -1.0) >= 2.22044605e-16 && v4 != INFINITY && v4 >= 2.22044605e-16) {
      cnstatistics::InverseGamma(this, a2, a3 * 0.5, 2.0);
    }
  }
}

uint64_t sub_18DFEB188@<X0>(int a1@<W0>, int a2@<W1>, uint64_t a3@<X8>)
{
  if (a1 < 0) {
    __assert_rtn("Zeros", "cnmatrix.h", 3098, "nr >= 0");
  }
  if (a2 < 0) {
    __assert_rtn("Zeros", "cnmatrix.h", 3099, "nc >= 0");
  }
  *(void *)(a3 + 24) = 0x100000003;
  *(void *)a3 = &unk_1EDD18D98;
  *(void *)(a3 + 32) = a3 + 40;
  *(_DWORD *)(a3 + 8) = a1;
  *(_DWORD *)(a3 + 12) = a2;
  *(_DWORD *)(a3 + 16) = a2 * a1;
  *(_DWORD *)(a3 + 20) = a1;

  return sub_18DFE2CC8(a3, 0.0);
}

uint64_t sub_18DFEB238@<X0>(int a1@<W0>, int a2@<W1>, uint64_t a3@<X8>)
{
  if (a1 < 0) {
    __assert_rtn("Zeros", "cnmatrix.h", 3098, "nr >= 0");
  }
  if (a2 < 0) {
    __assert_rtn("Zeros", "cnmatrix.h", 3099, "nc >= 0");
  }
  *(void *)(a3 + 24) = 0x300000003;
  *(void *)a3 = &unk_1EDD18EE8;
  *(void *)(a3 + 32) = a3 + 40;
  *(_DWORD *)(a3 + 8) = a1;
  *(_DWORD *)(a3 + 12) = a2;
  *(_DWORD *)(a3 + 16) = a2 * a1;
  *(_DWORD *)(a3 + 20) = a1;

  return sub_18DFE2CC8(a3, 0.0);
}

uint64_t cntransformation::CNRigidTransformation::CNRigidTransformation(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0x3FF0000000000000;
  uint64_t v4 = a1 + 32;
  *(void *)(a1 + 56) = 0x100000003;
  *(void *)(a1 + 32) = &unk_1EDD18D98;
  *(void *)(a1 + 64) = a1 + 72;
  *(_OWORD *)(a1 + 40) = xmmword_18E1F6F60;
  sub_18DFE2CC8(a1 + 32, 0.0);
  *(void *)(a1 + 120) = 0x300000003;
  *(void *)(a1 + 96) = &unk_1EDD18EE8;
  *(void *)(a1 + 128) = a1 + 136;
  *(_OWORD *)(a1 + 104) = xmmword_18E1F0010;
  sub_18DFE2CC8(a1 + 96, 0.0);
  *(void *)(a1 + 232) = 0x300000003;
  *(void *)(a1 + 208) = &unk_1EDD18EE8;
  *(void *)(a1 + 240) = a1 + 248;
  *(_OWORD *)(a1 + 216) = xmmword_18E1F0010;
  sub_18DFE2CC8(a1 + 208, 0.0);
  *(void *)(a1 + 344) = 0x300000003;
  *(void *)(a1 + 320) = &unk_1EDD18EE8;
  *(void *)(a1 + 352) = a1 + 360;
  *(_OWORD *)(a1 + 328) = xmmword_18E1F0010;
  sub_18DFE2CC8(a1 + 320, 0.0);
  *(unsigned char *)(a1 + 432) = 0;
  uint64_t v8 = 0x300000003;
  char v6 = &unk_1EDD18EE8;
  double v9 = v10;
  long long v7 = xmmword_18E1F0010;
  sub_18DFE2CC8((uint64_t)&v6, 0.0);
  sub_18DFE2F24(a1 + 96, (uint64_t)&v6);
  uint64_t v8 = 0x300000003;
  char v6 = &unk_1EDD18EE8;
  double v9 = v10;
  long long v7 = xmmword_18E1F0010;
  sub_18DFE2CC8((uint64_t)&v6, 0.0);
  sub_18DFE2F24(a1 + 208, (uint64_t)&v6);
  uint64_t v8 = 0x300000003;
  char v6 = &unk_1EDD18EE8;
  double v9 = v10;
  long long v7 = xmmword_18E1F0010;
  sub_18DFE2CC8((uint64_t)&v6, 0.0);
  sub_18DFE2F24(a1 + 320, (uint64_t)&v6);
  *(unsigned char *)(a1 + 432) = 0;
  if ((cntransformation::CNRigidTransformation::SetTransformationMatrix(a1, a2) & 1) == 0)
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0x3FF0000000000000;
    sub_18DFEB188(3, 1, (uint64_t)&v6);
    sub_18DFE2F24(v4, (uint64_t)&v6);
    __assert_rtn("CNRigidTransformation", "cnrigidtransformation.cpp", 61, "false && \"Error: attempted to construct CNRigidTransformation from invalid transformation matrix.\"");
  }
  return a1;
}

void sub_18DFEB59C(_Unwind_Exception *a1)
{
  void *v4 = &unk_1EDD17478;
  *double v3 = &unk_1EDD17478;
  *float64x2_t v2 = &unk_1EDD17478;
  *double v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

uint64_t cntransformation::CNRigidTransformation::SetTransformationMatrix(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 8) == 4 && *(_DWORD *)(a2 + 12) == 4)
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EB403748, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_1EB403748))
    {
      uint64_t v19 = 0x300000001;
      char v17 = &unk_1EDD18258;
      float64x2_t v20 = &v21;
      long long v18 = xmmword_18E1F8560;
      uint64_t v21 = 0x100000000;
      int v22 = 2;
      sub_18DFEC63C((uint64_t)&v17, (uint64_t)&unk_1EB403808);
      __cxa_atexit((void (*)(void *))sub_18DFE2E9C, &unk_1EB403808, &dword_18DEDB000);
      __cxa_guard_release(&qword_1EB403748);
    }
    sub_18DFECE30(a2, (uint64_t)&unk_1EB403808, (uint64_t)&unk_1EB403808, (uint64_t)&v17);
    sub_18DFE20A0((uint64_t)v23, (uint64_t)&v17);
    if (v23 != (unsigned char *)a1)
    {
      long long v4 = *(_OWORD *)&v23[16];
      *(_OWORD *)a1 = *(_OWORD *)v23;
      *(_OWORD *)(a1 + 16) = v4;
    }
    int v5 = dword_1EB403818;
    uint64_t v19 = 0x100000003;
    char v17 = &unk_1EDD18D98;
    *(void *)&long long v18 = dword_1EB403818 | 0x100000000;
    DWORD2(v18) = dword_1EB403818;
    HIDWORD(v18) = dword_1EB403818;
    float64x2_t v20 = &v21;
    if (dword_1EB403818)
    {
      uint64_t v6 = 0;
      uint64_t v7 = qword_1EB403828;
      int v8 = 3 * *(_DWORD *)(a2 + 20);
      uint64_t v9 = *(void *)(a2 + 32);
      do
      {
        *(&v21 + v6) = *(void *)(v9 + 8 * (*(_DWORD *)(v7 + 4 * (int)v6) + v8));
        ++v6;
      }
      while (v5 != v6);
    }
    sub_18DFE2F24(a1 + 32, (uint64_t)&v17);
    *(void *)&v23[24] = 0x100000003;
    *(_OWORD *)&v23[8] = xmmword_18E1F6F60;
    *(void *)double v23 = &unk_1EDD18D98;
    double v24 = &v25;
    uint64_t v19 = 0x100000134;
    char v17 = &unk_1EDD18C48;
    long long v18 = xmmword_18E1F6FB0;
    float64x2_t v20 = &v21;
    uint64_t v14 = 0x100000003;
    BOOL v12 = &unk_1EDD18D98;
    long long v13 = xmmword_18E1F6F60;
    double v15 = &v16;
    sub_18DFE345C(a1 + 32, (uint64_t)v23, (uint64_t)&v17, (uint64_t)&v12, "2");
    if ((v10 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000) {
      return 1;
    }
    sub_18DFECED0(a1);
  }
  return 0;
}

void sub_18DFEB8EC(_Unwind_Exception *a1)
{
}

uint64_t cntransformation::CNRigidTransformation::CNRigidTransformation(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0x3FF0000000000000;
  uint64_t v6 = a1 + 32;
  *(void *)(a1 + 56) = 0x100000003;
  *(void *)(a1 + 32) = &unk_1EDD18D98;
  *(void *)(a1 + 64) = a1 + 72;
  *(_OWORD *)(a1 + 40) = xmmword_18E1F6F60;
  sub_18DFE2CC8(a1 + 32, 0.0);
  *(void *)(a1 + 120) = 0x300000003;
  *(void *)(a1 + 96) = &unk_1EDD18EE8;
  *(void *)(a1 + 128) = a1 + 136;
  *(_OWORD *)(a1 + 104) = xmmword_18E1F0010;
  sub_18DFE2CC8(a1 + 96, 0.0);
  *(void *)(a1 + 232) = 0x300000003;
  *(void *)(a1 + 208) = &unk_1EDD18EE8;
  *(void *)(a1 + 240) = a1 + 248;
  *(_OWORD *)(a1 + 216) = xmmword_18E1F0010;
  sub_18DFE2CC8(a1 + 208, 0.0);
  *(void *)(a1 + 344) = 0x300000003;
  *(void *)(a1 + 320) = &unk_1EDD18EE8;
  *(void *)(a1 + 352) = a1 + 360;
  *(_OWORD *)(a1 + 328) = xmmword_18E1F0010;
  sub_18DFE2CC8(a1 + 320, 0.0);
  *(unsigned char *)(a1 + 432) = 0;
  uint64_t v16 = 0x300000003;
  uint64_t v14 = &unk_1EDD18EE8;
  char v17 = v18;
  long long v15 = xmmword_18E1F0010;
  sub_18DFE2CC8((uint64_t)&v14, 0.0);
  sub_18DFE2F24(a1 + 96, (uint64_t)&v14);
  uint64_t v16 = 0x300000003;
  uint64_t v14 = &unk_1EDD18EE8;
  char v17 = v18;
  long long v15 = xmmword_18E1F0010;
  sub_18DFE2CC8((uint64_t)&v14, 0.0);
  sub_18DFE2F24(a1 + 208, (uint64_t)&v14);
  uint64_t v16 = 0x300000003;
  uint64_t v14 = &unk_1EDD18EE8;
  char v17 = v18;
  long long v15 = xmmword_18E1F0010;
  sub_18DFE2CC8((uint64_t)&v14, 0.0);
  sub_18DFE2F24(a1 + 320, (uint64_t)&v14);
  *(unsigned char *)(a1 + 432) = 0;
  uint64_t v21 = 0x100000003;
  uint64_t v19 = &unk_1EDD18D98;
  long long v20 = xmmword_18E1F6F60;
  int v22 = &v23;
  uint64_t v16 = 0x100000134;
  uint64_t v14 = &unk_1EDD18C48;
  long long v15 = xmmword_18E1F6FB0;
  char v17 = v18;
  uint64_t v11 = 0x100000003;
  uint64_t v9 = &unk_1EDD18D98;
  long long v10 = xmmword_18E1F6F60;
  BOOL v12 = &v13;
  sub_18DFE345C(a3, (uint64_t)&v19, (uint64_t)&v14, (uint64_t)&v9, "2");
  if ((v7 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0x3FF0000000000000;
    sub_18DFEB188(3, 1, (uint64_t)&v14);
    sub_18DFE2F24(v6, (uint64_t)&v14);
    __assert_rtn("CNRigidTransformation", "cnrigidtransformation.cpp", 95, "false && \"Error: attempted to construct CNRigidTransformation with invalid position vector.\"");
  }
  sub_18DFE2F24(v6, a3);
  if ((_OWORD *)a1 != a2)
  {
    *(_OWORD *)a1 = *a2;
    *(_OWORD *)(a1 + 16) = a2[1];
  }
  return a1;
}

void sub_18DFEBCB0(_Unwind_Exception *a1)
{
  void *v4 = &unk_1EDD17478;
  *double v3 = &unk_1EDD17478;
  *float64x2_t v2 = &unk_1EDD17478;
  *double v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

uint64_t cntransformation::CNRigidTransformation::CNRigidTransformation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0x3FF0000000000000;
  uint64_t v6 = a1 + 32;
  *(void *)(a1 + 56) = 0x100000003;
  *(void *)(a1 + 32) = &unk_1EDD18D98;
  *(void *)(a1 + 64) = a1 + 72;
  *(_OWORD *)(a1 + 40) = xmmword_18E1F6F60;
  sub_18DFE2CC8(a1 + 32, 0.0);
  *(void *)(a1 + 120) = 0x300000003;
  *(void *)(a1 + 96) = &unk_1EDD18EE8;
  *(void *)(a1 + 128) = a1 + 136;
  *(_OWORD *)(a1 + 104) = xmmword_18E1F0010;
  sub_18DFE2CC8(a1 + 96, 0.0);
  *(void *)(a1 + 232) = 0x300000003;
  *(void *)(a1 + 208) = &unk_1EDD18EE8;
  *(void *)(a1 + 240) = a1 + 248;
  *(_OWORD *)(a1 + 216) = xmmword_18E1F0010;
  sub_18DFE2CC8(a1 + 208, 0.0);
  *(void *)(a1 + 344) = 0x300000003;
  *(void *)(a1 + 320) = &unk_1EDD18EE8;
  *(void *)(a1 + 352) = a1 + 360;
  *(_OWORD *)(a1 + 328) = xmmword_18E1F0010;
  sub_18DFE2CC8(a1 + 320, 0.0);
  *(unsigned char *)(a1 + 432) = 0;
  if (!cntransformation::CNRigidTransformation::SetTransformationMatrix(a1, a2)
    || !cntransformation::CNRigidTransformation::SetCovarianceMatrix(a1, a3))
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0x3FF0000000000000;
    sub_18DFEB188(3, 1, (uint64_t)v8);
    sub_18DFE2F24(v6, (uint64_t)v8);
    sub_18DFEB238(3, 3, (uint64_t)v8);
    sub_18DFE2F24(a1 + 96, (uint64_t)v8);
    sub_18DFEB238(3, 3, (uint64_t)v8);
    sub_18DFE2F24(a1 + 208, (uint64_t)v8);
    sub_18DFEB238(3, 3, (uint64_t)v8);
    sub_18DFE2F24(a1 + 320, (uint64_t)v8);
    *(unsigned char *)(a1 + 432) = 0;
    __assert_rtn("CNRigidTransformation", "cnrigidtransformation.cpp", 140, "false && \"Error: attempted to construct CNRigidTransformation from invalid transformation or covariance matrix.\"");
  }
  return a1;
}

void sub_18DFEBF7C(_Unwind_Exception *a1)
{
  void *v4 = &unk_1EDD17478;
  *double v3 = &unk_1EDD17478;
  *float64x2_t v2 = &unk_1EDD17478;
  *double v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

BOOL cntransformation::CNRigidTransformation::SetCovarianceMatrix(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 8) != 6 || *(_DWORD *)(a2 + 12) != 6) {
    return 0;
  }
  BOOL v17 = 0;
  uint64_t v14 = 0x600000006;
  BOOL v12 = &unk_1EDD197B8;
  long long v13 = xmmword_18E1F8570;
  long long v15 = &v16;
  sub_18DFEEFE8(a2, (uint64_t)&v12, &v17);
  BOOL v12 = &unk_1EDD17478;
  BOOL v4 = v17;
  if (v17)
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EB403750, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_1EB403750))
    {
      uint64_t v8 = 0x300000001;
      uint64_t v6 = &unk_1EDD18258;
      uint64_t v9 = &v10;
      long long v7 = xmmword_18E1F8560;
      uint64_t v10 = 0x100000000;
      int v11 = 2;
      sub_18DFEC63C((uint64_t)&v6, (uint64_t)&unk_1EB403840);
      __cxa_atexit((void (*)(void *))sub_18DFE2E9C, &unk_1EB403840, &dword_18DEDB000);
      __cxa_guard_release(&qword_1EB403750);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EB403758, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_1EB403758))
    {
      uint64_t v8 = 0x300000001;
      uint64_t v6 = &unk_1EDD18258;
      uint64_t v9 = &v10;
      long long v7 = xmmword_18E1F8560;
      uint64_t v10 = 0x400000003;
      int v11 = 5;
      sub_18DFEC63C((uint64_t)&v6, (uint64_t)&unk_1EB403878);
      __cxa_atexit((void (*)(void *))sub_18DFE2E9C, &unk_1EB403878, &dword_18DEDB000);
      __cxa_guard_release(&qword_1EB403758);
    }
    sub_18DFECE30(a2, (uint64_t)&unk_1EB403840, (uint64_t)&unk_1EB403840, (uint64_t)&v6);
    sub_18DFE2F24(a1 + 96, (uint64_t)&v6);
    sub_18DFECE30(a2, (uint64_t)&unk_1EB403878, (uint64_t)&unk_1EB403878, (uint64_t)&v6);
    sub_18DFE2F24(a1 + 208, (uint64_t)&v6);
    sub_18DFECE30(a2, (uint64_t)&unk_1EB403840, (uint64_t)&unk_1EB403878, (uint64_t)&v6);
    sub_18DFE2F24(a1 + 320, (uint64_t)&v6);
    *(unsigned char *)(a1 + 432) = 1;
  }
  return v4;
}

void sub_18DFEC2C8(_Unwind_Exception *a1)
{
}

double cntransformation::CNRigidTransformation::MakeSymmetric(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(int *)(a1 + 20);
  double v3 = (float64_t *)(v1 + 8 * v2);
  v4.f64[0] = *v3;
  uint64_t v5 = 16 * v2;
  v4.f64[1] = *(float64_t *)(v1 + 16 * v2);
  __asm { FMOV            V1.2D, #0.5 }
  *(float64x2_t *)(v1 + 8) = vmulq_f64(vaddq_f64(*(float64x2_t *)(v1 + 8), v4), _Q1);
  LODWORD(v2) = (2 * v2) | 1;
  v3[2] = (v3[2] + *(double *)(v1 + 8 * (int)v2)) * 0.5;
  *double v3 = *(float64_t *)(v1 + 8);
  *(void *)(v1 + v5) = *(void *)(v1 + 16);
  double result = v3[2];
  *(double *)(v1 + 8 * (int)v2) = result;
  return result;
}

uint64_t cntransformation::CNRigidTransformation::TransformationMatrix@<X0>(cntransformation::CNRigidTransformation *this@<X0>, uint64_t a2@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EB403730, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EB403730))
  {
    uint64_t v9 = 0x300000001;
    long long v7 = &unk_1EDD18258;
    uint64_t v10 = &v11;
    long long v8 = xmmword_18E1F8560;
    uint64_t v11 = 0x100000000;
    int v12 = 2;
    sub_18DFEC63C((uint64_t)&v7, (uint64_t)&unk_1EB403760);
    __cxa_atexit((void (*)(void *))sub_18DFE2E9C, &unk_1EB403760, &dword_18DEDB000);
    __cxa_guard_release(&qword_1EB403730);
  }
  *(void *)(a2 + 24) = 0x400000004;
  *(void *)a2 = &unk_1EDD195A8;
  *(_OWORD *)(a2 + 8) = xmmword_18E1F6F70;
  *(void *)(a2 + 32) = a2 + 40;
  cnrotation::CNRotation::RotationMatrix(this, (uint64_t)&v13);
  sub_18DFEE864((uint64_t)&v7, a2, (uint64_t)&unk_1EB403760, (uint64_t)&unk_1EB403760);
  sub_18DFEC6E4((uint64_t)&v7, (uint64_t)&v13);
  uint64_t v15 = 0x100000001;
  *(void *)&long long v4 = 0x100000001;
  *((void *)&v4 + 1) = 0x100000001;
  long long v14 = v4;
  long long v13 = &unk_1EDD18078;
  uint64_t v16 = v17;
  v17[0] = 3;
  sub_18DFEEB44((uint64_t)&v7, a2, (uint64_t)&unk_1EB403760, (uint64_t)&v13);
  sub_18DFEC830((uint64_t)&v7, (uint64_t)this + 32);
  uint64_t v15 = 0x300000001;
  long long v13 = &unk_1EDD18228;
  uint64_t v16 = v17;
  long long v14 = xmmword_18E1F8560;
  sub_18DFE2CC8((uint64_t)&v13, 0.0);
  uint64_t v20 = 0x100000001;
  *(void *)&long long v5 = 0x100000001;
  *((void *)&v5 + 1) = 0x100000001;
  long long v19 = v5;
  long long v18 = &unk_1EDD18078;
  uint64_t v21 = &v22;
  int v22 = 3;
  sub_18DFEED18((uint64_t)&v7, a2, (uint64_t)&v18, (uint64_t)&unk_1EB403760);
  uint64_t result = sub_18DFEC97C((uint64_t)&v7, (uint64_t)&v13);
  *(void *)(*(void *)(a2 + 32) + 24 * *(int *)(a2 + 20) + 24) = 0x3FF0000000000000;
  return result;
}

void sub_18DFEC5E8(_Unwind_Exception *a1)
{
}

uint64_t sub_18DFEC63C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4 = *(_DWORD *)(a1 + 8);
  int v3 = *(_DWORD *)(a1 + 12);
  *(void *)(a2 + 24) = 0x100000003;
  *(void *)a2 = &unk_1EDD18DC8;
  *(_DWORD *)(a2 + 8) = v3;
  *(_DWORD *)(a2 + 12) = v4;
  *(_DWORD *)(a2 + 16) = v4 * v3;
  *(_DWORD *)(a2 + 20) = v3;
  *(void *)(a2 + 32) = a2 + 40;
  return sub_18DFEE808(a1, a2);
}

void sub_18DFEC6A4(_Unwind_Exception *a1)
{
  *uint64_t v1 = &unk_1EDD174A8;
  _Unwind_Resume(a1);
}

void *sub_18DFEC6C4(void *result)
{
  *uint64_t result = &unk_1EDD174A8;
  return result;
}

uint64_t sub_18DFEC6E4(uint64_t result, uint64_t a2)
{
  int v2 = *(_DWORD *)(result + 8);
  if (v2 != *(_DWORD *)(a2 + 8)) {
    __assert_rtn("operator=", "cnsubmatrix.h", 376, "this->num_rows_ == A.num_rows_");
  }
  uint64_t v3 = *(unsigned int *)(result + 12);
  if (v3 != *(_DWORD *)(a2 + 12)) {
    __assert_rtn("operator=", "cnsubmatrix.h", 377, "this->num_cols_ == A.num_cols_");
  }
  if (v3)
  {
    unsigned int v4 = 0;
    uint64_t v5 = 0;
    uint64_t v6 = *(void *)(a2 + 32);
    do
    {
      if (v2)
      {
        uint64_t v7 = *(void *)(result + 112);
        long long v8 = *(int **)(result + 152);
        int v9 = *(_DWORD *)(v7 + 20) * *(_DWORD *)(*(void *)(result + 208) + 4 * v5);
        uint64_t v10 = *(void *)(v7 + 32);
        uint64_t v11 = *(void *)(result + 32);
        int v12 = *(_DWORD *)(result + 20) * v5;
        unsigned int v13 = v4;
        int v14 = v2;
        do
        {
          uint64_t v15 = *(void *)(v6 + 8 * v13);
          int v16 = *v8++;
          *(void *)(v10 + 8 * (v16 + v9)) = v15;
          *(void *)(v11 + 8 * v12++) = v15;
          ++v13;
          --v14;
        }
        while (v14);
      }
      ++v5;
      v4 += v2;
    }
    while (v5 != v3);
  }
  return result;
}

void *sub_18DFEC7D0(void *result)
{
  result[22] = &unk_1EDD174A8;
  result[15] = &unk_1EDD174A8;
  *uint64_t result = &unk_1EDD17478;
  return result;
}

uint64_t sub_18DFEC830(uint64_t result, uint64_t a2)
{
  int v2 = *(_DWORD *)(result + 8);
  if (v2 != *(_DWORD *)(a2 + 8)) {
    __assert_rtn("operator=", "cnsubmatrix.h", 376, "this->num_rows_ == A.num_rows_");
  }
  uint64_t v3 = *(unsigned int *)(result + 12);
  if (v3 != *(_DWORD *)(a2 + 12)) {
    __assert_rtn("operator=", "cnsubmatrix.h", 377, "this->num_cols_ == A.num_cols_");
  }
  if (v3)
  {
    unsigned int v4 = 0;
    uint64_t v5 = 0;
    uint64_t v6 = *(void *)(a2 + 32);
    do
    {
      if (v2)
      {
        uint64_t v7 = *(void *)(result + 64);
        long long v8 = *(int **)(result + 104);
        int v9 = *(_DWORD *)(v7 + 20) * *(_DWORD *)(*(void *)(result + 160) + 4 * v5);
        uint64_t v10 = *(void *)(v7 + 32);
        uint64_t v11 = *(void *)(result + 32);
        int v12 = *(_DWORD *)(result + 20) * v5;
        unsigned int v13 = v4;
        int v14 = v2;
        do
        {
          uint64_t v15 = *(void *)(v6 + 8 * v13);
          int v16 = *v8++;
          *(void *)(v10 + 8 * (v16 + v9)) = v15;
          *(void *)(v11 + 8 * v12++) = v15;
          ++v13;
          --v14;
        }
        while (v14);
      }
      ++v5;
      v4 += v2;
    }
    while (v5 != v3);
  }
  return result;
}

void *sub_18DFEC91C(void *result)
{
  result[16] = &unk_1EDD174A8;
  result[9] = &unk_1EDD174A8;
  *uint64_t result = &unk_1EDD17478;
  return result;
}

uint64_t sub_18DFEC97C(uint64_t result, uint64_t a2)
{
  int v2 = *(_DWORD *)(result + 8);
  if (v2 != *(_DWORD *)(a2 + 8)) {
    __assert_rtn("operator=", "cnsubmatrix.h", 376, "this->num_rows_ == A.num_rows_");
  }
  uint64_t v3 = *(unsigned int *)(result + 12);
  if (v3 != *(_DWORD *)(a2 + 12)) {
    __assert_rtn("operator=", "cnsubmatrix.h", 377, "this->num_cols_ == A.num_cols_");
  }
  if (v3)
  {
    unsigned int v4 = 0;
    uint64_t v5 = 0;
    uint64_t v6 = *(void *)(a2 + 32);
    do
    {
      if (v2)
      {
        uint64_t v7 = *(void *)(result + 64);
        long long v8 = *(int **)(result + 104);
        int v9 = *(_DWORD *)(v7 + 20) * *(_DWORD *)(*(void *)(result + 152) + 4 * v5);
        uint64_t v10 = *(void *)(v7 + 32);
        uint64_t v11 = *(void *)(result + 32);
        int v12 = *(_DWORD *)(result + 20) * v5;
        unsigned int v13 = v4;
        int v14 = v2;
        do
        {
          uint64_t v15 = *(void *)(v6 + 8 * v13);
          int v16 = *v8++;
          *(void *)(v10 + 8 * (v16 + v9)) = v15;
          *(void *)(v11 + 8 * v12++) = v15;
          ++v13;
          --v14;
        }
        while (v14);
      }
      ++v5;
      v4 += v2;
    }
    while (v5 != v3);
  }
  return result;
}

void *sub_18DFECA68(void *result)
{
  result[15] = &unk_1EDD174A8;
  result[9] = &unk_1EDD174A8;
  *uint64_t result = &unk_1EDD17478;
  return result;
}

void *sub_18DFECAC8(void *result)
{
  *uint64_t result = &unk_1EDD17478;
  return result;
}

uint64_t cntransformation::CNRigidTransformation::CovarianceMatrix@<X0>(cntransformation::CNRigidTransformation *this@<X0>, uint64_t a2@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EB403738, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EB403738))
  {
    uint64_t v17 = 0x300000001;
    uint64_t v15 = &unk_1EDD18258;
    long long v18 = &v19;
    long long v16 = xmmword_18E1F8560;
    uint64_t v19 = 0x100000000;
    int v20 = 2;
    sub_18DFEC63C((uint64_t)&v15, (uint64_t)&unk_1EB403798);
    __cxa_atexit((void (*)(void *))sub_18DFE2E9C, &unk_1EB403798, &dword_18DEDB000);
    __cxa_guard_release(&qword_1EB403738);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EB403740, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EB403740))
  {
    uint64_t v17 = 0x300000001;
    uint64_t v15 = &unk_1EDD18258;
    long long v18 = &v19;
    long long v16 = xmmword_18E1F8560;
    uint64_t v19 = 0x400000003;
    int v20 = 5;
    sub_18DFEC63C((uint64_t)&v15, (uint64_t)&unk_1EB4037D0);
    __cxa_atexit((void (*)(void *))sub_18DFE2E9C, &unk_1EB4037D0, &dword_18DEDB000);
    __cxa_guard_release(&qword_1EB403740);
  }
  *(void *)(a2 + 24) = 0x600000006;
  *(void *)a2 = &unk_1EDD197B8;
  *(_OWORD *)(a2 + 8) = xmmword_18E1F8570;
  *(void *)(a2 + 32) = a2 + 40;
  sub_18DFEE864((uint64_t)&v15, a2, (uint64_t)&unk_1EB403798, (uint64_t)&unk_1EB403798);
  sub_18DFEC6E4((uint64_t)&v15, (uint64_t)this + 96);
  int v4 = *((_DWORD *)this + 83);
  int v5 = *((_DWORD *)this + 82);
  uint64_t v12 = 0x300000003;
  uint64_t v7 = &unk_1EDD18EE8;
  int v8 = v4;
  int v9 = v5;
  int v10 = v5 * v4;
  int v11 = v4;
  unsigned int v13 = &v14;
  sub_18DFE2C64((uint64_t)this + 320, (uint64_t)&v7);
  sub_18DFEE864((uint64_t)&v15, a2, (uint64_t)&unk_1EB4037D0, (uint64_t)&unk_1EB403798);
  sub_18DFEC6E4((uint64_t)&v15, (uint64_t)&v7);
  sub_18DFEE864((uint64_t)&v15, a2, (uint64_t)&unk_1EB403798, (uint64_t)&unk_1EB4037D0);
  sub_18DFEC6E4((uint64_t)&v15, (uint64_t)this + 320);
  sub_18DFEE864((uint64_t)&v15, a2, (uint64_t)&unk_1EB4037D0, (uint64_t)&unk_1EB4037D0);
  return sub_18DFEC6E4((uint64_t)&v15, (uint64_t)this + 208);
}

void sub_18DFECDA4(_Unwind_Exception *a1)
{
}

void *sub_18DFECE10(void *result)
{
  *uint64_t result = &unk_1EDD17478;
  return result;
}

uint64_t sub_18DFECE30@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v4 = *(_DWORD *)(a2 + 16);
  int v5 = *(_DWORD *)(a3 + 16);
  *(void *)(a4 + 24) = 0x300000003;
  *(void *)a4 = &unk_1EDD18EE8;
  *(_DWORD *)(a4 + 8) = v4;
  *(_DWORD *)(a4 + 12) = v5;
  *(_DWORD *)(a4 + 16) = v5 * v4;
  *(_DWORD *)(a4 + 20) = v4;
  uint64_t v6 = a4 + 40;
  *(void *)(a4 + 32) = a4 + 40;
  if (v5)
  {
    int v7 = 0;
    int v8 = 0;
    uint64_t v9 = *(void *)(a2 + 32);
    uint64_t v10 = *(void *)(a3 + 32);
    do
    {
      if (v4)
      {
        int v11 = 0;
        int v12 = *(_DWORD *)(result + 20) * *(_DWORD *)(v10 + 4 * v8);
        uint64_t v13 = *(void *)(result + 32);
        do
        {
          *(void *)(v6 + 8 * (v7 + v11)) = *(void *)(v13
                                                                       + 8
                                                                       * (*(_DWORD *)(v9 + 4 * v11) + v12));
          ++v11;
        }
        while (v4 != v11);
      }
      ++v8;
      v7 += v4;
    }
    while (v8 != v5);
  }
  return result;
}

void sub_18DFECED0(uint64_t a1)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0x3FF0000000000000;
  uint64_t v4 = 0x100000003;
  int v2 = &unk_1EDD18D98;
  int v5 = v6;
  long long v3 = xmmword_18E1F6F60;
  sub_18DFE2CC8((uint64_t)&v2, 0.0);
  sub_18DFE2F24(a1 + 32, (uint64_t)&v2);
  uint64_t v4 = 0x300000003;
  int v2 = &unk_1EDD18EE8;
  int v5 = v6;
  long long v3 = xmmword_18E1F0010;
  sub_18DFE2CC8((uint64_t)&v2, 0.0);
  sub_18DFE2F24(a1 + 96, (uint64_t)&v2);
  uint64_t v4 = 0x300000003;
  int v2 = &unk_1EDD18EE8;
  int v5 = v6;
  long long v3 = xmmword_18E1F0010;
  sub_18DFE2CC8((uint64_t)&v2, 0.0);
  sub_18DFE2F24(a1 + 208, (uint64_t)&v2);
  uint64_t v4 = 0x300000003;
  int v2 = &unk_1EDD18EE8;
  int v5 = v6;
  long long v3 = xmmword_18E1F0010;
  sub_18DFE2CC8((uint64_t)&v2, 0.0);
  sub_18DFE2F24(a1 + 320, (uint64_t)&v2);
  *(unsigned char *)(a1 + 432) = 0;
}

BOOL cntransformation::CNRigidTransformation::SetPrr(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 8) != 3 || *(_DWORD *)(a2 + 12) != 3) {
    return 0;
  }
  uint64_t v5 = a1 + 96;
  sub_18DFE2F24(a1 + 96, a2);
  cntransformation::CNRigidTransformation::MakeSymmetric(v5);
  BOOL v17 = 0;
  uint64_t v14 = 0x300000003;
  int v12 = &unk_1EDD18EE8;
  long long v13 = xmmword_18E1F0010;
  uint64_t v15 = &v16;
  sub_18DFEEFE8(v5, (uint64_t)&v12, &v17);
  int v12 = &unk_1EDD17478;
  BOOL v3 = v17;
  if (v17)
  {
    *(unsigned char *)(a1 + 432) = 1;
  }
  else
  {
    uint64_t v9 = 0x300000003;
    int v7 = &unk_1EDD18EE8;
    uint64_t v10 = &v11;
    long long v8 = xmmword_18E1F0010;
    sub_18DFE2CC8((uint64_t)&v7, 0.0);
    sub_18DFE2F24(v5, (uint64_t)&v7);
  }
  return v3;
}

BOOL cntransformation::CNRigidTransformation::SetPpp(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 8) != 3 || *(_DWORD *)(a2 + 12) != 3) {
    return 0;
  }
  uint64_t v5 = a1 + 208;
  sub_18DFE2F24(a1 + 208, a2);
  cntransformation::CNRigidTransformation::MakeSymmetric(v5);
  BOOL v17 = 0;
  uint64_t v14 = 0x300000003;
  int v12 = &unk_1EDD18EE8;
  long long v13 = xmmword_18E1F0010;
  uint64_t v15 = &v16;
  sub_18DFEEFE8(v5, (uint64_t)&v12, &v17);
  int v12 = &unk_1EDD17478;
  BOOL v3 = v17;
  if (v17)
  {
    *(unsigned char *)(a1 + 432) = 1;
  }
  else
  {
    uint64_t v9 = 0x300000003;
    int v7 = &unk_1EDD18EE8;
    uint64_t v10 = &v11;
    long long v8 = xmmword_18E1F0010;
    sub_18DFE2CC8((uint64_t)&v7, 0.0);
    sub_18DFE2F24(v5, (uint64_t)&v7);
  }
  return v3;
}

uint64_t cntransformation::CNRigidTransformation::SetPrp(uint64_t a1, uint64_t a2)
{
  BOOL v2 = *(_DWORD *)(a2 + 8) == 3 && *(_DWORD *)(a2 + 12) == 3;
  uint64_t v3 = v2;
  if (v2)
  {
    sub_18DFE2F24(a1 + 320, a2);
    *(unsigned char *)(a1 + 432) = 1;
  }
  return v3;
}

void cntransformation::Cat(cntransformation *this@<X0>, const cntransformation::CNRigidTransformation *a2@<X1>, uint64_t a3@<X8>)
{
  cntransformation::CNRigidTransformation::CNRigidTransformation((cntransformation::CNRigidTransformation *)a3);
  cnrotation::Cat((double *)this, a2, (double *)v122);
  if (v122 != (unsigned char *)a3)
  {
    long long v7 = *(_OWORD *)&v122[16];
    *(_OWORD *)a3 = *(_OWORD *)v122;
    *(_OWORD *)(a3 + 16) = v7;
  }
  sub_18DFEDF6C(this, (uint64_t)a2 + 32, (uint64_t)v135);
  *(void *)&v122[24] = 0x300000003;
  *(_OWORD *)&v122[8] = xmmword_18E1F0010;
  *(void *)int v122 = &unk_1EDD18EE8;
  int v123 = v124;
  sub_18DFEF1F4((uint64_t)v135, (uint64_t)this + 32, (uint64_t)v122);
  sub_18DFEF290((uint64_t)&v125, (uint64_t)v122);
  sub_18DFE2F24(a3 + 32, (uint64_t)&v125);
  if (*((unsigned __int8 *)a2 + 432) | *((unsigned __int8 *)this + 432))
  {
    cnrotation::CNRotation::drdq((cnrotation::CNRotation *)a3, (uint64_t)v135);
    cnrotation::CNRotation::dqaqdqa(a2, (uint64_t)v122);
    uint64_t v127 = 0x400000003;
    long long v126 = xmmword_18E1F6FA0;
    v125 = &unk_1EDD18F48;
    v128 = v129;
    sub_18DFE2B44((uint64_t)v135, (uint64_t)v122, (uint64_t)&v125);
    cnrotation::CNRotation::dqdr(this, (uint64_t)&v117);
    uint64_t v132 = 0x300000003;
    long long v131 = xmmword_18E1F0010;
    int v130 = &unk_1EDD18EE8;
    v133 = &v134;
    sub_18DFE2B44((uint64_t)&v125, (uint64_t)&v117, (uint64_t)&v130);
    cnrotation::CNRotation::dRotateVectordr((double *)this, (uint64_t)a2 + 32, (uint64_t)v112);
    int v8 = v114;
    int v9 = v113;
    uint64_t v109 = 0x300000003;
    v104 = &unk_1EDD18EE8;
    int v110 = v111;
    int v105 = v114;
    int v106 = v113;
    int v107 = v113 * v114;
    int v108 = v114;
    if (v114)
    {
      int v10 = 0;
      int v11 = 0;
      int v12 = v115;
      uint64_t v13 = v116;
      do
      {
        int v14 = v10;
        int v15 = v11;
        for (int i = v9; i; --i)
        {
          v111[v15] = *(void *)(v13 + 8 * v14);
          v15 += v8;
          ++v14;
        }
        ++v11;
        v10 += v12;
      }
      while (v11 != v8);
    }
    uint64_t v101 = 0x300000003;
    long long v100 = xmmword_18E1F0010;
    int v99 = &unk_1EDD18EE8;
    int v102 = &v103;
    sub_18DFE2B44((uint64_t)this + 96, (uint64_t)&v104, (uint64_t)&v99);
    uint64_t v96 = 0x300000003;
    long long v95 = xmmword_18E1F0010;
    int v94 = &unk_1EDD18EE8;
    unsigned int v97 = &v98;
    sub_18DFE2B44((uint64_t)v112, (uint64_t)this + 320, (uint64_t)&v94);
    *(void *)&v122[24] = 0x300000003;
    *(_OWORD *)&v122[8] = xmmword_18E1F0010;
    *(void *)int v122 = &unk_1EDD18EE8;
    int v123 = v124;
    sub_18DFE2B44((uint64_t)&v130, (uint64_t)this + 96, (uint64_t)v122);
    int v17 = DWORD1(v131);
    int v18 = v131;
    uint64_t v127 = 0x300000003;
    v125 = &unk_1EDD18EE8;
    v128 = v129;
    *(void *)&long long v126 = __PAIR64__(v131, DWORD1(v131));
    DWORD2(v126) = v131 * DWORD1(v131);
    HIDWORD(v126) = DWORD1(v131);
    if (DWORD1(v131))
    {
      int v19 = 0;
      int v20 = 0;
      int v21 = HIDWORD(v131);
      int v22 = v133;
      do
      {
        int v23 = v19;
        int v24 = v20;
        for (int j = v18; j; --j)
        {
          v129[v24] = v22[v23];
          v24 += v17;
          ++v23;
        }
        ++v20;
        v19 += v21;
      }
      while (v20 != v17);
    }
    uint64_t v91 = 0x300000003;
    long long v90 = xmmword_18E1F0010;
    long double v89 = &unk_1EDD18EE8;
    v92 = &v93;
    sub_18DFE2B44((uint64_t)v122, (uint64_t)&v125, (uint64_t)&v89);
    uint64_t v119 = 0x300000003;
    long long v118 = xmmword_18E1F0010;
    v117 = &unk_1EDD18EE8;
    uint64_t v120 = v121;
    sub_18DFE2B44((uint64_t)v112, (uint64_t)&v99, (uint64_t)&v117);
    uint64_t v127 = 0x300000003;
    long long v126 = xmmword_18E1F0010;
    v125 = &unk_1EDD18EE8;
    v128 = v129;
    sub_18DFEF1F4((uint64_t)&v117, (uint64_t)&v94, (uint64_t)&v125);
    int v26 = DWORD1(v95);
    int v27 = v95;
    uint64_t v81 = 0x300000003;
    double v79 = &unk_1EDD18EE8;
    double v82 = v83;
    *(void *)&long long v80 = __PAIR64__(v95, DWORD1(v95));
    DWORD2(v80) = v95 * DWORD1(v95);
    HIDWORD(v80) = DWORD1(v95);
    if (DWORD1(v95))
    {
      int v28 = 0;
      int v29 = 0;
      int v30 = HIDWORD(v95);
      double v31 = v97;
      do
      {
        int v32 = v28;
        int v33 = v29;
        for (int k = v27; k; --k)
        {
          v83[v33] = v31[v32];
          v33 += v26;
          ++v32;
        }
        ++v29;
        v28 += v30;
      }
      while (v29 != v26);
    }
    *(void *)&v122[24] = 0x300000003;
    *(_OWORD *)&v122[8] = xmmword_18E1F0010;
    *(void *)int v122 = &unk_1EDD18EE8;
    int v123 = v124;
    sub_18DFEF1F4((uint64_t)&v125, (uint64_t)&v79, (uint64_t)v122);
    uint64_t v86 = 0x300000003;
    long long v85 = xmmword_18E1F0010;
    double v84 = &unk_1EDD18EE8;
    unsigned __int8 v87 = &v88;
    sub_18DFEF1F4((uint64_t)v122, (uint64_t)this + 208, (uint64_t)&v84);
    *(void *)&v122[24] = 0x300000003;
    *(_OWORD *)&v122[8] = xmmword_18E1F0010;
    *(void *)int v122 = &unk_1EDD18EE8;
    int v123 = v124;
    sub_18DFE2B44((uint64_t)&v130, (uint64_t)&v99, (uint64_t)v122);
    uint64_t v127 = 0x300000003;
    long long v126 = xmmword_18E1F0010;
    v125 = &unk_1EDD18EE8;
    v128 = v129;
    sub_18DFE2B44((uint64_t)&v130, (uint64_t)this + 320, (uint64_t)&v125);
    uint64_t v81 = 0x300000003;
    long long v80 = xmmword_18E1F0010;
    double v79 = &unk_1EDD18EE8;
    double v82 = v83;
    sub_18DFEF1F4((uint64_t)v122, (uint64_t)&v125, (uint64_t)&v79);
    cnrotation::CNRotation::RotationMatrix(this, (uint64_t)v74);
    int v35 = v76;
    int v36 = v75;
    uint64_t v71 = 0x300000003;
    double v66 = &unk_1EDD18EE8;
    double v72 = v73;
    int v67 = v76;
    int v68 = v75;
    int v69 = v75 * v76;
    int v70 = v76;
    if (v76)
    {
      int v37 = 0;
      int v38 = 0;
      int v39 = v77;
      uint64_t v40 = v78;
      do
      {
        int v41 = v37;
        int v42 = v38;
        for (int m = v36; m; --m)
        {
          v73[v42] = *(void *)(v40 + 8 * v41);
          v42 += v35;
          ++v41;
        }
        ++v38;
        v37 += v39;
      }
      while (v38 != v35);
    }
    cnrotation::CNRotation::dqqbdqb(this, (uint64_t)v122);
    uint64_t v127 = 0x400000003;
    long long v126 = xmmword_18E1F6FA0;
    v125 = &unk_1EDD18F48;
    v128 = v129;
    sub_18DFE2B44((uint64_t)v135, (uint64_t)v122, (uint64_t)&v125);
    cnrotation::CNRotation::dqdr(a2, (uint64_t)&v117);
    uint64_t v63 = 0x300000003;
    double v61 = &unk_1EDD18EE8;
    long long v62 = xmmword_18E1F0010;
    double v64 = &v65;
    sub_18DFE2B44((uint64_t)&v125, (uint64_t)&v117, (uint64_t)&v61);
    uint64_t v119 = 0x300000003;
    long long v118 = xmmword_18E1F0010;
    v117 = &unk_1EDD18EE8;
    uint64_t v120 = v121;
    sub_18DFE2B44((uint64_t)&v61, (uint64_t)a2 + 96, (uint64_t)&v117);
    int v45 = v62;
    int v44 = DWORD1(v62);
    uint64_t v58 = 0x300000003;
    double v53 = &unk_1EDD18EE8;
    double v59 = v60;
    int v54 = DWORD1(v62);
    int v55 = v62;
    int v56 = v62 * DWORD1(v62);
    int v57 = DWORD1(v62);
    if (DWORD1(v62))
    {
      int v46 = 0;
      int v47 = 0;
      int v48 = HIDWORD(v62);
      double v49 = v64;
      do
      {
        int v50 = v46;
        int v51 = v47;
        for (int n = v45; n; --n)
        {
          v60[v51] = v49[v50];
          v51 += v44;
          ++v50;
        }
        ++v47;
        v46 += v48;
      }
      while (v47 != v44);
    }
    uint64_t v127 = 0x300000003;
    long long v126 = xmmword_18E1F0010;
    v125 = &unk_1EDD18EE8;
    v128 = v129;
    sub_18DFE2B44((uint64_t)&v117, (uint64_t)&v53, (uint64_t)&v125);
    *(void *)&v122[24] = 0x300000003;
    *(_OWORD *)&v122[8] = xmmword_18E1F0010;
    *(void *)int v122 = &unk_1EDD18EE8;
    int v123 = v124;
    sub_18DFEF1F4((uint64_t)&v89, (uint64_t)&v125, (uint64_t)v122);
    sub_18DFE2F24((uint64_t)&v89, (uint64_t)v122);
    uint64_t v119 = 0x300000003;
    long long v118 = xmmword_18E1F0010;
    v117 = &unk_1EDD18EE8;
    uint64_t v120 = v121;
    sub_18DFE2B44((uint64_t)v74, (uint64_t)a2 + 208, (uint64_t)&v117);
    uint64_t v127 = 0x300000003;
    long long v126 = xmmword_18E1F0010;
    v125 = &unk_1EDD18EE8;
    v128 = v129;
    sub_18DFE2B44((uint64_t)&v117, (uint64_t)&v66, (uint64_t)&v125);
    *(void *)&v122[24] = 0x300000003;
    *(_OWORD *)&v122[8] = xmmword_18E1F0010;
    *(void *)int v122 = &unk_1EDD18EE8;
    int v123 = v124;
    sub_18DFEF1F4((uint64_t)&v84, (uint64_t)&v125, (uint64_t)v122);
    sub_18DFE2F24((uint64_t)&v84, (uint64_t)v122);
    uint64_t v119 = 0x300000003;
    long long v118 = xmmword_18E1F0010;
    v117 = &unk_1EDD18EE8;
    uint64_t v120 = v121;
    sub_18DFE2B44((uint64_t)&v61, (uint64_t)a2 + 320, (uint64_t)&v117);
    uint64_t v127 = 0x300000003;
    long long v126 = xmmword_18E1F0010;
    v125 = &unk_1EDD18EE8;
    v128 = v129;
    sub_18DFE2B44((uint64_t)&v117, (uint64_t)&v66, (uint64_t)&v125);
    *(void *)&v122[24] = 0x300000003;
    *(_OWORD *)&v122[8] = xmmword_18E1F0010;
    *(void *)int v122 = &unk_1EDD18EE8;
    int v123 = v124;
    sub_18DFEF1F4((uint64_t)&v79, (uint64_t)&v125, (uint64_t)v122);
    sub_18DFE2F24((uint64_t)&v79, (uint64_t)v122);
    cntransformation::CNRigidTransformation::SetPrr(a3, (uint64_t)&v89);
    cntransformation::CNRigidTransformation::SetPpp(a3, (uint64_t)&v84);
    if ((void)v80 == 0x300000003)
    {
      sub_18DFE2F24(a3 + 320, (uint64_t)&v79);
      *(unsigned char *)(a3 + 432) = 1;
    }
  }
}

void sub_18DFEDE6C(_Unwind_Exception *a1)
{
  v1[40] = &unk_1EDD17478;
  v1[26] = &unk_1EDD17478;
  char v1[12] = &unk_1EDD17478;
  char v1[4] = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

void sub_18DFEDF6C(cnrotation::CNRotation *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v5 = *(_DWORD *)(a2 + 8);
  int v6 = *(_DWORD *)(a2 + 12);
  if (v5 == 3 && v6 == 1)
  {
    cnrotation::CNRotation::RotationMatrix(a1, (uint64_t)&v25);
    uint64_t v22 = 0x100000003;
    int v20 = &unk_1EDD18D98;
    long long v21 = xmmword_18E1F6F60;
    int v23 = &v24;
    sub_18DFE2B44((uint64_t)&v25, a2, (uint64_t)&v20);
    sub_18DFEF108(a3, (uint64_t)&v20);
  }
  else
  {
    if (v5 != 1 || v6 != 3) {
      __assert_rtn("RotateCoordinateFrame", "cnrotation.h", 275, "false && \"Error: CNRotation::RotateCoordinateFrame called with invalid vector.\"");
    }
    cnrotation::CNRotation::RotationMatrix(a1, (uint64_t)&v20);
    int v10 = *(_DWORD *)(a2 + 8);
    int v9 = *(_DWORD *)(a2 + 12);
    uint64_t v17 = 0x300000001;
    int v12 = &unk_1EDD18228;
    int v13 = v9;
    int v14 = v10;
    int v15 = v10 * v9;
    int v16 = v9;
    int v18 = &v19;
    sub_18DFE2C64(a2, (uint64_t)&v12);
    uint64_t v27 = 0x300000003;
    uint64_t v25 = &unk_1EDD18EE8;
    long long v26 = xmmword_18E1F0010;
    int v28 = &v29;
    sub_18DFE2B44((uint64_t)&v20, (uint64_t)&v12, (uint64_t)&v25);
    uint64_t v11 = v26;
    *(void *)(a3 + 24) = 0x300000003;
    *(void *)a3 = &unk_1EDD18EE8;
    *(_DWORD *)(a3 + 8) = HIDWORD(v11);
    *(_DWORD *)(a3 + 12) = v11;
    *(_DWORD *)(a3 + 16) = v11 * HIDWORD(v11);
    *(_DWORD *)(a3 + 20) = HIDWORD(v11);
    *(void *)(a3 + 32) = a3 + 40;
    sub_18DFE2C64((uint64_t)&v25, a3);
  }
}

void sub_18DFEE13C(_Unwind_Exception *a1)
{
  *uint64_t v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

void cntransformation::Inv(float64x2_t *this@<X0>, uint64_t a2@<X8>)
{
  cntransformation::CNRigidTransformation::CNRigidTransformation((cntransformation::CNRigidTransformation *)a2);
  cnrotation::Inv(this, v97);
  if (v97 != (float64x2_t *)a2)
  {
    float64x2_t v5 = v97[1];
    *(float64x2_t *)a2 = v97[0];
    *(float64x2_t *)(a2 + 16) = v5;
  }
  sub_18DFEDF6C((cnrotation::CNRotation *)v97, (uint64_t)&this[2], (uint64_t)v91);
  uint64_t v94 = 0x300000003;
  v92 = &unk_1EDD18EE8;
  long long v93 = xmmword_18E1F0010;
  long long v95 = &v96;
  sub_18DFEF380((uint64_t)v91, (uint64_t)&v92);
  sub_18DFEF290((uint64_t)v86, (uint64_t)&v92);
  sub_18DFE2F24(a2 + 32, (uint64_t)v86);
  if (LOBYTE(this[27].f64[0]))
  {
    cnrotation::CNRotation::RotationMatrix((cnrotation::CNRotation *)this, (uint64_t)&v92);
    cnrotation::CNRotation::RotationMatrix((cnrotation::CNRotation *)a2, (uint64_t)v91);
    cnrotation::CNRotation::dRotateVectordr((double *)a2, (uint64_t)&this[2], (uint64_t)v86);
    int v6 = v88;
    int v7 = v87;
    uint64_t v83 = 0x300000003;
    uint64_t v78 = &unk_1EDD18EE8;
    double v84 = v85;
    int v79 = v88;
    int v80 = v87;
    int v81 = v87 * v88;
    int v82 = v88;
    if (v88)
    {
      int v8 = 0;
      int v9 = 0;
      int v10 = v89;
      uint64_t v11 = v90;
      do
      {
        int v12 = v8;
        int v13 = v9;
        for (int i = v7; i; --i)
        {
          v85[v13] = *(void *)(v11 + 8 * v12);
          v13 += v6;
          ++v12;
        }
        ++v9;
        v8 += v10;
      }
      while (v9 != v6);
    }
    uint64_t v75 = 0x300000003;
    double v73 = &unk_1EDD18EE8;
    long long v74 = xmmword_18E1F0010;
    int v76 = &v77;
    sub_18DFE2B44((uint64_t)&this[6], (uint64_t)&v78, (uint64_t)&v73);
    uint64_t v70 = 0x300000003;
    long long v69 = xmmword_18E1F0010;
    int v68 = &unk_1EDD18EE8;
    uint64_t v71 = &v72;
    sub_18DFE2B44((uint64_t)&this[20], (uint64_t)&v92, (uint64_t)&v68);
    uint64_t v65 = 0x300000003;
    long long v64 = xmmword_18E1F0010;
    uint64_t v63 = &unk_1EDD18EE8;
    double v66 = &v67;
    sub_18DFE2B44((uint64_t)v86, (uint64_t)&v68, (uint64_t)&v63);
    cntransformation::CNRigidTransformation::SetPrr(a2, (uint64_t)&this[6]);
    uint64_t v45 = 0x300000003;
    long long v44 = xmmword_18E1F0010;
    double v43 = &unk_1EDD18EE8;
    int v46 = &v47;
    sub_18DFE2B44((uint64_t)v86, (uint64_t)&v73, (uint64_t)&v43);
    int v15 = this + 13;
    uint64_t v50 = 0x300000003;
    long long v49 = xmmword_18E1F0010;
    int v48 = &unk_1EDD18EE8;
    int v51 = &v52;
    sub_18DFE2AA8((uint64_t)&v43, (uint64_t)&v63, (uint64_t)&v48);
    int v16 = DWORD1(v64);
    int v17 = v64;
    uint64_t v40 = 0x300000003;
    int v35 = &unk_1EDD18EE8;
    int v41 = v42;
    int v36 = DWORD1(v64);
    int v37 = v64;
    int v38 = v64 * DWORD1(v64);
    int v39 = DWORD1(v64);
    if (DWORD1(v64))
    {
      int v18 = 0;
      int v19 = 0;
      int v20 = HIDWORD(v64);
      long long v21 = v66;
      do
      {
        int v22 = v18;
        int v23 = v19;
        for (int j = v17; j; --j)
        {
          v42[v23] = v21[v22];
          v23 += v16;
          ++v22;
        }
        ++v19;
        v18 += v20;
      }
      while (v19 != v16);
    }
    uint64_t v55 = 0x300000003;
    long long v54 = xmmword_18E1F0010;
    double v53 = &unk_1EDD18EE8;
    int v56 = v57;
    sub_18DFE2AA8((uint64_t)&v48, (uint64_t)&v35, (uint64_t)&v53);
    uint64_t v27 = 0x300000003;
    uint64_t v25 = &unk_1EDD18EE8;
    long long v26 = xmmword_18E1F0010;
    int v28 = &v29;
    sub_18DFE2B44((uint64_t)v91, (uint64_t)v15, (uint64_t)&v25);
    uint64_t v32 = 0x300000003;
    int v30 = &unk_1EDD18EE8;
    long long v31 = xmmword_18E1F0010;
    int v33 = &v34;
    sub_18DFE2B44((uint64_t)&v25, (uint64_t)&v92, (uint64_t)&v30);
    uint64_t v60 = 0x300000003;
    long long v59 = xmmword_18E1F0010;
    uint64_t v58 = &unk_1EDD18EE8;
    double v61 = v62;
    sub_18DFEF1F4((uint64_t)&v53, (uint64_t)&v30, (uint64_t)&v58);
    cntransformation::CNRigidTransformation::SetPpp(a2, (uint64_t)&v58);
    uint64_t v55 = 0x300000003;
    long long v54 = xmmword_18E1F0010;
    double v53 = &unk_1EDD18EE8;
    int v56 = v57;
    sub_18DFEF380((uint64_t)&v73, (uint64_t)&v53);
    uint64_t v60 = 0x300000003;
    long long v59 = xmmword_18E1F0010;
    uint64_t v58 = &unk_1EDD18EE8;
    double v61 = v62;
    sub_18DFEF1F4((uint64_t)&v53, (uint64_t)&v68, (uint64_t)&v58);
    if ((void)v59 == 0x300000003)
    {
      sub_18DFE2F24(a2 + 320, (uint64_t)&v58);
      *(unsigned char *)(a2 + 432) = 1;
    }
  }
}

void sub_18DFEE6E8(_Unwind_Exception *a1)
{
  v1[40] = &unk_1EDD17478;
  v1[26] = &unk_1EDD17478;
  char v1[12] = &unk_1EDD17478;
  char v1[4] = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

void sub_18DFEE7A8(void *a1)
{
  *a1 = &unk_1EDD174A8;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18DFEE7D8(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18DFEE7E4(uint64_t a1)
{
  sub_18DFE2870(a1, v1);
}

uint64_t sub_18DFEE808(uint64_t result, uint64_t a2)
{
  int v3 = *(_DWORD *)(result + 8);
  int v2 = *(_DWORD *)(result + 12);
  *(_DWORD *)(a2 + 8) = v2;
  *(_DWORD *)(a2 + 12) = v3;
  *(_DWORD *)(a2 + 16) = v3 * v2;
  *(_DWORD *)(a2 + 20) = v2;
  if (v2)
  {
    int v4 = 0;
    uint64_t v5 = *(void *)(result + 32);
    uint64_t v6 = *(void *)(a2 + 32);
    do
    {
      if (v3)
      {
        for (int i = 0; i != v3; ++i)
          *(_DWORD *)(v6 + 4 * (v4 + *(_DWORD *)(a2 + 20) * i)) = *(_DWORD *)(v5
                                                                              + 4
                                                                              * (i + v4 * *(_DWORD *)(result + 20)));
      }
      ++v4;
    }
    while (v4 != v2);
  }
  return result;
}

uint64_t sub_18DFEE864(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(a1 + 24) = 0x300000003;
  *(_OWORD *)(a1 + 8) = xmmword_18E1F0010;
  *(void *)(a1 + 32) = a1 + 40;
  *(void *)a1 = &unk_1EDD16668;
  *(void *)(a1 + 112) = a2;
  *(void *)(a1 + 144) = 0x100000003;
  *(void *)(a1 + 120) = &unk_1EDD18DC8;
  *(_OWORD *)(a1 + 128) = xmmword_18E1F6F60;
  *(void *)(a1 + 152) = a1 + 160;
  *(void *)(a1 + 200) = 0x100000003;
  *(void *)(a1 + 176) = &unk_1EDD18DC8;
  *(_OWORD *)(a1 + 184) = xmmword_18E1F6F60;
  *(void *)(a1 + 208) = a1 + 216;
  sub_18DFEEA3C(a1 + 120, a3);
  sub_18DFEEA3C(a1 + 176, a4);
  uint64_t v7 = *(unsigned int *)(a1 + 136);
  uint64_t v8 = *(unsigned int *)(a1 + 192);
  *(_DWORD *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 12) = v8;
  *(_DWORD *)(a1 + 16) = v8 * v7;
  *(_DWORD *)(a1 + 20) = v7;
  if (v8)
  {
    unsigned int v9 = 0;
    uint64_t v10 = 0;
    int v11 = *(_DWORD *)(a2 + 20);
    uint64_t v12 = *(void *)(a2 + 32);
    do
    {
      if (v7)
      {
        int v13 = *(int **)(a1 + 152);
        int v14 = *(_DWORD *)(*(void *)(a1 + 208) + 4 * v10) * v11;
        uint64_t v15 = *(void *)(a1 + 32);
        unsigned int v16 = v9;
        uint64_t v17 = v7;
        do
        {
          int v18 = *v13++;
          *(void *)(v15 + 8 * v16++) = *(void *)(v12 + 8 * (v18 + v14));
          --v17;
        }
        while (v17);
      }
      ++v10;
      v9 += v7;
    }
    while (v10 != v8);
  }
  return a1;
}

void sub_18DFEE9CC(void *a1)
{
  a1[22] = &unk_1EDD174A8;
  a1[15] = &unk_1EDD174A8;
  *a1 = &unk_1EDD17478;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18DFEEA3C(uint64_t result, uint64_t a2)
{
  if (result != a2)
  {
    int v3 = *(_DWORD *)(a2 + 8);
    int v2 = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(result + 8) = v3;
    *(_DWORD *)(result + 12) = v2;
    int v4 = v2 * v3;
    *(_DWORD *)(result + 16) = v4;
    *(_DWORD *)(result + 20) = v3;
    int v5 = *(_DWORD *)(a2 + 16);
    if (v5 > 3)
    {
      uint64_t v9 = (v5 - 1);
      uint64_t v10 = *(_DWORD **)(result + 32);
      int v11 = *(int **)(a2 + 32);
      uint64_t v12 = v11;
      int v13 = v10;
      uint64_t v14 = v9;
      do
      {
        int v15 = *v12++;
        *v13++ = v15;
        --v14;
      }
      while (v14);
      v10[v9] = v11[v9];
    }
    else if (v4 >= 1)
    {
      uint64_t v6 = 0;
      uint64_t v7 = *(void *)(a2 + 32);
      uint64_t v8 = *(void *)(result + 32);
      do
      {
        *(_DWORD *)(v8 + 4 * v6) = *(_DWORD *)(v7 + 4 * v6);
        ++v6;
      }
      while (v6 < *(int *)(result + 16));
    }
  }
  return result;
}

void *sub_18DFEEAC4(void *result)
{
  *uint64_t result = &unk_1EDD174A8;
  return result;
}

void sub_18DFEEAE4(void *a1)
{
  *a1 = &unk_1EDD174A8;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18DFEEB14(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18DFEEB20(uint64_t a1)
{
  sub_18DFE2870(a1, &v1);
}

uint64_t sub_18DFEEB44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(a1 + 24) = 0x100000003;
  *(_OWORD *)(a1 + 8) = xmmword_18E1F6F60;
  *(void *)(a1 + 32) = a1 + 40;
  *(void *)a1 = &unk_1EDD165A8;
  *(void *)(a1 + 64) = a2;
  *(void *)(a1 + 96) = 0x100000003;
  *(void *)(a1 + 72) = &unk_1EDD18DC8;
  *(_OWORD *)(a1 + 80) = xmmword_18E1F6F60;
  *(void *)(a1 + 104) = a1 + 112;
  *(void *)(a1 + 152) = 0x100000001;
  *(void *)(a1 + 128) = &unk_1EDD18078;
  *(void *)&long long v7 = 0x100000001;
  *((void *)&v7 + 1) = 0x100000001;
  *(_OWORD *)(a1 + 136) = v7;
  *(void *)(a1 + 160) = a1 + 168;
  sub_18DFEEA3C(a1 + 72, a3);
  sub_18DFEEA3C(a1 + 128, a4);
  uint64_t v8 = *(unsigned int *)(a1 + 88);
  uint64_t v9 = *(unsigned int *)(a1 + 144);
  *(_DWORD *)(a1 + 8) = v8;
  *(_DWORD *)(a1 + 12) = v9;
  *(_DWORD *)(a1 + 16) = v9 * v8;
  *(_DWORD *)(a1 + 20) = v8;
  if (v9)
  {
    unsigned int v10 = 0;
    uint64_t v11 = 0;
    int v12 = *(_DWORD *)(a2 + 20);
    uint64_t v13 = *(void *)(a2 + 32);
    do
    {
      if (v8)
      {
        uint64_t v14 = *(int **)(a1 + 104);
        int v15 = *(_DWORD *)(*(void *)(a1 + 160) + 4 * v11) * v12;
        uint64_t v16 = *(void *)(a1 + 32);
        unsigned int v17 = v10;
        uint64_t v18 = v8;
        do
        {
          int v19 = *v14++;
          *(void *)(v16 + 8 * v17++) = *(void *)(v13 + 8 * (v19 + v15));
          --v18;
        }
        while (v18);
      }
      ++v11;
      v10 += v8;
    }
    while (v11 != v9);
  }
  return a1;
}

void sub_18DFEECA8(void *a1)
{
  a1[16] = &unk_1EDD174A8;
  a1[9] = &unk_1EDD174A8;
  *a1 = &unk_1EDD17478;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18DFEED18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(a1 + 24) = 0x300000001;
  *(_OWORD *)(a1 + 8) = xmmword_18E1F8560;
  *(void *)(a1 + 32) = a1 + 40;
  *(void *)a1 = &unk_1EDD16338;
  *(void *)(a1 + 64) = a2;
  *(void *)(a1 + 96) = 0x100000001;
  *(void *)(a1 + 72) = &unk_1EDD18078;
  *(void *)&long long v7 = 0x100000001;
  *((void *)&v7 + 1) = 0x100000001;
  *(_OWORD *)(a1 + 80) = v7;
  *(void *)(a1 + 104) = a1 + 112;
  *(void *)(a1 + 144) = 0x100000003;
  *(void *)(a1 + 120) = &unk_1EDD18DC8;
  *(_OWORD *)(a1 + 128) = xmmword_18E1F6F60;
  *(void *)(a1 + 152) = a1 + 160;
  sub_18DFEEA3C(a1 + 72, a3);
  sub_18DFEEA3C(a1 + 120, a4);
  uint64_t v8 = *(unsigned int *)(a1 + 88);
  uint64_t v9 = *(unsigned int *)(a1 + 136);
  *(_DWORD *)(a1 + 8) = v8;
  *(_DWORD *)(a1 + 12) = v9;
  *(_DWORD *)(a1 + 16) = v9 * v8;
  *(_DWORD *)(a1 + 20) = v8;
  if (v9)
  {
    unsigned int v10 = 0;
    uint64_t v11 = 0;
    int v12 = *(_DWORD *)(a2 + 20);
    uint64_t v13 = *(void *)(a2 + 32);
    do
    {
      if (v8)
      {
        uint64_t v14 = *(int **)(a1 + 104);
        int v15 = *(_DWORD *)(*(void *)(a1 + 152) + 4 * v11) * v12;
        uint64_t v16 = *(void *)(a1 + 32);
        unsigned int v17 = v10;
        uint64_t v18 = v8;
        do
        {
          int v19 = *v14++;
          *(void *)(v16 + 8 * v17++) = *(void *)(v13 + 8 * (v19 + v15));
          --v18;
        }
        while (v18);
      }
      ++v11;
      v10 += v8;
    }
    while (v11 != v9);
  }
  return a1;
}

void sub_18DFEEE8C(void *a1)
{
  a1[15] = &unk_1EDD174A8;
  a1[9] = &unk_1EDD174A8;
  *a1 = &unk_1EDD17478;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18DFEEEFC(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18DFEEF08(uint64_t a1)
{
  sub_18DEF3CF4(a1, v1);
}

void sub_18DFEEF2C(void *a1)
{
  *a1 = &unk_1EDD17478;
  JUMPOUT(0x192FA6240);
}

void sub_18DFEEF5C(void *a1)
{
  *a1 = &unk_1EDD17478;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18DFEEF8C(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18DFEEF98(uint64_t a1)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  sub_18DEF3CF4(a1, v1);
}

void sub_18DFEEFE8(uint64_t a1, uint64_t a2, BOOL *a3)
{
  sub_18DFE2F24(a2, a1);
  unsigned int v5 = *(_DWORD *)(a2 + 12);
  uint64_t v6 = *(__CLPK_doublereal **)(a2 + 32);
  __CLPK_integer v7 = *(_DWORD *)(a2 + 20);
  char __uplo = 85;
  __CLPK_integer __lda = v7;
  __CLPK_integer __n = v5;
  __CLPK_integer __info = 0;
  dpotrf_(&__uplo, &__n, v6, &__lda, &__info);
  __CLPK_integer v13 = __info;
  *a3 = __info == 0;
  if (v13)
  {
    LOWORD(__n) = 4;
    if (v13 < 1)
    {
      LOBYTE(__lda) = 5;
      int v21 = -v13;
      uint64_t v14 = "Error using Chol: input argument %d invalid in potrf.";
    }
    else
    {
      LOBYTE(__lda) = 4;
      uint64_t v14 = "Error using Chol: matrix must be positive definite.";
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&__n, (unsigned __int8 *)&__lda, v14, v8, v9, v10, v11, v12, v21);
  }
  else if (v5)
  {
    unsigned int v15 = 0;
    uint64_t v16 = *(void *)(a2 + 32);
    unsigned int v17 = v5 - 1;
    int v18 = 1;
    do
    {
      ++v15;
      int v19 = v18;
      unsigned int v20 = v17;
      if (v15 < v5)
      {
        do
        {
          *(void *)(v16 + 8 * v19++) = 0;
          --v20;
        }
        while (v20);
      }
      --v17;
      v18 += v5 + 1;
    }
    while (v15 != v5);
  }
}

double sub_18DFEF108(uint64_t a1, uint64_t a2)
{
  *(void *)&double result = 0x300000003;
  *(void *)(a1 + 24) = 0x300000003;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1EDD18EE8;
  int v4 = *(_DWORD *)(a2 + 8);
  int v3 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v5 = (v3 * v4);
  *(_DWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 20) = v4;
  uint64_t v6 = (double *)(a1 + 40);
  *(void *)(a1 + 32) = a1 + 40;
  if (*(_DWORD *)(a2 + 8) > 3u)
  {
    uint64_t v9 = "this->max_num_rows_ >= A.NumRows()";
    int v10 = 567;
    goto LABEL_9;
  }
  if (*(_DWORD *)(a2 + 12) > 3u)
  {
    uint64_t v9 = "this->max_num_cols_ >= A.NumCols()";
    int v10 = 568;
LABEL_9:
    __assert_rtn("CNMatrix", "cnmatrix.h", v10, v9);
  }
  if ((int)v5 >= 1)
  {
    __CLPK_integer v7 = *(double **)(a2 + 32);
    do
    {
      double v8 = *v7++;
      double result = v8;
      *v6++ = v8;
      --v5;
    }
    while (v5);
  }
  return result;
}

void sub_18DFEF1D4(_Unwind_Exception *a1)
{
  *char v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

float64x2_t sub_18DFEF1F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(a1 + 8);
  int v3 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a3 + 8) = v4;
  *(_DWORD *)(a3 + 12) = v3;
  uint64_t v5 = (v3 * v4);
  *(_DWORD *)(a3 + 16) = v5;
  *(_DWORD *)(a3 + 20) = v4;
  if ((int)v5 > 3)
  {
    uint64_t v13 = (v5 - 2);
    uint64_t v14 = *(float64x2_t **)(a1 + 32);
    unsigned int v15 = *(float64x2_t **)(a2 + 32);
    uint64_t v16 = *(float64x2_t **)(a3 + 32);
    unsigned int v17 = (float64x2_t *)((char *)v15 + 8 * v13);
    uint64_t v18 = (v5 - 1) >> 1;
    int v19 = v14;
    unsigned int v20 = v16;
    do
    {
      float64x2_t v21 = *v19++;
      float64x2_t v22 = v21;
      float64x2_t v23 = *v15++;
      *v20++ = vaddq_f64(v22, v23);
      --v18;
    }
    while (v18);
    float64x2_t result = vaddq_f64(*(float64x2_t *)((char *)v14 + 8 * v13), *v17);
    *(float64x2_t *)((char *)v16 + 8 * v13) = result;
  }
  else if ((int)v5 >= 1)
  {
    uint64_t v6 = *(double **)(a1 + 32);
    __CLPK_integer v7 = *(double **)(a2 + 32);
    double v8 = *(float64_t **)(a3 + 32);
    do
    {
      double v9 = *v6++;
      double v10 = v9;
      double v11 = *v7++;
      result.f64[0] = v10 + v11;
      *v8++ = result.f64[0];
      --v5;
    }
    while (v5);
  }
  return result;
}

double sub_18DFEF290(uint64_t a1, uint64_t a2)
{
  *(void *)&double result = 0x100000003;
  *(void *)(a1 + 24) = 0x100000003;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1EDD18D98;
  int v4 = *(_DWORD *)(a2 + 8);
  int v3 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v5 = (v3 * v4);
  *(_DWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 20) = v4;
  uint64_t v6 = (double *)(a1 + 40);
  *(void *)(a1 + 32) = a1 + 40;
  if (*(_DWORD *)(a2 + 8) > 3u)
  {
    double v9 = "this->max_num_rows_ >= A.NumRows()";
    int v10 = 567;
    goto LABEL_9;
  }
  if (*(_DWORD *)(a2 + 12) > 1u)
  {
    double v9 = "this->max_num_cols_ >= A.NumCols()";
    int v10 = 568;
LABEL_9:
    __assert_rtn("CNMatrix", "cnmatrix.h", v10, v9);
  }
  if ((int)v5 >= 1)
  {
    __CLPK_integer v7 = *(double **)(a2 + 32);
    do
    {
      double v8 = *v7++;
      double result = v8;
      *v6++ = v8;
      --v5;
    }
    while (v5);
  }
  return result;
}

void sub_18DFEF360(_Unwind_Exception *a1)
{
  *char v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

float64x2_t sub_18DFEF380(uint64_t a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a1 + 8);
  int v2 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a2 + 8) = v3;
  *(_DWORD *)(a2 + 12) = v2;
  uint64_t v4 = (v2 * v3);
  *(_DWORD *)(a2 + 16) = v4;
  *(_DWORD *)(a2 + 20) = v3;
  if ((int)v4 > 3)
  {
    uint64_t v9 = (v4 - 2);
    int v10 = *(float64x2_t **)(a1 + 32);
    double v11 = *(float64x2_t **)(a2 + 32);
    uint64_t v12 = (float64x2_t *)((char *)v10 + 8 * v9);
    uint64_t v13 = (v4 - 1) >> 1;
    uint64_t v14 = v11;
    do
    {
      float64x2_t v15 = *v10++;
      *v14++ = vnegq_f64(v15);
      --v13;
    }
    while (v13);
    float64x2_t result = vnegq_f64(*v12);
    *(float64x2_t *)((char *)v11 + 8 * v9) = result;
  }
  else if ((int)v4 >= 1)
  {
    uint64_t v5 = *(double **)(a1 + 32);
    uint64_t v6 = *(double **)(a2 + 32);
    do
    {
      double v7 = *v5++;
      result.f64[0] = -v7;
      *v6++ = -v7;
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t CNTime::Deserialize(uint64_t a1, unsigned char *a2)
{
  if (!a2[8]) {
    return 0;
  }
  int v4 = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(*(void *)a2 + 40))(a2, a1, 8);
  return v4 & (*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(*(void *)a2 + 40))(a2, a1 + 8, 8);
}

uint64_t CNTime::Serialize(uint64_t *a1, unsigned char *a2)
{
  if (a2[8]) {
    return 0;
  }
  uint64_t v4 = a1[1];
  uint64_t v6 = *a1;
  int v5 = (*(uint64_t (**)(unsigned char *, uint64_t *, uint64_t))(*(void *)a2 + 32))(a2, &v6, 8);
  uint64_t v6 = v4;
  return v5 & (*(unsigned int (**)(unsigned char *, uint64_t *, uint64_t))(*(void *)a2 + 32))(a2, &v6, 8);
}

uint64_t operator<<(uint64_t a1)
{
  return a1;
}

uint64_t CNTimeSpan::operator+(uint64_t a1, void *a2, int8x16_t a3, int8x16_t a4)
{
  a4.i64[0] = a2[1];
  BOOL v4 = __OFADD__(*(void *)a1, *a2);
  uint64_t v5 = *(void *)a1 + *a2;
  if (v4) {
    return 0;
  }
  *(double *)a3.i64 = *(double *)(a1 + 8) + *(double *)a4.i64;
  v7[0] = 0;
  v7[1] = 0;
  CNTimeSpan::SetTimeSpan(v7, v5, a3, a4);
  return v7[0];
}

uint64_t CNTimeSpan::operator-(uint64_t a1, void *a2, int8x16_t a3, int8x16_t a4)
{
  a4.i64[0] = a2[1];
  BOOL v4 = __OFSUB__(*(void *)a1, *a2);
  uint64_t v5 = *(void *)a1 - *a2;
  if (v4) {
    return 0;
  }
  *(double *)a3.i64 = *(double *)(a1 + 8) - *(double *)a4.i64;
  v7[0] = 0;
  v7[1] = 0;
  CNTimeSpan::SetTimeSpan(v7, v5, a3, a4);
  return v7[0];
}

uint64_t CNTimeSpan::operator-(double *a1, int8x16_t a2, int8x16_t a3)
{
  double v3 = *a1;
  if (*(void *)a1 == 0x8000000000000000) {
    return 0;
  }
  *(double *)a2.i64 = -a1[1];
  v5[0] = 0;
  v5[1] = 0;
  CNTimeSpan::SetTimeSpan(v5, -*(void *)&v3, a2, a3);
  return v5[0];
}

uint64_t *CNTimeSpan::operator+=(uint64_t *a1, void *a2, int8x16_t a3, int8x16_t a4)
{
  *a1 = CNTimeSpan::operator+((uint64_t)a1, a2, a3, a4);
  a1[1] = v5;
  return a1;
}

uint64_t *CNTimeSpan::operator-=(uint64_t *a1, void *a2, int8x16_t a3, int8x16_t a4)
{
  *a1 = CNTimeSpan::operator-((uint64_t)a1, a2, a3, a4);
  a1[1] = v5;
  return a1;
}

uint64_t CNTimeSpan::Deserialize(uint64_t a1, uint64_t a2)
{
  int v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 40))(a2, a1, 8);
  return v4 & (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 40))(a2, a1 + 8, 8);
}

uint64_t CNTimeSpan::Serialize(uint64_t *a1, uint64_t a2)
{
  uint64_t v6 = *a1;
  int v4 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a2 + 32))(a2, &v6, 8);
  uint64_t v6 = a1[1];
  return v4 & (*(unsigned int (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a2 + 32))(a2, &v6, 8);
}

double raven::RavenMovingStateEstimator::AdjustUserSpeedEvidenceWeight(raven::RavenMovingStateEstimator *this, double a2, double a3)
{
  BOOL v3 = a3 + a3 >= a2 || a2 <= 5.0;
  double result = 0.1;
  if (!v3) {
    return 8.0;
  }
  return result;
}

uint64_t raven::RavenMovingStateEstimator::Configure(uint64_t a1, uint64_t *a2)
{
  if (*(unsigned char *)(a1 + 217))
  {
    __int16 v31 = 12;
    unsigned __int8 v30 = 2;
    unsigned __int8 v3 = cnprint::CNLogFormatter::FormatWarning((cnprint::CNLogFormatter *)(a1 + 4160), "RavenMovingStateEstimator::Configure() called more than once");
    if (*(char *)(a1 + 4183) >= 0) {
      LOBYTE(v9) = v3;
    }
    else {
      uint64_t v9 = *(void *)(a1 + 4160);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v31, &v30, "%s", v4, v5, v6, v7, v8, v9);
  }
  else
  {
    uint64_t v11 = *a2;
    if (*a2)
    {
      if (*(unsigned char *)(v11 + 33))
      {
        uint64_t result = 0;
        *(void *)(a1 + 224) = v11;
        *(unsigned char *)(a1 + 217) = 1;
        return result;
      }
      __int16 v27 = 12;
      unsigned __int8 v26 = 4;
      unsigned __int8 v19 = cnprint::CNLogFormatter::FormatGeneral((const void **)(a1 + 4160), "RavenMovingStateEstimator::Configure() called with uninitialized raven parameters");
      if (*(char *)(a1 + 4183) >= 0) {
        LOBYTE(v25) = v19;
      }
      else {
        uint64_t v25 = *(void *)(a1 + 4160);
      }
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v27, &v26, "%s", v20, v21, v22, v23, v24, v25);
    }
    else
    {
      __int16 v29 = 12;
      unsigned __int8 v28 = 4;
      unsigned __int8 v12 = cnprint::CNLogFormatter::FormatGeneral((const void **)(a1 + 4160), "RavenMovingStateEstimator::Configure() called with null raven parameters");
      if (*(char *)(a1 + 4183) >= 0) {
        LOBYTE(v18) = v12;
      }
      else {
        uint64_t v18 = *(void *)(a1 + 4160);
      }
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v29, &v28, "%s", v13, v14, v15, v16, v17, v18);
    }
  }
  return 0xFFFFFFFFLL;
}

uint64_t raven::RavenMovingStateEstimator::Initialize(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 216))
  {
    *(_WORD *)double v61 = 12;
    v59[0] = 2;
    unsigned __int8 v5 = cnprint::CNLogFormatter::FormatWarning((cnprint::CNLogFormatter *)(a1 + 4160), "RavenMovingStateEstimator::Initialize(),estimator being re-initialized");
    if (*(char *)(a1 + 4183) >= 0) {
      LOBYTE(v11) = v5;
    }
    else {
      uint64_t v11 = *(void *)(a1 + 4160);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v61, v59, "%s", v6, v7, v8, v9, v10, v11);
    *(unsigned char *)(a1 + 216) = 0;
  }
  if (!*(void *)(a1 + 224))
  {
    *(_WORD *)double v61 = 12;
    v59[0] = 4;
    unsigned __int8 v27 = cnprint::CNLogFormatter::FormatGeneral((const void **)(a1 + 4160), "RavenMovingStateEstimator::Initialize(),invalid pointer to RavenParameters");
    goto LABEL_22;
  }
  double v12 = *(double *)(a2 + 8) + (double)*(uint64_t *)a2;
  double v13 = fabs(v12);
  if ((unint64_t)(*(void *)&v13 - 0x10000000000000) >> 53 >= 0x3FF
    && (unint64_t)(*(void *)&v13 - 1) >= 0xFFFFFFFFFFFFFLL
    && *(void *)&v12 != 0)
  {
    *(_WORD *)double v61 = 12;
    v59[0] = 4;
    unsigned __int8 v27 = cnprint::CNLogFormatter::FormatGeneral((const void **)(a1 + 4160), "RavenMovingStateEstimator::Initialize(),invalid input time,%.3lf");
LABEL_22:
    if (*(char *)(a1 + 4183) >= 0) {
      LOBYTE(v33) = v27;
    }
    else {
      uint64_t v33 = *(void *)(a1 + 4160);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v61, v59, "%s", v28, v29, v30, v31, v32, v33);
    return 0xFFFFFFFFLL;
  }
  *(void *)(a1 + 4136) = 0x3DDB7CDFD9D7BDBBLL;
  uint64_t v56 = 0x100000003;
  long long v54 = &unk_1EDD18D98;
  int v57 = &v58;
  long long v55 = xmmword_18E1F6F60;
  uint64_t v16 = (cnprint::CNPrinter *)sub_18DFE2CC8((uint64_t)&v54, 0.0);
  uint64_t v17 = v57;
  v57[2] = 0x3FF0000000000000;
  double v18 = *(double *)(a1 + 4136);
  uint64_t v19 = DWORD1(v55);
  if (DWORD1(v55))
  {
    uint64_t v20 = 0;
    unsigned int v21 = v55;
    uint64_t v22 = v55 - 1;
    int v23 = 1;
    do
    {
      double v24 = *(double *)&v17[v21 * v20];
      unsigned int v25 = v23;
      uint64_t v26 = v22;
      if (v21 >= 2)
      {
        do
        {
          double v24 = v24 + *(double *)&v17[v25++];
          --v26;
        }
        while (v26);
      }
      v64[v20++] = v24;
      v23 += v21;
    }
    while (v20 != v19);
    double v2 = v64[0];
  }
  unsigned int v35 = DWORD2(v55);
  if (fabs(v2 + -1.0) > v18 && cnprint::CNPrinter::GetLogLevel(v16) <= 1)
  {
    *(_WORD *)double v61 = 2;
    v59[0] = 1;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v61, v59, "WARNING: HMM initialized with non-normalized probability vector.", v36, v37, v38, v39, v40, v53);
  }
  sub_18DFF2980((uint64_t)v59, (uint64_t)&v54);
  float64x2_t v41 = (float64x2_t)vdupq_lane_s32((int32x2_t)(v35 | 0x100000000), 0);
  HIDWORD(v41.f64[0]) = 1;
  float64x2_t v60 = v41;
  uint64_t v62 = 0x100000003;
  *(void *)double v61 = &unk_1EDD18D98;
  *(void *)&v41.f64[1] = 0x300000003;
  *(_OWORD *)&v61[8] = xmmword_18E1F6F60;
  uint64_t v63 = v64;
  v41.f64[0] = 1.0 / v2;
  sub_18DFE3240((uint64_t)v59, (uint64_t)v61, v41);
  sub_18DFE2F24(a1 + 4000, (uint64_t)v61);
  __n128 v42 = sub_18DFE2F24(a1 + 4064, a1 + 4000);
  *(_DWORD *)(a1 + 4128) = 1;
  v43.i64[0] = 0x3FB999999999999ALL;
  uint64_t v44 = *(void *)a2;
  v42.n128_f64[0] = floor(*(double *)(a2 + 8) / 0.1) * 0.1;
  *(_OWORD *)double v61 = 0uLL;
  uint64_t v45 = CNTimeSpan::SetTimeSpan((uint64_t *)v61, v44, (int8x16_t)v42, v43);
  *(_OWORD *)(a1 + 4144) = *(_OWORD *)v61;
  *(_OWORD *)(a1 + 944) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 1024) = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 216) = 1;
  if (!cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v45))
  {
    *(_WORD *)double v61 = 12;
    v59[0] = 0;
    char v46 = cnprint::CNLogFormatter::FormatGeneral(a1 + 4160, a2, "RavenMovingStateEstimator::Initialize(),estimator is initialized");
    if (*(char *)(a1 + 4183) >= 0) {
      LOBYTE(v52) = v46;
    }
    else {
      uint64_t v52 = *(void *)(a1 + 4160);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v61, v59, "%s", v47, v48, v49, v50, v51, v52);
  }
  return 0;
}

uint64_t raven::RavenMovingStateEstimator::Predict(uint64_t a1, long long *a2)
{
  if (!*(unsigned char *)(a1 + 217))
  {
    LOWORD(v70) = 12;
    LOBYTE(v81) = 4;
    char v17 = cnprint::CNLogFormatter::FormatGeneral(a1 + 4160, (uint64_t)a2, "failed to predict, Unconfigured");
LABEL_21:
    if (*(char *)(a1 + 4183) >= 0) {
      LOBYTE(v23) = v17;
    }
    else {
      uint64_t v23 = *(void *)(a1 + 4160);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v70, (unsigned __int8 *)&v81, "%s", v18, v19, v20, v21, v22, v23);
    return 0xFFFFFFFFLL;
  }
  if (!*(unsigned char *)(a1 + 216))
  {
    LOWORD(v70) = 12;
    LOBYTE(v81) = 4;
    char v17 = cnprint::CNLogFormatter::FormatGeneral(a1 + 4160, (uint64_t)a2, "failed to predict, Uninitialized");
    goto LABEL_21;
  }
  *(void *)&long long v70 = 0;
  *((void *)&v70 + 1) = 0x7FF8000000000000;
  uint64_t v73 = 0x300000003;
  uint64_t v71 = &unk_1EDD18EE8;
  long long v74 = &v75;
  long long v72 = xmmword_18E1F0010;
  sub_18DFE2CC8((uint64_t)&v71, 0.0);
  int v4 = HIDWORD(v72) + 1;
  unsigned __int8 v5 = v74;
  *long long v74 = 0x3FF0000000000000;
  v5[v4] = 0x3FF0000000000000;
  v5[2 * v4] = 0x3FF0000000000000;
  int32x2_t v6 = vdup_n_s32(*(unsigned char *)(a1 + 1040) == 0);
  v7.i64[0] = v6.u32[0];
  v7.i64[1] = v6.u32[1];
  int8x16_t v8 = (int8x16_t)vcltzq_s64(vshlq_n_s64(v7, 0x3FuLL));
  long long v70 = *a2;
  long long v72 = xmmword_18E1F0010;
  *(int8x16_t *)unsigned __int8 v5 = vbslq_s8(v8, (int8x16_t)xmmword_18E1F86C0, (int8x16_t)xmmword_18E1F86B0);
  *((_OWORD *)v5 + 1) = xmmword_18E1F86F0;
  *((_OWORD *)v5 + 2) = xmmword_18E1F8700;
  *((int8x16_t *)v5 + 3) = vbslq_s8(v8, (int8x16_t)xmmword_18E1F86E0, (int8x16_t)xmmword_18E1F86D0);
  v5[8] = 0x3FE8000000000000;
  if (!*(_DWORD *)(a1 + 4128)) {
    sub_18DFE2F24(a1 + 4064, a1 + 4000);
  }
  unsigned int v9 = *(_DWORD *)(a1 + 4072);
  unsigned int v10 = *(_DWORD *)(a1 + 4076);
  if (v9) {
    BOOL v11 = v10 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  int v12 = v11;
  if (v9 <= v10) {
    unsigned int v13 = *(_DWORD *)(a1 + 4076);
  }
  else {
    unsigned int v13 = *(_DWORD *)(a1 + 4072);
  }
  if (v12) {
    unint64_t v14 = 0;
  }
  else {
    unint64_t v14 = v13;
  }
  if (v12 == 1)
  {
    uint64_t v88 = 0x100000003;
    uint64_t v86 = &unk_1EDD18D98;
    int v89 = v90;
    long long v87 = xmmword_18E1F8710;
    sub_18DFE2CC8((uint64_t)&v86, 1.0);
    uint64_t v83 = 0x100000003;
    *(void *)&v15.f64[1] = 0x300000003;
    long long v82 = xmmword_18E1F6F60;
    int v81 = &unk_1EDD18D98;
    double v84 = (double *)v85;
    v15.f64[0] = INFINITY;
    uint64_t v16 = &v86;
LABEL_30:
    sub_18DFE3240((uint64_t)v16, (uint64_t)&v81, v15);
    goto LABEL_33;
  }
  double v24 = *(double *)(a1 + 4136);
  uint64_t v83 = 0x100000003;
  long long v82 = xmmword_18E1F6F60;
  int v81 = &unk_1EDD18D98;
  double v84 = (double *)v85;
  unsigned int v25 = (cnprint::CNPrinter *)sub_18DFF2FDC(a1 + 4064, 1, (uint64_t)&v81);
  double v26 = *v84;
  if (fabs(*v84 + -1.0) > v24)
  {
    if (cnprint::CNPrinter::GetLogLevel(v25) <= 1)
    {
      LOWORD(v81) = 2;
      LOBYTE(v86) = 1;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v81, (unsigned __int8 *)&v86, "WARNING: HMM prediction passed a non-normalized probability vector.", v27, v28, v29, v30, v31, v69);
    }
    if ((v13 & 0x80000000) == 0)
    {
      sub_18DFF2980((uint64_t)&v86, a1 + 4064);
      int32x4_t v32 = vdupq_lane_s32((int32x2_t)(v13 | 0x100000000), 0);
      v32.i32[1] = 1;
      long long v87 = (__int128)v32;
      uint64_t v83 = 0x100000003;
      *(void *)&v15.f64[1] = 0x300000003;
      long long v82 = xmmword_18E1F6F60;
      int v81 = &unk_1EDD18D98;
      double v84 = (double *)v85;
      v15.f64[0] = 1.0 / v26;
      goto LABEL_30;
    }
LABEL_56:
    __assert_rtn("Reshape", "cnmatrix.h", 2936, "nr >= 0");
  }
  if ((v13 & 0x80000000) != 0) {
    goto LABEL_56;
  }
  sub_18DFF2980((uint64_t)&v81, a1 + 4064);
  int32x4_t v33 = vdupq_lane_s32((int32x2_t)(v13 | 0x100000000), 0);
  v33.i32[1] = 1;
  long long v82 = (__int128)v33;
LABEL_33:
  sub_18DFE2F24(a1 + 4064, (uint64_t)&v81);
  *(_DWORD *)(a1 + 4128) = 1;
  uint64_t v83 = 0x300000003;
  long long v82 = xmmword_18E1F0010;
  int v81 = &unk_1EDD18EE8;
  double v84 = (double *)v85;
  uint64_t v40 = (cnprint::CNPrinter *)sub_18DFF0488((uint64_t)&v70, (uint64_t)&v81, v34, v35, v36, v37, v38, v39);
  if (v40)
  {
    LOWORD(v86) = 2;
    LOBYTE(v76) = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v86, (unsigned __int8 *)&v76, "ERROR: HMM transition probability function failed.", v41, v42, v43, v44, v45, v69);
    int v46 = 27;
LABEL_35:
    LOWORD(v81) = 12;
    LOBYTE(v86) = 4;
    char v47 = cnprint::CNLogFormatter::FormatGeneral(a1 + 4160, a1 + 4144, "failed to predict,code,%d", v46);
    if (*(char *)(a1 + 4183) >= 0) {
      LOBYTE(v53) = v47;
    }
    else {
      uint64_t v53 = *(void *)(a1 + 4160);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v81, (unsigned __int8 *)&v86, "%s", v48, v49, v50, v51, v52, v53);
    return 0xFFFFFFFFLL;
  }
  if (v14)
  {
    unint64_t v55 = 0;
    BOOL v56 = 0;
    int v57 = v84;
LABEL_42:
    double v58 = 0.0;
    long long v59 = v57;
    unint64_t v60 = v14;
    while (1)
    {
      double v61 = *v59;
      if (*v59 < 0.0 || v61 > 1.0) {
        break;
      }
      double v58 = v58 + v61;
      ++v59;
      if (!--v60)
      {
        if (fabs(v58 + -1.0) <= *(double *)(a1 + 4136))
        {
          ++v55;
          v57 += SHIDWORD(v82);
          BOOL v56 = v55 >= v14;
          if (v55 != v14) {
            goto LABEL_42;
          }
        }
        break;
      }
    }
    if (!v56)
    {
      if (cnprint::CNPrinter::GetLogLevel(v40) <= 1)
      {
        LOWORD(v86) = 2;
        LOBYTE(v76) = 1;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v86, (unsigned __int8 *)&v76, "ERROR: HMM transition probability matrix is invalid.", v64, v65, v66, v67, v68, v69);
      }
      int v46 = 28;
      goto LABEL_35;
    }
  }
  uint64_t v88 = 0x100000003;
  long long v87 = xmmword_18E1F6F60;
  uint64_t v86 = &unk_1EDD18D98;
  int v89 = v90;
  sub_18DFE2B44((uint64_t)&v81, a1 + 4064, (uint64_t)&v86);
  sub_18DFE2F24(a1 + 4000, (uint64_t)&v86);
  uint64_t v78 = 0x100000003;
  long long v77 = xmmword_18E1F6F60;
  int v76 = &unk_1EDD18D98;
  int v79 = (double *)&v80;
  sub_18DFF2FDC(a1 + 4000, 1, (uint64_t)&v76);
  v63.f64[0] = 1.0 / *v79;
  uint64_t v88 = 0x100000003;
  long long v87 = xmmword_18E1F6F60;
  uint64_t v86 = &unk_1EDD18D98;
  int v89 = v90;
  sub_18DFE3240(a1 + 4000, (uint64_t)&v86, v63);
  sub_18DFE2F24(a1 + 4000, (uint64_t)&v86);
  uint64_t result = 0;
  *(_DWORD *)(a1 + 4128) = 0;
  *(_OWORD *)(a1 + 4144) = *a2;
  return result;
}

uint64_t sub_18DFF0488(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1)
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EB4038B0, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_1EB4038B0))
    {
      uint64_t v43 = 0x300000001;
      uint64_t v41 = &unk_1EDD18258;
      uint64_t v44 = &v45;
      long long v42 = xmmword_18E1F8560;
      uint64_t v45 = 0x100000000;
      int v46 = 2;
      sub_18DFEC63C((uint64_t)&v41, (uint64_t)&unk_1EB4038B8);
      __cxa_atexit((void (*)(void *))sub_18DFE2E9C, &unk_1EB4038B8, &dword_18DEDB000);
      __cxa_guard_release(&qword_1EB4038B0);
    }
    sub_18DFF2AD0((uint64_t)&v41, a1 + 16, 0);
    uint64_t v15 = v42;
    if (v42)
    {
      uint64_t v16 = 0;
      double v17 = 0.0;
      while (1)
      {
        double v18 = *(double *)((char *)v44 + (v16 >> 29));
        if ((*(void *)&v18 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
          break;
        }
        if (v18 < 0.0 || v18 > 1.0) {
          break;
        }
        double v17 = v17 + v18;
        v16 += 0x100000000;
        if (!--v15)
        {
          double v20 = v17 + -1.0;
          goto LABEL_15;
        }
      }
    }
    else
    {
      double v20 = -1.0;
LABEL_15:
      if (fabs(v20) < 2.22044605e-16)
      {
        sub_18DFF2AD0((uint64_t)v38, a1 + 16, 1);
        uint64_t v21 = v39;
        if (v39)
        {
          uint64_t v22 = 0;
          double v23 = 0.0;
          while (1)
          {
            double v24 = *(double *)(v40 + (v22 >> 29));
            if ((*(void *)&v24 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
              break;
            }
            if (v24 < 0.0 || v24 > 1.0) {
              break;
            }
            double v23 = v23 + v24;
            v22 += 0x100000000;
            if (!--v21)
            {
              double v26 = v23 + -1.0;
              goto LABEL_27;
            }
          }
        }
        else
        {
          double v26 = -1.0;
LABEL_27:
          if (fabs(v26) < 2.22044605e-16)
          {
            sub_18DFF2AD0((uint64_t)v35, a1 + 16, 2);
            uint64_t v27 = v36;
            if (v36)
            {
              uint64_t v28 = 0;
              double v29 = 0.0;
              while (1)
              {
                double v30 = *(double *)(v37 + (v28 >> 29));
                if ((*(void *)&v30 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
                  break;
                }
                if (v30 < 0.0 || v30 > 1.0) {
                  break;
                }
                double v29 = v29 + v30;
                v28 += 0x100000000;
                if (!--v27)
                {
                  double v32 = v29 + -1.0;
                  goto LABEL_39;
                }
              }
            }
            else
            {
              double v32 = -1.0;
LABEL_39:
              if (fabs(v32) < 2.22044605e-16)
              {
                *(_OWORD *)(a2 + 8) = xmmword_18E1F0010;
                sub_18DFE2F24(a2, a1 + 16);
                return 0;
              }
            }
          }
        }
      }
    }
    LOWORD(v41) = 12;
    v38[0] = 4;
    double v34 = *(double *)(a1 + 8) + (double)*(uint64_t *)a1;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v41, v38, "time,%.3lf,t-function failure on line %d: %s() %s", v10, v11, v12, v13, v14, SLOBYTE(v34));
  }
  else
  {
    LOWORD(v41) = 12;
    v38[0] = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v41, v38, "time,%.3lf,t-function failure on line %d: %s() %s", a4, a5, a6, a7, a8, 0);
  }
  return 0xFFFFFFFFLL;
}

void sub_18DFF07B4(_Unwind_Exception *a1)
{
}

uint64_t raven::RavenMovingStateEstimator::HandleEvent(raven::RavenMovingStateEstimator *this, const raven::AccelerometerEvent *a2)
{
  int v4 = (char *)this + 232;
  unsigned __int8 v5 = (char *)this + 520;
  int32x2_t v6 = (double *)((char *)a2 + 104);
  int64x2_t v7 = (double *)((char *)a2 + 112);
  int8x16_t v8 = (double *)((char *)a2 + 120);
  unsigned int v9 = (char *)this + 232;
  do
  {
    sub_18DFF11E4((uint64_t)v9, v6, 1.0);
    sub_18DFF11E4((uint64_t)(v9 + 48), v7, 1.0);
    sub_18DFF11E4((uint64_t)(v9 + 96), v8, 1.0);
    v9 += 144;
  }
  while (v9 != v5);
  uint64_t v10 = (*(uint64_t (**)(const raven::AccelerometerEvent *))(*(void *)a2 + 16))(a2);
  double v12 = v11;
  double v13 = v11;
  double v117 = 0.0;
  uint64_t v118 = 0x3FD0000000000000;
  uint64_t v16 = CNTimeSpan::operator+((uint64_t)this + 1024, &v117, v14, v15);
  if (v10) {
    BOOL v18 = 1;
  }
  else {
    BOOL v18 = (*(void *)&v12 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
  }
  if (v18 && (v16 || (*(void *)&v17 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000) && v10 != v16)
  {
    if (v10 > v16) {
      goto LABEL_12;
    }
LABEL_15:
    BOOL v27 = 0;
    goto LABEL_20;
  }
  if (v13 <= v17) {
    goto LABEL_15;
  }
LABEL_12:
  uint64_t v19 = (double *)&v4[144 * *((void *)this + 65)];
  double v20 = sqrt(v19[5] + v19[11] + v19[17]);
  double v21 = v19[3];
  double v22 = v19[9];
  double v23 = v19[15];
  uint64_t v24 = (*(uint64_t (**)(const raven::AccelerometerEvent *))(*(void *)a2 + 16))(a2);
  int v26 = *((unsigned __int8 *)this + 1016);
  BOOL v27 = *((unsigned char *)this + 1016) != 0;
  if (*((unsigned char *)this + 1016)) {
    double v28 = sqrt((v22 - *((double *)this + 121)) * (v22 - *((double *)this + 121))+ (v21 - *((double *)this + 120)) * (v21 - *((double *)this + 120))+ (v23 - *((double *)this + 122)) * (v23 - *((double *)this + 122)));
  }
  else {
    double v28 = NAN;
  }
  *((double *)this + 120) = v21;
  *((double *)this + 121) = v22;
  *((double *)this + 122) = v23;
  *((double *)this + 123) = v28;
  *((double *)this + 124) = v20;
  *((void *)this + 125) = v24;
  *((void *)this + 126) = v25;
  if (!v26) {
    *((unsigned char *)this + 1016) = 1;
  }
  double v29 = &v4[144 * *((void *)this + 65)];
  char *v29 = 0;
  *((_OWORD *)v29 + 2) = 0u;
  *(_OWORD *)(v29 + 20) = 0u;
  *(_OWORD *)(v29 + 4) = 0u;
  int v30 = ~*((_DWORD *)this + 130);
  uint64_t v31 = &v4[144 * *((void *)this + 65)];
  unsigned char v31[48] = 0;
  *(_OWORD *)(v31 + 100) = 0u;
  *(_OWORD *)(v31 + 116) = 0u;
  *((_OWORD *)v31 + 8) = 0u;
  *(_OWORD *)(v31 + 52) = 0u;
  *(_OWORD *)(v31 + 68) = 0u;
  *(_OWORD *)(v31 + 81) = 0u;
  *((void *)this + 65) = v30 & 1;
  *((void *)this + 128) = (*(uint64_t (**)(const raven::AccelerometerEvent *))(*(void *)a2 + 16))(a2);
  *((void *)this + 129) = v32;
LABEL_20:
  sub_18DFF11E4((uint64_t)this + 736, v6, 1.0);
  sub_18DFF11E4((uint64_t)this + 784, v7, 1.0);
  sub_18DFF11E4((uint64_t)this + 832, v8, 1.0);
  uint64_t v33 = (*(uint64_t (**)(const raven::AccelerometerEvent *))(*(void *)a2 + 16))(a2);
  double v35 = v34;
  double v36 = v34;
  double v117 = 0.0;
  uint64_t v118 = 0x3FB999999999999ALL;
  uint64_t result = CNTimeSpan::operator+((uint64_t)this + 944, &v117, v37, v38);
  if ((v33 || (*(void *)&v35 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
    && (result || (*(void *)&v40 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
    && v33 != result)
  {
    if (v33 > result) {
      goto LABEL_26;
    }
LABEL_29:
    BOOL v48 = 0;
    goto LABEL_34;
  }
  if (v36 <= v40) {
    goto LABEL_29;
  }
LABEL_26:
  double v41 = sqrt(*((double *)this + 97) + *((double *)this + 103) + *((double *)this + 109));
  double v42 = *((double *)this + 95);
  double v43 = *((double *)this + 101);
  double v44 = *((double *)this + 107);
  uint64_t v45 = (*(uint64_t (**)(const raven::AccelerometerEvent *))(*(void *)a2 + 16))(a2);
  int v47 = *((unsigned __int8 *)this + 936);
  BOOL v48 = *((unsigned char *)this + 936) != 0;
  if (*((unsigned char *)this + 936)) {
    double v49 = sqrt((v43 - *((double *)this + 111)) * (v43 - *((double *)this + 111))+ (v42 - *((double *)this + 110)) * (v42 - *((double *)this + 110))+ (v44 - *((double *)this + 112)) * (v44 - *((double *)this + 112)));
  }
  else {
    double v49 = NAN;
  }
  *((double *)this + 110) = v42;
  *((double *)this + 111) = v43;
  *((double *)this + 112) = v44;
  *((double *)this + 113) = v49;
  *((double *)this + 114) = v41;
  *((void *)this + 115) = v45;
  *((void *)this + 116) = v46;
  if (!v47) {
    *((unsigned char *)this + 936) = 1;
  }
  *((unsigned char *)this + 736) = 0;
  *((_OWORD *)this + 54) = 0u;
  *(_OWORD *)((char *)this + 836) = 0u;
  *(_OWORD *)((char *)this + 852) = 0u;
  *(_OWORD *)((char *)this + 740) = 0u;
  *(_OWORD *)((char *)this + 756) = 0u;
  *(_OWORD *)((char *)this + 769) = 0u;
  *(_OWORD *)((char *)this + 788) = 0u;
  *(_OWORD *)((char *)this + 804) = 0u;
  *(_OWORD *)((char *)this + 817) = 0u;
  uint64_t result = (*(uint64_t (**)(const raven::AccelerometerEvent *))(*(void *)a2 + 16))(a2);
  *((void *)this + 118) = result;
  *((void *)this + 119) = v50;
LABEL_34:
  if ((v27 || v48) && *((unsigned char *)this + 1016))
  {
    uint64_t v51 = (double *)((char *)this + 992);
    if (v27)
    {
      if (*((unsigned char *)this + 3984))
      {
        if (*((double *)this + 363) < sqrt(*((double *)this + 367)))
        {
          double v52 = *v51;
          if (*v51 < 1.0)
          {
            if (*((unsigned char *)this + 672))
            {
              uint64_t v53 = *((void *)this + 89);
              if (*((void *)this + 90) != v53 && *((double *)this + 86) > v52 && *((double *)this + 85) <= v52)
              {
                ++*(_DWORD *)(v53 + 4 * (v52 / *((double *)this + 87)));
                ++*((_DWORD *)this + 176);
              }
            }
          }
        }
      }
    }
    int v54 = *((unsigned __int8 *)this + 1544);
    if (*((unsigned char *)this + 1544)) {
      int v54 = *((unsigned __int8 *)this + 1504) - 1 < 2;
    }
    if (*((_DWORD *)this + 176))
    {
      unint64_t v55 = (unsigned int *)*((void *)this + 89);
      BOOL v56 = (unsigned int *)*((void *)this + 90);
      if (v55 == v56)
      {
        double v58 = (unsigned int *)*((void *)this + 89);
      }
      else
      {
        int v57 = v55 + 1;
        double v58 = (unsigned int *)*((void *)this + 89);
        if (v55 + 1 != v56)
        {
          unsigned int v59 = *v55;
          double v58 = (unsigned int *)*((void *)this + 89);
          unint64_t v60 = v55 + 1;
          do
          {
            unsigned int v62 = *v60++;
            unsigned int v61 = v62;
            BOOL v63 = v59 >= v62;
            if (v59 <= v62) {
              unsigned int v59 = v61;
            }
            if (!v63) {
              double v58 = v57;
            }
            int v57 = v60;
          }
          while (v60 != v56);
        }
      }
      double v64 = *((double *)this + 124);
      double v65 = *((double *)this + 85) + *((double *)this + 87) * ((double)(v58 - v55) + 1.0);
      double v66 = v65 + v65;
      if (v66 > 0.5) {
        double v66 = 0.5;
      }
      if (v64 < v66) {
        int v54 = 1;
      }
    }
    else
    {
      double v64 = *v51;
    }
    if (v64 >= 1.0) {
      int v54 = 0;
    }
    if (*((unsigned char *)this + 3984))
    {
      if (*((double *)this + 363) >= sqrt(*((double *)this + 367))) {
        LOBYTE(v54) = 0;
      }
      if ((v54 & 1) == 0) {
        goto LABEL_76;
      }
    }
    else if (!v54)
    {
      goto LABEL_76;
    }
    if (v48)
    {
      if (!*((unsigned char *)this + 936)) {
        goto LABEL_161;
      }
      double v117 = v64 * *((double *)this + 113);
      sub_18DFF11E4((uint64_t)this + 528, &v117, 1.0);
    }
    if (v27)
    {
      sub_18DFF11E4((uint64_t)this + 624, (double *)this + 124, 1.0);
      sub_18DFF11E4((uint64_t)this + 576, (double *)this + 123, 1.0);
    }
LABEL_76:
    uint64_t result = (*(uint64_t (**)(const raven::AccelerometerEvent *))(*(void *)a2 + 16))(a2);
    uint64_t v67 = result;
    uint64_t v69 = v68;
    if (!v48 || !*((unsigned char *)this + 1041))
    {
      if (!v27) {
        return result;
      }
      if (*((unsigned char *)this + 1040))
      {
        int v87 = *((unsigned __int8 *)this + 1544);
        if (*((unsigned char *)this + 1544)) {
          int v87 = *((unsigned __int8 *)this + 1504) - 1 < 2;
        }
        double v88 = *((double *)this + 123);
        double v89 = 0.0;
        if (*((unsigned char *)this + 576) && (*((void *)this + 75) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
        {
          double v90 = sqrt(*((double *)this + 77));
          double v91 = *((double *)this + 75) + v90 * 3.0;
          BOOL v92 = *(uint64_t *)&v90 <= -1
             || ((*(void *)&v90 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF;
          BOOL v93 = v92 && (unint64_t)(*(void *)&v90 - 1) >= 0xFFFFFFFFFFFFFLL;
          BOOL v94 = !v93 || (*(void *)&v90 & 0x7FFFFFFFFFFFFFFFLL) == 0;
          double v89 = 0.0;
          if (v94) {
            double v89 = v91;
          }
        }
        BOOL v95 = v89 < v88;
        if (*((unsigned char *)this + 3984))
        {
          BOOL v95 = v89 < v88;
          if (*((double *)this + 363) > sqrt(*((double *)this + 367))) {
            BOOL v95 = 1;
          }
        }
        double v96 = 0.01;
        double v97 = 0.99;
        if (!v95) {
          double v97 = 0.01;
        }
        double v98 = 4.0;
        if ((v95 & v87) == 0) {
          double v98 = 0.1;
        }
        double v99 = 1.0 - v97;
        goto LABEL_158;
      }
      double v100 = *((double *)this + 124);
      double v101 = 0.0;
      if (*((unsigned char *)this + 624) && (*((void *)this + 81) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
      {
        double v102 = sqrt(*((double *)this + 83));
        double v103 = *((double *)this + 81) + v102 * 3.0;
        BOOL v104 = *(uint64_t *)&v102 <= -1
            || ((*(void *)&v102 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF;
        BOOL v105 = v104 && (unint64_t)(*(void *)&v102 - 1) >= 0xFFFFFFFFFFFFFLL;
        BOOL v106 = !v105 || (*(void *)&v102 & 0x7FFFFFFFFFFFFFFFLL) == 0;
        double v101 = 0.0;
        if (v106) {
          double v101 = v103;
        }
      }
      int v86 = v101 < v100;
      if (*((unsigned char *)this + 3984))
      {
        int v86 = v101 < v100;
        if (*((double *)this + 363) > sqrt(*((double *)this + 367))) {
          int v86 = 1;
        }
      }
LABEL_153:
      double v99 = 0.01;
      double v97 = 0.99;
      if (!v86) {
        double v97 = 0.01;
      }
      double v98 = 4.0;
      if (v86) {
        double v98 = 0.1;
      }
      double v96 = fmin(fmax(1.0 - v97, 0.0), 1.0);
LABEL_158:
      double v107 = v98 + -0.1;
      double v108 = v107 * v99 + 0.1;
      double v109 = v107 * v97 + 0.1;
      double v110 = v107 * v96 + 0.1;
      double v111 = v110 + v108 + v109;
      double v112 = v108 / v111;
      double v113 = v109 / v111;
      double v114 = v110 / v111;
      uint64_t result = (*(uint64_t (**)(const raven::AccelerometerEvent *))(*(void *)a2 + 16))(a2);
      int v115 = *((unsigned __int8 *)this + 64);
      *(void *)this = sub_18DFF12AC;
      *((void *)this + 1) = v67;
      *((void *)this + 2) = v69;
      *((double *)this + 3) = v112;
      *((double *)this + 4) = v114;
      *((double *)this + 5) = v113;
      *((void *)this + 6) = result;
      *((void *)this + 7) = v116;
      if (!v115) {
        *((unsigned char *)this + 64) = 1;
      }
      return result;
    }
    if (*((unsigned char *)this + 936))
    {
      double v70 = *((double *)this + 124);
      double v71 = 0.0;
      if (*((unsigned char *)this + 624) && (*((void *)this + 81) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
      {
        double v72 = sqrt(*((double *)this + 83));
        double v73 = *((double *)this + 81) + v72 * 3.0;
        BOOL v74 = *(uint64_t *)&v72 <= -1 || ((*(void *)&v72 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF;
        BOOL v75 = v74 && (unint64_t)(*(void *)&v72 - 1) >= 0xFFFFFFFFFFFFFLL;
        BOOL v76 = !v75 || (*(void *)&v72 & 0x7FFFFFFFFFFFFFFFLL) == 0;
        double v71 = 0.0;
        if (v76) {
          double v71 = v73;
        }
      }
      BOOL v77 = v71 < v70;
      if (*((unsigned char *)this + 3984))
      {
        BOOL v77 = v71 < v70;
        if (*((double *)this + 363) > sqrt(*((double *)this + 367))) {
          BOOL v77 = 1;
        }
      }
      double v78 = *((double *)this + 113) * v70;
      double v79 = 0.0;
      if (*((unsigned char *)this + 528) && (*((void *)this + 69) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
      {
        double v80 = sqrt(*((double *)this + 71));
        double v81 = *((double *)this + 69) + v80 * 3.0;
        BOOL v82 = *(uint64_t *)&v80 <= -1 || ((*(void *)&v80 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF;
        BOOL v83 = v82 && (unint64_t)(*(void *)&v80 - 1) >= 0xFFFFFFFFFFFFFLL;
        BOOL v84 = !v83 || (*(void *)&v80 & 0x7FFFFFFFFFFFFFFFLL) == 0;
        double v79 = 0.0;
        if (v84) {
          double v79 = v81;
        }
      }
      BOOL v85 = v79 < v78;
      if (*((unsigned char *)this + 3984) && *((double *)this + 363) > sqrt(*((double *)this + 367))) {
        BOOL v85 = 1;
      }
      int v86 = v77 || v85;
      goto LABEL_153;
    }
LABEL_161:
    sub_18DFF28FC();
  }
  return result;
}

uint64_t sub_18DFF11E4(uint64_t a1, double *a2, double a3)
{
  if (!*(unsigned char *)a1)
  {
    *(unsigned char *)a1 = 0;
    *(_OWORD *)(a1 + 4) = 0u;
    *(_OWORD *)(a1 + 20) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
  }
  if (a3 <= 0.0) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v3 = *(unsigned int *)(a1 + 4);
  if (v3 != -1)
  {
    double v4 = *(double *)(a1 + 8) + a3;
    double v5 = *(double *)(a1 + 16) + a3 * a3;
    *(double *)(a1 + 8) = v4;
    *(double *)(a1 + 16) = v5;
    double v6 = *(double *)(a1 + 24);
    double v7 = *(double *)(a1 + 32);
    double v8 = *a2 - v6;
    double v9 = v6 + a3 / v4 * v8;
    *(_DWORD *)(a1 + 4) = v3 + 1;
    *(double *)(a1 + 24) = v9;
    double v10 = v7 + v8 * a3 * (*a2 - v9);
    *(double *)(a1 + 32) = v10;
    if (v10 >= 0.0)
    {
      if (!v3)
      {
LABEL_10:
        uint64_t v3 = 0;
        *(unsigned char *)a1 = 1;
        return v3;
      }
      double v11 = v4 * v4 - v5;
      if (v11 > 0.000000015)
      {
        double v12 = v4 / v11;
        if (v12 > 0.000000015)
        {
          *(double *)(a1 + 40) = v12 * v10;
          goto LABEL_10;
        }
      }
    }
    return 0xFFFFFFFFLL;
  }
  return v3;
}

uint64_t sub_18DFF12AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(void *)(a1 + 16);
  if ((v8 <= -1 || ((v8 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF)
    && (unint64_t)(v8 - 1) >= 0xFFFFFFFFFFFFFLL
    && (v8 & 0x7FFFFFFFFFFFFFFFLL) != 0)
  {
    __int16 v27 = 12;
    unsigned __int8 v26 = 4;
    double v23 = *(double *)(a1 + 8) + (double)*(uint64_t *)a1;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v27, &v26, "time,%.3lf,e-function failure on line %d: %s() %s", a4, a5, a6, a7, a8, SLOBYTE(v23));
    return 0xFFFFFFFFLL;
  }
  uint64_t v12 = *(void *)(a1 + 24);
  if ((v12 <= -1 || ((v12 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF)
    && (unint64_t)(v12 - 1) >= 0xFFFFFFFFFFFFFLL
    && (v12 & 0x7FFFFFFFFFFFFFFFLL) != 0)
  {
    __int16 v29 = 12;
    unsigned __int8 v28 = 4;
    double v24 = *(double *)(a1 + 8) + (double)*(uint64_t *)a1;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v29, &v28, "time,%.3lf,e-function failure on line %d: %s() %s", a4, a5, a6, a7, a8, SLOBYTE(v24));
    return 0xFFFFFFFFLL;
  }
  uint64_t v16 = *(void *)(a1 + 32);
  if ((v16 <= -1 || ((v16 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF)
    && (unint64_t)(v16 - 1) >= 0xFFFFFFFFFFFFFLL
    && (v16 & 0x7FFFFFFFFFFFFFFFLL) != 0)
  {
    __int16 v31 = 12;
    unsigned __int8 v30 = 4;
    double v25 = *(double *)(a1 + 8) + (double)*(uint64_t *)a1;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v31, &v30, "time,%.3lf,e-function failure on line %d: %s() %s", a4, a5, a6, a7, a8, SLOBYTE(v25));
    return 0xFFFFFFFFLL;
  }
  uint64_t v20 = 0;
  *(_OWORD *)(a2 + 8) = xmmword_18E1F6F60;
  double v21 = *(uint64_t **)(a2 + 32);
  uint64_t *v21 = v8;
  v21[1] = *(void *)(a1 + 24);
  unsigned int v21[2] = *(void *)(a1 + 32);
  return v20;
}

__n128 raven::RavenMovingStateEstimator::HandleEvent(__n128 *this, const raven::ActivityStateEvent *a2)
{
  double v4 = (char *)a2 + 104;
  if (*((unsigned char *)a2 + 104) == 5)
  {
    unsigned __int8 v5 = this[87].n128_u8[0];
    if (v5)
    {
      unsigned int v6 = this[84].n128_u8[8];
      unsigned __int8 v5 = v6 > 3 || (v6 & 0xF) == 1;
    }
  }
  else
  {
    unsigned __int8 v5 = 0;
  }
  this[65].n128_u8[0] = v5;
  if (sub_18DFF161C((double *)a2 + 13) > 0.95) {
    this[65].n128_u8[1] = (*v4 < 0xAuLL) & (0xCu >> *v4);
  }
  if (this[77].n128_u8[8])
  {
    __n128 v7 = *(__n128 *)((char *)a2 + 8);
    __n128 v8 = *(__n128 *)((char *)a2 + 24);
    __n128 v9 = *(__n128 *)((char *)a2 + 40);
    this[69] = *(__n128 *)((char *)a2 + 56);
    this[68] = v9;
    this[67] = v8;
    this[66] = v7;
    __n128 v10 = *(__n128 *)((char *)a2 + 72);
    __n128 v11 = *(__n128 *)((char *)a2 + 88);
    __n128 v12 = *(__n128 *)((char *)a2 + 104);
    this[73] = *(__n128 *)((char *)a2 + 120);
    this[72] = v12;
    this[71] = v11;
    this[70] = v10;
    __n128 result = *(__n128 *)((char *)a2 + 136);
    __n128 v14 = *(__n128 *)((char *)a2 + 152);
    __n128 v15 = *(__n128 *)((char *)a2 + 168);
    this[77].n128_u64[0] = *((void *)a2 + 23);
    this[76] = v15;
    this[75] = v14;
    this[74] = result;
  }
  else
  {
    this[65].n128_u64[1] = (unint64_t)&unk_1EDD140B8;
    __n128 v16 = *(__n128 *)((char *)a2 + 8);
    __n128 v17 = *(__n128 *)((char *)a2 + 24);
    __n128 v18 = *(__n128 *)((char *)a2 + 40);
    this[69] = *(__n128 *)((char *)a2 + 56);
    this[68] = v18;
    this[67] = v17;
    this[66] = v16;
    __n128 v19 = *(__n128 *)((char *)a2 + 72);
    __n128 v20 = *(__n128 *)((char *)a2 + 88);
    __n128 v21 = *(__n128 *)((char *)a2 + 104);
    this[73] = *(__n128 *)((char *)a2 + 120);
    this[72] = v21;
    this[71] = v20;
    this[70] = v19;
    __n128 result = *(__n128 *)((char *)a2 + 136);
    __n128 v22 = *(__n128 *)((char *)a2 + 152);
    __n128 v23 = *(__n128 *)((char *)a2 + 168);
    this[77].n128_u64[0] = *((void *)a2 + 23);
    this[76] = v23;
    this[75] = v22;
    this[74] = result;
    this[77].n128_u8[8] = 1;
  }
  return result;
}

double sub_18DFF161C(double *a1)
{
  switch(*(unsigned char *)a1)
  {
    case 0:
      char v1 = a1 + 1;
      goto LABEL_12;
    case 1:
      char v1 = a1 + 2;
      goto LABEL_12;
    case 2:
      char v1 = a1 + 3;
      goto LABEL_12;
    case 3:
      char v1 = a1 + 4;
      goto LABEL_12;
    case 4:
      char v1 = a1 + 5;
      goto LABEL_12;
    case 5:
      char v1 = a1 + 6;
      goto LABEL_12;
    case 6:
      char v1 = a1 + 7;
      goto LABEL_12;
    case 7:
      char v1 = a1 + 8;
      goto LABEL_12;
    case 8:
      char v1 = a1 + 9;
      goto LABEL_12;
    case 9:
      char v1 = a1 + 10;
LABEL_12:
      double result = *v1;
      break;
    default:
      return result;
  }
  return result;
}

__n128 raven::RavenMovingStateEstimator::HandleEvent(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 1392))
  {
    *(_OWORD *)(a1 + 1256) = *(_OWORD *)(a2 + 8);
    long long v2 = *(_OWORD *)(a2 + 24);
    long long v3 = *(_OWORD *)(a2 + 40);
    long long v4 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 1320) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 1304) = v4;
    *(_OWORD *)(a1 + 1288) = v3;
    *(_OWORD *)(a1 + 1272) = v2;
    __n128 result = *(__n128 *)(a2 + 88);
    long long v6 = *(_OWORD *)(a2 + 104);
    long long v7 = *(_OWORD *)(a2 + 120);
    *(void *)(a1 + 1384) = *(void *)(a2 + 136);
    *(_OWORD *)(a1 + 1368) = v7;
    *(_OWORD *)(a1 + 1352) = v6;
    *(__n128 *)(a1 + 1336) = result;
  }
  else
  {
    *(void *)(a1 + 1248) = &unk_1EDD13AA8;
    *(_OWORD *)(a1 + 1256) = *(_OWORD *)(a2 + 8);
    long long v8 = *(_OWORD *)(a2 + 24);
    long long v9 = *(_OWORD *)(a2 + 40);
    long long v10 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 1320) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 1304) = v10;
    *(_OWORD *)(a1 + 1288) = v9;
    *(_OWORD *)(a1 + 1272) = v8;
    __n128 result = *(__n128 *)(a2 + 88);
    long long v11 = *(_OWORD *)(a2 + 104);
    long long v12 = *(_OWORD *)(a2 + 120);
    *(void *)(a1 + 1384) = *(void *)(a2 + 136);
    *(_OWORD *)(a1 + 1368) = v12;
    *(_OWORD *)(a1 + 1352) = v11;
    *(__n128 *)(a1 + 1336) = result;
    *(unsigned char *)(a1 + 1392) = 1;
  }
  return result;
}

uint64_t raven::RavenMovingStateEstimator::HandleEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
  uint64_t v6 = v5;
  uint64_t v7 = *(unsigned __int8 *)(a2 + 104) - 1;
  long long v36 = *(_OWORD *)(a2 + 120);
  uint64_t v37 = *(void *)(a2 + 136);
  double v8 = *((double *)&v36 + v7);
  if (*(unsigned char *)(a1 + 1040))
  {
    *(void *)&long long v34 = *((void *)&v36 + v7);
    *((double *)&v34 + 1) = v8;
    double v35 = 1.0 - v8;
    long long v32 = xmmword_18E1F8730;
    double v33 = 0.01;
  }
  else
  {
    long long v34 = xmmword_18E1F8730;
    double v35 = 0.01;
    *(double *)&long long v32 = v8;
    *((double *)&v32 + 1) = v8;
    double v33 = 1.0 - v8;
  }
  v31[0] = 1.0 - v8;
  v31[1] = 1.0 - v8;
  v31[2] = v8;
  double v9 = *((double *)&v34 + v7) * 0.9 + 0.1;
  double v10 = v31[v7] * 0.9 + 0.1;
  double v11 = *((double *)&v32 + v7) * 0.9 + 0.1;
  double v12 = v11 + v9 + v10;
  double v13 = v9 / v12;
  double v14 = v10 / v12;
  double v15 = v11 / v12;
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
  int v17 = *(unsigned __int8 *)(a1 + 136);
  *(void *)(a1 + 72) = sub_18DFF12AC;
  *(void *)(a1 + 80) = v4;
  *(void *)(a1 + 88) = v6;
  *(double *)(a1 + 96) = v13;
  *(double *)(a1 + 104) = v15;
  *(double *)(a1 + 112) = v14;
  *(void *)(a1 + 120) = result;
  *(void *)(a1 + 128) = v18;
  if (!v17) {
    *(unsigned char *)(a1 + 136) = 1;
  }
  if (*(unsigned char *)(a1 + 1544))
  {
    *(_OWORD *)(a1 + 1408) = *(_OWORD *)(a2 + 8);
    long long v19 = *(_OWORD *)(a2 + 24);
    long long v20 = *(_OWORD *)(a2 + 40);
    long long v21 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 1472) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 1456) = v21;
    *(_OWORD *)(a1 + 1440) = v20;
    *(_OWORD *)(a1 + 1424) = v19;
    long long v22 = *(_OWORD *)(a2 + 88);
    long long v23 = *(_OWORD *)(a2 + 104);
    long long v24 = *(_OWORD *)(a2 + 120);
    *(void *)(a1 + 1536) = *(void *)(a2 + 136);
    *(_OWORD *)(a1 + 1520) = v24;
    *(_OWORD *)(a1 + 1504) = v23;
    *(_OWORD *)(a1 + 1488) = v22;
  }
  else
  {
    *(void *)(a1 + 1400) = &unk_1EDD13CF0;
    *(_OWORD *)(a1 + 1408) = *(_OWORD *)(a2 + 8);
    long long v25 = *(_OWORD *)(a2 + 24);
    long long v26 = *(_OWORD *)(a2 + 40);
    long long v27 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 1472) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 1456) = v27;
    *(_OWORD *)(a1 + 1440) = v26;
    *(_OWORD *)(a1 + 1424) = v25;
    long long v28 = *(_OWORD *)(a2 + 88);
    long long v29 = *(_OWORD *)(a2 + 104);
    long long v30 = *(_OWORD *)(a2 + 120);
    *(void *)(a1 + 1536) = *(void *)(a2 + 136);
    *(_OWORD *)(a1 + 1520) = v30;
    *(_OWORD *)(a1 + 1504) = v29;
    *(_OWORD *)(a1 + 1488) = v28;
    *(unsigned char *)(a1 + 1544) = 1;
  }
  return result;
}

uint64_t raven::RavenMovingStateEstimator::HandleEvent(uint64_t this, const raven::RavenSolutionEvent *a2)
{
  if (*((unsigned char *)a2 + 208) == 1 && *((unsigned char *)a2 + 209) == 2 && *((unsigned char *)a2 + 1344) != 0)
  {
    uint64_t v5 = this;
    if (*(unsigned char *)(this + 3984))
    {
      uint64_t v6 = (cnstatistics *)memcpy((void *)(this + 1560), (char *)a2 + 8, 0x971uLL);
    }
    else
    {
      *(void *)(this + 1552) = &unk_1EDD14150;
      uint64_t v6 = (cnstatistics *)memcpy((void *)(this + 1560), (char *)a2 + 8, 0x971uLL);
      *(unsigned char *)(v5 + 3984) = 1;
    }
    double v7 = sqrt(*((double *)a2 + 173));
    double v8 = cnstatistics::NormalCDF(v6, *((double *)a2 + 169), 0.25, 0.05);
    double v9 = 1.0 - v8;
    if (*(unsigned char *)(v5 + 1040)) {
      double v10 = 1.0 - v8;
    }
    else {
      double v10 = 0.01;
    }
    if (*(unsigned char *)(v5 + 1040)) {
      double v9 = 0.01;
    }
    double v11 = *((double *)a2 + 169);
    BOOL v12 = v7 + v7 >= v11 || v11 <= 5.0;
    double v13 = 7.9;
    if (v12) {
      double v13 = 0.0;
    }
    double v14 = v13 * v10 + 0.1;
    double v15 = v13 * v8 + 0.1;
    double v16 = v13 * v9 + 0.1;
    double v17 = v16 + v14 + v15;
    double v18 = v14 / v17;
    double v19 = v15 / v17;
    double v20 = v16 / v17;
    this = (*(uint64_t (**)(const raven::RavenSolutionEvent *))(*(void *)a2 + 16))(a2);
    int v21 = *(unsigned __int8 *)(v5 + 208);
    *(void *)(v5 + 144) = sub_18DFF12AC;
    *(void *)(v5 + 152) = 0;
    *(void *)(v5 + 160) = 0x7FF8000000000000;
    *(double *)(v5 + 168) = v18;
    *(double *)(v5 + 176) = v20;
    *(double *)(v5 + 184) = v19;
    *(void *)(v5 + 192) = this;
    *(void *)(v5 + 200) = v22;
    if (!v21) {
      *(unsigned char *)(v5 + 208) = 1;
    }
  }
  return this;
}

uint64_t raven::RavenMovingStateEstimator::HandleEvent(raven::RavenMovingStateEstimator *this, const raven::TimeMarkEvent *a2)
{
  if (*((unsigned char *)this + 217))
  {
    if (*((unsigned char *)this + 216)
      || (*(void *)&long long v35 = (*(uint64_t (**)(const raven::TimeMarkEvent *))(*(void *)a2 + 16))(a2),
          *((void *)&v35 + 1) = v31,
          !raven::RavenMovingStateEstimator::Initialize((uint64_t)this, (uint64_t)&v35)))
    {
      uint64_t v5 = (*(uint64_t (**)(const raven::TimeMarkEvent *))(*(void *)a2 + 16))(a2);
      double v8 = v4;
      if (v5) {
        BOOL v9 = 1;
      }
      else {
        BOOL v9 = (*(void *)&v4 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
      }
      char v10 = v9;
      while (1)
      {
        *(void *)&long long v35 = 0;
        *((void *)&v35 + 1) = 0x3FA999999999999ALL;
        uint64_t v11 = CNTimeSpan::operator+((uint64_t)this + 4144, &v35, v6, v7);
        *(double *)v14.i64 = v12;
        if ((v10 & 1) == 0
          || !v11 && (*(void *)&v12 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000
          || (BOOL v15 = v5 <= v11, v5 == v11))
        {
          BOOL v15 = v8 <= v12;
        }
        if (v15) {
          return 0;
        }
        uint64_t v33 = 0;
        uint64_t v34 = 0x3FB999999999999ALL;
        *(void *)&long long v35 = CNTimeSpan::operator+((uint64_t)this + 4144, &v33, v14, v13);
        *((void *)&v35 + 1) = v16;
        double v17 = (cnprint::CNPrinter *)raven::RavenMovingStateEstimator::Predict((uint64_t)this, &v35);
        if (v17) {
          break;
        }
        if (*((unsigned char *)this + 136))
        {
          if (!*((unsigned char *)this + 1544)) {
            sub_18DFF28FC();
          }
          if (*((unsigned char *)this + 1504)) {
            sub_18DFF1E68((uint64_t)this + 3992, *((void *)this + 9), (uint64_t)this + 80);
          }
        }
        if (*((unsigned char *)this + 3984))
        {
          uint64_t v33 = (*(uint64_t (**)(char *))(*((void *)this + 194) + 16))((char *)this + 1552);
          uint64_t v34 = v18;
          *(double *)v7.i64 = (double)CNTimeSpan::operator-((uint64_t)&v35, &v33, v19, v20);
          *(double *)v6.i64 = v21 + *(double *)v7.i64;
          if (v21 + *(double *)v7.i64 >= 1.25)
          {
            if (*((unsigned char *)this + 3984)) {
              *((unsigned char *)this + 3984) = 0;
            }
            if (*((unsigned char *)this + 208)) {
              *((unsigned char *)this + 208) = 0;
            }
          }
          else if (*((unsigned char *)this + 208))
          {
            sub_18DFF1E68((uint64_t)this + 3992, *((void *)this + 18), (uint64_t)this + 152);
          }
        }
        if (*((unsigned char *)this + 64))
        {
          *(double *)v7.i64 = (double)CNTimeSpan::operator-((uint64_t)&v35, (void *)this + 6, v6, v7);
          *(double *)v6.i64 = v22 + *(double *)v7.i64;
          if (v22 + *(double *)v7.i64 >= 0.5) {
            *((unsigned char *)this + 64) = 0;
          }
          else {
            sub_18DFF1E68((uint64_t)this + 3992, *(void *)this, (uint64_t)this + 8);
          }
        }
      }
      if (cnprint::CNPrinter::GetLogLevel(v17) <= 1)
      {
        LOWORD(v33) = 12;
        unsigned __int8 v32 = 1;
        char v24 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 4160, (uint64_t)&v35, "RavenMovingStateEstimator,failed to predict");
        if (*((char *)this + 4183) >= 0) {
          LOBYTE(v30) = v24;
        }
        else {
          uint64_t v30 = *((void *)this + 520);
        }
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v33, &v32, "%s", v25, v26, v27, v28, v29, v30);
      }
    }
  }
  return 0xFFFFFFFFLL;
}

void sub_18DFF1E68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_DWORD *)(a1 + 136) == 1) {
    sub_18DFE2F24(a1 + 8, a1 + 72);
  }
  uint64_t v73 = 0x100000001;
  v71[3] = &unk_1EDD17F58;
  *(void *)&long long v6 = 0x100000001;
  *((void *)&v6 + 1) = 0x100000001;
  long long v72 = v6;
  BOOL v74 = &v75;
  uint64_t v75 = a2;
  uint64_t v69 = 0x100000003;
  uint64_t v67 = &unk_1EDD18D68;
  long long v68 = v6;
  double v70 = v71;
  v71[0] = a3;
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  unsigned int v8 = *(_DWORD *)(a1 + 20);
  sub_18DFF2DB8((uint64_t)v65, (uint64_t)&v67);
  if (v7 <= v8) {
    unsigned int v9 = v8;
  }
  else {
    unsigned int v9 = v7;
  }
  if (v8) {
    BOOL v10 = v7 == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = v9;
  }
  double v12 = *(double *)(a1 + 144);
  if (!*(_DWORD *)(a1 + 16) || !*(_DWORD *)(a1 + 20))
  {
    if ((v11 & 0x80000000) != 0) {
      __assert_rtn("Ones", "cnmatrix.h", 2317, "nr >= 0");
    }
    uint64_t v84 = 0x100000003;
    BOOL v82 = &unk_1EDD18D98;
    BOOL v85 = (double *)v86;
    *(void *)&long long v83 = v11 | 0x100000000;
    double v20 = 1.0 / (double)(int)v11;
    DWORD2(v83) = v11;
    HIDWORD(v83) = v11;
    sub_18DFE2CC8((uint64_t)&v82, 1.0);
    uint64_t v89 = 0x100000003;
    *(void *)&v22.f64[1] = 0x300000003;
    long long v88 = xmmword_18E1F6F60;
    int v87 = &unk_1EDD18D98;
    double v90 = (double *)v91;
    double v21 = &v82;
    goto LABEL_21;
  }
  uint64_t v89 = 0x100000003;
  long long v63 = xmmword_18E1F6F60;
  long long v88 = xmmword_18E1F6F60;
  int v87 = &unk_1EDD18D98;
  double v90 = (double *)v91;
  int8x16_t v13 = (cnprint::CNPrinter *)sub_18DFF2FDC(a1 + 8, 1, (uint64_t)&v87);
  double v14 = *v90;
  if (fabs(*v90 + -1.0) > v12)
  {
    if (cnprint::CNPrinter::GetLogLevel(v13) <= 1)
    {
      LOWORD(v87) = 2;
      LOBYTE(v82) = 1;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v87, (unsigned __int8 *)&v82, "WARNING: HMM update passed a non-normalized probability vector.", v15, v16, v17, v18, v19, 3);
    }
    if ((v11 & 0x80000000) == 0)
    {
      double v20 = 1.0 / v14;
      sub_18DFF2980((uint64_t)&v82, a1 + 8);
      float64x2_t v22 = (float64x2_t)vdupq_lane_s32((int32x2_t)(v11 | 0x100000000), 0);
      HIDWORD(v22.f64[0]) = 1;
      long long v83 = (__int128)v22;
      uint64_t v89 = 0x100000003;
      *(void *)&v22.f64[1] = 0x300000003;
      long long v88 = v63;
      int v87 = &unk_1EDD18D98;
      double v90 = (double *)v91;
LABEL_21:
      v22.f64[0] = v20;
      sub_18DFE3240((uint64_t)v21, (uint64_t)&v87, v22);
      goto LABEL_24;
    }
LABEL_60:
    __assert_rtn("Reshape", "cnmatrix.h", 2936, "nr >= 0");
  }
  if ((v11 & 0x80000000) != 0) {
    goto LABEL_60;
  }
  sub_18DFF2980((uint64_t)&v87, a1 + 8);
  int32x4_t v23 = vdupq_lane_s32((int32x2_t)(v11 | 0x100000000), 0);
  v23.i32[1] = 1;
  long long v88 = (__int128)v23;
LABEL_24:
  sub_18DFE2F24(a1 + 8, (uint64_t)&v87);
  sub_18DFF2980((uint64_t)&v87, a1 + 8);
  char v24 = (uint64_t (*)(void, void **))*v74;
  uint64_t v84 = 0x100000003;
  BOOL v82 = &unk_1EDD18D98;
  long long v64 = xmmword_18E1F6F60;
  long long v83 = xmmword_18E1F6F60;
  BOOL v85 = (double *)v86;
  uint64_t v25 = (cnprint::CNPrinter *)v24(*v66, &v82);
  if (v25)
  {
    LOWORD(v76) = 2;
    unsigned __int8 v81 = 4;
    unsigned __int8 v32 = "ERROR: HMM emission function failed.";
LABEL_26:
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v76, &v81, v32, v26, v27, v28, v29, v30, 3);
    return;
  }
  if (v11)
  {
    double v33 = 0.0;
    uint64_t v34 = v85;
    long long v35 = v85;
    uint64_t v36 = v11;
    do
    {
      double v37 = *v35;
      if (*v35 < 0.0 || v37 > 1.0)
      {
        LOWORD(v76) = 2;
        unsigned __int8 v81 = 4;
        unsigned __int8 v32 = "ERROR: HMM emission probability matrix is invalid.";
        goto LABEL_26;
      }
      double v33 = v33 + v37;
      ++v35;
      --v36;
    }
    while (v36);
    if (fabs(v33) > v12)
    {
      unsigned int v39 = v90;
      do
      {
        double v40 = *v34++;
        v31.n128_f64[0] = v40 * *v39;
        *v39++ = v31.n128_f64[0];
        --v11;
      }
      while (v11);
      goto LABEL_40;
    }
LABEL_46:
    LOWORD(v76) = 2;
    unsigned __int8 v81 = 4;
    unsigned __int8 v32 = "ERROR: HMM emission probability matrix is null matrix";
    goto LABEL_26;
  }
  if (v12 >= 0.0) {
    goto LABEL_46;
  }
LABEL_40:
  uint64_t v41 = DWORD1(v88);
  if (DWORD1(v88))
  {
    uint64_t v42 = 0;
    uint64_t v43 = v88;
    double v44 = v90;
    int v45 = 1;
    long long v46 = xmmword_18E1F6F60;
    do
    {
      double v47 = v44[(v43 * v42)];
      unsigned int v48 = v45;
      uint64_t v49 = v43 - 1;
      if (v43 >= 2)
      {
        do
        {
          double v47 = v47 + v44[v48++];
          --v49;
        }
        while (v49);
      }
      v80[v42++] = v47;
      v45 += v43;
    }
    while (v42 != v41);
    v31.n128_f64[0] = v80[0];
  }
  else
  {
    long long v46 = xmmword_18E1F6F60;
  }
  if (fabs(v31.n128_f64[0]) < 2.22044605e-16)
  {
    if (cnprint::CNPrinter::GetLogLevel(v25) <= 1)
    {
      LOWORD(v76) = 2;
      unsigned __int8 v81 = 1;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v76, &v81, "HMM state is null vector after update; revert to input state",
        v50,
        v51,
        v52,
        v53,
        v54,
        3);
    }
    __n128 v31 = sub_18DFE2F24((uint64_t)&v87, a1 + 8);
    uint64_t v55 = DWORD1(v88);
    if (DWORD1(v88))
    {
      uint64_t v56 = 0;
      uint64_t v57 = v88;
      double v58 = v90;
      int v59 = 1;
      long long v46 = v64;
      do
      {
        double v60 = v58[(v57 * v56)];
        unsigned int v61 = v59;
        uint64_t v62 = v57 - 1;
        if (v57 >= 2)
        {
          do
          {
            double v60 = v60 + v58[v61++];
            --v62;
          }
          while (v62);
        }
        v80[v56++] = v60;
        v59 += v57;
      }
      while (v56 != v55);
      v31.n128_f64[0] = v80[0];
    }
    else
    {
      long long v46 = v64;
    }
  }
  uint64_t v78 = 0x100000003;
  long long v77 = v46;
  BOOL v76 = &unk_1EDD18D98;
  double v79 = v80;
  v31.n128_f64[0] = 1.0 / v31.n128_f64[0];
  sub_18DFE3240((uint64_t)&v87, (uint64_t)&v76, (float64x2_t)v31);
  sub_18DFE2F24((uint64_t)&v87, (uint64_t)&v76);
  sub_18DFE2F24(a1 + 72, (uint64_t)&v87);
  *(_DWORD *)(a1 + 136) = 1;
}

uint64_t raven::RavenMovingStateEstimator::GetMovingStateEvent(raven::RavenMovingStateEstimator *this, raven::MovingStateEvent *a2)
{
  if (!*((unsigned char *)this + 217) || !*((unsigned char *)this + 216)) {
    return 0;
  }
  uint64_t v38 = 0x100000003;
  uint64_t v36 = &unk_1EDD18D98;
  long long v37 = xmmword_18E1F6F60;
  unsigned int v39 = (double *)&v40;
  long long v3 = *((_DWORD *)this + 1032)
     ? (raven::RavenMovingStateEstimator *)((char *)this + 4064)
     : (raven::RavenMovingStateEstimator *)((char *)this + 4000);
  sub_18DFE2F24((uint64_t)&v36, (uint64_t)v3);
  double v4 = v39;
  double v5 = *v39;
  if ((*(void *)v39 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
    return 0;
  }
  double v6 = v39[1];
  if ((*(void *)&v6 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
    return 0;
  }
  double v7 = v39[2];
  if ((*(void *)&v7 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
    return 0;
  }
  double v8 = 0.0;
  if (v5 <= 1.0) {
    double v9 = *v39;
  }
  else {
    double v9 = 1.0;
  }
  if (v5 >= 0.0) {
    double v10 = v9;
  }
  else {
    double v10 = 0.0;
  }
  if (v6 <= 1.0) {
    double v11 = v39[1];
  }
  else {
    double v11 = 1.0;
  }
  if (v6 >= 0.0) {
    double v12 = v11;
  }
  else {
    double v12 = 0.0;
  }
  *unsigned int v39 = v10;
  v4[1] = v12;
  if (v7 >= 0.0)
  {
    double v8 = 1.0;
    if (v7 <= 1.0) {
      double v8 = v7;
    }
  }
  void v4[2] = v8;
  uint64_t v13 = DWORD1(v37);
  if (DWORD1(v37))
  {
    uint64_t v14 = 0;
    uint64_t v15 = v37;
    int v16 = 1;
    do
    {
      double v17 = v4[(v15 * v14)];
      unsigned int v18 = v16;
      uint64_t v19 = v15 - 1;
      if (v15 >= 2)
      {
        do
        {
          double v17 = v17 + v4[v18++];
          --v19;
        }
        while (v19);
      }
      v35[v14++] = v17;
      v16 += v15;
    }
    while (v14 != v13);
    double v20 = v35[0] + -1.0;
  }
  else
  {
    double v20 = NAN;
  }
  if (fabs(v20) > 0.000000015) {
    return 0;
  }
  uint64_t v33 = 0x100000001;
  __n128 v31 = &unk_1EDD18048;
  *(void *)&long long v22 = 0x100000001;
  *((void *)&v22 + 1) = 0x100000001;
  long long v32 = v22;
  uint64_t v34 = v35;
  uint64_t v28 = 0x100000001;
  uint64_t v26 = &unk_1EDD180A8;
  long long v27 = v22;
  uint64_t v29 = &v30;
  sub_18DFE2718((uint64_t)&v36, (uint64_t)&v31, (uint64_t)&v26);
  if (*(_DWORD *)v29 <= 2u) {
    *((unsigned char *)a2 + 104) = *(_DWORD *)v29 + 1;
  }
  int32x4_t v23 = v39;
  double v24 = *v39;
  *((double *)a2 + 15) = *v39;
  double v25 = v23[1];
  *((double *)a2 + 16) = v25;
  *((double *)a2 + 17) = 1.0 - v24 - v25;
  *((void *)a2 + 14) = 0;
  return 1;
}

void *sub_18DFF26BC(void *result)
{
  *uint64_t result = &unk_1EDD174D8;
  return result;
}

void *sub_18DFF26DC(void *result)
{
  *uint64_t result = &unk_1EDD17478;
  return result;
}

void raven::RavenMovingStateEstimator::Reset(raven::RavenMovingStateEstimator *this)
{
  *((unsigned char *)this + 216) = 0;
  *((void *)this + 518) = 0;
  *((void *)this + 519) = 0x7FF8000000000000;
  *((unsigned char *)this + 736) = 0;
  *((_OWORD *)this + 54) = 0u;
  *(_OWORD *)((char *)this + 836) = 0u;
  *(_OWORD *)((char *)this + 852) = 0u;
  long long v2 = (_OWORD *)((char *)this + 232);
  *(_OWORD *)((char *)this + 740) = 0u;
  *(_OWORD *)((char *)this + 756) = 0u;
  *(_OWORD *)((char *)this + 769) = 0u;
  *(_OWORD *)((char *)this + 788) = 0u;
  *(_OWORD *)((char *)this + 804) = 0u;
  *(_OWORD *)((char *)this + 817) = 0u;
  do
  {
    *(unsigned char *)long long v2 = 0;
    *(_OWORD *)((char *)v2 + 100) = 0uLL;
    *(_OWORD *)((char *)v2 + 116) = 0uLL;
    v2[8] = 0uLL;
    *(_OWORD *)((char *)v2 + 4) = 0uLL;
    *(_OWORD *)((char *)v2 + 20) = 0uLL;
    *(_OWORD *)((char *)v2 + 33) = 0uLL;
    *(_OWORD *)((char *)v2 + 52) = 0uLL;
    *(_OWORD *)((char *)v2 + 68) = 0uLL;
    *(_OWORD *)((char *)v2 + 81) = 0uLL;
    v2 += 9;
  }
  while (v2 != (_OWORD *)((char *)this + 520));
  *((void *)this + 65) = 0;
  *((unsigned char *)this + 528) = 0;
  *((_OWORD *)this + 41) = 0u;
  *(_OWORD *)((char *)this + 628) = 0u;
  *(_OWORD *)((char *)this + 644) = 0u;
  *(_OWORD *)((char *)this + 532) = 0u;
  *(_OWORD *)((char *)this + 548) = 0u;
  *(_OWORD *)((char *)this + 561) = 0u;
  *(_OWORD *)((char *)this + 580) = 0u;
  *(_OWORD *)((char *)this + 596) = 0u;
  *(_OWORD *)((char *)this + 609) = 0u;
  if (*((unsigned char *)this + 936)) {
    *((unsigned char *)this + 936) = 0;
  }
  if (*((unsigned char *)this + 1016)) {
    *((unsigned char *)this + 1016) = 0;
  }
  *((unsigned char *)this + 672) = 0;
  *((_DWORD *)this + 176) = 0;
  uint64_t v3 = *((void *)this + 89);
  *((void *)this + 90) = v3;
  *((void *)this + 85) = 0;
  *((_OWORD *)this + 43) = xmmword_18E1F8720;
  unint64_t v4 = *((void *)this + 91) - v3;
  if (v4 >= 0x28)
  {
    *(void *)(v3 + 32) = 0;
    *(_OWORD *)uint64_t v3 = 0u;
    *(_OWORD *)(v3 + 16) = 0u;
    *((void *)this + 90) = v3 + 40;
  }
  else
  {
    double v5 = (char *)this + 728;
    if (v4 >> 1 <= 0xA) {
      unint64_t v6 = 10;
    }
    else {
      unint64_t v6 = v4 >> 1;
    }
    double v7 = (char *)sub_18DFF2948((uint64_t)v5, v6);
    *(_OWORD *)double v7 = 0u;
    *((_OWORD *)v7 + 1) = 0u;
    *((void *)v7 + 4) = 0;
    double v8 = v7 + 40;
    double v10 = &v7[4 * v9];
    double v11 = (char *)*((void *)this + 90);
    double v12 = (char *)*((void *)this + 89);
    while (v11 != v12)
    {
      int v13 = *((_DWORD *)v11 - 1);
      v11 -= 4;
      *((_DWORD *)v7 - 1) = v13;
      v7 -= 4;
    }
    *((void *)this + 89) = v7;
    *((void *)this + 90) = v8;
    *((void *)this + 91) = v10;
    if (v12) {
      operator delete(v12);
    }
  }
  *((unsigned char *)this + 672) = 1;
  *((_WORD *)this + 520) = 0;
  if (*((unsigned char *)this + 64)) {
    *((unsigned char *)this + 64) = 0;
  }
  if (*((unsigned char *)this + 136)) {
    *((unsigned char *)this + 136) = 0;
  }
  if (*((unsigned char *)this + 208)) {
    *((unsigned char *)this + 208) = 0;
  }
  if (*((unsigned char *)this + 1240)) {
    *((unsigned char *)this + 1240) = 0;
  }
  if (*((unsigned char *)this + 1392)) {
    *((unsigned char *)this + 1392) = 0;
  }
  if (*((unsigned char *)this + 1544)) {
    *((unsigned char *)this + 1544) = 0;
  }
  if (*((unsigned char *)this + 3984)) {
    *((unsigned char *)this + 3984) = 0;
  }
}

void sub_18DFF28FC()
{
  exceptioint n = __cxa_allocate_exception(8uLL);
  void *exception = MEMORY[0x1E4FBA4F8] + 16;
  __cxa_throw(exception, MEMORY[0x1E4FBA348], MEMORY[0x1E4FBA1F0]);
}

void *sub_18DFF2948(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62) {
    sub_18DEDF7D4();
  }
  return operator new(4 * a2);
}

__n128 sub_18DFF2980(uint64_t a1, uint64_t a2)
{
  result.n128_u64[0] = 0x100000003;
  *(void *)(a1 + 24) = 0x100000003;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1EDD18D98;
  if (a1 == a2)
  {
    double v17 = "this != &(A)";
    int v18 = 603;
    goto LABEL_16;
  }
  int v3 = *(_DWORD *)(a2 + 8);
  int v4 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = v4;
  uint64_t v5 = (v4 * v3);
  *(_DWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 20) = v3;
  unint64_t v6 = (unint64_t *)(a1 + 40);
  *(void *)(a1 + 32) = a1 + 40;
  if (*(_DWORD *)(a2 + 8) > 3u)
  {
    double v17 = "this->max_num_rows_ >= A.num_rows_";
    int v18 = 616;
    goto LABEL_16;
  }
  if (*(_DWORD *)(a2 + 12) >= 2u)
  {
    double v17 = "this->max_num_cols_ >= A.num_cols_";
    int v18 = 617;
LABEL_16:
    __assert_rtn("CNMatrix", "cnmatrix.h", v18, v17);
  }
  int v7 = *(_DWORD *)(a2 + 16);
  if (v7 > 3)
  {
    uint64_t v10 = (v7 - 2);
    double v11 = *(long long **)(a2 + 32);
    uint64_t v12 = (v7 - 1) >> 1;
    int v13 = v11;
    uint64_t v14 = (_OWORD *)(a1 + 40);
    do
    {
      long long v15 = *v13++;
      *v14++ = v15;
      --v12;
    }
    while (v12);
    uint64_t v16 = v10;
    __n128 result = *(__n128 *)((char *)v11 + v16 * 8);
    *(__n128 *)&v6[v16] = result;
  }
  else if ((int)v5 >= 1)
  {
    double v8 = *(unint64_t **)(a2 + 32);
    do
    {
      unint64_t v9 = *v8++;
      result.n128_u64[0] = v9;
      *v6++ = v9;
      --v5;
    }
    while (v5);
  }
  return result;
}

void sub_18DFF2AB0(_Unwind_Exception *a1)
{
  *char v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

double sub_18DFF2AD0(uint64_t a1, uint64_t a2, int a3)
{
  int v3 = dword_1EB4038C8;
  *(void *)&double result = 0x100000003;
  *(void *)(a1 + 24) = 0x100000003;
  *(void *)a1 = &unk_1EDD18D98;
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = 1;
  *(_DWORD *)(a1 + 16) = v3;
  *(_DWORD *)(a1 + 20) = v3;
  *(void *)(a1 + 32) = a1 + 40;
  if (v3)
  {
    uint64_t v5 = 0;
    uint64_t v6 = qword_1EB4038D8;
    int v7 = *(_DWORD *)(a2 + 20) * a3;
    uint64_t v8 = *(void *)(a2 + 32);
    do
    {
      double result = *(double *)(v8 + 8 * (*(_DWORD *)(v6 + 4 * (int)v5) + v7));
      *(double *)(a1 + 40 + 8 * v5++) = result;
    }
    while (v3 != v5);
  }
  return result;
}

void *sub_18DFF2B50(void *result)
{
  *double result = &unk_1EDD173B8;
  return result;
}

void *sub_18DFF2B70(void *result)
{
  *double result = &unk_1EDD173B8;
  return result;
}

void *sub_18DFF2B90(void *result)
{
  *double result = &unk_1EDD171D8;
  return result;
}

void sub_18DFF2BB0(void *a1)
{
  *a1 = &unk_1EDD171D8;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18DFF2BE0(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18DFF2BEC(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    unsigned int v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      int v4 = *(_DWORD *)(a1 + 16);
      int v5 = *(_DWORD *)(a1 + 20);
      bzero(&v9, v4);
      if (v4 >= 3)
      {
        int v6 = v9;
        uint64_t v7 = 8;
        int v8 = v3 + v1 - v5;
        do
        {
          if (!v6)
          {
            *(void *)(*(void *)(a1 + 32) + 8 * (v8 % (v4 - 1))) = *(void *)(*(void *)(a1 + 32) + v7);
            int v6 = 1;
          }
          v8 += v3 + v1 - v5;
          v7 += 8;
        }
        while (8 * (v4 - 1) != v7);
      }
    }
  }
}

void sub_18DFF2CA4(void *a1)
{
  *a1 = &unk_1EDD173B8;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18DFF2CD4(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18DFF2CE0(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    unsigned int v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      int v4 = *(_DWORD *)(a1 + 16);
      int v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        uint64_t v6 = (v4 - 1);
        uint64_t v7 = 1;
        do
        {
          int v8 = &v13[v7];
          if (!v13[v7])
          {
            uint64_t v9 = *(void *)(*(void *)(a1 + 32) + 8 * v7);
            int v10 = v7;
            do
            {
              int v10 = (int)(v10 * (v3 + v1 - v5)) % (int)v6;
              uint64_t v11 = *(void *)(a1 + 32);
              uint64_t v12 = *(void *)(v11 + 8 * v10);
              *(void *)(v11 + 8 * v10) = v9;
              unsigned char *v8 = 1;
              int v8 = &v13[v10];
              uint64_t v9 = v12;
            }
            while (!*v8);
          }
          ++v7;
        }
        while (v7 != v6);
      }
    }
  }
}

uint64_t sub_18DFF2DB8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 24) = 0x100000001;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)double result = &unk_1EDD17FE8;
  int v2 = *(_DWORD *)(a2 + 8);
  int v3 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(result + 8) = v2;
  *(_DWORD *)(result + 12) = v3;
  int v4 = v3 * v2;
  *(_DWORD *)(result + 16) = v4;
  *(_DWORD *)(result + 20) = v2;
  *(void *)(result + 32) = result + 40;
  if (*(_DWORD *)(a2 + 8) > 1u)
  {
    uint64_t v7 = "this->max_num_rows_ >= A.NumRows()";
    int v8 = 567;
    goto LABEL_9;
  }
  if (*(_DWORD *)(a2 + 12) > 1u)
  {
    uint64_t v7 = "this->max_num_cols_ >= A.NumCols()";
    int v8 = 568;
LABEL_9:
    __assert_rtn("CNMatrix", "cnmatrix.h", v8, v7);
  }
  if (v4 >= 1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 8 * v4;
    do
    {
      *(void *)(*(void *)(result + 32) + v5) = *(void *)(*(void *)(a2 + 32) + v5);
      v5 += 8;
    }
    while (v6 != v5);
  }
  return result;
}

void sub_18DFF2E94(_Unwind_Exception *a1)
{
  *unsigned int v1 = &unk_1EDD173B8;
  _Unwind_Resume(a1);
}

void sub_18DFF2EB4(void *a1)
{
  *a1 = &unk_1EDD173B8;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18DFF2EE4(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18DFF2EF0(uint64_t a1)
{
  sub_18DFF2F14(a1, &v1);
}

void sub_18DFF2F14(uint64_t a1, char *a2)
{
  unsigned int v2 = *(_DWORD *)(a1 + 8);
  if (v2 >= 2)
  {
    unsigned int v4 = *(_DWORD *)(a1 + 12);
    if (v4 >= 2)
    {
      int v6 = *(_DWORD *)(a1 + 20);
      bzero(a2, *(unsigned int *)(a1 + 16));
      int v7 = *(_DWORD *)(a1 + 16);
      if (v7 >= 3)
      {
        uint64_t v8 = (v7 - 1);
        uint64_t v9 = 1;
        do
        {
          int v10 = &a2[v9];
          if (!a2[v9])
          {
            uint64_t v11 = *(void *)(*(void *)(a1 + 32) + 8 * v9);
            int v12 = v9;
            do
            {
              int v12 = (int)(v12 * (v4 + v2 - v6)) % (int)v8;
              uint64_t v13 = *(void *)(a1 + 32);
              uint64_t v14 = *(void *)(v13 + 8 * v12);
              *(void *)(v13 + 8 * v12) = v11;
              *int v10 = 1;
              int v10 = &a2[v12];
              uint64_t v11 = v14;
            }
            while (!*v10);
          }
          ++v9;
        }
        while (v9 != v8);
      }
    }
  }
}

uint64_t sub_18DFF2FDC(uint64_t result, int a2, uint64_t a3)
{
  if (a2 == 1)
  {
    int v3 = *(_DWORD *)(result + 12);
    *(_DWORD *)(a3 + 8) = 1;
    *(_DWORD *)(a3 + 12) = v3;
    *(_DWORD *)(a3 + 16) = v3;
    *(_DWORD *)(a3 + 20) = 1;
    uint64_t v4 = *(unsigned int *)(result + 12);
    if (v4)
    {
      uint64_t v5 = 0;
      uint64_t v6 = *(unsigned int *)(result + 8);
      uint64_t v7 = *(void *)(result + 32);
      uint64_t v8 = *(void *)(a3 + 32);
      int v9 = 1;
      do
      {
        double v10 = *(double *)(v7 + 8 * (v6 * v5));
        unsigned int v11 = v9;
        uint64_t v12 = v6 - 1;
        if (v6 >= 2)
        {
          do
          {
            double v10 = v10 + *(double *)(v7 + 8 * v11++);
            --v12;
          }
          while (v12);
        }
        *(double *)(v8 + 8 * v5++) = v10;
        v9 += v6;
      }
      while (v5 != v4);
    }
  }
  else
  {
    v13.i32[1] = 1;
    v13.i32[0] = *(_DWORD *)(result + 8);
    int32x4_t v14 = vdupq_lane_s32(v13, 0);
    v14.i32[1] = 1;
    *(int32x4_t *)(a3 + 8) = v14;
    uint64_t v15 = *(unsigned int *)(result + 8);
    if (v15)
    {
      uint64_t v16 = *(uint64_t **)(result + 32);
      double v17 = *(void **)(a3 + 32);
      uint64_t v18 = *(unsigned int *)(result + 8);
      do
      {
        uint64_t v19 = *v16++;
        *v17++ = v19;
        --v18;
      }
      while (v18);
    }
    unsigned int v20 = *(_DWORD *)(result + 12);
    if (v20 >= 2)
    {
      uint64_t v21 = *(void *)(result + 32);
      long long v22 = *(double **)(a3 + 32);
      int v23 = 1;
      unsigned int v24 = v15;
      do
      {
        unsigned int v25 = v24;
        uint64_t v26 = v22;
        uint64_t v27 = v15;
        if (v15)
        {
          do
          {
            *uint64_t v26 = *(double *)(v21 + 8 * v25) + *v26;
            ++v26;
            ++v25;
            --v27;
          }
          while (v27);
        }
        ++v23;
        v24 += v15;
      }
      while (v23 != v20);
    }
  }
  return result;
}

void sub_18DFF30F4(void *a1)
{
  *a1 = &unk_1EDD17478;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18DFF3124(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18DFF3130(uint64_t a1)
{
  sub_18DEF3CF4(a1, &v1);
}

void sub_18DFF3154(void *a1)
{
  *a1 = &unk_1EDD174D8;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18DFF3184(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18DFF3190(uint64_t a1)
{
  sub_18DFE2870(a1, &v1);
}

uint64_t raven::RavenSolutionSelector::GetRavenSolution(raven::RavenSolutionSelector *this, raven::RavenSolutionEvent *a2)
{
  if (*(unsigned char *)this)
  {
    uint64_t v4 = (char *)this + 160;
    if (*((unsigned char *)this + 160))
    {
      if (sub_18DFF465C((void *)this + 7, v4))
      {
        v36[0] = v4;
        uint64_t v5 = sub_18DFF4710((uint64_t)this + 56, v4, (uint64_t)&std::piecewise_construct, v36);
        uint64_t v6 = v5;
        uint64_t v7 = v5 + 3;
        if (*((unsigned __int8 *)this + 160) != *((unsigned __int8 *)this + 136)
          || (v36[0] = (unsigned char *)((uint64_t (*)(uint64_t **))(*v7)[2])(v5 + 3),
              v36[1] = v8,
              !sub_18DEE8C5C((double *)v36, (double *)this + 18)))
        {
          memcpy((char *)a2 + 8, v6 + 4, 0x971uLL);
          *((unsigned char *)a2 + 208) = 4;
          *((unsigned char *)this + 136) = *((unsigned char *)this + 160);
          uint64_t v9 = ((uint64_t (*)(uint64_t **))v6[3][2])(v7);
          uint64_t result = 0;
          *((void *)this + 18) = v9;
          *((void *)this + 19) = v11;
          return result;
        }
      }
      else
      {
        LOWORD(v36[0]) = 12;
        unsigned __int8 v37 = 4;
        uint64_t v26 = (*(uint64_t (**)(raven::RavenSolutionEvent *))(*(void *)a2 + 16))(a2);
        double v35 = v27 + (double)v26;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v36, &v37, "t,%.3lf,Solution Selector: specified estimator unavailable", v28, v29, v30, v31, v32, SLOBYTE(v35));
      }
    }
    else
    {
      LOWORD(v36[0]) = 12;
      unsigned __int8 v37 = 2;
      uint64_t v19 = (*(uint64_t (**)(raven::RavenSolutionEvent *))(*(void *)a2 + 16))(a2);
      double v34 = v20 + (double)v19;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v36, &v37, "t,%.3lf,Solution Selector: no estimators meet yield criteria", v21, v22, v23, v24, v25, SLOBYTE(v34));
    }
  }
  else
  {
    LOWORD(v36[0]) = 12;
    unsigned __int8 v37 = 4;
    uint64_t v12 = (*(uint64_t (**)(raven::RavenSolutionEvent *))(*(void *)a2 + 16))(a2);
    double v33 = v13 + (double)v12;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v36, &v37, "t,%.3lf,Solution Selector: not configured", v14, v15, v16, v17, v18, SLOBYTE(v33));
  }
  return 0xFFFFFFFFLL;
}

void raven::RavenSolutionSelector::HandleEvent(raven::RavenSolutionSelector *this, const raven::RavenSolutionEvent *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!*(unsigned char *)this)
  {
    LOWORD(v71) = 12;
    LOBYTE(v70[0]) = 2;
    uint64_t v19 = "Solution Selector: not configured";
LABEL_46:
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v71, (unsigned __int8 *)v70, v19, a4, a5, a6, a7, a8, SLOBYTE(v66));
    return;
  }
  double v10 = (char *)a2 + 208;
  unsigned __int8 v73 = *((unsigned char *)a2 + 208);
  unsigned __int8 v11 = v73;
  switch(v73)
  {
    case 0u:
    case 5u:
      LOWORD(v71) = 12;
      LOBYTE(v70[0]) = 4;
      uint64_t v12 = (*(uint64_t (**)(const raven::RavenSolutionEvent *))(*(void *)a2 + 16))(a2);
      double v67 = v13 + (double)v12;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v71, (unsigned __int8 *)v70, "t,%.3lf,Solution Selector: invalid estimator input type,%d", v14, v15, v16, v17, v18, SLOBYTE(v67));
      return;
    case 1u:
      int v40 = *((unsigned __int8 *)this + 464);
      *((_OWORD *)this + 28) = *((_OWORD *)a2 + 73);
      if (!v40) {
        *((unsigned char *)this + 464) = 1;
      }
      goto LABEL_26;
    case 2u:
    case 3u:
      if (*(unsigned char *)(*((void *)this + 1) + 3352)) {
        BOOL v20 = *((unsigned char *)a2 + 2128) == 5;
      }
      else {
        BOOL v20 = 0;
      }
      if (v20 && (uint64_t v21 = sub_18DFF5184((void *)this + 51, v73)) != 0 && *((unsigned char *)v21 + 17))
      {
        if (!*((unsigned char *)this + 464)) {
          goto LABEL_15;
        }
        double v71 = (unsigned char *)(*(uint64_t (**)(const raven::RavenSolutionEvent *))(*(void *)a2 + 16))(a2);
        uint64_t v72 = v27;
        if (!*((unsigned char *)this + 464)) {
          sub_18DFF28FC();
        }
        uint64_t v30 = CNTimeSpan::operator-((uint64_t)&v71, (void *)this + 56, v28, v29);
        if (v31 + (double)v30 <= 10.0) {
          unsigned int v32 = 5;
        }
        else {
LABEL_15:
        }
          unsigned int v32 = 999;
        LOWORD(v71) = 12;
        LOBYTE(v70[0]) = 3;
        double v65 = *((double *)a2 + 2) + (double)*((uint64_t *)a2 + 1);
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v71, (unsigned __int8 *)v70, "t,%.3lf,Solution Selector: GNSS data starvation - increasing min required GNSS content,est,%d,min_meas_count,%d", v22, v23, v24, v25, v26, SLOBYTE(v65));
      }
      else
      {
        unsigned int v32 = 1;
      }
      if (*((_DWORD *)a2 + 85) >= v32
        && (*((_DWORD *)a2 + 84) >= v32 || *((_DWORD *)a2 + 83) >= v32 || *((_DWORD *)a2 + 82) >= v32))
      {
        if (!sub_18DFF5184((void *)this + 2, v11))
        {
          LOWORD(v71) = 12;
          LOBYTE(v70[0]) = 2;
          uint64_t v33 = (*(uint64_t (**)(const raven::RavenSolutionEvent *))(*(void *)a2 + 16))(a2);
          double v68 = v34 + (double)v33;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v71, (unsigned __int8 *)v70, "t,%.3lf,Solution Selector: GNSS data used in estimator,est,%d", v35, v36, v37, v38, v39, SLOBYTE(v68));
        }
        *(_OWORD *)(sub_18DFF5238((float *)this + 4, v11, &v73) + 3) = *((_OWORD *)a2 + 73);
      }
      goto LABEL_26;
    case 4u:
      return;
    default:
LABEL_26:
      uint64_t v41 = (cnprint::CNPrinter *)raven::RavenSolutionSelector::SolutionSatisfiesYieldCriteria(this, a2);
      if (v41)
      {
        if (!cnprint::CNPrinter::GetLogLevel(v41))
        {
          LOWORD(v71) = 12;
          LOBYTE(v70[0]) = 0;
          uint64_t v42 = (*(uint64_t (**)(const raven::RavenSolutionEvent *))(*(void *)a2 + 16))(a2);
          double v69 = v43 + (double)v42;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v71, (unsigned __int8 *)v70, "t,%.3lf,Solution Selector: saving estimator %d", v44, v45, v46, v47, v48, SLOBYTE(v69));
        }
        double v71 = v10;
        uint64_t v49 = sub_18DFF4710((uint64_t)this + 56, v10, (uint64_t)&std::piecewise_construct, &v71);
        memcpy(v49 + 4, (char *)a2 + 8, 0x971uLL);
      }
      uint64_t v50 = 0;
      *((unsigned char *)this + 160) = 0;
      double v51 = *(double *)(*((void *)this + 1) + 3472) - *(double *)(*((void *)this + 1) + 3304);
      break;
  }
  while (1)
  {
    uint64_t v52 = (uint64_t)sub_18DFF465C((void *)this + 7, (unsigned __int8 *)&byte_18E1F885E[v50]);
    if (v52)
    {
      uint64_t v53 = *(void *)(v52 + 1192);
      double v54 = *(double *)(v52 + 1200);
      double v71 = (unsigned char *)(*(uint64_t (**)(const raven::RavenSolutionEvent *))(*(void *)a2 + 16))(a2);
      uint64_t v72 = v55;
      v70[0] = 0;
      v70[1] = 0;
      *(double *)v56.i64 = v51;
      CNTimeSpan::SetTimeSpan(v70, 0, v56, v57);
      uint64_t v52 = CNTimeSpan::operator-((uint64_t)&v71, v70, v58, v59);
      if (v53) {
        BOOL v61 = 1;
      }
      else {
        BOOL v61 = (*(void *)&v54 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
      }
      if (!v61
        || !v52 && (*(void *)&v60 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000
        || (BOOL v62 = v53 <= v52, v53 == v52))
      {
        BOOL v62 = v54 <= v60;
      }
      if (!v62) {
        break;
      }
    }
    if (++v50 == 3) {
      goto LABEL_44;
    }
  }
  *((unsigned char *)this + 160) = byte_18E1F885E[v50];
LABEL_44:
  if (!cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v52))
  {
    LOWORD(v71) = 12;
    LOBYTE(v70[0]) = 0;
    uint64_t v63 = (*(uint64_t (**)(const raven::RavenSolutionEvent *))(*(void *)a2 + 16))(a2);
    double v66 = v64 + (double)v63;
    uint64_t v19 = "t,%.3lf,Solution Selector: selected estimator %d";
    goto LABEL_46;
  }
}

uint64_t raven::RavenSolutionSelector::SolutionSatisfiesYieldCriteria(raven::RavenSolutionSelector *this, const raven::RavenSolutionEvent *a2)
{
  unsigned int v6 = *((unsigned __int8 *)a2 + 208);
  uint64_t v4 = (unsigned __int8 *)a2 + 208;
  unsigned int v5 = v6;
  char v166 = v6;
  if (v4[1] != 2 || !*((unsigned char *)a2 + 1264))
  {
    uint64_t v15 = (cnprint::CNPrinter *)sub_18DFF5694((float *)this + 102, v5, &v166);
    *((unsigned char *)v15 + 17) = 1;
    if (cnprint::CNPrinter::GetLogLevel(v15) <= 1)
    {
      LOWORD(v165[0]) = 12;
      LOBYTE(v164) = 1;
      uint64_t v16 = (*(uint64_t (**)(const raven::RavenSolutionEvent *))(*(void *)a2 + 16))(a2);
      double v152 = v17 + (double)v16;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v165, (unsigned __int8 *)&v164, "t,%.3lf,Solution Selector: solution unavailable,est,%d,health,%d,valid,%d", v18, v19, v20, v21, v22, SLOBYTE(v152));
    }
    return 0;
  }
  *(_OWORD *)v165 = *((_OWORD *)a2 + 73);
  if (COERCE_UNSIGNED_INT64(v165[1] + (double)*(uint64_t *)&v165[0]) >> 52 >= 0x7FF)
  {
    __int16 v164 = 12;
    unsigned __int8 v163 = 4;
    uint64_t v23 = (*(uint64_t (**)(const raven::RavenSolutionEvent *))(*(void *)a2 + 16))(a2);
    double v153 = v24 + (double)v23;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v164, &v163, "t,%.3lf,Solution Selector: invalid time,est,%d", v25, v26, v27, v28, v29, SLOBYTE(v153));
    return 0;
  }
  uint64_t v7 = sub_18DFF465C((void *)this + 7, v4);
  if (v7)
  {
    uint64_t v7 = (uint64_t **)sub_18DEE8C5C(v165, (double *)v7 + 149);
    if (v7)
    {
      if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v7) <= 1)
      {
        __int16 v164 = 12;
        unsigned __int8 v163 = 1;
        uint64_t v8 = (*(uint64_t (**)(const raven::RavenSolutionEvent *))(*(void *)a2 + 16))(a2);
        double v151 = v9 + (double)v8;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v164, &v163, "t,%.3lf,Solution Selector: solution out of order,est,%d,t_prev,%.3lf,t_evt,%.3lf", v10, v11, v12, v13, v14, SLOBYTE(v151));
      }
      return 0;
    }
  }
  if (v5 != 1)
  {
    if (*((unsigned char *)a2 + 2128) != 6)
    {
      if (v5 > 5) {
        goto LABEL_52;
      }
      if (((1 << v5) & 0x31) != 0)
      {
        __int16 v164 = 12;
        unsigned __int8 v163 = 4;
        uint64_t v31 = (*(uint64_t (**)(const raven::RavenSolutionEvent *))(*(void *)a2 + 16))(a2);
        double v154 = v32 + (double)v31;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v164, &v163, "t,%.3lf,Solution Selector: invalid estimator type checked for GNSS age,est,%d", v33, v34, v35, v36, v37, SLOBYTE(v154));
        return 0;
      }
      if (((1 << v5) & 0xC) == 0) {
        goto LABEL_52;
      }
      uint64_t v38 = sub_18DFF5184((void *)this + 2, v5);
      if (!v38)
      {
        if (!cnprint::CNPrinter::GetLogLevel(0))
        {
          __int16 v164 = 12;
          unsigned __int8 v163 = 0;
          uint64_t v51 = (*(uint64_t (**)(const raven::RavenSolutionEvent *))(*(void *)a2 + 16))(a2);
          double v156 = v52 + (double)v51;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v164, &v163, "t,%.3lf,Solution Selector: no GNSS data so far,est,%d,t_curr,%.3lf", v53, v54, v55, v56, v57, SLOBYTE(v156));
        }
        return 0;
      }
      uint64_t v41 = CNTimeSpan::operator-((uint64_t)v165, v38 + 3, v39, v40);
      double v43 = v42 + (double)v41;
      if (v43 < 0.0)
      {
        __int16 v164 = 12;
        unsigned __int8 v163 = 4;
        uint64_t v44 = (*(uint64_t (**)(const raven::RavenSolutionEvent *))(*(void *)a2 + 16))(a2);
        double v155 = v45 + (double)v44;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v164, &v163, "t,%.3lf,Solution Selector: last GNSS time is ahead of current time,est,%d,t_curr,%.3lf,t_last_gnss,%.3lf", v46, v47, v48, v49, v50, SLOBYTE(v155));
        return 0;
      }
      uint64_t v58 = 3320;
      if (v5 == 2) {
        uint64_t v58 = 3312;
      }
      if (v43 > *(double *)(*((void *)this + 1) + v58))
      {
        __int16 v164 = 12;
        unsigned __int8 v163 = 2;
        uint64_t v59 = (*(uint64_t (**)(const raven::RavenSolutionEvent *))(*(void *)a2 + 16))(a2);
        double v157 = v60 + (double)v59;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v164, &v163, "t,%.3lf,Solution Selector: GNSS data starvation,est,%d,t_curr,%.3lf,t_last_gnss,%.3lf,dt,%.3lf", v61, v62, v63, v64, v65, SLOBYTE(v157));
        *((unsigned char *)sub_18DFF5694((float *)this + 102, v5, &v166) + 17) = 1;
        sub_18DFF5A88((void *)this + 12, v5);
        return 0;
      }
      double v66 = sub_18DFF5184((void *)this + 51, v5);
      if (!*((unsigned char *)this + 168)) {
        goto LABEL_51;
      }
      double v69 = v66;
      if (*((unsigned char *)this + 402))
      {
        uint64_t v70 = CNTimeSpan::operator-((uint64_t)v165, (void *)this + 35, v67, v68);
        if (fabs(v71 + (double)v70) < 600.0)
        {
          uint64_t v7 = sub_18DFF5184((void *)this + 12, v5);
          if (v69 && *((unsigned char *)v69 + 17))
          {
            BOOL v74 = v7;
            if (*((unsigned char *)this + 464))
            {
              uint64_t v75 = (cnprint::CNPrinter *)CNTimeSpan::operator-((uint64_t)v165, (void *)this + 56, v72, v73);
              *(double *)v72.i64 = v76 + (double)(uint64_t)v75;
              v73.i64[0] = 2.5;
              if (*(double *)v72.i64 > 2.5)
              {
                if (cnprint::CNPrinter::GetLogLevel(v75) <= 1)
                {
                  __int16 v164 = 12;
                  unsigned __int8 v163 = 1;
                  uint64_t v77 = (*(uint64_t (**)(const raven::RavenSolutionEvent *))(*(void *)a2 + 16))(a2);
                  if (!*((unsigned char *)this + 464)) {
                    sub_18DFF28FC();
                  }
                  *(double *)v79.i64 = v78;
                  *(double *)v80.i64 = (double)v77;
                  double v81 = v78 + (double)v77;
                  CNTimeSpan::operator-((uint64_t)v165, (void *)this + 56, v79, v80);
                  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v164, &v163, "t,%.3lf,Solution Selector: rejected solution due to time_difference_from_passthrough check failed while in tunnel after a recent GNSS starvation or nonhealthy period, time_difference_from_passthrough,%.2lf", v82, v83, v84, v85, v86, SLOBYTE(v81));
                }
                return 0;
              }
            }
            if (!v74)
            {
              int v143 = sub_18DFF5238((float *)this + 24, v5, &v166);
              *(_OWORD *)(v143 + 3) = *((_OWORD *)a2 + 73);
              if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v143) <= 1)
              {
                __int16 v164 = 12;
                unsigned __int8 v163 = 1;
                uint64_t v144 = (*(uint64_t (**)(const raven::RavenSolutionEvent *))(*(void *)a2 + 16))(a2);
                double v162 = v145 + (double)v144;
                cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v164, &v163, "t,%.3lf,Solution Selector: rejected solution due to still being in tunnel after recent GNSS starvation or nonhealthy period, time_since_last_tunnel_bridge_notification_event,%.2lf", v146, v147, v148, v149, v150, SLOBYTE(v162));
              }
              return 0;
            }
            double v100 = v74 + 3;
            double v101 = (cnprint::CNPrinter *)CNTimeSpan::operator-((uint64_t)v165, v100, v72, v73);
            if (fabs(v102 + (double)(uint64_t)v101) < 10.0)
            {
              if (cnprint::CNPrinter::GetLogLevel(v101) <= 1)
              {
                __int16 v164 = 12;
                unsigned __int8 v163 = 1;
                uint64_t v103 = (*(uint64_t (**)(const raven::RavenSolutionEvent *))(*(void *)a2 + 16))(a2);
                *(double *)v105.i64 = v104;
                *(double *)v106.i64 = (double)v103;
                double v107 = v104 + (double)v103;
                CNTimeSpan::operator-((uint64_t)v165, v100, v105, v106);
                cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v164, &v163, "t,%.3lf,Solution Selector: rejected solution due to still being in tunnel after recent GNSS starvation or nonhealthy period, time_since_last_tunnel_bridge_notification_event,%.2lf,time_since_first_tunnel_rejection,%.2lf", v108, v109, v110, v111, v112, SLOBYTE(v107));
              }
              return 0;
            }
            goto LABEL_51;
          }
LABEL_52:
          if ((*((void *)a2 + 162) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
            || *((double *)a2 + 162) <= 0.0
            || (*((void *)a2 + 165) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
            || *((double *)a2 + 165) <= 0.0
            || (*((void *)a2 + 167) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
            || *((double *)a2 + 167) <= 0.0)
          {
            __int16 v164 = 12;
            unsigned __int8 v163 = 4;
            uint64_t v129 = (*(uint64_t (**)(const raven::RavenSolutionEvent *))(*(void *)a2 + 16))(a2);
            double v160 = v130 + (double)v129;
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v164, &v163, "t,%.3lf,Solution Selector: invalid covariance,est,%d,pxx,%.3lf,pyy,%.3lf,pzz,%.3lf", v131, v132, v133, v134, v135, SLOBYTE(v160));
          }
          else
          {
            if (COERCE_UNSIGNED_INT64(*((double *)a2 + 29) + (double)*((uint64_t *)a2 + 28)) >> 52 >= 0x7FF)
            {
              __int16 v164 = 12;
              unsigned __int8 v163 = 4;
              uint64_t v113 = (*(uint64_t (**)(const raven::RavenSolutionEvent *))(*(void *)a2 + 16))(a2);
              double v158 = v114 + (double)v113;
              cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v164, &v163, "t,%.3lf,Solution Selector: invalid age,est,%d,age,%.3lf", v115, v116, v117, v118, v119, SLOBYTE(v158));
            }
            double v120 = *((double *)a2 + 27);
            if ((*(void *)&v120 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v120 < 0.0 || v120 > 1.0)
            {
              if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v7) <= 1)
              {
                __int16 v164 = 12;
                unsigned __int8 v163 = 1;
                uint64_t v136 = (*(uint64_t (**)(const raven::RavenSolutionEvent *))(*(void *)a2 + 16))(a2);
                double v161 = v137 + (double)v136;
                cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v164, &v163, "t,%.3lf,Solution Selector: invalid probabilty valid,est,%d,prob,%.3lf", v138, v139, v140, v141, v142, SLOBYTE(v161));
              }
              return 0;
            }
            v121 = (double *)*((void *)this + 1);
            if (sqrt(*((double *)a2 + 162) + *((double *)a2 + 165) + *((double *)a2 + 167)) > v121[416]
              || *((double *)a2 + 29) + (double)*((uint64_t *)a2 + 28) < v121[417]
              || v120 < v121[418])
            {
              if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v7) <= 1)
              {
                __int16 v164 = 12;
                unsigned __int8 v163 = 1;
                uint64_t v122 = (*(uint64_t (**)(const raven::RavenSolutionEvent *))(*(void *)a2 + 16))(a2);
                double v159 = v123 + (double)v122;
                cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v164, &v163, "t,%.3lf,Solution Selector: fail yield criteria,est,%d,pos_unc,%.1lf,age,%.1lf,prob_valid,%.1lf", v124, v125, v126, v127, v128, SLOBYTE(v159));
              }
              return 0;
            }
          }
          return 1;
        }
      }
      else if (*((unsigned char *)this + 472))
      {
        int v87 = (cnprint::CNPrinter *)CNTimeSpan::operator-((uint64_t)v165, (void *)this + 60, v67, v68);
        BOOL v89 = fabs(v88 + (double)(uint64_t)v87) >= 5.0 || v69 == 0;
        if (!v89 && *((unsigned char *)v69 + 17))
        {
          if (cnprint::CNPrinter::GetLogLevel(v87) <= 1)
          {
            __int16 v164 = 12;
            unsigned __int8 v163 = 1;
            uint64_t v90 = (*(uint64_t (**)(const raven::RavenSolutionEvent *))(*(void *)a2 + 16))(a2);
            if (!*((unsigned char *)this + 472)) {
              __assert_rtn("get", "optional.hpp", 1212, "this->is_initialized()");
            }
            *(double *)v92.i64 = v91;
            *(double *)v93.i64 = (double)v90;
            double v94 = v91 + (double)v90;
            CNTimeSpan::operator-((uint64_t)v165, (void *)this + 60, v92, v93);
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v164, &v163, "t,%.3lf,Solution Selector: rejected solution post-tunnel exit after recent GNSS starvation period, time since in tunnel,%.2lf", v95, v96, v97, v98, v99, SLOBYTE(v94));
          }
          return 0;
        }
      }
LABEL_51:
      raven::RavenSolutionSelector::ResetTunnelInformationForEstimatorType(this, v5);
      goto LABEL_52;
    }
    return 0;
  }
  return 1;
}

void *raven::RavenSolutionSelector::Reset(raven::RavenSolutionSelector *this)
{
  sub_18DFF562C((void *)this + 51);
  sub_18DFF562C((void *)this + 2);
  sub_18DFF562C((void *)this + 7);
  uint64_t result = sub_18DFF562C((void *)this + 12);
  *((unsigned char *)this + 136) = 0;
  *((void *)this + 18) = 0;
  *((void *)this + 19) = 0xFFF0000000000000;
  if (*((unsigned char *)this + 464)) {
    *((unsigned char *)this + 464) = 0;
  }
  if (*((unsigned char *)this + 472)) {
    *((unsigned char *)this + 472) = 0;
  }
  if (*((unsigned char *)this + 168)) {
    *((unsigned char *)this + 168) = 0;
  }
  *((unsigned char *)this + 160) = 0;
  return result;
}

__n128 raven::RavenSolutionSelector::HandleEvent(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a1 + 168)) {
    goto LABEL_12;
  }
  if (*(unsigned char *)(a1 + 402) && *(unsigned char *)(a2 + 226) == 0)
  {
    unsigned int v5 = (_OWORD *)(a2 + 8);
    if (sub_18DEE4C00((double *)(a2 + 8), (double *)(a1 + 184)))
    {
      int v6 = *(unsigned __int8 *)(a1 + 472);
      *(_OWORD *)(a1 + 480) = *v5;
      if (!v6) {
        *(unsigned char *)(a1 + 472) = 1;
      }
    }
  }
  if (*(unsigned char *)(a1 + 168))
  {
    long long v7 = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 184) = v7;
    long long v8 = *(_OWORD *)(a2 + 40);
    long long v9 = *(_OWORD *)(a2 + 56);
    long long v10 = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 248) = v10;
    *(_OWORD *)(a1 + 232) = v9;
    *(_OWORD *)(a1 + 216) = v8;
    long long v11 = *(_OWORD *)(a2 + 104);
    long long v12 = *(_OWORD *)(a2 + 120);
    long long v13 = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 312) = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 328) = v13;
    *(_OWORD *)(a1 + 280) = v11;
    *(_OWORD *)(a1 + 296) = v12;
    __n128 result = *(__n128 *)(a2 + 168);
    long long v15 = *(_OWORD *)(a2 + 184);
    long long v16 = *(_OWORD *)(a2 + 200);
    *(_OWORD *)(a1 + 388) = *(_OWORD *)(a2 + 212);
    *(_OWORD *)(a1 + 360) = v15;
    *(_OWORD *)(a1 + 376) = v16;
    *(__n128 *)(a1 + 344) = result;
  }
  else
  {
LABEL_12:
    *(void *)(a1 + 176) = &unk_1EDD14EE0;
    __n128 result = *(__n128 *)(a2 + 168);
    long long v17 = *(_OWORD *)(a2 + 184);
    long long v18 = *(_OWORD *)(a2 + 200);
    long long v19 = *(_OWORD *)(a2 + 212);
    long long v20 = *(_OWORD *)(a2 + 104);
    long long v21 = *(_OWORD *)(a2 + 120);
    long long v22 = *(_OWORD *)(a2 + 136);
    long long v23 = *(_OWORD *)(a2 + 152);
    long long v24 = *(_OWORD *)(a2 + 40);
    long long v25 = *(_OWORD *)(a2 + 56);
    long long v26 = *(_OWORD *)(a2 + 72);
    long long v27 = *(_OWORD *)(a2 + 88);
    long long v28 = *(_OWORD *)(a2 + 8);
    long long v29 = *(_OWORD *)(a2 + 24);
    *(unsigned char *)(a1 + 168) = 1;
    uint64_t v30 = a1 + 168;
    *(_OWORD *)(v30 + 16) = v28;
    *(_OWORD *)(v30 + 32) = v29;
    *(_OWORD *)(v30 + 80) = v26;
    *(_OWORD *)(v30 + 96) = v27;
    *(_OWORD *)(v30 + 48) = v24;
    *(_OWORD *)(v30 + 64) = v25;
    *(_OWORD *)(v30 + 144) = v22;
    *(_OWORD *)(v30 + 160) = v23;
    *(_OWORD *)(v30 + 112) = v20;
    *(_OWORD *)(v30 + 128) = v21;
    *(_OWORD *)(v30 + 220) = v19;
    *(_OWORD *)(v30 + 192) = v17;
    *(_OWORD *)(v30 + 208) = v18;
    *(__n128 *)(v30 + 176) = result;
  }
  return result;
}

void raven::RavenSolutionSelector::ResetTunnelInformationForEstimatorType(void *a1, unsigned __int8 a2)
{
  sub_18DFF5A88(a1 + 12, a2);
  uint64_t v4 = a1 + 51;
  unsigned int v5 = sub_18DFF5184(a1 + 51, a2);
  if (!v5) {
    return;
  }
  int8x8_t v6 = (int8x8_t)a1[52];
  long long v7 = *v5;
  unint64_t v8 = (unint64_t)v5[1];
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v6);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    if (v8 >= *(void *)&v6) {
      v8 %= *(void *)&v6;
    }
  }
  else
  {
    v8 &= *(void *)&v6 - 1;
  }
  long long v10 = *(uint64_t ***)(*v4 + 8 * v8);
  do
  {
    long long v11 = v10;
    long long v10 = (uint64_t **)*v10;
  }
  while (v10 != v5);
  if (v11 == a1 + 53) {
    goto LABEL_20;
  }
  long long v12 = v11[1];
  if (v9.u32[0] > 1uLL)
  {
    if ((unint64_t)v12 >= *(void *)&v6) {
      long long v12 = (uint64_t *)((unint64_t)v12 % *(void *)&v6);
    }
  }
  else
  {
    long long v12 = (uint64_t *)((unint64_t)v12 & (*(void *)&v6 - 1));
  }
  if (v12 != (uint64_t *)v8)
  {
LABEL_20:
    if (v7)
    {
      long long v13 = (uint64_t *)v7[1];
      if (v9.u32[0] > 1uLL)
      {
        uint64_t v14 = (uint64_t *)v7[1];
        if ((unint64_t)v13 >= *(void *)&v6) {
          uint64_t v14 = (uint64_t *)((unint64_t)v13 % *(void *)&v6);
        }
      }
      else
      {
        uint64_t v14 = (uint64_t *)((unint64_t)v13 & (*(void *)&v6 - 1));
      }
      if (v14 == (uint64_t *)v8) {
        goto LABEL_24;
      }
    }
    *(void *)(*v4 + 8 * v8) = 0;
    long long v7 = *v5;
  }
  if (v7)
  {
    long long v13 = (uint64_t *)v7[1];
LABEL_24:
    if (v9.u32[0] > 1uLL)
    {
      if ((unint64_t)v13 >= *(void *)&v6) {
        long long v13 = (uint64_t *)((unint64_t)v13 % *(void *)&v6);
      }
    }
    else
    {
      long long v13 = (uint64_t *)((unint64_t)v13 & (*(void *)&v6 - 1));
    }
    if (v13 != (uint64_t *)v8)
    {
      *(void *)(*v4 + 8 * (void)v13) = v11;
      long long v7 = *v5;
    }
  }
  *long long v11 = v7;
  _OWORD *v5 = 0;
  --a1[54];

  operator delete(v5);
}

uint64_t **sub_18DFF465C(void *a1, unsigned __int8 *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (*(void *)&v2 <= v3) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = (v2.i32[0] - 1) & v3;
  }
  int8x8_t v6 = *(uint64_t ****)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  for (__n128 result = *v6; result; __n128 result = (uint64_t **)*result)
  {
    unint64_t v8 = (unint64_t)result[1];
    if (v8 == v3)
    {
      if (*((unsigned __int8 *)result + 16) == v3) {
        return result;
      }
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(void *)&v2) {
          v8 %= *(void *)&v2;
        }
      }
      else
      {
        v8 &= *(void *)&v2 - 1;
      }
      if (v8 != v5) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t **sub_18DFF4710(uint64_t a1, unsigned __int8 *a2, uint64_t a3, unsigned char **a4)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 <= v6) {
        unint64_t v4 = v6 % v7;
      }
    }
    else
    {
      unint64_t v4 = (v7 - 1) & v6;
    }
    uint8x8_t v9 = *(uint64_t ****)(*(void *)a1 + 8 * v4);
    if (v9)
    {
      for (__n128 result = *v9; result; __n128 result = (uint64_t **)*result)
      {
        unint64_t v11 = (unint64_t)result[1];
        if (v11 == v6)
        {
          if (*((unsigned __int8 *)result + 16) == v6) {
            return result;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v4) {
            break;
          }
        }
      }
    }
  }
  sub_18DFF4944(a1, *a2, a4, (uint64_t)v20);
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    sub_18DFF4F38(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v4 = v6 % v7;
      }
      else {
        unint64_t v4 = v6;
      }
    }
    else
    {
      unint64_t v4 = (v7 - 1) & v6;
    }
  }
  long long v18 = *(void **)(*(void *)a1 + 8 * v4);
  if (v18)
  {
    *(void *)v20[0] = *v18;
    *long long v18 = v20[0];
  }
  else
  {
    *(void *)v20[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v20[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v20[0])
    {
      unint64_t v19 = *(void *)(*(void *)v20[0] + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v19 >= v7) {
          v19 %= v7;
        }
      }
      else
      {
        v19 &= v7 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v19) = v20[0];
    }
  }
  __n128 result = (uint64_t **)v20[0];
  ++*(void *)(a1 + 24);
  return result;
}

void sub_18DFF4928(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_18DFF4944@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  uint8x8_t v8 = operator new(0x998uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  void *v8 = 0;
  v8[1] = a2;
  *((unsigned char *)v8 + 16) = **a3;
  uint64_t result = sub_18DFF49CC((uint64_t)(v8 + 3));
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_18DFF49B4(_Unwind_Exception *a1)
{
  *char v1 = 0;
  operator delete(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_18DFF49CC(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1EDD14150;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(unsigned char *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0x7FF8000000000000;
  *(unsigned char *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = 0x7FF8000000000000;
  *(_WORD *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 1096) = 0u;
  *(_OWORD *)(a1 + 1112) = 0u;
  *(_OWORD *)(a1 + 1128) = 0u;
  *(_OWORD *)(a1 + 1144) = 0u;
  *(void *)(a1 + 1160) = 0;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_WORD *)(a1 + 264) = 0;
  *(void *)(a1 + 1064) = 0x7FF8000000000000;
  *(void *)(a1 + 1072) = 0x7FF8000000000000;
  *(void *)(a1 + 1080) = 0;
  *(void *)(a1 + 1088) = 0x7FF8000000000000;
  bzero((void *)(a1 + 268), 0x318uLL);
  *(void *)(a1 + 1248) = 0;
  *(_OWORD *)(a1 + 1232) = 0u;
  *(_OWORD *)(a1 + 1216) = 0u;
  *(_OWORD *)(a1 + 1200) = 0u;
  *(_OWORD *)(a1 + 1184) = 0u;
  *(_OWORD *)(a1 + 1168) = 0u;
  *(void *)(a1 + 1256) = 0x7FF8000000000000;
  *(unsigned char *)(a1 + 1264) = 0;
  int64x2_t v2 = vdupq_n_s64(0x7FF8000000000000uLL);
  *(void *)(a1 + 1272) = 0x7FF8000000000000;
  *(int64x2_t *)(a1 + 1280) = v2;
  *(int64x2_t *)(a1 + 1296) = v2;
  *(int64x2_t *)(a1 + 1312) = v2;
  *(int64x2_t *)(a1 + 1328) = v2;
  *(_WORD *)(a1 + 1344) = 0;
  *(void *)(a1 + 1352) = 0x7FF8000000000000;
  *(int64x2_t *)(a1 + 1360) = v2;
  *(int64x2_t *)(a1 + 1376) = v2;
  *(int64x2_t *)(a1 + 1392) = v2;
  *(int64x2_t *)(a1 + 1408) = v2;
  *(int64x2_t *)(a1 + 1424) = v2;
  *(int64x2_t *)(a1 + 1440) = v2;
  *(void *)(a1 + 1456) = 0x7FF8000000000000;
  *(unsigned char *)(a1 + 1464) = 0;
  *(int64x2_t *)(a1 + 1472) = v2;
  *(int64x2_t *)(a1 + 1488) = v2;
  *(int64x2_t *)(a1 + 1504) = v2;
  *(int64x2_t *)(a1 + 1520) = v2;
  *(void *)(a1 + 1536) = 0x7FF8000000000000;
  *(unsigned char *)(a1 + 1544) = 0;
  *(int64x2_t *)(a1 + 1552) = v2;
  *(int64x2_t *)(a1 + 1568) = v2;
  *(int64x2_t *)(a1 + 1584) = v2;
  *(int64x2_t *)(a1 + 1600) = v2;
  *(void *)(a1 + 1616) = 0x7FF8000000000000;
  *(unsigned char *)(a1 + 1624) = 0;
  *(int64x2_t *)(a1 + 1632) = v2;
  *(int64x2_t *)(a1 + 1648) = v2;
  *(int64x2_t *)(a1 + 1664) = v2;
  *(int64x2_t *)(a1 + 1680) = v2;
  *(int64x2_t *)(a1 + 1696) = v2;
  *(int64x2_t *)(a1 + 1712) = v2;
  *(int64x2_t *)(a1 + 1728) = v2;
  *(unsigned char *)(a1 + 1744) = 0;
  *(void *)(a1 + 1752) = 0x7FF8000000000000;
  *(int64x2_t *)(a1 + 1760) = v2;
  *(int64x2_t *)(a1 + 1776) = v2;
  *(int64x2_t *)(a1 + 1792) = v2;
  *(int64x2_t *)(a1 + 1808) = v2;
  *(unsigned char *)(a1 + 1824) = 0;
  *(void *)(a1 + 1832) = 0x7FF8000000000000;
  *(int64x2_t *)(a1 + 1840) = v2;
  *(int64x2_t *)(a1 + 1856) = v2;
  *(int64x2_t *)(a1 + 1872) = v2;
  *(int64x2_t *)(a1 + 1888) = v2;
  *(unsigned char *)(a1 + 1904) = 0;
  *(void *)(a1 + 1912) = 0x7FF8000000000000;
  *(int64x2_t *)(a1 + 1920) = v2;
  *(int64x2_t *)(a1 + 1936) = v2;
  *(int64x2_t *)(a1 + 1952) = v2;
  *(int64x2_t *)(a1 + 1968) = v2;
  *(unsigned char *)(a1 + 1984) = 0;
  *(void *)(a1 + 1992) = 0x7FF8000000000000;
  *(int64x2_t *)(a1 + 2000) = v2;
  *(int64x2_t *)(a1 + 2016) = v2;
  *(void *)(a1 + 2112) = 0;
  *(_OWORD *)(a1 + 2096) = 0u;
  *(_OWORD *)(a1 + 2080) = 0u;
  *(_OWORD *)(a1 + 2064) = 0u;
  *(_OWORD *)(a1 + 2048) = 0u;
  *(_OWORD *)(a1 + 2032) = 0u;
  *(void *)(a1 + 2120) = 0x7FF8000000000000;
  *(void *)(a1 + 2128) = 0;
  *(void *)(a1 + 2136) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 2144) = 0u;
  *(_OWORD *)(a1 + 2160) = 0u;
  *(_OWORD *)(a1 + 2176) = 0u;
  *(_OWORD *)(a1 + 2192) = 0u;
  *(_OWORD *)(a1 + 2208) = 0u;
  *(_OWORD *)(a1 + 2224) = 0u;
  *(_OWORD *)(a1 + 2240) = 0u;
  *(_OWORD *)(a1 + 2256) = 0u;
  *(_OWORD *)(a1 + 2272) = 0u;
  *(_OWORD *)(a1 + 2288) = 0u;
  *(void *)(a1 + 2304) = 0;
  *(void *)(a1 + 2312) = 0x7FF8000000000000;
  *(void *)(a1 + 2320) = 0;
  *(void *)(a1 + 2328) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 2336) = 0u;
  *(_OWORD *)(a1 + 2352) = 0u;
  *(void *)(a1 + 2368) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 2376) = 0u;
  *(_OWORD *)(a1 + 2392) = 0u;
  *(void *)(a1 + 2408) = 0x3FE0000000000000;
  *(void *)(a1 + 2416) = 0x3FE0000000000000;
  *(unsigned char *)(a1 + 2424) = 0;
  sub_18DFF4C24(a1);
  return a1;
}

double sub_18DFF4C24(uint64_t a1)
{
  *(unsigned char *)(a1 + 104) = 0;
  uint64_t v1 = a1 + 104;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0x7FF8000000000000;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = 0x7FF8000000000000;
  *(_WORD *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 1096) = 0u;
  *(_OWORD *)(a1 + 1112) = 0u;
  *(_OWORD *)(a1 + 1128) = 0u;
  *(_OWORD *)(a1 + 1144) = 0u;
  *(void *)(a1 + 1160) = 0;
  *(_WORD *)(a1 + 264) = 0;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(void *)(a1 + 1064) = 0x7FF8000000000000;
  *(void *)(a1 + 1072) = 0x7FF8000000000000;
  *(void *)(a1 + 1080) = 0;
  *(void *)(a1 + 1088) = 0x7FF8000000000000;
  bzero((void *)(a1 + 268), 0x318uLL);
  *(void *)(v1 + 1144) = 0;
  *(_OWORD *)(v1 + 1128) = 0u;
  *(_OWORD *)(v1 + 1112) = 0u;
  *(_OWORD *)(v1 + 1096) = 0u;
  *(_OWORD *)(v1 + 1080) = 0u;
  *(_OWORD *)(v1 + 1064) = 0u;
  *(void *)(v1 + 1152) = 0x7FF8000000000000;
  *(void *)(v1 + 1160) = 0;
  *(void *)(v1 + 1168) = 0x7FF8000000000000;
  int64x2_t v2 = vdupq_n_s64(0x7FF8000000000000uLL);
  *(int64x2_t *)(v1 + 1176) = v2;
  *(int64x2_t *)(v1 + 1192) = v2;
  *(int64x2_t *)(v1 + 1208) = v2;
  *(int64x2_t *)(v1 + 1224) = v2;
  *(void *)(v1 + 1240) = 0;
  *(void *)(v1 + 1248) = 0x7FF8000000000000;
  *(int64x2_t *)(v1 + 1256) = v2;
  *(int64x2_t *)(v1 + 1272) = v2;
  *(int64x2_t *)(v1 + 1288) = v2;
  *(int64x2_t *)(v1 + 1304) = v2;
  *(int64x2_t *)(v1 + 1320) = v2;
  *(int64x2_t *)(v1 + 1336) = v2;
  *(void *)(v1 + 1352) = 0x7FF8000000000000;
  *(void *)(v1 + 1360) = 0;
  *(int64x2_t *)(v1 + 1368) = v2;
  *(int64x2_t *)(v1 + 1384) = v2;
  *(int64x2_t *)(v1 + 1400) = v2;
  *(int64x2_t *)(v1 + 1416) = v2;
  *(void *)(v1 + 1432) = 0x7FF8000000000000;
  *(void *)(v1 + 1440) = 0;
  *(int64x2_t *)(v1 + 1448) = v2;
  *(int64x2_t *)(v1 + 1464) = v2;
  *(int64x2_t *)(v1 + 1480) = v2;
  *(int64x2_t *)(v1 + 1496) = v2;
  *(void *)(v1 + 1512) = 0x7FF8000000000000;
  *(void *)(v1 + 1520) = 0;
  *(int64x2_t *)(v1 + 1528) = v2;
  *(int64x2_t *)(v1 + 1544) = v2;
  *(int64x2_t *)(v1 + 1560) = v2;
  *(int64x2_t *)(v1 + 1576) = v2;
  *(int64x2_t *)(v1 + 1592) = v2;
  *(int64x2_t *)(v1 + 1608) = v2;
  *(int64x2_t *)(v1 + 1624) = v2;
  *(void *)(v1 + 1640) = 0;
  *(void *)(v1 + 1648) = 0x7FF8000000000000;
  *(int64x2_t *)(v1 + 1656) = v2;
  *(int64x2_t *)(v1 + 1672) = v2;
  *(int64x2_t *)(v1 + 1688) = v2;
  *(int64x2_t *)(v1 + 1704) = v2;
  *(void *)(v1 + 1720) = 0;
  *(void *)(v1 + 1728) = 0x7FF8000000000000;
  *(int64x2_t *)(v1 + 1736) = v2;
  *(int64x2_t *)(v1 + 1752) = v2;
  *(int64x2_t *)(v1 + 1768) = v2;
  *(int64x2_t *)(v1 + 1784) = v2;
  *(void *)(v1 + 1800) = 0;
  *(void *)(v1 + 1808) = 0x7FF8000000000000;
  *(int64x2_t *)(v1 + 1816) = v2;
  *(int64x2_t *)(v1 + 1832) = v2;
  *(int64x2_t *)(v1 + 1848) = v2;
  *(int64x2_t *)(v1 + 1864) = v2;
  *(void *)(v1 + 1880) = 0;
  *(void *)(v1 + 1888) = 0x7FF8000000000000;
  *(int64x2_t *)(v1 + 1896) = v2;
  *(int64x2_t *)(v1 + 1912) = v2;
  *(void *)(v1 + 2008) = 0;
  double result = 0.0;
  *(_OWORD *)(v1 + 1992) = 0u;
  *(_OWORD *)(v1 + 1976) = 0u;
  *(_OWORD *)(v1 + 1960) = 0u;
  *(_OWORD *)(v1 + 1944) = 0u;
  *(_OWORD *)(v1 + 1928) = 0u;
  *(void *)(v1 + 2016) = 0x7FF8000000000000;
  *(void *)(v1 + 2024) = 0;
  *(void *)(v1 + 2032) = 0x3FF0000000000000;
  *(_OWORD *)(v1 + 2040) = 0u;
  *(_OWORD *)(v1 + 2056) = 0u;
  *(_OWORD *)(v1 + 2072) = 0u;
  *(_OWORD *)(v1 + 2088) = 0u;
  *(_OWORD *)(v1 + 2104) = 0u;
  *(_OWORD *)(v1 + 2120) = 0u;
  *(_OWORD *)(v1 + 2136) = 0u;
  *(_OWORD *)(v1 + 2152) = 0u;
  *(_OWORD *)(v1 + 2168) = 0u;
  *(_OWORD *)(v1 + 2184) = 0u;
  *(void *)(v1 + 2200) = 0;
  *(void *)(v1 + 2208) = 0x7FF8000000000000;
  *(void *)(v1 + 2216) = 0;
  *(void *)(v1 + 2224) = 0x3FF0000000000000;
  *(_OWORD *)(v1 + 2232) = 0u;
  *(_OWORD *)(v1 + 2248) = 0u;
  *(void *)(v1 + 2264) = 0x3FF0000000000000;
  *(_OWORD *)(v1 + 2272) = 0u;
  *(_OWORD *)(v1 + 2288) = 0u;
  *(void *)(v1 + 2304) = 0x3FE0000000000000;
  *(void *)(v1 + 2312) = 0x3FE0000000000000;
  *(unsigned char *)(v1 + 2320) = 0;
  return result;
}

void sub_18DFF4F38(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4)
    {
LABEL_16:
      sub_18DFF5028(a1, prime);
    }
  }
}

void sub_18DFF5028(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      sub_18DEDF7D4();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    uint64_t v7 = *(void **)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v8) = a1 + 16;
      unint64_t v11 = (void *)*v7;
      if (*v7)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2) {
              v12 %= a2;
            }
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(void *)(*(void *)a1 + 8 * v12))
            {
              *(void *)(*(void *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            *uint64_t v7 = *v11;
            *unint64_t v11 = **(void **)(*(void *)a1 + 8 * v12);
            **(void **)(*(void *)a1 + 8 * v12) = v11;
            unint64_t v11 = v7;
          }
          unint64_t v12 = v8;
LABEL_24:
          uint64_t v7 = v11;
          unint64_t v11 = (void *)*v11;
          unint64_t v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    long long v10 = *(void **)a1;
    *(void *)a1 = 0;
    if (v10) {
      operator delete(v10);
    }
    *(void *)(a1 + 8) = 0;
  }
}

uint64_t **sub_18DFF5184(void *a1, unsigned __int8 a2)
{
  unint64_t v2 = a1[1];
  if (!v2) {
    return 0;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v4 = a2;
    if (v2 <= a2) {
      unint64_t v4 = a2 % v2;
    }
  }
  else
  {
    unint64_t v4 = (v2 - 1) & a2;
  }
  unint64_t v5 = *(uint64_t ****)(*a1 + 8 * v4);
  if (!v5) {
    return 0;
  }
  for (double result = *v5; result; double result = (uint64_t **)*result)
  {
    unint64_t v7 = (unint64_t)result[1];
    if (v7 == a2)
    {
      if (*((unsigned __int8 *)result + 16) == a2) {
        return result;
      }
    }
    else
    {
      if (v3.u32[0] > 1uLL)
      {
        if (v7 >= v2) {
          v7 %= v2;
        }
      }
      else
      {
        v7 &= v2 - 1;
      }
      if (v7 != v4) {
        return 0;
      }
    }
  }
  return result;
}

void *sub_18DFF5238(float *a1, unsigned __int8 a2, unsigned char *a3)
{
  unint64_t v6 = a2;
  unint64_t v7 = *((void *)a1 + 1);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    uint8x8_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      long long v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == a2)
          {
            if (*((unsigned __int8 *)v10 + 16) == a2) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          long long v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  long long v10 = operator new(0x28uLL);
  *long long v10 = 0;
  v10[1] = v6;
  *((unsigned char *)v10 + 16) = *a3;
  v10[3] = 0;
  v10[4] = 0;
  float v12 = (float)(unint64_t)(*((void *)a1 + 3) + 1);
  float v13 = a1[8];
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      int8x8_t prime = (int8x8_t)v16;
    }
    else {
      int8x8_t prime = (int8x8_t)v15;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v7 = *((void *)a1 + 1);
    }
    if (*(void *)&prime > v7) {
      goto LABEL_30;
    }
    if (*(void *)&prime < v7)
    {
      unint64_t v24 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v7 < 3 || (uint8x8_t v25 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        unint64_t v24 = std::__next_prime(v24);
      }
      else
      {
        uint64_t v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2) {
          unint64_t v24 = v26;
        }
      }
      if (*(void *)&prime <= v24) {
        int8x8_t prime = (int8x8_t)v24;
      }
      if (*(void *)&prime >= v7)
      {
        unint64_t v7 = *((void *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(void *)&prime >> 61) {
            sub_18DEDF7D4();
          }
          long long v18 = operator new(8 * *(void *)&prime);
          unint64_t v19 = *(void **)a1;
          *(void *)a1 = v18;
          if (v19) {
            operator delete(v19);
          }
          uint64_t v20 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(void *)(*(void *)a1 + 8 * v20++) = 0;
          while (*(void *)&prime != v20);
          long long v21 = (void *)*((void *)a1 + 2);
          if (v21)
          {
            unint64_t v22 = v21[1];
            uint8x8_t v23 = (uint8x8_t)vcnt_s8(prime);
            v23.i16[0] = vaddlv_u8(v23);
            if (v23.u32[0] > 1uLL)
            {
              if (v22 >= *(void *)&prime) {
                v22 %= *(void *)&prime;
              }
            }
            else
            {
              v22 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)a1 + 8 * v22) = a1 + 4;
            long long v27 = (void *)*v21;
            if (*v21)
            {
              do
              {
                unint64_t v28 = v27[1];
                if (v23.u32[0] > 1uLL)
                {
                  if (v28 >= *(void *)&prime) {
                    v28 %= *(void *)&prime;
                  }
                }
                else
                {
                  v28 &= *(void *)&prime - 1;
                }
                if (v28 != v22)
                {
                  if (!*(void *)(*(void *)a1 + 8 * v28))
                  {
                    *(void *)(*(void *)a1 + 8 * v28) = v21;
                    goto LABEL_55;
                  }
                  void *v21 = *v27;
                  *long long v27 = **(void **)(*(void *)a1 + 8 * v28);
                  **(void **)(*(void *)a1 + 8 * v28) = v27;
                  long long v27 = v21;
                }
                unint64_t v28 = v22;
LABEL_55:
                long long v21 = v27;
                long long v27 = (void *)*v27;
                unint64_t v22 = v28;
              }
              while (v27);
            }
          }
          unint64_t v7 = (unint64_t)prime;
          goto LABEL_59;
        }
        uint64_t v33 = *(void **)a1;
        *(void *)a1 = 0;
        if (v33) {
          operator delete(v33);
        }
        unint64_t v7 = 0;
        *((void *)a1 + 1) = 0;
      }
    }
LABEL_59:
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  long long v29 = *(void **)a1;
  uint64_t v30 = *(void **)(*(void *)a1 + 8 * v3);
  if (v30)
  {
    *long long v10 = *v30;
LABEL_72:
    *uint64_t v30 = v10;
    goto LABEL_73;
  }
  *long long v10 = *((void *)a1 + 2);
  *((void *)a1 + 2) = v10;
  v29[v3] = a1 + 4;
  if (*v10)
  {
    unint64_t v31 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v31 >= v7) {
        v31 %= v7;
      }
    }
    else
    {
      v31 &= v7 - 1;
    }
    uint64_t v30 = (void *)(*(void *)a1 + 8 * v31);
    goto LABEL_72;
  }
LABEL_73:
  ++*((void *)a1 + 3);
  return v10;
}

void sub_18DFF5618(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_18DFF562C(void *result)
{
  if (result[3])
  {
    uint64_t v1 = result;
    double result = (void *)result[2];
    if (result)
    {
      do
      {
        unint64_t v2 = (void *)*result;
        operator delete(result);
        double result = v2;
      }
      while (v2);
    }
    v1[2] = 0;
    uint64_t v3 = v1[1];
    if (v3)
    {
      for (uint64_t i = 0; i != v3; ++i)
        *(void *)(*v1 + 8 * i) = 0;
    }
    char v1[3] = 0;
  }
  return result;
}

void *sub_18DFF5694(float *a1, unsigned __int8 a2, unsigned char *a3)
{
  unint64_t v6 = a2;
  unint64_t v7 = *((void *)a1 + 1);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    uint8x8_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      long long v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == a2)
          {
            if (*((unsigned __int8 *)v10 + 16) == a2) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          long long v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  long long v10 = operator new(0x18uLL);
  *long long v10 = 0;
  v10[1] = v6;
  *((unsigned char *)v10 + 16) = *a3;
  *((unsigned char *)v10 + 17) = 0;
  float v12 = (float)(unint64_t)(*((void *)a1 + 3) + 1);
  float v13 = a1[8];
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      int8x8_t prime = (int8x8_t)v16;
    }
    else {
      int8x8_t prime = (int8x8_t)v15;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v7 = *((void *)a1 + 1);
    }
    if (*(void *)&prime > v7) {
      goto LABEL_30;
    }
    if (*(void *)&prime < v7)
    {
      unint64_t v24 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v7 < 3 || (uint8x8_t v25 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        unint64_t v24 = std::__next_prime(v24);
      }
      else
      {
        uint64_t v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2) {
          unint64_t v24 = v26;
        }
      }
      if (*(void *)&prime <= v24) {
        int8x8_t prime = (int8x8_t)v24;
      }
      if (*(void *)&prime >= v7)
      {
        unint64_t v7 = *((void *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(void *)&prime >> 61) {
            sub_18DEDF7D4();
          }
          long long v18 = operator new(8 * *(void *)&prime);
          unint64_t v19 = *(void **)a1;
          *(void *)a1 = v18;
          if (v19) {
            operator delete(v19);
          }
          uint64_t v20 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(void *)(*(void *)a1 + 8 * v20++) = 0;
          while (*(void *)&prime != v20);
          long long v21 = (void *)*((void *)a1 + 2);
          if (v21)
          {
            unint64_t v22 = v21[1];
            uint8x8_t v23 = (uint8x8_t)vcnt_s8(prime);
            v23.i16[0] = vaddlv_u8(v23);
            if (v23.u32[0] > 1uLL)
            {
              if (v22 >= *(void *)&prime) {
                v22 %= *(void *)&prime;
              }
            }
            else
            {
              v22 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)a1 + 8 * v22) = a1 + 4;
            long long v27 = (void *)*v21;
            if (*v21)
            {
              do
              {
                unint64_t v28 = v27[1];
                if (v23.u32[0] > 1uLL)
                {
                  if (v28 >= *(void *)&prime) {
                    v28 %= *(void *)&prime;
                  }
                }
                else
                {
                  v28 &= *(void *)&prime - 1;
                }
                if (v28 != v22)
                {
                  if (!*(void *)(*(void *)a1 + 8 * v28))
                  {
                    *(void *)(*(void *)a1 + 8 * v28) = v21;
                    goto LABEL_55;
                  }
                  void *v21 = *v27;
                  *long long v27 = **(void **)(*(void *)a1 + 8 * v28);
                  **(void **)(*(void *)a1 + 8 * v28) = v27;
                  long long v27 = v21;
                }
                unint64_t v28 = v22;
LABEL_55:
                long long v21 = v27;
                long long v27 = (void *)*v27;
                unint64_t v22 = v28;
              }
              while (v27);
            }
          }
          unint64_t v7 = (unint64_t)prime;
          goto LABEL_59;
        }
        uint64_t v33 = *(void **)a1;
        *(void *)a1 = 0;
        if (v33) {
          operator delete(v33);
        }
        unint64_t v7 = 0;
        *((void *)a1 + 1) = 0;
      }
    }
LABEL_59:
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  long long v29 = *(void **)a1;
  uint64_t v30 = *(void **)(*(void *)a1 + 8 * v3);
  if (v30)
  {
    *long long v10 = *v30;
LABEL_72:
    *uint64_t v30 = v10;
    goto LABEL_73;
  }
  *long long v10 = *((void *)a1 + 2);
  *((void *)a1 + 2) = v10;
  v29[v3] = a1 + 4;
  if (*v10)
  {
    unint64_t v31 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v31 >= v7) {
        v31 %= v7;
      }
    }
    else
    {
      v31 &= v7 - 1;
    }
    uint64_t v30 = (void *)(*(void *)a1 + 8 * v31);
    goto LABEL_72;
  }
LABEL_73:
  ++*((void *)a1 + 3);
  return v10;
}

void sub_18DFF5A74(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_18DFF5A88(void *a1, unsigned __int8 a2)
{
  unint64_t v3 = sub_18DFF5184(a1, a2);
  if (!v3) {
    return;
  }
  int8x8_t v4 = (int8x8_t)a1[1];
  unint64_t v5 = *v3;
  unint64_t v6 = (unint64_t)v3[1];
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v4);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    if (v6 >= *(void *)&v4) {
      v6 %= *(void *)&v4;
    }
  }
  else
  {
    v6 &= *(void *)&v4 - 1;
  }
  uint8x8_t v8 = *(uint64_t ***)(*a1 + 8 * v6);
  do
  {
    uint8x8_t v9 = v8;
    uint8x8_t v8 = (uint64_t **)*v8;
  }
  while (v8 != v3);
  if (v9 == a1 + 2) {
    goto LABEL_20;
  }
  long long v10 = v9[1];
  if (v7.u32[0] > 1uLL)
  {
    if ((unint64_t)v10 >= *(void *)&v4) {
      long long v10 = (uint64_t *)((unint64_t)v10 % *(void *)&v4);
    }
  }
  else
  {
    long long v10 = (uint64_t *)((unint64_t)v10 & (*(void *)&v4 - 1));
  }
  if (v10 != (uint64_t *)v6)
  {
LABEL_20:
    if (v5)
    {
      unint64_t v11 = (uint64_t *)v5[1];
      if (v7.u32[0] > 1uLL)
      {
        float v12 = (uint64_t *)v5[1];
        if ((unint64_t)v11 >= *(void *)&v4) {
          float v12 = (uint64_t *)((unint64_t)v11 % *(void *)&v4);
        }
      }
      else
      {
        float v12 = (uint64_t *)((unint64_t)v11 & (*(void *)&v4 - 1));
      }
      if (v12 == (uint64_t *)v6) {
        goto LABEL_24;
      }
    }
    *(void *)(*a1 + 8 * v6) = 0;
    unint64_t v5 = *v3;
  }
  if (v5)
  {
    unint64_t v11 = (uint64_t *)v5[1];
LABEL_24:
    if (v7.u32[0] > 1uLL)
    {
      if ((unint64_t)v11 >= *(void *)&v4) {
        unint64_t v11 = (uint64_t *)((unint64_t)v11 % *(void *)&v4);
      }
    }
    else
    {
      unint64_t v11 = (uint64_t *)((unint64_t)v11 & (*(void *)&v4 - 1));
    }
    if (v11 != (uint64_t *)v6)
    {
      *(void *)(*a1 + 8 * (void)v11) = v9;
      unint64_t v5 = *v3;
    }
  }
  char *v9 = v5;
  *unint64_t v3 = 0;
  --a1[3];

  operator delete(v3);
}

uint64_t raven::AltitudeChangeChecker::Configure(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 16) = a3;
  *(void *)(a1 + 24) = *(void *)(*(void *)a2 + 2512);
  *(unsigned char *)(a1 + 8) = 1;
  return 0;
}

uint64_t raven::AltitudeChangeChecker::HandleEvent(raven::AltitudeChangeChecker *this, const raven::AltitudeChangeEvent *a2, raven::AltitudeChangeEvent *a3)
{
  uint64_t v80 = *MEMORY[0x1E4F143B8];
  if (!*((unsigned char *)this + 8))
  {
    LOWORD(v51[0]) = 12;
    LOBYTE(v67) = 4;
    uint64_t v33 = (*(uint64_t (**)(const raven::AltitudeChangeEvent *, const raven::AltitudeChangeEvent *, raven::AltitudeChangeEvent *))(*(void *)a2 + 16))(a2, a2, a3);
    double v47 = v34 + (double)v33;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v51, (unsigned __int8 *)&v67, "t,%.3lf,AltitudeChangeChecker, not configured", v35, v36, v37, v38, v39, SLOBYTE(v47));
    return 0xFFFFFFFFLL;
  }
  if (*(unsigned char *)(*((void *)this + 2) + 56) == 9) {
    return 0xFFFFFFFFLL;
  }
  double v5 = *((double *)a2 + 25);
  if ((*(void *)&v5 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = 0xFFFFFFFFLL;
  if ((*((void *)a2 + 26) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || *((double *)a2 + 26) <= 0.0) {
    return result;
  }
  v51[0] = (*(uint64_t (**)(const raven::AltitudeChangeEvent *))(*(void *)a2 + 16))(a2);
  v51[1] = v8;
  uint64_t v11 = CNTimeSpan::operator-((uint64_t)v51, (void *)a2 + 13, v9, v10);
  double v13 = v12 + (double)v11;
  unint64_t v14 = (unint64_t)(COERCE__INT64(fabs(v13)) - 0x10000000000000) >> 53;
  BOOL v15 = v13 < 0.0 || v14 > 0x3FE;
  if (v15 && (unint64_t)(*(void *)&v13 - 1) > 0xFFFFFFFFFFFFELL) {
    return 0xFFFFFFFFLL;
  }
  *(_OWORD *)((char *)a3 + 8) = *(_OWORD *)((char *)a2 + 8);
  long long v17 = *(_OWORD *)((char *)a2 + 24);
  long long v18 = *(_OWORD *)((char *)a2 + 40);
  long long v19 = *(_OWORD *)((char *)a2 + 56);
  *(_OWORD *)((char *)a3 + 72) = *(_OWORD *)((char *)a2 + 72);
  *(_OWORD *)((char *)a3 + 56) = v19;
  *(_OWORD *)((char *)a3 + 40) = v18;
  *(_OWORD *)((char *)a3 + 24) = v17;
  long long v20 = *(_OWORD *)((char *)a2 + 88);
  long long v21 = *(_OWORD *)((char *)a2 + 104);
  long long v22 = *(_OWORD *)((char *)a2 + 120);
  *(_OWORD *)((char *)a3 + 136) = *(_OWORD *)((char *)a2 + 136);
  *(_OWORD *)((char *)a3 + 120) = v22;
  *(_OWORD *)((char *)a3 + 104) = v21;
  *(_OWORD *)((char *)a3 + 88) = v20;
  long long v23 = *(_OWORD *)((char *)a2 + 152);
  long long v24 = *(_OWORD *)((char *)a2 + 168);
  long long v25 = *(_OWORD *)((char *)a2 + 184);
  *(_OWORD *)((char *)a3 + 200) = *(_OWORD *)((char *)a2 + 200);
  *(_OWORD *)((char *)a3 + 184) = v25;
  *(_OWORD *)((char *)a3 + 168) = v24;
  *(_OWORD *)((char *)a3 + 152) = v23;
  if (!*((unsigned char *)this + 9)) {
    return 0;
  }
  double v26 = *((double *)a2 + 26);
  uint64_t result = (uint64_t)sub_18DFF465C((void *)(*((void *)this + 2) + 16), (unsigned __int8 *)&unk_18E1F8861);
  if (!result) {
    return result;
  }
  if (!*((unsigned char *)sub_18DFF6184((void *)(*((void *)this + 2) + 16), (unsigned __int8 *)&unk_18E1F8861) + 1544)) {
    return 0;
  }
  float64x2_t v78 = *((float64x2_t *)sub_18DFF6184((void *)(*((void *)this + 2) + 16), (unsigned __int8 *)&unk_18E1F8861) + 92);
  int8x16_t v79 = sub_18DFF6184((void *)(*((void *)this + 2) + 16), (unsigned __int8 *)&unk_18E1F8861)[186];
  float64x2_t v76 = *((float64x2_t *)sub_18DFF6184((void *)(*((void *)this + 2) + 16), (unsigned __int8 *)&unk_18E1F8861) + 97);
  uint64_t v77 = sub_18DFF6184((void *)(*((void *)this + 2) + 16), (unsigned __int8 *)&unk_18E1F8861)[196];
  v74[0] = 0;
  v74[1] = 0;
  double v75 = 0.0;
  char v68 = 0;
  uint64_t v71 = 0x300000003;
  double v69 = &unk_1EDD18EE8;
  long long v70 = xmmword_18E1F0010;
  int8x16_t v72 = &v73;
  int8x16_t v67 = &unk_1EDD0AB68;
  cnnavigation::ECEFToENU(&v76, 1, 0, &v78, 1, (uint64_t)v74, (uint64_t)&v67, COERCE_DOUBLE(0x300000003));
  if (v27) {
    return 0;
  }
  double v28 = v75;
  uint64_t v64 = 0x300000003;
  long long v63 = xmmword_18E1F0010;
  uint64_t v62 = &unk_1EDD18EE8;
  uint64_t v65 = &v66;
  long long v29 = sub_18DFF6184((void *)(*((void *)this + 2) + 16), (unsigned __int8 *)&unk_18E1F8861);
  if (!sub_18DFF61B0((uint64_t)(v29 + 146), (uint64_t)&v62))
  {
    LOWORD(v51[0]) = 12;
    LOBYTE(v57) = 2;
    uint64_t v40 = (*(uint64_t (**)(const raven::AltitudeChangeEvent *))(*(void *)a2 + 16))(a2);
    double v48 = v41 + (double)v40;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v51, (unsigned __int8 *)&v57, "t,%.3lf,WARNING: Altitude change checker, difference with current solution not checked, can't get velocity covariance", v42, v43, v44, v45, v46, SLOBYTE(v48));
    return 0;
  }
  uint64_t v59 = 0x300000003;
  long long v58 = xmmword_18E1F0010;
  uint64_t v57 = &unk_1EDD18EE8;
  double v60 = &v61;
  if (v68) {
    sub_18DFE2F24((uint64_t)&v57, (uint64_t)&v69);
  }
  uint64_t v54 = 0x300000003;
  long long v53 = xmmword_18E1F8560;
  double v52 = &unk_1EDD18EE8;
  uint64_t v55 = &v56;
  sub_18DFF6248(":", (uint64_t)&v57, 2, (uint64_t)v51);
  sub_18DFE2F24((uint64_t)&v52, (uint64_t)v51);
  sub_18DFF6360((uint64_t)&v52, (uint64_t)&v62, (uint64_t)v50);
  sub_18DFF63E0((uint64_t)&v52, (uint64_t)v49);
  sub_18DFF6360((uint64_t)v50, (uint64_t)v49, (uint64_t)v51);
  double v30 = sqrt(*(double *)v51[4]);
  BOOL v31 = fabs(vabdd_f64(v5 / v13, v28) / sqrt(v26 / v13 * (v26 / v13) + v30 * v30)) > *((double *)this + 3);
  if (*((unsigned char *)this + 8)) {
    int v32 = v31;
  }
  else {
    int v32 = 1;
  }
  return (v32 << 31 >> 31);
}

uint64_t **sub_18DFF6184(void *a1, unsigned __int8 *a2)
{
  unint64_t v2 = sub_18DFF465C(a1, a2);
  if (!v2) {
    sub_18DEDE720("unordered_map::at: key not found");
  }
  return v2 + 3;
}

BOOL sub_18DFF61B0(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 376);
  if (*(unsigned char *)(a1 + 376))
  {
    if (*(_DWORD *)(a2 + 8) == 3 && *(_DWORD *)(a2 + 12) == 3)
    {
      int v4 = *(_DWORD *)(a2 + 20);
    }
    else
    {
      *(_OWORD *)(a2 + 8) = xmmword_18E1F0010;
      int v4 = 3;
    }
    double v5 = *(void **)(a2 + 32);
    void *v5 = *(void *)(a1 + 408);
    unint64_t v6 = &v5[v4];
    *unint64_t v6 = *(void *)(a1 + 416);
    v5[2 * v4] = *(void *)(a1 + 424);
    v5[1] = *(void *)(a1 + 416);
    v6[1] = *(void *)(a1 + 432);
    uint8x8_t v7 = &v5[2 * v4];
    v7[1] = *(void *)(a1 + 440);
    uint64_t v5[2] = *(void *)(a1 + 424);
    double v6[2] = *(void *)(a1 + 440);
    uint64_t v7[2] = *(void *)(a1 + 448);
  }
  return v2 != 0;
}

uint64_t sub_18DFF6248@<X0>(char *__s1@<X2>, uint64_t a2@<X0>, int a3@<W1>, uint64_t a4@<X8>)
{
  if (strcmp(__s1, ":")) {
    __assert_rtn("operator()", "cnmatrix.h", 992, "strcmp(c, \":\") == 0");
  }
  uint64_t v21 = 0x100000001;
  long long v19 = &unk_1EDD18078;
  *(void *)&long long v7 = 0x100000001;
  *((void *)&v7 + 1) = 0x100000001;
  long long v20 = v7;
  long long v22 = &v23;
  int v23 = a3;
  int v8 = *(_DWORD *)(a2 + 12);
  uint64_t v16 = 0x100000003;
  uint64_t v11 = &unk_1EDD18DC8;
  int v12 = v8;
  int v13 = 1;
  int v14 = v8;
  int v15 = v8;
  long long v17 = v18;
  if (v8)
  {
    for (int i = 0; i != v8; ++i)
      v18[i] = i;
  }
  return sub_18DFEED18(a4, a2, (uint64_t)&v19, (uint64_t)&v11);
}

void sub_18DFF6360(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 24) = 0x300000003;
  *(void *)a3 = &unk_1EDD18EE8;
  *(_OWORD *)(a3 + 8) = xmmword_18E1F0010;
  *(void *)(a3 + 32) = a3 + 40;
  sub_18DFE2B44(a1, a2, a3);
}

void sub_18DFF63C0(_Unwind_Exception *a1)
{
  *uint64_t v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

uint64_t sub_18DFF63E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4 = *(_DWORD *)(a1 + 8);
  int v3 = *(_DWORD *)(a1 + 12);
  *(void *)(a2 + 24) = 0x300000003;
  *(void *)a2 = &unk_1EDD18EE8;
  *(_DWORD *)(a2 + 8) = v3;
  *(_DWORD *)(a2 + 12) = v4;
  *(_DWORD *)(a2 + 16) = v4 * v3;
  *(_DWORD *)(a2 + 20) = v3;
  *(void *)(a2 + 32) = a2 + 40;
  return sub_18DFE2C64(a1, a2);
}

void sub_18DFF6444(_Unwind_Exception *a1)
{
  *uint64_t v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

void sub_18DFF646C()
{
}

uint64_t raven::RavenSignalEnvironmentActiveObject::Configure(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(unsigned char *)(a1 + 480))
  {
    __int16 v26 = 12;
    unsigned __int8 v25 = 2;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v26, &v25, "RavenSignalEnvironmentActiveObject::Configure() called more than once", a4, a5, a6, a7, a8, v18);
    *(unsigned char *)(a1 + 480) = 0;
  }
  uint64_t v10 = *a2;
  if (*a2)
  {
    if (*(unsigned char *)(v10 + 33))
    {
      *(void *)(a1 + 488) = v10;
      uint64_t v11 = *(void *)(v10 + 3168);
      if (v11 > -1 && ((v11 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 < 0x3FF
        || (unint64_t)(v11 - 1) < 0xFFFFFFFFFFFFFLL)
      {
        return 0;
      }
      __int16 v20 = 12;
      char v19 = 4;
      int v15 = "RavenSignalEnvironmentActiveObject::Configure() invalid event interval";
      uint64_t v16 = &v20;
      long long v17 = &v19;
    }
    else
    {
      __int16 v22 = 12;
      char v21 = 4;
      int v15 = "RavenSignalEnvironmentActiveObject::Configure() called with uninitialized parameters";
      uint64_t v16 = &v22;
      long long v17 = &v21;
    }
  }
  else
  {
    __int16 v24 = 12;
    char v23 = 4;
    int v15 = "RavenSignalEnvironmentActiveObject::Configure() called with null pointer";
    uint64_t v16 = &v24;
    long long v17 = &v23;
  }
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)v16, (unsigned __int8 *)v17, v15, a4, a5, a6, a7, a8, v18);
  return 0xFFFFFFFFLL;
}

uint64_t raven::RavenSignalEnvironmentActiveObject::IsConfigured(raven::RavenSignalEnvironmentActiveObject *this)
{
  return *((unsigned __int8 *)this + 480);
}

void raven::RavenSignalEnvironmentActiveObject::HandleEvent(raven::RavenSignalEnvironmentActiveObject *this, const raven::SignalEnvironmentEvent *a2)
{
  uint64_t v4 = (*(uint64_t (**)(const raven::SignalEnvironmentEvent *))(*(void *)a2 + 16))(a2);
  double v11 = fabs(v5 + (double)v4);
  if ((unint64_t)(*(void *)&v11 - 0x10000000000000) >> 53 >= 0x3FF
    && (unint64_t)(*(void *)&v11 - 1) >= 0xFFFFFFFFFFFFFLL
    && COERCE__INT64(v5 + (double)v4) != 0)
  {
    __int16 v46 = 12;
    unsigned __int8 v45 = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v46, &v45, "Invalid signal environment time", v6, v7, v8, v9, v10, v42);
    return;
  }
  if (!*((unsigned char *)this + 496))
  {
LABEL_27:
    *((void *)this + 63) = &unk_1EDD145D0;
    long long v37 = *(_OWORD *)((char *)a2 + 8);
    long long v38 = *(_OWORD *)((char *)a2 + 40);
    *((_OWORD *)this + 33) = *(_OWORD *)((char *)a2 + 24);
    *((_OWORD *)this + 34) = v38;
    *((_OWORD *)this + 32) = v37;
    long long v39 = *(_OWORD *)((char *)a2 + 56);
    long long v40 = *(_OWORD *)((char *)a2 + 72);
    long long v41 = *(_OWORD *)((char *)a2 + 88);
    *((unsigned char *)this + 608) = *((unsigned char *)a2 + 104);
    *((_OWORD *)this + 36) = v40;
    *((_OWORD *)this + 37) = v41;
    *((_OWORD *)this + 35) = v39;
    *((unsigned char *)this + 496) = 1;
    return;
  }
  uint64_t v14 = (*(uint64_t (**)(char *))(*((void *)this + 63) + 16))((char *)this + 504);
  double v16 = v15;
  double v17 = v15;
  uint64_t v18 = (*(uint64_t (**)(const raven::SignalEnvironmentEvent *))(*(void *)a2 + 16))(a2);
  v20.n128_f64[0] = v19;
  if (v14) {
    BOOL v21 = 1;
  }
  else {
    BOOL v21 = (*(void *)&v16 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
  }
  if (!v21
    || (!v18 ? (BOOL v22 = (*(void *)&v19 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000) : (BOOL v22 = 1),
        !v22 || (BOOL v23 = v14 <= v18, v14 == v18)))
  {
    BOOL v23 = v17 <= v19;
  }
  if (v23)
  {
    if (*((unsigned char *)this + 496))
    {
      long long v32 = *(_OWORD *)((char *)a2 + 8);
      long long v33 = *(_OWORD *)((char *)a2 + 40);
      *((_OWORD *)this + 33) = *(_OWORD *)((char *)a2 + 24);
      *((_OWORD *)this + 34) = v33;
      *((_OWORD *)this + 32) = v32;
      long long v34 = *(_OWORD *)((char *)a2 + 56);
      long long v35 = *(_OWORD *)((char *)a2 + 72);
      long long v36 = *(_OWORD *)((char *)a2 + 88);
      *((unsigned char *)this + 608) = *((unsigned char *)a2 + 104);
      *((_OWORD *)this + 36) = v35;
      *((_OWORD *)this + 37) = v36;
      *((_OWORD *)this + 35) = v34;
      return;
    }
    goto LABEL_27;
  }
  __int16 v44 = 12;
  unsigned __int8 v43 = 4;
  if (!*((unsigned char *)this + 496)) {
    __assert_rtn("operator->", "optional.hpp", 1222, "this->is_initialized()");
  }
  uint64_t v24 = (*(uint64_t (**)(char *, __n128))(*((void *)this + 63) + 16))((char *)this + 504, v20);
  double v26 = v25 + (double)v24;
  (*(void (**)(const raven::SignalEnvironmentEvent *))(*(void *)a2 + 16))(a2);
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v44, &v43, "Signal environment received out of order,t_curr,%.3lf,t_new,%.3lf", v27, v28, v29, v30, v31, SLOBYTE(v26));
}

uint64_t raven::RavenSignalEnvironmentActiveObject::HandleEvent(uint64_t this, const raven::TimeMarkEvent *a2)
{
  if (*(unsigned char *)(this + 496))
  {
    uint64_t v3 = this;
    int v4 = *(unsigned __int8 *)(this + 616);
    if (!*(unsigned char *)(this + 616)) {
      goto LABEL_6;
    }
    double v5 = *(double *)(*(void *)(this + 488) + 3168);
    double v16 = (void *)(*(uint64_t (**)(const raven::TimeMarkEvent *))(*(void *)a2 + 16))(a2);
    *(void *)&long long v17 = v6;
    if (!*(unsigned char *)(v3 + 616)) {
LABEL_10:
    }
      __assert_rtn("get", "optional.hpp", 1212, "this->is_initialized()");
    this = CNTimeSpan::operator-((uint64_t)&v16, (void *)(v3 + 624), v7, v8);
    if (v9 + (double)this >= v5)
    {
      if (*(unsigned char *)(v3 + 496))
      {
LABEL_6:
        double v16 = &unk_1EDD145D0;
        long long v10 = *(_OWORD *)(v3 + 528);
        long long v17 = *(_OWORD *)(v3 + 512);
        long long v18 = v10;
        long long v11 = *(_OWORD *)(v3 + 544);
        long long v20 = *(_OWORD *)(v3 + 560);
        long long v12 = *(_OWORD *)(v3 + 592);
        long long v21 = *(_OWORD *)(v3 + 576);
        long long v22 = v12;
        char v23 = *(unsigned char *)(v3 + 608);
        long long v19 = v11;
        long long v17 = *(_OWORD *)((char *)a2 + 8);
        long long v18 = *(_OWORD *)((char *)a2 + 24);
        long long v13 = *(_OWORD *)((char *)a2 + 40);
        long long v14 = *(_OWORD *)((char *)a2 + 56);
        long long v15 = *(_OWORD *)((char *)a2 + 72);
        long long v22 = *(_OWORD *)((char *)a2 + 88);
        long long v21 = v15;
        long long v20 = v14;
        long long v19 = v13;
        *(_OWORD *)(v3 + 624) = *(_OWORD *)((char *)a2 + 8);
        if (!v4) {
          *(unsigned char *)(v3 + 616) = 1;
        }
        sub_18DFF69C4();
      }
      goto LABEL_10;
    }
  }
  return this;
}

void sub_18DFF69C4()
{
}

void sub_18DFF6A58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a11) {
    sub_18DEE4E18(a11);
  }
  if (a13) {
    sub_18DEE4E18(a13);
  }
  _Unwind_Resume(exception_object);
}

void raven::RavenSignalEnvironmentActiveObject::Reset(raven::RavenSignalEnvironmentActiveObject *this)
{
  if (*((unsigned char *)this + 496)) {
    *((unsigned char *)this + 496) = 0;
  }
  if (*((unsigned char *)this + 616)) {
    *((unsigned char *)this + 616) = 0;
  }
  cnframework::ActiveObjectBase::ResetCurrentTime(this);

  cnframework::ActiveObjectBase::ResetEventQueue(this);
}

void sub_18DFF6AD0(cnframework::ActiveObjectBase *a1)
{
  *(void *)a1 = &unk_1EDD156E8;
  if (*((unsigned char *)a1 + 616)) {
    *((unsigned char *)a1 + 616) = 0;
  }
  if (*((unsigned char *)a1 + 496)) {
    *((unsigned char *)a1 + 496) = 0;
  }
  cnframework::ActiveObjectBase::~ActiveObjectBase(a1);
}

void sub_18DFF6B08(cnframework::ActiveObjectBase *a1)
{
  *(void *)a1 = &unk_1EDD156E8;
  if (*((unsigned char *)a1 + 616)) {
    *((unsigned char *)a1 + 616) = 0;
  }
  if (*((unsigned char *)a1 + 496)) {
    *((unsigned char *)a1 + 496) = 0;
  }
  cnframework::ActiveObjectBase::~ActiveObjectBase(a1);

  JUMPOUT(0x192FA6240);
}

void *sub_18DFF6B74@<X0>(void *a1@<X8>)
{
  return sub_18DEDE7B0(a1, "RavenSignalEnvironmentActiveObject");
}

void sub_18DFF6B84()
{
  v0 = operator new(0x60uLL);
  sub_18DFF6BE0(v0);
}

void sub_18DFF6BCC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_18DFF6BE0(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1EDD1E458;
  sub_18DFF6CBC((uint64_t)(a1 + 3));
}

void sub_18DFF6C28(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_18DFF6C3C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDD1E458;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_18DFF6C5C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDD1E458;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FA6240);
}

uint64_t sub_18DFF6CB0(uint64_t a1)
{
  return sub_18DEE3468(a1 + 24);
}

void sub_18DFF6CBC(uint64_t a1)
{
  *(void *)a1 = &unk_1EDD0A260;
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  uint64_t v2 = MEMORY[0x1E4FBA3D8];
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = v2;
  sub_18DEDE7B0((void *)(a1 + 48), "");
  *(unsigned char *)(a1 + 8) = 1;
  sub_18DFF6E54();
}

void sub_18DFF6DFC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 71) < 0) {
    operator delete(*v3);
  }
  if (*v2) {
    (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_18DFF6E54()
{
}

void sub_18DFF6F34()
{
}

void *sub_18DFF6F48()
{
}

void sub_18DFF6F54()
{
}

uint64_t raven::RavenRayTracingActiveObject::RavenRayTracingActiveObject(uint64_t a1, unsigned char *a2)
{
  cnframework::ActiveObjectBase::ActiveObjectBase(a1, a2);
  v3->i64[0] = (uint64_t)&unk_1EDD14CD0;
  v3[30].i8[0] = 0;
  v3[30].i64[1] = 0;
  raven::RavenNLOSEngine::RavenNLOSEngine(v3 + 31);
  return a1;
}

void sub_18DFF703C(_Unwind_Exception *a1)
{
  cnframework::ActiveObjectBase::~ActiveObjectBase(v1);
  _Unwind_Resume(a1);
}

uint64_t raven::RavenRayTracingActiveObject::Configure(int64x2_t *this, uint64_t *a2)
{
  if (this[30].i8[0])
  {
    LOWORD(v41) = 12;
    LOBYTE(v40) = 3;
    sub_18DEDE7B0(__p, "RavenRayTracingActiveObject");
    if (v43 >= 0) {
      double v9 = __p;
    }
    else {
      LOBYTE(v9) = __p[0];
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v41, (unsigned __int8 *)&v40, "#ray,Warning: %s configured more than once.", v4, v5, v6, v7, v8, (char)v9);
    if (v43 < 0) {
      operator delete(__p[0]);
    }
  }
  this[30].i8[0] = 0;
  uint64_t v10 = *a2;
  if (*a2 && *(unsigned char *)(v10 + 33))
  {
    this[30].i64[1] = v10;
    cnframework::ActiveObjectBase::SetEventQueueDelay((cnframework::ActiveObjectBase *)this, 0.0);
    uint64_t v41 = *a2;
    uint64_t v17 = raven::RavenNLOSEngine::Configure((uint64_t)this[31].i64, &v41, v11, v12, v13, v14, v15, v16);
    if (v17)
    {
      uint64_t v18 = v17;
      __int16 v40 = 12;
      unsigned __int8 v39 = 4;
      sub_18DEDE7B0(__p, "RavenRayTracingActiveObject");
      if (v43 >= 0) {
        uint64_t v24 = __p;
      }
      else {
        LOBYTE(v24) = __p[0];
      }
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v40, &v39, "#ray,%s could not be configured: NLOS engine configuration result %d", v19, v20, v21, v22, v23, (char)v24);
      if (v43 < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      this[30].i8[0] = 1;
      raven::RavenRayTracingActiveObject::Reset(this);
      if (cnprint::CNPrinter::GetLogLevel(v32) <= 1)
      {
        LOWORD(v41) = 12;
        LOBYTE(v40) = 1;
        sub_18DEDE7B0(__p, "RavenRayTracingActiveObject");
        if (v43 >= 0) {
          long long v38 = __p;
        }
        else {
          LOBYTE(v38) = __p[0];
        }
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v41, (unsigned __int8 *)&v40, "#ray,%s configured successfully.", v33, v34, v35, v36, v37, (char)v38);
        if (v43 < 0) {
          operator delete(__p[0]);
        }
      }
      return 0;
    }
  }
  else
  {
    LOWORD(v41) = 12;
    LOBYTE(v40) = 4;
    sub_18DEDE7B0(__p, "RavenRayTracingActiveObject");
    if (v43 >= 0) {
      uint64_t v30 = __p;
    }
    else {
      LOBYTE(v30) = __p[0];
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v41, (unsigned __int8 *)&v40, "#ray,%s could not be configured: invalid RavenParameters", v25, v26, v27, v28, v29, (char)v30);
    if (v43 < 0) {
      operator delete(__p[0]);
    }
    return 0xFFFFFFFFLL;
  }
  return v18;
}

void sub_18DFF726C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t raven::RavenRayTracingActiveObject::IsConfigured(raven::RavenRayTracingActiveObject *this)
{
  return *((unsigned __int8 *)this + 480);
}

void *raven::RavenRayTracingActiveObject::GetActiveObjectName@<X0>(void *a1@<X8>)
{
  return sub_18DEDE7B0(a1, "RavenRayTracingActiveObject");
}

void raven::RavenRayTracingActiveObject::Reset(int64x2_t *this)
{
  __int16 v11 = 12;
  unsigned __int8 v10 = 2;
  sub_18DEDE7B0(__p, "RavenRayTracingActiveObject");
  if (v9 >= 0) {
    uint64_t v7 = __p;
  }
  else {
    LOBYTE(v7) = __p[0];
  }
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v11, &v10, "#ray,resetting %s", v2, v3, v4, v5, v6, (char)v7);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  raven::RavenNLOSEngine::Reset(this + 31);
  cnframework::ActiveObjectBase::ResetCurrentTime((cnframework::ActiveObjectBase *)this);
  cnframework::ActiveObjectBase::ResetEventQueue((cnframework::ActiveObjectBase *)this);
}

void sub_18DFF7348(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__n128 raven::RavenRayTracingActiveObject::HandleEvent(raven::RavenRayTracingActiveObject *this, const raven::ActivityStateEvent *a2)
{
  if (*((unsigned char *)this + 480))
  {
    if (*((unsigned char *)this + 504))
    {
      if (*((unsigned char *)this + 952))
      {
        long long v3 = *(_OWORD *)((char *)a2 + 8);
        long long v4 = *(_OWORD *)((char *)a2 + 24);
        long long v5 = *(_OWORD *)((char *)a2 + 56);
        *((_OWORD *)this + 50) = *(_OWORD *)((char *)a2 + 40);
        *((_OWORD *)this + 51) = v5;
        *((_OWORD *)this + 48) = v3;
        *((_OWORD *)this + 49) = v4;
        long long v6 = *(_OWORD *)((char *)a2 + 72);
        long long v7 = *(_OWORD *)((char *)a2 + 88);
        long long v8 = *(_OWORD *)((char *)a2 + 120);
        *((_OWORD *)this + 54) = *(_OWORD *)((char *)a2 + 104);
        *((_OWORD *)this + 55) = v8;
        *((_OWORD *)this + 52) = v6;
        *((_OWORD *)this + 53) = v7;
        __n128 result = *(__n128 *)((char *)a2 + 136);
        long long v10 = *(_OWORD *)((char *)a2 + 152);
        long long v11 = *(_OWORD *)((char *)a2 + 168);
        *((void *)this + 118) = *((void *)a2 + 23);
        *((_OWORD *)this + 57) = v10;
        *((_OWORD *)this + 58) = v11;
        *((__n128 *)this + 56) = result;
      }
      else
      {
        *((void *)this + 95) = &unk_1EDD140B8;
        long long v19 = *(_OWORD *)((char *)a2 + 8);
        long long v20 = *(_OWORD *)((char *)a2 + 24);
        long long v21 = *(_OWORD *)((char *)a2 + 56);
        *((_OWORD *)this + 50) = *(_OWORD *)((char *)a2 + 40);
        *((_OWORD *)this + 51) = v21;
        *((_OWORD *)this + 48) = v19;
        *((_OWORD *)this + 49) = v20;
        long long v22 = *(_OWORD *)((char *)a2 + 72);
        long long v23 = *(_OWORD *)((char *)a2 + 88);
        long long v24 = *(_OWORD *)((char *)a2 + 120);
        *((_OWORD *)this + 54) = *(_OWORD *)((char *)a2 + 104);
        *((_OWORD *)this + 55) = v24;
        *((_OWORD *)this + 52) = v22;
        *((_OWORD *)this + 53) = v23;
        __n128 result = *(__n128 *)((char *)a2 + 136);
        long long v25 = *(_OWORD *)((char *)a2 + 152);
        long long v26 = *(_OWORD *)((char *)a2 + 168);
        *((void *)this + 118) = *((void *)a2 + 23);
        *((_OWORD *)this + 57) = v25;
        *((_OWORD *)this + 58) = v26;
        *((__n128 *)this + 56) = result;
        *((unsigned char *)this + 952) = 1;
      }
    }
  }
  else if (cnprint::CNPrinter::GetLogLevel(this) <= 1)
  {
    __int16 v29 = 12;
    unsigned __int8 v28 = 1;
    uint64_t v12 = (*(uint64_t (**)(const raven::ActivityStateEvent *))(*(void *)a2 + 16))(a2);
    double v27 = v13 + (double)v12;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v29, &v28, "#ray,time,%.3lf,not configured", v14, v15, v16, v17, v18, SLOBYTE(v27));
  }
  return result;
}

double raven::RavenRayTracingActiveObject::HandleEvent(raven::RavenRayTracingActiveObject *this, const raven::GEOMapBuildingDataEvent *a2, double *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*((unsigned char *)this + 480))
  {
    char v9 = (raven::RavenRayTracingActiveObject *)((char *)this + 496);
    raven::RavenNLOSEngine::HandleEvent(v9, a2, a3, a4, a5, a6, a7, a8);
  }
  else if (cnprint::CNPrinter::GetLogLevel(this) <= 1)
  {
    __int16 v20 = 12;
    unsigned __int8 v19 = 1;
    uint64_t v11 = (*(uint64_t (**)(const raven::GEOMapBuildingDataEvent *))(*(void *)a2 + 16))(a2);
    double v18 = v12 + (double)v11;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v20, &v19, "#ray,time,%.3lf,not configured", v13, v14, v15, v16, v17, SLOBYTE(v18));
  }
  return result;
}

double raven::RavenRayTracingActiveObject::HandleEvent(raven::RavenRayTracingActiveObject *this, const raven::GnssPreprocessedMeasurementsEvent *a2)
{
  if (*((unsigned char *)this + 480))
  {
    uint64_t v14 = &unk_1EDD154D0;
    long long v17 = *(_OWORD *)((char *)a2 + 40);
    long long v18 = *(_OWORD *)((char *)a2 + 56);
    long long v19 = *(_OWORD *)((char *)a2 + 72);
    long long v15 = *(_OWORD *)((char *)a2 + 8);
    long long v16 = *(_OWORD *)((char *)a2 + 24);
    long long v4 = (void *)*((void *)a2 + 12);
    uint64_t v20 = *((void *)a2 + 11);
    memset(v21, 0, sizeof(v21));
    sub_18DFF7A80(v21, v4, *((void **)a2 + 13), (uint64_t)(*((void *)a2 + 13) - (void)v4) >> 4);
    raven::RavenNLOSEngine::HandleEvent((raven::RavenRayTracingActiveObject *)((char *)this + 496), (raven::GnssPreprocessedMeasurementsEvent *)&v14);
    sub_18DFF76F0();
  }
  if (cnprint::CNPrinter::GetLogLevel(this) <= 1)
  {
    LOWORD(v14) = 12;
    LOBYTE(v22) = 1;
    uint64_t v6 = (*(uint64_t (**)(const raven::GnssPreprocessedMeasurementsEvent *))(*(void *)a2 + 16))(a2);
    double v13 = v7 + (double)v6;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v14, (unsigned __int8 *)&v22, "#ray,time,%.3lf,not configured", v8, v9, v10, v11, v12, SLOBYTE(v13));
  }
  return result;
}

void sub_18DFF76D4(_Unwind_Exception *a1)
{
  *(void *)(v2 - 40) = v1;
  sub_18DEE4B60((void ***)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_18DFF76F0()
{
}

void sub_18DFF7784(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a11) {
    sub_18DEE4E18(a11);
  }
  if (a13) {
    sub_18DEE4E18(a13);
  }
  _Unwind_Resume(exception_object);
}

double raven::RavenRayTracingActiveObject::HandleEvent(raven::RavenRayTracingActiveObject *this, const raven::RavenSolutionEvent *a2)
{
  if (*((unsigned char *)this + 480))
  {
    long long v3 = (char *)this + 496;
    raven::RavenNLOSEngine::HandleEvent(v3, a2);
  }
  else if (cnprint::CNPrinter::GetLogLevel(this) <= 1)
  {
    __int16 v14 = 12;
    unsigned __int8 v13 = 1;
    uint64_t v5 = (*(uint64_t (**)(const raven::RavenSolutionEvent *))(*(void *)a2 + 16))(a2);
    double v12 = v6 + (double)v5;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v14, &v13, "#ray,time,%.3lf,not configured", v7, v8, v9, v10, v11, SLOBYTE(v12));
  }
  return result;
}

void raven::RavenRayTracingActiveObject::HandleEvent(int64x2_t *this, const raven::RavenSystemEvent *a2)
{
  if (!*((_DWORD *)a2 + 26)) {
    raven::RavenRayTracingActiveObject::Reset(this);
  }
}

double raven::RavenRayTracingActiveObject::HandleEvent(raven::RavenRayTracingActiveObject *this, const raven::RayTracingTileEvent *a2)
{
  if (*((unsigned char *)this + 480))
  {
    long long v3 = (raven::RavenRayTracingActiveObject *)((char *)this + 496);
    raven::RavenNLOSEngine::HandleEvent(v3, a2);
  }
  else if (cnprint::CNPrinter::GetLogLevel(this) <= 1)
  {
    __int16 v14 = 12;
    unsigned __int8 v13 = 1;
    uint64_t v5 = (*(uint64_t (**)(const raven::RayTracingTileEvent *))(*(void *)a2 + 16))(a2);
    double v12 = v6 + (double)v5;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v14, &v13, "#ray,time,%.3lf,not configured", v7, v8, v9, v10, v11, SLOBYTE(v12));
  }
  return result;
}

__n128 raven::RavenRayTracingActiveObject::HandleEvent(raven::RavenRayTracingActiveObject *this, const raven::SignalEnvironmentEvent *a2)
{
  if (*((unsigned char *)this + 480))
  {
    if (*((unsigned char *)this + 504))
    {
      if (*((unsigned char *)this + 3512))
      {
        long long v3 = *(_OWORD *)((char *)a2 + 8);
        long long v4 = *(_OWORD *)((char *)a2 + 24);
        *((_OWORD *)this + 215) = *(_OWORD *)((char *)a2 + 40);
        *((_OWORD *)this + 214) = v4;
        *((_OWORD *)this + 213) = v3;
        __n128 result = *(__n128 *)((char *)a2 + 56);
        long long v6 = *(_OWORD *)((char *)a2 + 72);
        long long v7 = *(_OWORD *)((char *)a2 + 88);
        *((unsigned char *)this + 3504) = *((unsigned char *)a2 + 104);
        *((_OWORD *)this + 218) = v7;
        *((_OWORD *)this + 217) = v6;
        *((__n128 *)this + 216) = result;
      }
      else
      {
        *((void *)this + 425) = &unk_1EDD145D0;
        long long v15 = *(_OWORD *)((char *)a2 + 8);
        long long v16 = *(_OWORD *)((char *)a2 + 24);
        *((_OWORD *)this + 215) = *(_OWORD *)((char *)a2 + 40);
        *((_OWORD *)this + 214) = v16;
        *((_OWORD *)this + 213) = v15;
        __n128 result = *(__n128 *)((char *)a2 + 56);
        long long v17 = *(_OWORD *)((char *)a2 + 72);
        long long v18 = *(_OWORD *)((char *)a2 + 88);
        *((unsigned char *)this + 3504) = *((unsigned char *)a2 + 104);
        *((_OWORD *)this + 218) = v18;
        *((_OWORD *)this + 217) = v17;
        *((__n128 *)this + 216) = result;
        *((unsigned char *)this + 3512) = 1;
      }
    }
  }
  else if (cnprint::CNPrinter::GetLogLevel(this) <= 1)
  {
    __int16 v21 = 12;
    unsigned __int8 v20 = 1;
    uint64_t v8 = (*(uint64_t (**)(const raven::SignalEnvironmentEvent *))(*(void *)a2 + 16))(a2);
    double v19 = v9 + (double)v8;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v21, &v20, "#ray,time,%.3lf,not configured", v10, v11, v12, v13, v14, SLOBYTE(v19));
  }
  return result;
}

void *sub_18DFF7A80(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    sub_18DFF7B08(result, a4);
    __n128 result = sub_18DFF7B9C((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_18DFF7AE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_18DEE4B60(&a9);
  _Unwind_Resume(a1);
}

char *sub_18DFF7B08(void *a1, unint64_t a2)
{
  if (a2 >> 60) {
    sub_18DFF7B4C();
  }
  __n128 result = (char *)sub_18DFF7B64((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void sub_18DFF7B4C()
{
}

void *sub_18DFF7B64(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60) {
    sub_18DEDF7D4();
  }
  return operator new(16 * a2);
}

void *sub_18DFF7B9C(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  uint64_t v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      void *v4 = *a2;
      uint64_t v5 = a2[1];
      v4[1] = v5;
      if (v5) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
      }
      v4 += 2;
      a2 += 2;
    }
    while (a2 != a3);
    uint64_t v10 = v4;
  }
  char v8 = 1;
  sub_18DFF7C2C((uint64_t)v7);
  return v4;
}

uint64_t sub_18DFF7C2C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_18DFF7C64(a1);
  }
  return a1;
}

void sub_18DFF7C64(uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    long long v3 = *(std::__shared_weak_count **)(v1 - 8);
    if (v3) {
      sub_18DEE4E18(v3);
    }
    v1 -= 16;
  }
}

void sub_18DFF7CA8()
{
  v0 = operator new(0x60uLL);
  sub_18DFF7D04(v0);
}

void sub_18DFF7CF0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_18DFF7D04(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1EDD1E458;
  sub_18DFF7D60((uint64_t)(a1 + 3));
}

void sub_18DFF7D4C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_18DFF7D60(uint64_t a1)
{
  *(void *)a1 = &unk_1EDD0A260;
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  uint64_t v2 = MEMORY[0x1E4FBA3D8];
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = v2;
  sub_18DEDE7B0((void *)(a1 + 48), "");
  *(unsigned char *)(a1 + 8) = 1;
  sub_18DFF7EF8();
}

void sub_18DFF7EA0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 71) < 0) {
    operator delete(*v3);
  }
  if (*v2) {
    (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_18DFF7EF8()
{
}

void sub_18DFF7F64()
{
}

void sub_18DFF8030(_Unwind_Exception *a1)
{
  MEMORY[0x192FA6240](v1, 0x10A1C404D7B42C5);
  _Unwind_Resume(a1);
}

uint64_t sub_18DFF8054(uint64_t a1)
{
  *(void *)(a1 + 8) = &unk_1EDD154D0;
  long long v3 = (void **)(a1 + 104);
  sub_18DEE4B60(&v3);
  return a1;
}

void sub_18DFF80B0(uint64_t a1)
{
  *(void *)(a1 + 8) = &unk_1EDD154D0;
  uint64_t v1 = (void **)(a1 + 104);
  sub_18DEE4B60(&v1);

  JUMPOUT(0x192FA6240);
}

void *sub_18DFF812C()
{
}

void sub_18DFF8138()
{
}

void sub_18DFF81EC(_Unwind_Exception *a1)
{
  MEMORY[0x192FA6240](v1, 0x10A1C404D7B42C5);
  _Unwind_Resume(a1);
}

uint64_t raven::OdometerChecker::Configure(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 16) = a3;
  *(void *)(a1 + 24) = *(void *)(*(void *)a2 + 2512);
  *(unsigned char *)(a1 + 8) = 1;
  return 0;
}

uint64_t raven::OdometerChecker::HandleEvent(raven::OdometerChecker *this, const raven::OdometerEvent *a2, raven::OdometerEvent *a3)
{
  if (!*((unsigned char *)this + 8))
  {
    LOWORD(v47[0]) = 12;
    unsigned __int8 v48 = 4;
    uint64_t v32 = (*(uint64_t (**)(const raven::OdometerEvent *, const raven::OdometerEvent *, raven::OdometerEvent *))(*(void *)a2 + 16))(a2, a2, a3);
    double v46 = v33 + (double)v32;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v47, &v48, "t,%.3lf,OdometerChecker, not configured", v34, v35, v36, v37, v38, SLOBYTE(v46));
    return 0xFFFFFFFFLL;
  }
  double v5 = *((double *)a2 + 25);
  uint64_t result = 0xFFFFFFFFLL;
  if ((*(void *)&v5 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || v5 < 0.0
    || (*((void *)a2 + 26) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || *((double *)a2 + 26) <= 0.0)
  {
    return result;
  }
  v47[0] = (*(uint64_t (**)(const raven::OdometerEvent *))(*(void *)a2 + 16))(a2);
  v47[1] = v8;
  uint64_t v11 = CNTimeSpan::operator-((uint64_t)v47, (void *)a2 + 13, v9, v10);
  double v13 = v12 + (double)v11;
  unint64_t v14 = (unint64_t)(COERCE__INT64(fabs(v13)) - 0x10000000000000) >> 53;
  if ((v13 < 0.0 || v14 > 0x3FE) && (unint64_t)(*(void *)&v13 - 1) > 0xFFFFFFFFFFFFELL) {
    return 0xFFFFFFFFLL;
  }
  *(_OWORD *)((char *)a3 + 8) = *(_OWORD *)((char *)a2 + 8);
  long long v17 = *(_OWORD *)((char *)a2 + 24);
  long long v18 = *(_OWORD *)((char *)a2 + 40);
  long long v19 = *(_OWORD *)((char *)a2 + 56);
  *(_OWORD *)((char *)a3 + 72) = *(_OWORD *)((char *)a2 + 72);
  *(_OWORD *)((char *)a3 + 56) = v19;
  *(_OWORD *)((char *)a3 + 40) = v18;
  *(_OWORD *)((char *)a3 + 24) = v17;
  long long v20 = *(_OWORD *)((char *)a2 + 88);
  long long v21 = *(_OWORD *)((char *)a2 + 104);
  long long v22 = *(_OWORD *)((char *)a2 + 120);
  *(_OWORD *)((char *)a3 + 136) = *(_OWORD *)((char *)a2 + 136);
  *(_OWORD *)((char *)a3 + 120) = v22;
  *(_OWORD *)((char *)a3 + 104) = v21;
  *(_OWORD *)((char *)a3 + 88) = v20;
  long long v23 = *(_OWORD *)((char *)a2 + 152);
  long long v24 = *(_OWORD *)((char *)a2 + 168);
  long long v25 = *(_OWORD *)((char *)a2 + 184);
  *(_OWORD *)((char *)a3 + 200) = *(_OWORD *)((char *)a2 + 200);
  *(_OWORD *)((char *)a3 + 184) = v25;
  *(_OWORD *)((char *)a3 + 168) = v24;
  *(_OWORD *)((char *)a3 + 152) = v23;
  if (!*((unsigned char *)this + 9)) {
    return 0;
  }
  uint64_t result = (uint64_t)sub_18DFF465C((void *)(*((void *)this + 2) + 16), (unsigned __int8 *)&unk_18E1F8A42);
  if (!result) {
    return result;
  }
  double v26 = *((double *)a2 + 26);
  double v27 = sub_18DFF465C((void *)(*((void *)this + 2) + 16), (unsigned __int8 *)&unk_18E1F8A42);
  if (!v27
    || (int v28 = *((unsigned __int8 *)v27 + 1368),
        (__int16 v29 = sub_18DFF465C((void *)(*((void *)this + 2) + 16), (unsigned __int8 *)&unk_18E1F8A42)) == 0))
  {
    sub_18DEDE720("unordered_map::at: key not found");
  }
  if (!v28)
  {
    if (*((unsigned char *)v29 + 1568))
    {
      double v39 = *((double *)sub_18DFF6184((void *)(*((void *)this + 2) + 16), (unsigned __int8 *)&unk_18E1F8A42) + 194);
      double v40 = *((double *)sub_18DFF6184((void *)(*((void *)this + 2) + 16), (unsigned __int8 *)&unk_18E1F8A42) + 195);
      uint64_t v41 = sub_18DFF6184((void *)(*((void *)this + 2) + 16), (unsigned __int8 *)&unk_18E1F8A42);
      double v30 = sqrt(v40 * v40 + v39 * v39 + *((double *)v41 + 196) * *((double *)v41 + 196));
      double v42 = *((double *)sub_18DFF6184((void *)(*((void *)this + 2) + 16), (unsigned __int8 *)&unk_18E1F8A42) + 197);
      double v43 = *((double *)sub_18DFF6184((void *)(*((void *)this + 2) + 16), (unsigned __int8 *)&unk_18E1F8A42) + 200);
      double v31 = v42
          + v43
          + *((double *)sub_18DFF6184((void *)(*((void *)this + 2) + 16), (unsigned __int8 *)&unk_18E1F8A42) + 202);
      goto LABEL_24;
    }
    return 0;
  }
  double v30 = *((double *)v29 + 172);
  double v31 = *((double *)sub_18DFF6184((void *)(*((void *)this + 2) + 16), (unsigned __int8 *)&unk_18E1F8A42) + 173);
LABEL_24:
  BOOL v44 = fabs(vabdd_f64(v5 / v13, v30) / sqrt(v31 + v26 / v13 * (v26 / v13))) > *((double *)this + 3);
  if (*((unsigned char *)this + 8)) {
    int v45 = v44;
  }
  else {
    int v45 = 1;
  }
  return (v45 << 31 >> 31);
}

void sub_18DFF8584()
{
}

uint64_t raven::GNSSUncertaintyScaling::KarooGNSSUncertaintyWrapper::Instance(raven::GNSSUncertaintyScaling::KarooGNSSUncertaintyWrapper *this)
{
  uint64_t result = qword_1E91CA068;
  if (!qword_1E91CA068) {
    operator new();
  }
  return result;
}

uint64_t raven::GNSSUncertaintyScaling::KarooGNSSUncertaintyWrapper::GetUncertaintyScaleFactorCore(cnprint::CNPrinter *a1, _DWORD *a2, unsigned __int8 *a3, unsigned char *a4, unsigned char *a5, uint64_t *a6, uint64_t a7, uint64_t a8, float a9)
{
  if (a8)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    return v12 | v11;
  }
  uint64_t v30 = v9;
  uint64_t v31 = v10;
  switch(*a4)
  {
    case 0:
      if (cnprint::CNPrinter::GetLogLevel(a1) <= 1)
      {
        __int16 v29 = 12;
        unsigned __int8 v28 = 1;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v29, &v28, "%s signal environment unknown", v16, v17, v18, v19, v20, (char)"GetUncertaintyScaleFactorCore");
      }
      goto LABEL_57;
    case 1:
    case 2:
    case 5:
      unint64_t v13 = (char)*a5;
      if (v13 >= 0xA) {
        goto LABEL_57;
      }
      uint64_t v12 = qword_18E1F9040[v13];
      goto LABEL_6;
    case 3:
    case 4:
      unsigned int v14 = *a3;
      if (v14 > 0xA) {
        goto LABEL_13;
      }
      if (((1 << v14) & 0x1F6) == 0)
      {
        if (((1 << v14) & 0x601) != 0) {
          goto LABEL_29;
        }
        goto LABEL_57;
      }
      if (*a5 != 5 || (*a2 - 2) > 2) {
        goto LABEL_57;
      }
      uint64_t v15 = qword_1EB4038F0;
      if (!qword_1EB4038F0) {
        operator new();
      }
      goto LABEL_52;
    case 6:
      unsigned int v21 = *a3;
      if (v21 > 0xA) {
        goto LABEL_13;
      }
      if (((1 << v21) & 0x1F6) != 0)
      {
        int v22 = *a5;
        if ((v22 - 2) >= 2 && v22 != 6)
        {
          if (v22 == 5)
          {
            if (*a2 == 1)
            {
              uint64_t v15 = qword_1EB403918;
              if (!qword_1EB403918) {
                operator new();
              }
            }
            else
            {
              uint64_t v15 = qword_1EB403920;
              if (!qword_1EB403920) {
                operator new();
              }
            }
            goto LABEL_52;
          }
LABEL_57:
          uint64_t v11 = 0x100000000;
          uint64_t v12 = 1065353216;
          return v12 | v11;
        }
        if (*a2 == 1)
        {
          uint64_t v15 = qword_1EB403928;
          if (!qword_1EB403928) {
            operator new();
          }
        }
        else
        {
          uint64_t v15 = qword_1EB403930;
          if (!qword_1EB403930) {
            operator new();
          }
        }
      }
      else
      {
        if (((1 << v21) & 0x601) != 0)
        {
LABEL_29:
          __int16 v29 = 12;
          unsigned __int8 v28 = 4;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v29, &v28, "%s Invalid GNSS band,%d", (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, a7, a8, (char)"GetUncertaintyScaleFactorCore");
          goto LABEL_57;
        }
        int v24 = *a5;
        if ((v24 - 2) < 2 || v24 == 6)
        {
          if (*a2 == 1)
          {
            uint64_t v15 = qword_1EB403908;
            if (!qword_1EB403908) {
              operator new();
            }
          }
          else
          {
            uint64_t v15 = qword_1EB403910;
            if (!qword_1EB403910) {
              operator new();
            }
          }
        }
        else
        {
          if (v24 != 5) {
            goto LABEL_57;
          }
          if (*a2 == 1)
          {
            uint64_t v15 = qword_1EB4038F8;
            if (!qword_1EB4038F8) {
              operator new();
            }
          }
          else
          {
            uint64_t v15 = qword_1EB403900;
            if (!qword_1EB403900) {
              operator new();
            }
          }
        }
      }
LABEL_52:
      uint64_t v25 = *a6;
      if ((unint64_t)*a6 >= 0xC)
      {
        __int16 v29 = 12;
        unsigned __int8 v28 = 5;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v29, &v28, "Out of range indices.first,%zu", (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, a7, a8, v25);
        goto LABEL_57;
      }
      unint64_t v26 = a6[1];
      if (v26 >= 0xB)
      {
        __int16 v29 = 12;
        unsigned __int8 v28 = 5;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v29, &v28, "Out of range indices.second,%zu", (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, a7, a8, v26);
        goto LABEL_57;
      }
      LOBYTE(a9) = *(unsigned char *)(v15 + 11 * v25 + v26);
      uint64_t v12 = COERCE_UNSIGNED_INT(*(float *)(v15 + 132) * (float)LODWORD(a9));
LABEL_6:
      uint64_t v11 = 0x100000000;
      return v12 | v11;
    default:
LABEL_13:
      __int16 v29 = 12;
      unsigned __int8 v28 = 4;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v29, &v28, "GNSS uncertainty parameters not found,obs_type,%d,band,%d,se,%d,activity,%d", (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, a7, a8, *a2);
      goto LABEL_57;
  }
}

uint64_t raven::GNSSUncertaintyScaling::KarooGNSSUncertaintyWrapper::GetScaleFactorTableIndices(float a1, double a2, uint64_t a3, unint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  for (unint64_t i = 0; i != 11; ++i)
  {
    if (flt_18E1F8AB8[i] >= a1) {
      break;
    }
  }
  for (unint64_t j = 0; j != 10; ++j)
  {
    if (dbl_18E1F8AE8[j] >= a2) {
      break;
    }
  }
  BOOL v12 = i >= 0xC || j >= 0xB;
  uint64_t v13 = !v12;
  if (v12)
  {
    __int16 v17 = 12;
    unsigned __int8 v16 = 5;
    double v14 = a1;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v17, &v16, "invalid index found,cn0,%.3f,cn0_bin,%zu,elev,%.3lf,elev_bin,%zu,", a6, a7, a8, a9, a10, SLOBYTE(v14));
  }
  else
  {
    *a4 = i;
    a4[1] = j;
  }
  return v13;
}

void sub_18DFF8D08()
{
}

uint64_t raven::GNSSUncertaintyScaling::Fire6orOlderGNSSUncertaintyWrapper::Instance(raven::GNSSUncertaintyScaling::Fire6orOlderGNSSUncertaintyWrapper *this)
{
  uint64_t result = qword_1E91CA070;
  if (!qword_1E91CA070) {
    operator new();
  }
  return result;
}

uint64_t raven::GNSSUncertaintyScaling::Fire6orOlderGNSSUncertaintyWrapper::GetUncertaintyScaleFactorCore(uint64_t a1, int *a2, unsigned char *a3, unsigned __int8 *a4, char *a5, uint64_t *a6, uint64_t a7, uint64_t a8)
{
  if (!a8)
  {
    unsigned int v11 = *a4;
    if (v11 > 6)
    {
      __int16 v17 = 0;
      uint64_t v16 = 0;
      uint64_t v15 = 0;
    }
    else
    {
      int v12 = 1 << v11;
      if ((v12 & 0x27) != 0)
      {
        unsigned int v13 = *a5;
        if (v13 > 6 || ((1 << v13) & 0x4C) == 0)
        {
          uint64_t v15 = qword_1EB403950;
          if (!qword_1EB403950) {
            operator new();
          }
          uint64_t v16 = qword_1EB403958;
          if (!qword_1EB403958) {
            operator new();
          }
          __int16 v17 = (cnprint::CNPrinter *)qword_1EB403960;
          if (!qword_1EB403960) {
            operator new();
          }
        }
        else
        {
          uint64_t v15 = qword_1EB403938;
          if (!qword_1EB403938) {
            operator new();
          }
          uint64_t v16 = qword_1EB403940;
          if (!qword_1EB403940) {
            operator new();
          }
          __int16 v17 = (cnprint::CNPrinter *)qword_1EB403948;
          if (!qword_1EB403948) {
            operator new();
          }
        }
      }
      else if ((v12 & 0x18) != 0)
      {
        unsigned int v18 = *a5;
        if (v18 <= 6 && ((1 << v18) & 0x4C) != 0)
        {
          uint64_t v15 = qword_1EB403968;
          if (!qword_1EB403968) {
            operator new();
          }
          uint64_t v16 = qword_1EB403970;
          if (!qword_1EB403970) {
            operator new();
          }
          __int16 v17 = (cnprint::CNPrinter *)qword_1EB403978;
          if (!qword_1EB403978) {
            operator new();
          }
        }
        else
        {
          uint64_t v15 = qword_1EB403980;
          if (!qword_1EB403980) {
            operator new();
          }
          uint64_t v16 = qword_1EB403988;
          if (!qword_1EB403988) {
            operator new();
          }
          __int16 v17 = (cnprint::CNPrinter *)qword_1EB403990;
          if (!qword_1EB403990) {
            operator new();
          }
        }
      }
      else
      {
        unsigned int v19 = *a5;
        if (v19 <= 6 && ((1 << v19) & 0x4C) != 0)
        {
          uint64_t v15 = qword_1EB403998;
          if (!qword_1EB403998) {
            operator new();
          }
          uint64_t v16 = qword_1EB4039A0;
          if (!qword_1EB4039A0) {
            operator new();
          }
          __int16 v17 = (cnprint::CNPrinter *)qword_1EB4039A8;
          if (!qword_1EB4039A8) {
            operator new();
          }
        }
        else
        {
          uint64_t v15 = qword_1EB4039B0;
          if (!qword_1EB4039B0) {
            operator new();
          }
          uint64_t v16 = qword_1EB4039B8;
          if (!qword_1EB4039B8) {
            operator new();
          }
          __int16 v17 = (cnprint::CNPrinter *)qword_1EB4039C0;
          if (!qword_1EB4039C0) {
            operator new();
          }
        }
      }
    }
    int v20 = 0;
    switch(*a3)
    {
      case 0:
      case 4:
      case 9:
        __int16 v39 = 12;
        unsigned __int8 v38 = 4;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v39, &v38, "Invalid GNSS Band type: GNSS uncertainty parameters not found for obs_type,%d,band,%d,se,%d,activity,%d", (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, a7, a8, *a2);
        goto LABEL_55;
      case 1:
        int v20 = 2;
        goto LABEL_58;
      case 2:
      case 6:
      case 8:
      case 0xA:
        float v9 = 1.0;
        if (cnprint::CNPrinter::GetLogLevel(v17) <= 1)
        {
          __int16 v39 = 12;
          unsigned __int8 v38 = 1;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v39, &v38, "Invalid GNSS Band type: GNSS uncertainty parameters not found for obs_type,%d,band,%d,se,%d,activity,%d", v21, v22, v23, v24, v25, *a2);
        }
        goto LABEL_76;
      case 3:
        int v20 = 1;
        goto LABEL_58;
      default:
LABEL_58:
        unsigned int v26 = v20;
        int v27 = *a2;
        if ((*a2 - 3) < 2)
        {
          if (!v17)
          {
            __int16 v39 = 12;
            unsigned __int8 v38 = 5;
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v39, &v38, "Invalid doppler unc scale pointer - activity_state = %d, signal_environment = %hu, band_as_int = %d", (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, a7, a8, *a5);
            float v9 = 2.0;
            goto LABEL_76;
          }
          uint64_t v31 = (float *)((char *)v17 + 116 * v26);
          float v29 = v31[28];
          uint64_t v32 = *a6;
          uint64_t v33 = a6[1];
          unsigned int v34 = *((unsigned __int8 *)&v31[4 * *a6] + v33);
          if (v34)
          {
            float v30 = (float)v34;
            goto LABEL_75;
          }
          if (!v16)
          {
LABEL_78:
            uint64_t v8 = 0x100000000;
            float v9 = v29 / 0.01;
            return v8 | LODWORD(v9);
          }
          uint64_t v35 = v16 + 116 * v26;
        }
        else
        {
          if (v27 != 2)
          {
            if (v27 == 1)
            {
              if (v15)
              {
                uint64_t v28 = a6[1];
                if (*(unsigned char *)(v15 + 116 * v26 + 16 * *a6 + v28))
                {
                  float v29 = *(float *)(v15 + 116 * v26 + 112);
                  float v30 = (float)*(unsigned __int8 *)(v15 + 116 * v26 + 16 * *a6 + v28);
LABEL_75:
                  float v9 = v29 * v30;
                  goto LABEL_76;
                }
              }
              else
              {
                __int16 v39 = 12;
                unsigned __int8 v38 = 5;
                cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v39, &v38, "Invalid range unc scale pointer - activity_state = %d, signal_environment = %hu, band_as_int = %d", (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, a7, a8, *a5);
              }
            }
            else
            {
              __int16 v39 = 12;
              unsigned __int8 v38 = 5;
              cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v39, &v38, "Invalid obs type - activity_state = %d, signal_environment = %hu, band_as_int = %d", (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, a7, a8, *a5);
            }
LABEL_55:
            float v9 = 1.0;
LABEL_76:
            uint64_t v8 = 0x100000000;
            return v8 | LODWORD(v9);
          }
          if (!v16)
          {
            __int16 v39 = 12;
            unsigned __int8 v38 = 5;
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v39, &v38, "Invalid doppler unc scale pointer - activity_state = %d, signal_environment = %hu, band_as_int = %d", (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, a7, a8, *a5);
            float v9 = 4.0;
            goto LABEL_76;
          }
          uint64_t v35 = v16 + 116 * v26;
          float v29 = *(float *)(v35 + 112);
          uint64_t v32 = *a6;
          uint64_t v33 = a6[1];
        }
        unsigned int v36 = *(unsigned __int8 *)(v35 + 16 * v32 + v33);
        if (v36)
        {
          float v30 = (float)v36;
          goto LABEL_75;
        }
        goto LABEL_78;
    }
  }
  uint64_t v8 = 0;
  float v9 = 0.0;
  return v8 | LODWORD(v9);
}

uint64_t raven::GNSSUncertaintyScaling::Fire6orOlderGNSSUncertaintyWrapper::GetScaleFactorTableIndices(float a1, double a2, uint64_t a3, unint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  for (unint64_t i = 0; i != 6; ++i)
  {
    if (flt_18E1F9098[i] >= a1) {
      break;
    }
  }
  for (unint64_t j = 0; j != 15; ++j)
  {
    if (dbl_18E1F90B0[j] >= a2) {
      break;
    }
  }
  BOOL v12 = i >= 7 || j >= 0x10;
  uint64_t v13 = !v12;
  if (v12)
  {
    __int16 v17 = 12;
    unsigned __int8 v16 = 5;
    double v14 = a1;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v17, &v16, "invalid index found,cn0,%.3f,cn0_bin,%zu,elev,%.3lf,elev_bin,%zu,", a6, a7, a8, a9, a10, SLOBYTE(v14));
  }
  else
  {
    *a4 = i;
    a4[1] = j;
  }
  return v13;
}

void sub_18DFFA030()
{
}

uint64_t raven::AccessoryVehicleSpeedChecker::Configure(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 16) = a3;
  *(unsigned char *)(a1 + 8) = 1;
  return 0;
}

uint64_t raven::AccessoryVehicleSpeedChecker::ScreenWithEstimatorSpeed(uint64_t a1, void *a2, unsigned __int8 a3, double a4)
{
  unsigned __int8 v28 = a3;
  long long v7 = sub_18DFF465C((void *)(*(void *)(a1 + 16) + 16), &v28);
  if (!v7) {
    return 0;
  }
  uint64_t v8 = v7;
  if (*((unsigned char *)v7 + 233) != 2) {
    return 0;
  }
  if (!*((unsigned char *)v7 + 1368)) {
    return 0;
  }
  double v9 = *(double *)(a2[30] - 8);
  v27[0] = (*(uint64_t (**)(void *))(*a2 + 16))(a2);
  v27[1] = v10;
  uint64_t v13 = CNTimeSpan::operator-((uint64_t)(v8 + 149), v27, v11, v12);
  if (v14 + (double)v13 >= 2.0) {
    return 0;
  }
  uint64_t result = 0;
  double v16 = *((double *)v8 + 172);
  if (v16 >= 0.0)
  {
    double v17 = sqrt(*((double *)v8 + 176));
    if (v17 > 0.0)
    {
      if (vabdd_f64(v9, v16) <= v17 * a4) {
        return 1;
      }
      ++*(_DWORD *)(a1 + 24);
      if (cnprint::CNPrinter::GetLogLevel(0) <= 1)
      {
        LOWORD(v27[0]) = 12;
        unsigned __int8 v26 = 1;
        uint64_t v18 = (*(uint64_t (**)(void *))(*a2 + 16))(a2);
        double v20 = v19 + (double)v18;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v27, &v26, "t,%.2lf,AccessoryVehicleSpeedChecker,rejected,%d,estimated speed error check failed,speed,%.2lf,estimatedUserSpeed,%.2lf,estimatedUnc,%.2lf,threshold,%.2lf,threshold_scale,%.2lf", v21, v22, v23, v24, v25, SLOBYTE(v20));
      }
      return 0;
    }
  }
  return result;
}

uint64_t raven::AccessoryVehicleSpeedChecker::HandleEvent(raven::AccessoryVehicleSpeedChecker *this, const raven::AccessoryVehicleSpeedEvent *a2, raven::AccessoryVehicleSpeedEvent *a3)
{
  if (!*((unsigned char *)this + 8))
  {
    __int16 v74 = 12;
    unsigned __int8 v73 = 4;
    uint64_t v37 = (*(uint64_t (**)(const raven::AccessoryVehicleSpeedEvent *, const raven::AccessoryVehicleSpeedEvent *, raven::AccessoryVehicleSpeedEvent *))(*(void *)a2 + 16))(a2, a2, a3);
    double v69 = v38 + (double)v37;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v74, &v73, "t,%.3lf,AccessoryVehicleSpeedChecker, not configured", v39, v40, v41, v42, v43, SLOBYTE(v69));
    return 0xFFFFFFFFLL;
  }
  uint64_t v4 = *((unsigned int *)a2 + 51);
  if (v4 != (uint64_t)(*((void *)a2 + 30) - *((void *)a2 + 29)) >> 3
    || v4 != (uint64_t)(*((void *)a2 + 27) - *((void *)a2 + 26)) >> 3)
  {
    __int16 v74 = 12;
    unsigned __int8 v73 = 4;
    uint64_t v30 = (*(uint64_t (**)(const raven::AccessoryVehicleSpeedEvent *))(*(void *)a2 + 16))(a2);
    double v68 = v31 + (double)v30;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v74, &v73, "t,%.3lf,AccessoryVehicleSpeedChecker, Assistance rejected due to inconsistent vector size,sampleCount,%u,speedVector,%zu,timeVector,%zu", v32, v33, v34, v35, v36, SLOBYTE(v68));
    return 0xFFFFFFFFLL;
  }
  *(_OWORD *)((char *)a3 + 8) = *(_OWORD *)((char *)a2 + 8);
  long long v7 = *(_OWORD *)((char *)a2 + 24);
  long long v8 = *(_OWORD *)((char *)a2 + 40);
  long long v9 = *(_OWORD *)((char *)a2 + 56);
  *(_OWORD *)((char *)a3 + 72) = *(_OWORD *)((char *)a2 + 72);
  *(_OWORD *)((char *)a3 + 56) = v9;
  *(_OWORD *)((char *)a3 + 40) = v8;
  *(_OWORD *)((char *)a3 + 24) = v7;
  long long v10 = *(_OWORD *)((char *)a2 + 88);
  long long v11 = *(_OWORD *)((char *)a2 + 104);
  long long v12 = *(_OWORD *)((char *)a2 + 120);
  *(_OWORD *)((char *)a3 + 136) = *(_OWORD *)((char *)a2 + 136);
  *(_OWORD *)((char *)a3 + 120) = v12;
  *(_OWORD *)((char *)a3 + 104) = v11;
  *(_OWORD *)((char *)a3 + 88) = v10;
  long long v13 = *(_OWORD *)((char *)a2 + 152);
  long long v14 = *(_OWORD *)((char *)a2 + 168);
  long long v15 = *(_OWORD *)((char *)a2 + 184);
  *((void *)a3 + 25) = *((void *)a2 + 25);
  *(_OWORD *)((char *)a3 + 184) = v15;
  *(_OWORD *)((char *)a3 + 168) = v14;
  *(_OWORD *)((char *)a3 + 152) = v13;
  if (a3 != a2)
  {
    sub_18DFFA6A4((char *)a3 + 208, *((char **)a2 + 26), *((void *)a2 + 27), (uint64_t)(*((void *)a2 + 27) - *((void *)a2 + 26)) >> 3);
    sub_18DFFA6A4((char *)a3 + 232, *((char **)a2 + 29), *((void *)a2 + 30), (uint64_t)(*((void *)a2 + 30) - *((void *)a2 + 29)) >> 3);
  }
  *((_WORD *)a3 + 128) = *((_WORD *)a2 + 128);
  uint64_t v16 = *((unsigned int *)a2 + 51);
  if (v16)
  {
    uint64_t v17 = 0;
    uint64_t v18 = 8 * v16;
    do
    {
      double v19 = *(double *)(*((void *)a2 + 29) + v17);
      if ((*(void *)&v19 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v19 < 0.0)
      {
        __int16 v74 = 12;
        unsigned __int8 v73 = 4;
        uint64_t v44 = (*(uint64_t (**)(const raven::AccessoryVehicleSpeedEvent *))(*(void *)a2 + 16))(a2);
        double v70 = v45 + (double)v44;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v74, &v73, "t,%.3lf,AccessoryVehicleSpeedChecker, Assistance rejected due to over max speed, %.3lf", v46, v47, v48, v49, v50, SLOBYTE(v70));
        goto LABEL_27;
      }
      if (v19 >= 40.0)
      {
        __int16 v74 = 12;
        unsigned __int8 v73 = 4;
        uint64_t v51 = (*(uint64_t (**)(const raven::AccessoryVehicleSpeedEvent *))(*(void *)a2 + 16))(a2);
        double v71 = v52 + (double)v51;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v74, &v73, "t,%.3lf,AccessoryVehicleSpeedChecker, Assistance not used due to speed,%.3lf,over max speed", v53, v54, v55, v56, v57, SLOBYTE(v71));
        goto LABEL_27;
      }
      if ((*(void *)(*((void *)a2 + 26) + v17) & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
      {
        __int16 v74 = 12;
        unsigned __int8 v73 = 4;
        uint64_t v58 = (*(uint64_t (**)(const raven::AccessoryVehicleSpeedEvent *))(*(void *)a2 + 16))(a2);
        double v72 = v59 + (double)v58;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v74, &v73, "t,%.3lf,AccessoryVehicleSpeedChecker, Assistance rejected due to invalid time offset, %.3lf", v60, v61, v62, v63, v64, SLOBYTE(v72));
        goto LABEL_27;
      }
      v17 += 8;
    }
    while (v18 != v17);
    if (raven::AccessoryVehicleSpeedChecker::ScreenWithEstimatorSpeed((uint64_t)this, a2, 4u, 1.5))
    {
      double v20 = (cnprint::CNPrinter *)raven::AccessoryVehicleSpeedChecker::ScreenWithEstimatorSpeed((uint64_t)this, a2, 1u, 2.5);
      if (v20)
      {
        int v21 = *((_DWORD *)this + 6);
        if (v21 < 1) {
          return 0;
        }
        *((_DWORD *)this + 6) = v21 - (*(double *)(*((void *)a2 + 30) - 8) > 0.05);
        if (cnprint::CNPrinter::GetLogLevel(v20) <= 1)
        {
          __int16 v74 = 12;
          unsigned __int8 v73 = 1;
          uint64_t v22 = (*(uint64_t (**)(const raven::AccessoryVehicleSpeedEvent *))(*(void *)a2 + 16))(a2);
          double v67 = v23 + (double)v22;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v74, &v73, "t,%.2lf,AccessoryVehicleSpeedChecker,rejectionCount,%d,speed,%.3lf", v24, v25, v26, v27, v28, SLOBYTE(v67));
        }
        if (!*((_DWORD *)this + 6)) {
          return 0;
        }
      }
    }
  }
LABEL_27:
  uint64_t v65 = (void *)*((void *)a3 + 26);
  *((_DWORD *)a3 + 51) = 0;
  if (v65)
  {
    *((void *)a3 + 27) = v65;
    operator delete(v65);
  }
  uint64_t v66 = (void *)*((void *)a3 + 29);
  *((void *)a3 + 26) = 0;
  *((void *)a3 + 27) = 0;
  *((void *)a3 + 28) = 0;
  if (v66)
  {
    *((void *)a3 + 30) = v66;
    operator delete(v66);
  }
  uint64_t result = 0;
  *((void *)a3 + 29) = 0;
  *((void *)a3 + 30) = 0;
  *((void *)a3 + 31) = 0;
  return result;
}

uint64_t raven::AccessoryVehicleSpeedChecker::Reset(uint64_t this)
{
  *(_DWORD *)(this + 24) = 0;
  return this;
}

void sub_18DFFA690()
{
}

char *sub_18DFFA6A4(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  long long v7 = result;
  uint64_t v8 = *((void *)result + 2);
  long long v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 3)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *long long v7 = 0;
      v7[1] = 0;
      uint64_t v7[2] = 0;
    }
    if (a4 >> 61) {
      sub_18DEE1FC8();
    }
    uint64_t v10 = v8 >> 2;
    if (v8 >> 2 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t result = sub_18DFFA7B0(v7, v11);
    long long v13 = (char *)v7[1];
    long long v12 = (void **)(v7 + 1);
    long long v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      uint64_t v18 = v9;
      double v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  long long v12 = (void **)(result + 8);
  long long v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 3;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  uint64_t v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v14 - v9);
    long long v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    uint64_t v18 = v9;
    double v19 = v16;
LABEL_18:
    uint64_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  uint64_t *v12 = &v9[v17];
  return result;
}

char *sub_18DFFA7B0(void *a1, unint64_t a2)
{
  if (a2 >> 61) {
    sub_18DEE1FC8();
  }
  uint64_t result = (char *)sub_18DEDF808((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

uint64_t raven::RavenPositionContextStateLookupTables::PositionContextStateLookupTables::LookupMeanCn0ProbabilityGivenOutdoor(uint64_t a1, uint64_t *a2, unsigned char *a3, double *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = *a2;
  if ((unint64_t)*a2 < 0x2E)
  {
    switch(*a3)
    {
      case 1:
      case 5:
        uint64_t result = 0;
        long long v12 = (double *)&unk_18E1FA9B0;
        break;
      case 2:
        uint64_t result = 0;
        long long v12 = (double *)&unk_18E1FAB20;
        break;
      case 3:
        uint64_t result = 0;
        long long v12 = (double *)&unk_18E1FAC90;
        break;
      case 4:
        uint64_t result = 0;
        long long v12 = (double *)&unk_18E1FAE00;
        break;
      case 6:
        uint64_t result = 0;
        long long v12 = (double *)&unk_18E1FAF70;
        break;
      default:
        goto LABEL_3;
    }
    double v11 = v12[v9];
  }
  else
  {
    __int16 v14 = 12;
    unsigned __int8 v13 = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v14, &v13, "LookupMeanCn0ProbabilityGivenOutdoor(),index out of bound,%lu", (uint64_t)a4, a5, a6, a7, a8, v9);
LABEL_3:
    uint64_t result = 0xFFFFFFFFLL;
    double v11 = -1.0;
  }
  *a4 = v11;
  return result;
}

uint64_t raven::RavenPositionContextStateLookupTables::PositionContextStateLookupTables::LookupMeanCn0ProbabilityGivenIndoor(raven::RavenPositionContextStateLookupTables::PositionContextStateLookupTables *this, const unint64_t *a2, double *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = *a2;
  if (*a2 < 0x2E)
  {
    uint64_t result = 0;
    double v11 = dbl_18E1FB0E0[v9];
  }
  else
  {
    __int16 v13 = 12;
    unsigned __int8 v12 = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v13, &v12, "LookupMeanCn0ProbabilityGivenIndoor(),index out of bound,%lu", a4, a5, a6, a7, a8, v9);
    uint64_t result = 0xFFFFFFFFLL;
    double v11 = -1.0;
  }
  *a3 = v11;
  return result;
}

uint64_t raven::RavenPositionContextStateLookupTables::PositionContextStateLookupTables::LookupNumSatsProbabilityGivenOutdoor(uint64_t a1, uint64_t *a2, unsigned char *a3, double *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = *a2;
  if ((unint64_t)*a2 < 0x47)
  {
    switch(*a3)
    {
      case 1:
      case 5:
        uint64_t result = 0;
        unsigned __int8 v12 = (double *)&unk_18E1FB250;
        break;
      case 2:
        uint64_t result = 0;
        unsigned __int8 v12 = (double *)&unk_18E1FB488;
        break;
      case 3:
        uint64_t result = 0;
        unsigned __int8 v12 = (double *)&unk_18E1FB6C0;
        break;
      case 4:
        uint64_t result = 0;
        unsigned __int8 v12 = (double *)&unk_18E1FB8F8;
        break;
      case 6:
        uint64_t result = 0;
        unsigned __int8 v12 = (double *)&unk_18E1FBB30;
        break;
      default:
        goto LABEL_3;
    }
    double v11 = v12[v9];
  }
  else
  {
    __int16 v14 = 12;
    unsigned __int8 v13 = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v14, &v13, "LookupNumSatsProbabilityGivenOutdoor(),index out of bound,%lu", (uint64_t)a4, a5, a6, a7, a8, v9);
LABEL_3:
    uint64_t result = 0xFFFFFFFFLL;
    double v11 = -1.0;
  }
  *a4 = v11;
  return result;
}

uint64_t raven::RavenPositionContextStateLookupTables::PositionContextStateLookupTables::LookupNumSatsProbabilityGivenIndoor(raven::RavenPositionContextStateLookupTables::PositionContextStateLookupTables *this, const unint64_t *a2, double *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = *a2;
  if (*a2 < 0x47)
  {
    uint64_t result = 0;
    double v11 = dbl_18E1FBD68[v9];
  }
  else
  {
    __int16 v13 = 12;
    unsigned __int8 v12 = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v13, &v12, "LookupNumSatsProbabilityGivenIndoor(),index out of bound,%lu", a4, a5, a6, a7, a8, v9);
    uint64_t result = 0xFFFFFFFFLL;
    double v11 = -1.0;
  }
  *a3 = v11;
  return result;
}

uint64_t raven::RavenPositionContextStateLookupTables::PositionContextStateLookupTables::LookupGnssAvailabilityStateProbabilityGivenOutdoor(uint64_t a1, unsigned __int8 *a2, double *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9 = *a2;
  if (v9 < 4)
  {
    uint64_t result = 0;
    double v11 = dbl_18E1FBFA0[v9];
  }
  else
  {
    __int16 v13 = 12;
    unsigned __int8 v12 = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v13, &v12, "LookupGnssAvailabilityStateProbabilityGivenOutdoor(),index out of bound,%lu", a4, a5, a6, a7, a8, v9);
    uint64_t result = 0xFFFFFFFFLL;
    double v11 = -1.0;
  }
  *a3 = v11;
  return result;
}

uint64_t raven::RavenPositionContextStateLookupTables::PositionContextStateLookupTables::LookupGnssAvailabilityStateProbabilityGivenIndoor(uint64_t a1, unsigned __int8 *a2, double *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9 = *a2;
  if (v9 < 4)
  {
    uint64_t result = 0;
    double v11 = dbl_18E1FBFB8[v9];
  }
  else
  {
    __int16 v13 = 12;
    unsigned __int8 v12 = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v13, &v12, "LookupGnssAvailabilityStateProbabilityGivenIndoor(),index out of bound,%lu", a4, a5, a6, a7, a8, v9);
    uint64_t result = 0xFFFFFFFFLL;
    double v11 = -1.0;
  }
  *a3 = v11;
  return result;
}

uint64_t raven::RavenPositionContextStateLookupTables::PositionContextStateLookupTables::LookupActivityStateProbabilityGivenOutdoor(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, double *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9 = *a2;
  if (v9 < 0xB)
  {
    unint64_t v10 = *a3;
    if (v10 < 8)
    {
      uint64_t result = 0;
      double v12 = dbl_18E1FBFD0[v9] * dbl_18E1FC020[2 * v10 + 1];
      goto LABEL_7;
    }
    __int16 v14 = 12;
    unsigned __int8 v13 = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v14, &v13, "LookupActivityStateProbabilityGivenOutdoor(),latent probability index out of bound,%lu", (uint64_t)a4, a5, a6, a7, a8, v10);
  }
  else
  {
    __int16 v16 = 12;
    unsigned __int8 v15 = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v16, &v15, "LookupActivityStateProbabilityGivenOutdoor(),index out of bound,%lu", (uint64_t)a4, a5, a6, a7, a8, v9);
  }
  uint64_t result = 0xFFFFFFFFLL;
  double v12 = -1.0;
LABEL_7:
  *a4 = v12;
  return result;
}

uint64_t raven::RavenPositionContextStateLookupTables::PositionContextStateLookupTables::LookupActivityStateProbabilityGivenIndoor(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, double *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9 = *a2;
  if (v9 < 0xB)
  {
    unint64_t v10 = *a3;
    if (v10 < 8)
    {
      uint64_t result = 0;
      double v12 = dbl_18E1FC090[v9] * dbl_18E1FC020[2 * v10];
      goto LABEL_7;
    }
    __int16 v14 = 12;
    unsigned __int8 v13 = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v14, &v13, "LookupActivityStateProbabilityGivenIndoor(),latent probability index out of bound,%lu", (uint64_t)a4, a5, a6, a7, a8, v10);
  }
  else
  {
    __int16 v16 = 12;
    unsigned __int8 v15 = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v16, &v15, "LookupActivityStateProbabilityGivenIndoor(),index out of bound,%lu", (uint64_t)a4, a5, a6, a7, a8, v9);
  }
  uint64_t result = 0xFFFFFFFFLL;
  double v12 = -1.0;
LABEL_7:
  *a4 = v12;
  return result;
}

void raven::RavenSolutionPostprocessor::AdjustRavenSolutionUncertainties(raven::RavenSolutionPostprocessor *this, float64x2_t *a2)
{
  uint64_t v4 = (float64x2_t *)((char *)a2 + 1416);
  uint64_t v5 = *((void *)this + 1);
  uint64_t v6 = 3440;
  if (LOBYTE(a2[151].f64[1]) - 3 < 2) {
    uint64_t v6 = 3448;
  }
  uint64_t v7 = 3456;
  if (LOBYTE(a2[151].f64[1]) - 3 < 2) {
    uint64_t v7 = 3464;
  }
  uint64_t v8 = 3424;
  if (LOBYTE(a2[151].f64[1]) - 3 < 2) {
    uint64_t v8 = 3432;
  }
  double v9 = *(double *)(v5 + v8);
  double v10 = *(double *)(v5 + v7);
  double v11 = *(double *)(v5 + v6);
  double v12 = a2[67].f64[0];
  sub_18DFFDA0C((uint64_t)v155, a2[79].f64[1], a2[80].f64[0], a2[80].f64[1]);
  double v18 = v9 * v9;
  double v19 = v18 + v18;
  if (!LOBYTE(a2[91].f64[1]))
  {
    double v31 = v10 * v10 + v10 * v10;
LABEL_104:
    int v38 = 3;
    goto LABEL_105;
  }
  uint64_t v20 = 0;
  uint64_t v145 = 0x300000003;
  int v143 = &unk_1EDD18EE8;
  int v21 = (unsigned char *)&a2[6].f64[1];
  long long v144 = xmmword_18E1F0010;
  uint64_t v146 = &v147;
  float64_t v22 = a2[94].f64[0];
  float64_t v23 = a2[94].f64[1];
  float64_t v147 = a2[93].f64[1];
  float64_t v148 = v22;
  float64_t v24 = a2[95].f64[0];
  float64_t v149 = v23;
  float64_t v150 = v22;
  float64x2_t v25 = v4[7];
  float64_t v151 = v24;
  float64_t v152 = v25.f64[0];
  float64_t v153 = v23;
  *(_DWORD *)double v156 = 303108111;
  float64x2_t v154 = v25;
  while (1)
  {
    uint64_t v26 = v156[v20];
    if (*((_DWORD *)a2[33].f64 + v26 + 1) || *((_DWORD *)&a2[16].f64[1] + v26 + 1) || *((_DWORD *)a2[25].f64 + v26)) {
      break;
    }
    if (++v20 == 4)
    {
      int v27 = 0;
      goto LABEL_16;
    }
  }
  if (!*v21)
  {
    int v27 = 1;
    goto LABEL_23;
  }
  *(_WORD *)double v156 = 12;
  v141.i8[0] = 2;
  float64_t v134 = a2[1].f64[0] + (double)*(uint64_t *)&a2->f64[1];
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)v156, (unsigned __int8 *)&v141, "%.3lf, position uncertainty was floored aggressively", v13, v14, v15, v16, v17, SLOBYTE(v134));
  int v27 = 1;
LABEL_16:
  if (!*v21)
  {
LABEL_23:
    unsigned int v32 = LOBYTE(a2[151].f64[1]);
    int v33 = 1;
    if (v32 <= 6 && ((1 << v32) & 0x59) != 0)
    {
      if (v32 - 3 <= 1)
      {
        int v33 = 0;
        unsigned int v35 = LOBYTE(a2[133].f64[0]);
        BOOL v37 = v35 > 9 || v35 == 5;
        goto LABEL_37;
      }
      int v33 = 0;
    }
    BOOL v37 = 0;
LABEL_37:
    if (v12 <= 0.0 || !(v33 | v37))
    {
      int v38 = 3;
      if (!v27) {
        goto LABEL_88;
      }
      goto LABEL_87;
    }
    double v39 = 8.0;
    if (!v37) {
      double v39 = v9;
    }
    if (v33) {
      double v39 = 2.0;
    }
    if (v39 <= a2[67].f64[0]) {
      double v39 = a2[67].f64[0];
    }
    double v19 = v39 * v39;
    int v38 = 3;
    goto LABEL_86;
  }
  int v28 = LODWORD(a2[67].f64[1]);
  if (v28 <= *(_DWORD *)(v5 + 3388))
  {
    int v38 = 0;
    uint64_t v30 = (double *)(v5 + 3392);
LABEL_52:
    double v40 = *v30;
    goto LABEL_53;
  }
  int v29 = HIDWORD(a2[67].f64[1]);
  if (v28 - v29 <= *(_DWORD *)(v5 + 3384))
  {
    uint64_t v30 = (double *)(v5 + 3400);
    int v38 = 1;
    goto LABEL_52;
  }
  if (*(double *)(v5 + 3368) * (double)v28 < (double)v29)
  {
    uint64_t v30 = (double *)(v5 + 3408);
LABEL_51:
    int v38 = 2;
    goto LABEL_52;
  }
  double v40 = 0.0;
  if (a2[68].f64[0] > *(double *)(v5 + 3376))
  {
    uint64_t v30 = (double *)(v5 + 3416);
    goto LABEL_51;
  }
  int v38 = 3;
LABEL_53:
  double v19 = v19 + v40 * v40;
  if (v12 > 0.0 && v19 <= a2[67].f64[0] * a2[67].f64[0]) {
    double v19 = a2[67].f64[0] * a2[67].f64[0];
  }
  double v41 = a2[66].f64[1];
  if (v41 > 7.0)
  {
    double v42 = v41 * 10.0 * (v41 * 10.0);
    if (v19 <= v42) {
      double v19 = v42;
    }
  }
  if (*((unsigned char *)this + 424) && *((unsigned char *)this + 344))
  {
    int v43 = *((unsigned __int8 *)this + 264);
    if (v43 == 11 || v43 == 4)
    {
      int64x2_t v141 = vdupq_n_s64(0x7FF8000000000000uLL);
      uint64_t v142 = 0x7FF8000000000000;
    }
    else
    {
      int64x2_t v141 = vdupq_n_s64(0x7FF8000000000000uLL);
      uint64_t v142 = 0x7FF8000000000000;
      if (v43 != 16) {
        goto LABEL_86;
      }
    }
    *(float64x2_t *)double v156 = vsubq_f64(a2[92], *((float64x2_t *)this + 22));
    *(double *)&v156[16] = a2[93].f64[0] - *((double *)this + 46);
    if (sub_18DEF20E0((uint64_t)v155, (double *)v156, (double *)v141.i64))
    {
      *(double *)v45.i64 = *(double *)&v141.i64[1] * *(double *)&v141.i64[1];
      *(double *)v44.i64 = *(double *)v141.i64 * *(double *)v141.i64 + *(double *)&v141.i64[1] * *(double *)&v141.i64[1];
      double v46 = sqrt(*(double *)v44.i64);
    }
    else
    {
      double v46 = NAN;
    }
    uint64_t v47 = CNTimeSpan::operator-((uint64_t)&a2->f64[1], (void *)this + 9, v44, v45);
    if (fabs(v48 + (double)v47) < 10.0 || v46 < 100.0)
    {
      if (!*((unsigned char *)this + 424)) {
        sub_18DFF28FC();
      }
      if ((*v146 + v146[HIDWORD(v144) + 1] + v146[2 * HIDWORD(v144) + 2]) * 0.666666667 > v18 + v18)
      {
        uint64_t v157 = 0x300000003;
        *(void *)double v156 = &unk_1EDD18EE8;
        *(_OWORD *)&v156[8] = xmmword_18E1F0010;
        double v158 = (double *)v159;
        if (sub_18DFFBB34((uint64_t)v155, (uint64_t)&v143, (uint64_t)v156))
        {
          double v54 = *v158;
          if (v18 > *v158) {
            double v54 = v9 * v9;
          }
          uint64_t v55 = &v158[*(int *)&v156[20]];
          if (v18 <= v55[1]) {
            double v18 = v55[1];
          }
          goto LABEL_81;
        }
        __int16 v140 = 12;
        unsigned __int8 v139 = 4;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v140, &v139, "Solution Postprocessor: Unable to rotate user position covariance from ECEF to ENU frame", v49, v50, v51, v52, v53, v133);
      }
      double v54 = v9 * v9;
LABEL_81:
      double v56 = *((double *)this + 37)
          + v54
          + *(double *)v141.i64 * *(double *)v141.i64
          + *((double *)this + 40)
          + v18
          + *(double *)&v141.i64[1] * *(double *)&v141.i64[1];
      if (v19 <= v56)
      {
        if (v46 - sqrt(v19) > 30.0 && v46 * v46 / (v19 + v56) > 0.64) {
          double v19 = v46 * v46 / 0.64 - v56;
        }
      }
      else
      {
        double v19 = v56;
      }
    }
  }
LABEL_86:
  if ((v27 & 1) == 0) {
    goto LABEL_88;
  }
LABEL_87:
  if (!raven::RavenSolutionPostprocessor::Update_EHE_Floor_Filter((uint64_t)this, (uint64_t)&a2[73], (uint64_t)&a2[6].f64[1], v19))goto LABEL_90; {
LABEL_88:
  }
  if (*((_DWORD *)this + 336)) {
    double v19 = *((double *)this + 167) * *((double *)this + 167);
  }
LABEL_90:
  uint64_t v157 = 0x300000003;
  *(void *)double v156 = &unk_1EDD18EE8;
  *(_OWORD *)&v156[8] = xmmword_18E1F0010;
  double v158 = (double *)v159;
  if (!sub_18DFFBB34((uint64_t)v155, (uint64_t)&v143, (uint64_t)v156))
  {
    v141.i16[0] = 12;
    LOBYTE(v140) = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v141, (unsigned __int8 *)&v140, "Solution Postprocessor: Unable to rotate device velocity covariance from ECEF to ENU frame", v57, v58, v59, v60, v61, v133);
    goto LABEL_97;
  }
  double v62 = *v158 + v158[*(int *)&v156[20] + 1];
  double v63 = fabs(v62);
  if (v62 <= 0.0 || *(void *)&v63 >= 0x7FF0000000000000)
  {
    v141.i16[0] = 12;
    LOBYTE(v140) = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v141, (unsigned __int8 *)&v140, "Solution Postprocessor: Invalid horizontal variance %.3lf", v57, v58, v59, v60, v61, SLOBYTE(v62));
LABEL_97:
    *(_WORD *)double v156 = 12;
    v141.i8[0] = 4;
    float64_t v135 = a2[1].f64[0] + (double)*(uint64_t *)&a2->f64[1];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v156, (unsigned __int8 *)&v141, "t,%.3lf,Solution Postprocessor: Couldn't compute the scale factor for device position covariance", v65, v66, v67, v68, v69, SLOBYTE(v135));
    goto LABEL_98;
  }
  double v128 = v19 / v62;
  if (v128 > 1.0)
  {
    float64x2_t v129 = vmulq_n_f64(v4[6], v128);
    v4[5] = vmulq_n_f64(v4[5], v128);
    v4[6] = v129;
    v4[7] = vmulq_n_f64(v4[7], v128);
  }
LABEL_98:
  double v31 = v10 * v10 + v10 * v10;
  if ((v38 - 1) >= 2)
  {
    if (!v38)
    {
      int v38 = 0;
      double v31 = fmax(v31, 1110.8889);
      goto LABEL_105;
    }
    goto LABEL_104;
  }
  double v70 = a2[84].f64[1] * 3.0 * (a2[84].f64[1] * 3.0);
  if (v31 > v70) {
    double v70 = v31;
  }
  double v31 = v70;
LABEL_105:
  if (!LOBYTE(a2[96].f64[1])) {
    goto LABEL_114;
  }
  uint64_t v145 = 0x300000003;
  int v143 = &unk_1EDD18EE8;
  long long v144 = xmmword_18E1F0010;
  uint64_t v146 = &v147;
  float64_t v71 = a2[99].f64[0];
  float64_t v72 = a2[99].f64[1];
  float64_t v147 = a2[98].f64[1];
  float64_t v148 = v71;
  float64_t v73 = a2[100].f64[0];
  float64_t v149 = v72;
  float64_t v150 = v71;
  float64x2_t v74 = v4[12];
  float64_t v151 = v73;
  float64_t v152 = v74.f64[0];
  float64_t v153 = v72;
  float64x2_t v154 = v74;
  uint64_t v157 = 0x300000003;
  *(void *)double v156 = &unk_1EDD18EE8;
  *(_OWORD *)&v156[8] = xmmword_18E1F0010;
  double v158 = (double *)v159;
  if (!sub_18DFFBB34((uint64_t)v155, (uint64_t)&v143, (uint64_t)v156))
  {
    v141.i16[0] = 12;
    LOBYTE(v140) = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v141, (unsigned __int8 *)&v140, "Solution Postprocessor: Unable to rotate device velocity covariance from ECEF to ENU frame", v75, v76, v77, v78, v79, v133);
    goto LABEL_113;
  }
  double v80 = *v158 + v158[*(int *)&v156[20] + 1];
  double v81 = fabs(v80);
  if (v80 <= 0.0 || *(void *)&v81 >= 0x7FF0000000000000)
  {
    v141.i16[0] = 12;
    LOBYTE(v140) = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v141, (unsigned __int8 *)&v140, "Solution Postprocessor: Invalid horizontal variance %.3lf", v75, v76, v77, v78, v79, SLOBYTE(v80));
LABEL_113:
    *(_WORD *)double v156 = 12;
    v141.i8[0] = 4;
    float64_t v136 = a2[1].f64[0] + (double)*(uint64_t *)&a2->f64[1];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v156, (unsigned __int8 *)&v141, "t,%.3lf,Solution Postprocessor: Couldn't compute the scale factor for device velocity covariance", v83, v84, v85, v86, v87, SLOBYTE(v136));
    goto LABEL_114;
  }
  double v130 = v31 / v80;
  if (v130 > 1.0)
  {
    float64x2_t v131 = vmulq_n_f64(v4[11], v130);
    v4[10] = vmulq_n_f64(v4[10], v130);
    v4[11] = v131;
    v4[12] = vmulq_n_f64(v4[12], v130);
  }
LABEL_114:
  if (!LOBYTE(a2[79].f64[0])) {
    goto LABEL_123;
  }
  uint64_t v145 = 0x300000003;
  int v143 = &unk_1EDD18EE8;
  long long v144 = xmmword_18E1F0010;
  uint64_t v146 = &v147;
  float64_t v88 = a2[81].f64[1];
  float64_t v89 = a2[82].f64[0];
  float64_t v147 = a2[81].f64[0];
  float64_t v148 = v88;
  float64_t v90 = a2[82].f64[1];
  float64_t v149 = v89;
  float64_t v150 = v88;
  float64x2_t v91 = a2[83];
  float64_t v151 = v90;
  float64_t v152 = v91.f64[0];
  float64_t v153 = v89;
  float64x2_t v154 = v91;
  uint64_t v157 = 0x300000003;
  *(void *)double v156 = &unk_1EDD18EE8;
  *(_OWORD *)&v156[8] = xmmword_18E1F0010;
  double v158 = (double *)v159;
  if (!sub_18DFFBB34((uint64_t)v155, (uint64_t)&v143, (uint64_t)v156))
  {
    v141.i16[0] = 12;
    LOBYTE(v140) = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v141, (unsigned __int8 *)&v140, "Solution Postprocessor: Unable to rotate device velocity covariance from ECEF to ENU frame", v92, v93, v94, v95, v96, v133);
    goto LABEL_122;
  }
  double v97 = *v158 + v158[*(int *)&v156[20] + 1];
  double v98 = fabs(v97);
  if (v97 <= 0.0 || *(void *)&v98 >= 0x7FF0000000000000)
  {
    v141.i16[0] = 12;
    LOBYTE(v140) = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v141, (unsigned __int8 *)&v140, "Solution Postprocessor: Invalid horizontal variance %.3lf", v92, v93, v94, v95, v96, SLOBYTE(v97));
LABEL_122:
    *(_WORD *)double v156 = 12;
    v141.i8[0] = 4;
    float64_t v137 = a2[1].f64[0] + (double)*(uint64_t *)&a2->f64[1];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v156, (unsigned __int8 *)&v141, "t,%.3lf,Solution Postprocessor: Couldn't compute the scale factor for user position covariance", v100, v101, v102, v103, v104, SLOBYTE(v137));
    goto LABEL_123;
  }
  double v132 = v19 / v97;
  if (v132 > 1.0)
  {
    a2[81] = vmulq_n_f64(a2[81], v132);
    a2[82] = vmulq_n_f64(a2[82], v132);
    a2[83] = vmulq_n_f64(a2[83], v132);
  }
LABEL_123:
  double v105 = v11 * 0.0174532925 * (v11 * 0.0174532925);
  if (LOBYTE(a2[84].f64[0]))
  {
    double v106 = a2[86].f64[1];
    if (v106 <= v31) {
      double v106 = v31;
    }
    a2[86].f64[1] = v106;
    double v107 = 39.4784176;
    if (v38 == 3)
    {
      double v108 = a2[84].f64[1];
      if (v108 > 0.0)
      {
        double v109 = v106 / (v108 * v108);
        if (v105 <= v109) {
          double v105 = v109;
        }
        double v107 = fmin(v105, 39.4784176);
      }
    }
  }
  else
  {
    double v107 = v11 * 0.0174532925 * (v11 * 0.0174532925);
  }
  if (BYTE1(a2[84].f64[0]))
  {
    uint64_t v145 = 0x300000003;
    int v143 = &unk_1EDD18EE8;
    long long v144 = xmmword_18E1F0010;
    uint64_t v146 = &v147;
    float64_t v110 = a2[89].f64[0];
    float64_t v111 = a2[89].f64[1];
    float64_t v147 = a2[88].f64[1];
    float64_t v148 = v110;
    float64_t v112 = a2[90].f64[0];
    float64_t v149 = v111;
    float64_t v150 = v110;
    float64x2_t v113 = v4[2];
    float64_t v151 = v112;
    float64_t v152 = v113.f64[0];
    float64_t v153 = v111;
    float64x2_t v154 = v113;
    uint64_t v157 = 0x300000003;
    *(void *)double v156 = &unk_1EDD18EE8;
    *(_OWORD *)&v156[8] = xmmword_18E1F0010;
    double v158 = (double *)v159;
    if (sub_18DFFBB34((uint64_t)v155, (uint64_t)&v143, (uint64_t)v156))
    {
      double v119 = v158[*(int *)&v156[20] + 1];
      double v120 = *v158 + v119;
      if (v120 > 0.0 && COERCE_UNSIGNED_INT64(fabs(*v158 + v119)) < 0x7FF0000000000000)
      {
        double v121 = (v107 + v107) / v120;
        if (v121 > 1.0)
        {
          float64x2_t v122 = vmulq_n_f64(v4[1], v121);
          float64x2_t *v4 = vmulq_n_f64(*v4, v121);
          v4[1] = v122;
          void v4[2] = vmulq_n_f64(v4[2], v121);
        }
        return;
      }
      v141.i16[0] = 12;
      LOBYTE(v140) = 4;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v141, (unsigned __int8 *)&v140, "Solution Postprocessor: Invalid horizontal variance %.3lf", v114, v115, v116, v117, v118, SLOBYTE(v120));
    }
    else
    {
      v141.i16[0] = 12;
      LOBYTE(v140) = 4;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v141, (unsigned __int8 *)&v140, "Solution Postprocessor: Unable to rotate device velocity covariance from ECEF to ENU frame", v114, v115, v116, v117, v118, v133);
    }
    *(_WORD *)double v156 = 12;
    v141.i8[0] = 4;
    float64_t v138 = a2[1].f64[0] + (double)*(uint64_t *)&a2->f64[1];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v156, (unsigned __int8 *)&v141, "t,%.3lf,Solution Postprocessor: Couldn't compute the scale factor for DOT covariance", v123, v124, v125, v126, v127, SLOBYTE(v138));
  }
}

BOOL sub_18DFFBB34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = *(unsigned __int8 *)(a1 + 8);
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v6 = a1 + 16;
    uint64_t v20 = 0x300000003;
    double v18 = &unk_1EDD18EE8;
    long long v19 = xmmword_18E1F0010;
    int v21 = &v22;
    sub_18DFE2B44(a1 + 16, a2, (uint64_t)&v18);
    int v8 = *(_DWORD *)(a1 + 24);
    int v7 = *(_DWORD *)(a1 + 28);
    uint64_t v15 = 0x300000003;
    double v10 = &unk_1EDD18EE8;
    int v11 = v7;
    int v12 = v8;
    int v13 = v8 * v7;
    int v14 = v7;
    uint64_t v16 = &v17;
    sub_18DFE2C64(v6, (uint64_t)&v10);
    uint64_t v25 = 0x300000003;
    float64_t v23 = &unk_1EDD18EE8;
    long long v24 = xmmword_18E1F0010;
    uint64_t v26 = &v27;
    sub_18DFE2B44((uint64_t)&v18, (uint64_t)&v10, (uint64_t)&v23);
    sub_18DFE2F24(a3, (uint64_t)&v23);
  }
  return v3 != 0;
}

BOOL raven::RavenSolutionPostprocessor::Update_EHE_Floor_Filter(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  int v8 = (_OWORD *)(a1 + 1352);
  double v9 = *(double *)(a2 + 104);
  double v36 = v9 - *(double *)(a1 + 1352);
  float64x2_t v10 = *(float64x2_t *)(a2 + 112);
  float64x2_t v37 = vsubq_f64(v10, *(float64x2_t *)(a1 + 1360));
  sub_18DFFDA0C((uint64_t)v35, v9, v10.f64[0], v10.f64[1]);
  if (sub_18DEF20E0((uint64_t)v35, &v36, &v33))
  {
    double v16 = sqrt(v33 * v33 + v34 * v34);
    if (fabs(*(double *)(a3 + 1040) + -1.0) >= 2.22044605e-16)
    {
      uint64_t v18 = *(void *)(a2 + 120);
      _OWORD *v8 = *(_OWORD *)(a2 + 104);
      *(void *)(a1 + 1368) = v18;
      unsigned int v19 = *(_DWORD *)(a1 + 1344);
      double v20 = sqrt(a4);
      if (v19)
      {
        double v21 = *(double *)(a1 + 1336);
        BOOL v23 = v20 >= 100.0 && v19 >= 5 && v21 < 40.0;
        if (!v23)
        {
          double v24 = v16 + -6.0;
          double v25 = v24 * 0.0714285714;
          BOOL v23 = v24 < 0.0;
          double v26 = 0.0;
          if (!v23) {
            double v26 = v25;
          }
          double v27 = v26 * ((double)v19 + -1.0) + 1.0;
          if (v19 + 1 < 0x14) {
            unsigned int v28 = v19 + 1;
          }
          else {
            unsigned int v28 = 20;
          }
          double v29 = v27 / (double)v28;
          if (v29 > 1.0) {
            double v29 = 1.0;
          }
          *(double *)(a1 + 1336) = v21 + v29 * (v20 - v21);
          *(_DWORD *)(a1 + 1344) = vcvtad_u64_f64(1.0 / v29);
        }
        return 1;
      }
      else if (v20 <= 100.0)
      {
        BOOL result = 1;
        *(_DWORD *)(a1 + 1344) = 1;
        *(double *)(a1 + 1336) = v20;
      }
      else
      {
        return 0;
      }
    }
    else
    {
      return *(_DWORD *)(a1 + 1344) != 0;
    }
  }
  else
  {
    __int16 v32 = 12;
    unsigned __int8 v31 = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v32, &v31, "Update_EHE_Floor_Filter: Failed to rotate delta_ECEF vector from last RavenSolution.", v11, v12, v13, v14, v15, v30);
    BOOL result = 0;
    *(void *)(a1 + 1336) = 0x7FF8000000000000;
    *(void *)(a1 + 1344) = 0;
    _OWORD *v8 = vdupq_n_s64(0x7FF8000000000000uLL);
    *(void *)(a1 + 1368) = 0x7FF8000000000000;
  }
  return result;
}

uint64_t raven::RavenSolutionPostprocessor::Configure(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(unsigned char *)(a1 + 1))
  {
    __int16 v18 = 12;
    unsigned __int8 v17 = 2;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v18, &v17, "Warning: Solution Postprocessor: configured more than once", a4, a5, a6, a7, a8, v12);
  }
  *(unsigned char *)(a1 + 1) = 0;
  uint64_t v10 = *a2;
  if (*a2 && *(unsigned char *)(v10 + 33))
  {
    *(void *)(a1 + 8) = v10;
    *(unsigned char *)(a1 + 1) = 1;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v14, &v13, "Solution Postprocessor: configured successfully", a4, a5, a6, a7, a8, v12);
    return 0;
  }
  else
  {
    __int16 v16 = 12;
    unsigned __int8 v15 = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v16, &v15, "Solution Postprocessor: could not be configured. Failed to create or initialize RavenParameters.", a4, a5, a6, a7, a8, v12);
    return 0xFFFFFFFFLL;
  }
}

uint64_t raven::RavenSolutionPostprocessor::IsConfigured(raven::RavenSolutionPostprocessor *this)
{
  return *((unsigned __int8 *)this + 1);
}

void raven::RavenSolutionPostprocessor::Reset(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 1296) && cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)a1) <= 1)
  {
    __int16 v17 = 12;
    unsigned __int8 v16 = 1;
    double v15 = *(double *)(a2 + 8) + (double)*(uint64_t *)a2;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v17, &v16, "t,%.3lf,RavenSolutionPostprocesso,clamping stopped due to reset", v4, v5, v6, v7, v8, SLOBYTE(v15));
  }
  *(unsigned char *)(a1 + 1296) = 0;
  double v9 = *(void ***)(a1 + 24);
  uint64_t v10 = *(void *)(a1 + 32);
  *(void *)(a1 + 56) = 0;
  unint64_t v11 = v10 - (void)v9;
  if (v11 >= 0x11)
  {
    do
    {
      operator delete(*v9);
      uint64_t v12 = *(void *)(a1 + 32);
      double v9 = (void **)(*(void *)(a1 + 24) + 8);
      *(void *)(a1 + 24) = v9;
      unint64_t v11 = v12 - (void)v9;
    }
    while (v11 > 0x10);
  }
  if (v11 >> 3 == 1)
  {
    uint64_t v13 = 8;
  }
  else
  {
    if (v11 >> 3 != 2) {
      goto LABEL_11;
    }
    uint64_t v13 = 16;
  }
  *(void *)(a1 + 48) = v13;
LABEL_11:
  *(void *)(a1 + 512) = 0;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(void *)(a1 + 520) = 0x7FF8000000000000;
  *(void *)(a1 + 528) = 0;
  *(void *)(a1 + 536) = 0x7FF8000000000000;
  int64x2_t v14 = vdupq_n_s64(0x7FF8000000000000uLL);
  *(int64x2_t *)(a1 + 544) = v14;
  *(int64x2_t *)(a1 + 560) = v14;
  *(int64x2_t *)(a1 + 576) = v14;
  *(int64x2_t *)(a1 + 592) = v14;
  *(void *)(a1 + 608) = 0;
  *(void *)(a1 + 616) = 0x7FF8000000000000;
  *(int64x2_t *)(a1 + 624) = v14;
  *(int64x2_t *)(a1 + 640) = v14;
  *(int64x2_t *)(a1 + 656) = v14;
  *(int64x2_t *)(a1 + 672) = v14;
  *(int64x2_t *)(a1 + 688) = v14;
  *(int64x2_t *)(a1 + 704) = v14;
  *(void *)(a1 + 720) = 0x7FF8000000000000;
  *(void *)(a1 + 728) = 0;
  *(int64x2_t *)(a1 + 736) = v14;
  *(int64x2_t *)(a1 + 752) = v14;
  *(int64x2_t *)(a1 + 768) = v14;
  *(int64x2_t *)(a1 + 784) = v14;
  *(void *)(a1 + 800) = 0x7FF8000000000000;
  *(void *)(a1 + 808) = 0;
  *(int64x2_t *)(a1 + 816) = v14;
  *(int64x2_t *)(a1 + 832) = v14;
  *(int64x2_t *)(a1 + 848) = v14;
  *(int64x2_t *)(a1 + 864) = v14;
  *(void *)(a1 + 880) = 0x7FF8000000000000;
  *(void *)(a1 + 888) = 0;
  *(int64x2_t *)(a1 + 896) = v14;
  *(int64x2_t *)(a1 + 912) = v14;
  *(int64x2_t *)(a1 + 928) = v14;
  *(int64x2_t *)(a1 + 944) = v14;
  *(int64x2_t *)(a1 + 960) = v14;
  *(int64x2_t *)(a1 + 976) = v14;
  *(int64x2_t *)(a1 + 992) = v14;
  *(void *)(a1 + 1008) = 0;
  *(void *)(a1 + 1016) = 0x7FF8000000000000;
  *(int64x2_t *)(a1 + 1024) = v14;
  *(int64x2_t *)(a1 + 1040) = v14;
  *(int64x2_t *)(a1 + 1056) = v14;
  *(int64x2_t *)(a1 + 1072) = v14;
  *(void *)(a1 + 1088) = 0;
  *(void *)(a1 + 1096) = 0x7FF8000000000000;
  *(int64x2_t *)(a1 + 1104) = v14;
  *(int64x2_t *)(a1 + 1120) = v14;
  *(int64x2_t *)(a1 + 1136) = v14;
  *(int64x2_t *)(a1 + 1152) = v14;
  *(void *)(a1 + 1168) = 0;
  *(void *)(a1 + 1176) = 0x7FF8000000000000;
  *(int64x2_t *)(a1 + 1184) = v14;
  *(int64x2_t *)(a1 + 1200) = v14;
  *(int64x2_t *)(a1 + 1216) = v14;
  *(int64x2_t *)(a1 + 1232) = v14;
  *(void *)(a1 + 1248) = 0;
  *(void *)(a1 + 1256) = 0x7FF8000000000000;
  *(int64x2_t *)(a1 + 1264) = v14;
  *(int64x2_t *)(a1 + 1280) = v14;
  if (*(unsigned char *)(a1 + 424)) {
    *(unsigned char *)(a1 + 424) = 0;
  }
  if (*(unsigned char *)(a1 + 1376)) {
    *(unsigned char *)(a1 + 1376) = 0;
  }
}

uint64_t raven::RavenSolutionPostprocessor::HandleEvent(unsigned char *a1, uint64_t a2)
{
  *a1 = *(unsigned char *)(a2 + 104);
  return 0;
}

uint64_t raven::RavenSolutionPostprocessor::HandleEvent(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 424))
  {
    memcpy((void *)(a1 + 72), (const void *)(a2 + 8), 0x160uLL);
  }
  else
  {
    *(void *)(a1 + 64) = &unk_1EDD137C0;
    memcpy((void *)(a1 + 72), (const void *)(a2 + 8), 0x160uLL);
    *(unsigned char *)(a1 + 424) = 1;
  }
  return 0;
}

{
  long long v2;
  long long v3;
  long long v4;
  long long v5;
  long long v6;
  long long v7;
  long long v8;
  long long v9;
  long long v10;
  long long v11;

  if (*(unsigned char *)(a1 + 1376))
  {
    uint64_t v2 = *(_OWORD *)(a2 + 8);
    int v3 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 1424) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 1408) = v3;
    *(_OWORD *)(a1 + 1392) = v2;
    uint64_t v4 = *(_OWORD *)(a2 + 56);
    uint64_t v5 = *(_OWORD *)(a2 + 72);
    uint64_t v6 = *(_OWORD *)(a2 + 88);
    *(unsigned char *)(a1 + 1488) = *(unsigned char *)(a2 + 104);
    *(_OWORD *)(a1 + 1472) = v6;
    *(_OWORD *)(a1 + 1456) = v5;
    *(_OWORD *)(a1 + 1440) = v4;
  }
  else
  {
    *(void *)(a1 + 1384) = &unk_1EDD145D0;
    uint64_t v7 = *(_OWORD *)(a2 + 8);
    uint64_t v8 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 1424) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 1408) = v8;
    *(_OWORD *)(a1 + 1392) = v7;
    double v9 = *(_OWORD *)(a2 + 56);
    uint64_t v10 = *(_OWORD *)(a2 + 72);
    unint64_t v11 = *(_OWORD *)(a2 + 88);
    *(unsigned char *)(a1 + 1488) = *(unsigned char *)(a2 + 104);
    *(_OWORD *)(a1 + 1472) = v11;
    *(_OWORD *)(a1 + 1456) = v10;
    *(_OWORD *)(a1 + 1440) = v9;
    *(unsigned char *)(a1 + 1376) = 1;
  }
  return 0;
}

uint64_t raven::RavenSolutionPostprocessor::PostprocessRavenSolution(raven::RavenSolutionPostprocessor *this, const raven::RavenSolutionEvent *a2, raven::RavenSolutionEvent *a3)
{
  memcpy((char *)a3 + 8, (char *)a2 + 8, 0x971uLL);
  ShouldBeClamped = (cnprint::CNPrinter *)raven::RavenSolutionPostprocessor::ShouldBeClamped(this, a2, v6, v7);
  if (ShouldBeClamped)
  {
    if (!*((unsigned char *)this + 1296) && cnprint::CNPrinter::GetLogLevel(ShouldBeClamped) <= 1)
    {
      __int16 v29 = 12;
      unsigned __int8 v28 = 1;
      uint64_t v9 = (*(uint64_t (**)(const raven::RavenSolutionEvent *))(*(void *)a2 + 16))(a2);
      double v24 = v10 + (double)v9;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v29, &v28, "t,%.3lf,RavenSolutionPostprocessor,clamping started", v11, v12, v13, v14, v15, SLOBYTE(v24));
    }
    *((unsigned char *)this + 1296) = 1;
    *((void *)a3 + 159) = *((void *)this + 67);
    *((_OWORD *)a3 + 80) = *((_OWORD *)this + 34);
    *((_OWORD *)a3 + 92) = *((_OWORD *)this + 46);
    *((void *)a3 + 186) = *((void *)this + 94);
    *((void *)a3 + 169) = 0;
    *((void *)a3 + 194) = 0;
    *((void *)a3 + 196) = 0;
    *((void *)a3 + 195) = 0;
    if (*((unsigned char *)this + 609))
    {
      *((_OWORD *)a3 + 85) = *((_OWORD *)this + 39);
      *((void *)a3 + 172) = *((void *)this + 80);
    }
  }
  else
  {
    if (*((unsigned char *)this + 1296) && cnprint::CNPrinter::GetLogLevel(ShouldBeClamped) <= 1)
    {
      __int16 v27 = 12;
      unsigned __int8 v26 = 1;
      uint64_t v16 = (*(uint64_t (**)(const raven::RavenSolutionEvent *))(*(void *)a2 + 16))(a2);
      double v25 = v17 + (double)v16;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v27, &v26, "t,%.3lf,RavenSolutionPostprocessor,clamping stopped", v18, v19, v20, v21, v22, SLOBYTE(v25));
    }
    *((unsigned char *)this + 1296) = 0;
  }
  memcpy((char *)this + 432, (char *)a3 + 1168, 0x360uLL);
  raven::RavenSolutionPostprocessor::PushToClampingHistory((uint64_t **)this, a2);
  raven::RavenSolutionPostprocessor::AdjustRavenSolutionUncertainties(this, (float64x2_t *)a3);
  return 0;
}

uint64_t raven::RavenSolutionPostprocessor::ShouldBeClamped(raven::RavenSolutionPostprocessor *this, const raven::RavenSolutionEvent *a2, int8x16_t a3, int8x16_t a4)
{
  uint64_t v166 = *MEMORY[0x1E4F143B8];
  a3.i64[0] = 0x4000A1A34BF0F1F5;
  a4.i64[0] = 1.0;
  if (*((unsigned char *)this + 1296)) {
    double v5 = 2.07892474;
  }
  else {
    double v5 = 1.0;
  }
  if (!*(unsigned char *)(*((void *)this + 1) + 3805))
  {
    if (!cnprint::CNPrinter::GetLogLevel(this))
    {
      LOWORD(v161) = 12;
      LOBYTE(v156) = 0;
      uint64_t v13 = (*(uint64_t (**)(const raven::RavenSolutionEvent *))(*(void *)a2 + 16))(a2);
      double v134 = v14 + (double)v13;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v161, (unsigned __int8 *)&v156, "t,%.3lf,RavenSolutionPostprocessor: Not clamping - clamping disabled.", v15, v16, v17, v18, v19, SLOBYTE(v134));
    }
    return 0;
  }
  if (*((unsigned char *)a2 + 209) != 2)
  {
    if (!cnprint::CNPrinter::GetLogLevel(this))
    {
      LOWORD(v161) = 12;
      LOBYTE(v156) = 0;
      uint64_t v20 = (*(uint64_t (**)(const raven::RavenSolutionEvent *))(*(void *)a2 + 16))(a2);
      double v135 = v21 + (double)v20;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v161, (unsigned __int8 *)&v156, "t,%.3lf,RavenSolutionPostprocessor: Not clamping - solution not healthy.", v22, v23, v24, v25, v26, SLOBYTE(v135));
    }
    return 0;
  }
  if (!*((unsigned char *)a2 + 1264))
  {
    if (!cnprint::CNPrinter::GetLogLevel(this))
    {
      LOWORD(v161) = 12;
      LOBYTE(v156) = 0;
      uint64_t v27 = (*(uint64_t (**)(const raven::RavenSolutionEvent *))(*(void *)a2 + 16))(a2);
      double v136 = v28 + (double)v27;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v161, (unsigned __int8 *)&v156, "t,%.3lf,RavenSolutionPostprocessor: Not clamping - user position invalid.", v29, v30, v31, v32, v33, SLOBYTE(v136));
    }
    return 0;
  }
  if (*((unsigned char *)a2 + 2128) == 9)
  {
    if (!cnprint::CNPrinter::GetLogLevel(this))
    {
      LOWORD(v161) = 12;
      LOBYTE(v156) = 0;
      uint64_t v6 = (*(uint64_t (**)(const raven::RavenSolutionEvent *))(*(void *)a2 + 16))(a2);
      double v133 = v7 + (double)v6;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v161, (unsigned __int8 *)&v156, "t,%.3lf,RavenSolutionPostprocessor: Not clamping - airborne.", v8, v9, v10, v11, v12, SLOBYTE(v133));
    }
    return 0;
  }
  uint64_t v35 = *((void *)this + 7);
  if (!v35)
  {
    if (!cnprint::CNPrinter::GetLogLevel(this))
    {
      LOWORD(v161) = 12;
      LOBYTE(v156) = 0;
      uint64_t v45 = (*(uint64_t (**)(const raven::RavenSolutionEvent *))(*(void *)a2 + 16))(a2);
      double v138 = v46 + (double)v45;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v161, (unsigned __int8 *)&v156, "t,%.3lf,RavenSolutionPostprocessor: Not clamping - no prior solution.", v47, v48, v49, v50, v51, SLOBYTE(v138));
    }
    return 0;
  }
  uint64_t v161 = CNTimeSpan::operator-((uint64_t)a2 + 1168, (void *)(*(void *)(*((void *)this + 3)+ (((unint64_t)(v35 + *((void *)this + 6) - 1) >> 1) & 0x7FFFFFFFFFFFFFF8))+ 864 * ((v35 + *((_DWORD *)this + 12) - 1) & 0xF)), a3, a4);
  uint64_t v162 = v36;
  BOOL v37 = sub_18DEE4C00((double *)&v161, (double *)this + 165);
  if (v37)
  {
    if (!cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v37))
    {
      LOWORD(v161) = 12;
      LOBYTE(v156) = 0;
      uint64_t v38 = (*(uint64_t (**)(const raven::RavenSolutionEvent *))(*(void *)a2 + 16))(a2);
      double v137 = v39 + (double)v38;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v161, (unsigned __int8 *)&v156, "t,%.3lf,RavenSolutionPostprocessor: Not clamping - previous solution too old.", v40, v41, v42, v43, v44, SLOBYTE(v137));
    }
    return 0;
  }
  float64x2_t v164 = *(float64x2_t *)((char *)a2 + 1272);
  uint64_t v165 = *((void *)a2 + 161);
  if (cnnavigation::ECEFToLLA(&v164, 1, v163, 0, (uint64_t)&v161))
  {
    LOWORD(v161) = 12;
    LOBYTE(v156) = 2;
    uint64_t v52 = (*(uint64_t (**)(const raven::RavenSolutionEvent *))(*(void *)a2 + 16))(a2);
    double v139 = v53 + (double)v52;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v161, (unsigned __int8 *)&v156, "t,%.3lf,RavenSolutionPostprocessor: Not clamping - ECEF to LLA conversion failed.", v54, v55, v56, v57, v58, SLOBYTE(v139));
    return 0;
  }
  sub_18DFFDBB4((uint64_t)&v161, v163[0], v163[1]);
  if (!(_BYTE)v162)
  {
    LOWORD(v156) = 12;
    LOBYTE(v151) = 2;
    uint64_t v70 = (*(uint64_t (**)(const raven::RavenSolutionEvent *))(*(void *)a2 + 16))(a2);
    double v141 = v71 + (double)v70;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v156, (unsigned __int8 *)&v151, "t,%.3lf,RavenSolutionPostprocessor: Not clamping - Jenu computation failed.", v72, v73, v74, v75, v76, SLOBYTE(v141));
    return 0;
  }
  uint64_t v158 = 0x300000003;
  double v156 = &unk_1EDD18EE8;
  long long v157 = xmmword_18E1F0010;
  double v159 = &v160;
  if (!sub_18DFFD9A0((uint64_t)a2 + 1168, (uint64_t)&v156))
  {
    LOWORD(v151) = 12;
    LOBYTE(v150) = 2;
    uint64_t v77 = (*(uint64_t (**)(const raven::RavenSolutionEvent *))(*(void *)a2 + 16))(a2);
    double v142 = v78 + (double)v77;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v151, (unsigned __int8 *)&v150, "t,%.3lf,RavenSolutionPostprocessor: Not clamping - Get user ECEF position covariance failed.", v79, v80, v81, v82, v83, SLOBYTE(v142));
    return 0;
  }
  uint64_t v153 = 0x300000003;
  float64_t v151 = &unk_1EDD18EE8;
  long long v152 = xmmword_18E1F0010;
  float64x2_t v154 = (double *)&v155;
  uint64_t v60 = sub_18DFFBB34((uint64_t)&v161, (uint64_t)&v156, (uint64_t)&v151);
  if ((v60 & 1) == 0)
  {
    __int16 v150 = 12;
    unsigned __int8 v149 = 2;
    uint64_t v84 = (*(uint64_t (**)(const raven::RavenSolutionEvent *))(*(void *)a2 + 16))(a2);
    double v143 = v85 + (double)v84;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v150, &v149, "t,%.3lf,RavenSolutionPostprocessor: Not clamping - variance rotation failed.", v86, v87, v88, v89, v90, SLOBYTE(v143));
    return 0;
  }
  double v61 = sqrt(*v154 + v154[SHIDWORD(v152) + 1]);
  if (v61 <= 0.0)
  {
    __int16 v150 = 12;
    unsigned __int8 v149 = 2;
    uint64_t v91 = (*(uint64_t (**)(const raven::RavenSolutionEvent *))(*(void *)a2 + 16))(a2);
    double v144 = v92 + (double)v91;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v150, &v149, "t,%.3lf,RavenSolutionPostprocessor: Not clamping - hunc not positive: %.3f.", v93, v94, v95, v96, v97, SLOBYTE(v144));
    return 0;
  }
  unint64_t v62 = *((void *)this + 6);
  if (*((unsigned __int8 *)a2 + 2320) - 1 >= 2)
  {
    uint64_t v98 = *((void *)this + 3);
    if (*((void *)this + 4) != v98)
    {
      uint64_t v99 = (void *)(v98 + 8 * (v62 >> 4));
      uint64_t v100 = *v99 + 864 * (*((void *)this + 6) & 0xFLL);
      uint64_t v101 = *(void *)(v98 + (((*((void *)this + 7) + v62) >> 1) & 0x7FFFFFFFFFFFFFF8))
           + 864 * ((*((_DWORD *)this + 14) + v62) & 0xF);
      if (v100 != v101)
      {
        while (1)
        {
          uint64_t v60 = raven::RavenSolutionPostprocessor::HorizontalDistanceCheck(v5, v61, v60, (uint64_t)a2 + 1168, v100, (uint64_t)&v161);
          if ((v60 & 1) == 0) {
            break;
          }
          v100 += 864;
          if (v100 - *v99 == 13824)
          {
            uint64_t v102 = v99[1];
            ++v99;
            uint64_t v100 = v102;
          }
          if (v100 == v101) {
            goto LABEL_43;
          }
        }
        if (!cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v60))
        {
          __int16 v150 = 12;
          unsigned __int8 v149 = 0;
          uint64_t v126 = (*(uint64_t (**)(const raven::RavenSolutionEvent *))(*(void *)a2 + 16))(a2);
          double v148 = v127 + (double)v126;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v150, &v149, "t,%.3lf,RavenSolutionPostprocessor: Not clamping - non-static distance check.", v128, v129, v130, v131, v132, SLOBYTE(v148));
        }
        return 0;
      }
    }
  }
  else
  {
    uint64_t v60 = raven::RavenSolutionPostprocessor::HorizontalDistanceCheck(v5, v61, v60, (uint64_t)a2 + 1168, *(void *)(*((void *)this + 3) + (((v62 + *((void *)this + 7) - 1) >> 1) & 0x7FFFFFFFFFFFFFF8))+ 864 * ((v62 + *((_DWORD *)this + 14) - 1) & 0xF), (uint64_t)&v161);
    if ((v60 & 1) == 0)
    {
      if (!cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v60))
      {
        __int16 v150 = 12;
        unsigned __int8 v149 = 0;
        uint64_t v63 = (*(uint64_t (**)(const raven::RavenSolutionEvent *))(*(void *)a2 + 16))(a2);
        double v140 = v64 + (double)v63;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v150, &v149, "t,%.3lf,RavenSolutionPostprocessor: Not clamping - static distance check.", v65, v66, v67, v68, v69, SLOBYTE(v140));
      }
      return 0;
    }
  }
LABEL_43:
  if (*((unsigned char *)a2 + 1344))
  {
    double v103 = *((double *)a2 + 169);
    if (v103 >= 0.0)
    {
      double v104 = *((double *)a2 + 173);
      if (v104 > 0.0 && (v103 > v5 * 3.634812 || fmax(v103 + -2.0, 0.0) / sqrt(v104) > v5 * 0.888064165))
      {
        if (!cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v60))
        {
          __int16 v150 = 12;
          unsigned __int8 v149 = 0;
          uint64_t v105 = (*(uint64_t (**)(const raven::RavenSolutionEvent *))(*(void *)a2 + 16))(a2);
          double v145 = v106 + (double)v105;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v150, &v149, "t,%.3lf,RavenSolutionPostprocessor: Not clamping - speed check.", v107, v108, v109, v110, v111, SLOBYTE(v145));
        }
        return 0;
      }
    }
  }
  if (*(unsigned char *)this == 1 && *((unsigned char *)a2 + 2216) == 5 && *((unsigned char *)a2 + 2128) == 6)
  {
    if (!cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v60))
    {
      __int16 v150 = 12;
      unsigned __int8 v149 = 0;
      uint64_t v112 = (*(uint64_t (**)(const raven::RavenSolutionEvent *))(*(void *)a2 + 16))(a2);
      double v146 = v113 + (double)v112;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v150, &v149, "t,%.3lf,RavenSolutionPostprocessor: Not clamping - swimming.", v114, v115, v116, v117, v118, SLOBYTE(v146));
    }
    return 0;
  }
  if (*((unsigned __int8 *)a2 + 2320) - 1 >= 2)
  {
    if (!cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v60))
    {
      __int16 v150 = 12;
      unsigned __int8 v149 = 0;
      uint64_t v119 = (*(uint64_t (**)(const raven::RavenSolutionEvent *))(*(void *)a2 + 16))(a2);
      double v147 = v120 + (double)v119;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v150, &v149, "t,%.3lf,RavenSolutionPostprocessor: Not clamping - moving.", v121, v122, v123, v124, v125, SLOBYTE(v147));
    }
    return 0;
  }
  return 1;
}

uint64_t **raven::RavenSolutionPostprocessor::PushToClampingHistory(uint64_t **this, const raven::RavenSolutionEvent *a2)
{
  if (*((unsigned char *)a2 + 209) != 2 || !*((unsigned char *)a2 + 1264)) {
    return this;
  }
  int v3 = this[4];
  uint64_t v4 = this[3];
  uint64_t v5 = (char *)v3 - (char *)v4;
  if (v3 == v4) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = 2 * ((char *)v3 - (char *)v4) - 1;
  }
  unint64_t v7 = (unint64_t)this[6];
  float64x2_t v154 = this;
  unint64_t v8 = (unint64_t)this[7] + v7;
  if (v6 != v8)
  {
    uint64_t v9 = this;
    goto LABEL_63;
  }
  if (v7 < 0x10)
  {
    uint64_t v24 = v5 >> 3;
    uint64_t v25 = this[5];
    uint64_t v26 = this[2];
    if (v5 >> 3 < (unint64_t)(v25 - v26))
    {
      uint64_t v27 = operator new(0x3600uLL);
      uint64_t v28 = (uint64_t)v27;
      if (v25 == v3)
      {
        uint64_t v9 = v154;
        if (v4 == v26)
        {
          if (v3 == v4) {
            unint64_t v114 = 1;
          }
          else {
            unint64_t v114 = ((char *)v25 - (char *)v4) >> 2;
          }
          uint64_t v115 = 2 * v114;
          uint64_t v116 = (uint64_t *)sub_18DEE2FBC(v114);
          uint64_t v4 = (uint64_t *)((char *)v116 + ((v115 + 6) & 0xFFFFFFFFFFFFFFF8));
          uint64_t v118 = (char *)v154[3];
          uint64_t v119 = v4;
          uint64_t v120 = (char *)v154[4] - v118;
          if (v120)
          {
            uint64_t v119 = (uint64_t *)((char *)v4 + (v120 & 0xFFFFFFFFFFFFFFF8));
            uint64_t v121 = 8 * (v120 >> 3);
            uint64_t v122 = (uint64_t *)((char *)v116 + ((v115 + 6) & 0xFFFFFFFFFFFFFFF8));
            do
            {
              uint64_t v123 = *(void *)v118;
              v118 += 8;
              *v122++ = v123;
              v121 -= 8;
            }
            while (v121);
          }
          uint64_t v124 = v154[2];
          v154[2] = v116;
          v154[3] = v4;
          v154[4] = v119;
          v154[5] = &v116[v117];
          if (v124)
          {
            operator delete(v124);
            uint64_t v4 = v154[3];
          }
        }
        *(v4 - 1) = v28;
        uint64_t v125 = v154[3];
        uint64_t v126 = v154[4];
        v154[3] = v125 - 1;
        uint64_t v127 = *(v125 - 1);
        v154[3] = v125;
        if (v126 == v154[5])
        {
          uint64_t v128 = v154[2];
          uint64_t v129 = (char *)v125 - (char *)v128;
          if (v125 <= v128)
          {
            uint64_t v141 = (char *)v126 - (char *)v128;
            BOOL v49 = v141 == 0;
            uint64_t v142 = v141 >> 2;
            if (v49) {
              unint64_t v143 = 1;
            }
            else {
              unint64_t v143 = v142;
            }
            double v144 = (uint64_t *)sub_18DEE2FBC(v143);
            double v146 = &v144[v143 >> 2];
            double v147 = (char *)v154[3];
            uint64_t v126 = v146;
            uint64_t v148 = (char *)v154[4] - v147;
            if (v148)
            {
              uint64_t v126 = (uint64_t *)((char *)v146 + (v148 & 0xFFFFFFFFFFFFFFF8));
              uint64_t v149 = 8 * (v148 >> 3);
              __int16 v150 = &v144[v143 >> 2];
              do
              {
                uint64_t v151 = *(void *)v147;
                v147 += 8;
                *v150++ = v151;
                v149 -= 8;
              }
              while (v149);
            }
            long long v152 = v154[2];
            v154[2] = v144;
            v154[3] = v146;
            v154[4] = v126;
            v154[5] = &v144[v145];
            if (v152)
            {
              operator delete(v152);
              uint64_t v126 = v154[4];
            }
          }
          else
          {
            uint64_t v130 = v129 >> 3;
            BOOL v16 = v129 >> 3 < -1;
            uint64_t v131 = (v129 >> 3) + 2;
            if (v16) {
              uint64_t v132 = v131;
            }
            else {
              uint64_t v132 = v130 + 1;
            }
            uint64_t v133 = -(v132 >> 1);
            uint64_t v134 = v132 >> 1;
            double v135 = &v125[-v134];
            int64_t v136 = (char *)v126 - (char *)v125;
            if (v126 != v125)
            {
              memmove(&v125[-v134], v125, (char *)v126 - (char *)v125);
              uint64_t v125 = v154[3];
            }
            uint64_t v126 = (uint64_t *)((char *)v135 + v136);
            v154[3] = &v125[v133];
            v154[4] = (uint64_t *)((char *)v135 + v136);
          }
        }
        *uint64_t v126 = v127;
      }
      else
      {
        *int v3 = (uint64_t)v27;
        uint64_t v9 = v154;
      }
      goto LABEL_61;
    }
    if (v25 == v26) {
      unint64_t v29 = 1;
    }
    else {
      unint64_t v29 = ((char *)v25 - (char *)v26) >> 2;
    }
    uint64_t v30 = (char *)sub_18DEE2FBC(v29);
    uint64_t v32 = v31;
    uint64_t v33 = operator new(0x3600uLL);
    double v34 = &v30[8 * v24];
    uint64_t v35 = &v30[8 * v32];
    if (v24 == v32)
    {
      uint64_t v36 = 8 * v24;
      if (v5 < 1)
      {
        uint64_t v137 = v36 >> 2;
        if (v3 == v4) {
          unint64_t v138 = 1;
        }
        else {
          unint64_t v138 = v137;
        }
        uint64_t v9 = v154;
        double v139 = (char *)sub_18DEE2FBC(v138);
        double v34 = &v139[8 * (v138 >> 2)];
        uint64_t v35 = &v139[8 * v140];
        if (v30) {
          operator delete(v30);
        }
        uint64_t v30 = v139;
        goto LABEL_30;
      }
      uint64_t v37 = v36 >> 3;
      if (v37 >= -1) {
        unint64_t v38 = v37 + 1;
      }
      else {
        unint64_t v38 = v37 + 2;
      }
      v34 -= 8 * (v38 >> 1);
    }
    uint64_t v9 = v154;
LABEL_30:
    *(void *)double v34 = v33;
    double v39 = v34 + 8;
    for (unint64_t i = v9[4]; i != v9[3]; --i)
    {
      if (v34 == v30)
      {
        if (v39 >= v35)
        {
          if (v35 == v30) {
            unint64_t v45 = 1;
          }
          else {
            unint64_t v45 = (v35 - v30) >> 2;
          }
          double v46 = (char *)sub_18DEE2FBC(v45);
          uint64_t v48 = v46;
          double v34 = &v46[(2 * v45 + 6) & 0xFFFFFFFFFFFFFFF8];
          uint64_t v50 = v39 - v30;
          BOOL v49 = v39 == v30;
          double v39 = v34;
          if (!v49)
          {
            double v39 = &v34[v50 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v51 = 8 * (v50 >> 3);
            uint64_t v52 = v34;
            double v53 = (uint64_t *)v30;
            do
            {
              uint64_t v54 = *v53++;
              *(void *)uint64_t v52 = v54;
              v52 += 8;
              v51 -= 8;
            }
            while (v51);
          }
          uint64_t v35 = &v46[8 * v47];
          if (v30) {
            operator delete(v30);
          }
          uint64_t v30 = v48;
        }
        else
        {
          uint64_t v41 = (v35 - v39) >> 3;
          if (v41 >= -1) {
            uint64_t v42 = v41 + 1;
          }
          else {
            uint64_t v42 = v41 + 2;
          }
          uint64_t v43 = v42 >> 1;
          double v34 = &v30[8 * (v42 >> 1)];
          uint64_t v44 = v30;
          if (v39 != v30)
          {
            memmove(v34, v30, v39 - v30);
            uint64_t v44 = v39;
          }
          double v39 = &v44[8 * v43];
        }
      }
      uint64_t v55 = *(i - 1);
      *((void *)v34 - 1) = v55;
      v34 -= 8;
    }
    uint64_t v56 = v9[2];
    double v9[2] = (uint64_t *)v30;
    v9[3] = (uint64_t *)v34;
    v9[4] = (uint64_t *)v39;
    v9[5] = (uint64_t *)v35;
    if (v56) {
      operator delete(v56);
    }
    goto LABEL_62;
  }
  uint64_t v9 = this;
  this[6] = (uint64_t *)(v7 - 16);
  uint64_t v12 = *v4;
  uint64_t v10 = v4 + 1;
  uint64_t v11 = v12;
  this[3] = v10;
  if (v3 == this[5])
  {
    uint64_t v13 = this[2];
    uint64_t v14 = (char *)v10 - (char *)v13;
    if (v10 <= v13)
    {
      uint64_t v57 = (char *)v3 - (char *)v13;
      BOOL v49 = v57 == 0;
      uint64_t v58 = v57 >> 2;
      if (v49) {
        unint64_t v59 = 1;
      }
      else {
        unint64_t v59 = v58;
      }
      uint64_t v60 = (uint64_t *)sub_18DEE2FBC(v59);
      unint64_t v62 = &v60[v59 >> 2];
      uint64_t v63 = (char *)v154[3];
      int v3 = v62;
      uint64_t v64 = (char *)v154[4] - v63;
      if (v64)
      {
        int v3 = (uint64_t *)((char *)v62 + (v64 & 0xFFFFFFFFFFFFFFF8));
        uint64_t v65 = 8 * (v64 >> 3);
        uint64_t v66 = &v60[v59 >> 2];
        do
        {
          uint64_t v67 = *(void *)v63;
          v63 += 8;
          *v66++ = v67;
          v65 -= 8;
        }
        while (v65);
      }
      uint64_t v68 = v154[2];
      v154[2] = v60;
      v154[3] = v62;
      v154[4] = v3;
      v154[5] = &v60[v61];
      if (v68)
      {
        operator delete(v68);
        int v3 = v154[4];
      }
    }
    else
    {
      uint64_t v15 = v14 >> 3;
      BOOL v16 = v14 >> 3 < -1;
      uint64_t v17 = (v14 >> 3) + 2;
      if (v16) {
        uint64_t v18 = v17;
      }
      else {
        uint64_t v18 = v15 + 1;
      }
      uint64_t v19 = -(v18 >> 1);
      uint64_t v20 = v18 >> 1;
      double v21 = &v10[-v20];
      int64_t v22 = (char *)v3 - (char *)v10;
      if (v3 != v10)
      {
        memmove(&v10[-v20], v10, (char *)v3 - (char *)v10);
        int v3 = v154[3];
      }
      uint64_t v23 = &v3[v19];
      int v3 = (uint64_t *)((char *)v21 + v22);
      v154[3] = v23;
      v154[4] = (uint64_t *)((char *)v21 + v22);
    }
  }
  *int v3 = v11;
LABEL_61:
  ++v9[4];
LABEL_62:
  uint64_t v4 = v9[3];
  unint64_t v8 = (unint64_t)v9[6] + (void)v9[7];
LABEL_63:
  uint64_t v69 = (char *)a2 + 1168;
  memcpy((void *)(*(uint64_t *)((char *)v4 + ((v8 >> 1) & 0x7FFFFFFFFFFFFFF8)) + 864 * (v8 & 0xF)), v69, 0x360uLL);
  uint64_t v72 = v9[7];
  v9[7] = (uint64_t *)((char *)v72 + 1);
  if ((unint64_t)v72 + 1 <= 0x1E)
  {
    uint64_t v74 = (void **)v9[3];
    unint64_t v73 = (unint64_t)v9[6];
  }
  else
  {
    unint64_t v73 = (unint64_t)v9[6] + 1;
    v9[6] = (uint64_t *)v73;
    v9[7] = v72;
    uint64_t v74 = (void **)v9[3];
    if (v73 >= 0x20)
    {
      operator delete(*v74);
      uint64_t v74 = (void **)(v9[3] + 1);
      v9[3] = (uint64_t *)v74;
      unint64_t v73 = (unint64_t)(v9[6] - 2);
      v9[6] = (uint64_t *)v73;
    }
  }
  unint64_t v75 = v73 >> 4;
  uint64_t v76 = (uint64_t *)&v74[v73 >> 4];
  uint64_t v77 = (void **)v9[4];
  if (v77 == v74)
  {
    unsigned int v80 = 0;
LABEL_79:
    uint64_t v84 = 0;
    char v83 = 1;
    goto LABEL_80;
  }
  double v78 = (void *)(*v76 + 864 * (v73 & 0xF));
  uint64_t v79 = *(uint64_t *)((char *)v74 + ((((unint64_t)v9[7] + v73) >> 1) & 0x7FFFFFFFFFFFFFF8))
      + 864 * ((*((_DWORD *)v9 + 14) + (int)v73) & 0xF);
  if (v78 == (void *)v79)
  {
    unsigned int v80 = 0;
  }
  else
  {
    unsigned int v80 = 0;
    do
    {
      double v156 = (uint64_t *)CNTimeSpan::operator-((uint64_t)v69, v78, v70, v71);
      long long v157 = v81;
      if (!sub_18DEE4C00((double *)&v156, (double *)v9 + 163)) {
        break;
      }
      v78 += 108;
      if ((void *)((char *)v78 - *v76) == (void *)13824)
      {
        uint64_t v82 = (void *)v76[1];
        ++v76;
        double v78 = v82;
      }
      ++v80;
    }
    while (v78 != (void *)v79);
    unint64_t v73 = (unint64_t)v9[6];
    uint64_t v74 = (void **)v9[3];
    uint64_t v77 = (void **)v9[4];
    unint64_t v75 = v73 >> 4;
  }
  uint64_t v76 = (uint64_t *)&v74[v75];
  if (v77 == v74) {
    goto LABEL_79;
  }
  char v83 = 0;
  uint64_t v84 = (char *)(*v76 + 864 * (v73 & 0xF));
LABEL_80:
  double v156 = v76;
  long long v157 = v84;
  sub_18DFFDC88(&v156, v80);
  if (v157 == v84) {
    unint64_t v85 = 0;
  }
  else {
    unint64_t v85 = 0x84BDA12F684BDA13 * ((uint64_t)&v157[-*v156] >> 5)
  }
        + 2 * ((char *)v156 - (char *)v76)
        + 0x7B425ED097B425EDLL * ((uint64_t)&v84[-*v76] >> 5);
  uint64_t v86 = (char **)&v74[v73 >> 4];
  if (v83) {
    uint64_t v87 = 0;
  }
  else {
    uint64_t v87 = &(*v86)[864 * (v73 & 0xF)];
  }
  uint64_t v153 = v85;
  if (v84 == v87) {
    unint64_t v88 = 0;
  }
  else {
    unint64_t v88 = 0x84BDA12F684BDA13 * ((uint64_t)&v84[-*v76] >> 5)
  }
        + 2 * ((char *)v76 - (char *)v86)
        + 0x7B425ED097B425EDLL * ((v87 - *v86) >> 5);
  double v156 = (uint64_t *)&v74[v73 >> 4];
  long long v157 = v87;
  sub_18DFFDC88(&v156, v88);
  if (v153 < 1)
  {
    uint64_t v95 = v154;
  }
  else
  {
    uint64_t v89 = (void **)v156;
    uint64_t v90 = v157;
    uint64_t v91 = v154[7];
    if (v88 <= ((unint64_t)v91 - v153) >> 1)
    {
      sub_18DFFDC88(&v156, v153);
      if (v86 == (char **)v89)
      {
        sub_18DFFDD04(&v156, v87, v90, v156, v157);
        uint64_t v95 = v154;
      }
      else
      {
        uint64_t v97 = (char *)*v89;
        uint64_t v96 = (char **)(v89 - 1);
        sub_18DFFDD04(&v156, v97, v90, v156, v157);
        uint64_t v98 = v157;
        uint64_t v99 = v158;
        if (v96 == v86)
        {
          uint64_t v95 = v154;
        }
        else
        {
          uint64_t v95 = v154;
          do
          {
            uint64_t v100 = *v96--;
            sub_18DFFDD04(&v156, v100, v100 + 13824, v98, v99);
            uint64_t v98 = v157;
            uint64_t v99 = v158;
          }
          while (v96 != v86);
        }
        sub_18DFFDD04(&v156, v87, *v86 + 13824, v98, v99);
      }
      uint64_t v112 = (uint64_t)v95[7] - v153;
      unint64_t v73 = (unint64_t)v95[6] + v153;
      v95[6] = (uint64_t *)v73;
      v95[7] = (uint64_t *)v112;
      uint64_t v74 = (void **)v95[3];
      if (v73 >= 0x20)
      {
        do
        {
          operator delete(*v74);
          uint64_t v74 = (void **)(v95[3] + 1);
          v95[3] = (uint64_t *)v74;
          unint64_t v73 = (unint64_t)(v95[6] - 2);
          v95[6] = (uint64_t *)v73;
        }
        while (v73 > 0x1F);
      }
    }
    else
    {
      sub_18DFFDC88(&v156, v153);
      double v92 = v157;
      uint64_t v93 = (uint64_t *)&v74[((unint64_t)v91 + v73) >> 4];
      if (v83) {
        uint64_t v94 = 0;
      }
      else {
        uint64_t v94 = (unsigned char *)(*v93 + 864 * (((_BYTE)v91 + (_BYTE)v73) & 0xF));
      }
      uint64_t v95 = v154;
      if (v93 != v156)
      {
        uint64_t v101 = v156 + 1;
        sub_18DFFDDF8(&v156, v157, (unsigned char *)(*v156 + 13824), v89, v90);
        uint64_t v89 = (void **)v157;
        uint64_t v90 = v158;
        if (v101 != v93)
        {
          uint64_t v102 = *(unsigned char **)v157;
          uint64_t v155 = v93;
          do
          {
            uint64_t v103 = 0;
            uint64_t v104 = *v101;
            for (++v89; ; ++v89)
            {
              int64_t v105 = 0x84BDA12F684BDA13 * ((v102 - v90 + 13824) >> 5);
              if ((uint64_t)(0x84BDA12F684BDA13 * ((13824 - 864 * v103) >> 5)) >= v105) {
                unint64_t v106 = v105;
              }
              else {
                unint64_t v106 = 0x84BDA12F684BDA13 * ((13824 - 864 * v103) >> 5);
              }
              if (v106) {
                memmove(v90, (const void *)(v104 + 864 * v103), 864 * v106);
              }
              v103 += v106;
              if (v103 == 16) {
                break;
              }
              uint64_t v107 = *v89;
              uint64_t v102 = v107;
              uint64_t v90 = v107;
            }
            v90 += 864 * v106;
            uint64_t v102 = *(v89 - 1);
            if (v102 + 13824 == v90)
            {
              uint64_t v102 = *v89;
              uint64_t v90 = (char *)*v89;
            }
            else
            {
              --v89;
            }
            uint64_t v93 = v155;
            ++v101;
          }
          while (v101 != v155);
          uint64_t v95 = v154;
        }
        double v92 = (char *)*v93;
      }
      sub_18DFFDDF8(&v156, v92, v94, v89, v90);
      uint64_t v74 = (void **)v95[3];
      uint64_t v108 = (uint64_t)v95[4];
      uint64_t v109 = 2 * (v108 - (void)v74) - 1;
      if ((void **)v108 == v74) {
        uint64_t v109 = 0;
      }
      unint64_t v73 = (unint64_t)v95[6];
      uint64_t v110 = (uint64_t)v95[7] - v153;
      v95[7] = (uint64_t *)v110;
      if (v109 - (v73 + v110) >= 0x20)
      {
        do
        {
          operator delete(*(void **)(v108 - 8));
          uint64_t v74 = (void **)v95[3];
          uint64_t v108 = (uint64_t)(v95[4] - 1);
          uint64_t v111 = 2 * (v108 - (void)v74) - 1;
          v95[4] = (uint64_t *)v108;
          if ((void **)v108 == v74) {
            uint64_t v111 = 0;
          }
          unint64_t v73 = (unint64_t)v95[6];
        }
        while (v111 - ((unint64_t)v95[7] + v73) > 0x1F);
      }
    }
  }
  if (v95[4] == (uint64_t *)v74) {
    double v113 = 0;
  }
  else {
    double v113 = (char *)v74[v73 >> 4] + 864 * (v73 & 0xF);
  }
  double v156 = (uint64_t *)&v74[v73 >> 4];
  long long v157 = v113;
  return sub_18DFFDC88(&v156, v88);
}

void sub_18DFFD818(_Unwind_Exception *a1)
{
  int v3 = v1;
  operator delete(v3);
  if (v2) {
    operator delete(v2);
  }
  _Unwind_Resume(a1);
}

uint64_t raven::RavenSolutionPostprocessor::HorizontalDistanceCheck(double a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  float64x2_t v22 = vsubq_f64(*(float64x2_t *)(a5 + 104), *(float64x2_t *)(a4 + 104));
  double v23 = *(double *)(a5 + 120) - *(double *)(a4 + 120);
  BOOL v8 = sub_18DEF20E0(a6, v22.f64, &v20);
  if (!v8)
  {
    __int16 v19 = 12;
    unsigned __int8 v18 = 2;
    uint64_t v15 = "Clamping check failed: Position difference rotation.";
    goto LABEL_8;
  }
  double v14 = sqrt(v21 * v21 + v20 * v20);
  if (*(void *)&v14 >> 52 >= 0x7FFuLL)
  {
    __int16 v19 = 12;
    unsigned __int8 v18 = 2;
    uint64_t v15 = "Clamping check failed: Position difference not a positive number.";
    goto LABEL_8;
  }
  if (v14 > a1 * 8.86651914)
  {
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v8)) {
      return 0;
    }
    __int16 v19 = 12;
    unsigned __int8 v18 = 0;
    uint64_t v15 = "RavenSolutionPostprocessor: Not clamping - distance check.";
LABEL_8:
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v19, &v18, v15, v9, v10, v11, v12, v13, v17);
    return 0;
  }
  if (fmax(v14 + -4.26495435, 0.0) / a2 > a1 * 0.832554611)
  {
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v8)) {
      return 0;
    }
    __int16 v19 = 12;
    unsigned __int8 v18 = 0;
    uint64_t v15 = "RavenSolutionPostprocessor: Not clamping - distance uncertainty check.";
    goto LABEL_8;
  }
  return 1;
}

BOOL sub_18DFFD9A0(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 96);
  if (*(unsigned char *)(a1 + 96))
  {
    *(_OWORD *)(a2 + 8) = xmmword_18E1F0010;
    int v3 = *(void **)(a2 + 32);
    *int v3 = *(void *)(a1 + 128);
    v3[3] = *(void *)(a1 + 136);
    v3[6] = *(void *)(a1 + 144);
    v3[1] = *(void *)(a1 + 136);
    v3[4] = *(void *)(a1 + 152);
    v3[7] = *(void *)(a1 + 160);
    v3[2] = *(void *)(a1 + 144);
    v3[5] = *(void *)(a1 + 160);
    v3[8] = *(void *)(a1 + 168);
  }
  return v2 != 0;
}

uint64_t sub_18DFFDA0C(uint64_t a1, float64_t a2, float64_t a3, double a4)
{
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)(a1 + 40) = 0x300000003;
  *(void *)(a1 + 16) = &unk_1EDD18EE8;
  *(_OWORD *)(a1 + 24) = xmmword_18E1F0010;
  *(void *)(a1 + 48) = a1 + 56;
  *(void *)a1 = &unk_1EDD0AB68;
  sub_18DFFDACC((unsigned char *)a1, a2, a3, a4);
  return a1;
}

void sub_18DFFDA90(_Unwind_Exception *a1)
{
  *uint64_t v1 = &unk_1EDD0B188;
  v1[2] = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

uint64_t sub_18DFFDACC(unsigned char *a1, float64_t a2, float64_t a3, double a4)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  a1[8] = 0;
  unint64_t v10 = 0;
  unint64_t v11 = 0;
  uint64_t v12 = 0;
  v13.f64[0] = a2;
  v13.f64[1] = a3;
  double v14 = a4;
  if (cnnavigation::ECEFToLLA(&v13, 1, (double *)&v10, 0, (uint64_t)&v9)) {
    return 0;
  }
  v5.n128_u64[0] = v10;
  v6.n128_u64[0] = v11;
  BOOL v8 = *(uint64_t (**)(unsigned char *, __n128, __n128))(*(void *)a1 + 16);

  return v8(a1, v5, v6);
}

uint64_t sub_18DFFDBB4(uint64_t a1, double a2, double a3)
{
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)(a1 + 40) = 0x300000003;
  *(void *)(a1 + 16) = &unk_1EDD18EE8;
  *(_OWORD *)(a1 + 24) = xmmword_18E1F0010;
  *(void *)(a1 + 48) = a1 + 56;
  *(void *)a1 = &unk_1EDD0AB68;
  off_1EDD0AB78(a1, a2, a3);
  return a1;
}

void sub_18DFFDC4C(_Unwind_Exception *a1)
{
  *uint64_t v1 = &unk_1EDD0B188;
  v1[2] = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

uint64_t **sub_18DFFDC88(uint64_t **result, uint64_t a2)
{
  if (a2)
  {
    int v2 = *result;
    uint64_t v3 = a2 - 0x7B425ED097B425EDLL * (((uint64_t)result[1] - **result) >> 5);
    if (v3 < 1)
    {
      unint64_t v7 = 15 - v3;
      BOOL v8 = &v2[-(v7 >> 4)];
      *BOOL result = v8;
      uint64_t v5 = *v8;
      unsigned int v6 = ~v7 & 0xF;
    }
    else
    {
      uint64_t v4 = (uint64_t *)((char *)v2 + (((unint64_t)v3 >> 1) & 0x7FFFFFFFFFFFFFF8));
      *BOOL result = v4;
      uint64_t v5 = *v4;
      unsigned int v6 = v3 & 0xF;
    }
    result[1] = (uint64_t *)(v5 + 864 * v6);
  }
  return result;
}

void *sub_18DFFDD04(void *result, char *a2, char *a3, void *a4, char *a5)
{
  unsigned int v6 = a4;
  BOOL v8 = result;
  if (a2 == a3)
  {
    uint64_t v9 = a2;
  }
  else
  {
    uint64_t v9 = a3;
    uint64_t v10 = *a4;
    unint64_t v11 = a3;
    while (1)
    {
      int64_t v12 = 0x84BDA12F684BDA13 * ((uint64_t)&a5[-v10] >> 5);
      if ((uint64_t)(0x84BDA12F684BDA13 * ((v11 - a2) >> 5)) < v12) {
        int64_t v12 = 0x84BDA12F684BDA13 * ((v11 - a2) >> 5);
      }
      v11 -= 864 * v12;
      a5 -= 864 * v12;
      if (v12) {
        BOOL result = memmove(a5, v11, 864 * v12);
      }
      if (v11 == a2) {
        break;
      }
      uint64_t v13 = *--v6;
      uint64_t v10 = v13;
      a5 = (char *)(v13 + 13824);
    }
    if ((char *)(*v6 + 13824) == a5)
    {
      double v14 = (char *)v6[1];
      ++v6;
      a5 = v14;
    }
  }
  void *v8 = v9;
  v8[1] = v6;
  double v8[2] = a5;
  return result;
}

void *sub_18DFFDDF8(void *result, unsigned char *__src, unsigned char *a3, void **a4, char *__dst)
{
  unsigned int v6 = a4;
  unint64_t v7 = __src;
  BOOL v8 = result;
  if (__src == a3)
  {
    uint64_t v9 = __src;
  }
  else
  {
    uint64_t v9 = a3;
    unsigned int v6 = a4 + 1;
    uint64_t v10 = (char *)*a4;
    while (1)
    {
      int64_t v11 = 0x84BDA12F684BDA13 * ((v10 - __dst + 13824) >> 5);
      unint64_t v12 = (uint64_t)(0x84BDA12F684BDA13 * ((v9 - v7) >> 5)) >= v11 ? v11 : 0x84BDA12F684BDA13 * ((v9 - v7) >> 5);
      if (v12) {
        BOOL result = memmove(__dst, v7, 864 * v12);
      }
      v7 += 864 * v12;
      if (v7 == v9) {
        break;
      }
      uint64_t v13 = (char *)*v6++;
      uint64_t v10 = v13;
      __dst = v13;
    }
    __dst += 864 * v12;
    if ((char *)*(v6 - 1) + 13824 == __dst) {
      __dst = (char *)*v6;
    }
    else {
      --v6;
    }
  }
  void *v8 = v9;
  v8[1] = v6;
  double v8[2] = __dst;
  return result;
}

uint64_t raven::RavenIMUPreprocessorActiveObject::RavenIMUPreprocessorActiveObject(uint64_t a1, unsigned char *a2)
{
  cnframework::ActiveObjectBase::ActiveObjectBase(a1, a2);
  *(void *)uint64_t v3 = &unk_1EDD153B8;
  *(unsigned char *)(v3 + 480) = 0;
  *(void *)(v3 + 496) = 0;
  *(void *)(v3 + 504) = 0;
  *(_DWORD *)(v3 + 512) = 0;
  *(_OWORD *)(v3 + 520) = 0u;
  *(_OWORD *)(v3 + 536) = 0u;
  *(_OWORD *)(v3 + 552) = 0u;
  *(_OWORD *)(v3 + 568) = 0u;
  *(_OWORD *)(v3 + 584) = 0u;
  *(_OWORD *)(v3 + 600) = 0u;
  *(_OWORD *)(v3 + 616) = 0u;
  *(_DWORD *)(v3 + 632) = 0;
  *(_OWORD *)(v3 + 640) = 0u;
  *(_OWORD *)(v3 + 656) = 0u;
  *(_OWORD *)(v3 + 672) = 0u;
  *(_OWORD *)(v3 + 688) = 0u;
  *(_OWORD *)(v3 + 704) = 0u;
  *(_OWORD *)(v3 + 720) = 0u;
  raven::RavenIMUPreprocessorActiveObject::Reset((raven::RavenIMUPreprocessorActiveObject *)v3);
  return a1;
}

void sub_18DFFDF88(_Unwind_Exception *a1)
{
  sub_18DFFF978((void *)v1 + 86);
  sub_18DEE2DB8(v3);
  sub_18DFFF978((void *)v1 + 71);
  sub_18DEE2DB8(v2);
  cnframework::ActiveObjectBase::~ActiveObjectBase(v1);
  _Unwind_Resume(a1);
}

uint64_t raven::RavenIMUPreprocessorActiveObject::Configure(unsigned char *a1, uint64_t *a2, __n128 a3, int8x16_t a4)
{
  if (a1[480])
  {
    __int16 v101 = 12;
    unsigned __int8 v100 = 3;
    (*(void (**)(void **__return_ptr, unsigned char *))(*(void *)a1 + 16))(__p, a1);
    if (v99 >= 0) {
      int64_t v11 = __p;
    }
    else {
      LOBYTE(v11) = __p[0];
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v101, &v100, "Warning: %s configured more than once", v6, v7, v8, v9, v10, (char)v11);
    if (v99 < 0) {
      operator delete(__p[0]);
    }
  }
  a1[480] = 0;
  uint64_t v12 = *a2;
  if (!*a2 || !*(unsigned char *)(v12 + 33))
  {
    __int16 v101 = 12;
    unsigned __int8 v100 = 4;
    (*(void (**)(void **__return_ptr, unsigned char *))(*(void *)a1 + 16))(__p, a1);
    if (v99 >= 0) {
      float64x2_t v22 = __p;
    }
    else {
      LOBYTE(v22) = __p[0];
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v101, &v100, "%s could not be configured; invalid pointer",
      v17,
      v18,
      v19,
      v20,
      v21,
      (char)v22);
    goto LABEL_68;
  }
  *((void *)a1 + 62) = 0;
  *((void *)a1 + 63) = 0;
  *((void *)a1 + 61) = v12;
  *((_DWORD *)a1 + 128) = 0;
  uint64_t v13 = (void **)*((void *)a1 + 66);
  uint64_t v14 = *((void *)a1 + 67);
  *((void *)a1 + 70) = 0;
  unint64_t v15 = v14 - (void)v13;
  if (v15 >= 0x11)
  {
    do
    {
      operator delete(*v13);
      uint64_t v13 = (void **)(*((void *)a1 + 66) + 8);
      *((void *)a1 + 66) = v13;
      unint64_t v15 = *((void *)a1 + 67) - (void)v13;
    }
    while (v15 > 0x10);
  }
  if (v15 >> 3 == 1)
  {
    uint64_t v16 = 256;
  }
  else
  {
    if (v15 >> 3 != 2) {
      goto LABEL_20;
    }
    uint64_t v16 = 512;
  }
  *((void *)a1 + 69) = v16;
LABEL_20:
  uint64_t v23 = *((void *)a1 + 61);
  unsigned int v24 = *(_DWORD *)(v23 + 1296);
  a3.n128_u64[0] = *(void *)(v23 + 1304);
  *((_DWORD *)a1 + 128) = v24;
  if ((v24 & 0x80000000) != 0)
  {
    double v28 = 0.0;
  }
  else
  {
    double v25 = (double)v24 / a3.n128_f64[0] * ((double)v24 / a3.n128_f64[0]);
    int v26 = -v24;
    int v27 = (2 * v24) | 1;
    double v28 = 0.0;
    do
    {
      __p[0] = COERCE_VOID_(exp((double)v26 * -0.5 * (double)v26 / v25));
      double v28 = v28 + *(double *)__p;
      a3.n128_f64[0] = sub_18DEDEC14((void *)a1 + 65, (double *)__p);
      ++v26;
      --v27;
    }
    while (v27);
  }
  uint64_t v29 = *((void *)a1 + 70);
  if (v29 != ((2 * v24) | 1))
  {
    __int16 v101 = 12;
    unsigned __int8 v100 = 4;
    (*(void (**)(void **__return_ptr, unsigned char *, __n128))(*(void *)a1 + 16))(__p, a1, a3);
    if (v99 >= 0) {
      uint64_t v41 = __p;
    }
    else {
      LOBYTE(v41) = __p[0];
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v101, &v100, "%s could not be configured; invalid gyro kernel,size,%lu,half_width,%u",
      v36,
      v37,
      v38,
      v39,
      v40,
      (char)v41);
    goto LABEL_68;
  }
  if (fabs(v28) < 2.22044605e-16)
  {
    __int16 v101 = 12;
    unsigned __int8 v100 = 4;
    (*(void (**)(void **__return_ptr, unsigned char *))(*(void *)a1 + 16))(__p, a1);
    if (v99 >= 0) {
      uint64_t v35 = __p;
    }
    else {
      LOBYTE(v35) = __p[0];
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v101, &v100, "%s could not be configured; null gyro kernel",
      v30,
      v31,
      v32,
      v33,
      v34,
      (char)v35);
LABEL_68:
    if (v99 < 0) {
      operator delete(__p[0]);
    }
    return 0xFFFFFFFFLL;
  }
  uint64_t v42 = *((void *)a1 + 66);
  unint64_t v43 = *((void *)a1 + 69);
  uint64_t v44 = (double **)(v42 + 8 * (v43 >> 9));
  uint64_t v45 = *((void *)a1 + 67);
  if (v45 == v42) {
    double v46 = 0;
  }
  else {
    double v46 = &(*v44)[*((void *)a1 + 69) & 0x1FFLL];
  }
  unint64_t v47 = v43 + v29;
  unint64_t v48 = v47 >> 9;
  uint64_t v49 = v47 & 0x1FF;
LABEL_39:
  uint64_t v50 = v46 - 512;
  while (1)
  {
    uint64_t v51 = v45 == v42 ? 0 : *(void *)(v42 + 8 * v48) + 8 * v49;
    if (v46 == (double *)v51) {
      break;
    }
    *double v46 = *v46 / v28;
    ++v46;
    if (*v44 == ++v50)
    {
      uint64_t v52 = v44[1];
      ++v44;
      double v46 = v52;
      goto LABEL_39;
    }
  }
  *((_DWORD *)a1 + 158) = 0;
  v53.n128_u64[1] = 0;
  *(_OWORD *)(a1 + 616) = 0u;
  uint64_t v54 = (void **)*((void *)a1 + 81);
  uint64_t v55 = *((void *)a1 + 82);
  *((void *)a1 + 85) = 0;
  unint64_t v56 = v55 - (void)v54;
  if (v56 >= 0x11)
  {
    do
    {
      operator delete(*v54);
      uint64_t v54 = (void **)(*((void *)a1 + 81) + 8);
      *((void *)a1 + 81) = v54;
      unint64_t v56 = *((void *)a1 + 82) - (void)v54;
    }
    while (v56 > 0x10);
  }
  if (v56 >> 3 == 1)
  {
    uint64_t v57 = 256;
  }
  else
  {
    if (v56 >> 3 != 2) {
      goto LABEL_53;
    }
    uint64_t v57 = 512;
  }
  *((void *)a1 + 84) = v57;
LABEL_53:
  uint64_t v58 = *((void *)a1 + 61);
  unsigned int v59 = *(_DWORD *)(v58 + 1280);
  v53.n128_u64[0] = *(void *)(v58 + 1288);
  *((_DWORD *)a1 + 158) = v59;
  if ((v59 & 0x80000000) != 0)
  {
    double v63 = 0.0;
  }
  else
  {
    double v60 = (double)v59 / v53.n128_f64[0] * ((double)v59 / v53.n128_f64[0]);
    int v61 = -v59;
    int v62 = (2 * v59) | 1;
    double v63 = 0.0;
    do
    {
      __p[0] = COERCE_VOID_(exp((double)v61 * -0.5 * (double)v61 / v60));
      double v63 = v63 + *(double *)__p;
      v53.n128_f64[0] = sub_18DEDEC14((void *)a1 + 80, (double *)__p);
      ++v61;
      --v62;
    }
    while (v62);
  }
  uint64_t v64 = *((void *)a1 + 85);
  if (v64 != ((2 * v59) | 1))
  {
    __int16 v101 = 12;
    unsigned __int8 v100 = 4;
    (*(void (**)(void **__return_ptr, unsigned char *, __n128))(*(void *)a1 + 16))(__p, a1, v53);
    if (v99 >= 0) {
      uint64_t v76 = __p;
    }
    else {
      LOBYTE(v76) = __p[0];
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v101, &v100, "%s could not be configured; invalid accel kernel,size,%lu,half_width,%u",
      v71,
      v72,
      v73,
      v74,
      v75,
      (char)v76);
    goto LABEL_68;
  }
  a4.i64[0] = 0x3CB0000000000000;
  if (fabs(v63) < 2.22044605e-16)
  {
    __int16 v101 = 12;
    unsigned __int8 v100 = 4;
    (*(void (**)(void **__return_ptr, unsigned char *))(*(void *)a1 + 16))(__p, a1);
    if (v99 >= 0) {
      int8x16_t v70 = __p;
    }
    else {
      LOBYTE(v70) = __p[0];
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v101, &v100, "%s could not be configured; null accel kernel",
      v65,
      v66,
      v67,
      v68,
      v69,
      (char)v70);
    goto LABEL_68;
  }
  uint64_t v78 = *((void *)a1 + 81);
  unint64_t v79 = *((void *)a1 + 84);
  unsigned int v80 = (double **)(v78 + 8 * (v79 >> 9));
  uint64_t v81 = *((void *)a1 + 82);
  if (v81 == v78) {
    uint64_t v82 = 0;
  }
  else {
    uint64_t v82 = &(*v80)[*((void *)a1 + 84) & 0x1FFLL];
  }
  unint64_t v83 = v79 + v64;
  unint64_t v84 = v83 >> 9;
  uint64_t v85 = v83 & 0x1FF;
LABEL_75:
  uint64_t v86 = v82 - 512;
  while (1)
  {
    uint64_t v87 = v81 == v78 ? 0 : *(void *)(v78 + 8 * v84) + 8 * v85;
    if (v82 == (double *)v87) {
      break;
    }
    *uint64_t v82 = *v82 / v63;
    ++v82;
    if (*v80 == ++v86)
    {
      unint64_t v88 = v80[1];
      ++v80;
      uint64_t v82 = v88;
      goto LABEL_75;
    }
  }
  uint64_t v89 = *((void *)a1 + 61);
  v53.n128_u64[0] = *(void *)(v89 + 976);
  __p[0] = 0;
  __p[1] = 0;
  CNTimeSpan::SetTimeSpan((uint64_t *)__p, 0, (int8x16_t)v53, a4);
  v90.i64[1] = (uint64_t)__p[1];
  *((_OWORD *)a1 + 31) = *(_OWORD *)__p;
  v90.i64[0] = *(void *)(v89 + 968);
  __p[0] = 0;
  __p[1] = 0;
  CNTimeSpan::SetTimeSpan((uint64_t *)__p, 0, v90, v91);
  *(_OWORD *)(a1 + 616) = *(_OWORD *)__p;
  cnframework::ActiveObjectBase::SetEventQueueDelay((cnframework::ActiveObjectBase *)a1, 0.0);
  a1[480] = 1;
  (*(void (**)(unsigned char *))(*(void *)a1 + 48))(a1);
  __int16 v101 = 12;
  unsigned __int8 v100 = 3;
  (*(void (**)(void **__return_ptr, unsigned char *))(*(void *)a1 + 16))(__p, a1);
  if (v99 >= 0) {
    uint64_t v97 = __p;
  }
  else {
    LOBYTE(v97) = __p[0];
  }
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v101, &v100, "%s configured successfully", v92, v93, v94, v95, v96, (char)v97);
  if (v99 < 0) {
    operator delete(__p[0]);
  }
  return 0;
}

void sub_18DFFE700(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t raven::RavenIMUPreprocessorActiveObject::IsConfigured(raven::RavenIMUPreprocessorActiveObject *this)
{
  return *((unsigned __int8 *)this + 480);
}

void *raven::RavenIMUPreprocessorActiveObject::GetActiveObjectName@<X0>(void *a1@<X8>)
{
  return sub_18DEDE7B0(a1, "RavenIMUPreprocessorActiveObject");
}

void raven::RavenIMUPreprocessorActiveObject::HandleEvent(raven::RavenIMUPreprocessorActiveObject *this, const raven::AccelerometerEvent *a2)
{
  if (!*((unsigned char *)this + 480)) {
    return;
  }
  if (!*((void *)this + 91)) {
    goto LABEL_25;
  }
  __p = (void *)(*(uint64_t (**)(const raven::AccelerometerEvent *))(*(void *)a2 + 16))(a2);
  *(void *)&long long v62 = v4;
  unint64_t v5 = *(void *)(*((void *)this + 87) + 8 * (*((void *)this + 90) / 0x1AuLL))
     + 152 * (*((void *)this + 90) % 0x1AuLL);
  v72[0] = (*(uint64_t (**)(unint64_t))(*(void *)v5 + 16))(v5);
  v72[1] = v6;
  uint64_t v9 = CNTimeSpan::operator-((uint64_t)&__p, v72, v7, v8);
  *(void *)&v73[0] = v9;
  v73[1] = v10;
  if (v9)
  {
    if (v9 < 0) {
      goto LABEL_8;
    }
LABEL_7:
    if (!sub_18DEE4D28(v73, (double *)this + 77)) {
      goto LABEL_25;
    }
    goto LABEL_8;
  }
  v11.n128_f64[0] = v10;
  if (v10 >= 0.0) {
    goto LABEL_7;
  }
LABEL_8:
  LOWORD(v72[0]) = 12;
  unsigned __int8 v71 = 3;
  uint64_t v12 = (*(uint64_t (**)(const raven::AccelerometerEvent *, __n128))(*(void *)a2 + 16))(a2, v11);
  double v14 = v13 + (double)v12;
  (*(void (**)(void **__return_ptr, raven::RavenIMUPreprocessorActiveObject *))(*(void *)this + 16))(&__p, this);
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)v72, &v71, "Warning: time,%.3lf,%s emptying history,accelerometer,dt,%.3lf", v15, v16, v17, v18, v19, SLOBYTE(v14));
  if (SHIBYTE(v62) < 0) {
    operator delete(__p);
  }
  uint64_t v20 = (void **)*((void *)this + 87);
  uint64_t v21 = (void **)*((void *)this + 88);
  if (v21 == v20)
  {
    uint64_t v21 = (void **)*((void *)this + 87);
  }
  else
  {
    unint64_t v22 = *((void *)this + 90);
    uint64_t v23 = &v20[v22 / 0x1A];
    unint64_t v24 = (unint64_t)v20[(*((void *)this + 91) + v22) / 0x1A] + 152 * ((*((void *)this + 91) + v22) % 0x1A);
    if ((char *)*v23 + 152 * (v22 % 0x1A) != (void *)v24)
    {
      double v25 = (void (***)(void))((char *)*v23 + 152 * (v22 % 0x1A));
      do
      {
        int v26 = *v25;
        v25 += 19;
        (*v26)();
        if ((char *)v25 - (unsigned char *)*v23 == 3952)
        {
          int v27 = (void (***)(void))v23[1];
          ++v23;
          double v25 = v27;
        }
      }
      while (v25 != (void (***)(void))v24);
      uint64_t v21 = (void **)*((void *)this + 88);
      uint64_t v20 = (void **)*((void *)this + 87);
    }
  }
  *((void *)this + 91) = 0;
  unint64_t v28 = (char *)v21 - (char *)v20;
  if (v28 >= 0x11)
  {
    do
    {
      operator delete(*v20);
      uint64_t v20 = (void **)(*((void *)this + 87) + 8);
      *((void *)this + 87) = v20;
      unint64_t v28 = *((void *)this + 88) - (void)v20;
    }
    while (v28 > 0x10);
  }
  if (v28 >> 3 == 1)
  {
    uint64_t v29 = 13;
  }
  else
  {
    if (v28 >> 3 != 2) {
      goto LABEL_25;
    }
    uint64_t v29 = 26;
  }
  *((void *)this + 90) = v29;
LABEL_25:
  sub_18DFFED54((uint64_t)this + 688, (uint64_t)a2);
  unint64_t v30 = *((void *)this + 91);
  if (v30 == *((void *)this + 85))
  {
    long long v62 = 0uLL;
    __p = &unk_1EDD14058;
    LOBYTE(v63) = 0;
    *((void *)&v63 + 1) = 0;
    *(void *)&long long v64 = 0;
    BYTE8(v64) = 0;
    __n128 v65 = 0uLL;
    LOBYTE(v66) = 0;
    *((void *)&v66 + 1) = 0;
    *(void *)uint64_t v67 = 0;
    *(int64x2_t *)&v67[8] = vdupq_n_s64(0x7FF8000000000000uLL);
    *(_OWORD *)&v67[24] = *(_OWORD *)&v67[8];
    char v68 = 0;
    uint64_t v69 = 0x7FF8000000000000;
    __int16 v70 = 0;
    unint64_t v31 = *((unsigned int *)this + 158);
    if (v30 > v31)
    {
      unint64_t v32 = *((void *)this + 90);
      unint64_t v33 = v32 + v31;
      uint64_t v34 = *((void *)this + 87);
      unint64_t v35 = *(void *)(v34 + 8 * (v33 / 0x1A)) + 152 * (v33 % 0x1A);
      long long v36 = *(_OWORD *)(v35 + 24);
      long long v62 = *(_OWORD *)(v35 + 8);
      long long v63 = v36;
      long long v37 = *(_OWORD *)(v35 + 40);
      __n128 v38 = *(__n128 *)(v35 + 56);
      long long v39 = *(_OWORD *)(v35 + 88);
      long long v66 = *(_OWORD *)(v35 + 72);
      *(_OWORD *)uint64_t v67 = v39;
      long long v64 = v37;
      __n128 v65 = v38;
      memset(&v67[16], 0, 24);
      uint64_t v40 = *((void *)this + 81);
      unint64_t v41 = *((void *)this + 84);
      uint64_t v42 = (void *)(v40 + 8 * (v41 >> 9));
      uint64_t v43 = *((void *)this + 82);
      if (v43 == v40) {
        uint64_t v44 = 0;
      }
      else {
        uint64_t v44 = (double *)(*v42 + 8 * (*((void *)this + 84) & 0x1FFLL));
      }
      uint64_t v45 = (void *)(v34 + 8 * (v32 / 0x1A));
      uint64_t v46 = *((void *)this + 88);
      if (v46 == v34) {
        unint64_t v47 = 0;
      }
      else {
        unint64_t v47 = *v45 + 152 * (v32 % 0x1A);
      }
      __int16 v48 = v41 + v30;
      unint64_t v49 = (v41 + v30) >> 9;
      uint64_t v50 = v48 & 0x1FF;
      __n128 v51 = 0uLL;
      v38.n128_u64[0] = 0;
      while (1)
      {
        unint64_t v52 = v47 - 3952;
        do
        {
          if (v43 == v40) {
            uint64_t v53 = 0;
          }
          else {
            uint64_t v53 = *(void *)(v40 + 8 * v49) + 8 * v50;
          }
          if (v44 == (double *)v53
            || (v46 == v34
              ? (unint64_t v54 = 0)
              : (unint64_t v54 = *(void *)(v34 + 8 * ((v32 + v30) / 0x1A)) + 152 * ((v32 + v30) % 0x1A)),
                v47 == v54))
          {
            (**(void (***)(__n128, __n128))(*(void *)(v34 + 8 * ((v30 + v32 - 1) / 0x1A))
                                                     + 152 * ((v30 + v32 - 1) % 0x1A)))(v51, v38);
            uint64_t v58 = *((void *)this + 88);
            uint64_t v59 = 26 * ((v58 - *((void *)this + 87)) >> 3) - 1;
            uint64_t v60 = *((void *)this + 91);
            if (v58 == *((void *)this + 87)) {
              uint64_t v59 = 0;
            }
            *((void *)this + 91) = v60 - 1;
            if ((unint64_t)(v59 - (v60 + *((void *)this + 90)) - 51) <= 0xFFFFFFFFFFFFFFCBLL)
            {
              operator delete(*(void **)(v58 - 8));
              *((void *)this + 88) -= 8;
            }
            sub_18DFFEE48();
          }
          double v55 = *v44++;
          __n128 v51 = (__n128)vmlaq_n_f64((float64x2_t)v51, *(float64x2_t *)(v47 + 104), v55);
          *(__n128 *)&v67[16] = v51;
          v38.n128_f64[0] = v38.n128_f64[0] + v55 * *(double *)(v47 + 120);
          *(void *)&v67[32] = v38.n128_u64[0];
          if ((double *)((char *)v44 - *v42) == (double *)4096)
          {
            unint64_t v56 = (double *)v42[1];
            ++v42;
            uint64_t v44 = v56;
          }
          v52 += 152;
          v47 += 152;
        }
        while (*v45 != v52);
        unint64_t v57 = v45[1];
        ++v45;
        unint64_t v47 = v57;
      }
    }
    sub_18DEDE720("deque");
  }
}

void sub_18DFFED2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int64x2_t sub_18DFFED54(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 32);
  if (!v4)
  {
    sub_18DFFFAE4((void **)a1);
    unint64_t v4 = *(void *)(a1 + 32);
  }
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = (void *)(v5 + 8 * (v4 / 0x1A));
  uint64_t v7 = *v6 + 152 * (v4 % 0x1A);
  if (*(void *)(a1 + 16) == v5) {
    uint64_t v7 = 0;
  }
  if (v7 == *v6) {
    uint64_t v7 = *(v6 - 1) + 3952;
  }
  *(void *)(v7 - 152) = &unk_1EDD14058;
  *(_OWORD *)(v7 - 144) = *(_OWORD *)(a2 + 8);
  long long v8 = *(_OWORD *)(a2 + 24);
  long long v9 = *(_OWORD *)(a2 + 40);
  long long v10 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(v7 - 96) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(v7 - 80) = v10;
  *(_OWORD *)(v7 - 128) = v8;
  *(_OWORD *)(v7 - 112) = v9;
  long long v11 = *(_OWORD *)(a2 + 88);
  long long v12 = *(_OWORD *)(a2 + 104);
  long long v13 = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(v7 - 22) = *(_OWORD *)(a2 + 130);
  *(_OWORD *)(v7 - 48) = v12;
  *(_OWORD *)(v7 - 32) = v13;
  *(_OWORD *)(v7 - 64) = v11;
  int64x2_t result = vaddq_s64(*(int64x2_t *)(a1 + 32), (int64x2_t)xmmword_18E1FC130);
  *(int64x2_t *)(a1 + 32) = result;
  return result;
}

void sub_18DFFEE48()
{
}

void sub_18DFFEEDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a11) {
    sub_18DEE4E18(a11);
  }
  if (a13) {
    sub_18DEE4E18(a13);
  }
  _Unwind_Resume(exception_object);
}

void raven::RavenIMUPreprocessorActiveObject::HandleEvent(raven::RavenIMUPreprocessorActiveObject *this, const raven::RateGyroEvent *a2)
{
  if (!*((unsigned char *)this + 480)) {
    return;
  }
  if (!*((void *)this + 76)) {
    goto LABEL_25;
  }
  __p = (void *)(*(uint64_t (**)(const raven::RateGyroEvent *))(*(void *)a2 + 16))(a2);
  *(void *)&long long v62 = v4;
  unint64_t v5 = *(void *)(*((void *)this + 72) + 8 * (*((void *)this + 75) / 0x1AuLL))
     + 152 * (*((void *)this + 75) % 0x1AuLL);
  v72[0] = (*(uint64_t (**)(unint64_t))(*(void *)v5 + 16))(v5);
  v72[1] = v6;
  uint64_t v9 = CNTimeSpan::operator-((uint64_t)&__p, v72, v7, v8);
  *(void *)&v73[0] = v9;
  v73[1] = v10;
  if (v9)
  {
    if (v9 < 0) {
      goto LABEL_8;
    }
LABEL_7:
    if (!sub_18DEE4D28(v73, (double *)this + 62)) {
      goto LABEL_25;
    }
    goto LABEL_8;
  }
  v11.n128_f64[0] = v10;
  if (v10 >= 0.0) {
    goto LABEL_7;
  }
LABEL_8:
  LOWORD(v72[0]) = 12;
  unsigned __int8 v71 = 3;
  uint64_t v12 = (*(uint64_t (**)(const raven::RateGyroEvent *, __n128))(*(void *)a2 + 16))(a2, v11);
  double v14 = v13 + (double)v12;
  (*(void (**)(void **__return_ptr, raven::RavenIMUPreprocessorActiveObject *))(*(void *)this + 16))(&__p, this);
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)v72, &v71, "Warning: time,%.3lf,%s emptying history,gyro,dt,%.3lf", v15, v16, v17, v18, v19, SLOBYTE(v14));
  if (SHIBYTE(v62) < 0) {
    operator delete(__p);
  }
  uint64_t v20 = (void **)*((void *)this + 72);
  uint64_t v21 = (void **)*((void *)this + 73);
  if (v21 == v20)
  {
    uint64_t v21 = (void **)*((void *)this + 72);
  }
  else
  {
    unint64_t v22 = *((void *)this + 75);
    uint64_t v23 = &v20[v22 / 0x1A];
    unint64_t v24 = (unint64_t)v20[(*((void *)this + 76) + v22) / 0x1A] + 152 * ((*((void *)this + 76) + v22) % 0x1A);
    if ((char *)*v23 + 152 * (v22 % 0x1A) != (void *)v24)
    {
      double v25 = (void (***)(void))((char *)*v23 + 152 * (v22 % 0x1A));
      do
      {
        int v26 = *v25;
        v25 += 19;
        (*v26)();
        if ((char *)v25 - (unsigned char *)*v23 == 3952)
        {
          int v27 = (void (***)(void))v23[1];
          ++v23;
          double v25 = v27;
        }
      }
      while (v25 != (void (***)(void))v24);
      uint64_t v21 = (void **)*((void *)this + 73);
      uint64_t v20 = (void **)*((void *)this + 72);
    }
  }
  *((void *)this + 76) = 0;
  unint64_t v28 = (char *)v21 - (char *)v20;
  if (v28 >= 0x11)
  {
    do
    {
      operator delete(*v20);
      uint64_t v20 = (void **)(*((void *)this + 72) + 8);
      *((void *)this + 72) = v20;
      unint64_t v28 = *((void *)this + 73) - (void)v20;
    }
    while (v28 > 0x10);
  }
  if (v28 >> 3 == 1)
  {
    uint64_t v29 = 13;
  }
  else
  {
    if (v28 >> 3 != 2) {
      goto LABEL_25;
    }
    uint64_t v29 = 26;
  }
  *((void *)this + 75) = v29;
LABEL_25:
  sub_18DFFF508((uint64_t)this + 568, (uint64_t)a2);
  unint64_t v30 = *((void *)this + 76);
  if (v30 == *((void *)this + 70))
  {
    long long v62 = 0uLL;
    __p = &unk_1EDD137F0;
    LOBYTE(v63) = 0;
    *((void *)&v63 + 1) = 0;
    *(void *)&long long v64 = 0;
    BYTE8(v64) = 0;
    __n128 v65 = 0uLL;
    LOBYTE(v66) = 0;
    *((void *)&v66 + 1) = 0;
    *(void *)uint64_t v67 = 0;
    *(int64x2_t *)&v67[8] = vdupq_n_s64(0x7FF8000000000000uLL);
    *(_OWORD *)&v67[24] = *(_OWORD *)&v67[8];
    char v68 = 0;
    uint64_t v69 = 0x7FF8000000000000;
    __int16 v70 = 0;
    unint64_t v31 = *((unsigned int *)this + 128);
    if (v30 > v31)
    {
      unint64_t v32 = *((void *)this + 75);
      unint64_t v33 = v32 + v31;
      uint64_t v34 = *((void *)this + 72);
      unint64_t v35 = *(void *)(v34 + 8 * (v33 / 0x1A)) + 152 * (v33 % 0x1A);
      long long v36 = *(_OWORD *)(v35 + 24);
      long long v62 = *(_OWORD *)(v35 + 8);
      long long v63 = v36;
      long long v37 = *(_OWORD *)(v35 + 40);
      __n128 v38 = *(__n128 *)(v35 + 56);
      long long v39 = *(_OWORD *)(v35 + 88);
      long long v66 = *(_OWORD *)(v35 + 72);
      *(_OWORD *)uint64_t v67 = v39;
      long long v64 = v37;
      __n128 v65 = v38;
      memset(&v67[16], 0, 24);
      uint64_t v40 = *((void *)this + 66);
      unint64_t v41 = *((void *)this + 69);
      uint64_t v42 = (void *)(v40 + 8 * (v41 >> 9));
      uint64_t v43 = *((void *)this + 67);
      if (v43 == v40) {
        uint64_t v44 = 0;
      }
      else {
        uint64_t v44 = (double *)(*v42 + 8 * (*((void *)this + 69) & 0x1FFLL));
      }
      uint64_t v45 = (void *)(v34 + 8 * (v32 / 0x1A));
      uint64_t v46 = *((void *)this + 73);
      if (v46 == v34) {
        unint64_t v47 = 0;
      }
      else {
        unint64_t v47 = *v45 + 152 * (v32 % 0x1A);
      }
      __int16 v48 = v41 + v30;
      unint64_t v49 = (v41 + v30) >> 9;
      uint64_t v50 = v48 & 0x1FF;
      __n128 v51 = 0uLL;
      v38.n128_u64[0] = 0;
      while (1)
      {
        unint64_t v52 = v47 - 3952;
        do
        {
          if (v43 == v40) {
            uint64_t v53 = 0;
          }
          else {
            uint64_t v53 = *(void *)(v40 + 8 * v49) + 8 * v50;
          }
          if (v44 == (double *)v53
            || (v46 == v34
              ? (unint64_t v54 = 0)
              : (unint64_t v54 = *(void *)(v34 + 8 * ((v32 + v30) / 0x1A)) + 152 * ((v32 + v30) % 0x1A)),
                v47 == v54))
          {
            (**(void (***)(__n128, __n128))(*(void *)(v34 + 8 * ((v30 + v32 - 1) / 0x1A))
                                                     + 152 * ((v30 + v32 - 1) % 0x1A)))(v51, v38);
            uint64_t v58 = *((void *)this + 73);
            uint64_t v59 = 26 * ((v58 - *((void *)this + 72)) >> 3) - 1;
            uint64_t v60 = *((void *)this + 76);
            if (v58 == *((void *)this + 72)) {
              uint64_t v59 = 0;
            }
            *((void *)this + 76) = v60 - 1;
            if ((unint64_t)(v59 - (v60 + *((void *)this + 75)) - 51) <= 0xFFFFFFFFFFFFFFCBLL)
            {
              operator delete(*(void **)(v58 - 8));
              *((void *)this + 73) -= 8;
            }
            sub_18DFFF5FC();
          }
          double v55 = *v44++;
          __n128 v51 = (__n128)vmlaq_n_f64((float64x2_t)v51, *(float64x2_t *)(v47 + 104), v55);
          *(__n128 *)&v67[16] = v51;
          v38.n128_f64[0] = v38.n128_f64[0] + v55 * *(double *)(v47 + 120);
          *(void *)&v67[32] = v38.n128_u64[0];
          if ((double *)((char *)v44 - *v42) == (double *)4096)
          {
            unint64_t v56 = (double *)v42[1];
            ++v42;
            uint64_t v44 = v56;
          }
          v52 += 152;
          v47 += 152;
        }
        while (*v45 != v52);
        unint64_t v57 = v45[1];
        ++v45;
        unint64_t v47 = v57;
      }
    }
    sub_18DEDE720("deque");
  }
}

void sub_18DFFF4E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int64x2_t sub_18DFFF508(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 32);
  if (!v4)
  {
    sub_18E0001F8((void **)a1);
    unint64_t v4 = *(void *)(a1 + 32);
  }
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = (void *)(v5 + 8 * (v4 / 0x1A));
  uint64_t v7 = *v6 + 152 * (v4 % 0x1A);
  if (*(void *)(a1 + 16) == v5) {
    uint64_t v7 = 0;
  }
  if (v7 == *v6) {
    uint64_t v7 = *(v6 - 1) + 3952;
  }
  *(void *)(v7 - 152) = &unk_1EDD137F0;
  *(_OWORD *)(v7 - 144) = *(_OWORD *)(a2 + 8);
  long long v8 = *(_OWORD *)(a2 + 24);
  long long v9 = *(_OWORD *)(a2 + 40);
  long long v10 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(v7 - 96) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(v7 - 80) = v10;
  *(_OWORD *)(v7 - 128) = v8;
  *(_OWORD *)(v7 - 112) = v9;
  long long v11 = *(_OWORD *)(a2 + 88);
  long long v12 = *(_OWORD *)(a2 + 104);
  long long v13 = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(v7 - 22) = *(_OWORD *)(a2 + 130);
  *(_OWORD *)(v7 - 48) = v12;
  *(_OWORD *)(v7 - 32) = v13;
  *(_OWORD *)(v7 - 64) = v11;
  int64x2_t result = vaddq_s64(*(int64x2_t *)(a1 + 32), (int64x2_t)xmmword_18E1FC130);
  *(int64x2_t *)(a1 + 32) = result;
  return result;
}

void sub_18DFFF5FC()
{
}

void sub_18DFFF690(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a11) {
    sub_18DEE4E18(a11);
  }
  if (a13) {
    sub_18DEE4E18(a13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t raven::RavenIMUPreprocessorActiveObject::HandleEvent(uint64_t result, uint64_t a2)
{
  if (!*(_DWORD *)(a2 + 104)) {
    return (*(uint64_t (**)(void))(*(void *)result + 48))();
  }
  return result;
}

void raven::RavenIMUPreprocessorActiveObject::Reset(raven::RavenIMUPreprocessorActiveObject *this)
{
  if (!*((unsigned char *)this + 480)) {
    goto LABEL_32;
  }
  int v2 = (void **)*((void *)this + 72);
  uint64_t v3 = (void **)*((void *)this + 73);
  if (v3 == v2)
  {
    uint64_t v6 = (void *)((char *)this + 608);
    uint64_t v3 = (void **)*((void *)this + 72);
  }
  else
  {
    unint64_t v4 = *((void *)this + 75);
    uint64_t v5 = &v2[v4 / 0x1A];
    uint64_t v6 = (void *)((char *)this + 608);
    unint64_t v7 = (unint64_t)v2[(*((void *)this + 76) + v4) / 0x1A] + 152 * ((*((void *)this + 76) + v4) % 0x1A);
    if ((char *)*v5 + 152 * (v4 % 0x1A) != (void *)v7)
    {
      long long v8 = (void (***)(void))((char *)*v5 + 152 * (v4 % 0x1A));
      do
      {
        long long v9 = *v8;
        v8 += 19;
        (*v9)();
        if ((char *)v8 - (unsigned char *)*v5 == 3952)
        {
          long long v10 = (void (***)(void))v5[1];
          ++v5;
          long long v8 = v10;
        }
      }
      while (v8 != (void (***)(void))v7);
      uint64_t v3 = (void **)*((void *)this + 73);
      int v2 = (void **)*((void *)this + 72);
    }
  }
  *uint64_t v6 = 0;
  unint64_t v11 = (char *)v3 - (char *)v2;
  if (v11 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      int v2 = (void **)(*((void *)this + 72) + 8);
      *((void *)this + 72) = v2;
      unint64_t v11 = *((void *)this + 73) - (void)v2;
    }
    while (v11 > 0x10);
  }
  if (v11 >> 3 == 1)
  {
    uint64_t v12 = 13;
    goto LABEL_16;
  }
  if (v11 >> 3 == 2)
  {
    uint64_t v12 = 26;
LABEL_16:
    *((void *)this + 75) = v12;
  }
  long long v13 = (void **)*((void *)this + 87);
  double v14 = (void **)*((void *)this + 88);
  if (v14 == v13)
  {
    uint64_t v17 = (void *)((char *)this + 728);
    double v14 = (void **)*((void *)this + 87);
  }
  else
  {
    unint64_t v15 = *((void *)this + 90);
    uint64_t v16 = &v13[v15 / 0x1A];
    uint64_t v17 = (void *)((char *)this + 728);
    unint64_t v18 = (unint64_t)v13[(*((void *)this + 91) + v15) / 0x1A] + 152 * ((*((void *)this + 91) + v15) % 0x1A);
    if ((char *)*v16 + 152 * (v15 % 0x1A) != (void *)v18)
    {
      uint64_t v19 = (void (***)(void))((char *)*v16 + 152 * (v15 % 0x1A));
      do
      {
        uint64_t v20 = *v19;
        v19 += 19;
        (*v20)();
        if ((char *)v19 - (unsigned char *)*v16 == 3952)
        {
          uint64_t v21 = (void (***)(void))v16[1];
          ++v16;
          uint64_t v19 = v21;
        }
      }
      while (v19 != (void (***)(void))v18);
      double v14 = (void **)*((void *)this + 88);
      long long v13 = (void **)*((void *)this + 87);
    }
  }
  void *v17 = 0;
  unint64_t v22 = (char *)v14 - (char *)v13;
  if (v22 >= 0x11)
  {
    do
    {
      operator delete(*v13);
      long long v13 = (void **)(*((void *)this + 87) + 8);
      *((void *)this + 87) = v13;
      unint64_t v22 = *((void *)this + 88) - (void)v13;
    }
    while (v22 > 0x10);
  }
  if (v22 >> 3 == 1)
  {
    uint64_t v23 = 13;
  }
  else
  {
    if (v22 >> 3 != 2) {
      goto LABEL_32;
    }
    uint64_t v23 = 26;
  }
  *((void *)this + 90) = v23;
LABEL_32:
  cnframework::ActiveObjectBase::ResetCurrentTime(this);

  cnframework::ActiveObjectBase::ResetEventQueue(this);
}

uint64_t sub_18DFFF978(void *a1)
{
  int v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  if (v3 == v2)
  {
    unint64_t v4 = a1 + 5;
    uint64_t v3 = (void **)a1[1];
  }
  else
  {
    unint64_t v4 = a1 + 5;
    unint64_t v5 = a1[4];
    uint64_t v6 = &v2[v5 / 0x1A];
    unint64_t v7 = (unint64_t)v2[(a1[5] + v5) / 0x1A] + 152 * ((a1[5] + v5) % 0x1A);
    if ((char *)*v6 + 152 * (v5 % 0x1A) != (void *)v7)
    {
      long long v8 = (void (***)(void))((char *)*v6 + 152 * (v5 % 0x1A));
      do
      {
        long long v9 = *v8;
        v8 += 19;
        (*v9)();
        if ((char *)v8 - (unsigned char *)*v6 == 3952)
        {
          long long v10 = (void (***)(void))v6[1];
          ++v6;
          long long v8 = v10;
        }
      }
      while (v8 != (void (***)(void))v7);
      int v2 = (void **)a1[1];
      uint64_t v3 = (void **)a1[2];
    }
  }
  void *v4 = 0;
  unint64_t v11 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = (void **)a1[2];
      int v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v11 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v12 = v11 >> 3;
  if (v12 == 1)
  {
    uint64_t v13 = 13;
  }
  else
  {
    if (v12 != 2) {
      goto LABEL_17;
    }
    uint64_t v13 = 26;
  }
  a1[4] = v13;
LABEL_17:
  while (v2 != v3)
  {
    double v14 = *v2++;
    operator delete(v14);
  }

  return sub_18DEE1F78((uint64_t)a1);
}

void sub_18DFFFAE4(void **a1)
{
  int v2 = a1[1];
  uint64_t v3 = a1[2];
  unint64_t v4 = (v3 - v2) >> 3;
  if (v3 == v2) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = 26 * v4 - 1;
  }
  uint64_t v6 = (char *)a1[4];
  if (v5 - (unint64_t)&v6[(void)a1[5]] < 0x1A)
  {
    uint64_t v7 = (uint64_t)(a1 + 3);
    long long v8 = a1[3];
    long long v9 = *a1;
    uint64_t v10 = v8 - (unsigned char *)*a1;
    if (v4 >= v10 >> 3)
    {
      if (v8 == v9) {
        unint64_t v11 = 1;
      }
      else {
        unint64_t v11 = v10 >> 2;
      }
      uint64_t v46 = a1 + 3;
      __p = sub_18DEDF808(v7, v11);
      uint64_t v43 = (char *)__p;
      uint64_t v44 = (char *)__p;
      uint64_t v45 = (char *)__p + 8 * v12;
      unint64_t v41 = operator new(0xF70uLL);
      sub_18DEDF5A0(&__p, &v41);
      uint64_t v13 = (char *)a1[1];
      double v14 = v44;
      if (v13 == a1[2])
      {
        unint64_t v33 = (char *)a1[1];
      }
      else
      {
        do
        {
          if (v14 == v45)
          {
            int64_t v15 = v43 - (unsigned char *)__p;
            if (v43 <= __p)
            {
              if (v14 == __p) {
                unint64_t v23 = 1;
              }
              else {
                unint64_t v23 = (v14 - (unsigned char *)__p) >> 2;
              }
              unint64_t v24 = (char *)sub_18DEDF808((uint64_t)v46, v23);
              int v26 = v43;
              double v14 = &v24[8 * (v23 >> 2)];
              uint64_t v27 = v44 - v43;
              if (v44 != v43)
              {
                double v14 = &v24[8 * (v23 >> 2) + (v27 & 0xFFFFFFFFFFFFFFF8)];
                uint64_t v28 = 8 * (v27 >> 3);
                uint64_t v29 = &v24[8 * (v23 >> 2)];
                do
                {
                  uint64_t v30 = *(void *)v26;
                  v26 += 8;
                  *(void *)uint64_t v29 = v30;
                  v29 += 8;
                  v28 -= 8;
                }
                while (v28);
              }
              unint64_t v31 = __p;
              __p = v24;
              uint64_t v43 = &v24[8 * (v23 >> 2)];
              uint64_t v44 = v14;
              uint64_t v45 = &v24[8 * v25];
              if (v31)
              {
                operator delete(v31);
                double v14 = v44;
              }
            }
            else
            {
              uint64_t v16 = v15 >> 3;
              BOOL v17 = v15 >> 3 < -1;
              uint64_t v18 = (v15 >> 3) + 2;
              if (v17) {
                uint64_t v19 = v18;
              }
              else {
                uint64_t v19 = v16 + 1;
              }
              uint64_t v20 = &v43[-8 * (v19 >> 1)];
              int64_t v21 = v14 - v43;
              if (v14 != v43)
              {
                memmove(&v43[-8 * (v19 >> 1)], v43, v14 - v43);
                double v14 = v43;
              }
              unint64_t v22 = &v14[-8 * (v19 >> 1)];
              double v14 = &v20[v21];
              uint64_t v43 = v22;
              uint64_t v44 = &v20[v21];
            }
          }
          uint64_t v32 = *(void *)v13;
          v13 += 8;
          *(void *)double v14 = v32;
          double v14 = v44 + 8;
          v44 += 8;
        }
        while (v13 != a1[2]);
        unint64_t v33 = (char *)a1[1];
      }
      long long v36 = *a1;
      long long v37 = v43;
      *a1 = __p;
      a1[1] = v37;
      __p = v36;
      uint64_t v43 = v33;
      __n128 v38 = (char *)a1[3];
      long long v39 = v45;
      a1[2] = v14;
      a1[3] = v39;
      uint64_t v44 = v13;
      uint64_t v45 = v38;
      if (v14 - v37 == 8) {
        uint64_t v40 = 13;
      }
      else {
        uint64_t v40 = (uint64_t)a1[4] + 26;
      }
      a1[4] = (void *)v40;
      if (v13 != v33) {
        uint64_t v44 = &v13[(v33 - v13 + 7) & 0xFFFFFFFFFFFFFFF8];
      }
      if (v36) {
        operator delete(v36);
      }
    }
    else
    {
      if (v2 == v9)
      {
        __p = operator new(0xF70uLL);
        sub_18DEDF368(a1, &__p);
        uint64_t v34 = a1[2];
        __p = (void *)*(v34 - 1);
        a1[2] = v34 - 1;
      }
      else
      {
        __p = operator new(0xF70uLL);
      }
      sub_18DEDF480((uint64_t)a1, &__p);
      if ((unsigned char *)a1[2] - (unsigned char *)a1[1] == 8) {
        uint64_t v35 = 13;
      }
      else {
        uint64_t v35 = (uint64_t)a1[4] + 26;
      }
      a1[4] = (void *)v35;
    }
  }
  else
  {
    a1[4] = v6 + 26;
    __p = (void *)*((void *)v3 - 1);
    a1[2] = v3 - 8;
    sub_18DEDF480((uint64_t)a1, &__p);
  }
}

void sub_18DFFFDB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  operator delete(v12);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_18DFFFE00()
{
  v0 = operator new(0x60uLL);
  sub_18DFFFE5C(v0);
}

void sub_18DFFFE48(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_18DFFFE5C(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1EDD1E458;
  sub_18DFFFEB8((uint64_t)(a1 + 3));
}

void sub_18DFFFEA4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_18DFFFEB8(uint64_t a1)
{
  *(void *)a1 = &unk_1EDD0A260;
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  uint64_t v2 = MEMORY[0x1E4FBA3D8];
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = v2;
  sub_18DEDE7B0((void *)(a1 + 48), "");
  *(unsigned char *)(a1 + 8) = 1;
  sub_18E000050();
}

void sub_18DFFFFF8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 71) < 0) {
    operator delete(*v3);
  }
  if (*v2) {
    (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_18E000050()
{
}

void sub_18E00013C()
{
}

void *sub_18E000150()
{
}

void sub_18E00015C()
{
}

void sub_18E0001F8(void **a1)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  unint64_t v4 = (v3 - v2) >> 3;
  if (v3 == v2) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = 26 * v4 - 1;
  }
  uint64_t v6 = (char *)a1[4];
  if (v5 - (unint64_t)&v6[(void)a1[5]] < 0x1A)
  {
    uint64_t v7 = (uint64_t)(a1 + 3);
    long long v8 = a1[3];
    long long v9 = *a1;
    uint64_t v10 = v8 - (unsigned char *)*a1;
    if (v4 >= v10 >> 3)
    {
      if (v8 == v9) {
        unint64_t v11 = 1;
      }
      else {
        unint64_t v11 = v10 >> 2;
      }
      uint64_t v46 = a1 + 3;
      __p = sub_18DEDF808(v7, v11);
      uint64_t v43 = (char *)__p;
      uint64_t v44 = (char *)__p;
      uint64_t v45 = (char *)__p + 8 * v12;
      unint64_t v41 = operator new(0xF70uLL);
      sub_18DEDF5A0(&__p, &v41);
      uint64_t v13 = (char *)a1[1];
      double v14 = v44;
      if (v13 == a1[2])
      {
        unint64_t v33 = (char *)a1[1];
      }
      else
      {
        do
        {
          if (v14 == v45)
          {
            int64_t v15 = v43 - (unsigned char *)__p;
            if (v43 <= __p)
            {
              if (v14 == __p) {
                unint64_t v23 = 1;
              }
              else {
                unint64_t v23 = (v14 - (unsigned char *)__p) >> 2;
              }
              unint64_t v24 = (char *)sub_18DEDF808((uint64_t)v46, v23);
              int v26 = v43;
              double v14 = &v24[8 * (v23 >> 2)];
              uint64_t v27 = v44 - v43;
              if (v44 != v43)
              {
                double v14 = &v24[8 * (v23 >> 2) + (v27 & 0xFFFFFFFFFFFFFFF8)];
                uint64_t v28 = 8 * (v27 >> 3);
                uint64_t v29 = &v24[8 * (v23 >> 2)];
                do
                {
                  uint64_t v30 = *(void *)v26;
                  v26 += 8;
                  *(void *)uint64_t v29 = v30;
                  v29 += 8;
                  v28 -= 8;
                }
                while (v28);
              }
              unint64_t v31 = __p;
              __p = v24;
              uint64_t v43 = &v24[8 * (v23 >> 2)];
              uint64_t v44 = v14;
              uint64_t v45 = &v24[8 * v25];
              if (v31)
              {
                operator delete(v31);
                double v14 = v44;
              }
            }
            else
            {
              uint64_t v16 = v15 >> 3;
              BOOL v17 = v15 >> 3 < -1;
              uint64_t v18 = (v15 >> 3) + 2;
              if (v17) {
                uint64_t v19 = v18;
              }
              else {
                uint64_t v19 = v16 + 1;
              }
              uint64_t v20 = &v43[-8 * (v19 >> 1)];
              int64_t v21 = v14 - v43;
              if (v14 != v43)
              {
                memmove(&v43[-8 * (v19 >> 1)], v43, v14 - v43);
                double v14 = v43;
              }
              unint64_t v22 = &v14[-8 * (v19 >> 1)];
              double v14 = &v20[v21];
              uint64_t v43 = v22;
              uint64_t v44 = &v20[v21];
            }
          }
          uint64_t v32 = *(void *)v13;
          v13 += 8;
          *(void *)double v14 = v32;
          double v14 = v44 + 8;
          v44 += 8;
        }
        while (v13 != a1[2]);
        unint64_t v33 = (char *)a1[1];
      }
      long long v36 = *a1;
      long long v37 = v43;
      *a1 = __p;
      a1[1] = v37;
      __p = v36;
      uint64_t v43 = v33;
      __n128 v38 = (char *)a1[3];
      long long v39 = v45;
      a1[2] = v14;
      a1[3] = v39;
      uint64_t v44 = v13;
      uint64_t v45 = v38;
      if (v14 - v37 == 8) {
        uint64_t v40 = 13;
      }
      else {
        uint64_t v40 = (uint64_t)a1[4] + 26;
      }
      a1[4] = (void *)v40;
      if (v13 != v33) {
        uint64_t v44 = &v13[(v33 - v13 + 7) & 0xFFFFFFFFFFFFFFF8];
      }
      if (v36) {
        operator delete(v36);
      }
    }
    else
    {
      if (v2 == v9)
      {
        __p = operator new(0xF70uLL);
        sub_18DEDF368(a1, &__p);
        uint64_t v34 = a1[2];
        __p = (void *)*(v34 - 1);
        a1[2] = v34 - 1;
      }
      else
      {
        __p = operator new(0xF70uLL);
      }
      sub_18DEDF480((uint64_t)a1, &__p);
      if ((unsigned char *)a1[2] - (unsigned char *)a1[1] == 8) {
        uint64_t v35 = 13;
      }
      else {
        uint64_t v35 = (uint64_t)a1[4] + 26;
      }
      a1[4] = (void *)v35;
    }
  }
  else
  {
    a1[4] = v6 + 26;
    __p = (void *)*((void *)v3 - 1);
    a1[2] = v3 - 8;
    sub_18DEDF480((uint64_t)a1, &__p);
  }
}

void sub_18E0004C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  operator delete(v12);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_18E000514()
{
  v0 = operator new(0x60uLL);
  sub_18E000570(v0);
}

void sub_18E00055C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_18E000570(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1EDD1E458;
  sub_18E0005CC((uint64_t)(a1 + 3));
}

void sub_18E0005B8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_18E0005CC(uint64_t a1)
{
  *(void *)a1 = &unk_1EDD0A260;
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  uint64_t v2 = MEMORY[0x1E4FBA3D8];
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = v2;
  sub_18DEDE7B0((void *)(a1 + 48), "");
  *(unsigned char *)(a1 + 8) = 1;
  sub_18E000764();
}

void sub_18E00070C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 71) < 0) {
    operator delete(*v3);
  }
  if (*v2) {
    (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_18E000764()
{
}

void sub_18E000850()
{
}

void *sub_18E000864()
{
}

void sub_18E000870()
{
}

void raven::RavenParameters::PrintLoadErrors(raven::RavenParameters *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  long long v8 = (uint64_t *)*((void *)this + 5);
  for (unint64_t i = (uint64_t *)*((void *)this + 6); v8 != i; v8 += 3)
  {
    __int16 v12 = 12;
    unsigned __int8 v11 = 4;
    LOBYTE(v10) = (_BYTE)v8;
    if (*((char *)v8 + 23) < 0) {
      uint64_t v10 = *v8;
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v12, &v11, "Error: failed to load configuration with message \"%s\"", a4, a5, a6, a7, a8, v10);
  }
}

BOOL raven::RavenParameters::ParseGnssInnovationThresholds(uint64_t a1, _OWORD *a2, const char *a3)
{
  int v4 = sub_18E0009E4(a1, (uint64_t)v7, 4, a3);
  if (v4 == 4)
  {
    long long v5 = v7[1];
    *a2 = v7[0];
    a2[1] = v5;
  }
  return v4 == 4;
}

uint64_t sub_18E0009E4(uint64_t a1, uint64_t a2, int a3, const char *a4)
{
  uint64_t v75 = *MEMORY[0x1E4F143B8];
  char v34 = (char)a4;
  if (!sub_18E00C3DC(a1, __s, a4))
  {
    if (*(unsigned char *)(a1 + 32))
    {
      LOWORD(v47[0]) = 0;
      __dst.__r_.__value_.__s.__data_[0] = 2;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v47, (unsigned __int8 *)&__dst, "ConfigLoader: \"%s\" could not be parsed", v6, v7, v8, v9, v10, v34);
    }
    return 0xFFFFFFFFLL;
  }
  sub_18DEDE7B0(v67, __s);
  memset(&v62, 0, sizeof(v62));
  sub_18DEDE7B0(&v63, " ,;");
  unint64_t v11 = v68;
  __int16 v12 = (std::string::value_type *)v67;
  if ((v68 & 0x80u) != 0) {
    __int16 v12 = (std::string::value_type *)v67[0];
  }
  LOWORD(v65) = 0;
  HIDWORD(v65) = 0;
  char v66 = 0;
  if ((v68 & 0x80u) != 0) {
    unint64_t v11 = (unint64_t)v67[1];
  }
  double v55 = v12;
  unint64_t v56 = &v12[v11];
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
    sub_18DEDE668(&v57, v62.__r_.__value_.__l.__data_, v62.__r_.__value_.__l.__size_);
  }
  else {
    std::string v57 = v62;
  }
  if (SHIBYTE(v64) < 0)
  {
    sub_18DEDE668(&v58, (void *)v63, *((unint64_t *)&v63 + 1));
  }
  else
  {
    long long v58 = v63;
    uint64_t v59 = v64;
  }
  uint64_t v60 = v65;
  char v61 = v66;
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
    sub_18DEDE668(&__dst, v57.__r_.__value_.__l.__data_, v57.__r_.__value_.__l.__size_);
  }
  else {
    std::string __dst = v57;
  }
  if (SHIBYTE(v59) < 0)
  {
    sub_18DEDE668(&__p, (void *)v58, *((unint64_t *)&v58 + 1));
  }
  else
  {
    long long __p = v58;
    uint64_t v39 = v59;
  }
  uint64_t v40 = v60;
  char v41 = v61;
  sub_18E00CA4C((char *)v47, (long long *)&__dst, v55, v56);
  if (SHIBYTE(v39) < 0) {
    operator delete((void *)__p);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  uint64_t v13 = 0;
  for (uint64_t i = a3 & ~(a3 >> 31); ; --i)
  {
    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
      sub_18DEDE668(&v69, v57.__r_.__value_.__l.__data_, v57.__r_.__value_.__l.__size_);
    }
    else {
      std::string v69 = v57;
    }
    if (SHIBYTE(v59) < 0)
    {
      sub_18DEDE668(&v70, (void *)v58, *((unint64_t *)&v58 + 1));
    }
    else
    {
      long long v70 = v58;
      uint64_t v71 = v59;
    }
    uint64_t v72 = v60;
    char v73 = v61;
    sub_18E00CA4C((char *)&__dst, (long long *)&v69, v56, v56);
    if (SHIBYTE(v71) < 0) {
      operator delete((void *)v70);
    }
    if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v69.__r_.__value_.__l.__data_);
    }
    if (v44 && v53)
    {
      if (v42 != v51)
      {
        BOOL v20 = 0;
        goto LABEL_44;
      }
      BOOL v21 = v43 == v52;
    }
    else
    {
      BOOL v21 = v44 == v53;
    }
    BOOL v20 = v21;
LABEL_44:
    if (v46 < 0) {
      operator delete(v45);
    }
    if (SHIBYTE(v39) < 0) {
      operator delete((void *)__p);
    }
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__dst.__r_.__value_.__l.__data_);
    }
    if (v20) {
      goto LABEL_67;
    }
    if (!i)
    {
      LOWORD(__dst.__r_.__value_.__l.__data_) = 0;
      v69.__r_.__value_.__s.__data_[0] = 4;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&__dst, (unsigned __int8 *)&v69, "ConfigLoader: Too many entries for \"%s\"", v15, v16, v17, v18, v19, v34);
      goto LABEL_66;
    }
    if (!v53) {
      __assert_rtn("dereference", "token_iterator.hpp", 59, "valid_");
    }
    unint64_t v22 = (v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &v54
        : (std::string *)v54.__r_.__value_.__r.__words[0];
    if ((sub_18E00C8A8((void *)a2, (char *)v22) & 1) == 0) {
      break;
    }
    if (*(unsigned char *)(a1 + 32))
    {
      LOWORD(v69.__r_.__value_.__l.__data_) = 0;
      unsigned __int8 v36 = 2;
      std::to_string(&__dst, *(double *)(a2 + 8));
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v69, &v36, "ConfigLoader: \"%s\" loaded value #%d \"%s\"", v28, v29, v30, v31, v32, v34);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__dst.__r_.__value_.__l.__data_);
      }
    }
    if (!v53) {
      __assert_rtn("increment", "token_iterator.hpp", 54, "valid_");
    }
    char v53 = sub_18E00CB64((uint64_t)v47, &v51, v52, &v54);
    uint64_t v13 = (v13 + 1);
    a2 += 8;
  }
  LOWORD(__dst.__r_.__value_.__l.__data_) = 0;
  v69.__r_.__value_.__s.__data_[0] = 4;
  if (!v53) {
    __assert_rtn("dereference", "token_iterator.hpp", 59, "valid_");
  }
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&__dst, (unsigned __int8 *)&v69, "ConfigLoader: \"%s\" could not cast value #%d from \"%s\"", v23, v24, v25, v26, v27, v34);
LABEL_66:
  uint64_t v13 = 0xFFFFFFFFLL;
LABEL_67:
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v54.__r_.__value_.__l.__data_);
  }
  if (v50 < 0) {
    operator delete(v49);
  }
  if (v48 < 0) {
    operator delete(v47[0]);
  }
  if (SHIBYTE(v59) < 0) {
    operator delete((void *)v58);
  }
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v57.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v64) < 0) {
    operator delete((void *)v63);
  }
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v62.__r_.__value_.__l.__data_);
  }
  if ((char)v68 < 0) {
    operator delete(v67[0]);
  }
  return v13;
}

void sub_18E000F88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  sub_18E00C854((uint64_t)&a34);
  sub_18E00C9C4((uint64_t)&a48);
  sub_18E00CA08((uint64_t)&a58);
  if (a71 < 0) {
    operator delete(*(void **)(v71 + 256));
  }
  _Unwind_Resume(a1);
}

uint64_t raven::RavenParameters::ParseAndValidateLowerLimitsOfLowPLOSBins(uint64_t *a1, _OWORD *a2, const char *a3)
{
  if (sub_18E0009E4((uint64_t)a1, (uint64_t)v41, 4, a3) == 4)
  {
    uint64_t v6 = 0;
    while (1)
    {
      double v7 = *(double *)((char *)v41 + v6);
      if (v7 < 0.0)
      {
        sub_18DF06614((uint64_t)&v37);
        size_t v10 = strlen(a3);
        unint64_t v11 = sub_18DEDD538(&v37, (uint64_t)a3, v10);
        sub_18DEDD538(v11, (uint64_t)" - value (", 10);
        __int16 v12 = (void *)std::ostream::operator<<();
        uint64_t v13 = sub_18DEDD538(v12, (uint64_t)") must be greater than or equal to", 34);
        sub_18DEDD538(v13, (uint64_t)"0", 1);
        sub_18DEDD9B8((uint64_t)v38, __p);
        unint64_t v14 = a1[7];
        unint64_t v15 = a1[6];
        if (v15 < v14)
        {
LABEL_17:
          long long v26 = *(_OWORD *)__p;
          *(void *)(v15 + 16) = v36;
          *(_OWORD *)unint64_t v15 = v26;
          a1[6] = v15 + 24;
          goto LABEL_30;
        }
        uint64_t v16 = a1[5];
        unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - v16) >> 3);
        unint64_t v18 = v17 + 1;
        if (v17 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_18DEE1FC8();
        }
        unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - v16) >> 3);
        if (2 * v19 > v18) {
          unint64_t v18 = 2 * v19;
        }
        if (v19 >= 0x555555555555555) {
          unint64_t v20 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v20 = v18;
        }
        uint64_t v43 = a1 + 7;
        if (v20) {
          goto LABEL_25;
        }
        uint64_t v30 = 0;
        goto LABEL_28;
      }
      if (v7 > 1.0) {
        break;
      }
      v6 += 8;
      if (v6 == 32)
      {
        long long v8 = v41[1];
        *a2 = v41[0];
        a2[1] = v8;
        return 1;
      }
    }
    sub_18DF06614((uint64_t)&v37);
    size_t v21 = strlen(a3);
    unint64_t v22 = sub_18DEDD538(&v37, (uint64_t)a3, v21);
    sub_18DEDD538(v22, (uint64_t)" - value (", 10);
    uint64_t v23 = (void *)std::ostream::operator<<();
    uint64_t v24 = sub_18DEDD538(v23, (uint64_t)") must be less than or equal to", 31);
    sub_18DEDD538(v24, (uint64_t)"1", 1);
    sub_18DEDD9B8((uint64_t)v38, __p);
    unint64_t v25 = a1[7];
    unint64_t v15 = a1[6];
    if (v15 < v25) {
      goto LABEL_17;
    }
    uint64_t v27 = a1[5];
    unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - v27) >> 3);
    unint64_t v28 = v17 + 1;
    if (v17 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_18DEE1FC8();
    }
    unint64_t v29 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v25 - v27) >> 3);
    if (2 * v29 > v28) {
      unint64_t v28 = 2 * v29;
    }
    if (v29 >= 0x555555555555555) {
      unint64_t v20 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v20 = v28;
    }
    uint64_t v43 = a1 + 7;
    if (v20)
    {
LABEL_25:
      uint64_t v30 = (char *)sub_18E00C070((uint64_t)(a1 + 7), v20);
      goto LABEL_28;
    }
    uint64_t v30 = 0;
LABEL_28:
    uint64_t v31 = &v30[24 * v17];
    v42[0] = v30;
    v42[1] = v31;
    v42[3] = &v30[24 * v20];
    long long v32 = *(_OWORD *)__p;
    *((void *)v31 + 2) = v36;
    *(_OWORD *)uint64_t v31 = v32;
    __p[1] = 0;
    uint64_t v36 = 0;
    __p[0] = 0;
    v42[2] = v31 + 24;
    sub_18E00BFF8(a1 + 5, v42);
    uint64_t v33 = a1[6];
    sub_18E00C1D8((uint64_t)v42);
    int v34 = SHIBYTE(v36);
    a1[6] = v33;
    if (v34 < 0) {
      operator delete(__p[0]);
    }
LABEL_30:
    uint64_t v37 = *MEMORY[0x1E4FBA418];
    *(void *)((char *)&v38[-1] + *(void *)(v37 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
    v38[0] = MEMORY[0x1E4FBA470] + 16;
    if (v39 < 0) {
      operator delete((void *)v38[8]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x192FA6190](&v40);
  }
  return 0;
}

void sub_18E0014B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  sub_18E00C1D8(v16 - 88);
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_18DF067AC((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t raven::RavenParameters::ParseAndValidateLowPLOSPsrTargetSigmaScaleFactors(uint64_t *a1, _OWORD *a2, const char *a3)
{
  if (sub_18E0009E4((uint64_t)a1, (uint64_t)v40, 4, a3) == 4)
  {
    uint64_t v6 = 0;
    while (1)
    {
      double v7 = *(double *)((char *)v40 + v6);
      if (v7 > 1.0)
      {
        sub_18DF06614((uint64_t)&v36);
        size_t v10 = strlen(a3);
        unint64_t v11 = sub_18DEDD538(&v36, (uint64_t)a3, v10);
        sub_18DEDD538(v11, (uint64_t)" - value (", 10);
        __int16 v12 = (void *)std::ostream::operator<<();
        sub_18DEDD538(v12, (uint64_t)") must be less than or equal to", 31);
        std::ostream::operator<<();
        sub_18DEDD9B8((uint64_t)v37, __p);
        unint64_t v13 = a1[7];
        unint64_t v14 = a1[6];
        if (v14 < v13)
        {
LABEL_17:
          long long v25 = *(_OWORD *)__p;
          *(void *)(v14 + 16) = v35;
          *(_OWORD *)unint64_t v14 = v25;
          a1[6] = v14 + 24;
          goto LABEL_30;
        }
        uint64_t v15 = a1[5];
        unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - v15) >> 3);
        unint64_t v17 = v16 + 1;
        if (v16 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_18DEE1FC8();
        }
        unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - v15) >> 3);
        if (2 * v18 > v17) {
          unint64_t v17 = 2 * v18;
        }
        if (v18 >= 0x555555555555555) {
          unint64_t v19 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v19 = v17;
        }
        uint64_t v42 = a1 + 7;
        if (v19) {
          goto LABEL_25;
        }
        unint64_t v29 = 0;
        goto LABEL_28;
      }
      if (v7 <= 0.0) {
        break;
      }
      v6 += 8;
      if (v6 == 32)
      {
        long long v8 = v40[1];
        *a2 = v40[0];
        a2[1] = v8;
        return 1;
      }
    }
    sub_18DF06614((uint64_t)&v36);
    size_t v20 = strlen(a3);
    size_t v21 = sub_18DEDD538(&v36, (uint64_t)a3, v20);
    sub_18DEDD538(v21, (uint64_t)" - value (", 10);
    unint64_t v22 = (void *)std::ostream::operator<<();
    uint64_t v23 = sub_18DEDD538(v22, (uint64_t)") must be greater than ", 23);
    sub_18DEDD538(v23, (uint64_t)"0", 1);
    sub_18DEDD9B8((uint64_t)v37, __p);
    unint64_t v24 = a1[7];
    unint64_t v14 = a1[6];
    if (v14 < v24) {
      goto LABEL_17;
    }
    uint64_t v26 = a1[5];
    unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - v26) >> 3);
    unint64_t v27 = v16 + 1;
    if (v16 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_18DEE1FC8();
    }
    unint64_t v28 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v24 - v26) >> 3);
    if (2 * v28 > v27) {
      unint64_t v27 = 2 * v28;
    }
    if (v28 >= 0x555555555555555) {
      unint64_t v19 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v19 = v27;
    }
    uint64_t v42 = a1 + 7;
    if (v19)
    {
LABEL_25:
      unint64_t v29 = (char *)sub_18E00C070((uint64_t)(a1 + 7), v19);
      goto LABEL_28;
    }
    unint64_t v29 = 0;
LABEL_28:
    uint64_t v30 = &v29[24 * v16];
    v41[0] = v29;
    v41[1] = v30;
    v41[3] = &v29[24 * v19];
    long long v31 = *(_OWORD *)__p;
    *((void *)v30 + 2) = v35;
    *(_OWORD *)uint64_t v30 = v31;
    __p[1] = 0;
    uint64_t v35 = 0;
    __p[0] = 0;
    _OWORD v41[2] = v30 + 24;
    sub_18E00BFF8(a1 + 5, v41);
    uint64_t v32 = a1[6];
    sub_18E00C1D8((uint64_t)v41);
    int v33 = SHIBYTE(v35);
    a1[6] = v32;
    if (v33 < 0) {
      operator delete(__p[0]);
    }
LABEL_30:
    uint64_t v36 = *MEMORY[0x1E4FBA418];
    *(void *)((char *)&v37[-1] + *(void *)(v36 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
    v37[0] = MEMORY[0x1E4FBA470] + 16;
    if (v38 < 0) {
      operator delete((void *)v37[8]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x192FA6190](&v39);
  }
  return 0;
}

void sub_18E001930(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  sub_18E00C1D8(v16 - 88);
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_18DF067AC((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t raven::RavenParameters::ParseConfigurationFile(raven::RavenParameters *this)
{
  v831[2] = *MEMORY[0x1E4F143B8];
  memset(&v817, 0, sizeof(v817));
  unsigned int v816 = 0;
  char v791 = sub_18E008ACC((uint64_t *)this, (double *)this + 9, "user_typical_device_distance", 0.0);
  char v786 = sub_18E008DDC((uint64_t *)this, (double *)this + 10, "user_typical_height_above_ground", 0.0);
  char v781 = sub_18E008ACC((uint64_t *)this, (double *)this + 15, "frozen_user_eastnorth_velocity_noise_intensity", 0.0);
  char v776 = sub_18E008ACC((uint64_t *)this, (double *)this + 16, "frozen_user_up_velocity_noise_intensity", 0.0);
  char v771 = sub_18E008ACC((uint64_t *)this, (double *)this + 17, "frozen_user_eastnorth_velocity_decorrelation", 0.0);
  char v766 = sub_18E008ACC((uint64_t *)this, (double *)this + 18, "frozen_user_up_velocity_decorrelation", 0.0);
  char v761 = sub_18E008ACC((uint64_t *)this, (double *)this + 19, "moving_user_eastnorth_velocity_noise_intensity", 0.0);
  char v756 = sub_18E008ACC((uint64_t *)this, (double *)this + 20, "moving_user_up_velocity_noise_intensity", 0.0);
  char v751 = sub_18E008ACC((uint64_t *)this, (double *)this + 21, "moving_user_eastnorth_velocity_decorrelation", 0.0);
  char v746 = sub_18E008ACC((uint64_t *)this, (double *)this + 22, "moving_user_up_velocity_decorrelation", 0.0);
  char v741 = sub_18E008ACC((uint64_t *)this, (double *)this + 23, "notmoving_user_eastnorth_velocity_noise_intensity", 0.0);
  char v736 = sub_18E008ACC((uint64_t *)this, (double *)this + 24, "notmoving_user_up_velocity_noise_intensity", 0.0);
  char v731 = sub_18E008ACC((uint64_t *)this, (double *)this + 25, "notmoving_user_eastnorth_velocity_decorrelation", 0.0);
  char v726 = sub_18E008ACC((uint64_t *)this, (double *)this + 26, "notmoving_user_up_velocity_decorrelation", 0.0);
  int v811 = sub_18E008ACC((uint64_t *)this, (double *)this + 27, "default_user_eastnorth_velocity_noise_intensity", 0.0);
  if (v811) {
    *((void *)this + 11) = *((void *)this + 27);
  }
  int v806 = sub_18E008ACC((uint64_t *)this, (double *)this + 28, "default_user_up_velocity_noise_intensity", 0.0);
  if (v806) {
    *((void *)this + 12) = *((void *)this + 28);
  }
  int v801 = sub_18E008ACC((uint64_t *)this, (double *)this + 29, "default_user_eastnorth_velocity_decorrelation", 0.0);
  if (v801) {
    *((void *)this + 13) = *((void *)this + 29);
  }
  int v796 = sub_18E008ACC((uint64_t *)this, (double *)this + 30, "default_user_up_velocity_decorrelation", 0.0);
  if (v796) {
    *((void *)this + 14) = *((void *)this + 30);
  }
  char v720 = sub_18E0090EC((uint64_t *)this, (double *)this + 31, "minimum_moving_state_probability_for_zupt_or_zaru", 0.0, 1.0);
  char v715 = sub_18E008ACC((uint64_t *)this, (double *)this + 32, "frozen_zupt_velocity_noise_var", 0.0);
  char v710 = sub_18E008ACC((uint64_t *)this, (double *)this + 33, "notmoving_zupt_velocity_noise_var", 0.0);
  char v705 = sub_18E008ACC((uint64_t *)this, (double *)this + 34, "minimum_zupt_update_interval", 0.0);
  char v700 = sub_18E008ACC((uint64_t *)this, (double *)this + 35, "minimum_zaru_update_interval", 0.0);
  char v695 = sub_18E008ACC((uint64_t *)this, (double *)this + 36, "zaru_measurement_std_dev_deg", 0.0);
  char v690 = sub_18E008ACC((uint64_t *)this, (double *)this + 37, "nhc_velocity_standard_deviation", 0.0);
  char v685 = sub_18E008ACC((uint64_t *)this, (double *)this + 38, "user_comfortable_acceleration_rms", 0.0);
  char v680 = sub_18E008ACC((uint64_t *)this, (double *)this + 39, "user_comfortable_acceleration_rms_high_acceleration", 0.0);
  char v676 = sub_18E008ACC((uint64_t *)this, (double *)this + 40, "user_comfortable_acceleration_rms_vehicle_fixed", 0.0);
  char v672 = sub_18E008ACC((uint64_t *)this, (double *)this + 41, "user_maximum_comfortable_rotation_rate_rms", 0.0);
  char v668 = sub_18E008ACC((uint64_t *)this, (double *)this + 42, "user_maximum_comfortable_rotation_rate_rms_high_acceleration", 0.0);
  char v664 = sub_18E008ACC((uint64_t *)this, (double *)this + 43, "user_mount_linear_rw_mprs", 0.0);
  char v660 = sub_18E008ACC((uint64_t *)this, (double *)this + 44, "user_mount_angular_rw_rprs", 0.0);
  char v656 = sub_18E008ACC((uint64_t *)this, (double *)this + 45, "user_mount_velocity_rms_mps", 0.0);
  char v652 = sub_18E008ACC((uint64_t *)this, (double *)this + 46, "user_mount_velocity_rms_mpspmps", 0.0);
  char v648 = sub_18E008ACC((uint64_t *)this, (double *)this + 47, "user_mount_velocity_rms_floor_mps", 0.0);
  char v644 = sub_18E008ACC((uint64_t *)this, (double *)this + 48, "user_periodicity_window_duration", 0.0);
  char v2 = sub_18E008ACC((uint64_t *)this, (double *)this + 49, "user_minimum_frequency_of_interest", 0.0);
  char v3 = sub_18E008ACC((uint64_t *)this, (double *)this + 50, "user_maximum_frequency_of_interest", *((double *)this + 50));
  char v4 = sub_18E008ACC((uint64_t *)this, (double *)this + 51, "user_periodicity_fpprobability_window", 0.0);
  char v5 = sub_18E0090EC((uint64_t *)this, (double *)this + 52, "user_periodicity_fpprobability", 0.0, 1.0);
  int v6 = sub_18E009424((uint64_t)this, &v817, "user_periodicity_feature", "Maximum");
  char v7 = sub_18E008DDC((uint64_t *)this, (double *)this + 65, "user_speed_process_noise_multiplier_for_fieldsports_in_pnt", 1.0);
  char v8 = sub_18E008DDC((uint64_t *)this, (double *)this + 66, "user_course_process_noise_multiplier_for_fieldsports_in_pnt", 1.0);
  char v9 = sub_18E008DDC((uint64_t *)this, (double *)this + 63, "user_speed_process_noise_multiplier_for_downhillsnowsports_in_pnt", 1.0);
  char v10 = sub_18E008DDC((uint64_t *)this, (double *)this + 64, "user_course_process_noise_multiplier_for_downhillsnowsports_in_pnt", 1.0);
  char v11 = sub_18E008DDC((uint64_t *)this, (double *)this + 67, "user_process_noise_multiplier_for_fieldsports_in_convergence", 1.0);
  if (!v6)
  {
    char v807 = v796 | v801 | v806 | v811 | v10 | v11 | v791 | v786 | v781 | v776 | v771 | v766 | v761 | v756 | v751 | v746 | v741 | v736 | v731 | v726 | v720 | v715 | v710 | v705 | v700 | v695 | v690 | v685 | v680 | v676 | v672 | v668 | v664 | v660 | v656 | v652 | v648 | v644 | v2 | v3 | v4 | v5 | v7 | v8 | v9;
    goto LABEL_60;
  }
  std::string::size_type size = HIBYTE(v817.__r_.__value_.__r.__words[2]);
  if ((v817.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v817.__r_.__value_.__l.__size_;
  }
  if (size != 7) {
    goto LABEL_31;
  }
  unint64_t v13 = &v817;
  if ((v817.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    unint64_t v13 = (std::string *)v817.__r_.__value_.__r.__words[0];
  }
  BOOL v14 = LODWORD(v13->__r_.__value_.__l.__data_) == 1769496909
     && *(_DWORD *)((char *)v13->__r_.__value_.__r.__words + 3) == 1836412265;
  if (v14
    || (LODWORD(v13->__r_.__value_.__l.__data_) == 1769496941
      ? (BOOL v15 = *(_DWORD *)((char *)v13->__r_.__value_.__r.__words + 3) == 1836412265)
      : (BOOL v15 = 0),
        v15))
  {
    char v807 = 1;
    int v34 = 2;
  }
  else
  {
    if (LODWORD(v13->__r_.__value_.__l.__data_) != 1768843597
      || *(_DWORD *)((char *)v13->__r_.__value_.__r.__words + 3) != 1836412265)
    {
      int data = (int)v13->__r_.__value_.__l.__data_;
      int v18 = *(_DWORD *)((char *)v13->__r_.__value_.__r.__words + 3);
      if (data != 1768843629 || v18 != 1836412265)
      {
LABEL_31:
        size_t v20 = (std::string *)sub_18DEDE7B0(v829, "user_periodicity_feature");
        size_t v21 = std::string::append(v20, " - invalid entry: \"", 0x13uLL);
        long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
        v818.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v818.__r_.__value_.__l.__data_ = v22;
        v21->__r_.__value_.__l.__size_ = 0;
        v21->__r_.__value_.__r.__words[2] = 0;
        v21->__r_.__value_.__r.__words[0] = 0;
        if ((v817.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v23 = &v817;
        }
        else {
          uint64_t v23 = (std::string *)v817.__r_.__value_.__r.__words[0];
        }
        if ((v817.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v24 = HIBYTE(v817.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v24 = v817.__r_.__value_.__l.__size_;
        }
        long long v25 = std::string::append(&v818, (const std::string::value_type *)v23, v24);
        long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
        v826.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v826.__r_.__value_.__l.__data_ = v26;
        v25->__r_.__value_.__l.__size_ = 0;
        v25->__r_.__value_.__r.__words[2] = 0;
        v25->__r_.__value_.__r.__words[0] = 0;
        unint64_t v27 = std::string::append(&v826, "\"", 1uLL);
        std::string::size_type v28 = v27->__r_.__value_.__r.__words[0];
        v831[0] = v27->__r_.__value_.__l.__size_;
        *(void *)((char *)v831 + 7) = *(std::string::size_type *)((char *)&v27->__r_.__value_.__r.__words[1] + 7);
        char v29 = HIBYTE(v27->__r_.__value_.__r.__words[2]);
        v27->__r_.__value_.__l.__size_ = 0;
        v27->__r_.__value_.__r.__words[2] = 0;
        v27->__r_.__value_.__r.__words[0] = 0;
        unint64_t v30 = *((void *)this + 7);
        unint64_t v31 = *((void *)this + 6);
        if (v31 >= v30)
        {
          uint64_t v35 = *((void *)this + 5);
          unint64_t v36 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v31 - v35) >> 3);
          unint64_t v37 = v36 + 1;
          if (v36 + 1 > 0xAAAAAAAAAAAAAAALL) {
            sub_18DEE1FC8();
          }
          unint64_t v38 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v30 - v35) >> 3);
          if (2 * v38 > v37) {
            unint64_t v37 = 2 * v38;
          }
          if (v38 >= 0x555555555555555) {
            unint64_t v39 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v39 = v37;
          }
          *(void *)&long long v821 = (char *)this + 56;
          if (v39) {
            uint64_t v40 = (char *)sub_18E00C070((uint64_t)this + 56, v39);
          }
          else {
            uint64_t v40 = 0;
          }
          char v41 = (std::string::size_type *)&v40[24 * v36];
          __p[0] = v40;
          __p[1] = v41;
          *((void *)&v820 + 1) = &v40[24 * v39];
          std::string::size_type v42 = v831[0];
          std::string::size_type *v41 = v28;
          v41[1] = v42;
          *(std::string::size_type *)((char *)v41 + 15) = *(void *)((char *)v831 + 7);
          *((unsigned char *)v41 + 23) = v29;
          v831[0] = 0;
          *(void *)((char *)v831 + 7) = 0;
          *(void *)&long long v820 = v41 + 3;
          sub_18E00BFF8((uint64_t *)this + 5, __p);
          unint64_t v33 = *((void *)this + 6);
          sub_18E00C1D8((uint64_t)__p);
        }
        else
        {
          uint64_t v32 = v831[0];
          *(void *)unint64_t v31 = v28;
          *(void *)(v31 + 8) = v32;
          *(void *)(v31 + 15) = *(void *)((char *)v831 + 7);
          *(unsigned char *)(v31 + 23) = v29;
          unint64_t v33 = v31 + 24;
          *((void *)this + 6) = v31 + 24;
        }
        *((void *)this + 6) = v33;
        if (SHIBYTE(v826.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v826.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v818.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v818.__r_.__value_.__l.__data_);
        }
        if (v830 < 0) {
          operator delete(*(void **)v829);
        }
        int v34 = 0;
        char v807 = 0;
        goto LABEL_59;
      }
    }
    int v34 = 1;
    char v807 = 1;
  }
LABEL_59:
  *((_DWORD *)this + 106) = v34;
LABEL_60:
  char v802 = sub_18E008ACC((uint64_t *)this, (double *)this + 54, "user_default_speed_rms", 0.0);
  char v797 = sub_18E008ACC((uint64_t *)this, (double *)this + 55, "user_default_walk_speed", 0.0);
  char v792 = sub_18E008ACC((uint64_t *)this, (double *)this + 56, "user_default_run_speed", 0.0);
  char v787 = sub_18E008ACC((uint64_t *)this, (double *)this + 57, "user_default_walk_speed_rms", 0.0);
  char v782 = sub_18E008ACC((uint64_t *)this, (double *)this + 58, "user_default_run_speed_rms", 0.0);
  char v777 = sub_18E008ACC((uint64_t *)this, (double *)this + 59, "user_default_walk_step_frequency", 0.0);
  char v772 = sub_18E008ACC((uint64_t *)this, (double *)this + 60, "user_default_run_step_frequency", 0.0);
  char v767 = sub_18E008ACC((uint64_t *)this, (double *)this + 61, "user_default_walk_step_frequency_rms", 0.0);
  char v762 = sub_18E008ACC((uint64_t *)this, (double *)this + 62, "user_default_run_step_frequency_rms", 0.0);
  LOBYTE(__p[0]) = 0;
  int v812 = sub_18E00DD70((uint64_t)this, (char *)__p, "hardware_supports_L1_L5_frequencies");
  if (v812) {
    *((unsigned char *)this + 641) = __p[0];
  }
  char v757 = sub_18E008ACC((uint64_t *)this, (double *)this + 81, "hardware_accelerometer_sample_period", 0.0);
  char v752 = sub_18E008ACC((uint64_t *)this, (double *)this + 82, "hardware_rategyro_sample_period", 0.0);
  char v747 = sub_18E008ACC((uint64_t *)this, (double *)this + 83, "hardware_accelerometer_bias_decorrelation", 0.0);
  char v742 = sub_18E008ACC((uint64_t *)this, (double *)this + 84, "hardware_rategyro_bias_decorrelation", 0.0);
  char v737 = sub_18E008ACC((uint64_t *)this, (double *)this + 85, "hardware_rategyro_bias_decorrelation_high_acceleration", 0.0);
  char v732 = sub_18E008ACC((uint64_t *)this, (double *)this + 86, "hardware_accelerometer_scale_decorrelation", 0.0);
  char v727 = sub_18E008ACC((uint64_t *)this, (double *)this + 87, "hardware_accelerometer_scale_decorrelation_high_acceleration", 0.0);
  char v721 = sub_18E008ACC((uint64_t *)this, (double *)this + 88, "hardware_sigma_accelerometer_rms", 0.0);
  char v716 = sub_18E008ACC((uint64_t *)this, (double *)this + 89, "hardware_sigma_rategyro_rms", 0.0);
  char v711 = sub_18E008ACC((uint64_t *)this, (double *)this + 90, "hardware_sigma_barometer_rms", 0.0);
  char v706 = sub_18E008ACC((uint64_t *)this, (double *)this + 91, "hardware_sigma_accelerometer_bias_turn_on", 0.0);
  char v701 = sub_18E008ACC((uint64_t *)this, (double *)this + 92, "hardware_sigma_accelerometer_bias", 0.0);
  char v696 = sub_18E008ACC((uint64_t *)this, (double *)this + 93, "hardware_sigma_rategyro_bias_turn_on", 0.0);
  char v691 = sub_18E008ACC((uint64_t *)this, (double *)this + 94, "hardware_sigma_rategyro_bias_turn_on_high_acceleration", 0.0);
  char v686 = sub_18E008ACC((uint64_t *)this, (double *)this + 95, "hardware_sigma_rategyro_bias", 0.0);
  char v681 = sub_18E008ACC((uint64_t *)this, (double *)this + 96, "hardware_sigma_accelerometer_scale_turn_on", 0.0);
  char v43 = sub_18E008ACC((uint64_t *)this, (double *)this + 97, "hardware_sigma_accelerometer_scale_turn_on_high_acceleration", 0.0);
  char v44 = sub_18E008ACC((uint64_t *)this, (double *)this + 98, "hardware_sigma_accelerometer_scale", 0.0);
  char v45 = sub_18E008ACC((uint64_t *)this, (double *)this + 99, "hardware_expected_gnss_rate", 0.0);
  char v46 = sub_18E008ACC((uint64_t *)this, (double *)this + 100, "hardware_xo_adaptive_model_validity_duration", 0.0);
  char v47 = sub_18E008ACC((uint64_t *)this, (double *)this + 101, "hardware_xo_alpha", 0.0);
  char v48 = sub_18E008ACC((uint64_t *)this, (double *)this + 102, "hardware_xo_gamma", 0.0);
  LOBYTE(__p[0]) = 0;
  int v49 = sub_18E00DD70((uint64_t)this, (char *)__p, "enable_local_ionosphere_model_estimation");
  if (v49) {
    *((unsigned char *)this + 2560) = __p[0];
  }
  LOBYTE(__p[0]) = 0;
  int v50 = sub_18E00DD70((uint64_t)this, (char *)__p, "use_local_ionosphere_model_delays");
  if (v50) {
    *((unsigned char *)this + 2561) = __p[0];
  }
  LOBYTE(__p[0]) = 0;
  int v51 = sub_18E00DD70((uint64_t)this, (char *)__p, "use_locally_estimated_dcb_corrections");
  if (v51) {
    *((unsigned char *)this + 2562) = __p[0];
  }
  if (!sub_18E009424((uint64_t)this, &v817, "estimator_state_machine_mode", ""))
  {
    char v58 = v812 | v44 | v45 | v46 | v47 | v48 | v49 | v50 | v51 | v807 | v802 | v797 | v792 | v787 | v782 | v777 | v772 | v767 | v762 | v757 | v752 | v747 | v742 | v737 | v732 | v727 | v721 | v716 | v711 | v706 | v701 | v696 | v691 | v686 | v681 | v43;
LABEL_86:
    char v808 = v58;
    goto LABEL_115;
  }
  std::string::size_type v52 = HIBYTE(v817.__r_.__value_.__r.__words[2]);
  if ((v817.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v52 = v817.__r_.__value_.__l.__size_;
  }
  if (v52 == 8)
  {
    uint64_t v59 = &v817;
    if ((v817.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v59 = (std::string *)v817.__r_.__value_.__r.__words[0];
    }
    if (v59->__r_.__value_.__r.__words[0] == 0x544E506E65766152)
    {
      *((_DWORD *)this + 206) = 2;
LABEL_171:
      char v58 = 1;
      goto LABEL_86;
    }
  }
  else if (v52 == 16)
  {
    char v53 = &v817;
    if ((v817.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      char v53 = (std::string *)v817.__r_.__value_.__r.__words[0];
    }
    if (v53->__r_.__value_.__r.__words[0] != 0x7361506E65766152
      || v53->__r_.__value_.__l.__size_ != 0x6867756F72685473)
    {
      std::string::size_type v56 = v53->__r_.__value_.__r.__words[0];
      std::string::size_type v55 = v53->__r_.__value_.__l.__size_;
      if (v56 == 0x6E6F436E65766152 && v55 == 0x65636E6567726576)
      {
        char v808 = 1;
        *((_DWORD *)this + 206) = 1;
        goto LABEL_115;
      }
      goto LABEL_90;
    }
    *((_DWORD *)this + 206) = 0;
    goto LABEL_171;
  }
LABEL_90:
  uint64_t v60 = (std::string *)sub_18DEDE7B0(v829, "estimator_state_machine_mode");
  char v61 = std::string::append(v60, " - invalid entry: \"", 0x13uLL);
  long long v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
  v818.__r_.__value_.__r.__words[2] = v61->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v818.__r_.__value_.__l.__data_ = v62;
  v61->__r_.__value_.__l.__size_ = 0;
  v61->__r_.__value_.__r.__words[2] = 0;
  v61->__r_.__value_.__r.__words[0] = 0;
  if ((v817.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v63 = &v817;
  }
  else {
    long long v63 = (std::string *)v817.__r_.__value_.__r.__words[0];
  }
  if ((v817.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v64 = HIBYTE(v817.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v64 = v817.__r_.__value_.__l.__size_;
  }
  uint64_t v65 = std::string::append(&v818, (const std::string::value_type *)v63, v64);
  long long v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
  v826.__r_.__value_.__r.__words[2] = v65->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v826.__r_.__value_.__l.__data_ = v66;
  v65->__r_.__value_.__l.__size_ = 0;
  v65->__r_.__value_.__r.__words[2] = 0;
  v65->__r_.__value_.__r.__words[0] = 0;
  uint64_t v67 = std::string::append(&v826, "\"", 1uLL);
  std::string::size_type v68 = v67->__r_.__value_.__r.__words[0];
  v831[0] = v67->__r_.__value_.__l.__size_;
  *(void *)((char *)v831 + 7) = *(std::string::size_type *)((char *)&v67->__r_.__value_.__r.__words[1] + 7);
  char v69 = HIBYTE(v67->__r_.__value_.__r.__words[2]);
  v67->__r_.__value_.__l.__size_ = 0;
  v67->__r_.__value_.__r.__words[2] = 0;
  v67->__r_.__value_.__r.__words[0] = 0;
  unint64_t v70 = *((void *)this + 7);
  unint64_t v71 = *((void *)this + 6);
  if (v71 >= v70)
  {
    uint64_t v74 = *((void *)this + 5);
    unint64_t v75 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v71 - v74) >> 3);
    unint64_t v76 = v75 + 1;
    if (v75 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_18DEE1FC8();
    }
    unint64_t v77 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v70 - v74) >> 3);
    if (2 * v77 > v76) {
      unint64_t v76 = 2 * v77;
    }
    if (v77 >= 0x555555555555555) {
      unint64_t v78 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v78 = v76;
    }
    *(void *)&long long v821 = (char *)this + 56;
    if (v78) {
      unint64_t v79 = (char *)sub_18E00C070((uint64_t)this + 56, v78);
    }
    else {
      unint64_t v79 = 0;
    }
    unsigned int v80 = (std::string::size_type *)&v79[24 * v75];
    __p[0] = v79;
    __p[1] = v80;
    *((void *)&v820 + 1) = &v79[24 * v78];
    std::string::size_type v81 = v831[0];
    std::string::size_type *v80 = v68;
    v80[1] = v81;
    *(std::string::size_type *)((char *)v80 + 15) = *(void *)((char *)v831 + 7);
    *((unsigned char *)v80 + 23) = v69;
    v831[0] = 0;
    *(void *)((char *)v831 + 7) = 0;
    *(void *)&long long v820 = v80 + 3;
    sub_18E00BFF8((uint64_t *)this + 5, __p);
    unint64_t v73 = *((void *)this + 6);
    sub_18E00C1D8((uint64_t)__p);
  }
  else
  {
    uint64_t v72 = v831[0];
    *(void *)unint64_t v71 = v68;
    *(void *)(v71 + 8) = v72;
    *(void *)(v71 + 15) = *(void *)((char *)v831 + 7);
    *(unsigned char *)(v71 + 23) = v69;
    unint64_t v73 = v71 + 24;
    *((void *)this + 6) = v71 + 24;
  }
  *((void *)this + 6) = v73;
  if (SHIBYTE(v826.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v826.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v818.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v818.__r_.__value_.__l.__data_);
  }
  if (v830 < 0) {
    operator delete(*(void **)v829);
  }
  char v808 = 0;
LABEL_115:
  char v803 = sub_18E008DDC((uint64_t *)this, (double *)this + 104, "estimator_time_delay", 0.0);
  char v798 = sub_18E008DDC((uint64_t *)this, (double *)this + 106, "estimator_time_to_use_high_acceleration_model_after_pnt_initialization", 0.0);
  char v793 = sub_18E008DDC((uint64_t *)this, (double *)this + 107, "tolerable_accelerometer_event_age", 0.0);
  char v788 = sub_18E008DDC((uint64_t *)this, (double *)this + 108, "tolerable_rategyro_event_age", 0.0);
  char v783 = sub_18E008ACC((uint64_t *)this, (double *)this + 109, "estimator_processing_duration", 0.0);
  char v778 = sub_18E008ACC((uint64_t *)this, (double *)this + 110, "estimator_processing_duration_backoff", 0.0);
  char v773 = sub_18E008ACC((uint64_t *)this, (double *)this + 111, "estimator_maximum_solution_period", 0.0);
  char v768 = sub_18E008ACC((uint64_t *)this, (double *)this + 112, "estimator_maximum_solution_age_for_reinitialization", 0.0);
  char v763 = sub_18E008ACC((uint64_t *)this, (double *)this + 113, "estimator_maximum_component_dissonance_for_initialization", 0.0);
  char v758 = sub_18E0090EC((uint64_t *)this, (double *)this + 114, "estimator_hypothesis_test_probability_threshold", 0.0, 1.0);
  char v753 = sub_18E008ACC((uint64_t *)this, (double *)this + 115, "estimator_matrix_condition_threshold", 0.0);
  char v748 = sub_18E00954C((uint64_t *)this, (double *)this + 116, "estimator_nonstationary_fpprobability", 0.0, 1.0);
  char v743 = sub_18E00954C((uint64_t *)this, (double *)this + 117, "estimator_nonstationary_fpprobability_aggressive", 0.0, 1.0);
  char v738 = sub_18E008ACC((uint64_t *)this, (double *)this + 118, "estimator_default_pqq", 0.0);
  char v733 = sub_18E008ACC((uint64_t *)this, (double *)this + 119, "estimator_acceleration_stabilization_memory", 0.0);
  char v728 = sub_18E0090EC((uint64_t *)this, (double *)this + 154, "estimator_acceleration_direction_of_travel_energy_fraction_threshold", 0.0, 1.0);
  char v722 = sub_18E008ACC((uint64_t *)this, (double *)this + 155, "estimator_acceleration_direction_of_travel_sigma", 0.0);
  char v717 = sub_18E008ACC((uint64_t *)this, (double *)this + 120, "estimator_maximum_rotation_integration_stepsize", 0.0);
  char v712 = sub_18E008ACC((uint64_t *)this, (double *)this + 121, "estimator_maximum_applicable_acceleration_age", 0.0);
  char v707 = sub_18E008ACC((uint64_t *)this, (double *)this + 122, "estimator_maximum_applicable_rotation_age", 0.0);
  char v702 = sub_18E009920((uint64_t *)this, (unsigned int *)this + 246, "estimator_acceleration_buffer_depth", 0);
  char v697 = sub_18E008ACC((uint64_t *)this, (double *)this + 124, "estimator_attitude_determination_minimum_mean_acceleration_for_pca", 0.0);
  char v692 = sub_18E008DDC((uint64_t *)this, (double *)this + 125, "estimator_attitude_determination_minimum_stddev_acceleration_for_pca", 0.0);
  char v687 = sub_18E00954C((uint64_t *)this, (double *)this + 126, "estimator_attitude_determination_minimum_energy_fraction_for_pca", 0.0, 1.0);
  char v682 = sub_18E00954C((uint64_t *)this, (double *)this + 127, "estimator_attitude_determination_probability_gnss_speeds_are_different_when_driving", 0.0, 1.0);
  char v677 = sub_18E008ACC((uint64_t *)this, (double *)this + 128, "device_motion_attitude_period_sec", 0.0);
  uint64_t v82 = &v817;
  int v813 = sub_18E009884((uint64_t)this, &v817, "device_motion_minimum_mag_calibration_level");
  if ((v817.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v83 = (std::string *)((char *)&v817 + HIBYTE(v817.__r_.__value_.__r.__words[2]));
  }
  else {
    unint64_t v83 = (std::string *)(v817.__r_.__value_.__r.__words[0] + v817.__r_.__value_.__l.__size_);
  }
  if ((v817.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v82 = (std::string *)v817.__r_.__value_.__r.__words[0];
  }
  while (v82 != v83)
  {
    v82->__r_.__value_.__s.__data_[0] = __tolower(v82->__r_.__value_.__s.__data_[0]);
    uint64_t v82 = (std::string *)((char *)v82 + 1);
  }
  if (v813)
  {
    std::string::size_type v84 = HIBYTE(v817.__r_.__value_.__r.__words[2]);
    if ((v817.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v84 = v817.__r_.__value_.__l.__size_;
    }
    switch(v84)
    {
      case 2uLL:
        uint64_t v85 = &v817;
        if ((v817.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          uint64_t v85 = (std::string *)v817.__r_.__value_.__r.__words[0];
        }
        if (LOWORD(v85->__r_.__value_.__l.__data_) != 25651) {
          goto LABEL_153;
        }
        int v86 = 4;
        goto LABEL_182;
      case 6uLL:
        unint64_t v88 = &v817;
        if ((v817.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          unint64_t v88 = (std::string *)v817.__r_.__value_.__r.__words[0];
        }
        if (LODWORD(v88->__r_.__value_.__l.__data_) == 1702323250 && WORD2(v88->__r_.__value_.__r.__words[0]) == 27489)
        {
          int v86 = 1;
          goto LABEL_182;
        }
        int v90 = (int)v88->__r_.__value_.__l.__data_;
        int v91 = WORD2(v88->__r_.__value_.__r.__words[0]);
        if (v90 == 1702323251 && v91 == 27489)
        {
          int v86 = 3;
          goto LABEL_182;
        }
        goto LABEL_153;
      case 8uLL:
        uint64_t v87 = &v817;
        if ((v817.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          uint64_t v87 = (std::string *)v817.__r_.__value_.__r.__words[0];
        }
        if (v87->__r_.__value_.__r.__words[0] == 0x676E6F7274736432)
        {
          int v86 = 2;
          goto LABEL_182;
        }
        if (v87->__r_.__value_.__r.__words[0] == 0x676E6F7274736433)
        {
          int v86 = 5;
LABEL_182:
          *((_DWORD *)this + 258) = v86;
          break;
        }
LABEL_153:
        *((_DWORD *)this + 258) = -1;
        uint64_t v97 = (std::string *)sub_18DEDE7B0(v829, "device_motion_minimum_mag_calibration_level");
        uint64_t v98 = std::string::append(v97, " - invalid entry: \"", 0x13uLL);
        long long v99 = *(_OWORD *)&v98->__r_.__value_.__l.__data_;
        v818.__r_.__value_.__r.__words[2] = v98->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v818.__r_.__value_.__l.__data_ = v99;
        v98->__r_.__value_.__l.__size_ = 0;
        v98->__r_.__value_.__r.__words[2] = 0;
        v98->__r_.__value_.__r.__words[0] = 0;
        if ((v817.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unsigned __int8 v100 = &v817;
        }
        else {
          unsigned __int8 v100 = (std::string *)v817.__r_.__value_.__r.__words[0];
        }
        if ((v817.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v101 = HIBYTE(v817.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v101 = v817.__r_.__value_.__l.__size_;
        }
        uint64_t v102 = std::string::append(&v818, (const std::string::value_type *)v100, v101);
        long long v103 = *(_OWORD *)&v102->__r_.__value_.__l.__data_;
        v826.__r_.__value_.__r.__words[2] = v102->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v826.__r_.__value_.__l.__data_ = v103;
        v102->__r_.__value_.__l.__size_ = 0;
        v102->__r_.__value_.__r.__words[2] = 0;
        v102->__r_.__value_.__r.__words[0] = 0;
        uint64_t v104 = std::string::append(&v826, "\"", 1uLL);
        std::string::size_type v105 = v104->__r_.__value_.__r.__words[0];
        v831[0] = v104->__r_.__value_.__l.__size_;
        *(void *)((char *)v831 + 7) = *(std::string::size_type *)((char *)&v104->__r_.__value_.__r.__words[1] + 7);
        char v106 = HIBYTE(v104->__r_.__value_.__r.__words[2]);
        v104->__r_.__value_.__l.__size_ = 0;
        v104->__r_.__value_.__r.__words[2] = 0;
        v104->__r_.__value_.__r.__words[0] = 0;
        unint64_t v107 = *((void *)this + 7);
        unint64_t v108 = *((void *)this + 6);
        if (v108 >= v107)
        {
          uint64_t v111 = *((void *)this + 5);
          unint64_t v112 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v108 - v111) >> 3);
          unint64_t v113 = v112 + 1;
          if (v112 + 1 > 0xAAAAAAAAAAAAAAALL) {
            sub_18DEE1FC8();
          }
          unint64_t v114 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v107 - v111) >> 3);
          if (2 * v114 > v113) {
            unint64_t v113 = 2 * v114;
          }
          if (v114 >= 0x555555555555555) {
            unint64_t v115 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v115 = v113;
          }
          *(void *)&long long v821 = (char *)this + 56;
          if (v115) {
            uint64_t v116 = (char *)sub_18E00C070((uint64_t)this + 56, v115);
          }
          else {
            uint64_t v116 = 0;
          }
          uint64_t v117 = (std::string::size_type *)&v116[24 * v112];
          __p[0] = v116;
          __p[1] = v117;
          *((void *)&v820 + 1) = &v116[24 * v115];
          std::string::size_type v118 = v831[0];
          std::string::size_type *v117 = v105;
          v117[1] = v118;
          *(std::string::size_type *)((char *)v117 + 15) = *(void *)((char *)v831 + 7);
          *((unsigned char *)v117 + 23) = v106;
          v831[0] = 0;
          *(void *)((char *)v831 + 7) = 0;
          *(void *)&long long v820 = v117 + 3;
          sub_18E00BFF8((uint64_t *)this + 5, __p);
          unint64_t v110 = *((void *)this + 6);
          sub_18E00C1D8((uint64_t)__p);
        }
        else
        {
          uint64_t v109 = v831[0];
          *(void *)unint64_t v108 = v105;
          *(void *)(v108 + 8) = v109;
          *(void *)(v108 + 15) = *(void *)((char *)v831 + 7);
          *(unsigned char *)(v108 + 23) = v106;
          unint64_t v110 = v108 + 24;
          *((void *)this + 6) = v108 + 24;
        }
        *((void *)this + 6) = v110;
        if (SHIBYTE(v826.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v826.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v818.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v818.__r_.__value_.__l.__data_);
        }
        if (v830 < 0) {
          operator delete(*(void **)v829);
        }
        break;
      case 0xAuLL:
        uint64_t v93 = &v817;
        if ((v817.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          uint64_t v93 = (std::string *)v817.__r_.__value_.__r.__words[0];
        }
        std::string::size_type v94 = v93->__r_.__value_.__r.__words[0];
        int v95 = LOWORD(v93->__r_.__value_.__r.__words[1]);
        if (v94 != 0x6261696C65726E75 || v95 != 25964) {
          goto LABEL_153;
        }
        *((_DWORD *)this + 258) = 0;
        break;
      default:
        goto LABEL_153;
    }
  }
  char v673 = sub_18E008ACC((uint64_t *)this, (double *)this + 131, "estimator_attitude_determination_maneuver_analysis_duration", 0.0);
  char v669 = sub_18E008ACC((uint64_t *)this, (double *)this + 132, "estimator_attitude_determination_minimum_gnss_delta_speed", 1.0);
  char v665 = sub_18E008ACC((uint64_t *)this, (double *)this + 133, "estimator_attitude_determination_minimum_linear_acceleration", 0.0);
  char v661 = sub_18E008ACC((uint64_t *)this, (double *)this + 134, "estimator_attitude_determination_minimum_rotation_rate", 0.0);
  char v657 = sub_18E008ACC((uint64_t *)this, (double *)this + 135, "estimator_attitude_determination_minimum_speed", 0.0);
  char v653 = sub_18E008ACC((uint64_t *)this, (double *)this + 136, "estimator_attitude_event_raise_minimum_interval", 0.0);
  char v649 = sub_18E008ACC((uint64_t *)this, (double *)this + 130, "estimator_attitude_linear_acceleration_checking_interval", 0.0);
  char v645 = sub_18E008ACC((uint64_t *)this, (double *)this + 142, "estimator_attitude_rotation_checking_interval", 0.0);
  char v641 = sub_18E008ACC((uint64_t *)this, (double *)this + 143, "estimator_attitude_sensor_downsample_duration", 0.01);
  char v638 = sub_18E008ACC((uint64_t *)this, (double *)this + 144, "estimator_attitude_stationary_checking_interval", 0.0);
  char v635 = sub_18E008ACC((uint64_t *)this, (double *)this + 137, "estimator_attitude_linear_movement_gyro_mean_threshold", 0.0);
  char v632 = sub_18E008ACC((uint64_t *)this, (double *)this + 138, "estimator_attitude_linear_movement_gyro_variance_threshold", 0.0);
  char v629 = sub_18E008ACC((uint64_t *)this, (double *)this + 139, "estimator_attitude_determination_dual_direction_smoothing_cutoff_frequency", 0.0);
  char v626 = sub_18E008ACC((uint64_t *)this, (double *)this + 140, "estimator_attitude_determination_turn_maneuver_duration", 0.0);
  char v623 = sub_18E008ACC((uint64_t *)this, (double *)this + 141, "estimator_attitude_determination_minimum_gnss_interval_for_turn_direction", 0.0);
  char v620 = sub_18E008ACC((uint64_t *)this, (double *)this + 145, "estimator_attitude_determination_vehicle_tilt_uncertainty", 0.0);
  char v617 = sub_18E008ACC((uint64_t *)this, (double *)this + 146, "estimator_attitude_determination_mount_wobbling_arw_noise", 0.0);
  char v614 = sub_18E008ACC((uint64_t *)this, (double *)this + 147, "estimator_attitude_determination_max_velocity_direction_error", 0.0);
  char v611 = sub_18E008ACC((uint64_t *)this, (double *)this + 148, "estimator_attitude_determination_innovation_range_ratio", 0.0);
  char v119 = sub_18E009920((uint64_t *)this, (unsigned int *)this + 298, "estimator_attitude_determination_max_number_out_range_reset_filter", 2u);
  char v120 = sub_18E008ACC((uint64_t *)this, (double *)this + 150, "estimator_gravity_sigma", 0.0);
  char v121 = sub_18E008ACC((uint64_t *)this, (double *)this + 151, "estimator_velocity_sigma", 0.0);
  char v122 = sub_18E008ACC((uint64_t *)this, (double *)this + 152, "estimator_acceleration_stabilization_frequency", 0.0);
  char v123 = sub_18E008ACC((uint64_t *)this, (double *)this + 153, "estimator_acceleration_stabilization_sigma", 0.0);
  char v124 = sub_18E008ACC((uint64_t *)this, (double *)this + 156, "estimator_maximum_fullstatedynamics_integration_stepsize", 0.0);
  char v125 = sub_18E008ACC((uint64_t *)this, (double *)this + 159, "estimator_initial_velocity_sigma", 0.0);
  char v126 = sub_18E008ACC((uint64_t *)this, (double *)this + 157, "estimator_initial_clockbias_sigma", 0.0);
  char v127 = sub_18E008ACC((uint64_t *)this, (double *)this + 158, "estimator_initial_clockdrift_sigma", 0.0);
  double v128 = fmax(ceil((*((double *)this + 156) + *((double *)this + 156)) / *((double *)this + 81)), 1.0);
  if (sub_18E009920((uint64_t *)this, &v816, "estimator_accelerometer_preprocessor_kernel_halfwidth", 0))
  {
    if (v816 <= v128)
    {
      *((_DWORD *)this + 320) = v816;
      char v133 = 1;
    }
    else
    {
      sub_18DF06614((uint64_t)__p);
      sub_18DEDD538(__p, (uint64_t)"estimator_accelerometer_preprocessor_kernel_halfwidth - exceeds max value (", 75);
      uint64_t v129 = (void *)std::ostream::operator<<();
      sub_18DEDD538(v129, (uint64_t)")", 1);
      sub_18DEDD9B8((uint64_t)&__p[1], &v818);
      unint64_t v130 = *((void *)this + 7);
      unint64_t v131 = *((void *)this + 6);
      if (v131 >= v130)
      {
        uint64_t v134 = *((void *)this + 5);
        unint64_t v135 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v131 - v134) >> 3);
        unint64_t v136 = v135 + 1;
        if (v135 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_18DEE1FC8();
        }
        unint64_t v137 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v130 - v134) >> 3);
        if (2 * v137 > v136) {
          unint64_t v136 = 2 * v137;
        }
        if (v137 >= 0x555555555555555) {
          unint64_t v138 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v138 = v136;
        }
        v828 = (char *)this + 56;
        if (v138) {
          double v139 = (char *)sub_18E00C070((uint64_t)this + 56, v138);
        }
        else {
          double v139 = 0;
        }
        std::string::size_type v140 = (std::string::size_type)&v139[24 * v135];
        v826.__r_.__value_.__r.__words[0] = (std::string::size_type)v139;
        v826.__r_.__value_.__l.__size_ = v140;
        v827 = &v139[24 * v138];
        long long v141 = *(_OWORD *)&v818.__r_.__value_.__l.__data_;
        *(void *)(v140 + 16) = *((void *)&v818.__r_.__value_.__l + 2);
        *(_OWORD *)std::string::size_type v140 = v141;
        memset(&v818, 0, sizeof(v818));
        v826.__r_.__value_.__r.__words[2] = v140 + 24;
        sub_18E00BFF8((uint64_t *)this + 5, &v826);
        uint64_t v142 = *((void *)this + 6);
        sub_18E00C1D8((uint64_t)&v826);
        int v143 = SHIBYTE(v818.__r_.__value_.__r.__words[2]);
        *((void *)this + 6) = v142;
        if (v143 < 0) {
          operator delete(v818.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        long long v132 = *(_OWORD *)&v818.__r_.__value_.__l.__data_;
        *(void *)(v131 + 16) = *((void *)&v818.__r_.__value_.__l + 2);
        *(_OWORD *)unint64_t v131 = v132;
        *((void *)this + 6) = v131 + 24;
      }
      __p[0] = *(void **)MEMORY[0x1E4FBA418];
      *(void **)((char *)__p + *((void *)__p[0] - 3)) = *(void **)(MEMORY[0x1E4FBA418] + 24);
      __p[1] = (void *)(MEMORY[0x1E4FBA470] + 16);
      if (v824 < 0) {
        operator delete(*((void **)&v823 + 1));
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x192FA6190](v825);
      char v133 = 0;
    }
  }
  else
  {
    char v133 = v813 | v123 | v124 | v125 | v126 | v127 | v808 | v803 | v798 | v793 | v788 | v783 | v778 | v773 | v768 | v763 | v758 | v753 | v748 | v743 | v738 | v733 | v728 | v722 | v717 | v712 | v707 | v702 | v697 | v692 | v687 | v682 | v677 | v673 | v669 | v665 | v661 | v657 | v653 | v649 | v645 | v641 | v638 | v635 | v632 | v629 | v626 | v623 | v620 | v617 | v614 | v611 | v119 | v120 | v121 | v122;
  }
  char v144 = sub_18E008ACC((uint64_t *)this, (double *)this + 161, "estimator_accelerometer_preprocessor_kernel_halfwidth_sigma", 0.0);
  double v145 = fmax(ceil((*((double *)this + 156) + *((double *)this + 156)) / *((double *)this + 82)), 1.0);
  if (sub_18E009920((uint64_t *)this, &v816, "estimator_rategyro_preprocessor_kernel_halfwidth", 0))
  {
    if (v816 <= v145)
    {
      *((_DWORD *)this + 324) = v816;
      char v150 = 1;
    }
    else
    {
      sub_18DF06614((uint64_t)__p);
      sub_18DEDD538(__p, (uint64_t)"estimator_rategyro_preprocessor_kernel_halfwidth - exceeds max value (", 70);
      double v146 = (void *)std::ostream::operator<<();
      sub_18DEDD538(v146, (uint64_t)")", 1);
      sub_18DEDD9B8((uint64_t)&__p[1], &v818);
      unint64_t v147 = *((void *)this + 7);
      unint64_t v148 = *((void *)this + 6);
      if (v148 >= v147)
      {
        uint64_t v151 = *((void *)this + 5);
        unint64_t v152 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v148 - v151) >> 3);
        unint64_t v153 = v152 + 1;
        if (v152 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_18DEE1FC8();
        }
        unint64_t v154 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v147 - v151) >> 3);
        if (2 * v154 > v153) {
          unint64_t v153 = 2 * v154;
        }
        if (v154 >= 0x555555555555555) {
          unint64_t v155 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v155 = v153;
        }
        v828 = (char *)this + 56;
        if (v155) {
          double v156 = (char *)sub_18E00C070((uint64_t)this + 56, v155);
        }
        else {
          double v156 = 0;
        }
        std::string::size_type v157 = (std::string::size_type)&v156[24 * v152];
        v826.__r_.__value_.__r.__words[0] = (std::string::size_type)v156;
        v826.__r_.__value_.__l.__size_ = v157;
        v827 = &v156[24 * v155];
        long long v158 = *(_OWORD *)&v818.__r_.__value_.__l.__data_;
        *(void *)(v157 + 16) = *((void *)&v818.__r_.__value_.__l + 2);
        *(_OWORD *)std::string::size_type v157 = v158;
        memset(&v818, 0, sizeof(v818));
        v826.__r_.__value_.__r.__words[2] = v157 + 24;
        sub_18E00BFF8((uint64_t *)this + 5, &v826);
        uint64_t v159 = *((void *)this + 6);
        sub_18E00C1D8((uint64_t)&v826);
        int v160 = SHIBYTE(v818.__r_.__value_.__r.__words[2]);
        *((void *)this + 6) = v159;
        if (v160 < 0) {
          operator delete(v818.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        long long v149 = *(_OWORD *)&v818.__r_.__value_.__l.__data_;
        *(void *)(v148 + 16) = *((void *)&v818.__r_.__value_.__l + 2);
        *(_OWORD *)unint64_t v148 = v149;
        *((void *)this + 6) = v148 + 24;
      }
      __p[0] = *(void **)MEMORY[0x1E4FBA418];
      *(void **)((char *)__p + *((void *)__p[0] - 3)) = *(void **)(MEMORY[0x1E4FBA418] + 24);
      __p[1] = (void *)(MEMORY[0x1E4FBA470] + 16);
      if (v824 < 0) {
        operator delete(*((void **)&v823 + 1));
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x192FA6190](v825);
      char v150 = 0;
    }
  }
  else
  {
    char v150 = v133 | v144;
  }
  char v161 = sub_18E008ACC((uint64_t *)this, (double *)this + 163, "estimator_rategyro_preprocessor_kernel_halfwidth_sigma", 0.0);
  char v658 = sub_18E009920((uint64_t *)this, (unsigned int *)this + 328, "estimator_barometer_preprocessor_kernel_halfwidth", 0);
  char v654 = sub_18E008ACC((uint64_t *)this, (double *)this + 165, "estimator_barometer_preprocessor_kernel_halfwidth_sigma", 0.0);
  char v162 = sub_18E008ACC((uint64_t *)this, (double *)this + 166, "estimator_barometer_maximum_applicable_pressure_age", 0.0);
  char v163 = sub_18E008ACC((uint64_t *)this, (double *)this + 167, "delta_altitude_longest_gap_allowed_for_determination", 0.0);
  char v650 = sub_18E008ACC((uint64_t *)this, (double *)this + 168, "delta_altitude_shortest_gap_allowed_for_determination", 0.0);
  char v646 = sub_18E008ACC((uint64_t *)this, (double *)this + 169, "delta_altitude_eligible_noise_level_for_determination", 0.0);
  char v642 = sub_18E008ACC((uint64_t *)this, (double *)this + 170, "estimator_sanity_maximum_user_device_distance", 0.0);
  char v639 = sub_18E008ACC((uint64_t *)this, (double *)this + 171, "estimator_sanity_maximum_user_device_distance_vehicle_fixed", 0.0);
  char v636 = sub_18E008ACC((uint64_t *)this, (double *)this + 172, "estimator_sanity_maximum_speed", 0.0);
  char v633 = sub_18E008ACC((uint64_t *)this, (double *)this + 173, "estimator_sanity_maximum_acceleration", 0.0);
  char v630 = sub_18E008ACC((uint64_t *)this, (double *)this + 174, "estimator_sanity_maximum_accelerometer_bias_multiplier", 0.0);
  char v627 = sub_18E008ACC((uint64_t *)this, (double *)this + 175, "estimator_sanity_maximum_accelerometer_scale_multiplier", 0.0);
  char v624 = sub_18E008ACC((uint64_t *)this, (double *)this + 176, "estimator_sanity_maximum_rategyro_bias_multiplier", 0.0);
  char v621 = sub_18E008ACC((uint64_t *)this, (double *)this + 177, "estimator_sanity_minimum_historical_solution_age", 0.0);
  char v618 = sub_18E008ACC((uint64_t *)this, (double *)this + 178, "estimator_er_attitude_unc_inflation", 1.0);
  char v615 = sub_18E008ACC((uint64_t *)this, (double *)this + 179, "estimator_er_ins_unc_inflation", 1.0);
  char v612 = sub_18E008ACC((uint64_t *)this, (double *)this + 180, "estimator_er_position_unc_inflation", 1.0);
  char v609 = sub_18E008ACC((uint64_t *)this, (double *)this + 181, "estimator_er_velocity_unc_inflation", 1.0);
  char v607 = sub_18E008ACC((uint64_t *)this, (double *)this + 182, "estimator_er_xo_unc_inflation", 1.0);
  char v605 = sub_18E0090EC((uint64_t *)this, (double *)this + 183, "failuredetector_minimum_probability_for_failure", 0.0, 1.0);
  char v603 = sub_18E009920((uint64_t *)this, (unsigned int *)this + 368, "batch_size_for_failuredetector_probability_update", 0);
  char v601 = sub_18E008ACC((uint64_t *)this, (double *)this + 185, "failuredetector_transition_time", 0.0);
  char v599 = sub_18E0090EC((uint64_t *)this, (double *)this + 186, "failuredetector_probability_stillfailed", 0.0, 1.0);
  char v597 = sub_18E0090EC((uint64_t *)this, (double *)this + 187, "failuredetector_probability_stillgood", 0.0, 1.0);
  char v595 = sub_18E008ACC((uint64_t *)this, (double *)this + 188, "failuredetector_maxsigma", 0.0);
  char v593 = sub_18E00954C((uint64_t *)this, (double *)this + 189, "failuredetector_minor_error_recovery_threshold", 0.0, 1.0);
  char v591 = sub_18E00954C((uint64_t *)this, (double *)this + 190, "failuredetector_major_error_recovery_threshold", 0.0, 1.0);
  char v589 = sub_18E008ACC((uint64_t *)this, (double *)this + 191, "failuredetector_minor_error_recovery_std_dev_inflation_factor", 0.0);
  char v587 = sub_18E008ACC((uint64_t *)this, (double *)this + 192, "failuredetector_major_error_recovery_std_dev_inflation_factor", 0.0);
  char v585 = sub_18E00954C((uint64_t *)this, (double *)this + 193, "integrity_estimator_allowable_fraction_of_sensor_cache_for_back_propagation", 0.0, 1.0);
  char v583 = sub_18E008ACC((uint64_t *)this, (double *)this + 194, "integrity_estimator_direction_of_travel_difference_from_convergence_tolerance_deg", 0.0);
  char v581 = sub_18E008ACC((uint64_t *)this, (double *)this + 195, "integrity_estimator_direction_of_travel_difference_from_passthrough_tolerance_deg", 0.0);
  char v579 = sub_18E008ACC((uint64_t *)this, (double *)this + 196, "integrity_estimator_gnss_max_non_adr_signal_dwell_time_sec", 0.0);
  char v577 = sub_18E008ACC((uint64_t *)this, (double *)this + 197, "integrity_estimator_minimum_estimator_age_to_issue_recovery_event", 0.0);
  char v575 = sub_18E0090EC((uint64_t *)this, (double *)this + 198, "integrity_estimator_normalized_difference_probability_threshold", 0.0, 1.0);
  char v573 = sub_18E008ACC((uint64_t *)this, (double *)this + 199, "integrity_estimator_position_difference_from_convergence_tolerance_m", 0.0);
  char v571 = sub_18E008ACC((uint64_t *)this, (double *)this + 200, "integrity_estimator_position_difference_from_passthrough_tolerance_m", 0.0);
  char v569 = sub_18E008ACC((uint64_t *)this, (double *)this + 201, "integrity_estimator_speed_difference_from_convergence_tolerance_mps", 0.0);
  char v567 = sub_18E008ACC((uint64_t *)this, (double *)this + 202, "integrity_estimator_speed_difference_from_passthrough_tolerance_mps", 0.0);
  char v565 = sub_18E008ACC((uint64_t *)this, (double *)this + 203, "integrity_estimator_time_difference_from_solution_to_check_against_tolerance", 0.0);
  char v563 = sub_18E008ACC((uint64_t *)this, (double *)this + 204, "integrity_estimator_time_difference_from_current_time_tolerance", 0.0);
  char v561 = sub_18E008ACC((uint64_t *)this, (double *)this + 205, "innovation_test_target_sigma_count_for_reweighted_gnss_measurements", 0.0);
  char v559 = sub_18E008ACC((uint64_t *)this, (double *)this + 206, "innovation_test_minimum_reweighted_pseudorange_innovation_m_to_ignore_doppler", 0.0);
  int v164 = sub_18E0009E4((uint64_t)this, (uint64_t)__p, 4, "innovation_test_gnss_pseudorange_sigma_thresholds_default");
  if (v164 == 4)
  {
    long long v165 = v820;
    *(_OWORD *)((char *)this + 1656) = *(_OWORD *)__p;
    *(_OWORD *)((char *)this + 1672) = v165;
  }
  *(void *)v829 = 0;
  if (sub_18E00DBEC((uint64_t)this, v829, "low_plos_doppler_target_sigma_count_scale_factor"))
  {
    if ((*(void *)v829 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || *(double *)v829 <= 0.0
      || *(double *)v829 > 1.0)
    {
      sub_18DF06614((uint64_t)__p);
      uint64_t v166 = sub_18DEDD538(__p, (uint64_t)"low_plos_doppler_target_sigma_count_scale_factor", 48);
      sub_18DEDD538(v166, (uint64_t)" - value (", 10);
      v167 = (void *)std::ostream::operator<<();
      sub_18DEDD538(v167, (uint64_t)") must be greater than ", 23);
      v168 = (void *)std::ostream::operator<<();
      sub_18DEDD538(v168, (uint64_t)" and less than or equal to", 26);
      std::ostream::operator<<();
      sub_18DEDD9B8((uint64_t)&__p[1], &v818);
      int v169 = v164;
      unint64_t v170 = *((void *)this + 7);
      unint64_t v171 = *((void *)this + 6);
      if (v171 >= v170)
      {
        uint64_t v173 = *((void *)this + 5);
        unint64_t v174 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v171 - v173) >> 3);
        unint64_t v175 = v174 + 1;
        if (v174 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_18DEE1FC8();
        }
        unint64_t v176 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v170 - v173) >> 3);
        if (2 * v176 > v175) {
          unint64_t v175 = 2 * v176;
        }
        if (v176 >= 0x555555555555555) {
          unint64_t v177 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v177 = v175;
        }
        v828 = (char *)this + 56;
        if (v177) {
          v178 = (char *)sub_18E00C070((uint64_t)this + 56, v177);
        }
        else {
          v178 = 0;
        }
        std::string::size_type v179 = (std::string::size_type)&v178[24 * v174];
        v826.__r_.__value_.__r.__words[0] = (std::string::size_type)v178;
        v826.__r_.__value_.__l.__size_ = v179;
        v827 = &v178[24 * v177];
        long long v180 = *(_OWORD *)&v818.__r_.__value_.__l.__data_;
        *(void *)(v179 + 16) = *((void *)&v818.__r_.__value_.__l + 2);
        *(_OWORD *)std::string::size_type v179 = v180;
        memset(&v818, 0, sizeof(v818));
        v826.__r_.__value_.__r.__words[2] = v179 + 24;
        sub_18E00BFF8((uint64_t *)this + 5, &v826);
        uint64_t v181 = *((void *)this + 6);
        sub_18E00C1D8((uint64_t)&v826);
        int v182 = SHIBYTE(v818.__r_.__value_.__r.__words[2]);
        *((void *)this + 6) = v181;
        if (v182 < 0) {
          operator delete(v818.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        long long v172 = *(_OWORD *)&v818.__r_.__value_.__l.__data_;
        *(void *)(v171 + 16) = *((void *)&v818.__r_.__value_.__l + 2);
        *(_OWORD *)unint64_t v171 = v172;
        *((void *)this + 6) = v171 + 24;
      }
      __p[0] = *(void **)MEMORY[0x1E4FBA418];
      *(void **)((char *)__p + *((void *)__p[0] - 3)) = *(void **)(MEMORY[0x1E4FBA418] + 24);
      __p[1] = (void *)(MEMORY[0x1E4FBA470] + 16);
      if (v824 < 0) {
        operator delete(*((void **)&v823 + 1));
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x192FA6190](v825);
      char v557 = 0;
      int v164 = v169;
    }
    else
    {
      *((void *)this + 294) = *(void *)v829;
      char v557 = 1;
    }
  }
  else
  {
    char v557 = 0;
  }
  LOBYTE(__p[0]) = 0;
  int v718 = sub_18E00DD70((uint64_t)this, (char *)__p, "low_plos_enable_gnss_measurements");
  if (v718) {
    *((unsigned char *)this + 2392) = __p[0];
  }
  LOBYTE(__p[0]) = 0;
  int v713 = sub_18E00DD70((uint64_t)this, (char *)__p, "low_plos_enable_doppler_measurements");
  if (v713) {
    *((unsigned char *)this + 2393) = __p[0];
  }
  LOBYTE(__p[0]) = 0;
  int v708 = sub_18E00DD70((uint64_t)this, (char *)__p, "low_plos_enable_psr_measurements");
  if (v708) {
    *((unsigned char *)this + 2394) = __p[0];
  }
  char v555 = raven::RavenParameters::ParseAndValidateLowerLimitsOfLowPLOSBins((uint64_t *)this, (raven::RavenParameters *)((char *)this + 2360), "low_plos_lower_limits_of_low_plos_bins");
  char v553 = raven::RavenParameters::ParseAndValidateLowPLOSPsrTargetSigmaScaleFactors((uint64_t *)this, (_OWORD *)this + 150, "low_plos_psr_target_sigma_scale_factors");
  char v551 = sub_18E008DDC((uint64_t *)this, (double *)this + 304, "low_plos_maximum_doppler_innovation_magnitude_for_usage_mps", 0.0);
  char v549 = sub_18E008DDC((uint64_t *)this, (double *)this + 305, "low_plos_maximum_psr_innovation_magnitude_for_usage_m", 0.0);
  char v548 = sub_18E008DDC((uint64_t *)this, (double *)this + 306, "low_plos_minimum_median_of_high_plos_unsigned_psr_innovations_for_usage_m", 0.0);
  char v547 = sub_18E008DDC((uint64_t *)this, (double *)this + 308, "low_plos_minimum_std_psr_m", 0.0);
  char v546 = sub_18E008DDC((uint64_t *)this, (double *)this + 307, "low_plos_minimum_std_doppler_mps", 0.0);
  char v545 = sub_18E00954C((uint64_t *)this, (double *)this + 309, "low_plos_minimum_satellite_elevation_for_usage_deg", 0.0, 90.0);
  int v814 = sub_18E0009E4((uint64_t)this, (uint64_t)__p, 4, "innovation_test_gnss_doppler_sigma_thresholds_default");
  if (v814 == 4)
  {
    long long v183 = v820;
    *(_OWORD *)((char *)this + 1688) = *(_OWORD *)__p;
    *(_OWORD *)((char *)this + 1704) = v183;
  }
  int v809 = sub_18E0009E4((uint64_t)this, (uint64_t)__p, 4, "innovation_test_gnss_pseudorange_sigma_thresholds_benign_driving");
  if (v809 == 4)
  {
    long long v184 = v820;
    *(_OWORD *)((char *)this + 1720) = *(_OWORD *)__p;
    *(_OWORD *)((char *)this + 1736) = v184;
  }
  int v804 = sub_18E0009E4((uint64_t)this, (uint64_t)__p, 4, "innovation_test_gnss_doppler_sigma_thresholds_benign_driving");
  if (v804 == 4)
  {
    long long v185 = v820;
    *(_OWORD *)((char *)this + 1752) = *(_OWORD *)__p;
    *(_OWORD *)((char *)this + 1768) = v185;
  }
  int v799 = sub_18E0009E4((uint64_t)this, (uint64_t)__p, 4, "innovation_test_gnss_pseudorange_sigma_thresholds_benign_periodic_motion");
  if (v799 == 4)
  {
    long long v186 = v820;
    *(_OWORD *)((char *)this + 1784) = *(_OWORD *)__p;
    *(_OWORD *)((char *)this + 1800) = v186;
  }
  int v794 = sub_18E0009E4((uint64_t)this, (uint64_t)__p, 4, "innovation_test_gnss_doppler_sigma_thresholds_benign_periodic_motion");
  if (v794 == 4)
  {
    long long v187 = v820;
    *(_OWORD *)((char *)this + 1816) = *(_OWORD *)__p;
    *(_OWORD *)((char *)this + 1832) = v187;
  }
  int v789 = sub_18E0009E4((uint64_t)this, (uint64_t)__p, 4, "innovation_test_gnss_pseudorange_sigma_thresholds_dense_urban_driving");
  if (v789 == 4)
  {
    long long v188 = v820;
    *(_OWORD *)((char *)this + 1848) = *(_OWORD *)__p;
    *(_OWORD *)((char *)this + 1864) = v188;
  }
  int v784 = sub_18E0009E4((uint64_t)this, (uint64_t)__p, 4, "innovation_test_gnss_doppler_sigma_thresholds_dense_urban_driving");
  if (v784 == 4)
  {
    long long v189 = v820;
    *(_OWORD *)((char *)this + 1880) = *(_OWORD *)__p;
    *(_OWORD *)((char *)this + 1896) = v189;
  }
  int v779 = sub_18E0009E4((uint64_t)this, (uint64_t)__p, 4, "innovation_test_gnss_pseudorange_sigma_thresholds_dense_urban_periodic_motion");
  if (v779 == 4)
  {
    long long v190 = v820;
    *(_OWORD *)((char *)this + 1912) = *(_OWORD *)__p;
    *(_OWORD *)((char *)this + 1928) = v190;
  }
  int v774 = sub_18E0009E4((uint64_t)this, (uint64_t)__p, 4, "innovation_test_gnss_doppler_sigma_thresholds_dense_urban_periodic_motion");
  if (v774 == 4)
  {
    long long v191 = v820;
    *(_OWORD *)((char *)this + 1944) = *(_OWORD *)__p;
    *(_OWORD *)((char *)this + 1960) = v191;
  }
  int v769 = sub_18E0009E4((uint64_t)this, (uint64_t)__p, 4, "innovation_test_gnss_pseudorange_sigma_thresholds_foliage_driving");
  if (v769 == 4)
  {
    long long v192 = v820;
    *(_OWORD *)((char *)this + 1976) = *(_OWORD *)__p;
    *(_OWORD *)((char *)this + 1992) = v192;
  }
  int v764 = sub_18E0009E4((uint64_t)this, (uint64_t)__p, 4, "innovation_test_gnss_doppler_sigma_thresholds_foliage_driving");
  if (v764 == 4)
  {
    long long v193 = v820;
    *(_OWORD *)((char *)this + 2008) = *(_OWORD *)__p;
    *(_OWORD *)((char *)this + 2024) = v193;
  }
  int v759 = sub_18E0009E4((uint64_t)this, (uint64_t)__p, 4, "innovation_test_gnss_pseudorange_sigma_thresholds_foliage_periodic_motion");
  if (v759 == 4)
  {
    long long v194 = v820;
    *(_OWORD *)((char *)this + 2040) = *(_OWORD *)__p;
    *(_OWORD *)((char *)this + 2056) = v194;
  }
  int v754 = sub_18E0009E4((uint64_t)this, (uint64_t)__p, 4, "innovation_test_gnss_doppler_sigma_thresholds_foliage_periodic_motion");
  if (v754 == 4)
  {
    long long v195 = v820;
    *(_OWORD *)((char *)this + 2072) = *(_OWORD *)__p;
    *(_OWORD *)((char *)this + 2088) = v195;
  }
  LOBYTE(__p[0]) = 0;
  int v703 = sub_18E00DD70((uint64_t)this, (char *)__p, "innovation_test_gnss_reassess_reweighted_measurements_after_other_measurements");
  if (v703) {
    *((unsigned char *)this + 2104) = __p[0];
  }
  char v544 = sub_18E008ACC((uint64_t *)this, (double *)this + 264, "innovation_gnss_l1_vs_l5_difference_outlier_threshold_pseudorange_m", 0.0);
  char v543 = sub_18E008ACC((uint64_t *)this, (double *)this + 265, "innovation_gnss_l1_vs_l5_difference_outlier_threshold_doppler_mps", 0.0);
  char v542 = sub_18E00954C((uint64_t *)this, (double *)this + 266, "innovation_gnss_l1_vs_l5_difference_inlier_threshold_fraction", 0.0, 1.0);
  char v541 = sub_18E008ACC((uint64_t *)this, (double *)this + 267, "innovation_test_position_measurements_sigma_reweight_threshold", 0.0);
  char v540 = sub_18E008ACC((uint64_t *)this, (double *)this + 268, "innovation_test_position_measurements_sigma_reject_threshold", 0.0);
  char v539 = sub_18E00954C((uint64_t *)this, (double *)this + 269, "position_measurement_horizontal_dof_test_probability_threshold", 0.0, 1.0);
  char v538 = sub_18E008ACC((uint64_t *)this, (double *)this + 270, "innovation_test_target_sigma_value_for_reweighted_horizontal_position_measurements", 0.0);
  char v537 = sub_18E008ACC((uint64_t *)this, (double *)this + 271, "innovation_test_target_sigma_value_for_reweighted_vertical_position_measurements", 0.0);
  char v536 = sub_18E008DDC((uint64_t *)this, (double *)this + 272, "l1_or_l5_measurement_ignore_if_unc_worse_by_factor_default", 1.0);
  char v535 = sub_18E008DDC((uint64_t *)this, (double *)this + 273, "l1_or_l5_measurement_ignore_if_unc_worse_by_factor_periodic_motion", 1.0);
  LOBYTE(__p[0]) = 0;
  int v698 = sub_18E00DD70((uint64_t)this, (char *)__p, "los_estimator_enable_use_of_cn0_evidence");
  if (v698) {
    *((unsigned char *)this + 2192) = __p[0];
  }
  LOBYTE(__p[0]) = 0;
  int v693 = sub_18E00DD70((uint64_t)this, (char *)__p, "los_estimator_enable_use_of_mpf_evidence");
  if (v693) {
    *((unsigned char *)this + 2193) = __p[0];
  }
  char v534 = sub_18E008ACC((uint64_t *)this, (double *)this + 275, "los_estimator_maximum_age_before_deletion_sec", 0.0);
  char v533 = sub_18E009D74((uint64_t *)this, (float *)this + 552, "los_estimator_minimum_cn0_dbhz_to_allow_L5_band_multipath_indicator_evidence");
  char v532 = sub_18E008ACC((uint64_t *)this, (double *)this + 277, "los_estimator_maximum_duration_since_wifi_cross_check_to_use_other_evidence_sec", 0.0);
  char v531 = sub_18E008ACC((uint64_t *)this, (double *)this + 278, "los_estimator_maximum_distance_to_apply_gnss_wifi_crosschecks_m", 0.0);
  char v530 = sub_18E008DDC((uint64_t *)this, (double *)this + 279, "los_estimator_minimum_expected_nlos_path_delay_m", 0.0);
  char v529 = sub_18E00954C((uint64_t *)this, (double *)this + 280, "los_estimator_minimum_probability_los_for_high_plos_satellite", 0.0, 1.0);
  char v528 = sub_18E008ACC((uint64_t *)this, (double *)this + 281, "los_estimator_time_interval_for_transition_probabilities_sec", 0.0);
  char v527 = sub_18E00954C((uint64_t *)this, (double *)this + 282, "los_estimator_transition_probability_los_given_los", 0.0, 1.0);
  char v526 = sub_18E00954C((uint64_t *)this, (double *)this + 283, "los_estimator_transition_probability_nlos_given_nlos", 0.0, 1.0);
  char v525 = sub_18E00954C((uint64_t *)this, (double *)this + 284, "los_estimator_reliability_minimum_best_probability_los", 0.0, 1.0);
  char v524 = sub_18E00A08C((uint64_t *)this, (_DWORD *)this + 570, "los_estimator_reliability_minimum_satellites_to_accept");
  char v523 = sub_18E008DDC((uint64_t *)this, (double *)this + 286, "los_estimator_maximum_duration_to_apply_gnss_wifi_crosschecks_non_pedestrian_sec", 0.0);
  char v522 = sub_18E008DDC((uint64_t *)this, (double *)this + 287, "los_estimator_maximum_duration_to_apply_gnss_wifi_crosschecks_pedestrian_sec", 0.0);
  char v521 = sub_18E00954C((uint64_t *)this, (double *)this + 310, "position_context_estimator_initial_probability_indoor", 0.0, 1.0);
  char v520 = sub_18E00954C((uint64_t *)this, (double *)this + 311, "position_context_estimator_initial_probability_outdoor", 0.0, 1.0);
  char v519 = sub_18E00954C((uint64_t *)this, (double *)this + 312, "position_context_estimator_transition_probability_indoor_given_indoor", 0.0, 1.0);
  char v518 = sub_18E00954C((uint64_t *)this, (double *)this + 313, "position_context_estimator_transition_probability_outdoor_given_outdoor", 0.0, 1.0);
  char v517 = sub_18E008ACC((uint64_t *)this, (double *)this + 314, "estimator_sigma_tolerance", 0.0);
  char v516 = sub_18E008ACC((uint64_t *)this, (double *)this + 315, "estimator_information_dither", 0.0);
  char v515 = sub_18E008ACC((uint64_t *)this, (double *)this + 316, "estimator_map_vector_number_of_cross_track_position_standard_deviations_in_road_width", 0.0);
  char v514 = sub_18E008ACC((uint64_t *)this, (double *)this + 317, "estimator_map_vector_cross_track_velocity_uncertainty", 0.0);
  char v513 = sub_18E008ACC((uint64_t *)this, (double *)this + 321, "ionosphere_estimator_processing_duration", 0.0);
  int v749 = sub_18E0009E4((uint64_t)this, (uint64_t)__p, 10, "ionosphere_estimator_initial_states_vec");
  if (v749 == 10)
  {
    long long v196 = v822;
    *((_OWORD *)this + 163) = v821;
    *((_OWORD *)this + 164) = v196;
    *((_OWORD *)this + 165) = v823;
    long long v197 = v820;
    *((_OWORD *)this + 161) = *(_OWORD *)__p;
    *((_OWORD *)this + 162) = v197;
  }
  int v744 = sub_18E0009E4((uint64_t)this, (uint64_t)__p, 10, "ionosphere_estimator_initial_state_sigmas_vec");
  if (v744 == 10)
  {
    long long v198 = v822;
    *((_OWORD *)this + 168) = v821;
    *((_OWORD *)this + 169) = v198;
    *((_OWORD *)this + 170) = v823;
    long long v199 = v820;
    *((_OWORD *)this + 166) = *(_OWORD *)__p;
    *((_OWORD *)this + 167) = v199;
  }
  LOBYTE(__p[0]) = 0;
  int v688 = sub_18E00DD70((uint64_t)this, (char *)__p, "ionosphere_estimator_constrain_initial_b1_b2a_state_sigma");
  if (v688) {
    *((unsigned char *)this + 2736) = __p[0];
  }
  int v739 = sub_18E0009E4((uint64_t)this, (uint64_t)__p, 10, "ionosphere_estimator_sigma_ss_vec");
  if (v739 == 10)
  {
    long long v200 = v822;
    *(_OWORD *)((char *)this + 2776) = v821;
    *(_OWORD *)((char *)this + 2792) = v200;
    *(_OWORD *)((char *)this + 2808) = v823;
    long long v201 = v820;
    *(_OWORD *)((char *)this + 2744) = *(_OWORD *)__p;
    *(_OWORD *)((char *)this + 2760) = v201;
  }
  int v734 = sub_18E0009E4((uint64_t)this, (uint64_t)__p, 10, "ionosphere_estimator_tau_vec");
  if (v734 == 10)
  {
    long long v202 = v822;
    *(_OWORD *)((char *)this + 2856) = v821;
    *(_OWORD *)((char *)this + 2872) = v202;
    *(_OWORD *)((char *)this + 2888) = v823;
    long long v203 = v820;
    *(_OWORD *)((char *)this + 2824) = *(_OWORD *)__p;
    *(_OWORD *)((char *)this + 2840) = v203;
  }
  int v729 = sub_18E0009E4((uint64_t)this, (uint64_t)__p, 10, "ionosphere_estimator_mean_reverting_constant_vec");
  if (v729 == 10)
  {
    long long v204 = v822;
    *(_OWORD *)((char *)this + 2936) = v821;
    *(_OWORD *)((char *)this + 2952) = v204;
    *(_OWORD *)((char *)this + 2968) = v823;
    long long v205 = v820;
    *(_OWORD *)((char *)this + 2904) = *(_OWORD *)__p;
    *(_OWORD *)((char *)this + 2920) = v205;
  }
  int v723 = sub_18E0009E4((uint64_t)this, (uint64_t)__p, 10, "ionosphere_estimator_state_convergence_threshold_sigmas_vec");
  if (v723 == 10)
  {
    long long v206 = v822;
    *(_OWORD *)((char *)this + 3016) = v821;
    *(_OWORD *)((char *)this + 3032) = v206;
    *(_OWORD *)((char *)this + 3048) = v823;
    long long v207 = v820;
    *(_OWORD *)((char *)this + 2984) = *(_OWORD *)__p;
    *(_OWORD *)((char *)this + 3000) = v207;
  }
  char v512 = sub_18E00954C((uint64_t *)this, (double *)this + 383, "ionosphere_estimator_failuredetector_minimum_probability_for_failure", 0.0, 1.0);
  char v511 = sub_18E008ACC((uint64_t *)this, (double *)this + 384, "ionosphere_estimator_failuredetector_transition_time", 0.0);
  char v510 = sub_18E00954C((uint64_t *)this, (double *)this + 385, "ionosphere_estimator_failuredetector_probability_stillfailed", 0.0, 1.0);
  char v509 = sub_18E00954C((uint64_t *)this, (double *)this + 386, "ionosphere_estimator_failuredetector_probability_stillgood", 0.0, 1.0);
  char v508 = sub_18E008ACC((uint64_t *)this, (double *)this + 387, "ionosphere_estimator_failuredetector_maxsigma", 0.0);
  char v507 = sub_18E00954C((uint64_t *)this, (double *)this + 388, "ionosphere_estimator_satellite_elevation_mask_deg", -10.0, 90.0);
  char v506 = sub_18E008DDC((uint64_t *)this, (double *)this + 389, "ionosphere_estimator_thin_shell_minimum_height", 0.0);
  char v505 = sub_18E008DDC((uint64_t *)this, (double *)this + 390, "ionosphere_estimator_thin_shell_maximum_height", 0.0);
  char v504 = sub_18E00954C((uint64_t *)this, (double *)this + 391, "minimum_satellite_elevation_to_use_local_ionosphere_model_deg", -10.0, 90.0);
  char v503 = sub_18E008DDC((uint64_t *)this, (double *)this + 392, "minimum_time_between_ionosphere_estimator_parameter_updates_s", 0.0);
  char v502 = sub_18E008ACC((uint64_t *)this, (double *)this + 393, "map_vector_event_expiration_age", 0.0);
  char v501 = sub_18E008ACC((uint64_t *)this, (double *)this + 394, "map_vector_event_raise_minimum_interval", 0.0);
  char v500 = sub_18E008ACC((uint64_t *)this, (double *)this + 395, "map_vector_event_device_rotation_threshold", 0.0);
  char v499 = sub_18E008ACC((uint64_t *)this, (double *)this + 396, "signal_environment_minimum_event_raise_interval", 0.0);
  char v498 = sub_18E008DDC((uint64_t *)this, (double *)this + 401, "turn_state_detector_minimum_threshold_to_trigger_turning_high_confidence_dps", 0.0);
  char v497 = sub_18E008DDC((uint64_t *)this, (double *)this + 402, "turn_state_detector_maximum_threshold_to_trigger_not_turning_low_confidence_dps", 0.0);
  char v496 = sub_18E008DDC((uint64_t *)this, (double *)this + 403, "turn_state_detector_maximum_threshold_to_trigger_not_turning_high_confidence_dps", 0.0);
  char v495 = sub_18E008ACC((uint64_t *)this, (double *)this + 404, "turn_state_detector_rotation_rate_buffer_interval_sec", 0.0);
  char v494 = sub_18E008ACC((uint64_t *)this, (double *)this + 405, "estimator_delta_heading_rate_constraint_not_turning_with_low_confidence_dps", 0.0);
  char v493 = sub_18E008ACC((uint64_t *)this, (double *)this + 406, "estimator_delta_heading_rate_constraint_not_turning_with_high_confidence_dps", 0.0);
  char v492 = sub_18E008ACC((uint64_t *)this, (double *)this + 407, "estimator_delta_heading_rate_constraint_turning_with_low_confidence_dps", 0.0);
  char v491 = sub_18E008ACC((uint64_t *)this, (double *)this + 408, "estimator_delta_heading_rate_constraint_turning_with_high_confidence_dps", 0.0);
  char v490 = sub_18E008DDC((uint64_t *)this, (double *)this + 409, "estimator_turn_state_based_delta_heading_rate_constraint_speed_threshold", 0.0);
  char v489 = sub_18E008ACC((uint64_t *)this, (double *)this + 410, "user_speed_assistance_uncertainty_multiplier", 0.01);
  char v488 = sub_18E008ACC((uint64_t *)this, (double *)this + 411, "user_speed_assistance_max_dot_covariance_trace", 0.0);
  char v487 = sub_18E008ACC((uint64_t *)this, (double *)this + 412, "user_speed_assistance_max_dot_covariance_trace_dense_urban", 0.0);
  char v486 = sub_18E008ACC((uint64_t *)this, (double *)this + 413, "solution_selector_backoff_from_raven_solution_maximum_prediction_duration_for_oldest_solution", 0.0);
  char v485 = sub_18E008ACC((uint64_t *)this, (double *)this + 414, "solution_selector_max_duration_since_gnss_to_yield_convergence", 0.0);
  char v484 = sub_18E008ACC((uint64_t *)this, (double *)this + 415, "solution_selector_max_duration_since_gnss_to_yield_pnt", 0.0);
  char v483 = sub_18E008ACC((uint64_t *)this, (double *)this + 416, "solution_selector_max_estimator_pos_unc_to_yield_nonpassthrough", 0.0);
  char v482 = sub_18E008ACC((uint64_t *)this, (double *)this + 417, "solution_selector_min_estimator_age_to_yield_nonpassthrough", 0.0);
  char v481 = sub_18E0090EC((uint64_t *)this, (double *)this + 418, "solution_selector_min_estimator_probability_valid_to_yield_nonpassthrough", 0.0, 1.0);
  LOBYTE(__p[0]) = 0;
  int v683 = sub_18E00DD70((uint64_t)this, (char *)__p, "solution_selector_delay_raven_estimators_following_gnss_content_starvation");
  if (v683) {
    *((unsigned char *)this + 3352) = __p[0];
  }
  char v480 = sub_18E008ACC((uint64_t *)this, (double *)this + 428, "minimum_estimated_position_sigma_non_DU_SE_m", 0.0);
  char v479 = sub_18E008ACC((uint64_t *)this, (double *)this + 432, "minimum_estimated_velocity_sigma_non_DU_SE_mps", 0.0);
  char v478 = sub_18E008ACC((uint64_t *)this, (double *)this + 430, "minimum_estimated_dot_sigma_non_DU_SE_deg", 0.0);
  char v477 = sub_18E008ACC((uint64_t *)this, (double *)this + 429, "minimum_estimated_position_sigma_DU_SE_m", 0.0);
  char v476 = sub_18E008ACC((uint64_t *)this, (double *)this + 433, "minimum_estimated_velocity_sigma_DU_SE_mps", 0.0);
  char v475 = sub_18E008ACC((uint64_t *)this, (double *)this + 431, "minimum_estimated_dot_sigma_DU_SE_deg", 0.0);
  char v474 = sub_18E008DDC((uint64_t *)this, (double *)this + 424, "minimum_estimated_position_sigma_increment_due_to_low_accepted_psr_count_m", 0.0);
  char v473 = sub_18E008DDC((uint64_t *)this, (double *)this + 425, "minimum_estimated_position_sigma_increment_due_to_low_psr_accept_minus_reject_count_m", 0.0);
  char v472 = sub_18E008DDC((uint64_t *)this, (double *)this + 426, "minimum_estimated_position_sigma_increment_due_to_high_psr_reject_to_accept_ratio_m", 0.0);
  char v471 = sub_18E008DDC((uint64_t *)this, (double *)this + 427, "minimum_estimated_position_sigma_increment_due_to_high_psr_reweight_to_accept_ratio_m", 0.0);
  char v470 = sub_18E008DDC((uint64_t *)this, (double *)this + 420, "maximum_estimator_age_for_aggressive_indoor_context_sec", 0.0);
  char v469 = sub_18E008DDC((uint64_t *)this, (double *)this + 421, "maximum_reject_to_accept_ratio_for_minimum_estimated_position_sigma_increment", 0.0);
  char v468 = sub_18E008DDC((uint64_t *)this, (double *)this + 422, "maximum_reweight_to_accept_ratio_for_minimum_estimated_position_sigma_increment", 0.0);
  char v467 = sub_18E00A08C((uint64_t *)this, (_DWORD *)this + 846, "maximum_psr_accept_minus_reject_count_for_position_sigma_increment");
  char v466 = sub_18E00A08C((uint64_t *)this, (_DWORD *)this + 847, "maximum_acceptable_psr_count_for_position_sigma_increment");
  char v465 = sub_18E008DDC((uint64_t *)this, (double *)this + 434, "raven_solution_maximum_prediction_duration", 0.0);
  char v464 = sub_18E008ACC((uint64_t *)this, (double *)this + 435, "wifi_2d_minimum_altitude_assistance_uncertainty_m", 0.0);
  char v463 = sub_18E008DDC((uint64_t *)this, (double *)this + 436, "wifi_2d_maximum_age_of_altitude_assistance_to_use_sec", 0.0);
  LOBYTE(__p[0]) = 0;
  int v678 = sub_18E00DD70((uint64_t)this, (char *)__p, "enable_gnss_ray_tracing");
  if (v678) {
    *((unsigned char *)this + 3496) = __p[0];
  }
  char v462 = sub_18E008ACC((uint64_t *)this, (double *)this + 438, "gnss_ray_tracing_building_data_query_radius_m", 0.0);
  char v461 = sub_18E008DDC((uint64_t *)this, (double *)this + 439, "gnss_ray_tracing_distance_beyond_query_radius_to_keep_tiles_m", 0.0);
  LOBYTE(__p[0]) = 0;
  int v674 = sub_18E00DD70((uint64_t)this, (char *)__p, "gnss_ray_tracing_limited_to_dense_urban_areas");
  if (v674) {
    *((unsigned char *)this + 3520) = __p[0];
  }
  LOBYTE(__p[0]) = 0;
  int v670 = sub_18E00DD70((uint64_t)this, (char *)__p, "gnss_ray_tracing_limited_to_pedestrian_activities");
  if (v670) {
    *((unsigned char *)this + 3521) = __p[0];
  }
  char v460 = sub_18E008ACC((uint64_t *)this, (double *)this + 442, "gnss_ray_tracing_max_allowable_matrix_condition_number", 0.0);
  *(void *)v829 = 0;
  if (sub_18E00E9A0((uint64_t)this, (uint64_t *)v829, "gnss_ray_tracing_max_reflections"))
  {
    if (*(void *)v829 < 6uLL)
    {
      *((void *)this + 443) = *(void *)v829;
      char v459 = 1;
    }
    else
    {
      sub_18DF06614((uint64_t)__p);
      v208 = sub_18DEDD538(__p, (uint64_t)"gnss_ray_tracing_max_reflections", 32);
      sub_18DEDD538(v208, (uint64_t)" - value (", 10);
      v209 = (void *)std::ostream::operator<<();
      sub_18DEDD538(v209, (uint64_t)") must be greater or equal to ", 30);
      v210 = (void *)std::ostream::operator<<();
      sub_18DEDD538(v210, (uint64_t)" and less or equal to ", 22);
      std::ostream::operator<<();
      sub_18DEDD9B8((uint64_t)&__p[1], &v818);
      int v211 = v164;
      unint64_t v212 = *((void *)this + 7);
      unint64_t v213 = *((void *)this + 6);
      if (v213 >= v212)
      {
        uint64_t v215 = *((void *)this + 5);
        unint64_t v216 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v213 - v215) >> 3);
        unint64_t v217 = v216 + 1;
        if (v216 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_18DEE1FC8();
        }
        unint64_t v218 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v212 - v215) >> 3);
        if (2 * v218 > v217) {
          unint64_t v217 = 2 * v218;
        }
        if (v218 >= 0x555555555555555) {
          unint64_t v219 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v219 = v217;
        }
        v828 = (char *)this + 56;
        if (v219) {
          v220 = (char *)sub_18E00C070((uint64_t)this + 56, v219);
        }
        else {
          v220 = 0;
        }
        std::string::size_type v221 = (std::string::size_type)&v220[24 * v216];
        v826.__r_.__value_.__r.__words[0] = (std::string::size_type)v220;
        v826.__r_.__value_.__l.__size_ = v221;
        v827 = &v220[24 * v219];
        long long v222 = *(_OWORD *)&v818.__r_.__value_.__l.__data_;
        *(void *)(v221 + 16) = *((void *)&v818.__r_.__value_.__l + 2);
        *(_OWORD *)std::string::size_type v221 = v222;
        memset(&v818, 0, sizeof(v818));
        v826.__r_.__value_.__r.__words[2] = v221 + 24;
        sub_18E00BFF8((uint64_t *)this + 5, &v826);
        uint64_t v223 = *((void *)this + 6);
        sub_18E00C1D8((uint64_t)&v826);
        int v224 = SHIBYTE(v818.__r_.__value_.__r.__words[2]);
        *((void *)this + 6) = v223;
        if (v224 < 0) {
          operator delete(v818.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        long long v214 = *(_OWORD *)&v818.__r_.__value_.__l.__data_;
        *(void *)(v213 + 16) = *((void *)&v818.__r_.__value_.__l + 2);
        *(_OWORD *)unint64_t v213 = v214;
        *((void *)this + 6) = v213 + 24;
      }
      __p[0] = *(void **)MEMORY[0x1E4FBA418];
      *(void **)((char *)__p + *((void *)__p[0] - 3)) = *(void **)(MEMORY[0x1E4FBA418] + 24);
      __p[1] = (void *)(MEMORY[0x1E4FBA470] + 16);
      if (v824 < 0) {
        operator delete(*((void **)&v823 + 1));
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x192FA6190](v825);
      char v459 = 0;
      int v164 = v211;
    }
  }
  else
  {
    char v459 = 0;
  }
  char v458 = sub_18E008ACC((uint64_t *)this, (double *)this + 441, "gnss_ray_tracing_max_allowable_distance_of_facet_from_point_m", 0.0);
  LOBYTE(__p[0]) = 0;
  int v225 = sub_18E00DD70((uint64_t)this, (char *)__p, "gnss_ray_tracing_stop_candidate_path_search_if_los_path_exists");
  if (v225) {
    *((unsigned char *)this + 3552) = __p[0];
  }
  char v457 = sub_18E00954C((uint64_t *)this, (double *)this + 445, "gnss_ray_tracing_azimuth_resolution_for_approximate_signal_path_search_deg", 0.0, 180.0);
  char v456 = sub_18E008ACC((uint64_t *)this, (double *)this + 446, "gnss_ray_tracing_max_reflection_point_shift_for_refined_path_convergence_m", 0.0);
  char v455 = sub_18E009920((uint64_t *)this, (unsigned int *)this + 894, "gnss_ray_tracing_max_iterations_to_converge_refined_path", 0);
  LOBYTE(__p[0]) = 0;
  int v666 = sub_18E00DD70((uint64_t)this, (char *)__p, "gnss_ray_tracing_fix_user_height_to_typical_height_above_ground");
  if (v666) {
    *((unsigned char *)this + 3580) = __p[0];
  }
  char v454 = sub_18E008DDC((uint64_t *)this, (double *)this + 448, "gnss_ray_tracing_min_radius_for_candidate_point_search_m", 0.0);
  char v453 = sub_18E008DDC((uint64_t *)this, (double *)this + 449, "gnss_ray_tracing_error_ellipse_scale_factor_for_candidate_point_search", 1.0);
  char v452 = sub_18E008ACC((uint64_t *)this, (double *)this + 450, "gnss_ray_tracing_candidate_point_search_step_m", 0.0);
  __p[0] = 0;
  int v662 = sub_18E00E9A0((uint64_t)this, (uint64_t *)__p, "gnss_ray_tracing_max_candidate_points_to_allow_ray_tracing");
  if (v662) {
    *((void **)this + 451) = __p[0];
  }
  char v451 = sub_18E00954C((uint64_t *)this, (double *)this + 452, "gnss_ray_tracing_max_probability_line_of_sight", 0.0, 1.0);
  char v450 = sub_18E00954C((uint64_t *)this, (double *)this + 453, "gnss_ray_tracing_max_satellite_elevation_deg", 0.0, 90.0);
  char v449 = sub_18E00954C((uint64_t *)this, (double *)this + 454, "gnss_ray_tracing_min_occurrence_rate_of_most_common_sequence", 0.0, 1.0);
  __p[0] = 0;
  int v226 = sub_18E00E9A0((uint64_t)this, (uint64_t *)__p, "gnss_ray_tracing_max_satellites_to_trace_per_epoch");
  if (v226) {
    *((void **)this + 455) = __p[0];
  }
  LOBYTE(__p[0]) = 0;
  int v227 = sub_18E00DD70((uint64_t)this, (char *)__p, "gnss_ray_tracing_ignore_tile_data");
  if (v227) {
    *((unsigned char *)this + 3648) = __p[0];
  }
  char v448 = sub_18E008ACC((uint64_t *)this, (double *)this + 397, "vio_estimate_sample_period", 0.0);
  char v447 = sub_18E0090EC((uint64_t *)this, (double *)this + 398, "raven_vio_delta_measurement_sample_period", *((double *)this + 397), 6.0);
  char v446 = sub_18E00954C((uint64_t *)this, (double *)this + 399, "raven_vl_confidence_minimum_threshold", 0.0, 1.0);
  char v228 = sub_18E008ACC((uint64_t *)this, (double *)this + 400, "raven_vl_position_uncertainty_scale_factor", 0.0);
  BOOL v724 = v723 == 10;
  BOOL v229 = v164 == 4;
  if (sub_18E009884((uint64_t)this, &v817, "gravity_model_type"))
  {
    std::string::size_type v230 = HIBYTE(v817.__r_.__value_.__r.__words[2]);
    if ((v817.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v230 = v817.__r_.__value_.__l.__size_;
    }
    if (v230 != 5) {
      goto LABEL_351;
    }
    v231 = &v817;
    if ((v817.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      v231 = (std::string *)v817.__r_.__value_.__r.__words[0];
    }
    BOOL v232 = LODWORD(v231->__r_.__value_.__l.__data_) == 961365829 && v231->__r_.__value_.__s.__data_[4] == 54;
    if (v232
      || ((int v233 = (int)v231->__r_.__value_.__l.__data_,
           int v234 = v231->__r_.__value_.__s.__data_[4],
           v233 == 963471205)
        ? (BOOL v235 = v234 == 54)
        : (BOOL v235 = 0),
          v235))
    {
      *((_DWORD *)this + 913) = 0;
      char v251 = 1;
    }
    else
    {
LABEL_351:
      v236 = (std::string *)sub_18DEDE7B0(v829, "gravity_model_type");
      v237 = std::string::append(v236, " - invalid entry: \"", 0x13uLL);
      long long v238 = *(_OWORD *)&v237->__r_.__value_.__l.__data_;
      v818.__r_.__value_.__r.__words[2] = v237->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v818.__r_.__value_.__l.__data_ = v238;
      v237->__r_.__value_.__l.__size_ = 0;
      v237->__r_.__value_.__r.__words[2] = 0;
      v237->__r_.__value_.__r.__words[0] = 0;
      if ((v817.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v239 = &v817;
      }
      else {
        v239 = (std::string *)v817.__r_.__value_.__r.__words[0];
      }
      if ((v817.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v240 = HIBYTE(v817.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v240 = v817.__r_.__value_.__l.__size_;
      }
      v241 = std::string::append(&v818, (const std::string::value_type *)v239, v240);
      long long v242 = *(_OWORD *)&v241->__r_.__value_.__l.__data_;
      v826.__r_.__value_.__r.__words[2] = v241->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v826.__r_.__value_.__l.__data_ = v242;
      v241->__r_.__value_.__l.__size_ = 0;
      v241->__r_.__value_.__r.__words[2] = 0;
      v241->__r_.__value_.__r.__words[0] = 0;
      v243 = std::string::append(&v826, "\"", 1uLL);
      std::string::size_type v244 = v243->__r_.__value_.__r.__words[0];
      v831[0] = v243->__r_.__value_.__l.__size_;
      *(void *)((char *)v831 + 7) = *(std::string::size_type *)((char *)&v243->__r_.__value_.__r.__words[1] + 7);
      char v245 = HIBYTE(v243->__r_.__value_.__r.__words[2]);
      v243->__r_.__value_.__l.__size_ = 0;
      v243->__r_.__value_.__r.__words[2] = 0;
      v243->__r_.__value_.__r.__words[0] = 0;
      unint64_t v246 = *((void *)this + 7);
      unint64_t v247 = *((void *)this + 6);
      if (v247 >= v246)
      {
        uint64_t v252 = *((void *)this + 5);
        unint64_t v253 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v247 - v252) >> 3);
        unint64_t v254 = v253 + 1;
        if (v253 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_18DEE1FC8();
        }
        unint64_t v255 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v246 - v252) >> 3);
        if (2 * v255 > v254) {
          unint64_t v254 = 2 * v255;
        }
        if (v255 >= 0x555555555555555) {
          unint64_t v256 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v256 = v254;
        }
        *(void *)&long long v821 = (char *)this + 56;
        if (v256) {
          v257 = (char *)sub_18E00C070((uint64_t)this + 56, v256);
        }
        else {
          v257 = 0;
        }
        v258 = (std::string::size_type *)&v257[24 * v253];
        __p[0] = v257;
        __p[1] = v258;
        *((void *)&v820 + 1) = &v257[24 * v256];
        std::string::size_type v259 = v831[0];
        std::string::size_type *v258 = v244;
        v258[1] = v259;
        *(std::string::size_type *)((char *)v258 + 15) = *(void *)((char *)v831 + 7);
        *((unsigned char *)v258 + 23) = v245;
        v831[0] = 0;
        *(void *)((char *)v831 + 7) = 0;
        *(void *)&long long v820 = v258 + 3;
        sub_18E00BFF8((uint64_t *)this + 5, __p);
        unint64_t v249 = *((void *)this + 6);
        sub_18E00C1D8((uint64_t)__p);
      }
      else
      {
        uint64_t v248 = v831[0];
        *(void *)unint64_t v247 = v244;
        *(void *)(v247 + 8) = v248;
        *(void *)(v247 + 15) = *(void *)((char *)v831 + 7);
        *(unsigned char *)(v247 + 23) = v245;
        unint64_t v249 = v247 + 24;
        *((void *)this + 6) = v247 + 24;
      }
      *((void *)this + 6) = v249;
      if (SHIBYTE(v826.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v826.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v818.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v818.__r_.__value_.__l.__data_);
      }
      if (v830 < 0) {
        operator delete(*(void **)v829);
      }
      char v251 = 0;
    }
  }
  else
  {
    char v250 = v150 | v161 | v658 | v654 | v162 | v163 | v650 | v646 | v642 | v639 | v636 | v633 | v630 | v627 | v624 | v621 | v618 | v615 | v612 | v609 | v607 | v605 | v603 | v601 | v599 | v597 | v595 | v593 | v591 | v589 | v587 | v585 | v583 | v581 | v579 | v577 | v575 | v573 | v571 | v569 | v567 | v565 | v563 | v561 | v559 | v557 | v555 | v553 | v551 | v549 | v548 | v547 | v546 | v545 | v544 | v543 | v542 | v541 | v540 | v539 | v538 | v537 | v536 | v535 | v534 | v533 | v532 | v531 | v530 | v529 | v528 | v527 | v526 | v525 | v524 | v523 | v522 | v521 | v520 | v519 | v518 | v517 | v516 | v515 | v514 | v513 | v512 | v511 | v510 | v509 | v508 | v507 | v506 | v505 | v504 | v503 | v502 | v501 | v500 | v499 | v498 | v497 | v496 | v495 | v494 | v493 | v492 | v491 | v490 | v489 | v488 | v487 | v486 | v485 | v484 | v483 | v482 | v481 | v480 | v479 | v478 | v477 | v476 | v475;
    char v251 = v227 | v226 | v662 | v666 | v225 | v670 | v674 | v678 | v683 | v724 | (v729 == 10) | (v734 == 10) | (v739 == 10) | v688 | (v744 == 10) | (v749 == 10) | v693 | v698 | v703 | (v754 == 4 || v759 == 4 || v764 == 4 || v769 == 4 || v774 == 4 || v779 == 4) | (v784 == 4) | (v789 == 4) | (v794 == 4) | (v799 == 4) | (v804 == 4) | (v809 == 4) | (v814 == 4) | v708 | v713 | v718 | v229 | v454 | v453 | v452 | v451 | v450 | v449 | v448 | v447 | v446 | v228 | v250 | v474 | v473 | v472 | v471 | v470 | v469 | v468 | v467 | v466 | v465 | v464 | v463 | v462 | v461 | v460 | v459 | v458 | v457 | v456 | v455;
  }
  LOBYTE(__p[0]) = 0;
  int v260 = sub_18E00DD70((uint64_t)this, (char *)__p, "gravity_model_load_from_file");
  if (v260) {
    *((unsigned char *)this + 3656) = __p[0];
  }
  v261 = (void **)((char *)this + 3664);
  if (sub_18E009424((uint64_t)this, (std::string *)((char *)this + 3664), "gravity_model_parameters", ""))
  {
    if (!*((unsigned char *)this + 3656)) {
      goto LABEL_392;
    }
    cnconsole::filesystem::absolute((void **)this + 458, (std::string *)__p);
    if (BYTE8(v820))
    {
      *(_OWORD *)&v826.__r_.__value_.__l.__data_ = *(_OWORD *)__p;
      v826.__r_.__value_.__r.__words[2] = v820;
      *(void *)&long long v820 = 0;
      __p[0] = 0;
      __p[1] = 0;
    }
    else
    {
      sub_18DEDE7B0(&v826, "");
    }
    if (*((char *)this + 3687) < 0) {
      operator delete(*v261);
    }
    *(_OWORD *)v261 = *(_OWORD *)&v826.__r_.__value_.__l.__data_;
    *((void *)this + 460) = *((void *)&v826.__r_.__value_.__l + 2);
    *((unsigned char *)&v826.__r_.__value_.__s + 23) = 0;
    v826.__r_.__value_.__s.__data_[0] = 0;
    if (BYTE8(v820) && SBYTE7(v820) < 0) {
      operator delete(__p[0]);
    }
    if (!cnconsole::filesystem::isFileReadable())
    {
      sub_18DEDE7B0(&v818, "gravity_model_parameters");
      v263 = std::string::append(&v818, " - failed to open file for reading: ", 0x24uLL);
      long long v264 = *(_OWORD *)&v263->__r_.__value_.__l.__data_;
      v826.__r_.__value_.__r.__words[2] = v263->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v826.__r_.__value_.__l.__data_ = v264;
      v263->__r_.__value_.__l.__size_ = 0;
      v263->__r_.__value_.__r.__words[2] = 0;
      v263->__r_.__value_.__r.__words[0] = 0;
      int v265 = *((char *)this + 3687);
      if (v265 >= 0) {
        v266 = (char *)this + 3664;
      }
      else {
        v266 = (const std::string::value_type *)*((void *)this + 458);
      }
      if (v265 >= 0) {
        std::string::size_type v267 = *((unsigned __int8 *)this + 3687);
      }
      else {
        std::string::size_type v267 = *((void *)this + 459);
      }
      v268 = std::string::append(&v826, v266, v267);
      std::string::size_type v269 = v268->__r_.__value_.__r.__words[0];
      *(void *)v829 = v268->__r_.__value_.__l.__size_;
      *(void *)&v829[7] = *(std::string::size_type *)((char *)&v268->__r_.__value_.__r.__words[1] + 7);
      char v270 = HIBYTE(v268->__r_.__value_.__r.__words[2]);
      v268->__r_.__value_.__l.__size_ = 0;
      v268->__r_.__value_.__r.__words[2] = 0;
      v268->__r_.__value_.__r.__words[0] = 0;
      unint64_t v271 = *((void *)this + 7);
      unint64_t v272 = *((void *)this + 6);
      if (v272 >= v271)
      {
        uint64_t v274 = *((void *)this + 5);
        unint64_t v275 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v272 - v274) >> 3);
        unint64_t v276 = v275 + 1;
        if (v275 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_18DEE1FC8();
        }
        unint64_t v277 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v271 - v274) >> 3);
        if (2 * v277 > v276) {
          unint64_t v276 = 2 * v277;
        }
        if (v277 >= 0x555555555555555) {
          unint64_t v278 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v278 = v276;
        }
        *(void *)&long long v821 = (char *)this + 56;
        if (v278) {
          v279 = (char *)sub_18E00C070((uint64_t)this + 56, v278);
        }
        else {
          v279 = 0;
        }
        v280 = (std::string::size_type *)&v279[24 * v275];
        __p[0] = v279;
        __p[1] = v280;
        *((void *)&v820 + 1) = &v279[24 * v278];
        std::string::size_type *v280 = v269;
        v280[1] = *(void *)v829;
        *(std::string::size_type *)((char *)v280 + 15) = *(void *)&v829[7];
        *((unsigned char *)v280 + 23) = v270;
        *(void *)&long long v820 = v280 + 3;
        sub_18E00BFF8((uint64_t *)this + 5, __p);
        unint64_t v273 = *((void *)this + 6);
        sub_18E00C1D8((uint64_t)__p);
      }
      else
      {
        *(void *)unint64_t v272 = v269;
        *(void *)(v272 + 8) = *(void *)v829;
        *(void *)(v272 + 15) = *(void *)&v829[7];
        *(unsigned char *)(v272 + 23) = v270;
        unint64_t v273 = v272 + 24;
        *((void *)this + 6) = v272 + 24;
      }
      *((void *)this + 6) = v273;
      if (SHIBYTE(v826.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v826.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v818.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v818.__r_.__value_.__l.__data_);
      }
      sub_18DEDE7B0(__p, "");
      if (*((char *)this + 3687) < 0) {
        operator delete(*v261);
      }
      char v262 = 0;
      *(_OWORD *)v261 = *(_OWORD *)__p;
      *((void *)this + 460) = v820;
    }
    else
    {
LABEL_392:
      char v262 = 1;
    }
  }
  else
  {
    char v262 = v251 | v260;
  }
  char v281 = sub_18E009920((uint64_t *)this, (unsigned int *)this + 922, "gravity_model_truncation_degree", 0);
  v282 = &v817;
  int v283 = sub_18E009884((uint64_t)this, &v817, "raven_threading_model");
  if ((v817.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v284 = (std::string *)((char *)&v817 + HIBYTE(v817.__r_.__value_.__r.__words[2]));
  }
  else {
    v284 = (std::string *)(v817.__r_.__value_.__r.__words[0] + v817.__r_.__value_.__l.__size_);
  }
  if ((v817.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    v282 = (std::string *)v817.__r_.__value_.__r.__words[0];
  }
  while (v282 != v284)
  {
    v282->__r_.__value_.__s.__data_[0] = __tolower(v282->__r_.__value_.__s.__data_[0]);
    v282 = (std::string *)((char *)v282 + 1);
  }
  if (!v283)
  {
    char v290 = 0;
    char v291 = v262 | v281;
    goto LABEL_473;
  }
  std::string::size_type v285 = HIBYTE(v817.__r_.__value_.__r.__words[2]);
  if ((v817.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v285 = v817.__r_.__value_.__l.__size_;
  }
  if (v285 == 13)
  {
    v292 = &v817;
    if ((v817.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      v292 = (std::string *)v817.__r_.__value_.__r.__words[0];
    }
    std::string::size_type v293 = v292->__r_.__value_.__r.__words[0];
    uint64_t v294 = *(std::string::size_type *)((char *)v292->__r_.__value_.__r.__words + 5);
    if (v293 != 0x72687469746C756DLL || v294 != 0x6465646165726874) {
      goto LABEL_446;
    }
    char v290 = 1;
LABEL_472:
    char v291 = 1;
    goto LABEL_473;
  }
  if (v285 == 14)
  {
    v286 = &v817;
    if ((v817.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      v286 = (std::string *)v817.__r_.__value_.__r.__words[0];
    }
    std::string::size_type v287 = v286->__r_.__value_.__r.__words[0];
    uint64_t v288 = *(std::string::size_type *)((char *)v286->__r_.__value_.__r.__words + 6);
    if (v287 == 0x6874656C676E6973 && v288 == 0x6465646165726874)
    {
      char v290 = 0;
      goto LABEL_472;
    }
  }
LABEL_446:
  v296 = (std::string *)sub_18DEDE7B0(v829, "raven_threading_model");
  v297 = std::string::append(v296, " - invalid entry: \"", 0x13uLL);
  long long v298 = *(_OWORD *)&v297->__r_.__value_.__l.__data_;
  v818.__r_.__value_.__r.__words[2] = v297->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v818.__r_.__value_.__l.__data_ = v298;
  v297->__r_.__value_.__l.__size_ = 0;
  v297->__r_.__value_.__r.__words[2] = 0;
  v297->__r_.__value_.__r.__words[0] = 0;
  if ((v817.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v299 = &v817;
  }
  else {
    v299 = (std::string *)v817.__r_.__value_.__r.__words[0];
  }
  if ((v817.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v300 = HIBYTE(v817.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v300 = v817.__r_.__value_.__l.__size_;
  }
  v301 = std::string::append(&v818, (const std::string::value_type *)v299, v300);
  long long v302 = *(_OWORD *)&v301->__r_.__value_.__l.__data_;
  v826.__r_.__value_.__r.__words[2] = v301->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v826.__r_.__value_.__l.__data_ = v302;
  v301->__r_.__value_.__l.__size_ = 0;
  v301->__r_.__value_.__r.__words[2] = 0;
  v301->__r_.__value_.__r.__words[0] = 0;
  v303 = std::string::append(&v826, "\"", 1uLL);
  std::string::size_type v304 = v303->__r_.__value_.__r.__words[0];
  v831[0] = v303->__r_.__value_.__l.__size_;
  *(void *)((char *)v831 + 7) = *(std::string::size_type *)((char *)&v303->__r_.__value_.__r.__words[1] + 7);
  char v305 = HIBYTE(v303->__r_.__value_.__r.__words[2]);
  v303->__r_.__value_.__l.__size_ = 0;
  v303->__r_.__value_.__r.__words[2] = 0;
  v303->__r_.__value_.__r.__words[0] = 0;
  unint64_t v306 = *((void *)this + 7);
  unint64_t v307 = *((void *)this + 6);
  if (v307 >= v306)
  {
    uint64_t v310 = *((void *)this + 5);
    unint64_t v311 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v307 - v310) >> 3);
    unint64_t v312 = v311 + 1;
    if (v311 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_18DEE1FC8();
    }
    unint64_t v313 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v306 - v310) >> 3);
    if (2 * v313 > v312) {
      unint64_t v312 = 2 * v313;
    }
    if (v313 >= 0x555555555555555) {
      unint64_t v314 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v314 = v312;
    }
    *(void *)&long long v821 = (char *)this + 56;
    if (v314) {
      v315 = (char *)sub_18E00C070((uint64_t)this + 56, v314);
    }
    else {
      v315 = 0;
    }
    v316 = (std::string::size_type *)&v315[24 * v311];
    __p[0] = v315;
    __p[1] = v316;
    *((void *)&v820 + 1) = &v315[24 * v314];
    std::string::size_type v317 = v831[0];
    std::string::size_type *v316 = v304;
    v316[1] = v317;
    *(std::string::size_type *)((char *)v316 + 15) = *(void *)((char *)v831 + 7);
    *((unsigned char *)v316 + 23) = v305;
    v831[0] = 0;
    *(void *)((char *)v831 + 7) = 0;
    *(void *)&long long v820 = v316 + 3;
    sub_18E00BFF8((uint64_t *)this + 5, __p);
    unint64_t v309 = *((void *)this + 6);
    sub_18E00C1D8((uint64_t)__p);
  }
  else
  {
    uint64_t v308 = v831[0];
    *(void *)unint64_t v307 = v304;
    *(void *)(v307 + 8) = v308;
    *(void *)(v307 + 15) = *(void *)((char *)v831 + 7);
    *(unsigned char *)(v307 + 23) = v305;
    unint64_t v309 = v307 + 24;
    *((void *)this + 6) = v307 + 24;
  }
  *((void *)this + 6) = v309;
  if (SHIBYTE(v826.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v826.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v818.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v818.__r_.__value_.__l.__data_);
  }
  if (v830 < 0) {
    operator delete(*(void **)v829);
  }
  char v290 = 0;
  char v291 = 0;
LABEL_473:
  *((unsigned char *)this + 3692) = v290;
  LOBYTE(__p[0]) = 0;
  int v318 = sub_18E00DD70((uint64_t)this, (char *)__p, "raven_output_enabled");
  if (v318) {
    *((unsigned char *)this + 3693) = __p[0];
  }
  v319 = (void **)((char *)this + 3696);
  if (sub_18E009424((uint64_t)this, (std::string *)this + 154, "raven_output_file", ""))
  {
    if (!*((unsigned char *)this + 3693)) {
      goto LABEL_487;
    }
    cnconsole::filesystem::absolute((void **)this + 462, (std::string *)__p);
    if (BYTE8(v820))
    {
      *(_OWORD *)&v826.__r_.__value_.__l.__data_ = *(_OWORD *)__p;
      v826.__r_.__value_.__r.__words[2] = v820;
      *(void *)&long long v820 = 0;
      __p[0] = 0;
      __p[1] = 0;
    }
    else
    {
      sub_18DEDE7B0(&v826, "");
    }
    if (*((char *)this + 3719) < 0) {
      operator delete(*v319);
    }
    *(_OWORD *)v319 = *(_OWORD *)&v826.__r_.__value_.__l.__data_;
    *((void *)this + 464) = *((void *)&v826.__r_.__value_.__l + 2);
    *((unsigned char *)&v826.__r_.__value_.__s + 23) = 0;
    v826.__r_.__value_.__s.__data_[0] = 0;
    if (BYTE8(v820) && SBYTE7(v820) < 0) {
      operator delete(__p[0]);
    }
    if (!cnconsole::filesystem::isFileWriteable((uint64_t)this + 3696))
    {
      sub_18DEDE7B0(&v818, "raven_output_file_");
      v321 = std::string::append(&v818, " - failed to open file for writing: ", 0x24uLL);
      long long v322 = *(_OWORD *)&v321->__r_.__value_.__l.__data_;
      v826.__r_.__value_.__r.__words[2] = v321->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v826.__r_.__value_.__l.__data_ = v322;
      v321->__r_.__value_.__l.__size_ = 0;
      v321->__r_.__value_.__r.__words[2] = 0;
      v321->__r_.__value_.__r.__words[0] = 0;
      int v323 = *((char *)this + 3719);
      if (v323 >= 0) {
        v324 = (char *)this + 3696;
      }
      else {
        v324 = (const std::string::value_type *)*((void *)this + 462);
      }
      if (v323 >= 0) {
        std::string::size_type v325 = *((unsigned __int8 *)this + 3719);
      }
      else {
        std::string::size_type v325 = *((void *)this + 463);
      }
      v326 = std::string::append(&v826, v324, v325);
      std::string::size_type v327 = v326->__r_.__value_.__r.__words[0];
      *(void *)v829 = v326->__r_.__value_.__l.__size_;
      *(void *)&v829[7] = *(std::string::size_type *)((char *)&v326->__r_.__value_.__r.__words[1] + 7);
      char v328 = HIBYTE(v326->__r_.__value_.__r.__words[2]);
      v326->__r_.__value_.__l.__size_ = 0;
      v326->__r_.__value_.__r.__words[2] = 0;
      v326->__r_.__value_.__r.__words[0] = 0;
      unint64_t v329 = *((void *)this + 7);
      unint64_t v330 = *((void *)this + 6);
      if (v330 >= v329)
      {
        uint64_t v332 = *((void *)this + 5);
        unint64_t v333 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v330 - v332) >> 3);
        unint64_t v334 = v333 + 1;
        if (v333 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_18DEE1FC8();
        }
        unint64_t v335 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v329 - v332) >> 3);
        if (2 * v335 > v334) {
          unint64_t v334 = 2 * v335;
        }
        if (v335 >= 0x555555555555555) {
          unint64_t v336 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v336 = v334;
        }
        *(void *)&long long v821 = (char *)this + 56;
        if (v336) {
          v337 = (char *)sub_18E00C070((uint64_t)this + 56, v336);
        }
        else {
          v337 = 0;
        }
        v338 = (std::string::size_type *)&v337[24 * v333];
        __p[0] = v337;
        __p[1] = v338;
        *((void *)&v820 + 1) = &v337[24 * v336];
        std::string::size_type *v338 = v327;
        v338[1] = *(void *)v829;
        *(std::string::size_type *)((char *)v338 + 15) = *(void *)&v829[7];
        *((unsigned char *)v338 + 23) = v328;
        *(void *)&long long v820 = v338 + 3;
        sub_18E00BFF8((uint64_t *)this + 5, __p);
        unint64_t v331 = *((void *)this + 6);
        sub_18E00C1D8((uint64_t)__p);
      }
      else
      {
        *(void *)unint64_t v330 = v327;
        *(void *)(v330 + 8) = *(void *)v829;
        *(void *)(v330 + 15) = *(void *)&v829[7];
        *(unsigned char *)(v330 + 23) = v328;
        unint64_t v331 = v330 + 24;
        *((void *)this + 6) = v330 + 24;
      }
      *((void *)this + 6) = v331;
      if (SHIBYTE(v826.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v826.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v818.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v818.__r_.__value_.__l.__data_);
      }
      sub_18DEDE7B0(__p, "");
      if (*((char *)this + 3719) < 0) {
        operator delete(*v319);
      }
      char v320 = 0;
      *(_OWORD *)v319 = *(_OWORD *)__p;
      *((void *)this + 464) = v820;
    }
    else
    {
LABEL_487:
      char v320 = 1;
    }
  }
  else
  {
    char v320 = v291 | v318;
  }
  LOBYTE(__p[0]) = 0;
  int v339 = sub_18E00DD70((uint64_t)this, (char *)__p, "debug_system_log_stream_enabled");
  if (v339) {
    *((unsigned char *)this + 3721) = __p[0];
  }
  LOBYTE(__p[0]) = 0;
  int v340 = sub_18E00DD70((uint64_t)this, (char *)__p, "debug_file_log_stream_enabled");
  if (v340) {
    *((unsigned char *)this + 3722) = __p[0];
  }
  v341 = (void **)((char *)this + 3728);
  if (sub_18E009424((uint64_t)this, (std::string *)((char *)this + 3728), "debug_file_log_stream_name", "raven_debug.txt"))
  {
    if (!*((unsigned char *)this + 3722)) {
      goto LABEL_529;
    }
    cnconsole::filesystem::absolute((void **)this + 466, (std::string *)__p);
    if (BYTE8(v820))
    {
      *(_OWORD *)&v826.__r_.__value_.__l.__data_ = *(_OWORD *)__p;
      v826.__r_.__value_.__r.__words[2] = v820;
      *(void *)&long long v820 = 0;
      __p[0] = 0;
      __p[1] = 0;
    }
    else
    {
      sub_18DEDE7B0(&v826, "");
    }
    if (*((char *)this + 3751) < 0) {
      operator delete(*v341);
    }
    *(_OWORD *)v341 = *(_OWORD *)&v826.__r_.__value_.__l.__data_;
    *((void *)this + 468) = *((void *)&v826.__r_.__value_.__l + 2);
    *((unsigned char *)&v826.__r_.__value_.__s + 23) = 0;
    v826.__r_.__value_.__s.__data_[0] = 0;
    if (BYTE8(v820) && SBYTE7(v820) < 0) {
      operator delete(__p[0]);
    }
    if (!cnconsole::filesystem::isFileWriteable((uint64_t)this + 3728))
    {
      sub_18DEDE7B0(&v818, "debug_file_log_stream_name_");
      v343 = std::string::append(&v818, " - failed to open file for writing: ", 0x24uLL);
      long long v344 = *(_OWORD *)&v343->__r_.__value_.__l.__data_;
      v826.__r_.__value_.__r.__words[2] = v343->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v826.__r_.__value_.__l.__data_ = v344;
      v343->__r_.__value_.__l.__size_ = 0;
      v343->__r_.__value_.__r.__words[2] = 0;
      v343->__r_.__value_.__r.__words[0] = 0;
      int v345 = *((char *)this + 3751);
      if (v345 >= 0) {
        v346 = (char *)this + 3728;
      }
      else {
        v346 = (const std::string::value_type *)*((void *)this + 466);
      }
      if (v345 >= 0) {
        std::string::size_type v347 = *((unsigned __int8 *)this + 3751);
      }
      else {
        std::string::size_type v347 = *((void *)this + 467);
      }
      v348 = std::string::append(&v826, v346, v347);
      std::string::size_type v349 = v348->__r_.__value_.__r.__words[0];
      *(void *)v829 = v348->__r_.__value_.__l.__size_;
      *(void *)&v829[7] = *(std::string::size_type *)((char *)&v348->__r_.__value_.__r.__words[1] + 7);
      char v350 = HIBYTE(v348->__r_.__value_.__r.__words[2]);
      v348->__r_.__value_.__l.__size_ = 0;
      v348->__r_.__value_.__r.__words[2] = 0;
      v348->__r_.__value_.__r.__words[0] = 0;
      unint64_t v351 = *((void *)this + 7);
      unint64_t v352 = *((void *)this + 6);
      if (v352 >= v351)
      {
        uint64_t v354 = *((void *)this + 5);
        unint64_t v355 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v352 - v354) >> 3);
        unint64_t v356 = v355 + 1;
        if (v355 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_18DEE1FC8();
        }
        unint64_t v357 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v351 - v354) >> 3);
        if (2 * v357 > v356) {
          unint64_t v356 = 2 * v357;
        }
        if (v357 >= 0x555555555555555) {
          unint64_t v358 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v358 = v356;
        }
        *(void *)&long long v821 = (char *)this + 56;
        if (v358) {
          v359 = (char *)sub_18E00C070((uint64_t)this + 56, v358);
        }
        else {
          v359 = 0;
        }
        v360 = (std::string::size_type *)&v359[24 * v355];
        __p[0] = v359;
        __p[1] = v360;
        *((void *)&v820 + 1) = &v359[24 * v358];
        std::string::size_type *v360 = v349;
        v360[1] = *(void *)v829;
        *(std::string::size_type *)((char *)v360 + 15) = *(void *)&v829[7];
        *((unsigned char *)v360 + 23) = v350;
        *(void *)&long long v820 = v360 + 3;
        sub_18E00BFF8((uint64_t *)this + 5, __p);
        unint64_t v353 = *((void *)this + 6);
        sub_18E00C1D8((uint64_t)__p);
      }
      else
      {
        *(void *)unint64_t v352 = v349;
        *(void *)(v352 + 8) = *(void *)v829;
        *(void *)(v352 + 15) = *(void *)&v829[7];
        *(unsigned char *)(v352 + 23) = v350;
        unint64_t v353 = v352 + 24;
        *((void *)this + 6) = v352 + 24;
      }
      *((void *)this + 6) = v353;
      if (SHIBYTE(v826.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v826.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v818.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v818.__r_.__value_.__l.__data_);
      }
      sub_18DEDE7B0(__p, "");
      if (*((char *)this + 3751) < 0) {
        operator delete(*v341);
      }
      char v342 = 0;
      *(_OWORD *)v341 = *(_OWORD *)__p;
      *((void *)this + 468) = v820;
    }
    else
    {
LABEL_529:
      char v342 = 1;
    }
  }
  else
  {
    char v342 = v320 | v339 | v340;
  }
  LOBYTE(__p[0]) = 0;
  int v361 = sub_18E00DD70((uint64_t)this, (char *)__p, "debug_stdout_log_stream_enabled");
  if (v361) {
    *((unsigned char *)this + 3752) = __p[0];
  }
  LOBYTE(__p[0]) = 0;
  int v362 = sub_18E00DD70((uint64_t)this, (char *)__p, "debug_msr_logging_enabled");
  if (v362) {
    *((unsigned char *)this + 3753) = __p[0];
  }
  LOBYTE(__p[0]) = 0;
  int v363 = sub_18E00DD70((uint64_t)this, (char *)__p, "debug_msr_logging_extra_enabled");
  if (v363) {
    *((unsigned char *)this + 3754) = __p[0];
  }
  int v364 = sub_18E009424((uint64_t)this, &v817, "debug_msr_logging_base_filename", "");
  char v365 = v342 | v361 | v362 | v363 | v364;
  if (*((unsigned char *)this + 3753)) {
    int v366 = v364;
  }
  else {
    int v366 = 0;
  }
  if (v366 == 1)
  {
    cnconsole::filesystem::absolute((void **)&v817.__r_.__value_.__l.__data_, (std::string *)__p);
    if (BYTE8(v820))
    {
      *(_OWORD *)&v826.__r_.__value_.__l.__data_ = *(_OWORD *)__p;
      v826.__r_.__value_.__r.__words[2] = v820;
      *(void *)&long long v820 = 0;
      __p[0] = 0;
      __p[1] = 0;
    }
    else
    {
      sub_18DEDE7B0(&v826, "");
    }
    v367 = (void **)((char *)this + 3760);
    if (*((char *)this + 3783) < 0) {
      operator delete(*v367);
    }
    *(_OWORD *)v367 = *(_OWORD *)&v826.__r_.__value_.__l.__data_;
    *((void *)this + 472) = *((void *)&v826.__r_.__value_.__l + 2);
    *((unsigned char *)&v826.__r_.__value_.__s + 23) = 0;
    v826.__r_.__value_.__s.__data_[0] = 0;
    if (BYTE8(v820) && SBYTE7(v820) < 0) {
      operator delete(__p[0]);
    }
    if (!cnconsole::filesystem::isFileWriteable((uint64_t)this + 3760))
    {
      sub_18DEDE7B0(&v818, "debug_msr_logging_base_filename_");
      v368 = std::string::append(&v818, " - failed to open file for writing: ", 0x24uLL);
      long long v369 = *(_OWORD *)&v368->__r_.__value_.__l.__data_;
      v826.__r_.__value_.__r.__words[2] = v368->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v826.__r_.__value_.__l.__data_ = v369;
      v368->__r_.__value_.__l.__size_ = 0;
      v368->__r_.__value_.__r.__words[2] = 0;
      v368->__r_.__value_.__r.__words[0] = 0;
      int v370 = *((char *)this + 3783);
      if (v370 >= 0) {
        v371 = (char *)this + 3760;
      }
      else {
        v371 = (const std::string::value_type *)*((void *)this + 470);
      }
      if (v370 >= 0) {
        std::string::size_type v372 = *((unsigned __int8 *)this + 3783);
      }
      else {
        std::string::size_type v372 = *((void *)this + 471);
      }
      v373 = std::string::append(&v826, v371, v372);
      std::string::size_type v374 = v373->__r_.__value_.__r.__words[0];
      *(void *)v829 = v373->__r_.__value_.__l.__size_;
      *(void *)&v829[7] = *(std::string::size_type *)((char *)&v373->__r_.__value_.__r.__words[1] + 7);
      char v375 = HIBYTE(v373->__r_.__value_.__r.__words[2]);
      v373->__r_.__value_.__l.__size_ = 0;
      v373->__r_.__value_.__r.__words[2] = 0;
      v373->__r_.__value_.__r.__words[0] = 0;
      unint64_t v376 = *((void *)this + 7);
      unint64_t v377 = *((void *)this + 6);
      if (v377 >= v376)
      {
        uint64_t v379 = *((void *)this + 5);
        unint64_t v380 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v377 - v379) >> 3);
        unint64_t v381 = v380 + 1;
        if (v380 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_18DEE1FC8();
        }
        unint64_t v382 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v376 - v379) >> 3);
        if (2 * v382 > v381) {
          unint64_t v381 = 2 * v382;
        }
        if (v382 >= 0x555555555555555) {
          unint64_t v383 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v383 = v381;
        }
        *(void *)&long long v821 = (char *)this + 56;
        if (v383) {
          v384 = (char *)sub_18E00C070((uint64_t)this + 56, v383);
        }
        else {
          v384 = 0;
        }
        v385 = (std::string::size_type *)&v384[24 * v380];
        __p[0] = v384;
        __p[1] = v385;
        *((void *)&v820 + 1) = &v384[24 * v383];
        std::string::size_type *v385 = v374;
        v385[1] = *(void *)v829;
        *(std::string::size_type *)((char *)v385 + 15) = *(void *)&v829[7];
        *((unsigned char *)v385 + 23) = v375;
        *(void *)&long long v820 = v385 + 3;
        sub_18E00BFF8((uint64_t *)this + 5, __p);
        unint64_t v378 = *((void *)this + 6);
        sub_18E00C1D8((uint64_t)__p);
      }
      else
      {
        *(void *)unint64_t v377 = v374;
        *(void *)(v377 + 8) = *(void *)v829;
        *(void *)(v377 + 15) = *(void *)&v829[7];
        *(unsigned char *)(v377 + 23) = v375;
        unint64_t v378 = v377 + 24;
        *((void *)this + 6) = v377 + 24;
      }
      *((void *)this + 6) = v378;
      if (SHIBYTE(v826.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v826.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v818.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v818.__r_.__value_.__l.__data_);
      }
      sub_18DEDE7B0(__p, "");
      if (*((char *)this + 3783) < 0) {
        operator delete(*v367);
      }
      char v365 = 0;
      *(_OWORD *)v367 = *(_OWORD *)__p;
      *((void *)this + 472) = v820;
    }
  }
  if (!sub_18E009424((uint64_t)this, &v817, "debug_logging_level", ""))
  {
    char v395 = v365;
LABEL_689:
    char v562 = v395;
    goto LABEL_690;
  }
  std::string::size_type v386 = HIBYTE(v817.__r_.__value_.__r.__words[2]);
  if ((v817.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v386 = v817.__r_.__value_.__l.__size_;
  }
  switch(v386)
  {
    case 4uLL:
      v405 = &v817;
      if ((v817.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        v405 = (std::string *)v817.__r_.__value_.__r.__words[0];
      }
      if (LODWORD(v405->__r_.__value_.__l.__data_) != 1868983881
        && LODWORD(v405->__r_.__value_.__l.__data_) != 1868983913)
      {
        break;
      }
      char v394 = 2;
      goto LABEL_687;
    case 5uLL:
      v396 = &v817;
      if ((v817.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        v396 = (std::string *)v817.__r_.__value_.__r.__words[0];
      }
      BOOL v397 = LODWORD(v396->__r_.__value_.__l.__data_) == 1969382724 && v396->__r_.__value_.__s.__data_[4] == 103;
      if (v397
        || (LODWORD(v396->__r_.__value_.__l.__data_) == 1969382756
          ? (BOOL v398 = v396->__r_.__value_.__s.__data_[4] == 103)
          : (BOOL v398 = 0),
            v398))
      {
        char v562 = 1;
        *((unsigned char *)this + 3784) = 1;
        goto LABEL_690;
      }
      BOOL v399 = LODWORD(v396->__r_.__value_.__l.__data_) == 1869771333 && v396->__r_.__value_.__s.__data_[4] == 114;
      if (v399
        || (LODWORD(v396->__r_.__value_.__l.__data_) == 1869771365
          ? (BOOL v400 = v396->__r_.__value_.__s.__data_[4] == 114)
          : (BOOL v400 = 0),
            v400))
      {
        char v394 = 4;
      }
      else
      {
        if (LODWORD(v396->__r_.__value_.__l.__data_) != 1819631942 || v396->__r_.__value_.__s.__data_[4] != 116)
        {
          int v402 = (int)v396->__r_.__value_.__l.__data_;
          int v403 = v396->__r_.__value_.__s.__data_[4];
          if (v402 != 1819631974 || v403 != 116) {
            break;
          }
        }
        char v394 = 5;
      }
      goto LABEL_687;
    case 7uLL:
      v387 = &v817;
      if ((v817.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        v387 = (std::string *)v817.__r_.__value_.__r.__words[0];
      }
      BOOL v388 = LODWORD(v387->__r_.__value_.__l.__data_) == 1651664214
          && *(_DWORD *)((char *)v387->__r_.__value_.__r.__words + 3) == 1702063970;
      if (v388
        || (LODWORD(v387->__r_.__value_.__l.__data_) == 1651664246
          ? (BOOL v389 = *(_DWORD *)((char *)v387->__r_.__value_.__r.__words + 3) == 1702063970)
          : (BOOL v389 = 0),
            v389))
      {
        *((unsigned char *)this + 3784) = 0;
LABEL_688:
        char v395 = 1;
        goto LABEL_689;
      }
      if (LODWORD(v387->__r_.__value_.__l.__data_) != 1634100548
        || *(_DWORD *)((char *)v387->__r_.__value_.__r.__words + 3) != 1953264993)
      {
        int v391 = (int)v387->__r_.__value_.__l.__data_;
        int v392 = *(_DWORD *)((char *)v387->__r_.__value_.__r.__words + 3);
        if (v391 != 1634100580 || v392 != 1953264993) {
          break;
        }
      }
      char v394 = 3;
LABEL_687:
      *((unsigned char *)this + 3784) = v394;
      goto LABEL_688;
  }
  *((unsigned char *)this + 3784) = -1;
  v406 = (std::string *)sub_18DEDE7B0(v829, "debug_logging_level");
  v407 = std::string::append(v406, " - invalid entry: \"", 0x13uLL);
  long long v408 = *(_OWORD *)&v407->__r_.__value_.__l.__data_;
  v818.__r_.__value_.__r.__words[2] = v407->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v818.__r_.__value_.__l.__data_ = v408;
  v407->__r_.__value_.__l.__size_ = 0;
  v407->__r_.__value_.__r.__words[2] = 0;
  v407->__r_.__value_.__r.__words[0] = 0;
  if ((v817.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v409 = &v817;
  }
  else {
    v409 = (std::string *)v817.__r_.__value_.__r.__words[0];
  }
  if ((v817.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v410 = HIBYTE(v817.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v410 = v817.__r_.__value_.__l.__size_;
  }
  v411 = std::string::append(&v818, (const std::string::value_type *)v409, v410);
  long long v412 = *(_OWORD *)&v411->__r_.__value_.__l.__data_;
  v826.__r_.__value_.__r.__words[2] = v411->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v826.__r_.__value_.__l.__data_ = v412;
  v411->__r_.__value_.__l.__size_ = 0;
  v411->__r_.__value_.__r.__words[2] = 0;
  v411->__r_.__value_.__r.__words[0] = 0;
  v413 = std::string::append(&v826, "\"", 1uLL);
  std::string::size_type v414 = v413->__r_.__value_.__r.__words[0];
  v831[0] = v413->__r_.__value_.__l.__size_;
  *(void *)((char *)v831 + 7) = *(std::string::size_type *)((char *)&v413->__r_.__value_.__r.__words[1] + 7);
  char v415 = HIBYTE(v413->__r_.__value_.__r.__words[2]);
  v413->__r_.__value_.__l.__size_ = 0;
  v413->__r_.__value_.__r.__words[2] = 0;
  v413->__r_.__value_.__r.__words[0] = 0;
  unint64_t v416 = *((void *)this + 7);
  unint64_t v417 = *((void *)this + 6);
  if (v417 >= v416)
  {
    uint64_t v420 = *((void *)this + 5);
    unint64_t v421 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v417 - v420) >> 3);
    unint64_t v422 = v421 + 1;
    if (v421 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_18DEE1FC8();
    }
    unint64_t v423 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v416 - v420) >> 3);
    if (2 * v423 > v422) {
      unint64_t v422 = 2 * v423;
    }
    if (v423 >= 0x555555555555555) {
      unint64_t v424 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v424 = v422;
    }
    *(void *)&long long v821 = (char *)this + 56;
    if (v424) {
      v425 = (char *)sub_18E00C070((uint64_t)this + 56, v424);
    }
    else {
      v425 = 0;
    }
    v426 = (std::string::size_type *)&v425[24 * v421];
    __p[0] = v425;
    __p[1] = v426;
    *((void *)&v820 + 1) = &v425[24 * v424];
    std::string::size_type v427 = v831[0];
    std::string::size_type *v426 = v414;
    v426[1] = v427;
    *(std::string::size_type *)((char *)v426 + 15) = *(void *)((char *)v831 + 7);
    *((unsigned char *)v426 + 23) = v415;
    v831[0] = 0;
    *(void *)((char *)v831 + 7) = 0;
    *(void *)&long long v820 = v426 + 3;
    sub_18E00BFF8((uint64_t *)this + 5, __p);
    unint64_t v419 = *((void *)this + 6);
    sub_18E00C1D8((uint64_t)__p);
  }
  else
  {
    uint64_t v418 = v831[0];
    *(void *)unint64_t v417 = v414;
    *(void *)(v417 + 8) = v418;
    *(void *)(v417 + 15) = *(void *)((char *)v831 + 7);
    *(unsigned char *)(v417 + 23) = v415;
    unint64_t v419 = v417 + 24;
    *((void *)this + 6) = v417 + 24;
  }
  *((void *)this + 6) = v419;
  if (SHIBYTE(v826.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v826.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v818.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v818.__r_.__value_.__l.__data_);
  }
  if (v830 < 0) {
    operator delete(*(void **)v829);
  }
  char v562 = 0;
LABEL_690:
  LOBYTE(__p[0]) = 0;
  int v815 = sub_18E00DD70((uint64_t)this, (char *)__p, "debug_predict_output_to_present");
  if (v815) {
    *((unsigned char *)this + 3720) = __p[0];
  }
  LOBYTE(__p[0]) = 0;
  int v810 = sub_18E00DD70((uint64_t)this, (char *)__p, "enable_rof_ionosphere_model");
  if (v810) {
    *((unsigned char *)this + 2544) = __p[0];
  }
  char v560 = sub_18E008ACC((uint64_t *)this, (double *)this + 319, "rof_ionosphere_staleness_threshold_sec", 0.0);
  LOBYTE(__p[0]) = 0;
  int v805 = sub_18E00DD70((uint64_t)this, (char *)__p, "gnss_preprocessor_average_doppler_averaged_over_data_interval");
  if (v805) {
    *((unsigned char *)this + 544) = __p[0];
  }
  LOBYTE(__p[0]) = 0;
  int v800 = sub_18E00DD70((uint64_t)this, (char *)__p, "gnss_preprocessor_only_scales_vendor_reported_measurement_uncertainty");
  if (v800) {
    *((unsigned char *)this + 545) = __p[0];
  }
  LOBYTE(__p[0]) = 0;
  int v795 = sub_18E00DD70((uint64_t)this, (char *)__p, "gnss_preprocessor_require_average_doppler_and_doppler_cross_checking");
  if (v795) {
    *((unsigned char *)this + 546) = __p[0];
  }
  LOBYTE(__p[0]) = 0;
  int v790 = sub_18E00DD70((uint64_t)this, (char *)__p, "gnss_preprocessor_rx_band_corrections_are_additive");
  if (v790) {
    *((unsigned char *)this + 547) = __p[0];
  }
  LOBYTE(__p[0]) = 0;
  int v785 = sub_18E00DD70((uint64_t)this, (char *)__p, "gnss_preprocessor_rx_band_corrections_include_inter_constellation_clock_offset");
  if (v785) {
    *((unsigned char *)this + 548) = __p[0];
  }
  LOBYTE(__p[0]) = 0;
  int v780 = sub_18E00DD70((uint64_t)this, (char *)__p, "gnss_preprocessor_use_vendor_supplied_measurement_variances");
  if (v780) {
    *((unsigned char *)this + 549) = __p[0];
  }
  __p[0] = 0;
  int v775 = sub_18E00DBEC((uint64_t)this, __p, "gnss_preprocessor_rf_time_bias_variance_scale_factor");
  if (v775) {
    *((void **)this + 70) = __p[0];
  }
  LOBYTE(__p[0]) = 0;
  int v770 = sub_18E00DD70((uint64_t)this, (char *)__p, "gnss_preprocessor_scale_filtered_receiver_band_cor_uncertainty");
  if (v770) {
    *((unsigned char *)this + 550) = __p[0];
  }
  LOBYTE(__p[0]) = 0;
  int v765 = sub_18E00DD70((uint64_t)this, (char *)__p, "gnss_preprocessor_enable_rx_band_correction_filter");
  if (v765) {
    *((unsigned char *)this + 551) = __p[0];
  }
  char v558 = sub_18E00954C((uint64_t *)this, (double *)this + 71, "gnss_preprocessor_receiver_band_correction_lpf_alpha", 2.22507386e-308, 1.0);
  LOBYTE(__p[0]) = 0;
  int v760 = sub_18E00DD70((uint64_t)this, (char *)__p, "gnss_preprocessor_apply_minnesota_rf_model");
  if (v760) {
    *((unsigned char *)this + 576) = __p[0];
  }
  LOBYTE(__p[0]) = 0;
  int v755 = sub_18E00DD70((uint64_t)this, (char *)__p, "gnss_preprocessor_form_averaged_doppler_from_carrier_phase");
  if (v755) {
    *((unsigned char *)this + 577) = __p[0];
  }
  LOBYTE(__p[0]) = 0;
  int v750 = sub_18E00DD70((uint64_t)this, (char *)__p, "gnss_preprocessor_use_instantaneous_doppler_unc_for_averaged");
  if (v750) {
    *((unsigned char *)this + 578) = __p[0];
  }
  LOBYTE(__p[0]) = 0;
  int v745 = sub_18E00DD70((uint64_t)this, (char *)__p, "gnss_preprocessor_resolve_millisecond_pseudorange_errors");
  if (v745) {
    *((unsigned char *)this + 579) = __p[0];
  }
  LOBYTE(__p[0]) = 0;
  int v740 = sub_18E00DD70((uint64_t)this, (char *)__p, "gnss_preprocessor_raise_multiple_doppler_variants");
  if (v740) {
    *((unsigned char *)this + 580) = __p[0];
  }
  char v556 = sub_18E009D74((uint64_t *)this, (float *)this + 146, "gnss_preprocessor_minimum_cn0_dbhz_to_allow_L5_multipath_indicator");
  LOBYTE(__p[0]) = 0;
  int v735 = sub_18E00DD70((uint64_t)this, (char *)__p, "gnss_preprocessor_merge_L1_L5_svinfo_for_galileo");
  if (v735) {
    *((unsigned char *)this + 588) = __p[0];
  }
  LOBYTE(__p[0]) = 0;
  int v730 = sub_18E00DD70((uint64_t)this, (char *)__p, "gnss_preprocessor_need_to_add_ephemeris_unc_to_range_unc");
  if (v730) {
    *((unsigned char *)this + 589) = __p[0];
  }
  LOBYTE(__p[0]) = 0;
  int v725 = sub_18E00DD70((uint64_t)this, (char *)__p, "gnss_preprocessor_need_to_add_rx_band_corr_unc_to_range_unc");
  if (v725) {
    *((unsigned char *)this + 590) = __p[0];
  }
  LOBYTE(__p[0]) = 0;
  int v719 = sub_18E00DD70((uint64_t)this, (char *)__p, "gnss_preprocessor_populate_multipath_indicator");
  if (v719) {
    *((unsigned char *)this + 591) = __p[0];
  }
  LOBYTE(__p[0]) = 0;
  int v714 = sub_18E00DD70((uint64_t)this, (char *)__p, "gnss_use_beidou_measurements");
  if (v714) {
    *((unsigned char *)this + 592) = __p[0];
  }
  LOBYTE(__p[0]) = 0;
  int v709 = sub_18E00DD70((uint64_t)this, (char *)__p, "gnss_use_galileo_measurements");
  if (v709) {
    *((unsigned char *)this + 593) = __p[0];
  }
  LOBYTE(__p[0]) = 0;
  int v704 = sub_18E00DD70((uint64_t)this, (char *)__p, "gnss_use_glonass_measurements");
  if (v704) {
    *((unsigned char *)this + 594) = __p[0];
  }
  LOBYTE(__p[0]) = 0;
  int v699 = sub_18E00DD70((uint64_t)this, (char *)__p, "gnss_use_gps_measurements");
  if (v699) {
    *((unsigned char *)this + 595) = __p[0];
  }
  LOBYTE(__p[0]) = 0;
  int v694 = sub_18E00DD70((uint64_t)this, (char *)__p, "gnss_use_qzss_measurements");
  if (v694) {
    *((unsigned char *)this + 596) = __p[0];
  }
  LOBYTE(__p[0]) = 0;
  int v689 = sub_18E00DD70((uint64_t)this, (char *)__p, "gnss_use_navic_measurements");
  if (v689) {
    *((unsigned char *)this + 597) = __p[0];
  }
  LOBYTE(__p[0]) = 0;
  int v684 = sub_18E00DD70((uint64_t)this, (char *)__p, "gnss_use_beidou_b1_measurements");
  if (v684) {
    *((unsigned char *)this + 598) = __p[0];
  }
  LOBYTE(__p[0]) = 0;
  int v679 = sub_18E00DD70((uint64_t)this, (char *)__p, "gnss_use_beidou_b2a_measurements");
  if (v679) {
    *((unsigned char *)this + 599) = __p[0];
  }
  LOBYTE(__p[0]) = 0;
  int v675 = sub_18E00DD70((uint64_t)this, (char *)__p, "gnss_use_galileo_e1_measurements");
  if (v675) {
    *((unsigned char *)this + 600) = __p[0];
  }
  LOBYTE(__p[0]) = 0;
  int v671 = sub_18E00DD70((uint64_t)this, (char *)__p, "gnss_use_galileo_e5a_measurements");
  if (v671) {
    *((unsigned char *)this + 601) = __p[0];
  }
  LOBYTE(__p[0]) = 0;
  int v667 = sub_18E00DD70((uint64_t)this, (char *)__p, "gnss_use_gps_l1_measurements");
  if (v667) {
    *((unsigned char *)this + 602) = __p[0];
  }
  LOBYTE(__p[0]) = 0;
  int v663 = sub_18E00DD70((uint64_t)this, (char *)__p, "gnss_use_gps_l5_measurements");
  if (v663) {
    *((unsigned char *)this + 603) = __p[0];
  }
  LOBYTE(__p[0]) = 0;
  int v659 = sub_18E00DD70((uint64_t)this, (char *)__p, "gnss_use_qzss_l1_measurements");
  if (v659) {
    *((unsigned char *)this + 604) = __p[0];
  }
  LOBYTE(__p[0]) = 0;
  int v655 = sub_18E00DD70((uint64_t)this, (char *)__p, "gnss_use_qzss_l5_measurements");
  if (v655) {
    *((unsigned char *)this + 605) = __p[0];
  }
  LOBYTE(__p[0]) = 0;
  int v651 = sub_18E00DD70((uint64_t)this, (char *)__p, "gnss_use_doppler_measurements");
  if (v651) {
    *((unsigned char *)this + 606) = __p[0];
  }
  LOBYTE(__p[0]) = 0;
  int v647 = sub_18E00DD70((uint64_t)this, (char *)__p, "gnss_use_psr_measurements");
  if (v647) {
    *((unsigned char *)this + 607) = __p[0];
  }
  LOBYTE(__p[0]) = 0;
  int v643 = sub_18E00DD70((uint64_t)this, (char *)__p, "gnss_process_averaged_doppler_from_phase_tracking");
  if (v643) {
    *((unsigned char *)this + 608) = __p[0];
  }
  LOBYTE(__p[0]) = 0;
  int v640 = sub_18E00DD70((uint64_t)this, (char *)__p, "gnss_process_averaged_doppler");
  if (v640) {
    *((unsigned char *)this + 609) = __p[0];
  }
  LOBYTE(__p[0]) = 0;
  int v637 = sub_18E00DD70((uint64_t)this, (char *)__p, "gnss_process_instantaneous_doppler");
  if (v637) {
    *((unsigned char *)this + 610) = __p[0];
  }
  LODWORD(__p[0]) = 0;
  int v634 = sub_18E00E304((uint64_t)this, (float *)__p, "gnss_minimum_tolerable_carrier_to_noise_ratio");
  if (v634) {
    *((_DWORD *)this + 153) = __p[0];
  }
  char v554 = sub_18E00954C((uint64_t *)this, (double *)this + 77, "gnss_minimum_elevation_deg", -90.0, 90.0);
  char v552 = sub_18E008ACC((uint64_t *)this, (double *)this + 78, "gnss_min_interval_for_adr_differences", 0.0);
  char v550 = sub_18E008ACC((uint64_t *)this, (double *)this + 79, "gnss_max_interval_for_adr_differences", *((double *)this + 78));
  LOBYTE(__p[0]) = 0;
  int v631 = sub_18E00DD70((uint64_t)this, (char *)__p, "propagate_gnss_measurements");
  if (v631) {
    *((unsigned char *)this + 840) = __p[0];
  }
  LOBYTE(__p[0]) = 0;
  int v628 = sub_18E00DD70((uint64_t)this, (char *)__p, "use_latest_dwell_end_time_for_measurement_propagation");
  if (v628) {
    *((unsigned char *)this + 841) = __p[0];
  }
  LOBYTE(__p[0]) = 0;
  int v625 = sub_18E00DD70((uint64_t)this, (char *)__p, "reduce_gnss_measurement_processing_order_priority_for_beidou_B1c");
  if (v625) {
    *((unsigned char *)this + 640) = __p[0];
  }
  LOBYTE(__p[0]) = 0;
  int v622 = sub_18E00DD70((uint64_t)this, (char *)__p, "debug_allow_accessory_vehicle_speed_assistance");
  if (v622) {
    *((unsigned char *)this + 3785) = __p[0];
  }
  LOBYTE(__p[0]) = 0;
  int v619 = sub_18E00DD70((uint64_t)this, (char *)__p, "debug_allow_activity_state_assistance");
  if (v619) {
    *((unsigned char *)this + 3786) = __p[0];
  }
  LOBYTE(__p[0]) = 0;
  int v616 = sub_18E00DD70((uint64_t)this, (char *)__p, "debug_allow_altitude_assistance");
  if (v616) {
    *((unsigned char *)this + 3787) = __p[0];
  }
  LOBYTE(__p[0]) = 0;
  int v613 = sub_18E00DD70((uint64_t)this, (char *)__p, "debug_allow_altitude_change_assistance");
  if (v613) {
    *((unsigned char *)this + 3788) = __p[0];
  }
  LOBYTE(__p[0]) = 0;
  int v610 = sub_18E00DD70((uint64_t)this, (char *)__p, "debug_allow_attitude_change_assistance");
  if (v610) {
    *((unsigned char *)this + 3789) = __p[0];
  }
  LOBYTE(__p[0]) = 0;
  int v608 = sub_18E00DD70((uint64_t)this, (char *)__p, "debug_allow_device_motion_attitude_event");
  if (v608) {
    *((unsigned char *)this + 3790) = __p[0];
  }
  LOBYTE(__p[0]) = 0;
  int v606 = sub_18E00DD70((uint64_t)this, (char *)__p, "debug_allow_fitness_session_assistance");
  if (v606) {
    *((unsigned char *)this + 3791) = __p[0];
  }
  LOBYTE(__p[0]) = 0;
  int v604 = sub_18E00DD70((uint64_t)this, (char *)__p, "debug_allow_l5_measurements_regardless_of_multipath_flag");
  if (v604) {
    *((unsigned char *)this + 3792) = __p[0];
  }
  LOBYTE(__p[0]) = 0;
  int v602 = sub_18E00DD70((uint64_t)this, (char *)__p, "debug_allow_l1_vs_l5_innovation_difference_edits");
  if (v602) {
    *((unsigned char *)this + 3793) = __p[0];
  }
  LOBYTE(__p[0]) = 0;
  int v600 = sub_18E00DD70((uint64_t)this, (char *)__p, "debug_allow_l1_or_l5_measurement_ignore_if_much_worse");
  if (v600) {
    *((unsigned char *)this + 3794) = __p[0];
  }
  LOBYTE(__p[0]) = 0;
  int v598 = sub_18E00DD70((uint64_t)this, (char *)__p, "debug_allow_maps_route_hints_assistance");
  if (v598) {
    *((unsigned char *)this + 3795) = __p[0];
  }
  LOBYTE(__p[0]) = 0;
  int v596 = sub_18E00DD70((uint64_t)this, (char *)__p, "debug_allow_map_vector_assistance");
  if (v596) {
    *((unsigned char *)this + 3796) = __p[0];
  }
  LOBYTE(__p[0]) = 0;
  int v594 = sub_18E00DD70((uint64_t)this, (char *)__p, "debug_allow_mount_state_assistance");
  if (v594) {
    *((unsigned char *)this + 3797) = __p[0];
  }
  LOBYTE(__p[0]) = 0;
  int v592 = sub_18E00DD70((uint64_t)this, (char *)__p, "debug_allow_moving_state_assistance");
  if (v592) {
    *((unsigned char *)this + 3798) = __p[0];
  }
  LOBYTE(__p[0]) = 0;
  int v590 = sub_18E00DD70((uint64_t)this, (char *)__p, "debug_allow_nonholonomic_assistance");
  if (v590) {
    *((unsigned char *)this + 3799) = __p[0];
  }
  LOBYTE(__p[0]) = 0;
  int v588 = sub_18E00DD70((uint64_t)this, (char *)__p, "debug_allow_odometer_assistance");
  if (v588) {
    *((unsigned char *)this + 3800) = __p[0];
  }
  LOBYTE(__p[0]) = 0;
  int v586 = sub_18E00DD70((uint64_t)this, (char *)__p, "debug_allow_pca_based_horizontal_dot_assistance");
  if (v586) {
    *((unsigned char *)this + 3801) = __p[0];
  }
  LOBYTE(__p[0]) = 0;
  int v584 = sub_18E00DD70((uint64_t)this, (char *)__p, "debug_allow_pedometer_assistance");
  if (v584) {
    *((unsigned char *)this + 3802) = __p[0];
  }
  LOBYTE(__p[0]) = 0;
  int v582 = sub_18E00DD70((uint64_t)this, (char *)__p, "debug_allow_position_assistance");
  if (v582) {
    *((unsigned char *)this + 3803) = __p[0];
  }
  LOBYTE(__p[0]) = 0;
  int v580 = sub_18E00DD70((uint64_t)this, (char *)__p, "debug_allow_position_change_assistance");
  if (v580) {
    *((unsigned char *)this + 3804) = __p[0];
  }
  LOBYTE(__p[0]) = 0;
  int v578 = sub_18E00DD70((uint64_t)this, (char *)__p, "debug_allow_position_clamping");
  if (v578) {
    *((unsigned char *)this + 3805) = __p[0];
  }
  LOBYTE(__p[0]) = 0;
  int v576 = sub_18E00DD70((uint64_t)this, (char *)__p, "debug_allow_tunnel_bridge_assistance");
  if (v576) {
    *((unsigned char *)this + 3806) = __p[0];
  }
  LOBYTE(__p[0]) = 0;
  int v574 = sub_18E00DD70((uint64_t)this, (char *)__p, "debug_allow_tunnel_end_point_assistance");
  if (v574) {
    *((unsigned char *)this + 3807) = __p[0];
  }
  LOBYTE(__p[0]) = 0;
  int v572 = sub_18E00DD70((uint64_t)this, (char *)__p, "debug_allow_velocity_assistance");
  if (v572) {
    *((unsigned char *)this + 3808) = __p[0];
  }
  LOBYTE(__p[0]) = 0;
  int v570 = sub_18E00DD70((uint64_t)this, (char *)__p, "debug_allow_vio_assistance");
  if (v570) {
    *((unsigned char *)this + 3809) = __p[0];
  }
  LOBYTE(__p[0]) = 0;
  int v568 = sub_18E00DD70((uint64_t)this, (char *)__p, "debug_allow_vlf_assistance");
  if (v568) {
    *((unsigned char *)this + 3810) = __p[0];
  }
  LOBYTE(__p[0]) = 0;
  int v566 = sub_18E00DD70((uint64_t)this, (char *)__p, "debug_enable_gnss_msr_processing");
  if (v566) {
    *((unsigned char *)this + 3811) = __p[0];
  }
  LOBYTE(__p[0]) = 0;
  int v564 = sub_18E00DD70((uint64_t)this, (char *)__p, "debug_enable_gnss_msr_processing_test_mode");
  if (v564) {
    *((unsigned char *)this + 3812) = __p[0];
  }
  LOBYTE(__p[0]) = 0;
  int v428 = sub_18E00DD70((uint64_t)this, (char *)__p, "debug_enable_vl_position_msr_processing");
  if (v428) {
    *((unsigned char *)this + 3813) = __p[0];
  }
  LOBYTE(__p[0]) = 0;
  int v429 = sub_18E00DD70((uint64_t)this, (char *)__p, "debug_enable_wifi_2d_to_3d_with_altitude_assistance");
  if (v429) {
    *((unsigned char *)this + 3814) = __p[0];
  }
  LOBYTE(__p[0]) = 0;
  int v430 = sub_18E00DD70((uint64_t)this, (char *)__p, "debug_enable_wifi_msr_processing");
  if (v430) {
    *((unsigned char *)this + 3815) = __p[0];
  }
  LOBYTE(__p[0]) = 0;
  int v431 = sub_18E00DD70((uint64_t)this, (char *)__p, "debug_enable_satellite_los_estimator");
  if (v431) {
    *((unsigned char *)this + 3816) = __p[0];
  }
  LOBYTE(__p[0]) = 0;
  int v432 = sub_18E00DD70((uint64_t)this, (char *)__p, "debug_enable_satellite_los_estimator_wifi_crosschecks");
  if (v432) {
    *((unsigned char *)this + 3817) = __p[0];
  }
  LOBYTE(__p[0]) = 0;
  int v433 = sub_18E00DD70((uint64_t)this, (char *)__p, "debug_enable_satellite_los_estimator_test_mode");
  if (v433) {
    *((unsigned char *)this + 3818) = __p[0];
  }
  LOBYTE(__p[0]) = 0;
  int v434 = sub_18E00DD70((uint64_t)this, (char *)__p, "debug_select_use_raw_sensor_events");
  if (v434) {
    *((unsigned char *)this + 3819) = __p[0];
  }
  LOBYTE(__p[0]) = 0;
  int v435 = sub_18E00DD70((uint64_t)this, (char *)__p, "debug_allow_vehicle_fixed_parameterization");
  if (v435) {
    *((unsigned char *)this + 3820) = __p[0];
  }
  LODWORD(__p[0]) = 0;
  int v436 = sub_18E00E7E4((uint64_t)this, (int *)__p, "debug_artificial_gnss_time_offset_ms");
  if (v436) {
    *((_DWORD *)this + 956) = __p[0];
  }
  LOBYTE(__p[0]) = 0;
  int v437 = sub_18E00DD70((uint64_t)this, (char *)__p, "debug_gnss_preprocessor_ignore_non_tracking_uncertainty");
  if (v437) {
    *((unsigned char *)this + 3828) = __p[0];
  }
  char v443 = v634 | v637 | v640 | v643 | v647 | v631 | v628 | v625 | v622 | v619 | v616 | v613 | v610 | v651 | v655 | v659 | v663 | v667 | v671 | v675 | v679 | v684 | v689 | v694 | v699 | v704 | v709 | v714 | v719 | v725 | v730 | v735 | v740 | v745 | v750 | v755 | v760 | v765 | v770 | v775 | v780 | v785 | v790 | v795 | v800 | v805 | v810 | v815 | v558 | v556 | v554 | v552 | v550 | v562 | v560 | v608 | v606 | v604 | v602 | v600 | v598 | v596 | v594 | v592 | v590 | v588 | v586 | v584 | v582 | v580 | v578 | v576 | v574 | v572 | v570 | v568 | v566 | v564 | v428 | v429 | v430 | v431 | v432 | v433 | v434 | v435 | v436 | v437;
  if ((v443 & 1) == 0)
  {
    *((unsigned char *)this + 33) = 0;
    LOWORD(v826.__r_.__value_.__l.__data_) = 12;
    v818.__r_.__value_.__s.__data_[0] = 4;
    if (*((char *)this + 31) < 0)
    {
      sub_18DEDE668(__p, *((void **)this + 1), *((void *)this + 2));
    }
    else
    {
      *(_OWORD *)long long __p = *(_OWORD *)((char *)this + 8);
      *(void *)&long long v820 = *((void *)this + 3);
    }
    v444 = __p;
    if (SBYTE7(v820) < 0) {
      LOBYTE(v444) = __p[0];
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v826, (unsigned __int8 *)&v818, "Error: Invalid configuration option: %s", v438, v439, v440, v441, v442, (char)v444);
    if (SBYTE7(v820) < 0) {
      operator delete(__p[0]);
    }
  }
  if (SHIBYTE(v817.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v817.__r_.__value_.__l.__data_);
  }
  return v443 & 1;
}

void sub_18E0087D4(_Unwind_Exception *a1)
{
  sub_18E00C1D8((uint64_t)&STACK[0x320]);
  if (*(char *)(v2 - 185) < 0) {
    operator delete(*(void **)(v1 + 272));
  }
  if (SLOBYTE(STACK[0x317]) < 0) {
    operator delete((void *)STACK[0x300]);
  }
  if (SLOBYTE(STACK[0x2FF]) < 0) {
    operator delete((void *)STACK[0x2E8]);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_18E008ACC(uint64_t *a1, double *a2, const char *a3, double a4)
{
  double v32 = 0.0;
  uint64_t result = sub_18E00DBEC((uint64_t)a1, &v32, a3);
  if (result)
  {
    if ((*(void *)&v32 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && v32 > a4)
    {
      *a2 = v32;
      return 1;
    }
    else
    {
      sub_18DF06614((uint64_t)&v28);
      size_t v10 = strlen(a3);
      char v11 = sub_18DEDD538(&v28, (uint64_t)a3, v10);
      sub_18DEDD538(v11, (uint64_t)" - value (", 10);
      __int16 v12 = (void *)std::ostream::operator<<();
      sub_18DEDD538(v12, (uint64_t)") must be greater than ", 23);
      std::ostream::operator<<();
      sub_18DEDD9B8((uint64_t)v29, __p);
      unint64_t v13 = a1[7];
      unint64_t v14 = a1[6];
      if (v14 >= v13)
      {
        uint64_t v16 = a1[5];
        unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - v16) >> 3);
        unint64_t v18 = v17 + 1;
        if (v17 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_18DEE1FC8();
        }
        unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - v16) >> 3);
        if (2 * v19 > v18) {
          unint64_t v18 = 2 * v19;
        }
        if (v19 >= 0x555555555555555) {
          unint64_t v20 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v20 = v18;
        }
        v33[4] = a1 + 7;
        if (v20) {
          size_t v21 = (char *)sub_18E00C070((uint64_t)(a1 + 7), v20);
        }
        else {
          size_t v21 = 0;
        }
        long long v22 = &v21[24 * v17];
        v33[0] = v21;
        v33[1] = v22;
        v33[3] = &v21[24 * v20];
        long long v23 = *(_OWORD *)__p;
        *((void *)v22 + 2) = v27;
        *(_OWORD *)long long v22 = v23;
        __p[1] = 0;
        uint64_t v27 = 0;
        __p[0] = 0;
        v33[2] = v22 + 24;
        sub_18E00BFF8(a1 + 5, v33);
        uint64_t v24 = a1[6];
        sub_18E00C1D8((uint64_t)v33);
        int v25 = SHIBYTE(v27);
        a1[6] = v24;
        if (v25 < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        long long v15 = *(_OWORD *)__p;
        *(void *)(v14 + 16) = v27;
        *(_OWORD *)unint64_t v14 = v15;
        a1[6] = v14 + 24;
      }
      uint64_t v28 = *MEMORY[0x1E4FBA418];
      *(void *)((char *)&v29[-1] + *(void *)(v28 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
      v29[0] = MEMORY[0x1E4FBA470] + 16;
      if (v30 < 0) {
        operator delete((void *)v29[8]);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x192FA6190](&v31);
      return 0;
    }
  }
  return result;
}

void sub_18E008D9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  sub_18E00C1D8(v15 - 104);
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_18DF067AC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_18E008DDC(uint64_t *a1, double *a2, const char *a3, double a4)
{
  double v32 = 0.0;
  uint64_t result = sub_18E00DBEC((uint64_t)a1, &v32, a3);
  if (result)
  {
    if ((*(void *)&v32 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v32 < a4)
    {
      sub_18DF06614((uint64_t)&v28);
      size_t v10 = strlen(a3);
      char v11 = sub_18DEDD538(&v28, (uint64_t)a3, v10);
      sub_18DEDD538(v11, (uint64_t)" - value (", 10);
      __int16 v12 = (void *)std::ostream::operator<<();
      sub_18DEDD538(v12, (uint64_t)") must be greater or equal to ", 30);
      std::ostream::operator<<();
      sub_18DEDD9B8((uint64_t)v29, __p);
      unint64_t v13 = a1[7];
      unint64_t v14 = a1[6];
      if (v14 >= v13)
      {
        uint64_t v16 = a1[5];
        unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - v16) >> 3);
        unint64_t v18 = v17 + 1;
        if (v17 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_18DEE1FC8();
        }
        unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - v16) >> 3);
        if (2 * v19 > v18) {
          unint64_t v18 = 2 * v19;
        }
        if (v19 >= 0x555555555555555) {
          unint64_t v20 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v20 = v18;
        }
        v33[4] = a1 + 7;
        if (v20) {
          size_t v21 = (char *)sub_18E00C070((uint64_t)(a1 + 7), v20);
        }
        else {
          size_t v21 = 0;
        }
        long long v22 = &v21[24 * v17];
        v33[0] = v21;
        v33[1] = v22;
        v33[3] = &v21[24 * v20];
        long long v23 = *(_OWORD *)__p;
        *((void *)v22 + 2) = v27;
        *(_OWORD *)long long v22 = v23;
        __p[1] = 0;
        uint64_t v27 = 0;
        __p[0] = 0;
        v33[2] = v22 + 24;
        sub_18E00BFF8(a1 + 5, v33);
        uint64_t v24 = a1[6];
        sub_18E00C1D8((uint64_t)v33);
        int v25 = SHIBYTE(v27);
        a1[6] = v24;
        if (v25 < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        long long v15 = *(_OWORD *)__p;
        *(void *)(v14 + 16) = v27;
        *(_OWORD *)unint64_t v14 = v15;
        a1[6] = v14 + 24;
      }
      uint64_t v28 = *MEMORY[0x1E4FBA418];
      *(void *)((char *)&v29[-1] + *(void *)(v28 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
      v29[0] = MEMORY[0x1E4FBA470] + 16;
      if (v30 < 0) {
        operator delete((void *)v29[8]);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x192FA6190](&v31);
      return 0;
    }
    else
    {
      *a2 = v32;
      return 1;
    }
  }
  return result;
}

void sub_18E0090AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  sub_18E00C1D8(v15 - 104);
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_18DF067AC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_18E0090EC(uint64_t *a1, double *a2, const char *a3, double a4, double a5)
{
  double v36 = 0.0;
  uint64_t result = sub_18E00DBEC((uint64_t)a1, &v36, a3);
  if (result)
  {
    if ((*(void *)&v36 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && v36 > a4 && v36 < a5)
    {
      *a2 = v36;
      return 1;
    }
    else
    {
      sub_18DF06614((uint64_t)&v32);
      size_t v13 = strlen(a3);
      unint64_t v14 = sub_18DEDD538(&v32, (uint64_t)a3, v13);
      sub_18DEDD538(v14, (uint64_t)" - value (", 10);
      uint64_t v15 = (void *)std::ostream::operator<<();
      sub_18DEDD538(v15, (uint64_t)") must be greater than ", 23);
      uint64_t v16 = (void *)std::ostream::operator<<();
      sub_18DEDD538(v16, (uint64_t)" and less than ", 15);
      std::ostream::operator<<();
      sub_18DEDD9B8((uint64_t)v33, __p);
      unint64_t v17 = a1[7];
      unint64_t v18 = a1[6];
      if (v18 >= v17)
      {
        uint64_t v20 = a1[5];
        unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - v20) >> 3);
        unint64_t v22 = v21 + 1;
        if (v21 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_18DEE1FC8();
        }
        unint64_t v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - v20) >> 3);
        if (2 * v23 > v22) {
          unint64_t v22 = 2 * v23;
        }
        if (v23 >= 0x555555555555555) {
          unint64_t v24 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v24 = v22;
        }
        v37[4] = a1 + 7;
        if (v24) {
          int v25 = (char *)sub_18E00C070((uint64_t)(a1 + 7), v24);
        }
        else {
          int v25 = 0;
        }
        long long v26 = &v25[24 * v21];
        v37[0] = v25;
        v37[1] = v26;
        v37[3] = &v25[24 * v24];
        long long v27 = *(_OWORD *)__p;
        *((void *)v26 + 2) = v31;
        *(_OWORD *)long long v26 = v27;
        __p[1] = 0;
        uint64_t v31 = 0;
        __p[0] = 0;
        v37[2] = v26 + 24;
        sub_18E00BFF8(a1 + 5, v37);
        uint64_t v28 = a1[6];
        sub_18E00C1D8((uint64_t)v37);
        int v29 = SHIBYTE(v31);
        a1[6] = v28;
        if (v29 < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        long long v19 = *(_OWORD *)__p;
        *(void *)(v18 + 16) = v31;
        *(_OWORD *)unint64_t v18 = v19;
        a1[6] = v18 + 24;
      }
      uint64_t v32 = *MEMORY[0x1E4FBA418];
      *(void *)((char *)&v33[-1] + *(void *)(v32 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
      v33[0] = MEMORY[0x1E4FBA470] + 16;
      if (v34 < 0) {
        operator delete((void *)v33[8]);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x192FA6190](&v35);
      return 0;
    }
  }
  return result;
}

void sub_18E0093E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  sub_18E00C1D8(v15 - 120);
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_18DF067AC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_18E009424(uint64_t a1, std::string *a2, const char *a3, char *__s)
{
  sub_18DEDE7B0(&__p, __s);
  memset(&v11, 0, sizeof(v11));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    sub_18DEDE668(&__str, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string __str = __p;
  }
  uint64_t v7 = sub_18E00DC58(a1, (uint64_t)&v11, a3);
  if ((v7 & 1) == 0) {
    std::string::operator=(&v11, &__str);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__str.__r_.__value_.__l.__data_);
    if ((v7 & 1) == 0) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  if (v7) {
LABEL_10:
  }
    std::string::operator=(a2, &v11);
LABEL_11:
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v7;
}

void sub_18E009508(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_18E00954C(uint64_t *a1, double *a2, const char *a3, double a4, double a5)
{
  double v36 = 0.0;
  uint64_t result = sub_18E00DBEC((uint64_t)a1, &v36, a3);
  if (result)
  {
    if ((*(void *)&v36 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && v36 >= a4 && v36 <= a5)
    {
      *a2 = v36;
      return 1;
    }
    else
    {
      sub_18DF06614((uint64_t)&v32);
      size_t v13 = strlen(a3);
      unint64_t v14 = sub_18DEDD538(&v32, (uint64_t)a3, v13);
      sub_18DEDD538(v14, (uint64_t)" - value (", 10);
      uint64_t v15 = (void *)std::ostream::operator<<();
      sub_18DEDD538(v15, (uint64_t)") must be greater or equal to ", 30);
      uint64_t v16 = (void *)std::ostream::operator<<();
      sub_18DEDD538(v16, (uint64_t)" and less or equal to ", 22);
      std::ostream::operator<<();
      sub_18DEDD9B8((uint64_t)v33, __p);
      unint64_t v17 = a1[7];
      unint64_t v18 = a1[6];
      if (v18 >= v17)
      {
        uint64_t v20 = a1[5];
        unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - v20) >> 3);
        unint64_t v22 = v21 + 1;
        if (v21 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_18DEE1FC8();
        }
        unint64_t v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - v20) >> 3);
        if (2 * v23 > v22) {
          unint64_t v22 = 2 * v23;
        }
        if (v23 >= 0x555555555555555) {
          unint64_t v24 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v24 = v22;
        }
        v37[4] = a1 + 7;
        if (v24) {
          int v25 = (char *)sub_18E00C070((uint64_t)(a1 + 7), v24);
        }
        else {
          int v25 = 0;
        }
        long long v26 = &v25[24 * v21];
        v37[0] = v25;
        v37[1] = v26;
        v37[3] = &v25[24 * v24];
        long long v27 = *(_OWORD *)__p;
        *((void *)v26 + 2) = v31;
        *(_OWORD *)long long v26 = v27;
        __p[1] = 0;
        uint64_t v31 = 0;
        __p[0] = 0;
        v37[2] = v26 + 24;
        sub_18E00BFF8(a1 + 5, v37);
        uint64_t v28 = a1[6];
        sub_18E00C1D8((uint64_t)v37);
        int v29 = SHIBYTE(v31);
        a1[6] = v28;
        if (v29 < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        long long v19 = *(_OWORD *)__p;
        *(void *)(v18 + 16) = v31;
        *(_OWORD *)unint64_t v18 = v19;
        a1[6] = v18 + 24;
      }
      uint64_t v32 = *MEMORY[0x1E4FBA418];
      *(void *)((char *)&v33[-1] + *(void *)(v32 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
      v33[0] = MEMORY[0x1E4FBA470] + 16;
      if (v34 < 0) {
        operator delete((void *)v33[8]);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x192FA6190](&v35);
      return 0;
    }
  }
  return result;
}

void sub_18E009844(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  sub_18E00C1D8(v15 - 120);
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_18DF067AC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_18E009884(uint64_t a1, std::string *a2, const char *a3)
{
  sub_18DEDE7B0(&__str, "");
  uint64_t v6 = sub_18E00DC58(a1, (uint64_t)a2, a3);
  if ((v6 & 1) == 0) {
    std::string::operator=(a2, &__str);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  return v6;
}

void sub_18E009904(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_18E009920(uint64_t *a1, unsigned int *a2, const char *a3, unsigned int a4)
{
  v41[114] = *MEMORY[0x1E4F143B8];
  if (sub_18E00C3DC((uint64_t)a1, __s, a3))
  {
    int v37 = 0;
    size_t v8 = strlen(__s);
    if (!v8) {
      goto LABEL_30;
    }
    int v9 = __s[0];
    size_t v10 = __s;
    if (__s[0] == 45 || __s[0] == 43) {
      size_t v10 = &__s[1];
    }
    LOBYTE(v30.__vftable) = 0;
    HIDWORD(v30.__vftable) = 1;
    uint64_t v31 = &v37;
    uint64_t v32 = v10;
    unint64_t v33 = &__s[v8];
    int v11 = sub_18E00DF9C((uint64_t)&v30);
    if (v9 == 45)
    {
      unsigned int v12 = -v37;
      int v37 = -v37;
      if ((v11 & 1) == 0)
      {
LABEL_30:
        std::bad_cast::bad_cast(&v30);
        v30.__vftable = (std::bad_cast_vtbl *)&unk_1EDD12A68;
        uint64_t v31 = (int *)MEMORY[0x1E4FBA308];
        uint64_t v32 = (char *)MEMORY[0x1E4FBA3B0];
        sub_18E00D464((uint64_t)&v30);
      }
    }
    else
    {
      if (!v11) {
        goto LABEL_30;
      }
      unsigned int v12 = v37;
    }
    if (v12 > a4)
    {
      *a2 = v12;
      return 1;
    }
    sub_18DF06614((uint64_t)__s);
    size_t v14 = strlen(a3);
    uint64_t v15 = sub_18DEDD538(__s, (uint64_t)a3, v14);
    sub_18DEDD538(v15, (uint64_t)" - value (", 10);
    uint64_t v16 = (void *)std::ostream::operator<<();
    sub_18DEDD538(v16, (uint64_t)") must be greater than ", 23);
    std::ostream::operator<<();
    sub_18DEDD9B8((uint64_t)v39, __p);
    unint64_t v17 = a1[7];
    unint64_t v18 = a1[6];
    if (v18 >= v17)
    {
      uint64_t v20 = a1[5];
      unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - v20) >> 3);
      unint64_t v22 = v21 + 1;
      if (v21 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_18DEE1FC8();
      }
      unint64_t v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - v20) >> 3);
      if (2 * v23 > v22) {
        unint64_t v22 = 2 * v23;
      }
      if (v23 >= 0x555555555555555) {
        unint64_t v24 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v24 = v22;
      }
      char v34 = a1 + 7;
      if (v24) {
        int v25 = (std::bad_cast_vtbl *)sub_18E00C070((uint64_t)(a1 + 7), v24);
      }
      else {
        int v25 = 0;
      }
      long long v26 = v25 + v21;
      v30.__vftable = v25;
      uint64_t v31 = (int *)v26;
      unint64_t v33 = (char *)&v25[v24];
      long long v27 = *(_OWORD *)__p;
      v26->what = v36;
      *(_OWORD *)&v26->~bad_cast = v27;
      __p[1] = 0;
      double v36 = 0;
      __p[0] = 0;
      uint64_t v32 = (char *)&v26[1];
      sub_18E00BFF8(a1 + 5, &v30);
      uint64_t v28 = a1[6];
      sub_18E00C1D8((uint64_t)&v30);
      int v29 = SHIBYTE(v36);
      a1[6] = v28;
      if (v29 < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      long long v19 = *(_OWORD *)__p;
      *(void *)(v18 + 16) = v36;
      *(_OWORD *)unint64_t v18 = v19;
      a1[6] = v18 + 24;
    }
    *(void *)__s = *MEMORY[0x1E4FBA418];
    *(void *)&__s[*(void *)(*(void *)__s - 24)] = *(void *)(MEMORY[0x1E4FBA418] + 24);
    v39[0] = MEMORY[0x1E4FBA470] + 16;
    if (v40 < 0) {
      operator delete((void *)v39[8]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x192FA6190](v41);
  }
  return 0;
}

void sub_18E009CBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,char a21)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  sub_18DF067AC((uint64_t)&a21);
  _Unwind_Resume(a1);
}

uint64_t sub_18E009D74(uint64_t *a1, float *a2, const char *a3)
{
  float v30 = 0.0;
  int v6 = sub_18E00E304((uint64_t)a1, &v30, a3);
  uint64_t result = 0;
  if (v6)
  {
    if ((LODWORD(v30) & 0x7FFFFFFFu) > 0x7F7FFFFF || v30 < 0.0)
    {
      sub_18DF06614((uint64_t)&v26);
      size_t v8 = strlen(a3);
      int v9 = sub_18DEDD538(&v26, (uint64_t)a3, v8);
      sub_18DEDD538(v9, (uint64_t)" - value (", 10);
      size_t v10 = (void *)std::ostream::operator<<();
      sub_18DEDD538(v10, (uint64_t)") must be greater or equal to ", 30);
      std::ostream::operator<<();
      sub_18DEDD9B8((uint64_t)v27, __p);
      unint64_t v11 = a1[7];
      unint64_t v12 = a1[6];
      if (v12 >= v11)
      {
        uint64_t v14 = a1[5];
        unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - v14) >> 3);
        unint64_t v16 = v15 + 1;
        if (v15 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_18DEE1FC8();
        }
        unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v14) >> 3);
        if (2 * v17 > v16) {
          unint64_t v16 = 2 * v17;
        }
        if (v17 >= 0x555555555555555) {
          unint64_t v18 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v18 = v16;
        }
        v31[4] = a1 + 7;
        if (v18) {
          long long v19 = (char *)sub_18E00C070((uint64_t)(a1 + 7), v18);
        }
        else {
          long long v19 = 0;
        }
        uint64_t v20 = &v19[24 * v15];
        v31[0] = v19;
        v31[1] = v20;
        double v31[3] = &v19[24 * v18];
        long long v21 = *(_OWORD *)__p;
        *((void *)v20 + 2) = v25;
        *(_OWORD *)uint64_t v20 = v21;
        __p[1] = 0;
        uint64_t v25 = 0;
        __p[0] = 0;
        v31[2] = v20 + 24;
        sub_18E00BFF8(a1 + 5, v31);
        uint64_t v22 = a1[6];
        sub_18E00C1D8((uint64_t)v31);
        int v23 = SHIBYTE(v25);
        a1[6] = v22;
        if (v23 < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        long long v13 = *(_OWORD *)__p;
        *(void *)(v12 + 16) = v25;
        *(_OWORD *)unint64_t v12 = v13;
        a1[6] = v12 + 24;
      }
      uint64_t v26 = *MEMORY[0x1E4FBA418];
      *(void *)((char *)&v27[-1] + *(void *)(v26 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
      v27[0] = MEMORY[0x1E4FBA470] + 16;
      if (v28 < 0) {
        operator delete((void *)v27[8]);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x192FA6190](&v29);
      return 0;
    }
    else
    {
      *a2 = v30;
      return 1;
    }
  }
  return result;
}

void sub_18E00A04C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  sub_18E00C1D8(v15 - 104);
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_18DF067AC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_18E00A08C(uint64_t *a1, _DWORD *a2, const char *a3)
{
  int v30 = 0;
  int v6 = sub_18E00E7E4((uint64_t)a1, &v30, a3);
  uint64_t result = 0;
  if (v6)
  {
    if (v30 < 0)
    {
      sub_18DF06614((uint64_t)&v26);
      size_t v8 = strlen(a3);
      int v9 = sub_18DEDD538(&v26, (uint64_t)a3, v8);
      sub_18DEDD538(v9, (uint64_t)" - value (", 10);
      size_t v10 = (void *)std::ostream::operator<<();
      sub_18DEDD538(v10, (uint64_t)") must be greater or equal to ", 30);
      std::ostream::operator<<();
      sub_18DEDD9B8((uint64_t)v27, __p);
      unint64_t v11 = a1[7];
      unint64_t v12 = a1[6];
      if (v12 >= v11)
      {
        uint64_t v14 = a1[5];
        unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - v14) >> 3);
        unint64_t v16 = v15 + 1;
        if (v15 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_18DEE1FC8();
        }
        unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v14) >> 3);
        if (2 * v17 > v16) {
          unint64_t v16 = 2 * v17;
        }
        if (v17 >= 0x555555555555555) {
          unint64_t v18 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v18 = v16;
        }
        v31[4] = a1 + 7;
        if (v18) {
          long long v19 = (char *)sub_18E00C070((uint64_t)(a1 + 7), v18);
        }
        else {
          long long v19 = 0;
        }
        uint64_t v20 = &v19[24 * v15];
        v31[0] = v19;
        v31[1] = v20;
        double v31[3] = &v19[24 * v18];
        long long v21 = *(_OWORD *)__p;
        *((void *)v20 + 2) = v25;
        *(_OWORD *)uint64_t v20 = v21;
        __p[1] = 0;
        uint64_t v25 = 0;
        __p[0] = 0;
        v31[2] = v20 + 24;
        sub_18E00BFF8(a1 + 5, v31);
        uint64_t v22 = a1[6];
        sub_18E00C1D8((uint64_t)v31);
        int v23 = SHIBYTE(v25);
        a1[6] = v22;
        if (v23 < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        long long v13 = *(_OWORD *)__p;
        *(void *)(v12 + 16) = v25;
        *(_OWORD *)unint64_t v12 = v13;
        a1[6] = v12 + 24;
      }
      uint64_t v26 = *MEMORY[0x1E4FBA418];
      *(void *)((char *)&v27[-1] + *(void *)(v26 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
      v27[0] = MEMORY[0x1E4FBA470] + 16;
      if (v28 < 0) {
        operator delete((void *)v27[8]);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x192FA6190](&v29);
      return 0;
    }
    else
    {
      *a2 = v30;
      return 1;
    }
  }
  return result;
}

void sub_18E00A344(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  sub_18E00C1D8(v15 - 88);
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_18DF067AC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

raven::RavenParameters *raven::RavenParameters::RavenParameters(raven::RavenParameters *this, const raven::RavenPlatformInfo *a2)
{
  char v4 = (char *)this + 547;
  *(void *)this = &unk_1EDD16178;
  sub_18DEDE7B0((void *)this + 1, "");
  *(void *)this = &unk_1EDD13B48;
  *((unsigned char *)this + 33) = 0;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = xmmword_18E1FC1B0;
  *(_OWORD *)((char *)this + 88) = xmmword_18E1FC1C0;
  *(_OWORD *)((char *)this + 104) = xmmword_18E1FC1D0;
  *(int64x2_t *)((char *)this + 120) = vdupq_n_s64(0x3EE4F8B588E368F1uLL);
  *(_OWORD *)((char *)this + 136) = xmmword_18E1FC1D0;
  *(_OWORD *)((char *)this + 152) = xmmword_18E1FC1C0;
  *(_OWORD *)((char *)this + 168) = xmmword_18E1FC1D0;
  *(int64x2_t *)((char *)this + 184) = vdupq_n_s64(0x3F9B573EAB367A10uLL);
  *(_OWORD *)((char *)this + 200) = xmmword_18E1FC1D0;
  *(_OWORD *)((char *)this + 216) = xmmword_18E1FC1C0;
  *(_OWORD *)((char *)this + 232) = xmmword_18E1FC1D0;
  *(_OWORD *)((char *)this + 248) = xmmword_18E1FC1E0;
  *((void *)this + 33) = 0x3FF0000000000000;
  __asm { FMOV            V2.2D, #1.0 }
  *((_OWORD *)this + 17) = _Q2;
  *((_OWORD *)this + 18) = xmmword_18E1FC1F0;
  *((_OWORD *)this + 19) = xmmword_18E1FC200;
  *((_OWORD *)this + 20) = xmmword_18E1FC210;
  *((_OWORD *)this + 21) = xmmword_18E1FC220;
  *((_OWORD *)this + 22) = xmmword_18E1FC230;
  *((_OWORD *)this + 23) = xmmword_18E1FC240;
  *((_OWORD *)this + 24) = xmmword_18E1FC250;
  *((_OWORD *)this + 25) = xmmword_18E1FC260;
  *((void *)this + 52) = 0x3F847AE147AE147BLL;
  *((_DWORD *)this + 106) = 2;
  *((_OWORD *)this + 27) = xmmword_18E1FC270;
  *((_OWORD *)this + 28) = xmmword_18E1FC280;
  *((_OWORD *)this + 29) = xmmword_18E1FC290;
  *((_OWORD *)this + 30) = xmmword_18E1FC2A0;
  *((_OWORD *)this + 31) = xmmword_18E1FC2B0;
  *((_OWORD *)this + 32) = xmmword_18E1FC2C0;
  *((_OWORD *)this + 33) = xmmword_18E1FC2D0;
  *((_WORD *)this + 272) = 257;
  *((unsigned char *)this + 546) = 1;
  *(_DWORD *)char v4 = 0;
  *((unsigned char *)this + 551) = 1;
  *((_DWORD *)this + 138) = 0;
  *((_OWORD *)this + 35) = xmmword_18E1FC2E0;
  *((_DWORD *)this + 144) = 0x1000000;
  *((unsigned char *)this + 580) = 0;
  *((_DWORD *)this + 146) = 0;
  *((unsigned char *)this + 588) = 0;
  *(void *)(v4 + 42) = 0x101010101010101;
  *((unsigned char *)this + 597) = 0;
  *(void *)((char *)this + 603) = 0x101010101010101;
  *(void *)((char *)this + 598) = 0x101010101010101;
  *((_DWORD *)this + 153) = 1096810496;
  *((void *)this + 77) = 0x3FE0000000000000;
  *((_OWORD *)this + 39) = xmmword_18E1FC2F0;
  *((_WORD *)this + 320) = 0;
  *((void *)this + 81) = 0x3F847AE147AE147BLL;
  *((_OWORD *)this + 41) = xmmword_18E1FC300;
  *((_OWORD *)this + 42) = xmmword_18E1FC310;
  *((_OWORD *)this + 43) = xmmword_18E1FC320;
  *((_OWORD *)this + 44) = xmmword_18E1FC330;
  *((_OWORD *)this + 45) = xmmword_18E1FC340;
  *((_OWORD *)this + 46) = xmmword_18E1FC350;
  *((_OWORD *)this + 47) = xmmword_18E1FC360;
  *((_OWORD *)this + 48) = xmmword_18E1FC370;
  *((_OWORD *)this + 49) = xmmword_18E1FC380;
  *((_OWORD *)this + 50) = xmmword_18E1FC390;
  *((void *)this + 102) = 0x3DB5FD7FE1796495;
  *((_DWORD *)this + 206) = 2;
  *((void *)this + 104) = 0x3FE0000000000000;
  *((_WORD *)this + 420) = 256;
  *((_OWORD *)this + 53) = xmmword_18E1FC3A0;
  *((_OWORD *)this + 54) = xmmword_18E1FC3B0;
  *((_OWORD *)this + 55) = xmmword_18E1FC3C0;
  *((_OWORD *)this + 56) = xmmword_18E1FC3D0;
  *((_OWORD *)this + 57) = xmmword_18E1FC3E0;
  *((_OWORD *)this + 58) = xmmword_18E1FC3F0;
  *((_OWORD *)this + 59) = xmmword_18E1FC400;
  *((_OWORD *)this + 60) = xmmword_18E1FC410;
  *((void *)this + 122) = 0x3FF0000000000000;
  *((_DWORD *)this + 246) = 350;
  *((_OWORD *)this + 62) = xmmword_18E1FC420;
  *((_OWORD *)this + 63) = xmmword_18E1FC430;
  *((void *)this + 128) = 0x3FF0000000000000;
  *((_DWORD *)this + 258) = 3;
  *((_OWORD *)this + 65) = xmmword_18E1FC440;
  *((_OWORD *)this + 66) = xmmword_18E1FC450;
  *((_OWORD *)this + 67) = xmmword_18E1FC460;
  *((_OWORD *)this + 68) = _Q2;
  *((_OWORD *)this + 69) = xmmword_18E1FC470;
  *((_OWORD *)this + 70) = xmmword_18E1FC480;
  *((_OWORD *)this + 71) = xmmword_18E1FC490;
  *((_OWORD *)this + 72) = xmmword_18E1FC4A0;
  *((_OWORD *)this + 73) = xmmword_18E1FC4B0;
  *((void *)this + 148) = 0x4018000000000000;
  *((_DWORD *)this + 298) = 3;
  *((_OWORD *)this + 75) = xmmword_18E1FC4C0;
  *((_OWORD *)this + 76) = xmmword_18E1FC4D0;
  *((_OWORD *)this + 77) = xmmword_18E1FC4E0;
  *((_OWORD *)this + 78) = xmmword_18E1FC4F0;
  *((_OWORD *)this + 79) = xmmword_18E1FC4C0;
  *((_DWORD *)this + 320) = 6;
  *((void *)this + 161) = 0x4000000000000000;
  *((_DWORD *)this + 324) = 6;
  *((void *)this + 163) = 0x4000000000000000;
  *((_DWORD *)this + 328) = 2;
  *((void *)this + 165) = 0x4000000000000000;
  *((_OWORD *)this + 83) = xmmword_18E1FC500;
  *((_OWORD *)this + 84) = xmmword_18E1FC510;
  *((_OWORD *)this + 85) = xmmword_18E1FC520;
  *((_OWORD *)this + 86) = xmmword_18E1FC530;
  __asm { FMOV            V2.2D, #6.0 }
  *((_OWORD *)this + 87) = _Q2;
  *((_OWORD *)this + 88) = xmmword_18E1FC540;
  __asm { FMOV            V2.2D, #3.0 }
  *((_OWORD *)this + 89) = _Q2;
  *((_OWORD *)this + 90) = _Q2;
  *((_OWORD *)this + 91) = xmmword_18E1FC550;
  *((_DWORD *)this + 368) = 2;
  *((void *)this + 185) = 0x4024000000000000;
  *((int64x2_t *)this + 93) = vdupq_n_s64(0x3FE0CCCCCCCCCCCDuLL);
  *((_OWORD *)this + 94) = xmmword_18E1FC560;
  *((_OWORD *)this + 95) = xmmword_18E1FC570;
  *((_OWORD *)this + 96) = xmmword_18E1FC580;
  *((int64x2_t *)this + 97) = vdupq_n_s64(0x4066800000000000uLL);
  *((_OWORD *)this + 98) = xmmword_18E1FC590;
  *((_OWORD *)this + 99) = xmmword_18E1FC5A0;
  *((_OWORD *)this + 100) = xmmword_18E1FC5B0;
  *((_OWORD *)this + 101) = xmmword_18E1FC5C0;
  *((_OWORD *)this + 102) = xmmword_18E1FC5D0;
  *((void *)this + 206) = 0;
  *(_OWORD *)((char *)this + 1656) = xmmword_18E1FC890;
  *(_OWORD *)((char *)this + 1672) = unk_18E1FC8A0;
  *(_OWORD *)((char *)this + 1688) = xmmword_18E1FC890;
  *(_OWORD *)((char *)this + 1704) = unk_18E1FC8A0;
  *(_OWORD *)((char *)this + 1720) = xmmword_18E1FC890;
  *(_OWORD *)((char *)this + 1736) = unk_18E1FC8A0;
  *(_OWORD *)((char *)this + 1752) = xmmword_18E1FC890;
  *(_OWORD *)((char *)this + 1768) = unk_18E1FC8A0;
  *(_OWORD *)((char *)this + 1784) = xmmword_18E1FC890;
  *(_OWORD *)((char *)this + 1800) = unk_18E1FC8A0;
  *(_OWORD *)((char *)this + 1816) = xmmword_18E1FC890;
  *(_OWORD *)((char *)this + 1832) = unk_18E1FC8A0;
  *(_OWORD *)((char *)this + 1848) = xmmword_18E1FC850;
  *(_OWORD *)((char *)this + 1864) = unk_18E1FC860;
  *(_OWORD *)((char *)this + 1880) = xmmword_18E1FC830;
  *(_OWORD *)((char *)this + 1896) = unk_18E1FC840;
  *(_OWORD *)((char *)this + 1912) = xmmword_18E1FC850;
  *(_OWORD *)((char *)this + 1928) = unk_18E1FC860;
  *(_OWORD *)((char *)this + 1944) = xmmword_18E1FC870;
  *(_OWORD *)((char *)this + 1960) = unk_18E1FC880;
  *(_OWORD *)((char *)this + 1976) = xmmword_18E1FC890;
  *(_OWORD *)((char *)this + 1992) = unk_18E1FC8A0;
  *(_OWORD *)((char *)this + 2008) = xmmword_18E1FC890;
  *(_OWORD *)((char *)this + 2024) = unk_18E1FC8A0;
  *(_OWORD *)((char *)this + 2040) = xmmword_18E1FC890;
  *(_OWORD *)((char *)this + 2056) = unk_18E1FC8A0;
  *(_OWORD *)((char *)this + 2072) = xmmword_18E1FC890;
  *(_OWORD *)((char *)this + 2088) = unk_18E1FC8A0;
  *((unsigned char *)this + 2104) = 0;
  *((_OWORD *)this + 132) = xmmword_18E1FC5E0;
  *((_OWORD *)this + 133) = xmmword_18E1FC5F0;
  *((_OWORD *)this + 134) = xmmword_18E1FC550;
  *((_OWORD *)this + 135) = xmmword_18E1FC600;
  *((_OWORD *)this + 136) = xmmword_18E1FC610;
  *((_WORD *)this + 1096) = 0;
  *((void *)this + 275) = 0x4034000000000000;
  *((_DWORD *)this + 552) = 0;
  *((void *)this + 277) = 0x404E000000000000;
  *((_OWORD *)this + 139) = xmmword_18E1FC620;
  *((_OWORD *)this + 140) = xmmword_18E1FC630;
  *((_OWORD *)this + 141) = xmmword_18E1FC640;
  *((void *)this + 284) = 0x3FE3333333333333;
  *((_DWORD *)this + 570) = 1;
  *((int64x2_t *)this + 143) = vdupq_n_s64(0x3FE3333333333333uLL);
  *((_WORD *)this + 1152) = 0;
  *((void *)this + 293) = 0;
  *(_OWORD *)((char *)this + 2328) = 0u;
  *(_OWORD *)((char *)this + 2312) = 0u;
  *((void *)this + 294) = 0x3FD51EB851EB851FLL;
  *(_OWORD *)((char *)this + 2360) = xmmword_18E1FC8B0;
  *(_OWORD *)((char *)this + 2376) = unk_18E1FC8C0;
  *((_WORD *)this + 1196) = 257;
  *((unsigned char *)this + 2394) = 1;
  *((_OWORD *)this + 150) = xmmword_18E1FC8D0;
  *((_OWORD *)this + 151) = unk_18E1FC8E0;
  *((_OWORD *)this + 152) = xmmword_18E1FC650;
  *((_OWORD *)this + 153) = xmmword_18E1FC660;
  *((_OWORD *)this + 154) = xmmword_18E1FC670;
  __asm { FMOV            V1.2D, #0.5 }
  *((_OWORD *)this + 155) = _Q1;
  *((int64x2_t *)this + 156) = vdupq_n_s64(0x3FEE666666666666uLL);
  *((_OWORD *)this + 157) = xmmword_18E1FC680;
  *((_OWORD *)this + 158) = xmmword_18E1FC690;
  *((unsigned char *)this + 2544) = 1;
  *((void *)this + 319) = 0x40BC200000000000;
  *((_WORD *)this + 1280) = 1;
  *((unsigned char *)this + 2562) = 0;
  *((void *)this + 321) = 0x3FF0000000000000;
  *((_OWORD *)this + 161) = xmmword_18E1FC9E0;
  *((_OWORD *)this + 165) = xmmword_18E1FCA20;
  *((_OWORD *)this + 166) = xmmword_18E1FC8F0;
  *((_OWORD *)this + 170) = xmmword_18E1FC930;
  *((_OWORD *)this + 169) = unk_18E1FC920;
  *((_OWORD *)this + 164) = unk_18E1FCA10;
  *((_OWORD *)this + 163) = xmmword_18E1FCA00;
  *((_OWORD *)this + 162) = *(_OWORD *)algn_18E1FC9F0;
  *((_OWORD *)this + 168) = xmmword_18E1FC910;
  *((_OWORD *)this + 167) = unk_18E1FC900;
  *((unsigned char *)this + 2736) = 0;
  *(_OWORD *)((char *)this + 2808) = xmmword_18E1FC980;
  *(_OWORD *)((char *)this + 2776) = xmmword_18E1FC960;
  *(_OWORD *)((char *)this + 2792) = unk_18E1FC970;
  *(_OWORD *)((char *)this + 2744) = xmmword_18E1FC940;
  *(_OWORD *)((char *)this + 2760) = unk_18E1FC950;
  *(_OWORD *)((char *)this + 2888) = xmmword_18E1FC9D0;
  *(_OWORD *)((char *)this + 2856) = xmmword_18E1FC9B0;
  *(_OWORD *)((char *)this + 2872) = unk_18E1FC9C0;
  *(_OWORD *)((char *)this + 2824) = xmmword_18E1FC990;
  *(_OWORD *)((char *)this + 2840) = unk_18E1FC9A0;
  *(_OWORD *)((char *)this + 2952) = unk_18E1FCA10;
  *(_OWORD *)((char *)this + 2968) = xmmword_18E1FCA20;
  *(_OWORD *)((char *)this + 2920) = *(_OWORD *)algn_18E1FC9F0;
  *(_OWORD *)((char *)this + 2936) = xmmword_18E1FCA00;
  *(_OWORD *)((char *)this + 2904) = xmmword_18E1FC9E0;
  *(_OWORD *)((char *)this + 3032) = unk_18E1FCA60;
  *(_OWORD *)((char *)this + 3048) = xmmword_18E1FCA70;
  *(_OWORD *)((char *)this + 3000) = unk_18E1FCA40;
  *(_OWORD *)((char *)this + 3016) = xmmword_18E1FCA50;
  *(_OWORD *)((char *)this + 2984) = xmmword_18E1FCA30;
  *((void *)this + 383) = 0x3FEE666666666666;
  *((_OWORD *)this + 192) = xmmword_18E1FC6A0;
  *((_OWORD *)this + 193) = xmmword_18E1FC6B0;
  *((_OWORD *)this + 194) = xmmword_18E1FC6C0;
  *((_OWORD *)this + 195) = xmmword_18E1FC6D0;
  *((_OWORD *)this + 196) = xmmword_18E1FC6E0;
  *((_OWORD *)this + 197) = xmmword_18E1FC6F0;
  *((_OWORD *)this + 198) = xmmword_18E1FC700;
  *((_OWORD *)this + 199) = xmmword_18E1FC710;
  *((_OWORD *)this + 200) = xmmword_18E1FC720;
  *((_OWORD *)this + 201) = xmmword_18E1FC730;
  *((_OWORD *)this + 202) = xmmword_18E1FC2B0;
  *((_OWORD *)this + 203) = xmmword_18E1FC740;
  *((_OWORD *)this + 204) = xmmword_18E1FC750;
  *((_OWORD *)this + 205) = xmmword_18E1FC760;
  *((_OWORD *)this + 206) = xmmword_18E1FC770;
  __asm { FMOV            V0.2D, #5.0 }
  *((_OWORD *)this + 207) = _Q0;
  *((_OWORD *)this + 208) = xmmword_18E1FC780;
  *((void *)this + 418) = 0x3FE999999999999ALL;
  *((unsigned char *)this + 3352) = 1;
  *((_OWORD *)this + 210) = xmmword_18E1FC790;
  *((void *)this + 422) = 0x3FE0000000000000;
  *((void *)this + 423) = 0x400000005;
  *((_OWORD *)this + 212) = xmmword_18E1FC7A0;
  *((_OWORD *)this + 213) = xmmword_18E1FC7B0;
  *((_OWORD *)this + 214) = xmmword_18E1FC7C0;
  *((int64x2_t *)this + 215) = vdupq_n_s64(0x4014880F19EA2B99uLL);
  *((_OWORD *)this + 216) = xmmword_18E1FC7D0;
  *((_OWORD *)this + 217) = xmmword_18E1FC7E0;
  *((void *)this + 436) = 0x4022000000000000;
  *((unsigned char *)this + 3496) = 0;
  *((_OWORD *)this + 219) = xmmword_18E1FC7F0;
  *((_WORD *)this + 1760) = 257;
  *((void *)this + 441) = 0x4072C00000000000;
  *((void *)this + 442) = 0x412E848000000000;
  *((void *)this + 443) = 2;
  *((unsigned char *)this + 3552) = 1;
  *((void *)this + 445) = 0x4014000000000000;
  *((void *)this + 446) = 0x3F847AE147AE147BLL;
  *((_DWORD *)this + 894) = 5;
  *((unsigned char *)this + 3580) = 1;
  *((_OWORD *)this + 224) = xmmword_18E1FC800;
  *((void *)this + 450) = 0x4014000000000000;
  *((void *)this + 451) = 100;
  *((_OWORD *)this + 226) = xmmword_18E1FC810;
  *((void *)this + 454) = 0x3FD3333333333333;
  *((void *)this + 455) = 3;
  *((unsigned char *)this + 3648) = 0;
  *((_DWORD *)this + 913) = 0;
  *((unsigned char *)this + 3656) = 0;
  sub_18DEDE7B0((void *)this + 458, "");
  *((_DWORD *)this + 922) = 10;
  *((_WORD *)this + 1846) = 0;
  sub_18DEDE7B0((void *)this + 462, "raven_output.bin");
  *((_WORD *)this + 1860) = 256;
  *((unsigned char *)this + 3722) = 0;
  sub_18DEDE7B0((void *)this + 466, "raven_debug.txt");
  *((_WORD *)this + 1876) = 0;
  *((unsigned char *)this + 3754) = 0;
  uint64_t v14 = (cnprint::CNPrinter *)sub_18DEDE7B0((void *)this + 470, "raven_msr.txt");
  *((unsigned char *)this + 3788) = 1;
  *((_DWORD *)this + 946) = 16843009;
  *(_WORD *)((char *)this + 3789) = 0;
  *(void *)(v4 + 3244) = 0x101010101010101;
  *((unsigned char *)this + 3799) = 0;
  *((_DWORD *)this + 950) = 16843009;
  *((unsigned char *)this + 3804) = 0;
  *((_DWORD *)this + 952) = 16843009;
  *(_DWORD *)((char *)this + 3805) = 16843009;
  *((unsigned char *)this + 3812) = 0;
  *((unsigned char *)this + 3817) = 1;
  *(_DWORD *)((char *)this + 3813) = 16843009;
  *((_WORD *)this + 1909) = 256;
  *((unsigned char *)this + 3820) = 1;
  *((_DWORD *)this + 956) = 0;
  *((unsigned char *)this + 3828) = 0;
  if (cnprint::CNPrinter::GetLogLevel(v14) <= 1)
  {
    LOWORD(v50[0]) = 12;
    unsigned __int8 v51 = 1;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v50, &v51, "Hardware platform %hu received", v15, v16, v17, v18, v19, *(_WORD *)a2);
  }
  if (!*(_WORD *)a2)
  {
    LOWORD(v50[0]) = 12;
    unsigned __int8 v51 = 5;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v50, &v51, "Error: Unsupported hardware type %hu detected", v15, v16, v17, v18, v19, 0);
    char v29 = 0;
    goto LABEL_41;
  }
  *((unsigned char *)this + 641) = *((_DWORD *)a2 + 15) == 2;
  *((unsigned char *)this + 592) = 1;
  int GnssChipset = CNPlatformInfo::GetGnssChipset(a2);
  float v21 = 10.0;
  if ((GnssChipset - 3) >= 6)
  {
    float v21 = 9.0;
    if ((GnssChipset - 9) >= 3)
    {
      float v21 = 14.0;
      if (GnssChipset == 12) {
        float v21 = 10.0;
      }
    }
  }
  *((float *)this + 153) = v21;
  *((unsigned char *)this + 544) = CNPlatformInfo::GetGnssChipset(a2) - 9 < 0xFFFFFFFA;
  *((unsigned char *)this + 546) = CNPlatformInfo::GetGnssChipset(a2) - 9 < 0xFFFFFFFA;
  *((unsigned char *)this + 545) = CNPlatformInfo::GetGnssChipset(a2) - 3 < 0xFFFFFFFE;
  *((unsigned char *)this + 547) = CNPlatformInfo::GetGnssChipset(a2) - 1 < 2;
  *((unsigned char *)this + 548) = CNPlatformInfo::GetGnssChipset(a2) - 3 < 6;
  uint64_t v22 = (cnprint::CNPrinter *)CNPlatformInfo::GetGnssChipset(a2);
  if ((v22 - 1) <= 1)
  {
    int v28 = 1;
    goto LABEL_21;
  }
  if ((v22 - 3) <= 5)
  {
    int v28 = 2;
    goto LABEL_21;
  }
  if ((v22 - 9) <= 2)
  {
    if (v22 == 10 || (v22 & 0xFFFFFFFE) != 0xA) {
      goto LABEL_20;
    }
    int v30 = *((_DWORD *)a2 + 14);
    if (v30 == 3)
    {
      int v28 = 5;
      goto LABEL_21;
    }
    if (v30 == 1) {
      int v28 = 4;
    }
    else {
LABEL_20:
    }
      int v28 = 3;
LABEL_21:
    *((_DWORD *)this + 138) = v28;
    goto LABEL_22;
  }
  *((_DWORD *)this + 138) = 0;
  LOWORD(v50[0]) = 12;
  unsigned __int8 v51 = 3;
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)v50, &v51, "WARNING: Invalid HW type", v23, v24, v25, v26, v27, v49);
LABEL_22:
  if (cnprint::CNPrinter::GetLogLevel(v22) <= 1)
  {
    LOWORD(v50[0]) = 12;
    unsigned __int8 v51 = 1;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v50, &v51, "GNSS Measurement Uncertainty Model Type: %d", v31, v32, v33, v34, v35, *((_DWORD *)this + 138));
  }
  *((unsigned char *)this + 840) = CNPlatformInfo::GetGnssChipset(a2) - 3 < 6;
  int v36 = CNPlatformInfo::GetGnssChipset(a2);
  double v37 = 4.0;
  if ((v36 - 3) < 6) {
    double v37 = 2.5;
  }
  *((double *)this + 196) = v37;
  *((unsigned char *)this + 550) = CNPlatformInfo::GetGnssChipset(a2) - 3 < 6;
  *((unsigned char *)this + 576) = CNPlatformInfo::GetGnssChipset(a2) - 3 < 6;
  *((unsigned char *)this + 577) = CNPlatformInfo::GetGnssChipset(a2) - 9 < 3;
  *((unsigned char *)this + 578) = CNPlatformInfo::GetGnssChipset(a2) - 9 < 3;
  if (CNPlatformInfo::GetGnssChipset(a2) - 3 >= 6) {
    float v38 = 0.0;
  }
  else {
    float v38 = 17.0;
  }
  *((float *)this + 146) = v38;
  *((unsigned char *)this + 588) = CNPlatformInfo::GetGnssChipset(a2) - 3 < 6;
  int v39 = CNPlatformInfo::GetGnssChipset(a2);
  double v40 = 1.0;
  if ((v39 - 3) < 6) {
    double v40 = 0.5;
  }
  *((double *)this + 205) = v40;
  *((unsigned char *)this + 3496) = 0;
  *((unsigned char *)this + 2736) = CNPlatformInfo::GetGnssChipset(a2) - 3 < 6;
  BOOL v41 = CNPlatformInfo::GetGnssChipset(a2) - 4 < 8;
  *((unsigned char *)this + 2192) = v41;
  *((unsigned char *)this + 2193) = v41;
  int v42 = CNPlatformInfo::GetGnssChipset(a2);
  double v43 = 0.6;
  if ((v42 - 4) < 8) {
    double v43 = 25.0;
  }
  *((double *)this + 287) = v43;
  if (CNPlatformInfo::GetGnssChipset(a2) - 3 >= 6) {
    float v44 = 0.0;
  }
  else {
    float v44 = 17.0;
  }
  *((float *)this + 552) = v44;
  *((unsigned char *)this + 640) = CNPlatformInfo::GetGnssChipset(a2) - 9 < 3;
  *((void *)this + 412) = qword_18E1FC820[CNPlatformInfo::GetGnssChipset(a2) - 4 < 5];
  LOWORD(v50[0]) = 0;
  memset((char *)v50 + 8, 0, 40);
  raven::RavenLosEstimatorLookupTables::LosEstimatorLookupTablesAccessor::Initialize((raven::RavenLosEstimatorLookupTables::LosEstimatorLookupTablesAccessor *)v50, a2);
  long long v45 = v50[1];
  *((_OWORD *)this + 144) = v50[0];
  v50[1] = 0uLL;
  char v46 = (std::__shared_weak_count *)*((void *)this + 291);
  *((_OWORD *)this + 145) = v45;
  if (v46)
  {
    sub_18DEE4E18(v46);
    char v47 = (std::__shared_weak_count *)*((void *)&v50[1] + 1);
    *((_OWORD *)this + 146) = v50[2];
    if (v47) {
      sub_18DEE4E18(v47);
    }
  }
  else
  {
    *((_OWORD *)this + 146) = v50[2];
  }
  *((unsigned char *)this + 589) = CNPlatformInfo::GetGnssChipset(a2) - 12 < 0xFFFFFFFD;
  *((unsigned char *)this + 590) = CNPlatformInfo::GetGnssChipset(a2) - 12 < 0xFFFFFFFD;
  *((unsigned char *)this + 591) = CNPlatformInfo::GetGnssChipset(a2) != 12;
  char v29 = 1;
LABEL_41:
  *((unsigned char *)this + 33) = v29;
  return this;
}

void sub_18E00B288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void **a4, ...)
{
  va_start(va, a4);
  if (*(char *)(v4 + 3783) < 0) {
    operator delete(*v9);
  }
  if (*(char *)(v4 + 3751) < 0) {
    operator delete(*v8);
  }
  if (*(char *)(v4 + 3719) < 0) {
    operator delete(*v6);
  }
  if (*(char *)(v4 + 3687) < 0) {
    operator delete(*v7);
  }
  unint64_t v11 = *(std::__shared_weak_count **)(v4 + 2328);
  if (v11) {
    sub_18DEE4E18(v11);
  }
  sub_18E00C268((void ***)va);
  *(void *)uint64_t v4 = v5;
  if (*(char *)(v4 + 31) < 0) {
    operator delete(*a4);
  }
  _Unwind_Resume(a1);
}

void raven::RavenParameters::GetDebugMsrLoggingFilenameForEstimator(uint64_t a1@<X0>, char *a2@<X1>, std::string *a3@<X8>)
{
  sub_18DEDE7B0(&v16, off_1E55B98A8[*a2]);
  uint64_t v5 = std::string::insert(&v16, 0, ".", 1uLL);
  long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  int64_t v18 = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v16.__r_.__value_.__l.__data_);
  }
  if (v18 >= 0) {
    uint64_t v7 = (void **)((char *)__p + HIBYTE(v18));
  }
  else {
    uint64_t v7 = (void **)((char *)__p[0] + (unint64_t)__p[1]);
  }
  if (v18 >= 0) {
    size_t v8 = __p;
  }
  else {
    size_t v8 = (void **)__p[0];
  }
  while (v8 != v7)
  {
    *(unsigned char *)size_t v8 = __tolower(*(char *)v8);
    size_t v8 = (void **)((char *)v8 + 1);
  }
  int v9 = (const void **)(a1 + 3760);
  if (*(char *)(a1 + 3783) < 0)
  {
    uint64_t v10 = *(void *)(a1 + 3760);
    std::string::size_type v11 = *(void *)(a1 + 3768);
  }
  else
  {
    uint64_t v10 = a1 + 3760;
    std::string::size_type v11 = *(unsigned __int8 *)(a1 + 3783);
  }
  uint64_t v12 = v10 - 1;
  do
  {
    if (!v11) {
      goto LABEL_20;
    }
    int v13 = *(unsigned __int8 *)(v12 + v11--);
  }
  while (v13 != 46);
  if (v11 == -1)
  {
LABEL_20:
    sub_18DF05EC8(v9, (const void **)__p, (uint64_t)a3);
    goto LABEL_29;
  }
  if ((*(unsigned char *)(a1 + 3783) & 0x80) != 0)
  {
    sub_18DEDE668(a3, *(void **)(a1 + 3760), *(void *)(a1 + 3768));
  }
  else
  {
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)v9;
    a3->__r_.__value_.__r.__words[2] = *(void *)(a1 + 3776);
  }
  if (v18 >= 0) {
    uint64_t v14 = __p;
  }
  else {
    uint64_t v14 = (void **)__p[0];
  }
  if (v18 >= 0) {
    std::string::size_type v15 = HIBYTE(v18);
  }
  else {
    std::string::size_type v15 = (std::string::size_type)__p[1];
  }
  std::string::insert(a3, v11, (const std::string::value_type *)v14, v15);
LABEL_29:
  if (SHIBYTE(v18) < 0) {
    operator delete(__p[0]);
  }
}

void sub_18E00B4CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (*(char *)(v21 + 23) < 0) {
    operator delete(*(void **)v21);
  }
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t raven::RavenParameters::IsInitialized(raven::RavenParameters *this)
{
  return *((unsigned __int8 *)this + 33);
}

uint64_t raven::RavenParameters::LoadConfigurationFile(raven::RavenParameters *this, const char *a2)
{
  v22[19] = *MEMORY[0x1E4F143B8];
  sub_18DEDE4A4(v20);
  size_t v8 = (char *)v20 + *(void *)(v20[0] - 24);
  if ((v8[32] & 5) != 0)
  {
    LOWORD(v18.__r_.__value_.__l.__data_) = 12;
    unsigned __int8 v19 = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v18, &v19, "Error: Could not open configuration file", v3, v4, v5, v6, v7, v17);
    uint64_t v9 = 0;
  }
  else
  {
    uint64_t v10 = (void *)*((void *)v8 + 5);
    memset(&v18, 0, sizeof(v18));
    if (v10)
    {
      while (1)
      {
        std::string::size_type v11 = (std::string::value_type *)v10[3];
        uint64_t v12 = (std::string::value_type *)v10[4];
        if (v11 == v12)
        {
          if ((*(unsigned int (**)(void *))(*v10 + 72))(v10) == -1)
          {
            if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v15 = &v18;
            }
            else {
              std::string::size_type v15 = (std::string *)v18.__r_.__value_.__r.__words[0];
            }
            goto LABEL_17;
          }
          std::string::size_type v11 = (std::string::value_type *)v10[3];
          uint64_t v12 = (std::string::value_type *)v10[4];
        }
        if (v11 == v12) {
          std::string::value_type v13 = (*(uint64_t (**)(void *))(*v10 + 72))(v10);
        }
        else {
          std::string::value_type v13 = *v11;
        }
        std::string::push_back(&v18, v13);
        uint64_t v14 = v10[3];
        if (v14 == v10[4]) {
          (*(void (**)(void *))(*v10 + 80))(v10);
        }
        else {
          v10[3] = v14 + 1;
        }
      }
    }
    std::string::size_type v15 = &v18;
LABEL_17:
    uint64_t v9 = (*(uint64_t (**)(raven::RavenParameters *, std::string *, void))(*(void *)this + 24))(this, v15, 0);
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v18.__r_.__value_.__l.__data_);
    }
  }
  v20[0] = *MEMORY[0x1E4FBA3F8];
  *(uint64_t *)((char *)v20 + *(void *)(v20[0] - 24)) = *(void *)(MEMORY[0x1E4FBA3F8] + 24);
  MEMORY[0x192FA5DA0](&v21);
  std::istream::~istream();
  MEMORY[0x192FA6190](v22);
  return v9;
}

void sub_18E00B7C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_18E00B840(&a17);
  _Unwind_Resume(a1);
}

void *sub_18E00B840(void *a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA3F8];
  uint64_t v3 = *MEMORY[0x1E4FBA3F8];
  *a1 = *MEMORY[0x1E4FBA3F8];
  *(void *)((char *)a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  MEMORY[0x192FA5DA0](a1 + 2);
  std::istream::~istream();
  MEMORY[0x192FA6190](a1 + 53);
  return a1;
}

uint64_t raven::RavenParameters::LoadConfigurationString(raven::RavenParameters *this, char *a2, char a3)
{
  sub_18DEDE7B0(&__str, a2);
  uint64_t v4 = MEMORY[0x1E4FBA490] + 64;
  v49[0] = MEMORY[0x1E4FBA490] + 64;
  uint64_t v5 = (void *)MEMORY[0x1E4FBA410];
  uint64_t v6 = *(void *)(MEMORY[0x1E4FBA410] + 16);
  v43[0] = *(void *)(MEMORY[0x1E4FBA410] + 8);
  *(void *)((char *)v43 + *(void *)(v43[0] - 24)) = v6;
  v43[1] = 0;
  uint64_t v7 = (std::ios_base *)((char *)v43 + *(void *)(v43[0] - 24));
  std::ios_base::init(v7, &v44);
  uint64_t v8 = MEMORY[0x1E4FBA490] + 24;
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  v43[0] = v8;
  v49[0] = v4;
  std::streambuf::basic_streambuf();
  uint64_t v14 = MEMORY[0x1E4FBA470] + 16;
  p_p = &__p;
  std::string __p = __str;
  int v48 = 8;
  std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  uint64_t v17 = v43[0];
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
  {
    std::string::size_type size = __str.__r_.__value_.__l.__size_;
    p_p = (std::string *)__str.__r_.__value_.__r.__words[0];
  }
  char v47 = (char *)p_p + size;
  uint64_t v44 = MEMORY[0x1E4FBA470] + 16;
  v45[0] = p_p;
  v45[1] = p_p;
  v45[2] = (char *)p_p + size;
  if ((*((unsigned char *)v45 + *(void *)(v43[0] - 24)) & 5) != 0)
  {
    LOWORD(__str.__r_.__value_.__l.__data_) = 12;
    v41.__r_.__value_.__s.__data_[0] = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&__str, (unsigned __int8 *)&v41, "Error: Could not initialize input string stream", v9, v10, v11, v12, v13, v38);
    LOBYTE(v18) = 0;
    goto LABEL_35;
  }
  uint64_t v39 = MEMORY[0x1E4FBA470] + 16;
  memset(&__str, 0, sizeof(__str));
  int v18 = 1;
  unsigned __int8 v19 = (std::locale::id *)MEMORY[0x1E4FBA258];
  while (1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)v43 + *(void *)(v17 - 24)));
    uint64_t v20 = std::locale::use_facet((const std::locale *)&v41, v19);
    unsigned __int8 v21 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v20->__vftable[2].~facet_0)(v20, 10);
    std::locale::~locale((std::locale *)&v41);
    uint64_t v22 = sub_18E00F294(v43, (uint64_t)&__str, v21);
    if ((*((unsigned char *)v22 + *(void *)(*v22 - 24) + 32) & 5) != 0) {
      break;
    }
    LODWORD(v30) = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int64_t v31 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    }
    else {
      int64_t v31 = __str.__r_.__value_.__l.__size_;
    }
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_str = &__str;
    }
    else {
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    }
    if (v31 >= 1)
    {
      uint64_t v33 = (char *)p_str + v31;
      uint64_t v34 = p_str;
      do
      {
        uint64_t v35 = memchr(v34, 35, v31);
        if (!v35) {
          break;
        }
        if (*v35 == 35)
        {
          if (v35 != v33 && v35 - (unsigned char *)p_str != -1)
          {
            std::string::basic_string(&v41, &__str, 0, v35 - (unsigned char *)p_str, (std::allocator<char> *)v50);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__str.__r_.__value_.__l.__data_);
            }
            std::string __str = v41;
            std::string::size_type v30 = HIBYTE(v41.__r_.__value_.__r.__words[2]);
          }
          break;
        }
        uint64_t v34 = (std::string *)(v35 + 1);
        int64_t v31 = v33 - (unsigned char *)v34;
      }
      while (v33 - (unsigned char *)v34 >= 1);
    }
    if ((v30 & 0x80) != 0)
    {
      if (!__str.__r_.__value_.__l.__size_) {
        goto LABEL_30;
      }
      int v36 = (std::string *)__str.__r_.__value_.__r.__words[0];
    }
    else
    {
      if (!v30) {
        goto LABEL_30;
      }
      int v36 = &__str;
    }
    *((unsigned char *)this + 32) = a3;
    sub_18DF0642C((std::string *)((char *)this + 8), (char *)v36);
    v18 &= (*(uint64_t (**)(raven::RavenParameters *))(*(void *)this + 32))(this);
LABEL_30:
    uint64_t v17 = v43[0];
  }
  if ((v18 & 1) == 0) {
    raven::RavenParameters::PrintLoadErrors(this, v23, v24, v25, v26, v27, v28, v29);
  }
  uint64_t v5 = (void *)MEMORY[0x1E4FBA410];
  uint64_t v14 = v39;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
LABEL_35:
  v43[0] = *v5;
  *(void *)((char *)v43 + *(void *)(v43[0] - 24)) = v5[3];
  uint64_t v44 = v14;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x192FA6190](v49);
  return v18 & 1;
}

void sub_18E00BDD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::locale a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,char a24)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  sub_18E00BEB8((uint64_t)&a24);
  _Unwind_Resume(a1);
}

uint64_t sub_18E00BE58(uint64_t a1, char *a2, char a3)
{
  *(unsigned char *)(a1 + 32) = a3;
  sub_18DF0642C((std::string *)(a1 + 8), a2);
  uint64_t v4 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 32);

  return v4(a1);
}

uint64_t sub_18E00BEB8(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA410];
  uint64_t v3 = *MEMORY[0x1E4FBA410];
  *(void *)a1 = *MEMORY[0x1E4FBA410];
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 16) = MEMORY[0x1E4FBA470] + 16;
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x192FA6190](a1 + 120);
  return a1;
}

void sub_18E00BFC0(uint64_t a1)
{
  sub_18E00C30C(a1);

  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E00BFF8(uint64_t *a1, void *a2)
{
  uint64_t result = sub_18E00C0B8((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_18E00C070(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    sub_18DEDF7D4();
  }
  return operator new(24 * a2);
}

uint64_t sub_18E00C0B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  _OWORD v12[2] = &v15;
  if (a3 != a5)
  {
    uint64_t v9 = a7;
    do
    {
      long long v10 = *(_OWORD *)(a3 - 24);
      *(void *)(v9 - 8) = *(void *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v10;
      v9 -= 24;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 8) = 0;
      *(void *)(a3 - 24) = 0;
      v7 -= 24;
      a3 -= 24;
    }
    while (a3 != a5);
    *((void *)&v15 + 1) = v9;
  }
  char v13 = 1;
  sub_18E00C158((uint64_t)v12);
  return a6;
}

uint64_t sub_18E00C158(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_18E00C190(a1);
  }
  return a1;
}

void sub_18E00C190(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    v1 += 24;
  }
}

uint64_t sub_18E00C1D8(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_18E00C210(uint64_t a1, void **a2)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      uint64_t v5 = v2 - 3;
      *(void *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        uint64_t v5 = *(void ***)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != a2);
  }
}

void sub_18E00C268(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_18E00C2BC((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_18E00C2BC(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0) {
      operator delete(*(void **)(i - 24));
    }
  }
  a1[1] = v2;
}

uint64_t sub_18E00C30C(uint64_t a1)
{
  *(void *)a1 = &unk_1EDD13B48;
  if (*(char *)(a1 + 3783) < 0) {
    operator delete(*(void **)(a1 + 3760));
  }
  if (*(char *)(a1 + 3751) < 0) {
    operator delete(*(void **)(a1 + 3728));
  }
  if (*(char *)(a1 + 3719) < 0) {
    operator delete(*(void **)(a1 + 3696));
  }
  if (*(char *)(a1 + 3687) < 0) {
    operator delete(*(void **)(a1 + 3664));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 2328);
  if (v2) {
    sub_18DEE4E18(v2);
  }
  uint64_t v4 = (void **)(a1 + 40);
  sub_18E00C268(&v4);
  *(void *)a1 = &unk_1EDD16178;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t sub_18E00C3DC(uint64_t a1, unsigned char *a2, const char *a3)
{
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
  {
    if (!*(unsigned char *)(a1 + 31)) {
      goto LABEL_99;
    }
LABEL_5:
    sub_18DEDE7B0(&v66, "\n");
    std::string::size_type v6 = strlen(a3);
    uint64_t v7 = std::string::append(&v66, a3, v6);
    uint64_t v8 = std::string::append(v7, ":", 1uLL);
    long long v14 = (uint64_t *)(a1 + 8);
    int v15 = *(char *)(a1 + 31);
    __s = (char *)a3;
    if (v15 < 0)
    {
      uint64_t v17 = *(char **)(a1 + 8);
      uint64_t v16 = *(void *)(a1 + 16);
    }
    else
    {
      uint64_t v16 = *(unsigned __int8 *)(a1 + 31);
      uint64_t v17 = (char *)(a1 + 8);
    }
    int v18 = SHIBYTE(v8->__r_.__value_.__r.__words[2]);
    if (v18 >= 0) {
      unsigned __int8 v19 = v8;
    }
    else {
      unsigned __int8 v19 = (std::string *)v8->__r_.__value_.__r.__words[0];
    }
    if (v18 >= 0) {
      int64_t size = HIBYTE(v8->__r_.__value_.__r.__words[2]);
    }
    else {
      int64_t size = v8->__r_.__value_.__l.__size_;
    }
    if (size)
    {
      if (v16 >= size)
      {
        uint64_t v25 = &v17[v16];
        int v26 = v19->__r_.__value_.__s.__data_[0];
        uint64_t v27 = v17;
        do
        {
          uint64_t v28 = v16 - size;
          if (v28 == -1) {
            break;
          }
          uint64_t v29 = (char *)memchr(v27, v26, v28 + 1);
          if (!v29) {
            break;
          }
          std::string::size_type v30 = v29;
          if (!memcmp(v29, v19, size))
          {
            if (v30 != v25)
            {
              int64_t v24 = v30 - v17;
              if (v30 - v17 != -1) {
                goto LABEL_48;
              }
            }
            break;
          }
          uint64_t v27 = v30 + 1;
          uint64_t v16 = v25 - (v30 + 1);
        }
        while (v16 >= size);
      }
      sub_18DF0642C(&v66, __s);
      unsigned __int8 v21 = std::string::append(&v66, ":", 1uLL);
      int v15 = *(char *)(a1 + 31);
      if (v15 < 0)
      {
        uint64_t v23 = *(char **)(a1 + 8);
        uint64_t v22 = *(void *)(a1 + 16);
      }
      else
      {
        uint64_t v22 = *(unsigned __int8 *)(a1 + 31);
        uint64_t v23 = (char *)(a1 + 8);
      }
      int v31 = SHIBYTE(v21->__r_.__value_.__r.__words[2]);
      if (v31 >= 0) {
        uint64_t v32 = v21;
      }
      else {
        uint64_t v32 = (std::string *)v21->__r_.__value_.__r.__words[0];
      }
      if (v31 >= 0) {
        int64_t v33 = HIBYTE(v21->__r_.__value_.__r.__words[2]);
      }
      else {
        int64_t v33 = v21->__r_.__value_.__l.__size_;
      }
      if (v33)
      {
        if (v22 >= v33)
        {
          uint64_t v35 = &v23[v22];
          int v36 = v32->__r_.__value_.__s.__data_[0];
          double v37 = v23;
          do
          {
            uint64_t v38 = v22 - v33;
            if (v38 == -1) {
              break;
            }
            uint64_t v39 = (char *)memchr(v37, v36, v38 + 1);
            if (!v39) {
              break;
            }
            double v40 = v39;
            if (!memcmp(v39, v32, v33))
            {
              char v34 = 1;
              if (v40 == v35) {
                goto LABEL_35;
              }
              LOBYTE(a3) = (_BYTE)__s;
              if (v40 != v23) {
                goto LABEL_97;
              }
              goto LABEL_47;
            }
            double v37 = v40 + 1;
            uint64_t v22 = v35 - (v40 + 1);
          }
          while (v22 >= v33);
        }
        char v34 = 1;
LABEL_35:
        LOBYTE(a3) = (_BYTE)__s;
LABEL_97:
        if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v66.__r_.__value_.__l.__data_);
          if (v34) {
            goto LABEL_99;
          }
        }
        else if (v34)
        {
          goto LABEL_99;
        }
        return 1;
      }
LABEL_47:
      int64_t v24 = 0;
    }
    else
    {
      int64_t v24 = 0;
    }
LABEL_48:
    std::string::size_type v41 = HIBYTE(v66.__r_.__value_.__r.__words[2]);
    if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v41 = v66.__r_.__value_.__l.__size_;
    }
    unint64_t v42 = v41 + v24;
    if ((v15 & 0x80) != 0) {
      goto LABEL_53;
    }
LABEL_51:
    unint64_t v43 = v15;
    if (v42 < v15)
    {
      while (v43 > v42)
      {
        uint64_t v44 = a1 + 8;
        if ((v15 & 0x80) != 0) {
          uint64_t v44 = *v14;
        }
        if (*(unsigned char *)(v44 + v42) != 58)
        {
          unint64_t v45 = v15;
          if ((v15 & 0x80) != 0) {
            unint64_t v45 = *(void *)(a1 + 16);
          }
          if (v45 <= v42) {
            break;
          }
          uint64_t v46 = a1 + 8;
          if ((v15 & 0x80) != 0) {
            uint64_t v46 = *v14;
          }
          if (*(unsigned char *)(v46 + v42) != 32)
          {
            unint64_t v47 = v15;
            if ((v15 & 0x80) != 0) {
              unint64_t v47 = *(void *)(a1 + 16);
            }
            if (v47 <= v42) {
              break;
            }
            uint64_t v48 = a1 + 8;
            if ((v15 & 0x80) != 0) {
              uint64_t v48 = *v14;
            }
            if (*(unsigned char *)(v48 + v42) != 9) {
              goto LABEL_72;
            }
          }
        }
        ++v42;
        if ((v15 & 0x80) == 0) {
          goto LABEL_51;
        }
LABEL_53:
        unint64_t v43 = *(void *)(a1 + 16);
        if (v42 >= v43) {
          goto LABEL_72;
        }
      }
      sub_18DEDE708();
    }
LABEL_72:
    uint64_t v49 = 0;
    LOBYTE(a3) = (_BYTE)__s;
    do
    {
      unint64_t v50 = v42 + v49;
      unint64_t v51 = *(unsigned __int8 *)(a1 + 31);
      if (*(char *)(a1 + 31) < 0)
      {
        if (v50 >= *(void *)(a1 + 16)) {
          break;
        }
      }
      else if (v50 >= v51)
      {
        break;
      }
      uint64_t v52 = a1 + 8;
      if ((v51 & 0x80) != 0) {
        uint64_t v52 = *v14;
      }
      if (*(unsigned char *)(v52 + v49 + v42) == 10) {
        break;
      }
      if ((v51 & 0x80) != 0) {
        unint64_t v53 = *(void *)(a1 + 16);
      }
      else {
        unint64_t v53 = *(unsigned __int8 *)(a1 + 31);
      }
      if (v53 <= v50) {
LABEL_105:
      }
        sub_18DEDE708();
      uint64_t v54 = a1 + 8;
      if ((v51 & 0x80) != 0) {
        uint64_t v54 = *v14;
      }
      if (*(unsigned char *)(v54 + v49 + v42) == 13) {
        break;
      }
      if ((v51 & 0x80) != 0) {
        unint64_t v55 = *(void *)(a1 + 16);
      }
      else {
        unint64_t v55 = *(unsigned __int8 *)(a1 + 31);
      }
      if (v55 <= v50) {
        goto LABEL_105;
      }
      uint64_t v56 = a1 + 8;
      if ((v51 & 0x80) != 0) {
        uint64_t v56 = *v14;
      }
      a2[v49] = *(unsigned char *)(v56 + v49 + v42);
      ++v49;
    }
    while (v49 != 1023);
    a2[v49] = 0;
    if (*(unsigned char *)(a1 + 32))
    {
      __int16 v65 = 0;
      unsigned __int8 v64 = 2;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v65, &v64, "ConfigLoader: \"%s\" loaded value \"%s\"", v9, v10, v11, v12, v13, (char)__s);
    }
    char v34 = 0;
    goto LABEL_97;
  }
  if (*(void *)(a1 + 16)) {
    goto LABEL_5;
  }
LABEL_99:
  bzero(a2, 0x400uLL);
  if (*(unsigned char *)(a1 + 32))
  {
    LOWORD(v66.__r_.__value_.__l.__data_) = 0;
    LOBYTE(v65) = 2;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v66, (unsigned __int8 *)&v65, "ConfigLoader: \"%s\" using default value \"%s\"", v57, v58, v59, v60, v61, (char)a3);
  }
  return 0;
}

void sub_18E00C82C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_18E00C854(uint64_t a1)
{
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_18E00C8A8(void *a1, char *__s)
{
  uint64_t v4 = 0;
  v5[0] = (unsigned __int8 *)__s;
  v5[1] = (unsigned __int8 *)&__s[strlen(__s)];
  if ((sub_18E00CF18(v5, (double *)&v4) & 1) == 0)
  {
    std::bad_cast::bad_cast(&v6);
    v6.__vftable = (std::bad_cast_vtbl *)&unk_1EDD12A68;
    uint64_t v7 = MEMORY[0x1E4FBA308];
    uint64_t v8 = MEMORY[0x1E4FBA388];
    sub_18E00D464((uint64_t)&v6);
  }
  *a1 = v4;
  return 1;
}

void sub_18E00C94C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::exception a12, long long a13)
{
  std::exception::~exception(&a12);
  if (a2 == 1)
  {
    exception_ptr = (char *)__cxa_get_exception_ptr(a1);
    a12.__vftable = (std::exception_vtbl *)&unk_1EDD12A68;
    a13 = *(_OWORD *)(exception_ptr + 8);
    __cxa_begin_catch(a1);
    std::exception::~exception(&a12);
    __cxa_end_catch();
    JUMPOUT(0x18E00C8F4);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_18E00C9C4(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

uint64_t sub_18E00CA08(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

char *sub_18E00CA4C(char *__dst, long long *a2, std::string::value_type *a3, std::string::value_type *a4)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_18DEDE668(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v8 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)std::string __dst = v8;
  }
  uint64_t v9 = __dst + 24;
  if (*((char *)a2 + 47) < 0)
  {
    sub_18DEDE668(v9, *((void **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v10 = *(long long *)((char *)a2 + 24);
    *((void *)__dst + 5) = *((void *)a2 + 5);
    *(_OWORD *)uint64_t v9 = v10;
  }
  uint64_t v11 = *((void *)a2 + 6);
  char v12 = *((unsigned char *)a2 + 56);
  *((void *)__dst + 8) = a3;
  __dst[56] = v12;
  *((void *)__dst + 6) = v11;
  *((void *)__dst + 9) = a4;
  __dst[80] = 0;
  *((void *)__dst + 11) = 0;
  *((void *)__dst + 12) = 0;
  *((void *)__dst + 13) = 0;
  if (a3 == a4) {
    char v13 = 0;
  }
  else {
    char v13 = sub_18E00CB64((uint64_t)__dst, (std::string::value_type **)__dst + 8, a4, (std::string *)(__dst + 88));
  }
  __dst[80] = v13;
  return __dst;
}

void sub_18E00CB28(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_18E00CB64(uint64_t a1, std::string::value_type **a2, std::string::value_type *a3, std::string *this)
{
  long long v8 = *a2;
  if (*(_DWORD *)(a1 + 52)) {
    goto LABEL_2;
  }
  if (v8 == a3) {
    return 0;
  }
  while (1)
  {
    BOOL v9 = sub_18E00CD48(a1, *v8);
    long long v8 = *a2;
    if (!v9) {
      break;
    }
    *a2 = ++v8;
    if (v8 == a3)
    {
      long long v8 = a3;
      break;
    }
  }
  if (*(_DWORD *)(a1 + 52))
  {
LABEL_2:
    if (v8 != a3)
    {
      if (sub_18E00CDC8(a1, *v8))
      {
        if (*(unsigned char *)(a1 + 56))
        {
          ++*a2;
          *(unsigned char *)(a1 + 56) = 0;
LABEL_25:
          sub_18E00CE44(this, v8, *a2, *a2 - v8);
          return 1;
        }
      }
      else if (*(unsigned char *)(a1 + 56) || !sub_18E00CD48(a1, **a2))
      {
        BOOL v13 = sub_18E00CD48(a1, **a2);
        long long v14 = *a2;
        if (v13)
        {
          *a2 = ++v14;
          long long v8 = v14;
        }
        while (v14 != a3 && !sub_18E00CD48(a1, *v14) && !sub_18E00CDC8(a1, **a2))
        {
          long long v14 = *a2 + 1;
          *a2 = v14;
        }
      }
      *(unsigned char *)(a1 + 56) = 1;
      goto LABEL_25;
    }
    if (!*(unsigned char *)(a1 + 56))
    {
      uint64_t v12 = 1;
      *(unsigned char *)(a1 + 56) = 1;
      sub_18E00CE44(this, a3, a3, 0);
      return v12;
    }
  }
  else if (v8 != a3)
  {
    BOOL v10 = sub_18E00CDC8(a1, *v8);
    uint64_t v11 = *a2;
    if (v10)
    {
      *a2 = v11 + 1;
    }
    else
    {
      while (v11 != a3 && !sub_18E00CD48(a1, *v11) && !sub_18E00CDC8(a1, **a2))
      {
        uint64_t v11 = *a2 + 1;
        *a2 = v11;
      }
    }
    goto LABEL_25;
  }
  return 0;
}

BOOL sub_18E00CD48(uint64_t a1, unsigned int a2)
{
  if (*(char *)(a1 + 47) < 0)
  {
    if (*(void *)(a1 + 32)) {
      goto LABEL_3;
    }
  }
  else if (*(unsigned char *)(a1 + 47))
  {
LABEL_3:
    BOOL v2 = std::string::find((const std::string *)(a1 + 24), a2, 0) == -1;
    return !v2;
  }
  if (!*(unsigned char *)(a1 + 49)) {
    return 0;
  }
  if ((a2 & 0x80000000) != 0) {
    int v3 = __maskrune(a2, 0x4000uLL);
  }
  else {
    int v3 = *(_DWORD *)(MEMORY[0x1E4F14390] + 4 * a2 + 60) & 0x4000;
  }
  BOOL v2 = v3 == 0;
  return !v2;
}

BOOL sub_18E00CDC8(uint64_t a1, unsigned int a2)
{
  if (*(char *)(a1 + 23) < 0)
  {
    if (*(void *)(a1 + 8)) {
      goto LABEL_3;
    }
  }
  else if (*(unsigned char *)(a1 + 23))
  {
LABEL_3:
    BOOL v2 = std::string::find((const std::string *)a1, a2, 0) == -1;
    return !v2;
  }
  if (!*(unsigned char *)(a1 + 48)) {
    return 0;
  }
  if ((a2 & 0x80000000) != 0) {
    int v3 = __maskrune(a2, 0x2000uLL);
  }
  else {
    int v3 = *(_DWORD *)(MEMORY[0x1E4F14390] + 4 * a2 + 60) & 0x2000;
  }
  BOOL v2 = v3 == 0;
  return !v2;
}

void sub_18E00CE44(std::string *this, std::string::value_type *a2, std::string::value_type *a3, std::string::size_type a4)
{
  if ((SHIBYTE(this->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    long long v8 = this;
    if (a4 <= 0x16) {
      goto LABEL_11;
    }
    std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    std::string::size_type v10 = 22;
    goto LABEL_6;
  }
  unint64_t v11 = this->__r_.__value_.__r.__words[2];
  std::string::size_type v10 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (v10 < a4)
  {
    std::string::size_type size = this->__r_.__value_.__l.__size_;
LABEL_6:
    std::string::__grow_by(this, v10, a4 - v10, size, 0, size, 0);
    this->__r_.__value_.__l.__size_ = 0;
    LOBYTE(v12) = *((unsigned char *)&this->__r_.__value_.__s + 23);
    goto LABEL_8;
  }
  unint64_t v12 = HIBYTE(v11);
LABEL_8:
  long long v8 = this;
  if ((v12 & 0x80) != 0) {
    long long v8 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
LABEL_11:
  while (a2 != a3)
  {
    std::string::value_type v13 = *a2++;
    v8->__r_.__value_.__s.__data_[0] = v13;
    long long v8 = (std::string *)((char *)v8 + 1);
  }
  v8->__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
    this->__r_.__value_.__l.__size_ = a4;
  }
  else {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = a4 & 0x7F;
  }
}

uint64_t sub_18E00CF18(unsigned __int8 **a1, double *a2)
{
  if (sub_18E00CF90(*a1, a1[1], a2)) {
    return 1;
  }
  uint64_t result = sub_18E00D128((uint64_t *)a1, (uint64_t)a2);
  if (result)
  {
    unsigned int v5 = *(a1[1] - 1) - 43;
    if (v5 <= 0x3A)
    {
      if ((0x400000004000005uLL >> v5)) {
        return 0;
      }
      else {
        return result;
      }
    }
  }
  return result;
}

uint64_t sub_18E00CF90(unsigned __int8 *a1, unsigned __int8 *a2, double *a3)
{
  if (a1 == a2) {
    return 0;
  }
  int v3 = *a1;
  BOOL v4 = v3 == 45 || v3 == 43;
  uint64_t v5 = (uint64_t)(v4 ? a1 + 1 : a1);
  std::bad_cast v6 = &a2[-v5];
  if ((uint64_t)&a2[-v5] < 3) {
    return 0;
  }
  unint64_t v8 = 0;
  BOOL v9 = 0;
  do
  {
    int v10 = *(unsigned __int8 *)(v5 + v8);
    if (v10 != aNan_0[v8] && v10 != aNan[v8]) {
      break;
    }
    BOOL v9 = v8++ > 1;
  }
  while (v8 != 3);
  if (!v9)
  {
    if (v6 == (unsigned __int8 *)3)
    {
      unint64_t v18 = 0;
      BOOL v16 = 0;
      do
      {
        int v19 = *(unsigned __int8 *)(v5 + v18);
        if (v19 != aInfinity_0[v18] && v19 != aInfinity[v18]) {
          break;
        }
        BOOL v16 = v18++ > 1;
      }
      while (v18 != 3);
    }
    else
    {
      if (v6 != (unsigned __int8 *)8) {
        return 0;
      }
      unint64_t v15 = 0;
      BOOL v16 = 0;
      do
      {
        int v17 = *(unsigned __int8 *)(v5 + v15);
        if (v17 != aInfinity_0[v15] && v17 != aInfinity[v15]) {
          break;
        }
        BOOL v16 = v15++ > 6;
      }
      while (v15 != 8);
    }
    if (v16)
    {
      BOOL v12 = v3 == 45;
      double v13 = INFINITY;
      double v14 = -INFINITY;
      goto LABEL_33;
    }
    return 0;
  }
  unint64_t v11 = (unsigned __int8 *)(v5 + 3);
  if (v11 != a2 && (a2 - v11 < 2 || *v11 != 40 || *(a2 - 1) != 41)) {
    return 0;
  }
  BOOL v12 = v3 == 45;
  double v13 = NAN;
  double v14 = NAN;
LABEL_33:
  if (v12) {
    double v13 = v14;
  }
  *a3 = v13;
  return 1;
}

BOOL sub_18E00D128(uint64_t *a1, uint64_t a2)
{
  std::streambuf::basic_streambuf();
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  __sb[0] = &unk_1EDD135E8;
  __sb[2] = v4;
  __sb[3] = v4;
  __sb[4] = v5;
  v11[0] = MEMORY[0x1E4FBA450] + 24;
  v11[1] = 0;
  v12.__vftable = (std::ios_base_vtbl *)(MEMORY[0x1E4FBA450] + 64);
  std::ios_base::init(&v12, __sb);
  uint64_t v13 = 0;
  int v14 = -1;
  std::bad_cast v6 = (std::ios_base *)((char *)v11 + *(void *)(v11[0] - 24));
  v6->__exceptions_ = 1;
  std::ios_base::clear(v6, v6->__rdstate_);
  uint64_t v7 = v11[0];
  *(_DWORD *)((char *)&v11[1] + *(void *)(v11[0] - 24)) &= ~0x1000u;
  *(void *)((char *)&v11[2] + *(void *)(v7 - 24)) = 17;
  unint64_t v8 = (void *)MEMORY[0x192FA5DF0](v11, a2);
  BOOL v9 = (*((unsigned char *)v8 + *(void *)(*v8 - 24) + 32) & 5) == 0 && std::istream::get() == -1;
  std::istream::~istream();
  std::streambuf::~streambuf();
  return v9;
}

void sub_18E00D2D4(_Unwind_Exception *a1)
{
}

void *sub_18E00D320(void *result, uint64_t a2, uint64_t a3)
{
  result[2] = a2;
  result[3] = a2;
  result[4] = a2 + a3;
  return result;
}

void sub_18E00D334()
{
  std::streambuf::~streambuf();

  JUMPOUT(0x192FA6240);
}

double sub_18E00D36C@<D0>(void *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, char a4@<W3>, uint64_t a5@<X8>)
{
  if ((a4 & 0x10) != 0)
  {
    uint64_t v7 = -1;
    goto LABEL_19;
  }
  uint64_t v5 = a1[2];
  uint64_t v6 = a1[4] - v5;
  if (!a3)
  {
    uint64_t v7 = -1;
    if (a2 < 0 || v6 < a2) {
      goto LABEL_19;
    }
    uint64_t v9 = v5 + a2;
LABEL_15:
    uint64_t v8 = a1[4];
    goto LABEL_16;
  }
  if (a3 == 1)
  {
    uint64_t v7 = -1;
    uint64_t v10 = a1[3] - v5 + a2;
    if (v10 < 0 || v10 > v6) {
      goto LABEL_19;
    }
    uint64_t v9 = a1[3] + a2;
    goto LABEL_15;
  }
  if (a3 != 2)
  {
    uint64_t v9 = a1[3];
    goto LABEL_18;
  }
  uint64_t v7 = -1;
  if ((a2 & 0x8000000000000000) == 0 && v6 >= a2)
  {
    uint64_t v8 = a1[4];
    uint64_t v9 = v8 - a2;
LABEL_16:
    a1[3] = v9;
    a1[4] = v8;
LABEL_18:
    uint64_t v7 = v9 - v5;
  }
LABEL_19:
  double result = 0.0;
  *(_OWORD *)(a5 + 96) = 0u;
  *(_OWORD *)(a5 + 112) = 0u;
  *(_OWORD *)(a5 + 64) = 0u;
  *(_OWORD *)(a5 + 80) = 0u;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)(a5 + 48) = 0u;
  *(_OWORD *)a5 = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  *(void *)(a5 + 128) = v7;
  return result;
}

double sub_18E00D41C@<D0>(void *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  if ((a3 & 0x10) == 0)
  {
    uint64_t v4 = a1[2];
    uint64_t v5 = *(void *)(a2 + 128);
    if (v5 <= a1[4] - v4)
    {
      uint64_t v6 = v4 + v5;
      uint64_t v7 = a1[4];
      a1[3] = v6;
      a1[4] = v7;
    }
  }
  double result = 0.0;
  *(_OWORD *)(a4 + 96) = 0u;
  *(_OWORD *)(a4 + 112) = 0u;
  *(_OWORD *)(a4 + 64) = 0u;
  *(_OWORD *)(a4 + 80) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(void *)(a4 + 128) = -1;
  return result;
}

void sub_18E00D464(uint64_t a1)
{
  exceptioint n = (__n128 *)__cxa_allocate_exception(0x48uLL);
  sub_18E00D4C0(exception, a1);
  __cxa_throw(exception, (struct type_info *)&unk_1EDD046E0, (void (*)(void *))sub_18E00D56C);
}

void sub_18E00D4AC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

__n128 sub_18E00D4C0(__n128 *a1, uint64_t a2)
{
  a1->n128_u64[0] = (unint64_t)&unk_1EDD12A90;
  a1->n128_u64[1] = (unint64_t)&unk_1EDD12A68;
  __n128 result = *(__n128 *)(a2 + 8);
  a1[1] = result;
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u32[0] = -1;
  a1->n128_u64[0] = (unint64_t)&unk_1EDD126D0;
  a1->n128_u64[1] = (unint64_t)&unk_1EDD12700;
  a1[2].n128_u64[0] = (unint64_t)&unk_1EDD12728;
  a1[2].n128_u64[1] = 0;
  return result;
}

uint64_t sub_18E00D56C(uint64_t a1)
{
  *(void *)(a1 + 32) = &unk_1EDD136E0;
  sub_18DFE4B84((uint64_t *)(a1 + 40));
  std::exception::~exception((std::exception *)(a1 + 8));
  return a1;
}

void sub_18E00D5C0()
{
}

void sub_18E00D788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_18DFE4B84(&a9);
  sub_18DFE4B84(&a10);
  (*(void (**)(uint64_t))(*(void *)v10 + 24))(v10);
  _Unwind_Resume(a1);
}

void sub_18E00D800(uint64_t a1)
{
  exceptioint n = __cxa_allocate_exception(0x48uLL);
  sub_18E00DAB4((uint64_t)exception, a1);
  __cxa_throw(exception, (struct type_info *)&unk_1EDD046E0, (void (*)(void *))sub_18E00D56C);
}

void sub_18E00D848(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_18E00D85C(uint64_t a1)
{
  *(void *)(a1 + 32) = &unk_1EDD136E0;
  sub_18DFE4B84((uint64_t *)(a1 + 40));
  std::exception::~exception((std::exception *)(a1 + 8));

  JUMPOUT(0x192FA6240);
}

void sub_18E00D8D0(uint64_t a1)
{
  *(void *)(a1 + 24) = &unk_1EDD136E0;
  sub_18DFE4B84((uint64_t *)(a1 + 32));

  std::exception::~exception((std::exception *)a1);
}

void sub_18E00D92C(uint64_t a1)
{
  *(void *)(a1 + 24) = &unk_1EDD136E0;
  sub_18DFE4B84((uint64_t *)(a1 + 32));
  std::exception::~exception((std::exception *)a1);

  JUMPOUT(0x192FA6240);
}

const char *sub_18E00D9A4()
{
  return "bad lexical cast: source type value could not be interpreted as target";
}

void sub_18E00D9B0(void *a1)
{
  *a1 = &unk_1EDD136E0;
  sub_18DFE4B84(a1 + 1);

  std::exception::~exception((std::exception *)a1 - 3);
}

void sub_18E00DA08(void *a1)
{
  *a1 = &unk_1EDD136E0;
  sub_18DFE4B84(a1 + 1);
  std::exception::~exception((std::exception *)a1 - 3);

  JUMPOUT(0x192FA6240);
}

void sub_18E00DA7C(std::exception *a1)
{
  std::exception::~exception(a1);

  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E00DAB4(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1EDD12A90;
  *(void *)(a1 + 8) = &unk_1EDD12A68;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = &unk_1EDD136E0;
  *(void *)(a1 + 40) = v4;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  long long v5 = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = v5;
  *(void *)a1 = &unk_1EDD126D0;
  *(void *)(a1 + 8) = &unk_1EDD12700;
  *(void *)(a1 + 32) = &unk_1EDD12728;
  return a1;
}

void sub_18E00DBD8(_Unwind_Exception *a1)
{
  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_18E00DBEC(uint64_t a1, void *a2, const char *a3)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  uint64_t result = sub_18E00C3DC(a1, __s, a3);
  if (result) {
    return sub_18E00C8A8(a2, __s);
  }
  return result;
}

uint64_t sub_18E00DC58(uint64_t a1, uint64_t a2, const char *a3)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t result = sub_18E00C3DC(a1, __s, a3);
  if (result)
  {
    memset(&v5, 0, sizeof(v5));
    sub_18DF0642C(&v5, __s);
    if (*(char *)(a2 + 23) < 0) {
      operator delete(*(void **)a2);
    }
    *(std::string *)a2 = v5;
    return 1;
  }
  return result;
}

void sub_18E00DCF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, long long a10)
{
  if (SHIBYTE(a10) < 0) {
    operator delete(__p);
  }
  if (a2 == 1)
  {
    exception_ptr = (char *)__cxa_get_exception_ptr(exception_object);
    std::string __p = &unk_1EDD12A68;
    a10 = *(_OWORD *)(exception_ptr + 8);
    __cxa_begin_catch(exception_object);
    std::exception::~exception((std::exception *)&__p);
    __cxa_end_catch();
    JUMPOUT(0x18E00DCC8);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_18E00DD70(uint64_t a1, char *a2, const char *a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (!sub_18E00C3DC(a1, __s, a3)) {
    return 0;
  }
  if (!__s[0])
  {
    uint64_t v11 = 0;
    *a2 = 0;
    return v11;
  }
  p_p = (char *)&__p;
  sub_18DEDE7B0(&__p, __s);
  unsigned __int8 v5 = v20;
  uint64_t v6 = (void **)__p;
  if ((v20 & 0x80u) == 0) {
    uint64_t v7 = (char *)&__p + v20;
  }
  else {
    uint64_t v7 = (char *)__p + v19;
  }
  if ((v20 & 0x80u) != 0) {
    p_p = (char *)__p;
  }
  if (p_p != v7)
  {
    do
    {
      char *p_p = __tolower(*p_p);
      ++p_p;
    }
    while (p_p != v7);
    unsigned __int8 v5 = v20;
    uint64_t v6 = (void **)__p;
  }
  if ((v5 & 0x80u) == 0) {
    uint64_t v8 = &__p;
  }
  else {
    uint64_t v8 = v6;
  }
  int v9 = *(unsigned __int8 *)v8;
  if (v9 == 49) {
    goto LABEL_15;
  }
  if ((v5 & 0x80u) == 0) {
    uint64_t v12 = v5;
  }
  else {
    uint64_t v12 = v19;
  }
  if (v12 == 1)
  {
    if (v9 == 48 || v9 == 110) {
      goto LABEL_35;
    }
    if (v9 == 121)
    {
LABEL_15:
      char v10 = 1;
LABEL_36:
      uint64_t v11 = 1;
      goto LABEL_37;
    }
    goto LABEL_48;
  }
  if (v12 == 3)
  {
    if (*(_WORD *)v8 == 25977 && *((unsigned char *)v8 + 2) == 115) {
      goto LABEL_15;
    }
  }
  else if (v12 == 4 && *(_DWORD *)v8 == 1702195828)
  {
    goto LABEL_15;
  }
  if (v9 == 48)
  {
LABEL_35:
    char v10 = 0;
    goto LABEL_36;
  }
  if (v12 != 2)
  {
    if (v12 == 5)
    {
      char v10 = 0;
      uint64_t v11 = 0;
      int v15 = *(_DWORD *)v8;
      int v16 = *((unsigned __int8 *)v8 + 4);
      if (v15 != 1936482662 || v16 != 101) {
        goto LABEL_37;
      }
      goto LABEL_36;
    }
LABEL_48:
    char v10 = 0;
    uint64_t v11 = 0;
    goto LABEL_37;
  }
  char v10 = 0;
  uint64_t v11 = 0;
  if (*(_WORD *)v8 == 28526) {
    goto LABEL_36;
  }
LABEL_37:
  *a2 = v10;
  if ((v5 & 0x80) != 0) {
    operator delete(v6);
  }
  return v11;
}

void sub_18E00DF78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

uint64_t sub_18E00DF9C(uint64_t a1)
{
  uint64_t v1 = 0;
  uint64_t v2 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = v2 - 1;
  int v3 = *(_DWORD **)(a1 + 8);
  *int v3 = 0;
  if (*(void *)(a1 + 16) <= (unint64_t)(v2 - 1))
  {
    int v4 = *(unsigned __int8 *)(v2 - 1);
    if ((v4 - 58) < 0xFFFFFFF6) {
      return 0;
    }
    *int v3 = v4 - 48;
    *(void *)(a1 + 24) = v2 - 2;
    MEMORY[0x192FA6100](&v30);
    uint64_t v6 = std::locale::classic();
    if (std::locale::operator==(&v30, v6))
    {
      uint64_t v1 = sub_18E00E248(a1);
LABEL_45:
      std::locale::~locale(&v30);
      return v1;
    }
    uint64_t v7 = std::locale::use_facet(&v30, MEMORY[0x1E4FBA2A0]);
    ((void (*)(void **__return_ptr))v7->__vftable[1].__on_zero_shared)(&__p);
    if ((char)v29 < 0)
    {
      uint64_t v8 = v28;
      if (!v28) {
        goto LABEL_42;
      }
      p_p = (char *)__p;
    }
    else
    {
      uint64_t v8 = v29;
      if (!v29) {
        goto LABEL_42;
      }
      p_p = (char *)&__p;
    }
    if (*p_p >= 1)
    {
      char v10 = ((uint64_t (*)(const std::locale::facet *))v7->__vftable[1].~facet_0)(v7);
      uint64_t v11 = *(unsigned char **)(a1 + 16);
      uint64_t v12 = *(unsigned char **)(a1 + 24);
      if (v12 >= v11)
      {
        unsigned __int8 v13 = 0;
        int v14 = __p;
        if ((v29 & 0x80u) == 0) {
          int v14 = &__p;
        }
        char v15 = *v14 - 1;
        do
        {
          if (v15)
          {
            unsigned int v16 = *(_DWORD *)(a1 + 4);
            if (*(unsigned char *)a1) {
              BOOL v17 = 1;
            }
            else {
              BOOL v17 = v16 > 0x19999999;
            }
            char v18 = v17;
            *(unsigned char *)a1 = v18;
            unsigned int v19 = 10 * v16;
            *(_DWORD *)(a1 + 4) = 10 * v16;
            int v20 = (char)*v12;
            if ((*v12 - 58) < 0xF6u) {
              goto LABEL_47;
            }
            unsigned int v21 = v20 - 48;
            int v22 = (v20 - 48) * v19;
            if (v21)
            {
              if (v18) {
                goto LABEL_47;
              }
              if (((v21 * (unint64_t)v19) & 0xFFFFFFFF00000000) != 0) {
                goto LABEL_47;
              }
              uint64_t v23 = *(_DWORD **)(a1 + 8);
              int v24 = *v23;
              if (__CFADD__(v22, *v23)) {
                goto LABEL_47;
              }
            }
            else
            {
              uint64_t v23 = *(_DWORD **)(a1 + 8);
              int v24 = *v23;
            }
            *uint64_t v23 = v24 + v22;
            --v15;
          }
          else
          {
            if (*v12 != v10) {
              goto LABEL_42;
            }
            if (v12 == v11)
            {
LABEL_47:
              uint64_t v1 = 0;
              goto LABEL_43;
            }
            if (v8 - 1 > (unint64_t)v13) {
              ++v13;
            }
            if ((v29 & 0x80u) == 0) {
              uint64_t v25 = &__p;
            }
            else {
              uint64_t v25 = __p;
            }
            char v15 = v25[v13];
          }
          *(void *)(a1 + 24) = --v12;
        }
        while (v12 >= v11);
      }
      uint64_t v1 = 1;
      goto LABEL_43;
    }
LABEL_42:
    uint64_t v1 = sub_18E00E248(a1);
LABEL_43:
    if ((char)v29 < 0) {
      operator delete(__p);
    }
    goto LABEL_45;
  }
  return v1;
}

void sub_18E00E214(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::locale::~locale(&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_18E00E248(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(unsigned char **)(a1 + 24);
  if ((unint64_t)v2 < v1) {
    return 1;
  }
  char v4 = *(unsigned char *)a1 != 0;
  while (1)
  {
    unsigned int v5 = *(_DWORD *)(a1 + 4);
    v4 |= v5 > 0x19999999;
    *(unsigned char *)a1 = v4 & 1;
    unsigned int v6 = 10 * v5;
    *(_DWORD *)(a1 + 4) = 10 * v5;
    int v7 = (char)*v2;
    if ((*v2 - 58) < 0xF6u) {
      break;
    }
    unsigned int v8 = v7 - 48;
    int v9 = (v7 - 48) * v6;
    if (v8)
    {
      if (v4) {
        return 0;
      }
      if (((v8 * (unint64_t)v6) & 0xFFFFFFFF00000000) != 0) {
        return 0;
      }
      char v10 = *(_DWORD **)(a1 + 8);
      int v11 = *v10;
      if (__CFADD__(v9, *v10)) {
        return 0;
      }
    }
    else
    {
      char v10 = *(_DWORD **)(a1 + 8);
      int v11 = *v10;
    }
    *char v10 = v11 + v9;
    *(void *)(a1 + 24) = --v2;
    if ((unint64_t)v2 < v1) {
      return 1;
    }
  }
  return 0;
}

uint64_t sub_18E00E304(uint64_t a1, float *a2, const char *a3)
{
  *(void *)&v33[1023] = *MEMORY[0x1E4F143B8];
  uint64_t result = sub_18E00C3DC(a1, &__s, a3);
  if (result)
  {
    float v27 = 0.0;
    size_t v5 = strlen(&__s);
    unsigned int v6 = &v33[v5 - 1];
    if (!v5) {
      goto LABEL_10;
    }
    BOOL v7 = __s == 45 || __s == 43;
    unsigned int v8 = v7 ? v33 : &__s;
    uint64_t v9 = v6 - v8;
    if (v6 - v8 < 3) {
      goto LABEL_10;
    }
    unint64_t v16 = 0;
    BOOL v17 = 0;
    do
    {
      int v18 = v8[v16];
      if (v18 != aNan_0[v16] && v18 != aNan[v16]) {
        break;
      }
      BOOL v17 = v16++ > 1;
    }
    while (v16 != 3);
    if (v17)
    {
      unsigned int v19 = v8 + 3;
      if (v19 != v6 && (v6 - v19 < 2 || *v19 != 40 || *(v6 - 1) != 41)) {
        goto LABEL_10;
      }
      BOOL v20 = __s == 45;
      float v15 = NAN;
      float v21 = NAN;
    }
    else
    {
      if (v9 == 3)
      {
        unint64_t v25 = 0;
        BOOL v23 = 0;
        do
        {
          int v26 = v8[v25];
          if (v26 != aInfinity_0[v25] && v26 != aInfinity[v25]) {
            break;
          }
          BOOL v23 = v25++ > 1;
        }
        while (v25 != 3);
      }
      else
      {
        if (v9 != 8) {
          goto LABEL_10;
        }
        unint64_t v22 = 0;
        BOOL v23 = 0;
        do
        {
          int v24 = v8[v22];
          if (v24 != aInfinity_0[v22] && v24 != aInfinity[v22]) {
            break;
          }
          BOOL v23 = v22++ > 6;
        }
        while (v22 != 8);
      }
      if (!v23)
      {
LABEL_10:
        std::streambuf::basic_streambuf();
        __sb[0] = &unk_1EDD135E8;
        __sb[2] = &__s;
        __sb[3] = &__s;
        __sb[4] = v6;
        v28.__vftable = (std::bad_cast_vtbl *)(MEMORY[0x1E4FBA450] + 24);
        v29[0] = 0;
        v29[1] = MEMORY[0x1E4FBA450] + 64;
        std::ios_base::init((std::ios_base *)&v29[1], __sb);
        v29[18] = 0;
        int v30 = -1;
        char v10 = (std::ios_base *)((char *)&v28 + (unint64_t)v28.__vftable[-1].~bad_cast);
        v10->__exceptions_ = 1;
        std::ios_base::clear(v10, v10->__rdstate_);
        int v11 = v28.__vftable;
        *(_DWORD *)((char *)&v28 + (unint64_t)v28.__vftable[-1].~bad_cast + 8) &= ~0x1000u;
        *(void *)((char *)&v29[1] + (unint64_t)v11[-1].~bad_cast) = 9;
        uint64_t v12 = (void *)MEMORY[0x192FA5E00](&v28, &v27);
        if ((*((unsigned char *)v12 + *(void *)(*v12 - 24) + 32) & 5) != 0)
        {
          std::istream::~istream();
          std::streambuf::~streambuf();
        }
        else
        {
          int v13 = std::istream::get();
          std::istream::~istream();
          std::streambuf::~streambuf();
          if (v13 == -1)
          {
            unsigned int v14 = *(v6 - 1) - 43;
            if (v14 > 0x3A || ((1 << v14) & 0x400000004000005) == 0)
            {
              float v15 = v27;
LABEL_15:
              *a2 = v15;
              return 1;
            }
          }
        }
        std::bad_cast::bad_cast(&v28);
        v28.__vftable = (std::bad_cast_vtbl *)&unk_1EDD12A68;
        v29[0] = MEMORY[0x1E4FBA308];
        v29[1] = MEMORY[0x1E4FBA398];
        sub_18E00D464((uint64_t)&v28);
      }
      BOOL v20 = __s == 45;
      float v15 = INFINITY;
      float v21 = -INFINITY;
    }
    if (v20) {
      float v15 = v21;
    }
    goto LABEL_15;
  }
  return result;
}

void sub_18E00E774(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::exception a11)
{
}

uint64_t sub_18E00E7E4(uint64_t a1, int *a2, const char *a3)
{
  *(void *)&v18[1023] = *MEMORY[0x1E4F143B8];
  uint64_t result = sub_18E00C3DC(a1, &__s, a3);
  if (result)
  {
    size_t v5 = strlen(&__s);
    if (v5)
    {
      int v16 = 0;
      int v6 = __s;
      p_s = &__s;
      if (__s == 45 || __s == 43) {
        p_s = v18;
      }
      LOBYTE(v12.__vftable) = 0;
      HIDWORD(v12.__vftable) = 1;
      int v13 = &v16;
      unsigned int v14 = p_s;
      float v15 = &v18[v5 - 1];
      char v8 = sub_18E00DF9C((uint64_t)&v12);
      int v9 = v16;
      if (v6 == 45)
      {
        if (v16 < 0x80000001) {
          char v10 = v8;
        }
        else {
          char v10 = 0;
        }
        if (v10)
        {
          int v9 = -v16;
LABEL_16:
          *a2 = v9;
          return 1;
        }
      }
      else
      {
        if (v16 >= 0) {
          char v11 = v8;
        }
        else {
          char v11 = 0;
        }
        if (v11) {
          goto LABEL_16;
        }
      }
    }
    std::bad_cast::bad_cast(&v12);
    v12.__vftable = (std::bad_cast_vtbl *)&unk_1EDD12A68;
    int v13 = (int *)MEMORY[0x1E4FBA308];
    unsigned int v14 = (char *)MEMORY[0x1E4FBA3A8];
    sub_18E00D464((uint64_t)&v12);
  }
  return result;
}

void sub_18E00E920(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10, long long a11, std::exception a12)
{
  if (a2 == 1)
  {
    exception_ptr = (char *)__cxa_get_exception_ptr(exception_object);
    a10.__vftable = (std::exception_vtbl *)&unk_1EDD12A68;
    a11 = *(_OWORD *)(exception_ptr + 8);
    __cxa_begin_catch(exception_object);
    std::exception::~exception(&a10);
    __cxa_end_catch();
    JUMPOUT(0x18E00E8A8);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_18E00E9A0(uint64_t a1, uint64_t *a2, const char *a3)
{
  *(void *)&v42[1023] = *MEMORY[0x1E4F143B8];
  uint64_t result = sub_18E00C3DC(a1, &__s, a3);
  if (result)
  {
    uint64_t v32 = 0;
    size_t v5 = strlen(&__s);
    if (!v5) {
      goto LABEL_57;
    }
    int v6 = &v42[v5 - 1];
    int v7 = __s;
    p_s = &__s;
    if (__s == 45 || __s == 43) {
      p_s = v42;
    }
    int v9 = 0;
    LOBYTE(v33.__vftable) = 0;
    uint64_t v34 = 1;
    uint64_t v35 = &v32;
    int v36 = p_s;
    uint64_t v32 = 0;
    if (p_s <= v6 - 1)
    {
      int v10 = *(v6 - 1);
      if ((v10 - 58) >= 0xFFFFFFF6)
      {
        uint64_t v32 = (v10 - 48);
        char v11 = v6 - 2;
        double v37 = v6 - 2;
        MEMORY[0x192FA6100](&v31);
        std::bad_cast v12 = std::locale::classic();
        if (std::locale::operator==(&v31, v12))
        {
          int v9 = sub_18E00ED94((uint64_t)&v33);
        }
        else
        {
          int v13 = std::locale::use_facet(&v31, MEMORY[0x1E4FBA2A0]);
          ((void (*)(void **__return_ptr))v13->__vftable[1].__on_zero_shared)(&__p);
          if ((char)v40 < 0)
          {
            uint64_t v14 = v39;
            if (!v39) {
              goto LABEL_46;
            }
            p_p = (char *)__p;
          }
          else
          {
            uint64_t v14 = v40;
            if (!v40) {
              goto LABEL_46;
            }
            p_p = (char *)&__p;
          }
          if (*p_p < 1)
          {
LABEL_46:
            int v9 = sub_18E00ED94((uint64_t)&v33);
            unsigned __int8 v17 = v40;
          }
          else
          {
            char v16 = ((uint64_t (*)(const std::locale::facet *))v13->__vftable[1].~facet_0)(v13);
            unsigned __int8 v17 = v40;
            if (v11 >= p_s)
            {
              char v18 = 0;
              unsigned __int8 v19 = 0;
              BOOL v20 = __p;
              if ((v40 & 0x80u) == 0) {
                BOOL v20 = &__p;
              }
              char v21 = *v20 - 1;
              uint64_t v22 = v32;
              unint64_t v23 = 1;
              do
              {
                if (v21)
                {
                  if (v18) {
                    BOOL v24 = 1;
                  }
                  else {
                    BOOL v24 = v23 > 0x1999999999999999;
                  }
                  char v18 = v24;
                  uint64_t v25 = *v11;
                  if ((v25 - 58) < 0xF6u
                    || (v23 *= 10, unint64_t v26 = v25 - 48, v27 = v23 * (v25 - 48), v26)
                    && ((v18 & 1) != 0
                     || ((BOOL v28 = (v26 * (unsigned __int128)v23) >> 64 != 0, !__CFADD__(v27, v22)) ? (v29 = 0) : (v29 = 1),
                         v28 || (v29 & 1) != 0)))
                  {
LABEL_44:
                    int v9 = 0;
                    goto LABEL_47;
                  }
                  v22 += v27;
                  uint64_t v32 = v22;
                  --v21;
                }
                else
                {
                  if (*v11 != v16)
                  {
                    LOBYTE(v33.__vftable) = v18;
                    uint64_t v34 = v23;
                    double v37 = v11;
                    goto LABEL_46;
                  }
                  if (v11 == p_s) {
                    goto LABEL_44;
                  }
                  if (v14 - 1 > (unint64_t)v19) {
                    ++v19;
                  }
                  char v21 = v20[v19];
                }
                --v11;
              }
              while (v11 >= p_s);
            }
            int v9 = 1;
          }
LABEL_47:
          if ((v17 & 0x80) != 0) {
            operator delete(__p);
          }
        }
        std::locale::~locale(&v31);
      }
      else
      {
        int v9 = 0;
      }
    }
    if (v7 == 45)
    {
      uint64_t v30 = -v32;
      uint64_t v32 = -v32;
      if ((v9 & 1) == 0)
      {
LABEL_57:
        std::bad_cast::bad_cast(&v33);
        v33.__vftable = (std::bad_cast_vtbl *)&unk_1EDD12A68;
        uint64_t v34 = MEMORY[0x1E4FBA308];
        uint64_t v35 = (uint64_t *)MEMORY[0x1E4FBA3E8];
        sub_18E00D464((uint64_t)&v33);
      }
    }
    else
    {
      if (!v9) {
        goto LABEL_57;
      }
      uint64_t v30 = v32;
    }
    *a2 = v30;
    return 1;
  }
  return result;
}

void sub_18E00ECEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, long long a11, uint64_t a12, std::exception a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  std::locale::~locale(&a10);
  if (a2 == 1)
  {
    exception_ptr = (char *)__cxa_get_exception_ptr(a1);
    a10.__locale_ = (std::locale::__imp *)&unk_1EDD12A68;
    a11 = *(_OWORD *)(exception_ptr + 8);
    __cxa_begin_catch(a1);
    std::exception::~exception((std::exception *)&a10);
    __cxa_end_catch();
    JUMPOUT(0x18E00EC6CLL);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_18E00ED94(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 24);
  uint64_t v2 = *(char **)(a1 + 32);
  if ((unint64_t)v2 < v1) {
    return 1;
  }
  char v4 = *(unsigned char *)a1 != 0;
  while (1)
  {
    unint64_t v5 = *(void *)(a1 + 8);
    v4 |= v5 > 0x1999999999999999;
    *(unsigned char *)a1 = v4 & 1;
    unint64_t v6 = 10 * v5;
    *(void *)(a1 + 8) = 10 * v5;
    uint64_t v7 = *v2;
    if ((v7 - 58) < 0xF6u) {
      break;
    }
    unint64_t v8 = v7 - 48;
    uint64_t v9 = v6 * (v7 - 48);
    if (v8)
    {
      if (v4) {
        return 0;
      }
      if (!is_mul_ok(v8, v6)) {
        return 0;
      }
      int v10 = *(void **)(a1 + 16);
      uint64_t v11 = *v10;
      if (__CFADD__(v9, *v10)) {
        return 0;
      }
    }
    else
    {
      int v10 = *(void **)(a1 + 16);
      uint64_t v11 = *v10;
    }
    *int v10 = v11 + v9;
    *(void *)(a1 + 32) = --v2;
    if ((unint64_t)v2 < v1) {
      return 1;
    }
  }
  return 0;
}

uint64_t sub_18E00EE58(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3 = a1;
  v37[19] = *MEMORY[0x1E4F143B8];
  *(unsigned char *)(a1 + 32) = a3;
  sub_18DEDE4A4(v35);
  uint64_t v9 = v35[0];
  if ((v36[*(void *)(v35[0] - 24) + 16] & 5) != 0)
  {
    LOWORD(__str.__r_.__value_.__l.__data_) = 0;
    v32.__r_.__value_.__s.__data_[0] = 2;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&__str, (unsigned __int8 *)&v32, "ConfigLoader: could not open config file, using default values", v4, v5, v6, v7, v8, v30);
  }
  else
  {
    int v10 = (std::string *)(v3 + 8);
    uint64_t v31 = v3;
    if (*(char *)(v3 + 31) < 0)
    {
      *(void *)(v3 + 16) = 0;
      uint64_t v11 = *(unsigned char **)(v3 + 8);
    }
    else
    {
      *(unsigned char *)(v3 + 31) = 0;
      uint64_t v11 = (unsigned char *)(v3 + 8);
    }
    *uint64_t v11 = 0;
    memset(&__str, 0, sizeof(__str));
    std::bad_cast v12 = (std::locale::id *)MEMORY[0x1E4FBA258];
    while (1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)v35 + *(void *)(v9 - 24)));
      int v13 = std::locale::use_facet((const std::locale *)&v32, v12);
      unsigned __int8 v14 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
      std::locale::~locale((std::locale *)&v32);
      float v15 = sub_18E00F294(v35, (uint64_t)&__str, v14);
      std::string::size_type v16 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      LOBYTE(v17) = *((unsigned char *)&__str.__r_.__value_.__s + 23);
      if ((*((unsigned char *)v15 + *(void *)(*v15 - 24) + 32) & 5) != 0) {
        break;
      }
      std::string::size_type size = __str.__r_.__value_.__l.__size_;
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int64_t v19 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      }
      else {
        int64_t v19 = __str.__r_.__value_.__l.__size_;
      }
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_str = &__str;
      }
      else {
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      if (v19 >= 1)
      {
        char v21 = (char *)p_str + v19;
        uint64_t v22 = p_str;
        do
        {
          unint64_t v23 = memchr(v22, 35, v19);
          if (!v23) {
            break;
          }
          if (*v23 == 35)
          {
            if (v23 != v21 && v23 - (unsigned char *)p_str != -1)
            {
              std::string::basic_string(&v32, &__str, 0, v23 - (unsigned char *)p_str, (std::allocator<char> *)&v34);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__str.__r_.__value_.__l.__data_);
              }
              std::string __str = v32;
              std::string::size_type v16 = HIBYTE(v32.__r_.__value_.__r.__words[2]);
              std::string::size_type size = v32.__r_.__value_.__l.__size_;
              std::string::size_type v17 = HIBYTE(v32.__r_.__value_.__r.__words[2]);
            }
            break;
          }
          uint64_t v22 = (std::string *)(v23 + 1);
          int64_t v19 = v21 - (unsigned char *)v22;
        }
        while (v21 - (unsigned char *)v22 >= 1);
      }
      if ((v17 & 0x80u) != 0) {
        std::string::size_type v16 = size;
      }
      sub_18DF06474((uint64_t)&v32, v16 + 1);
      if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        BOOL v24 = &v32;
      }
      else {
        BOOL v24 = (std::string *)v32.__r_.__value_.__r.__words[0];
      }
      if (v16)
      {
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v25 = &__str;
        }
        else {
          uint64_t v25 = (std::string *)__str.__r_.__value_.__r.__words[0];
        }
        memmove(v24, v25, v16);
      }
      *(_WORD *)((char *)&v24->__r_.__value_.__l.__data_ + v16) = 10;
      if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v26 = &v32;
      }
      else {
        unint64_t v26 = (std::string *)v32.__r_.__value_.__r.__words[0];
      }
      if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v27 = HIBYTE(v32.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v27 = v32.__r_.__value_.__l.__size_;
      }
      std::string::append(v10, (const std::string::value_type *)v26, v27);
      if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v32.__r_.__value_.__l.__data_);
      }
      uint64_t v9 = v35[0];
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    uint64_t v3 = v31;
  }
  uint64_t v28 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 32))(v3);
  v35[0] = *MEMORY[0x1E4FBA3F8];
  *(uint64_t *)((char *)v35 + *(void *)(v35[0] - 24)) = *(void *)(MEMORY[0x1E4FBA3F8] + 24);
  MEMORY[0x192FA5DA0](v36);
  std::istream::~istream();
  MEMORY[0x192FA6190](v37);
  return v28;
}

void sub_18E00F22C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23)
{
}

void *sub_18E00F294(void *a1, uint64_t a2, unsigned __int8 a3)
{
  MEMORY[0x192FA5DC0](&v11, a1, 1);
  if (!v11) {
    return a1;
  }
  if (*(char *)(a2 + 23) < 0)
  {
    **(unsigned char **)a2 = 0;
    *(void *)(a2 + 8) = 0;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 23) = 0;
  }
  uint64_t v6 = 0;
  while (1)
  {
    uint64_t v7 = *(void **)((char *)a1 + *(void *)(*a1 - 24) + 40);
    uint64_t v8 = (unsigned char *)v7[3];
    if (v8 != (unsigned char *)v7[4])
    {
      void v7[3] = v8 + 1;
      LOBYTE(v7) = *v8;
      goto LABEL_9;
    }
    LODWORD(v7) = (*(uint64_t (**)(void *))(*v7 + 80))(v7);
    if (v7 == -1) {
      break;
    }
LABEL_9:
    if (v7 == a3)
    {
      int v9 = 0;
      goto LABEL_17;
    }
    std::string::push_back((std::string *)a2, (std::string::value_type)v7);
    --v6;
    if (*(char *)(a2 + 23) < 0 && *(void *)(a2 + 8) == 0x7FFFFFFFFFFFFFF7)
    {
      int v9 = 4;
      goto LABEL_17;
    }
  }
  if (v6) {
    int v9 = 2;
  }
  else {
    int v9 = 6;
  }
LABEL_17:
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | v9);
  return a1;
}

void sub_18E00F3F4(void *a1)
{
  __cxa_begin_catch(a1);
  uint64_t v2 = *v1;
  *(_DWORD *)((char *)v1 + *(void *)(*v1 - 24) + 32) |= 1u;
  if ((*((unsigned char *)v1 + *(void *)(v2 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x18E00F3B4);
  }
  __cxa_rethrow();
}

void sub_18E00F470(_Unwind_Exception *a1)
{
}

double raven::BuildingSectionFacetID::Get_DistanceFromBuildingCentroid_Squared_m2(uint64_t *a1, double *a2, double *a3)
{
  uint64_t v3 = *a1;
  double v4 = (double)*a1 * 0.000001;
  double v5 = v4 + -360.0;
  if (v4 <= 180.0) {
    double v5 = (double)*a1 * 0.000001;
  }
  double v6 = *a3;
  double v7 = a3[1];
  double v9 = *a2;
  double v8 = a2[1];
  double v10 = v5 - v8;
  if (vabdd_f64(v5, v8) > 180.0)
  {
    double v11 = dbl_18E1FCBD0[v10 >= 0.0];
    double v10 = fmod(v10 + v11, 360.0) - v11;
  }
  double v12 = v6 * ((double)HIDWORD(v3) * 0.000001 + -90.0 - v9);
  return v12 * v12 + v7 * v10 * (v7 * v10);
}

BOOL raven::BuildingSectionFacetID::operator==(uint64_t a1, uint64_t a2)
{
  return *(void *)a1 == *(void *)a2
      && *(unsigned __int16 *)(a1 + 8) == *(unsigned __int16 *)(a2 + 8)
      && *(unsigned __int16 *)(a1 + 10) == *(unsigned __int16 *)(a2 + 10);
}

BOOL raven::BuildingSectionFacetID::operator!=(uint64_t a1, uint64_t a2)
{
  return *(void *)a1 != *(void *)a2
      || *(unsigned __int16 *)(a1 + 8) != *(unsigned __int16 *)(a2 + 8)
      || *(unsigned __int16 *)(a1 + 10) != *(unsigned __int16 *)(a2 + 10);
}

BOOL raven::BuildingSectionFacetID::operator>(uint64_t a1, uint64_t a2)
{
  BOOL v2 = *(void *)a1 > *(void *)a2;
  if (*(void *)a1 == *(void *)a2) {
    return __PAIR64__(*(unsigned __int16 *)(a1 + 10), *(unsigned __int16 *)(a1 + 8)) > __PAIR64__(*(unsigned __int16 *)(a2 + 10), *(unsigned __int16 *)(a2 + 8));
  }
  return v2;
}

BOOL raven::BuildingSectionFacetID::operator<(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1 != *(void *)a2)
  {
    BOOL v7 = *(void *)a1 > *(void *)a2;
    return !v7;
  }
  unsigned int v2 = *(unsigned __int16 *)(a1 + 8);
  unsigned int v3 = *(unsigned __int16 *)(a2 + 8);
  unsigned int v4 = *(unsigned __int16 *)(a1 + 10);
  unsigned int v5 = *(unsigned __int16 *)(a2 + 10);
  BOOL v6 = v2 == v3 && v4 == v5;
  if (!v6)
  {
    BOOL v7 = v2 > v3;
    BOOL v6 = v4 == v5;
    BOOL v8 = v4 > v5;
    if (!v6) {
      BOOL v7 = v8;
    }
    return !v7;
  }
  return 0;
}

uint64_t raven::PointToFacetVisibilityHierarchy::PointToFacetVisibilityHierarchy(uint64_t result, double *a2)
{
  *(_OWORD *)(result + 24) = 0u;
  *(_OWORD *)(result + 8) = 0u;
  *(_DWORD *)(result + 40) = 1065353216;
  double v2 = a2[1] * 57.2957795;
  BOOL v3 = COERCE__INT64(fabs(v2)) > 0x7FEFFFFFFFFFFFFFLL;
  uint64_t v4 = -1;
  if (v2 > -180.0 && v2 < 360.0 && !v3)
  {
    double v5 = *a2 * 57.2957795;
    uint64_t v4 = -1;
    if (COERCE_UNSIGNED_INT64(fabs(v5)) <= 0x7FEFFFFFFFFFFFFFLL)
    {
      BOOL v6 = &unk_18E1EF000;
      if (fabs(v5) <= 90.0)
      {
        if (v2 < 0.0) {
          double v2 = v2 + 360.0;
        }
        unint64_t v7 = (unint64_t)&unk_18E1EF000;
        LODWORD(v7) = vcvtad_u64_f64(v2 * 1000000.0);
        LODWORD(v6) = vcvtad_u64_f64((v5 + 90.0) * 1000000.0);
        uint64_t v4 = v7 | ((void)v6 << 32);
      }
    }
  }
  *(void *)uint64_t result = v4;
  return result;
}

void raven::RavenFacetVisibilityData::ConstructFacetToFacetVisibilityHierarchy()
{
}

void sub_18E00FF70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  sub_18E01000C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, v16);
}

void sub_18E00FFAC(void *a1)
{
  __cxa_begin_catch(a1);
  do
  {
    double v2 = (void *)*v1;
    operator delete(v1);
    unint64_t v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_18E00FFCC()
{
}

void sub_18E00FFE8()
{
  operator delete(v0);
  JUMPOUT(0x18E010010);
}

void sub_18E01000C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
}

uint64_t raven::RavenFacetVisibilityData::GetCBFPointerForABuildingFacet(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 32);
  if (v2 != v3)
  {
    while (*(void *)(*(void *)v2 + 16) != a2)
    {
      v2 += 8;
      if (v2 == v3) {
        return 0;
      }
    }
  }
  if (v2 == v3) {
    return 0;
  }
  else {
    return *(void *)v2;
  }
}

uint64_t raven::RavenFacetVisibilityData::GetBuildingSectionFacetID(raven::RavenFacetVisibilityData *this, int a2, const CoreNavigation::CLP::LogEntry::RayTracingTileData::RayTracingTilePayload *a3)
{
  if (*((_DWORD *)a3 + 18) <= a2)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v10);
  }
  int v5 = *(_DWORD *)(*((void *)a3 + 8) + 4 * a2);
  uint64_t v6 = *((void *)a3 + 1);
  if (!v6)
  {
    CoreNavigation::CLP::LogEntry::RayTracingTileData::protobuf_AddDesc_CoreNavigationCLPRayTracingTileData_2eproto(this);
    uint64_t v6 = *(void *)(CoreNavigation::CLP::LogEntry::RayTracingTileData::RayTracingTilePayload::default_instance_ + 8);
  }
  signed int v7 = (0xFFFFFFFF >> *(_DWORD *)(v6 + 64)) & v5;
  if (*((_DWORD *)a3 + 12) <= v7)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v10);
  }
  signed int v8 = (0xFFFFFFFF >> *(_DWORD *)(v6 + 60)) & *(_DWORD *)(*((void *)a3 + 5) + 4 * v7);
  if (*((_DWORD *)a3 + 6) <= v8)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v10);
  }
  return *(void *)(*((void *)a3 + 2) + 8 * v8);
}

void sub_18E010200(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

unint64_t raven::RavenFacetVisibilityData::GetTileAndFacetIntervisibilityIndex(raven::RavenFacetVisibilityData *a1, int a2, uint64_t a3, CoreNavigation::CLP::LogEntry::RayTracingTileData::RayTracingTilePayload *a4)
{
  if (a3)
  {
    uint64_t v5 = *((void *)a1 + 23);
    if (v5)
    {
      uint64_t BuildingSectionFacetID = raven::RavenFacetVisibilityData::GetBuildingSectionFacetID(a1, a2, a4);
      int v10 = v9;
      uint64_t v11 = *((void *)a1 + 23);
      double v12 = (cnprint::CNPrinter *)(*(uint64_t (**)(uint64_t))(*(void *)a3 + 48))(a3);
      if (*(unsigned char *)(v11 + 24))
      {
        double v15 = *(double *)(v11 + 176);
        double v16 = v14 / *(double *)(v11 + 168);
        double v17 = v13 / v15;
        if (v15 <= 0.0) {
          double v17 = 0.0;
        }
        double v18 = v16 + *(double *)v11;
        double v19 = v17 + *(double *)(v11 + 8);
        v49[0] = v18 * 57.2957795;
        v49[1] = v19 * 57.2957795;
        unint64_t TileIndexInRayTracingTileDataBase = raven::RavenFacetVisibilityData::GetTileIndexInRayTracingTileDataBase(a1, v49, v19, v18);
        if (HIDWORD(TileIndexInRayTracingTileDataBase))
        {
          unsigned int v32 = TileIndexInRayTracingTileDataBase;
          uint64_t v33 = *(void *)(*((void *)a1 + 16) + 8 * TileIndexInRayTracingTileDataBase);
          int v34 = *(_DWORD *)(v33 + 96);
          if (v34 < 1)
          {
            LODWORD(i) = 0;
          }
          else
          {
            for (uint64_t i = 0; i < v34; ++i)
            {
              unint64_t TileIndexInRayTracingTileDataBase = raven::RavenFacetVisibilityData::GetBuildingSectionFacetID((raven::RavenFacetVisibilityData *)TileIndexInRayTracingTileDataBase, *(_DWORD *)(*(void *)(*(void *)(v33 + 88) + 8 * i) + 8), (const CoreNavigation::CLP::LogEntry::RayTracingTileData::RayTracingTilePayload *)v33);
              int v34 = *(_DWORD *)(v33 + 96);
              if (BuildingSectionFacetID == TileIndexInRayTracingTileDataBase
                && (unsigned __int16)v10 == v36
                && HIWORD(v10) == v37)
              {
                break;
              }
            }
          }
          if (i != v34)
          {
            LOBYTE(v5) = i;
            unint64_t v26 = i & 0x7FFFFF00 | ((unint64_t)v32 << 32);
            return v26 & 0xFFFFFFFFFFFFFF00 | v5;
          }
          LogLevel = (CoreNavigation::CLP::LogEntry::RayTracingTileData *)cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)TileIndexInRayTracingTileDataBase);
          if (!LogLevel)
          {
            __int16 v48 = 12;
            unsigned __int8 v47 = 0;
            if (!*((void *)a4 + 1)) {
              CoreNavigation::CLP::LogEntry::RayTracingTileData::protobuf_AddDesc_CoreNavigationCLPRayTracingTileData_2eproto(LogLevel);
            }
            if (!*(void *)(*(void *)(*((void *)a1 + 16) + 8 * v32) + 8)) {
              CoreNavigation::CLP::LogEntry::RayTracingTileData::protobuf_AddDesc_CoreNavigationCLPRayTracingTileData_2eproto(LogLevel);
            }
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v48, &v47, "#FacetVisInfo,Missing facet info for bldg_facet_section {%llu,%hu,%hu},ref_tile %llu,loc_tile,%llu, facet_ap LL, %12.7f, %12.7f", v41, v42, v43, v44, v45, BuildingSectionFacetID);
          }
        }
        else if (!cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)TileIndexInRayTracingTileDataBase))
        {
          __int16 v48 = 12;
          unsigned __int8 v47 = 0;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v48, &v47, "#FacetVisInfo,Facet not found in any tile bldg_facet_section {%llu,%hu,%hu}, facet_ap LL, %12.7f, %12.7f", v21, v22, v23, v24, v25, BuildingSectionFacetID);
        }
      }
      else if (cnprint::CNPrinter::GetLogLevel(v12) <= 1)
      {
        LOWORD(v49[0]) = 12;
        LOBYTE(v48) = 1;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v49, (unsigned __int8 *)&v48, "#FacetVisInfo,Failed to convert facet vertex lat/long to ENU, bldg_facet_section {%llu,%hu,%hu}", v27, v28, v29, v30, v31, BuildingSectionFacetID);
      }
      LOBYTE(v5) = 0;
    }
    unint64_t v26 = 0;
  }
  else
  {
    LOBYTE(v5) = 0;
    unint64_t v26 = 0;
  }
  return v26 & 0xFFFFFFFFFFFFFF00 | v5;
}

uint64_t raven::RavenFacetVisibilityData::ConstructPointToFacetVisibilityHierarchy(uint64_t a1, float64x2_t *a2, uint64_t a3, _OWORD *a4)
{
  *(_OWORD *)(a1 + 112) = *a4;
  float64x2_t v5 = (float64x2_t)vdupq_n_s64(0x404CA5DC1A63C1F8uLL);
  float64x2_t v48 = vmulq_f64(*a2, v5);
  float64x2_t v50 = v48;
  unint64_t TileIndexInRayTracingTileDataBase = raven::RavenFacetVisibilityData::GetTileIndexInRayTracingTileDataBase((CoreNavigation::CLP::LogEntry::RayTracingTileData *)a1, v50.f64, v48.f64[0], v5.f64[0]);
  if (!HIDWORD(TileIndexInRayTracingTileDataBase))
  {
    if (!cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)TileIndexInRayTracingTileDataBase))
    {
      LOWORD(v51) = 12;
      LOBYTE(v49[0]) = 0;
      char v42 = LOBYTE(v48.f64[0]);
      double v14 = "#FacetVisInfo,Unable to locate (home) tile that contains candidate point, %12.7f, %12.7f";
LABEL_37:
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v51, (unsigned __int8 *)v49, v14, v9, v10, v11, v12, v13, v42);
      return 0;
    }
    return 0;
  }
  uint64_t v15 = *(void *)(*(void *)(a1 + 128) + 8 * TileIndexInRayTracingTileDataBase);
  uint64_t v16 = *(void *)(v15 + 8);
  if (!v16)
  {
    CoreNavigation::CLP::LogEntry::RayTracingTileData::protobuf_AddDesc_CoreNavigationCLPRayTracingTileData_2eproto((CoreNavigation::CLP::LogEntry::RayTracingTileData *)TileIndexInRayTracingTileDataBase);
    uint64_t v16 = *(void *)(CoreNavigation::CLP::LogEntry::RayTracingTileData::RayTracingTilePayload::default_instance_ + 8);
  }
  LODWORD(v8) = *(_DWORD *)(v16 + 8);
  LODWORD(v7) = *(_DWORD *)(v16 + 12);
  double v47 = (double)v7 * 0.000001 + -90.0;
  double v17 = (double)v8 * 0.000001;
  double v18 = v17 + -360.0;
  if (v17 <= 180.0) {
    double v18 = v17;
  }
  uint64_t v19 = *(void *)(v15 + 160);
  uint64_t v20 = *(int *)(v15 + 168);
  double v21 = v48.f64[1] - v18;
  double v46 = v18;
  if (vabdd_f64(v48.f64[1], v18) > 180.0)
  {
    double v22 = dbl_18E1FCBD0[v21 >= 0.0];
    double v21 = fmod(v21 + v22, 360.0) - v22;
  }
  if (v48.f64[0] < v47)
  {
    if (v21 >= 0.0)
    {
      uint64_t v23 = (uint64_t *)(v15 + 136);
      uint64_t v24 = (int *)(v15 + 144);
    }
    else
    {
      uint64_t v23 = (uint64_t *)(v15 + 112);
      uint64_t v24 = (int *)(v15 + 120);
    }
    goto LABEL_16;
  }
  if (v21 < 0.0)
  {
    uint64_t v23 = (uint64_t *)(v15 + 184);
    uint64_t v24 = (int *)(v15 + 192);
LABEL_16:
    uint64_t v19 = *v23;
    uint64_t v25 = *v23 + 8 * *v24;
    goto LABEL_18;
  }
  uint64_t v25 = v19 + 8 * v20;
LABEL_18:
  if (v19 != v25)
  {
    double v26 = *(double *)(a1 + 152);
    double v27 = v26 * 0.5;
    double v28 = v26 * v26;
    double v44 = *(double *)(a1 + 120);
    double v45 = *(double *)(a1 + 112);
    double v43 = v26 * v26;
    uint64_t v29 = v25;
    while (1)
    {
      int v30 = *(_DWORD *)(*(void *)v19 + 8);
      double v31 = v46 + (double)(__int16)v30 * 0.000001;
      if (fabs(v31) > 180.0)
      {
        double v32 = dbl_18E1FCBD0[v31 >= 0.0];
        double v31 = fmod(v31 + v32, 360.0) - v32;
      }
      double v33 = v31 - v48.f64[1];
      if (vabdd_f64(v31, v48.f64[1]) > 180.0)
      {
        double v34 = dbl_18E1FCBD0[v33 >= 0.0];
        double v33 = fmod(v33 + v34, 360.0) - v34;
      }
      double v35 = v47 + (double)(v30 >> 16) * 0.000001;
      double v36 = v45 * (v35 - v48.f64[0]);
      double v37 = v44 * v33;
      double v38 = v36 * v36 + v37 * v37;
      double v39 = fabs(v37);
      if (fabs(v36) <= v27 && v39 <= v27) {
        break;
      }
      if (v38 <= v28)
      {
        uint64_t v29 = v19;
        double v28 = v38;
      }
      v19 += 8;
      if (v19 == v25) {
        goto LABEL_32;
      }
    }
    uint64_t v29 = v19;
    double v28 = v38;
LABEL_32:
    if (v29 != v25 && v28 < v43)
    {
      v49[0] = v35 * 0.0174532925;
      v49[1] = v31 * 0.0174532925;
      operator new();
    }
  }
  if (!cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)TileIndexInRayTracingTileDataBase))
  {
    LOWORD(v51) = 12;
    LOBYTE(v49[0]) = 0;
    char v42 = LOBYTE(v48.f64[0]);
    double v14 = "#FacetVisInfo,PointID for lat_lon{%.6lf,%.6lf} not found in the tile,Hashid,%llu";
    goto LABEL_37;
  }
  return 0;
}

void sub_18E010C58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_18E012598((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

uint64_t raven::RavenFacetVisibilityData::GetTileIndexInRayTracingTileDataBase(CoreNavigation::CLP::LogEntry::RayTracingTileData *a1, double *a2, double a3, double a4)
{
  uint64_t v4 = *((void *)a1 + 16);
  if (*((void *)a1 + 17) == v4)
  {
LABEL_22:
    uint64_t v22 = 0;
    unsigned int v8 = 0;
  }
  else
  {
    uint64_t v7 = 0;
    unsigned int v8 = 0;
    double v9 = 0.5;
    HIDWORD(v10) = 1081507840;
    while (1)
    {
      uint64_t v11 = *(void *)(*(void *)(v4 + 8 * v7) + 8);
      if (!v11)
      {
        CoreNavigation::CLP::LogEntry::RayTracingTileData::protobuf_AddDesc_CoreNavigationCLPRayTracingTileData_2eproto(a1);
        uint64_t v11 = *(void *)(CoreNavigation::CLP::LogEntry::RayTracingTileData::RayTracingTilePayload::default_instance_ + 8);
      }
      LODWORD(a4) = *(_DWORD *)(v11 + 8);
      LODWORD(v10) = *(_DWORD *)(v11 + 12);
      double v12 = (double)*(unint64_t *)&v10 * 0.000001 + -90.0;
      double v13 = (double)*(unint64_t *)&a4 * 0.000001;
      double v14 = v13 <= 180.0 ? v13 : v13 + -360.0;
      a4 = *(float *)(v11 + 20) * v9;
      double v15 = v12 - a4;
      double v10 = a4 + v12;
      if (*a2 >= v15 && *a2 <= v10)
      {
        double v17 = *(float *)(v11 + 24) * v9;
        double v18 = v14 + v17;
        if (fabs(v14 + v17) > 180.0)
        {
          double v19 = dbl_18E1FCBD0[v18 >= 0.0];
          double v18 = fmod(v18 + v19, 360.0) - v19;
          double v9 = 0.5;
        }
        double v10 = v14 - v17;
        if (vabdd_f64(v14, v17) > 180.0)
        {
          double v20 = dbl_18E1FCBD0[v10 >= 0.0];
          double v10 = fmod(v10 + v20, 360.0) - v20;
        }
        a4 = a2[1];
        if (a4 >= v10 && a4 <= v18) {
          break;
        }
      }
      uint64_t v4 = *((void *)a1 + 16);
      uint64_t v7 = ++v8;
      if (v8 >= (unint64_t)((*((void *)a1 + 17) - v4) >> 3)) {
        goto LABEL_22;
      }
    }
    uint64_t v22 = 0x100000000;
  }
  return v22 | v8;
}

uint64_t raven::RavenFacetVisibilityData::SetBuildingCoordinateTransformInstance(uint64_t result, uint64_t a2)
{
  *(void *)(result + 184) = a2;
  return result;
}

raven::RavenFacetVisibilityData *raven::RavenFacetVisibilityData::RavenFacetVisibilityData(raven::RavenFacetVisibilityData *this)
{
  *((void *)this + 2) = 0;
  *((void *)this + 1) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  uint64_t v2 = (char **)((char *)this + 24);
  *((void *)this + 10) = 0;
  *(void *)this = (char *)this + 8;
  *((void *)this + 9) = (char *)this + 80;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0x40E3880000000000;
  *((unsigned char *)this + 104) = 3;
  *((int64x2_t *)this + 7) = vdupq_n_s64(0x7FF8000000000000uLL);
  *((void *)this + 16) = 0;
  *((void *)this + 17) = 0;
  *((void *)this + 18) = 0;
  *((void *)this + 19) = 0x4010000000000000;
  *((void *)this + 22) = 0;
  *((void *)this + 21) = 0;
  *((void *)this + 20) = (char *)this + 168;
  *((void *)this + 23) = 0;
  sub_18E010F98((uint64_t *)this + 16, 0x19uLL);
  sub_18E01102C(v2, 0x2BCuLL);
  return this;
}

void sub_18E010F3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  sub_18E012A10(v12, *(void **)(v10 + 168));
  sub_18E011788(&a10);
  sub_18E012A10(v11, *(void **)(v10 + 80));
  a10 = (void **)(v10 + 48);
  sub_18E011848(&a10);
  sub_18E0118D0(&a10);
  sub_18E012A10(v10, *(void **)(v10 + 8));
  _Unwind_Resume(a1);
}

void **sub_18E010F98(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  if (a2 > (v4 - *a1) >> 3)
  {
    if (a2 >> 61) {
      sub_18E01138C();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_18DEDF808((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    _OWORD v7[2] = (char *)v7[0] + v5;
    void v7[3] = (char *)v7[0] + 8 * v6;
    sub_18E01152C(a1, v7);
    return sub_18E0116DC(v7);
  }
  return result;
}

void sub_18E011018(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_18E0116DC((void **)va);
  _Unwind_Resume(a1);
}

void **sub_18E01102C(char **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  if (a2 > (v4 - *a1) >> 3)
  {
    if (a2 >> 61) {
      sub_18E01138C();
    }
    uint64_t v5 = a1[1] - *a1;
    double v17 = result;
    uint64_t v6 = (char *)sub_18DEDF808((uint64_t)result, a2);
    double v9 = *a1;
    unsigned int v8 = a1[1];
    if (v8 == *a1)
    {
      int64x2_t v12 = vdupq_n_s64((unint64_t)v8);
      uint64_t v10 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    }
    else
    {
      uint64_t v10 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
      do
      {
        uint64_t v11 = *((void *)v8 - 1);
        v8 -= 8;
        *(void *)unsigned int v8 = 0;
        *((void *)v10 - 1) = v11;
        v10 -= 8;
      }
      while (v8 != v9);
      int64x2_t v12 = *(int64x2_t *)a1;
    }
    *a1 = v10;
    a1[1] = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    int64x2_t v15 = v12;
    double v13 = a1[2];
    a1[2] = &v6[8 * v7];
    uint64_t v16 = v13;
    uint64_t v14 = v12.i64[0];
    return sub_18E0113A4((void **)&v14);
  }
  return result;
}

void raven::RavenFacetVisibilityData::Reset(int64x2_t *this)
{
  sub_18E0117DC((int64x2_t *)this[8].i64);
  sub_18E012A10((uint64_t)&this[4].i64[1], (void *)this[5].i64[0]);
  this[4].i64[1] = (uint64_t)this[5].i64;
  this[5].i64[1] = 0;
  this[5].i64[0] = 0;
  this[7] = vdupq_n_s64(0x7FF8000000000000uLL);
  sub_18E012A10((uint64_t)this[10].i64, (void *)this[10].i64[1]);
  this[10].i64[0] = (uint64_t)&this[10].i64[1];
  this[11].i64[0] = 0;
  this[10].i64[1] = 0;

  raven::RavenFacetVisibilityData::ResetFacetVisibilityContainers((raven::RavenFacetVisibilityData *)this);
}

void raven::RavenFacetVisibilityData::ResetFacetVisibilityContainers(raven::RavenFacetVisibilityData *this)
{
  uint64_t v2 = (char **)((char *)this + 24);
  sub_18E011924((void *)this + 3);
  sub_18E0111F4(v2);
  uint64_t v4 = (uint64_t *)*((void *)this + 6);
  for (uint64_t i = (uint64_t *)*((void *)this + 7); i != v4; sub_18E012598(i, 0))
    --i;
  *((void *)this + 7) = v4;
  sub_18E0112C4((uint64_t)this + 48);
  sub_18E012A10((uint64_t)this, *((void **)this + 1));
  *(void *)this = (char *)this + 8;
  *((void *)this + 2) = 0;
  *((void *)this + 1) = 0;
}

void **sub_18E0111F4(char **a1)
{
  uint64_t v3 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  unint64_t v6 = (v5 - *a1) >> 3;
  if (v6 < (v3 - *a1) >> 3)
  {
    double v19 = result;
    if (v5 == v4)
    {
      uint64_t v11 = 0;
      uint64_t v9 = 8 * v6;
    }
    else
    {
      uint64_t v7 = (char *)sub_18DEDF808((uint64_t)result, v6);
      uint64_t v4 = *a1;
      unsigned int v8 = a1[1];
      uint64_t v9 = (uint64_t)&v7[8 * v6];
      uint64_t v11 = &v7[8 * v10];
      uint64_t v17 = v9;
      double v18 = v11;
      if (v8 != v4)
      {
        int64x2_t v12 = &v7[8 * v6];
        do
        {
          uint64_t v13 = *((void *)v8 - 1);
          v8 -= 8;
          *(void *)unsigned int v8 = 0;
          *((void *)v12 - 1) = v13;
          v12 -= 8;
        }
        while (v8 != v4);
        uint64_t v14 = *a1;
        uint64_t v4 = a1[1];
        uint64_t v9 = v17;
        uint64_t v11 = v18;
        goto LABEL_9;
      }
    }
    uint64_t v14 = v4;
    int64x2_t v12 = (char *)v9;
LABEL_9:
    *a1 = v12;
    a1[1] = (char *)v9;
    int64x2_t v15 = a1[2];
    a1[2] = v11;
    uint64_t v17 = (uint64_t)v4;
    double v18 = v15;
    v16[0] = v14;
    v16[1] = v14;
    return sub_18E0113A4(v16);
  }
  return result;
}

void sub_18E0112B4(void *a1)
{
}

uint64_t sub_18E0112C4(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t result = a1 + 16;
  uint64_t v4 = *(void **)a1;
  uint64_t v5 = *(void **)(a1 + 8);
  unint64_t v6 = ((uint64_t)v5 - *(void *)a1) >> 3;
  if (v6 < (v3 - *(void *)a1) >> 3)
  {
    v16[4] = result;
    if (v5 == v4)
    {
      uint64_t v11 = 0;
      uint64_t v9 = 8 * v6;
    }
    else
    {
      uint64_t v7 = (char *)sub_18DEDF808(result, v6);
      unsigned int v8 = *(void **)a1;
      uint64_t v4 = *(void **)(a1 + 8);
      uint64_t v9 = (uint64_t)&v7[8 * v6];
      uint64_t v11 = &v7[8 * v10];
      if (v4 != *(void **)a1)
      {
        int64x2_t v12 = &v7[8 * v6];
        do
        {
          uint64_t v13 = *--v4;
          void *v4 = 0;
          *((void *)v12 - 1) = v13;
          v12 -= 8;
        }
        while (v4 != v8);
        uint64_t v14 = *(void **)a1;
        uint64_t v4 = *(void **)(a1 + 8);
        goto LABEL_9;
      }
    }
    uint64_t v14 = v4;
    int64x2_t v12 = (char *)v9;
LABEL_9:
    *(void *)a1 = v12;
    *(void *)(a1 + 8) = v9;
    uint64_t v15 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v11;
    v16[2] = v4;
    v16[3] = v15;
    v16[0] = v14;
    v16[1] = v14;
    return sub_18E0114D8((uint64_t)v16);
  }
  return result;
}

void sub_18E01137C(void *a1)
{
}

void sub_18E01138C()
{
}

void **sub_18E0113A4(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void *sub_18E0113DC(void *result, uint64_t a2)
{
  uint64_t v2 = result[2];
  if (v2 != a2)
  {
    uint64_t v4 = result;
    do
    {
      void v4[2] = v2 - 8;
      uint64_t result = *(void **)(v2 - 8);
      *(void *)(v2 - 8) = 0;
      if (result) {
        uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
      }
      uint64_t v2 = v4[2];
    }
    while (v2 != a2);
  }
  return result;
}

double sub_18E011450(uint64_t a1, double a2)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_18DFF28FC();
  }
  double v3 = -(*(double *)(a1 + 8) - a2 * 0.0174532925);
  if (fabs(v3) > 3.14159265)
  {
    double v4 = dbl_18E1FCBE0[v3 >= 0.0];
    double v3 = fmod(v3 + v4, 6.28318531) - v4;
  }
  return v3 * *(double *)(a1 + 176);
}

uint64_t sub_18E0114D8(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    sub_18E012598((uint64_t *)(i - 8), 0);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_18E01152C(uint64_t *a1, void *a2)
{
  uint64_t result = sub_18E0115A4((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_18E0115A4(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  unsigned int v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = (void *)(a7 - 8);
    uint64_t v9 = (void *)(a7 - 8);
    do
    {
      uint64_t v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((void *)&v16 + 1) = v8;
      v7 -= 8;
      uint64_t v8 = v9;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_18E01163C((uint64_t)v13);
  return v11;
}

uint64_t sub_18E01163C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_18E011674((void *)a1);
  }
  return a1;
}

void *sub_18E011674(void *result)
{
  unint64_t v1 = *(void ***)(result[2] + 8);
  uint64_t v2 = *(void ***)(result[1] + 8);
  while (v1 != v2)
  {
    uint64_t result = *v1;
    *unint64_t v1 = 0;
    if (result) {
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
    ++v1;
  }
  return result;
}

void **sub_18E0116DC(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void *sub_18E011714(void *result, uint64_t a2)
{
  uint64_t v2 = result[2];
  if (v2 != a2)
  {
    double v4 = result;
    do
    {
      void v4[2] = v2 - 8;
      uint64_t result = *(void **)(v2 - 8);
      *(void *)(v2 - 8) = 0;
      if (result) {
        uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
      }
      uint64_t v2 = v4[2];
    }
    while (v2 != a2);
  }
  return result;
}

void sub_18E011788(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_18E0117DC(v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void *sub_18E0117DC(void *result)
{
  unint64_t v1 = result;
  uint64_t v2 = (void *)*result;
  uint64_t v3 = (void *)result[1];
  while (v3 != v2)
  {
    double v4 = (void *)*--v3;
    uint64_t result = v4;
    *uint64_t v3 = 0;
    if (v4) {
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
  }
  v1[1] = v2;
  return result;
}

void sub_18E011848(void ***a1)
{
  unint64_t v1 = *a1;
  uint64_t v2 = (uint64_t *)**a1;
  if (v2)
  {
    double v4 = (uint64_t *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
        sub_18E012598(--v4, 0);
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_18E0118D0(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_18E011924(v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void *sub_18E011924(void *result)
{
  unint64_t v1 = result;
  uint64_t v2 = (void *)*result;
  uint64_t v3 = (void *)result[1];
  while (v3 != v2)
  {
    double v4 = (void *)*--v3;
    uint64_t result = v4;
    *uint64_t v3 = 0;
    if (v4) {
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
  }
  v1[1] = v2;
  return result;
}

uint64_t sub_18E011990(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  double v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void *sub_18E0119DC(void *a1)
{
  *a1 = &unk_1EDD12310;
  a1[1] = &unk_1EDD123A8;
  sub_18E011990((uint64_t)(a1 + 3));
  return a1;
}

void sub_18E011A44(void *a1)
{
  *a1 = &unk_1EDD12310;
  a1[1] = &unk_1EDD123A8;
  sub_18E011990((uint64_t)(a1 + 3));

  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E011ACC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 16))();
}

uint64_t sub_18E011AF4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))();
}

uint64_t sub_18E011B1C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 32))();
}

uint64_t sub_18E011B44(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40))();
}

uint64_t sub_18E011B6C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 48))();
}

uint64_t sub_18E011B94(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 56))();
}

uint64_t sub_18E011BBC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 64))();
}

uint64_t sub_18E011BE4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 72))();
}

uint64_t sub_18E011C0C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 80))();
}

uint64_t sub_18E011C34(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 88))();
}

uint64_t sub_18E011C5C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 96))();
}

uint64_t sub_18E011C84(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 104))();
}

uint64_t sub_18E011CAC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 112))();
}

double sub_18E011CD4(uint64_t a1, double *a2)
{
  double v4 = *a2 - (*(double (**)(uint64_t))(*(void *)a1 + 48))(a1);
  double v6 = a2[1] - v5;
  double v8 = a2[2] - v7;
  double v9 = (*(double (**)(uint64_t))(*(void *)a1 + 72))(a1);
  double v11 = v10;
  double v13 = v12;
  double v14 = (*(double (**)(uint64_t))(*(void *)a1 + 80))(a1);
  double v17 = v11 * v15 + v9 * v14 + v13 * v16;
  return 1.0 / (1.0 - v17 * v17) * (v6 * (v11 - v15 * v17) + v4 * (v9 - v14 * v17) + v8 * (v13 - v16 * v17));
}

void sub_18E011E14(uint64_t a1@<X0>, void *a2@<X8>)
{
  long long v4 = (unint64_t)(a1 + 24);
  uint64_t v3 = (std::__shared_weak_count *)operator new(0x30uLL);
  v3->__shared_owners_ = 0;
  v3->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDD1E570;
  v3->__shared_weak_owners_ = 0;
  v3[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDD122D0;
  *(_OWORD *)&v3[1].__shared_owners_ = v4;
  *a2 = v3 + 1;
  a2[1] = v3;
  atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  sub_18DEE4E18(v3);
}

uint64_t sub_18E011EC8(void *a1)
{
  *(a1 - 1) = &unk_1EDD12310;
  *a1 = &unk_1EDD123A8;
  return sub_18E011990((uint64_t)(a1 + 2));
}

void sub_18E011F08(void *a1)
{
  *(a1 - 1) = &unk_1EDD12310;
  *a1 = &unk_1EDD123A8;
  sub_18E011990((uint64_t)(a1 + 2));

  JUMPOUT(0x192FA6240);
}

void sub_18E011F88(uint64_t a1@<X0>, void *a2@<X8>)
{
}

void sub_18E011F94(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDD1E570;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_18E011FB4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDD1E570;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E012008(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_18E012030()
{
}

uint64_t sub_18E012044(uint64_t result)
{
  *(void *)(result + 16) = *(void *)(*(void *)(result + 8) + 16);
  return result;
}

uint64_t sub_18E012054(uint64_t result)
{
  *(void *)(result + 16) = **(void **)(result + 16);
  return result;
}

BOOL sub_18E012064(uint64_t a1)
{
  return *(void *)(a1 + 16) == 0;
}

uint64_t sub_18E012074(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 16) + 16);
}

uint64_t *sub_18E012080(uint64_t a1, unint64_t *a2)
{
  long long v4 = *(uint64_t **)(a1 + 8);
  uint64_t v2 = (uint64_t *)(a1 + 8);
  uint64_t v3 = v4;
  if (!v4) {
    return v2;
  }
  unint64_t v5 = *a2;
  unsigned int v6 = *((unsigned __int16 *)a2 + 4);
  double v7 = v2;
  unsigned int v8 = *((unsigned __int16 *)a2 + 5);
  do
  {
    unint64_t v9 = v3[4];
    if (v9 == v5)
    {
      unsigned int v10 = *((unsigned __int16 *)v3 + 20);
      unsigned int v11 = *((unsigned __int16 *)v3 + 21);
      BOOL v12 = v10 == v6 && v11 == v8;
      if (v12)
      {
        double v7 = v3;
        goto LABEL_16;
      }
      BOOL v13 = v10 > v6;
      BOOL v12 = v11 == v8;
      BOOL v14 = v11 > v8;
      if (v12) {
        BOOL v14 = v13;
      }
    }
    else
    {
      BOOL v14 = v9 > v5;
    }
    if (v14) {
      double v7 = v3;
    }
    else {
      ++v3;
    }
LABEL_16:
    uint64_t v3 = (uint64_t *)*v3;
  }
  while (v3);
  if (v7 == v2) {
    return v2;
  }
  unint64_t v15 = v7[4];
  BOOL v16 = v5 > v15;
  if (v5 != v15) {
    goto LABEL_23;
  }
  unsigned int v17 = *((unsigned __int16 *)v7 + 20);
  unsigned int v18 = *((unsigned __int16 *)v7 + 21);
  if (v6 != v17 || v8 != v18)
  {
    BOOL v16 = v8 > v18;
    if (v8 == v18) {
      BOOL v16 = v6 > v17;
    }
LABEL_23:
    if (!v16) {
      return v2;
    }
  }
  return v7;
}

void sub_18E01213C(uint64_t a1, void *a2)
{
  unint64_t v4 = a2[2];
  unint64_t v5 = HIDWORD(v4);
  unint64_t v6 = 0x9DDFEA08EB382D69 * (((8 * v4) + 8) ^ HIDWORD(v4));
  unint64_t v7 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) ^ ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) >> 47));
  a2[1] = v7;
  unint64_t v8 = *(void *)(a1 + 8);
  float v9 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v10 = *(float *)(a1 + 32);
  if (!v8 || (float)(v10 * (float)v8) < v9)
  {
    BOOL v11 = 1;
    if (v8 >= 3) {
      BOOL v11 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v12 = v11 | (2 * v8);
    unint64_t v13 = vcvtps_u32_f32(v9 / v10);
    if (v12 <= v13) {
      int8x8_t prime = (int8x8_t)v13;
    }
    else {
      int8x8_t prime = (int8x8_t)v12;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v8 = *(void *)(a1 + 8);
    }
    if (*(void *)&prime > v8) {
      goto LABEL_92;
    }
    if (*(void *)&prime >= v8) {
      goto LABEL_43;
    }
    unint64_t v21 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v8 < 3 || (uint8x8_t v22 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v22.i16[0] = vaddlv_u8(v22), v22.u32[0] > 1uLL))
    {
      unint64_t v21 = std::__next_prime(v21);
    }
    else
    {
      uint64_t v23 = 1 << -(char)__clz(v21 - 1);
      if (v21 >= 2) {
        unint64_t v21 = v23;
      }
    }
    if (*(void *)&prime <= v21) {
      int8x8_t prime = (int8x8_t)v21;
    }
    if (*(void *)&prime >= v8)
    {
      unint64_t v8 = *(void *)(a1 + 8);
      goto LABEL_43;
    }
    if (prime)
    {
LABEL_92:
      if (*(void *)&prime >> 61) {
        sub_18DEDF7D4();
      }
      unint64_t v15 = operator new(8 * *(void *)&prime);
      BOOL v16 = *(void **)a1;
      *(void *)a1 = v15;
      if (v16) {
        operator delete(v16);
      }
      uint64_t v17 = 0;
      *(int8x8_t *)(a1 + 8) = prime;
      do
        *(void *)(*(void *)a1 + 8 * v17++) = 0;
      while (*(void *)&prime != v17);
      unsigned int v18 = *(void **)(a1 + 16);
      if (v18)
      {
        unint64_t v19 = v18[1];
        uint8x8_t v20 = (uint8x8_t)vcnt_s8(prime);
        v20.i16[0] = vaddlv_u8(v20);
        if (v20.u32[0] > 1uLL)
        {
          if (v19 >= *(void *)&prime) {
            v19 %= *(void *)&prime;
          }
        }
        else
        {
          v19 &= *(void *)&prime - 1;
        }
        *(void *)(*(void *)a1 + 8 * v19) = a1 + 16;
        for (uint64_t i = (void *)*v18; *v18; uint64_t i = (void *)*v18)
        {
          unint64_t v25 = i[1];
          if (v20.u32[0] > 1uLL)
          {
            if (v25 >= *(void *)&prime) {
              v25 %= *(void *)&prime;
            }
          }
          else
          {
            v25 &= *(void *)&prime - 1;
          }
          if (v25 == v19)
          {
            unsigned int v18 = i;
          }
          else
          {
            double v26 = i;
            if (*(void *)(*(void *)a1 + 8 * v25))
            {
              do
              {
                double v27 = v26;
                double v26 = (void *)*v26;
              }
              while (v26 && i[2] == v26[2]);
              *unsigned int v18 = v26;
              *double v27 = **(void **)(*(void *)a1 + 8 * v25);
              **(void **)(*(void *)a1 + 8 * v25) = i;
            }
            else
            {
              *(void *)(*(void *)a1 + 8 * v25) = v18;
              unsigned int v18 = i;
              unint64_t v19 = v25;
            }
          }
        }
      }
      unint64_t v8 = (unint64_t)prime;
    }
    else
    {
      double v39 = *(void **)a1;
      *(void *)a1 = 0;
      if (v39) {
        operator delete(v39);
      }
      unint64_t v8 = 0;
      *(void *)(a1 + 8) = 0;
    }
  }
LABEL_43:
  uint8x8_t v28 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
  v28.i16[0] = vaddlv_u8(v28);
  if (v28.u32[0] > 1uLL)
  {
    unint64_t v29 = v7;
    if (v8 <= v7) {
      unint64_t v29 = v7 % v8;
    }
  }
  else
  {
    unint64_t v29 = (v8 - 1) & v7;
  }
  int v30 = *(void **)(*(void *)a1 + 8 * v29);
  if (v30)
  {
    int v31 = 0;
    do
    {
      double v32 = v30;
      int v30 = (void *)*v30;
      if (!v30) {
        break;
      }
      unint64_t v33 = v30[1];
      if (v28.u32[0] > 1uLL)
      {
        unint64_t v34 = v30[1];
        if (v33 >= v8) {
          unint64_t v34 = v33 % v8;
        }
      }
      else
      {
        unint64_t v34 = v33 & (v8 - 1);
      }
      if (v34 != v29) {
        break;
      }
      BOOL v35 = v33 == v7 && v30[2] == a2[2];
      int v36 = v31 & !v35;
      v31 |= v35;
    }
    while (v36 != 1);
  }
  else
  {
    double v32 = 0;
  }
  unint64_t v37 = a2[1];
  if (v28.u32[0] > 1uLL)
  {
    if (v37 >= v8) {
      v37 %= v8;
    }
  }
  else
  {
    v37 &= v8 - 1;
  }
  if (!v32)
  {
    *a2 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = a2;
    *(void *)(*(void *)a1 + 8 * v37) = a1 + 16;
    if (!*a2) {
      goto LABEL_79;
    }
    unint64_t v38 = *(void *)(*a2 + 8);
    if (v28.u32[0] > 1uLL)
    {
      if (v38 >= v8) {
        v38 %= v8;
      }
    }
    else
    {
      v38 &= v8 - 1;
    }
LABEL_78:
    *(void *)(*(void *)a1 + 8 * v38) = a2;
    goto LABEL_79;
  }
  *a2 = *v32;
  void *v32 = a2;
  if (*a2)
  {
    unint64_t v38 = *(void *)(*a2 + 8);
    if (v28.u32[0] > 1uLL)
    {
      if (v38 >= v8) {
        v38 %= v8;
      }
    }
    else
    {
      v38 &= v8 - 1;
    }
    if (v38 != v37) {
      goto LABEL_78;
    }
  }
LABEL_79:
  ++*(void *)(a1 + 24);
}

uint64_t *sub_18E012598(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    sub_18E011990(v2 + 8);
    JUMPOUT(0x192FA6240);
  }
  return result;
}

void sub_18E0125F8(float *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  unint64_t v9 = *((void *)a1 + 1);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
    BOOL v11 = *(void **)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      for (uint64_t i = (void *)*v11; i; uint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == a2) {
            return;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3) {
            break;
          }
        }
      }
    }
  }
  BOOL v14 = operator new(0x18uLL);
  *BOOL v14 = 0;
  v14[1] = v8;
  double v14[2] = a3;
  float v15 = (float)(unint64_t)(*((void *)a1 + 3) + 1);
  float v16 = a1[8];
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    BOOL v17 = 1;
    if (v9 >= 3) {
      BOOL v17 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v9);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      int8x8_t prime = (int8x8_t)v19;
    }
    else {
      int8x8_t prime = (int8x8_t)v18;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v9 = *((void *)a1 + 1);
    }
    if (*(void *)&prime > v9) {
      goto LABEL_30;
    }
    if (*(void *)&prime < v9)
    {
      unint64_t v27 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v9 < 3 || (uint8x8_t v28 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
      {
        unint64_t v27 = std::__next_prime(v27);
      }
      else
      {
        uint64_t v29 = 1 << -(char)__clz(v27 - 1);
        if (v27 >= 2) {
          unint64_t v27 = v29;
        }
      }
      if (*(void *)&prime <= v27) {
        int8x8_t prime = (int8x8_t)v27;
      }
      if (*(void *)&prime >= v9)
      {
        unint64_t v9 = *((void *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(void *)&prime >> 61) {
            sub_18DEDF7D4();
          }
          unint64_t v21 = operator new(8 * *(void *)&prime);
          uint8x8_t v22 = *(void **)a1;
          *(void *)a1 = v21;
          if (v22) {
            operator delete(v22);
          }
          uint64_t v23 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(void *)(*(void *)a1 + 8 * v23++) = 0;
          while (*(void *)&prime != v23);
          uint64_t v24 = (void *)*((void *)a1 + 2);
          if (v24)
          {
            unint64_t v25 = v24[1];
            uint8x8_t v26 = (uint8x8_t)vcnt_s8(prime);
            v26.i16[0] = vaddlv_u8(v26);
            if (v26.u32[0] > 1uLL)
            {
              if (v25 >= *(void *)&prime) {
                v25 %= *(void *)&prime;
              }
            }
            else
            {
              v25 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)a1 + 8 * v25) = a1 + 4;
            int v30 = (void *)*v24;
            if (*v24)
            {
              do
              {
                unint64_t v31 = v30[1];
                if (v26.u32[0] > 1uLL)
                {
                  if (v31 >= *(void *)&prime) {
                    v31 %= *(void *)&prime;
                  }
                }
                else
                {
                  v31 &= *(void *)&prime - 1;
                }
                if (v31 != v25)
                {
                  if (!*(void *)(*(void *)a1 + 8 * v31))
                  {
                    *(void *)(*(void *)a1 + 8 * v31) = v24;
                    goto LABEL_55;
                  }
                  void *v24 = *v30;
                  *int v30 = **(void **)(*(void *)a1 + 8 * v31);
                  **(void **)(*(void *)a1 + 8 * v31) = v30;
                  int v30 = v24;
                }
                unint64_t v31 = v25;
LABEL_55:
                uint64_t v24 = v30;
                int v30 = (void *)*v30;
                unint64_t v25 = v31;
              }
              while (v30);
            }
          }
          unint64_t v9 = (unint64_t)prime;
          goto LABEL_59;
        }
        BOOL v35 = *(void **)a1;
        *(void *)a1 = 0;
        if (v35) {
          operator delete(v35);
        }
        unint64_t v9 = 0;
        *((void *)a1 + 1) = 0;
      }
    }
LABEL_59:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  double v32 = *(void **)a1;
  unint64_t v33 = *(void **)(*(void *)a1 + 8 * v3);
  if (v33)
  {
    *BOOL v14 = *v33;
LABEL_72:
    void *v33 = v14;
    goto LABEL_73;
  }
  *BOOL v14 = *((void *)a1 + 2);
  *((void *)a1 + 2) = v14;
  v32[v3] = a1 + 4;
  if (*v14)
  {
    unint64_t v34 = *(void *)(*v14 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v34 >= v9) {
        v34 %= v9;
      }
    }
    else
    {
      v34 &= v9 - 1;
    }
    unint64_t v33 = (void *)(*(void *)a1 + 8 * v34);
    goto LABEL_72;
  }
LABEL_73:
  ++*((void *)a1 + 3);
}

void sub_18E0129FC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_18E012A10(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_18E012A10(a1, *a2);
    sub_18E012A10(a1, a2[1]);
    operator delete(a2);
  }
}

void raven::RavenUserSpeedActiveObject::RavenUserSpeedActiveObject(uint64_t a1, unsigned char *a2)
{
  cnframework::ActiveObjectBase::ActiveObjectBase(a1, a2);
  *(void *)uint64_t v2 = &unk_1EDD14B08;
  *(unsigned char *)(v2 + 480) = 0;
  *(void *)(v2 + 488) = 0;
  *(unsigned char *)(v2 + 496) = 0;
  *(unsigned char *)(v2 + 688) = 0;
  *(unsigned char *)(v2 + 696) = 0;
  *(unsigned char *)(v2 + 904) = 0;
  *(unsigned char *)(v2 + 912) = 0;
  *(unsigned char *)(v2 + 1056) = 0;
  *(unsigned char *)(v2 + 1064) = 0;
  *(unsigned char *)(v2 + 1224) = 0;
  *(unsigned char *)(v2 + 1232) = 0;
  *(unsigned char *)(v2 + 1352) = 0;
}

uint64_t raven::RavenUserSpeedActiveObject::Configure(cnframework::ActiveObjectBase *this, uint64_t *a2)
{
  if (*((unsigned char *)this + 480) && cnprint::CNPrinter::GetLogLevel(this) <= 1)
  {
    __int16 v28 = 12;
    unsigned __int8 v27 = 1;
    (*(void (**)(void **__return_ptr, cnframework::ActiveObjectBase *))(*(void *)this + 16))(__p, this);
    if (v26 >= 0) {
      unint64_t v9 = __p;
    }
    else {
      LOBYTE(v9) = __p[0];
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v28, &v27, "Warning: %s configured more than once.", v4, v5, v6, v7, v8, (char)v9);
    if (v26 < 0) {
      operator delete(__p[0]);
    }
  }
  *((unsigned char *)this + 480) = 0;
  uint64_t v10 = *a2;
  if (*a2 && *(unsigned char *)(v10 + 33))
  {
    *((void *)this + 61) = v10;
    cnframework::ActiveObjectBase::SetEventQueueDelay(this, 0.0);
    *((unsigned char *)this + 480) = 1;
    BOOL v11 = (cnprint::CNPrinter *)(*(uint64_t (**)(cnframework::ActiveObjectBase *))(*(void *)this + 48))(this);
    if (cnprint::CNPrinter::GetLogLevel(v11) <= 1)
    {
      __int16 v28 = 12;
      unsigned __int8 v27 = 1;
      (*(void (**)(void **__return_ptr, cnframework::ActiveObjectBase *))(*(void *)this + 16))(__p, this);
      if (v26 >= 0) {
        BOOL v17 = __p;
      }
      else {
        LOBYTE(v17) = __p[0];
      }
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v28, &v27, "%s configured successfully.", v12, v13, v14, v15, v16, (char)v17);
      if (v26 < 0) {
        operator delete(__p[0]);
      }
    }
    return 0;
  }
  else
  {
    __int16 v28 = 12;
    unsigned __int8 v27 = 4;
    (*(void (**)(void **__return_ptr, cnframework::ActiveObjectBase *))(*(void *)this + 16))(__p, this);
    if (v26 >= 0) {
      uint64_t v24 = __p;
    }
    else {
      LOBYTE(v24) = __p[0];
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v28, &v27, "Error: %s could not be configured.", v19, v20, v21, v22, v23, (char)v24);
    if (v26 < 0) {
      operator delete(__p[0]);
    }
    return 0xFFFFFFFFLL;
  }
}

void sub_18E012CE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t raven::RavenUserSpeedActiveObject::IsConfigured(raven::RavenUserSpeedActiveObject *this)
{
  return *((unsigned __int8 *)this + 480);
}

void *raven::RavenUserSpeedActiveObject::GetActiveObjectName@<X0>(void *a1@<X8>)
{
  return sub_18DEDE7B0(a1, "RavenUserSpeedActiveObject");
}

uint64_t raven::RavenUserSpeedActiveObject::HandleEvent(uint64_t result, uint64_t a2)
{
  if (*(unsigned char *)(result + 688))
  {
    long long v2 = *(_OWORD *)(a2 + 8);
    long long v3 = *(_OWORD *)(a2 + 24);
    long long v4 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(result + 552) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(result + 536) = v4;
    *(_OWORD *)(result + 520) = v3;
    *(_OWORD *)(result + 504) = v2;
    long long v5 = *(_OWORD *)(a2 + 72);
    long long v6 = *(_OWORD *)(a2 + 88);
    long long v7 = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(result + 616) = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(result + 600) = v7;
    *(_OWORD *)(result + 584) = v6;
    *(_OWORD *)(result + 568) = v5;
    long long v8 = *(_OWORD *)(a2 + 136);
    long long v9 = *(_OWORD *)(a2 + 152);
    long long v10 = *(_OWORD *)(a2 + 168);
    *(void *)(result + 680) = *(void *)(a2 + 184);
    *(_OWORD *)(result + 664) = v10;
    *(_OWORD *)(result + 648) = v9;
    *(_OWORD *)(result + 632) = v8;
  }
  else
  {
    *(void *)(result + 496) = &unk_1EDD140B8;
    long long v11 = *(_OWORD *)(a2 + 8);
    long long v12 = *(_OWORD *)(a2 + 24);
    long long v13 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(result + 552) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(result + 536) = v13;
    *(_OWORD *)(result + 520) = v12;
    *(_OWORD *)(result + 504) = v11;
    long long v14 = *(_OWORD *)(a2 + 72);
    long long v15 = *(_OWORD *)(a2 + 88);
    long long v16 = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(result + 616) = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(result + 600) = v16;
    *(_OWORD *)(result + 584) = v15;
    *(_OWORD *)(result + 568) = v14;
    long long v17 = *(_OWORD *)(a2 + 136);
    long long v18 = *(_OWORD *)(a2 + 152);
    long long v19 = *(_OWORD *)(a2 + 168);
    *(void *)(result + 680) = *(void *)(a2 + 184);
    *(_OWORD *)(result + 664) = v19;
    *(_OWORD *)(result + 648) = v18;
    *(_OWORD *)(result + 632) = v17;
    *(unsigned char *)(result + 688) = 1;
  }
  if ((*(unsigned char *)(a2 + 104) & 0xFE) != 2)
  {
    if (*(unsigned char *)(result + 1352)) {
      *(unsigned char *)(result + 1352) = 0;
    }
  }
  return result;
}

{
  long long v2;
  long long v3;
  long long v4;
  long long v5;
  long long v6;
  long long v7;
  long long v8;
  long long v9;
  long long v10;
  long long v11;
  long long v12;
  long long v13;

  if (*(unsigned char *)(result + 1056))
  {
    *(_OWORD *)(result + 920) = *(_OWORD *)(a2 + 8);
    long long v2 = *(_OWORD *)(a2 + 24);
    long long v3 = *(_OWORD *)(a2 + 40);
    long long v4 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(result + 984) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(result + 968) = v4;
    *(_OWORD *)(result + 952) = v3;
    *(_OWORD *)(result + 936) = v2;
    long long v5 = *(_OWORD *)(a2 + 88);
    long long v6 = *(_OWORD *)(a2 + 104);
    long long v7 = *(_OWORD *)(a2 + 120);
    *(void *)(result + 1048) = *(void *)(a2 + 136);
    *(_OWORD *)(result + 1032) = v7;
    *(_OWORD *)(result + 1016) = v6;
    *(_OWORD *)(result + 1000) = v5;
  }
  else
  {
    *(void *)(result + 912) = &unk_1EDD13CF0;
    *(_OWORD *)(result + 920) = *(_OWORD *)(a2 + 8);
    long long v8 = *(_OWORD *)(a2 + 24);
    long long v9 = *(_OWORD *)(a2 + 40);
    long long v10 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(result + 984) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(result + 968) = v10;
    *(_OWORD *)(result + 952) = v9;
    *(_OWORD *)(result + 936) = v8;
    long long v11 = *(_OWORD *)(a2 + 88);
    long long v12 = *(_OWORD *)(a2 + 104);
    long long v13 = *(_OWORD *)(a2 + 120);
    *(void *)(result + 1048) = *(void *)(a2 + 136);
    *(_OWORD *)(result + 1032) = v13;
    *(_OWORD *)(result + 1016) = v12;
    *(_OWORD *)(result + 1000) = v11;
    *(unsigned char *)(result + 1056) = 1;
  }
  if (*(unsigned char *)(a2 + 104) != 3)
  {
    if (*(unsigned char *)(result + 1352)) {
      *(unsigned char *)(result + 1352) = 0;
    }
  }
  return result;
}

void raven::RavenUserSpeedActiveObject::HandleEvent(raven::RavenUserSpeedActiveObject *this, const raven::FitnessSessionEvent *a2)
{
  if (*((unsigned char *)this + 904))
  {
    *((_OWORD *)this + 44) = *(_OWORD *)((char *)a2 + 8);
    long long v4 = *(_OWORD *)((char *)a2 + 24);
    long long v5 = *(_OWORD *)((char *)a2 + 40);
    long long v6 = *(_OWORD *)((char *)a2 + 72);
    *((_OWORD *)this + 47) = *(_OWORD *)((char *)a2 + 56);
    *((_OWORD *)this + 48) = v6;
    *((_OWORD *)this + 45) = v4;
    *((_OWORD *)this + 46) = v5;
    long long v7 = *(_OWORD *)((char *)a2 + 88);
    long long v8 = *(_OWORD *)((char *)a2 + 104);
    long long v9 = *(_OWORD *)((char *)a2 + 136);
    *((_OWORD *)this + 51) = *(_OWORD *)((char *)a2 + 120);
    *((_OWORD *)this + 52) = v9;
    *((_OWORD *)this + 49) = v7;
    *((_OWORD *)this + 50) = v8;
    long long v10 = *(_OWORD *)((char *)a2 + 152);
    long long v11 = *(_OWORD *)((char *)a2 + 168);
    long long v12 = *(_OWORD *)((char *)a2 + 184);
    *((void *)this + 112) = *((void *)a2 + 25);
    *((_OWORD *)this + 54) = v11;
    *((_OWORD *)this + 55) = v12;
    *((_OWORD *)this + 53) = v10;
  }
  else
  {
    *((void *)this + 87) = &unk_1EDD141E0;
    *((_OWORD *)this + 44) = *(_OWORD *)((char *)a2 + 8);
    long long v13 = *(_OWORD *)((char *)a2 + 24);
    long long v14 = *(_OWORD *)((char *)a2 + 40);
    long long v15 = *(_OWORD *)((char *)a2 + 72);
    *((_OWORD *)this + 47) = *(_OWORD *)((char *)a2 + 56);
    *((_OWORD *)this + 48) = v15;
    *((_OWORD *)this + 45) = v13;
    *((_OWORD *)this + 46) = v14;
    long long v16 = *(_OWORD *)((char *)a2 + 88);
    long long v17 = *(_OWORD *)((char *)a2 + 104);
    long long v18 = *(_OWORD *)((char *)a2 + 136);
    *((_OWORD *)this + 51) = *(_OWORD *)((char *)a2 + 120);
    *((_OWORD *)this + 52) = v18;
    *((_OWORD *)this + 49) = v16;
    *((_OWORD *)this + 50) = v17;
    long long v19 = *(_OWORD *)((char *)a2 + 152);
    long long v20 = *(_OWORD *)((char *)a2 + 168);
    long long v21 = *(_OWORD *)((char *)a2 + 184);
    *((void *)this + 112) = *((void *)a2 + 25);
    *((_OWORD *)this + 54) = v20;
    *((_OWORD *)this + 55) = v21;
    *((_OWORD *)this + 53) = v19;
    *((unsigned char *)this + 904) = 1;
  }
  unsigned int v22 = *((unsigned __int8 *)a2 + 104);
  if (v22 <= 9 && ((1 << v22) & 0x370) != 0)
  {
    if (!cnprint::CNPrinter::GetLogLevel(this))
    {
      __int16 v32 = 12;
      unsigned __int8 v31 = 0;
      uint64_t v23 = (*(uint64_t (**)(const raven::FitnessSessionEvent *))(*(void *)a2 + 16))(a2);
      double v30 = v24 + (double)v23;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v32, &v31, "t,%.3lf,UserSpeedAO: Received fitness session does not expect steps,disabling user speed events,type,%d", v25, v26, v27, v28, v29, SLOBYTE(v30));
    }
    if (*((unsigned char *)this + 1352)) {
      *((unsigned char *)this + 1352) = 0;
    }
  }
}

void raven::RavenUserSpeedActiveObject::HandleEvent(raven::RavenUserSpeedActiveObject *this, const raven::StepCountEvent *a2)
{
  uint64_t v123 = *MEMORY[0x1E4F143B8];
  if (!*((unsigned char *)this + 1056) || *((unsigned char *)this + 1016) != 3)
  {
    if (!cnprint::CNPrinter::GetLogLevel(this))
    {
      LOWORD(v120[0]) = 12;
      v119[0] = 0;
      uint64_t v12 = (*(uint64_t (**)(const raven::StepCountEvent *))(*(void *)a2 + 16))(a2);
      double v111 = v13 + (double)v12;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v120, v119, "t,%.3lf,UserSpeedAO: Not Moving", v14, v15, v16, v17, v18, SLOBYTE(v111));
    }
    goto LABEL_51;
  }
  if (!*((unsigned char *)this + 688))
  {
    if (!cnprint::CNPrinter::GetLogLevel(this))
    {
      LOWORD(v120[0]) = 12;
      v119[0] = 0;
      uint64_t v19 = (*(uint64_t (**)(const raven::StepCountEvent *))(*(void *)a2 + 16))(a2);
      double v112 = v20 + (double)v19;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v120, v119, "t,%.3lf,UserSpeedAO: Activity state unavailable,Ignoring user speed event", v21, v22, v23, v24, v25, SLOBYTE(v112));
    }
    goto LABEL_51;
  }
  if ((*((unsigned char *)this + 600) & 0xFE) != 2)
  {
    if (!cnprint::CNPrinter::GetLogLevel(this))
    {
      LOWORD(v120[0]) = 12;
      v119[0] = 0;
      uint64_t v26 = (*(uint64_t (**)(const raven::StepCountEvent *))(*(void *)a2 + 16))(a2);
      double v113 = v27 + (double)v26;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v120, v119, "t,%.3lf,UserSpeedAO: Activity,%u,Not Pedestrian,Ignoring user speed event,Steps,%u", v28, v29, v30, v31, v32, SLOBYTE(v113));
    }
    goto LABEL_51;
  }
  if (*((unsigned char *)this + 904))
  {
    unsigned int v4 = *((unsigned __int8 *)this + 800);
    if (v4 <= 9 && ((1 << v4) & 0x370) != 0)
    {
      if (!cnprint::CNPrinter::GetLogLevel(this))
      {
        LOWORD(v120[0]) = 12;
        v119[0] = 0;
        uint64_t v5 = (*(uint64_t (**)(const raven::StepCountEvent *))(*(void *)a2 + 16))(a2);
        double v110 = v6 + (double)v5;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v120, v119, "t,%.3lf,UserSpeedAO: Received step counts when fitness session does not expect steps; ignoring user speed event,type,%d",
          v7,
          v8,
          v9,
          v10,
          v11,
          SLOBYTE(v110));
      }
      goto LABEL_51;
    }
  }
  if ((*((void *)a2 + 14) & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000) {
    double v33 = 0.0;
  }
  else {
    double v33 = *((double *)a2 + 14);
  }
  if (v33 > 11.4822547)
  {
    if (!cnprint::CNPrinter::GetLogLevel(this))
    {
      LOWORD(v120[0]) = 12;
      v119[0] = 0;
      uint64_t v34 = (*(uint64_t (**)(const raven::StepCountEvent *))(*(void *)a2 + 16))(a2);
      double v114 = v35 + (double)v34;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v120, v119, "t,%10.3lf,UserSpeedAO: Rejected %lf > %lf max", v36, v37, v38, v39, v40, SLOBYTE(v114));
    }
    goto LABEL_51;
  }
  if (v33 < 0.1)
  {
    if (!cnprint::CNPrinter::GetLogLevel(this))
    {
      LOWORD(v120[0]) = 12;
      v119[0] = 0;
      uint64_t v41 = (*(uint64_t (**)(const raven::StepCountEvent *))(*(void *)a2 + 16))(a2);
      double v115 = v42 + (double)v41;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v120, v119, "t,%.3lf,UserSpeedAO: Rejected %lf < %lf min", v43, v44, v45, v46, v47, SLOBYTE(v115));
    }
    goto LABEL_51;
  }
  double v48 = *((double *)a2 + 15);
  double v49 = *((double *)a2 + 16);
  if (v33 < v48
    || (*((void *)a2 + 15) & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000
    || (*(void *)&v49 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || v33 > v49)
  {
    if (!cnprint::CNPrinter::GetLogLevel(this))
    {
      LOWORD(v120[0]) = 12;
      v119[0] = 0;
      uint64_t v53 = (*(uint64_t (**)(const raven::StepCountEvent *))(*(void *)a2 + 16))(a2);
      double v116 = v54 + (double)v53;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v120, v119, "t,%.3lf,UserSpeedAO: Rejected %lf < %lf OR > %lf", v55, v56, v57, v58, v59, SLOBYTE(v116));
    }
    goto LABEL_51;
  }
  double v60 = fmax(v33 - v48, 0.1);
  double v61 = fmax(v49 - v33, 0.1);
  if (!*((unsigned char *)this + 1224))
  {
    *((void *)this + 133) = &unk_1EDD139E0;
    long long v96 = *(_OWORD *)((char *)a2 + 8);
    *((_OWORD *)this + 68) = *(_OWORD *)((char *)a2 + 24);
    *((_OWORD *)this + 67) = v96;
    long long v97 = *(_OWORD *)((char *)a2 + 40);
    long long v98 = *(_OWORD *)((char *)a2 + 56);
    long long v99 = *(_OWORD *)((char *)a2 + 72);
    *((_OWORD *)this + 72) = *(_OWORD *)((char *)a2 + 88);
    *((_OWORD *)this + 71) = v99;
    *((_OWORD *)this + 70) = v98;
    *((_OWORD *)this + 69) = v97;
    long long v100 = *(_OWORD *)((char *)a2 + 104);
    long long v101 = *(_OWORD *)((char *)a2 + 120);
    long long v102 = *(_OWORD *)((char *)a2 + 136);
    *((void *)this + 152) = *((void *)a2 + 19);
    *((_OWORD *)this + 75) = v102;
    *((_OWORD *)this + 74) = v101;
    *((_OWORD *)this + 73) = v100;
    *((unsigned char *)this + 1224) = 1;
    goto LABEL_51;
  }
  double v62 = *(double *)(*((void *)this + 61) + 3280);
  v120[0] = &unk_1EDD139E0;
  *(_OWORD *)&v120[13] = *((_OWORD *)this + 73);
  *(_OWORD *)&v120[15] = *((_OWORD *)this + 74);
  long long v121 = *((_OWORD *)this + 75);
  uint64_t v122 = *((void *)this + 152);
  long long v63 = *((_OWORD *)this + 70);
  *(_OWORD *)&v120[5] = *((_OWORD *)this + 69);
  *(_OWORD *)&v120[7] = v63;
  *(_OWORD *)&v120[9] = *((_OWORD *)this + 71);
  *(_OWORD *)&v120[11] = *((_OWORD *)this + 72);
  int8x16_t v64 = *((int8x16_t *)this + 68);
  __int16 v65 = (_OWORD *)((char *)a2 + 8);
  *(_OWORD *)&v120[1] = *((_OWORD *)this + 67);
  *(int8x16_t *)&v120[3] = v64;
  uint64_t v66 = CNTimeSpan::operator-((uint64_t)a2 + 8, &v120[1], v64, *(int8x16_t *)&v120[1]);
  *(void *)char v119 = v66;
  *(double *)&v119[8] = v67;
  if (v66 < 0 || (*(double *)v68.i64 = v67, v67 < 0.0))
  {
    uint64_t v66 = CNTimeSpan::operator-((double *)v119, v68, v69);
    v68.i64[0] = v70;
  }
  unint64_t v71 = (_OWORD *)((char *)this + 1072);
  double v72 = *(double *)v68.i64 + (double)v66;
  if (v72 <= 1.0 || v72 >= 10.0)
  {
    long long v103 = *(_OWORD *)((char *)a2 + 24);
    *unint64_t v71 = *v65;
    *((_OWORD *)this + 68) = v103;
    long long v104 = *(_OWORD *)((char *)a2 + 40);
    long long v105 = *(_OWORD *)((char *)a2 + 56);
    long long v106 = *(_OWORD *)((char *)a2 + 88);
    *((_OWORD *)this + 71) = *(_OWORD *)((char *)a2 + 72);
    *((_OWORD *)this + 72) = v106;
    *((_OWORD *)this + 69) = v104;
    *((_OWORD *)this + 70) = v105;
    long long v107 = *(_OWORD *)((char *)a2 + 104);
    long long v108 = *(_OWORD *)((char *)a2 + 120);
    long long v109 = *(_OWORD *)((char *)a2 + 136);
    *((void *)this + 152) = *((void *)a2 + 19);
    *((_OWORD *)this + 74) = v108;
    *((_OWORD *)this + 75) = v109;
    *((_OWORD *)this + 73) = v107;
LABEL_51:
    if (*((unsigned char *)this + 1352)) {
      *((unsigned char *)this + 1352) = 0;
    }
    return;
  }
  double v73 = (*((double *)a2 + 18) - *((double *)&v121 + 1)) / v72;
  long long v74 = *(_OWORD *)((char *)a2 + 24);
  *unint64_t v71 = *v65;
  *((_OWORD *)this + 68) = v74;
  long long v75 = *(_OWORD *)((char *)a2 + 40);
  long long v76 = *(_OWORD *)((char *)a2 + 56);
  long long v77 = *(_OWORD *)((char *)a2 + 88);
  *((_OWORD *)this + 71) = *(_OWORD *)((char *)a2 + 72);
  *((_OWORD *)this + 72) = v77;
  *((_OWORD *)this + 69) = v75;
  *((_OWORD *)this + 70) = v76;
  long long v78 = *(_OWORD *)((char *)a2 + 104);
  long long v79 = *(_OWORD *)((char *)a2 + 120);
  long long v80 = *(_OWORD *)((char *)a2 + 136);
  *((void *)this + 152) = *((void *)a2 + 19);
  *((_OWORD *)this + 74) = v79;
  *((_OWORD *)this + 75) = v80;
  *((_OWORD *)this + 73) = v78;
  if (v73 <= 0.0) {
    goto LABEL_51;
  }
  int LogLevel = cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v66);
  *(double *)v83.i64 = v61 * (v61 * (v60 / (v60 + v61)));
  double v84 = sqrt(*(double *)v83.i64 + v60 * (v61 / (v60 + v61)) * v60) * v62;
  double v85 = vabdd_f64(v73, v33) / v84;
  if (!LogLevel)
  {
    LOWORD(v120[0]) = 12;
    v119[0] = 0;
    uint64_t v86 = (*(uint64_t (**)(const raven::StepCountEvent *))(*(void *)a2 + 16))(a2);
    double v88 = v87 + (double)v86;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v120, v119, "t,%.3lf,UserSpeedAO: raw_spd,%.2lf,pedSpeedMps,%.2lf,pedSpeedSigmaMps,%.2lf,spd_diff,%.2lf,spd_diff_ratio,%.2lf,foot_step_count_,%u,step_count_event_id_,%d,raw_distance_from_accel,%.2lf,last_activity,%u", v89, v90, v91, v92, v93, SLOBYTE(v88));
  }
  v82.i64[0] = 2.5;
  if (v85 < 2.5)
  {
    memset((char *)v120 + 7, 0, 17);
    memset(&v119[7], 0, 17);
    *(void *)&v118[7] = 0;
    *(void *)&v118[15] = 0;
    v117[0] = 2;
    v117[1] = 0x3FE1EB851EB851ECLL;
    uint64_t v94 = CNTimeSpan::operator+((uint64_t)a2 + 8, v117, v82, v83);
    if (*((unsigned char *)this + 1352))
    {
      *((void *)this + 155) = v94;
      *((void *)this + 156) = v95;
      *((unsigned char *)this + 1256) = 0;
      *(_OWORD *)((char *)this + 1257) = *(_OWORD *)v120;
      *(void *)((char *)this + 1273) = v120[2];
      *(_OWORD *)((char *)this + 1281) = *(_OWORD *)v119;
      *(void *)((char *)this + 1297) = *(void *)&v119[16];
      *((void *)this + 165) = *(void *)&v118[15];
      *(_OWORD *)((char *)this + 1305) = *(_OWORD *)v118;
      *((void *)this + 166) = 0x7FF8000000000000;
      *((double *)this + 167) = v33;
      *((double *)this + 168) = v84;
    }
    else
    {
      *((void *)this + 154) = &unk_1EDD13A40;
      *((void *)this + 155) = v94;
      *((void *)this + 156) = v95;
      *((unsigned char *)this + 1256) = 0;
      *(_OWORD *)((char *)this + 1257) = *(_OWORD *)v120;
      *(void *)((char *)this + 1273) = v120[2];
      *(_OWORD *)((char *)this + 1281) = *(_OWORD *)v119;
      *(void *)((char *)this + 1297) = *(void *)&v119[16];
      *((void *)this + 165) = *(void *)&v118[15];
      *(_OWORD *)((char *)this + 1305) = *(_OWORD *)v118;
      *((void *)this + 166) = 0x7FF8000000000000;
      *((double *)this + 167) = v33;
      *((double *)this + 168) = v84;
      *((unsigned char *)this + 1352) = 1;
    }
  }
}

cnprint::CNPrinter *raven::RavenUserSpeedActiveObject::HandleEvent(raven::RavenUserSpeedActiveObject *this, const raven::TimeMarkEvent *a2)
{
  uint64_t result = (cnprint::CNPrinter *)(*(uint64_t (**)(const raven::TimeMarkEvent *))(*(void *)a2 + 16))(a2);
  *(void *)&long long v30 = result;
  *((void *)&v30 + 1) = v5;
  if (*((unsigned char *)this + 1352))
  {
    uint64_t v22 = (void *)(*(uint64_t (**)(void))(*((void *)this + 154) + 16))();
    *(void *)&long long v23 = v6;
    uint64_t result = (cnprint::CNPrinter *)CNTimeSpan::operator-((uint64_t)&v30, &v22, v7, v8);
    double v10 = v9 + (double)(uint64_t)result;
    if (v10 <= 3.56)
    {
      if (v10 >= 0.0)
      {
        if (*((unsigned char *)this + 1352))
        {
          uint64_t v21 = 0;
          uint64_t v22 = &unk_1EDD13A40;
          long long v26 = *(_OWORD *)((char *)this + 1288);
          long long v27 = *(_OWORD *)((char *)this + 1304);
          long long v28 = *(_OWORD *)((char *)this + 1320);
          long long v29 = *(_OWORD *)((char *)this + 1336);
          memset(&v20[1], 0, 64);
          v20[0] = v30;
          long long v23 = v30;
          long long v24 = 0u;
          long long v27 = 0u;
          long long v26 = 0u;
          long long v25 = 0u;
          *(void *)&long long v28 = 0;
          *((void *)&v28 + 1) = 0x7FF8000000000000;
          if (!cnprint::CNPrinter::GetLogLevel(result))
          {
            LOWORD(v20[0]) = 12;
            unsigned __int8 v19 = 0;
            uint64_t v11 = (*(uint64_t (**)(const raven::TimeMarkEvent *))(*(void *)a2 + 16))(a2);
            double v18 = v12 + (double)v11;
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)v20, &v19, "t,%.3lf,UserSpeedAO: UserSpeedEvent,age,%.2lf", v13, v14, v15, v16, v17, SLOBYTE(v18));
          }
          sub_18E013AB0();
        }
        sub_18DFF28FC();
      }
    }
    else if (*((unsigned char *)this + 1352))
    {
      *((unsigned char *)this + 1352) = 0;
    }
  }
  return result;
}

void sub_18E013AB0()
{
}

void sub_18E013B44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a11) {
    sub_18DEE4E18(a11);
  }
  if (a13) {
    sub_18DEE4E18(a13);
  }
  _Unwind_Resume(exception_object);
}

void raven::RavenUserSpeedActiveObject::Reset(raven::RavenUserSpeedActiveObject *this)
{
  if (*((unsigned char *)this + 688)) {
    *((unsigned char *)this + 688) = 0;
  }
  if (*((unsigned char *)this + 1224)) {
    *((unsigned char *)this + 1224) = 0;
  }
  if (*((unsigned char *)this + 1056)) {
    *((unsigned char *)this + 1056) = 0;
  }
  if (*((unsigned char *)this + 1352)) {
    *((unsigned char *)this + 1352) = 0;
  }
  cnframework::ActiveObjectBase::ResetCurrentTime(this);

  cnframework::ActiveObjectBase::ResetEventQueue(this);
}

void sub_18E013BD4()
{
  v0 = operator new(0x60uLL);
  sub_18E013C30(v0);
}

void sub_18E013C1C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_18E013C30(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1EDD1E458;
  sub_18E013C8C((uint64_t)(a1 + 3));
}

void sub_18E013C78(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_18E013C8C(uint64_t a1)
{
  *(void *)a1 = &unk_1EDD0A260;
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  uint64_t v2 = MEMORY[0x1E4FBA3D8];
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = v2;
  sub_18DEDE7B0((void *)(a1 + 48), "");
  *(unsigned char *)(a1 + 8) = 1;
  sub_18E013E24();
}

void sub_18E013DCC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 71) < 0) {
    operator delete(*v3);
  }
  if (*v2) {
    (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_18E013E24()
{
}

void sub_18E013F04()
{
}

void *sub_18E013F18()
{
}

void sub_18E013F24()
{
}

void raven::RavenSolutionActiveObject::WriteRavenSolutionToProtobuf(cnlogging::ProtobufOutputStream **this, const raven::RavenSolutionEvent *a2)
{
  if (*((unsigned char *)this[74] + 3693) && this[1382])
  {
    CoreNavigation::CLP::LogEntry::LogEntry::LogEntry((CoreNavigation::CLP::LogEntry::LogEntry *)v11);
    v14 |= 1u;
    uint64_t v5 = v12;
    if (!v12) {
      operator new();
    }
    int v6 = *(_DWORD *)(v12 + 44);
    *(double *)(v12 + 8) = *((double *)a2 + 5) + (double)*((uint64_t *)a2 + 4);
    double v7 = *((double *)a2 + 2) + (double)*((uint64_t *)a2 + 1);
    *(_DWORD *)(v5 + 44) = v6 | 5;
    *(double *)(v5 + 24) = v7;
    v14 |= 2u;
    uint64_t v8 = v13;
    if (!v13) {
      operator new();
    }
    *(_DWORD *)(v13 + 320) |= 2u;
    uint64_t v9 = *(void *)(v8 + 272);
    if (!v9) {
      operator new();
    }
    double v10 = *(const raven::RavenSolutionEvent **)(v9 + 8);
    *(_DWORD *)(v9 + 28) |= 1u;
    if (!v10) {
      operator new();
    }
    raven::ConvertRavenSolutionEventToProtobuf(a2, v10, v4);
    cnlogging::ProtobufOutputStream::append(this[1382], (const wireless_diagnostics::google::protobuf::MessageLite *)v11);
    cnlogging::ProtobufOutputStream::flush(this[1382]);
    CoreNavigation::CLP::LogEntry::LogEntry::~LogEntry((CoreNavigation::CLP::LogEntry::LogEntry *)v11);
  }
}

void sub_18E014228(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  CoreNavigation::CLP::LogEntry::LogEntry::~LogEntry((CoreNavigation::CLP::LogEntry::LogEntry *)va);
  _Unwind_Resume(a1);
}

void raven::RavenSolutionActiveObject::WriteReceiverDifferentialCodeBiasesToProtobuf(cnlogging::ProtobufOutputStream **this, const raven::ReceiverDifferentialCodeBiasesEvent *a2)
{
  if (*((unsigned char *)this[74] + 3693) && this[1382])
  {
    CoreNavigation::CLP::LogEntry::LogEntry::LogEntry((CoreNavigation::CLP::LogEntry::LogEntry *)v8);
    v10 |= 2u;
    uint64_t v5 = v9;
    if (!v9) {
      operator new();
    }
    *(_DWORD *)(v9 + 320) |= 2u;
    uint64_t v6 = *(void *)(v5 + 272);
    if (!v6) {
      operator new();
    }
    double v7 = *(const raven::ReceiverDifferentialCodeBiasesEvent **)(v6 + 8);
    *(_DWORD *)(v6 + 28) |= 1u;
    if (!v7) {
      operator new();
    }
    raven::ConvertReceiverDifferentialCodeBiasesEventToProtobuf(a2, v7, v4);
    cnlogging::ProtobufOutputStream::append(this[1382], (const wireless_diagnostics::google::protobuf::MessageLite *)v8);
    cnlogging::ProtobufOutputStream::flush(this[1382]);
    CoreNavigation::CLP::LogEntry::LogEntry::~LogEntry((CoreNavigation::CLP::LogEntry::LogEntry *)v8);
  }
}

void sub_18E014420(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  CoreNavigation::CLP::LogEntry::LogEntry::~LogEntry((CoreNavigation::CLP::LogEntry::LogEntry *)va);
  _Unwind_Resume(a1);
}

void raven::RavenSolutionActiveObject::WriteThinShellIonosphereParametersToProtobuf(raven::RavenSolutionActiveObject *this, const raven::ThinShellIonosphereParametersEvent *a2)
{
  if (*(unsigned char *)(*((void *)this + 74) + 3693) && *((void *)this + 1382))
  {
    CoreNavigation::CLP::LogEntry::LogEntry::LogEntry((CoreNavigation::CLP::LogEntry::LogEntry *)v17);
    v19 |= 2u;
    uint64_t v4 = v18;
    if (!v18) {
      operator new();
    }
    *(_DWORD *)(v18 + 320) |= 2u;
    uint64_t v5 = *(void *)(v4 + 272);
    if (!v5) {
      operator new();
    }
    uint64_t v6 = *(void *)(v5 + 8);
    *(_DWORD *)(v5 + 28) |= 1u;
    if (!v6) {
      operator new();
    }
    long long v7 = *((_OWORD *)this + 34);
    long long v13 = *((_OWORD *)this + 33);
    long long v14 = v7;
    long long v8 = *((_OWORD *)this + 36);
    long long v15 = *((_OWORD *)this + 35);
    long long v16 = v8;
    long long v9 = *((_OWORD *)this + 32);
    long long v11 = *((_OWORD *)this + 31);
    int v10 = &unk_1EDD13820;
    long long v12 = v9;
    raven::ConvertThinShellIonosphereParametersEventToProtobuf((uint64_t)a2, v6, (uint64_t)&v10);
    cnlogging::ProtobufOutputStream::append(*((cnlogging::ProtobufOutputStream **)this + 1382), (const wireless_diagnostics::google::protobuf::MessageLite *)v17);
    cnlogging::ProtobufOutputStream::flush(*((cnlogging::ProtobufOutputStream **)this + 1382));
    CoreNavigation::CLP::LogEntry::LogEntry::~LogEntry((CoreNavigation::CLP::LogEntry::LogEntry *)v17);
  }
}

void sub_18E014660(_Unwind_Exception *a1)
{
  CoreNavigation::CLP::LogEntry::LogEntry::~LogEntry((CoreNavigation::CLP::LogEntry::LogEntry *)(v1 - 88));
  _Unwind_Resume(a1);
}

uint64_t raven::RavenSolutionActiveObject::Configure(void ***a1, uint64_t *a2)
{
  if (*((unsigned char *)a1 + 480))
  {
    LOWORD(v38[0]) = 12;
    LOBYTE(v39) = 2;
    ((void (*)(void **__return_ptr, void ***))(*a1)[2])(__p, a1);
    if (v41 >= 0) {
      long long v9 = __p;
    }
    else {
      LOBYTE(v9) = __p[0];
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v38, (unsigned __int8 *)&v39, "Warning: %s configured more than once.", v4, v5, v6, v7, v8, (char)v9);
    if (SHIBYTE(v41) < 0) {
      operator delete(__p[0]);
    }
  }
  *((unsigned char *)a1 + 480) = 0;
  if (a1[1382]) {
    sub_18E014AC8(a1 + 1382, 0);
  }
  uint64_t v10 = *a2;
  if (!*a2 || !*(unsigned char *)(v10 + 33))
  {
    LOWORD(v38[0]) = 12;
    LOBYTE(v39) = 4;
    ((void (*)(void **__return_ptr, void ***))(*a1)[2])(__p, a1);
    if (v41 >= 0) {
      uint64_t v17 = __p;
    }
    else {
      LOBYTE(v17) = __p[0];
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v38, (unsigned __int8 *)&v39, "Error: %s could not be configured. Failed to create or initialize RavenParameters.", v12, v13, v14, v15, v16, (char)v17);
    if (SHIBYTE(v41) < 0) {
      operator delete(__p[0]);
    }
    return 0xFFFFFFFFLL;
  }
  a1[74] = (void **)v10;
  if (*(unsigned char *)(v10 + 3693))
  {
    if (*(char *)(v10 + 3719) < 0)
    {
      sub_18DEDE668(__p, *(void **)(v10 + 3696), *(void *)(v10 + 3704));
    }
    else
    {
      uint64_t v11 = v10 + 3696;
      *(_OWORD *)std::string __p = *(_OWORD *)v11;
      uint64_t v41 = *(void *)(v11 + 16);
    }
    v38[0] = 0;
    operator new();
  }
  std::mutex::lock((std::mutex *)(a1 + 1391));
  if (raven::RavenPredictor::Configure((uint64_t)(a1 + 380), a2 + 1, v18, v19, v20, v21, v22, v23))
  {
    LOWORD(v38[0]) = 12;
    LOBYTE(v39) = 4;
    ((void (*)(void **__return_ptr, void ***))(*a1)[2])(__p, a1);
    if (v41 >= 0) {
      long long v29 = __p;
    }
    else {
      LOBYTE(v29) = __p[0];
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v38, (unsigned __int8 *)&v39, "Error: %s could not be configured. Failed to configure RavenPredictor.", v24, v25, v26, v27, v28, (char)v29);
    if (SHIBYTE(v41) < 0) {
      operator delete(__p[0]);
    }
    std::mutex::unlock((std::mutex *)(a1 + 1391));
    return 0xFFFFFFFFLL;
  }
  std::mutex::unlock((std::mutex *)(a1 + 1391));
  cnframework::ActiveObjectBase::SetEventQueueDelay((cnframework::ActiveObjectBase *)a1, 0.0);
  *((unsigned char *)a1 + 480) = 1;
  if (cnprint::CNPrinter::GetLogLevel(v31) <= 1)
  {
    LOWORD(v38[0]) = 12;
    LOBYTE(v39) = 1;
    ((void (*)(void **__return_ptr, void ***))(*a1)[2])(__p, a1);
    if (v41 >= 0) {
      uint64_t v37 = __p;
    }
    else {
      LOBYTE(v37) = __p[0];
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v38, (unsigned __int8 *)&v39, "%s configured successfully.", v32, v33, v34, v35, v36, (char)v37);
    if (SHIBYTE(v41) < 0) {
      operator delete(__p[0]);
    }
  }
  return 0;
}

void sub_18E014A30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t raven::RavenSolutionActiveObject::IsConfigured(raven::RavenSolutionActiveObject *this)
{
  return *((unsigned __int8 *)this + 480);
}

void **sub_18E014AC8(void ***a1, void **a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    cnlogging::ProtobufOutputStream::~ProtobufOutputStream(result);
    JUMPOUT(0x192FA6240);
  }
  return result;
}

uint64_t raven::RavenSolutionActiveObject::GetRavenSolution(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (std::mutex *)(a1 + 11128);
  std::mutex::lock((std::mutex *)(a1 + 11128));
  memcpy((void *)(a2 + 8), (const void *)(a1 + 616), 0x971uLL);
  std::mutex::unlock(v4);
  return 0;
}

uint64_t raven::RavenSolutionActiveObject::GetRavenSolution(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v4 = *(double *)(a2 + 8) + (double)*(uint64_t *)a2;
  double v5 = fabs(v4);
  if ((unint64_t)(*(void *)&v5 - 0x10000000000000) >> 53 < 0x3FF
    || (unint64_t)(*(void *)&v5 - 1) < 0xFFFFFFFFFFFFFLL
    || *(void *)&v4 == 0)
  {
    uint64_t v10 = (std::mutex *)(a1 + 11128);
    std::mutex::lock((std::mutex *)(a1 + 11128));
    if (raven::RavenPredictor::Predict(a1 + 3040, a2, a3, v11, v12, v13, v14, v15, v16, v17))
    {
      memcpy((void *)(a3 + 8), (const void *)(a1 + 616), 0x971uLL);
      uint64_t v18 = 0xFFFFFFFFLL;
    }
    else
    {
      raven::RavenSolutionActiveObject::WriteRavenSolutionToProtobuf((cnlogging::ProtobufOutputStream **)a1, (const raven::RavenSolutionEvent *)a3);
      uint64_t v18 = 0;
    }
    std::mutex::unlock(v10);
  }
  else
  {
    sub_18DFF4C24(a3);
    return 0xFFFFFFFFLL;
  }
  return v18;
}

void sub_18E014C40(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void *raven::RavenSolutionActiveObject::GetActiveObjectName@<X0>(void *a1@<X8>)
{
  return sub_18DEDE7B0(a1, "RavenSolutionActiveObject");
}

void raven::RavenSolutionActiveObject::HandleEvent(raven::RavenSolutionActiveObject *this, const raven::RavenSolutionEvent *a2)
{
  raven::RavenSolutionActiveObject::WriteRavenSolutionToProtobuf((cnlogging::ProtobufOutputStream **)this, a2);
  if (*((unsigned char *)a2 + 208) == 4)
  {
    sub_18DFF49CC((uint64_t)v12);
    long long v17 = 0u;
    long long v16 = 0u;
    long long v15 = 0u;
    long long v14 = 0u;
    long long v13 = 0u;
    uint64_t v18 = 0;
    uint64_t v19 = 0x7FF8000000000000;
    char v20 = 0;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    uint64_t v26 = 0;
    uint64_t v27 = 0x7FF8000000000000;
    __int16 v28 = 0;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    uint64_t v41 = 0;
    __int16 v32 = 0;
    long long v31 = 0u;
    long long v30 = 0u;
    long long v29 = 0u;
    *(void *)&v33[796] = 0x7FF8000000000000;
    uint64_t v34 = 0x7FF8000000000000;
    uint64_t v35 = 0;
    uint64_t v36 = 0x7FF8000000000000;
    bzero(v33, 0x318uLL);
    uint64_t v47 = 0;
    long long v46 = 0u;
    long long v45 = 0u;
    long long v44 = 0u;
    long long v43 = 0u;
    long long v42 = 0u;
    uint64_t v48 = 0x7FF8000000000000;
    uint64_t v49 = 0;
    uint64_t v50 = 0x7FF8000000000000;
    int64x2_t v51 = vdupq_n_s64(0x7FF8000000000000uLL);
    int64x2_t v52 = v51;
    int64x2_t v53 = v51;
    int64x2_t v54 = v51;
    uint64_t v55 = 0;
    uint64_t v56 = 0x7FF8000000000000;
    int64x2_t v57 = v51;
    int64x2_t v58 = v51;
    int64x2_t v59 = v51;
    int64x2_t v60 = v51;
    int64x2_t v61 = v51;
    int64x2_t v62 = v51;
    uint64_t v63 = 0x7FF8000000000000;
    uint64_t v64 = 0;
    int64x2_t v65 = v51;
    int64x2_t v66 = v51;
    int64x2_t v67 = v51;
    int64x2_t v68 = v51;
    uint64_t v69 = 0x7FF8000000000000;
    uint64_t v70 = 0;
    int64x2_t v71 = v51;
    int64x2_t v72 = v51;
    int64x2_t v73 = v51;
    int64x2_t v74 = v51;
    uint64_t v75 = 0x7FF8000000000000;
    uint64_t v76 = 0;
    int64x2_t v77 = v51;
    int64x2_t v78 = v51;
    int64x2_t v79 = v51;
    int64x2_t v80 = v51;
    int64x2_t v81 = v51;
    int64x2_t v82 = v51;
    int64x2_t v83 = v51;
    uint64_t v84 = 0;
    uint64_t v85 = 0x7FF8000000000000;
    int64x2_t v86 = v51;
    int64x2_t v87 = v51;
    int64x2_t v88 = v51;
    int64x2_t v89 = v51;
    uint64_t v90 = 0;
    uint64_t v91 = 0x7FF8000000000000;
    int64x2_t v92 = v51;
    int64x2_t v93 = v51;
    int64x2_t v94 = v51;
    int64x2_t v95 = v51;
    uint64_t v96 = 0;
    uint64_t v97 = 0x7FF8000000000000;
    int64x2_t v98 = v51;
    int64x2_t v99 = v51;
    int64x2_t v100 = v51;
    int64x2_t v101 = v51;
    uint64_t v102 = 0;
    uint64_t v103 = 0x7FF8000000000000;
    int64x2_t v104 = v51;
    int64x2_t v105 = v51;
    uint64_t v111 = 0;
    long long v110 = 0u;
    long long v109 = 0u;
    long long v108 = 0u;
    long long v107 = 0u;
    long long v106 = 0u;
    uint64_t v112 = 0x7FF8000000000000;
    uint64_t v113 = 0;
    uint64_t v114 = 0x3FF0000000000000;
    long long v115 = 0u;
    long long v116 = 0u;
    long long v117 = 0u;
    long long v118 = 0u;
    long long v119 = 0u;
    long long v120 = 0u;
    long long v121 = 0u;
    long long v122 = 0u;
    long long v123 = 0u;
    long long v124 = 0u;
    uint64_t v125 = 0;
    uint64_t v126 = 0x7FF8000000000000;
    uint64_t v127 = 0;
    uint64_t v128 = 0x3FF0000000000000;
    long long v129 = 0u;
    long long v130 = 0u;
    uint64_t v131 = 0x3FF0000000000000;
    long long v132 = 0u;
    long long v133 = 0u;
    uint64_t v134 = 0x3FE0000000000000;
    uint64_t v135 = 0x3FE0000000000000;
    char v136 = 0;
    if (*(unsigned char *)(*((void *)this + 74) + 3720))
    {
      v11[0] = cnframework::ActiveObjectBase::GetCurrentTime(this);
      v11[1] = v4;
      raven::RavenSolutionActiveObject::GetRavenSolution((uint64_t)this, (uint64_t)v11, (uint64_t)v12);
    }
    std::mutex::lock((std::mutex *)((char *)this + 11128));
    if (*((unsigned char *)a2 + 209) == 2)
    {
      if (!*((unsigned char *)this + 600) || sub_18DEE4D28((double *)a2 + 146, (double *)this + 222)) {
        memcpy((char *)this + 616, (char *)a2 + 8, 0x971uLL);
      }
      *((unsigned char *)this + 600) = 1;
    }
    raven::RavenPredictor::HandleEvent((raven::RavenSolutionActiveObject *)((char *)this + 3040), a2, v5, v6, v7, v8, v9, v10);
    std::mutex::unlock((std::mutex *)((char *)this + 11128));
  }
}

void sub_18E014F4C(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t raven::RavenSolutionActiveObject::HandleEvent(uint64_t result, uint64_t a2)
{
  if (!*(_DWORD *)(a2 + 104)) {
    return (*(uint64_t (**)(void))(*(void *)result + 48))();
  }
  return result;
}

__n128 raven::RavenSolutionActiveObject::HandleEvent(raven::RavenSolutionActiveObject *this, const raven::TimeMarkEvent *a2)
{
  uint64_t v4 = (std::mutex *)((char *)this + 11128);
  std::mutex::lock((std::mutex *)((char *)this + 11128));
  if (raven::RavenPredictor::HandleEvent((raven::RavenSolutionActiveObject *)((char *)this + 3040), a2, v5, v6, v7, v8, v9, v10))
  {
    __int16 v29 = 12;
    unsigned __int8 v28 = 2;
    (*(void (**)(void **__return_ptr, raven::RavenSolutionActiveObject *))(*(void *)this + 16))(v26, this);
    int v11 = v27;
    char v12 = (char)v26[0];
    (*(void (**)(void **__return_ptr, const raven::TimeMarkEvent *))(*(void *)a2 + 24))(&__p, a2);
    uint64_t v18 = v26;
    if (v11 < 0) {
      LOBYTE(v18) = v12;
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v29, &v28, "Warning: %s failed to handle event of type %s.", v13, v14, v15, v16, v17, (char)v18);
    if (v25 < 0) {
      operator delete(__p);
    }
    if (v27 < 0) {
      operator delete(v26[0]);
    }
  }
  long long v19 = *(_OWORD *)((char *)a2 + 24);
  *((_OWORD *)this + 31) = *(_OWORD *)((char *)a2 + 8);
  *((_OWORD *)this + 32) = v19;
  long long v20 = *(_OWORD *)((char *)a2 + 40);
  long long v21 = *(_OWORD *)((char *)a2 + 56);
  long long v22 = *(_OWORD *)((char *)a2 + 88);
  *((_OWORD *)this + 35) = *(_OWORD *)((char *)a2 + 72);
  *((_OWORD *)this + 36) = v22;
  *((_OWORD *)this + 33) = v20;
  *((_OWORD *)this + 34) = v21;
  std::mutex::unlock(v4);
  return result;
}

void sub_18E0150E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  std::mutex::unlock(v23);
  _Unwind_Resume(a1);
}

void raven::RavenSolutionActiveObject::Reset(raven::RavenSolutionActiveObject *this)
{
  if (*((unsigned char *)this + 480))
  {
    std::mutex::lock((std::mutex *)((char *)this + 11128));
    *((unsigned char *)this + 600) = 0;
    sub_18DFF4C24((uint64_t)this + 608);
    *((unsigned char *)this + 3041) = 0;
    std::mutex::unlock((std::mutex *)((char *)this + 11128));
  }
  *(void *)&long long v2 = 0;
  *((void *)&v2 + 1) = 0x7FF8000000000000;
  *((_OWORD *)this + 31) = 0uLL;
  *((_OWORD *)this + 32) = 0uLL;
  *((_OWORD *)this + 35) = 0uLL;
  *((_OWORD *)this + 36) = v2;
  *((_OWORD *)this + 33) = 0uLL;
  *((_OWORD *)this + 34) = 0uLL;
  cnframework::ActiveObjectBase::ResetCurrentTime(this);
  cnframework::ActiveObjectBase::ResetEventQueue(this);
}

void sub_18E015200(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_18E015214(uint64_t a1)
{
  *(void *)a1 = &unk_1EDD149F8;
  std::mutex::~mutex((std::mutex *)(a1 + 11128));
  CoreNavigation::CLP::LogEntry::Raven::RavenOutput::~RavenOutput((CoreNavigation::CLP::LogEntry::Raven::RavenOutput *)(a1 + 11064));
  sub_18E014AC8((void ***)(a1 + 11056), 0);
  *(void *)(a1 + 5792) = &unk_1EDD0B168;
  *(void *)(a1 + 8360) = &unk_1EDD0A858;
  *(void *)(a1 + 5784) = &unk_1EDD0A858;
  *(void *)(a1 + 3056) = &unk_1EDD0B168;
  *(void *)(a1 + 5624) = &unk_1EDD0A858;

  cnframework::ActiveObjectBase::~ActiveObjectBase((cnframework::ActiveObjectBase *)a1);
}

void sub_18E01533C(uint64_t a1)
{
  *(void *)a1 = &unk_1EDD149F8;
  std::mutex::~mutex((std::mutex *)(a1 + 11128));
  CoreNavigation::CLP::LogEntry::Raven::RavenOutput::~RavenOutput((CoreNavigation::CLP::LogEntry::Raven::RavenOutput *)(a1 + 11064));
  sub_18E014AC8((void ***)(a1 + 11056), 0);
  *(void *)(a1 + 5792) = &unk_1EDD0B168;
  *(void *)(a1 + 8360) = &unk_1EDD0A858;
  *(void *)(a1 + 5784) = &unk_1EDD0A858;
  *(void *)(a1 + 3056) = &unk_1EDD0B168;
  *(void *)(a1 + 5624) = &unk_1EDD0A858;
  cnframework::ActiveObjectBase::~ActiveObjectBase((cnframework::ActiveObjectBase *)a1);

  JUMPOUT(0x192FA6240);
}

void *sub_18E015478(void *result)
{
  *__n128 result = &unk_1EDD0B168;
  result[321] = &unk_1EDD0A858;
  return result;
}

void sub_18E0154B8(void *a1)
{
  *a1 = &unk_1EDD0B168;
  a1[321] = &unk_1EDD0A858;
  JUMPOUT(0x192FA6240);
}

uint64_t raven::PopulateAllTimeFields(uint64_t a1, uint64_t a2, int8x16_t a3, int8x16_t a4)
{
  uint64_t result = CNTimeSpan::operator-(a1, (void *)a2, a3, a4);
  v13[0] = result;
  v13[1] = v9;
  if (*(unsigned char *)(a2 + 16))
  {
    uint64_t result = CNTimeSpan::operator+(a2 + 24, v13, v7, v8);
    *(void *)(a1 + 24) = result;
    *(void *)(a1 + 32) = v10;
    *(unsigned char *)(a1 + 16) = 1;
  }
  if (*(unsigned char *)(a2 + 64))
  {
    uint64_t result = CNTimeSpan::operator+(a2 + 72, v13, v7, v8);
    *(void *)(a1 + 72) = result;
    *(void *)(a1 + 80) = v11;
    *(unsigned char *)(a1 + 64) = 1;
  }
  if (*(unsigned char *)(a2 + 40))
  {
    uint64_t result = CNTimeSpan::operator+(a2 + 48, v13, v7, v8);
    *(void *)(a1 + 48) = result;
    *(void *)(a1 + 56) = v12;
    *(unsigned char *)(a1 + 40) = 1;
  }
  return result;
}

void raven::PopulateAllTimeFields(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, int8x16_t a5, int8x16_t a6)
{
  v26[0] = CNTimeSpan::operator-(a1, (void *)a2, a5, a6);
  v26[1] = v10;
  if (*(unsigned char *)(a2 + 16))
  {
    *(void *)(a1 + 24) = CNTimeSpan::operator+(a2 + 24, v26, v11, v12);
    *(void *)(a1 + 32) = v13;
    *(unsigned char *)(a1 + 16) = 1;
  }
  if (*(unsigned char *)(a2 + 40))
  {
    *(void *)(a1 + 48) = CNTimeSpan::operator+(a2 + 48, v26, v11, v12);
    *(void *)(a1 + 56) = v14;
    *(unsigned char *)(a1 + 40) = 1;
    v21.i64[0] = *a4;
    if ((*a4 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || *(double *)v21.i64 <= 0.0)
    {
      __int16 v25 = 12;
      unsigned __int8 v24 = 4;
      double v23 = *(double *)(a1 + 8) + (double)*(uint64_t *)a1;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v25, &v24, "t,%.3lf,invalid clock uncertainty,%.3lf", v15, v16, v17, v18, v19, SLOBYTE(v23));
    }
    else
    {
      *(void *)(a1 + 72) = CNTimeSpan::operator-(a1 + 48, a3, v21, v20);
      *(void *)(a1 + 80) = v22;
      *(unsigned char *)(a1 + 64) = 1;
      *(void *)(a1 + 88) = *a4;
    }
  }
}

uint64_t raven::GnssSvDatabase::GnssSvDatabase(uint64_t this, const raven::RavenParameters *a2)
{
  *(void *)(this + 8) = 0;
  *(void *)(this + 32) = 0;
  *(void *)this = this + 8;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = this + 32;
  *(void *)(this + 56) = 0;
  *(void *)(this + 64) = 0;
  *(void *)(this + 40) = 0;
  *(void *)(this + 48) = this + 56;
  *(_WORD *)(this + 72) = 0;
  *(unsigned char *)(this + 80) = 0;
  *(unsigned char *)(this + 112) = 0;
  *(unsigned char *)(this + 120) = 0;
  *(unsigned char *)(this + 144) = 0;
  *(unsigned char *)(this + 152) = 0;
  *(unsigned char *)(this + 168) = 0;
  *(unsigned char *)(this + 176) = 0;
  *(unsigned char *)(this + 192) = 0;
  *(unsigned char *)(this + 200) = 0;
  *(unsigned char *)(this + 224) = 0;
  *(unsigned char *)(this + 232) = 0;
  *(unsigned char *)(this + 256) = 0;
  *(unsigned char *)(this + 264) = 0;
  *(unsigned char *)(this + 288) = 0;
  if (a2)
  {
    *(unsigned char *)(this + 72) = *((unsigned char *)a2 + 588);
    *(unsigned char *)(this + 73) = *((unsigned char *)a2 + 597);
  }
  return this;
}

uint64_t raven::GnssSvDatabase::Configure(uint64_t this, const raven::RavenParameters *a2)
{
  if (a2)
  {
    *(unsigned char *)(this + 72) = *((unsigned char *)a2 + 588);
    *(unsigned char *)(this + 73) = *((unsigned char *)a2 + 597);
  }
  return this;
}

BOOL raven::GnssSvDatabase::IsRelevantToMultiFreqMerging(unsigned char *a1)
{
  return *(_DWORD *)a1 == 8 && raven::GnssSvDatabase::AggregateHealthL5(a1) != 0;
}

uint64_t raven::GnssSvDatabase::AggregateHealthL5(unsigned char *a1)
{
  uint64_t v1 = 0;
  v3[0] = a1[221];
  v3[1] = a1[213];
  v3[2] = a1[215];
  v3[3] = a1[217];
  v3[4] = a1[219];
  while (1)
  {
    uint64_t result = v3[v1];
    if ((result - 1) < 2) {
      break;
    }
    if (++v1 == 5) {
      return 0;
    }
  }
  return result;
}

uint64_t raven::GnssSvDatabase::MergeMultiFreqInfoSplitBetweenTwoIndications@<X0>(unsigned char *a1@<X0>, unsigned char *a2@<X1>, void *a3@<X8>)
{
  int v6 = raven::GnssSvDatabase::AggregateHealthL1(a1);
  int v7 = raven::GnssSvDatabase::AggregateHealthL5(a1);
  int v8 = raven::GnssSvDatabase::AggregateHealthL1(a2);
  uint64_t result = raven::GnssSvDatabase::AggregateHealthL5(a2);
  if (v6 && !v7 && !v8 && result || !v6 && v7 && v8 && !result) {
    operator new();
  }
  *a3 = 0;
  return result;
}

void sub_18E015B68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  sub_18E01B834(v22);
  _Unwind_Resume(a1);
}

uint64_t raven::GnssSvDatabase::AggregateHealthL1(unsigned char *a1)
{
  uint64_t v1 = 0;
  v3[0] = a1[220];
  v3[1] = a1[212];
  v3[2] = a1[214];
  v3[3] = a1[216];
  v3[4] = a1[218];
  while (1)
  {
    uint64_t result = v3[v1];
    if ((result - 1) < 2) {
      break;
    }
    if (++v1 == 5) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_18E015C3C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  sub_18DF06614((uint64_t)&v23);
  uint64_t v4 = 0;
  int v5 = *(_DWORD *)a1;
  __p[1] = 0;
  uint64_t v22 = 0;
  __p[0] = 0;
  if (v5 > 15)
  {
    switch(v5)
    {
      case 16:
        uint64_t v4 = 3;
        HIBYTE(v22) = 3;
        __int16 v7 = 23121;
LABEL_13:
        LOWORD(__p[0]) = v7;
        char v6 = 83;
        break;
      case 32:
        uint64_t v4 = 3;
        HIBYTE(v22) = 3;
        LOWORD(__p[0]) = 21825;
        char v6 = 71;
        break;
      case 64:
        uint64_t v4 = 3;
        HIBYTE(v22) = 3;
        LOWORD(__p[0]) = 22094;
        char v6 = 67;
        break;
      default:
        goto LABEL_16;
    }
LABEL_15:
    BYTE2(__p[0]) = v6;
  }
  else
  {
    switch(v5)
    {
      case 0:
        uint64_t v4 = 3;
        HIBYTE(v22) = 3;
        LOWORD(__p[0]) = 20053;
        char v6 = 75;
        goto LABEL_15;
      case 1:
        uint64_t v4 = 3;
        HIBYTE(v22) = 3;
        __int16 v7 = 20551;
        goto LABEL_13;
      case 2:
        uint64_t v4 = 3;
        HIBYTE(v22) = 3;
        LOWORD(__p[0]) = 19527;
        char v6 = 79;
        goto LABEL_15;
      case 4:
        uint64_t v4 = 3;
        HIBYTE(v22) = 3;
        __int16 v7 = 17474;
        goto LABEL_13;
      case 8:
        uint64_t v4 = 3;
        HIBYTE(v22) = 3;
        LOWORD(__p[0]) = 16711;
        char v6 = 76;
        goto LABEL_15;
      default:
        break;
    }
  }
LABEL_16:
  sub_18DEDD538(&v23, (uint64_t)__p, v4);
  if (SHIBYTE(v22) < 0) {
    operator delete(__p[0]);
  }
  int v8 = *(_DWORD *)a1;
  if (*(int *)a1 > 15)
  {
    if (v8 != 16)
    {
      if (v8 == 32)
      {
        uint64_t v16 = sub_18DEDD538(&v23, (uint64_t)"[", 1);
        *(void *)((char *)v16 + *(void *)(*v16 - 24) + 24) = 6;
        uint64_t v17 = (void *)std::ostream::operator<<();
        sub_18DEDD538(v17, (uint64_t)"]", 1);
      }
      else if (v8 != 64)
      {
        goto LABEL_32;
      }
    }
LABEL_30:
    uint64_t v18 = sub_18DEDD538(&v23, (uint64_t)"[", 1);
    *(void *)((char *)v18 + *(void *)(*v18 - 24) + 24) = 6;
    uint64_t v19 = (void *)std::ostream::operator<<();
    sub_18DEDD538(v19, (uint64_t)"]", 1);
    goto LABEL_32;
  }
  switch(v8)
  {
    case 0:
      uint64_t v9 = sub_18DEDD538(&v23, (uint64_t)"[", 1);
      *(void *)((char *)v9 + *(void *)(*v9 - 24) + 24) = 6;
      uint64_t v10 = sub_18DEDD538(v9, (uint64_t)" ", 1);
      sub_18DEDD538(v10, (uint64_t)"]", 1);
      break;
    case 1:
    case 4:
    case 8:
      goto LABEL_30;
    case 2:
      int8x16_t v11 = sub_18DEDD538(&v23, (uint64_t)"[", 1);
      uint64_t v12 = *v11;
      *(_DWORD *)((char *)v11 + *(void *)(*v11 - 24) + 8) |= 0x800u;
      *(uint64_t *)((char *)v11 + *(void *)(v12 - 24) + 24) = 2;
      uint64_t v13 = (void *)std::ostream::operator<<();
      *(_DWORD *)((char *)v13 + *(void *)(*v13 - 24) + 8) &= ~0x800u;
      unsigned int v14 = *(unsigned __int8 *)(a1 + 4) - 1;
      *(void *)((char *)&v24[2] + *(void *)(v23 - 24)) = 4;
      if (v14 > 0x17) {
        uint64_t v15 = sub_18DEDD538(&v23, (uint64_t)" ", 1);
      }
      else {
        uint64_t v15 = (void *)std::ostream::operator<<();
      }
      sub_18DEDD538(v15, (uint64_t)"]", 1);
      break;
    default:
      break;
  }
LABEL_32:
  sub_18DEDD9B8((uint64_t)v24, a2);
  uint64_t v23 = *MEMORY[0x1E4FBA418];
  *(void *)((char *)&v24[-1] + *(void *)(v23 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v24[0] = MEMORY[0x1E4FBA470] + 16;
  if (v25 < 0) {
    operator delete((void *)v24[8]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x192FA6190](&v26);
}

void sub_18E016224(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

uint64_t raven::GnssSvDatabase::UpdateSvInfo(uint64_t a1, uint64_t *a2, unsigned char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *a3 = 0;
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  if (*a2 == v10) {
    goto LABEL_128;
  }
  uint64_t v11 = a1 + 8;
  uint64_t v132 = a1 + 48;
  long long v133 = (void *)(a1 + 56);
  uint64_t v134 = (uint64_t **)(a1 + 24);
  uint64_t v12 = (uint64_t **)(a1 + 32);
  do
  {
    sub_18DEDE7B0(v142, "");
    unsigned __int8 v144 = 0;
    int v145 = -1;
    if ((sub_18E016D4C((int *)v9, (uint64_t)v142) & 1) == 0)
    {
      LOWORD(__p[0]) = 12;
      LOBYTE(v139) = 4;
      sub_18E015C3C(v9, v140);
      int64x2_t v65 = v140;
      if (v141 < 0) {
        LOBYTE(v65) = v140[0];
      }
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, (unsigned __int8 *)&v139, "#svdb,Could not form id,SV,%s", v60, v61, v62, v63, v64, (char)v65);
      goto LABEL_55;
    }
    if (*(_DWORD *)v9 != 2) {
      goto LABEL_43;
    }
    uint64_t v13 = sub_18E01B8A0(a1, (uint64_t)v142);
    uint64_t v14 = v13;
    if (v11 == v13) {
      goto LABEL_32;
    }
    if (*(unsigned __int8 *)(v13 + 69) == *(unsigned __int8 *)(v9 + 5)) {
      goto LABEL_31;
    }
    __int16 v139 = 12;
    unsigned __int8 v138 = 2;
    sub_18E015C3C(v9, v140);
    int v15 = SHIBYTE(v141);
    char v16 = (char)v140[0];
    sub_18E015C3C(v14 + 64, __p);
    uint64_t v22 = v140;
    if (v15 < 0) {
      LOBYTE(v22) = v16;
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v139, &v138, "#svdb,changing fcn,new,%s,old,%s,", v17, v18, v19, v20, v21, (char)v22);
    if (v137 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v141) < 0) {
      operator delete(v140[0]);
    }
    int v28 = *(char *)(v14 + 69);
    __int16 v29 = *v12;
    if (!*v12) {
      goto LABEL_20;
    }
    long long v30 = (uint64_t *)(a1 + 32);
    while (1)
    {
      int v31 = *((_DWORD *)v29 + 7);
      if (v31 <= v28) {
        break;
      }
      long long v30 = v29;
LABEL_19:
      __int16 v29 = (uint64_t *)*v29;
      if (!v29) {
        goto LABEL_20;
      }
    }
    if (v31 < v28)
    {
      ++v29;
      goto LABEL_19;
    }
    uint64_t v112 = *v29;
    uint64_t v113 = v29;
    if (*v29)
    {
      uint64_t v113 = v29;
      do
      {
        int v114 = *(_DWORD *)(v112 + 28);
        BOOL v115 = v114 < v28;
        if (v114 >= v28) {
          long long v116 = (uint64_t *)v112;
        }
        else {
          long long v116 = (uint64_t *)(v112 + 8);
        }
        if (!v115) {
          uint64_t v113 = (uint64_t *)v112;
        }
        uint64_t v112 = *v116;
      }
      while (*v116);
    }
    uint64_t v117 = v29[1];
    if (v117)
    {
      do
      {
        int v118 = *(_DWORD *)(v117 + 28);
        BOOL v119 = v118 <= v28;
        if (v118 <= v28) {
          long long v120 = (uint64_t *)(v117 + 8);
        }
        else {
          long long v120 = (uint64_t *)v117;
        }
        if (!v119) {
          long long v30 = (uint64_t *)v117;
        }
        uint64_t v117 = *v120;
      }
      while (*v120);
    }
    if (v113 != v30)
    {
      while (*((_DWORD *)v113 + 8) != *(unsigned __int8 *)(v14 + 68))
      {
        long long v121 = (uint64_t *)v113[1];
        if (v121)
        {
          do
          {
            long long v122 = v121;
            long long v121 = (uint64_t *)*v121;
          }
          while (v121);
        }
        else
        {
          do
          {
            long long v122 = (uint64_t *)v113[2];
            BOOL v68 = *v122 == (void)v113;
            uint64_t v113 = v122;
          }
          while (!v68);
        }
        uint64_t v113 = v122;
        if (v122 == v30) {
          goto LABEL_20;
        }
      }
      LOWORD(v140[0]) = 12;
      LOBYTE(__p[0]) = 2;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v140, (unsigned __int8 *)__p, "#svdb,removing frequency-to-slot mapping,freq,%i,slot,%i", v23, v24, v25, v26, v27, *((_DWORD *)v113 + 7));
      sub_18E01B928(v134, v113);
      operator delete(v113);
    }
LABEL_20:
    uint64_t v32 = *v133;
    if (*v133)
    {
      uint64_t v33 = v133;
      do
      {
        int v34 = *(_DWORD *)(v32 + 28);
        BOOL v35 = v34 < v28;
        if (v34 >= v28) {
          uint64_t v36 = (uint64_t *)v32;
        }
        else {
          uint64_t v36 = (uint64_t *)(v32 + 8);
        }
        if (!v35) {
          uint64_t v33 = (void *)v32;
        }
        uint64_t v32 = *v36;
      }
      while (*v36);
      if (v33 != v133)
      {
        int v37 = *((_DWORD *)v33 + 7);
        if (v37 <= v28)
        {
          LOWORD(v140[0]) = 12;
          LOBYTE(__p[0]) = 2;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)v140, (unsigned __int8 *)__p, "#svdb,removing active frequency-to-slot mapping,freq,%i,slot,%i", v23, v24, v25, v26, v27, v37);
          sub_18E01BD00(v132, v28);
        }
      }
    }
LABEL_31:
    if (*(unsigned __int8 *)(v14 + 69) != *(unsigned __int8 *)(v9 + 5))
    {
LABEL_32:
      LOWORD(__p[0]) = 12;
      LOBYTE(v139) = 2;
      sub_18E015C3C(v9, v140);
      long long v43 = v140;
      if (v141 < 0) {
        LOBYTE(v43) = v140[0];
      }
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, (unsigned __int8 *)&v139, "#svdb,New SV added to frequency-to-slot mapping,%s", v38, v39, v40, v41, v42, (char)v43);
      if (SHIBYTE(v141) < 0) {
        operator delete(v140[0]);
      }
      int v44 = *(char *)(v9 + 5);
      int v45 = *(unsigned __int8 *)(v9 + 4);
      long long v46 = (uint64_t *)operator new(0x28uLL);
      *((_DWORD *)v46 + 7) = v44;
      *((_DWORD *)v46 + 8) = v45;
      uint64_t v47 = (uint64_t **)(a1 + 32);
      uint64_t v48 = (uint64_t **)(a1 + 32);
      uint64_t v49 = *v12;
      if (*v12)
      {
        do
        {
          while (1)
          {
            uint64_t v47 = (uint64_t **)v49;
            if (*((_DWORD *)v49 + 7) <= v44) {
              break;
            }
            uint64_t v49 = (uint64_t *)*v49;
            uint64_t v48 = v47;
            if (!*v47) {
              goto LABEL_42;
            }
          }
          uint64_t v49 = (uint64_t *)v49[1];
        }
        while (v49);
        uint64_t v48 = v47 + 1;
      }
LABEL_42:
      sub_18E01BD84(v134, (uint64_t)v47, v48, v46);
      *a3 = 1;
    }
LABEL_43:
    uint64_t v50 = sub_18E01B8A0(a1, (uint64_t)v142);
    uint64_t v51 = v50;
    if (v11 == v50) {
      goto LABEL_69;
    }
    double v52 = *(double *)(v9 + 8);
    double v53 = v52 - *(double *)(v50 + 72);
    if (v53 < -6.0e10)
    {
      LOWORD(__p[0]) = 12;
      LOBYTE(v139) = 4;
      sub_18E015C3C(v9, v140);
      double v131 = v52 * 0.000000001;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, (unsigned __int8 *)&v139, "#svdb,Incoming t0,%.3f,is less than stored by threshold %.3f,Stored,%.3f,SV,%s", v54, v55, v56, v57, v58, SLOBYTE(v131));
      if (SHIBYTE(v141) < 0) {
        operator delete(v140[0]);
      }
    }
    if (!*(unsigned char *)(a1 + 72)) {
      goto LABEL_69;
    }
    if (*(_DWORD *)(v51 + 64) != 8 || !raven::GnssSvDatabase::AggregateHealthL5((unsigned char *)(v51 + 64)))
    {
      if (*(_DWORD *)v9 != 8) {
        goto LABEL_69;
      }
      int v67 = raven::GnssSvDatabase::AggregateHealthL5((unsigned char *)v9);
      BOOL v68 = fabs(v53) >= 1000000.0 || v67 == 0;
      if (v68) {
        goto LABEL_69;
      }
      int v59 = 1;
LABEL_64:
      uint64_t v69 = (cnprint::CNPrinter *)raven::GnssSvDatabase::MergeMultiFreqInfoSplitBetweenTwoIndications((unsigned char *)(v51 + 64), (unsigned char *)v9, v140);
      uint64_t v70 = (uint64_t *)v140[0];
      if (v140[0])
      {
        int64x2_t v71 = sub_18E01BDDC((uint64_t **)a1, v144, v145, (uint64_t)v142);
        long long v72 = *(_OWORD *)v70;
        *((unsigned char *)v71 + 80) = *((unsigned char *)v70 + 16);
        *((_OWORD *)v71 + 4) = v72;
        sub_18E01AB18((char **)v71 + 11, (const void **)v70 + 3);
        long long v73 = *(_OWORD *)(v70 + 7);
        long long v74 = *(_OWORD *)(v70 + 9);
        long long v75 = *(_OWORD *)(v70 + 11);
        *(_OWORD *)(v71 + 21) = *(_OWORD *)(v70 + 13);
        *(_OWORD *)(v71 + 19) = v75;
        *(_OWORD *)(v71 + 17) = v74;
        *(_OWORD *)(v71 + 15) = v73;
        long long v76 = *(_OWORD *)(v70 + 15);
        long long v77 = *(_OWORD *)(v70 + 17);
        long long v78 = *(_OWORD *)(v70 + 19);
        *((unsigned char *)v71 + 232) = *((unsigned char *)v70 + 168);
        *(_OWORD *)(v71 + 27) = v78;
        *(_OWORD *)(v71 + 25) = v77;
        *(_OWORD *)(v71 + 23) = v76;
        long long v79 = *((_OWORD *)v70 + 11);
        long long v80 = *((_OWORD *)v70 + 12);
        *(_OWORD *)((char *)v71 + 270) = *(_OWORD *)((char *)v70 + 206);
        *((_OWORD *)v71 + 15) = v79;
        *((_OWORD *)v71 + 16) = v80;
        if (v71 + 8 != v70) {
          sub_18E01AD7C((char *)v71 + 288, (char *)v70[28], v70[29], 0xCCCCCCCCCCCCCCCDLL * ((v70[29] - v70[28]) >> 3));
        }
        *((_DWORD *)v71 + 78) = *((_DWORD *)v70 + 62);
        sub_18E01B834((uint64_t)v70);
        goto LABEL_95;
      }
      if (v59) {
        goto LABEL_69;
      }
      if (cnprint::CNPrinter::GetLogLevel(v69) > 1) {
        goto LABEL_95;
      }
      LOWORD(__p[0]) = 12;
      LOBYTE(v139) = 1;
      sub_18E015C3C(v9, v140);
      uint64_t v128 = v140;
      if (v141 < 0) {
        LOBYTE(v128) = v140[0];
      }
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, (unsigned __int8 *)&v139, "#svdb,MergeSplitInfo,Ignored incoming ephemeris which could not be merged,SV,%s,t0,%.3f", v123, v124, v125, v126, v127, (char)v128);
LABEL_55:
      if ((SHIBYTE(v141) & 0x80000000) == 0) {
        goto LABEL_95;
      }
      int64x2_t v66 = v140[0];
      goto LABEL_57;
    }
    if (fabs(v53) < 1000000.0)
    {
      int v59 = 0;
      goto LABEL_64;
    }
LABEL_69:
    uint64_t v81 = *(void *)(v9 + 224);
    if (v81 == *(void *)(v9 + 232)
      || !*(unsigned char *)v81
      || (*(void *)(v81 + 8) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    {
      if (v11 == v51) {
        goto LABEL_92;
      }
    }
    else
    {
      BOOL v82 = (*(void *)(v81 + 16) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
      if (v11 == v51 || v82)
      {
LABEL_92:
        uint64_t v102 = sub_18E01BDDC((uint64_t **)a1, v144, v145, (uint64_t)v142);
        long long v103 = *(_OWORD *)v9;
        *((unsigned char *)v102 + 80) = *(unsigned char *)(v9 + 16);
        *((_OWORD *)v102 + 4) = v103;
        sub_18E01AB18((char **)v102 + 11, (const void **)(v9 + 24));
        long long v104 = *(_OWORD *)(v9 + 56);
        long long v105 = *(_OWORD *)(v9 + 72);
        long long v106 = *(_OWORD *)(v9 + 88);
        *(_OWORD *)(v102 + 21) = *(_OWORD *)(v9 + 104);
        *(_OWORD *)(v102 + 19) = v106;
        *(_OWORD *)(v102 + 17) = v105;
        *(_OWORD *)(v102 + 15) = v104;
        long long v107 = *(_OWORD *)(v9 + 120);
        long long v108 = *(_OWORD *)(v9 + 136);
        long long v109 = *(_OWORD *)(v9 + 152);
        *((unsigned char *)v102 + 232) = *(unsigned char *)(v9 + 168);
        *(_OWORD *)(v102 + 27) = v109;
        *(_OWORD *)(v102 + 25) = v108;
        *(_OWORD *)(v102 + 23) = v107;
        long long v110 = *(_OWORD *)(v9 + 176);
        long long v111 = *(_OWORD *)(v9 + 192);
        *(_OWORD *)((char *)v102 + 270) = *(_OWORD *)(v9 + 206);
        *((_OWORD *)v102 + 15) = v110;
        *((_OWORD *)v102 + 16) = v111;
        if (v102 + 8 != (uint64_t *)v9) {
          sub_18E01AD7C((char *)v102 + 288, *(char **)(v9 + 224), *(void *)(v9 + 232), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v9 + 232) - *(void *)(v9 + 224)) >> 3));
        }
        *((_DWORD *)v102 + 78) = *(_DWORD *)(v9 + 248);
        goto LABEL_95;
      }
    }
    int64x2_t v83 = *(void **)(v51 + 288);
    uint64_t v84 = *(void *)(v51 + 296);
    if (v83 == (void *)v84
      || !*(unsigned char *)v83
      || (v83[1] & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || (v83[2] & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || *(int *)(v51 + 312) > 179)
    {
      goto LABEL_92;
    }
    v140[0] = 0;
    v140[1] = 0;
    uint64_t v141 = 0;
    sub_18E01AF5C(v140, v83, v84, 0xCCCCCCCCCCCCCCCDLL * ((v84 - (uint64_t)v83) >> 3));
    int v85 = *(_DWORD *)(v51 + 312);
    char v86 = *(unsigned char *)(v9 + 16);
    *(_OWORD *)(v51 + 64) = *(_OWORD *)v9;
    *(unsigned char *)(v51 + 80) = v86;
    sub_18E01AB18((char **)(v51 + 88), (const void **)(v9 + 24));
    long long v87 = *(_OWORD *)(v9 + 56);
    long long v88 = *(_OWORD *)(v9 + 72);
    long long v89 = *(_OWORD *)(v9 + 88);
    *(_OWORD *)(v51 + 168) = *(_OWORD *)(v9 + 104);
    *(_OWORD *)(v51 + 152) = v89;
    *(_OWORD *)(v51 + 136) = v88;
    *(_OWORD *)(v51 + 120) = v87;
    long long v90 = *(_OWORD *)(v9 + 120);
    long long v91 = *(_OWORD *)(v9 + 136);
    long long v92 = *(_OWORD *)(v9 + 152);
    *(unsigned char *)(v51 + 232) = *(unsigned char *)(v9 + 168);
    *(_OWORD *)(v51 + 216) = v92;
    *(_OWORD *)(v51 + 200) = v91;
    *(_OWORD *)(v51 + 184) = v90;
    long long v93 = *(_OWORD *)(v9 + 176);
    long long v94 = *(_OWORD *)(v9 + 192);
    *(_OWORD *)(v51 + 270) = *(_OWORD *)(v9 + 206);
    *(_OWORD *)(v51 + 240) = v93;
    *(_OWORD *)(v51 + 256) = v94;
    if (v51 + 64 != v9) {
      sub_18E01AD7C((char *)(v51 + 288), *(char **)(v9 + 224), *(void *)(v9 + 232), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v9 + 232) - *(void *)(v9 + 224)) >> 3));
    }
    *(_DWORD *)(v51 + 312) = *(_DWORD *)(v9 + 248);
    int64x2_t v95 = *(void **)(v51 + 288);
    if (v95)
    {
      *(void *)(v51 + 296) = v95;
      operator delete(v95);
      *(void *)(v51 + 288) = 0;
      *(void *)(v51 + 296) = 0;
      *(void *)(v51 + 304) = 0;
    }
    *(_OWORD *)(v51 + 288) = *(_OWORD *)v140;
    *(void *)(v51 + 304) = v141;
    v140[1] = 0;
    uint64_t v141 = 0;
    v140[0] = 0;
    *(_DWORD *)(v51 + 312) = v85 + 1;
    if (!cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v95))
    {
      __int16 v139 = 12;
      unsigned __int8 v138 = 0;
      sub_18E015C3C(v9, __p);
      int64x2_t v101 = __p;
      if (v137 < 0) {
        LOBYTE(v101) = __p[0];
      }
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v139, &v138, "#svdb,Filled SvBandCorr gap,SV,%s,age,%d", v96, v97, v98, v99, v100, (char)v101);
      if (v137 < 0) {
        operator delete(__p[0]);
      }
    }
    int64x2_t v66 = v140[0];
    if (v140[0])
    {
      v140[1] = v140[0];
LABEL_57:
      operator delete(v66);
    }
LABEL_95:
    if (v143 < 0) {
      operator delete(v142[0]);
    }
    v9 += 256;
  }
  while (v9 != v10);
LABEL_128:
  if (!*(void *)(a1 + 16))
  {
    LOWORD(v142[0]) = 12;
    LOBYTE(v140[0]) = 3;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v142, (unsigned __int8 *)v140, "#svdb,No SV data is currently available", a4, a5, a6, a7, a8, v130);
  }
  return 1;
}

void sub_18E016C78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a24) {
    operator delete(a24);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_18E016D4C(int *a1, uint64_t a2)
{
  int v2 = *a1;
  switch(*a1)
  {
    case 1:
      uint64_t v3 = 1;
      *(unsigned char *)(a2 + 24) = 1;
      *(_DWORD *)(a2 + 28) = 0;
      *(_DWORD *)(a2 + 28) = *((unsigned __int8 *)a1 + 4);
      return v3;
    case 2:
      uint64_t v3 = 0;
      *(unsigned char *)(a2 + 24) = 2;
      *(_DWORD *)(a2 + 28) = 0;
      int v5 = *((unsigned __int8 *)a1 + 4);
      if ((v5 - 1) <= 0x17)
      {
        *(_DWORD *)(a2 + 28) = v5;
        return 1;
      }
      return v3;
    case 3:
    case 5:
    case 6:
    case 7:
      goto LABEL_6;
    case 4:
      char v4 = 4;
      goto LABEL_12;
    case 8:
      char v4 = 3;
      goto LABEL_12;
    default:
      if (v2 == 16)
      {
        char v4 = 5;
      }
      else
      {
        if (v2 != 64)
        {
LABEL_6:
          uint64_t v3 = 0;
          *(unsigned char *)(a2 + 24) = 0;
          *(_DWORD *)(a2 + 28) = 0;
          return v3;
        }
        char v4 = 6;
      }
LABEL_12:
      *(unsigned char *)(a2 + 24) = v4;
      *(_DWORD *)(a2 + 28) = 0;
      *(_DWORD *)(a2 + 28) = *((unsigned __int8 *)a1 + 4);
      return 1;
  }
}

uint64_t raven::GnssSvDatabase::UpdateTimeConversionInfo(uint64_t a1, uint64_t *a2)
{
  if (!sub_18E0172D8(a2)) {
    goto LABEL_26;
  }
  uint64_t v4 = *a2;
  if (sub_18E01B110(*a2) && *(__int16 *)(v4 + 8) != -32768)
  {
    int v5 = *(unsigned __int8 *)(v4 + 10);
    if (*(void *)(v4 + 16))
    {
      if ((v5 != 2) == (*(__int16 *)(v4 + 24) != -32768)) {
        goto LABEL_15;
      }
    }
    else if (v5 == 2)
    {
      goto LABEL_15;
    }
    uint64_t v6 = *a2;
    if (*(__int16 *)(*a2 + 8) != -32768)
    {
      int v7 = *(unsigned __int8 *)(v6 + 10);
      if (*(void *)(v6 + 16))
      {
        if ((v7 != 2) == (*(__int16 *)(v6 + 24) != -32768)) {
          goto LABEL_15;
        }
LABEL_13:
        int v8 = *(unsigned __int8 *)(a1 + 144);
        uint64_t v9 = *(void *)(*a2 + 24);
        *(_OWORD *)(a1 + 120) = *(_OWORD *)(*a2 + 8);
        *(void *)(a1 + 136) = v9;
        if (!v8) {
          *(unsigned char *)(a1 + 144) = 1;
        }
        goto LABEL_15;
      }
      if (v7 != 2) {
        goto LABEL_13;
      }
    }
  }
LABEL_15:
  uint64_t v10 = (void *)*a2;
  if (sub_18E01B110(*a2))
  {
    if (v10[4])
    {
      if ((v10[5] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
        && (v10[6] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
        && (v10[7] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
      {
        uint64_t v11 = (void *)*a2;
        if (*(void *)(*a2 + 32))
        {
          if ((v11[5] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
            && (v11[6] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
            && (v11[7] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
          {
            int v12 = *(unsigned __int8 *)(a1 + 112);
            long long v13 = *(_OWORD *)(*a2 + 48);
            *(_OWORD *)(a1 + 80) = *(_OWORD *)(*a2 + 32);
            *(_OWORD *)(a1 + 96) = v13;
            if (!v12) {
              *(unsigned char *)(a1 + 112) = 1;
            }
          }
        }
      }
    }
  }
LABEL_26:
  if (!sub_18E017328(a2)) {
    goto LABEL_37;
  }
  uint64_t v14 = a2[1];
  if (*(_WORD *)v14 && *(unsigned __int16 *)(v14 + 2) < 0x5B5u)
  {
    if (!*(void *)(v14 + 8)) {
      goto LABEL_37;
    }
    uint64_t v15 = *(void *)(v14 + 16);
    if ((v15 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
      goto LABEL_37;
    }
  }
  else
  {
    if (!*(void *)(v14 + 8)) {
      goto LABEL_37;
    }
    uint64_t v15 = *(void *)(v14 + 16);
    if ((v15 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000) {
      goto LABEL_37;
    }
  }
  if ((v15 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    int v16 = *(unsigned __int8 *)(a1 + 168);
    *(_OWORD *)(a1 + 152) = *(_OWORD *)(v14 + 8);
    if (!v16) {
      *(unsigned char *)(a1 + 168) = 1;
    }
  }
LABEL_37:
  if (!sub_18E017398(a2)) {
    goto LABEL_48;
  }
  uint64_t v17 = a2[3];
  uint64_t v18 = v17 + 8;
  uint64_t v19 = *(void *)(v17 + 8);
  if (*(_WORD *)v17)
  {
    if (!v19) {
      goto LABEL_48;
    }
    uint64_t v20 = *(void *)(v17 + 16);
  }
  else
  {
    if (!v19) {
      goto LABEL_48;
    }
    uint64_t v20 = *(void *)(v17 + 16);
    if ((v20 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || (*(void *)(v17 + 24) & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
      goto LABEL_48;
    }
  }
  if ((v20 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (*(void *)(v17 + 24) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    int v21 = *(unsigned __int8 *)(a1 + 224);
    uint64_t v22 = *(void *)(v18 + 16);
    *(_OWORD *)(a1 + 200) = *(_OWORD *)v18;
    *(void *)(a1 + 216) = v22;
    if (!v21) {
      *(unsigned char *)(a1 + 224) = 1;
    }
  }
LABEL_48:
  if (!sub_18E017410(a2)) {
    goto LABEL_59;
  }
  uint64_t v23 = a2[2];
  uint64_t v24 = v23 + 8;
  uint64_t v25 = *(void *)(v23 + 8);
  if (*(_WORD *)v23)
  {
    if (!v25) {
      goto LABEL_59;
    }
    uint64_t v26 = *(void *)(v23 + 16);
  }
  else
  {
    if (!v25) {
      goto LABEL_59;
    }
    uint64_t v26 = *(void *)(v23 + 16);
    if ((v26 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || (*(void *)(v23 + 24) & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
      goto LABEL_59;
    }
  }
  if ((v26 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (*(void *)(v23 + 24) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    int v27 = *(unsigned __int8 *)(a1 + 256);
    uint64_t v28 = *(void *)(v24 + 16);
    *(_OWORD *)(a1 + 232) = *(_OWORD *)v24;
    *(void *)(a1 + 248) = v28;
    if (!v27) {
      *(unsigned char *)(a1 + 256) = 1;
    }
  }
LABEL_59:
  if (!sub_18E017488(a2)) {
    goto LABEL_70;
  }
  uint64_t v34 = a2[4];
  uint64_t v35 = *(void *)(v34 + 8);
  if (*(_WORD *)v34)
  {
    if (!v35) {
      goto LABEL_70;
    }
    uint64_t v36 = *(void *)(v34 + 16);
  }
  else
  {
    if (!v35) {
      goto LABEL_70;
    }
    uint64_t v36 = *(void *)(v34 + 16);
    if ((v36 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || (*(void *)(v34 + 24) & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
      goto LABEL_70;
    }
  }
  if ((v36 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (*(void *)(v34 + 24) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    int v37 = *(unsigned __int8 *)(a1 + 288);
    uint64_t v38 = *(void *)(v34 + 24);
    *(_OWORD *)(a1 + 264) = *(_OWORD *)(v34 + 8);
    *(void *)(a1 + 280) = v38;
    if (!v37) {
      *(unsigned char *)(a1 + 288) = 1;
    }
  }
LABEL_70:
  if (!*(unsigned char *)(a1 + 144))
  {
    __int16 v46 = 12;
    unsigned __int8 v45 = 3;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v46, &v45, "#svdb,No GPS leap second information present", v29, v30, v31, v32, v33, v40);
  }
  if (!*(unsigned char *)(a1 + 112))
  {
    __int16 v44 = 12;
    unsigned __int8 v43 = 3;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v44, &v43, "#svdb,No GPS to UTC conversion information present", v29, v30, v31, v32, v33, v40);
  }
  if (!*(unsigned char *)(a1 + 168)) {
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v42, &v41, "#svdb,No GLONASS to GPS time conversion information present", v29, v30, v31, v32, v33, v40);
  }
  return 1;
}

BOOL sub_18E0172D8(uint64_t *a1)
{
  if (!sub_18E01AFD8(a1)) {
    return 0;
  }
  uint64_t v2 = *a1;
  if (!*a1) {
    return 0;
  }

  return sub_18E01B110(v2);
}

BOOL sub_18E017328(uint64_t *a1)
{
  BOOL result = sub_18E01AFD8(a1);
  if (result)
  {
    uint64_t v3 = a1[1];
    if (!v3) {
      return 0;
    }
    if (*(_WORD *)v3 && *(unsigned __int16 *)(v3 + 2) < 0x5B5u) {
      return 1;
    }
    return *(void *)(v3 + 8) && (*(void *)(v3 + 16) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
  }
  return result;
}

BOOL sub_18E017398(uint64_t *a1)
{
  BOOL result = sub_18E01AFD8(a1);
  if (result)
  {
    uint64_t v3 = a1[3];
    if (!v3) {
      return 0;
    }
    if (*(_WORD *)v3) {
      return 1;
    }
    return *(void *)(v3 + 8)
        && (*(void *)(v3 + 16) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
        && (*(void *)(v3 + 24) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
  }
  return result;
}

BOOL sub_18E017410(uint64_t *a1)
{
  BOOL result = sub_18E01AFD8(a1);
  if (result)
  {
    uint64_t v3 = a1[2];
    if (!v3) {
      return 0;
    }
    if (*(_WORD *)v3) {
      return 1;
    }
    return *(void *)(v3 + 8)
        && (*(void *)(v3 + 16) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
        && (*(void *)(v3 + 24) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
  }
  return result;
}

BOOL sub_18E017488(uint64_t *a1)
{
  BOOL result = sub_18E01AFD8(a1);
  if (result)
  {
    uint64_t v3 = a1[4];
    if (!v3) {
      return 0;
    }
    if (*(_WORD *)v3) {
      return 1;
    }
    return *(void *)(v3 + 8)
        && (*(void *)(v3 + 16) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
        && (*(void *)(v3 + 24) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
  }
  return result;
}

uint64_t raven::GnssSvDatabase::RecomputeActiveGlonassSlots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v126[3] = *(double *)MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)(a2 + 280))
  {
    v123[0] = 12;
    LOBYTE(v111) = 3;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v123, (unsigned __int8 *)&v111, "#svdb,RecomputeActiveGlonassSlots,No valid position available", a4, a5, a6, a7, a8, v103);
    return 0;
  }
  double v8 = *(double *)(a2 + 232) + *(double *)(a2 + 256);
  if (v8 > 2500000000.0)
  {
    v123[0] = 12;
    LOBYTE(v111) = 3;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v123, (unsigned __int8 *)&v111, "#svdb,RecomputeActiveGlonassSlots,Position uncertainty is too large,var,%.3lf", a4, a5, a6, a7, a8, SLOBYTE(v8));
    return 0;
  }
  long long v124 = *(_OWORD *)(a2 + 288);
  uint64_t v125 = *(void *)(a2 + 304);
  int v12 = (void *)(a1 + 56);
  long long v107 = (uint64_t **)(a1 + 56);
  long long v105 = (uint64_t **)(a1 + 48);
  sub_18E012A10(a1 + 48, *(void **)(a1 + 56));
  *(v12 - 1) = v12;
  void *v12 = 0;
  v12[1] = 0;
  int LogLevel = (cnprint::CNPrinter *)cnprint::CNPrinter::GetLogLevel(v13);
  if (LogLevel <= 1)
  {
    v123[0] = 12;
    LOBYTE(v111) = 1;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v123, (unsigned __int8 *)&v111, "#svdb,Clearing active freq-to-slot", v15, v16, v17, v18, v19, v103);
  }
  uint64_t v20 = *(void **)(a1 + 24);
  unsigned int v106 = 1;
  long long v109 = (void *)(a1 + 32);
  if (v20 != (void *)(a1 + 32))
  {
    char v21 = 0;
    uint64_t v22 = 0;
    int v23 = -8;
    while (1)
    {
      uint64_t v24 = (cnprint::CNPrinter *)cnprint::CNPrinter::GetLogLevel(LogLevel);
      if (v24 <= 1)
      {
        v123[0] = 12;
        LOBYTE(v111) = 1;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v123, (unsigned __int8 *)&v111, "#svdb,Considering frequency and slot for active status,freq,%i,slot,%i", v25, v26, v27, v28, v29, *((_DWORD *)v20 + 7));
      }
      if (*((_DWORD *)v20 + 7) != v23)
      {
        if (((v23 != -8) & v21) != 1) {
          goto LABEL_24;
        }
        uint64_t v30 = v107;
        uint64_t v31 = *v107;
        if (!*v107) {
          goto LABEL_24;
        }
        do
        {
          int v32 = *((_DWORD *)v31 + 7);
          BOOL v33 = v32 < v23;
          if (v32 >= v23) {
            uint64_t v34 = v31;
          }
          else {
            uint64_t v34 = v31 + 1;
          }
          if (!v33) {
            uint64_t v30 = (uint64_t **)v31;
          }
          uint64_t v31 = (uint64_t *)*v34;
        }
        while (*v34);
        if (v30 != v107 && v23 >= *((_DWORD *)v30 + 7))
        {
          if (cnprint::CNPrinter::GetLogLevel(v24) <= 1)
          {
            v123[0] = 12;
            LOBYTE(v111) = 1;
            sub_18E017C18(*v107, v23);
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)v123, (unsigned __int8 *)&v111, "#svdb,Removing from active list,freq,%i,slot,%i", v83, v84, v85, v86, v87, v23);
          }
          sub_18E01BD00((uint64_t)v105, v23);
          uint64_t v22 = 0;
          char v21 = 0;
          int v23 = *((_DWORD *)v20 + 7);
        }
        else
        {
LABEL_24:
          uint64_t v22 = 0;
          char v21 = 0;
          int v23 = *((_DWORD *)v20 + 7);
        }
      }
      int v35 = *((_DWORD *)v20 + 8);
      sub_18DEDE7B0(__p, "");
      char v121 = 2;
      int v122 = v35;
      uint64_t v36 = sub_18E01B8A0(a3, (uint64_t)__p);
      if (a3 + 8 == v36) {
        break;
      }
      uint64_t v37 = *(void *)(v36 + 64);
      if (!v37)
      {
        v123[0] = 12;
        LOBYTE(v111) = 5;
        char v51 = sub_18E017C64((uint64_t)__p);
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v123, (unsigned __int8 *)&v111, "#svdb,Null sat data,SV,%s", v52, v53, v54, v55, v56, v51);
        goto LABEL_33;
      }
      __int16 v111 = 0;
      long long v112 = 0u;
      long long v113 = 0u;
      int v114 = 0;
      uint64_t v115 = 0;
      uint64_t v116 = 0;
      int v117 = 0;
      if (!(*(unsigned int (**)(uint64_t, uint64_t, __int16 *, unsigned char *, _WORD *, double *))(*(void *)(v37 + 32) + 56))(v37 + 32, a4, &v111, v118, v123, v126))
      {
        uint64_t v57 = (cnprint::CNPrinter *)cnnavigation::SatElAz((uint64_t)&v124, (uint64_t)v118, 0, (uint64_t)v126, 0, (uint64_t)v123);
        if (!v57)
        {
          char v72 = LOBYTE(v126[0]);
          if (v126[0] <= -0.0872664626)
          {
            uint64_t v104 = v22;
          }
          else
          {
            if (v22)
            {
              v123[0] = 12;
              unsigned __int8 v110 = 3;
              cnprint::CNPrinter::Print((cnprint::CNPrinter *)v123, &v110, "#svdb,Two active slots at frequency found,freq,%i,slot0,%i,slot1,%i,elevation1,%lf", v58, v59, v60, v61, v62, v23);
              char v21 = 1;
            }
            uint64_t v57 = (cnprint::CNPrinter *)cnprint::CNPrinter::GetLogLevel(v57);
            if (v57 <= 1)
            {
              v123[0] = 12;
              unsigned __int8 v110 = 1;
              cnprint::CNPrinter::Print((cnprint::CNPrinter *)v123, &v110, "#svdb,Adding to active list,elevation,%.3lf,freq,%i,slot,%i", v73, v74, v75, v76, v77, v72);
            }
            uint64_t v104 = *((unsigned int *)v20 + 8);
            uint64_t v78 = (uint64_t)v107;
            while (1)
            {
              uint64_t v79 = *(void *)v78;
              long long v80 = (uint64_t **)v78;
              if (!*(void *)v78) {
                break;
              }
              while (1)
              {
                uint64_t v78 = v79;
                int v81 = *(_DWORD *)(v79 + 28);
                if (v81 > v23) {
                  break;
                }
                if (v81 >= v23) {
                  goto LABEL_57;
                }
                uint64_t v79 = *(void *)(v78 + 8);
                if (!v79)
                {
                  long long v80 = (uint64_t **)(v78 + 8);
                  goto LABEL_56;
                }
              }
            }
LABEL_56:
            BOOL v82 = (uint64_t *)operator new(0x28uLL);
            *((_DWORD *)v82 + 7) = v23;
            *((_DWORD *)v82 + 8) = 0;
            uint64_t v57 = (cnprint::CNPrinter *)sub_18E01BD84(v105, v78, v80, v82);
            uint64_t v78 = (uint64_t)v82;
LABEL_57:
            *(_DWORD *)(v78 + 32) = v104;
          }
          int LogLevel = (cnprint::CNPrinter *)cnprint::CNPrinter::GetLogLevel(v57);
          if (LogLevel > 1)
          {
            int v44 = 0;
            uint64_t v22 = v104;
          }
          else
          {
            v123[0] = 12;
            unsigned __int8 v110 = 1;
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)v123, &v110, "#svdb,elevation,%.3lf,freq,%i,slot,%i", v88, v89, v90, v91, v92, SLOBYTE(v126[0]));
            uint64_t v22 = v104;
            int v44 = 0;
          }
          goto LABEL_34;
        }
        v123[0] = 12;
        unsigned __int8 v110 = 4;
        char v63 = sub_18E017C64(v37);
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v123, &v110, "#svdb,Could not compute elevation,SV,%s", v64, v65, v66, v67, v68, v63);
        goto LABEL_33;
      }
      v123[0] = 12;
      LOBYTE(v126[0]) = 3;
      char v38 = sub_18E017C64(v37);
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v123, (unsigned __int8 *)v126, "#svdb,Cannot compute SV position while determining active GLONASS slot,SV,%s,slot,%i,freq,%i,t_eph,%lf,t_eval,%lf", v39, v40, v41, v42, v43, v38);
      int v44 = 3;
LABEL_34:
      if (v120 < 0) {
        operator delete(__p[0]);
      }
      if (v44 != 3 && v44) {
        return 0;
      }
      uint64_t v69 = (void *)v20[1];
      if (v69)
      {
        do
        {
          uint64_t v70 = v69;
          uint64_t v69 = (void *)*v69;
        }
        while (v69);
      }
      else
      {
        do
        {
          uint64_t v70 = (void *)v20[2];
          BOOL v71 = *v70 == (void)v20;
          uint64_t v20 = v70;
        }
        while (!v71);
      }
      uint64_t v20 = v70;
      if (v70 == v109)
      {
        if (((v23 != -8) & v21) == 1)
        {
          long long v93 = v107;
          long long v94 = *v107;
          if (*v107)
          {
            do
            {
              int v95 = *((_DWORD *)v94 + 7);
              BOOL v96 = v95 < v23;
              if (v95 >= v23) {
                uint64_t v97 = v94;
              }
              else {
                uint64_t v97 = v94 + 1;
              }
              if (!v96) {
                long long v93 = (uint64_t **)v94;
              }
              long long v94 = (uint64_t *)*v97;
            }
            while (*v97);
            if (v93 != v107 && v23 >= *((_DWORD *)v93 + 7))
            {
              if (cnprint::CNPrinter::GetLogLevel(LogLevel) <= 1)
              {
                v123[0] = 12;
                LOBYTE(v111) = 1;
                sub_18E017C18(*v107, v23);
                cnprint::CNPrinter::Print((cnprint::CNPrinter *)v123, (unsigned __int8 *)&v111, "#svdb,Removing from active list,freq,%i,slot,%i", v98, v99, v100, v101, v102, v23);
              }
              sub_18E01BD00((uint64_t)v105, v23);
            }
          }
        }
        return 1;
      }
    }
    v123[0] = 12;
    LOBYTE(v111) = 3;
    char v45 = sub_18E017C64((uint64_t)__p);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v123, (unsigned __int8 *)&v111, "#svdb,In freq-to-slot map but not sat data,SV,%s", v46, v47, v48, v49, v50, v45);
LABEL_33:
    int v44 = 1;
    goto LABEL_34;
  }
  return v106;
}

void sub_18E017BD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a40 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_18E017C18(uint64_t *a1, int a2)
{
  if (!a1) {
LABEL_8:
  }
    sub_18DEDE720("map::at:  key not found");
  while (1)
  {
    while (1)
    {
      int v2 = *((_DWORD *)a1 + 7);
      if (v2 <= a2) {
        break;
      }
      a1 = (uint64_t *)*a1;
      if (!a1) {
        goto LABEL_8;
      }
    }
    if (v2 >= a2) {
      return a1 + 4;
    }
    a1 = (uint64_t *)a1[1];
    if (!a1) {
      goto LABEL_8;
    }
  }
}

const char *sub_18E017C64(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    return "InvalidID";
  }
  uint64_t v1 = (void **)a1;
  if (*(_DWORD *)(a1 + 28) == -1) {
    return "InvalidID";
  }
  sub_18DEDC798((uint64_t)v9);
  unsigned int v2 = *((unsigned __int8 *)v1 + 24) - 1;
  if (v2 >= 6)
  {
    uint64_t v3 = "Unknown,";
    uint64_t v4 = 8;
  }
  else
  {
    uint64_t v3 = off_1E55B98D8[(char)v2];
    uint64_t v4 = qword_18E1FCFC8[(char)v2];
  }
  sub_18DEDD538(&v10, (uint64_t)v3, v4);
  std::ostream::operator<<();
  sub_18DEDD9B8((uint64_t)v11, &v7);
  if (*((char *)v1 + 23) < 0) {
    operator delete(*v1);
  }
  *(_OWORD *)uint64_t v1 = v7;
  v1[2] = v8;
  if (*((char *)v1 + 23) < 0) {
    uint64_t v1 = (void **)*v1;
  }
  v9[0] = *MEMORY[0x1E4FBA408];
  uint64_t v5 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v9 + *(void *)(v9[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  uint64_t v10 = v5;
  v11[0] = MEMORY[0x1E4FBA470] + 16;
  if (v12 < 0) {
    operator delete((void *)v11[8]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x192FA6190](&v13);
  return (const char *)v1;
}

void sub_18E017E6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_18DEDD3EC((uint64_t)va);
  _Unwind_Resume(a1);
}

void raven::GnssSvDatabase::FitAnchorPointsToPoly(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v5 = 0;
  uint64_t v25 = 0x100000004;
  long long v24 = xmmword_18E1F6F80;
  int v23 = &unk_1EDD19458;
  uint64_t v26 = v27;
  uint64_t v20 = 0x400000004;
  long long v19 = xmmword_18E1F6F70;
  uint64_t v6 = v22;
  uint64_t v18 = &unk_1EDD195A8;
  char v21 = v22;
  uint64_t v7 = *a3;
  uint64_t v8 = *a2;
  do
  {
    uint64_t v9 = 0;
    v27[v5] = *(void *)(v7 + 8 * v5);
    double v10 = 1.0;
    do
    {
      *(double *)&v6[v9] = v10;
      double v10 = v10 * *(double *)(v8 + 8 * v5);
      v9 += 32;
    }
    while (v9 != 128);
    ++v5;
    v6 += 8;
  }
  while (v5 != 4);
  uint64_t v15 = 0x400000004;
  uint64_t v13 = &unk_1EDD195A8;
  long long v14 = xmmword_18E1F6F70;
  uint64_t v16 = &v17;
  uint64_t v35 = 0x100000004;
  BOOL v33 = &unk_1EDD19488;
  long long v34 = xmmword_18E1F6F80;
  uint64_t v36 = &v37;
  uint64_t v30 = 0x100000010;
  long long v29 = xmmword_18E1FCEF0;
  uint64_t v28 = &unk_1EDD17958;
  uint64_t v31 = v32;
  sub_18E01BFEC((uint64_t)&v18, (uint64_t)&v33, (uint64_t)&v28, (uint64_t)&v13);
  uint64_t v30 = 0x100000004;
  long long v29 = xmmword_18E1F6F80;
  uint64_t v28 = &unk_1EDD19458;
  uint64_t v31 = v32;
  sub_18DFE2B44((uint64_t)&v13, (uint64_t)&v23, (uint64_t)&v28);
  uint64_t v11 = 0;
  char v12 = v31;
  do
  {
    *(void *)(a4 + v11) = *(void *)&v12[v11];
    v11 += 8;
  }
  while (v11 != 32);
}

uint64_t raven::GnssSvDatabase::PopulateGnssUTCParametersWithGps(raven::GnssSvDatabase *this, cnnavigation::GNSSUTCParameters *a2, double a3, int8x16_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  char v10 = *((unsigned char *)this + 112);
  if (v10 && *((unsigned char *)this + 144))
  {
    *((_WORD *)a2 + 33) = 0;
    *(_OWORD *)((char *)a2 + 50) = 0u;
    *(_OWORD *)((char *)a2 + 34) = 0u;
    *(_OWORD *)((char *)a2 + 18) = 0u;
    *(_OWORD *)((char *)a2 + 2) = 0u;
    *(_WORD *)a2 = 257;
    *(double *)&unint64_t v13 = (double)*((unint64_t *)this + 10) / 1000000000.0;
    long long v20 = 0uLL;
    CNTimeSpan::SetTimeSpan((uint64_t *)&v20, 0, (int8x16_t)v13, a4);
    *(_OWORD *)((char *)a2 + 24) = v20;
    float64x2_t v14 = *(float64x2_t *)((char *)this + 88);
    int8x16_t v15 = (int8x16_t)vdivq_f64(v14, (float64x2_t)vdupq_n_s64(0x41CDCD6500000000uLL));
    *(int8x16_t *)((char *)a2 + 8) = v15;
    int v16 = *((__int16 *)this + 60);
    *((_DWORD *)a2 + 10) = v16;
    if (v16 == -32768
      || (unint64_t v17 = *((void *)this + 16)) == 0
      || *((unsigned char *)this + 122) != 2
      || (int v18 = *((unsigned __int16 *)this + 68), v18 == 0x8000))
    {
      *((_DWORD *)a2 + 16) = v16;
    }
    else
    {
      *((_DWORD *)a2 + 16) = (__int16)v18;
      *(double *)v15.i64 = (double)v17 / 1000000000.0;
      long long v20 = 0uLL;
      CNTimeSpan::SetTimeSpan((uint64_t *)&v20, 0, v15, (int8x16_t)v14);
      *((_OWORD *)a2 + 3) = v20;
    }
    return 1;
  }
  else
  {
    LOWORD(v20) = 12;
    unsigned __int8 v21 = 3;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v20, &v21, "#svdb,Could not populate GPS to UTC conversion parameters,subsecond,%i,leapsecond,%i", a6, a7, a8, a9, a10, v10);
    return 0;
  }
}

BOOL raven::GnssSvDatabase::ConvertGpsWholeSecondTimeToGlonassTime(uint64_t a1, _OWORD *a2, long double a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int v9 = *(unsigned __int8 *)(a1 + 144);
  if (a3 < 0.0 || v9 == 0)
  {
    __int16 v32 = 12;
    LOBYTE(v39) = 3;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v32, (unsigned __int8 *)&v39, "#svdb,Could not converge GPS whole second time to Glonass time,leapsecond,%i,gps-time,%.3lf", a5, a6, a7, a8, a9, v9);
    return 0;
  }
  else
  {
    int v13 = *(unsigned __int16 *)(a1 + 120);
    if (v13 != 0x8000)
    {
      unint64_t v14 = *(void *)(a1 + 128);
      if (v14)
      {
        if (*(unsigned char *)(a1 + 122) == 2 && *(unsigned __int16 *)(a1 + 136) != 0x8000 && (double)v14 / 1000000000.0 <= a3) {
          LOWORD(v13) = *(_WORD *)(a1 + 136);
        }
      }
    }
    long long v33 = 0u;
    long long v34 = 0u;
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    __int16 v32 = 513;
    int v35 = (__int16)v13 - 10;
    int v38 = v35;
    int v15 = (int)(a3 / 604800.0);
    long double v16 = fmod(a3, 604800.0);
    v17.i64[0] = 0xC1212319A1CAC083;
    *(double *)v18.i64 = v16 + -561548.816;
    long long v39 = 0uLL;
    CNTimeSpan::SetTimeSpan((uint64_t *)&v39, 604800 * (v15 - 1042), v18, v17);
    long long v31 = v39;
    LODWORD(v39) = 1;
    *((void *)&v39 + 1) = 0;
    int v19 = cnnavigation::TAITime::ToGLONASSTime((uint64_t)&v31, (cnnavigation::GNSSUTCParameters *)&v32, (uint64_t)&v39);
    BOOL v11 = v19 == 0;
    if (v19)
    {
      LOWORD(v29) = 12;
      unsigned __int8 v30 = 4;
      double v28 = *((double *)&v31 + 1) + (double)(uint64_t)v31;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v29, &v30, "#svdb,ConvertGpsWholeSecondTimeToGlonassTime,Failed to convert TAI time to GLONASS time,tai-time,%.3lf", v20, v21, v22, v23, v24, SLOBYTE(v28));
    }
    else
    {
      v26.i64[0] = *((void *)&v39 + 1);
      *(double *)v25.i64 = *((double *)&v39 + 1) + (double)((int)v39 - 1) * 86400.0;
      long long v29 = 0uLL;
      CNTimeSpan::SetTimeSpan((uint64_t *)&v29, 0, v25, v26);
      *a2 = v29;
    }
  }
  return v11;
}

uint64_t raven::GnssSvDatabase::PopulateGnssUTCParametersWithGlonass(raven::GnssSvDatabase *this, cnnavigation::GNSSUTCParameters *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, int8x16_t a10)
{
  if (!*((unsigned char *)this + 144))
  {
    LOWORD(v28) = 12;
    unsigned __int8 v29 = 3;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v28, &v29, "#svdb,Failed to populate Glonass to UTC conversion parameters due to no leap second info", a4, a5, a6, a7, a8, v27);
    return 0;
  }
  char v12 = *((unsigned char *)this + 112);
  if (v12 && *((unsigned char *)this + 168))
  {
    *(_WORD *)a2 = 512;
    *(_OWORD *)((char *)a2 + 2) = 0u;
    *(_OWORD *)((char *)a2 + 18) = 0u;
    *(_OWORD *)((char *)a2 + 34) = 0u;
    *(_OWORD *)((char *)a2 + 50) = 0u;
    *((_WORD *)a2 + 33) = 0;
    BOOL v19 = raven::GnssSvDatabase::ConvertGpsWholeSecondTimeToGlonassTime((uint64_t)this, (cnnavigation::GNSSUTCParameters *)((char *)a2 + 24), (double)*((unint64_t *)this + 10) / 1000000000.0, a3, a4, a5, a6, a7, a8);
    uint64_t result = 0;
    if (!v19) {
      return result;
    }
    *((double *)a2 + 1) = (*((double *)this + 11) + *((double *)this + 20)) / 1000000000.0;
    double v21 = *((double *)this + 12) / 1000000000.0;
  }
  else
  {
    if (!*((unsigned char *)this + 192))
    {
      LOWORD(v28) = 12;
      unsigned __int8 v29 = 3;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v28, &v29, "#svdb,Failed to populate Glonass to UTC conversion parameters,gps-to-utc,%i,glonass-to-gps,%i,glonass-to-utc,%i", a4, a5, a6, a7, a8, v12);
      uint64_t result = 0;
      goto LABEL_19;
    }
    *(_WORD *)a2 = 512;
    *(_OWORD *)((char *)a2 + 2) = 0u;
    *(_OWORD *)((char *)a2 + 18) = 0u;
    *(_OWORD *)((char *)a2 + 34) = 0u;
    *(_OWORD *)((char *)a2 + 50) = 0u;
    *((_WORD *)a2 + 33) = 0;
    *(double *)&unint64_t v22 = (double)*((unint64_t *)this + 22) / 1000000000.0;
    long long v28 = 0uLL;
    CNTimeSpan::SetTimeSpan((uint64_t *)&v28, 0, (int8x16_t)v22, a10);
    *(_OWORD *)((char *)a2 + 24) = v28;
    *((double *)a2 + 1) = *((double *)this + 23) / 1000000000.0;
    double v21 = 0.0;
  }
  *((double *)a2 + 2) = v21;
  int v23 = *((__int16 *)this + 60);
  int v24 = v23 - 10;
  *((_DWORD *)a2 + 10) = v23 - 10;
  if (v23 != -32768)
  {
    unint64_t v25 = *((void *)this + 16);
    if (v25)
    {
      if (*((unsigned char *)this + 122) == 2)
      {
        int v26 = *((unsigned __int16 *)this + 68);
        if (v26 != 0x8000)
        {
          *((_DWORD *)a2 + 16) = (__int16)v26 - 10;
          if (raven::GnssSvDatabase::ConvertGpsWholeSecondTimeToGlonassTime((uint64_t)this, (_OWORD *)a2 + 3, (double)v25 / 1000000000.0, v13, v14, v15, v16, v17, v18))
          {
            goto LABEL_17;
          }
          return 0;
        }
      }
    }
  }
  *((_DWORD *)a2 + 16) = v24;
LABEL_17:
  uint64_t result = 1;
LABEL_19:
  *(unsigned char *)a2 = result;
  return result;
}

uint64_t raven::GnssSvDatabase::PopulateGnssUTCParametersWithGalileo(raven::GnssSvDatabase *this, cnnavigation::GNSSUTCParameters *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v9 = *((unsigned char *)this + 144);
  if (v9 && *((unsigned char *)this + 112) && *((unsigned char *)this + 224))
  {
    *(_WORD *)a2 = 768;
    *(_OWORD *)((char *)a2 + 2) = 0u;
    *(_OWORD *)((char *)a2 + 18) = 0u;
    *(_OWORD *)((char *)a2 + 34) = 0u;
    *(_OWORD *)((char *)a2 + 50) = 0u;
    *((_WORD *)a2 + 33) = 0;
    double v11 = (double)*((unint64_t *)this + 25) / 1000000000.0;
    LODWORD(v36) = vcvtmd_s64_f64(v11 / 604800.0);
    *((double *)&v36 + 1) = v11 + (double)(int)v36 * -604800.0;
    uint64_t v40 = 0;
    long long v39 = 0u;
    memset(v38, 0, sizeof(v38));
    cnnavigation::TAITime::TAITime(v37, (double *)&v36, (cnnavigation::GNSSUTCParameters *)v38);
    LOWORD(v38[0]) = 0;
    memset((char *)v38 + 8, 0, 36);
    long long v39 = 0uLL;
    LODWORD(v40) = 0;
    int v12 = cnnavigation::TAITime::ToGalileoTime((cnnavigation::TAITime *)v37, (const cnnavigation::GNSSUTCParameters *)v38);
    *(double *)v14.i64 = (double)(uint64_t)floor(v13);
    *(double *)v15.i64 = v13 - *(double *)v14.i64;
    v38[0] = 0uLL;
    CNTimeSpan::SetTimeSpan((uint64_t *)v38, vcvtmd_s64_f64(v13) + 604800 * v12, v15, v14);
    *(_OWORD *)((char *)a2 + 24) = v38[0];
    double v23 = *((double *)this + 12);
    *((double *)a2 + 1) = (*((double *)this + 26) + *((double *)this + 11) + v23 * 0.0) / 1000000000.0;
    *((double *)a2 + 2) = (v23 + *((double *)this + 27)) / 1000000000.0;
    int v24 = *((__int16 *)this + 60);
    *((_DWORD *)a2 + 10) = v24;
    if (v24 == -32768
      || (unint64_t v25 = *((void *)this + 16)) == 0
      || *((unsigned char *)this + 122) != 2
      || (int v26 = *((unsigned __int16 *)this + 68), v26 == 0x8000))
    {
      *((_DWORD *)a2 + 16) = v24;
    }
    else
    {
      *((_DWORD *)a2 + 16) = (__int16)v26;
      sub_18E01B1AC((uint64_t)&v34, (double)v25 / 1000000000.0, v16, v17, v18, v19, v20, v21, v22);
      v27.i64[0] = 0xC1212319A1CAC083;
      *(double *)v28.i64 = v35 + -561548.816;
      v38[0] = 0uLL;
      CNTimeSpan::SetTimeSpan((uint64_t *)v38, 604800 * (v34 - 1042), v28, v27);
      long long v36 = v38[0];
      LOWORD(v38[0]) = 0;
      memset((char *)v38 + 8, 0, 36);
      long long v39 = 0uLL;
      LODWORD(v40) = 0;
      int v29 = cnnavigation::TAITime::ToGalileoTime((cnnavigation::TAITime *)&v36, (const cnnavigation::GNSSUTCParameters *)v38);
      *(double *)v31.i64 = (double)(uint64_t)floor(v30);
      *(double *)v32.i64 = v30 - *(double *)v31.i64;
      v38[0] = 0uLL;
      CNTimeSpan::SetTimeSpan((uint64_t *)v38, vcvtmd_s64_f64(v30) + 604800 * v29, v32, v31);
      *((_OWORD *)a2 + 3) = v38[0];
    }
    uint64_t result = 1;
    *(unsigned char *)a2 = 1;
  }
  else
  {
    LOWORD(v38[0]) = 12;
    LOBYTE(v37[0]) = 3;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v38, (unsigned __int8 *)v37, "#svdb,Failed to populate Galileo to UTC conversion parameters,gps-leap-second,%i,gps-to-utc,%i,galileo-to-gps,%i", a4, a5, a6, a7, a8, v9);
    return 0;
  }
  return result;
}

uint64_t raven::GnssSvDatabase::PopulateGnssUTCParametersWithBeiDou(raven::GnssSvDatabase *this, cnnavigation::GNSSUTCParameters *a2, double a3, int8x16_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  char v10 = *((unsigned char *)this + 144);
  if (v10 && *((unsigned char *)this + 112))
  {
    int8x16_t v13 = 0uLL;
    if (*((unsigned char *)this + 256))
    {
      a4 = *((int8x16_t *)this + 15);
      float64x2_t v33 = (float64x2_t)a4;
      *(double *)a4.i64 = (double)*((unint64_t *)this + 29);
    }
    else
    {
      a4.i64[0] = 0;
      float64x2_t v33 = 0u;
    }
    *(_WORD *)a2 = 1024;
    *(_OWORD *)((char *)a2 + 2) = 0uLL;
    *(_OWORD *)((char *)a2 + 18) = 0uLL;
    *(_OWORD *)((char *)a2 + 34) = 0uLL;
    *(_OWORD *)((char *)a2 + 50) = 0uLL;
    *((_WORD *)a2 + 33) = 0;
    int v15 = vcvtmd_s64_f64(*(double *)a4.i64 / 1000000000.0 / 604800.0);
    *(double *)v13.i64 = *(double *)a4.i64 / 1000000000.0 + (double)v15 * -604800.0;
    uint64_t v16 = vcvtmd_s64_f64(*(double *)v13.i64) + 604800 * v15;
    *(double *)a4.i64 = (double)(uint64_t)floor(*(double *)v13.i64);
    *(double *)v13.i64 = *(double *)v13.i64 - *(double *)a4.i64;
    *(_OWORD *)uint64_t v37 = 0uLL;
    CNTimeSpan::SetTimeSpan((uint64_t *)v37, v16, v13, a4);
    *(_OWORD *)((char *)a2 + 24) = *(_OWORD *)v37;
    *(float64x2_t *)((char *)a2 + 8) = vdivq_f64(vaddq_f64(v33, *(float64x2_t *)((char *)this + 88)), (float64x2_t)vdupq_n_s64(0x41CDCD6500000000uLL));
    int v24 = *((__int16 *)this + 60);
    *((_DWORD *)a2 + 10) = v24;
    if (v24 == -32768
      || (unint64_t v25 = *((void *)this + 16)) == 0
      || *((unsigned char *)this + 122) != 2
      || (int v26 = *((unsigned __int16 *)this + 68), v26 == 0x8000))
    {
      *((_DWORD *)a2 + 16) = v24;
    }
    else
    {
      *((_DWORD *)a2 + 16) = (__int16)v26;
      sub_18E01B1AC((uint64_t)&v34, (double)v25 / 1000000000.0, v17, v18, v19, v20, v21, v22, v23);
      v27.i64[0] = 0xC1212319A1CAC083;
      *(double *)v28.i64 = v35 + -561548.816;
      *(_OWORD *)uint64_t v37 = 0uLL;
      CNTimeSpan::SetTimeSpan((uint64_t *)v37, 604800 * (v34 - 1042), v28, v27);
      long long v36 = *(_OWORD *)v37;
      *(_WORD *)uint64_t v37 = 0;
      memset(&v37[8], 0, 32);
      int v38 = 0;
      uint64_t v39 = 0;
      uint64_t v40 = 0;
      int v41 = 0;
      int v29 = cnnavigation::TAITime::ToBeiDouTime((cnnavigation::TAITime *)&v36, (const cnnavigation::GNSSUTCParameters *)v37);
      *(double *)v31.i64 = (double)(uint64_t)floor(v30);
      *(double *)v32.i64 = v30 - *(double *)v31.i64;
      *(_OWORD *)uint64_t v37 = 0uLL;
      CNTimeSpan::SetTimeSpan((uint64_t *)v37, vcvtmd_s64_f64(v30) + 604800 * v29, v32, v31);
      *((_OWORD *)a2 + 3) = *(_OWORD *)v37;
    }
    uint64_t result = 1;
    *(unsigned char *)a2 = 1;
  }
  else
  {
    *(_WORD *)uint64_t v37 = 12;
    LOBYTE(v36) = 3;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v37, (unsigned __int8 *)&v36, "#svdb,Failed to populate BeiDou-to-UTC conversion parameters,gps-leap-second,%i,gps-to-utc,%i", a6, a7, a8, a9, a10, v10);
    return 0;
  }
  return result;
}

uint64_t raven::GnssSvDatabase::PopulateGnssUTCParametersWithNavic(raven::GnssSvDatabase *this, cnnavigation::GNSSUTCParameters *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8 = *((unsigned char *)this + 144);
  if (v8 && *((unsigned char *)this + 112) && *((unsigned char *)this + 288))
  {
    *(_WORD *)a2 = 1536;
    *(_OWORD *)((char *)a2 + 2) = 0u;
    *(_OWORD *)((char *)a2 + 18) = 0u;
    *(_OWORD *)((char *)a2 + 34) = 0u;
    *(_OWORD *)((char *)a2 + 50) = 0u;
    *((_WORD *)a2 + 33) = 0;
    double v11 = (double)*((unint64_t *)this + 33) / 1000000000.0;
    LODWORD(v36) = vcvtmd_s64_f64(v11 / 604800.0);
    *((double *)&v36 + 1) = v11 + (double)(int)v36 * -604800.0;
    uint64_t v40 = 0;
    long long v39 = 0u;
    memset(v38, 0, sizeof(v38));
    cnnavigation::TAITime::TAITime((cnnavigation::TAITime *)v37, (const cnnavigation::NavicTime *)&v36, (const cnnavigation::GNSSUTCParameters *)v38);
    LOWORD(v38[0]) = 0;
    memset((char *)v38 + 8, 0, 36);
    long long v39 = 0uLL;
    LODWORD(v40) = 0;
    int v12 = cnnavigation::TAITime::ToNavicTime((cnnavigation::TAITime *)v37, (const cnnavigation::GNSSUTCParameters *)v38);
    *(double *)v14.i64 = (double)(uint64_t)floor(v13);
    *(double *)v15.i64 = v13 - *(double *)v14.i64;
    v38[0] = 0uLL;
    CNTimeSpan::SetTimeSpan((uint64_t *)v38, vcvtmd_s64_f64(v13) + 604800 * v12, v15, v14);
    *(_OWORD *)((char *)a2 + 24) = v38[0];
    double v23 = *((double *)this + 12);
    *((double *)a2 + 1) = (*((double *)this + 34) + *((double *)this + 11) + v23 * 0.0) / 1000000000.0;
    *((double *)a2 + 2) = (v23 + *((double *)this + 35)) / 1000000000.0;
    int v24 = *((__int16 *)this + 60);
    *((_DWORD *)a2 + 10) = v24;
    if (v24 == -32768
      || (unint64_t v25 = *((void *)this + 16)) == 0
      || *((unsigned char *)this + 122) != 2
      || (int v26 = *((unsigned __int16 *)this + 68), v26 == 0x8000))
    {
      *((_DWORD *)a2 + 16) = v24;
    }
    else
    {
      *((_DWORD *)a2 + 16) = (__int16)v26;
      sub_18E01B1AC((uint64_t)&v34, (double)v25 / 1000000000.0, v16, v17, v18, v19, v20, v21, v22);
      v27.i64[0] = 0xC1212319A1CAC083;
      *(double *)v28.i64 = v35 + -561548.816;
      v38[0] = 0uLL;
      CNTimeSpan::SetTimeSpan((uint64_t *)v38, 604800 * (v34 - 1042), v28, v27);
      long long v36 = v38[0];
      LOWORD(v38[0]) = 0;
      memset((char *)v38 + 8, 0, 36);
      long long v39 = 0uLL;
      LODWORD(v40) = 0;
      int v29 = cnnavigation::TAITime::ToNavicTime((cnnavigation::TAITime *)&v36, (const cnnavigation::GNSSUTCParameters *)v38);
      *(double *)v31.i64 = (double)(uint64_t)floor(v30);
      *(double *)v32.i64 = v30 - *(double *)v31.i64;
      v38[0] = 0uLL;
      CNTimeSpan::SetTimeSpan((uint64_t *)v38, vcvtmd_s64_f64(v30) + 604800 * v29, v32, v31);
      *((_OWORD *)a2 + 3) = v38[0];
    }
    uint64_t result = 1;
    *(unsigned char *)a2 = 1;
  }
  else
  {
    LOWORD(v38[0]) = 12;
    v37[0] = 3;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v38, v37, "#svdb,Failed to populate Navic-to-UTC conversion parameters,gps-leap-second,%i,gps-to-utc,%i", a4, a5, a6, a7, a8, v8);
    return 0;
  }
  return result;
}

uint64_t raven::GnssSvDatabase::ConvertCNTimeInGnssTimeBaseToTAI(cnnavigation::GNSSUTCParameters *this, uint64_t a2, _OWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8 = *((unsigned char *)this + 1);
  switch(v8)
  {
    case 1:
    case 5:
      double v12 = *(double *)(a2 + 8);
      double v13 = (double)*(uint64_t *)a2;
      if (COERCE__INT64(fabs(v12 + v13)) > 0x7FEFFFFFFFFFFFFFLL || v12 + v13 < 0.0)
      {
        LOWORD(v31) = 5;
        LOBYTE(v29) = 4;
        double v28 = v12 + v13;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v31, (unsigned __int8 *)&v29, "Invalid GPS time %.3lf constructed from CNTime", a4, a5, a6, a7, a8, SLOBYTE(v28));
        double v12 = *(double *)(a2 + 8);
        double v13 = (double)*(uint64_t *)a2;
      }
      int v14 = (int)(v13 / 604800.0);
      LODWORD(v29) = v14;
      double v15 = v12 + v13 + (double)v14 * -604800.0;
      double v30 = v15;
      if (v15 < 0.0)
      {
        LODWORD(v29) = v14 - 1;
        double v30 = v15 + 604800.0;
      }
      cnnavigation::TAITime::TAITime(&v31, &v29, this);
      goto LABEL_21;
    case 2:
      uint64_t v17 = *(void *)a2 / 86400;
      double v18 = *(double *)(a2 + 8) + (double)(*(void *)a2 - 86400 * (int)v17);
      double v30 = v18;
      LODWORD(v29) = v17 + 1;
      if (v18 < 0.0)
      {
        LODWORD(v29) = v17;
        double v30 = v18 + 86400.0;
      }
      cnnavigation::TAITime::TAITime(&v31, (int *)&v29, this);
      goto LABEL_21;
    case 3:
      uint64_t v19 = *(void *)a2;
      uint64_t v20 = *(void *)a2 / 604800;
      LODWORD(v29) = v20;
      double v21 = *(double *)(a2 + 8) + (double)(v19 - 604800 * (int)v20);
      double v30 = v21;
      if (v21 < 0.0)
      {
        LODWORD(v29) = v20 - 1;
        double v30 = v21 + 604800.0;
      }
      cnnavigation::TAITime::TAITime(&v31, &v29, this);
      goto LABEL_21;
    case 4:
      uint64_t v25 = *(void *)a2;
      uint64_t v26 = *(void *)a2 / 604800;
      LODWORD(v29) = v26;
      double v27 = *(double *)(a2 + 8) + (double)(v25 - 604800 * (int)v26);
      double v30 = v27;
      if (v27 < 0.0)
      {
        LODWORD(v29) = v26 - 1;
        double v30 = v27 + 604800.0;
      }
      cnnavigation::TAITime::TAITime((cnnavigation::TAITime *)&v31, (const cnnavigation::BeiDouTime *)&v29, this);
      goto LABEL_21;
    case 6:
      uint64_t v22 = *(void *)a2;
      uint64_t v23 = *(void *)a2 / 604800;
      LODWORD(v29) = v23;
      double v24 = *(double *)(a2 + 8) + (double)(v22 - 604800 * (int)v23);
      double v30 = v24;
      if (v24 < 0.0)
      {
        LODWORD(v29) = v23 - 1;
        double v30 = v24 + 604800.0;
      }
      cnnavigation::TAITime::TAITime((cnnavigation::TAITime *)&v31, (const cnnavigation::NavicTime *)&v29, this);
LABEL_21:
      *a3 = v31;
      uint64_t result = 1;
      break;
    default:
      LOWORD(v31) = 12;
      LOBYTE(v29) = 4;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v31, (unsigned __int8 *)&v29, "#svdb,Unexpected constellation requested for Gnss to TAI conversion,%i", a4, a5, a6, a7, a8, v8);
      uint64_t result = 0;
      break;
  }
  return result;
}

uint64_t raven::GnssSvDatabase::PopulateEphemFromPolynomial(uint64_t a1, uint64_t a2, double *a3, uint64_t a4)
{
  if ((sub_18E0192FC(a2) & 1) == 0)
  {
    LOWORD(__p[0]) = 12;
    LOBYTE(v73) = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, (unsigned __int8 *)&v73, "#svdb,PopulateEphemFromPolynomial,Malformed sv_info", v7, v8, v9, v10, v11, v69);
  }
  if (!*(unsigned char *)(a2 + 168))
  {
    LOWORD(v73) = 12;
    unsigned __int8 v72 = 4;
    sub_18E015C3C(a2, __p);
    if (v71 >= 0) {
      uint64_t v61 = __p;
    }
    else {
      LOBYTE(v61) = __p[0];
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v73, &v72, "#svdb,missing poly,SV,%s", v56, v57, v58, v59, v60, (char)v61);
    goto LABEL_18;
  }
  *(double *)v12.i64 = *(double *)(a2 + 56) * 0.000000001;
  long long v73 = 0uLL;
  CNTimeSpan::SetTimeSpan((uint64_t *)&v73, 0, v12, v13);
  *(_OWORD *)std::string __p = v73;
  int v19 = raven::GnssSvDatabase::ConvertCNTimeInGnssTimeBaseToTAI((cnnavigation::GNSSUTCParameters *)a3, (uint64_t)__p, (_OWORD *)(a4 + 72), v14, v15, v16, v17, v18);
  int v20 = v19 ^ 1;
  *(double *)v21.i64 = *(double *)(a2 + 64) * 0.000000001;
  long long v73 = 0uLL;
  CNTimeSpan::SetTimeSpan((uint64_t *)&v73, 0, v21, v22);
  *(_OWORD *)std::string __p = v73;
  int v28 = raven::GnssSvDatabase::ConvertCNTimeInGnssTimeBaseToTAI((cnnavigation::GNSSUTCParameters *)a3, (uint64_t)__p, (_OWORD *)(a4 + 88), v23, v24, v25, v26, v27);
  if (v19) {
    int v31 = 1;
  }
  else {
    int v31 = 2;
  }
  if (!v28) {
    int v20 = v31;
  }
  *(double *)v29.i64 = *(double *)(a2 + 8) * 0.000000001;
  long long v73 = 0uLL;
  CNTimeSpan::SetTimeSpan((uint64_t *)&v73, 0, v29, v30);
  *(_OWORD *)std::string __p = v73;
  uint64_t v37 = (cnprint::CNPrinter *)raven::GnssSvDatabase::ConvertCNTimeInGnssTimeBaseToTAI((cnnavigation::GNSSUTCParameters *)a3, (uint64_t)__p, (_OWORD *)(a4 + 104), v32, v33, v34, v35, v36);
  float64x2_t v38 = (float64x2_t)vdupq_n_s64(0x3E112E0BE826D695uLL);
  long long v39 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a4 + 136) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a4 + 120) = v39;
  long long v40 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a4 + 168) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a4 + 152) = v40;
  long long v41 = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a4 + 200) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a4 + 184) = v41;
  float64x2_t v42 = vmulq_f64(*(float64x2_t *)(a2 + 176), v38);
  float64x2_t v43 = vmulq_f64(*(float64x2_t *)(a2 + 192), v38);
  __asm { FMOV            V2.2D, #0.5 }
  *(void *)&_Q2.f64[0] = *(_OWORD *)&vmulq_f64(v43, _Q2);
  __asm { FMOV            V3.2D, #6.0 }
  _Q2.f64[1] = vdivq_f64(v43, _Q3).f64[1];
  *(float64x2_t *)(a4 + 216) = v42;
  *(float64x2_t *)(a4 + 232) = _Q2;
  *(double *)(a4 + 216) = v42.f64[0] + a3[1];
  *(double *)(a4 + 224) = v42.f64[1] + a3[2];
  if (v20 + (v37 ^ 1))
  {
    LOWORD(v73) = 12;
    unsigned __int8 v72 = 4;
    sub_18E015C3C(a2, __p);
    if (v71 >= 0) {
      uint64_t v55 = __p;
    }
    else {
      LOBYTE(v55) = __p[0];
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v73, &v72, "#svdb,Failed to convert poly GNSS time to TAI,%s,%d", v50, v51, v52, v53, v54, (char)v55);
LABEL_18:
    if (v71 < 0) {
      operator delete(__p[0]);
    }
    return 0;
  }
  if (!cnprint::CNPrinter::GetLogLevel(v37))
  {
    LOWORD(v73) = 12;
    unsigned __int8 v72 = 0;
    sub_18E015C3C(a2, __p);
    if (v71 >= 0) {
      uint64_t v68 = __p;
    }
    else {
      LOBYTE(v68) = __p[0];
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v73, &v72, "#svdb,poly ephem,SV,%s,interval,%.3f,%.3f,%.3f,clockpoly,%f,%f,%f,%f", v63, v64, v65, v66, v67, (char)v68);
    if (v71 < 0) {
      operator delete(__p[0]);
    }
  }
  return 1;
}

void sub_18E0192D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_18E0192FC(uint64_t a1)
{
  if (!sub_18E01B268((_DWORD *)a1)
    || (*(void *)(a1 + 8) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || !*(unsigned char *)(a1 + 16)
    || (*(void *)(a1 + 176) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (*(void *)(a1 + 184) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (*(void *)(a1 + 192) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (*(void *)(a1 + 200) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (*(_DWORD *)(a1 + 208) & 0x7FFFFFFFu) > 0x7F7FFFFF)
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 48))
  {
    unsigned int v2 = *(void **)(a1 + 24);
    uint64_t v3 = *(void **)(a1 + 32);
    if (v2 != v3)
    {
      while ((*v2 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
           && (v2[1] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
           && (v2[2] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
           && (v2[3] & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
      {
        v2 += 4;
        if (v2 == v3) {
          goto LABEL_18;
        }
      }
      return 0;
    }
  }
  else if (!*(unsigned char *)(a1 + 168))
  {
    return 0;
  }
LABEL_18:
  v11[0] = 0;
  v11[1] = 0;
  uint64_t v10 = v11;
  uint64_t v4 = *(unsigned __int8 **)(a1 + 224);
  uint64_t v5 = *(unsigned __int8 **)(a1 + 232);
  if (v4 == v5)
  {
    uint64_t v9 = 0;
    uint64_t v6 = 1;
    goto LABEL_42;
  }
  while (2)
  {
    uint64_t v6 = 0;
    switch(*v4)
    {
      case 0u:
        goto LABEL_40;
      case 1u:
      case 2u:
        if (*(_DWORD *)a1 == 1 || *(_DWORD *)a1 == 16) {
          goto LABEL_34;
        }
        goto LABEL_39;
      case 3u:
        if (*(_DWORD *)a1 != 2) {
          goto LABEL_39;
        }
        goto LABEL_34;
      case 4u:
      case 5u:
      case 6u:
        if (*(_DWORD *)a1 != 4) {
          goto LABEL_39;
        }
        goto LABEL_34;
      case 7u:
      case 8u:
        if (*(_DWORD *)a1 != 8) {
          goto LABEL_39;
        }
        goto LABEL_34;
      case 9u:
        if (*(_DWORD *)a1 != 32) {
          goto LABEL_39;
        }
        goto LABEL_34;
      case 0xAu:
        if (*(_DWORD *)a1 == 64) {
          goto LABEL_34;
        }
        goto LABEL_39;
      default:
LABEL_34:
        if (sub_18E01B354(&v10, *v4, *v4))
        {
          v4 += 40;
          if (v4 == v5)
          {
            uint64_t v6 = 1;
            goto LABEL_40;
          }
          continue;
        }
LABEL_39:
        uint64_t v6 = 0;
LABEL_40:
        uint64_t v9 = (void *)v11[0];
LABEL_42:
        sub_18DF064FC(v9);
        return v6;
    }
  }
}

void sub_18E019518(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
}

uint64_t raven::GnssSvDatabase::PopulateEphemFromAnchorPoints(uint64_t a1, uint64_t a2, double *a3, void *a4)
{
  v135[0] = *MEMORY[0x1E4F143B8];
  if ((sub_18E0192FC(a2) & 1) == 0)
  {
    *(_WORD *)std::string __p = 12;
    LOBYTE(v131) = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, (unsigned __int8 *)&v131, "#svdb,PopulateEphemFromAnchorPoints,Malformed sv_info", v7, v8, v9, v10, v11, v122);
  }
  if (!*(unsigned char *)(a2 + 48))
  {
    LOWORD(v131) = 12;
    LOBYTE(v128) = 4;
    sub_18E015C3C(a2, __p);
    if (__p[23] >= 0) {
      BOOL v96 = __p;
    }
    else {
      LOBYTE(v96) = __p[0];
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v131, (unsigned __int8 *)&v128, "#svdb,missing anchor points,SV,%s", v91, v92, v93, v94, v95, (char)v96);
    goto LABEL_25;
  }
  int8x16_t v12 = *(double **)(a2 + 24);
  if (*(void *)(a2 + 32) - (void)v12 != 128)
  {
    LOWORD(v131) = 12;
    LOBYTE(v128) = 4;
    sub_18E015C3C(a2, __p);
    if (__p[23] >= 0) {
      uint64_t v102 = __p;
    }
    else {
      LOBYTE(v102) = __p[0];
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v131, (unsigned __int8 *)&v128, "#svdb,Unexpected number of anchor points,SV,%s,N,%zu", v97, v98, v99, v100, v101, (char)v102);
LABEL_25:
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    return 0;
  }
  double v14 = *v12;
  int8x16_t v13 = v12 + 4;
  double v15 = v14;
  for (uint64_t i = 1; i != 4; ++i)
  {
    double v17 = v15;
    double v15 = *v13;
    if (fabs(*v13 - v17 + -1.0e10) > 2000000000.0)
    {
      LOWORD(v131) = 12;
      LOBYTE(v128) = 4;
      sub_18E015C3C(a2, __p);
      if (__p[23] >= 0) {
        long long v108 = __p;
      }
      else {
        LOBYTE(v108) = __p[0];
      }
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v131, (unsigned __int8 *)&v128, "#svdb,Anchor points are not spaced correctly,SV,%s,diff,%lf,anchors,%zu,%zu", v103, v104, v105, v106, v107, (char)v108);
      goto LABEL_25;
    }
    v13 += 4;
  }
  uint64_t v18 = operator new(0x40uLL);
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  v22.i64[1] = 0;
  *uint64_t v18 = 0u;
  v18[1] = 0u;
  v18[2] = 0u;
  v18[3] = 0u;
  uint64_t v23 = v18;
  while (1)
  {
    *(double *)v22.i64 = *(double *)(*(void *)(a2 + 24) + v20) / 1000000000.0;
    long long v131 = 0uLL;
    CNTimeSpan::SetTimeSpan((uint64_t *)&v131, 0, v22, v19);
    *(_OWORD *)std::string __p = v131;
    if ((raven::GnssSvDatabase::ConvertCNTimeInGnssTimeBaseToTAI((cnnavigation::GNSSUTCParameters *)a3, (uint64_t)__p, v23, v24, v25, v26, v27, v28) & 1) == 0)break; {
    ++v21;
    }
    ++v23;
    v20 += 32;
    if (v21 == 4)
    {
      *(void *)std::string __p = 1;
      *(void *)&__p[8] = 0x3FE0000000000000;
      uint64_t v29 = CNTimeSpan::operator-((uint64_t)v18, __p, v22, v19);
      uint64_t v31 = v30;
      a4[9] = v29;
      a4[10] = v30;
      *(void *)std::string __p = 1;
      *(void *)&__p[8] = 0x3FE0000000000000;
      uint64_t v34 = (void *)CNTimeSpan::operator+((uint64_t)(v18 + 3), __p, v32, v33);
      a4[11] = v34;
      a4[12] = v35;
      *(void *)&long long v131 = v29;
      *((void *)&v131 + 1) = v31;
      uint64_t v128 = v34;
      long long v129 = v35;
      uint64_t v38 = CNTimeSpan::operator+((uint64_t)&v131, &v128, v36, v37);
      v40.i64[0] = 0.5;
      *(double *)v41.i64 = (v39 + (double)v38) * 0.5;
      *(void *)std::string __p = 0;
      *(void *)&__p[8] = 0;
      CNTimeSpan::SetTimeSpan((uint64_t *)__p, 0, v41, v40);
      int8x16_t v42 = *(int8x16_t *)__p;
      *(_OWORD *)(a4 + 13) = *(_OWORD *)__p;
      uint64_t v44 = CNTimeSpan::operator-((uint64_t)v18, a4 + 13, v42, v43);
      double v123 = v45;
      uint64_t v124 = v44;
      uint64_t v48 = CNTimeSpan::operator-((uint64_t)(v18 + 1), a4 + 13, v46, v47);
      double v50 = v49;
      uint64_t v53 = CNTimeSpan::operator-((uint64_t)(v18 + 2), a4 + 13, v51, v52);
      double v55 = v54;
      uint64_t v58 = CNTimeSpan::operator-((uint64_t)(v18 + 3), a4 + 13, v56, v57);
      double v60 = v59;
      uint64_t v61 = (double *)operator new(0x20uLL);
      *((void *)&v131 + 1) = v61 + 4;
      uint64_t v132 = v61 + 4;
      double *v61 = v123 + (double)v124;
      v61[1] = v50 + (double)v48;
      v61[2] = v55 + (double)v53;
      v61[3] = v60 + (double)v58;
      *(void *)&long long v131 = v61;
      uint64_t v62 = *(void **)(a2 + 24);
      uint64_t v63 = v62[1];
      uint64_t v64 = v62[5];
      uint64_t v65 = v62[9];
      uint64_t v66 = v62[13];
      uint64_t v67 = v61;
      uint64_t v68 = operator new(0x20uLL);
      long long v129 = v68 + 4;
      char v130 = v68 + 4;
      *uint64_t v68 = v63;
      v68[1] = v64;
      v68[2] = v65;
      v68[3] = v66;
      uint64_t v128 = v68;
      raven::GnssSvDatabase::FitAnchorPointsToPoly((uint64_t)v68, (uint64_t *)&v131, (uint64_t *)&v128, (uint64_t)(a4 + 15));
      char v69 = *(double **)(a2 + 24);
      uint64_t v70 = *((void *)v69 + 6);
      *(double *)std::string __p = v69[2];
      *(void *)&__p[8] = v70;
      double v71 = v69[14];
      *(double *)&__p[16] = v69[10];
      double v134 = v71;
      unsigned __int8 v72 = sub_18E01B41C((char *)&v128, __p, (uint64_t)v135);
      raven::GnssSvDatabase::FitAnchorPointsToPoly((uint64_t)v72, (uint64_t *)&v131, (uint64_t *)&v128, (uint64_t)(a4 + 19));
      long long v73 = *(double **)(a2 + 24);
      uint64_t v74 = *((void *)v73 + 7);
      *(double *)std::string __p = v73[3];
      *(void *)&__p[8] = v74;
      double v75 = v73[15];
      *(double *)&__p[16] = v73[11];
      double v134 = v75;
      uint64_t v76 = sub_18E01B41C((char *)&v128, __p, (uint64_t)v135);
      raven::GnssSvDatabase::FitAnchorPointsToPoly((uint64_t)v76, (uint64_t *)&v131, (uint64_t *)&v128, (uint64_t)(a4 + 23));
      uint64_t v82 = raven::GnssSvDatabase::ConvertCNTimeInGnssTimeBaseToTAI((cnnavigation::GNSSUTCParameters *)a3, (uint64_t)(a3 + 3), &v127, v77, v78, v79, v80, v81);
      if (v82)
      {
        uint64_t v83 = *(void *)v67;
        double v84 = v67[3] - *v67;
        double v85 = a3[2] + *(double *)(a2 + 184) * 0.000000001;
        double v86 = *(double *)(a2 + 192) * 0.000000001 * 0.5;
        double v87 = *(double *)(a2 + 200) * 0.000000001 / 6.0;
        *(double *)std::string __p = a3[1] + *(double *)(a2 + 176) * 0.000000001;
        float64x2_t v88 = vsubq_f64(*(float64x2_t *)(v67 + 1), (float64x2_t)vdupq_lane_s64(v83, 0));
        float64x2_t v89 = vmulq_f64(v88, v88);
        *(float64x2_t *)&__p[8] = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64((float64x2_t)vdupq_lane_s64(*(uint64_t *)__p, 0), v88, v85), v89, v86), vmulq_f64(v88, v89), v87);
        double v134 = *(double *)__p + v85 * v84 + v86 * (v84 * v84) + v87 * (v84 * (v84 * v84));
        uint64_t v90 = sub_18E01B41C((char *)&v128, __p, (uint64_t)v135);
        raven::GnssSvDatabase::FitAnchorPointsToPoly((uint64_t)v90, (uint64_t *)&v131, (uint64_t *)&v128, (uint64_t)(a4 + 27));
      }
      else
      {
        __int16 v126 = 12;
        unsigned __int8 v125 = 4;
        sub_18E015C3C(a2, __p);
        if (__p[23] >= 0) {
          char v121 = __p;
        }
        else {
          LOBYTE(v121) = __p[0];
        }
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v126, &v125, "#svdb,Unsuccessful conversion of utc applicability time to TAI time,skipping,SV,%s", v116, v117, v118, v119, v120, (char)v121);
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
      }
      if (v128)
      {
        long long v129 = v128;
        operator delete(v128);
      }
      operator delete(v67);
      goto LABEL_43;
    }
  }
  LOWORD(v131) = 12;
  LOBYTE(v128) = 4;
  sub_18E015C3C(a2, __p);
  if (__p[23] >= 0) {
    uint64_t v115 = __p;
  }
  else {
    LOBYTE(v115) = __p[0];
  }
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v131, (unsigned __int8 *)&v128, "#svdb,Unsuccessful conversion of anchor point to TAI time,SV,%s,anchors,%zu,%zu", v110, v111, v112, v113, v114, (char)v115);
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  uint64_t v82 = 0;
LABEL_43:
  operator delete(v18);
  return v82;
}

void sub_18E019B84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  if (a19) {
    operator delete(a19);
  }
  operator delete(v31);
  operator delete(v30);
  _Unwind_Resume(a1);
}

uint64_t raven::GnssSvDatabase::AggregateHealthFromOrderedHealthArray(uint64_t a1)
{
  uint64_t v1 = 0;
  while (1)
  {
    uint64_t v2 = *(unsigned __int8 *)(a1 + v1);
    if ((v2 - 1) < 2) {
      break;
    }
    if (++v1 == 5) {
      return 0;
    }
  }
  return v2;
}

uint64_t raven::GnssSvDatabase::PopulateGnssUtcParameters(raven::GnssSvDatabase *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  memset(v50, 0, 46);
  memset(&v48[47], 0, 46);
  memset(&v48[32], 0, 42);
  memset(&v48[16], 0, 42);
  memset(v48, 0, 42);
  long long v49 = 0uLL;
  *(_WORD *)a2 = 0;
  long long v8 = *(_OWORD *)((char *)v50 + 4);
  long long v9 = *(_OWORD *)((char *)&v50[2] + 4);
  *(_OWORD *)(a2 + 28) = *(_OWORD *)((char *)&v50[3] + 6);
  *(_OWORD *)(a2 + 18) = v9;
  *(_OWORD *)(a2 + 2) = v8;
  *(_DWORD *)(a2 + 44) = 0;
  int v10 = v50[0];
  *(_OWORD *)(a2 + 48) = v49;
  *(_DWORD *)(a2 + 64) = v10;
  *(_DWORD *)(a2 + 68) = 0;
  *(_WORD *)(a2 + 72) = 0;
  uint64_t v11 = (cnnavigation::GNSSUTCParameters *)(a2 + 72);
  long long v12 = *(_OWORD *)&v48[48];
  long long v13 = *(_OWORD *)&v48[52];
  *(_OWORD *)(a2 + 100) = *(_OWORD *)((char *)&v48[54] + 2);
  *(_OWORD *)(a2 + 90) = v13;
  *(_OWORD *)(a2 + 74) = v12;
  *(_DWORD *)(a2 + 116) = 0;
  *(_OWORD *)(a2 + 120) = 0uLL;
  *(void *)(a2 + 136) = LOBYTE(v48[47]);
  *(_WORD *)(a2 + 144) = 0;
  double v14 = (cnnavigation::GNSSUTCParameters *)(a2 + 144);
  *(_OWORD *)(a2 + 172) = *(_OWORD *)((char *)&v48[38] + 2);
  *(_OWORD *)(a2 + 162) = *(_OWORD *)&v48[36];
  *(_OWORD *)(a2 + 146) = *(_OWORD *)&v48[32];
  *(_DWORD *)(a2 + 188) = 0;
  *(_DWORD *)(a2 + 208) = 0;
  *(_OWORD *)(a2 + 192) = 0uLL;
  *(_WORD *)(a2 + 216) = 0;
  uint64_t v15 = a2 + 216;
  *(_DWORD *)(a2 + 212) = 0;
  *(_OWORD *)(a2 + 244) = *(_OWORD *)((char *)&v48[22] + 2);
  *(_OWORD *)(a2 + 234) = *(_OWORD *)&v48[20];
  *(_OWORD *)(a2 + 218) = *(_OWORD *)&v48[16];
  *(_DWORD *)(a2 + 260) = 0;
  *(_OWORD *)(a2 + 264) = 0uLL;
  *(_DWORD *)(a2 + 280) = 0;
  *(_DWORD *)(a2 + 284) = 0;
  *(_WORD *)(a2 + 288) = 0;
  *(_OWORD *)(a2 + 316) = *(_OWORD *)((char *)&v48[6] + 2);
  *(_OWORD *)(a2 + 306) = *(_OWORD *)&v48[4];
  *(_OWORD *)(a2 + 290) = *(_OWORD *)v48;
  *(_DWORD *)(a2 + 332) = 0;
  *(_OWORD *)(a2 + 336) = 0uLL;
  *(_DWORD *)(a2 + 352) = 0;
  *(_DWORD *)(a2 + 356) = 0;
  char v16 = *((unsigned char *)a1 + 112);
  if (v16 && *((unsigned char *)a1 + 144))
  {
    raven::GnssSvDatabase::PopulateGnssUTCParametersWithGps(a1, (cnnavigation::GNSSUTCParameters *)a2, 0.0, *(int8x16_t *)&v48[4], a3, a4, a5, a6, a7, a8);
    raven::GnssSvDatabase::PopulateGnssUTCParametersWithGlonass(a1, v11, v19, v20, v21, v22, v23, v24, v25, v26);
    raven::GnssSvDatabase::PopulateGnssUTCParametersWithGalileo(a1, v14, v27, v28, v29, v30, v31, v32);
    raven::GnssSvDatabase::PopulateGnssUTCParametersWithBeiDou(a1, (cnnavigation::GNSSUTCParameters *)v15, v39, v40, v33, v34, v35, v36, v37, v38);
    if (*((unsigned char *)a1 + 73)) {
      raven::GnssSvDatabase::PopulateGnssUTCParametersWithNavic(a1, (cnnavigation::GNSSUTCParameters *)(v15 + 72), v41, v42, v43, v44, v45, v46);
    }
    *(void *)(a2 + 160) = 0;
    *(void *)(a2 + 88) = 0;
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 232) = 0;
    uint64_t result = 1;
    *(void *)(a2 + 304) = 0;
  }
  else
  {
    WORD2(v50[0]) = 12;
    LOBYTE(v48[48]) = 3;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)((char *)v50 + 4), (unsigned __int8 *)&v48[48], "#svdb,Cannot populate Sv Data,no time conversion from GPS to UTC,Subsecond,%i,Leapsecond,%i", a4, a5, a6, a7, a8, v16);
    return 0;
  }
  return result;
}

uint64_t raven::GnssSvDatabase::PopulateGnssSvDataForOneSv(uint64_t a1, uint64_t a2, cnnavigation::GNSSUTCParameters *a3, uint64_t a4)
{
  if (sub_18E016D4C((int *)a2, a4))
  {
    std::string::operator=((std::string *)(a4 + 40), (const std::string *)a4);
    uint64_t v7 = *(void *)(a4 + 24);
    *(void *)(a4 + 64) = v7;
    *(double *)(a4 + 248) = *(float *)(a2 + 208);
    *(unsigned char *)(a4 + 256) = *(unsigned char *)(a2 + 16);
    switch((char)v7)
    {
      case 1:
      case 5:
        BOOL IsValid = cnnavigation::GNSSUTCParameters::IsValid(a3);
        if (IsValid) {
          goto LABEL_35;
        }
        __int16 v55 = 12;
        unsigned __int8 v54 = 3;
        sub_18E015C3C(a2, __p);
        if (v53 >= 0) {
          double v14 = __p;
        }
        else {
          LOBYTE(v14) = __p[0];
        }
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v55, &v54, "#svdb,GPS/QZSS Conversion to UTC not available,SV,%s", v9, v10, v11, v12, v13, (char)v14);
        goto LABEL_12;
      case 2:
        a3 = (cnnavigation::GNSSUTCParameters *)((char *)a3 + 72);
        BOOL IsValid = cnnavigation::GNSSUTCParameters::IsValid(a3);
        if (IsValid) {
          goto LABEL_35;
        }
        __int16 v55 = 12;
        unsigned __int8 v54 = 3;
        sub_18E015C3C(a2, __p);
        if (v53 >= 0) {
          uint64_t v33 = __p;
        }
        else {
          LOBYTE(v33) = __p[0];
        }
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v55, &v54, "#svdb,GLONASS Conversion to UTC not available,SV,%s", v28, v29, v30, v31, v32, (char)v33);
        goto LABEL_12;
      case 3:
        a3 = (cnnavigation::GNSSUTCParameters *)((char *)a3 + 144);
        BOOL IsValid = cnnavigation::GNSSUTCParameters::IsValid(a3);
        if (IsValid) {
          goto LABEL_35;
        }
        __int16 v55 = 12;
        unsigned __int8 v54 = 3;
        sub_18E015C3C(a2, __p);
        if (v53 >= 0) {
          double v39 = __p;
        }
        else {
          LOBYTE(v39) = __p[0];
        }
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v55, &v54, "#svdb,Galileo Conversion to UTC not available,SV,%s", v34, v35, v36, v37, v38, (char)v39);
        goto LABEL_12;
      case 4:
        a3 = (cnnavigation::GNSSUTCParameters *)((char *)a3 + 216);
        BOOL IsValid = cnnavigation::GNSSUTCParameters::IsValid(a3);
        if (IsValid) {
          goto LABEL_35;
        }
        __int16 v55 = 12;
        unsigned __int8 v54 = 3;
        sub_18E015C3C(a2, __p);
        if (v53 >= 0) {
          int8x16_t v51 = __p;
        }
        else {
          LOBYTE(v51) = __p[0];
        }
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v55, &v54, "#svdb,BDS Conversion to UTC not available,SV,%s", v46, v47, v48, v49, v50, (char)v51);
        goto LABEL_12;
      case 6:
        a3 = (cnnavigation::GNSSUTCParameters *)((char *)a3 + 288);
        BOOL IsValid = cnnavigation::GNSSUTCParameters::IsValid(a3);
        if (!IsValid)
        {
          __int16 v55 = 12;
          unsigned __int8 v54 = 3;
          sub_18E015C3C(a2, __p);
          if (v53 >= 0) {
            uint64_t v45 = __p;
          }
          else {
            LOBYTE(v45) = __p[0];
          }
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v55, &v54, "#svdb,Navic Conversion to UTC not available,SV,%s", v40, v41, v42, v43, v44, (char)v45);
          goto LABEL_12;
        }
LABEL_35:
        if (*(unsigned char *)(a2 + 48))
        {
          uint64_t result = raven::GnssSvDatabase::PopulateEphemFromAnchorPoints(IsValid, a2, (double *)a3, (void *)a4);
        }
        else
        {
          uint64_t result = raven::GnssSvDatabase::PopulateEphemFromPolynomial(IsValid, a2, (double *)a3, a4);
        }
        break;
      default:
        __int16 v55 = 12;
        unsigned __int8 v54 = 4;
        sub_18E015C3C(a2, __p);
        if (v53 >= 0) {
          uint64_t v27 = __p;
        }
        else {
          LOBYTE(v27) = __p[0];
        }
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v55, &v54, "#svdb,Unhandled SV type,SV,%s", v22, v23, v24, v25, v26, (char)v27);
        goto LABEL_12;
    }
  }
  else
  {
    __int16 v55 = 12;
    unsigned __int8 v54 = 4;
    sub_18E015C3C(a2, __p);
    if (v53 >= 0) {
      uint64_t v20 = __p;
    }
    else {
      LOBYTE(v20) = __p[0];
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v55, &v54, "#svdb,Unexpected inability to convert to CNSatId,SV,%s", v15, v16, v17, v18, v19, (char)v20);
LABEL_12:
    if (v53 < 0) {
      operator delete(__p[0]);
    }
    return 0;
  }
  return result;
}

void sub_18E01A220(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t raven::GnssSvDatabase::PopulateGnssSvData(raven::GnssSvDatabase *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(_WORD *)uint64_t v48 = 0;
  __int16 v51 = 0;
  __int16 v58 = 0;
  __int16 v65 = 0;
  __int16 v72 = 0;
  memset(&v48[8], 0, 36);
  long long v49 = 0uLL;
  int v50 = 0;
  long long v52 = 0u;
  long long v53 = 0u;
  int v54 = 0;
  uint64_t v55 = 0;
  uint64_t v56 = 0;
  int v57 = 0;
  long long v59 = 0u;
  long long v60 = 0u;
  int v61 = 0;
  uint64_t v62 = 0;
  uint64_t v63 = 0;
  int v64 = 0;
  int v68 = 0;
  long long v67 = 0u;
  long long v66 = 0u;
  int v71 = 0;
  uint64_t v69 = 0;
  uint64_t v70 = 0;
  long long v73 = 0u;
  long long v74 = 0u;
  int v75 = 0;
  int v78 = 0;
  uint64_t v76 = 0;
  uint64_t v77 = 0;
  unsigned int v47 = raven::GnssSvDatabase::PopulateGnssUtcParameters(a1, (uint64_t)v48, (uint64_t)a3, a4, a5, a6, a7, a8);
  if (!v47) {
    return v47;
  }
  long long v12 = v49;
  *(_OWORD *)(a4 + 32) = *(_OWORD *)&v48[32];
  *(_OWORD *)(a4 + 48) = v12;
  *(_DWORD *)(a4 + 64) = v50;
  long long v13 = *(_OWORD *)&v48[16];
  *(_OWORD *)a4 = *(_OWORD *)v48;
  *(_OWORD *)(a4 + 16) = v13;
  sub_18DEE4BB4(a3);
  uint64_t v16 = *(int **)a1;
  double v14 = (int *)((char *)a1 + 8);
  uint64_t v15 = v16;
  if (v16 == v14) {
    return v47;
  }
  do
  {
    if (!*(unsigned char *)(a2 + 24)) {
      goto LABEL_24;
    }
    sub_18DEDE7B0(v83, "");
    LOBYTE(v85) = 0;
    HIDWORD(v85) = -1;
    if ((sub_18E016D4C(v15 + 16, (uint64_t)v83) & 1) == 0)
    {
      __int16 v82 = 12;
      unsigned __int8 v81 = 4;
      sub_18E015C3C((uint64_t)(v15 + 16), v79);
      uint64_t v29 = v79;
      if (v80 < 0) {
        LOBYTE(v29) = v79[0];
      }
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v82, &v81, "#svdb,Unexpected failure to convert to CN id,%s", v24, v25, v26, v27, v28, (char)v29);
      if (v80 < 0) {
        operator delete(v79[0]);
      }
LABEL_19:
      int v30 = 0;
      goto LABEL_20;
    }
    uint64_t v17 = *(uint64_t **)(a2 + 8);
    if (!v17) {
      goto LABEL_19;
    }
    while (1)
    {
      unsigned int v18 = *((unsigned __int8 *)v17 + 56);
      BOOL v19 = v18 < v85;
      int v20 = *((_DWORD *)v17 + 15);
      if (v85 == v18) {
        BOOL v19 = v20 < SHIDWORD(v85);
      }
      if (v19) {
        goto LABEL_13;
      }
      BOOL v21 = SHIDWORD(v85) < v20;
      BOOL v22 = v85 == v18;
      BOOL v23 = v85 < v18;
      if (v22) {
        BOOL v23 = v21;
      }
      if (!v23) {
        break;
      }
      ++v17;
LABEL_13:
      uint64_t v17 = (uint64_t *)*v17;
      if (!v17) {
        goto LABEL_19;
      }
    }
    int v30 = 1;
LABEL_20:
    if (SHIBYTE(v84) < 0)
    {
      operator delete(v83[0]);
      if (!v30) {
        goto LABEL_36;
      }
    }
    else if (!v30)
    {
      goto LABEL_36;
    }
LABEL_24:
    uint64_t v31 = (char *)operator new(0x178uLL);
    *((void *)v31 + 1) = 0;
    *((void *)v31 + 2) = 0;
    *(void *)uint64_t v31 = &unk_1EDD1E5E0;
    *(_OWORD *)(v31 + 24) = 0u;
    uint64_t v32 = v31 + 24;
    *(_OWORD *)(v31 + 40) = 0u;
    *(_OWORD *)(v31 + 56) = 0u;
    *(_OWORD *)(v31 + 72) = 0u;
    *(_OWORD *)(v31 + 88) = 0u;
    *(_OWORD *)(v31 + 104) = 0u;
    *(_OWORD *)(v31 + 120) = 0u;
    *(_OWORD *)(v31 + 136) = 0u;
    *(_OWORD *)(v31 + 152) = 0u;
    *(_OWORD *)(v31 + 168) = 0u;
    *(_OWORD *)(v31 + 184) = 0u;
    *(_OWORD *)(v31 + 200) = 0u;
    *(_OWORD *)(v31 + 216) = 0u;
    *(_OWORD *)(v31 + 232) = 0u;
    *(_OWORD *)(v31 + 248) = 0u;
    *(_OWORD *)(v31 + 264) = 0u;
    *(_OWORD *)(v31 + 280) = 0u;
    *(_OWORD *)(v31 + 296) = 0u;
    *(_OWORD *)(v31 + 312) = 0u;
    *(_OWORD *)(v31 + 328) = 0u;
    *(_OWORD *)(v31 + 344) = 0u;
    *(_OWORD *)(v31 + 360) = 0u;
    sub_18DEDE7B0((void *)v31 + 3, "");
    unsigned char v31[48] = 0;
    *((_DWORD *)v31 + 13) = -1;
    *((void *)v31 + 7) = &unk_1EDD0AE58;
    uint64_t v33 = sub_18DEDE7B0((void *)v31 + 8, "");
    v31[88] = 0;
    *((_DWORD *)v31 + 23) = -1;
    v31[312] = 0;
    v31[320] = 0;
    v31[328] = 0;
    *((_OWORD *)v31 + 21) = 0u;
    *((_OWORD *)v31 + 22) = 0u;
    *((void *)v31 + 46) = 0;
    *((_OWORD *)v31 + 6) = 0u;
    *((_OWORD *)v31 + 7) = 0u;
    *((_OWORD *)v31 + 8) = 0u;
    *((_OWORD *)v31 + 9) = 0u;
    *((_OWORD *)v31 + 10) = 0u;
    *((_OWORD *)v31 + 11) = 0u;
    *((_OWORD *)v31 + 12) = 0u;
    *((_OWORD *)v31 + 13) = 0u;
    *((_OWORD *)v31 + 14) = 0u;
    *((_OWORD *)v31 + 15) = 0u;
    *((_OWORD *)v31 + 16) = 0u;
    *((_OWORD *)v31 + 17) = 0u;
    *((_OWORD *)v31 + 18) = 0u;
    v31[304] = 0;
    if (raven::GnssSvDatabase::PopulateGnssSvDataForOneSv((uint64_t)v33, (uint64_t)(v15 + 16), (cnnavigation::GNSSUTCParameters *)v48, (uint64_t)(v31 + 24)))
    {
      uint64_t v35 = (void *)a3[1];
      unint64_t v34 = a3[2];
      if ((unint64_t)v35 >= v34)
      {
        uint64_t v37 = ((uint64_t)v35 - *a3) >> 4;
        unint64_t v38 = v37 + 1;
        if ((unint64_t)(v37 + 1) >> 60) {
          sub_18DFF7B4C();
        }
        uint64_t v39 = v34 - *a3;
        if (v39 >> 3 > v38) {
          unint64_t v38 = v39 >> 3;
        }
        if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v40 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v40 = v38;
        }
        double v86 = a3 + 2;
        uint64_t v41 = (char *)sub_18DFF7B64((uint64_t)(a3 + 2), v40);
        uint64_t v42 = &v41[16 * v37];
        v83[0] = v41;
        v83[1] = v42;
        double v85 = &v41[16 * v43];
        *(void *)uint64_t v42 = v32;
        *((void *)v42 + 1) = v31;
        double v84 = v42 + 16;
        sub_18E01B514(a3, v83);
        uint64_t v36 = (void *)a3[1];
        sub_18E01B69C(v83);
      }
      else
      {
        *uint64_t v35 = v32;
        v35[1] = v31;
        uint64_t v36 = v35 + 2;
        a3[1] = (uint64_t)(v35 + 2);
      }
      a3[1] = (uint64_t)v36;
    }
    else
    {
      sub_18DEE4E18((std::__shared_weak_count *)v31);
    }
LABEL_36:
    uint64_t v44 = (int *)*((void *)v15 + 1);
    if (v44)
    {
      do
      {
        uint64_t v45 = v44;
        uint64_t v44 = *(int **)v44;
      }
      while (v44);
    }
    else
    {
      do
      {
        uint64_t v45 = (int *)*((void *)v15 + 2);
        BOOL v22 = *(void *)v45 == (void)v15;
        uint64_t v15 = v45;
      }
      while (!v22);
    }
    uint64_t v15 = v45;
  }
  while (v45 != v14);
  return v47;
}

void sub_18E01A6AC(_Unwind_Exception *a1)
{
  sub_18DEE4E18(v1);
  _Unwind_Resume(a1);
}

uint64_t raven::GnssSvDatabase::FetchSvBandCorrection(uint64_t a1, uint64_t a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v4 = (cnprint::CNPrinter *)(a1 + 8);
  uint64_t v5 = v6;
  if (!v6) {
    return 0;
  }
  unsigned int v9 = *(unsigned __int8 *)(a2 + 24);
  int v10 = *(_DWORD *)(a2 + 28);
  uint64_t v11 = v4;
  do
  {
    unsigned int v12 = *(unsigned __int8 *)(v5 + 56);
    BOOL v14 = v12 == v9;
    BOOL v13 = v12 > v9;
    if (v14) {
      BOOL v13 = *(_DWORD *)(v5 + 60) > v10;
    }
    BOOL v14 = !v13;
    if (v13) {
      uint64_t v15 = (uint64_t *)(v5 + 8);
    }
    else {
      uint64_t v15 = (uint64_t *)v5;
    }
    if (v14) {
      uint64_t v11 = (cnprint::CNPrinter *)v5;
    }
    uint64_t v5 = *v15;
  }
  while (*v15);
  if (v11 == v4) {
    return 0;
  }
  unsigned int v16 = *((unsigned __int8 *)v11 + 56);
  BOOL v17 = *((_DWORD *)v11 + 15) < v10;
  BOOL v14 = v16 == v9;
  BOOL v18 = v16 < v9;
  if (v14) {
    BOOL v18 = v17;
  }
  if (v18) {
    return 0;
  }
  int v20 = (unsigned __int8 *)*((void *)v11 + 36);
  BOOL v19 = (unsigned __int8 *)*((void *)v11 + 37);
  if (v20 != v19)
  {
    while (*v20 != *a3)
    {
      v20 += 40;
      if (v20 == v19) {
        goto LABEL_21;
      }
    }
    long long v21 = *(_OWORD *)v20;
    long long v22 = *((_OWORD *)v20 + 1);
    a4[32] = v20[32];
    *(_OWORD *)a4 = v21;
    *((_OWORD *)a4 + 1) = v22;
  }
LABEL_21:
  if (!*a4
    || (*((void *)a4 + 2) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (*((void *)a4 + 1) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (*((void *)a4 + 3) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
  {
    return 0;
  }
  double v23 = fabs(*((double *)a4 + 1));
  if (fabs(*((double *)a4 + 2)) < 2.22044605e-16 || v23 < 2.22044605e-16)
  {
    LOWORD(v40[0]) = 12;
    LOBYTE(__p[0]) = 4;
    char v25 = sub_18E017C64(a2);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v40, (unsigned __int8 *)__p, "#svdb,SV band corr failed check,missing iono/tropo,%s", v26, v27, v28, v29, v30, v25);
    return 0;
  }
  if (a4[32] && !cnprint::CNPrinter::GetLogLevel(v4))
  {
    __int16 v43 = 12;
    unsigned __int8 v42 = 0;
    char v32 = sub_18E017C64(a2);
    sub_18E01A9C4(*a4, (uint64_t)v40);
    sub_18DEDE7B0(__p, off_1E55B9908[(char)a4[32]]);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v43, &v42, "#svdb,SV band corr has ionospheric source,svid,%s,band,%s,source,%s,delay,%.2f,nsec", v33, v34, v35, v36, v37, v32);
    if (v39 < 0) {
      operator delete(__p[0]);
    }
    if (v41 < 0) {
      operator delete(v40[0]);
    }
  }
  return 1;
}

void sub_18E01A990(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_18E01A9C4@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  switch((int)result)
  {
    case 0:
      *(unsigned char *)(a2 + 23) = 4;
      int v2 = 543911509;
      goto LABEL_12;
    case 1:
      *(unsigned char *)(a2 + 23) = 4;
      int v2 = 1094922572;
      goto LABEL_12;
    case 2:
      *(unsigned char *)(a2 + 23) = 4;
      int v2 = 538981708;
      goto LABEL_12;
    case 3:
      *(unsigned char *)(a2 + 23) = 4;
      int v2 = 543568204;
      goto LABEL_12;
    case 4:
      *(unsigned char *)(a2 + 23) = 4;
      int v2 = 541667650;
      goto LABEL_12;
    case 5:
      *(unsigned char *)(a2 + 23) = 4;
      int v2 = 541274434;
      goto LABEL_12;
    case 6:
      *(unsigned char *)(a2 + 23) = 4;
      int v2 = 543240770;
      goto LABEL_12;
    case 7:
      *(unsigned char *)(a2 + 23) = 4;
      int v2 = 538980677;
      goto LABEL_12;
    case 8:
      *(unsigned char *)(a2 + 23) = 4;
      int v2 = 543241541;
      goto LABEL_12;
    case 9:
      *(unsigned char *)(a2 + 23) = 4;
      int v2 = 1112748364;
LABEL_12:
      *(_DWORD *)a2 = v2;
      break;
    case 10:
      *(unsigned char *)(a2 + 23) = 3;
      *(_WORD *)a2 = 19534;
      *(unsigned char *)(a2 + 2) = 53;
      break;
    default:
      return result;
  }
  return result;
}

void sub_18E01AB18(char **a1, const void **a2)
{
  if (*((unsigned __int8 *)a1 + 24) == *((unsigned __int8 *)a2 + 24))
  {
    if (a1 != (char **)a2 && *((unsigned char *)a1 + 24))
    {
      uint64_t v3 = (char *)*a2;
      uint64_t v4 = (char *)a2[1];
      int64_t v5 = v4 - (unsigned char *)*a2;
      unint64_t v6 = v5 >> 5;
      uint64_t v7 = (uint64_t)a1[2];
      long long v8 = *a1;
      if (v5 >> 5 <= (unint64_t)((v7 - (uint64_t)*a1) >> 5))
      {
        uint64_t v11 = (void **)(a1 + 1);
        BOOL v14 = a1[1];
        unint64_t v15 = (v14 - v8) >> 5;
        if (v15 < v6)
        {
          unsigned int v16 = &v3[32 * v15];
          if (v14 != v8)
          {
            memmove(v8, *a2, v14 - v8);
            long long v8 = (char *)*v11;
          }
          int64_t v5 = v4 - v16;
          if (v4 == v16) {
            goto LABEL_27;
          }
          BOOL v17 = v8;
          BOOL v18 = v16;
          goto LABEL_26;
        }
      }
      else
      {
        if (v8)
        {
          a1[1] = v8;
          operator delete(v8);
          uint64_t v7 = 0;
          *a1 = 0;
          a1[1] = 0;
          a1[2] = 0;
        }
        if (v5 < 0) {
          sub_18DEE1FC8();
        }
        uint64_t v9 = v7 >> 4;
        if (v7 >> 4 <= v6) {
          uint64_t v9 = v5 >> 5;
        }
        if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v10 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v10 = v9;
        }
        sub_18E01AC84(a1, v10);
        unsigned int v12 = a1[1];
        uint64_t v11 = (void **)(a1 + 1);
        long long v8 = v12;
      }
      if (v4 == v3)
      {
LABEL_27:
        *uint64_t v11 = &v8[v5];
        return;
      }
      BOOL v17 = v8;
      BOOL v18 = v3;
LABEL_26:
      memmove(v17, v18, v5);
      goto LABEL_27;
    }
  }
  else if (*((unsigned char *)a1 + 24))
  {
    BOOL v13 = *a1;
    if (*a1)
    {
      a1[1] = v13;
      operator delete(v13);
    }
    *((unsigned char *)a1 + 24) = 0;
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
    sub_18E01AD00(a1, *a2, (uint64_t)a2[1], ((unsigned char *)a2[1] - (unsigned char *)*a2) >> 5);
    *((unsigned char *)a1 + 24) = 1;
  }
}

char *sub_18E01AC84(void *a1, unint64_t a2)
{
  if (a2 >> 59) {
    sub_18DEE1FC8();
  }
  uint64_t result = (char *)sub_18E01ACC8((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * v4];
  return result;
}

void *sub_18E01ACC8(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59) {
    sub_18DEDF7D4();
  }
  return operator new(32 * a2);
}

void *sub_18E01AD00(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    uint64_t result = sub_18E01AC84(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_18E01AD60(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_18E01AD7C(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  uint64_t v9 = *(char **)result;
  if (0xCCCCCCCCCCCCCCCDLL * ((v8 - *(void *)result) >> 3) < a4)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      _OWORD v7[2] = 0;
    }
    if (a4 > 0x666666666666666) {
      sub_18DEE1FC8();
    }
    unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * (v8 >> 3);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= a4) {
      uint64_t v11 = a4;
    }
    if (v10 >= 0x333333333333333) {
      unint64_t v12 = 0x666666666666666;
    }
    else {
      unint64_t v12 = v11;
    }
    uint64_t result = sub_18E01AEC0(v7, v12);
    BOOL v14 = (char *)v7[1];
    BOOL v13 = (void **)(v7 + 1);
    uint64_t v9 = v14;
LABEL_16:
    uint64_t v17 = a3 - (void)__src;
    if (v17)
    {
      size_t v18 = v17 - 7;
      BOOL v19 = v9;
      int v20 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  BOOL v13 = (void **)(result + 8);
  unint64_t v15 = (unsigned char *)*((void *)result + 1);
  if (0xCCCCCCCCCCCCCCCDLL * ((v15 - v9) >> 3) >= a4) {
    goto LABEL_16;
  }
  unsigned int v16 = &__src[8 * ((v15 - v9) >> 3)];
  if (v15 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v15 - v9 - 7);
    uint64_t v9 = (char *)*v13;
  }
  uint64_t v17 = a3 - (void)v16;
  if (v17)
  {
    size_t v18 = v17 - 7;
    BOOL v19 = v9;
    int v20 = v16;
LABEL_18:
    uint64_t result = (char *)memmove(v19, v20, v18);
  }
LABEL_19:
  char *v13 = &v9[v17];
  return result;
}

char *sub_18E01AEC0(void *a1, unint64_t a2)
{
  if (a2 >= 0x666666666666667) {
    sub_18DEE1FC8();
  }
  uint64_t result = (char *)sub_18E01AF14((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[40 * v4];
  return result;
}

void *sub_18E01AF14(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x666666666666667) {
    sub_18DEDF7D4();
  }
  return operator new(40 * a2);
}

void *sub_18E01AF5C(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    uint64_t result = sub_18E01AEC0(result, a4);
    uint64_t v7 = v6[1];
    uint64_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8 - 7);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_18E01AFBC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_18E01AFD8(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2 && sub_18E01B110(v2)) {
    return 1;
  }
  uint64_t v3 = a1[1];
  if (v3)
  {
    if (*(_WORD *)v3 && *(unsigned __int16 *)(v3 + 2) < 0x5B5u
      || *(void *)(v3 + 8) && (*(void *)(v3 + 16) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
    {
      return 1;
    }
  }
  uint64_t v4 = a1[2];
  if (v4)
  {
    if (*(_WORD *)v4
      || *(void *)(v4 + 8)
      && (*(void *)(v4 + 16) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (*(void *)(v4 + 24) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
    {
      return 1;
    }
  }
  uint64_t v5 = a1[3];
  if (v5)
  {
    if (*(_WORD *)v5
      || *(void *)(v5 + 8)
      && (*(void *)(v5 + 16) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (*(void *)(v5 + 24) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
    {
      return 1;
    }
  }
  uint64_t v6 = a1[4];
  if (!v6) {
    return 0;
  }
  if (*(_WORD *)v6) {
    return 1;
  }
  return *(void *)(v6 + 8)
      && (*(void *)(v6 + 16) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (*(void *)(v6 + 24) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
}

BOOL sub_18E01B110(uint64_t a1)
{
  if (*(_WORD *)a1) {
    return 1;
  }
  if (*(__int16 *)(a1 + 8) != -32768)
  {
    int v2 = *(unsigned __int8 *)(a1 + 10);
    if (*(void *)(a1 + 16))
    {
      if ((v2 != 2) == (*(__int16 *)(a1 + 24) != -32768)) {
        return *(void *)(a1 + 32)
      }
            && (*(void *)(a1 + 40) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
            && (*(void *)(a1 + 48) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
            && (*(void *)(a1 + 56) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
      return 1;
    }
    if (v2 != 2) {
      return 1;
    }
  }
  return *(void *)(a1 + 32)
      && (*(void *)(a1 + 40) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (*(void *)(a1 + 48) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (*(void *)(a1 + 56) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
}

uint64_t sub_18E01B1AC(uint64_t a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if ((*(uint64_t *)&a2 <= -1 || ((*(void *)&a2 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF)
    && (unint64_t)(*(void *)&a2 - 1) >= 0xFFFFFFFFFFFFFLL
    && (*(void *)&a2 & 0x7FFFFFFFFFFFFFFFLL) != 0)
  {
    __int16 v17 = 5;
    unsigned __int8 v16 = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v17, &v16, "Invalid GPS time %.3lf constructed from double", a5, a6, a7, a8, a9, SLOBYTE(a2));
  }
  int v14 = vcvtmd_s64_f64(a2 / 604800.0);
  *(_DWORD *)a1 = v14;
  *(double *)(a1 + 8) = a2 + (double)v14 * -604800.0;
  return a1;
}

BOOL sub_18E01B268(_DWORD *a1)
{
  uint64_t v1 = 0;
  int v2 = *a1;
  if ((int)*a1 > 15)
  {
    switch(v2)
    {
      case 16:
        uint64_t v3 = a1 + 1;
        unsigned int v4 = 10;
        char v5 = 63;
        break;
      case 32:
        uint64_t v3 = a1 + 1;
        unsigned int v4 = 22;
        char v5 = -120;
        break;
      case 64:
        uint64_t v3 = a1 + 1;
        unsigned int v4 = 14;
LABEL_11:
        char v5 = -1;
        break;
      default:
        return v1;
    }
    return v4 > (*v3 + v5);
  }
  switch(v2)
  {
    case 1:
      uint64_t v3 = a1 + 1;
      unsigned int v4 = 32;
      goto LABEL_11;
    case 2:
      uint64_t v3 = (char *)a1 + 5;
      unsigned int v4 = 14;
      char v5 = 7;
      return v4 > (*v3 + v5);
    case 4:
      uint64_t v3 = a1 + 1;
      unsigned int v4 = 63;
      goto LABEL_11;
    case 8:
      uint64_t v3 = a1 + 1;
      unsigned int v4 = 36;
      goto LABEL_11;
    default:
      return v1;
  }
  return v1;
}

uint64_t sub_18E01B354(uint64_t **a1, unsigned __int8 a2, char a3)
{
  uint64_t v6 = a1 + 1;
  char v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v5;
        unsigned int v8 = *((unsigned __int8 *)v5 + 25);
        if (v8 <= a2) {
          break;
        }
        char v5 = *v7;
        uint64_t v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        return 0;
      }
      char v5 = v7[1];
      if (!v5)
      {
        uint64_t v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v7 = a1 + 1;
LABEL_9:
    uint64_t v9 = operator new(0x20uLL);
    v9[25] = a3;
    *(void *)uint64_t v9 = 0;
    *((void *)v9 + 1) = 0;
    *((void *)v9 + 2) = v7;
    *uint64_t v6 = (uint64_t *)v9;
    unint64_t v10 = (uint64_t *)**a1;
    if (v10)
    {
      *a1 = v10;
      uint64_t v11 = *v6;
    }
    else
    {
      uint64_t v11 = (uint64_t *)v9;
    }
    sub_18DEEDADC(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return 1;
  }
}

char *sub_18E01B41C(char *result, char *__src, uint64_t a3)
{
  char v5 = result;
  uint64_t v6 = *((void *)result + 2);
  uint64_t v7 = *(char **)result;
  if ((unint64_t)(v6 - *(void *)result) < 0x20)
  {
    if (v7)
    {
      *((void *)result + 1) = v7;
      operator delete(v7);
      uint64_t v6 = 0;
      void *v5 = 0;
      v5[1] = 0;
      uint64_t v5[2] = 0;
    }
    uint64_t v8 = v6 >> 2;
    if ((unint64_t)(v6 >> 2) <= 4) {
      uint64_t v8 = 4;
    }
    if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v9 = v8;
    }
    uint64_t result = sub_18DFFA7B0(v5, v9);
    uint64_t v11 = (char *)v5[1];
    unint64_t v10 = (void **)(v5 + 1);
    uint64_t v7 = v11;
LABEL_15:
    size_t v15 = a3 - (void)__src;
    if (v15)
    {
      unsigned __int8 v16 = v7;
      __int16 v17 = __src;
      goto LABEL_17;
    }
    goto LABEL_18;
  }
  unint64_t v10 = (void **)(result + 8);
  unint64_t v12 = (unsigned char *)*((void *)result + 1);
  size_t v13 = v12 - v7;
  if ((unint64_t)(v12 - v7) > 0x1F) {
    goto LABEL_15;
  }
  int v14 = &__src[v13];
  if (v12 != v7)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v13);
    uint64_t v7 = (char *)*v10;
  }
  size_t v15 = a3 - (void)v14;
  if (v15)
  {
    unsigned __int8 v16 = v7;
    __int16 v17 = v14;
LABEL_17:
    uint64_t result = (char *)memmove(v16, v17, v15);
  }
LABEL_18:
  *unint64_t v10 = &v7[v15];
  return result;
}

uint64_t sub_18E01B514(uint64_t *a1, void *a2)
{
  uint64_t result = sub_18E01B58C((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_18E01B58C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  _OWORD v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      _OWORD *v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  sub_18E01B620((uint64_t)v12);
  return v10;
}

uint64_t sub_18E01B620(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_18E01B658(a1);
  }
  return a1;
}

void sub_18E01B658(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
    if (v3) {
      sub_18DEE4E18(v3);
    }
    v1 += 16;
  }
}

void **sub_18E01B69C(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_18E01B6D0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v1 = *(void *)(a1 + 16);
  while (v1 != v2)
  {
    *(void *)(a1 + 16) = v1 - 16;
    unsigned int v4 = *(std::__shared_weak_count **)(v1 - 8);
    if (v4)
    {
      sub_18DEE4E18(v4);
      uint64_t v1 = *(void *)(a1 + 16);
    }
    else
    {
      v1 -= 16;
    }
  }
}

void sub_18E01B724(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 256);
  if (v2)
  {
    *(void *)(a1 + 264) = v2;
    operator delete(v2);
  }
  if (*(unsigned char *)(a1 + 80))
  {
    uint64_t v3 = *(void **)(a1 + 56);
    if (v3)
    {
      *(void *)(a1 + 64) = v3;
      operator delete(v3);
    }
  }
  if (*(char *)(a1 + 23) < 0)
  {
    unsigned int v4 = *(void **)a1;
    operator delete(v4);
  }
}

uint64_t sub_18E01B794(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 24) = 0;
  sub_18E01B7E8((void *)a1, a2);
  return a1;
}

void sub_18E01B7C4(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 24))
  {
    uint64_t v3 = *(void **)v1;
    if (*(void *)v1)
    {
      *(void *)(v1 + 8) = v3;
      operator delete(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

void *sub_18E01B7E8(void *result, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 24))
  {
    uint64_t v2 = result;
    *uint64_t result = 0;
    result[1] = 0;
    result[2] = 0;
    uint64_t result = sub_18E01AD00(result, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 5);
    *((unsigned char *)v2 + 24) = 1;
  }
  return result;
}

void sub_18E01B834(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 224);
  if (v2)
  {
    *(void *)(a1 + 232) = v2;
    operator delete(v2);
  }
  if (*(unsigned char *)(a1 + 48))
  {
    uint64_t v3 = *(void **)(a1 + 24);
    if (v3)
    {
      *(void *)(a1 + 32) = v3;
      operator delete(v3);
    }
  }

  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E01B8A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v2 = a1 + 8;
  uint64_t v3 = v4;
  if (!v4) {
    return v2;
  }
  unsigned int v5 = *(unsigned __int8 *)(a2 + 24);
  int v6 = *(_DWORD *)(a2 + 28);
  uint64_t v7 = v2;
  do
  {
    unsigned int v8 = *(unsigned __int8 *)(v3 + 56);
    if (v8 == v5) {
      BOOL v9 = v6 < *(_DWORD *)(v3 + 60);
    }
    else {
      BOOL v9 = v5 < v8;
    }
    BOOL v10 = !v9;
    if (v9) {
      uint64_t v11 = (uint64_t *)(v3 + 8);
    }
    else {
      uint64_t v11 = (uint64_t *)v3;
    }
    if (v10) {
      uint64_t v7 = v3;
    }
    uint64_t v3 = *v11;
  }
  while (*v11);
  if (v7 == v2) {
    return v2;
  }
  unsigned int v12 = *(unsigned __int8 *)(v7 + 56);
  BOOL v13 = *(_DWORD *)(v7 + 60) < v6;
  int v14 = v5 == v12 ? v13 : v12 < v5;
  if (v14 == 1) {
    return v2;
  }
  return v7;
}

uint64_t *sub_18E01B928(uint64_t **a1, uint64_t *a2)
{
  uint64_t v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      uint64_t v3 = v2;
      uint64_t v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    uint64_t v4 = a2;
    do
    {
      uint64_t v3 = (uint64_t *)v4[2];
      BOOL v5 = *v3 == (void)v4;
      uint64_t v4 = v3;
    }
    while (!v5);
  }
  if (*a1 == a2) {
    *a1 = v3;
  }
  int v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  return sub_18E01B97C(v6, a2);
}

uint64_t *sub_18E01B97C(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2;
  if (*a2)
  {
    uint64_t v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      uint64_t v3 = a2;
      goto LABEL_7;
    }
    do
    {
      uint64_t v3 = v4;
      uint64_t v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  uint64_t v2 = v3[1];
  if (v2)
  {
LABEL_7:
    int v5 = 0;
    *(void *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  int v5 = 1;
LABEL_8:
  int v6 = (uint64_t **)v3[2];
  uint64_t v7 = *v6;
  if (*v6 == v3)
  {
    *int v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      uint64_t v7 = 0;
      uint64_t result = (uint64_t *)v2;
    }
    else
    {
      uint64_t v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  int v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    uint64_t v9 = a2[2];
    v3[2] = v9;
    *(void *)(v9 + 8 * (*(void *)a2[2] != (void)a2)) = v3;
    uint64_t v11 = *a2;
    uint64_t v10 = a2[1];
    *(void *)(v11 + 16) = v3;
    *uint64_t v3 = v11;
    v3[1] = v10;
    if (v10) {
      *(void *)(v10 + 16) = v3;
    }
    *((unsigned char *)v3 + 24) = *((unsigned char *)a2 + 24);
    if (result == a2) {
      uint64_t result = v3;
    }
  }
  if (!v8 || !result) {
    return result;
  }
  if (!v5)
  {
    *(unsigned char *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    uint64_t v12 = v7[2];
    if (*(uint64_t **)v12 != v7) {
      break;
    }
    if (!*((unsigned char *)v7 + 24))
    {
      *((unsigned char *)v7 + 24) = 1;
      *(unsigned char *)(v12 + 24) = 0;
      uint64_t v18 = v7[1];
      *(void *)uint64_t v12 = v18;
      if (v18) {
        *(void *)(v18 + 16) = v12;
      }
      _OWORD v7[2] = *(void *)(v12 + 16);
      *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v7;
      v7[1] = v12;
      *(void *)(v12 + 16) = v7;
      if (result == (uint64_t *)v12) {
        uint64_t result = v7;
      }
      uint64_t v7 = *(uint64_t **)v12;
    }
    BOOL v19 = (void *)*v7;
    if (*v7 && !*((unsigned char *)v19 + 24)) {
      goto LABEL_68;
    }
    int v20 = (uint64_t *)v7[1];
    if (v20 && !*((unsigned char *)v20 + 24))
    {
      if (v19 && !*((unsigned char *)v19 + 24))
      {
LABEL_68:
        int v20 = v7;
      }
      else
      {
        *((unsigned char *)v20 + 24) = 1;
        *((unsigned char *)v7 + 24) = 0;
        uint64_t v26 = *v20;
        v7[1] = *v20;
        if (v26) {
          *(void *)(v26 + 16) = v7;
        }
        uint64_t v20[2] = v7[2];
        *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v20;
        uint64_t *v20 = (uint64_t)v7;
        _OWORD v7[2] = (uint64_t)v20;
        BOOL v19 = v7;
      }
      uint64_t v23 = v20[2];
      *((unsigned char *)v20 + 24) = *(unsigned char *)(v23 + 24);
      *(unsigned char *)(v23 + 24) = 1;
      *((unsigned char *)v19 + 24) = 1;
      uint64_t v24 = *(uint64_t **)v23;
      uint64_t v27 = *(void *)(*(void *)v23 + 8);
      *(void *)uint64_t v23 = v27;
      if (v27) {
        *(void *)(v27 + 16) = v23;
      }
      v24[2] = *(void *)(v23 + 16);
      *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v24;
      v24[1] = v23;
      goto LABEL_72;
    }
    *((unsigned char *)v7 + 24) = 0;
    __int16 v17 = (uint64_t *)v7[2];
    if (*((unsigned char *)v17 + 24)) {
      BOOL v21 = v17 == result;
    }
    else {
      BOOL v21 = 1;
    }
    if (v21) {
      goto LABEL_53;
    }
LABEL_49:
    uint64_t v7 = *(uint64_t **)(v17[2] + 8 * (*(void *)v17[2] == (void)v17));
  }
  if (!*((unsigned char *)v7 + 24))
  {
    *((unsigned char *)v7 + 24) = 1;
    *(unsigned char *)(v12 + 24) = 0;
    BOOL v13 = *(uint64_t **)(v12 + 8);
    uint64_t v14 = *v13;
    *(void *)(v12 + 8) = *v13;
    if (v14) {
      *(void *)(v14 + 16) = v12;
    }
    void v13[2] = *(void *)(v12 + 16);
    *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v13;
    uint64_t *v13 = v12;
    *(void *)(v12 + 16) = v13;
    if (result == (uint64_t *)*v7) {
      uint64_t result = v7;
    }
    uint64_t v7 = *(uint64_t **)(*v7 + 8);
  }
  long long v15 = (void *)*v7;
  if (!*v7 || *((unsigned char *)v15 + 24))
  {
    unsigned __int8 v16 = (uint64_t *)v7[1];
    if (v16 && !*((unsigned char *)v16 + 24)) {
      goto LABEL_59;
    }
    *((unsigned char *)v7 + 24) = 0;
    __int16 v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      __int16 v17 = result;
LABEL_53:
      *((unsigned char *)v17 + 24) = 1;
      return result;
    }
    if (!*((unsigned char *)v17 + 24)) {
      goto LABEL_53;
    }
    goto LABEL_49;
  }
  unsigned __int8 v16 = (uint64_t *)v7[1];
  if (v16 && !*((unsigned char *)v16 + 24))
  {
LABEL_59:
    long long v15 = v7;
  }
  else
  {
    *((unsigned char *)v15 + 24) = 1;
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v22 = v15[1];
    *uint64_t v7 = v22;
    if (v22) {
      *(void *)(v22 + 16) = v7;
    }
    unsigned int v15[2] = v7[2];
    *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v15;
    v15[1] = v7;
    _OWORD v7[2] = (uint64_t)v15;
    unsigned __int8 v16 = v7;
  }
  uint64_t v23 = v15[2];
  *((unsigned char *)v15 + 24) = *(unsigned char *)(v23 + 24);
  *(unsigned char *)(v23 + 24) = 1;
  *((unsigned char *)v16 + 24) = 1;
  uint64_t v24 = *(uint64_t **)(v23 + 8);
  uint64_t v25 = *v24;
  *(void *)(v23 + 8) = *v24;
  if (v25) {
    *(void *)(v25 + 16) = v23;
  }
  v24[2] = *(void *)(v23 + 16);
  *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v24;
  uint64_t *v24 = v23;
LABEL_72:
  *(void *)(v23 + 16) = v24;
  return result;
}

void sub_18E01BD00(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = a1 + 8;
    do
    {
      int v4 = *(_DWORD *)(v2 + 28);
      BOOL v5 = v4 < a2;
      if (v4 >= a2) {
        int v6 = (uint64_t *)v2;
      }
      else {
        int v6 = (uint64_t *)(v2 + 8);
      }
      if (!v5) {
        uint64_t v3 = v2;
      }
      uint64_t v2 = *v6;
    }
    while (*v6);
    if (v3 != a1 + 8 && *(_DWORD *)(v3 + 28) <= a2)
    {
      sub_18E01B928((uint64_t **)a1, (uint64_t *)v3);
      operator delete((void *)v3);
    }
  }
}

uint64_t *sub_18E01BD84(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  BOOL v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  uint64_t result = sub_18DEEDADC(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t *sub_18E01BDDC(uint64_t **a1, unsigned __int8 a2, int a3, uint64_t a4)
{
  uint64_t v7 = a1 + 1;
  int v6 = a1[1];
  int v8 = (char **)(a1 + 1);
  uint64_t v9 = (uint64_t *)(a1 + 1);
  if (v6)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v9 = v6;
        unsigned int v10 = *((unsigned __int8 *)v6 + 56);
        int v11 = *((_DWORD *)v9 + 15);
        BOOL v12 = v11 < a3;
        if (v10 != a2) {
          BOOL v12 = v10 < a2;
        }
        if (!v12) {
          break;
        }
        int v6 = (uint64_t *)*v9;
        int v8 = (char **)v9;
        if (!*v9) {
          goto LABEL_12;
        }
      }
      BOOL v13 = v11 > a3;
      BOOL v14 = v10 == a2;
      BOOL v15 = v10 > a2;
      if (v14) {
        BOOL v15 = v13;
      }
      if (!v15) {
        break;
      }
      int v6 = (uint64_t *)v9[1];
      if (!v6)
      {
        int v8 = (char **)(v9 + 1);
        goto LABEL_12;
      }
    }
  }
  else
  {
LABEL_12:
    unsigned __int8 v16 = (char *)operator new(0x140uLL);
    v21[0] = v16;
    v21[1] = v7;
    char v22 = 0;
    __int16 v17 = v16 + 32;
    if (*(char *)(a4 + 23) < 0)
    {
      sub_18DEDE668(v17, *(void **)a4, *(void *)(a4 + 8));
    }
    else
    {
      *(_OWORD *)__int16 v17 = *(_OWORD *)a4;
      *((void *)v16 + 6) = *(void *)(a4 + 16);
    }
    *((void *)v16 + 7) = *(void *)(a4 + 24);
    *((_OWORD *)v16 + 4) = 0u;
    *((_OWORD *)v16 + 5) = 0u;
    *((_OWORD *)v16 + 6) = 0u;
    *((_OWORD *)v16 + 7) = 0u;
    *((_OWORD *)v16 + 8) = 0u;
    *((_OWORD *)v16 + 9) = 0u;
    *((_OWORD *)v16 + 10) = 0u;
    *((_OWORD *)v16 + 11) = 0u;
    *((_OWORD *)v16 + 12) = 0u;
    *((_OWORD *)v16 + 13) = 0u;
    *((_OWORD *)v16 + 18) = 0u;
    *((_OWORD *)v16 + 19) = 0u;
    v16[69] = 127;
    *((void *)v16 + 9) = 0x7FF8000000000000;
    int64x2_t v18 = vdupq_n_s64(0x7FF8000000000000uLL);
    *((_OWORD *)v16 + 14) = 0u;
    *((int64x2_t *)v16 + 15) = v18;
    *((int64x2_t *)v16 + 16) = v18;
    *((_OWORD *)v16 + 17) = 0u;
    *((_DWORD *)v16 + 68) = 2143289344;
    *((_WORD *)v16 + 142) = 0;
    *(void *)(v16 + 276) = 0;
    *((void *)v16 + 36) = 0;
    *((void *)v16 + 37) = 0;
    *((_DWORD *)v16 + 78) = 0;
    *((void *)v16 + 38) = 0;
    char v22 = 1;
    *(void *)unsigned __int8 v16 = 0;
    *((void *)v16 + 1) = 0;
    *((void *)v16 + 2) = v9;
    _OWORD *v8 = v16;
    BOOL v19 = (uint64_t *)**a1;
    if (v19)
    {
      *a1 = v19;
      unsigned __int8 v16 = *v8;
    }
    sub_18DEEDADC(a1[1], (uint64_t *)v16);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    uint64_t v9 = (uint64_t *)v21[0];
    v21[0] = 0;
    sub_18E01BF94((uint64_t)v21);
  }
  return v9;
}

void sub_18E01BF80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_18E01BF94((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_18E01BF94(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_18E01B724((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

void sub_18E01BFEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_18DFE2F24(a4, a1);
  uint64_t v12 = *(unsigned int *)(a4 + 8);
  uint64_t v13 = *(unsigned int *)(a4 + 12);
  BOOL v14 = *(__CLPK_doublereal **)(a4 + 32);
  __CLPK_integer v15 = *(_DWORD *)(a4 + 20);
  unsigned __int8 v16 = *(void **)(a2 + 32);
  __CLPK_integer __n = *(_DWORD *)(a4 + 12);
  __CLPK_integer __m = v12;
  __CLPK_integer __lda = v15;
  if ((int)v12 < 1)
  {
    __CLPK_integer v20 = -1;
LABEL_8:
    LOWORD(__m) = 4;
    LOBYTE(__n) = 5;
    int v35 = -v20;
    BOOL v21 = "Error using Inv: input argument %d invalid in getrf.";
    goto LABEL_9;
  }
  size_t v17 = 4 * v12;
  int64x2_t v18 = (__CLPK_integer *)operator new[](4 * v12, MEMORY[0x1E4FBA2D0]);
  if (!v18)
  {
    __CLPK_integer v20 = -5;
    goto LABEL_8;
  }
  BOOL v19 = v18;
  __CLPK_integer __info = 0;
  dgetrf_(&__m, &__n, v14, &__lda, v18, &__info);
  memcpy(v16, v19, v17);
  MEMORY[0x192FA6220](v19, 0x1000C8052888210);
  __CLPK_integer v20 = __info;
  if (!__info) {
    goto LABEL_10;
  }
  if (__info < 1) {
    goto LABEL_8;
  }
  LOWORD(__m) = 4;
  LOBYTE(__n) = 2;
  BOOL v21 = "Warning: matrix is singular to working precision.";
LABEL_9:
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&__m, (unsigned __int8 *)&__n, v21, v7, v8, v9, v10, v11, v35);
LABEL_10:
  char v22 = *(__CLPK_doublereal **)(a3 + 32);
  __CLPK_integer v23 = *(_DWORD *)(a3 + 28) * *(_DWORD *)(a3 + 24);
  __CLPK_integer __n = v15;
  __CLPK_integer __m = v13;
  if ((int)v13 < 1)
  {
    __CLPK_integer v28 = -1;
LABEL_16:
    LOWORD(__m) = 4;
    LOBYTE(__n) = 5;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&__m, (unsigned __int8 *)&__n, "Error using Inv: input argument %d invalid in getri.", v7, v8, v9, v10, v11, -(char)v28);
    goto LABEL_17;
  }
  size_t v24 = 4 * v13;
  uint64_t v25 = (__CLPK_integer *)operator new[](v24, MEMORY[0x1E4FBA2D0]);
  if (!v25)
  {
    __CLPK_integer v28 = -4;
    goto LABEL_16;
  }
  uint64_t v26 = v25;
  memcpy(v25, v16, v24);
  __CLPK_integer __info = 0;
  __CLPK_integer __lda = v23;
  dgetri_(&__m, v14, &__n, v26, v22, &__lda, &__info);
  uint64_t v27 = (cnprint::CNPrinter *)MEMORY[0x192FA6220](v26, 0x1000C8052888210);
  __CLPK_integer v28 = __info;
  if (__info < 0) {
    goto LABEL_16;
  }
LABEL_17:
  int v29 = (int)**(double **)(a3 + 32);
  if (v23 < v29 && cnprint::CNPrinter::GetLogLevel(v27) <= 1)
  {
    LOWORD(__m) = 4;
    LOBYTE(__n) = 1;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&__m, (unsigned __int8 *)&__n, "Warning: Inv optimal workspace size %d is greater than provided workspace size %d; performance may suffer.",
      v30,
      v31,
      v32,
      v33,
      v34,
      v29);
  }
  if (v28 >= 1) {
    sub_18DFE2CC8(a4, INFINITY);
  }
}

void *sub_18E01C250(void *result)
{
  *uint64_t result = &unk_1EDD17478;
  return result;
}

void *sub_18E01C270(void *result)
{
  *uint64_t result = &unk_1EDD174A8;
  return result;
}

void sub_18E01C290(void *a1)
{
  *a1 = &unk_1EDD174A8;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E01C2C0(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E01C2CC(uint64_t a1)
{
  sub_18DFE2870(a1, v1);
}

void sub_18E01C2F0(void *a1)
{
  *a1 = &unk_1EDD17478;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E01C320(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E01C32C(uint64_t a1)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  sub_18DEF3CF4(a1, v1);
}

void sub_18E01C37C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDD1E5E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_18E01C39C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDD1E5E0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FA6240);
}

void sub_18E01C3F0(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 352);
  if (v2)
  {
    *(void *)(a1 + 360) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 344);
  if (v3) {
    sub_18DEE4E18(v3);
  }
  *(void *)(a1 + 56) = &unk_1EDD0AE58;
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  *(void *)(a1 + 56) = &unk_1EDD0A9B8;
  if (*(char *)(a1 + 47) < 0)
  {
    int v4 = *(void **)(a1 + 24);
    operator delete(v4);
  }
}

uint64_t sub_18E01C4A4(uint64_t a1)
{
  *(void *)a1 = &unk_1EDD0AE58;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  *(void *)a1 = &unk_1EDD0A9B8;
  return a1;
}

void sub_18E01C510(uint64_t a1)
{
  *(void *)a1 = &unk_1EDD0AE58;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  *(void *)a1 = &unk_1EDD0A9B8;

  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E01C59C(uint64_t a1, double *a2, uint64_t a3, double *a4, double *a5, double *a6)
{
  if (*(unsigned char *)(a1 + 32))
  {
    if (!sub_18DEE4CB8(a2, (double *)(a1 + 40)) && !sub_18DEE4C00(a2, (double *)(a1 + 56)))
    {
      uint64_t v13 = CNTimeSpan::operator-((uint64_t)a2, (void *)(a1 + 72), v11, v12);
      double v15 = v14 + (double)v13;
      if (fabs(v15) <= 2592000.0)
      {
        uint64_t v17 = 0;
        unsigned int v18 = 0;
        unsigned int v19 = 0;
        *a4 = 0.0;
        *a5 = 0.0;
        uint64_t v20 = a1 + 88;
        uint64_t v21 = a1 + 120;
        *a6 = 0.0;
        double v22 = 0.0;
        double v23 = 1.0;
        double v24 = 0.0;
        do
        {
          double v25 = v22;
          double v22 = v23;
          *a4 = *a4 + *(double *)(v20 + v17) * v23;
          *a5 = *a5 + *(double *)(v20 + v17) * (double)v18 * v25;
          *a6 = *a6 + *(double *)(v20 + v17) * (double)(v19 * v18) * v24;
          double v23 = v15 * v23;
          unsigned int v19 = v18++;
          v17 += 8;
          double v24 = v25;
        }
        while (v17 != 32);
        uint64_t v26 = 0;
        unsigned int v27 = 0;
        unsigned int v28 = 0;
        a4[1] = 0.0;
        a5[1] = 0.0;
        uint64_t v29 = a1 + 152;
        double v30 = 0.0;
        a6[1] = 0.0;
        double v31 = 1.0;
        double v32 = 0.0;
        do
        {
          double v33 = v30;
          double v30 = v31;
          a4[1] = a4[1] + *(double *)(v21 + v26) * v31;
          a5[1] = a5[1] + *(double *)(v21 + v26) * (double)v27 * v33;
          a6[1] = a6[1] + *(double *)(v21 + v26) * (double)(v28 * v27) * v32;
          double v31 = v15 * v31;
          unsigned int v28 = v27++;
          v26 += 8;
          double v32 = v33;
        }
        while (v26 != 32);
        uint64_t v34 = 0;
        unsigned int v35 = 0;
        unsigned int v36 = 0;
        a4[2] = 0.0;
        a5[2] = 0.0;
        double v37 = 0.0;
        double v38 = 1.0;
        a6[2] = 0.0;
        double v39 = 0.0;
        do
        {
          double v40 = v37;
          double v37 = v38;
          a4[2] = a4[2] + *(double *)(v29 + v34) * v38;
          a5[2] = a5[2] + *(double *)(v29 + v34) * (double)v35 * v40;
          a6[2] = a6[2] + *(double *)(v29 + v34) * (double)(v36 * v35) * v39;
          double v38 = v15 * v38;
          unsigned int v36 = v35++;
          v34 += 8;
          double v39 = v40;
        }
        while (v34 != 32);
        uint64_t v41 = 0;
        double v42 = 0.0;
        while ((*(void *)&a4[v41] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
        {
          double v42 = v42 + a4[v41] * a4[v41];
          if (++v41 == 3)
          {
            if (sqrt(v42) >= 6341752.3)
            {
              uint64_t v43 = 0;
              while ((*(void *)&a5[v43] & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
              {
                if (++v43 == 3)
                {
                  uint64_t v44 = 0;
                  do
                  {
                    BOOL v45 = (*(void *)&a6[v44] & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
                    BOOL v46 = (*(void *)&a6[v44] & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v44 == 2;
                    ++v44;
                  }
                  while (!v46);
                  return (v45 - 1);
                }
              }
            }
            return 0xFFFFFFFFLL;
          }
        }
      }
    }
  }
  return 0xFFFFFFFFLL;
}

uint64_t sub_18E01C880(uint64_t a1, double *a2, uint64_t a3, double *a4, uint64_t a5, double *a6)
{
  if (!*(unsigned char *)(a1 + 32)) {
    return 0xFFFFFFFFLL;
  }
  if (sub_18DEE4CB8(a2, (double *)(a1 + 40))) {
    return 0xFFFFFFFFLL;
  }
  if (sub_18DEE4C00(a2, (double *)(a1 + 56))) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v12 = CNTimeSpan::operator-((uint64_t)a2, (void *)(a1 + 72), v10, v11);
  double v14 = v13 + (double)v12;
  if (fabs(v14) > 2592000.0) {
    return 0xFFFFFFFFLL;
  }
  unsigned int v15 = 0;
  uint64_t v16 = 0;
  *a4 = 0.0;
  uint64_t v17 = a1 + 184;
  double v18 = 1.0;
  double v19 = 0.0;
  *a6 = 0.0;
  a6[1] = 0.0;
  do
  {
    *a4 = *a4 + *(double *)(v17 + v16) * v18;
    double v20 = *a6 + *(double *)(v17 + v16) * (double)v15 * v19;
    *a6 = v20;
    double v19 = v18;
    double v18 = v14 * v18;
    v16 += 8;
    ++v15;
  }
  while (v16 != 32);
  if ((*(void *)a4 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000) {
    return 0xFFFFFFFFLL;
  }
  if ((*(void *)&v20 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL) {
    return 0;
  }
  return 0xFFFFFFFFLL;
}

uint64_t sub_18E01C994(uint64_t a1, double *a2, uint64_t a3, double *a4, uint64_t a5, double *a6)
{
  if (!*(unsigned char *)(a1 + 32)) {
    return 0xFFFFFFFFLL;
  }
  if (sub_18DEE4CB8(a2, (double *)(a1 + 40))) {
    return 0xFFFFFFFFLL;
  }
  if (sub_18DEE4C00(a2, (double *)(a1 + 56))) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v12 = CNTimeSpan::operator-((uint64_t)a2, (void *)(a1 + 72), v10, v11);
  double v14 = v13 + (double)v12;
  if (fabs(v14) > 2592000.0) {
    return 0xFFFFFFFFLL;
  }
  unsigned int v15 = 0;
  uint64_t v16 = 0;
  unsigned int v17 = 0;
  *a4 = 0.0;
  uint64_t v18 = a1 + 184;
  double v19 = 1.0;
  *a6 = 0.0;
  a6[1] = 0.0;
  double v20 = 0.0;
  double v21 = 0.0;
  do
  {
    *a4 = *a4 + *(double *)(v18 + v16) * (double)v15 * v21;
    double v22 = *a6 + *(double *)(v18 + v16) * (double)(v15 * v17) * v20;
    *a6 = v22;
    v16 += 8;
    double v20 = v21;
    double v21 = v19;
    double v19 = v14 * v19;
    unsigned int v17 = v15++;
  }
  while (v16 != 32);
  if ((*(void *)a4 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000) {
    return 0xFFFFFFFFLL;
  }
  if ((*(void *)&v22 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL) {
    return 0;
  }
  return 0xFFFFFFFFLL;
}

uint64_t raven::VelocityChecker::Configure(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  *(void *)(a1 + 16) = a3;
  uint64_t v4 = *a2;
  uint64_t v5 = *(void *)(*a2 + 920);
  *(void *)(a1 + 24) = *(void *)(*a2 + 2512);
  *(void *)(a1 + 32) = v5;
  *(unsigned char *)(a1 + 40) = raven::GNSSMeasurementSelectionParameters::AllMeasurementsExcluded((raven::GNSSMeasurementSelectionParameters *)(v4 + 592)) ^ 1;
  *(unsigned char *)(a1 + 8) = 1;
  return 0;
}

uint64_t raven::VelocityChecker::HandleEvent(raven::VelocityChecker *this, const raven::VelocityEvent *a2, raven::VelocityEvent *a3)
{
  if (!*((unsigned char *)this + 8))
  {
    LOWORD(v67) = 12;
    v60[0] = 4;
    uint64_t v45 = (*(uint64_t (**)(const raven::VelocityEvent *, const raven::VelocityEvent *, raven::VelocityEvent *))(*(void *)a2 + 16))(a2, a2, a3);
    double v52 = v46 + (double)v45;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v67, v60, "t,%.3lf,VelocityChecker, not configured", v47, v48, v49, v50, v51, SLOBYTE(v52));
    return 0xFFFFFFFFLL;
  }
  unsigned int v4 = *((unsigned __int8 *)a2 + 200);
  BOOL v5 = v4 > 0xD;
  int v6 = (1 << v4) & 0x3808;
  BOOL v7 = v5 || v6 == 0;
  if (!v7
    || (*((void *)a2 + 36) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (*((void *)a2 + 37) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (*((void *)a2 + 38) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
  {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = 0xFFFFFFFFLL;
  if ((*((void *)a2 + 39) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || *((double *)a2 + 39) <= 0.0
    || (*((void *)a2 + 42) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || *((double *)a2 + 42) <= 0.0
    || (*((void *)a2 + 44) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || *((double *)a2 + 44) <= 0.0
    || (*((void *)a2 + 40) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (*((void *)a2 + 41) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (*((void *)a2 + 43) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
  {
    return result;
  }
  double v54 = *((double *)a2 + 37);
  double v55 = *((double *)a2 + 38);
  double v53 = *((double *)a2 + 36);
  uint64_t v69 = 0x300000003;
  long long v68 = xmmword_18E1F0010;
  long long v67 = &unk_1EDD18EE8;
  uint64_t v70 = (double *)&v71;
  if (!sub_18E01D07C((uint64_t)a2, (uint64_t)&v67)
    || sub_18E01D104((uint64_t)&v67) > *((double *)this + 4)
    || (*((unsigned __int8 *)a2 + 200) | 8) == 9 && *((unsigned char *)this + 40))
  {
    return 0xFFFFFFFFLL;
  }
  memcpy((char *)a3 + 8, (char *)a2 + 8, 0x160uLL);
  if (!*((unsigned char *)this + 9)) {
    return 0;
  }
  uint64_t result = (uint64_t)sub_18DFF465C((void *)(*((void *)this + 2) + 16), (unsigned __int8 *)&unk_18E1FD030);
  if (!result) {
    return result;
  }
  if (!*((unsigned char *)sub_18DFF6184((void *)(*((void *)this + 2) + 16), (unsigned __int8 *)&unk_18E1FD030) + 1544)) {
    return 0;
  }
  double v11 = *((double *)sub_18DFF6184((void *)(*((void *)this + 2) + 16), (unsigned __int8 *)&unk_18E1FD030) + 194);
  double v12 = *((double *)sub_18DFF6184((void *)(*((void *)this + 2) + 16), (unsigned __int8 *)&unk_18E1FD030) + 195);
  double v13 = *((double *)sub_18DFF6184((void *)(*((void *)this + 2) + 16), (unsigned __int8 *)&unk_18E1FD030) + 196);
  double v14 = *v70;
  unsigned int v15 = sub_18DFF6184((void *)(*((void *)this + 2) + 16), (unsigned __int8 *)&unk_18E1FD030);
  uint64_t v16 = v70;
  *uint64_t v70 = v14 + *((double *)v15 + 197);
  double v17 = v16[SHIDWORD(v68)];
  uint64_t v18 = sub_18DFF6184((void *)(*((void *)this + 2) + 16), (unsigned __int8 *)&unk_18E1FD030);
  uint64_t v19 = SHIDWORD(v68);
  double v20 = v70;
  v70[SHIDWORD(v68)] = v17 + *((double *)v18 + 198);
  double v21 = v20[2 * v19];
  double v22 = sub_18DFF6184((void *)(*((void *)this + 2) + 16), (unsigned __int8 *)&unk_18E1FD030);
  double v23 = v70;
  v70[2 * SHIDWORD(v68)] = v21 + *((double *)v22 + 199);
  double v24 = v23[1];
  double v25 = sub_18DFF6184((void *)(*((void *)this + 2) + 16), (unsigned __int8 *)&unk_18E1FD030);
  uint64_t v26 = v70;
  v70[1] = v24 + *((double *)v25 + 198);
  double v27 = v26[SHIDWORD(v68) + 1];
  unsigned int v28 = sub_18DFF6184((void *)(*((void *)this + 2) + 16), (unsigned __int8 *)&unk_18E1FD030);
  int v29 = HIDWORD(v68);
  double v30 = v70;
  v70[HIDWORD(v68) + 1] = v27 + *((double *)v28 + 200);
  double v31 = v30[(2 * v29) | 1];
  double v32 = sub_18DFF6184((void *)(*((void *)this + 2) + 16), (unsigned __int8 *)&unk_18E1FD030);
  double v33 = v70;
  v70[2 * SHIDWORD(v68) + 1] = v31 + *((double *)v32 + 201);
  double v34 = v33[2];
  unsigned int v35 = sub_18DFF6184((void *)(*((void *)this + 2) + 16), (unsigned __int8 *)&unk_18E1FD030);
  unsigned int v36 = v70;
  uint64_t v70[2] = v34 + *((double *)v35 + 199);
  double v37 = v36[SHIDWORD(v68) + 2];
  double v38 = sub_18DFF6184((void *)(*((void *)this + 2) + 16), (unsigned __int8 *)&unk_18E1FD030);
  int v39 = HIDWORD(v68);
  double v40 = v70;
  v70[HIDWORD(v68) + 2] = v37 + *((double *)v38 + 201);
  double v41 = v40[2 * v39 + 2];
  double v42 = sub_18DFF6184((void *)(*((void *)this + 2) + 16), (unsigned __int8 *)&unk_18E1FD030);
  v70[2 * SHIDWORD(v68) + 2] = v41 + *((double *)v42 + 202);
  uint64_t v64 = 0x100000003;
  long long v63 = xmmword_18E1F6F60;
  uint64_t v62 = &unk_1EDD18D98;
  __int16 v65 = v66;
  v66[0] = v53 - v11;
  v66[1] = v54 - v12;
  v66[2] = v55 - v13;
  double v61 = INFINITY;
  sub_18E01D280((uint64_t)&v67, &v61, (uint64_t)v60);
  if ((*(void *)&v61 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v61 > *((double *)this + 4)) {
    return 0xFFFFFFFFLL;
  }
  sub_18E01D4D4((uint64_t)&v62, (uint64_t)v56);
  sub_18E01D450((uint64_t)v56, (uint64_t)v60, (uint64_t)v57);
  sub_18E01D3D4((uint64_t)v57, (uint64_t)&v62, (uint64_t)v58);
  BOOL v43 = fabs(sqrt(*v59)) > *((double *)this + 3);
  if (*((unsigned char *)this + 8)) {
    int v44 = v43;
  }
  else {
    int v44 = 1;
  }
  return (v44 << 31 >> 31);
}

uint64_t sub_18E01D07C(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 280)) {
    BOOL v2 = *(_DWORD *)(a2 + 8) == 3;
  }
  else {
    BOOL v2 = 0;
  }
  BOOL v3 = v2 && *(_DWORD *)(a2 + 12) == 3;
  uint64_t v4 = v3;
  if (v3)
  {
    BOOL v5 = *(void **)(a2 + 32);
    void *v5 = *(void *)(a1 + 312);
    uint64_t v6 = *(int *)(a2 + 20);
    v5[v6] = *(void *)(a1 + 320);
    v5[2 * v6] = *(void *)(a1 + 328);
    v5[1] = *(void *)(a1 + 320);
    v5[(int)v6 + 1] = *(void *)(a1 + 336);
    BOOL v7 = &v5[2 * (int)v6];
    v7[1] = *(void *)(a1 + 344);
    uint64_t v5[2] = *(void *)(a1 + 328);
    v5[(int)v6 + 2] = *(void *)(a1 + 344);
    _OWORD v7[2] = *(void *)(a1 + 352);
  }
  return v4;
}

double sub_18E01D104(uint64_t a1)
{
  MEMORY[0x1F4188790](a1);
  uint64_t v25 = 0x300000003;
  long long v24 = xmmword_18E1F0010;
  double v23 = &unk_1EDD18EE8;
  uint64_t v26 = &v27;
  uint64_t v20 = 0x300000003;
  long long v19 = xmmword_18E1F0010;
  uint64_t v18 = &unk_1EDD18EE8;
  double v21 = &v22;
  uint64_t v15 = 0x100000003;
  long long v14 = xmmword_18E1F6F60;
  double v13 = &unk_1EDD18DC8;
  uint64_t v16 = &v17;
  uint64_t v10 = 0x1000001E6;
  uint64_t v8 = &unk_1EDD19218;
  long long v9 = xmmword_18E1FD000;
  double v11 = &v12;
  uint64_t v5 = 0x100000003;
  BOOL v3 = &unk_1EDD18D98;
  long long v4 = xmmword_18E1F6F60;
  uint64_t v6 = &v7;
  return sub_18E01D578(v1, (uint64_t)&v23, (uint64_t)&v18, (uint64_t)&v13, (uint64_t)&v8, (uint64_t)&v3, "2");
}

void sub_18E01D280(uint64_t a1@<X0>, double *a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 24) = 0x300000003;
  *(void *)a3 = &unk_1EDD18EE8;
  *(_OWORD *)(a3 + 8) = xmmword_18E1F0010;
  *(void *)(a3 + 32) = a3 + 40;
  uint64_t v15 = 0x100000003;
  long long v14 = xmmword_18E1F6F60;
  double v13 = &unk_1EDD18DC8;
  uint64_t v16 = &v17;
  uint64_t v10 = 0x100000003;
  long long v9 = xmmword_18E1F6F60;
  uint64_t v8 = &unk_1EDD18DC8;
  double v11 = &v12;
  uint64_t v5 = 0x10000000CLL;
  BOOL v3 = &unk_1EDD17808;
  long long v4 = xmmword_18E1FD010;
  uint64_t v6 = &v7;
  *a2 = sub_18E01D7FC(a1, (uint64_t)&v13, (uint64_t)&v8, (uint64_t)&v3, a3);
}

void sub_18E01D3B4(_Unwind_Exception *a1)
{
  *uint64_t v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

__n128 sub_18E01D3D4@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 24) = 0x100000001;
  *(void *)a3 = &unk_1EDD18048;
  *(void *)&long long v3 = 0x100000001;
  *((void *)&v3 + 1) = 0x100000001;
  *(_OWORD *)(a3 + 8) = v3;
  *(void *)(a3 + 32) = a3 + 40;
  sub_18DFE2B44(a1, a2, a3);
  return result;
}

void sub_18E01D430(_Unwind_Exception *a1)
{
  *uint64_t v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

void sub_18E01D450(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 24) = 0x300000001;
  *(void *)a3 = &unk_1EDD18228;
  *(_OWORD *)(a3 + 8) = xmmword_18E1F8560;
  *(void *)(a3 + 32) = a3 + 40;
  sub_18DFE2B44(a1, a2, a3);
}

void sub_18E01D4B4(_Unwind_Exception *a1)
{
  *uint64_t v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

uint64_t sub_18E01D4D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4 = *(_DWORD *)(a1 + 8);
  int v3 = *(_DWORD *)(a1 + 12);
  *(void *)(a2 + 24) = 0x300000001;
  *(void *)a2 = &unk_1EDD18228;
  *(_DWORD *)(a2 + 8) = v3;
  *(_DWORD *)(a2 + 12) = v4;
  *(_DWORD *)(a2 + 16) = v4 * v3;
  *(_DWORD *)(a2 + 20) = v3;
  *(void *)(a2 + 32) = a2 + 40;
  return sub_18DFE2C64(a1, a2);
}

void sub_18E01D53C(_Unwind_Exception *a1)
{
  *uint64_t v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

void sub_18E01D564()
{
}

double sub_18E01D578(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char *__s1)
{
  double v7 = 0.0;
  if (a1[4])
  {
    unsigned int v15 = a1[2];
    unsigned int v16 = a1[3];
    if (strcmp(__s1, "1") && strcmp(__s1, "2") && strcmp(__s1, "inf") && strcmp(__s1, "fro"))
    {
      __int16 v37 = 4;
      unsigned __int8 v36 = 5;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v37, &v36, "Error using Cond: condition number based on invalid %s-norm was requested.", v17, v18, v19, v20, v21, (char)__s1);
    }
    if (!strcmp(__s1, "2"))
    {
      sub_18DFE3970((uint64_t)a1, a2, a5, a6);
      double v30 = *(double **)(a6 + 32);
      if (v15 >= v16) {
        unsigned int v31 = v16;
      }
      else {
        unsigned int v31 = v15;
      }
      double v32 = v30[v31 - 1];
      if (v32 <= 0.0) {
        return INFINITY;
      }
      else {
        return *v30 / v32;
      }
    }
    else if (v15 == v16)
    {
      sub_18DFE345C((uint64_t)a1, a2, a5, a6, __s1);
      double v28 = v27;
      sub_18E01BFEC((uint64_t)a1, a4, a5, a3);
      sub_18DFE345C(a3, a2, a5, a6, __s1);
      return v28 * v29;
    }
    else
    {
      __int16 v35 = 4;
      unsigned __int8 v34 = 5;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v35, &v34, "Error using Cond: condition numbers for non-square matrices cannot be computed based on the %s-norm.", v22, v23, v24, v25, v26, (char)__s1);
    }
  }
  return v7;
}

void *sub_18E01D748(void *result)
{
  *__n128 result = &unk_1EDD17478;
  return result;
}

void sub_18E01D768(void *a1)
{
  *a1 = &unk_1EDD17478;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E01D798(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E01D7A4(uint64_t a1)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  sub_18DEF3CF4(a1, v1);
}

double sub_18E01D7FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_18DFE2F24(a5, a1);
  uint64_t v15 = *(unsigned int *)(a5 + 8);
  uint64_t v16 = *(unsigned int *)(a5 + 12);
  uint64_t v17 = *(__CLPK_doublereal **)(a5 + 32);
  __CLPK_integer v18 = *(_DWORD *)(a5 + 20);
  uint64_t v19 = *(void **)(a2 + 32);
  __m[0] = v15;
  __n[0] = v16;
  __CLPK_integer __lda = v18;
  if ((int)v15 < 1)
  {
    __CLPK_integer v23 = -1;
LABEL_8:
    LOWORD(__m[0]) = 4;
    LOBYTE(__n[0]) = 5;
    int v57 = -v23;
    uint64_t v24 = "Error using Inv: input argument %d invalid in getrf.";
    goto LABEL_9;
  }
  size_t v20 = 4 * v15;
  uint64_t v21 = (__CLPK_integer *)operator new[](4 * v15, MEMORY[0x1E4FBA2D0]);
  if (!v21)
  {
    __CLPK_integer v23 = -5;
    goto LABEL_8;
  }
  uint64_t v22 = v21;
  __CLPK_integer __info = 0;
  dgetrf_(__m, __n, v17, &__lda, v21, &__info);
  memcpy(v19, v22, v20);
  MEMORY[0x192FA6220](v22, 0x1000C8052888210);
  __CLPK_integer v23 = __info;
  if (!__info) {
    goto LABEL_10;
  }
  if (__info < 1) {
    goto LABEL_8;
  }
  LOWORD(__m[0]) = 4;
  LOBYTE(__n[0]) = 2;
  uint64_t v24 = "Warning: matrix is singular to working precision.";
LABEL_9:
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)__m, (unsigned __int8 *)__n, v24, v10, v11, v12, v13, v14, v57);
LABEL_10:
  if ((int)v16 < 1)
  {
    double v25 = 0.0;
  }
  else
  {
    double v25 = 0.0;
    uint64_t v26 = *(double **)(a1 + 32);
    uint64_t v27 = v16;
    do
    {
      double v28 = *v26++;
      double v25 = v25 + fabs(v28);
      --v27;
    }
    while (v27);
    if ((int)v16 > 1)
    {
      uint64_t v29 = 1;
      __CLPK_integer v30 = v18;
      do
      {
        double v31 = 0.0;
        uint64_t v32 = v30;
        do
          double v31 = v31 + fabs(*(double *)(*(void *)(a1 + 32) + 8 * v32++));
        while (v32 < v16 + v29 * v18);
        if (v31 > v25) {
          double v25 = v31;
        }
        ++v29;
        v30 += v18;
      }
      while (v29 != v16);
    }
  }
  *(double *)__CLPK_integer __n = 0.0;
  double v33 = *(__CLPK_doublereal **)(a4 + 32);
  unsigned __int8 v34 = *(void **)(a3 + 32);
  __norint m = 49;
  *(double *)__CLPK_integer __m = v25;
  __CLPK_integer __info = v18;
  __CLPK_integer __lda = v16;
  if ((int)v16 < 1)
  {
    char v38 = -2;
  }
  else
  {
    size_t v35 = 4 * v16;
    unsigned __int8 v36 = (__CLPK_integer *)operator new[](4 * v16, MEMORY[0x1E4FBA2D0]);
    if (v36)
    {
      __int16 v37 = v36;
      __CLPK_integer v61 = 0;
      dgecon_(&__norm, &__lda, v17, &__info, (__CLPK_doublereal *)__m, (__CLPK_doublereal *)__n, v33, v36, &v61);
      memcpy(v34, v37, 4 * v16);
      MEMORY[0x192FA6220](v37, 0x1000C8052888210);
      char v38 = v61;
      if ((v61 & 0x80000000) == 0)
      {
        __CLPK_integer v39 = *(_DWORD *)(a4 + 28) * *(_DWORD *)(a4 + 24);
        __m[0] = v16;
        __CLPK_integer __lda = v18;
        goto LABEL_30;
      }
    }
    else
    {
      char v38 = -8;
    }
  }
  LOWORD(__m[0]) = 4;
  LOBYTE(__lda) = 5;
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)__m, (unsigned __int8 *)&__lda, "Error using Inv: input argument %d invalid in gecon.", v10, v11, v12, v13, v14, -v38);
  __CLPK_integer v39 = *(_DWORD *)(a4 + 28) * *(_DWORD *)(a4 + 24);
  __m[0] = v16;
  __CLPK_integer __lda = v18;
  if ((int)v16 < 1)
  {
    __CLPK_integer v48 = -1;
LABEL_35:
    LOWORD(__m[0]) = 4;
    LOBYTE(__lda) = 5;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)__m, (unsigned __int8 *)&__lda, "Error using Inv: input argument %d invalid in getri.", v40, v41, v42, v43, v44, -(char)v48);
    goto LABEL_36;
  }
  size_t v35 = 4 * v16;
LABEL_30:
  uint64_t v45 = (__CLPK_integer *)operator new[](v35, MEMORY[0x1E4FBA2D0]);
  if (!v45)
  {
    __CLPK_integer v48 = -4;
    goto LABEL_35;
  }
  double v46 = v45;
  memcpy(v45, v19, v35);
  __CLPK_integer v61 = 0;
  __CLPK_integer __info = v39;
  dgetri_(__m, v17, &__lda, v46, v33, &__info, &v61);
  uint64_t v47 = (cnprint::CNPrinter *)MEMORY[0x192FA6220](v46, 0x1000C8052888210);
  __CLPK_integer v48 = v61;
  if (v61 < 0) {
    goto LABEL_35;
  }
LABEL_36:
  int v49 = (int)**(double **)(a4 + 32);
  if (v39 < v49 && cnprint::CNPrinter::GetLogLevel(v47) <= 1)
  {
    LOWORD(__m[0]) = 4;
    LOBYTE(__lda) = 1;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)__m, (unsigned __int8 *)&__lda, "Warning: Inv optimal workspace size %d is greater than provided workspace size %d; performance may suffer.",
      v50,
      v51,
      v52,
      v53,
      v54,
      v49);
  }
  double v55 = *(double *)__n;
  if (v48 >= 1) {
    sub_18DFE2CC8(a5, INFINITY);
  }
  return 1.0 / v55;
}

void *sub_18E01DBF4(void *result)
{
  *__n128 result = &unk_1EDD17478;
  return result;
}

void sub_18E01DC14(void *a1)
{
  *a1 = &unk_1EDD17478;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E01DC44(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E01DC50(uint64_t a1)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  sub_18DEF3CF4(a1, v1);
}

double raven::RavenEstimator::RavenEstimator(uint64_t a1, char a2)
{
  *(void *)a1 = &unk_1EDD13910;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(unsigned char *)(a1 + 56) = a2;
  *(_WORD *)(a1 + 57) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 128) = &unk_1EDD13820;
  *(unsigned char *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  *(unsigned char *)(a1 + 176) = 0;
  *(unsigned char *)(a1 + 200) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = 0x7FF8000000000000;
  *(unsigned char *)(a1 + 232) = 0;
  *(void *)(a1 + 284) = 0;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 256) = 0;
  *(unsigned char *)(a1 + 280) = 0;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 312) = 0;
  *(void *)(a1 + 320) = 0x7FF8000000000000;
  *(unsigned char *)(a1 + 1408) = 0;
  *(unsigned char *)(a1 + 1624) = 0;
  *(unsigned char *)(a1 + 1776) = 0;
  *(unsigned char *)(a1 + 1928) = 0;
  *(unsigned char *)(a1 + 2064) = 0;
  *(unsigned char *)(a1 + 2216) = 0;
  *(void *)(a1 + 2352) = 0;
  *(void *)(a1 + 2360) = 0;
  *(_OWORD *)(a1 + 1193) = 0u;
  *(_OWORD *)(a1 + 1184) = 0u;
  *(_OWORD *)(a1 + 1168) = 0u;
  *(_OWORD *)(a1 + 1152) = 0u;
  *(_OWORD *)(a1 + 1136) = 0u;
  *(_OWORD *)(a1 + 1120) = 0u;
  *(void *)(a1 + 2344) = a1 + 2352;
  *(unsigned char *)(a1 + 2368) = 0;
  *(_OWORD *)(a1 + 2488) = 0u;
  *(_OWORD *)(a1 + 2504) = 0u;
  *(_OWORD *)(a1 + 2520) = 0u;
  return result;
}

uint64_t raven::RavenEstimator::GetValidHistoricalSolution(uint64_t a1, void *a2, uint64_t a3, double a4, int8x16_t a5)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)(a1 + 57) || !*(unsigned char *)(a1 + 58) || !*(void *)(a1 + 48)) {
    return 0xFFFFFFFFLL;
  }
  __dst[0] = *(_OWORD *)(a1 + 80);
  v8.i64[1] = *((void *)&__dst[0] + 1);
  v8.i64[0] = *(void *)(*(void *)(a1 + 1168) + 1416);
  v21[0] = 0;
  v21[1] = 0;
  CNTimeSpan::SetTimeSpan(v21, 0, v8, a5);
  uint64_t v11 = CNTimeSpan::operator-((uint64_t)__dst, v21, v9, v10);
  double v13 = v12;
  double v14 = v12;
  uint64_t v15 = *(void *)(*(void *)(a1 + 16) + ((*(void *)(a1 + 40) >> 1) & 0x7FFFFFFFFFFFFFF8))
      + 1928 * (*(void *)(a1 + 40) & 0xFLL);
  uint64_t v16 = *(void *)(v15 + 1064);
  double v17 = *(double *)(v15 + 1072);
  memcpy(__dst, (const void *)(v15 + 1080), sizeof(__dst));
  if (v16) {
    BOOL v18 = 1;
  }
  else {
    BOOL v18 = (*(void *)&v17 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
  }
  if (!v18
    || !v11 && (*(void *)&v13 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000
    || (BOOL v19 = v16 <= v11, v16 == v11))
  {
    BOOL v19 = v17 <= v14;
  }
  if (!v19) {
    return 0xFFFFFFFFLL;
  }
  memmove(a2, (const void *)v15, 0x428uLL);
  *(void *)a3 = v16;
  *(double *)(a3 + 8) = v17;
  memcpy((void *)(a3 + 16), __dst, 0x350uLL);
  return 0;
}

uint64_t raven::RavenEstimator::IsConfigured(raven::RavenEstimator *this)
{
  return *((unsigned __int8 *)this + 57);
}

uint64_t raven::RavenEstimator::IsInitialized(raven::RavenEstimator *this)
{
  return *((unsigned __int8 *)this + 58);
}

uint64_t raven::RavenEstimator::GetCurrentEstimatorTime(raven::RavenEstimator *this)
{
  return *((void *)this + 10);
}

BOOL raven::RavenEstimator::ShouldInflatePositionStateUncertaintyForVL(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double *a6)
{
  *a6 = 1.0;
  unsigned int v7 = *(_DWORD *)(a2 + 8);
  unsigned int v8 = *(_DWORD *)(a2 + 12);
  if (v7 <= v8) {
    int v9 = *(_DWORD *)(a2 + 12);
  }
  else {
    int v9 = *(_DWORD *)(a2 + 8);
  }
  if (v7) {
    BOOL v10 = v8 == 0;
  }
  else {
    BOOL v10 = 1;
  }
  BOOL v11 = !v10 && v9 == 3;
  if (!v11
    || ((unsigned int v12 = *(_DWORD *)(a4 + 8), v13 = *(_DWORD *)(a4 + 12), v12 <= v13)
      ? (int v14 = *(_DWORD *)(a4 + 12))
      : (int v14 = *(_DWORD *)(a4 + 8)),
        v12 ? (BOOL v15 = v13 == 0) : (BOOL v15 = 1),
        !v15 ? (BOOL v16 = v14 == 3) : (BOOL v16 = 0),
        !v16))
  {
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)a1) <= 1)
    {
      LOWORD(v64) = 12;
      LOBYTE(v54) = 1;
      unsigned __int8 v17 = cnprint::CNLogFormatter::FormatWarning((cnprint::CNLogFormatter *)(a1 + 2488), "ShouldInflatePositionStateUncertaintyForVL, Wrong position vector dimension");
LABEL_24:
      if (a1[2511] >= 0) {
        LOBYTE(v23) = v17;
      }
      else {
        uint64_t v23 = *((void *)a1 + 311);
      }
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v64, (unsigned __int8 *)&v54, "%s", v18, v19, v20, v21, v22, v23);
      return 0;
    }
    return 0;
  }
  v27.i64[0] = *(void *)(a3 + 8);
  v27.i64[1] = *(void *)(a5 + 8);
  v28.i64[0] = 0x300000003;
  v28.i64[1] = 0x300000003;
  if (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(v27, v28)))))
  {
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)a1) <= 1)
    {
      LOWORD(v64) = 12;
      LOBYTE(v54) = 1;
      unsigned __int8 v17 = cnprint::CNLogFormatter::FormatWarning((cnprint::CNLogFormatter *)(a1 + 2488), "ShouldInflatePositionStateUncertaintyForVL, Wrong position covariance matrix dimensions");
      goto LABEL_24;
    }
    return 0;
  }
  uint64_t v61 = 0x100000003;
  long long v60 = xmmword_18E1F6F60;
  long long v59 = &unk_1EDD18D98;
  uint64_t v62 = &v63;
  sub_18DFE2AA8(a2, a4, (uint64_t)&v59);
  uint64_t v56 = 0x300000003;
  long long v55 = xmmword_18E1F0010;
  uint64_t v54 = &unk_1EDD18EE8;
  int v57 = &v58;
  sub_18DFEF1F4(a3, a5, (uint64_t)&v54);
  int v30 = DWORD1(v60);
  int v31 = v60;
  uint64_t v51 = 0x300000001;
  double v46 = &unk_1EDD18228;
  uint64_t v52 = v53;
  int v47 = DWORD1(v60);
  int v48 = v60;
  int v49 = v60 * DWORD1(v60);
  int v50 = DWORD1(v60);
  if (DWORD1(v60))
  {
    int v32 = 0;
    int v33 = 0;
    int v34 = HIDWORD(v60);
    size_t v35 = v62;
    do
    {
      int v36 = v32;
      int v37 = v33;
      for (int i = v31; i; --i)
      {
        v53[v37] = v35[v36];
        v37 += v30;
        ++v36;
      }
      ++v33;
      v32 += v34;
    }
    while (v33 != v30);
  }
  uint64_t v43 = 0x300000003;
  uint64_t v41 = &unk_1EDD18EE8;
  long long v42 = xmmword_18E1F0010;
  uint64_t v44 = &v45;
  uint64_t v71 = 0x100000003;
  long long v70 = xmmword_18E1F6F60;
  uint64_t v69 = &unk_1EDD18DC8;
  __int16 v72 = (double *)v73;
  uint64_t v66 = 0x10000000CLL;
  long long v65 = xmmword_18E1FD010;
  uint64_t v64 = &unk_1EDD17808;
  long long v67 = v68;
  sub_18E01BFEC((uint64_t)&v54, (uint64_t)&v69, (uint64_t)&v64, (uint64_t)&v41);
  uint64_t v66 = 0x300000001;
  long long v65 = xmmword_18E1F8560;
  uint64_t v64 = &unk_1EDD18228;
  long long v67 = v68;
  sub_18DFE2B44((uint64_t)&v46, (uint64_t)&v41, (uint64_t)&v64);
  uint64_t v71 = 0x100000001;
  *(void *)&long long v39 = 0x100000001;
  *((void *)&v39 + 1) = 0x100000001;
  long long v70 = v39;
  uint64_t v69 = &unk_1EDD18048;
  __int16 v72 = (double *)v73;
  sub_18DFE2B44((uint64_t)&v64, (uint64_t)&v59, (uint64_t)&v69);
  double v40 = *v72 / 3.0;
  BOOL result = v40 > 2.6;
  if (v40 > 2.6) {
    *a6 = sqrt(v40);
  }
  return result;
}

double sub_18E01E318@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 24) = 0x100000003;
  *(void *)a3 = &unk_1EDD18D98;
  *(_OWORD *)(a3 + 8) = xmmword_18E1F6F60;
  *(void *)(a3 + 32) = a3 + 40;
  *(void *)&double result = *(_OWORD *)&sub_18DFE2AA8(a1, a2, a3);
  return result;
}

void sub_18E01E37C(_Unwind_Exception *a1)
{
  *uint64_t v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

double sub_18E01E39C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 24) = 0x300000003;
  *(void *)a3 = &unk_1EDD18EE8;
  *(_OWORD *)(a3 + 8) = xmmword_18E1F0010;
  *(void *)(a3 + 32) = a3 + 40;
  *(void *)&double result = *(_OWORD *)&sub_18DFEF1F4(a1, a2, a3);
  return result;
}

void sub_18E01E3DC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 24) = 0x300000003;
  *(void *)a2 = &unk_1EDD18EE8;
  *(_OWORD *)(a2 + 8) = xmmword_18E1F0010;
  *(void *)(a2 + 32) = a2 + 40;
  uint64_t v9 = 0x100000003;
  unsigned int v7 = &unk_1EDD18DC8;
  long long v8 = xmmword_18E1F6F60;
  BOOL v10 = &v11;
  uint64_t v4 = 0x10000000CLL;
  uint64_t v2 = &unk_1EDD17808;
  long long v3 = xmmword_18E1FD010;
  uint64_t v5 = &v6;
  sub_18E01BFEC(a1, (uint64_t)&v7, (uint64_t)&v2, a2);
}

void sub_18E01E4CC(_Unwind_Exception *a1)
{
  *uint64_t v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

uint64_t raven::RavenEstimator::StoreHistoricalSolution(raven::RavenEstimator *this)
{
  uint64_t result = MEMORY[0x1F4188790](this);
  __dst[106] = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)(result + 57)) {
    return result;
  }
  uint64_t v2 = result;
  if (!*(unsigned char *)(result + 58)) {
    return result;
  }
  (*(void (**)(double *__return_ptr, uint64_t))(*(void *)result + 40))(v135, result);
  uint64_t result = (uint64_t)(*(void *(**)(void *__return_ptr, uint64_t))(*(void *)v2 + 48))(v134, v2);
  BOOL v3 = BYTE1(v134[13]) != 2 || LOBYTE(v134[13]) == 0;
  if (v3) {
    return result;
  }
  uint64_t v4 = (void *)(v2 + 8);
  uint64_t v5 = *(void *)(v2 + 48);
  if (!v5)
  {
    uint64_t v23 = 0;
    goto LABEL_75;
  }
  uint64_t result = sub_18DEE4CB8(v135, (double *)(*(void *)(*(void *)(v2 + 16)+ (((unint64_t)(v5 + *(void *)(v2 + 40) - 1) >> 1) & 0x7FFFFFFFFFFFFFF8))+ 1928 * ((v5 + *(_DWORD *)(v2 + 40) - 1) & 0xF)+ 1064));
  if (result) {
    return result;
  }
  v131[0] = *(_OWORD *)(v2 + 80);
  v7.i64[1] = *((void *)&v131[0] + 1);
  v7.i64[0] = *(void *)(*(void *)(v2 + 1168) + 1416);
  __dst[1] = 0;
  __dst[0] = 0;
  CNTimeSpan::SetTimeSpan(__dst, 0, v7, v6);
  uint64_t v132 = CNTimeSpan::operator-((uint64_t)v131, __dst, v8, v9);
  double v133 = v10;
  uint64_t v11 = (double *)(*(void *)(*(void *)(v2 + 16) + ((*(void *)(v2 + 40) >> 1) & 0x7FFFFFFFFFFFFFF8))
                 + 1928 * (*(void *)(v2 + 40) & 0xFLL));
  memcpy(v131, v11, 0x428uLL);
  unsigned int v12 = v11 + 133;
  unsigned int v13 = v11 + 134;
  for (int i = v11 + 135; ; int i = v12 + 2)
  {
    double v15 = *v12;
    double v16 = *v13;
    memcpy(__dst, i, 0x350uLL);
    BOOL v17 = v15 != 0.0 || (*(void *)&v16 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
    if (!v17)
    {
LABEL_18:
      double v18 = v133;
LABEL_19:
      if (v16 > v18) {
        goto LABEL_28;
      }
      goto LABEL_22;
    }
    if (!v132)
    {
      double v18 = v133;
      if ((*(void *)&v133 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000) {
        goto LABEL_19;
      }
    }
    if (*(void *)&v15 == v132) {
      goto LABEL_18;
    }
    if (*(uint64_t *)&v15 >= v132)
    {
LABEL_28:
      uint64_t v23 = *(void *)(v2 + 48);
      goto LABEL_75;
    }
LABEL_22:
    uint64_t v19 = *(void *)(v2 + 48) - 1;
    unint64_t v20 = *(void *)(v2 + 40) + 1;
    *(void *)(v2 + 40) = v20;
    *(void *)(v2 + 48) = v19;
    if (v20 >= 0x20)
    {
      operator delete(**(void ***)(v2 + 16));
      *(void *)(v2 + 16) += 8;
      uint64_t v19 = *(void *)(v2 + 48);
      unint64_t v20 = *(void *)(v2 + 40) - 16;
      *(void *)(v2 + 40) = v20;
    }
    if (!v19) {
      goto LABEL_30;
    }
    uint64_t v21 = *(void *)(*(void *)(v2 + 16) + ((v20 >> 1) & 0x7FFFFFFFFFFFFFF8));
    unsigned int v22 = v20 & 0xF;
    unsigned int v12 = (double *)(v21 + 1928 * (v20 & 0xF) + 1064);
    if (sub_18DEE4C00(v12, (double *)&v132)) {
      break;
    }
    memcpy(v131, (const void *)(v21 + 1928 * v22), 0x428uLL);
    unsigned int v13 = v12 + 1;
  }
  unint64_t v20 = *(void *)(v2 + 40);
LABEL_30:
  uint64_t v24 = *(void *)(v2 + 16);
  if (!v20)
  {
    uint64_t v25 = *(void *)(v2 + 24);
    uint64_t v26 = 2 * (v25 - v24) - 1;
    if (v25 == v24) {
      uint64_t v26 = 0;
    }
    if ((unint64_t)(v26 - *(void *)(v2 + 48)) < 0x10)
    {
      uint64_t v27 = *(void *)(v2 + 32);
      uint64_t v28 = *(void *)(v2 + 8);
      if (v25 - v24 >= (unint64_t)(v27 - v28))
      {
        if (v27 == v28) {
          unint64_t v29 = 1;
        }
        else {
          unint64_t v29 = (v27 - v28) >> 2;
        }
        uint64_t v141 = v2 + 32;
        __int16 v139 = (char *)sub_18DEE2FBC(v29);
        char v137 = v139;
        __src = v139;
        std::string::size_type v140 = &v139[8 * v30];
        char v136 = operator new(0x7880uLL);
        sub_18E021864(&v137, &v136);
        int v32 = *(uint64_t **)(v2 + 16);
        int v31 = *(uint64_t **)(v2 + 24);
        int v33 = v139;
        while (v32 != v31)
        {
          if (v33 == v140)
          {
            int v34 = (char *)__src;
            size_t v35 = v137;
            if (__src <= v137)
            {
              if (v33 == (char *)v137) {
                unint64_t v41 = 1;
              }
              else {
                unint64_t v41 = (v33 - (char *)v137) >> 2;
              }
              long long v42 = (char *)sub_18DEE2FBC(v41);
              uint64_t v44 = v33 - v34;
              BOOL v3 = v33 == v34;
              int v33 = &v42[8 * (v41 >> 2)];
              if (!v3)
              {
                int v33 = &v42[8 * (v41 >> 2) + (v44 & 0xFFFFFFFFFFFFFFF8)];
                uint64_t v45 = 8 * (v44 >> 3);
                double v46 = &v42[8 * (v41 >> 2)];
                do
                {
                  uint64_t v47 = *(void *)v34;
                  v34 += 8;
                  *(void *)double v46 = v47;
                  v46 += 8;
                  v45 -= 8;
                }
                while (v45);
              }
              char v137 = v42;
              __src = &v42[8 * (v41 >> 2)];
              __int16 v139 = v33;
              std::string::size_type v140 = &v42[8 * v43];
              if (v35) {
                operator delete(v35);
              }
            }
            else
            {
              uint64_t v36 = ((unsigned char *)__src - (unsigned char *)v137) >> 3;
              if (v36 >= -1) {
                uint64_t v37 = v36 + 1;
              }
              else {
                uint64_t v37 = v36 + 2;
              }
              char v38 = (char *)__src - 8 * (v37 >> 1);
              int64_t v39 = v33 - (unsigned char *)__src;
              if (v33 != __src)
              {
                memmove((char *)__src - 8 * (v37 >> 1), __src, v33 - (unsigned char *)__src);
                int v33 = v34;
              }
              double v40 = &v33[-8 * (v37 >> 1)];
              int v33 = &v38[v39];
              __int16 v139 = &v38[v39];
              __src = v40;
            }
          }
          uint64_t v48 = *v32++;
          *(void *)int v33 = v48;
          int v33 = v139 + 8;
          v139 += 8;
          int v31 = *(uint64_t **)(v2 + 24);
        }
        int v49 = *(void **)(v2 + 8);
        int v50 = __src;
        *(void *)(v2 + 8) = v137;
        *(void *)(v2 + 16) = v50;
        uint64_t v51 = v140;
        *(void *)(v2 + 24) = v33;
        *(void *)(v2 + 32) = v51;
        uint64_t v52 = v33 - v50;
        if (v33 - v50 != 8) {
          uint64_t v52 = *(void *)(v2 + 40) + 16;
        }
        *(void *)(v2 + 40) = v52;
        if (v49) {
          operator delete(v49);
        }
      }
      else
      {
        if (v24 == v28)
        {
          char v137 = operator new(0x7880uLL);
          sub_18E021864((void *)(v2 + 8), &v137);
          uint64_t v53 = *(void *)(v2 + 24);
          char v137 = *(void **)(v53 - 8);
          *(void *)(v2 + 24) = v53 - 8;
        }
        else
        {
          char v137 = operator new(0x7880uLL);
        }
        sub_18E02174C(v2 + 8, &v137);
        uint64_t v54 = *(void *)(v2 + 24) - *(void *)(v2 + 16);
        if (v54 != 8) {
          uint64_t v54 = *(void *)(v2 + 40) + 16;
        }
        *(void *)(v2 + 40) = v54;
      }
    }
    else
    {
      *(void *)(v2 + 40) = 16;
      char v137 = *(void **)(v25 - 8);
      *(void *)(v2 + 24) = v25 - 8;
      sub_18E02174C(v2 + 8, &v137);
    }
    unint64_t v20 = *(void *)(v2 + 40);
    uint64_t v24 = *(void *)(v2 + 16);
  }
  long long v55 = (void *)(v24 + 8 * (v20 >> 4));
  uint64_t v56 = *v55 + 1928 * (v20 & 0xF);
  if (*(void *)(v2 + 24) == v24) {
    uint64_t v57 = 0;
  }
  else {
    uint64_t v57 = v56;
  }
  if (v57 == *v55) {
    uint64_t v57 = *(v55 - 1) + 30848;
  }
  memcpy((void *)(v57 - 1928), v131, 0x428uLL);
  *(double *)(v57 - 864) = v15;
  *(double *)(v57 - 856) = v16;
  memcpy((void *)(v57 - 848), __dst, 0x350uLL);
  uint64_t v23 = *(void *)(v2 + 48) + 1;
  --*(void *)(v2 + 40);
  *(void *)(v2 + 48) = v23;
LABEL_75:
  memcpy(v131, v134, 0x428uLL);
  memcpy((char *)&v131[66] + 8, v135, 0x360uLL);
  uint64_t v58 = *(char **)(v2 + 24);
  long long v59 = *(char **)(v2 + 16);
  if (v58 == v59) {
    uint64_t v60 = 0;
  }
  else {
    uint64_t v60 = 2 * (v58 - v59) - 1;
  }
  unint64_t v61 = *(void *)(v2 + 40);
  unint64_t v62 = v23 + v61;
  if (v60 == v23 + v61)
  {
    if (v61 >= 0x10)
    {
      *(void *)(v2 + 40) = v61 - 16;
      uint64_t v65 = *(void *)v59;
      uint64_t v63 = v59 + 8;
      uint64_t v64 = v65;
      *(void *)(v2 + 16) = v63;
      if (v58 == *(char **)(v2 + 32))
      {
        uint64_t v66 = (uint64_t)&v63[-*v4];
        if ((unint64_t)v63 > *v4)
        {
          uint64_t v67 = v66 >> 3;
          BOOL v17 = v66 >> 3 < -1;
          uint64_t v68 = (v66 >> 3) + 2;
          if (v17) {
            uint64_t v69 = v68;
          }
          else {
            uint64_t v69 = v67 + 1;
          }
          uint64_t v70 = -(v69 >> 1);
          uint64_t v71 = v69 >> 1;
          __int16 v72 = &v63[-8 * v71];
          int64_t v73 = v58 - v63;
          if (v58 != v63)
          {
            memmove(&v63[-8 * v71], v63, v58 - v63);
            uint64_t v58 = *(char **)(v2 + 16);
          }
          long long v74 = &v58[8 * v70];
          uint64_t v58 = &v72[v73];
          goto LABEL_88;
        }
        if (v58 == (char *)*v4) {
          unint64_t v101 = 1;
        }
        else {
          unint64_t v101 = (uint64_t)&v58[-*v4] >> 2;
        }
        uint64_t v102 = (char *)sub_18DEE2FBC(v101);
        uint64_t v103 = &v102[8 * (v101 >> 2)];
        uint64_t v105 = &v102[8 * v104];
        uint64_t v106 = *(uint64_t **)(v2 + 16);
        uint64_t v58 = v103;
        uint64_t v107 = *(void *)(v2 + 24) - (void)v106;
        if (v107)
        {
          uint64_t v58 = &v103[v107 & 0xFFFFFFFFFFFFFFF8];
          uint64_t v108 = 8 * (v107 >> 3);
          long long v109 = &v102[8 * (v101 >> 2)];
          do
          {
            uint64_t v110 = *v106++;
            *(void *)long long v109 = v110;
            v109 += 8;
            v108 -= 8;
          }
          while (v108);
        }
LABEL_121:
        uint64_t v111 = *(void **)(v2 + 8);
        *(void *)(v2 + 8) = v102;
        *(void *)(v2 + 16) = v103;
        *(void *)(v2 + 24) = v58;
        *(void *)(v2 + 32) = v105;
        if (v111)
        {
          operator delete(v111);
          uint64_t v58 = *(char **)(v2 + 24);
        }
      }
      goto LABEL_124;
    }
    unint64_t v75 = (v58 - v59) >> 3;
    uint64_t v76 = *(char **)(v2 + 32);
    uint64_t v77 = *(char **)(v2 + 8);
    if (v75 >= (v76 - v77) >> 3)
    {
      if (v76 == v77) {
        unint64_t v78 = 1;
      }
      else {
        unint64_t v78 = (v76 - v77) >> 2;
      }
      __dst[4] = v2 + 32;
      uint64_t v79 = sub_18DEE2FBC(v78);
      __dst[2] = (uint64_t)v79 + 8 * v75;
      __dst[0] = (uint64_t)v79;
      __dst[1] = __dst[2];
      __dst[3] = (uint64_t)v79 + 8 * v80;
      char v137 = operator new(0x7880uLL);
      sub_18E021864(__dst, &v137);
      unsigned __int8 v81 = (uint64_t *)__dst[1];
      uint64_t v82 = __dst[0];
      unint64_t v83 = __dst[2];
      unint64_t v84 = __dst[3];
      uint64_t v85 = *(void *)(v2 + 24);
      if (v85 == *(void *)(v2 + 16))
      {
        uint64_t v100 = __dst[1];
      }
      else
      {
        do
        {
          if (v81 == (uint64_t *)v82)
          {
            if (v83 >= v84)
            {
              if ((uint64_t *)v84 == v81) {
                unint64_t v91 = 1;
              }
              else {
                unint64_t v91 = (uint64_t)(v84 - (void)v81) >> 2;
              }
              uint64_t v92 = (char *)sub_18DEE2FBC(v91);
              uint64_t v82 = (uint64_t)v92;
              double v86 = &v92[(2 * v91 + 6) & 0xFFFFFFFFFFFFFFF8];
              uint64_t v94 = v83 - (void)v81;
              BOOL v3 = v83 == (void)v81;
              unint64_t v83 = (unint64_t)v86;
              if (!v3)
              {
                unint64_t v83 = (unint64_t)&v86[v94 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v95 = 8 * (v94 >> 3);
                BOOL v96 = v86;
                uint64_t v97 = v81;
                do
                {
                  uint64_t v98 = *v97++;
                  *(void *)BOOL v96 = v98;
                  v96 += 8;
                  v95 -= 8;
                }
                while (v95);
              }
              unint64_t v84 = (unint64_t)&v92[8 * v93];
              if (v81) {
                operator delete(v81);
              }
            }
            else
            {
              uint64_t v87 = (uint64_t)(v84 - v83) >> 3;
              if (v87 >= -1) {
                uint64_t v88 = v87 + 1;
              }
              else {
                uint64_t v88 = v87 + 2;
              }
              uint64_t v89 = v88 >> 1;
              double v86 = (char *)&v81[v88 >> 1];
              uint64_t v90 = v81;
              if ((uint64_t *)v83 != v81)
              {
                memmove(v86, v81, v83 - (void)v81);
                uint64_t v90 = (void *)v83;
              }
              unint64_t v83 = (unint64_t)&v90[v89];
              uint64_t v82 = (uint64_t)v81;
            }
          }
          else
          {
            double v86 = (char *)v81;
          }
          uint64_t v99 = *(void *)(v85 - 8);
          v85 -= 8;
          *((void *)v86 - 1) = v99;
          uint64_t v100 = (uint64_t)(v86 - 8);
          unsigned __int8 v81 = (uint64_t *)v100;
        }
        while (v85 != *(void *)(v2 + 16));
      }
      uint64_t v115 = *(void **)(v2 + 8);
      *(void *)(v2 + 8) = v82;
      *(void *)(v2 + 16) = v100;
      *(void *)(v2 + 24) = v83;
      *(void *)(v2 + 32) = v84;
      if (v115) {
        operator delete(v115);
      }
    }
    else if (v76 == v58)
    {
      __dst[0] = (uint64_t)operator new(0x7880uLL);
      sub_18E02174C(v2 + 8, __dst);
      uint64_t v112 = *(void **)(v2 + 16);
      uint64_t v58 = *(char **)(v2 + 24);
      uint64_t v114 = *v112;
      uint64_t v113 = (char *)(v112 + 1);
      uint64_t v64 = v114;
      *(void *)(v2 + 16) = v113;
      if (v58 == *(char **)(v2 + 32))
      {
        uint64_t v116 = (uint64_t)&v113[-*v4];
        if ((unint64_t)v113 <= *v4)
        {
          if (v58 == (char *)*v4) {
            unint64_t v124 = 1;
          }
          else {
            unint64_t v124 = (uint64_t)&v58[-*v4] >> 2;
          }
          uint64_t v102 = (char *)sub_18DEE2FBC(v124);
          uint64_t v103 = &v102[8 * (v124 >> 2)];
          uint64_t v105 = &v102[8 * v125];
          __int16 v126 = *(uint64_t **)(v2 + 16);
          uint64_t v58 = v103;
          uint64_t v127 = *(void *)(v2 + 24) - (void)v126;
          if (v127)
          {
            uint64_t v58 = &v103[v127 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v128 = 8 * (v127 >> 3);
            long long v129 = &v102[8 * (v124 >> 2)];
            do
            {
              uint64_t v130 = *v126++;
              *(void *)long long v129 = v130;
              v129 += 8;
              v128 -= 8;
            }
            while (v128);
          }
          goto LABEL_121;
        }
        uint64_t v117 = v116 >> 3;
        BOOL v17 = v116 >> 3 < -1;
        uint64_t v118 = (v116 >> 3) + 2;
        if (v17) {
          uint64_t v119 = v118;
        }
        else {
          uint64_t v119 = v117 + 1;
        }
        uint64_t v120 = -(v119 >> 1);
        uint64_t v121 = v119 >> 1;
        char v122 = &v113[-8 * v121];
        int64_t v123 = v58 - v113;
        if (v58 != v113)
        {
          memmove(&v113[-8 * v121], v113, v58 - v113);
          uint64_t v113 = *(char **)(v2 + 16);
        }
        uint64_t v58 = &v122[v123];
        long long v74 = &v113[8 * v120];
LABEL_88:
        *(void *)(v2 + 16) = v74;
        *(void *)(v2 + 24) = v58;
      }
LABEL_124:
      *(void *)uint64_t v58 = v64;
      *(void *)(v2 + 24) += 8;
    }
    else
    {
      __dst[0] = (uint64_t)operator new(0x7880uLL);
      sub_18E021864((void *)(v2 + 8), __dst);
    }
    long long v59 = *(char **)(v2 + 16);
    unint64_t v62 = *(void *)(v2 + 48) + *(void *)(v2 + 40);
  }
  uint64_t result = (uint64_t)memcpy((void *)(*(void *)&v59[(v62 >> 1) & 0x7FFFFFFFFFFFFFF8] + 1928 * (v62 & 0xF)), v131, 0x788uLL);
  ++*(void *)(v2 + 48);
  return result;
}

void sub_18E01EEA8(_Unwind_Exception *a1)
{
  operator delete(v1);
  if (STACK[0xF30]) {
    operator delete((void *)STACK[0xF30]);
  }
  _Unwind_Resume(a1);
}

uint64_t raven::RavenEstimator::Configure(uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 57))
  {
    puts("Warning: RavenEstimator::Configure() called more than once.");
    return 0xFFFFFFFFLL;
  }
  else
  {
    uint64_t result = 0;
    *(void *)(a1 + 1168) = *a2;
    *(unsigned char *)(a1 + 57) = 1;
  }
  return result;
}

uint64_t raven::RavenEstimator::GetActiveTime(raven::RavenEstimator *this, int8x16_t a2, int8x16_t a3)
{
  return CNTimeSpan::operator-((uint64_t)this + 80, (void *)this + 8, a2, a3);
}

uint64_t raven::RavenEstimator::GetEstimatorType(raven::RavenEstimator *this)
{
  return *((unsigned __int8 *)this + 56);
}

uint64_t raven::RavenEstimator::GetLastUpdateTime(raven::RavenEstimator *this)
{
  return *((void *)this + 12);
}

uint64_t raven::RavenEstimator::GetLastErrorRecoveryTime(raven::RavenEstimator *this)
{
  return *((void *)this + 14);
}

uint64_t raven::RavenEstimator::GetAcceptedMeasurementCount(raven::RavenEstimator *this)
{
  return *((void *)this + 32);
}

uint64_t raven::RavenEstimator::GetRejectedMeasurementCount(raven::RavenEstimator *this)
{
  return *((void *)this + 33);
}

uint64_t raven::RavenEstimator::GetUnusedMeasurementCount(raven::RavenEstimator *this)
{
  return *((void *)this + 34);
}

double raven::RavenEstimator::UpdatePriorInformation(raven::RavenEstimator *this, double result)
{
  if (result >= 0.0 && ((*(void *)&result & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 <= 0x3FE
    || (unint64_t)(*(void *)&result - 1) <= 0xFFFFFFFFFFFFELL)
  {
    uint64_t result = 1.0 / (result * result);
    *((double *)this + 140) = result;
  }
  return result;
}

double raven::RavenEstimator::AddCellInformation(raven::RavenEstimator *this, double result)
{
  if (result >= 0.0 && ((*(void *)&result & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 <= 0x3FE
    || (unint64_t)(*(void *)&result - 1) <= 0xFFFFFFFFFFFFELL)
  {
    uint64_t result = 1.0 / (result * result) + *((double *)this + 143);
    *((double *)this + 143) = result;
  }
  return result;
}

double raven::RavenEstimator::AddGNSSInformation(raven::RavenEstimator *this, double result)
{
  if (result >= 0.0 && ((*(void *)&result & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 <= 0x3FE
    || (unint64_t)(*(void *)&result - 1) <= 0xFFFFFFFFFFFFELL)
  {
    uint64_t result = 1.0 / (result * result) + *((double *)this + 141);
    *((double *)this + 141) = result;
  }
  return result;
}

double raven::RavenEstimator::AddWiFiInformation(raven::RavenEstimator *this, double result)
{
  if (result >= 0.0 && ((*(void *)&result & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 <= 0x3FE
    || (unint64_t)(*(void *)&result - 1) <= 0xFFFFFFFFFFFFELL)
  {
    uint64_t result = 1.0 / (result * result) + *((double *)this + 142);
    *((double *)this + 142) = result;
  }
  return result;
}

double raven::RavenEstimator::AddIndoorInformation(raven::RavenEstimator *this, double result)
{
  if (result >= 0.0 && ((*(void *)&result & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 <= 0x3FE
    || (unint64_t)(*(void *)&result - 1) <= 0xFFFFFFFFFFFFELL)
  {
    uint64_t result = 1.0 / (result * result) + *((double *)this + 144);
    *((double *)this + 144) = result;
  }
  return result;
}

double raven::RavenEstimator::AddAccessoryInformation(raven::RavenEstimator *this, double result)
{
  if (result >= 0.0 && ((*(void *)&result & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 <= 0x3FE
    || (unint64_t)(*(void *)&result - 1) <= 0xFFFFFFFFFFFFELL)
  {
    uint64_t result = 1.0 / (result * result) + *((double *)this + 145);
    *((double *)this + 145) = result;
  }
  return result;
}

double raven::RavenEstimator::GetTotalInformation(raven::RavenEstimator *this)
{
  return *((double *)this + 140)
       + *((double *)this + 141)
       + *((double *)this + 142)
       + *((double *)this + 143)
       + *((double *)this + 144)
       + *((double *)this + 145);
}

double raven::RavenEstimator::GetPriorWeight(raven::RavenEstimator *this)
{
  if (!*((unsigned char *)this + 58)) {
    return 1.0;
  }
  double v1 = *((double *)this + 140);
  double result = 0.0;
  if (fabs(v1) >= 2.22044605e-16) {
    return v1
  }
         / (v1
          + *((double *)this + 141)
          + *((double *)this + 142)
          + *((double *)this + 143)
          + *((double *)this + 144)
          + *((double *)this + 145));
  return result;
}

double raven::RavenEstimator::GetCellWeight(raven::RavenEstimator *this)
{
  double result = 0.0;
  if (*((unsigned char *)this + 58))
  {
    double v2 = *((double *)this + 143);
    if (fabs(v2) >= 2.22044605e-16) {
      return v2
    }
           / (*((double *)this + 145)
            + *((double *)this + 144)
            + v2
            + *((double *)this + 140)
            + *((double *)this + 141)
            + *((double *)this + 142));
  }
  return result;
}

double raven::RavenEstimator::GetGNSSWeight(raven::RavenEstimator *this)
{
  double result = 0.0;
  if (*((unsigned char *)this + 58))
  {
    double v2 = *((double *)this + 141);
    if (fabs(v2) >= 2.22044605e-16) {
      return v2
    }
           / (v2
            + *((double *)this + 140)
            + *((double *)this + 142)
            + *((double *)this + 143)
            + *((double *)this + 144)
            + *((double *)this + 145));
  }
  return result;
}

double raven::RavenEstimator::GetWiFiWeight(raven::RavenEstimator *this)
{
  double result = 0.0;
  if (*((unsigned char *)this + 58))
  {
    double v2 = *((double *)this + 142);
    if (fabs(v2) >= 2.22044605e-16) {
      return v2
    }
           / (*((double *)this + 145)
            + *((double *)this + 144)
            + *((double *)this + 143)
            + v2
            + *((double *)this + 140)
            + *((double *)this + 141));
  }
  return result;
}

double raven::RavenEstimator::GetIndoorWeight(raven::RavenEstimator *this)
{
  double result = 0.0;
  if (*((unsigned char *)this + 58))
  {
    double v2 = *((double *)this + 144);
    if (fabs(v2) >= 2.22044605e-16) {
      return v2
    }
           / (*((double *)this + 145)
            + v2
            + *((double *)this + 140)
            + *((double *)this + 141)
            + *((double *)this + 142)
            + *((double *)this + 143));
  }
  return result;
}

double raven::RavenEstimator::GetAccessoryWeight(raven::RavenEstimator *this)
{
  double result = 0.0;
  if (*((unsigned char *)this + 58))
  {
    double v2 = *((double *)this + 145);
    if (fabs(v2) >= 2.22044605e-16) {
      return v2
    }
           / (v2
            + *((double *)this + 140)
            + *((double *)this + 141)
            + *((double *)this + 142)
            + *((double *)this + 143)
            + *((double *)this + 144));
  }
  return result;
}

__n128 raven::RavenEstimator::HandleActivityStateEvent(raven::RavenEstimator *this, const raven::ActivityStateEvent *a2)
{
  if (*((unsigned char *)this + 57))
  {
    if (*((unsigned char *)this + 1208))
    {
      long long v4 = *(_OWORD *)((char *)a2 + 8);
      long long v5 = *(_OWORD *)((char *)a2 + 24);
      long long v6 = *(_OWORD *)((char *)a2 + 56);
      *(_OWORD *)((char *)this + 1256) = *(_OWORD *)((char *)a2 + 40);
      *(_OWORD *)((char *)this + 1272) = v6;
      *(_OWORD *)((char *)this + 1224) = v4;
      *(_OWORD *)((char *)this + 1240) = v5;
      long long v7 = *(_OWORD *)((char *)a2 + 72);
      long long v8 = *(_OWORD *)((char *)a2 + 88);
      long long v9 = *(_OWORD *)((char *)a2 + 120);
      *(_OWORD *)((char *)this + 1320) = *(_OWORD *)((char *)a2 + 104);
      *(_OWORD *)((char *)this + 1336) = v9;
      *(_OWORD *)((char *)this + 1288) = v7;
      *(_OWORD *)((char *)this + 1304) = v8;
      __n128 result = *(__n128 *)((char *)a2 + 136);
      long long v11 = *(_OWORD *)((char *)a2 + 152);
      long long v12 = *(_OWORD *)((char *)a2 + 168);
      *((void *)this + 175) = *((void *)a2 + 23);
      *(_OWORD *)((char *)this + 1368) = v11;
      *(_OWORD *)((char *)this + 1384) = v12;
      *(__n128 *)((char *)this + 1352) = result;
    }
    else
    {
      *((void *)this + 152) = &unk_1EDD140B8;
      long long v25 = *(_OWORD *)((char *)a2 + 8);
      long long v26 = *(_OWORD *)((char *)a2 + 24);
      long long v27 = *(_OWORD *)((char *)a2 + 56);
      *(_OWORD *)((char *)this + 1256) = *(_OWORD *)((char *)a2 + 40);
      *(_OWORD *)((char *)this + 1272) = v27;
      *(_OWORD *)((char *)this + 1224) = v25;
      *(_OWORD *)((char *)this + 1240) = v26;
      long long v28 = *(_OWORD *)((char *)a2 + 72);
      long long v29 = *(_OWORD *)((char *)a2 + 88);
      long long v30 = *(_OWORD *)((char *)a2 + 120);
      *(_OWORD *)((char *)this + 1320) = *(_OWORD *)((char *)a2 + 104);
      *(_OWORD *)((char *)this + 1336) = v30;
      *(_OWORD *)((char *)this + 1288) = v28;
      *(_OWORD *)((char *)this + 1304) = v29;
      __n128 result = *(__n128 *)((char *)a2 + 136);
      long long v31 = *(_OWORD *)((char *)a2 + 152);
      long long v32 = *(_OWORD *)((char *)a2 + 168);
      *((void *)this + 175) = *((void *)a2 + 23);
      *(_OWORD *)((char *)this + 1368) = v31;
      *(_OWORD *)((char *)this + 1384) = v32;
      *(__n128 *)((char *)this + 1352) = result;
      *((unsigned char *)this + 1208) = 1;
    }
  }
  else if (cnprint::CNPrinter::GetLogLevel(this) <= 1)
  {
    __int16 v36 = 12;
    unsigned __int8 v35 = 1;
    v34[0] = (*(uint64_t (**)(const raven::ActivityStateEvent *))(*(void *)a2 + 16))(a2);
    v34[1] = v13;
    cnprint::CNLogFormatter::FormatWarning((uint64_t)this + 2488, (uint64_t)v34, "Estimator not configured, failed to handle ActivityStateEvent.", v14, v15, v16, v17, v18, v33);
    if (*((char *)this + 2511) >= 0) {
      LOBYTE(v24) = (_BYTE)this - 72;
    }
    else {
      uint64_t v24 = *((void *)this + 311);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v36, &v35, "%s", v19, v20, v21, v22, v23, v24);
  }
  return result;
}

__n128 raven::RavenEstimator::HandleFitnessSessionEvent(raven::RavenEstimator *this, const raven::FitnessSessionEvent *a2)
{
  if (*((unsigned char *)this + 57))
  {
    if (*((unsigned char *)this + 1408))
    {
      *((_OWORD *)this + 89) = *(_OWORD *)((char *)a2 + 8);
      long long v2 = *(_OWORD *)((char *)a2 + 24);
      long long v3 = *(_OWORD *)((char *)a2 + 40);
      long long v4 = *(_OWORD *)((char *)a2 + 56);
      *((_OWORD *)this + 93) = *(_OWORD *)((char *)a2 + 72);
      *((_OWORD *)this + 92) = v4;
      *((_OWORD *)this + 91) = v3;
      *((_OWORD *)this + 90) = v2;
      long long v5 = *(_OWORD *)((char *)a2 + 88);
      long long v6 = *(_OWORD *)((char *)a2 + 104);
      long long v7 = *(_OWORD *)((char *)a2 + 120);
      *((_OWORD *)this + 97) = *(_OWORD *)((char *)a2 + 136);
      *((_OWORD *)this + 96) = v7;
      *((_OWORD *)this + 95) = v6;
      *((_OWORD *)this + 94) = v5;
      __n128 result = *(__n128 *)((char *)a2 + 152);
      long long v9 = *(_OWORD *)((char *)a2 + 168);
      long long v10 = *(_OWORD *)((char *)a2 + 184);
      *((void *)this + 202) = *((void *)a2 + 25);
      *((_OWORD *)this + 100) = v10;
      *((_OWORD *)this + 99) = v9;
      *((__n128 *)this + 98) = result;
    }
    else
    {
      *((void *)this + 177) = &unk_1EDD141E0;
      *((_OWORD *)this + 89) = *(_OWORD *)((char *)a2 + 8);
      long long v18 = *(_OWORD *)((char *)a2 + 24);
      long long v19 = *(_OWORD *)((char *)a2 + 40);
      long long v20 = *(_OWORD *)((char *)a2 + 56);
      *((_OWORD *)this + 93) = *(_OWORD *)((char *)a2 + 72);
      *((_OWORD *)this + 92) = v20;
      *((_OWORD *)this + 91) = v19;
      *((_OWORD *)this + 90) = v18;
      long long v21 = *(_OWORD *)((char *)a2 + 88);
      long long v22 = *(_OWORD *)((char *)a2 + 104);
      long long v23 = *(_OWORD *)((char *)a2 + 120);
      *((_OWORD *)this + 97) = *(_OWORD *)((char *)a2 + 136);
      *((_OWORD *)this + 96) = v23;
      *((_OWORD *)this + 95) = v22;
      *((_OWORD *)this + 94) = v21;
      __n128 result = *(__n128 *)((char *)a2 + 152);
      long long v24 = *(_OWORD *)((char *)a2 + 168);
      long long v25 = *(_OWORD *)((char *)a2 + 184);
      *((void *)this + 202) = *((void *)a2 + 25);
      *((_OWORD *)this + 100) = v25;
      *((_OWORD *)this + 99) = v24;
      *((__n128 *)this + 98) = result;
      *((unsigned char *)this + 1408) = 1;
    }
  }
  else
  {
    __int16 v28 = 12;
    unsigned __int8 v27 = 4;
    uint64_t v11 = (*(uint64_t (**)(const raven::FitnessSessionEvent *))(*(void *)a2 + 16))(a2);
    double v26 = v12 + (double)v11;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v28, &v27, "t,%.3lf, ERROR: Estimator not configured, failed to handle FitnesSessionEvent.", v13, v14, v15, v16, v17, SLOBYTE(v26));
  }
  return result;
}

__n128 raven::RavenEstimator::HandleMountStateEvent(raven::RavenEstimator *this, const raven::MountStateEvent *a2)
{
  if (*((unsigned char *)this + 57))
  {
    if (*((unsigned char *)this + 1624))
    {
      *(_OWORD *)((char *)this + 1640) = *(_OWORD *)((char *)a2 + 8);
      long long v4 = *(_OWORD *)((char *)a2 + 24);
      long long v5 = *(_OWORD *)((char *)a2 + 40);
      long long v6 = *(_OWORD *)((char *)a2 + 72);
      *(_OWORD *)((char *)this + 1688) = *(_OWORD *)((char *)a2 + 56);
      *(_OWORD *)((char *)this + 1704) = v6;
      *(_OWORD *)((char *)this + 1656) = v4;
      *(_OWORD *)((char *)this + 1672) = v5;
      __n128 result = *(__n128 *)((char *)a2 + 88);
      long long v8 = *(_OWORD *)((char *)a2 + 104);
      long long v9 = *(_OWORD *)((char *)a2 + 120);
      *((void *)this + 221) = *((void *)a2 + 17);
      *(_OWORD *)((char *)this + 1736) = v8;
      *(_OWORD *)((char *)this + 1752) = v9;
      *(__n128 *)((char *)this + 1720) = result;
    }
    else
    {
      *((void *)this + 204) = &unk_1EDD13AA8;
      *(_OWORD *)((char *)this + 1640) = *(_OWORD *)((char *)a2 + 8);
      long long v22 = *(_OWORD *)((char *)a2 + 24);
      long long v23 = *(_OWORD *)((char *)a2 + 40);
      long long v24 = *(_OWORD *)((char *)a2 + 72);
      *(_OWORD *)((char *)this + 1688) = *(_OWORD *)((char *)a2 + 56);
      *(_OWORD *)((char *)this + 1704) = v24;
      *(_OWORD *)((char *)this + 1656) = v22;
      *(_OWORD *)((char *)this + 1672) = v23;
      __n128 result = *(__n128 *)((char *)a2 + 88);
      long long v25 = *(_OWORD *)((char *)a2 + 104);
      long long v26 = *(_OWORD *)((char *)a2 + 120);
      *((void *)this + 221) = *((void *)a2 + 17);
      *(_OWORD *)((char *)this + 1736) = v25;
      *(_OWORD *)((char *)this + 1752) = v26;
      *(__n128 *)((char *)this + 1720) = result;
      *((unsigned char *)this + 1624) = 1;
    }
  }
  else if (cnprint::CNPrinter::GetLogLevel(this) <= 1)
  {
    __int16 v30 = 12;
    unsigned __int8 v29 = 1;
    v28[0] = (*(uint64_t (**)(const raven::MountStateEvent *))(*(void *)a2 + 16))(a2);
    v28[1] = v10;
    cnprint::CNLogFormatter::FormatWarning((uint64_t)this + 2488, (uint64_t)v28, "Estimator not configured, failed to handle MountStateEvent.", v11, v12, v13, v14, v15, v27);
    if (*((char *)this + 2511) >= 0) {
      LOBYTE(v21) = (_BYTE)this - 72;
    }
    else {
      uint64_t v21 = *((void *)this + 311);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v30, &v29, "%s", v16, v17, v18, v19, v20, v21);
  }
  return result;
}

__n128 raven::RavenEstimator::HandleMovingStateEvent(raven::RavenEstimator *this, const raven::MovingStateEvent *a2)
{
  if (*((unsigned char *)this + 57))
  {
    if (*((unsigned char *)this + 1776))
    {
      *((_OWORD *)this + 112) = *(_OWORD *)((char *)a2 + 8);
      long long v4 = *(_OWORD *)((char *)a2 + 24);
      long long v5 = *(_OWORD *)((char *)a2 + 40);
      long long v6 = *(_OWORD *)((char *)a2 + 56);
      *((_OWORD *)this + 116) = *(_OWORD *)((char *)a2 + 72);
      *((_OWORD *)this + 115) = v6;
      *((_OWORD *)this + 114) = v5;
      *((_OWORD *)this + 113) = v4;
      __n128 result = *(__n128 *)((char *)a2 + 88);
      long long v8 = *(_OWORD *)((char *)a2 + 104);
      long long v9 = *(_OWORD *)((char *)a2 + 120);
      *((void *)this + 240) = *((void *)a2 + 17);
      *((_OWORD *)this + 119) = v9;
      *((_OWORD *)this + 118) = v8;
      *((__n128 *)this + 117) = result;
    }
    else
    {
      *((void *)this + 223) = &unk_1EDD13CF0;
      *((_OWORD *)this + 112) = *(_OWORD *)((char *)a2 + 8);
      long long v22 = *(_OWORD *)((char *)a2 + 24);
      long long v23 = *(_OWORD *)((char *)a2 + 40);
      long long v24 = *(_OWORD *)((char *)a2 + 56);
      *((_OWORD *)this + 116) = *(_OWORD *)((char *)a2 + 72);
      *((_OWORD *)this + 115) = v24;
      *((_OWORD *)this + 114) = v23;
      *((_OWORD *)this + 113) = v22;
      __n128 result = *(__n128 *)((char *)a2 + 88);
      long long v25 = *(_OWORD *)((char *)a2 + 104);
      long long v26 = *(_OWORD *)((char *)a2 + 120);
      *((void *)this + 240) = *((void *)a2 + 17);
      *((_OWORD *)this + 119) = v26;
      *((_OWORD *)this + 118) = v25;
      *((__n128 *)this + 117) = result;
      *((unsigned char *)this + 1776) = 1;
    }
  }
  else if (cnprint::CNPrinter::GetLogLevel(this) <= 1)
  {
    __int16 v30 = 12;
    unsigned __int8 v29 = 1;
    v28[0] = (*(uint64_t (**)(const raven::MovingStateEvent *))(*(void *)a2 + 16))(a2);
    v28[1] = v10;
    cnprint::CNLogFormatter::FormatWarning((uint64_t)this + 2488, (uint64_t)v28, "Estimator not configured, failed to handle MovingStateEvent.", v11, v12, v13, v14, v15, v27);
    if (*((char *)this + 2511) >= 0) {
      LOBYTE(v21) = (_BYTE)this - 72;
    }
    else {
      uint64_t v21 = *((void *)this + 311);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v30, &v29, "%s", v16, v17, v18, v19, v20, v21);
  }
  return result;
}

__n128 raven::RavenEstimator::HandlePositionContextStateEvent(raven::RavenEstimator *this, const raven::PositionContextStateEvent *a2)
{
  if (*((unsigned char *)this + 57))
  {
    if (*((unsigned char *)this + 1928))
    {
      long long v4 = *(_OWORD *)((char *)a2 + 8);
      long long v5 = *(_OWORD *)((char *)a2 + 24);
      long long v6 = *(_OWORD *)((char *)a2 + 56);
      *(_OWORD *)((char *)this + 1976) = *(_OWORD *)((char *)a2 + 40);
      *(_OWORD *)((char *)this + 1992) = v6;
      *(_OWORD *)((char *)this + 1944) = v4;
      *(_OWORD *)((char *)this + 1960) = v5;
      __n128 result = *(__n128 *)((char *)a2 + 72);
      long long v8 = *(_OWORD *)((char *)a2 + 88);
      long long v9 = *(_OWORD *)((char *)a2 + 104);
      *((void *)this + 257) = *((void *)a2 + 15);
      *(_OWORD *)((char *)this + 2024) = v8;
      *(_OWORD *)((char *)this + 2040) = v9;
      *(__n128 *)((char *)this + 2008) = result;
    }
    else
    {
      *((void *)this + 242) = &unk_1EDD14738;
      long long v22 = *(_OWORD *)((char *)a2 + 8);
      long long v23 = *(_OWORD *)((char *)a2 + 24);
      long long v24 = *(_OWORD *)((char *)a2 + 56);
      *(_OWORD *)((char *)this + 1976) = *(_OWORD *)((char *)a2 + 40);
      *(_OWORD *)((char *)this + 1992) = v24;
      *(_OWORD *)((char *)this + 1944) = v22;
      *(_OWORD *)((char *)this + 1960) = v23;
      __n128 result = *(__n128 *)((char *)a2 + 72);
      long long v25 = *(_OWORD *)((char *)a2 + 88);
      long long v26 = *(_OWORD *)((char *)a2 + 104);
      *((void *)this + 257) = *((void *)a2 + 15);
      *(_OWORD *)((char *)this + 2024) = v25;
      *(_OWORD *)((char *)this + 2040) = v26;
      *(__n128 *)((char *)this + 2008) = result;
      *((unsigned char *)this + 1928) = 1;
    }
  }
  else if (cnprint::CNPrinter::GetLogLevel(this) <= 1)
  {
    __int16 v30 = 12;
    unsigned __int8 v29 = 1;
    v28[0] = (*(uint64_t (**)(const raven::PositionContextStateEvent *))(*(void *)a2 + 16))(a2);
    v28[1] = v10;
    cnprint::CNLogFormatter::FormatWarning((uint64_t)this + 2488, (uint64_t)v28, "Estimator not configured, failed to handle PositionContextStateEvent.", v11, v12, v13, v14, v15, v27);
    if (*((char *)this + 2511) >= 0) {
      LOBYTE(v21) = (_BYTE)this - 72;
    }
    else {
      uint64_t v21 = *((void *)this + 311);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v30, &v29, "%s", v16, v17, v18, v19, v20, v21);
  }
  return result;
}

uint64_t raven::RavenEstimator::HandleGnssPreprocessedMeasurementsEvent(raven::RavenEstimator *this, const raven::GnssPreprocessedMeasurementsEvent *a2)
{
  if (*((unsigned char *)this + 57))
  {
    sub_18E021978((uint64_t)this + 2216, (uint64_t)a2);
    return 0;
  }
  else
  {
    if (cnprint::CNPrinter::GetLogLevel(this) <= 1)
    {
      __int16 v20 = 12;
      unsigned __int8 v19 = 1;
      v18[0] = (*(uint64_t (**)(const raven::GnssPreprocessedMeasurementsEvent *))(*(void *)a2 + 16))(a2);
      v18[1] = v5;
      cnprint::CNLogFormatter::FormatWarning((uint64_t)this + 2488, (uint64_t)v18, "Estimator not configured, failed to handle GnssPreprocessedMeasurementsEvent.", v6, v7, v8, v9, v10, v17);
      if (*((char *)this + 2511) >= 0) {
        LOBYTE(v16) = (_BYTE)this - 72;
      }
      else {
        uint64_t v16 = *((void *)this + 311);
      }
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v20, &v19, "%s", v11, v12, v13, v14, v15, v16);
    }
    return 0xFFFFFFFFLL;
  }
}