BOOL raven::RavenEstimator::AreGnssMeasurementsAtSameTime(uint64_t a1, void *a2, _OWORD *a3, int8x16_t a4, int8x16_t a5)
{
  double v6;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  double *v12;
  long long *v13;
  long long v14;
  long long v15;
  long long v16;
  long long v17;
  long long v18;
  long long v19;
  uint64_t v20;
  double v21;
  int8x16_t v22;
  int8x16_t v23;
  uint64_t v24;
  double v25;
  long long v26;
  long long v27;
  long long v28;
  long long v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int8 v38;
  __int16 v39;
  uint64_t v40;
  double v41;
  long long v42;
  long long v43;
  int8x16_t v44;
  int8x16_t v45;
  long long v46;
  long long v47;
  long long v48;
  long long v49;
  long long v50;
  long long v51;
  long long v52;
  long long v53;

  v6 = *(double *)a4.i64;
  LOBYTE(v49) = 0;
  *((void *)&v49 + 1) = 0;
  *(void *)&v50 = 0;
  BYTE8(v50) = 0;
  v51 = 0uLL;
  LOBYTE(v52) = 0;
  *((void *)&v52 + 1) = 0;
  *(void *)&v53 = 0;
  *((void *)&v53 + 1) = 0x7FF8000000000000;
  *(void *)&v48 = 0;
  *((void *)&v48 + 1) = 0x7FF0000000000000;
  LOBYTE(v43) = 0;
  *((void *)&v43 + 1) = 0;
  v44.i64[0] = 0;
  v44.i8[8] = 0;
  v45 = 0uLL;
  LOBYTE(v46) = 0;
  *((void *)&v46 + 1) = 0;
  *(void *)&v47 = 0;
  *((void *)&v47 + 1) = 0x7FF8000000000000;
  *(void *)&v42 = 0;
  *((void *)&v42 + 1) = 0xFFF0000000000000;
  v9 = (uint64_t *)a2[12];
  v10 = (uint64_t *)a2[13];
  while (v9 != v10)
  {
    v11 = *v9;
    if (*v9)
    {
      v12 = *(double **)(v11 + 328);
      v13 = *(long long **)(v11 + 336);
      while (v12 != (double *)v13)
      {
        if (sub_18DEE4CB8(v12, (double *)&v48))
        {
          v14 = *(_OWORD *)v12;
          v49 = *((_OWORD *)v12 + 1);
          v48 = v14;
          v15 = *((_OWORD *)v12 + 2);
          v16 = *((_OWORD *)v12 + 3);
          v17 = *((_OWORD *)v12 + 5);
          v52 = *((_OWORD *)v12 + 4);
          v53 = v17;
          v50 = v15;
          v51 = v16;
        }
        if (sub_18DEE4C00(v12, (double *)&v42))
        {
          v18 = *((_OWORD *)v12 + 1);
          v42 = *(_OWORD *)v12;
          v43 = v18;
          a4 = *(int8x16_t *)(v12 + 4);
          a5 = *(int8x16_t *)(v12 + 6);
          v19 = *((_OWORD *)v12 + 5);
          v46 = *((_OWORD *)v12 + 4);
          v47 = v19;
          v44 = a4;
          v45 = a5;
        }
        v12 += 26;
      }
    }
    v9 += 2;
  }
  v20 = CNTimeSpan::operator-((uint64_t)&v42, &v48, a4, a5);
  v40 = v20;
  v41 = v21;
  if (v20 < 0 || (*(double *)v22.i64 = v21, v21 < 0.0))
  {
    v20 = CNTimeSpan::operator-((double *)&v40, v22, v23);
    v22.i64[0] = v24;
  }
  v25 = fabs(*(double *)v22.i64 + (double)v20);
  if (v25 > v6)
  {
    v39 = 12;
    v38 = 4;
    v40 = (*(uint64_t (**)(void *))(*a2 + 16))(a2);
    v41 = v30;
    cnprint::CNLogFormatter::FormatGeneral(a1 + 2488, (uint64_t)&v40, "GNSS measurements do not share a common time,min_time,%.3lf,max_time,%.3lf", *((double *)&v48 + 1) + (double)(uint64_t)v48, *((double *)&v42 + 1) + (double)(uint64_t)v42);
    if (*(char *)(a1 + 2511) >= 0) {
      LOBYTE(v36) = a1 - 72;
    }
    else {
      v36 = *(void *)(a1 + 2488);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v39, &v38, "%s", v31, v32, v33, v34, v35, v36);
  }
  else
  {
    v26 = v51;
    v27 = v52;
    v28 = v49;
    a3[2] = v50;
    a3[3] = v26;
    v29 = v53;
    a3[4] = v27;
    a3[5] = v29;
    *a3 = v48;
    a3[1] = v28;
  }
  return v25 <= v6;
}

__n128 raven::RavenEstimator::HandleSignalEnvironmentEvent(raven::RavenEstimator *this, const raven::SignalEnvironmentEvent *a2)
{
  if (*((unsigned char *)this + 57))
  {
    if (*((unsigned char *)this + 2368))
    {
      long long v4 = *(_OWORD *)((char *)a2 + 8);
      long long v5 = *(_OWORD *)((char *)a2 + 24);
      *((_OWORD *)this + 151) = *(_OWORD *)((char *)a2 + 40);
      *((_OWORD *)this + 150) = v5;
      *((_OWORD *)this + 149) = v4;
      __n128 result = *(__n128 *)((char *)a2 + 56);
      long long v7 = *(_OWORD *)((char *)a2 + 72);
      long long v8 = *(_OWORD *)((char *)a2 + 88);
      *((unsigned char *)this + 2480) = *((unsigned char *)a2 + 104);
      *((_OWORD *)this + 154) = v8;
      *((_OWORD *)this + 153) = v7;
      *((__n128 *)this + 152) = result;
    }
    else
    {
      *((void *)this + 297) = &unk_1EDD145D0;
      long long v21 = *(_OWORD *)((char *)a2 + 8);
      long long v22 = *(_OWORD *)((char *)a2 + 24);
      *((_OWORD *)this + 151) = *(_OWORD *)((char *)a2 + 40);
      *((_OWORD *)this + 150) = v22;
      *((_OWORD *)this + 149) = v21;
      __n128 result = *(__n128 *)((char *)a2 + 56);
      long long v23 = *(_OWORD *)((char *)a2 + 72);
      long long v24 = *(_OWORD *)((char *)a2 + 88);
      *((unsigned char *)this + 2480) = *((unsigned char *)a2 + 104);
      *((_OWORD *)this + 154) = v24;
      *((_OWORD *)this + 153) = v23;
      *((__n128 *)this + 152) = result;
      *((unsigned char *)this + 2368) = 1;
    }
  }
  else if (cnprint::CNPrinter::GetLogLevel(this) <= 1)
  {
    __int16 v28 = 12;
    unsigned __int8 v27 = 1;
    v26[0] = (*(uint64_t (**)(const raven::SignalEnvironmentEvent *))(*(void *)a2 + 16))(a2);
    v26[1] = v9;
    cnprint::CNLogFormatter::FormatWarning((uint64_t)this + 2488, (uint64_t)v26, "Estimator not configured, failed to handle SignalEnvironmentEvent", v10, v11, v12, v13, v14, v25);
    if (*((char *)this + 2511) >= 0) {
      LOBYTE(v20) = (_BYTE)this - 72;
    }
    else {
      uint64_t v20 = *((void *)this + 311);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v28, &v27, "%s", v15, v16, v17, v18, v19, v20);
  }
  return result;
}

__n128 raven::RavenEstimator::HandleTurnStateEvent(raven::RavenEstimator *this, const raven::TurnStateEvent *a2)
{
  if (*((unsigned char *)this + 57))
  {
    if (*((unsigned char *)this + 2064))
    {
      *((_OWORD *)this + 130) = *(_OWORD *)((char *)a2 + 8);
      long long v4 = *(_OWORD *)((char *)a2 + 24);
      long long v5 = *(_OWORD *)((char *)a2 + 40);
      long long v6 = *(_OWORD *)((char *)a2 + 56);
      *((_OWORD *)this + 134) = *(_OWORD *)((char *)a2 + 72);
      *((_OWORD *)this + 133) = v6;
      *((_OWORD *)this + 132) = v5;
      *((_OWORD *)this + 131) = v4;
      __n128 result = *(__n128 *)((char *)a2 + 88);
      long long v8 = *(_OWORD *)((char *)a2 + 104);
      long long v9 = *(_OWORD *)((char *)a2 + 120);
      *((void *)this + 276) = *((void *)a2 + 17);
      *((_OWORD *)this + 137) = v9;
      *((_OWORD *)this + 136) = v8;
      *((__n128 *)this + 135) = result;
    }
    else
    {
      *((void *)this + 259) = &unk_1EDD13A10;
      *((_OWORD *)this + 130) = *(_OWORD *)((char *)a2 + 8);
      long long v22 = *(_OWORD *)((char *)a2 + 24);
      long long v23 = *(_OWORD *)((char *)a2 + 40);
      long long v24 = *(_OWORD *)((char *)a2 + 56);
      *((_OWORD *)this + 134) = *(_OWORD *)((char *)a2 + 72);
      *((_OWORD *)this + 133) = v24;
      *((_OWORD *)this + 132) = v23;
      *((_OWORD *)this + 131) = v22;
      __n128 result = *(__n128 *)((char *)a2 + 88);
      long long v25 = *(_OWORD *)((char *)a2 + 104);
      long long v26 = *(_OWORD *)((char *)a2 + 120);
      *((void *)this + 276) = *((void *)a2 + 17);
      *((_OWORD *)this + 137) = v26;
      *((_OWORD *)this + 136) = v25;
      *((__n128 *)this + 135) = result;
      *((unsigned char *)this + 2064) = 1;
    }
  }
  else if (cnprint::CNPrinter::GetLogLevel(this) <= 1)
  {
    __int16 v30 = 12;
    unsigned __int8 v29 = 1;
    v28[0] = (*(uint64_t (**)(const raven::TurnStateEvent *))(*(void *)a2 + 16))(a2);
    v28[1] = v10;
    cnprint::CNLogFormatter::FormatWarning((uint64_t)this + 2488, (uint64_t)v28, "Estimator not configured, failed to handle TurnStateEvent.", v11, v12, v13, v14, v15, v27);
    if (*((char *)this + 2511) >= 0) {
      LOBYTE(v21) = (_BYTE)this - 72;
    }
    else {
      uint64_t v21 = *((void *)this + 311);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v30, &v29, "%s", v16, v17, v18, v19, v20, v21);
  }
  return result;
}

uint64_t raven::RavenEstimator::IsSane(raven::RavenEstimator *this)
{
  return 1;
}

BOOL raven::RavenEstimator::IsContextIndoorsFromIndoorProbability(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(double *)(a3 + 120) >= dbl_18E1FD100[*(double *)(a2 + 8) + (double)*(uint64_t *)a2 <= *(double *)(*(void *)(a1 + 1168) + 3360)]
      && *(unsigned char *)a3 != 0;
}

void raven::RavenEstimator::Reset(raven::RavenEstimator *this)
{
  v2 = (void **)*((void *)this + 2);
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 6) = 0;
  unint64_t v4 = v3 - (void)v2;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v5 = *((void *)this + 3);
      v2 = (void **)(*((void *)this + 2) + 8);
      *((void *)this + 2) = v2;
      unint64_t v4 = v5 - (void)v2;
    }
    while (v4 > 0x10);
  }
  if (v4 >> 3 == 1)
  {
    uint64_t v6 = 8;
  }
  else
  {
    if (v4 >> 3 != 2) {
      goto LABEL_8;
    }
    uint64_t v6 = 16;
  }
  *((void *)this + 5) = v6;
LABEL_8:
  *((unsigned char *)this + 58) = 0;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  long long v12 = 0uLL;
  long long v11 = 0uLL;
  uint64_t v10 = (void **)&unk_1EDD13820;
  long long v13 = 0uLL;
  long long v14 = 0uLL;
  long long v15 = 0uLL;
  *(void *)&long long v16 = 0;
  *((void *)&v16 + 1) = 0x7FF8000000000000;
  *(_OWORD *)((char *)this + 152) = 0uLL;
  *(_OWORD *)((char *)this + 136) = 0uLL;
  long long v7 = v13;
  long long v8 = v14;
  long long v9 = v15;
  *(_OWORD *)((char *)this + 216) = v16;
  *(_OWORD *)((char *)this + 200) = v9;
  *(_OWORD *)((char *)this + 184) = v8;
  *(_OWORD *)((char *)this + 168) = v7;
  *(_OWORD *)((char *)this + 280) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  if (*((unsigned char *)this + 232)) {
    *((unsigned char *)this + 232) = 0;
  }
  *((void *)this + 39) = 0;
  *((void *)this + 32) = 0;
  *((void *)this + 33) = 0;
  *((void *)this + 73) = 0;
  *(_OWORD *)((char *)this + 328) = 0uLL;
  *(_OWORD *)((char *)this + 344) = 0uLL;
  *(_OWORD *)((char *)this + 360) = 0uLL;
  *(_OWORD *)((char *)this + 376) = 0uLL;
  *(_OWORD *)((char *)this + 392) = 0uLL;
  *(_OWORD *)((char *)this + 408) = 0uLL;
  *(_OWORD *)((char *)this + 424) = 0uLL;
  *(_OWORD *)((char *)this + 440) = 0uLL;
  *(_OWORD *)((char *)this + 456) = 0uLL;
  *(_OWORD *)((char *)this + 472) = 0uLL;
  *(_OWORD *)((char *)this + 488) = 0uLL;
  *(_OWORD *)((char *)this + 504) = 0uLL;
  *(_OWORD *)((char *)this + 520) = 0uLL;
  *(_OWORD *)((char *)this + 536) = 0uLL;
  *(_OWORD *)((char *)this + 552) = 0uLL;
  *(_OWORD *)((char *)this + 568) = 0uLL;
  *(void *)((char *)this + 980) = 0;
  *(_OWORD *)((char *)this + 948) = 0uLL;
  *(_OWORD *)((char *)this + 964) = 0uLL;
  *(_OWORD *)((char *)this + 916) = 0uLL;
  *(_OWORD *)((char *)this + 932) = 0uLL;
  *(_OWORD *)((char *)this + 884) = 0uLL;
  *(_OWORD *)((char *)this + 900) = 0uLL;
  *(_OWORD *)((char *)this + 852) = 0uLL;
  *(_OWORD *)((char *)this + 868) = 0uLL;
  *(_OWORD *)((char *)this + 820) = 0uLL;
  *(_OWORD *)((char *)this + 836) = 0uLL;
  *(_OWORD *)((char *)this + 788) = 0uLL;
  *(_OWORD *)((char *)this + 804) = 0uLL;
  *(_OWORD *)((char *)this + 756) = 0uLL;
  *(_OWORD *)((char *)this + 772) = 0uLL;
  *(_OWORD *)((char *)this + 724) = 0uLL;
  *(_OWORD *)((char *)this + 740) = 0uLL;
  *((void *)this + 40) = 0x7FF8000000000000;
  *((void *)this + 34) = 0;
  *((_OWORD *)this + 37) = 0uLL;
  *((_OWORD *)this + 38) = 0uLL;
  *((_OWORD *)this + 39) = 0uLL;
  *((_OWORD *)this + 40) = 0uLL;
  *((_OWORD *)this + 41) = 0uLL;
  *((_OWORD *)this + 42) = 0uLL;
  *((_OWORD *)this + 43) = 0uLL;
  *((_OWORD *)this + 44) = 0uLL;
  *((_DWORD *)this + 180) = 0;
  *(_OWORD *)((char *)this + 988) = 0uLL;
  *(_OWORD *)((char *)this + 1004) = 0uLL;
  *(_OWORD *)((char *)this + 1020) = 0uLL;
  *(_OWORD *)((char *)this + 1036) = 0uLL;
  *(_OWORD *)((char *)this + 1052) = 0uLL;
  *(_OWORD *)((char *)this + 1068) = 0uLL;
  *(_OWORD *)((char *)this + 1084) = 0uLL;
  *(_OWORD *)((char *)this + 1100) = 0uLL;
  *(_OWORD *)((char *)this + 1116) = 0uLL;
  *(_OWORD *)((char *)this + 1132) = 0uLL;
  *(_OWORD *)((char *)this + 1148) = 0uLL;
  *((_DWORD *)this + 291) = 0;
  if (*((unsigned char *)this + 1208)) {
    *((unsigned char *)this + 1208) = 0;
  }
  if (*((unsigned char *)this + 1408)) {
    *((unsigned char *)this + 1408) = 0;
  }
  if (*((unsigned char *)this + 1624)) {
    *((unsigned char *)this + 1624) = 0;
  }
  if (*((unsigned char *)this + 1776)) {
    *((unsigned char *)this + 1776) = 0;
  }
  if (*((unsigned char *)this + 1928)) {
    *((unsigned char *)this + 1928) = 0;
  }
  if (*((unsigned char *)this + 2064)) {
    *((unsigned char *)this + 2064) = 0;
  }
  if (*((unsigned char *)this + 2216))
  {
    *((void *)this + 278) = &unk_1EDD154D0;
    uint64_t v10 = (void **)((char *)this + 2320);
    sub_18DEE4B60(&v10);
    *((unsigned char *)this + 2216) = 0;
  }
  sub_18E012A10((uint64_t)this + 2344, *((void **)this + 294));
  *((void *)this + 293) = (char *)this + 2352;
  *((void *)this + 295) = 0;
  *((void *)this + 294) = 0;
  if (*((unsigned char *)this + 2368)) {
    *((unsigned char *)this + 2368) = 0;
  }
}

uint64_t raven::RavenEstimator::SetAccelerometerCache(uint64_t result, uint64_t a2)
{
  *(void *)(result + 1184) = a2;
  return result;
}

uint64_t raven::RavenEstimator::SetGravityModel(uint64_t result, uint64_t a2)
{
  *(void *)(result + 1176) = a2;
  return result;
}

uint64_t raven::RavenEstimator::SetMagneticModel(uint64_t result, uint64_t a2)
{
  *(void *)(result + 1200) = a2;
  return result;
}

uint64_t raven::RavenEstimator::SetRateGyroCache(uint64_t result, uint64_t a2)
{
  *(void *)(result + 1192) = a2;
  return result;
}

uint64_t raven::RavenEstimator::SetRavenParameters(uint64_t this, raven::RavenParameters *a2)
{
  *(void *)(this + 1168) = a2;
  return this;
}

double raven::RavenEstimator::ResetMeasurementCounts(raven::RavenEstimator *this)
{
  double result = 0.0;
  *(_OWORD *)((char *)this + 708) = 0u;
  *(_OWORD *)((char *)this + 680) = 0u;
  *(_OWORD *)((char *)this + 696) = 0u;
  *(_OWORD *)((char *)this + 648) = 0u;
  *(_OWORD *)((char *)this + 664) = 0u;
  *(_OWORD *)((char *)this + 616) = 0u;
  *(_OWORD *)((char *)this + 632) = 0u;
  *(_OWORD *)((char *)this + 584) = 0u;
  *(_OWORD *)((char *)this + 600) = 0u;
  *(_OWORD *)((char *)this + 552) = 0u;
  *(_OWORD *)((char *)this + 568) = 0u;
  *(_OWORD *)((char *)this + 520) = 0u;
  *(_OWORD *)((char *)this + 536) = 0u;
  *(_OWORD *)((char *)this + 488) = 0u;
  *(_OWORD *)((char *)this + 504) = 0u;
  *(_OWORD *)((char *)this + 456) = 0u;
  *(_OWORD *)((char *)this + 472) = 0u;
  *(_OWORD *)((char *)this + 424) = 0u;
  *(_OWORD *)((char *)this + 440) = 0u;
  *(_OWORD *)((char *)this + 392) = 0u;
  *(_OWORD *)((char *)this + 408) = 0u;
  *(_OWORD *)((char *)this + 360) = 0u;
  *(_OWORD *)((char *)this + 376) = 0u;
  *(_OWORD *)((char *)this + 328) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  return result;
}

void raven::RavenEstimator::UpdateMeasurementTypeCount(cnprint::CNPrinter *a1, uint64_t a2, unsigned int **a3, uint64_t a4, uint64_t a5)
{
  v71[2] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *a3;
  uint64_t v6 = a3[1];
  if (*a3 != v6)
  {
    do
    {
      ++*(_DWORD *)(a4 + 4 * *v5);
      unsigned int v11 = *v5;
      v5 += 8;
      ++*(_DWORD *)(a5 + 4 * v11);
    }
    while (v5 != v6);
    LogLevel = (std::string::size_type *)cnprint::CNPrinter::GetLogLevel(a1);
    if (!LogLevel)
    {
      v62 = a1;
      if (*(char *)(a2 + 23) < 0) {
        LogLevel = (std::string::size_type *)sub_18DEDE668(&__dst, *(void **)a2, *(void *)(a2 + 8));
      }
      else {
        std::string __dst = *(std::string *)a2;
      }
      for (uint64_t i = 0; i != 33; ++i)
      {
        unsigned int v14 = *(_DWORD *)(a4 + 4 * i);
        if (v14)
        {
          long long v15 = "UnknownMeas";
          if (i <= 0x20u) {
            long long v15 = off_1E55B9920[i];
          }
          sub_18DEDE7B0(&__p, v15);
          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = __dst.__r_.__value_.__l.__size_;
          }
          sub_18DF06474((uint64_t)&v64, size + 1);
          if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v17 = &v64;
          }
          else {
            uint64_t v17 = (std::string *)v64.__r_.__value_.__r.__words[0];
          }
          if (size)
          {
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              p_dst = &__dst;
            }
            else {
              p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
            }
            memmove(v17, p_dst, size);
          }
          *(_WORD *)((char *)&v17->__r_.__value_.__l.__data_ + size) = 44;
          if ((v69 & 0x80u) == 0) {
            p_p = (const std::string::value_type *)&__p;
          }
          else {
            p_p = (const std::string::value_type *)__p;
          }
          if ((v69 & 0x80u) == 0) {
            std::string::size_type v20 = v69;
          }
          else {
            std::string::size_type v20 = v68;
          }
          uint64_t v21 = std::string::append(&v64, p_p, v20);
          long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
          v65.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v22;
          v21->__r_.__value_.__l.__size_ = 0;
          v21->__r_.__value_.__r.__words[2] = 0;
          v21->__r_.__value_.__r.__words[0] = 0;
          long long v23 = std::string::append(&v65, ",", 1uLL);
          long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
          v66.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v24;
          v23->__r_.__value_.__l.__size_ = 0;
          v23->__r_.__value_.__r.__words[2] = 0;
          v23->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v63, v14);
          if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            long long v25 = &v63;
          }
          else {
            long long v25 = (std::string *)v63.__r_.__value_.__r.__words[0];
          }
          if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v26 = HIBYTE(v63.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v26 = v63.__r_.__value_.__l.__size_;
          }
          LogLevel = (std::string::size_type *)std::string::append(&v66, (const std::string::value_type *)v25, v26);
          std::string::size_type v27 = *LogLevel;
          v71[0] = LogLevel[1];
          *(void *)((char *)v71 + 7) = *(std::string::size_type *)((char *)LogLevel + 15);
          char v28 = *((unsigned char *)LogLevel + 23);
          LogLevel[1] = 0;
          LogLevel[2] = 0;
          std::string::size_type *LogLevel = 0;
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__dst.__r_.__value_.__l.__data_);
          }
          __dst.__r_.__value_.__r.__words[0] = v27;
          __dst.__r_.__value_.__l.__size_ = v71[0];
          *(std::string::size_type *)((char *)&__dst.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v71 + 7);
          *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v28;
          if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v63.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v66.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v65.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v64.__r_.__value_.__l.__data_);
          }
          if ((char)v69 < 0) {
            operator delete(__p);
          }
        }
      }
      if (!cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)LogLevel))
      {
        LOWORD(__p) = 12;
        v66.__r_.__value_.__s.__data_[0] = 0;
        unsigned __int8 v29 = &__dst;
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          unsigned __int8 v29 = (std::string *)__dst.__r_.__value_.__r.__words[0];
        }
        char v30 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)v62 + 2488, (uint64_t)v62 + 80, "count_per_update,%s", (const char *)v29);
        if (*((char *)v62 + 2511) >= 0) {
          LOBYTE(v36) = v30;
        }
        else {
          uint64_t v36 = *((void *)v62 + 311);
        }
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&__p, (unsigned __int8 *)&v66, "%s", v31, v32, v33, v34, v35, v36);
      }
      v37 = std::string::operator=(&__dst, (const std::string *)a2);
      for (uint64_t j = 0; j != 33; ++j)
      {
        unsigned int v39 = *(_DWORD *)(a5 + 4 * j);
        if (v39)
        {
          v40 = "UnknownMeas";
          if (j <= 0x20u) {
            v40 = off_1E55B9920[j];
          }
          sub_18DEDE7B0(&__p, v40);
          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v41 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v41 = __dst.__r_.__value_.__l.__size_;
          }
          sub_18DF06474((uint64_t)&v64, v41 + 1);
          if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v42 = &v64;
          }
          else {
            v42 = (std::string *)v64.__r_.__value_.__r.__words[0];
          }
          if (v41)
          {
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              v43 = &__dst;
            }
            else {
              v43 = (std::string *)__dst.__r_.__value_.__r.__words[0];
            }
            memmove(v42, v43, v41);
          }
          *(_WORD *)((char *)&v42->__r_.__value_.__l.__data_ + v41) = 44;
          if ((v69 & 0x80u) == 0) {
            v44 = (const std::string::value_type *)&__p;
          }
          else {
            v44 = (const std::string::value_type *)__p;
          }
          if ((v69 & 0x80u) == 0) {
            std::string::size_type v45 = v69;
          }
          else {
            std::string::size_type v45 = v68;
          }
          v46 = std::string::append(&v64, v44, v45);
          long long v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
          v65.__r_.__value_.__r.__words[2] = v46->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v47;
          v46->__r_.__value_.__l.__size_ = 0;
          v46->__r_.__value_.__r.__words[2] = 0;
          v46->__r_.__value_.__r.__words[0] = 0;
          v48 = std::string::append(&v65, ",", 1uLL);
          long long v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
          v66.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v66.__r_.__value_.__l.__data_ = v49;
          v48->__r_.__value_.__l.__size_ = 0;
          v48->__r_.__value_.__r.__words[2] = 0;
          v48->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v63, v39);
          if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v50 = &v63;
          }
          else {
            v50 = (std::string *)v63.__r_.__value_.__r.__words[0];
          }
          if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v51 = HIBYTE(v63.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v51 = v63.__r_.__value_.__l.__size_;
          }
          v37 = std::string::append(&v66, (const std::string::value_type *)v50, v51);
          std::string::size_type v52 = v37->__r_.__value_.__r.__words[0];
          v71[0] = v37->__r_.__value_.__l.__size_;
          *(void *)((char *)v71 + 7) = *(std::string::size_type *)((char *)&v37->__r_.__value_.__r.__words[1] + 7);
          char v53 = HIBYTE(v37->__r_.__value_.__r.__words[2]);
          v37->__r_.__value_.__l.__size_ = 0;
          v37->__r_.__value_.__r.__words[2] = 0;
          v37->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__dst.__r_.__value_.__l.__data_);
          }
          __dst.__r_.__value_.__r.__words[0] = v52;
          __dst.__r_.__value_.__l.__size_ = v71[0];
          *(std::string::size_type *)((char *)&__dst.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v71 + 7);
          *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v53;
          if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v63.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v66.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v65.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v64.__r_.__value_.__l.__data_);
          }
          if ((char)v69 < 0) {
            operator delete(__p);
          }
        }
      }
      if (!cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v37))
      {
        LOWORD(__p) = 12;
        v66.__r_.__value_.__s.__data_[0] = 0;
        v54 = &__dst;
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          v54 = (std::string *)__dst.__r_.__value_.__r.__words[0];
        }
        char v55 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)v62 + 2488, (uint64_t)v62 + 80, "count_cumulative,%s", (const char *)v54);
        if (*((char *)v62 + 2511) >= 0) {
          LOBYTE(v61) = v55;
        }
        else {
          uint64_t v61 = *((void *)v62 + 311);
        }
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&__p, (unsigned __int8 *)&v66, "%s", v56, v57, v58, v59, v60, v61);
      }
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__dst.__r_.__value_.__l.__data_);
      }
    }
  }
}

void sub_18E020A84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
}

void raven::RavenEstimator::AddToAcceptedMeasurementTypeCount(cnprint::CNPrinter *a1, unsigned int **a2)
{
  sub_18DEDE7B0(__p, "Accepted");
  raven::RavenEstimator::UpdateMeasurementTypeCount(a1, (uint64_t)__p, a2, (uint64_t)a1 + 328, (uint64_t)a1 + 724);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
}

void sub_18E020BA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void raven::RavenEstimator::AddToRejectedMeasurementTypeCount(cnprint::CNPrinter *a1, unsigned int **a2)
{
  sub_18DEDE7B0(__p, "Rejected");
  raven::RavenEstimator::UpdateMeasurementTypeCount(a1, (uint64_t)__p, a2, (uint64_t)a1 + 460, (uint64_t)a1 + 856);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
}

void sub_18E020C28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void raven::RavenEstimator::AddToUnusedMeasurementTypeCount(cnprint::CNPrinter *a1, unsigned int **a2)
{
  sub_18DEDE7B0(__p, "Unused");
  raven::RavenEstimator::UpdateMeasurementTypeCount(a1, (uint64_t)__p, a2, (uint64_t)a1 + 592, (uint64_t)a1 + 988);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
}

void sub_18E020CA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t raven::RavenEstimator::GetRavenActivity@<X0>(raven::RavenEstimator *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 96) = 0;
  uint64_t v4 = a2 + 96;
  *(void *)(a2 + 288) = 0;
  uint64_t v5 = a2 + 288;
  *(void *)(a2 + 104) = 0x3FF0000000000000;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_OWORD *)(a2 + 144) = 0u;
  *(_OWORD *)(a2 + 160) = 0u;
  *(_OWORD *)(a2 + 176) = 0u;
  *(_OWORD *)(a2 + 192) = 0u;
  *(_OWORD *)(a2 + 208) = 0u;
  *(_OWORD *)(a2 + 224) = 0u;
  *(_OWORD *)(a2 + 240) = 0u;
  *(_OWORD *)(a2 + 256) = 0u;
  *(void *)(a2 + 272) = 0;
  *(void *)(a2 + 280) = 0x7FF8000000000000;
  *(void *)(a2 + 296) = 0x3FF0000000000000;
  *(_OWORD *)(a2 + 304) = 0u;
  *(_OWORD *)(a2 + 320) = 0u;
  *(void *)(a2 + 336) = 0x3FF0000000000000;
  *(_OWORD *)(a2 + 360) = 0u;
  *(_OWORD *)(a2 + 344) = 0u;
  *(void *)(a2 + 376) = 0x3FE0000000000000;
  *(void *)(a2 + 384) = 0x3FE0000000000000;
  *(unsigned char *)(a2 + 392) = 0;
  if (*((unsigned char *)this + 58))
  {
    *(_OWORD *)(a2 + 32) = 0uLL;
    *(_OWORD *)(a2 + 48) = 0uLL;
    *(_OWORD *)(a2 + 64) = 0uLL;
    int8x16_t v6 = *((int8x16_t *)this + 5);
    *(void *)(a2 + 80) = 0;
    *(void *)(a2 + 88) = 0x7FF8000000000000;
    *(int8x16_t *)a2 = v6;
    *(_OWORD *)(a2 + 16) = 0uLL;
    uint64_t result = raven::PopulateAllTimeFields(a2, (uint64_t)this + 136, v6, (int8x16_t)0);
    if (*((unsigned char *)this + 1208))
    {
      *(void *)(v4 + 80) = *((void *)this + 175);
      long long v8 = *(_OWORD *)((char *)this + 1368);
      *(_OWORD *)(v4 + 32) = *(_OWORD *)((char *)this + 1352);
      *(_OWORD *)(v4 + 48) = v8;
      *(_OWORD *)(v4 + 64) = *(_OWORD *)((char *)this + 1384);
      long long v9 = *(_OWORD *)((char *)this + 1336);
      *(_OWORD *)uint64_t v4 = *(_OWORD *)((char *)this + 1320);
      *(_OWORD *)(v4 + 16) = v9;
    }
    if (*((unsigned char *)this + 1408))
    {
      *(_OWORD *)(a2 + 232) = *((_OWORD *)this + 98);
      *(_OWORD *)(a2 + 248) = *((_OWORD *)this + 99);
      *(_OWORD *)(a2 + 264) = *((_OWORD *)this + 100);
      *(void *)(a2 + 280) = *((void *)this + 202);
      *(_OWORD *)(a2 + 184) = *((_OWORD *)this + 95);
      *(_OWORD *)(a2 + 200) = *((_OWORD *)this + 96);
      *(_OWORD *)(a2 + 216) = *((_OWORD *)this + 97);
    }
    if (*((unsigned char *)this + 1776))
    {
      long long v10 = *((_OWORD *)this + 119);
      *(_OWORD *)uint64_t v5 = *((_OWORD *)this + 118);
      *(_OWORD *)(v5 + 16) = v10;
      *(void *)(v5 + 32) = *((void *)this + 240);
    }
    if (*((unsigned char *)this + 1624))
    {
      *(void *)(a2 + 360) = *((void *)this + 221);
      long long v11 = *(_OWORD *)((char *)this + 1752);
      *(_OWORD *)(a2 + 328) = *(_OWORD *)((char *)this + 1736);
      *(_OWORD *)(a2 + 344) = v11;
    }
    if (*((unsigned char *)this + 1928))
    {
      *(void *)(a2 + 384) = *((void *)this + 257);
      *(_OWORD *)(a2 + 368) = *(_OWORD *)((char *)this + 2040);
    }
    if (*((unsigned char *)this + 2368)) {
      *(unsigned char *)(a2 + 392) = *((unsigned char *)this + 2480);
    }
  }
  else
  {
    long long v12 = *(_OWORD *)((char *)this + 184);
    *(_OWORD *)(a2 + 32) = *(_OWORD *)((char *)this + 168);
    *(_OWORD *)(a2 + 48) = v12;
    long long v13 = *(_OWORD *)((char *)this + 216);
    *(_OWORD *)(a2 + 64) = *(_OWORD *)((char *)this + 200);
    *(_OWORD *)(a2 + 80) = v13;
    int8x16_t v14 = *(int8x16_t *)((char *)this + 136);
    int8x16_t v15 = *(int8x16_t *)((char *)this + 152);
    *(int8x16_t *)a2 = v14;
    *(int8x16_t *)(a2 + 16) = v15;
    return raven::PopulateAllTimeFields(a2, (uint64_t)this + 136, v14, v15);
  }
  return result;
}

BOOL raven::RavenEstimator::IsPositionMeasurementUsable(unsigned char *a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a2 + 200);
  BOOL result = 0;
  if (v2 != 16)
  {
    if (v2 != 4) {
      return 1;
    }
    if (!a1[1208]) {
      return 1;
    }
    if (!a1[2368]) {
      return 1;
    }
    unsigned int v3 = a1[1320];
    if (v3 < 0xA && ((0x323u >> v3) & 1) != 0) {
      return 1;
    }
    if (a1[2480] - 3 <= 1) {
      return 1;
    }
  }
  return result;
}

uint64_t raven::RavenEstimator::ShouldMapVectorConstraintBeApplied(unsigned char *a1, float64x2_t *a2, float64x2_t *a3)
{
  if (!a1[1208]) {
    return 0;
  }
  unsigned int v4 = a1[1320];
  double v5 = 0.45;
  if (v4 > 9) {
    goto LABEL_13;
  }
  if (((1 << v4) & 0x9E) != 0)
  {
    double v5 = 0.8;
    if (!a1[2368] || a1[2480] - 3 >= 2) {
      goto LABEL_13;
    }
    return 4294967294;
  }
  if (((1 << v4) & 0x240) != 0) {
    return 4294967294;
  }
  if (v4 == 5 && a1[2368] && a1[2480] - 3 < 2) {
    return 0;
  }
LABEL_13:
  uint64_t v12 = 0;
  float64x2_t v11 = vmulq_f64(a3[6], (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL));
  cnnavigation::ECEFToENU(a2, 1, 1, &v11, 0, (uint64_t)v10);
  int v8 = v7;
  uint64_t result = 0;
  if (!v8)
  {
    __double2 v9 = __sincos_stret(a3[9].f64[1] * 0.0174532925);
    if (fabs(v9.__sinval * v10[1] - v9.__cosval * v10[0]) > v5 * a3[8].f64[1]) {
      return 0;
    }
    else {
      return 0xFFFFFFFFLL;
    }
  }
  return result;
}

BOOL raven::RavenEstimator::IsTimeForZUPT(uint64_t a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a1 + 232);
  unsigned int v3 = (unsigned char *)(a1 + 232);
  if (!v4) {
    return 1;
  }
  int8x16_t v6 = sub_18E0210B0(v3);
  uint64_t v9 = CNTimeSpan::operator-(a2, v6, v7, v8);
  return v10 + (double)v9 >= *(double *)(*(void *)(a1 + 1168) + 272);
}

unsigned char *sub_18E0210B0(unsigned char *a1)
{
  if (!*a1)
  {
    std::logic_error::logic_error(&v2, "Attempted to access the value of an uninitialized optional object.");
    v2.__vftable = (std::logic_error_vtbl *)&unk_1EDD12AC0;
    sub_18E021C40(&v2);
  }
  return a1 + 8;
}

void sub_18E02111C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::logic_error a9)
{
}

BOOL raven::RavenEstimator::IsZUPTAppropriate(raven::RavenEstimator *this, const raven::AccessoryVehicleSpeedEvent *a2)
{
  uint64_t v2 = *((void *)this + 146);
  if (v2 && *(unsigned char *)(v2 + 33))
  {
    uint64_t v3 = *((void *)a2 + 30);
    if (v3 != *((void *)a2 + 29) && *(double *)(v3 - 8) <= 0.01)
    {
      v15[0] = (*(uint64_t (**)(const raven::AccessoryVehicleSpeedEvent *))(*(void *)a2 + 16))(a2);
      v15[1] = v5;
      return raven::RavenEstimator::IsTimeForZUPT((uint64_t)this, (uint64_t)v15);
    }
  }
  else
  {
    LOWORD(v15[0]) = 12;
    unsigned __int8 v16 = 4;
    uint64_t v7 = (*(uint64_t (**)(const raven::AccessoryVehicleSpeedEvent *))(*(void *)a2 + 16))(a2);
    double v14 = v8 + (double)v7;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v15, &v16, "t,%.3lf,AccessoryVehicleSpeed,nozupt,Raven parameters not configured.", v9, v10, v11, v12, v13, SLOBYTE(v14));
  }
  return 0;
}

BOOL raven::RavenEstimator::IsZUPTAppropriate(raven::RavenEstimator *this, const raven::MovingStateEvent *a2)
{
  uint64_t v2 = *((void *)this + 146);
  if (v2 && *(unsigned char *)(v2 + 33))
  {
    if (*((unsigned __int8 *)a2 + 104) - 1 <= 1
      && *((double *)a2 + 15) + *((double *)a2 + 16) >= *(double *)(v2 + 248))
    {
      v14[0] = (*(uint64_t (**)(const raven::MovingStateEvent *))(*(void *)a2 + 16))(a2);
      v14[1] = v4;
      return raven::RavenEstimator::IsTimeForZUPT((uint64_t)this, (uint64_t)v14);
    }
  }
  else
  {
    LOWORD(v14[0]) = 12;
    unsigned __int8 v15 = 4;
    uint64_t v6 = (*(uint64_t (**)(const raven::MovingStateEvent *))(*(void *)a2 + 16))(a2);
    double v13 = v7 + (double)v6;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v14, &v15, "t,%.3lf, Raven parameters not configured.", v8, v9, v10, v11, v12, SLOBYTE(v13));
  }
  return 0;
}

double raven::RavenEstimator::FillZUPTEvent(raven::RavenEstimator *this, const raven::MovingStateEvent *a2, raven::VelocityEvent *a3)
{
  uint64_t v3 = *((void *)this + 146);
  if (!v3 || !*(unsigned char *)(v3 + 33))
  {
    __int16 v34 = 12;
    unsigned __int8 v33 = 4;
    uint64_t v6 = (*(uint64_t (**)(const raven::MovingStateEvent *))(*(void *)a2 + 16))(a2);
    double v29 = v7 + (double)v6;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v34, &v33, "t,%.3lf, Raven parameters not configured.", v8, v9, v10, v11, v12, SLOBYTE(v29));
    return result;
  }
  int v4 = *((unsigned __int8 *)a2 + 104);
  if (v4 == 2)
  {
    uint64_t v5 = (double *)(v3 + 264);
    goto LABEL_8;
  }
  if (v4 == 1)
  {
    uint64_t v5 = (double *)(v3 + 256);
LABEL_8:
    double result = *v5;
    long long v14 = *(_OWORD *)((char *)a2 + 8);
    *(_OWORD *)((char *)a3 + 24) = *(_OWORD *)((char *)a2 + 24);
    *(_OWORD *)((char *)a3 + 8) = v14;
    long long v15 = *(_OWORD *)((char *)a2 + 40);
    long long v16 = *(_OWORD *)((char *)a2 + 56);
    long long v17 = *(_OWORD *)((char *)a2 + 72);
    *(_OWORD *)((char *)a3 + 88) = *(_OWORD *)((char *)a2 + 88);
    *(_OWORD *)((char *)a3 + 72) = v17;
    *(_OWORD *)((char *)a3 + 56) = v16;
    *(_OWORD *)((char *)a3 + 40) = v15;
    long long v18 = *(_OWORD *)((char *)a2 + 24);
    *(_OWORD *)((char *)a3 + 104) = *(_OWORD *)((char *)a2 + 8);
    *(_OWORD *)((char *)a3 + 120) = v18;
    long long v19 = *(_OWORD *)((char *)a2 + 40);
    long long v20 = *(_OWORD *)((char *)a2 + 56);
    long long v21 = *(_OWORD *)((char *)a2 + 72);
    *(_OWORD *)((char *)a3 + 184) = *(_OWORD *)((char *)a2 + 88);
    *(_OWORD *)((char *)a3 + 168) = v21;
    *(_OWORD *)((char *)a3 + 152) = v20;
    *(_OWORD *)((char *)a3 + 136) = v19;
    *((void *)a3 + 37) = 0;
    *((void *)a3 + 38) = 0;
    *((void *)a3 + 36) = 0;
    *((double *)a3 + 39) = result;
    *((void *)a3 + 40) = 0;
    *((void *)a3 + 41) = 0;
    *((double *)a3 + 42) = result;
    *((void *)a3 + 43) = 0;
    *((double *)a3 + 44) = result;
    *((unsigned char *)a3 + 280) = 1;
    return result;
  }
  __int16 v32 = 12;
  unsigned __int8 v31 = 4;
  uint64_t v22 = (*(uint64_t (**)(const raven::MovingStateEvent *))(*(void *)a2 + 16))(a2);
  double v30 = v23 + (double)v22;
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v32, &v31, "t,%.3lf, ZUPT not filled, moving state is not frozen or not moving.", v24, v25, v26, v27, v28, SLOBYTE(v30));
  return result;
}

uint64_t raven::RavenEstimator::UpdateAggressiveFlooringOfOutputUncertaintyData(uint64_t result, uint64_t a2, uint64_t a3, unsigned int a4, int8x16_t a5, int8x16_t a6)
{
  uint64_t v9 = result;
  if (a4 <= 4 && *(unsigned char *)(result + 280))
  {
LABEL_3:
    double result = CNTimeSpan::operator-(v9 + 80, (void *)(v9 + 296), a5, a6);
    double v11 = v10 + (double)result;
    if (v11 >= 10.0)
    {
      *(void *)(v9 + 296) = 0;
      *(void *)(v9 + 304) = 0;
    }
    *(unsigned char *)(v9 + 280) = v11 >= 10.0;
    return result;
  }
  if (*(unsigned char *)(result + 1408) && *(unsigned __int8 *)(result + 1520) - 2 <= 7) {
    goto LABEL_28;
  }
  if (*(unsigned char *)(result + 1208))
  {
    unsigned int v12 = *(unsigned __int8 *)(result + 1320);
    if (v12 > 9 || v12 == 5) {
      goto LABEL_28;
    }
  }
  double v14 = 1.1;
  if (*(unsigned char *)(result + 2368))
  {
    unint64_t v15 = *(char *)(result + 2480);
    if (v15 > 6) {
      unsigned int v16 = 22;
    }
    else {
      unsigned int v16 = dword_18E1FD178[v15];
    }
    if (v15 > 6 || ((1 << v15) & 0x59) == 0) {
      double v14 = 0.8;
    }
  }
  else
  {
    unsigned int v16 = 17;
  }
  double result = (**(uint64_t (***)(uint64_t))result)(result);
  if (v16 <= a4 || v17 <= v14)
  {
LABEL_28:
    unsigned int v18 = *(_DWORD *)(v9 + 284) + 1;
    *(_DWORD *)(v9 + 284) = v18;
    if (v18 > *(_DWORD *)(v9 + 288)) {
      *(_DWORD *)(v9 + 288) = v18;
    }
    *(unsigned char *)(v9 + 280) = 0;
    *(_OWORD *)(v9 + 296) = *(_OWORD *)(v9 + 80);
  }
  else
  {
    if (*(_DWORD *)(v9 + 288) >= 5u && (a4 > 0xB || v17 <= 1.5))
    {
      *(unsigned char *)(v9 + 280) = 0;
      return result;
    }
    *(_DWORD *)(v9 + 284) = 0;
    double result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v9 + 160))(v9, a2, a3);
    if (result) {
      goto LABEL_3;
    }
  }
  return result;
}

uint64_t sub_18E0216A4(void *a1)
{
  uint64_t v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  a1[5] = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 8;
  }
  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 16;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    double v7 = *v2++;
    operator delete(v7);
  }

  return sub_18DEE1F78((uint64_t)a1);
}

void sub_18E02174C(uint64_t a1, void *a2)
{
  unint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = *(unsigned char **)(a1 + 16);
    double v7 = *(unsigned char **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4) {
        unint64_t v11 = 1;
      }
      else {
        unint64_t v11 = (v7 - v4) >> 2;
      }
      uint64_t v12 = 2 * v11;
      double v13 = (char *)sub_18DEE2FBC(v11);
      unint64_t v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      unint64_t v15 = *(uint64_t **)(a1 + 8);
      unsigned int v16 = v5;
      uint64_t v17 = *(void *)(a1 + 16) - (void)v15;
      if (v17)
      {
        unsigned int v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v18 = 8 * (v17 >> 3);
        long long v19 = v5;
        do
        {
          uint64_t v20 = *v15++;
          *(void *)long long v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      long long v21 = *(char **)a1;
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v16;
      *(void *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        unint64_t v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v8 = (v7 - v6) >> 3;
      if (v8 >= -1) {
        uint64_t v9 = v8 + 1;
      }
      else {
        uint64_t v9 = v8 + 2;
      }
      uint64_t v10 = v9 >> 1;
      unint64_t v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        unint64_t v4 = *(char **)(a1 + 16);
      }
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    unint64_t v5 = *(char **)(a1 + 8);
  }
  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8;
}

void sub_18E021864(void *a1, void *a2)
{
  unint64_t v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    unint64_t v5 = (char *)a1[1];
    uint64_t v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1) {
        unint64_t v16 = 1;
      }
      else {
        unint64_t v16 = (uint64_t)&v4[-*a1] >> 2;
      }
      uint64_t v17 = (char *)sub_18DEE2FBC(v16);
      long long v19 = &v17[8 * (v16 >> 2)];
      uint64_t v20 = (uint64_t *)a1[1];
      unint64_t v4 = v19;
      uint64_t v21 = a1[2] - (void)v20;
      if (v21)
      {
        unint64_t v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v22 = 8 * (v21 >> 3);
        double v23 = &v17[8 * (v16 >> 2)];
        do
        {
          uint64_t v24 = *v20++;
          *(void *)double v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      uint64_t v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        unint64_t v4 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v7 = v6 >> 3;
      BOOL v8 = v6 >> 3 < -1;
      uint64_t v9 = (v6 >> 3) + 2;
      if (v8) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = v7 + 1;
      }
      uint64_t v11 = -(v10 >> 1);
      uint64_t v12 = v10 >> 1;
      double v13 = &v5[-8 * v12];
      int64_t v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        unint64_t v4 = (char *)a1[1];
      }
      unint64_t v15 = &v4[8 * v11];
      unint64_t v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(void *)unint64_t v4 = *a2;
  a1[2] += 8;
}

void sub_18E021978(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)a1)
  {
    long long v3 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(a1 + 32) = v3;
    long long v4 = *(_OWORD *)(a2 + 40);
    long long v5 = *(_OWORD *)(a2 + 56);
    long long v6 = *(_OWORD *)(a2 + 72);
    *(void *)(a1 + 96) = *(void *)(a2 + 88);
    *(_OWORD *)(a1 + 64) = v5;
    *(_OWORD *)(a1 + 80) = v6;
    *(_OWORD *)(a1 + 48) = v4;
    if (a1 + 8 != a2)
    {
      uint64_t v7 = a1 + 104;
      BOOL v8 = *(uint64_t **)(a2 + 104);
      unint64_t v9 = ((uint64_t)v8 - *(void *)(a2 + 96)) >> 4;
      uint64_t v10 = *(uint64_t **)(a2 + 96);
      sub_18E021A70(v7, v10, v8, v9);
    }
  }
  else
  {
    *(void *)(a1 + 8) = &unk_1EDD154D0;
    long long v11 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(a1 + 32) = v11;
    long long v12 = *(_OWORD *)(a2 + 40);
    long long v13 = *(_OWORD *)(a2 + 56);
    long long v14 = *(_OWORD *)(a2 + 72);
    *(void *)(a1 + 96) = *(void *)(a2 + 88);
    *(_OWORD *)(a1 + 64) = v13;
    *(_OWORD *)(a1 + 80) = v14;
    *(_OWORD *)(a1 + 48) = v12;
    *(void *)(a1 + 112) = 0;
    *(void *)(a1 + 120) = 0;
    *(void *)(a1 + 104) = 0;
    sub_18DFF7A80((void *)(a1 + 104), *(void **)(a2 + 96), *(void **)(a2 + 104), (uint64_t)(*(void *)(a2 + 104) - *(void *)(a2 + 96)) >> 4);
    *(unsigned char *)a1 = 1;
  }
}

void sub_18E021A70(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  unint64_t v9 = *(void **)a1;
  if (a4 > (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4)
  {
    sub_18DEE4F64((uint64_t *)a1);
    if (a4 >> 60) {
      sub_18DFF7B4C();
    }
    uint64_t v10 = *(void *)(a1 + 16) - *(void *)a1;
    uint64_t v11 = v10 >> 3;
    if (v10 >> 3 <= a4) {
      uint64_t v11 = a4;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    sub_18DFF7B08((void *)a1, v12);
    long long v13 = sub_18DFF7B9C(v8, a2, a3, *(void **)(a1 + 8));
    goto LABEL_11;
  }
  unint64_t v14 = (uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 4;
  if (v14 < a4)
  {
    unint64_t v15 = &a2[2 * v14];
    sub_18E021BC4((uint64_t)&v20, a2, v15, v9);
    long long v13 = sub_18DFF7B9C(v8, v15, a3, *(void **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v13;
    return;
  }
  sub_18E021BC4((uint64_t)&v21, a2, a3, v9);
  uint64_t v17 = v16;
  uint64_t v18 = *(void *)(a1 + 8);
  if (v18 != v16)
  {
    do
    {
      long long v19 = *(std::__shared_weak_count **)(v18 - 8);
      if (v19) {
        sub_18DEE4E18(v19);
      }
      v18 -= 16;
    }
    while (v18 != v17);
  }
  *(void *)(a1 + 8) = v17;
}

void sub_18E021BB4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_18E021BBC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t *sub_18E021BC4(uint64_t a1, uint64_t *a2, uint64_t *a3, void *a4)
{
  long long v5 = a2;
  if (a2 == a3) {
    return a2;
  }
  long long v6 = a3;
  do
  {
    uint64_t v8 = *v5;
    uint64_t v7 = v5[1];
    if (v7) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
    }
    unint64_t v9 = (std::__shared_weak_count *)a4[1];
    *a4 = v8;
    a4[1] = v7;
    if (v9) {
      sub_18DEE4E18(v9);
    }
    a4 += 2;
    v5 += 2;
  }
  while (v5 != v6);
  return v6;
}

void sub_18E021C40(const std::logic_error *a1)
{
  exception = __cxa_allocate_exception(0x40uLL);
  sub_18E021CA0((uint64_t)exception, a1);
  __cxa_throw(exception, (struct type_info *)&unk_1EDD04728, (void (*)(void *))sub_18E021D4C);
}

void sub_18E021C88(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_18E021CA0(uint64_t a1, const std::logic_error *a2)
{
  *(void *)a1 = &unk_1EDD12A90;
  std::logic_error::logic_error((std::logic_error *)(a1 + 8), a2);
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = -1;
  *(void *)a1 = &unk_1EDD12748;
  *(void *)(a1 + 8) = &unk_1EDD12778;
  *(void *)(a1 + 24) = &unk_1EDD127A0;
  return a1;
}

uint64_t sub_18E021D4C(uint64_t a1)
{
  *(void *)(a1 + 24) = &unk_1EDD136E0;
  sub_18DFE4B84((uint64_t *)(a1 + 32));
  std::logic_error::~logic_error((std::logic_error *)(a1 + 8));
  return a1;
}

void sub_18E021DA0()
{
}

void sub_18E021F6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_18DFE4B84(&a9);
  sub_18DFE4B84(&a10);
  (*(void (**)(uint64_t))(*(void *)v10 + 24))(v10);
  _Unwind_Resume(a1);
}

void sub_18E021FE4(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x40uLL);
  sub_18E02228C((uint64_t)exception, a1);
  __cxa_throw(exception, (struct type_info *)&unk_1EDD04728, (void (*)(void *))sub_18E021D4C);
}

void sub_18E02202C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_18E022040(uint64_t a1)
{
  *(void *)(a1 + 24) = &unk_1EDD136E0;
  sub_18DFE4B84((uint64_t *)(a1 + 32));
  std::logic_error::~logic_error((std::logic_error *)(a1 + 8));

  JUMPOUT(0x192FA6240);
}

void sub_18E0220B4(uint64_t a1)
{
  *(void *)(a1 + 16) = &unk_1EDD136E0;
  sub_18DFE4B84((uint64_t *)(a1 + 24));

  std::logic_error::~logic_error((std::logic_error *)a1);
}

void sub_18E022110(uint64_t a1)
{
  *(void *)(a1 + 16) = &unk_1EDD136E0;
  sub_18DFE4B84((uint64_t *)(a1 + 24));
  std::logic_error::~logic_error((std::logic_error *)a1);

  JUMPOUT(0x192FA6240);
}

void sub_18E022188(void *a1)
{
  *a1 = &unk_1EDD136E0;
  sub_18DFE4B84(a1 + 1);

  std::logic_error::~logic_error((std::logic_error *)a1 - 1);
}

void sub_18E0221E0(void *a1)
{
  *a1 = &unk_1EDD136E0;
  sub_18DFE4B84(a1 + 1);
  std::logic_error::~logic_error((std::logic_error *)a1 - 1);

  JUMPOUT(0x192FA6240);
}

void sub_18E022254(std::logic_error *a1)
{
  std::logic_error::~logic_error(a1);

  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E02228C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1EDD12A90;
  std::logic_error::logic_error((std::logic_error *)(a1 + 8), (const std::logic_error *)(a2 + 8));
  *(void *)(a1 + 8) = &unk_1EDD12AC0;
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = &unk_1EDD136E0;
  *(void *)(a1 + 32) = v4;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  long long v5 = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v5;
  *(void *)a1 = &unk_1EDD12748;
  *(void *)(a1 + 8) = &unk_1EDD12778;
  *(void *)(a1 + 24) = &unk_1EDD127A0;
  return a1;
}

void sub_18E0223B4(_Unwind_Exception *a1)
{
  std::logic_error::~logic_error(v1);
  _Unwind_Resume(a1);
}

uint64_t raven::RavenPositionContextEstimator::Configure(uint64_t a1, uint64_t *a2)
{
  if (*(unsigned char *)(a1 + 1))
  {
    __int16 v31 = 12;
    unsigned __int8 v30 = 2;
    unsigned __int8 v3 = cnprint::CNLogFormatter::FormatWarning((cnprint::CNLogFormatter *)(a1 + 424), "RavenPositionContextEstimator::Configure() called more than once");
    if (*(char *)(a1 + 447) >= 0) {
      LOBYTE(v9) = v3;
    }
    else {
      uint64_t v9 = *(void *)(a1 + 424);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v31, &v30, "%s", v4, v5, v6, v7, v8, v9);
  }
  else
  {
    uint64_t v11 = *a2;
    if (*a2)
    {
      if (*(unsigned char *)(v11 + 33))
      {
        uint64_t result = 0;
        *(void *)(a1 + 8) = v11;
        *(unsigned char *)(a1 + 1) = 1;
        return result;
      }
      __int16 v27 = 12;
      unsigned __int8 v26 = 4;
      unsigned __int8 v19 = cnprint::CNLogFormatter::FormatGeneral((const void **)(a1 + 424), "RavenPositionContextEstimator::Configure() called with uninitialized raven parameters");
      if (*(char *)(a1 + 447) >= 0) {
        LOBYTE(v25) = v19;
      }
      else {
        uint64_t v25 = *(void *)(a1 + 424);
      }
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v27, &v26, "%s", v20, v21, v22, v23, v24, v25);
    }
    else
    {
      __int16 v29 = 12;
      unsigned __int8 v28 = 4;
      unsigned __int8 v12 = cnprint::CNLogFormatter::FormatGeneral((const void **)(a1 + 424), "RavenPositionContextEstimator::Configure() called with null raven parameters");
      if (*(char *)(a1 + 447) >= 0) {
        LOBYTE(v18) = v12;
      }
      else {
        uint64_t v18 = *(void *)(a1 + 424);
      }
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v29, &v28, "%s", v13, v14, v15, v16, v17, v18);
    }
  }
  return 0xFFFFFFFFLL;
}

uint64_t raven::RavenPositionContextEstimator::Initialize(raven::RavenPositionContextEstimator *this, uint64_t a2)
{
  if (*(unsigned char *)this)
  {
    __int16 v39 = 12;
    unsigned __int8 v38 = 2;
    unsigned __int8 v4 = cnprint::CNLogFormatter::FormatGeneral((const void **)this + 53, "WARNING: RavenPositionContextEstimator::Initialize(),estimator being re-initialized");
    if (*((char *)this + 447) >= 0) {
      LOBYTE(v10) = v4;
    }
    else {
      uint64_t v10 = *((void *)this + 53);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v39, &v38, "%s", v5, v6, v7, v8, v9, v10);
    *(unsigned char *)this = 0;
  }
  uint64_t v11 = (double *)*((void *)this + 1);
  if (!v11)
  {
    __int16 v39 = 12;
    unsigned __int8 v38 = 4;
    unsigned __int8 v14 = cnprint::CNLogFormatter::FormatGeneral((const void **)this + 53, "RavenPositionContextEstimator::Initialize(),invalid pointer to RavenParameters", v37);
    goto LABEL_20;
  }
  double v12 = v11[310];
  if ((*(void *)&v12 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (v12 >= 0.0 ? (BOOL v13 = v12 <= 1.0) : (BOOL v13 = 0), !v13))
  {
    __int16 v39 = 12;
    unsigned __int8 v38 = 4;
    unsigned __int8 v14 = cnprint::CNLogFormatter::FormatGeneral((const void **)this + 53, "RavenPositionContextEstimator::Initialize(),invalid P(indoor),%.3lf");
LABEL_20:
    if (*((char *)this + 447) >= 0) {
      LOBYTE(v22) = v14;
    }
    else {
      uint64_t v22 = *((void *)this + 53);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v39, &v38, "%s", v15, v16, v17, v18, v19, v22);
    return 0xFFFFFFFFLL;
  }
  double v20 = v11[311];
  if ((*(void *)&v20 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (v20 >= 0.0 ? (BOOL v21 = v20 <= 1.0) : (BOOL v21 = 0), !v21))
  {
    __int16 v39 = 12;
    unsigned __int8 v38 = 4;
    unsigned __int8 v14 = cnprint::CNLogFormatter::FormatGeneral((const void **)this + 53, "RavenPositionContextEstimator::Initialize(),invalid P(outdoor),%.3lf");
    goto LABEL_20;
  }
  if (fabs(v12 + v20 + -1.0) > 1.0e-10)
  {
    __int16 v39 = 12;
    unsigned __int8 v38 = 4;
    unsigned __int8 v14 = cnprint::CNLogFormatter::FormatGeneral((const void **)this + 53, "RavenPositionContextEstimator::Initialize(),sum of initial probabilities does not add up to one,P(indoor),%.3lf,P(outdoor),%.3lf");
    goto LABEL_20;
  }
  double v24 = v11[312];
  if ((*(void *)&v24 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (v24 >= 0.0 ? (BOOL v25 = v24 <= 1.0) : (BOOL v25 = 0), !v25))
  {
    __int16 v39 = 12;
    unsigned __int8 v38 = 4;
    unsigned __int8 v14 = cnprint::CNLogFormatter::FormatGeneral((const void **)this + 53, "RavenPositionContextEstimator::Initialize(),invalid P(indoor|indoor),%.3lf");
    goto LABEL_20;
  }
  double v26 = v11[313];
  if ((*(void *)&v26 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (v26 >= 0.0 ? (BOOL v27 = v26 <= 1.0) : (BOOL v27 = 0), !v27))
  {
    __int16 v39 = 12;
    unsigned __int8 v38 = 4;
    unsigned __int8 v14 = cnprint::CNLogFormatter::FormatGeneral((const void **)this + 53, "RavenPositionContextEstimator::Initialize(),invalid P(outdoor|outdoor),%.3lf");
    goto LABEL_20;
  }
  double v28 = *(double *)(a2 + 8) + (double)*(uint64_t *)a2;
  if (COERCE__INT64(fabs(v28)) > 0x7FEFFFFFFFFFFFFFLL || v28 < 0.0)
  {
    __int16 v39 = 12;
    unsigned __int8 v38 = 4;
    unsigned __int8 v14 = cnprint::CNLogFormatter::FormatGeneral((const void **)this + 53, "RavenPositionContextEstimator::Initialize(),invalid input time,%.3lf");
    goto LABEL_20;
  }
  __int16 v29 = (cnprint::CNPrinter *)raven::RavenPositionContextEstimator::InitializeHiddenMarkovModel(this);
  *(_OWORD *)((char *)this + 152) = *(_OWORD *)a2;
  *(unsigned char *)this = 1;
  if (cnprint::CNPrinter::GetLogLevel(v29) <= 1)
  {
    __int16 v39 = 12;
    unsigned __int8 v38 = 1;
    char v30 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 424, a2, "RavenPositionContextEstimator::Initialize(),estimator is initialized");
    if (*((char *)this + 447) >= 0) {
      LOBYTE(v36) = v30;
    }
    else {
      uint64_t v36 = *((void *)this + 53);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v39, &v38, "%s", v31, v32, v33, v34, v35, v36);
  }
  return 0;
}

uint64_t raven::RavenPositionContextEstimator::InitializeHiddenMarkovModel(raven::RavenPositionContextEstimator *this)
{
  *((void *)this + 18) = 0x3DDB7CDFD9D7BDBBLL;
  uint64_t v15 = 0x100000002;
  BOOL v13 = &unk_1EDD18B28;
  long long v12 = xmmword_18E1FD1A0;
  long long v14 = xmmword_18E1FD1A0;
  uint64_t v16 = v17;
  uint64_t v2 = *((void *)this + 1);
  double v3 = *(double *)(v2 + 2488);
  v17[0] = *(double *)(v2 + 2480);
  v17[1] = v3;
  double v4 = v17[0] + v3;
  if (fabs(v17[0] + v3 + -1.0) > 1.0e-10 && cnprint::CNPrinter::GetLogLevel(this) <= 1)
  {
    LOWORD(v20) = 2;
    v18[0] = 1;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v20, v18, "WARNING: HMM initialized with non-normalized probability vector.", v5, v6, v7, v8, v9, 2);
  }
  sub_18E024D90((uint64_t)v18, (uint64_t)&v13);
  *(void *)&v10.f64[1] = 0x200000002;
  long long v19 = v12;
  uint64_t v22 = 0x100000002;
  double v20 = &unk_1EDD18B28;
  long long v21 = v12;
  uint64_t v23 = &v24;
  v10.f64[0] = 1.0 / v4;
  sub_18DFE3240((uint64_t)v18, (uint64_t)&v20, v10);
  sub_18DFE2F24((uint64_t)this + 24, (uint64_t)&v20);
  sub_18DFE2F24((uint64_t)this + 80, (uint64_t)this + 24);
  *((_DWORD *)this + 34) = 1;
  return 0;
}

void *sub_18E022964(void *result)
{
  *uint64_t result = &unk_1EDD17478;
  return result;
}

double raven::RavenPositionContextEstimator::GetStateProbability(uint64_t a1, int *a2)
{
  if (!*(unsigned char *)a1) {
    return NAN;
  }
  uint64_t v7 = 0x100000002;
  uint64_t v5 = &unk_1EDD18B28;
  long long v6 = xmmword_18E1FD1A0;
  uint64_t v8 = &v9;
  if (*(_DWORD *)(a1 + 136)) {
    uint64_t v3 = a1 + 80;
  }
  else {
    uint64_t v3 = a1 + 24;
  }
  sub_18DFE2F24((uint64_t)&v5, v3);
  return *(double *)&v8[*a2];
}

double sub_18E022A28@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 24) = 0x100000002;
  *(void *)a2 = &unk_1EDD18B28;
  *(_OWORD *)(a2 + 8) = xmmword_18E1FD1A0;
  *(void *)(a2 + 32) = a2 + 40;
  if (*(_DWORD *)(a1 + 120)) {
    uint64_t v2 = a1 + 64;
  }
  else {
    uint64_t v2 = a1 + 8;
  }
  *(void *)&double result = sub_18DFE2F24(a2, v2).n128_u64[0];
  return result;
}

void raven::RavenPositionContextEstimator::UpdatePositionContextStateEvent(raven::RavenPositionContextEstimator *this)
{
  *((_OWORD *)this + 19) = *(_OWORD *)((char *)this + 152);
  int v6 = 0;
  double StateProbability = raven::RavenPositionContextEstimator::GetStateProbability((uint64_t)this, &v6);
  int v5 = 1;
  double v3 = raven::RavenPositionContextEstimator::GetStateProbability((uint64_t)this, &v5);
  *((double *)this + 51) = StateProbability;
  *((double *)this + 52) = v3;
  char v4 = 2 * (v3 >= 0.95);
  if (StateProbability >= 0.95) {
    char v4 = 1;
  }
  *((unsigned char *)this + 400) = v4;
}

__n128 raven::RavenPositionContextEstimator::ResetPositionContextStateEvent(raven::RavenPositionContextEstimator *this)
{
  *((unsigned char *)this + 400) = 0;
  __n128 result = *(__n128 *)(*((void *)this + 1) + 2480);
  *(__n128 *)((char *)this + 408) = result;
  return result;
}

void raven::RavenPositionContextEstimator::HandleEvidence(uint64_t a1, uint64_t a2, int8x16_t a3, int8x16_t a4)
{
  uint64_t v6 = CNTimeSpan::operator-(a2 + 8, (void *)(a1 + 152), a3, a4);
  *(void *)&v21[0] = v6;
  v21[1] = v7;
  if (v6 < 0 || (v8.n128_f64[0] = v7, v7 < 0.0))
  {
    uint64_t v6 = CNTimeSpan::operator-(v21, (int8x16_t)v8, v9);
    v8.n128_u64[0] = v10;
  }
  if (v6 == 10) {
    goto LABEL_7;
  }
  if (!v6)
  {
    if ((v8.n128_u64[0] & 0x7FFFFFFFFFFFFFFFLL) < 0x7FF0000000000000) {
      goto LABEL_16;
    }
LABEL_7:
    if (v8.n128_f64[0] <= 0.0) {
      goto LABEL_16;
    }
    goto LABEL_10;
  }
  if (v6 < 11) {
    goto LABEL_16;
  }
LABEL_10:
  if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v6) <= 1)
  {
    __int16 v20 = 12;
    unsigned __int8 v19 = 1;
    unsigned __int8 v11 = cnprint::CNLogFormatter::FormatGeneral((const void **)(a1 + 424), "RavenPositionContextEstimator::HandleEvidence(GnssEvidence),last estimate is too old, re-initialize the HMM");
    if (*(char *)(a1 + 447) >= 0) {
      LOBYTE(v17) = v11;
    }
    else {
      uint64_t v17 = *(void *)(a1 + 424);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v20, &v19, "%s", v12, v13, v14, v15, v16, v17);
  }
  *(unsigned char *)(a1 + 400) = 0;
  *(_OWORD *)(a1 + 408) = *(_OWORD *)(*(void *)(a1 + 8) + 2480);
  raven::RavenPositionContextEstimator::InitializeHiddenMarkovModel((raven::RavenPositionContextEstimator *)a1);
LABEL_16:
  raven::RavenPositionContextEstimator::HmmPredictAndUpdate(a1, a2, v8);
  if (!v18)
  {
    raven::RavenPositionContextEstimator::UpdatePositionContextStateEvent((raven::RavenPositionContextEstimator *)a1);
  }
}

__n128 raven::RavenPositionContextEstimator::HmmPredictAndUpdate(uint64_t a1, uint64_t a2, __n128 result)
{
  if (!*(unsigned char *)(a1 + 1) || !*(unsigned char *)a1) {
    return result;
  }
  long long v5 = *(_OWORD *)(*(void *)(a1 + 8) + 2496);
  v68[0] = *(_OWORD *)(a2 + 8);
  v68[1] = v5;
  int v6 = sub_18E023AD4(a1 + 16, (uint64_t)v68);
  if (!v6)
  {
    uint64_t v17 = (__n128 *)(a2 + 8);
    uint64_t v65 = 0x100000002;
    long long v64 = xmmword_18E1FD1A0;
    std::string v63 = &unk_1EDD18A38;
    std::string v66 = v67;
    v67[0] = sub_18E023FA8;
    v67[1] = sub_18E023FA8;
    uint64_t v60 = 0x100000002;
    long long v59 = xmmword_18E1FD1A0;
    uint64_t v58 = &unk_1EDD18AC8;
    uint64_t v61 = &v62;
    __asm { FMOV            V0.2D, #-1.0 }
    long long v23 = *(_OWORD *)(a2 + 8);
    long long v54 = _Q0;
    long long v55 = v23;
    long long v53 = v23;
    float v24 = *(float *)a2;
    if (*(float *)a2 < 0.0) {
      float v24 = 0.0;
    }
    unint64_t v52 = (unint64_t)v24;
    char v51 = *(unsigned char *)(a1 + 288);
    double v50 = -1.0;
    if (raven::RavenPositionContextStateLookupTables::PositionContextStateLookupTables::LookupMeanCn0ProbabilityGivenOutdoor(a1 + 472, (uint64_t *)&v52, &v51, &v50, v7, v8, v9, v10))
    {
      unsigned __int8 v49 = 4;
      char v30 = cnprint::CNLogFormatter::FormatGeneral(a1 + 424, a1 + 152, "RavenPositionContextEstimator::HmmPredictAndUpdate(),LookupMeanCn0ProbabilityGivenOutdoor failed for signal environment,%hhu");
    }
    else if (v50 < 0.0 || v50 > 1.0 || (*(void *)&v50 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
      LOWORD(v48[0]) = 12;
      unsigned __int8 v49 = 4;
      char v30 = cnprint::CNLogFormatter::FormatGeneral(a1 + 424, a1 + 152, "RavenPositionContextEstimator::HmmPredictAndUpdate(),LookupMeanCn0ProbabilityGivenOutdoor returned invalid probability", v47, v48[0]);
    }
    else
    {
      double v57 = v50;
      double v50 = -1.0;
      if (raven::RavenPositionContextStateLookupTables::PositionContextStateLookupTables::LookupMeanCn0ProbabilityGivenIndoor((raven::RavenPositionContextStateLookupTables::PositionContextStateLookupTables *)(a1 + 472), &v52, &v50, v25, v26, v27, v28, v29))
      {
        LOWORD(v48[0]) = 12;
        unsigned __int8 v49 = 4;
        char v30 = cnprint::CNLogFormatter::FormatGeneral(a1 + 424, a1 + 152, "RavenPositionContextEstimator::HmmPredictAndUpdate(),LookupMeanCn0ProbabilityGivenIndoor failed", v47, v48[0]);
      }
      else if (v50 < 0.0 || v50 > 1.0 || (*(void *)&v50 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
      {
        LOWORD(v48[0]) = 12;
        unsigned __int8 v49 = 4;
        char v30 = cnprint::CNLogFormatter::FormatGeneral(a1 + 424, a1 + 152, "RavenPositionContextEstimator::HmmPredictAndUpdate(),LookupMeanCn0ProbabilityGivenIndoor returned invalid probability", v47, v48[0]);
      }
      else
      {
        double v56 = v50;
        *uint64_t v61 = (uint64_t)&v55;
        unint64_t v52 = *(unsigned int *)(a2 + 4);
        double v50 = -1.0;
        if (raven::RavenPositionContextStateLookupTables::PositionContextStateLookupTables::LookupNumSatsProbabilityGivenOutdoor(a1 + 472, (uint64_t *)&v52, &v51, &v50, v36, v37, v38, v39))
        {
          unsigned __int8 v49 = 4;
          char v30 = cnprint::CNLogFormatter::FormatGeneral(a1 + 424, a1 + 152, "RavenPositionContextEstimator::HmmPredictAndUpdate(),LookupNumSatsProbabilityGivenOutdoor failed for signal environment,%hhu");
        }
        else if (v50 < 0.0 || v50 > 1.0 || (*(void *)&v50 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
        {
          LOWORD(v48[0]) = 12;
          unsigned __int8 v49 = 4;
          char v30 = cnprint::CNLogFormatter::FormatGeneral(a1 + 424, a1 + 152, "RavenPositionContextEstimator::HmmPredictAndUpdate(),LookupNumSatsProbabilityGivenOutdoor returned invalid probability", v47, v48[0]);
        }
        else
        {
          *((double *)&v54 + 1) = v50;
          double v50 = -1.0;
          if (raven::RavenPositionContextStateLookupTables::PositionContextStateLookupTables::LookupNumSatsProbabilityGivenIndoor((raven::RavenPositionContextStateLookupTables::PositionContextStateLookupTables *)(a1 + 472), &v52, &v50, v41, v42, v43, v44, v45))
          {
            LOWORD(v48[0]) = 12;
            unsigned __int8 v49 = 4;
            char v30 = cnprint::CNLogFormatter::FormatGeneral(a1 + 424, a1 + 152, "RavenPositionContextEstimator::HmmPredictAndUpdate(),LookupNumSatsProbabilityGivenIndoor failed", v47, v48[0]);
          }
          else
          {
            if (v50 >= 0.0 && v50 <= 1.0 && (*(void *)&v50 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
            {
              *(double *)&long long v54 = v50;
              v61[1] = (uint64_t)&v53;
              sub_18E022A28(a1 + 16, (uint64_t)v48);
              int v46 = sub_18E0240DC(a1 + 16, (uint64_t)v48, 2, (uint64_t)&v63, (uint64_t)&v58);
              if (!v46)
              {
                __n128 result = *v17;
                *(__n128 *)(a1 + 152) = *v17;
                return result;
              }
              LOWORD(v48[0]) = 12;
              unsigned __int8 v49 = 4;
              cnprint::CNLogFormatter::FormatGeneral(a1 + 424, a1 + 152, "RavenPositionContextEstimator::HmmPredictAndUpdate(),failed to update,code,%d", v46);
              if (*(char *)(a1 + 447) >= 0) {
                LOBYTE(v40) = a1 - 88;
              }
              else {
                uint64_t v40 = *(void *)(a1 + 424);
              }
              goto LABEL_21;
            }
            LOWORD(v48[0]) = 12;
            unsigned __int8 v49 = 4;
            char v30 = cnprint::CNLogFormatter::FormatGeneral(a1 + 424, a1 + 152, "RavenPositionContextEstimator::HmmPredictAndUpdate(),LookupNumSatsProbabilityGivenIndoor returned invalid probability", v47, v48[0]);
          }
        }
      }
    }
    if (*(char *)(a1 + 447) >= 0) {
      LOBYTE(v40) = v30;
    }
    else {
      uint64_t v40 = *(void *)(a1 + 424);
    }
LABEL_21:
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v48, &v49, "%s", v31, v32, v33, v34, v35, v40);
    return result;
  }
  LOWORD(v63) = 12;
  LOBYTE(v58) = 4;
  cnprint::CNLogFormatter::FormatGeneral(a1 + 424, a1 + 152, "RavenPositionContextEstimator::HmmPredictAndUpdate(),failed to predict,code,%d", v6);
  if (*(char *)(a1 + 447) >= 0) {
    LOBYTE(v16) = a1 - 88;
  }
  else {
    uint64_t v16 = *(void *)(a1 + 424);
  }
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v63, (unsigned __int8 *)&v58, "%s", v11, v12, v13, v14, v15, v16);
  return result;
}

void raven::RavenPositionContextEstimator::HandleEvidence(uint64_t a1, unsigned char *a2, int8x16_t a3, int8x16_t a4)
{
  uint64_t v6 = CNTimeSpan::operator-((uint64_t)(a2 + 8), (void *)(a1 + 152), a3, a4);
  *(void *)&v21[0] = v6;
  v21[1] = v7;
  if (v6 < 0 || (*(double *)v8.i64 = v7, v7 < 0.0))
  {
    uint64_t v6 = CNTimeSpan::operator-(v21, v8, v9);
    v8.i64[0] = v10;
  }
  if (v6 == 10) {
    goto LABEL_7;
  }
  if (!v6)
  {
    if ((v8.i64[0] & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000) {
      goto LABEL_16;
    }
LABEL_7:
    if (*(double *)v8.i64 <= 0.0) {
      goto LABEL_16;
    }
    goto LABEL_10;
  }
  if (v6 < 11) {
    goto LABEL_16;
  }
LABEL_10:
  if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v6) <= 1)
  {
    __int16 v20 = 12;
    unsigned __int8 v19 = 1;
    unsigned __int8 v11 = cnprint::CNLogFormatter::FormatGeneral((const void **)(a1 + 424), "RavenPositionContextEstimator::HandleEvidence(ActivityStateEvidence),last estimate is too old, re-initialize the HMM");
    if (*(char *)(a1 + 447) >= 0) {
      LOBYTE(v17) = v11;
    }
    else {
      uint64_t v17 = *(void *)(a1 + 424);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v20, &v19, "%s", v12, v13, v14, v15, v16, v17);
  }
  *(unsigned char *)(a1 + 400) = 0;
  *(_OWORD *)(a1 + 408) = *(_OWORD *)(*(void *)(a1 + 8) + 2480);
  raven::RavenPositionContextEstimator::InitializeHiddenMarkovModel((raven::RavenPositionContextEstimator *)a1);
LABEL_16:
  if (*a2 != 5 || *(unsigned char *)(a1 + 176) && *(double *)(a1 + 168) >= 5.0)
  {
    raven::RavenPositionContextEstimator::HmmPredictAndUpdate(a1, (uint64_t)a2);
    if (!v18)
    {
      raven::RavenPositionContextEstimator::UpdatePositionContextStateEvent((raven::RavenPositionContextEstimator *)a1);
    }
  }
}

__n128 raven::RavenPositionContextEstimator::HmmPredictAndUpdate(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 1) && *(unsigned char *)a1)
  {
    long long v4 = *(_OWORD *)(*(void *)(a1 + 8) + 2496);
    v42[0] = *(_OWORD *)(a2 + 8);
    v42[1] = v4;
    if (sub_18E023AD4(a1 + 16, (uint64_t)v42))
    {
      v26[0] = 12;
      v25[0] = 4;
      char v9 = a1 - 88;
      cnprint::CNLogFormatter::FormatGeneral(a1 + 424, a1 + 152, "RavenPositionContextEstimator::HmmPredictAndUpdate(),failed to predict,code,%d");
LABEL_5:
      if (*(char *)(a1 + 447) >= 0) {
        LOBYTE(v15) = v9;
      }
      else {
        uint64_t v15 = *(void *)(a1 + 424);
      }
LABEL_19:
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v26, v25, "%s", v10, v11, v12, v13, v14, v15);
      return result;
    }
    uint64_t v16 = (__n128 *)(a2 + 8);
    uint64_t v39 = 0x100000001;
    *(void *)&long long v17 = 0x100000001;
    *((void *)&v17 + 1) = 0x100000001;
    long long v38 = v17;
    uint64_t v37 = &unk_1EDD17F28;
    uint64_t v40 = &v41;
    uint64_t v41 = sub_18E023FA8;
    uint64_t v34 = 0x100000001;
    long long v33 = v17;
    uint64_t v32 = &unk_1EDD17FE8;
    uint64_t v35 = &v36;
    long long v29 = *(_OWORD *)(a2 + 8);
    unsigned __int8 v28 = *(unsigned char *)(a1 + 288);
    double v27 = -1.0;
    if (raven::RavenPositionContextStateLookupTables::PositionContextStateLookupTables::LookupActivityStateProbabilityGivenOutdoor(a1 + 472, (unsigned __int8 *)a2, &v28, &v27, v5, v6, v7, v8))
    {
      v26[0] = 12;
      v25[0] = 4;
      char v22 = cnprint::CNLogFormatter::FormatGeneral(a1 + 424, a1 + 152, "RavenPositionContextEstimator::HmmPredictAndUpdate(),LookupActivityStateProbabilityGivenOutdoor failed");
    }
    else if (v27 < 0.0 || v27 > 1.0 || (*(void *)&v27 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
      v26[0] = 12;
      v25[0] = 4;
      char v22 = cnprint::CNLogFormatter::FormatGeneral(a1 + 424, a1 + 152, "RavenPositionContextEstimator::HmmPredictAndUpdate(),LookupActivityStateProbabilityGivenOutdoor returned invalid probability");
    }
    else
    {
      double v31 = v27;
      double v27 = -1.0;
      if (raven::RavenPositionContextStateLookupTables::PositionContextStateLookupTables::LookupActivityStateProbabilityGivenIndoor(a1 + 472, (unsigned __int8 *)a2, &v28, &v27, v18, v19, v20, v21))
      {
        v26[0] = 12;
        v25[0] = 4;
        char v22 = cnprint::CNLogFormatter::FormatGeneral(a1 + 424, a1 + 152, "RavenPositionContextEstimator::HmmPredictAndUpdate(),LookupActivityStateProbabilityGivenIndoor failed");
      }
      else
      {
        if (v27 >= 0.0 && v27 <= 1.0 && (*(void *)&v27 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
        {
          double v30 = v27;
          *uint64_t v35 = (uint64_t)&v29;
          sub_18E022A28(a1 + 16, (uint64_t)v26);
          sub_18E025134((uint64_t)v25, (uint64_t)&v37);
          sub_18E025234((uint64_t)v24, (uint64_t)&v32);
          if (!sub_18E0240DC(a1 + 16, (uint64_t)v26, 1, (uint64_t)v25, (uint64_t)v24))
          {
            __n128 result = *v16;
            *(__n128 *)(a1 + 152) = *v16;
            return result;
          }
          v26[0] = 12;
          v25[0] = 4;
          char v9 = a1 - 88;
          cnprint::CNLogFormatter::FormatGeneral(a1 + 424, a1 + 152, "RavenPositionContextEstimator::HmmPredictAndUpdate(),failed to update,code,%d");
          goto LABEL_5;
        }
        v26[0] = 12;
        v25[0] = 4;
        char v22 = cnprint::CNLogFormatter::FormatGeneral(a1 + 424, a1 + 152, "RavenPositionContextEstimator::HmmPredictAndUpdate(),LookupActivityStateProbabilityGivenIndoor returned invalid probability");
      }
    }
    if (*(char *)(a1 + 447) >= 0) {
      LOBYTE(v15) = v22;
    }
    else {
      uint64_t v15 = *(void *)(a1 + 424);
    }
    goto LABEL_19;
  }
  return result;
}

void raven::RavenPositionContextEstimator::HandleEvidence(uint64_t a1, __n128 *a2, int8x16_t a3, int8x16_t a4)
{
  uint64_t v6 = CNTimeSpan::operator-((uint64_t)&a2[1], (void *)(a1 + 152), a3, a4);
  *(void *)&v21[0] = v6;
  v21[1] = v7;
  if (v6 < 0 || (*(double *)v8.i64 = v7, v7 < 0.0))
  {
    uint64_t v6 = CNTimeSpan::operator-(v21, v8, v9);
    v8.i64[0] = v10;
  }
  if (v6 == 10) {
    goto LABEL_7;
  }
  if (!v6)
  {
    if ((v8.i64[0] & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000) {
      goto LABEL_16;
    }
LABEL_7:
    if (*(double *)v8.i64 <= 0.0) {
      goto LABEL_16;
    }
    goto LABEL_10;
  }
  if (v6 < 11) {
    goto LABEL_16;
  }
LABEL_10:
  if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v6) <= 1)
  {
    __int16 v20 = 12;
    unsigned __int8 v19 = 1;
    unsigned __int8 v11 = cnprint::CNLogFormatter::FormatGeneral((const void **)(a1 + 424), "RavenPositionContextEstimator::HandleEvidence(AvailabilityEvidence),last estimate is too old, re-initialize the HMM");
    if (*(char *)(a1 + 447) >= 0) {
      LOBYTE(v17) = v11;
    }
    else {
      uint64_t v17 = *(void *)(a1 + 424);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v20, &v19, "%s", v12, v13, v14, v15, v16, v17);
  }
  *(unsigned char *)(a1 + 400) = 0;
  *(_OWORD *)(a1 + 408) = *(_OWORD *)(*(void *)(a1 + 8) + 2480);
  raven::RavenPositionContextEstimator::InitializeHiddenMarkovModel((raven::RavenPositionContextEstimator *)a1);
LABEL_16:
  raven::RavenPositionContextEstimator::HmmPredictAndUpdate(a1, a2);
  if (!v18)
  {
    raven::RavenPositionContextEstimator::UpdatePositionContextStateEvent((raven::RavenPositionContextEstimator *)a1);
  }
}

__n128 raven::RavenPositionContextEstimator::HmmPredictAndUpdate(uint64_t a1, __n128 *a2)
{
  if (*(unsigned char *)(a1 + 1) && *(unsigned char *)a1)
  {
    long long v4 = *(_OWORD *)(*(void *)(a1 + 8) + 2496);
    v44[0] = a2[1];
    v44[1] = v4;
    if (sub_18E023AD4(a1 + 16, (uint64_t)v44))
    {
      v29[0] = 12;
      v28[0] = 4;
      char v10 = a1 - 88;
      cnprint::CNLogFormatter::FormatGeneral(a1 + 424, a1 + 152, "RavenPositionContextEstimator::HmmPredictAndUpdate(),failed to predict,code,%d");
LABEL_5:
      if (*(char *)(a1 + 447) >= 0) {
        LOBYTE(v16) = v10;
      }
      else {
        uint64_t v16 = *(void *)(a1 + 424);
      }
LABEL_19:
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v29, v28, "%s", v11, v12, v13, v14, v15, v16);
      return result;
    }
    uint64_t v17 = a2 + 1;
    uint64_t v41 = 0x100000001;
    *(void *)&long long v18 = 0x100000001;
    *((void *)&v18 + 1) = 0x100000001;
    long long v40 = v18;
    uint64_t v39 = &unk_1EDD17F28;
    uint64_t v42 = &v43;
    uint64_t v43 = sub_18E023FA8;
    uint64_t v36 = 0x100000001;
    long long v35 = v18;
    uint64_t v34 = &unk_1EDD17FE8;
    uint64_t v37 = (__n128 **)&v38;
    __n128 v31 = a2[1];
    double v30 = -1.0;
    unsigned __int8 v19 = &a2->n128_u8[8];
    if (raven::RavenPositionContextStateLookupTables::PositionContextStateLookupTables::LookupGnssAvailabilityStateProbabilityGivenOutdoor(a1 + 472, v19, &v30, v5, v6, v7, v8, v9))
    {
      v29[0] = 12;
      v28[0] = 4;
      char v25 = cnprint::CNLogFormatter::FormatGeneral(a1 + 424, a1 + 152, "RavenPositionContextEstimator::HmmPredictAndUpdate(),LookupGnssAvailabilityStateProbabilityGivenOutdoor failed");
    }
    else if (v30 < 0.0 || v30 > 1.0 || (*(void *)&v30 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
      v29[0] = 12;
      v28[0] = 4;
      char v25 = cnprint::CNLogFormatter::FormatGeneral(a1 + 424, a1 + 152, "RavenPositionContextEstimator::HmmPredictAndUpdate(),LookupGnssAvailabilityStateProbabilityGivenOutdoor returned invalid probability");
    }
    else
    {
      double v33 = v30;
      double v30 = -1.0;
      if (raven::RavenPositionContextStateLookupTables::PositionContextStateLookupTables::LookupGnssAvailabilityStateProbabilityGivenIndoor(a1 + 472, v19, &v30, v20, v21, v22, v23, v24))
      {
        v29[0] = 12;
        v28[0] = 4;
        char v25 = cnprint::CNLogFormatter::FormatGeneral(a1 + 424, a1 + 152, "RavenPositionContextEstimator::HmmPredictAndUpdate(),LookupGnssAvailabilityStateProbabilityGivenIndoor failed");
      }
      else
      {
        if (v30 >= 0.0 && v30 <= 1.0 && (*(void *)&v30 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
        {
          double v32 = v30;
          void *v37 = &v31;
          sub_18E022A28(a1 + 16, (uint64_t)v29);
          sub_18E025134((uint64_t)v28, (uint64_t)&v39);
          sub_18E025234((uint64_t)v27, (uint64_t)&v34);
          if (!sub_18E0240DC(a1 + 16, (uint64_t)v29, 1, (uint64_t)v28, (uint64_t)v27))
          {
            __n128 result = *v17;
            *(__n128 *)(a1 + 152) = *v17;
            return result;
          }
          v29[0] = 12;
          v28[0] = 4;
          char v10 = a1 - 88;
          cnprint::CNLogFormatter::FormatGeneral(a1 + 424, a1 + 152, "RavenPositionContextEstimator::HmmPredictAndUpdate(),failed to update,code,%d");
          goto LABEL_5;
        }
        v29[0] = 12;
        v28[0] = 4;
        char v25 = cnprint::CNLogFormatter::FormatGeneral(a1 + 424, a1 + 152, "RavenPositionContextEstimator::HmmPredictAndUpdate(),LookupGnssAvailabilityStateProbabilityGivenIndoor returned invalid probability");
      }
    }
    if (*(char *)(a1 + 447) >= 0) {
      LOBYTE(v16) = v25;
    }
    else {
      uint64_t v16 = *(void *)(a1 + 424);
    }
    goto LABEL_19;
  }
  return result;
}

uint64_t sub_18E0239A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  double v8 = *(double *)(a1 + 16);
  if ((*(void *)&v8 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && (v8 >= 0.0 ? (BOOL v9 = v8 <= 1.0) : (BOOL v9 = 0), v9))
  {
    double v10 = *(double *)(a1 + 24);
    if ((*(void *)&v10 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && v10 >= 0.0 && v10 <= 1.0)
    {
      uint64_t result = 0;
      *(_OWORD *)(a2 + 8) = xmmword_18E1FD1B0;
      uint64_t v13 = *(double **)(a2 + 32);
      *uint64_t v13 = v8;
      v13[1] = 1.0 - v8;
      v13[2] = 1.0 - v10;
      v13[3] = v10;
      return result;
    }
    __int16 v19 = 12;
    unsigned __int8 v18 = 4;
    double v15 = *(double *)(a1 + 8) + (double)*(uint64_t *)a1;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v19, &v18, "time,%.3lf,t-function failure on line %d: %s() %s", a4, a5, a6, a7, a8, SLOBYTE(v15));
  }
  else
  {
    __int16 v17 = 12;
    unsigned __int8 v16 = 4;
    double v14 = *(double *)(a1 + 8) + (double)*(uint64_t *)a1;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v17, &v16, "time,%.3lf,t-function failure on line %d: %s() %s", a4, a5, a6, a7, a8, SLOBYTE(v14));
  }
  return 0xFFFFFFFFLL;
}

uint64_t sub_18E023AD4(uint64_t a1, uint64_t a2)
{
  if (!*(_DWORD *)(a1 + 120)) {
    sub_18DFE2F24(a1 + 64, a1 + 8);
  }
  unsigned int v4 = *(_DWORD *)(a1 + 72);
  unsigned int v5 = *(_DWORD *)(a1 + 76);
  if (v4) {
    BOOL v6 = v5 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  int v7 = v6;
  if (v4 <= v5) {
    unsigned int v8 = *(_DWORD *)(a1 + 76);
  }
  else {
    unsigned int v8 = *(_DWORD *)(a1 + 72);
  }
  if (v7) {
    unint64_t v9 = 0;
  }
  else {
    unint64_t v9 = v8;
  }
  if (v7 == 1)
  {
    uint64_t v61 = 0x100000002;
    long long v59 = &unk_1EDD18B28;
    uint64_t v62 = v63;
    long long v60 = xmmword_18E1F8710;
    sub_18DFE2CC8((uint64_t)&v59, 1.0);
    uint64_t v56 = 0x100000002;
    long long v54 = &unk_1EDD18B28;
    *(void *)&v10.f64[1] = 0x200000002;
    long long v55 = xmmword_18E1FD1A0;
    double v57 = (double *)v58;
    v10.f64[0] = INFINITY;
LABEL_22:
    sub_18DFE3240((uint64_t)&v59, (uint64_t)&v54, v10);
    goto LABEL_25;
  }
  double v11 = *(double *)(a1 + 128);
  uint64_t v56 = 0x100000002;
  long long v54 = &unk_1EDD18B28;
  long long v48 = xmmword_18E1FD1A0;
  long long v55 = xmmword_18E1FD1A0;
  double v57 = (double *)v58;
  uint64_t v12 = (cnprint::CNPrinter *)sub_18DFF2FDC(a1 + 64, 1, (uint64_t)&v54);
  double v13 = *v57;
  if (fabs(*v57 + -1.0) > v11)
  {
    if (cnprint::CNPrinter::GetLogLevel(v12) <= 1)
    {
      LOWORD(v54) = 2;
      LOBYTE(v59) = 1;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v54, (unsigned __int8 *)&v59, "WARNING: HMM prediction passed a non-normalized probability vector.", v14, v15, v16, v17, v18, 2);
    }
    if ((v8 & 0x80000000) == 0)
    {
      sub_18E024D90((uint64_t)&v59, a1 + 64);
      int32x4_t v19 = vdupq_lane_s32((int32x2_t)(v8 | 0x100000000), 0);
      v19.i32[1] = 1;
      long long v60 = (__int128)v19;
      uint64_t v56 = 0x100000002;
      long long v54 = &unk_1EDD18B28;
      *(void *)&v10.f64[1] = 0x200000002;
      long long v55 = v48;
      double v57 = (double *)v58;
      v10.f64[0] = 1.0 / v13;
      goto LABEL_22;
    }
LABEL_43:
    __assert_rtn("Reshape", "cnmatrix.h", 2936, "nr >= 0");
  }
  if ((v8 & 0x80000000) != 0) {
    goto LABEL_43;
  }
  sub_18E024D90((uint64_t)&v54, a1 + 64);
  int32x4_t v20 = vdupq_lane_s32((int32x2_t)(v8 | 0x100000000), 0);
  v20.i32[1] = 1;
  long long v55 = (__int128)v20;
LABEL_25:
  sub_18DFE2F24(a1 + 64, (uint64_t)&v54);
  *(_DWORD *)(a1 + 120) = 1;
  uint64_t v56 = 0x200000002;
  long long v54 = &unk_1EDD18BB8;
  long long v55 = xmmword_18E1FD1B0;
  double v57 = (double *)v58;
  double v27 = (cnprint::CNPrinter *)sub_18E0239A0(a2, (uint64_t)&v54, v21, v22, v23, v24, v25, v26);
  if (v27)
  {
    LOWORD(v59) = 2;
    LOBYTE(v49) = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v59, (unsigned __int8 *)&v49, "ERROR: HMM transition probability function failed.", v28, v29, v30, v31, v32, v48);
    return 27;
  }
  else
  {
    if (!v9) {
      goto LABEL_39;
    }
    unint64_t v34 = 0;
    BOOL v35 = 0;
    uint64_t v36 = v57;
LABEL_29:
    double v37 = 0.0;
    uint64_t v38 = v36;
    unint64_t v39 = v9;
    while (1)
    {
      double v40 = *v38;
      if (*v38 < 0.0 || v40 > 1.0) {
        break;
      }
      double v37 = v37 + v40;
      ++v38;
      if (!--v39)
      {
        if (fabs(v37 + -1.0) <= *(double *)(a1 + 128))
        {
          ++v34;
          v36 += SHIDWORD(v55);
          BOOL v35 = v34 >= v9;
          if (v34 != v9) {
            goto LABEL_29;
          }
        }
        break;
      }
    }
    if (!v35)
    {
      if (cnprint::CNPrinter::GetLogLevel(v27) <= 1)
      {
        LOWORD(v59) = 2;
        LOBYTE(v49) = 1;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v59, (unsigned __int8 *)&v49, "ERROR: HMM transition probability matrix is invalid.", v43, v44, v45, v46, v47, v48);
      }
      return 28;
    }
    else
    {
LABEL_39:
      uint64_t v61 = 0x100000002;
      long long v60 = xmmword_18E1FD1A0;
      long long v59 = &unk_1EDD18B28;
      uint64_t v62 = v63;
      sub_18DFE2B44((uint64_t)&v54, a1 + 64, (uint64_t)&v59);
      sub_18DFE2F24(a1 + 8, (uint64_t)&v59);
      uint64_t v51 = 0x100000002;
      unsigned __int8 v49 = &unk_1EDD18B28;
      long long v50 = xmmword_18E1FD1A0;
      unint64_t v52 = (double *)&v53;
      sub_18DFF2FDC(a1 + 8, 1, (uint64_t)&v49);
      v42.f64[0] = 1.0 / *v52;
      uint64_t v61 = 0x100000002;
      long long v60 = xmmword_18E1FD1A0;
      long long v59 = &unk_1EDD18B28;
      uint64_t v62 = v63;
      sub_18DFE3240(a1 + 8, (uint64_t)&v59, v42);
      sub_18DFE2F24(a1 + 8, (uint64_t)&v59);
      uint64_t result = 0;
      *(_DWORD *)(a1 + 120) = 0;
    }
  }
  return result;
}

uint64_t sub_18E023FA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  double v8 = *(double *)(a1 + 16);
  if ((*(void *)&v8 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && (v8 >= 0.0 ? (BOOL v9 = v8 <= 1.0) : (BOOL v9 = 0), v9))
  {
    double v10 = *(double *)(a1 + 24);
    if ((*(void *)&v10 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && v10 >= 0.0 && v10 <= 1.0)
    {
      uint64_t v12 = 0;
      *(_OWORD *)(a2 + 8) = xmmword_18E1FD1A0;
      uint64_t v14 = *(void *)(a2 + 32);
      *(double *)uint64_t v14 = v8;
      *(void *)(v14 + 8) = *(void *)(a1 + 24);
      return v12;
    }
    __int16 v20 = 12;
    unsigned __int8 v19 = 4;
    double v16 = *(double *)(a1 + 8) + (double)*(uint64_t *)a1;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v20, &v19, "time,%.3lf,e-function failure on line %d: %s() %s", a4, a5, a6, a7, a8, SLOBYTE(v16));
  }
  else
  {
    __int16 v18 = 12;
    unsigned __int8 v17 = 4;
    double v15 = *(double *)(a1 + 8) + (double)*(uint64_t *)a1;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v18, &v17, "time,%.3lf,e-function failure on line %d: %s() %s", a4, a5, a6, a7, a8, SLOBYTE(v15));
  }
  return 0xFFFFFFFFLL;
}

uint64_t sub_18E0240DC(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  double v9 = *(double *)(a1 + 128);
  if (*(_DWORD *)(a2 + 8)) {
    BOOL v10 = *(_DWORD *)(a2 + 12) == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10)
  {
    uint64_t v72 = 0x100000002;
    v70 = &unk_1EDD18B28;
    v73 = v74;
    long long v71 = xmmword_18E1FD1A0;
    sub_18DFE2CC8((uint64_t)&v70, 1.0);
    uint64_t v77 = 0x100000002;
    *(void *)&v11.f64[1] = 0x200000002;
    long long v76 = xmmword_18E1FD1A0;
    v75 = &unk_1EDD18B28;
    v78 = (double *)v79;
    v11.f64[0] = 0.5;
  }
  else
  {
    uint64_t v77 = 0x100000002;
    long long v76 = xmmword_18E1FD1A0;
    v75 = &unk_1EDD18B28;
    v78 = (double *)v79;
    double v13 = (cnprint::CNPrinter *)sub_18DFF2FDC(a2, 1, (uint64_t)&v75);
    double v14 = *v78;
    if (fabs(*v78 + -1.0) <= v9)
    {
      sub_18E024D90((uint64_t)&v75, a2);
      long long v76 = xmmword_18E1FD1A0;
      goto LABEL_13;
    }
    if (cnprint::CNPrinter::GetLogLevel(v13) <= 1)
    {
      LOWORD(v75) = 2;
      LOBYTE(v70) = 1;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v75, (unsigned __int8 *)&v70, "WARNING: HMM update passed a non-normalized probability vector.", v15, v16, v17, v18, v19, v63);
    }
    sub_18E024D90((uint64_t)&v70, a2);
    *(void *)&v11.f64[1] = 0x200000002;
    long long v71 = xmmword_18E1FD1A0;
    uint64_t v77 = 0x100000002;
    long long v76 = xmmword_18E1FD1A0;
    v75 = &unk_1EDD18B28;
    v78 = (double *)v79;
    v11.f64[0] = 1.0 / v14;
  }
  sub_18DFE3240((uint64_t)&v70, (uint64_t)&v75, v11);
LABEL_13:
  sub_18DFE2F24(a1 + 8, (uint64_t)&v75);
  sub_18E024D90((uint64_t)&v75, a1 + 8);
  uint64_t v20 = 0;
  long long v21 = xmmword_18E1FD1A0;
  while (1)
  {
    uint64_t v22 = *(uint64_t (**)(void, void **))(*(void *)(a4 + 32) + 8 * v20);
    uint64_t v72 = 0x100000002;
    v70 = &unk_1EDD18B28;
    long long v71 = v21;
    v73 = v74;
    uint64_t v23 = (cnprint::CNPrinter *)v22(*(void *)(*(void *)(a5 + 32) + 8 * v20), &v70);
    if (v23) {
      break;
    }
    char v30 = 0;
    uint64_t v31 = 0;
    double v32 = 0.0;
    double v33 = v73;
    do
    {
      double v34 = *(double *)&v73[8 * v31];
      if (v34 < 0.0 || v34 > 1.0)
      {
        LOWORD(v64) = 2;
        unsigned __int8 v69 = 4;
        uint64_t v62 = "ERROR: HMM emission probability matrix is invalid.";
LABEL_41:
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v64, &v69, v62, v24, v25, v26, v27, v28, v63);
        return 30;
      }
      char v36 = v30;
      double v32 = v32 + v34;
      char v30 = 1;
      uint64_t v31 = 1;
    }
    while ((v36 & 1) == 0);
    if (fabs(v32) <= v9)
    {
      LOWORD(v64) = 2;
      unsigned __int8 v69 = 4;
      uint64_t v62 = "ERROR: HMM emission probability matrix is null matrix";
      goto LABEL_41;
    }
    uint64_t v37 = 0;
    uint64_t v38 = v78;
    do
    {
      v38[v37] = *(double *)&v33[v37 * 8] * v38[v37];
      ++v37;
    }
    while (v37 != 2);
    uint64_t v39 = DWORD1(v76);
    if (DWORD1(v76))
    {
      uint64_t v40 = 0;
      unsigned int v41 = v76;
      uint64_t v42 = v76 - 1;
      int v43 = 1;
      do
      {
        double v44 = v38[v41 * v40];
        unsigned int v45 = v43;
        uint64_t v46 = v42;
        if (v41 >= 2)
        {
          do
          {
            double v44 = v44 + v38[v45++];
            --v46;
          }
          while (v46);
        }
        v68[v40++] = v44;
        v43 += v41;
      }
      while (v40 != v39);
    }
    v29.n128_f64[0] = v68[0];
    if (fabs(v68[0]) < 2.22044605e-16)
    {
      if (cnprint::CNPrinter::GetLogLevel(v23) <= 1)
      {
        LOWORD(v64) = 2;
        unsigned __int8 v69 = 1;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v64, &v69, "HMM state is null vector after update; revert to input state",
          v47,
          v48,
          v49,
          v50,
          v51,
          v63);
      }
      __n128 v29 = sub_18DFE2F24((uint64_t)&v75, a1 + 8);
      uint64_t v52 = DWORD1(v76);
      if (DWORD1(v76))
      {
        uint64_t v53 = 0;
        unsigned int v54 = v76;
        long long v55 = v78;
        uint64_t v56 = v76 - 1;
        int v57 = 1;
        do
        {
          double v58 = v55[v54 * v53];
          unsigned int v59 = v57;
          uint64_t v60 = v56;
          if (v54 >= 2)
          {
            do
            {
              double v58 = v58 + v55[v59++];
              --v60;
            }
            while (v60);
          }
          v68[v53++] = v58;
          v57 += v54;
        }
        while (v53 != v52);
      }
      v29.n128_f64[0] = v68[0];
    }
    uint64_t v66 = 0x100000002;
    long long v64 = &unk_1EDD18B28;
    long long v65 = xmmword_18E1FD1A0;
    v67 = v68;
    v29.n128_f64[0] = 1.0 / v29.n128_f64[0];
    sub_18DFE3240((uint64_t)&v75, (uint64_t)&v64, (float64x2_t)v29);
    sub_18DFE2F24((uint64_t)&v75, (uint64_t)&v64);
    long long v21 = xmmword_18E1FD1A0;
    if (++v20 == a3)
    {
      sub_18DFE2F24(a1 + 64, (uint64_t)&v75);
      uint64_t result = 0;
      *(_DWORD *)(a1 + 120) = 1;
      return result;
    }
  }
  LOWORD(v64) = 2;
  unsigned __int8 v69 = 4;
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v64, &v69, "ERROR: HMM emission function failed.", v24, v25, v26, v27, v28, v63);
  return 29;
}

void *sub_18E0245D8(void *result)
{
  *uint64_t result = &unk_1EDD173B8;
  return result;
}

void *sub_18E0245F8(void *result)
{
  *uint64_t result = &unk_1EDD171A8;
  return result;
}

void *sub_18E024618(void *result)
{
  *uint64_t result = &unk_1EDD171A8;
  return result;
}

uint64_t raven::RavenPositionContextEstimator::HandleEvent(raven::RavenPositionContextEstimator *this, const raven::ActivityStateEvent *a2)
{
  if (!*(unsigned char *)this) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v9 = (*(uint64_t (**)(const raven::ActivityStateEvent *))(*(void *)a2 + 16))(a2);
  uint64_t v10 = v4;
  v8[0] = *((unsigned char *)a2 + 104);
  raven::RavenPositionContextEstimator::HandleEvidence((uint64_t)this, v8, v5, v6);
  return 0;
}

uint64_t raven::RavenPositionContextEstimator::HandleEvent(raven::RavenPositionContextEstimator *this, const raven::GnssAvailabilityEvent *a2)
{
  if (!*(unsigned char *)this) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v9 = (*(uint64_t (**)(const raven::GnssAvailabilityEvent *))(*(void *)a2 + 16))(a2);
  uint64_t v10 = v4;
  v8.n128_u64[0] = *((void *)a2 + 13);
  v5.i64[0] = v8.n128_u64[0];
  v8.n128_u8[8] = *((unsigned char *)a2 + 112);
  raven::RavenPositionContextEstimator::HandleEvidence((uint64_t)this, &v8, v5, v6);
  return 0;
}

uint64_t raven::RavenPositionContextEstimator::HandleEvent(raven::RavenPositionContextEstimator *this, const raven::GnssPreprocessedMeasurementsEvent *a2)
{
  if (!*(unsigned char *)this) {
    return 0xFFFFFFFFLL;
  }
  double v3 = this;
  v41[0] = 0;
  long long v42 = 0u;
  memset(v43, 0, sizeof(v43));
  int8x16_t v5 = (uint64_t *)*((void *)a2 + 12);
  uint64_t v4 = (uint64_t *)*((void *)a2 + 13);
  if (v5 != v4)
  {
    unsigned int v35 = 0;
    while (1)
    {
      uint64_t v6 = *v5;
      if (*v5)
      {
        if (!*(unsigned char *)(v6 + 24))
        {
          __int16 v40 = 12;
          unsigned __int8 v39 = 2;
          double v36 = COERCE_DOUBLE((*(uint64_t (**)(const raven::GnssPreprocessedMeasurementsEvent *))(*(void *)a2 + 16))(a2));
          uint64_t v37 = v13;
          cnprint::CNLogFormatter::FormatGeneral((uint64_t)v3 + 424, (uint64_t)&v36, "Warning: RavenPositionContextEstimator::HandleEvent(GnssPreprocessedMeasurementsEvent),unknown constellation");
          goto LABEL_10;
        }
        if (*(double *)(v6 + 264) >= *(double *)(*((void *)v3 + 1) + 616) * 0.0174532925)
        {
          uint64_t v16 = *(void *)(v6 + 328);
          uint64_t v15 = *(void *)(v6 + 336);
          if (v15 == v16) {
            goto LABEL_30;
          }
          while (2)
          {
            if (*(_DWORD *)(v16 + 96) == 1)
            {
              unsigned int v27 = *(unsigned __int8 *)(v16 + 100);
              BOOL v28 = v27 > 0xA;
              int v29 = (1 << v27) & 0x545;
              if (v28 || v29 == 0)
              {
                double v17 = *(double *)(v6 + 264);
                double v36 = *(float *)(v16 + 112);
                uint64_t v18 = (cnprint::CNPrinter *)sub_18DFF11E4((uint64_t)v41, &v36, v17);
                if (v18)
                {
                  __int16 v40 = 12;
                  unsigned __int8 v39 = 4;
                  double v36 = COERCE_DOUBLE((*(uint64_t (**)(const raven::GnssPreprocessedMeasurementsEvent *))(*(void *)a2 + 16))(a2));
                  uint64_t v37 = v19;
                  cnprint::CNLogFormatter::FormatGeneral((uint64_t)v3 + 424, (uint64_t)&v36, "RavenPositionContextEstimator::HandleEvent(GnssPreprocessedMeasurementsEvent),failed to add cno %.3f to OnlineStatisticsEstimator");
                }
                else
                {
                  ++v35;
                  this = (raven::RavenPositionContextEstimator *)cnprint::CNPrinter::GetLogLevel(v18);
                  if (this) {
                    goto LABEL_29;
                  }
                  __int16 v40 = 12;
                  unsigned __int8 v39 = 0;
                  double v36 = COERCE_DOUBLE((*(uint64_t (**)(const raven::GnssPreprocessedMeasurementsEvent *))(*(void *)a2 + 16))(a2));
                  uint64_t v37 = v26;
                  sub_18E017C64(v6);
                  cnprint::CNLogFormatter::FormatGeneral((uint64_t)v3 + 424, (uint64_t)&v36, "RavenPositionContextEstimator::HandleEvent(GnssPreprocessedMeasurementsEvent),satID,%s,obs,%s,cno,%.2f");
                }
                if (*((char *)v3 + 447) >= 0) {
                  LOBYTE(v25) = (_BYTE)v3 - 88;
                }
                else {
                  uint64_t v25 = *((void *)v3 + 53);
                }
                cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v40, &v39, "%s", v20, v21, v22, v23, v24, v25);
              }
            }
LABEL_29:
            v16 += 208;
            if (v16 == v15) {
              goto LABEL_30;
            }
            continue;
          }
        }
        this = (raven::RavenPositionContextEstimator *)cnprint::CNPrinter::GetLogLevel(this);
        if (this <= 1)
        {
          __int16 v40 = 12;
          unsigned __int8 v39 = 1;
          double v36 = COERCE_DOUBLE((*(uint64_t (**)(const raven::GnssPreprocessedMeasurementsEvent *))(*(void *)a2 + 16))(a2));
          uint64_t v37 = v7;
          sub_18E017C64(v6);
          cnprint::CNLogFormatter::FormatGeneral((uint64_t)v3 + 424, (uint64_t)&v36, "%s,RavenPositionContextEstimator::HandleEvent(GnssPreprocessedMeasurementsEvent),satellite excluded,low elevation,%.2f deg");
LABEL_10:
          if (*((char *)v3 + 447) >= 0) {
            LOBYTE(v14) = (_BYTE)v3 - 88;
          }
          else {
            uint64_t v14 = *((void *)v3 + 53);
          }
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v40, &v39, "%s", v8, v9, v10, v11, v12, v14);
        }
      }
LABEL_30:
      v5 += 2;
      if (v5 == v4) {
        goto LABEL_34;
      }
    }
  }
  unsigned int v35 = 0;
LABEL_34:
  uint64_t v37 = (*(uint64_t (**)(const raven::GnssPreprocessedMeasurementsEvent *))(*(void *)a2 + 16))(a2);
  uint64_t v38 = v32;
  v33.i32[1] = v43[2];
  *(float *)v33.i32 = *(double *)&v43[1];
  double v36 = COERCE_DOUBLE(__PAIR64__(v35, v33.u32[0]));
  raven::RavenPositionContextEstimator::HandleEvidence((uint64_t)v3, (uint64_t)&v36, v33, v34);
  return 0;
}

uint64_t raven::RavenPositionContextEstimator::HandleEvent(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 168) = *(void *)(a2 + 1352);
  *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 1344);
  return 0;
}

{
  long long v2;
  long long v3;
  long long v4;
  long long v5;
  long long v6;

  uint64_t v2 = *(_OWORD *)(a2 + 8);
  double v3 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 224) = v3;
  *(_OWORD *)(a1 + 192) = v2;
  uint64_t v4 = *(_OWORD *)(a2 + 56);
  int8x16_t v5 = *(_OWORD *)(a2 + 72);
  uint64_t v6 = *(_OWORD *)(a2 + 88);
  *(unsigned char *)(a1 + 288) = *(unsigned char *)(a2 + 104);
  *(_OWORD *)(a1 + 256) = v5;
  *(_OWORD *)(a1 + 272) = v6;
  *(_OWORD *)(a1 + 240) = v4;
  return 0;
}

uint64_t raven::RavenPositionContextEstimator::HandleEvent(raven::RavenPositionContextEstimator *this, const raven::TimeMarkEvent *a2)
{
  if (*((unsigned char *)this + 1)
    && (*(unsigned char *)this
     || (v5[0] = (*(uint64_t (**)(const raven::TimeMarkEvent *))(*(void *)a2 + 16))(a2),
         v5[1] = v3,
         !raven::RavenPositionContextEstimator::Initialize(this, (uint64_t)v5))))
  {
    return 0;
  }
  else
  {
    return 0xFFFFFFFFLL;
  }
}

uint64_t raven::RavenPositionContextEstimator::PopulateEvent(raven::RavenPositionContextEstimator *this, raven::PositionContextStateEvent *a2)
{
  if (!*((unsigned char *)this + 1))
  {
    __int16 v31 = 12;
    unsigned __int8 v30 = 2;
    unsigned __int8 v12 = cnprint::CNLogFormatter::FormatWarning((raven::RavenPositionContextEstimator *)((char *)this + 424), "RavenPositionContextEstimator::PopulateEvent(),estimator is not configured");
    if (*((char *)this + 447) >= 0) {
      LOBYTE(v18) = v12;
    }
    else {
      uint64_t v18 = *((void *)this + 53);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v31, &v30, "%s", v13, v14, v15, v16, v17, v18);
    return 0xFFFFFFFFLL;
  }
  if (!*(unsigned char *)this)
  {
    __int16 v29 = 12;
    unsigned __int8 v28 = 2;
    unsigned __int8 v19 = cnprint::CNLogFormatter::FormatWarning((raven::RavenPositionContextEstimator *)((char *)this + 424), "RavenPositionContextEstimator::PopulateEvent(),estimator is not initialized");
    if (*((char *)this + 447) >= 0) {
      LOBYTE(v25) = v19;
    }
    else {
      uint64_t v25 = *((void *)this + 53);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v29, &v28, "%s", v20, v21, v22, v23, v24, v25);
    return 0xFFFFFFFFLL;
  }
  *((unsigned char *)a2 + 104) = *((unsigned char *)this + 400);
  *((_OWORD *)a2 + 7) = *(_OWORD *)((char *)this + 408);
  if (cnprint::CNPrinter::GetLogLevel(this) <= 1)
  {
    __int16 v27 = 12;
    unsigned __int8 v26 = 1;
    char v4 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 424, (uint64_t)a2 + 8, "RavenPositionContextEstimator::PopulateEvent(),estimated_state,%u,prob_indoor,%.3lf,prob_outdoor,%.3lf", *((unsigned __int8 *)a2 + 104), *((double *)a2 + 14), *((double *)a2 + 15));
    if (*((char *)this + 447) >= 0) {
      LOBYTE(v10) = v4;
    }
    else {
      uint64_t v10 = *((void *)this + 53);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v27, &v26, "%s", v5, v6, v7, v8, v9, v10);
  }
  return 0;
}

double raven::RavenPositionContextEstimator::Reset(raven::RavenPositionContextEstimator *this)
{
  *(unsigned char *)this = 0;
  *((void *)this + 19) = 0;
  *((unsigned char *)this + 288) = 0;
  double result = NAN;
  *((_OWORD *)this + 10) = xmmword_18E1FD1C0;
  *((unsigned char *)this + 176) = 0;
  *((unsigned char *)this + 400) = 0;
  *((void *)this + 51) = 0x3FE0000000000000;
  *((void *)this + 52) = 0x3FE0000000000000;
  return result;
}

void sub_18E024D30(void *a1)
{
  *a1 = &unk_1EDD17478;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E024D60(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E024D6C(uint64_t a1)
{
  sub_18DEF3CF4(a1, v1);
}

__n128 sub_18E024D90(uint64_t a1, uint64_t a2)
{
  result.n128_u64[0] = 0x100000002;
  *(void *)(a1 + 24) = 0x100000002;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1EDD18B28;
  if (a1 == a2)
  {
    uint64_t v17 = "this != &(A)";
    int v18 = 603;
    goto LABEL_16;
  }
  int v3 = *(_DWORD *)(a2 + 8);
  int v4 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = v4;
  uint64_t v5 = (v4 * v3);
  *(_DWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 20) = v3;
  uint64_t v6 = (unint64_t *)(a1 + 40);
  *(void *)(a1 + 32) = a1 + 40;
  if (*(_DWORD *)(a2 + 8) > 2u)
  {
    uint64_t v17 = "this->max_num_rows_ >= A.num_rows_";
    int v18 = 616;
    goto LABEL_16;
  }
  if (*(_DWORD *)(a2 + 12) >= 2u)
  {
    uint64_t v17 = "this->max_num_cols_ >= A.num_cols_";
    int v18 = 617;
LABEL_16:
    __assert_rtn("CNMatrix", "cnmatrix.h", v18, v17);
  }
  int v7 = *(_DWORD *)(a2 + 16);
  if (v7 > 3)
  {
    uint64_t v10 = (v7 - 2);
    uint64_t v11 = *(long long **)(a2 + 32);
    uint64_t v12 = (v7 - 1) >> 1;
    uint64_t v13 = v11;
    uint64_t v14 = (_OWORD *)(a1 + 40);
    do
    {
      long long v15 = *v13++;
      *v14++ = v15;
      --v12;
    }
    while (v12);
    uint64_t v16 = v10;
    __n128 result = *(__n128 *)((char *)v11 + v16 * 8);
    *(__n128 *)&v6[v16] = result;
  }
  else if ((int)v5 >= 1)
  {
    uint64_t v8 = *(unint64_t **)(a2 + 32);
    do
    {
      unint64_t v9 = *v8++;
      result.n128_u64[0] = v9;
      *v6++ = v9;
      --v5;
    }
    while (v5);
  }
  return result;
}

void sub_18E024EC0(_Unwind_Exception *a1)
{
  *uint64_t v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

void *sub_18E024EE0(void *result)
{
  *__n128 result = &unk_1EDD17478;
  return result;
}

void sub_18E024F00(void *a1)
{
  *a1 = &unk_1EDD17478;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E024F30(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E024F3C(uint64_t a1)
{
  sub_18DEF3CF4(a1, v1);
}

void sub_18E024F60(void *a1)
{
  *a1 = &unk_1EDD171A8;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E024F90(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E024F9C(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    unsigned int v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      int v4 = *(_DWORD *)(a1 + 16);
      int v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        uint64_t v6 = (v4 - 1);
        uint64_t v7 = 1;
        do
        {
          uint64_t v8 = &v13[v7];
          if (!v13[v7])
          {
            uint64_t v9 = *(void *)(*(void *)(a1 + 32) + 8 * v7);
            int v10 = v7;
            do
            {
              int v10 = (int)(v10 * (v3 + v1 - v5)) % (int)v6;
              uint64_t v11 = *(void *)(a1 + 32);
              uint64_t v12 = *(void *)(v11 + 8 * v10);
              *(void *)(v11 + 8 * v10) = v9;
              *uint64_t v8 = 1;
              uint64_t v8 = &v13[v10];
              uint64_t v9 = v12;
            }
            while (!*v8);
          }
          ++v7;
        }
        while (v7 != v6);
      }
    }
  }
}

void sub_18E025074(void *a1)
{
  *a1 = &unk_1EDD173B8;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E0250A4(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E0250B0(uint64_t a1)
{
  sub_18DFF2F14(a1, v1);
}

void sub_18E0250D4(void *a1)
{
  *a1 = &unk_1EDD171A8;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E025104(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E025110(uint64_t a1)
{
  sub_18DFF2F14(a1, &v1);
}

uint64_t sub_18E025134(uint64_t result, uint64_t a2)
{
  *(void *)(result + 24) = 0x100000002;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)__n128 result = &unk_1EDD18A38;
  int v2 = *(_DWORD *)(a2 + 8);
  int v3 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(result + 8) = v2;
  *(_DWORD *)(result + 12) = v3;
  int v4 = v3 * v2;
  *(_DWORD *)(result + 16) = v4;
  *(_DWORD *)(result + 20) = v2;
  *(void *)(result + 32) = result + 40;
  if (*(_DWORD *)(a2 + 8) > 2u)
  {
    uint64_t v7 = "this->max_num_rows_ >= A.NumRows()";
    int v8 = 567;
    goto LABEL_9;
  }
  if (*(_DWORD *)(a2 + 12) > 1u)
  {
    uint64_t v7 = "this->max_num_cols_ >= A.NumCols()";
    int v8 = 568;
LABEL_9:
    __assert_rtn("CNMatrix", "cnmatrix.h", v8, v7);
  }
  if (v4 >= 1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 8 * v4;
    do
    {
      *(void *)(*(void *)(result + 32) + v5) = *(void *)(*(void *)(a2 + 32) + v5);
      v5 += 8;
    }
    while (v6 != v5);
  }
  return result;
}

void sub_18E025214(_Unwind_Exception *a1)
{
  *char v1 = &unk_1EDD171A8;
  _Unwind_Resume(a1);
}

uint64_t sub_18E025234(uint64_t result, uint64_t a2)
{
  *(void *)(result + 24) = 0x100000002;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)__n128 result = &unk_1EDD18AC8;
  int v2 = *(_DWORD *)(a2 + 8);
  int v3 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(result + 8) = v2;
  *(_DWORD *)(result + 12) = v3;
  int v4 = v3 * v2;
  *(_DWORD *)(result + 16) = v4;
  *(_DWORD *)(result + 20) = v2;
  *(void *)(result + 32) = result + 40;
  if (*(_DWORD *)(a2 + 8) > 2u)
  {
    uint64_t v7 = "this->max_num_rows_ >= A.NumRows()";
    int v8 = 567;
    goto LABEL_9;
  }
  if (*(_DWORD *)(a2 + 12) > 1u)
  {
    uint64_t v7 = "this->max_num_cols_ >= A.NumCols()";
    int v8 = 568;
LABEL_9:
    __assert_rtn("CNMatrix", "cnmatrix.h", v8, v7);
  }
  if (v4 >= 1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 8 * v4;
    do
    {
      *(void *)(*(void *)(result + 32) + v5) = *(void *)(*(void *)(a2 + 32) + v5);
      v5 += 8;
    }
    while (v6 != v5);
  }
  return result;
}

void sub_18E025314(_Unwind_Exception *a1)
{
  *char v1 = &unk_1EDD173B8;
  _Unwind_Resume(a1);
}

void raven::RavenPNTEstimator::RavenPNTEstimator(raven::RavenPNTEstimator *this)
{
  raven::RavenEstimator::RavenEstimator((uint64_t)this, 3);
  *(void *)uint64_t v2 = &unk_1EDD13E28;
  *(unsigned char *)(v2 + 2536) = 0;
  *(_OWORD *)(v2 + 2544) = 0u;
  __asm { FMOV            V0.2D, #1.0 }
  *(_OWORD *)(v2 + 2560) = _Q0;
  *(_OWORD *)(v2 + 2576) = 0u;
  *(_OWORD *)(v2 + 2592) = 0u;
  *(_OWORD *)(v2 + 2608) = 0u;
  *(_OWORD *)(v2 + 2624) = 0u;
  *(_OWORD *)(v2 + 2640) = 0u;
  *(_OWORD *)(v2 + 2656) = 0u;
  *(_OWORD *)(v2 + 2672) = _Q0;
  *((void *)this + 336) = 0x3FF0000000000000;
  sub_18E0618EC(v2 + 2696);
  *((unsigned char *)this + 3152) = 0;
  *((void *)this + 337) = &unk_1EDD14C50;
  *(_OWORD *)(v8 + 5920) = 0u;
  *(_OWORD *)(v8 + 5936) = 0u;
  sub_18E0618EC((uint64_t)this + 8648);
  *((unsigned char *)this + 9104) = 0;
  *((void *)this + 1081) = &unk_1EDD14C50;
  v9[370] = 0u;
  v9[371] = 0u;
  v9[372] = 0u;
  *((void *)this + 1830) = 0x10000001CLL;
  *((void *)this + 1827) = &unk_1EDD188B8;
  *((_OWORD *)this + 914) = xmmword_18E1FD5F0;
  *((void *)this + 1831) = (char *)this + 14656;
  sub_18E069A68((uint64_t)this + 14880);
}

void sub_18E025EE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,void *a21,void *a22,uint64_t a23,void *a24,uint64_t a25,void *a26,uint64_t a27,void **a28,void *a29,unsigned char *a30,unsigned char *a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35)
{
  sub_18E06618C(v36);
  *unsigned __int8 v39 = a17;
  uint64_t v42 = v35 + 61240;
  uint64_t v43 = -16800;
  do
  {
    void *v37 = &unk_1EDD0A3C0;
    v37 -= 6;
    v42 -= 48;
    v43 += 48;
  }
  while (v43);
  *unsigned __int8 v39 = &unk_1EDD0A6C8;
  *(void *)(v35 + 27592) = a18;
  uint64_t v44 = v35 + 44392;
  uint64_t v45 = -16800;
  do
  {
    *uint64_t v38 = &unk_1EDD0A3F0;
    v38 -= 6;
    v44 -= 48;
    v45 += 48;
  }
  while (v45);
  **(void **)(v40 - 160) = &unk_1EDD0A710;
  *a21 = a20;
  *a19 = &unk_1EDD0A858;
  **(void **)(v40 - 152) = &unk_1EDD0A858;
  *a24 = a23;
  *a22 = &unk_1EDD0A858;
  if (*a30) {
    *a30 = 0;
  }
  if (*a31) {
    *a31 = 0;
  }
  if (*(unsigned char *)(a32 + 144)) {
    *(unsigned char *)(a32 + 144) = 0;
  }
  *a26 = a25;
  sub_18E067E60(a27);
  sub_18E06B7A8(v35 + 16776, *a28);
  sub_18E06805C(a29);
  sub_18E06B384(a33);
  *(void *)(v35 + 14616) = &unk_1EDD17478;
  sub_18E026798(a35);
  sub_18E026798(*(void *)(v40 - 200));
  sub_18E0268B0(v35);
  _Unwind_Resume(a1);
}

void raven::RavenPNTEstimator::Reset(raven::RavenPNTEstimator *this)
{
  LOWORD(v14) = 12;
  unsigned __int8 v19 = 2;
  char v2 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)this + 80, "Resetting estimator");
  if (*((char *)this + 2511) >= 0) {
    LOBYTE(v8) = v2;
  }
  else {
    uint64_t v8 = *((void *)this + 311);
  }
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v14, &v19, "%s", v3, v4, v5, v6, v7, v8);
  sub_18E06B7A8((uint64_t)this + 16776, *((void **)this + 2098));
  *((void *)this + 2097) = (char *)this + 16784;
  *((_OWORD *)this + 1049) = 0u;
  *((unsigned char *)this + 2536) = 0;
  *((_OWORD *)this + 159) = 0u;
  __asm { FMOV            V0.2D, #1.0 }
  *((_OWORD *)this + 160) = _Q0;
  sub_18E059DFC((uint64_t)this + 2696);
  sub_18E059DFC((uint64_t)this + 8648);
  *(_OWORD *)((char *)this + 14600) = 0u;
  uint64_t v16 = 0x10000001CLL;
  uint64_t v14 = &unk_1EDD188B8;
  long long v15 = xmmword_18E1FD5F0;
  uint64_t v17 = &v18;
  sub_18DFE2F24((uint64_t)this + 14616, (uint64_t)&v14);
  sub_18E069A68((uint64_t)&v14);
}

void *sub_18E026658(void *result)
{
  uint64_t v1 = 2100;
  do
  {
    result[v1] = &unk_1EDD0A3C0;
    v1 -= 6;
  }
  while (v1 * 8);
  *__n128 result = &unk_1EDD0A6C8;
  return result;
}

void *sub_18E0266A4(void *result)
{
  uint64_t v1 = 2100;
  do
  {
    result[v1] = &unk_1EDD0A3F0;
    v1 -= 6;
  }
  while (v1 * 8);
  *__n128 result = &unk_1EDD0A710;
  return result;
}

void *sub_18E0266F0(void *result)
{
  result[1] = &unk_1EDD0B168;
  result[322] = &unk_1EDD0A858;
  *__n128 result = &unk_1EDD0A858;
  return result;
}

void *sub_18E026750(void *result)
{
  *__n128 result = &unk_1EDD0A6A8;
  return result;
}

void *sub_18E026778(void *result)
{
  *__n128 result = &unk_1EDD17478;
  return result;
}

uint64_t sub_18E026798(uint64_t a1)
{
  *(void *)a1 = &unk_1EDD14C50;
  uint64_t v3 = (void **)(a1 + 5920);
  sub_18E068688(&v3);
  *(void *)a1 = &unk_1EDD0B1B0;
  *(void *)(a1 + 3600) = &unk_1EDD17478;
  *(void *)(a1 + 672) = &unk_1EDD17478;
  *(void *)(a1 + 480) = &unk_1EDD17478;
  *(void *)(a1 + 256) = &unk_1EDD17478;
  *(void *)(a1 + 64) = &unk_1EDD17478;
  return a1;
}

uint64_t sub_18E0268B0(uint64_t a1)
{
  *(void *)a1 = &unk_1EDD13910;
  if (*(char *)(a1 + 2535) < 0) {
    operator delete(*(void **)(a1 + 2512));
  }
  if (*(char *)(a1 + 2511) < 0) {
    operator delete(*(void **)(a1 + 2488));
  }
  if (*(unsigned char *)(a1 + 2368)) {
    *(unsigned char *)(a1 + 2368) = 0;
  }
  sub_18E012A10(a1 + 2344, *(void **)(a1 + 2352));
  if (*(unsigned char *)(a1 + 2216))
  {
    *(void *)(a1 + 2224) = &unk_1EDD154D0;
    uint64_t v3 = (void **)(a1 + 2320);
    sub_18DEE4B60(&v3);
    *(unsigned char *)(a1 + 2216) = 0;
  }
  if (*(unsigned char *)(a1 + 2064)) {
    *(unsigned char *)(a1 + 2064) = 0;
  }
  if (*(unsigned char *)(a1 + 1928)) {
    *(unsigned char *)(a1 + 1928) = 0;
  }
  if (*(unsigned char *)(a1 + 1776)) {
    *(unsigned char *)(a1 + 1776) = 0;
  }
  if (*(unsigned char *)(a1 + 1624)) {
    *(unsigned char *)(a1 + 1624) = 0;
  }
  if (*(unsigned char *)(a1 + 1408)) {
    *(unsigned char *)(a1 + 1408) = 0;
  }
  if (*(unsigned char *)(a1 + 1208)) {
    *(unsigned char *)(a1 + 1208) = 0;
  }
  if (*(unsigned char *)(a1 + 232)) {
    *(unsigned char *)(a1 + 232) = 0;
  }
  sub_18E0216A4((void *)(a1 + 8));
  return a1;
}

uint64_t raven::RavenPNTEstimator::AddDeviceVelocityMeasurement(raven::RavenPNTEstimator *this, const raven::VelocityEvent *a2)
{
  v88[4] = *(void (**)(uint64_t))MEMORY[0x1E4F143B8];
  if (!*((unsigned char *)a2 + 280)) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v76 = 0x100000003;
  long long v75 = xmmword_18E1F6F60;
  v74 = &unk_1EDD18D98;
  uint64_t v77 = &v78;
  long long v78 = *((_OWORD *)a2 + 18);
  uint64_t v79 = *((void *)a2 + 38);
  uint64_t v71 = 0x300000003;
  unsigned __int8 v69 = &unk_1EDD18EE8;
  long long v70 = xmmword_18E1F0010;
  uint64_t v72 = &v73;
  if (!sub_18E01D07C((uint64_t)a2, (uint64_t)&v69)) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v4 = *((void *)a2 + 13);
  double v5 = *((double *)a2 + 14);
  *(void *)&long long v68 = v4;
  *((double *)&v68 + 1) = v5;
  sub_18E06BF24(v60, 12);
  v60[0] = &unk_1EDD14F68;
  long long v62 = v68;
  char v63 = (char *)this + 2696;
  long long v64 = (char *)this + 14600;
  long long v65 = (char *)this + 14616;
  uint64_t v66 = (char *)this + 2536;
  v67 = (char *)this + 2576;
  if ((v70 & 0x80000000) != 0) {
    __assert_rtn("Zeros", "cnmatrix.h", 3098, "nr >= 0");
  }
  uint64_t v84 = 0x100000003;
  v80 = &unk_1EDD18D98;
  v85 = &v86;
  uint64_t v6 = (char *)this + 61288;
  uint64_t v81 = v70 | 0x100000000;
  int v82 = v70;
  int v83 = v70;
  uint64_t v7 = (cnprint::CNPrinter *)sub_18DFE2CC8((uint64_t)&v80, 0.0);
  if (*((unsigned char *)this + 61288))
  {
    if (*((_DWORD *)this + 16806) == 174)
    {
      LOWORD(v88[0]) = 2;
      unsigned __int8 v87 = 2;
      double v56 = v5 + (double)v4;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v88, &v87, "MeasurementAccumulator::AddMeasurement() failed - Out of space,t_meas,%.3lf", v8, v9, v10, v11, v12, SLOBYTE(v56));
    }
    else if (*((unsigned char *)this + 61289))
    {
      if (cnprint::CNPrinter::GetLogLevel(v7) <= 1)
      {
        LOWORD(v88[0]) = 2;
        unsigned __int8 v87 = 1;
        double v58 = v5 + (double)v4;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v88, &v87, "MeasurementAccumulator::AddMeasurement() failed - Locked,t_meas,%.3lf", v19, v20, v21, v22, v23, SLOBYTE(v58));
      }
    }
    else
    {
      BOOL v24 = sub_18DEE4CB8((double *)&v68, (double *)this + 7662);
      if (v24)
      {
        if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v24) <= 1)
        {
          LOWORD(v88[0]) = 2;
          unsigned __int8 v87 = 1;
          double v59 = *((double *)&v68 + 1) + (double)(uint64_t)v68;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)v88, &v87, "MeasurementAccumulator::AddMeasurement() failed - Measurement too old,t_meas,%.3lf,t_start,%.3lf", v25, v26, v27, v28, v29, SLOBYTE(v59));
        }
      }
      else
      {
        v88[0] = 0;
        v88[1] = 0;
        sub_18E06C1BC(v88, (uint64_t)v60);
        unsigned __int8 v30 = sub_18E06C110((uint64_t *)this + 7666, v88);
        sub_18E067C60((uint64_t (**)(void, void, void, void, void))v88);
        uint64_t v31 = *((int *)this + 16806);
        uint64_t v32 = (v31 + 1);
        if (*((void *)this + 7668) == v32)
        {
          *((_DWORD *)this + 16806) = v32;
          *((_DWORD *)this + 15340) = v32;
          *((_DWORD *)this + 15341) = 1;
          *((_DWORD *)this + 15342) = v32;
          *((_DWORD *)this + 15343) = v32;
          *((_DWORD *)this + 16046) = v32;
          *((_DWORD *)this + 16047) = 1;
          *((_DWORD *)this + 16048) = v32;
          *((_DWORD *)this + 16049) = v32;
          *((_DWORD *)this + 16230) = v32;
          *((_DWORD *)this + 16231) = 1;
          *((_DWORD *)this + 16232) = v32;
          *((_DWORD *)this + 16233) = v32;
          *((_DWORD *)this + 16588) = v32;
          *((_DWORD *)this + 16589) = 1;
          *((_DWORD *)this + 16590) = v32;
          *((_DWORD *)this + 16591) = v32;
          *((_DWORD *)this + 16600) = v32;
          *((_DWORD *)this + 16601) = 1;
          *((_DWORD *)this + 16602) = v32;
          *((_DWORD *)this + 16603) = v32;
          *((_DWORD *)this + 16784) = v32;
          *((_DWORD *)this + 16785) = 1;
          *((_DWORD *)this + 16786) = v32;
          *((_DWORD *)this + 16787) = v32;
          *((_DWORD *)this + 16796) = v32;
          *((_DWORD *)this + 16797) = 1;
          *((_DWORD *)this + 16798) = v32;
          *((_DWORD *)this + 16799) = v32;
          *((_DWORD *)this + 16810) = v32;
          *((_DWORD *)this + 16811) = 1;
          *((_DWORD *)this + 16812) = v32;
          *((_DWORD *)this + 16813) = v32;
          *((_DWORD *)this + 17168) = v32;
          *((_DWORD *)this + 17169) = 1;
          *((_DWORD *)this + 17170) = v32;
          *((_DWORD *)this + 17171) = v32;
          *(_OWORD *)(*((void *)this + 7673) + 16 * v31) = v68;
          if (v75 <= DWORD1(v75)) {
            int v33 = DWORD1(v75);
          }
          else {
            int v33 = v75;
          }
          if (DWORD1(v75)) {
            BOOL v34 = v75 == 0;
          }
          else {
            BOOL v34 = 1;
          }
          if (v34) {
            int v35 = 0;
          }
          else {
            int v35 = v33;
          }
          *(_DWORD *)(*((void *)this + 8026) + 4 * v31) = v35;
          sub_18DFE2F24(*((void *)this + 8297) + (v31 << 6), (uint64_t)&v74);
          if (v81 <= HIDWORD(v81)) {
            int v36 = HIDWORD(v81);
          }
          else {
            int v36 = v81;
          }
          if (HIDWORD(v81)) {
            BOOL v37 = v81 == 0;
          }
          else {
            BOOL v37 = 1;
          }
          if (v37) {
            int v38 = 0;
          }
          else {
            int v38 = v36;
          }
          *(_DWORD *)(*((void *)this + 8303) + 4 * v31) = v38;
          sub_18DFE2F24(*((void *)this + 8395) + (v31 << 6), (uint64_t)&v80);
          __n128 v39 = sub_18DFE2F24(*((void *)this + 8401) + 112 * (int)v31, (uint64_t)&v69);
          *(void *)(*((void *)this + 8408) + 8 * v31) = sub_18E02701C;
          if (*v30) {
            uint64_t v40 = ((uint64_t (*)(uint64_t, void *, void, void *, void *, __n128))*v30)(3, v30, 0, &unk_1EDD05A48, &std::__any_imp::__unique_typeinfo<raven::h_DeviceVelocityArgs_RavenPNT<double>>::__id, v39);
          }
          else {
            uint64_t v40 = 0;
          }
          uint64_t v13 = 0;
          *(void *)(*((void *)v6 + 926) + 8 * v31) = v40;
          goto LABEL_42;
        }
        LOWORD(v88[0]) = 2;
        unsigned __int8 v87 = 4;
        char v41 = (*(uint64_t (**)(void *))(v60[0] + 16))(v60);
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v88, &v87, "MeasurementAccumulator::AddMeasurement() failed - allocation failed,meas_type,%d,t_meas,%.3lf", v42, v43, v44, v45, v46, v41);
      }
    }
  }
  else if (cnprint::CNPrinter::GetLogLevel(v7) <= 1)
  {
    LOWORD(v88[0]) = 2;
    unsigned __int8 v87 = 1;
    double v57 = v5 + (double)v4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v88, &v87, "MeasurementAccumulator::AddMeasurement() failed - Not initialized,t_meas,%.3lf", v14, v15, v16, v17, v18, SLOBYTE(v57));
  }
  LOWORD(v88[0]) = 12;
  unsigned __int8 v87 = 4;
  v80 = (void *)(*(uint64_t (**)(const raven::VelocityEvent *))(*(void *)a2 + 16))(a2);
  uint64_t v81 = v47;
  char v48 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)&v80, "Could not add measurement - device velocity");
  if (*((char *)this + 2511) >= 0) {
    LOBYTE(v54) = v48;
  }
  else {
    uint64_t v54 = *((void *)this + 311);
  }
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)v88, &v87, "%s", v49, v50, v51, v52, v53, v54);
  uint64_t v13 = 0xFFFFFFFFLL;
LABEL_42:
  v60[0] = &unk_1EDD0A4E8;
  if (v61 < 0) {
    operator delete((void *)v60[2]);
  }
  return v13;
}

void sub_18E026FB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a2) {
    sub_18DEDD524(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_18E02701C(uint64_t a1, uint64_t a2, void *lpsrc, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!lpsrc
    || (uint64_t v13 = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EDD02A78, (const struct __class_type_info *)&unk_1EDD05A48, 0)) == 0)
  {
    LOWORD(v33) = 12;
    v38.i8[0] = 4;
    double v23 = MEMORY[0x30] + (double)MEMORY[0x28];
    goto LABEL_20;
  }
  uint64_t v14 = v13;
  unsigned int v16 = *(_DWORD *)(a1 + 8);
  unsigned int v15 = *(_DWORD *)(a1 + 12);
  if (v16 <= v15) {
    int v17 = *(_DWORD *)(a1 + 12);
  }
  else {
    int v17 = *(_DWORD *)(a1 + 8);
  }
  if (!v16
    || !v15
    || v17 != 26
    || ((v19 = *(_DWORD *)(a2 + 8), unsigned int v18 = *(_DWORD *)(a2 + 12), v19 <= v18)
      ? (int v20 = *(_DWORD *)(a2 + 12))
      : (int v20 = *(_DWORD *)(a2 + 8)),
        !v19 || !v18 || v20 != 3))
  {
    LOWORD(v33) = 12;
    v38.i8[0] = 4;
    double v23 = *((double *)v13 + 6) + (double)*((uint64_t *)v13 + 5);
    goto LABEL_20;
  }
  if (!*((void *)v13 + 7))
  {
    LOWORD(v33) = 12;
    v38.i8[0] = 4;
    double v23 = *((double *)v13 + 6) + (double)*((uint64_t *)v13 + 5);
    goto LABEL_20;
  }
  long long v87 = *(_OWORD *)(v13 + 40);
  uint64_t v21 = *((void *)v13 + 9);
  long long v86 = *(_OWORD *)*((void *)v13 + 8);
  sub_18E07FB20((uint64_t)v84, v21);
  uint64_t v22 = *((void *)v14 + 7);
  uint64_t v81 = 0x10000001CLL;
  long long v80 = xmmword_18E1FD5F0;
  uint64_t v79 = &unk_1EDD188B8;
  int v82 = &v83;
  if (sub_18E06B85C((uint64_t)&v87, (uint64_t)&v86, v85, v22, *((void *)v14 + 11), (uint64_t)&v79))
  {
    LOWORD(v33) = 12;
    v38.i8[0] = 4;
    double v23 = *((double *)v14 + 6) + (double)*((uint64_t *)v14 + 5);
LABEL_20:
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v33, (unsigned __int8 *)&v38, "time,%.3lf,h-function failure on line %d: %s() %s", a4, a5, a6, a7, a8, SLOBYTE(v23));
    return 0xFFFFFFFFLL;
  }
  long long v80 = xmmword_18E1FD5F0;
  uint64_t v76 = 0x10000001CLL;
  v74 = &unk_1EDD188B8;
  long long v75 = xmmword_18E1FD5F0;
  uint64_t v77 = (double *)&v78;
  int64x2_t v38 = vdupq_n_s64(0x7FF8000000000000uLL);
  int64x2_t v39 = v38;
  int64x2_t v40 = v38;
  int64x2_t v41 = v38;
  int64x2_t v42 = v38;
  int64x2_t v43 = v38;
  int64x2_t v44 = v38;
  int64x2_t v45 = v38;
  int64x2_t v46 = v38;
  int64x2_t v47 = v38;
  int64x2_t v48 = v38;
  int64x2_t v49 = v38;
  int64x2_t v50 = v38;
  int64x2_t v51 = v38;
  int64x2_t v52 = v38;
  int64x2_t v53 = v38;
  int64x2_t v54 = v38;
  int64x2_t v55 = v38;
  int64x2_t v56 = v38;
  int64x2_t v57 = v38;
  int64x2_t v58 = v38;
  int64x2_t v59 = v38;
  int64x2_t v60 = v38;
  int64x2_t v61 = v38;
  int64x2_t v62 = v38;
  int64x2_t v63 = v38;
  int64x2_t v64 = v38;
  int64x2_t v65 = v38;
  int64x2_t v66 = v38;
  int64x2_t v67 = v38;
  int64x2_t v68 = v38;
  int64x2_t v69 = v38;
  int64x2_t v70 = v38;
  int64x2_t v71 = v38;
  int64x2_t v72 = v38;
  uint64_t v73 = 0x7FF8000000000000;
  sub_18E06BA00((uint64_t)&v79, a1, (uint64_t)&v74, (uint64_t)&v38);
  *(_OWORD *)(a4 + 8) = xmmword_18E1F6F60;
  uint64_t v25 = v77;
  uint64_t v26 = *(double **)(a2 + 32);
  uint64_t v27 = *(double **)(a4 + 32);
  *uint64_t v27 = v77[3] + *v26;
  v27[1] = v25[4] + v26[1];
  v27[2] = v25[5] + v26[2];
  uint64_t v35 = 0x1A00000003;
  int v33 = &unk_1EDD18E58;
  int v36 = v37;
  long long v34 = xmmword_18E1FD670;
  sub_18DFE2CC8((uint64_t)&v33, 0.0);
  sub_18DFE2F24(a5, (uint64_t)&v33);
  int v28 = *(_DWORD *)(a5 + 20);
  uint64_t v29 = *(void *)(a5 + 32);
  uint64_t v30 = v40.i64[0];
  *(void *)(v29 + 24 * v28) = v39.i64[1];
  *(void *)(v29 + 8 * ((4 * v28) | 1)) = v30;
  *(void *)(v29 + 8 * (5 * v28 + 2)) = v40.i64[1];
  uint64_t v35 = 0x300000003;
  int v33 = &unk_1EDD18EE8;
  int v36 = v37;
  long long v34 = xmmword_18E1F0010;
  sub_18DFE2CC8((uint64_t)&v33, 0.0);
  int v31 = HIDWORD(v34) + 1;
  uint64_t v32 = v36;
  *int v36 = 0x3FF0000000000000;
  v32[v31] = 0x3FF0000000000000;
  v32[2 * v31] = 0x3FF0000000000000;
  sub_18DFE2F24(a6, (uint64_t)&v33);
  return 0;
}

uint64_t sub_18E027484(uint64_t a1)
{
  *(void *)a1 = &unk_1EDD0A4E8;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

uint64_t raven::RavenPNTEstimator::AddUserVelocityMeasurement(raven::RavenPNTEstimator *this, const raven::VelocityEvent *a2)
{
  v93[4] = *(void (**)(uint64_t))MEMORY[0x1E4F143B8];
  if (!*((unsigned char *)a2 + 280)) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v81 = 0x100000003;
  long long v80 = xmmword_18E1F6F60;
  uint64_t v79 = &unk_1EDD18D98;
  int v82 = &v83;
  long long v83 = *((_OWORD *)a2 + 18);
  uint64_t v84 = *((void *)a2 + 38);
  uint64_t v75 = 0x300000003;
  uint64_t v73 = &unk_1EDD18EE8;
  long long v74 = xmmword_18E1F0010;
  uint64_t v76 = v77;
  uint64_t v4 = *((void *)a2 + 40);
  uint64_t v5 = *((void *)a2 + 41);
  uint64_t v6 = *((void *)a2 + 42);
  v77[0] = *((void *)a2 + 39);
  v77[1] = v4;
  v77[2] = v5;
  v77[3] = v4;
  long long v7 = *(_OWORD *)((char *)a2 + 344);
  v77[4] = v6;
  v77[5] = v7;
  v77[6] = v5;
  long long v78 = v7;
  uint64_t v8 = *((void *)a2 + 13);
  double v9 = *((double *)a2 + 14);
  *(void *)&long long v72 = v8;
  *((double *)&v72 + 1) = v9;
  sub_18E06BF24(v64, 27);
  v64[0] = &unk_1EDD14D68;
  long long v66 = v72;
  int64x2_t v67 = (char *)this + 2696;
  int64x2_t v68 = (char *)this + 14600;
  int64x2_t v69 = (char *)this + 14616;
  int64x2_t v70 = (char *)this + 2536;
  int64x2_t v71 = (char *)this + 2576;
  if ((v74 & 0x80000000) != 0) {
    __assert_rtn("Zeros", "cnmatrix.h", 3098, "nr >= 0");
  }
  uint64_t v89 = 0x100000003;
  uint64_t v85 = &unk_1EDD18D98;
  v90 = &v91;
  uint64_t v10 = (char *)this + 61288;
  uint64_t v86 = v74 | 0x100000000;
  int v87 = v74;
  int v88 = v74;
  uint64_t v11 = (cnprint::CNPrinter *)sub_18DFE2CC8((uint64_t)&v85, 0.0);
  if (*((unsigned char *)this + 61288))
  {
    if (*((_DWORD *)this + 16806) == 174)
    {
      LOWORD(v93[0]) = 2;
      unsigned __int8 v92 = 2;
      double v60 = v9 + (double)v8;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v93, &v92, "MeasurementAccumulator::AddMeasurement() failed - Out of space,t_meas,%.3lf", v12, v13, v14, v15, v16, SLOBYTE(v60));
    }
    else if (*((unsigned char *)this + 61289))
    {
      if (cnprint::CNPrinter::GetLogLevel(v11) <= 1)
      {
        LOWORD(v93[0]) = 2;
        unsigned __int8 v92 = 1;
        double v62 = v9 + (double)v8;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v93, &v92, "MeasurementAccumulator::AddMeasurement() failed - Locked,t_meas,%.3lf", v23, v24, v25, v26, v27, SLOBYTE(v62));
      }
    }
    else
    {
      BOOL v28 = sub_18DEE4CB8((double *)&v72, (double *)this + 7662);
      if (v28)
      {
        if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v28) <= 1)
        {
          LOWORD(v93[0]) = 2;
          unsigned __int8 v92 = 1;
          double v63 = *((double *)&v72 + 1) + (double)(uint64_t)v72;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)v93, &v92, "MeasurementAccumulator::AddMeasurement() failed - Measurement too old,t_meas,%.3lf,t_start,%.3lf", v29, v30, v31, v32, v33, SLOBYTE(v63));
        }
      }
      else
      {
        v93[0] = 0;
        v93[1] = 0;
        sub_18E06D0E4(v93, (uint64_t)v64);
        long long v34 = sub_18E06C110((uint64_t *)this + 7666, v93);
        sub_18E067C60((uint64_t (**)(void, void, void, void, void))v93);
        uint64_t v35 = *((int *)this + 16806);
        uint64_t v36 = (v35 + 1);
        if (*((void *)this + 7668) == v36)
        {
          *((_DWORD *)this + 16806) = v36;
          *((_DWORD *)this + 15340) = v36;
          *((_DWORD *)this + 15341) = 1;
          *((_DWORD *)this + 15342) = v36;
          *((_DWORD *)this + 15343) = v36;
          *((_DWORD *)this + 16046) = v36;
          *((_DWORD *)this + 16047) = 1;
          *((_DWORD *)this + 16048) = v36;
          *((_DWORD *)this + 16049) = v36;
          *((_DWORD *)this + 16230) = v36;
          *((_DWORD *)this + 16231) = 1;
          *((_DWORD *)this + 16232) = v36;
          *((_DWORD *)this + 16233) = v36;
          *((_DWORD *)this + 16588) = v36;
          *((_DWORD *)this + 16589) = 1;
          *((_DWORD *)this + 16590) = v36;
          *((_DWORD *)this + 16591) = v36;
          *((_DWORD *)this + 16600) = v36;
          *((_DWORD *)this + 16601) = 1;
          *((_DWORD *)this + 16602) = v36;
          *((_DWORD *)this + 16603) = v36;
          *((_DWORD *)this + 16784) = v36;
          *((_DWORD *)this + 16785) = 1;
          *((_DWORD *)this + 16786) = v36;
          *((_DWORD *)this + 16787) = v36;
          *((_DWORD *)this + 16796) = v36;
          *((_DWORD *)this + 16797) = 1;
          *((_DWORD *)this + 16798) = v36;
          *((_DWORD *)this + 16799) = v36;
          *((_DWORD *)this + 16810) = v36;
          *((_DWORD *)this + 16811) = 1;
          *((_DWORD *)this + 16812) = v36;
          *((_DWORD *)this + 16813) = v36;
          *((_DWORD *)this + 17168) = v36;
          *((_DWORD *)this + 17169) = 1;
          *((_DWORD *)this + 17170) = v36;
          *((_DWORD *)this + 17171) = v36;
          *(_OWORD *)(*((void *)this + 7673) + 16 * v35) = v72;
          if (v80 <= DWORD1(v80)) {
            int v37 = DWORD1(v80);
          }
          else {
            int v37 = v80;
          }
          if (DWORD1(v80)) {
            BOOL v38 = v80 == 0;
          }
          else {
            BOOL v38 = 1;
          }
          if (v38) {
            int v39 = 0;
          }
          else {
            int v39 = v37;
          }
          *(_DWORD *)(*((void *)this + 8026) + 4 * v35) = v39;
          sub_18DFE2F24(*((void *)this + 8297) + (v35 << 6), (uint64_t)&v79);
          if (v86 <= HIDWORD(v86)) {
            int v40 = HIDWORD(v86);
          }
          else {
            int v40 = v86;
          }
          if (HIDWORD(v86)) {
            BOOL v41 = v86 == 0;
          }
          else {
            BOOL v41 = 1;
          }
          if (v41) {
            int v42 = 0;
          }
          else {
            int v42 = v40;
          }
          *(_DWORD *)(*((void *)this + 8303) + 4 * v35) = v42;
          sub_18DFE2F24(*((void *)this + 8395) + (v35 << 6), (uint64_t)&v85);
          __n128 v43 = sub_18DFE2F24(*((void *)this + 8401) + 112 * (int)v35, (uint64_t)&v73);
          *(void *)(*((void *)this + 8408) + 8 * v35) = sub_18E027B44;
          if (*v34) {
            uint64_t v44 = ((uint64_t (*)(uint64_t, void *, void, void *, void *, __n128))*v34)(3, v34, 0, &unk_1EDD05930, &std::__any_imp::__unique_typeinfo<raven::h_UserVelocityArgs_RavenPNT<double>>::__id, v43);
          }
          else {
            uint64_t v44 = 0;
          }
          uint64_t v17 = 0;
          *(void *)(*((void *)v10 + 926) + 8 * v35) = v44;
          goto LABEL_41;
        }
        LOWORD(v93[0]) = 2;
        unsigned __int8 v92 = 4;
        char v45 = (*(uint64_t (**)(void *))(v64[0] + 16))(v64);
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v93, &v92, "MeasurementAccumulator::AddMeasurement() failed - allocation failed,meas_type,%d,t_meas,%.3lf", v46, v47, v48, v49, v50, v45);
      }
    }
  }
  else if (cnprint::CNPrinter::GetLogLevel(v11) <= 1)
  {
    LOWORD(v93[0]) = 2;
    unsigned __int8 v92 = 1;
    double v61 = v9 + (double)v8;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v93, &v92, "MeasurementAccumulator::AddMeasurement() failed - Not initialized,t_meas,%.3lf", v18, v19, v20, v21, v22, SLOBYTE(v61));
  }
  LOWORD(v93[0]) = 12;
  unsigned __int8 v92 = 4;
  uint64_t v85 = (void *)(*(uint64_t (**)(const raven::VelocityEvent *))(*(void *)a2 + 16))(a2);
  uint64_t v86 = v51;
  char v52 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)&v85, "Could not add measurement - user velocity");
  if (*((char *)this + 2511) >= 0) {
    LOBYTE(v58) = v52;
  }
  else {
    uint64_t v58 = *((void *)this + 311);
  }
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)v93, &v92, "%s", v53, v54, v55, v56, v57, v58);
  uint64_t v17 = 0xFFFFFFFFLL;
LABEL_41:
  v64[0] = &unk_1EDD0A4E8;
  if (v65 < 0) {
    operator delete((void *)v64[2]);
  }
  return v17;
}

void sub_18E027ADC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a2) {
    sub_18DEDD524(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_18E027B44(uint64_t a1, uint64_t a2, void *lpsrc, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!lpsrc
    || (uint64_t v13 = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EDD02A78, (const struct __class_type_info *)&unk_1EDD05930, 0)) == 0)
  {
    LOWORD(v54) = 12;
    v59[0] = 4;
    double v23 = MEMORY[0x30] + (double)MEMORY[0x28];
LABEL_23:
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v54, v59, "time,%.3lf,h-function failure on line %d: %s() %s", a4, a5, a6, a7, a8, SLOBYTE(v23));
    return 0xFFFFFFFFLL;
  }
  uint64_t v14 = v13;
  if (!*((void *)v13 + 7))
  {
    LOWORD(v54) = 12;
    v59[0] = 4;
    double v23 = *((double *)v13 + 6) + (double)*((uint64_t *)v13 + 5);
    goto LABEL_23;
  }
  unsigned int v16 = *(_DWORD *)(a1 + 8);
  unsigned int v15 = *(_DWORD *)(a1 + 12);
  if (v16 <= v15) {
    int v17 = *(_DWORD *)(a1 + 12);
  }
  else {
    int v17 = *(_DWORD *)(a1 + 8);
  }
  if (!v16
    || !v15
    || v17 != 26
    || ((v19 = *(_DWORD *)(a2 + 8), unsigned int v18 = *(_DWORD *)(a2 + 12), v19 <= v18)
      ? (int v20 = *(_DWORD *)(a2 + 12))
      : (int v20 = *(_DWORD *)(a2 + 8)),
        !v19 || !v18 || v20 != 3))
  {
    LOWORD(v54) = 12;
    v59[0] = 4;
    double v23 = *((double *)v13 + 6) + (double)*((uint64_t *)v13 + 5);
    goto LABEL_23;
  }
  long long v84 = *(_OWORD *)(v13 + 40);
  uint64_t v21 = *((void *)v13 + 9);
  long long v83 = *(_OWORD *)*((void *)v13 + 8);
  sub_18E07FB20((uint64_t)v82, v21);
  int v22 = **((unsigned __int8 **)v14 + 10);
  uint64_t v79 = 0x10000001CLL;
  long long v78 = xmmword_18E1FD5F0;
  uint64_t v77 = &unk_1EDD188B8;
  long long v80 = &v81;
  if (v22)
  {
    if (v22 != 1)
    {
      if (v22 == 2) {
        __assert_rtn("h_UserVelocity_RavenPNT", "ravenmeasurementfunctions.h", 7073, "false && \"Unexpected case RavenPNTEstimatorStateParameterization::ParameterizationCount\"");
      }
      goto LABEL_32;
    }
    if (!sub_18E0786E0((uint64_t)&v84, &v83, (uint64_t)v82, *((void *)v14 + 7), *((void *)v14 + 11), 1, 1, 1, (uint64_t)&v77))goto LABEL_32; {
    LOWORD(v54) = 12;
    }
    v59[0] = 4;
    double v23 = *((double *)v14 + 6) + (double)*((uint64_t *)v14 + 5);
    goto LABEL_23;
  }
  *(void *)&v59[24] = 0x100000007;
  *(_OWORD *)&v59[8] = xmmword_18E1FD680;
  *(void *)int64x2_t v59 = &unk_1EDD197E8;
  *(void *)&v60[0] = (char *)v60 + 8;
  if (sub_18E06C3A8((uint64_t)&v84, &v83, (uint64_t)v82, 0, (uint64_t)v59))
  {
    LOWORD(v54) = 12;
    LOBYTE(v72) = 4;
    double v52 = *((double *)v14 + 6) + (double)*((uint64_t *)v14 + 5);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v54, (unsigned __int8 *)&v72, "time,%.3lf,h-function failure on line %d: %s() %s", v25, v26, v27, v28, v29, SLOBYTE(v52));
    return 0xFFFFFFFFLL;
  }
  uint64_t v56 = 0x700000001;
  uint64_t v54 = &unk_1EDD183A8;
  uint64_t v57 = v58;
  long long v55 = xmmword_18E1FD690;
  for (uint64_t i = 10; i != 17; ++i)
    *((_DWORD *)&v54 + i) = i + 11;
  sub_18E05B904((uint64_t)&v72, (uint64_t)&v54);
  sub_18E06CE44((uint64_t)&v54, (uint64_t)&v77, (uint64_t)&v72);
  sub_18E06C83C((uint64_t)&v54, *(int *)&v59[16], *(double **)&v60[0]);
LABEL_32:
  uint64_t v74 = 0x100000007;
  long long v73 = xmmword_18E1FD680;
  long long v72 = &unk_1EDD197E8;
  uint64_t v75 = (double *)&v76;
  *(int64x2_t *)int64x2_t v59 = vdupq_n_s64(0x7FF8000000000000uLL);
  *(_OWORD *)&v59[16] = *(_OWORD *)v59;
  v60[0] = *(_OWORD *)v59;
  v60[1] = *(_OWORD *)v59;
  v60[2] = *(_OWORD *)v59;
  v60[3] = *(_OWORD *)v59;
  void v60[4] = *(_OWORD *)v59;
  v60[5] = *(_OWORD *)v59;
  v60[6] = *(_OWORD *)v59;
  v60[7] = *(_OWORD *)v59;
  v60[8] = *(_OWORD *)v59;
  v60[9] = *(_OWORD *)v59;
  v60[10] = *(_OWORD *)v59;
  v60[11] = *(_OWORD *)v59;
  v60[12] = *(_OWORD *)v59;
  v60[13] = *(_OWORD *)v59;
  v60[14] = *(_OWORD *)v59;
  v60[15] = *(_OWORD *)v59;
  v60[16] = *(_OWORD *)v59;
  v60[17] = *(_OWORD *)v59;
  v60[18] = *(_OWORD *)v59;
  v60[19] = *(_OWORD *)v59;
  v60[20] = *(_OWORD *)v59;
  v60[21] = *(_OWORD *)v59;
  v60[22] = *(_OWORD *)v59;
  long long v61 = *(_OWORD *)v59;
  long long v62 = *(_OWORD *)v59;
  long long v63 = *(_OWORD *)v59;
  long long v64 = *(_OWORD *)v59;
  long long v65 = *(_OWORD *)v59;
  long long v66 = *(_OWORD *)v59;
  long long v67 = *(_OWORD *)v59;
  long long v68 = *(_OWORD *)v59;
  long long v69 = *(_OWORD *)v59;
  long long v70 = *(_OWORD *)v59;
  double v71 = NAN;
  LOBYTE(v54) = 0;
  if (sub_18E06F128((uint64_t)&v77, a1, v22, (uint64_t)&v72, (uint64_t)v59, (BOOL *)&v54, 0.000000015))
  {
    LOWORD(v54) = 12;
    unsigned __int8 v85 = 4;
    double v53 = *((double *)v14 + 6) + (double)*((uint64_t *)v14 + 5);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v54, &v85, "time,%.3lf,h-function failure on line %d: %s() %s", v31, v32, v33, v34, v35, SLOBYTE(v53));
    return 0xFFFFFFFFLL;
  }
  *(_OWORD *)(a4 + 8) = xmmword_18E1F6F60;
  double v36 = v75[3];
  double v37 = v75[4];
  double v39 = v75[5];
  double v38 = v75[6];
  int v40 = *(double **)(a2 + 32);
  BOOL v41 = *(double **)(a4 + 32);
  *BOOL v41 = *v40 + v36 * v37;
  v41[1] = v40[1] + v36 * v39;
  v41[2] = v40[2] + v36 * v38;
  uint64_t v56 = 0x1A00000003;
  uint64_t v54 = &unk_1EDD18E58;
  uint64_t v57 = v58;
  long long v55 = xmmword_18E1FD670;
  sub_18DFE2CC8((uint64_t)&v54, 0.0);
  sub_18DFE2F24(a5, (uint64_t)&v54);
  uint64_t v42 = *(int *)(a5 + 20);
  int v43 = 3 * v42;
  int v44 = 6 * v42;
  uint64_t v45 = *(void *)(a5 + 32);
  *(double *)(v45 + 48 * v42) = v36 * *((double *)&v62 + 1);
  int v46 = 8 * v42;
  int v47 = 7 * v42;
  *(double *)(v45 + 8 * v47) = v36 * *(double *)&v63;
  *(double *)(v45 + (v42 << 6)) = v36 * *((double *)&v63 + 1);
  int v48 = 23 * v42;
  *(double *)(v45 + 8 * v48) = v36 * *(double *)&v64 + v37 * *(double *)&v61;
  *(double *)(v45 + 192 * v42) = v36 * *((double *)&v64 + 1) + v37 * *((double *)&v61 + 1);
  LODWORD(v42) = 25 * v42;
  *(double *)(v45 + 8 * (int)v42) = v36 * *(double *)&v65 + v37 * *(double *)&v62;
  *(double *)(v45 + 8 * ((2 * v43) | 1)) = v36 * *((double *)&v65 + 1);
  *(double *)(v45 + 8 * (v47 + 1)) = v36 * *(double *)&v66;
  uint64_t v49 = v45 + 8 * v46;
  *(double *)(v49 + 8) = v36 * *((double *)&v66 + 1);
  *(double *)(v45 + 8 * (v48 + 1)) = v36 * *(double *)&v67 + v39 * *(double *)&v61;
  *(double *)(v45 + 8 * ((8 * v43) | 1)) = v36 * *((double *)&v67 + 1) + v39 * *((double *)&v61 + 1);
  *(double *)(v45 + 8 * ((int)v42 + 1)) = v36 * *(double *)&v68 + v39 * *(double *)&v62;
  *(double *)(v45 + 8 * (v44 + 2)) = v36 * *((double *)&v68 + 1);
  *(double *)(v45 + 8 * (v47 + 2)) = v36 * *(double *)&v69;
  *(double *)(v49 + 16) = v36 * *((double *)&v69 + 1);
  *(double *)(v45 + 8 * (v48 + 2)) = v36 * *(double *)&v70 + v38 * *(double *)&v61;
  *(double *)(v45 + 8 * ((8 * v43) | 2)) = v36 * *((double *)&v70 + 1) + v38 * *((double *)&v61 + 1);
  *(double *)(v45 + 8 * ((int)v42 + 2)) = v36 * v71 + v38 * *(double *)&v62;
  uint64_t v56 = 0x300000003;
  uint64_t v54 = &unk_1EDD18EE8;
  uint64_t v57 = v58;
  long long v55 = xmmword_18E1F0010;
  sub_18DFE2CC8((uint64_t)&v54, 0.0);
  int v50 = HIDWORD(v55) + 1;
  uint64_t v51 = v57;
  *uint64_t v57 = 0x3FF0000000000000;
  v51[v50] = 0x3FF0000000000000;
  v51[2 * v50] = 0x3FF0000000000000;
  sub_18DFE2F24(a6, (uint64_t)&v54);
  return 0;
}

uint64_t sub_18E0282F0(uint64_t a1)
{
  *(void *)a1 = &unk_1EDD0A4E8;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

uint64_t raven::RavenPNTEstimator::AdjustClockOffset(uint64_t a1, uint64_t a2, double a3)
{
  if (!*(unsigned char *)(a1 + 58)) {
    return 1;
  }
  if ((*(void *)&a3 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
  {
    double v4 = a3 * 1000000.0;
    uint64_t v5 = *(void *)(a1 + 14648);
    double v6 = v4 + *(double *)(v5 + 152);
    *(double *)(v5 + 152) = v6;
    __int16 v23 = 12;
    unsigned __int8 v22 = 2;
    char v7 = cnprint::CNLogFormatter::FormatGeneral(a1 + 2488, a2, "adjusted clock offset by %.3lf us to %.3lf us", v4, v6);
    if (*(char *)(a1 + 2511) >= 0) {
      LOBYTE(v13) = v7;
    }
    else {
      uint64_t v13 = *(void *)(a1 + 2488);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v23, &v22, "%s", v8, v9, v10, v11, v12, v13);
    return 1;
  }
  __int16 v25 = 12;
  unsigned __int8 v24 = 4;
  char v15 = cnprint::CNLogFormatter::FormatGeneral(a1 + 2488, a2, "invalid clock correction %.3lf s", a3);
  if (*(char *)(a1 + 2511) >= 0) {
    LOBYTE(v21) = v15;
  }
  else {
    uint64_t v21 = *(void *)(a1 + 2488);
  }
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v25, &v24, "%s", v16, v17, v18, v19, v20, v21);
  return 0;
}

uint64_t raven::RavenPNTEstimator::Configure(raven::RavenPNTEstimator *this, uint64_t *a2, int8x16_t a3, int8x16_t a4)
{
  if (*((unsigned char *)this + 57))
  {
    LOWORD(__p) = 12;
    LOBYTE(v36) = 2;
    unsigned __int8 v5 = cnprint::CNLogFormatter::FormatWarning((raven::RavenPNTEstimator *)((char *)this + 2488), "Configure() called more than once");
LABEL_16:
    if (*((char *)this + 2511) >= 0) {
      LOBYTE(v28) = v5;
    }
    else {
      uint64_t v28 = *((void *)this + 311);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&__p, (unsigned __int8 *)&v36, "%s", v6, v7, v8, v9, v10, v28);
    return 0xFFFFFFFFLL;
  }
  uint64_t v11 = *a2;
  if (!*a2)
  {
    LOWORD(__p) = 12;
    LOBYTE(v36) = 4;
    unsigned __int8 v5 = cnprint::CNLogFormatter::FormatGeneral((const void **)this + 311, "Configure() called with null raven parameters");
    goto LABEL_16;
  }
  if (!*(unsigned char *)(v11 + 33))
  {
    LOWORD(__p) = 12;
    LOBYTE(v36) = 4;
    unsigned __int8 v5 = cnprint::CNLogFormatter::FormatGeneral((const void **)this + 311, "Configure() called with uninitialized raven parameters");
    goto LABEL_16;
  }
  BOOL v12 = raven::RavenPNTEstimator::UseHighAccelerationParameters(this, a3, a4);
  *((void *)this + 323) = (char *)this + 27592;
  *((void *)this + 322) = (char *)this + 44440;
  *((void *)this + 324) = (char *)this + 24856;
  *((void *)this + 326) = *(void *)(v11 + 664);
  uint64_t v13 = 672;
  if (v12) {
    uint64_t v13 = 680;
  }
  *((void *)this + 325) = *(void *)(v11 + v13);
  uint64_t v14 = 688;
  if (v12) {
    uint64_t v14 = 696;
  }
  *((void *)this + 327) = *(void *)(v11 + v14);
  *((_OWORD *)this + 166) = 0u;
  *((_OWORD *)this + 165) = 0u;
  *((_OWORD *)this + 164) = 0u;
  __asm { FMOV            V0.2D, #1.0 }
  *((_OWORD *)this + 167) = _Q0;
  *((void *)this + 336) = 0x3FF0000000000000;
  uint64_t v50 = 0x100000013;
  int v47 = &unk_1EDD17CB8;
  uint64_t v48 = 0;
  uint64_t v49 = 0;
  uint64_t v51 = v52;
  v52[22] = 0x100000013;
  v52[19] = &unk_1EDD17CB8;
  v52[20] = 0;
  v52[21] = 0;
  v52[23] = v53;
  v53[152] = 1;
  uint64_t __p = 0xF00000013;
  __p_8[0] = sub_18E028FA8;
  double v20 = *(double *)(v11 + 1248);
  __p_8[1] = (void *)0x400000004;
  double v44 = v20;
  double v45 = v20;
  char v46 = 0;
  double v54 = v20 * 0.5;
  if (!sub_18E02AA54((uint64_t)this + 2696, (uint64_t)&__p))
  {
    *((_WORD *)this + 7508) = 1;
    *((void *)this + 1866) = 0x100000000;
    *((_WORD *)this + 7480) = 257;
    *((void *)this + 1871) = *(void *)(v11 + 912);
    *((void *)this + 1874) = *(void *)(v11 + 920);
    *((_OWORD *)this + 1047) = *((_OWORD *)this + 938);
    *((_OWORD *)this + 1043) = *((_OWORD *)this + 934);
    *((_OWORD *)this + 1042) = *((_OWORD *)this + 933);
    *((void *)this + 2096) = *((void *)this + 1878);
    long long v30 = *((_OWORD *)this + 936);
    *((_OWORD *)this + 1045) = v30;
    long long v31 = *((_OWORD *)this + 935);
    *((_OWORD *)this + 1044) = v31;
    long long v32 = *((_OWORD *)this + 937);
    *((_OWORD *)this + 1046) = v32;
    *((void *)this + 2028) = *((void *)this + 1876);
    *((_OWORD *)this + 1013) = v32;
    *((_OWORD *)this + 1012) = v30;
    *((_OWORD *)this + 1011) = v31;
    long long v33 = *((_OWORD *)this + 933);
    *((_OWORD *)this + 1010) = *((_OWORD *)this + 934);
    *((_OWORD *)this + 1009) = v33;
    *((unsigned char *)this + 16136) = 0;
    uint64_t v38 = 0x10000001ALL;
    double v36 = &unk_1EDD186A8;
    double v39 = &v40;
    long long v37 = xmmword_18E1FD600;
    sub_18DFE2CC8((uint64_t)&v36, 0.0);
    unsigned int v34 = DWORD2(v37);
    sub_18E07F6DC((uint64_t)&__p, (uint64_t)&v36);
    int32x4_t v35 = vdupq_lane_s32((int32x2_t)(v34 | 0x100000000), 0);
    v35.i32[1] = 1;
    *(int32x4_t *)__p_8 = v35;
    sub_18DFE2F24((uint64_t)this + 15040, (uint64_t)&__p);
    sub_18E06E4BC((uint64_t)&__p, v34, v34);
  }
  LOWORD(v36) = 12;
  unsigned __int8 v41 = 4;
  unsigned __int8 v21 = cnprint::CNLogFormatter::FormatGeneral((const void **)this + 311, "Configure() failed to initialize full state dynamics integrator");
  if (*((char *)this + 2511) >= 0) {
    LOBYTE(v27) = v21;
  }
  else {
    uint64_t v27 = *((void *)this + 311);
  }
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v36, &v41, "%s", v22, v23, v24, v25, v26, v27);
  return 0xFFFFFFFFLL;
}

void sub_18E028E14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a50 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL raven::RavenPNTEstimator::UseHighAccelerationParameters(raven::RavenPNTEstimator *this, int8x16_t a2, int8x16_t a3)
{
  uint64_t v3 = *((void *)this + 146);
  if (!v3) {
    return 1;
  }
  a2.i64[0] = *(void *)(v3 + 848);
  uint64_t v14 = 0;
  double v15 = 0.0;
  CNTimeSpan::SetTimeSpan(&v14, 0, a2, a3);
  uint64_t v7 = CNTimeSpan::operator-((uint64_t)this + 80, (void *)this + 8, v5, v6);
  if (!v7 && (*(void *)&v8 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000) {
    goto LABEL_7;
  }
  if (!v14)
  {
    double v9 = v15;
    if ((*(void *)&v15 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
LABEL_8:
      if (v9 >= v8) {
        return 1;
      }
      goto LABEL_11;
    }
  }
  if (v7 == v14)
  {
LABEL_7:
    double v9 = v15;
    goto LABEL_8;
  }
  if (v7 < v14) {
    return 1;
  }
LABEL_11:
  if (!*((unsigned char *)this + 1208)) {
    return 1;
  }
  unsigned int v10 = *((unsigned __int8 *)this + 1320);
  if (v10 < 8 && ((0xDFu >> v10) & 1) != 0) {
    return 1;
  }
  if (!*((unsigned char *)this + 1624)) {
    return 1;
  }
  int v11 = *((unsigned __int8 *)this + 1736);
  return v11 == 3 || v11 == 0;
}

double sub_18E028F24(uint64_t a1)
{
  *(_OWORD *)(a1 + 25) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)&double result = 0x100000013;
  *(void *)(a1 + 72) = 0x100000013;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 48) = &unk_1EDD17CB8;
  *(void *)(a1 + 80) = a1 + 88;
  *(void *)(a1 + 264) = 0x100000013;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 240) = &unk_1EDD17CB8;
  *(void *)(a1 + 272) = a1 + 280;
  *(unsigned char *)(a1 + 432) = 1;
  *(void *)(a1 + 440) = 0;
  return result;
}

uint64_t sub_18E028FA8(uint64_t a1)
{
  uint64_t v8 = MEMORY[0x1F4188790](a1);
  v240[3] = *MEMORY[0x1E4F143B8];
  double v9 = fabs(*v1);
  BOOL v10 = fabs(v9 + -1.0) < 2.22044605e-16;
  if (v9 < 2.22044605e-16) {
    BOOL v10 = 1;
  }
  v11.i64[0] = *(void *)(v2 + 8);
  v11.i64[1] = *(void *)(v3 + 8);
  uint64_t result = 0xFFFFFFFFLL;
  if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(v11, (int32x4_t)xmmword_18E1FD6A0)))) & 1) == 0
    && v10)
  {
    uint64_t v13 = v7;
    uint64_t v14 = v6;
    uint64_t v15 = v5;
    uint64_t v16 = v4;
    uint64_t v17 = v3;
    uint64_t v18 = v2;
    uint64_t v19 = v1;
    v235[0] = &unk_1EDD14240;
    v235[1] = 0;
    int64x2_t v236 = vdupq_n_s64(0x7FF8000000000000uLL);
    v235[2] = 0;
    *(double *)&uint64_t v237 = NAN;
    double v20 = (cnprint::CNPrinter *)(*(uint64_t (**)(void, uint64_t, void *))(**(void **)v4 + 48))(*(void *)v4, v8, v235);
    if (v20)
    {
      if (cnprint::CNPrinter::GetLogLevel(v20) <= 1)
      {
        LOWORD(v172) = 12;
        v171[0] = 1;
        double v85 = *(double *)(v8 + 8) + (double)*(uint64_t *)v8;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v172, v171, "dyn_SixDOF, Could not get rategyro measurement at t, %.3lf", v21, v22, v23, v24, v25, SLOBYTE(v85));
      }
      return 0xFFFFFFFFLL;
    }
    v231[2] = 0;
    v231[0] = &unk_1EDD14658;
    v231[1] = 0;
    uint64_t v26 = (cnprint::CNPrinter *)(*(uint64_t (**)(void, uint64_t, void *))(**((void **)v16 + 1) + 48))(*((void *)v16 + 1), v8, v231);
    if (v26)
    {
      if (cnprint::CNPrinter::GetLogLevel(v26) <= 1)
      {
        LOWORD(v172) = 12;
        v171[0] = 1;
        double v86 = *(double *)(v8 + 8) + (double)*(uint64_t *)v8;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v172, v171, "dyn_SixDOF, Could not get accelerometer measurement at t, %.3lf", v27, v28, v29, v30, v31, SLOBYTE(v86));
      }
      return 0xFFFFFFFFLL;
    }
    double v32 = v16[3];
    if (v32 <= 0.0) {
      return 0xFFFFFFFFLL;
    }
    if (v16[4] <= 0.0) {
      return 0xFFFFFFFFLL;
    }
    double v33 = v16[5];
    if (v33 <= 0.0) {
      return 0xFFFFFFFFLL;
    }
    if (((void)v16[6] & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
      return 0xFFFFFFFFLL;
    }
    if (((void)v16[7] & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
      return 0xFFFFFFFFLL;
    }
    if (((void)v16[8] & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
      return 0xFFFFFFFFLL;
    }
    if (((void)v16[9] & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
      return 0xFFFFFFFFLL;
    }
    if (((void)v16[10] & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
      return 0xFFFFFFFFLL;
    }
    if (((void)v16[11] & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
      return 0xFFFFFFFFLL;
    }
    if (((void)v16[12] & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
      return 0xFFFFFFFFLL;
    }
    double v125 = v16[11];
    double v126 = v16[12];
    double v123 = v16[9];
    double v124 = v16[10];
    double v121 = v16[7];
    double v122 = v16[8];
    double v119 = v16[4];
    double v120 = v16[6];
    double v34 = v16[13];
    if ((*(void *)&v34 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
      return 0xFFFFFFFFLL;
    }
    double v118 = v16[14];
    if ((*(void *)&v118 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
      return 0xFFFFFFFFLL;
    }
    int32x4_t v35 = *(double **)(v18 + 32);
    double v37 = v35[6];
    double v36 = v35[7];
    double v39 = v35[8];
    double v38 = v35[9];
    double v40 = sqrt(v36 * v36 + v37 * v37 + v39 * v39 + v38 * v38);
    if (fabs(v40) <= 0.000000015) {
      return 0xFFFFFFFFLL;
    }
    uint64_t v41 = *((void *)v16 + 2);
    uint64_t v42 = *((void *)v35 + 2);
    uint64_t v106 = *((void *)v35 + 4);
    uint64_t v107 = *((void *)v35 + 3);
    uint64_t v105 = *((void *)v35 + 5);
    double v108 = v35[10];
    double v109 = v35[11];
    double v110 = v35[12];
    double v111 = v35[13];
    double v112 = v35[14];
    double v113 = v35[15];
    double v114 = v35[16];
    double v115 = v35[17];
    double v116 = v35[18];
    uint64_t v103 = *((void *)v35 + 1);
    double v104 = *v35;
    *(double *)v240 = *v35;
    v240[1] = v103;
    uint64_t v102 = v42;
    v240[2] = v42;
    if ((*(unsigned int (**)(uint64_t, void *, long long *, void *))(*(void *)v41 + 48))(v41, v240, &v238, v230))
    {
      return 0xFFFFFFFFLL;
    }
    double v43 = v37 / v40;
    double v44 = v36 / v40;
    double v45 = v39 / v40;
    double v46 = v38 / v40;
    double v47 = sqrt(v44 * v44 + v43 * v43 + v45 * v45 + v46 * v46);
    if (fabs(v47) >= 2.22044605e-16)
    {
      double v49 = v43 / v47;
      double v50 = v44 / v47;
      double v51 = v45 / v47;
      double v48 = v46 / v47;
    }
    else
    {
      double v48 = 1.0;
      double v49 = 0.0;
      double v50 = 0.0;
      double v51 = 0.0;
    }
    v227.f64[0] = v49;
    v227.f64[1] = v50;
    double v228 = v51;
    double v229 = v48;
    uint64_t v224 = 0x100000004;
    long long v223 = xmmword_18E1F6F80;
    v222 = &unk_1EDD19458;
    v225 = v226;
    v226[0] = v37 / v40;
    v226[1] = v36 / v40;
    v226[2] = v39 / v40;
    v226[3] = v38 / v40;
    cnrotation::CNRotation::RotationMatrix((cnrotation::CNRotation *)&v227, (uint64_t)v221);
    sub_18DFF63E0((uint64_t)v221, (uint64_t)v220);
    double v52 = *(double **)(v17 + 32);
    double v96 = *v52;
    double v97 = v52[1];
    double v88 = v52[3];
    double v89 = v52[4];
    double v100 = v52[7];
    double v101 = v52[6];
    double v98 = v52[2];
    double v99 = v52[8];
    double v90 = v52[9];
    double v91 = v52[5];
    double v92 = v52[10];
    double v93 = v52[11];
    double v53 = v52[14];
    double v94 = v52[12];
    double v95 = v52[13];
    uint64_t v174 = 0x300000001;
    v172 = &unk_1EDD18258;
    v175 = v176;
    long long v173 = xmmword_18E1F8560;
    *(void *)&v176[0] = 0x100000000;
    DWORD2(v176[0]) = 2;
    sub_18DFEC63C((uint64_t)&v172, (uint64_t)v219);
    uint64_t v174 = 0x300000001;
    v172 = &unk_1EDD18258;
    v175 = v176;
    long long v173 = xmmword_18E1F8560;
    *(void *)&v176[0] = 0x400000003;
    DWORD2(v176[0]) = 5;
    sub_18DFEC63C((uint64_t)&v172, (uint64_t)v218);
    uint64_t v174 = 0x400000001;
    v172 = &unk_1EDD18318;
    v175 = v176;
    long long v173 = xmmword_18E1FD6B0;
    v176[0] = xmmword_18E1FD6C0;
    sub_18E06D2D0((uint64_t)v217, (uint64_t)&v172);
    uint64_t v174 = 0x300000001;
    v172 = &unk_1EDD18258;
    v175 = v176;
    long long v173 = xmmword_18E1F8560;
    *(void *)&v176[0] = 0xB0000000ALL;
    DWORD2(v176[0]) = 12;
    sub_18DFEC63C((uint64_t)&v172, (uint64_t)v216);
    uint64_t v174 = 0x300000001;
    v172 = &unk_1EDD18258;
    v175 = v176;
    long long v173 = xmmword_18E1F8560;
    *(void *)&v176[0] = 0xE0000000DLL;
    DWORD2(v176[0]) = 15;
    sub_18DFEC63C((uint64_t)&v172, (uint64_t)v215);
    uint64_t v174 = 0x300000001;
    v172 = &unk_1EDD18258;
    v175 = v176;
    long long v173 = xmmword_18E1F8560;
    *(void *)&v176[0] = 0x1100000010;
    DWORD2(v176[0]) = 18;
    sub_18DFEC63C((uint64_t)&v172, (uint64_t)v214);
    uint64_t v174 = 0x300000001;
    v172 = &unk_1EDD18258;
    v175 = v176;
    long long v173 = xmmword_18E1F8560;
    *(void *)&v176[0] = 0x100000000;
    DWORD2(v176[0]) = 2;
    sub_18DFEC63C((uint64_t)&v172, (uint64_t)v213);
    uint64_t v174 = 0x300000001;
    v172 = &unk_1EDD18258;
    v175 = v176;
    long long v173 = xmmword_18E1F8560;
    *(void *)&v176[0] = 0x400000003;
    DWORD2(v176[0]) = 5;
    sub_18DFEC63C((uint64_t)&v172, (uint64_t)v212);
    uint64_t v174 = 0x300000001;
    v172 = &unk_1EDD18258;
    v175 = v176;
    long long v173 = xmmword_18E1F8560;
    *(void *)&v176[0] = 0x700000006;
    DWORD2(v176[0]) = 8;
    sub_18DFEC63C((uint64_t)&v172, (uint64_t)v211);
    uint64_t v174 = 0x300000001;
    v172 = &unk_1EDD18258;
    v175 = v176;
    long long v173 = xmmword_18E1F8560;
    *(void *)&v176[0] = 0xA00000009;
    DWORD2(v176[0]) = 11;
    sub_18DFEC63C((uint64_t)&v172, (uint64_t)v210);
    uint64_t v174 = 0x300000001;
    v172 = &unk_1EDD18258;
    v175 = v176;
    long long v173 = xmmword_18E1F8560;
    *(void *)&v176[0] = 0xD0000000CLL;
    DWORD2(v176[0]) = 14;
    sub_18DFEC63C((uint64_t)&v172, (uint64_t)v209);
    int64x2_t v87 = v236;
    double v117 = *(double *)&v237;
    double v54 = v232;
    double v55 = v233;
    double v56 = v234;
    sub_18E06D37C((uint64_t)v207);
    uint64_t v57 = v208;
    *(void *)uint64_t v208 = v107;
    *(void *)(v57 + 8) = v106;
    *(void *)(v57 + 16) = v105;
    uint64_t v204 = 0x100000003;
    long long v203 = xmmword_18E1F6F60;
    v202 = &unk_1EDD18D98;
    v205 = v206;
    v206[0] = -(v111 - v114 * v54) - v101;
    v206[1] = -(v112 - v115 * v55) - v100;
    v206[2] = -(v113 - v116 * v56) - v99;
    uint64_t v198 = 0x100000003;
    long long v197 = xmmword_18E1F6F60;
    v196 = &unk_1EDD18D98;
    v199 = &v200;
    long long v200 = v238;
    uint64_t v201 = v239;
    uint64_t v193 = 0x100000003;
    long long v192 = xmmword_18E1F6F60;
    v191 = &unk_1EDD18D98;
    v194 = v195;
    *(double *)v195 = v104;
    v195[1] = v103;
    v195[2] = v102;
    uint64_t v188 = 0x100000003;
    long long v187 = xmmword_18E1F6F60;
    v186 = &unk_1EDD18D98;
    v189 = v190;
    v190[0] = v107;
    v190[1] = v106;
    v190[2] = v105;
    sub_18DFEB188(3, 1, (uint64_t)v185);
    *(void *)(v185[4] + 16) = 0x3F131DA7D7CB8D5BLL;
    sub_18E0300B4((uint64_t)v220, (uint64_t)&v202, (uint64_t)v151);
    sub_18E053CBC((uint64_t)v151, (uint64_t)&v196, (uint64_t)v127);
    sub_18E030138((uint64_t)v185, (uint64_t)&v191, (uint64_t)v149);
    sub_18E030138((uint64_t)v185, (uint64_t)v149, (uint64_t)v150);
    sub_18E01E318((uint64_t)v127, (uint64_t)v150, (uint64_t)v135);
    sub_18E030138((uint64_t)v185, (uint64_t)&v186, (uint64_t)v132);
    v58.f64[0] = 2.0;
    sub_18E053C38((uint64_t)v132, (uint64_t)v148, v58);
    sub_18E01E318((uint64_t)v135, (uint64_t)v148, (uint64_t)v171);
    sub_18E06DD64((uint64_t)&v172, (uint64_t)v207, (uint64_t)v218);
    sub_18E0601D0((uint64_t)&v172, (uint64_t)v171);
    uint64_t v182 = 0x100000003;
    long long v181 = xmmword_18E1F6F60;
    v180 = &unk_1EDD18D98;
    v183 = v184;
    v184[0] = *(double *)v87.i64 - v108 - v96;
    v184[1] = *(double *)&v87.i64[1] - v109 - v97;
    v184[2] = v117 - v110 - v98;
    sub_18E0300B4((uint64_t)v221, (uint64_t)v185, (uint64_t)&v172);
    sub_18E01E318((uint64_t)&v180, (uint64_t)&v172, (uint64_t)&v178);
    cnrotation::CNRotation::RotationDerivativeQuaternion((cnrotation::CNRotation *)&v227, *v179, v179[1], v179[2], (uint64_t)v177);
    uint64_t v59 = v208;
    long long v60 = v177[1];
    *(_OWORD *)(v208 + 48) = v177[0];
    *(_OWORD *)(v59 + 64) = v60;
    *(double *)&long long v60 = -*v19;
    double v61 = *(double *)&v60 / v32;
    double v62 = *(double *)&v60 / v119;
    *(double *)(v59 + 80) = v88 + v61 * (v108 - v120);
    *(double *)(v59 + 88) = v89 + v61 * (v109 - v121);
    *(double *)(v59 + 96) = v91 + v61 * (v110 - v122);
    *(double *)(v59 + 104) = v90 + *(double *)&v60 / v119 * (v111 - v123);
    *(double *)(v59 + 112) = v92 + *(double *)&v60 / v119 * (v112 - v124);
    *(double *)(v59 + 120) = v93 + *(double *)&v60 / v119 * (v113 - v125);
    double v63 = *(double *)&v60 / v33;
    *(double *)(v59 + 128) = v94 + v63 * (v114 - v126);
    *(double *)(v59 + 136) = v95 + v63 * (v115 - v34);
    *(double *)(v59 + 144) = v53 + v63 * (v116 - v118);
    sub_18DFE2F24(v15, (uint64_t)v207);
    sub_18E06D3C0((uint64_t)&v172);
    sub_18E06D400((uint64_t)v171);
    int v64 = HIDWORD(v173);
    long long v65 = v175;
    *((void *)v175 + 3 * HIDWORD(v173)) = 0x3FF0000000000000;
    *((void *)v65 + ((4 * v64) | 1)) = 0x3FF0000000000000;
    *((void *)v65 + 5 * v64 + 2) = 0x3FF0000000000000;
    uint64_t v168 = 0x300000003;
    long long v167 = xmmword_18E1F0010;
    v170[0] = v230[0];
    v170[1] = v230[3];
    v170[6] = v230[2];
    v170[7] = v230[5];
    v170[3] = v230[1];
    v170[2] = v230[6];
    v166 = &unk_1EDD18EE8;
    v169 = v170;
    v170[4] = v230[4];
    v170[5] = v230[7];
    v170[8] = v230[8];
    sub_18E06D444(3, (uint64_t)v163);
    long long v66 = v165;
    void *v165 = 0xBE36D6A597D265B0;
    v66[v164 + 1] = 0xBE36D6A597D265B0;
    sub_18E06D4CC((uint64_t)&v166, (uint64_t)v163, (uint64_t)v127);
    sub_18DFEE864((uint64_t)v135, (uint64_t)&v172, (uint64_t)v218, (uint64_t)v219);
    sub_18DFEC6E4((uint64_t)v135, (uint64_t)v127);
    sub_18E06D444(3, (uint64_t)v160);
    uint64_t v67 = v162;
    *(void *)(v162 + 8 * v161) = 0xBF231DA7D7CB8D5BLL;
    *(void *)(v67 + 8) = 0x3F231DA7D7CB8D5BLL;
    sub_18E06041C((uint64_t)v160, (uint64_t)v127);
    sub_18DFEE864((uint64_t)v135, (uint64_t)&v172, (uint64_t)v218, (uint64_t)v218);
    sub_18DFEC6E4((uint64_t)v135, (uint64_t)v127);
    cnrotation::CNRotation::dRdq1((cnrotation::CNRotation *)&v227, (uint64_t)v135);
    sub_18DFF63E0((uint64_t)v135, (uint64_t)v159);
    cnrotation::CNRotation::dRdq2((cnrotation::CNRotation *)&v227, (uint64_t)v135);
    sub_18DFF63E0((uint64_t)v135, (uint64_t)v158);
    cnrotation::CNRotation::dRdq3((cnrotation::CNRotation *)&v227, (uint64_t)v135);
    sub_18DFF63E0((uint64_t)v135, (uint64_t)v157);
    cnrotation::CNRotation::dRdq4(&v227, (uint64_t)v135);
    sub_18DFF63E0((uint64_t)v135, (uint64_t)v156);
    sub_18E0300B4((uint64_t)v159, (uint64_t)&v202, (uint64_t)v127);
    sub_18E0602D0((uint64_t)v135, (uint64_t)&v172, (uint64_t)v218, 6);
    sub_18DFEC830((uint64_t)v135, (uint64_t)v127);
    sub_18E0300B4((uint64_t)v158, (uint64_t)&v202, (uint64_t)v127);
    sub_18E0602D0((uint64_t)v135, (uint64_t)&v172, (uint64_t)v218, 7);
    sub_18DFEC830((uint64_t)v135, (uint64_t)v127);
    sub_18E0300B4((uint64_t)v157, (uint64_t)&v202, (uint64_t)v127);
    sub_18E0602D0((uint64_t)v135, (uint64_t)&v172, (uint64_t)v218, 8);
    sub_18DFEC830((uint64_t)v135, (uint64_t)v127);
    sub_18E0300B4((uint64_t)v156, (uint64_t)&v202, (uint64_t)v127);
    sub_18E0602D0((uint64_t)v135, (uint64_t)&v172, (uint64_t)v218, 9);
    sub_18DFEC830((uint64_t)v135, (uint64_t)v127);
    sub_18E060330(3u, 3u, (uint64_t)v135);
    sub_18E06041C((uint64_t)v135, (uint64_t)v155);
    sub_18DFF6360((uint64_t)v220, (uint64_t)v155, (uint64_t)v127);
    sub_18DFEE864((uint64_t)v135, (uint64_t)&v172, (uint64_t)v218, (uint64_t)v215);
    sub_18DFEC6E4((uint64_t)v135, (uint64_t)v127);
    sub_18E060330(3u, 3u, (uint64_t)v152);
    long long v68 = v154;
    *(double *)v154 = v232;
    int v69 = v153;
    *(double *)&v68[v153 + 1] = v233;
    *(double *)&v68[2 * v69 + 2] = v234;
    sub_18DFF6360((uint64_t)v220, (uint64_t)v152, (uint64_t)v127);
    sub_18DFEE864((uint64_t)v135, (uint64_t)&v172, (uint64_t)v218, (uint64_t)v214);
    sub_18DFEC6E4((uint64_t)v135, (uint64_t)v127);
    v70.f64[0] = *v179;
    cnrotation::CNRotation::Q(v70, v179[1], v179[2], (uint64_t)v151);
    cnrotation::CNRotation::dQdwx((uint64_t)v150);
    cnrotation::CNRotation::dQdwy((uint64_t)v149);
    cnrotation::CNRotation::dQdwz((uint64_t)v148);
    sub_18DFF63E0((uint64_t)v159, (uint64_t)v147);
    sub_18DFF63E0((uint64_t)v158, (uint64_t)v146);
    sub_18DFF63E0((uint64_t)v157, (uint64_t)v145);
    sub_18DFF63E0((uint64_t)v156, (uint64_t)v144);
    sub_18E06041C((uint64_t)v147, (uint64_t)v135);
    sub_18E0300B4((uint64_t)v135, (uint64_t)v185, (uint64_t)v142);
    sub_18E06041C((uint64_t)v146, (uint64_t)v135);
    sub_18E0300B4((uint64_t)v135, (uint64_t)v185, (uint64_t)v140);
    sub_18E06041C((uint64_t)v145, (uint64_t)v135);
    sub_18E0300B4((uint64_t)v135, (uint64_t)v185, (uint64_t)v138);
    sub_18E06041C((uint64_t)v144, (uint64_t)v135);
    sub_18E0300B4((uint64_t)v135, (uint64_t)v185, (uint64_t)v136);
    sub_18E06DE8C((uint64_t)v135, (uint64_t)&v172, (uint64_t)v217, (uint64_t)v217);
    sub_18E06D50C((uint64_t)v135, (uint64_t)v151);
    sub_18E06D6E4((uint64_t)v135, (uint64_t)&v172, (uint64_t)v217, 6);
    v71.f64[0] = *v143;
    sub_18E06D848((uint64_t)v130, (uint64_t)v150, v71);
    v72.f64[0] = v143[1];
    sub_18E06D848((uint64_t)v129, (uint64_t)v149, v72);
    sub_18E06D7C8((uint64_t)v130, (uint64_t)v129, (uint64_t)v131);
    v73.f64[0] = v143[2];
    sub_18E06D848((uint64_t)v128, (uint64_t)v148, v73);
    sub_18E06D7C8((uint64_t)v131, (uint64_t)v128, (uint64_t)v132);
    sub_18E06D744((uint64_t)v132, (uint64_t)&v222, (uint64_t)v133);
    sub_18E06D658((uint64_t)v134, (uint64_t)v135, (uint64_t)v133);
    sub_18E06D6E4((uint64_t)v127, (uint64_t)&v172, (uint64_t)v217, 6);
    sub_18E06D890((uint64_t)v127, (uint64_t)v134);
    sub_18E06D6E4((uint64_t)v135, (uint64_t)&v172, (uint64_t)v217, 7);
    v74.f64[0] = *v141;
    sub_18E06D848((uint64_t)v130, (uint64_t)v150, v74);
    v75.f64[0] = v141[1];
    sub_18E06D848((uint64_t)v129, (uint64_t)v149, v75);
    sub_18E06D7C8((uint64_t)v130, (uint64_t)v129, (uint64_t)v131);
    v76.f64[0] = v141[2];
    sub_18E06D848((uint64_t)v128, (uint64_t)v148, v76);
    sub_18E06D7C8((uint64_t)v131, (uint64_t)v128, (uint64_t)v132);
    sub_18E06D744((uint64_t)v132, (uint64_t)&v222, (uint64_t)v133);
    sub_18E06D658((uint64_t)v134, (uint64_t)v135, (uint64_t)v133);
    sub_18E06D6E4((uint64_t)v127, (uint64_t)&v172, (uint64_t)v217, 7);
    sub_18E06D890((uint64_t)v127, (uint64_t)v134);
    sub_18E06D6E4((uint64_t)v135, (uint64_t)&v172, (uint64_t)v217, 8);
    v77.f64[0] = *v139;
    sub_18E06D848((uint64_t)v130, (uint64_t)v150, v77);
    v78.f64[0] = v139[1];
    sub_18E06D848((uint64_t)v129, (uint64_t)v149, v78);
    sub_18E06D7C8((uint64_t)v130, (uint64_t)v129, (uint64_t)v131);
    v79.f64[0] = v139[2];
    sub_18E06D848((uint64_t)v128, (uint64_t)v148, v79);
    sub_18E06D7C8((uint64_t)v131, (uint64_t)v128, (uint64_t)v132);
    sub_18E06D744((uint64_t)v132, (uint64_t)&v222, (uint64_t)v133);
    sub_18E06D658((uint64_t)v134, (uint64_t)v135, (uint64_t)v133);
    sub_18E06D6E4((uint64_t)v127, (uint64_t)&v172, (uint64_t)v217, 8);
    sub_18E06D890((uint64_t)v127, (uint64_t)v134);
    sub_18E06D6E4((uint64_t)v135, (uint64_t)&v172, (uint64_t)v217, 9);
    v80.f64[0] = *v137;
    sub_18E06D848((uint64_t)v130, (uint64_t)v150, v80);
    v81.f64[0] = v137[1];
    sub_18E06D848((uint64_t)v129, (uint64_t)v149, v81);
    sub_18E06D7C8((uint64_t)v130, (uint64_t)v129, (uint64_t)v131);
    v82.f64[0] = v137[2];
    sub_18E06D848((uint64_t)v128, (uint64_t)v148, v82);
    sub_18E06D7C8((uint64_t)v131, (uint64_t)v128, (uint64_t)v132);
    sub_18E06D744((uint64_t)v132, (uint64_t)&v222, (uint64_t)v133);
    sub_18E06D658((uint64_t)v134, (uint64_t)v135, (uint64_t)v133);
    sub_18E06D6E4((uint64_t)v127, (uint64_t)&v172, (uint64_t)v217, 9);
    sub_18E06D890((uint64_t)v127, (uint64_t)v134);
    sub_18E06D9DC((uint64_t)v127, (uint64_t)v150);
    sub_18E06D744((uint64_t)v127, (uint64_t)&v222, (uint64_t)v132);
    sub_18E06D6E4((uint64_t)v135, (uint64_t)&v172, (uint64_t)v217, 10);
    sub_18E06D890((uint64_t)v135, (uint64_t)v132);
    sub_18E06D9DC((uint64_t)v127, (uint64_t)v149);
    sub_18E06D744((uint64_t)v127, (uint64_t)&v222, (uint64_t)v132);
    sub_18E06D6E4((uint64_t)v135, (uint64_t)&v172, (uint64_t)v217, 11);
    sub_18E06D890((uint64_t)v135, (uint64_t)v132);
    sub_18E06D9DC((uint64_t)v127, (uint64_t)v148);
    sub_18E06D744((uint64_t)v127, (uint64_t)&v222, (uint64_t)v132);
    sub_18E06D6E4((uint64_t)v135, (uint64_t)&v172, (uint64_t)v217, 12);
    sub_18E06D890((uint64_t)v135, (uint64_t)v132);
    int v83 = HIDWORD(v173);
    long long v84 = (double *)v175;
    *(double *)&v175[5 * HIDWORD(v173) + 5] = v61;
    v84[11 * v83 + 11] = v61;
    v84[12 * v83 + 12] = v61;
    v84[13 * v83 + 13] = v62;
    v84[14 * v83 + 14] = v62;
    v84[15 * v83 + 15] = v62;
    v84[16 * v83 + 16] = v63;
    v84[17 * v83 + 17] = v63;
    v84[18 * v83 + 18] = v63;
    sub_18DFE2F24(v14, (uint64_t)&v172);
    sub_18E06E2D0((uint64_t)v135, (uint64_t)&v172, (uint64_t)v217, (uint64_t)v216);
    sub_18E06E2D0((uint64_t)v127, (uint64_t)v171, (uint64_t)v217, (uint64_t)v213);
    sub_18E06DA24((uint64_t)v127, (uint64_t)v135);
    sub_18E060330(3u, 3u, (uint64_t)v127);
    sub_18DFEE864((uint64_t)v135, (uint64_t)v171, (uint64_t)v216, (uint64_t)v212);
    sub_18DFEC6E4((uint64_t)v135, (uint64_t)v127);
    sub_18DFEE864((uint64_t)v135, (uint64_t)&v172, (uint64_t)v218, (uint64_t)v215);
    sub_18DFEE864((uint64_t)v127, (uint64_t)v171, (uint64_t)v218, (uint64_t)v211);
    sub_18E06DB70((uint64_t)v127, (uint64_t)v135);
    sub_18E060330(3u, 3u, (uint64_t)v127);
    sub_18DFEE864((uint64_t)v135, (uint64_t)v171, (uint64_t)v215, (uint64_t)v210);
    sub_18DFEC6E4((uint64_t)v135, (uint64_t)v127);
    sub_18E060330(3u, 3u, (uint64_t)v127);
    sub_18DFEE864((uint64_t)v135, (uint64_t)v171, (uint64_t)v214, (uint64_t)v209);
    sub_18DFEC6E4((uint64_t)v135, (uint64_t)v127);
    sub_18DFE2F24(v13, (uint64_t)v171);
    return 0;
  }
  return result;
}

uint64_t sub_18E02AA54(uint64_t a1, uint64_t a2)
{
  double v2 = *(double *)(a2 + 440);
  if ((*(void *)&v2 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && v2 >= 0.0
    && ((*(double *)(a1 + 5944) = v2, *(_DWORD *)(a2 + 16) == 4) ? (BOOL v3 = *(_DWORD *)(a2 + 20) == 4) : (BOOL v3 = 0),
        v3 ? (BOOL v4 = *(unsigned char *)(a2 + 40) == 0) : (BOOL v4 = 0),
        v4))
  {
    return sub_18E063E3C(a1, (int *)a2);
  }
  else
  {
    return 0xFFFFFFFFLL;
  }
}

uint64_t sub_18E02AA9C(uint64_t a1)
{
  *(void *)(a1 + 24) = 0x10000001ALL;
  *(void *)a1 = &unk_1EDD186A8;
  *(void *)(a1 + 32) = a1 + 40;
  *(_OWORD *)(a1 + 8) = xmmword_18E1FD600;
  return sub_18DFE2CC8(a1, 0.0);
}

void *sub_18E02AAE0(void *result)
{
  *uint64_t result = &unk_1EDD17478;
  return result;
}

uint64_t sub_18E02AB00(uint64_t a1, char *__filename)
{
  *(unsigned char *)(a1 + 8) = 0;
  BOOL v3 = fopen(__filename, "r");
  if (!v3) {
    return 0xFFFFFFFFLL;
  }
  BOOL v4 = v3;
  *(unsigned char *)(a1 + 8) = 1;
  uint64_t v5 = -504;
  uint64_t v6 = 40;
  while (fscanf(v4, "%u %u %lg %lg %lg %lg\n", a1 + v6, a1 + v6 + 252, a1 + v5 + 1048, a1 + v5 + 1552, a1 + v5 + 2056, a1 + v5 + 2560) == 6)
  {
    v6 += 4;
    v5 += 8;
    if (!v5)
    {
      uint64_t v7 = 0;
      goto LABEL_8;
    }
  }
  *(unsigned char *)(a1 + 8) = 0;
  uint64_t v7 = 0xFFFFFFFFLL;
LABEL_8:
  fclose(v4);
  return v7;
}

uint64_t sub_18E02ABDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  unsigned int v7 = 0;
  int v8 = 2;
  int v9 = 3;
  while (2)
  {
    uint64_t v10 = 0;
    unsigned int v11 = v7;
    if (v7 >= 0x3F) {
      int v12 = 63;
    }
    else {
      int v12 = v7;
    }
    int v13 = -v12;
    uint64_t v14 = (void *)(a1 + 1048 + 8 * v7);
    int v15 = v13 + 63;
    uint64_t v16 = a1 + 8 * v7;
    uint64_t v17 = (_DWORD *)(a1 + 292 + 4 * v7);
    uint64_t v18 = a7 + 8 * v7;
    uint64_t v19 = a6 + 8 * v7;
    uint64_t v20 = a5 + 8 * v7;
    uint64_t v21 = a4 + 8 * v7;
    uint64_t v22 = a3 + 4 * v7;
    uint64_t v23 = a2 + 4 * v7;
    do
    {
      if (v15 == v10) {
        return 0xFFFFFFFFLL;
      }
      if (*(_DWORD *)(v23 + 4 * v10) != v8) {
        return 0xFFFFFFFFLL;
      }
      if (v10 != *(_DWORD *)(v22 + 4 * v10)) {
        return 0xFFFFFFFFLL;
      }
      uint64_t v24 = *(void *)(v21 + 8 * v10);
      if ((v24 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
        || (*(void *)(v20 + 8 * v10) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
        || (*(void *)(v19 + 8 * v10) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      {
        return 0xFFFFFFFFLL;
      }
      uint64_t v25 = 0xFFFFFFFFLL;
      if ((*(void *)(v18 + 8 * v10) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
        || *(double *)(v19 + 8 * v10) < 0.0
        || *(double *)(v18 + 8 * v10) < 0.0)
      {
        return v25;
      }
      *(v17 - 63) = v8;
      *(void *)(v16 + 8 * v10 + 544) = v24;
      int v26 = *(_DWORD *)(v22 + 4 * v10);
      *uint64_t v14 = *(void *)(v20 + 8 * v10);
      v14[63] = *(void *)(v19 + 8 * v10);
      uint64_t v27 = *(void *)(v18 + 8 * v10);
      *v17++ = v26;
      v14[126] = v27;
      ++v10;
      ++v14;
    }
    while (v9 != v10);
    unsigned int v7 = v11 + v10;
    ++v8;
    if (++v9 != 12) {
      continue;
    }
    break;
  }
  uint64_t v25 = 0;
  *(unsigned char *)(a1 + 8) = 1;
  return v25;
}

__n128 sub_18E02AD4C(uint64_t a1, double *a2)
{
  v5[0] = 0.0;
  v5[1] = 0.0;
  if (!sub_18DEE4CB8(a2, v5))
  {
    __n128 result = *(__n128 *)a2;
    *(_OWORD *)(a1 + 16) = *(_OWORD *)a2;
  }
  return result;
}

__n128 sub_18E02ADA0(uint64_t a1, double *a2)
{
  v5[0] = 0.0;
  v5[1] = 0.0;
  if (!sub_18DEE4CB8(a2, v5))
  {
    __n128 result = *(__n128 *)a2;
    *(_OWORD *)(a1 + 16) = *(_OWORD *)a2;
  }
  return result;
}

double raven::RavenPNTEstimator::GetHDOP(raven::RavenPNTEstimator *this)
{
  return *((double *)this + 2406);
}

double raven::RavenPNTEstimator::GetPSRPostFitResidualsBasedHorizontalPositionMisclosure(raven::RavenPNTEstimator *this)
{
  return *((double *)this + 2404);
}

double raven::RavenPNTEstimator::GetFailureProbability(raven::RavenPNTEstimator *this)
{
  uint64_t v1 = 16;
  if (!*((_DWORD *)this + 4846)) {
    uint64_t v1 = 8;
  }
  return *(double *)((char *)this + v1 + 19360);
}

void raven::RavenPNTEstimator::GetInitializationArgs(uint64_t a1@<X0>, int8x16_t *a2@<X1>, unsigned char *a3@<X8>, int8x16_t a4@<Q1>)
{
  uint64_t v5 = a1 + 19432;
  *a3 = 0;
  a3[296] = 0;
  uint64_t v62 = a1;
  int8x16_t v6 = *a2;
  int8x16_t v63 = *a2;
  if (!*(unsigned char *)(a1 + 19664))
  {
    int v13 = (cnprint::CNPrinter *)sub_18DEDE7B0(v54, "no previous solution");
    if (cnprint::CNPrinter::GetLogLevel(v13) > 1) {
      goto LABEL_75;
    }
    LOWORD(__p) = 12;
    v53[0] = 1;
    uint64_t v14 = v54;
    if (v55 < 0) {
      uint64_t v14 = (void **)v54[0];
    }
    char v15 = cnprint::CNLogFormatter::FormatGeneral(a1 + 2488, (uint64_t)&v63, "Could not initialize - %s", (const char *)v14);
    if (*(char *)(a1 + 2511) >= 0) {
      LOBYTE(v21) = v15;
    }
    else {
      uint64_t v21 = *(void *)(a1 + 2488);
    }
LABEL_53:
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&__p, v53, "%s", v16, v17, v18, v19, v20, v21);
    goto LABEL_75;
  }
  uint64_t v7 = CNTimeSpan::operator-((uint64_t)a2, (void *)(a1 + 20840), v6, a4);
  v54[0] = (void *)v7;
  v54[1] = v8;
  if (v7 < 0 || (double v11 = *(double *)&v8, *(double *)&v8 < 0.0))
  {
    int v12 = (void *)CNTimeSpan::operator-((double *)v54, v9, v10);
    double v11 = v22;
  }
  else
  {
    int v12 = (void *)v7;
  }
  uint64_t v23 = *(void *)(a1 + 1168);
  v9.i64[0] = *(void *)(v23 + 896);
  uint64_t __p = 0;
  double v51 = 0.0;
  CNTimeSpan::SetTimeSpan((uint64_t *)&__p, 0, v9, v10);
  if (!v12 && (*(void *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
LABEL_17:
    *(double *)v24.i64 = v51;
    goto LABEL_18;
  }
  if (__p || (*(double *)v24.i64 = v51, (*(void *)&v51 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000))
  {
    if (v12 != __p)
    {
      if ((uint64_t)v12 > (uint64_t)__p) {
        goto LABEL_19;
      }
      goto LABEL_26;
    }
    goto LABEL_17;
  }
LABEL_18:
  if (*(double *)v24.i64 < v11)
  {
LABEL_19:
    int v26 = (cnprint::CNPrinter *)sub_18DEDE7B0(v54, "solution too old");
    if (cnprint::CNPrinter::GetLogLevel(v26) > 1) {
      goto LABEL_75;
    }
    LOWORD(__p) = 12;
    v53[0] = 1;
    uint64_t v27 = v54;
    if (v55 < 0) {
      uint64_t v27 = (void **)v54[0];
    }
    char v28 = cnprint::CNLogFormatter::FormatGeneral(a1 + 2488, (uint64_t)&v63, "Could not initialize - %s", (const char *)v27);
    if (*(char *)(a1 + 2511) >= 0) {
      LOBYTE(v21) = v28;
    }
    else {
      uint64_t v21 = *(void *)(a1 + 2488);
    }
    goto LABEL_53;
  }
LABEL_26:
  if (*(unsigned char *)(v5 + 449) != 2)
  {
    double v32 = (cnprint::CNPrinter *)sub_18DEDE7B0(v54, "previous solution unhealthy");
    if (cnprint::CNPrinter::GetLogLevel(v32) > 1) {
      goto LABEL_75;
    }
    LOWORD(__p) = 12;
    v53[0] = 1;
    double v33 = v54;
    if (v55 < 0) {
      double v33 = (void **)v54[0];
    }
    char v34 = cnprint::CNLogFormatter::FormatGeneral(a1 + 2488, (uint64_t)&v63, "Could not initialize - %s", (const char *)v33);
    if (*(char *)(a1 + 2511) >= 0) {
      LOBYTE(v21) = v34;
    }
    else {
      uint64_t v21 = *(void *)(a1 + 2488);
    }
    goto LABEL_53;
  }
  if (!*(unsigned char *)(v5 + 448))
  {
    double v38 = (cnprint::CNPrinter *)sub_18DEDE7B0(v54, "previous solution uninitialized");
    if (cnprint::CNPrinter::GetLogLevel(v38) > 1) {
      goto LABEL_75;
    }
    LOWORD(__p) = 12;
    v53[0] = 1;
    double v39 = v54;
    if (v55 < 0) {
      double v39 = (void **)v54[0];
    }
    char v40 = cnprint::CNLogFormatter::FormatGeneral(a1 + 2488, (uint64_t)&v63, "Could not initialize - %s", (const char *)v39);
    if (*(char *)(a1 + 2511) >= 0) {
      LOBYTE(v21) = v40;
    }
    else {
      uint64_t v21 = *(void *)(a1 + 2488);
    }
    goto LABEL_53;
  }
  if (!*(unsigned char *)(v5 + 1704) || !*(unsigned char *)(v5 + 1784))
  {
    int32x4_t v35 = (cnprint::CNPrinter *)sub_18DEDE7B0(v54, "previous solution missing device pos/vel");
    if (cnprint::CNPrinter::GetLogLevel(v35) > 1) {
      goto LABEL_75;
    }
    LOWORD(__p) = 12;
    v53[0] = 1;
    double v36 = v54;
    if (v55 < 0) {
      double v36 = (void **)v54[0];
    }
    char v37 = cnprint::CNLogFormatter::FormatGeneral(a1 + 2488, (uint64_t)&v63, "Could not initialize - %s", (const char *)v36);
    if (*(char *)(a1 + 2511) >= 0) {
      LOBYTE(v21) = v37;
    }
    else {
      uint64_t v21 = *(void *)(a1 + 2488);
    }
    goto LABEL_53;
  }
  if (!*(unsigned char *)(v5 + 1864))
  {
    if (!*(unsigned char *)v5)
    {
      sub_18DEDE7B0(v54, "previous solution missing attitude");
      sub_18E02C208((cnprint::CNPrinter *)&v62, (uint64_t)v54);
      goto LABEL_75;
    }
    uint64_t v41 = CNTimeSpan::operator-(a1 + 20840, (void *)(a1 + 19448), v24, v25);
    v54[0] = (void *)v41;
    v54[1] = v42;
    if (v41 < 0 || (double v45 = *(double *)&v42, *(double *)&v42 < 0.0))
    {
      double v46 = (void *)CNTimeSpan::operator-((double *)v54, v43, v44);
      double v45 = v47;
    }
    else
    {
      double v46 = (void *)v41;
    }
    v43.i64[0] = *(void *)(v23 + 904);
    uint64_t __p = 0;
    double v51 = 0.0;
    CNTimeSpan::SetTimeSpan((uint64_t *)&__p, 0, v43, v44);
    if (v46 || (*(void *)&v45 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
    {
      if (!__p)
      {
        double v48 = v51;
        if ((*(void *)&v51 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
        {
LABEL_68:
          if (v48 >= v45) {
            goto LABEL_31;
          }
LABEL_74:
          sub_18DEDE7B0(v54, "previous solution information out of synch");
          sub_18E02C208((cnprint::CNPrinter *)&v62, (uint64_t)v54);
LABEL_75:
          if (v55 < 0) {
            operator delete(v54[0]);
          }
          return;
        }
      }
      if (v46 != __p)
      {
        if ((uint64_t)v46 <= (uint64_t)__p) {
          goto LABEL_31;
        }
        goto LABEL_74;
      }
    }
    double v48 = v51;
    goto LABEL_68;
  }
LABEL_31:
  if (*(_DWORD *)(v5 + 8168) != 350)
  {
    sub_18DEDE7B0(v54, "accelerometer cache not yet full");
    sub_18E02C208((cnprint::CNPrinter *)&v62, (uint64_t)v54);
    goto LABEL_75;
  }
  if (*(_DWORD *)(a1 + 44448) != 350)
  {
    sub_18DEDE7B0(v54, "gyro cache not yet full");
    sub_18E02C208((cnprint::CNPrinter *)&v62, (uint64_t)v54);
    goto LABEL_75;
  }
  *(_OWORD *)double v61 = *(_OWORD *)(a1 + 20840);
  v60[1] = 0;
  v60[2] = 0;
  v60[0] = &unk_1EDD14658;
  v57[0] = &unk_1EDD14240;
  v57[1] = 0;
  int64x2_t v58 = vdupq_n_s64(0x7FF8000000000000uLL);
  v57[2] = 0;
  uint64_t v59 = 0x7FF8000000000000;
  int v29 = sub_18E02C2AC(a1 + 44440, v61, (uint64_t)v57, *(double *)v58.i64, v25);
  if (!(v29 | sub_18E02CCDC(a1 + 27592, v61, (uint64_t)v60, v30, v31))) {
    sub_18E02D6FC((uint64_t)v56);
  }
  sub_18DF06614((uint64_t)v54);
  sub_18DEDD538(v54, (uint64_t)"missing sensor data at desired initialization time,gyro,", 56);
  double v49 = (void *)std::ostream::operator<<();
  sub_18DEDD538(v49, (uint64_t)",accel,", 7);
  std::ostream::operator<<();
  sub_18DEDD9B8((uint64_t)&v54[1], &__p);
  sub_18E02C208((cnprint::CNPrinter *)&v62, (uint64_t)&__p);
  if (v52 < 0) {
    operator delete(__p);
  }
  sub_18DF067AC((uint64_t)v54);
}

void sub_18E02C0BC(_Unwind_Exception *a1)
{
  sub_18E06B5D4(&STACK[0x4F0]);
  sub_18E06B5D4(&STACK[0x530]);
  if (*(unsigned char *)(v1 + 296)) {
    sub_18E06B5D4((void *)(v1 + 240));
  }
  _Unwind_Resume(a1);
}

void sub_18E02C208(cnprint::CNPrinter *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  if (cnprint::CNPrinter::GetLogLevel(a1) <= 1)
  {
    __int16 v14 = 12;
    unsigned __int8 v13 = 1;
    if (*(char *)(a2 + 23) >= 0) {
      uint64_t v5 = (const char *)a2;
    }
    else {
      uint64_t v5 = *(const char **)a2;
    }
    char v6 = cnprint::CNLogFormatter::FormatGeneral(v4 + 2488, (uint64_t)a1 + 8, "Could not initialize - %s", v5);
    if (*(char *)(v4 + 2511) >= 0) {
      LOBYTE(v12) = v6;
    }
    else {
      uint64_t v12 = *(void *)(v4 + 2488);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v14, &v13, "%s", v7, v8, v9, v10, v11, v12);
  }
}

uint64_t sub_18E02C2AC(uint64_t a1, double *a2, uint64_t a3, double a4, int8x16_t a5)
{
  int v5 = *(_DWORD *)(a1 + 8);
  if (!v5) {
    return 0xFFFFFFFFLL;
  }
  if (v5 == 1)
  {
    uint64_t v9 = a1 + 48 * *(unsigned int *)(a1 + 40);
    int8x16_t v133 = *(int8x16_t *)(v9 + 56);
    int64x2_t v134 = *(int64x2_t *)(v9 + 72);
    uint64_t v10 = *(void *)(v9 + 88);
    v132 = &unk_1EDD14240;
    uint64_t v135 = v10;
    *(int8x16_t *)v128 = v133;
    uint64_t v11 = CNTimeSpan::operator-((uint64_t)v128, a2, v133, a5);
    v131.i64[0] = v11;
    *(double *)&v131.i64[1] = v12;
    if (v11 < 0 || (*(double *)v13.i64 = v12, v12 < 0.0)) {
      uint64_t v11 = CNTimeSpan::operator-((double *)v131.i64, v13, v14);
    }
    v124[0] = v11;
    *(double *)&v124[1] = v12;
    if (!sub_18DEE4C00((double *)v124, (double *)(a1 + 16)))
    {
      uint64_t result = 0;
      int64x2_t v16 = v134;
      *(int8x16_t *)(a3 + 8) = v133;
      *(int64x2_t *)(a3 + 24) = v16;
      *(void *)(a3 + 40) = v135;
      return result;
    }
    return 0xFFFFFFFFLL;
  }
  uint64_t v17 = a1 + 48 + 48 * *(unsigned int *)(a1 + 40);
  v132 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v17 + 16))(v17);
  v133.i64[0] = v18;
  uint64_t v21 = CNTimeSpan::operator-((uint64_t)a2, &v132, v19, v20);
  int v23 = llround(*(double *)(a1 + 32) * (v22 + (double)v21));
  unsigned int v24 = v23 & ~(v23 >> 31);
  unsigned int v25 = *(_DWORD *)(a1 + 8);
  unsigned int v26 = v25 - 1;
  if (v24 < v25 - 1) {
    unsigned int v26 = v24;
  }
  int v27 = *(_DWORD *)(a1 + 40);
  unsigned int v28 = (v26 + v27) % 0x15E;
  uint64_t v29 = a1 + 48 + 48 * v28;
  int8x16_t v133 = *(int8x16_t *)(v29 + 8);
  int64x2_t v134 = *(int64x2_t *)(v29 + 24);
  uint64_t v30 = *(void *)(v29 + 40);
  v132 = &unk_1EDD14240;
  uint64_t v135 = v30;
  *(void *)v128 = &unk_1EDD14240;
  *(void *)&v128[8] = 0;
  int64x2_t v129 = vdupq_n_s64(0x7FF8000000000000uLL);
  *(void *)&v128[16] = 0;
  uint64_t v130 = 0x7FF8000000000000;
  uint64_t v119 = a3;
  if (v28 == v27)
  {
    unsigned int v31 = (v27 + 1) % v25;
    goto LABEL_20;
  }
  if (v28 == *(_DWORD *)(a1 + 44))
  {
    if (v28) {
      unsigned int v25 = v28;
    }
LABEL_19:
    unsigned int v31 = v25 - 1;
    goto LABEL_20;
  }
  *(int8x16_t *)double v124 = v133;
  if (sub_18DEE4C00((double *)v124, a2) || v28 == *(_DWORD *)(a1 + 44))
  {
    unsigned int v25 = v28;
    if (!v28) {
      unsigned int v25 = *(_DWORD *)(a1 + 8);
    }
    goto LABEL_19;
  }
  unsigned int v31 = (v28 + 1) % *(_DWORD *)(a1 + 8);
LABEL_20:
  unsigned int v118 = v31;
  uint64_t v32 = a1 + 48 * v31;
  int8x16_t v33 = *(int8x16_t *)(v32 + 72);
  *(_OWORD *)&v128[8] = *(_OWORD *)(v32 + 56);
  int64x2_t v129 = (int64x2_t)v33;
  uint64_t v130 = *(void *)(v32 + 88);
  int8x16_t v131 = v133;
  long long v127 = *(_OWORD *)&v128[8];
  uint64_t v34 = CNTimeSpan::operator-((uint64_t)a2, &v131, *(int8x16_t *)&v128[8], v33);
  double v36 = v35;
  *(void *)&long long v126 = v34;
  *((double *)&v126 + 1) = v35;
  uint64_t v39 = CNTimeSpan::operator-((uint64_t)a2, &v127, v37, v38);
  double v43 = v42;
  *(void *)&long long v125 = v39;
  *((double *)&v125 + 1) = v42;
  double v44 = v36;
  double v45 = v42;
  BOOL v47 = v36 < 0.0 || v34 < 0;
  uint64_t v120 = v34;
  if (v47)
  {
    uint64_t v120 = CNTimeSpan::operator-((double *)&v126, (int8x16_t)v40, v41);
    double v36 = v48;
  }
  uint64_t v121 = (uint64_t)a2;
  BOOL v50 = v45 < 0.0 || v39 < 0;
  uint64_t v122 = v39;
  if (v50)
  {
    uint64_t v122 = CNTimeSpan::operator-((double *)&v125, (int8x16_t)v40, v41);
    double v43 = v51;
  }
  uint64_t v52 = v34;
  if (v47)
  {
    uint64_t v52 = CNTimeSpan::operator-((double *)&v126, (int8x16_t)v40, v41);
    double v44 = v53;
  }
  uint64_t v54 = v39;
  if (v50)
  {
    uint64_t v54 = CNTimeSpan::operator-((double *)&v125, (int8x16_t)v40, v41);
    double v45 = v55;
  }
  if (!v52 && (*(void *)&v44 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000
    || !v54 && (*(void *)&v45 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000
    || (BOOL v56 = v52 <= v54, v52 == v54))
  {
    BOOL v56 = v44 <= v45;
  }
  uint64_t v58 = v120;
  uint64_t v57 = v121;
  if (!v56)
  {
    int64x2_t v60 = v134;
    *(int8x16_t *)&v124[1] = v133;
    int8x16_t v59 = v133;
    *(int64x2_t *)&v124[3] = v134;
    v124[5] = v135;
    uint64_t v61 = v135;
    int64x2_t v62 = *(int64x2_t *)(v32 + 72);
    int8x16_t v133 = *(int8x16_t *)(v32 + 56);
    int64x2_t v134 = v62;
    uint64_t v135 = *(void *)(v32 + 88);
    uint64_t v130 = v61;
    *(int8x16_t *)&v128[8] = v59;
    int64x2_t v129 = v60;
    int8x16_t v131 = v133;
    int8x16_t v63 = (int8x16_t)v125;
    __n128 v40 = (__n128)v126;
    long long v123 = v126;
    long long v126 = v125;
    long long v127 = *(_OWORD *)&v128[8];
    long long v125 = v123;
    uint64_t v34 = v126;
    if ((v126 & 0x8000000000000000) != 0 || (v40.n128_u64[0] = *((void *)&v126 + 1), *((double *)&v126 + 1) < 0.0))
    {
      uint64_t v58 = CNTimeSpan::operator-((double *)&v126, (int8x16_t)v40, v63);
      double v36 = v64;
    }
    else
    {
      double v36 = *((double *)&v126 + 1);
      uint64_t v58 = v126;
    }
    uint64_t v39 = v125;
    if ((v125 & 0x8000000000000000) != 0 || (v40.n128_u64[0] = *((void *)&v125 + 1), *((double *)&v125 + 1) < 0.0))
    {
      uint64_t v122 = CNTimeSpan::operator-((double *)&v125, (int8x16_t)v40, v63);
      double v43 = v65;
    }
    else
    {
      double v43 = *((double *)&v125 + 1);
      uint64_t v122 = v125;
    }
    unsigned int v28 = v118;
  }
  double v66 = v36;
  double v67 = v43;
  if (v28 == *(_DWORD *)(a1 + 44)) {
    goto LABEL_57;
  }
  if (v34)
  {
    if (v34 < 1) {
      goto LABEL_57;
    }
  }
  else
  {
    v40.n128_u64[0] = *((void *)&v126 + 1);
    if (*((double *)&v126 + 1) <= 0.0) {
      goto LABEL_57;
    }
  }
  if (v39)
  {
    if (v39 < 1) {
      goto LABEL_57;
    }
    goto LABEL_73;
  }
  v40.n128_u64[0] = *((void *)&v125 + 1);
  if (*((double *)&v125 + 1) > 0.0)
  {
LABEL_73:
    unsigned int v68 = (v28 + 1) % 0x15E;
    uint64_t v70 = v131.i64[1];
    uint64_t v69 = v131.i64[0];
    while (1)
    {
      *(void *)&long long v123 = (*(uint64_t (**)(void))(*(void *)(a1 + 48 * v68 + 48) + 16))();
      *((void *)&v123 + 1) = v71;
      uint64_t v74 = CNTimeSpan::operator-(v121, &v123, v72, v73);
      uint64_t v78 = v74;
      v124[0] = v74;
      *(double *)&v124[1] = v75;
      double v79 = v75;
      if (v74 < 0 || (*(double *)v76.i64 = v75, v75 < 0.0))
      {
        uint64_t v74 = CNTimeSpan::operator-((double *)v124, v76, v77);
        v76.i64[0] = v80;
      }
      if (v74 || (v76.i64[0] & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
      {
        if ((v58 || (*(void *)&v66 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000) && v74 != v58)
        {
          if (v74 < v58) {
            goto LABEL_93;
          }
        }
        else if (v66 > *(double *)v76.i64)
        {
          goto LABEL_93;
        }
        if ((v74 || (v76.i64[0] & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
          && (v122 || (*(void *)&v67 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
          && v74 != v122)
        {
          if (v74 >= v122) {
            goto LABEL_95;
          }
          goto LABEL_99;
        }
      }
      else if (v66 > *(double *)v76.i64)
      {
LABEL_93:
        *(int8x16_t *)&v128[8] = v133;
        int64x2_t v129 = v134;
        uint64_t v130 = v135;
        uint64_t v81 = a1 + 48 * v68;
        int64x2_t v82 = *(int64x2_t *)(v81 + 72);
        int8x16_t v133 = *(int8x16_t *)(v81 + 56);
        int64x2_t v134 = v82;
        uint64_t v135 = *(void *)(v81 + 88);
        uint64_t v70 = v133.i64[1];
        uint64_t v69 = v133.i64[0];
        int v83 = &v126;
        long long v125 = v126;
        uint64_t v122 = v58;
        double v67 = v66;
        uint64_t v58 = v74;
        double v66 = *(double *)v76.i64;
        goto LABEL_100;
      }
      if (v67 <= *(double *)v76.i64)
      {
LABEL_95:
        if (v78)
        {
          if ((v78 & 0x8000000000000000) == 0) {
            goto LABEL_104;
          }
        }
        else if (v79 >= 0.0)
        {
          goto LABEL_104;
        }
      }
LABEL_99:
      uint64_t v84 = a1 + 48 * v68;
      int64x2_t v85 = *(int64x2_t *)(v84 + 72);
      *(_OWORD *)&v128[8] = *(_OWORD *)(v84 + 56);
      int64x2_t v129 = v85;
      uint64_t v130 = *(void *)(v84 + 88);
      int v83 = &v125;
      uint64_t v122 = v74;
      double v67 = *(double *)v76.i64;
LABEL_100:
      *int v83 = *(_OWORD *)v124;
      if (v78)
      {
        if (v78 < 0) {
          goto LABEL_108;
        }
      }
      else if (v79 < 0.0)
      {
        goto LABEL_108;
      }
LABEL_104:
      if (v68 == 349) {
        unsigned int v68 = 0;
      }
      else {
        ++v68;
      }
      if (v68 == *(_DWORD *)(a1 + 44))
      {
LABEL_108:
        v131.i64[0] = v69;
        v131.i64[1] = v70;
        goto LABEL_149;
      }
    }
  }
LABEL_57:
  if (v28 == *(_DWORD *)(a1 + 40)) {
    goto LABEL_149;
  }
  if (v34)
  {
    if ((v34 & 0x8000000000000000) == 0) {
      goto LABEL_150;
    }
  }
  else
  {
    v40.n128_u64[0] = *((void *)&v126 + 1);
    if (*((double *)&v126 + 1) >= 0.0) {
      goto LABEL_149;
    }
  }
  if (v39)
  {
    if ((v39 & 0x8000000000000000) == 0) {
      goto LABEL_149;
    }
  }
  else
  {
    v40.n128_u64[0] = *((void *)&v125 + 1);
    if (*((double *)&v125 + 1) >= 0.0) {
      goto LABEL_149;
    }
  }
  uint64_t v86 = v58;
  if (v28) {
    unsigned int v87 = v28 - 1;
  }
  else {
    unsigned int v87 = 349;
  }
  uint64_t v88 = v131.i64[1];
  uint64_t v89 = v131.i64[0];
  do
  {
    *(void *)&long long v123 = (*(uint64_t (**)(__n128))(*(void *)(a1 + 48 * v87 + 48) + 16))(v40);
    *((void *)&v123 + 1) = v90;
    uint64_t v93 = CNTimeSpan::operator-(v121, &v123, v91, v92);
    uint64_t v96 = v93;
    v124[0] = v93;
    *(double *)&v124[1] = v94;
    double v97 = v94;
    if (v93 < 0 || (v40.n128_f64[0] = v94, v94 < 0.0))
    {
      uint64_t v93 = CNTimeSpan::operator-((double *)v124, (int8x16_t)v40, v95);
      v40.n128_u64[0] = v98;
    }
    if (v93 || (v40.n128_u64[0] & 0x7FFFFFFFFFFFFFFFLL) < 0x7FF0000000000000)
    {
      if ((v86 || (*(void *)&v66 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000) && v93 != v86)
      {
        if (v93 < v86) {
          goto LABEL_133;
        }
      }
      else if (v66 > v40.n128_f64[0])
      {
        goto LABEL_133;
      }
      if ((v93 || (v40.n128_u64[0] & 0x7FFFFFFFFFFFFFFFLL) < 0x7FF0000000000000)
        && (v122 || (*(void *)&v67 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
        && v93 != v122)
      {
        if (v93 >= v122) {
          goto LABEL_135;
        }
        goto LABEL_139;
      }
    }
    else if (v66 > v40.n128_f64[0])
    {
LABEL_133:
      *(int8x16_t *)&v128[8] = v133;
      int64x2_t v129 = v134;
      uint64_t v130 = v135;
      uint64_t v99 = a1 + 48 * v87;
      int64x2_t v100 = *(int64x2_t *)(v99 + 72);
      int8x16_t v133 = *(int8x16_t *)(v99 + 56);
      int64x2_t v134 = v100;
      uint64_t v135 = *(void *)(v99 + 88);
      uint64_t v88 = v133.i64[1];
      uint64_t v89 = v133.i64[0];
      double v101 = &v126;
      long long v125 = v126;
      uint64_t v122 = v86;
      double v67 = v66;
      uint64_t v86 = v93;
      double v66 = v40.n128_f64[0];
      goto LABEL_140;
    }
    if (v67 <= v40.n128_f64[0])
    {
LABEL_135:
      if (v96)
      {
        if (v96 < 1) {
          goto LABEL_144;
        }
      }
      else if (v97 <= 0.0)
      {
        goto LABEL_143;
      }
    }
LABEL_139:
    uint64_t v102 = a1 + 48 * v87;
    int64x2_t v103 = *(int64x2_t *)(v102 + 72);
    *(_OWORD *)&v128[8] = *(_OWORD *)(v102 + 56);
    int64x2_t v129 = v103;
    uint64_t v130 = *(void *)(v102 + 88);
    double v101 = &v125;
    uint64_t v122 = v93;
    double v67 = v40.n128_f64[0];
LABEL_140:
    __n128 v40 = *(__n128 *)v124;
    *double v101 = *(_OWORD *)v124;
    if (v96)
    {
      if (v96 > 0) {
        break;
      }
      goto LABEL_144;
    }
LABEL_143:
    if (v97 > 0.0) {
      break;
    }
LABEL_144:
    if (v87) {
      --v87;
    }
    else {
      unsigned int v87 = 349;
    }
  }
  while (v87 != *(_DWORD *)(a1 + 44));
  v131.i64[0] = v89;
  v131.i64[1] = v88;
  uint64_t v57 = v121;
LABEL_149:
  uint64_t v34 = v126;
LABEL_150:
  double v104 = *((double *)&v126 + 1);
  if (fabs(*((double *)&v126 + 1) + (double)v34) < 2.22044605e-16)
  {
    int8x16_t v105 = v133;
    int8x16_t v106 = (int8x16_t)v134;
    *(int8x16_t *)(v119 + 8) = v133;
    *(int8x16_t *)(v119 + 24) = v106;
    *(void *)(v119 + 40) = v135;
    if (v34 < 0 || v104 < 0.0) {
      uint64_t v34 = CNTimeSpan::operator-((double *)&v126, v105, v106);
    }
    else {
      double v107 = v104;
    }
    v124[0] = v34;
    *(double *)&v124[1] = v107;
    double v111 = (double *)(a1 + 16);
    double v112 = (double *)v124;
    goto LABEL_160;
  }
  if (!(*(unsigned int (**)(uint64_t, uint64_t, void **, unsigned char *))(*(void *)v119 + 24))(v119, v57, &v132, v128))
  {
    if (v34 < 0 || v104 < 0.0) {
      uint64_t v34 = CNTimeSpan::operator-((double *)&v126, v108, v109);
    }
    else {
      double v110 = v104;
    }
    v124[0] = v34;
    *(double *)&v124[1] = v110;
    double v113 = (double *)(a1 + 16);
    if (!sub_18DEE4C00((double *)v124, v113))
    {
      uint64_t v116 = v125;
      if ((v125 & 0x8000000000000000) != 0 || (v114.i64[0] = *((void *)&v125 + 1), *((double *)&v125 + 1) < 0.0)) {
        uint64_t v116 = CNTimeSpan::operator-((double *)&v125, v114, v115);
      }
      else {
        uint64_t v117 = *((void *)&v125 + 1);
      }
      *(void *)&long long v123 = v116;
      *((void *)&v123 + 1) = v117;
      double v112 = (double *)&v123;
      double v111 = v113;
LABEL_160:
      if (!sub_18DEE4C00(v112, v111)) {
        return 0;
      }
    }
  }
  return 0xFFFFFFFFLL;
}

void sub_18E02CCCC(_Unwind_Exception *a1)
{
  *(void *)(v3 - 192) = v2;
  *(void *)(v3 - 184) = v1;
  _Unwind_Resume(a1);
}

void sub_18E02CCD4(_Unwind_Exception *a1)
{
  *(void *)(v3 - 192) = v1;
  *(void *)(v3 - 184) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_18E02CCDC(uint64_t a1, double *a2, uint64_t a3, double a4, int8x16_t a5)
{
  int v5 = *(_DWORD *)(a1 + 8);
  if (!v5) {
    return 0xFFFFFFFFLL;
  }
  if (v5 == 1)
  {
    uint64_t v9 = a1 + 48 * *(unsigned int *)(a1 + 40);
    int8x16_t v133 = *(int8x16_t *)(v9 + 56);
    int8x16_t v134 = *(int8x16_t *)(v9 + 72);
    uint64_t v10 = *(void *)(v9 + 88);
    v132 = &unk_1EDD14658;
    uint64_t v135 = v10;
    *(int8x16_t *)v128 = v133;
    uint64_t v11 = CNTimeSpan::operator-((uint64_t)v128, a2, v133, a5);
    v131.i64[0] = v11;
    *(double *)&v131.i64[1] = v12;
    if (v11 < 0 || (*(double *)v13.i64 = v12, v12 < 0.0)) {
      uint64_t v11 = CNTimeSpan::operator-((double *)v131.i64, v13, v14);
    }
    v124[0] = v11;
    *(double *)&v124[1] = v12;
    if (!sub_18DEE4C00((double *)v124, (double *)(a1 + 16)))
    {
      uint64_t result = 0;
      int8x16_t v16 = v134;
      *(int8x16_t *)(a3 + 8) = v133;
      *(int8x16_t *)(a3 + 24) = v16;
      *(void *)(a3 + 40) = v135;
      return result;
    }
    return 0xFFFFFFFFLL;
  }
  uint64_t v17 = a1 + 48 + 48 * *(unsigned int *)(a1 + 40);
  v132 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v17 + 16))(v17);
  v133.i64[0] = v18;
  uint64_t v21 = CNTimeSpan::operator-((uint64_t)a2, &v132, v19, v20);
  int v23 = llround(*(double *)(a1 + 32) * (v22 + (double)v21));
  unsigned int v24 = v23 & ~(v23 >> 31);
  unsigned int v25 = *(_DWORD *)(a1 + 8);
  unsigned int v26 = v25 - 1;
  if (v24 < v25 - 1) {
    unsigned int v26 = v24;
  }
  int v27 = *(_DWORD *)(a1 + 40);
  unsigned int v28 = (v26 + v27) % 0x15E;
  uint64_t v29 = a1 + 48 + 48 * v28;
  int8x16_t v133 = *(int8x16_t *)(v29 + 8);
  int8x16_t v134 = *(int8x16_t *)(v29 + 24);
  uint64_t v30 = *(void *)(v29 + 40);
  v132 = &unk_1EDD14658;
  uint64_t v135 = v30;
  *(void *)&v128[8] = 0;
  *(void *)&v128[16] = 0;
  *(void *)v128 = &unk_1EDD14658;
  uint64_t v119 = a3;
  if (v28 == v27)
  {
    unsigned int v31 = (v27 + 1) % v25;
    goto LABEL_20;
  }
  if (v28 == *(_DWORD *)(a1 + 44))
  {
    if (v28) {
      unsigned int v25 = v28;
    }
LABEL_19:
    unsigned int v31 = v25 - 1;
    goto LABEL_20;
  }
  *(int8x16_t *)double v124 = v133;
  if (sub_18DEE4C00((double *)v124, a2) || v28 == *(_DWORD *)(a1 + 44))
  {
    unsigned int v25 = v28;
    if (!v28) {
      unsigned int v25 = *(_DWORD *)(a1 + 8);
    }
    goto LABEL_19;
  }
  unsigned int v31 = (v28 + 1) % *(_DWORD *)(a1 + 8);
LABEL_20:
  unsigned int v118 = v31;
  uint64_t v32 = a1 + 48 * v31;
  int8x16_t v33 = *(int8x16_t *)(v32 + 72);
  *(_OWORD *)&v128[8] = *(_OWORD *)(v32 + 56);
  int8x16_t v129 = v33;
  uint64_t v130 = *(void *)(v32 + 88);
  int8x16_t v131 = v133;
  long long v127 = *(_OWORD *)&v128[8];
  uint64_t v34 = CNTimeSpan::operator-((uint64_t)a2, &v131, *(int8x16_t *)&v128[8], v33);
  double v36 = v35;
  *(void *)&long long v126 = v34;
  *((double *)&v126 + 1) = v35;
  uint64_t v39 = CNTimeSpan::operator-((uint64_t)a2, &v127, v37, v38);
  double v43 = v42;
  *(void *)&long long v125 = v39;
  *((double *)&v125 + 1) = v42;
  double v44 = v36;
  double v45 = v42;
  BOOL v47 = v36 < 0.0 || v34 < 0;
  uint64_t v120 = v34;
  if (v47)
  {
    uint64_t v120 = CNTimeSpan::operator-((double *)&v126, (int8x16_t)v40, v41);
    double v36 = v48;
  }
  uint64_t v121 = (uint64_t)a2;
  BOOL v50 = v45 < 0.0 || v39 < 0;
  uint64_t v122 = v39;
  if (v50)
  {
    uint64_t v122 = CNTimeSpan::operator-((double *)&v125, (int8x16_t)v40, v41);
    double v43 = v51;
  }
  uint64_t v52 = v34;
  if (v47)
  {
    uint64_t v52 = CNTimeSpan::operator-((double *)&v126, (int8x16_t)v40, v41);
    double v44 = v53;
  }
  uint64_t v54 = v39;
  if (v50)
  {
    uint64_t v54 = CNTimeSpan::operator-((double *)&v125, (int8x16_t)v40, v41);
    double v45 = v55;
  }
  if (!v52 && (*(void *)&v44 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000
    || !v54 && (*(void *)&v45 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000
    || (BOOL v56 = v52 <= v54, v52 == v54))
  {
    BOOL v56 = v44 <= v45;
  }
  uint64_t v58 = v120;
  uint64_t v57 = v121;
  if (!v56)
  {
    int8x16_t v60 = v134;
    *(int8x16_t *)&v124[1] = v133;
    int8x16_t v59 = v133;
    *(int8x16_t *)&v124[3] = v134;
    v124[5] = v135;
    uint64_t v61 = v135;
    int8x16_t v62 = *(int8x16_t *)(v32 + 72);
    int8x16_t v133 = *(int8x16_t *)(v32 + 56);
    int8x16_t v134 = v62;
    uint64_t v135 = *(void *)(v32 + 88);
    uint64_t v130 = v61;
    *(int8x16_t *)&v128[8] = v59;
    int8x16_t v129 = v60;
    int8x16_t v131 = v133;
    int8x16_t v63 = (int8x16_t)v125;
    __n128 v40 = (__n128)v126;
    long long v123 = v126;
    long long v126 = v125;
    long long v127 = *(_OWORD *)&v128[8];
    long long v125 = v123;
    uint64_t v34 = v126;
    if ((v126 & 0x8000000000000000) != 0 || (v40.n128_u64[0] = *((void *)&v126 + 1), *((double *)&v126 + 1) < 0.0))
    {
      uint64_t v58 = CNTimeSpan::operator-((double *)&v126, (int8x16_t)v40, v63);
      double v36 = v64;
    }
    else
    {
      double v36 = *((double *)&v126 + 1);
      uint64_t v58 = v126;
    }
    uint64_t v39 = v125;
    if ((v125 & 0x8000000000000000) != 0 || (v40.n128_u64[0] = *((void *)&v125 + 1), *((double *)&v125 + 1) < 0.0))
    {
      uint64_t v122 = CNTimeSpan::operator-((double *)&v125, (int8x16_t)v40, v63);
      double v43 = v65;
    }
    else
    {
      double v43 = *((double *)&v125 + 1);
      uint64_t v122 = v125;
    }
    unsigned int v28 = v118;
  }
  double v66 = v36;
  double v67 = v43;
  if (v28 == *(_DWORD *)(a1 + 44)) {
    goto LABEL_57;
  }
  if (v34)
  {
    if (v34 < 1) {
      goto LABEL_57;
    }
  }
  else
  {
    v40.n128_u64[0] = *((void *)&v126 + 1);
    if (*((double *)&v126 + 1) <= 0.0) {
      goto LABEL_57;
    }
  }
  if (v39)
  {
    if (v39 < 1) {
      goto LABEL_57;
    }
    goto LABEL_73;
  }
  v40.n128_u64[0] = *((void *)&v125 + 1);
  if (*((double *)&v125 + 1) > 0.0)
  {
LABEL_73:
    unsigned int v68 = (v28 + 1) % 0x15E;
    uint64_t v70 = v131.i64[1];
    uint64_t v69 = v131.i64[0];
    while (1)
    {
      *(void *)&long long v123 = (*(uint64_t (**)(void))(*(void *)(a1 + 48 * v68 + 48) + 16))();
      *((void *)&v123 + 1) = v71;
      uint64_t v74 = CNTimeSpan::operator-(v121, &v123, v72, v73);
      uint64_t v78 = v74;
      v124[0] = v74;
      *(double *)&v124[1] = v75;
      double v79 = v75;
      if (v74 < 0 || (*(double *)v76.i64 = v75, v75 < 0.0))
      {
        uint64_t v74 = CNTimeSpan::operator-((double *)v124, v76, v77);
        v76.i64[0] = v80;
      }
      if (v74 || (v76.i64[0] & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
      {
        if ((v58 || (*(void *)&v66 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000) && v74 != v58)
        {
          if (v74 < v58) {
            goto LABEL_93;
          }
        }
        else if (v66 > *(double *)v76.i64)
        {
          goto LABEL_93;
        }
        if ((v74 || (v76.i64[0] & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
          && (v122 || (*(void *)&v67 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
          && v74 != v122)
        {
          if (v74 >= v122) {
            goto LABEL_95;
          }
          goto LABEL_99;
        }
      }
      else if (v66 > *(double *)v76.i64)
      {
LABEL_93:
        *(int8x16_t *)&v128[8] = v133;
        int8x16_t v129 = v134;
        uint64_t v130 = v135;
        uint64_t v81 = a1 + 48 * v68;
        int8x16_t v82 = *(int8x16_t *)(v81 + 72);
        int8x16_t v133 = *(int8x16_t *)(v81 + 56);
        int8x16_t v134 = v82;
        uint64_t v135 = *(void *)(v81 + 88);
        uint64_t v70 = v133.i64[1];
        uint64_t v69 = v133.i64[0];
        int v83 = &v126;
        long long v125 = v126;
        uint64_t v122 = v58;
        double v67 = v66;
        uint64_t v58 = v74;
        double v66 = *(double *)v76.i64;
        goto LABEL_100;
      }
      if (v67 <= *(double *)v76.i64)
      {
LABEL_95:
        if (v78)
        {
          if ((v78 & 0x8000000000000000) == 0) {
            goto LABEL_104;
          }
        }
        else if (v79 >= 0.0)
        {
          goto LABEL_104;
        }
      }
LABEL_99:
      uint64_t v84 = a1 + 48 * v68;
      int8x16_t v85 = *(int8x16_t *)(v84 + 72);
      *(_OWORD *)&v128[8] = *(_OWORD *)(v84 + 56);
      int8x16_t v129 = v85;
      uint64_t v130 = *(void *)(v84 + 88);
      int v83 = &v125;
      uint64_t v122 = v74;
      double v67 = *(double *)v76.i64;
LABEL_100:
      *int v83 = *(_OWORD *)v124;
      if (v78)
      {
        if (v78 < 0) {
          goto LABEL_108;
        }
      }
      else if (v79 < 0.0)
      {
        goto LABEL_108;
      }
LABEL_104:
      if (v68 == 349) {
        unsigned int v68 = 0;
      }
      else {
        ++v68;
      }
      if (v68 == *(_DWORD *)(a1 + 44))
      {
LABEL_108:
        v131.i64[0] = v69;
        v131.i64[1] = v70;
        goto LABEL_149;
      }
    }
  }
LABEL_57:
  if (v28 == *(_DWORD *)(a1 + 40)) {
    goto LABEL_149;
  }
  if (v34)
  {
    if ((v34 & 0x8000000000000000) == 0) {
      goto LABEL_150;
    }
  }
  else
  {
    v40.n128_u64[0] = *((void *)&v126 + 1);
    if (*((double *)&v126 + 1) >= 0.0) {
      goto LABEL_149;
    }
  }
  if (v39)
  {
    if ((v39 & 0x8000000000000000) == 0) {
      goto LABEL_149;
    }
  }
  else
  {
    v40.n128_u64[0] = *((void *)&v125 + 1);
    if (*((double *)&v125 + 1) >= 0.0) {
      goto LABEL_149;
    }
  }
  uint64_t v86 = v58;
  if (v28) {
    unsigned int v87 = v28 - 1;
  }
  else {
    unsigned int v87 = 349;
  }
  uint64_t v88 = v131.i64[1];
  uint64_t v89 = v131.i64[0];
  do
  {
    *(void *)&long long v123 = (*(uint64_t (**)(__n128))(*(void *)(a1 + 48 * v87 + 48) + 16))(v40);
    *((void *)&v123 + 1) = v90;
    uint64_t v93 = CNTimeSpan::operator-(v121, &v123, v91, v92);
    uint64_t v96 = v93;
    v124[0] = v93;
    *(double *)&v124[1] = v94;
    double v97 = v94;
    if (v93 < 0 || (v40.n128_f64[0] = v94, v94 < 0.0))
    {
      uint64_t v93 = CNTimeSpan::operator-((double *)v124, (int8x16_t)v40, v95);
      v40.n128_u64[0] = v98;
    }
    if (v93 || (v40.n128_u64[0] & 0x7FFFFFFFFFFFFFFFLL) < 0x7FF0000000000000)
    {
      if ((v86 || (*(void *)&v66 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000) && v93 != v86)
      {
        if (v93 < v86) {
          goto LABEL_133;
        }
      }
      else if (v66 > v40.n128_f64[0])
      {
        goto LABEL_133;
      }
      if ((v93 || (v40.n128_u64[0] & 0x7FFFFFFFFFFFFFFFLL) < 0x7FF0000000000000)
        && (v122 || (*(void *)&v67 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
        && v93 != v122)
      {
        if (v93 >= v122) {
          goto LABEL_135;
        }
        goto LABEL_139;
      }
    }
    else if (v66 > v40.n128_f64[0])
    {
LABEL_133:
      *(int8x16_t *)&v128[8] = v133;
      int8x16_t v129 = v134;
      uint64_t v130 = v135;
      uint64_t v99 = a1 + 48 * v87;
      int8x16_t v100 = *(int8x16_t *)(v99 + 72);
      int8x16_t v133 = *(int8x16_t *)(v99 + 56);
      int8x16_t v134 = v100;
      uint64_t v135 = *(void *)(v99 + 88);
      uint64_t v88 = v133.i64[1];
      uint64_t v89 = v133.i64[0];
      double v101 = &v126;
      long long v125 = v126;
      uint64_t v122 = v86;
      double v67 = v66;
      uint64_t v86 = v93;
      double v66 = v40.n128_f64[0];
      goto LABEL_140;
    }
    if (v67 <= v40.n128_f64[0])
    {
LABEL_135:
      if (v96)
      {
        if (v96 < 1) {
          goto LABEL_144;
        }
      }
      else if (v97 <= 0.0)
      {
        goto LABEL_143;
      }
    }
LABEL_139:
    uint64_t v102 = a1 + 48 * v87;
    int8x16_t v103 = *(int8x16_t *)(v102 + 72);
    *(_OWORD *)&v128[8] = *(_OWORD *)(v102 + 56);
    int8x16_t v129 = v103;
    uint64_t v130 = *(void *)(v102 + 88);
    double v101 = &v125;
    uint64_t v122 = v93;
    double v67 = v40.n128_f64[0];
LABEL_140:
    __n128 v40 = *(__n128 *)v124;
    *double v101 = *(_OWORD *)v124;
    if (v96)
    {
      if (v96 > 0) {
        break;
      }
      goto LABEL_144;
    }
LABEL_143:
    if (v97 > 0.0) {
      break;
    }
LABEL_144:
    if (v87) {
      --v87;
    }
    else {
      unsigned int v87 = 349;
    }
  }
  while (v87 != *(_DWORD *)(a1 + 44));
  v131.i64[0] = v89;
  v131.i64[1] = v88;
  uint64_t v57 = v121;
LABEL_149:
  uint64_t v34 = v126;
LABEL_150:
  double v104 = *((double *)&v126 + 1);
  if (fabs(*((double *)&v126 + 1) + (double)v34) < 2.22044605e-16)
  {
    int8x16_t v105 = v133;
    int8x16_t v106 = v134;
    *(int8x16_t *)(v119 + 8) = v133;
    *(int8x16_t *)(v119 + 24) = v106;
    *(void *)(v119 + 40) = v135;
    if (v34 < 0 || v104 < 0.0) {
      uint64_t v34 = CNTimeSpan::operator-((double *)&v126, v105, v106);
    }
    else {
      double v107 = v104;
    }
    v124[0] = v34;
    *(double *)&v124[1] = v107;
    double v111 = (double *)(a1 + 16);
    double v112 = (double *)v124;
    goto LABEL_160;
  }
  if (!(*(unsigned int (**)(uint64_t, uint64_t, void **, unsigned char *))(*(void *)v119 + 24))(v119, v57, &v132, v128))
  {
    if (v34 < 0 || v104 < 0.0) {
      uint64_t v34 = CNTimeSpan::operator-((double *)&v126, v108, v109);
    }
    else {
      double v110 = v104;
    }
    v124[0] = v34;
    *(double *)&v124[1] = v110;
    double v113 = (double *)(a1 + 16);
    if (!sub_18DEE4C00((double *)v124, v113))
    {
      uint64_t v116 = v125;
      if ((v125 & 0x8000000000000000) != 0 || (v114.i64[0] = *((void *)&v125 + 1), *((double *)&v125 + 1) < 0.0)) {
        uint64_t v116 = CNTimeSpan::operator-((double *)&v125, v114, v115);
      }
      else {
        uint64_t v117 = *((void *)&v125 + 1);
      }
      *(void *)&long long v123 = v116;
      *((void *)&v123 + 1) = v117;
      double v112 = (double *)&v123;
      double v111 = v113;
LABEL_160:
      if (!sub_18DEE4C00(v112, v111)) {
        return 0;
      }
    }
  }
  return 0xFFFFFFFFLL;
}

void sub_18E02D6EC(_Unwind_Exception *a1)
{
  *(void *)(v3 - 192) = v2;
  *(void *)(v3 - 184) = v1;
  _Unwind_Resume(a1);
}

void sub_18E02D6F4(_Unwind_Exception *a1)
{
  *(void *)(v3 - 192) = v1;
  *(void *)(v3 - 184) = v2;
  _Unwind_Resume(a1);
}

void sub_18E02D6FC(uint64_t a1)
{
}

void sub_18E02D73C(int64x2_t *a1)
{
  a1->i64[0] = 0;
  a1->i64[1] = 0;
  int64x2_t v1 = vdupq_n_s64(0x7FF8000000000000uLL);
  a1[1] = v1;
  a1[2] = v1;
  a1[3] = v1;
  a1[4] = v1;
  a1[5] = v1;
  a1[6] = v1;
  a1[7] = v1;
  a1[8] = v1;
  a1[9] = v1;
  a1[10] = v1;
  a1[11] = v1;
  a1[12] = v1;
  a1[13] = v1;
  a1[14] = v1;
  sub_18E06E85C((uint64_t)a1[15].i64);
}

uint64_t sub_18E02D794@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4 = *(_DWORD *)(a1 + 8);
  int v3 = *(_DWORD *)(a1 + 12);
  *(void *)(a2 + 24) = 0x400000003;
  *(void *)a2 = &unk_1EDD18F48;
  *(_DWORD *)(a2 + 8) = v3;
  *(_DWORD *)(a2 + 12) = v4;
  *(_DWORD *)(a2 + 16) = v4 * v3;
  *(_DWORD *)(a2 + 20) = v3;
  *(void *)(a2 + 32) = a2 + 40;
  return sub_18DFE2C64(a1, a2);
}

void sub_18E02D7FC(_Unwind_Exception *a1)
{
  *int64x2_t v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

void sub_18E02D81C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 24) = 0x300000003;
  *(void *)a3 = &unk_1EDD18EE8;
  *(_OWORD *)(a3 + 8) = xmmword_18E1F0010;
  *(void *)(a3 + 32) = a3 + 40;
  sub_18DFE2B44(a1, a2, a3);
}

void sub_18E02D87C(_Unwind_Exception *a1)
{
  *int64x2_t v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

void sub_18E02D89C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 24) = 0x400000003;
  *(void *)a3 = &unk_1EDD18F48;
  *(_OWORD *)(a3 + 8) = xmmword_18E1F6FA0;
  *(void *)(a3 + 32) = a3 + 40;
  sub_18DFE2B44(a1, a2, a3);
}

void sub_18E02D900(_Unwind_Exception *a1)
{
  *int64x2_t v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

uint64_t sub_18E02D920(uint64_t a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a2 + 8);
  int v2 = *(_DWORD *)(a2 + 12);
  *(void *)(a1 + 24) = 0x300000004;
  *(void *)a1 = &unk_1EDD19578;
  *(_DWORD *)(a1 + 8) = v2;
  *(_DWORD *)(a1 + 12) = v3;
  *(_DWORD *)(a1 + 16) = v3 * v2;
  *(_DWORD *)(a1 + 20) = v2;
  *(void *)(a1 + 32) = a1 + 40;
  return sub_18DFE2C64(a2, a1);
}

void sub_18E02D98C(_Unwind_Exception *a1)
{
  *int64x2_t v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

uint64_t sub_18E02D9AC(uint64_t a1)
{
  *(void *)(a1 + 24) = 0x400000003;
  *(void *)a1 = &unk_1EDD18F48;
  *(void *)(a1 + 32) = a1 + 40;
  *(_OWORD *)(a1 + 8) = xmmword_18E1F6FA0;
  return sub_18DFE2CC8(a1, 0.0);
}

void sub_18E02D9F0()
{
  uint64_t v3 = 0x10000001ALL;
  int64x2_t v1 = &unk_1EDD186A8;
  long long v2 = xmmword_18E1FD600;
  int v4 = &v5;
  sub_18E06E85C((uint64_t)v0);
}

void sub_18E02DA90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_18E06B5D4(v2);
  sub_18E06B5D4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_18E02DAB4(uint64_t a1, uint64_t a2)
{
}

void sub_18E02DAF0(_Unwind_Exception *a1)
{
  sub_18E06B5D4(v1);
  _Unwind_Resume(a1);
}

void sub_18E02DB04(uint64_t a1)
{
}

void sub_18E02DBD0(_Unwind_Exception *a1)
{
  sub_18E06B5D4(v1);
  _Unwind_Resume(a1);
}

void sub_18E02DBE4(uint64_t a1)
{
}

void sub_18E02DC28(_Unwind_Exception *a1)
{
  sub_18E06B5D4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_18E02DC40(uint64_t a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a1 + 296);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v5 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v5;
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v8 = *(_OWORD *)(a2 + 48);
  long long v7 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v8;
  *(_OWORD *)(a1 + 64) = v7;
  long long v9 = *(_OWORD *)(a2 + 160);
  long long v11 = *(_OWORD *)(a2 + 112);
  long long v10 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 112) = v11;
  *(_OWORD *)(a1 + 128) = v10;
  long long v12 = *(_OWORD *)(a2 + 224);
  long long v14 = *(_OWORD *)(a2 + 176);
  long long v13 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 224) = v12;
  *(_OWORD *)(a1 + 176) = v14;
  *(_OWORD *)(a1 + 192) = v13;
  uint64_t v15 = a1 + 240;
  uint64_t v16 = a2 + 240;
  if (!v4) {
    sub_18E06E6BC(v15, v16);
  }
  sub_18DFE2F24(v15, v16);
  *(unsigned char *)(a1 + 288) = *(unsigned char *)(a2 + 288);
  return a1;
}

std::string *raven::RavenPNTEstimator::SetLogPrefix(uint64_t a1, const std::string *a2)
{
  std::string::operator=((std::string *)(a1 + 2512), a2);

  return std::string::operator=((std::string *)(a1 + 16328), a2);
}

BOOL raven::RavenPNTEstimator::GetEstimatorPredictAndUpdateArguments(uint64_t a1, uint64_t a2, int8x16_t *a3, uint64_t a4, double a5, int8x16_t a6)
{
  int8x16_t v10 = *a3;
  *(int8x16_t *)a4 = *a3;
  long long v11 = (cnprint::CNPrinter *)CNTimeSpan::operator-((uint64_t)a3, (void *)a2, v10, a6);
  *(double *)v14.i64 = v13;
  double v15 = v13 + (double)(uint64_t)v11;
  *(double *)(a4 + 16) = v15;
  if (v15 >= 0.0)
  {
    *(double *)v12.i64 = (double)(uint64_t)v11;
    BOOL v16 = raven::RavenPNTEstimator::UseHighAccelerationParameters((raven::RavenPNTEstimator *)a1, v14, v12);
    uint64_t v18 = *(void *)(a1 + 1168);
    *(void *)(a4 + 56) = *(void *)(v18 + 712);
    if (v16)
    {
      *(void *)(a4 + 64) = *(void *)(v18 + 752);
      *(void *)(a4 + 72) = *(void *)(v18 + 704);
      *(void *)(a4 + 80) = *(void *)(v18 + 728);
      int8x16_t v19 = (void *)(v18 + 776);
      int8x16_t v20 = (uint64_t *)(v18 + 680);
      uint64_t v21 = (void *)(v18 + 696);
    }
    else
    {
      *(void *)(a4 + 64) = *(void *)(v18 + 760);
      *(void *)(a4 + 72) = *(void *)(v18 + 704);
      *(void *)(a4 + 80) = *(void *)(v18 + 736);
      int8x16_t v19 = (void *)(v18 + 784);
      int8x16_t v20 = (uint64_t *)(v18 + 672);
      uint64_t v21 = (void *)(v18 + 688);
    }
    *(void *)(a4 + 88) = *v19;
    uint64_t v29 = *(void *)(v18 + 664);
    v17.i64[0] = *v20;
    *(void *)(a4 + 96) = *v20;
    *(void *)(a4 + 104) = v29;
    *(void *)(a4 + 112) = *v21;
    *(void *)(a4 + 120) = *(void *)(v18 + 656);
    *(void *)(a4 + 128) = *(void *)(v18 + 648);
    *(_OWORD *)(a4 + 24) = *(_OWORD *)(v18 + 792);
    int8x16_t v30 = *(int8x16_t *)(v18 + 808);
    *(int8x16_t *)(a4 + 40) = v30;
    double v31 = *(double *)(v18 + 344);
    double ComfortableAcceleration = raven::RavenPNTEstimator::GetComfortableAcceleration((raven::RavenPNTEstimator *)a1, v30, v17);
    double v33 = *(double *)(*(void *)(a1 + 1168) + 872);
    double v34 = ComfortableAcceleration * v33;
    *(double *)v35.i64 = fabs(*(double *)(*(void *)(a1 + 14648) + 192));
    v36.i64[0] = v35.i64[0];
    double v37 = fmax(*(double *)v35.i64, 0.000000015);
    *(double *)v38.i64 = raven::RavenPNTEstimator::GetMaximumComfortableTurningRate((raven::RavenPNTEstimator *)a1, v36, v35);
    *(double *)v39.i64 = ComfortableAcceleration / v37;
    if (ComfortableAcceleration / v37 < *(double *)v38.i64) {
      *(double *)v38.i64 = ComfortableAcceleration / v37;
    }
    uint64_t v40 = *(void *)(a1 + 1168);
    double v41 = *(double *)(v40 + 872);
    double v42 = *(double *)v38.i64 * v41;
    if (*(unsigned char *)(a1 + 1208))
    {
      long long v43 = *(_OWORD *)(a1 + 1368);
      long long v76 = *(_OWORD *)(a1 + 1352);
      long long v77 = v43;
      long long v78 = *(_OWORD *)(a1 + 1384);
      long long v44 = *(_OWORD *)(a1 + 1304);
      long long v72 = *(_OWORD *)(a1 + 1288);
      long long v73 = v44;
      long long v45 = *(_OWORD *)(a1 + 1336);
      long long v74 = *(_OWORD *)(a1 + 1320);
      long long v75 = v45;
      long long v46 = *(_OWORD *)(a1 + 1240);
      long long v68 = *(_OWORD *)(a1 + 1224);
      long long v69 = v46;
      int8x16_t v38 = *(int8x16_t *)(a1 + 1256);
      int8x16_t v39 = *(int8x16_t *)(a1 + 1272);
      int8x16_t v70 = v38;
      double v67 = &unk_1EDD140B8;
      uint64_t v79 = *(void *)(a1 + 1400);
      int8x16_t v71 = v39;
      if (v74 == 5)
      {
        double v47 = fmax(v37, 0.1) / 5.0 * v41;
        *(double *)v39.i64 = v47;
        if (v47 >= v42) {
          double v47 = v42;
        }
        double v42 = v47;
        v38.i64[0] = *(void *)(v40 + 3272);
        if (v37 <= *(double *)v38.i64)
        {
          *(double *)v38.i64 = raven::RavenPNTEstimator::GetTurnStateBasedDeltaHeadingRateConstraint((raven::RavenPNTEstimator *)a1, v38, v39);
          uint64_t v40 = *(void *)(a1 + 1168);
          double v41 = *(double *)(v40 + 872);
          *(double *)v38.i64 = *(double *)v38.i64 * v41;
          if (v42 >= *(double *)v38.i64) {
            double v42 = *(double *)v38.i64;
          }
        }
      }
    }
    double v48 = v31 * v31;
    double v49 = *(void **)(a1 + 80);
    uint64_t v50 = *(void *)(a1 + 88);
    double v67 = v49;
    *(void *)&long long v68 = v50;
    uint64_t v51 = CNTimeSpan::operator-((uint64_t)&v67, (void *)(a1 + 2544), v38, v39);
    if (v51 != 30)
    {
      if (v51)
      {
        v53.i64[0] = 10.0;
        if (v51 < 30) {
          goto LABEL_33;
        }
        goto LABEL_26;
      }
      if ((*(void *)&v52 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
      {
        v53.i64[0] = 10.0;
        goto LABEL_33;
      }
    }
    v53.i64[0] = 10.0;
    if (v52 <= 0.0) {
      goto LABEL_33;
    }
LABEL_26:
    v66[0] = v49;
    v66[1] = v50;
    int8x16_t v65 = *(int8x16_t *)(a1 + 112);
    uint64_t v54 = CNTimeSpan::operator-((uint64_t)v66, &v65, v65, v53);
    if (v54 == 30 || !v54 && (*(void *)&v55 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000) {
      BOOL v56 = v55 <= 0.0;
    }
    else {
      BOOL v56 = v54 < 30;
    }
    v53.i64[0] = 10.0;
    if (!v56) {
      *(double *)v53.i64 = 1.0;
    }
LABEL_33:
    double v57 = v34 * v34 / v33;
    double v58 = *(double *)v53.i64 * (*(double *)(v40 + 352) * *(double *)(v40 + 352));
    *(double *)(a4 + 136) = v48;
    double v59 = 1.0;
    if (!*(unsigned char *)(a1 + 1408) || (unsigned int v60 = *(unsigned __int8 *)(a1 + 1520), v60 < 7))
    {
      double v61 = 1.0;
LABEL_36:
      *(double *)(a4 + 144) = v57 * v59;
      *(double *)(a4 + 152) = v42 * v42 / v41 * v61;
      *(double *)(a4 + 160) = v57;
      *(double *)(a4 + 168) = v58;
      *(double *)(a4 + 176) = v57 + v57 * 2.0;
      return v15 >= 0.0;
    }
    if (v60 == 8)
    {
      int8x16_t v63 = (double *)(v40 + 504);
      double v64 = (double *)(v40 + 512);
    }
    else
    {
      double v61 = 1.0;
      if (v60 == 9) {
        goto LABEL_36;
      }
      int8x16_t v63 = (double *)(v40 + 520);
      double v64 = (double *)(v40 + 528);
    }
    double v59 = *v63;
    double v61 = *v64;
    goto LABEL_36;
  }
  if (!cnprint::CNPrinter::GetLogLevel(v11))
  {
    LOWORD(v67) = 12;
    LOBYTE(v66[0]) = 0;
    char v22 = cnprint::CNLogFormatter::FormatGeneral(a1 + 2488, (uint64_t)a3, "Prediction time is negative,dt,%.2lf,current_estimator_time,%.1lf", *(double *)(a4 + 16), *(double *)(a2 + 8) + (double)*(uint64_t *)a2);
    if (*(char *)(a1 + 2511) >= 0) {
      LOBYTE(v28) = v22;
    }
    else {
      uint64_t v28 = *(void *)(a1 + 2488);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v67, (unsigned __int8 *)v66, "%s", v23, v24, v25, v26, v27, v28);
  }
  return v15 >= 0.0;
}

double raven::RavenPNTEstimator::GetComfortableAcceleration(raven::RavenPNTEstimator *this, int8x16_t a2, int8x16_t a3)
{
  uint64_t v4 = *((void *)this + 146);
  if (v4 && *(unsigned char *)(v4 + 33))
  {
    if (raven::RavenPNTEstimator::UseHighAccelerationParameters(this, a2, a3))
    {
      return *(double *)(v4 + 312);
    }
    else if (*((unsigned char *)this + 2536) == 1)
    {
      return *(double *)(v4 + 320);
    }
    else
    {
      return *(double *)(v4 + 304);
    }
  }
  else
  {
    __int16 v14 = 12;
    unsigned __int8 v13 = 2;
    unsigned __int8 v6 = cnprint::CNLogFormatter::FormatWarning((raven::RavenPNTEstimator *)((char *)this + 2488), "GetComfortableAcceleration() called before parameters were initialized");
    if (*((char *)this + 2511) >= 0) {
      LOBYTE(v12) = v6;
    }
    else {
      uint64_t v12 = *((void *)this + 311);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v14, &v13, "%s", v7, v8, v9, v10, v11, v12);
    return 0.0;
  }
}

double raven::RavenPNTEstimator::GetMaximumComfortableTurningRate(raven::RavenPNTEstimator *this, int8x16_t a2, int8x16_t a3)
{
  uint64_t v4 = *((void *)this + 146);
  if (v4 && *(unsigned char *)(v4 + 33))
  {
    BOOL v5 = raven::RavenPNTEstimator::UseHighAccelerationParameters(this, a2, a3);
    uint64_t v6 = 328;
    if (v5) {
      uint64_t v6 = 336;
    }
    return *(double *)(v4 + v6) * 0.0174532925;
  }
  else
  {
    __int16 v16 = 12;
    unsigned __int8 v15 = 2;
    unsigned __int8 v8 = cnprint::CNLogFormatter::FormatWarning((raven::RavenPNTEstimator *)((char *)this + 2488), "GetMaximumComfortableTurningRate() called before parameters were initialized");
    if (*((char *)this + 2511) >= 0) {
      LOBYTE(v14) = v8;
    }
    else {
      uint64_t v14 = *((void *)this + 311);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v16, &v15, "%s", v9, v10, v11, v12, v13, v14);
    return 0.0;
  }
}

double raven::RavenPNTEstimator::GetTurnStateBasedDeltaHeadingRateConstraint(raven::RavenPNTEstimator *this, int8x16_t a2, int8x16_t a3)
{
  uint64_t v4 = (double *)*((void *)this + 146);
  double v5 = v4[408];
  if (!*((unsigned char *)this + 2064))
  {
    uint64_t LogLevel = cnprint::CNPrinter::GetLogLevel(this);
    if (LogLevel > 1) {
      goto LABEL_27;
    }
    __int16 v35 = 12;
    unsigned __int8 v34 = 1;
    int8x16_t v36 = *((int8x16_t *)this + 5);
    char v21 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)&v36, "GetTurnStateBasedDeltaHeadingRateConstraint,last_turn_state_event,unavailable,assuming high turn rate,turning_rate_dps,%.2lf", v5);
    if (*((char *)this + 2511) >= 0) {
      LOBYTE(v20) = v21;
    }
    else {
      uint64_t v20 = *((void *)this + 311);
    }
    goto LABEL_15;
  }
  uint64_t LogLevel = CNTimeSpan::operator-((uint64_t)this + 2080, (void *)this + 10, a2, a3);
  v36.i64[0] = LogLevel;
  *(double *)&v36.i64[1] = v7;
  if (LogLevel < 0 || (*(double *)v8.i64 = v7, v7 < 0.0))
  {
    uint64_t LogLevel = CNTimeSpan::operator-((double *)v36.i64, v8, v9);
    v8.i64[0] = v10;
  }
  if (*(double *)v8.i64 + (double)LogLevel > 1.0)
  {
    uint64_t LogLevel = cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)LogLevel);
    if (LogLevel > 1) {
      goto LABEL_27;
    }
    __int16 v35 = 12;
    unsigned __int8 v34 = 1;
    int8x16_t v12 = *((int8x16_t *)this + 5);
    int8x16_t v36 = v12;
    if (!*((unsigned char *)this + 2064)) {
      __assert_rtn("operator->", "optional.hpp", 1221, "this->is_initialized()");
    }
    uint64_t v13 = CNTimeSpan::operator-((uint64_t)this + 80, (void *)this + 260, v12, v11);
    cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)&v36, "GetTurnStateBasedDeltaHeadingRateConstraint,last_turn_state_event,too stale,age,%.2lf,assuming high turn rate,turning_rate_dps,%.2lf", v14 + (double)v13, v5);
    if (*((char *)this + 2511) >= 0) {
      LOBYTE(v20) = (_BYTE)this - 72;
    }
    else {
      uint64_t v20 = *((void *)this + 311);
    }
LABEL_15:
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v35, &v34, "%s", v15, v16, v17, v18, v19, v20);
    goto LABEL_27;
  }
  int v22 = *((unsigned __int8 *)this + 2176);
  if (v22 == 2)
  {
    double v24 = *((double *)this + 275);
    if (v24 <= 0.9 && v24 > 0.5) {
      double v5 = v4[407];
    }
  }
  else if (v22 == 1)
  {
    double v23 = *((double *)this + 274);
    if (v23 <= 0.9)
    {
      if (v23 > 0.5) {
        double v5 = v4[405];
      }
    }
    else
    {
      double v5 = v4[406];
    }
  }
LABEL_27:
  if (!cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)LogLevel))
  {
    __int16 v35 = 12;
    unsigned __int8 v34 = 0;
    int8x16_t v36 = *((int8x16_t *)this + 5);
    char v26 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)&v36, "GetTurnStateBasedDeltaHeadingRateConstraint,turning_rate_dps,%.2lf", v5);
    if (*((char *)this + 2511) >= 0) {
      LOBYTE(v32) = v26;
    }
    else {
      uint64_t v32 = *((void *)this + 311);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v35, &v34, "%s", v27, v28, v29, v30, v31, v32);
  }
  return v5 * 0.0174532925;
}

BOOL raven::RavenPNTEstimator::GetSimplifiedEightStateEstimatorPredictArgs(uint64_t a1, uint64_t a2, int8x16_t *a3, uint64_t a4, double a5, int8x16_t a6)
{
  int8x16_t v10 = *a3;
  *(int8x16_t *)a4 = *a3;
  int8x16_t v11 = (cnprint::CNPrinter *)CNTimeSpan::operator-((uint64_t)a3, (void *)a2, v10, a6);
  double v13 = v12 + (double)(uint64_t)v11;
  *(double *)(a4 + 16) = v13;
  if (v13 < 0.0)
  {
    if (!cnprint::CNPrinter::GetLogLevel(v11))
    {
      __int16 v28 = 12;
      unsigned __int8 v27 = 0;
      char v19 = cnprint::CNLogFormatter::FormatGeneral(a1 + 2488, (uint64_t)a3, "Prediction time is negative,dt,%.2lf,current_estimator_time,%.1lf", *(double *)(a4 + 16), *(double *)(a2 + 8) + (double)*(uint64_t *)a2);
      if (*(char *)(a1 + 2511) >= 0) {
        LOBYTE(v25) = v19;
      }
      else {
        uint64_t v25 = *(void *)(a1 + 2488);
      }
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v28, &v27, "%s", v20, v21, v22, v23, v24, v25);
    }
  }
  else
  {
    uint64_t v14 = *(void *)(a1 + 1168);
    double v15 = *(double *)(v14 + 216);
    double v16 = *(double *)(v14 + 224);
    double v17 = *(double *)(v14 + 232);
    double v18 = *(double *)(v14 + 240);
    *(double *)(a4 + 56) = v15;
    *(double *)(a4 + 64) = v15;
    *(double *)(a4 + 72) = v16;
    *(double *)(a4 + 80) = v17;
    *(double *)(a4 + 88) = v17;
    *(double *)(a4 + 96) = v18;
    *(double *)(a4 + 104) = v16 + v15 * 2.0;
    *(double *)(a4 + 112) = v18 + v17 * 2.0;
    *(_OWORD *)(a4 + 24) = *(_OWORD *)(v14 + 792);
    *(_OWORD *)(a4 + 40) = *(_OWORD *)(v14 + 808);
  }
  return v13 >= 0.0;
}

void raven::RavenPNTEstimator::FillZUPTEvent(raven::RavenPNTEstimator *this, const raven::MovingStateEvent *a2, raven::VelocityEvent *a3)
{
  raven::RavenEstimator::FillZUPTEvent(this, a2, a3);
  if (!v5 && *((unsigned char *)this + 2536) == 1)
  {
    *((double *)a3 + 39) = fmax(*((double *)a3 + 39), 0.25);
    *((double *)a3 + 42) = fmax(*((double *)a3 + 42), 0.25);
    *((double *)a3 + 44) = fmax(*((double *)a3 + 44), 0.25);
  }
}

uint64_t raven::RavenPNTEstimator::GetRavenSolution@<X0>(raven::RavenPNTEstimator *this@<X0>, uint64_t a2@<X8>)
{
  long long v4 = 0uLL;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  int v5 = (int64x2_t *)(a2 + 264);
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0x7FF8000000000000;
  *(unsigned char *)(a2 + 96) = 0;
  int64x2_t v6 = vdupq_n_s64(0x7FF8000000000000uLL);
  *(int64x2_t *)(a2 + 104) = v6;
  *(int64x2_t *)(a2 + 120) = v6;
  *(int64x2_t *)(a2 + 136) = v6;
  *(int64x2_t *)(a2 + 152) = v6;
  *(void *)(a2 + 168) = 0x7FF8000000000000;
  *(_WORD *)(a2 + 176) = 0;
  *(int64x2_t *)(a2 + 184) = v6;
  *(int64x2_t *)(a2 + 200) = v6;
  *(int64x2_t *)(a2 + 216) = v6;
  *(int64x2_t *)(a2 + 232) = v6;
  *(int64x2_t *)(a2 + 248) = v6;
  *(int64x2_t *)(a2 + 264) = v6;
  *(int64x2_t *)(a2 + 280) = v6;
  *(unsigned char *)(a2 + 296) = 0;
  *(int64x2_t *)(a2 + 304) = v6;
  *(int64x2_t *)(a2 + 320) = v6;
  *(int64x2_t *)(a2 + 336) = v6;
  *(int64x2_t *)(a2 + 352) = v6;
  *(void *)(a2 + 368) = 0x7FF8000000000000;
  *(unsigned char *)(a2 + 376) = 0;
  *(int64x2_t *)(a2 + 384) = v6;
  *(int64x2_t *)(a2 + 400) = v6;
  *(int64x2_t *)(a2 + 416) = v6;
  *(int64x2_t *)(a2 + 432) = v6;
  *(void *)(a2 + 448) = 0x7FF8000000000000;
  *(unsigned char *)(a2 + 456) = 0;
  *(int64x2_t *)(a2 + 464) = v6;
  *(int64x2_t *)(a2 + 480) = v6;
  *(int64x2_t *)(a2 + 496) = v6;
  *(int64x2_t *)(a2 + 512) = v6;
  *(int64x2_t *)(a2 + 528) = v6;
  *(int64x2_t *)(a2 + 544) = v6;
  *(int64x2_t *)(a2 + 560) = v6;
  *(unsigned char *)(a2 + 576) = 0;
  *(int64x2_t *)(a2 + 584) = v6;
  *(int64x2_t *)(a2 + 600) = v6;
  *(int64x2_t *)(a2 + 616) = v6;
  *(int64x2_t *)(a2 + 632) = v6;
  *(void *)(a2 + 648) = 0x7FF8000000000000;
  *(unsigned char *)(a2 + 656) = 0;
  *(int64x2_t *)(a2 + 664) = v6;
  *(int64x2_t *)(a2 + 680) = v6;
  *(int64x2_t *)(a2 + 696) = v6;
  *(int64x2_t *)(a2 + 712) = v6;
  *(void *)(a2 + 728) = 0x7FF8000000000000;
  *(unsigned char *)(a2 + 736) = 0;
  *(int64x2_t *)(a2 + 744) = v6;
  *(int64x2_t *)(a2 + 760) = v6;
  *(int64x2_t *)(a2 + 776) = v6;
  *(int64x2_t *)(a2 + 792) = v6;
  *(void *)(a2 + 808) = 0x7FF8000000000000;
  *(unsigned char *)(a2 + 816) = 0;
  *(int64x2_t *)(a2 + 824) = v6;
  *(int64x2_t *)(a2 + 840) = v6;
  *(void *)(a2 + 856) = 0x7FF8000000000000;
  if (*((unsigned char *)this + 58))
  {
    int64x2_t v13 = v6;
    char v7 = sub_18E059BCC((uint64_t)this + 15032);
    long long v4 = 0uLL;
    int64x2_t v6 = v13;
    if (v7)
    {
      v19[14] = *(_OWORD *)((char *)this + 14600);
      uint64_t v17 = 0x10000001CLL;
      double v15 = &unk_1EDD188B8;
      long long v16 = xmmword_18E1FD5F0;
      double v18 = v19;
      sub_18E06EBD8((uint64_t)v14, 28, 28);
    }
  }
  *(_DWORD *)(a2 + 100) = 0;
  *(_DWORD *)(a2 + 97) = 0;
  *(_DWORD *)(a2 + 178) = 0;
  *(_WORD *)(a2 + 182) = 0;
  *(_DWORD *)(a2 + 300) = 0;
  *(_DWORD *)(a2 + 297) = 0;
  *(_DWORD *)(a2 + 380) = 0;
  *(_DWORD *)(a2 + 377) = 0;
  *(_DWORD *)(a2 + 460) = 0;
  *(_DWORD *)(a2 + 457) = 0;
  *(_DWORD *)(a2 + 580) = 0;
  *(_DWORD *)(a2 + 577) = 0;
  *(_DWORD *)(a2 + 660) = 0;
  *(_DWORD *)(a2 + 657) = 0;
  *(_DWORD *)(a2 + 740) = 0;
  *(_DWORD *)(a2 + 737) = 0;
  *(_DWORD *)(a2 + 820) = 0;
  *(_DWORD *)(a2 + 817) = 0;
  *(_OWORD *)(a2 + 48) = v4;
  *(_OWORD *)(a2 + 64) = v4;
  *(_OWORD *)(a2 + 16) = v4;
  *(_OWORD *)(a2 + 32) = v4;
  *(_OWORD *)a2 = v4;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0x7FF8000000000000;
  *(unsigned char *)(a2 + 96) = 0;
  *(int64x2_t *)(a2 + 104) = v6;
  *(int64x2_t *)(a2 + 120) = v6;
  *(int64x2_t *)(a2 + 136) = v6;
  *(int64x2_t *)(a2 + 152) = v6;
  *(void *)(a2 + 168) = 0x7FF8000000000000;
  *(_WORD *)(a2 + 176) = 0;
  *(int64x2_t *)(a2 + 184) = v6;
  *(int64x2_t *)(a2 + 200) = v6;
  *(int64x2_t *)(a2 + 216) = v6;
  *(int64x2_t *)(a2 + 232) = v6;
  *(int64x2_t *)(a2 + 248) = v6;
  *int v5 = v6;
  v5[1] = v6;
  *(unsigned char *)(a2 + 296) = 0;
  *(int64x2_t *)(a2 + 304) = v6;
  *(int64x2_t *)(a2 + 320) = v6;
  *(int64x2_t *)(a2 + 336) = v6;
  *(int64x2_t *)(a2 + 352) = v6;
  *(void *)(a2 + 368) = 0x7FF8000000000000;
  *(unsigned char *)(a2 + 376) = 0;
  *(int64x2_t *)(a2 + 384) = v6;
  *(int64x2_t *)(a2 + 400) = v6;
  *(int64x2_t *)(a2 + 416) = v6;
  *(int64x2_t *)(a2 + 432) = v6;
  *(void *)(a2 + 448) = 0x7FF8000000000000;
  *(unsigned char *)(a2 + 456) = 0;
  *(int64x2_t *)(a2 + 464) = v6;
  *(int64x2_t *)(a2 + 480) = v6;
  *(int64x2_t *)(a2 + 496) = v6;
  *(int64x2_t *)(a2 + 512) = v6;
  *(int64x2_t *)(a2 + 528) = v6;
  *(int64x2_t *)(a2 + 544) = v6;
  *(int64x2_t *)(a2 + 560) = v6;
  *(unsigned char *)(a2 + 576) = 0;
  v5[20] = v6;
  v5[21] = v6;
  v5[22] = v6;
  v5[23] = v6;
  *(void *)(a2 + 648) = 0x7FF8000000000000;
  *(unsigned char *)(a2 + 656) = 0;
  v5[25] = v6;
  v5[26] = v6;
  v5[27] = v6;
  v5[28] = v6;
  *(void *)(a2 + 728) = 0x7FF8000000000000;
  *(unsigned char *)(a2 + 736) = 0;
  v5[30] = v6;
  v5[31] = v6;
  v5[32] = v6;
  v5[33] = v6;
  *(void *)(a2 + 808) = 0x7FF8000000000000;
  *(unsigned char *)(a2 + 816) = 0;
  v5[35] = v6;
  v5[36] = v6;
  *(void *)(a2 + 856) = 0x7FF8000000000000;
  long long v8 = *(_OWORD *)((char *)this + 152);
  *(_OWORD *)a2 = *(_OWORD *)((char *)this + 136);
  *(_OWORD *)(a2 + 16) = v8;
  long long v9 = *(_OWORD *)((char *)this + 216);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)((char *)this + 200);
  *(_OWORD *)(a2 + 80) = v9;
  int8x16_t v10 = *(int8x16_t *)((char *)this + 184);
  int8x16_t v11 = *(int8x16_t *)((char *)this + 168);
  *(int8x16_t *)(a2 + 32) = v11;
  *(int8x16_t *)(a2 + 48) = v10;

  return raven::PopulateAllTimeFields(a2, (uint64_t)this + 136, v10, v11);
}

void sub_18E02F844(_Unwind_Exception *a1)
{
}

uint64_t raven::RavenPNTEstimator::IsObservable(raven::RavenPNTEstimator *this)
{
  if (*((unsigned char *)this + 58)) {
    return sub_18E059BCC((uint64_t)this + 15032);
  }
  else {
    return 0;
  }
}

void sub_18E02F910(uint64_t a1)
{
}

void sub_18E02FD34(uint64_t a1)
{
}

void sub_18E02FD78(_Unwind_Exception *a1)
{
  sub_18E06B384(v1);
  _Unwind_Resume(a1);
}

void sub_18E02FD8C(uint64_t a1)
{
}

void sub_18E02FDD0(_Unwind_Exception *a1)
{
  sub_18E0706BC(v1);
  _Unwind_Resume(a1);
}

void sub_18E02FDE4()
{
  sub_18E06E85C((uint64_t)v0);
}

void sub_18E030010(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  sub_18E06B5D4((uint64_t *)va);
  sub_18E06B5D4(va1);
  _Unwind_Resume(a1);
}

void sub_18E03005C(uint64_t a1, uint64_t a2)
{
}

void sub_18E030098(_Unwind_Exception *a1)
{
  sub_18E070BEC(v1);
  _Unwind_Resume(a1);
}

void sub_18E0300B4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 24) = 0x100000003;
  *(void *)a3 = &unk_1EDD18D98;
  *(_OWORD *)(a3 + 8) = xmmword_18E1F6F60;
  *(void *)(a3 + 32) = a3 + 40;
  sub_18DFE2B44(a1, a2, a3);
}

void sub_18E030118(_Unwind_Exception *a1)
{
  *int64x2_t v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

double sub_18E030138@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 24) = 0x100000003;
  *(void *)a3 = &unk_1EDD18D98;
  *(_OWORD *)(a3 + 8) = xmmword_18E1F6F60;
  *(void *)(a3 + 32) = a3 + 40;
  return sub_18E070C68(a1, a2, a3);
}

void sub_18E03017C(uint64_t a1)
{
  uint64_t v13 = 0x100000003;
  int8x16_t v11 = &unk_1EDD18D98;
  long long v12 = xmmword_18E1F6F60;
  uint64_t v14 = &v15;
  uint64_t v8 = 0x100000134;
  uint64_t v6 = &unk_1EDD18C48;
  long long v7 = xmmword_18E1F6FB0;
  uint64_t v9 = &v10;
  uint64_t v3 = 0x100000003;
  int64x2_t v1 = &unk_1EDD18D98;
  long long v2 = xmmword_18E1F6F60;
  long long v4 = &v5;
  sub_18DFE345C(a1, (uint64_t)&v11, (uint64_t)&v6, (uint64_t)&v1, "2");
}

uint64_t raven::RavenPNTEstimator::GetRavenStatus@<X0>(raven::RavenPNTEstimator *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = a2 + 8;
  *(void *)(a2 + 1056) = 0;
  *(_OWORD *)(a2 + 1040) = 0u;
  *(_OWORD *)(a2 + 1008) = 0u;
  *(_OWORD *)(a2 + 1024) = 0u;
  *(_OWORD *)(a2 + 992) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_OWORD *)(a2 + 144) = 0u;
  *(_WORD *)(a2 + 160) = 0;
  *(int64x2_t *)(a2 + 960) = vdupq_n_s64(0x7FF8000000000000uLL);
  *(void *)(a2 + 976) = 0;
  *(void *)(a2 + 984) = 0x7FF8000000000000;
  uint64_t v5 = a2 + 164;
  bzero((void *)(a2 + 164), 0x318uLL);
  *(unsigned char *)a2 = *((unsigned char *)this + 280);
  int v12 = *((unsigned __int8 *)this + 56);
  *(_WORD *)(a2 + 104) = v12;
  if (*((unsigned char *)this + 58))
  {
    long long v66 = 0u;
    long long v67 = 0u;
    long long v64 = 0u;
    long long v65 = 0u;
    *(_OWORD *)(v4 + 32) = 0u;
    *(_OWORD *)(v4 + 48) = 0u;
    *(_OWORD *)(v4 + 64) = 0u;
    long long v13 = *(_OWORD *)((char *)this + 14600);
    *(void *)(v4 + 80) = 0;
    *(_OWORD *)uint64_t v4 = v13;
    *(_OWORD *)(v4 + 16) = 0u;
    *(void *)(a2 + 96) = 0x7FF8000000000000;
    IsSane = (cnprint::CNPrinter *)sub_18E030680((double *)a2, v12, 1.0, v6, v7, v8, v9, v10, v11);
    if (!*((unsigned char *)this + 58)) {
      goto LABEL_10;
    }
    IsSane = (cnprint::CNPrinter *)sub_18E059BCC((uint64_t)this + 15032);
    if (!IsSane) {
      goto LABEL_10;
    }
    IsSane = (cnprint::CNPrinter *)raven::RavenPNTEstimator::IsSane(this);
    if (!IsSane) {
      goto LABEL_10;
    }
    if (!*((unsigned char *)this + 58)) {
      goto LABEL_9;
    }
    uint64_t v17 = 16;
    if (!*((_DWORD *)this + 4846)) {
      uint64_t v17 = 8;
    }
    if (*(double *)((char *)this + v17 + 19360) < *(double *)(*((void *)this + 146) + 1464))
    {
LABEL_9:
      char v18 = 2;
    }
    else
    {
LABEL_10:
      unsigned int LogLevel = cnprint::CNPrinter::GetLogLevel(IsSane);
      char v18 = 1;
      if (LogLevel <= 1)
      {
        v63[0] = 12;
        unsigned __int8 v62 = 1;
        if (*((unsigned char *)this + 58)) {
          int v20 = sub_18E059BCC((uint64_t)this + 15032);
        }
        else {
          int v20 = 0;
        }
        int v26 = raven::RavenPNTEstimator::IsSane(this);
        if (*((unsigned char *)this + 58))
        {
          uint64_t v27 = 16;
          if (!*((_DWORD *)this + 4846)) {
            uint64_t v27 = 8;
          }
          BOOL v28 = *(double *)((char *)this + v27 + 19360) < *(double *)(*((void *)this + 146) + 1464);
        }
        else
        {
          BOOL v28 = 1;
        }
        cnprint::CNLogFormatter::FormatGeneral((const void **)this + 311, "Estimator unhealthy,observable,%d,sane,%d,consistent,%d", v20, v26, v28);
        if (*((char *)this + 2511) >= 0) {
          LOBYTE(v34) = (_BYTE)this - 72;
        }
        else {
          uint64_t v34 = *((void *)this + 311);
        }
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v63, &v62, "%s", v29, v30, v31, v32, v33, v34);
        char v18 = 1;
      }
    }
    uint64_t v35 = 16;
    if (!*((_DWORD *)this + 4846)) {
      uint64_t v35 = 8;
    }
    v15.i64[0] = *(void *)((char *)this + v35 + 19360);
    *(unsigned char *)(a2 + 105) = v18;
    v16.i64[0] = 1.0;
    *(double *)v15.i64 = 1.0 - *(double *)v15.i64;
    *(void *)(a2 + 112) = v15.i64[0];
    *(void *)(a2 + 120) = CNTimeSpan::operator-((uint64_t)this + 80, (void *)this + 8, v15, v16);
    *(void *)(a2 + 128) = v36;
    *(_OWORD *)(a2 + 136) = *((_OWORD *)this + 16);
    *(void *)(a2 + 152) = *((void *)this + 34);
    long long v37 = *(_OWORD *)((char *)this + 440);
    *(_OWORD *)(v5 + 96) = *(_OWORD *)((char *)this + 424);
    *(_OWORD *)(v5 + 112) = v37;
    *(_DWORD *)(v5 + 128) = *((_DWORD *)this + 114);
    long long v38 = *(_OWORD *)((char *)this + 376);
    *(_OWORD *)(v5 + 32) = *(_OWORD *)((char *)this + 360);
    *(_OWORD *)(v5 + 48) = v38;
    long long v39 = *(_OWORD *)((char *)this + 408);
    *(_OWORD *)(v5 + 64) = *(_OWORD *)((char *)this + 392);
    *(_OWORD *)(v5 + 80) = v39;
    long long v40 = *(_OWORD *)((char *)this + 344);
    *(_OWORD *)uint64_t v5 = *(_OWORD *)((char *)this + 328);
    *(_OWORD *)(v5 + 16) = v40;
    long long v41 = *(_OWORD *)((char *)this + 572);
    *(_OWORD *)(a2 + 392) = *(_OWORD *)((char *)this + 556);
    *(_OWORD *)(a2 + 408) = v41;
    *(_DWORD *)(a2 + 424) = *((_DWORD *)this + 147);
    long long v42 = *(_OWORD *)((char *)this + 508);
    *(_OWORD *)(a2 + 328) = *(_OWORD *)((char *)this + 492);
    *(_OWORD *)(a2 + 344) = v42;
    long long v43 = *(_OWORD *)((char *)this + 540);
    *(_OWORD *)(a2 + 360) = *(_OWORD *)((char *)this + 524);
    *(_OWORD *)(a2 + 376) = v43;
    long long v44 = *(_OWORD *)((char *)this + 476);
    *(_OWORD *)(a2 + 296) = *(_OWORD *)((char *)this + 460);
    *(_OWORD *)(a2 + 312) = v44;
    long long v45 = *((_OWORD *)this + 44);
    *(_OWORD *)(a2 + 524) = *((_OWORD *)this + 43);
    *(_OWORD *)(a2 + 540) = v45;
    *(_DWORD *)(a2 + 556) = *((_DWORD *)this + 180);
    long long v46 = *((_OWORD *)this + 40);
    *(_OWORD *)(a2 + 460) = *((_OWORD *)this + 39);
    *(_OWORD *)(a2 + 476) = v46;
    long long v47 = *((_OWORD *)this + 42);
    *(_OWORD *)(a2 + 492) = *((_OWORD *)this + 41);
    *(_OWORD *)(a2 + 508) = v47;
    long long v48 = *((_OWORD *)this + 38);
    *(_OWORD *)(a2 + 428) = *((_OWORD *)this + 37);
    *(_OWORD *)(a2 + 444) = v48;
    long long v49 = *(_OWORD *)((char *)this + 836);
    *(_OWORD *)(a2 + 656) = *(_OWORD *)((char *)this + 820);
    *(_OWORD *)(a2 + 672) = v49;
    *(_DWORD *)(a2 + 688) = *((_DWORD *)this + 213);
    long long v50 = *(_OWORD *)((char *)this + 772);
    *(_OWORD *)(a2 + 592) = *(_OWORD *)((char *)this + 756);
    *(_OWORD *)(a2 + 608) = v50;
    long long v51 = *(_OWORD *)((char *)this + 804);
    *(_OWORD *)(a2 + 624) = *(_OWORD *)((char *)this + 788);
    *(_OWORD *)(a2 + 640) = v51;
    long long v52 = *(_OWORD *)((char *)this + 740);
    *(_OWORD *)(a2 + 560) = *(_OWORD *)((char *)this + 724);
    *(_OWORD *)(a2 + 576) = v52;
    long long v53 = *(_OWORD *)((char *)this + 968);
    *(_OWORD *)(a2 + 788) = *(_OWORD *)((char *)this + 952);
    *(_OWORD *)(a2 + 804) = v53;
    *(_DWORD *)(a2 + 820) = *((_DWORD *)this + 246);
    long long v54 = *(_OWORD *)((char *)this + 904);
    *(_OWORD *)(a2 + 724) = *(_OWORD *)((char *)this + 888);
    *(_OWORD *)(a2 + 740) = v54;
    long long v55 = *(_OWORD *)((char *)this + 936);
    *(_OWORD *)(a2 + 756) = *(_OWORD *)((char *)this + 920);
    *(_OWORD *)(a2 + 772) = v55;
    long long v56 = *(_OWORD *)((char *)this + 872);
    *(_OWORD *)(a2 + 692) = *(_OWORD *)((char *)this + 856);
    *(_OWORD *)(a2 + 708) = v56;
    long long v57 = *(_OWORD *)((char *)this + 1100);
    *(_OWORD *)(a2 + 920) = *(_OWORD *)((char *)this + 1084);
    *(_OWORD *)(a2 + 936) = v57;
    *(_DWORD *)(a2 + 952) = *((_DWORD *)this + 279);
    long long v58 = *(_OWORD *)((char *)this + 1036);
    *(_OWORD *)(a2 + 856) = *(_OWORD *)((char *)this + 1020);
    *(_OWORD *)(a2 + 872) = v58;
    long long v59 = *(_OWORD *)((char *)this + 1068);
    *(_OWORD *)(a2 + 888) = *(_OWORD *)((char *)this + 1052);
    *(_OWORD *)(a2 + 904) = v59;
    long long v60 = *(_OWORD *)((char *)this + 1004);
    *(_OWORD *)(a2 + 824) = *(_OWORD *)((char *)this + 988);
    *(_OWORD *)(a2 + 840) = v60;
    *(_WORD *)(a2 + 160) = 0;
    *(double *)(a2 + 992) = raven::RavenEstimator::GetPriorWeight(this);
    *(double *)(a2 + 1000) = raven::RavenEstimator::GetGNSSWeight(this);
    *(double *)(a2 + 1008) = raven::RavenEstimator::GetWiFiWeight(this);
    *(double *)(a2 + 1016) = raven::RavenEstimator::GetCellWeight(this);
    *(double *)(a2 + 1024) = raven::RavenEstimator::GetIndoorWeight(this);
    *(double *)(a2 + 1032) = raven::RavenEstimator::GetAccessoryWeight(this);
    v25.i64[0] = *((void *)this + 40);
    *(void *)(a2 + 976) = *((void *)this + 39);
    *(void *)(a2 + 984) = v25.i64[0];
    v24.i64[0] = *((void *)this + 2404);
    *(void *)(a2 + 968) = v24.i64[0];
    uint64_t v21 = (char *)this + 136;
  }
  else
  {
    uint64_t v21 = (char *)this + 136;
    long long v22 = *(_OWORD *)((char *)this + 184);
    *(_OWORD *)(v4 + 32) = *(_OWORD *)((char *)this + 168);
    *(_OWORD *)(v4 + 48) = v22;
    long long v23 = *(_OWORD *)((char *)this + 216);
    *(_OWORD *)(v4 + 64) = *(_OWORD *)((char *)this + 200);
    *(_OWORD *)(v4 + 80) = v23;
    int8x16_t v24 = *(int8x16_t *)((char *)this + 136);
    int8x16_t v25 = *(int8x16_t *)((char *)this + 152);
    *(int8x16_t *)uint64_t v4 = v24;
    *(int8x16_t *)(v4 + 16) = v25;
  }

  return raven::PopulateAllTimeFields(v4, (uint64_t)v21, v24, v25);
}

uint64_t sub_18E030680(double *a1, int a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  switch(a2)
  {
    case 3:
      uint64_t result = 0;
      a1[132] = a3;
      break;
    case 2:
      uint64_t result = 0;
      a1[131] = a3;
      break;
    case 1:
      uint64_t result = 0;
      a1[130] = a3;
      break;
    default:
      __int16 v12 = 12;
      unsigned __int8 v11 = 4;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v12, &v11, "Error: Invalid raven estimator type, %d", a5, a6, a7, a8, a9, a2);
      return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t raven::RavenPNTEstimator::IsSane(raven::RavenPNTEstimator *this)
{
  uint64_t v78 = *MEMORY[0x1E4F143B8];
  if (!*((unsigned char *)this + 58)) {
    return 0;
  }
  uint64_t v70 = 0x10000001ALL;
  long long v68 = &unk_1EDD186A8;
  int8x16_t v71 = &v72;
  long long v69 = xmmword_18E1FD600;
  sub_18DFE2CC8((uint64_t)&v68, 0.0);
  uint64_t v65 = 0x10000001CLL;
  int8x16_t v63 = &unk_1EDD188B8;
  long long v64 = xmmword_18E1FD5F0;
  long long v66 = (double *)&v67;
  v61[0] = vdupq_n_s64(0x7FF8000000000000uLL);
  v61[1] = v61[0];
  v61[2] = v61[0];
  double v61[3] = v61[0];
  v61[4] = v61[0];
  v61[5] = v61[0];
  v61[6] = v61[0];
  v61[7] = v61[0];
  v61[8] = v61[0];
  v61[9] = v61[0];
  v61[10] = v61[0];
  v61[11] = v61[0];
  v61[12] = v61[0];
  v61[13] = v61[0];
  v61[14] = v61[0];
  v61[15] = v61[0];
  v61[16] = v61[0];
  v61[17] = v61[0];
  v61[18] = v61[0];
  v61[19] = v61[0];
  v61[20] = v61[0];
  v61[21] = v61[0];
  v61[22] = v61[0];
  v61[23] = v61[0];
  v61[24] = v61[0];
  v61[25] = v61[0];
  v61[26] = v61[0];
  v61[27] = v61[0];
  v61[28] = v61[0];
  v61[29] = v61[0];
  v61[30] = v61[0];
  v61[31] = v61[0];
  v61[32] = v61[0];
  v61[33] = v61[0];
  v61[34] = v61[0];
  uint64_t v62 = 0x7FF8000000000000;
  int v2 = *((unsigned __int8 *)this + 2536);
  LOBYTE(v73[0]) = 0;
  uint64_t v3 = (cnprint::CNPrinter *)sub_18E06EC84((uint64_t)this + 14616, (uint64_t)&v68, v2, 1, 1, (uint64_t)&v63, (uint64_t)v61, (BOOL *)v73, 0.000000015);
  if (v3) {
    return 0;
  }
  float64_t v7 = *v66;
  double v8 = v66[1];
  double v9 = v66[2];
  double v10 = sqrt((v8 - v66[22]) * (v8 - v66[22]) + (*v66 - v66[21]) * (*v66 - v66[21]) + (v9 - v66[23]) * (v9 - v66[23]));
  unsigned __int8 v11 = (double *)*((void *)this + 146);
  uint64_t v12 = 170;
  if (*((unsigned char *)this + 2536) == 1) {
    uint64_t v12 = 171;
  }
  double v13 = v11[v12];
  if (v10 > v13)
  {
    if (cnprint::CNPrinter::GetLogLevel(v3) <= 1)
    {
      v73[0] = 12;
      LOBYTE(v76.f64[0]) = 1;
      long long v38 = (uint64_t *)cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)this + 80, "Sanity failure,user-device dist,%.1lf > %.1lf", v10, v13);
      if (*((char *)this + 2511) >= 0) {
        LOBYTE(v37) = (_BYTE)v38;
      }
      else {
        uint64_t v37 = *v38;
      }
      goto LABEL_37;
    }
    return 0;
  }
  double v52 = v66[4];
  double v53 = v66[5];
  double v54 = v66[3];
  double v14 = v66[13];
  double v58 = v66[15];
  double v59 = v66[14];
  v5.i64[0] = (uint64_t)v66[16];
  double v56 = v66[17];
  double v57 = *(double *)v5.i64;
  v4.i64[0] = (uint64_t)v66[18];
  double v55 = *(double *)v4.i64;
  double v15 = v66[11];
  double v16 = v66[12];
  double v17 = v66[10];
  BOOL v18 = raven::RavenPNTEstimator::UseHighAccelerationParameters(this, v4, v5);
  uint64_t v19 = 93;
  if (v18) {
    uint64_t v19 = 94;
  }
  double v20 = v11[176] * v11[v19];
  double v21 = fabs(v17);
  double v22 = fabs(v15);
  double v23 = fabs(v16);
  if (v21 > v20 || v22 > v20 || v23 > v20)
  {
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v18) <= 1)
    {
      v73[0] = 12;
      LOBYTE(v76.f64[0]) = 1;
      long long v39 = (uint64_t *)cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)this + 80, "Sanity failure,gyro bias,x_dps,%.2lf,y_dps,%.2lf,z_dps,%.2lf,max_dps,%.1lf)", v21 * 57.2957795, v22 * 57.2957795, v23 * 57.2957795, v20 * 57.2957795);
      if (*((char *)this + 2511) >= 0) {
        LOBYTE(v37) = (_BYTE)v39;
      }
      else {
        uint64_t v37 = *v39;
      }
      goto LABEL_37;
    }
    return 0;
  }
  double v24 = v11[174] * v11[91];
  double v25 = fabs(v14);
  double v26 = fabs(v59);
  double v27 = fabs(v58);
  if (v25 > v24 || v26 > v24 || v27 > v24)
  {
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v18) <= 1)
    {
      v73[0] = 12;
      LOBYTE(v76.f64[0]) = 1;
      long long v40 = (uint64_t *)cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)this + 80, "Sanity failure,accel bias,x_mg,%.2lf,y_mg,%.2lf,z_mg,%.2lf,max_mg,%.1lf)", v25 * 101.971621, v26 * 101.971621, v27 * 101.971621, v24 * 101.971621);
      if (*((char *)this + 2511) >= 0) {
        LOBYTE(v37) = (_BYTE)v40;
      }
      else {
        uint64_t v37 = *v40;
      }
      goto LABEL_37;
    }
    return 0;
  }
  uint64_t v28 = 96;
  if (v18) {
    uint64_t v28 = 97;
  }
  double v29 = v11[175] * v11[v28];
  double v30 = fabs(v57 + -1.0);
  if (v30 > v29 || fabs(v56 + -1.0) > v29 || fabs(v55 + -1.0) > v29)
  {
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v18) <= 1)
    {
      v73[0] = 12;
      LOBYTE(v76.f64[0]) = 1;
      uint64_t v31 = (uint64_t *)cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)this + 80, "Sanity failure,accel scale,x_ppm,%.2lf,y_ppm,%.2lf,z_ppm,%.2lf,max_ppm,%.1lf)", v30 * 1000000.0, fabs(v56 + -1.0) * 1000000.0, fabs(v55 + -1.0) * 1000000.0, v29 * 1000000.0);
      if (*((char *)this + 2511) >= 0) {
        LOBYTE(v37) = (_BYTE)v31;
      }
      else {
        uint64_t v37 = *v31;
      }
LABEL_37:
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v73, (unsigned __int8 *)&v76, "%s", v32, v33, v34, v35, v36, v37);
      return 0;
    }
    return 0;
  }
  v76.f64[0] = v7;
  v76.f64[1] = v8;
  double v77 = v9;
  int v41 = cnnavigation::ECEFToLLA(&v76, 1, v74, 0, (uint64_t)v73);
  uint64_t result = 0;
  if (!v41)
  {
    double v42 = v75;
    if (v75 <= 18000.0)
    {
      double v50 = sqrt(v52 * v52 + v54 * v54 + v53 * v53);
      if (v50 <= 600.0) {
        return 1;
      }
      if (cnprint::CNPrinter::GetLogLevel(0) > 1) {
        return 0;
      }
      v73[0] = 12;
      unsigned __int8 v60 = 1;
      long long v51 = (uint64_t *)cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)this + 80, "Sanity failure,speed,%.1lf > %.1lf", v50, 600.0);
      if (*((char *)this + 2511) >= 0) {
        LOBYTE(v49) = (_BYTE)v51;
      }
      else {
        uint64_t v49 = *v51;
      }
    }
    else
    {
      if (cnprint::CNPrinter::GetLogLevel(0) > 1) {
        return 0;
      }
      v73[0] = 12;
      unsigned __int8 v60 = 1;
      long long v43 = (uint64_t *)cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)this + 80, "Sanity failure,altitude,%.1lf > %.1lf", v42, 18000.0);
      if (*((char *)this + 2511) >= 0) {
        LOBYTE(v49) = (_BYTE)v43;
      }
      else {
        uint64_t v49 = *v43;
      }
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v73, &v60, "%s", v44, v45, v46, v47, v48, v49);
    return 0;
  }
  return result;
}

BOOL raven::RavenPNTEstimator::IsConsistent(raven::RavenPNTEstimator *this)
{
  if (!*((unsigned char *)this + 58)) {
    return 1;
  }
  uint64_t v1 = 16;
  if (!*((_DWORD *)this + 4846)) {
    uint64_t v1 = 8;
  }
  return *(double *)((char *)this + v1 + 19360) < *(double *)(*((void *)this + 146) + 1464);
}

uint64_t raven::RavenPNTEstimator::HandleEvent(raven::RavenPNTEstimator *this, const raven::AccelerometerEvent *a2)
{
  if (*((unsigned char *)this + 57))
  {
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    double v16 = &unk_1EDD14658;
    uint64_t v17 = (*(uint64_t (**)(const raven::AccelerometerEvent *))(*(void *)a2 + 16))(a2);
    uint64_t v18 = v4;
    long long v19 = *(_OWORD *)((char *)a2 + 104);
    uint64_t v20 = *((void *)a2 + 15);
    uint64_t result = sub_18E030EC8((uint64_t)this + 27592, (uint64_t)&v16);
    if (!result) {
      return result;
    }
    __int16 v15 = 12;
    unsigned __int8 v14 = 4;
    v13[0] = (*(uint64_t (**)(const raven::AccelerometerEvent *))(*(void *)a2 + 16))(a2);
    v13[1] = v6;
    cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)v13, "Could not add measurement - accelerations");
    if (*((char *)this + 2511) >= 0) {
      LOBYTE(v12) = (_BYTE)this - 72;
    }
    else {
      uint64_t v12 = *((void *)this + 311);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v15, &v14, "%s", v7, v8, v9, v10, v11, v12);
  }
  return 0xFFFFFFFFLL;
}

uint64_t sub_18E030EC8(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a1 + 8);
  if (!v4)
  {
    *(_DWORD *)(a1 + 8) = 1;
    *(void *)(a1 + 40) = 0;
    long long v20 = *(_OWORD *)(a2 + 8);
    long long v21 = *(_OWORD *)(a2 + 24);
    *(void *)(a1 + 88) = *(void *)(a2 + 40);
    *(_OWORD *)(a1 + 72) = v21;
    *(_OWORD *)(a1 + 56) = v20;
    goto LABEL_34;
  }
  if (v4 == 350 && sub_18E070CB8(a1)) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
  double v8 = v6;
  unsigned int v9 = *(_DWORD *)(a1 + 44);
  if (v7) {
    BOOL v10 = 1;
  }
  else {
    BOOL v10 = (*(void *)&v6 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
  }
  char v11 = v10;
  while (1)
  {
    unsigned int v12 = v9;
    uint64_t v13 = (*(uint64_t (**)(void))(*(void *)(a1 + 48 * v9 + 48) + 16))();
    if (v11)
    {
      BOOL v15 = v13 || (*(void *)&v14 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
      if (v15 && v7 != v13) {
        break;
      }
    }
    if (v8 >= v14) {
      goto LABEL_28;
    }
LABEL_21:
    uint64_t v16 = a1 + 48 + 48 * ((v12 + 1) % 0x15E);
    uint64_t v17 = a1 + 48 + 48 * v12;
    long long v18 = *(_OWORD *)(v17 + 8);
    long long v19 = *(_OWORD *)(v17 + 24);
    *(void *)(v16 + 40) = *(void *)(v17 + 40);
    *(_OWORD *)(v16 + 24) = v19;
    *(_OWORD *)(v16 + 8) = v18;
    if (v12 == *(_DWORD *)(a1 + 40))
    {
      uint64_t v22 = v17 + 8;
      goto LABEL_29;
    }
    unsigned int v9 = v12 - 1;
    if (!v12) {
      unsigned int v9 = 349;
    }
    if (v9 == *(_DWORD *)(a1 + 44)) {
      goto LABEL_30;
    }
  }
  if (v7 < v13) {
    goto LABEL_21;
  }
LABEL_28:
  uint64_t v22 = a1 + 48 * ((v12 + 1) % 0x15E) + 56;
LABEL_29:
  long long v23 = *(_OWORD *)(a2 + 8);
  long long v24 = *(_OWORD *)(a2 + 24);
  *(void *)(v22 + 32) = *(void *)(a2 + 40);
  *(_OWORD *)uint64_t v22 = v23;
  *(_OWORD *)(v22 + 16) = v24;
  unsigned int v9 = *(_DWORD *)(a1 + 44);
LABEL_30:
  ++*(_DWORD *)(a1 + 8);
  if (v9 == 349) {
    unsigned int v25 = 0;
  }
  else {
    unsigned int v25 = v9 + 1;
  }
  *(_DWORD *)(a1 + 44) = v25;
LABEL_34:
  sub_18E070D00(a1);
  return 0;
}

uint64_t raven::RavenPNTEstimator::HandleEvent(raven::RavenPNTEstimator *this, const raven::AccessoryVehicleSpeedEvent *a2)
{
  if (!*((unsigned char *)this + 57)) {
    return 0xFFFFFFFFLL;
  }
  if (*((unsigned char *)this + 58))
  {
    long long v4 = *(_OWORD *)((char *)a2 + 56);
    long long v71 = *(_OWORD *)((char *)a2 + 40);
    long long v72 = v4;
    long long v5 = *(_OWORD *)((char *)a2 + 88);
    long long v73 = *(_OWORD *)((char *)a2 + 72);
    long long v74 = v5;
    int8x16_t v6 = *(int8x16_t *)((char *)a2 + 24);
    int8x16_t v69 = *(int8x16_t *)((char *)a2 + 8);
    int8x16_t v70 = v6;
    uint64_t v7 = (cnprint::CNPrinter *)raven::PopulateAllTimeFields((uint64_t)&v69, (uint64_t)this + 136, v69, v6);
    if (!*((_DWORD *)a2 + 51) || *((void *)a2 + 30) == *((void *)a2 + 29))
    {
      if (cnprint::CNPrinter::GetLogLevel(v7) <= 1)
      {
        LOWORD(v52) = 12;
        LOBYTE(v55) = 1;
        double v56 = (void *)(*(uint64_t (**)(const raven::AccessoryVehicleSpeedEvent *))(*(void *)a2 + 16))(a2);
        *(void *)&long long v57 = v20;
        cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)&v56, "AccessoryVehicleSpeed,rejected,0 speed samples,iOSTime,%.2lf", *(double *)&v71 + (double)v70.i64[1]);
        if (*((char *)this + 2511) >= 0) {
          LOBYTE(v26) = (_BYTE)this - 72;
        }
        else {
          uint64_t v26 = *((void *)this + 311);
        }
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v52, (unsigned __int8 *)&v55, "%s", v21, v22, v23, v24, v25, v26);
      }
    }
    else if (*((unsigned char *)this + 1624) {
           && ((unsigned int v9 = *((unsigned __int8 *)this + 1736), v9 > 3) || v9 == 1)
    }
           && *((unsigned char *)this + 1208)
           && ((*((unsigned char *)this + 1320) - 4) & 0xFA) == 0
           && raven::RavenEstimator::IsZUPTAppropriate(this, a2))
    {
      int8x16_t v35 = (int8x16_t)sub_18E031634((int64x2_t *)&v56);
      uint64_t v37 = (cnprint::CNPrinter *)sub_18E0316BC((uint64_t)a2, (uint64_t)&v56, v35, v36);
      if (v37)
      {
        if (cnprint::CNPrinter::GetLogLevel(v37) > 1) {
          return 0xFFFFFFFFLL;
        }
        __int16 v55 = 12;
        unsigned __int8 v54 = 1;
        uint64_t v52 = (*(uint64_t (**)(const raven::AccessoryVehicleSpeedEvent *))(*(void *)a2 + 16))(a2);
        uint64_t v53 = v38;
        char v39 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)&v52, "AccessoryVehicleSpeed,rejected,unable to add ZUPT 2,iOSTime,%.2lf", *(double *)&v71 + (double)v70.i64[1]);
        if (*((char *)this + 2511) >= 0) {
          LOBYTE(v18) = v39;
        }
        else {
          uint64_t v18 = *((void *)this + 311);
        }
        goto LABEL_13;
      }
      long long v40 = (cnprint::CNPrinter *)raven::RavenPNTEstimator::AddUserVelocityMeasurement(this, (const raven::VelocityEvent *)&v56);
      if (v40)
      {
        if (cnprint::CNPrinter::GetLogLevel(v40) > 1) {
          return 0xFFFFFFFFLL;
        }
        __int16 v55 = 12;
        unsigned __int8 v54 = 1;
        uint64_t v52 = (*(uint64_t (**)(const raven::AccessoryVehicleSpeedEvent *))(*(void *)a2 + 16))(a2);
        uint64_t v53 = v41;
        char v42 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)&v52, "AccessoryVehicleSpeed,rejected,unable to add ZUPT 1,iOSTime,%.2lf", *(double *)&v71 + (double)v70.i64[1]);
        if (*((char *)this + 2511) >= 0) {
          LOBYTE(v18) = v42;
        }
        else {
          uint64_t v18 = *((void *)this + 311);
        }
        goto LABEL_13;
      }
      int v43 = *((unsigned __int8 *)this + 232);
      *((_OWORD *)this + 15) = v57;
      if (!v43) {
        *((unsigned char *)this + 232) = 1;
      }
      if (cnprint::CNPrinter::GetLogLevel(v40) <= 1)
      {
        __int16 v55 = 12;
        unsigned __int8 v54 = 1;
        uint64_t v52 = (*(uint64_t (**)(const raven::AccessoryVehicleSpeedEvent *))(*(void *)a2 + 16))(a2);
        uint64_t v53 = v44;
        char v45 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)&v52, "AccessoryVehicleSpeed,accepted,ZUPT,iOSTime,%.2lf,speed,%.2lf", *(double *)&v71 + (double)v70.i64[1], *(double *)(*((void *)a2 + 30) - 8));
        if (*((char *)this + 2511) >= 0) {
          LOBYTE(v51) = v45;
        }
        else {
          uint64_t v51 = *((void *)this + 311);
        }
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v55, &v54, "%s", v46, v47, v48, v49, v50, v51);
      }
    }
    else
    {
      long long v57 = 0uLL;
      double v56 = &unk_1EDD13A40;
      char v58 = 0;
      uint64_t v59 = 0;
      uint64_t v60 = 0;
      char v61 = 0;
      uint64_t v62 = 0;
      uint64_t v63 = 0;
      char v64 = 0;
      uint64_t v65 = 0;
      uint64_t v66 = 0;
      int8x16_t v67 = (int8x16_t)vdupq_n_s64(0x7FF8000000000000uLL);
      double v68 = NAN;
      BOOL v10 = (cnprint::CNPrinter *)sub_18E03183C((uint64_t)a2, (uint64_t)&v56, v67, v8);
      if (v10)
      {
        if (cnprint::CNPrinter::GetLogLevel(v10) > 1) {
          return 0xFFFFFFFFLL;
        }
        __int16 v55 = 12;
        unsigned __int8 v54 = 1;
        uint64_t v52 = (*(uint64_t (**)(const raven::AccessoryVehicleSpeedEvent *))(*(void *)a2 + 16))(a2);
        uint64_t v53 = v11;
        char v12 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)&v52, "AccessoryVehicleSpeed,rejected,unable to add USPD,iOSTime,%.2lf", *(double *)&v71 + (double)v70.i64[1]);
        if (*((char *)this + 2511) >= 0) {
          LOBYTE(v18) = v12;
        }
        else {
          uint64_t v18 = *((void *)this + 311);
        }
LABEL_13:
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v55, &v54, "%s", v13, v14, v15, v16, v17, v18);
        return 0xFFFFFFFFLL;
      }
      if (cnprint::CNPrinter::GetLogLevel(v10) <= 1)
      {
        __int16 v55 = 12;
        unsigned __int8 v54 = 1;
        uint64_t v52 = (*(uint64_t (**)(const raven::AccessoryVehicleSpeedEvent *))(*(void *)a2 + 16))(a2);
        uint64_t v53 = v27;
        char v28 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)&v52, "AccessoryVehicleSpeed,accepted,USPD,iOSTime,%.2lf,speed,%.2lf,speedUnc,%.2lf", *(double *)&v71 + (double)v70.i64[1], *(double *)&v67.i64[1], v68);
        if (*((char *)this + 2511) >= 0) {
          LOBYTE(v34) = v28;
        }
        else {
          uint64_t v34 = *((void *)this + 311);
        }
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v55, &v54, "%s", v29, v30, v31, v32, v33, v34);
      }
      raven::RavenPNTEstimator::HandleEvent(this, (const raven::UserSpeedEvent *)&v56);
    }
  }
  return 0;
}

int64x2_t sub_18E031634(int64x2_t *a1)
{
  a1->i64[1] = 0;
  a1[1].i64[0] = 0;
  a1->i64[0] = (uint64_t)&unk_1EDD13880;
  a1[1].i8[8] = 0;
  a1[2].i64[0] = 0;
  a1[2].i64[1] = 0;
  a1[3].i8[0] = 0;
  a1[3].i64[1] = 0;
  a1[4].i64[0] = 0;
  a1[4].i8[8] = 0;
  a1[5].i64[0] = 0;
  a1[5].i64[1] = 0;
  a1[6].i64[1] = 0;
  a1[7].i64[0] = 0;
  a1[6].i64[0] = 0x7FF8000000000000;
  a1[7].i8[8] = 0;
  a1[9].i8[0] = 0;
  a1[8].i64[0] = 0;
  a1[8].i64[1] = 0;
  a1[9].i64[1] = 0;
  a1[10].i64[0] = 0;
  a1[10].i8[8] = 0;
  a1[11].i64[0] = 0;
  a1[11].i64[1] = 0;
  a1[12].i64[0] = 0x7FF8000000000000;
  a1[12].i32[2] = 0;
  int64x2_t result = vdupq_n_s64(0x7FF8000000000000uLL);
  a1[13] = result;
  a1[14] = result;
  a1[15] = result;
  a1[16] = result;
  a1[17].i64[0] = 0x7FF8000000000000;
  a1[17].i8[8] = 0;
  a1[18] = result;
  a1[19] = result;
  a1[20] = result;
  a1[21] = result;
  a1[22].i64[0] = 0x7FF8000000000000;
  return result;
}

uint64_t sub_18E0316BC(uint64_t a1, uint64_t a2, int8x16_t a3, int8x16_t a4)
{
  if (!*(_DWORD *)(a1 + 204) || (uint64_t v5 = *(void *)(a1 + 240), v5 == *(void *)(a1 + 232)))
  {
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)a1) <= 1)
    {
      LOWORD(v20[0]) = 12;
      unsigned __int8 v21 = 1;
      uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
      double v19 = v13 + (double)v12;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v20, &v21, "t,%.2lf,AccessoryVehicleSpeed,rejected,0 speed samples", v14, v15, v16, v17, v18, SLOBYTE(v19));
    }
  }
  else
  {
    a4.i64[0] = 0x3F847AE147AE147BLL;
    if (*(double *)(v5 - 8) <= 0.01)
    {
      a3.i64[0] = *(void *)(*(void *)(a1 + 216) - 8);
      v20[0] = 0;
      v20[1] = 0;
      CNTimeSpan::SetTimeSpan(v20, 0, a3, a4);
      uint64_t v9 = CNTimeSpan::operator+(a1 + 104, v20, v7, v8);
      uint64_t result = 0;
      *(_OWORD *)(a2 + 24) = 0u;
      *(_OWORD *)(a2 + 40) = 0u;
      *(_OWORD *)(a2 + 56) = 0u;
      *(_OWORD *)(a2 + 72) = 0u;
      *(void *)(a2 + 8) = v9;
      *(void *)(a2 + 16) = v11;
      *(void *)(a2 + 88) = 0;
      *(void *)(a2 + 96) = 0x7FF8000000000000;
      *(_OWORD *)(a2 + 136) = *(_OWORD *)(a2 + 40);
      *(_OWORD *)(a2 + 152) = *(_OWORD *)(a2 + 56);
      *(_OWORD *)(a2 + 168) = *(_OWORD *)(a2 + 72);
      *(_OWORD *)(a2 + 184) = *(_OWORD *)(a2 + 88);
      *(_OWORD *)(a2 + 104) = *(_OWORD *)(a2 + 8);
      *(_OWORD *)(a2 + 120) = *(_OWORD *)(a2 + 24);
      *(void *)(a2 + 288) = 0;
      *(void *)(a2 + 296) = 0;
      *(void *)(a2 + 304) = 0;
      *(void *)(a2 + 312) = 0x3F1A36E2EB1C432DLL;
      *(void *)(a2 + 320) = 0;
      *(void *)(a2 + 328) = 0;
      *(_OWORD *)(a2 + 336) = xmmword_18E1FD700;
      *(void *)(a2 + 352) = 0x3F1A36E2EB1C432DLL;
      *(unsigned char *)(a2 + 280) = 1;
      return result;
    }
  }
  return 0xFFFFFFFFLL;
}

uint64_t sub_18E03183C(uint64_t a1, uint64_t a2, int8x16_t a3, int8x16_t a4)
{
  if (!*(_DWORD *)(a1 + 204) || *(void *)(a1 + 240) == *(void *)(a1 + 232))
  {
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)a1) <= 1)
    {
      LOWORD(__y[0]) = 12;
      unsigned __int8 v32 = 1;
      uint64_t v22 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
      double v30 = v23 + (double)v22;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)__y, &v32, "t,%.2lf,AccessoryVehicleSpeed,rejected,0 speed samples", v24, v25, v26, v27, v28, SLOBYTE(v30));
    }
    return 0xFFFFFFFFLL;
  }
  else
  {
    a3.i64[0] = *(void *)(*(void *)(a1 + 216) - 8);
    __y[0] = 0;
    __y[1] = 0;
    CNTimeSpan::SetTimeSpan(__y, 0, a3, a4);
    uint64_t v8 = CNTimeSpan::operator+(a1 + 104, __y, v6, v7);
    *(_OWORD *)(a2 + 24) = 0u;
    *(_OWORD *)(a2 + 40) = 0u;
    *(_OWORD *)(a2 + 56) = 0u;
    *(_OWORD *)(a2 + 72) = 0u;
    *(void *)(a2 + 8) = v8;
    *(void *)(a2 + 16) = v9;
    *(void *)(a2 + 88) = 0;
    *(void *)(a2 + 96) = 0x7FF8000000000000;
    double v10 = *(double *)(*(void *)(a1 + 240) - 8);
    double v11 = v10 * 0.1;
    if (v10 * 0.1 <= 0.5) {
      double v11 = 0.5;
    }
    double v12 = fmin(v11, 10.0);
    *(double *)(a2 + 104) = v10;
    *(double *)(a2 + 112) = v12;
    if (v10 <= 0.01) {
      return 0;
    }
    double v13 = modf(v10, (long double *)__y);
    uint64_t result = 0;
    if (v12 < 1.0 && v13 >= 0.0 && v13 <= 0.0)
    {
      *(double *)(a2 + 112) = v12 + 1.0;
      if (cnprint::CNPrinter::GetLogLevel(0) <= 1)
      {
        LOWORD(__y[0]) = 12;
        unsigned __int8 v32 = 1;
        uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
        double v29 = v16 + (double)v15;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)__y, &v32, "t,%.2lf,AccessoryVehicleSpeed,accepted, speed unc increased", v17, v18, v19, v20, v21, SLOBYTE(v29));
      }
      return 0;
    }
  }
  return result;
}

uint64_t raven::RavenPNTEstimator::HandleEvent(raven::RavenPNTEstimator *this, const raven::UserSpeedEvent *a2)
{
  if (!*((unsigned char *)this + 57) || !*((unsigned char *)this + 58)) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v34 = 0x100000003;
  *(void *)&long long v4 = 0x100000001;
  *((void *)&v4 + 1) = 0x100000001;
  long long v33 = v4;
  unsigned __int8 v32 = &unk_1EDD18D98;
  int8x16_t v35 = &v36;
  uint64_t v36 = *((void *)a2 + 13);
  uint64_t v29 = 0x300000003;
  long long v28 = v4;
  uint64_t v27 = &unk_1EDD18EE8;
  double v30 = &v31;
  double v31 = *((double *)a2 + 14) * *((double *)a2 + 14);
  long long v26 = *(_OWORD *)((char *)a2 + 8);
  sub_18E06BF24(v18, 26);
  v18[0] = &unk_1EDD14710;
  long long v20 = v26;
  uint64_t v21 = (char *)this + 2696;
  uint64_t v22 = (char *)this + 14600;
  double v23 = (char *)this + 14616;
  uint64_t v24 = (char *)this + 2536;
  uint64_t v25 = (char *)this + 2576;
  if (sub_18E04E124((uint64_t)this + 61288, (double *)&v26, (uint64_t)&v32, (uint64_t)&v27, (uint64_t)sub_18E04DB38, (uint64_t)v18))
  {
    __int16 v17 = 12;
    unsigned __int8 v16 = 4;
    v15[0] = (*(uint64_t (**)(const raven::UserSpeedEvent *))(*(void *)a2 + 16))(a2);
    v15[1] = v5;
    char v6 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)v15, "Could not add measurement - user speed");
    if (*((char *)this + 2511) >= 0) {
      LOBYTE(v12) = v6;
    }
    else {
      uint64_t v12 = *((void *)this + 311);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v17, &v16, "%s", v7, v8, v9, v10, v11, v12);
    uint64_t v13 = 0xFFFFFFFFLL;
  }
  else
  {
    uint64_t v13 = 0;
  }
  v18[0] = &unk_1EDD0A4E8;
  if (v19 < 0) {
    operator delete((void *)v18[2]);
  }
  return v13;
}

void sub_18E031C44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double raven::RavenPNTEstimator::HandleEvent(raven::RavenPNTEstimator *this, const raven::ActivityStateEvent *a2)
{
  int v4 = *((unsigned __int8 *)this + 2536);
  if (v4 == 1)
  {
    unsigned int v5 = *((unsigned __int8 *)a2 + 104);
    if ((((_BYTE)v5 - 4) & 0xFA) != 0 || (v5 <= 7 ? (BOOL v6 = v5 == 5) : (BOOL v6 = 1), !v6)) {
      raven::RavenPNTEstimator::SetStateParameterization((uint64_t)this);
    }
  }
  else if (v4 == 2)
  {
    __assert_rtn("HandleEvent", "ravenpntestimator.cpp", 1885, "false && \"Unexpected case RavenPNTEstimatorStateParameterization::ParameterizationCount\"");
  }

  *(void *)&double result = raven::RavenEstimator::HandleActivityStateEvent(this, a2).n128_u64[0];
  return result;
}

uint64_t raven::RavenPNTEstimator::SetStateParameterization(uint64_t a1)
{
  MEMORY[0x1F4188790](a1);
  int v3 = *v2;
  if (*(unsigned char *)(*(void *)(v1 + 1168) + 3820)) {
    BOOL v4 = 0;
  }
  else {
    BOOL v4 = v3 == 1;
  }
  if (v4) {
    return 0;
  }
  unsigned int v5 = v2;
  uint64_t v6 = v1;
  v49[0].i16[0] = 12;
  v45[0] = 2;
  uint64_t v7 = v1 + 2488;
  uint64_t v8 = v1 + 80;
  cnprint::CNLogFormatter::FormatGeneral(v1 + 2488, v1 + 80, "SetStateParameterization() attempting to update state parameterization from %hu to %hu.", *(unsigned __int8 *)(v1 + 2536), v3);
  if (*(char *)(v6 + 2511) >= 0) {
    LOBYTE(v14) = v7;
  }
  else {
    uint64_t v14 = *(void *)(v6 + 2488);
  }
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)v49, v45, "%s", v9, v10, v11, v12, v13, v14);
  if (*(unsigned __int8 *)(v6 + 2536) == *v5) {
    return 0;
  }
  if (*(unsigned char *)(v6 + 58))
  {
    sub_18E081E80((uint64_t)v141, v6 + 14616);
    uint64_t v138 = 0x10000001ALL;
    long long v137 = xmmword_18E1FD600;
    v136 = &unk_1EDD186A8;
    v139 = &v140;
    if (*(_DWORD *)(v6 + 16140)) {
      uint64_t v16 = v6 + 15584;
    }
    else {
      uint64_t v16 = v6 + 15040;
    }
    sub_18DFE2F24((uint64_t)&v136, v16);
    uint64_t v132 = 0x100000003;
    uint64_t v130 = &unk_1EDD18DC8;
    int8x16_t v133 = &v134;
    long long v131 = xmmword_18E1F6F60;
    int v135 = 2;
    uint64_t v134 = 0x100000000;
    uint64_t v126 = 0x100000003;
    double v124 = &unk_1EDD18DC8;
    long long v127 = &v128;
    long long v125 = xmmword_18E1F6F60;
    int v129 = 23;
    uint64_t v128 = 0x1600000015;
    uint64_t v120 = 0x100000003;
    unsigned int v118 = &unk_1EDD18DC8;
    uint64_t v121 = &v122;
    long long v119 = xmmword_18E1F6F60;
    int v123 = 27;
    uint64_t v122 = 0x1A00000019;
    uint64_t v114 = 0x100000003;
    double v112 = &unk_1EDD18DC8;
    int8x16_t v115 = &v116;
    long long v113 = xmmword_18E1F6F60;
    int v117 = 2;
    uint64_t v116 = 0x100000000;
    uint64_t v108 = 0x100000003;
    int8x16_t v106 = &unk_1EDD18DC8;
    int8x16_t v109 = &v110;
    long long v107 = xmmword_18E1F6F60;
    int v111 = 22;
    uint64_t v110 = 0x1500000014;
    v50.i64[1] = 0x1800000017;
    uint64_t v102 = 0x100000003;
    int8x16_t v100 = &unk_1EDD18DC8;
    int8x16_t v103 = &v104;
    long long v101 = xmmword_18E1F6F60;
    int v105 = 25;
    uint64_t v104 = 0x1800000017;
    double v17 = v142[6];
    double v18 = v142[7];
    double v19 = v142[8];
    double v20 = v142[9];
    double v21 = sqrt(v18 * v18 + v17 * v17 + v19 * v19 + v20 * v20);
    double v22 = 1.0;
    double v23 = 0.0;
    double v24 = 0.0;
    double v25 = 0.0;
    double v26 = 0.0;
    double v27 = 1.0;
    if (fabs(v21) >= 2.22044605e-16)
    {
      double v24 = v17 / v21;
      double v25 = v18 / v21;
      double v26 = v19 / v21;
      double v27 = v20 / v21;
    }
    *(double *)&v99[12] = v24;
    *(double *)&v99[13] = v25;
    *(double *)&v99[14] = v26;
    *(double *)&v99[15] = v27;
    double v28 = sqrt(v25 * v25 + v24 * v24 + v26 * v26 + v27 * v27);
    double v29 = 0.0;
    double v30 = 0.0;
    if (fabs(v28) >= 2.22044605e-16)
    {
      double v23 = -v24 / v28;
      double v29 = -v25 / v28;
      double v30 = -v26 / v28;
      double v22 = v27 / v28;
    }
    *(double *)&v99[8] = v23;
    *(double *)&v99[9] = v29;
    *(double *)&v99[10] = v30;
    *(double *)&v99[11] = v22;
    sub_18E06010C((uint64_t)v99, (uint64_t)v141, (uint64_t)&v130);
    sub_18E06010C((uint64_t)&v98, (uint64_t)v141, (uint64_t)&v124);
    sub_18E06010C((uint64_t)&v97, (uint64_t)v141, (uint64_t)&v118);
    uint64_t v31 = (uint64_t)v139;
    sub_18E060170((uint64_t)&v96, (uint64_t)v139, (uint64_t)&v112);
    sub_18E060170((uint64_t)&v95, v31, (uint64_t)&v106);
    sub_18E060170((uint64_t)&v94, v31, (uint64_t)&v100);
    uint64_t v91 = 0x10000001ALL;
    uint64_t v89 = &unk_1EDD186A8;
    int8x16_t v92 = &v93;
    long long v90 = xmmword_18E1FD600;
    sub_18DFE2CC8((uint64_t)&v89, 0.0);
    uint64_t v86 = 0x10000001CLL;
    uint64_t v84 = &unk_1EDD188B8;
    long long v85 = xmmword_18E1FD5F0;
    unsigned int v87 = &v88;
    v49[0] = vdupq_n_s64(0x7FF8000000000000uLL);
    v49[1] = v49[0];
    int64x2_t v50 = v49[0];
    int64x2_t v51 = v49[0];
    int64x2_t v52 = v49[0];
    int64x2_t v53 = v49[0];
    int64x2_t v54 = v49[0];
    int64x2_t v55 = v49[0];
    int64x2_t v56 = v49[0];
    int64x2_t v57 = v49[0];
    int64x2_t v58 = v49[0];
    int64x2_t v59 = v49[0];
    int64x2_t v60 = v49[0];
    int64x2_t v61 = v49[0];
    int64x2_t v62 = v49[0];
    int64x2_t v63 = v49[0];
    int64x2_t v64 = v49[0];
    int64x2_t v65 = v49[0];
    int64x2_t v66 = v49[0];
    int64x2_t v67 = v49[0];
    int64x2_t v68 = v49[0];
    int64x2_t v69 = v49[0];
    int64x2_t v70 = v49[0];
    int64x2_t v71 = v49[0];
    int64x2_t v72 = v49[0];
    int64x2_t v73 = v49[0];
    int64x2_t v74 = v49[0];
    int64x2_t v75 = v49[0];
    int64x2_t v76 = v49[0];
    int64x2_t v77 = v49[0];
    int64x2_t v78 = v49[0];
    int64x2_t v79 = v49[0];
    int64x2_t v80 = v49[0];
    int64x2_t v81 = v49[0];
    int64x2_t v82 = v49[0];
    uint64_t v83 = 0x7FF8000000000000;
    v45[0] = 0;
    if (!sub_18E06EC84((uint64_t)v141, (uint64_t)&v89, 0, 1, 1, (uint64_t)&v84, (uint64_t)v49, (BOOL *)v45, 0.000000015))
    {
      sub_18E081E80((uint64_t)v48, v6 + 14616);
      sub_18E07F6DC((uint64_t)v47, (uint64_t)&v136);
      sub_18E06E4BC((uint64_t)v46, 26, 26);
    }
    *(_WORD *)char v45 = 12;
    v48[0] = 4;
    cnprint::CNLogFormatter::FormatGeneral(v7, v8, "SetStateParameterization() failed; pre-transformation GetFullStateEstimate() failed.");
    if (*(char *)(v6 + 2511) >= 0) {
      LOBYTE(v37) = v7;
    }
    else {
      uint64_t v37 = *(void *)(v6 + 2488);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v45, v48, "%s", v32, v33, v34, v35, v36, v37);
  }
  else
  {
    v49[0].i16[0] = 12;
    v45[0] = 4;
    cnprint::CNLogFormatter::FormatGeneral(v7, v8, "SetStateParameterization() failed; estimator not initialized.");
    if (*(char *)(v6 + 2511) >= 0) {
      LOBYTE(v43) = v7;
    }
    else {
      uint64_t v43 = *(void *)(v6 + 2488);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v49, v45, "%s", v38, v39, v40, v41, v42, v43);
  }
  return 0xFFFFFFFFLL;
}

void sub_18E033418(_Unwind_Exception *a1)
{
}

uint64_t raven::RavenPNTEstimator::HandleEvent(raven::RavenPNTEstimator *this, const raven::AltitudeChangeEvent *a2)
{
  v95[4] = *(void (**)(uint64_t))MEMORY[0x1E4F143B8];
  if (!*((unsigned char *)this + 57)) {
    return 0xFFFFFFFFLL;
  }
  if (!*((unsigned char *)this + 58)) {
    return 0;
  }
  uint64_t v84 = 0x100000003;
  *(void *)&long long v4 = 0x100000001;
  *((void *)&v4 + 1) = 0x100000001;
  long long v83 = v4;
  int64x2_t v82 = &unk_1EDD18D98;
  long long v85 = &v86;
  uint64_t v86 = *((void *)a2 + 25);
  uint64_t v79 = 0x300000003;
  long long v78 = v4;
  int64x2_t v77 = &unk_1EDD18EE8;
  int64x2_t v80 = &v81;
  double v81 = *((double *)a2 + 26) * *((double *)a2 + 26);
  sub_18E06BF24(v69, 4);
  int64x2_t v75 = 0;
  long long v73 = 0u;
  long long v74 = 0u;
  v69[0] = &unk_1EDD15988;
  uint64_t v71 = (*(uint64_t (**)(const raven::AltitudeChangeEvent *))(*(void *)a2 + 16))(a2);
  uint64_t v72 = v5;
  unsigned int v87 = (void *)(*(uint64_t (**)(const raven::AltitudeChangeEvent *))(*(void *)a2 + 16))(a2);
  uint64_t v88 = v6;
  uint64_t v9 = CNTimeSpan::operator-((uint64_t)&v87, (void *)a2 + 13, v7, v8);
  double v76 = v10 + (double)v9;
  *(void *)&long long v73 = (char *)this + 2696;
  *((void *)&v73 + 1) = (char *)this + 14600;
  *(void *)&long long v74 = (char *)this + 14616;
  *((void *)&v74 + 1) = (char *)this + 2536;
  int64x2_t v75 = (char *)this + 2576;
  uint64_t v12 = (*(uint64_t (**)(const raven::AltitudeChangeEvent *))(*(void *)a2 + 16))(a2);
  *(void *)&long long v68 = v12;
  *((double *)&v68 + 1) = v11;
  if ((v78 & 0x80000000) != 0) {
    __assert_rtn("Zeros", "cnmatrix.h", 3098, "nr >= 0");
  }
  uint64_t v91 = 0x100000003;
  unsigned int v87 = &unk_1EDD18D98;
  int8x16_t v92 = &v93;
  uint64_t v13 = (char *)this + 61288;
  double v14 = v11;
  uint64_t v88 = v78 | 0x100000000;
  int v89 = v78;
  int v90 = v78;
  uint64_t v15 = (cnprint::CNPrinter *)sub_18DFE2CC8((uint64_t)&v87, 0.0);
  if (*((unsigned char *)this + 61288))
  {
    if (*((_DWORD *)this + 16806) == 174)
    {
      LOWORD(v95[0]) = 2;
      unsigned __int8 v94 = 2;
      double v64 = v14 + (double)v12;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v95, &v94, "MeasurementAccumulator::AddMeasurement() failed - Out of space,t_meas,%.3lf", v16, v17, v18, v19, v20, SLOBYTE(v64));
    }
    else if (*((unsigned char *)this + 61289))
    {
      if (cnprint::CNPrinter::GetLogLevel(v15) <= 1)
      {
        LOWORD(v95[0]) = 2;
        unsigned __int8 v94 = 1;
        double v66 = v14 + (double)v12;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v95, &v94, "MeasurementAccumulator::AddMeasurement() failed - Locked,t_meas,%.3lf", v27, v28, v29, v30, v31, SLOBYTE(v66));
      }
    }
    else
    {
      BOOL v32 = sub_18DEE4CB8((double *)&v68, (double *)this + 7662);
      if (v32)
      {
        if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v32) <= 1)
        {
          LOWORD(v95[0]) = 2;
          unsigned __int8 v94 = 1;
          double v67 = *((double *)&v68 + 1) + (double)(uint64_t)v68;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)v95, &v94, "MeasurementAccumulator::AddMeasurement() failed - Measurement too old,t_meas,%.3lf,t_start,%.3lf", v33, v34, v35, v36, v37, SLOBYTE(v67));
        }
      }
      else
      {
        v95[0] = 0;
        v95[1] = 0;
        sub_18E071CA4(v95, (uint64_t)v69);
        uint64_t v38 = sub_18E06C110((uint64_t *)this + 7666, v95);
        sub_18E067C60((uint64_t (**)(void, void, void, void, void))v95);
        uint64_t v39 = *((int *)this + 16806);
        uint64_t v40 = (v39 + 1);
        if (*((void *)this + 7668) == v40)
        {
          *((_DWORD *)this + 16806) = v40;
          *((_DWORD *)this + 15340) = v40;
          *((_DWORD *)this + 15341) = 1;
          *((_DWORD *)this + 15342) = v40;
          *((_DWORD *)this + 15343) = v40;
          *((_DWORD *)this + 16046) = v40;
          *((_DWORD *)this + 16047) = 1;
          *((_DWORD *)this + 16048) = v40;
          *((_DWORD *)this + 16049) = v40;
          *((_DWORD *)this + 16230) = v40;
          *((_DWORD *)this + 16231) = 1;
          *((_DWORD *)this + 16232) = v40;
          *((_DWORD *)this + 16233) = v40;
          *((_DWORD *)this + 16588) = v40;
          *((_DWORD *)this + 16589) = 1;
          *((_DWORD *)this + 16590) = v40;
          *((_DWORD *)this + 16591) = v40;
          *((_DWORD *)this + 16600) = v40;
          *((_DWORD *)this + 16601) = 1;
          *((_DWORD *)this + 16602) = v40;
          *((_DWORD *)this + 16603) = v40;
          *((_DWORD *)this + 16784) = v40;
          *((_DWORD *)this + 16785) = 1;
          *((_DWORD *)this + 16786) = v40;
          *((_DWORD *)this + 16787) = v40;
          *((_DWORD *)this + 16796) = v40;
          *((_DWORD *)this + 16797) = 1;
          *((_DWORD *)this + 16798) = v40;
          *((_DWORD *)this + 16799) = v40;
          *((_DWORD *)this + 16810) = v40;
          *((_DWORD *)this + 16811) = 1;
          *((_DWORD *)this + 16812) = v40;
          *((_DWORD *)this + 16813) = v40;
          *((_DWORD *)this + 17168) = v40;
          *((_DWORD *)this + 17169) = 1;
          *((_DWORD *)this + 17170) = v40;
          *((_DWORD *)this + 17171) = v40;
          *(_OWORD *)(*((void *)this + 7673) + 16 * v39) = v68;
          if (v83 <= DWORD1(v83)) {
            int v41 = DWORD1(v83);
          }
          else {
            int v41 = v83;
          }
          if (DWORD1(v83)) {
            BOOL v42 = v83 == 0;
          }
          else {
            BOOL v42 = 1;
          }
          if (v42) {
            int v43 = 0;
          }
          else {
            int v43 = v41;
          }
          *(_DWORD *)(*((void *)this + 8026) + 4 * v39) = v43;
          sub_18DFE2F24(*((void *)this + 8297) + (v39 << 6), (uint64_t)&v82);
          if (v88 <= HIDWORD(v88)) {
            int v44 = HIDWORD(v88);
          }
          else {
            int v44 = v88;
          }
          if (HIDWORD(v88)) {
            BOOL v45 = v88 == 0;
          }
          else {
            BOOL v45 = 1;
          }
          if (v45) {
            int v46 = 0;
          }
          else {
            int v46 = v44;
          }
          *(_DWORD *)(*((void *)this + 8303) + 4 * v39) = v46;
          sub_18DFE2F24(*((void *)this + 8395) + (v39 << 6), (uint64_t)&v87);
          __n128 v47 = sub_18DFE2F24(*((void *)this + 8401) + 112 * (int)v39, (uint64_t)&v77);
          *(void *)(*((void *)this + 8408) + 8 * v39) = sub_18E033E0C;
          if (*v38) {
            uint64_t v48 = ((uint64_t (*)(uint64_t, void *, void, void *, void *, __n128))*v38)(3, v38, 0, &unk_1EDD05DF0, &std::__any_imp::__unique_typeinfo<raven::h_DeviceAltitudeChangeArgs_RavenPNT<double>>::__id, v47);
          }
          else {
            uint64_t v48 = 0;
          }
          uint64_t v21 = 0;
          *(void *)(*((void *)v13 + 926) + 8 * v39) = v48;
          goto LABEL_43;
        }
        LOWORD(v95[0]) = 2;
        unsigned __int8 v94 = 4;
        char v49 = (*(uint64_t (**)(void *))(v69[0] + 16))(v69);
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v95, &v94, "MeasurementAccumulator::AddMeasurement() failed - allocation failed,meas_type,%d,t_meas,%.3lf", v50, v51, v52, v53, v54, v49);
      }
    }
  }
  else if (cnprint::CNPrinter::GetLogLevel(v15) <= 1)
  {
    LOWORD(v95[0]) = 2;
    unsigned __int8 v94 = 1;
    double v65 = v14 + (double)v12;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v95, &v94, "MeasurementAccumulator::AddMeasurement() failed - Not initialized,t_meas,%.3lf", v22, v23, v24, v25, v26, SLOBYTE(v65));
  }
  LOWORD(v95[0]) = 12;
  unsigned __int8 v94 = 4;
  unsigned int v87 = (void *)(*(uint64_t (**)(const raven::AltitudeChangeEvent *))(*(void *)a2 + 16))(a2);
  uint64_t v88 = v55;
  char v56 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)&v87, "Could not add measurement - device attitude change");
  if (*((char *)this + 2511) >= 0) {
    LOBYTE(v62) = v56;
  }
  else {
    uint64_t v62 = *((void *)this + 311);
  }
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)v95, &v94, "%s", v57, v58, v59, v60, v61, v62);
  uint64_t v21 = 0xFFFFFFFFLL;
LABEL_43:
  v69[0] = &unk_1EDD0A4E8;
  if (v70 < 0) {
    operator delete((void *)v69[2]);
  }
  return v21;
}

void sub_18E033D9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2) {
    sub_18DEDD524(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_18E033E0C(uint64_t a1)
{
  MEMORY[0x1F4188790](a1);
  v84[276] = *MEMORY[0x1E4F143B8];
  if (v3
    && (uint64_t v9 = v2,
        uint64_t v10 = v1,
        (double v11 = (char *)__dynamic_cast(v3, (const struct __class_type_info *)&unk_1EDD02A78, (const struct __class_type_info *)&unk_1EDD05DF0, 0)) != 0))
  {
    uint64_t v12 = v11;
    unsigned int v14 = *(_DWORD *)(v10 + 8);
    unsigned int v13 = *(_DWORD *)(v10 + 12);
    if (v14 <= v13) {
      int v15 = *(_DWORD *)(v10 + 12);
    }
    else {
      int v15 = *(_DWORD *)(v10 + 8);
    }
    if (v14
      && v13
      && v15 == 26
      && ((v17 = *(_DWORD *)(v9 + 8), unsigned int v16 = *(_DWORD *)(v9 + 12), v17 <= v16)
        ? (int v18 = *(_DWORD *)(v9 + 12))
        : (int v18 = *(_DWORD *)(v9 + 8)),
          v17 && v16 && v18 == 1 && *((void *)v11 + 7)))
    {
      long long v79 = *(_OWORD *)(v11 + 40);
      uint64_t v19 = *((void *)v11 + 9);
      long long v78 = *(_OWORD *)*((void *)v11 + 8);
      sub_18E07FB20((uint64_t)&v76, v19);
      uint64_t v20 = *((void *)v12 + 7);
      uint64_t v73 = 0x10000001CLL;
      long long v72 = xmmword_18E1FD5F0;
      uint64_t v71 = &unk_1EDD188B8;
      long long v74 = &v75;
      if (sub_18E06B85C((uint64_t)&v79, (uint64_t)&v78, v77, v20, *((void *)v12 + 11), (uint64_t)&v71))
      {
        LOWORD(v61[0]) = 12;
        LOBYTE(v80) = 4;
        double v28 = *((double *)v12 + 6) + (double)*((uint64_t *)v12 + 5);
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v61, (unsigned __int8 *)&v80, "time,%.3lf,h-function failure on line %d: %s() %s", v21, v22, v23, v24, v25, SLOBYTE(v28));
      }
      else
      {
        v26.i64[0] = *((void *)v12 + 12);
        if (*(double *)v26.i64 <= 0.0)
        {
          sub_18E06B804((uint64_t)(v12 + 40), (uint64_t)"invalid time interval", (uint64_t)"h_DeviceAltitudeChange_RavenPNT", 2229, v22, v23, v24, v25);
        }
        else
        {
          v61[1] = 0;
          v61[0] = 0;
          CNTimeSpan::SetTimeSpan(v61, 0, v26, v27);
          *(void *)&long long v70 = CNTimeSpan::operator-((uint64_t)&v79, v61, v31, v32);
          *((void *)&v70 + 1) = v33;
          uint64_t v67 = 0x10000001CLL;
          double v65 = &unk_1EDD188B8;
          long long v66 = xmmword_18E1FD5F0;
          long long v68 = &v69;
          if (sub_18E06B85C((uint64_t)&v70, (uint64_t)&v78, v77, v20, *((void *)v12 + 11), (uint64_t)&v65))
          {
            sub_18E06B804((uint64_t)(v12 + 40), (uint64_t)"could not integrate full states", (uint64_t)"h_DeviceAltitudeChange_RavenPNT", 2238, v34, v35, v36, v37);
          }
          else
          {
            sub_18E0618EC((uint64_t)v61);
            char v62 = 0;
            v61[0] = (uint64_t)&unk_1EDD14C50;
            long long v63 = 0u;
            long long v64 = 0u;
            sub_18E028F24((uint64_t)v60);
            if (sub_18E070DF0(v20, (uint64_t)v60))
            {
              uint64_t v42 = 2250;
              int v43 = "could not get integrator configuration";
            }
            else
            {
              if (!sub_18E02AA54((uint64_t)v61, (uint64_t)v60))
              {
                uint64_t v55 = v61;
                char v56 = &v79;
                uint64_t v44 = *((void *)v12 + 11);
                uint64_t v57 = &v71;
                uint64_t v58 = v44;
                long long v59 = v70;
                uint64_t v82 = 0x1A00000001;
                int64x2_t v80 = &unk_1EDD18168;
                long long v83 = v84;
                long long v81 = xmmword_18E1FD710;
                for (uint64_t i = 10; i != 28; ++i)
                  *((_DWORD *)&v80 + i) = i - 10;
                sub_18E058650((uint64_t)v54, (uint64_t)&v80);
                sub_18E070E60((uint64_t)v53, 15);
                uint64_t v50 = 0x10000001ALL;
                uint64_t v48 = &unk_1EDD186A8;
                long long v49 = xmmword_18E1FD600;
                uint64_t v51 = &v52;
                sub_18E06E85C((uint64_t)v47);
              }
              uint64_t v42 = 2255;
              int v43 = "could not set integrator configuration";
            }
            sub_18E06B804((uint64_t)(v12 + 40), (uint64_t)v43, (uint64_t)"h_DeviceAltitudeChange_RavenPNT", v42, v38, v39, v40, v41);
            sub_18E026798((uint64_t)v61);
          }
        }
      }
    }
    else
    {
      LOWORD(v61[0]) = 12;
      LOBYTE(v80) = 4;
      double v29 = *((double *)v11 + 6) + (double)*((uint64_t *)v11 + 5);
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v61, (unsigned __int8 *)&v80, "time,%.3lf,h-function failure on line %d: %s() %s", v4, v5, v6, v7, v8, SLOBYTE(v29));
    }
  }
  else
  {
    LOWORD(v61[0]) = 12;
    LOBYTE(v80) = 4;
    double v46 = MEMORY[0x30] + (double)MEMORY[0x28];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v61, (unsigned __int8 *)&v80, "time,%.3lf,h-function failure on line %d: %s() %s", v4, v5, v6, v7, v8, SLOBYTE(v46));
  }
  return 0xFFFFFFFFLL;
}

void sub_18E034760(_Unwind_Exception *a1)
{
}

uint64_t sub_18E0347F4(uint64_t a1)
{
  *(void *)a1 = &unk_1EDD0A4E8;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

uint64_t raven::RavenPNTEstimator::HandleEvent(raven::RavenPNTEstimator *this, const raven::AltitudeEvent *a2)
{
  v88[4] = *(void (**)(uint64_t))MEMORY[0x1E4F143B8];
  if (!*((unsigned char *)this + 57)) {
    return 0xFFFFFFFFLL;
  }
  if (!*((unsigned char *)this + 58)
    || *((unsigned char *)this + 2536) == 1
    && *((unsigned char *)this + 1776)
    && *((unsigned __int8 *)this + 1888) - 1 < 2)
  {
    return 0;
  }
  uint64_t v77 = 0x100000003;
  *(void *)&long long v5 = 0x100000001;
  *((void *)&v5 + 1) = 0x100000001;
  long long v76 = v5;
  uint64_t v75 = &unk_1EDD18D98;
  long long v78 = &v79;
  uint64_t v79 = *((void *)a2 + 13);
  uint64_t v72 = 0x300000003;
  long long v71 = v5;
  long long v70 = &unk_1EDD18EE8;
  uint64_t v73 = &v74;
  double v74 = *((double *)a2 + 14) * *((double *)a2 + 14);
  uint64_t v6 = (*(uint64_t (**)(const raven::AltitudeEvent *))(*(void *)a2 + 16))(a2);
  double v8 = v7;
  *(void *)&long long v69 = v6;
  *((double *)&v69 + 1) = v7;
  sub_18E06BF24(v62, 25);
  uint64_t v67 = 0;
  long long v65 = 0u;
  long long v66 = 0u;
  v62[0] = &unk_1EDD14D40;
  long long v64 = v69;
  uint64_t v68 = *(void *)(*((void *)this + 146) + 80);
  *(void *)&long long v65 = (char *)this + 2696;
  *((void *)&v65 + 1) = (char *)this + 14600;
  *(void *)&long long v66 = (char *)this + 14616;
  *((void *)&v66 + 1) = (char *)this + 2536;
  uint64_t v67 = (char *)this + 2576;
  if ((v71 & 0x80000000) != 0) {
    __assert_rtn("Zeros", "cnmatrix.h", 3098, "nr >= 0");
  }
  uint64_t v84 = 0x100000003;
  int64x2_t v80 = &unk_1EDD18D98;
  long long v85 = &v86;
  uint64_t v9 = (char *)this + 61288;
  uint64_t v81 = v71 | 0x100000000;
  int v82 = v71;
  int v83 = v71;
  uint64_t v10 = (cnprint::CNPrinter *)sub_18DFE2CC8((uint64_t)&v80, 0.0);
  if (*((unsigned char *)this + 61288))
  {
    if (*((_DWORD *)this + 16806) == 174)
    {
      LOWORD(v88[0]) = 2;
      unsigned __int8 v87 = 2;
      double v58 = v8 + (double)v6;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v88, &v87, "MeasurementAccumulator::AddMeasurement() failed - Out of space,t_meas,%.3lf", v11, v12, v13, v14, v15, SLOBYTE(v58));
    }
    else if (*((unsigned char *)this + 61289))
    {
      if (cnprint::CNPrinter::GetLogLevel(v10) <= 1)
      {
        LOWORD(v88[0]) = 2;
        unsigned __int8 v87 = 1;
        double v60 = v8 + (double)v6;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v88, &v87, "MeasurementAccumulator::AddMeasurement() failed - Locked,t_meas,%.3lf", v21, v22, v23, v24, v25, SLOBYTE(v60));
      }
    }
    else
    {
      BOOL v26 = sub_18DEE4CB8((double *)&v69, (double *)this + 7662);
      if (v26)
      {
        if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v26) <= 1)
        {
          LOWORD(v88[0]) = 2;
          unsigned __int8 v87 = 1;
          double v61 = *((double *)&v69 + 1) + (double)(uint64_t)v69;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)v88, &v87, "MeasurementAccumulator::AddMeasurement() failed - Measurement too old,t_meas,%.3lf,t_start,%.3lf", v27, v28, v29, v30, v31, SLOBYTE(v61));
        }
      }
      else
      {
        v88[0] = 0;
        v88[1] = 0;
        sub_18E071FF4(v88, (uint64_t)v62);
        int8x16_t v32 = sub_18E06C110((uint64_t *)this + 7666, v88);
        sub_18E067C60((uint64_t (**)(void, void, void, void, void))v88);
        uint64_t v33 = *((int *)this + 16806);
        uint64_t v34 = (v33 + 1);
        if (*((void *)this + 7668) == v34)
        {
          *((_DWORD *)this + 16806) = v34;
          *((_DWORD *)this + 15340) = v34;
          *((_DWORD *)this + 15341) = 1;
          *((_DWORD *)this + 15342) = v34;
          *((_DWORD *)this + 15343) = v34;
          *((_DWORD *)this + 16046) = v34;
          *((_DWORD *)this + 16047) = 1;
          *((_DWORD *)this + 16048) = v34;
          *((_DWORD *)this + 16049) = v34;
          *((_DWORD *)this + 16230) = v34;
          *((_DWORD *)this + 16231) = 1;
          *((_DWORD *)this + 16232) = v34;
          *((_DWORD *)this + 16233) = v34;
          *((_DWORD *)this + 16588) = v34;
          *((_DWORD *)this + 16589) = 1;
          *((_DWORD *)this + 16590) = v34;
          *((_DWORD *)this + 16591) = v34;
          *((_DWORD *)this + 16600) = v34;
          *((_DWORD *)this + 16601) = 1;
          *((_DWORD *)this + 16602) = v34;
          *((_DWORD *)this + 16603) = v34;
          *((_DWORD *)this + 16784) = v34;
          *((_DWORD *)this + 16785) = 1;
          *((_DWORD *)this + 16786) = v34;
          *((_DWORD *)this + 16787) = v34;
          *((_DWORD *)this + 16796) = v34;
          *((_DWORD *)this + 16797) = 1;
          *((_DWORD *)this + 16798) = v34;
          *((_DWORD *)this + 16799) = v34;
          *((_DWORD *)this + 16810) = v34;
          *((_DWORD *)this + 16811) = 1;
          *((_DWORD *)this + 16812) = v34;
          *((_DWORD *)this + 16813) = v34;
          *((_DWORD *)this + 17168) = v34;
          *((_DWORD *)this + 17169) = 1;
          *((_DWORD *)this + 17170) = v34;
          *((_DWORD *)this + 17171) = v34;
          *(_OWORD *)(*((void *)this + 7673) + 16 * v33) = v69;
          if (v76 <= DWORD1(v76)) {
            int v35 = DWORD1(v76);
          }
          else {
            int v35 = v76;
          }
          if (DWORD1(v76)) {
            BOOL v36 = v76 == 0;
          }
          else {
            BOOL v36 = 1;
          }
          if (v36) {
            int v37 = 0;
          }
          else {
            int v37 = v35;
          }
          *(_DWORD *)(*((void *)this + 8026) + 4 * v33) = v37;
          sub_18DFE2F24(*((void *)this + 8297) + (v33 << 6), (uint64_t)&v75);
          if (v81 <= HIDWORD(v81)) {
            int v38 = HIDWORD(v81);
          }
          else {
            int v38 = v81;
          }
          if (HIDWORD(v81)) {
            BOOL v39 = v81 == 0;
          }
          else {
            BOOL v39 = 1;
          }
          if (v39) {
            int v40 = 0;
          }
          else {
            int v40 = v38;
          }
          *(_DWORD *)(*((void *)this + 8303) + 4 * v33) = v40;
          sub_18DFE2F24(*((void *)this + 8395) + (v33 << 6), (uint64_t)&v80);
          __n128 v41 = sub_18DFE2F24(*((void *)this + 8401) + 112 * (int)v33, (uint64_t)&v70);
          *(void *)(*((void *)this + 8408) + 8 * v33) = sub_18E034F08;
          if (*v32) {
            uint64_t v42 = ((uint64_t (*)(uint64_t, void *, void, void *, void *, __n128))*v32)(3, v32, 0, &unk_1EDD058F8, &std::__any_imp::__unique_typeinfo<raven::h_UserAltitudeArgs_RavenPNT<double>>::__id, v41);
          }
          else {
            uint64_t v42 = 0;
          }
          uint64_t v4 = 0;
          *(void *)(*((void *)v9 + 926) + 8 * v33) = v42;
          goto LABEL_46;
        }
        LOWORD(v88[0]) = 2;
        unsigned __int8 v87 = 4;
        char v43 = (*(uint64_t (**)(void *))(v62[0] + 16))(v62);
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v88, &v87, "MeasurementAccumulator::AddMeasurement() failed - allocation failed,meas_type,%d,t_meas,%.3lf", v44, v45, v46, v47, v48, v43);
      }
    }
  }
  else if (cnprint::CNPrinter::GetLogLevel(v10) <= 1)
  {
    LOWORD(v88[0]) = 2;
    unsigned __int8 v87 = 1;
    double v59 = v8 + (double)v6;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v88, &v87, "MeasurementAccumulator::AddMeasurement() failed - Not initialized,t_meas,%.3lf", v16, v17, v18, v19, v20, SLOBYTE(v59));
  }
  LOWORD(v88[0]) = 12;
  unsigned __int8 v87 = 4;
  int64x2_t v80 = (void *)(*(uint64_t (**)(const raven::AltitudeEvent *))(*(void *)a2 + 16))(a2);
  uint64_t v81 = v49;
  char v50 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)&v80, "Could not add measurement - user altitude");
  if (*((char *)this + 2511) >= 0) {
    LOBYTE(v56) = v50;
  }
  else {
    uint64_t v56 = *((void *)this + 311);
  }
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)v88, &v87, "%s", v51, v52, v53, v54, v55, v56);
  uint64_t v4 = 0xFFFFFFFFLL;
LABEL_46:
  v62[0] = &unk_1EDD0A4E8;
  if (v63 < 0) {
    operator delete((void *)v62[2]);
  }
  return v4;
}

void sub_18E034EA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a2) {
    sub_18DEDD524(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_18E034F08(uint64_t a1, uint64_t a2, void *lpsrc, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v105 = *MEMORY[0x1E4F143B8];
  if (!lpsrc
    || (uint64_t v13 = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EDD02A78, (const struct __class_type_info *)&unk_1EDD058F8, 0)) == 0)
  {
    *(_WORD *)long long v65 = 12;
    v99[0] = 4;
    double v55 = MEMORY[0x30] + (double)MEMORY[0x28];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v65, v99, "time,%.3lf,h-function failure on line %d: %s() %s", a4, a5, a6, a7, a8, SLOBYTE(v55));
    return 0xFFFFFFFFLL;
  }
  uint64_t v14 = v13;
  if (!*((void *)v13 + 7)
    || ((v16 = *(_DWORD *)(a1 + 8), unsigned int v15 = *(_DWORD *)(a1 + 12), v16 <= v15)
      ? (int v17 = *(_DWORD *)(a1 + 12))
      : (int v17 = *(_DWORD *)(a1 + 8)),
        !v16
     || !v15
     || v17 != 26
     || ((v19 = *(_DWORD *)(a2 + 8), unsigned int v18 = *(_DWORD *)(a2 + 12), v19 <= v18)
       ? (int v20 = *(_DWORD *)(a2 + 12))
       : (int v20 = *(_DWORD *)(a2 + 8)),
         !v19 || !v18 || v20 != 1)))
  {
    *(_WORD *)long long v65 = 12;
    v99[0] = 4;
    double v24 = *((double *)v13 + 6) + (double)*((uint64_t *)v13 + 5);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v65, v99, "time,%.3lf,h-function failure on line %d: %s() %s", a4, a5, a6, a7, a8, SLOBYTE(v24));
    return 0xFFFFFFFFLL;
  }
  long long v101 = *(_OWORD *)(v13 + 40);
  uint64_t v21 = *((void *)v13 + 9);
  long long v100 = *(_OWORD *)*((void *)v13 + 8);
  sub_18E07FB20((uint64_t)v99, v21);
  int v22 = **((unsigned __int8 **)v14 + 10);
  double v23 = *((double *)v14 + 12);
  uint64_t v96 = 0x10000001CLL;
  long long v95 = xmmword_18E1FD5F0;
  unsigned __int8 v94 = &unk_1EDD188B8;
  uint64_t v97 = &v98;
  if (v22)
  {
    if (v22 != 1)
    {
      if (v22 == 2) {
        __assert_rtn("h_UserAltitude_RavenPNT", "ravenmeasurementfunctions.h", 6786, "false && \"Unexpected case RavenPNTEstimatorStateParameterization::ParameterizationCount\"");
      }
      goto LABEL_30;
    }
    if (!sub_18E0786E0((uint64_t)&v101, &v100, (uint64_t)v99, *((void *)v14 + 7), *((void *)v14 + 11), 1, 1, 1, (uint64_t)&v94))goto LABEL_30; {
    *(_WORD *)long long v65 = 12;
    }
    LOBYTE(v56) = 4;
    double v31 = *((double *)v14 + 6) + (double)*((uint64_t *)v14 + 5);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v65, (unsigned __int8 *)&v56, "time,%.3lf,h-function failure on line %d: %s() %s", v26, v27, v28, v29, v30, SLOBYTE(v31));
    return 0xFFFFFFFFLL;
  }
  uint64_t v58 = 0x100000007;
  uint64_t v56 = &unk_1EDD197E8;
  long long v57 = xmmword_18E1FD680;
  double v59 = (double *)&v60;
  if (sub_18E06C3A8((uint64_t)&v101, &v100, (uint64_t)v99, 0, (uint64_t)&v56))
  {
    *(_WORD *)long long v65 = 12;
    LOBYTE(v89) = 4;
    double v37 = *((double *)v14 + 6) + (double)*((uint64_t *)v14 + 5);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v65, (unsigned __int8 *)&v89, "time,%.3lf,h-function failure on line %d: %s() %s", v32, v33, v34, v35, v36, SLOBYTE(v37));
    return 0xFFFFFFFFLL;
  }
  *(void *)&v65[24] = 0x700000001;
  *(void *)long long v65 = &unk_1EDD183A8;
  *(void *)&v66[0] = (char *)v66 + 8;
  *(_OWORD *)&v65[8] = xmmword_18E1FD690;
  for (uint64_t i = 10; i != 17; ++i)
    *(_DWORD *)&v65[4 * i] = i + 11;
  sub_18E05B904((uint64_t)&v89, (uint64_t)v65);
  sub_18E06CE44((uint64_t)v65, (uint64_t)&v94, (uint64_t)&v89);
  sub_18E06C83C((uint64_t)v65, SDWORD2(v57), v59);
LABEL_30:
  uint64_t v91 = 0x100000007;
  long long v90 = xmmword_18E1FD680;
  int v89 = &unk_1EDD197E8;
  int8x16_t v92 = (float64x2_t *)&v93;
  *(int64x2_t *)long long v65 = vdupq_n_s64(0x7FF8000000000000uLL);
  *(_OWORD *)&v65[16] = *(_OWORD *)v65;
  v66[0] = *(_OWORD *)v65;
  v66[1] = *(_OWORD *)v65;
  void v66[2] = *(_OWORD *)v65;
  v66[3] = *(_OWORD *)v65;
  v66[4] = *(_OWORD *)v65;
  v66[5] = *(_OWORD *)v65;
  v66[6] = *(_OWORD *)v65;
  v66[7] = *(_OWORD *)v65;
  v66[8] = *(_OWORD *)v65;
  v66[9] = *(_OWORD *)v65;
  v66[10] = *(_OWORD *)v65;
  v66[11] = *(_OWORD *)v65;
  long long v67 = *(_OWORD *)v65;
  long long v68 = *(_OWORD *)v65;
  long long v69 = *(_OWORD *)v65;
  long long v70 = *(_OWORD *)v65;
  long long v71 = *(_OWORD *)v65;
  long long v72 = *(_OWORD *)v65;
  long long v73 = *(_OWORD *)v65;
  long long v74 = *(_OWORD *)v65;
  long long v75 = *(_OWORD *)v65;
  long long v76 = *(_OWORD *)v65;
  long long v77 = *(_OWORD *)v65;
  long long v78 = *(_OWORD *)v65;
  long long v79 = *(_OWORD *)v65;
  long long v80 = *(_OWORD *)v65;
  long long v81 = *(_OWORD *)v65;
  long long v82 = *(_OWORD *)v65;
  long long v83 = *(_OWORD *)v65;
  long long v84 = *(_OWORD *)v65;
  long long v85 = *(_OWORD *)v65;
  long long v86 = *(_OWORD *)v65;
  long long v87 = *(_OWORD *)v65;
  uint64_t v88 = 0x7FF8000000000000;
  LOBYTE(v56) = 0;
  if (sub_18E06F128((uint64_t)&v94, a1, v22, (uint64_t)&v89, (uint64_t)v65, (BOOL *)&v56, 0.000000015))
  {
    LOWORD(v56) = 12;
    v61[0] = 4;
    double v44 = *((double *)v14 + 6) + (double)*((uint64_t *)v14 + 5);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v56, v61, "time,%.3lf,h-function failure on line %d: %s() %s", v39, v40, v41, v42, v43, SLOBYTE(v44));
    return 0xFFFFFFFFLL;
  }
  float64x2_t v103 = *v92;
  float64_t v104 = v92[1].f64[0];
  if (cnnavigation::ECEFToLLA(&v103, 1, v102, 1, (uint64_t)v61))
  {
    sub_18E06B804((uint64_t)(v14 + 40), (uint64_t)"coordinate conversion error", (uint64_t)"h_UserAltitude_RavenPNT", 6810, v45, v46, v47, v48);
    return 0xFFFFFFFFLL;
  }
  *(void *)&long long v49 = 0x100000001;
  *((void *)&v49 + 1) = 0x100000001;
  *(_OWORD *)(a4 + 8) = v49;
  **(double **)(a4 + 32) = v102[2] - v23 + **(double **)(a2 + 32);
  sub_18E0713D0((uint64_t)&v56);
  sub_18DFE2F24(a5, (uint64_t)&v56);
  double v50 = v62;
  double v51 = v63;
  uint64_t v52 = *(double **)(a5 + 32);
  *uint64_t v52 = v62 * *((double *)&v67 + 1);
  uint64_t v53 = *(int *)(a5 + 20);
  v52[v53] = v51 * *(double *)&v71;
  double v54 = v64;
  v52[2 * v53] = v64 * *((double *)&v74 + 1);
  v52[6 * (int)v53] = v51 * *((double *)&v71 + 1) + v50 * *(double *)&v68 + v54 * *(double *)&v75;
  v52[7 * (int)v53] = v51 * *(double *)&v72 + v50 * *((double *)&v68 + 1) + v54 * *((double *)&v75 + 1);
  v52[8 * v53] = v51 * *((double *)&v72 + 1) + v50 * *(double *)&v69 + v54 * *(double *)&v76;
  v52[20 * (int)v53] = v51 * *(double *)&v73 + v50 * *((double *)&v69 + 1) + v54 * *((double *)&v76 + 1);
  v52[21 * (int)v53] = v51 * *((double *)&v73 + 1) + v50 * *(double *)&v70 + v54 * *(double *)&v77;
  v52[22 * (int)v53] = v51 * *(double *)&v74 + v50 * *((double *)&v70 + 1) + v54 * *((double *)&v77 + 1);
  sub_18E071E98(1u, 1u, (uint64_t)&v56);
  sub_18DFE2F24(a6, (uint64_t)&v56);
  return 0;
}

uint64_t sub_18E035678(uint64_t a1)
{
  *(void *)a1 = &unk_1EDD0A4E8;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

uint64_t raven::RavenPNTEstimator::HandleEvent(raven::RavenPNTEstimator *this, const raven::AttitudeChangeEvent *a2)
{
  v96[4] = *(void (**)(uint64_t))MEMORY[0x1E4F143B8];
  if (!*((unsigned char *)this + 57)) {
    return 0xFFFFFFFFLL;
  }
  if (!*((unsigned char *)this + 58)) {
    return 0;
  }
  uint64_t v85 = 0x100000003;
  long long v84 = xmmword_18E1F6F60;
  long long v83 = &unk_1EDD18D98;
  long long v86 = &v87;
  long long v87 = *(_OWORD *)((char *)a2 + 200);
  uint64_t v88 = *((void *)a2 + 27);
  uint64_t v76 = 0x100000000;
  uint64_t v79 = 0x100000003;
  long long v77 = &unk_1EDD18DC8;
  long long v78 = xmmword_18E1F6F60;
  int v82 = 2;
  long long v80 = &v81;
  uint64_t v81 = 0x100000000;
  sub_18DFECE30((uint64_t)a2 + 232, (uint64_t)&v77, (uint64_t)&v77, (uint64_t)v74);
  uint64_t v4 = (*(uint64_t (**)(const raven::AttitudeChangeEvent *))(*(void *)a2 + 16))(a2);
  double v6 = v5;
  *(void *)&long long v73 = v4;
  *((double *)&v73 + 1) = v5;
  sub_18E06BF24(v64, 5);
  v64[0] = &unk_1EDD159B0;
  long long v66 = v73;
  int8x16_t v89 = *(int8x16_t *)((char *)a2 + 104);
  uint64_t v8 = CNTimeSpan::operator-((uint64_t)&v73, &v89, v89, v7);
  double v72 = v9 + (double)v8;
  long long v67 = (char *)this + 2696;
  long long v68 = (char *)this + 14600;
  long long v69 = (char *)this + 14616;
  long long v70 = (char *)this + 2536;
  long long v71 = (char *)this + 2576;
  if ((v75 & 0x80000000) != 0) {
    __assert_rtn("Zeros", "cnmatrix.h", 3098, "nr >= 0");
  }
  uint64_t v92 = 0x100000003;
  v89.i64[0] = (uint64_t)&unk_1EDD18D98;
  uint64_t v10 = (char *)this + 61288;
  uint64_t v93 = &v94;
  v89.i64[1] = v75 | 0x100000000;
  unsigned int v90 = v75;
  unsigned int v91 = v75;
  uint64_t v11 = (cnprint::CNPrinter *)sub_18DFE2CC8((uint64_t)&v89, 0.0);
  if (*((unsigned char *)this + 61288))
  {
    if (*((_DWORD *)this + 16806) == 174)
    {
      LOWORD(v96[0]) = 2;
      unsigned __int8 v95 = 2;
      double v60 = v6 + (double)v4;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v96, &v95, "MeasurementAccumulator::AddMeasurement() failed - Out of space,t_meas,%.3lf", v12, v13, v14, v15, v16, SLOBYTE(v60));
    }
    else if (*((unsigned char *)this + 61289))
    {
      if (cnprint::CNPrinter::GetLogLevel(v11) <= 1)
      {
        LOWORD(v96[0]) = 2;
        unsigned __int8 v95 = 1;
        double v62 = v6 + (double)v4;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v96, &v95, "MeasurementAccumulator::AddMeasurement() failed - Locked,t_meas,%.3lf", v23, v24, v25, v26, v27, SLOBYTE(v62));
      }
    }
    else
    {
      BOOL v28 = sub_18DEE4CB8((double *)&v73, (double *)this + 7662);
      if (v28)
      {
        if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v28) <= 1)
        {
          LOWORD(v96[0]) = 2;
          unsigned __int8 v95 = 1;
          double v63 = *((double *)&v73 + 1) + (double)(uint64_t)v73;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)v96, &v95, "MeasurementAccumulator::AddMeasurement() failed - Measurement too old,t_meas,%.3lf,t_start,%.3lf", v29, v30, v31, v32, v33, SLOBYTE(v63));
        }
      }
      else
      {
        v96[0] = 0;
        v96[1] = 0;
        sub_18E072628(v96, (uint64_t)v64);
        uint64_t v34 = sub_18E06C110((uint64_t *)this + 7666, v96);
        sub_18E067C60((uint64_t (**)(void, void, void, void, void))v96);
        uint64_t v35 = *((int *)this + 16806);
        uint64_t v36 = (v35 + 1);
        if (*((void *)this + 7668) == v36)
        {
          *((_DWORD *)this + 16806) = v36;
          *((_DWORD *)this + 15340) = v36;
          *((_DWORD *)this + 15341) = 1;
          *((_DWORD *)this + 15342) = v36;
          *((_DWORD *)this + 15343) = v36;
          *((_DWORD *)this + 16046) = v36;
          *((_DWORD *)this + 16047) = 1;
          *((_DWORD *)this + 16048) = v36;
          *((_DWORD *)this + 16049) = v36;
          *((_DWORD *)this + 16230) = v36;
          *((_DWORD *)this + 16231) = 1;
          *((_DWORD *)this + 16232) = v36;
          *((_DWORD *)this + 16233) = v36;
          *((_DWORD *)this + 16588) = v36;
          *((_DWORD *)this + 16589) = 1;
          *((_DWORD *)this + 16590) = v36;
          *((_DWORD *)this + 16591) = v36;
          *((_DWORD *)this + 16600) = v36;
          *((_DWORD *)this + 16601) = 1;
          *((_DWORD *)this + 16602) = v36;
          *((_DWORD *)this + 16603) = v36;
          *((_DWORD *)this + 16784) = v36;
          *((_DWORD *)this + 16785) = 1;
          *((_DWORD *)this + 16786) = v36;
          *((_DWORD *)this + 16787) = v36;
          *((_DWORD *)this + 16796) = v36;
          *((_DWORD *)this + 16797) = 1;
          *((_DWORD *)this + 16798) = v36;
          *((_DWORD *)this + 16799) = v36;
          *((_DWORD *)this + 16810) = v36;
          *((_DWORD *)this + 16811) = 1;
          *((_DWORD *)this + 16812) = v36;
          *((_DWORD *)this + 16813) = v36;
          *((_DWORD *)this + 17168) = v36;
          *((_DWORD *)this + 17169) = 1;
          *((_DWORD *)this + 17170) = v36;
          *((_DWORD *)this + 17171) = v36;
          *(_OWORD *)(*((void *)this + 7673) + 16 * v35) = v73;
          if (v84 <= DWORD1(v84)) {
            int v37 = DWORD1(v84);
          }
          else {
            int v37 = v84;
          }
          if (DWORD1(v84)) {
            BOOL v38 = v84 == 0;
          }
          else {
            BOOL v38 = 1;
          }
          if (v38) {
            int v39 = 0;
          }
          else {
            int v39 = v37;
          }
          *(_DWORD *)(*((void *)this + 8026) + 4 * v35) = v39;
          sub_18DFE2F24(*((void *)this + 8297) + (v35 << 6), (uint64_t)&v83);
          if (v89.i32[2] <= (unsigned __int32)v89.i32[3]) {
            __int32 v40 = v89.i32[3];
          }
          else {
            __int32 v40 = v89.i32[2];
          }
          if (v89.i32[3]) {
            BOOL v41 = v89.i32[2] == 0;
          }
          else {
            BOOL v41 = 1;
          }
          if (v41) {
            __int32 v42 = 0;
          }
          else {
            __int32 v42 = v40;
          }
          *(_DWORD *)(*((void *)this + 8303) + 4 * v35) = v42;
          sub_18DFE2F24(*((void *)this + 8395) + (v35 << 6), (uint64_t)&v89);
          __n128 v43 = sub_18DFE2F24(*((void *)this + 8401) + 112 * (int)v35, (uint64_t)v74);
          *(void *)(*((void *)this + 8408) + 8 * v35) = sub_18E035D94;
          if (*v34) {
            uint64_t v44 = ((uint64_t (*)(uint64_t, void *, void, void *, void *, __n128))*v34)(3, v34, 0, &unk_1EDD05E28, &std::__any_imp::__unique_typeinfo<raven::h_DeviceAttitudeChangeArgs_RavenPNT<double>>::__id, v43);
          }
          else {
            uint64_t v44 = 0;
          }
          uint64_t v17 = 0;
          *(void *)(*((void *)v10 + 926) + 8 * v35) = v44;
          goto LABEL_43;
        }
        LOWORD(v96[0]) = 2;
        unsigned __int8 v95 = 4;
        char v45 = (*(uint64_t (**)(void *))(v64[0] + 16))(v64);
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v96, &v95, "MeasurementAccumulator::AddMeasurement() failed - allocation failed,meas_type,%d,t_meas,%.3lf", v46, v47, v48, v49, v50, v45);
      }
    }
  }
  else if (cnprint::CNPrinter::GetLogLevel(v11) <= 1)
  {
    LOWORD(v96[0]) = 2;
    unsigned __int8 v95 = 1;
    double v61 = v6 + (double)v4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v96, &v95, "MeasurementAccumulator::AddMeasurement() failed - Not initialized,t_meas,%.3lf", v18, v19, v20, v21, v22, SLOBYTE(v61));
  }
  LOWORD(v96[0]) = 12;
  unsigned __int8 v95 = 4;
  v89.i64[0] = (*(uint64_t (**)(const raven::AttitudeChangeEvent *))(*(void *)a2 + 16))(a2);
  v89.i64[1] = v51;
  char v52 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)&v89, "Could not add measurement - device attitude-change");
  if (*((char *)this + 2511) >= 0) {
    LOBYTE(v58) = v52;
  }
  else {
    uint64_t v58 = *((void *)this + 311);
  }
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)v96, &v95, "%s", v53, v54, v55, v56, v57, v58);
  uint64_t v17 = 0xFFFFFFFFLL;
LABEL_43:
  v64[0] = &unk_1EDD0A4E8;
  if (v65 < 0) {
    operator delete((void *)v64[2]);
  }
  return v17;
}

void sub_18E035D2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a2) {
    sub_18DEDD524(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_18E035D94(uint64_t a1)
{
  MEMORY[0x1F4188790](a1);
  int8x16_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EB403A90, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EB403A90))
  {
    uint64_t v56 = 0x1300000001;
    uint64_t v54 = &unk_1EDD17E38;
    uint64_t v57 = &v58;
    long long v55 = xmmword_18E1FD720;
    for (uint64_t i = 10; i != 29; ++i)
      *((_DWORD *)&v54 + i) = i - 10;
    sub_18E05B858((uint64_t)&unk_1EB4042E8, (uint64_t)&v54);
    __cxa_atexit((void (*)(void *))sub_18E0600EC, &unk_1EB4042E8, &dword_18DEDB000);
    __cxa_guard_release(&qword_1EB403A90);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EB403A98, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EB403A98))
  {
    uint64_t v56 = 0x1A00000001;
    uint64_t v54 = &unk_1EDD18168;
    uint64_t v57 = &v58;
    long long v55 = xmmword_18E1FD710;
    for (uint64_t j = 10; j != 28; ++j)
      *((_DWORD *)&v54 + j) = j - 10;
    sub_18E058650((uint64_t)&unk_1EB404660, (uint64_t)&v54);
    __cxa_atexit((void (*)(void *))sub_18E0576A8, &unk_1EB404660, &dword_18DEDB000);
    __cxa_guard_release(&qword_1EB403A98);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EB403AA0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EB403AA0))
  {
    uint64_t v56 = 0x1A00000001;
    uint64_t v54 = &unk_1EDD18168;
    uint64_t v57 = &v58;
    long long v55 = xmmword_18E1F8560;
    uint64_t v58 = 0x700000006;
    int v59 = 8;
    sub_18E058650((uint64_t)&unk_1EB4046F0, (uint64_t)&v54);
    __cxa_atexit((void (*)(void *))sub_18E0576A8, &unk_1EB4046F0, &dword_18DEDB000);
    __cxa_guard_release(&qword_1EB403AA0);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EB403AA8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EB403AA8))
  {
    uint64_t v56 = 0x300000001;
    uint64_t v54 = &unk_1EDD18258;
    uint64_t v57 = &v58;
    long long v55 = xmmword_18E1F8560;
    uint64_t v58 = 0x100000000;
    int v59 = 2;
    sub_18DFEC63C((uint64_t)&v54, (uint64_t)&unk_1EB403E20);
    __cxa_atexit((void (*)(void *))sub_18DFE2E9C, &unk_1EB403E20, &dword_18DEDB000);
    __cxa_guard_release(&qword_1EB403AA8);
  }
  if (!v7
    || (uint64_t v12 = (char *)__dynamic_cast(v7, (const struct __class_type_info *)&unk_1EDD02A78, (const struct __class_type_info *)&unk_1EDD05E28, 0)) == 0)
  {
    LOWORD(v54) = 12;
    v45[0] = 4;
    double v30 = MEMORY[0x30] + (double)MEMORY[0x28];
LABEL_26:
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v54, v45, "time,%.3lf,h-function failure on line %d: %s() %s", v1, v2, v3, v4, v5, SLOBYTE(v30));
    return 0xFFFFFFFFLL;
  }
  uint64_t v14 = v12;
  unsigned int v16 = *(_DWORD *)(v11 + 8);
  unsigned int v15 = *(_DWORD *)(v11 + 12);
  if (v16 <= v15) {
    int v17 = *(_DWORD *)(v11 + 12);
  }
  else {
    int v17 = *(_DWORD *)(v11 + 8);
  }
  if (!v16
    || !v15
    || v17 != 26
    || ((v19 = *(_DWORD *)(v9 + 8), unsigned int v18 = *(_DWORD *)(v9 + 12), v19 <= v18)
      ? (int v20 = *(_DWORD *)(v9 + 12))
      : (int v20 = *(_DWORD *)(v9 + 8)),
        !v19 || !v18 || v20 != 3))
  {
    LOWORD(v54) = 12;
    v45[0] = 4;
    double v30 = *((double *)v12 + 6) + (double)*((uint64_t *)v12 + 5);
    goto LABEL_26;
  }
  if (!*((void *)v12 + 7))
  {
    LOWORD(v54) = 12;
    v45[0] = 4;
    double v30 = *((double *)v12 + 6) + (double)*((uint64_t *)v12 + 5);
    goto LABEL_26;
  }
  v13.i64[0] = *((void *)v12 + 12);
  if ((v13.i64[0] & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || *(double *)v13.i64 <= 0.0)
  {
    LOWORD(v54) = 12;
    v45[0] = 4;
    double v30 = *((double *)v12 + 6) + (double)*((uint64_t *)v12 + 5);
    goto LABEL_26;
  }
  v85[0] = *(int8x16_t *)(v12 + 40);
  *(void *)&long long v55 = 0;
  uint64_t v54 = 0;
  CNTimeSpan::SetTimeSpan((uint64_t *)&v54, 0, v13, v85[0]);
  *(void *)&long long v84 = CNTimeSpan::operator-((uint64_t)v85, &v54, v21, v22);
  *((void *)&v84 + 1) = v23;
  uint64_t v24 = v14[9];
  long long v83 = *(_OWORD *)v14[8];
  sub_18E07FB20((uint64_t)&v81, v24);
  uint64_t v25 = v14[7];
  uint64_t v78 = 0x10000001CLL;
  long long v77 = xmmword_18E1FD730;
  uint64_t v76 = &unk_1EDD188B8;
  uint64_t v79 = (double *)&v80;
  if (sub_18E06B85C((uint64_t)v85, (uint64_t)&v83, v82, v25, v14[11], (uint64_t)&v76))
  {
    sub_18E06B804((uint64_t)(v14 + 5), (uint64_t)"could not integrate full states", (uint64_t)"h_DeviceAttitudeChange_RavenPNT", 2456, v26, v27, v28, v29);
  }
  else
  {
    sub_18E05985C((uint64_t)v75);
    sub_18E0818A4((uint64_t)&v54, (uint64_t)v75, (uint64_t)&unk_1EB4042E8);
    sub_18E06F000((uint64_t)&v54, SDWORD2(v77), v79);
    uint64_t v72 = 0x100000013;
    long long v70 = &unk_1EDD17CB8;
    long long v71 = xmmword_18E1FD730;
    long long v73 = &v74;
    v68[0] = vdupq_n_s64(0x7FF8000000000000uLL);
    v68[1] = v68[0];
    double v68[2] = v68[0];
    v68[3] = v68[0];
    v68[4] = v68[0];
    v68[5] = v68[0];
    v68[6] = v68[0];
    v68[7] = v68[0];
    v68[8] = v68[0];
    v68[9] = v68[0];
    v68[10] = v68[0];
    v68[11] = v68[0];
    v68[12] = v68[0];
    v68[13] = v68[0];
    v68[14] = v68[0];
    v68[15] = v68[0];
    v68[16] = v68[0];
    v68[17] = v68[0];
    v68[18] = v68[0];
    v68[19] = v68[0];
    v68[20] = v68[0];
    v68[21] = v68[0];
    v68[22] = v68[0];
    v68[23] = v68[0];
    v68[24] = v68[0];
    v68[25] = v68[0];
    v68[26] = v68[0];
    v68[27] = v68[0];
    v68[28] = v68[0];
    v68[29] = v68[0];
    v68[30] = v68[0];
    v68[31] = v68[0];
    v68[32] = v68[0];
    v68[33] = v68[0];
    v68[34] = v68[0];
    uint64_t v69 = 0x7FF8000000000000;
    sub_18E06BA00((uint64_t)v75, v11, (uint64_t)&v70, (uint64_t)v68);
    uint64_t v65 = 0x10000001CLL;
    double v63 = &unk_1EDD188B8;
    long long v64 = xmmword_18E1FD730;
    long long v66 = &v67;
    if (sub_18E06B85C((uint64_t)&v84, (uint64_t)&v83, v82, v25, v14[11], (uint64_t)&v63))
    {
      sub_18E06B804((uint64_t)(v14 + 5), (uint64_t)"could not integrate full states", (uint64_t)"h_DeviceAttitudeChange_RavenPNT", 2481, v32, v33, v34, v35);
    }
    else
    {
      sub_18E0618EC((uint64_t)&v54);
      char v60 = 0;
      uint64_t v54 = &unk_1EDD14C50;
      long long v61 = 0u;
      long long v62 = 0u;
      sub_18E028F24((uint64_t)v53);
      if (sub_18E070DF0(v25, (uint64_t)v53))
      {
        uint64_t v40 = 2495;
        BOOL v41 = "could not get integrator configuration";
      }
      else
      {
        if (!sub_18E02AA54((uint64_t)&v54, (uint64_t)v53))
        {
          v51[28] = &v54;
          v51[29] = v85;
          uint64_t v42 = v14[11];
          v51[30] = &v76;
          v51[31] = v42;
          long long v52 = v84;
          sub_18E070E60((uint64_t)v51, 15);
          uint64_t v48 = 0x10000001ALL;
          v46[6] = &unk_1EDD186A8;
          long long v47 = xmmword_18E1FD600;
          uint64_t v49 = &v50;
          sub_18E06E85C((uint64_t)v46);
        }
        uint64_t v40 = 2500;
        BOOL v41 = "could not set integrator configuration";
      }
      sub_18E06B804((uint64_t)(v14 + 5), (uint64_t)v41, (uint64_t)"h_DeviceAttitudeChange_RavenPNT", v40, v36, v37, v38, v39);
      sub_18E026798((uint64_t)&v54);
    }
  }
  return 0xFFFFFFFFLL;
}

void sub_18E036BDC(_Unwind_Exception *a1)
{
}

uint64_t sub_18E036CB0(uint64_t a1)
{
  *(void *)a1 = &unk_1EDD0A4E8;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

uint64_t raven::RavenPNTEstimator::HandleEvent(raven::RavenPNTEstimator *this, const raven::AttitudeEvent *a2)
{
  if (*((unsigned char *)this + 57))
  {
    if (*((unsigned char *)a2 + 217) == 1)
    {
      sub_18E07281C((uint64_t)this + 19432, (uint64_t)a2);
      return 0;
    }
    if (cnprint::CNPrinter::GetLogLevel(this) <= 1)
    {
      __int16 v14 = 12;
      unsigned __int8 v13 = 1;
      v12[0] = (*(uint64_t (**)(const raven::AttitudeEvent *))(*(void *)a2 + 16))(a2);
      v12[1] = v5;
      cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)v12, "Unexpected attitude rotation type,%d", *((unsigned __int8 *)a2 + 217));
      if (*((char *)this + 2511) >= 0) {
        LOBYTE(v11) = (_BYTE)this - 72;
      }
      else {
        uint64_t v11 = *((void *)this + 311);
      }
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v14, &v13, "%s", v6, v7, v8, v9, v10, v11);
    }
  }
  return 0xFFFFFFFFLL;
}

uint64_t raven::RavenPNTEstimator::HandleEvent(raven::RavenPNTEstimator *this, const raven::GnssPreprocessedMeasurementsEvent *a2)
{
  MEMORY[0x1F4188790](this);
  v349[69] = *(void (**)(uint64_t))MEMORY[0x1E4F143B8];
  if (!*((unsigned char *)v2 + 57)) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v4 = (uint64_t)v2;
  if (!*((unsigned char *)v2 + 58)) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v5 = v3;
  uint64_t v6 = (cnprint::CNPrinter *)raven::RavenEstimator::HandleGnssPreprocessedMeasurementsEvent(v2, v3);
  if (v6) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v207 = (uint64_t)v5;
  if (!*((unsigned char *)v5 + 88))
  {
    if (cnprint::CNPrinter::GetLogLevel(v6) <= 1)
    {
      LOWORD(__src.__r_.__value_.__l.__data_) = 12;
      LOBYTE(v298[0]) = 1;
      float64x2_t v227 = (void *)(*(uint64_t (**)(const raven::GnssPreprocessedMeasurementsEvent *))(*(void *)v5 + 16))(v5);
      double v228 = v7;
      cnprint::CNLogFormatter::FormatGeneral(v4 + 2488, (uint64_t)&v227, "Encountered GnssPreprocessedMeasurementsEvent with no oscillator model.");
      if (*(char *)(v4 + 2511) >= 0) {
        LOBYTE(v13) = v4 - 72;
      }
      else {
        uint64_t v13 = *(void *)(v4 + 2488);
      }
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&__src, (unsigned __int8 *)v298, "%s", v8, v9, v10, v11, v12, v13);
    }
    raven::RavenPNTEstimator::ResetOscillatorStates((raven::RavenPNTEstimator *)v4);
  }
  float64x2_t v227 = (void *)(*(uint64_t (**)(const raven::GnssPreprocessedMeasurementsEvent *))(*(void *)v5 + 16))(v5);
  double v228 = v14;
  if (!raven::RavenPNTEstimator::UpdateClockOffsetEstimateIfNecessary(v4, (uint64_t)v5 + 24, (uint64_t)&v227))return 0xFFFFFFFFLL; {
  long long v282 = 0uLL;
  }
  char v283 = 0;
  uint64_t v285 = 0;
  uint64_t v284 = 0;
  char v286 = 0;
  uint64_t v288 = 0;
  uint64_t v287 = 0;
  char v289 = 0;
  uint64_t v291 = 0;
  uint64_t v290 = 0;
  uint64_t v292 = 0x7FF8000000000000;
  uint64_t v206 = v4;
  if (!*(unsigned char *)(*(void *)(v4 + 1168) + 3811)) {
    goto LABEL_46;
  }
  v15.i64[0] = 0x3EB0C6F7A0B5ED8DLL;
  if (!raven::RavenEstimator::AreGnssMeasurementsAtSameTime(v4, v5, &v282, v15, v16)) {
    goto LABEL_46;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EB4039D0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EB4039D0))
  {
    qword_1EB403B78 = 0;
    dbl_1EB403B80 = 0.2;
    __cxa_guard_release(&qword_1EB4039D0);
  }
  uint64_t v19 = CNTimeSpan::operator-((uint64_t)&v282, (void *)(v4 + 14600), v17, v18);
  float64x2_t v227 = (void *)v19;
  double v228 = v20;
  if (v19 < 0 || (*(double *)v21.i64 = v20, v20 < 0.0)) {
    uint64_t v19 = CNTimeSpan::operator-((double *)&v227, v21, v22);
  }
  uint64_t v280 = v19;
  double v281 = v20;
  BOOL v23 = sub_18DEE4C00((double *)&v280, (double *)&qword_1EB403B78);
  if (!v23)
  {
    if (v280)
    {
      if (v280 < 0) {
        goto LABEL_19;
      }
    }
    else if (v281 < 0.0)
    {
      goto LABEL_19;
    }
    uint64_t v35 = v4;
    sub_18E072928((uint64_t)&v227);
    long long v36 = *(_OWORD *)(v4 + 19288);
    long long v276 = *(_OWORD *)(v4 + 19304);
    long long v37 = *(_OWORD *)(v4 + 19336);
    long long v277 = *(_OWORD *)(v4 + 19320);
    long long v278 = v37;
    uint64_t v279 = *(void *)(v4 + 19352);
    long long v38 = *(_OWORD *)(v4 + 19272);
    long long v273 = *(_OWORD *)(v4 + 19256);
    long long v274 = v38;
    long long v275 = v36;
    long long v267 = v273;
    long long v268 = v38;
    long long v270 = v276;
    long long v271 = v277;
    long long v269 = v36;
    uint64_t v272 = *(void *)(v4 + 19336);
    char v266 = 0;
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EB4039D8, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_1EB4039D8))
    {
      *(void *)&v319[24] = 0x1C00000001;
      *(void *)v319 = &unk_1EDD18198;
      v320 = &v321;
      *(_OWORD *)&v319[8] = xmmword_18E1F8560;
      uint64_t v321 = 0x100000000;
      int v322 = 2;
      sub_18E03E014((uint64_t)v293, (uint64_t)v319);
      *(void *)&v312[24] = 0x1C00000001;
      *(void *)v312 = &unk_1EDD18198;
      v313 = &v314;
      *(_OWORD *)&v312[8] = xmmword_18E1F8560;
      uint64_t v314 = 0x400000003;
      int v315 = 5;
      sub_18E03E014((uint64_t)v316, (uint64_t)v312);
      uint64_t v309 = 0x1C00000001;
      v307 = &unk_1EDD18198;
      v310 = &v311;
      long long v308 = xmmword_18E1FD740;
      uint64_t v311 = 0x1400000013;
      sub_18E03E014((uint64_t)v349, (uint64_t)&v307);
      sub_18E03E0A0((uint64_t)v298, (uint64_t)v316, (uint64_t)v349);
      sub_18E03DF88((uint64_t)&__src, (uint64_t)v293, (uint64_t)v298);
      sub_18E07314C((uint64_t)&unk_1E91C9A18, (uint64_t)&__src);
      __cxa_atexit((void (*)(void *))sub_18E03E16C, &unk_1E91C9A18, &dword_18DEDB000);
      __cxa_guard_release(&qword_1EB4039D8);
      uint64_t v35 = v4;
    }
    sub_18E07323C((uint64_t)&__src, v35 + 14616, (uint64_t)&unk_1E91C9A18);
    sub_18E073370((uint64_t)v293, (uint64_t)&__src);
    sub_18E073460((uint64_t)v298);
  }
LABEL_19:
  if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v23) <= 1)
  {
    LOWORD(__src.__r_.__value_.__l.__data_) = 12;
    LOBYTE(v298[0]) = 1;
    float64x2_t v227 = (void *)(*(uint64_t (**)(const raven::GnssPreprocessedMeasurementsEvent *))(*(void *)v5 + 16))(v5);
    double v228 = v24;
    uint64_t v25 = (uint64_t *)cnprint::CNLogFormatter::FormatGeneral(v4 + 2488, (uint64_t)&v227, "GNSS measurement selection: invalid prediction interval,dt,%.3lf,min,0.0,max,%.3lf", v281 + (double)v280, dbl_1EB403B80 + (double)qword_1EB403B78);
    if (*(char *)(v4 + 2511) >= 0) {
      LOBYTE(v31) = (_BYTE)v25;
    }
    else {
      uint64_t v31 = *v25;
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&__src, (unsigned __int8 *)v298, "%s", v26, v27, v28, v29, v30, v31);
  }
  int8x16_t v32 = (int8x16_t)sub_18E072928((uint64_t)&v227);
  uint64_t v39 = v4;
  uint64_t v40 = *(void *)(v4 + 80);
  std::string::size_type v41 = *(void *)(v4 + 88);
  __src.__r_.__value_.__r.__words[0] = v40;
  __src.__r_.__value_.__l.__size_ = v41;
  CNTimeSpan::operator-((uint64_t)&v282, &__src, v32, v42);
  uint64_t v43 = *(void *)(v39 + 1168);
  uint64_t v44 = *(void *)(v43 + 872);
  v226[2] = v40;
  v226[3] = v41;
  v226[1] = 0;
  v226[0] = 0;
  v45.i64[0] = v44;
  CNTimeSpan::SetTimeSpan(v226, 0, v45, v46);
  v47.i64[0] = *(void *)(v43 + 880);
  v225[1] = 0;
  v225[0] = 0;
  CNTimeSpan::SetTimeSpan(v225, 0, v47, v48);
  uint64_t v4 = v206;
  raven::PopulateAllTimeFields((uint64_t)&v282, v206 + 136, v49, v50);
  if (*(unsigned char *)(v206 + 1208))
  {
    uint64_t v297 = *(void *)(v206 + 1400);
    long long v51 = *(_OWORD *)(v206 + 1368);
    long long v294 = *(_OWORD *)(v206 + 1352);
    long long v295 = v51;
    long long v296 = *(_OWORD *)(v206 + 1384);
    long long v52 = *(_OWORD *)(v206 + 1336);
    *(_OWORD *)v293 = *(_OWORD *)(v206 + 1320);
    *(_OWORD *)&v293[16] = v52;
  }
  else
  {
    *(void *)v293 = 0;
    *(void *)&v293[8] = 0x3FF0000000000000;
    *(_OWORD *)&v293[16] = 0u;
    long long v294 = 0u;
    long long v295 = 0u;
    long long v296 = 0u;
    uint64_t v297 = 0;
  }
  char v53 = *(unsigned char *)(v206 + 2368);
  if (v53) {
    char v53 = *(unsigned char *)(v206 + 2480);
  }
  v312[0] = v53;
  if (*(unsigned char *)(v206 + 1624))
  {
    v320 = *(uint64_t **)(v206 + 1768);
    long long v54 = *(_OWORD *)(v206 + 1752);
    *(_OWORD *)v319 = *(_OWORD *)(v206 + 1736);
    *(_OWORD *)&v319[16] = v54;
  }
  else
  {
    *(void *)v319 = 0;
    *(void *)&v319[8] = 0x3FF0000000000000;
    v320 = 0;
    *(_OWORD *)&v319[16] = 0uLL;
  }
  if (*(unsigned char *)(v206 + 1776))
  {
    long long v55 = *(_OWORD *)(v206 + 1904);
    *(_OWORD *)v316 = *(_OWORD *)(v206 + 1888);
    *(_OWORD *)&v316[16] = v55;
    v317 = *(uint64_t **)(v206 + 1920);
  }
  else
  {
    *(void *)v316 = 0;
    *(void *)&v316[8] = 0x3FF0000000000000;
    v317 = 0;
    *(void *)&v316[16] = 0;
    *(void *)&v316[24] = 0;
  }
  sub_18E03F88C((uint64_t)&v227);
LABEL_46:
  *(unsigned char *)(v4 + 8656) = *(unsigned char *)(v4 + 2704);
  long long v56 = *(_OWORD *)(v4 + 2728);
  *(_OWORD *)(v4 + 8664) = *(_OWORD *)(v4 + 2712);
  *(_OWORD *)(v4 + 8680) = v56;
  uint64_t v217 = v4 + 2696;
  uint64_t v209 = v4 + 8648;
  *(_OWORD *)(v4 + 8689) = *(_OWORD *)(v4 + 2737);
  sub_18DFE2F24(v4 + 8712, v4 + 2760);
  sub_18DFE2F24(v4 + 8904, v4 + 2952);
  *(unsigned char *)(v4 + 9096) = *(unsigned char *)(v4 + 3144);
  *(_OWORD *)(v4 + 9104) = *(_OWORD *)(v4 + 3152);
  *(void *)(v4 + 9120) = *(void *)(v4 + 3168);
  sub_18DFE2F24(v4 + 9128, v4 + 3176);
  sub_18DFE2F24(v4 + 9320, v4 + 3368);
  sub_18DFE2F24(v4 + 12248, v4 + 6296);
  uint64_t v57 = *(_OWORD **)(v4 + 8616);
  uint64_t v58 = *(_OWORD **)(v4 + 8624);
  unint64_t v59 = 0xCFF3FCFF3FCFF3FDLL * (v58 - v57);
  uint64_t v60 = *(void *)(v4 + 14584);
  long long v61 = *(_OWORD **)(v4 + 14568);
  if (0xCFF3FCFF3FCFF3FDLL * ((v60 - (uint64_t)v61) >> 4) >= v59)
  {
    if (0xCFF3FCFF3FCFF3FDLL * ((uint64_t)(*(void *)(v4 + 14576) - (void)v61) >> 4) >= v59)
    {
      uint64_t v69 = sub_18E068D60(*(_OWORD **)(v4 + 8616), *(_OWORD **)(v4 + 8624), v61);
      long long v71 = *(_OWORD **)(v4 + 14576);
      if (v71 != v69)
      {
        uint64_t v72 = v71 - 145;
        long long v73 = v71 - 340;
        do
        {
          *uint64_t v72 = &unk_1EDD17478;
          *(v72 - 366) = &unk_1EDD17478;
          *(v72 - 390) = &unk_1EDD17478;
          uint64_t v74 = v72 - 392;
          v72 -= 682;
          v73 -= 341;
        }
        while (v74 != v69);
      }
    }
    else
    {
      long long v70 = &v57[(uint64_t)(*(void *)(v4 + 14576) - (void)v61) >> 4];
      sub_18E068D60(*(_OWORD **)(v4 + 8616), v70, v61);
      uint64_t v69 = sub_18E068C10(v4 + 14584, v70, v58, *(_OWORD **)(v4 + 14576));
    }
  }
  else
  {
    if (v61)
    {
      long long v62 = *(_OWORD **)(v4 + 14576);
      if (v62 != v61)
      {
        double v63 = v62 - 145;
        long long v64 = v62 - 340;
        do
        {
          *double v63 = &unk_1EDD17478;
          *(v63 - 366) = &unk_1EDD17478;
          *(v63 - 390) = &unk_1EDD17478;
          uint64_t v65 = v63 - 392;
          v63 -= 682;
          v64 -= 341;
        }
        while (v65 != v61);
      }
      *(void *)(v4 + 14576) = v61;
      operator delete(v61);
      uint64_t v60 = 0;
      *(void *)(v4 + 14568) = 0;
      *(void *)(v4 + 14576) = 0;
      *(void *)(v4 + 14584) = 0;
    }
    if (v59 > 0xC0300C0300C03) {
      sub_18DEE1FC8();
    }
    unint64_t v66 = 0xCFF3FCFF3FCFF3FDLL * (v60 >> 4);
    uint64_t v67 = 2 * v66;
    if (2 * v66 <= v59) {
      uint64_t v67 = 0xCFF3FCFF3FCFF3FDLL * (v58 - v57);
    }
    if (v66 >= 0x6018060180601) {
      unint64_t v68 = 0xC0300C0300C03;
    }
    else {
      unint64_t v68 = v67;
    }
    sub_18E068BB8((void *)(v4 + 14568), v68);
    uint64_t v69 = sub_18E068C10(v4 + 14584, v57, v58, *(_OWORD **)(v4 + 14576));
  }
  *(void *)(v4 + 14576) = v69;
  uint64_t v75 = v207;
  *(void *)(v4 + 14592) = *(void *)(v4 + 8640);
  v307 = &v307;
  *(void *)&long long v308 = &v307;
  *((void *)&v308 + 1) = 0;
  uint64_t UnprocessedMSRData = raven::RavenSequentialGNSSMeasurementSelector::GetUnprocessedMSRData(v4 + 16800, v207, (uint64_t *)&v307);
  if ((UnprocessedMSRData & 1) == 0)
  {
    uint64_t v33 = 0xFFFFFFFFLL;
    goto LABEL_189;
  }
  uint64_t v77 = v308;
  if ((void **)v308 == &v307) {
    goto LABEL_154;
  }
  unsigned int v78 = 0;
  uint64_t v218 = v4 + 16800;
  uint64_t v214 = v4 + 14600;
  uint64_t v213 = v4 + 14616;
  v211 = (uint64_t *)(v4 + 2576);
  uint64_t v212 = v4 + 2536;
  uint64_t v216 = v4 + 2488;
  uint64_t v208 = v4 + 16776;
  uint64_t v204 = (uint64_t *)(v4 + 61328);
  int64x2_t v215 = vdupq_n_s64(0x7FF8000000000000uLL);
  v205 = (double *)(v4 + 61296);
  uint64_t v210 = v4 + 61288;
  do
  {
    uint64_t v79 = (uint64_t *)(v77 + 16);
    uint64_t v80 = *(const std::string **)(v77 + 16);
    int v81 = *(_DWORD *)(v77 + 192);
    if ((v81 - 1) < 2) {
      goto LABEL_147;
    }
    if (v81 == 3)
    {
      ++v78;
      goto LABEL_147;
    }
    raven::RavenSequentialGNSSMeasurementSelector::GetFinalGnssObservable(v218, v77 + 16, (uint64_t)v298);
    if (v305)
    {
      *(void *)&v316[24] = 0x100000003;
      *(void *)&long long v82 = 0x100000001;
      *((void *)&v82 + 1) = 0x100000001;
      *(_OWORD *)&v316[8] = v82;
      *(void *)v316 = &unk_1EDD18D98;
      v317 = &v318;
      *(void *)&v293[24] = 0x300000003;
      *(_OWORD *)&v293[8] = v82;
      *(void *)v293 = &unk_1EDD18EE8;
      *(void *)&long long v294 = (char *)&v294 + 8;
      sub_18DEDE7B0(&__src, "");
      LOBYTE(data) = 0;
      HIDWORD(data) = -1;
      long long v325 = 0uLL;
      LOBYTE(v326) = 0;
      *((void *)&v326 + 1) = 0;
      *(void *)&long long v327 = 0;
      BYTE8(v327) = 0;
      long long v328 = 0uLL;
      LOBYTE(v329) = 0;
      *((void *)&v329 + 1) = 0;
      *(void *)&long long v330 = 0;
      *((void *)&v330 + 1) = 0x7FF8000000000000;
      LODWORD(v331) = 0;
      BYTE4(v331) = 0;
      *((void *)&v331 + 1) = 0x7FF8000000000000;
      LODWORD(v332[0]) = 2143289344;
      *(int64x2_t *)((char *)v332 + 8) = v215;
      *(int64x2_t *)((char *)&v332[1] + 8) = v215;
      *(int64x2_t *)((char *)&v332[2] + 8) = v215;
      DWORD2(v332[3]) = 2143289344;
      BYTE12(v332[3]) = 0;
      LOBYTE(v333) = 0;
      BYTE4(v333) = 0;
      BYTE8(v333) = 0;
      WORD6(v333) = 0;
      BYTE14(v333) = 1;
      int64x2_t v334 = v215;
      v335 = &unk_1EDD0AE58;
      sub_18DEDE7B0(&v336, "");
      LOBYTE(v337) = 0;
      HIDWORD(v337) = -1;
      long long v338 = 0u;
      long long v339 = 0u;
      long long v340 = 0u;
      long long v341 = 0u;
      long long v342 = 0u;
      long long v343 = 0u;
      long long v344 = 0u;
      long long v345 = 0u;
      long long v346 = 0u;
      long long v347 = 0u;
      long long v348 = 0u;
      uint64_t v83 = *v79;
      *(void *)&long long v84 = 0x100000001;
      *((void *)&v84 + 1) = 0x100000001;
      *(_OWORD *)&v316[8] = v84;
      *(_OWORD *)&v293[8] = v84;
      uint64_t *v317 = *((void *)&v299 + 1);
      *(double *)long long v294 = (float)(*((float *)&v302 + 2) * *((float *)&v302 + 2));
      v332[3] = v302;
      long long v333 = v303;
      int64x2_t v334 = v304;
      long long v331 = v298[6];
      v332[0] = v299;
      v332[1] = v300;
      v332[2] = v301;
      long long v327 = v298[2];
      long long v328 = v298[3];
      long long v329 = v298[4];
      long long v330 = v298[5];
      long long v325 = v298[0];
      long long v326 = v298[1];
      std::string::operator=(&__src, v80);
      std::string::pointer data = v80[1].__r_.__value_.__l.__data_;
      uint64_t UnprocessedMSRData = (uint64_t)std::string::operator=(&v336, (const std::string *)(v83 + 40));
      uint64_t v337 = *(void *)(v83 + 64);
      long long v85 = *(_OWORD *)(v83 + 72);
      long long v86 = *(_OWORD *)(v83 + 104);
      long long v339 = *(_OWORD *)(v83 + 88);
      long long v340 = v86;
      long long v338 = v85;
      long long v87 = *(_OWORD *)(v83 + 120);
      long long v88 = *(_OWORD *)(v83 + 136);
      long long v89 = *(_OWORD *)(v83 + 168);
      long long v343 = *(_OWORD *)(v83 + 152);
      long long v344 = v89;
      long long v341 = v87;
      long long v342 = v88;
      long long v90 = *(_OWORD *)(v83 + 184);
      long long v91 = *(_OWORD *)(v83 + 200);
      long long v92 = *(_OWORD *)(v83 + 232);
      long long v347 = *(_OWORD *)(v83 + 216);
      long long v348 = v92;
      long long v345 = v90;
      long long v346 = v91;
      *(void *)v312 = v217;
      *(void *)&v312[8] = v214;
      *(void *)&v312[16] = v213;
      *(void *)&v312[24] = v212;
      v313 = v211;
      int v93 = *(_DWORD *)(*(void *)(v77 + 24) + 96);
      if ((v93 - 3) >= 2)
      {
        if (v93 == 2)
        {
          sub_18E076EBC((uint64_t)&v227, (long long *)&__src, (long long *)v312);
          long long v231 = *(_OWORD *)*(void *)(v77 + 24);
          int v107 = LOBYTE(v228);
          uint64_t v108 = (char *)sub_18E017C64((uint64_t)v80);
          sub_18DEDE7B0(v221, v108);
          sub_18E03F90C((uint64_t)&v227, v107, (long long *)v221);
          if (v222 < 0) {
            operator delete(v221[0]);
          }
          if (sub_18E040C30(v210, (double *)&v231, (uint64_t)v316, (uint64_t)v293, (uint64_t)&v227))
          {
            LOWORD(v349[0]) = 12;
            v306[0] = 4;
            *(void *)v319 = (*(uint64_t (**)(uint64_t))(*(void *)v207 + 16))(v207);
            *(void *)&v319[8] = v109;
            uint64_t v110 = sub_18E017C64((uint64_t)v80);
            cnprint::CNLogFormatter::FormatGeneral(v216, (uint64_t)v319, "Could not add measurement - Doppler for %s", v110);
            LOBYTE(v116) = v216;
            if (*(char *)(v206 + 2511) < 0) {
              uint64_t v116 = *(void *)(v206 + 2488);
            }
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)v349, v306, "%s", v111, v112, v113, v114, v115, v116);
          }
          uint64_t UnprocessedMSRData = sub_18E041088((uint64_t)&v227);
        }
        else if (v93 == 1)
        {
          sub_18E076908((uint64_t)&v227, (long long *)&__src, (long long *)v312);
          long long v231 = *(_OWORD *)*(void *)(v77 + 24);
          int v94 = LOBYTE(v228);
          unsigned __int8 v95 = (char *)sub_18E017C64((uint64_t)v80);
          sub_18DEDE7B0(__p, v95);
          sub_18E03F90C((uint64_t)&v227, v94, (long long *)__p);
          if (v224 < 0) {
            operator delete(__p[0]);
          }
          uint64_t v97 = *(void *)(*v79 + 312);
          uint64_t v96 = *(std::__shared_weak_count **)(*v79 + 320);
          if (v96) {
            atomic_fetch_add_explicit(&v96->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v264 = v97;
          uint64_t v98 = v265;
          v265 = v96;
          if (v98) {
            sub_18DEE4E18(v98);
          }
          if (sub_18E040034(v210, (double *)&v231, (uint64_t)v316, (uint64_t)v293, (uint64_t)&v227))
          {
            LOWORD(v349[0]) = 12;
            v306[0] = 4;
            *(void *)v319 = (*(uint64_t (**)(uint64_t))(*(void *)v207 + 16))(v207);
            *(void *)&v319[8] = v99;
            long long v100 = sub_18E017C64((uint64_t)v80);
            cnprint::CNLogFormatter::FormatGeneral(v216, (uint64_t)v319, "Could not add measurement - PSR for %s", v100);
            LOBYTE(v106) = v216;
            if (*(char *)(v206 + 2511) < 0) {
              uint64_t v106 = *(void *)(v206 + 2488);
            }
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)v349, v306, "%s", v101, v102, v103, v104, v105, v106);
          }
          uint64_t UnprocessedMSRData = sub_18E04048C((uint64_t)&v227);
        }
LABEL_143:
        v335 = &unk_1EDD0AE58;
        if (SHIBYTE(v336.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v336.__r_.__value_.__l.__data_);
        }
        v335 = &unk_1EDD0A9B8;
        if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__src.__r_.__value_.__l.__data_);
        }
        goto LABEL_147;
      }
      sub_18E06BF24(&v227, 16);
      if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0) {
        sub_18DEDE668(&v232, __src.__r_.__value_.__l.__data_, __src.__r_.__value_.__l.__size_);
      }
      else {
        std::string v232 = __src;
      }
      std::string::pointer v233 = data;
      long long v244 = v332[3];
      long long v245 = v333;
      int64x2_t v246 = v334;
      long long v240 = v331;
      long long v241 = v332[0];
      long long v242 = v332[1];
      long long v243 = v332[2];
      long long v236 = v327;
      long long v237 = v328;
      long long v238 = v329;
      long long v239 = v330;
      long long v234 = v325;
      long long v235 = v326;
      v247 = &unk_1EDD0AE58;
      if (SHIBYTE(v336.__r_.__value_.__r.__words[2]) < 0) {
        sub_18DEDE668(&v248, v336.__r_.__value_.__l.__data_, v336.__r_.__value_.__l.__size_);
      }
      else {
        std::string v248 = v336;
      }
      uint64_t v249 = v337;
      long long v258 = v346;
      long long v259 = v347;
      long long v260 = v348;
      long long v254 = v342;
      long long v255 = v343;
      long long v256 = v344;
      long long v257 = v345;
      long long v250 = v338;
      long long v251 = v339;
      long long v252 = v340;
      long long v253 = v341;
      v263 = v313;
      long long v261 = *(_OWORD *)v312;
      long long v262 = *(_OWORD *)&v312[16];
      float64x2_t v227 = &unk_1EDD15650;
      uint64_t v264 = 0;
      v265 = 0;
      long long v231 = *(_OWORD *)*(void *)(v77 + 24);
      uint64_t v264 = v208;
      v265 = (std::__shared_weak_count *)v209;
      int v117 = LOBYTE(v228);
      unsigned int v118 = (char *)sub_18E017C64((uint64_t)v80);
      sub_18DEDE7B0(v219, v118);
      sub_18E03F90C((uint64_t)&v227, v117, (long long *)v219);
      if (v220 < 0) {
        operator delete(v219[0]);
      }
      if ((*(_DWORD *)&v293[8] & 0x80000000) != 0) {
        __assert_rtn("Zeros", "cnmatrix.h", 3098, "nr >= 0");
      }
      *(void *)&v319[24] = 0x100000003;
      *(void *)v319 = &unk_1EDD18D98;
      v320 = &v321;
      *(_DWORD *)&v319[8] = *(_DWORD *)&v293[8];
      *(_DWORD *)&v319[12] = 1;
      *(_DWORD *)&v319[16] = *(_DWORD *)&v293[8];
      *(_DWORD *)&v319[20] = *(_DWORD *)&v293[8];
      long long v119 = (cnprint::CNPrinter *)sub_18DFE2CC8((uint64_t)v319, 0.0);
      if (*(unsigned char *)v210)
      {
        if (*(_DWORD *)(v210 + 5936) == 174)
        {
          LOWORD(v349[0]) = 2;
          v306[0] = 2;
          double v200 = *((double *)&v231 + 1) + (double)(uint64_t)v231;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)v349, v306, "MeasurementAccumulator::AddMeasurement() failed - Out of space,t_meas,%.3lf", v120, v121, v122, v123, v124, SLOBYTE(v200));
        }
        else if (*(unsigned char *)(v210 + 1))
        {
          if (cnprint::CNPrinter::GetLogLevel(v119) <= 1)
          {
            LOWORD(v349[0]) = 2;
            v306[0] = 1;
            double v202 = *((double *)&v231 + 1) + (double)(uint64_t)v231;
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)v349, v306, "MeasurementAccumulator::AddMeasurement() failed - Locked,t_meas,%.3lf", v130, v131, v132, v133, v134, SLOBYTE(v202));
          }
        }
        else
        {
          BOOL v135 = sub_18DEE4CB8((double *)&v231, v205);
          if (v135)
          {
            if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v135) <= 1)
            {
              LOWORD(v349[0]) = 2;
              v306[0] = 1;
              double v203 = *((double *)&v231 + 1) + (double)(uint64_t)v231;
              cnprint::CNPrinter::Print((cnprint::CNPrinter *)v349, v306, "MeasurementAccumulator::AddMeasurement() failed - Measurement too old,t_meas,%.3lf,t_start,%.3lf", v136, v137, v138, v139, v140, SLOBYTE(v203));
            }
          }
          else
          {
            v349[1] = 0;
            v349[0] = 0;
            sub_18E079614(v349, (uint64_t)&v227);
            v141 = sub_18E06C110(v204, v349);
            sub_18E067C60((uint64_t (**)(void, void, void, void, void))v349);
            uint64_t v142 = *(int *)(v210 + 5936);
            uint64_t v143 = (v142 + 1);
            if (*(void *)(v210 + 56) == v143)
            {
              *(_DWORD *)(v210 + 5936) = v143;
              *(_DWORD *)(v210 + 72) = v143;
              *(_DWORD *)(v210 + 76) = 1;
              *(_DWORD *)(v210 + 80) = v143;
              *(_DWORD *)(v210 + 84) = v143;
              *(_DWORD *)(v210 + 2896) = v143;
              *(_DWORD *)(v210 + 2900) = 1;
              *(_DWORD *)(v210 + 2904) = v143;
              *(_DWORD *)(v210 + 2908) = v143;
              *(_DWORD *)(v210 + 3632) = v143;
              *(_DWORD *)(v210 + 3636) = 1;
              *(_DWORD *)(v210 + 3640) = v143;
              *(_DWORD *)(v210 + 3644) = v143;
              *(_DWORD *)(v210 + 5064) = v143;
              *(_DWORD *)(v210 + 5068) = 1;
              *(_DWORD *)(v210 + 5072) = v143;
              *(_DWORD *)(v210 + 5076) = v143;
              *(_DWORD *)(v210 + 5112) = v143;
              *(_DWORD *)(v210 + 5116) = 1;
              *(_DWORD *)(v210 + 5120) = v143;
              *(_DWORD *)(v210 + 5124) = v143;
              *(_DWORD *)(v210 + 5848) = v143;
              *(_DWORD *)(v210 + 5852) = 1;
              *(_DWORD *)(v210 + 5856) = v143;
              *(_DWORD *)(v210 + 5860) = v143;
              *(_DWORD *)(v210 + 5896) = v143;
              *(_DWORD *)(v210 + 5900) = 1;
              *(_DWORD *)(v210 + 5904) = v143;
              *(_DWORD *)(v210 + 5908) = v143;
              *(_DWORD *)(v210 + 5952) = v143;
              *(_DWORD *)(v210 + 5956) = 1;
              *(_DWORD *)(v210 + 5960) = v143;
              *(_DWORD *)(v210 + 5964) = v143;
              *(_DWORD *)(v210 + 7384) = v143;
              *(_DWORD *)(v210 + 7388) = 1;
              *(_DWORD *)(v210 + 7392) = v143;
              *(_DWORD *)(v210 + 7396) = v143;
              *(_OWORD *)(*(void *)(v210 + 96) + 16 * v142) = v231;
              if (*(_DWORD *)&v316[8] <= *(_DWORD *)&v316[12]) {
                int v144 = *(_DWORD *)&v316[12];
              }
              else {
                int v144 = *(_DWORD *)&v316[8];
              }
              if (*(_DWORD *)&v316[12]) {
                BOOL v145 = *(_DWORD *)&v316[8] == 0;
              }
              else {
                BOOL v145 = 1;
              }
              if (v145) {
                int v146 = 0;
              }
              else {
                int v146 = v144;
              }
              *(_DWORD *)(*(void *)(v210 + 2920) + 4 * v142) = v146;
              sub_18DFE2F24(*(void *)(v210 + 5088) + (v142 << 6), (uint64_t)v316);
              if (*(_DWORD *)&v319[8] <= *(_DWORD *)&v319[12]) {
                int v147 = *(_DWORD *)&v319[12];
              }
              else {
                int v147 = *(_DWORD *)&v319[8];
              }
              if (*(_DWORD *)&v319[12]) {
                BOOL v148 = *(_DWORD *)&v319[8] == 0;
              }
              else {
                BOOL v148 = 1;
              }
              if (v148) {
                int v149 = 0;
              }
              else {
                int v149 = v147;
              }
              *(_DWORD *)(*(void *)(v210 + 5136) + 4 * v142) = v149;
              sub_18DFE2F24(*(void *)(v210 + 5872) + (v142 << 6), (uint64_t)v319);
              __n128 v150 = sub_18DFE2F24(*(void *)(v210 + 5920) + 112 * (int)v142, (uint64_t)v293);
              *(void *)(*(void *)(v210 + 5976) + 8 * v142) = sub_18E041134;
              if (*v141) {
                uint64_t UnprocessedMSRData = ((uint64_t (*)(uint64_t, void *, void, void *, void *, __n128))*v141)(3, v141, 0, &unk_1EDD05C80, &std::__any_imp::__unique_typeinfo<raven::h_GnssAverageDopplerArgs_RavenPNT<double>>::__id, v150);
              }
              else {
                uint64_t UnprocessedMSRData = 0;
              }
              *(void *)(*(void *)(v210 + 7408) + 8 * v142) = UnprocessedMSRData;
LABEL_137:
              v247 = &unk_1EDD0AE58;
              if (SHIBYTE(v248.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v248.__r_.__value_.__l.__data_);
              }
              v247 = &unk_1EDD0A9B8;
              if (SHIBYTE(v232.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v232.__r_.__value_.__l.__data_);
              }
              float64x2_t v227 = &unk_1EDD0A4E8;
              if (v230 < 0) {
                operator delete(v229[0]);
              }
              goto LABEL_143;
            }
            LOWORD(v349[0]) = 2;
            v306[0] = 4;
            char v151 = (*((uint64_t (**)(void **))v227 + 2))(&v227);
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)v349, v306, "MeasurementAccumulator::AddMeasurement() failed - allocation failed,meas_type,%d,t_meas,%.3lf", v152, v153, v154, v155, v156, v151);
          }
        }
      }
      else if (cnprint::CNPrinter::GetLogLevel(v119) <= 1)
      {
        LOWORD(v349[0]) = 2;
        v306[0] = 1;
        double v201 = *((double *)&v231 + 1) + (double)(uint64_t)v231;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v349, v306, "MeasurementAccumulator::AddMeasurement() failed - Not initialized,t_meas,%.3lf", v125, v126, v127, v128, v129, SLOBYTE(v201));
      }
      LOWORD(v349[0]) = 12;
      v306[0] = 4;
      *(void *)v319 = (*(uint64_t (**)(uint64_t))(*(void *)v207 + 16))(v207);
      *(void *)&v319[8] = v157;
      v158 = sub_18E017C64((uint64_t)v80);
      cnprint::CNLogFormatter::FormatGeneral(v216, (uint64_t)v319, "Could not add measurement - average Doppler for %s", v158);
      LOBYTE(v164) = v216;
      if (*(char *)(v206 + 2511) < 0) {
        uint64_t v164 = *(void *)(v206 + 2488);
      }
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v349, v306, "%s", v159, v160, v161, v162, v163, v164);
      goto LABEL_137;
    }
LABEL_147:
    uint64_t v77 = *(void *)(v77 + 8);
  }
  while ((void **)v77 != &v307);
  uint64_t v4 = v206;
  uint64_t v75 = v207;
  if (v78) {
    uint64_t UnprocessedMSRData = sub_18E041A60(v206 + 19360, v78, *(_DWORD *)(*(void *)(v206 + 1168) + 1472));
  }
LABEL_154:
  unsigned int LogLevel = (cnprint::CNPrinter *)cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)UnprocessedMSRData);
  if (LogLevel <= 1)
  {
    LOWORD(v298[0]) = 12;
    v293[0] = 1;
    __src.__r_.__value_.__r.__words[0] = (*(uint64_t (**)(uint64_t))(*(void *)v75 + 16))(v75);
    __src.__r_.__value_.__l.__size_ = v166;
    raven::RavenSequentialGNSSMeasurementSelector::StringOfL1MeasurementCountsByConstellation((raven::RavenSequentialGNSSMeasurementSelector *)(v4 + 16800), &v227);
    long long v167 = SHIBYTE(v229[0]) >= 0 ? (const char *)&v227 : (const char *)v227;
    char v168 = cnprint::CNLogFormatter::FormatGeneral(v4 + 2488, (uint64_t)&__src, "%s", v167);
    if (*(char *)(v4 + 2511) >= 0) {
      LOBYTE(v174) = v168;
    }
    else {
      uint64_t v174 = *(void *)(v4 + 2488);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v298, v293, "%s", v169, v170, v171, v172, v173, v174);
    if (SHIBYTE(v229[0]) < 0) {
      operator delete(v227);
    }
  }
  if (cnprint::CNPrinter::GetLogLevel(LogLevel) <= 1)
  {
    LOWORD(v298[0]) = 12;
    v293[0] = 1;
    __src.__r_.__value_.__r.__words[0] = (*(uint64_t (**)(uint64_t))(*(void *)v75 + 16))(v75);
    __src.__r_.__value_.__l.__size_ = v175;
    raven::RavenSequentialGNSSMeasurementSelector::StringOfL5MeasurementCountsByConstellation((raven::RavenSequentialGNSSMeasurementSelector *)(v4 + 16800), &v227);
    v176 = SHIBYTE(v229[0]) >= 0 ? (const char *)&v227 : (const char *)v227;
    char v177 = cnprint::CNLogFormatter::FormatGeneral(v4 + 2488, (uint64_t)&__src, "%s", v176);
    if (*(char *)(v4 + 2511) >= 0) {
      LOBYTE(v183) = v177;
    }
    else {
      uint64_t v183 = *(void *)(v4 + 2488);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v298, v293, "%s", v178, v179, v180, v181, v182, v183);
    if (SHIBYTE(v229[0]) < 0) {
      operator delete(v227);
    }
  }
  LOWORD(v298[0]) = 12;
  v293[0] = 2;
  __src.__r_.__value_.__r.__words[0] = (*(uint64_t (**)(uint64_t))(*(void *)v75 + 16))(v75);
  __src.__r_.__value_.__l.__size_ = v184;
  raven::RavenSequentialGNSSMeasurementSelector::StringOfOverallMeasurementSelectionCounts((raven::RavenSequentialGNSSMeasurementSelector *)(v4 + 16800), &v227);
  if (SHIBYTE(v229[0]) >= 0) {
    v185 = (const char *)&v227;
  }
  else {
    v185 = (const char *)v227;
  }
  cnprint::CNLogFormatter::FormatGeneral(v4 + 2488, (uint64_t)&__src, "%s", v185);
  if (*(char *)(v4 + 2511) >= 0) {
    LOBYTE(v191) = v4 - 72;
  }
  else {
    uint64_t v191 = *(void *)(v4 + 2488);
  }
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)v298, v293, "%s", v186, v187, v188, v189, v190, v191);
  if (SHIBYTE(v229[0]) < 0) {
    operator delete(v227);
  }
  LOWORD(v298[0]) = 12;
  v293[0] = 2;
  __src.__r_.__value_.__r.__words[0] = (*(uint64_t (**)(uint64_t))(*(void *)v207 + 16))(v207);
  __src.__r_.__value_.__l.__size_ = v192;
  raven::RavenSequentialGNSSMeasurementSelector::StringOfOverallMeasurementSelectionCountsForRayTracedMeasurements((raven::RavenSequentialGNSSMeasurementSelector *)(v4 + 16800), &v227);
  if (SHIBYTE(v229[0]) >= 0) {
    uint64_t v193 = (const char *)&v227;
  }
  else {
    uint64_t v193 = (const char *)v227;
  }
  cnprint::CNLogFormatter::FormatGeneral(v4 + 2488, (uint64_t)&__src, "%s", v193);
  if (*(char *)(v4 + 2511) >= 0) {
    LOBYTE(v199) = v4 - 72;
  }
  else {
    uint64_t v199 = *(void *)(v4 + 2488);
  }
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)v298, v293, "%s", v194, v195, v196, v197, v198, v199);
  if (SHIBYTE(v229[0]) < 0) {
    operator delete(v227);
  }
  uint64_t v33 = 0;
LABEL_189:
  sub_18E068ED0(&v307);
  return v33;
}

void sub_18E03C640(_Unwind_Exception *a1)
{
}

void raven::RavenPNTEstimator::ResetOscillatorStates(raven::RavenPNTEstimator *this)
{
  *((_OWORD *)this + 7) = *((_OWORD *)this + 5);
  uint64_t v168 = 0x200000002;
  std::string::size_type v166 = &unk_1EDD18BB8;
  uint64_t v169 = (double *)&v170;
  long long v167 = xmmword_18E1FD1B0;
  sub_18DFE2CC8((uint64_t)&v166, 0.0);
  uint64_t v2 = *((void *)this + 146);
  double v3 = *(double *)(v2 + 1256) * *(double *)(v2 + 1256);
  double v4 = *(double *)(v2 + 1264) * *(double *)(v2 + 1264);
  uint64_t v5 = v169;
  double *v169 = v3;
  v5[SHIDWORD(v167) + 1] = v4;
  uint64_t v6 = *((void *)this + 1831);
  *(void *)(v6 + 152) = 0;
  *(void *)(v6 + 160) = 0;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EB403A60, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EB403A60))
  {
    uint64_t v142 = 0x200000001;
    *(void *)v141 = &unk_1EDD181F8;
    uint64_t v143 = v144;
    *(_OWORD *)&v141[8] = xmmword_18E1FD740;
    v144[0] = 0x1300000012;
    sub_18E059674((uint64_t)v141, (uint64_t)&unk_1EB403BC8);
    __cxa_atexit((void (*)(void *))sub_18E05971C, &unk_1EB403BC8, &dword_18DEDB000);
    __cxa_guard_release(&qword_1EB403A60);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EB403A68, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EB403A68))
  {
    uint64_t v125 = 0;
    uint64_t v142 = 0x1A00000001;
    *(void *)v141 = &unk_1EDD18168;
    uint64_t v143 = v144;
    *(_OWORD *)&v141[8] = xmmword_18E1FD7C0;
    do
    {
      *((_DWORD *)v144 + v125) = v125;
      ++v125;
    }
    while (v125 != 26);
    sub_18E058650((uint64_t)&unk_1EB4045D0, (uint64_t)v141);
    __cxa_atexit((void (*)(void *))sub_18E0576A8, &unk_1EB4045D0, &dword_18DEDB000);
    __cxa_guard_release(&qword_1EB403A68);
  }
  uint64_t v163 = 0x1A00000002;
  uint64_t v161 = &unk_1EDD18B88;
  uint64_t v164 = v165;
  long long v162 = xmmword_18E1FD7D0;
  sub_18DFE2CC8((uint64_t)&v161, 0.0);
  uint64_t v142 = 0x1A00000002;
  *(_OWORD *)&v141[8] = xmmword_18E1FD7D0;
  uint64_t v143 = v144;
  *(void *)v141 = &unk_1EDD16548;
  BOOL v145 = (char *)this + 14880;
  uint64_t v148 = 0x100000002;
  long long v147 = xmmword_18E1FD1A0;
  int v146 = &unk_1EDD18B58;
  int v149 = &v150;
  uint64_t v153 = 0x10000001ALL;
  char v151 = &unk_1EDD186D8;
  long long v152 = xmmword_18E1FD600;
  uint64_t v154 = &v155;
  sub_18DFEEA3C((uint64_t)&v146, (uint64_t)&unk_1EB403BC8);
  sub_18DFEEA3C((uint64_t)&v151, (uint64_t)&unk_1EB4045D0);
  uint64_t v7 = DWORD2(v147);
  uint64_t v8 = DWORD2(v152);
  *(_DWORD *)&v141[8] = DWORD2(v147);
  *(_DWORD *)&v141[12] = DWORD2(v152);
  *(_DWORD *)&v141[16] = DWORD2(v152) * DWORD2(v147);
  *(_DWORD *)&v141[20] = DWORD2(v147);
  if (DWORD2(v152))
  {
    int v9 = 0;
    uint64_t v10 = 0;
    int v11 = *((_DWORD *)this + 3725);
    uint64_t v12 = *((void *)this + 1864);
    uint64_t v13 = v154;
    double v14 = v149;
    int8x16_t v15 = v143;
    do
    {
      if (v7)
      {
        int v16 = *((_DWORD *)v13 + v10) * v11;
        int8x16_t v17 = (int *)v14;
        int v18 = v9;
        uint64_t v19 = v7;
        do
        {
          int v20 = *v17++;
          v15[v18++] = *(void *)(v12 + 8 * (v20 + v16));
          --v19;
        }
        while (v19);
      }
      ++v10;
      v9 += v7;
    }
    while (v10 != v8);
  }
  if (v7 != v162) {
    goto LABEL_107;
  }
  if (v8 != DWORD1(v162)) {
    goto LABEL_108;
  }
  if (v8)
  {
    int v21 = 0;
    uint64_t v22 = 0;
    BOOL v23 = v164;
    double v24 = v149;
    uint64_t v25 = v154;
    uint64_t v26 = v145;
    uint64_t v27 = v143;
    do
    {
      if (v7)
      {
        int v28 = *((_DWORD *)v26 + 5) * *((_DWORD *)v25 + v22);
        uint64_t v29 = *((void *)v26 + 4);
        int v30 = v21;
        uint64_t v31 = (int *)v24;
        int v32 = v7;
        do
        {
          uint64_t v33 = v23[v30];
          int v34 = *v31++;
          *(void *)(v29 + 8 * (v34 + v28)) = v33;
          v27[v30++] = v33;
          --v32;
        }
        while (v32);
      }
      ++v22;
      v21 += v7;
    }
    while (v22 != v8);
  }
  uint64_t v163 = 0x20000001ALL;
  uint64_t v161 = &unk_1EDD187C8;
  uint64_t v164 = v165;
  long long v162 = xmmword_18E1FD7E0;
  sub_18DFE2CC8((uint64_t)&v161, 0.0);
  uint64_t v142 = 0x20000001ALL;
  *(_OWORD *)&v141[8] = xmmword_18E1FD7E0;
  uint64_t v143 = v144;
  *(void *)v141 = &unk_1EDD164B8;
  BOOL v145 = (char *)this + 14880;
  uint64_t v148 = 0x10000001ALL;
  long long v147 = xmmword_18E1FD600;
  int v146 = &unk_1EDD186D8;
  int v149 = &v150;
  uint64_t v158 = 0x100000002;
  uint64_t v156 = &unk_1EDD18B58;
  long long v157 = xmmword_18E1FD1A0;
  uint64_t v159 = &v160;
  sub_18DFEEA3C((uint64_t)&v146, (uint64_t)&unk_1EB4045D0);
  sub_18DFEEA3C((uint64_t)&v156, (uint64_t)&unk_1EB403BC8);
  uint64_t v35 = DWORD2(v147);
  uint64_t v36 = DWORD2(v157);
  *(_DWORD *)&v141[8] = DWORD2(v147);
  *(_DWORD *)&v141[12] = DWORD2(v157);
  *(_DWORD *)&v141[16] = DWORD2(v157) * DWORD2(v147);
  *(_DWORD *)&v141[20] = DWORD2(v147);
  if (DWORD2(v157))
  {
    int v37 = 0;
    uint64_t v38 = 0;
    int v39 = *((_DWORD *)this + 3725);
    uint64_t v40 = *((void *)this + 1864);
    std::string::size_type v41 = v159;
    int8x16_t v42 = v149;
    uint64_t v43 = v143;
    do
    {
      if (v35)
      {
        int v44 = *((_DWORD *)v41 + v38) * v39;
        int8x16_t v45 = (int *)v42;
        int v46 = v37;
        uint64_t v47 = v35;
        do
        {
          int v48 = *v45++;
          v43[v46++] = *(void *)(v40 + 8 * (v48 + v44));
          --v47;
        }
        while (v47);
      }
      ++v38;
      v37 += v35;
    }
    while (v38 != v36);
  }
  if (v35 != v162) {
LABEL_107:
  }
    __assert_rtn("operator=", "cnsubmatrix.h", 376, "this->num_rows_ == A.num_rows_");
  if (v36 != DWORD1(v162)) {
LABEL_108:
  }
    __assert_rtn("operator=", "cnsubmatrix.h", 377, "this->num_cols_ == A.num_cols_");
  if (v36)
  {
    int v49 = 0;
    uint64_t v50 = 0;
    long long v51 = v164;
    long long v52 = v149;
    char v53 = v159;
    long long v54 = v145;
    long long v55 = v143;
    do
    {
      if (v35)
      {
        int v56 = *((_DWORD *)v54 + 5) * *((_DWORD *)v53 + v50);
        uint64_t v57 = *((void *)v54 + 4);
        int v58 = v49;
        unint64_t v59 = (int *)v52;
        int v60 = v35;
        do
        {
          uint64_t v61 = v51[v58];
          int v62 = *v59++;
          *(void *)(v57 + 8 * (v62 + v56)) = v61;
          v55[v58++] = v61;
          --v60;
        }
        while (v60);
      }
      ++v50;
      v49 += v35;
    }
    while (v50 != v36);
  }
  int v63 = *((_DWORD *)this + 3725);
  uint64_t v64 = *((void *)this + 1864);
  *(double *)(v64 + 8 * (19 * v63 + 19)) = v3;
  *(double *)(v64 + 8 * (20 * v63 + 20)) = v4;
  v144[0] = 0x1300000012;
  uint64_t v138 = 0x100000002;
  v136[2] = &unk_1EDD18B58;
  long long v137 = xmmword_18E1FD1A0;
  uint64_t v139 = &v140;
  uint64_t v140 = 0x1300000012;
  uint64_t v134 = 0x100000002;
  uint64_t v132 = &unk_1EDD18B28;
  BOOL v135 = v136;
  long long v133 = xmmword_18E1FD1A0;
  sub_18DFE2CC8((uint64_t)&v132, 0.0);
  uint64_t v178 = 0x200000002;
  long long v177 = xmmword_18E1FD1B0;
  v176 = &unk_1EDD18BB8;
  uint64_t v179 = &v180;
  v141[0] = 0;
  sub_18DFEEFE8((uint64_t)&v166, (uint64_t)&v176, v141);
  uint64_t v183 = 0x200000002;
  uint64_t v181 = &unk_1EDD18BB8;
  long long v182 = xmmword_18E1FD1B0;
  std::string::size_type v184 = v185;
  uint64_t v173 = 0x100000002;
  long long v172 = xmmword_18E1FD1A0;
  uint64_t v171 = &unk_1EDD18B58;
  uint64_t v174 = &v175;
  uint64_t v142 = 0x100000008;
  *(_OWORD *)&v141[8] = xmmword_18E1FD760;
  *(void *)v141 = &unk_1EDD19CC8;
  uint64_t v143 = v144;
  sub_18E01BFEC((uint64_t)&v176, (uint64_t)&v171, (uint64_t)v141, (uint64_t)&v181);
  int v65 = DWORD1(v182);
  int v66 = v182;
  uint64_t v163 = 0x200000002;
  uint64_t v161 = &unk_1EDD18BB8;
  uint64_t v164 = v165;
  *(void *)&long long v162 = __PAIR64__(v182, DWORD1(v182));
  DWORD2(v162) = v182 * DWORD1(v182);
  HIDWORD(v162) = DWORD1(v182);
  if (DWORD1(v182))
  {
    int v67 = 0;
    int v68 = 0;
    int v69 = HIDWORD(v182);
    long long v70 = v184;
    do
    {
      int v71 = v67;
      int v72 = v68;
      for (int i = v66; i; --i)
      {
        v165[v72] = *(void *)&v70[2 * v71];
        v72 += v65;
        ++v71;
      }
      ++v68;
      v67 += v69;
    }
    while (v68 != v65);
  }
  uint64_t v173 = 0x100000002;
  long long v172 = xmmword_18E1FD1A0;
  uint64_t v171 = &unk_1EDD18B28;
  uint64_t v174 = &v175;
  uint64_t v142 = 0x200000002;
  *(_OWORD *)&v141[8] = xmmword_18E1FD1B0;
  *(void *)v141 = &unk_1EDD18BB8;
  uint64_t v143 = v144;
  uint64_t v129 = 0x200000002;
  uint64_t v127 = &unk_1EDD18BB8;
  long long v128 = xmmword_18E1FD1B0;
  uint64_t v130 = &v131;
  sub_18E06EA40((uint64_t)&v161, (uint64_t)&v171, (uint64_t)v141, (uint64_t)&v127);
  if (v137 <= DWORD1(v137)) {
    unsigned int v74 = DWORD1(v137);
  }
  else {
    unsigned int v74 = v137;
  }
  if (DWORD1(v137)) {
    BOOL v75 = v137 == 0;
  }
  else {
    BOOL v75 = 1;
  }
  if (v75) {
    uint64_t v76 = 0;
  }
  else {
    uint64_t v76 = v74;
  }
  uint64_t v142 = 0x100000002;
  *(_OWORD *)&v141[8] = xmmword_18E1FD1A0;
  *(void *)v141 = &unk_1EDD18B28;
  uint64_t v143 = v144;
  sub_18DFE2B44((uint64_t)&v127, (uint64_t)&v132, (uint64_t)v141);
  double v77 = sub_18E07FC10((uint64_t)&v161, (uint64_t)v141);
  if (!*((_DWORD *)this + 4035))
  {
    sub_18DFE2F24((uint64_t)this + 15584, (uint64_t)this + 15040);
    sub_18DFE2F24((uint64_t)this + 15832, (uint64_t)this + 15288);
    *(void *)&double v77 = sub_18DFE2F24((uint64_t)this + 15880, (uint64_t)this + 15336).n128_u64[0];
  }
  *((_DWORD *)this + 4035) = 1;
  if (v137 && DWORD1(v137))
  {
    unsigned int v78 = (char *)this + 16136;
    *((unsigned char *)this + 16136) = 0;
    unsigned int v79 = *((_DWORD *)this + 3898);
    uint64_t v126 = this;
    unsigned int v80 = *((_DWORD *)this + 3899);
    if (v79 <= v80) {
      unsigned int v81 = *((_DWORD *)this + 3899);
    }
    else {
      unsigned int v81 = *((_DWORD *)this + 3898);
    }
    if (v80) {
      BOOL v82 = v79 == 0;
    }
    else {
      BOOL v82 = 1;
    }
    if (v82) {
      uint64_t v83 = 0;
    }
    else {
      uint64_t v83 = v81;
    }
    if ((int)v76 >= 1)
    {
      uint64_t v84 = 0;
      long long v85 = (const void **)((char *)v126 + 16304);
      do
      {
        int v86 = *(_DWORD *)((char *)v139 + v84);
        if (v86 < 0 || v86 >= (int)v83)
        {
          *(_WORD *)v141 = 2;
          LOBYTE(v181) = 4;
          cnprint::CNLogFormatter::FormatGeneral(v85, "ResetStates(): states must contain valid indices into x, Rxx, and zx.", v77);
          if (v78[191] >= 0) {
            LOBYTE(v92) = (_BYTE)v126 - 80;
          }
          else {
            long long v92 = *v85;
          }
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)v141, (unsigned __int8 *)&v181, "%s", v87, v88, v89, v90, v91, (char)v92);
        }
        v84 += 4;
      }
      while (4 * v76 != v84);
    }
    uint64_t v142 = 0x1A00000001;
    *(void *)v141 = &unk_1EDD18168;
    uint64_t v143 = v144;
    if (v83 == 1)
    {
      char v95 = 0;
      *(void *)&long long v98 = 0x100000001;
      *((void *)&v98 + 1) = 0x100000001;
      *(_OWORD *)&v141[8] = v98;
      LODWORD(v144[0]) = 0;
      int v96 = 1;
      int v97 = 1;
      int v93 = v126;
    }
    else
    {
      int v93 = v126;
      if ((int)v83 <= 0)
      {
        int v96 = 0;
        int v97 = 0;
        *(void *)&v141[8] = 0;
        *(void *)&v141[16] = 0;
        char v95 = 1;
      }
      else
      {
        uint64_t v94 = 0;
        *(_DWORD *)&v141[8] = 1;
        *(_DWORD *)&v141[12] = v83;
        *(_DWORD *)&v141[16] = v83;
        *(_DWORD *)&v141[20] = 1;
        do
        {
          *((_DWORD *)v144 + v94) = v94;
          ++v94;
        }
        while (v83 != v94);
        char v95 = 0;
        int v96 = 1;
        int v97 = v83;
      }
    }
    uint64_t v183 = 0x10000001ALL;
    uint64_t v181 = &unk_1EDD186D8;
    std::string::size_type v184 = v185;
    *(void *)&long long v182 = __PAIR64__(v96, v97);
    DWORD2(v182) = v97 * v96;
    HIDWORD(v182) = v97;
    if (v97)
    {
      int v99 = 0;
      for (int j = 0; j != v97; ++j)
      {
        if ((v95 & 1) == 0)
        {
          int v101 = 0;
          do
          {
            v185[j + HIDWORD(v182) * v101] = *((_DWORD *)v144 + v99 + v101);
            ++v101;
          }
          while (v96 != v101);
        }
        v99 += v96;
      }
    }
    if ((int)v76 >= 1)
    {
      uint64_t v102 = (int *)v139;
      uint64_t v103 = v76;
      do
      {
        uint64_t v104 = *v102++;
        v185[v104] = -1;
        --v103;
      }
      while (v103);
    }
    sub_18E07E6AC(&v176, v83);
    uint64_t v142 = 0x1A00000001;
    *(void *)v141 = &unk_1EDD18168;
    uint64_t v143 = v144;
    if (v76 == 1)
    {
      char v105 = 0;
      *(void *)&long long v106 = 0x100000001;
      *((void *)&v106 + 1) = 0x100000001;
      *(_OWORD *)&v141[8] = v106;
      LODWORD(v144[0]) = 0;
      int v107 = 1;
      int v108 = 1;
    }
    else if ((int)v76 <= 0)
    {
      int v107 = 0;
      int v108 = 0;
      *(void *)&v141[8] = 0;
      *(void *)&v141[16] = 0;
      char v105 = 1;
    }
    else
    {
      uint64_t v109 = 0;
      *(_DWORD *)&v141[8] = 1;
      *(_DWORD *)&v141[12] = v76;
      *(_DWORD *)&v141[16] = v76;
      *(_DWORD *)&v141[20] = 1;
      do
      {
        *((_DWORD *)v144 + v109) = v109;
        ++v109;
      }
      while (v76 != v109);
      char v105 = 0;
      int v107 = 1;
      int v108 = v76;
    }
    uint64_t v173 = 0x10000001ALL;
    uint64_t v171 = &unk_1EDD186D8;
    uint64_t v174 = &v175;
    *(void *)&long long v172 = __PAIR64__(v107, v108);
    DWORD2(v172) = v108 * v107;
    HIDWORD(v172) = v108;
    if (v108)
    {
      int v110 = 0;
      for (int k = 0; k != v108; ++k)
      {
        if ((v105 & 1) == 0)
        {
          int v112 = 0;
          do
          {
            *((_DWORD *)&v175 + k + HIDWORD(v172) * v112) = *((_DWORD *)v144 + v110 + v112);
            ++v112;
          }
          while (v107 != v112);
        }
        v110 += v107;
      }
    }
    sub_18E07E768((uint64_t)v141, (uint64_t)&v176, (uint64_t)&v171);
    sub_18E07DFD0((uint64_t)v141, SDWORD2(v137), (int *)v139);
    if ((int)v83 > (int)v76)
    {
      LODWORD(v113) = 0;
      uint64_t v114 = v184;
      uint64_t v115 = v179;
      uint64_t v116 = (int)v76;
      do
      {
        uint64_t v113 = (int)v113;
        do
          int v117 = v114[v113++];
        while (v117 == -1);
        *((_DWORD *)v115 + v116++) = v117;
      }
      while (v116 != (int)v83);
    }
    sub_18E07E084((uint64_t)v93 + 15032, v83, (uint64_t)&v176);
  }
  sub_18DFE2F24((uint64_t)this + 15040, (uint64_t)this + 15584);
  sub_18DFE2F24((uint64_t)this + 15288, (uint64_t)this + 15832);
  sub_18DFE2F24((uint64_t)this + 15336, (uint64_t)this + 15880);
  *((_DWORD *)this + 4035) = 1;
  LOWORD(v161) = 12;
  LOBYTE(v181) = 2;
  *(_OWORD *)v141 = *((_OWORD *)this + 5);
  char v118 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)v141, "Resetting estimator oscillator states.");
  if (*((char *)this + 2511) >= 0) {
    LOBYTE(v124) = v118;
  }
  else {
    uint64_t v124 = *((void *)this + 311);
  }
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v161, (unsigned __int8 *)&v181, "%s", v119, v120, v121, v122, v123, v124);
}

void sub_18E03DCC0(_Unwind_Exception *a1)
{
}

uint64_t raven::RavenPNTEstimator::UpdateClockOffsetEstimateIfNecessary(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a2 + 8)) {
    BOOL v5 = *(unsigned char *)(a2 + 24) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    double v6 = *(double *)(*(void *)(a1 + 14648) + 152) * 0.001;
    double v7 = round(v6);
    if (fabs(v7) < 2.22044605e-16) {
      return 1;
    }
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)a1) <= 1)
    {
      __int16 v28 = 12;
      unsigned __int8 v27 = 1;
      char v8 = cnprint::CNLogFormatter::FormatGeneral(a1 + 2488, a3, "clock offset exceeds 0.5 ms,%.3lf ms", v6);
      if (*(char *)(a1 + 2511) >= 0) {
        LOBYTE(v14) = v8;
      }
      else {
        uint64_t v14 = *(void *)(a1 + 2488);
      }
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v28, &v27, "%s", v9, v10, v11, v12, v13, v14);
    }
    double v15 = v7 * -0.001;
    uint64_t v16 = a1;
  }
  else
  {
    double v17 = *(double *)(a2 + 16);
    if (vabdd_f64(*(double *)a2, v17) < 2.22044605e-16) {
      return 1;
    }
    double v19 = *(double *)a2 - v17;
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)a1) <= 1)
    {
      __int16 v30 = 12;
      unsigned __int8 v29 = 1;
      char v20 = cnprint::CNLogFormatter::FormatGeneral(a1 + 2488, a3, "clock jump detected");
      if (*(char *)(a1 + 2511) >= 0) {
        LOBYTE(v26) = v20;
      }
      else {
        uint64_t v26 = *(void *)(a1 + 2488);
      }
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v30, &v29, "%s", v21, v22, v23, v24, v25, v26);
    }
    uint64_t v16 = a1;
    double v15 = v19;
  }

  return raven::RavenPNTEstimator::AdjustClockOffset(v16, a3, v15);
}

uint64_t sub_18E03DF88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 24) = 0x100000054;
  *(void *)a1 = &unk_1EDD19848;
  *(_OWORD *)(a1 + 8) = xmmword_18E1FD7F0;
  *(void *)(a1 + 32) = a1 + 40;
  return sub_18E072E48(a2, a3, a1);
}

void sub_18E03DFF4(_Unwind_Exception *a1)
{
  *uint64_t v1 = &unk_1EDD174A8;
  _Unwind_Resume(a1);
}

uint64_t sub_18E03E014(uint64_t a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a2 + 8);
  int v2 = *(_DWORD *)(a2 + 12);
  *(void *)(a1 + 24) = 0x10000001CLL;
  *(void *)a1 = &unk_1EDD188E8;
  *(_DWORD *)(a1 + 8) = v2;
  *(_DWORD *)(a1 + 12) = v3;
  *(_DWORD *)(a1 + 16) = v3 * v2;
  *(_DWORD *)(a1 + 20) = v2;
  *(void *)(a1 + 32) = a1 + 40;
  return sub_18DFEE808(a2, a1);
}

void sub_18E03E080(_Unwind_Exception *a1)
{
  *uint64_t v1 = &unk_1EDD174A8;
  _Unwind_Resume(a1);
}

uint64_t sub_18E03E0A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 24) = 0x100000038;
  *(void *)a1 = &unk_1EDD19668;
  *(_OWORD *)(a1 + 8) = xmmword_18E1FD800;
  *(void *)(a1 + 32) = a1 + 40;
  return sub_18E072E48(a2, a3, a1);
}

void sub_18E03E10C(_Unwind_Exception *a1)
{
  *uint64_t v1 = &unk_1EDD174A8;
  _Unwind_Resume(a1);
}

void *sub_18E03E12C(void *result)
{
  *double result = &unk_1EDD174A8;
  return result;
}

void *sub_18E03E14C(void *result)
{
  *double result = &unk_1EDD174A8;
  return result;
}

void *sub_18E03E16C(void *result)
{
  *double result = &unk_1EDD174A8;
  return result;
}

void *sub_18E03E18C(void *result)
{
  *double result = &unk_1EDD174A8;
  return result;
}

void *sub_18E03E1AC(void *result)
{
  result[34] = &unk_1EDD174A8;
  *double result = &unk_1EDD17478;
  return result;
}

void *sub_18E03E1EC(void *a1)
{
  *a1 = &unk_1EDD164E8;
  a1[26] = &unk_1EDD174A8;
  a1[7] = &unk_1EDD174A8;
  return sub_18E06B384(a1);
}

void sub_18E03E24C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v5.i32[1] = 1;
  v5.i32[0] = *(_DWORD *)(a2 + 16);
  int32x2_t v16 = v5;
  sub_18E0737B4((uint64_t)&v27, a2);
  int32x4_t v6 = vdupq_lane_s32(v16, 0);
  v6.i32[1] = 1;
  long long v28 = (__int128)v6;
  sub_18DFE2F24(a1 + 8, (uint64_t)&v27);
  uint64_t v19 = 0x800000008;
  double v17 = &unk_1EDD19DE8;
  long long v18 = xmmword_18E1FD750;
  char v20 = v21;
  LOBYTE(v27) = 0;
  sub_18DFEEFE8(a3, (uint64_t)&v17, (BOOL *)&v27);
  uint64_t v29 = 0x800000008;
  long long v28 = xmmword_18E1FD750;
  unsigned __int8 v27 = &unk_1EDD19DE8;
  __int16 v30 = v31;
  uint64_t v34 = 0x100000008;
  long long v33 = xmmword_18E1FD760;
  int v32 = &unk_1EDD19CF8;
  uint64_t v35 = v36;
  uint64_t v24 = 0x100000020;
  uint64_t v22 = &unk_1EDD18C78;
  long long v23 = xmmword_18E1FD780;
  uint64_t v25 = v26;
  sub_18E01BFEC((uint64_t)&v17, (uint64_t)&v32, (uint64_t)&v22, (uint64_t)&v27);
  int v7 = DWORD1(v28);
  int v8 = v28;
  uint64_t v24 = 0x800000008;
  uint64_t v22 = &unk_1EDD19DE8;
  uint64_t v25 = v26;
  *(void *)&long long v23 = __PAIR64__(v28, DWORD1(v28));
  DWORD2(v23) = v28 * DWORD1(v28);
  HIDWORD(v23) = DWORD1(v28);
  if (DWORD1(v28))
  {
    int v9 = 0;
    int v10 = 0;
    int v11 = HIDWORD(v28);
    uint64_t v12 = v30;
    do
    {
      int v13 = v9;
      int v14 = v10;
      for (int i = v8; i; --i)
      {
        v26[v14] = *(void *)&v12[8 * v13];
        v14 += v7;
        ++v13;
      }
      ++v10;
      v9 += v11;
    }
    while (v10 != v7);
  }
  uint64_t v34 = 0x100000008;
  long long v33 = xmmword_18E1FD760;
  int v32 = &unk_1EDD19CC8;
  uint64_t v35 = v36;
  uint64_t v29 = 0x800000008;
  long long v28 = xmmword_18E1FD750;
  unsigned __int8 v27 = &unk_1EDD19DE8;
  __int16 v30 = v31;
  uint64_t v19 = 0x800000008;
  double v17 = &unk_1EDD19DE8;
  long long v18 = xmmword_18E1FD750;
  char v20 = v21;
  sub_18E06EA40((uint64_t)&v22, (uint64_t)&v32, (uint64_t)&v27, (uint64_t)&v17);
  sub_18DFE2F24(a1 + 112, (uint64_t)&v17);
  uint64_t v29 = 0x100000008;
  long long v28 = xmmword_18E1FD760;
  unsigned __int8 v27 = &unk_1EDD19CC8;
  __int16 v30 = v31;
  sub_18DFE2B44(a1 + 112, a1 + 8, (uint64_t)&v27);
  sub_18DFE2F24(a1 + 664, (uint64_t)&v27);
  sub_18DFE2F24(a1 + 768, a1 + 8);
  sub_18DFE2F24(a1 + 872, a1 + 112);
  sub_18DFE2F24(a1 + 1424, a1 + 664);
  *(void *)(a1 + 1528) = 0x3FF0000000000000;
  *(unsigned char *)(a1 + 1536) = 0;
  *(_DWORD *)(a1 + 1540) = 1;
}

void *sub_18E03E5BC(void *result)
{
  *double result = &unk_1EDD17478;
  return result;
}

void *sub_18E03E5DC(void *result)
{
  *double result = &unk_1EDD17478;
  return result;
}

double sub_18E03E5FC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 24) = 0x100000008;
  *(void *)a2 = &unk_1EDD19CC8;
  *(_OWORD *)(a2 + 8) = xmmword_18E1FD760;
  *(void *)(a2 + 32) = a2 + 40;
  if (*(_DWORD *)(a1 + 1540)) {
    uint64_t v2 = a1 + 768;
  }
  else {
    uint64_t v2 = a1 + 8;
  }
  *(void *)&double result = sub_18DFE2F24(a2, v2).n128_u64[0];
  return result;
}

uint64_t sub_18E03E654(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8 = *(_DWORD *)(a1 + 8);
  unsigned int v9 = *(_DWORD *)(a1 + 12);
  if (v8 <= v9) {
    int v10 = *(_DWORD *)(a1 + 12);
  }
  else {
    int v10 = *(_DWORD *)(a1 + 8);
  }
  if (v8) {
    BOOL v11 = v9 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  BOOL v12 = !v11 && v10 == 6;
  if (v12
    && ((unsigned int v14 = *(_DWORD *)(a2 + 8), v15 = *(_DWORD *)(a2 + 12), v14 <= v15)
      ? (int v16 = *(_DWORD *)(a2 + 12))
      : (int v16 = *(_DWORD *)(a2 + 8)),
        v14 ? (BOOL v17 = v15 == 0) : (BOOL v17 = 1),
        !v17 ? (BOOL v18 = v16 == 6) : (BOOL v18 = 0),
        v18))
  {
    uint64_t v24 = *a3;
    uint64_t v43 = 0x600000006;
    std::string::size_type v41 = &unk_1EDD197B8;
    int v44 = v45;
    long long v42 = xmmword_18E1F8570;
    sub_18DFE2CC8((uint64_t)&v41, 0.0);
    int v25 = 0;
    int v26 = HIDWORD(v42) + 1;
    uint64_t v27 = 6;
    long long v28 = v44;
    do
    {
      *(void *)&v28[8 * v25] = 0x3FF0000000000000;
      v25 += v26;
      --v27;
    }
    while (v27);
    sub_18E0736C8((uint64_t)v46, (uint64_t)&v41);
    int v29 = v47;
    uint64_t v30 = v48;
    *(void *)(v48 + 24 * v47) = v24;
    *(void *)(v30 + 8 * ((4 * v29) | 1)) = v24;
    *(void *)(v30 + 8 * (5 * v29 + 2)) = v24;
    uint64_t v38 = 0x100000008;
    uint64_t v36 = &unk_1EDD19CC8;
    long long v37 = xmmword_18E1FD760;
    int v39 = &v40;
    sub_18DFE2B44((uint64_t)v46, a1, (uint64_t)&v36);
    uint64_t v43 = 0x100000008;
    std::string::size_type v41 = &unk_1EDD19CC8;
    long long v42 = xmmword_18E1FD760;
    int v44 = v45;
    sub_18DFEF1F4((uint64_t)&v36, a2, (uint64_t)&v41);
    sub_18DFE2F24(a4, (uint64_t)&v41);
    sub_18DFE2F24(a5, (uint64_t)v46);
    uint64_t v43 = 0x600000006;
    std::string::size_type v41 = &unk_1EDD197B8;
    int v44 = v45;
    long long v42 = xmmword_18E1F8570;
    sub_18DFE2CC8((uint64_t)&v41, 0.0);
    int v31 = 0;
    int v32 = HIDWORD(v42) + 1;
    uint64_t v33 = 6;
    uint64_t v34 = v44;
    do
    {
      *(void *)&v34[8 * v31] = 0x3FF0000000000000;
      v31 += v32;
      --v33;
    }
    while (v33);
    sub_18DFE2F24(a6, (uint64_t)&v41);
    return 0;
  }
  else
  {
    v46[0] = 12;
    LOBYTE(v41) = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v46, (unsigned __int8 *)&v41, "f_SixStateNearlyConstantVelocity called with inadequate matrices.", a4, a5, a6, a7, a8, v35);
    return 0xFFFFFFFFLL;
  }
}

uint64_t sub_18E03E8E0(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8 = *(_DWORD *)(a1 + 8);
  unsigned int v9 = *(_DWORD *)(a1 + 12);
  if (v8 <= v9) {
    int v10 = *(_DWORD *)(a1 + 12);
  }
  else {
    int v10 = *(_DWORD *)(a1 + 8);
  }
  if (v8) {
    BOOL v11 = v9 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  BOOL v12 = !v11 && v10 == 2;
  if (v12
    && ((unsigned int v14 = *(_DWORD *)(a2 + 8), v15 = *(_DWORD *)(a2 + 12), v14 <= v15)
      ? (int v16 = *(_DWORD *)(a2 + 12))
      : (int v16 = *(_DWORD *)(a2 + 8)),
        v14 ? (BOOL v17 = v15 == 0) : (BOOL v17 = 1),
        !v17 ? (BOOL v18 = v16 == 2) : (BOOL v18 = 0),
        v18))
  {
    uint64_t v24 = *a3;
    uint64_t v37 = 0x200000002;
    char v35 = &unk_1EDD18BB8;
    uint64_t v38 = v39;
    long long v36 = xmmword_18E1FD1B0;
    sub_18DFE2CC8((uint64_t)&v35, 0.0);
    int v25 = HIDWORD(v36) + 1;
    int v26 = v38;
    *uint64_t v38 = 0x3FF0000000000000;
    v26[v25] = 0x3FF0000000000000;
    sub_18E0736C8((uint64_t)v40, (uint64_t)&v35);
    *(void *)(v42 + 8 * v41) = v24;
    uint64_t v32 = 0x100000008;
    uint64_t v30 = &unk_1EDD19CC8;
    long long v31 = xmmword_18E1FD760;
    uint64_t v33 = &v34;
    sub_18DFE2B44((uint64_t)v40, a1, (uint64_t)&v30);
    uint64_t v37 = 0x100000008;
    char v35 = &unk_1EDD19CC8;
    long long v36 = xmmword_18E1FD760;
    uint64_t v38 = v39;
    sub_18DFEF1F4((uint64_t)&v30, a2, (uint64_t)&v35);
    sub_18DFE2F24(a4, (uint64_t)&v35);
    sub_18DFE2F24(a5, (uint64_t)v40);
    uint64_t v37 = 0x200000002;
    char v35 = &unk_1EDD18BB8;
    uint64_t v38 = v39;
    long long v36 = xmmword_18E1FD1B0;
    sub_18DFE2CC8((uint64_t)&v35, 0.0);
    int v27 = HIDWORD(v36) + 1;
    long long v28 = v38;
    *uint64_t v38 = 0x3FF0000000000000;
    v28[v27] = 0x3FF0000000000000;
    sub_18DFE2F24(a6, (uint64_t)&v35);
    return 0;
  }
  else
  {
    v40[0] = 12;
    LOBYTE(v35) = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v40, (unsigned __int8 *)&v35, "f_TwoStateOscillator called with inadequate matrices.", a4, a5, a6, a7, a8, v29);
    return 0xFFFFFFFFLL;
  }
}

void *sub_18E03EB28(void *result)
{
  *double result = &unk_1EDD17418;
  return result;
}

void *sub_18E03EB48(void *result)
{
  *double result = &unk_1EDD17358;
  return result;
}

void *sub_18E03EB68(void *result)
{
  *double result = &unk_1EDD174A8;
  return result;
}

BOOL sub_18E03EB88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 *a5, unsigned __int8 *a6, long long *a7, long long *a8)
{
  double v9 = *(double *)(a2 + 8) + (double)*(uint64_t *)a2;
  double v10 = fabs(v9);
  BOOL v12 = (unint64_t)(*(void *)&v10 - 0x10000000000000) >> 53 <= 0x3FE
     || (unint64_t)(*(void *)&v10 - 1) <= 0xFFFFFFFFFFFFELL
     || *(void *)&v9 == 0;
  if (!v12 || (uint64_t v129 = 0, v130 = 0, sub_18DEE4CB8((double *)a2, (double *)&v129)))
  {
    LOWORD(v129) = 12;
    v132[0] = 4;
    unsigned __int8 v25 = cnprint::CNLogFormatter::FormatGeneral((const void **)(a1 + 208), "#MSR not initialized; invalid time");
LABEL_11:
    if (*(char *)(a1 + 231) >= 0) {
      LOBYTE(v31) = v25;
    }
    else {
      uint64_t v31 = *(void *)(a1 + 208);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v129, (unsigned __int8 *)v132, "%s", v26, v27, v28, v29, v30, v31);
    return 0;
  }
  if (!*(unsigned char *)a1)
  {
    LOWORD(v129) = 12;
    v132[0] = 2;
    unsigned __int8 v25 = cnprint::CNLogFormatter::FormatWarning(a1 + 208, a2, "#MSR not initialized; not configured",
            v20,
            v21,
            v22,
            v23,
            v24,
            v126);
    goto LABEL_11;
  }
  unsigned int v35 = *(_DWORD *)(a3 + 8);
  unsigned int v34 = *(_DWORD *)(a3 + 12);
  if (v35 <= v34) {
    int v36 = *(_DWORD *)(a3 + 12);
  }
  else {
    int v36 = *(_DWORD *)(a3 + 8);
  }
  if (!v35 || !v34 || v36 != 8)
  {
    LOWORD(v129) = 12;
    v132[0] = 4;
    unsigned __int8 v25 = cnprint::CNLogFormatter::FormatGeneral(a1 + 208, a2, "#MSR not initialized; state vector has incorrect size,nx,%u");
    goto LABEL_11;
  }
  if (*(void *)(a4 + 8) != 0x800000008)
  {
    LOWORD(v129) = 12;
    v132[0] = 4;
    unsigned __int8 v25 = cnprint::CNLogFormatter::FormatGeneral(a1 + 208, a2, "#MSR not initialized; state covariance has incorrect size,rows,%u,cols,%u");
    goto LABEL_11;
  }
  for (uint64_t i = 0; i != 8; ++i)
  {
    if ((*(void *)(*(void *)(a3 + 32) + 8 * i) & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
      LOWORD(v129) = 12;
      v132[0] = 4;
      unsigned __int8 v25 = cnprint::CNLogFormatter::FormatGeneral(a1 + 208, a2, "#MSR not initialized; infinite value at index,%d");
      goto LABEL_11;
    }
  }
  BOOL v38 = *(unsigned char *)(a1 + 2192) == 0;
  if (!*(unsigned char *)(a1 + 2192))
  {
    long long v39 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 2096) = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 2112) = v39;
    long long v40 = *(_OWORD *)(a2 + 32);
    long long v41 = *(_OWORD *)(a2 + 48);
    long long v42 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 2160) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 2176) = v42;
    *(_OWORD *)(a1 + 2128) = v40;
    *(_OWORD *)(a1 + 2144) = v41;
    *(unsigned char *)(a1 + 2192) = 1;
  }
  if (!*(unsigned char *)(a1 + 2304))
  {
    sub_18E076214(a1 + 2200, a3);
    BOOL v38 = 1;
  }
  uint64_t v43 = a1 + 2312;
  if (*(unsigned char *)(a1 + 2416)) {
    sub_18E076214(v43, a1 + 256);
  }
  else {
    sub_18E076214(v43, a3);
  }
  raven::RavenSequentialGNSSMeasurementSelector::ResetEpochSpecificMembers((raven::RavenSequentialGNSSMeasurementSelector *)a1);
  if (v38)
  {
    int v44 = (uint64_t *)(a1 + 1512);
    sub_18DEDE7B0(&v129, "\n");
    if ((v131 & 0x80u) == 0) {
      int8x16_t v45 = (void **)&v129;
    }
    else {
      int8x16_t v45 = v129;
    }
    if ((v131 & 0x80u) == 0) {
      uint64_t v46 = v131;
    }
    else {
      uint64_t v46 = v130;
    }
    int v47 = sub_18DEDD538((void *)(a1 + 1512), (uint64_t)v45, v46);
    if ((v131 & 0x80u) == 0) {
      uint64_t v48 = (void **)&v129;
    }
    else {
      uint64_t v48 = v129;
    }
    if ((v131 & 0x80u) == 0) {
      uint64_t v49 = v131;
    }
    else {
      uint64_t v49 = v130;
    }
    uint64_t v50 = sub_18DEDD538(v47, (uint64_t)v48, v49);
    if ((v131 & 0x80u) == 0) {
      long long v51 = (void **)&v129;
    }
    else {
      long long v51 = v129;
    }
    if ((v131 & 0x80u) == 0) {
      uint64_t v52 = v131;
    }
    else {
      uint64_t v52 = v130;
    }
    sub_18DEDD538(v50, (uint64_t)v51, v52);
    sub_18E07625C((void *)(a1 + 1512));
    uint64_t v53 = *v44;
    *(uint64_t *)((char *)v44 + *(void *)(*v44 - 24) + 16) = 3;
    *(uint64_t *)((char *)v44 + *(void *)(v53 - 24) + 24) = 27;
    long long v54 = sub_18DEDD538((void *)(a1 + 1512), (uint64_t)"Configured Start Time    : ", 27);
    *(void *)((char *)v54 + *(void *)(*v54 - 24) + 24) = 15;
    if (!*(unsigned char *)(a1 + 2192)) {
      sub_18DFF28FC();
    }
    long long v55 = (void *)std::ostream::operator<<();
    *(void *)((char *)v55 + *(void *)(*v55 - 24) + 24) = 15;
    if (!*(unsigned char *)(a1 + 2192)) {
      sub_18DFF28FC();
    }
    int v56 = (void *)std::ostream::operator<<();
    if ((v131 & 0x80u) == 0) {
      uint64_t v57 = (void **)&v129;
    }
    else {
      uint64_t v57 = v129;
    }
    if ((v131 & 0x80u) == 0) {
      uint64_t v58 = v131;
    }
    else {
      uint64_t v58 = v130;
    }
    unint64_t v59 = sub_18DEDD538(v56, (uint64_t)v57, v58);
    if ((v131 & 0x80u) == 0) {
      int v60 = (void **)&v129;
    }
    else {
      int v60 = v129;
    }
    if ((v131 & 0x80u) == 0) {
      uint64_t v61 = v131;
    }
    else {
      uint64_t v61 = v130;
    }
    sub_18DEDD538(v59, (uint64_t)v60, v61);
    uint64_t v62 = *v44;
    *(uint64_t *)((char *)v44 + *(void *)(*v44 - 24) + 16) = 3;
    *(uint64_t *)((char *)v44 + *(void *)(v62 - 24) + 24) = 27;
    int v63 = sub_18DEDD538((void *)(a1 + 1512), (uint64_t)"Start PVT XYZ [m or m/s] : ", 27);
    *(void *)((char *)v63 + *(void *)(*v63 - 24) + 24) = 15;
    if (!*(unsigned char *)(a1 + 2304)) {
      sub_18DFF28FC();
    }
    uint64_t v64 = (void *)std::ostream::operator<<();
    *(void *)((char *)v64 + *(void *)(*v64 - 24) + 24) = 15;
    if (!*(unsigned char *)(a1 + 2304)) {
      sub_18DFF28FC();
    }
    int v65 = (void *)std::ostream::operator<<();
    *(void *)((char *)v65 + *(void *)(*v65 - 24) + 24) = 15;
    if (!*(unsigned char *)(a1 + 2304)) {
      sub_18DFF28FC();
    }
    int v66 = (void *)std::ostream::operator<<();
    *(void *)((char *)v66 + *(void *)(*v66 - 24) + 24) = 15;
    if (!*(unsigned char *)(a1 + 2304)) {
      sub_18DFF28FC();
    }
    int v67 = (void *)std::ostream::operator<<();
    *(void *)((char *)v67 + *(void *)(*v67 - 24) + 24) = 15;
    if (!*(unsigned char *)(a1 + 2304)) {
      sub_18DFF28FC();
    }
    int v68 = (void *)std::ostream::operator<<();
    *(void *)((char *)v68 + *(void *)(*v68 - 24) + 24) = 15;
    if (!*(unsigned char *)(a1 + 2304)) {
      sub_18DFF28FC();
    }
    int v69 = (void *)std::ostream::operator<<();
    if ((v131 & 0x80u) == 0) {
      long long v70 = (void **)&v129;
    }
    else {
      long long v70 = v129;
    }
    if ((v131 & 0x80u) == 0) {
      uint64_t v71 = v131;
    }
    else {
      uint64_t v71 = v130;
    }
    int v72 = sub_18DEDD538(v69, (uint64_t)v70, v71);
    if ((v131 & 0x80u) == 0) {
      long long v73 = (void **)&v129;
    }
    else {
      long long v73 = v129;
    }
    if ((v131 & 0x80u) == 0) {
      uint64_t v74 = v131;
    }
    else {
      uint64_t v74 = v130;
    }
    BOOL v75 = sub_18DEDD538(v72, (uint64_t)v73, v74);
    if ((v131 & 0x80u) == 0) {
      uint64_t v76 = (void **)&v129;
    }
    else {
      uint64_t v76 = v129;
    }
    if ((v131 & 0x80u) == 0) {
      uint64_t v77 = v131;
    }
    else {
      uint64_t v77 = v130;
    }
    sub_18DEDD538(v75, (uint64_t)v76, v77);
    if ((char)v131 < 0) {
      operator delete(v129);
    }
  }
  sub_18DFE2F24(a1 + 360, a4);
  uint64_t v78 = 0;
  uint64_t v79 = *(int *)(a1 + 380);
  uint64_t v80 = *(void *)(a1 + 392);
  int v81 = v79 + 1;
  uint64_t v82 = 8 * v79;
  uint64_t v83 = v80;
  while (2)
  {
    uint64_t v84 = 0;
    uint64_t v85 = 0;
    do
    {
      double v86 = *(double *)(v83 + v84);
      if ((*(void *)&v86 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
      {
LABEL_110:
        LOWORD(v129) = 12;
        v132[0] = 4;
        unsigned __int8 v25 = cnprint::CNLogFormatter::FormatGeneral(a1 + 208, a2, "#MSR not initialized; infinite input covariance,i,%u,j,%u");
        goto LABEL_11;
      }
      if (!v85 && *(double *)(v80 + 8 * v81 * (int)v78) <= 0.0)
      {
        LOWORD(v129) = 12;
        v132[0] = 4;
        unsigned __int8 v25 = cnprint::CNLogFormatter::FormatGeneral(a1 + 208, a2, "#MSR not initialized; non-positive variance,i,%u");
        goto LABEL_11;
      }
      double v87 = *(double *)(v83 + 8 * v85);
      if ((*(void *)&v87 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000) {
        goto LABEL_110;
      }
      if (vabdd_f64(v86, v87) > 0.000000015)
      {
        LOWORD(v129) = 12;
        v132[0] = 4;
        unsigned __int8 v25 = cnprint::CNLogFormatter::FormatGeneral(a1 + 208, a2, "#MSR not initialized; covariance not symmetric,i,%u,j,%u,Pij,%.3e,Pji,%.3e");
        goto LABEL_11;
      }
      double v88 = (v86 + v87) * 0.5;
      *(double *)(v83 + v84) = v88;
      *(double *)(v83 + 8 * v85++) = v88;
      v84 += v82;
    }
    while (v78 + v85 != 8);
    ++v78;
    v83 += v82 + 8;
    if (v78 != 8) {
      continue;
    }
    break;
  }
  v132[0] = 0;
  sub_18E076734(a1 + 360, v132, (uint64_t)&v128);
  long long v128 = &unk_1EDD17478;
  BOOL v32 = v132[0];
  if (!v132[0])
  {
    LOWORD(v129) = 12;
    unsigned __int8 v127 = 4;
    char v112 = cnprint::CNLogFormatter::FormatGeneral(a1 + 208, a2, "#MSR not initialized; covariance not positive definite");
    if (*(char *)(a1 + 231) >= 0) {
      LOBYTE(v118) = v112;
    }
    else {
      uint64_t v118 = *(void *)(a1 + 208);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v129, &v127, "%s", v113, v114, v115, v116, v117, v118);
    return v32;
  }
  int v89 = *a6;
  *(unsigned char *)(a1 + 1016) = v89;
  long long v90 = *(_OWORD *)a5;
  *(_OWORD *)(a1 + 1040) = *((_OWORD *)a5 + 1);
  *(_OWORD *)(a1 + 1024) = v90;
  long long v91 = *((_OWORD *)a5 + 2);
  long long v92 = *((_OWORD *)a5 + 3);
  long long v93 = *((_OWORD *)a5 + 4);
  *(void *)(a1 + 1104) = *((void *)a5 + 10);
  *(_OWORD *)(a1 + 1088) = v93;
  *(_OWORD *)(a1 + 1072) = v92;
  *(_OWORD *)(a1 + 1056) = v91;
  long long v94 = *a7;
  long long v95 = a7[1];
  *(void *)(a1 + 1144) = *((void *)a7 + 4);
  *(_OWORD *)(a1 + 1112) = v94;
  *(_OWORD *)(a1 + 1128) = v95;
  long long v96 = *a8;
  long long v97 = a8[1];
  *(void *)(a1 + 1184) = *((void *)a8 + 4);
  *(_OWORD *)(a1 + 1168) = v97;
  *(_OWORD *)(a1 + 1152) = v96;
  if ((v89 - 3) > 1 || (unsigned int v98 = *(unsigned __int8 *)(a1 + 1024), v98 > 9)) {
    LOBYTE(v99) = 0;
  }
  else {
    unsigned int v99 = (0xCu >> v98) & 1;
  }
  *(unsigned char *)(a1 + 1272) = v99;
  long long v100 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 112) = v100;
  long long v101 = *(_OWORD *)(a2 + 32);
  long long v102 = *(_OWORD *)(a2 + 48);
  long long v103 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 176) = v103;
  *(_OWORD *)(a1 + 128) = v101;
  *(_OWORD *)(a1 + 144) = v102;
  sub_18DFE2F24(a1 + 256, a3);
  uint64_t v104 = *(void *)(a1 + 192);
  long long v105 = *(_OWORD *)(v104 + 1656);
  *(_OWORD *)(a1 + 1328) = *(_OWORD *)(v104 + 1672);
  *(_OWORD *)(a1 + 1312) = v105;
  long long v106 = *(_OWORD *)(v104 + 1688);
  *(_OWORD *)(a1 + 1296) = *(_OWORD *)(v104 + 1704);
  *(_OWORD *)(a1 + 1280) = v106;
  unsigned int v107 = *a6;
  if (v107 > 6) {
    goto LABEL_138;
  }
  int v108 = (_OWORD *)(a1 + 1312);
  if (((1 << v107) & 0x26) != 0)
  {
    unsigned int v109 = *a5;
    if (v109 - 2 < 2 || v109 == 6)
    {
      long long v120 = *(_OWORD *)(v104 + 1800);
      *int v108 = *(_OWORD *)(v104 + 1784);
      *(_OWORD *)(a1 + 1328) = v120;
      uint64_t v111 = (_OWORD *)(v104 + 1816);
    }
    else
    {
      if (v109 != 5) {
        goto LABEL_139;
      }
      long long v119 = *(_OWORD *)(v104 + 1736);
      *int v108 = *(_OWORD *)(v104 + 1720);
      *(_OWORD *)(a1 + 1328) = v119;
      uint64_t v111 = (_OWORD *)(v104 + 1752);
    }
    goto LABEL_137;
  }
  if (((1 << v107) & 0x18) != 0)
  {
    unsigned int v109 = *a5;
    if (v109 - 2 < 2 || v109 == 6)
    {
      long long v122 = *(_OWORD *)(v104 + 1928);
      *int v108 = *(_OWORD *)(v104 + 1912);
      *(_OWORD *)(a1 + 1328) = v122;
      uint64_t v111 = (_OWORD *)(v104 + 1944);
    }
    else
    {
      if (v109 != 5) {
        goto LABEL_139;
      }
      long long v110 = *(_OWORD *)(v104 + 1864);
      *int v108 = *(_OWORD *)(v104 + 1848);
      *(_OWORD *)(a1 + 1328) = v110;
      uint64_t v111 = (_OWORD *)(v104 + 1880);
    }
LABEL_137:
    long long v124 = v111[1];
    *(_OWORD *)(a1 + 1280) = *v111;
    *(_OWORD *)(a1 + 1296) = v124;
    goto LABEL_138;
  }
  if (v107 == 6)
  {
    unsigned int v109 = *a5;
    if (v109 - 2 < 2 || v109 == 6)
    {
      long long v123 = *(_OWORD *)(v104 + 2056);
      *int v108 = *(_OWORD *)(v104 + 2040);
      *(_OWORD *)(a1 + 1328) = v123;
      uint64_t v111 = (_OWORD *)(v104 + 2072);
    }
    else
    {
      if (v109 != 5) {
        goto LABEL_139;
      }
      long long v121 = *(_OWORD *)(v104 + 1992);
      *int v108 = *(_OWORD *)(v104 + 1976);
      *(_OWORD *)(a1 + 1328) = v121;
      uint64_t v111 = (_OWORD *)(v104 + 2008);
    }
    goto LABEL_137;
  }
LABEL_138:
  unsigned int v109 = *a5;
LABEL_139:
  if (v109 <= 6 && ((1 << v109) & 0x4C) != 0) {
    double v125 = *(double *)(v104 + 2184);
  }
  else {
    double v125 = *(double *)(v104 + 2176);
  }
  *(double *)(a1 + 1192) = v125 * v125;
  *(unsigned char *)(a1 + 40) = (((_BYTE)v109 - 4) & 0xFA) == 0;
  *(unsigned char *)(a1 + 1) = 1;
  return v32;
}

void sub_18E03F60C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v2 - 97) < 0) {
    operator delete(*v1);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_18E03F650@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v21 = 0x800000008;
  uint64_t v19 = &unk_1EDD19DE8;
  long long v20 = xmmword_18E1FD750;
  uint64_t v22 = &v23;
  if (*(_DWORD *)(a1 + 1540)) {
    uint64_t v3 = a1 + 872;
  }
  else {
    uint64_t v3 = a1 + 112;
  }
  uint64_t v16 = 0x800000008;
  unsigned int v14 = &unk_1EDD19DE8;
  long long v15 = xmmword_18E1FD750;
  BOOL v17 = v18;
  uint64_t v31 = 0x100000008;
  long long v30 = xmmword_18E1FD760;
  uint64_t v29 = &unk_1EDD19CF8;
  BOOL v32 = &v33;
  uint64_t v26 = 0x100000020;
  long long v25 = xmmword_18E1FD780;
  uint64_t v24 = &unk_1EDD18C78;
  uint64_t v27 = &v28;
  sub_18E01BFEC(v3, (uint64_t)&v29, (uint64_t)&v24, (uint64_t)&v14);
  sub_18DFE2F24((uint64_t)&v19, (uint64_t)&v14);
  int v4 = DWORD1(v20);
  int v5 = v20;
  uint64_t v16 = 0x800000008;
  unsigned int v14 = &unk_1EDD19DE8;
  BOOL v17 = v18;
  *(void *)&long long v15 = __PAIR64__(v20, DWORD1(v20));
  DWORD2(v15) = v20 * DWORD1(v20);
  HIDWORD(v15) = DWORD1(v20);
  if (DWORD1(v20))
  {
    int v6 = 0;
    int v7 = 0;
    int v8 = HIDWORD(v20);
    double v9 = v22;
    do
    {
      int v10 = v6;
      int v11 = v7;
      for (int i = v5; i; --i)
      {
        v18[v11] = v9[v10];
        v11 += v4;
        ++v10;
      }
      ++v7;
      v6 += v8;
    }
    while (v7 != v4);
  }
  *(void *)(a2 + 24) = 0x800000008;
  *(void *)a2 = &unk_1EDD19DE8;
  *(_OWORD *)(a2 + 8) = xmmword_18E1FD750;
  *(void *)(a2 + 32) = a2 + 40;
  sub_18DFE2B44((uint64_t)&v19, (uint64_t)&v14, a2);
  return result;
}

void sub_18E03F86C(_Unwind_Exception *a1)
{
  *uint64_t v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

uint64_t sub_18E03F88C(uint64_t a1)
{
  *(void *)a1 = &unk_1EDD0A7D8;
  *(void *)(a1 + 2408) = &unk_1EDD17478;
  *(void *)(a1 + 2304) = &unk_1EDD17478;
  *(void *)(a1 + 1752) = &unk_1EDD17478;
  return sub_18E0688C4(a1);
}

double sub_18E03F90C(uint64_t a1, int a2, long long *a3)
{
  int v6 = a2;
  if (*((char *)a3 + 23) < 0)
  {
    sub_18DEDE668(&v7, *(void **)a3, *((void *)a3 + 1));
    a2 = v6;
  }
  else
  {
    long long v7 = *a3;
    uint64_t v8 = *((void *)a3 + 2);
  }
  *(_DWORD *)(a1 + 8) = a2;
  int v4 = (void **)(a1 + 16);
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*v4);
  }
  double result = *(double *)&v7;
  *(_OWORD *)int v4 = v7;
  *(void *)(a1 + 32) = v8;
  return result;
}

uint64_t sub_18E03F99C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t sub_18E03F9A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = *(_DWORD *)(a1 + 8);
  unsigned int v10 = *(_DWORD *)(a1 + 12);
  if (v9 <= v10) {
    int v11 = *(_DWORD *)(a1 + 12);
  }
  else {
    int v11 = *(_DWORD *)(a1 + 8);
  }
  if (v9) {
    BOOL v12 = v10 == 0;
  }
  else {
    BOOL v12 = 1;
  }
  BOOL v13 = !v12 && v11 == 26;
  if (!v13
    || ((unsigned int v15 = *(_DWORD *)(a2 + 8), v16 = *(_DWORD *)(a2 + 12), v15 <= v16)
      ? (int v17 = *(_DWORD *)(a2 + 12))
      : (int v17 = *(_DWORD *)(a2 + 8)),
        v15 ? (BOOL v18 = v16 == 0) : (BOOL v18 = 1),
        !v18 ? (BOOL v19 = v17 == 1) : (BOOL v19 = 0),
        !v19))
  {
    v97.i16[0] = 12;
    v132[0] = 4;
    double v20 = *(double *)(a3 + 48) + (double)*(uint64_t *)(a3 + 40);
LABEL_23:
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v97, v132, "time,%.3lf,h-function failure on line %d: %s() %s", a4, a5, a6, a7, a8, SLOBYTE(v20));
    return 0xFFFFFFFFLL;
  }
  if (!*(void *)(a3 + 512))
  {
    v97.i16[0] = 12;
    v132[0] = 4;
    double v20 = *(double *)(a3 + 48) + (double)*(uint64_t *)(a3 + 40);
    goto LABEL_23;
  }
  if (!*(unsigned char *)(a3 + 128))
  {
    v97.i16[0] = 12;
    v132[0] = 4;
    double v33 = *(double *)(a3 + 48) + (double)*(uint64_t *)(a3 + 40);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v97, v132, "time,%.3lf,h-function failure on line %d: %s() %s", a4, a5, a6, a7, a8, SLOBYTE(v33));
    v97.i16[0] = 12;
    v132[0] = 4;
    double v34 = *(double *)(a3 + 96) + (double)*(uint64_t *)(a3 + 88);
    sub_18E017C64(a3 + 56);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v97, v132, "t,%.3lf,%s,TAI time invalid", v35, v36, v37, v38, v39, SLOBYTE(v34));
    return 0xFFFFFFFFLL;
  }
  long long v134 = *(_OWORD *)(a3 + 40);
  long long v133 = *(_OWORD *)*(void *)(a3 + 520);
  sub_18E07FB20((uint64_t)v132, *(void *)(a3 + 528));
  int v26 = **(unsigned __int8 **)(a3 + 536);
  uint64_t v27 = *(void *)(a3 + 512);
  uint64_t v129 = 0x10000001CLL;
  long long v128 = xmmword_18E1FD5F0;
  unsigned __int8 v127 = &unk_1EDD188B8;
  uint64_t v130 = &v131;
  if (sub_18E0786E0((uint64_t)&v134, &v133, (uint64_t)v132, v27, *(void *)(a3 + 544), v26, 1, 1, (uint64_t)&v127))
  {
    v97.i16[0] = 12;
    LOBYTE(v122) = 4;
    double v78 = *(double *)(a3 + 48) + (double)*(uint64_t *)(a3 + 40);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v97, (unsigned __int8 *)&v122, "time,%.3lf,h-function failure on line %d: %s() %s", v28, v29, v30, v31, v32, SLOBYTE(v78));
    return 0xFFFFFFFFLL;
  }
  long long v128 = xmmword_18E1FD5F0;
  uint64_t v124 = 0x10000001CLL;
  long long v122 = &unk_1EDD188B8;
  long long v123 = xmmword_18E1FD5F0;
  double v125 = (double *)&v126;
  int64x2_t v97 = vdupq_n_s64(0x7FF8000000000000uLL);
  v98[0] = v97;
  v98[1] = v97;
  v98[2] = v97;
  v98[3] = v97;
  v98[4] = v97;
  v98[5] = v97;
  v98[6] = v97;
  v98[7] = v97;
  v98[8] = v97;
  v98[9] = v97;
  v98[10] = v97;
  v98[11] = v97;
  int64x2_t v99 = v97;
  int64x2_t v100 = v97;
  int64x2_t v101 = v97;
  int64x2_t v102 = v97;
  int64x2_t v103 = v97;
  int64x2_t v104 = v97;
  int64x2_t v105 = v97;
  int64x2_t v106 = v97;
  int64x2_t v107 = v97;
  int64x2_t v108 = v97;
  int64x2_t v109 = v97;
  int64x2_t v110 = v97;
  int64x2_t v111 = v97;
  int64x2_t v112 = v97;
  int64x2_t v113 = v97;
  int64x2_t v114 = v97;
  int64x2_t v115 = v97;
  int64x2_t v116 = v97;
  int64x2_t v117 = v97;
  int64x2_t v118 = v97;
  int64x2_t v119 = v97;
  int64x2_t v120 = v97;
  uint64_t v121 = 0x7FF8000000000000;
  LOBYTE(v81) = 0;
  if (sub_18E06EC84((uint64_t)&v127, a1, 0, 1, 1, (uint64_t)&v122, (uint64_t)&v97, (BOOL *)&v81, 0.000000015))
  {
    __int16 v81 = 12;
    LOBYTE(v89.f64[0]) = 4;
    double v79 = *(double *)(a3 + 48) + (double)*(uint64_t *)(a3 + 40);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v81, (unsigned __int8 *)&v89, "time,%.3lf,h-function failure on line %d: %s() %s", v40, v41, v42, v43, v44, SLOBYTE(v79));
    return 0xFFFFFFFFLL;
  }
  long long v95 = *(_OWORD *)v125;
  uint64_t v96 = *((void *)v125 + 2);
  long long v94 = &unk_1EDD0ADE8;
  double v92 = 0.0;
  long long v93 = &unk_1EDD0AE20;
  *(double *)&unint64_t v45 = v125[19] * 0.000001;
  long long v90 = 0u;
  long long v91 = 0u;
  long long v88 = *(_OWORD *)(a3 + 136);
  v46.i64[1] = *((void *)&v88 + 1);
  float64x2_t v89 = 0u;
  v46.i64[0] = *(void *)(a3 + 192);
  __int16 v81 = 0;
  long long v82 = 0u;
  long long v83 = 0u;
  int v84 = 0;
  uint64_t v85 = 0;
  uint64_t v86 = 0;
  int v87 = 0;
  int v47 = (cnprint::CNPrinter *)cnnavigation::GNSSPseudorange((uint64_t)&v88, (uint64_t)&v81, (uint64_t)&v95, a3 + 296, (uint64_t *)&v94, (uint64_t *)&v93, &v92, 1, v46, (int8x16_t)v45, &v89);
  if (v47)
  {
    sub_18E06B804(a3 + 40, (uint64_t)"could not compute expected measurement", (uint64_t)"h_GnssPsr_RavenPNT", 5706, v48, v49, v50, v51);
    if (cnprint::CNPrinter::GetLogLevel(v52) <= 1)
    {
      __int16 v81 = 12;
      LOBYTE(v88) = 1;
      uint64_t v54 = *(void *)(a3 + 88);
      double v53 = *(double *)(a3 + 96);
      sub_18E017C64(a3 + 56);
      double v80 = v53 + (double)v54;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v81, (unsigned __int8 *)&v88, "t,%.3lf,%s,GNSSPseudorange returned != 0", v55, v56, v57, v58, v59, SLOBYTE(v80));
    }
    return 0xFFFFFFFFLL;
  }
  if (cnprint::CNPrinter::GetLogLevel(v47))
  {
    double v60 = v92;
  }
  else
  {
    __int16 v81 = 12;
    LOBYTE(v88) = 0;
    uint64_t v62 = *(void *)(a3 + 88);
    double v61 = *(double *)(a3 + 96);
    sub_18E017C64(a3 + 56);
    double v63 = v61 + (double)v62;
    double v60 = v92;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v81, (unsigned __int8 *)&v88, "t,%.3lf,%s,using PSR,predicted,%.3lf,diff,%.3lf,clockEstMtrs,%.2lf,std,%.2lf,multipath,%hhu,cno,%.1lf", v64, v65, v66, v67, v68, SLOBYTE(v63));
  }
  *(void *)&long long v69 = 0x100000001;
  *((void *)&v69 + 1) = 0x100000001;
  *(_OWORD *)(a4 + 8) = v69;
  sub_18E0713D0((uint64_t)&v81);
  sub_18DFE2F24(a5, (uint64_t)&v81);
  uint64_t v70 = *(void *)(a3 + 552);
  if (v70)
  {
    uint64_t v71 = (double *)v98;
    **(double **)(a4 + 32) = v60 + *(double *)v70 + **(double **)(a2 + 32);
    int v72 = *(double **)(v70 + 40);
    long long v73 = *(double **)(a5 + 32);
    double *v73 = *v72 * *(double *)v97.i64;
    uint64_t v76 = *(int *)(v70 + 28);
    uint64_t v74 = *(int *)(a5 + 20);
    v73[v74] = v72[v76] * *(double *)&v97.i64[1];
    double v75 = v72[2 * v76];
    LODWORD(v76) = v74;
  }
  else
  {
    **(double **)(a4 + 32) = v60 + **(double **)(a2 + 32);
    double v77 = *((double *)&v90 + 1);
    long long v73 = *(double **)(a5 + 32);
    double *v73 = *(double *)v97.i64 * *(double *)&v90;
    uint64_t v76 = *(int *)(a5 + 20);
    v73[v76] = *(double *)&v97.i64[1] * v77;
    double v75 = *(double *)v98[0].i64;
    uint64_t v71 = (double *)&v91;
  }
  v73[2 * (int)v76] = v75 * *v71;
  v73[18 * (int)v76] = *(double *)&v99.i64[1] * *((double *)&v91 + 1) * 0.000001;
  sub_18E071E98(1u, 1u, (uint64_t)&v81);
  sub_18DFE2F24(a6, (uint64_t)&v81);
  return 0;
}

uint64_t sub_18E040034(uint64_t a1, double *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v66[4] = *(void (**)(uint64_t))MEMORY[0x1E4F143B8];
  unsigned int v5 = *(_DWORD *)(a4 + 8);
  if ((v5 & 0x80000000) != 0) {
    __assert_rtn("Zeros", "cnmatrix.h", 3098, "nr >= 0");
  }
  uint64_t v62 = 0x100000003;
  uint64_t v57 = &unk_1EDD18D98;
  double v63 = &v64;
  unsigned int v58 = v5;
  unsigned int v59 = 1;
  unsigned int v60 = v5;
  unsigned int v61 = v5;
  int v11 = (cnprint::CNPrinter *)sub_18DFE2CC8((uint64_t)&v57, 0.0);
  if (!*(unsigned char *)a1)
  {
    if (cnprint::CNPrinter::GetLogLevel(v11) <= 1)
    {
      LOWORD(v66[0]) = 2;
      unsigned __int8 v65 = 1;
      double v54 = a2[1] + (double)*(uint64_t *)a2;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v66, &v65, "MeasurementAccumulator::AddMeasurement() failed - Not initialized,t_meas,%.3lf", v17, v18, v19, v20, v21, SLOBYTE(v54));
    }
    return 0xFFFFFFFFLL;
  }
  if (*(_DWORD *)(a1 + 5936) == 174)
  {
    LOWORD(v66[0]) = 2;
    unsigned __int8 v65 = 2;
    double v53 = a2[1] + (double)*(uint64_t *)a2;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v66, &v65, "MeasurementAccumulator::AddMeasurement() failed - Out of space,t_meas,%.3lf", v12, v13, v14, v15, v16, SLOBYTE(v53));
    return 0xFFFFFFFFLL;
  }
  if (*(unsigned char *)(a1 + 1))
  {
    if (cnprint::CNPrinter::GetLogLevel(v11) <= 1)
    {
      LOWORD(v66[0]) = 2;
      unsigned __int8 v65 = 1;
      double v55 = a2[1] + (double)*(uint64_t *)a2;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v66, &v65, "MeasurementAccumulator::AddMeasurement() failed - Locked,t_meas,%.3lf", v22, v23, v24, v25, v26, SLOBYTE(v55));
    }
    return 0xFFFFFFFFLL;
  }
  BOOL v27 = sub_18DEE4CB8(a2, (double *)(a1 + 8));
  if (v27)
  {
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v27) <= 1)
    {
      LOWORD(v66[0]) = 2;
      unsigned __int8 v65 = 1;
      double v56 = a2[1] + (double)*(uint64_t *)a2;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v66, &v65, "MeasurementAccumulator::AddMeasurement() failed - Measurement too old,t_meas,%.3lf,t_start,%.3lf", v28, v29, v30, v31, v32, SLOBYTE(v56));
    }
    return 0xFFFFFFFFLL;
  }
  v66[0] = 0;
  v66[1] = 0;
  sub_18E076B10(v66, a5);
  double v33 = sub_18E06C110((uint64_t *)(a1 + 40), v66);
  sub_18E067C60((uint64_t (**)(void, void, void, void, void))v66);
  uint64_t v34 = *(int *)(a1 + 5936);
  uint64_t v35 = (v34 + 1);
  if (*(void *)(a1 + 56) != v35)
  {
    LOWORD(v66[0]) = 2;
    unsigned __int8 v65 = 4;
    char v47 = (*(uint64_t (**)(uint64_t))(*(void *)a5 + 16))(a5);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v66, &v65, "MeasurementAccumulator::AddMeasurement() failed - allocation failed,meas_type,%d,t_meas,%.3lf", v48, v49, v50, v51, v52, v47);
    return 0xFFFFFFFFLL;
  }
  *(_DWORD *)(a1 + 5936) = v35;
  *(_DWORD *)(a1 + 72) = v35;
  *(_DWORD *)(a1 + 76) = 1;
  *(_DWORD *)(a1 + 80) = v35;
  *(_DWORD *)(a1 + 84) = v35;
  *(_DWORD *)(a1 + 2896) = v35;
  *(_DWORD *)(a1 + 2900) = 1;
  *(_DWORD *)(a1 + 2904) = v35;
  *(_DWORD *)(a1 + 2908) = v35;
  *(_DWORD *)(a1 + 3632) = v35;
  *(_DWORD *)(a1 + 3636) = 1;
  *(_DWORD *)(a1 + 3640) = v35;
  *(_DWORD *)(a1 + 3644) = v35;
  *(_DWORD *)(a1 + 5064) = v35;
  *(_DWORD *)(a1 + 5068) = 1;
  *(_DWORD *)(a1 + 5072) = v35;
  *(_DWORD *)(a1 + 5076) = v35;
  *(_DWORD *)(a1 + 5112) = v35;
  *(_DWORD *)(a1 + 5116) = 1;
  *(_DWORD *)(a1 + 5120) = v35;
  *(_DWORD *)(a1 + 5124) = v35;
  *(_DWORD *)(a1 + 5848) = v35;
  *(_DWORD *)(a1 + 5852) = 1;
  *(_DWORD *)(a1 + 5856) = v35;
  *(_DWORD *)(a1 + 5860) = v35;
  *(_DWORD *)(a1 + 5896) = v35;
  *(_DWORD *)(a1 + 5900) = 1;
  *(_DWORD *)(a1 + 5904) = v35;
  *(_DWORD *)(a1 + 5908) = v35;
  *(_DWORD *)(a1 + 5952) = v35;
  *(_DWORD *)(a1 + 5956) = 1;
  *(_DWORD *)(a1 + 5960) = v35;
  *(_DWORD *)(a1 + 5964) = v35;
  *(_DWORD *)(a1 + 7384) = v35;
  *(_DWORD *)(a1 + 7388) = 1;
  *(_DWORD *)(a1 + 7392) = v35;
  *(_DWORD *)(a1 + 7396) = v35;
  *(_OWORD *)(*(void *)(a1 + 96) + 16 * v34) = *(_OWORD *)a2;
  unsigned int v36 = *(_DWORD *)(a3 + 8);
  unsigned int v37 = *(_DWORD *)(a3 + 12);
  if (v36 <= v37) {
    int v38 = *(_DWORD *)(a3 + 12);
  }
  else {
    int v38 = *(_DWORD *)(a3 + 8);
  }
  if (v37) {
    BOOL v39 = v36 == 0;
  }
  else {
    BOOL v39 = 1;
  }
  if (v39) {
    int v40 = 0;
  }
  else {
    int v40 = v38;
  }
  *(_DWORD *)(*(void *)(a1 + 2920) + 4 * v34) = v40;
  sub_18DFE2F24(*(void *)(a1 + 5088) + (v34 << 6), a3);
  if (v58 <= v59) {
    unsigned int v41 = v59;
  }
  else {
    unsigned int v41 = v58;
  }
  if (v59) {
    BOOL v42 = v58 == 0;
  }
  else {
    BOOL v42 = 1;
  }
  if (v42) {
    unsigned int v43 = 0;
  }
  else {
    unsigned int v43 = v41;
  }
  *(_DWORD *)(*(void *)(a1 + 5136) + 4 * v34) = v43;
  sub_18DFE2F24(*(void *)(a1 + 5872) + (v34 << 6), (uint64_t)&v57);
  __n128 v44 = sub_18DFE2F24(*(void *)(a1 + 5920) + 112 * (int)v34, a4);
  *(void *)(*(void *)(a1 + 5976) + 8 * v34) = sub_18E03F9A4;
  unint64_t v45 = (uint64_t (*)(uint64_t, void *, void, void *, void *, __n128))*v33;
  if (*v33) {
    unint64_t v45 = (uint64_t (*)(uint64_t, void *, void, void *, void *, __n128))v45(3, v33, 0, &unk_1EDD05538, &std::__any_imp::__unique_typeinfo<raven::h_GnssPsrArgs_RavenPNT<double>>::__id, v44);
  }
  uint64_t result = 0;
  *(void *)(*(void *)(a1 + 7408) + 8 * v34) = v45;
  return result;
}

void sub_18E040460(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (a2) {
    sub_18DEDD524(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_18E04048C(uint64_t a1)
{
  *(void *)a1 = &unk_1EDD14600;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 560);
  if (v2) {
    sub_18DEE4E18(v2);
  }
  *(void *)(a1 + 296) = &unk_1EDD0AE58;
  if (*(char *)(a1 + 327) < 0) {
    operator delete(*(void **)(a1 + 304));
  }
  *(void *)(a1 + 296) = &unk_1EDD0A9B8;
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  *(void *)a1 = &unk_1EDD0A4E8;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

uint64_t sub_18E040560(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9 = *(_DWORD *)(a1 + 8);
  unsigned int v10 = *(_DWORD *)(a1 + 12);
  if (v9 <= v10) {
    int v11 = *(_DWORD *)(a1 + 12);
  }
  else {
    int v11 = *(_DWORD *)(a1 + 8);
  }
  if (v9) {
    BOOL v12 = v10 == 0;
  }
  else {
    BOOL v12 = 1;
  }
  BOOL v13 = !v12 && v11 == 26;
  if (!v13
    || ((unsigned int v15 = *(_DWORD *)(a2 + 8), v16 = *(_DWORD *)(a2 + 12), v15 <= v16)
      ? (int v17 = *(_DWORD *)(a2 + 12))
      : (int v17 = *(_DWORD *)(a2 + 8)),
        v15 ? (BOOL v18 = v16 == 0) : (BOOL v18 = 1),
        !v18 ? (BOOL v19 = v17 == 1) : (BOOL v19 = 0),
        !v19))
  {
    v101.i16[0] = 12;
    v147[0] = 4;
    double v20 = *(double *)(a3 + 48) + (double)*(uint64_t *)(a3 + 40);
LABEL_23:
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v101, v147, "time,%.3lf,h-function failure on line %d: %s() %s", a4, a5, a6, a7, a8, SLOBYTE(v20));
    return 0xFFFFFFFFLL;
  }
  if (!*(void *)(a3 + 512))
  {
    v101.i16[0] = 12;
    v147[0] = 4;
    double v20 = *(double *)(a3 + 48) + (double)*(uint64_t *)(a3 + 40);
    goto LABEL_23;
  }
  if (!*(unsigned char *)(a3 + 128))
  {
    v101.i16[0] = 12;
    v147[0] = 4;
    double v33 = *(double *)(a3 + 48) + (double)*(uint64_t *)(a3 + 40);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v101, v147, "time,%.3lf,h-function failure on line %d: %s() %s", a4, a5, a6, a7, a8, SLOBYTE(v33));
    v101.i16[0] = 12;
    v147[0] = 4;
    double v34 = *(double *)(a3 + 96) + (double)*(uint64_t *)(a3 + 88);
    sub_18E017C64(a3 + 56);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v101, v147, "t,%.3lf,%s,TAI time invalid", v35, v36, v37, v38, v39, SLOBYTE(v34));
    return 0xFFFFFFFFLL;
  }
  long long v149 = *(_OWORD *)(a3 + 40);
  long long v148 = *(_OWORD *)*(void *)(a3 + 520);
  sub_18E07FB20((uint64_t)v147, *(void *)(a3 + 528));
  int v26 = **(unsigned __int8 **)(a3 + 536);
  uint64_t v27 = *(void *)(a3 + 512);
  uint64_t v144 = 0x10000001CLL;
  long long v143 = xmmword_18E1FD5F0;
  uint64_t v142 = &unk_1EDD188B8;
  BOOL v145 = &v146;
  if (sub_18E0786E0((uint64_t)&v149, &v148, (uint64_t)v147, v27, *(void *)(a3 + 544), v26, 1, 1, (uint64_t)&v142))
  {
    v101.i16[0] = 12;
    LOBYTE(v137) = 4;
    double v77 = *(double *)(a3 + 48) + (double)*(uint64_t *)(a3 + 40);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v101, (unsigned __int8 *)&v137, "time,%.3lf,h-function failure on line %d: %s() %s", v28, v29, v30, v31, v32, SLOBYTE(v77));
    return 0xFFFFFFFFLL;
  }
  long long v143 = xmmword_18E1FD5F0;
  uint64_t v139 = 0x10000001CLL;
  long long v137 = &unk_1EDD188B8;
  long long v138 = xmmword_18E1FD5F0;
  uint64_t v140 = &v141;
  int64x2_t v101 = vdupq_n_s64(0x7FF8000000000000uLL);
  int64x2_t v102 = v101;
  int64x2_t v103 = v101;
  int64x2_t v104 = v101;
  int64x2_t v105 = v101;
  int64x2_t v106 = v101;
  int64x2_t v107 = v101;
  int64x2_t v108 = v101;
  int64x2_t v109 = v101;
  int64x2_t v110 = v101;
  int64x2_t v111 = v101;
  int64x2_t v112 = v101;
  int64x2_t v113 = v101;
  int64x2_t v114 = v101;
  int64x2_t v115 = v101;
  int64x2_t v116 = v101;
  int64x2_t v117 = v101;
  int64x2_t v118 = v101;
  int64x2_t v119 = v101;
  int64x2_t v120 = v101;
  int64x2_t v121 = v101;
  int64x2_t v122 = v101;
  int64x2_t v123 = v101;
  int64x2_t v124 = v101;
  int64x2_t v125 = v101;
  int64x2_t v126 = v101;
  int64x2_t v127 = v101;
  int64x2_t v128 = v101;
  int64x2_t v129 = v101;
  int64x2_t v130 = v101;
  int64x2_t v131 = v101;
  int64x2_t v132 = v101;
  int64x2_t v133 = v101;
  int64x2_t v134 = v101;
  int64x2_t v135 = v101;
  uint64_t v136 = 0x7FF8000000000000;
  LOBYTE(v81) = 0;
  if (sub_18E06EC84((uint64_t)&v142, a1, 0, 1, 1, (uint64_t)&v137, (uint64_t)&v101, (BOOL *)&v81, 0.000000015))
  {
    __int16 v81 = 12;
    LOBYTE(v89) = 4;
    double v78 = *(double *)(a3 + 48) + (double)*(uint64_t *)(a3 + 40);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v81, (unsigned __int8 *)&v89, "time,%.3lf,h-function failure on line %d: %s() %s", v40, v41, v42, v43, v44, SLOBYTE(v78));
    return 0xFFFFFFFFLL;
  }
  long long v99 = *(_OWORD *)v140;
  uint64_t v100 = v140[2];
  long long v97 = *(_OWORD *)(v140 + 3);
  uint64_t v98 = v140[5];
  uint64_t v96 = &unk_1EDD0ADE8;
  double v94 = 0.0;
  long long v95 = &unk_1EDD0AE20;
  long long v92 = 0u;
  long long v93 = 0u;
  long long v90 = 0u;
  long long v91 = 0u;
  long long v88 = *(_OWORD *)(a3 + 136);
  v46.i64[1] = *((void *)&v88 + 1);
  long long v89 = 0u;
  v46.i64[0] = *(void *)(a3 + 192);
  double v47 = *((double *)v140 + 20);
  *(double *)v45.i64 = *((double *)v140 + 19) / 1000000.0;
  __int16 v81 = 0;
  long long v82 = 0u;
  long long v83 = 0u;
  int v84 = 0;
  uint64_t v85 = 0;
  uint64_t v86 = 0;
  int v87 = 0;
  uint64_t v48 = (cnprint::CNPrinter *)cnnavigation::GNSSDopplerShift((uint64_t)&v88, (const cnnavigation::GNSSUTCParameters *)&v81, (uint64_t)&v99, (double *)&v97, a3 + 296, (uint64_t *)&v96, (uint64_t *)&v95, 1, v46, v45, v47 / 1000000.0, &v94, 1u, (uint64_t)&v89);
  if (v48)
  {
    sub_18E06B804(a3 + 40, (uint64_t)"could not compute expected measurement", (uint64_t)"h_GnssDoppler_RavenPNT", 5536, v49, v50, v51, v52);
    if (cnprint::CNPrinter::GetLogLevel(v53) <= 1)
    {
      __int16 v81 = 12;
      LOBYTE(v88) = 1;
      uint64_t v55 = *(void *)(a3 + 88);
      double v54 = *(double *)(a3 + 96);
      sub_18E017C64(a3 + 56);
      double v79 = v54 + (double)v55;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v81, (unsigned __int8 *)&v88, "t,%.3lf,%s,GNSSDopplerShift returned != 0", v56, v57, v58, v59, v60, SLOBYTE(v79));
    }
    return 0xFFFFFFFFLL;
  }
  double v61 = -299792458.0 / *(double *)(a3 + 192);
  double v62 = v94 * v61;
  if (!cnprint::CNPrinter::GetLogLevel(v48))
  {
    __int16 v81 = 12;
    LOBYTE(v88) = 0;
    uint64_t v64 = *(void *)(a3 + 88);
    double v63 = *(double *)(a3 + 96);
    sub_18E017C64(a3 + 56);
    double v80 = v63 + (double)v64;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v81, (unsigned __int8 *)&v88, "t,%.3lf,%s,using Doppler,predicted,%.3lf,diff,%.3lf,clockEstMtrs,%.2lf,clockDriftMps,%.2lf,std,%.2lf,multipath,%hhu,cno,%.1lf", v65, v66, v67, v68, v69, SLOBYTE(v80));
  }
  *(void *)&long long v70 = 0x100000001;
  *((void *)&v70 + 1) = 0x100000001;
  *(_OWORD *)(a4 + 8) = v70;
  **(double **)(a4 + 32) = v62 + **(double **)(a2 + 32);
  sub_18E0713D0((uint64_t)&v81);
  sub_18DFE2F24(a5, (uint64_t)&v81);
  double v71 = *((double *)&v90 + 1);
  int v72 = *(double **)(a5 + 32);
  *int v72 = v61 * (*(double *)v101.i64 * *(double *)&v90);
  uint64_t v73 = *(int *)(a5 + 20);
  v72[v73] = v61 * (*(double *)&v101.i64[1] * v71);
  double v74 = *((double *)&v91 + 1);
  v72[2 * v73] = v61 * (*(double *)v102.i64 * *(double *)&v91);
  v72[3 * (int)v73] = v61 * (*(double *)&v102.i64[1] * v74);
  double v75 = *((double *)&v92 + 1);
  v72[4 * v73] = v61 * (*(double *)v103.i64 * *(double *)&v92);
  v72[5 * (int)v73] = v61 * (*(double *)&v103.i64[1] * v75);
  double v76 = *((double *)&v93 + 1);
  v72[18 * (int)v73] = v61 * (*(double *)&v114.i64[1] * *(double *)&v93) / 1000000.0;
  v72[19 * (int)v73] = v61 * (*(double *)v115.i64 * v76) / 1000000.0;
  sub_18E071E98(1u, 1u, (uint64_t)&v81);
  sub_18DFE2F24(a6, (uint64_t)&v81);
  return 0;
}

uint64_t sub_18E040C30(uint64_t a1, double *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v66[4] = *(void (**)(uint64_t))MEMORY[0x1E4F143B8];
  unsigned int v5 = *(_DWORD *)(a4 + 8);
  if ((v5 & 0x80000000) != 0) {
    __assert_rtn("Zeros", "cnmatrix.h", 3098, "nr >= 0");
  }
  uint64_t v62 = 0x100000003;
  uint64_t v57 = &unk_1EDD18D98;
  double v63 = &v64;
  unsigned int v58 = v5;
  unsigned int v59 = 1;
  unsigned int v60 = v5;
  unsigned int v61 = v5;
  int v11 = (cnprint::CNPrinter *)sub_18DFE2CC8((uint64_t)&v57, 0.0);
  if (!*(unsigned char *)a1)
  {
    if (cnprint::CNPrinter::GetLogLevel(v11) <= 1)
    {
      LOWORD(v66[0]) = 2;
      unsigned __int8 v65 = 1;
      double v54 = a2[1] + (double)*(uint64_t *)a2;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v66, &v65, "MeasurementAccumulator::AddMeasurement() failed - Not initialized,t_meas,%.3lf", v17, v18, v19, v20, v21, SLOBYTE(v54));
    }
    return 0xFFFFFFFFLL;
  }
  if (*(_DWORD *)(a1 + 5936) == 174)
  {
    LOWORD(v66[0]) = 2;
    unsigned __int8 v65 = 2;
    double v53 = a2[1] + (double)*(uint64_t *)a2;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v66, &v65, "MeasurementAccumulator::AddMeasurement() failed - Out of space,t_meas,%.3lf", v12, v13, v14, v15, v16, SLOBYTE(v53));
    return 0xFFFFFFFFLL;
  }
  if (*(unsigned char *)(a1 + 1))
  {
    if (cnprint::CNPrinter::GetLogLevel(v11) <= 1)
    {
      LOWORD(v66[0]) = 2;
      unsigned __int8 v65 = 1;
      double v55 = a2[1] + (double)*(uint64_t *)a2;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v66, &v65, "MeasurementAccumulator::AddMeasurement() failed - Locked,t_meas,%.3lf", v22, v23, v24, v25, v26, SLOBYTE(v55));
    }
    return 0xFFFFFFFFLL;
  }
  BOOL v27 = sub_18DEE4CB8(a2, (double *)(a1 + 8));
  if (v27)
  {
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v27) <= 1)
    {
      LOWORD(v66[0]) = 2;
      unsigned __int8 v65 = 1;
      double v56 = a2[1] + (double)*(uint64_t *)a2;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v66, &v65, "MeasurementAccumulator::AddMeasurement() failed - Measurement too old,t_meas,%.3lf,t_start,%.3lf", v28, v29, v30, v31, v32, SLOBYTE(v56));
    }
    return 0xFFFFFFFFLL;
  }
  v66[0] = 0;
  v66[1] = 0;
  sub_18E077184(v66, a5);
  double v33 = sub_18E06C110((uint64_t *)(a1 + 40), v66);
  sub_18E067C60((uint64_t (**)(void, void, void, void, void))v66);
  uint64_t v34 = *(int *)(a1 + 5936);
  uint64_t v35 = (v34 + 1);
  if (*(void *)(a1 + 56) != v35)
  {
    LOWORD(v66[0]) = 2;
    unsigned __int8 v65 = 4;
    char v47 = (*(uint64_t (**)(uint64_t))(*(void *)a5 + 16))(a5);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v66, &v65, "MeasurementAccumulator::AddMeasurement() failed - allocation failed,meas_type,%d,t_meas,%.3lf", v48, v49, v50, v51, v52, v47);
    return 0xFFFFFFFFLL;
  }
  *(_DWORD *)(a1 + 5936) = v35;
  *(_DWORD *)(a1 + 72) = v35;
  *(_DWORD *)(a1 + 76) = 1;
  *(_DWORD *)(a1 + 80) = v35;
  *(_DWORD *)(a1 + 84) = v35;
  *(_DWORD *)(a1 + 2896) = v35;
  *(_DWORD *)(a1 + 2900) = 1;
  *(_DWORD *)(a1 + 2904) = v35;
  *(_DWORD *)(a1 + 2908) = v35;
  *(_DWORD *)(a1 + 3632) = v35;
  *(_DWORD *)(a1 + 3636) = 1;
  *(_DWORD *)(a1 + 3640) = v35;
  *(_DWORD *)(a1 + 3644) = v35;
  *(_DWORD *)(a1 + 5064) = v35;
  *(_DWORD *)(a1 + 5068) = 1;
  *(_DWORD *)(a1 + 5072) = v35;
  *(_DWORD *)(a1 + 5076) = v35;
  *(_DWORD *)(a1 + 5112) = v35;
  *(_DWORD *)(a1 + 5116) = 1;
  *(_DWORD *)(a1 + 5120) = v35;
  *(_DWORD *)(a1 + 5124) = v35;
  *(_DWORD *)(a1 + 5848) = v35;
  *(_DWORD *)(a1 + 5852) = 1;
  *(_DWORD *)(a1 + 5856) = v35;
  *(_DWORD *)(a1 + 5860) = v35;
  *(_DWORD *)(a1 + 5896) = v35;
  *(_DWORD *)(a1 + 5900) = 1;
  *(_DWORD *)(a1 + 5904) = v35;
  *(_DWORD *)(a1 + 5908) = v35;
  *(_DWORD *)(a1 + 5952) = v35;
  *(_DWORD *)(a1 + 5956) = 1;
  *(_DWORD *)(a1 + 5960) = v35;
  *(_DWORD *)(a1 + 5964) = v35;
  *(_DWORD *)(a1 + 7384) = v35;
  *(_DWORD *)(a1 + 7388) = 1;
  *(_DWORD *)(a1 + 7392) = v35;
  *(_DWORD *)(a1 + 7396) = v35;
  *(_OWORD *)(*(void *)(a1 + 96) + 16 * v34) = *(_OWORD *)a2;
  unsigned int v36 = *(_DWORD *)(a3 + 8);
  unsigned int v37 = *(_DWORD *)(a3 + 12);
  if (v36 <= v37) {
    int v38 = *(_DWORD *)(a3 + 12);
  }
  else {
    int v38 = *(_DWORD *)(a3 + 8);
  }
  if (v37) {
    BOOL v39 = v36 == 0;
  }
  else {
    BOOL v39 = 1;
  }
  if (v39) {
    int v40 = 0;
  }
  else {
    int v40 = v38;
  }
  *(_DWORD *)(*(void *)(a1 + 2920) + 4 * v34) = v40;
  sub_18DFE2F24(*(void *)(a1 + 5088) + (v34 << 6), a3);
  if (v58 <= v59) {
    unsigned int v41 = v59;
  }
  else {
    unsigned int v41 = v58;
  }
  if (v59) {
    BOOL v42 = v58 == 0;
  }
  else {
    BOOL v42 = 1;
  }
  if (v42) {
    unsigned int v43 = 0;
  }
  else {
    unsigned int v43 = v41;
  }
  *(_DWORD *)(*(void *)(a1 + 5136) + 4 * v34) = v43;
  sub_18DFE2F24(*(void *)(a1 + 5872) + (v34 << 6), (uint64_t)&v57);
  __n128 v44 = sub_18DFE2F24(*(void *)(a1 + 5920) + 112 * (int)v34, a4);
  *(void *)(*(void *)(a1 + 5976) + 8 * v34) = sub_18E040560;
  int8x16_t v45 = (uint64_t (*)(uint64_t, void *, void, void *, void *, __n128))*v33;
  if (*v33) {
    int8x16_t v45 = (uint64_t (*)(uint64_t, void *, void, void *, void *, __n128))v45(3, v33, 0, &unk_1EDD05810, &std::__any_imp::__unique_typeinfo<raven::h_GnssDopplerArgs_RavenPNT<double>>::__id, v44);
  }
  uint64_t result = 0;
  *(void *)(*(void *)(a1 + 7408) + 8 * v34) = v45;
  return result;
}

void sub_18E04105C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (a2) {
    sub_18DEDD524(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_18E041088(uint64_t a1)
{
  *(void *)(a1 + 296) = &unk_1EDD0AE58;
  if (*(char *)(a1 + 327) < 0) {
    operator delete(*(void **)(a1 + 304));
  }
  *(void *)(a1 + 296) = &unk_1EDD0A9B8;
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  *(void *)a1 = &unk_1EDD0A4E8;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

uint64_t sub_18E041134(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9, int8x16_t a10)
{
  uint64_t v15 = a1;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EB403AB0, memory_order_acquire) & 1) == 0)
  {
    a1 = __cxa_guard_acquire(&qword_1EB403AB0);
    if (a1)
    {
      uint64_t v106 = 0x1300000001;
      int64x2_t v104 = &unk_1EDD17E38;
      int64x2_t v107 = (double *)&v108;
      long long v105 = xmmword_18E1FD720;
      for (uint64_t i = 10; i != 29; ++i)
        *((_DWORD *)&v104 + i) = i - 10;
      sub_18E05B858((uint64_t)&unk_1EB404360, (uint64_t)&v104);
      __cxa_atexit((void (*)(void *))sub_18E0600EC, &unk_1EB404360, &dword_18DEDB000);
      __cxa_guard_release(&qword_1EB403AB0);
    }
  }
  unsigned int v16 = *(_DWORD *)(v15 + 8);
  unsigned int v17 = *(_DWORD *)(v15 + 12);
  if (v16 <= v17) {
    int v18 = *(_DWORD *)(v15 + 12);
  }
  else {
    int v18 = *(_DWORD *)(v15 + 8);
  }
  if (v16) {
    BOOL v19 = v17 == 0;
  }
  else {
    BOOL v19 = 1;
  }
  BOOL v20 = !v19 && v18 == 26;
  if (!v20
    || ((v24 = *(_DWORD *)(a2 + 8), unsigned int v23 = *(_DWORD *)(a2 + 12), v24 <= v23)
      ? (int v25 = *(_DWORD *)(a2 + 12))
      : (int v25 = *(_DWORD *)(a2 + 8)),
        !v24 || !v23 || v25 != 1))
  {
    LOWORD(v104) = 12;
    LOBYTE(v100) = 4;
    double v21 = *(double *)(a3 + 48) + (double)*(uint64_t *)(a3 + 40);
LABEL_13:
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v104, (unsigned __int8 *)&v100, "time,%.3lf,h-function failure on line %d: %s() %s", a4, a5, a6, a7, a8, SLOBYTE(v21));
    return 0xFFFFFFFFLL;
  }
  if (!*(void *)(a3 + 552))
  {
    LOWORD(v104) = 12;
    LOBYTE(v100) = 4;
    double v21 = *(double *)(a3 + 48) + (double)*(uint64_t *)(a3 + 40);
    goto LABEL_13;
  }
  if (!*(void *)(a3 + 512))
  {
    LOWORD(v104) = 12;
    LOBYTE(v100) = 4;
    double v21 = *(double *)(a3 + 48) + (double)*(uint64_t *)(a3 + 40);
    goto LABEL_13;
  }
  if (!*(void *)(a3 + 560))
  {
    LOWORD(v104) = 12;
    LOBYTE(v100) = 4;
    double v21 = *(double *)(a3 + 48) + (double)*(uint64_t *)(a3 + 40);
    goto LABEL_13;
  }
  double v26 = *(double *)(a3 + 288) - *(double *)(a3 + 280);
  double v27 = fabs(v26);
  if (v26 <= 0.0 || *(void *)&v27 >= 0x7FF0000000000000)
  {
    LOWORD(v104) = 12;
    LOBYTE(v100) = 4;
    double v21 = *(double *)(a3 + 48) + (double)*(uint64_t *)(a3 + 40);
    goto LABEL_13;
  }
  v120[0] = v15;
  v120[1] = a3;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EB403AB8, memory_order_acquire) & 1) == 0)
  {
    a1 = __cxa_guard_acquire(&qword_1EB403AB8);
    if (a1)
    {
      qword_1EB403B88 = 0;
      dbl_1EB403B90 = 0.05;
      __cxa_guard_release(&qword_1EB403AB8);
    }
  }
  int64x2_t v119 = *(void ***)(a3 + 552);
  a10.i64[0] = 3.0;
  double v29 = (dbl_1EB403B90 + (double)qword_1EB403B88) * 3.0;
  if (v26 <= v29 && cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)a1) <= 1)
  {
    LOWORD(v104) = 12;
    LOBYTE(v100) = 1;
    double v30 = *(double *)(a3 + 96) + (double)*(uint64_t *)(a3 + 88);
    sub_18E017C64(a3 + 56);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v104, (unsigned __int8 *)&v100, "t,%.3lf,%s, do not use carrier phase compuatation cache, vendor_meas_interval_sec, %.3lf", v31, v32, v33, v34, v35, SLOBYTE(v30));
  }
  uint64_t v96 = a3 + 56;
  a9.i64[0] = *(void *)(a3 + 280);
  uint64_t v101 = 0;
  uint64_t v100 = 0;
  CNTimeSpan::SetTimeSpan(&v100, 0, a9, a10);
  int64x2_t v104 = (void *)CNTimeSpan::operator+(a3 + 88, &v100, v36, v37);
  *(void *)&long long v105 = v38;
  unsigned int v41 = sub_18E0775DC(&v119, &v104, v26 > v29, v39, v40);
  double v118 = 0.0;
  long long v116 = 0u;
  long long v117 = 0u;
  long long v114 = *((_OWORD *)v41 + 2);
  float64x2_t v115 = 0u;
  if (sub_18E0779A4(v120, &v114, &v118, &v115, (uint64_t)(v41 + 6), *(double *)&v114, (int8x16_t)0))
  {
    uint64_t v48 = a3 + 40;
    uint64_t v49 = "could not compute expected Doppler at start";
    uint64_t v50 = 5316;
LABEL_40:
    sub_18E06B804(v48, (uint64_t)v49, (uint64_t)"h_GnssAverageDoppler_RavenPNT", v50, v42, v43, v44, v45);
    return 0xFFFFFFFFLL;
  }
  v46.i64[0] = *(void *)(a3 + 288);
  uint64_t v101 = 0;
  uint64_t v100 = 0;
  CNTimeSpan::SetTimeSpan(&v100, 0, v46, v47);
  int64x2_t v104 = (void *)CNTimeSpan::operator+(a3 + 88, &v100, v51, v52);
  *(void *)&long long v105 = v53;
  double v56 = sub_18E0775DC(&v119, &v104, v26 > v29, v54, v55);
  double v113 = 0.0;
  long long v111 = 0u;
  long long v112 = 0u;
  float64x2_t v110 = 0u;
  long long v109 = *((_OWORD *)v56 + 2);
  if (sub_18E0779A4(v120, &v109, &v113, &v110, (uint64_t)(v56 + 6), *(double *)&v109, v57))
  {
    uint64_t v48 = a3 + 40;
    uint64_t v49 = "could not compute expected Doppler at end";
    uint64_t v50 = 5326;
    goto LABEL_40;
  }
  unsigned int v60 = (cnprint::CNPrinter *)CNTimeSpan::operator-((uint64_t)&v109, &v114, v58, v59);
  double v62 = v61 + (double)(uint64_t)v60;
  if (v62 <= 0.0)
  {
    LOWORD(v104) = 12;
    LOBYTE(v100) = 4;
    double v89 = *(double *)(a3 + 96) + (double)*(uint64_t *)(a3 + 88);
    sub_18E017C64(v96);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v104, (unsigned __int8 *)&v100, "t,%.3lf,%s,Invalid true averaging interval in raven time,%.3lf, vendor_meas_interval_sec, %.3lf", v90, v91, v92, v93, v94, SLOBYTE(v89));
    return 0xFFFFFFFFLL;
  }
  double v63 = 1.0 / v62 * (299792458.0 / *(double *)(a3 + 192));
  double v64 = v63 * (v113 - v118);
  if (!cnprint::CNPrinter::GetLogLevel(v60))
  {
    LOWORD(v104) = 12;
    LOBYTE(v100) = 0;
    double v65 = *(double *)(a3 + 96) + (double)*(uint64_t *)(a3 + 88);
    sub_18E017C64(v96);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v104, (unsigned __int8 *)&v100, "t,%.3lf,%s,using avg Doppler,predicted,%.3lf,diff,%.3lf,clockEstMtrs,%.2lf,std,%.2lf,multipath,%hhu,cno,%.1lf", v66, v67, v68, v69, v70, SLOBYTE(v65));
  }
  *(void *)&long long v71 = 0x100000001;
  *((void *)&v71 + 1) = 0x100000001;
  *(_OWORD *)(a4 + 8) = v71;
  **(double **)(a4 + 32) = v64 + **(double **)(a2 + 32);
  sub_18E0713D0((uint64_t)&v104);
  sub_18E0713D0((uint64_t)&v100);
  double v72 = *((double *)&v111 + 1);
  uint64_t v73 = v107;
  *int64x2_t v107 = v63 * (*(double *)&v111 * *((double *)v56 + 41));
  double v74 = *((double *)&v116 + 1);
  double v75 = v103;
  *int64x2_t v103 = v63 * (*(double *)&v116 * *((double *)v41 + 41));
  uint64_t v76 = SHIDWORD(v105);
  v73[SHIDWORD(v105)] = v63 * (v72 * *((double *)v56 + 42));
  uint64_t v77 = v102;
  v75[v102] = v63 * (v74 * *((double *)v41 + 42));
  double v78 = *((double *)&v112 + 1);
  v73[2 * v76] = v63 * (*(double *)&v112 * *((double *)v56 + 43));
  double v79 = *((double *)&v117 + 1);
  v75[2 * v77] = v63 * (*(double *)&v117 * *((double *)v41 + 43));
  v73[18 * (int)v76] = v63 * (v78 * *((double *)v56 + 68)) * 0.000001;
  v75[18 * (int)v77] = v63 * (v79 * *((double *)v41 + 68)) * 0.000001;
  sub_18E0713D0((uint64_t)v99);
  __n128 v80 = sub_18DFE2F24(a5, (uint64_t)v99);
  uint64_t v82 = CNTimeSpan::operator-((uint64_t)&v109, (void *)(a3 + 88), (int8x16_t)v80, v81);
  *(void *)&v99[0] = v82;
  v99[1] = v83;
  if (v82 < 0 || (*(double *)v84.i64 = v83, v83 < 0.0))
  {
    uint64_t v82 = CNTimeSpan::operator-(v99, v84, v85);
    v84.i64[0] = v86;
  }
  if (*(double *)v84.i64 + (double)v82 >= 0.001)
  {
    sub_18E0785FC((uint64_t)v98, (uint64_t)&v104, (uint64_t)(v56 + 114));
    sub_18E0785FC((uint64_t)v97, (uint64_t)&v100, (uint64_t)(v41 + 114));
    int v87 = (void **)v98;
    long long v88 = v97;
  }
  else
  {
    sub_18E0785FC((uint64_t)v98, (uint64_t)&v100, (uint64_t)(v41 + 114));
    int v87 = &v104;
    long long v88 = v98;
  }
  sub_18E0785AC((uint64_t)v99, (uint64_t)v87, (uint64_t)v88);
  sub_18DFE2F24(a5, (uint64_t)v99);
  *(double *)(*(void *)(a5 + 32) + 152 * *(int *)(a5 + 20)) = *(double *)(*(void *)(a5 + 32)
                                                                            + 152 * *(int *)(a5 + 20))
                                                                + v64 * 0.000001 * *((double *)v56 + 69);
  sub_18E071E98(1u, 1u, (uint64_t)v99);
  sub_18DFE2F24(a6, (uint64_t)v99);
  return 0;
}

void sub_18E041908(_Unwind_Exception *a1)
{
}

uint64_t sub_18E041934(uint64_t a1)
{
  *(void *)(a1 + 296) = &unk_1EDD0AE58;
  if (*(char *)(a1 + 327) < 0) {
    operator delete(*(void **)(a1 + 304));
  }
  *(void *)(a1 + 296) = &unk_1EDD0A9B8;
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  *(void *)a1 = &unk_1EDD0A4E8;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

uint64_t sub_18E0419E0(uint64_t a1)
{
  *(void *)(a1 + 240) = &unk_1EDD0AE58;
  if (*(char *)(a1 + 271) < 0) {
    operator delete(*(void **)(a1 + 248));
  }
  *(void *)(a1 + 240) = &unk_1EDD0A9B8;
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_18E041A60(uint64_t a1, unsigned int a2, unsigned int a3)
{
  if (!a2) {
    return 0;
  }
  if (a2 / a3 <= 1) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = a2 / a3;
  }
  if (sub_18E0799B0(a1)) {
    return 0xFFFFFFFFLL;
  }
  int v6 = 1;
  do
  {
    unsigned int v7 = v6;
    if (v4 == v6) {
      break;
    }
    int v8 = sub_18E0799B0(a1);
    int v6 = v7 + 1;
  }
  while (!v8);
  if (v7 >= v4) {
    return 0;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t raven::RavenPNTEstimator::HandleEvent(raven::RavenPNTEstimator *this, const raven::HorizontalDOTInIMUFrameEvent *a2)
{
  if (!*((unsigned char *)this + 57)) {
    return 0xFFFFFFFFLL;
  }
  if (!*((unsigned char *)this + 58)) {
    return 0;
  }
  uint64_t v4 = 0;
  unsigned int v5 = (_OWORD *)((char *)a2 + 280);
  uint64_t v6 = *((int *)a2 + 7);
  int v7 = v6 + 1;
  uint64_t v8 = 8 * v6;
  unsigned int v9 = (void *)*((void *)a2 + 5);
  while (2)
  {
    if ((*(void *)(*((void *)a2 + 31) + 8 * v4) & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
      LOWORD(v62) = 12;
      LOBYTE(v75) = 4;
      uint64_t v31 = (*(uint64_t (**)(const raven::HorizontalDOTInIMUFrameEvent *))(*(void *)a2 + 16))(a2);
      double v57 = v32 + (double)v31;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v62, (unsigned __int8 *)&v75, "t,%.3lf, Invalid horizontal DOT at %d element = %.3lf", v33, v34, v35, v36, v37, SLOBYTE(v57));
      return 0xFFFFFFFFLL;
    }
    if (*(double *)(*((void *)a2 + 5) + 8 * v7 * (int)v4) <= 0.0)
    {
      LOWORD(v62) = 12;
      LOBYTE(v75) = 4;
      uint64_t v38 = (*(uint64_t (**)(const raven::HorizontalDOTInIMUFrameEvent *))(*(void *)a2 + 16))(a2);
      double v58 = v39 + (double)v38;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v62, (unsigned __int8 *)&v75, "t,%.3lf, Invalid horizontal DOT covariance %d diagonal value = %.3lf", v40, v41, v42, v43, v44, SLOBYTE(v58));
      return 0xFFFFFFFFLL;
    }
    uint64_t v10 = 0;
    int v11 = v9;
    do
    {
      if ((*v11 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      {
        LOWORD(v62) = 12;
        LOBYTE(v75) = 4;
        uint64_t v23 = (*(uint64_t (**)(const raven::HorizontalDOTInIMUFrameEvent *))(*(void *)a2 + 16))(a2);
        double v56 = v24 + (double)v23;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v62, (unsigned __int8 *)&v75, "t,%.3lf, Invalid horizontal DOT uncertainty at location (%d, %d) = %.3lf", v25, v26, v27, v28, v29, SLOBYTE(v56));
        return 0xFFFFFFFFLL;
      }
      ++v10;
      int v11 = (void *)((char *)v11 + v8);
    }
    while (v10 != 3);
    ++v4;
    ++v9;
    if (v4 != 3) {
      continue;
    }
    break;
  }
  uint64_t v82 = 0x100000003;
  __n128 v80 = &unk_1EDD18D98;
  double v83 = &v84;
  long long v81 = xmmword_18E1F6F60;
  uint64_t v12 = (cnprint::CNPrinter *)sub_18DFE2CC8((uint64_t)&v80, 0.0);
  uint64_t v77 = 0x300000003;
  long long v76 = xmmword_18E1F0010;
  double v75 = &unk_1EDD18EE8;
  double v78 = &v79;
  uint64_t v13 = *((void *)this + 1831);
  v14.f64[0] = *(float64_t *)(v13 + 192);
  if (v14.f64[0] < 0.75)
  {
    if (cnprint::CNPrinter::GetLogLevel(v12) <= 1)
    {
      LOWORD(v74) = 12;
      LOBYTE(v59[0]) = 1;
      double v62 = (void *)(*(uint64_t (**)(const raven::HorizontalDOTInIMUFrameEvent *))(*(void *)a2 + 16))(a2);
      __p[0] = v15;
      cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)&v62, "horizontal dot measurement ignored at low user speed of %.1lf", *(double *)(v13 + 192));
      if (*((char *)this + 2511) >= 0) {
        LOBYTE(v21) = (_BYTE)this - 72;
      }
      else {
        uint64_t v21 = *((void *)this + 311);
      }
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v74, (unsigned __int8 *)v59, "%s", v16, v17, v18, v19, v20, v21);
    }
    return 0;
  }
  v14.f64[0] = v14.f64[0] * v14.f64[0];
  uint64_t v64 = 0x300000003;
  double v62 = &unk_1EDD18EE8;
  *(_OWORD *)uint64_t __p = xmmword_18E1F0010;
  double v65 = &v66;
  sub_18DFE3240((uint64_t)a2 + 8, (uint64_t)&v62, v14);
  __n128 v45 = sub_18DFE2F24((uint64_t)&v75, (uint64_t)&v62);
  *(void *)&long long v74 = (*(uint64_t (**)(const raven::HorizontalDOTInIMUFrameEvent *, __n128))(*(void *)a2 + 16))(a2, v45);
  *((void *)&v74 + 1) = v46;
  sub_18E079DD4(&v62);
  long long v66 = v74;
  sub_18DFE2F24((uint64_t)&v72, (uint64_t)a2 + 216);
  if (v73 != v5)
  {
    long long v47 = v5[1];
    v73[0] = *v5;
    v73[1] = v47;
  }
  uint64_t v67 = (char *)this + 2696;
  uint64_t v68 = (char *)this + 14600;
  uint64_t v69 = (char *)this + 14616;
  uint64_t v70 = (char *)this + 2536;
  long long v71 = (char *)this + 2576;
  if (sub_18E042D1C((uint64_t)this + 61288, (double *)&v74, (uint64_t)&v80, (uint64_t)&v75, (uint64_t)&v62))
  {
    __int16 v61 = 12;
    unsigned __int8 v60 = 4;
    v59[0] = (*(uint64_t (**)(const raven::HorizontalDOTInIMUFrameEvent *))(*(void *)a2 + 16))(a2);
    v59[1] = v48;
    char v49 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)v59, "Could not add measurement - horizontal DOT");
    if (*((char *)this + 2511) >= 0) {
      LOBYTE(v55) = v49;
    }
    else {
      uint64_t v55 = *((void *)this + 311);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v61, &v60, "%s", v50, v51, v52, v53, v54, v55);
    uint64_t v22 = 0xFFFFFFFFLL;
  }
  else
  {
    uint64_t v22 = 0;
  }
  double v72 = &unk_1EDD17478;
  double v62 = &unk_1EDD0A4E8;
  if (SHIBYTE(v65) < 0) {
    operator delete(__p[1]);
  }
  return v22;
}

void sub_18E04200C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_18E043174((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_18E042024@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>, float64x2_t a3@<Q0>)
{
  *(void *)(a2 + 24) = 0x300000003;
  *(void *)a2 = &unk_1EDD18EE8;
  *(_OWORD *)(a2 + 8) = xmmword_18E1F0010;
  *(void *)(a2 + 32) = a2 + 40;
  *(void *)&double result = *(_OWORD *)&sub_18DFE3240(a1, a2, a3);
  return result;
}

void sub_18E042084(_Unwind_Exception *a1)
{
  *uint64_t v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

uint64_t sub_18E0420A4(uint64_t a1)
{
  MEMORY[0x1F4188790](a1);
  uint64_t v9 = v3;
  long long v160 = *(_OWORD *)(v3 + 40);
  unsigned int v10 = *(_DWORD *)(v1 + 8);
  unsigned int v11 = *(_DWORD *)(v1 + 12);
  if (v10 <= v11) {
    int v12 = *(_DWORD *)(v1 + 12);
  }
  else {
    int v12 = *(_DWORD *)(v1 + 8);
  }
  if (v10) {
    BOOL v13 = v11 == 0;
  }
  else {
    BOOL v13 = 1;
  }
  BOOL v14 = !v13 && v12 == 26;
  if (!v14
    || ((uint64_t v15 = v2, v16 = *(_DWORD *)(v2 + 8), v17 = *(_DWORD *)(v2 + 12), v16 <= v17)
      ? (int v18 = *(_DWORD *)(v2 + 12))
      : (int v18 = *(_DWORD *)(v2 + 8)),
        v16 ? (BOOL v19 = v17 == 0) : (BOOL v19 = 1),
        !v19 ? (BOOL v20 = v18 == 3) : (BOOL v20 = 0),
        !v20))
  {
    LOWORD(v161) = 12;
    v113[0] = 4;
    double v21 = *(double *)(v3 + 48) + (double)*(uint64_t *)(v3 + 40);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v161, v113, "time,%.3lf,h-function failure on line %d: %s() %s", v4, v5, v6, v7, v8, SLOBYTE(v21));
    if (cnprint::CNPrinter::GetLogLevel(v22) <= 1)
    {
      LOWORD(v161) = 12;
      v113[0] = 1;
      double v80 = *((double *)&v160 + 1) + (double)(uint64_t)v160;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v161, v113, "t,%.3lf, Warning: h_HorizontalVelocityInIMUFrame_RavenPNT called with inadequate matrices", v23, v24, v25, v26, v27, SLOBYTE(v80));
    }
    return 0xFFFFFFFFLL;
  }
  if (!*(void *)(v3 + 56))
  {
    LOWORD(v161) = 12;
    v113[0] = 4;
    double v37 = *(double *)(v3 + 48) + (double)*(uint64_t *)(v3 + 40);
LABEL_34:
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v161, v113, "time,%.3lf,h-function failure on line %d: %s() %s", v4, v5, v6, v7, v8, SLOBYTE(v37));
    return 0xFFFFFFFFLL;
  }
  uint64_t v28 = v6;
  uint64_t v29 = v5;
  uint64_t v30 = v4;
  uint64_t v31 = v1;
  uint64_t v32 = *(void *)(v3 + 72);
  long long v159 = *(_OWORD *)*(void *)(v3 + 64);
  sub_18E07FB20((uint64_t)v158, v32);
  for (uint64_t i = 0; i != 24; i += 8)
  {
    if ((*(void *)(*(void *)(v9 + 128) + i) & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
      LOWORD(v161) = 12;
      v113[0] = 4;
      double v37 = *(double *)(v9 + 48) + (double)*(uint64_t *)(v9 + 40);
      goto LABEL_34;
    }
  }
  *(void *)&v113[24] = 0x100000003;
  *(void *)double v113 = &unk_1EDD18D98;
  *(_OWORD *)&v113[8] = xmmword_18E1F6F60;
  *(void *)&long long v114 = (char *)&v114 + 8;
  uint64_t v163 = 0x100000134;
  long long v162 = xmmword_18E1F6FB0;
  uint64_t v161 = &unk_1EDD18C48;
  uint64_t v164 = &v165;
  uint64_t v155 = 0x100000003;
  long long v154 = xmmword_18E1F6F60;
  uint64_t v153 = &unk_1EDD18D98;
  uint64_t v156 = v157;
  sub_18DFE345C(v9 + 96, (uint64_t)v113, (uint64_t)&v161, (uint64_t)&v153, "2");
  if (fabs(v34) <= 0.000000015)
  {
    LOWORD(v161) = 12;
    v113[0] = 4;
    double v37 = *(double *)(v9 + 48) + (double)*(uint64_t *)(v9 + 40);
    goto LABEL_34;
  }
  double v35 = 1.0 / v34;
  uint64_t v36 = *(float64x2_t **)(v9 + 128);
  *uint64_t v36 = vmulq_n_f64(*v36, v35);
  v36[1].f64[0] = v35 * v36[1].f64[0];
  if (**(unsigned char **)(v9 + 80))
  {
    LOWORD(v161) = 12;
    v113[0] = 4;
    double v37 = *(double *)(v9 + 48) + (double)*(uint64_t *)(v9 + 40);
    goto LABEL_34;
  }
  uint64_t v39 = *(void *)(v9 + 56);
  uint64_t v155 = 0x10000001CLL;
  long long v154 = xmmword_18E1FD5F0;
  uint64_t v153 = &unk_1EDD188B8;
  uint64_t v156 = v157;
  if (sub_18E0786E0((uint64_t)&v160, &v159, (uint64_t)v158, v39, *(void *)(v9 + 88), 0, 0, 1, (uint64_t)&v153))
  {
    sub_18E06B804(v9 + 40, (uint64_t)"could not integrate full states", (uint64_t)"h_HorizontalVelocityInIMUFrame_RavenPNT", 5912, v40, v41, v42, v43);
    return 0xFFFFFFFFLL;
  }
  uint64_t v150 = 0x10000001CLL;
  long long v148 = &unk_1EDD188B8;
  long long v149 = xmmword_18E1FD5F0;
  char v151 = (double *)&v152;
  *(int64x2_t *)double v113 = vdupq_n_s64(0x7FF8000000000000uLL);
  *(_OWORD *)&v113[16] = *(_OWORD *)v113;
  long long v114 = *(_OWORD *)v113;
  long long v115 = *(_OWORD *)v113;
  long long v116 = *(_OWORD *)v113;
  long long v117 = *(_OWORD *)v113;
  long long v118 = *(_OWORD *)v113;
  long long v119 = *(_OWORD *)v113;
  long long v120 = *(_OWORD *)v113;
  long long v121 = *(_OWORD *)v113;
  long long v122 = *(_OWORD *)v113;
  long long v123 = *(_OWORD *)v113;
  long long v124 = *(_OWORD *)v113;
  long long v125 = *(_OWORD *)v113;
  long long v126 = *(_OWORD *)v113;
  long long v127 = *(_OWORD *)v113;
  long long v128 = *(_OWORD *)v113;
  long long v129 = *(_OWORD *)v113;
  long long v130 = *(_OWORD *)v113;
  long long v131 = *(_OWORD *)v113;
  long long v132 = *(_OWORD *)v113;
  long long v133 = *(_OWORD *)v113;
  long long v134 = *(_OWORD *)v113;
  long long v135 = *(_OWORD *)v113;
  long long v136 = *(_OWORD *)v113;
  long long v137 = *(_OWORD *)v113;
  long long v138 = *(_OWORD *)v113;
  long long v139 = *(_OWORD *)v113;
  long long v140 = *(_OWORD *)v113;
  long long v141 = *(_OWORD *)v113;
  long long v142 = *(_OWORD *)v113;
  long long v143 = *(_OWORD *)v113;
  long long v144 = *(_OWORD *)v113;
  long long v145 = *(_OWORD *)v113;
  long long v146 = *(_OWORD *)v113;
  uint64_t v147 = 0x7FF8000000000000;
  BOOL v112 = 0;
  double v44 = 0.0;
  if (sub_18E06EC84((uint64_t)&v153, v31, 0, 0, 1, (uint64_t)&v148, (uint64_t)v113, &v112, 0.0))
  {
    sub_18E06B804(v9 + 40, (uint64_t)"could not correct states", (uint64_t)"h_HorizontalVelocityInIMUFrame_RavenPNT", 5926, v45, v46, v47, v48);
    if (cnprint::CNPrinter::GetLogLevel(v49) <= 1)
    {
      LOWORD(v161) = 12;
      v106[0] = 1;
      double v81 = *((double *)&v160 + 1) + (double)(uint64_t)v160;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v161, v106, "t,%.3lf, Error: h_HorizontalVelocityInIMUFrame_RavenPNT GetEarthFixedFullStateEstimate failed", v50, v51, v52, v53, v54, SLOBYTE(v81));
    }
    return 0xFFFFFFFFLL;
  }
  uint64_t v55 = v151;
  double v56 = v151[6];
  double v57 = v151[7];
  double v58 = v151[8];
  double v59 = v151[9];
  double v60 = sqrt(v57 * v57 + v56 * v56 + v58 * v58 + v59 * v59);
  double v61 = 1.0;
  double v62 = 0.0;
  double v63 = 0.0;
  if (fabs(v60) >= 2.22044605e-16)
  {
    double v44 = v56 / v60;
    double v62 = v57 / v60;
    double v63 = v58 / v60;
    double v61 = v59 / v60;
  }
  v109.f64[0] = v44;
  v109.f64[1] = v62;
  double v110 = v63;
  double v111 = v61;
  uint64_t v163 = 0x300000001;
  uint64_t v161 = &unk_1EDD18258;
  uint64_t v164 = &v165;
  long long v162 = xmmword_18E1F8560;
  uint64_t v165 = 0x1A00000019;
  int v166 = 27;
  sub_18DFEC63C((uint64_t)&v161, (uint64_t)v108);
  sub_18DFFDA0C((uint64_t)v106, v151[21], v151[22], v151[23]);
  if (!v106[8]) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v103 = 0x300000003;
  uint64_t v101 = &unk_1EDD18EE8;
  long long v102 = xmmword_18E1F0010;
  int64x2_t v104 = &v105;
  sub_18DFE2F24((uint64_t)&v101, (uint64_t)&v107);
  sub_18E060330(3u, 3u, (uint64_t)v98);
  *(void *)(v100 + 16 * v99 + 16) = 0;
  sub_18E01E3DC((uint64_t)&v101, (uint64_t)v96);
  sub_18DFF6360((uint64_t)v96, (uint64_t)v98, (uint64_t)&v161);
  sub_18DFF6360((uint64_t)&v161, (uint64_t)&v101, (uint64_t)v97);
  v64.f64[0] = v55[24];
  sub_18E042024((uint64_t)v97, (uint64_t)v96, v64);
  sub_18E06DD64((uint64_t)&v161, (uint64_t)&v148, (uint64_t)v108);
  sub_18E079C58((uint64_t)v95, (uint64_t)v96, (uint64_t)&v161);
  sub_18E03017C((uint64_t)v95);
  float64_t v66 = v65;
  cnrotation::Inv((float64x2_t *)(v9 + 160), (float64x2_t *)&v161);
  cnrotation::Cat(v109.f64, (const cnrotation::CNRotation *)&v161, v94);
  sub_18DFEDF6C((cnrotation::CNRotation *)v94, v9 + 96, (uint64_t)v96);
  *(_OWORD *)(v30 + 8) = xmmword_18E1F6F60;
  sub_18DFEDF6C((cnrotation::CNRotation *)&v109, (uint64_t)v95, (uint64_t)v92);
  v67.f64[0] = v66;
  sub_18E042024((uint64_t)v96, (uint64_t)v91, v67);
  sub_18E06D4CC((uint64_t)v92, (uint64_t)v91, (uint64_t)v93);
  sub_18E079CE4((uint64_t)&v161, (uint64_t)v93, v15);
  sub_18DFE2F24(v30, (uint64_t)&v161);
  sub_18E06BD44((uint64_t)&v161, 26);
  sub_18DFE2F24(v29, (uint64_t)&v161);
  cnrotation::CNRotation::dRdq1((cnrotation::CNRotation *)&v109, (uint64_t)v93);
  cnrotation::CNRotation::dRdq2((cnrotation::CNRotation *)&v109, (uint64_t)v92);
  cnrotation::CNRotation::dRdq3((cnrotation::CNRotation *)&v109, (uint64_t)v91);
  cnrotation::CNRotation::dRdq4(&v109, (uint64_t)v90);
  *(void *)&v68.f64[0] = v115;
  sub_18E060288((uint64_t)v87, (uint64_t)v93, v68);
  v69.f64[0] = *((float64_t *)&v116 + 1);
  sub_18E060288((uint64_t)v86, (uint64_t)v92, v69);
  sub_18E01E39C((uint64_t)v87, (uint64_t)v86, (uint64_t)v88);
  *(void *)&v70.f64[0] = v118;
  sub_18E060288((uint64_t)v85, (uint64_t)v91, v70);
  sub_18E01E39C((uint64_t)v88, (uint64_t)v85, (uint64_t)&v161);
  v71.f64[0] = *((float64_t *)&v119 + 1);
  sub_18E060288((uint64_t)v84, (uint64_t)v90, v71);
  sub_18E01E39C((uint64_t)&v161, (uint64_t)v84, (uint64_t)v89);
  v72.f64[0] = *((float64_t *)&v115 + 1);
  sub_18E060288((uint64_t)v86, (uint64_t)v93, v72);
  *(void *)&v73.f64[0] = v117;
  sub_18E060288((uint64_t)v85, (uint64_t)v92, v73);
  sub_18E01E39C((uint64_t)v86, (uint64_t)v85, (uint64_t)v87);
  v74.f64[0] = *((float64_t *)&v118 + 1);
  sub_18E060288((uint64_t)v84, (uint64_t)v91, v74);
  sub_18E01E39C((uint64_t)v87, (uint64_t)v84, (uint64_t)&v161);
  *(void *)&v75.f64[0] = v120;
  sub_18E060288((uint64_t)v83, (uint64_t)v90, v75);
  sub_18E01E39C((uint64_t)&v161, (uint64_t)v83, (uint64_t)v88);
  *(void *)&v76.f64[0] = v116;
  sub_18E060288((uint64_t)v85, (uint64_t)v93, v76);
  v77.f64[0] = *((float64_t *)&v117 + 1);
  sub_18E060288((uint64_t)v84, (uint64_t)v92, v77);
  sub_18E01E39C((uint64_t)v85, (uint64_t)v84, (uint64_t)v86);
  *(void *)&v78.f64[0] = v119;
  sub_18E060288((uint64_t)v83, (uint64_t)v91, v78);
  sub_18E01E39C((uint64_t)v86, (uint64_t)v83, (uint64_t)&v161);
  v79.f64[0] = *((float64_t *)&v120 + 1);
  sub_18E060288((uint64_t)v82, (uint64_t)v90, v79);
  sub_18E01E39C((uint64_t)&v161, (uint64_t)v82, (uint64_t)v87);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EB403AE0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EB403AE0))
  {
    uint64_t v163 = 0x300000001;
    uint64_t v161 = &unk_1EDD18258;
    uint64_t v164 = &v165;
    long long v162 = xmmword_18E1F8560;
    uint64_t v165 = 0x100000000;
    int v166 = 2;
    sub_18DFEC63C((uint64_t)&v161, (uint64_t)&unk_1EB403E58);
    __cxa_atexit((void (*)(void *))sub_18DFE2E9C, &unk_1EB403E58, &dword_18DEDB000);
    __cxa_guard_release(&qword_1EB403AE0);
  }
  sub_18E0300B4((uint64_t)v89, (uint64_t)v95, (uint64_t)v86);
  sub_18E079D6C((uint64_t)&v161, v29, 6);
  sub_18DFEC830((uint64_t)&v161, (uint64_t)v86);
  sub_18E0300B4((uint64_t)v88, (uint64_t)v95, (uint64_t)v86);
  sub_18E079D6C((uint64_t)&v161, v29, 7);
  sub_18DFEC830((uint64_t)&v161, (uint64_t)v86);
  sub_18E0300B4((uint64_t)v87, (uint64_t)v95, (uint64_t)v86);
  sub_18E079D6C((uint64_t)&v161, v29, 8);
  sub_18DFEC830((uint64_t)&v161, (uint64_t)v86);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EB403AE8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EB403AE8))
  {
    uint64_t v163 = 0x300000001;
    uint64_t v161 = &unk_1EDD18258;
    uint64_t v164 = &v165;
    long long v162 = xmmword_18E1F8560;
    uint64_t v165 = 0x1800000017;
    int v166 = 25;
    sub_18DFEC63C((uint64_t)&v161, (uint64_t)&unk_1EB403E90);
    __cxa_atexit((void (*)(void *))sub_18DFE2E9C, &unk_1EB403E90, &dword_18DEDB000);
    __cxa_guard_release(&qword_1EB403AE8);
  }
  cnrotation::CNRotation::RotationMatrix((cnrotation::CNRotation *)&v109, (uint64_t)v85);
  sub_18DFF6360((uint64_t)v85, (uint64_t)v97, (uint64_t)v86);
  sub_18DFEE864((uint64_t)&v161, v29, (uint64_t)&unk_1EB403E58, (uint64_t)&unk_1EB403E90);
  sub_18DFEC6E4((uint64_t)&v161, (uint64_t)v86);
  sub_18E060330(3u, 3u, (uint64_t)&v161);
  sub_18DFE2F24(v28, (uint64_t)&v161);
  return 0;
}

void sub_18E042C50(_Unwind_Exception *a1)
{
}

uint64_t sub_18E042D1C(uint64_t a1, double *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v66[4] = *(void (**)(uint64_t))MEMORY[0x1E4F143B8];
  unsigned int v5 = *(_DWORD *)(a4 + 8);
  if ((v5 & 0x80000000) != 0) {
    __assert_rtn("Zeros", "cnmatrix.h", 3098, "nr >= 0");
  }
  uint64_t v62 = 0x100000003;
  double v57 = &unk_1EDD18D98;
  double v63 = &v64;
  unsigned int v58 = v5;
  unsigned int v59 = 1;
  unsigned int v60 = v5;
  unsigned int v61 = v5;
  unsigned int v11 = (cnprint::CNPrinter *)sub_18DFE2CC8((uint64_t)&v57, 0.0);
  if (!*(unsigned char *)a1)
  {
    if (cnprint::CNPrinter::GetLogLevel(v11) <= 1)
    {
      LOWORD(v66[0]) = 2;
      unsigned __int8 v65 = 1;
      double v54 = a2[1] + (double)*(uint64_t *)a2;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v66, &v65, "MeasurementAccumulator::AddMeasurement() failed - Not initialized,t_meas,%.3lf", v17, v18, v19, v20, v21, SLOBYTE(v54));
    }
    return 0xFFFFFFFFLL;
  }
  if (*(_DWORD *)(a1 + 5936) == 174)
  {
    LOWORD(v66[0]) = 2;
    unsigned __int8 v65 = 2;
    double v53 = a2[1] + (double)*(uint64_t *)a2;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v66, &v65, "MeasurementAccumulator::AddMeasurement() failed - Out of space,t_meas,%.3lf", v12, v13, v14, v15, v16, SLOBYTE(v53));
    return 0xFFFFFFFFLL;
  }
  if (*(unsigned char *)(a1 + 1))
  {
    if (cnprint::CNPrinter::GetLogLevel(v11) <= 1)
    {
      LOWORD(v66[0]) = 2;
      unsigned __int8 v65 = 1;
      double v55 = a2[1] + (double)*(uint64_t *)a2;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v66, &v65, "MeasurementAccumulator::AddMeasurement() failed - Locked,t_meas,%.3lf", v22, v23, v24, v25, v26, SLOBYTE(v55));
    }
    return 0xFFFFFFFFLL;
  }
  BOOL v27 = sub_18DEE4CB8(a2, (double *)(a1 + 8));
  if (v27)
  {
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v27) <= 1)
    {
      LOWORD(v66[0]) = 2;
      unsigned __int8 v65 = 1;
      double v56 = a2[1] + (double)*(uint64_t *)a2;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v66, &v65, "MeasurementAccumulator::AddMeasurement() failed - Measurement too old,t_meas,%.3lf,t_start,%.3lf", v28, v29, v30, v31, v32, SLOBYTE(v56));
    }
    return 0xFFFFFFFFLL;
  }
  v66[0] = 0;
  v66[1] = 0;
  sub_18E079E64(v66, a5);
  uint64_t v33 = sub_18E06C110((uint64_t *)(a1 + 40), v66);
  sub_18E067C60((uint64_t (**)(void, void, void, void, void))v66);
  uint64_t v34 = *(int *)(a1 + 5936);
  uint64_t v35 = (v34 + 1);
  if (*(void *)(a1 + 56) != v35)
  {
    LOWORD(v66[0]) = 2;
    unsigned __int8 v65 = 4;
    char v47 = (*(uint64_t (**)(uint64_t))(*(void *)a5 + 16))(a5);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v66, &v65, "MeasurementAccumulator::AddMeasurement() failed - allocation failed,meas_type,%d,t_meas,%.3lf", v48, v49, v50, v51, v52, v47);
    return 0xFFFFFFFFLL;
  }
  *(_DWORD *)(a1 + 5936) = v35;
  *(_DWORD *)(a1 + 72) = v35;
  *(_DWORD *)(a1 + 76) = 1;
  *(_DWORD *)(a1 + 80) = v35;
  *(_DWORD *)(a1 + 84) = v35;
  *(_DWORD *)(a1 + 2896) = v35;
  *(_DWORD *)(a1 + 2900) = 1;
  *(_DWORD *)(a1 + 2904) = v35;
  *(_DWORD *)(a1 + 2908) = v35;
  *(_DWORD *)(a1 + 3632) = v35;
  *(_DWORD *)(a1 + 3636) = 1;
  *(_DWORD *)(a1 + 3640) = v35;
  *(_DWORD *)(a1 + 3644) = v35;
  *(_DWORD *)(a1 + 5064) = v35;
  *(_DWORD *)(a1 + 5068) = 1;
  *(_DWORD *)(a1 + 5072) = v35;
  *(_DWORD *)(a1 + 5076) = v35;
  *(_DWORD *)(a1 + 5112) = v35;
  *(_DWORD *)(a1 + 5116) = 1;
  *(_DWORD *)(a1 + 5120) = v35;
  *(_DWORD *)(a1 + 5124) = v35;
  *(_DWORD *)(a1 + 5848) = v35;
  *(_DWORD *)(a1 + 5852) = 1;
  *(_DWORD *)(a1 + 5856) = v35;
  *(_DWORD *)(a1 + 5860) = v35;
  *(_DWORD *)(a1 + 5896) = v35;
  *(_DWORD *)(a1 + 5900) = 1;
  *(_DWORD *)(a1 + 5904) = v35;
  *(_DWORD *)(a1 + 5908) = v35;
  *(_DWORD *)(a1 + 5952) = v35;
  *(_DWORD *)(a1 + 5956) = 1;
  *(_DWORD *)(a1 + 5960) = v35;
  *(_DWORD *)(a1 + 5964) = v35;
  *(_DWORD *)(a1 + 7384) = v35;
  *(_DWORD *)(a1 + 7388) = 1;
  *(_DWORD *)(a1 + 7392) = v35;
  *(_DWORD *)(a1 + 7396) = v35;
  *(_OWORD *)(*(void *)(a1 + 96) + 16 * v34) = *(_OWORD *)a2;
  unsigned int v36 = *(_DWORD *)(a3 + 8);
  unsigned int v37 = *(_DWORD *)(a3 + 12);
  if (v36 <= v37) {
    int v38 = *(_DWORD *)(a3 + 12);
  }
  else {
    int v38 = *(_DWORD *)(a3 + 8);
  }
  if (v37) {
    BOOL v39 = v36 == 0;
  }
  else {
    BOOL v39 = 1;
  }
  if (v39) {
    int v40 = 0;
  }
  else {
    int v40 = v38;
  }
  *(_DWORD *)(*(void *)(a1 + 2920) + 4 * v34) = v40;
  sub_18DFE2F24(*(void *)(a1 + 5088) + (v34 << 6), a3);
  if (v58 <= v59) {
    unsigned int v41 = v59;
  }
  else {
    unsigned int v41 = v58;
  }
  if (v59) {
    BOOL v42 = v58 == 0;
  }
  else {
    BOOL v42 = 1;
  }
  if (v42) {
    unsigned int v43 = 0;
  }
  else {
    unsigned int v43 = v41;
  }
  *(_DWORD *)(*(void *)(a1 + 5136) + 4 * v34) = v43;
  sub_18DFE2F24(*(void *)(a1 + 5872) + (v34 << 6), (uint64_t)&v57);
  __n128 v44 = sub_18DFE2F24(*(void *)(a1 + 5920) + 112 * (int)v34, a4);
  *(void *)(*(void *)(a1 + 5976) + 8 * v34) = sub_18E0420A4;
  uint64_t v45 = (uint64_t (*)(uint64_t, void *, void, void *, void *, __n128))*v33;
  if (*v33) {
    uint64_t v45 = (uint64_t (*)(uint64_t, void *, void, void *, void *, __n128))v45(3, v33, 0, &unk_1EDD06168, &std::__any_imp::__unique_typeinfo<raven::h_HorizontalVelocityInIMUFrameArgs_RavenPNT<double>>::__id, v44);
  }
  uint64_t result = 0;
  *(void *)(*(void *)(a1 + 7408) + 8 * v34) = v45;
  return result;
}

void sub_18E043148(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (a2) {
    sub_18DEDD524(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_18E043174(uint64_t a1)
{
  *(void *)(a1 + 96) = &unk_1EDD17478;
  *(void *)a1 = &unk_1EDD0A4E8;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

double raven::RavenPNTEstimator::HandleEvent(raven::RavenPNTEstimator *this, const raven::MountStateEvent *a2, int8x16_t a3, int8x16_t a4)
{
  if (*((unsigned char *)this + 58) && *((unsigned char *)this + 1624))
  {
    unsigned int v6 = *((unsigned __int8 *)this + 1736);
    if (v6 > 3 || v6 == 1)
    {
      unsigned int v18 = *((unsigned __int8 *)a2 + 104);
      BOOL v19 = v18 > 3 || v18 == 1;
      if (!v19 && *((unsigned char *)this + 1208) && ((*((unsigned char *)this + 1320) - 4) & 0xFA) == 0)
      {
        uint64_t v20 = (double *)*((void *)this + 146);
        double v21 = v20[118];
        BOOL v22 = raven::RavenPNTEstimator::UseHighAccelerationParameters(this, a3, a4);
        uint64_t v23 = v22 ? 752 : 744;
        uint64_t v24 = v22 ? 776 : 768;
        int v25 = *((_DWORD *)this + 3725);
        uint64_t v26 = *((void *)this + 1864);
        if (*(double *)(v26 + 8 * (6 * v25 + 6)) < v21
          && *(double *)(v26 + 8 * (7 * v25 + 7)) < v21
          && *(double *)(v26 + 8 * (8 * v25 + 8)) < v21
          && *(double *)(v26 + 8 * (9 * v25 + 9)) < v21)
        {
          double v27 = *(double *)((char *)v20 + v23) * *(double *)((char *)v20 + v23);
          if (*(double *)(v26 + 8 * (10 * v25 + 10)) < v27
            && *(double *)(v26 + 8 * (11 * v25 + 11)) < v27
            && *(double *)(v26 + 8 * (12 * v25 + 12)) < v27)
          {
            double v28 = v20[91] * v20[91];
            if (*(double *)(v26 + 8 * (13 * v25 + 13)) < v28
              && *(double *)(v26 + 8 * (14 * v25 + 14)) < v28
              && *(double *)(v26 + 8 * (15 * v25 + 15)) < v28)
            {
              double v29 = *(double *)((char *)v20 + v24) * *(double *)((char *)v20 + v24);
              if (*(double *)(v26 + 8 * (16 * v25 + 16)) < v29
                && *(double *)(v26 + 8 * (17 * v25 + 17)) < v29
                && *(double *)(v26 + 8 * (18 * v25 + 18)) < v29)
              {
                raven::RavenPNTEstimator::InflateAttitudeUncertainty(this, v20[178] + v20[178]);
                raven::RavenPNTEstimator::InflateInsUncertainty(this, *(double *)(*((void *)this + 146) + 1432));
                double v30 = *(double *)(*((void *)this + 146) + 1448);
                if (*((unsigned char *)this + 2536) == 1)
                {
                  raven::RavenPNTEstimator::InflateDeviceVelocityUncertainty(this, v30);
                  raven::RavenPNTEstimator::InflateUserVelocityUncertainty(this, *(double *)(*((void *)this + 146) + 1448));
                  raven::RavenPNTEstimator::InflateUserPositionUncertainty(this, *(double *)(*((void *)this + 146) + 1440));
                }
                else
                {
                  raven::RavenPNTEstimator::InflateVelocityUncertainty(this, v30);
                }
                if (raven::RavenPNTEstimator::UpdateFullStateEstimate(this))
                {
                  __int16 v43 = 12;
                  unsigned __int8 v42 = 4;
                  v41[0] = (*(uint64_t (**)(const raven::MountStateEvent *))(*(void *)a2 + 16))(a2);
                  v41[1] = v34;
                  cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)v41, "Could not update full states after dismount");
                  if (*((char *)this + 2511) >= 0) {
                    LOBYTE(v40) = (_BYTE)this - 72;
                  }
                  else {
                    uint64_t v40 = *((void *)this + 311);
                  }
                  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v43, &v42, "%s", v35, v36, v37, v38, v39, v40);
                  raven::RavenPNTEstimator::Reset(this);
                }
              }
            }
          }
        }
      }
    }
  }
  int v8 = *((unsigned __int8 *)this + 2536);
  if (*((unsigned char *)this + 2536))
  {
    if (v8 != 1)
    {
      if (v8 == 2) {
        __assert_rtn("HandleEvent", "ravenpntestimator.cpp", 2848, "false && \"Unexpected case RavenPNTEstimatorStateParameterization::ParameterizationCount\"");
      }
      goto LABEL_27;
    }
    unsigned int v12 = *((unsigned __int8 *)a2 + 104);
    if (v12 > 3 || v12 == 1) {
      goto LABEL_27;
    }
    LOBYTE(v41[0]) = 0;
LABEL_18:
    raven::RavenPNTEstimator::SetStateParameterization((uint64_t)this);
    goto LABEL_27;
  }
  int v9 = *((_DWORD *)this + 3725);
  uint64_t v10 = *((void *)this + 1864);
  if (*((unsigned char *)this + 58)) {
    double v11 = sqrt(*(double *)(v10 + 8 * (25 * v9 + 25))+ *(double *)(v10 + 8 * (26 * v9 + 26))+ *(double *)(v10 + 8 * (27 * v9 + 27)))* 57.2957795;
  }
  else {
    double v11 = 180.0;
  }
  a3.i64[0] = *(void *)(v10 + 8 * (16 * v9 + 16));
  a4.i64[0] = *(void *)(v10 + 8 * (17 * v9 + 17));
  if (*(double *)a4.i64 <= *(double *)(v10 + 8 * (18 * v9 + 18))) {
    a4.i64[0] = *(void *)(v10 + 8 * (18 * v9 + 18));
  }
  if (*(double *)a3.i64 <= *(double *)a4.i64) {
    a3.i64[0] = a4.i64[0];
  }
  double v14 = *(double *)a3.i64;
  if (*((unsigned char *)this + 58))
  {
    double v15 = *(double *)(*((void *)this + 146) + 784);
    unsigned int v16 = *((unsigned __int8 *)a2 + 104);
    if (v16 > 3 || v16 == 1)
    {
      if (*((unsigned char *)this + 1624))
      {
        unsigned int v31 = *((unsigned __int8 *)this + 1736);
        if ((v31 > 3 || v31 == 1)
          && *((unsigned char *)this + 1208)
          && ((*((unsigned char *)this + 1320) - 4) & 0xFA) == 0
          && !raven::RavenPNTEstimator::UseHighAccelerationParameters(this, a3, a4))
        {
          double v32 = sqrt(v14);
          if (v11 < 10.0 && v32 <= v15 * 20.0)
          {
            LOBYTE(v41[0]) = 1;
            goto LABEL_18;
          }
        }
      }
    }
  }
LABEL_27:

  *(void *)&double result = raven::RavenEstimator::HandleMountStateEvent(this, a2).n128_u64[0];
  return result;
}

void raven::RavenPNTEstimator::InflateAttitudeUncertainty(raven::RavenPNTEstimator *this, double a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EB4039F8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EB4039F8))
  {
    uint64_t v15 = 0x300000001;
    *(void *)double v14 = &unk_1EDD18258;
    unsigned int v16 = &v17;
    *(_OWORD *)&v14[8] = xmmword_18E1F8560;
    uint64_t v17 = 0x700000006;
    int v18 = 8;
    sub_18DFEC63C((uint64_t)v14, (uint64_t)&unk_1EB403C60);
    __cxa_atexit((void (*)(void *))sub_18DFE2E9C, &unk_1EB403C60, &dword_18DEDB000);
    __cxa_guard_release(&qword_1EB4039F8);
  }
  sub_18E07EFE4((uint64_t)v14, (uint64_t)&unk_1EB403C60);
  sub_18DEDE7B0(__p, "InflateAttitudeUncertainty");
  raven::RavenPNTEstimator::InflateUncertainties((uint64_t)this, (uint64_t)v14, a2);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  LOWORD(__p[0]) = 12;
  unsigned __int8 v11 = 2;
  *(_OWORD *)double v14 = *((_OWORD *)this + 5);
  char v4 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)v14, "Inflating estimator variance of attitude error states,factor,%.2lf", a2);
  if (*((char *)this + 2511) >= 0) {
    LOBYTE(v10) = v4;
  }
  else {
    uint64_t v10 = *((void *)this + 311);
  }
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, &v11, "%s", v5, v6, v7, v8, v9, v10);
}

void sub_18E043858(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
}

void raven::RavenPNTEstimator::InflateInsUncertainty(raven::RavenPNTEstimator *this)
{
}

void raven::RavenPNTEstimator::InflateVelocityUncertainty(raven::RavenPNTEstimator *this)
{
}

void raven::RavenPNTEstimator::InflateDeviceVelocityUncertainty(raven::RavenPNTEstimator *this)
{
}

void raven::RavenPNTEstimator::InflateUserVelocityUncertainty(raven::RavenPNTEstimator *this)
{
}

void raven::RavenPNTEstimator::InflateUserPositionUncertainty(raven::RavenPNTEstimator *this)
{
}

uint64_t raven::RavenPNTEstimator::UpdateFullStateEstimate(raven::RavenPNTEstimator *this)
{
  uint64_t v1 = MEMORY[0x1F4188790](this);
  if (!*(unsigned char *)(v1 + 58)) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v2 = v1;
  uint64_t v3 = v1 + 14616;
  sub_18E081E80((uint64_t)v32, v1 + 14616);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EB403A78, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EB403A78))
  {
    uint64_t v36 = 0x1C00000001;
    uint64_t v34 = &unk_1EDD18198;
    uint64_t v37 = &v38;
    long long v35 = xmmword_18E1FD720;
    for (uint64_t i = 10; i != 29; ++i)
      *((_DWORD *)&v34 + i) = i - 10;
    sub_18E03E014((uint64_t)&unk_1E91C9AB0, (uint64_t)&v34);
    __cxa_atexit((void (*)(void *))sub_18E03E16C, &unk_1E91C9AB0, &dword_18DEDB000);
    __cxa_guard_release(&qword_1EB403A78);
  }
  if (*(unsigned char *)(v2 + 58) && (sub_18E059BCC(v2 + 15032) & 1) != 0)
  {
    uint64_t v29 = 0x10000001ALL;
    double v27 = &unk_1EDD186A8;
    long long v28 = xmmword_18E1FD600;
    double v30 = &v31;
    if (*(_DWORD *)(v2 + 16140)) {
      uint64_t v4 = v2 + 15584;
    }
    else {
      uint64_t v4 = v2 + 15040;
    }
    sub_18DFE2F24((uint64_t)&v27, v4);
    sub_18E02FDE4();
  }
  sub_18E081E80((uint64_t)&v25, (uint64_t)v32);
  uint64_t v5 = v33;
  double v6 = v33[6];
  double v7 = v33[7];
  double v8 = v33[8];
  double v9 = v33[9];
  double v10 = sqrt(v7 * v7 + v6 * v6 + v8 * v8 + v9 * v9);
  if (fabs(v10) >= 2.22044605e-16)
  {
    double v12 = v6 / v10;
    double v13 = v7 / v10;
    double v14 = v8 / v10;
    double v11 = v9 / v10;
  }
  else
  {
    double v11 = 1.0;
    double v12 = 0.0;
    double v13 = 0.0;
    double v14 = 0.0;
  }
  uint64_t v15 = v26;
  v26[6] = v12;
  v15[7] = v13;
  v15[8] = v14;
  v15[9] = v11;
  double v17 = v5[25];
  double v16 = v5[26];
  double v18 = v5[27];
  double v19 = sqrt(v16 * v16 + v17 * v17 + v18 * v18);
  if (fabs(v19) <= 0.000000015) {
    return 0xFFFFFFFFLL;
  }
  v15[24] = v19 * v5[24];
  v15[25] = v17 / v19;
  v15[26] = v16 / v19;
  v15[27] = v18 / v19;
  sub_18E07323C((uint64_t)&v34, (uint64_t)&v25, (uint64_t)&unk_1E91C9AB0);
  if (sub_18E0598A0(v2 + 2696, (_OWORD *)(v2 + 14600), (uint64_t)&v34, v20, v21)) {
    return 0xFFFFFFFFLL;
  }
  sub_18DFE2F24(v3, (uint64_t)&v25);
  return 0;
}

void sub_18E045E68(_Unwind_Exception *a1)
{
}

uint64_t raven::RavenPNTEstimator::HandleEvent(int8x16_t *this, const raven::MovingStateEvent *a2)
{
  if (!this[3].i8[9]) {
    return 0xFFFFFFFFLL;
  }
  if (!this[3].i8[10]) {
    return 0;
  }
  raven::RavenEstimator::HandleMovingStateEvent((raven::RavenEstimator *)this, a2);
  if (v4) {
    return 0xFFFFFFFFLL;
  }
  if (*((unsigned char *)a2 + 104) != 1 || *((double *)a2 + 15) < *(double *)(this[73].i64[0] + 248))
  {
    int v6 = 0;
    if (this[1381].i8[8]) {
      this[1381].i8[8] = 0;
    }
    goto LABEL_49;
  }
  double v7 = &this[1381].i8[8];
  if (!this[1381].i8[8])
  {
    uint64_t v18 = (*(uint64_t (**)(const raven::MovingStateEvent *))(*(void *)a2 + 16))(a2);
    int v19 = *v7;
    this[1382].i64[0] = v18;
    this[1382].i64[1] = v20;
    int v6 = 1;
    if (!v19) {
      *double v7 = 1;
    }
    goto LABEL_49;
  }
  uint64_t v82 = (void *)(*(uint64_t (**)(const raven::MovingStateEvent *))(*(void *)a2 + 16))(a2);
  uint64_t v83 = v8;
  if (!*v7) {
    __assert_rtn("get", "optional.hpp", 1212, "this->is_initialized()");
  }
  double v11 = (void *)CNTimeSpan::operator-((uint64_t)&v82, (int8x16_t *)this[1382].i64, v9, v10);
  double v13 = v12;
  double v14 = v12;
  v15.i64[0] = *(void *)(this[73].i64[0] + 280);
  long long v121 = 0;
  double v122 = 0.0;
  CNTimeSpan::SetTimeSpan((uint64_t *)&v121, 0, v15, v16);
  if (!v11 && (*(void *)&v13 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000) {
    goto LABEL_17;
  }
  if (!v121)
  {
    double v17 = v122;
    if ((*(void *)&v122 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
LABEL_18:
      if (v17 > v14) {
        goto LABEL_48;
      }
LABEL_23:
      v131.i64[0] = (*(uint64_t (**)(const raven::MovingStateEvent *))(*(void *)a2 + 16))(a2);
      v131.i64[1] = v21;
      sub_18DFEB188(3, 1, (uint64_t)v130);
      sub_18DFEB238(3, 3, (uint64_t)&v82);
      double v22 = *(double *)(this[73].i64[0] + 288) * 0.00872664626;
      double v23 = v22 * v22;
      uint64_t v24 = v86;
      *uint64_t v86 = v23;
      int v25 = HIDWORD(v84);
      v24[HIDWORD(v84) + 1] = v23;
      v24[2 * v25 + 2] = v23;
      sub_18E06BF24(&v121, 13);
      long long v128 = 0;
      double v129 = 0.0;
      long long v127 = 0u;
      long long v126 = 0u;
      long long v121 = &unk_1EDD15AE0;
      int8x16_t v125 = v131;
      if (!*v7) {
        __assert_rtn("get", "optional.hpp", 1212, "this->is_initialized()");
      }
      double v27 = (cnprint::CNPrinter *)CNTimeSpan::operator-((uint64_t)&v131, (int8x16_t *)this[1382].i64, v131, v26);
      double v129 = v28 + (double)(uint64_t)v27;
      *(void *)&long long v126 = (char *)this + 2696;
      *((void *)&v126 + 1) = (char *)this + 14600;
      *(void *)&long long v127 = (char *)this + 14616;
      *((void *)&v127 + 1) = (char *)this + 2536;
      long long v128 = this + 161;
      uint64_t v29 = this[73].i64[0];
      double v30 = 350.0 / *(double *)(v29 + 648);
      if (v30 >= 350.0 / *(double *)(v29 + 656)) {
        double v30 = 350.0 / *(double *)(v29 + 656);
      }
      if (v28 + (double)(uint64_t)v27 <= v30)
      {
        __int16 v43 = (cnprint::CNPrinter *)sub_18E04765C((uint64_t)&this[3830].i64[1], (double *)v131.i64, (uint64_t)v130, (uint64_t)&v82, (uint64_t)&v121);
        if (!v43)
        {
          if (cnprint::CNPrinter::GetLogLevel(v43) <= 1)
          {
            __int16 v120 = 12;
            unsigned __int8 v119 = 1;
            if (!*v7) {
              __assert_rtn("get", "optional.hpp", 1212, "this->is_initialized()");
            }
            char v45 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)&this[155].i64[1], (uint64_t)&v131, "Added ZARU measurement,t_start,%.3lf,t_end,%.3lf", *(double *)&v131.i64[1] + (double)v131.i64[0], *(double *)&this[1382].i64[1] + (double)this[1382].i64[0]);
            if (this[156].i8[15] >= 0) {
              LOBYTE(v51) = v45;
            }
            else {
              uint64_t v51 = this[155].i64[1];
            }
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v120, &v119, "%s", v46, v47, v48, v49, v50, v51);
          }
          int v52 = *v7;
          this[1382] = v131;
          if (!v52) {
            *double v7 = 1;
          }
          long long v121 = &unk_1EDD0A4E8;
          if (v124 < 0) {
            operator delete(__p);
          }
          goto LABEL_48;
        }
        __int16 v120 = 12;
        unsigned __int8 v119 = 4;
        char v44 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)&this[155].i64[1], (uint64_t)&v131, "Could not add measurement - device ZARU");
        if (this[156].i8[15] >= 0) {
          LOBYTE(v42) = v44;
        }
        else {
          uint64_t v42 = this[155].i64[1];
        }
      }
      else
      {
        if (cnprint::CNPrinter::GetLogLevel(v27) > 1) {
          goto LABEL_36;
        }
        __int16 v120 = 12;
        unsigned __int8 v119 = 1;
        char v36 = cnprint::CNLogFormatter::FormatWarning((uint64_t)&this[155].i64[1], (uint64_t)&v131, "ZARU time interval too large, %.3lf", v31, v32, v33, v34, v35, *(uint64_t *)&v129);
        if (this[156].i8[15] >= 0) {
          LOBYTE(v42) = v36;
        }
        else {
          uint64_t v42 = this[155].i64[1];
        }
      }
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v120, &v119, "%s", v37, v38, v39, v40, v41, v42);
LABEL_36:
      long long v121 = &unk_1EDD0A4E8;
      if (v124 < 0) {
        operator delete(__p);
      }
      return 0xFFFFFFFFLL;
    }
  }
  if (v11 == v121)
  {
LABEL_17:
    double v17 = v122;
    goto LABEL_18;
  }
  if ((uint64_t)v11 > (uint64_t)v121) {
    goto LABEL_23;
  }
LABEL_48:
  int v6 = 1;
LABEL_49:
  uint64_t result = raven::RavenEstimator::IsZUPTAppropriate((raven::RavenEstimator *)this, a2);
  if (!result) {
    return result;
  }
  uint64_t v83 = 0;
  uint64_t v84 = 0;
  uint64_t v82 = &unk_1EDD13880;
  char v85 = 0;
  uint64_t v86 = 0;
  uint64_t v87 = 0;
  char v88 = 0;
  uint64_t v89 = 0;
  uint64_t v90 = 0;
  char v91 = 0;
  uint64_t v92 = 0;
  uint64_t v93 = 0;
  uint64_t v95 = 0;
  uint64_t v96 = 0;
  uint64_t v94 = 0x7FF8000000000000;
  char v97 = 0;
  uint64_t v98 = 0;
  uint64_t v99 = 0;
  char v100 = 0;
  uint64_t v101 = 0;
  uint64_t v102 = 0;
  char v103 = 0;
  uint64_t v104 = 0;
  uint64_t v105 = 0;
  uint64_t v106 = 0x7FF8000000000000;
  int v107 = 0;
  int64x2_t v108 = vdupq_n_s64(0x7FF8000000000000uLL);
  int64x2_t v109 = v108;
  int64x2_t v110 = v108;
  int64x2_t v111 = v108;
  uint64_t v112 = 0x7FF8000000000000;
  char v113 = 0;
  int64x2_t v114 = v108;
  int64x2_t v115 = v108;
  int64x2_t v116 = v108;
  int64x2_t v117 = v108;
  uint64_t v118 = 0x7FF8000000000000;
  if (!(*(unsigned int (**)(int8x16_t *, const raven::MovingStateEvent *, void **))(this->i64[0] + 184))(this, a2, &v82))
  {
    if (v6)
    {
      double v53 = (cnprint::CNPrinter *)raven::RavenPNTEstimator::AddDeviceVelocityMeasurement((raven::RavenPNTEstimator *)this, (const raven::VelocityEvent *)&v82);
      if (v53)
      {
        if (cnprint::CNPrinter::GetLogLevel(v53) <= 1)
        {
          LOWORD(v121) = 12;
          v130[0] = 1;
          uint64_t v54 = (*(uint64_t (**)(const raven::MovingStateEvent *))(*(void *)a2 + 16))(a2);
          double v80 = v55 + (double)v54;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v121, v130, "t,%.3lf, Could not add ZUPT measurement 1", v56, v57, v58, v59, v60, SLOBYTE(v80));
        }
        return 0xFFFFFFFFLL;
      }
    }
    else
    {
      unsigned int v61 = (cnprint::CNPrinter *)raven::RavenPNTEstimator::AddUserVelocityMeasurement((raven::RavenPNTEstimator *)this, (const raven::VelocityEvent *)&v82);
      if (v61)
      {
        if (cnprint::CNPrinter::GetLogLevel(v61) <= 1)
        {
          LOWORD(v121) = 12;
          v130[0] = 1;
          uint64_t v62 = (*(uint64_t (**)(const raven::MovingStateEvent *))(*(void *)a2 + 16))(a2);
          double v81 = v63 + (double)v62;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v121, v130, "t,%.3lf, Could not add ZUPT measurement 2", v64, v65, v66, v67, v68, SLOBYTE(v81));
        }
        return 0xFFFFFFFFLL;
      }
    }
    float64x2_t v69 = (cnprint::CNPrinter *)(*(uint64_t (**)(const raven::MovingStateEvent *))(*(void *)a2 + 16))(a2);
    int v70 = this[14].u8[8];
    this[15].i64[0] = (uint64_t)v69;
    this[15].i64[1] = v71;
    if (!v70) {
      this[14].i8[8] = 1;
    }
    if (cnprint::CNPrinter::GetLogLevel(v69) <= 1)
    {
      *(_WORD *)long long v130 = 12;
      v131.i8[0] = 1;
      long long v121 = (void *)(*(uint64_t (**)(const raven::MovingStateEvent *))(*(void *)a2 + 16))(a2);
      double v122 = v72;
      char v73 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)&this[155].i64[1], (uint64_t)&v121, "Raising ZUPT velocity event");
      if (this[156].i8[15] >= 0) {
        LOBYTE(v79) = v73;
      }
      else {
        uint64_t v79 = this[155].i64[1];
      }
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v130, (unsigned __int8 *)&v131, "%s", v74, v75, v76, v77, v78, v79);
    }
  }
  return 0;
}

void sub_18E0468F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void *__p,uint64_t a61,int a62,__int16 a63)
{
  if (a65 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_18E04695C(uint64_t a1)
{
  MEMORY[0x1F4188790](a1);
  if (!v3
    || (uint64_t v9 = v2,
        uint64_t v10 = v1,
        (double v11 = (char *)__dynamic_cast(v3, (const struct __class_type_info *)&unk_1EDD02A78, (const struct __class_type_info *)&unk_1EDD05EC8, 0)) == 0))
  {
    LOWORD(v48) = 12;
    v36[0] = 4;
    double v32 = MEMORY[0x30] + (double)MEMORY[0x28];
LABEL_22:
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v48, v36, "time,%.3lf,h-function failure on line %d: %s() %s", v4, v5, v6, v7, v8, SLOBYTE(v32));
    return 0xFFFFFFFFLL;
  }
  double v13 = v11;
  unsigned int v15 = *(_DWORD *)(v10 + 8);
  unsigned int v14 = *(_DWORD *)(v10 + 12);
  if (v15 <= v14) {
    int v16 = *(_DWORD *)(v10 + 12);
  }
  else {
    int v16 = *(_DWORD *)(v10 + 8);
  }
  if (!v15
    || !v14
    || v16 != 26
    || ((v18 = *(_DWORD *)(v9 + 8), unsigned int v17 = *(_DWORD *)(v9 + 12), v18 <= v17)
      ? (int v19 = *(_DWORD *)(v9 + 12))
      : (int v19 = *(_DWORD *)(v9 + 8)),
        !v18 || !v17 || v19 != 3))
  {
    LOWORD(v48) = 12;
    v36[0] = 4;
    double v32 = *((double *)v11 + 6) + (double)*((uint64_t *)v11 + 5);
    goto LABEL_22;
  }
  if (!*((void *)v11 + 7))
  {
    LOWORD(v48) = 12;
    v36[0] = 4;
    double v32 = *((double *)v11 + 6) + (double)*((uint64_t *)v11 + 5);
    goto LABEL_22;
  }
  v69[0] = *(_OWORD *)(v11 + 40);
  v20.i64[1] = *((void *)&v69[0] + 1);
  v20.i64[0] = *((void *)v11 + 12);
  *(void *)&long long v49 = 0;
  uint64_t v48 = 0;
  CNTimeSpan::SetTimeSpan((uint64_t *)&v48, 0, v20, v12);
  *(void *)&long long v68 = CNTimeSpan::operator-((uint64_t)v69, &v48, v21, v22);
  *((void *)&v68 + 1) = v23;
  uint64_t v24 = *((void *)v13 + 9);
  long long v67 = *(_OWORD *)*((void *)v13 + 8);
  sub_18E07FB20((uint64_t)v66, v24);
  uint64_t v25 = *((void *)v13 + 7);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EB403AF0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EB403AF0))
  {
    uint64_t v50 = 0x1A00000001;
    uint64_t v48 = &unk_1EDD18168;
    uint64_t v51 = &v52;
    long long v49 = xmmword_18E1FD710;
    for (uint64_t i = 10; i != 28; ++i)
      *((_DWORD *)&v48 + i) = i - 10;
    sub_18E058650((uint64_t)&unk_1EB4048A0, (uint64_t)&v48);
    __cxa_atexit((void (*)(void *))sub_18E0576A8, &unk_1EB4048A0, &dword_18DEDB000);
    __cxa_guard_release(&qword_1EB403AF0);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EB403AF8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EB403AF8))
  {
    uint64_t v50 = 0x1A00000001;
    uint64_t v48 = &unk_1EDD18168;
    uint64_t v51 = &v52;
    long long v49 = xmmword_18E1F8560;
    uint64_t v52 = 0x700000006;
    int v53 = 8;
    sub_18E058650((uint64_t)&unk_1EB404930, (uint64_t)&v48);
    __cxa_atexit((void (*)(void *))sub_18E0576A8, &unk_1EB404930, &dword_18DEDB000);
    __cxa_guard_release(&qword_1EB403AF8);
  }
  uint64_t v63 = 0x10000001CLL;
  long long v62 = xmmword_18E1FD730;
  unsigned int v61 = &unk_1EDD188B8;
  uint64_t v64 = &v65;
  if (!sub_18E06B85C((uint64_t)v69, (uint64_t)&v67, v66[4], v25, *((void *)v13 + 11), (uint64_t)&v61))
  {
    uint64_t v58 = 0x100000013;
    long long v57 = xmmword_18E1FD730;
    uint64_t v56 = &unk_1EDD17CB8;
    uint64_t v59 = &v60;
    v54[0] = vdupq_n_s64(0x7FF8000000000000uLL);
    v54[1] = v54[0];
    v54[2] = v54[0];
    v54[3] = v54[0];
    v54[4] = v54[0];
    v54[5] = v54[0];
    v54[6] = v54[0];
    v54[7] = v54[0];
    v54[8] = v54[0];
    v54[9] = v54[0];
    v54[10] = v54[0];
    v54[11] = v54[0];
    v54[12] = v54[0];
    v54[13] = v54[0];
    v54[14] = v54[0];
    v54[15] = v54[0];
    v54[16] = v54[0];
    v54[17] = v54[0];
    v54[18] = v54[0];
    v54[19] = v54[0];
    v54[20] = v54[0];
    v54[21] = v54[0];
    v54[22] = v54[0];
    v54[23] = v54[0];
    v54[24] = v54[0];
    v54[25] = v54[0];
    v54[26] = v54[0];
    v54[27] = v54[0];
    v54[28] = v54[0];
    v54[29] = v54[0];
    v54[30] = v54[0];
    v54[31] = v54[0];
    v54[32] = v54[0];
    v54[33] = v54[0];
    v54[34] = v54[0];
    uint64_t v55 = 0x7FF8000000000000;
    sub_18E06BA00((uint64_t)&v61, v10, (uint64_t)&v56, (uint64_t)v54);
    sub_18E07A0A0((uint64_t)&v48, v25);
    v46[23] = &v48;
    v46[24] = v69;
    uint64_t v34 = *((void *)v13 + 11);
    v46[25] = &v61;
    v46[26] = v34;
    long long v47 = v68;
    uint64_t v44 = 0x100000017;
    uint64_t v42 = &unk_1EDD18528;
    char v45 = v46;
    long long v43 = xmmword_18E1FD830;
    sub_18DFE2CC8((uint64_t)&v42, 0.0);
    uint64_t v39 = 0x10000001ALL;
    v37[6] = &unk_1EDD186A8;
    long long v38 = xmmword_18E1FD600;
    uint64_t v40 = &v41;
    sub_18E06E85C((uint64_t)v37);
  }
  LOWORD(v48) = 12;
  v36[0] = 4;
  double v31 = *((double *)v13 + 6) + (double)*((uint64_t *)v13 + 5);
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v48, v36, "time,%.3lf,h-function failure on line %d: %s() %s", v26, v27, v28, v29, v30, SLOBYTE(v31));
  return 0xFFFFFFFFLL;
}

void sub_18E0475AC(_Unwind_Exception *a1)
{
}

uint64_t sub_18E04765C(uint64_t a1, double *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v66[4] = *(void (**)(uint64_t))MEMORY[0x1E4F143B8];
  unsigned int v5 = *(_DWORD *)(a4 + 8);
  if ((v5 & 0x80000000) != 0) {
    __assert_rtn("Zeros", "cnmatrix.h", 3098, "nr >= 0");
  }
  uint64_t v62 = 0x100000003;
  long long v57 = &unk_1EDD18D98;
  uint64_t v63 = &v64;
  unsigned int v58 = v5;
  unsigned int v59 = 1;
  unsigned int v60 = v5;
  unsigned int v61 = v5;
  double v11 = (cnprint::CNPrinter *)sub_18DFE2CC8((uint64_t)&v57, 0.0);
  if (!*(unsigned char *)a1)
  {
    if (cnprint::CNPrinter::GetLogLevel(v11) <= 1)
    {
      LOWORD(v66[0]) = 2;
      unsigned __int8 v65 = 1;
      double v54 = a2[1] + (double)*(uint64_t *)a2;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v66, &v65, "MeasurementAccumulator::AddMeasurement() failed - Not initialized,t_meas,%.3lf", v17, v18, v19, v20, v21, SLOBYTE(v54));
    }
    return 0xFFFFFFFFLL;
  }
  if (*(_DWORD *)(a1 + 5936) == 174)
  {
    LOWORD(v66[0]) = 2;
    unsigned __int8 v65 = 2;
    double v53 = a2[1] + (double)*(uint64_t *)a2;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v66, &v65, "MeasurementAccumulator::AddMeasurement() failed - Out of space,t_meas,%.3lf", v12, v13, v14, v15, v16, SLOBYTE(v53));
    return 0xFFFFFFFFLL;
  }
  if (*(unsigned char *)(a1 + 1))
  {
    if (cnprint::CNPrinter::GetLogLevel(v11) <= 1)
    {
      LOWORD(v66[0]) = 2;
      unsigned __int8 v65 = 1;
      double v55 = a2[1] + (double)*(uint64_t *)a2;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v66, &v65, "MeasurementAccumulator::AddMeasurement() failed - Locked,t_meas,%.3lf", v22, v23, v24, v25, v26, SLOBYTE(v55));
    }
    return 0xFFFFFFFFLL;
  }
  BOOL v27 = sub_18DEE4CB8(a2, (double *)(a1 + 8));
  if (v27)
  {
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v27) <= 1)
    {
      LOWORD(v66[0]) = 2;
      unsigned __int8 v65 = 1;
      double v56 = a2[1] + (double)*(uint64_t *)a2;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v66, &v65, "MeasurementAccumulator::AddMeasurement() failed - Measurement too old,t_meas,%.3lf,t_start,%.3lf", v28, v29, v30, v31, v32, SLOBYTE(v56));
    }
    return 0xFFFFFFFFLL;
  }
  v66[0] = 0;
  v66[1] = 0;
  sub_18E07A3D0(v66, a5);
  uint64_t v33 = sub_18E06C110((uint64_t *)(a1 + 40), v66);
  sub_18E067C60((uint64_t (**)(void, void, void, void, void))v66);
  uint64_t v34 = *(int *)(a1 + 5936);
  uint64_t v35 = (v34 + 1);
  if (*(void *)(a1 + 56) != v35)
  {
    LOWORD(v66[0]) = 2;
    unsigned __int8 v65 = 4;
    char v47 = (*(uint64_t (**)(uint64_t))(*(void *)a5 + 16))(a5);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v66, &v65, "MeasurementAccumulator::AddMeasurement() failed - allocation failed,meas_type,%d,t_meas,%.3lf", v48, v49, v50, v51, v52, v47);
    return 0xFFFFFFFFLL;
  }
  *(_DWORD *)(a1 + 5936) = v35;
  *(_DWORD *)(a1 + 72) = v35;
  *(_DWORD *)(a1 + 76) = 1;
  *(_DWORD *)(a1 + 80) = v35;
  *(_DWORD *)(a1 + 84) = v35;
  *(_DWORD *)(a1 + 2896) = v35;
  *(_DWORD *)(a1 + 2900) = 1;
  *(_DWORD *)(a1 + 2904) = v35;
  *(_DWORD *)(a1 + 2908) = v35;
  *(_DWORD *)(a1 + 3632) = v35;
  *(_DWORD *)(a1 + 3636) = 1;
  *(_DWORD *)(a1 + 3640) = v35;
  *(_DWORD *)(a1 + 3644) = v35;
  *(_DWORD *)(a1 + 5064) = v35;
  *(_DWORD *)(a1 + 5068) = 1;
  *(_DWORD *)(a1 + 5072) = v35;
  *(_DWORD *)(a1 + 5076) = v35;
  *(_DWORD *)(a1 + 5112) = v35;
  *(_DWORD *)(a1 + 5116) = 1;
  *(_DWORD *)(a1 + 5120) = v35;
  *(_DWORD *)(a1 + 5124) = v35;
  *(_DWORD *)(a1 + 5848) = v35;
  *(_DWORD *)(a1 + 5852) = 1;
  *(_DWORD *)(a1 + 5856) = v35;
  *(_DWORD *)(a1 + 5860) = v35;
  *(_DWORD *)(a1 + 5896) = v35;
  *(_DWORD *)(a1 + 5900) = 1;
  *(_DWORD *)(a1 + 5904) = v35;
  *(_DWORD *)(a1 + 5908) = v35;
  *(_DWORD *)(a1 + 5952) = v35;
  *(_DWORD *)(a1 + 5956) = 1;
  *(_DWORD *)(a1 + 5960) = v35;
  *(_DWORD *)(a1 + 5964) = v35;
  *(_DWORD *)(a1 + 7384) = v35;
  *(_DWORD *)(a1 + 7388) = 1;
  *(_DWORD *)(a1 + 7392) = v35;
  *(_DWORD *)(a1 + 7396) = v35;
  *(_OWORD *)(*(void *)(a1 + 96) + 16 * v34) = *(_OWORD *)a2;
  unsigned int v36 = *(_DWORD *)(a3 + 8);
  unsigned int v37 = *(_DWORD *)(a3 + 12);
  if (v36 <= v37) {
    int v38 = *(_DWORD *)(a3 + 12);
  }
  else {
    int v38 = *(_DWORD *)(a3 + 8);
  }
  if (v37) {
    BOOL v39 = v36 == 0;
  }
  else {
    BOOL v39 = 1;
  }
  if (v39) {
    int v40 = 0;
  }
  else {
    int v40 = v38;
  }
  *(_DWORD *)(*(void *)(a1 + 2920) + 4 * v34) = v40;
  sub_18DFE2F24(*(void *)(a1 + 5088) + (v34 << 6), a3);
  if (v58 <= v59) {
    unsigned int v41 = v59;
  }
  else {
    unsigned int v41 = v58;
  }
  if (v59) {
    BOOL v42 = v58 == 0;
  }
  else {
    BOOL v42 = 1;
  }
  if (v42) {
    unsigned int v43 = 0;
  }
  else {
    unsigned int v43 = v41;
  }
  *(_DWORD *)(*(void *)(a1 + 5136) + 4 * v34) = v43;
  sub_18DFE2F24(*(void *)(a1 + 5872) + (v34 << 6), (uint64_t)&v57);
  __n128 v44 = sub_18DFE2F24(*(void *)(a1 + 5920) + 112 * (int)v34, a4);
  *(void *)(*(void *)(a1 + 5976) + 8 * v34) = sub_18E04695C;
  char v45 = (uint64_t (*)(uint64_t, void *, void, void *, void *, __n128))*v33;
  if (*v33) {
    char v45 = (uint64_t (*)(uint64_t, void *, void, void *, void *, __n128))v45(3, v33, 0, &unk_1EDD05EC8, &std::__any_imp::__unique_typeinfo<raven::h_DeviceZeroAngularRateArgs_RavenPNT<double>>::__id, v44);
  }
  uint64_t result = 0;
  *(void *)(*(void *)(a1 + 7408) + 8 * v34) = v45;
  return result;
}

void sub_18E047A88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (a2) {
    sub_18DEDD524(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_18E047AB4(uint64_t a1)
{
  *(void *)a1 = &unk_1EDD0A4E8;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

uint64_t raven::RavenPNTEstimator::HandleEvent(raven::RavenPNTEstimator *this, const raven::MapVectorEvent *a2)
{
  uint64_t v116 = *MEMORY[0x1E4F143B8];
  if (!*((unsigned char *)this + 57) || !*((unsigned char *)this + 58)) {
    return 0xFFFFFFFFLL;
  }
  *(void *)&long long v109 = (*(uint64_t (**)(const raven::MapVectorEvent *))(*(void *)a2 + 16))(a2);
  *((void *)&v109 + 1) = v4;
  BOOL IsUserStationary = raven::RavenPNTEstimator::IsUserStationary(this);
  uint64_t v106 = 0x10000001ALL;
  uint64_t v104 = &unk_1EDD186A8;
  int v107 = v108;
  long long v105 = xmmword_18E1FD600;
  sub_18DFE2CC8((uint64_t)&v104, 0.0);
  uint64_t v101 = 0x100000007;
  long long v100 = xmmword_18E1FD680;
  uint64_t v99 = &unk_1EDD197E8;
  uint64_t v102 = v103;
  int64x2_t v65 = vdupq_n_s64(0x7FF8000000000000uLL);
  *(int64x2_t *)uint64_t __p = v65;
  *(int64x2_t *)long long v67 = v65;
  *(int64x2_t *)&v67[16] = v65;
  int64x2_t v68 = v65;
  int64x2_t v69 = v65;
  int64x2_t v70 = v65;
  int64x2_t v71 = v65;
  int64x2_t v72 = v65;
  int64x2_t v73 = v65;
  int64x2_t v74 = v65;
  int64x2_t v75 = v65;
  int64x2_t v76 = v65;
  int64x2_t v77 = v65;
  int64x2_t v78 = v65;
  *(int64x2_t *)uint64_t v79 = v65;
  *(int64x2_t *)&v79[16] = v65;
  int64x2_t v80 = v65;
  int64x2_t v81 = v65;
  int64x2_t v82 = v65;
  int64x2_t v83 = v65;
  int64x2_t v84 = v65;
  int64x2_t v85 = v65;
  int64x2_t v86 = v65;
  int64x2_t v87 = v65;
  int64x2_t v88 = v65;
  int64x2_t v89 = v65;
  int64x2_t v90 = v65;
  int64x2_t v91 = v65;
  int64x2_t v92 = v65;
  int64x2_t v93 = v65;
  int64x2_t v94 = v65;
  int64x2_t v95 = v65;
  int64x2_t v96 = v65;
  int64x2_t v97 = v65;
  uint64_t v98 = 0x7FF8000000000000;
  int v6 = *((unsigned __int8 *)this + 2536);
  LOBYTE(v63.f64[0]) = 0;
  if (sub_18E06F128((uint64_t)this + 14616, (uint64_t)&v104, v6, (uint64_t)&v99, (uint64_t)&v65, (BOOL *)&v63, 0.000000015))
  {
    LOWORD(v114.f64[0]) = 12;
    LOBYTE(v112.__sinval) = 4;
    *(void *)&v63.f64[0] = (*(uint64_t (**)(const raven::MapVectorEvent *))(*(void *)a2 + 16))(a2);
    v63.f64[1] = v7;
    char v8 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)&v63, "Could not get user position for map vector measurement");
    if (*((char *)this + 2511) >= 0) {
      LOBYTE(v14) = v8;
    }
    else {
      uint64_t v14 = *((void *)this + 311);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v114, (unsigned __int8 *)&v112, "%s", v9, v10, v11, v12, v13, v14);
    return 0xFFFFFFFFLL;
  }
  float64x2_t v63 = 0uLL;
  uint64_t v64 = 0;
  float64x2_t v63 = *(float64x2_t *)v102;
  uint64_t v64 = *((void *)v102 + 2);
  uint64_t v16 = (int64x2_t *)((char *)a2 + 104);
  int ShouldMapVectorConstraintBeApplied = raven::RavenEstimator::ShouldMapVectorConstraintBeApplied(this, &v63, (float64x2_t *)((char *)a2 + 104));
  if (ShouldMapVectorConstraintBeApplied) {
    BOOL v18 = 0;
  }
  else {
    BOOL v18 = !IsUserStationary;
  }
  BOOL v19 = ShouldMapVectorConstraintBeApplied != -2;
  if (*((unsigned char *)this + 2536) != 1) {
    goto LABEL_27;
  }
  if (*((unsigned char *)this + 1776)) {
    BOOL v19 = *((unsigned __int8 *)this + 1888) - 3 < 0xFFFFFFFE && ShouldMapVectorConstraintBeApplied != -2;
  }
  if (*((unsigned char *)this + 2064) && fabs(*((double *)this + 276)) > 1.0)
  {
    BOOL v19 = 0;
    BOOL v18 = 0;
  }
  if (v18 || v19)
  {
    float64x2_t v114 = vmulq_f64(*((float64x2_t *)a2 + 14), (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL));
    uint64_t v115 = 0;
    __double2 v112 = __sincos_stret(*((double *)a2 + 32) * 0.0174532925);
    uint64_t v113 = 0;
    if (!cnnavigation::ENUToECEF((long long *)&v112, 1, 1, (uint64_t)&v114, 1, &v110))
    {
      if (v102[5] * v110.f64[1] + v102[4] * v110.f64[0] + v102[6] * v111 >= 0.866025404)
      {
        BOOL v43 = v18;
      }
      else
      {
        BOOL v19 = 0;
        BOOL v43 = 0;
      }
      if (v43) {
        goto LABEL_28;
      }
      goto LABEL_55;
    }
LABEL_27:
    if (v18)
    {
LABEL_28:
      sub_18E06BF24(&v65, 21);
      v65.i64[0] = (uint64_t)&unk_1EDD15FE8;
      *(_OWORD *)&v67[8] = v109;
      *(void *)&v67[24] = (char *)this + 2696;
      v68.i64[0] = (uint64_t)this + 14600;
      v68.i64[1] = (uint64_t)this + 14616;
      v69.i64[0] = (uint64_t)this + 2536;
      v69.i64[1] = (uint64_t)this + 2576;
      long long v22 = *(_OWORD *)((char *)a2 + 248);
      int64x2_t v78 = *(int64x2_t *)((char *)a2 + 232);
      *(_OWORD *)uint64_t v79 = v22;
      *(_OWORD *)&v79[12] = *(_OWORD *)((char *)a2 + 260);
      int64x2_t v23 = *(int64x2_t *)((char *)a2 + 184);
      int64x2_t v74 = *(int64x2_t *)((char *)a2 + 168);
      int64x2_t v75 = v23;
      int64x2_t v24 = *(int64x2_t *)((char *)a2 + 216);
      int64x2_t v76 = *(int64x2_t *)((char *)a2 + 200);
      int64x2_t v77 = v24;
      int64x2_t v25 = *(int64x2_t *)((char *)a2 + 120);
      int64x2_t v70 = *v16;
      int64x2_t v71 = v25;
      int64x2_t v26 = *(int64x2_t *)((char *)a2 + 152);
      int64x2_t v72 = *(int64x2_t *)((char *)a2 + 136);
      int64x2_t v73 = v26;
      int v27 = *((unsigned __int8 *)this + 1208);
      BOOL v28 = *((unsigned char *)this + 1208)
         && *((unsigned char *)this + 1320) == 5
         && *((unsigned char *)this + 2368)
         && *((unsigned __int8 *)this + 2480) - 2 < 3;
      v80.i8[0] = v28;
      uint64_t v106 = 0x100000003;
      *(void *)&long long v29 = 0x100000001;
      *((void *)&v29 + 1) = 0x100000001;
      long long v105 = v29;
      uint64_t v104 = &unk_1EDD18D98;
      int v107 = v108;
      v108[0] = 0;
      uint64_t v101 = 0x100000001;
      long long v100 = v29;
      uint64_t v99 = &unk_1EDD18048;
      uint64_t v102 = v103;
      double v30 = *(double *)(*((void *)this + 146) + 2528);
      if (v30 <= 0.0)
      {
        LOWORD(v114.f64[0]) = 12;
        LOBYTE(v112.__sinval) = 4;
        *(void *)&v63.f64[0] = (*(uint64_t (**)(const raven::MapVectorEvent *))(*(void *)a2 + 16))(a2);
        v63.f64[1] = v40;
        char v41 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)&v63, "estimator_map_vector_number_of_cross_track_position_sigmas_in_road_width_ <= 0");
        if (*((char *)this + 2511) >= 0) {
          LOBYTE(v39) = v41;
        }
        else {
          uint64_t v39 = *((void *)this + 311);
        }
      }
      else
      {
        double v31 = *((double *)a2 + 30) / v30;
        if (v27 && v31 < 1.0 && *((unsigned char *)this + 1320) != 5) {
          double v31 = 1.0;
        }
        v103[0] = v31 * v31;
        if (!sub_18E048E38((uint64_t)this + 61288, (double *)&v109, (uint64_t)&v104, (uint64_t)&v99, (uint64_t)&v65))
        {
          int v21 = 0;
LABEL_47:
          v65.i64[0] = (uint64_t)&unk_1EDD0A4E8;
          if ((v67[7] & 0x80000000) != 0) {
            operator delete(__p[0]);
          }
          if (!v19) {
            goto LABEL_50;
          }
LABEL_56:
          sub_18E06BF24(&v65, 22);
          v65.i64[0] = (uint64_t)&unk_1EDD16010;
          *(_OWORD *)&v67[8] = v109;
          *(void *)&v67[24] = (char *)this + 2696;
          v68.i64[0] = (uint64_t)this + 14600;
          v68.i64[1] = (uint64_t)this + 14616;
          v69.i64[0] = (uint64_t)this + 2536;
          v69.i64[1] = (uint64_t)this + 2576;
          long long v44 = *(_OWORD *)((char *)a2 + 248);
          int64x2_t v78 = *(int64x2_t *)((char *)a2 + 232);
          *(_OWORD *)uint64_t v79 = v44;
          *(_OWORD *)&v79[12] = *(_OWORD *)((char *)a2 + 260);
          int64x2_t v45 = *(int64x2_t *)((char *)a2 + 184);
          int64x2_t v74 = *(int64x2_t *)((char *)a2 + 168);
          int64x2_t v75 = v45;
          int64x2_t v46 = *(int64x2_t *)((char *)a2 + 216);
          int64x2_t v76 = *(int64x2_t *)((char *)a2 + 200);
          int64x2_t v77 = v46;
          int64x2_t v47 = *(int64x2_t *)((char *)a2 + 120);
          int64x2_t v70 = *v16;
          int64x2_t v71 = v47;
          long long v48 = *(_OWORD *)((char *)a2 + 152);
          int64x2_t v72 = *(int64x2_t *)((char *)a2 + 136);
          int64x2_t v73 = (int64x2_t)v48;
          uint64_t v106 = 0x100000003;
          *(void *)&long long v48 = 0x100000001;
          *((void *)&v48 + 1) = 0x100000001;
          long long v105 = v48;
          uint64_t v104 = &unk_1EDD18D98;
          int v107 = v108;
          v108[0] = 0x3FF0000000000000;
          uint64_t v101 = 0x100000001;
          long long v100 = v48;
          double v49 = *(double *)(*((void *)this + 146) + 2536);
          uint64_t v99 = &unk_1EDD18048;
          uint64_t v102 = v103;
          if (v49 <= 0.0)
          {
            LOWORD(v114.f64[0]) = 12;
            LOBYTE(v112.__sinval) = 4;
            *(void *)&v63.f64[0] = (*(uint64_t (**)(const raven::MapVectorEvent *))(*(void *)a2 + 16))(a2);
            v63.f64[1] = v61;
            char v62 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)&v63, "estimator_map_vector_cross_track_velocity_sigma_ <= 0");
            if (*((char *)this + 2511) >= 0) {
              LOBYTE(v60) = v62;
            }
            else {
              uint64_t v60 = *((void *)this + 311);
            }
          }
          else
          {
            double v50 = *(double *)(*((void *)this + 1831) + 192);
            double v51 = 1.0;
            if (fabs(v50) > 0.000000015)
            {
              double v52 = v49 / v50;
              if (v52 <= 1.0)
              {
                double v51 = 0.0174524064;
                if (v52 >= 0.0174524064) {
                  double v51 = v52;
                }
              }
            }
            v103[0] = v51 * v51;
            if (!sub_18E049954((uint64_t)this + 61288, (double *)&v109, (uint64_t)&v104, (uint64_t)&v99, (uint64_t)&v65))
            {
              int v42 = 0;
LABEL_69:
              v65.i64[0] = (uint64_t)&unk_1EDD0A4E8;
              if ((v67[7] & 0x80000000) != 0) {
                operator delete(__p[0]);
              }
              return (v42 + v21);
            }
            LOWORD(v114.f64[0]) = 12;
            LOBYTE(v112.__sinval) = 4;
            *(void *)&v63.f64[0] = (*(uint64_t (**)(const raven::MapVectorEvent *))(*(void *)a2 + 16))(a2);
            v63.f64[1] = v53;
            char v54 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)&v63, "Could not add measurement - map vector velocity");
            if (*((char *)this + 2511) >= 0) {
              LOBYTE(v60) = v54;
            }
            else {
              uint64_t v60 = *((void *)this + 311);
            }
          }
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v114, (unsigned __int8 *)&v112, "%s", v55, v56, v57, v58, v59, v60);
          int v42 = -2;
          goto LABEL_69;
        }
        LOWORD(v114.f64[0]) = 12;
        LOBYTE(v112.__sinval) = 4;
        *(void *)&v63.f64[0] = (*(uint64_t (**)(const raven::MapVectorEvent *))(*(void *)a2 + 16))(a2);
        v63.f64[1] = v32;
        char v33 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)&v63, "Could not add measurement - map vector position");
        if (*((char *)this + 2511) >= 0) {
          LOBYTE(v39) = v33;
        }
        else {
          uint64_t v39 = *((void *)this + 311);
        }
      }
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v114, (unsigned __int8 *)&v112, "%s", v34, v35, v36, v37, v38, v39);
      int v21 = -1;
      goto LABEL_47;
    }
LABEL_55:
    int v21 = 0;
    int v42 = 0;
    if (!v19) {
      return (v42 + v21);
    }
    goto LABEL_56;
  }
  int v21 = 0;
LABEL_50:
  int v42 = 0;
  return (v42 + v21);
}

void sub_18E048438(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL raven::RavenPNTEstimator::IsUserStationary(raven::RavenPNTEstimator *this)
{
  if (!*((unsigned char *)this + 58)) {
    return 0;
  }
  if (!*((unsigned char *)this + 1208)
    || ((v1 = *((unsigned __int8 *)this + 1320), v2 = v1 > 7, v3 = (1 << v1) & 0xCE, !v2) ? (BOOL v4 = v3 == 0) : (BOOL v4 = 1), v4))
  {
    unsigned int v5 = (double *)(*((void *)this + 146) + 928);
  }
  else
  {
    unsigned int v5 = (double *)(*((void *)this + 146) + 936);
  }
  double v7 = *(double *)(*((void *)this + 1831) + 192);
  return v7 < cnstatistics::InverseNormal(this, 1.0 - *v5, 0.0, sqrt(*(double *)(*((void *)this + 1864) + 192 * *((int *)this + 3725) + 192)));
}

void *sub_18E048544(void *result)
{
  *uint64_t result = &unk_1EDD17478;
  return result;
}

uint64_t sub_18E048564(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v129 = *MEMORY[0x1E4F143B8];
  if (!*(void *)(a3 + 56)) {
    goto LABEL_12;
  }
  unsigned int v10 = *(_DWORD *)(a1 + 8);
  unsigned int v11 = *(_DWORD *)(a1 + 12);
  int v12 = v10 <= v11 ? *(_DWORD *)(a1 + 12) : *(_DWORD *)(a1 + 8);
  BOOL v13 = !v10 || v11 == 0;
  BOOL v14 = !v13 && v12 == 26;
  if (!v14
    || ((v19 = *(_DWORD *)(a2 + 8), unsigned int v18 = *(_DWORD *)(a2 + 12), v19 <= v18)
      ? (int v20 = *(_DWORD *)(a2 + 12))
      : (int v20 = *(_DWORD *)(a2 + 8)),
        !v19 || !v18 || v20 != 1))
  {
LABEL_12:
    *(_WORD *)int64x2_t v87 = 12;
    v121[0] = 4;
    double v15 = *(double *)(a3 + 48) + (double)*(uint64_t *)(a3 + 40);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v87, v121, "time,%.3lf,h-function failure on line %d: %s() %s", a4, a5, a6, a7, a8, SLOBYTE(v15));
    return 0xFFFFFFFFLL;
  }
  long long v123 = *(_OWORD *)(a3 + 40);
  uint64_t v24 = *(void *)(a3 + 72);
  long long v122 = *(_OWORD *)*(void *)(a3 + 64);
  sub_18E07FB20((uint64_t)v121, v24);
  int v25 = **(unsigned __int8 **)(a3 + 80);
  uint64_t v118 = 0x10000001CLL;
  long long v117 = xmmword_18E1FD5F0;
  uint64_t v116 = &unk_1EDD188B8;
  unsigned __int8 v119 = &v120;
  switch(v25)
  {
    case 0:
      uint64_t v72 = 0x100000007;
      int64x2_t v70 = &unk_1EDD197E8;
      long long v71 = xmmword_18E1FD680;
      int64x2_t v73 = (double *)&v74;
      if (!sub_18E06C3A8((uint64_t)&v123, &v122, (uint64_t)v121, 0, (uint64_t)&v70))
      {
        *(void *)&v87[24] = 0x700000001;
        *(void *)int64x2_t v87 = &unk_1EDD183A8;
        *(void *)&v88[0] = (char *)v88 + 8;
        *(_OWORD *)&v87[8] = xmmword_18E1FD690;
        for (uint64_t i = 10; i != 17; ++i)
          *(_DWORD *)&v87[4 * i] = i + 11;
        sub_18E05B904((uint64_t)&v80, (uint64_t)v87);
        sub_18E06CE44((uint64_t)v87, (uint64_t)&v116, (uint64_t)&v80);
        sub_18E06C83C((uint64_t)v87, SDWORD2(v71), v73);
        break;
      }
      *(_WORD *)int64x2_t v87 = 12;
      LOBYTE(v80) = 4;
      double v37 = *(double *)(a3 + 48) + (double)*(uint64_t *)(a3 + 40);
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v87, (unsigned __int8 *)&v80, "time,%.3lf,h-function failure on line %d: %s() %s", v32, v33, v34, v35, v36, SLOBYTE(v37));
      return 0xFFFFFFFFLL;
    case 1:
      if (!sub_18E0786E0((uint64_t)&v123, &v122, (uint64_t)v121, *(void *)(a3 + 56), *(void *)(a3 + 88), 1, 1, 1, (uint64_t)&v116))break; {
      *(_WORD *)int64x2_t v87 = 12;
      }
      LOBYTE(v70) = 4;
      double v31 = *(double *)(a3 + 48) + (double)*(uint64_t *)(a3 + 40);
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v87, (unsigned __int8 *)&v70, "time,%.3lf,h-function failure on line %d: %s() %s", v26, v27, v28, v29, v30, SLOBYTE(v31));
      return 0xFFFFFFFFLL;
    case 2:
      __assert_rtn("h_MapVector_Position_RavenPNT", "ravenmeasurementfunctions.h", 6187, "false && \"Unexpected case RavenPNTEstimatorStateParameterization::ParameterizationCount\"");
  }
  uint64_t v113 = 0x100000007;
  long long v112 = xmmword_18E1FD680;
  double v111 = &unk_1EDD197E8;
  float64x2_t v114 = (float64x2_t *)&v115;
  *(int64x2_t *)int64x2_t v87 = vdupq_n_s64(0x7FF8000000000000uLL);
  *(_OWORD *)&v87[16] = *(_OWORD *)v87;
  v88[0] = *(_OWORD *)v87;
  v88[1] = *(_OWORD *)v87;
  v88[2] = *(_OWORD *)v87;
  v88[3] = *(_OWORD *)v87;
  v88[4] = *(_OWORD *)v87;
  v88[5] = *(_OWORD *)v87;
  v88[6] = *(_OWORD *)v87;
  v88[7] = *(_OWORD *)v87;
  v88[8] = *(_OWORD *)v87;
  v88[9] = *(_OWORD *)v87;
  v88[10] = *(_OWORD *)v87;
  v88[11] = *(_OWORD *)v87;
  long long v89 = *(_OWORD *)v87;
  long long v90 = *(_OWORD *)v87;
  long long v91 = *(_OWORD *)v87;
  long long v92 = *(_OWORD *)v87;
  long long v93 = *(_OWORD *)v87;
  long long v94 = *(_OWORD *)v87;
  long long v95 = *(_OWORD *)v87;
  long long v96 = *(_OWORD *)v87;
  long long v97 = *(_OWORD *)v87;
  long long v98 = *(_OWORD *)v87;
  long long v99 = *(_OWORD *)v87;
  long long v100 = *(_OWORD *)v87;
  long long v101 = *(_OWORD *)v87;
  long long v102 = *(_OWORD *)v87;
  long long v103 = *(_OWORD *)v87;
  long long v104 = *(_OWORD *)v87;
  long long v105 = *(_OWORD *)v87;
  long long v106 = *(_OWORD *)v87;
  long long v107 = *(_OWORD *)v87;
  long long v108 = *(_OWORD *)v87;
  long long v109 = *(_OWORD *)v87;
  uint64_t v110 = 0x7FF8000000000000;
  LOBYTE(v70) = 0;
  if (sub_18E06F128((uint64_t)&v116, a1, v25, (uint64_t)&v111, (uint64_t)v87, (BOOL *)&v70, 0.000000015)
    || (float64x2_t v127 = *v114,
        float64_t v128 = v114[1].f64[0],
        uint64_t v126 = 0,
        cnnavigation::ECEFToLLA(&v127, 1, v125.f64, 0, (uint64_t)&v70)))
  {
    LOWORD(v70) = 12;
    LOBYTE(v80) = 4;
    double v44 = *(double *)(a3 + 48) + (double)*(uint64_t *)(a3 + 40);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v70, (unsigned __int8 *)&v80, "time,%.3lf,h-function failure on line %d: %s() %s", v39, v40, v41, v42, v43, SLOBYTE(v44));
    return 0xFFFFFFFFLL;
  }
  float64x2_t v125 = vmulq_f64(*(float64x2_t *)(a3 + 192), (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL));
  char v81 = 0;
  uint64_t v84 = 0x300000003;
  long long v83 = xmmword_18E1F0010;
  int64x2_t v82 = &unk_1EDD18EE8;
  int64x2_t v85 = &v86;
  int64x2_t v80 = &unk_1EDD0AB68;
  cnnavigation::ECEFToENU(&v127, 1, 1, &v125, 0, (uint64_t)v124, (uint64_t)&v80, COERCE_DOUBLE(0x300000003));
  int v50 = v49;
  uint64_t v51 = a3 + 40;
  if (v50)
  {
    sub_18E06B804(v51, (uint64_t)"coordinate conversion error to ENU", (uint64_t)"h_MapVector_Position_RavenPNT", 6227, v45, v46, v47, v48);
    return 0xFFFFFFFFLL;
  }
  uint64_t v77 = 0x300000003;
  long long v76 = xmmword_18E1F0010;
  int64x2_t v75 = &unk_1EDD18EE8;
  int64x2_t v78 = (double *)&v79;
  if (!v81)
  {
    sub_18E06B804(v51, (uint64_t)"could not compute Jacobian", (uint64_t)"h_MapVector_Position_RavenPNT", 6235, v45, v46, v47, v48);
    return 0xFFFFFFFFLL;
  }
  sub_18DFE2F24((uint64_t)&v75, (uint64_t)&v82);
  __double2 v52 = __sincos_stret(*(double *)(a3 + 248) * 0.0174532925);
  *(void *)&long long v53 = 0x100000001;
  *((void *)&v53 + 1) = 0x100000001;
  *(_OWORD *)(a4 + 8) = v53;
  double v54 = -v52.__cosval;
  uint64_t v55 = *(double **)(a4 + 32);
  double v56 = v52.__sinval * v124[1] - v52.__cosval * v124[0] + **(double **)(a2 + 32);
  *uint64_t v55 = v56;
  if (!*(unsigned char *)(a3 + 272))
  {
    double v57 = *(double *)(a3 + 232);
    if (fabs(v56) > v57 * 0.5)
    {
      if (v56 >= 0.0) {
        double v57 = -v57;
      }
      *uint64_t v55 = v56 + v57 * 0.5;
    }
  }
  double v58 = *v78;
  double v59 = v78[1];
  uint64_t v60 = &v78[SHIDWORD(v76)];
  double v61 = *v60;
  double v62 = v60[1];
  double v63 = v78[2 * SHIDWORD(v76)];
  double v64 = v78[(2 * HIDWORD(v76)) | 1];
  sub_18E0713D0((uint64_t)&v70);
  double v65 = v52.__sinval * v64 + v54 * v63;
  double v66 = v52.__sinval * v62 + v54 * v61;
  double v67 = v52.__sinval * v59 + v54 * v58;
  sub_18DFE2F24(a5, (uint64_t)&v70);
  int64x2_t v68 = *(double **)(a5 + 32);
  *int64x2_t v68 = v67 * *((double *)&v89 + 1);
  uint64_t v69 = *(int *)(a5 + 20);
  v68[v69] = v66 * *(double *)&v93;
  v68[2 * v69] = v65 * *((double *)&v96 + 1);
  v68[6 * (int)v69] = v66 * *((double *)&v93 + 1) + v67 * *(double *)&v90 + v65 * *(double *)&v97;
  v68[7 * (int)v69] = v66 * *(double *)&v94 + v67 * *((double *)&v90 + 1) + v65 * *((double *)&v97 + 1);
  v68[8 * v69] = v66 * *((double *)&v94 + 1) + v67 * *(double *)&v91 + v65 * *(double *)&v98;
  v68[20 * (int)v69] = v66 * *(double *)&v95 + v67 * *((double *)&v91 + 1) + v65 * *((double *)&v98 + 1);
  v68[21 * (int)v69] = v66 * *((double *)&v95 + 1) + v67 * *(double *)&v92 + v65 * *(double *)&v99;
  v68[22 * (int)v69] = v66 * *(double *)&v96 + v67 * *((double *)&v92 + 1) + v65 * *((double *)&v99 + 1);
  sub_18E071E98(1u, 1u, (uint64_t)&v70);
  sub_18DFE2F24(a6, (uint64_t)&v70);
  return 0;
}

uint64_t sub_18E048E38(uint64_t a1, double *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v66[4] = *(void (**)(uint64_t))MEMORY[0x1E4F143B8];
  unsigned int v5 = *(_DWORD *)(a4 + 8);
  if ((v5 & 0x80000000) != 0) {
    __assert_rtn("Zeros", "cnmatrix.h", 3098, "nr >= 0");
  }
  uint64_t v62 = 0x100000003;
  double v57 = &unk_1EDD18D98;
  double v63 = &v64;
  unsigned int v58 = v5;
  unsigned int v59 = 1;
  unsigned int v60 = v5;
  unsigned int v61 = v5;
  unsigned int v11 = (cnprint::CNPrinter *)sub_18DFE2CC8((uint64_t)&v57, 0.0);
  if (!*(unsigned char *)a1)
  {
    if (cnprint::CNPrinter::GetLogLevel(v11) <= 1)
    {
      LOWORD(v66[0]) = 2;
      unsigned __int8 v65 = 1;
      double v54 = a2[1] + (double)*(uint64_t *)a2;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v66, &v65, "MeasurementAccumulator::AddMeasurement() failed - Not initialized,t_meas,%.3lf", v17, v18, v19, v20, v21, SLOBYTE(v54));
    }
    return 0xFFFFFFFFLL;
  }
  if (*(_DWORD *)(a1 + 5936) == 174)
  {
    LOWORD(v66[0]) = 2;
    unsigned __int8 v65 = 2;
    double v53 = a2[1] + (double)*(uint64_t *)a2;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v66, &v65, "MeasurementAccumulator::AddMeasurement() failed - Out of space,t_meas,%.3lf", v12, v13, v14, v15, v16, SLOBYTE(v53));
    return 0xFFFFFFFFLL;
  }
  if (*(unsigned char *)(a1 + 1))
  {
    if (cnprint::CNPrinter::GetLogLevel(v11) <= 1)
    {
      LOWORD(v66[0]) = 2;
      unsigned __int8 v65 = 1;
      double v55 = a2[1] + (double)*(uint64_t *)a2;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v66, &v65, "MeasurementAccumulator::AddMeasurement() failed - Locked,t_meas,%.3lf", v22, v23, v24, v25, v26, SLOBYTE(v55));
    }
    return 0xFFFFFFFFLL;
  }
  BOOL v27 = sub_18DEE4CB8(a2, (double *)(a1 + 8));
  if (v27)
  {
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v27) <= 1)
    {
      LOWORD(v66[0]) = 2;
      unsigned __int8 v65 = 1;
      double v56 = a2[1] + (double)*(uint64_t *)a2;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v66, &v65, "MeasurementAccumulator::AddMeasurement() failed - Measurement too old,t_meas,%.3lf,t_start,%.3lf", v28, v29, v30, v31, v32, SLOBYTE(v56));
    }
    return 0xFFFFFFFFLL;
  }
  v66[0] = 0;
  v66[1] = 0;
  sub_18E07A634(v66, a5);
  uint64_t v33 = sub_18E06C110((uint64_t *)(a1 + 40), v66);
  sub_18E067C60((uint64_t (**)(void, void, void, void, void))v66);
  uint64_t v34 = *(int *)(a1 + 5936);
  uint64_t v35 = (v34 + 1);
  if (*(void *)(a1 + 56) != v35)
  {
    LOWORD(v66[0]) = 2;
    unsigned __int8 v65 = 4;
    char v47 = (*(uint64_t (**)(uint64_t))(*(void *)a5 + 16))(a5);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v66, &v65, "MeasurementAccumulator::AddMeasurement() failed - allocation failed,meas_type,%d,t_meas,%.3lf", v48, v49, v50, v51, v52, v47);
    return 0xFFFFFFFFLL;
  }
  *(_DWORD *)(a1 + 5936) = v35;
  *(_DWORD *)(a1 + 72) = v35;
  *(_DWORD *)(a1 + 76) = 1;
  *(_DWORD *)(a1 + 80) = v35;
  *(_DWORD *)(a1 + 84) = v35;
  *(_DWORD *)(a1 + 2896) = v35;
  *(_DWORD *)(a1 + 2900) = 1;
  *(_DWORD *)(a1 + 2904) = v35;
  *(_DWORD *)(a1 + 2908) = v35;
  *(_DWORD *)(a1 + 3632) = v35;
  *(_DWORD *)(a1 + 3636) = 1;
  *(_DWORD *)(a1 + 3640) = v35;
  *(_DWORD *)(a1 + 3644) = v35;
  *(_DWORD *)(a1 + 5064) = v35;
  *(_DWORD *)(a1 + 5068) = 1;
  *(_DWORD *)(a1 + 5072) = v35;
  *(_DWORD *)(a1 + 5076) = v35;
  *(_DWORD *)(a1 + 5112) = v35;
  *(_DWORD *)(a1 + 5116) = 1;
  *(_DWORD *)(a1 + 5120) = v35;
  *(_DWORD *)(a1 + 5124) = v35;
  *(_DWORD *)(a1 + 5848) = v35;
  *(_DWORD *)(a1 + 5852) = 1;
  *(_DWORD *)(a1 + 5856) = v35;
  *(_DWORD *)(a1 + 5860) = v35;
  *(_DWORD *)(a1 + 5896) = v35;
  *(_DWORD *)(a1 + 5900) = 1;
  *(_DWORD *)(a1 + 5904) = v35;
  *(_DWORD *)(a1 + 5908) = v35;
  *(_DWORD *)(a1 + 5952) = v35;
  *(_DWORD *)(a1 + 5956) = 1;
  *(_DWORD *)(a1 + 5960) = v35;
  *(_DWORD *)(a1 + 5964) = v35;
  *(_DWORD *)(a1 + 7384) = v35;
  *(_DWORD *)(a1 + 7388) = 1;
  *(_DWORD *)(a1 + 7392) = v35;
  *(_DWORD *)(a1 + 7396) = v35;
  *(_OWORD *)(*(void *)(a1 + 96) + 16 * v34) = *(_OWORD *)a2;
  unsigned int v36 = *(_DWORD *)(a3 + 8);
  unsigned int v37 = *(_DWORD *)(a3 + 12);
  if (v36 <= v37) {
    int v38 = *(_DWORD *)(a3 + 12);
  }
  else {
    int v38 = *(_DWORD *)(a3 + 8);
  }
  if (v37) {
    BOOL v39 = v36 == 0;
  }
  else {
    BOOL v39 = 1;
  }
  if (v39) {
    int v40 = 0;
  }
  else {
    int v40 = v38;
  }
  *(_DWORD *)(*(void *)(a1 + 2920) + 4 * v34) = v40;
  sub_18DFE2F24(*(void *)(a1 + 5088) + (v34 << 6), a3);
  if (v58 <= v59) {
    unsigned int v41 = v59;
  }
  else {
    unsigned int v41 = v58;
  }
  if (v59) {
    BOOL v42 = v58 == 0;
  }
  else {
    BOOL v42 = 1;
  }
  if (v42) {
    unsigned int v43 = 0;
  }
  else {
    unsigned int v43 = v41;
  }
  *(_DWORD *)(*(void *)(a1 + 5136) + 4 * v34) = v43;
  sub_18DFE2F24(*(void *)(a1 + 5872) + (v34 << 6), (uint64_t)&v57);
  __n128 v44 = sub_18DFE2F24(*(void *)(a1 + 5920) + 112 * (int)v34, a4);
  *(void *)(*(void *)(a1 + 5976) + 8 * v34) = sub_18E048564;
  uint64_t v45 = (uint64_t (*)(uint64_t, void *, void, void *, void *, __n128))*v33;
  if (*v33) {
    uint64_t v45 = (uint64_t (*)(uint64_t, void *, void, void *, void *, __n128))v45(3, v33, 0, &unk_1EDD06088, &std::__any_imp::__unique_typeinfo<raven::h_MapVectorPositionConstraintArgs_RavenPNT<double>>::__id, v44);
  }
  uint64_t result = 0;
  *(void *)(*(void *)(a1 + 7408) + 8 * v34) = v45;
  return result;
}

void sub_18E049264(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (a2) {
    sub_18DEDD524(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_18E049290(uint64_t a1)
{
  *(void *)a1 = &unk_1EDD0A4E8;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

uint64_t sub_18E0492E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!*(void *)(a3 + 56))
  {
    *(_WORD *)uint64_t v69 = 12;
    v91[0] = 4;
    double v15 = *(double *)(a3 + 48) + (double)*(uint64_t *)(a3 + 40);
    goto LABEL_14;
  }
  unsigned int v10 = *(_DWORD *)(a1 + 8);
  unsigned int v11 = *(_DWORD *)(a1 + 12);
  if (v10 <= v11) {
    int v12 = *(_DWORD *)(a1 + 12);
  }
  else {
    int v12 = *(_DWORD *)(a1 + 8);
  }
  if (v10) {
    BOOL v13 = v11 == 0;
  }
  else {
    BOOL v13 = 1;
  }
  BOOL v14 = !v13 && v12 == 26;
  if (!v14
    || ((v19 = *(_DWORD *)(a2 + 8), unsigned int v18 = *(_DWORD *)(a2 + 12), v19 <= v18)
      ? (int v20 = *(_DWORD *)(a2 + 12))
      : (int v20 = *(_DWORD *)(a2 + 8)),
        !v19 || !v18 || v20 != 1))
  {
    *(_WORD *)uint64_t v69 = 12;
    v91[0] = 4;
    double v15 = *(double *)(a3 + 48) + (double)*(uint64_t *)(a3 + 40);
LABEL_14:
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v69, v91, "time,%.3lf,h-function failure on line %d: %s() %s", a4, a5, a6, a7, a8, SLOBYTE(v15));
    return 0xFFFFFFFFLL;
  }
  long long v93 = *(_OWORD *)(a3 + 40);
  uint64_t v24 = *(void *)(a3 + 72);
  long long v92 = *(_OWORD *)*(void *)(a3 + 64);
  sub_18E07FB20((uint64_t)v91, v24);
  int v25 = **(unsigned __int8 **)(a3 + 80);
  uint64_t v88 = 0x10000001CLL;
  long long v87 = xmmword_18E1FD5F0;
  uint64_t v86 = &unk_1EDD188B8;
  long long v89 = &v90;
  if (v25)
  {
    if (v25 != 1)
    {
      if (v25 == 2) {
        __assert_rtn("h_MapVector_Velocity_RavenPNT", "ravenmeasurementfunctions.h", 6395, "false && \"Unexpected case RavenPNTEstimatorStateParameterization::ParameterizationCount\"");
      }
      goto LABEL_33;
    }
    if (!sub_18E0786E0((uint64_t)&v93, &v92, (uint64_t)v91, *(void *)(a3 + 56), *(void *)(a3 + 88), 1, 1, 1, (uint64_t)&v86))goto LABEL_33; {
    *(_WORD *)uint64_t v69 = 12;
    }
    LOBYTE(v58) = 4;
    double v57 = *(double *)(a3 + 48) + (double)*(uint64_t *)(a3 + 40);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v69, (unsigned __int8 *)&v58, "time,%.3lf,h-function failure on line %d: %s() %s", v32, v33, v34, v35, v36, SLOBYTE(v57));
    return 0xFFFFFFFFLL;
  }
  uint64_t v60 = 0x100000007;
  unsigned int v58 = &unk_1EDD197E8;
  long long v59 = xmmword_18E1FD680;
  unsigned int v61 = (double *)&v62;
  if (sub_18E06C3A8((uint64_t)&v93, &v92, (uint64_t)v91, 0, (uint64_t)&v58))
  {
    *(_WORD *)uint64_t v69 = 12;
    v68[0] = 4;
    double v31 = *(double *)(a3 + 48) + (double)*(uint64_t *)(a3 + 40);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v69, v68, "time,%.3lf,h-function failure on line %d: %s() %s", v26, v27, v28, v29, v30, SLOBYTE(v31));
    return 0xFFFFFFFFLL;
  }
  *(void *)&v69[24] = 0x700000001;
  *(void *)uint64_t v69 = &unk_1EDD183A8;
  *(void *)&v70[0] = (char *)v70 + 8;
  *(_OWORD *)&v69[8] = xmmword_18E1FD690;
  for (uint64_t i = 10; i != 17; ++i)
    *(_DWORD *)&v69[4 * i] = i + 11;
  sub_18E05B904((uint64_t)v68, (uint64_t)v69);
  sub_18E06CE44((uint64_t)v69, (uint64_t)&v86, (uint64_t)v68);
  sub_18E06C83C((uint64_t)v69, SDWORD2(v59), v61);
LABEL_33:
  uint64_t v83 = 0x100000007;
  long long v82 = xmmword_18E1FD680;
  char v81 = &unk_1EDD197E8;
  uint64_t v84 = (double *)&v85;
  *(int64x2_t *)uint64_t v69 = vdupq_n_s64(0x7FF8000000000000uLL);
  *(_OWORD *)&v69[16] = *(_OWORD *)v69;
  v70[0] = *(_OWORD *)v69;
  v70[1] = *(_OWORD *)v69;
  v70[2] = *(_OWORD *)v69;
  v70[3] = *(_OWORD *)v69;
  v70[4] = *(_OWORD *)v69;
  v70[5] = *(_OWORD *)v69;
  v70[6] = *(_OWORD *)v69;
  v70[7] = *(_OWORD *)v69;
  v70[8] = *(_OWORD *)v69;
  v70[9] = *(_OWORD *)v69;
  v70[10] = *(_OWORD *)v69;
  v70[11] = *(_OWORD *)v69;
  v70[12] = *(_OWORD *)v69;
  v70[13] = *(_OWORD *)v69;
  v70[14] = *(_OWORD *)v69;
  v70[15] = *(_OWORD *)v69;
  v70[16] = *(_OWORD *)v69;
  v70[17] = *(_OWORD *)v69;
  v70[18] = *(_OWORD *)v69;
  v70[19] = *(_OWORD *)v69;
  v70[20] = *(_OWORD *)v69;
  v70[21] = *(_OWORD *)v69;
  v70[22] = *(_OWORD *)v69;
  v70[23] = *(_OWORD *)v69;
  long long v71 = *(_OWORD *)v69;
  long long v72 = *(_OWORD *)v69;
  long long v73 = *(_OWORD *)v69;
  long long v74 = *(_OWORD *)v69;
  long long v75 = *(_OWORD *)v69;
  long long v76 = *(_OWORD *)v69;
  long long v77 = *(_OWORD *)v69;
  long long v78 = *(_OWORD *)v69;
  long long v79 = *(_OWORD *)v69;
  double v80 = NAN;
  LOBYTE(v58) = 0;
  if (sub_18E06F128((uint64_t)&v86, a1, v25, (uint64_t)&v81, (uint64_t)v69, (BOOL *)&v58, 0.000000015))
  {
    LOWORD(v58) = 12;
    v68[0] = 4;
    double v43 = *(double *)(a3 + 48) + (double)*(uint64_t *)(a3 + 40);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v58, v68, "time,%.3lf,h-function failure on line %d: %s() %s", v38, v39, v40, v41, v42, SLOBYTE(v43));
    return 0xFFFFFFFFLL;
  }
  double v44 = v84[4];
  double v45 = v84[5];
  double v46 = v84[6];
  sub_18E07A858((uint64_t)v68, *(double *)(a3 + 192) * 0.0174532925, *(double *)(a3 + 200) * 0.0174532925);
  __double2 v66 = __sincos_stret(*(double *)(a3 + 248) * 0.0174532925);
  uint64_t v67 = 0;
  if (!sub_18DEF20E0((uint64_t)v68, &v66.__sinval, &v63))
  {
    sub_18E06B804(a3 + 40, (uint64_t)"could not compute DoT", (uint64_t)"h_MapVector_Velocity_RavenPNT", 6431, v47, v48, v49, v50);
    return 0xFFFFFFFFLL;
  }
  *(void *)&long long v51 = 0x100000001;
  *((void *)&v51 + 1) = 0x100000001;
  *(_OWORD *)(a4 + 8) = v51;
  **(double **)(a4 + 32) = v45 * v64 + v63 * v44 + v65 * v46 + **(double **)(a2 + 32);
  double v52 = v63;
  double v53 = v64;
  double v54 = v65;
  sub_18E0713D0((uint64_t)&v58);
  sub_18DFE2F24(a5, (uint64_t)&v58);
  uint64_t v55 = *(int *)(a5 + 20);
  uint64_t v56 = *(void *)(a5 + 32);
  *(double *)(v56 + 48 * v55) = v53 * *((double *)&v74 + 1)
                                        + v52 * *((double *)&v71 + 1)
                                        + v54 * *((double *)&v77 + 1);
  *(double *)(v56 + 56 * v55) = v53 * *(double *)&v75 + v52 * *(double *)&v72 + v54 * *(double *)&v78;
  *(double *)(v56 + (v55 << 6)) = v53 * *((double *)&v75 + 1)
                                + v52 * *((double *)&v72 + 1)
                                + v54 * *((double *)&v78 + 1);
  *(double *)(v56 + 184 * v55) = v53 * *(double *)&v76 + v52 * *(double *)&v73 + v54 * *(double *)&v79;
  *(double *)(v56 + 192 * v55) = v53 * *((double *)&v76 + 1)
                                         + v52 * *((double *)&v73 + 1)
                                         + v54 * *((double *)&v79 + 1);
  *(double *)(v56 + 200 * v55) = v53 * *(double *)&v77 + v52 * *(double *)&v74 + v54 * v80;
  sub_18E071E98(1u, 1u, (uint64_t)&v58);
  sub_18DFE2F24(a6, (uint64_t)&v58);
  return 0;
}

uint64_t sub_18E049954(uint64_t a1, double *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v66[4] = *(void (**)(uint64_t))MEMORY[0x1E4F143B8];
  unsigned int v5 = *(_DWORD *)(a4 + 8);
  if ((v5 & 0x80000000) != 0) {
    __assert_rtn("Zeros", "cnmatrix.h", 3098, "nr >= 0");
  }
  uint64_t v62 = 0x100000003;
  double v57 = &unk_1EDD18D98;
  double v63 = &v64;
  unsigned int v58 = v5;
  unsigned int v59 = 1;
  unsigned int v60 = v5;
  unsigned int v61 = v5;
  unsigned int v11 = (cnprint::CNPrinter *)sub_18DFE2CC8((uint64_t)&v57, 0.0);
  if (!*(unsigned char *)a1)
  {
    if (cnprint::CNPrinter::GetLogLevel(v11) <= 1)
    {
      LOWORD(v66[0]) = 2;
      unsigned __int8 v65 = 1;
      double v54 = a2[1] + (double)*(uint64_t *)a2;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v66, &v65, "MeasurementAccumulator::AddMeasurement() failed - Not initialized,t_meas,%.3lf", v17, v18, v19, v20, v21, SLOBYTE(v54));
    }
    return 0xFFFFFFFFLL;
  }
  if (*(_DWORD *)(a1 + 5936) == 174)
  {
    LOWORD(v66[0]) = 2;
    unsigned __int8 v65 = 2;
    double v53 = a2[1] + (double)*(uint64_t *)a2;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v66, &v65, "MeasurementAccumulator::AddMeasurement() failed - Out of space,t_meas,%.3lf", v12, v13, v14, v15, v16, SLOBYTE(v53));
    return 0xFFFFFFFFLL;
  }
  if (*(unsigned char *)(a1 + 1))
  {
    if (cnprint::CNPrinter::GetLogLevel(v11) <= 1)
    {
      LOWORD(v66[0]) = 2;
      unsigned __int8 v65 = 1;
      double v55 = a2[1] + (double)*(uint64_t *)a2;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v66, &v65, "MeasurementAccumulator::AddMeasurement() failed - Locked,t_meas,%.3lf", v22, v23, v24, v25, v26, SLOBYTE(v55));
    }
    return 0xFFFFFFFFLL;
  }
  BOOL v27 = sub_18DEE4CB8(a2, (double *)(a1 + 8));
  if (v27)
  {
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v27) <= 1)
    {
      LOWORD(v66[0]) = 2;
      unsigned __int8 v65 = 1;
      double v56 = a2[1] + (double)*(uint64_t *)a2;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v66, &v65, "MeasurementAccumulator::AddMeasurement() failed - Measurement too old,t_meas,%.3lf,t_start,%.3lf", v28, v29, v30, v31, v32, SLOBYTE(v56));
    }
    return 0xFFFFFFFFLL;
  }
  v66[0] = 0;
  v66[1] = 0;
  sub_18E07A99C(v66, a5);
  uint64_t v33 = sub_18E06C110((uint64_t *)(a1 + 40), v66);
  sub_18E067C60((uint64_t (**)(void, void, void, void, void))v66);
  uint64_t v34 = *(int *)(a1 + 5936);
  uint64_t v35 = (v34 + 1);
  if (*(void *)(a1 + 56) != v35)
  {
    LOWORD(v66[0]) = 2;
    unsigned __int8 v65 = 4;
    char v47 = (*(uint64_t (**)(uint64_t))(*(void *)a5 + 16))(a5);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v66, &v65, "MeasurementAccumulator::AddMeasurement() failed - allocation failed,meas_type,%d,t_meas,%.3lf", v48, v49, v50, v51, v52, v47);
    return 0xFFFFFFFFLL;
  }
  *(_DWORD *)(a1 + 5936) = v35;
  *(_DWORD *)(a1 + 72) = v35;
  *(_DWORD *)(a1 + 76) = 1;
  *(_DWORD *)(a1 + 80) = v35;
  *(_DWORD *)(a1 + 84) = v35;
  *(_DWORD *)(a1 + 2896) = v35;
  *(_DWORD *)(a1 + 2900) = 1;
  *(_DWORD *)(a1 + 2904) = v35;
  *(_DWORD *)(a1 + 2908) = v35;
  *(_DWORD *)(a1 + 3632) = v35;
  *(_DWORD *)(a1 + 3636) = 1;
  *(_DWORD *)(a1 + 3640) = v35;
  *(_DWORD *)(a1 + 3644) = v35;
  *(_DWORD *)(a1 + 5064) = v35;
  *(_DWORD *)(a1 + 5068) = 1;
  *(_DWORD *)(a1 + 5072) = v35;
  *(_DWORD *)(a1 + 5076) = v35;
  *(_DWORD *)(a1 + 5112) = v35;
  *(_DWORD *)(a1 + 5116) = 1;
  *(_DWORD *)(a1 + 5120) = v35;
  *(_DWORD *)(a1 + 5124) = v35;
  *(_DWORD *)(a1 + 5848) = v35;
  *(_DWORD *)(a1 + 5852) = 1;
  *(_DWORD *)(a1 + 5856) = v35;
  *(_DWORD *)(a1 + 5860) = v35;
  *(_DWORD *)(a1 + 5896) = v35;
  *(_DWORD *)(a1 + 5900) = 1;
  *(_DWORD *)(a1 + 5904) = v35;
  *(_DWORD *)(a1 + 5908) = v35;
  *(_DWORD *)(a1 + 5952) = v35;
  *(_DWORD *)(a1 + 5956) = 1;
  *(_DWORD *)(a1 + 5960) = v35;
  *(_DWORD *)(a1 + 5964) = v35;
  *(_DWORD *)(a1 + 7384) = v35;
  *(_DWORD *)(a1 + 7388) = 1;
  *(_DWORD *)(a1 + 7392) = v35;
  *(_DWORD *)(a1 + 7396) = v35;
  *(_OWORD *)(*(void *)(a1 + 96) + 16 * v34) = *(_OWORD *)a2;
  unsigned int v36 = *(_DWORD *)(a3 + 8);
  unsigned int v37 = *(_DWORD *)(a3 + 12);
  if (v36 <= v37) {
    int v38 = *(_DWORD *)(a3 + 12);
  }
  else {
    int v38 = *(_DWORD *)(a3 + 8);
  }
  if (v37) {
    BOOL v39 = v36 == 0;
  }
  else {
    BOOL v39 = 1;
  }
  if (v39) {
    int v40 = 0;
  }
  else {
    int v40 = v38;
  }
  *(_DWORD *)(*(void *)(a1 + 2920) + 4 * v34) = v40;
  sub_18DFE2F24(*(void *)(a1 + 5088) + (v34 << 6), a3);
  if (v58 <= v59) {
    unsigned int v41 = v59;
  }
  else {
    unsigned int v41 = v58;
  }
  if (v59) {
    BOOL v42 = v58 == 0;
  }
  else {
    BOOL v42 = 1;
  }
  if (v42) {
    unsigned int v43 = 0;
  }
  else {
    unsigned int v43 = v41;
  }
  *(_DWORD *)(*(void *)(a1 + 5136) + 4 * v34) = v43;
  sub_18DFE2F24(*(void *)(a1 + 5872) + (v34 << 6), (uint64_t)&v57);
  __n128 v44 = sub_18DFE2F24(*(void *)(a1 + 5920) + 112 * (int)v34, a4);
  *(void *)(*(void *)(a1 + 5976) + 8 * v34) = sub_18E0492E0;
  double v45 = (uint64_t (*)(uint64_t, void *, void, void *, void *, __n128))*v33;
  if (*v33) {
    double v45 = (uint64_t (*)(uint64_t, void *, void, void *, void *, __n128))v45(3, v33, 0, &unk_1EDD060C0, &std::__any_imp::__unique_typeinfo<raven::h_MapVectorVelocityConstraintArgs_RavenPNT<double>>::__id, v44);
  }
  uint64_t result = 0;
  *(void *)(*(void *)(a1 + 7408) + 8 * v34) = v45;
  return result;
}

void sub_18E049D80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (a2) {
    sub_18DEDD524(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_18E049DAC(uint64_t a1)
{
  *(void *)a1 = &unk_1EDD0A4E8;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

uint64_t raven::RavenPNTEstimator::HandleEvent(raven::RavenPNTEstimator *this, const raven::NonHolonomicVelocityConstraintEvent *a2)
{
  if (!*((unsigned char *)this + 57)) {
    return 0xFFFFFFFFLL;
  }
  if (!*((unsigned char *)this + 58)) {
    return 0;
  }
  BOOL v4 = (char *)a2 + 104;
  double v5 = *((double *)a2 + 13);
  if (fabs(v5) == INFINITY
    || (double v6 = *((double *)a2 + 14), fabs(v6) == INFINITY)
    || (double v7 = *((double *)a2 + 15), fabs(v7) == INFINITY))
  {
    LOWORD(v48[0]) = 12;
    LOBYTE(v59) = 4;
    uint64_t v8 = (*(uint64_t (**)(const raven::NonHolonomicVelocityConstraintEvent *))(*(void *)a2 + 16))(a2);
    double v42 = v9 + (double)v8;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v48, (unsigned __int8 *)&v59, "t,%.3lf, Invalid constraint axis", v10, v11, v12, v13, v14, SLOBYTE(v42));
    return 0xFFFFFFFFLL;
  }
  if (fabs(sqrt(v6 * v6 + v5 * v5 + v7 * v7)) <= 0.000000015)
  {
    LOWORD(v48[0]) = 12;
    LOBYTE(v59) = 4;
    uint64_t v24 = (*(uint64_t (**)(const raven::NonHolonomicVelocityConstraintEvent *))(*(void *)a2 + 16))(a2);
    double v44 = v25 + (double)v24;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v48, (unsigned __int8 *)&v59, "t,%.3lf, Constraint axis has zero magnitude", v26, v27, v28, v29, v30, SLOBYTE(v44));
    return 0xFFFFFFFFLL;
  }
  if (fabs(*((double *)a2 + 16)) == INFINITY)
  {
    LOWORD(v48[0]) = 12;
    LOBYTE(v59) = 4;
    uint64_t v17 = (*(uint64_t (**)(const raven::NonHolonomicVelocityConstraintEvent *))(*(void *)a2 + 16))(a2);
    double v43 = v18 + (double)v17;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v48, (unsigned __int8 *)&v59, "t,%.3lf, Invalid angular uncertainty on constraint axis", v19, v20, v21, v22, v23, SLOBYTE(v43));
    return 0xFFFFFFFFLL;
  }
  sub_18DFEB188(1, 1, (uint64_t)v64);
  uint64_t v61 = 0x300000003;
  unsigned int v59 = &unk_1EDD18EE8;
  *(void *)&long long v31 = 0x100000001;
  *((void *)&v31 + 1) = 0x100000001;
  long long v60 = v31;
  uint64_t v62 = &v63;
  double v32 = *(double *)(*((void *)this + 1831) + 192) * *((double *)a2 + 16);
  double v63 = *(double *)(*((void *)this + 146) + 296) * *(double *)(*((void *)this + 146) + 296) + v32 * v32;
  *(void *)&long long v58 = (*(uint64_t (**)(const raven::NonHolonomicVelocityConstraintEvent *))(*(void *)a2 + 16))(a2);
  *((void *)&v58 + 1) = v33;
  sub_18E06BF24(v48, 23);
  v48[0] = &unk_1EDD160B0;
  long long v50 = v58;
  long long v56 = *(_OWORD *)v4;
  uint64_t v57 = *((void *)v4 + 2);
  uint64_t v51 = (char *)this + 2696;
  uint64_t v52 = (char *)this + 14600;
  double v53 = (char *)this + 14616;
  double v54 = (char *)this + 2536;
  double v55 = (char *)this + 2576;
  if (sub_18E04A998((uint64_t)this + 61288, (double *)&v58, (uint64_t)v64, (uint64_t)&v59, (uint64_t)v48))
  {
    __int16 v47 = 12;
    unsigned __int8 v46 = 4;
    v45[0] = (*(uint64_t (**)(const raven::NonHolonomicVelocityConstraintEvent *))(*(void *)a2 + 16))(a2);
    v45[1] = v34;
    char v35 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)v45, "Could not add measurement - NHC velocity");
    if (*((char *)this + 2511) >= 0) {
      LOBYTE(v41) = v35;
    }
    else {
      uint64_t v41 = *((void *)this + 311);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v47, &v46, "%s", v36, v37, v38, v39, v40, v41);
    uint64_t v15 = 0xFFFFFFFFLL;
  }
  else
  {
    uint64_t v15 = 0;
  }
  v48[0] = &unk_1EDD0A4E8;
  if (v49 < 0) {
    operator delete((void *)v48[2]);
  }
  return v15;
}

void sub_18E04A1D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_18E04A214(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  long long v122 = *(_OWORD *)(a3 + 40);
  unsigned int v9 = *(_DWORD *)(a1 + 8);
  unsigned int v10 = *(_DWORD *)(a1 + 12);
  if (v9 <= v10) {
    int v11 = *(_DWORD *)(a1 + 12);
  }
  else {
    int v11 = *(_DWORD *)(a1 + 8);
  }
  if (v9) {
    BOOL v12 = v10 == 0;
  }
  else {
    BOOL v12 = 1;
  }
  BOOL v13 = !v12 && v11 == 26;
  if (!v13
    || ((unsigned int v15 = *(_DWORD *)(a2 + 8), v16 = *(_DWORD *)(a2 + 12), v15 <= v16)
      ? (int v17 = *(_DWORD *)(a2 + 12))
      : (int v17 = *(_DWORD *)(a2 + 8)),
        v15 ? (BOOL v18 = v16 == 0) : (BOOL v18 = 1),
        !v18 ? (BOOL v19 = v17 == 1) : (BOOL v19 = 0),
        !v19))
  {
    LOWORD(v107[0]) = 12;
    LOBYTE(v77) = 4;
    double v20 = *(double *)(a3 + 48) + (double)*(uint64_t *)(a3 + 40);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v107, (unsigned __int8 *)&v77, "time,%.3lf,h-function failure on line %d: %s() %s", a4, a5, a6, a7, a8, SLOBYTE(v20));
    if (cnprint::CNPrinter::GetLogLevel(v21) <= 1)
    {
      LOWORD(v107[0]) = 12;
      LOBYTE(v77) = 1;
      double v72 = *((double *)&v122 + 1) + (double)(uint64_t)v122;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v107, (unsigned __int8 *)&v77, "t,%.3lf, Warning: h_NonHolonomicVelocityConstraint_RavenPNT called with inadequate matrices", v22, v23, v24, v25, v26, SLOBYTE(v72));
    }
    return 0xFFFFFFFFLL;
  }
  if (!*(void *)(a3 + 56))
  {
    LOWORD(v107[0]) = 12;
    LOBYTE(v77) = 4;
    double v36 = *(double *)(a3 + 48) + (double)*(uint64_t *)(a3 + 40);
    goto LABEL_30;
  }
  uint64_t v31 = *(void *)(a3 + 72);
  long long v121 = *(_OWORD *)*(void *)(a3 + 64);
  sub_18E07FB20((uint64_t)v119, v31);
  double v33 = *(double *)(a3 + 96);
  if (fabs(v33) == INFINITY
    || (double v34 = *(double *)(a3 + 104), fabs(v34) == INFINITY)
    || (double v35 = *(double *)(a3 + 112), fabs(v35) == INFINITY))
  {
    LOWORD(v107[0]) = 12;
    LOBYTE(v77) = 4;
    double v36 = *(double *)(a3 + 48) + (double)*(uint64_t *)(a3 + 40);
LABEL_30:
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v107, (unsigned __int8 *)&v77, "time,%.3lf,h-function failure on line %d: %s() %s", a4, a5, a6, a7, a8, SLOBYTE(v36));
    return 0xFFFFFFFFLL;
  }
  double v38 = sqrt(v34 * v34 + v33 * v33 + v35 * v35);
  if (fabs(v38) <= 0.000000015)
  {
    sub_18E06B804(a3 + 40, (uint64_t)"constraint axis has zero magnitude", (uint64_t)"h_NonHolonomicVelocityConstraint_RavenPNT", 6553, a5, a6, a7, a8);
    return 0xFFFFFFFFLL;
  }
  if (vabdd_f64(1.0, v38) > 0.000000015)
  {
    *(double *)&uint64_t v75 = v38;
    if (!cnprint::CNPrinter::GetLogLevel(v32))
    {
      LOWORD(v107[0]) = 12;
      LOBYTE(v77) = 0;
      double v73 = *((double *)&v122 + 1) + (double)(uint64_t)v122;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v107, (unsigned __int8 *)&v77, "t,%.3lf, Normalizing constraint axis to unit magnitude", v39, v40, v41, v42, v43, SLOBYTE(v73));
    }
    *(float64x2_t *)(a3 + 96) = vdivq_f64(*(float64x2_t *)(a3 + 96), (float64x2_t)vdupq_lane_s64(v75, 0));
    *(double *)(a3 + 112) = *(double *)(a3 + 112) / *(double *)&v75;
  }
  uint64_t v44 = *(void *)(a3 + 56);
  uint64_t v116 = 0x10000001CLL;
  long long v115 = xmmword_18E1FD5F0;
  float64x2_t v114 = &unk_1EDD188B8;
  long long v117 = &v118;
  if (sub_18E06B85C((uint64_t)&v122, (uint64_t)&v121, v120, v44, *(void *)(a3 + 88), (uint64_t)&v114))
  {
    sub_18E06B804(a3 + 40, (uint64_t)"could not integrate full states", (uint64_t)"h_NonHolonomicVelocityConstraint_RavenPNT", 6571, v45, v46, v47, v48);
    if (cnprint::CNPrinter::GetLogLevel(v49) <= 1)
    {
      LOWORD(v107[0]) = 12;
      LOBYTE(v77) = 1;
      double v74 = *((double *)&v122 + 1) + (double)(uint64_t)v122;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v107, (unsigned __int8 *)&v77, "t,%.3lf, Error: h_NonHolonomicVelocityConstraint_RavenPNT IntegrateDeviceKinematicStateEstimate failed", v50, v51, v52, v53, v54, SLOBYTE(v74));
    }
    return 0xFFFFFFFFLL;
  }
  long long v115 = xmmword_18E1FD5F0;
  uint64_t v111 = 0x10000001CLL;
  long long v109 = &unk_1EDD188B8;
  long long v110 = xmmword_18E1FD5F0;
  long long v112 = (double *)&v113;
  v107[0] = vdupq_n_s64(0x7FF8000000000000uLL);
  v107[1] = v107[0];
  v107[2] = v107[0];
  v107[3] = v107[0];
  v107[4] = v107[0];
  v107[5] = v107[0];
  v107[6] = v107[0];
  v107[7] = v107[0];
  v107[8] = v107[0];
  v107[9] = v107[0];
  v107[10] = v107[0];
  v107[11] = v107[0];
  v107[12] = v107[0];
  v107[13] = v107[0];
  v107[14] = v107[0];
  v107[15] = v107[0];
  v107[16] = v107[0];
  v107[17] = v107[0];
  v107[18] = v107[0];
  v107[19] = v107[0];
  v107[20] = v107[0];
  v107[21] = v107[0];
  v107[22] = v107[0];
  v107[23] = v107[0];
  v107[24] = v107[0];
  v107[25] = v107[0];
  v107[26] = v107[0];
  v107[27] = v107[0];
  v107[28] = v107[0];
  v107[29] = v107[0];
  v107[30] = v107[0];
  v107[31] = v107[0];
  v107[32] = v107[0];
  v107[33] = v107[0];
  v107[34] = v107[0];
  uint64_t v108 = 0x7FF8000000000000;
  sub_18E06BA00((uint64_t)&v114, a1, (uint64_t)&v109, (uint64_t)v107);
  uint64_t v104 = 0x100000003;
  long long v103 = xmmword_18E1F6F60;
  long long v102 = &unk_1EDD18D98;
  long long v105 = v106;
  *(double *)long long v106 = v112[3];
  *(double *)&v106[1] = v112[4];
  *(double *)&v106[2] = v112[5];
  double v55 = v112[6];
  double v56 = v112[7];
  double v57 = v112[8];
  double v58 = v112[9];
  double v59 = sqrt(v56 * v56 + v55 * v55 + v57 * v57 + v58 * v58);
  if (fabs(v59) >= 2.22044605e-16)
  {
    double v61 = v55 / v59;
    double v62 = v56 / v59;
    double v63 = v57 / v59;
    double v60 = v58 / v59;
  }
  else
  {
    double v60 = 1.0;
    double v61 = 0.0;
    double v62 = 0.0;
    double v63 = 0.0;
  }
  v101[0] = v61;
  v101[1] = v62;
  v101[2] = v63;
  v101[3] = v60;
  uint64_t v98 = 0x100000003;
  long long v97 = xmmword_18E1F6F60;
  long long v96 = &unk_1EDD18D98;
  long long v99 = (double *)&v100;
  sub_18DFEDF6C((cnrotation::CNRotation *)v101, (uint64_t)&v102, (uint64_t)&v77);
  sub_18DFE2F24((uint64_t)&v96, (uint64_t)&v77);
  uint64_t v92 = 0x300000001;
  long long v91 = xmmword_18E1F8560;
  uint64_t v90 = &unk_1EDD18228;
  long long v93 = (double *)&v94;
  long long v94 = *(_OWORD *)(a3 + 96);
  uint64_t v95 = *(void *)(a3 + 112);
  cnrotation::CNRotation::RotationMatrix((cnrotation::CNRotation *)v101, (uint64_t)v89);
  cnrotation::CNRotation::dRotateVectordq(v101, (uint64_t)&v102, (uint64_t)v88);
  sub_18E07ABB8((uint64_t)v87, (uint64_t)v107);
  sub_18E0721E8((uint64_t)v86, (uint64_t)v107);
  sub_18E0713D0((uint64_t)&v77);
  sub_18DFE2F24(a5, (uint64_t)&v77);
  uint64_t v79 = 0x1A00000001;
  long long v77 = &unk_1EDD18168;
  double v80 = &v81;
  long long v78 = xmmword_18E1F8560;
  uint64_t v81 = 0x400000003;
  int v82 = 5;
  sub_18E058650((uint64_t)v85, (uint64_t)&v77);
  uint64_t v79 = 0x1A00000001;
  long long v77 = &unk_1EDD18168;
  double v80 = &v81;
  long long v78 = xmmword_18E1F8560;
  uint64_t v81 = 0x700000006;
  int v82 = 8;
  sub_18E058650((uint64_t)v84, (uint64_t)&v77);
  sub_18E01D450((uint64_t)&v90, (uint64_t)v89, (uint64_t)v83);
  sub_18E01D450((uint64_t)v83, (uint64_t)v87, (uint64_t)v76);
  sub_18E07AC48((uint64_t)&v77, a5, (uint64_t)v85);
  sub_18E07ACAC((uint64_t)&v77, (uint64_t)v76);
  sub_18E07AE84((uint64_t)v76, (uint64_t)&v90, (uint64_t)v88);
  sub_18E07ADF8((uint64_t)v83, (uint64_t)v76, (uint64_t)v86);
  sub_18E07AC48((uint64_t)&v77, a5, (uint64_t)v84);
  sub_18E07ACAC((uint64_t)&v77, (uint64_t)v83);
  *(void *)&long long v64 = 0x100000001;
  *((void *)&v64 + 1) = 0x100000001;
  *(_OWORD *)(a4 + 8) = v64;
  uint64_t v65 = DWORD2(v91);
  if (SDWORD2(v91) < 1)
  {
    double v67 = 0.0;
  }
  else
  {
    __double2 v66 = v93;
    double v67 = 0.0;
    int64x2_t v68 = v99;
    do
    {
      double v69 = *v66++;
      double v70 = v69;
      double v71 = *v68++;
      double v67 = v67 + v70 * v71;
      --v65;
    }
    while (v65);
  }
  **(double **)(a4 + 32) = v67 + **(double **)(a2 + 32);
  sub_18E07AF30((uint64_t)&v77);
  sub_18DFE2F24(a6, (uint64_t)&v77);
  return 0;
}

uint64_t sub_18E04A998(uint64_t a1, double *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v66[4] = *(void (**)(uint64_t))MEMORY[0x1E4F143B8];
  unsigned int v5 = *(_DWORD *)(a4 + 8);
  if ((v5 & 0x80000000) != 0) {
    __assert_rtn("Zeros", "cnmatrix.h", 3098, "nr >= 0");
  }
  uint64_t v62 = 0x100000003;
  double v57 = &unk_1EDD18D98;
  double v63 = &v64;
  unsigned int v58 = v5;
  unsigned int v59 = 1;
  unsigned int v60 = v5;
  unsigned int v61 = v5;
  int v11 = (cnprint::CNPrinter *)sub_18DFE2CC8((uint64_t)&v57, 0.0);
  if (!*(unsigned char *)a1)
  {
    if (cnprint::CNPrinter::GetLogLevel(v11) <= 1)
    {
      LOWORD(v66[0]) = 2;
      unsigned __int8 v65 = 1;
      double v54 = a2[1] + (double)*(uint64_t *)a2;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v66, &v65, "MeasurementAccumulator::AddMeasurement() failed - Not initialized,t_meas,%.3lf", v17, v18, v19, v20, v21, SLOBYTE(v54));
    }
    return 0xFFFFFFFFLL;
  }
  if (*(_DWORD *)(a1 + 5936) == 174)
  {
    LOWORD(v66[0]) = 2;
    unsigned __int8 v65 = 2;
    double v53 = a2[1] + (double)*(uint64_t *)a2;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v66, &v65, "MeasurementAccumulator::AddMeasurement() failed - Out of space,t_meas,%.3lf", v12, v13, v14, v15, v16, SLOBYTE(v53));
    return 0xFFFFFFFFLL;
  }
  if (*(unsigned char *)(a1 + 1))
  {
    if (cnprint::CNPrinter::GetLogLevel(v11) <= 1)
    {
      LOWORD(v66[0]) = 2;
      unsigned __int8 v65 = 1;
      double v55 = a2[1] + (double)*(uint64_t *)a2;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v66, &v65, "MeasurementAccumulator::AddMeasurement() failed - Locked,t_meas,%.3lf", v22, v23, v24, v25, v26, SLOBYTE(v55));
    }
    return 0xFFFFFFFFLL;
  }
  BOOL v27 = sub_18DEE4CB8(a2, (double *)(a1 + 8));
  if (v27)
  {
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v27) <= 1)
    {
      LOWORD(v66[0]) = 2;
      unsigned __int8 v65 = 1;
      double v56 = a2[1] + (double)*(uint64_t *)a2;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v66, &v65, "MeasurementAccumulator::AddMeasurement() failed - Measurement too old,t_meas,%.3lf,t_start,%.3lf", v28, v29, v30, v31, v32, SLOBYTE(v56));
    }
    return 0xFFFFFFFFLL;
  }
  v66[0] = 0;
  v66[1] = 0;
  sub_18E07B250(v66, a5);
  double v33 = sub_18E06C110((uint64_t *)(a1 + 40), v66);
  sub_18E067C60((uint64_t (**)(void, void, void, void, void))v66);
  uint64_t v34 = *(int *)(a1 + 5936);
  uint64_t v35 = (v34 + 1);
  if (*(void *)(a1 + 56) != v35)
  {
    LOWORD(v66[0]) = 2;
    unsigned __int8 v65 = 4;
    char v47 = (*(uint64_t (**)(uint64_t))(*(void *)a5 + 16))(a5);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v66, &v65, "MeasurementAccumulator::AddMeasurement() failed - allocation failed,meas_type,%d,t_meas,%.3lf", v48, v49, v50, v51, v52, v47);
    return 0xFFFFFFFFLL;
  }
  *(_DWORD *)(a1 + 5936) = v35;
  *(_DWORD *)(a1 + 72) = v35;
  *(_DWORD *)(a1 + 76) = 1;
  *(_DWORD *)(a1 + 80) = v35;
  *(_DWORD *)(a1 + 84) = v35;
  *(_DWORD *)(a1 + 2896) = v35;
  *(_DWORD *)(a1 + 2900) = 1;
  *(_DWORD *)(a1 + 2904) = v35;
  *(_DWORD *)(a1 + 2908) = v35;
  *(_DWORD *)(a1 + 3632) = v35;
  *(_DWORD *)(a1 + 3636) = 1;
  *(_DWORD *)(a1 + 3640) = v35;
  *(_DWORD *)(a1 + 3644) = v35;
  *(_DWORD *)(a1 + 5064) = v35;
  *(_DWORD *)(a1 + 5068) = 1;
  *(_DWORD *)(a1 + 5072) = v35;
  *(_DWORD *)(a1 + 5076) = v35;
  *(_DWORD *)(a1 + 5112) = v35;
  *(_DWORD *)(a1 + 5116) = 1;
  *(_DWORD *)(a1 + 5120) = v35;
  *(_DWORD *)(a1 + 5124) = v35;
  *(_DWORD *)(a1 + 5848) = v35;
  *(_DWORD *)(a1 + 5852) = 1;
  *(_DWORD *)(a1 + 5856) = v35;
  *(_DWORD *)(a1 + 5860) = v35;
  *(_DWORD *)(a1 + 5896) = v35;
  *(_DWORD *)(a1 + 5900) = 1;
  *(_DWORD *)(a1 + 5904) = v35;
  *(_DWORD *)(a1 + 5908) = v35;
  *(_DWORD *)(a1 + 5952) = v35;
  *(_DWORD *)(a1 + 5956) = 1;
  *(_DWORD *)(a1 + 5960) = v35;
  *(_DWORD *)(a1 + 5964) = v35;
  *(_DWORD *)(a1 + 7384) = v35;
  *(_DWORD *)(a1 + 7388) = 1;
  *(_DWORD *)(a1 + 7392) = v35;
  *(_DWORD *)(a1 + 7396) = v35;
  *(_OWORD *)(*(void *)(a1 + 96) + 16 * v34) = *(_OWORD *)a2;
  unsigned int v36 = *(_DWORD *)(a3 + 8);
  unsigned int v37 = *(_DWORD *)(a3 + 12);
  if (v36 <= v37) {
    int v38 = *(_DWORD *)(a3 + 12);
  }
  else {
    int v38 = *(_DWORD *)(a3 + 8);
  }
  if (v37) {
    BOOL v39 = v36 == 0;
  }
  else {
    BOOL v39 = 1;
  }
  if (v39) {
    int v40 = 0;
  }
  else {
    int v40 = v38;
  }
  *(_DWORD *)(*(void *)(a1 + 2920) + 4 * v34) = v40;
  sub_18DFE2F24(*(void *)(a1 + 5088) + (v34 << 6), a3);
  if (v58 <= v59) {
    unsigned int v41 = v59;
  }
  else {
    unsigned int v41 = v58;
  }
  if (v59) {
    BOOL v42 = v58 == 0;
  }
  else {
    BOOL v42 = 1;
  }
  if (v42) {
    unsigned int v43 = 0;
  }
  else {
    unsigned int v43 = v41;
  }
  *(_DWORD *)(*(void *)(a1 + 5136) + 4 * v34) = v43;
  sub_18DFE2F24(*(void *)(a1 + 5872) + (v34 << 6), (uint64_t)&v57);
  __n128 v44 = sub_18DFE2F24(*(void *)(a1 + 5920) + 112 * (int)v34, a4);
  *(void *)(*(void *)(a1 + 5976) + 8 * v34) = sub_18E04A214;
  uint64_t v45 = (uint64_t (*)(uint64_t, void *, void, void *, void *, __n128))*v33;
  if (*v33) {
    uint64_t v45 = (uint64_t (*)(uint64_t, void *, void, void *, void *, __n128))v45(3, v33, 0, &unk_1EDD061A0, &std::__any_imp::__unique_typeinfo<raven::h_NonHolonomicVelocityConstraintArgs_RavenPNT<double>>::__id, v44);
  }
  uint64_t result = 0;
  *(void *)(*(void *)(a1 + 7408) + 8 * v34) = v45;
  return result;
}

void sub_18E04ADC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (a2) {
    sub_18DEDD524(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_18E04ADF0(uint64_t a1)
{
  *(void *)a1 = &unk_1EDD0A4E8;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

uint64_t raven::RavenPNTEstimator::HandleEvent(raven::RavenPNTEstimator *this, const raven::PositionChangeEvent *a2)
{
  v87[4] = *(void (**)(uint64_t))MEMORY[0x1E4F143B8];
  if (!*((unsigned char *)this + 57)) {
    return 0xFFFFFFFFLL;
  }
  if (!*((unsigned char *)this + 58)) {
    return 0;
  }
  sub_18DFF2980((uint64_t)v77, (uint64_t)a2 + 200);
  __n128 v4 = sub_18DFE2FA8((uint64_t)v75, (uint64_t)a2 + 264);
  uint64_t v5 = (*(uint64_t (**)(const raven::PositionChangeEvent *, __n128))(*(void *)a2 + 16))(a2, v4);
  double v7 = v6;
  *(void *)&long long v74 = v5;
  *((double *)&v74 + 1) = v6;
  sub_18E06BF24(v65, 7);
  v65[0] = &unk_1EDD159D8;
  long long v67 = v74;
  int8x16_t v80 = *(int8x16_t *)((char *)a2 + 104);
  uint64_t v9 = CNTimeSpan::operator-((uint64_t)&v74, &v80, v80, v8);
  double v73 = v10 + (double)v9;
  int64x2_t v68 = (char *)this + 2696;
  double v69 = (char *)this + 14600;
  double v70 = (char *)this + 14616;
  double v71 = (char *)this + 2536;
  double v72 = (char *)this + 2576;
  if ((v76 & 0x80000000) != 0) {
    __assert_rtn("Zeros", "cnmatrix.h", 3098, "nr >= 0");
  }
  int v11 = (char *)this + 61288;
  uint64_t v83 = 0x100000003;
  v80.i64[0] = (uint64_t)&unk_1EDD18D98;
  uint64_t v84 = &v85;
  v80.i64[1] = v76 | 0x100000000;
  unsigned int v81 = v76;
  unsigned int v82 = v76;
  uint64_t v12 = (cnprint::CNPrinter *)sub_18DFE2CC8((uint64_t)&v80, 0.0);
  if (*((unsigned char *)this + 61288))
  {
    if (*((_DWORD *)this + 16806) == 174)
    {
      LOWORD(v87[0]) = 2;
      unsigned __int8 v86 = 2;
      double v61 = v7 + (double)v5;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v87, &v86, "MeasurementAccumulator::AddMeasurement() failed - Out of space,t_meas,%.3lf", v13, v14, v15, v16, v17, SLOBYTE(v61));
    }
    else if (*((unsigned char *)this + 61289))
    {
      if (cnprint::CNPrinter::GetLogLevel(v12) <= 1)
      {
        LOWORD(v87[0]) = 2;
        unsigned __int8 v86 = 1;
        double v63 = v7 + (double)v5;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v87, &v86, "MeasurementAccumulator::AddMeasurement() failed - Locked,t_meas,%.3lf", v24, v25, v26, v27, v28, SLOBYTE(v63));
      }
    }
    else
    {
      BOOL v29 = sub_18DEE4CB8((double *)&v74, (double *)this + 7662);
      if (v29)
      {
        if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v29) <= 1)
        {
          LOWORD(v87[0]) = 2;
          unsigned __int8 v86 = 1;
          double v64 = *((double *)&v74 + 1) + (double)(uint64_t)v74;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)v87, &v86, "MeasurementAccumulator::AddMeasurement() failed - Measurement too old,t_meas,%.3lf,t_start,%.3lf", v30, v31, v32, v33, v34, SLOBYTE(v64));
        }
      }
      else
      {
        v87[0] = 0;
        v87[1] = 0;
        sub_18E07B71C(v87, (uint64_t)v65);
        uint64_t v35 = sub_18E06C110((uint64_t *)this + 7666, v87);
        sub_18E067C60((uint64_t (**)(void, void, void, void, void))v87);
        uint64_t v36 = *((int *)this + 16806);
        uint64_t v37 = (v36 + 1);
        if (*((void *)this + 7668) == v37)
        {
          *((_DWORD *)this + 16806) = v37;
          *((_DWORD *)this + 15340) = v37;
          *((_DWORD *)this + 15341) = 1;
          *((_DWORD *)this + 15342) = v37;
          *((_DWORD *)this + 15343) = v37;
          *((_DWORD *)this + 16046) = v37;
          *((_DWORD *)this + 16047) = 1;
          *((_DWORD *)this + 16048) = v37;
          *((_DWORD *)this + 16049) = v37;
          *((_DWORD *)this + 16230) = v37;
          *((_DWORD *)this + 16231) = 1;
          *((_DWORD *)this + 16232) = v37;
          *((_DWORD *)this + 16233) = v37;
          *((_DWORD *)this + 16588) = v37;
          *((_DWORD *)this + 16589) = 1;
          *((_DWORD *)this + 16590) = v37;
          *((_DWORD *)this + 16591) = v37;
          *((_DWORD *)this + 16600) = v37;
          *((_DWORD *)this + 16601) = 1;
          *((_DWORD *)this + 16602) = v37;
          *((_DWORD *)this + 16603) = v37;
          *((_DWORD *)this + 16784) = v37;
          *((_DWORD *)this + 16785) = 1;
          *((_DWORD *)this + 16786) = v37;
          *((_DWORD *)this + 16787) = v37;
          *((_DWORD *)this + 16796) = v37;
          *((_DWORD *)this + 16797) = 1;
          *((_DWORD *)this + 16798) = v37;
          *((_DWORD *)this + 16799) = v37;
          *((_DWORD *)this + 16810) = v37;
          *((_DWORD *)this + 16811) = 1;
          *((_DWORD *)this + 16812) = v37;
          *((_DWORD *)this + 16813) = v37;
          *((_DWORD *)this + 17168) = v37;
          *((_DWORD *)this + 17169) = 1;
          *((_DWORD *)this + 17170) = v37;
          *((_DWORD *)this + 17171) = v37;
          *(_OWORD *)(*((void *)this + 7673) + 16 * v36) = v74;
          if (v78 <= v79) {
            unsigned int v38 = v79;
          }
          else {
            unsigned int v38 = v78;
          }
          if (v79) {
            BOOL v39 = v78 == 0;
          }
          else {
            BOOL v39 = 1;
          }
          if (v39) {
            unsigned int v40 = 0;
          }
          else {
            unsigned int v40 = v38;
          }
          *(_DWORD *)(*((void *)this + 8026) + 4 * v36) = v40;
          sub_18DFE2F24(*((void *)this + 8297) + (v36 << 6), (uint64_t)v77);
          if (v80.i32[2] <= (unsigned __int32)v80.i32[3]) {
            __int32 v41 = v80.i32[3];
          }
          else {
            __int32 v41 = v80.i32[2];
          }
          if (v80.i32[3]) {
            BOOL v42 = v80.i32[2] == 0;
          }
          else {
            BOOL v42 = 1;
          }
          if (v42) {
            __int32 v43 = 0;
          }
          else {
            __int32 v43 = v41;
          }
          *(_DWORD *)(*((void *)this + 8303) + 4 * v36) = v43;
          sub_18DFE2F24(*((void *)this + 8395) + (v36 << 6), (uint64_t)&v80);
          __n128 v44 = sub_18DFE2F24(*((void *)this + 8401) + 112 * (int)v36, (uint64_t)v75);
          *(void *)(*((void *)this + 8408) + 8 * v36) = sub_18E04B480;
          if (*v35) {
            uint64_t v45 = ((uint64_t (*)(uint64_t, void *, void, void *, void *, __n128))*v35)(3, v35, 0, &unk_1EDD05E60, &std::__any_imp::__unique_typeinfo<raven::h_DevicePositionChangeArgs_RavenPNT<double>>::__id, v44);
          }
          else {
            uint64_t v45 = 0;
          }
          uint64_t v18 = 0;
          *(void *)(*((void *)v11 + 926) + 8 * v36) = v45;
          goto LABEL_43;
        }
        LOWORD(v87[0]) = 2;
        unsigned __int8 v86 = 4;
        char v46 = (*(uint64_t (**)(void *))(v65[0] + 16))(v65);
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v87, &v86, "MeasurementAccumulator::AddMeasurement() failed - allocation failed,meas_type,%d,t_meas,%.3lf", v47, v48, v49, v50, v51, v46);
      }
    }
  }
  else if (cnprint::CNPrinter::GetLogLevel(v12) <= 1)
  {
    LOWORD(v87[0]) = 2;
    unsigned __int8 v86 = 1;
    double v62 = v7 + (double)v5;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v87, &v86, "MeasurementAccumulator::AddMeasurement() failed - Not initialized,t_meas,%.3lf", v19, v20, v21, v22, v23, SLOBYTE(v62));
  }
  LOWORD(v87[0]) = 12;
  unsigned __int8 v86 = 4;
  v80.i64[0] = (*(uint64_t (**)(const raven::PositionChangeEvent *))(*(void *)a2 + 16))(a2);
  v80.i64[1] = v52;
  char v53 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)&v80, "Could not add measurement - device position-change");
  if (*((char *)this + 2511) >= 0) {
    LOBYTE(v59) = v53;
  }
  else {
    uint64_t v59 = *((void *)this + 311);
  }
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)v87, &v86, "%s", v54, v55, v56, v57, v58, v59);
  uint64_t v18 = 0xFFFFFFFFLL;
LABEL_43:
  v65[0] = &unk_1EDD0A4E8;
  if (v66 < 0) {
    operator delete((void *)v65[2]);
  }
  return v18;
}

void sub_18E04B418(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a2) {
    sub_18DEDD524(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_18E04B480(uint64_t a1)
{
  MEMORY[0x1F4188790](a1);
  double v7 = v6;
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EB403B00, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EB403B00))
  {
    uint64_t v65 = 0x1300000001;
    double v63 = &unk_1EDD17E38;
    char v66 = &v67;
    long long v64 = xmmword_18E1FD720;
    for (uint64_t i = 10; i != 29; ++i)
      *((_DWORD *)&v63 + i) = i - 10;
    sub_18E05B858((uint64_t)&unk_1EB404450, (uint64_t)&v63);
    __cxa_atexit((void (*)(void *))sub_18E0600EC, &unk_1EB404450, &dword_18DEDB000);
    __cxa_guard_release(&qword_1EB403B00);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EB403B08, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EB403B08))
  {
    uint64_t v65 = 0x1A00000001;
    double v63 = &unk_1EDD18168;
    char v66 = &v67;
    long long v64 = xmmword_18E1FD710;
    for (uint64_t j = 10; j != 28; ++j)
      *((_DWORD *)&v63 + j) = j - 10;
    sub_18E058650((uint64_t)&unk_1E91C9748, (uint64_t)&v63);
    __cxa_atexit((void (*)(void *))sub_18E0576A8, &unk_1E91C9748, &dword_18DEDB000);
    __cxa_guard_release(&qword_1EB403B08);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EB403B10, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EB403B10))
  {
    uint64_t v65 = 0x1A00000001;
    double v63 = &unk_1EDD18168;
    char v66 = &v67;
    long long v64 = xmmword_18E1F8560;
    uint64_t v67 = 0x700000006;
    int v68 = 8;
    sub_18E058650((uint64_t)&unk_1E91C97D8, (uint64_t)&v63);
    __cxa_atexit((void (*)(void *))sub_18E0576A8, &unk_1E91C97D8, &dword_18DEDB000);
    __cxa_guard_release(&qword_1EB403B10);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EB403B18, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EB403B18))
  {
    uint64_t v65 = 0x1A00000001;
    double v63 = &unk_1EDD18168;
    char v66 = &v67;
    long long v64 = xmmword_18E1F8560;
    uint64_t v67 = 0x100000000;
    int v68 = 2;
    sub_18E058650((uint64_t)&unk_1E91C9868, (uint64_t)&v63);
    __cxa_atexit((void (*)(void *))sub_18E0576A8, &unk_1E91C9868, &dword_18DEDB000);
    __cxa_guard_release(&qword_1EB403B18);
  }
  if (!v7
    || (uint64_t v12 = (char *)__dynamic_cast(v7, (const struct __class_type_info *)&unk_1EDD02A78, (const struct __class_type_info *)&unk_1EDD05E60, 0)) == 0)
  {
    LOWORD(v63) = 12;
    v54[0] = 4;
    double v30 = MEMORY[0x30] + (double)MEMORY[0x28];
LABEL_26:
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v63, v54, "time,%.3lf,h-function failure on line %d: %s() %s", v1, v2, v3, v4, v5, SLOBYTE(v30));
    return 0xFFFFFFFFLL;
  }
  uint64_t v14 = v12;
  unsigned int v16 = *(_DWORD *)(v11 + 8);
  unsigned int v15 = *(_DWORD *)(v11 + 12);
  if (v16 <= v15) {
    int v17 = *(_DWORD *)(v11 + 12);
  }
  else {
    int v17 = *(_DWORD *)(v11 + 8);
  }
  if (!v16
    || !v15
    || v17 != 26
    || ((v19 = *(_DWORD *)(v9 + 8), unsigned int v18 = *(_DWORD *)(v9 + 12), v19 <= v18)
      ? (int v20 = *(_DWORD *)(v9 + 12))
      : (int v20 = *(_DWORD *)(v9 + 8)),
        !v19 || !v18 || v20 != 3))
  {
    LOWORD(v63) = 12;
    v54[0] = 4;
    double v30 = *((double *)v12 + 6) + (double)*((uint64_t *)v12 + 5);
    goto LABEL_26;
  }
  if (!*((void *)v12 + 7))
  {
    LOWORD(v63) = 12;
    v54[0] = 4;
    double v30 = *((double *)v12 + 6) + (double)*((uint64_t *)v12 + 5);
    goto LABEL_26;
  }
  v13.i64[0] = *((void *)v12 + 12);
  if ((v13.i64[0] & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || *(double *)v13.i64 <= 0.0)
  {
    LOWORD(v63) = 12;
    v54[0] = 4;
    double v30 = *((double *)v12 + 6) + (double)*((uint64_t *)v12 + 5);
    goto LABEL_26;
  }
  v96[0] = *(int8x16_t *)(v12 + 40);
  *(void *)&long long v64 = 0;
  double v63 = 0;
  CNTimeSpan::SetTimeSpan((uint64_t *)&v63, 0, v13, v96[0]);
  *(void *)&long long v95 = CNTimeSpan::operator-((uint64_t)v96, &v63, v21, v22);
  *((void *)&v95 + 1) = v23;
  uint64_t v24 = v14[9];
  long long v94 = *(_OWORD *)v14[8];
  sub_18E07FB20((uint64_t)&v92, v24);
  uint64_t v25 = v14[7];
  uint64_t v89 = 0x10000001CLL;
  long long v87 = &unk_1EDD188B8;
  long long v88 = xmmword_18E1FD730;
  uint64_t v90 = (double *)&v91;
  if (sub_18E06B85C((uint64_t)v96, (uint64_t)&v94, v93, v25, v14[11], (uint64_t)&v87))
  {
    sub_18E06B804((uint64_t)(v14 + 5), (uint64_t)"could not integrate full states", (uint64_t)"h_DevicePositionChange_RavenPNT", 2880, v26, v27, v28, v29);
  }
  else
  {
    sub_18E05985C((uint64_t)v86);
    sub_18E0818A4((uint64_t)&v63, (uint64_t)v86, (uint64_t)&unk_1EB404450);
    sub_18E06F000((uint64_t)&v63, SDWORD2(v88), v90);
    uint64_t v83 = 0x100000013;
    unsigned int v81 = &unk_1EDD17CB8;
    long long v82 = xmmword_18E1FD730;
    uint64_t v84 = (double *)&v85;
    v79[0] = vdupq_n_s64(0x7FF8000000000000uLL);
    v79[1] = v79[0];
    v79[2] = v79[0];
    v79[3] = v79[0];
    v79[4] = v79[0];
    v79[5] = v79[0];
    v79[6] = v79[0];
    v79[7] = v79[0];
    v79[8] = v79[0];
    v79[9] = v79[0];
    v79[10] = v79[0];
    v79[11] = v79[0];
    v79[12] = v79[0];
    v79[13] = v79[0];
    v79[14] = v79[0];
    v79[15] = v79[0];
    v79[16] = v79[0];
    v79[17] = v79[0];
    v79[18] = v79[0];
    v79[19] = v79[0];
    v79[20] = v79[0];
    v79[21] = v79[0];
    v79[22] = v79[0];
    v79[23] = v79[0];
    unsigned char v79[24] = v79[0];
    v79[25] = v79[0];
    v79[26] = v79[0];
    v79[27] = v79[0];
    v79[28] = v79[0];
    v79[29] = v79[0];
    v79[30] = v79[0];
    v79[31] = v79[0];
    unsigned char v79[32] = v79[0];
    v79[33] = v79[0];
    v79[34] = v79[0];
    uint64_t v80 = 0x7FF8000000000000;
    sub_18E06BA00((uint64_t)v86, v11, (uint64_t)&v81, (uint64_t)v79);
    double v32 = v84[6];
    double v33 = v84[7];
    double v34 = v84[8];
    double v35 = v84[9];
    double v36 = sqrt(v33 * v33 + v32 * v32 + v34 * v34 + v35 * v35);
    if (fabs(v36) >= 2.22044605e-16)
    {
      double v38 = v32 / v36;
      double v39 = v33 / v36;
      double v40 = v34 / v36;
      double v37 = v35 / v36;
    }
    else
    {
      double v37 = 1.0;
      double v38 = 0.0;
      double v39 = 0.0;
      double v40 = 0.0;
    }
    *(double *)unsigned int v78 = v38;
    *(double *)&v78[1] = v39;
    *(double *)&v78[2] = v40;
    *(double *)&v78[3] = v37;
    cnrotation::CNRotation::RotationMatrix((cnrotation::CNRotation *)v78, (uint64_t)&v77);
    uint64_t v74 = 0x10000001CLL;
    double v72 = &unk_1EDD188B8;
    long long v73 = xmmword_18E1FD730;
    uint64_t v75 = &v76;
    if (sub_18E06B85C((uint64_t)&v95, (uint64_t)&v94, v93, v25, v14[11], (uint64_t)&v72))
    {
      sub_18E06B804((uint64_t)(v14 + 5), (uint64_t)"could not integrate full states", (uint64_t)"h_DevicePositionChange_RavenPNT", 2915, v41, v42, v43, v44);
    }
    else
    {
      sub_18E0618EC((uint64_t)&v63);
      char v69 = 0;
      double v63 = &unk_1EDD14C50;
      long long v70 = 0u;
      long long v71 = 0u;
      sub_18E028F24((uint64_t)v62);
      if (sub_18E070DF0(v25, (uint64_t)v62))
      {
        uint64_t v49 = 2929;
        uint64_t v50 = "could not get integrator configuration";
      }
      else
      {
        if (!sub_18E02AA54((uint64_t)&v63, (uint64_t)v62))
        {
          v60[28] = &v63;
          v60[29] = v96;
          uint64_t v51 = v14[11];
          v60[30] = &v87;
          v60[31] = v51;
          long long v61 = v95;
          sub_18E070E60((uint64_t)v60, 15);
          uint64_t v57 = 0x10000001ALL;
          v55[6] = &unk_1EDD186A8;
          long long v56 = xmmword_18E1FD600;
          uint64_t v58 = &v59;
          sub_18E06E85C((uint64_t)v55);
        }
        uint64_t v49 = 2934;
        uint64_t v50 = "could not set integrator configuration";
      }
      sub_18E06B804((uint64_t)(v14 + 5), (uint64_t)v50, (uint64_t)"h_DevicePositionChange_RavenPNT", v49, v45, v46, v47, v48);
      sub_18E026798((uint64_t)&v63);
    }
  }
  return 0xFFFFFFFFLL;
}

void sub_18E04C234(_Unwind_Exception *a1)
{
}

uint64_t sub_18E04C334(uint64_t a1)
{
  *(void *)a1 = &unk_1EDD0A4E8;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

uint64_t raven::RavenPNTEstimator::HandleEvent(raven::RavenPNTEstimator *this, const raven::PositionEvent *a2)
{
  v106[14] = *(void (**)(uint64_t))MEMORY[0x1E4F143B8];
  if (!*((unsigned char *)this + 57)) {
    return 0xFFFFFFFFLL;
  }
  if (*((unsigned char *)this + 58)) {
    BOOL v4 = *((unsigned char *)a2 + 280) == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4) {
    return 0;
  }
  BOOL IsPositionMeasurementUsable = raven::RavenEstimator::IsPositionMeasurementUsable(this, (uint64_t)a2);
  if (!IsPositionMeasurementUsable)
  {
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)IsPositionMeasurementUsable) <= 1)
    {
      LOWORD(v94) = 12;
      LOBYTE(v106[0]) = 1;
      unsigned int v78 = (void *)(*(uint64_t (**)(const raven::PositionEvent *))(*(void *)a2 + 16))(a2);
      *(void *)&long long v79 = v16;
      cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)&v78, "WiFi position measurement not used in non-dense urban fitness case");
      if (*((char *)this + 2511) >= 0) {
        LOBYTE(v22) = (_BYTE)this - 72;
      }
      else {
        uint64_t v22 = *((void *)this + 311);
      }
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v94, (unsigned __int8 *)v106, "%s", v17, v18, v19, v20, v21, v22);
    }
    return 0;
  }
  if (*((unsigned char *)this + 2536) == 1)
  {
    unsigned int v8 = *((unsigned __int8 *)a2 + 200);
    if (v8 <= 0xB && ((1 << v8) & 0xC10) != 0 && raven::RavenPNTEstimator::IsUserStationary(this)) {
      return 0;
    }
  }
  uint64_t v102 = 0x100000003;
  uint64_t v100 = &unk_1EDD18D98;
  long long v101 = xmmword_18E1F6F60;
  long long v103 = &v104;
  long long v104 = *((_OWORD *)a2 + 18);
  uint64_t v105 = *((void *)a2 + 38);
  uint64_t v96 = 0x300000003;
  long long v94 = &unk_1EDD18EE8;
  long long v95 = xmmword_18E1F0010;
  long long v97 = v98;
  uint64_t v9 = *((void *)a2 + 40);
  uint64_t v10 = *((void *)a2 + 41);
  uint64_t v11 = *((void *)a2 + 42);
  v98[0] = *((void *)a2 + 39);
  v98[1] = v9;
  v98[2] = v10;
  v98[3] = v9;
  long long v12 = *(_OWORD *)((char *)a2 + 344);
  v98[4] = v11;
  v98[5] = v12;
  v98[6] = v10;
  long long v99 = v12;
  double v13 = *((double *)a2 + 14);
  uint64_t v75 = *((void *)a2 + 13);
  *(void *)&long long v93 = v75;
  *((double *)&v93 + 1) = v13;
  sub_18E06BF24(&v86, 6);
  unsigned __int8 v86 = (uint64_t (**)(void **))&unk_1EDD14F40;
  long long v89 = v93;
  *(void *)&long long v90 = (char *)this + 2696;
  *((void *)&v90 + 1) = (char *)this + 14600;
  *(void *)&long long v91 = (char *)this + 14616;
  *((void *)&v91 + 1) = (char *)this + 2536;
  uint64_t v92 = (char *)this + 2576;
  int v14 = *((unsigned __int8 *)a2 + 200);
  if (v14 == 14)
  {
    if (!*((unsigned char *)this + 58)) {
      goto LABEL_29;
    }
    if (sub_18E059BCC((uint64_t)this + 15032))
    {
      uint64_t v80 = 0x10000001CLL;
      unsigned int v78 = &unk_1EDD188B8;
      long long v79 = xmmword_18E1F6F60;
      unsigned int v81 = &v82;
      unsigned int v15 = (long long *)*((void *)this + 1831);
      long long v82 = *v15;
      *(void *)&long long v83 = *((void *)v15 + 2);
      sub_18E06EBD8((uint64_t)v77, 3, 3);
    }
    int v14 = *((unsigned __int8 *)a2 + 200);
  }
  if (v14 == 15)
  {
    sub_18E06BF24(&v78, 30);
    uint64_t v85 = 0;
    long long v84 = 0u;
    long long v83 = 0u;
    unsigned int v78 = &unk_1EDD14BA0;
    int v87 = v79;
    std::string::operator=(&v88, (const std::string *)((char *)&v79 + 8));
    long long v89 = v82;
    long long v90 = v83;
    long long v91 = v84;
    uint64_t v92 = v85;
    unsigned int v78 = &unk_1EDD0A4E8;
    if (SHIBYTE(v81) < 0) {
      operator delete(*((void **)&v79 + 1));
    }
    long long v89 = v93;
    *(void *)&long long v90 = (char *)this + 2696;
    *((void *)&v90 + 1) = (char *)this + 14600;
    *(void *)&long long v91 = (char *)this + 14616;
    *((void *)&v91 + 1) = (char *)this + 2536;
    uint64_t v92 = (char *)this + 2576;
  }
LABEL_29:
  if ((v95 & 0x80000000) != 0) {
    __assert_rtn("Zeros", "cnmatrix.h", 3098, "nr >= 0");
  }
  uint64_t v80 = 0x100000003;
  unsigned int v78 = &unk_1EDD18D98;
  unsigned int v81 = &v82;
  uint64_t v23 = (char *)this + 61288;
  *(void *)&long long v79 = v95 | 0x100000000;
  DWORD2(v79) = v95;
  HIDWORD(v79) = v95;
  uint64_t v24 = (cnprint::CNPrinter *)sub_18DFE2CC8((uint64_t)&v78, 0.0);
  if (*((unsigned char *)this + 61288))
  {
    if (*((_DWORD *)this + 16806) == 174)
    {
      LOWORD(v106[0]) = 2;
      v76[0] = 2;
      double v71 = v13 + (double)v75;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v106, v76, "MeasurementAccumulator::AddMeasurement() failed - Out of space,t_meas,%.3lf", v25, v26, v27, v28, v29, SLOBYTE(v71));
    }
    else if (*((unsigned char *)this + 61289))
    {
      if (cnprint::CNPrinter::GetLogLevel(v24) <= 1)
      {
        LOWORD(v106[0]) = 2;
        v76[0] = 1;
        double v73 = v13 + (double)v75;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v106, v76, "MeasurementAccumulator::AddMeasurement() failed - Locked,t_meas,%.3lf", v35, v36, v37, v38, v39, SLOBYTE(v73));
      }
    }
    else
    {
      BOOL v40 = sub_18DEE4CB8((double *)&v93, (double *)this + 7662);
      if (v40)
      {
        if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v40) <= 1)
        {
          LOWORD(v106[0]) = 2;
          v76[0] = 1;
          double v74 = *((double *)&v93 + 1) + (double)(uint64_t)v93;
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)v106, v76, "MeasurementAccumulator::AddMeasurement() failed - Measurement too old,t_meas,%.3lf,t_start,%.3lf", v41, v42, v43, v44, v45, SLOBYTE(v74));
        }
      }
      else
      {
        v106[0] = 0;
        v106[1] = 0;
        sub_18E07BA60(v106, (uint64_t)&v86);
        uint64_t v46 = sub_18E06C110((uint64_t *)this + 7666, v106);
        sub_18E067C60((uint64_t (**)(void, void, void, void, void))v106);
        uint64_t v47 = *((int *)this + 16806);
        uint64_t v48 = (v47 + 1);
        if (*((void *)this + 7668) == v48)
        {
          *((_DWORD *)this + 16806) = v48;
          *((_DWORD *)this + 15340) = v48;
          *((_DWORD *)this + 15341) = 1;
          *((_DWORD *)this + 15342) = v48;
          *((_DWORD *)this + 15343) = v48;
          *((_DWORD *)this + 16046) = v48;
          *((_DWORD *)this + 16047) = 1;
          *((_DWORD *)this + 16048) = v48;
          *((_DWORD *)this + 16049) = v48;
          *((_DWORD *)this + 16230) = v48;
          *((_DWORD *)this + 16231) = 1;
          *((_DWORD *)this + 16232) = v48;
          *((_DWORD *)this + 16233) = v48;
          *((_DWORD *)this + 16588) = v48;
          *((_DWORD *)this + 16589) = 1;
          *((_DWORD *)this + 16590) = v48;
          *((_DWORD *)this + 16591) = v48;
          *((_DWORD *)this + 16600) = v48;
          *((_DWORD *)this + 16601) = 1;
          *((_DWORD *)this + 16602) = v48;
          *((_DWORD *)this + 16603) = v48;
          *((_DWORD *)this + 16784) = v48;
          *((_DWORD *)this + 16785) = 1;
          *((_DWORD *)this + 16786) = v48;
          *((_DWORD *)this + 16787) = v48;
          *((_DWORD *)this + 16796) = v48;
          *((_DWORD *)this + 16797) = 1;
          *((_DWORD *)this + 16798) = v48;
          *((_DWORD *)this + 16799) = v48;
          *((_DWORD *)this + 16810) = v48;
          *((_DWORD *)this + 16811) = 1;
          *((_DWORD *)this + 16812) = v48;
          *((_DWORD *)this + 16813) = v48;
          *((_DWORD *)this + 17168) = v48;
          *((_DWORD *)this + 17169) = 1;
          *((_DWORD *)this + 17170) = v48;
          *((_DWORD *)this + 17171) = v48;
          *(_OWORD *)(*((void *)this + 7673) + 16 * v47) = v93;
          if (v101 <= DWORD1(v101)) {
            int v49 = DWORD1(v101);
          }
          else {
            int v49 = v101;
          }
          if (DWORD1(v101)) {
            BOOL v50 = v101 == 0;
          }
          else {
            BOOL v50 = 1;
          }
          if (v50) {
            int v51 = 0;
          }
          else {
            int v51 = v49;
          }
          *(_DWORD *)(*((void *)this + 8026) + 4 * v47) = v51;
          sub_18DFE2F24(*((void *)this + 8297) + (v47 << 6), (uint64_t)&v100);
          if (v79 <= DWORD1(v79)) {
            int v52 = DWORD1(v79);
          }
          else {
            int v52 = v79;
          }
          if (DWORD1(v79)) {
            BOOL v53 = v79 == 0;
          }
          else {
            BOOL v53 = 1;
          }
          if (v53) {
            int v54 = 0;
          }
          else {
            int v54 = v52;
          }
          *(_DWORD *)(*((void *)this + 8303) + 4 * v47) = v54;
          sub_18DFE2F24(*((void *)this + 8395) + (v47 << 6), (uint64_t)&v78);
          __n128 v55 = sub_18DFE2F24(*((void *)this + 8401) + 112 * (int)v47, (uint64_t)&v94);
          *(void *)(*((void *)this + 8408) + 8 * v47) = sub_18E04CF80;
          if (*v46) {
            uint64_t v56 = ((uint64_t (*)(uint64_t, void *, void, void *, void *, __n128))*v46)(3, v46, 0, &unk_1EDD05A10, &std::__any_imp::__unique_typeinfo<raven::h_DevicePositionArgs_RavenPNT<double>>::__id, v55);
          }
          else {
            uint64_t v56 = 0;
          }
          uint64_t v5 = 0;
          *(void *)(*((void *)v23 + 926) + 8 * v47) = v56;
          goto LABEL_67;
        }
        LOWORD(v106[0]) = 2;
        v76[0] = 4;
        char v57 = v86[2]((void **)&v86);
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v106, v76, "MeasurementAccumulator::AddMeasurement() failed - allocation failed,meas_type,%d,t_meas,%.3lf", v58, v59, v60, v61, v62, v57);
      }
    }
  }
  else if (cnprint::CNPrinter::GetLogLevel(v24) <= 1)
  {
    LOWORD(v106[0]) = 2;
    v76[0] = 1;
    double v72 = v13 + (double)v75;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v106, v76, "MeasurementAccumulator::AddMeasurement() failed - Not initialized,t_meas,%.3lf", v30, v31, v32, v33, v34, SLOBYTE(v72));
  }
  LOWORD(v106[0]) = 12;
  v76[0] = 4;
  unsigned int v78 = (void *)(*(uint64_t (**)(const raven::PositionEvent *))(*(void *)a2 + 16))(a2);
  *(void *)&long long v79 = v63;
  char v64 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)&v78, "Could not add measurement - position, src,%d", *((unsigned __int8 *)a2 + 200));
  if (*((char *)this + 2511) >= 0) {
    LOBYTE(v70) = v64;
  }
  else {
    uint64_t v70 = *((void *)this + 311);
  }
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)v106, v76, "%s", v65, v66, v67, v68, v69, v70);
  uint64_t v5 = 0xFFFFFFFFLL;
LABEL_67:
  unsigned __int8 v86 = (uint64_t (**)(void **))&unk_1EDD0A4E8;
  if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v88.__r_.__value_.__l.__data_);
  }
  return v5;
}

void sub_18E04CE78(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_18DEDD524(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_18E04CF80(uint64_t a1, uint64_t a2, void *lpsrc, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!lpsrc
    || (double v13 = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EDD02A78, (const struct __class_type_info *)&unk_1EDD05A10, 0)) == 0)
  {
    LOWORD(v33) = 12;
    v38.i8[0] = 4;
    double v23 = MEMORY[0x30] + (double)MEMORY[0x28];
    goto LABEL_20;
  }
  int v14 = v13;
  unsigned int v16 = *(_DWORD *)(a1 + 8);
  unsigned int v15 = *(_DWORD *)(a1 + 12);
  if (v16 <= v15) {
    int v17 = *(_DWORD *)(a1 + 12);
  }
  else {
    int v17 = *(_DWORD *)(a1 + 8);
  }
  if (!v16
    || !v15
    || v17 != 26
    || ((v19 = *(_DWORD *)(a2 + 8), unsigned int v18 = *(_DWORD *)(a2 + 12), v19 <= v18)
      ? (int v20 = *(_DWORD *)(a2 + 12))
      : (int v20 = *(_DWORD *)(a2 + 8)),
        !v19 || !v18 || v20 != 3))
  {
    LOWORD(v33) = 12;
    v38.i8[0] = 4;
    double v23 = *((double *)v13 + 6) + (double)*((uint64_t *)v13 + 5);
    goto LABEL_20;
  }
  if (!*((void *)v13 + 7))
  {
    LOWORD(v33) = 12;
    v38.i8[0] = 4;
    double v23 = *((double *)v13 + 6) + (double)*((uint64_t *)v13 + 5);
    goto LABEL_20;
  }
  long long v87 = *(_OWORD *)(v13 + 40);
  uint64_t v21 = *((void *)v13 + 9);
  long long v86 = *(_OWORD *)*((void *)v13 + 8);
  sub_18E07FB20((uint64_t)v84, v21);
  uint64_t v22 = *((void *)v14 + 7);
  uint64_t v81 = 0x10000001CLL;
  long long v80 = xmmword_18E1FD5F0;
  long long v79 = &unk_1EDD188B8;
  long long v82 = &v83;
  if (sub_18E06B85C((uint64_t)&v87, (uint64_t)&v86, v85, v22, *((void *)v14 + 11), (uint64_t)&v79))
  {
    LOWORD(v33) = 12;
    v38.i8[0] = 4;
    double v23 = *((double *)v14 + 6) + (double)*((uint64_t *)v14 + 5);
LABEL_20:
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v33, (unsigned __int8 *)&v38, "time,%.3lf,h-function failure on line %d: %s() %s", a4, a5, a6, a7, a8, SLOBYTE(v23));
    return 0xFFFFFFFFLL;
  }
  long long v80 = xmmword_18E1FD5F0;
  uint64_t v76 = 0x10000001CLL;
  double v74 = &unk_1EDD188B8;
  long long v75 = xmmword_18E1FD5F0;
  uint64_t v77 = (double *)&v78;
  int64x2_t v38 = vdupq_n_s64(0x7FF8000000000000uLL);
  int64x2_t v39 = v38;
  int64x2_t v40 = v38;
  int64x2_t v41 = v38;
  int64x2_t v42 = v38;
  int64x2_t v43 = v38;
  int64x2_t v44 = v38;
  int64x2_t v45 = v38;
  int64x2_t v46 = v38;
  int64x2_t v47 = v38;
  int64x2_t v48 = v38;
  int64x2_t v49 = v38;
  int64x2_t v50 = v38;
  int64x2_t v51 = v38;
  int64x2_t v52 = v38;
  int64x2_t v53 = v38;
  int64x2_t v54 = v38;
  int64x2_t v55 = v38;
  int64x2_t v56 = v38;
  int64x2_t v57 = v38;
  int64x2_t v58 = v38;
  int64x2_t v59 = v38;
  int64x2_t v60 = v38;
  int64x2_t v61 = v38;
  int64x2_t v62 = v38;
  int64x2_t v63 = v38;
  int64x2_t v64 = v38;
  int64x2_t v65 = v38;
  int64x2_t v66 = v38;
  int64x2_t v67 = v38;
  int64x2_t v68 = v38;
  int64x2_t v69 = v38;
  int64x2_t v70 = v38;
  int64x2_t v71 = v38;
  int64x2_t v72 = v38;
  uint64_t v73 = 0x7FF8000000000000;
  sub_18E06BA00((uint64_t)&v79, a1, (uint64_t)&v74, (uint64_t)&v38);
  *(_OWORD *)(a4 + 8) = xmmword_18E1F6F60;
  uint64_t v25 = v77;
  uint64_t v26 = *(double **)(a2 + 32);
  uint64_t v27 = *(double **)(a4 + 32);
  *uint64_t v27 = *v77 + *v26;
  v27[1] = v25[1] + v26[1];
  v27[2] = v25[2] + v26[2];
  uint64_t v35 = 0x1A00000003;
  uint64_t v33 = &unk_1EDD18E58;
  uint64_t v36 = v37;
  long long v34 = xmmword_18E1FD670;
  sub_18DFE2CC8((uint64_t)&v33, 0.0);
  sub_18DFE2F24(a5, (uint64_t)&v33);
  uint64_t v28 = *(void **)(a5 + 32);
  uint64_t v29 = v38.i64[1];
  *uint64_t v28 = v38.i64[0];
  int v30 = *(_DWORD *)(a5 + 20);
  v28[v30 + 1] = v29;
  v28[2 * v30 + 2] = v39.i64[0];
  uint64_t v35 = 0x300000003;
  uint64_t v33 = &unk_1EDD18EE8;
  uint64_t v36 = v37;
  long long v34 = xmmword_18E1F0010;
  sub_18DFE2CC8((uint64_t)&v33, 0.0);
  int v31 = HIDWORD(v34) + 1;
  uint64_t v32 = v36;
  *uint64_t v36 = 0x3FF0000000000000;
  v32[v31] = 0x3FF0000000000000;
  v32[2 * v31] = 0x3FF0000000000000;
  sub_18DFE2F24(a6, (uint64_t)&v33);
  return 0;
}

void raven::RavenPNTEstimator::InflatePositionUncertainty(raven::RavenPNTEstimator *this, double a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EB403A18, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EB403A18))
  {
    uint64_t v21 = 0x300000001;
    unsigned int v19 = &unk_1EDD18258;
    uint64_t v22 = &v23;
    long long v20 = xmmword_18E1F8560;
    uint64_t v23 = 0x100000000;
    int v24 = 2;
    sub_18DFEC63C((uint64_t)&v19, (uint64_t)v11);
    uint64_t v14 = 0x300000001;
    long long v12 = &unk_1EDD18258;
    unsigned int v15 = &v16;
    long long v13 = xmmword_18E1F8560;
    uint64_t v16 = 0x1500000014;
    int v17 = 22;
    sub_18DFEC63C((uint64_t)&v12, (uint64_t)v18);
    sub_18E058DF8((uint64_t)&unk_1EB404050, (uint64_t)v11, (uint64_t)v18);
    __cxa_atexit((void (*)(void *))sub_18E058E84, &unk_1EB404050, &dword_18DEDB000);
    __cxa_guard_release(&qword_1EB403A18);
  }
  sub_18E07EFE4((uint64_t)v11, (uint64_t)&unk_1EB404050);
  sub_18DEDE7B0(&v19, "InflatePositionUncertainty");
  raven::RavenPNTEstimator::InflateUncertainties((uint64_t)this, (uint64_t)v11, a2);
  if (SHIBYTE(v20) < 0) {
    operator delete(v19);
  }
  LOWORD(v19) = 12;
  v18[0] = 2;
  v11[0] = *((_OWORD *)this + 5);
  char v4 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)v11, "Inflating estimator variance of position error states,factor,%.2lf", a2);
  if (*((char *)this + 2511) >= 0) {
    LOBYTE(v10) = v4;
  }
  else {
    uint64_t v10 = *((void *)this + 311);
  }
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v19, v18, "%s", v5, v6, v7, v8, v9, v10);
}

void sub_18E04D5E8(_Unwind_Exception *a1)
{
}

uint64_t sub_18E04D628(uint64_t a1)
{
  *(void *)a1 = &unk_1EDD0A4E8;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

uint64_t sub_18E04D678(uint64_t a1)
{
  *(void *)a1 = &unk_1EDD0A4E8;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

uint64_t sub_18E04D6C8(uint64_t a1)
{
  *(void *)a1 = &unk_1EDD0A4E8;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

uint64_t raven::RavenPNTEstimator::HandleEvent(raven::RavenPNTEstimator *this, const raven::RateGyroEvent *a2)
{
  if (*((unsigned char *)this + 57))
  {
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    uint64_t v16 = &unk_1EDD14240;
    int64x2_t v19 = vdupq_n_s64(0x7FF8000000000000uLL);
    uint64_t v20 = 0x7FF8000000000000;
    uint64_t v17 = (*(uint64_t (**)(const raven::RateGyroEvent *))(*(void *)a2 + 16))(a2);
    uint64_t v18 = v4;
    int64x2_t v19 = *(int64x2_t *)((char *)a2 + 104);
    uint64_t v20 = *((void *)a2 + 15);
    uint64_t result = sub_18E04D850((uint64_t)this + 44440, (uint64_t)&v16);
    if (!result) {
      return result;
    }
    __int16 v15 = 12;
    unsigned __int8 v14 = 4;
    v13[0] = (*(uint64_t (**)(const raven::RateGyroEvent *))(*(void *)a2 + 16))(a2);
    v13[1] = v6;
    cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)v13, "Could not add measurement - rotation rates");
    if (*((char *)this + 2511) >= 0) {
      LOBYTE(v12) = (_BYTE)this - 72;
    }
    else {
      uint64_t v12 = *((void *)this + 311);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v15, &v14, "%s", v7, v8, v9, v10, v11, v12);
  }
  return 0xFFFFFFFFLL;
}

uint64_t sub_18E04D850(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a1 + 8);
  if (!v4)
  {
    *(_DWORD *)(a1 + 8) = 1;
    *(void *)(a1 + 40) = 0;
    long long v20 = *(_OWORD *)(a2 + 8);
    long long v21 = *(_OWORD *)(a2 + 24);
    *(void *)(a1 + 88) = *(void *)(a2 + 40);
    *(_OWORD *)(a1 + 72) = v21;
    *(_OWORD *)(a1 + 56) = v20;
    goto LABEL_34;
  }
  if (v4 == 350 && sub_18E07BC4C(a1)) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
  double v8 = v6;
  unsigned int v9 = *(_DWORD *)(a1 + 44);
  if (v7) {
    BOOL v10 = 1;
  }
  else {
    BOOL v10 = (*(void *)&v6 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
  }
  char v11 = v10;
  while (1)
  {
    unsigned int v12 = v9;
    uint64_t v13 = (*(uint64_t (**)(void))(*(void *)(a1 + 48 * v9 + 48) + 16))();
    if (v11)
    {
      BOOL v15 = v13 || (*(void *)&v14 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
      if (v15 && v7 != v13) {
        break;
      }
    }
    if (v8 >= v14) {
      goto LABEL_28;
    }
LABEL_21:
    uint64_t v16 = a1 + 48 + 48 * ((v12 + 1) % 0x15E);
    uint64_t v17 = a1 + 48 + 48 * v12;
    long long v18 = *(_OWORD *)(v17 + 8);
    long long v19 = *(_OWORD *)(v17 + 24);
    *(void *)(v16 + 40) = *(void *)(v17 + 40);
    *(_OWORD *)(v16 + 24) = v19;
    *(_OWORD *)(v16 + 8) = v18;
    if (v12 == *(_DWORD *)(a1 + 40))
    {
      uint64_t v22 = v17 + 8;
      goto LABEL_29;
    }
    unsigned int v9 = v12 - 1;
    if (!v12) {
      unsigned int v9 = 349;
    }
    if (v9 == *(_DWORD *)(a1 + 44)) {
      goto LABEL_30;
    }
  }
  if (v7 < v13) {
    goto LABEL_21;
  }
LABEL_28:
  uint64_t v22 = a1 + 48 * ((v12 + 1) % 0x15E) + 56;
LABEL_29:
  long long v23 = *(_OWORD *)(a2 + 8);
  long long v24 = *(_OWORD *)(a2 + 24);
  *(void *)(v22 + 32) = *(void *)(a2 + 40);
  *(_OWORD *)uint64_t v22 = v23;
  *(_OWORD *)(v22 + 16) = v24;
  unsigned int v9 = *(_DWORD *)(a1 + 44);
LABEL_30:
  ++*(_DWORD *)(a1 + 8);
  if (v9 == 349) {
    unsigned int v25 = 0;
  }
  else {
    unsigned int v25 = v9 + 1;
  }
  *(_DWORD *)(a1 + 44) = v25;
LABEL_34:
  sub_18E07BC94(a1);
  return 0;
}

uint64_t raven::RavenPNTEstimator::HandleEvent(uint64_t a1, unsigned char *a2)
{
  if (!*(unsigned char *)(a1 + 57)) {
    return 0xFFFFFFFFLL;
  }
  if (a2[209] != 2 || a2[208] == 0) {
    return 0;
  }
  if (!a2[1464] || a2[1544] == 0) {
    return 0;
  }
  int v4 = (unsigned char *)(a1 + 19664);
  if (*(unsigned char *)(a1 + 19664))
  {
    memcpy((void *)(a1 + 19680), a2 + 8, 0x971uLL);
    return 0;
  }
  *(void *)(a1 + 19672) = &unk_1EDD14150;
  memcpy((void *)(a1 + 19680), a2 + 8, 0x971uLL);
  uint64_t result = 0;
  *int v4 = 1;
  return result;
}

uint64_t sub_18E04DB38(uint64_t a1, uint64_t a2, void *lpsrc, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!lpsrc
    || (uint64_t v13 = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EDD02A78, (const struct __class_type_info *)&unk_1EDD055F8, 0)) == 0)
  {
    *(_WORD *)int64x2_t v53 = 12;
    v76[0] = 4;
    double v23 = MEMORY[0x30] + (double)MEMORY[0x28];
LABEL_21:
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v53, v76, "time,%.3lf,h-function failure on line %d: %s() %s", a4, a5, a6, a7, a8, SLOBYTE(v23));
    return 0xFFFFFFFFLL;
  }
  double v14 = v13;
  unsigned int v16 = *(_DWORD *)(a1 + 8);
  unsigned int v15 = *(_DWORD *)(a1 + 12);
  if (v16 <= v15) {
    int v17 = *(_DWORD *)(a1 + 12);
  }
  else {
    int v17 = *(_DWORD *)(a1 + 8);
  }
  if (!v16
    || !v15
    || v17 != 26
    || ((v19 = *(_DWORD *)(a2 + 8), unsigned int v18 = *(_DWORD *)(a2 + 12), v19 <= v18)
      ? (int v20 = *(_DWORD *)(a2 + 12))
      : (int v20 = *(_DWORD *)(a2 + 8)),
        !v19 || !v18 || v20 != 1))
  {
    *(_WORD *)int64x2_t v53 = 12;
    v76[0] = 4;
    double v23 = *((double *)v13 + 6) + (double)*((uint64_t *)v13 + 5);
    goto LABEL_21;
  }
  long long v78 = *(_OWORD *)(v13 + 40);
  uint64_t v21 = *((void *)v13 + 9);
  long long v77 = *(_OWORD *)*((void *)v13 + 8);
  sub_18E07FB20((uint64_t)v76, v21);
  int v22 = **((unsigned __int8 **)v14 + 10);
  uint64_t v73 = 0x10000001CLL;
  long long v72 = xmmword_18E1FD5F0;
  int64x2_t v71 = &unk_1EDD188B8;
  double v74 = &v75;
  if (v22)
  {
    if (v22 == 1)
    {
      if (sub_18E0786E0((uint64_t)&v78, &v77, (uint64_t)v76, *((void *)v14 + 7), *((void *)v14 + 11), 1, 1, 1, (uint64_t)&v71))
      {
        *(_WORD *)int64x2_t v53 = 12;
        LOBYTE(v48) = 4;
        double v46 = *((double *)v14 + 6) + (double)*((uint64_t *)v14 + 5);
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v53, (unsigned __int8 *)&v48, "time,%.3lf,h-function failure on line %d: %s() %s", v30, v31, v32, v33, v34, SLOBYTE(v46));
        return 0xFFFFFFFFLL;
      }
    }
    else if (v22 == 2)
    {
      __assert_rtn("h_UserSpeed_RavenPNT", "ravenmeasurementfunctions.h", 6935, "false && \"Unexpected case RavenPNTEstimatorStateParameterization::ParameterizationCount\"");
    }
  }
  else
  {
    uint64_t v50 = 0x100000007;
    int64x2_t v48 = &unk_1EDD197E8;
    long long v49 = xmmword_18E1FD680;
    int64x2_t v51 = (double *)v52;
    if (sub_18E06C3A8((uint64_t)&v78, &v77, (uint64_t)v76, 0, (uint64_t)&v48))
    {
      *(_WORD *)int64x2_t v53 = 12;
      LOBYTE(v66) = 4;
      double v45 = *((double *)v14 + 6) + (double)*((uint64_t *)v14 + 5);
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v53, (unsigned __int8 *)&v66, "time,%.3lf,h-function failure on line %d: %s() %s", v25, v26, v27, v28, v29, SLOBYTE(v45));
      return 0xFFFFFFFFLL;
    }
    *(void *)&unsigned __int8 v53[24] = 0x700000001;
    *(void *)int64x2_t v53 = &unk_1EDD183A8;
    *(void *)&v54[0] = (char *)v54 + 8;
    *(_OWORD *)&v53[8] = xmmword_18E1FD690;
    for (uint64_t i = 10; i != 17; ++i)
      *(_DWORD *)&v53[4 * i] = i + 11;
    sub_18E05B904((uint64_t)&v66, (uint64_t)v53);
    sub_18E06CE44((uint64_t)v53, (uint64_t)&v71, (uint64_t)&v66);
    sub_18E06C83C((uint64_t)v53, SDWORD2(v49), v51);
  }
  uint64_t v68 = 0x100000007;
  long long v67 = xmmword_18E1FD680;
  int64x2_t v66 = &unk_1EDD197E8;
  int64x2_t v69 = (double *)&v70;
  *(int64x2_t *)int64x2_t v53 = vdupq_n_s64(0x7FF8000000000000uLL);
  *(_OWORD *)&v53[16] = *(_OWORD *)v53;
  v54[0] = *(_OWORD *)v53;
  v54[1] = *(_OWORD *)v53;
  v54[2] = *(_OWORD *)v53;
  v54[3] = *(_OWORD *)v53;
  v54[4] = *(_OWORD *)v53;
  v54[5] = *(_OWORD *)v53;
  v54[6] = *(_OWORD *)v53;
  v54[7] = *(_OWORD *)v53;
  v54[8] = *(_OWORD *)v53;
  v54[9] = *(_OWORD *)v53;
  v54[10] = *(_OWORD *)v53;
  v54[11] = *(_OWORD *)v53;
  v54[12] = *(_OWORD *)v53;
  v54[13] = *(_OWORD *)v53;
  v54[14] = *(_OWORD *)v53;
  v54[15] = *(_OWORD *)v53;
  v54[16] = *(_OWORD *)v53;
  v54[17] = *(_OWORD *)v53;
  v54[18] = *(_OWORD *)v53;
  v54[19] = *(_OWORD *)v53;
  v54[20] = *(_OWORD *)v53;
  v54[21] = *(_OWORD *)v53;
  v54[22] = *(_OWORD *)v53;
  long long v55 = *(_OWORD *)v53;
  long long v56 = *(_OWORD *)v53;
  long long v57 = *(_OWORD *)v53;
  long long v58 = *(_OWORD *)v53;
  long long v59 = *(_OWORD *)v53;
  long long v60 = *(_OWORD *)v53;
  long long v61 = *(_OWORD *)v53;
  long long v62 = *(_OWORD *)v53;
  long long v63 = *(_OWORD *)v53;
  long long v64 = *(_OWORD *)v53;
  uint64_t v65 = 0x7FF8000000000000;
  LOBYTE(v48) = 0;
  if (!sub_18E06F128((uint64_t)&v71, a1, v22, (uint64_t)&v66, (uint64_t)v53, (BOOL *)&v48, 0.000000015))
  {
    *(void *)&long long v41 = 0x100000001;
    *((void *)&v41 + 1) = 0x100000001;
    *(_OWORD *)(a4 + 8) = v41;
    **(double **)(a4 + 32) = v69[3] + **(double **)(a2 + 32);
    uint64_t v50 = 0x1A00000001;
    int64x2_t v48 = &unk_1EDD18138;
    int64x2_t v51 = (double *)v52;
    long long v49 = xmmword_18E1FD7C0;
    sub_18DFE2CC8((uint64_t)&v48, 0.0);
    sub_18DFE2F24(a5, (uint64_t)&v48);
    int v42 = *(_DWORD *)(a5 + 20);
    uint64_t v43 = *(void *)(a5 + 32);
    *(void *)(v43 + 184 * v42) = v55;
    *(void *)(v43 + 192 * v42) = *((void *)&v55 + 1);
    *(void *)(v43 + 200 * v42) = v56;
    uint64_t v50 = 0x100000001;
    int64x2_t v48 = &unk_1EDD18048;
    int64x2_t v51 = (double *)v52;
    *(void *)&long long v44 = 0x100000001;
    *((void *)&v44 + 1) = 0x100000001;
    long long v49 = v44;
    sub_18DFE2CC8((uint64_t)&v48, 0.0);
    *int64x2_t v51 = 1.0;
    sub_18DFE2F24(a6, (uint64_t)&v48);
    return 0;
  }
  LOWORD(v48) = 12;
  unsigned __int8 v79 = 4;
  double v47 = *((double *)v14 + 6) + (double)*((uint64_t *)v14 + 5);
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v48, &v79, "time,%.3lf,h-function failure on line %d: %s() %s", v36, v37, v38, v39, v40, SLOBYTE(v47));
  return 0xFFFFFFFFLL;
}

uint64_t sub_18E04E124(uint64_t a1, double *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v68[4] = *(void (**)(uint64_t))MEMORY[0x1E4F143B8];
  unsigned int v6 = *(_DWORD *)(a4 + 8);
  if ((v6 & 0x80000000) != 0) {
    __assert_rtn("Zeros", "cnmatrix.h", 3098, "nr >= 0");
  }
  uint64_t v64 = 0x100000003;
  long long v59 = &unk_1EDD18D98;
  uint64_t v65 = &v66;
  unsigned int v60 = v6;
  unsigned int v61 = 1;
  unsigned int v62 = v6;
  unsigned int v63 = v6;
  uint64_t v13 = (cnprint::CNPrinter *)sub_18DFE2CC8((uint64_t)&v59, 0.0);
  if (!*(unsigned char *)a1)
  {
    if (cnprint::CNPrinter::GetLogLevel(v13) <= 1)
    {
      LOWORD(v68[0]) = 2;
      unsigned __int8 v67 = 1;
      double v56 = a2[1] + (double)*(uint64_t *)a2;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v68, &v67, "MeasurementAccumulator::AddMeasurement() failed - Not initialized,t_meas,%.3lf", v19, v20, v21, v22, v23, SLOBYTE(v56));
    }
    return 0xFFFFFFFFLL;
  }
  if (*(_DWORD *)(a1 + 5936) == 174)
  {
    LOWORD(v68[0]) = 2;
    unsigned __int8 v67 = 2;
    double v55 = a2[1] + (double)*(uint64_t *)a2;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v68, &v67, "MeasurementAccumulator::AddMeasurement() failed - Out of space,t_meas,%.3lf", v14, v15, v16, v17, v18, SLOBYTE(v55));
    return 0xFFFFFFFFLL;
  }
  if (*(unsigned char *)(a1 + 1))
  {
    if (cnprint::CNPrinter::GetLogLevel(v13) <= 1)
    {
      LOWORD(v68[0]) = 2;
      unsigned __int8 v67 = 1;
      double v57 = a2[1] + (double)*(uint64_t *)a2;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v68, &v67, "MeasurementAccumulator::AddMeasurement() failed - Locked,t_meas,%.3lf", v24, v25, v26, v27, v28, SLOBYTE(v57));
    }
    return 0xFFFFFFFFLL;
  }
  BOOL v29 = sub_18DEE4CB8(a2, (double *)(a1 + 8));
  if (v29)
  {
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v29) <= 1)
    {
      LOWORD(v68[0]) = 2;
      unsigned __int8 v67 = 1;
      double v58 = a2[1] + (double)*(uint64_t *)a2;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v68, &v67, "MeasurementAccumulator::AddMeasurement() failed - Measurement too old,t_meas,%.3lf,t_start,%.3lf", v30, v31, v32, v33, v34, SLOBYTE(v58));
    }
    return 0xFFFFFFFFLL;
  }
  v68[0] = 0;
  v68[1] = 0;
  sub_18E07BDF4(v68, a6);
  uint64_t v35 = sub_18E06C110((uint64_t *)(a1 + 40), v68);
  sub_18E067C60((uint64_t (**)(void, void, void, void, void))v68);
  uint64_t v36 = *(int *)(a1 + 5936);
  uint64_t v37 = (v36 + 1);
  if (*(void *)(a1 + 56) != v37)
  {
    LOWORD(v68[0]) = 2;
    unsigned __int8 v67 = 4;
    char v49 = (*(uint64_t (**)(uint64_t))(*(void *)a6 + 16))(a6);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v68, &v67, "MeasurementAccumulator::AddMeasurement() failed - allocation failed,meas_type,%d,t_meas,%.3lf", v50, v51, v52, v53, v54, v49);
    return 0xFFFFFFFFLL;
  }
  *(_DWORD *)(a1 + 5936) = v37;
  *(_DWORD *)(a1 + 72) = v37;
  *(_DWORD *)(a1 + 76) = 1;
  *(_DWORD *)(a1 + 80) = v37;
  *(_DWORD *)(a1 + 84) = v37;
  *(_DWORD *)(a1 + 2896) = v37;
  *(_DWORD *)(a1 + 2900) = 1;
  *(_DWORD *)(a1 + 2904) = v37;
  *(_DWORD *)(a1 + 2908) = v37;
  *(_DWORD *)(a1 + 3632) = v37;
  *(_DWORD *)(a1 + 3636) = 1;
  *(_DWORD *)(a1 + 3640) = v37;
  *(_DWORD *)(a1 + 3644) = v37;
  *(_DWORD *)(a1 + 5064) = v37;
  *(_DWORD *)(a1 + 5068) = 1;
  *(_DWORD *)(a1 + 5072) = v37;
  *(_DWORD *)(a1 + 5076) = v37;
  *(_DWORD *)(a1 + 5112) = v37;
  *(_DWORD *)(a1 + 5116) = 1;
  *(_DWORD *)(a1 + 5120) = v37;
  *(_DWORD *)(a1 + 5124) = v37;
  *(_DWORD *)(a1 + 5848) = v37;
  *(_DWORD *)(a1 + 5852) = 1;
  *(_DWORD *)(a1 + 5856) = v37;
  *(_DWORD *)(a1 + 5860) = v37;
  *(_DWORD *)(a1 + 5896) = v37;
  *(_DWORD *)(a1 + 5900) = 1;
  *(_DWORD *)(a1 + 5904) = v37;
  *(_DWORD *)(a1 + 5908) = v37;
  *(_DWORD *)(a1 + 5952) = v37;
  *(_DWORD *)(a1 + 5956) = 1;
  *(_DWORD *)(a1 + 5960) = v37;
  *(_DWORD *)(a1 + 5964) = v37;
  *(_DWORD *)(a1 + 7384) = v37;
  *(_DWORD *)(a1 + 7388) = 1;
  *(_DWORD *)(a1 + 7392) = v37;
  *(_DWORD *)(a1 + 7396) = v37;
  *(_OWORD *)(*(void *)(a1 + 96) + 16 * v36) = *(_OWORD *)a2;
  unsigned int v38 = *(_DWORD *)(a3 + 8);
  unsigned int v39 = *(_DWORD *)(a3 + 12);
  if (v38 <= v39) {
    int v40 = *(_DWORD *)(a3 + 12);
  }
  else {
    int v40 = *(_DWORD *)(a3 + 8);
  }
  if (v39) {
    BOOL v41 = v38 == 0;
  }
  else {
    BOOL v41 = 1;
  }
  if (v41) {
    int v42 = 0;
  }
  else {
    int v42 = v40;
  }
  *(_DWORD *)(*(void *)(a1 + 2920) + 4 * v36) = v42;
  sub_18DFE2F24(*(void *)(a1 + 5088) + (v36 << 6), a3);
  if (v60 <= v61) {
    unsigned int v43 = v61;
  }
  else {
    unsigned int v43 = v60;
  }
  if (v61) {
    BOOL v44 = v60 == 0;
  }
  else {
    BOOL v44 = 1;
  }
  if (v44) {
    unsigned int v45 = 0;
  }
  else {
    unsigned int v45 = v43;
  }
  *(_DWORD *)(*(void *)(a1 + 5136) + 4 * v36) = v45;
  sub_18DFE2F24(*(void *)(a1 + 5872) + (v36 << 6), (uint64_t)&v59);
  __n128 v46 = sub_18DFE2F24(*(void *)(a1 + 5920) + 112 * (int)v36, a4);
  *(void *)(*(void *)(a1 + 5976) + 8 * v36) = a5;
  double v47 = (uint64_t (*)(uint64_t, void *, void, void *, void *, __n128))*v35;
  if (*v35) {
    double v47 = (uint64_t (*)(uint64_t, void *, void, void *, void *, __n128))v47(3, v35, 0, &unk_1EDD055F8, &std::__any_imp::__unique_typeinfo<raven::h_UserSpeedArgs_RavenPNT<double>>::__id, v46);
  }
  uint64_t result = 0;
  *(void *)(*(void *)(a1 + 7408) + 8 * v36) = v47;
  return result;
}

void sub_18E04E548(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (a2) {
    sub_18DEDD524(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_18E04E574(uint64_t a1)
{
  *(void *)a1 = &unk_1EDD0A4E8;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

uint64_t raven::RavenPNTEstimator::HandleTimeMarkEvent(raven::RavenPNTEstimator *this, const raven::TimeMarkEvent *a2)
{
  uint64_t v424 = *MEMORY[0x1E4F143B8];
  long long v2 = *(_OWORD *)((char *)a2 + 8);
  *(_OWORD *)((char *)this + 152) = *(_OWORD *)((char *)a2 + 24);
  *(_OWORD *)((char *)this + 136) = v2;
  long long v3 = *(_OWORD *)((char *)a2 + 40);
  long long v4 = *(_OWORD *)((char *)a2 + 56);
  long long v5 = *(_OWORD *)((char *)a2 + 72);
  *(_OWORD *)((char *)this + 216) = *(_OWORD *)((char *)a2 + 88);
  *(_OWORD *)((char *)this + 200) = v5;
  *(_OWORD *)((char *)this + 184) = v4;
  *(_OWORD *)((char *)this + 168) = v3;
  if (!*((unsigned char *)this + 57)) {
    return 32;
  }
  if (*((unsigned char *)this + 58))
  {
    uint64_t v8 = 0;
    goto LABEL_4;
  }
  __p[0] = (void *)(*(uint64_t (**)(const raven::TimeMarkEvent *))(*(void *)a2 + 16))(a2);
  __p[1] = v24;
  raven::RavenPNTEstimator::GetInitializationArgs((uint64_t)this, (int8x16_t *)__p, v409, v25);
  if (!v420) {
    return 0;
  }
  if (raven::RavenPNTEstimator::Initialize((uint64_t)this, (__n128 *)v409))
  {
    LOWORD(v399) = 12;
    LOBYTE(v377) = 4;
    __p[0] = (void *)(*(uint64_t (**)(const raven::TimeMarkEvent *))(*(void *)a2 + 16))(a2);
    __p[1] = v26;
    char v27 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)__p, "Failed to initialize");
    if (*((char *)this + 2511) >= 0) {
      LOBYTE(v33) = v27;
    }
    else {
      uint64_t v33 = *((void *)this + 311);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v399, (unsigned __int8 *)&v377, "%s", v28, v29, v30, v31, v32, v33);
    char v34 = 0;
    uint64_t v8 = 32;
  }
  else
  {
    if (!*((unsigned char *)this + 19432)) {
      __assert_rtn("operator->", "optional.hpp", 1222, "this->is_initialized()");
    }
    if (!*((unsigned char *)this + 19656))
    {
      raven::RavenPNTEstimator::InflateDevicePositionUncertainty(this, *(double *)(*((void *)this + 146) + 1440));
      raven::RavenPNTEstimator::InflateDeviceVelocityUncertainty(this, *(double *)(*((void *)this + 146) + 1448));
      if (raven::RavenPNTEstimator::UpdateFullStateEstimate(this))
      {
        LOWORD(v399) = 12;
        LOBYTE(v377) = 4;
        __p[0] = (void *)(*(uint64_t (**)(const raven::TimeMarkEvent *))(*(void *)a2 + 16))(a2);
        __p[1] = v60;
        char v61 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)__p, "Could not update full states upon receipt of unreliable attitude event");
        if (*((char *)this + 2511) >= 0) {
          LOBYTE(v67) = v61;
        }
        else {
          uint64_t v67 = *((void *)this + 311);
        }
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v399, (unsigned __int8 *)&v377, "%s", v62, v63, v64, v65, v66, v67);
        raven::RavenPNTEstimator::Reset(this);
      }
    }
    LOWORD(v377) = 12;
    v421.i8[0] = 3;
    v399 = (void *)(*(uint64_t (**)(const raven::TimeMarkEvent *))(*(void *)a2 + 16))(a2);
    *(void *)&long long v400 = v45;
    sub_18DEDE7B0(__p, off_1E55B9A50[v419]);
    if (SHIBYTE(v340) >= 0) {
      __n128 v46 = __p;
    }
    else {
      __n128 v46 = (void **)__p[0];
    }
    char v47 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)&v399, "Estimator initialized from %s solution with validity time %.3lf", (const char *)v46, *(double *)&v409[8] + (double)*(uint64_t *)v409);
    if (*((char *)this + 2511) >= 0) {
      LOBYTE(v53) = v47;
    }
    else {
      uint64_t v53 = *((void *)this + 311);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v377, (unsigned __int8 *)&v421, "%s", v48, v49, v50, v51, v52, v53);
    if (SHIBYTE(v340) < 0) {
      operator delete(__p[0]);
    }
    uint64_t v8 = 0;
    char v34 = 1;
  }
  if (v420) {
    sub_18E06B5D4(v418);
  }
  if (v34)
  {
LABEL_4:
    uint64_t v379 = 0x100000003;
    v377 = &unk_1EDD18D98;
    v380 = (double *)&v381;
    long long v378 = xmmword_18E1F6F60;
    sub_18DFE2CC8((uint64_t)&v377, 0.0);
    v410.i64[0] = 0x300000003;
    *(void *)v409 = &unk_1EDD18EE8;
    v410.i64[1] = (uint64_t)&v411;
    *(_OWORD *)&v409[8] = xmmword_18E1F0010;
    sub_18DFE2CC8((uint64_t)v409, 0.0);
    uint64_t v9 = 72;
    if (*((unsigned char *)this + 2536) == 1) {
      uint64_t v9 = 1368;
    }
    double v10 = *(double *)(*((void *)this + 146) + v9) * *(double *)(*((void *)this + 146) + v9);
    uint64_t v11 = v410.i64[1];
    *(double *)v410.i64[1] = v10;
    int v12 = *(_DWORD *)&v409[20];
    *(double *)(v11 + 8 * (*(_DWORD *)&v409[20] + 1)) = v10;
    *(double *)(v11 + 8 * (2 * v12 + 2)) = v10;
    sub_18E06BF24(__p, 8);
    long long v346 = 0;
    long long v345 = 0u;
    long long v344 = 0u;
    __p[0] = &unk_1EDD16038;
    uint64_t v13 = (char *)this + 2536;
    uint64_t v342 = (*(uint64_t (**)(const raven::TimeMarkEvent *))(*(void *)a2 + 16))(a2);
    uint64_t v343 = v14;
    *(void *)&long long v344 = (char *)this + 2696;
    *((void *)&v344 + 1) = (char *)this + 14600;
    *(void *)&long long v345 = (char *)this + 14616;
    *((void *)&v345 + 1) = (char *)this + 2536;
    uint64_t v15 = (char *)this + 2576;
    long long v346 = (char *)this + 2576;
    *(void *)&v376[0] = (*(uint64_t (**)(const raven::TimeMarkEvent *))(*(void *)a2 + 16))(a2);
    v376[1] = v16;
    if (*((unsigned char *)this + 2536) != 1
      || (uint64_t v17 = (double *)*((void *)this + 1831),
          sqrt(v17[22] * v17[22] + v17[21] * v17[21] + v17[23] * v17[23]) > *(double *)(*((void *)this + 146) + 1360))
      && !raven::RavenPNTEstimator::IsUserStationary(this))
    {
      if ((*(_DWORD *)&v409[8] & 0x80000000) != 0) {
        __assert_rtn("Zeros", "cnmatrix.h", 3098, "nr >= 0");
      }
      uint64_t v401 = 0x100000003;
      v399 = &unk_1EDD18D98;
      v402 = (double *)v403;
      *(void *)&long long v400 = *(unsigned int *)&v409[8] | 0x100000000;
      DWORD2(v400) = *(_DWORD *)&v409[8];
      HIDWORD(v400) = *(_DWORD *)&v409[8];
      uint64_t v18 = (cnprint::CNPrinter *)sub_18DFE2CC8((uint64_t)&v399, 0.0);
      if (!*((unsigned char *)this + 61288))
      {
        if (cnprint::CNPrinter::GetLogLevel(v18) <= 1)
        {
          v421.i16[0] = 2;
          v347[0] = 1;
          double v331 = v376[1] + (double)*(uint64_t *)&v376[0];
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v421, v347, "MeasurementAccumulator::AddMeasurement() failed - Not initialized,t_meas,%.3lf", v35, v36, v37, v38, v39, SLOBYTE(v331));
        }
        goto LABEL_71;
      }
      if (*((_DWORD *)this + 16806) == 174)
      {
        v421.i16[0] = 2;
        v347[0] = 2;
        double v330 = v376[1] + (double)*(uint64_t *)&v376[0];
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v421, v347, "MeasurementAccumulator::AddMeasurement() failed - Out of space,t_meas,%.3lf", v19, v20, v21, v22, v23, SLOBYTE(v330));
LABEL_71:
        v421.i16[0] = 12;
        v347[0] = 4;
        v399 = (void *)(*(uint64_t (**)(const raven::TimeMarkEvent *))(*(void *)a2 + 16))(a2);
        *(void *)&long long v400 = v85;
        char v86 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)&v399, "Could not add measurement - device-to-user position");
        if (*((char *)this + 2511) >= 0) {
          LOBYTE(v92) = v86;
        }
        else {
          uint64_t v92 = *((void *)this + 311);
        }
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v421, v347, "%s", v87, v88, v89, v90, v91, v92);
        goto LABEL_75;
      }
      if (*((unsigned char *)this + 61289))
      {
        if (cnprint::CNPrinter::GetLogLevel(v18) <= 1)
        {
          v421.i16[0] = 2;
          v347[0] = 1;
          double v332 = v376[1] + (double)*(uint64_t *)&v376[0];
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v421, v347, "MeasurementAccumulator::AddMeasurement() failed - Locked,t_meas,%.3lf", v40, v41, v42, v43, v44, SLOBYTE(v332));
        }
        goto LABEL_71;
      }
      BOOL v54 = sub_18DEE4CB8(v376, (double *)this + 7662);
      if (v54)
      {
        if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v54) <= 1)
        {
          v421.i16[0] = 2;
          v347[0] = 1;
          double v333 = v376[1] + (double)*(uint64_t *)&v376[0];
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v421, v347, "MeasurementAccumulator::AddMeasurement() failed - Measurement too old,t_meas,%.3lf,t_start,%.3lf", v55, v56, v57, v58, v59, SLOBYTE(v333));
        }
        goto LABEL_71;
      }
      int8x16_t v421 = 0uLL;
      sub_18E07C050(&v421, (uint64_t)__p);
      uint64_t v68 = sub_18E06C110((uint64_t *)this + 7666, (void (**)(uint64_t))&v421);
      sub_18E067C60(&v421);
      uint64_t v69 = *((int *)this + 16806);
      uint64_t v70 = (v69 + 1);
      if (*((void *)this + 7668) != v70)
      {
        v421.i16[0] = 2;
        v347[0] = 4;
        char v79 = (*((uint64_t (**)(void **))__p[0] + 2))(__p);
        uint64_t v15 = (char *)this + 2576;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v421, v347, "MeasurementAccumulator::AddMeasurement() failed - allocation failed,meas_type,%d,t_meas,%.3lf", v80, v81, v82, v83, v84, v79);
        goto LABEL_71;
      }
      *((_DWORD *)this + 16806) = v70;
      *((_DWORD *)this + 15340) = v70;
      *((_DWORD *)this + 15341) = 1;
      *((_DWORD *)this + 15342) = v70;
      *((_DWORD *)this + 15343) = v70;
      *((_DWORD *)this + 16046) = v70;
      *((_DWORD *)this + 16047) = 1;
      *((_DWORD *)this + 16048) = v70;
      *((_DWORD *)this + 16049) = v70;
      *((_DWORD *)this + 16230) = v70;
      *((_DWORD *)this + 16231) = 1;
      *((_DWORD *)this + 16232) = v70;
      *((_DWORD *)this + 16233) = v70;
      *((_DWORD *)this + 16588) = v70;
      *((_DWORD *)this + 16589) = 1;
      *((_DWORD *)this + 16590) = v70;
      *((_DWORD *)this + 16591) = v70;
      *((_DWORD *)this + 16600) = v70;
      *((_DWORD *)this + 16601) = 1;
      *((_DWORD *)this + 16602) = v70;
      *((_DWORD *)this + 16603) = v70;
      *((_DWORD *)this + 16784) = v70;
      *((_DWORD *)this + 16785) = 1;
      *((_DWORD *)this + 16786) = v70;
      *((_DWORD *)this + 16787) = v70;
      *((_DWORD *)this + 16796) = v70;
      *((_DWORD *)this + 16797) = 1;
      *((_DWORD *)this + 16798) = v70;
      *((_DWORD *)this + 16799) = v70;
      *((_DWORD *)this + 16810) = v70;
      *((_DWORD *)this + 16811) = 1;
      *((_DWORD *)this + 16812) = v70;
      *((_DWORD *)this + 16813) = v70;
      *((_DWORD *)this + 17168) = v70;
      *((_DWORD *)this + 17169) = 1;
      *((_DWORD *)this + 17170) = v70;
      *((_DWORD *)this + 17171) = v70;
      *(_OWORD *)(*((void *)this + 7673) + 16 * v69) = *(_OWORD *)v376;
      if (v378 <= DWORD1(v378)) {
        int v71 = DWORD1(v378);
      }
      else {
        int v71 = v378;
      }
      if (DWORD1(v378)) {
        BOOL v72 = v378 == 0;
      }
      else {
        BOOL v72 = 1;
      }
      if (v72) {
        int v73 = 0;
      }
      else {
        int v73 = v71;
      }
      *(_DWORD *)(*((void *)this + 8026) + 4 * v69) = v73;
      sub_18DFE2F24(*((void *)this + 8297) + (v69 << 6), (uint64_t)&v377);
      if (v400 <= DWORD1(v400)) {
        int v74 = DWORD1(v400);
      }
      else {
        int v74 = v400;
      }
      if (DWORD1(v400)) {
        BOOL v75 = v400 == 0;
      }
      else {
        BOOL v75 = 1;
      }
      if (v75) {
        int v76 = 0;
      }
      else {
        int v76 = v74;
      }
      *(_DWORD *)(*((void *)this + 8303) + 4 * v69) = v76;
      sub_18DFE2F24(*((void *)this + 8395) + (v69 << 6), (uint64_t)&v399);
      __n128 v77 = sub_18DFE2F24(*((void *)this + 8401) + 112 * (int)v69, (uint64_t)v409);
      *(void *)(*((void *)this + 8408) + 8 * v69) = sub_18E051104;
      if (*v68) {
        uint64_t v78 = ((uint64_t (*)(uint64_t, void *, void, void *, void *, __n128))*v68)(3, v68, 0, &unk_1EDD060F8, &std::__any_imp::__unique_typeinfo<raven::h_DeviceUserPositionDifferenceArgs_RavenPNT<double>>::__id, v77);
      }
      else {
        uint64_t v78 = 0;
      }
      *(void *)(*((void *)this + 8587) + 8 * v69) = v78;
      uint64_t v15 = (char *)this + 2576;
    }
LABEL_75:
    __p[0] = &unk_1EDD0A4E8;
    if (SHIBYTE(v341) < 0) {
      operator delete(v340);
    }
    if (*((unsigned char *)this + 1624))
    {
      unsigned int v93 = *((unsigned __int8 *)this + 1736);
      if ((v93 > 3 || v93 == 1) && *((unsigned char *)this + 1208) && ((*((unsigned char *)this + 1320) - 4) & 0xFA) == 0)
      {
        *(void *)v409 = (*(uint64_t (**)(const raven::TimeMarkEvent *))(*(void *)a2 + 16))(a2);
        *(void *)&v409[8] = v134;
        *(_OWORD *)uint64_t __p = *((_OWORD *)this + 5);
        uint64_t v136 = CNTimeSpan::operator-((uint64_t)v409, __p, *(int8x16_t *)__p, v135);
        double v334 = v137;
        uint64_t v335 = v136;
        uint64_t v406 = 0x100000003;
        uint64_t v404 = (uint64_t)&unk_1EDD18D98;
        v407 = (double *)&v408;
        long long v405 = xmmword_18E1F6F60;
        sub_18DFE2CC8((uint64_t)&v404, 0.0);
        uint64_t v401 = 0x300000003;
        v399 = &unk_1EDD18EE8;
        v402 = (double *)v403;
        long long v400 = xmmword_18E1F0010;
        sub_18DFE2CC8((uint64_t)&v399, 0.0);
        if (!*((unsigned char *)this + 1208)) {
          __assert_rtn("operator->", "optional.hpp", 1222, "this->is_initialized()");
        }
        if (*((unsigned char *)this + 1320) != 5
          || !*((unsigned char *)this + 2368)
          || *((unsigned __int8 *)this + 2480) - 3 > 1)
        {
          goto LABEL_120;
        }
        if (*v13 == 1) {
          goto LABEL_131;
        }
        if (raven::RavenPNTEstimator::IsUserStationary(this))
        {
LABEL_120:
          int v140 = *v13;
          std::string v336 = sub_18E053DA4;
          if (!*v13)
          {
            double v150 = *(double *)(*((void *)this + 1831) + 192);
            double MaximumComfortableTurningRate = raven::RavenPNTEstimator::GetMaximumComfortableTurningRate(this, v138, v139);
            uint64_t v152 = *((void *)this + 146);
            double v153 = *(double *)(v152 + 304) / fmax(fabs(v150), 0.000000015);
            if (v153 < MaximumComfortableTurningRate) {
              double MaximumComfortableTurningRate = v153;
            }
            double v154 = MaximumComfortableTurningRate
                 * *(double *)(v152 + 72)
                 * (MaximumComfortableTurningRate
                  * *(double *)(v152 + 72));
            uint64_t v155 = v402;
            double *v402 = v154;
            int v156 = HIDWORD(v400);
            v155[HIDWORD(v400) + 1] = v154;
            v155[2 * v156 + 2] = v154;
LABEL_181:
            std::string v336 = sub_18E053DA4;
LABEL_182:
            int v219 = 1;
            goto LABEL_183;
          }
          if (v140 != 1)
          {
            if (v140 == 2) {
              __assert_rtn("HandleTimeMarkEvent", "ravenpntestimator.cpp", 4378, "false && \"Unexpected case RavenPNTEstimatorStateParameterization::ParameterizationCount\"");
            }
            goto LABEL_182;
          }
LABEL_131:
          if (*((unsigned char *)this + 1776)) {
            BOOL v149 = *((unsigned __int8 *)this + 1888) - 3 < 0xFFFFFFFE;
          }
          else {
            BOOL v149 = 1;
          }
          BOOL v337 = v149;
          uint64_t v394 = 0x100000003;
          long long v393 = xmmword_18E1F6F60;
          v392 = &unk_1EDD18D98;
          v395 = &v396;
          uint64_t v157 = *((void *)this + 1831);
          double v396 = *(double *)(v157 + 24);
          unint64_t v397 = *(void *)(v157 + 32);
          unint64_t v398 = *(void *)(v157 + 40);
          double v158 = *(double *)(v157 + 48);
          double v159 = *(double *)(v157 + 56);
          double v160 = *(double *)(v157 + 64);
          double v161 = *(double *)(v157 + 72);
          double v162 = sqrt(v159 * v159 + v158 * v158 + v160 * v160 + v161 * v161);
          double v163 = 1.0;
          double v164 = 0.0;
          double v165 = 0.0;
          double v166 = 0.0;
          double v167 = 0.0;
          double v168 = 1.0;
          if (fabs(v162) >= 2.22044605e-16)
          {
            double v165 = v158 / v162;
            double v166 = v159 / v162;
            double v167 = v160 / v162;
            double v168 = v161 / v162;
          }
          *(double *)v375 = v165;
          *(double *)&v375[1] = v166;
          *(double *)&v375[2] = v167;
          *(double *)&v375[3] = v168;
          double v169 = sqrt(v166 * v166 + v165 * v165 + v167 * v167 + v168 * v168);
          double v170 = 0.0;
          double v171 = 0.0;
          if (fabs(v169) >= 2.22044605e-16)
          {
            double v164 = -v165 / v169;
            double v170 = -v166 / v169;
            double v171 = -v167 / v169;
            double v163 = v168 / v169;
          }
          *(double *)v374 = v164;
          *(double *)&v374[1] = v170;
          *(double *)&v374[2] = v171;
          *(double *)&v374[3] = v163;
          cnrotation::CNRotation::RotationMatrix((cnrotation::CNRotation *)v375, (uint64_t)v409);
          cnrotation::CNRotation::RotationMatrix((cnrotation::CNRotation *)v374, (uint64_t)__p);
          uint64_t v388 = 0x100000003;
          long long v387 = xmmword_18E1F6F60;
          v386 = &unk_1EDD18D98;
          v389 = (double *)&v390;
          uint64_t v172 = *((void *)this + 1831);
          long long v390 = *(_OWORD *)(v172 + 200);
          v173.f64[1] = *((float64_t *)&v390 + 1);
          uint64_t v391 = *(void *)(v172 + 216);
          v173.f64[0] = *(float64_t *)(v172 + 192);
          sub_18E053C38((uint64_t)&v386, (uint64_t)v383, v173);
          sub_18DFEB188(3, 1, (uint64_t)v370);
          v367[0] = &unk_1EDD14240;
          v367[1] = 0;
          int64x2_t v368 = vdupq_n_s64(0x7FF8000000000000uLL);
          v367[2] = 0;
          uint64_t v369 = 0x7FF8000000000000;
          v377 = (void *)(*(uint64_t (**)(const raven::TimeMarkEvent *))(*(void *)a2 + 16))(a2);
          *(void *)&long long v378 = v174;
          if (!sub_18E02C2AC((uint64_t)this + 44440, (double *)&v377, (uint64_t)v367, v175, v176))
          {
            uint64_t v177 = v372.i64[1];
            *(int64x2_t *)v372.i64[1] = v368;
            *(void *)(v177 + 16) = v369;
          }
          uint64_t v363 = 0x100000003;
          long long v362 = xmmword_18E1F6F60;
          v361 = &unk_1EDD18D98;
          v364 = (double *)&v365;
          uint64_t v178 = *((void *)this + 1831);
          long long v365 = *(_OWORD *)(v178 + 168);
          uint64_t v366 = *(void *)(v178 + 184);
          sub_18E0300B4((uint64_t)v409, (uint64_t)&v392, (uint64_t)v360);
          sub_18E030138((uint64_t)v370, (uint64_t)&v361, (uint64_t)v359);
          sub_18E053CBC((uint64_t)v383, (uint64_t)v359, (uint64_t)v358);
          sub_18E01E318((uint64_t)v360, (uint64_t)v359, (uint64_t)v355);
          sub_18E01E318((uint64_t)v360, (uint64_t)v358, (uint64_t)v354);
          sub_18E053D40((uint64_t)v352, (uint64_t)v354);
          uint64_t v179 = (double *)*((void *)this + 146);
          uint64_t v180 = v371;
          double v181 = 0.0;
          double v182 = 0.0;
          if ((int)v371 >= 1)
          {
            uint64_t v183 = (double *)v372.i64[1];
            do
            {
              double v184 = *v183++;
              double v182 = v182 + v184 * v184;
              --v180;
            }
            while (v180);
          }
          uint64_t v185 = DWORD2(v362);
          if (SDWORD2(v362) >= 1)
          {
            double v181 = 0.0;
            uint64_t v186 = v364;
            do
            {
              double v187 = *v186++;
              double v181 = v181 + v187 * v187;
              --v185;
            }
            while (v185);
          }
          double v188 = v179[45] * v179[45]
               + v179[46]
               * *(double *)(*((void *)this + 1831) + 192)
               * (v179[46]
                * *(double *)(*((void *)this + 1831) + 192))
               + v182 * v181;
          if (v188 <= v179[47] * v179[47]) {
            double v188 = v179[47] * v179[47];
          }
          double v189 = v188;
          sub_18DFEB238(3, 3, (uint64_t)&v377);
          uint64_t v190 = v353;
          uint64_t v191 = v380;
          double *v380 = *v353 * *v353;
          uint64_t v192 = SHIDWORD(v378);
          uint64_t v193 = SHIDWORD(v378) + 1;
          v191[v193] = v190[1] * v190[1];
          double v194 = v190[2] * v190[2];
          uint64_t v195 = 2 * v192 + 2;
          v191[v195] = v194;
          double v196 = *v191;
          if (*v191 <= v189) {
            double v196 = v189;
          }
          double *v191 = v196;
          double v197 = v191[v193];
          if (v197 <= v189) {
            double v197 = v189;
          }
          v191[v193] = v197;
          double v198 = v191[v195];
          if (v198 <= v189) {
            double v198 = v189;
          }
          v191[v195] = v198;
          sub_18DFF6360((uint64_t)__p, (uint64_t)&v377, (uint64_t)v376);
          sub_18DFF63E0((uint64_t)__p, (uint64_t)v347);
          sub_18DFF6360((uint64_t)v376, (uint64_t)v347, (uint64_t)&v421);
          sub_18DFE2F24((uint64_t)&v399, (uint64_t)&v421);
          sub_18E03017C((uint64_t)v355);
          double v199 = v202.f64[0];
          double v200 = *(double *)(*((void *)this + 1831) + 192);
          double v201 = vabdd_f64(v202.f64[0], v200);
          v202.f64[0] = (v201 + v201) * (v201 / fmax(v202.f64[0], 0.5)) * 10.0;
          double v203 = 0.1;
          if (v202.f64[0] >= 0.1) {
            double v203 = v202.f64[0];
          }
          if (v202.f64[0] <= 10.0) {
            double v204 = v203;
          }
          else {
            double v204 = 10.0;
          }
          *((double *)this + 320) = v204;
          uint64_t v205 = v356;
          if (v356 < 1)
          {
            v202.f64[0] = 0.0;
          }
          else
          {
            uint64_t v206 = v357;
            v202.f64[0] = 0.0;
            uint64_t v207 = v389;
            do
            {
              double v208 = *v206++;
              double v209 = v208;
              double v210 = *v207++;
              v202.f64[0] = v202.f64[0] + v209 * v210;
              --v205;
            }
            while (v205);
          }
          sub_18E053C38((uint64_t)&v386, (uint64_t)v376, v202);
          sub_18E01E318((uint64_t)v355, (uint64_t)v376, (uint64_t)&v421);
          sub_18E03017C((uint64_t)&v421);
          double v212 = v211;
          double v213 = fmax(v199, 0.625);
          double v214 = fmax(v199, 20.0);
          if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EB4039E8, memory_order_acquire) & 1) == 0)
          {
            long long v328 = (cnstatistics *)__cxa_guard_acquire(&qword_1EB4039E8);
            if (v328)
            {
              cnstatistics::InverseGamma(v328, 0.95, 0.5, 2.0);
              qword_1EB4039E0 = v329;
              __cxa_guard_release(&qword_1EB4039E8);
            }
          }
          if (!v337)
          {
            *(void *)&long long v217 = 0x100000001;
            *((void *)&v217 + 1) = 0x100000001;
            long long v405 = v217;
            if (!*((unsigned char *)this + 1776) || (double v218 = 0.0, *((unsigned __int8 *)this + 1888) - 1 >= 2)) {
              double v218 = v199;
            }
            int v219 = 0;
            double *v407 = v218;
            long long v400 = v217;
            double *v402 = fmax((v218 - v200) * (v218 - v200), 1.0);
            std::string v336 = sub_18E04DB38;
LABEL_183:
            sub_18E07D4C8(v409);
            v415.i32[2] = 0;
            if (v219)
            {
              sub_18E07D4C8(__p);
              sub_18E07D540((uint64_t)v409, (uint64_t)v409, (uint64_t)__p);
              sub_18E05546C((uint64_t)__p);
              if (v415.i32[2]) {
                sub_18E069054();
              }
              v411.i64[0] = (*(uint64_t (**)(const raven::TimeMarkEvent *))(*(void *)a2 + 16))(a2);
              v411.i64[1] = v220;
              v412.i64[0] = (uint64_t)this + 2696;
              v412.i64[1] = (uint64_t)this + 14600;
              v413.i64[0] = (uint64_t)this + 14616;
              v413.i64[1] = (uint64_t)this + 2536;
              *(void *)&v414[0] = v15;
              __p[0] = (void *)(*(uint64_t (**)(const raven::TimeMarkEvent *))(*(void *)a2 + 16))(a2);
              __p[1] = v221;
              char v224 = (cnprint::CNPrinter *)sub_18E02C2AC((uint64_t)this + 44440, (double *)__p, (uint64_t)v414 + 8, v222, v223);
              if (v224)
              {
                if (cnprint::CNPrinter::GetLogLevel(v224) <= 1)
                {
                  LOWORD(v377) = 12;
                  v421.i8[0] = 1;
                  __p[0] = (void *)(*(uint64_t (**)(const raven::TimeMarkEvent *))(*(void *)a2 + 16))(a2);
                  __p[1] = v225;
                  char v226 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)__p, "Could not get rate gyro measurements for device-user %s measurement", "velocity");
                  if (*((char *)this + 2511) >= 0) {
                    LOBYTE(v232) = v226;
                  }
                  else {
                    uint64_t v232 = *((void *)this + 311);
                  }
                  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v377, (unsigned __int8 *)&v421, "%s", v227, v228, v229, v230, v231, v232);
                }
                sub_18E0690A4((uint64_t)v409);
                return v8;
              }
            }
            else
            {
              sub_18E06BF24(__p, 26);
              long long v346 = 0;
              long long v345 = 0u;
              long long v344 = 0u;
              __p[0] = &unk_1EDD14710;
              __n128 v233 = sub_18E07D6DC((uint64_t)v409, (uint64_t)v409, (uint64_t)__p);
              __p[0] = &unk_1EDD0A4E8;
              if (SHIBYTE(v341) < 0) {
                operator delete(v340);
              }
              if (v415.i32[2] != 1) {
                sub_18E069054();
              }
              v411.i64[0] = (*(uint64_t (**)(const raven::TimeMarkEvent *, __n128))(*(void *)a2 + 16))(a2, v233);
              v411.i64[1] = v234;
              v412.i64[0] = (uint64_t)this + 2696;
              v412.i64[1] = (uint64_t)this + 14600;
              v413.i64[0] = (uint64_t)this + 14616;
              v413.i64[1] = (uint64_t)this + 2536;
              *(void *)&v414[0] = v15;
            }
            __p[0] = (void *)(*(uint64_t (**)(const raven::TimeMarkEvent *))(*(void *)a2 + 16))(a2);
            __p[1] = v235;
            if (v219)
            {
              if (v415.i32[2]) {
                sub_18E069054();
              }
              if (!sub_18E0554DC((uint64_t)this + 61288, (double *)__p, (uint64_t)&v404, (uint64_t)&v399, (uint64_t)v336, (uint64_t)v409))goto LABEL_208; {
              v421.i16[0] = 12;
              }
              LOBYTE(v376[0]) = 4;
              v377 = (void *)(*(uint64_t (**)(const raven::TimeMarkEvent *))(*(void *)a2 + 16))(a2);
              *(void *)&long long v378 = v236;
              char v237 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)&v377, "Could not add measurement - device-to-user velocity");
              if (*((char *)this + 2511) >= 0) {
                LOBYTE(v243) = v237;
              }
              else {
                uint64_t v243 = *((void *)this + 311);
              }
            }
            else
            {
              if (v415.i32[2] != 1) {
                sub_18E069054();
              }
              if (!sub_18E04E124((uint64_t)this + 61288, (double *)__p, (uint64_t)&v404, (uint64_t)&v399, (uint64_t)v336, (uint64_t)v409))goto LABEL_208; {
              v421.i16[0] = 12;
              }
              LOBYTE(v376[0]) = 4;
              v377 = (void *)(*(uint64_t (**)(const raven::TimeMarkEvent *))(*(void *)a2 + 16))(a2);
              *(void *)&long long v378 = v244;
              char v245 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)&v377, "Could not add measurement - user speed from device");
              if (*((char *)this + 2511) >= 0) {
                LOBYTE(v243) = v245;
              }
              else {
                uint64_t v243 = *((void *)this + 311);
              }
            }
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v421, (unsigned __int8 *)v376, "%s", v238, v239, v240, v241, v242, v243);
LABEL_208:
            sub_18E0690A4((uint64_t)v409);
            goto LABEL_80;
          }
          double v215 = *((double *)this + 321);
          if (v212 * v212 / v189 >= *(double *)&qword_1EB4039E0
            || v212 / v213 >= 0.0874886635
            || v201 / v214 >= 0.363970234)
          {
            double v216 = fmin(v215 * 1.25892541, 100.0);
          }
          else
          {
            double v216 = fmax(v215 * 0.977237221, 0.01);
          }
          *((double *)this + 321) = v216;
          goto LABEL_181;
        }
        sub_18DFEB238(3, 3, (uint64_t)__p);
        uint64_t v348 = 0x100000003;
        *(_OWORD *)&v347[8] = xmmword_18E1F6F60;
        *(void *)long long v347 = &unk_1EDD18D98;
        v349 = &v350;
        uint64_t v246 = *((void *)this + 1831);
        long long v350 = *(_OWORD *)(v246 + 200);
        uint64_t v351 = *(void *)(v246 + 216);
        v410.i64[0] = 0x100000003;
        *(_OWORD *)&v409[8] = xmmword_18E1F6F60;
        *(void *)v409 = &unk_1EDD18D98;
        v410.i64[1] = (uint64_t)&v411;
        uint64_t v379 = 0x100000003;
        long long v378 = xmmword_18E1F6F60;
        v377 = &unk_1EDD18D98;
        v380 = (double *)&v381;
        sub_18DFEB188(3, 1, (uint64_t)&v421);
        sub_18DFE2F24((uint64_t)&v377, (uint64_t)&v421);
        double *v380 = sqrt(*(double *)(*((void *)this + 1864) + 200 * *((int *)this + 3725) + 200));
        sub_18E030138((uint64_t)v347, (uint64_t)&v377, (uint64_t)&v421);
        sub_18DFE2F24((uint64_t)v409, (uint64_t)&v421);
        uint64_t v247 = *(unsigned int *)&v409[16];
        double v248 = 0.0;
        if (*(int *)&v409[16] >= 1)
        {
          uint64_t v249 = (double *)v410.i64[1];
          do
          {
            double v250 = *v249++;
            double v248 = v248 + v250 * v250;
            --v247;
          }
          while (v247);
        }
        sub_18DFEB188(3, 1, (uint64_t)&v421);
        sub_18DFE2F24((uint64_t)&v377, (uint64_t)&v421);
        v380[1] = sqrt(*(double *)(*((void *)this + 1864) + 208 * *((int *)this + 3725) + 208));
        sub_18E030138((uint64_t)v347, (uint64_t)&v377, (uint64_t)&v421);
        sub_18DFE2F24((uint64_t)v409, (uint64_t)&v421);
        uint64_t v251 = *(unsigned int *)&v409[16];
        double v252 = 0.0;
        if (*(int *)&v409[16] >= 1)
        {
          long long v253 = (double *)v410.i64[1];
          do
          {
            double v254 = *v253++;
            double v252 = v252 + v254 * v254;
            --v251;
          }
          while (v251);
        }
        sub_18DFEB188(3, 1, (uint64_t)&v421);
        sub_18DFE2F24((uint64_t)&v377, (uint64_t)&v421);
        v380[2] = sqrt(*(double *)(*((void *)this + 1864) + 216 * *((int *)this + 3725) + 216));
        sub_18E030138((uint64_t)v347, (uint64_t)&v377, (uint64_t)&v421);
        double v255 = v248 + v252;
        __n128 v258 = sub_18DFE2F24((uint64_t)v409, (uint64_t)&v421);
        uint64_t v257 = *(unsigned int *)&v409[16];
        v258.n128_u64[0] = 0;
        if (*(int *)&v409[16] >= 1)
        {
          long long v259 = (double *)v410.i64[1];
          do
          {
            double v260 = *v259++;
            v258.n128_f64[0] = v258.n128_f64[0] + v260 * v260;
            --v257;
          }
          while (v257);
        }
        double v261 = fmin(sqrt(v255 + v258.n128_f64[0]), 1.57079633);
        uint64_t v262 = *((void *)this + 1831);
        double v263 = *(double *)(v262 + 168);
        v256.i64[0] = *(void *)(v262 + 176);
        v258.n128_u64[0] = *(void *)(v262 + 184);
        double v264 = sqrt(*(double *)v256.i64 * *(double *)v256.i64 + v263 * v263 + v258.n128_f64[0] * v258.n128_f64[0]);
        if (fabs(v264) < 2.22044605e-16)
        {
          LOWORD(v377) = 12;
          v421.i8[0] = 4;
          *(void *)v409 = (*(uint64_t (**)(const raven::TimeMarkEvent *))(*(void *)a2 + 16))(a2);
          *(void *)&v409[8] = v265;
          char v266 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)v409, "Position vector has zero magnitude");
          if (*((char *)this + 2511) >= 0) {
            LOBYTE(v272) = v266;
          }
          else {
            uint64_t v272 = *((void *)this + 311);
          }
LABEL_244:
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v377, (unsigned __int8 *)&v421, "%s", v267, v268, v269, v270, v271, v272);
          return v8 | 1;
        }
        uint64_t v394 = 0x100000003;
        long long v393 = xmmword_18E1F6F60;
        v392 = &unk_1EDD18D98;
        v395 = &v396;
        *(double *)v256.i64 = *(double *)v256.i64 / v264;
        double v396 = v263 / v264;
        unint64_t v397 = v256.i64[0];
        v258.n128_f64[0] = v258.n128_f64[0] / v264;
        unint64_t v398 = v258.n128_u64[0];
        double v273 = raven::RavenPNTEstimator::GetMaximumComfortableTurningRate(this, (int8x16_t)v258, v256);
        v370[0] = &unk_1EDD14240;
        v370[1] = 0;
        int64x2_t v372 = vdupq_n_s64(0x7FF8000000000000uLL);
        uint64_t v371 = 0;
        uint64_t v373 = 0x7FF8000000000000;
        *(void *)v409 = (*(uint64_t (**)(const raven::TimeMarkEvent *))(*(void *)a2 + 16))(a2);
        *(void *)&v409[8] = v274;
        if (!sub_18E02C2AC((uint64_t)this + 44440, (double *)v409, (uint64_t)v370, v275, v276))
        {
          uint64_t v379 = 0x100000003;
          long long v378 = xmmword_18E1F6F60;
          v377 = &unk_1EDD18D98;
          v380 = (double *)&v381;
          int64x2_t v381 = v372;
          uint64_t v382 = v373;
          uint64_t v279 = (double *)*((void *)this + 1831);
          double v280 = v279[6];
          double v281 = v279[7];
          double v282 = v279[8];
          double v283 = v279[9];
          double v284 = sqrt(v281 * v281 + v280 * v280 + v282 * v282 + v283 * v283);
          if (fabs(v284) >= 2.22044605e-16)
          {
            double v286 = v280 / v284;
            double v287 = v281 / v284;
            double v288 = v282 / v284;
            double v285 = v283 / v284;
          }
          else
          {
            double v285 = 1.0;
            double v286 = 0.0;
            double v287 = 0.0;
            double v288 = 0.0;
          }
          *(double *)v421.i64 = v286;
          *(double *)&v421.i64[1] = v287;
          double v422 = v288;
          double v423 = v285;
          sub_18DFEDF6C((cnrotation::CNRotation *)&v421, (uint64_t)&v392, (uint64_t)v409);
          uint64_t v289 = DWORD2(v378);
          if (SDWORD2(v378) < 1)
          {
            double v273 = 0.0;
          }
          else
          {
            uint64_t v290 = v380;
            double v273 = 0.0;
            uint64_t v291 = (double *)v410.i64[1];
            do
            {
              double v292 = *v290++;
              double v293 = v292;
              double v294 = *v291++;
              double v273 = v273 + v293 * v294;
              --v289;
            }
            while (v289);
          }
        }
        *(double *)v277.i64 = fabs(v273) * 3.28425;
        v278.i64[0] = 0x3FA999999999999ALL;
        double v295 = fmax(*(double *)v277.i64, 0.05);
        double v296 = v334 + (double)v335;
        double v297 = v296 * raven::RavenPNTEstimator::GetComfortableAcceleration(this, v277, v278);
        double v298 = v261 * v297 * (v261 * v297);
        long long v299 = v341;
        *long long v341 = v298 + 0.0025 + v295 * v295;
        int v300 = HIDWORD(v340);
        v299[HIDWORD(v340) + 1] = v297 * v297 + 0.0025;
        v299[2 * v300 + 2] = v298 * 0.0025 + 0.0025;
        if (!cnprint::CNPrinter::GetLogLevel(v301))
        {
          LOWORD(v377) = 12;
          v421.i8[0] = 0;
          *(void *)v409 = (*(uint64_t (**)(const raven::TimeMarkEvent *))(*(void *)a2 + 16))(a2);
          *(void *)&v409[8] = v302;
          char v303 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)v409, "uesr-device vel,speed,%.3lf,dt,%.2f,across,%.3lf,along,%.3lf,up,%.3lf,omega,%.3lf,acc,%.2lf,vib,%.2lf,dot,%.2lf,turn,%.2lf", *(double *)(*((void *)this + 1831) + 192), v296, sqrt(*v341), sqrt(v341[HIDWORD(v340) + 1]), sqrt(v341[2 * HIDWORD(v340) + 2]), v273 * 57.2957795, v297, 0.05, sqrt(v298), v295);
          if (*((char *)this + 2511) >= 0) {
            LOBYTE(v309) = v303;
          }
          else {
            uint64_t v309 = *((void *)this + 311);
          }
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v377, (unsigned __int8 *)&v421, "%s", v304, v305, v306, v307, v308, v309);
        }
        sub_18DFF2980((uint64_t)&v386, (uint64_t)v347);
        sub_18E030138((uint64_t)&v386, (uint64_t)&v392, (uint64_t)v383);
        uint64_t v310 = v384;
        double v311 = 0.0;
        if (v384 >= 1)
        {
          v312 = (double *)v385;
          do
          {
            double v313 = *v312++;
            double v311 = v311 + v313 * v313;
            --v310;
          }
          while (v310);
        }
        double v314 = sqrt(v311);
        if (v314 < 0.000000015)
        {
          LOWORD(v377) = 12;
          v421.i8[0] = 4;
          *(void *)v409 = (*(uint64_t (**)(const raven::TimeMarkEvent *))(*(void *)a2 + 16))(a2);
          *(void *)&v409[8] = v315;
          char v316 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)v409, "Cross product has zero magnitude");
          if (*((char *)this + 2511) >= 0) {
            LOBYTE(v272) = v316;
          }
          else {
            uint64_t v272 = *((void *)this + 311);
          }
          goto LABEL_244;
        }
        v317 = v385;
        float64x2_t *v385 = vdivq_f64(*v385, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v314, 0));
        v317[1].f64[0] = v317[1].f64[0] / v314;
        uint64_t v379 = 0x300000003;
        long long v378 = xmmword_18E1F0010;
        v377 = &unk_1EDD18EE8;
        v380 = (double *)&v381;
        sub_18E0519FC(":", (uint64_t)&v377, 0, (uint64_t)v409);
        sub_18DFEC830((uint64_t)v409, (uint64_t)v383);
        sub_18E0519FC(":", (uint64_t)&v377, 1, (uint64_t)v409);
        sub_18DFEC830((uint64_t)v409, (uint64_t)&v386);
        sub_18E0519FC(":", (uint64_t)&v377, 2, (uint64_t)v409);
        sub_18DFEC830((uint64_t)v409, (uint64_t)&v392);
        sub_18DFF6360((uint64_t)&v377, (uint64_t)__p, (uint64_t)&v421);
        sub_18DFF63E0((uint64_t)&v377, (uint64_t)v376);
        sub_18DFF6360((uint64_t)&v421, (uint64_t)v376, (uint64_t)v409);
        sub_18DFE2F24((uint64_t)&v399, (uint64_t)v409);
        sub_18E06BF24(v409, 11);
        v414[0] = 0uLL;
        int64x2_t v413 = 0u;
        int64x2_t v412 = 0u;
        *(void *)v409 = &unk_1EDD16150;
        v411.i64[0] = (*(uint64_t (**)(const raven::TimeMarkEvent *))(*(void *)a2 + 16))(a2);
        v411.i64[1] = v318;
        v412.i64[0] = (uint64_t)this + 2696;
        v412.i64[1] = (uint64_t)this + 14600;
        v413.i64[0] = (uint64_t)this + 14616;
        v413.i64[1] = (uint64_t)this + 2536;
        *(void *)&v414[0] = v15;
        v421.i64[0] = (*(uint64_t (**)(const raven::TimeMarkEvent *))(*(void *)a2 + 16))(a2);
        v421.i64[1] = v319;
        *((double *)v414 + 1) = v334 + (double)v335;
        if (sub_18E053790((uint64_t)this + 61288, (double *)v421.i64, (uint64_t)&v404, (uint64_t)&v399, (uint64_t)v409))
        {
          LOWORD(v361) = 12;
          v360[0] = 4;
          *(void *)&v376[0] = (*(uint64_t (**)(const raven::TimeMarkEvent *))(*(void *)a2 + 16))(a2);
          v376[1] = v320;
          char v321 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)v376, "Could not add measurement - device-to-user velocity");
          if (*((char *)this + 2511) >= 0) {
            LOBYTE(v327) = v321;
          }
          else {
            uint64_t v327 = *((void *)this + 311);
          }
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v361, v360, "%s", v322, v323, v324, v325, v326, v327);
        }
        *(void *)v409 = &unk_1EDD0A4E8;
        if (v410.i8[15] < 0) {
          operator delete(*(void **)&v409[16]);
        }
      }
    }
LABEL_80:
    long long v94 = (void *)(*(uint64_t (**)(const raven::TimeMarkEvent *))(*(void *)a2 + 16))(a2);
    double v96 = *(double *)&v95;
    __p[0] = v94;
    __p[1] = v95;
    *(_OWORD *)v409 = *((_OWORD *)this + 5);
    uint64_t v98 = (cnprint::CNPrinter *)CNTimeSpan::operator-((uint64_t)__p, v409, *(int8x16_t *)v409, v97);
    double v101 = v100 + (double)(uint64_t)v98;
    if (v101 >= 0.0)
    {
      uint64_t v114 = *((void *)this + 146);
      v99.i64[0] = *(void *)(v114 + 872);
      int v115 = vcvtpd_s64_f64(v101 / *(double *)v99.i64);
      *(_OWORD *)((char *)this + 328) = 0u;
      *(_OWORD *)((char *)this + 344) = 0u;
      *(_OWORD *)((char *)this + 360) = 0u;
      *(_OWORD *)((char *)this + 376) = 0u;
      *(_OWORD *)((char *)this + 392) = 0u;
      *(_OWORD *)((char *)this + 408) = 0u;
      *(_OWORD *)((char *)this + 424) = 0u;
      *(_OWORD *)((char *)this + 440) = 0u;
      *(_OWORD *)((char *)this + 456) = 0u;
      *(_OWORD *)((char *)this + 472) = 0u;
      *(_OWORD *)((char *)this + 488) = 0u;
      *(_OWORD *)((char *)this + 504) = 0u;
      *(_OWORD *)((char *)this + 520) = 0u;
      *(_OWORD *)((char *)this + 536) = 0u;
      *(_OWORD *)((char *)this + 552) = 0u;
      *(_OWORD *)((char *)this + 568) = 0u;
      *(_OWORD *)((char *)this + 584) = 0u;
      *(_OWORD *)((char *)this + 600) = 0u;
      *(_OWORD *)((char *)this + 616) = 0u;
      *(_OWORD *)((char *)this + 632) = 0u;
      *(_OWORD *)((char *)this + 648) = 0u;
      *(_OWORD *)((char *)this + 664) = 0u;
      *(_OWORD *)((char *)this + 680) = 0u;
      *(_OWORD *)((char *)this + 696) = 0u;
      *(_OWORD *)((char *)this + 708) = 0u;
      unint64_t v116 = *(void *)(v114 + 872);
      *(void *)&long long v400 = 0;
      v399 = 0;
      CNTimeSpan::SetTimeSpan((uint64_t *)&v399, 0, (int8x16_t)v116, v99);
      v117.i64[0] = *(void *)(v114 + 880);
      *(void *)&long long v378 = 0;
      v377 = 0;
      CNTimeSpan::SetTimeSpan((uint64_t *)&v377, 0, v117, v118);
      int v120 = v115 - 1;
      if (v115 >= 1)
      {
        double v121 = v96;
        if (v94) {
          BOOL v122 = 1;
        }
        else {
          BOOL v122 = (*(void *)&v96 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
        }
        char v123 = v122;
        int64x2_t v338 = vdupq_n_s64(0x7FF8000000000000uLL);
        while (1)
        {
          if (((int8x16_t v421 = *((int8x16_t *)this + 5),
                 *(void *)&v376[0] = CNTimeSpan::operator+((uint64_t)&v421, &v399, v421, v119),
                 v376[1] = v124,
                 (uint64_t v127 = CNTimeSpan::operator+((uint64_t)v376, &v377, v125, v126)) != 0)
             || (*(void *)&v128 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
            && (v123 & 1) != 0)
          {
            BOOL v130 = (void *)v127 == v94 ? v121 <= v128 : v127 > (uint64_t)v94;
          }
          else
          {
            BOOL v130 = v121 <= v128;
          }
          int8x16_t v131 = v130 ? __p : (void **)v376;
          *(_OWORD *)long long v347 = *(_OWORD *)v131;
          *(_OWORD *)v409 = 0uLL;
          int64x2_t v410 = v338;
          int64x2_t v411 = v338;
          int64x2_t v412 = v338;
          int64x2_t v413 = v338;
          v414[0] = v338;
          v414[1] = v338;
          v414[2] = v338;
          int64x2_t v415 = v338;
          int64x2_t v416 = v338;
          int64x2_t v417 = v338;
          BOOL EstimatorPredictAndUpdateArguments = raven::RavenPNTEstimator::GetEstimatorPredictAndUpdateArguments((uint64_t)this, (uint64_t)&v421, (int8x16_t *)v347, (uint64_t)v409, *(double *)v338.i64, v129);
          if (!EstimatorPredictAndUpdateArguments) {
            break;
          }
          uint64_t v404 = raven::RavenPNTEstimator::PredictAndUpdate((uint64_t)this, (uint64_t)v409);
          v8 |= v404;
          if (sub_18E056F48(&v404)) {
            return v8;
          }
          if (v120) {
            char v133 = v130;
          }
          else {
            char v133 = 1;
          }
          --v120;
          if (v133) {
            goto LABEL_129;
          }
        }
        if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)EstimatorPredictAndUpdateArguments) <= 1)
        {
          LOWORD(v404) = 12;
          LOBYTE(v392) = 1;
          long long v141 = (uint64_t *)cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)__p, "Could not get predict and update arguments");
          if (*((char *)this + 2511) >= 0) {
            LOBYTE(v147) = (_BYTE)v141;
          }
          else {
            uint64_t v147 = *v141;
          }
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v404, (unsigned __int8 *)&v392, "%s", v142, v143, v144, v145, v146, v147);
        }
      }
LABEL_129:
      raven::RavenEstimator::StoreHistoricalSolution(this);
    }
    else
    {
      if (cnprint::CNPrinter::GetLogLevel(v98) <= 1)
      {
        LOWORD(v399) = 12;
        LOBYTE(v377) = 1;
        *(void *)v409 = (*(uint64_t (**)(const raven::TimeMarkEvent *))(*(void *)a2 + 16))(a2);
        *(void *)&v409[8] = v102;
        uint64_t v104 = *((void *)this + 10);
        double v103 = *((double *)this + 11);
        uint64_t v105 = (*(uint64_t (**)(const raven::TimeMarkEvent *))(*(void *)a2 + 16))(a2);
        long long v107 = (uint64_t *)cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)v409, "Estimator time is greater than event time,%.3lf > %.3lf", v103 + (double)v104, v106 + (double)v105);
        if (*((char *)this + 2511) >= 0) {
          LOBYTE(v113) = (_BYTE)v107;
        }
        else {
          uint64_t v113 = *v107;
        }
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v399, (unsigned __int8 *)&v377, "%s", v108, v109, v110, v111, v112, v113);
      }
      return v8 | 0x40;
    }
  }
  return v8;
}

void sub_18E050A34(_Unwind_Exception *a1)
{
}

uint64_t raven::RavenPNTEstimator::Initialize(uint64_t a1, __n128 *a2)
{
  if (*(unsigned char *)(a1 + 57))
  {
    if (*(unsigned char *)(a1 + 58))
    {
      LOWORD(v25) = 12;
      LOBYTE(v23) = 4;
      char v4 = cnprint::CNLogFormatter::FormatGeneral(a1 + 2488, a1 + 80, "Attempting to initialize an already initialized estimator");
      if (*(char *)(a1 + 2511) >= 0) {
        LOBYTE(v10) = v4;
      }
      else {
        uint64_t v10 = *(void *)(a1 + 2488);
      }
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v25, (unsigned __int8 *)&v23, "%s", v5, v6, v7, v8, v9, v10);
    }
    *(__n128 *)(a1 + 64) = *a2;
    *(__n128 *)(a1 + 80) = *a2;
    *(__n128 *)(a1 + 96) = *a2;
    *(void *)(a1 + 112) = 0;
    *(void *)(a1 + 120) = 0;
    sub_18E059748(a1 + 61288);
    sub_18E059804(a1 + 61288, a2, v11, v12, v13, v14, v15, v16);
    *(__n128 *)(a1 + 14600) = *a2;
    uint64_t v27 = 0x10000001CLL;
    int8x16_t v25 = &unk_1EDD188B8;
    uint64_t v28 = v29;
    long long v26 = xmmword_18E1FD5F0;
    sub_18DFE2CC8((uint64_t)&v25, 0.0);
    sub_18DFE2F24(a1 + 14616, (uint64_t)&v25);
    *(unsigned char *)(a1 + 2536) = 0;
    *(__n128 *)(a1 + 2544) = *a2;
    uint64_t v39 = 0x100000013;
    uint64_t v37 = &unk_1EDD17CB8;
    uint64_t v40 = (double *)&v41;
    long long v38 = xmmword_18E1FD730;
    sub_18DFE2CC8((uint64_t)&v37, 0.0);
    uint64_t v17 = v40;
    double *v40 = a2[1].n128_f64[0];
    v17[1] = a2[1].n128_f64[1];
    double v17[2] = a2[2].n128_f64[0];
    v17[3] = a2[2].n128_f64[1];
    v17[4] = a2[3].n128_f64[0];
    v17[5] = a2[3].n128_f64[1];
    v17[6] = a2[4].n128_f64[0];
    v17[7] = a2[4].n128_f64[1];
    v17[8] = a2[5].n128_f64[0];
    v17[9] = a2[5].n128_f64[1];
    v17[10] = a2[6].n128_f64[0];
    v17[11] = a2[6].n128_f64[1];
    v17[12] = a2[7].n128_f64[0];
    v17[13] = a2[7].n128_f64[1];
    v17[14] = a2[8].n128_f64[0];
    v17[15] = a2[8].n128_f64[1];
    v17[16] = a2[9].n128_f64[0];
    v17[17] = a2[9].n128_f64[1];
    v18.i64[0] = a2[10].n128_i64[0];
    v17[18] = *(double *)v18.i64;
    if (!sub_18E0598A0(a1 + 2696, a2, (uint64_t)&v37, v18, v19))
    {
      for (uint64_t i = 10; i != 29; ++i)
        *((_DWORD *)&v25 + i) = i - 10;
      uint64_t v33 = 0x10000001CLL;
      long long v32 = xmmword_18E1FD730;
      v35[1] = v29[1];
      v35[2] = v29[2];
      uint64_t v31 = &unk_1EDD188E8;
      char v34 = v35;
      v36[0] = v30[0];
      *(_OWORD *)((char *)v36 + 12) = *(_OWORD *)((char *)v30 + 12);
      v35[0] = v29[0];
      sub_18E07323C((uint64_t)&v25, a1 + 14616, (uint64_t)&v31);
      sub_18E0599BC((uint64_t)&v25, SDWORD2(v38), v40);
      uint64_t v21 = *(void **)(a1 + 14648);
      v21[19] = a2[10].n128_u64[1];
      v21[20] = a2[11].n128_u64[0];
      v21[21] = a2[11].n128_u64[1];
      v21[22] = a2[12].n128_u64[0];
      v21[23] = a2[12].n128_u64[1];
      v21[24] = a2[13].n128_u64[0];
      v21[25] = a2[13].n128_u64[1];
      v21[26] = a2[14].n128_u64[0];
      v21[27] = a2[14].n128_u64[1];
      uint64_t v27 = 0x10000001ALL;
      int8x16_t v25 = &unk_1EDD186A8;
      uint64_t v28 = v29;
      long long v26 = xmmword_18E1FD600;
      sub_18DFE2CC8((uint64_t)&v25, 0.0);
      sub_18E06E6BC((uint64_t)v24, (uint64_t)&a2[15]);
    }
  }
  return 0xFFFFFFFFLL;
}

void sub_18E0510DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45)
{
}

void raven::RavenPNTEstimator::InflateDevicePositionUncertainty(raven::RavenPNTEstimator *this)
{
}

uint64_t sub_18E051104(uint64_t a1, uint64_t a2, void *lpsrc, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (lpsrc
    && (uint64_t v13 = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EDD02A78, (const struct __class_type_info *)&unk_1EDD060F8, 0)) != 0)
  {
    uint64_t v14 = v13;
    unsigned int v16 = *(_DWORD *)(a1 + 8);
    unsigned int v15 = *(_DWORD *)(a1 + 12);
    if (v16 <= v15) {
      int v17 = *(_DWORD *)(a1 + 12);
    }
    else {
      int v17 = *(_DWORD *)(a1 + 8);
    }
    if (v16
      && v15
      && v17 == 26
      && ((v19 = *(_DWORD *)(a2 + 8), unsigned int v18 = *(_DWORD *)(a2 + 12), v19 <= v18)
        ? (int v20 = *(_DWORD *)(a2 + 12))
        : (int v20 = *(_DWORD *)(a2 + 8)),
          v19 && v18 && v20 == 3))
    {
      if (*((void *)v13 + 7))
      {
        v112[0] = *(_OWORD *)(v13 + 40);
        uint64_t v21 = *((void *)v13 + 9);
        long long v111 = *(_OWORD *)*((void *)v13 + 8);
        sub_18E07FB20((uint64_t)v110, v21);
        int v22 = **((unsigned __int8 **)v14 + 10);
        if (**((unsigned char **)v14 + 10))
        {
          if (v22 != 1)
          {
            if (v22 == 2) {
              __assert_rtn("h_DeviceUserPositionDifference_RavenPNT", "ravenmeasurementfunctions.h", 3186, "false && \"Unexpected case RavenPNTEstimatorStateParameterization::ParameterizationCount\"");
            }
            goto LABEL_19;
          }
          uint64_t v102 = 0x100000007;
          long long v101 = xmmword_18E1FD680;
          double v100 = &unk_1EDD197E8;
          double v103 = (double *)v104;
          if (sub_18E06C3A8((uint64_t)v112, &v111, (uint64_t)v110, 1, (uint64_t)&v100)) {
            goto LABEL_26;
          }
          uint64_t v61 = 0x700000001;
          uint64_t v59 = &unk_1EDD183A8;
          uint64_t v62 = v63;
          long long v60 = xmmword_18E1FD690;
          for (uint64_t i = 10; i != 17; ++i)
            *((_DWORD *)&v59 + i) = i + 11;
          sub_18E05B904((uint64_t)v58, (uint64_t)&v59);
          uint64_t v107 = 0x10000001CLL;
          long long v106 = xmmword_18E1FD5F0;
          uint64_t v105 = &unk_1EDD188B8;
          uint64_t v108 = v109;
          sub_18E06CE44((uint64_t)&v59, (uint64_t)&v105, (uint64_t)v58);
          sub_18E06C83C((uint64_t)&v59, SDWORD2(v101), v103);
          uint64_t v55 = 0x100000007;
          uint64_t v53 = &unk_1EDD197E8;
          long long v54 = xmmword_18E1FD680;
          uint64_t v56 = (double *)&v57;
          int64x2_t v64 = vdupq_n_s64(0x7FF8000000000000uLL);
          int64x2_t v65 = v64;
          int64x2_t v66 = v64;
          int64x2_t v67 = v64;
          int64x2_t v68 = v64;
          int64x2_t v69 = v64;
          int64x2_t v70 = v64;
          int64x2_t v71 = v64;
          int64x2_t v72 = v64;
          int64x2_t v73 = v64;
          int64x2_t v74 = v64;
          int64x2_t v75 = v64;
          int64x2_t v76 = v64;
          int64x2_t v77 = v64;
          int64x2_t v78 = v64;
          int64x2_t v79 = v64;
          int64x2_t v80 = v64;
          int64x2_t v81 = v64;
          int64x2_t v82 = v64;
          int64x2_t v83 = v64;
          int64x2_t v84 = v64;
          int64x2_t v85 = v64;
          int64x2_t v86 = v64;
          int64x2_t v87 = v64;
          int64x2_t v88 = v64;
          int64x2_t v89 = v64;
          int64x2_t v90 = v64;
          int64x2_t v91 = v64;
          int64x2_t v92 = v64;
          int64x2_t v93 = v64;
          int64x2_t v94 = v64;
          int64x2_t v95 = v64;
          int64x2_t v96 = v64;
          int64x2_t v97 = v64;
          int64x2_t v98 = v64;
          uint64_t v99 = 0x7FF8000000000000;
          LOBYTE(v59) = 0;
          if (sub_18E06F128((uint64_t)&v105, a1, 0, (uint64_t)&v53, (uint64_t)&v64, (BOOL *)&v59, 0.000000015))
          {
            sub_18E06B804((uint64_t)(v14 + 40), (uint64_t)"could not correct states", (uint64_t)"h_DeviceUserPositionDifference_RavenPNT", 3166, v39, v40, v41, v42);
            return 0xFFFFFFFFLL;
          }
          *(_OWORD *)(a4 + 8) = xmmword_18E1F6F60;
          uint64_t v48 = v56;
          uint64_t v49 = *(double **)(a2 + 32);
          uint64_t v50 = *(double **)(a4 + 32);
          double *v50 = *v49 - *v56;
          v50[1] = v49[1] - v48[1];
          v50[2] = v49[2] - v48[2];
          sub_18E06BD44((uint64_t)&v59, 26);
          sub_18DFE2F24(a5, (uint64_t)&v59);
          int v51 = *(_DWORD *)(a5 + 20);
          uint64_t v52 = *(void *)(a5 + 32);
          *(double *)(v52 + 160 * v51) = -*(double *)&v80.i64[1];
          *(double *)(v52 + 8 * (21 * v51 + 1)) = -*(double *)&v84.i64[1];
          *(double *)(v52 + 8 * (22 * v51 + 2)) = -*(double *)&v88.i64[1];
        }
        else
        {
          uint64_t v27 = *((void *)v14 + 7);
          uint64_t v107 = 0x10000001CLL;
          long long v106 = xmmword_18E1FD5F0;
          uint64_t v105 = &unk_1EDD188B8;
          uint64_t v108 = v109;
          if (sub_18E0786E0((uint64_t)v112, &v111, (uint64_t)v110, v27, *((void *)v14 + 11), 0, 1, 1, (uint64_t)&v105))
          {
LABEL_26:
            LOWORD(v59) = 12;
            v64.i8[0] = 4;
            double v33 = *((double *)v14 + 6) + (double)*((uint64_t *)v14 + 5);
            cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v59, (unsigned __int8 *)&v64, "time,%.3lf,h-function failure on line %d: %s() %s", v28, v29, v30, v31, v32, SLOBYTE(v33));
            return 0xFFFFFFFFLL;
          }
          uint64_t v102 = 0x10000001CLL;
          long long v101 = xmmword_18E1FD5F0;
          double v100 = &unk_1EDD188B8;
          double v103 = (double *)v104;
          int64x2_t v64 = vdupq_n_s64(0x7FF8000000000000uLL);
          int64x2_t v65 = v64;
          int64x2_t v66 = v64;
          int64x2_t v67 = v64;
          int64x2_t v68 = v64;
          int64x2_t v69 = v64;
          int64x2_t v70 = v64;
          int64x2_t v71 = v64;
          int64x2_t v72 = v64;
          int64x2_t v73 = v64;
          int64x2_t v74 = v64;
          int64x2_t v75 = v64;
          int64x2_t v76 = v64;
          int64x2_t v77 = v64;
          int64x2_t v78 = v64;
          int64x2_t v79 = v64;
          int64x2_t v80 = v64;
          int64x2_t v81 = v64;
          int64x2_t v82 = v64;
          int64x2_t v83 = v64;
          int64x2_t v84 = v64;
          int64x2_t v85 = v64;
          int64x2_t v86 = v64;
          int64x2_t v87 = v64;
          int64x2_t v88 = v64;
          int64x2_t v89 = v64;
          int64x2_t v90 = v64;
          int64x2_t v91 = v64;
          int64x2_t v92 = v64;
          int64x2_t v93 = v64;
          int64x2_t v94 = v64;
          int64x2_t v95 = v64;
          int64x2_t v96 = v64;
          int64x2_t v97 = v64;
          int64x2_t v98 = v64;
          uint64_t v99 = 0x7FF8000000000000;
          LOBYTE(v59) = 0;
          if (sub_18E06EC84((uint64_t)&v105, a1, 0, 1, 1, (uint64_t)&v100, (uint64_t)&v64, (BOOL *)&v59, 0.000000015))
          {
            sub_18E06B804((uint64_t)(v14 + 40), (uint64_t)"could not correct states", (uint64_t)"h_DeviceUserPositionDifference_RavenPNT", 3122, v34, v35, v36, v37);
            return 0xFFFFFFFFLL;
          }
          *(_OWORD *)(a4 + 8) = xmmword_18E1F6F60;
          uint64_t v43 = v103;
          uint64_t v44 = *(double **)(a2 + 32);
          uint64_t v45 = *(double **)(a4 + 32);
          *uint64_t v45 = *v103 - v103[21] + *v44;
          v45[1] = v43[1] - v43[22] + v44[1];
          void v45[2] = v43[2] - v43[23] + v44[2];
          sub_18E06BD44((uint64_t)&v59, 26);
          sub_18DFE2F24(a5, (uint64_t)&v59);
          __n128 v46 = *(void **)(a5 + 32);
          void *v46 = v64.i64[0];
          int v47 = *(_DWORD *)(a5 + 20);
          v46[v47 + 1] = v64.i64[1];
          v46[2 * v47 + 2] = v65.i64[0];
          *(double *)&v46[20 * v47] = -*(double *)&v80.i64[1];
          *(double *)&v46[21 * v47 + 1] = -*(double *)&v84.i64[1];
          *(double *)&v46[22 * v47 + 2] = -*(double *)&v88.i64[1];
        }
LABEL_19:
        uint64_t v61 = 0x300000003;
        uint64_t v59 = &unk_1EDD18EE8;
        uint64_t v62 = v63;
        long long v60 = xmmword_18E1F0010;
        sub_18DFE2CC8((uint64_t)&v59, 0.0);
        int v23 = HIDWORD(v60) + 1;
        uint64_t v24 = v62;
        void *v62 = 0x3FF0000000000000;
        v24[v23] = 0x3FF0000000000000;
        v24[2 * v23] = 0x3FF0000000000000;
        sub_18DFE2F24(a6, (uint64_t)&v59);
        return 0;
      }
      LOWORD(v59) = 12;
      v64.i8[0] = 4;
      double v26 = *((double *)v13 + 6) + (double)*((uint64_t *)v13 + 5);
    }
    else
    {
      LOWORD(v59) = 12;
      v64.i8[0] = 4;
      double v26 = *((double *)v13 + 6) + (double)*((uint64_t *)v13 + 5);
    }
  }
  else
  {
    LOWORD(v59) = 12;
    v64.i8[0] = 4;
    double v26 = MEMORY[0x30] + (double)MEMORY[0x28];
  }
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v59, (unsigned __int8 *)&v64, "time,%.3lf,h-function failure on line %d: %s() %s", a4, a5, a6, a7, a8, SLOBYTE(v26));
  return 0xFFFFFFFFLL;
}

uint64_t sub_18E0519AC(uint64_t a1)
{
  *(void *)a1 = &unk_1EDD0A4E8;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

uint64_t sub_18E0519FC@<X0>(char *__s1@<X1>, uint64_t a2@<X0>, int a3@<W2>, uint64_t a4@<X8>)
{
  if (strcmp(__s1, ":")) {
    __assert_rtn("operator()", "cnmatrix.h", 891, "strcmp(r, \":\") == 0");
  }
  int v7 = *(_DWORD *)(a2 + 8);
  uint64_t v21 = 0x100000003;
  unsigned int v16 = &unk_1EDD18DC8;
  int v17 = v7;
  int v18 = 1;
  int v19 = v7;
  int v20 = v7;
  int v22 = v23;
  if (v7)
  {
    for (int i = 0; i != v7; ++i)
      v23[i] = i;
  }
  uint64_t v13 = 0x100000001;
  uint64_t v11 = &unk_1EDD18078;
  *(void *)&long long v9 = 0x100000001;
  *((void *)&v9 + 1) = 0x100000001;
  long long v12 = v9;
  uint64_t v14 = &v15;
  int v15 = a3;
  return sub_18DFEEB44(a4, a2, (uint64_t)&v16, (uint64_t)&v11);
}

uint64_t sub_18E051B18(uint64_t a1)
{
  MEMORY[0x1F4188790](a1);
  if (!v3
    || (uint64_t v9 = v2,
        uint64_t v10 = v1,
        (uint64_t v11 = (char *)__dynamic_cast(v3, (const struct __class_type_info *)&unk_1EDD02A78, (const struct __class_type_info *)&unk_1EDD06220, 0)) == 0))
  {
    LOWORD(v51) = 12;
    LOBYTE(v39) = 4;
    double v25 = MEMORY[0x30] + (double)MEMORY[0x28];
    goto LABEL_20;
  }
  uint64_t v13 = v11;
  unsigned int v15 = *(_DWORD *)(v10 + 8);
  unsigned int v14 = *(_DWORD *)(v10 + 12);
  if (v15 <= v14) {
    int v16 = *(_DWORD *)(v10 + 12);
  }
  else {
    int v16 = *(_DWORD *)(v10 + 8);
  }
  if (!v15
    || !v14
    || v16 != 26
    || ((v18 = *(_DWORD *)(v9 + 8), unsigned int v17 = *(_DWORD *)(v9 + 12), v18 <= v17)
      ? (int v19 = *(_DWORD *)(v9 + 12))
      : (int v19 = *(_DWORD *)(v9 + 8)),
        !v18 || !v17 || v19 != 3))
  {
    LOWORD(v51) = 12;
    LOBYTE(v39) = 4;
    double v25 = *((double *)v11 + 6) + (double)*((uint64_t *)v11 + 5);
    goto LABEL_20;
  }
  if (!*((void *)v11 + 7))
  {
    LOWORD(v51) = 12;
    LOBYTE(v39) = 4;
    double v25 = *((double *)v11 + 6) + (double)*((uint64_t *)v11 + 5);
    goto LABEL_20;
  }
  v73[0] = *(_OWORD *)(v11 + 40);
  v20.i64[1] = *((void *)&v73[0] + 1);
  v20.i64[0] = *((void *)v11 + 12);
  *(void *)&long long v52 = 0;
  int v51 = 0;
  CNTimeSpan::SetTimeSpan((uint64_t *)&v51, 0, v20, v12);
  *(void *)&long long v72 = CNTimeSpan::operator-((uint64_t)v73, &v51, v21, v22);
  *((void *)&v72 + 1) = v23;
  uint64_t v24 = *((void *)v13 + 9);
  long long v71 = *(_OWORD *)*((void *)v13 + 8);
  sub_18E07FB20((uint64_t)v70, v24);
  if (**((unsigned char **)v13 + 10))
  {
    LOWORD(v51) = 12;
    LOBYTE(v39) = 4;
    double v25 = *((double *)v13 + 6) + (double)*((uint64_t *)v13 + 5);
LABEL_20:
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v51, (unsigned __int8 *)&v39, "time,%.3lf,h-function failure on line %d: %s() %s", v4, v5, v6, v7, v8, SLOBYTE(v25));
    return 0xFFFFFFFFLL;
  }
  uint64_t v27 = *((void *)v13 + 7);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EB403B20, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EB403B20))
  {
    uint64_t v53 = 0x1300000001;
    int v51 = &unk_1EDD17E38;
    long long v54 = &v55;
    long long v52 = xmmword_18E1FD720;
    for (uint64_t i = 10; i != 29; ++i)
      *((_DWORD *)&v51 + i) = i - 10;
    sub_18E05B858((uint64_t)&unk_1EB4044C8, (uint64_t)&v51);
    __cxa_atexit((void (*)(void *))sub_18E0600EC, &unk_1EB4044C8, &dword_18DEDB000);
    __cxa_guard_release(&qword_1EB403B20);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EB403B28, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EB403B28))
  {
    uint64_t v53 = 0x1A00000001;
    int v51 = &unk_1EDD18168;
    long long v54 = &v55;
    long long v52 = xmmword_18E1FD710;
    for (uint64_t j = 10; j != 28; ++j)
      *((_DWORD *)&v51 + j) = j - 10;
    sub_18E058650((uint64_t)&unk_1E91C98F8, (uint64_t)&v51);
    __cxa_atexit((void (*)(void *))sub_18E0576A8, &unk_1E91C98F8, &dword_18DEDB000);
    __cxa_guard_release(&qword_1EB403B28);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EB403B30, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EB403B30))
  {
    uint64_t v53 = 0x700000001;
    int v51 = &unk_1EDD183A8;
    long long v54 = &v55;
    long long v52 = xmmword_18E1FD690;
    for (uint64_t k = 10; k != 17; ++k)
      *((_DWORD *)&v51 + k) = k + 11;
    sub_18E05B904((uint64_t)&unk_1EB4040D0, (uint64_t)&v51);
    __cxa_atexit((void (*)(void *))sub_18E0600CC, &unk_1EB4040D0, &dword_18DEDB000);
    __cxa_guard_release(&qword_1EB403B30);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EB403B38, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EB403B38))
  {
    uint64_t v41 = 0x600000001;
    uint64_t v39 = &unk_1EDD18378;
    uint64_t v42 = &v43;
    long long v40 = xmmword_18E1FD840;
    for (uint64_t m = 10; m != 16; ++m)
      *((_DWORD *)&v39 + m) = m + 10;
    sub_18E078C54((uint64_t)&v51, (uint64_t)&v39);
    sub_18E07EFE4((uint64_t)&unk_1E91C9988, (uint64_t)&v51);
    __cxa_atexit((void (*)(void *))sub_18E0576A8, &unk_1E91C9988, &dword_18DEDB000);
    __cxa_guard_release(&qword_1EB403B38);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EB403B40, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EB403B40))
  {
    uint64_t v53 = 0x300000001;
    int v51 = &unk_1EDD18258;
    long long v54 = &v55;
    long long v52 = xmmword_18E1F8560;
    uint64_t v55 = 0x400000003;
    int v56 = 5;
    sub_18DFEC63C((uint64_t)&v51, (uint64_t)&unk_1EB403EC8);
    __cxa_atexit((void (*)(void *))sub_18DFE2E9C, &unk_1EB403EC8, &dword_18DEDB000);
    __cxa_guard_release(&qword_1EB403B40);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EB403B48, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EB403B48))
  {
    uint64_t v53 = 0x300000001;
    int v51 = &unk_1EDD18258;
    long long v54 = &v55;
    long long v52 = xmmword_18E1F8560;
    uint64_t v55 = 0x1800000017;
    int v56 = 25;
    sub_18DFEC63C((uint64_t)&v51, (uint64_t)&unk_1EB403F00);
    __cxa_atexit((void (*)(void *))sub_18DFE2E9C, &unk_1EB403F00, &dword_18DEDB000);
    __cxa_guard_release(&qword_1EB403B48);
  }
  uint64_t v67 = 0x10000001CLL;
  long long v66 = xmmword_18E1FD730;
  int64x2_t v65 = &unk_1EDD188B8;
  int64x2_t v68 = (double *)&v69;
  if (!sub_18E06B85C((uint64_t)v73, (uint64_t)&v71, v70[4], v27, *((void *)v13 + 11), (uint64_t)&v65))
  {
    sub_18E05985C((uint64_t)v64);
    sub_18E0818A4((uint64_t)&v51, (uint64_t)v64, (uint64_t)&unk_1EB4044C8);
    sub_18E06F000((uint64_t)&v51, SDWORD2(v66), v68);
    uint64_t v61 = 0x100000013;
    uint64_t v59 = &unk_1EDD17CB8;
    long long v60 = xmmword_18E1FD730;
    uint64_t v62 = &v63;
    v57[0] = vdupq_n_s64(0x7FF8000000000000uLL);
    v57[1] = v57[0];
    v57[2] = v57[0];
    void v57[3] = v57[0];
    v57[4] = v57[0];
    v57[5] = v57[0];
    v57[6] = v57[0];
    v57[7] = v57[0];
    v57[8] = v57[0];
    v57[9] = v57[0];
    v57[10] = v57[0];
    v57[11] = v57[0];
    v57[12] = v57[0];
    v57[13] = v57[0];
    v57[14] = v57[0];
    v57[15] = v57[0];
    v57[16] = v57[0];
    v57[17] = v57[0];
    v57[18] = v57[0];
    v57[19] = v57[0];
    v57[20] = v57[0];
    v57[21] = v57[0];
    v57[22] = v57[0];
    v57[23] = v57[0];
    v57[24] = v57[0];
    v57[25] = v57[0];
    v57[26] = v57[0];
    v57[27] = v57[0];
    v57[28] = v57[0];
    v57[29] = v57[0];
    v57[30] = v57[0];
    v57[31] = v57[0];
    v57[32] = v57[0];
    v57[33] = v57[0];
    v57[34] = v57[0];
    uint64_t v58 = 0x7FF8000000000000;
    sub_18E06BA00((uint64_t)v64, v10, (uint64_t)&v59, (uint64_t)v57);
    sub_18E07A0A0((uint64_t)&v51, v27);
    v49[28] = &v51;
    v49[29] = v73;
    uint64_t v34 = *((void *)v13 + 11);
    v49[30] = &v65;
    v49[31] = v34;
    long long v50 = v72;
    sub_18E070E60((uint64_t)v49, 15);
    uint64_t v46 = 0x10000001ALL;
    long long v45 = xmmword_18E1FD600;
    v44[6] = &unk_1EDD186A8;
    int v47 = &v48;
    sub_18E06E85C((uint64_t)v44);
  }
  LOWORD(v51) = 12;
  LOBYTE(v39) = 4;
  double v33 = *((double *)v13 + 6) + (double)*((uint64_t *)v13 + 5);
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v51, (unsigned __int8 *)&v39, "time,%.3lf,h-function failure on line %d: %s() %s", v28, v29, v30, v31, v32, SLOBYTE(v33));
  return 0xFFFFFFFFLL;
}

void sub_18E053540(_Unwind_Exception *a1)
{
}

uint64_t sub_18E053790(uint64_t a1, double *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v66[4] = *(void (**)(uint64_t))MEMORY[0x1E4F143B8];
  unsigned int v5 = *(_DWORD *)(a4 + 8);
  if ((v5 & 0x80000000) != 0) {
    __assert_rtn("Zeros", "cnmatrix.h", 3098, "nr >= 0");
  }
  uint64_t v62 = 0x100000003;
  uint64_t v57 = &unk_1EDD18D98;
  uint64_t v63 = &v64;
  unsigned int v58 = v5;
  unsigned int v59 = 1;
  unsigned int v60 = v5;
  unsigned int v61 = v5;
  uint64_t v11 = (cnprint::CNPrinter *)sub_18DFE2CC8((uint64_t)&v57, 0.0);
  if (!*(unsigned char *)a1)
  {
    if (cnprint::CNPrinter::GetLogLevel(v11) <= 1)
    {
      LOWORD(v66[0]) = 2;
      unsigned __int8 v65 = 1;
      double v54 = a2[1] + (double)*(uint64_t *)a2;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v66, &v65, "MeasurementAccumulator::AddMeasurement() failed - Not initialized,t_meas,%.3lf", v17, v18, v19, v20, v21, SLOBYTE(v54));
    }
    return 0xFFFFFFFFLL;
  }
  if (*(_DWORD *)(a1 + 5936) == 174)
  {
    LOWORD(v66[0]) = 2;
    unsigned __int8 v65 = 2;
    double v53 = a2[1] + (double)*(uint64_t *)a2;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v66, &v65, "MeasurementAccumulator::AddMeasurement() failed - Out of space,t_meas,%.3lf", v12, v13, v14, v15, v16, SLOBYTE(v53));
    return 0xFFFFFFFFLL;
  }
  if (*(unsigned char *)(a1 + 1))
  {
    if (cnprint::CNPrinter::GetLogLevel(v11) <= 1)
    {
      LOWORD(v66[0]) = 2;
      unsigned __int8 v65 = 1;
      double v55 = a2[1] + (double)*(uint64_t *)a2;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v66, &v65, "MeasurementAccumulator::AddMeasurement() failed - Locked,t_meas,%.3lf", v22, v23, v24, v25, v26, SLOBYTE(v55));
    }
    return 0xFFFFFFFFLL;
  }
  BOOL v27 = sub_18DEE4CB8(a2, (double *)(a1 + 8));
  if (v27)
  {
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v27) <= 1)
    {
      LOWORD(v66[0]) = 2;
      unsigned __int8 v65 = 1;
      double v56 = a2[1] + (double)*(uint64_t *)a2;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v66, &v65, "MeasurementAccumulator::AddMeasurement() failed - Measurement too old,t_meas,%.3lf,t_start,%.3lf", v28, v29, v30, v31, v32, SLOBYTE(v56));
    }
    return 0xFFFFFFFFLL;
  }
  v66[0] = 0;
  v66[1] = 0;
  sub_18E07CF24(v66, a5);
  double v33 = sub_18E06C110((uint64_t *)(a1 + 40), v66);
  sub_18E067C60((uint64_t (**)(void, void, void, void, void))v66);
  uint64_t v34 = *(int *)(a1 + 5936);
  uint64_t v35 = (v34 + 1);
  if (*(void *)(a1 + 56) != v35)
  {
    LOWORD(v66[0]) = 2;
    unsigned __int8 v65 = 4;
    char v47 = (*(uint64_t (**)(uint64_t))(*(void *)a5 + 16))(a5);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v66, &v65, "MeasurementAccumulator::AddMeasurement() failed - allocation failed,meas_type,%d,t_meas,%.3lf", v48, v49, v50, v51, v52, v47);
    return 0xFFFFFFFFLL;
  }
  *(_DWORD *)(a1 + 5936) = v35;
  *(_DWORD *)(a1 + 72) = v35;
  *(_DWORD *)(a1 + 76) = 1;
  *(_DWORD *)(a1 + 80) = v35;
  *(_DWORD *)(a1 + 84) = v35;
  *(_DWORD *)(a1 + 2896) = v35;
  *(_DWORD *)(a1 + 2900) = 1;
  *(_DWORD *)(a1 + 2904) = v35;
  *(_DWORD *)(a1 + 2908) = v35;
  *(_DWORD *)(a1 + 3632) = v35;
  *(_DWORD *)(a1 + 3636) = 1;
  *(_DWORD *)(a1 + 3640) = v35;
  *(_DWORD *)(a1 + 3644) = v35;
  *(_DWORD *)(a1 + 5064) = v35;
  *(_DWORD *)(a1 + 5068) = 1;
  *(_DWORD *)(a1 + 5072) = v35;
  *(_DWORD *)(a1 + 5076) = v35;
  *(_DWORD *)(a1 + 5112) = v35;
  *(_DWORD *)(a1 + 5116) = 1;
  *(_DWORD *)(a1 + 5120) = v35;
  *(_DWORD *)(a1 + 5124) = v35;
  *(_DWORD *)(a1 + 5848) = v35;
  *(_DWORD *)(a1 + 5852) = 1;
  *(_DWORD *)(a1 + 5856) = v35;
  *(_DWORD *)(a1 + 5860) = v35;
  *(_DWORD *)(a1 + 5896) = v35;
  *(_DWORD *)(a1 + 5900) = 1;
  *(_DWORD *)(a1 + 5904) = v35;
  *(_DWORD *)(a1 + 5908) = v35;
  *(_DWORD *)(a1 + 5952) = v35;
  *(_DWORD *)(a1 + 5956) = 1;
  *(_DWORD *)(a1 + 5960) = v35;
  *(_DWORD *)(a1 + 5964) = v35;
  *(_DWORD *)(a1 + 7384) = v35;
  *(_DWORD *)(a1 + 7388) = 1;
  *(_DWORD *)(a1 + 7392) = v35;
  *(_DWORD *)(a1 + 7396) = v35;
  *(_OWORD *)(*(void *)(a1 + 96) + 16 * v34) = *(_OWORD *)a2;
  unsigned int v36 = *(_DWORD *)(a3 + 8);
  unsigned int v37 = *(_DWORD *)(a3 + 12);
  if (v36 <= v37) {
    int v38 = *(_DWORD *)(a3 + 12);
  }
  else {
    int v38 = *(_DWORD *)(a3 + 8);
  }
  if (v37) {
    BOOL v39 = v36 == 0;
  }
  else {
    BOOL v39 = 1;
  }
  if (v39) {
    int v40 = 0;
  }
  else {
    int v40 = v38;
  }
  *(_DWORD *)(*(void *)(a1 + 2920) + 4 * v34) = v40;
  sub_18DFE2F24(*(void *)(a1 + 5088) + (v34 << 6), a3);
  if (v58 <= v59) {
    unsigned int v41 = v59;
  }
  else {
    unsigned int v41 = v58;
  }
  if (v59) {
    BOOL v42 = v58 == 0;
  }
  else {
    BOOL v42 = 1;
  }
  if (v42) {
    unsigned int v43 = 0;
  }
  else {
    unsigned int v43 = v41;
  }
  *(_DWORD *)(*(void *)(a1 + 5136) + 4 * v34) = v43;
  sub_18DFE2F24(*(void *)(a1 + 5872) + (v34 << 6), (uint64_t)&v57);
  __n128 v44 = sub_18DFE2F24(*(void *)(a1 + 5920) + 112 * (int)v34, a4);
  *(void *)(*(void *)(a1 + 5976) + 8 * v34) = sub_18E051B18;
  long long v45 = (uint64_t (*)(uint64_t, void *, void, void *, void *, __n128))*v33;
  if (*v33) {
    long long v45 = (uint64_t (*)(uint64_t, void *, void, void *, void *, __n128))v45(3, v33, 0, &unk_1EDD06220, &std::__any_imp::__unique_typeinfo<raven::h_DeviceUserVelocityDifferenceMountedWithNHCArgs_RavenPNT<double>>::__id, v44);
  }
  uint64_t result = 0;
  *(void *)(*(void *)(a1 + 7408) + 8 * v34) = v45;
  return result;
}

void sub_18E053BBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (a2) {
    sub_18DEDD524(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_18E053BE8(uint64_t a1)
{
  *(void *)a1 = &unk_1EDD0A4E8;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

double sub_18E053C38@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>, float64x2_t a3@<Q0>)
{
  *(void *)(a2 + 24) = 0x100000003;
  *(void *)a2 = &unk_1EDD18D98;
  *(_OWORD *)(a2 + 8) = xmmword_18E1F6F60;
  *(void *)(a2 + 32) = a2 + 40;
  *(void *)&double result = *(_OWORD *)&sub_18DFE3240(a1, a2, a3);
  return result;
}

void sub_18E053C9C(_Unwind_Exception *a1)
{
  *uint64_t v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

double sub_18E053CBC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 24) = 0x100000003;
  *(void *)a3 = &unk_1EDD18D98;
  *(_OWORD *)(a3 + 8) = xmmword_18E1F6F60;
  *(void *)(a3 + 32) = a3 + 40;
  *(void *)&double result = *(_OWORD *)&sub_18DFEF1F4(a1, a2, a3);
  return result;
}

void sub_18E053D20(_Unwind_Exception *a1)
{
  *uint64_t v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

double sub_18E053D40(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 8);
  int v3 = *(_DWORD *)(a2 + 12);
  *(void *)&double result = 0x100000003;
  *(void *)(a1 + 24) = 0x100000003;
  *(void *)a1 = &unk_1EDD18D98;
  uint64_t v5 = (v3 * v2);
  uint64_t v6 = (double *)(a1 + 40);
  *(void *)(a1 + 32) = a1 + 40;
  *(_DWORD *)(a1 + 8) = v2;
  *(_DWORD *)(a1 + 12) = v3;
  *(_DWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 20) = v2;
  if ((int)v5 >= 1)
  {
    uint64_t v7 = *(double **)(a2 + 32);
    do
    {
      double v8 = *v7++;
      double result = fabs(v8);
      *v6++ = result;
      --v5;
    }
    while (v5);
  }
  return result;
}

uint64_t sub_18E053DA4(uint64_t a1)
{
  MEMORY[0x1F4188790](a1);
  uint64_t v261 = *MEMORY[0x1E4F143B8];
  if (!v3
    || (uint64_t v9 = v6,
        uint64_t v10 = v5,
        uint64_t v11 = v4,
        uint64_t v12 = v2,
        uint64_t v13 = v1,
        (uint64_t v14 = (char *)__dynamic_cast(v3, (const struct __class_type_info *)&unk_1EDD02A78, (const struct __class_type_info *)&unk_1EDD06130, 0)) == 0))
  {
    LOWORD(v255) = 12;
    v206.i8[0] = 4;
    double v98 = MEMORY[0x30] + (double)MEMORY[0x28];
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v255, (unsigned __int8 *)&v206, "time,%.3lf,h-function failure on line %d: %s() %s", v4, v5, v6, v7, v8, SLOBYTE(v98));
    return 0xFFFFFFFFLL;
  }
  uint64_t v15 = v14;
  unsigned int v17 = *(_DWORD *)(v13 + 8);
  unsigned int v16 = *(_DWORD *)(v13 + 12);
  if (v17 <= v16) {
    int v18 = *(_DWORD *)(v13 + 12);
  }
  else {
    int v18 = *(_DWORD *)(v13 + 8);
  }
  if (!v17
    || !v16
    || v18 != 26
    || ((v20 = *(_DWORD *)(v12 + 8), unsigned int v19 = *(_DWORD *)(v12 + 12), v20 <= v19)
      ? (int v21 = *(_DWORD *)(v12 + 12))
      : (int v21 = *(_DWORD *)(v12 + 8)),
        !v20 || !v19 || v21 != 3 || !*((void *)v14 + 7)))
  {
    LOWORD(v255) = 12;
    v206.i8[0] = 4;
    double v34 = *((double *)v14 + 6) + (double)*((uint64_t *)v14 + 5);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v255, (unsigned __int8 *)&v206, "time,%.3lf,h-function failure on line %d: %s() %s", v4, v5, v6, v7, v8, SLOBYTE(v34));
    return 0xFFFFFFFFLL;
  }
  if ((*((void *)v14 + 15) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (*((void *)v14 + 16) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (*((void *)v14 + 17) & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    sprintf((char *)&v255, "invalid rate gyro measurement %lg,%lg,%lg", *((double *)v14 + 15), *((double *)v14 + 16), *((double *)v14 + 17));
    v206.i16[0] = 12;
    LOBYTE(v157[0]) = 4;
    double v36 = *((double *)v15 + 6) + (double)*((uint64_t *)v15 + 5);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v206, (unsigned __int8 *)v157, "time,%.3lf,h-function failure on line %d: %s() %s", v37, v38, v39, v40, v41, SLOBYTE(v36));
    return 0xFFFFFFFFLL;
  }
  long long v254 = *(_OWORD *)(v14 + 40);
  uint64_t v22 = *((void *)v14 + 9);
  long long v253 = *(_OWORD *)*((void *)v14 + 8);
  sub_18E07FB20((uint64_t)v252, v22);
  uint64_t v23 = *((void *)v15 + 11);
  int v24 = **((unsigned __int8 **)v15 + 10);
  double v26 = *((double *)v15 + 15);
  double v25 = *((double *)v15 + 16);
  double v27 = *((double *)v15 + 17);
  uint64_t v28 = *((void *)v15 + 7);
  uint64_t v249 = 0x10000001CLL;
  long long v248 = xmmword_18E1FD5F0;
  uint64_t v247 = &unk_1EDD188B8;
  double v250 = &v251;
  uint64_t v33 = (uint64_t)(v15 + 40);
  if (sub_18E0786E0((uint64_t)&v254, &v253, (uint64_t)v252, v28, v23, v24, 1, 1, (uint64_t)&v247))
  {
    sub_18E06B804(v33, (uint64_t)"could not integrate full states", (uint64_t)"h_DeviceUserVelocityDifference_RavenPNT", 3628, v29, v30, v31, v32);
    return 0xFFFFFFFFLL;
  }
  uint64_t v244 = 0x10000001CLL;
  uint64_t v242 = &unk_1EDD188B8;
  long long v243 = xmmword_18E1FD5F0;
  char v245 = (double *)&v246;
  int64x2_t v206 = vdupq_n_s64(0x7FF8000000000000uLL);
  int64x2_t v207 = v206;
  int64x2_t v208 = v206;
  int64x2_t v209 = v206;
  int64x2_t v210 = v206;
  int64x2_t v211 = v206;
  int64x2_t v212 = v206;
  int64x2_t v213 = v206;
  int64x2_t v214 = v206;
  int64x2_t v215 = v206;
  int64x2_t v216 = v206;
  int64x2_t v217 = v206;
  int64x2_t v218 = v206;
  int64x2_t v219 = v206;
  int64x2_t v220 = v206;
  int64x2_t v221 = v206;
  int64x2_t v222 = v206;
  int64x2_t v223 = v206;
  int64x2_t v224 = v206;
  int64x2_t v225 = v206;
  int64x2_t v226 = v206;
  int64x2_t v227 = v206;
  int64x2_t v228 = v206;
  int64x2_t v229 = v206;
  int64x2_t v230 = v206;
  int64x2_t v231 = v206;
  int64x2_t v232 = v206;
  int64x2_t v233 = v206;
  int64x2_t v234 = v206;
  int64x2_t v235 = v206;
  int64x2_t v236 = v206;
  int64x2_t v237 = v206;
  int64x2_t v238 = v206;
  int64x2_t v239 = v206;
  int64x2_t v240 = v206;
  double v241 = NAN;
  LOBYTE(v255) = 0;
  if (sub_18E06EC84((uint64_t)&v247, v13, v24, 1, 1, (uint64_t)&v242, (uint64_t)&v206, (BOOL *)&v255, 0.000000015))
  {
    sub_18E06B804(v33, (uint64_t)"could not correct states", (uint64_t)"h_DeviceUserVelocityDifference_RavenPNT", 3637, v42, v43, v44, v45);
    return 0xFFFFFFFFLL;
  }
  uint64_t v46 = v245;
  double v48 = v245[24];
  double v47 = v245[25];
  double v49 = v245[26];
  double v50 = v245[27];
  if (v24)
  {
    if (v24 == 1)
    {
      double v51 = v245[6];
      double v52 = v245[7];
      double v53 = v245[8];
      double v54 = v245[9];
      double v55 = sqrt(v52 * v52 + v51 * v51 + v53 * v53 + v54 * v54);
      double v56 = 1.0;
      double v57 = 0.0;
      double v58 = 0.0;
      double v59 = 0.0;
      double v60 = 0.0;
      double v61 = 1.0;
      if (fabs(v55) >= 2.22044605e-16)
      {
        double v58 = v51 / v55;
        double v59 = v52 / v55;
        double v60 = v53 / v55;
        double v61 = v54 / v55;
      }
      double v62 = sqrt(v59 * v59 + v58 * v58 + v60 * v60 + v61 * v61);
      double v63 = 0.0;
      double v64 = 0.0;
      if (fabs(v62) >= 2.22044605e-16)
      {
        double v57 = -v58 / v62;
        double v63 = -v59 / v62;
        double v64 = -v60 / v62;
        double v56 = v61 / v62;
      }
      v203.f64[0] = v57;
      v203.f64[1] = v63;
      double v204 = v64;
      double v205 = v56;
      cnrotation::CNRotation::RotationMatrix((cnrotation::CNRotation *)&v203, (uint64_t)v202);
      uint64_t v199 = 0x100000003;
      long long v198 = xmmword_18E1F6F60;
      double v197 = &unk_1EDD18D98;
      double v200 = v201;
      *(double *)double v201 = v245[3];
      *(double *)&v201[1] = v245[4];
      *(double *)&v201[2] = v245[5];
      uint64_t v194 = 0x100000003;
      long long v193 = xmmword_18E1F6F60;
      uint64_t v192 = &unk_1EDD18D98;
      uint64_t v195 = v196;
      v196[0] = v48 * v47;
      v196[1] = v48 * v49;
      v196[2] = v48 * v50;
      double v65 = v26 - v245[10];
      double v66 = v25 - v245[11];
      double v67 = v27 - v245[12];
      uint64_t v189 = 0x100000003;
      long long v188 = xmmword_18E1F6F60;
      v187[9] = &unk_1EDD18D98;
      uint64_t v190 = v191;
      *(double *)uint64_t v191 = v65;
      *(double *)&v191[1] = v66;
      *(double *)&v191[2] = v67;
      uint64_t v185 = 0x300000003;
      long long v184 = xmmword_18E1F0010;
      uint64_t v183 = &unk_1EDD18EE8;
      uint64_t v186 = v187;
      v187[0] = 0;
      *(double *)&v187[3] = -v67;
      v187[4] = 0;
      *(double *)&v187[7] = -v65;
      *(double *)&v187[1] = v67;
      *(double *)&v187[2] = -v66;
      *(double *)&v187[6] = v66;
      *(double *)&v187[5] = v65;
      v187[8] = 0;
      uint64_t v180 = 0x100000007;
      long long v179 = xmmword_18E1FD680;
      uint64_t v178 = &unk_1EDD197E8;
      double v181 = (double *)&v182;
      v157[0] = vdupq_n_s64(0x7FF8000000000000uLL);
      v157[1] = v157[0];
      v157[2] = v157[0];
      v157[3] = v157[0];
      v157[4] = v157[0];
      v157[5] = v157[0];
      v157[6] = v157[0];
      v157[7] = v157[0];
      v157[8] = v157[0];
      v157[9] = v157[0];
      v157[10] = v157[0];
      v157[11] = v157[0];
      v157[12] = v157[0];
      v157[13] = v157[0];
      v157[14] = v157[0];
      v157[15] = v157[0];
      long long v158 = v157[0];
      long long v159 = v157[0];
      long long v160 = v157[0];
      long long v161 = v157[0];
      long long v162 = v157[0];
      long long v163 = v157[0];
      long long v164 = v157[0];
      long long v165 = v157[0];
      long long v166 = v157[0];
      long long v167 = v157[0];
      long long v168 = v157[0];
      long long v169 = v157[0];
      long long v170 = v157[0];
      long long v171 = v157[0];
      long long v172 = v157[0];
      long long v173 = v157[0];
      long long v174 = v157[0];
      long long v175 = v157[0];
      long long v176 = v157[0];
      uint64_t v177 = 0x7FF8000000000000;
      LOBYTE(v255) = 0;
      if (sub_18E06F128((uint64_t)&v247, v13, 0, (uint64_t)&v178, (uint64_t)v157, (BOOL *)&v255, 0.000000015))
      {
        sub_18E06B804(v33, (uint64_t)"could not correct user states", (uint64_t)"h_DeviceUserVelocityDifference_RavenPNT", 3738, v68, v69, v70, v71);
        return 0xFFFFFFFFLL;
      }
      double v99 = *v181;
      double v100 = v181[1];
      double v78 = v181[2];
      uint64_t v154 = 0x100000003;
      uint64_t v152 = &unk_1EDD18D98;
      long long v153 = xmmword_18E1F6F60;
      uint64_t v155 = v156;
      v156[0] = -v99;
      v156[1] = -v100;
      v156[2] = -v78;
      sub_18E0300B4((uint64_t)&v183, (uint64_t)&v152, (uint64_t)v151);
      sub_18E0300B4((uint64_t)v202, (uint64_t)v151, (uint64_t)&v255);
      sub_18E053CBC((uint64_t)&v192, (uint64_t)&v255, (uint64_t)v150);
      sub_18E01E318((uint64_t)&v197, (uint64_t)v150, (uint64_t)v147);
      sub_18E053CBC((uint64_t)v147, v12, (uint64_t)&v255);
      sub_18DFE2F24(v11, (uint64_t)&v255);
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EB403B50, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_1EB403B50))
      {
        uint64_t v257 = 0x300000001;
        double v255 = &unk_1EDD18258;
        __n128 v258 = &v259;
        long long v256 = xmmword_18E1F8560;
        uint64_t v259 = 0x400000003;
        int v260 = 5;
        sub_18DFEC63C((uint64_t)&v255, (uint64_t)&unk_1EB403F38);
        __cxa_atexit((void (*)(void *))sub_18DFE2E9C, &unk_1EB403F38, &dword_18DEDB000);
        __cxa_guard_release(&qword_1EB403B50);
      }
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EB403B58, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_1EB403B58))
      {
        uint64_t v257 = 0x300000001;
        double v255 = &unk_1EDD18258;
        __n128 v258 = &v259;
        long long v256 = xmmword_18E1F8560;
        uint64_t v259 = 0x700000006;
        int v260 = 8;
        sub_18DFEC63C((uint64_t)&v255, (uint64_t)&unk_1EB403F70);
        __cxa_atexit((void (*)(void *))sub_18DFE2E9C, &unk_1EB403F70, &dword_18DEDB000);
        __cxa_guard_release(&qword_1EB403B58);
      }
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EB403B60, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_1EB403B60))
      {
        uint64_t v257 = 0x300000001;
        double v255 = &unk_1EDD18258;
        __n128 v258 = &v259;
        long long v256 = xmmword_18E1F8560;
        uint64_t v259 = 0xA00000009;
        int v260 = 11;
        sub_18DFEC63C((uint64_t)&v255, (uint64_t)&unk_1EB403FA8);
        __cxa_atexit((void (*)(void *))sub_18DFE2E9C, &unk_1EB403FA8, &dword_18DEDB000);
        __cxa_guard_release(&qword_1EB403B60);
      }
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EB403B68, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_1EB403B68))
      {
        uint64_t v257 = 0x300000001;
        double v255 = &unk_1EDD18258;
        __n128 v258 = &v259;
        long long v256 = xmmword_18E1F8560;
        uint64_t v259 = 0x1500000014;
        int v260 = 22;
        sub_18DFEC63C((uint64_t)&v255, (uint64_t)&unk_1EB403FE0);
        __cxa_atexit((void (*)(void *))sub_18DFE2E9C, &unk_1EB403FE0, &dword_18DEDB000);
        __cxa_guard_release(&qword_1EB403B68);
      }
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EB403B70, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_1EB403B70))
      {
        uint64_t v257 = 0x300000001;
        double v255 = &unk_1EDD18258;
        __n128 v258 = &v259;
        long long v256 = xmmword_18E1F8560;
        uint64_t v259 = 0x1800000017;
        int v260 = 25;
        sub_18DFEC63C((uint64_t)&v255, (uint64_t)&unk_1EB404018);
        __cxa_atexit((void (*)(void *))sub_18DFE2E9C, &unk_1EB404018, &dword_18DEDB000);
        __cxa_guard_release(&qword_1EB403B70);
      }
      sub_18E060330(3u, 3u, (uint64_t)v147);
      int64x2_t v79 = v149;
      *BOOL v149 = v207.i64[1];
      int v80 = v148;
      v79[v148 + 1] = v208.i64[0];
      v79[2 * v80 + 2] = v208.i64[1];
      uint64_t v144 = 0x100000003;
      long long v143 = xmmword_18E1F6F60;
      uint64_t v142 = &unk_1EDD18D98;
      uint64_t v145 = v146;
      v146[0] = -v47;
      v146[1] = -v49;
      v146[2] = -v50;
      uint64_t v138 = 0x300000001;
      long long v137 = xmmword_18E1F8560;
      uint64_t v136 = &unk_1EDD18228;
      int8x16_t v139 = &v140;
      int64x2_t v140 = v231;
      uint64_t v141 = v232.i64[0];
      sub_18E05B1C8(3, 1, (uint64_t)&v125);
      v81.f64[0] = -v48;
      sub_18E053C38((uint64_t)&v125, (uint64_t)&v130, v81);
      sub_18E07D118((uint64_t)&v255, (uint64_t)&v130);
      sub_18DFEF108((uint64_t)v135, (uint64_t)&v255);
      uint64_t v132 = 0x300000003;
      long long v131 = xmmword_18E1F0010;
      BOOL v130 = &unk_1EDD18EE8;
      char v133 = v134;
      v134[0] = v232.i64[1];
      v134[1] = v235.i64[1];
      v134[6] = v233.i64[1];
      v134[7] = v236.i64[1];
      v134[3] = v233.i64[0];
      v134[2] = v238.i64[1];
      v134[4] = v236.i64[0];
      v134[8] = v239.i64[1];
      v134[5] = v239.i64[0];
      uint64_t v127 = 0x300000003;
      long long v126 = xmmword_18E1F0010;
      int8x16_t v125 = &unk_1EDD18EE8;
      double v128 = v129;
      v129[0] = v234.i64[0];
      v129[1] = v237.i64[0];
      v129[6] = v235.i64[0];
      v129[7] = v238.i64[0];
      v129[3] = v234.i64[1];
      v129[2] = v240.i64[0];
      v129[4] = v237.i64[1];
      v129[5] = v240.i64[1];
      *(double *)&v129[8] = v241;
      cnrotation::CNRotation::dRdq1((cnrotation::CNRotation *)&v203, (uint64_t)v124);
      cnrotation::CNRotation::dRdq2((cnrotation::CNRotation *)&v203, (uint64_t)v123);
      cnrotation::CNRotation::dRdq3((cnrotation::CNRotation *)&v203, (uint64_t)v122);
      cnrotation::CNRotation::dRdq4(&v203, (uint64_t)v121);
      *(void *)&v82.f64[0] = v209.i64[0];
      sub_18E060288((uint64_t)v118, (uint64_t)v124, v82);
      *(void *)&v83.f64[0] = v210.i64[1];
      sub_18E060288((uint64_t)v117, (uint64_t)v123, v83);
      sub_18E01E39C((uint64_t)v118, (uint64_t)v117, (uint64_t)v119);
      *(void *)&v84.f64[0] = v212.i64[0];
      sub_18E060288((uint64_t)&v112, (uint64_t)v122, v84);
      sub_18E01E39C((uint64_t)v119, (uint64_t)&v112, (uint64_t)&v255);
      *(void *)&v85.f64[0] = v213.i64[1];
      sub_18E060288((uint64_t)v111, (uint64_t)v121, v85);
      sub_18E01E39C((uint64_t)&v255, (uint64_t)v111, (uint64_t)v120);
      *(void *)&v86.f64[0] = v209.i64[1];
      sub_18E060288((uint64_t)v117, (uint64_t)v124, v86);
      *(void *)&v87.f64[0] = v211.i64[0];
      sub_18E060288((uint64_t)&v112, (uint64_t)v123, v87);
      sub_18E01E39C((uint64_t)v117, (uint64_t)&v112, (uint64_t)v118);
      *(void *)&v88.f64[0] = v212.i64[1];
      sub_18E060288((uint64_t)v111, (uint64_t)v122, v88);
      sub_18E01E39C((uint64_t)v118, (uint64_t)v111, (uint64_t)&v255);
      *(void *)&v89.f64[0] = v214.i64[0];
      sub_18E060288((uint64_t)v108, (uint64_t)v121, v89);
      sub_18E01E39C((uint64_t)&v255, (uint64_t)v108, (uint64_t)v119);
      *(void *)&v90.f64[0] = v210.i64[0];
      sub_18E060288((uint64_t)&v112, (uint64_t)v124, v90);
      *(void *)&v91.f64[0] = v211.i64[1];
      sub_18E060288((uint64_t)v111, (uint64_t)v123, v91);
      sub_18E01E39C((uint64_t)&v112, (uint64_t)v111, (uint64_t)v117);
      *(void *)&v92.f64[0] = v213.i64[0];
      sub_18E060288((uint64_t)v108, (uint64_t)v122, v92);
      sub_18E01E39C((uint64_t)v117, (uint64_t)v108, (uint64_t)&v255);
      *(void *)&v93.f64[0] = v214.i64[1];
      sub_18E060288((uint64_t)v107, (uint64_t)v121, v93);
      sub_18E01E39C((uint64_t)&v255, (uint64_t)v107, (uint64_t)v118);
      sub_18E0300B4((uint64_t)v120, (uint64_t)v151, (uint64_t)v111);
      sub_18E0300B4((uint64_t)v119, (uint64_t)v151, (uint64_t)v108);
      sub_18E0300B4((uint64_t)v118, (uint64_t)v151, (uint64_t)v107);
      sub_18E07D1E8((uint64_t)&v112, (uint64_t)v108, (uint64_t)v107);
      sub_18E07D160((uint64_t)&v255, (uint64_t)v111, (uint64_t)&v112);
      sub_18E06041C((uint64_t)&v255, (uint64_t)v117);
      uint64_t v114 = 0x300000003;
      uint64_t v112 = &unk_1EDD18EE8;
      long long v113 = xmmword_18E1F0010;
      int v115 = v116;
      v116[0] = 0;
      *(double *)&v116[3] = v78;
      v116[4] = 0;
      *(double *)&v116[7] = v99;
      *(double *)&v116[1] = -v78;
      *(double *)&v116[2] = v100;
      *(double *)&v116[6] = -v100;
      *(double *)&v116[5] = -v99;
      v116[8] = 0;
      sub_18DFF6360((uint64_t)v202, (uint64_t)&v112, (uint64_t)v111);
      sub_18DFEB238(3, 3, (uint64_t)v108);
      int64x2_t v94 = v110;
      *uint64_t v110 = -*(double *)v215.i64;
      int v95 = v109;
      v94[v109 + 1] = -*(double *)&v215.i64[1];
      v94[2 * v95 + 2] = -*(double *)v216.i64;
      sub_18E06041C((uint64_t)v202, (uint64_t)&v255);
      sub_18DFF6360((uint64_t)&v255, (uint64_t)&v183, (uint64_t)v107);
      sub_18E060330(3u, 3u, (uint64_t)v104);
      int64x2_t v96 = v106;
      *long long v106 = -*((double *)&v158 + 1);
      int v97 = v105;
      v96[v105 + 1] = -*((double *)&v162 + 1);
      v96[2 * v97 + 2] = -*((double *)&v166 + 1);
      sub_18E06BD44((uint64_t)&v255, 26);
      sub_18DFE2F24(v10, (uint64_t)&v255);
      sub_18E07C9DC((uint64_t)&v255, v10, (uint64_t)&unk_1EB403F38);
      sub_18DFEC6E4((uint64_t)&v255, (uint64_t)v147);
      sub_18DFF6360((uint64_t)v135, (uint64_t)&v130, (uint64_t)v102);
      sub_18E01E39C((uint64_t)v102, (uint64_t)v117, (uint64_t)v103);
      sub_18E07C9DC((uint64_t)&v255, v10, (uint64_t)&unk_1EB403F70);
      sub_18DFEC6E4((uint64_t)&v255, (uint64_t)v103);
      sub_18DFF6360((uint64_t)v111, (uint64_t)v108, (uint64_t)v103);
      sub_18E07C9DC((uint64_t)&v255, v10, (uint64_t)&unk_1EB403FA8);
      sub_18DFEC6E4((uint64_t)&v255, (uint64_t)v103);
      sub_18DFF6360((uint64_t)v107, (uint64_t)v104, (uint64_t)v103);
      sub_18E07C9DC((uint64_t)&v255, v10, (uint64_t)&unk_1EB403FE0);
      sub_18DFEC6E4((uint64_t)&v255, (uint64_t)v103);
      sub_18E07D294((uint64_t)&v142, (uint64_t)&v136, (uint64_t)v102);
      sub_18DFF6360((uint64_t)v135, (uint64_t)&v125, (uint64_t)v101);
      sub_18E01E39C((uint64_t)v102, (uint64_t)v101, (uint64_t)v103);
      sub_18E07C9DC((uint64_t)&v255, v10, (uint64_t)&unk_1EB404018);
      sub_18DFEC6E4((uint64_t)&v255, (uint64_t)v103);
    }
    else if (v24 == 2)
    {
      __assert_rtn("h_DeviceUserVelocityDifference_RavenPNT", "ravenmeasurementfunctions.h", 3862, "false && \"Unexpected case RavenPNTEstimatorStateParameterization::ParameterizationCount\"");
    }
  }
  else
  {
    *(_OWORD *)(v11 + 8) = xmmword_18E1F6F60;
    long long v72 = *(double **)(v12 + 32);
    int64x2_t v73 = *(double **)(v11 + 32);
    double *v73 = v46[3] - v48 * v47 + *v72;
    v73[1] = v46[4] - v48 * v49 + v72[1];
    _OWORD v73[2] = v46[5] - v48 * v50 + v72[2];
    sub_18E06BD44((uint64_t)&v255, 26);
    sub_18DFE2F24(v10, (uint64_t)&v255);
    int v74 = *(_DWORD *)(v10 + 20);
    int v75 = 3 * v74;
    uint64_t v76 = *(void *)(v10 + 32);
    *(void *)(v76 + 24 * v74) = v207.i64[1];
    *(void *)(v76 + 8 * ((4 * v74) | 1)) = v208.i64[0];
    *(void *)(v76 + 8 * (5 * v74 + 2)) = v208.i64[1];
    int v77 = 23 * v74;
    *(double *)(v76 + 184 * v74) = -(v48 * *(double *)v234.i64) - v47 * *(double *)v231.i64;
    *(double *)(v76 + 192 * v74) = -(v48 * *(double *)&v234.i64[1]) - v47 * *(double *)&v231.i64[1];
    v74 *= 25;
    *(double *)(v76 + 8 * v74) = -(v48 * *(double *)v235.i64) - v47 * *(double *)v232.i64;
    *(double *)(v76 + 8 * (v77 + 1)) = -(v48 * *(double *)v237.i64) - v49 * *(double *)v231.i64;
    *(double *)(v76 + 8 * ((8 * v75) | 1)) = -(v48 * *(double *)&v237.i64[1]) - v49 * *(double *)&v231.i64[1];
    *(double *)(v76 + 8 * (v74 + 1)) = -(v48 * *(double *)v238.i64) - v49 * *(double *)v232.i64;
    *(double *)(v76 + 8 * (v77 + 2)) = -(v48 * *(double *)v240.i64) - v50 * *(double *)v231.i64;
    *(double *)(v76 + 8 * ((8 * v75) | 2)) = -(v48 * *(double *)&v240.i64[1]) - v50 * *(double *)&v231.i64[1];
    *(double *)(v76 + 8 * (v74 + 2)) = -(v48 * v241) - v50 * *(double *)v232.i64;
  }
  sub_18E060330(3u, 3u, (uint64_t)&v255);
  sub_18DFE2F24(v9, (uint64_t)&v255);
  return 0;
}

void sub_18E055348(_Unwind_Exception *a1)
{
}

uint64_t sub_18E05546C(uint64_t a1)
{
  *(void *)(a1 + 96) = &unk_1EDD0A3C0;
  *(void *)a1 = &unk_1EDD0A4E8;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

uint64_t sub_18E0554DC(uint64_t a1, double *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v68[4] = *(void (**)(uint64_t))MEMORY[0x1E4F143B8];
  unsigned int v6 = *(_DWORD *)(a4 + 8);
  if ((v6 & 0x80000000) != 0) {
    __assert_rtn("Zeros", "cnmatrix.h", 3098, "nr >= 0");
  }
  uint64_t v64 = 0x100000003;
  double v59 = &unk_1EDD18D98;
  double v65 = &v66;
  unsigned int v60 = v6;
  unsigned int v61 = 1;
  unsigned int v62 = v6;
  unsigned int v63 = v6;
  uint64_t v13 = (cnprint::CNPrinter *)sub_18DFE2CC8((uint64_t)&v59, 0.0);
  if (!*(unsigned char *)a1)
  {
    if (cnprint::CNPrinter::GetLogLevel(v13) <= 1)
    {
      LOWORD(v68[0]) = 2;
      unsigned __int8 v67 = 1;
      double v56 = a2[1] + (double)*(uint64_t *)a2;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v68, &v67, "MeasurementAccumulator::AddMeasurement() failed - Not initialized,t_meas,%.3lf", v19, v20, v21, v22, v23, SLOBYTE(v56));
    }
    return 0xFFFFFFFFLL;
  }
  if (*(_DWORD *)(a1 + 5936) == 174)
  {
    LOWORD(v68[0]) = 2;
    unsigned __int8 v67 = 2;
    double v55 = a2[1] + (double)*(uint64_t *)a2;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v68, &v67, "MeasurementAccumulator::AddMeasurement() failed - Out of space,t_meas,%.3lf", v14, v15, v16, v17, v18, SLOBYTE(v55));
    return 0xFFFFFFFFLL;
  }
  if (*(unsigned char *)(a1 + 1))
  {
    if (cnprint::CNPrinter::GetLogLevel(v13) <= 1)
    {
      LOWORD(v68[0]) = 2;
      unsigned __int8 v67 = 1;
      double v57 = a2[1] + (double)*(uint64_t *)a2;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v68, &v67, "MeasurementAccumulator::AddMeasurement() failed - Locked,t_meas,%.3lf", v24, v25, v26, v27, v28, SLOBYTE(v57));
    }
    return 0xFFFFFFFFLL;
  }
  BOOL v29 = sub_18DEE4CB8(a2, (double *)(a1 + 8));
  if (v29)
  {
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v29) <= 1)
    {
      LOWORD(v68[0]) = 2;
      unsigned __int8 v67 = 1;
      double v58 = a2[1] + (double)*(uint64_t *)a2;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v68, &v67, "MeasurementAccumulator::AddMeasurement() failed - Measurement too old,t_meas,%.3lf,t_start,%.3lf", v30, v31, v32, v33, v34, SLOBYTE(v58));
    }
    return 0xFFFFFFFFLL;
  }
  v68[0] = 0;
  v68[1] = 0;
  sub_18E07D834(v68, a6);
  uint64_t v35 = sub_18E06C110((uint64_t *)(a1 + 40), v68);
  sub_18E067C60((uint64_t (**)(void, void, void, void, void))v68);
  uint64_t v36 = *(int *)(a1 + 5936);
  uint64_t v37 = (v36 + 1);
  if (*(void *)(a1 + 56) != v37)
  {
    LOWORD(v68[0]) = 2;
    unsigned __int8 v67 = 4;
    char v49 = (*(uint64_t (**)(uint64_t))(*(void *)a6 + 16))(a6);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v68, &v67, "MeasurementAccumulator::AddMeasurement() failed - allocation failed,meas_type,%d,t_meas,%.3lf", v50, v51, v52, v53, v54, v49);
    return 0xFFFFFFFFLL;
  }
  *(_DWORD *)(a1 + 5936) = v37;
  *(_DWORD *)(a1 + 72) = v37;
  *(_DWORD *)(a1 + 76) = 1;
  *(_DWORD *)(a1 + 80) = v37;
  *(_DWORD *)(a1 + 84) = v37;
  *(_DWORD *)(a1 + 2896) = v37;
  *(_DWORD *)(a1 + 2900) = 1;
  *(_DWORD *)(a1 + 2904) = v37;
  *(_DWORD *)(a1 + 2908) = v37;
  *(_DWORD *)(a1 + 3632) = v37;
  *(_DWORD *)(a1 + 3636) = 1;
  *(_DWORD *)(a1 + 3640) = v37;
  *(_DWORD *)(a1 + 3644) = v37;
  *(_DWORD *)(a1 + 5064) = v37;
  *(_DWORD *)(a1 + 5068) = 1;
  *(_DWORD *)(a1 + 5072) = v37;
  *(_DWORD *)(a1 + 5076) = v37;
  *(_DWORD *)(a1 + 5112) = v37;
  *(_DWORD *)(a1 + 5116) = 1;
  *(_DWORD *)(a1 + 5120) = v37;
  *(_DWORD *)(a1 + 5124) = v37;
  *(_DWORD *)(a1 + 5848) = v37;
  *(_DWORD *)(a1 + 5852) = 1;
  *(_DWORD *)(a1 + 5856) = v37;
  *(_DWORD *)(a1 + 5860) = v37;
  *(_DWORD *)(a1 + 5896) = v37;
  *(_DWORD *)(a1 + 5900) = 1;
  *(_DWORD *)(a1 + 5904) = v37;
  *(_DWORD *)(a1 + 5908) = v37;
  *(_DWORD *)(a1 + 5952) = v37;
  *(_DWORD *)(a1 + 5956) = 1;
  *(_DWORD *)(a1 + 5960) = v37;
  *(_DWORD *)(a1 + 5964) = v37;
  *(_DWORD *)(a1 + 7384) = v37;
  *(_DWORD *)(a1 + 7388) = 1;
  *(_DWORD *)(a1 + 7392) = v37;
  *(_DWORD *)(a1 + 7396) = v37;
  *(_OWORD *)(*(void *)(a1 + 96) + 16 * v36) = *(_OWORD *)a2;
  unsigned int v38 = *(_DWORD *)(a3 + 8);
  unsigned int v39 = *(_DWORD *)(a3 + 12);
  if (v38 <= v39) {
    int v40 = *(_DWORD *)(a3 + 12);
  }
  else {
    int v40 = *(_DWORD *)(a3 + 8);
  }
  if (v39) {
    BOOL v41 = v38 == 0;
  }
  else {
    BOOL v41 = 1;
  }
  if (v41) {
    int v42 = 0;
  }
  else {
    int v42 = v40;
  }
  *(_DWORD *)(*(void *)(a1 + 2920) + 4 * v36) = v42;
  sub_18DFE2F24(*(void *)(a1 + 5088) + (v36 << 6), a3);
  if (v60 <= v61) {
    unsigned int v43 = v61;
  }
  else {
    unsigned int v43 = v60;
  }
  if (v61) {
    BOOL v44 = v60 == 0;
  }
  else {
    BOOL v44 = 1;
  }
  if (v44) {
    unsigned int v45 = 0;
  }
  else {
    unsigned int v45 = v43;
  }
  *(_DWORD *)(*(void *)(a1 + 5136) + 4 * v36) = v45;
  sub_18DFE2F24(*(void *)(a1 + 5872) + (v36 << 6), (uint64_t)&v59);
  __n128 v46 = sub_18DFE2F24(*(void *)(a1 + 5920) + 112 * (int)v36, a4);
  *(void *)(*(void *)(a1 + 5976) + 8 * v36) = a5;
  double v47 = (uint64_t (*)(uint64_t, void *, void, void *, void *, __n128))*v35;
  if (*v35) {
    double v47 = (uint64_t (*)(uint64_t, void *, void, void *, void *, __n128))v47(3, v35, 0, &unk_1EDD06130, &std::__any_imp::__unique_typeinfo<raven::h_DeviceUserVelocityDifferenceArgs_RavenPNT<double>>::__id, v46);
  }
  uint64_t result = 0;
  *(void *)(*(void *)(a1 + 7408) + 8 * v36) = v47;
  return result;
}

void sub_18E055900(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (a2) {
    sub_18DEDD524(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t raven::RavenPNTEstimator::PredictAndUpdate(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a1 + 58)) {
    return 32;
  }
  uint64_t v3 = a1 + 61288;
  int8x16_t v105 = *(int8x16_t *)a2;
  double v4 = *(double *)(a2 + 16);
  if (v4 < 0.0)
  {
    uint64_t v5 = (__n128 *)(a1 + 80);
    sub_18E05FB70(a1 + 61288);
    *(unsigned char *)uint64_t v3 = 0;
    sub_18E059804(v3, v5, v6, v7, v8, v9, v10, v11);
    return 64;
  }
  if (v4 <= 0.0) {
    return 0;
  }
  if (sub_18DEE8C5C((double *)v105.i64, (double *)(a1 + 61296)))
  {
    v85.i16[0] = 2;
    LOBYTE(v84[0]) = 4;
    uint64_t v19 = (cnprint::CNPrinter *)&v85;
    uint64_t v20 = (unsigned __int8 *)v84;
    goto LABEL_56;
  }
  int8x16_t v21 = v105;
  *(int8x16_t *)(a1 + 61312) = v105;
  uint64_t v22 = CNTimeSpan::operator-(a1 + 61312, (void *)(a1 + 61296), v21, v18);
  uint64_t v25 = *(unsigned int *)(v3 + 5936);
  if ((int)v25 >= 1)
  {
    uint64_t v26 = 0;
    *(double *)v24.i64 = (double)v22;
    double v27 = v23 + (double)v22;
    uint64_t v28 = *(int8x16_t **)(v3 + 96);
    while (1)
    {
      int8x16_t v85 = *v28;
      *(double *)v24.i64 = (double)CNTimeSpan::operator-((uint64_t)&v85, (void *)(a1 + 61296), v85, v24);
      double v30 = (v29 + *(double *)v24.i64) / v27;
      if (v30 < 0.0) {
        break;
      }
      *(double *)(*(void *)(v3 + 3656) + v26) = v30;
      v26 += 8;
      ++v28;
      if (8 * v25 == v26) {
        goto LABEL_13;
      }
    }
    LOWORD(v84[0]) = 2;
    LOBYTE(v82) = 2;
    uint64_t v19 = (cnprint::CNPrinter *)v84;
    uint64_t v20 = (unsigned __int8 *)&v82;
LABEL_56:
    cnprint::CNPrinter::Print(v19, v20, "WARNING: MeasurementAccumulator.LockAccumulator() called with bad t_end.", v13, v14, v15, v16, v17, v78);
    goto LABEL_57;
  }
LABEL_13:
  *(_DWORD *)(v3 + 11904) = 87;
  *(_OWORD *)(v3 + 10248) = xmmword_18E1FD660;
  *(_OWORD *)(v3 + 8816) = xmmword_18E1FD660;
  *(_OWORD *)(v3 + 10640) = xmmword_18E1FD660;
  *(_OWORD *)(v3 + 11376) = xmmword_18E1FD660;
  *(_OWORD *)(v3 + 11816) = xmmword_18E1FD660;
  *(_OWORD *)(v3 + 11424) = xmmword_18E1FD660;
  *(_OWORD *)(v3 + 11864) = xmmword_18E1FD660;
  *(_OWORD *)(v3 + 11920) = xmmword_18E1FD660;
  *(_OWORD *)(v3 + 12656) = xmmword_18E1FD660;
  v85.i64[1] = 0;
  uint64_t v86 = 0;
  v85.i64[0] = (uint64_t)&v85.i64[1];
  if ((int)v25 < 1)
  {
    int v32 = 0;
    goto LABEL_62;
  }
  uint64_t v31 = 0;
  int v80 = 0;
  int v81 = 0;
  int v32 = 0;
  while (*(double *)(*(void *)(v3 + 3656) + 8 * v31) > 1.0)
  {
LABEL_49:
    if (++v31 >= (int)v25)
    {
      if (v80 > v32)
      {
        LOWORD(v84[0]) = 2;
        LOBYTE(v82) = 2;
        double v79 = *(double *)&v105.i64[1] + (double)v105.i64[0];
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v84, (unsigned __int8 *)&v82, "t,%.3lf,WARNING: MeasurementAccumulator.LockAccumulator() truncating measurements,nh,%d,eligible,%d,num_truncated,%d", v13, v14, v15, v16, v17, SLOBYTE(v79));
      }
LABEL_62:
      *(_DWORD *)(v3 + 11904) = v32;
      *(_DWORD *)(v3 + 8816) = v32;
      *(_DWORD *)(v3 + 8820) = 1;
      *(_DWORD *)(v3 + 8824) = v32;
      *(_DWORD *)(v3 + 8828) = v32;
      *(_DWORD *)(v3 + 10248) = v32;
      *(_DWORD *)(v3 + 10252) = 1;
      *(_DWORD *)(v3 + 10256) = v32;
      *(_DWORD *)(v3 + 10260) = v32;
      *(_DWORD *)(v3 + 10640) = v32;
      *(_DWORD *)(v3 + 10644) = 1;
      *(_DWORD *)(v3 + 10648) = v32;
      *(_DWORD *)(v3 + 10652) = v32;
      *(_DWORD *)(v3 + 11376) = v32;
      *(_DWORD *)(v3 + 11380) = 1;
      *(_DWORD *)(v3 + 11384) = v32;
      *(_DWORD *)(v3 + 11388) = v32;
      *(_DWORD *)(v3 + 11424) = v32;
      *(_DWORD *)(v3 + 11428) = 1;
      *(_DWORD *)(v3 + 11432) = v32;
      *(_DWORD *)(v3 + 11436) = v32;
      *(_DWORD *)(v3 + 11816) = v32;
      *(_DWORD *)(v3 + 11820) = 1;
      *(_DWORD *)(v3 + 11824) = v32;
      *(_DWORD *)(v3 + 11828) = v32;
      *(_DWORD *)(v3 + 11864) = v32;
      *(_DWORD *)(v3 + 11868) = 1;
      *(_DWORD *)(v3 + 11872) = v32;
      *(_DWORD *)(v3 + 11876) = v32;
      *(_DWORD *)(v3 + 11920) = v32;
      *(_DWORD *)(v3 + 11924) = 1;
      *(_DWORD *)(v3 + 11928) = v32;
      *(_DWORD *)(v3 + 11932) = v32;
      *(_DWORD *)(v3 + 12656) = v32;
      *(_DWORD *)(v3 + 12660) = 1;
      *(_DWORD *)(v3 + 12664) = v32;
      *(_DWORD *)(v3 + 12668) = v32;
      *(unsigned char *)(v3 + 1) = 1;
      sub_18DF064FC((void *)v85.i64[1]);
      if (!cnprint::CNPrinter::GetLogLevel(v60))
      {
        v85.i16[0] = 12;
        LOBYTE(v84[0]) = 0;
        double v68 = *(double *)&v105.i64[1] + (double)v105.i64[0];
        int v69 = sub_18E05B808(v3, v61, v62, v63, v64, v65, v66, v67);
        cnprint::CNLogFormatter::FormatGeneral(a1 + 2488, a1 + 80, "Predict,%.2lf,dt,%.3lf,meas_types,%d", v68, v4, v69);
        if (*(char *)(a1 + 2511) >= 0) {
          LOBYTE(v75) = a1 - 72;
        }
        else {
          uint64_t v75 = *(void *)(a1 + 2488);
        }
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v85, (unsigned __int8 *)v84, "%s", v70, v71, v72, v73, v74, v75);
      }
      for (uint64_t i = 10; i != 29; ++i)
        v85.i32[i] = i - 10;
      uint64_t v101 = 0x100000013;
      v99[1] = &unk_1EDD17CE8;
      uint64_t v102 = v103;
      long long v100 = xmmword_18E1FD730;
      v103[2] = v87[2];
      v104[0] = v88[0];
      *(_OWORD *)((char *)v104 + 12) = *(_OWORD *)((char *)v88 + 12);
      v103[0] = v87[0];
      v103[1] = v87[1];
      *(void *)&v87[0] = 0x1400000013;
      uint64_t v97 = 0x100000002;
      int v95 = &unk_1EDD18B58;
      long long v96 = xmmword_18E1FD1A0;
      double v98 = v99;
      v99[0] = 0x1400000013;
      for (uint64_t j = 10; j != 17; ++j)
        v85.i32[j] = j + 11;
      uint64_t v92 = 0x100000007;
      float64x2_t v90 = &unk_1EDD19818;
      float64x2_t v93 = v94;
      long long v91 = xmmword_18E1FD680;
      v94[0] = v87[0];
      *(_OWORD *)((char *)v94 + 12) = *(_OWORD *)((char *)v87 + 12);
      sub_18E0805C8((uint64_t)v89);
    }
  }
  ++v80;
  int v33 = *(_DWORD *)(*(void *)(v3 + 2920) + 4 * v31);
  int v34 = v33 + v81;
  if (v32 <= 86 && v34 < 88)
  {
    int v35 = v32;
LABEL_19:
    *(_OWORD *)(*(void *)(v3 + 8840) + 16 * v32) = *(_OWORD *)(*(void *)(v3 + 96) + 16 * v31);
    *(_DWORD *)(*(void *)(v3 + 10272) + 4 * v32) = v33;
    *(void *)(*(void *)(v3 + 10664) + 8 * v32) = *(void *)(*(void *)(v3 + 3656) + 8 * v31);
    sub_18DFE2F24(*(void *)(v3 + 11400) + ((uint64_t)v32 << 6), *(void *)(v3 + 5088) + (v31 << 6));
    *(_DWORD *)(*(void *)(v3 + 11448) + 4 * v32) = *(_DWORD *)(*(void *)(v3 + 5136) + 4 * v31);
    sub_18DFE2F24(*(void *)(v3 + 11840) + ((uint64_t)v32 << 6), *(void *)(v3 + 5872) + (v31 << 6));
    sub_18DFE2F24(*(void *)(v3 + 11888) + 112 * v32, *(void *)(v3 + 5920) + 112 * v31);
    *(void *)(*(void *)(v3 + 11944) + 8 * v32) = *(void *)(*(void *)(v3 + 5976) + 8 * v31);
    *(void *)(*(void *)(v3 + 12680) + 8 * v32) = *(void *)(*(void *)(v3 + 7408) + 8 * v31);
    uint64_t v36 = (uint64_t **)(*(void *)(v3 + 5976) + 8 * v31);
    uint64_t v37 = v85.i64[1];
    unsigned int v38 = *v36;
    if (!v85.i64[1]) {
      goto LABEL_29;
    }
    unsigned int v39 = (int8x16_t *)&v85.u64[1];
    do
    {
      int v40 = (int8x16_t *)v37;
      BOOL v41 = v39;
      unint64_t v42 = *(void *)(v37 + 32);
      unsigned int v43 = (uint64_t *)(v37 + 8);
      if (v42 >= (unint64_t)v38)
      {
        unsigned int v43 = (uint64_t *)v40;
        unsigned int v39 = v40;
      }
      uint64_t v37 = *v43;
    }
    while (v37);
    if (v39 != (int8x16_t *)&v85.u64[1]
      && (v42 >= (unint64_t)v38 ? (BOOL v44 = v40) : (BOOL v44 = v41), (unint64_t)v38 >= v44[2].i64[0]))
    {
      if (v42 < (unint64_t)v38) {
        int v40 = v41;
      }
      ++v40[2].i32[2];
    }
    else
    {
LABEL_29:
      *((_DWORD *)sub_18E080188((uint64_t **)&v85, (unint64_t)v38, v36) + 10) = 1;
    }
    int v32 = v35 + 1;
    v81 += v33;
    LODWORD(v25) = *(_DWORD *)(v3 + 5936);
    goto LABEL_49;
  }
  uint64_t v45 = v85.i64[0];
  if ((unint64_t *)v85.i64[0] != &v85.u64[1])
  {
    __n128 v46 = 0;
    int v47 = -1;
    do
    {
      if (*(_DWORD *)(v45 + 40) > v47)
      {
        __n128 v46 = *(uint64_t **)(v45 + 32);
        int v47 = *(_DWORD *)(v45 + 40);
      }
      double v48 = *(int8x16_t **)(v45 + 8);
      if (v48)
      {
        do
        {
          char v49 = v48;
          double v48 = (int8x16_t *)v48->i64[0];
        }
        while (v48);
      }
      else
      {
        do
        {
          char v49 = *(int8x16_t **)(v45 + 16);
          BOOL v50 = v49->i64[0] == v45;
          uint64_t v45 = (uint64_t)v49;
        }
        while (!v50);
      }
      uint64_t v45 = (uint64_t)v49;
    }
    while (v49 != (int8x16_t *)&v85.u64[1]);
    v84[0] = v46;
    if (v46)
    {
      if (*(uint64_t **)(*(void *)(v3 + 5976) + 8 * v31) == v46) {
        goto LABEL_49;
      }
      int v35 = v32 - 1;
      if (v32 < 1)
      {
LABEL_59:
        LOWORD(v82) = 2;
        v83[0] = 4;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v82, v83, "MeasurementAccumulator.LockAccumulator() found_idx == false", v13, v14, v15, v16, v17, v78);
        goto LABEL_60;
      }
      LODWORD(v51) = v32;
      while (1)
      {
        uint64_t v51 = (v51 - 1);
        if (*(uint64_t **)(*(void *)(v3 + 11944) + 8 * v51) == v46) {
          break;
        }
        if ((int)v51 <= 0) {
          goto LABEL_59;
        }
      }
      if (v34 - *(_DWORD *)(*(void *)(v3 + 10272) + 4 * v51) > 87) {
        goto LABEL_49;
      }
      uint64_t v52 = sub_18E080188((uint64_t **)&v85, (unint64_t)v46, v84);
      --*((_DWORD *)v52 + 10);
      v81 -= *(_DWORD *)(*(void *)(v3 + 10272) + 4 * v51);
      int v32 = v51;
      goto LABEL_19;
    }
  }
  LOWORD(v82) = 2;
  v83[0] = 4;
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v82, v83, "MeasurementAccumulator.LockAccumulator() most_common_measurement_type == nullptr", v13, v14, v15, v16, v17, v78);
LABEL_60:
  sub_18DF064FC((void *)v85.i64[1]);
LABEL_57:
  sub_18E05FB70(v3);
  *(unsigned char *)uint64_t v3 = 0;
  sub_18E059804(v3, (__n128 *)(a1 + 80), v53, v54, v55, v56, v57, v58);
  return 128;
}

void sub_18E056E40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  STACK[0x590] = (unint64_t)&a27;
  sub_18E0694B8((void ***)&STACK[0x590]);
  STACK[0x590] = (unint64_t)&a30;
  sub_18E0694B8((void ***)&STACK[0x590]);
  STACK[0x590] = (unint64_t)&a33;
  sub_18E0694B8((void ***)&STACK[0x590]);
  sub_18E06B5D4(&a69);
  sub_18E06B400(&STACK[0x850]);
  _Unwind_Resume(a1);
}

uint64_t sub_18E056F48(void *a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E91C96D8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1E91C96D8))
  {
    sub_18E069180(&qword_1E91C96E0, "11111111110101", 0xFFFFFFFFFFFFFFFFLL, 0x30u, 0x31u);
    __cxa_guard_release(&qword_1E91C96D8);
  }
  uint64_t v2 = qword_1E91C96E0 & *a1;
  uint64_t v4 = 0;
  uint64_t v5 = v2;
  return sub_18E0693EC(&v5, 0, (uint64_t)&v5, 0xEu, &v4) ^ 1;
}

void sub_18E056FF4(_Unwind_Exception *a1)
{
}

uint64_t raven::RavenPNTEstimator::HandleEvent(raven::RavenPNTEstimator *this, const raven::VelocityEvent *a2)
{
  if (!*((unsigned char *)this + 57)) {
    return 0xFFFFFFFFLL;
  }
  if (*((unsigned char *)this + 58)) {
    BOOL v2 = *((unsigned char *)a2 + 280) == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2) {
    return 0;
  }
  else {
    return raven::RavenPNTEstimator::AddDeviceVelocityMeasurement(this, a2);
  }
}

void raven::RavenPNTEstimator::InflateUncertainties(uint64_t a1, uint64_t a2, double a3)
{
  if (a3 < 1.0 || (*(void *)&a3 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    LOWORD(v16) = 12;
    v15[0] = 4;
    *(_OWORD *)int8x16_t v21 = *(_OWORD *)(a1 + 80);
    char v8 = cnprint::CNLogFormatter::FormatGeneral(a1 + 2488, (uint64_t)v21, "%s failed, invalid inflation factor, %.6lf.");
  }
  else
  {
    uint64_t v18 = 0x10000001ALL;
    long long v17 = xmmword_18E1FD600;
    uint64_t v16 = &unk_1EDD186D8;
    uint64_t v19 = (unsigned int *)v20;
    uint64_t v22 = 0x10000001ALL;
    *(_OWORD *)&v21[8] = xmmword_18E1FD600;
    *(void *)int8x16_t v21 = &unk_1EDD18708;
    double v23 = v24;
    sub_18E07DA54(a2, (uint64_t)&v16, (uint64_t)v21);
    unsigned int v5 = *v19;
    uint64_t v18 = 0x10000001ALL;
    long long v17 = xmmword_18E1FD600;
    uint64_t v16 = &unk_1EDD186D8;
    uint64_t v19 = (unsigned int *)v20;
    uint64_t v22 = 0x10000001ALL;
    *(_OWORD *)&v21[8] = xmmword_18E1FD600;
    *(void *)int8x16_t v21 = &unk_1EDD18708;
    double v23 = v24;
    sub_18E07DDBC(a2, (uint64_t)&v16, (uint64_t)v21);
    int v6 = *v19;
    if (v5 <= 0x19 && (v6 & 0x80000000) == 0 && v6 < 26)
    {
      *(_OWORD *)(a1 + 112) = *(_OWORD *)(a1 + 80);
      uint64_t v18 = 0x10000001ALL;
      long long v17 = xmmword_18E1FD600;
      uint64_t v16 = &unk_1EDD186A8;
      uint64_t v19 = (unsigned int *)v20;
      if (*(_DWORD *)(a1 + 16140)) {
        uint64_t v7 = a1 + 15584;
      }
      else {
        uint64_t v7 = a1 + 15040;
      }
      sub_18DFE2F24((uint64_t)&v16, v7);
      sub_18E02FDE4();
    }
    LOWORD(v16) = 12;
    v15[0] = 4;
    *(_OWORD *)int8x16_t v21 = *(_OWORD *)(a1 + 80);
    char v8 = cnprint::CNLogFormatter::FormatGeneral(a1 + 2488, (uint64_t)v21, "%s failed, invalid specified states, min state %d, max state %d.");
  }
  if (*(char *)(a1 + 2511) >= 0) {
    LOBYTE(v14) = v8;
  }
  else {
    uint64_t v14 = *(void *)(a1 + 2488);
  }
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v16, v15, "%s", v9, v10, v11, v12, v13, v14);
}

void sub_18E057610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45)
{
}

void *sub_18E0576A8(void *result)
{
  *uint64_t result = &unk_1EDD174A8;
  return result;
}

double sub_18E0576C8@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 24) = 0x10000001ALL;
  *(void *)a2 = &unk_1EDD186A8;
  *(_OWORD *)(a2 + 8) = xmmword_18E1FD600;
  *(void *)(a2 + 32) = a2 + 40;
  if (*(_DWORD *)(a1 + 1108)) {
    uint64_t v2 = a1 + 552;
  }
  else {
    uint64_t v2 = a1 + 8;
  }
  *(void *)&double result = sub_18DFE2F24(a2, v2).n128_u64[0];
  return result;
}

double sub_18E057720(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(a3 + 8);
  int v4 = *(_DWORD *)(a3 + 12);
  uint64_t v5 = (v4 * v3);
  *(void *)&double result = 0x10000001ALL;
  *(void *)(a1 + 24) = 0x10000001ALL;
  *(void *)a1 = &unk_1EDD186A8;
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 20) = v3;
  uint64_t v7 = (double *)(a1 + 40);
  *(void *)(a1 + 32) = a1 + 40;
  if (v5)
  {
    char v8 = *(int **)(a3 + 32);
    do
    {
      uint64_t v9 = *v8++;
      double result = *(double *)(a2 + 8 * v9);
      *v7++ = result;
      --v5;
    }
    while (v5);
  }
  return result;
}

void sub_18E057780(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v6 = *(_DWORD *)(a2 + 8);
  unsigned int v7 = *(_DWORD *)(a2 + 12);
  uint64_t v52 = 0x10000001ALL;
  BOOL v50 = &unk_1EDD186A8;
  long long v51 = xmmword_18E1FD600;
  uint64_t v53 = &v54;
  sub_18DFE2B44(a4, a3, (uint64_t)&v50);
  if (v6 <= v7) {
    unsigned int v9 = v7;
  }
  else {
    unsigned int v9 = v6;
  }
  if (v7) {
    BOOL v10 = v6 == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = v9;
  }
  if (!*(_DWORD *)(a1 + 1108))
  {
    sub_18DFE2F24(a1 + 552, a1 + 8);
    sub_18DFE2F24(a1 + 800, a1 + 256);
    *(void *)&double v8 = sub_18DFE2F24(a1 + 848, a1 + 304).n128_u64[0];
  }
  *(_DWORD *)(a1 + 1108) = 1;
  if (*(_DWORD *)(a2 + 8) && *(_DWORD *)(a2 + 12))
  {
    *(unsigned char *)(a1 + 1104) = 0;
    unsigned int v12 = *(_DWORD *)(a1 + 560);
    unsigned int v13 = *(_DWORD *)(a1 + 564);
    if (v12 <= v13) {
      unsigned int v14 = *(_DWORD *)(a1 + 564);
    }
    else {
      unsigned int v14 = *(_DWORD *)(a1 + 560);
    }
    if (v13) {
      BOOL v15 = v12 == 0;
    }
    else {
      BOOL v15 = 1;
    }
    if (v15) {
      uint64_t v16 = 0;
    }
    else {
      uint64_t v16 = v14;
    }
    if ((int)v11 >= 1)
    {
      uint64_t v17 = 0;
      do
      {
        int v18 = *(_DWORD *)(*(void *)(a2 + 32) + v17);
        if (v18 < 0 || v18 >= (int)v16)
        {
          LOWORD(v55) = 2;
          LOBYTE(v69) = 4;
          cnprint::CNLogFormatter::FormatGeneral((const void **)(a1 + 1272), "ResetStates(): states must contain valid indices into x, Rxx, and zx.", v8);
          if (*(char *)(a1 + 1295) >= 0) {
            LOBYTE(v24) = a1 - 8;
          }
          else {
            uint64_t v24 = *(void *)(a1 + 1272);
          }
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v55, (unsigned __int8 *)&v69, "%s", v19, v20, v21, v22, v23, v24);
        }
        v17 += 4;
      }
      while (4 * v11 != v17);
    }
    uint64_t v57 = 0x1A00000001;
    uint64_t v55 = &unk_1EDD18168;
    uint64_t v58 = v59;
    if (v16 == 1)
    {
      char v27 = 0;
      *(void *)&long long v30 = 0x100000001;
      *((void *)&v30 + 1) = 0x100000001;
      long long v56 = v30;
      v59[0] = 0;
      int v28 = 1;
      int v29 = 1;
      uint64_t v25 = v11;
    }
    else
    {
      uint64_t v25 = v11;
      if ((int)v16 <= 0)
      {
        int v28 = 0;
        int v29 = 0;
        long long v56 = 0uLL;
        char v27 = 1;
      }
      else
      {
        uint64_t v26 = 0;
        LODWORD(v56) = 1;
        DWORD1(v56) = v16;
        *((void *)&v56 + 1) = v16 | 0x100000000;
        do
        {
          v59[v26] = v26;
          ++v26;
        }
        while (v16 != v26);
        char v27 = 0;
        int v28 = 1;
        int v29 = v16;
      }
    }
    uint64_t v74 = 0x10000001ALL;
    int v69 = &unk_1EDD186D8;
    uint64_t v75 = v76;
    int v70 = v29;
    int v71 = v28;
    int v72 = v29 * v28;
    int v73 = v29;
    if (v29)
    {
      int v31 = 0;
      for (int i = 0; i != v29; ++i)
      {
        if ((v27 & 1) == 0)
        {
          int v33 = 0;
          do
          {
            v76[i + v73 * v33] = v59[v31 + v33];
            ++v33;
          }
          while (v28 != v33);
        }
        v31 += v28;
      }
    }
    if ((int)v25 >= 1)
    {
      int v34 = *(int **)(a2 + 32);
      uint64_t v35 = v25;
      do
      {
        uint64_t v36 = *v34++;
        v76[v36] = -1;
        --v35;
      }
      while (v35);
    }
    sub_18E07E6AC(v68, v16);
    uint64_t v57 = 0x1A00000001;
    uint64_t v55 = &unk_1EDD18168;
    uint64_t v58 = v59;
    if (v25 == 1)
    {
      char v37 = 0;
      *(void *)&long long v38 = 0x100000001;
      *((void *)&v38 + 1) = 0x100000001;
      long long v56 = v38;
      v59[0] = 0;
      int v39 = 1;
      int v40 = 1;
    }
    else if ((int)v25 <= 0)
    {
      int v39 = 0;
      int v40 = 0;
      long long v56 = 0uLL;
      char v37 = 1;
    }
    else
    {
      uint64_t v41 = 0;
      LODWORD(v56) = 1;
      DWORD1(v56) = v25;
      *((void *)&v56 + 1) = v25 | 0x100000000;
      do
      {
        v59[v41] = v41;
        ++v41;
      }
      while (v25 != v41);
      char v37 = 0;
      int v39 = 1;
      int v40 = v25;
    }
    uint64_t v65 = 0x10000001ALL;
    unsigned int v60 = &unk_1EDD186D8;
    uint64_t v66 = v67;
    int v61 = v40;
    int v62 = v39;
    int v63 = v40 * v39;
    int v64 = v40;
    if (v40)
    {
      int v42 = 0;
      for (int j = 0; j != v40; ++j)
      {
        if ((v37 & 1) == 0)
        {
          int v44 = 0;
          do
          {
            v67[j + v64 * v44] = v59[v42 + v44];
            ++v44;
          }
          while (v39 != v44);
        }
        v42 += v39;
      }
    }
    sub_18E07E768((uint64_t)&v55, (uint64_t)v68, (uint64_t)&v60);
    sub_18E07DFD0((uint64_t)&v55, *(_DWORD *)(a2 + 16), *(int **)(a2 + 32));
    if ((int)v16 > (int)v25)
    {
      LODWORD(v45) = 0;
      __n128 v46 = v75;
      uint64_t v47 = v68[4];
      uint64_t v48 = (int)v25;
      do
      {
        uint64_t v45 = (int)v45;
        do
          int v49 = v46[v45++];
        while (v49 == -1);
        *(_DWORD *)(v47 + 4 * v48++) = v49;
      }
      while (v48 != (int)v16);
    }
    sub_18E07E084(a1, v16, (uint64_t)v68);
  }
  sub_18DFE2F24(a1 + 8, a1 + 552);
  sub_18DFE2F24(a1 + 256, a1 + 800);
  sub_18DFE2F24(a1 + 304, a1 + 848);
  *(_DWORD *)(a1 + 1108) = 1;
}

void sub_18E057FA0(_Unwind_Exception *a1)
{
}

void raven::RavenPNTEstimator::InflateUncertainty(raven::RavenPNTEstimator *this, double a2)
{
  if (*((unsigned char *)this + 58))
  {
    if (a2 >= 1.0 && (*(void *)&a2 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
    {
      *((_OWORD *)this + 7) = *((_OWORD *)this + 5);
      uint64_t v14 = 0x10000001ALL;
      long long v13 = xmmword_18E1FD600;
      unsigned int v12 = &unk_1EDD186A8;
      BOOL v15 = &v16;
      if (*((_DWORD *)this + 4035)) {
        int v3 = (char *)this + 15584;
      }
      else {
        int v3 = (char *)this + 15040;
      }
      sub_18DFE2F24((uint64_t)&v12, (uint64_t)v3);
      sub_18E06E85C((uint64_t)v11);
    }
    LOWORD(v12) = 12;
    LOBYTE(v18) = 4;
    long long v17 = *((_OWORD *)this + 5);
    char v4 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)&v17, "InflateUncertainty failed, invalid inflation factor, %.6lf.");
  }
  else
  {
    LOWORD(v12) = 12;
    LOBYTE(v18) = 2;
    long long v17 = *((_OWORD *)this + 5);
    char v4 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)&v17, "InflateUncertainty called on uninitialized estimator");
  }
  if (*((char *)this + 2511) >= 0) {
    LOBYTE(v10) = v4;
  }
  else {
    uint64_t v10 = *((void *)this + 311);
  }
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v12, (unsigned __int8 *)&v18, "%s", v5, v6, v7, v8, v9, v10);
}

void sub_18E05859C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
}

uint64_t sub_18E058650(uint64_t a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a2 + 8);
  int v2 = *(_DWORD *)(a2 + 12);
  *(void *)(a1 + 24) = 0x10000001ALL;
  *(void *)a1 = &unk_1EDD186D8;
  *(_DWORD *)(a1 + 8) = v2;
  *(_DWORD *)(a1 + 12) = v3;
  *(_DWORD *)(a1 + 16) = v3 * v2;
  *(_DWORD *)(a1 + 20) = v2;
  *(void *)(a1 + 32) = a1 + 40;
  return sub_18DFEE808(a2, a1);
}

void sub_18E0586BC(_Unwind_Exception *a1)
{
  *uint64_t v1 = &unk_1EDD174A8;
  _Unwind_Resume(a1);
}

void *sub_18E0586DC(void *result)
{
  *double result = &unk_1EDD174A8;
  return result;
}

void raven::RavenPNTEstimator::InflateAttitudeUncertainty(raven::RavenPNTEstimator *this)
{
}

void raven::RavenPNTEstimator::InflateDevicePositionUncertainty(raven::RavenPNTEstimator *this, double a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EB403A00, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EB403A00))
  {
    uint64_t v15 = 0x300000001;
    *(void *)uint64_t v14 = &unk_1EDD18258;
    uint64_t v16 = &v17;
    *(_OWORD *)&v14[8] = xmmword_18E1F8560;
    uint64_t v17 = 0x100000000;
    int v18 = 2;
    sub_18DFEC63C((uint64_t)v14, (uint64_t)&unk_1EB403C98);
    __cxa_atexit((void (*)(void *))sub_18DFE2E9C, &unk_1EB403C98, &dword_18DEDB000);
    __cxa_guard_release(&qword_1EB403A00);
  }
  sub_18E07EFE4((uint64_t)v14, (uint64_t)&unk_1EB403C98);
  sub_18DEDE7B0(__p, "InflateDevicePositionUncertainty");
  raven::RavenPNTEstimator::InflateUncertainties((uint64_t)this, (uint64_t)v14, a2);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  LOWORD(__p[0]) = 12;
  unsigned __int8 v11 = 2;
  *(_OWORD *)uint64_t v14 = *((_OWORD *)this + 5);
  char v4 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)v14, "Inflating estimator variance of device (only) position error states,factor,%.2lf", a2);
  if (*((char *)this + 2511) >= 0) {
    LOBYTE(v10) = v4;
  }
  else {
    uint64_t v10 = *((void *)this + 311);
  }
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, &v11, "%s", v5, v6, v7, v8, v9, v10);
}

void sub_18E05889C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
}

void raven::RavenPNTEstimator::InflateDeviceVelocityUncertainty(raven::RavenPNTEstimator *this, double a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EB403A08, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EB403A08))
  {
    uint64_t v15 = 0x300000001;
    *(void *)uint64_t v14 = &unk_1EDD18258;
    uint64_t v16 = &v17;
    *(_OWORD *)&v14[8] = xmmword_18E1F8560;
    uint64_t v17 = 0x400000003;
    int v18 = 5;
    sub_18DFEC63C((uint64_t)v14, (uint64_t)&unk_1EB403CD0);
    __cxa_atexit((void (*)(void *))sub_18DFE2E9C, &unk_1EB403CD0, &dword_18DEDB000);
    __cxa_guard_release(&qword_1EB403A08);
  }
  sub_18E07EFE4((uint64_t)v14, (uint64_t)&unk_1EB403CD0);
  sub_18DEDE7B0(__p, "InflateDeviceVelocityUncertainty");
  raven::RavenPNTEstimator::InflateUncertainties((uint64_t)this, (uint64_t)v14, a2);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  LOWORD(__p[0]) = 12;
  unsigned __int8 v11 = 2;
  *(_OWORD *)uint64_t v14 = *((_OWORD *)this + 5);
  char v4 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)v14, "Inflating estimator variance of device (only) velocity error states,factor,%.2lf", a2);
  if (*((char *)this + 2511) >= 0) {
    LOBYTE(v10) = v4;
  }
  else {
    uint64_t v10 = *((void *)this + 311);
  }
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, &v11, "%s", v5, v6, v7, v8, v9, v10);
}

void sub_18E058A68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
}

void raven::RavenPNTEstimator::InflateInsUncertainty(raven::RavenPNTEstimator *this, double a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EB403A10, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EB403A10))
  {
    uint64_t v28 = 0x300000001;
    uint64_t v26 = &unk_1EDD18258;
    int v29 = &v30;
    long long v27 = xmmword_18E1F8560;
    uint64_t v30 = 0xA00000009;
    int v31 = 11;
    sub_18DFEC63C((uint64_t)&v26, (uint64_t)v32);
    uint64_t v21 = 0x300000001;
    uint64_t v19 = &unk_1EDD18258;
    uint64_t v22 = &v23;
    long long v20 = xmmword_18E1F8560;
    uint64_t v23 = 0xD0000000CLL;
    int v24 = 14;
    sub_18DFEC63C((uint64_t)&v19, (uint64_t)v25);
    sub_18E058DF8((uint64_t)v11, (uint64_t)v32, (uint64_t)v25);
    uint64_t v14 = 0x300000001;
    unsigned int v12 = &unk_1EDD18258;
    uint64_t v15 = &v16;
    long long v13 = xmmword_18E1F8560;
    uint64_t v16 = 0x100000000FLL;
    int v17 = 17;
    sub_18DFEC63C((uint64_t)&v12, (uint64_t)v18);
    sub_18E058D70((uint64_t)v11, (uint64_t)v18);
    __cxa_atexit((void (*)(void *))sub_18E058EA4, &qword_1EB404118, &dword_18DEDB000);
    __cxa_guard_release(&qword_1EB403A10);
  }
  sub_18E07EFE4((uint64_t)v11, (uint64_t)&qword_1EB404118);
  sub_18DEDE7B0(v32, "InflateInsUncertainty");
  raven::RavenPNTEstimator::InflateUncertainties((uint64_t)this, (uint64_t)v11, a2);
  if (v33 < 0) {
    operator delete(v32[0]);
  }
  LOWORD(v32[0]) = 12;
  LOBYTE(v26) = 2;
  v11[0] = *((_OWORD *)this + 5);
  char v4 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)v11, "Inflating estimator variance of ins sensor error states,factor,%.2lf", a2);
  if (*((char *)this + 2511) >= 0) {
    LOBYTE(v10) = v4;
  }
  else {
    uint64_t v10 = *((void *)this + 311);
  }
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)v32, (unsigned __int8 *)&v26, "%s", v5, v6, v7, v8, v9, v10);
}

void sub_18E058D04(_Unwind_Exception *a1)
{
}

uint64_t sub_18E058D70(uint64_t a1, uint64_t a2)
{
  qword_1EB404130 = 0x100000009;
  qword_1EB404118 = (uint64_t)&unk_1EDD19EA8;
  unk_1EB404120 = xmmword_18E1FD860;
  qword_1EB404138 = (uint64_t)&unk_1EB404140;
  return sub_18E072E48(a1, a2, (uint64_t)&qword_1EB404118);
}

void sub_18E058DD8(_Unwind_Exception *a1)
{
  *uint64_t v1 = &unk_1EDD174A8;
  _Unwind_Resume(a1);
}

uint64_t sub_18E058DF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 24) = 0x100000006;
  *(void *)a1 = &unk_1EDD19758;
  *(_OWORD *)(a1 + 8) = xmmword_18E1FD770;
  *(void *)(a1 + 32) = a1 + 40;
  return sub_18E072E48(a2, a3, a1);
}

void sub_18E058E64(_Unwind_Exception *a1)
{
  *uint64_t v1 = &unk_1EDD174A8;
  _Unwind_Resume(a1);
}

void *sub_18E058E84(void *result)
{
  *double result = &unk_1EDD174A8;
  return result;
}

void *sub_18E058EA4(void *result)
{
  *double result = &unk_1EDD174A8;
  return result;
}

void raven::RavenPNTEstimator::InflatePositionUncertainty(raven::RavenPNTEstimator *this)
{
}

void raven::RavenPNTEstimator::InflateUserPositionUncertainty(raven::RavenPNTEstimator *this, double a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EB403A20, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EB403A20))
  {
    uint64_t v15 = 0x300000001;
    *(void *)uint64_t v14 = &unk_1EDD18258;
    uint64_t v16 = &v17;
    *(_OWORD *)&v14[8] = xmmword_18E1F8560;
    uint64_t v17 = 0x1500000014;
    int v18 = 22;
    sub_18DFEC63C((uint64_t)v14, (uint64_t)&unk_1EB403D08);
    __cxa_atexit((void (*)(void *))sub_18DFE2E9C, &unk_1EB403D08, &dword_18DEDB000);
    __cxa_guard_release(&qword_1EB403A20);
  }
  sub_18E07EFE4((uint64_t)v14, (uint64_t)&unk_1EB403D08);
  sub_18DEDE7B0(__p, "InflateUserPositionUncertainty");
  raven::RavenPNTEstimator::InflateUncertainties((uint64_t)this, (uint64_t)v14, a2);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  LOWORD(__p[0]) = 12;
  unsigned __int8 v11 = 2;
  *(_OWORD *)uint64_t v14 = *((_OWORD *)this + 5);
  char v4 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)v14, "Inflating estimator variance of user position error states,factor,%.2lf", a2);
  if (*((char *)this + 2511) >= 0) {
    LOBYTE(v10) = v4;
  }
  else {
    uint64_t v10 = *((void *)this + 311);
  }
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, &v11, "%s", v5, v6, v7, v8, v9, v10);
}

void sub_18E059064(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
}

void raven::RavenPNTEstimator::InflateUserVelocityUncertainty(raven::RavenPNTEstimator *this, double a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EB403A28, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EB403A28))
  {
    uint64_t v15 = 0x300000001;
    *(void *)uint64_t v14 = &unk_1EDD18258;
    uint64_t v16 = &v17;
    *(_OWORD *)&v14[8] = xmmword_18E1F8560;
    uint64_t v17 = 0x1800000017;
    int v18 = 25;
    sub_18DFEC63C((uint64_t)v14, (uint64_t)&unk_1EB403D40);
    __cxa_atexit((void (*)(void *))sub_18DFE2E9C, &unk_1EB403D40, &dword_18DEDB000);
    __cxa_guard_release(&qword_1EB403A28);
  }
  sub_18E07EFE4((uint64_t)v14, (uint64_t)&unk_1EB403D40);
  sub_18DEDE7B0(__p, "InflateUserVelocityUncertainty");
  raven::RavenPNTEstimator::InflateUncertainties((uint64_t)this, (uint64_t)v14, a2);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  LOWORD(__p[0]) = 12;
  unsigned __int8 v11 = 2;
  *(_OWORD *)uint64_t v14 = *((_OWORD *)this + 5);
  char v4 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)v14, "Inflating estimator variance of user velocity error states,factor,%.2lf", a2);
  if (*((char *)this + 2511) >= 0) {
    LOBYTE(v10) = v4;
  }
  else {
    uint64_t v10 = *((void *)this + 311);
  }
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, &v11, "%s", v5, v6, v7, v8, v9, v10);
}

void sub_18E059230(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
}

void raven::RavenPNTEstimator::InflateVelocityUncertainty(raven::RavenPNTEstimator *this, double a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EB403A30, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EB403A30))
  {
    uint64_t v21 = 0x300000001;
    uint64_t v19 = &unk_1EDD18258;
    uint64_t v22 = &v23;
    long long v20 = xmmword_18E1F8560;
    uint64_t v23 = 0x400000003;
    int v24 = 5;
    sub_18DFEC63C((uint64_t)&v19, (uint64_t)v11);
    uint64_t v14 = 0x300000001;
    unsigned int v12 = &unk_1EDD18258;
    uint64_t v15 = &v16;
    long long v13 = xmmword_18E1F8560;
    uint64_t v16 = 0x1800000017;
    int v17 = 25;
    sub_18DFEC63C((uint64_t)&v12, (uint64_t)v18);
    sub_18E058DF8((uint64_t)&unk_1EB404090, (uint64_t)v11, (uint64_t)v18);
    __cxa_atexit((void (*)(void *))sub_18E058E84, &unk_1EB404090, &dword_18DEDB000);
    __cxa_guard_release(&qword_1EB403A30);
  }
  sub_18E07EFE4((uint64_t)v11, (uint64_t)&unk_1EB404090);
  sub_18DEDE7B0(&v19, "InflateVelocityUncertainty");
  raven::RavenPNTEstimator::InflateUncertainties((uint64_t)this, (uint64_t)v11, a2);
  if (SHIBYTE(v20) < 0) {
    operator delete(v19);
  }
  LOWORD(v19) = 12;
  v18[0] = 2;
  v11[0] = *((_OWORD *)this + 5);
  char v4 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)v11, "Inflating estimator variance of velocity error states,factor,%.2lf", a2);
  if (*((char *)this + 2511) >= 0) {
    LOBYTE(v10) = v4;
  }
  else {
    uint64_t v10 = *((void *)this + 311);
  }
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v19, v18, "%s", v5, v6, v7, v8, v9, v10);
}

void sub_18E059470(_Unwind_Exception *a1)
{
}

void raven::RavenPNTEstimator::InflateXOUncertainty(raven::RavenPNTEstimator *this, double a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EB403A38, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EB403A38))
  {
    uint64_t v15 = 0x200000001;
    *(void *)uint64_t v14 = &unk_1EDD181F8;
    uint64_t v16 = &v17;
    *(_OWORD *)&v14[8] = xmmword_18E1FD740;
    uint64_t v17 = 0x1300000012;
    sub_18E059674((uint64_t)v14, (uint64_t)&unk_1EB403B98);
    __cxa_atexit((void (*)(void *))sub_18E05971C, &unk_1EB403B98, &dword_18DEDB000);
    __cxa_guard_release(&qword_1EB403A38);
  }
  sub_18E07EFE4((uint64_t)v14, (uint64_t)&unk_1EB403B98);
  sub_18DEDE7B0(__p, "InflateXOUncertainty");
  raven::RavenPNTEstimator::InflateUncertainties((uint64_t)this, (uint64_t)v14, a2);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  LOWORD(__p[0]) = 12;
  unsigned __int8 v11 = 2;
  *(_OWORD *)uint64_t v14 = *((_OWORD *)this + 5);
  char v4 = cnprint::CNLogFormatter::FormatGeneral((uint64_t)this + 2488, (uint64_t)v14, "Inflating estimator variance of xo error states,factor,%.2lf", a2);
  if (*((char *)this + 2511) >= 0) {
    LOBYTE(v10) = v4;
  }
  else {
    uint64_t v10 = *((void *)this + 311);
  }
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)__p, &v11, "%s", v5, v6, v7, v8, v9, v10);
}

void sub_18E05963C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
}

uint64_t sub_18E059674@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4 = *(_DWORD *)(a1 + 8);
  int v3 = *(_DWORD *)(a1 + 12);
  *(void *)(a2 + 24) = 0x100000002;
  *(void *)a2 = &unk_1EDD18B58;
  *(_DWORD *)(a2 + 8) = v3;
  *(_DWORD *)(a2 + 12) = v4;
  *(_DWORD *)(a2 + 16) = v4 * v3;
  *(_DWORD *)(a2 + 20) = v3;
  *(void *)(a2 + 32) = a2 + 40;
  return sub_18DFEE808(a1, a2);
}

void sub_18E0596DC(_Unwind_Exception *a1)
{
  *uint64_t v1 = &unk_1EDD174A8;
  _Unwind_Resume(a1);
}

void *sub_18E0596FC(void *result)
{
  *double result = &unk_1EDD174A8;
  return result;
}

void *sub_18E05971C(void *result)
{
  *double result = &unk_1EDD174A8;
  return result;
}

void raven::RavenPNTEstimator::InflateXOUncertainty(raven::RavenPNTEstimator *this)
{
}

void sub_18E059748(uint64_t a1)
{
  *(_WORD *)a1 = 0;
  sub_18E067BEC((void *)(a1 + 40));
  *(_DWORD *)(a1 + 5936) = 0;
  *(_DWORD *)(a1 + 11904) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 2904) = 0;
  *(void *)(a1 + 2896) = 0;
  *(void *)(a1 + 3640) = 0;
  *(void *)(a1 + 3632) = 0;
  *(void *)(a1 + 5072) = 0;
  *(void *)(a1 + 5064) = 0;
  *(void *)(a1 + 5120) = 0;
  *(void *)(a1 + 5112) = 0;
  *(void *)(a1 + 5856) = 0;
  *(void *)(a1 + 5848) = 0;
  *(void *)(a1 + 5904) = 0;
  *(void *)(a1 + 5896) = 0;
  *(void *)(a1 + 5952) = 0;
  *(void *)(a1 + 5960) = 0;
  *(void *)(a1 + 7384) = 0;
  *(void *)(a1 + 7392) = 0;
  *(void *)(a1 + 8824) = 0;
  *(void *)(a1 + 8816) = 0;
  *(void *)(a1 + 10256) = 0;
  *(void *)(a1 + 10248) = 0;
  *(void *)(a1 + 10648) = 0;
  *(void *)(a1 + 10640) = 0;
  *(void *)(a1 + 11384) = 0;
  *(void *)(a1 + 11376) = 0;
  *(void *)(a1 + 11432) = 0;
  *(void *)(a1 + 11424) = 0;
  *(void *)(a1 + 11824) = 0;
  *(void *)(a1 + 11816) = 0;
  *(void *)(a1 + 11872) = 0;
  *(void *)(a1 + 11864) = 0;
  *(void *)(a1 + 11928) = 0;
  *(void *)(a1 + 11920) = 0;
  *(void *)(a1 + 12664) = 0;
  *(void *)(a1 + 12656) = 0;
}

__n128 sub_18E059804(uint64_t a1, __n128 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(unsigned char *)a1)
  {
    __int16 v11 = 2;
    unsigned __int8 v10 = 2;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v11, &v10, "WARNING: MeasurementAccumulator.InitializeTime() called twice.", a4, a5, a6, a7, a8, v9);
  }
  else
  {
    __n128 result = *a2;
    *(__n128 *)(a1 + 8) = *a2;
    *(unsigned char *)a1 = 1;
  }
  return result;
}

uint64_t sub_18E05985C(uint64_t a1)
{
  *(void *)(a1 + 24) = 0x10000001CLL;
  *(void *)a1 = &unk_1EDD188B8;
  *(void *)(a1 + 32) = a1 + 40;
  *(_OWORD *)(a1 + 8) = xmmword_18E1FD5F0;
  return sub_18DFE2CC8(a1, 0.0);
}

uint64_t sub_18E0598A0(uint64_t a1, _OWORD *a2, uint64_t a3, int8x16_t a4, int8x16_t a5)
{
  uint64_t v8 = *(void **)(a1 + 5928);
  char v9 = *(void **)(a1 + 5920);
  if (v8 != v9)
  {
    uint64_t v10 = CNTimeSpan::operator-((uint64_t)a2, v9, a4, a5);
    if (fabs(v11 + (double)v10) >= 2.22044605e-16)
    {
      unsigned int v12 = v8 - 290;
      char v13 = v8 - 680;
      do
      {
        *unsigned int v12 = &unk_1EDD17478;
        *(v12 - 366) = &unk_1EDD17478;
        *(v12 - 390) = &unk_1EDD17478;
        uint64_t v14 = v12 - 392;
        v12 -= 682;
        v13 -= 682;
      }
      while (v14 != v9);
      *(void *)(a1 + 5928) = v9;
    }
  }

  return sub_18E061A4C(a1, a2, a3);
}

double sub_18E0599BC(uint64_t a1, int a2, double *a3)
{
  if (*(_DWORD *)(a1 + 16) != a2) {
    __assert_rtn("operator=", "cnsubvector.h", 347, "this->num_elements_ == A.num_elements_");
  }
  if (a2 >= 1)
  {
    int v3 = *(int **)(a1 + 304);
    uint64_t v4 = *(void *)(*(void *)(a1 + 264) + 32);
    uint64_t v5 = *(double **)(a1 + 32);
    uint64_t v6 = a2;
    do
    {
      double v7 = *a3++;
      double result = v7;
      uint64_t v9 = *v3++;
      *(double *)(v4 + 8 * v9) = result;
      *v5++ = result;
      --v6;
    }
    while (v6);
  }
  return result;
}

void sub_18E059A30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v7.i32[1] = 1;
  v7.i32[0] = *(_DWORD *)(a2 + 16);
  int32x2_t v9 = v7;
  sub_18E07F6DC((uint64_t)v11, a2);
  int32x4_t v8 = vdupq_lane_s32(v9, 0);
  v8.i32[1] = 1;
  int32x4_t v10 = v8;
  int32x4_t v12 = v8;
  sub_18DFE2F24(a1 + 8, (uint64_t)v11);
  sub_18DFE2F24(a1 + 256, a3);
  sub_18E07F6DC((uint64_t)v11, a4);
  int32x4_t v12 = v10;
  sub_18DFE2F24(a1 + 304, (uint64_t)v11);
  sub_18DFE2F24(a1 + 552, a1 + 8);
  sub_18DFE2F24(a1 + 800, a1 + 256);
  sub_18DFE2F24(a1 + 848, a1 + 304);
  *(void *)(a1 + 1096) = 0x3FF0000000000000;
  *(unsigned char *)(a1 + 1104) = 0;
  *(_DWORD *)(a1 + 1108) = 1;
}

void sub_18E059B20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 24) = 0x10000001ALL;
  *(void *)a1 = &unk_1EDD186A8;
  *(_OWORD *)(a1 + 8) = xmmword_18E1FD600;
  *(void *)(a1 + 32) = a1 + 40;
  sub_18DFE2B44(a2, a3, a1);
}

void sub_18E059B8C(_Unwind_Exception *a1)
{
  *uint64_t v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

void *sub_18E059BAC(void *result)
{
  *double result = &unk_1EDD17478;
  return result;
}

uint64_t sub_18E059BCC(uint64_t a1)
{
  int v1 = *(unsigned __int8 *)(a1 + 1104);
  if (v1 == 2)
  {
    char v3 = 1;
  }
  else
  {
    if (v1 != 1)
    {
      if (!*(unsigned char *)(a1 + 1104))
      {
        (*(void (**)(void *__return_ptr, uint64_t))(*(void *)a1 + 40))(v12, a1);
        sub_18E06E85C((uint64_t)v15);
      }
      LOWORD(v13) = 2;
      v14[0] = 5;
      unsigned __int8 v4 = cnprint::CNLogFormatter::FormatGeneral((const void **)(a1 + 1272), "LeastSquaresEstimator::IsObservable called with unexpected observability state %hhu", v1);
      if (*(char *)(a1 + 1295) >= 0) {
        LOBYTE(v10) = v4;
      }
      else {
        uint64_t v10 = *(void *)(a1 + 1272);
      }
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v13, v14, "%s", v5, v6, v7, v8, v9, v10);
    }
    char v3 = 0;
  }
  return v3 & 1;
}

void sub_18E059DB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51)
{
  sub_18E07F50C(&a51);
  sub_18E06B5D4((void *)(v51 - 128));
  sub_18E06B5D4((void *)(v51 - 80));
  sub_18E06B5D4(&a14);
  _Unwind_Resume(a1);
}

uint64_t sub_18E059DFC(uint64_t result)
{
  int v1 = *(void **)(result + 5928);
  int v2 = *(void **)(result + 5920);
  if (v1 != v2)
  {
    char v3 = v1 - 290;
    unsigned __int8 v4 = v1 - 680;
    do
    {
      *char v3 = &unk_1EDD17478;
      *(v3 - 366) = &unk_1EDD17478;
      *(v3 - 390) = &unk_1EDD17478;
      uint64_t v5 = v3 - 392;
      v3 -= 682;
      v4 -= 682;
    }
    while (v5 != v2);
  }
  *(void *)(result + 5928) = v2;
  *(unsigned char *)(result + 456) = 0;
  return result;
}

uint64_t sub_18E059EA0(uint64_t result)
{
  *(_DWORD *)(result + 8) = 0;
  *(void *)(result + 32) = 0;
  *(void *)(result + 40) = 0;
  return result;
}

uint64_t sub_18E059EAC(uint64_t result)
{
  *(_DWORD *)(result + 8) = 0;
  *(void *)(result + 32) = 0;
  *(void *)(result + 40) = 0;
  return result;
}

void raven::RavenPNTEstimator::ResetSubStates(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v28 = 0x10000001CLL;
  long long v27 = xmmword_18E1FD5F0;
  uint64_t v26 = &unk_1EDD188E8;
  int v29 = (unsigned int *)v30;
  uint64_t v32 = 0x10000001CLL;
  *(_OWORD *)&v31[8] = xmmword_18E1FD5F0;
  *(void *)int v31 = &unk_1EDD18918;
  char v33 = v34;
  sub_18E07DA54(a2, (uint64_t)&v26, (uint64_t)v31);
  unsigned int v10 = *v29;
  uint64_t v28 = 0x10000001CLL;
  long long v27 = xmmword_18E1FD5F0;
  uint64_t v26 = &unk_1EDD188E8;
  int v29 = (unsigned int *)v30;
  uint64_t v32 = 0x10000001CLL;
  *(_OWORD *)&v31[8] = xmmword_18E1FD5F0;
  *(void *)int v31 = &unk_1EDD18918;
  char v33 = v34;
  sub_18E07DDBC(a2, (uint64_t)&v26, (uint64_t)v31);
  int v11 = *v29;
  if (v10 > 0x1B || v11 < 0 || v11 >= 28)
  {
    LOWORD(v26) = 12;
    v35[0] = 4;
    *(_OWORD *)int v31 = *(_OWORD *)(a1 + 80);
    char v15 = cnprint::CNLogFormatter::FormatGeneral(a1 + 2488, (uint64_t)v31, "%s failed, invalid specified full states, min state %d, max state %d.");
LABEL_13:
    int v21 = *(char *)(a1 + 2511);
    uint64_t v22 = *(void *)(a1 + 2488);
    goto LABEL_17;
  }
  uint64_t v28 = 0x10000001ALL;
  long long v27 = xmmword_18E1FD600;
  uint64_t v26 = &unk_1EDD186D8;
  int v29 = (unsigned int *)v30;
  uint64_t v32 = 0x10000001ALL;
  *(_OWORD *)&v31[8] = xmmword_18E1FD600;
  *(void *)int v31 = &unk_1EDD18708;
  char v33 = v34;
  sub_18E07DA54(a4, (uint64_t)&v26, (uint64_t)v31);
  unsigned int v12 = *v29;
  uint64_t v28 = 0x10000001ALL;
  long long v27 = xmmword_18E1FD600;
  uint64_t v26 = &unk_1EDD186D8;
  int v29 = (unsigned int *)v30;
  uint64_t v32 = 0x10000001ALL;
  *(_OWORD *)&v31[8] = xmmword_18E1FD600;
  *(void *)int v31 = &unk_1EDD18708;
  char v33 = v34;
  sub_18E07DDBC(a4, (uint64_t)&v26, (uint64_t)v31);
  int v13 = *v29;
  if (v12 > 0x19 || v13 < 0 || v13 >= 26)
  {
    LOWORD(v26) = 12;
    v35[0] = 4;
    *(_OWORD *)int v31 = *(_OWORD *)(a1 + 80);
    char v15 = cnprint::CNLogFormatter::FormatGeneral(a1 + 2488, (uint64_t)v31, "%s failed, invalid specified error states, min state %d, max state %d.");
  }
  else
  {
    if (*(_DWORD *)(a3 + 8) == *(_DWORD *)(a2 + 8))
    {
      int v14 = *(_DWORD *)(a4 + 8);
      if (*(_DWORD *)(a5 + 8) == v14 && *(_DWORD *)(a6 + 8) == v14 && *(_DWORD *)(a6 + 12) == v14) {
        sub_18E06E85C((uint64_t)v31);
      }
      LOWORD(v26) = 12;
      v35[0] = 4;
      *(_OWORD *)int v31 = *(_OWORD *)(a1 + 80);
      char v15 = cnprint::CNLogFormatter::FormatGeneral(a1 + 2488, (uint64_t)v31, "%s failed, size mismatch, error state size,%u, inital error value size,%u, init covariance matrix size, %u, %u");
      goto LABEL_13;
    }
    LOWORD(v26) = 12;
    v35[0] = 4;
    *(_OWORD *)int v31 = *(_OWORD *)(a1 + 80);
    char v15 = cnprint::CNLogFormatter::FormatGeneral(a1 + 2488, (uint64_t)v31, "%s failed, size mismatch, full state size,%u, initial value size,%u");
  }
  int v21 = *(char *)(a1 + 2511);
  uint64_t v22 = *(void *)(a1 + 2488);
LABEL_17:
  if (v21 >= 0) {
    char v23 = v15;
  }
  else {
    char v23 = v22;
  }
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v26, v35, "%s", v16, v17, v18, v19, v20, v23);
}

void sub_18E05A62C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  sub_18E06B5D4(&a38);
  sub_18E06B5D4((void *)(v38 - 256));
  sub_18E06B5D4(&a32);
  sub_18E06B5D4(&a26);
  sub_18E06B5D4(&a20);
  _Unwind_Resume(a1);
}

void raven::RavenPNTEstimator::ResetInsStates(raven::RavenPNTEstimator *this, int8x16_t a2, int8x16_t a3)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EB403A40, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EB403A40))
  {
    uint64_t v22 = 0x300000001;
    uint64_t v20 = &unk_1EDD18258;
    char v23 = &v24;
    long long v21 = xmmword_18E1F8560;
    uint64_t v24 = 0xB0000000ALL;
    int v25 = 12;
    sub_18DFEC63C((uint64_t)&v20, (uint64_t)v66);
    uint64_t v28 = 0x300000001;
    uint64_t v26 = &unk_1EDD18258;
    int v29 = &v30;
    long long v27 = xmmword_18E1F8560;
    uint64_t v30 = 0xE0000000DLL;
    int v31 = 15;
    sub_18DFEC63C((uint64_t)&v26, (uint64_t)&v32);
    uint64_t v54 = 0x300000001;
    uint64_t __p = &unk_1EDD18258;
    uint64_t v55 = &v56;
    long long v53 = xmmword_18E1F8560;
    uint64_t v56 = 0x1100000010;
    int v57 = 18;
    sub_18DFEC63C((uint64_t)&__p, (uint64_t)&v58);
    sub_18E058DF8((uint64_t)v63, (uint64_t)&v32, (uint64_t)&v58);
    sub_18E05B028((uint64_t)&unk_1EB404168, (uint64_t)v66, (uint64_t)v63);
    __cxa_atexit((void (*)(void *))sub_18E058EA4, &unk_1EB404168, &dword_18DEDB000);
    __cxa_guard_release(&qword_1EB403A40);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EB403A48, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EB403A48))
  {
    sub_18DFEB188(3, 1, (uint64_t)v66);
    sub_18DFEB188(3, 1, (uint64_t)&v20);
    sub_18E05B1C8(3, 1, (uint64_t)&v32);
    sub_18E05B13C((uint64_t)v63, (uint64_t)&v20, (uint64_t)&v32);
    sub_18E05B0B4((uint64_t)v66, (uint64_t)v63);
    __cxa_atexit((void (*)(void *))sub_18E05B298, &qword_1EB404208, &dword_18DEDB000);
    __cxa_guard_release(&qword_1EB403A48);
  }
  BOOL v4 = raven::RavenPNTEstimator::UseHighAccelerationParameters(this, a2, a3);
  uint64_t v5 = *((void *)this + 146);
  uint64_t v6 = 744;
  if (v4) {
    uint64_t v6 = 752;
  }
  double v7 = *(double *)(v5 + v6);
  double v8 = *(double *)(v5 + 728);
  uint64_t v9 = 768;
  if (v4) {
    uint64_t v9 = 776;
  }
  double v10 = *(double *)(v5 + v9);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EB403A50, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EB403A50))
  {
    uint64_t v22 = 0x300000001;
    uint64_t v20 = &unk_1EDD18258;
    char v23 = &v24;
    long long v21 = xmmword_18E1F8560;
    uint64_t v24 = 0xA00000009;
    int v25 = 11;
    sub_18DFEC63C((uint64_t)&v20, (uint64_t)v66);
    uint64_t v28 = 0x300000001;
    uint64_t v26 = &unk_1EDD18258;
    int v29 = &v30;
    long long v27 = xmmword_18E1F8560;
    uint64_t v30 = 0xD0000000CLL;
    int v31 = 14;
    sub_18DFEC63C((uint64_t)&v26, (uint64_t)&v32);
    uint64_t v54 = 0x300000001;
    uint64_t __p = &unk_1EDD18258;
    uint64_t v55 = &v56;
    long long v53 = xmmword_18E1F8560;
    uint64_t v56 = 0x100000000FLL;
    int v57 = 17;
    sub_18DFEC63C((uint64_t)&__p, (uint64_t)&v58);
    sub_18E058DF8((uint64_t)v63, (uint64_t)&v32, (uint64_t)&v58);
    sub_18E05B028((uint64_t)&unk_1EB4041B8, (uint64_t)v66, (uint64_t)v63);
    __cxa_atexit((void (*)(void *))sub_18E058EA4, &unk_1EB4041B8, &dword_18DEDB000);
    __cxa_guard_release(&qword_1EB403A50);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EB403A58, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EB403A58))
  {
    sub_18E05B2B8();
    __cxa_atexit((void (*)(void *))sub_18E05B298, &qword_1EB404278, &dword_18DEDB000);
    __cxa_guard_release(&qword_1EB403A58);
  }
  uint64_t v60 = 0x100000003;
  uint64_t v58 = &unk_1EDD18D98;
  int v61 = &v62;
  long long v59 = xmmword_18E1F6F60;
  sub_18DFE2CC8((uint64_t)&v58, 1.0);
  v11.f64[0] = v7 * v7;
  uint64_t v28 = 0x100000003;
  long long v27 = xmmword_18E1F6F60;
  uint64_t v26 = &unk_1EDD18D98;
  int v29 = &v30;
  sub_18E06E238((uint64_t)&v58, (uint64_t)&v26, v11);
  uint64_t v49 = 0x100000003;
  uint64_t v47 = &unk_1EDD18D98;
  BOOL v50 = &v51;
  long long v48 = xmmword_18E1F6F60;
  sub_18DFE2CC8((uint64_t)&v47, 1.0);
  v12.f64[0] = v8 * v8;
  uint64_t v54 = 0x100000003;
  long long v53 = xmmword_18E1F6F60;
  uint64_t __p = &unk_1EDD18D98;
  uint64_t v55 = &v56;
  sub_18E06E238((uint64_t)&v47, (uint64_t)&__p, v12);
  uint64_t v39 = 0x100000003;
  char v37 = &unk_1EDD18D98;
  int v40 = &v41;
  long long v38 = xmmword_18E1F6F60;
  sub_18DFE2CC8((uint64_t)&v37, 1.0);
  v13.f64[0] = v10 * v10;
  uint64_t v44 = 0x100000003;
  long long v43 = xmmword_18E1F6F60;
  int v42 = &unk_1EDD18D98;
  uint64_t v45 = &v46;
  sub_18E06E238((uint64_t)&v37, (uint64_t)&v42, v13);
  uint64_t v34 = 0x100000006;
  long long v33 = xmmword_18E1FD770;
  uint64_t v32 = &unk_1EDD19728;
  uint64_t v35 = &v36;
  sub_18E075DE4((uint64_t)&__p, (uint64_t)&v42, (uint64_t)&v32);
  uint64_t v22 = 0x100000009;
  uint64_t v20 = &unk_1EDD19E78;
  long long v21 = xmmword_18E1FD860;
  char v23 = &v24;
  sub_18E075DE4((uint64_t)&v26, (uint64_t)&v32, (uint64_t)&v20);
  v63[3] = 0xA0000000ALL;
  *(_OWORD *)&v63[1] = xmmword_18E1FD870;
  v63[0] = &unk_1EDD175C8;
  int v64 = &v65;
  sub_18E07D314((uint64_t)&v20, 0, (uint64_t)v63);
  uint64_t v69 = 0x900000009;
  v66[0] = &unk_1EDD19ED8;
  v66[1] = v63[1];
  uint64_t v14 = (HIDWORD(v63[1]) * LODWORD(v63[1]));
  int v67 = HIDWORD(v63[1]) * LODWORD(v63[1]);
  int v68 = v63[1];
  char v15 = v71;
  int v70 = v71;
  if (LODWORD(v63[1]) > 9)
  {
    uint64_t v18 = "this->max_num_rows_ >= A.NumRows()";
    int v19 = 567;
  }
  else
  {
    if (HIDWORD(v63[1]) <= 9)
    {
      if ((int)v14 >= 1)
      {
        uint64_t v16 = v64;
        do
        {
          uint64_t v17 = *v16++;
          *v15++ = v17;
          --v14;
        }
        while (v14);
      }
      sub_18E07314C((uint64_t)&v32, (uint64_t)&unk_1EB404168);
      sub_18E07FB20((uint64_t)v63, (uint64_t)&qword_1EB404208);
      sub_18E07EFE4((uint64_t)&v26, (uint64_t)&unk_1EB4041B8);
      sub_18E07FC10((uint64_t)&v20, (uint64_t)&qword_1EB404278);
      sub_18E07FD00((uint64_t)&v58, (uint64_t)v66);
    }
    uint64_t v18 = "this->max_num_cols_ >= A.NumCols()";
    int v19 = 568;
  }
  __assert_rtn("CNMatrix", "cnmatrix.h", v19, v18);
}

void sub_18E05AF70(_Unwind_Exception *a1)
{
}

uint64_t sub_18E05B028(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 24) = 0x100000009;
  *(void *)a1 = &unk_1EDD19EA8;
  *(_OWORD *)(a1 + 8) = xmmword_18E1FD860;
  *(void *)(a1 + 32) = a1 + 40;
  return sub_18E072E48(a2, a3, a1);
}

void sub_18E05B094(_Unwind_Exception *a1)
{
  *int v1 = &unk_1EDD174A8;
  _Unwind_Resume(a1);
}

uint64_t sub_18E05B0B4(uint64_t a1, uint64_t a2)
{
  qword_1EB404220 = 0x100000009;
  qword_1EB404208 = (uint64_t)&unk_1EDD19E78;
  *(_OWORD *)algn_1EB404210 = xmmword_18E1FD860;
  qword_1EB404228 = (uint64_t)&unk_1EB404230;
  return sub_18E075DE4(a1, a2, (uint64_t)&qword_1EB404208);
}

void sub_18E05B11C(_Unwind_Exception *a1)
{
  *int v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

uint64_t sub_18E05B13C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 24) = 0x100000006;
  *(void *)a1 = &unk_1EDD19728;
  *(_OWORD *)(a1 + 8) = xmmword_18E1FD770;
  *(void *)(a1 + 32) = a1 + 40;
  return sub_18E075DE4(a2, a3, a1);
}

void sub_18E05B1A8(_Unwind_Exception *a1)
{
  *int v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

uint64_t sub_18E05B1C8@<X0>(int a1@<W0>, int a2@<W1>, uint64_t a3@<X8>)
{
  if (a1 < 0) {
    __assert_rtn("Ones", "cnmatrix.h", 2317, "nr >= 0");
  }
  if (a2 < 0) {
    __assert_rtn("Ones", "cnmatrix.h", 2318, "nc >= 0");
  }
  *(void *)(a3 + 24) = 0x100000003;
  *(void *)a3 = &unk_1EDD18D98;
  *(void *)(a3 + 32) = a3 + 40;
  *(_DWORD *)(a3 + 8) = a1;
  *(_DWORD *)(a3 + 12) = a2;
  *(_DWORD *)(a3 + 16) = a2 * a1;
  *(_DWORD *)(a3 + 20) = a1;

  return sub_18DFE2CC8(a3, 1.0);
}

void *sub_18E05B278(void *result)
{
  *double result = &unk_1EDD17478;
  return result;
}

void *sub_18E05B298(void *result)
{
  *double result = &unk_1EDD17478;
  return result;
}

uint64_t sub_18E05B2B8()
{
  qword_1EB404290 = 0x100000009;
  qword_1EB404278 = (uint64_t)&unk_1EDD19E78;
  qword_1EB404298 = (uint64_t)&unk_1EB4042A0;
  unk_1EB404280 = xmmword_18E1FD860;
  return sub_18DFE2CC8((uint64_t)&qword_1EB404278, 0.0);
}

double sub_18E05B304(uint64_t a1, uint64_t a2, float64x2_t a3)
{
  *(void *)(a1 + 24) = 0x100000003;
  *(void *)a1 = &unk_1EDD18D98;
  *(_OWORD *)(a1 + 8) = xmmword_18E1F6F60;
  *(void *)(a1 + 32) = a1 + 40;
  *(void *)&double result = *(_OWORD *)&sub_18E06E238(a2, a1, a3);
  return result;
}

void *sub_18E05B350(void *result)
{
  *double result = &unk_1EDD17478;
  return result;
}

void *sub_18E05B370(void *result)
{
  *double result = &unk_1EDD17478;
  return result;
}

void *sub_18E05B390(void *result)
{
  result[64] = &unk_1EDD174A8;
  result[58] = &unk_1EDD174A8;
  *double result = &unk_1EDD17478;
  return result;
}

void *sub_18E05B3F0(void *result)
{
  *double result = &unk_1EDD17478;
  return result;
}

void *sub_18E05B410(void *result)
{
  result[76] = &unk_1EDD174A8;
  result[58] = &unk_1EDD174A8;
  *double result = &unk_1EDD17478;
  return result;
}

void *sub_18E05B470(void *result)
{
  *double result = &unk_1EDD17478;
  return result;
}

void sub_18E05B490(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = 0x100000002;
  double v7 = &unk_1EDD18B28;
  long long v8 = xmmword_18E1FD1A0;
  double v10 = &v11;
  uint64_t v4 = 0x200000002;
  int v2 = &unk_1EDD18BB8;
  long long v3 = xmmword_18E1FD1B0;
  uint64_t v5 = &v6;
  *(void *)(a1 + 24) = 0x200000002;
  *(void *)a1 = &unk_1EDD18BB8;
  *(_OWORD *)(a1 + 8) = xmmword_18E1FD1B0;
  *(void *)(a1 + 32) = a1 + 40;
  sub_18E06EA40(a2, (uint64_t)&v7, (uint64_t)&v2, a1);
}

void sub_18E05B578(_Unwind_Exception *a1)
{
  *int v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

uint64_t sub_18E05B598(uint64_t a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a2 + 8);
  int v2 = *(_DWORD *)(a2 + 12);
  *(void *)(a1 + 24) = 0x200000002;
  *(void *)a1 = &unk_1EDD18BB8;
  *(_DWORD *)(a1 + 8) = v2;
  *(_DWORD *)(a1 + 12) = v3;
  *(_DWORD *)(a1 + 16) = v3 * v2;
  *(_DWORD *)(a1 + 20) = v2;
  *(void *)(a1 + 32) = a1 + 40;
  return sub_18DFE2C64(a2, a1);
}

void sub_18E05B600(_Unwind_Exception *a1)
{
  *int v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

void sub_18E05B620(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 24) = 0x200000002;
  *(void *)a2 = &unk_1EDD18BB8;
  *(_OWORD *)(a2 + 8) = xmmword_18E1FD1B0;
  *(void *)(a2 + 32) = a2 + 40;
  uint64_t v9 = 0x100000002;
  double v7 = &unk_1EDD18B58;
  long long v8 = xmmword_18E1FD1A0;
  double v10 = &v11;
  uint64_t v4 = 0x100000008;
  int v2 = &unk_1EDD19CC8;
  long long v3 = xmmword_18E1FD760;
  uint64_t v5 = &v6;
  sub_18E01BFEC(a1, (uint64_t)&v7, (uint64_t)&v2, a2);
}

void sub_18E05B710(_Unwind_Exception *a1)
{
  *int v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

void sub_18E05B730(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 24) = 0x200000002;
  *(void *)a1 = &unk_1EDD18BB8;
  *(_OWORD *)(a1 + 8) = xmmword_18E1FD1B0;
  *(void *)(a1 + 32) = a1 + 40;
  BOOL v2 = 0;
  sub_18DFEEFE8(a2, a1, &v2);
}

void sub_18E05B7A4(_Unwind_Exception *a1)
{
  *int v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

double sub_18E05B7C4(unsigned char *a1, __n128 *a2)
{
  sub_18E05FB70((uint64_t)a1);
  *a1 = 0;

  *(void *)&double result = sub_18E059804((uint64_t)a1, a2, v4, v5, v6, v7, v8, v9).n128_u64[0];
  return result;
}

uint64_t sub_18E05B808(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(unsigned char *)(a1 + 1)) {
    return *(unsigned int *)(a1 + 11904);
  }
  __int16 v11 = 2;
  unsigned __int8 v10 = 2;
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v11, &v10, "WARNING: MeasurementAccumulator.NumberLocked() called on unlocked accumulator.", a4, a5, a6, a7, a8, v9);
  return 0;
}

uint64_t sub_18E05B858(uint64_t a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a2 + 8);
  int v2 = *(_DWORD *)(a2 + 12);
  *(void *)(a1 + 24) = 0x100000013;
  *(void *)a1 = &unk_1EDD17CE8;
  *(_DWORD *)(a1 + 8) = v2;
  *(_DWORD *)(a1 + 12) = v3;
  *(_DWORD *)(a1 + 16) = v3 * v2;
  *(_DWORD *)(a1 + 20) = v2;
  *(void *)(a1 + 32) = a1 + 40;
  return sub_18DFEE808(a2, a1);
}

void sub_18E05B8C4(_Unwind_Exception *a1)
{
  *int v1 = &unk_1EDD174A8;
  _Unwind_Resume(a1);
}

void *sub_18E05B8E4(void *result)
{
  *double result = &unk_1EDD174A8;
  return result;
}

uint64_t sub_18E05B904(uint64_t a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a2 + 8);
  int v2 = *(_DWORD *)(a2 + 12);
  *(void *)(a1 + 24) = 0x100000007;
  *(void *)a1 = &unk_1EDD19818;
  *(_DWORD *)(a1 + 8) = v2;
  *(_DWORD *)(a1 + 12) = v3;
  *(_DWORD *)(a1 + 16) = v3 * v2;
  *(_DWORD *)(a1 + 20) = v2;
  *(void *)(a1 + 32) = a1 + 40;
  return sub_18DFEE808(a2, a1);
}

void sub_18E05B970(_Unwind_Exception *a1)
{
  *int v1 = &unk_1EDD174A8;
  _Unwind_Resume(a1);
}

void *sub_18E05B990(void *result)
{
  *double result = &unk_1EDD174A8;
  return result;
}

uint64_t sub_18E05B9B0(uint64_t a1, uint64_t a2)
{
  uint64_t v139 = *MEMORY[0x1E4F143B8];
  double v3 = *(double *)(a2 + 16);
  uint64_t result = 0xFFFFFFFFLL;
  if ((*(void *)&v3 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && v3 != 0.0
    && (*(void *)(a2 + 56) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (*(void *)(a2 + 64) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && *(double *)(a2 + 56) > 0.0
    && *(double *)(a2 + 64) > 0.0
    && (*(void *)(a2 + 72) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (*(void *)(a2 + 80) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (*(void *)(a2 + 88) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && *(double *)(a2 + 72) > 0.0
    && *(double *)(a2 + 80) > 0.0
    && *(double *)(a2 + 88) > 0.0)
  {
    double v5 = *(double *)(a2 + 96);
    if ((*(void *)&v5 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
    {
      double v6 = *(double *)(a2 + 104);
      if ((*(void *)&v6 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
      {
        double v7 = *(double *)(a2 + 112);
        if ((*(void *)&v7 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
          && v5 > 0.0
          && v6 > 0.0
          && v7 > 0.0
          && (*(void *)(a2 + 120) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
          && (*(void *)(a2 + 128) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
          && *(double *)(a2 + 120) > 0.0
          && *(double *)(a2 + 128) > 0.0)
        {
          float64x2_t v8 = *(float64x2_t *)(a2 + 144);
          if ((*(void *)(a2 + 144) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
          {
            double v9 = *(double *)(a2 + 152);
            if ((*(void *)&v8.f64[1] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
              && (*(void *)(a2 + 160) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
            {
              float64_t v83 = *(double *)(a2 + 160);
              float64_t v84 = *(double *)(a2 + 176);
              v10.f64[1] = v84;
              double v85 = *(double *)(a2 + 144);
              v10.f64[0] = v83;
              if ((vmaxv_u16((uint16x4_t)vmovn_s32(vuzp1q_s32((int32x4_t)vclezq_f64(v8), (int32x4_t)vclezq_f64(v10)))) & 1) == 0
                && (*(void *)(a2 + 176) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
              {
                double v81 = *(double *)(a2 + 136);
                double v82 = fabs(v3);
                double v80 = *(double *)(a2 + 168);
                exp(-v82 / v5);
                exp(-v82 / v6);
                exp(-v82 / v7);
                uint64_t v125 = 0x200000002;
                long long v124 = xmmword_18E1FD1B0;
                char v123 = &unk_1EDD18BB8;
                long long v126 = &v127;
                if (!sub_18E073B20(a1, a2, (uint64_t)&v123, COERCE_DOUBLE(0x200000002), v11))
                {
                  sub_18E073A5C((uint64_t)v120);
                  int v19 = *(unsigned __int8 *)(a1 + 2536);
                  if (*(unsigned char *)(a1 + 2536))
                  {
                    if (v19 == 1)
                    {
                      double v20 = v82 * (v81 * *(double *)(a1 + 2568));
                      long long v21 = v122;
                      *BOOL v122 = v20;
                      int v22 = v121;
                      v21[v121 + 1] = v20;
                      v21[2 * v22 + 2] = v20;
                      uint64_t v129 = 0x300000001;
                      *(void *)double v128 = &unk_1EDD18258;
                      BOOL v130 = &v131;
                      *(_OWORD *)&v128[8] = xmmword_18E1F8560;
                      uint64_t v131 = 0x400000003;
                      int v132 = 5;
                      sub_18DFEC63C((uint64_t)v128, (uint64_t)v112);
                      *(void *)&long long v95 = 0x300000003;
                      long long v94 = xmmword_18E1F0010;
                      float64x2_t v93 = &unk_1EDD18EE8;
                      *((void *)&v95 + 1) = v96;
                      uint64_t v129 = 0x300000001;
                      *(void *)double v128 = &unk_1EDD18258;
                      BOOL v130 = &v131;
                      *(_OWORD *)&v128[8] = xmmword_18E1F8560;
                      uint64_t v131 = 0x1A00000019;
                      int v132 = 27;
                      sub_18DFEC63C((uint64_t)v128, (uint64_t)v111);
                      sub_18E06010C((uint64_t)&v136, a1 + 14616, (uint64_t)v111);
                      uint64_t v108 = 0x100000001;
                      *(void *)&long long v23 = 0x100000001;
                      *((void *)&v23 + 1) = 0x100000001;
                      long long v107 = v23;
                      long long v106 = &unk_1EDD18048;
                      int v109 = &v110;
                      uint64_t v116 = 0x100000001;
                      long long v115 = v23;
                      uint64_t v114 = &unk_1EDD180A8;
                      int8x16_t v117 = (double *)&v118;
                      sub_18E053D40((uint64_t)v128, (uint64_t)&v136);
                      sub_18E064598((uint64_t)v128, (uint64_t)&v106, (uint64_t)&v114);
                      sub_18DFEB188(3, 1, (uint64_t)&v133);
                      v135[*(int *)v117] = 1.0;
                      sub_18E030138((uint64_t)&v133, (uint64_t)&v136, (uint64_t)&v88);
                      sub_18E03017C((uint64_t)&v88);
                      if (fabs(v24.f64[0]) <= 0.000000015)
                      {
                        *(_WORD *)double v128 = 12;
                        v103[0] = 4;
                        char v30 = cnprint::CNLogFormatter::FormatGeneral(a1 + 2488, a2, "GetProcessNoiseInformationMatrix unexpected zero vector arbitrary_1,%.3lf,%.3lf,%.3lf", *v91, v91[1], v91[2]);
                        if (*(char *)(a1 + 2511) >= 0) {
                          LOBYTE(v36) = v30;
                        }
                        else {
                          uint64_t v36 = *(void *)(a1 + 2488);
                        }
                        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v128, v103, "%s", v31, v32, v33, v34, v35, v36);
                      }
                      else
                      {
                        v24.f64[0] = 1.0 / v24.f64[0];
                        sub_18E053C38((uint64_t)&v88, (uint64_t)v128, v24);
                        sub_18DFE2F24((uint64_t)&v88, (uint64_t)v128);
                      }
                      sub_18E030138((uint64_t)&v136, (uint64_t)&v88, (uint64_t)v103);
                      sub_18E03017C((uint64_t)v103);
                      if (fabs(v37.f64[0]) <= 0.000000015)
                      {
                        *(_WORD *)double v128 = 12;
                        LOBYTE(v98) = 4;
                        char v38 = cnprint::CNLogFormatter::FormatGeneral(a1 + 2488, a2, "GetProcessNoiseInformationMatrix unexpected zero vector arbitrary_2,%.3lf,%.3lf,%.3lf", *v105, v105[1], v105[2]);
                        if (*(char *)(a1 + 2511) >= 0) {
                          LOBYTE(v44) = v38;
                        }
                        else {
                          uint64_t v44 = *(void *)(a1 + 2488);
                        }
                        cnprint::CNPrinter::Print((cnprint::CNPrinter *)v128, (unsigned __int8 *)&v98, "%s", v39, v40, v41, v42, v43, v44);
                      }
                      else
                      {
                        v37.f64[0] = 1.0 / v37.f64[0];
                        sub_18E053C38((uint64_t)v103, (uint64_t)v128, v37);
                        sub_18DFE2F24((uint64_t)v103, (uint64_t)v128);
                      }
                      sub_18E01D4D4((uint64_t)&v136, (uint64_t)&v98);
                      sub_18DFF6248(":", (uint64_t)&v93, 0, (uint64_t)v128);
                      sub_18DFEC97C((uint64_t)v128, (uint64_t)&v98);
                      sub_18E01D4D4((uint64_t)&v88, (uint64_t)&v98);
                      sub_18DFF6248(":", (uint64_t)&v93, 1, (uint64_t)v128);
                      sub_18DFEC97C((uint64_t)v128, (uint64_t)&v98);
                      sub_18E01D4D4((uint64_t)v103, (uint64_t)&v98);
                      sub_18DFF6248(":", (uint64_t)&v93, 2, (uint64_t)v128);
                      sub_18DFEC97C((uint64_t)v128, (uint64_t)&v98);
                      uint64_t v45 = *(void *)(a1 + 14648);
                      if (*(double *)(v45 + 192) * (v80 * *(double *)(v45 + 192)) <= v81) {
                        double v46 = v81;
                      }
                      else {
                        double v46 = *(double *)(v45 + 192) * (v80 * *(double *)(v45 + 192));
                      }
                      double v47 = *(double *)(a1 + 2560);
                      double v48 = *(double *)(a1 + 2568);
                      sub_18DFEB238(3, 3, (uint64_t)&v136);
                      double v49 = v82 * (v48 * v46);
                      BOOL v50 = v138;
                      *uint64_t v138 = v82 * (v85 * v47);
                      int v51 = HIDWORD(v137);
                      v50[HIDWORD(v137) + 1] = v49;
                      v50[2 * v51 + 2] = v49;
                      sub_18DFF6360((uint64_t)&v93, (uint64_t)&v136, (uint64_t)&v88);
                      sub_18DFF63E0((uint64_t)&v93, (uint64_t)v103);
                      sub_18DFF6360((uint64_t)&v88, (uint64_t)v103, (uint64_t)&v133);
                      sub_18DFEE864((uint64_t)v128, (uint64_t)v120, (uint64_t)v112, (uint64_t)v112);
                      sub_18DFEC6E4((uint64_t)v128, (uint64_t)&v133);
                    }
                    else if (v19 == 2)
                    {
                      __assert_rtn("GetProcessNoiseInformationMatrix", "ravenpntestimator.h", 806, "false && \"Unexpected case RavenPNTEstimatorStateParameterization::ParameterizationCount\"");
                    }
                  }
                  else
                  {
                    LOBYTE(v94) = 0;
                    v96[0] = 0x300000003;
                    long long v95 = xmmword_18E1F0010;
                    *((void *)&v94 + 1) = &unk_1EDD18EE8;
                    v96[1] = &v97;
                    float64x2_t v93 = &unk_1EDD0AB90;
                    uint64_t v25 = *(void *)(a1 + 14648);
                    *(_OWORD *)double v128 = *(_OWORD *)v25;
                    *(void *)&v128[16] = *(void *)(v25 + 16);
                    long long v136 = 0uLL;
                    uint64_t v137 = 0;
                    float64x2_t v133 = 0uLL;
                    uint64_t v134 = 0;
                    uint64_t v26 = (cnstatistics *)cnnavigation::ENUToECEF(&v136, 1, 0, (uint64_t)v128, 1, &v133, (uint64_t)&v93);
                    int v27 = (int)v26;
                    if (*(unsigned char *)(a1 + 1208)
                      && (unsigned int v28 = *(unsigned __int8 *)(a1 + 1320), v28 <= 7)
                      && ((1 << v28) & 0xCE) != 0)
                    {
                      int v29 = (double *)(*(void *)(a1 + 1168) + 936);
                    }
                    else
                    {
                      int v29 = (double *)(*(void *)(a1 + 1168) + 928);
                    }
                    double v52 = cnstatistics::InverseNormal(v26, 1.0 - *v29, 0.0, sqrt(*(double *)(*(void *)(a1 + 14912) + 192 * *(int *)(a1 + 14900) + 192)));
                    double v53 = *(double *)(*(void *)(a1 + 14648) + 192);
                    sub_18DFEB238(3, 3, (uint64_t)&v136);
                    if (v27 || v53 <= v52)
                    {
                      uint64_t v62 = v138;
                      *uint64_t v138 = v84;
                      int v63 = HIDWORD(v137);
                      v62[HIDWORD(v137) + 1] = v84;
                      v62[2 * v63 + 2] = v84;
                    }
                    else
                    {
                      sub_18DFEB238(3, 3, (uint64_t)&v133);
                      uint64_t v116 = 0x100000003;
                      long long v115 = xmmword_18E1F6F60;
                      uint64_t v114 = &unk_1EDD18D98;
                      int8x16_t v117 = (double *)&v118;
                      uint64_t v54 = *(void *)(a1 + 14648);
                      long long v118 = *(_OWORD *)(v54 + 200);
                      uint64_t v119 = *(void *)(v54 + 216);
                      uint64_t v90 = 0x300000003;
                      float64x2_t v88 = &unk_1EDD18EE8;
                      long long v89 = xmmword_18E1F0010;
                      long long v91 = (double *)&v92;
                      if ((_BYTE)v94) {
                        sub_18DFE2F24((uint64_t)&v88, (uint64_t)&v94 + 8);
                      }
                      sub_18E0519FC(":", (uint64_t)&v88, 0, (uint64_t)v128);
                      uint64_t v55 = DWORD2(v115);
                      if (SDWORD2(v115) < 1)
                      {
                        double v57 = 0.0;
                      }
                      else
                      {
                        uint64_t v56 = v117;
                        double v57 = 0.0;
                        uint64_t v58 = (double *)v130;
                        do
                        {
                          double v59 = *v56++;
                          double v60 = v59;
                          double v61 = *v58++;
                          double v57 = v57 + v60 * v61;
                          --v55;
                        }
                        while (v55);
                      }
                      sub_18E0519FC(":", (uint64_t)&v88, 1, (uint64_t)v128);
                      uint64_t v64 = DWORD2(v115);
                      if (SDWORD2(v115) < 1)
                      {
                        double v66 = 0.0;
                      }
                      else
                      {
                        uint64_t v65 = v117;
                        double v66 = 0.0;
                        int v67 = (double *)v130;
                        do
                        {
                          double v68 = *v65++;
                          double v69 = v68;
                          double v70 = *v67++;
                          double v66 = v66 + v69 * v70;
                          --v64;
                        }
                        while (v64);
                      }
                      double v71 = sqrt(v66 * v66 + v57 * v57);
                      if (fabs(v71) <= 0.000000015)
                      {
                        int v73 = v135;
                        *int8x16_t v135 = v84;
                        int v74 = HIDWORD(v134);
                        v73[HIDWORD(v134) + 1] = v84;
                        v73[2 * v74 + 2] = v83;
                      }
                      else
                      {
                        double v87 = *(double *)(*(void *)(a1 + 14648) + 192);
                        sub_18E080674((uint64_t)v103);
                        int v72 = v105;
                        *int8x16_t v105 = v85;
                        v72[v104 + 1] = v87 * (v9 * v87);
                        uint64_t v100 = 0x200000002;
                        long long v99 = xmmword_18E1FD1B0;
                        double v98 = &unk_1EDD18BB8;
                        uint64_t v101 = v102;
                        v102[0] = v57 / v71;
                        v102[1] = v66 / v71;
                        v102[2] = -(v66 / v71);
                        double v102[3] = v57 / v71;
                        uint64_t v129 = 0x200000001;
                        *(void *)double v128 = &unk_1EDD181F8;
                        BOOL v130 = &v131;
                        *(_OWORD *)&v128[8] = xmmword_18E1FD740;
                        uint64_t v131 = 0x100000000;
                        sub_18E059674((uint64_t)v128, (uint64_t)v113);
                        sub_18E0806B4((uint64_t)v111, (uint64_t)&v98, (uint64_t)v103);
                        sub_18E05B598((uint64_t)&v106, (uint64_t)&v98);
                        sub_18E0806B4((uint64_t)v112, (uint64_t)v111, (uint64_t)&v106);
                        sub_18E07492C((uint64_t)v128, (uint64_t)&v133, (uint64_t)v113, (uint64_t)v113);
                        sub_18E07421C((uint64_t)v128, (uint64_t)v112);
                        v135[2 * SHIDWORD(v134) + 2] = v83;
                      }
                      sub_18DFF6360((uint64_t)&v88, (uint64_t)&v133, (uint64_t)v103);
                      sub_18DFF63E0((uint64_t)&v88, (uint64_t)&v98);
                      sub_18DFF6360((uint64_t)v103, (uint64_t)&v98, (uint64_t)v128);
                      sub_18DFE2F24((uint64_t)&v136, (uint64_t)v128);
                    }
                    uint64_t v129 = 0x300000001;
                    *(void *)double v128 = &unk_1EDD18258;
                    BOOL v130 = &v131;
                    *(_OWORD *)&v128[8] = xmmword_18E1F8560;
                    uint64_t v131 = 0x100000000;
                    int v132 = 2;
                    sub_18DFEC63C((uint64_t)v128, (uint64_t)&v88);
                    uint64_t v129 = 0x300000001;
                    *(void *)double v128 = &unk_1EDD18258;
                    BOOL v130 = &v131;
                    *(_OWORD *)&v128[8] = xmmword_18E1F8560;
                    uint64_t v131 = 0x400000003;
                    int v132 = 5;
                    sub_18DFEC63C((uint64_t)v128, (uint64_t)v103);
                    v75.f64[0] = v3 * v3 * v82 * 0.333333333;
                    sub_18E060288((uint64_t)&v133, (uint64_t)&v136, v75);
                    sub_18DFEE864((uint64_t)v128, (uint64_t)v120, (uint64_t)&v88, (uint64_t)&v88);
                    sub_18DFEC6E4((uint64_t)v128, (uint64_t)&v133);
                    v76.f64[0] = v3 * v3 * 0.5;
                    sub_18E060288((uint64_t)&v133, (uint64_t)&v136, v76);
                    sub_18DFEE864((uint64_t)v128, (uint64_t)v120, (uint64_t)&v88, (uint64_t)v103);
                    sub_18DFEC6E4((uint64_t)v128, (uint64_t)&v133);
                    v77.f64[0] = v3 * v3 * 0.5;
                    sub_18E060288((uint64_t)&v133, (uint64_t)&v136, v77);
                    sub_18DFEE864((uint64_t)v128, (uint64_t)v120, (uint64_t)v103, (uint64_t)&v88);
                    sub_18DFEC6E4((uint64_t)v128, (uint64_t)&v133);
                    v78.f64[0] = v82;
                    sub_18E060288((uint64_t)&v133, (uint64_t)&v136, v78);
                    sub_18DFEE864((uint64_t)v128, (uint64_t)v120, (uint64_t)v103, (uint64_t)v103);
                    sub_18DFEC6E4((uint64_t)v128, (uint64_t)&v133);
                  }
                  uint64_t v129 = 0x200000001;
                  *(void *)double v128 = &unk_1EDD181F8;
                  BOOL v130 = &v131;
                  *(_OWORD *)&v128[8] = xmmword_18E1FD740;
                  uint64_t v131 = 0x100000000FLL;
                  sub_18E059674((uint64_t)v128, (uint64_t)&v98);
                  uint64_t v129 = 0x600000001;
                  *(void *)double v128 = &unk_1EDD18378;
                  BOOL v130 = &v131;
                  *(_OWORD *)&v128[8] = xmmword_18E1FD840;
                  for (uint64_t i = 10; i != 16; ++i)
                    *(_DWORD *)&v128[4 * i] = i + 7;
                  sub_18E078C54((uint64_t)v103, (uint64_t)v128);
                  sub_18E08073C((uint64_t)v128);
                }
                *(_WORD *)double v128 = 12;
                v120[0] = 4;
                float64x2_t v12 = (uint64_t *)cnprint::CNLogFormatter::FormatGeneral(a1 + 2488, a2, "RavenEstimator::GetOscillatorProcessNoiseCovarianceMatrix failed");
                if (*(char *)(a1 + 2511) >= 0) {
                  LOBYTE(v18) = (_BYTE)v12;
                }
                else {
                  uint64_t v18 = *v12;
                }
                cnprint::CNPrinter::Print((cnprint::CNPrinter *)v128, v120, "%s", v13, v14, v15, v16, v17, v18);
                return 0xFFFFFFFFLL;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_18E05CC04(uint64_t a1)
{
  MEMORY[0x1F4188790](a1);
  unsigned int v9 = *(_DWORD *)(v1 + 8);
  unsigned int v10 = *(_DWORD *)(v1 + 12);
  if (v9 <= v10) {
    int v11 = *(_DWORD *)(v1 + 12);
  }
  else {
    int v11 = *(_DWORD *)(v1 + 8);
  }
  if (v9) {
    BOOL v12 = v10 == 0;
  }
  else {
    BOOL v12 = 1;
  }
  BOOL v13 = !v12 && v11 == 18;
  if (!v13
    || ((uint64_t v16 = v2, v18 = *(_DWORD *)(v2 + 8), v17 = *(_DWORD *)(v2 + 12), v18 <= v17)
      ? (int v19 = *(_DWORD *)(v2 + 12))
      : (int v19 = *(_DWORD *)(v2 + 8)),
        !v18 || !v17 || v19 != 15))
  {
    LOWORD(v141) = 12;
    v51[0] = 4;
    uint64_t v14 = "f_SixDOFError called with inadequate matrices";
LABEL_12:
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v141, v51, v14, v4, v5, v6, v7, v8, v41);
    return 0xFFFFFFFFLL;
  }
  double v20 = v3;
  uint64_t v21 = *v3;
  if (!*v3)
  {
    LOWORD(v141) = 12;
    v51[0] = 4;
    uint64_t v14 = "f_SixDOFError called with invalid numerical integrator";
    goto LABEL_12;
  }
  uint64_t v22 = v6;
  uint64_t v23 = v5;
  uint64_t v24 = v4;
  uint64_t v25 = v1;
  uint64_t v26 = v3[2];
  long long v153 = *(_OWORD *)v3[1];
  double v27 = sub_18E065890((uint64_t)v152, v26);
  if ((*(unsigned int (**)(uint64_t, long long *, unsigned char *, double))(*(void *)v21 + 56))(v21, &v153, v152, v27))
  {
    return 0xFFFFFFFFLL;
  }
  long long v151 = *((_OWORD *)v20 + 2);
  uint64_t v148 = 0x100000013;
  long long v147 = xmmword_18E1FD730;
  uint64_t v146 = &unk_1EDD17CB8;
  BOOL v149 = (double *)&v150;
  uint64_t v143 = 0x1300000013;
  uint64_t v141 = &unk_1EDD17C88;
  long long v142 = xmmword_18E1FD880;
  uint64_t v144 = &v145;
  uint64_t v138 = 0xF00000013;
  long long v137 = xmmword_18E1FD890;
  long long v136 = &unk_1EDD17C28;
  uint64_t v139 = &v140;
  if ((*(unsigned int (**)(uint64_t, long long *, void, void **, void **, void **))(*(void *)v21 + 88))(v21, &v151, v20[3], &v146, &v141, &v136))
  {
    return 0xFFFFFFFFLL;
  }
  unsigned int v28 = v149;
  double v29 = v149[6];
  double v30 = v149[7];
  double v31 = v149[8];
  double v32 = v149[9];
  double v33 = sqrt(v30 * v30 + v29 * v29 + v31 * v31 + v32 * v32);
  if (fabs(v33) <= 0.000000015) {
    return 0xFFFFFFFFLL;
  }
  v149[6] = v29 / v33;
  v28[7] = v30 / v33;
  v28[8] = v31 / v33;
  v28[9] = v32 / v33;
  uint64_t v133 = 0x100000013;
  long long v132 = xmmword_18E1FD730;
  uint64_t v131 = &unk_1EDD17CB8;
  uint64_t v134 = &v135;
  int64x2_t v42 = vdupq_n_s64(0x7FF8000000000000uLL);
  int64x2_t v95 = v42;
  int64x2_t v96 = v42;
  int64x2_t v97 = v42;
  int64x2_t v98 = v42;
  int64x2_t v99 = v42;
  int64x2_t v100 = v42;
  int64x2_t v101 = v42;
  int64x2_t v102 = v42;
  int64x2_t v103 = v42;
  int64x2_t v104 = v42;
  int64x2_t v105 = v42;
  int64x2_t v106 = v42;
  int64x2_t v107 = v42;
  int64x2_t v108 = v42;
  int64x2_t v109 = v42;
  int64x2_t v110 = v42;
  int64x2_t v111 = v42;
  int64x2_t v112 = v42;
  int64x2_t v113 = v42;
  int64x2_t v114 = v42;
  int64x2_t v115 = v42;
  int64x2_t v116 = v42;
  int64x2_t v117 = v42;
  int64x2_t v118 = v42;
  int64x2_t v119 = v42;
  int64x2_t v120 = v42;
  int64x2_t v121 = v42;
  int64x2_t v122 = v42;
  int64x2_t v123 = v42;
  int64x2_t v124 = v42;
  int64x2_t v125 = v42;
  int64x2_t v126 = v42;
  int64x2_t v127 = v42;
  int64x2_t v128 = v42;
  int64x2_t v129 = v42;
  uint64_t v130 = 0x7FF8000000000000;
  sub_18E06BA00((uint64_t)v152, v25, (uint64_t)&v131, (uint64_t)&v95);
  uint64_t v92 = 0x100000013;
  long long v91 = xmmword_18E1FD730;
  uint64_t v90 = &unk_1EDD17CB8;
  float64x2_t v93 = &v94;
  int64x2_t v54 = v42;
  int64x2_t v55 = v42;
  int64x2_t v56 = v42;
  int64x2_t v57 = v42;
  int64x2_t v58 = v42;
  int64x2_t v59 = v42;
  int64x2_t v60 = v42;
  int64x2_t v61 = v42;
  int64x2_t v62 = v42;
  int64x2_t v63 = v42;
  int64x2_t v64 = v42;
  int64x2_t v65 = v42;
  int64x2_t v66 = v42;
  int64x2_t v67 = v42;
  int64x2_t v68 = v42;
  int64x2_t v69 = v42;
  int64x2_t v70 = v42;
  int64x2_t v71 = v42;
  int64x2_t v72 = v42;
  int64x2_t v73 = v42;
  int64x2_t v74 = v42;
  int64x2_t v75 = v42;
  int64x2_t v76 = v42;
  int64x2_t v77 = v42;
  int64x2_t v78 = v42;
  int64x2_t v79 = v42;
  int64x2_t v80 = v42;
  int64x2_t v81 = v42;
  int64x2_t v82 = v42;
  int64x2_t v83 = v42;
  int64x2_t v84 = v42;
  int64x2_t v85 = v42;
  int64x2_t v86 = v42;
  int64x2_t v87 = v42;
  int64x2_t v88 = v42;
  uint64_t v89 = 0x7FF8000000000000;
  sub_18E080DD0((uint64_t)v51);
  sub_18E06BA00((uint64_t)&v146, (uint64_t)v51, (uint64_t)&v90, (uint64_t)&v54);
  sub_18E080E34((uint64_t)v51);
  uint64_t v34 = v53;
  *double v53 = v95.i64[0];
  int v35 = v52;
  v34[v52 + 1] = v95.i64[1];
  v34[2 * v35 + 2] = v96.i64[0];
  v34[3 * v35 + 3] = v96.i64[1];
  v34[4 * v35 + 4] = v97.i64[0];
  v34[5 * v35 + 5] = v97.i64[1];
  v34[6 * v35 + 6] = v98.i64[0];
  int v36 = 7 * v35;
  v34[v36 + 6] = v98.i64[1];
  v34[(8 * v35) | 6] = v99.i64[0];
  v34[6 * v35 + 7] = v99.i64[1];
  v34[v36 + 7] = v100.i64[0];
  v34[(8 * v35) | 7] = v100.i64[1];
  v34[6 * v35 + 8] = v101.i64[0];
  v34[v36 + 8] = v101.i64[1];
  v34[8 * v35 + 8] = v102.i64[0];
  v34[6 * v35 + 9] = v102.i64[1];
  v34[v36 + 9] = v103.i64[0];
  v34[8 * v35 + 9] = v103.i64[1];
  v34[9 * v35 + 10] = v104.i64[0];
  v34[10 * v35 + 11] = v104.i64[1];
  v34[11 * v35 + 12] = v105.i64[0];
  v34[12 * v35 + 13] = v105.i64[1];
  v34[13 * v35 + 14] = v106.i64[0];
  v34[14 * v35 + 15] = v106.i64[1];
  v34[15 * v35 + 16] = v107.i64[0];
  v34[16 * v35 + 17] = v107.i64[1];
  v34[17 * v35 + 18] = v108.i64[0];
  sub_18E080E78((uint64_t)v48);
  float64x2_t v37 = v50;
  double *v50 = 1.0 / *(double *)v54.i64;
  int v38 = v49;
  v37[v49 + 1] = 1.0 / *(double *)&v54.i64[1];
  v37[2 * v38 + 2] = 1.0 / *(double *)v55.i64;
  v37[3 * v38 + 3] = 1.0 / *(double *)&v55.i64[1];
  v37[4 * v38 + 4] = 1.0 / *(double *)v56.i64;
  v37[5 * v38 + 5] = 1.0 / *(double *)&v56.i64[1];
  v37[6 * v38 + 6] = *(double *)v57.i64;
  int v39 = 7 * v38;
  v37[v39 + 6] = *(double *)&v58.i64[1];
  v37[(8 * v38) | 6] = *(double *)v60.i64;
  int v40 = 9 * v38;
  v37[v40 + 6] = *(double *)&v61.i64[1];
  v37[6 * v38 + 7] = *(double *)&v57.i64[1];
  v37[v39 + 7] = *(double *)v59.i64;
  v37[(8 * v38) | 7] = *(double *)&v60.i64[1];
  v37[v40 + 7] = *(double *)v62.i64;
  v37[6 * v38 + 8] = *(double *)v58.i64;
  v37[v39 + 8] = *(double *)&v59.i64[1];
  v37[8 * v38 + 8] = *(double *)v61.i64;
  v37[v40 + 8] = *(double *)&v62.i64[1];
  v37[10 * v38 + 9] = 1.0 / *(double *)v63.i64;
  v37[11 * v38 + 10] = 1.0 / *(double *)&v63.i64[1];
  v37[12 * v38 + 11] = 1.0 / *(double *)v64.i64;
  v37[13 * v38 + 12] = 1.0 / *(double *)&v64.i64[1];
  v37[14 * v38 + 13] = 1.0 / *(double *)v65.i64;
  v37[15 * v38 + 14] = 1.0 / *(double *)&v65.i64[1];
  v37[(16 * v38) | 0xF] = 1.0 / *(double *)v66.i64;
  v37[17 * v38 + 16] = 1.0 / *(double *)&v66.i64[1];
  v37[18 * v38 + 17] = 1.0 / *(double *)v67.i64;
  sub_18E080F44((uint64_t)v46, (uint64_t)v48, (uint64_t)&v141);
  sub_18E080EBC((uint64_t)v47, (uint64_t)v46, (uint64_t)v51);
  sub_18E080FF0((uint64_t)v46, (uint64_t)v48, (uint64_t)&v136);
  sub_18E081108((uint64_t)v44, (uint64_t)v47, v25);
  sub_18E081194((uint64_t)v43, (uint64_t)v46, v16);
  sub_18E08107C((uint64_t)v45, (uint64_t)v44, (uint64_t)v43);
  sub_18DFE2F24(v24, (uint64_t)v45);
  sub_18DFE2F24(v23, (uint64_t)v47);
  sub_18DFE2F24(v22, (uint64_t)v46);
  return 0;
}

uint64_t sub_18E05D4C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8 = *(_DWORD *)(a1 + 8);
  unsigned int v9 = *(_DWORD *)(a1 + 12);
  if (v8 <= v9) {
    int v10 = *(_DWORD *)(a1 + 12);
  }
  else {
    int v10 = *(_DWORD *)(a1 + 8);
  }
  if (v8) {
    BOOL v11 = v9 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (!v11 && v10 == 2)
  {
    unsigned int v13 = *(_DWORD *)(a2 + 8);
    unsigned int v14 = *(_DWORD *)(a2 + 12);
    if (v13 <= v14) {
      int v15 = *(_DWORD *)(a2 + 12);
    }
    else {
      int v15 = *(_DWORD *)(a2 + 8);
    }
    if (v13) {
      BOOL v16 = v14 == 0;
    }
    else {
      BOOL v16 = 1;
    }
    if (!v16 && v15 == 2)
    {
      uint64_t v25 = 0x200000002;
      uint64_t v23 = &unk_1EDD18BB8;
      uint64_t v26 = &v27;
      long long v24 = xmmword_18E1FD1B0;
      sub_18DFE2CC8((uint64_t)&v23, 0.0);
      int v19 = HIDWORD(v24) + 1;
      double v20 = v26;
      *uint64_t v26 = 0x3FF0000000000000;
      v20[v19] = 0x3FF0000000000000;
      sub_18E07FD00((uint64_t)v28, (uint64_t)&v23);
    }
  }
  LOWORD(v23) = 12;
  LOBYTE(v22) = 4;
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v23, (unsigned __int8 *)&v22, "f_TwoStateOscillator called with inadequate matrices.", a4, a5, a6, a7, a8, v21);
  return 0xFFFFFFFFLL;
}

void sub_18E05D720(_Unwind_Exception *a1)
{
  sub_18E06B5D4((void *)(v1 - 144));
  _Unwind_Resume(a1);
}

uint64_t sub_18E05D738(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8 = *(_DWORD *)(a1 + 8);
  unsigned int v9 = *(_DWORD *)(a1 + 12);
  if (v8 <= v9) {
    int v10 = *(_DWORD *)(a1 + 12);
  }
  else {
    int v10 = *(_DWORD *)(a1 + 8);
  }
  if (v8) {
    BOOL v11 = v9 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (!v11 && v10 == 6)
  {
    unsigned int v13 = *(_DWORD *)(a2 + 8);
    unsigned int v14 = *(_DWORD *)(a2 + 12);
    if (v13 <= v14) {
      int v15 = *(_DWORD *)(a2 + 12);
    }
    else {
      int v15 = *(_DWORD *)(a2 + 8);
    }
    if (v13) {
      BOOL v16 = v14 == 0;
    }
    else {
      BOOL v16 = 1;
    }
    if (!v16 && v15 == 6)
    {
      uint64_t v27 = 0x600000006;
      uint64_t v25 = &unk_1EDD197B8;
      unsigned int v28 = &v29;
      long long v26 = xmmword_18E1F8570;
      sub_18DFE2CC8((uint64_t)&v25, 0.0);
      int v19 = 0;
      int v20 = HIDWORD(v26) + 1;
      uint64_t v21 = 6;
      uint64_t v22 = v28;
      do
      {
        v22[v19] = 0x3FF0000000000000;
        v19 += v20;
        --v21;
      }
      while (v21);
      sub_18E07FD00((uint64_t)v30, (uint64_t)&v25);
    }
  }
  LOWORD(v25) = 12;
  LOBYTE(v24) = 4;
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v25, (unsigned __int8 *)&v24, "f_SixStateNearlyConstantVelocity called with inadequate matrices.", a4, a5, a6, a7, a8, v23);
  return 0xFFFFFFFFLL;
}

void sub_18E05D9D4(_Unwind_Exception *a1)
{
  sub_18E06B5D4((void *)(v1 - 128));
  _Unwind_Resume(a1);
}

uint64_t sub_18E05D9EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8 = *(_DWORD *)(a1 + 8);
  unsigned int v9 = *(_DWORD *)(a1 + 12);
  if (v8 <= v9) {
    int v10 = *(_DWORD *)(a1 + 12);
  }
  else {
    int v10 = *(_DWORD *)(a1 + 8);
  }
  if (v8) {
    BOOL v11 = v9 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  BOOL v12 = !v11 && v10 == 3;
  if (v12
    && ((unsigned int v13 = *(_DWORD *)(a2 + 8), v14 = *(_DWORD *)(a2 + 12), v13 <= v14)
      ? (int v15 = *(_DWORD *)(a2 + 12))
      : (int v15 = *(_DWORD *)(a2 + 8)),
        v13 ? (BOOL v16 = v14 == 0) : (BOOL v16 = 1),
        !v16 ? (BOOL v17 = v15 == 3) : (BOOL v17 = 0),
        v17))
  {
    uint64_t v29 = 0x10000001ALL;
    uint64_t v27 = &unk_1EDD186A8;
    long long v28 = xmmword_18E1FD600;
    double v30 = v31;
    sub_18DFEF1F4(a1, a2, (uint64_t)&v27);
    sub_18DFE2F24(a4, (uint64_t)&v27);
    uint64_t v29 = 0x300000003;
    uint64_t v27 = &unk_1EDD18EE8;
    double v30 = v31;
    long long v28 = xmmword_18E1F0010;
    sub_18DFE2CC8((uint64_t)&v27, 0.0);
    int v22 = HIDWORD(v28) + 1;
    char v23 = v30;
    *double v30 = 0x3FF0000000000000;
    v23[v22] = 0x3FF0000000000000;
    v23[2 * v22] = 0x3FF0000000000000;
    sub_18DFE2F24(a5, (uint64_t)&v27);
    uint64_t v29 = 0x300000003;
    uint64_t v27 = &unk_1EDD18EE8;
    double v30 = v31;
    long long v28 = xmmword_18E1F0010;
    sub_18DFE2CC8((uint64_t)&v27, 0.0);
    int v24 = HIDWORD(v28) + 1;
    uint64_t v25 = v30;
    *double v30 = 0x3FF0000000000000;
    v25[v24] = 0x3FF0000000000000;
    v25[2 * v24] = 0x3FF0000000000000;
    sub_18DFE2F24(a6, (uint64_t)&v27);
    return 0;
  }
  else
  {
    LOWORD(v27) = 12;
    unsigned __int8 v32 = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v27, &v32, "f_ThreeStateNearlyConstant called with inadequate matrices.", a4, a5, a6, a7, a8, v26);
    return 0xFFFFFFFFLL;
  }
}

void *sub_18E05DBC0(void *result)
{
  result[25] = &unk_1EDD174A8;
  *uint64_t result = &unk_1EDD17478;
  return result;
}

uint64_t sub_18E05DC00(uint64_t a1)
{
  double v9 = MEMORY[0x1F4188790](a1);
  unsigned int v11 = *(_DWORD *)(v1 + 8);
  unsigned int v12 = *(_DWORD *)(v1 + 12);
  if (v11 <= v12) {
    int v13 = *(_DWORD *)(v1 + 12);
  }
  else {
    int v13 = *(_DWORD *)(v1 + 8);
  }
  if (v11) {
    BOOL v14 = v12 == 0;
  }
  else {
    BOOL v14 = 1;
  }
  if (!v14 && v13 == 18)
  {
    unsigned int v16 = *(_DWORD *)(v2 + 8);
    unsigned int v17 = *(_DWORD *)(v2 + 12);
    if (v16 <= v17) {
      int v18 = *(_DWORD *)(v2 + 12);
    }
    else {
      int v18 = *(_DWORD *)(v2 + 8);
    }
    if (v16) {
      BOOL v19 = v17 == 0;
    }
    else {
      BOOL v19 = 1;
    }
    if (!v19 && v18 == 18)
    {
      double v21 = v9;
      long long v42 = *(_OWORD *)v3->i64[1];
      int8x16_t v41 = v3[2];
      *(double *)v22.i64 = (double)CNTimeSpan::operator-((uint64_t)&v41, &v42, v41, v10);
      *(double *)v24.i64 = (v23 + *(double *)v22.i64) * v21;
      v29[0] = 0;
      v29[1] = 0;
      CNTimeSpan::SetTimeSpan(v29, 0, v24, v22);
      CNTimeSpan::operator+((uint64_t)&v42, v29, v25, v26);
      uint64_t v38 = 0x10000000FLL;
      int v36 = &unk_1EDD178C8;
      int v39 = &v40;
      long long v37 = xmmword_18E1FD830;
      sub_18DFE2CC8((uint64_t)&v36, 0.0);
      uint64_t v33 = 0x10000001ALL;
      double v31 = &unk_1EDD186A8;
      long long v32 = xmmword_18E1FD8A0;
      uint64_t v34 = &v35;
      sub_18E081C0C((uint64_t)v30, 18, 18);
    }
  }
  LOWORD(v29[0]) = 12;
  v43[0] = 4;
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)v29, v43, "in_SixDOFError called with inadequate matrices.", v4, v5, v6, v7, v8, v28);
  return 0xFFFFFFFFLL;
}

void sub_18E05E774(_Unwind_Exception *a1)
{
}

uint64_t sub_18E05E7A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8 = *(_DWORD *)(a1 + 8);
  unsigned int v9 = *(_DWORD *)(a1 + 12);
  if (v8 <= v9) {
    int v10 = *(_DWORD *)(a1 + 12);
  }
  else {
    int v10 = *(_DWORD *)(a1 + 8);
  }
  if (v8) {
    BOOL v11 = v9 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (!v11 && v10 == 2)
  {
    unsigned int v13 = *(_DWORD *)(a2 + 8);
    unsigned int v14 = *(_DWORD *)(a2 + 12);
    if (v13 <= v14) {
      int v15 = *(_DWORD *)(a2 + 12);
    }
    else {
      int v15 = *(_DWORD *)(a2 + 8);
    }
    if (v13) {
      BOOL v16 = v14 == 0;
    }
    else {
      BOOL v16 = 1;
    }
    if (!v16 && v15 == 2)
    {
      uint64_t v29 = 0x100000002;
      uint64_t v27 = &unk_1EDD18B28;
      double v30 = &v31;
      long long v28 = xmmword_18E1FD1A0;
      sub_18DFE2CC8((uint64_t)&v27, 0.0);
      uint64_t v24 = 0x10000001ALL;
      int8x16_t v22 = &unk_1EDD186A8;
      long long v23 = xmmword_18E1FD1A0;
      int8x16_t v25 = &v26;
      sub_18E081C0C((uint64_t)v21, 2, 2);
    }
  }
  LOWORD(v20) = 12;
  v32[0] = 4;
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v20, v32, "in_TwoStateOscillator called with inadequate matrices.", a4, a5, a6, a7, a8, v19);
  return 0xFFFFFFFFLL;
}

void sub_18E05EBB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  sub_18E06B5D4((void *)(v71 - 144));
  sub_18E06B5D4(&a71);
  _Unwind_Resume(a1);
}

uint64_t sub_18E05EBD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8 = *(_DWORD *)(a1 + 8);
  unsigned int v9 = *(_DWORD *)(a1 + 12);
  if (v8 <= v9) {
    int v10 = *(_DWORD *)(a1 + 12);
  }
  else {
    int v10 = *(_DWORD *)(a1 + 8);
  }
  if (v8) {
    BOOL v11 = v9 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (!v11 && v10 == 6)
  {
    unsigned int v13 = *(_DWORD *)(a2 + 8);
    unsigned int v14 = *(_DWORD *)(a2 + 12);
    if (v13 <= v14) {
      int v15 = *(_DWORD *)(a2 + 12);
    }
    else {
      int v15 = *(_DWORD *)(a2 + 8);
    }
    if (v13) {
      BOOL v16 = v14 == 0;
    }
    else {
      BOOL v16 = 1;
    }
    if (!v16 && v15 == 6)
    {
      uint64_t v30 = 0x100000006;
      long long v28 = &unk_1EDD19728;
      uint64_t v31 = &v32;
      long long v29 = xmmword_18E1FD770;
      sub_18DFE2CC8((uint64_t)&v28, 0.0);
      uint64_t v25 = 0x10000001ALL;
      long long v23 = &unk_1EDD186A8;
      long long v24 = xmmword_18E1FD770;
      uint64_t v26 = &v27;
      sub_18E081C0C((uint64_t)v22, 6, 6);
    }
  }
  LOWORD(v21[0]) = 12;
  LOBYTE(v20) = 4;
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)v21, (unsigned __int8 *)&v20, "in_SixStateNearlyConstantVelocity called with inadequate matrices.", a4, a5, a6, a7, a8, v19);
  return 0xFFFFFFFFLL;
}

void sub_18E05EE18(_Unwind_Exception *a1)
{
}

uint64_t sub_18E05EE2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8 = *(_DWORD *)(a1 + 8);
  unsigned int v9 = *(_DWORD *)(a1 + 12);
  if (v8 <= v9) {
    int v10 = *(_DWORD *)(a1 + 12);
  }
  else {
    int v10 = *(_DWORD *)(a1 + 8);
  }
  if (v8) {
    BOOL v11 = v9 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (!v11 && v10 == 3)
  {
    unsigned int v13 = *(_DWORD *)(a2 + 8);
    unsigned int v14 = *(_DWORD *)(a2 + 12);
    if (v13 <= v14) {
      int v15 = *(_DWORD *)(a2 + 12);
    }
    else {
      int v15 = *(_DWORD *)(a2 + 8);
    }
    if (v13) {
      BOOL v16 = v14 == 0;
    }
    else {
      BOOL v16 = 1;
    }
    if (!v16 && v15 == 3)
    {
      uint64_t v29 = 0x100000003;
      uint64_t v27 = &unk_1EDD18D98;
      uint64_t v30 = &v31;
      long long v28 = xmmword_18E1F6F60;
      sub_18DFE2CC8((uint64_t)&v27, 0.0);
      uint64_t v24 = 0x10000001ALL;
      int8x16_t v22 = &unk_1EDD186A8;
      long long v23 = xmmword_18E1F6F60;
      uint64_t v25 = &v26;
      sub_18E081C0C((uint64_t)v21, 3, 3);
    }
  }
  LOWORD(v20) = 12;
  v32[0] = 4;
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v20, v32, "in_ThreeStateNearlyConstant called with inadequate matrices.", a4, a5, a6, a7, a8, v19);
  return 0xFFFFFFFFLL;
}

void sub_18E05F1C4(_Unwind_Exception *a1)
{
}

void sub_18E05F1D8(uint64_t a1@<X8>)
{
}

void sub_18E05F224()
{
  uint64_t v3 = 0x10000001ALL;
  uint64_t v1 = &unk_1EDD186A8;
  long long v2 = xmmword_18E1FD600;
  uint64_t v4 = &v5;
  sub_18E06E85C((uint64_t)v0);
}

void sub_18E05F66C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57)
{
}

void sub_18E05F6CC(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a1[277])
  {
    sub_18DFE2F24((uint64_t)(a1 + 138), (uint64_t)(a1 + 2));
    sub_18DFE2F24((uint64_t)(a1 + 200), (uint64_t)(a1 + 64));
    sub_18DFE2F24((uint64_t)(a1 + 212), (uint64_t)(a1 + 76));
  }
  uint64_t v8 = *(unsigned int *)(a2 + 8);
  if ((v8 & 0x80000000) == 0)
  {
    unsigned int v9 = a1[140];
    unsigned int v10 = a1[141];
    if (v9 <= v10) {
      unsigned int v11 = a1[141];
    }
    else {
      unsigned int v11 = a1[140];
    }
    if (v10) {
      BOOL v12 = v9 == 0;
    }
    else {
      BOOL v12 = 1;
    }
    if (v12) {
      uint64_t v13 = 0;
    }
    else {
      uint64_t v13 = v11;
    }
    uint64_t v25 = 0x100000017;
    uint64_t v20 = &unk_1EDD18528;
    uint64_t v26 = &v27;
    int v21 = v8;
    int v22 = 1;
    int v23 = v8;
    int v24 = v8;
    sub_18DFE2CC8((uint64_t)&v20, 0.0);
    unsigned int v14 = *(_DWORD *)(a4 + 8);
    unsigned int v15 = *(_DWORD *)(a4 + 12);
    if (v14 <= v15) {
      int v16 = *(_DWORD *)(a4 + 12);
    }
    else {
      int v16 = *(_DWORD *)(a4 + 8);
    }
    if (v15) {
      BOOL v17 = v14 == 0;
    }
    else {
      BOOL v17 = 1;
    }
    if (v17) {
      int v18 = 0;
    }
    else {
      int v18 = v16;
    }
    LODWORD(v19) = v18;
    sub_18E08DA50((uint64_t)a1, v13, (uint64_t)(a1 + 138), (uint64_t)(a1 + 200), (uint64_t)(a1 + 212), v8, (uint64_t)&v20, a2, v19, a3);
  }
  __assert_rtn("Zeros", "cnmatrix.h", 3098, "nr >= 0");
}

uint64_t sub_18E05F838(uint64_t a1, double *a2)
{
  double v2 = *a2;
  if (*a2 < 0.0) {
    return 0xFFFFFFFFLL;
  }
  if (fabs(v2) < 2.22044605e-16) {
    return 0;
  }
  double v5 = *(double *)(a1 + 40);
  double v6 = v2 / *(double *)(a1 + 48);
  double v7 = *(double *)(a1 + 32);
  double v8 = 1.0 - v5;
  double v9 = 1.0 - v7;
  double v10 = sqrt((v7 * v5 - (1.0 - v5) * (1.0 - v7)) * -4.0 + (v7 + v5) * (v7 + v5));
  double v11 = (v7 + v5 + v10) * 0.5;
  double v12 = (v7 + v5 - v10) * 0.5;
  double v13 = v7 + 1.0 - v5;
  double v14 = 1.0 - v7 + v5;
  double v15 = (1.0 - v7) / (v11 - v5);
  double v16 = (v11 - v5) / (1.0 - v7);
  if (1.0 - v7 <= vabdd_f64(v11, v5)) {
    double v16 = 1.0;
  }
  else {
    double v15 = 1.0;
  }
  double v17 = v12 - v5;
  BOOL v25 = v9 <= vabdd_f64(v12, v5);
  double v18 = v9 / (v12 - v5);
  double v19 = v17 / v9;
  if (v25) {
    double v19 = 1.0;
  }
  else {
    double v18 = 1.0;
  }
  double v20 = v8 / (v11 - v7);
  double v21 = (v11 - v7) / v8;
  if (v8 > vabdd_f64(v11, v7)) {
    double v20 = 1.0;
  }
  else {
    double v21 = 1.0;
  }
  double v22 = v12 - v7;
  BOOL v25 = v8 <= vabdd_f64(v12, v7);
  double v23 = v8 / (v12 - v7);
  double v24 = v22 / v8;
  if (v25) {
    double v24 = 1.0;
  }
  else {
    double v23 = 1.0;
  }
  BOOL v25 = v13 <= v14;
  if (v13 > v14) {
    double v26 = v21;
  }
  else {
    double v26 = v15;
  }
  if (v13 > v14) {
    double v27 = v20;
  }
  else {
    double v27 = v16;
  }
  if (v25) {
    double v23 = v19;
  }
  else {
    double v18 = v24;
  }
  double v28 = sqrt(v26 * v26 + v27 * v27);
  double v29 = v27 / v28;
  double v30 = v26 / v28;
  double v31 = sqrt(v18 * v18 + v23 * v23);
  double v32 = v23 / v31;
  double v33 = v18 / v31;
  double v34 = v27 / v28 * (v18 / v31) - v30 * (v23 / v31);
  double v35 = pow(v11, v6);
  long double v36 = pow(v12, v6) * v32;
  double v37 = (v29 * v36 + -(v35 * v29) * v32) / v34;
  double v38 = (v35 * v29 * v33 - v36 * v30) / v34;
  if (!*(_DWORD *)(a1 + 24)) {
    *(void *)(a1 + 16) = *(void *)(a1 + 8);
  }
  return sub_18E0915BC(a1 + 8, (double *)(a1 + 16), &v38, &v37);
}

uint64_t sub_18E05FA18(uint64_t a1, unsigned int a2, unsigned int a3)
{
  if (!a2) {
    return 0;
  }
  if (a2 / a3 <= 1) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = a2 / a3;
  }
  if (sub_18E0917E0(a1)) {
    return 0xFFFFFFFFLL;
  }
  int v6 = 1;
  do
  {
    unsigned int v7 = v6;
    if (v4 == v6) {
      break;
    }
    int v8 = sub_18E0917E0(a1);
    int v6 = v7 + 1;
  }
  while (!v8);
  if (v7 >= v4) {
    return 0;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t sub_18E05FA94(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(unsigned char *)(a1 + 1))
  {
    if (*(_DWORD *)(a1 + 11904))
    {
      uint64_t v9 = a1 + 8808;
      sub_18E06B120((uint64_t)v11);
      uint64_t v15 = 0x100000057;
      double v13 = &unk_1EDD19A28;
      long long v14 = xmmword_18E1FD660;
      double v16 = &v17;
      sub_18E09183C(v9, (uint64_t)v11, (uint64_t)&v13);
      uint64_t result = 0;
      *a2 = *v12;
      return result;
    }
  }
  else
  {
    LOBYTE(v13) = 2;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v11, (unsigned __int8 *)&v13, "WARNING: MeasurementAccumulator.LatestLockedMeasurementTime() called on unlocked accumulator.", a4, a5, a6, a7, a8, 2);
  }
  return 0xFFFFFFFFLL;
}

double sub_18E05FB70(uint64_t a1)
{
  double result = MEMORY[0x1F4188790](a1);
  if (*(unsigned char *)v1)
  {
    unsigned int v4 = (__n128 *)v2;
    uint64_t v5 = v1;
    if (*(unsigned char *)(v1 + 1)) {
      *(unsigned char *)(v1 + 1) = 0;
    }
    if (*(_DWORD *)(v1 + 5936))
    {
      if (!sub_18DEE8C5C(v2, (double *)(v1 + 8)))
      {
        unint64_t v6 = *(unsigned int *)(v5 + 5936);
        sub_18E091E10((uint64_t)v28, *(_DWORD *)(v5 + 5936), 1);
        unsigned int v7 = 0;
        if ((int)v6 >= 1)
        {
          int v8 = *(void **)(v5 + 48);
          if (v8 != (void *)(v5 + 40))
          {
            uint64_t v9 = 0;
            unsigned int v7 = 0;
            unint64_t v10 = 1;
            do
            {
              if (sub_18DEE4C00((double *)(*(void *)(v5 + 96) + v9), v4->n128_f64))
              {
                *(_DWORD *)(v30 + 4 * (int)v7) = v10 - 1;
                int v8 = (void *)v8[1];
                ++v7;
              }
              else
              {
                double v11 = (void *)*v8;
                double v12 = (void *)v8[1];
                v11[1] = v12;
                *(void *)v8[1] = v11;
                --*(void *)(v5 + 56);
                sub_18E067C60((uint64_t (**)(void, void, void, void, void))v8 + 2);
                operator delete(v8);
                int v8 = v12;
              }
              if (v10 >= v6) {
                break;
              }
              ++v10;
              v9 += 16;
            }
            while (v8 != (void *)(v5 + 40));
          }
        }
        int32x4_t v13 = vdupq_lane_s32((int32x2_t)(v7 | 0x100000000), 0);
        v13.i32[1] = 1;
        int32x4_t v29 = v13;
        if (v7 <= 1) {
          int v14 = 1;
        }
        else {
          int v14 = v7;
        }
        if (!v7) {
          int v14 = 0;
        }
        *(_DWORD *)(v5 + 5936) = v14;
        sub_18E091ED4((uint64_t)&v27, v5 + 64, (uint64_t)v28);
        sub_18E092018(v5 + 64, (uint64_t)&v27);
        sub_18E0920A8((uint64_t)&v27, v5 + 2888, (uint64_t)v28);
        sub_18DFEEA3C(v5 + 2888, (uint64_t)&v27);
        sub_18E0921D4((uint64_t)&v27, v5 + 3624, (uint64_t)v28);
        sub_18DFE2F24(v5 + 3624, (uint64_t)&v27);
        sub_18E09230C((uint64_t)&v27);
      }
    }
    else
    {
      __n128 v27 = *(__n128 *)(v1 + 8);
      sub_18E059748(v1);
      sub_18E059804(v5, v4, v15, v16, v17, v18, v19, v20);
      *(unsigned char *)uint64_t v5 = 0;
      *(void *)&double result = sub_18E059804(v5, &v27, v21, v22, v23, v24, v25, v26).n128_u64[0];
    }
  }
  return result;
}

void *sub_18E060048(void *result)
{
  *double result = &unk_1EDD17418;
  return result;
}

void *sub_18E060068(void *result)
{
  *double result = &unk_1EDD172F8;
  return result;
}

void *sub_18E060088(void *result)
{
  *double result = &unk_1EDD17298;
  return result;
}

void *sub_18E0600A8(void *result)
{
  *double result = &unk_1EDD174A8;
  return result;
}

void *sub_18E0600CC(void *result)
{
  *double result = &unk_1EDD174A8;
  return result;
}

void *sub_18E0600EC(void *result)
{
  *double result = &unk_1EDD174A8;
  return result;
}

double sub_18E06010C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(a3 + 8);
  int v4 = *(_DWORD *)(a3 + 12);
  uint64_t v5 = (v4 * v3);
  *(void *)&double result = 0x100000003;
  *(void *)(a1 + 24) = 0x100000003;
  *(void *)a1 = &unk_1EDD18D98;
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 20) = v3;
  unsigned int v7 = (double *)(a1 + 40);
  *(void *)(a1 + 32) = a1 + 40;
  if (v5)
  {
    int v8 = *(int **)(a3 + 32);
    uint64_t v9 = *(void *)(a2 + 32);
    do
    {
      uint64_t v10 = *v8++;
      double result = *(double *)(v9 + 8 * v10);
      *v7++ = result;
      --v5;
    }
    while (v5);
  }
  return result;
}

double sub_18E060170(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(a3 + 8);
  int v4 = *(_DWORD *)(a3 + 12);
  uint64_t v5 = (v4 * v3);
  *(void *)&double result = 0x100000003;
  *(void *)(a1 + 24) = 0x100000003;
  *(void *)a1 = &unk_1EDD18D98;
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 20) = v3;
  unsigned int v7 = (double *)(a1 + 40);
  *(void *)(a1 + 32) = a1 + 40;
  if (v5)
  {
    int v8 = *(int **)(a3 + 32);
    do
    {
      uint64_t v9 = *v8++;
      double result = *(double *)(a2 + 8 * v9);
      *v7++ = result;
      --v5;
    }
    while (v5);
  }
  return result;
}

double sub_18E0601D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 16);
  if (v2 != *(_DWORD *)(a2 + 16)) {
    __assert_rtn("operator=", "cnsubvector.h", 347, "this->num_elements_ == A.num_elements_");
  }
  if ((int)v2 >= 1)
  {
    int v3 = *(double **)(a2 + 32);
    int v4 = *(int **)(a1 + 104);
    uint64_t v5 = *(void *)(*(void *)(a1 + 64) + 32);
    unint64_t v6 = *(double **)(a1 + 32);
    do
    {
      double v7 = *v3++;
      double result = v7;
      uint64_t v9 = *v4++;
      *(double *)(v5 + 8 * v9) = result;
      *v6++ = result;
      --v2;
    }
    while (v2);
  }
  return result;
}

void *sub_18E060248(void *result)
{
  result[9] = &unk_1EDD174A8;
  *double result = &unk_1EDD17478;
  return result;
}

double sub_18E060288(uint64_t a1, uint64_t a2, float64x2_t a3)
{
  *(void *)(a1 + 24) = 0x300000003;
  *(void *)a1 = &unk_1EDD18EE8;
  *(_OWORD *)(a1 + 8) = xmmword_18E1F0010;
  *(void *)(a1 + 32) = a1 + 40;
  *(void *)&double result = *(_OWORD *)&sub_18E06E238(a2, a1, a3);
  return result;
}

uint64_t sub_18E0602D0(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v8 = 0x100000001;
  unint64_t v6 = &unk_1EDD18078;
  *(void *)&long long v4 = 0x100000001;
  *((void *)&v4 + 1) = 0x100000001;
  long long v7 = v4;
  uint64_t v9 = &v10;
  int v10 = a4;
  return sub_18DFEEB44(a1, a2, a3, (uint64_t)&v6);
}

uint64_t sub_18E060330@<X0>(unsigned int a1@<W0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  if ((a1 & 0x80000000) != 0) {
    __assert_rtn("Eye", "cnmatrix.h", 2135, "nr >= 0");
  }
  if ((a2 & 0x80000000) != 0) {
    __assert_rtn("Eye", "cnmatrix.h", 2136, "nc >= 0");
  }
  *(void *)(a3 + 24) = 0x300000003;
  *(void *)a3 = &unk_1EDD18EE8;
  *(void *)(a3 + 32) = a3 + 40;
  *(_DWORD *)(a3 + 8) = a1;
  *(_DWORD *)(a3 + 12) = a2;
  *(_DWORD *)(a3 + 16) = a2 * a1;
  *(_DWORD *)(a3 + 20) = a1;
  uint64_t result = sub_18DFE2CC8(a3, 0.0);
  if (a1 >= a2) {
    uint64_t v7 = a2;
  }
  else {
    uint64_t v7 = a1;
  }
  if (v7)
  {
    int v8 = 0;
    int v9 = *(_DWORD *)(a3 + 20) + 1;
    uint64_t v10 = *(void *)(a3 + 32);
    do
    {
      *(void *)(v10 + 8 * v8) = 0x3FF0000000000000;
      v8 += v9;
      --v7;
    }
    while (v7);
  }
  return result;
}

double sub_18E06041C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 24) = 0x300000003;
  *(void *)a2 = &unk_1EDD18EE8;
  *(_OWORD *)(a2 + 8) = xmmword_18E1F0010;
  *(void *)(a2 + 32) = a2 + 40;
  *(void *)&double result = *(_OWORD *)&sub_18DFEF380(a1, a2);
  return result;
}

void sub_18E06045C(uint64_t a1)
{
}

void sub_18E06056C(_Unwind_Exception *a1)
{
  sub_18E06B5D4(v1);
  _Unwind_Resume(a1);
}

void sub_18E060580(uint64_t a1)
{
}

void sub_18E0605C4(_Unwind_Exception *a1)
{
  sub_18E06B5D4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_18E0605D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned int *)(a2 + 12);
  sub_18E07E6AC(v8, *(_DWORD *)(a2 + 12));
  if ((int)v4 >= 1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = v8[4];
    do
    {
      *(_DWORD *)(v6 + 4 * v5) = v5;
      ++v5;
    }
    while (v4 != v5);
  }
  return sub_18E0719CC(a1, a2, (uint64_t)&unk_1EB403DB0, (uint64_t)v8);
}

uint64_t sub_18E060654(uint64_t result, uint64_t a2)
{
  int v2 = *(_DWORD *)(result + 8);
  if (v2 != *(_DWORD *)(a2 + 8)) {
    __assert_rtn("operator=", "cnsubmatrix.h", 376, "this->num_rows_ == A.num_rows_");
  }
  uint64_t v3 = *(unsigned int *)(result + 12);
  if (v3 != *(_DWORD *)(a2 + 12)) {
    __assert_rtn("operator=", "cnsubmatrix.h", 377, "this->num_cols_ == A.num_cols_");
  }
  if (v3)
  {
    unsigned int v4 = 0;
    uint64_t v5 = 0;
    uint64_t v6 = *(void *)(a2 + 32);
    do
    {
      if (v2)
      {
        uint64_t v7 = *(void *)(result + 664);
        int v8 = *(int **)(result + 704);
        int v9 = *(_DWORD *)(v7 + 20) * *(_DWORD *)(*(void *)(result + 760) + 4 * v5);
        uint64_t v10 = *(void *)(v7 + 32);
        uint64_t v11 = *(void *)(result + 32);
        int v12 = *(_DWORD *)(result + 20) * v5;
        unsigned int v13 = v4;
        int v14 = v2;
        do
        {
          uint64_t v15 = *(void *)(v6 + 8 * v13);
          int v16 = *v8++;
          *(void *)(v10 + 8 * (v16 + v9)) = v15;
          *(void *)(v11 + 8 * v12++) = v15;
          ++v13;
          --v14;
        }
        while (v14);
      }
      ++v5;
      v4 += v2;
    }
    while (v5 != v3);
  }
  return result;
}

void *sub_18E060740(void *result)
{
  result[91] = &unk_1EDD174A8;
  result[84] = &unk_1EDD174A8;
  *double result = &unk_1EDD17478;
  return result;
}

void *sub_18E0607A0(void *result)
{
  *double result = &unk_1EDD17478;
  return result;
}

uint64_t sub_18E0607C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a2 + 12);
  uint64_t v21 = 0x10000001CLL;
  uint64_t v22 = 0;
  int32x4_t v20 = 0uLL;
  uint64_t v19 = &unk_1EDD188E8;
  if ((v2 & 0x80000000) != 0) {
    __assert_rtn("CNMatrix", "cnmatrix.h", 419, "nr >= 0");
  }
  int32x4_t v5 = vdupq_lane_s32((int32x2_t)(v2 | 0x100000000), 0);
  v5.i32[1] = 1;
  int32x4_t v20 = v5;
  uint64_t v22 = v23;
  if (v2)
  {
    for (uint64_t i = 0; i != v2; ++i)
      v23[i] = i;
  }
  *(void *)(a1 + 24) = 0x1C00000003;
  *(_OWORD *)(a1 + 8) = xmmword_18E1FD810;
  *(void *)(a1 + 32) = a1 + 40;
  *(void *)a1 = &unk_1EDD16638;
  *(void *)(a1 + 712) = a2;
  *(void *)(a1 + 744) = 0x100000003;
  *(void *)(a1 + 720) = &unk_1EDD18DC8;
  *(_OWORD *)(a1 + 728) = xmmword_18E1F6F60;
  *(void *)(a1 + 752) = a1 + 760;
  *(void *)(a1 + 800) = 0x10000001CLL;
  *(void *)(a1 + 776) = &unk_1EDD188E8;
  *(_OWORD *)(a1 + 784) = xmmword_18E1FD5F0;
  *(void *)(a1 + 808) = a1 + 816;
  sub_18DFEEA3C(a1 + 720, (uint64_t)&unk_1EB403DB0);
  uint64_t result = sub_18DFEEA3C(a1 + 776, (uint64_t)&v19);
  uint64_t v8 = *(unsigned int *)(a1 + 736);
  uint64_t v9 = *(unsigned int *)(a1 + 792);
  *(_DWORD *)(a1 + 8) = v8;
  *(_DWORD *)(a1 + 12) = v9;
  *(_DWORD *)(a1 + 16) = v9 * v8;
  *(_DWORD *)(a1 + 20) = v8;
  if (v9)
  {
    unsigned int v10 = 0;
    uint64_t v11 = 0;
    int v12 = *(_DWORD *)(a2 + 20);
    uint64_t v13 = *(void *)(a2 + 32);
    do
    {
      if (v8)
      {
        int v14 = *(int **)(a1 + 752);
        int v15 = *(_DWORD *)(*(void *)(a1 + 808) + 4 * v11) * v12;
        uint64_t v16 = *(void *)(a1 + 32);
        unsigned int v17 = v10;
        uint64_t result = v8;
        do
        {
          int v18 = *v14++;
          *(void *)(v16 + 8 * v17++) = *(void *)(v13 + 8 * (v18 + v15));
          --result;
        }
        while (result);
      }
      ++v11;
      v10 += v8;
    }
    while (v11 != v9);
  }
  return result;
}

void *sub_18E0609CC(void *result)
{
  result[97] = &unk_1EDD174A8;
  result[90] = &unk_1EDD174A8;
  *uint64_t result = &unk_1EDD17478;
  return result;
}

void *sub_18E060A2C(void *result)
{
  *uint64_t result = &unk_1EDD17478;
  return result;
}

uint64_t sub_18E060A4C(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 8);
  uint64_t v23 = 0x10000001CLL;
  int v18 = &unk_1EDD188E8;
  int v19 = v4;
  int v20 = 1;
  int v21 = v4;
  int v22 = v4;
  uint64_t v24 = v25;
  if (v4)
  {
    for (int i = 0; i != v4; ++i)
      v25[i] = i;
  }
  *(void *)(a1 + 24) = 0x30000001CLL;
  *(_OWORD *)(a1 + 8) = xmmword_18E1FD820;
  *(void *)(a1 + 32) = a1 + 40;
  *(void *)a1 = &unk_1EDD16518;
  *(void *)(a1 + 712) = a2;
  *(void *)(a1 + 744) = 0x10000001CLL;
  *(void *)(a1 + 720) = &unk_1EDD188E8;
  *(_OWORD *)(a1 + 728) = xmmword_18E1FD5F0;
  *(void *)(a1 + 752) = a1 + 760;
  *(void *)(a1 + 896) = 0x100000003;
  *(void *)(a1 + 872) = &unk_1EDD18DC8;
  *(_OWORD *)(a1 + 880) = xmmword_18E1F6F60;
  *(void *)(a1 + 904) = a1 + 912;
  sub_18DFEEA3C(a1 + 720, (uint64_t)&v18);
  uint64_t result = sub_18DFEEA3C(a1 + 872, (uint64_t)&unk_1EB403DB0);
  uint64_t v7 = *(unsigned int *)(a1 + 736);
  uint64_t v8 = *(unsigned int *)(a1 + 888);
  *(_DWORD *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 12) = v8;
  *(_DWORD *)(a1 + 16) = v8 * v7;
  *(_DWORD *)(a1 + 20) = v7;
  if (v8)
  {
    unsigned int v9 = 0;
    uint64_t v10 = 0;
    int v11 = *(_DWORD *)(a2 + 20);
    uint64_t v12 = *(void *)(a2 + 32);
    do
    {
      if (v7)
      {
        uint64_t v13 = *(int **)(a1 + 752);
        int v14 = *(_DWORD *)(*(void *)(a1 + 904) + 4 * v10) * v11;
        uint64_t v15 = *(void *)(a1 + 32);
        unsigned int v16 = v9;
        uint64_t result = v7;
        do
        {
          int v17 = *v13++;
          *(void *)(v15 + 8 * v16++) = *(void *)(v12 + 8 * (v17 + v14));
          --result;
        }
        while (result);
      }
      ++v10;
      v9 += v7;
    }
    while (v10 != v8);
  }
  return result;
}

void *sub_18E060C20(void *result)
{
  result[109] = &unk_1EDD174A8;
  result[90] = &unk_1EDD174A8;
  *uint64_t result = &unk_1EDD17478;
  return result;
}

void *sub_18E060C80(void *result)
{
  *uint64_t result = &unk_1EDD17478;
  return result;
}

void sub_18E060CA4(uint64_t a1)
{
  sub_18E06955C(a1);

  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E060CDC(uint64_t a1)
{
  *(void *)a1 = &unk_1EDD14C50;
  uint64_t v3 = (void **)(a1 + 5920);
  sub_18E068688(&v3);
  *(void *)a1 = &unk_1EDD0B1B0;
  *(void *)(a1 + 3600) = &unk_1EDD17478;
  *(void *)(a1 + 672) = &unk_1EDD17478;
  *(void *)(a1 + 480) = &unk_1EDD17478;
  *(void *)(a1 + 256) = &unk_1EDD17478;
  *(void *)(a1 + 64) = &unk_1EDD17478;
  return MEMORY[0x192FA6240](a1, 0x10A1C40438F3BCFLL);
}

uint64_t sub_18E060E08(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a1 + 8)) {
    return 0xFFFFFFFFLL;
  }
  long long v4 = *(_OWORD *)(a1 + 16);
  long long v5 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 25) = *(_OWORD *)(a1 + 41);
  *(_OWORD *)a2 = v4;
  *(_OWORD *)(a2 + 16) = v5;
  sub_18DFE2F24(a2 + 48, a1 + 64);
  sub_18DFE2F24(a2 + 240, a1 + 256);
  uint64_t result = 0;
  *(unsigned char *)(a2 + 432) = *(unsigned char *)(a1 + 448);
  return result;
}

uint64_t sub_18E060E70(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t sub_18E060E78(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 16) == 4 && *(_DWORD *)(a2 + 20) == 4 && *(unsigned char *)(a2 + 40) == 0) {
    return sub_18E063E3C(a1, (int *)a2);
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t sub_18E060E9C(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  if (!*(unsigned char *)(a1 + 456)) {
    return 0xFFFFFFFFLL;
  }
  *a2 = *(_OWORD *)(a1 + 464);
  sub_18DFE2F24(a3, a1 + 480);
  return 0;
}

uint64_t sub_18E060ED8(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!*(unsigned char *)(a1 + 456) || !*(unsigned char *)(a1 + 448)) {
    return 0xFFFFFFFFLL;
  }
  *a2 = *(_OWORD *)(a1 + 464);
  sub_18DFE2F24(a3, a1 + 480);
  sub_18DFE2F24(a4, a1 + 672);
  sub_18DFE2F24(a5, a1 + 3600);
  return 0;
}

uint64_t sub_18E060F50(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 456);
}

uint64_t sub_18E060F58(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1F4188790](a1);
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v8 = (_DWORD *)v1;
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v1 + 24))(v1)) {
    return 0xFFFFFFFFLL;
  }
  int v9 = v8[5];
  uint64_t v26 = 0x10000000FLL;
  int v21 = &unk_1EDD178C8;
  __n128 v27 = &v28;
  int v22 = v9;
  int v23 = 1;
  int v24 = v9;
  int v25 = v9;
  sub_18DFE2CC8((uint64_t)&v21, 0.0);
  uint64_t v18 = 0x1300000013;
  unsigned int v16 = &unk_1EDD17C88;
  long long v17 = xmmword_18E1FD880;
  int v19 = &v20;
  uint64_t v13 = 0xF00000013;
  int v11 = &unk_1EDD17C28;
  long long v12 = xmmword_18E1FD890;
  int v14 = &v15;
  return (*(uint64_t (**)(_DWORD *, uint64_t, void **, uint64_t, uint64_t, void **, void **))(*(void *)v8 + 96))(v8, v7, &v21, v5, v3, &v16, &v11);
}

uint64_t sub_18E0610F8()
{
  uint64_t v0 = MEMORY[0x1F4188790]();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v9 = v0;
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v0 + 24))(v0)) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v18 = 0x1300000013;
  unsigned int v16 = &unk_1EDD17C88;
  long long v17 = xmmword_18E1FD880;
  int v19 = &v20;
  uint64_t v13 = 0xF00000013;
  int v11 = &unk_1EDD17C28;
  long long v12 = xmmword_18E1FD890;
  int v14 = &v15;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void **, void **))(*(void *)v9 + 96))(v9, v8, v6, v4, v2, &v16, &v11);
}

uint64_t sub_18E06124C(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (!(*(unsigned int (**)(_DWORD *))(*(void *)a1 + 24))(a1)) {
    return 0xFFFFFFFFLL;
  }
  int v12 = a1[5];
  uint64_t v19 = 0x10000000FLL;
  int v14 = &unk_1EDD178C8;
  uint64_t v20 = &v21;
  int v15 = v12;
  int v16 = 1;
  int v17 = v12;
  int v18 = v12;
  sub_18DFE2CC8((uint64_t)&v14, 0.0);
  return (*(uint64_t (**)(_DWORD *, uint64_t, void **, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 96))(a1, a2, &v14, a3, a4, a5, a6);
}

uint64_t sub_18E061358(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1F4188790](a1);
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v10 = v1;
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v1 + 24))(v1)
    || !(*(unsigned int (**)(uint64_t))(*(void *)v10 + 64))(v10))
  {
    return 0xFFFFFFFFLL;
  }
  double v46 = (uint64_t *)(v10 + 5920);
  uint64_t v47 = v7;
  uint64_t v13 = *(void *)(v10 + 5928);
  int v14 = *(void **)(v10 + 5920);
  if ((void *)v13 == v14)
  {
    uint64_t v15 = v5;
    uint64_t v16 = *(unsigned int *)(v10 + 16);
    int v17 = *(_DWORD *)(v10 + 20);
    uint64_t v62 = 0x1300000013;
    int64x2_t v57 = &unk_1EDD17C88;
    int64x2_t v63 = &v64;
    int v58 = v16;
    int v59 = v16;
    int v60 = v16 * v16;
    int v61 = v16;
    sub_18DFE2CC8((uint64_t)&v57, 0.0);
    if ((int)v16 >= 1)
    {
      int v18 = 0;
      int v19 = v61 + 1;
      uint64_t v20 = v63;
      uint64_t v21 = v16;
      do
      {
        v20[v18] = 0x3FF0000000000000;
        v18 += v19;
        --v21;
      }
      while (v21);
    }
    uint64_t v54 = 0xF00000013;
    int v49 = &unk_1EDD17C28;
    int64x2_t v55 = &v56;
    int v50 = v16;
    int v51 = v17;
    int v52 = v17 * v16;
    int v53 = v16;
    sub_18DFE2CC8((uint64_t)&v49, 0.0);
    sub_18E065730(v65, (_OWORD *)(v10 + 464), v10 + 480, (uint64_t)&v57, (uint64_t)&v49);
    unint64_t v22 = *(void *)(v10 + 5928);
    uint64_t v5 = v15;
    if (v22 >= *(void *)(v10 + 5936))
    {
      uint64_t v13 = sub_18E0651BC(v46, v65);
    }
    else
    {
      sub_18E0652E0(*(_OWORD **)(v10 + 5928), v65);
      uint64_t v13 = v22 + 5456;
      *(void *)(v10 + 5928) = v22 + 5456;
    }
    *(void *)(v10 + 5928) = v13;
    int v14 = *(void **)(v10 + 5920);
  }
  if (0xCFF3FCFF3FCFF3FDLL * ((v13 - (uint64_t)v14) >> 4) < 2)
  {
    if (v13 - (void)v14 == 5456)
    {
      uint64_t v41 = CNTimeSpan::operator-((uint64_t)v9, v14, (int8x16_t)v11, v12);
      if (fabs(v42 + (double)v41) < 2.22044605e-16)
      {
        sub_18DFE2F24(v47, (uint64_t)(v14 + 2));
        sub_18DFE2F24(v5, (uint64_t)(v14 + 26));
        uint64_t v40 = v14 + 392;
        goto LABEL_37;
      }
    }
LABEL_38:
    uint64_t result = sub_18E061BB8(v10);
    if (!result)
    {
      sub_18E065890((uint64_t)v48, v47);
      sub_18E065980((uint64_t)&v57, v5);
      sub_18E065A6C((uint64_t)&v49, v3);
      sub_18E0657E0(v65, v9, (uint64_t)v48, (uint64_t)&v57, (uint64_t)&v49);
      unint64_t v44 = *(void *)(v10 + 5928);
      if (v44 >= *(void *)(v10 + 5936))
      {
        uint64_t v45 = sub_18E0651BC(v46, v65);
      }
      else
      {
        sub_18E0652E0(*(_OWORD **)(v10 + 5928), v65);
        uint64_t v45 = v44 + 5456;
        *(void *)(v10 + 5928) = v44 + 5456;
      }
      uint64_t result = 0;
      *(void *)(v10 + 5928) = v45;
    }
    return result;
  }
  if (v14 == (void *)v13) {
    goto LABEL_38;
  }
  int v24 = 0;
  int v25 = 0;
  double v26 = -INFINITY;
  double v27 = INFINITY;
  do
  {
    uint64_t v28 = CNTimeSpan::operator-((uint64_t)v14, v9, (int8x16_t)v11, v12);
    v11.f64[0] = v29 + (double)v28;
    *(double *)v12.i64 = fabs(v11.f64[0]);
    if (*(double *)v12.i64 < 2.22044605e-16)
    {
      sub_18DFE2F24(v47, (uint64_t)(v14 + 2));
      sub_18DFE2F24(v5, (uint64_t)(v14 + 26));
      uint64_t v40 = v14 + 392;
      uint64_t v43 = v3;
      goto LABEL_42;
    }
    if (v11.f64[0] >= 0.0 || v11.f64[0] <= v26)
    {
      if (v11.f64[0] > 0.0 && v11.f64[0] < v27)
      {
        double v27 = v29 + (double)v28;
        int v24 = v14;
      }
    }
    else
    {
      double v26 = v29 + (double)v28;
      int v25 = v14;
    }
    v14 += 682;
  }
  while (v14 != (void *)v13);
  if (!v25 || !v24) {
    goto LABEL_38;
  }
  double v31 = *(double *)(v10 + 5944);
  double v32 = fabs(v27);
  if (fabs(v26) > v31 || v32 > v31) {
    goto LABEL_38;
  }
  v11.f64[0] = 0.0;
  if (v27 / (v27 - v26) >= 0.0) {
    v11.f64[0] = v27 / (v27 - v26);
  }
  double v34 = fmin(v11.f64[0], 1.0);
  v11.f64[0] = v34;
  sub_18E064CEC((uint64_t)(v25 + 2), (uint64_t)&v57, v11);
  v35.f64[0] = 1.0 - v34;
  sub_18E064CEC((uint64_t)(v24 + 2), (uint64_t)&v49, v35);
  sub_18E064A60((uint64_t)&v57, (uint64_t)&v49, (uint64_t)v65);
  __n128 v36 = sub_18DFE2F24(v47, (uint64_t)v65);
  v36.n128_f64[0] = v34;
  sub_18E064D70((uint64_t)(v25 + 26), (uint64_t)&v57, (float64x2_t)v36);
  v37.f64[0] = 1.0 - v34;
  sub_18E064D70((uint64_t)(v24 + 26), (uint64_t)&v49, v37);
  sub_18E064AE4((uint64_t)&v57, (uint64_t)&v49, (uint64_t)v65);
  __n128 v38 = sub_18DFE2F24(v5, (uint64_t)v65);
  v38.n128_f64[0] = v34;
  sub_18E064DF0((uint64_t)(v25 + 392), (uint64_t)&v57, (float64x2_t)v38);
  v39.f64[0] = 1.0 - v34;
  sub_18E064DF0((uint64_t)(v24 + 392), (uint64_t)&v49, v39);
  sub_18E064B64((uint64_t)&v57, (uint64_t)&v49, (uint64_t)v65);
  uint64_t v40 = v65;
LABEL_37:
  uint64_t v43 = v3;
LABEL_42:
  sub_18DFE2F24(v43, (uint64_t)v40);
  return 0;
}

void sub_18E0618C8(_Unwind_Exception *a1)
{
  *(void *)(v2 + 5928) = v1;
  _Unwind_Resume(a1);
}

void sub_18E0618D4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 5928) = v2;
  _Unwind_Resume(a1);
}

double sub_18E0618EC(uint64_t a1)
{
  *(void *)a1 = &unk_1EDD0B1B0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 41) = 0u;
  *(void *)(a1 + 88) = 0x100000013;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 64) = &unk_1EDD17CB8;
  *(void *)(a1 + 96) = a1 + 104;
  *(void *)(a1 + 280) = 0x100000013;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 256) = &unk_1EDD17CB8;
  *(void *)(a1 + 288) = a1 + 296;
  *(unsigned char *)(a1 + 448) = 1;
  *(void *)(a1 + 464) = 0;
  *(void *)(a1 + 472) = 0;
  *(void *)(a1 + 504) = 0x100000013;
  *(void *)(a1 + 480) = &unk_1EDD17CB8;
  *(_OWORD *)(a1 + 488) = xmmword_18E1FD730;
  *(void *)(a1 + 512) = a1 + 520;
  *(void *)(a1 + 696) = 0x1300000013;
  *(void *)(a1 + 672) = &unk_1EDD17C88;
  *(_OWORD *)(a1 + 680) = xmmword_18E1FD880;
  *(void *)(a1 + 704) = a1 + 712;
  *(void *)(a1 + 3624) = 0xF00000013;
  *(void *)(a1 + 3600) = &unk_1EDD17C28;
  *(void *)&double result = 0xF00000013;
  *(_OWORD *)(a1 + 3608) = xmmword_18E1FD890;
  *(void *)(a1 + 3632) = a1 + 3640;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 456) = 0;
  return result;
}

uint64_t sub_18E061A4C(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4 = *(unsigned int *)(a3 + 8);
  int v3 = *(_DWORD *)(a3 + 12);
  if (v4) {
    BOOL v5 = v3 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5 || v3 != 1) {
    return 0xFFFFFFFFLL;
  }
  if (*(unsigned char *)(a1 + 8))
  {
    if (v4 != *(_DWORD *)(a1 + 16)) {
      return 0xFFFFFFFFLL;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 16) = v4;
  }
  *(_OWORD *)(a1 + 464) = *a2;
  sub_18DFE2F24(a1 + 480, a3);
  uint64_t v19 = 0x1300000013;
  int v14 = &unk_1EDD17C88;
  uint64_t v20 = v21;
  int v15 = v4;
  int v16 = v4;
  int v17 = v4 * v4;
  int v18 = v4;
  sub_18DFE2CC8((uint64_t)&v14, 0.0);
  if ((int)v4 >= 1)
  {
    int v9 = 0;
    int v10 = v18 + 1;
    float64x2_t v11 = v20;
    uint64_t v12 = v4;
    do
    {
      *(void *)&v11[8 * v9] = 0x3FF0000000000000;
      v9 += v10;
      --v12;
    }
    while (v12);
  }
  sub_18DFE2F24(a1 + 672, (uint64_t)&v14);
  if (*(unsigned char *)(a1 + 8))
  {
    int v13 = *(_DWORD *)(a1 + 20);
    uint64_t v19 = 0xF00000013;
    int v14 = &unk_1EDD17C28;
    uint64_t v20 = v21;
    int v15 = v4;
    int v16 = v13;
    int v17 = v13 * v4;
    int v18 = v4;
    sub_18DFE2CC8((uint64_t)&v14, 0.0);
    sub_18DFE2F24(a1 + 3600, (uint64_t)&v14);
  }
  uint64_t result = 0;
  *(unsigned char *)(a1 + 456) = 1;
  return result;
}

uint64_t sub_18E061BB8(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1F4188790](a1);
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  uint64_t v13 = v12;
  uint64_t v14 = v1;
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v1 + 24))(v1)
    || !(*(unsigned int (**)(uint64_t))(*(void *)v14 + 64))(v14))
  {
    return 0xFFFFFFFFLL;
  }
  unsigned int v17 = *(_DWORD *)(v14 + 20);
  uint64_t result = 0xFFFFFFFFLL;
  if (*(_DWORD *)(v11 + 8) != v17 || *(_DWORD *)(v11 + 12) != 1) {
    return result;
  }
  uint64_t v19 = v13;
  uint64_t v20 = *(unsigned int *)(v14 + 16);
  float64x2_t v93 = *(unsigned int (**)(long long *, double *, void **, uint64_t, uint64_t, void **, void **, void **))(v14 + 24);
  int v21 = *(unsigned __int8 *)(v14 + 448);
  uint64_t v90 = (_OWORD *)v19;
  uint64_t v92 = (_OWORD *)(v14 + 464);
  uint64_t v22 = CNTimeSpan::operator-(v19, (void *)(v14 + 464), v15, v16);
  double v24 = v23 + (double)v22;
  if (fabs(v24) >= 2.22044605e-16)
  {
    double v29 = 1.0;
    double v30 = 0.0;
    if (v24 < 0.0) {
      double v30 = -1.0;
    }
    if (v24 <= 0.0) {
      double v29 = v30;
    }
    int v31 = vcvtpd_s64_f64(fabs(v24 / *(double *)(v14 + 48)));
    double v331 = v29;
    if (v31 <= 1) {
      int v31 = 1;
    }
    int v91 = v31;
    double v32 = (double)v31;
    uint64_t v89 = v14 + 480;
    sub_18E0767B8((uint64_t)v330, v14 + 480);
    uint64_t v334 = 0x1300000013;
    double v332 = &unk_1EDD17C88;
    if (v21)
    {
      uint64_t v335 = v336;
      LODWORD(v333) = v20;
      DWORD1(v333) = v20;
      DWORD2(v333) = v20 * v20;
      HIDWORD(v333) = v20;
      sub_18DFE2CC8((uint64_t)&v332, 0.0);
      if ((int)v20 >= 1)
      {
        int v33 = 0;
        int v34 = HIDWORD(v333) + 1;
        float64x2_t v35 = v335;
        uint64_t v36 = v20;
        do
        {
          *(void *)&v35[8 * v33] = 0x3FF0000000000000;
          v33 += v34;
          --v36;
        }
        while (v36);
      }
      uint64_t v327 = 0xF00000013;
      uint64_t v325 = &unk_1EDD17C28;
      long long v328 = v329;
      *(void *)&long long v326 = __PAIR64__(v17, v20);
      DWORD2(v326) = v17 * v20;
      HIDWORD(v326) = v20;
      sub_18DFE2CC8((uint64_t)&v325, 0.0);
    }
    else
    {
      long long v333 = xmmword_18E1FD880;
      uint64_t v335 = v336;
      uint64_t v327 = 0xF00000013;
      uint64_t v325 = &unk_1EDD17C28;
      long long v326 = xmmword_18E1FD890;
      long long v328 = v329;
    }
    double v37 = v24 / v32;
    uint64_t v322 = 0x100000013;
    v317 = &unk_1EDD17CB8;
    uint64_t v323 = &v324;
    int v318 = v20;
    int v319 = 1;
    int v320 = v20;
    int v321 = v20;
    sub_18DFE2CC8((uint64_t)&v317, 0.0);
    uint64_t v314 = 0x1300000013;
    v312 = &unk_1EDD17C88;
    if (v21)
    {
      uint64_t v315 = v316;
      LODWORD(v313) = v20;
      DWORD1(v313) = v20;
      DWORD2(v313) = v20 * v20;
      HIDWORD(v313) = v20;
      sub_18DFE2CC8((uint64_t)&v312, 0.0);
      uint64_t v309 = 0xF00000013;
      uint64_t v307 = &unk_1EDD17C28;
      uint64_t v310 = v311;
      *(void *)&long long v308 = __PAIR64__(v17, v20);
      DWORD2(v308) = v17 * v20;
      HIDWORD(v308) = v20;
      sub_18DFE2CC8((uint64_t)&v307, 0.0);
      float64x2_t v39 = &xmmword_18E1FD000;
      uint64_t v40 = &xmmword_18E1FD000;
    }
    else
    {
      uint64_t v40 = &xmmword_18E1FD000;
      long long v313 = xmmword_18E1FD880;
      uint64_t v315 = v316;
      uint64_t v309 = 0xF00000013;
      uint64_t v307 = &unk_1EDD17C28;
      float64x2_t v39 = &xmmword_18E1FD000;
      long long v308 = xmmword_18E1FD890;
      uint64_t v310 = v311;
    }
    int v41 = 0;
    long long v94 = v40[136];
    __n128 v42 = (__n128)v39[137];
    long long v95 = (__int128)v42;
    while (1)
    {
      v42.n128_f64[0] = v37 * (double)v41;
      *(void *)&long long v297 = 0;
      double v296 = 0;
      CNTimeSpan::SetTimeSpan((uint64_t *)&v296, 0, (int8x16_t)v42, v38);
      *(void *)&long long v306 = CNTimeSpan::operator+((uint64_t)v92, &v296, v43, v44);
      *((void *)&v306 + 1) = v45;
      uint64_t v303 = 0x100000013;
      long long v301 = &unk_1EDD17CB8;
      long long v302 = xmmword_18E1FD730;
      uint64_t v304 = &v305;
      sub_18DFEF1F4((uint64_t)v330, (uint64_t)&v317, (uint64_t)&v301);
      uint64_t v298 = 0x1300000013;
      double v296 = &unk_1EDD17C88;
      long long v297 = v94;
      long long v299 = v300;
      if (v21)
      {
        sub_18DFEF1F4((uint64_t)&v332, (uint64_t)&v312, (uint64_t)&v296);
        uint64_t v293 = 0xF00000013;
        uint64_t v291 = &unk_1EDD17C28;
        long long v292 = v95;
        double v294 = v295;
        sub_18DFEF1F4((uint64_t)&v325, (uint64_t)&v307, (uint64_t)&v291);
      }
      else
      {
        uint64_t v293 = 0xF00000013;
        uint64_t v291 = &unk_1EDD17C28;
        long long v292 = v95;
        double v294 = v295;
      }
      long long v290 = v306;
      sub_18E0767B8((uint64_t)v289, (uint64_t)&v301);
      if (v21)
      {
        sub_18E064E74((uint64_t)&v284, (uint64_t)&v296);
        sub_18E064FC0((uint64_t)&v279, (uint64_t)&v291);
        long long v46 = v94;
        long long v47 = v95;
      }
      else
      {
        uint64_t v286 = 0x1300000013;
        double v284 = &unk_1EDD17C88;
        long long v46 = v94;
        long long v47 = v95;
        long long v285 = v94;
        double v287 = &v288;
        uint64_t v281 = 0xF00000013;
        uint64_t v279 = &unk_1EDD17C28;
        long long v280 = v95;
        double v282 = &v283;
      }
      uint64_t v276 = 0x100000013;
      uint64_t v274 = &unk_1EDD17CB8;
      long long v275 = xmmword_18E1FD730;
      int8x16_t v277 = &v278;
      uint64_t v271 = 0x1300000013;
      uint64_t v269 = &unk_1EDD17C88;
      long long v270 = v46;
      uint64_t v272 = &v273;
      uint64_t v266 = 0xF00000013;
      double v264 = &unk_1EDD17C28;
      long long v265 = v47;
      uint64_t v267 = &v268;
      if (v93(&v290, &v331, (void **)v289, v11, v9, &v274, &v269, &v264)) {
        break;
      }
      uint64_t v261 = 0x1300000013;
      uint64_t v259 = &unk_1EDD17C88;
      long long v260 = v94;
      uint64_t v262 = &v263;
      if (v21)
      {
        sub_18DFE2B44((uint64_t)&v269, (uint64_t)&v284, (uint64_t)&v259);
        uint64_t v245 = 0xF00000013;
        long long v243 = &unk_1EDD17C28;
        long long v244 = v95;
        uint64_t v246 = v247;
        sub_18DFE2B44((uint64_t)&v269, (uint64_t)&v279, (uint64_t)&v243);
        uint64_t v256 = 0xF00000013;
        long long v254 = &unk_1EDD17C28;
        long long v255 = v95;
        uint64_t v257 = v258;
        float64x2_t v49 = sub_18DFEF1F4((uint64_t)&v243, (uint64_t)&v264, (uint64_t)&v254);
      }
      else
      {
        uint64_t v256 = 0xF00000013;
        long long v254 = &unk_1EDD17C28;
        v49.f64[1] = *((float64_t *)&v95 + 1);
        long long v255 = v95;
        uint64_t v257 = v258;
      }
      long long v243 = 0;
      *(void *)&long long v244 = 0;
      v49.f64[0] = v37 * 0.5;
      CNTimeSpan::SetTimeSpan((uint64_t *)&v243, 0, (int8x16_t)v49, v48);
      v253[0] = CNTimeSpan::operator+((uint64_t)&v306, &v243, v50, v51);
      v253[1] = v52;
      uint64_t v245 = 0x100000013;
      long long v243 = &unk_1EDD17CB8;
      *(void *)&v53.f64[1] = 0x1300000013;
      long long v244 = xmmword_18E1FD730;
      uint64_t v246 = v247;
      v53.f64[0] = v37 * 0.5;
      sub_18DFE3240((uint64_t)&v274, (uint64_t)&v243, v53);
      uint64_t v250 = 0x100000013;
      long long v248 = &unk_1EDD17CB8;
      long long v249 = xmmword_18E1FD730;
      uint64_t v251 = &v252;
      sub_18DFEF1F4((uint64_t)&v301, (uint64_t)&v243, (uint64_t)&v248);
      if (v21)
      {
        uint64_t v240 = 0x1300000013;
        int64x2_t v238 = &unk_1EDD17C88;
        v54.f64[1] = *((float64_t *)&v94 + 1);
        long long v239 = v94;
        double v241 = v242;
        v54.f64[0] = v37 * 0.5;
        sub_18DFE3240((uint64_t)&v259, (uint64_t)&v238, v54);
        uint64_t v245 = 0x1300000013;
        long long v243 = &unk_1EDD17C88;
        long long v244 = v94;
        uint64_t v246 = v247;
        sub_18DFEF1F4((uint64_t)&v296, (uint64_t)&v238, (uint64_t)&v243);
        uint64_t v240 = 0xF00000013;
        int64x2_t v238 = &unk_1EDD17C28;
        v55.f64[1] = *((float64_t *)&v95 + 1);
        long long v239 = v95;
        double v241 = v242;
        v55.f64[0] = v37 * 0.5;
        sub_18DFE3240((uint64_t)&v254, (uint64_t)&v238, v55);
        uint64_t v235 = 0xF00000013;
        int64x2_t v233 = &unk_1EDD17C28;
        long long v234 = v95;
        int64x2_t v236 = v237;
        sub_18DFEF1F4((uint64_t)&v291, (uint64_t)&v238, (uint64_t)&v233);
        long long v56 = v94;
        long long v57 = v95;
      }
      else
      {
        uint64_t v245 = 0x1300000013;
        long long v243 = &unk_1EDD17C88;
        long long v56 = v94;
        long long v57 = v95;
        long long v244 = v94;
        uint64_t v246 = v247;
        uint64_t v235 = 0xF00000013;
        int64x2_t v233 = &unk_1EDD17C28;
        long long v234 = v95;
        int64x2_t v236 = v237;
      }
      uint64_t v230 = 0x100000013;
      int64x2_t v228 = &unk_1EDD17CB8;
      long long v229 = xmmword_18E1FD730;
      int64x2_t v231 = &v232;
      uint64_t v240 = 0x1300000013;
      int64x2_t v238 = &unk_1EDD17C88;
      long long v239 = v56;
      double v241 = v242;
      uint64_t v225 = 0xF00000013;
      int64x2_t v223 = &unk_1EDD17C28;
      long long v224 = v57;
      int64x2_t v226 = &v227;
      if (v93((long long *)v253, &v331, &v248, v11, v9, &v228, &v238, &v223)) {
        break;
      }
      uint64_t v220 = 0x1300000013;
      int64x2_t v218 = &unk_1EDD17C88;
      long long v219 = v94;
      int64x2_t v221 = &v222;
      if (v21)
      {
        sub_18DFE2B44((uint64_t)&v238, (uint64_t)&v243, (uint64_t)&v218);
        uint64_t v204 = 0xF00000013;
        float64x2_t v202 = &unk_1EDD17C28;
        long long v203 = v95;
        double v205 = v206;
        sub_18DFE2B44((uint64_t)&v238, (uint64_t)&v233, (uint64_t)&v202);
        uint64_t v215 = 0xF00000013;
        int64x2_t v213 = &unk_1EDD17C28;
        long long v214 = v95;
        int64x2_t v216 = v217;
        float64x2_t v59 = sub_18DFEF1F4((uint64_t)&v202, (uint64_t)&v223, (uint64_t)&v213);
      }
      else
      {
        uint64_t v215 = 0xF00000013;
        int64x2_t v213 = &unk_1EDD17C28;
        v59.f64[1] = *((float64_t *)&v95 + 1);
        long long v214 = v95;
        int64x2_t v216 = v217;
      }
      float64x2_t v202 = 0;
      *(void *)&long long v203 = 0;
      v59.f64[0] = v37 * 0.5;
      CNTimeSpan::SetTimeSpan((uint64_t *)&v202, 0, (int8x16_t)v59, v58);
      v212[0] = CNTimeSpan::operator+((uint64_t)&v306, &v202, v60, v61);
      v212[1] = v62;
      uint64_t v204 = 0x100000013;
      float64x2_t v202 = &unk_1EDD17CB8;
      *(void *)&v63.f64[1] = 0x1300000013;
      long long v203 = xmmword_18E1FD730;
      double v205 = v206;
      v63.f64[0] = v37 * 0.5;
      sub_18DFE3240((uint64_t)&v228, (uint64_t)&v202, v63);
      uint64_t v209 = 0x100000013;
      int64x2_t v207 = &unk_1EDD17CB8;
      long long v208 = xmmword_18E1FD730;
      int64x2_t v210 = &v211;
      sub_18DFEF1F4((uint64_t)&v301, (uint64_t)&v202, (uint64_t)&v207);
      if (v21)
      {
        uint64_t v199 = 0x1300000013;
        double v197 = &unk_1EDD17C88;
        v64.f64[1] = *((float64_t *)&v94 + 1);
        long long v198 = v94;
        double v200 = v201;
        v64.f64[0] = v37 * 0.5;
        sub_18DFE3240((uint64_t)&v218, (uint64_t)&v197, v64);
        uint64_t v204 = 0x1300000013;
        float64x2_t v202 = &unk_1EDD17C88;
        long long v203 = v94;
        double v205 = v206;
        sub_18DFEF1F4((uint64_t)&v296, (uint64_t)&v197, (uint64_t)&v202);
        uint64_t v199 = 0xF00000013;
        double v197 = &unk_1EDD17C28;
        v65.f64[1] = *((float64_t *)&v95 + 1);
        long long v198 = v95;
        double v200 = v201;
        v65.f64[0] = v37 * 0.5;
        sub_18DFE3240((uint64_t)&v213, (uint64_t)&v197, v65);
        uint64_t v194 = 0xF00000013;
        uint64_t v192 = &unk_1EDD17C28;
        long long v193 = v95;
        uint64_t v195 = v196;
        sub_18DFEF1F4((uint64_t)&v291, (uint64_t)&v197, (uint64_t)&v192);
        long long v66 = v94;
        long long v67 = v95;
      }
      else
      {
        uint64_t v204 = 0x1300000013;
        float64x2_t v202 = &unk_1EDD17C88;
        long long v66 = v94;
        long long v67 = v95;
        long long v203 = v94;
        double v205 = v206;
        uint64_t v194 = 0xF00000013;
        uint64_t v192 = &unk_1EDD17C28;
        long long v193 = v95;
        uint64_t v195 = v196;
      }
      uint64_t v189 = 0x100000013;
      double v187 = &unk_1EDD17CB8;
      long long v188 = xmmword_18E1FD730;
      uint64_t v190 = &v191;
      uint64_t v199 = 0x1300000013;
      double v197 = &unk_1EDD17C88;
      long long v198 = v66;
      double v200 = v201;
      uint64_t v184 = 0xF00000013;
      uint64_t v182 = &unk_1EDD17C28;
      long long v183 = v67;
      uint64_t v185 = &v186;
      if (v93((long long *)v212, &v331, &v207, v11, v9, &v187, &v197, &v182)) {
        break;
      }
      uint64_t v179 = 0x1300000013;
      uint64_t v177 = &unk_1EDD17C88;
      long long v178 = v94;
      uint64_t v180 = &v181;
      if (v21)
      {
        sub_18DFE2B44((uint64_t)&v197, (uint64_t)&v202, (uint64_t)&v177);
        uint64_t v163 = 0xF00000013;
        long long v161 = &unk_1EDD17C28;
        long long v162 = v95;
        long long v164 = v165;
        sub_18DFE2B44((uint64_t)&v197, (uint64_t)&v192, (uint64_t)&v161);
        uint64_t v174 = 0xF00000013;
        long long v172 = &unk_1EDD17C28;
        long long v173 = v95;
        long long v175 = v176;
        float64x2_t v69 = sub_18DFEF1F4((uint64_t)&v161, (uint64_t)&v182, (uint64_t)&v172);
      }
      else
      {
        uint64_t v174 = 0xF00000013;
        long long v172 = &unk_1EDD17C28;
        v69.f64[1] = *((float64_t *)&v95 + 1);
        long long v173 = v95;
        long long v175 = v176;
      }
      long long v161 = 0;
      *(void *)&long long v162 = 0;
      v69.f64[0] = v37;
      CNTimeSpan::SetTimeSpan((uint64_t *)&v161, 0, (int8x16_t)v69, v68);
      v171[0] = CNTimeSpan::operator+((uint64_t)&v306, &v161, v70, v71);
      v171[1] = v72;
      uint64_t v163 = 0x100000013;
      long long v161 = &unk_1EDD17CB8;
      *(void *)&v73.f64[1] = 0x1300000013;
      long long v162 = xmmword_18E1FD730;
      long long v164 = v165;
      v73.f64[0] = v37;
      sub_18DFE3240((uint64_t)&v187, (uint64_t)&v161, v73);
      uint64_t v168 = 0x100000013;
      long long v166 = &unk_1EDD17CB8;
      long long v167 = xmmword_18E1FD730;
      long long v169 = &v170;
      sub_18DFEF1F4((uint64_t)&v301, (uint64_t)&v161, (uint64_t)&v166);
      if (v21)
      {
        uint64_t v158 = 0x1300000013;
        v74.f64[1] = *((float64_t *)&v94 + 1);
        long long v157 = v94;
        int v156 = &unk_1EDD17C88;
        long long v159 = v160;
        v74.f64[0] = v37;
        sub_18DFE3240((uint64_t)&v177, (uint64_t)&v156, v74);
        uint64_t v163 = 0x1300000013;
        long long v161 = &unk_1EDD17C88;
        long long v162 = v94;
        long long v164 = v165;
        sub_18DFEF1F4((uint64_t)&v296, (uint64_t)&v156, (uint64_t)&v161);
        uint64_t v158 = 0xF00000013;
        v75.f64[1] = *((float64_t *)&v95 + 1);
        long long v157 = v95;
        int v156 = &unk_1EDD17C28;
        long long v159 = v160;
        v75.f64[0] = v37;
        sub_18DFE3240((uint64_t)&v172, (uint64_t)&v156, v75);
        uint64_t v153 = 0xF00000013;
        long long v152 = v95;
        long long v151 = &unk_1EDD17C28;
        uint64_t v154 = v155;
        sub_18DFEF1F4((uint64_t)&v291, (uint64_t)&v156, (uint64_t)&v151);
        long long v76 = v94;
        long long v77 = v95;
      }
      else
      {
        uint64_t v163 = 0x1300000013;
        long long v161 = &unk_1EDD17C88;
        long long v76 = v94;
        long long v77 = v95;
        long long v162 = v94;
        long long v164 = v165;
        uint64_t v153 = 0xF00000013;
        long long v152 = v95;
        long long v151 = &unk_1EDD17C28;
        uint64_t v154 = v155;
      }
      uint64_t v148 = 0x100000013;
      long long v147 = xmmword_18E1FD730;
      uint64_t v146 = &unk_1EDD17CB8;
      BOOL v149 = &v150;
      uint64_t v158 = 0x1300000013;
      long long v157 = v76;
      int v156 = &unk_1EDD17C88;
      long long v159 = v160;
      uint64_t v143 = 0xF00000013;
      uint64_t v141 = &unk_1EDD17C28;
      long long v142 = v77;
      uint64_t v144 = &v145;
      if (v93((long long *)v171, &v331, &v166, v11, v9, &v146, &v156, &v141)) {
        break;
      }
      if (v21)
      {
        sub_18E064BE8((uint64_t)&v156, (uint64_t)&v161, (uint64_t)&v136);
        sub_18E064C68((uint64_t)&v156, (uint64_t)&v151, (uint64_t)&v126);
        sub_18E064B64((uint64_t)&v126, (uint64_t)&v141, (uint64_t)&v131);
      }
      else
      {
        uint64_t v138 = 0x1300000013;
        long long v136 = &unk_1EDD17C88;
        long long v137 = v94;
        uint64_t v139 = &v140;
        uint64_t v133 = 0xF00000013;
        uint64_t v131 = &unk_1EDD17C28;
        long long v132 = v95;
        uint64_t v134 = &v135;
      }
      uint64_t v103 = 0x100000013;
      int64x2_t v101 = &unk_1EDD17CB8;
      *(void *)&v78.f64[1] = 0x1300000013;
      long long v102 = xmmword_18E1FD730;
      int64x2_t v104 = &v105;
      v78.f64[0] = 2.0;
      sub_18DFE3240((uint64_t)&v228, (uint64_t)&v101, v78);
      uint64_t v108 = 0x100000013;
      int64x2_t v106 = &unk_1EDD17CB8;
      long long v107 = xmmword_18E1FD730;
      int64x2_t v109 = &v110;
      sub_18DFEF1F4((uint64_t)&v274, (uint64_t)&v101, (uint64_t)&v106);
      uint64_t v98 = 0x100000013;
      int64x2_t v96 = &unk_1EDD17CB8;
      *(void *)&v79.f64[1] = 0x1300000013;
      long long v97 = xmmword_18E1FD730;
      int64x2_t v99 = &v100;
      v79.f64[0] = 2.0;
      sub_18DFE3240((uint64_t)&v187, (uint64_t)&v96, v79);
      uint64_t v113 = 0x100000013;
      int64x2_t v111 = &unk_1EDD17CB8;
      long long v112 = xmmword_18E1FD730;
      int64x2_t v114 = &v115;
      sub_18DFEF1F4((uint64_t)&v106, (uint64_t)&v96, (uint64_t)&v111);
      uint64_t v118 = 0x100000013;
      int64x2_t v116 = &unk_1EDD17CB8;
      long long v117 = xmmword_18E1FD730;
      int64x2_t v119 = &v120;
      sub_18DFEF1F4((uint64_t)&v111, (uint64_t)&v146, (uint64_t)&v116);
      uint64_t v123 = 0x100000013;
      int64x2_t v121 = &unk_1EDD17CB8;
      *(void *)&v80.f64[1] = 0x1300000013;
      long long v122 = xmmword_18E1FD730;
      int64x2_t v124 = &v125;
      v80.f64[0] = v37 / 6.0;
      sub_18DFE3240((uint64_t)&v116, (uint64_t)&v121, v80);
      uint64_t v128 = 0x100000013;
      int64x2_t v126 = &unk_1EDD17CB8;
      long long v127 = xmmword_18E1FD730;
      int64x2_t v129 = &v130;
      sub_18DFEF1F4((uint64_t)&v317, (uint64_t)&v121, (uint64_t)&v126);
      __n128 v42 = sub_18DFE2F24((uint64_t)&v317, (uint64_t)&v126);
      if (v21)
      {
        v42.n128_u64[0] = 2.0;
        sub_18E064D70((uint64_t)&v218, (uint64_t)&v101, (float64x2_t)v42);
        sub_18E064AE4((uint64_t)&v259, (uint64_t)&v101, (uint64_t)&v106);
        v81.f64[0] = 2.0;
        sub_18E064D70((uint64_t)&v177, (uint64_t)&v96, v81);
        sub_18E064AE4((uint64_t)&v106, (uint64_t)&v96, (uint64_t)&v111);
        sub_18E064AE4((uint64_t)&v111, (uint64_t)&v136, (uint64_t)&v116);
        v82.f64[0] = v37 / 6.0;
        sub_18E064D70((uint64_t)&v116, (uint64_t)&v121, v82);
        sub_18E064AE4((uint64_t)&v312, (uint64_t)&v121, (uint64_t)&v126);
        __n128 v83 = sub_18DFE2F24((uint64_t)&v312, (uint64_t)&v126);
        v83.n128_u64[0] = 2.0;
        sub_18E064DF0((uint64_t)&v213, (uint64_t)&v101, (float64x2_t)v83);
        sub_18E064B64((uint64_t)&v254, (uint64_t)&v101, (uint64_t)&v106);
        v84.f64[0] = 2.0;
        sub_18E064DF0((uint64_t)&v172, (uint64_t)&v96, v84);
        sub_18E064B64((uint64_t)&v106, (uint64_t)&v96, (uint64_t)&v111);
        sub_18E064B64((uint64_t)&v111, (uint64_t)&v131, (uint64_t)&v116);
        v85.f64[0] = v37 / 6.0;
        sub_18E064DF0((uint64_t)&v116, (uint64_t)&v121, v85);
        sub_18E064B64((uint64_t)&v307, (uint64_t)&v121, (uint64_t)&v126);
        __n128 v42 = sub_18DFE2F24((uint64_t)&v307, (uint64_t)&v126);
      }
      if (v91 == ++v41)
      {
        *(double *)(v14 + 40) = v37;
        *uint64_t v92 = *v90;
        uint64_t v298 = 0x100000013;
        double v296 = &unk_1EDD17CB8;
        long long v297 = xmmword_18E1FD730;
        long long v299 = v300;
        sub_18DFEF1F4(v89, (uint64_t)&v317, (uint64_t)&v296);
        sub_18DFE2F24(v89, (uint64_t)&v296);
        if (v21)
        {
          sub_18E064AE4((uint64_t)&v332, (uint64_t)&v312, (uint64_t)&v284);
          sub_18E064BE8((uint64_t)&v284, v14 + 672, (uint64_t)&v296);
          sub_18DFE2F24(v14 + 672, (uint64_t)&v296);
          sub_18E064AE4((uint64_t)&v332, (uint64_t)&v312, (uint64_t)&v296);
          uint64_t v86 = v14 + 3600;
          sub_18E064C68((uint64_t)&v296, v86, (uint64_t)&v269);
          sub_18E064B64((uint64_t)&v325, (uint64_t)&v307, (uint64_t)&v259);
          sub_18E064B64((uint64_t)&v269, (uint64_t)&v259, (uint64_t)&v284);
          sub_18DFE2F24(v86, (uint64_t)&v284);
          sub_18DFE2F24(v7, v89);
          sub_18E064AE4((uint64_t)&v332, (uint64_t)&v312, (uint64_t)&v296);
          sub_18DFE2F24(v5, (uint64_t)&v296);
          sub_18E064B64((uint64_t)&v325, (uint64_t)&v307, (uint64_t)&v296);
          int64x2_t v87 = &v296;
          uint64_t v88 = v3;
        }
        else
        {
          uint64_t v88 = v7;
          int64x2_t v87 = (void **)(v14 + 480);
        }
        sub_18DFE2F24(v88, (uint64_t)v87);
        return 0;
      }
    }
    return 0xFFFFFFFFLL;
  }
  sub_18DFE2F24(v7, v14 + 480);
  if (v21)
  {
    uint64_t v334 = 0x1300000013;
    double v332 = &unk_1EDD17C88;
    uint64_t v335 = v336;
    LODWORD(v333) = v20;
    DWORD1(v333) = v20;
    DWORD2(v333) = v20 * v20;
    HIDWORD(v333) = v20;
    sub_18DFE2CC8((uint64_t)&v332, 0.0);
    if ((int)v20 >= 1)
    {
      int v25 = 0;
      int v26 = HIDWORD(v333) + 1;
      double v27 = v335;
      uint64_t v28 = v20;
      do
      {
        *(void *)&v27[8 * v25] = 0x3FF0000000000000;
        v25 += v26;
        --v28;
      }
      while (v28);
    }
    sub_18DFE2F24(v5, (uint64_t)&v332);
    uint64_t v334 = 0xF00000013;
    double v332 = &unk_1EDD17C28;
    uint64_t v335 = v336;
    *(void *)&long long v333 = __PAIR64__(v17, v20);
    DWORD2(v333) = v17 * v20;
    HIDWORD(v333) = v20;
    sub_18DFE2CC8((uint64_t)&v332, 0.0);
    sub_18DFE2F24(v3, (uint64_t)&v332);
  }
  uint64_t result = 0;
  *(void *)(v14 + 40) = 0;
  return result;
}

uint64_t sub_18E063E0C(uint64_t result)
{
  *(unsigned char *)(result + 456) = 0;
  return result;
}

void *sub_18E063E14(void *result)
{
  *uint64_t result = &unk_1EDD17478;
  return result;
}

uint64_t sub_18E063E3C(uint64_t a1, int *a2)
{
  int v2 = *a2;
  if (!*a2 || !*((void *)a2 + 1)) {
    return 0xFFFFFFFFLL;
  }
  unsigned int v4 = a2[5];
  if (a2[4] > v4 || v4 == 0) {
    return 0xFFFFFFFFLL;
  }
  double v8 = *((double *)a2 + 4);
  uint64_t result = 0xFFFFFFFFLL;
  if (fabs(*((double *)a2 + 3)) > v8 || v8 <= 0.0) {
    return result;
  }
  if (*((unsigned char *)a2 + 40))
  {
    if (a2[62] != v2 || a2[63] != 1) {
      return result;
    }
    uint64_t v26 = 0x100000013;
    double v24 = &unk_1EDD17CB8;
    long long v25 = xmmword_18E1FD730;
    double v27 = (double *)&v28;
    uint64_t v21 = 0x100000013;
    uint64_t v19 = &unk_1EDD17D18;
    long long v20 = xmmword_18E1FD730;
    uint64_t v22 = &v23;
    sub_18E064598((uint64_t)(a2 + 60), (uint64_t)&v24, (uint64_t)&v19);
    if (*v27 < 0.0) {
      return 0xFFFFFFFFLL;
    }
    uint64_t result = 0xFFFFFFFFLL;
    if (a2[14] != v2 || a2[15] != 1) {
      return result;
    }
    sub_18E0642B4((uint64_t)(a2 + 12), (uint64_t)&v24);
    if (*v27 < 0.0) {
      return 0xFFFFFFFFLL;
    }
    sub_18E0644F4((uint64_t)(a2 + 60), (uint64_t)(a2 + 12), (uint64_t)v18);
    sub_18E064434((uint64_t)v18, 2, (uint64_t)&v19);
    sub_18E064374((uint64_t)&v19, (uint64_t)&v24);
    if (*v27 <= 0.0) {
      return 0xFFFFFFFFLL;
    }
  }
  uint64_t v9 = (_DWORD *)(a1 + 16);
  if (*(unsigned char *)(a1 + 8))
  {
    BOOL v10 = *v9 != *a2 || *(_DWORD *)(a1 + 20) != a2[1];
    uint64_t v11 = *(void *)(a1 + 24);
    uint64_t v12 = *((void *)a2 + 1);
    long long v13 = *(_OWORD *)a2;
    long long v14 = *((_OWORD *)a2 + 1);
    *(_OWORD *)(a1 + 41) = *(_OWORD *)((char *)a2 + 25);
    *(_OWORD *)uint64_t v9 = v13;
    *(_OWORD *)(a1 + 32) = v14;
    sub_18DFE2F24(a1 + 64, (uint64_t)(a2 + 12));
    __n128 v15 = sub_18DFE2F24(a1 + 256, (uint64_t)(a2 + 60));
    *(unsigned char *)(a1 + 448) = *((unsigned char *)a2 + 432);
    *(unsigned char *)(a1 + 8) = 1;
    if (v10 || v11 != v12) {
      (*(void (**)(uint64_t, __n128))(*(void *)a1 + 104))(a1, v15);
    }
    return 0;
  }
  else
  {
    long long v16 = *(_OWORD *)a2;
    long long v17 = *((_OWORD *)a2 + 1);
    *(_OWORD *)(a1 + 41) = *(_OWORD *)((char *)a2 + 25);
    *(_OWORD *)uint64_t v9 = v16;
    *(_OWORD *)(a1 + 32) = v17;
    sub_18DFE2F24(a1 + 64, (uint64_t)(a2 + 12));
    sub_18DFE2F24(a1 + 256, (uint64_t)(a2 + 60));
    uint64_t result = 0;
    *(unsigned char *)(a1 + 448) = *((unsigned char *)a2 + 432);
    *(unsigned char *)(a1 + 8) = 1;
  }
  return result;
}

void sub_18E0640E0(void *a1)
{
  *a1 = &unk_1EDD17478;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E064110(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E06411C(uint64_t a1)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  sub_18DEF3CF4(a1, v1);
}

void sub_18E06416C(void *a1)
{
  *a1 = &unk_1EDD17478;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E06419C(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E0641A8(uint64_t a1)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  sub_18DEF3CF4(a1, v1);
}

void *sub_18E064200(void *result)
{
  *uint64_t result = &unk_1EDD17478;
  return result;
}

void sub_18E064220(void *a1)
{
  *a1 = &unk_1EDD17478;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E064250(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E06425C(uint64_t a1)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  sub_18DEF3CF4(a1, v1);
}

double sub_18E0642B4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 24) = 0x100000013;
  *(void *)a2 = &unk_1EDD17CB8;
  *(_OWORD *)(a2 + 8) = xmmword_18E1FD730;
  *(void *)(a2 + 32) = a2 + 40;
  uint64_t v5 = 0x100000013;
  uint64_t v3 = &unk_1EDD17D18;
  long long v4 = xmmword_18E1FD730;
  uint64_t v6 = &v7;
  *(void *)&double result = sub_18E064598(a1, a2, (uint64_t)&v3).n128_u64[0];
  return result;
}

void sub_18E064354(_Unwind_Exception *a1)
{
  *uint64_t v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

double sub_18E064374@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 24) = 0x200000013;
  *(void *)a2 = &unk_1EDD17D48;
  *(_OWORD *)(a2 + 8) = xmmword_18E1FD8D0;
  *(void *)(a2 + 32) = a2 + 40;
  uint64_t v5 = 0x200000013;
  uint64_t v3 = &unk_1EDD17D78;
  long long v4 = xmmword_18E1FD8D0;
  uint64_t v6 = &v7;
  *(void *)&double result = sub_18E064598(a1, a2, (uint64_t)&v3).n128_u64[0];
  return result;
}

void sub_18E064414(_Unwind_Exception *a1)
{
  *uint64_t v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

uint64_t sub_18E064434@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 24) = 0x200000013;
  *(void *)a3 = &unk_1EDD17D48;
  *(_OWORD *)(a3 + 8) = xmmword_18E1FD8D0;
  *(void *)(a3 + 32) = a3 + 40;
  uint64_t v6 = 0x200000013;
  long long v4 = &unk_1EDD17D78;
  long long v5 = xmmword_18E1FD8D0;
  uint64_t v7 = &v8;
  return sub_18DFE2934(a1, a2, a3, (uint64_t)&v4);
}

void sub_18E0644D4(_Unwind_Exception *a1)
{
  *uint64_t v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

uint64_t sub_18E0644F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 24) = 0x200000013;
  *(void *)a3 = &unk_1EDD17D48;
  *(_OWORD *)(a3 + 8) = xmmword_18E1FD8D0;
  *(void *)(a3 + 32) = a3 + 40;
  return sub_18E064994(a1, a2, a3);
}

void sub_18E064558(_Unwind_Exception *a1)
{
  *uint64_t v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

void *sub_18E064578(void *result)
{
  *double result = &unk_1EDD17478;
  return result;
}

__n128 sub_18E064598(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_18E0646E8(a1, 1, a2, a3);
  if (*(_DWORD *)(a1 + 8) == 1 || *(_DWORD *)(a1 + 12) == 1)
  {
    int v8 = *(_DWORD *)(a2 + 16);
    if (v8 >= 2)
    {
      uint64_t v9 = *(double **)(a2 + 32);
      BOOL v10 = *(_DWORD **)(a3 + 32);
      double v11 = *v9;
      for (uint64_t i = 1; i < v8; ++i)
      {
        double v13 = v9[i];
        if (v13 < v11)
        {
          *uint64_t v9 = v13;
          *BOOL v10 = v10[i];
          int v8 = *(_DWORD *)(a2 + 16);
          double v11 = v13;
        }
      }
    }
    result.n128_u64[0] = 0x100000001;
    result.n128_u64[1] = 0x100000001;
    *(__n128 *)(a2 + 8) = result;
    *(__n128 *)(a3 + 8) = result;
  }
  return result;
}

void *sub_18E06463C(void *result)
{
  *__n128 result = &unk_1EDD174D8;
  return result;
}

void sub_18E06465C(void *a1)
{
  *a1 = &unk_1EDD174D8;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E06468C(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E064698(uint64_t a1)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  sub_18DFE2870(a1, v1);
}

uint64_t sub_18E0646E8(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  if (a2 == 1)
  {
    int v4 = *(_DWORD *)(result + 12);
    *(_DWORD *)(a3 + 8) = 1;
    *(_DWORD *)(a3 + 12) = v4;
    *(_DWORD *)(a3 + 16) = v4;
    *(_DWORD *)(a3 + 20) = 1;
    int v5 = *(_DWORD *)(result + 12);
    *(_DWORD *)(a4 + 8) = 1;
    *(_DWORD *)(a4 + 12) = v5;
    *(_DWORD *)(a4 + 16) = v5;
    *(_DWORD *)(a4 + 20) = 1;
    if (v5)
    {
      unint64_t v6 = 0;
      uint64_t v7 = *(void *)(result + 32);
      uint64_t v8 = *(void *)(a3 + 32);
      uint64_t v9 = *(void *)(a4 + 32);
      do
      {
        uint64_t v10 = *(unsigned int *)(result + 8);
        double v11 = *(double *)(v7 + 8 * (v10 * v6));
        if (v10 < 2)
        {
          int v12 = 0;
        }
        else
        {
          int v12 = 0;
          int v13 = v10 * v6;
          for (uint64_t i = 1; i != v10; ++i)
          {
            if (*(double *)(v7 + 8 * (v13 + i)) < v11)
            {
              double v11 = *(double *)(v7 + 8 * (v13 + i));
              int v12 = i;
            }
          }
        }
        *(double *)(v8 + 8 * v6) = v11;
        *(_DWORD *)(v9 + 4 * v6++) = v12;
      }
      while (v6 < *(unsigned int *)(result + 12));
    }
  }
  else
  {
    v15.i32[1] = 1;
    v15.i32[0] = *(_DWORD *)(result + 8);
    int32x4_t v16 = vdupq_lane_s32(v15, 0);
    v16.i32[1] = 1;
    *(int32x4_t *)(a3 + 8) = v16;
    unsigned int v17 = *(_DWORD *)(result + 8);
    int32x4_t v18 = vdupq_lane_s32((int32x2_t)(v17 | 0x100000000), 0);
    v18.i32[1] = 1;
    *(int32x4_t *)(a4 + 8) = v18;
    if (v17)
    {
      unint64_t v19 = 0;
      uint64_t v20 = *(void *)(result + 32);
      uint64_t v21 = *(void *)(a3 + 32);
      uint64_t v22 = *(void *)(a4 + 32);
      do
      {
        *(void *)(v21 + 8 * v19) = *(void *)(v20 + 8 * v19);
        *(_DWORD *)(v22 + 4 * v19++) = 0;
      }
      while (v19 < *(unsigned int *)(result + 8));
    }
    unsigned int v23 = *(_DWORD *)(result + 12);
    if (v23 >= 2)
    {
      uint64_t v24 = *(void *)(result + 32);
      uint64_t v25 = *(void *)(a3 + 32);
      unsigned int v26 = *(_DWORD *)(result + 8);
      unsigned int v27 = 1;
      unsigned int v28 = v26;
      do
      {
        if (v28)
        {
          unint64_t v29 = 0;
          uint64_t v30 = *(void *)(a4 + 32);
          int v31 = v28 * v27;
          do
          {
            double v32 = *(double *)(v24 + 8 * (v31 + v29));
            if (v32 < *(double *)(v25 + 8 * v29))
            {
              *(double *)(v25 + 8 * v29) = v32;
              *(_DWORD *)(v30 + 4 * v29) = v27;
              unsigned int v26 = *(_DWORD *)(result + 8);
            }
            ++v29;
          }
          while (v29 < v26);
          unsigned int v23 = *(_DWORD *)(result + 12);
          unsigned int v28 = v26;
        }
        ++v27;
      }
      while (v27 < v23);
    }
  }
  return result;
}

void *sub_18E06485C(void *result)
{
  *__n128 result = &unk_1EDD174D8;
  return result;
}

void sub_18E06487C(void *a1)
{
  *a1 = &unk_1EDD17478;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E0648AC(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E0648B8(uint64_t a1)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  sub_18DEF3CF4(a1, v1);
}

void sub_18E064908(void *a1)
{
  *a1 = &unk_1EDD174D8;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E064938(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E064944(uint64_t a1)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  sub_18DFE2870(a1, v1);
}

uint64_t sub_18E064994(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(unsigned int *)(result + 8);
  int v4 = *(_DWORD *)(result + 12);
  int v5 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a3 + 8) = v3;
  *(_DWORD *)(a3 + 12) = v5 + v4;
  *(_DWORD *)(a3 + 16) = (v5 + v4) * v3;
  *(_DWORD *)(a3 + 20) = v3;
  if (v4)
  {
    int v6 = 0;
    uint64_t v7 = 0;
    int v8 = 0;
    int v9 = *(_DWORD *)(result + 20);
    uint64_t v10 = *(void *)(result + 32);
    uint64_t v11 = *(void *)(a3 + 32);
    do
    {
      int v12 = v6;
      __n128 result = v7;
      for (int i = v3; i; --i)
      {
        *(void *)(v11 + 8 * result) = *(void *)(v10 + 8 * v12);
        __n128 result = (result + 1);
        ++v12;
      }
      ++v8;
      uint64_t v7 = (v7 + v3);
      v6 += v9;
    }
    while (v8 != v4);
  }
  if (v5)
  {
    int v14 = 0;
    int v15 = 0;
    int v16 = *(_DWORD *)(a2 + 20);
    uint64_t v17 = *(void *)(a2 + 32);
    unsigned int v18 = v4 * v3;
    uint64_t v19 = *(void *)(a3 + 32);
    do
    {
      int v20 = v14;
      unsigned int v21 = v18;
      for (__n128 result = v3; result; __n128 result = (result - 1))
        *(void *)(v19 + 8 * v21++) = *(void *)(v17 + 8 * v20++);
      ++v15;
      v18 += v3;
      v14 += v16;
    }
    while (v15 != v5);
  }
  return result;
}

double sub_18E064A60@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 24) = 0x100000013;
  *(void *)a3 = &unk_1EDD17CB8;
  *(_OWORD *)(a3 + 8) = xmmword_18E1FD730;
  *(void *)(a3 + 32) = a3 + 40;
  *(void *)&double result = *(_OWORD *)&sub_18DFEF1F4(a1, a2, a3);
  return result;
}

void sub_18E064AC4(_Unwind_Exception *a1)
{
  *uint64_t v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

double sub_18E064AE4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 24) = 0x1300000013;
  *(void *)a3 = &unk_1EDD17C88;
  *(_OWORD *)(a3 + 8) = xmmword_18E1FD880;
  *(void *)(a3 + 32) = a3 + 40;
  *(void *)&double result = *(_OWORD *)&sub_18DFEF1F4(a1, a2, a3);
  return result;
}

void sub_18E064B44(_Unwind_Exception *a1)
{
  *uint64_t v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

double sub_18E064B64@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 24) = 0xF00000013;
  *(void *)a3 = &unk_1EDD17C28;
  *(_OWORD *)(a3 + 8) = xmmword_18E1FD890;
  *(void *)(a3 + 32) = a3 + 40;
  *(void *)&double result = *(_OWORD *)&sub_18DFEF1F4(a1, a2, a3);
  return result;
}

void sub_18E064BC8(_Unwind_Exception *a1)
{
  *uint64_t v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

void sub_18E064BE8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 24) = 0x1300000013;
  *(void *)a3 = &unk_1EDD17C88;
  *(_OWORD *)(a3 + 8) = xmmword_18E1FD880;
  *(void *)(a3 + 32) = a3 + 40;
  sub_18DFE2B44(a1, a2, a3);
}

void sub_18E064C48(_Unwind_Exception *a1)
{
  *uint64_t v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

void sub_18E064C68(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 24) = 0xF00000013;
  *(void *)a3 = &unk_1EDD17C28;
  *(_OWORD *)(a3 + 8) = xmmword_18E1FD890;
  *(void *)(a3 + 32) = a3 + 40;
  sub_18DFE2B44(a1, a2, a3);
}

void sub_18E064CCC(_Unwind_Exception *a1)
{
  *uint64_t v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

double sub_18E064CEC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>, float64x2_t a3@<Q0>)
{
  *(void *)(a2 + 24) = 0x100000013;
  *(void *)a2 = &unk_1EDD17CB8;
  *(_OWORD *)(a2 + 8) = xmmword_18E1FD730;
  *(void *)(a2 + 32) = a2 + 40;
  *(void *)&double result = *(_OWORD *)&sub_18DFE3240(a1, a2, a3);
  return result;
}

void sub_18E064D50(_Unwind_Exception *a1)
{
  *uint64_t v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

double sub_18E064D70@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>, float64x2_t a3@<Q0>)
{
  *(void *)(a2 + 24) = 0x1300000013;
  *(void *)a2 = &unk_1EDD17C88;
  *(_OWORD *)(a2 + 8) = xmmword_18E1FD880;
  *(void *)(a2 + 32) = a2 + 40;
  *(void *)&double result = *(_OWORD *)&sub_18DFE3240(a1, a2, a3);
  return result;
}

void sub_18E064DD0(_Unwind_Exception *a1)
{
  *uint64_t v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

double sub_18E064DF0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>, float64x2_t a3@<Q0>)
{
  *(void *)(a2 + 24) = 0xF00000013;
  *(void *)a2 = &unk_1EDD17C28;
  *(_OWORD *)(a2 + 8) = xmmword_18E1FD890;
  *(void *)(a2 + 32) = a2 + 40;
  *(void *)&double result = *(_OWORD *)&sub_18DFE3240(a1, a2, a3);
  return result;
}

void sub_18E064E54(_Unwind_Exception *a1)
{
  *uint64_t v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

__n128 sub_18E064E74(uint64_t a1, uint64_t a2)
{
  result.n128_u64[0] = 0x1300000013;
  *(void *)(a1 + 24) = 0x1300000013;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1EDD17C88;
  if (a1 == a2)
  {
    uint64_t v17 = "this != &(A)";
    int v18 = 603;
    goto LABEL_16;
  }
  int v3 = *(_DWORD *)(a2 + 8);
  int v4 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = v4;
  uint64_t v5 = (v4 * v3);
  *(_DWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 20) = v3;
  int v6 = (unint64_t *)(a1 + 40);
  *(void *)(a1 + 32) = a1 + 40;
  if (*(_DWORD *)(a2 + 8) > 0x13u)
  {
    uint64_t v17 = "this->max_num_rows_ >= A.num_rows_";
    int v18 = 616;
    goto LABEL_16;
  }
  if (*(_DWORD *)(a2 + 12) >= 0x14u)
  {
    uint64_t v17 = "this->max_num_cols_ >= A.num_cols_";
    int v18 = 617;
LABEL_16:
    __assert_rtn("CNMatrix", "cnmatrix.h", v18, v17);
  }
  int v7 = *(_DWORD *)(a2 + 16);
  if (v7 > 3)
  {
    uint64_t v10 = (v7 - 2);
    uint64_t v11 = *(long long **)(a2 + 32);
    uint64_t v12 = (v7 - 1) >> 1;
    int v13 = v11;
    int v14 = (_OWORD *)(a1 + 40);
    do
    {
      long long v15 = *v13++;
      *v14++ = v15;
      --v12;
    }
    while (v12);
    uint64_t v16 = v10;
    __n128 result = *(__n128 *)((char *)v11 + v16 * 8);
    *(__n128 *)&v6[v16] = result;
  }
  else if ((int)v5 >= 1)
  {
    int v8 = *(unint64_t **)(a2 + 32);
    do
    {
      unint64_t v9 = *v8++;
      result.n128_u64[0] = v9;
      *v6++ = v9;
      --v5;
    }
    while (v5);
  }
  return result;
}

void sub_18E064FA0(_Unwind_Exception *a1)
{
  *uint64_t v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

__n128 sub_18E064FC0(uint64_t a1, uint64_t a2)
{
  result.n128_u64[0] = 0xF00000013;
  *(void *)(a1 + 24) = 0xF00000013;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1EDD17C28;
  if (a1 == a2)
  {
    uint64_t v17 = "this != &(A)";
    int v18 = 603;
    goto LABEL_16;
  }
  int v3 = *(_DWORD *)(a2 + 8);
  int v4 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = v4;
  uint64_t v5 = (v4 * v3);
  *(_DWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 20) = v3;
  int v6 = (unint64_t *)(a1 + 40);
  *(void *)(a1 + 32) = a1 + 40;
  if (*(_DWORD *)(a2 + 8) > 0x13u)
  {
    uint64_t v17 = "this->max_num_rows_ >= A.num_rows_";
    int v18 = 616;
    goto LABEL_16;
  }
  if (*(_DWORD *)(a2 + 12) >= 0x10u)
  {
    uint64_t v17 = "this->max_num_cols_ >= A.num_cols_";
    int v18 = 617;
LABEL_16:
    __assert_rtn("CNMatrix", "cnmatrix.h", v18, v17);
  }
  int v7 = *(_DWORD *)(a2 + 16);
  if (v7 > 3)
  {
    uint64_t v10 = (v7 - 2);
    uint64_t v11 = *(long long **)(a2 + 32);
    uint64_t v12 = (v7 - 1) >> 1;
    int v13 = v11;
    int v14 = (_OWORD *)(a1 + 40);
    do
    {
      long long v15 = *v13++;
      *v14++ = v15;
      --v12;
    }
    while (v12);
    uint64_t v16 = v10;
    __n128 result = *(__n128 *)((char *)v11 + v16 * 8);
    *(__n128 *)&v6[v16] = result;
  }
  else if ((int)v5 >= 1)
  {
    int v8 = *(unint64_t **)(a2 + 32);
    do
    {
      unint64_t v9 = *v8++;
      result.n128_u64[0] = v9;
      *v6++ = v9;
      --v5;
    }
    while (v5);
  }
  return result;
}

void sub_18E0650F0(_Unwind_Exception *a1)
{
  *uint64_t v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

void *sub_18E065110(void *result)
{
  *__n128 result = &unk_1EDD17478;
  return result;
}

void sub_18E065130(void *a1)
{
  *a1 = &unk_1EDD17478;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E065160(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E06516C(uint64_t a1)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  sub_18DEF3CF4(a1, v1);
}

uint64_t sub_18E0651BC(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xCFF3FCFF3FCFF3FDLL * ((a1[1] - *a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xC0300C0300C03) {
    sub_18DEE1FC8();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xCFF3FCFF3FCFF3FDLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x6018060180601) {
    unint64_t v9 = 0xC0300C0300C03;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_18E0653F8(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  int v13 = v10;
  int v14 = &v10[5456 * v4];
  uint64_t v16 = &v10[5456 * v9];
  sub_18E0652E0(v14, a2);
  long long v15 = v14 + 5456;
  sub_18E065380(a1, &v13);
  uint64_t v11 = a1[1];
  sub_18E065668((uint64_t)&v13);
  return v11;
}

void sub_18E0652CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_18E065668((uint64_t)va);
  _Unwind_Resume(a1);
}

_OWORD *sub_18E0652E0(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  sub_18E0767B8((uint64_t)(a1 + 1), (uint64_t)(a2 + 1));
  sub_18E064E74((uint64_t)(a1 + 13), (uint64_t)(a2 + 13));
  sub_18E064FC0((uint64_t)(a1 + 196), (uint64_t)(a2 + 196));
  return a1;
}

void sub_18E065340(_Unwind_Exception *a1)
{
  *uint64_t v2 = &unk_1EDD17478;
  *uint64_t v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

uint64_t sub_18E065380(uint64_t *a1, void *a2)
{
  uint64_t result = sub_18E065444((uint64_t)(a1 + 2), a1[1], (_OWORD *)a1[1], *a1, (_OWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_18E0653F8(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xC0300C0300C04) {
    sub_18DEDF7D4();
  }
  return operator new(5456 * a2);
}

uint64_t sub_18E065444(uint64_t a1, uint64_t a2, _OWORD *a3, uint64_t a4, _OWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  void v12[2] = &v15;
  char v13 = 0;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    unint64_t v9 = a3;
    do
    {
      v9 -= 341;
      sub_18E065504((_OWORD *)(v7 - 5456), v9);
      uint64_t v7 = *((void *)&v15 + 1) - 5456;
      *((void *)&v15 + 1) -= 5456;
    }
    while (v9 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  sub_18E0655A4((uint64_t)v12);
  return v10;
}

void sub_18E0654F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

_OWORD *sub_18E065504(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  sub_18E0767B8((uint64_t)(a1 + 1), (uint64_t)(a2 + 1));
  sub_18E064E74((uint64_t)(a1 + 13), (uint64_t)(a2 + 13));
  sub_18E064FC0((uint64_t)(a1 + 196), (uint64_t)(a2 + 196));
  return a1;
}

void sub_18E065564(_Unwind_Exception *a1)
{
  *uint64_t v2 = &unk_1EDD17478;
  *uint64_t v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

uint64_t sub_18E0655A4(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_18E0655DC(a1);
  }
  return a1;
}

uint64_t sub_18E0655DC(uint64_t result)
{
  uint64_t v1 = *(void **)(*(void *)(result + 16) + 8);
  uint64_t v2 = *(void **)(*(void *)(result + 8) + 8);
  if (v1 != v2)
  {
    uint64_t v3 = v1 + 392;
    do
    {
      v1[392] = &unk_1EDD17478;
      v1[26] = &unk_1EDD17478;
      char v1[2] = &unk_1EDD17478;
      v1 += 682;
      v3 += 682;
    }
    while (v1 != v2);
  }
  return result;
}

uint64_t sub_18E065668(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  uint64_t v3 = *(void **)(a1 + 16);
  if (v3 != v2)
  {
    unint64_t v4 = v3 - 290;
    uint64_t v5 = v3 - 680;
    do
    {
      *unint64_t v4 = &unk_1EDD17478;
      *(v4 - 366) = &unk_1EDD17478;
      *(v4 - 390) = &unk_1EDD17478;
      uint64_t v6 = v4 - 392;
      v4 -= 682;
      v5 -= 682;
    }
    while (v6 != v2);
    *(void *)(a1 + 16) = v2;
  }
  uint64_t v7 = *(void **)a1;
  if (*(void *)a1) {
    operator delete(v7);
  }
  return a1;
}

_OWORD *sub_18E065730(_OWORD *a1, _OWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *a1 = *a2;
  sub_18E0767B8((uint64_t)(a1 + 1), a3);
  sub_18E064E74((uint64_t)(a1 + 13), a4);
  sub_18E064FC0((uint64_t)(a1 + 196), a5);
  return a1;
}

void sub_18E0657A0(_Unwind_Exception *a1)
{
  *uint64_t v2 = &unk_1EDD17478;
  *uint64_t v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

_OWORD *sub_18E0657E0(_OWORD *a1, _OWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *a1 = *a2;
  sub_18E0767B8((uint64_t)(a1 + 1), a3);
  sub_18E064E74((uint64_t)(a1 + 13), a4);
  sub_18E064FC0((uint64_t)(a1 + 196), a5);
  return a1;
}

void sub_18E065850(_Unwind_Exception *a1)
{
  *uint64_t v2 = &unk_1EDD17478;
  *uint64_t v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

double sub_18E065890(uint64_t a1, uint64_t a2)
{
  *(void *)&double result = 0x100000013;
  *(void *)(a1 + 24) = 0x100000013;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1EDD17CB8;
  int v4 = *(_DWORD *)(a2 + 8);
  int v3 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v5 = (v3 * v4);
  *(_DWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 20) = v4;
  uint64_t v6 = (double *)(a1 + 40);
  *(void *)(a1 + 32) = a1 + 40;
  if (*(_DWORD *)(a2 + 8) > 0x13u)
  {
    unint64_t v9 = "this->max_num_rows_ >= A.NumRows()";
    int v10 = 567;
    goto LABEL_9;
  }
  if (*(_DWORD *)(a2 + 12) > 1u)
  {
    unint64_t v9 = "this->max_num_cols_ >= A.NumCols()";
    int v10 = 568;
LABEL_9:
    __assert_rtn("CNMatrix", "cnmatrix.h", v10, v9);
  }
  if ((int)v5 >= 1)
  {
    uint64_t v7 = *(double **)(a2 + 32);
    do
    {
      double v8 = *v7++;
      double result = v8;
      *v6++ = v8;
      --v5;
    }
    while (v5);
  }
  return result;
}

void sub_18E065960(_Unwind_Exception *a1)
{
  *uint64_t v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

double sub_18E065980(uint64_t a1, uint64_t a2)
{
  *(void *)&double result = 0x1300000013;
  *(void *)(a1 + 24) = 0x1300000013;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1EDD17C88;
  int v4 = *(_DWORD *)(a2 + 8);
  int v3 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v5 = (v3 * v4);
  *(_DWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 20) = v4;
  uint64_t v6 = (double *)(a1 + 40);
  *(void *)(a1 + 32) = a1 + 40;
  if (*(_DWORD *)(a2 + 8) > 0x13u)
  {
    unint64_t v9 = "this->max_num_rows_ >= A.NumRows()";
    int v10 = 567;
    goto LABEL_9;
  }
  if (*(_DWORD *)(a2 + 12) > 0x13u)
  {
    unint64_t v9 = "this->max_num_cols_ >= A.NumCols()";
    int v10 = 568;
LABEL_9:
    __assert_rtn("CNMatrix", "cnmatrix.h", v10, v9);
  }
  if ((int)v5 >= 1)
  {
    uint64_t v7 = *(double **)(a2 + 32);
    do
    {
      double v8 = *v7++;
      double result = v8;
      *v6++ = v8;
      --v5;
    }
    while (v5);
  }
  return result;
}

void sub_18E065A4C(_Unwind_Exception *a1)
{
  *uint64_t v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

double sub_18E065A6C(uint64_t a1, uint64_t a2)
{
  *(void *)&double result = 0xF00000013;
  *(void *)(a1 + 24) = 0xF00000013;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1EDD17C28;
  int v4 = *(_DWORD *)(a2 + 8);
  int v3 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v5 = (v3 * v4);
  *(_DWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 20) = v4;
  uint64_t v6 = (double *)(a1 + 40);
  *(void *)(a1 + 32) = a1 + 40;
  if (*(_DWORD *)(a2 + 8) > 0x13u)
  {
    unint64_t v9 = "this->max_num_rows_ >= A.NumRows()";
    int v10 = 567;
    goto LABEL_9;
  }
  if (*(_DWORD *)(a2 + 12) > 0xFu)
  {
    unint64_t v9 = "this->max_num_cols_ >= A.NumCols()";
    int v10 = 568;
LABEL_9:
    __assert_rtn("CNMatrix", "cnmatrix.h", v10, v9);
  }
  if ((int)v5 >= 1)
  {
    uint64_t v7 = *(double **)(a2 + 32);
    do
    {
      double v8 = *v7++;
      double result = v8;
      *v6++ = v8;
      --v5;
    }
    while (v5);
  }
  return result;
}

void sub_18E065B3C(_Unwind_Exception *a1)
{
  *uint64_t v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

uint64_t sub_18E065B5C(uint64_t a1)
{
  *(_WORD *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 80) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(unsigned char *)(a1 + 72) = 0;
  *(void *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 88) = 1;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(unsigned char *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(unsigned char *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  *(unsigned char *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 208) = 0u;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0x7FF8000000000000;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = 0x4022000000000000;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(void *)(a1 + 280) = 0x100000008;
  *(void *)(a1 + 256) = &unk_1EDD19CC8;
  *(_OWORD *)(a1 + 264) = xmmword_18E1FD760;
  *(void *)(a1 + 288) = a1 + 296;
  *(void *)(a1 + 384) = 0x800000008;
  *(void *)(a1 + 360) = &unk_1EDD19DE8;
  *(_OWORD *)(a1 + 368) = xmmword_18E1FD750;
  *(void *)(a1 + 392) = a1 + 400;
  *(void *)(a1 + 936) = 0x100000008;
  *(void *)(a1 + 912) = &unk_1EDD19CC8;
  *(_OWORD *)(a1 + 920) = xmmword_18E1FD760;
  *(void *)(a1 + 944) = a1 + 952;
  *(unsigned char *)(a1 + 1016) = 0;
  *(unsigned char *)(a1 + 1024) = 0;
  *(void *)(a1 + 1032) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 1097) = 0u;
  *(_OWORD *)(a1 + 1072) = 0u;
  *(_OWORD *)(a1 + 1088) = 0u;
  *(_OWORD *)(a1 + 1040) = 0u;
  *(_OWORD *)(a1 + 1056) = 0u;
  *(void *)(a1 + 1120) = 0x3FF0000000000000;
  *(unsigned char *)(a1 + 1152) = 0;
  *(void *)(a1 + 1144) = 0;
  *(void *)(a1 + 1128) = 0;
  *(void *)(a1 + 1136) = 0;
  *(void *)(a1 + 1160) = 0x3FF0000000000000;
  *(void *)(a1 + 1184) = 0;
  *(void *)(a1 + 1168) = 0;
  *(void *)(a1 + 1176) = 0;
  *(void *)(a1 + 1192) = 0x3FF0000000000000;
  *(void *)(a1 + 1216) = 0;
  *(void *)(a1 + 1208) = 0;
  *(void *)(a1 + 1200) = a1 + 1208;
  *(void *)(a1 + 1232) = 0;
  *(void *)(a1 + 1240) = 0;
  *(void *)(a1 + 1224) = a1 + 1232;
  *(void *)(a1 + 1264) = 0;
  *(void *)(a1 + 1256) = 0;
  *(void *)(a1 + 1248) = a1 + 1256;
  *(unsigned char *)(a1 + 1272) = 0;
  *(_OWORD *)(a1 + 1360) = 0u;
  *(_OWORD *)(a1 + 1344) = 0u;
  *(_OWORD *)(a1 + 1328) = 0u;
  *(_OWORD *)(a1 + 1312) = 0u;
  *(_OWORD *)(a1 + 1296) = 0u;
  *(_OWORD *)(a1 + 1280) = 0u;
  *(_DWORD *)(a1 + 1376) = 1065353216;
  *(_OWORD *)(a1 + 1384) = 0u;
  *(_OWORD *)(a1 + 1400) = 0u;
  *(_DWORD *)(a1 + 1416) = 1065353216;
  *(_OWORD *)(a1 + 1440) = 0u;
  uint64_t v2 = (uint64_t *)(a1 + 1512);
  int v3 = (uint64_t *)(a1 + 1928);
  *(_OWORD *)(a1 + 1424) = 0u;
  *(_DWORD *)(a1 + 1456) = 1065353216;
  *(_OWORD *)(a1 + 1464) = 0u;
  *(_OWORD *)(a1 + 1480) = 0u;
  *(_DWORD *)(a1 + 1496) = 1065353216;
  *(_WORD *)(a1 + 1504) = 0;
  *(unsigned char *)(a1 + 1506) = 0;
  uint64_t v4 = MEMORY[0x1E4FBA468] + 64;
  uint64_t v5 = a1 + 1520;
  *(void *)(a1 + 1928) = MEMORY[0x1E4FBA468] + 64;
  uint64_t v6 = *(void *)(MEMORY[0x1E4FBA400] + 16);
  uint64_t v7 = *(void *)(MEMORY[0x1E4FBA400] + 8);
  *(void *)(a1 + 1512) = v7;
  *(uint64_t *)((char *)v2 + *(void *)(v7 - 24)) = v6;
  double v8 = (std::ios_base *)(a1 + 1512 + *(void *)(*(void *)(a1 + 1512) - 24));
  std::ios_base::init(v8, (void *)(a1 + 1520));
  uint64_t v9 = MEMORY[0x1E4FBA468] + 24;
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  *uint64_t v2 = v9;
  *int v3 = v4;
  MEMORY[0x192FA5D90](v5);
  *(void *)(a1 + 2080) = 0;
  *(_DWORD *)(a1 + 2088) = 0;
  *(unsigned char *)(a1 + 2096) = 0;
  *(unsigned char *)(a1 + 2192) = 0;
  *(unsigned char *)(a1 + 2200) = 0;
  *(unsigned char *)(a1 + 2304) = 0;
  *(unsigned char *)(a1 + 2312) = 0;
  *(unsigned char *)(a1 + 2416) = 0;
  *(unsigned char *)(a1 + 2424) = 1;
  *(void *)(a1 + 2432) = 0x7FF8000000000000;
  *(void *)(a1 + 2440) = 0;
  *(void *)(a1 + 2448) = 0x7FF8000000000000;
  return a1;
}

void sub_18E065EF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, void **a11, void **a12, void *a13, void *a14, void *a15, void **a16)
{
  std::ostream::~ostream();
  MEMORY[0x192FA6190](v20);
  sub_18E06608C(v19);
  sub_18E06608C(v17 + 1216);
  sub_18E06610C(v18);
  sub_18E06610C(v17 + 1136);
  sub_18E012A10(v17 + 1040, *a10);
  sub_18E012A10(v17 + 1016, *a11);
  sub_18E012A10(v17 + 992, *a12);
  *a13 = &unk_1EDD17478;
  *a14 = &unk_1EDD17478;
  *a15 = &unk_1EDD17478;
  sub_18E00CA08(v17);
  uint64_t v22 = *a16;
  if (*a16)
  {
    *(void *)(v16 + 56) = v22;
    operator delete(v22);
  }
  _Unwind_Resume(a1);
}

void sub_18E066000(void *a1)
{
  *a1 = &unk_1EDD17478;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E066030(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E06603C(uint64_t a1)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  sub_18DEF3CF4(a1, v1);
}

uint64_t sub_18E06608C(uint64_t a1)
{
  sub_18E0660C8(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_18E0660C8(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      int v3 = (void *)*v2;
      sub_18E011990((uint64_t)(v2 + 3));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t sub_18E06610C(uint64_t a1)
{
  sub_18E066148(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_18E066148(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      int v3 = (void *)*v2;
      sub_18E06608C((uint64_t)(v2 + 3));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t *sub_18E06618C(uint64_t *a1)
{
  a1[1581] = (uint64_t)&unk_1EDD173E8;
  a1[1489] = (uint64_t)&unk_1EDD172C8;
  a1[1482] = (uint64_t)&unk_1EDD198D8;
  sub_18E066A94(a1 + 1487);
  a1[1482] = (uint64_t)&unk_1EDD17058;
  a1[1476] = (uint64_t)&unk_1EDD198A8;
  sub_18E066E88(a1 + 1481);
  a1[1476] = (uint64_t)&unk_1EDD17028;
  a1[1427] = (uint64_t)&unk_1EDD174A8;
  a1[1421] = (uint64_t)&unk_1EDD198A8;
  sub_18E066E88(a1 + 1426);
  a1[1421] = (uint64_t)&unk_1EDD17028;
  a1[1329] = (uint64_t)&unk_1EDD17478;
  a1[1280] = (uint64_t)&unk_1EDD174A8;
  a1[1101] = (uint64_t)&unk_1EDD16ED8;
  a1[922] = (uint64_t)&unk_1EDD173E8;
  a1[743] = (uint64_t)&unk_1EDD172C8;
  a1[736] = (uint64_t)&unk_1EDD17A18;
  sub_18E066A94(a1 + 741);
  a1[736] = (uint64_t)&unk_1EDD17058;
  a1[730] = (uint64_t)&unk_1EDD179E8;
  sub_18E066E88(a1 + 735);
  a1[730] = (uint64_t)&unk_1EDD17028;
  a1[638] = (uint64_t)&unk_1EDD174A8;
  a1[632] = (uint64_t)&unk_1EDD179E8;
  sub_18E066E88(a1 + 637);
  a1[632] = (uint64_t)&unk_1EDD17028;
  a1[453] = (uint64_t)&unk_1EDD17478;
  a1[361] = (uint64_t)&unk_1EDD174A8;
  a1[8] = (uint64_t)&unk_1EDD16ED8;
  sub_18E067BEC(a1 + 5);
  return a1;
}

void *sub_18E06653C(void *result)
{
  *double result = &unk_1EDD173E8;
  return result;
}

void *sub_18E06655C(void *result)
{
  *double result = &unk_1EDD172C8;
  return result;
}

void *sub_18E06657C(void *a1)
{
  *a1 = &unk_1EDD198D8;
  sub_18E066A94(a1 + 5);
  *a1 = &unk_1EDD17058;
  return a1;
}

void *sub_18E0665E0(void *a1)
{
  *a1 = &unk_1EDD198A8;
  sub_18E066E88(a1 + 5);
  *a1 = &unk_1EDD17028;
  return a1;
}

void *sub_18E066644(void *result)
{
  *double result = &unk_1EDD174A8;
  return result;
}

void *sub_18E066664(void *result)
{
  *double result = &unk_1EDD17478;
  return result;
}

void *sub_18E066684(void *result)
{
  *double result = &unk_1EDD16ED8;
  return result;
}

void *sub_18E0666A4(void *result)
{
  *double result = &unk_1EDD173E8;
  return result;
}

void *sub_18E0666C4(void *result)
{
  *double result = &unk_1EDD172C8;
  return result;
}

void *sub_18E0666E4(void *a1)
{
  *a1 = &unk_1EDD17A18;
  sub_18E066A94(a1 + 5);
  *a1 = &unk_1EDD17058;
  return a1;
}

void *sub_18E066748(void *a1)
{
  *a1 = &unk_1EDD179E8;
  sub_18E066E88(a1 + 5);
  *a1 = &unk_1EDD17028;
  return a1;
}

void *sub_18E0667AC(void *result)
{
  *double result = &unk_1EDD174A8;
  return result;
}

void *sub_18E0667CC(void *result)
{
  *double result = &unk_1EDD17478;
  return result;
}

void *sub_18E0667EC(void *result)
{
  *double result = &unk_1EDD16ED8;
  return result;
}

void sub_18E06680C(void *a1)
{
  *a1 = &unk_1EDD173E8;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E06683C(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E066848(uint64_t a1)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  sub_18DFF2F14(a1, v1);
}

void sub_18E0668A0(void *a1)
{
  *a1 = &unk_1EDD172C8;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E0668D0(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E0668DC(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  unsigned int v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    unsigned int v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      int v4 = *(_DWORD *)(a1 + 16);
      int v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        uint64_t v6 = (v4 - 1);
        uint64_t v7 = 1;
        do
        {
          double v8 = &v13[v7];
          if (!v13[v7])
          {
            uint64_t v9 = *(void *)(*(void *)(a1 + 32) + 8 * v7);
            int v10 = v7;
            do
            {
              int v10 = (int)(v10 * (v3 + v1 - v5)) % (int)v6;
              uint64_t v11 = *(void *)(a1 + 32);
              uint64_t v12 = *(void *)(v11 + 8 * v10);
              *(void *)(v11 + 8 * v10) = v9;
              *double v8 = 1;
              double v8 = &v13[v10];
              uint64_t v9 = v12;
            }
            while (!*v8);
          }
          ++v7;
        }
        while (v7 != v6);
      }
    }
  }
}

void sub_18E0669E0(void *a1)
{
  *a1 = &unk_1EDD198D8;
  sub_18E066A94(a1 + 5);
  *a1 = &unk_1EDD17058;

  JUMPOUT(0x192FA6240);
}

void sub_18E066A64()
{
}

uint64_t *sub_18E066A94(uint64_t *result)
{
  uint64_t v1 = *result;
  *double result = 0;
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 - 8);
    if (v2)
    {
      uint64_t v3 = 112 * v2;
      uint64_t v4 = v1 - 112;
      do
      {
        *(void *)(v4 + v3) = &unk_1EDD17478;
        v3 -= 112;
      }
      while (v3);
    }
    JUMPOUT(0x192FA6220);
  }
  return result;
}

void sub_18E066B00()
{
}

uint64_t *sub_18E066BBC(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *double result = a2;
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 - 8);
    if (v3)
    {
      uint64_t v4 = 112 * v3;
      uint64_t v5 = v2 - 112;
      do
      {
        *(void *)(v5 + v4) = &unk_1EDD17478;
        v4 -= 112;
      }
      while (v4);
    }
    JUMPOUT(0x192FA6220);
  }
  return result;
}

void sub_18E066C20()
{
}

void sub_18E066CA0(_Unwind_Exception *a1)
{
  MEMORY[0x192FA6220](v1, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

void sub_18E066CC4(uint64_t a1, char *a2)
{
  unsigned int v2 = *(_DWORD *)(a1 + 8);
  if (v2 >= 2)
  {
    unsigned int v4 = *(_DWORD *)(a1 + 12);
    if (v4 >= 2)
    {
      int v6 = *(_DWORD *)(a1 + 20);
      bzero(a2, *(unsigned int *)(a1 + 16));
      int v7 = *(_DWORD *)(a1 + 16);
      if (v7 >= 3)
      {
        int v8 = v4 + v2 - v6;
        uint64_t v9 = (v7 - 1);
        uint64_t v10 = 1;
        do
        {
          sub_18DFE2FA8((uint64_t)v15, *(void *)(a1 + 32) + 112 * v10);
          uint64_t v11 = &a2[v10];
          if (!a2[v10])
          {
            int v12 = v10;
            do
            {
              int v12 = v12 * v8 % (int)v9;
              uint64_t v13 = 112 * v12;
              sub_18DFE2FA8((uint64_t)v14, *(void *)(a1 + 32) + v13);
              sub_18DFE2F24(*(void *)(a1 + 32) + v13, (uint64_t)v15);
              *uint64_t v11 = 1;
              sub_18DFE2F24((uint64_t)v15, (uint64_t)v14);
              uint64_t v11 = &a2[v12];
            }
            while (!*v11);
          }
          ++v10;
        }
        while (v10 != v9);
      }
    }
  }
}

void sub_18E066DD4(void *a1)
{
  *a1 = &unk_1EDD198A8;
  sub_18E066E88(a1 + 5);
  *a1 = &unk_1EDD17028;

  JUMPOUT(0x192FA6240);
}

void sub_18E066E58()
{
}

uint64_t *sub_18E066E88(uint64_t *result)
{
  uint64_t v1 = *result;
  *double result = 0;
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 - 8);
    if (v2)
    {
      uint64_t v3 = v2 << 6;
      uint64_t v4 = v1 - 64;
      do
      {
        *(void *)(v4 + v3) = &unk_1EDD17478;
        v3 -= 64;
      }
      while (v3);
    }
    JUMPOUT(0x192FA6220);
  }
  return result;
}

void sub_18E066EF0()
{
}

uint64_t *sub_18E066FB0(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *double result = a2;
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 - 8);
    if (v3)
    {
      uint64_t v4 = v3 << 6;
      uint64_t v5 = v2 - 64;
      do
      {
        *(void *)(v5 + v4) = &unk_1EDD17478;
        v4 -= 64;
      }
      while (v4);
    }
    JUMPOUT(0x192FA6220);
  }
  return result;
}

void sub_18E067010()
{
}

void sub_18E067090(_Unwind_Exception *a1)
{
  MEMORY[0x192FA6220](v1, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

void sub_18E0670B4(uint64_t a1, char *a2)
{
  unsigned int v2 = *(_DWORD *)(a1 + 8);
  if (v2 >= 2)
  {
    unsigned int v4 = *(_DWORD *)(a1 + 12);
    if (v4 >= 2)
    {
      int v6 = *(_DWORD *)(a1 + 20);
      bzero(a2, *(unsigned int *)(a1 + 16));
      int v7 = *(_DWORD *)(a1 + 16);
      if (v7 >= 3)
      {
        int v8 = v4 + v2 - v6;
        uint64_t v9 = (v7 - 1);
        uint64_t v10 = 1;
        do
        {
          sub_18DFF2980((uint64_t)v14, *(void *)(a1 + 32) + (v10 << 6));
          uint64_t v11 = &a2[v10];
          if (!a2[v10])
          {
            int v12 = v10;
            do
            {
              int v12 = v12 * v8 % (int)v9;
              sub_18DFF2980((uint64_t)v13, *(void *)(a1 + 32) + ((uint64_t)v12 << 6));
              sub_18DFE2F24(*(void *)(a1 + 32) + ((uint64_t)v12 << 6), (uint64_t)v14);
              *uint64_t v11 = 1;
              sub_18DFE2F24((uint64_t)v14, (uint64_t)v13);
              uint64_t v11 = &a2[v12];
            }
            while (!*v11);
          }
          ++v10;
        }
        while (v10 != v9);
      }
    }
  }
}

void sub_18E0671BC(void *a1)
{
  *a1 = &unk_1EDD174A8;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E0671EC(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E0671F8(uint64_t a1)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  sub_18DFE2870(a1, v1);
}

void sub_18E067248(void *a1)
{
  *a1 = &unk_1EDD17478;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E067278(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E067284(uint64_t a1)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  sub_18DEF3CF4(a1, v1);
}

void sub_18E0672D4(void *a1)
{
  *a1 = &unk_1EDD16ED8;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E067304(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E067310(uint64_t a1)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  sub_18E067368(a1, v1);
}

void sub_18E067368(uint64_t a1, char *a2)
{
  unsigned int v2 = *(_DWORD *)(a1 + 8);
  if (v2 >= 2)
  {
    unsigned int v4 = *(_DWORD *)(a1 + 12);
    if (v4 >= 2)
    {
      int v6 = *(_DWORD *)(a1 + 20);
      bzero(a2, *(unsigned int *)(a1 + 16));
      int v7 = *(_DWORD *)(a1 + 16);
      if (v7 >= 3)
      {
        uint64_t v8 = (v7 - 1);
        uint64_t v9 = 1;
        do
        {
          long long v14 = *(_OWORD *)(*(void *)(a1 + 32) + 16 * v9);
          uint64_t v10 = &a2[v9];
          if (!a2[v9])
          {
            int v11 = v9;
            do
            {
              int v11 = (int)(v11 * (v4 + v2 - v6)) % (int)v8;
              uint64_t v12 = *(void *)(a1 + 32);
              long long v13 = *(_OWORD *)(v12 + 16 * v11);
              *(_OWORD *)(v12 + 16 * v11) = v14;
              *uint64_t v10 = 1;
              long long v14 = v13;
              uint64_t v10 = &a2[v11];
            }
            while (!*v10);
          }
          ++v9;
        }
        while (v9 != v8);
      }
    }
  }
}

void sub_18E067440(void *a1)
{
  *a1 = &unk_1EDD173E8;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E067470(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E06747C(uint64_t a1)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  sub_18DFF2F14(a1, v1);
}

void sub_18E0674CC(void *a1)
{
  *a1 = &unk_1EDD172C8;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E0674FC(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E067508(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  unsigned int v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    unsigned int v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      int v4 = *(_DWORD *)(a1 + 16);
      int v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        uint64_t v6 = (v4 - 1);
        uint64_t v7 = 1;
        do
        {
          uint64_t v8 = &v13[v7];
          if (!v13[v7])
          {
            uint64_t v9 = *(void *)(*(void *)(a1 + 32) + 8 * v7);
            int v10 = v7;
            do
            {
              int v10 = (int)(v10 * (v3 + v1 - v5)) % (int)v6;
              uint64_t v11 = *(void *)(a1 + 32);
              uint64_t v12 = *(void *)(v11 + 8 * v10);
              *(void *)(v11 + 8 * v10) = v9;
              *uint64_t v8 = 1;
              uint64_t v8 = &v13[v10];
              uint64_t v9 = v12;
            }
            while (!*v8);
          }
          ++v7;
        }
        while (v7 != v6);
      }
    }
  }
}

void sub_18E06760C(void *a1)
{
  *a1 = &unk_1EDD17A18;
  sub_18E066A94(a1 + 5);
  *a1 = &unk_1EDD17058;

  JUMPOUT(0x192FA6240);
}

void sub_18E067690()
{
}

void sub_18E0676C0()
{
}

void sub_18E06777C()
{
}

void sub_18E067804(_Unwind_Exception *a1)
{
  MEMORY[0x192FA6220](v1, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

void sub_18E067828(void *a1)
{
  *a1 = &unk_1EDD179E8;
  sub_18E066E88(a1 + 5);
  *a1 = &unk_1EDD17028;

  JUMPOUT(0x192FA6240);
}

void sub_18E0678AC()
{
}

void sub_18E0678DC()
{
}

void sub_18E06799C()
{
}

void sub_18E067A24(_Unwind_Exception *a1)
{
  MEMORY[0x192FA6220](v1, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

void sub_18E067A48(void *a1)
{
  *a1 = &unk_1EDD174A8;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E067A78(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E067A84(uint64_t a1)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  sub_18DFE2870(a1, v1);
}

void sub_18E067AD4(void *a1)
{
  *a1 = &unk_1EDD17478;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E067B04(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E067B10(uint64_t a1)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  sub_18DEF3CF4(a1, v1);
}

void sub_18E067B60(void *a1)
{
  *a1 = &unk_1EDD16ED8;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E067B90(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E067B9C(uint64_t a1)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  sub_18E067368(a1, v1);
}

void sub_18E067BEC(void *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    unsigned int v3 = (void *)a1[1];
    int v4 = (void *)*v3;
    v4[1] = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        int v5 = (void *)v3[1];
        sub_18E067C60((uint64_t (**)(void, void, void, void, void))v3 + 2);
        operator delete(v3);
        unsigned int v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

uint64_t (**sub_18E067C60(uint64_t (**result)(void, void, void, void, void)))(void, void, void, void, void)
{
  if (*result) {
    return (uint64_t (**)(void, void, void, void, void))(*result)(0, result, 0, 0, 0);
  }
  return result;
}

void sub_18E067C98(void *a1)
{
  uint64_t v1 = 2100;
  do
  {
    a1[v1] = &unk_1EDD0A3C0;
    v1 -= 6;
  }
  while (v1 * 8);
  *a1 = &unk_1EDD0A6C8;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E067CF4(uint64_t a1, uint64_t a2)
{
  if (!*(_DWORD *)(a1 + 8)) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = 0;
  uint64_t v4 = a1 + 48 * *(unsigned int *)(a1 + 40);
  long long v5 = *(_OWORD *)(v4 + 56);
  long long v6 = *(_OWORD *)(v4 + 72);
  *(void *)(a2 + 40) = *(void *)(v4 + 88);
  *(_OWORD *)(a2 + 24) = v6;
  *(_OWORD *)(a2 + 8) = v5;
  return result;
}

uint64_t sub_18E067D34(uint64_t a1, uint64_t a2)
{
  if (!*(_DWORD *)(a1 + 8)) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = 0;
  uint64_t v4 = a1 + 48 * *(unsigned int *)(a1 + 44);
  long long v5 = *(_OWORD *)(v4 + 56);
  long long v6 = *(_OWORD *)(v4 + 72);
  *(void *)(a2 + 40) = *(void *)(v4 + 88);
  *(_OWORD *)(a2 + 24) = v6;
  *(_OWORD *)(a2 + 8) = v5;
  return result;
}

void sub_18E067D7C(void *a1)
{
  uint64_t v1 = 2100;
  do
  {
    a1[v1] = &unk_1EDD0A3F0;
    v1 -= 6;
  }
  while (v1 * 8);
  *a1 = &unk_1EDD0A710;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E067DD8(uint64_t a1, uint64_t a2)
{
  if (!*(_DWORD *)(a1 + 8)) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = 0;
  uint64_t v4 = a1 + 48 * *(unsigned int *)(a1 + 40);
  long long v5 = *(_OWORD *)(v4 + 56);
  long long v6 = *(_OWORD *)(v4 + 72);
  *(void *)(a2 + 40) = *(void *)(v4 + 88);
  *(_OWORD *)(a2 + 24) = v6;
  *(_OWORD *)(a2 + 8) = v5;
  return result;
}

uint64_t sub_18E067E18(uint64_t a1, uint64_t a2)
{
  if (!*(_DWORD *)(a1 + 8)) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = 0;
  uint64_t v4 = a1 + 48 * *(unsigned int *)(a1 + 44);
  long long v5 = *(_OWORD *)(v4 + 56);
  long long v6 = *(_OWORD *)(v4 + 72);
  *(void *)(a2 + 40) = *(void *)(v4 + 88);
  *(_OWORD *)(a2 + 24) = v6;
  *(_OWORD *)(a2 + 8) = v5;
  return result;
}

uint64_t sub_18E067E60(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 2416)) {
    *(void *)(a1 + 2312) = &unk_1EDD17478;
  }
  if (*(unsigned char *)(a1 + 2304)) {
    *(void *)(a1 + 2200) = &unk_1EDD17478;
  }
  uint64_t v2 = MEMORY[0x1E4FBA400];
  uint64_t v3 = *MEMORY[0x1E4FBA400];
  *(void *)(a1 + 1512) = *MEMORY[0x1E4FBA400];
  *(void *)(a1 + 1512 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  MEMORY[0x192FA5DA0](a1 + 1520);
  std::ostream::~ostream();
  MEMORY[0x192FA6190](a1 + 1928);
  sub_18E06608C(a1 + 1464);
  sub_18E06608C(a1 + 1424);
  sub_18E06610C(a1 + 1384);
  sub_18E06610C(a1 + 1344);
  sub_18E012A10(a1 + 1248, *(void **)(a1 + 1256));
  sub_18E012A10(a1 + 1224, *(void **)(a1 + 1232));
  sub_18E012A10(a1 + 1200, *(void **)(a1 + 1208));
  *(void *)(a1 + 912) = &unk_1EDD17478;
  *(void *)(a1 + 360) = &unk_1EDD17478;
  *(void *)(a1 + 256) = &unk_1EDD17478;
  if (*(char *)(a1 + 255) < 0) {
    operator delete(*(void **)(a1 + 232));
  }
  if (*(char *)(a1 + 231) < 0) {
    operator delete(*(void **)(a1 + 208));
  }
  uint64_t v4 = *(void **)(a1 + 48);
  if (v4)
  {
    *(void *)(a1 + 56) = v4;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_18E06805C(void *a1)
{
  *a1 = &unk_1EDD0A798;
  sub_18E06B400(a1 + 199);
  a1[171] = &unk_1EDD17478;
  sub_18E0683EC(a1 + 165);

  return sub_18E068100((uint64_t)a1);
}

void *sub_18E0680DC(void *result)
{
  *uint64_t result = &unk_1EDD17478;
  return result;
}

uint64_t sub_18E068100(uint64_t a1)
{
  *(void *)a1 = &unk_1EDD0A548;
  if (*(char *)(a1 + 1319) < 0) {
    operator delete(*(void **)(a1 + 1296));
  }
  if (*(char *)(a1 + 1295) < 0) {
    operator delete(*(void **)(a1 + 1272));
  }
  uint64_t v3 = (void **)(a1 + 1248);
  sub_18E0694B8(&v3);
  uint64_t v3 = (void **)(a1 + 1224);
  sub_18E0694B8(&v3);
  uint64_t v3 = (void **)(a1 + 1200);
  sub_18E0694B8(&v3);
  *(void *)(a1 + 848) = &unk_1EDD17478;
  sub_18E06B5D4((void *)(a1 + 800));
  *(void *)(a1 + 552) = &unk_1EDD17478;
  *(void *)(a1 + 304) = &unk_1EDD17478;
  sub_18E06B5D4((void *)(a1 + 256));
  *(void *)(a1 + 8) = &unk_1EDD17478;
  return a1;
}

void sub_18E068228(void *a1)
{
  sub_18E06805C(a1);

  JUMPOUT(0x192FA6240);
}

double sub_18E068260@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 24) = 0x10000001ALL;
  *(void *)a2 = &unk_1EDD186A8;
  *(_OWORD *)(a2 + 8) = xmmword_18E1FD600;
  *(void *)(a2 + 32) = a2 + 40;
  if (*(_DWORD *)(a1 + 1108)) {
    uint64_t v2 = a1 + 848;
  }
  else {
    uint64_t v2 = a1 + 304;
  }
  *(void *)&double result = sub_18DFE2F24(a2, v2).n128_u64[0];
  return result;
}

void sub_18E0682B8(void *a1)
{
  *a1 = &unk_1EDD17478;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E0682E8(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E0682F4(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  unsigned int v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    unsigned int v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      int v4 = *(_DWORD *)(a1 + 16);
      int v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        uint64_t v6 = (v4 - 1);
        uint64_t v7 = *(void *)(a1 + 32);
        uint64_t v8 = 1;
        do
        {
          uint64_t v9 = &v13[v8];
          if (!v13[v8])
          {
            uint64_t v10 = *(void *)(v7 + 8 * v8);
            int v11 = v8;
            do
            {
              int v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              uint64_t v12 = *(void *)(v7 + 8 * v11);
              *(void *)(v7 + 8 * v11) = v10;
              *uint64_t v9 = 1;
              uint64_t v9 = &v13[v11];
              uint64_t v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

void *sub_18E0683EC(void *a1)
{
  *a1 = &unk_1EDD185B8;
  uint64_t v2 = a1[5];
  a1[5] = 0;
  if (v2) {
    MEMORY[0x192FA6220](v2, 0x1000C8000313F17);
  }
  *a1 = &unk_1EDD17478;
  return a1;
}

void sub_18E068468(void *a1)
{
  sub_18E0683EC(a1);

  JUMPOUT(0x192FA6240);
}

void sub_18E0684A0()
{
}

void sub_18E0684D0()
{
}

void sub_18E06854C()
{
}

void sub_18E0685C4(uint64_t a1)
{
  sub_18E068100(a1);

  JUMPOUT(0x192FA6240);
}

void sub_18E0685FC(void *a1)
{
  *a1 = &unk_1EDD17478;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E06862C(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E068638(uint64_t a1)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  sub_18DEF3CF4(a1, v1);
}

void sub_18E068688(void ***a1)
{
  unsigned int v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    unsigned int v3 = (char *)v1[1];
    if (v3 != v2)
    {
      int v4 = v3 - 2320;
      int v5 = v3 - 5440;
      do
      {
        *(void *)int v4 = &unk_1EDD17478;
        *((void *)v4 - 366) = &unk_1EDD17478;
        *((void *)v4 - 390) = &unk_1EDD17478;
        uint64_t v6 = v4 - 3136;
        v4 -= 5456;
        v5 -= 5456;
      }
      while (v6 != v2);
    }
    v1[1] = v2;
    operator delete(v2);
  }
}

uint64_t sub_18E068734(uint64_t a1)
{
  *(void *)a1 = &unk_1EDD0A4E8;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void sub_18E068784(uint64_t a1)
{
  *(void *)a1 = &unk_1EDD0A4E8;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }

  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E0687F4(uint64_t a1)
{
  *(void *)a1 = &unk_1EDD0A4E8;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void sub_18E068844(uint64_t a1)
{
  *(void *)a1 = &unk_1EDD0A4E8;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }

  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E0688C4(uint64_t a1)
{
  *(void *)a1 = &unk_1EDD0A588;
  if (*(char *)(a1 + 1751) < 0) {
    operator delete(*(void **)(a1 + 1728));
  }
  if (*(char *)(a1 + 1727) < 0) {
    operator delete(*(void **)(a1 + 1704));
  }
  unsigned int v3 = (void **)(a1 + 1680);
  sub_18E0694B8(&v3);
  unsigned int v3 = (void **)(a1 + 1656);
  sub_18E0694B8(&v3);
  unsigned int v3 = (void **)(a1 + 1632);
  sub_18E0694B8(&v3);
  *(void *)(a1 + 1424) = &unk_1EDD17478;
  *(void *)(a1 + 872) = &unk_1EDD17478;
  *(void *)(a1 + 768) = &unk_1EDD17478;
  *(void *)(a1 + 664) = &unk_1EDD17478;
  *(void *)(a1 + 112) = &unk_1EDD17478;
  *(void *)(a1 + 8) = &unk_1EDD17478;
  return a1;
}

void sub_18E068A1C(void *a1)
{
  *a1 = &unk_1EDD0A7D8;
  a1[301] = &unk_1EDD17478;
  a1[288] = &unk_1EDD17478;
  a1[219] = &unk_1EDD17478;
  sub_18E0688C4((uint64_t)a1);

  JUMPOUT(0x192FA6240);
}

double sub_18E068AD0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 24) = 0x100000008;
  *(void *)a2 = &unk_1EDD19CC8;
  *(_OWORD *)(a2 + 8) = xmmword_18E1FD760;
  *(void *)(a2 + 32) = a2 + 40;
  if (*(_DWORD *)(a1 + 1540)) {
    uint64_t v2 = a1 + 1424;
  }
  else {
    uint64_t v2 = a1 + 664;
  }
  *(void *)&double result = sub_18DFE2F24(a2, v2).n128_u64[0];
  return result;
}

double sub_18E068B28@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 24) = 0x800000008;
  *(void *)a2 = &unk_1EDD19DE8;
  *(_OWORD *)(a2 + 8) = xmmword_18E1FD750;
  *(void *)(a2 + 32) = a2 + 40;
  if (*(_DWORD *)(a1 + 1540)) {
    uint64_t v2 = a1 + 872;
  }
  else {
    uint64_t v2 = a1 + 112;
  }
  *(void *)&double result = sub_18DFE2F24(a2, v2).n128_u64[0];
  return result;
}

void sub_18E068B80(uint64_t a1)
{
  sub_18E0688C4(a1);

  JUMPOUT(0x192FA6240);
}

char *sub_18E068BB8(void *a1, unint64_t a2)
{
  if (a2 >= 0xC0300C0300C04) {
    sub_18DEE1FC8();
  }
  double result = (char *)sub_18E0653F8((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[5456 * v4];
  return result;
}

_OWORD *sub_18E068C10(uint64_t a1, _OWORD *a2, _OWORD *a3, _OWORD *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  int v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      sub_18E065504(v4, v6);
      v6 += 341;
      uint64_t v4 = v11 + 341;
      v11 += 341;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  sub_18E068CB8((uint64_t)v8);
  return v4;
}

void sub_18E068CA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_18E068CB8(uint64_t result)
{
  if (!*(unsigned char *)(result + 24))
  {
    unsigned int v1 = **(void ***)(result + 8);
    uint64_t v2 = **(void ***)(result + 16);
    if (v2 != v1)
    {
      unsigned int v3 = v2 - 290;
      uint64_t v4 = v2 - 680;
      do
      {
        *unsigned int v3 = &unk_1EDD17478;
        *(v3 - 366) = &unk_1EDD17478;
        *(v3 - 390) = &unk_1EDD17478;
        int v5 = v3 - 392;
        v3 -= 682;
        v4 -= 682;
      }
      while (v5 != v1);
    }
  }
  return result;
}

_OWORD *sub_18E068D60(_OWORD *a1, _OWORD *a2, _OWORD *a3)
{
  if (a1 != a2)
  {
    int v5 = a1;
    do
    {
      *a3 = *v5;
      sub_18DFE2F24((uint64_t)(a3 + 1), (uint64_t)(v5 + 1));
      sub_18DFE2F24((uint64_t)(a3 + 13), (uint64_t)(v5 + 13));
      sub_18DFE2F24((uint64_t)(a3 + 196), (uint64_t)(v5 + 196));
      a3 += 341;
      v5 += 341;
    }
    while (v5 != a2);
  }
  return a3;
}

void sub_18E068DDC(uint64_t a1)
{
  *(void *)a1 = &unk_1EDD14600;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 560);
  if (v2) {
    sub_18DEE4E18(v2);
  }
  *(void *)(a1 + 296) = &unk_1EDD0AE58;
  if (*(char *)(a1 + 327) < 0) {
    operator delete(*(void **)(a1 + 304));
  }
  *(void *)(a1 + 296) = &unk_1EDD0A9B8;
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  *(void *)a1 = &unk_1EDD0A4E8;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }

  JUMPOUT(0x192FA6240);
}

void *sub_18E068ED0(void *result)
{
  if (result[2])
  {
    unsigned int v1 = result;
    double result = (void *)result[1];
    uint64_t v2 = *v1;
    uint64_t v3 = *result;
    *(void *)(v3 + 8) = *(void *)(*v1 + 8);
    **(void **)(v2 + 8) = v3;
    char v1[2] = 0;
    if (result != v1)
    {
      do
      {
        uint64_t v4 = (void *)result[1];
        operator delete(result);
        double result = v4;
      }
      while (v4 != v1);
    }
  }
  return result;
}

void sub_18E068F34(uint64_t a1)
{
  *(void *)(a1 + 96) = &unk_1EDD17478;
  *(void *)a1 = &unk_1EDD0A4E8;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }

  JUMPOUT(0x192FA6240);
}

void sub_18E068FC4(uint64_t a1)
{
  *(void *)(a1 + 96) = &unk_1EDD0A3C0;
  *(void *)a1 = &unk_1EDD0A4E8;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }

  JUMPOUT(0x192FA6240);
}

void sub_18E069054()
{
  exception = __cxa_allocate_exception(8uLL);
  void *exception = MEMORY[0x1E4FBA4F0] + 16;
  __cxa_throw(exception, MEMORY[0x1E4FBA340], (void (*)(void *))std::exception::~exception);
}

uint64_t sub_18E0690A4(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 144);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))*(&off_1EDD1E7D8 + v2))(&v4, a1);
  }
  *(_DWORD *)(a1 + 144) = -1;
  return a1;
}

void sub_18E069100(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 96) = &unk_1EDD0A3C0;
  *(void *)a2 = &unk_1EDD0A4E8;
  if (*(char *)(a2 + 39) < 0) {
    operator delete(*(void **)(a2 + 16));
  }
}

void sub_18E069150(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EDD0A4E8;
  if (*(char *)(a2 + 39) < 0) {
    operator delete(*(void **)(a2 + 16));
  }
}

uint64_t *sub_18E069180(uint64_t *a1, char *__s, size_t a3, unsigned __int8 a4, unsigned __int8 a5)
{
  *a1 = 0;
  size_t v10 = strlen(__s);
  if (v10 >= a3) {
    unint64_t v11 = a3;
  }
  else {
    unint64_t v11 = v10;
  }
  sub_18E0691EC(a1, (unsigned __int8 *)__s, v11, a4, a5);
  return a1;
}

void sub_18E0691EC(uint64_t *a1, unsigned __int8 *a2, unint64_t a3, unsigned __int8 a4, unsigned __int8 a5)
{
  if (a3)
  {
    unint64_t v5 = a3;
    uint64_t v6 = a2;
    do
    {
      int v8 = *v6++;
      int v7 = v8;
      if (v8 != a4 && v7 != a5) {
        sub_18E0692AC("bitset string ctor has invalid argument");
      }
      --v5;
    }
    while (v5);
  }
  uint64_t v10 = 14;
  if (a3 < 0xE) {
    uint64_t v10 = a3;
  }
  if (!v10) {
    goto LABEL_17;
  }
  char v11 = 0;
  uint64_t v12 = *a1;
  uint64_t v13 = v10;
  do
  {
    uint64_t v14 = v12 & ~(1 << v11);
    v12 |= 1 << v11;
    if (a2[v13 - 1] != a5) {
      uint64_t v12 = v14;
    }
    *a1 = v12;
    ++v11;
    --v13;
  }
  while (v13);
  if (a3 <= 0xD)
  {
LABEL_17:
    long long v15 = a1;
    int v16 = v10;
    sub_18E06933C((uint64_t)&v15, 14 - v10);
  }
}

void sub_18E0692AC(const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_18E069308(exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E55B9790, MEMORY[0x1E4FBA1E8]);
}

void sub_18E0692F4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_18E069308(std::logic_error *a1, const char *a2)
{
  double result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
  return result;
}

void sub_18E06933C(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2;
  int v4 = *(_DWORD *)(a1 + 8);
  unint64_t v5 = *(void **)a1;
  if (v4)
  {
    if ((64 - v4) >= a2) {
      unint64_t v6 = a2;
    }
    else {
      unint64_t v6 = (64 - v4);
    }
    *v5++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4));
    unint64_t v2 = a2 - v6;
    *(void *)a1 = v5;
  }
  unint64_t v7 = v2 >> 6;
  if (v2 >= 0x40) {
    bzero(v5, 8 * v7);
  }
  if ((v2 & 0x3F) != 0)
  {
    int v8 = &v5[v7];
    *(void *)a1 = v8;
    *v8 &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F));
  }
}

uint64_t sub_18E0693EC(void *a1, unsigned int a2, uint64_t a3, unsigned int a4, void *a5)
{
  int64_t v5 = a4 - (unint64_t)a2 + 8 * (a3 - (void)a1);
  if (v5 >= 1)
  {
    if (a2)
    {
      if (v5 >= (unint64_t)(64 - a2)) {
        unint64_t v6 = 64 - a2;
      }
      else {
        unint64_t v6 = a4 - (unint64_t)a2 + 8 * (a3 - (void)a1);
      }
      if (((0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v6)) & (-1 << a2) & (*a1 ^ *a5)) != 0) {
        return 0;
      }
      v5 -= v6;
      ++a5;
      ++a1;
    }
    if (v5 >= 64)
    {
      while (*a5 == *a1)
      {
        uint64_t v7 = v5 - 64;
        ++a1;
        ++a5;
        BOOL v8 = v5 <= 127;
        v5 -= 64;
        if (v8) {
          goto LABEL_14;
        }
      }
      return 0;
    }
    uint64_t v7 = v5;
LABEL_14:
    if (v7 >= 1 && (*a1 ^ *a5) << -(char)v7) {
      return 0;
    }
  }
  return 1;
}

void sub_18E0694B8(void ***a1)
{
  unint64_t v2 = *a1;
  if (*v2)
  {
    sub_18E06950C((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_18E06950C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 32)
  {
    if (*(char *)(i - 1) < 0) {
      operator delete(*(void **)(i - 24));
    }
  }
  a1[1] = v2;
}

uint64_t sub_18E06955C(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 + 44440);
  uint64_t v3 = (unsigned char *)(a1 + 22104);
  int v4 = (unsigned char *)(a1 + 19432);
  *(void *)a1 = &unk_1EDD13E28;
  sub_18E06618C((uint64_t *)(a1 + 61288));
  uint64_t v5 = -16800;
  uint64_t v6 = 61240;
  do
  {
    *(void *)(a1 + v6) = &unk_1EDD0A3C0;
    v6 -= 48;
    v5 += 48;
  }
  while (v5);
  *uint64_t v2 = &unk_1EDD0A6C8;
  do
  {
    *(void *)(a1 + 16800 + v5 + 27592) = &unk_1EDD0A3F0;
    v5 -= 48;
  }
  while (v5 != -16800);
  *(void *)(a1 + 27592) = &unk_1EDD0A710;
  *(void *)(a1 + 24864) = &unk_1EDD0B168;
  *(void *)(a1 + 27432) = &unk_1EDD0A858;
  *(void *)(a1 + 24856) = &unk_1EDD0A858;
  *(void *)(a1 + 22128) = &unk_1EDD0B168;
  *(void *)(a1 + 24696) = &unk_1EDD0A858;
  if (*v3) {
    *uint64_t v3 = 0;
  }
  if (v4[232]) {
    v4[232] = 0;
  }
  if (*v4) {
    *int v4 = 0;
  }
  *(void *)(a1 + 19360) = &unk_1EDD0A6A8;
  sub_18E067E60(a1 + 16800);
  sub_18E06B7A8(a1 + 16776, *(void **)(a1 + 16784));
  sub_18E06805C((void *)(a1 + 15032));
  sub_18E06B384((void *)(a1 + 14880));
  *(void *)(a1 + 14616) = &unk_1EDD17478;
  *(void *)(a1 + 8648) = &unk_1EDD14C50;
  BOOL v8 = (void **)(a1 + 14568);
  sub_18E068688(&v8);
  *(void *)(a1 + 8648) = &unk_1EDD0B1B0;
  *(void *)(a1 + 12248) = &unk_1EDD17478;
  *(void *)(a1 + 9320) = &unk_1EDD17478;
  *(void *)(a1 + 9128) = &unk_1EDD17478;
  *(void *)(a1 + 8904) = &unk_1EDD17478;
  *(void *)(a1 + 8712) = &unk_1EDD17478;
  *(void *)(a1 + 2696) = &unk_1EDD14C50;
  BOOL v8 = (void **)(a1 + 8616);
  sub_18E068688(&v8);
  *(void *)(a1 + 2696) = &unk_1EDD0B1B0;
  *(void *)(a1 + 6296) = &unk_1EDD17478;
  *(void *)(a1 + 3368) = &unk_1EDD17478;
  *(void *)(a1 + 3176) = &unk_1EDD17478;
  *(void *)(a1 + 2952) = &unk_1EDD17478;
  *(void *)(a1 + 2760) = &unk_1EDD17478;
  return sub_18E0268B0(a1);
}

void sub_18E0699DC(void *a1)
{
  *a1 = &unk_1EDD17478;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E069A0C(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E069A18(uint64_t a1)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  sub_18DEF3CF4(a1, v1);
}

void sub_18E069A68(uint64_t a1)
{
  *(void *)(a1 + 24) = 0x1C0000001CLL;
  *(void *)a1 = &unk_1EDD18978;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 8) = xmmword_18E1FD920;
  sub_18E069B7C();
}

void sub_18E069ACC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = v1[5];
  v1[5] = 0;
  if (v3) {
    MEMORY[0x192FA6220](v3, 0x1000C8000313F17);
  }
  *unsigned int v1 = &unk_1EDD17478;
  _Unwind_Resume(exception_object);
}

void sub_18E069B14(void *a1)
{
  sub_18E06B384(a1);

  JUMPOUT(0x192FA6240);
}

void sub_18E069B4C()
{
}

void sub_18E069B7C()
{
}

void sub_18E069BF8()
{
}

void sub_18E069C6C(uint64_t a1)
{
  *(void *)(a1 + 24) = 0x1A00000017;
  *(void *)a1 = &unk_1EDD185B8;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 8) = xmmword_18E1FD930;
  sub_18E0684D0();
}

void sub_18E069CD4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = v1[5];
  v1[5] = 0;
  if (v3) {
    MEMORY[0x192FA6220](v3, 0x1000C8000313F17);
  }
  *unsigned int v1 = &unk_1EDD17478;
  _Unwind_Resume(exception_object);
}

void sub_18E069D1C(void *a1)
{
  *a1 = &unk_1EDD17478;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E069D4C(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E069D58(uint64_t a1)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  sub_18DEF3CF4(a1, v1);
}

void sub_18E069DA8(void *a1)
{
  *a1 = &unk_1EDD0A6A8;
  JUMPOUT(0x192FA6240);
}

void sub_18E069DD8(void *a1)
{
  a1[1] = &unk_1EDD0B168;
  a1[322] = &unk_1EDD0A858;
  *a1 = &unk_1EDD0A858;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E069E48(uint64_t a1)
{
  return sub_18E069F6C(a1);
}

uint64_t sub_18E069EA8(uint64_t a1)
{
  return sub_18E069F6C(a1);
}

uint64_t sub_18E069EDC(uint64_t a1)
{
  return sub_18E069F6C(a1);
}

uint64_t sub_18E069EF4(uint64_t a1)
{
  return sub_18E069F6C(a1);
}

uint64_t sub_18E069F2C(uint64_t a1)
{
  return sub_18E069F6C(a1);
}

uint64_t sub_18E069F64(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t sub_18E069F6C(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1F4188790](a1);
  v263[11] = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)(v1 + 16)) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v8 = (uint64_t)v7;
  char v9 = v6;
  uint64_t v10 = v5;
  int v11 = v4;
  uint64_t v12 = v2;
  uint64_t v13 = v1;
  if (*(_DWORD *)(v1 + 2568) == 1)
  {
    uint64_t v14 = v1 + 2576;
    if (v3 & 1) != 0 || (v4)
    {
      if (v4)
      {
        int v15 = 1;
        int v16 = 1;
      }
      else
      {
        uint64_t v7 = v247;
        int v15 = 1;
        int v16 = 0;
      }
    }
    else
    {
      uint64_t v6 = (double *)v244;
      uint64_t v7 = v247;
      int v15 = 0;
      int v16 = 0;
    }
    uint64_t result = cnnavigation::LinearizedGravityModel::ComputeLinearizedGravityModel(v14, v2, v15, v16, v5, v6, (uint64_t)v7);
    if (!result) {
      return result;
    }
    int v3 = 1;
    int v11 = 1;
  }
  double v18 = *v12;
  double v19 = v12[1];
  double v20 = v12[2];
  double v21 = sqrt(v19 * v19 + v18 * v18 + v20 * v20);
  if (v21 <= 0.00000001) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v22 = *(unsigned int *)(v13 + 2728);
  double v23 = v18 / v21;
  v263[0] = 0x3FF0000000000000;
  *(double *)&v263[1] = v23;
  double v24 = v19 / v21;
  v262[0] = 0;
  *(double *)&v262[1] = v24;
  int v25 = v3 | v11;
  if (v3 | v11)
  {
    v261[0] = xmmword_18E1FD940;
    v260[0] = 0u;
    v259[0] = 0u;
    v258[0] = xmmword_18E1FD940;
  }
  if (v11)
  {
    v257[1] = 0;
    v257[0] = 0;
    v256[1] = 0;
    v256[0] = 0;
    v255[1] = 0;
    v255[0] = 0;
    v254[1] = 0;
    v254[0] = 0;
    v253[1] = 0;
    v253[0] = 0;
    v252[0] = 0;
    uint64_t v251 = 0;
  }
  double v26 = v20 / v21;
  if ((int)v22 >= 2)
  {
    unint64_t v27 = 0;
    double v28 = -v24;
    double v29 = v24;
    double v30 = v23;
    do
    {
      double v31 = v29 * v28 + v23 * v30;
      *(double *)&v263[v27 / 8 + 2] = v31;
      double v29 = v24 * v30 + v23 * v29;
      *(double *)&v262[v27 / 8 + 2] = v29;
      if (v25)
      {
        double v32 = *(double *)((char *)v261 + v27 + 8);
        double v33 = *(double *)((char *)v259 + v27 + 8);
        *(double *)((char *)&v261[1] + v27) = v30 + v23 * v32 + v28 * v33;
        double v34 = *(double *)((char *)v260 + v27 + 8);
        double v35 = *(double *)((char *)v258 + v27 + 8);
        double v36 = *(double *)&v262[v27 / 8 + 1];
        *(double *)((char *)&v260[1] + v27) = v35 * v28 + v23 * v34 - v36;
        *(double *)((char *)&v259[1] + v27) = v36 + v23 * v33 + v24 * v32;
        *(double *)((char *)&v258[1] + v27) = v30 + v24 * v34 + v23 * v35;
      }
      if (v11)
      {
        double v37 = *(double *)&v257[v27 / 8 + 1];
        double v38 = *(double *)((char *)v261 + v27 + 8);
        double v39 = *(double *)&v254[v27 / 8 + 1];
        *(double *)&v257[v27 / 8 + 2] = v38 + v38 + v23 * v37 + v28 * v39;
        double v40 = *(double *)&v256[v27 / 8 + 1];
        double v41 = *(double *)((char *)v260 + v27 + 8);
        double v42 = *(double *)&v253[v27 / 8 + 1];
        double v43 = *(double *)((char *)v259 + v27 + 8);
        *(double *)&v256[v27 / 8 + 2] = v41 + v23 * v40 + v28 * v42 - v43;
        double v44 = *(double *)&v255[v27 / 8 + 1];
        double v45 = *(double *)&v252[v27 / 8];
        double v46 = *(double *)((char *)v258 + v27 + 8);
        *(double *)&v255[v27 / 8 + 2] = v45 * v28 + v23 * v44 + v46 * -2.0;
        *(double *)&v254[v27 / 8 + 2] = v43 + v43 + v23 * v39 + v24 * v37;
        *(double *)&v253[v27 / 8 + 2] = v38 + v46 + v23 * v42 + v24 * v40;
        *(double *)&v252[v27 / 8 + 1] = v24 * v44 + v23 * v45 + v41 * 2.0;
      }
      v27 += 8;
      double v30 = v31;
    }
    while (8 * v22 - 8 != v27);
  }
  double v48 = *(double *)(v13 + 24);
  double v47 = *(double *)(v13 + 32);
  v248[11] = 1.22474487;
  v248[10] = v26 * 1.73205081;
  if (v25) {
    v245[5] = xmmword_18E1FD950;
  }
  if (v11)
  {
    v242[11] = 0;
    v242[10] = 0;
  }
  uint64_t v185 = v10;
  uint64_t v186 = v12;
  double v187 = v9;
  double v49 = 1.0 / v21;
  if ((int)v22 >= 2)
  {
    int v50 = 0;
    uint64_t v51 = 0;
    uint64_t v52 = v243;
    float64x2_t v53 = v246;
    float64x2_t v54 = (double *)&v250;
    uint64_t v55 = 2;
    do
    {
      double v56 = (double)(int)v55 + (double)(int)v55;
      double v57 = sqrt(1.0 / v56 + 1.0);
      double v58 = sqrt(v56);
      uint64_t v59 = v55 - 1;
      int8x16_t v60 = &v247[88 * v55];
      int8x16_t v61 = (double *)&v60[8 * v55 - 8];
      double v62 = *(v61 - 11) * v57;
      *(double *)&v60[8 * v55] = v62;
      *int8x16_t v61 = v26 * v58 * v62;
      if (v25)
      {
        double v63 = v57 * *(double *)&v244[88 * v59 + 8 * v59];
        float64x2_t v64 = &v244[88 * v55];
        *(double *)&v64[8 * v55] = v63;
        *(double *)&v64[8 * v59] = v58 * (v62 + v26 * v63);
      }
      if (v11)
      {
        double v65 = v57 * *(double *)&v241[88 * v59 + 8 * v59];
        long long v66 = &v241[88 * v55];
        *(double *)&v66[8 * v55] = v65;
        *(double *)&v66[8 * v59] = v58 * (v26 * v65 + *(double *)&v244[88 * v55 + 8 * v55] * 2.0);
      }
      uint64_t v67 = 0;
      double v68 = *(double *)&v247[96 * v51 + 184];
      int v69 = 2;
      int8x16_t v70 = v54;
      do
      {
        double v71 = sqrt((double)v69 * (double)(v50 + (int)v67 + 3));
        double v72 = sqrt((double)(v50 + (int)v67 + 4) * (double)(v69 - 1));
        double v73 = *v70;
        double v74 = *v70 * ((v26 * v26 + -1.0) * v72 / v71) + (v26 + v26) * (double)((int)v51 + (int)v67 + 1) / v71 * v68;
        *(v70 - 2) = v74;
        if (v25) {
          *(double *)&v53[8 * v67] = v68 * v71;
        }
        if (v11) {
          *(double *)&v52[8 * v67] = v73 * (v72 * v71);
        }
        --v67;
        ++v69;
        --v70;
        double v68 = v74;
      }
      while (v51 + v67 + 1 > 0);
      ++v55;
      ++v51;
      v52 += 96;
      v53 += 96;
      v54 += 12;
      v50 += 2;
    }
    while (v51 != v22 - 1);
  }
  double v188 = v49 * v48;
  double v75 = 1.0;
  double v205 = 1.0 / v21;
  if ((v22 & 0x80000000) != 0)
  {
    double v192 = 0.0;
    double v193 = 0.0;
    double v194 = 0.0;
    double v195 = 0.0;
    double v191 = 0.0;
    double v196 = 0.0;
    double v197 = 0.0;
    double v198 = 0.0;
    double v199 = 0.0;
    double v200 = 0.0;
    double v201 = 0.0;
    double v202 = 0.0;
    double v203 = 0.0;
    double v204 = 0.0;
  }
  else
  {
    uint64_t v76 = 0;
    double __x = v49 * v47;
    uint64_t v77 = v22 + 1;
    float64x2_t v78 = (double *)v242;
    float64x2_t v79 = v245;
    float64x2_t v80 = v248;
    do
    {
      float64x2_t v81 = v80;
      float64x2_t v82 = (double *)v79;
      __n128 v83 = v78;
      uint64_t v84 = v22;
      if (v22)
      {
        do
        {
          *float64x2_t v81 = *v81 * 1.41421356;
          if (v25) {
            *float64x2_t v82 = *v82 * 1.41421356;
          }
          if (v11) {
            *__n128 v83 = *v83 * 1.41421356;
          }
          ++v83;
          ++v82;
          ++v81;
          --v84;
        }
        while (v84);
      }
      ++v76;
      v78 += 11;
      float64x2_t v79 = (_OWORD *)((char *)v79 + 88);
      v80 += 11;
    }
    while (v76 != v77);
    double v192 = 0.0;
    double v193 = 0.0;
    double v194 = 0.0;
    double v195 = 0.0;
    double v191 = 0.0;
    double v196 = 0.0;
    double v197 = 0.0;
    double v198 = 0.0;
    double v199 = 0.0;
    double v200 = 0.0;
    double v201 = 0.0;
    double v202 = 0.0;
    double v203 = 0.0;
    double v204 = 0.0;
    if ((int)v22 >= 2)
    {
      float64x2_t v85 = v246;
      uint64_t v86 = v243;
      int64x2_t v87 = &v249;
      double v75 = 1.0;
      double v203 = 0.0;
      double v204 = 0.0;
      uint64_t v88 = 6;
      double v201 = 0.0;
      double v202 = 0.0;
      uint64_t v89 = 2;
      uint64_t v90 = 24;
      double v199 = 0.0;
      double v200 = 0.0;
      double v197 = 0.0;
      double v198 = 0.0;
      double v195 = 0.0;
      double v196 = 0.0;
      int v91 = 6;
      double v191 = 0.0;
      double v192 = 0.0;
      double v193 = 0.0;
      double v194 = 0.0;
      uint64_t v189 = v77;
      do
      {
        int v209 = v91;
        double v211 = v75;
        unint64_t v92 = 0;
        double v93 = 0.0;
        int v210 = v88;
        double v94 = 0.0;
        double v95 = 0.0;
        double v96 = 0.0;
        uint64_t v97 = v13 + 528 + ((4 * v88) & 0x3FFFFFFF8);
        int v98 = v89++;
        double v99 = 0.0;
        double v100 = 0.0;
        double v101 = 0.0;
        double v102 = 0.0;
        double v103 = 0.0;
        double v104 = 0.0;
        do
        {
          double v105 = *(double *)(v97 + v92);
          double v106 = *(double *)(v97 + v92 + 504);
          double v107 = v106 * *(double *)&v262[v92 / 8] + v105 * *(double *)&v263[v92 / 8];
          double v108 = *(double *)&v87[v92 / 8];
          if (v25)
          {
            double v103 = v103 + *(double *)&v85[v92] * v107;
            double v102 = v102 + v108 * (v106 * *(double *)((char *)v259 + v92) + v105 * *(double *)((char *)v261 + v92));
            double v101 = v101 + v108 * (v106 * *(double *)((char *)v258 + v92) + v105 * *(double *)((char *)v260 + v92));
          }
          if (v11)
          {
            double v100 = v100 + *(double *)&v86[v92] * v107;
            double v99 = v99 + v108 * (v106 * *(double *)&v254[v92 / 8] + v105 * *(double *)&v257[v92 / 8]);
            double v109 = *(double *)&v85[v92];
            double v96 = v96 + v108 * (v106 * *(double *)&v252[v92 / 8 - 1] + v105 * *(double *)&v255[v92 / 8]);
            double v95 = v95 + v109 * (v106 * *(double *)((char *)v259 + v92) + v105 * *(double *)((char *)v261 + v92));
            double v94 = v94 + v109 * (v106 * *(double *)((char *)v258 + v92) + v105 * *(double *)((char *)v260 + v92));
            double v93 = v93 + v108 * (v106 * *(double *)&v253[v92 / 8] + v105 * *(double *)&v256[v92 / 8]);
          }
          double v104 = v104 + v108 * v107;
          v92 += 8;
        }
        while (v90 != v92);
        double v207 = v93;
        double v208 = v101;
        int v206 = v98;
        double v110 = pow(__x, (double)v98);
        if (v25)
        {
          double v194 = v194 + v110 * v103;
          double v192 = v192 + v205 * (v205 * -(v110 * (double)(int)v89)) * v104;
          double v193 = v193 + v110 * v102;
          double v111 = v208;
          double v191 = v191 + v110 * v208;
          int v112 = v210;
        }
        else
        {
          int v112 = v210;
          double v111 = v208;
        }
        if (v11)
        {
          double v195 = v195 + v205 * (v205 * (v205 * (v110 * (double)((v206 + 2) * (int)v89)))) * v104;
          double v196 = v196 + v110 * v100;
          double v197 = v197 + v110 * v99;
          double v198 = v198 + v110 * v96;
          double v199 = v199 + v110 * v95;
          double v200 = v200 + v110 * v94;
          double v113 = v205 * (v205 * -(v110 * (double)(int)v89));
          double v201 = v201 + v110 * v207;
          double v202 = v202 + v113 * v103;
          double v203 = v203 + v113 * v102;
          double v204 = v204 + v113 * v111;
        }
        double v75 = v211 + v110 * v104;
        v90 += 8;
        v85 += 88;
        v86 += 88;
        v87 += 11;
        uint64_t v88 = (v112 + v209);
        int v91 = v209 + 2;
      }
      while (v89 != v189);
    }
  }
  double *v185 = -(v188 * v75);
  double v114 = 0.0;
  double v115 = 0.0;
  double v116 = 0.0;
  double v117 = 0.0;
  if (v25)
  {
    double v117 = v192 * *(double *)(v13 + 24) + -v188 * v205;
    double v114 = v188 * v194;
    double v115 = v188 * v193;
    double v116 = v188 * v191;
  }
  double v118 = 0.0;
  double v119 = 0.0;
  double v120 = 0.0;
  double v121 = 0.0;
  double v122 = 0.0;
  double v123 = 0.0;
  double v124 = 0.0;
  double v125 = 0.0;
  double v126 = 0.0;
  double v127 = 0.0;
  double v128 = 0.0;
  if (v11)
  {
    double v129 = *(double *)(v13 + 24);
    double v119 = v195 * v129 + v205 * (v188 + v188) * v205;
    double v120 = v188 * v196;
    double v121 = v188 * v197;
    double v122 = v188 * v198;
    double v123 = v188 * v199;
    double v124 = v188 * v200;
    double v125 = v188 * v201;
    double v126 = v202 * v129;
    double v127 = v203 * v129;
    double v128 = v204 * v129;
  }
  double v239 = 0.0;
  double v238 = 0.0;
  double v240 = 0.0;
  double v236 = 0.0;
  double v235 = 0.0;
  double v237 = 0.0;
  double v233 = 0.0;
  double v232 = 0.0;
  double v130 = 0.0;
  double v234 = 0.0;
  double v131 = 0.0;
  double v132 = 0.0;
  double v133 = 0.0;
  double v230 = 0.0;
  double v229 = 0.0;
  double v134 = 0.0;
  double v135 = 0.0;
  double v231 = 0.0;
  double v136 = 0.0;
  double v137 = 0.0;
  double v138 = 0.0;
  double v227 = 0.0;
  double v226 = 0.0;
  double v139 = 0.0;
  double v140 = 0.0;
  double v228 = 0.0;
  if (v25)
  {
    double v141 = *v186;
    double v142 = v186[1];
    double v140 = v205 * *v186;
    double v136 = v205 * v142;
    double v238 = v140;
    double v239 = v205 * v142;
    double v143 = v186[2];
    double v132 = v205 * v143;
    double v240 = v205 * v143;
    double v235 = v205 * -(v140 * v205);
    double v236 = v205 * -(v205 * v142 * v205);
    double v237 = v205 * -(v205 * v143 * v205);
    double v139 = v205 + v141 * v235;
    double v135 = v141 * v236;
    double v232 = v139;
    double v233 = v141 * v236;
    double v131 = v141 * v237;
    double v234 = v141 * v237;
    double v138 = v142 * v235;
    double v134 = v205 + v142 * v236;
    double v229 = v142 * v235;
    double v230 = v134;
    double v130 = v142 * v237;
    double v231 = v130;
    double v137 = v235 * v143;
    double v133 = v143 * v236;
    double v226 = v235 * v143;
    double v227 = v143 * v236;
    double v118 = v205 + v143 * v237;
    double v228 = v118;
  }
  *double v187 = v115 * v139 + v117 * v140 + v116 * v138 + v114 * v137;
  v187[1] = v115 * v135 + v117 * v136 + v116 * v134 + v114 * v133;
  v187[2] = v115 * v131 + v117 * v132 + v116 * v130 + v114 * v118;
  uint64_t v225 = 0;
  memset(v224, 0, sizeof(v224));
  uint64_t v223 = 0;
  memset(v222, 0, sizeof(v222));
  uint64_t v221 = 0;
  memset(v220, 0, sizeof(v220));
  uint64_t v219 = 0;
  memset(v218, 0, sizeof(v218));
  uint64_t v217 = 0;
  long long v216 = 0u;
  long long v214 = 0u;
  memset(v215, 0, sizeof(v215));
  if (v11)
  {
    uint64_t v144 = 0;
    uint64_t v145 = v224;
    do
    {
      uint64_t v146 = 0;
      double v147 = v186[v144];
      do
      {
        *(double *)((char *)v145 + v146) = v147 * *(double *)((char *)&v235 + v146);
        v146 += 8;
      }
      while (v146 != 24);
      *((double *)v224 + 3 * v144 + v144) = v205 + *((double *)v224 + 3 * v144 + v144);
      ++v144;
      uint64_t v145 = (_OWORD *)((char *)v145 + 24);
    }
    while (v144 != 3);
    uint64_t v148 = 0;
    BOOL v149 = v222;
    uint64_t v150 = v224;
    do
    {
      uint64_t v151 = 0;
      double v152 = v205 * -2.0 * *(&v235 + v148);
      do
      {
        *(double *)((char *)v149 + v151) = v205 * -(*(double *)((char *)v150 + v151) * v205)
                                         + v152 * *(double *)((char *)&v238 + v151);
        v151 += 8;
      }
      while (v151 != 24);
      ++v148;
      BOOL v149 = (_OWORD *)((char *)v149 + 24);
      uint64_t v150 = (_OWORD *)((char *)v150 + 24);
    }
    while (v148 != 3);
    uint64_t v153 = 0;
    double v154 = *v186;
    double v155 = v186[1];
    int v156 = &v214;
    long long v157 = v218;
    uint64_t v158 = v220;
    long long v159 = v222;
    double v160 = v186[2];
    do
    {
      for (uint64_t i = 0; i != 24; i += 8)
      {
        double v162 = *(double *)((char *)v159 + i);
        *(double *)((char *)v158 + i) = v154 * v162;
        *(double *)((char *)v157 + i) = v155 * v162;
        *(double *)((char *)v156 + i) = v160 * v162;
      }
      ++v153;
      int v156 = (long long *)((char *)v156 + 24);
      long long v157 = (_OWORD *)((char *)v157 + 24);
      uint64_t v158 = (_OWORD *)((char *)v158 + 24);
      long long v159 = (_OWORD *)((char *)v159 + 24);
    }
    while (v153 != 3);
    uint64_t v163 = 0;
    long long v164 = &v235;
    do
    {
      double v165 = *v164++;
      *(double *)((char *)v220 + v163) = v165 + *(double *)((char *)v220 + v163);
      *(double *)((char *)v218 + v163 + 8) = v165 + *(double *)((char *)v218 + v163 + 8);
      *(double *)((char *)v215 + v163) = v165 + *(double *)((char *)v215 + v163);
      v163 += 24;
    }
    while (v163 != 72);
    for (uint64_t j = 0; j != 24; j += 8)
    {
      double v167 = *(double *)((char *)&v235 + j);
      *(double *)((char *)v220 + j) = v167 + *(double *)((char *)v220 + j);
      *(double *)((char *)&v218[1] + j + 8) = v167 + *(double *)((char *)&v218[1] + j + 8);
      *(double *)((char *)&v216 + j) = v167 + *(double *)((char *)&v216 + j);
    }
    uint64_t v168 = 0;
    long long v169 = v212;
    uint64_t v170 = &v214;
    long long v171 = v218;
    long long v172 = v220;
    long long v173 = v224;
    do
    {
      uint64_t v174 = 0;
      double v175 = *(&v238 + v168);
      double v176 = *(&v232 + v168);
      double v177 = *(&v229 + v168);
      double v178 = *(&v226 + v168);
      double v179 = v127 * v176 + v119 * v175 + v128 * v177 + v126 * v178;
      double v180 = v121 * v176 + v127 * v175 + v125 * v177 + v123 * v178;
      double v181 = v125 * v176 + v128 * v175 + v122 * v177 + v124 * v178;
      double v182 = v123 * v176 + v126 * v175 + v124 * v177 + v120 * v178;
      do
      {
        *(double *)((char *)v169 + v174) = v180 * *(double *)((char *)&v232 + v174)
                                         + v179 * *(double *)((char *)&v238 + v174)
                                         + v181 * *(double *)((char *)&v229 + v174)
                                         + v182 * *(double *)((char *)&v226 + v174)
                                         + v117 * *(double *)((char *)v173 + v174)
                                         + v115 * *(double *)((char *)v172 + v174)
                                         + v116 * *(double *)((char *)v171 + v174)
                                         + v114 * *(double *)((char *)v170 + v174);
        v174 += 8;
      }
      while (v174 != 24);
      ++v168;
      long long v169 = (_OWORD *)((char *)v169 + 24);
      uint64_t v170 = (long long *)((char *)v170 + 24);
      long long v171 = (_OWORD *)((char *)v171 + 24);
      long long v172 = (_OWORD *)((char *)v172 + 24);
      long long v173 = (_OWORD *)((char *)v173 + 24);
    }
    while (v168 != 3);
    long long v183 = v212[1];
    *(_OWORD *)uint64_t v8 = v212[0];
    *(_OWORD *)(v8 + 16) = v183;
    long long v184 = v212[3];
    *(_OWORD *)(v8 + 32) = v212[2];
    *(_OWORD *)(v8 + 48) = v184;
    *(void *)(v8 + 64) = v213;
  }
  if (*(_DWORD *)(v13 + 2568) == 1) {
    cnnavigation::LinearizedGravityModel::UpdateLinearization(v13 + 2576, v186, v187, v8, *(double *)(v13 + 40), *v185);
  }
  return 0;
}

uint64_t sub_18E06AEBC(uint64_t a1)
{
  *(void *)(a1 + 24) = 0x1000000AELL;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1EDD179B8;
  for (uint64_t i = 40; i != 2824; i += 16)
  {
    int v3 = (void *)(a1 + i);
    *int v3 = 0;
    v3[1] = 0;
  }
  if (!*(_DWORD *)(a1 + 24))
  {
    uint64_t v5 = "this->max_num_rows_ > 0";
    int v6 = 394;
    goto LABEL_8;
  }
  if (!*(_DWORD *)(a1 + 28))
  {
    uint64_t v5 = "this->max_num_cols_ > 0";
    int v6 = 395;
LABEL_8:
    __assert_rtn("CNMatrix", "cnmatrix.h", v6, v5);
  }
  *(_OWORD *)(a1 + 8) = xmmword_18E1FD650;
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  return a1;
}

void sub_18E06AFA0(_Unwind_Exception *a1)
{
  *uint64_t v1 = &unk_1EDD16ED8;
  _Unwind_Resume(a1);
}

void sub_18E06AFC0(uint64_t a1)
{
  *(void *)(a1 + 24) = 0x1000000AELL;
  *(void *)a1 = &unk_1EDD179E8;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)(a1 + 8) = xmmword_18E1FD650;
  sub_18E0678DC();
}

void sub_18E06B038(_Unwind_Exception *a1)
{
  sub_18E066E88(v2);
  *uint64_t v1 = &unk_1EDD17028;
  _Unwind_Resume(a1);
}

void sub_18E06B070(uint64_t a1)
{
  *(void *)(a1 + 24) = 0x1000000AELL;
  *(void *)a1 = &unk_1EDD17A18;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)(a1 + 8) = xmmword_18E1FD650;
  sub_18E0676C0();
}

void sub_18E06B0E8(_Unwind_Exception *a1)
{
  sub_18E066A94(v2);
  *uint64_t v1 = &unk_1EDD17058;
  _Unwind_Resume(a1);
}

uint64_t sub_18E06B120(uint64_t a1)
{
  *(void *)(a1 + 24) = 0x100000057;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1EDD19878;
  for (uint64_t i = 40; i != 1432; i += 16)
  {
    int v3 = (void *)(a1 + i);
    *int v3 = 0;
    v3[1] = 0;
  }
  if (!*(_DWORD *)(a1 + 24))
  {
    uint64_t v5 = "this->max_num_rows_ > 0";
    int v6 = 394;
    goto LABEL_8;
  }
  if (!*(_DWORD *)(a1 + 28))
  {
    uint64_t v5 = "this->max_num_cols_ > 0";
    int v6 = 395;
LABEL_8:
    __assert_rtn("CNMatrix", "cnmatrix.h", v6, v5);
  }
  *(_OWORD *)(a1 + 8) = xmmword_18E1FD660;
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  return a1;
}

void sub_18E06B204(_Unwind_Exception *a1)
{
  *uint64_t v1 = &unk_1EDD16ED8;
  _Unwind_Resume(a1);
}

void sub_18E06B224(uint64_t a1)
{
  *(void *)(a1 + 24) = 0x100000057;
  *(void *)a1 = &unk_1EDD198A8;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)(a1 + 8) = xmmword_18E1FD660;
  sub_18E066EF0();
}

void sub_18E06B29C(_Unwind_Exception *a1)
{
  sub_18E066E88(v2);
  *uint64_t v1 = &unk_1EDD17028;
  _Unwind_Resume(a1);
}

void sub_18E06B2D4(uint64_t a1)
{
  *(void *)(a1 + 24) = 0x100000057;
  *(void *)a1 = &unk_1EDD198D8;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)(a1 + 8) = xmmword_18E1FD660;
  sub_18E066B00();
}

void sub_18E06B34C(_Unwind_Exception *a1)
{
  sub_18E066A94(v2);
  *uint64_t v1 = &unk_1EDD17058;
  _Unwind_Resume(a1);
}

void *sub_18E06B384(void *a1)
{
  *a1 = &unk_1EDD18978;
  uint64_t v2 = a1[5];
  a1[5] = 0;
  if (v2) {
    MEMORY[0x192FA6220](v2, 0x1000C8000313F17);
  }
  *a1 = &unk_1EDD17478;
  return a1;
}

void *sub_18E06B400(void *a1)
{
  *a1 = &unk_1EDD18588;
  uint64_t v2 = a1[5];
  a1[5] = 0;
  if (v2) {
    MEMORY[0x192FA6220](v2, 0x1000C8000313F17);
  }
  *a1 = &unk_1EDD17478;
  return a1;
}

void sub_18E06B47C(void *a1)
{
  sub_18E06B400(a1);

  JUMPOUT(0x192FA6240);
}

void sub_18E06B4B4()
{
}

void sub_18E06B4E4()
{
}

void sub_18E06B560()
{
}

void *sub_18E06B5D4(void *a1)
{
  *a1 = &unk_1EDD18768;
  uint64_t v2 = a1[5];
  a1[5] = 0;
  if (v2) {
    MEMORY[0x192FA6220](v2, 0x1000C8000313F17);
  }
  *a1 = &unk_1EDD17478;
  return a1;
}

void sub_18E06B650(void *a1)
{
  sub_18E06B5D4(a1);

  JUMPOUT(0x192FA6240);
}

void sub_18E06B688()
{
}

void sub_18E06B6B8()
{
}

void sub_18E06B734()
{
}

void sub_18E06B7A8(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_18E06B7A8(a1, *a2);
    sub_18E06B7A8(a1, a2[1]);
    sub_18E06B5D4(a2 + 114);
    operator delete(a2);
  }
}

double sub_18E06B804(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int16 v11 = 12;
  unsigned __int8 v10 = 4;
  double v8 = *(double *)(a1 + 8) + (double)*(uint64_t *)a1;
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v11, &v10, "time,%.3lf,h-function failure on line %d: %s() %s", a4, a5, a6, a7, a8, SLOBYTE(v8));
  return result;
}

uint64_t sub_18E06B85C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  for (uint64_t i = 10; i != 29; ++i)
    v19[i] = i - 10;
  uint64_t v26 = 0x100000013;
  v28[1] = v21;
  void v28[2] = v22;
  double v24 = &unk_1EDD17CE8;
  unint64_t v27 = v28;
  v29[0] = v23[0];
  *(_OWORD *)((char *)v29 + 12) = *(_OWORD *)((char *)v23 + 12);
  long long v25 = xmmword_18E1FD730;
  v28[0] = v20;
  double v12 = sub_18E06BD90((uint64_t)v19, a3, (uint64_t)&v24);
  if ((*(unsigned int (**)(uint64_t, uint64_t, _DWORD *, double))(*(void *)a4 + 56))(a4, a2, v19, v12)) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v16 = 0x100000013;
  uint64_t v14 = &unk_1EDD17CB8;
  long long v15 = xmmword_18E1FD730;
  uint64_t v17 = &v18;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, void **))(*(void *)a4 + 72))(a4, a1, a5, &v14)) {
    return 0xFFFFFFFFLL;
  }
  sub_18DFE2F24(a6, (uint64_t)&v14);
  return 0;
}

double sub_18E06BA00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_OWORD *)(a3 + 8) = xmmword_18E1FD730;
  double v8 = *(double **)(a1 + 32);
  char v9 = *(double **)(a2 + 32);
  unsigned __int8 v10 = *(double **)(a3 + 32);
  *unsigned __int8 v10 = *v8 + *v9;
  v10[1] = v8[1] + v9[1];
  v10[2] = v8[2] + v9[2];
  __asm { FMOV            V2.2D, #1.0 }
  *(_OWORD *)a4 = _Q2;
  *(void *)(a4 + 16) = 0x3FF0000000000000;
  double v10[3] = v8[3] + v9[3];
  v10[4] = v8[4] + v9[4];
  v10[5] = v8[5] + v9[5];
  long long v46 = _Q2;
  *(_OWORD *)(a4 + 24) = _Q2;
  *(void *)(a4 + 40) = 0x3FF0000000000000;
  double v16 = v8[6];
  double v17 = v8[7];
  double v18 = v8[8];
  double v19 = v8[9];
  double v20 = v9[6];
  double v21 = v9[7];
  double v22 = v9[8];
  double v23 = v21 * v21 + v20 * v20 + v22 * v22;
  if (v23 <= 1.0)
  {
    double v24 = sqrt(1.0 - v23);
  }
  else
  {
    double v24 = 1.0 / sqrt(v23 + 1.0);
    double v20 = v20 * v24;
    double v21 = v21 * v24;
    double v22 = v22 * v24;
  }
  double v25 = v17 * v22 + v24 * v16 - v21 * v18 + v20 * v19;
  double v26 = v17 * v24 - v22 * v16 + v20 * v18 + v21 * v19;
  double v27 = v21 * v16 - v20 * v17 + v24 * v18 + v22 * v19;
  double v28 = -(v21 * v17) - v20 * v16 - v22 * v18 + v24 * v19;
  double v29 = sqrt(v26 * v26 + v25 * v25 + v27 * v27 + v28 * v28);
  double v30 = 1.0;
  double v31 = 0.0;
  double v32 = 0.0;
  double v33 = 0.0;
  double v34 = 0.0;
  double v35 = 1.0;
  if (fabs(v29) >= 2.22044605e-16)
  {
    double v32 = v25 / v29;
    double v33 = v26 / v29;
    double v34 = v27 / v29;
    double v35 = v28 / v29;
  }
  v10[6] = v32;
  v10[7] = v33;
  v10[8] = v34;
  v10[9] = v35;
  double v36 = sqrt(v17 * v17 + v16 * v16 + v18 * v18 + v19 * v19);
  double v37 = 0.0;
  double v38 = 0.0;
  if (fabs(v36) >= 2.22044605e-16)
  {
    double v31 = v16 / v36;
    double v37 = v17 / v36;
    double v38 = v18 / v36;
    double v30 = v19 / v36;
  }
  *(double *)double v47 = v31;
  *(double *)&v47[1] = v37;
  *(double *)&v47[2] = v38;
  *(double *)&v47[3] = v30;
  cnrotation::CNRotation::dqddq((cnrotation::CNRotation *)v47, (uint64_t)v48);
  double v39 = v50;
  *(void *)(a4 + 48) = *v50;
  uint64_t v40 = v49;
  *(void *)(a4 + 56) = v39[v49];
  *(void *)(a4 + 64) = v39[2 * v40];
  *(void *)(a4 + 72) = v39[1];
  *(void *)(a4 + 80) = v39[(int)v40 + 1];
  double v41 = &v39[2 * (int)v40];
  *(void *)(a4 + 88) = v41[1];
  *(void *)(a4 + 96) = v39[2];
  *(void *)(a4 + 104) = v39[(int)v40 + 2];
  *(void *)(a4 + 112) = v41[2];
  *(void *)(a4 + 120) = v39[3];
  *(void *)(a4 + 128) = v39[(int)v40 + 3];
  *(void *)(a4 + 136) = v41[3];
  double v42 = *(double **)(a1 + 32);
  double v43 = *(double **)(a2 + 32);
  double v44 = *(double **)(a3 + 32);
  v44[10] = v42[10] + v43[9];
  v44[11] = v42[11] + v43[10];
  v44[12] = v42[12] + v43[11];
  *(_OWORD *)(a4 + 144) = v46;
  *(void *)(a4 + 160) = 0x3FF0000000000000;
  v44[13] = v42[13] + v43[12];
  v44[14] = v42[14] + v43[13];
  v44[15] = v42[15] + v43[14];
  *(_OWORD *)(a4 + 168) = v46;
  *(void *)(a4 + 184) = 0x3FF0000000000000;
  v44[16] = v42[16] + v43[15];
  v44[17] = v42[17] + v43[16];
  double result = v42[18] + v43[17];
  v44[18] = result;
  *(_OWORD *)(a4 + 192) = v46;
  *(void *)(a4 + 208) = 0x3FF0000000000000;
  return result;
}

uint64_t sub_18E06BD44(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 28) = 26;
  *(void *)a1 = &unk_1EDD18E58;
  *(void *)(a1 + 32) = a1 + 40;
  *(_DWORD *)(a1 + 8) = 3;
  *(_DWORD *)(a1 + 12) = a2;
  *(_DWORD *)(a1 + 16) = 3 * a2;
  *(void *)(a1 + 20) = 0x300000003;
  return sub_18DFE2CC8(a1, 0.0);
}

double sub_18E06BD90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(a3 + 8);
  int v4 = *(_DWORD *)(a3 + 12);
  uint64_t v5 = (v4 * v3);
  *(void *)&double result = 0x100000013;
  *(void *)(a1 + 24) = 0x100000013;
  *(void *)a1 = &unk_1EDD17CB8;
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 20) = v3;
  uint64_t v7 = (double *)(a1 + 40);
  *(void *)(a1 + 32) = a1 + 40;
  if (v5)
  {
    double v8 = *(int **)(a3 + 32);
    do
    {
      uint64_t v9 = *v8++;
      double result = *(double *)(a2 + 8 * v9);
      *v7++ = result;
      --v5;
    }
    while (v5);
  }
  return result;
}

void sub_18E06BDF0(void *a1)
{
  *a1 = &unk_1EDD17478;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E06BE20(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E06BE2C(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  unsigned int v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    unsigned int v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      int v4 = *(_DWORD *)(a1 + 16);
      int v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        uint64_t v6 = (v4 - 1);
        uint64_t v7 = *(void *)(a1 + 32);
        uint64_t v8 = 1;
        do
        {
          uint64_t v9 = &v13[v8];
          if (!v13[v8])
          {
            uint64_t v10 = *(void *)(v7 + 8 * v8);
            int v11 = v8;
            do
            {
              int v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              uint64_t v12 = *(void *)(v7 + 8 * v11);
              *(void *)(v7 + 8 * v11) = v10;
              *uint64_t v9 = 1;
              uint64_t v9 = &v13[v11];
              uint64_t v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

void *sub_18E06BF24(void *a1, int a2)
{
  sub_18DEDE7B0(__p, "");
  sub_18E06C030((uint64_t)a1, a2, (uint64_t)__p);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  *a1 = &unk_1EDD146E8;
  a1[5] = 0;
  a1[6] = 0;
  return a1;
}

void sub_18E06BFA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_18E06BFC0(uint64_t a1)
{
  *(void *)a1 = &unk_1EDD0A4E8;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }

  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E06C030(uint64_t a1, int a2, uint64_t a3)
{
  *(void *)a1 = &unk_1EDD0A4E8;
  *(_DWORD *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_18DEDE668(__p, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)uint64_t __p = *(_OWORD *)a3;
    uint64_t v7 = *(void *)(a3 + 16);
  }
  sub_18E03F90C(a1, a2, (long long *)__p);
  if (SHIBYTE(v7) < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_18E06C0DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (*(char *)(v14 + 39) < 0) {
    operator delete(*v15);
  }
  _Unwind_Resume(exception_object);
}

void *sub_18E06C110(uint64_t *a1, void (**a2)(uint64_t))
{
  int v4 = operator new(0x30uLL);
  *int v4 = 0;
  v4[1] = 0;
  double result = sub_18E06C174(v4 + 2, a2);
  uint64_t v6 = *a1;
  *int v4 = *a1;
  v4[1] = a1;
  *(void *)(v6 + 8) = v4;
  *a1 = (uint64_t)v4;
  ++a1[2];
  return result;
}

void *sub_18E06C174(void *a1, void (**a2)(uint64_t))
{
  *a1 = 0;
  a1[1] = 0;
  if (*a2) {
    (*a2)(2);
  }
  return a1;
}

__n128 sub_18E06C1BC(void *a1, uint64_t a2)
{
  int v4 = (char *)operator new(0x60uLL);
  *(void *)int v4 = &unk_1EDD0A4E8;
  *((_DWORD *)v4 + 2) = *(_DWORD *)(a2 + 8);
  int v5 = v4 + 16;
  if (*(char *)(a2 + 39) < 0)
  {
    sub_18DEDE668(v5, *(void **)(a2 + 16), *(void *)(a2 + 24));
  }
  else
  {
    *(_OWORD *)int v5 = *(_OWORD *)(a2 + 16);
    *((void *)v4 + 4) = *(void *)(a2 + 32);
  }
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(v4 + 56) = *(_OWORD *)(a2 + 56);
  __n128 result = *(__n128 *)(a2 + 72);
  *(__n128 *)(v4 + 72) = result;
  *((void *)v4 + 11) = *(void *)(a2 + 88);
  *(void *)int v4 = &unk_1EDD14F68;
  *a1 = sub_18E06C2A4;
  a1[1] = v4;
  return result;
}

void sub_18E06C290(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_18E06C2A4(unsigned int a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v5 = a1;
  __n128 result = &unk_1EDD05A48;
  switch(v5)
  {
    case 1:
      sub_18E06C1BC(a3, a2[1]);
      __n128 result = 0;
      break;
    case 2:
      __n128 result = 0;
      uint64_t v9 = a2[1];
      *a3 = sub_18E06C2A4;
      a3[1] = v9;
      goto LABEL_5;
    case 3:
      if (a4) {
        BOOL v10 = sub_18DEE4C68(a4, (uint64_t)&unk_1EDD05A48);
      }
      else {
        BOOL v10 = a5 == &std::__any_imp::__unique_typeinfo<raven::h_DeviceVelocityArgs_RavenPNT<double>>::__id;
      }
      if (v10) {
        __n128 result = (void *)a2[1];
      }
      else {
        __n128 result = 0;
      }
      break;
    case 4:
      return result;
    default:
      uint64_t v8 = (void (***)(void))a2[1];
      (**v8)(v8);
      operator delete(v8);
      __n128 result = 0;
LABEL_5:
      *a2 = 0;
      break;
  }
  return result;
}

uint64_t sub_18E06C3A8(uint64_t a1, long long *a2, uint64_t a3, int a4, uint64_t a5)
{
  long long v71 = *a2;
  uint64_t v68 = 0x100000006;
  long long v67 = xmmword_18E1FD770;
  uint64_t v7 = (uint64_t *)v70;
  long long v66 = &unk_1EDD19728;
  int v69 = (uint64_t *)v70;
  if (a4)
  {
    if (a4 != 1)
    {
      if (a4 == 2) {
        __assert_rtn("IntegrateUserStateEstimate", "ravenpntestimatorhelper.h", 1714, "false && \"Unexpected case RavenPNTEstimatorStateParameterization::ParameterizationCount\"");
      }
      goto LABEL_11;
    }
    uint64_t v59 = 0x100000003;
    long long v58 = xmmword_18E1F6F60;
    double v57 = &unk_1EDD18D98;
    int8x16_t v60 = (double *)&v61;
    uint64_t v44 = 0x100000003;
    double v42 = &unk_1EDD18D98;
    double v45 = v46;
    long long v43 = xmmword_18E1F6F60;
    sub_18DFE2CC8((uint64_t)&v42, 0.0);
    uint64_t v39 = 0x100000003;
    double v37 = COERCE_DOUBLE(&unk_1EDD18D98);
    long long v38 = xmmword_18E1F6F60;
    uint64_t v40 = &v41;
    uint64_t v54 = 0x300000003;
    long long v53 = xmmword_18E1F0010;
    uint64_t v52 = &unk_1EDD18EE8;
    uint64_t v55 = v56;
    uint64_t v49 = 0x300000003;
    long long v48 = xmmword_18E1F0010;
    double v47 = &unk_1EDD18EE8;
    int v50 = v51;
    double v18 = *(double **)(a3 + 32);
    double v19 = v60;
    *int8x16_t v60 = v18[21];
    v19[1] = v18[22];
    v19[2] = v18[23];
    if (sub_18E06CC10((uint64_t)&v57, (uint64_t)&v42, 0, (uint64_t)&v37, (uint64_t)&v52, (uint64_t)&v47, v20, v21))return 0xFFFFFFFFLL; {
    double v24 = v40;
    }
    double v25 = v69;
    *int v69 = *v40;
    v25[1] = v24[1];
    v25[2] = v24[2];
    double v26 = *(double **)(a3 + 32);
    double v27 = v60;
    *int8x16_t v60 = v26[24] * v26[25];
    v27[1] = v26[24] * v26[26];
    v27[2] = v26[24] * v26[27];
    if (sub_18E06CC10((uint64_t)&v57, (uint64_t)&v42, 0, (uint64_t)&v37, (uint64_t)&v52, (uint64_t)&v47, v22, v23))return 0xFFFFFFFFLL; {
    double v29 = v40;
    }
    uint64_t v7 = v69;
    v69[3] = *v40;
    v7[4] = v29[1];
    v7[5] = v29[2];
  }
  else
  {
    uint64_t v59 = 0x100000006;
    uint64_t v8 = *(void *)(a3 + 32);
    long long v61 = *(_OWORD *)(v8 + 168);
    v9.i64[1] = *((void *)&v61 + 1);
    double v10 = *(double *)(v8 + 192);
    double v11 = *(double *)(v8 + 208);
    double v12 = v10 * *(double *)(v8 + 200);
    uint64_t v62 = *(void *)(v8 + 184);
    double v63 = v12;
    double v13 = *(double *)(v8 + 216);
    long long v58 = xmmword_18E1FD770;
    double v57 = &unk_1EDD19728;
    int8x16_t v60 = (double *)&v61;
    double v64 = v10 * v11;
    double v65 = v10 * v13;
    v9.i64[0] = 0x600000006;
    uint64_t v54 = 0x600000006;
    long long v53 = xmmword_18E1F8570;
    uint64_t v52 = &unk_1EDD197B8;
    uint64_t v55 = v56;
    uint64_t v49 = 0x600000006;
    long long v48 = xmmword_18E1F8570;
    double v47 = &unk_1EDD197B8;
    int v50 = v51;
    uint64_t v14 = CNTimeSpan::operator-(a1, &v71, v9, (int8x16_t)xmmword_18E1F8570);
    double v37 = v15 + (double)v14;
    uint64_t v44 = 0x100000006;
    double v42 = &unk_1EDD19728;
    double v45 = v46;
    long long v43 = xmmword_18E1FD770;
    sub_18DFE2CC8((uint64_t)&v42, 0.0);
    if (sub_18E06C950((uint64_t)&v57, (uint64_t)&v42, (uint64_t *)&v37, (uint64_t)&v66, (uint64_t)&v52, (uint64_t)&v47, v16, v17))return 0xFFFFFFFFLL; {
    uint64_t v7 = v69;
    }
  }
LABEL_11:
  *(_OWORD *)(a5 + 8) = xmmword_18E1FD680;
  uint64_t v30 = *(void *)(a5 + 32);
  *(void *)uint64_t v30 = *v7;
  *(void *)(v30 + 8) = v7[1];
  *(void *)(v30 + 16) = v7[2];
  double v32 = *((double *)v7 + 3);
  double v31 = *((double *)v7 + 4);
  double v33 = *((double *)v7 + 5);
  double v34 = sqrt(v31 * v31 + v32 * v32 + v33 * v33);
  *(double *)(v30 + 24) = v34;
  uint64_t result = 0;
  if (fabs(v34) <= 0.000000015)
  {
    uint64_t v36 = *(void *)(a3 + 32);
    *(void *)(v30 + 32) = *(void *)(v36 + 200);
    *(void *)(v30 + 40) = *(void *)(v36 + 208);
    double v35 = *(double *)(v36 + 216);
  }
  else
  {
    *(double *)(v30 + 32) = v32 / v34;
    *(double *)(v30 + 40) = v31 / v34;
    double v35 = v33 / v34;
  }
  *(double *)(v30 + 48) = v35;
  return result;
}

double sub_18E06C83C(uint64_t a1, int a2, double *a3)
{
  if (*(_DWORD *)(a1 + 16) != a2) {
    __assert_rtn("operator=", "cnsubvector.h", 347, "this->num_elements_ == A.num_elements_");
  }
  if (a2 >= 1)
  {
    unsigned int v3 = *(int **)(a1 + 136);
    uint64_t v4 = *(void *)(*(void *)(a1 + 96) + 32);
    uint64_t v5 = *(double **)(a1 + 32);
    uint64_t v6 = a2;
    do
    {
      double v7 = *a3++;
      double result = v7;
      uint64_t v9 = *v3++;
      *(double *)(v4 + 8 * v9) = result;
      *v5++ = result;
      --v6;
    }
    while (v6);
  }
  return result;
}

void *sub_18E06C8B0(void *result)
{
  result[13] = &unk_1EDD174A8;
  *double result = &unk_1EDD17478;
  return result;
}

void sub_18E06C8F0(void *a1)
{
  *a1 = &unk_1EDD17478;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E06C920(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E06C92C(uint64_t a1)
{
  sub_18DEF3CF4(a1, v1);
}

uint64_t sub_18E06C950(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8 = *(_DWORD *)(a1 + 8);
  unsigned int v9 = *(_DWORD *)(a1 + 12);
  if (v8 <= v9) {
    int v10 = *(_DWORD *)(a1 + 12);
  }
  else {
    int v10 = *(_DWORD *)(a1 + 8);
  }
  if (v8) {
    BOOL v11 = v9 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  BOOL v12 = !v11 && v10 == 6;
  if (v12
    && ((unsigned int v14 = *(_DWORD *)(a2 + 8), v15 = *(_DWORD *)(a2 + 12), v14 <= v15)
      ? (int v16 = *(_DWORD *)(a2 + 12))
      : (int v16 = *(_DWORD *)(a2 + 8)),
        v14 ? (BOOL v17 = v15 == 0) : (BOOL v17 = 1),
        !v17 ? (BOOL v18 = v16 == 6) : (BOOL v18 = 0),
        v18))
  {
    uint64_t v24 = *a3;
    uint64_t v47 = 0x600000006;
    double v45 = &unk_1EDD197B8;
    long long v48 = &v49;
    long long v46 = xmmword_18E1F8570;
    sub_18DFE2CC8((uint64_t)&v45, 0.0);
    int v25 = 0;
    int v26 = HIDWORD(v46);
    int v27 = HIDWORD(v46) + 1;
    uint64_t v28 = 6;
    double v29 = v48;
    do
    {
      v29[v25] = 0x3FF0000000000000;
      v25 += v27;
      --v28;
    }
    while (v28);
    v29[3 * v26] = v24;
    v29[(4 * v26) | 1] = v24;
    v29[5 * v26 + 2] = v24;
    uint64_t v42 = 0x100000006;
    long long v41 = xmmword_18E1FD770;
    uint64_t v40 = &unk_1EDD19728;
    long long v43 = &v44;
    sub_18DFE2B44((uint64_t)&v45, a1, (uint64_t)&v40);
    uint64_t v37 = 0x100000006;
    double v35 = &unk_1EDD19728;
    long long v36 = xmmword_18E1FD770;
    long long v38 = v39;
    sub_18DFEF1F4((uint64_t)&v40, a2, (uint64_t)&v35);
    sub_18DFE2F24(a4, (uint64_t)&v35);
    sub_18DFE2F24(a5, (uint64_t)&v45);
    uint64_t v37 = 0x600000006;
    double v35 = &unk_1EDD197B8;
    long long v38 = v39;
    long long v36 = xmmword_18E1F8570;
    sub_18DFE2CC8((uint64_t)&v35, 0.0);
    int v30 = 0;
    int v31 = HIDWORD(v36) + 1;
    uint64_t v32 = 6;
    double v33 = v38;
    do
    {
      *(void *)&v33[8 * v30] = 0x3FF0000000000000;
      v30 += v31;
      --v32;
    }
    while (v32);
    sub_18DFE2F24(a6, (uint64_t)&v35);
    return 0;
  }
  else
  {
    LOWORD(v45) = 12;
    LOBYTE(v35) = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v45, (unsigned __int8 *)&v35, "f_SixStateNearlyConstantVelocity called with inadequate matrices.", a4, a5, a6, a7, a8, v34);
    return 0xFFFFFFFFLL;
  }
}

uint64_t sub_18E06CBCC(uint64_t a1)
{
  *(void *)(a1 + 24) = 0x100000006;
  *(void *)a1 = &unk_1EDD19728;
  *(void *)(a1 + 32) = a1 + 40;
  *(_OWORD *)(a1 + 8) = xmmword_18E1FD770;
  return sub_18DFE2CC8(a1, 0.0);
}

uint64_t sub_18E06CC10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8 = *(_DWORD *)(a1 + 8);
  unsigned int v9 = *(_DWORD *)(a1 + 12);
  if (v8 <= v9) {
    int v10 = *(_DWORD *)(a1 + 12);
  }
  else {
    int v10 = *(_DWORD *)(a1 + 8);
  }
  if (v8) {
    BOOL v11 = v9 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  BOOL v12 = !v11 && v10 == 3;
  if (v12
    && ((unsigned int v13 = *(_DWORD *)(a2 + 8), v14 = *(_DWORD *)(a2 + 12), v13 <= v14)
      ? (int v15 = *(_DWORD *)(a2 + 12))
      : (int v15 = *(_DWORD *)(a2 + 8)),
        v13 ? (BOOL v16 = v14 == 0) : (BOOL v16 = 1),
        !v16 ? (BOOL v17 = v15 == 3) : (BOOL v17 = 0),
        v17))
  {
    uint64_t v29 = 0x100000003;
    int v27 = &unk_1EDD18D98;
    long long v28 = xmmword_18E1F6F60;
    int v30 = v31;
    sub_18DFEF1F4(a1, a2, (uint64_t)&v27);
    sub_18DFE2F24(a4, (uint64_t)&v27);
    uint64_t v29 = 0x300000003;
    int v27 = &unk_1EDD18EE8;
    int v30 = v31;
    long long v28 = xmmword_18E1F0010;
    sub_18DFE2CC8((uint64_t)&v27, 0.0);
    int v22 = HIDWORD(v28) + 1;
    uint64_t v23 = v30;
    *int v30 = 0x3FF0000000000000;
    v23[v22] = 0x3FF0000000000000;
    v23[2 * v22] = 0x3FF0000000000000;
    sub_18DFE2F24(a5, (uint64_t)&v27);
    uint64_t v29 = 0x300000003;
    int v27 = &unk_1EDD18EE8;
    int v30 = v31;
    long long v28 = xmmword_18E1F0010;
    sub_18DFE2CC8((uint64_t)&v27, 0.0);
    int v24 = HIDWORD(v28) + 1;
    int v25 = v30;
    *int v30 = 0x3FF0000000000000;
    v25[v24] = 0x3FF0000000000000;
    v25[2 * v24] = 0x3FF0000000000000;
    sub_18DFE2F24(a6, (uint64_t)&v27);
    return 0;
  }
  else
  {
    LOWORD(v27) = 12;
    unsigned __int8 v32 = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v27, &v32, "f_ThreeStateNearlyConstant called with inadequate matrices.", a4, a5, a6, a7, a8, v26);
    return 0xFFFFFFFFLL;
  }
}

void sub_18E06CDE4(void *a1)
{
  *a1 = &unk_1EDD17478;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E06CE14(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E06CE20(uint64_t a1)
{
  sub_18DEF3CF4(a1, v1);
}

uint64_t sub_18E06CE44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 24) = 0x100000007;
  *(_OWORD *)(a1 + 8) = xmmword_18E1FD680;
  *(void *)(a1 + 32) = a1 + 40;
  *(void *)a1 = &unk_1EDD16CF8;
  *(void *)(a1 + 96) = a2;
  *(void *)(a1 + 128) = 0x100000007;
  *(void *)(a1 + 104) = &unk_1EDD19818;
  *(_OWORD *)(a1 + 112) = xmmword_18E1FD680;
  *(void *)(a1 + 136) = a1 + 144;
  sub_18DFEEA3C(a1 + 104, a3);
  int v6 = *(_DWORD *)(a1 + 112);
  int v5 = *(_DWORD *)(a1 + 116);
  *(_DWORD *)(a1 + 8) = v6;
  *(_DWORD *)(a1 + 12) = v5;
  uint64_t v7 = (v5 * v6);
  *(_DWORD *)(a1 + 16) = v7;
  *(_DWORD *)(a1 + 20) = v6;
  if ((int)v7 >= 1)
  {
    unsigned int v8 = *(int **)(a1 + 136);
    uint64_t v9 = *(void *)(a2 + 32);
    int v10 = *(void **)(a1 + 32);
    do
    {
      uint64_t v11 = *v8++;
      *v10++ = *(void *)(v9 + 8 * v11);
      --v7;
    }
    while (v7);
  }
  return a1;
}

void sub_18E06CF1C(void *a1)
{
  a1[13] = &unk_1EDD174A8;
  *a1 = &unk_1EDD17478;
  JUMPOUT(0x192FA6240);
}

void sub_18E06CF6C(void *a1)
{
  *a1 = &unk_1EDD174A8;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E06CF9C(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E06CFA8(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    unsigned int v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      int v4 = *(_DWORD *)(a1 + 16);
      int v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        uint64_t v6 = (v4 - 1);
        uint64_t v7 = *(void *)(a1 + 32);
        uint64_t v8 = 1;
        do
        {
          uint64_t v9 = &v13[v8];
          if (!v13[v8])
          {
            int v10 = *(_DWORD *)(v7 + 4 * v8);
            int v11 = v8;
            do
            {
              int v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              int v12 = *(_DWORD *)(v7 + 4 * v11);
              *(_DWORD *)(v7 + 4 * v11) = v10;
              *uint64_t v9 = 1;
              uint64_t v9 = &v13[v11];
              int v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

void sub_18E06D074(uint64_t a1)
{
  *(void *)a1 = &unk_1EDD0A4E8;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }

  JUMPOUT(0x192FA6240);
}

__n128 sub_18E06D0E4(void *a1, uint64_t a2)
{
  int v4 = (char *)operator new(0x60uLL);
  *(void *)int v4 = &unk_1EDD0A4E8;
  *((_DWORD *)v4 + 2) = *(_DWORD *)(a2 + 8);
  int v5 = v4 + 16;
  if (*(char *)(a2 + 39) < 0)
  {
    sub_18DEDE668(v5, *(void **)(a2 + 16), *(void *)(a2 + 24));
  }
  else
  {
    *(_OWORD *)int v5 = *(_OWORD *)(a2 + 16);
    *((void *)v4 + 4) = *(void *)(a2 + 32);
  }
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(v4 + 56) = *(_OWORD *)(a2 + 56);
  __n128 result = *(__n128 *)(a2 + 72);
  *(__n128 *)(v4 + 72) = result;
  *((void *)v4 + 11) = *(void *)(a2 + 88);
  *(void *)int v4 = &unk_1EDD14D68;
  *a1 = sub_18E06D1CC;
  a1[1] = v4;
  return result;
}

void sub_18E06D1B8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_18E06D1CC(unsigned int a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v5 = a1;
  __n128 result = &unk_1EDD05930;
  switch(v5)
  {
    case 1:
      sub_18E06D0E4(a3, a2[1]);
      __n128 result = 0;
      break;
    case 2:
      __n128 result = 0;
      uint64_t v9 = a2[1];
      *a3 = sub_18E06D1CC;
      a3[1] = v9;
      goto LABEL_5;
    case 3:
      if (a4) {
        BOOL v10 = sub_18DEE4C68(a4, (uint64_t)&unk_1EDD05930);
      }
      else {
        BOOL v10 = a5 == &std::__any_imp::__unique_typeinfo<raven::h_UserVelocityArgs_RavenPNT<double>>::__id;
      }
      if (v10) {
        __n128 result = (void *)a2[1];
      }
      else {
        __n128 result = 0;
      }
      break;
    case 4:
      return result;
    default:
      uint64_t v8 = (void (***)(void))a2[1];
      (**v8)(v8);
      operator delete(v8);
      __n128 result = 0;
LABEL_5:
      *a2 = 0;
      break;
  }
  return result;
}

uint64_t sub_18E06D2D0(uint64_t a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a2 + 8);
  int v2 = *(_DWORD *)(a2 + 12);
  *(void *)(a1 + 24) = 0x100000004;
  *(void *)a1 = &unk_1EDD19488;
  *(_DWORD *)(a1 + 8) = v2;
  *(_DWORD *)(a1 + 12) = v3;
  *(_DWORD *)(a1 + 16) = v3 * v2;
  *(_DWORD *)(a1 + 20) = v2;
  *(void *)(a1 + 32) = a1 + 40;
  return sub_18DFEE808(a2, a1);
}

void sub_18E06D33C(_Unwind_Exception *a1)
{
  *unsigned int v1 = &unk_1EDD174A8;
  _Unwind_Resume(a1);
}

void *sub_18E06D35C(void *result)
{
  *__n128 result = &unk_1EDD174A8;
  return result;
}

uint64_t sub_18E06D37C(uint64_t a1)
{
  *(void *)(a1 + 24) = 0x100000013;
  *(void *)a1 = &unk_1EDD17CB8;
  *(void *)(a1 + 32) = a1 + 40;
  *(_OWORD *)(a1 + 8) = xmmword_18E1FD730;
  return sub_18DFE2CC8(a1, 0.0);
}

uint64_t sub_18E06D3C0(uint64_t a1)
{
  *(void *)(a1 + 24) = 0x1300000013;
  *(void *)a1 = &unk_1EDD17C88;
  *(void *)(a1 + 32) = a1 + 40;
  *(_OWORD *)(a1 + 8) = xmmword_18E1FD880;
  return sub_18DFE2CC8(a1, 0.0);
}

uint64_t sub_18E06D400(uint64_t a1)
{
  *(void *)(a1 + 24) = 0xF00000013;
  *(void *)a1 = &unk_1EDD17C28;
  *(void *)(a1 + 32) = a1 + 40;
  *(_OWORD *)(a1 + 8) = xmmword_18E1FD890;
  return sub_18DFE2CC8(a1, 0.0);
}

uint64_t sub_18E06D444@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  if (a1 < 0) {
    __assert_rtn("Zeros", "cnmatrix.h", 3056, "n >= 0");
  }
  *(void *)(a2 + 24) = 0x300000003;
  *(void *)a2 = &unk_1EDD18EE8;
  *(void *)(a2 + 32) = a2 + 40;
  *(_DWORD *)(a2 + 8) = a1;
  *(_DWORD *)(a2 + 12) = a1;
  *(_DWORD *)(a2 + 16) = a1 * a1;
  *(_DWORD *)(a2 + 20) = a1;

  return sub_18DFE2CC8(a2, 0.0);
}

double sub_18E06D4CC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 24) = 0x300000003;
  *(void *)a3 = &unk_1EDD18EE8;
  *(_OWORD *)(a3 + 8) = xmmword_18E1F0010;
  *(void *)(a3 + 32) = a3 + 40;
  *(void *)&double result = *(_OWORD *)&sub_18DFE2AA8(a1, a2, a3);
  return result;
}

uint64_t sub_18E06D50C(uint64_t result, uint64_t a2)
{
  int v2 = *(_DWORD *)(result + 8);
  if (v2 != *(_DWORD *)(a2 + 8)) {
    __assert_rtn("operator=", "cnsubmatrix.h", 376, "this->num_rows_ == A.num_rows_");
  }
  uint64_t v3 = *(unsigned int *)(result + 12);
  if (v3 != *(_DWORD *)(a2 + 12)) {
    __assert_rtn("operator=", "cnsubmatrix.h", 377, "this->num_cols_ == A.num_cols_");
  }
  if (v3)
  {
    unsigned int v4 = 0;
    uint64_t v5 = 0;
    uint64_t v6 = *(void *)(a2 + 32);
    do
    {
      if (v2)
      {
        uint64_t v7 = *(void *)(result + 168);
        uint64_t v8 = *(int **)(result + 208);
        int v9 = *(_DWORD *)(v7 + 20) * *(_DWORD *)(*(void *)(result + 264) + 4 * v5);
        uint64_t v10 = *(void *)(v7 + 32);
        uint64_t v11 = *(void *)(result + 32);
        int v12 = *(_DWORD *)(result + 20) * v5;
        unsigned int v13 = v4;
        int v14 = v2;
        do
        {
          uint64_t v15 = *(void *)(v6 + 8 * v13);
          int v16 = *v8++;
          *(void *)(v10 + 8 * (v16 + v9)) = v15;
          *(void *)(v11 + 8 * v12++) = v15;
          ++v13;
          --v14;
        }
        while (v14);
      }
      ++v5;
      v4 += v2;
    }
    while (v5 != v3);
  }
  return result;
}

void *sub_18E06D5F8(void *result)
{
  result[29] = &unk_1EDD174A8;
  result[22] = &unk_1EDD174A8;
  *double result = &unk_1EDD17478;
  return result;
}

double sub_18E06D658(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 24) = 0x100000004;
  *(void *)a1 = &unk_1EDD19458;
  *(_OWORD *)(a1 + 8) = xmmword_18E1F6F80;
  *(void *)(a1 + 32) = a1 + 40;
  *(void *)&double result = *(_OWORD *)&sub_18DFEF1F4(a2, a3, a1);
  return result;
}

void sub_18E06D6C4(_Unwind_Exception *a1)
{
  *unsigned int v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

uint64_t sub_18E06D6E4(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v8 = 0x100000001;
  uint64_t v6 = &unk_1EDD18078;
  *(void *)&long long v4 = 0x100000001;
  *((void *)&v4 + 1) = 0x100000001;
  long long v7 = v4;
  int v9 = &v10;
  int v10 = a4;
  return sub_18E06E064(a1, a2, a3, (uint64_t)&v6);
}

void sub_18E06D744(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 24) = 0x100000004;
  *(void *)a3 = &unk_1EDD19458;
  *(_OWORD *)(a3 + 8) = xmmword_18E1F6F80;
  *(void *)(a3 + 32) = a3 + 40;
  sub_18DFE2B44(a1, a2, a3);
}

void sub_18E06D7A8(_Unwind_Exception *a1)
{
  *unsigned int v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

double sub_18E06D7C8@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 24) = 0x400000004;
  *(void *)a3 = &unk_1EDD195A8;
  *(_OWORD *)(a3 + 8) = xmmword_18E1F6F70;
  *(void *)(a3 + 32) = a3 + 40;
  *(void *)&double result = *(_OWORD *)&sub_18DFEF1F4(a1, a2, a3);
  return result;
}

void sub_18E06D828(_Unwind_Exception *a1)
{
  *unsigned int v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

double sub_18E06D848(uint64_t a1, uint64_t a2, float64x2_t a3)
{
  *(void *)(a1 + 24) = 0x400000004;
  *(void *)a1 = &unk_1EDD195A8;
  *(_OWORD *)(a1 + 8) = xmmword_18E1F6F70;
  *(void *)(a1 + 32) = a1 + 40;
  *(void *)&double result = *(_OWORD *)&sub_18E06E238(a2, a1, a3);
  return result;
}

uint64_t sub_18E06D890(uint64_t result, uint64_t a2)
{
  int v2 = *(_DWORD *)(result + 8);
  if (v2 != *(_DWORD *)(a2 + 8)) {
    __assert_rtn("operator=", "cnsubmatrix.h", 376, "this->num_rows_ == A.num_rows_");
  }
  uint64_t v3 = *(unsigned int *)(result + 12);
  if (v3 != *(_DWORD *)(a2 + 12)) {
    __assert_rtn("operator=", "cnsubmatrix.h", 377, "this->num_cols_ == A.num_cols_");
  }
  if (v3)
  {
    unsigned int v4 = 0;
    uint64_t v5 = 0;
    uint64_t v6 = *(void *)(a2 + 32);
    do
    {
      if (v2)
      {
        uint64_t v7 = *(void *)(result + 72);
        uint64_t v8 = *(int **)(result + 112);
        int v9 = *(_DWORD *)(v7 + 20) * *(_DWORD *)(*(void *)(result + 168) + 4 * v5);
        uint64_t v10 = *(void *)(v7 + 32);
        uint64_t v11 = *(void *)(result + 32);
        int v12 = *(_DWORD *)(result + 20) * v5;
        unsigned int v13 = v4;
        int v14 = v2;
        do
        {
          uint64_t v15 = *(void *)(v6 + 8 * v13);
          int v16 = *v8++;
          *(void *)(v10 + 8 * (v16 + v9)) = v15;
          *(void *)(v11 + 8 * v12++) = v15;
          ++v13;
          --v14;
        }
        while (v14);
      }
      ++v5;
      v4 += v2;
    }
    while (v5 != v3);
  }
  return result;
}

void *sub_18E06D97C(void *result)
{
  result[17] = &unk_1EDD174A8;
  result[10] = &unk_1EDD174A8;
  *double result = &unk_1EDD17478;
  return result;
}

double sub_18E06D9DC(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 24) = 0x400000004;
  *(void *)a1 = &unk_1EDD195A8;
  *(_OWORD *)(a1 + 8) = xmmword_18E1F6F70;
  *(void *)(a1 + 32) = a1 + 40;
  *(void *)&double result = *(_OWORD *)&sub_18DFEF380(a2, a1);
  return result;
}

uint64_t sub_18E06DA24(uint64_t result, uint64_t a2)
{
  int v2 = *(_DWORD *)(result + 8);
  if (v2 != *(_DWORD *)(a2 + 8)) {
    __assert_rtn("operator=", "cnsubmatrix.h", 436, "this->num_rows_ == A.num_rows_");
  }
  uint64_t v3 = *(unsigned int *)(result + 12);
  if (v3 != *(_DWORD *)(a2 + 12)) {
    __assert_rtn("operator=", "cnsubmatrix.h", 437, "this->num_cols_ == A.num_cols_");
  }
  if (v3)
  {
    unsigned int v4 = 0;
    uint64_t v5 = 0;
    uint64_t v6 = *(void *)(a2 + 32);
    do
    {
      if (v2)
      {
        uint64_t v7 = *(void *)(result + 136);
        uint64_t v8 = *(int **)(result + 176);
        int v9 = *(_DWORD *)(v7 + 20) * *(_DWORD *)(*(void *)(result + 232) + 4 * v5);
        uint64_t v10 = *(void *)(v7 + 32);
        uint64_t v11 = *(void *)(result + 32);
        int v12 = *(_DWORD *)(result + 20) * v5;
        unsigned int v13 = v4;
        int v14 = v2;
        do
        {
          uint64_t v15 = *(void *)(v6 + 8 * v13);
          int v16 = *v8++;
          *(void *)(v10 + 8 * (v16 + v9)) = v15;
          *(void *)(v11 + 8 * v12++) = v15;
          ++v13;
          --v14;
        }
        while (v14);
      }
      ++v5;
      v4 += v2;
    }
    while (v5 != v3);
  }
  return result;
}

void *sub_18E06DB10(void *result)
{
  result[25] = &unk_1EDD174A8;
  result[18] = &unk_1EDD174A8;
  *double result = &unk_1EDD17478;
  return result;
}

uint64_t sub_18E06DB70(uint64_t result, uint64_t a2)
{
  int v2 = *(_DWORD *)(result + 8);
  if (v2 != *(_DWORD *)(a2 + 8)) {
    __assert_rtn("operator=", "cnsubmatrix.h", 436, "this->num_rows_ == A.num_rows_");
  }
  uint64_t v3 = *(unsigned int *)(result + 12);
  if (v3 != *(_DWORD *)(a2 + 12)) {
    __assert_rtn("operator=", "cnsubmatrix.h", 437, "this->num_cols_ == A.num_cols_");
  }
  if (v3)
  {
    unsigned int v4 = 0;
    uint64_t v5 = 0;
    uint64_t v6 = *(void *)(a2 + 32);
    do
    {
      if (v2)
      {
        uint64_t v7 = *(void *)(result + 112);
        uint64_t v8 = *(int **)(result + 152);
        int v9 = *(_DWORD *)(v7 + 20) * *(_DWORD *)(*(void *)(result + 208) + 4 * v5);
        uint64_t v10 = *(void *)(v7 + 32);
        uint64_t v11 = *(void *)(result + 32);
        int v12 = *(_DWORD *)(result + 20) * v5;
        unsigned int v13 = v4;
        int v14 = v2;
        do
        {
          uint64_t v15 = *(void *)(v6 + 8 * v13);
          int v16 = *v8++;
          *(void *)(v10 + 8 * (v16 + v9)) = v15;
          *(void *)(v11 + 8 * v12++) = v15;
          ++v13;
          --v14;
        }
        while (v14);
      }
      ++v5;
      v4 += v2;
    }
    while (v5 != v3);
  }
  return result;
}

void sub_18E06DC5C(void *a1)
{
  *a1 = &unk_1EDD174A8;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E06DC8C(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E06DC98(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    unsigned int v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      int v4 = *(_DWORD *)(a1 + 16);
      int v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        uint64_t v6 = (v4 - 1);
        uint64_t v7 = *(void *)(a1 + 32);
        uint64_t v8 = 1;
        do
        {
          int v9 = &v13[v8];
          if (!v13[v8])
          {
            int v10 = *(_DWORD *)(v7 + 4 * v8);
            int v11 = v8;
            do
            {
              int v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              int v12 = *(_DWORD *)(v7 + 4 * v11);
              *(_DWORD *)(v7 + 4 * v11) = v10;
              *int v9 = 1;
              int v9 = &v13[v11];
              int v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

uint64_t sub_18E06DD64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 24) = 0x100000003;
  *(_OWORD *)(a1 + 8) = xmmword_18E1F6F60;
  *(void *)(a1 + 32) = a1 + 40;
  *(void *)a1 = &unk_1EDD16C38;
  *(void *)(a1 + 64) = a2;
  *(void *)(a1 + 96) = 0x100000003;
  *(void *)(a1 + 72) = &unk_1EDD18DC8;
  *(_OWORD *)(a1 + 80) = xmmword_18E1F6F60;
  *(void *)(a1 + 104) = a1 + 112;
  sub_18DFEEA3C(a1 + 72, a3);
  int v6 = *(_DWORD *)(a1 + 80);
  int v5 = *(_DWORD *)(a1 + 84);
  *(_DWORD *)(a1 + 8) = v6;
  *(_DWORD *)(a1 + 12) = v5;
  uint64_t v7 = (v5 * v6);
  *(_DWORD *)(a1 + 16) = v7;
  *(_DWORD *)(a1 + 20) = v6;
  if ((int)v7 >= 1)
  {
    uint64_t v8 = *(int **)(a1 + 104);
    uint64_t v9 = *(void *)(a2 + 32);
    int v10 = *(void **)(a1 + 32);
    do
    {
      uint64_t v11 = *v8++;
      *v10++ = *(void *)(v9 + 8 * v11);
      --v7;
    }
    while (v7);
  }
  return a1;
}

void sub_18E06DE3C(void *a1)
{
  a1[9] = &unk_1EDD174A8;
  *a1 = &unk_1EDD17478;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E06DE8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(a1 + 24) = 0x400000004;
  *(_OWORD *)(a1 + 8) = xmmword_18E1F6F70;
  *(void *)(a1 + 32) = a1 + 40;
  *(void *)a1 = &unk_1EDD16788;
  *(void *)(a1 + 168) = a2;
  *(void *)(a1 + 200) = 0x100000004;
  *(void *)(a1 + 176) = &unk_1EDD19488;
  *(_OWORD *)(a1 + 184) = xmmword_18E1F6F80;
  *(void *)(a1 + 208) = a1 + 216;
  *(void *)(a1 + 256) = 0x100000004;
  *(void *)(a1 + 232) = &unk_1EDD19488;
  *(_OWORD *)(a1 + 240) = xmmword_18E1F6F80;
  *(void *)(a1 + 264) = a1 + 272;
  sub_18DFEEA3C(a1 + 176, a3);
  sub_18DFEEA3C(a1 + 232, a4);
  uint64_t v7 = *(unsigned int *)(a1 + 192);
  uint64_t v8 = *(unsigned int *)(a1 + 248);
  *(_DWORD *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 12) = v8;
  *(_DWORD *)(a1 + 16) = v8 * v7;
  *(_DWORD *)(a1 + 20) = v7;
  if (v8)
  {
    unsigned int v9 = 0;
    uint64_t v10 = 0;
    int v11 = *(_DWORD *)(a2 + 20);
    uint64_t v12 = *(void *)(a2 + 32);
    do
    {
      if (v7)
      {
        unsigned int v13 = *(int **)(a1 + 208);
        int v14 = *(_DWORD *)(*(void *)(a1 + 264) + 4 * v10) * v11;
        uint64_t v15 = *(void *)(a1 + 32);
        unsigned int v16 = v9;
        uint64_t v17 = v7;
        do
        {
          int v18 = *v13++;
          *(void *)(v15 + 8 * v16++) = *(void *)(v12 + 8 * (v18 + v14));
          --v17;
        }
        while (v17);
      }
      ++v10;
      v9 += v7;
    }
    while (v10 != v8);
  }
  return a1;
}

void sub_18E06DFF4(void *a1)
{
  a1[29] = &unk_1EDD174A8;
  a1[22] = &unk_1EDD174A8;
  *a1 = &unk_1EDD17478;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E06E064(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(a1 + 24) = 0x100000004;
  *(_OWORD *)(a1 + 8) = xmmword_18E1F6F80;
  *(void *)(a1 + 32) = a1 + 40;
  *(void *)a1 = &unk_1EDD16728;
  *(void *)(a1 + 72) = a2;
  *(void *)(a1 + 104) = 0x100000004;
  *(void *)(a1 + 80) = &unk_1EDD19488;
  *(_OWORD *)(a1 + 88) = xmmword_18E1F6F80;
  *(void *)(a1 + 112) = a1 + 120;
  *(void *)(a1 + 160) = 0x100000001;
  *(void *)(a1 + 136) = &unk_1EDD18078;
  *(void *)&long long v7 = 0x100000001;
  *((void *)&v7 + 1) = 0x100000001;
  *(_OWORD *)(a1 + 144) = v7;
  *(void *)(a1 + 168) = a1 + 176;
  sub_18DFEEA3C(a1 + 80, a3);
  sub_18DFEEA3C(a1 + 136, a4);
  uint64_t v8 = *(unsigned int *)(a1 + 96);
  uint64_t v9 = *(unsigned int *)(a1 + 152);
  *(_DWORD *)(a1 + 8) = v8;
  *(_DWORD *)(a1 + 12) = v9;
  *(_DWORD *)(a1 + 16) = v9 * v8;
  *(_DWORD *)(a1 + 20) = v8;
  if (v9)
  {
    unsigned int v10 = 0;
    uint64_t v11 = 0;
    int v12 = *(_DWORD *)(a2 + 20);
    uint64_t v13 = *(void *)(a2 + 32);
    do
    {
      if (v8)
      {
        int v14 = *(int **)(a1 + 112);
        int v15 = *(_DWORD *)(*(void *)(a1 + 168) + 4 * v11) * v12;
        uint64_t v16 = *(void *)(a1 + 32);
        unsigned int v17 = v10;
        uint64_t v18 = v8;
        do
        {
          int v19 = *v14++;
          *(void *)(v16 + 8 * v17++) = *(void *)(v13 + 8 * (v19 + v15));
          --v18;
        }
        while (v18);
      }
      ++v11;
      v10 += v8;
    }
    while (v11 != v9);
  }
  return a1;
}

void sub_18E06E1C8(void *a1)
{
  a1[17] = &unk_1EDD174A8;
  a1[10] = &unk_1EDD174A8;
  *a1 = &unk_1EDD17478;
  JUMPOUT(0x192FA6240);
}

float64x2_t sub_18E06E238(uint64_t a1, uint64_t a2, float64x2_t result)
{
  int v3 = *(_DWORD *)(a1 + 8);
  int v4 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a2 + 8) = v3;
  *(_DWORD *)(a2 + 12) = v4;
  uint64_t v5 = (v4 * v3);
  *(_DWORD *)(a2 + 16) = v5;
  *(_DWORD *)(a2 + 20) = v3;
  unsigned int v6 = v5 - 1;
  if ((int)v5 >= 1)
  {
    long long v7 = *(float64x2_t **)(a1 + 32);
    uint64_t v8 = *(double **)(a2 + 32);
    uint64_t v9 = (double *)v7;
    unsigned int v10 = v8;
    uint64_t v11 = v5;
    do
    {
      double v12 = *v9++;
      *v10++ = v12 * result.f64[0];
      --v11;
    }
    while (v11);
    if ((int)v5 > 3)
    {
      uint64_t v14 = (v5 - 2);
      int v15 = (float64x2_t *)((char *)v7 + 8 * v14);
      uint64_t v16 = v6 >> 1;
      unsigned int v17 = (float64x2_t *)v8;
      do
      {
        float64x2_t v18 = *v7++;
        *v17++ = vmulq_n_f64(v18, result.f64[0]);
        --v16;
      }
      while (v16);
      double result = vmulq_n_f64(*v15, result.f64[0]);
      *(float64x2_t *)&v8[v14] = result;
    }
    else
    {
      do
      {
        double v13 = v7->f64[0];
        long long v7 = (float64x2_t *)((char *)v7 + 8);
        *v8++ = v13 * result.f64[0];
        --v5;
      }
      while (v5);
    }
  }
  return result;
}

uint64_t sub_18E06E2D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(a1 + 24) = 0x300000004;
  *(_OWORD *)(a1 + 8) = xmmword_18E1F6F90;
  *(void *)(a1 + 32) = a1 + 40;
  *(void *)a1 = &unk_1EDD16758;
  *(void *)(a1 + 136) = a2;
  *(void *)(a1 + 168) = 0x100000004;
  *(void *)(a1 + 144) = &unk_1EDD19488;
  *(_OWORD *)(a1 + 152) = xmmword_18E1F6F80;
  *(void *)(a1 + 176) = a1 + 184;
  *(void *)(a1 + 224) = 0x100000003;
  *(void *)(a1 + 200) = &unk_1EDD18DC8;
  *(_OWORD *)(a1 + 208) = xmmword_18E1F6F60;
  *(void *)(a1 + 232) = a1 + 240;
  sub_18DFEEA3C(a1 + 144, a3);
  sub_18DFEEA3C(a1 + 200, a4);
  uint64_t v7 = *(unsigned int *)(a1 + 160);
  uint64_t v8 = *(unsigned int *)(a1 + 216);
  *(_DWORD *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 12) = v8;
  *(_DWORD *)(a1 + 16) = v8 * v7;
  *(_DWORD *)(a1 + 20) = v7;
  if (v8)
  {
    unsigned int v9 = 0;
    uint64_t v10 = 0;
    int v11 = *(_DWORD *)(a2 + 20);
    uint64_t v12 = *(void *)(a2 + 32);
    do
    {
      if (v7)
      {
        double v13 = *(int **)(a1 + 176);
        int v14 = *(_DWORD *)(*(void *)(a1 + 232) + 4 * v10) * v11;
        uint64_t v15 = *(void *)(a1 + 32);
        unsigned int v16 = v9;
        uint64_t v17 = v7;
        do
        {
          int v18 = *v13++;
          *(void *)(v15 + 8 * v16++) = *(void *)(v12 + 8 * (v18 + v14));
          --v17;
        }
        while (v17);
      }
      ++v10;
      v9 += v7;
    }
    while (v10 != v8);
  }
  return a1;
}

void sub_18E06E44C(void *a1)
{
  a1[25] = &unk_1EDD174A8;
  a1[18] = &unk_1EDD174A8;
  *a1 = &unk_1EDD17478;
  JUMPOUT(0x192FA6240);
}

void sub_18E06E4BC(uint64_t a1, int a2, int a3)
{
  *(void *)(a1 + 24) = 0x1A0000001ALL;
  *(void *)a1 = &unk_1EDD18768;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = a3;
  *(_DWORD *)(a1 + 16) = a3 * a2;
  *(_DWORD *)(a1 + 20) = a2;
  sub_18E06B6B8();
}

void sub_18E06E520(_Unwind_Exception *exception_object)
{
  uint64_t v3 = v1[5];
  v1[5] = 0;
  if (v3) {
    MEMORY[0x192FA6220](v3, 0x1000C8000313F17);
  }
  *unsigned int v1 = &unk_1EDD17478;
  _Unwind_Resume(exception_object);
}

uint64_t sub_18E06E568(uint64_t a1, double *a2)
{
  double v3 = *a2;
  if (*a2 >= 0.0 && v3 <= 1.0)
  {
    uint64_t result = 0;
    *(double *)a1 = v3;
    *(double *)(a1 + 8) = v3;
    *(_DWORD *)(a1 + 16) = 1;
  }
  else
  {
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)a1) <= 1)
    {
      __int16 v13 = 2;
      unsigned __int8 v12 = 1;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v13, &v12, "WARNING: DiscreteEventDetector::Initialize called with bad xbar %.3lf.", v5, v6, v7, v8, v9, *(void *)a2);
    }
    return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t sub_18E06E600(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v4 = 0;
    *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    uint64_t v5 = 292;
    do
    {
      uint64_t v6 = (_DWORD *)(a1 + v5);
      *(v6 - 63) = *(_DWORD *)(a2 + v5 - 252);
      *uint64_t v6 = *(_DWORD *)(a2 + v5);
      uint64_t v7 = (void *)(a1 + v4);
      v7[68] = *(void *)(a2 + v4 + 544);
      v7[131] = *(void *)(a2 + v4 + 1048);
      v7[194] = *(void *)(a2 + v4 + 1552);
      v7[257] = *(void *)(a2 + v4 + 2056);
      v4 += 8;
      v5 += 4;
    }
    while (v4 != 504);
    *(_DWORD *)(a1 + 2560) = *(_DWORD *)(a2 + 2560);
    cnnavigation::LinearizedGravityModel::operator=(a1 + 2568, a2 + 2568);
    *(_DWORD *)(a1 + 2720) = *(_DWORD *)(a2 + 2720);
  }
  return a1;
}

void sub_18E06E6BC(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 24) = 0x1A0000001ALL;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1EDD18768;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  if (a1 != a2)
  {
    int v2 = *(_DWORD *)(a2 + 8);
    int v3 = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(a1 + 8) = v2;
    *(_DWORD *)(a1 + 12) = v3;
    *(_DWORD *)(a1 + 16) = v3 * v2;
    *(_DWORD *)(a1 + 20) = v2;
    sub_18E06B6B8();
  }
  __assert_rtn("CNMatrix", "cnmatrix.h", 603, "this != &(A)");
}

void sub_18E06E814(_Unwind_Exception *exception_object)
{
  uint64_t v3 = v1[5];
  v1[5] = 0;
  if (v3) {
    MEMORY[0x192FA6220](v3, 0x1000C8000313F17);
  }
  *unsigned int v1 = &unk_1EDD17478;
  _Unwind_Resume(exception_object);
}

void sub_18E06E85C(uint64_t a1)
{
  *(void *)(a1 + 24) = 0x1A0000001ALL;
  *(void *)a1 = &unk_1EDD18768;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 8) = xmmword_18E1FD6D0;
  sub_18E06B6B8();
}

void sub_18E06E8C0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = v1[5];
  v1[5] = 0;
  if (v3) {
    MEMORY[0x192FA6220](v3, 0x1000C8000313F17);
  }
  *unsigned int v1 = &unk_1EDD17478;
  _Unwind_Resume(exception_object);
}

void *sub_18E06E908(void *result)
{
  *uint64_t result = &unk_1EDD17478;
  return result;
}

void sub_18E06E928(void *a1)
{
  *a1 = &unk_1EDD174A8;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E06E958(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E06E964(uint64_t a1)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  sub_18DFE2870(a1, v1);
}

void sub_18E06E9B4(void *a1)
{
  *a1 = &unk_1EDD17478;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E06E9E4(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E06E9F0(uint64_t a1)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  sub_18DEF3CF4(a1, v1);
}

void sub_18E06EA40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_18DFE2F24(a4, a1);
  __CLPK_integer v8 = *(_DWORD *)(a4 + 8);
  uint64_t v9 = *(__CLPK_doublereal **)(a4 + 32);
  __CLPK_integer v10 = *(_DWORD *)(a4 + 20);
  int v11 = *(__CLPK_doublereal **)(a2 + 32);
  unsigned __int8 v12 = *(__CLPK_doublereal **)(a3 + 32);
  __CLPK_integer v13 = *(_DWORD *)(a3 + 28) * *(_DWORD *)(a3 + 24);
  __CLPK_integer __n = *(_DWORD *)(a4 + 12);
  __uint64_t m = v8;
  __lworuint64_t k = v13;
  __CLPK_integer __lda = v10;
  __CLPK_integer __info = 0;
  int v14 = (cnprint::CNPrinter *)dgeqrf_(&__m, &__n, v9, &__lda, v11, v12, &__lwork, &__info);
  if (__info)
  {
    LOWORD(__m) = 4;
    LOBYTE(__n) = 5;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&__m, (unsigned __int8 *)&__n, "Error using Qr: input argument %d invalid in geqrf.", v15, v16, v17, v18, v19, -(char)__info);
  }
  int v20 = (int)**(double **)(a3 + 32);
  if (v13 < v20 && cnprint::CNPrinter::GetLogLevel(v14) <= 1)
  {
    LOWORD(__m) = 4;
    LOBYTE(__n) = 1;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&__m, (unsigned __int8 *)&__n, "Warning: Qr optimal workspace size %d is greater than provided workspace size %d; performance may suffer.",
      v21,
      v22,
      v23,
      v24,
      v25,
      v20);
  }
  unsigned int v26 = *(_DWORD *)(a1 + 8);
  if (v26 >= *(_DWORD *)(a1 + 12)) {
    unsigned int v26 = *(_DWORD *)(a1 + 12);
  }
  int32x4_t v27 = vdupq_lane_s32((int32x2_t)(v26 | 0x100000000), 0);
  v27.i32[1] = 1;
  *(int32x4_t *)(a2 + 8) = v27;
  int v28 = *(_DWORD *)(a3 + 24);
  int v29 = *(_DWORD *)(a3 + 28);
  *(_DWORD *)(a3 + 8) = v28;
  *(_DWORD *)(a3 + 12) = v29;
  *(_DWORD *)(a3 + 16) = v29 * v28;
  *(_DWORD *)(a3 + 20) = v28;
  int v30 = *(_DWORD *)(a4 + 12);
  if (v30)
  {
    unsigned int v31 = 0;
    unsigned int v32 = *(_DWORD *)(a4 + 8);
    uint64_t v33 = *(void *)(a4 + 32);
    unsigned int v34 = v32 - 1;
    int v35 = *(_DWORD *)(a4 + 20) + 1;
    int v36 = 1;
    do
    {
      ++v31;
      int v37 = v36;
      unsigned int v38 = v34;
      if (v31 < v32)
      {
        do
        {
          *(void *)(v33 + 8 * v37++) = 0;
          --v38;
        }
        while (v38);
      }
      --v34;
      v36 += v35;
    }
    while (v31 != v30);
  }
}

void sub_18E06EBD8(uint64_t a1, int a2, int a3)
{
  *(void *)(a1 + 24) = 0x1C0000001CLL;
  *(void *)a1 = &unk_1EDD18978;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = a3;
  *(_DWORD *)(a1 + 16) = a3 * a2;
  *(_DWORD *)(a1 + 20) = a2;
  sub_18E069B7C();
}

void sub_18E06EC3C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = v1[5];
  v1[5] = 0;
  if (v3) {
    MEMORY[0x192FA6220](v3, 0x1000C8000313F17);
  }
  *unsigned int v1 = &unk_1EDD17478;
  _Unwind_Resume(exception_object);
}

uint64_t sub_18E06EC84(uint64_t a1, uint64_t a2, int a3, char a4, int a5, uint64_t a6, uint64_t a7, BOOL *a8, double a9)
{
  uint64_t v28 = 0x10000001CLL;
  unsigned int v26 = &unk_1EDD188B8;
  int v29 = v30;
  long long v27 = xmmword_18E1FD5F0;
  sub_18DFE2CC8((uint64_t)&v26, 0.0);
  sub_18DFE2F24(a6, (uint64_t)&v26);
  for (uint64_t i = 10; i != 29; ++i)
    *((_DWORD *)&v26 + i) = i - 10;
  uint64_t v39 = 0x100000013;
  v41[1] = v30[1];
  void v41[2] = v30[2];
  int v37 = &unk_1EDD17CE8;
  uint64_t v40 = v41;
  v42[0] = v31[0];
  *(_OWORD *)((char *)v42 + 12) = *(_OWORD *)((char *)v31 + 12);
  long long v38 = xmmword_18E1FD730;
  v41[0] = v30[0];
  uint64_t v34 = 0x100000013;
  long long v33 = xmmword_18E1FD730;
  unsigned int v32 = &unk_1EDD17CB8;
  int v35 = (double *)v36;
  sub_18E06BA00(a1, a2, (uint64_t)&v32, a7);
  sub_18E0818A4((uint64_t)&v26, a6, (uint64_t)&v37);
  sub_18E06F000((uint64_t)&v26, SDWORD2(v33), v35);
  if (a4)
  {
    *(void *)&v30[0] = 0x1400000013;
    uint64_t v39 = 0x100000002;
    int v37 = &unk_1EDD18B58;
    long long v38 = xmmword_18E1FD1A0;
    uint64_t v40 = v41;
    *(void *)&v41[0] = 0x1400000013;
    uint64_t v34 = 0x100000002;
    unsigned int v32 = &unk_1EDD18B28;
    int v35 = (double *)v36;
    long long v33 = xmmword_18E1FD1A0;
    v36[0] = vaddq_f64(*(float64x2_t *)(*(void *)(a1 + 32) + 152), *(float64x2_t *)(*(void *)(a2 + 32) + 144));
    __asm { FMOV            V0.2D, #1.0 }
    *(_OWORD *)(a7 + 216) = _Q0;
    sub_18E070534((uint64_t)&v26, a6, (uint64_t)&v37);
    sub_18E06F074((uint64_t)&v26, SDWORD2(v33), v35);
  }
  if (a5)
  {
    for (uint64_t j = 10; j != 17; ++j)
      *((_DWORD *)&v26 + j) = j + 11;
    uint64_t v39 = 0x100000007;
    int v37 = &unk_1EDD19818;
    uint64_t v40 = v41;
    long long v38 = xmmword_18E1FD680;
    v41[0] = v30[0];
    *(_OWORD *)((char *)v41 + 12) = *(_OWORD *)((char *)v30 + 12);
    uint64_t v34 = 0x100000007;
    long long v33 = xmmword_18E1FD680;
    unsigned int v32 = &unk_1EDD197E8;
    int v35 = (double *)v36;
    if (sub_18E06F128(a1, a2, a3, (uint64_t)&v32, a7, a8, a9)) {
      return 0xFFFFFFFFLL;
    }
    sub_18E06CE44((uint64_t)&v26, a6, (uint64_t)&v37);
    sub_18E06C83C((uint64_t)&v26, SDWORD2(v33), v35);
  }
  return 0;
}

double sub_18E06F000(uint64_t a1, int a2, double *a3)
{
  if (*(_DWORD *)(a1 + 16) != a2) {
    __assert_rtn("operator=", "cnsubvector.h", 347, "this->num_elements_ == A.num_elements_");
  }
  if (a2 >= 1)
  {
    uint64_t v3 = *(int **)(a1 + 232);
    uint64_t v4 = *(void *)(*(void *)(a1 + 192) + 32);
    uint64_t v5 = *(double **)(a1 + 32);
    uint64_t v6 = a2;
    do
    {
      double v7 = *a3++;
      double result = v7;
      uint64_t v9 = *v3++;
      *(double *)(v4 + 8 * v9) = result;
      *v5++ = result;
      --v6;
    }
    while (v6);
  }
  return result;
}

double sub_18E06F074(uint64_t a1, int a2, double *a3)
{
  if (*(_DWORD *)(a1 + 16) != a2) {
    __assert_rtn("operator=", "cnsubvector.h", 347, "this->num_elements_ == A.num_elements_");
  }
  if (a2 >= 1)
  {
    uint64_t v3 = *(int **)(a1 + 96);
    uint64_t v4 = *(void *)(*(void *)(a1 + 56) + 32);
    uint64_t v5 = *(double **)(a1 + 32);
    uint64_t v6 = a2;
    do
    {
      double v7 = *a3++;
      double result = v7;
      uint64_t v9 = *v3++;
      *(double *)(v4 + 8 * v9) = result;
      *v5++ = result;
      --v6;
    }
    while (v6);
  }
  return result;
}

void *sub_18E06F0E8(void *result)
{
  result[8] = &unk_1EDD174A8;
  *double result = &unk_1EDD17478;
  return result;
}

uint64_t sub_18E06F128(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, BOOL *a6, double a7)
{
  if ((*(uint64_t *)&a7 <= -1 || ((*(void *)&a7 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF)
    && (unint64_t)(*(void *)&a7 - 1) >= 0xFFFFFFFFFFFFFLL
    && (*(void *)&a7 & 0x7FFFFFFFFFFFFFFFLL) != 0)
  {
    return 0xFFFFFFFFLL;
  }
  *(_OWORD *)(a4 + 8) = xmmword_18E1FD680;
  if (a3)
  {
    if (a3 == 1)
    {
      uint64_t v235 = 0x100000003;
      double v233 = &unk_1EDD18DC8;
      long long v234 = xmmword_18E1F6F60;
      int v238 = 2;
      double v236 = &v237;
      uint64_t v237 = 0x100000000;
      uint64_t v229 = 0x100000003;
      double v227 = &unk_1EDD18DC8;
      double v230 = &v231;
      long long v228 = xmmword_18E1F6F60;
      int v232 = 23;
      uint64_t v231 = 0x1600000015;
      uint64_t v223 = 0x100000003;
      uint64_t v221 = &unk_1EDD18DC8;
      long long v224 = &v225;
      long long v222 = xmmword_18E1F6F60;
      int v226 = 2;
      uint64_t v225 = 0x100000000;
      uint64_t v217 = 0x100000003;
      uint64_t v215 = &unk_1EDD18DC8;
      int64x2_t v218 = &v219;
      long long v216 = xmmword_18E1F6F60;
      int v220 = 22;
      uint64_t v219 = 0x1500000014;
      uint64_t v211 = 0x100000003;
      int v209 = &unk_1EDD18DC8;
      int64x2_t v212 = &v213;
      long long v210 = xmmword_18E1F6F60;
      int v214 = 2;
      uint64_t v213 = 0x100000000;
      uint64_t v179 = 0x500000004;
      uint64_t v205 = 0x100000003;
      double v203 = &unk_1EDD18DC8;
      int v206 = &v207;
      long long v204 = xmmword_18E1F6F60;
      int v208 = 6;
      uint64_t v207 = 0x500000004;
      int v35 = *(double **)(a1 + 32);
      double v36 = v35[6];
      double v37 = v35[7];
      double v38 = v35[8];
      double v39 = v35[9];
      double v40 = sqrt(v37 * v37 + v36 * v36 + v38 * v38 + v39 * v39);
      double v41 = 1.0;
      double v42 = 0.0;
      double v43 = 0.0;
      double v44 = 0.0;
      double v45 = 0.0;
      double v46 = 1.0;
      if (fabs(v40) >= 2.22044605e-16)
      {
        double v43 = v36 / v40;
        double v44 = v37 / v40;
        double v45 = v38 / v40;
        double v46 = v39 / v40;
      }
      double v47 = sqrt(v44 * v44 + v43 * v43 + v45 * v45 + v46 * v46);
      double v48 = 0.0;
      double v49 = 0.0;
      if (fabs(v47) >= 2.22044605e-16)
      {
        double v42 = -v43 / v47;
        double v48 = -v44 / v47;
        double v49 = -v45 / v47;
        double v41 = v46 / v47;
      }
      v200.f64[0] = v42;
      v200.f64[1] = v48;
      double v201 = v49;
      double v202 = v41;
      cnrotation::CNRotation::RotationMatrix((cnrotation::CNRotation *)&v200, (uint64_t)v197);
      sub_18E06010C((uint64_t)v176, a1, (uint64_t)&v227);
      sub_18E060170((uint64_t)&v118, *(void *)(a2 + 32), (uint64_t)&v215);
      uint64_t v194 = 0x100000003;
      long long v193 = xmmword_18E1F6F60;
      double v192 = &unk_1EDD18D98;
      double v195 = &v196;
      sub_18DFEF1F4((uint64_t)v176, (uint64_t)&v118, (uint64_t)&v192);
      sub_18E06010C((uint64_t)v186, a1, (uint64_t)&v233);
      sub_18E060170((uint64_t)v185, *(void *)(a2 + 32), (uint64_t)&v221);
      uint64_t v189 = 0x100000003;
      long long v188 = xmmword_18E1F6F60;
      double v187 = &unk_1EDD18D98;
      uint64_t v190 = &v191;
      sub_18DFEF1F4((uint64_t)v186, (uint64_t)v185, (uint64_t)&v187);
      uint64_t v182 = 0x100000003;
      double v180 = &unk_1EDD18D98;
      long long v181 = xmmword_18E1F6F60;
      long long v183 = &v184;
      sub_18DFE2B44((uint64_t)v197, (uint64_t)&v192, (uint64_t)&v180);
      uint64_t v120 = 0x100000003;
      long long v119 = xmmword_18E1F6F60;
      double v118 = &unk_1EDD18D98;
      double v121 = v122;
      sub_18DFEF1F4((uint64_t)&v187, (uint64_t)&v180, (uint64_t)&v118);
      sub_18E06DD64((uint64_t)v176, a4, (uint64_t)&v209);
      sub_18E0601D0((uint64_t)v176, (uint64_t)&v118);
      cnrotation::CNRotation::dRdq1((cnrotation::CNRotation *)&v200, (uint64_t)&v187);
      cnrotation::CNRotation::dRdq2((cnrotation::CNRotation *)&v200, (uint64_t)v186);
      cnrotation::CNRotation::dRdq3((cnrotation::CNRotation *)&v200, (uint64_t)v185);
      cnrotation::CNRotation::dRdq4(&v200, (uint64_t)&v180);
      cnrotation::CNRotation::dqddq((cnrotation::CNRotation *)&v200, (uint64_t)v176);
      v50.f64[0] = *v178;
      uint64_t v163 = 0x300000003;
      long long v162 = xmmword_18E1F0010;
      long long v161 = &unk_1EDD18EE8;
      long long v164 = v165;
      float64x2_t v51 = sub_18E06E238((uint64_t)&v187, (uint64_t)&v161, v50);
      v51.f64[0] = v178[1];
      uint64_t v150 = 0x300000003;
      long long v149 = xmmword_18E1F0010;
      uint64_t v148 = &unk_1EDD18EE8;
      uint64_t v151 = &v152;
      sub_18E06E238((uint64_t)v186, (uint64_t)&v148, v51);
      uint64_t v168 = 0x300000003;
      long long v167 = xmmword_18E1F0010;
      long long v166 = &unk_1EDD18EE8;
      long long v169 = v170;
      float64x2_t v52 = sub_18DFEF1F4((uint64_t)&v161, (uint64_t)&v148, (uint64_t)&v166);
      v52.f64[0] = v178[2];
      uint64_t v145 = 0x300000003;
      long long v144 = xmmword_18E1F0010;
      double v143 = &unk_1EDD18EE8;
      uint64_t v146 = v147;
      sub_18E06E238((uint64_t)v185, (uint64_t)&v143, v52);
      uint64_t v120 = 0x300000003;
      long long v119 = xmmword_18E1F0010;
      double v118 = &unk_1EDD18EE8;
      double v121 = v122;
      float64x2_t v53 = sub_18DFEF1F4((uint64_t)&v166, (uint64_t)&v143, (uint64_t)&v118);
      v53.f64[0] = v178[3];
      uint64_t v140 = 0x300000003;
      long long v139 = xmmword_18E1F0010;
      double v138 = &unk_1EDD18EE8;
      double v141 = v142;
      sub_18E06E238((uint64_t)&v180, (uint64_t)&v138, v53);
      uint64_t v173 = 0x300000003;
      long long v172 = xmmword_18E1F0010;
      long long v171 = &unk_1EDD18EE8;
      uint64_t v174 = &v175;
      float64x2_t v54 = sub_18DFEF1F4((uint64_t)&v118, (uint64_t)&v138, (uint64_t)&v171);
      v54.f64[0] = v178[v177];
      uint64_t v150 = 0x300000003;
      long long v149 = xmmword_18E1F0010;
      uint64_t v148 = &unk_1EDD18EE8;
      uint64_t v151 = &v152;
      float64x2_t v55 = sub_18E06E238((uint64_t)&v187, (uint64_t)&v148, v54);
      v55.f64[0] = v178[v177 + 1];
      uint64_t v145 = 0x300000003;
      long long v144 = xmmword_18E1F0010;
      double v143 = &unk_1EDD18EE8;
      uint64_t v146 = v147;
      sub_18E06E238((uint64_t)v186, (uint64_t)&v143, v55);
      uint64_t v163 = 0x300000003;
      long long v162 = xmmword_18E1F0010;
      long long v161 = &unk_1EDD18EE8;
      long long v164 = v165;
      float64x2_t v56 = sub_18DFEF1F4((uint64_t)&v148, (uint64_t)&v143, (uint64_t)&v161);
      v56.f64[0] = v178[v177 + 2];
      uint64_t v140 = 0x300000003;
      long long v139 = xmmword_18E1F0010;
      double v138 = &unk_1EDD18EE8;
      double v141 = v142;
      sub_18E06E238((uint64_t)v185, (uint64_t)&v138, v56);
      uint64_t v120 = 0x300000003;
      long long v119 = xmmword_18E1F0010;
      double v118 = &unk_1EDD18EE8;
      double v121 = v122;
      float64x2_t v57 = sub_18DFEF1F4((uint64_t)&v161, (uint64_t)&v138, (uint64_t)&v118);
      v57.f64[0] = v178[v177 + 3];
      uint64_t v135 = 0x300000003;
      long long v134 = xmmword_18E1F0010;
      double v133 = &unk_1EDD18EE8;
      double v136 = v137;
      sub_18E06E238((uint64_t)&v180, (uint64_t)&v133, v57);
      uint64_t v168 = 0x300000003;
      long long v167 = xmmword_18E1F0010;
      long long v166 = &unk_1EDD18EE8;
      long long v169 = v170;
      float64x2_t v58 = sub_18DFEF1F4((uint64_t)&v118, (uint64_t)&v133, (uint64_t)&v166);
      v58.f64[0] = v178[2 * v177];
      uint64_t v145 = 0x300000003;
      long long v144 = xmmword_18E1F0010;
      double v143 = &unk_1EDD18EE8;
      uint64_t v146 = v147;
      float64x2_t v59 = sub_18E06E238((uint64_t)&v187, (uint64_t)&v143, v58);
      v59.f64[0] = v178[2 * v177 + 1];
      uint64_t v140 = 0x300000003;
      long long v139 = xmmword_18E1F0010;
      double v138 = &unk_1EDD18EE8;
      double v141 = v142;
      sub_18E06E238((uint64_t)v186, (uint64_t)&v138, v59);
      uint64_t v150 = 0x300000003;
      long long v149 = xmmword_18E1F0010;
      uint64_t v148 = &unk_1EDD18EE8;
      uint64_t v151 = &v152;
      float64x2_t v60 = sub_18DFEF1F4((uint64_t)&v143, (uint64_t)&v138, (uint64_t)&v148);
      v60.f64[0] = v178[2 * v177 + 2];
      uint64_t v135 = 0x300000003;
      long long v134 = xmmword_18E1F0010;
      double v133 = &unk_1EDD18EE8;
      double v136 = v137;
      sub_18E06E238((uint64_t)v185, (uint64_t)&v133, v60);
      uint64_t v120 = 0x300000003;
      long long v119 = xmmword_18E1F0010;
      double v118 = &unk_1EDD18EE8;
      double v121 = v122;
      float64x2_t v61 = sub_18DFEF1F4((uint64_t)&v148, (uint64_t)&v133, (uint64_t)&v118);
      v61.f64[0] = v178[2 * v177 + 3];
      uint64_t v130 = 0x300000003;
      long long v129 = xmmword_18E1F0010;
      double v128 = &unk_1EDD18EE8;
      double v131 = v132;
      sub_18E06E238((uint64_t)&v180, (uint64_t)&v128, v61);
      uint64_t v163 = 0x300000003;
      long long v162 = xmmword_18E1F0010;
      long long v161 = &unk_1EDD18EE8;
      long long v164 = v165;
      sub_18DFEF1F4((uint64_t)&v118, (uint64_t)&v128, (uint64_t)&v161);
      uint64_t v140 = 0x100000003;
      long long v139 = xmmword_18E1F6F60;
      double v138 = &unk_1EDD18D98;
      double v141 = v142;
      sub_18DFE2B44((uint64_t)&v171, (uint64_t)&v192, (uint64_t)&v138);
      uint64_t v135 = 0x100000003;
      long long v134 = xmmword_18E1F6F60;
      double v133 = &unk_1EDD18D98;
      double v136 = v137;
      sub_18DFE2B44((uint64_t)&v166, (uint64_t)&v192, (uint64_t)&v133);
      uint64_t v130 = 0x100000003;
      long long v129 = xmmword_18E1F6F60;
      double v128 = &unk_1EDD18D98;
      double v131 = v132;
      sub_18DFE2B44((uint64_t)&v161, (uint64_t)&v192, (uint64_t)&v128);
      *(void *)(a5 + 232) = 0x3FF0000000000000;
      uint64_t v62 = v141;
      *(void *)(a5 + 240) = *v141;
      double v63 = v136;
      *(void *)(a5 + 248) = *v136;
      double v64 = v131;
      *(void *)(a5 + 256) = *v131;
      double v65 = v199;
      *(void *)(a5 + 264) = *v199;
      uint64_t v66 = v198;
      *(void *)(a5 + 272) = v65[v198];
      *(void *)(a5 + 280) = v65[2 * v66];
      *(void *)(a5 + 288) = 0x3FF0000000000000;
      *(void *)(a5 + 296) = v62[1];
      *(void *)(a5 + 304) = v63[1];
      *(void *)(a5 + 312) = v64[1];
      *(void *)(a5 + 320) = v65[1];
      *(void *)(a5 + 328) = v65[(int)v66 + 1];
      long long v67 = &v65[2 * (int)v66];
      *(void *)(a5 + 336) = v67[1];
      *(void *)(a5 + 344) = 0x3FF0000000000000;
      *(void *)(a5 + 352) = v62[2];
      *(void *)(a5 + 360) = v63[2];
      *(void *)(a5 + 368) = v64[2];
      *(void *)(a5 + 376) = v65[2];
      *(void *)(a5 + 384) = v65[(int)v66 + 2];
      *(void *)(a5 + 392) = v67[2];
      uint64_t v125 = 0x100000003;
      long long v124 = xmmword_18E1F6F60;
      double v123 = &unk_1EDD18D98;
      double v126 = (double *)&v127;
      uint64_t v68 = *(double **)(a1 + 32);
      v69.f64[0] = v68[25];
      double v70 = v68[26];
      double v71 = v68[27];
      double v72 = sqrt(v70 * v70 + v69.f64[0] * v69.f64[0] + v71 * v71);
      if (fabs(v72) <= 0.000000015) {
        return 0xFFFFFFFFLL;
      }
      double v73 = v68[24];
      uint64_t v150 = 0x100000003;
      long long v149 = xmmword_18E1F6F60;
      uint64_t v148 = &unk_1EDD18D98;
      uint64_t v151 = &v152;
      double v152 = v69.f64[0];
      double v153 = v70;
      double v154 = v71;
      uint64_t v120 = 0x100000003;
      long long v119 = xmmword_18E1F6F60;
      double v118 = &unk_1EDD18D98;
      double v121 = v122;
      v69.f64[0] = 1.0 / v72;
      sub_18DFE3240((uint64_t)&v148, (uint64_t)&v118, v69);
      sub_18DFE2F24((uint64_t)&v123, (uint64_t)&v118);
      *(double *)(*(void *)(a4 + 32) + 24) = v73 * v72;
      uint64_t v145 = 0x100000003;
      long long v144 = xmmword_18E1F6F60;
      double v143 = &unk_1EDD18D98;
      uint64_t v146 = v147;
      sub_18DFE2B44((uint64_t)v197, (uint64_t)&v123, (uint64_t)&v143);
      sub_18E06DD64((uint64_t)&v118, a4, (uint64_t)&v203);
      sub_18E0601D0((uint64_t)&v118, (uint64_t)&v143);
      double v74 = *(double **)(a1 + 32);
      double v76 = v74[24];
      double v75 = v74[25];
      uint64_t v77 = *(double **)(a2 + 32);
      double v78 = v77[23] + v76 * v75;
      double v80 = v74[26];
      double v79 = v74[27];
      double v81 = v77[24] + v76 * v80;
      double v82 = v77[25] + v76 * v79;
      double v83 = sqrt(v81 * v81 + v78 * v78 + v82 * v82);
      *a6 = v83 < a7;
      if (fabs(v83) <= 0.000000015)
      {
        __asm { FMOV            V0.2D, #1.0 }
        *(_OWORD *)(a5 + 400) = _Q0;
        *(void *)(a5 + 416) = 0x3FF0000000000000;
        *(_OWORD *)(a5 + 424) = 0u;
        *(_OWORD *)(a5 + 440) = 0u;
        *(_OWORD *)(a5 + 456) = 0u;
        *(_OWORD *)(a5 + 472) = 0u;
        *(_OWORD *)(a5 + 488) = 0u;
        *(_OWORD *)(a5 + 504) = 0u;
        *(_OWORD *)(a5 + 520) = 0u;
        *(_OWORD *)(a5 + 536) = 0u;
        *(_OWORD *)(a5 + 552) = 0u;
      }
      else
      {
        double v84 = 1.0 / v83;
        double v85 = v78 * (1.0 / v83);
        double v86 = v81 * (1.0 / v83);
        double v87 = v82 * (1.0 / v83);
        _NF = v83 < a7;
        if (v83 >= a7) {
          double v89 = v86;
        }
        else {
          double v89 = v80;
        }
        if (_NF) {
          double v90 = v75;
        }
        else {
          double v90 = v85;
        }
        if (_NF) {
          double v91 = v79;
        }
        else {
          double v91 = v87;
        }
        unint64_t v92 = v126;
        *double v126 = v90;
        v92[1] = v89;
        v92[2] = v91;
        uint64_t v150 = 0x300000003;
        long long v149 = xmmword_18E1F0010;
        uint64_t v148 = &unk_1EDD18EE8;
        uint64_t v151 = &v152;
        double v152 = v84 * (1.0 - v90 * v90);
        double v153 = v84 * -(v89 * v90);
        double v158 = v84 * -(v90 * v91);
        double v159 = v84 * -(v89 * v91);
        double v155 = v84 * -(v90 * v89);
        double v154 = v84 * -(v91 * v90);
        double v156 = v84 * (1.0 - v89 * v89);
        double v157 = v84 * -(v91 * v89);
        double v160 = v84 * (1.0 - v91 * v91);
        uint64_t v115 = 0x100000003;
        long long v114 = xmmword_18E1F6F60;
        double v113 = &unk_1EDD18D98;
        double v116 = &v117;
        sub_18DFE2B44((uint64_t)&v171, (uint64_t)&v123, (uint64_t)&v113);
        uint64_t v110 = 0x100000003;
        long long v109 = xmmword_18E1F6F60;
        double v108 = &unk_1EDD18D98;
        double v111 = &v112;
        sub_18DFE2B44((uint64_t)&v166, (uint64_t)&v123, (uint64_t)&v108);
        uint64_t v105 = 0x100000003;
        double v103 = &unk_1EDD18D98;
        long long v104 = xmmword_18E1F6F60;
        double v106 = &v107;
        sub_18DFE2B44((uint64_t)&v161, (uint64_t)&v123, (uint64_t)&v103);
        uint64_t v145 = 0x300000003;
        long long v144 = xmmword_18E1F0010;
        double v143 = &unk_1EDD18EE8;
        uint64_t v146 = v147;
        sub_18DFE2B44((uint64_t)v197, (uint64_t)&v148, (uint64_t)&v143);
        *(double *)(a5 + 400) = v90;
        *(double *)(a5 + 408) = v89;
        *(double *)(a5 + 416) = v91;
        double v93 = v116;
        *(void *)(a5 + 424) = *v116;
        double v94 = v111;
        *(void *)(a5 + 432) = *v111;
        double v95 = v106;
        *(void *)(a5 + 440) = *v106;
        double v96 = v146;
        *(void *)(a5 + 448) = *v146;
        uint64_t v97 = SHIDWORD(v144);
        *(void *)(a5 + 456) = v96[SHIDWORD(v144)];
        *(void *)(a5 + 464) = v96[2 * v97];
        *(void *)(a5 + 472) = v93[1];
        *(void *)(a5 + 480) = v94[1];
        *(void *)(a5 + 488) = v95[1];
        *(void *)(a5 + 496) = v96[1];
        *(void *)(a5 + 504) = v96[(int)v97 + 1];
        int v98 = &v96[2 * (int)v97];
        *(void *)(a5 + 512) = v98[1];
        *(void *)(a5 + 520) = v93[2];
        *(void *)(a5 + 528) = v94[2];
        *(void *)(a5 + 536) = v95[2];
        *(void *)(a5 + 544) = v96[2];
        *(void *)(a5 + 552) = v96[(int)v97 + 2];
        *(void *)(a5 + 560) = v98[2];
        if (!*a6)
        {
          *(double *)(*(void *)(a4 + 32) + 24) = v83;
          sub_18E0300B4((uint64_t)v197, (uint64_t)&v123, (uint64_t)v102);
          sub_18E06DD64((uint64_t)&v118, a4, (uint64_t)&v203);
          sub_18E0601D0((uint64_t)&v118, (uint64_t)v102);
        }
      }
    }
    else if (a3 == 2)
    {
      __assert_rtn("GetEarthFixedUserStateEstimate", "ravenpntestimatorhelper.h", 1110, "false && \"Unexpected case RavenPNTEstimatorStateParameterization::ParameterizationCount\"");
    }
    return 0;
  }
  uint64_t v17 = *(double **)(a1 + 32);
  uint64_t v18 = *(double **)(a2 + 32);
  uint64_t v19 = *(double **)(a4 + 32);
  *uint64_t v19 = v17[21] + v18[20];
  v19[1] = v17[22] + v18[21];
  v19[2] = v17[23] + v18[22];
  *(_OWORD *)(a5 + 248) = 0u;
  *(_OWORD *)(a5 + 232) = 0u;
  *(void *)(a5 + 264) = 0x3FF0000000000000;
  *(_OWORD *)(a5 + 272) = 0u;
  *(_OWORD *)(a5 + 288) = 0u;
  *(_OWORD *)(a5 + 304) = 0u;
  *(void *)(a5 + 320) = 0;
  *(void *)(a5 + 328) = 0x3FF0000000000000;
  *(_OWORD *)(a5 + 336) = 0u;
  *(_OWORD *)(a5 + 352) = 0u;
  *(_OWORD *)(a5 + 368) = 0u;
  *(void *)(a5 + 384) = 0;
  *(void *)(a5 + 392) = 0x3FF0000000000000;
  double v21 = v17[25];
  double v20 = v17[26];
  double v22 = v17[27];
  double v23 = sqrt(v20 * v20 + v21 * v21 + v22 * v22);
  if (fabs(v23) <= 0.000000015) {
    return 0xFFFFFFFFLL;
  }
  double v24 = 1.0 / v23;
  double v25 = v23 * v17[24];
  double v26 = v21 * (1.0 / v23);
  v19[3] = v25;
  v19[4] = v26;
  double v27 = v20 * v24;
  double v28 = v22 * v24;
  v19[5] = v27;
  v19[6] = v28;
  double v29 = v17[24];
  double v30 = v18[23] + v29 * v17[25];
  double v31 = v18[24] + v29 * v17[26];
  double v32 = v18[25] + v29 * v17[27];
  double v33 = sqrt(v31 * v31 + v30 * v30 + v32 * v32);
  *a6 = v33 < a7;
  if (fabs(v33) > 0.000000015)
  {
    double v34 = 1.0 / v33;
    if (v33 >= a7)
    {
      double v27 = v31 * (1.0 / v33);
      double v26 = v30 * (1.0 / v33);
      double v28 = v32 * (1.0 / v33);
    }
    *(double *)(a5 + 400) = v26;
    *(double *)(a5 + 408) = v27;
    *(double *)(a5 + 416) = v28;
    *(void *)(a5 + 432) = 0;
    *(void *)(a5 + 440) = 0;
    *(void *)(a5 + 424) = 0;
    *(double *)(a5 + 448) = v34 * (1.0 - v26 * v26);
    *(double *)(a5 + 456) = v34 * -(v26 * v27);
    *(double *)(a5 + 464) = v34 * -(v26 * v28);
    *(void *)(a5 + 480) = 0;
    *(void *)(a5 + 488) = 0;
    *(void *)(a5 + 472) = 0;
    *(double *)(a5 + 496) = v34 * -(v27 * v26);
    *(double *)(a5 + 504) = v34 * (1.0 - v27 * v27);
    *(double *)(a5 + 512) = v34 * -(v27 * v28);
    *(void *)(a5 + 520) = 0;
    *(void *)(a5 + 536) = 0;
    *(void *)(a5 + 528) = 0;
    *(double *)(a5 + 544) = v34 * -(v28 * v26);
    *(double *)(a5 + 552) = v34 * -(v28 * v27);
    *(double *)(a5 + 560) = v34 * (1.0 - v28 * v28);
    if (v33 >= a7)
    {
      uint64_t result = 0;
      v19[3] = v33;
      v19[4] = v30 * (1.0 / v33);
      v19[5] = v31 * (1.0 / v33);
      v19[6] = v32 * (1.0 / v33);
      return result;
    }
    return 0;
  }
  uint64_t result = 0;
  *(void *)(a5 + 416) = 0x3FF0000000000000;
  __asm { FMOV            V0.2D, #1.0 }
  *(_OWORD *)(a5 + 400) = _Q0;
  *(_OWORD *)(a5 + 424) = 0u;
  *(_OWORD *)(a5 + 440) = 0u;
  *(_OWORD *)(a5 + 456) = 0u;
  *(_OWORD *)(a5 + 472) = 0u;
  *(_OWORD *)(a5 + 488) = 0u;
  *(_OWORD *)(a5 + 504) = 0u;
  *(_OWORD *)(a5 + 520) = 0u;
  *(_OWORD *)(a5 + 536) = 0u;
  *(_OWORD *)(a5 + 552) = 0u;
  return result;
}

uint64_t sub_18E070534(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 24) = 0x100000002;
  *(_OWORD *)(a1 + 8) = xmmword_18E1FD1A0;
  *(void *)(a1 + 32) = a1 + 40;
  *(void *)a1 = &unk_1EDD16C08;
  *(void *)(a1 + 56) = a2;
  *(void *)(a1 + 88) = 0x100000002;
  *(void *)(a1 + 64) = &unk_1EDD18B58;
  *(_OWORD *)(a1 + 72) = xmmword_18E1FD1A0;
  *(void *)(a1 + 96) = a1 + 104;
  sub_18DFEEA3C(a1 + 64, a3);
  int v6 = *(_DWORD *)(a1 + 72);
  int v5 = *(_DWORD *)(a1 + 76);
  *(_DWORD *)(a1 + 8) = v6;
  *(_DWORD *)(a1 + 12) = v5;
  uint64_t v7 = (v5 * v6);
  *(_DWORD *)(a1 + 16) = v7;
  *(_DWORD *)(a1 + 20) = v6;
  if ((int)v7 >= 1)
  {
    __CLPK_integer v8 = *(int **)(a1 + 96);
    uint64_t v9 = *(void *)(a2 + 32);
    __CLPK_integer v10 = *(void **)(a1 + 32);
    do
    {
      uint64_t v11 = *v8++;
      *v10++ = *(void *)(v9 + 8 * v11);
      --v7;
    }
    while (v7);
  }
  return a1;
}

void sub_18E07060C(void *a1)
{
  a1[8] = &unk_1EDD174A8;
  *a1 = &unk_1EDD17478;
  JUMPOUT(0x192FA6240);
}

void sub_18E07065C(void *a1)
{
  *a1 = &unk_1EDD174A8;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E07068C(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E070698(uint64_t a1)
{
  sub_18DFE2870(a1, v1);
}

void *sub_18E0706BC(void *a1)
{
  *a1 = &unk_1EDD18948;
  uint64_t v2 = a1[5];
  a1[5] = 0;
  if (v2) {
    MEMORY[0x192FA6220](v2, 0x1000C8000313F17);
  }
  *a1 = &unk_1EDD17478;
  return a1;
}

void sub_18E070738(void *a1)
{
  sub_18E0706BC(a1);

  JUMPOUT(0x192FA6240);
}

void sub_18E070770()
{
}

void sub_18E07079C()
{
}

void sub_18E0708A4()
{
}

void sub_18E070920(uint64_t a1)
{
  *(void *)(a1 + 24) = 0x1A0000001CLL;
  *(void *)a1 = &unk_1EDD18948;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 8) = xmmword_18E1FD6F0;
  sub_18E0708A4();
}

void sub_18E070988(_Unwind_Exception *exception_object)
{
  uint64_t v3 = v1[5];
  v1[5] = 0;
  if (v3) {
    MEMORY[0x192FA6220](v3, 0x1000C8000313F17);
  }
  *unsigned int v1 = &unk_1EDD17478;
  _Unwind_Resume(exception_object);
}

void sub_18E0709D0(uint64_t a1, int a2, int a3)
{
  *(void *)(a1 + 24) = 0x1C0000001ALL;
  *(void *)a1 = &unk_1EDD18798;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = a3;
  *(_DWORD *)(a1 + 16) = a3 * a2;
  *(_DWORD *)(a1 + 20) = a2;
  sub_18E0708A4();
}

void sub_18E070A38(_Unwind_Exception *exception_object)
{
  uint64_t v3 = v1[5];
  v1[5] = 0;
  if (v3) {
    MEMORY[0x192FA6220](v3, 0x1000C8000313F17);
  }
  *unsigned int v1 = &unk_1EDD17478;
  _Unwind_Resume(exception_object);
}

void sub_18E070A80(void *a1)
{
  sub_18E070BEC(a1);

  JUMPOUT(0x192FA6240);
}

void sub_18E070AB8()
{
}

void sub_18E070AE4()
{
}

void *sub_18E070BEC(void *a1)
{
  *a1 = &unk_1EDD18798;
  uint64_t v2 = a1[5];
  a1[5] = 0;
  if (v2) {
    MEMORY[0x192FA6220](v2, 0x1000C8000313F17);
  }
  *a1 = &unk_1EDD17478;
  return a1;
}

double sub_18E070C68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(a1 + 8);
  int v4 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a3 + 8) = v3;
  *(_DWORD *)(a3 + 12) = v4;
  *(_DWORD *)(a3 + 16) = v4 * v3;
  *(_DWORD *)(a3 + 20) = v3;
  int v5 = *(double **)(a1 + 32);
  double v6 = *v5;
  double v7 = v5[1];
  double v8 = v5[2];
  uint64_t v9 = *(double **)(a2 + 32);
  double v10 = *v9;
  double v11 = v9[1];
  double v12 = v9[2];
  __CLPK_integer v13 = *(double **)(a3 + 32);
  *__CLPK_integer v13 = v7 * v12 - v8 * v11;
  v13[1] = v8 * v10 - v6 * v12;
  double result = v6 * v11 - v7 * v10;
  void v13[2] = result;
  return result;
}

uint64_t sub_18E070CB8(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 8);
  if (!v1) {
    return 0xFFFFFFFFLL;
  }
  *(_DWORD *)(a1 + 8) = v1 - 1;
  int v2 = *(_DWORD *)(a1 + 40);
  if (v2 == 349) {
    int v3 = 0;
  }
  else {
    int v3 = v2 + 1;
  }
  *(_DWORD *)(a1 + 40) = v3;
  sub_18E070D00(a1);
  return 0;
}

uint64_t sub_18E070D00(uint64_t result)
{
  uint64_t v1 = result;
  double v2 = 0.0;
  if (*(_DWORD *)(result + 8) >= 2u)
  {
    uint64_t v3 = result + 48 + 48 * *(unsigned int *)(result + 44);
    v12[0] = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    v12[1] = v4;
    uint64_t v5 = v1 + 48 + 48 * *(unsigned int *)(v1 + 40);
    v11[0] = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 16))(v5);
    v11[1] = v6;
    double result = CNTimeSpan::operator-((uint64_t)v12, v11, v7, v8);
    double v10 = v9 + (double)result;
    if (fabs(v10) >= 2.22044605e-16) {
      double v2 = (double)(*(_DWORD *)(v1 + 8) - 1) / v10;
    }
  }
  *(double *)(v1 + 32) = v2;
  return result;
}

uint64_t sub_18E070DF0(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a1 + 8)) {
    return 0xFFFFFFFFLL;
  }
  long long v4 = *(_OWORD *)(a1 + 16);
  long long v5 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 25) = *(_OWORD *)(a1 + 41);
  *(_OWORD *)a2 = v4;
  *(_OWORD *)(a2 + 16) = v5;
  sub_18DFE2F24(a2 + 48, a1 + 64);
  sub_18DFE2F24(a2 + 240, a1 + 256);
  uint64_t result = 0;
  *(unsigned char *)(a2 + 432) = *(unsigned char *)(a1 + 448);
  *(void *)(a2 + 440) = *(void *)(a1 + 5944);
  return result;
}

uint64_t sub_18E070E60(uint64_t a1, int a2)
{
  *(void *)(a1 + 24) = 0x100000017;
  *(void *)a1 = &unk_1EDD18528;
  *(void *)(a1 + 32) = a1 + 40;
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = 1;
  *(_DWORD *)(a1 + 16) = a2;
  *(_DWORD *)(a1 + 20) = a2;
  return sub_18DFE2CC8(a1, 0.0);
}

void sub_18E070EA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 24) = 0x1C00000003;
  *(void *)a1 = &unk_1EDD18E88;
  *(_OWORD *)(a1 + 8) = xmmword_18E1FD810;
  *(void *)(a1 + 32) = a1 + 40;
  sub_18DFE2B44(a2, a3, a1);
}

void sub_18E070F10(_Unwind_Exception *a1)
{
  *uint64_t v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

uint64_t sub_18E070F30(uint64_t a1)
{
  *(void *)(a1 + 24) = 0x1C00000003;
  *(void *)a1 = &unk_1EDD18E88;
  *(void *)(a1 + 32) = a1 + 40;
  *(_OWORD *)(a1 + 8) = xmmword_18E1FD960;
  uint64_t result = sub_18DFE2CC8(a1, 0.0);
  int v3 = *(_DWORD *)(a1 + 20) + 1;
  long long v4 = *(void **)(a1 + 32);
  *long long v4 = 0x3FF0000000000000;
  v4[v3] = 0x3FF0000000000000;
  v4[2 * v3] = 0x3FF0000000000000;
  return result;
}

void sub_18E070FB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 24) = 0x1A00000003;
  *(void *)a1 = &unk_1EDD18E58;
  *(_OWORD *)(a1 + 8) = xmmword_18E1FD670;
  *(void *)(a1 + 32) = a1 + 40;
  sub_18DFE2B44(a2, a3, a1);
}

void sub_18E071020(_Unwind_Exception *a1)
{
  *uint64_t v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

void sub_18E071040(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 24) = 0x1A00000003;
  *(void *)a1 = &unk_1EDD18E58;
  *(_OWORD *)(a1 + 8) = xmmword_18E1FD670;
  *(void *)(a1 + 32) = a1 + 40;
  sub_18DFE2B44(a2, a3, a1);
}

void sub_18E0710AC(_Unwind_Exception *a1)
{
  *uint64_t v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

uint64_t sub_18E0710CC(uint64_t a1)
{
  *(void *)(a1 + 24) = 0x1A00000003;
  *(void *)a1 = &unk_1EDD18E58;
  *(void *)(a1 + 32) = a1 + 40;
  *(_OWORD *)(a1 + 8) = xmmword_18E1FD970;
  uint64_t result = sub_18DFE2CC8(a1, 0.0);
  int v3 = *(_DWORD *)(a1 + 20) + 1;
  long long v4 = *(void **)(a1 + 32);
  *long long v4 = 0x3FF0000000000000;
  v4[v3] = 0x3FF0000000000000;
  v4[2 * v3] = 0x3FF0000000000000;
  return result;
}

void sub_18E071150(uint64_t a1)
{
}

void sub_18E0711B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 24) = 0x100000003;
  *(void *)a1 = &unk_1EDD18D98;
  *(_OWORD *)(a1 + 8) = xmmword_18E1F6F60;
  *(void *)(a1 + 32) = a1 + 40;
  sub_18DFE2B44(a2, a3, a1);
}

void sub_18E071224(_Unwind_Exception *a1)
{
  *uint64_t v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

double sub_18E071244(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 24) = 0x10000001CLL;
  *(void *)a1 = &unk_1EDD188B8;
  *(_OWORD *)(a1 + 8) = xmmword_18E1FD5F0;
  *(void *)(a1 + 32) = a1 + 40;
  *(void *)&double result = *(_OWORD *)&sub_18DFE2AA8(a2, a3, a1);
  return result;
}

void sub_18E071294(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 24) = 0x100000003;
  *(void *)a1 = &unk_1EDD18D98;
  *(_OWORD *)(a1 + 8) = xmmword_18E1F6F60;
  *(void *)(a1 + 32) = a1 + 40;
  sub_18DFE2B44(a2, a3, a1);
}

void sub_18E071300(_Unwind_Exception *a1)
{
  *uint64_t v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

uint64_t sub_18E071320@<X0>(int a1@<W0>, int a2@<W1>, uint64_t a3@<X8>)
{
  if (a1 < 0) {
    __assert_rtn("Zeros", "cnmatrix.h", 3098, "nr >= 0");
  }
  if (a2 < 0) {
    __assert_rtn("Zeros", "cnmatrix.h", 3099, "nc >= 0");
  }
  *(void *)(a3 + 24) = 0x300000001;
  *(void *)a3 = &unk_1EDD18228;
  *(void *)(a3 + 32) = a3 + 40;
  *(_DWORD *)(a3 + 8) = a1;
  *(_DWORD *)(a3 + 12) = a2;
  *(_DWORD *)(a3 + 16) = a2 * a1;
  *(_DWORD *)(a3 + 20) = a1;

  return sub_18DFE2CC8(a3, 0.0);
}

uint64_t sub_18E0713D0(uint64_t a1)
{
  *(void *)(a1 + 24) = 0x1A00000001;
  *(void *)a1 = &unk_1EDD18138;
  *(void *)(a1 + 32) = a1 + 40;
  *(_OWORD *)(a1 + 8) = xmmword_18E1FD7C0;
  return sub_18DFE2CC8(a1, 0.0);
}

void *sub_18E071414(void *result)
{
  *double result = &unk_1EDD17478;
  return result;
}

void sub_18E071434(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 24) = 0x1A00000001;
  *(void *)a1 = &unk_1EDD18138;
  *(_OWORD *)(a1 + 8) = xmmword_18E1FD7C0;
  *(void *)(a1 + 32) = a1 + 40;
  sub_18DFE2B44(a2, a3, a1);
}

void sub_18E0714A0(_Unwind_Exception *a1)
{
  *uint64_t v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

uint64_t sub_18E0714C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(a2 + 8);
  uint64_t v11 = 0x100000003;
  uint64_t v6 = &unk_1EDD18DC8;
  int v7 = v3;
  int v8 = 1;
  int v9 = v3;
  int v10 = v3;
  double v12 = v13;
  if (v3)
  {
    for (int i = 0; i != v3; ++i)
      v13[i] = i;
  }
  return sub_18E0719CC(a1, a2, (uint64_t)&v6, a3);
}

void sub_18E071548(uint64_t a1)
{
  *(void *)(a1 + 24) = 0x170000001ALL;
  *(void *)a1 = &unk_1EDD18738;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 8) = xmmword_18E1FD980;
  sub_18E0684D0();
}

void sub_18E0715B0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = v1[5];
  v1[5] = 0;
  if (v3) {
    MEMORY[0x192FA6220](v3, 0x1000C8000313F17);
  }
  *uint64_t v1 = &unk_1EDD17478;
  _Unwind_Resume(exception_object);
}

void sub_18E0715F8(void *a1)
{
  sub_18E071BB8(a1);

  JUMPOUT(0x192FA6240);
}

void sub_18E071630()
{
}

void sub_18E07165C()
{
}

void sub_18E071764(void *a1)
{
  *a1 = &unk_1EDD17478;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E071794(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E0717A0(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  unsigned int v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    unsigned int v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      int v4 = *(_DWORD *)(a1 + 16);
      int v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        uint64_t v6 = (v4 - 1);
        uint64_t v7 = *(void *)(a1 + 32);
        uint64_t v8 = 1;
        do
        {
          int v9 = &v13[v8];
          if (!v13[v8])
          {
            uint64_t v10 = *(void *)(v7 + 8 * v8);
            int v11 = v8;
            do
            {
              int v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              uint64_t v12 = *(void *)(v7 + 8 * v11);
              *(void *)(v7 + 8 * v11) = v10;
              *int v9 = 1;
              int v9 = &v13[v11];
              uint64_t v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

void sub_18E071898(void *a1)
{
  *a1 = &unk_1EDD17478;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E0718C8(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E0718D4(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  unsigned int v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    unsigned int v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      int v4 = *(_DWORD *)(a1 + 16);
      int v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        uint64_t v6 = (v4 - 1);
        uint64_t v7 = *(void *)(a1 + 32);
        uint64_t v8 = 1;
        do
        {
          int v9 = &v13[v8];
          if (!v13[v8])
          {
            uint64_t v10 = *(void *)(v7 + 8 * v8);
            int v11 = v8;
            do
            {
              int v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              uint64_t v12 = *(void *)(v7 + 8 * v11);
              *(void *)(v7 + 8 * v11) = v10;
              *int v9 = 1;
              int v9 = &v13[v11];
              uint64_t v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

uint64_t sub_18E0719CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(a1 + 24) = 0x1A00000003;
  *(_OWORD *)(a1 + 8) = xmmword_18E1FD670;
  *(void *)(a1 + 32) = a1 + 40;
  *(void *)a1 = &unk_1EDD16608;
  *(void *)(a1 + 664) = a2;
  uint64_t v7 = a1 + 672;
  *(void *)(a1 + 696) = 0x100000003;
  *(void *)(a1 + 672) = &unk_1EDD18DC8;
  *(_OWORD *)(v7 + 8) = xmmword_18E1F6F60;
  *(void *)(a1 + 704) = a1 + 712;
  *(void *)(a1 + 752) = 0x10000001ALL;
  *(void *)(a1 + 728) = &unk_1EDD186D8;
  *(_OWORD *)(a1 + 736) = xmmword_18E1FD600;
  *(void *)(a1 + 760) = a1 + 768;
  sub_18DFEEA3C(v7, a3);
  sub_18DFEEA3C(a1 + 728, a4);
  uint64_t v8 = *(unsigned int *)(a1 + 688);
  uint64_t v9 = *(unsigned int *)(a1 + 744);
  *(_DWORD *)(a1 + 8) = v8;
  *(_DWORD *)(a1 + 12) = v9;
  *(_DWORD *)(a1 + 16) = v9 * v8;
  *(_DWORD *)(a1 + 20) = v8;
  if (v9)
  {
    unsigned int v10 = 0;
    uint64_t v11 = 0;
    int v12 = *(_DWORD *)(a2 + 20);
    uint64_t v13 = *(void *)(a2 + 32);
    do
    {
      if (v8)
      {
        uint64_t v14 = *(int **)(a1 + 704);
        int v15 = *(_DWORD *)(*(void *)(a1 + 760) + 4 * v11) * v12;
        uint64_t v16 = *(void *)(a1 + 32);
        unsigned int v17 = v10;
        uint64_t v18 = v8;
        do
        {
          int v19 = *v14++;
          *(void *)(v16 + 8 * v17++) = *(void *)(v13 + 8 * (v19 + v15));
          --v18;
        }
        while (v18);
      }
      ++v11;
      v10 += v8;
    }
    while (v11 != v9);
  }
  return a1;
}

void sub_18E071B48(void *a1)
{
  a1[91] = &unk_1EDD174A8;
  a1[84] = &unk_1EDD174A8;
  *a1 = &unk_1EDD17478;
  JUMPOUT(0x192FA6240);
}

void *sub_18E071BB8(void *a1)
{
  *a1 = &unk_1EDD18738;
  uint64_t v2 = a1[5];
  a1[5] = 0;
  if (v2) {
    MEMORY[0x192FA6220](v2, 0x1000C8000313F17);
  }
  *a1 = &unk_1EDD17478;
  return a1;
}

void sub_18E071C34(uint64_t a1)
{
  *(void *)a1 = &unk_1EDD0A4E8;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }

  JUMPOUT(0x192FA6240);
}

double sub_18E071CA4(void *a1, uint64_t a2)
{
  int v4 = (char *)operator new(0x68uLL);
  *(void *)int v4 = &unk_1EDD0A4E8;
  *((_DWORD *)v4 + 2) = *(_DWORD *)(a2 + 8);
  int v5 = v4 + 16;
  if (*(char *)(a2 + 39) < 0)
  {
    sub_18DEDE668(v5, *(void **)(a2 + 16), *(void *)(a2 + 24));
  }
  else
  {
    *(_OWORD *)int v5 = *(_OWORD *)(a2 + 16);
    *((void *)v4 + 4) = *(void *)(a2 + 32);
  }
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(v4 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(v4 + 72) = *(_OWORD *)(a2 + 72);
  *((void *)v4 + 11) = *(void *)(a2 + 88);
  *(void *)int v4 = &unk_1EDD15988;
  double result = *(double *)(a2 + 96);
  *((double *)v4 + 12) = result;
  *a1 = sub_18E071D94;
  a1[1] = v4;
  return result;
}

void sub_18E071D80(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_18E071D94(unsigned int a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v5 = a1;
  double result = &unk_1EDD05DF0;
  switch(v5)
  {
    case 1:
      sub_18E071CA4(a3, a2[1]);
      double result = 0;
      break;
    case 2:
      double result = 0;
      uint64_t v9 = a2[1];
      *a3 = sub_18E071D94;
      a3[1] = v9;
      goto LABEL_5;
    case 3:
      if (a4) {
        BOOL v10 = sub_18DEE4C68(a4, (uint64_t)&unk_1EDD05DF0);
      }
      else {
        BOOL v10 = a5 == &std::__any_imp::__unique_typeinfo<raven::h_DeviceAltitudeChangeArgs_RavenPNT<double>>::__id;
      }
      if (v10) {
        double result = (void *)a2[1];
      }
      else {
        double result = 0;
      }
      break;
    case 4:
      return result;
    default:
      uint64_t v8 = (void (***)(void))a2[1];
      (**v8)(v8);
      operator delete(v8);
      double result = 0;
LABEL_5:
      *a2 = 0;
      break;
  }
  return result;
}

uint64_t sub_18E071E98@<X0>(unsigned int a1@<W0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  if ((a1 & 0x80000000) != 0) {
    __assert_rtn("Eye", "cnmatrix.h", 2135, "nr >= 0");
  }
  if ((a2 & 0x80000000) != 0) {
    __assert_rtn("Eye", "cnmatrix.h", 2136, "nc >= 0");
  }
  *(void *)(a3 + 24) = 0x100000001;
  *(void *)a3 = &unk_1EDD18048;
  *(void *)(a3 + 32) = a3 + 40;
  *(_DWORD *)(a3 + 8) = a1;
  *(_DWORD *)(a3 + 12) = a2;
  *(_DWORD *)(a3 + 16) = a2 * a1;
  *(_DWORD *)(a3 + 20) = a1;
  uint64_t result = sub_18DFE2CC8(a3, 0.0);
  if (a1 >= a2) {
    uint64_t v7 = a2;
  }
  else {
    uint64_t v7 = a1;
  }
  if (v7)
  {
    int v8 = 0;
    int v9 = *(_DWORD *)(a3 + 20) + 1;
    uint64_t v10 = *(void *)(a3 + 32);
    do
    {
      *(void *)(v10 + 8 * v8) = 0x3FF0000000000000;
      v8 += v9;
      --v7;
    }
    while (v7);
  }
  return result;
}

void sub_18E071F84(uint64_t a1)
{
  *(void *)a1 = &unk_1EDD0A4E8;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }

  JUMPOUT(0x192FA6240);
}

double sub_18E071FF4(void *a1, uint64_t a2)
{
  int v4 = (char *)operator new(0x68uLL);
  *(void *)int v4 = &unk_1EDD0A4E8;
  *((_DWORD *)v4 + 2) = *(_DWORD *)(a2 + 8);
  uint64_t v5 = v4 + 16;
  if (*(char *)(a2 + 39) < 0)
  {
    sub_18DEDE668(v5, *(void **)(a2 + 16), *(void *)(a2 + 24));
  }
  else
  {
    *(_OWORD *)uint64_t v5 = *(_OWORD *)(a2 + 16);
    *((void *)v4 + 4) = *(void *)(a2 + 32);
  }
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(v4 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(v4 + 72) = *(_OWORD *)(a2 + 72);
  *((void *)v4 + 11) = *(void *)(a2 + 88);
  *(void *)int v4 = &unk_1EDD14D40;
  double result = *(double *)(a2 + 96);
  *((double *)v4 + 12) = result;
  *a1 = sub_18E0720E4;
  a1[1] = v4;
  return result;
}

void sub_18E0720D0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_18E0720E4(unsigned int a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v5 = a1;
  double result = &unk_1EDD058F8;
  switch(v5)
  {
    case 1:
      sub_18E071FF4(a3, a2[1]);
      double result = 0;
      break;
    case 2:
      double result = 0;
      uint64_t v9 = a2[1];
      *a3 = sub_18E0720E4;
      a3[1] = v9;
      goto LABEL_5;
    case 3:
      if (a4) {
        BOOL v10 = sub_18DEE4C68(a4, (uint64_t)&unk_1EDD058F8);
      }
      else {
        BOOL v10 = a5 == &std::__any_imp::__unique_typeinfo<raven::h_UserAltitudeArgs_RavenPNT<double>>::__id;
      }
      if (v10) {
        double result = (void *)a2[1];
      }
      else {
        double result = 0;
      }
      break;
    case 4:
      return result;
    default:
      int v8 = (void (***)(void))a2[1];
      (**v8)(v8);
      operator delete(v8);
      double result = 0;
LABEL_5:
      *a2 = 0;
      break;
  }
  return result;
}

double sub_18E0721E8(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 24) = 0x300000004;
  *(_OWORD *)(a1 + 8) = xmmword_18E1F6F90;
  uint64_t v2 = *(void *)(a2 + 56);
  *(void *)(a1 + 40) = *(void *)(a2 + 48);
  uint64_t v3 = *(void *)(a2 + 96);
  uint64_t v4 = *(void *)(a2 + 104);
  uint64_t v5 = *(void *)(a2 + 64);
  *(void *)(a1 + 48) = *(void *)(a2 + 72);
  *(void *)(a1 + 56) = v3;
  uint64_t v6 = *(void *)(a2 + 112);
  *(void *)(a1 + 64) = *(void *)(a2 + 120);
  *(void *)(a1 + 72) = v2;
  uint64_t v7 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v4;
  double result = *(double *)(a2 + 128);
  uint64_t v9 = *(void *)(a2 + 136);
  *(double *)(a1 + 96) = result;
  *(void *)(a1 + 104) = v5;
  *(void *)(a1 + 112) = v7;
  *(void *)(a1 + 120) = v6;
  *(void *)a1 = &unk_1EDD19578;
  *(void *)(a1 + 32) = a1 + 40;
  *(void *)(a1 + 128) = v9;
  return result;
}

double sub_18E07225C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 24) = 0x1200000003;
  *(void *)a1 = &unk_1EDD18D38;
  *(_OWORD *)(a1 + 8) = xmmword_18E1FD970;
  *(void *)(a1 + 32) = a1 + 40;
  *(void *)&double result = *(_OWORD *)&sub_18DFEF1F4(a2, a3, a1);
  return result;
}

void sub_18E0722C8(_Unwind_Exception *a1)
{
  *unsigned int v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

void sub_18E0722E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 24) = 0x1A00000003;
  *(void *)a1 = &unk_1EDD18E58;
  *(_OWORD *)(a1 + 8) = xmmword_18E1FD670;
  *(void *)(a1 + 32) = a1 + 40;
  sub_18DFE2B44(a2, a3, a1);
}

void sub_18E072354(_Unwind_Exception *a1)
{
  *unsigned int v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

void *sub_18E072374(void *result)
{
  *double result = &unk_1EDD17478;
  return result;
}

double sub_18E072394(uint64_t a1, uint64_t a2)
{
  *(void *)&double result = 0x1200000003;
  *(void *)(a1 + 24) = 0x1200000003;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1EDD18D38;
  int v4 = *(_DWORD *)(a2 + 8);
  int v3 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v5 = (v3 * v4);
  *(_DWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 20) = v4;
  uint64_t v6 = (double *)(a1 + 40);
  *(void *)(a1 + 32) = a1 + 40;
  if (*(_DWORD *)(a2 + 8) > 3u)
  {
    uint64_t v9 = "this->max_num_rows_ >= A.NumRows()";
    int v10 = 567;
    goto LABEL_9;
  }
  if (*(_DWORD *)(a2 + 12) > 0x12u)
  {
    uint64_t v9 = "this->max_num_cols_ >= A.NumCols()";
    int v10 = 568;
LABEL_9:
    __assert_rtn("CNMatrix", "cnmatrix.h", v10, v9);
  }
  if ((int)v5 >= 1)
  {
    uint64_t v7 = *(double **)(a2 + 32);
    do
    {
      double v8 = *v7++;
      double result = v8;
      *v6++ = v8;
      --v5;
    }
    while (v5);
  }
  return result;
}

void sub_18E072464(_Unwind_Exception *a1)
{
  *unsigned int v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

void sub_18E072484(void *a1)
{
  *a1 = &unk_1EDD17478;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E0724B4(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E0724C0(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  unsigned int v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    unsigned int v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      int v4 = *(_DWORD *)(a1 + 16);
      int v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        uint64_t v6 = (v4 - 1);
        uint64_t v7 = *(void *)(a1 + 32);
        uint64_t v8 = 1;
        do
        {
          uint64_t v9 = &v13[v8];
          if (!v13[v8])
          {
            uint64_t v10 = *(void *)(v7 + 8 * v8);
            int v11 = v8;
            do
            {
              int v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              uint64_t v12 = *(void *)(v7 + 8 * v11);
              *(void *)(v7 + 8 * v11) = v10;
              *uint64_t v9 = 1;
              uint64_t v9 = &v13[v11];
              uint64_t v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

void sub_18E0725B8(uint64_t a1)
{
  *(void *)a1 = &unk_1EDD0A4E8;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }

  JUMPOUT(0x192FA6240);
}

double sub_18E072628(void *a1, uint64_t a2)
{
  int v4 = (char *)operator new(0x68uLL);
  *(void *)int v4 = &unk_1EDD0A4E8;
  *((_DWORD *)v4 + 2) = *(_DWORD *)(a2 + 8);
  int v5 = v4 + 16;
  if (*(char *)(a2 + 39) < 0)
  {
    sub_18DEDE668(v5, *(void **)(a2 + 16), *(void *)(a2 + 24));
  }
  else
  {
    *(_OWORD *)int v5 = *(_OWORD *)(a2 + 16);
    *((void *)v4 + 4) = *(void *)(a2 + 32);
  }
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(v4 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(v4 + 72) = *(_OWORD *)(a2 + 72);
  *((void *)v4 + 11) = *(void *)(a2 + 88);
  *(void *)int v4 = &unk_1EDD159B0;
  double result = *(double *)(a2 + 96);
  *((double *)v4 + 12) = result;
  *a1 = sub_18E072718;
  a1[1] = v4;
  return result;
}

void sub_18E072704(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_18E072718(unsigned int a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v5 = a1;
  double result = &unk_1EDD05E28;
  switch(v5)
  {
    case 1:
      sub_18E072628(a3, a2[1]);
      double result = 0;
      break;
    case 2:
      double result = 0;
      uint64_t v9 = a2[1];
      *a3 = sub_18E072718;
      a3[1] = v9;
      goto LABEL_5;
    case 3:
      if (a4) {
        BOOL v10 = sub_18DEE4C68(a4, (uint64_t)&unk_1EDD05E28);
      }
      else {
        BOOL v10 = a5 == &std::__any_imp::__unique_typeinfo<raven::h_DeviceAttitudeChangeArgs_RavenPNT<double>>::__id;
      }
      if (v10) {
        double result = (void *)a2[1];
      }
      else {
        double result = 0;
      }
      break;
    case 4:
      return result;
    default:
      uint64_t v8 = (void (***)(void))a2[1];
      (**v8)(v8);
      operator delete(v8);
      double result = 0;
LABEL_5:
      *a2 = 0;
      break;
  }
  return result;
}

__n128 sub_18E07281C(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)a1)
  {
    long long v2 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(a1 + 32) = v2;
    long long v3 = *(_OWORD *)(a2 + 40);
    long long v4 = *(_OWORD *)(a2 + 56);
    long long v5 = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 96) = v5;
    *(_OWORD *)(a1 + 48) = v3;
    *(_OWORD *)(a1 + 64) = v4;
    if (a1 + 8 != a2)
    {
      *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 104);
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 120);
    }
    long long v6 = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 160) = v6;
    __n128 result = *(__n128 *)(a2 + 168);
    long long v8 = *(_OWORD *)(a2 + 184);
    long long v9 = *(_OWORD *)(a2 + 200);
    *(_WORD *)(a1 + 224) = *(_WORD *)(a2 + 216);
    *(_OWORD *)(a1 + 192) = v8;
    *(_OWORD *)(a1 + 208) = v9;
    *(__n128 *)(a1 + 176) = result;
  }
  else
  {
    *(void *)(a1 + 8) = &unk_1EDD13760;
    long long v10 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(a1 + 32) = v10;
    long long v11 = *(_OWORD *)(a2 + 40);
    long long v12 = *(_OWORD *)(a2 + 56);
    long long v13 = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 96) = v13;
    *(_OWORD *)(a1 + 48) = v11;
    *(_OWORD *)(a1 + 64) = v12;
    *(_OWORD *)(a1 + 112) = 0u;
    *(_OWORD *)(a1 + 128) = 0u;
    if (a1 + 8 != a2)
    {
      *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 104);
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 120);
    }
    long long v14 = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 160) = v14;
    __n128 result = *(__n128 *)(a2 + 168);
    long long v15 = *(_OWORD *)(a2 + 184);
    long long v16 = *(_OWORD *)(a2 + 200);
    *(_WORD *)(a1 + 224) = *(_WORD *)(a2 + 216);
    *(_OWORD *)(a1 + 192) = v15;
    *(_OWORD *)(a1 + 208) = v16;
    *(__n128 *)(a1 + 176) = result;
    *(unsigned char *)a1 = 1;
  }
  return result;
}

int64x2_t sub_18E072928(uint64_t a1)
{
  *(void *)(a1 + 32) = 0x100000008;
  *(void *)(a1 + 8) = &unk_1EDD19CC8;
  *(void *)(a1 + 40) = a1 + 48;
  *(void *)(a1 + 136) = 0x800000008;
  *(void *)(a1 + 112) = &unk_1EDD19DE8;
  *(void *)(a1 + 144) = a1 + 152;
  *(void *)(a1 + 688) = 0x100000008;
  *(void *)(a1 + 664) = &unk_1EDD19CC8;
  *(void *)(a1 + 696) = a1 + 704;
  *(void *)(a1 + 792) = 0x100000008;
  *(void *)(a1 + 768) = &unk_1EDD19CC8;
  *(void *)(a1 + 800) = a1 + 808;
  *(void *)(a1 + 896) = 0x800000008;
  *(void *)(a1 + 872) = &unk_1EDD19DE8;
  *(void *)(a1 + 904) = a1 + 912;
  *(void *)(a1 + 1448) = 0x100000008;
  *(void *)(a1 + 1424) = &unk_1EDD19CC8;
  *(void *)(a1 + 1456) = a1 + 1464;
  *(void *)(a1 + 1560) = 0x3E45798EE2308C3ALL;
  *(void *)(a1 + 1568) = 0x3E45798EE2308C3ALL;
  *(_WORD *)(a1 + 1576) = 0;
  *(void *)(a1 + 1584) = 0x3FEE666666666666;
  *(void *)(a1 + 1600) = 0;
  *(void *)(a1 + 1592) = 0;
  *(void *)(a1 + 1608) = 0x4197D78400000000;
  *(void *)(a1 + 1528) = 0;
  *(unsigned char *)(a1 + 1536) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 680) = 0;
  *(void *)(a1 + 672) = 0;
  *(void *)(a1 + 784) = 0;
  *(void *)(a1 + 776) = 0;
  *(void *)(a1 + 888) = 0;
  *(void *)(a1 + 880) = 0;
  *(void *)(a1 + 1440) = 0;
  *(void *)(a1 + 1432) = 0;
  *(void *)(a1 + 1744) = 0;
  *(_OWORD *)(a1 + 1728) = 0u;
  *(_OWORD *)(a1 + 1712) = 0u;
  *(_OWORD *)(a1 + 1696) = 0u;
  *(_OWORD *)(a1 + 1680) = 0u;
  *(_OWORD *)(a1 + 1664) = 0u;
  *(_OWORD *)(a1 + 1648) = 0u;
  *(_OWORD *)(a1 + 1632) = 0u;
  *(_OWORD *)(a1 + 1616) = 0u;
  *(_OWORD *)(a1 + 1540) = xmmword_18E1FD610;
  *(void *)a1 = &unk_1EDD0A7D8;
  *(void *)(a1 + 1776) = 0x800000008;
  *(void *)(a1 + 1752) = &unk_1EDD19DE8;
  *(void *)(a1 + 1784) = a1 + 1792;
  *(void *)(a1 + 2328) = 0x100000008;
  *(void *)(a1 + 2304) = &unk_1EDD19CC8;
  *(void *)(a1 + 2336) = a1 + 2344;
  *(void *)(a1 + 2432) = 0x800000008;
  *(void *)(a1 + 2408) = &unk_1EDD19DE8;
  *(void *)(a1 + 2440) = a1 + 2448;
  *(void *)(a1 + 2960) = 0x100000000;
  *(_DWORD *)(a1 + 2968) = 0x7FFFFFFF;
  int64x2_t result = vdupq_n_s64(0x3E45798EE2308C3AuLL);
  *(int64x2_t *)(a1 + 2976) = result;
  *(_WORD *)(a1 + 2992) = 0;
  *(void *)(a1 + 3000) = 0x3FEE666666666666;
  *(void *)(a1 + 3008) = 0;
  *(void *)(a1 + 3016) = 0;
  *(void *)(a1 + 3024) = 0x4197D78400000000;
  *(void *)(a1 + 3040) = 0;
  *(void *)(a1 + 3032) = 0;
  *(_WORD *)(a1 + 3048) = 1;
  *(void *)(a1 + 3056) = 0;
  *(void *)(a1 + 1768) = 0;
  *(void *)(a1 + 1760) = 0;
  *(void *)(a1 + 2312) = 0;
  *(void *)(a1 + 2320) = 0;
  *(void *)(a1 + 2416) = 0;
  *(void *)(a1 + 2424) = 0;
  return result;
}

void sub_18E072BE0(void *a1)
{
  *a1 = &unk_1EDD174A8;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E072C10(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E072C1C(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  unsigned int v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    unsigned int v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      int v4 = *(_DWORD *)(a1 + 16);
      int v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        uint64_t v6 = (v4 - 1);
        uint64_t v7 = *(void *)(a1 + 32);
        uint64_t v8 = 1;
        do
        {
          long long v9 = &v13[v8];
          if (!v13[v8])
          {
            int v10 = *(_DWORD *)(v7 + 4 * v8);
            int v11 = v8;
            do
            {
              int v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              int v12 = *(_DWORD *)(v7 + 4 * v11);
              *(_DWORD *)(v7 + 4 * v11) = v10;
              *long long v9 = 1;
              long long v9 = &v13[v11];
              int v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

void sub_18E072D14(void *a1)
{
  *a1 = &unk_1EDD174A8;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E072D44(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E072D50(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  unsigned int v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    unsigned int v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      int v4 = *(_DWORD *)(a1 + 16);
      int v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        uint64_t v6 = (v4 - 1);
        uint64_t v7 = *(void *)(a1 + 32);
        uint64_t v8 = 1;
        do
        {
          long long v9 = &v13[v8];
          if (!v13[v8])
          {
            int v10 = *(_DWORD *)(v7 + 4 * v8);
            int v11 = v8;
            do
            {
              int v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              int v12 = *(_DWORD *)(v7 + 4 * v11);
              *(_DWORD *)(v7 + 4 * v11) = v10;
              *long long v9 = 1;
              long long v9 = &v13[v11];
              int v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

uint64_t sub_18E072E48(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(unsigned int *)(result + 8);
  int v4 = *(_DWORD *)(result + 12);
  uint64_t v5 = *(unsigned int *)(a2 + 8);
  int v6 = v5 + v3;
  *(_DWORD *)(a3 + 8) = v5 + v3;
  *(_DWORD *)(a3 + 12) = v4;
  *(_DWORD *)(a3 + 16) = (v5 + v3) * v4;
  *(_DWORD *)(a3 + 20) = v5 + v3;
  if (v4)
  {
    int v7 = 0;
    int v8 = 0;
    uint64_t v9 = *(void *)(result + 32);
    uint64_t v10 = *(void *)(a3 + 32);
    int v11 = v3;
    uint64_t v12 = *(void *)(a2 + 32);
    do
    {
      if (v3)
      {
        for (uint64_t i = 0; i != v3; ++i)
          *(_DWORD *)(v10 + 4 * (v7 + i)) = *(_DWORD *)(v9
                                                                      + 4 * ((int)i + v8 * *(_DWORD *)(result + 20)));
      }
      if (v5)
      {
        for (uint64_t j = 0; j != v5; ++j)
          *(_DWORD *)(v10 + 4 * (v11 + j)) = *(_DWORD *)(v12 + 4
                                                                             * ((int)j + v8 * *(_DWORD *)(a2 + 20)));
      }
      ++v8;
      v7 += v6;
      v11 += v6;
    }
    while (v8 != v4);
  }
  return result;
}

void sub_18E072EE4(void *a1)
{
  *a1 = &unk_1EDD174A8;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E072F14(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E072F20(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  unsigned int v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    unsigned int v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      int v4 = *(_DWORD *)(a1 + 16);
      int v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        uint64_t v6 = (v4 - 1);
        uint64_t v7 = *(void *)(a1 + 32);
        uint64_t v8 = 1;
        do
        {
          uint64_t v9 = &v13[v8];
          if (!v13[v8])
          {
            int v10 = *(_DWORD *)(v7 + 4 * v8);
            int v11 = v8;
            do
            {
              int v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              int v12 = *(_DWORD *)(v7 + 4 * v11);
              *(_DWORD *)(v7 + 4 * v11) = v10;
              *uint64_t v9 = 1;
              uint64_t v9 = &v13[v11];
              int v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

void sub_18E073018(void *a1)
{
  *a1 = &unk_1EDD174A8;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E073048(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E073054(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  unsigned int v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    unsigned int v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      int v4 = *(_DWORD *)(a1 + 16);
      int v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        uint64_t v6 = (v4 - 1);
        uint64_t v7 = *(void *)(a1 + 32);
        uint64_t v8 = 1;
        do
        {
          uint64_t v9 = &v13[v8];
          if (!v13[v8])
          {
            int v10 = *(_DWORD *)(v7 + 4 * v8);
            int v11 = v8;
            do
            {
              int v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              int v12 = *(_DWORD *)(v7 + 4 * v11);
              *(_DWORD *)(v7 + 4 * v11) = v10;
              *uint64_t v9 = 1;
              uint64_t v9 = &v13[v11];
              int v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

uint64_t sub_18E07314C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 24) = 0x10000001CLL;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)int64x2_t result = &unk_1EDD188E8;
  int v3 = *(_DWORD *)(a2 + 8);
  int v2 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(result + 8) = v3;
  *(_DWORD *)(result + 12) = v2;
  uint64_t v4 = (v2 * v3);
  *(_DWORD *)(result + 16) = v4;
  *(_DWORD *)(result + 20) = v3;
  int v5 = (_DWORD *)(result + 40);
  *(void *)(result + 32) = result + 40;
  if (*(_DWORD *)(a2 + 8) > 0x1Cu)
  {
    uint64_t v8 = "this->max_num_rows_ >= A.NumRows()";
    int v9 = 567;
    goto LABEL_9;
  }
  if (*(_DWORD *)(a2 + 12) > 1u)
  {
    uint64_t v8 = "this->max_num_cols_ >= A.NumCols()";
    int v9 = 568;
LABEL_9:
    __assert_rtn("CNMatrix", "cnmatrix.h", v9, v8);
  }
  if ((int)v4 >= 1)
  {
    uint64_t v6 = *(int **)(a2 + 32);
    do
    {
      int v7 = *v6++;
      *v5++ = v7;
      --v4;
    }
    while (v4);
  }
  return result;
}

void sub_18E07321C(_Unwind_Exception *a1)
{
  *unsigned int v1 = &unk_1EDD174A8;
  _Unwind_Resume(a1);
}

uint64_t sub_18E07323C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 24) = 0x10000001CLL;
  *(_OWORD *)(a1 + 8) = xmmword_18E1FD5F0;
  *(void *)(a1 + 32) = a1 + 40;
  *(void *)a1 = &unk_1EDD16BD8;
  uint64_t v5 = a1 + 272;
  *(void *)(a1 + 296) = 0x10000001CLL;
  *(void *)(a1 + 264) = a2;
  *(void *)(a1 + 272) = &unk_1EDD188E8;
  *(_OWORD *)(a1 + 280) = xmmword_18E1FD5F0;
  *(void *)(a1 + 304) = a1 + 312;
  sub_18DFEEA3C(a1 + 272, a3);
  int v6 = *(_DWORD *)(v5 + 8);
  int v7 = *(_DWORD *)(a1 + 284);
  *(_DWORD *)(a1 + 8) = v6;
  *(_DWORD *)(a1 + 12) = v7;
  uint64_t v8 = (v7 * v6);
  *(_DWORD *)(a1 + 16) = v8;
  *(_DWORD *)(a1 + 20) = v6;
  if ((int)v8 >= 1)
  {
    int v9 = *(int **)(a1 + 304);
    uint64_t v10 = *(void *)(a2 + 32);
    int v11 = *(void **)(a1 + 32);
    do
    {
      uint64_t v12 = *v9++;
      *v11++ = *(void *)(v10 + 8 * v12);
      --v8;
    }
    while (v8);
  }
  return a1;
}

void sub_18E073320(void *a1)
{
  a1[34] = &unk_1EDD174A8;
  *a1 = &unk_1EDD17478;
  JUMPOUT(0x192FA6240);
}

double sub_18E073370(uint64_t a1, uint64_t a2)
{
  *(void *)&double result = 0x100000008;
  *(void *)(a1 + 24) = 0x100000008;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1EDD19CC8;
  int v4 = *(_DWORD *)(a2 + 8);
  int v3 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v5 = (v3 * v4);
  *(_DWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 20) = v4;
  int v6 = (double *)(a1 + 40);
  *(void *)(a1 + 32) = a1 + 40;
  if (*(_DWORD *)(a2 + 8) > 8u)
  {
    int v9 = "this->max_num_rows_ >= A.NumRows()";
    int v10 = 567;
    goto LABEL_9;
  }
  if (*(_DWORD *)(a2 + 12) > 1u)
  {
    int v9 = "this->max_num_cols_ >= A.NumCols()";
    int v10 = 568;
LABEL_9:
    __assert_rtn("CNMatrix", "cnmatrix.h", v10, v9);
  }
  if ((int)v5 >= 1)
  {
    int v7 = *(double **)(a2 + 32);
    do
    {
      double v8 = *v7++;
      double result = v8;
      *v6++ = v8;
      --v5;
    }
    while (v5);
  }
  return result;
}

void sub_18E073440(_Unwind_Exception *a1)
{
  *unsigned int v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

void sub_18E073460(uint64_t a1)
{
}

void sub_18E0735E8(_Unwind_Exception *a1)
{
  char v1[26] = &unk_1EDD174A8;
  char v1[7] = &unk_1EDD174A8;
  sub_18E06B384(v1);
  _Unwind_Resume(a1);
}

void sub_18E073634(void *a1)
{
  *a1 = &unk_1EDD164E8;
  a1[26] = &unk_1EDD174A8;
  a1[7] = &unk_1EDD174A8;
  sub_18E06B384(a1);

  JUMPOUT(0x192FA6240);
}

double sub_18E0736C8(uint64_t a1, uint64_t a2)
{
  *(void *)&double result = 0x800000008;
  *(void *)(a1 + 24) = 0x800000008;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1EDD19DE8;
  int v4 = *(_DWORD *)(a2 + 8);
  int v3 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v5 = (v3 * v4);
  *(_DWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 20) = v4;
  int v6 = (double *)(a1 + 40);
  *(void *)(a1 + 32) = a1 + 40;
  if (*(_DWORD *)(a2 + 8) > 8u)
  {
    int v9 = "this->max_num_rows_ >= A.NumRows()";
    int v10 = 567;
    goto LABEL_9;
  }
  if (*(_DWORD *)(a2 + 12) > 8u)
  {
    int v9 = "this->max_num_cols_ >= A.NumCols()";
    int v10 = 568;
LABEL_9:
    __assert_rtn("CNMatrix", "cnmatrix.h", v10, v9);
  }
  if ((int)v5 >= 1)
  {
    int v7 = *(double **)(a2 + 32);
    do
    {
      double v8 = *v7++;
      double result = v8;
      *v6++ = v8;
      --v5;
    }
    while (v5);
  }
  return result;
}

void sub_18E073794(_Unwind_Exception *a1)
{
  *unsigned int v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

__n128 sub_18E0737B4(uint64_t a1, uint64_t a2)
{
  result.n128_u64[0] = 0x100000008;
  *(void *)(a1 + 24) = 0x100000008;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1EDD19CC8;
  if (a1 == a2)
  {
    unsigned int v17 = "this != &(A)";
    int v18 = 603;
    goto LABEL_16;
  }
  int v3 = *(_DWORD *)(a2 + 8);
  int v4 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = v4;
  uint64_t v5 = (v4 * v3);
  *(_DWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 20) = v3;
  int v6 = (unint64_t *)(a1 + 40);
  *(void *)(a1 + 32) = a1 + 40;
  if (*(_DWORD *)(a2 + 8) > 8u)
  {
    unsigned int v17 = "this->max_num_rows_ >= A.num_rows_";
    int v18 = 616;
    goto LABEL_16;
  }
  if (*(_DWORD *)(a2 + 12) >= 2u)
  {
    unsigned int v17 = "this->max_num_cols_ >= A.num_cols_";
    int v18 = 617;
LABEL_16:
    __assert_rtn("CNMatrix", "cnmatrix.h", v18, v17);
  }
  int v7 = *(_DWORD *)(a2 + 16);
  if (v7 > 3)
  {
    uint64_t v10 = (v7 - 2);
    int v11 = *(long long **)(a2 + 32);
    uint64_t v12 = (v7 - 1) >> 1;
    long long v13 = v11;
    uint64_t v14 = (_OWORD *)(a1 + 40);
    do
    {
      long long v15 = *v13++;
      *v14++ = v15;
      --v12;
    }
    while (v12);
    uint64_t v16 = v10;
    __n128 result = *(__n128 *)((char *)v11 + v16 * 8);
    *(__n128 *)&v6[v16] = result;
  }
  else if ((int)v5 >= 1)
  {
    double v8 = *(unint64_t **)(a2 + 32);
    do
    {
      unint64_t v9 = *v8++;
      result.n128_u64[0] = v9;
      *v6++ = v9;
      --v5;
    }
    while (v5);
  }
  return result;
}

void sub_18E0738E4(_Unwind_Exception *a1)
{
  *unsigned int v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

void *sub_18E073904(void *result)
{
  *__n128 result = &unk_1EDD17478;
  return result;
}

void *sub_18E073924(void *result)
{
  *__n128 result = &unk_1EDD174A8;
  return result;
}

void sub_18E073944(void *a1)
{
  *a1 = &unk_1EDD174A8;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E073974(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E073980(uint64_t a1)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  sub_18DFE2870(a1, v1);
}

void sub_18E0739D0(void *a1)
{
  *a1 = &unk_1EDD17478;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E073A00(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E073A0C(uint64_t a1)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  sub_18DEF3CF4(a1, v1);
}

uint64_t sub_18E073A5C(uint64_t a1)
{
  *(void *)(a1 + 24) = 0x600000006;
  *(void *)a1 = &unk_1EDD197B8;
  *(void *)(a1 + 32) = a1 + 40;
  *(_OWORD *)(a1 + 8) = xmmword_18E1F8570;
  return sub_18DFE2CC8(a1, 0.0);
}

uint64_t sub_18E073A9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4 = *(_DWORD *)(a1 + 8);
  int v3 = *(_DWORD *)(a1 + 12);
  *(void *)(a2 + 24) = 0x600000006;
  *(void *)a2 = &unk_1EDD197B8;
  *(_DWORD *)(a2 + 8) = v3;
  *(_DWORD *)(a2 + 12) = v4;
  *(_DWORD *)(a2 + 16) = v4 * v3;
  *(_DWORD *)(a2 + 20) = v3;
  *(void *)(a2 + 32) = a2 + 40;
  return sub_18DFE2C64(a1, a2);
}

void sub_18E073B00(_Unwind_Exception *a1)
{
  *unsigned int v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

uint64_t sub_18E073B20(uint64_t a1, uint64_t a2, uint64_t a3, double a4, int8x16_t a5)
{
  long long v103 = *(_OWORD *)a2;
  v8.i64[1] = *((void *)&v103 + 1);
  double v9 = *(double *)(a2 + 16);
  uint64_t v100 = 0;
  double v101 = 0.0;
  *(double *)v8.i64 = v9;
  CNTimeSpan::SetTimeSpan(&v100, 0, v8, a5);
  uint64_t v12 = CNTimeSpan::operator-(a2, &v100, v10, v11);
  v102[0] = v12;
  v102[1] = v13;
  double v14 = *(double *)(a2 + 24);
  double v15 = *(double *)(a2 + 32);
  uint64_t v96 = a3;
  *(_OWORD *)(a3 + 8) = xmmword_18E1FD1B0;
  int v16 = *(unsigned __int8 *)(a1 + 2216);
  if (*(unsigned char *)(a1 + 2216)) {
    BOOL v17 = *(unsigned char *)(a1 + 2312) != 0;
  }
  else {
    BOOL v17 = 0;
  }
  BOOL v19 = v14 > 0.0 && (*(void *)&v14 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
  BOOL v21 = v15 > 0.0 && (*(void *)&v15 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
  int v22 = !v21;
  if (!v17 || v22) {
    goto LABEL_29;
  }
  if (!*(unsigned char *)(a1 + 2216)) {
    goto LABEL_103;
  }
  v99[0] = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 2224) + 16))(a1 + 2224);
  v99[1] = v23;
  uint64_t v26 = CNTimeSpan::operator-((uint64_t)&v103, v99, v24, v25);
  uint64_t v100 = v26;
  double v101 = v27;
  if (v26 < 0 || (*(double *)v28.i64 = v27, v27 < 0.0))
  {
    uint64_t v26 = CNTimeSpan::operator-((double *)&v100, v28, v29);
    v28.i64[0] = v30;
  }
  if (!*(unsigned char *)(a1 + 2216)) {
    goto LABEL_103;
  }
  double v31 = *(double *)v28.i64 + (double)v26;
  v97[0] = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 2224) + 16))(a1 + 2224);
  v97[1] = v32;
  uint64_t v12 = CNTimeSpan::operator-((uint64_t)v102, v97, v33, v34);
  *(void *)&v98[0] = v12;
  v98[1] = v35;
  if (v12 < 0 || (*(double *)v36.i64 = v35, v35 < 0.0))
  {
    uint64_t v12 = CNTimeSpan::operator-(v98, v36, v37);
    v36.i64[0] = v38;
  }
  double v39 = *(double *)v36.i64 + (double)v12;
  if (v31 > v39) {
    double v39 = v31;
  }
  if (v39 > v15)
  {
LABEL_29:
    int v40 = 0;
    int v41 = 0;
    BOOL v42 = 0;
    int v43 = 0;
    int v44 = 0;
    int v45 = 0;
  }
  else
  {
    if (!*(unsigned char *)(a1 + 2216)) {
      goto LABEL_103;
    }
    if (!*(unsigned char *)(a1 + 2312)) {
      goto LABEL_104;
    }
    BOOL v42 = *(float *)(a1 + 2308) > 0.0 && (*(_DWORD *)(a1 + 2308) & 0x7FFFFFFFu) < 0x7F800000;
    BOOL v47 = *(float *)(a1 + 2300) > 0.0 && (*(_DWORD *)(a1 + 2300) & 0x7FFFFFFFu) < 0x7F800000;
    int v43 = v47;
    float v48 = *(float *)(a1 + 2304);
    int v49 = v47 || v42;
    BOOL v50 = v48 > 0.0 && (LODWORD(v48) & 0x7FFFFFFFu) < 0x7F800000;
    int v44 = v50;
    float v51 = *(float *)(a1 + 2296);
    if (!v50) {
      int v49 = 0;
    }
    BOOL v52 = v51 > 0.0 && (LODWORD(v51) & 0x7FFFFFFFu) < 0x7F800000;
    int v45 = v52;
    if (v52) {
      int v41 = 1;
    }
    else {
      int v41 = v49;
    }
    int v40 = 1;
  }
  double v53 = fabs(v9);
  double v54 = v9 * v9;
  double v55 = v54 * v53;
  if (v16) {
    char v56 = !v17;
  }
  else {
    char v56 = 1;
  }
  char v57 = v56 | !v19 | v22;
  int v58 = v40 ^ 1;
  if ((v57 & 1) == 0 && (v58 & 1) == 0 && v41)
  {
    if (*(unsigned char *)(a1 + 2216))
    {
      if (*(unsigned char *)(a1 + 2312))
      {
        double v59 = 0.0;
        double v60 = 0.0;
        double v61 = v53 / v14;
        if (v42) {
          double v60 = v61 * *(float *)(a1 + 2308) * 0.000001;
        }
        double v62 = *(float *)(a1 + 2300) * 0.001 * (*(float *)(a1 + 2300) * 0.001);
        if (!v43) {
          double v62 = 0.0;
        }
        if (v44) {
          double v59 = v61 * *(float *)(a1 + 2304) * 0.000001;
        }
        uint64_t result = 0;
        double v64 = *(float *)(a1 + 2296) * 0.001 * (*(float *)(a1 + 2296) * 0.001);
        if (!v45) {
          double v64 = 0.0;
        }
        double v65 = *(double **)(v96 + 32);
        *double v65 = v60 + v62 * v53 + v64 * 0.333333333 * v55;
        double v66 = v54 * (v64 * 0.5);
        long long v67 = &v65[*(int *)(v96 + 20)];
        double *v67 = v66;
        v65[1] = v66;
        double v68 = v59 + v64 * v53;
        goto LABEL_98;
      }
LABEL_104:
      sub_18DFF28FC();
    }
LABEL_103:
    __assert_rtn("operator->", "optional.hpp", 1221, "this->is_initialized()");
  }
  unsigned int LogLevel = (cnprint::CNPrinter *)cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v12);
  if (!LogLevel)
  {
    LOWORD(v100) = 12;
    LOBYTE(v99[0]) = 0;
    char v70 = cnprint::CNLogFormatter::FormatGeneral(a1 + 2488, (uint64_t)v102, "RavenEstimator::GetOscillatorProcessNoiseCovarianceMatrix using default xo model.  lgpms,%d,xams,%d,gorv,%d,xamvdv,%d,xamu,%d,xamv,%d", v16, v17, v19, v21, v40, v41);
    if (*(char *)(a1 + 2511) >= 0) {
      LOBYTE(v76) = v70;
    }
    else {
      uint64_t v76 = *(void *)(a1 + 2488);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v100, (unsigned __int8 *)v99, "%s", v71, v72, v73, v74, v75, v76);
  }
  if (((v58 | v41) & 1) == 0 && cnprint::CNPrinter::GetLogLevel(LogLevel) <= 1)
  {
    LOWORD(v100) = 12;
    LOBYTE(v99[0]) = 1;
    char v77 = cnprint::CNLogFormatter::FormatGeneral(a1 + 2488, (uint64_t)v102, "RavenEstimator::GetOscillatorProcessNoiseCovarianceMatrix encountered invalid xo model.  Using default model.");
    if (*(char *)(a1 + 2511) >= 0) {
      LOBYTE(v83) = v77;
    }
    else {
      uint64_t v83 = *(void *)(a1 + 2488);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v100, (unsigned __int8 *)v99, "%s", v78, v79, v80, v81, v82, v83);
  }
  double v84 = *(double *)(a2 + 40);
  double v85 = *(double *)(a2 + 48);
  if ((*(void *)&v84 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && v84 > 0.0
    && (*(void *)&v85 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && v85 > 0.0)
  {
    uint64_t result = 0;
    double v86 = v84 * 1000000.0 * 1000000.0 * 49.348022;
    double v87 = *(double **)(v96 + 32);
    *double v87 = v55 * (v86 * 0.333333333) + v85 * 1000000.0 * 1000000.0 * 1.25 * v53;
    double v88 = v54 * (v86 * 0.5);
    long long v67 = &v87[*(int *)(v96 + 20)];
    double *v67 = v88;
    v87[1] = v88;
    double v68 = v53 * v86;
LABEL_98:
    v67[1] = v68;
    return result;
  }
  LOWORD(v100) = 12;
  LOBYTE(v99[0]) = 5;
  char v89 = cnprint::CNLogFormatter::FormatGeneral(a1 + 2488, (uint64_t)v102, "RavenEstimator::GetOscillatorProcessNoiseCovarianceMatrix called with invalid parameters xo_alpha,%.3lf,xo_gamma,%.3lf.", v84, v85);
  if (*(char *)(a1 + 2511) >= 0) {
    LOBYTE(v95) = v89;
  }
  else {
    uint64_t v95 = *(void *)(a1 + 2488);
  }
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v100, (unsigned __int8 *)v99, "%s", v90, v91, v92, v93, v94, v95);
  return 0xFFFFFFFFLL;
}

void *sub_18E0740B0(void *result)
{
  *uint64_t result = &unk_1EDD174A8;
  return result;
}

uint64_t sub_18E0740D0(uint64_t result, uint64_t a2)
{
  int v2 = *(_DWORD *)(result + 8);
  if (v2 != *(_DWORD *)(a2 + 8)) {
    __assert_rtn("operator=", "cnsubmatrix.h", 376, "this->num_rows_ == A.num_rows_");
  }
  uint64_t v3 = *(unsigned int *)(result + 12);
  if (v3 != *(_DWORD *)(a2 + 12)) {
    __assert_rtn("operator=", "cnsubmatrix.h", 377, "this->num_cols_ == A.num_cols_");
  }
  if (v3)
  {
    unsigned int v4 = 0;
    uint64_t v5 = 0;
    uint64_t v6 = *(void *)(a2 + 32);
    do
    {
      if (v2)
      {
        uint64_t v7 = *(void *)(result + 328);
        int8x16_t v8 = *(int **)(result + 368);
        int v9 = *(_DWORD *)(v7 + 20) * *(_DWORD *)(*(void *)(result + 432) + 4 * v5);
        uint64_t v10 = *(void *)(v7 + 32);
        uint64_t v11 = *(void *)(result + 32);
        int v12 = *(_DWORD *)(result + 20) * v5;
        unsigned int v13 = v4;
        int v14 = v2;
        do
        {
          uint64_t v15 = *(void *)(v6 + 8 * v13);
          int v16 = *v8++;
          *(void *)(v10 + 8 * (v16 + v9)) = v15;
          *(void *)(v11 + 8 * v12++) = v15;
          ++v13;
          --v14;
        }
        while (v14);
      }
      ++v5;
      v4 += v2;
    }
    while (v5 != v3);
  }
  return result;
}

void *sub_18E0741BC(void *result)
{
  result[50] = &unk_1EDD174A8;
  result[42] = &unk_1EDD174A8;
  *uint64_t result = &unk_1EDD17478;
  return result;
}

uint64_t sub_18E07421C(uint64_t result, uint64_t a2)
{
  int v2 = *(_DWORD *)(result + 8);
  if (v2 != *(_DWORD *)(a2 + 8)) {
    __assert_rtn("operator=", "cnsubmatrix.h", 376, "this->num_rows_ == A.num_rows_");
  }
  uint64_t v3 = *(unsigned int *)(result + 12);
  if (v3 != *(_DWORD *)(a2 + 12)) {
    __assert_rtn("operator=", "cnsubmatrix.h", 377, "this->num_cols_ == A.num_cols_");
  }
  if (v3)
  {
    unsigned int v4 = 0;
    uint64_t v5 = 0;
    uint64_t v6 = *(void *)(a2 + 32);
    do
    {
      if (v2)
      {
        uint64_t v7 = *(void *)(result + 72);
        int8x16_t v8 = *(int **)(result + 112);
        int v9 = *(_DWORD *)(v7 + 20) * *(_DWORD *)(*(void *)(result + 160) + 4 * v5);
        uint64_t v10 = *(void *)(v7 + 32);
        uint64_t v11 = *(void *)(result + 32);
        int v12 = *(_DWORD *)(result + 20) * v5;
        unsigned int v13 = v4;
        int v14 = v2;
        do
        {
          uint64_t v15 = *(void *)(v6 + 8 * v13);
          int v16 = *v8++;
          *(void *)(v10 + 8 * (v16 + v9)) = v15;
          *(void *)(v11 + 8 * v12++) = v15;
          ++v13;
          --v14;
        }
        while (v14);
      }
      ++v5;
      v4 += v2;
    }
    while (v5 != v3);
  }
  return result;
}

void *sub_18E074308(void *result)
{
  result[16] = &unk_1EDD174A8;
  result[10] = &unk_1EDD174A8;
  *uint64_t result = &unk_1EDD17478;
  return result;
}

uint64_t sub_18E074368(uint64_t a1, float64_t a2, float64_t a3, double a4)
{
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)(a1 + 40) = 0x300000003;
  *(void *)(a1 + 16) = &unk_1EDD18EE8;
  *(_OWORD *)(a1 + 24) = xmmword_18E1F0010;
  *(void *)(a1 + 48) = a1 + 56;
  *(void *)a1 = &unk_1EDD0AB90;
  sub_18DFFDACC((unsigned char *)a1, a2, a3, a4);
  return a1;
}

void sub_18E0743EC(_Unwind_Exception *a1)
{
  *unsigned int v1 = &unk_1EDD0B188;
  char v1[2] = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

__n128 sub_18E074428(uint64_t a1, uint64_t a2)
{
  result.n128_u64[0] = 0x600000006;
  *(void *)(a1 + 24) = 0x600000006;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1EDD197B8;
  if (a1 == a2)
  {
    BOOL v17 = "this != &(A)";
    int v18 = 603;
    goto LABEL_16;
  }
  int v3 = *(_DWORD *)(a2 + 8);
  int v4 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = v4;
  uint64_t v5 = (v4 * v3);
  *(_DWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 20) = v3;
  uint64_t v6 = (unint64_t *)(a1 + 40);
  *(void *)(a1 + 32) = a1 + 40;
  if (*(_DWORD *)(a2 + 8) > 6u)
  {
    BOOL v17 = "this->max_num_rows_ >= A.num_rows_";
    int v18 = 616;
    goto LABEL_16;
  }
  if (*(_DWORD *)(a2 + 12) >= 7u)
  {
    BOOL v17 = "this->max_num_cols_ >= A.num_cols_";
    int v18 = 617;
LABEL_16:
    __assert_rtn("CNMatrix", "cnmatrix.h", v18, v17);
  }
  int v7 = *(_DWORD *)(a2 + 16);
  if (v7 > 3)
  {
    uint64_t v10 = (v7 - 2);
    uint64_t v11 = *(long long **)(a2 + 32);
    uint64_t v12 = (v7 - 1) >> 1;
    unsigned int v13 = v11;
    int v14 = (_OWORD *)(a1 + 40);
    do
    {
      long long v15 = *v13++;
      *v14++ = v15;
      --v12;
    }
    while (v12);
    uint64_t v16 = v10;
    __n128 result = *(__n128 *)((char *)v11 + v16 * 8);
    *(__n128 *)&v6[v16] = result;
  }
  else if ((int)v5 >= 1)
  {
    int8x16_t v8 = *(unint64_t **)(a2 + 32);
    do
    {
      unint64_t v9 = *v8++;
      result.n128_u64[0] = v9;
      *v6++ = v9;
      --v5;
    }
    while (v5);
  }
  return result;
}

void sub_18E074554(_Unwind_Exception *a1)
{
  *unsigned int v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

void sub_18E074574(void *a1)
{
  *a1 = &unk_1EDD174A8;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E0745A4(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E0745B0(uint64_t a1)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  sub_18DFE2870(a1, v1);
}

void sub_18E074600(void *a1)
{
  *a1 = &unk_1EDD174A8;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E074630(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E07463C(uint64_t a1)
{
  sub_18DFE2870(a1, v1);
}

uint64_t sub_18E074660(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(a1 + 24) = 0x600000006;
  *(_OWORD *)(a1 + 8) = xmmword_18E1F8570;
  *(void *)(a1 + 32) = a1 + 40;
  *(void *)a1 = &unk_1EDD167E8;
  *(void *)(a1 + 328) = a2;
  *(void *)(a1 + 360) = 0x100000006;
  *(void *)(a1 + 336) = &unk_1EDD19758;
  *(_OWORD *)(a1 + 344) = xmmword_18E1FD770;
  *(void *)(a1 + 368) = a1 + 376;
  *(void *)(a1 + 424) = 0x100000006;
  *(void *)(a1 + 400) = &unk_1EDD19758;
  *(_OWORD *)(a1 + 408) = xmmword_18E1FD770;
  *(void *)(a1 + 432) = a1 + 440;
  sub_18DFEEA3C(a1 + 336, a3);
  sub_18DFEEA3C(a1 + 400, a4);
  uint64_t v7 = *(unsigned int *)(a1 + 352);
  uint64_t v8 = *(unsigned int *)(a1 + 416);
  *(_DWORD *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 12) = v8;
  *(_DWORD *)(a1 + 16) = v8 * v7;
  *(_DWORD *)(a1 + 20) = v7;
  if (v8)
  {
    unsigned int v9 = 0;
    uint64_t v10 = 0;
    int v11 = *(_DWORD *)(a2 + 20);
    uint64_t v12 = *(void *)(a2 + 32);
    do
    {
      if (v7)
      {
        unsigned int v13 = *(int **)(a1 + 368);
        int v14 = *(_DWORD *)(*(void *)(a1 + 432) + 4 * v10) * v11;
        uint64_t v15 = *(void *)(a1 + 32);
        unsigned int v16 = v9;
        uint64_t v17 = v7;
        do
        {
          int v18 = *v13++;
          *(void *)(v15 + 8 * v16++) = *(void *)(v12 + 8 * (v18 + v14));
          --v17;
        }
        while (v17);
      }
      ++v10;
      v9 += v7;
    }
    while (v10 != v8);
  }
  return a1;
}

void sub_18E0747CC(void *a1)
{
  a1[50] = &unk_1EDD174A8;
  a1[42] = &unk_1EDD174A8;
  *a1 = &unk_1EDD17478;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E07483C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 24) = 0x100000002;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)__n128 result = &unk_1EDD18B58;
  int v3 = *(_DWORD *)(a2 + 8);
  int v2 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(result + 8) = v3;
  *(_DWORD *)(result + 12) = v2;
  uint64_t v4 = (v2 * v3);
  *(_DWORD *)(result + 16) = v4;
  *(_DWORD *)(result + 20) = v3;
  uint64_t v5 = (_DWORD *)(result + 40);
  *(void *)(result + 32) = result + 40;
  if (*(_DWORD *)(a2 + 8) > 2u)
  {
    uint64_t v8 = "this->max_num_rows_ >= A.NumRows()";
    int v9 = 567;
    goto LABEL_9;
  }
  if (*(_DWORD *)(a2 + 12) > 1u)
  {
    uint64_t v8 = "this->max_num_cols_ >= A.NumCols()";
    int v9 = 568;
LABEL_9:
    __assert_rtn("CNMatrix", "cnmatrix.h", v9, v8);
  }
  if ((int)v4 >= 1)
  {
    uint64_t v6 = *(int **)(a2 + 32);
    do
    {
      int v7 = *v6++;
      *v5++ = v7;
      --v4;
    }
    while (v4);
  }
  return result;
}

void sub_18E07490C(_Unwind_Exception *a1)
{
  *unsigned int v1 = &unk_1EDD174A8;
  _Unwind_Resume(a1);
}

uint64_t sub_18E07492C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(a1 + 24) = 0x200000002;
  *(_OWORD *)(a1 + 8) = xmmword_18E1FD1B0;
  *(void *)(a1 + 32) = a1 + 40;
  *(void *)a1 = &unk_1EDD16578;
  *(void *)(a1 + 72) = a2;
  *(void *)(a1 + 104) = 0x100000002;
  *(void *)(a1 + 80) = &unk_1EDD18B58;
  *(_OWORD *)(a1 + 88) = xmmword_18E1FD1A0;
  *(void *)(a1 + 112) = a1 + 120;
  *(void *)(a1 + 152) = 0x100000002;
  *(void *)(a1 + 128) = &unk_1EDD18B58;
  *(_OWORD *)(a1 + 136) = xmmword_18E1FD1A0;
  *(void *)(a1 + 160) = a1 + 168;
  sub_18DFEEA3C(a1 + 80, a3);
  sub_18DFEEA3C(a1 + 128, a4);
  uint64_t v7 = *(unsigned int *)(a1 + 96);
  uint64_t v8 = *(unsigned int *)(a1 + 144);
  *(_DWORD *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 12) = v8;
  *(_DWORD *)(a1 + 16) = v8 * v7;
  *(_DWORD *)(a1 + 20) = v7;
  if (v8)
  {
    unsigned int v9 = 0;
    uint64_t v10 = 0;
    int v11 = *(_DWORD *)(a2 + 20);
    uint64_t v12 = *(void *)(a2 + 32);
    do
    {
      if (v7)
      {
        unsigned int v13 = *(int **)(a1 + 112);
        int v14 = *(_DWORD *)(*(void *)(a1 + 160) + 4 * v10) * v11;
        uint64_t v15 = *(void *)(a1 + 32);
        unsigned int v16 = v9;
        uint64_t v17 = v7;
        do
        {
          int v18 = *v13++;
          *(void *)(v15 + 8 * v16++) = *(void *)(v12 + 8 * (v18 + v14));
          --v17;
        }
        while (v17);
      }
      ++v10;
      v9 += v7;
    }
    while (v10 != v8);
  }
  return a1;
}

void sub_18E074A94(void *a1)
{
  a1[16] = &unk_1EDD174A8;
  a1[10] = &unk_1EDD174A8;
  *a1 = &unk_1EDD17478;
  JUMPOUT(0x192FA6240);
}

void sub_18E074B04(void *a1)
{
  *a1 = &unk_1EDD174A8;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E074B34(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E074B40(uint64_t a1)
{
  sub_18DFE2870(a1, v1);
}

void sub_18E074B64(void *a1)
{
  *a1 = &unk_1EDD17358;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E074B94(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E074BA0(uint64_t a1)
{
  sub_18DFF2F14(a1, v1);
}

void sub_18E074BCC(void *a1)
{
  *a1 = &unk_1EDD17418;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E074BFC(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E074C08(uint64_t a1)
{
  sub_18DFF2F14(a1, v1);
}

uint64_t sub_18E074C34@<X0>(char *__s1@<X1>, uint64_t a2@<X0>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result = strcmp(__s1, ":");
  if (result) {
    __assert_rtn("operator()", "cnmatrix.h", 939, "strcmp(r, \":\") == 0");
  }
  int v8 = *(_DWORD *)(a2 + 8);
  *(void *)(a4 + 24) = 0x100000002;
  *(void *)a4 = &unk_1EDD18B58;
  *(_DWORD *)(a4 + 8) = v8;
  *(_DWORD *)(a4 + 12) = 1;
  *(_DWORD *)(a4 + 16) = v8;
  *(_DWORD *)(a4 + 20) = v8;
  unsigned int v9 = (_DWORD *)(a4 + 40);
  *(void *)(a4 + 32) = a4 + 40;
  if (v8)
  {
    int v10 = *(_DWORD *)(a2 + 20) * a3;
    uint64_t v11 = *(void *)(a2 + 32);
    do
    {
      *v9++ = *(_DWORD *)(v11 + 4 * v10++);
      --v8;
    }
    while (v8);
  }
  return result;
}

double sub_18E074D00@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v3 = *(_DWORD *)(a2 + 8);
  int v4 = *(_DWORD *)(a2 + 12);
  uint64_t v5 = (v4 * v3);
  *(void *)&double result = 0x100000008;
  *(void *)(a3 + 24) = 0x100000008;
  *(void *)a3 = &unk_1EDD19CC8;
  *(_DWORD *)(a3 + 8) = v3;
  *(_DWORD *)(a3 + 12) = v4;
  *(_DWORD *)(a3 + 16) = v5;
  *(_DWORD *)(a3 + 20) = v3;
  uint64_t v7 = (double *)(a3 + 40);
  *(void *)(a3 + 32) = a3 + 40;
  if (v5)
  {
    int v8 = *(int **)(a2 + 32);
    uint64_t v9 = *(void *)(a1 + 32);
    do
    {
      uint64_t v10 = *v8++;
      double result = *(double *)(v9 + 8 * v10);
      *v7++ = result;
      --v5;
    }
    while (v5);
  }
  return result;
}

void *sub_18E074D64(void *result)
{
  result[14] = &unk_1EDD174A8;
  *double result = &unk_1EDD17478;
  return result;
}

double sub_18E074DA4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 16);
  if (v2 != *(_DWORD *)(a2 + 16)) {
    __assert_rtn("operator=", "cnsubvector.h", 347, "this->num_elements_ == A.num_elements_");
  }
  if ((int)v2 >= 1)
  {
    int v3 = *(double **)(a2 + 32);
    int v4 = *(int **)(a1 + 144);
    uint64_t v5 = *(void *)(*(void *)(a1 + 104) + 32);
    uint64_t v6 = *(double **)(a1 + 32);
    do
    {
      double v7 = *v3++;
      double result = v7;
      uint64_t v9 = *v4++;
      *(double *)(v5 + 8 * v9) = result;
      *v6++ = result;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t sub_18E074E1C(uint64_t result, uint64_t a2)
{
  int v2 = *(_DWORD *)(result + 8);
  if (v2 != *(_DWORD *)(a2 + 8)) {
    __assert_rtn("operator=", "cnsubmatrix.h", 376, "this->num_rows_ == A.num_rows_");
  }
  uint64_t v3 = *(unsigned int *)(result + 12);
  if (v3 != *(_DWORD *)(a2 + 12)) {
    __assert_rtn("operator=", "cnsubmatrix.h", 377, "this->num_cols_ == A.num_cols_");
  }
  if (v3)
  {
    unsigned int v4 = 0;
    uint64_t v5 = 0;
    uint64_t v6 = *(void *)(a2 + 32);
    do
    {
      if (v2)
      {
        uint64_t v7 = *(void *)(result + 552);
        int v8 = *(int **)(result + 592);
        int v9 = *(_DWORD *)(v7 + 20) * *(_DWORD *)(*(void *)(result + 664) + 4 * v5);
        uint64_t v10 = *(void *)(v7 + 32);
        uint64_t v11 = *(void *)(result + 32);
        int v12 = *(_DWORD *)(result + 20) * v5;
        unsigned int v13 = v4;
        int v14 = v2;
        do
        {
          uint64_t v15 = *(void *)(v6 + 8 * v13);
          int v16 = *v8++;
          *(void *)(v10 + 8 * (v16 + v9)) = v15;
          *(void *)(v11 + 8 * v12++) = v15;
          ++v13;
          --v14;
        }
        while (v14);
      }
      ++v5;
      v4 += v2;
    }
    while (v5 != v3);
  }
  return result;
}

void *sub_18E074F08(void *result)
{
  result[79] = &unk_1EDD174A8;
  result[70] = &unk_1EDD174A8;
  *double result = &unk_1EDD17478;
  return result;
}

uint64_t sub_18E074F68@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v4 = *(_DWORD *)(a2 + 16);
  int v5 = *(_DWORD *)(a3 + 16);
  *(void *)(a4 + 24) = 0x800000008;
  *(void *)a4 = &unk_1EDD19DE8;
  *(_DWORD *)(a4 + 8) = v4;
  *(_DWORD *)(a4 + 12) = v5;
  *(_DWORD *)(a4 + 16) = v5 * v4;
  *(_DWORD *)(a4 + 20) = v4;
  uint64_t v6 = a4 + 40;
  *(void *)(a4 + 32) = a4 + 40;
  if (v5)
  {
    int v7 = 0;
    int v8 = 0;
    uint64_t v9 = *(void *)(a2 + 32);
    uint64_t v10 = *(void *)(a3 + 32);
    do
    {
      if (v4)
      {
        int v11 = 0;
        int v12 = *(_DWORD *)(result + 20) * *(_DWORD *)(v10 + 4 * v8);
        uint64_t v13 = *(void *)(result + 32);
        do
        {
          *(void *)(v6 + 8 * (v7 + v11)) = *(void *)(v13
                                                                       + 8
                                                                       * (*(_DWORD *)(v9 + 4 * v11) + v12));
          ++v11;
        }
        while (v4 != v11);
      }
      ++v8;
      v7 += v4;
    }
    while (v8 != v5);
  }
  return result;
}

uint64_t sub_18E075008@<X0>(char *__s1@<X2>, uint64_t a2@<X0>, uint64_t a3@<X1>, uint64_t a4@<X8>)
{
  if (strcmp(__s1, ":")) {
    __assert_rtn("operator()", "cnmatrix.h", 1194, "strcmp(c, \":\") == 0");
  }
  uint64_t v7 = *(unsigned int *)(a2 + 12);
  sub_18E075D20((uint64_t)v11, *(_DWORD *)(a2 + 12), 1);
  if ((int)v7 >= 1)
  {
    uint64_t v8 = 0;
    uint64_t v9 = v12;
    do
    {
      *(_DWORD *)(v9 + 4 * v8) = v8;
      ++v8;
    }
    while (v7 != v8);
  }
  return sub_18E075B48(a4, a2, a3, (uint64_t)v11);
}

void *sub_18E0750BC(void *result)
{
  *double result = &unk_1EDD17478;
  return result;
}

void *sub_18E0750DC(void *result)
{
  *double result = &unk_1EDD17478;
  return result;
}

void *sub_18E0750FC(void *result)
{
  for (uint64_t i = 74; i != -64; i -= 69)
    result[i] = &unk_1EDD17478;
  *double result = &unk_1EDD17118;
  return result;
}

void *sub_18E07514C(void *result)
{
  for (uint64_t i = 18; i != -8; i -= 13)
    result[i] = &unk_1EDD17478;
  *double result = &unk_1EDD170E8;
  return result;
}

uint64_t sub_18E07519C(uint64_t result, int a2, uint64_t a3)
{
  if (a2 == 1)
  {
    int v3 = *(_DWORD *)(result + 12);
    *(_DWORD *)(a3 + 8) = 1;
    *(_DWORD *)(a3 + 12) = v3;
    *(_DWORD *)(a3 + 16) = v3;
    *(_DWORD *)(a3 + 20) = 1;
    if (*(_DWORD *)(result + 12))
    {
      unint64_t v4 = 0;
      uint64_t v5 = *(void *)(result + 32);
      uint64_t v6 = *(void *)(a3 + 32);
      do
      {
        uint64_t v7 = *(unsigned int *)(result + 8);
        int v8 = *(_DWORD *)(v5 + 4 * (v7 * v4));
        if (v7 >= 2)
        {
          uint64_t v9 = v7 - 1;
          unsigned int v10 = v7 * v4 + 1;
          do
          {
            v8 += *(_DWORD *)(v5 + 4 * v10++);
            --v9;
          }
          while (v9);
        }
        *(_DWORD *)(v6 + 4 * v4++) = v8;
      }
      while (v4 < *(unsigned int *)(result + 12));
    }
  }
  else
  {
    v11.i32[1] = 1;
    v11.i32[0] = *(_DWORD *)(result + 8);
    int32x4_t v12 = vdupq_lane_s32(v11, 0);
    v12.i32[1] = 1;
    *(int32x4_t *)(a3 + 8) = v12;
    if (*(_DWORD *)(result + 8))
    {
      unint64_t v13 = 0;
      uint64_t v14 = *(void *)(result + 32);
      uint64_t v15 = *(void *)(a3 + 32);
      do
      {
        *(_DWORD *)(v15 + 4 * v13) = *(_DWORD *)(v14 + 4 * v13);
        ++v13;
        unint64_t v16 = *(unsigned int *)(result + 8);
      }
      while (v13 < v16);
    }
    else
    {
      LODWORD(v16) = 0;
    }
    unsigned int v17 = *(_DWORD *)(result + 12);
    if (v17 >= 2)
    {
      uint64_t v18 = *(void *)(result + 32);
      uint64_t v19 = *(void *)(a3 + 32);
      for (unsigned int i = 1; i < v17; ++i)
      {
        if (v16)
        {
          unint64_t v21 = 0;
          int v22 = v16 * i;
          do
          {
            *(_DWORD *)(v19 + 4 * v21) += *(_DWORD *)(v18 + 4 * (v22 + v21));
            ++v21;
            unint64_t v16 = *(unsigned int *)(result + 8);
          }
          while (v21 < v16);
          unsigned int v17 = *(_DWORD *)(result + 12);
        }
      }
    }
  }
  return result;
}

uint64_t sub_18E0752C0(uint64_t a1, int a2, int a3, __n128 a4)
{
  uint64_t v5 = 0;
  *(void *)(a1 + 24) = 0x100000002;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1EDD189D8;
  a4.n128_u64[0] = 0x100000008;
  do
  {
    uint64_t v6 = a1 + v5;
    *(void *)(v6 + 64) = 0x100000008;
    *(void *)(v6 + 40) = &unk_1EDD19CC8;
    *(_OWORD *)(v6 + 48) = xmmword_18E1FD760;
    *(void *)(v6 + 72) = a1 + v5 + 80;
    v5 += 104;
  }
  while (v5 != 208);
  if (a2 < 0)
  {
    int v8 = "nr >= 0";
    int v9 = 419;
    goto LABEL_8;
  }
  if (a3 < 0)
  {
    int v8 = "nc >= 0";
    int v9 = 420;
LABEL_8:
    __assert_rtn("CNMatrix", "cnmatrix.h", v9, v8);
  }
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = a3;
  *(_DWORD *)(a1 + 16) = a3 * a2;
  *(_DWORD *)(a1 + 20) = a2;
  (*(void (**)(uint64_t, __n128, __int128))(*(void *)a1 + 16))(a1, a4, xmmword_18E1FD760);
  return a1;
}

void sub_18E0753DC(_Unwind_Exception *a1)
{
  for (uint64_t i = 18; i != -8; i -= 13)
    v1[i] = &unk_1EDD17478;
  *unsigned int v1 = &unk_1EDD170E8;
  _Unwind_Resume(a1);
}

void sub_18E07542C(void *a1)
{
  for (uint64_t i = 18; i != -8; i -= 13)
    a1[i] = &unk_1EDD17478;
  *a1 = &unk_1EDD170E8;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E07548C(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E075498(uint64_t a1)
{
  sub_18E0754C4(a1, v1);
}

void sub_18E0754C4(uint64_t a1, char *a2)
{
  unsigned int v2 = *(_DWORD *)(a1 + 8);
  if (v2 >= 2)
  {
    unsigned int v4 = *(_DWORD *)(a1 + 12);
    if (v4 >= 2)
    {
      int v6 = *(_DWORD *)(a1 + 20);
      bzero(a2, *(unsigned int *)(a1 + 16));
      int v7 = *(_DWORD *)(a1 + 16);
      if (v7 >= 3)
      {
        int v8 = v4 + v2 - v6;
        uint64_t v9 = (v7 - 1);
        uint64_t v10 = 1;
        do
        {
          sub_18E0737B4((uint64_t)v14, *(void *)(a1 + 32) + 104 * v10);
          int32x2_t v11 = &a2[v10];
          if (!a2[v10])
          {
            int v12 = v10;
            do
            {
              int v12 = v12 * v8 % (int)v9;
              sub_18E0737B4((uint64_t)v13, *(void *)(a1 + 32) + 104 * v12);
              sub_18DFE2F24(*(void *)(a1 + 32) + 104 * v12, (uint64_t)v14);
              *int32x2_t v11 = 1;
              sub_18DFE2F24((uint64_t)v14, (uint64_t)v13);
              int32x2_t v11 = &a2[v12];
            }
            while (!*v11);
          }
          ++v10;
        }
        while (v10 != v9);
      }
    }
  }
}

uint64_t sub_18E0755CC(uint64_t a1, int a2, int a3, double a4, __n128 a5)
{
  uint64_t v6 = 0;
  *(void *)(a1 + 24) = 0x100000002;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1EDD18A08;
  a5.n128_u64[0] = 0x800000008;
  do
  {
    uint64_t v7 = a1 + v6;
    *(void *)(v7 + 64) = 0x800000008;
    *(void *)(v7 + 40) = &unk_1EDD19DE8;
    *(_OWORD *)(v7 + 48) = xmmword_18E1FD750;
    *(void *)(v7 + 72) = a1 + v6 + 80;
    v6 += 552;
  }
  while (v6 != 1104);
  if (a2 < 0)
  {
    uint64_t v9 = "nr >= 0";
    int v10 = 419;
    goto LABEL_8;
  }
  if (a3 < 0)
  {
    uint64_t v9 = "nc >= 0";
    int v10 = 420;
LABEL_8:
    __assert_rtn("CNMatrix", "cnmatrix.h", v10, v9);
  }
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = a3;
  *(_DWORD *)(a1 + 16) = a3 * a2;
  *(_DWORD *)(a1 + 20) = a2;
  (*(void (**)(uint64_t, __int128, __n128))(*(void *)a1 + 16))(a1, xmmword_18E1FD750, a5);
  return a1;
}

void sub_18E0756E4(_Unwind_Exception *a1)
{
  for (uint64_t i = 74; i != -64; i -= 69)
    v1[i] = &unk_1EDD17478;
  *unsigned int v1 = &unk_1EDD17118;
  _Unwind_Resume(a1);
}

void sub_18E075734(void *a1)
{
  for (uint64_t i = 74; i != -64; i -= 69)
    a1[i] = &unk_1EDD17478;
  *a1 = &unk_1EDD17118;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E075794(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E0757A0(uint64_t a1)
{
  sub_18E0757CC(a1, v1);
}

void sub_18E0757CC(uint64_t a1, char *a2)
{
  unsigned int v2 = *(_DWORD *)(a1 + 8);
  if (v2 >= 2)
  {
    unsigned int v4 = *(_DWORD *)(a1 + 12);
    if (v4 >= 2)
    {
      int v6 = *(_DWORD *)(a1 + 20);
      bzero(a2, *(unsigned int *)(a1 + 16));
      int v7 = *(_DWORD *)(a1 + 16);
      if (v7 >= 3)
      {
        int v8 = v4 + v2 - v6;
        uint64_t v9 = (v7 - 1);
        uint64_t v10 = 1;
        do
        {
          sub_18E0759FC((uint64_t)v14, *(void *)(a1 + 32) + 552 * v10);
          int32x2_t v11 = &a2[v10];
          if (!a2[v10])
          {
            int v12 = v10;
            do
            {
              int v12 = v12 * v8 % (int)v9;
              sub_18E0759FC((uint64_t)v13, *(void *)(a1 + 32) + 552 * v12);
              sub_18DFE2F24(*(void *)(a1 + 32) + 552 * v12, (uint64_t)v14);
              *int32x2_t v11 = 1;
              sub_18DFE2F24((uint64_t)v14, (uint64_t)v13);
              int32x2_t v11 = &a2[v12];
            }
            while (!*v11);
          }
          ++v10;
        }
        while (v10 != v9);
      }
    }
  }
}

uint64_t sub_18E0758D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 24) = 0x100000008;
  *(_OWORD *)(a1 + 8) = xmmword_18E1FD760;
  *(void *)(a1 + 32) = a1 + 40;
  *(void *)a1 = &unk_1EDD16E78;
  *(void *)(a1 + 104) = a2;
  *(void *)(a1 + 136) = 0x100000008;
  *(void *)(a1 + 112) = &unk_1EDD19CF8;
  *(_OWORD *)(a1 + 120) = xmmword_18E1FD760;
  *(void *)(a1 + 144) = a1 + 152;
  sub_18DFEEA3C(a1 + 112, a3);
  int v6 = *(_DWORD *)(a1 + 120);
  int v5 = *(_DWORD *)(a1 + 124);
  *(_DWORD *)(a1 + 8) = v6;
  *(_DWORD *)(a1 + 12) = v5;
  uint64_t v7 = (v5 * v6);
  *(_DWORD *)(a1 + 16) = v7;
  *(_DWORD *)(a1 + 20) = v6;
  if ((int)v7 >= 1)
  {
    int v8 = *(int **)(a1 + 144);
    uint64_t v9 = *(void *)(a2 + 32);
    uint64_t v10 = *(void **)(a1 + 32);
    do
    {
      uint64_t v11 = *v8++;
      *v10++ = *(void *)(v9 + 8 * v11);
      --v7;
    }
    while (v7);
  }
  return a1;
}

void sub_18E0759AC(void *a1)
{
  a1[14] = &unk_1EDD174A8;
  *a1 = &unk_1EDD17478;
  JUMPOUT(0x192FA6240);
}

__n128 sub_18E0759FC(uint64_t a1, uint64_t a2)
{
  result.n128_u64[0] = 0x800000008;
  *(void *)(a1 + 24) = 0x800000008;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1EDD19DE8;
  if (a1 == a2)
  {
    unsigned int v17 = "this != &(A)";
    int v18 = 603;
    goto LABEL_16;
  }
  int v3 = *(_DWORD *)(a2 + 8);
  int v4 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = v4;
  uint64_t v5 = (v4 * v3);
  *(_DWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 20) = v3;
  int v6 = (unint64_t *)(a1 + 40);
  *(void *)(a1 + 32) = a1 + 40;
  if (*(_DWORD *)(a2 + 8) > 8u)
  {
    unsigned int v17 = "this->max_num_rows_ >= A.num_rows_";
    int v18 = 616;
    goto LABEL_16;
  }
  if (*(_DWORD *)(a2 + 12) >= 9u)
  {
    unsigned int v17 = "this->max_num_cols_ >= A.num_cols_";
    int v18 = 617;
LABEL_16:
    __assert_rtn("CNMatrix", "cnmatrix.h", v18, v17);
  }
  int v7 = *(_DWORD *)(a2 + 16);
  if (v7 > 3)
  {
    uint64_t v10 = (v7 - 2);
    uint64_t v11 = *(long long **)(a2 + 32);
    uint64_t v12 = (v7 - 1) >> 1;
    unint64_t v13 = v11;
    uint64_t v14 = (_OWORD *)(a1 + 40);
    do
    {
      long long v15 = *v13++;
      *v14++ = v15;
      --v12;
    }
    while (v12);
    uint64_t v16 = v10;
    __n128 result = *(__n128 *)((char *)v11 + v16 * 8);
    *(__n128 *)&v6[v16] = result;
  }
  else if ((int)v5 >= 1)
  {
    int v8 = *(unint64_t **)(a2 + 32);
    do
    {
      unint64_t v9 = *v8++;
      result.n128_u64[0] = v9;
      *v6++ = v9;
      --v5;
    }
    while (v5);
  }
  return result;
}

void sub_18E075B28(_Unwind_Exception *a1)
{
  *unsigned int v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

uint64_t sub_18E075B48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(a1 + 24) = 0x800000008;
  *(_OWORD *)(a1 + 8) = xmmword_18E1FD750;
  *(void *)(a1 + 32) = a1 + 40;
  *(void *)a1 = &unk_1EDD16848;
  *(void *)(a1 + 552) = a2;
  uint64_t v7 = a1 + 560;
  *(void *)(a1 + 584) = 0x100000008;
  *(void *)(a1 + 560) = &unk_1EDD19CF8;
  *(_OWORD *)(v7 + 8) = xmmword_18E1FD760;
  *(void *)(a1 + 592) = a1 + 600;
  *(void *)(a1 + 656) = 0x100000008;
  *(void *)(a1 + 632) = &unk_1EDD19CF8;
  *(_OWORD *)(a1 + 640) = xmmword_18E1FD760;
  *(void *)(a1 + 664) = a1 + 672;
  sub_18DFEEA3C(v7, a3);
  sub_18DFEEA3C(a1 + 632, a4);
  uint64_t v8 = *(unsigned int *)(a1 + 576);
  uint64_t v9 = *(unsigned int *)(a1 + 648);
  *(_DWORD *)(a1 + 8) = v8;
  *(_DWORD *)(a1 + 12) = v9;
  *(_DWORD *)(a1 + 16) = v9 * v8;
  *(_DWORD *)(a1 + 20) = v8;
  if (v9)
  {
    unsigned int v10 = 0;
    uint64_t v11 = 0;
    int v12 = *(_DWORD *)(a2 + 20);
    uint64_t v13 = *(void *)(a2 + 32);
    do
    {
      if (v8)
      {
        uint64_t v14 = *(int **)(a1 + 592);
        int v15 = *(_DWORD *)(*(void *)(a1 + 664) + 4 * v11) * v12;
        uint64_t v16 = *(void *)(a1 + 32);
        unsigned int v17 = v10;
        uint64_t v18 = v8;
        do
        {
          int v19 = *v14++;
          *(void *)(v16 + 8 * v17++) = *(void *)(v13 + 8 * (v19 + v15));
          --v18;
        }
        while (v18);
      }
      ++v11;
      v10 += v8;
    }
    while (v11 != v9);
  }
  return a1;
}

void sub_18E075CB0(void *a1)
{
  a1[79] = &unk_1EDD174A8;
  a1[70] = &unk_1EDD174A8;
  *a1 = &unk_1EDD17478;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E075D20(uint64_t result, int a2, int a3)
{
  *(void *)(result + 24) = 0x100000008;
  *(void *)(result + 32) = 0;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)__n128 result = &unk_1EDD19CF8;
  if (a2 < 0)
  {
    int v3 = "nr >= 0";
    int v4 = 419;
    goto LABEL_6;
  }
  if (a3 < 0)
  {
    int v3 = "nc >= 0";
    int v4 = 420;
LABEL_6:
    __assert_rtn("CNMatrix", "cnmatrix.h", v4, v3);
  }
  *(_DWORD *)(result + 8) = a2;
  *(_DWORD *)(result + 12) = a3;
  *(_DWORD *)(result + 16) = a3 * a2;
  *(_DWORD *)(result + 20) = a2;
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E075DC4(_Unwind_Exception *a1)
{
  *unsigned int v1 = &unk_1EDD174A8;
  _Unwind_Resume(a1);
}

uint64_t sub_18E075DE4(uint64_t result, uint64_t a2, uint64_t a3)
{
  unsigned int v3 = *(_DWORD *)(result + 8);
  int v4 = *(_DWORD *)(result + 12);
  int v5 = *(_DWORD *)(a2 + 8);
  int v6 = v5 + v3;
  *(_DWORD *)(a3 + 8) = v5 + v3;
  *(_DWORD *)(a3 + 12) = v4;
  *(_DWORD *)(a3 + 16) = (v5 + v3) * v4;
  *(_DWORD *)(a3 + 20) = v5 + v3;
  if (v4)
  {
    int v7 = 0;
    int v8 = 0;
    unsigned int v9 = 0;
    int v10 = 0;
    int v11 = *(_DWORD *)(result + 20);
    uint64_t v12 = *(void *)(result + 32);
    __n128 result = *(void *)(a3 + 32);
    int v13 = *(_DWORD *)(a2 + 20);
    unsigned int v14 = v3;
    uint64_t v15 = *(void *)(a2 + 32);
    do
    {
      int v16 = v8;
      unsigned int v17 = v9;
      for (unsigned int i = v3; i; --i)
        *(void *)(result + 8 * v17++) = *(void *)(v12 + 8 * v16++);
      int v19 = v7;
      unsigned int v20 = v14;
      for (int j = v5; j; --j)
        *(void *)(result + 8 * v20++) = *(void *)(v15 + 8 * v19++);
      ++v10;
      v9 += v6;
      v8 += v11;
      v14 += v6;
      v7 += v13;
    }
    while (v10 != v4);
  }
  return result;
}

void sub_18E075E98(void *a1)
{
  *a1 = &unk_1EDD17478;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E075EC8(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E075ED4(uint64_t a1)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  sub_18DEF3CF4(a1, v1);
}

void sub_18E075F24(void *a1)
{
  *a1 = &unk_1EDD17478;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E075F54(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E075F60(uint64_t a1)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  sub_18DEF3CF4(a1, v1);
}

uint64_t sub_18E075FB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  sub_18DFE2F24(a6, a1);
  __CLPK_integer v11 = *(_DWORD *)(a6 + 8);
  uint64_t v12 = *(__CLPK_doublereal **)(a6 + 32);
  __CLPK_integer v13 = *(_DWORD *)(a6 + 20);
  uint64_t v50 = a3;
  unsigned int v14 = *(__CLPK_doublereal **)(a3 + 32);
  __woruint64_t k = *(__CLPK_doublereal **)(a4 + 32);
  __CLPK_integer v16 = *(_DWORD *)(a4 + 28) * *(_DWORD *)(a4 + 24);
  __CLPK_integer __n = *(_DWORD *)(a6 + 12);
  __uint64_t m = v11;
  __lworuint64_t k = v16;
  __CLPK_integer __lda = v13;
  __CLPK_integer __info = 0;
  unsigned int v17 = (cnprint::CNPrinter *)dgeqrf_(&__m, &__n, v12, &__lda, v14, __work, &__lwork, &__info);
  if (__info)
  {
    LOWORD(__m) = 4;
    LOBYTE(__n) = 5;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&__m, (unsigned __int8 *)&__n, "Error using Qr: input argument %d invalid in geqrf.", v18, v19, v20, v21, v22, -(char)__info);
  }
  int v23 = (int)**(double **)(a4 + 32);
  if (v16 < v23 && cnprint::CNPrinter::GetLogLevel(v17) <= 1)
  {
    LOWORD(__m) = 4;
    LOBYTE(__n) = 1;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&__m, (unsigned __int8 *)&__n, "Warning: Qr optimal workspace size %d is greater than provided workspace size %d; performance may suffer.",
      v24,
      v25,
      v26,
      v27,
      v28,
      v23);
  }
  sub_18DFE2F24(a5, a2);
  __CLPK_integer v29 = *(_DWORD *)(a5 + 8);
  __CLPK_integer v30 = *(_DWORD *)(a5 + 12);
  unsigned int v31 = *(_DWORD *)(a1 + 8);
  if (*(_DWORD *)(a1 + 12) < v31) {
    unsigned int v31 = *(_DWORD *)(a1 + 12);
  }
  __c__ = *(__CLPK_doublereal **)(a5 + 32);
  __CLPK_integer v33 = *(_DWORD *)(a5 + 20);
  char __side = 76;
  char __trans = 84;
  __CLPK_integer __n = v30;
  __uint64_t m = v29;
  __lworuint64_t k = v13;
  __CLPK_integer __lda = v31;
  __CLPK_integer v53 = v16;
  __CLPK_integer __info = v33;
  __CLPK_integer v52 = 0;
  uint64_t result = dormqr_(&__side, &__trans, &__m, &__n, &__lda, v12, &__lwork, v14, __c__, &__info, __work, &v53, &v52);
  unsigned int v35 = *(_DWORD *)(a1 + 8);
  if (v35 >= *(_DWORD *)(a1 + 12)) {
    unsigned int v35 = *(_DWORD *)(a1 + 12);
  }
  int32x4_t v36 = vdupq_lane_s32((int32x2_t)(v35 | 0x100000000), 0);
  v36.i32[1] = 1;
  *(int32x4_t *)(v50 + 8) = v36;
  int v37 = *(_DWORD *)(a4 + 24);
  int v38 = *(_DWORD *)(a4 + 28);
  *(_DWORD *)(a4 + 8) = v37;
  *(_DWORD *)(a4 + 12) = v38;
  *(_DWORD *)(a4 + 16) = v38 * v37;
  *(_DWORD *)(a4 + 20) = v37;
  int v39 = *(_DWORD *)(a1 + 8);
  int v40 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a5 + 8) = v39;
  *(_DWORD *)(a5 + 12) = v40;
  *(_DWORD *)(a5 + 16) = v40 * v39;
  *(_DWORD *)(a5 + 20) = v39;
  int v41 = *(_DWORD *)(a6 + 12);
  if (v41)
  {
    unsigned int v42 = 0;
    unsigned int v43 = *(_DWORD *)(a6 + 8);
    uint64_t v44 = *(void *)(a6 + 32);
    unsigned int v45 = v43 - 1;
    int v46 = *(_DWORD *)(a6 + 20) + 1;
    int v47 = 1;
    do
    {
      ++v42;
      int v48 = v47;
      unsigned int v49 = v45;
      if (v42 < v43)
      {
        do
        {
          *(void *)(v44 + 8 * v48++) = 0;
          --v49;
        }
        while (v49);
      }
      --v45;
      v47 += v46;
    }
    while (v42 != v41);
  }
  return result;
}

uint64_t sub_18E076214(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 104))
  {
    sub_18DFE2F24(a1, a2);
  }
  else
  {
    sub_18E0737B4(a1, a2);
    *(unsigned char *)(a1 + 104) = 1;
  }
  return a1;
}

void sub_18E07625C(void *a1)
{
  sub_18DEDE7B0(&__p, "\n");
  uint64_t v2 = sub_18DEDD538(a1, (uint64_t)"                                 Innovation Test Code Information", 65);
  if ((v97 & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = __p;
  }
  if ((v97 & 0x80u) == 0) {
    uint64_t v4 = v97;
  }
  else {
    uint64_t v4 = v96;
  }
  sub_18DEDD538(v2, (uint64_t)p_p, v4);
  int v5 = sub_18DEDD538(a1, (uint64_t)"            Format: Result-Reason, {low-P(LOS) reason -> lower case}, {high-P(LOS) reason -> upper case}", 104);
  if ((v97 & 0x80u) == 0) {
    int v6 = &__p;
  }
  else {
    int v6 = __p;
  }
  if ((v97 & 0x80u) == 0) {
    uint64_t v7 = v97;
  }
  else {
    uint64_t v7 = v96;
  }
  int v8 = sub_18DEDD538(v5, (uint64_t)v6, v7);
  unsigned int v9 = sub_18DEDD538(v8, (uint64_t)"------------------------------------------------------------------------------------------------------------------------------", 126);
  if ((v97 & 0x80u) == 0) {
    int v10 = &__p;
  }
  else {
    int v10 = __p;
  }
  if ((v97 & 0x80u) == 0) {
    uint64_t v11 = v97;
  }
  else {
    uint64_t v11 = v96;
  }
  uint64_t v12 = sub_18DEDD538(v9, (uint64_t)v10, v11);
  __CLPK_integer v13 = sub_18DEDD538(v12, (uint64_t)"| Innovation Test Code  |                          Reason                                                                    |", 126);
  if ((v97 & 0x80u) == 0) {
    unsigned int v14 = &__p;
  }
  else {
    unsigned int v14 = __p;
  }
  if ((v97 & 0x80u) == 0) {
    uint64_t v15 = v97;
  }
  else {
    uint64_t v15 = v96;
  }
  __CLPK_integer v16 = sub_18DEDD538(v13, (uint64_t)v14, v15);
  unsigned int v17 = sub_18DEDD538(v16, (uint64_t)"------------------------------------------------------------------------------------------------------------------------------", 126);
  if ((v97 & 0x80u) == 0) {
    uint64_t v18 = &__p;
  }
  else {
    uint64_t v18 = __p;
  }
  if ((v97 & 0x80u) == 0) {
    uint64_t v19 = v97;
  }
  else {
    uint64_t v19 = v96;
  }
  uint64_t v20 = sub_18DEDD538(v17, (uint64_t)v18, v19);
  uint64_t v21 = sub_18DEDD538(v20, (uint64_t)"|        Unk            |  Unknown test result                                                                               |", 126);
  if ((v97 & 0x80u) == 0) {
    uint64_t v22 = &__p;
  }
  else {
    uint64_t v22 = __p;
  }
  if ((v97 & 0x80u) == 0) {
    uint64_t v23 = v97;
  }
  else {
    uint64_t v23 = v96;
  }
  uint64_t v24 = sub_18DEDD538(v21, (uint64_t)v22, v23);
  uint64_t v25 = sub_18DEDD538(v24, (uint64_t)"------------------------------------------------------------------------------------------------------------------------------", 126);
  if ((v97 & 0x80u) == 0) {
    uint64_t v26 = &__p;
  }
  else {
    uint64_t v26 = __p;
  }
  if ((v97 & 0x80u) == 0) {
    uint64_t v27 = v97;
  }
  else {
    uint64_t v27 = v96;
  }
  uint64_t v28 = sub_18DEDD538(v25, (uint64_t)v26, v27);
  __CLPK_integer v29 = sub_18DEDD538(v28, (uint64_t)"|        Err            |  Error in innovation test                                                                          |", 126);
  if ((v97 & 0x80u) == 0) {
    __CLPK_integer v30 = &__p;
  }
  else {
    __CLPK_integer v30 = __p;
  }
  if ((v97 & 0x80u) == 0) {
    uint64_t v31 = v97;
  }
  else {
    uint64_t v31 = v96;
  }
  uint64_t v32 = sub_18DEDD538(v29, (uint64_t)v30, v31);
  __CLPK_integer v33 = sub_18DEDD538(v32, (uint64_t)"------------------------------------------------------------------------------------------------------------------------------", 126);
  if ((v97 & 0x80u) == 0) {
    int8x16_t v34 = &__p;
  }
  else {
    int8x16_t v34 = __p;
  }
  if ((v97 & 0x80u) == 0) {
    uint64_t v35 = v97;
  }
  else {
    uint64_t v35 = v96;
  }
  int32x4_t v36 = sub_18DEDD538(v33, (uint64_t)v34, v35);
  int v37 = sub_18DEDD538(v36, (uint64_t)"|        I-P            |  Ignored measurement due to low [P]robability of being LOS                                         |", 126);
  if ((v97 & 0x80u) == 0) {
    int v38 = &__p;
  }
  else {
    int v38 = __p;
  }
  if ((v97 & 0x80u) == 0) {
    uint64_t v39 = v97;
  }
  else {
    uint64_t v39 = v96;
  }
  int v40 = sub_18DEDD538(v37, (uint64_t)v38, v39);
  int v41 = sub_18DEDD538(v40, (uint64_t)"|        I-D            |  Ignored measurement due to [D]ependency check                                                     |", 126);
  if ((v97 & 0x80u) == 0) {
    unsigned int v42 = &__p;
  }
  else {
    unsigned int v42 = __p;
  }
  if ((v97 & 0x80u) == 0) {
    uint64_t v43 = v97;
  }
  else {
    uint64_t v43 = v96;
  }
  uint64_t v44 = sub_18DEDD538(v41, (uint64_t)v42, v43);
  unsigned int v45 = sub_18DEDD538(v44, (uint64_t)"|        I-5            |  Ignored measurement by L1 vs L[5] post filter logic                                               |", 126);
  if ((v97 & 0x80u) == 0) {
    int v46 = &__p;
  }
  else {
    int v46 = __p;
  }
  if ((v97 & 0x80u) == 0) {
    uint64_t v47 = v97;
  }
  else {
    uint64_t v47 = v96;
  }
  int v48 = sub_18DEDD538(v45, (uint64_t)v46, v47);
  unsigned int v49 = sub_18DEDD538(v48, (uint64_t)"|        I-i            |  Ignored because the low-P(LOS) measurement had a high [i]nnovation magnitude                      |", 126);
  if ((v97 & 0x80u) == 0) {
    uint64_t v50 = &__p;
  }
  else {
    uint64_t v50 = __p;
  }
  if ((v97 & 0x80u) == 0) {
    uint64_t v51 = v97;
  }
  else {
    uint64_t v51 = v96;
  }
  __CLPK_integer v52 = sub_18DEDD538(v49, (uint64_t)v50, v51);
  __CLPK_integer v53 = sub_18DEDD538(v52, (uint64_t)"|        I-r            |  Ignored because the low-P(LOS) measurement had a normalized innovation test result of [r]eject    |", 126);
  if ((v97 & 0x80u) == 0) {
    double v54 = &__p;
  }
  else {
    double v54 = __p;
  }
  if ((v97 & 0x80u) == 0) {
    uint64_t v55 = v97;
  }
  else {
    uint64_t v55 = v96;
  }
  char v56 = sub_18DEDD538(v53, (uint64_t)v54, v55);
  char v57 = sub_18DEDD538(v56, (uint64_t)"------------------------------------------------------------------------------------------------------------------------------", 126);
  if ((v97 & 0x80u) == 0) {
    int v58 = &__p;
  }
  else {
    int v58 = __p;
  }
  if ((v97 & 0x80u) == 0) {
    uint64_t v59 = v97;
  }
  else {
    uint64_t v59 = v96;
  }
  double v60 = sub_18DEDD538(v57, (uint64_t)v58, v59);
  double v61 = sub_18DEDD538(v60, (uint64_t)"|        R-I            |  Rejected measurement because the [I]nnovation test result was a Reject                            |", 126);
  if ((v97 & 0x80u) == 0) {
    double v62 = &__p;
  }
  else {
    double v62 = __p;
  }
  if ((v97 & 0x80u) == 0) {
    uint64_t v63 = v97;
  }
  else {
    uint64_t v63 = v96;
  }
  double v64 = sub_18DEDD538(v61, (uint64_t)v62, v63);
  double v65 = sub_18DEDD538(v64, (uint64_t)"|        R-5            |  Rejected measurement by L1 vs L[5] post filter logic                                              |", 126);
  if ((v97 & 0x80u) == 0) {
    double v66 = &__p;
  }
  else {
    double v66 = __p;
  }
  if ((v97 & 0x80u) == 0) {
    uint64_t v67 = v97;
  }
  else {
    uint64_t v67 = v96;
  }
  double v68 = sub_18DEDD538(v65, (uint64_t)v66, v67);
  float64x2_t v69 = sub_18DEDD538(v68, (uint64_t)"------------------------------------------------------------------------------------------------------------------------------", 126);
  if ((v97 & 0x80u) == 0) {
    char v70 = &__p;
  }
  else {
    char v70 = __p;
  }
  if ((v97 & 0x80u) == 0) {
    uint64_t v71 = v97;
  }
  else {
    uint64_t v71 = v96;
  }
  uint64_t v72 = sub_18DEDD538(v69, (uint64_t)v70, v71);
  uint64_t v73 = sub_18DEDD538(v72, (uint64_t)"|        W-I            |  Reweighted measurement because the [I]nnovation test result was a Reweight                        |", 126);
  if ((v97 & 0x80u) == 0) {
    uint64_t v74 = &__p;
  }
  else {
    uint64_t v74 = __p;
  }
  if ((v97 & 0x80u) == 0) {
    uint64_t v75 = v97;
  }
  else {
    uint64_t v75 = v96;
  }
  uint64_t v76 = sub_18DEDD538(v73, (uint64_t)v74, v75);
  char v77 = sub_18DEDD538(v76, (uint64_t)"|        W-u            |  Reweighted low-P(LOS) measurement because the innovation test result was [u]se as is              |", 126);
  if ((v97 & 0x80u) == 0) {
    uint64_t v78 = &__p;
  }
  else {
    uint64_t v78 = __p;
  }
  if ((v97 & 0x80u) == 0) {
    uint64_t v79 = v97;
  }
  else {
    uint64_t v79 = v96;
  }
  uint64_t v80 = sub_18DEDD538(v77, (uint64_t)v78, v79);
  uint64_t v81 = sub_18DEDD538(v80, (uint64_t)"------------------------------------------------------------------------------------------------------------------------------", 126);
  if ((v97 & 0x80u) == 0) {
    uint64_t v82 = &__p;
  }
  else {
    uint64_t v82 = __p;
  }
  if ((v97 & 0x80u) == 0) {
    uint64_t v83 = v97;
  }
  else {
    uint64_t v83 = v96;
  }
  double v84 = sub_18DEDD538(v81, (uint64_t)v82, v83);
  double v85 = sub_18DEDD538(v84, (uint64_t)"|         *             |  Use the measurement as is with the given measurement uncertainty                                  |", 126);
  if ((v97 & 0x80u) == 0) {
    double v86 = &__p;
  }
  else {
    double v86 = __p;
  }
  if ((v97 & 0x80u) == 0) {
    uint64_t v87 = v97;
  }
  else {
    uint64_t v87 = v96;
  }
  double v88 = sub_18DEDD538(v85, (uint64_t)v86, v87);
  char v89 = sub_18DEDD538(v88, (uint64_t)"----------------------------------------------------------------------------------------------------------------------------- ", 126);
  if ((v97 & 0x80u) == 0) {
    uint64_t v90 = &__p;
  }
  else {
    uint64_t v90 = __p;
  }
  if ((v97 & 0x80u) == 0) {
    uint64_t v91 = v97;
  }
  else {
    uint64_t v91 = v96;
  }
  uint64_t v92 = sub_18DEDD538(v89, (uint64_t)v90, v91);
  if ((v97 & 0x80u) == 0) {
    uint64_t v93 = &__p;
  }
  else {
    uint64_t v93 = __p;
  }
  if ((v97 & 0x80u) == 0) {
    uint64_t v94 = v97;
  }
  else {
    uint64_t v94 = v96;
  }
  sub_18DEDD538(v92, (uint64_t)v93, v94);
  if ((char)v97 < 0) {
    operator delete(__p);
  }
}

void sub_18E076718(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_18E076734(uint64_t a1@<X0>, BOOL *a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 24) = 0x800000008;
  *(void *)a3 = &unk_1EDD19DE8;
  *(_OWORD *)(a3 + 8) = xmmword_18E1FD750;
  *(void *)(a3 + 32) = a3 + 40;
  sub_18DFEEFE8(a1, a3, a2);
}

void sub_18E076798(_Unwind_Exception *a1)
{
  *unsigned int v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

__n128 sub_18E0767B8(uint64_t a1, uint64_t a2)
{
  result.n128_u64[0] = 0x100000013;
  *(void *)(a1 + 24) = 0x100000013;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1EDD17CB8;
  if (a1 == a2)
  {
    unsigned int v17 = "this != &(A)";
    int v18 = 603;
    goto LABEL_16;
  }
  int v3 = *(_DWORD *)(a2 + 8);
  int v4 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = v4;
  uint64_t v5 = (v4 * v3);
  *(_DWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 20) = v3;
  int v6 = (unint64_t *)(a1 + 40);
  *(void *)(a1 + 32) = a1 + 40;
  if (*(_DWORD *)(a2 + 8) > 0x13u)
  {
    unsigned int v17 = "this->max_num_rows_ >= A.num_rows_";
    int v18 = 616;
    goto LABEL_16;
  }
  if (*(_DWORD *)(a2 + 12) >= 2u)
  {
    unsigned int v17 = "this->max_num_cols_ >= A.num_cols_";
    int v18 = 617;
LABEL_16:
    __assert_rtn("CNMatrix", "cnmatrix.h", v18, v17);
  }
  int v7 = *(_DWORD *)(a2 + 16);
  if (v7 > 3)
  {
    uint64_t v10 = (v7 - 2);
    uint64_t v11 = *(long long **)(a2 + 32);
    uint64_t v12 = (v7 - 1) >> 1;
    __CLPK_integer v13 = v11;
    unsigned int v14 = (_OWORD *)(a1 + 40);
    do
    {
      long long v15 = *v13++;
      *v14++ = v15;
      --v12;
    }
    while (v12);
    uint64_t v16 = v10;
    __n128 result = *(__n128 *)((char *)v11 + v16 * 8);
    *(__n128 *)&v6[v16] = result;
  }
  else if ((int)v5 >= 1)
  {
    int v8 = *(unint64_t **)(a2 + 32);
    do
    {
      unint64_t v9 = *v8++;
      result.n128_u64[0] = v9;
      *v6++ = v9;
      --v5;
    }
    while (v5);
  }
  return result;
}

void sub_18E0768E8(_Unwind_Exception *a1)
{
  *unsigned int v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

uint64_t sub_18E076908(uint64_t a1, long long *a2, long long *a3)
{
  int v6 = sub_18E06BF24((void *)a1, 18);
  if (*((char *)a2 + 23) < 0)
  {
    sub_18DEDE668((unsigned char *)v6 + 56, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v7 = *a2;
    v6[9] = *((void *)a2 + 2);
    *(_OWORD *)(v6 + 7) = v7;
  }
  *(void *)(a1 + 80) = *((void *)a2 + 3);
  *(_OWORD *)(a1 + 88) = a2[2];
  long long v8 = a2[3];
  long long v9 = a2[4];
  long long v10 = a2[5];
  *(_OWORD *)(a1 + 152) = a2[6];
  *(_OWORD *)(a1 + 136) = v10;
  *(_OWORD *)(a1 + 120) = v9;
  *(_OWORD *)(a1 + 104) = v8;
  long long v11 = a2[7];
  long long v12 = a2[8];
  long long v13 = a2[9];
  *(_OWORD *)(a1 + 216) = a2[10];
  *(_OWORD *)(a1 + 200) = v13;
  *(_OWORD *)(a1 + 184) = v12;
  *(_OWORD *)(a1 + 168) = v11;
  long long v14 = a2[11];
  long long v15 = a2[12];
  long long v16 = a2[14];
  *(_OWORD *)(a1 + 264) = a2[13];
  *(_OWORD *)(a1 + 280) = v16;
  *(_OWORD *)(a1 + 248) = v15;
  *(_OWORD *)(a1 + 232) = v14;
  *(void *)(a1 + 296) = &unk_1EDD0AE58;
  unsigned int v17 = (unsigned char *)(a1 + 304);
  if (*((char *)a2 + 271) < 0)
  {
    sub_18DEDE668(v17, *((void **)a2 + 31), *((void *)a2 + 32));
  }
  else
  {
    long long v18 = *(long long *)((char *)a2 + 248);
    *(void *)(a1 + 320) = *((void *)a2 + 33);
    *(_OWORD *)unsigned int v17 = v18;
  }
  *(void *)(a1 + 328) = *((void *)a2 + 34);
  long long v19 = *(long long *)((char *)a2 + 280);
  long long v20 = *(long long *)((char *)a2 + 312);
  *(_OWORD *)(a1 + 352) = *(long long *)((char *)a2 + 296);
  *(_OWORD *)(a1 + 368) = v20;
  *(_OWORD *)(a1 + 336) = v19;
  long long v21 = *(long long *)((char *)a2 + 328);
  long long v22 = *(long long *)((char *)a2 + 344);
  long long v23 = *(long long *)((char *)a2 + 376);
  *(_OWORD *)(a1 + 416) = *(long long *)((char *)a2 + 360);
  *(_OWORD *)(a1 + 432) = v23;
  *(_OWORD *)(a1 + 384) = v21;
  *(_OWORD *)(a1 + 400) = v22;
  long long v24 = *(long long *)((char *)a2 + 392);
  long long v25 = *(long long *)((char *)a2 + 408);
  long long v26 = *(long long *)((char *)a2 + 440);
  *(_OWORD *)(a1 + 480) = *(long long *)((char *)a2 + 424);
  *(_OWORD *)(a1 + 496) = v26;
  *(_OWORD *)(a1 + 448) = v24;
  *(_OWORD *)(a1 + 464) = v25;
  long long v27 = *a3;
  long long v28 = a3[1];
  *(void *)(a1 + 544) = *((void *)a3 + 4);
  *(_OWORD *)(a1 + 512) = v27;
  *(_OWORD *)(a1 + 528) = v28;
  *(void *)a1 = &unk_1EDD14600;
  *(_OWORD *)(a1 + 552) = 0u;
  return a1;
}

void sub_18E076AA4(_Unwind_Exception *exception_object)
{
  *(void *)(v1 + 296) = &unk_1EDD0A9B8;
  if (*(char *)(v1 + 79) < 0) {
    operator delete(*v2);
  }
  *(void *)uint64_t v1 = &unk_1EDD0A4E8;
  if (*(char *)(v1 + 39) < 0) {
    operator delete(*(void **)(v1 + 16));
  }
  _Unwind_Resume(exception_object);
}

unsigned char *sub_18E076B10(void *a1, uint64_t a2)
{
  int v4 = operator new(0x238uLL);
  uint64_t v5 = v4;
  *(void *)int v4 = &unk_1EDD0A4E8;
  v4[2] = *(_DWORD *)(a2 + 8);
  if (*(char *)(a2 + 39) < 0)
  {
    sub_18DEDE668((unsigned char *)v4 + 16, *(void **)(a2 + 16), *(void *)(a2 + 24));
  }
  else
  {
    *((_OWORD *)v4 + 1) = *(_OWORD *)(a2 + 16);
    *((void *)v4 + 4) = *(void *)(a2 + 32);
  }
  *(void *)uint64_t v5 = &unk_1EDD146E8;
  *(_OWORD *)(v5 + 10) = *(_OWORD *)(a2 + 40);
  if (*(char *)(a2 + 79) < 0)
  {
    sub_18DEDE668((unsigned char *)v5 + 56, *(void **)(a2 + 56), *(void *)(a2 + 64));
  }
  else
  {
    *(_OWORD *)(v5 + 14) = *(_OWORD *)(a2 + 56);
    *((void *)v5 + 9) = *(void *)(a2 + 72);
  }
  *((void *)v5 + 10) = *(void *)(a2 + 80);
  *(_OWORD *)(v5 + 58) = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(v5 + 62) = *(_OWORD *)(a2 + 248);
  *(_OWORD *)(v5 + 42) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(v5 + 46) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(v5 + 50) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(v5 + 54) = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(v5 + 26) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(v5 + 30) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(v5 + 34) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(v5 + 38) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(v5 + 22) = *(_OWORD *)(a2 + 88);
  long long v6 = *(_OWORD *)(a2 + 280);
  *(_OWORD *)(v5 + 66) = *(_OWORD *)(a2 + 264);
  *(_OWORD *)(v5 + 70) = v6;
  *((void *)v5 + 37) = &unk_1EDD0AE58;
  __n128 result = v5 + 76;
  if (*(char *)(a2 + 327) < 0)
  {
    __n128 result = sub_18DEDE668(result, *(void **)(a2 + 304), *(void *)(a2 + 312));
  }
  else
  {
    *(_OWORD *)__n128 result = *(_OWORD *)(a2 + 304);
    *((void *)v5 + 40) = *(void *)(a2 + 320);
  }
  *((void *)v5 + 41) = *(void *)(a2 + 328);
  long long v8 = *(_OWORD *)(a2 + 480);
  *((_OWORD *)v5 + 29) = *(_OWORD *)(a2 + 464);
  *((_OWORD *)v5 + 30) = v8;
  long long v9 = *(_OWORD *)(a2 + 416);
  *((_OWORD *)v5 + 25) = *(_OWORD *)(a2 + 400);
  *((_OWORD *)v5 + 26) = v9;
  long long v10 = *(_OWORD *)(a2 + 448);
  *((_OWORD *)v5 + 27) = *(_OWORD *)(a2 + 432);
  *((_OWORD *)v5 + 28) = v10;
  long long v11 = *(_OWORD *)(a2 + 352);
  *((_OWORD *)v5 + 21) = *(_OWORD *)(a2 + 336);
  *((_OWORD *)v5 + 22) = v11;
  long long v12 = *(_OWORD *)(a2 + 384);
  *((_OWORD *)v5 + 23) = *(_OWORD *)(a2 + 368);
  *((_OWORD *)v5 + 24) = v12;
  long long v13 = *(_OWORD *)(a2 + 512);
  *((_OWORD *)v5 + 31) = *(_OWORD *)(a2 + 496);
  *((_OWORD *)v5 + 32) = v13;
  *((_OWORD *)v5 + 33) = *(_OWORD *)(a2 + 528);
  *((void *)v5 + 68) = *(void *)(a2 + 544);
  *(void *)uint64_t v5 = &unk_1EDD14600;
  *((void *)v5 + 69) = *(void *)(a2 + 552);
  uint64_t v14 = *(void *)(a2 + 560);
  *((void *)v5 + 70) = v14;
  if (v14) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
  }
  *a1 = sub_18E076DB8;
  a1[1] = v5;
  return result;
}

void sub_18E076D54(_Unwind_Exception *a1)
{
  v1[37] = &unk_1EDD0A9B8;
  if (*((char *)v1 + 79) < 0) {
    operator delete(*v4);
  }
  *uint64_t v1 = v2;
  if (*((char *)v1 + 39) < 0) {
    operator delete(*v3);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_18E076DB8(unsigned int a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v5 = a1;
  __n128 result = &unk_1EDD05538;
  switch(v5)
  {
    case 1:
      sub_18E076B10(a3, a2[1]);
      __n128 result = 0;
      break;
    case 2:
      __n128 result = 0;
      uint64_t v9 = a2[1];
      *a3 = sub_18E076DB8;
      a3[1] = v9;
      goto LABEL_5;
    case 3:
      if (a4) {
        BOOL v10 = sub_18DEE4C68(a4, (uint64_t)&unk_1EDD05538);
      }
      else {
        BOOL v10 = a5 == &std::__any_imp::__unique_typeinfo<raven::h_GnssPsrArgs_RavenPNT<double>>::__id;
      }
      if (v10) {
        __n128 result = (void *)a2[1];
      }
      else {
        __n128 result = 0;
      }
      break;
    case 4:
      return result;
    default:
      long long v8 = (void (***)(void))a2[1];
      (**v8)(v8);
      operator delete(v8);
      __n128 result = 0;
LABEL_5:
      *a2 = 0;
      break;
  }
  return result;
}

uint64_t sub_18E076EBC(uint64_t a1, long long *a2, long long *a3)
{
  long long v6 = sub_18E06BF24((void *)a1, 17);
  if (*((char *)a2 + 23) < 0)
  {
    sub_18DEDE668((unsigned char *)v6 + 56, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v7 = *a2;
    v6[9] = *((void *)a2 + 2);
    *(_OWORD *)(v6 + 7) = v7;
  }
  *(void *)(a1 + 80) = *((void *)a2 + 3);
  *(_OWORD *)(a1 + 88) = a2[2];
  long long v8 = a2[3];
  long long v9 = a2[4];
  long long v10 = a2[5];
  *(_OWORD *)(a1 + 152) = a2[6];
  *(_OWORD *)(a1 + 136) = v10;
  *(_OWORD *)(a1 + 120) = v9;
  *(_OWORD *)(a1 + 104) = v8;
  long long v11 = a2[7];
  long long v12 = a2[8];
  long long v13 = a2[9];
  *(_OWORD *)(a1 + 216) = a2[10];
  *(_OWORD *)(a1 + 200) = v13;
  *(_OWORD *)(a1 + 184) = v12;
  *(_OWORD *)(a1 + 168) = v11;
  long long v14 = a2[11];
  long long v15 = a2[12];
  long long v16 = a2[14];
  *(_OWORD *)(a1 + 264) = a2[13];
  *(_OWORD *)(a1 + 280) = v16;
  *(_OWORD *)(a1 + 248) = v15;
  *(_OWORD *)(a1 + 232) = v14;
  *(void *)(a1 + 296) = &unk_1EDD0AE58;
  unsigned int v17 = (unsigned char *)(a1 + 304);
  if (*((char *)a2 + 271) < 0)
  {
    sub_18DEDE668(v17, *((void **)a2 + 31), *((void *)a2 + 32));
  }
  else
  {
    long long v18 = *(long long *)((char *)a2 + 248);
    *(void *)(a1 + 320) = *((void *)a2 + 33);
    *(_OWORD *)unsigned int v17 = v18;
  }
  *(void *)(a1 + 328) = *((void *)a2 + 34);
  long long v19 = *(long long *)((char *)a2 + 280);
  long long v20 = *(long long *)((char *)a2 + 312);
  *(_OWORD *)(a1 + 352) = *(long long *)((char *)a2 + 296);
  *(_OWORD *)(a1 + 368) = v20;
  *(_OWORD *)(a1 + 336) = v19;
  long long v21 = *(long long *)((char *)a2 + 328);
  long long v22 = *(long long *)((char *)a2 + 344);
  long long v23 = *(long long *)((char *)a2 + 376);
  *(_OWORD *)(a1 + 416) = *(long long *)((char *)a2 + 360);
  *(_OWORD *)(a1 + 432) = v23;
  *(_OWORD *)(a1 + 384) = v21;
  *(_OWORD *)(a1 + 400) = v22;
  long long v24 = *(long long *)((char *)a2 + 392);
  long long v25 = *(long long *)((char *)a2 + 408);
  long long v26 = *(long long *)((char *)a2 + 440);
  *(_OWORD *)(a1 + 480) = *(long long *)((char *)a2 + 424);
  *(_OWORD *)(a1 + 496) = v26;
  *(_OWORD *)(a1 + 448) = v24;
  *(_OWORD *)(a1 + 464) = v25;
  long long v27 = *a3;
  long long v28 = a3[1];
  *(void *)(a1 + 544) = *((void *)a3 + 4);
  *(_OWORD *)(a1 + 512) = v27;
  *(_OWORD *)(a1 + 528) = v28;
  *(void *)a1 = &unk_1EDD14B78;
  return a1;
}

void sub_18E07704C(_Unwind_Exception *exception_object)
{
  *(void *)(v1 + 296) = &unk_1EDD0A9B8;
  if (*(char *)(v1 + 79) < 0) {
    operator delete(*v2);
  }
  *(void *)uint64_t v1 = &unk_1EDD0A4E8;
  if (*(char *)(v1 + 39) < 0) {
    operator delete(*(void **)(v1 + 16));
  }
  _Unwind_Resume(exception_object);
}

void sub_18E0770B8(uint64_t a1)
{
  *(void *)(a1 + 296) = &unk_1EDD0AE58;
  if (*(char *)(a1 + 327) < 0) {
    operator delete(*(void **)(a1 + 304));
  }
  *(void *)(a1 + 296) = &unk_1EDD0A9B8;
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  *(void *)a1 = &unk_1EDD0A4E8;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }

  JUMPOUT(0x192FA6240);
}

__n128 sub_18E077184(void *a1, uint64_t a2)
{
  int v4 = operator new(0x228uLL);
  uint64_t v5 = v4;
  *(void *)int v4 = &unk_1EDD0A4E8;
  v4[2] = *(_DWORD *)(a2 + 8);
  if (*(char *)(a2 + 39) < 0)
  {
    sub_18DEDE668((unsigned char *)v4 + 16, *(void **)(a2 + 16), *(void *)(a2 + 24));
  }
  else
  {
    *((_OWORD *)v4 + 1) = *(_OWORD *)(a2 + 16);
    *((void *)v4 + 4) = *(void *)(a2 + 32);
  }
  *(void *)uint64_t v5 = &unk_1EDD146E8;
  *(_OWORD *)(v5 + 10) = *(_OWORD *)(a2 + 40);
  if (*(char *)(a2 + 79) < 0)
  {
    sub_18DEDE668((unsigned char *)v5 + 56, *(void **)(a2 + 56), *(void *)(a2 + 64));
  }
  else
  {
    *(_OWORD *)(v5 + 14) = *(_OWORD *)(a2 + 56);
    *((void *)v5 + 9) = *(void *)(a2 + 72);
  }
  *((void *)v5 + 10) = *(void *)(a2 + 80);
  *(_OWORD *)(v5 + 58) = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(v5 + 62) = *(_OWORD *)(a2 + 248);
  *(_OWORD *)(v5 + 42) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(v5 + 46) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(v5 + 50) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(v5 + 54) = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(v5 + 26) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(v5 + 30) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(v5 + 34) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(v5 + 38) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(v5 + 22) = *(_OWORD *)(a2 + 88);
  long long v6 = *(_OWORD *)(a2 + 280);
  *(_OWORD *)(v5 + 66) = *(_OWORD *)(a2 + 264);
  *(_OWORD *)(v5 + 70) = v6;
  *((void *)v5 + 37) = &unk_1EDD0AE58;
  long long v7 = v5 + 76;
  if (*(char *)(a2 + 327) < 0)
  {
    sub_18DEDE668(v7, *(void **)(a2 + 304), *(void *)(a2 + 312));
  }
  else
  {
    *(_OWORD *)long long v7 = *(_OWORD *)(a2 + 304);
    *((void *)v5 + 40) = *(void *)(a2 + 320);
  }
  *((void *)v5 + 41) = *(void *)(a2 + 328);
  long long v8 = *(_OWORD *)(a2 + 480);
  *((_OWORD *)v5 + 29) = *(_OWORD *)(a2 + 464);
  *((_OWORD *)v5 + 30) = v8;
  long long v9 = *(_OWORD *)(a2 + 416);
  *((_OWORD *)v5 + 25) = *(_OWORD *)(a2 + 400);
  *((_OWORD *)v5 + 26) = v9;
  long long v10 = *(_OWORD *)(a2 + 448);
  *((_OWORD *)v5 + 27) = *(_OWORD *)(a2 + 432);
  *((_OWORD *)v5 + 28) = v10;
  long long v11 = *(_OWORD *)(a2 + 352);
  *((_OWORD *)v5 + 21) = *(_OWORD *)(a2 + 336);
  *((_OWORD *)v5 + 22) = v11;
  long long v12 = *(_OWORD *)(a2 + 384);
  *((_OWORD *)v5 + 23) = *(_OWORD *)(a2 + 368);
  *((_OWORD *)v5 + 24) = v12;
  long long v13 = *(_OWORD *)(a2 + 512);
  *((_OWORD *)v5 + 31) = *(_OWORD *)(a2 + 496);
  *((_OWORD *)v5 + 32) = v13;
  __n128 result = *(__n128 *)(a2 + 528);
  *((__n128 *)v5 + 33) = result;
  *((void *)v5 + 68) = *(void *)(a2 + 544);
  *(void *)uint64_t v5 = &unk_1EDD14B78;
  *a1 = sub_18E07740C;
  a1[1] = v5;
  return result;
}

void sub_18E0773A8(_Unwind_Exception *a1)
{
  v1[37] = &unk_1EDD0A9B8;
  if (*((char *)v1 + 79) < 0) {
    operator delete(*v4);
  }
  *uint64_t v1 = v2;
  if (*((char *)v1 + 39) < 0) {
    operator delete(*v3);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_18E07740C(unsigned int a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v5 = a1;
  __n128 result = &unk_1EDD05810;
  switch(v5)
  {
    case 1:
      sub_18E077184(a3, a2[1]);
      __n128 result = 0;
      break;
    case 2:
      __n128 result = 0;
      uint64_t v9 = a2[1];
      *a3 = sub_18E07740C;
      a3[1] = v9;
      goto LABEL_5;
    case 3:
      if (a4) {
        BOOL v10 = sub_18DEE4C68(a4, (uint64_t)&unk_1EDD05810);
      }
      else {
        BOOL v10 = a5 == &std::__any_imp::__unique_typeinfo<raven::h_GnssDopplerArgs_RavenPNT<double>>::__id;
      }
      if (v10) {
        __n128 result = (void *)a2[1];
      }
      else {
        __n128 result = 0;
      }
      break;
    case 4:
      return result;
    default:
      long long v8 = (void (***)(void))a2[1];
      (**v8)(v8);
      operator delete(v8);
      __n128 result = 0;
LABEL_5:
      *a2 = 0;
      break;
  }
  return result;
}

void sub_18E077510(uint64_t a1)
{
  *(void *)(a1 + 296) = &unk_1EDD0AE58;
  if (*(char *)(a1 + 327) < 0) {
    operator delete(*(void **)(a1 + 304));
  }
  *(void *)(a1 + 296) = &unk_1EDD0A9B8;
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  *(void *)a1 = &unk_1EDD0A4E8;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }

  JUMPOUT(0x192FA6240);
}

void *sub_18E0775DC(void ***a1, void *a2, int a3, int8x16_t a4, int8x16_t a5)
{
  long long v6 = *a1;
  if (!a3) {
    goto LABEL_33;
  }
  long long v8 = v6 + 1;
  long long v7 = *v6;
  if (*v6 != v6 + 1)
  {
LABEL_3:
    uint64_t v9 = v7;
    uint64_t v10 = (uint64_t)(v7 + 4);
    while (1)
    {
      long long v11 = (void *)v7[1];
      long long v12 = v7;
      if (v11)
      {
        do
        {
          long long v7 = v11;
          long long v11 = (void *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          long long v7 = (void *)v12[2];
          BOOL v13 = *v7 == (void)v12;
          long long v12 = v7;
        }
        while (!v13);
      }
      if (v7 == v8)
      {
        long long v7 = v9;
        break;
      }
      uint64_t v14 = CNTimeSpan::operator-((uint64_t)(v7 + 4), a2, a4, a5);
      uint64_t v29 = v14;
      double v30 = v15;
      if (v14 < 0 || (double v18 = v15, v15 < 0.0))
      {
        uint64_t v19 = CNTimeSpan::operator-((double *)&v29, v16, v17);
        double v18 = v20;
      }
      else
      {
        uint64_t v19 = v14;
      }
      uint64_t v21 = CNTimeSpan::operator-(v10, a2, v16, v17);
      uint64_t v73 = v21;
      double v74 = v22;
      if (v21 < 0 || (*(double *)a4.i64 = v22, v22 < 0.0))
      {
        uint64_t v21 = CNTimeSpan::operator-((double *)&v73, a4, a5);
        a4.i64[0] = v23;
        if (v19) {
          goto LABEL_20;
        }
      }
      else if (v19)
      {
        goto LABEL_20;
      }
      if ((*(void *)&v18 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
      {
LABEL_23:
        if (v18 < *(double *)a4.i64) {
          goto LABEL_3;
        }
      }
      else
      {
LABEL_20:
        if (!v21 && (a4.i64[0] & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000 || v19 == v21) {
          goto LABEL_23;
        }
        if (v19 < v21) {
          goto LABEL_3;
        }
      }
    }
  }
  if (v8 == v7) {
    goto LABEL_33;
  }
  uint64_t v24 = CNTimeSpan::operator-((uint64_t)(v7 + 4), a2, a4, a5);
  uint64_t v73 = v24;
  double v74 = v25;
  if (v24 < 0 || (*(double *)v26.i64 = v25, v25 < 0.0)) {
    uint64_t v24 = CNTimeSpan::operator-((double *)&v73, v26, v27);
  }
  uint64_t v29 = v24;
  double v30 = v25;
  if (!sub_18DEE4CB8((double *)&v29, (double *)&qword_1EB403B88))
  {
LABEL_33:
    bzero(&v29, 0x398uLL);
    uint64_t v33 = 0x10000001CLL;
    uint64_t v31 = &unk_1EDD188B8;
    long long v32 = xmmword_18E1FD5F0;
    int8x16_t v34 = v35;
    v35[28] = 0x7FF8000000000000;
    int64x2_t v36 = vdupq_n_s64(0x7FF8000000000000uLL);
    int64x2_t v37 = v36;
    int64x2_t v38 = v36;
    int64x2_t v39 = v36;
    int64x2_t v40 = v36;
    int64x2_t v41 = v36;
    int64x2_t v42 = v36;
    int64x2_t v43 = v36;
    int64x2_t v44 = v36;
    int64x2_t v45 = v36;
    int64x2_t v46 = v36;
    int64x2_t v47 = v36;
    int64x2_t v48 = v36;
    int64x2_t v49 = v36;
    int64x2_t v50 = v36;
    int64x2_t v51 = v36;
    int64x2_t v52 = v36;
    int64x2_t v53 = v36;
    int64x2_t v54 = v36;
    int64x2_t v55 = v36;
    int64x2_t v56 = v36;
    int64x2_t v57 = v36;
    int64x2_t v58 = v36;
    int64x2_t v59 = v36;
    int64x2_t v60 = v36;
    int64x2_t v61 = v36;
    int64x2_t v62 = v36;
    int64x2_t v63 = v36;
    int64x2_t v64 = v36;
    int64x2_t v65 = v36;
    int64x2_t v66 = v36;
    int64x2_t v67 = v36;
    int64x2_t v68 = v36;
    int64x2_t v69 = v36;
    int64x2_t v70 = v36;
    long long v71 = 0u;
    sub_18E06E85C((uint64_t)&v72);
  }
  return v7;
}

void sub_18E07795C(_Unwind_Exception *a1)
{
  *uint64_t v1 = &unk_1EDD17478;
  sub_18E078688(v3 - 120);
  sub_18E06B5D4(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_18E0779A4(uint64_t *a1, _OWORD *a2, double *a3, float64x2_t *a4, uint64_t a5, double a6, int8x16_t a7)
{
  long long v8 = a4;
  uint64_t v9 = a3;
  uint64_t v10 = (uint64_t)a2;
  long long v11 = a1;
  if (*(unsigned char *)(a5 + 912)) {
    goto LABEL_2;
  }
  uint64_t v30 = a1[1];
  long long v56 = *(_OWORD *)*(void *)(v30 + 520);
  sub_18E07FB20((uint64_t)v55, *(void *)(v30 + 528));
  uint64_t v32 = *v11;
  uint64_t v31 = v11[1];
  int64x2_t v54 = v11;
  uint64_t v33 = *(void *)(v31 + 512);
  int v34 = **(unsigned __int8 **)(v31 + 536);
  uint64_t v35 = (void *)(v31 + 88);
  uint64_t v36 = *(void *)(v31 + 544);
  *((void *)&__src[1] + 1) = 0x10000001CLL;
  *(void *)&__src[0] = &unk_1EDD188B8;
  *(void *)&__src[2] = (char *)&__src[2] + 8;
  *(_OWORD *)((char *)__src + 8) = xmmword_18E1FD5F0;
  sub_18DFE2CC8((uint64_t)__src, 0.0);
  sub_18DFE2F24(a5 + 16, (uint64_t)__src);
  uint64_t v75 = 0x10000001CLL;
  uint64_t v73 = &unk_1EDD188B8;
  uint64_t v76 = &v77;
  long long v74 = xmmword_18E1FD5F0;
  sub_18DFE2CC8((uint64_t)&v73, 0.0);
  int64x2_t v37 = v35;
  if (sub_18E0786E0((uint64_t)v35, &v56, (uint64_t)v55, v33, v36, v34, 1, 0, (uint64_t)&v73)) {
    goto LABEL_6;
  }
  uint64_t v70 = 0x10000001CLL;
  int64x2_t v68 = &unk_1EDD188B8;
  long long v71 = &v72;
  long long v69 = xmmword_18E1FD5F0;
  sub_18DFE2CC8((uint64_t)&v68, 0.0);
  __src[0] = vdupq_n_s64(0x7FF8000000000000uLL);
  __src[1] = __src[0];
  __src[2] = __src[0];
  __src[3] = __src[0];
  __src[4] = __src[0];
  __src[5] = __src[0];
  __src[6] = __src[0];
  __src[7] = __src[0];
  __src[8] = __src[0];
  __src[9] = __src[0];
  __src[10] = __src[0];
  __src[11] = __src[0];
  __src[12] = __src[0];
  __src[13] = __src[0];
  __src[14] = __src[0];
  __src[15] = __src[0];
  __src[16] = __src[0];
  __src[17] = __src[0];
  __src[18] = __src[0];
  __src[19] = __src[0];
  __src[20] = __src[0];
  __src[21] = __src[0];
  __src[22] = __src[0];
  __src[23] = __src[0];
  __src[24] = __src[0];
  __src[25] = __src[0];
  __src[26] = __src[0];
  __src[27] = __src[0];
  __src[28] = __src[0];
  __src[29] = __src[0];
  __src[30] = __src[0];
  __src[31] = __src[0];
  __src[32] = __src[0];
  __src[33] = __src[0];
  __src[34] = __src[0];
  *(void *)&__src[35] = 0x7FF8000000000000;
  BOOL v66 = 0;
  if (sub_18E06EC84((uint64_t)&v73, v32, 0, 1, 0, (uint64_t)&v68, (uint64_t)__src, &v66, 0.000000015))
  {
LABEL_6:
    uint64_t v45 = v54[1];
    LOWORD(__src[0]) = 12;
    LOBYTE(v57) = 4;
    double v50 = *(double *)(v45 + 48) + (double)*(uint64_t *)(v45 + 40);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)__src, (unsigned __int8 *)&v57, "time,%.3lf,h-function failure on line %d: %s() %s", v38, v39, v40, v41, v42, SLOBYTE(v50));
    return 0xFFFFFFFFLL;
  }
  uint64_t v46 = v32;
  uint64_t v10 = (uint64_t)a2;
  uint64_t v47 = CNTimeSpan::operator-((uint64_t)a2, v35, v43, v44);
  if (fabs(v48 + (double)v47) > 0.000000015)
  {
    uint64_t v63 = 0x10000001CLL;
    int64x2_t v61 = &unk_1EDD188B8;
    int64x2_t v64 = &v65;
    long long v62 = xmmword_18E1FD5F0;
    sub_18DFE2CC8((uint64_t)&v61, 0.0);
    if (!sub_18E0786E0((uint64_t)a2, &v56, (uint64_t)v55, v33, v36, v34, 1, 0, (uint64_t)&v61))
    {
      sub_18E07F6DC((uint64_t)&v60, v46);
      sub_18E06E4BC((uint64_t)&v57, 26, 26);
    }
    goto LABEL_6;
  }
  sub_18DFE2F24(a5 + 16, (uint64_t)&v68);
  memcpy((void *)(a5 + 280), __src, 0x238uLL);
  long long v8 = a4;
  uint64_t v9 = a3;
  long long v11 = v54;
  *(_OWORD *)a5 = *a2;
  *(_OWORD *)(a5 + 848) = *v37;
  *(unsigned char *)(a5 + 912) = 1;
LABEL_2:
  long long v12 = *(long long **)(a5 + 48);
  long long v57 = *v12;
  v13.i64[1] = *((void *)&v57 + 1);
  uint64_t v58 = *((void *)v12 + 2);
  v13.i64[0] = *((void *)v12 + 19);
  a7.i64[0] = 0x3EB0C6F7A0B5ED8DLL;
  *(double *)&unint64_t v14 = *(double *)v13.i64 * 0.000001;
  uint64_t v15 = v11[1];
  *(double *)v16.i64 = (double)CNTimeSpan::operator-(v10, (void *)(v15 + 88), v13, a7);
  *(double *)v18.i64 = v17 + *(double *)v16.i64;
  *(void *)&long long v69 = 0;
  int64x2_t v68 = 0;
  CNTimeSpan::SetTimeSpan((uint64_t *)&v68, 0, v18, v16);
  uint64_t v73 = (void *)CNTimeSpan::operator+(v15 + 136, &v68, v19, v20);
  *(void *)&long long v74 = v21;
  v22.i64[0] = *(void *)(v15 + 192);
  int64x2_t v61 = &unk_1EDD0ADE8;
  int64x2_t v59 = &unk_1EDD0AE20;
  LOWORD(__src[0]) = 0;
  *(_OWORD *)((char *)__src + 8) = 0u;
  *(_OWORD *)((char *)&__src[1] + 8) = 0u;
  DWORD2(__src[2]) = 0;
  memset(&__src[3], 0, 20);
  uint64_t result = cnnavigation::GNSSCarrierPhase((uint64_t)&v73, (uint64_t)__src, (uint64_t)&v57, v15 + 296, (uint64_t *)&v61, (uint64_t *)&v59, v9, 1, v22, (int8x16_t)v14, 0.0, v8);
  if (!result) {
    return result;
  }
  uint64_t v29 = v11[1];
  LOWORD(__src[0]) = 12;
  LOBYTE(v73) = 4;
  double v49 = *(double *)(v29 + 48) + (double)*(uint64_t *)(v29 + 40);
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)__src, (unsigned __int8 *)&v73, "time,%.3lf,h-function failure on line %d: %s() %s", v24, v25, v26, v27, v28, SLOBYTE(v49));
  return 0xFFFFFFFFLL;
}

void sub_18E0784EC(_Unwind_Exception *a1)
{
}

double sub_18E0785AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 24) = 0x1A00000001;
  *(void *)a1 = &unk_1EDD18138;
  *(_OWORD *)(a1 + 8) = xmmword_18E1FD7C0;
  *(void *)(a1 + 32) = a1 + 40;
  *(void *)&double result = *(_OWORD *)&sub_18DFE2AA8(a2, a3, a1);
  return result;
}

void sub_18E0785FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 24) = 0x1A00000001;
  *(void *)a1 = &unk_1EDD18138;
  *(_OWORD *)(a1 + 8) = xmmword_18E1FD7C0;
  *(void *)(a1 + 32) = a1 + 40;
  sub_18DFE2B44(a2, a3, a1);
}

void sub_18E078668(_Unwind_Exception *a1)
{
  *uint64_t v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

void sub_18E078688(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_18E06B5D4(v1 + 114);
    }
    operator delete(v1);
  }
}

uint64_t sub_18E0786E0(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, char a7, int a8, uint64_t a9)
{
  uint64_t v22 = 0x10000001CLL;
  int8x16_t v20 = &unk_1EDD188B8;
  unint64_t v23 = v24;
  long long v21 = xmmword_18E1FD5F0;
  sub_18DFE2CC8((uint64_t)&v20, 0.0);
  sub_18DFE2F24(a9, (uint64_t)&v20);
  for (uint64_t i = 10; i != 29; ++i)
    *((_DWORD *)&v20 + i) = i - 10;
  uint64_t v33 = 0x100000013;
  v35[1] = v24[1];
  v35[2] = v24[2];
  uint64_t v31 = &unk_1EDD17CE8;
  int v34 = v35;
  v36[0] = v25[0];
  *(_OWORD *)((char *)v36 + 12) = *(_OWORD *)((char *)v25 + 12);
  long long v32 = xmmword_18E1FD730;
  v35[0] = v24[0];
  uint64_t v28 = 0x100000013;
  long long v27 = xmmword_18E1FD730;
  uint64_t v26 = &unk_1EDD17CB8;
  uint64_t v29 = (double *)v30;
  if (sub_18E06B85C(a1, (uint64_t)a2, *(void *)(a3 + 32), a4, a5, (uint64_t)&v26)) {
    return 0xFFFFFFFFLL;
  }
  sub_18E0818A4((uint64_t)&v20, a9, (uint64_t)&v31);
  sub_18E06F000((uint64_t)&v20, SDWORD2(v27), v29);
  if (a7)
  {
    *(void *)&v24[0] = 0x1400000013;
    uint64_t v33 = 0x100000002;
    uint64_t v31 = &unk_1EDD18B58;
    long long v32 = xmmword_18E1FD1A0;
    int v34 = v35;
    *(void *)&v35[0] = 0x1400000013;
    uint64_t v28 = 0x100000002;
    long long v27 = xmmword_18E1FD1A0;
    uint64_t v26 = &unk_1EDD18B28;
    uint64_t v29 = (double *)v30;
    if (sub_18E078D00(a1, a2, a3, (uint64_t)&v26)) {
      return 0xFFFFFFFFLL;
    }
    sub_18E070534((uint64_t)&v20, a9, (uint64_t)&v31);
    sub_18E06F074((uint64_t)&v20, SDWORD2(v27), v29);
  }
  if (!a8) {
    return 0;
  }
  for (uint64_t j = 10; j != 17; ++j)
    *((_DWORD *)&v20 + j) = j + 11;
  uint64_t v33 = 0x100000007;
  uint64_t v31 = &unk_1EDD19818;
  int v34 = v35;
  long long v32 = xmmword_18E1FD680;
  v35[0] = v24[0];
  *(_OWORD *)((char *)v35 + 12) = *(_OWORD *)((char *)v24 + 12);
  uint64_t v28 = 0x100000007;
  long long v27 = xmmword_18E1FD680;
  uint64_t v26 = &unk_1EDD197E8;
  uint64_t v29 = (double *)v30;
  if (!sub_18E06C3A8(a1, a2, a3, a6, (uint64_t)&v26))
  {
    sub_18E06CE44((uint64_t)&v20, a9, (uint64_t)&v31);
    sub_18E06C83C((uint64_t)&v20, SDWORD2(v27), v29);
    return 0;
  }
  return 0xFFFFFFFFLL;
}

double sub_18E078A54(uint64_t a1, int a2, double *a3)
{
  if (*(_DWORD *)(a1 + 16) != a2) {
    __assert_rtn("operator=", "cnsubvector.h", 347, "this->num_elements_ == A.num_elements_");
  }
  if (a2 >= 1)
  {
    uint64_t v3 = *(int **)(a1 + 288);
    uint64_t v4 = *(void *)(*(void *)(a1 + 248) + 32);
    uint64_t v5 = *(double **)(a1 + 32);
    uint64_t v6 = a2;
    do
    {
      double v7 = *a3++;
      double result = v7;
      uint64_t v9 = *v3++;
      *(double *)(v4 + 8 * v9) = result;
      *v5++ = result;
      --v6;
    }
    while (v6);
  }
  return result;
}

void *sub_18E078AC8(void *result)
{
  result[32] = &unk_1EDD174A8;
  *double result = &unk_1EDD17478;
  return result;
}

uint64_t sub_18E078B08(uint64_t result, uint64_t a2)
{
  int v2 = *(_DWORD *)(result + 8);
  if (v2 != *(_DWORD *)(a2 + 8)) {
    __assert_rtn("operator=", "cnsubmatrix.h", 376, "this->num_rows_ == A.num_rows_");
  }
  uint64_t v3 = *(unsigned int *)(result + 12);
  if (v3 != *(_DWORD *)(a2 + 12)) {
    __assert_rtn("operator=", "cnsubmatrix.h", 377, "this->num_cols_ == A.num_cols_");
  }
  if (v3)
  {
    unsigned int v4 = 0;
    uint64_t v5 = 0;
    uint64_t v6 = *(void *)(a2 + 32);
    do
    {
      if (v2)
      {
        uint64_t v7 = *(void *)(result + 48);
        long long v8 = *(int **)(result + 88);
        int v9 = *(_DWORD *)(v7 + 20) * *(_DWORD *)(*(void *)(result + 232) + 4 * v5);
        uint64_t v10 = *(void *)(v7 + 32);
        uint64_t v11 = *(void *)(result + 32);
        int v12 = *(_DWORD *)(result + 20) * v5;
        unsigned int v13 = v4;
        int v14 = v2;
        do
        {
          uint64_t v15 = *(void *)(v6 + 8 * v13);
          int v16 = *v8++;
          *(void *)(v10 + 8 * (v16 + v9)) = v15;
          *(void *)(v11 + 8 * v12++) = v15;
          ++v13;
          --v14;
        }
        while (v14);
      }
      ++v5;
      v4 += v2;
    }
    while (v5 != v3);
  }
  return result;
}

void *sub_18E078BF4(void *a1)
{
  *a1 = &unk_1EDD16488;
  a1[25] = &unk_1EDD174A8;
  a1[7] = &unk_1EDD174A8;
  return sub_18E06B5D4(a1);
}

uint64_t sub_18E078C54(uint64_t a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a2 + 8);
  int v2 = *(_DWORD *)(a2 + 12);
  *(void *)(a1 + 24) = 0x100000006;
  *(void *)a1 = &unk_1EDD19758;
  *(_DWORD *)(a1 + 8) = v2;
  *(_DWORD *)(a1 + 12) = v3;
  *(_DWORD *)(a1 + 16) = v3 * v2;
  *(_DWORD *)(a1 + 20) = v2;
  *(void *)(a1 + 32) = a1 + 40;
  return sub_18DFEE808(a2, a1);
}

void sub_18E078CC0(_Unwind_Exception *a1)
{
  *uint64_t v1 = &unk_1EDD174A8;
  _Unwind_Resume(a1);
}

void *sub_18E078CE0(void *result)
{
  *double result = &unk_1EDD174A8;
  return result;
}

uint64_t sub_18E078D00(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v28 = 0x1400000013;
  uint64_t v37 = 0x100000002;
  uint64_t v35 = &unk_1EDD18B58;
  long long v36 = xmmword_18E1FD1A0;
  uint64_t v38 = &v39;
  uint64_t v39 = 0x1400000013;
  long long v34 = *a2;
  v6.i64[1] = *((void *)&v34 + 1);
  uint64_t v31 = 0x100000002;
  long long v30 = xmmword_18E1FD1A0;
  uint64_t v29 = &unk_1EDD18B28;
  long long v32 = &v33;
  v6.i64[0] = 0x200000002;
  uint64_t v26 = 0x200000002;
  long long v25 = xmmword_18E1FD1B0;
  uint64_t v24 = &unk_1EDD18BB8;
  long long v27 = &v28;
  uint64_t v21 = 0x200000002;
  long long v20 = xmmword_18E1FD1B0;
  int8x16_t v19 = &unk_1EDD18BB8;
  uint64_t v22 = &v23;
  uint64_t v7 = CNTimeSpan::operator-(a1, &v34, v6, (int8x16_t)xmmword_18E1FD1B0);
  double v18 = v8 + (double)v7;
  sub_18E07910C(a3, (uint64_t)&v35, (uint64_t)v17);
  uint64_t v14 = 0x100000002;
  int v12 = &unk_1EDD18B28;
  uint64_t v15 = &v16;
  long long v13 = xmmword_18E1FD1A0;
  sub_18DFE2CC8((uint64_t)&v12, 0.0);
  if (sub_18E078ED8((uint64_t)v17, (uint64_t)&v12, (uint64_t *)&v18, (uint64_t)&v29, (uint64_t)&v24, (uint64_t)&v19, v9, v10))return 0xFFFFFFFFLL; {
  sub_18DFE2F24(a4, (uint64_t)&v29);
  }
  return 0;
}

uint64_t sub_18E078ED8(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8 = *(_DWORD *)(a1 + 8);
  unsigned int v9 = *(_DWORD *)(a1 + 12);
  if (v8 <= v9) {
    int v10 = *(_DWORD *)(a1 + 12);
  }
  else {
    int v10 = *(_DWORD *)(a1 + 8);
  }
  if (v8) {
    BOOL v11 = v9 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  BOOL v12 = !v11 && v10 == 2;
  if (v12
    && ((unsigned int v14 = *(_DWORD *)(a2 + 8), v15 = *(_DWORD *)(a2 + 12), v14 <= v15)
      ? (int v16 = *(_DWORD *)(a2 + 12))
      : (int v16 = *(_DWORD *)(a2 + 8)),
        v14 ? (BOOL v17 = v15 == 0) : (BOOL v17 = 1),
        !v17 ? (BOOL v18 = v16 == 2) : (BOOL v18 = 0),
        v18))
  {
    uint64_t v24 = *a3;
    uint64_t v42 = 0x200000002;
    uint64_t v40 = &unk_1EDD18BB8;
    int8x16_t v43 = &v44;
    long long v41 = xmmword_18E1FD1B0;
    sub_18DFE2CC8((uint64_t)&v40, 0.0);
    uint64_t v25 = SHIDWORD(v41);
    uint64_t v26 = v43;
    uint64_t *v43 = 0x3FF0000000000000;
    v26[(int)v25 + 1] = 0x3FF0000000000000;
    v26[v25] = v24;
    uint64_t v37 = 0x100000002;
    uint64_t v35 = &unk_1EDD18B28;
    long long v36 = xmmword_18E1FD1A0;
    uint64_t v38 = &v39;
    sub_18DFE2B44((uint64_t)&v40, a1, (uint64_t)&v35);
    uint64_t v32 = 0x100000002;
    long long v30 = &unk_1EDD18B28;
    long long v31 = xmmword_18E1FD1A0;
    uint64_t v33 = v34;
    sub_18DFEF1F4((uint64_t)&v35, a2, (uint64_t)&v30);
    sub_18DFE2F24(a4, (uint64_t)&v30);
    sub_18DFE2F24(a5, (uint64_t)&v40);
    uint64_t v32 = 0x200000002;
    long long v30 = &unk_1EDD18BB8;
    uint64_t v33 = v34;
    long long v31 = xmmword_18E1FD1B0;
    sub_18DFE2CC8((uint64_t)&v30, 0.0);
    int v27 = HIDWORD(v31) + 1;
    uint64_t v28 = v33;
    *uint64_t v33 = 0x3FF0000000000000;
    v28[v27] = 0x3FF0000000000000;
    sub_18DFE2F24(a6, (uint64_t)&v30);
    return 0;
  }
  else
  {
    LOWORD(v40) = 12;
    LOBYTE(v30) = 4;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v40, (unsigned __int8 *)&v30, "f_TwoStateOscillator called with inadequate matrices.", a4, a5, a6, a7, a8, v29);
    return 0xFFFFFFFFLL;
  }
}

double sub_18E07910C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v3 = *(_DWORD *)(a2 + 8);
  int v4 = *(_DWORD *)(a2 + 12);
  uint64_t v5 = (v4 * v3);
  *(void *)&double result = 0x100000002;
  *(void *)(a3 + 24) = 0x100000002;
  *(void *)a3 = &unk_1EDD18B28;
  *(_DWORD *)(a3 + 8) = v3;
  *(_DWORD *)(a3 + 12) = v4;
  *(_DWORD *)(a3 + 16) = v5;
  *(_DWORD *)(a3 + 20) = v3;
  uint64_t v7 = (double *)(a3 + 40);
  *(void *)(a3 + 32) = a3 + 40;
  if (v5)
  {
    unsigned int v8 = *(int **)(a2 + 32);
    uint64_t v9 = *(void *)(a1 + 32);
    do
    {
      uint64_t v10 = *v8++;
      double result = *(double *)(v9 + 8 * v10);
      *v7++ = result;
      --v5;
    }
    while (v5);
  }
  return result;
}

uint64_t sub_18E079170(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 24) = 0x10000001ALL;
  *(_OWORD *)(a1 + 8) = xmmword_18E1FD600;
  *(void *)(a1 + 32) = a1 + 40;
  *(void *)a1 = &unk_1EDD16B78;
  uint64_t v5 = a1 + 256;
  *(void *)(a1 + 280) = 0x10000001ALL;
  *(void *)(a1 + 248) = a2;
  *(void *)(a1 + 256) = &unk_1EDD186D8;
  *(_OWORD *)(a1 + 264) = xmmword_18E1FD600;
  *(void *)(a1 + 288) = a1 + 296;
  sub_18DFEEA3C(a1 + 256, a3);
  int v6 = *(_DWORD *)(v5 + 8);
  int v7 = *(_DWORD *)(a1 + 268);
  *(_DWORD *)(a1 + 8) = v6;
  *(_DWORD *)(a1 + 12) = v7;
  uint64_t v8 = (v7 * v6);
  *(_DWORD *)(a1 + 16) = v8;
  *(_DWORD *)(a1 + 20) = v6;
  if ((int)v8 >= 1)
  {
    uint64_t v9 = *(int **)(a1 + 288);
    uint64_t v10 = *(void *)(a2 + 32);
    BOOL v11 = *(void **)(a1 + 32);
    do
    {
      uint64_t v12 = *v9++;
      *v11++ = *(void *)(v10 + 8 * v12);
      --v8;
    }
    while (v8);
  }
  return a1;
}

void sub_18E079254(void *a1)
{
  a1[32] = &unk_1EDD174A8;
  *a1 = &unk_1EDD17478;
  JUMPOUT(0x192FA6240);
}

void sub_18E0792A4(uint64_t a1)
{
}

void sub_18E07942C(_Unwind_Exception *a1)
{
  v1[25] = &unk_1EDD174A8;
  char v1[7] = &unk_1EDD174A8;
  sub_18E06B5D4(v1);
  _Unwind_Resume(a1);
}

void sub_18E079478(void *a1)
{
  *a1 = &unk_1EDD16488;
  a1[25] = &unk_1EDD174A8;
  a1[7] = &unk_1EDD174A8;
  sub_18E06B5D4(a1);

  JUMPOUT(0x192FA6240);
}

void sub_18E07950C(void *a1)
{
  *a1 = &unk_1EDD174A8;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E07953C(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E079548(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    unsigned int v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      int v4 = *(_DWORD *)(a1 + 16);
      int v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        uint64_t v6 = (v4 - 1);
        uint64_t v7 = *(void *)(a1 + 32);
        uint64_t v8 = 1;
        do
        {
          uint64_t v9 = &v13[v8];
          if (!v13[v8])
          {
            int v10 = *(_DWORD *)(v7 + 4 * v8);
            int v11 = v8;
            do
            {
              int v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              int v12 = *(_DWORD *)(v7 + 4 * v11);
              *(_DWORD *)(v7 + 4 * v11) = v10;
              *uint64_t v9 = 1;
              uint64_t v9 = &v13[v11];
              int v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

__n128 sub_18E079614(void *a1, uint64_t a2)
{
  int v4 = operator new(0x238uLL);
  int v5 = v4;
  *(void *)int v4 = &unk_1EDD0A4E8;
  v4[2] = *(_DWORD *)(a2 + 8);
  if (*(char *)(a2 + 39) < 0)
  {
    sub_18DEDE668((unsigned char *)v4 + 16, *(void **)(a2 + 16), *(void *)(a2 + 24));
  }
  else
  {
    *((_OWORD *)v4 + 1) = *(_OWORD *)(a2 + 16);
    *((void *)v4 + 4) = *(void *)(a2 + 32);
  }
  *(void *)int v5 = &unk_1EDD146E8;
  *(_OWORD *)(v5 + 10) = *(_OWORD *)(a2 + 40);
  if (*(char *)(a2 + 79) < 0)
  {
    sub_18DEDE668((unsigned char *)v5 + 56, *(void **)(a2 + 56), *(void *)(a2 + 64));
  }
  else
  {
    *(_OWORD *)(v5 + 14) = *(_OWORD *)(a2 + 56);
    *((void *)v5 + 9) = *(void *)(a2 + 72);
  }
  *((void *)v5 + 10) = *(void *)(a2 + 80);
  *(_OWORD *)(v5 + 58) = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(v5 + 62) = *(_OWORD *)(a2 + 248);
  *(_OWORD *)(v5 + 42) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(v5 + 46) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(v5 + 50) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(v5 + 54) = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(v5 + 26) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(v5 + 30) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(v5 + 34) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(v5 + 38) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(v5 + 22) = *(_OWORD *)(a2 + 88);
  long long v6 = *(_OWORD *)(a2 + 280);
  *(_OWORD *)(v5 + 66) = *(_OWORD *)(a2 + 264);
  *(_OWORD *)(v5 + 70) = v6;
  *((void *)v5 + 37) = &unk_1EDD0AE58;
  uint64_t v7 = v5 + 76;
  if (*(char *)(a2 + 327) < 0)
  {
    sub_18DEDE668(v7, *(void **)(a2 + 304), *(void *)(a2 + 312));
  }
  else
  {
    *(_OWORD *)uint64_t v7 = *(_OWORD *)(a2 + 304);
    *((void *)v5 + 40) = *(void *)(a2 + 320);
  }
  *((void *)v5 + 41) = *(void *)(a2 + 328);
  long long v8 = *(_OWORD *)(a2 + 480);
  *((_OWORD *)v5 + 29) = *(_OWORD *)(a2 + 464);
  *((_OWORD *)v5 + 30) = v8;
  long long v9 = *(_OWORD *)(a2 + 416);
  *((_OWORD *)v5 + 25) = *(_OWORD *)(a2 + 400);
  *((_OWORD *)v5 + 26) = v9;
  long long v10 = *(_OWORD *)(a2 + 448);
  *((_OWORD *)v5 + 27) = *(_OWORD *)(a2 + 432);
  *((_OWORD *)v5 + 28) = v10;
  long long v11 = *(_OWORD *)(a2 + 352);
  *((_OWORD *)v5 + 21) = *(_OWORD *)(a2 + 336);
  *((_OWORD *)v5 + 22) = v11;
  long long v12 = *(_OWORD *)(a2 + 384);
  *((_OWORD *)v5 + 23) = *(_OWORD *)(a2 + 368);
  *((_OWORD *)v5 + 24) = v12;
  long long v13 = *(_OWORD *)(a2 + 512);
  *((_OWORD *)v5 + 31) = *(_OWORD *)(a2 + 496);
  *((_OWORD *)v5 + 32) = v13;
  *((_OWORD *)v5 + 33) = *(_OWORD *)(a2 + 528);
  *((void *)v5 + 68) = *(void *)(a2 + 544);
  *(void *)int v5 = &unk_1EDD15650;
  __n128 result = *(__n128 *)(a2 + 552);
  *(__n128 *)(v5 + 138) = result;
  *a1 = sub_18E0798AC;
  a1[1] = v5;
  return result;
}

void sub_18E079848(_Unwind_Exception *a1)
{
  v1[37] = &unk_1EDD0A9B8;
  if (*((char *)v1 + 79) < 0) {
    operator delete(*v4);
  }
  *unsigned int v1 = v2;
  if (*((char *)v1 + 39) < 0) {
    operator delete(*v3);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_18E0798AC(unsigned int a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v5 = a1;
  __n128 result = &unk_1EDD05C80;
  switch(v5)
  {
    case 1:
      sub_18E079614(a3, a2[1]);
      __n128 result = 0;
      break;
    case 2:
      __n128 result = 0;
      uint64_t v9 = a2[1];
      *a3 = sub_18E0798AC;
      a3[1] = v9;
      goto LABEL_5;
    case 3:
      if (a4) {
        BOOL v10 = sub_18DEE4C68(a4, (uint64_t)&unk_1EDD05C80);
      }
      else {
        BOOL v10 = a5 == &std::__any_imp::__unique_typeinfo<raven::h_GnssAverageDopplerArgs_RavenPNT<double>>::__id;
      }
      if (v10) {
        __n128 result = (void *)a2[1];
      }
      else {
        __n128 result = 0;
      }
      break;
    case 4:
      return result;
    default:
      long long v8 = (void (***)(void))a2[1];
      (**v8)(v8);
      operator delete(v8);
      __n128 result = 0;
LABEL_5:
      *a2 = 0;
      break;
  }
  return result;
}

uint64_t sub_18E0799B0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  uint64_t v5 = *(void *)(a1 + 64);
  uint64_t v6 = v2;
  unsigned int v3 = (double *)(a1 + 8);
  if (*(_DWORD *)(a1 + 24) == 1) {
    *(void *)(a1 + 8) = *(void *)(a1 + 16);
  }
  return sub_18E079A00((uint64_t)v3, v3, (double *)&v6, (double *)&v5);
}

uint64_t sub_18E079A00(uint64_t a1, double *a2, double *a3, double *a4)
{
  double v5 = *a2;
  if (*a2 < 0.0 || v5 > 1.0)
  {
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)a1) <= 1)
    {
      __int16 v42 = 2;
      unsigned __int8 v41 = 1;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v42, &v41, "WARNING: DiscreteEventDetector::Update called with bad xbar %.3lf.", v7, v8, v9, v10, v11, *(void *)a2);
    }
    return 0xFFFFFFFFLL;
  }
  double v14 = fabs(*a4);
  if (fabs(*a3) < 2.22044605e-16 && v14 < 2.22044605e-16)
  {
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)a1) <= 1)
    {
      __int16 v40 = 2;
      unsigned __int8 v39 = 1;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v40, &v39, "WARNING: DiscreteEventDetector::Update called with bad pzgx,%.3lf,pzgnx,%.3lf.", v34, v35, v36, v37, v38, *(void *)a3);
    }
    return 0xFFFFFFFFLL;
  }
  *(double *)a1 = v5;
  double v17 = 0.0;
  double v18 = fmax(1.0 - v5, 0.0);
  double v19 = fabs(*a3);
  BOOL v20 = fabs(v5) < 2.22044605e-16 || v19 < 2.22044605e-16;
  double v21 = 0.0;
  if (!v20)
  {
    double v22 = log(*a3);
    long double v23 = log(v5);
    double v21 = exp(v23 + v22);
  }
  double v24 = fabs(*a4);
  if (fabs(v18) >= 2.22044605e-16 && v24 >= 2.22044605e-16)
  {
    double v26 = log(*a4);
    long double v27 = log(v18);
    double v17 = exp(v27 + v26);
  }
  *(void *)(a1 + 8) = 0;
  double v28 = 0.0;
  if (fabs(v21) >= 2.22044605e-16)
  {
    double v29 = v21 + v17;
    double v28 = 0.0;
    if (fabs(v29) >= 2.22044605e-16)
    {
      double v30 = log(*a3);
      long double v31 = log(v5) + v30;
      long double v32 = log(v29);
      double v28 = exp(v31 - v32);
    }
  }
  uint64_t result = 0;
  *(double *)(a1 + 8) = fmin(v28, 1.0);
  *(_DWORD *)(a1 + 16) = 1;
  return result;
}

void sub_18E079C58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 24) = 0x100000003;
  *(void *)a1 = &unk_1EDD18D98;
  *(_OWORD *)(a1 + 8) = xmmword_18E1F6F60;
  *(void *)(a1 + 32) = a1 + 40;
  sub_18DFE2B44(a2, a3, a1);
}

void sub_18E079CC4(_Unwind_Exception *a1)
{
  *unsigned int v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

double sub_18E079CE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 24) = 0x300000003;
  *(void *)a1 = &unk_1EDD18EE8;
  *(_OWORD *)(a1 + 8) = xmmword_18E1F0010;
  *(void *)(a1 + 32) = a1 + 40;
  *(void *)&double result = *(_OWORD *)&sub_18DFEF1F4(a2, a3, a1);
  return result;
}

void sub_18E079D4C(_Unwind_Exception *a1)
{
  *unsigned int v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

uint64_t sub_18E079D6C(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v7 = 0x100000001;
  double v5 = &unk_1EDD18078;
  *(void *)&long long v3 = 0x100000001;
  *((void *)&v3 + 1) = 0x100000001;
  long long v6 = v3;
  uint64_t v8 = &v9;
  int v9 = a3;
  return sub_18DFEEB44(a1, a2, (uint64_t)&unk_1EB403E58, (uint64_t)&v5);
}

double sub_18E079DD4(void *a1)
{
  unsigned int v1 = sub_18E06BF24(a1, 20);
  *(_OWORD *)(v1 + 9) = 0u;
  *(_OWORD *)(v1 + 7) = 0u;
  *unsigned int v1 = &unk_1EDD16088;
  char v1[15] = 0x100000003;
  v1[11] = 0;
  v1[12] = &unk_1EDD18D98;
  *(void *)&double result = 0x100000003;
  *(_OWORD *)(v1 + 13) = xmmword_18E1F6F60;
  v1[16] = v1 + 17;
  v1[20] = 0;
  v1[21] = 0;
  v1[22] = 0;
  v1[23] = 0x3FF0000000000000;
  return result;
}

void sub_18E079E64(void *a1, uint64_t a2)
{
  int v4 = operator new(0xC0uLL);
  double v5 = v4;
  *(void *)int v4 = &unk_1EDD0A4E8;
  v4[2] = *(_DWORD *)(a2 + 8);
  if (*(char *)(a2 + 39) < 0)
  {
    sub_18DEDE668((unsigned char *)v4 + 16, *(void **)(a2 + 16), *(void *)(a2 + 24));
  }
  else
  {
    *((_OWORD *)v4 + 1) = *(_OWORD *)(a2 + 16);
    *((void *)v4 + 4) = *(void *)(a2 + 32);
  }
  *(_OWORD *)(v5 + 10) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(v5 + 14) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(v5 + 18) = *(_OWORD *)(a2 + 72);
  *((void *)v5 + 11) = *(void *)(a2 + 88);
  *(void *)double v5 = &unk_1EDD16088;
  sub_18DFF2980((uint64_t)(v5 + 24), a2 + 96);
  *((_OWORD *)v5 + 10) = 0u;
  *((_OWORD *)v5 + 11) = 0u;
  if (v5 != (_DWORD *)a2)
  {
    long long v6 = *(_OWORD *)(a2 + 176);
    *((_OWORD *)v5 + 10) = *(_OWORD *)(a2 + 160);
    *((_OWORD *)v5 + 11) = v6;
  }
  *a1 = sub_18E079F9C;
  a1[1] = v5;
}

void sub_18E079F6C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_18E079F9C(unsigned int a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v5 = a1;
  double result = &unk_1EDD06168;
  switch(v5)
  {
    case 1:
      sub_18E079E64(a3, a2[1]);
      double result = 0;
      break;
    case 2:
      double result = 0;
      uint64_t v9 = a2[1];
      *a3 = sub_18E079F9C;
      a3[1] = v9;
      goto LABEL_5;
    case 3:
      if (a4) {
        BOOL v10 = sub_18DEE4C68(a4, (uint64_t)&unk_1EDD06168);
      }
      else {
        BOOL v10 = a5 == &std::__any_imp::__unique_typeinfo<raven::h_HorizontalVelocityInIMUFrameArgs_RavenPNT<double>>::__id;
      }
      if (v10) {
        double result = (void *)a2[1];
      }
      else {
        double result = 0;
      }
      break;
    case 4:
      return result;
    default:
      uint64_t v8 = (void (***)(void))a2[1];
      (**v8)(v8);
      operator delete(v8);
      double result = 0;
LABEL_5:
      *a2 = 0;
      break;
  }
  return result;
}

uint64_t sub_18E07A0A0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1EDD0B1B0;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v5 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = v5;
  sub_18E0767B8(a1 + 64, a2 + 64);
  sub_18E0767B8(a1 + 256, a2 + 256);
  *(unsigned char *)(a1 + 448) = *(unsigned char *)(a2 + 448);
  long long v6 = *(_OWORD *)(a2 + 456);
  *(void *)(a1 + 472) = *(void *)(a2 + 472);
  *(_OWORD *)(a1 + 456) = v6;
  sub_18E0767B8(a1 + 480, a2 + 480);
  sub_18E064E74(a1 + 672, a2 + 672);
  sub_18E064FC0(a1 + 3600, a2 + 3600);
  *(void *)a1 = &unk_1EDD14C50;
  *(void *)(a1 + 5920) = 0;
  *(void *)(a1 + 5936) = 0;
  *(void *)(a1 + 5928) = 0;
  uint64_t v7 = *(_OWORD **)(a2 + 5920);
  uint64_t v8 = *(_OWORD **)(a2 + 5928);
  if (v8 != v7)
  {
    sub_18E068BB8((void *)(a1 + 5920), 0xCFF3FCFF3FCFF3FDLL * (v8 - v7));
    *(void *)(a1 + 5928) = sub_18E068C10(a1 + 5936, v7, v8, *(_OWORD **)(a1 + 5928));
  }
  *(void *)(a1 + 5944) = *(void *)(a2 + 5944);
  return a1;
}

void sub_18E07A228(_Unwind_Exception *a1, uint64_t a2, void *a3, ...)
{
  va_start(va, a3);
  v4[741] = v3;
  sub_18E068688((void ***)va);
  *long long v4 = v5;
  v4[450] = &unk_1EDD17478;
  v4[84] = &unk_1EDD17478;
  v4[60] = &unk_1EDD17478;
  v4[32] = &unk_1EDD17478;
  *a3 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

void sub_18E07A360(uint64_t a1)
{
  *(void *)a1 = &unk_1EDD0A4E8;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }

  JUMPOUT(0x192FA6240);
}

double sub_18E07A3D0(void *a1, uint64_t a2)
{
  long long v4 = (char *)operator new(0x68uLL);
  *(void *)long long v4 = &unk_1EDD0A4E8;
  *((_DWORD *)v4 + 2) = *(_DWORD *)(a2 + 8);
  uint64_t v5 = v4 + 16;
  if (*(char *)(a2 + 39) < 0)
  {
    sub_18DEDE668(v5, *(void **)(a2 + 16), *(void *)(a2 + 24));
  }
  else
  {
    *(_OWORD *)uint64_t v5 = *(_OWORD *)(a2 + 16);
    *((void *)v4 + 4) = *(void *)(a2 + 32);
  }
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(v4 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(v4 + 72) = *(_OWORD *)(a2 + 72);
  *((void *)v4 + 11) = *(void *)(a2 + 88);
  *(void *)long long v4 = &unk_1EDD15AE0;
  double result = *(double *)(a2 + 96);
  *((double *)v4 + 12) = result;
  *a1 = sub_18E07A4C0;
  a1[1] = v4;
  return result;
}

void sub_18E07A4AC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_18E07A4C0(unsigned int a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v5 = a1;
  double result = &unk_1EDD05EC8;
  switch(v5)
  {
    case 1:
      sub_18E07A3D0(a3, a2[1]);
      double result = 0;
      break;
    case 2:
      double result = 0;
      uint64_t v9 = a2[1];
      *a3 = sub_18E07A4C0;
      a3[1] = v9;
      goto LABEL_5;
    case 3:
      if (a4) {
        BOOL v10 = sub_18DEE4C68(a4, (uint64_t)&unk_1EDD05EC8);
      }
      else {
        BOOL v10 = a5 == &std::__any_imp::__unique_typeinfo<raven::h_DeviceZeroAngularRateArgs_RavenPNT<double>>::__id;
      }
      if (v10) {
        double result = (void *)a2[1];
      }
      else {
        double result = 0;
      }
      break;
    case 4:
      return result;
    default:
      uint64_t v8 = (void (***)(void))a2[1];
      (**v8)(v8);
      operator delete(v8);
      double result = 0;
LABEL_5:
      *a2 = 0;
      break;
  }
  return result;
}

void sub_18E07A5C4(uint64_t a1)
{
  *(void *)a1 = &unk_1EDD0A4E8;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }

  JUMPOUT(0x192FA6240);
}

__n128 sub_18E07A634(void *a1, uint64_t a2)
{
  long long v4 = (char *)operator new(0x118uLL);
  *(void *)long long v4 = &unk_1EDD0A4E8;
  *((_DWORD *)v4 + 2) = *(_DWORD *)(a2 + 8);
  uint64_t v5 = v4 + 16;
  if (*(char *)(a2 + 39) < 0)
  {
    sub_18DEDE668(v5, *(void **)(a2 + 16), *(void *)(a2 + 24));
  }
  else
  {
    *(_OWORD *)uint64_t v5 = *(_OWORD *)(a2 + 16);
    *((void *)v4 + 4) = *(void *)(a2 + 32);
  }
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(v4 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(v4 + 72) = *(_OWORD *)(a2 + 72);
  *((void *)v4 + 11) = *(void *)(a2 + 88);
  *(void *)long long v4 = &unk_1EDD15FE8;
  long long v6 = *(_OWORD *)(a2 + 240);
  *((_OWORD *)v4 + 14) = *(_OWORD *)(a2 + 224);
  *((_OWORD *)v4 + 15) = v6;
  *((_OWORD *)v4 + 16) = *(_OWORD *)(a2 + 256);
  v4[272] = *(unsigned char *)(a2 + 272);
  long long v7 = *(_OWORD *)(a2 + 176);
  *((_OWORD *)v4 + 10) = *(_OWORD *)(a2 + 160);
  *((_OWORD *)v4 + 11) = v7;
  long long v8 = *(_OWORD *)(a2 + 208);
  *((_OWORD *)v4 + 12) = *(_OWORD *)(a2 + 192);
  *((_OWORD *)v4 + 13) = v8;
  long long v9 = *(_OWORD *)(a2 + 112);
  *((_OWORD *)v4 + 6) = *(_OWORD *)(a2 + 96);
  *((_OWORD *)v4 + 7) = v9;
  __n128 result = *(__n128 *)(a2 + 128);
  long long v11 = *(_OWORD *)(a2 + 144);
  *((__n128 *)v4 + 8) = result;
  *((_OWORD *)v4 + 9) = v11;
  *a1 = sub_18E07A754;
  a1[1] = v4;
  return result;
}

void sub_18E07A740(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_18E07A754(unsigned int a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v5 = a1;
  __n128 result = &unk_1EDD06088;
  switch(v5)
  {
    case 1:
      sub_18E07A634(a3, a2[1]);
      __n128 result = 0;
      break;
    case 2:
      __n128 result = 0;
      uint64_t v9 = a2[1];
      *a3 = sub_18E07A754;
      a3[1] = v9;
      goto LABEL_5;
    case 3:
      if (a4) {
        BOOL v10 = sub_18DEE4C68(a4, (uint64_t)&unk_1EDD06088);
      }
      else {
        BOOL v10 = a5 == &std::__any_imp::__unique_typeinfo<raven::h_MapVectorPositionConstraintArgs_RavenPNT<double>>::__id;
      }
      if (v10) {
        __n128 result = (void *)a2[1];
      }
      else {
        __n128 result = 0;
      }
      break;
    case 4:
      return result;
    default:
      long long v8 = (void (***)(void))a2[1];
      (**v8)(v8);
      operator delete(v8);
      __n128 result = 0;
LABEL_5:
      *a2 = 0;
      break;
  }
  return result;
}

uint64_t sub_18E07A858(uint64_t a1, double a2, double a3)
{
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)(a1 + 40) = 0x300000003;
  *(void *)(a1 + 16) = &unk_1EDD18EE8;
  *(_OWORD *)(a1 + 24) = xmmword_18E1F0010;
  *(void *)(a1 + 48) = a1 + 56;
  *(void *)a1 = &unk_1EDD0AB90;
  off_1EDD0ABA0(a1, a2, a3);
  return a1;
}

void sub_18E07A8F0(_Unwind_Exception *a1)
{
  *unsigned int v1 = &unk_1EDD0B188;
  char v1[2] = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

void sub_18E07A92C(uint64_t a1)
{
  *(void *)a1 = &unk_1EDD0A4E8;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }

  JUMPOUT(0x192FA6240);
}

__n128 sub_18E07A99C(void *a1, uint64_t a2)
{
  long long v4 = (char *)operator new(0x110uLL);
  *(void *)long long v4 = &unk_1EDD0A4E8;
  *((_DWORD *)v4 + 2) = *(_DWORD *)(a2 + 8);
  uint64_t v5 = v4 + 16;
  if (*(char *)(a2 + 39) < 0)
  {
    sub_18DEDE668(v5, *(void **)(a2 + 16), *(void *)(a2 + 24));
  }
  else
  {
    *(_OWORD *)uint64_t v5 = *(_OWORD *)(a2 + 16);
    *((void *)v4 + 4) = *(void *)(a2 + 32);
  }
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(v4 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(v4 + 72) = *(_OWORD *)(a2 + 72);
  *((void *)v4 + 11) = *(void *)(a2 + 88);
  *(void *)long long v4 = &unk_1EDD16010;
  long long v6 = *(_OWORD *)(a2 + 240);
  *((_OWORD *)v4 + 14) = *(_OWORD *)(a2 + 224);
  *((_OWORD *)v4 + 15) = v6;
  *((_OWORD *)v4 + 16) = *(_OWORD *)(a2 + 256);
  long long v7 = *(_OWORD *)(a2 + 176);
  *((_OWORD *)v4 + 10) = *(_OWORD *)(a2 + 160);
  *((_OWORD *)v4 + 11) = v7;
  long long v8 = *(_OWORD *)(a2 + 208);
  *((_OWORD *)v4 + 12) = *(_OWORD *)(a2 + 192);
  *((_OWORD *)v4 + 13) = v8;
  long long v9 = *(_OWORD *)(a2 + 112);
  *((_OWORD *)v4 + 6) = *(_OWORD *)(a2 + 96);
  *((_OWORD *)v4 + 7) = v9;
  __n128 result = *(__n128 *)(a2 + 144);
  *((_OWORD *)v4 + 8) = *(_OWORD *)(a2 + 128);
  *((__n128 *)v4 + 9) = result;
  *a1 = sub_18E07AAB4;
  a1[1] = v4;
  return result;
}

void sub_18E07AAA0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_18E07AAB4(unsigned int a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v5 = a1;
  __n128 result = &unk_1EDD060C0;
  switch(v5)
  {
    case 1:
      sub_18E07A99C(a3, a2[1]);
      __n128 result = 0;
      break;
    case 2:
      __n128 result = 0;
      uint64_t v9 = a2[1];
      *a3 = sub_18E07AAB4;
      a3[1] = v9;
      goto LABEL_5;
    case 3:
      if (a4) {
        BOOL v10 = sub_18DEE4C68(a4, (uint64_t)&unk_1EDD060C0);
      }
      else {
        BOOL v10 = a5 == &std::__any_imp::__unique_typeinfo<raven::h_MapVectorVelocityConstraintArgs_RavenPNT<double>>::__id;
      }
      if (v10) {
        __n128 result = (void *)a2[1];
      }
      else {
        __n128 result = 0;
      }
      break;
    case 4:
      return result;
    default:
      long long v8 = (void (***)(void))a2[1];
      (**v8)(v8);
      operator delete(v8);
      __n128 result = 0;
LABEL_5:
      *a2 = 0;
      break;
  }
  return result;
}

double sub_18E07ABB8(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 24) = 0x300000003;
  *(void *)a1 = &unk_1EDD18EE8;
  *(void *)(a1 + 32) = a1 + 40;
  *(_OWORD *)(a1 + 8) = xmmword_18E1F0010;
  sub_18DFE2CC8(a1, 0.0);
  long long v4 = *(void **)(a1 + 32);
  *long long v4 = *(void *)(a2 + 24);
  int v5 = *(_DWORD *)(a1 + 20);
  v4[v5 + 1] = *(void *)(a2 + 32);
  double result = *(double *)(a2 + 40);
  *(double *)&v4[2 * v5 + 2] = result;
  return result;
}

uint64_t sub_18E07AC48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = 0x100000001;
  int v5 = &unk_1EDD18078;
  *(void *)&long long v3 = 0x100000001;
  *((void *)&v3 + 1) = 0x100000001;
  long long v6 = v3;
  long long v8 = &v9;
  int v9 = 0;
  return sub_18E07AF98(a1, a2, (uint64_t)&v5, a3);
}

uint64_t sub_18E07ACAC(uint64_t result, uint64_t a2)
{
  int v2 = *(_DWORD *)(result + 8);
  if (v2 != *(_DWORD *)(a2 + 8)) {
    __assert_rtn("operator=", "cnsubmatrix.h", 376, "this->num_rows_ == A.num_rows_");
  }
  uint64_t v3 = *(unsigned int *)(result + 12);
  if (v3 != *(_DWORD *)(a2 + 12)) {
    __assert_rtn("operator=", "cnsubmatrix.h", 377, "this->num_cols_ == A.num_cols_");
  }
  if (v3)
  {
    unsigned int v4 = 0;
    uint64_t v5 = 0;
    uint64_t v6 = *(void *)(a2 + 32);
    do
    {
      if (v2)
      {
        uint64_t v7 = *(void *)(result + 248);
        long long v8 = *(int **)(result + 288);
        int v9 = *(_DWORD *)(v7 + 20) * *(_DWORD *)(*(void *)(result + 336) + 4 * v5);
        uint64_t v10 = *(void *)(v7 + 32);
        uint64_t v11 = *(void *)(result + 32);
        int v12 = *(_DWORD *)(result + 20) * v5;
        unsigned int v13 = v4;
        int v14 = v2;
        do
        {
          uint64_t v15 = *(void *)(v6 + 8 * v13);
          int v16 = *v8++;
          *(void *)(v10 + 8 * (v16 + v9)) = v15;
          *(void *)(v11 + 8 * v12++) = v15;
          ++v13;
          --v14;
        }
        while (v14);
      }
      ++v5;
      v4 += v2;
    }
    while (v5 != v3);
  }
  return result;
}

void *sub_18E07AD98(void *result)
{
  result[38] = &unk_1EDD174A8;
  result[32] = &unk_1EDD174A8;
  *double result = &unk_1EDD17478;
  return result;
}

void sub_18E07ADF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 24) = 0x300000001;
  *(void *)a1 = &unk_1EDD18228;
  *(_OWORD *)(a1 + 8) = xmmword_18E1F8560;
  *(void *)(a1 + 32) = a1 + 40;
  sub_18DFE2B44(a2, a3, a1);
}

void sub_18E07AE64(_Unwind_Exception *a1)
{
  *unsigned int v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

void sub_18E07AE84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 24) = 0x400000001;
  *(void *)a1 = &unk_1EDD182E8;
  *(_OWORD *)(a1 + 8) = xmmword_18E1FD6B0;
  *(void *)(a1 + 32) = a1 + 40;
  sub_18DFE2B44(a2, a3, a1);
}

void sub_18E07AEF0(_Unwind_Exception *a1)
{
  *unsigned int v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

void *sub_18E07AF10(void *result)
{
  *double result = &unk_1EDD17478;
  return result;
}

uint64_t sub_18E07AF30(uint64_t a1)
{
  *(void *)(a1 + 24) = 0x100000001;
  *(void *)a1 = &unk_1EDD18048;
  *(void *)(a1 + 32) = a1 + 40;
  *(void *)&long long v2 = 0x100000001;
  *((void *)&v2 + 1) = 0x100000001;
  *(_OWORD *)(a1 + 8) = v2;
  uint64_t result = sub_18DFE2CC8(a1, 0.0);
  **(void **)(a1 + 32) = 0x3FF0000000000000;
  return result;
}

uint64_t sub_18E07AF98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(a1 + 24) = 0x1A00000001;
  *(_OWORD *)(a1 + 8) = xmmword_18E1FD7C0;
  *(void *)(a1 + 32) = a1 + 40;
  *(void *)a1 = &unk_1EDD16308;
  *(void *)(a1 + 248) = a2;
  *(void *)(a1 + 280) = 0x100000001;
  *(void *)(a1 + 256) = &unk_1EDD18078;
  *(void *)&long long v7 = 0x100000001;
  *((void *)&v7 + 1) = 0x100000001;
  *(_OWORD *)(a1 + 264) = v7;
  *(void *)(a1 + 288) = a1 + 296;
  *(void *)(a1 + 328) = 0x10000001ALL;
  *(void *)(a1 + 304) = &unk_1EDD186D8;
  *(_OWORD *)(a1 + 312) = xmmword_18E1FD600;
  *(void *)(a1 + 336) = a1 + 344;
  sub_18DFEEA3C(a1 + 256, a3);
  sub_18DFEEA3C(a1 + 304, a4);
  uint64_t v8 = *(unsigned int *)(a1 + 272);
  uint64_t v9 = *(unsigned int *)(a1 + 320);
  *(_DWORD *)(a1 + 8) = v8;
  *(_DWORD *)(a1 + 12) = v9;
  *(_DWORD *)(a1 + 16) = v9 * v8;
  *(_DWORD *)(a1 + 20) = v8;
  if (v9)
  {
    unsigned int v10 = 0;
    uint64_t v11 = 0;
    int v12 = *(_DWORD *)(a2 + 20);
    uint64_t v13 = *(void *)(a2 + 32);
    do
    {
      if (v8)
      {
        int v14 = *(int **)(a1 + 288);
        int v15 = *(_DWORD *)(*(void *)(a1 + 336) + 4 * v11) * v12;
        uint64_t v16 = *(void *)(a1 + 32);
        unsigned int v17 = v10;
        uint64_t v18 = v8;
        do
        {
          int v19 = *v14++;
          *(void *)(v16 + 8 * v17++) = *(void *)(v13 + 8 * (v19 + v15));
          --v18;
        }
        while (v18);
      }
      ++v11;
      v10 += v8;
    }
    while (v11 != v9);
  }
  return a1;
}

void sub_18E07B110(void *a1)
{
  a1[38] = &unk_1EDD174A8;
  a1[32] = &unk_1EDD174A8;
  *a1 = &unk_1EDD17478;
  JUMPOUT(0x192FA6240);
}

void sub_18E07B180(void *a1)
{
  *a1 = &unk_1EDD17478;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E07B1B0(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E07B1BC(uint64_t a1)
{
  sub_18DEF3CF4(a1, v1);
}

void sub_18E07B1E0(uint64_t a1)
{
  *(void *)a1 = &unk_1EDD0A4E8;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }

  JUMPOUT(0x192FA6240);
}

__n128 sub_18E07B250(void *a1, uint64_t a2)
{
  unsigned int v4 = (char *)operator new(0x78uLL);
  *(void *)unsigned int v4 = &unk_1EDD0A4E8;
  *((_DWORD *)v4 + 2) = *(_DWORD *)(a2 + 8);
  uint64_t v5 = v4 + 16;
  if (*(char *)(a2 + 39) < 0)
  {
    sub_18DEDE668(v5, *(void **)(a2 + 16), *(void *)(a2 + 24));
  }
  else
  {
    *(_OWORD *)uint64_t v5 = *(_OWORD *)(a2 + 16);
    *((void *)v4 + 4) = *(void *)(a2 + 32);
  }
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(v4 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(v4 + 72) = *(_OWORD *)(a2 + 72);
  *((void *)v4 + 11) = *(void *)(a2 + 88);
  *(void *)unsigned int v4 = &unk_1EDD160B0;
  __n128 result = *(__n128 *)(a2 + 96);
  *((__n128 *)v4 + 6) = result;
  *((void *)v4 + 14) = *(void *)(a2 + 112);
  *a1 = sub_18E07B348;
  a1[1] = v4;
  return result;
}

void sub_18E07B334(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_18E07B348(unsigned int a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v5 = a1;
  __n128 result = &unk_1EDD061A0;
  switch(v5)
  {
    case 1:
      sub_18E07B250(a3, a2[1]);
      __n128 result = 0;
      break;
    case 2:
      __n128 result = 0;
      uint64_t v9 = a2[1];
      *a3 = sub_18E07B348;
      a3[1] = v9;
      goto LABEL_5;
    case 3:
      if (a4) {
        BOOL v10 = sub_18DEE4C68(a4, (uint64_t)&unk_1EDD061A0);
      }
      else {
        BOOL v10 = a5 == &std::__any_imp::__unique_typeinfo<raven::h_NonHolonomicVelocityConstraintArgs_RavenPNT<double>>::__id;
      }
      if (v10) {
        __n128 result = (void *)a2[1];
      }
      else {
        __n128 result = 0;
      }
      break;
    case 4:
      return result;
    default:
      uint64_t v8 = (void (***)(void))a2[1];
      (**v8)(v8);
      operator delete(v8);
      __n128 result = 0;
LABEL_5:
      *a2 = 0;
      break;
  }
  return result;
}

double sub_18E07B44C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 24) = 0x100000003;
  *(void *)a1 = &unk_1EDD18D98;
  *(_OWORD *)(a1 + 8) = xmmword_18E1F6F60;
  *(void *)(a1 + 32) = a1 + 40;
  *(void *)&double result = *(_OWORD *)&sub_18DFEF1F4(a2, a3, a1);
  return result;
}

void sub_18E07B4B8(_Unwind_Exception *a1)
{
  *unsigned int v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

void sub_18E07B4D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 24) = 0x100000003;
  *(void *)a1 = &unk_1EDD18D98;
  *(_OWORD *)(a1 + 8) = xmmword_18E1F6F60;
  *(void *)(a1 + 32) = a1 + 40;
  sub_18DFE2B44(a2, a3, a1);
}

void sub_18E07B544(_Unwind_Exception *a1)
{
  *unsigned int v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

double sub_18E07B564(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 24) = 0x10000001ALL;
  *(void *)a1 = &unk_1EDD186A8;
  *(_OWORD *)(a1 + 8) = xmmword_18E1FD600;
  *(void *)(a1 + 32) = a1 + 40;
  *(void *)&double result = *(_OWORD *)&sub_18DFE2AA8(a2, a3, a1);
  return result;
}

double sub_18E07B5B4(uint64_t a1, uint64_t a2)
{
  int v2 = dword_1E91C9870;
  int v3 = unk_1E91C9874;
  *(void *)&double result = 0x10000001ALL;
  uint64_t v5 = (unk_1E91C9874 * dword_1E91C9870);
  *(void *)(a1 + 24) = 0x10000001ALL;
  *(void *)a1 = &unk_1EDD186A8;
  *(_DWORD *)(a1 + 8) = v2;
  *(_DWORD *)(a1 + 12) = v3;
  *(_DWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 20) = v2;
  uint64_t v6 = (double *)(a1 + 40);
  *(void *)(a1 + 32) = a1 + 40;
  if (v5)
  {
    long long v7 = (int *)qword_1E91C9888;
    do
    {
      uint64_t v8 = *v7++;
      double result = *(double *)(a2 + 8 * v8);
      *v6++ = result;
      --v5;
    }
    while (v5);
  }
  return result;
}

double sub_18E07B620(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 24) = 0x1A00000003;
  *(void *)a1 = &unk_1EDD18E58;
  *(_OWORD *)(a1 + 8) = xmmword_18E1FD670;
  *(void *)(a1 + 32) = a1 + 40;
  *(void *)&double result = *(_OWORD *)&sub_18DFEF1F4(a2, a3, a1);
  return result;
}

void sub_18E07B68C(_Unwind_Exception *a1)
{
  *unsigned int v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

void sub_18E07B6AC(uint64_t a1)
{
  *(void *)a1 = &unk_1EDD0A4E8;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }

  JUMPOUT(0x192FA6240);
}

double sub_18E07B71C(void *a1, uint64_t a2)
{
  unsigned int v4 = (char *)operator new(0x68uLL);
  *(void *)unsigned int v4 = &unk_1EDD0A4E8;
  *((_DWORD *)v4 + 2) = *(_DWORD *)(a2 + 8);
  uint64_t v5 = v4 + 16;
  if (*(char *)(a2 + 39) < 0)
  {
    sub_18DEDE668(v5, *(void **)(a2 + 16), *(void *)(a2 + 24));
  }
  else
  {
    *(_OWORD *)uint64_t v5 = *(_OWORD *)(a2 + 16);
    *((void *)v4 + 4) = *(void *)(a2 + 32);
  }
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(v4 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(v4 + 72) = *(_OWORD *)(a2 + 72);
  *((void *)v4 + 11) = *(void *)(a2 + 88);
  *(void *)unsigned int v4 = &unk_1EDD159D8;
  double result = *(double *)(a2 + 96);
  *((double *)v4 + 12) = result;
  *a1 = sub_18E07B80C;
  a1[1] = v4;
  return result;
}

void sub_18E07B7F8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_18E07B80C(unsigned int a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v5 = a1;
  double result = &unk_1EDD05E60;
  switch(v5)
  {
    case 1:
      sub_18E07B71C(a3, a2[1]);
      double result = 0;
      break;
    case 2:
      double result = 0;
      uint64_t v9 = a2[1];
      *a3 = sub_18E07B80C;
      a3[1] = v9;
      goto LABEL_5;
    case 3:
      if (a4) {
        BOOL v10 = sub_18DEE4C68(a4, (uint64_t)&unk_1EDD05E60);
      }
      else {
        BOOL v10 = a5 == &std::__any_imp::__unique_typeinfo<raven::h_DevicePositionChangeArgs_RavenPNT<double>>::__id;
      }
      if (v10) {
        double result = (void *)a2[1];
      }
      else {
        double result = 0;
      }
      break;
    case 4:
      return result;
    default:
      uint64_t v8 = (void (***)(void))a2[1];
      (**v8)(v8);
      operator delete(v8);
      double result = 0;
LABEL_5:
      *a2 = 0;
      break;
  }
  return result;
}

void sub_18E07B910(uint64_t a1)
{
  *(void *)a1 = &unk_1EDD0A4E8;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }

  JUMPOUT(0x192FA6240);
}

void sub_18E07B980(uint64_t a1)
{
  *(void *)a1 = &unk_1EDD0A4E8;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }

  JUMPOUT(0x192FA6240);
}

void sub_18E07B9F0(uint64_t a1)
{
  *(void *)a1 = &unk_1EDD0A4E8;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }

  JUMPOUT(0x192FA6240);
}

__n128 sub_18E07BA60(void *a1, uint64_t a2)
{
  unsigned int v4 = (char *)operator new(0x60uLL);
  *(void *)unsigned int v4 = &unk_1EDD0A4E8;
  *((_DWORD *)v4 + 2) = *(_DWORD *)(a2 + 8);
  uint64_t v5 = v4 + 16;
  if (*(char *)(a2 + 39) < 0)
  {
    sub_18DEDE668(v5, *(void **)(a2 + 16), *(void *)(a2 + 24));
  }
  else
  {
    *(_OWORD *)uint64_t v5 = *(_OWORD *)(a2 + 16);
    *((void *)v4 + 4) = *(void *)(a2 + 32);
  }
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(v4 + 56) = *(_OWORD *)(a2 + 56);
  __n128 result = *(__n128 *)(a2 + 72);
  *(__n128 *)(v4 + 72) = result;
  *((void *)v4 + 11) = *(void *)(a2 + 88);
  *(void *)unsigned int v4 = &unk_1EDD14F40;
  *a1 = sub_18E07BB48;
  a1[1] = v4;
  return result;
}

void sub_18E07BB34(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_18E07BB48(unsigned int a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v5 = a1;
  __n128 result = &unk_1EDD05A10;
  switch(v5)
  {
    case 1:
      sub_18E07BA60(a3, a2[1]);
      __n128 result = 0;
      break;
    case 2:
      __n128 result = 0;
      uint64_t v9 = a2[1];
      *a3 = sub_18E07BB48;
      a3[1] = v9;
      goto LABEL_5;
    case 3:
      if (a4) {
        BOOL v10 = sub_18DEE4C68(a4, (uint64_t)&unk_1EDD05A10);
      }
      else {
        BOOL v10 = a5 == &std::__any_imp::__unique_typeinfo<raven::h_DevicePositionArgs_RavenPNT<double>>::__id;
      }
      if (v10) {
        __n128 result = (void *)a2[1];
      }
      else {
        __n128 result = 0;
      }
      break;
    case 4:
      return result;
    default:
      uint64_t v8 = (void (***)(void))a2[1];
      (**v8)(v8);
      operator delete(v8);
      __n128 result = 0;
LABEL_5:
      *a2 = 0;
      break;
  }
  return result;
}

uint64_t sub_18E07BC4C(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 8);
  if (!v1) {
    return 0xFFFFFFFFLL;
  }
  *(_DWORD *)(a1 + 8) = v1 - 1;
  int v2 = *(_DWORD *)(a1 + 40);
  if (v2 == 349) {
    int v3 = 0;
  }
  else {
    int v3 = v2 + 1;
  }
  *(_DWORD *)(a1 + 40) = v3;
  sub_18E07BC94(a1);
  return 0;
}

uint64_t sub_18E07BC94(uint64_t result)
{
  uint64_t v1 = result;
  double v2 = 0.0;
  if (*(_DWORD *)(result + 8) >= 2u)
  {
    uint64_t v3 = result + 48 + 48 * *(unsigned int *)(result + 44);
    v12[0] = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    v12[1] = v4;
    uint64_t v5 = v1 + 48 + 48 * *(unsigned int *)(v1 + 40);
    v11[0] = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 16))(v5);
    v11[1] = v6;
    __n128 result = CNTimeSpan::operator-((uint64_t)v12, v11, v7, v8);
    double v10 = v9 + (double)result;
    if (fabs(v10) >= 2.22044605e-16) {
      double v2 = (double)(*(_DWORD *)(v1 + 8) - 1) / v10;
    }
  }
  *(double *)(v1 + 32) = v2;
  return result;
}

void sub_18E07BD84(uint64_t a1)
{
  *(void *)a1 = &unk_1EDD0A4E8;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }

  JUMPOUT(0x192FA6240);
}

__n128 sub_18E07BDF4(void *a1, uint64_t a2)
{
  uint64_t v4 = (char *)operator new(0x60uLL);
  *(void *)uint64_t v4 = &unk_1EDD0A4E8;
  *((_DWORD *)v4 + 2) = *(_DWORD *)(a2 + 8);
  uint64_t v5 = v4 + 16;
  if (*(char *)(a2 + 39) < 0)
  {
    sub_18DEDE668(v5, *(void **)(a2 + 16), *(void *)(a2 + 24));
  }
  else
  {
    *(_OWORD *)uint64_t v5 = *(_OWORD *)(a2 + 16);
    *((void *)v4 + 4) = *(void *)(a2 + 32);
  }
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(v4 + 56) = *(_OWORD *)(a2 + 56);
  __n128 result = *(__n128 *)(a2 + 72);
  *(__n128 *)(v4 + 72) = result;
  *((void *)v4 + 11) = *(void *)(a2 + 88);
  *(void *)uint64_t v4 = &unk_1EDD14710;
  *a1 = sub_18E07BEDC;
  a1[1] = v4;
  return result;
}

void sub_18E07BEC8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_18E07BEDC(unsigned int a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v5 = a1;
  __n128 result = &unk_1EDD055F8;
  switch(v5)
  {
    case 1:
      sub_18E07BDF4(a3, a2[1]);
      __n128 result = 0;
      break;
    case 2:
      __n128 result = 0;
      uint64_t v9 = a2[1];
      *a3 = sub_18E07BEDC;
      a3[1] = v9;
      goto LABEL_5;
    case 3:
      if (a4) {
        BOOL v10 = sub_18DEE4C68(a4, (uint64_t)&unk_1EDD055F8);
      }
      else {
        BOOL v10 = a5 == &std::__any_imp::__unique_typeinfo<raven::h_UserSpeedArgs_RavenPNT<double>>::__id;
      }
      if (v10) {
        __n128 result = (void *)a2[1];
      }
      else {
        __n128 result = 0;
      }
      break;
    case 4:
      return result;
    default:
      int8x16_t v8 = (void (***)(void))a2[1];
      (**v8)(v8);
      operator delete(v8);
      __n128 result = 0;
LABEL_5:
      *a2 = 0;
      break;
  }
  return result;
}

void sub_18E07BFE0(uint64_t a1)
{
  *(void *)a1 = &unk_1EDD0A4E8;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }

  JUMPOUT(0x192FA6240);
}

__n128 sub_18E07C050(void *a1, uint64_t a2)
{
  uint64_t v4 = (char *)operator new(0x60uLL);
  *(void *)uint64_t v4 = &unk_1EDD0A4E8;
  *((_DWORD *)v4 + 2) = *(_DWORD *)(a2 + 8);
  uint64_t v5 = v4 + 16;
  if (*(char *)(a2 + 39) < 0)
  {
    sub_18DEDE668(v5, *(void **)(a2 + 16), *(void *)(a2 + 24));
  }
  else
  {
    *(_OWORD *)uint64_t v5 = *(_OWORD *)(a2 + 16);
    *((void *)v4 + 4) = *(void *)(a2 + 32);
  }
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(v4 + 56) = *(_OWORD *)(a2 + 56);
  __n128 result = *(__n128 *)(a2 + 72);
  *(__n128 *)(v4 + 72) = result;
  *((void *)v4 + 11) = *(void *)(a2 + 88);
  *(void *)uint64_t v4 = &unk_1EDD16038;
  *a1 = sub_18E07C138;
  a1[1] = v4;
  return result;
}

void sub_18E07C124(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_18E07C138(unsigned int a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v5 = a1;
  __n128 result = &unk_1EDD060F8;
  switch(v5)
  {
    case 1:
      sub_18E07C050(a3, a2[1]);
      __n128 result = 0;
      break;
    case 2:
      __n128 result = 0;
      uint64_t v9 = a2[1];
      *a3 = sub_18E07C138;
      a3[1] = v9;
      goto LABEL_5;
    case 3:
      if (a4) {
        BOOL v10 = sub_18DEE4C68(a4, (uint64_t)&unk_1EDD060F8);
      }
      else {
        BOOL v10 = a5 == &std::__any_imp::__unique_typeinfo<raven::h_DeviceUserPositionDifferenceArgs_RavenPNT<double>>::__id;
      }
      if (v10) {
        __n128 result = (void *)a2[1];
      }
      else {
        __n128 result = 0;
      }
      break;
    case 4:
      return result;
    default:
      int8x16_t v8 = (void (***)(void))a2[1];
      (**v8)(v8);
      operator delete(v8);
      __n128 result = 0;
LABEL_5:
      *a2 = 0;
      break;
  }
  return result;
}

uint64_t sub_18E07C23C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8 = *(_DWORD *)(a1 + 8);
  unsigned int v9 = *(_DWORD *)(a1 + 12);
  if (v8 <= v9) {
    int v10 = *(_DWORD *)(a1 + 12);
  }
  else {
    int v10 = *(_DWORD *)(a1 + 8);
  }
  if (v8) {
    BOOL v11 = v9 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (!v11 && v10 == 6)
  {
    unsigned int v13 = *(_DWORD *)(a2 + 8);
    unsigned int v14 = *(_DWORD *)(a2 + 12);
    if (v13 <= v14) {
      int v15 = *(_DWORD *)(a2 + 12);
    }
    else {
      int v15 = *(_DWORD *)(a2 + 8);
    }
    if (v13) {
      BOOL v16 = v14 == 0;
    }
    else {
      BOOL v16 = 1;
    }
    if (!v16 && v15 == 6)
    {
      uint64_t v27 = 0x600000006;
      uint64_t v25 = &unk_1EDD197B8;
      double v28 = &v29;
      long long v26 = xmmword_18E1F8570;
      sub_18DFE2CC8((uint64_t)&v25, 0.0);
      int v19 = 0;
      int v20 = HIDWORD(v26) + 1;
      uint64_t v21 = 6;
      double v22 = v28;
      do
      {
        v22[v19] = 0x3FF0000000000000;
        v19 += v20;
        --v21;
      }
      while (v21);
      sub_18E07FD00((uint64_t)v30, (uint64_t)&v25);
    }
  }
  LOWORD(v25) = 12;
  LOBYTE(v24) = 4;
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v25, (unsigned __int8 *)&v24, "f_SixStateNearlyConstantVelocity called with inadequate matrices.", a4, a5, a6, a7, a8, v23);
  return 0xFFFFFFFFLL;
}

void sub_18E07C4D8(_Unwind_Exception *a1)
{
  sub_18E06B5D4((void *)(v1 - 128));
  _Unwind_Resume(a1);
}

uint64_t sub_18E07C4F0(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4)
{
  long long v55 = *a2;
  uint64_t v52 = 0x100000006;
  long long v51 = xmmword_18E1FD770;
  double v50 = &unk_1EDD19728;
  int64x2_t v53 = (double *)&v54;
  uint64_t v43 = 0x100000006;
  uint64_t v6 = *(void *)(a3 + 32);
  long long v45 = *(_OWORD *)(v6 + 168);
  v7.i64[1] = *((void *)&v45 + 1);
  double v8 = *(double *)(v6 + 192);
  double v9 = *(double *)(v6 + 208);
  double v10 = v8 * *(double *)(v6 + 200);
  uint64_t v46 = *(void *)(v6 + 184);
  double v47 = v10;
  double v11 = *(double *)(v6 + 216);
  long long v42 = xmmword_18E1FD770;
  unsigned __int8 v41 = &unk_1EDD19728;
  uint64_t v44 = &v45;
  double v48 = v8 * v9;
  double v49 = v8 * v11;
  v7.i64[0] = 0x600000006;
  uint64_t v38 = 0x600000006;
  uint64_t v36 = &unk_1EDD197B8;
  long long v37 = xmmword_18E1F8570;
  unsigned __int8 v39 = &v40;
  uint64_t v33 = 0x600000006;
  long double v31 = &unk_1EDD197B8;
  long long v32 = xmmword_18E1F8570;
  uint64_t v34 = &v35;
  uint64_t v12 = CNTimeSpan::operator-(a1, &v55, v7, (int8x16_t)xmmword_18E1F8570);
  double v30 = v13 + (double)v12;
  uint64_t v27 = 0x100000006;
  uint64_t v25 = &unk_1EDD19728;
  double v28 = &v29;
  long long v26 = xmmword_18E1FD770;
  sub_18DFE2CC8((uint64_t)&v25, 0.0);
  if (sub_18E06C950((uint64_t)&v41, (uint64_t)&v25, (uint64_t *)&v30, (uint64_t)&v50, (uint64_t)&v36, (uint64_t)&v31, v14, v15))return 0xFFFFFFFFLL; {
  unsigned int v17 = v53;
  }
  *(_OWORD *)(a4 + 8) = xmmword_18E1FD680;
  uint64_t v18 = *(void *)(a4 + 32);
  *(double *)uint64_t v18 = *v17;
  *(double *)(v18 + 8) = v17[1];
  *(double *)(v18 + 16) = v17[2];
  double v20 = v17[3];
  double v19 = v17[4];
  double v21 = v17[5];
  double v22 = sqrt(v19 * v19 + v20 * v20 + v21 * v21);
  *(double *)(v18 + 24) = v22;
  if (fabs(v22) <= 0.000000015)
  {
    uint64_t v24 = *(void *)(a3 + 32);
    *(void *)(v18 + 32) = *(void *)(v24 + 200);
    *(void *)(v18 + 40) = *(void *)(v24 + 208);
    double v23 = *(double *)(v24 + 216);
  }
  else
  {
    *(double *)(v18 + 32) = v20 / v22;
    *(double *)(v18 + 40) = v19 / v22;
    double v23 = v21 / v22;
  }
  uint64_t result = 0;
  *(double *)(v18 + 48) = v23;
  return result;
}

void sub_18E07C758(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 24) = 0x10000001ALL;
  *(void *)a1 = &unk_1EDD186A8;
  *(_OWORD *)(a1 + 8) = xmmword_18E1FD600;
  *(void *)(a1 + 32) = a1 + 40;
  sub_18DFE2B44(a2, a3, a1);
}

void sub_18E07C7C4(_Unwind_Exception *a1)
{
  *uint64_t v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

uint64_t sub_18E07C7E4(uint64_t a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a2 + 8);
  int v2 = *(_DWORD *)(a2 + 12);
  *(void *)(a1 + 24) = 0x30000001ALL;
  *(void *)a1 = &unk_1EDD187F8;
  *(_DWORD *)(a1 + 8) = v2;
  *(_DWORD *)(a1 + 12) = v3;
  *(_DWORD *)(a1 + 16) = v3 * v2;
  *(_DWORD *)(a1 + 20) = v2;
  *(void *)(a1 + 32) = a1 + 40;
  return sub_18DFE2C64(a2, a1);
}

void sub_18E07C850(_Unwind_Exception *a1)
{
  *uint64_t v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

uint64_t sub_18E07C870(uint64_t a1, uint64_t a2, int a3)
{
  int v3 = *(_DWORD *)(a2 + 8);
  uint64_t v17 = 0x100000003;
  uint64_t v12 = &unk_1EDD18DC8;
  int v13 = v3;
  int v14 = 1;
  int v15 = v3;
  int v16 = v3;
  uint64_t v18 = v19;
  if (v3)
  {
    for (int i = 0; i != v3; ++i)
      v19[i] = i;
  }
  uint64_t v9 = 0x100000001;
  int8x16_t v7 = &unk_1EDD18078;
  *(void *)&long long v5 = 0x100000001;
  *((void *)&v5 + 1) = 0x100000001;
  long long v8 = v5;
  double v10 = &v11;
  int v11 = a3;
  return sub_18DFEEB44(a1, a2, (uint64_t)&v12, (uint64_t)&v7);
}

void *sub_18E07C930(void *result)
{
  *uint64_t result = &unk_1EDD17478;
  return result;
}

void sub_18E07C950(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 24) = 0x100000003;
  *(void *)a1 = &unk_1EDD18D98;
  *(_OWORD *)(a1 + 8) = xmmword_18E1F6F60;
  *(void *)(a1 + 32) = a1 + 40;
  sub_18DFE2B44(a2, a3, a1);
}

void sub_18E07C9BC(_Unwind_Exception *a1)
{
  *uint64_t v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

uint64_t sub_18E07C9DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(a2 + 8);
  uint64_t v11 = 0x100000003;
  uint64_t v6 = &unk_1EDD18DC8;
  int v7 = v3;
  int v8 = 1;
  int v9 = v3;
  int v10 = v3;
  uint64_t v12 = v13;
  if (v3)
  {
    for (int i = 0; i != v3; ++i)
      v13[i] = i;
  }
  return sub_18DFEE864(a1, a2, (uint64_t)&v6, a3);
}

double sub_18E07CA60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 24) = 0x1A00000003;
  *(void *)a1 = &unk_1EDD18E58;
  *(_OWORD *)(a1 + 8) = xmmword_18E1FD670;
  *(void *)(a1 + 32) = a1 + 40;
  *(void *)&double result = *(_OWORD *)&sub_18DFEF1F4(a2, a3, a1);
  return result;
}

void sub_18E07CACC(_Unwind_Exception *a1)
{
  *uint64_t v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

double sub_18E07CAEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 24) = 0x1A00000003;
  *(void *)a1 = &unk_1EDD18E58;
  *(_OWORD *)(a1 + 8) = xmmword_18E1FD670;
  *(void *)(a1 + 32) = a1 + 40;
  *(void *)&double result = *(_OWORD *)&sub_18DFE2AA8(a2, a3, a1);
  return result;
}

void *sub_18E07CB3C(void *result)
{
  *double result = &unk_1EDD17478;
  return result;
}

void sub_18E07CB5C(void *a1)
{
  *a1 = &unk_1EDD17478;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E07CB8C(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E07CB98(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  unsigned int v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    unsigned int v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      int v4 = *(_DWORD *)(a1 + 16);
      int v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        uint64_t v6 = (v4 - 1);
        uint64_t v7 = *(void *)(a1 + 32);
        uint64_t v8 = 1;
        do
        {
          int v9 = &v13[v8];
          if (!v13[v8])
          {
            uint64_t v10 = *(void *)(v7 + 8 * v8);
            int v11 = v8;
            do
            {
              int v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              uint64_t v12 = *(void *)(v7 + 8 * v11);
              *(void *)(v7 + 8 * v11) = v10;
              *int v9 = 1;
              int v9 = &v13[v11];
              uint64_t v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

double sub_18E07CC90(uint64_t a1, uint64_t a2)
{
  *(void *)&double result = 0x1A00000003;
  *(void *)(a1 + 24) = 0x1A00000003;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1EDD18E58;
  int v4 = *(_DWORD *)(a2 + 8);
  int v3 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v5 = (v3 * v4);
  *(_DWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 20) = v4;
  uint64_t v6 = (double *)(a1 + 40);
  *(void *)(a1 + 32) = a1 + 40;
  if (*(_DWORD *)(a2 + 8) > 3u)
  {
    int v9 = "this->max_num_rows_ >= A.NumRows()";
    int v10 = 567;
    goto LABEL_9;
  }
  if (*(_DWORD *)(a2 + 12) > 0x1Au)
  {
    int v9 = "this->max_num_cols_ >= A.NumCols()";
    int v10 = 568;
LABEL_9:
    __assert_rtn("CNMatrix", "cnmatrix.h", v10, v9);
  }
  if ((int)v5 >= 1)
  {
    uint64_t v7 = *(double **)(a2 + 32);
    do
    {
      double v8 = *v7++;
      double result = v8;
      *v6++ = v8;
      --v5;
    }
    while (v5);
  }
  return result;
}

void sub_18E07CD60(_Unwind_Exception *a1)
{
  *unsigned int v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

void sub_18E07CD80(void *a1)
{
  *a1 = &unk_1EDD17478;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E07CDB0(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E07CDBC(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  unsigned int v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    unsigned int v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      int v4 = *(_DWORD *)(a1 + 16);
      int v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        uint64_t v6 = (v4 - 1);
        uint64_t v7 = *(void *)(a1 + 32);
        uint64_t v8 = 1;
        do
        {
          int v9 = &v13[v8];
          if (!v13[v8])
          {
            uint64_t v10 = *(void *)(v7 + 8 * v8);
            int v11 = v8;
            do
            {
              int v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              uint64_t v12 = *(void *)(v7 + 8 * v11);
              *(void *)(v7 + 8 * v11) = v10;
              *int v9 = 1;
              int v9 = &v13[v11];
              uint64_t v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

void sub_18E07CEB4(uint64_t a1)
{
  *(void *)a1 = &unk_1EDD0A4E8;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }

  JUMPOUT(0x192FA6240);
}

double sub_18E07CF24(void *a1, uint64_t a2)
{
  int v4 = (char *)operator new(0x68uLL);
  *(void *)int v4 = &unk_1EDD0A4E8;
  *((_DWORD *)v4 + 2) = *(_DWORD *)(a2 + 8);
  int v5 = v4 + 16;
  if (*(char *)(a2 + 39) < 0)
  {
    sub_18DEDE668(v5, *(void **)(a2 + 16), *(void *)(a2 + 24));
  }
  else
  {
    *(_OWORD *)int v5 = *(_OWORD *)(a2 + 16);
    *((void *)v4 + 4) = *(void *)(a2 + 32);
  }
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(v4 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(v4 + 72) = *(_OWORD *)(a2 + 72);
  *((void *)v4 + 11) = *(void *)(a2 + 88);
  *(void *)int v4 = &unk_1EDD16150;
  double result = *(double *)(a2 + 96);
  *((double *)v4 + 12) = result;
  *a1 = sub_18E07D014;
  a1[1] = v4;
  return result;
}

void sub_18E07D000(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_18E07D014(unsigned int a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v5 = a1;
  double result = &unk_1EDD06220;
  switch(v5)
  {
    case 1:
      sub_18E07CF24(a3, a2[1]);
      double result = 0;
      break;
    case 2:
      double result = 0;
      uint64_t v9 = a2[1];
      *a3 = sub_18E07D014;
      a3[1] = v9;
      goto LABEL_5;
    case 3:
      if (a4) {
        BOOL v10 = sub_18DEE4C68(a4, (uint64_t)&unk_1EDD06220);
      }
      else {
        BOOL v10 = a5 == &std::__any_imp::__unique_typeinfo<raven::h_DeviceUserVelocityDifferenceMountedWithNHCArgs_RavenPNT<double>>::__id;
      }
      if (v10) {
        double result = (void *)a2[1];
      }
      else {
        double result = 0;
      }
      break;
    case 4:
      return result;
    default:
      uint64_t v8 = (void (***)(void))a2[1];
      (**v8)(v8);
      operator delete(v8);
      double result = 0;
LABEL_5:
      *a2 = 0;
      break;
  }
  return result;
}

double sub_18E07D118(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 24) = 0x400000004;
  *(void *)a1 = &unk_1EDD195A8;
  *(_OWORD *)(a1 + 8) = xmmword_18E1F6F70;
  *(void *)(a1 + 32) = a1 + 40;
  return sub_18E07D314(a2, 0, a1);
}

uint64_t sub_18E07D160(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 24) = 0x300000003;
  *(void *)a1 = &unk_1EDD18EE8;
  *(_OWORD *)(a1 + 8) = xmmword_18E1F0010;
  *(void *)(a1 + 32) = a1 + 40;
  return sub_18E064994(a2, a3, a1);
}

void sub_18E07D1C8(_Unwind_Exception *a1)
{
  *unsigned int v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

uint64_t sub_18E07D1E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 24) = 0x200000003;
  *(void *)a1 = &unk_1EDD18EB8;
  *(_OWORD *)(a1 + 8) = xmmword_18E1FD990;
  *(void *)(a1 + 32) = a1 + 40;
  return sub_18E064994(a2, a3, a1);
}

void sub_18E07D254(_Unwind_Exception *a1)
{
  *unsigned int v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

void *sub_18E07D274(void *result)
{
  *double result = &unk_1EDD17478;
  return result;
}

void sub_18E07D294(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 24) = 0x300000003;
  *(void *)a3 = &unk_1EDD18EE8;
  *(_OWORD *)(a3 + 8) = xmmword_18E1F0010;
  *(void *)(a3 + 32) = a3 + 40;
  sub_18DFE2B44(a1, a2, a3);
}

void sub_18E07D2F4(_Unwind_Exception *a1)
{
  *unsigned int v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

double sub_18E07D314(uint64_t a1, int a2, uint64_t a3)
{
  int v7 = *(_DWORD *)(a1 + 8);
  int v6 = *(_DWORD *)(a1 + 12);
  if (v7 == 1 || v6 == 1)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 16);
    if (a2 >= 0) {
      int v10 = a2;
    }
    else {
      int v10 = -a2;
    }
    int v11 = v9 + v10;
    *(_DWORD *)(a3 + 8) = v9 + v10;
    *(_DWORD *)(a3 + 12) = v9 + v10;
    *(_DWORD *)(a3 + 16) = (v9 + v10) * (v9 + v10);
    *(_DWORD *)(a3 + 20) = v9 + v10;
    sub_18DFE2CC8(a3, 0.0);
    if ((int)v9 >= 1)
    {
      int v13 = *(uint64_t **)(a1 + 32);
      uint64_t v14 = (uint64_t *)(*(void *)(a3 + 32) + 8 * (v11 * (a2 & ~(a2 >> 31)) - (a2 & (a2 >> 31))));
      do
      {
        uint64_t v15 = *v13++;
        v12.i64[0] = v15;
        *uint64_t v14 = v15;
        v14 += v11 + 1;
        --v9;
      }
      while (v9);
    }
  }
  else
  {
    if (v6 >= v7) {
      int v16 = *(_DWORD *)(a1 + 8);
    }
    else {
      int v16 = *(_DWORD *)(a1 + 12);
    }
    if (v6 - v7 <= a2) {
      int v17 = *(_DWORD *)(a1 + 12);
    }
    else {
      int v17 = v7 + a2;
    }
    int v18 = v6 - v7;
    if (v6 >= v7) {
      int v17 = v7 + a2;
    }
    if (a2 >= 0) {
      int v17 = v16;
    }
    int v19 = v16 - a2;
    BOOL v20 = v18 < a2;
    int v21 = v18 - a2 + v16;
    if (v20) {
      int v16 = v21;
    }
    if (v6 > v7) {
      int v22 = v16;
    }
    else {
      int v22 = v19;
    }
    if (a2 >= 1) {
      int v17 = v22;
    }
    uint64_t v23 = v17 & ~(v17 >> 31);
    v24.i32[1] = 1;
    v24.i32[0] = v17 & ~(v17 >> 31);
    int32x4_t v12 = vdupq_lane_s32(v24, 0);
    v12.i32[1] = 1;
    *(int32x4_t *)(a3 + 8) = v12;
    if (v17 >= 1)
    {
      int v25 = v7 + 1;
      int v26 = v7 * (a2 & ~(a2 >> 31)) - (a2 & (a2 >> 31));
      uint64_t v27 = *(uint64_t **)(a3 + 32);
      double v28 = (uint64_t *)(*(void *)(a1 + 32) + 8 * v26);
      uint64_t v29 = 8 * v25;
      do
      {
        v12.i64[0] = *v28;
        *v27++ = *v28;
        double v28 = (uint64_t *)((char *)v28 + v29);
        --v23;
      }
      while (v23);
    }
  }
  return *(double *)v12.i64;
}

void sub_18E07D468(void *a1)
{
  *a1 = &unk_1EDD17478;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E07D498(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E07D4A4(uint64_t a1)
{
  sub_18DEF3CF4(a1, v1);
}

int64x2_t sub_18E07D4C8(void *a1)
{
  unsigned int v1 = sub_18E06BF24(a1, 10);
  *(_OWORD *)(v1 + 9) = 0u;
  *(_OWORD *)(v1 + 7) = 0u;
  *unsigned int v1 = &unk_1EDD16060;
  v1[13] = 0;
  v1[14] = 0;
  v1[11] = 0;
  v1[12] = &unk_1EDD14240;
  int64x2_t result = vdupq_n_s64(0x7FF8000000000000uLL);
  *(int64x2_t *)(v1 + 15) = result;
  v1[17] = 0x7FF8000000000000;
  return result;
}

__n128 sub_18E07D540(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(unsigned int *)(a1 + 144);
  if (v5 != -1)
  {
    if (!v5)
    {
      *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
      std::string::operator=((std::string *)(a2 + 16), (const std::string *)(a3 + 16));
      *(_OWORD *)(a2 + 40) = *(_OWORD *)(a3 + 40);
      long long v7 = *(_OWORD *)(a3 + 72);
      uint64_t v8 = *(void *)(a3 + 88);
      *(_OWORD *)(a2 + 56) = *(_OWORD *)(a3 + 56);
      *(void *)(a2 + 88) = v8;
      *(_OWORD *)(a2 + 72) = v7;
      __n128 result = *(__n128 *)(a3 + 120);
      long long v10 = *(_OWORD *)(a3 + 104);
      *(void *)(a2 + 136) = *(void *)(a3 + 136);
      *(_OWORD *)(a2 + 104) = v10;
      *(__n128 *)(a2 + 120) = result;
      return result;
    }
    ((void (*)(char *, uint64_t))*(&off_1EDD1E7D8 + v5))(&v16, a1);
  }
  *(_DWORD *)(a1 + 144) = -1;
  *(void *)a1 = &unk_1EDD0A4E8;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a3 + 8);
  int v11 = (unsigned char *)(a1 + 16);
  if (*(char *)(a3 + 39) < 0)
  {
    sub_18DEDE668(v11, *(void **)(a3 + 16), *(void *)(a3 + 24));
  }
  else
  {
    long long v12 = *(_OWORD *)(a3 + 16);
    *(void *)(a1 + 32) = *(void *)(a3 + 32);
    *(_OWORD *)int v11 = v12;
  }
  *(void *)a1 = &unk_1EDD146E8;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a3 + 40);
  long long v13 = *(_OWORD *)(a3 + 56);
  uint64_t v14 = *(void *)(a3 + 88);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a3 + 72);
  *(_OWORD *)(a1 + 56) = v13;
  *(void *)a1 = &unk_1EDD16060;
  *(void *)(a1 + 88) = v14;
  *(void *)(a1 + 96) = &unk_1EDD14240;
  __n128 result = *(__n128 *)(a3 + 104);
  long long v15 = *(_OWORD *)(a3 + 120);
  *(void *)(a1 + 136) = *(void *)(a3 + 136);
  *(_OWORD *)(a1 + 120) = v15;
  *(__n128 *)(a1 + 104) = result;
  *(_DWORD *)(a1 + 144) = 0;
  return result;
}

__n128 sub_18E07D6DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(unsigned int *)(a1 + 144);
  if (v5 != -1)
  {
    if (v5 == 1)
    {
      *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
      std::string::operator=((std::string *)(a2 + 16), (const std::string *)(a3 + 16));
      *(_OWORD *)(a2 + 40) = *(_OWORD *)(a3 + 40);
      __n128 result = *(__n128 *)(a3 + 56);
      long long v8 = *(_OWORD *)(a3 + 72);
      *(void *)(a2 + 88) = *(void *)(a3 + 88);
      *(_OWORD *)(a2 + 72) = v8;
      *(__n128 *)(a2 + 56) = result;
      return result;
    }
    ((void (*)(char *, uint64_t))*(&off_1EDD1E7D8 + v5))(&v12, a1);
  }
  *(_DWORD *)(a1 + 144) = -1;
  *(void *)a1 = &unk_1EDD0A4E8;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a3 + 8);
  uint64_t v9 = (unsigned char *)(a1 + 16);
  if (*(char *)(a3 + 39) < 0)
  {
    sub_18DEDE668(v9, *(void **)(a3 + 16), *(void *)(a3 + 24));
  }
  else
  {
    long long v10 = *(_OWORD *)(a3 + 16);
    *(void *)(a1 + 32) = *(void *)(a3 + 32);
    *(_OWORD *)uint64_t v9 = v10;
  }
  *(void *)a1 = &unk_1EDD146E8;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a3 + 40);
  __n128 result = *(__n128 *)(a3 + 56);
  long long v11 = *(_OWORD *)(a3 + 72);
  *(void *)(a1 + 88) = *(void *)(a3 + 88);
  *(_OWORD *)(a1 + 72) = v11;
  *(__n128 *)(a1 + 56) = result;
  *(void *)a1 = &unk_1EDD14710;
  *(_DWORD *)(a1 + 144) = 1;
  return result;
}

__n128 sub_18E07D834(void *a1, uint64_t a2)
{
  int v4 = (char *)operator new(0x90uLL);
  *(void *)int v4 = &unk_1EDD0A4E8;
  *((_DWORD *)v4 + 2) = *(_DWORD *)(a2 + 8);
  uint64_t v5 = v4 + 16;
  if (*(char *)(a2 + 39) < 0)
  {
    sub_18DEDE668(v5, *(void **)(a2 + 16), *(void *)(a2 + 24));
  }
  else
  {
    *(_OWORD *)uint64_t v5 = *(_OWORD *)(a2 + 16);
    *((void *)v4 + 4) = *(void *)(a2 + 32);
  }
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(v4 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(v4 + 72) = *(_OWORD *)(a2 + 72);
  uint64_t v6 = *(void *)(a2 + 88);
  *(void *)int v4 = &unk_1EDD16060;
  *((void *)v4 + 11) = v6;
  *((void *)v4 + 12) = &unk_1EDD14240;
  *(_OWORD *)(v4 + 104) = *(_OWORD *)(a2 + 104);
  __n128 result = *(__n128 *)(a2 + 120);
  *(__n128 *)(v4 + 120) = result;
  *((void *)v4 + 17) = *(void *)(a2 + 136);
  *a1 = sub_18E07D950;
  a1[1] = v4;
  return result;
}

void sub_18E07D93C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_18E07D950(unsigned int a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v5 = a1;
  __n128 result = &unk_1EDD06130;
  switch(v5)
  {
    case 1:
      sub_18E07D834(a3, a2[1]);
      __n128 result = 0;
      break;
    case 2:
      __n128 result = 0;
      uint64_t v9 = a2[1];
      *a3 = sub_18E07D950;
      a3[1] = v9;
      goto LABEL_5;
    case 3:
      if (a4) {
        BOOL v10 = sub_18DEE4C68(a4, (uint64_t)&unk_1EDD06130);
      }
      else {
        BOOL v10 = a5 == &std::__any_imp::__unique_typeinfo<raven::h_DeviceUserVelocityDifferenceArgs_RavenPNT<double>>::__id;
      }
      if (v10) {
        __n128 result = (void *)a2[1];
      }
      else {
        __n128 result = 0;
      }
      break;
    case 4:
      return result;
    default:
      long long v8 = (void (***)(void))a2[1];
      (**v8)(v8);
      operator delete(v8);
      __n128 result = 0;
LABEL_5:
      *a2 = 0;
      break;
  }
  return result;
}

__n128 sub_18E07DA54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_18E07DC48(a1, 1, a2, a3);
  if (*(_DWORD *)(a1 + 8) == 1 || *(_DWORD *)(a1 + 12) == 1)
  {
    int v8 = *(_DWORD *)(a2 + 16);
    if (v8 >= 2)
    {
      uint64_t v9 = *(_DWORD **)(a2 + 32);
      BOOL v10 = *(_DWORD **)(a3 + 32);
      for (uint64_t i = 1; i < v8; ++i)
      {
        int v12 = v9[i];
        if (v12 < *v9)
        {
          *uint64_t v9 = v12;
          *BOOL v10 = v10[i];
          int v8 = *(_DWORD *)(a2 + 16);
        }
      }
    }
    result.n128_u64[0] = 0x100000001;
    result.n128_u64[1] = 0x100000001;
    *(__n128 *)(a2 + 8) = result;
    *(__n128 *)(a3 + 8) = result;
  }
  return result;
}

void *sub_18E07DAF4(void *result)
{
  *__n128 result = &unk_1EDD174D8;
  return result;
}

void sub_18E07DB14(void *a1)
{
  *a1 = &unk_1EDD174D8;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E07DB44(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E07DB50(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  unsigned int v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    unsigned int v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      int v4 = *(_DWORD *)(a1 + 16);
      int v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        uint64_t v6 = (v4 - 1);
        uint64_t v7 = *(void *)(a1 + 32);
        uint64_t v8 = 1;
        do
        {
          uint64_t v9 = &v13[v8];
          if (!v13[v8])
          {
            int v10 = *(_DWORD *)(v7 + 4 * v8);
            int v11 = v8;
            do
            {
              int v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              int v12 = *(_DWORD *)(v7 + 4 * v11);
              *(_DWORD *)(v7 + 4 * v11) = v10;
              *uint64_t v9 = 1;
              uint64_t v9 = &v13[v11];
              int v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

uint64_t sub_18E07DC48(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  if (a2 == 1)
  {
    int v4 = *(_DWORD *)(result + 12);
    *(_DWORD *)(a3 + 8) = 1;
    *(_DWORD *)(a3 + 12) = v4;
    *(_DWORD *)(a3 + 16) = v4;
    *(_DWORD *)(a3 + 20) = 1;
    int v5 = *(_DWORD *)(result + 12);
    *(_DWORD *)(a4 + 8) = 1;
    *(_DWORD *)(a4 + 12) = v5;
    *(_DWORD *)(a4 + 16) = v5;
    *(_DWORD *)(a4 + 20) = 1;
    if (v5)
    {
      unint64_t v6 = 0;
      uint64_t v7 = *(void *)(result + 32);
      uint64_t v8 = *(void *)(a3 + 32);
      uint64_t v9 = *(void *)(a4 + 32);
      do
      {
        uint64_t v10 = *(unsigned int *)(result + 8);
        int v11 = *(_DWORD *)(v7 + 4 * (v10 * v6));
        if (v10 < 2)
        {
          int v12 = 0;
        }
        else
        {
          int v12 = 0;
          for (uint64_t i = 1; i != v10; ++i)
          {
            if (*(_DWORD *)(v7 + 4 * (v10 * v6 + i)) < v11)
            {
              int v11 = *(_DWORD *)(v7 + 4 * (v10 * v6 + i));
              int v12 = i;
            }
          }
        }
        *(_DWORD *)(v8 + 4 * v6) = v11;
        *(_DWORD *)(v9 + 4 * v6++) = v12;
      }
      while (v6 < *(unsigned int *)(result + 12));
    }
  }
  else
  {
    v14.i32[1] = 1;
    v14.i32[0] = *(_DWORD *)(result + 8);
    int32x4_t v15 = vdupq_lane_s32(v14, 0);
    v15.i32[1] = 1;
    *(int32x4_t *)(a3 + 8) = v15;
    unsigned int v16 = *(_DWORD *)(result + 8);
    int32x4_t v17 = vdupq_lane_s32((int32x2_t)(v16 | 0x100000000), 0);
    v17.i32[1] = 1;
    *(int32x4_t *)(a4 + 8) = v17;
    if (v16)
    {
      unint64_t v18 = 0;
      uint64_t v19 = *(void *)(result + 32);
      uint64_t v20 = *(void *)(a3 + 32);
      uint64_t v21 = *(void *)(a4 + 32);
      do
      {
        *(_DWORD *)(v20 + 4 * v18) = *(_DWORD *)(v19 + 4 * v18);
        *(_DWORD *)(v21 + 4 * v18++) = 0;
      }
      while (v18 < *(unsigned int *)(result + 8));
    }
    unsigned int v22 = *(_DWORD *)(result + 12);
    if (v22 >= 2)
    {
      uint64_t v23 = *(void *)(result + 32);
      uint64_t v24 = *(void *)(a3 + 32);
      unsigned int v25 = *(_DWORD *)(result + 8);
      unsigned int v26 = 1;
      unsigned int v27 = v25;
      do
      {
        if (v27)
        {
          unint64_t v28 = 0;
          uint64_t v29 = *(void *)(a4 + 32);
          int v30 = v27 * v26;
          do
          {
            int v31 = *(_DWORD *)(v23 + 4 * (v30 + v28));
            if (v31 < *(_DWORD *)(v24 + 4 * v28))
            {
              *(_DWORD *)(v24 + 4 * v28) = v31;
              *(_DWORD *)(v29 + 4 * v28) = v26;
              unsigned int v25 = *(_DWORD *)(result + 8);
            }
            ++v28;
          }
          while (v28 < v25);
          unsigned int v22 = *(_DWORD *)(result + 12);
          unsigned int v27 = v25;
        }
        ++v26;
      }
      while (v26 < v22);
    }
  }
  return result;
}

__n128 sub_18E07DDBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_18E07DE5C(a1, 1, a2, a3);
  if (*(_DWORD *)(a1 + 8) == 1 || *(_DWORD *)(a1 + 12) == 1)
  {
    int v8 = *(_DWORD *)(a2 + 16);
    if (v8 >= 2)
    {
      uint64_t v9 = *(_DWORD **)(a2 + 32);
      uint64_t v10 = *(_DWORD **)(a3 + 32);
      for (uint64_t i = 1; i < v8; ++i)
      {
        int v12 = v9[i];
        if (v12 > *v9)
        {
          *uint64_t v9 = v12;
          *uint64_t v10 = v10[i];
          int v8 = *(_DWORD *)(a2 + 16);
        }
      }
    }
    result.n128_u64[0] = 0x100000001;
    result.n128_u64[1] = 0x100000001;
    *(__n128 *)(a2 + 8) = result;
    *(__n128 *)(a3 + 8) = result;
  }
  return result;
}

uint64_t sub_18E07DE5C(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  if (a2 == 1)
  {
    int v4 = *(_DWORD *)(result + 12);
    *(_DWORD *)(a3 + 8) = 1;
    *(_DWORD *)(a3 + 12) = v4;
    *(_DWORD *)(a3 + 16) = v4;
    *(_DWORD *)(a3 + 20) = 1;
    int v5 = *(_DWORD *)(result + 12);
    *(_DWORD *)(a4 + 8) = 1;
    *(_DWORD *)(a4 + 12) = v5;
    *(_DWORD *)(a4 + 16) = v5;
    *(_DWORD *)(a4 + 20) = 1;
    if (v5)
    {
      unint64_t v6 = 0;
      uint64_t v7 = *(void *)(result + 32);
      uint64_t v8 = *(void *)(a3 + 32);
      uint64_t v9 = *(void *)(a4 + 32);
      do
      {
        uint64_t v10 = *(unsigned int *)(result + 8);
        int v11 = *(_DWORD *)(v7 + 4 * (v10 * v6));
        if (v10 < 2)
        {
          int v12 = 0;
        }
        else
        {
          int v12 = 0;
          for (uint64_t i = 1; i != v10; ++i)
          {
            if (*(_DWORD *)(v7 + 4 * (v10 * v6 + i)) > v11)
            {
              int v11 = *(_DWORD *)(v7 + 4 * (v10 * v6 + i));
              int v12 = i;
            }
          }
        }
        *(_DWORD *)(v8 + 4 * v6) = v11;
        *(_DWORD *)(v9 + 4 * v6++) = v12;
      }
      while (v6 < *(unsigned int *)(result + 12));
    }
  }
  else
  {
    v14.i32[1] = 1;
    v14.i32[0] = *(_DWORD *)(result + 8);
    int32x4_t v15 = vdupq_lane_s32(v14, 0);
    v15.i32[1] = 1;
    *(int32x4_t *)(a3 + 8) = v15;
    unsigned int v16 = *(_DWORD *)(result + 8);
    int32x4_t v17 = vdupq_lane_s32((int32x2_t)(v16 | 0x100000000), 0);
    v17.i32[1] = 1;
    *(int32x4_t *)(a4 + 8) = v17;
    if (v16)
    {
      unint64_t v18 = 0;
      uint64_t v19 = *(void *)(result + 32);
      uint64_t v20 = *(void *)(a3 + 32);
      uint64_t v21 = *(void *)(a4 + 32);
      do
      {
        *(_DWORD *)(v20 + 4 * v18) = *(_DWORD *)(v19 + 4 * v18);
        *(_DWORD *)(v21 + 4 * v18++) = 0;
      }
      while (v18 < *(unsigned int *)(result + 8));
    }
    unsigned int v22 = *(_DWORD *)(result + 12);
    if (v22 >= 2)
    {
      uint64_t v23 = *(void *)(result + 32);
      uint64_t v24 = *(void *)(a3 + 32);
      unsigned int v25 = *(_DWORD *)(result + 8);
      unsigned int v26 = 1;
      unsigned int v27 = v25;
      do
      {
        if (v27)
        {
          unint64_t v28 = 0;
          uint64_t v29 = *(void *)(a4 + 32);
          int v30 = v27 * v26;
          do
          {
            int v31 = *(_DWORD *)(v23 + 4 * (v30 + v28));
            if (v31 > *(_DWORD *)(v24 + 4 * v28))
            {
              *(_DWORD *)(v24 + 4 * v28) = v31;
              *(_DWORD *)(v29 + 4 * v28) = v26;
              unsigned int v25 = *(_DWORD *)(result + 8);
            }
            ++v28;
          }
          while (v28 < v25);
          unsigned int v22 = *(_DWORD *)(result + 12);
          unsigned int v27 = v25;
        }
        ++v26;
      }
      while (v26 < v22);
    }
  }
  return result;
}

uint64_t sub_18E07DFD0(uint64_t result, int a2, int *a3)
{
  if (*(_DWORD *)(result + 16) != a2) {
    __assert_rtn("operator=", "cnsubvector.h", 347, "this->num_elements_ == A.num_elements_");
  }
  if (a2 >= 1)
  {
    unsigned int v3 = *(int **)(result + 184);
    uint64_t v4 = *(void *)(*(void *)(result + 144) + 32);
    int v5 = *(_DWORD **)(result + 32);
    uint64_t v6 = a2;
    do
    {
      int v8 = *a3++;
      int v7 = v8;
      uint64_t v9 = *v3++;
      *(_DWORD *)(v4 + 4 * v9) = v7;
      *v5++ = v7;
      --v6;
    }
    while (v6);
  }
  return result;
}

void *sub_18E07E044(void *result)
{
  result[19] = &unk_1EDD174A8;
  *__n128 result = &unk_1EDD174A8;
  return result;
}

void sub_18E07E084(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v95 = *MEMORY[0x1E4F143B8];
  if (!*(_DWORD *)(a1 + 1108))
  {
    sub_18DFE2F24(a1 + 552, a1 + 8);
    sub_18DFE2F24(a1 + 800, a1 + 256);
    sub_18DFE2F24(a1 + 848, a1 + 304);
  }
  unsigned int v6 = *(_DWORD *)(a1 + 560);
  unsigned int v7 = *(_DWORD *)(a1 + 564);
  if (v6 <= v7) {
    int v8 = *(_DWORD *)(a1 + 564);
  }
  else {
    int v8 = *(_DWORD *)(a1 + 560);
  }
  if (v7) {
    BOOL v9 = v6 == 0;
  }
  else {
    BOOL v9 = 1;
  }
  if (v9) {
    int v10 = 0;
  }
  else {
    int v10 = v8;
  }
  if (v10 != a2)
  {
    LOWORD(v86) = 2;
    LOBYTE(v77) = 4;
    unsigned __int8 v11 = cnprint::CNLogFormatter::FormatGeneral((const void **)(a1 + 1272), "ReorderStates(): Length(order) != Length(x).");
    if (*(char *)(a1 + 1295) >= 0) {
      LOBYTE(v17) = v11;
    }
    else {
      uint64_t v17 = *(void *)(a1 + 1272);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v86, (unsigned __int8 *)&v77, "%s", v12, v13, v14, v15, v16, v17);
  }
  uint64_t v92 = 0x10000001ALL;
  uint64_t v93 = 0;
  int32x4_t v91 = 0uLL;
  uint64_t v90 = &unk_1EDD18678;
  if ((a2 & 0x80000000) != 0) {
    __assert_rtn("CNMatrix", "cnmatrix.h", 419, "nr >= 0");
  }
  int32x4_t v18 = vdupq_lane_s32((int32x2_t)(a2 | 0x100000000), 0);
  v18.i32[1] = 1;
  int32x4_t v91 = v18;
  uint64_t v19 = v94;
  uint64_t v93 = v94;
  if (a2 > 3)
  {
    bzero(v94, a2 - 1);
    v94[a2 - 1] = 0;
    uint64_t v20 = a2;
  }
  else
  {
    if (!a2)
    {
      char v23 = 0;
LABEL_29:
      sub_18DFE2F24(a1 + 8, a1 + 552);
      sub_18DFE2F24(a1 + 256, a1 + 800);
      sub_18DFE2F24(a1 + 304, a1 + 848);
      if ((v23 & 1) == 0)
      {
        sub_18DFE2F24(a1 + 256, a1 + 800);
LABEL_52:
        sub_18E06E85C((uint64_t)v76);
      }
      uint64_t v31 = 0;
      while (1)
      {
        int v32 = *(_DWORD *)(*(void *)(a3 + 32) + 4 * v31);
        *(void *)(*(void *)(a1 + 584) + 8 * v31) = *(void *)(*(void *)(a1 + 40) + 8 * v32);
        sub_18E07E890((uint64_t)&v86, a1 + 256, v32);
        sub_18E07E890((uint64_t)&v77, a1 + 800, v31);
        int v33 = v78;
        if (v78 != v87) {
          break;
        }
        uint64_t v34 = v79;
        if (v79 != v88)
        {
          int v73 = 437;
          long long v74 = "this->num_cols_ == A.num_cols_";
LABEL_56:
          __assert_rtn("operator=", "cnsubmatrix.h", v73, v74);
        }
        if (v79)
        {
          unsigned int v35 = 0;
          int v36 = 0;
          uint64_t v37 = 0;
          uint64_t v38 = v89;
          unsigned __int8 v39 = v83;
          uint64_t v40 = v84;
          int v41 = v80;
          uint64_t v42 = v82;
          uint64_t v43 = v81;
          do
          {
            if (v33)
            {
              int v44 = *(_DWORD *)(v42 + 20) * *(_DWORD *)(v40 + 4 * v37);
              uint64_t v45 = *(void *)(v42 + 32);
              unsigned int v46 = v35;
              double v47 = v39;
              int v48 = v36;
              int v49 = v33;
              do
              {
                uint64_t v50 = *(void *)(v38 + 8 * v46);
                int v51 = *v47++;
                *(void *)(v45 + 8 * (v51 + v44)) = v50;
                *(void *)(v43 + 8 * v48++) = v50;
                ++v46;
                --v49;
              }
              while (v49);
            }
            ++v37;
            v36 += v41;
            v35 += v33;
          }
          while (v37 != v34);
        }
        *(void *)(*(void *)(a1 + 880) + 8 * v31++) = *(void *)(*(void *)(a1 + 336) + 8 * v32);
        if (v31 == a2)
        {
          sub_18DFE2F24(a1 + 256, a1 + 800);
          uint64_t v52 = 0;
          int64x2_t v53 = "this->num_rows_ == A.num_rows_";
          while (1)
          {
            sub_18E07E950((uint64_t)&v86, a1 + 256, *(_DWORD *)(*(void *)(a3 + 32) + 4 * v52));
            sub_18E07E950((uint64_t)&v77, a1 + 800, v52);
            int v54 = v78;
            if (v78 != v87) {
              break;
            }
            uint64_t v55 = v79;
            if (v79 != v88)
            {
              int v75 = 437;
              int64x2_t v53 = "this->num_cols_ == A.num_cols_";
LABEL_59:
              __assert_rtn("operator=", "cnsubmatrix.h", v75, v53);
            }
            if (v79)
            {
              unsigned int v56 = 0;
              int v57 = 0;
              uint64_t v58 = 0;
              uint64_t v59 = v89;
              char v60 = v83;
              uint64_t v61 = v85;
              int v62 = v80;
              uint64_t v63 = v82;
              uint64_t v64 = v81;
              do
              {
                if (v54)
                {
                  int v65 = *(_DWORD *)(v63 + 20) * *(_DWORD *)(v61 + 4 * v58);
                  uint64_t v66 = *(void *)(v63 + 32);
                  unsigned int v67 = v56;
                  int64x2_t v68 = v60;
                  int v69 = v57;
                  int v70 = v54;
                  do
                  {
                    uint64_t v71 = *(void *)(v59 + 8 * v67);
                    int v72 = *v68++;
                    *(void *)(v66 + 8 * (v72 + v65)) = v71;
                    *(void *)(v64 + 8 * v69++) = v71;
                    ++v67;
                    --v70;
                  }
                  while (v70);
                }
                ++v58;
                v57 += v62;
                v56 += v54;
              }
              while (v58 != v55);
            }
            if (++v52 == a2) {
              goto LABEL_52;
            }
          }
          int v75 = 436;
          goto LABEL_59;
        }
      }
      int v73 = 436;
      long long v74 = "this->num_rows_ == A.num_rows_";
      goto LABEL_56;
    }
    uint64_t v20 = a2;
    bzero(v94, a2);
  }
  uint64_t v21 = 0;
  uint64_t v22 = *(void *)(a3 + 32);
  char v23 = 1;
  do
  {
    uint64_t v24 = *(int *)(v22 + 4 * v21);
    if (v19[v24])
    {
      LOWORD(v86) = 2;
      LOBYTE(v77) = 4;
      cnprint::CNLogFormatter::FormatGeneral((const void **)(a1 + 1272), "ReorderStates(): order must reference each state once and only once.");
      if (*(char *)(a1 + 1295) >= 0) {
        LOBYTE(v30) = a1 - 8;
      }
      else {
        uint64_t v30 = *(void *)(a1 + 1272);
      }
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v86, (unsigned __int8 *)&v77, "%s", v25, v26, v27, v28, v29, v30);
      uint64_t v22 = *(void *)(a3 + 32);
      uint64_t v19 = v93;
      uint64_t v24 = *(int *)(v22 + 4 * v21);
    }
    v19[v24] = 1;
    ++v21;
  }
  while (v20 != v21);
  goto LABEL_29;
}

void sub_18E07E680(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_18E06B5D4((void *)(v4 - 232));
  sub_18E06B5D4((uint64_t *)va);
  _Unwind_Resume(a1);
}

double sub_18E07E6AC(void *a1, unsigned int a2)
{
  a1[3] = 0x10000001ALL;
  a1[4] = 0;
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1EDD186D8;
  if ((a2 & 0x80000000) != 0) {
    __assert_rtn("CNMatrix", "cnmatrix.h", 419, "nr >= 0");
  }
  int32x4_t v2 = vdupq_lane_s32((int32x2_t)(a2 | 0x100000000), 0);
  v2.i32[1] = 1;
  *(int32x4_t *)(a1 + 1) = v2;
  a1[4] = a1 + 5;
  return *(double *)v2.i64;
}

void sub_18E07E748(_Unwind_Exception *a1)
{
  *unsigned int v1 = &unk_1EDD174A8;
  _Unwind_Resume(a1);
}

uint64_t sub_18E07E768(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 24) = 0x10000001ALL;
  *(_OWORD *)(a1 + 8) = xmmword_18E1FD600;
  *(void *)(a1 + 32) = a1 + 40;
  *(void *)a1 = &unk_1EDD16BA8;
  *(void *)(a1 + 144) = a2;
  *(void *)(a1 + 176) = 0x10000001ALL;
  *(void *)(a1 + 152) = &unk_1EDD186D8;
  *(_OWORD *)(a1 + 160) = xmmword_18E1FD600;
  *(void *)(a1 + 184) = a1 + 192;
  sub_18DFEEA3C(a1 + 152, a3);
  int v6 = *(_DWORD *)(a1 + 160);
  int v5 = *(_DWORD *)(a1 + 164);
  *(_DWORD *)(a1 + 8) = v6;
  *(_DWORD *)(a1 + 12) = v5;
  uint64_t v7 = (v5 * v6);
  *(_DWORD *)(a1 + 16) = v7;
  *(_DWORD *)(a1 + 20) = v6;
  if ((int)v7 >= 1)
  {
    int v8 = *(int **)(a1 + 184);
    uint64_t v9 = *(void *)(a2 + 32);
    int v10 = *(_DWORD **)(a1 + 32);
    do
    {
      uint64_t v11 = *v8++;
      *v10++ = *(_DWORD *)(v9 + 4 * v11);
      --v7;
    }
    while (v7);
  }
  return a1;
}

void sub_18E07E840(void *a1)
{
  a1[19] = &unk_1EDD174A8;
  *a1 = &unk_1EDD174A8;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E07E890(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v17 = 0x100000001;
  uint64_t v15 = &unk_1EDD18078;
  *(void *)&long long v3 = 0x100000001;
  *((void *)&v3 + 1) = 0x100000001;
  long long v16 = v3;
  int32x4_t v18 = &v19;
  int v19 = a3;
  int v4 = *(_DWORD *)(a2 + 12);
  uint64_t v12 = 0x10000001ALL;
  uint64_t v7 = &unk_1EDD186D8;
  int v8 = v4;
  int v9 = 1;
  int v10 = v4;
  int v11 = v4;
  uint64_t v13 = v14;
  if (v4)
  {
    for (int i = 0; i != v4; ++i)
      v14[i] = i;
  }
  return sub_18E07AF98(a1, a2, (uint64_t)&v15, (uint64_t)&v7);
}

uint64_t sub_18E07E950(uint64_t a1, uint64_t a2, int a3)
{
  int v5 = *(_DWORD *)(a2 + 8);
  uint64_t v30 = 0x10000001ALL;
  uint64_t v25 = &unk_1EDD186D8;
  int v26 = v5;
  int v27 = 1;
  int v28 = v5;
  int v29 = v5;
  uint64_t v31 = v32;
  if (v5)
  {
    for (int i = 0; i != v5; ++i)
      v32[i] = i;
  }
  uint64_t v22 = 0x100000001;
  uint64_t v20 = &unk_1EDD18078;
  *(void *)&long long v7 = 0x100000001;
  *((void *)&v7 + 1) = 0x100000001;
  long long v21 = v7;
  char v23 = &v24;
  int v24 = a3;
  *(void *)(a1 + 24) = 0x10000001ALL;
  *(_OWORD *)(a1 + 8) = xmmword_18E1FD600;
  *(void *)(a1 + 32) = a1 + 40;
  *(void *)a1 = &unk_1EDD16428;
  *(void *)(a1 + 280) = 0x10000001ALL;
  *(void *)(a1 + 248) = a2;
  *(void *)(a1 + 256) = &unk_1EDD186D8;
  *(_OWORD *)(a1 + 264) = xmmword_18E1FD600;
  *(void *)(a1 + 288) = a1 + 296;
  *(void *)(a1 + 424) = 0x100000001;
  *(void *)(a1 + 400) = &unk_1EDD18078;
  *(_OWORD *)(a1 + 408) = v7;
  *(void *)(a1 + 432) = a1 + 440;
  sub_18DFEEA3C(a1 + 256, (uint64_t)&v25);
  uint64_t result = sub_18DFEEA3C(a1 + 400, (uint64_t)&v20);
  uint64_t v9 = *(unsigned int *)(a1 + 272);
  uint64_t v10 = *(unsigned int *)(a1 + 416);
  *(_DWORD *)(a1 + 8) = v9;
  *(_DWORD *)(a1 + 12) = v10;
  *(_DWORD *)(a1 + 16) = v10 * v9;
  *(_DWORD *)(a1 + 20) = v9;
  if (v10)
  {
    unsigned int v11 = 0;
    uint64_t v12 = 0;
    int v13 = *(_DWORD *)(a2 + 20);
    uint64_t v14 = *(void *)(a2 + 32);
    do
    {
      if (v9)
      {
        uint64_t v15 = *(int **)(a1 + 288);
        int v16 = *(_DWORD *)(*(void *)(a1 + 432) + 4 * v12) * v13;
        uint64_t v17 = *(void *)(a1 + 32);
        unsigned int v18 = v11;
        uint64_t result = v9;
        do
        {
          int v19 = *v15++;
          *(void *)(v17 + 8 * v18++) = *(void *)(v14 + 8 * (v19 + v16));
          --result;
        }
        while (result);
      }
      ++v12;
      v11 += v9;
    }
    while (v12 != v10);
  }
  return result;
}

void *sub_18E07EB3C(void *result)
{
  result[50] = &unk_1EDD174A8;
  result[32] = &unk_1EDD174A8;
  *uint64_t result = &unk_1EDD17478;
  return result;
}

void *sub_18E07EB9C(void *result)
{
  *uint64_t result = &unk_1EDD17448;
  return result;
}

void sub_18E07EBBC(void *a1)
{
  *a1 = &unk_1EDD17448;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E07EBEC(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E07EBF8(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  unsigned int v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    unsigned int v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      int v4 = *(_DWORD *)(a1 + 16);
      int v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        uint64_t v6 = (v4 - 1);
        uint64_t v7 = *(void *)(a1 + 32);
        uint64_t v8 = 1;
        do
        {
          uint64_t v9 = &v13[v8];
          if (!v13[v8])
          {
            char v10 = *(unsigned char *)(v7 + v8);
            int v11 = v8;
            do
            {
              int v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              char v12 = *(unsigned char *)(v7 + v11);
              *(unsigned char *)(v7 + v11) = v10;
              *uint64_t v9 = 1;
              uint64_t v9 = &v13[v11];
              char v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

void sub_18E07ECF8(void *a1)
{
  a1[50] = &unk_1EDD174A8;
  a1[32] = &unk_1EDD174A8;
  *a1 = &unk_1EDD17478;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E07ED68(uint64_t result, uint64_t a2)
{
  *(void *)(result + 24) = 0x10000001ALL;
  *(void *)(result + 32) = 0;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)uint64_t result = &unk_1EDD186D8;
  if (result == a2)
  {
    uint64_t v15 = "this != &(A)";
    int v16 = 603;
    goto LABEL_16;
  }
  int v2 = *(_DWORD *)(a2 + 8);
  int v3 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(result + 8) = v2;
  *(_DWORD *)(result + 12) = v3;
  uint64_t v4 = (v3 * v2);
  *(_DWORD *)(result + 16) = v4;
  *(_DWORD *)(result + 20) = v2;
  int v5 = (_DWORD *)(result + 40);
  *(void *)(result + 32) = result + 40;
  if (*(_DWORD *)(a2 + 8) > 0x1Au)
  {
    uint64_t v15 = "this->max_num_rows_ >= A.num_rows_";
    int v16 = 616;
    goto LABEL_16;
  }
  if (*(_DWORD *)(a2 + 12) >= 2u)
  {
    uint64_t v15 = "this->max_num_cols_ >= A.num_cols_";
    int v16 = 617;
LABEL_16:
    __assert_rtn("CNMatrix", "cnmatrix.h", v16, v15);
  }
  int v6 = *(_DWORD *)(a2 + 16);
  if (v6 > 3)
  {
    uint64_t v9 = (v6 - 1);
    char v10 = *(int **)(a2 + 32);
    int v11 = v10;
    char v12 = (_DWORD *)(result + 40);
    uint64_t v13 = v9;
    do
    {
      int v14 = *v11++;
      *v12++ = v14;
      --v13;
    }
    while (v13);
    v5[v9] = v10[v9];
  }
  else if ((int)v4 >= 1)
  {
    uint64_t v7 = *(int **)(a2 + 32);
    do
    {
      int v8 = *v7++;
      *v5++ = v8;
      --v4;
    }
    while (v4);
  }
  return result;
}

void sub_18E07EE90(_Unwind_Exception *a1)
{
  *unsigned int v1 = &unk_1EDD174A8;
  _Unwind_Resume(a1);
}

void sub_18E07EEB0(void *a1)
{
  *a1 = &unk_1EDD174A8;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E07EEE0(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E07EEEC(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  unsigned int v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    unsigned int v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      int v4 = *(_DWORD *)(a1 + 16);
      int v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        uint64_t v6 = (v4 - 1);
        uint64_t v7 = *(void *)(a1 + 32);
        uint64_t v8 = 1;
        do
        {
          uint64_t v9 = &v13[v8];
          if (!v13[v8])
          {
            int v10 = *(_DWORD *)(v7 + 4 * v8);
            int v11 = v8;
            do
            {
              int v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              int v12 = *(_DWORD *)(v7 + 4 * v11);
              *(_DWORD *)(v7 + 4 * v11) = v10;
              *uint64_t v9 = 1;
              uint64_t v9 = &v13[v11];
              int v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

uint64_t sub_18E07EFE4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 24) = 0x10000001ALL;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)uint64_t result = &unk_1EDD186D8;
  int v3 = *(_DWORD *)(a2 + 8);
  int v2 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(result + 8) = v3;
  *(_DWORD *)(result + 12) = v2;
  uint64_t v4 = (v2 * v3);
  *(_DWORD *)(result + 16) = v4;
  *(_DWORD *)(result + 20) = v3;
  int v5 = (_DWORD *)(result + 40);
  *(void *)(result + 32) = result + 40;
  if (*(_DWORD *)(a2 + 8) > 0x1Au)
  {
    uint64_t v8 = "this->max_num_rows_ >= A.NumRows()";
    int v9 = 567;
    goto LABEL_9;
  }
  if (*(_DWORD *)(a2 + 12) > 1u)
  {
    uint64_t v8 = "this->max_num_cols_ >= A.NumCols()";
    int v9 = 568;
LABEL_9:
    __assert_rtn("CNMatrix", "cnmatrix.h", v9, v8);
  }
  if ((int)v4 >= 1)
  {
    uint64_t v6 = *(int **)(a2 + 32);
    do
    {
      int v7 = *v6++;
      *v5++ = v7;
      --v4;
    }
    while (v4);
  }
  return result;
}

void sub_18E07F0B4(_Unwind_Exception *a1)
{
  *unsigned int v1 = &unk_1EDD174A8;
  _Unwind_Resume(a1);
}

void sub_18E07F0D4(void *a1)
{
  *a1 = &unk_1EDD174A8;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E07F104(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E07F110(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  unsigned int v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    unsigned int v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      int v4 = *(_DWORD *)(a1 + 16);
      int v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        uint64_t v6 = (v4 - 1);
        uint64_t v7 = *(void *)(a1 + 32);
        uint64_t v8 = 1;
        do
        {
          int v9 = &v13[v8];
          if (!v13[v8])
          {
            int v10 = *(_DWORD *)(v7 + 4 * v8);
            int v11 = v8;
            do
            {
              int v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              int v12 = *(_DWORD *)(v7 + 4 * v11);
              *(_DWORD *)(v7 + 4 * v11) = v10;
              *int v9 = 1;
              int v9 = &v13[v11];
              int v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

void sub_18E07F208(void *a1)
{
  *a1 = &unk_1EDD174A8;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E07F238(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E07F244(uint64_t a1)
{
  sub_18DFE2870(a1, v1);
}

void sub_18E07F26C(uint64_t a1)
{
  *(void *)(a1 + 24) = 0x100002324;
  *(void *)a1 = &unk_1EDD19C38;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 8) = xmmword_18E1FD9A0;
  sub_18E07F488();
}

void sub_18E07F2D4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = v1[5];
  v1[5] = 0;
  if (v3) {
    MEMORY[0x192FA6220](v3, 0x1000C8000313F17);
  }
  *unsigned int v1 = &unk_1EDD17478;
  _Unwind_Resume(exception_object);
}

void sub_18E07F31C(void *a1)
{
  sub_18E07F50C(a1);

  JUMPOUT(0x192FA6240);
}

void sub_18E07F354()
{
}

void sub_18E07F380()
{
}

void sub_18E07F488()
{
}

void *sub_18E07F50C(void *a1)
{
  *a1 = &unk_1EDD19C38;
  uint64_t v2 = a1[5];
  a1[5] = 0;
  if (v2) {
    MEMORY[0x192FA6220](v2, 0x1000C8000313F17);
  }
  *a1 = &unk_1EDD17478;
  return a1;
}

void *sub_18E07F588(void *result)
{
  *uint64_t result = &unk_1EDD174D8;
  return result;
}

void sub_18E07F5A8(void *a1)
{
  *a1 = &unk_1EDD174D8;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E07F5D8(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E07F5E4(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  unsigned int v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    unsigned int v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      int v4 = *(_DWORD *)(a1 + 16);
      int v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        uint64_t v6 = (v4 - 1);
        uint64_t v7 = *(void *)(a1 + 32);
        uint64_t v8 = 1;
        do
        {
          int v9 = &v13[v8];
          if (!v13[v8])
          {
            int v10 = *(_DWORD *)(v7 + 4 * v8);
            int v11 = v8;
            do
            {
              int v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              int v12 = *(_DWORD *)(v7 + 4 * v11);
              *(_DWORD *)(v7 + 4 * v11) = v10;
              *int v9 = 1;
              int v9 = &v13[v11];
              int v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

__n128 sub_18E07F6DC(uint64_t a1, uint64_t a2)
{
  result.n128_u64[0] = 0x10000001ALL;
  *(void *)(a1 + 24) = 0x10000001ALL;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1EDD186A8;
  if (a1 == a2)
  {
    uint64_t v17 = "this != &(A)";
    int v18 = 603;
    goto LABEL_16;
  }
  int v3 = *(_DWORD *)(a2 + 8);
  int v4 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = v4;
  uint64_t v5 = (v4 * v3);
  *(_DWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 20) = v3;
  uint64_t v6 = (unint64_t *)(a1 + 40);
  *(void *)(a1 + 32) = a1 + 40;
  if (*(_DWORD *)(a2 + 8) > 0x1Au)
  {
    uint64_t v17 = "this->max_num_rows_ >= A.num_rows_";
    int v18 = 616;
    goto LABEL_16;
  }
  if (*(_DWORD *)(a2 + 12) >= 2u)
  {
    uint64_t v17 = "this->max_num_cols_ >= A.num_cols_";
    int v18 = 617;
LABEL_16:
    __assert_rtn("CNMatrix", "cnmatrix.h", v18, v17);
  }
  int v7 = *(_DWORD *)(a2 + 16);
  if (v7 > 3)
  {
    uint64_t v10 = (v7 - 2);
    int v11 = *(long long **)(a2 + 32);
    uint64_t v12 = (v7 - 1) >> 1;
    uint64_t v13 = v11;
    uint64_t v14 = (_OWORD *)(a1 + 40);
    do
    {
      long long v15 = *v13++;
      *v14++ = v15;
      --v12;
    }
    while (v12);
    uint64_t v16 = v10;
    __n128 result = *(__n128 *)((char *)v11 + v16 * 8);
    *(__n128 *)&v6[v16] = result;
  }
  else if ((int)v5 >= 1)
  {
    uint64_t v8 = *(unint64_t **)(a2 + 32);
    do
    {
      unint64_t v9 = *v8++;
      result.n128_u64[0] = v9;
      *v6++ = v9;
      --v5;
    }
    while (v5);
  }
  return result;
}

void sub_18E07F80C(_Unwind_Exception *a1)
{
  *unsigned int v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

void sub_18E07F82C(void *a1)
{
  *a1 = &unk_1EDD17478;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E07F85C(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E07F868(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  unsigned int v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    unsigned int v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      int v4 = *(_DWORD *)(a1 + 16);
      int v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        uint64_t v6 = (v4 - 1);
        uint64_t v7 = *(void *)(a1 + 32);
        uint64_t v8 = 1;
        do
        {
          unint64_t v9 = &v13[v8];
          if (!v13[v8])
          {
            uint64_t v10 = *(void *)(v7 + 8 * v8);
            int v11 = v8;
            do
            {
              int v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              uint64_t v12 = *(void *)(v7 + 8 * v11);
              *(void *)(v7 + 8 * v11) = v10;
              *unint64_t v9 = 1;
              unint64_t v9 = &v13[v11];
              uint64_t v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

void sub_18E07F960(void *a1)
{
  *a1 = &unk_1EDD17478;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E07F990(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E07F99C(uint64_t a1)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  sub_18DEF3CF4(a1, v1);
}

void sub_18E07F9EC(void *a1)
{
  *a1 = &unk_1EDD17478;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E07FA1C(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E07FA28(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  unsigned int v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    unsigned int v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      int v4 = *(_DWORD *)(a1 + 16);
      int v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        uint64_t v6 = (v4 - 1);
        uint64_t v7 = *(void *)(a1 + 32);
        uint64_t v8 = 1;
        do
        {
          unint64_t v9 = &v13[v8];
          if (!v13[v8])
          {
            uint64_t v10 = *(void *)(v7 + 8 * v8);
            int v11 = v8;
            do
            {
              int v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              uint64_t v12 = *(void *)(v7 + 8 * v11);
              *(void *)(v7 + 8 * v11) = v10;
              *unint64_t v9 = 1;
              unint64_t v9 = &v13[v11];
              uint64_t v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

double sub_18E07FB20(uint64_t a1, uint64_t a2)
{
  *(void *)&double result = 0x10000001CLL;
  *(void *)(a1 + 24) = 0x10000001CLL;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1EDD188B8;
  int v4 = *(_DWORD *)(a2 + 8);
  int v3 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v5 = (v3 * v4);
  *(_DWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 20) = v4;
  uint64_t v6 = (double *)(a1 + 40);
  *(void *)(a1 + 32) = a1 + 40;
  if (*(_DWORD *)(a2 + 8) > 0x1Cu)
  {
    unint64_t v9 = "this->max_num_rows_ >= A.NumRows()";
    int v10 = 567;
    goto LABEL_9;
  }
  if (*(_DWORD *)(a2 + 12) > 1u)
  {
    unint64_t v9 = "this->max_num_cols_ >= A.NumCols()";
    int v10 = 568;
LABEL_9:
    __assert_rtn("CNMatrix", "cnmatrix.h", v10, v9);
  }
  if ((int)v5 >= 1)
  {
    uint64_t v7 = *(double **)(a2 + 32);
    do
    {
      double v8 = *v7++;
      double result = v8;
      *v6++ = v8;
      --v5;
    }
    while (v5);
  }
  return result;
}

void sub_18E07FBF0(_Unwind_Exception *a1)
{
  *unsigned int v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

double sub_18E07FC10(uint64_t a1, uint64_t a2)
{
  *(void *)&double result = 0x10000001ALL;
  *(void *)(a1 + 24) = 0x10000001ALL;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1EDD186A8;
  int v4 = *(_DWORD *)(a2 + 8);
  int v3 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = v3;
  uint64_t v5 = (v3 * v4);
  *(_DWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 20) = v4;
  uint64_t v6 = (double *)(a1 + 40);
  *(void *)(a1 + 32) = a1 + 40;
  if (*(_DWORD *)(a2 + 8) > 0x1Au)
  {
    unint64_t v9 = "this->max_num_rows_ >= A.NumRows()";
    int v10 = 567;
    goto LABEL_9;
  }
  if (*(_DWORD *)(a2 + 12) > 1u)
  {
    unint64_t v9 = "this->max_num_cols_ >= A.NumCols()";
    int v10 = 568;
LABEL_9:
    __assert_rtn("CNMatrix", "cnmatrix.h", v10, v9);
  }
  if ((int)v5 >= 1)
  {
    uint64_t v7 = *(double **)(a2 + 32);
    do
    {
      double v8 = *v7++;
      double result = v8;
      *v6++ = v8;
      --v5;
    }
    while (v5);
  }
  return result;
}

void sub_18E07FCE0(_Unwind_Exception *a1)
{
  *unsigned int v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

void sub_18E07FD00(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 24) = 0x1A0000001ALL;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1EDD18768;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  int v2 = *(_DWORD *)(a2 + 8);
  int v3 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 8) = v2;
  *(_DWORD *)(a1 + 12) = v3;
  *(_DWORD *)(a1 + 16) = v3 * v2;
  *(_DWORD *)(a1 + 20) = v2;
  sub_18E06B6B8();
}

void sub_18E07FDF8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = v1[5];
  v1[5] = 0;
  if (v3) {
    MEMORY[0x192FA6220](v3, 0x1000C8000313F17);
  }
  *unsigned int v1 = &unk_1EDD17478;
  _Unwind_Resume(exception_object);
}

void sub_18E07FE40(void *a1)
{
  a1[64] = &unk_1EDD174A8;
  a1[58] = &unk_1EDD174A8;
  *a1 = &unk_1EDD17478;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E07FEB0(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E07FEBC(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  unsigned int v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    unsigned int v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      int v4 = *(_DWORD *)(a1 + 16);
      int v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        uint64_t v6 = (v4 - 1);
        uint64_t v7 = *(void *)(a1 + 32);
        uint64_t v8 = 1;
        do
        {
          unint64_t v9 = &v13[v8];
          if (!v13[v8])
          {
            uint64_t v10 = *(void *)(v7 + 8 * v8);
            int v11 = v8;
            do
            {
              int v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              uint64_t v12 = *(void *)(v7 + 8 * v11);
              *(void *)(v7 + 8 * v11) = v10;
              *unint64_t v9 = 1;
              unint64_t v9 = &v13[v11];
              uint64_t v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

void sub_18E07FFB4(void *a1)
{
  *a1 = &unk_1EDD17478;
  JUMPOUT(0x192FA6240);
}

void sub_18E07FFE4(void *a1)
{
  a1[76] = &unk_1EDD174A8;
  a1[58] = &unk_1EDD174A8;
  *a1 = &unk_1EDD17478;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E080054(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E080060(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  unsigned int v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    unsigned int v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      int v4 = *(_DWORD *)(a1 + 16);
      int v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        uint64_t v6 = (v4 - 1);
        uint64_t v7 = *(void *)(a1 + 32);
        uint64_t v8 = 1;
        do
        {
          unint64_t v9 = &v13[v8];
          if (!v13[v8])
          {
            uint64_t v10 = *(void *)(v7 + 8 * v8);
            int v11 = v8;
            do
            {
              int v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              uint64_t v12 = *(void *)(v7 + 8 * v11);
              *(void *)(v7 + 8 * v11) = v10;
              *unint64_t v9 = 1;
              unint64_t v9 = &v13[v11];
              uint64_t v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

void sub_18E080158(void *a1)
{
  *a1 = &unk_1EDD17478;
  JUMPOUT(0x192FA6240);
}

uint64_t **sub_18E080188(uint64_t **a1, unint64_t a2, uint64_t **a3)
{
  uint64_t v6 = a1 + 1;
  int v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v5;
        unint64_t v8 = v5[4];
        if (v8 <= a2) {
          break;
        }
        int v5 = *v7;
        uint64_t v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      int v5 = v7[1];
      if (!v5)
      {
        uint64_t v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v7 = a1 + 1;
LABEL_9:
    unint64_t v9 = (uint64_t *)v7;
    uint64_t v7 = (uint64_t **)operator new(0x30uLL);
    v7[4] = *a3;
    *((_DWORD *)v7 + 10) = 0;
    *uint64_t v7 = 0;
    v7[1] = 0;
    v7[2] = v9;
    *uint64_t v6 = (uint64_t *)v7;
    uint64_t v10 = (uint64_t *)**a1;
    int v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      int v11 = *v6;
    }
    sub_18DEEDADC(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

void sub_18E080258(void *a1)
{
  *a1 = &unk_1EDD174A8;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E080288(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E080294(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  unsigned int v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    unsigned int v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      int v4 = *(_DWORD *)(a1 + 16);
      int v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        uint64_t v6 = (v4 - 1);
        uint64_t v7 = *(void *)(a1 + 32);
        uint64_t v8 = 1;
        do
        {
          unint64_t v9 = &v13[v8];
          if (!v13[v8])
          {
            int v10 = *(_DWORD *)(v7 + 4 * v8);
            int v11 = v8;
            do
            {
              int v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              int v12 = *(_DWORD *)(v7 + 4 * v11);
              *(_DWORD *)(v7 + 4 * v11) = v10;
              *unint64_t v9 = 1;
              unint64_t v9 = &v13[v11];
              int v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

void sub_18E08038C(void *a1)
{
  *a1 = &unk_1EDD174A8;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E0803BC(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E0803C8(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  unsigned int v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    unsigned int v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      int v4 = *(_DWORD *)(a1 + 16);
      int v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        uint64_t v6 = (v4 - 1);
        uint64_t v7 = *(void *)(a1 + 32);
        uint64_t v8 = 1;
        do
        {
          unint64_t v9 = &v13[v8];
          if (!v13[v8])
          {
            int v10 = *(_DWORD *)(v7 + 4 * v8);
            int v11 = v8;
            do
            {
              int v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              int v12 = *(_DWORD *)(v7 + 4 * v11);
              *(_DWORD *)(v7 + 4 * v11) = v10;
              *unint64_t v9 = 1;
              unint64_t v9 = &v13[v11];
              int v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

void sub_18E0804C0(void *a1)
{
  *a1 = &unk_1EDD174A8;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E0804F0(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E0804FC(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    unsigned int v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      int v4 = *(_DWORD *)(a1 + 16);
      int v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        uint64_t v6 = (v4 - 1);
        uint64_t v7 = *(void *)(a1 + 32);
        uint64_t v8 = 1;
        do
        {
          unint64_t v9 = &v13[v8];
          if (!v13[v8])
          {
            int v10 = *(_DWORD *)(v7 + 4 * v8);
            int v11 = v8;
            do
            {
              int v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              int v12 = *(_DWORD *)(v7 + 4 * v11);
              *(_DWORD *)(v7 + 4 * v11) = v10;
              *unint64_t v9 = 1;
              unint64_t v9 = &v13[v11];
              int v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

void sub_18E0805C8(uint64_t a1)
{
  *(void *)(a1 + 24) = 0x1700000017;
  *(void *)a1 = &unk_1EDD18588;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 8) = xmmword_18E1FD9B0;
  sub_18E06B4E4();
}

void sub_18E08062C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = v1[5];
  v1[5] = 0;
  if (v3) {
    MEMORY[0x192FA6220](v3, 0x1000C8000313F17);
  }
  *unsigned int v1 = &unk_1EDD17478;
  _Unwind_Resume(exception_object);
}

uint64_t sub_18E080674(uint64_t a1)
{
  *(void *)(a1 + 24) = 0x200000002;
  *(void *)a1 = &unk_1EDD18BB8;
  *(void *)(a1 + 32) = a1 + 40;
  *(_OWORD *)(a1 + 8) = xmmword_18E1FD1B0;
  return sub_18DFE2CC8(a1, 0.0);
}

void sub_18E0806B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 24) = 0x200000002;
  *(void *)a1 = &unk_1EDD18BB8;
  *(_OWORD *)(a1 + 8) = xmmword_18E1FD1B0;
  *(void *)(a1 + 32) = a1 + 40;
  sub_18DFE2B44(a2, a3, a1);
}

void sub_18E08071C(_Unwind_Exception *a1)
{
  *unsigned int v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

void sub_18E08073C(uint64_t a1)
{
}

void sub_18E08077C(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = 0x100000006;
  uint64_t v7 = &unk_1EDD19728;
  long long v8 = xmmword_18E1FD770;
  int v10 = &v11;
  uint64_t v4 = 0x600000006;
  int v2 = &unk_1EDD197B8;
  long long v3 = xmmword_18E1F8570;
  int v5 = &v6;
  *(void *)(a1 + 24) = 0x600000006;
  *(void *)a1 = &unk_1EDD197B8;
  *(_OWORD *)(a1 + 8) = xmmword_18E1F8570;
  *(void *)(a1 + 32) = a1 + 40;
  sub_18E06EA40(a2, (uint64_t)&v7, (uint64_t)&v2, a1);
}

void sub_18E080864(_Unwind_Exception *a1)
{
  *unsigned int v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

void sub_18E080884(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 24) = 0x600000006;
  *(void *)a1 = &unk_1EDD197B8;
  *(_OWORD *)(a1 + 8) = xmmword_18E1F8570;
  *(void *)(a1 + 32) = a1 + 40;
  uint64_t v9 = 0x100000006;
  uint64_t v7 = &unk_1EDD19758;
  long long v8 = xmmword_18E1FD770;
  int v10 = &v11;
  uint64_t v4 = 0x100000018;
  int v2 = &unk_1EDD18618;
  long long v3 = xmmword_18E1FD9C0;
  int v5 = &v6;
  sub_18E01BFEC(a2, (uint64_t)&v7, (uint64_t)&v2, a1);
}

void sub_18E08097C(_Unwind_Exception *a1)
{
  *unsigned int v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

void sub_18E08099C(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 24) = 0x600000006;
  *(void *)a1 = &unk_1EDD197B8;
  *(_OWORD *)(a1 + 8) = xmmword_18E1F8570;
  *(void *)(a1 + 32) = a1 + 40;
  BOOL v2 = 0;
  sub_18DFEEFE8(a2, a1, &v2);
}

void sub_18E080A10(_Unwind_Exception *a1)
{
  *unsigned int v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

void sub_18E080A30(uint64_t a1, int a2, int a3)
{
  *(void *)(a1 + 24) = 0x1700000017;
  *(void *)a1 = &unk_1EDD18588;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = a3;
  *(_DWORD *)(a1 + 16) = a3 * a2;
  *(_DWORD *)(a1 + 20) = a2;
  sub_18E06B4E4();
}

void sub_18E080A94(_Unwind_Exception *exception_object)
{
  uint64_t v3 = v1[5];
  v1[5] = 0;
  if (v3) {
    MEMORY[0x192FA6220](v3, 0x1000C8000313F17);
  }
  *unsigned int v1 = &unk_1EDD17478;
  _Unwind_Resume(exception_object);
}

void *sub_18E080ADC(void *result)
{
  *double result = &unk_1EDD17478;
  return result;
}

void sub_18E080AFC(void *a1)
{
  *a1 = &unk_1EDD17478;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E080B2C(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E080B38(uint64_t a1)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  sub_18DEF3CF4(a1, v1);
}

void sub_18E080B88(void *a1)
{
  *a1 = &unk_1EDD174A8;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E080BB8(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E080BC4(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  unsigned int v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    unsigned int v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      int v4 = *(_DWORD *)(a1 + 16);
      int v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        uint64_t v6 = (v4 - 1);
        uint64_t v7 = *(void *)(a1 + 32);
        uint64_t v8 = 1;
        do
        {
          uint64_t v9 = &v13[v8];
          if (!v13[v8])
          {
            int v10 = *(_DWORD *)(v7 + 4 * v8);
            int v11 = v8;
            do
            {
              int v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              int v12 = *(_DWORD *)(v7 + 4 * v11);
              *(_DWORD *)(v7 + 4 * v11) = v10;
              *uint64_t v9 = 1;
              uint64_t v9 = &v13[v11];
              int v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

void sub_18E080CBC(void *a1)
{
  *a1 = &unk_1EDD17298;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E080CEC(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E080CF8(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    unsigned int v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      int v4 = *(_DWORD *)(a1 + 16);
      int v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        uint64_t v6 = (v4 - 1);
        uint64_t v7 = 1;
        do
        {
          uint64_t v8 = &v13[v7];
          if (!v13[v7])
          {
            uint64_t v9 = *(void *)(*(void *)(a1 + 32) + 8 * v7);
            int v10 = v7;
            do
            {
              int v10 = (int)(v10 * (v3 + v1 - v5)) % (int)v6;
              uint64_t v11 = *(void *)(a1 + 32);
              uint64_t v12 = *(void *)(v11 + 8 * v10);
              *(void *)(v11 + 8 * v10) = v9;
              *uint64_t v8 = 1;
              uint64_t v8 = &v13[v10];
              uint64_t v9 = v12;
            }
            while (!*v8);
          }
          ++v7;
        }
        while (v7 != v6);
      }
    }
  }
}

uint64_t sub_18E080DD0(uint64_t a1)
{
  *(void *)(a1 + 24) = 0x100000012;
  *(void *)a1 = &unk_1EDD17BF8;
  *(void *)(a1 + 32) = a1 + 40;
  *(_OWORD *)(a1 + 8) = xmmword_18E1FD8A0;
  return sub_18DFE2CC8(a1, 0.0);
}

void *sub_18E080E14(void *result)
{
  *double result = &unk_1EDD17478;
  return result;
}

uint64_t sub_18E080E34(uint64_t a1)
{
  *(void *)(a1 + 24) = 0x1200000013;
  *(void *)a1 = &unk_1EDD17C58;
  *(void *)(a1 + 32) = a1 + 40;
  *(_OWORD *)(a1 + 8) = xmmword_18E1FD9D0;
  return sub_18DFE2CC8(a1, 0.0);
}

uint64_t sub_18E080E78(uint64_t a1)
{
  *(void *)(a1 + 24) = 0x1300000012;
  *(void *)a1 = &unk_1EDD17BC8;
  *(void *)(a1 + 32) = a1 + 40;
  *(_OWORD *)(a1 + 8) = xmmword_18E1FD9E0;
  return sub_18DFE2CC8(a1, 0.0);
}

void sub_18E080EBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 24) = 0x1200000012;
  *(void *)a1 = &unk_1EDD17B98;
  *(_OWORD *)(a1 + 8) = xmmword_18E1FD8C0;
  *(void *)(a1 + 32) = a1 + 40;
  sub_18DFE2B44(a2, a3, a1);
}

void sub_18E080F24(_Unwind_Exception *a1)
{
  *unsigned int v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

void sub_18E080F44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 24) = 0x1300000012;
  *(void *)a1 = &unk_1EDD17BC8;
  *(_OWORD *)(a1 + 8) = xmmword_18E1FD9E0;
  *(void *)(a1 + 32) = a1 + 40;
  sub_18DFE2B44(a2, a3, a1);
}

void sub_18E080FB0(_Unwind_Exception *a1)
{
  *unsigned int v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

void *sub_18E080FD0(void *result)
{
  *double result = &unk_1EDD17478;
  return result;
}

void sub_18E080FF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 24) = 0xF00000012;
  *(void *)a1 = &unk_1EDD17B68;
  *(_OWORD *)(a1 + 8) = xmmword_18E1FD8B0;
  *(void *)(a1 + 32) = a1 + 40;
  sub_18DFE2B44(a2, a3, a1);
}

void sub_18E08105C(_Unwind_Exception *a1)
{
  *unsigned int v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

double sub_18E08107C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 24) = 0x100000012;
  *(void *)a1 = &unk_1EDD17BF8;
  *(_OWORD *)(a1 + 8) = xmmword_18E1FD8A0;
  *(void *)(a1 + 32) = a1 + 40;
  *(void *)&double result = *(_OWORD *)&sub_18DFEF1F4(a2, a3, a1);
  return result;
}

void sub_18E0810E8(_Unwind_Exception *a1)
{
  *unsigned int v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

void sub_18E081108(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 24) = 0x100000012;
  *(void *)a1 = &unk_1EDD17BF8;
  *(_OWORD *)(a1 + 8) = xmmword_18E1FD8A0;
  *(void *)(a1 + 32) = a1 + 40;
  sub_18DFE2B44(a2, a3, a1);
}

void sub_18E081174(_Unwind_Exception *a1)
{
  *unsigned int v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

void sub_18E081194(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 24) = 0x100000012;
  *(void *)a1 = &unk_1EDD17BF8;
  *(_OWORD *)(a1 + 8) = xmmword_18E1FD8A0;
  *(void *)(a1 + 32) = a1 + 40;
  sub_18DFE2B44(a2, a3, a1);
}

void sub_18E081200(_Unwind_Exception *a1)
{
  *unsigned int v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

void *sub_18E081220(void *result)
{
  *double result = &unk_1EDD17478;
  return result;
}

void *sub_18E081240(void *result)
{
  *double result = &unk_1EDD17478;
  return result;
}

void *sub_18E081260(void *result)
{
  *double result = &unk_1EDD17478;
  return result;
}

void sub_18E081280(void *a1)
{
  *a1 = &unk_1EDD17478;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E0812B0(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E0812BC(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  unsigned int v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    unsigned int v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      int v4 = *(_DWORD *)(a1 + 16);
      int v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        uint64_t v6 = (v4 - 1);
        uint64_t v7 = *(void *)(a1 + 32);
        uint64_t v8 = 1;
        do
        {
          uint64_t v9 = &v13[v8];
          if (!v13[v8])
          {
            uint64_t v10 = *(void *)(v7 + 8 * v8);
            int v11 = v8;
            do
            {
              int v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              uint64_t v12 = *(void *)(v7 + 8 * v11);
              *(void *)(v7 + 8 * v11) = v10;
              *uint64_t v9 = 1;
              uint64_t v9 = &v13[v11];
              uint64_t v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

void sub_18E0813B4(void *a1)
{
  *a1 = &unk_1EDD17478;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E0813E4(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E0813F0(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  unsigned int v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    unsigned int v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      int v4 = *(_DWORD *)(a1 + 16);
      int v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        uint64_t v6 = (v4 - 1);
        uint64_t v7 = *(void *)(a1 + 32);
        uint64_t v8 = 1;
        do
        {
          uint64_t v9 = &v13[v8];
          if (!v13[v8])
          {
            uint64_t v10 = *(void *)(v7 + 8 * v8);
            int v11 = v8;
            do
            {
              int v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              uint64_t v12 = *(void *)(v7 + 8 * v11);
              *(void *)(v7 + 8 * v11) = v10;
              *uint64_t v9 = 1;
              uint64_t v9 = &v13[v11];
              uint64_t v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

void sub_18E0814F0(void *a1)
{
  *a1 = &unk_1EDD17478;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E081520(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E08152C(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  unsigned int v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    unsigned int v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      int v4 = *(_DWORD *)(a1 + 16);
      int v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        uint64_t v6 = (v4 - 1);
        uint64_t v7 = *(void *)(a1 + 32);
        uint64_t v8 = 1;
        do
        {
          uint64_t v9 = &v13[v8];
          if (!v13[v8])
          {
            uint64_t v10 = *(void *)(v7 + 8 * v8);
            int v11 = v8;
            do
            {
              int v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              uint64_t v12 = *(void *)(v7 + 8 * v11);
              *(void *)(v7 + 8 * v11) = v10;
              *uint64_t v9 = 1;
              uint64_t v9 = &v13[v11];
              uint64_t v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

void sub_18E08162C(void *a1)
{
  *a1 = &unk_1EDD17478;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E08165C(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E081668(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  unsigned int v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    unsigned int v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      int v4 = *(_DWORD *)(a1 + 16);
      int v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        uint64_t v6 = (v4 - 1);
        uint64_t v7 = *(void *)(a1 + 32);
        uint64_t v8 = 1;
        do
        {
          uint64_t v9 = &v13[v8];
          if (!v13[v8])
          {
            uint64_t v10 = *(void *)(v7 + 8 * v8);
            int v11 = v8;
            do
            {
              int v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              uint64_t v12 = *(void *)(v7 + 8 * v11);
              *(void *)(v7 + 8 * v11) = v10;
              *uint64_t v9 = 1;
              uint64_t v9 = &v13[v11];
              uint64_t v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

void sub_18E081768(void *a1)
{
  *a1 = &unk_1EDD17478;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E081798(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E0817A4(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  unsigned int v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    unsigned int v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      int v4 = *(_DWORD *)(a1 + 16);
      int v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        uint64_t v6 = (v4 - 1);
        uint64_t v7 = *(void *)(a1 + 32);
        uint64_t v8 = 1;
        do
        {
          uint64_t v9 = &v13[v8];
          if (!v13[v8])
          {
            uint64_t v10 = *(void *)(v7 + 8 * v8);
            int v11 = v8;
            do
            {
              int v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              uint64_t v12 = *(void *)(v7 + 8 * v11);
              *(void *)(v7 + 8 * v11) = v10;
              *uint64_t v9 = 1;
              uint64_t v9 = &v13[v11];
              uint64_t v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

uint64_t sub_18E0818A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 24) = 0x100000013;
  *(_OWORD *)(a1 + 8) = xmmword_18E1FD730;
  *(void *)(a1 + 32) = a1 + 40;
  *(void *)a1 = &unk_1EDD16AB8;
  *(void *)(a1 + 192) = a2;
  *(void *)(a1 + 224) = 0x100000013;
  *(void *)(a1 + 200) = &unk_1EDD17CE8;
  *(_OWORD *)(a1 + 208) = xmmword_18E1FD730;
  *(void *)(a1 + 232) = a1 + 240;
  sub_18DFEEA3C(a1 + 200, a3);
  int v6 = *(_DWORD *)(a1 + 208);
  int v5 = *(_DWORD *)(a1 + 212);
  *(_DWORD *)(a1 + 8) = v6;
  *(_DWORD *)(a1 + 12) = v5;
  uint64_t v7 = (v5 * v6);
  *(_DWORD *)(a1 + 16) = v7;
  *(_DWORD *)(a1 + 20) = v6;
  if ((int)v7 >= 1)
  {
    uint64_t v8 = *(int **)(a1 + 232);
    uint64_t v9 = *(void *)(a2 + 32);
    uint64_t v10 = *(void **)(a1 + 32);
    do
    {
      uint64_t v11 = *v8++;
      *v10++ = *(void *)(v9 + 8 * v11);
      --v7;
    }
    while (v7);
  }
  return a1;
}

void sub_18E08197C(void *a1)
{
  a1[25] = &unk_1EDD174A8;
  *a1 = &unk_1EDD17478;
  JUMPOUT(0x192FA6240);
}

void sub_18E0819CC(void *a1)
{
  *a1 = &unk_1EDD17418;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E0819FC(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E081A08(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    unsigned int v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      int v4 = *(_DWORD *)(a1 + 16);
      int v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        uint64_t v6 = (v4 - 1);
        uint64_t v7 = 1;
        do
        {
          uint64_t v8 = &v13[v7];
          if (!v13[v7])
          {
            uint64_t v9 = *(void *)(*(void *)(a1 + 32) + 8 * v7);
            int v10 = v7;
            do
            {
              int v10 = (int)(v10 * (v3 + v1 - v5)) % (int)v6;
              uint64_t v11 = *(void *)(a1 + 32);
              uint64_t v12 = *(void *)(v11 + 8 * v10);
              *(void *)(v11 + 8 * v10) = v9;
              *uint64_t v8 = 1;
              uint64_t v8 = &v13[v10];
              uint64_t v9 = v12;
            }
            while (!*v8);
          }
          ++v7;
        }
        while (v7 != v6);
      }
    }
  }
}

void sub_18E081AD8(void *a1)
{
  *a1 = &unk_1EDD172F8;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E081B08(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E081B14(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    unsigned int v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      int v4 = *(_DWORD *)(a1 + 16);
      int v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        uint64_t v6 = (v4 - 1);
        uint64_t v7 = 1;
        do
        {
          uint64_t v8 = &v13[v7];
          if (!v13[v7])
          {
            uint64_t v9 = *(void *)(*(void *)(a1 + 32) + 8 * v7);
            int v10 = v7;
            do
            {
              int v10 = (int)(v10 * (v3 + v1 - v5)) % (int)v6;
              uint64_t v11 = *(void *)(a1 + 32);
              uint64_t v12 = *(void *)(v11 + 8 * v10);
              *(void *)(v11 + 8 * v10) = v9;
              *uint64_t v8 = 1;
              uint64_t v8 = &v13[v10];
              uint64_t v9 = v12;
            }
            while (!*v8);
          }
          ++v7;
        }
        while (v7 != v6);
      }
    }
  }
}

void *sub_18E081BEC(void *result)
{
  *double result = &unk_1EDD17478;
  return result;
}

void sub_18E081C0C(uint64_t a1, int a2, int a3)
{
  *(void *)(a1 + 24) = 0x1A0000001ALL;
  *(void *)a1 = &unk_1EDD18768;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = a3;
  *(_DWORD *)(a1 + 16) = a3 * a2;
  *(_DWORD *)(a1 + 20) = a2;
  sub_18E06B6B8();
}

void sub_18E081C70(_Unwind_Exception *exception_object)
{
  uint64_t v3 = v1[5];
  v1[5] = 0;
  if (v3) {
    MEMORY[0x192FA6220](v3, 0x1000C8000313F17);
  }
  *unsigned int v1 = &unk_1EDD17478;
  _Unwind_Resume(exception_object);
}

void sub_18E081CB8(void *a1)
{
  *a1 = &unk_1EDD17478;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E081CE8(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E081CF4(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  unsigned int v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    unsigned int v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      int v4 = *(_DWORD *)(a1 + 16);
      int v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        uint64_t v6 = (v4 - 1);
        uint64_t v7 = *(void *)(a1 + 32);
        uint64_t v8 = 1;
        do
        {
          uint64_t v9 = &v13[v8];
          if (!v13[v8])
          {
            uint64_t v10 = *(void *)(v7 + 8 * v8);
            int v11 = v8;
            do
            {
              int v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              uint64_t v12 = *(void *)(v7 + 8 * v11);
              *(void *)(v7 + 8 * v11) = v10;
              *uint64_t v9 = 1;
              uint64_t v9 = &v13[v11];
              uint64_t v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

void sub_18E081DF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 24) = 0x100000012;
  *(void *)a1 = &unk_1EDD17BF8;
  *(_OWORD *)(a1 + 8) = xmmword_18E1FD8A0;
  *(void *)(a1 + 32) = a1 + 40;
  sub_18DFE2B44(a2, a3, a1);
}

void sub_18E081E60(_Unwind_Exception *a1)
{
  *unsigned int v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

__n128 sub_18E081E80(uint64_t a1, uint64_t a2)
{
  result.n128_u64[0] = 0x10000001CLL;
  *(void *)(a1 + 24) = 0x10000001CLL;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1EDD188B8;
  if (a1 == a2)
  {
    uint64_t v17 = "this != &(A)";
    int v18 = 603;
    goto LABEL_16;
  }
  int v3 = *(_DWORD *)(a2 + 8);
  int v4 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = v4;
  uint64_t v5 = (v4 * v3);
  *(_DWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 20) = v3;
  uint64_t v6 = (unint64_t *)(a1 + 40);
  *(void *)(a1 + 32) = a1 + 40;
  if (*(_DWORD *)(a2 + 8) > 0x1Cu)
  {
    uint64_t v17 = "this->max_num_rows_ >= A.num_rows_";
    int v18 = 616;
    goto LABEL_16;
  }
  if (*(_DWORD *)(a2 + 12) >= 2u)
  {
    uint64_t v17 = "this->max_num_cols_ >= A.num_cols_";
    int v18 = 617;
LABEL_16:
    __assert_rtn("CNMatrix", "cnmatrix.h", v18, v17);
  }
  int v7 = *(_DWORD *)(a2 + 16);
  if (v7 > 3)
  {
    uint64_t v10 = (v7 - 2);
    int v11 = *(long long **)(a2 + 32);
    uint64_t v12 = (v7 - 1) >> 1;
    uint64_t v13 = v11;
    uint64_t v14 = (_OWORD *)(a1 + 40);
    do
    {
      long long v15 = *v13++;
      *v14++ = v15;
      --v12;
    }
    while (v12);
    uint64_t v16 = v10;
    __n128 result = *(__n128 *)((char *)v11 + v16 * 8);
    *(__n128 *)&v6[v16] = result;
  }
  else if ((int)v5 >= 1)
  {
    uint64_t v8 = *(unint64_t **)(a2 + 32);
    do
    {
      unint64_t v9 = *v8++;
      result.n128_u64[0] = v9;
      *v6++ = v9;
      --v5;
    }
    while (v5);
  }
  return result;
}

void sub_18E081FB0(_Unwind_Exception *a1)
{
  *unsigned int v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

void sub_18E081FD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  MEMORY[0x1F4188790](a1);
  uint64_t v106 = v26;
  int v107 = v27;
  uint64_t v29 = v28;
  uint64_t v108 = v30;
  int v32 = v31;
  uint64_t v34 = v33;
  if (a19 >= 1)
  {
    uint64_t v35 = 0;
    do
    {
      sub_18DFF2980((uint64_t)&v110, *(void *)(a11 + 32) + v35);
      v35 += 64;
    }
    while ((unint64_t)a19 << 6 != v35);
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    do
    {
      sub_18DFF2980((uint64_t)&v110, *(void *)(a13 + 32) + v37);
      sub_18DFE2FA8((uint64_t)&v110, *(void *)(a14 + 32) + v36);
      sub_18DFE2FA8((uint64_t)&v110, *(void *)(a14 + 32) + v36);
      v37 += 64;
      v36 += 112;
    }
    while ((unint64_t)a19 << 6 != v37);
  }
  sub_18E088434((uint64_t)&__p, a16, 0);
  uint64_t v112 = &v113;
  uint64_t v38 = v116;
  *(_DWORD *)double v111 = 1;
  *(_DWORD *)&v111[4] = v116;
  *(_DWORD *)&v111[20] = 1;
  *(_DWORD *)&v111[8] = v116;
  *(void *)&v111[12] = 0x400000001;
  if (v116)
  {
    uint64_t v39 = 0;
    uint64_t v40 = v117;
    unsigned int v41 = v115;
    uint64_t v42 = v115 - 1;
    int v43 = 1;
    do
    {
      int v44 = *(_DWORD *)(v40 + 4 * v41 * v39);
      unsigned int v45 = v43;
      uint64_t v46 = v42;
      if (v41 >= 2)
      {
        do
        {
          v44 += *(_DWORD *)(v40 + 4 * v45++);
          --v46;
        }
        while (v46);
      }
      *((_DWORD *)&v113 + v39++) = v44;
      v43 += v41;
    }
    while (v39 != v38);
  }
  sub_18E088434((uint64_t)&__p, a16, 1);
  uint64_t v112 = &v113;
  uint64_t v47 = v116;
  *(_DWORD *)double v111 = 1;
  *(_DWORD *)&v111[4] = v116;
  *(_DWORD *)&v111[20] = 1;
  *(_DWORD *)&v111[8] = v116;
  *(void *)&v111[12] = 0x400000001;
  if (v116)
  {
    uint64_t v48 = 0;
    uint64_t v49 = v117;
    unsigned int v50 = v115;
    uint64_t v51 = v115 - 1;
    int v52 = 1;
    do
    {
      int v53 = *(_DWORD *)(v49 + 4 * v50 * v48);
      unsigned int v54 = v52;
      uint64_t v55 = v51;
      if (v50 >= 2)
      {
        do
        {
          v53 += *(_DWORD *)(v49 + 4 * v54++);
          --v55;
        }
        while (v55);
      }
      *((_DWORD *)&v113 + v48++) = v53;
      v52 += v50;
    }
    while (v48 != v47);
  }
  *(void *)&v111[16] = 0x100000004;
  *(_OWORD *)double v111 = xmmword_18E1F6F80;
  uint64_t v110 = &unk_1EDD19488;
  uint64_t v112 = &v113;
  unsigned int LogLevel = (cnprint::CNPrinter *)sub_18E07519C(a23, 1, (uint64_t)&v110);
  int v109 = *(unsigned __int8 *)(a26 + 32);
  int v105 = *(unsigned __int8 *)(a26 + 33);
  if (a19 >= 1)
  {
    uint64_t v57 = 0;
    do
    {
      int v58 = *(_DWORD *)(*(void *)(a9 + 32) + 4 * v57);
      int v59 = *(_DWORD *)(*(void *)(a12 + 32) + 4 * v57);
      if (v58 <= v59)
      {
        ++v57;
      }
      else
      {
        LOWORD(v110) = 2;
        LOBYTE(__p) = 2;
        cnprint::CNLogFormatter::FormatWarning((cnprint::CNLogFormatter *)(v34 + 1272), "%d measurements > %d noise sources in measurement function %d.", v58, v59, ++v57);
        if (*(char *)(v34 + 1295) >= 0) {
          LOBYTE(v65) = v34 - 8;
        }
        else {
          uint64_t v65 = *(void *)(v34 + 1272);
        }
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v110, (unsigned __int8 *)&__p, "%s", v60, v61, v62, v63, v64, v65);
      }
    }
    while (v57 != a19);
  }
  if (*(_DWORD *)a26)
  {
    unsigned int LogLevel = (cnprint::CNPrinter *)cnprint::CNPrinter::GetLogLevel(LogLevel);
    if (LogLevel <= 1)
    {
      LOWORD(v110) = 2;
      LOBYTE(__p) = 1;
      unsigned __int8 v66 = cnprint::CNLogFormatter::FormatWarning((cnprint::CNLogFormatter *)(v34 + 1272), "PredictAndUpdate is only compatible with NewtonRaphson solver.");
      if (*(char *)(v34 + 1295) >= 0) {
        LOBYTE(v72) = v66;
      }
      else {
        uint64_t v72 = *(void *)(v34 + 1272);
      }
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v110, (unsigned __int8 *)&__p, "%s", v67, v68, v69, v70, v71, v72);
    }
  }
  if (*(int *)(a26 + 4) >= 2 && cnprint::CNPrinter::GetLogLevel(LogLevel) <= 1)
  {
    LOWORD(v110) = 2;
    LOBYTE(__p) = 1;
    unsigned __int8 v73 = cnprint::CNLogFormatter::FormatWarning((cnprint::CNLogFormatter *)(v34 + 1272), "PredictAndUpdate is only compatible with single-iteration least squares solutions.");
    if (*(char *)(v34 + 1295) >= 0) {
      LOBYTE(v79) = v73;
    }
    else {
      uint64_t v79 = *(void *)(v34 + 1272);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v110, (unsigned __int8 *)&__p, "%s", v74, v75, v76, v77, v78, v79);
  }
  int v80 = *(_DWORD *)(a26 + 8);
  *(void *)&v111[16] = 0x100000057;
  *(_OWORD *)double v111 = xmmword_18E1FD660;
  uint64_t v110 = &unk_1EDD199F8;
  uint64_t v112 = &v113;
  uint64_t v81 = (cnprint::CNPrinter *)sub_18E07519C(a9, 1, (uint64_t)&v110);
  if (v80 < *(_DWORD *)v112)
  {
    uint64_t v81 = (cnprint::CNPrinter *)cnprint::CNPrinter::GetLogLevel(v81);
    if (v81 <= 1)
    {
      LOWORD(v110) = 2;
      LOBYTE(__p) = 1;
      unsigned __int8 v82 = cnprint::CNLogFormatter::FormatWarning((cnprint::CNLogFormatter *)(v34 + 1272), "PredictAndUpdate is only compatible with QR factorizations of unconstrained size.");
      if (*(char *)(v34 + 1295) >= 0) {
        LOBYTE(v88) = v82;
      }
      else {
        uint64_t v88 = *(void *)(v34 + 1272);
      }
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v110, (unsigned __int8 *)&__p, "%s", v83, v84, v85, v86, v87, v88);
    }
  }
  if (*(unsigned char *)(a26 + 89))
  {
    uint64_t v81 = (cnprint::CNPrinter *)cnprint::CNPrinter::GetLogLevel(v81);
    if (v81 <= 1)
    {
      LOWORD(v110) = 2;
      LOBYTE(__p) = 1;
      unsigned __int8 v89 = cnprint::CNLogFormatter::FormatWarning((cnprint::CNLogFormatter *)(v34 + 1272), "PredictAndUpdate is only compatible with dense prediction.");
      if (*(char *)(v34 + 1295) >= 0) {
        LOBYTE(v95) = v89;
      }
      else {
        uint64_t v95 = *(void *)(v34 + 1272);
      }
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v110, (unsigned __int8 *)&__p, "%s", v90, v91, v92, v93, v94, v95);
    }
  }
  if (!v109 && v105 && cnprint::CNPrinter::GetLogLevel(v81) <= 1)
  {
    LOWORD(v110) = 2;
    LOBYTE(__p) = 1;
    unsigned __int8 v96 = cnprint::CNLogFormatter::FormatWarning((cnprint::CNLogFormatter *)(v34 + 1272), "Local hypothesis testing implies global hypothesis testing.  Global hypothesis testing will be enabled.");
    if (*(char *)(v34 + 1295) >= 0) {
      LOBYTE(v102) = v96;
    }
    else {
      uint64_t v102 = *(void *)(v34 + 1272);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v110, (unsigned __int8 *)&__p, "%s", v97, v98, v99, v100, v101, v102);
  }
  if (*(_DWORD *)(v108 + 8) && *(_DWORD *)(v108 + 12))
  {
    uint64_t v103 = v34 + 8;
    long long v104 = (void **)v108;
  }
  else
  {
    if (v32 < 0) {
      __assert_rtn("Zeros", "cnmatrix.h", 3098, "nr >= 0");
    }
    *(void *)&v111[16] = 0x10000001ALL;
    uint64_t v110 = &unk_1EDD186A8;
    uint64_t v112 = &v113;
    *(_DWORD *)double v111 = v32;
    *(_DWORD *)&v111[4] = 1;
    *(_DWORD *)&v111[8] = v32;
    *(_DWORD *)&v111[12] = v32;
    sub_18DFE2CC8((uint64_t)&v110, 0.0);
    uint64_t v103 = v34 + 8;
    long long v104 = &v110;
  }
  sub_18DFE2F24(v103, (uint64_t)v104);
  if (*(_DWORD *)(v106 + 8) && *(_DWORD *)(v106 + 12))
  {
    sub_18DFE2F24(v34 + 256, v106);
    if (!*(_DWORD *)(v29 + 8) || !*(_DWORD *)(v29 + 12))
    {
      *(void *)&v111[16] = 0x10000001ALL;
      *(_OWORD *)double v111 = xmmword_18E1FD600;
      uint64_t v110 = &unk_1EDD186A8;
      uint64_t v112 = &v113;
      sub_18DFE2B44(v34 + 256, v34 + 8, (uint64_t)&v110);
      sub_18DFE2F24(v34 + 304, (uint64_t)&v110);
    }
    if ((v32 & 0x80000000) == 0) {
      sub_18E089660((uint64_t)&v110, v107, v32);
    }
    __assert_rtn("Zeros", "cnmatrix.h", 3099, "nc >= 0");
  }
  if ((v32 & 0x80000000) == 0) {
    sub_18E06E4BC((uint64_t)&v110, v32, v32);
  }
  __assert_rtn("Zeros", "cnmatrix.h", 3056, "n >= 0");
}

void sub_18E087B60(_Unwind_Exception *a1)
{
  sub_18E08B7D4(&STACK[0x1598]);
  sub_18E08BEF0(&STACK[0x2510]);
  sub_18E08BEF0(&STACK[0x2540]);
  sub_18E06B5D4(&STACK[0x2498]);
  sub_18E08BCA8((void *)(v1 - 208));
  sub_18E08BCA8(&STACK[0x24D0]);
  sub_18E08D9D4(&STACK[0x2570]);
  sub_18E08AB80(&STACK[0x25A0]);
  sub_18E071BB8(&STACK[0x2CA8]);
  sub_18E06B5D4(&STACK[0x2CD8]);
  sub_18E06B5D4(&STACK[0x2D08]);
  _Unwind_Resume(a1);
}

uint64_t sub_18E08827C(uint64_t result, int a2, int a3)
{
  *(void *)(result + 24) = 0x100000057;
  *(void *)(result + 32) = 0;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)__n128 result = &unk_1EDD199F8;
  if (a2 < 0)
  {
    int v3 = "nr >= 0";
    int v4 = 419;
    goto LABEL_6;
  }
  if (a3 < 0)
  {
    int v3 = "nc >= 0";
    int v4 = 420;
LABEL_6:
    __assert_rtn("CNMatrix", "cnmatrix.h", v4, v3);
  }
  *(_DWORD *)(result + 8) = a2;
  *(_DWORD *)(result + 12) = a3;
  *(_DWORD *)(result + 16) = a3 * a2;
  *(_DWORD *)(result + 20) = a2;
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E088320(_Unwind_Exception *a1)
{
  *uint64_t v1 = &unk_1EDD174A8;
  _Unwind_Resume(a1);
}

void sub_18E088340(uint64_t a1, int a2, int a3)
{
  *(void *)(a1 + 24) = 0x100000057;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1EDD198A8;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 32) = 0;
  if (a2 < 0)
  {
    int v3 = "nr >= 0";
    int v4 = 419;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      *(_DWORD *)(a1 + 8) = a2;
      *(_DWORD *)(a1 + 12) = a3;
      *(_DWORD *)(a1 + 16) = a3 * a2;
      *(_DWORD *)(a1 + 20) = a2;
      sub_18E066EF0();
    }
    int v3 = "nc >= 0";
    int v4 = 420;
  }
  __assert_rtn("CNMatrix", "cnmatrix.h", v4, v3);
}

void sub_18E0883FC(_Unwind_Exception *a1)
{
  sub_18E066E88(v2);
  *uint64_t v1 = &unk_1EDD17028;
  _Unwind_Resume(a1);
}

uint64_t sub_18E088434(uint64_t result, uint64_t a2, int a3)
{
  int v3 = *(_DWORD *)(a2 + 8);
  *(void *)(result + 24) = 0x100000004;
  *(void *)__n128 result = &unk_1EDD19488;
  *(_DWORD *)(result + 8) = v3;
  *(_DWORD *)(result + 12) = 1;
  *(_DWORD *)(result + 16) = v3;
  *(_DWORD *)(result + 20) = v3;
  int v4 = (_DWORD *)(result + 40);
  *(void *)(result + 32) = result + 40;
  if (v3)
  {
    int v5 = *(_DWORD *)(a2 + 20) * a3;
    uint64_t v6 = *(void *)(a2 + 32);
    do
    {
      *v4++ = *(_DWORD *)(v6 + 4 * v5++);
      --v3;
    }
    while (v3);
  }
  return result;
}

void *sub_18E08849C(void *result)
{
  *__n128 result = &unk_1EDD174A8;
  return result;
}

void *sub_18E0884BC(void *result)
{
  *__n128 result = &unk_1EDD174A8;
  return result;
}

void *sub_18E0884DC(void *result)
{
  result[29] = &unk_1EDD174A8;
  *__n128 result = &unk_1EDD17478;
  return result;
}

void *sub_18E08851C(void *a1)
{
  *a1 = &unk_1EDD16458;
  a1[25] = &unk_1EDD174A8;
  a1[7] = &unk_1EDD174A8;
  return sub_18E071BB8(a1);
}

void *sub_18E08857C(void *result)
{
  result[82] = &unk_1EDD174A8;
  result[75] = &unk_1EDD174A8;
  *__n128 result = &unk_1EDD17478;
  return result;
}

void *sub_18E0885DC(void *result)
{
  *__n128 result = &unk_1EDD17478;
  return result;
}

void sub_18E088600()
{
  uint64_t v3 = 0x100000088;
  uint64_t v1 = &unk_1EDD17838;
  long long v2 = xmmword_18E1FDA10;
  int v4 = &v5;
  sub_18E08D394((uint64_t)v0);
}

void sub_18E0886B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_18E08D440((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_18E0886C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4 = *(_DWORD *)(a1 + 8);
  int v3 = *(_DWORD *)(a1 + 12);
  *(void *)(a2 + 24) = 0x100000057;
  *(void *)a2 = &unk_1EDD199F8;
  *(_DWORD *)(a2 + 8) = v3;
  *(_DWORD *)(a2 + 12) = v4;
  *(_DWORD *)(a2 + 16) = v4 * v3;
  *(_DWORD *)(a2 + 20) = v3;
  *(void *)(a2 + 32) = a2 + 40;
  return sub_18DFEE808(a1, a2);
}

void sub_18E08872C(_Unwind_Exception *a1)
{
  *uint64_t v1 = &unk_1EDD174A8;
  _Unwind_Resume(a1);
}

uint64_t sub_18E08874C@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v3 = (_OWORD *)(a3 + 8);
  *(void *)(a3 + 24) = 0x5700000001;
  *(void *)a3 = &unk_1EDD183D8;
  int v4 = (_DWORD *)(a3 + 40);
  *(void *)(a3 + 32) = a3 + 40;
  if (a2 == result)
  {
    *(void *)&long long v5 = 0x100000001;
    *((void *)&v5 + 1) = 0x100000001;
    *int v3 = v5;
    *int v4 = result;
  }
  else if (a2 - (int)result < 0)
  {
    *(void *)int v3 = 0;
    *(void *)(a3 + 16) = 0;
  }
  else
  {
    uint64_t v6 = (a2 - result + 1);
    *(_DWORD *)(a3 + 8) = 1;
    *(_DWORD *)(a3 + 12) = v6;
    *(_DWORD *)(a3 + 16) = v6;
    *(_DWORD *)(a3 + 20) = 1;
    do
    {
      *v4++ = result;
      __n128 result = (result + 1);
      --v6;
    }
    while (v6);
  }
  return result;
}

void *sub_18E0887C8(void *result)
{
  *__n128 result = &unk_1EDD174A8;
  return result;
}

void *sub_18E0887E8(void *result)
{
  result[93] = &unk_1EDD174A8;
  *__n128 result = &unk_1EDD17478;
  return result;
}

void sub_18E088828(uint64_t a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a2 + 8);
  int v2 = *(_DWORD *)(a2 + 12);
  *(void *)(a1 + 24) = 0x570000001ALL;
  *(void *)a1 = &unk_1EDD18888;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 8) = v2;
  *(_DWORD *)(a1 + 12) = v3;
  *(_DWORD *)(a1 + 16) = v3 * v2;
  *(_DWORD *)(a1 + 20) = v2;
  sub_18E08A3A0();
}

void sub_18E0888A0(_Unwind_Exception *a1)
{
  sub_18E08B2A0(v1);
  _Unwind_Resume(a1);
}

void sub_18E0888F8(uint64_t a1)
{
  *(void *)(a1 + 24) = 0x570000001ALL;
  *(void *)a1 = &unk_1EDD18888;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 8) = xmmword_18E1FDA30;
  sub_18E08A3A0();
}

void sub_18E08897C(_Unwind_Exception *a1)
{
  sub_18E08B2A0(v1);
  _Unwind_Resume(a1);
}

void sub_18E0889D8()
{
  uint64_t v2 = 0x100000071;
  v0[6] = &unk_1EDD17718;
  long long v1 = xmmword_18E1FDA40;
  int v3 = &v4;
  sub_18E08B470((uint64_t)v0);
}

void sub_18E088AB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_18E08BEF0(v9);
  sub_18E08B7D4(&a9);
  _Unwind_Resume(a1);
}

void sub_18E088B18(uint64_t a1@<X8>)
{
}

void sub_18E088C2C(_Unwind_Exception *a1)
{
  sub_18E08B7D4(v1);
  _Unwind_Resume(a1);
}

void sub_18E088C40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

double sub_18E088CF0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 24) = 0x100000057;
  *(void *)a3 = &unk_1EDD199C8;
  *(_OWORD *)(a3 + 8) = xmmword_18E1FD660;
  *(void *)(a3 + 32) = a3 + 40;
  *(void *)&double result = *(_OWORD *)&sub_18DFE2AA8(a1, a2, a3);
  return result;
}

void sub_18E088D34(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 24) = 0x100000057;
  *(void *)a3 = &unk_1EDD199C8;
  *(_OWORD *)(a3 + 8) = xmmword_18E1FD660;
  *(void *)(a3 + 32) = a3 + 40;
  sub_18DFE2B44(a1, a2, a3);
}

void sub_18E088D98(_Unwind_Exception *a1)
{
  *long long v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

void sub_18E088DB8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
}

void sub_18E088DF4(_Unwind_Exception *a1)
{
  sub_18E08B7D4(v1);
  _Unwind_Resume(a1);
}

void sub_18E088E08(uint64_t a1, uint64_t a2)
{
  int v3 = 0;
  uint64_t v17 = 0;
  int v18 = 0;
  unint64_t v19 = 0;
  int v4 = *(_DWORD *)(a2 + 8);
  int v5 = *(_DWORD *)(a2 + 12);
  if (v4) {
    BOOL v6 = v5 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6 || (v5 | v4) == 0)
  {
LABEL_9:
    if ((char **)(a1 + 1248) != &v17) {
      sub_18E08BF6C((uint64_t *)(a1 + 1248), v17, v3, (v3 - v17) >> 5);
    }
  }
  else
  {
    int v3 = 0;
    unsigned int v9 = 1;
    while (1)
    {
      unint64_t v10 = *(int *)(*(void *)(a2 + 32) + 4 * (int)(v9 - 1));
      uint64_t v11 = *(void *)(a1 + 1248);
      if (v10 >= (*(void *)(a1 + 1256) - v11) >> 5) {
        break;
      }
      uint64_t v12 = v11 + 32 * v10;
      if ((unint64_t)v3 >= v19)
      {
        int v3 = (char *)sub_18E08977C((uint64_t *)&v17, v12);
      }
      else
      {
        sub_18E089710((uint64_t)&v17, v12);
        v3 += 32;
      }
      int v18 = v3;
      unsigned int v14 = *(_DWORD *)(a2 + 8);
      unsigned int v13 = *(_DWORD *)(a2 + 12);
      if (v14 <= v13) {
        unsigned int v15 = *(_DWORD *)(a2 + 12);
      }
      else {
        unsigned int v15 = *(_DWORD *)(a2 + 8);
      }
      if (v14)
      {
        if (v13)
        {
          if (v15 > v9++) {
            continue;
          }
        }
      }
      goto LABEL_9;
    }
  }
  uint64_t v20 = &v17;
  sub_18E0694B8((void ***)&v20);
}

void sub_18E088F14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_18E0694B8(&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_18E088F34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 24) = 0x100000088;
  *(void *)a1 = &unk_1EDD17868;
  *(_OWORD *)(a1 + 8) = xmmword_18E1FDA10;
  *(void *)(a1 + 32) = a1 + 40;
  return sub_18E072E48(a2, a3, a1);
}

void sub_18E088FA0(_Unwind_Exception *a1)
{
  *long long v1 = &unk_1EDD174A8;
  _Unwind_Resume(a1);
}

uint64_t sub_18E088FC0(uint64_t a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a2 + 8);
  int v2 = *(_DWORD *)(a2 + 12);
  *(void *)(a1 + 24) = 0x100000031;
  *(void *)a1 = &unk_1EDD192A8;
  *(_DWORD *)(a1 + 8) = v2;
  *(_DWORD *)(a1 + 12) = v3;
  *(_DWORD *)(a1 + 16) = v3 * v2;
  *(_DWORD *)(a1 + 20) = v2;
  *(void *)(a1 + 32) = a1 + 40;
  return sub_18DFEE808(a2, a1);
}

void sub_18E08902C(_Unwind_Exception *a1)
{
  *long long v1 = &unk_1EDD174A8;
  _Unwind_Resume(a1);
}

uint64_t sub_18E08904C(uint64_t result, int a2)
{
  int v2 = (void *)(result + 8);
  *(void *)(result + 24) = 0x3100000001;
  *(void *)double result = &unk_1EDD182B8;
  int v3 = (_DWORD *)(result + 40);
  *(void *)(result + 32) = result + 40;
  if (a2)
  {
    if (a2 < 0)
    {
      *int v2 = 0;
      *(void *)(result + 16) = 0;
    }
    else
    {
      uint64_t v4 = 0;
      uint64_t v5 = (a2 + 1);
      *(_DWORD *)(result + 8) = 1;
      *(_DWORD *)(result + 12) = v5;
      *(_DWORD *)(result + 16) = v5;
      *(_DWORD *)(result + 20) = 1;
      do
      {
        v3[v4] = v4;
        ++v4;
      }
      while (v5 != v4);
    }
  }
  else
  {
    *(void *)&long long v6 = 0x100000001;
    *((void *)&v6 + 1) = 0x100000001;
    *(_OWORD *)int v2 = v6;
    *int v3 = 0;
  }
  return result;
}

uint64_t sub_18E0890C8@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 24) = 0x100000057;
  *(void *)a3 = &unk_1EDD199F8;
  int v3 = (_DWORD *)(a3 + 40);
  *(void *)(a3 + 32) = a3 + 40;
  int v5 = *(_DWORD *)(result + 8);
  int v4 = *(_DWORD *)(result + 12);
  *(_DWORD *)(a3 + 8) = v5;
  *(_DWORD *)(a3 + 12) = v4;
  uint64_t v6 = (v4 * v5);
  *(_DWORD *)(a3 + 16) = v6;
  *(_DWORD *)(a3 + 20) = v5;
  if ((int)v6 >= 1)
  {
    int v7 = *(int **)(result + 32);
    do
    {
      int v8 = *v7++;
      *v3++ = v8 + a2;
      --v6;
    }
    while (v6);
  }
  return result;
}

void *sub_18E08912C(void *result)
{
  *double result = &unk_1EDD174A8;
  return result;
}

void *sub_18E08914C(void *result)
{
  *double result = &unk_1EDD174A8;
  return result;
}

void sub_18E08916C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(unsigned int *)(a2 + 12);
  sub_18E08BBEC(v6, *(_DWORD *)(a2 + 12));
  if ((int)v3 >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = v6[4];
    do
    {
      *(_DWORD *)(v5 + 4 * v4) = v4;
      ++v4;
    }
    while (v3 != v4);
  }
  sub_18E08ABFC(a1);
}

void sub_18E089338(_Unwind_Exception *a1)
{
  v1[80] = &unk_1EDD174A8;
  char v1[7] = &unk_1EDD174A8;
  sub_18E08BCA8(v1);
  _Unwind_Resume(a1);
}

void *sub_18E089384(void *a1)
{
  *a1 = &unk_1EDD16248;
  a1[80] = &unk_1EDD174A8;
  a1[7] = &unk_1EDD174A8;
  return sub_18E08BCA8(a1);
}

void *sub_18E0893E4(void *result)
{
  result[142] = &unk_1EDD174A8;
  *double result = &unk_1EDD17478;
  return result;
}

void *sub_18E089424(void *result)
{
  *double result = &unk_1EDD174A8;
  return result;
}

void *sub_18E089448(void *a1)
{
  *a1 = &unk_1EDD19908;
  sub_18E08C410(a1 + 5);
  *a1 = &unk_1EDD170B8;
  return a1;
}

void *sub_18E0894AC(void *a1)
{
  *a1 = &unk_1EDD163C8;
  a1[24] = &unk_1EDD174A8;
  a1[7] = &unk_1EDD174A8;
  return sub_18E06B400(a1);
}

void *sub_18E08950C(void *a1)
{
  *a1 = &unk_1EDD163F8;
  a1[24] = &unk_1EDD174A8;
  a1[7] = &unk_1EDD174A8;
  return sub_18E0683EC(a1);
}

void *sub_18E089574(void *a1)
{
  *a1 = &unk_1EDD166F8;
  a1[37] = &unk_1EDD174A8;
  a1[7] = &unk_1EDD174A8;
  return sub_18E08D440(a1);
}

void *sub_18E0895D4(void *result)
{
  result[55] = &unk_1EDD174A8;
  *double result = &unk_1EDD17478;
  return result;
}

void *sub_18E089618(void *result)
{
  *double result = &unk_1EDD17478;
  return result;
}

void *sub_18E089638(void *result)
{
  *double result = &unk_1EDD17478;
  return result;
}

void sub_18E089660(uint64_t a1, int a2, int a3)
{
  *(void *)(a1 + 24) = 0x1A00000017;
  *(void *)a1 = &unk_1EDD185B8;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = a3;
  *(_DWORD *)(a1 + 16) = a3 * a2;
  *(_DWORD *)(a1 + 20) = a2;
  sub_18E0684D0();
}

void sub_18E0896C8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = v1[5];
  v1[5] = 0;
  if (v3) {
    MEMORY[0x192FA6220](v3, 0x1000C8000313F17);
  }
  *long long v1 = &unk_1EDD17478;
  _Unwind_Resume(exception_object);
}

unsigned char *sub_18E089710(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  *(_DWORD *)uint64_t v3 = *(_DWORD *)a2;
  double result = (unsigned char *)(v3 + 8);
  if (*(char *)(a2 + 31) < 0)
  {
    double result = sub_18DEDE668(result, *(void **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 8);
    *(void *)(v3 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)double result = v5;
  }
  *(void *)(a1 + 8) = v3 + 32;
  return result;
}

void sub_18E089774(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_18E08977C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 5;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59) {
    sub_18DEE1FC8();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 4 > v5) {
    unint64_t v5 = v8 >> 4;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  unint64_t v19 = a1 + 2;
  if (v9) {
    unint64_t v10 = (char *)sub_18E01ACC8(v7, v9);
  }
  else {
    unint64_t v10 = 0;
  }
  uint64_t v11 = &v10[32 * v4];
  v16[0] = v10;
  v16[1] = v11;
  uint64_t v17 = v11;
  int v18 = &v10[32 * v9];
  *(_DWORD *)uint64_t v11 = *(_DWORD *)a2;
  uint64_t v12 = v11 + 8;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_18DEDE668(v12, *(void **)(a2 + 8), *(void *)(a2 + 16));
    uint64_t v11 = v17;
  }
  else
  {
    long long v13 = *(_OWORD *)(a2 + 8);
    *((void *)v11 + 3) = *(void *)(a2 + 24);
    *(_OWORD *)uint64_t v12 = v13;
  }
  uint64_t v17 = v11 + 32;
  sub_18E08988C(a1, v16);
  uint64_t v14 = a1[1];
  sub_18E089A28((uint64_t)v16);
  return v14;
}

void sub_18E089878(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_18E089A28((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_18E08988C(uint64_t *a1, void *a2)
{
  uint64_t result = sub_18E089904((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_18E089904(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  void v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = a7;
    do
    {
      int v9 = *(_DWORD *)(a3 - 32);
      a3 -= 32;
      *(_DWORD *)(v8 - 32) = v9;
      v8 -= 32;
      long long v10 = *(_OWORD *)(a3 + 8);
      *(void *)(v8 + 24) = *(void *)(a3 + 24);
      *(_OWORD *)(v8 + 8) = v10;
      *(void *)(a3 + 16) = 0;
      *(void *)(a3 + 24) = 0;
      *(void *)(a3 + 8) = 0;
      v7 -= 32;
    }
    while (a3 != a5);
    *((void *)&v16 + 1) = v8;
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_18E0899A8((uint64_t)v13);
  return v11;
}

uint64_t sub_18E0899A8(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_18E0899E0(a1);
  }
  return a1;
}

void sub_18E0899E0(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 31) < 0) {
      operator delete(*(void **)(v1 + 8));
    }
    v1 += 32;
  }
}

uint64_t sub_18E089A28(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_18E089A60(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      uint64_t v5 = v2 - 32;
      *(void *)(a1 + 16) = v2 - 32;
      if (*(char *)(v2 - 1) < 0)
      {
        operator delete(*(void **)(v2 - 24));
        uint64_t v5 = *(void *)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != a2);
  }
}

void sub_18E089AB8(uint64_t a1, int a2, int a3)
{
  *(void *)(a1 + 24) = 0x170000001ALL;
  *(void *)a1 = &unk_1EDD18738;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = a3;
  *(_DWORD *)(a1 + 16) = a3 * a2;
  *(_DWORD *)(a1 + 20) = a2;
  sub_18E0684D0();
}

void sub_18E089B20(_Unwind_Exception *exception_object)
{
  uint64_t v3 = v1[5];
  v1[5] = 0;
  if (v3) {
    MEMORY[0x192FA6220](v3, 0x1000C8000313F17);
  }
  *uint64_t v1 = &unk_1EDD17478;
  _Unwind_Resume(exception_object);
}

void sub_18E089B68(void *a1)
{
  *a1 = &unk_1EDD174A8;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E089B98(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E089BA4(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  unsigned int v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    unsigned int v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      int v4 = *(_DWORD *)(a1 + 16);
      int v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        uint64_t v6 = (v4 - 1);
        uint64_t v7 = *(void *)(a1 + 32);
        uint64_t v8 = 1;
        do
        {
          int v9 = &v13[v8];
          if (!v13[v8])
          {
            int v10 = *(_DWORD *)(v7 + 4 * v8);
            int v11 = v8;
            do
            {
              int v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              int v12 = *(_DWORD *)(v7 + 4 * v11);
              *(_DWORD *)(v7 + 4 * v11) = v10;
              *int v9 = 1;
              int v9 = &v13[v11];
              int v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

void sub_18E089C9C(void *a1)
{
  *a1 = &unk_1EDD174A8;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E089CCC(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E089CD8(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  unsigned int v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    unsigned int v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      int v4 = *(_DWORD *)(a1 + 16);
      int v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        uint64_t v6 = (v4 - 1);
        uint64_t v7 = *(void *)(a1 + 32);
        uint64_t v8 = 1;
        do
        {
          int v9 = &v13[v8];
          if (!v13[v8])
          {
            int v10 = *(_DWORD *)(v7 + 4 * v8);
            int v11 = v8;
            do
            {
              int v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              int v12 = *(_DWORD *)(v7 + 4 * v11);
              *(_DWORD *)(v7 + 4 * v11) = v10;
              *int v9 = 1;
              int v9 = &v13[v11];
              int v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

uint64_t sub_18E089DD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 24) = 0x100000017;
  *(_OWORD *)(a1 + 8) = xmmword_18E1FD620;
  *(void *)(a1 + 32) = a1 + 40;
  *(void *)a1 = &unk_1EDD16B48;
  *(void *)(a1 + 224) = a2;
  *(void *)(a1 + 256) = 0x100000017;
  *(void *)(a1 + 232) = &unk_1EDD18558;
  *(_OWORD *)(a1 + 240) = xmmword_18E1FD620;
  *(void *)(a1 + 264) = a1 + 272;
  sub_18DFEEA3C(a1 + 232, a3);
  int v6 = *(_DWORD *)(a1 + 240);
  int v5 = *(_DWORD *)(a1 + 244);
  *(_DWORD *)(a1 + 8) = v6;
  *(_DWORD *)(a1 + 12) = v5;
  uint64_t v7 = (v5 * v6);
  *(_DWORD *)(a1 + 16) = v7;
  *(_DWORD *)(a1 + 20) = v6;
  if ((int)v7 >= 1)
  {
    uint64_t v8 = *(int **)(a1 + 264);
    uint64_t v9 = *(void *)(a2 + 32);
    int v10 = *(void **)(a1 + 32);
    do
    {
      uint64_t v11 = *v8++;
      *v10++ = *(void *)(v9 + 8 * v11);
      --v7;
    }
    while (v7);
  }
  return a1;
}

void sub_18E089EA8(void *a1)
{
  a1[29] = &unk_1EDD174A8;
  *a1 = &unk_1EDD17478;
  JUMPOUT(0x192FA6240);
}

void sub_18E089EF8(uint64_t a1)
{
}

void sub_18E08A090(_Unwind_Exception *a1)
{
  v1[25] = &unk_1EDD174A8;
  char v1[7] = &unk_1EDD174A8;
  sub_18E071BB8(v1);
  _Unwind_Resume(a1);
}

void sub_18E08A0DC(void *a1)
{
  *a1 = &unk_1EDD16458;
  a1[25] = &unk_1EDD174A8;
  a1[7] = &unk_1EDD174A8;
  sub_18E071BB8(a1);

  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E08A170(uint64_t result, int a2, int a3)
{
  *(void *)(result + 24) = 0x100000057;
  *(void *)(result + 32) = 0;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)uint64_t result = &unk_1EDD199C8;
  if (a2 < 0)
  {
    unsigned int v3 = "nr >= 0";
    int v4 = 419;
    goto LABEL_6;
  }
  if (a3 < 0)
  {
    unsigned int v3 = "nc >= 0";
    int v4 = 420;
LABEL_6:
    __assert_rtn("CNMatrix", "cnmatrix.h", v4, v3);
  }
  *(_DWORD *)(result + 8) = a2;
  *(_DWORD *)(result + 12) = a3;
  *(_DWORD *)(result + 16) = a3 * a2;
  *(_DWORD *)(result + 20) = a2;
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E08A214(_Unwind_Exception *a1)
{
  *unsigned int v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

void sub_18E08A234(void *a1)
{
  sub_18E08AB80(a1);

  JUMPOUT(0x192FA6240);
}

void sub_18E08A26C()
{
}

void sub_18E08A298()
{
}

void sub_18E08A3A0()
{
}

void sub_18E08A41C(void *a1)
{
  sub_18E08D9D4(a1);

  JUMPOUT(0x192FA6240);
}

void sub_18E08A454()
{
}

void sub_18E08A480()
{
}

void sub_18E08A588()
{
}

void sub_18E08A604(void *a1)
{
  *a1 = &unk_1EDD17478;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E08A634(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E08A640(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  unsigned int v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    unsigned int v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      int v4 = *(_DWORD *)(a1 + 16);
      int v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        uint64_t v6 = (v4 - 1);
        uint64_t v7 = *(void *)(a1 + 32);
        uint64_t v8 = 1;
        do
        {
          uint64_t v9 = &v13[v8];
          if (!v13[v8])
          {
            uint64_t v10 = *(void *)(v7 + 8 * v8);
            int v11 = v8;
            do
            {
              int v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              uint64_t v12 = *(void *)(v7 + 8 * v11);
              *(void *)(v7 + 8 * v11) = v10;
              *uint64_t v9 = 1;
              uint64_t v9 = &v13[v11];
              uint64_t v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

double sub_18E08A738(void *a1, unsigned int a2)
{
  a1[3] = 0x100000017;
  a1[4] = 0;
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1EDD18558;
  if ((a2 & 0x80000000) != 0) {
    __assert_rtn("CNMatrix", "cnmatrix.h", 419, "nr >= 0");
  }
  int32x4_t v2 = vdupq_lane_s32((int32x2_t)(a2 | 0x100000000), 0);
  v2.i32[1] = 1;
  *(int32x4_t *)(a1 + 1) = v2;
  a1[4] = a1 + 5;
  return *(double *)v2.i64;
}

void sub_18E08A7D4(_Unwind_Exception *a1)
{
  *unsigned int v1 = &unk_1EDD174A8;
  _Unwind_Resume(a1);
}

void sub_18E08A7F4(void *a1)
{
  a1[82] = &unk_1EDD174A8;
  a1[75] = &unk_1EDD174A8;
  *a1 = &unk_1EDD17478;
  JUMPOUT(0x192FA6240);
}

void sub_18E08A864(void *a1)
{
  sub_18E08BCA8(a1);

  JUMPOUT(0x192FA6240);
}

void sub_18E08A89C()
{
}

void sub_18E08A8C8()
{
}

void sub_18E08A9D0()
{
}

void sub_18E08AA4C(void *a1)
{
  *a1 = &unk_1EDD17478;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E08AA7C(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E08AA88(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  unsigned int v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    unsigned int v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      int v4 = *(_DWORD *)(a1 + 16);
      int v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        uint64_t v6 = (v4 - 1);
        uint64_t v7 = *(void *)(a1 + 32);
        uint64_t v8 = 1;
        do
        {
          uint64_t v9 = &v13[v8];
          if (!v13[v8])
          {
            uint64_t v10 = *(void *)(v7 + 8 * v8);
            int v11 = v8;
            do
            {
              int v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              uint64_t v12 = *(void *)(v7 + 8 * v11);
              *(void *)(v7 + 8 * v11) = v10;
              *uint64_t v9 = 1;
              uint64_t v9 = &v13[v11];
              uint64_t v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

void *sub_18E08AB80(void *a1)
{
  *a1 = &unk_1EDD19A88;
  uint64_t v2 = a1[5];
  a1[5] = 0;
  if (v2) {
    MEMORY[0x192FA6220](v2, 0x1000C8000313F17);
  }
  *a1 = &unk_1EDD17478;
  return a1;
}

void sub_18E08ABFC(uint64_t a1)
{
  *(void *)(a1 + 24) = 0x3100000088;
  *(void *)a1 = &unk_1EDD17898;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 8) = xmmword_18E1FDA70;
  sub_18E08A9D0();
}

void sub_18E08AC64(_Unwind_Exception *exception_object)
{
  uint64_t v3 = v1[5];
  v1[5] = 0;
  if (v3) {
    MEMORY[0x192FA6220](v3, 0x1000C8000313F17);
  }
  *unsigned int v1 = &unk_1EDD17478;
  _Unwind_Resume(exception_object);
}

void sub_18E08ACAC(void *a1)
{
  *a1 = &unk_1EDD174A8;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E08ACDC(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E08ACE8(uint64_t a1)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  sub_18DFE2870(a1, v1);
}

uint64_t sub_18E08AD38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 24) = 0x100000057;
  *(_OWORD *)(a1 + 8) = xmmword_18E1FD660;
  *(void *)(a1 + 32) = a1 + 40;
  *(void *)a1 = &unk_1EDD16D28;
  *(void *)(a1 + 736) = a2;
  *(void *)(a1 + 768) = 0x100000057;
  *(void *)(a1 + 744) = &unk_1EDD199F8;
  *(_OWORD *)(a1 + 752) = xmmword_18E1FD660;
  *(void *)(a1 + 776) = a1 + 784;
  sub_18DFEEA3C(a1 + 744, a3);
  int v5 = *(_DWORD *)(a1 + 752);
  int v6 = *(_DWORD *)(a1 + 756);
  *(_DWORD *)(a1 + 8) = v5;
  *(_DWORD *)(a1 + 12) = v6;
  uint64_t v7 = (v6 * v5);
  *(_DWORD *)(a1 + 16) = v7;
  *(_DWORD *)(a1 + 20) = v5;
  if ((int)v7 >= 1)
  {
    uint64_t v8 = *(int **)(a1 + 776);
    uint64_t v9 = *(void *)(a2 + 32);
    uint64_t v10 = *(void **)(a1 + 32);
    do
    {
      uint64_t v11 = *v8++;
      *v10++ = *(void *)(v9 + 8 * v11);
      --v7;
    }
    while (v7);
  }
  return a1;
}

void sub_18E08AE14(void *a1)
{
  a1[93] = &unk_1EDD174A8;
  *a1 = &unk_1EDD17478;
  JUMPOUT(0x192FA6240);
}

void sub_18E08AE64(uint64_t a1, int a2, int a3)
{
  *(void *)(a1 + 24) = 0x5700000071;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1EDD17748;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  if ((a2 & 0x80000000) == 0)
  {
    *(_DWORD *)(a1 + 8) = a2;
    *(_DWORD *)(a1 + 12) = a3;
    *(_DWORD *)(a1 + 16) = a3 * a2;
    *(_DWORD *)(a1 + 20) = a2;
    sub_18E08B0B0();
  }
  __assert_rtn("CNMatrix", "cnmatrix.h", 419, "nr >= 0");
}

void sub_18E08AEFC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = v1[5];
  v1[5] = 0;
  if (v3) {
    MEMORY[0x192FA6220](v3, 0x1000C8000313F17);
  }
  *unsigned int v1 = &unk_1EDD17478;
  _Unwind_Resume(exception_object);
}

void sub_18E08AF44(void *a1)
{
  sub_18E08BEF0(a1);

  JUMPOUT(0x192FA6240);
}

void sub_18E08AF7C()
{
}

void sub_18E08AFA8()
{
}

void sub_18E08B0B0()
{
}

void sub_18E08B134(void *a1)
{
  sub_18E08B2A0(a1);

  JUMPOUT(0x192FA6240);
}

void sub_18E08B16C()
{
}

void sub_18E08B198()
{
}

void *sub_18E08B2A0(void *a1)
{
  *a1 = &unk_1EDD18888;
  uint64_t v2 = a1[5];
  a1[5] = 0;
  if (v2) {
    MEMORY[0x192FA6220](v2, 0x1000C8000313F17);
  }
  *a1 = &unk_1EDD17478;
  return a1;
}

void *sub_18E08B31C(void *result)
{
  *uint64_t result = &unk_1EDD17478;
  return result;
}

void sub_18E08B33C(void *a1)
{
  *a1 = &unk_1EDD17478;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E08B36C(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E08B378(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  unsigned int v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    unsigned int v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      int v4 = *(_DWORD *)(a1 + 16);
      int v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        uint64_t v6 = (v4 - 1);
        uint64_t v7 = *(void *)(a1 + 32);
        uint64_t v8 = 1;
        do
        {
          uint64_t v9 = &v13[v8];
          if (!v13[v8])
          {
            uint64_t v10 = *(void *)(v7 + 8 * v8);
            int v11 = v8;
            do
            {
              int v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              uint64_t v12 = *(void *)(v7 + 8 * v11);
              *(void *)(v7 + 8 * v11) = v10;
              *uint64_t v9 = 1;
              uint64_t v9 = &v13[v11];
              uint64_t v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

void sub_18E08B470(uint64_t a1)
{
  *(void *)(a1 + 24) = 0x5700000057;
  *(void *)a1 = &unk_1EDD19AB8;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 8) = xmmword_18E1FDA80;
  sub_18E08B584();
}

void sub_18E08B4D4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = v1[5];
  v1[5] = 0;
  if (v3) {
    MEMORY[0x192FA6220](v3, 0x1000C8000313F17);
  }
  *unsigned int v1 = &unk_1EDD17478;
  _Unwind_Resume(exception_object);
}

void sub_18E08B51C(void *a1)
{
  sub_18E08B7D4(a1);

  JUMPOUT(0x192FA6240);
}

void sub_18E08B554()
{
}

void sub_18E08B584()
{
}

void sub_18E08B600()
{
}

void *sub_18E08B674(void *result)
{
  *uint64_t result = &unk_1EDD17478;
  return result;
}

void sub_18E08B694(void *a1)
{
  *a1 = &unk_1EDD17478;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E08B6C4(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E08B6D0(uint64_t a1)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  sub_18DEF3CF4(a1, v1);
}

void sub_18E08B728(uint64_t a1, int a2, int a3)
{
  *(void *)(a1 + 24) = 0x5700000057;
  *(void *)a1 = &unk_1EDD19AB8;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = a3;
  *(_DWORD *)(a1 + 16) = a3 * a2;
  *(_DWORD *)(a1 + 20) = a2;
  sub_18E08B584();
}

void sub_18E08B78C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = v1[5];
  v1[5] = 0;
  if (v3) {
    MEMORY[0x192FA6220](v3, 0x1000C8000313F17);
  }
  *unsigned int v1 = &unk_1EDD17478;
  _Unwind_Resume(exception_object);
}

void *sub_18E08B7D4(void *a1)
{
  *a1 = &unk_1EDD19AB8;
  uint64_t v2 = a1[5];
  a1[5] = 0;
  if (v2) {
    MEMORY[0x192FA6220](v2, 0x1000C8000313F17);
  }
  *a1 = &unk_1EDD17478;
  return a1;
}

void sub_18E08B850(void *a1)
{
  *a1 = &unk_1EDD174A8;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E08B880(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E08B88C(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  unsigned int v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    unsigned int v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      int v4 = *(_DWORD *)(a1 + 16);
      int v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        uint64_t v6 = (v4 - 1);
        uint64_t v7 = *(void *)(a1 + 32);
        uint64_t v8 = 1;
        do
        {
          uint64_t v9 = &v13[v8];
          if (!v13[v8])
          {
            int v10 = *(_DWORD *)(v7 + 4 * v8);
            int v11 = v8;
            do
            {
              int v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              int v12 = *(_DWORD *)(v7 + 4 * v11);
              *(_DWORD *)(v7 + 4 * v11) = v10;
              *uint64_t v9 = 1;
              uint64_t v9 = &v13[v11];
              int v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

void sub_18E08B984(void *a1)
{
  *a1 = &unk_1EDD174A8;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E08B9B4(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E08B9C0(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  unsigned int v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    unsigned int v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      int v4 = *(_DWORD *)(a1 + 16);
      int v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        uint64_t v6 = (v4 - 1);
        uint64_t v7 = *(void *)(a1 + 32);
        uint64_t v8 = 1;
        do
        {
          uint64_t v9 = &v13[v8];
          if (!v13[v8])
          {
            int v10 = *(_DWORD *)(v7 + 4 * v8);
            int v11 = v8;
            do
            {
              int v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              int v12 = *(_DWORD *)(v7 + 4 * v11);
              *(_DWORD *)(v7 + 4 * v11) = v10;
              *uint64_t v9 = 1;
              uint64_t v9 = &v13[v11];
              int v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

void sub_18E08BAB8(void *a1)
{
  *a1 = &unk_1EDD174A8;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E08BAE8(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E08BAF4(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  unsigned int v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    unsigned int v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      int v4 = *(_DWORD *)(a1 + 16);
      int v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        uint64_t v6 = (v4 - 1);
        uint64_t v7 = *(void *)(a1 + 32);
        uint64_t v8 = 1;
        do
        {
          uint64_t v9 = &v13[v8];
          if (!v13[v8])
          {
            int v10 = *(_DWORD *)(v7 + 4 * v8);
            int v11 = v8;
            do
            {
              int v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              int v12 = *(_DWORD *)(v7 + 4 * v11);
              *(_DWORD *)(v7 + 4 * v11) = v10;
              *uint64_t v9 = 1;
              uint64_t v9 = &v13[v11];
              int v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

double sub_18E08BBEC(void *a1, unsigned int a2)
{
  a1[3] = 0x100000031;
  a1[4] = 0;
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1EDD192A8;
  if ((a2 & 0x80000000) != 0) {
    __assert_rtn("CNMatrix", "cnmatrix.h", 419, "nr >= 0");
  }
  int32x4_t v2 = vdupq_lane_s32((int32x2_t)(a2 | 0x100000000), 0);
  v2.i32[1] = 1;
  *(int32x4_t *)(a1 + 1) = v2;
  a1[4] = a1 + 5;
  return *(double *)v2.i64;
}

void sub_18E08BC88(_Unwind_Exception *a1)
{
  *unsigned int v1 = &unk_1EDD174A8;
  _Unwind_Resume(a1);
}

void *sub_18E08BCA8(void *a1)
{
  *a1 = &unk_1EDD17898;
  uint64_t v2 = a1[5];
  a1[5] = 0;
  if (v2) {
    MEMORY[0x192FA6220](v2, 0x1000C8000313F17);
  }
  *a1 = &unk_1EDD17478;
  return a1;
}

void sub_18E08BD24(void *a1)
{
  *a1 = &unk_1EDD16248;
  a1[80] = &unk_1EDD174A8;
  a1[7] = &unk_1EDD174A8;
  sub_18E08BCA8(a1);

  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E08BDB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 24) = 0x100000088;
  *(_OWORD *)(a1 + 8) = xmmword_18E1FDA10;
  *(void *)(a1 + 32) = a1 + 40;
  *(void *)a1 = &unk_1EDD168D8;
  *(void *)(a1 + 1128) = a2;
  uint64_t v5 = a1 + 1136;
  *(void *)(a1 + 1160) = 0x100000088;
  *(void *)(a1 + 1136) = &unk_1EDD17868;
  *(_OWORD *)(a1 + 1144) = xmmword_18E1FDA10;
  *(void *)(a1 + 1168) = a1 + 1176;
  sub_18DFEEA3C(a1 + 1136, a3);
  int v6 = *(_DWORD *)(v5 + 8);
  int v7 = *(_DWORD *)(a1 + 1148);
  *(_DWORD *)(a1 + 8) = v6;
  *(_DWORD *)(a1 + 12) = v7;
  uint64_t v8 = (v7 * v6);
  *(_DWORD *)(a1 + 16) = v8;
  *(_DWORD *)(a1 + 20) = v6;
  if ((int)v8 >= 1)
  {
    uint64_t v9 = *(int **)(a1 + 1168);
    uint64_t v10 = *(void *)(a2 + 32);
    int v11 = *(void **)(a1 + 32);
    do
    {
      uint64_t v12 = *v9++;
      *v11++ = *(void *)(v10 + 8 * v12);
      --v8;
    }
    while (v8);
  }
  return a1;
}

void sub_18E08BEA0(void *a1)
{
  a1[142] = &unk_1EDD174A8;
  *a1 = &unk_1EDD17478;
  JUMPOUT(0x192FA6240);
}

void *sub_18E08BEF0(void *a1)
{
  *a1 = &unk_1EDD17748;
  uint64_t v2 = a1[5];
  a1[5] = 0;
  if (v2) {
    MEMORY[0x192FA6220](v2, 0x1000C8000313F17);
  }
  *a1 = &unk_1EDD17478;
  return a1;
}

void sub_18E08BF6C(uint64_t *a1, _DWORD *a2, _DWORD *a3, unint64_t a4)
{
  uint64_t v8 = (uint64_t)(a1 + 2);
  uint64_t v9 = (_DWORD *)*a1;
  if (a4 > (a1[2] - *a1) >> 5)
  {
    sub_18E08C0B4(a1);
    if (a4 >> 59) {
      sub_18DEE1FC8();
    }
    uint64_t v10 = a1[2] - *a1;
    uint64_t v11 = v10 >> 4;
    if (v10 >> 4 <= a4) {
      uint64_t v11 = a4;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v12 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    sub_18E01AC84(a1, v12);
    uint64_t v13 = sub_18E08C0F0(v8, (uint64_t)a2, (uint64_t)a3, a1[1]);
    goto LABEL_11;
  }
  unint64_t v14 = (a1[1] - (uint64_t)v9) >> 5;
  if (v14 < a4)
  {
    long long v15 = &a2[8 * v14];
    sub_18E08C240(a2, v15, v9);
    uint64_t v13 = sub_18E08C0F0(v8, (uint64_t)v15, (uint64_t)a3, a1[1]);
LABEL_11:
    a1[1] = v13;
    return;
  }
  sub_18E08C240(a2, a3, v9);
  uint64_t v17 = v16;
  uint64_t v18 = a1[1];
  if (v18 != v16)
  {
    do
    {
      if (*(char *)(v18 - 1) < 0) {
        operator delete(*(void **)(v18 - 24));
      }
      v18 -= 32;
    }
    while (v18 != v17);
  }
  a1[1] = v17;
}

void sub_18E08C0A4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_18E08C0AC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_18E08C0B4(uint64_t *a1)
{
  if (*a1)
  {
    sub_18E06950C(a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t sub_18E08C0F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v13 = a4;
  uint64_t v14 = a4;
  v11[0] = a1;
  v11[1] = &v13;
  void v11[2] = &v14;
  char v12 = 0;
  if (a2 != a3)
  {
    int v6 = (long long *)(a2 + 8);
    do
    {
      uint64_t v7 = (uint64_t)v6 - 8;
      *(_DWORD *)uint64_t v4 = *((_DWORD *)v6 - 2);
      uint64_t v8 = (unsigned char *)(v4 + 8);
      if (*((char *)v6 + 23) < 0)
      {
        sub_18DEDE668(v8, *(void **)v6, *((void *)v6 + 1));
        uint64_t v4 = v14;
      }
      else
      {
        long long v9 = *v6;
        *(void *)(v4 + 24) = *((void *)v6 + 2);
        *(_OWORD *)uint64_t v8 = v9;
      }
      v4 += 32;
      uint64_t v14 = v4;
      v6 += 2;
    }
    while (v7 + 32 != a3);
  }
  char v12 = 1;
  sub_18E08C1C0((uint64_t)v11);
  return v4;
}

void sub_18E08C1AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_18E08C1C0(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_18E08C1F8(a1);
  }
  return a1;
}

void sub_18E08C1F8(uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 1) < 0) {
      operator delete(*(void **)(v1 - 24));
    }
    v1 -= 32;
  }
}

_DWORD *sub_18E08C240(_DWORD *a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t v4 = a1;
  if (a1 == a2) {
    return a1;
  }
  uint64_t v5 = a2;
  do
  {
    int v6 = (const std::string *)(v4 + 2);
    int v7 = *v4;
    v4 += 8;
    uint64_t v8 = (std::string *)(a3 + 2);
    *a3 = v7;
    a3 += 8;
    std::string::operator=(v8, v6);
  }
  while (v4 != v5);
  return v5;
}

void sub_18E08C2A4(uint64_t a1)
{
  *(void *)(a1 + 24) = 0x100000057;
  *(void *)a1 = &unk_1EDD19908;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)(a1 + 8) = xmmword_18E1FD660;
  sub_18E08C474();
}

void sub_18E08C31C(_Unwind_Exception *a1)
{
  sub_18E08C410(v2);
  *uint64_t v1 = &unk_1EDD170B8;
  _Unwind_Resume(a1);
}

void sub_18E08C354(void *a1)
{
  *a1 = &unk_1EDD19908;
  sub_18E08C410(a1 + 5);
  *a1 = &unk_1EDD170B8;

  JUMPOUT(0x192FA6240);
}

void sub_18E08C3D8()
{
}

uint64_t *sub_18E08C410(uint64_t *result)
{
  uint64_t v1 = *result;
  *uint64_t result = 0;
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 - 8);
    if (v2)
    {
      uint64_t v3 = 736 * v2;
      uint64_t v4 = v1 - 736;
      do
      {
        *(void *)(v4 + v3) = &unk_1EDD17478;
        v3 -= 736;
      }
      while (v3);
    }
    JUMPOUT(0x192FA6220);
  }
  return result;
}

void sub_18E08C474()
{
}

uint64_t *sub_18E08C534(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 - 8);
    if (v3)
    {
      uint64_t v4 = 736 * v3;
      uint64_t v5 = v2 - 736;
      do
      {
        *(void *)(v5 + v4) = &unk_1EDD17478;
        v4 -= 736;
      }
      while (v4);
    }
    JUMPOUT(0x192FA6220);
  }
  return result;
}

void sub_18E08C598()
{
}

void sub_18E08C618(_Unwind_Exception *a1)
{
  MEMORY[0x192FA6220](v1, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

void sub_18E08C63C(uint64_t a1, char *a2)
{
  unsigned int v2 = *(_DWORD *)(a1 + 8);
  if (v2 >= 2)
  {
    unsigned int v4 = *(_DWORD *)(a1 + 12);
    if (v4 >= 2)
    {
      int v6 = *(_DWORD *)(a1 + 20);
      bzero(a2, *(unsigned int *)(a1 + 16));
      int v7 = *(_DWORD *)(a1 + 16);
      if (v7 >= 3)
      {
        int v8 = v4 + v2 - v6;
        uint64_t v9 = (v7 - 1);
        uint64_t v10 = 1;
        do
        {
          sub_18E08C744((uint64_t)v14, *(void *)(a1 + 32) + 736 * v10);
          uint64_t v11 = &a2[v10];
          if (!a2[v10])
          {
            int v12 = v10;
            do
            {
              int v12 = v12 * v8 % (int)v9;
              sub_18E08C744((uint64_t)v13, *(void *)(a1 + 32) + 736 * v12);
              sub_18DFE2F24(*(void *)(a1 + 32) + 736 * v12, (uint64_t)v14);
              *uint64_t v11 = 1;
              sub_18DFE2F24((uint64_t)v14, (uint64_t)v13);
              uint64_t v11 = &a2[v12];
            }
            while (!*v11);
          }
          ++v10;
        }
        while (v10 != v9);
      }
    }
  }
}

__n128 sub_18E08C744(uint64_t a1, uint64_t a2)
{
  result.n128_u64[0] = 0x100000057;
  *(void *)(a1 + 24) = 0x100000057;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1EDD199C8;
  if (a1 == a2)
  {
    uint64_t v17 = "this != &(A)";
    int v18 = 603;
    goto LABEL_16;
  }
  int v3 = *(_DWORD *)(a2 + 8);
  int v4 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = v4;
  uint64_t v5 = (v4 * v3);
  *(_DWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 20) = v3;
  int v6 = (unint64_t *)(a1 + 40);
  *(void *)(a1 + 32) = a1 + 40;
  if (*(_DWORD *)(a2 + 8) > 0x57u)
  {
    uint64_t v17 = "this->max_num_rows_ >= A.num_rows_";
    int v18 = 616;
    goto LABEL_16;
  }
  if (*(_DWORD *)(a2 + 12) >= 2u)
  {
    uint64_t v17 = "this->max_num_cols_ >= A.num_cols_";
    int v18 = 617;
LABEL_16:
    __assert_rtn("CNMatrix", "cnmatrix.h", v18, v17);
  }
  int v7 = *(_DWORD *)(a2 + 16);
  if (v7 > 3)
  {
    uint64_t v10 = (v7 - 2);
    uint64_t v11 = *(long long **)(a2 + 32);
    uint64_t v12 = (v7 - 1) >> 1;
    uint64_t v13 = v11;
    uint64_t v14 = (_OWORD *)(a1 + 40);
    do
    {
      long long v15 = *v13++;
      *v14++ = v15;
      --v12;
    }
    while (v12);
    uint64_t v16 = v10;
    __n128 result = *(__n128 *)((char *)v11 + v16 * 8);
    *(__n128 *)&v6[v16] = result;
  }
  else if ((int)v5 >= 1)
  {
    int v8 = *(unint64_t **)(a2 + 32);
    do
    {
      unint64_t v9 = *v8++;
      result.n128_u64[0] = v9;
      *v6++ = v9;
      --v5;
    }
    while (v5);
  }
  return result;
}

void sub_18E08C874(_Unwind_Exception *a1)
{
  *uint64_t v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

void sub_18E08C894(uint64_t a1)
{
}

void sub_18E08CA1C(_Unwind_Exception *a1)
{
  char v1[24] = &unk_1EDD174A8;
  char v1[7] = &unk_1EDD174A8;
  sub_18E06B400(v1);
  _Unwind_Resume(a1);
}

void sub_18E08CA68(void *a1)
{
  *a1 = &unk_1EDD163C8;
  a1[24] = &unk_1EDD174A8;
  a1[7] = &unk_1EDD174A8;
  sub_18E06B400(a1);

  JUMPOUT(0x192FA6240);
}

void sub_18E08CAFC(uint64_t a1)
{
}

void sub_18E08CC94(_Unwind_Exception *a1)
{
  char v1[24] = &unk_1EDD174A8;
  char v1[7] = &unk_1EDD174A8;
  sub_18E0683EC(v1);
  _Unwind_Resume(a1);
}

void sub_18E08CCE0(void *a1)
{
  *a1 = &unk_1EDD163F8;
  a1[24] = &unk_1EDD174A8;
  a1[7] = &unk_1EDD174A8;
  sub_18E0683EC(a1);

  JUMPOUT(0x192FA6240);
}

void sub_18E08CD74(uint64_t a1)
{
  *(void *)(a1 + 24) = 0x3400000034;
  *(void *)a1 = &unk_1EDD195D8;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 8) = xmmword_18E1FDAA0;
  sub_18E08CF8C();
}

void sub_18E08CDD8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = v1[5];
  v1[5] = 0;
  if (v3) {
    MEMORY[0x192FA6220](v3, 0x1000C8000313F17);
  }
  *uint64_t v1 = &unk_1EDD17478;
  _Unwind_Resume(exception_object);
}

void sub_18E08CE20(void *a1)
{
  sub_18E08D008(a1);

  JUMPOUT(0x192FA6240);
}

void sub_18E08CE58()
{
}

void sub_18E08CE84()
{
}

void sub_18E08CF8C()
{
}

void *sub_18E08D008(void *a1)
{
  *a1 = &unk_1EDD195D8;
  uint64_t v2 = a1[5];
  a1[5] = 0;
  if (v2) {
    MEMORY[0x192FA6220](v2, 0x1000C8000313F17);
  }
  *a1 = &unk_1EDD17478;
  return a1;
}

void sub_18E08D084(uint64_t a1)
{
  *(void *)(a1 + 24) = 0x2E0000002ELL;
  *(void *)a1 = &unk_1EDD191E8;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 8) = xmmword_18E1FDAB0;
  sub_18E08D29C();
}

void sub_18E08D0E8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = v1[5];
  v1[5] = 0;
  if (v3) {
    MEMORY[0x192FA6220](v3, 0x1000C8000313F17);
  }
  *uint64_t v1 = &unk_1EDD17478;
  _Unwind_Resume(exception_object);
}

void sub_18E08D130(void *a1)
{
  sub_18E08D318(a1);

  JUMPOUT(0x192FA6240);
}

void sub_18E08D168()
{
}

void sub_18E08D194()
{
}

void sub_18E08D29C()
{
}

void *sub_18E08D318(void *a1)
{
  *a1 = &unk_1EDD191E8;
  uint64_t v2 = a1[5];
  a1[5] = 0;
  if (v2) {
    MEMORY[0x192FA6220](v2, 0x1000C8000313F17);
  }
  *a1 = &unk_1EDD17478;
  return a1;
}

void sub_18E08D394(uint64_t a1)
{
  *(void *)(a1 + 24) = 0x3100000031;
  *(void *)a1 = &unk_1EDD192D8;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 8) = xmmword_18E1FDAC0;
  sub_18E08D6BC();
}

void sub_18E08D3F8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = v1[5];
  v1[5] = 0;
  if (v3) {
    MEMORY[0x192FA6220](v3, 0x1000C8000313F17);
  }
  *uint64_t v1 = &unk_1EDD17478;
  _Unwind_Resume(exception_object);
}

void *sub_18E08D440(void *a1)
{
  *a1 = &unk_1EDD192D8;
  uint64_t v2 = a1[5];
  a1[5] = 0;
  if (v2) {
    MEMORY[0x192FA6220](v2, 0x1000C8000313F17);
  }
  *a1 = &unk_1EDD17478;
  return a1;
}

void sub_18E08D4BC(void *a1)
{
  *a1 = &unk_1EDD166F8;
  a1[37] = &unk_1EDD174A8;
  a1[7] = &unk_1EDD174A8;
  sub_18E08D440(a1);

  JUMPOUT(0x192FA6240);
}

void sub_18E08D550()
{
}

void sub_18E08D57C()
{
}

void sub_18E08D684(void *a1)
{
  sub_18E08D440(a1);

  JUMPOUT(0x192FA6240);
}

void sub_18E08D6BC()
{
}

void sub_18E08D738(void *a1)
{
  a1[55] = &unk_1EDD174A8;
  *a1 = &unk_1EDD17478;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E08D788(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E08D794(uint64_t a1)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  sub_18DEF3CF4(a1, v1);
}

void sub_18E08D7E4(void *a1)
{
  *a1 = &unk_1EDD17478;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E08D814(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 5)
  {
    if (a2 >> 59) {
      sub_18DEE1FC8();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_18E01ACC8(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 32 * v6;
    sub_18E08988C(a1, v7);
    return sub_18E089A28((uint64_t)v7);
  }
  return result;
}

void sub_18E08D894(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_18E089A28((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_18E08D8A8(uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(result - 8);
  if (v7 >= v6)
  {
    uint64_t v10 = (uint64_t)(v7 - *a1) >> 5;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 59) {
      sub_18DEE1FC8();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 4 > v11) {
      unint64_t v11 = v12 >> 4;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v13 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v17[4] = result;
    if (v13) {
      uint64_t v14 = (char *)sub_18E01ACC8(result, v13);
    }
    else {
      uint64_t v14 = 0;
    }
    long long v15 = &v14[32 * v10];
    v17[0] = v14;
    v17[1] = v15;
    v17[3] = &v14[32 * v13];
    *(_DWORD *)long long v15 = *(_DWORD *)a2;
    long long v16 = *(_OWORD *)(a2 + 8);
    *((void *)v15 + 3) = *(void *)(a2 + 24);
    *(_OWORD *)(v15 + 8) = v16;
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 8) = 0;
    double v17[2] = v15 + 32;
    sub_18E08988C(a1, v17);
    uint64_t v9 = a1[1];
    uint64_t result = sub_18E089A28((uint64_t)v17);
  }
  else
  {
    *(_DWORD *)unint64_t v7 = *(_DWORD *)a2;
    long long v8 = *(_OWORD *)(a2 + 8);
    *(void *)(v7 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(v7 + 8) = v8;
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 8) = 0;
    uint64_t v9 = v7 + 32;
    a1[1] = v7 + 32;
  }
  a1[1] = v9;
  return result;
}

void sub_18E08D9C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_18E089A28((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_18E08D9D4(void *a1)
{
  *a1 = &unk_1EDD19A58;
  uint64_t v2 = a1[5];
  a1[5] = 0;
  if (v2) {
    MEMORY[0x192FA6220](v2, 0x1000C8000313F17);
  }
  *a1 = &unk_1EDD17478;
  return a1;
}

void sub_18E08DA50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  MEMORY[0x1F4188790](a1);
  int v41 = v10;
  uint64_t v12 = v11;
  uint64_t v14 = v13;
  uint64_t v16 = v15;
  int v42 = v17;
  uint64_t v19 = v18;
  sub_18E088434((uint64_t)&v47, a10, 0);
  unsigned int v45 = v46;
  uint64_t v20 = v49;
  *(_DWORD *)int v44 = 1;
  *(_DWORD *)&v44[4] = v49;
  *(_DWORD *)&v44[20] = 1;
  *(_DWORD *)&v44[8] = v49;
  *(void *)&v44[12] = 0x400000001;
  if (v49)
  {
    uint64_t v21 = 0;
    uint64_t v22 = v50;
    unsigned int v23 = v48;
    uint64_t v24 = v48 - 1;
    int v25 = 1;
    do
    {
      int v26 = *(_DWORD *)(v22 + 4 * v23 * v21);
      unsigned int v27 = v25;
      uint64_t v28 = v24;
      if (v23 >= 2)
      {
        do
        {
          v26 += *(_DWORD *)(v22 + 4 * v27++);
          --v28;
        }
        while (v28);
      }
      v46[v21++] = v26;
      v25 += v23;
    }
    while (v21 != v20);
  }
  sub_18E088434((uint64_t)&v47, a10, 1);
  unsigned int v45 = v46;
  uint64_t v29 = v49;
  *(_DWORD *)int v44 = 1;
  *(_DWORD *)&v44[4] = v49;
  *(_DWORD *)&v44[20] = 1;
  *(_DWORD *)&v44[8] = v49;
  *(void *)&v44[12] = 0x400000001;
  if (v49)
  {
    uint64_t v30 = 0;
    uint64_t v31 = v50;
    unsigned int v32 = v48;
    uint64_t v33 = v48 - 1;
    int v34 = 1;
    do
    {
      int v35 = *(_DWORD *)(v31 + 4 * v32 * v30);
      unsigned int v36 = v34;
      uint64_t v37 = v33;
      if (v32 >= 2)
      {
        do
        {
          v35 += *(_DWORD *)(v31 + 4 * v36++);
          --v37;
        }
        while (v37);
      }
      v46[v30++] = v35;
      v34 += v32;
    }
    while (v30 != v29);
  }
  if (*(_DWORD *)(v16 + 8) && *(_DWORD *)(v16 + 12))
  {
    sub_18DFE2F24(v19 + 552, v16);
    int v38 = v42;
  }
  else
  {
    int v38 = v42;
    if (v42 < 0) {
      __assert_rtn("Zeros", "cnmatrix.h", 3098, "nr >= 0");
    }
    *(void *)&v44[16] = 0x10000001ALL;
    int v43 = &unk_1EDD186A8;
    unsigned int v45 = v46;
    *(_DWORD *)int v44 = v42;
    *(_DWORD *)&v44[4] = 1;
    *(_DWORD *)&v44[8] = v42;
    *(_DWORD *)&v44[12] = v42;
    sub_18DFE2CC8((uint64_t)&v43, 0.0);
    sub_18DFE2F24(v19 + 552, (uint64_t)&v43);
  }
  if (*(_DWORD *)(v14 + 8) && *(_DWORD *)(v14 + 12))
  {
    sub_18DFE2F24(v19 + 800, v14);
    if (*(_DWORD *)(v12 + 8) && *(_DWORD *)(v12 + 12))
    {
      uint64_t v39 = v19 + 848;
      uint64_t v40 = (void **)v12;
    }
    else
    {
      *(void *)&v44[16] = 0x10000001ALL;
      *(_OWORD *)int v44 = xmmword_18E1FD600;
      int v43 = &unk_1EDD186A8;
      unsigned int v45 = v46;
      sub_18DFE2B44(v19 + 800, v19 + 552, (uint64_t)&v43);
      uint64_t v39 = v19 + 848;
      uint64_t v40 = &v43;
    }
    sub_18DFE2F24(v39, (uint64_t)v40);
    if ((v38 & 0x80000000) == 0) {
      sub_18E089660((uint64_t)&v43, v41, v38);
    }
    __assert_rtn("Zeros", "cnmatrix.h", 3099, "nc >= 0");
  }
  if ((v38 & 0x80000000) == 0) {
    sub_18E06E4BC((uint64_t)&v43, v38, v38);
  }
  __assert_rtn("Zeros", "cnmatrix.h", 3056, "n >= 0");
}

void sub_18E09040C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11, unint64_t a12)
{
  STACK[0xF58] = a11;
  for (uint64_t i = 184; i != -8; i -= 48)
    sub_18E071BB8((unint64_t *)((char *)&STACK[0xF58] + i));
  STACK[0x1040] = a12;
  for (uint64_t j = 184; j != -8; j -= 48)
    sub_18E06B5D4((unint64_t *)((char *)&STACK[0x1040] + j));
  for (uint64_t k = 784; k != -208; k -= 248)
    *(unint64_t *)((char *)&STACK[0x1128] + k) = (unint64_t)&unk_1EDD17478;
  _Unwind_Resume(a1);
}

double sub_18E0907F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(a3 + 8);
  int v4 = *(_DWORD *)(a3 + 12);
  uint64_t v5 = (v4 * v3);
  *(void *)&double result = 0x100000017;
  *(void *)(a1 + 24) = 0x100000017;
  *(void *)a1 = &unk_1EDD18528;
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = v4;
  *(_DWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 20) = v3;
  unint64_t v7 = (double *)(a1 + 40);
  *(void *)(a1 + 32) = a1 + 40;
  if (v5)
  {
    long long v8 = *(int **)(a3 + 32);
    do
    {
      uint64_t v9 = *v8++;
      double result = *(double *)(a2 + 8 * v9);
      *v7++ = result;
      --v5;
    }
    while (v5);
  }
  return result;
}

void *sub_18E09085C(void *a1)
{
  *a1 = &unk_1EDD19368;
  for (uint64_t i = 23; i != -1; i -= 6)
    sub_18E071BB8(&a1[i]);
  *a1 = &unk_1EDD16FC8;
  return a1;
}

void *sub_18E0908D0(void *a1)
{
  *a1 = &unk_1EDD19398;
  for (uint64_t i = 23; i != -1; i -= 6)
    sub_18E06B5D4(&a1[i]);
  *a1 = &unk_1EDD16FF8;
  return a1;
}

void *sub_18E090944(void *result)
{
  for (uint64_t i = 98; i != -26; i -= 31)
    result[i] = &unk_1EDD17478;
  *double result = &unk_1EDD16F98;
  return result;
}

void sub_18E090994(void *a1)
{
  for (uint64_t i = 98; i != -26; i -= 31)
    a1[i] = &unk_1EDD17478;
  *a1 = &unk_1EDD16F98;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E0909F4(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E090A00(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    unsigned int v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      int v4 = *(_DWORD *)(a1 + 16);
      int v5 = *(_DWORD *)(a1 + 20);
      bzero(v12, v4);
      if (v4 >= 3)
      {
        int v6 = v3 + v1 - v5;
        uint64_t v7 = (v4 - 1);
        uint64_t v8 = 1;
        do
        {
          sub_18E07F6DC((uint64_t)v14, *(void *)(a1 + 32) + 248 * v8);
          uint64_t v9 = &v12[v8];
          if (!v12[v8])
          {
            int v10 = v8;
            do
            {
              int v10 = v10 * v6 % (int)v7;
              uint64_t v11 = 248 * v10;
              sub_18E07F6DC((uint64_t)v13, *(void *)(a1 + 32) + v11);
              sub_18DFE2F24(*(void *)(a1 + 32) + v11, (uint64_t)v14);
              *uint64_t v9 = 1;
              sub_18DFE2F24((uint64_t)v14, (uint64_t)v13);
              uint64_t v9 = &v12[v10];
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v7);
      }
    }
  }
}

void sub_18E090B18(void *a1)
{
  *a1 = &unk_1EDD19398;
  for (uint64_t i = 23; i != -1; i -= 6)
    sub_18E06B5D4(&a1[i]);
  *a1 = &unk_1EDD16FF8;

  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E090BAC(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E090BB8(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 8) >= 2u && *(_DWORD *)(a1 + 12) >= 2u)
  {
    int v2 = *(_DWORD *)(a1 + 16);
    bzero(v3, v2);
    if (v2 >= 3) {
      sub_18E06E6BC((uint64_t)v4, *(void *)(a1 + 32) + 48);
    }
  }
}

void sub_18E090CD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_18E06B5D4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_18E090CF0(void *a1)
{
  *a1 = &unk_1EDD19368;
  for (uint64_t i = 23; i != -1; i -= 6)
    sub_18E071BB8(&a1[i]);
  *a1 = &unk_1EDD16FC8;

  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E090D84(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E090D90(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 8) >= 2u && *(_DWORD *)(a1 + 12) >= 2u)
  {
    int v2 = *(_DWORD *)(a1 + 16);
    bzero(v3, v2);
    if (v2 >= 3) {
      sub_18E090EC8((uint64_t)v4, *(void *)(a1 + 32) + 48);
    }
  }
}

void sub_18E090EAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_18E071BB8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_18E090EC8(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 24) = 0x170000001ALL;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1EDD18738;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  if (a1 != a2)
  {
    int v2 = *(_DWORD *)(a2 + 8);
    int v3 = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(a1 + 8) = v2;
    *(_DWORD *)(a1 + 12) = v3;
    *(_DWORD *)(a1 + 16) = v3 * v2;
    *(_DWORD *)(a1 + 20) = v2;
    sub_18E0684D0();
  }
  __assert_rtn("CNMatrix", "cnmatrix.h", 603, "this != &(A)");
}

void sub_18E091024(_Unwind_Exception *exception_object)
{
  uint64_t v3 = v1[5];
  v1[5] = 0;
  if (v3) {
    MEMORY[0x192FA6220](v3, 0x1000C8000313F17);
  }
  *unsigned int v1 = &unk_1EDD17478;
  _Unwind_Resume(exception_object);
}

void sub_18E09106C(void *a1)
{
  sub_18E0914B8(a1);

  JUMPOUT(0x192FA6240);
}

void sub_18E0910A4()
{
}

void sub_18E0910D0()
{
}

void sub_18E0911D8()
{
}

void sub_18E091254(void *a1)
{
  sub_18E09143C(a1);

  JUMPOUT(0x192FA6240);
}

void sub_18E09128C()
{
}

void sub_18E0912B8()
{
}

void sub_18E0913C0()
{
}

void *sub_18E09143C(void *a1)
{
  *a1 = &unk_1EDD18828;
  uint64_t v2 = a1[5];
  a1[5] = 0;
  if (v2) {
    MEMORY[0x192FA6220](v2, 0x1000C8000313F17);
  }
  *a1 = &unk_1EDD17478;
  return a1;
}

void *sub_18E0914B8(void *a1)
{
  *a1 = &unk_1EDD185E8;
  uint64_t v2 = a1[5];
  a1[5] = 0;
  if (v2) {
    MEMORY[0x192FA6220](v2, 0x1000C8000313F17);
  }
  *a1 = &unk_1EDD17478;
  return a1;
}

void *sub_18E091534(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    int v6 = result;
    sub_18E01AC84(result, a4);
    double result = (void *)sub_18E08C0F0((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_18E09159C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_18E0694B8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_18E0915BC(uint64_t a1, double *a2, long double *a3, double *a4)
{
  double v5 = *a2;
  if (*a2 < 0.0 || v5 > 1.0)
  {
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)a1) <= 1)
    {
      __int16 v40 = 2;
      unsigned __int8 v39 = 1;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v40, &v39, "WARNING: DiscreteEventDetector::Predict called with bad x %.3lf.", v7, v8, v9, v10, v11, *(void *)a2);
    }
    return 0xFFFFFFFFLL;
  }
  if (*a3 < 0.0 || *a3 > 1.0)
  {
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)a1) <= 1)
    {
      __int16 v38 = 2;
      unsigned __int8 v37 = 1;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v38, &v37, "WARNING: DiscreteEventDetector::Predict called with bad pxbargx %.3lf.", v14, v15, v16, v17, v18, *(void *)a3);
    }
    return 0xFFFFFFFFLL;
  }
  if (*a4 < 0.0 || *a4 > 1.0)
  {
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)a1) <= 1)
    {
      __int16 v36 = 2;
      unsigned __int8 v35 = 1;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v36, &v35, "WARNING: DiscreteEventDetector::Predict called with bad pxbargnx %.3lf.", v30, v31, v32, v33, v34, *(void *)a4);
    }
    return 0xFFFFFFFFLL;
  }
  *(double *)(a1 + 8) = v5;
  double v21 = 0.0;
  double v22 = fmax(1.0 - v5, 0.0);
  *(void *)a1 = 0;
  if (fabs(v5) >= 2.22044605e-16 && fabs(*a3) >= 2.22044605e-16)
  {
    double v23 = log(*a3);
    long double v24 = log(v5);
    double v21 = exp(v24 + v23);
    *(double *)a1 = v21;
  }
  double v25 = fabs(*a4);
  if (fabs(v22) >= 2.22044605e-16 && v25 >= 2.22044605e-16)
  {
    double v27 = log(*a4);
    long double v28 = log(v22);
    double v21 = v21 + exp(v28 + v27);
  }
  uint64_t result = 0;
  *(double *)a1 = fmin(v21, 1.0);
  *(_DWORD *)(a1 + 16) = 0;
  return result;
}

uint64_t sub_18E0917E0(uint64_t a1)
{
  double v2 = 1.0 - *(double *)(a1 + 56);
  double v5 = 1.0 - *(double *)(a1 + 64);
  double v6 = v2;
  uint64_t v3 = (double *)(a1 + 8);
  if (*(_DWORD *)(a1 + 24) == 1) {
    *(void *)(a1 + 8) = *(void *)(a1 + 16);
  }
  return sub_18E079A00((uint64_t)v3, v3, &v6, &v5);
}

__n128 sub_18E09183C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_18E091994(a1, 1, a2, a3);
  if (*(_DWORD *)(a1 + 8) == 1 || *(_DWORD *)(a1 + 12) == 1)
  {
    if (*(int *)(a2 + 16) >= 2)
    {
      uint64_t v8 = 1;
      uint64_t v9 = 16;
      do
      {
        if (sub_18DEE4C00((double *)(*(void *)(a2 + 32) + v9), *(double **)(a2 + 32)))
        {
          *(_OWORD *)*(void *)(a2 + 32) = *(_OWORD *)(*(void *)(a2 + 32) + v9);
          **(_DWORD **)(a3 + 32) = *(_DWORD *)(*(void *)(a3 + 32) + 4 * v8);
        }
        ++v8;
        v9 += 16;
      }
      while (v8 < *(int *)(a2 + 16));
    }
    result.n128_u64[0] = 0x100000001;
    result.n128_u64[1] = 0x100000001;
    *(__n128 *)(a2 + 8) = result;
    *(__n128 *)(a3 + 8) = result;
  }
  return result;
}

void *sub_18E0918E8(void *result)
{
  *__n128 result = &unk_1EDD174D8;
  return result;
}

void sub_18E091908(void *a1)
{
  *a1 = &unk_1EDD174D8;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E091938(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E091944(uint64_t a1)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  sub_18DFE2870(a1, v1);
}

uint64_t sub_18E091994(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = result;
  if (a2 == 1)
  {
    int v7 = *(_DWORD *)(result + 12);
    *(_DWORD *)(a3 + 8) = 1;
    *(_DWORD *)(a3 + 12) = v7;
    *(_DWORD *)(a3 + 16) = v7;
    *(_DWORD *)(a3 + 20) = 1;
    int v8 = *(_DWORD *)(result + 12);
    *(_DWORD *)(a4 + 8) = 1;
    *(_DWORD *)(a4 + 12) = v8;
    *(_DWORD *)(a4 + 16) = v8;
    *(_DWORD *)(a4 + 20) = 1;
    if (v8)
    {
      unint64_t v9 = 0;
      uint64_t v10 = *(void *)(result + 32);
      uint64_t v11 = *(void *)(a3 + 32);
      uint64_t v12 = *(void *)(a4 + 32);
      while (1)
      {
        uint64_t v13 = *(unsigned int *)(v6 + 8);
        uint64_t v14 = (double *)(v10 + 16 * (v13 * v9));
        double v15 = *v14;
        double v16 = v14[1];
        if (v13 >= 2) {
          break;
        }
        int v17 = 0;
LABEL_22:
        double v23 = (double *)(v11 + 16 * v9);
        *double v23 = v15;
        v23[1] = v16;
        *(_DWORD *)(v12 + 4 * v9++) = v17;
        if (v9 >= *(unsigned int *)(v6 + 12)) {
          return result;
        }
      }
      int v17 = 0;
      uint64_t v18 = 1;
      while (1)
      {
        uint64_t v19 = (double *)(v10 + 16 * (v13 * v9 + v18));
        __n128 result = *(void *)v19;
        double v20 = v19[1];
        if (*(void *)v19) {
          BOOL v21 = 1;
        }
        else {
          BOOL v21 = (*(void *)&v20 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
        }
        if (!v21) {
          goto LABEL_14;
        }
        if (v15 == 0.0 && (*(void *)&v16 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
        {
          if (v20 <= v16)
          {
            double v15 = 0.0;
            goto LABEL_17;
          }
LABEL_16:
          double v15 = *v19;
          double v16 = v20;
          int v17 = v18;
          goto LABEL_17;
        }
        BOOL v22 = result <= *(void *)&v15;
        if (result == *(void *)&v15) {
LABEL_14:
        }
          BOOL v22 = v20 <= v16;
        if (!v22) {
          goto LABEL_16;
        }
LABEL_17:
        if (v13 == ++v18) {
          goto LABEL_22;
        }
      }
    }
  }
  else
  {
    v24.i32[1] = 1;
    v24.i32[0] = *(_DWORD *)(result + 8);
    int32x4_t v25 = vdupq_lane_s32(v24, 0);
    v25.i32[1] = 1;
    *(int32x4_t *)(a3 + 8) = v25;
    unsigned int v26 = *(_DWORD *)(result + 8);
    int32x4_t v27 = vdupq_lane_s32((int32x2_t)(v26 | 0x100000000), 0);
    v27.i32[1] = 1;
    *(int32x4_t *)(a4 + 8) = v27;
    if (v26)
    {
      uint64_t v28 = 0;
      unint64_t v29 = 0;
      do
      {
        *(_OWORD *)(*(void *)(a3 + 32) + v28) = *(_OWORD *)(*(void *)(result + 32) + v28);
        *(_DWORD *)(*(void *)(a4 + 32) + 4 * v29++) = 0;
        v28 += 16;
      }
      while (v29 < *(unsigned int *)(result + 8));
    }
    unsigned int v30 = *(_DWORD *)(result + 12);
    if (v30 >= 2)
    {
      LODWORD(v31) = *(_DWORD *)(result + 8);
      for (unsigned int i = 1; i < v30; ++i)
      {
        if (v31)
        {
          uint64_t v33 = 0;
          unint64_t v34 = 0;
          int v35 = v31 * i;
          do
          {
            long long v36 = *(_OWORD *)(*(void *)(v6 + 32) + 16 * (v35 + v34));
            __n128 result = sub_18DEE4C00((double *)&v36, (double *)(*(void *)(a3 + 32) + v33));
            if (result)
            {
              *(_OWORD *)(*(void *)(a3 + 32) + v33) = v36;
              *(_DWORD *)(*(void *)(a4 + 32) + 4 * v34) = i;
            }
            ++v34;
            unint64_t v31 = *(unsigned int *)(v6 + 8);
            v33 += 16;
          }
          while (v34 < v31);
          unsigned int v30 = *(_DWORD *)(v6 + 12);
        }
      }
    }
  }
  return result;
}

void *sub_18E091BC8(void *result)
{
  result[354] = &unk_1EDD174A8;
  *__n128 result = &unk_1EDD16ED8;
  return result;
}

void *sub_18E091C08(void *result)
{
  result[93] = &unk_1EDD174A8;
  *__n128 result = &unk_1EDD174A8;
  return result;
}

void *sub_18E091C48(void *result)
{
  result[180] = &unk_1EDD174A8;
  *__n128 result = &unk_1EDD17478;
  return result;
}

void *sub_18E091C88(void *a1)
{
  a1[7] = &unk_1EDD174A8;
  *a1 = &unk_1EDD179E8;
  sub_18E066E88(a1 + 5);
  *a1 = &unk_1EDD17028;
  return a1;
}

void *sub_18E091D0C(void *a1)
{
  a1[7] = &unk_1EDD174A8;
  *a1 = &unk_1EDD17A18;
  sub_18E066A94(a1 + 5);
  *a1 = &unk_1EDD17058;
  return a1;
}

void *sub_18E091D90(void *result)
{
  result[180] = &unk_1EDD174A8;
  *__n128 result = &unk_1EDD172C8;
  return result;
}

void *sub_18E091DD0(void *result)
{
  result[180] = &unk_1EDD174A8;
  *__n128 result = &unk_1EDD173E8;
  return result;
}

uint64_t sub_18E091E10(uint64_t result, int a2, int a3)
{
  *(void *)(result + 24) = 0x1000000AELL;
  *(void *)(result + 32) = 0;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)__n128 result = &unk_1EDD17B08;
  if (a2 < 0)
  {
    uint64_t v3 = "nr >= 0";
    int v4 = 419;
    goto LABEL_6;
  }
  if (a3 < 0)
  {
    uint64_t v3 = "nc >= 0";
    int v4 = 420;
LABEL_6:
    __assert_rtn("CNMatrix", "cnmatrix.h", v4, v3);
  }
  *(_DWORD *)(result + 8) = a2;
  *(_DWORD *)(result + 12) = a3;
  *(_DWORD *)(result + 16) = a3 * a2;
  *(_DWORD *)(result + 20) = a2;
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E091EB4(_Unwind_Exception *a1)
{
  *unsigned int v1 = &unk_1EDD174A8;
  _Unwind_Resume(a1);
}

uint64_t sub_18E091ED4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_18E06AEBC(a1);
  *(void *)uint64_t v6 = &unk_1EDD16938;
  *(void *)(v6 + 2824) = a2;
  uint64_t v7 = v6 + 2832;
  *(void *)(v6 + 2856) = 0x1000000AELL;
  *(void *)(v6 + 2832) = &unk_1EDD17B08;
  *(_OWORD *)(v6 + 2840) = xmmword_18E1FD650;
  *(void *)(v6 + 2864) = v6 + 2872;
  sub_18DFEEA3C(v6 + 2832, a3);
  int v8 = *(_DWORD *)(v7 + 8);
  int v9 = *(_DWORD *)(a1 + 2844);
  *(_DWORD *)(a1 + 8) = v8;
  *(_DWORD *)(a1 + 12) = v9;
  unsigned int v10 = v9 * v8;
  *(_DWORD *)(a1 + 16) = v9 * v8;
  *(_DWORD *)(a1 + 20) = v8;
  if (v9 * v8 >= 1)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = 4 * v10;
    do
    {
      *(_OWORD *)(*(void *)(a1 + 32) + v11) = *(_OWORD *)(*(void *)(a2 + 32)
                                                          + 16 * *(int *)(*(void *)(a1 + 2864) + v12));
      v12 += 4;
      v11 += 16;
    }
    while (v13 != v12);
  }
  return a1;
}

void sub_18E091FC8(void *a1)
{
  a1[354] = &unk_1EDD174A8;
  *a1 = &unk_1EDD16ED8;
  JUMPOUT(0x192FA6240);
}

__n128 sub_18E092018(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    int v3 = *(_DWORD *)(a2 + 8);
    int v2 = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(a1 + 8) = v3;
    *(_DWORD *)(a1 + 12) = v2;
    int v4 = v2 * v3;
    *(_DWORD *)(a1 + 16) = v4;
    *(_DWORD *)(a1 + 20) = v3;
    int v5 = *(_DWORD *)(a2 + 16);
    if (v5 > 3)
    {
      uint64_t v9 = (v5 - 1);
      unsigned int v10 = *(_OWORD **)(a1 + 32);
      uint64_t v11 = *(long long **)(a2 + 32);
      uint64_t v12 = (__n128 *)&v10[v9];
      uint64_t v13 = v11;
      uint64_t v14 = v9;
      do
      {
        long long v15 = *v13++;
        *v10++ = v15;
        --v14;
      }
      while (v14);
      __n128 result = (__n128)v11[v9];
      *uint64_t v12 = result;
    }
    else if (v4 >= 1)
    {
      uint64_t v6 = 0;
      uint64_t v7 = 0;
      do
      {
        __n128 result = *(__n128 *)(*(void *)(a2 + 32) + v6);
        *(__n128 *)(*(void *)(a1 + 32) + v6) = result;
        ++v7;
        v6 += 16;
      }
      while (v7 < *(int *)(a1 + 16));
    }
  }
  return result;
}

uint64_t sub_18E0920A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 24) = 0x1000000AELL;
  *(_OWORD *)(a1 + 8) = xmmword_18E1FD650;
  *(void *)(a1 + 32) = a1 + 40;
  *(void *)a1 = &unk_1EDD16A88;
  *(void *)(a1 + 736) = a2;
  *(void *)(a1 + 768) = 0x1000000AELL;
  *(void *)(a1 + 744) = &unk_1EDD17B08;
  *(_OWORD *)(a1 + 752) = xmmword_18E1FD650;
  *(void *)(a1 + 776) = a1 + 784;
  sub_18DFEEA3C(a1 + 744, a3);
  int v5 = *(_DWORD *)(a1 + 752);
  int v6 = *(_DWORD *)(a1 + 756);
  *(_DWORD *)(a1 + 8) = v5;
  *(_DWORD *)(a1 + 12) = v6;
  uint64_t v7 = (v6 * v5);
  *(_DWORD *)(a1 + 16) = v7;
  *(_DWORD *)(a1 + 20) = v5;
  if ((int)v7 >= 1)
  {
    int v8 = *(int **)(a1 + 776);
    uint64_t v9 = *(void *)(a2 + 32);
    unsigned int v10 = *(_DWORD **)(a1 + 32);
    do
    {
      uint64_t v11 = *v8++;
      *v10++ = *(_DWORD *)(v9 + 4 * v11);
      --v7;
    }
    while (v7);
  }
  return a1;
}

void sub_18E092184(void *a1)
{
  a1[93] = &unk_1EDD174A8;
  *a1 = &unk_1EDD174A8;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E0921D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 24) = 0x1000000AELL;
  *(_OWORD *)(a1 + 8) = xmmword_18E1FD650;
  *(void *)(a1 + 32) = a1 + 40;
  *(void *)a1 = &unk_1EDD16A58;
  *(void *)(a1 + 1432) = a2;
  uint64_t v5 = a1 + 1440;
  *(void *)(a1 + 1464) = 0x1000000AELL;
  *(void *)(a1 + 1440) = &unk_1EDD17B08;
  *(_OWORD *)(a1 + 1448) = xmmword_18E1FD650;
  *(void *)(a1 + 1472) = a1 + 1480;
  sub_18DFEEA3C(a1 + 1440, a3);
  int v6 = *(_DWORD *)(v5 + 8);
  int v7 = *(_DWORD *)(a1 + 1452);
  *(_DWORD *)(a1 + 8) = v6;
  *(_DWORD *)(a1 + 12) = v7;
  uint64_t v8 = (v7 * v6);
  *(_DWORD *)(a1 + 16) = v8;
  *(_DWORD *)(a1 + 20) = v6;
  if ((int)v8 >= 1)
  {
    uint64_t v9 = *(int **)(a1 + 1472);
    uint64_t v10 = *(void *)(a2 + 32);
    uint64_t v11 = *(void **)(a1 + 32);
    do
    {
      uint64_t v12 = *v9++;
      *v11++ = *(void *)(v10 + 8 * v12);
      --v8;
    }
    while (v8);
  }
  return a1;
}

void sub_18E0922BC(void *a1)
{
  a1[180] = &unk_1EDD174A8;
  *a1 = &unk_1EDD17478;
  JUMPOUT(0x192FA6240);
}

void sub_18E09230C(uint64_t a1)
{
}

void sub_18E092438(_Unwind_Exception *a1)
{
  char v1[7] = &unk_1EDD174A8;
  *unsigned int v1 = &unk_1EDD179E8;
  sub_18E066E88(v2);
  *unsigned int v1 = &unk_1EDD17028;
  _Unwind_Resume(a1);
}

void sub_18E0924A4(void *a1)
{
  a1[7] = &unk_1EDD174A8;
  *a1 = &unk_1EDD179E8;
  sub_18E066E88(a1 + 5);
  *a1 = &unk_1EDD17028;

  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E092548(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    int v5 = *(_DWORD *)(a2 + 8);
    int v4 = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(a1 + 8) = v5;
    *(_DWORD *)(a1 + 12) = v4;
    int v6 = v4 * v5;
    *(_DWORD *)(a1 + 16) = v6;
    *(_DWORD *)(a1 + 20) = v5;
    int v7 = *(_DWORD *)(a2 + 16);
    if (v7 > 3)
    {
      uint64_t v10 = (v7 - 1);
      uint64_t v11 = *(void *)(a1 + 32);
      uint64_t v12 = *(void *)(a2 + 32);
      uint64_t v13 = v11 + (v10 << 6);
      uint64_t v14 = v12;
      uint64_t v15 = v10;
      do
      {
        sub_18DFE2F24(v11, v14);
        v11 += 64;
        v14 += 64;
        --v15;
      }
      while (v15);
      sub_18DFE2F24(v13, v12 + (v10 << 6));
    }
    else if (v6 >= 1)
    {
      uint64_t v8 = 0;
      uint64_t v9 = 0;
      do
      {
        sub_18DFE2F24(*(void *)(a1 + 32) + v8, *(void *)(a2 + 32) + v8);
        ++v9;
        v8 += 64;
      }
      while (v9 < *(int *)(a1 + 16));
    }
  }
  return a1;
}

void sub_18E092628(uint64_t a1)
{
}

void sub_18E092758(_Unwind_Exception *a1)
{
  char v1[7] = &unk_1EDD174A8;
  *unsigned int v1 = &unk_1EDD17A18;
  sub_18E066A94(v2);
  *unsigned int v1 = &unk_1EDD17058;
  _Unwind_Resume(a1);
}

void sub_18E0927C4(void *a1)
{
  a1[7] = &unk_1EDD174A8;
  *a1 = &unk_1EDD17A18;
  sub_18E066A94(a1 + 5);
  *a1 = &unk_1EDD17058;

  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E092868(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    int v5 = *(_DWORD *)(a2 + 8);
    int v4 = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(a1 + 8) = v5;
    *(_DWORD *)(a1 + 12) = v4;
    int v6 = v4 * v5;
    *(_DWORD *)(a1 + 16) = v6;
    *(_DWORD *)(a1 + 20) = v5;
    int v7 = *(_DWORD *)(a2 + 16);
    if (v7 > 3)
    {
      unsigned int v10 = v7 - 1;
      uint64_t v11 = *(void *)(a1 + 32);
      uint64_t v12 = *(void *)(a2 + 32);
      uint64_t v13 = v11 + 112 * (v7 - 1);
      uint64_t v14 = v12;
      uint64_t v15 = (v7 - 1);
      do
      {
        sub_18DFE2F24(v11, v14);
        v11 += 112;
        v14 += 112;
        --v15;
      }
      while (v15);
      sub_18DFE2F24(v13, v12 + 112 * v10);
    }
    else if (v6 >= 1)
    {
      uint64_t v8 = 0;
      uint64_t v9 = 0;
      do
      {
        sub_18DFE2F24(*(void *)(a1 + 32) + v8, *(void *)(a2 + 32) + v8);
        ++v9;
        v8 += 112;
      }
      while (v9 < *(int *)(a1 + 16));
    }
  }
  return a1;
}

void sub_18E092950(void *a1)
{
  a1[180] = &unk_1EDD174A8;
  *a1 = &unk_1EDD172C8;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E0929A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 24) = 0x1000000AELL;
  *(_OWORD *)(a1 + 8) = xmmword_18E1FD650;
  *(void *)(a1 + 32) = a1 + 40;
  *(void *)a1 = &unk_1EDD16A28;
  *(void *)(a1 + 1432) = a2;
  uint64_t v5 = a1 + 1440;
  *(void *)(a1 + 1464) = 0x1000000AELL;
  *(void *)(a1 + 1440) = &unk_1EDD17B08;
  *(_OWORD *)(a1 + 1448) = xmmword_18E1FD650;
  *(void *)(a1 + 1472) = a1 + 1480;
  sub_18DFEEA3C(a1 + 1440, a3);
  int v6 = *(_DWORD *)(v5 + 8);
  int v7 = *(_DWORD *)(a1 + 1452);
  *(_DWORD *)(a1 + 8) = v6;
  *(_DWORD *)(a1 + 12) = v7;
  uint64_t v8 = (v7 * v6);
  *(_DWORD *)(a1 + 16) = v8;
  *(_DWORD *)(a1 + 20) = v6;
  if ((int)v8 >= 1)
  {
    for (uint64_t i = 0; i != v8; ++i)
      *(void *)(*(void *)(a1 + 32) + 8 * i) = *(void *)(*(void *)(a2 + 32)
                                                            + 8 * *(int *)(*(void *)(a1 + 1472) + 4 * i));
  }
  return a1;
}

void sub_18E092A90(void *a1)
{
  a1[180] = &unk_1EDD174A8;
  *a1 = &unk_1EDD173E8;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E092AE0(uint64_t result, uint64_t a2)
{
  if (result != a2)
  {
    int v2 = *(_DWORD *)(a2 + 8);
    int v3 = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(result + 8) = v2;
    *(_DWORD *)(result + 12) = v3;
    int v4 = v3 * v2;
    *(_DWORD *)(result + 16) = v4;
    *(_DWORD *)(result + 20) = v2;
    int v5 = *(_DWORD *)(a2 + 16);
    if (v5 > 3)
    {
      uint64_t v8 = (v5 - 1);
      uint64_t v9 = *(void **)(result + 32);
      unsigned int v10 = *(uint64_t **)(a2 + 32);
      uint64_t v11 = v10;
      uint64_t v12 = v9;
      uint64_t v13 = v8;
      do
      {
        uint64_t v14 = *v11++;
        *v12++ = v14;
        --v13;
      }
      while (v13);
      v9[v8] = v10[v8];
    }
    else if (v4 >= 1)
    {
      uint64_t v6 = 0;
      uint64_t v7 = 8 * v4;
      do
      {
        *(void *)(*(void *)(result + 32) + v6) = *(void *)(*(void *)(a2 + 32) + v6);
        v6 += 8;
      }
      while (v7 != v6);
    }
  }
  return result;
}

void sub_18E092B68(uint64_t a1)
{
  *(void *)(a1 + 24) = 0x1A0000001CLL;
  *(void *)a1 = &unk_1EDD18948;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 8) = xmmword_18E1FD6F0;
  sub_18E0708A4();
}

void sub_18E092BD0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = v1[5];
  v1[5] = 0;
  if (v3) {
    MEMORY[0x192FA6220](v3, 0x1000C8000313F17);
  }
  *unsigned int v1 = &unk_1EDD17478;
  _Unwind_Resume(exception_object);
}

void *sub_18E092C18(void *result)
{
  *__n128 result = &unk_1EDD174D8;
  return result;
}

void sub_18E092C38(void *a1)
{
  *a1 = &unk_1EDD174D8;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E092C68(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E092C74(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    unsigned int v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      int v4 = *(_DWORD *)(a1 + 16);
      int v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        uint64_t v6 = (v4 - 1);
        uint64_t v7 = *(void *)(a1 + 32);
        uint64_t v8 = 1;
        do
        {
          uint64_t v9 = &v13[v8];
          if (!v13[v8])
          {
            int v10 = *(_DWORD *)(v7 + 4 * v8);
            int v11 = v8;
            do
            {
              int v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              int v12 = *(_DWORD *)(v7 + 4 * v11);
              *(_DWORD *)(v7 + 4 * v11) = v10;
              *uint64_t v9 = 1;
              uint64_t v9 = &v13[v11];
              int v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

void sub_18E092D40(void *a1)
{
  a1[97] = &unk_1EDD174A8;
  a1[90] = &unk_1EDD174A8;
  *a1 = &unk_1EDD17478;
  JUMPOUT(0x192FA6240);
}

void sub_18E092DB0(void *a1)
{
  a1[109] = &unk_1EDD174A8;
  a1[90] = &unk_1EDD174A8;
  *a1 = &unk_1EDD17478;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E092E20(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E092E2C(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  unsigned int v1 = *(_DWORD *)(a1 + 8);
  if (v1 >= 2)
  {
    unsigned int v3 = *(_DWORD *)(a1 + 12);
    if (v3 >= 2)
    {
      int v4 = *(_DWORD *)(a1 + 16);
      int v5 = *(_DWORD *)(a1 + 20);
      bzero(v13, v4);
      if (v4 >= 3)
      {
        uint64_t v6 = (v4 - 1);
        uint64_t v7 = *(void *)(a1 + 32);
        uint64_t v8 = 1;
        do
        {
          uint64_t v9 = &v13[v8];
          if (!v13[v8])
          {
            uint64_t v10 = *(void *)(v7 + 8 * v8);
            int v11 = v8;
            do
            {
              int v11 = (int)(v11 * (v3 + v1 - v5)) % (int)v6;
              uint64_t v12 = *(void *)(v7 + 8 * v11);
              *(void *)(v7 + 8 * v11) = v10;
              *uint64_t v9 = 1;
              uint64_t v9 = &v13[v11];
              uint64_t v10 = v12;
            }
            while (!*v9);
          }
          ++v8;
        }
        while (v8 != v6);
      }
    }
  }
}

void sub_18E092F24(void *a1)
{
  *a1 = &unk_1EDD17478;
  JUMPOUT(0x192FA6240);
}

cnestimation::RotationStabilizedAccelerationEstimator *cnestimation::RotationStabilizedAccelerationEstimator::RotationStabilizedAccelerationEstimator(cnestimation::RotationStabilizedAccelerationEstimator *this)
{
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((void *)this + 8) = 0;
  *((void *)this + 9) = 0x3FF0000000000000;
  sub_18E093C38((uint64_t)this + 104);
  *((void *)this + 13) = &unk_1EDD0B2B0;
  *((unsigned char *)this + 320) = 0;
  *(_WORD *)this = 0;
  return this;
}

{
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((void *)this + 8) = 0;
  *((void *)this + 9) = 0x3FF0000000000000;
  sub_18E093C38((uint64_t)this + 104);
  *((void *)this + 13) = &unk_1EDD0B2B0;
  *((unsigned char *)this + 320) = 0;
  *(_WORD *)this = 0;
  return this;
}

uint64_t cnestimation::RotationStabilizedAccelerationEstimator::Configure(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = 0;
  uint64_t v11 = 0x100000004;
  uint64_t v8 = &unk_1EDD19458;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v12 = v13;
  unsigned char v13[7] = 0x100000004;
  unsigned char v13[4] = &unk_1EDD19458;
  v13[5] = 0;
  unsigned char v13[6] = 0;
  unsigned char v13[8] = v14;
  v6[0] = 0x300000004;
  v6[1] = *(void *)(a2 + 24);
  double v4 = *(double *)(a2 + 16) + (double)*(uint64_t *)(a2 + 8);
  v6[2] = 0x400000004;
  *(double *)&v6[3] = v4;
  *(double *)&v6[4] = v4;
  char v7 = 0;
  v14[32] = 0;
  if (sub_18E093124(a1 + 104, (int *)v6)) {
    return 0xFFFFFFFFLL;
  }
  *(void *)(a1 + 720) = *(void *)(a2 + 32);
  if (*(double *)a2 <= 0.0) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = 0;
  *(void *)(a1 + 8) = *(void *)a2;
  *(unsigned char *)a1 = 1;
  return result;
}

uint64_t sub_18E093124(uint64_t a1, int *a2)
{
  int v2 = *a2;
  if (!*a2 || !*((void *)a2 + 1)) {
    return 0xFFFFFFFFLL;
  }
  unsigned int v4 = a2[5];
  if (a2[4] > v4 || v4 == 0) {
    return 0xFFFFFFFFLL;
  }
  double v8 = *((double *)a2 + 4);
  uint64_t result = 0xFFFFFFFFLL;
  if (fabs(*((double *)a2 + 3)) > v8 || v8 <= 0.0) {
    return result;
  }
  if (*((unsigned char *)a2 + 40))
  {
    if (a2[32] != v2 || a2[33] != 1) {
      return result;
    }
    uint64_t v26 = 0x100000004;
    int32x2_t v24 = &unk_1EDD19458;
    long long v25 = xmmword_18E1F6F80;
    int32x4_t v27 = (double *)&v28;
    uint64_t v21 = 0x100000004;
    uint64_t v19 = &unk_1EDD194B8;
    long long v20 = xmmword_18E1F6F80;
    BOOL v22 = &v23;
    sub_18E064598((uint64_t)(a2 + 30), (uint64_t)&v24, (uint64_t)&v19);
    if (*v27 < 0.0) {
      return 0xFFFFFFFFLL;
    }
    uint64_t result = 0xFFFFFFFFLL;
    if (a2[14] != v2 || a2[15] != 1) {
      return result;
    }
    sub_18E096674((uint64_t)(a2 + 12), (uint64_t)&v24);
    if (*v27 < 0.0) {
      return 0xFFFFFFFFLL;
    }
    sub_18E096888((uint64_t)(a2 + 30), (uint64_t)(a2 + 12), (uint64_t)v18);
    sub_18E0967F4((uint64_t)v18, 2, (uint64_t)&v19);
    sub_18E096734((uint64_t)&v19, (uint64_t)&v24);
    if (*v27 <= 0.0) {
      return 0xFFFFFFFFLL;
    }
  }
  uint64_t v9 = (_DWORD *)(a1 + 16);
  if (*(unsigned char *)(a1 + 8))
  {
    BOOL v10 = *v9 != *a2 || *(_DWORD *)(a1 + 20) != a2[1];
    uint64_t v11 = *(void *)(a1 + 24);
    uint64_t v12 = *((void *)a2 + 1);
    long long v13 = *(_OWORD *)a2;
    long long v14 = *((_OWORD *)a2 + 1);
    *(_OWORD *)(a1 + 41) = *(_OWORD *)((char *)a2 + 25);
    *(_OWORD *)uint64_t v9 = v13;
    *(_OWORD *)(a1 + 32) = v14;
    sub_18DFE2F24(a1 + 64, (uint64_t)(a2 + 12));
    __n128 v15 = sub_18DFE2F24(a1 + 136, (uint64_t)(a2 + 30));
    *(unsigned char *)(a1 + 208) = *((unsigned char *)a2 + 192);
    *(unsigned char *)(a1 + 8) = 1;
    if (v10 || v11 != v12) {
      (*(void (**)(uint64_t, __n128))(*(void *)a1 + 104))(a1, v15);
    }
    return 0;
  }
  else
  {
    long long v16 = *(_OWORD *)a2;
    long long v17 = *((_OWORD *)a2 + 1);
    *(_OWORD *)(a1 + 41) = *(_OWORD *)((char *)a2 + 25);
    *(_OWORD *)uint64_t v9 = v16;
    *(_OWORD *)(a1 + 32) = v17;
    sub_18DFE2F24(a1 + 64, (uint64_t)(a2 + 12));
    sub_18DFE2F24(a1 + 136, (uint64_t)(a2 + 30));
    uint64_t result = 0;
    *(unsigned char *)(a1 + 208) = *((unsigned char *)a2 + 192);
    *(unsigned char *)(a1 + 8) = 1;
  }
  return result;
}

uint64_t cnestimation::RotationStabilizedAccelerationEstimator::IsConfigured(cnestimation::RotationStabilizedAccelerationEstimator *this)
{
  return *(unsigned __int8 *)this;
}

uint64_t cnestimation::RotationStabilizedAccelerationEstimator::IsInitialized(cnestimation::RotationStabilizedAccelerationEstimator *this)
{
  return *((unsigned __int8 *)this + 1);
}

uint64_t cnestimation::RotationStabilizedAccelerationEstimator::Reset(uint64_t this)
{
  *(unsigned char *)(this + 1) = 0;
  return this;
}

uint64_t cnestimation::RotationStabilizedAccelerationEstimator::AddAcceleration(uint64_t a1, uint64_t a2, double a3, int8x16_t a4)
{
  if (!*(unsigned char *)a1) {
    return 0xFFFFFFFFLL;
  }
  if (*(unsigned char *)(a1 + 1))
  {
    int8x16_t v74 = *(int8x16_t *)a2;
    uint64_t v6 = CNTimeSpan::operator-((uint64_t)&v74, (void *)(a1 + 16), v74, a4);
    double v8 = v7 + (double)v6;
    if (v8 <= 0.0) {
      return 0xFFFFFFFFLL;
    }
    double v9 = *(double *)(a1 + 48);
    double v10 = *(double *)(a1 + 56);
    double v12 = *(double *)(a1 + 64);
    double v11 = *(double *)(a1 + 72);
    uint64_t v71 = 0x100000004;
    double v69 = COERCE_DOUBLE(&unk_1EDD19458);
    long long v70 = xmmword_18E1F6F80;
    uint64_t v72 = &v73;
    if (sub_18E0938FC((_DWORD *)(a1 + 104), (uint64_t)&v74, *(void *)(a1 + 720), (uint64_t)&v69)) {
      return 0xFFFFFFFFLL;
    }
    sub_18DFE32C4((uint64_t)&v54, (uint64_t)&v69);
    double v13 = sqrt(*(double *)&v55 * *(double *)&v55+ v54 * v54+ *((double *)&v55 + 1) * *((double *)&v55 + 1)+ *(double *)&v56 * *(double *)&v56);
    double v14 = 1.0;
    double v15 = 0.0;
    double v16 = 0.0;
    double v17 = 0.0;
    double v18 = 0.0;
    double v19 = 1.0;
    if (fabs(v13) >= 2.22044605e-16)
    {
      double v16 = v54 / v13;
      double v17 = *(double *)&v55 / v13;
      double v18 = *((double *)&v55 + 1) / v13;
      double v19 = *(double *)&v56 / v13;
    }
    double v65 = v16;
    double v66 = v17;
    double v67 = v18;
    double v68 = v19;
    double v20 = sqrt(v10 * v10 + v9 * v9 + v12 * v12 + v11 * v11);
    double v21 = 0.0;
    double v22 = 0.0;
    if (fabs(v20) >= 2.22044605e-16)
    {
      double v15 = -v9 / v20;
      double v21 = -v10 / v20;
      double v22 = -v12 / v20;
      double v14 = v11 / v20;
    }
    double v54 = v15;
    *(double *)&long long v55 = v21;
    *((double *)&v55 + 1) = v22;
    *(double *)&uint64_t v56 = v14;
    cnrotation::Cat(&v65, (const cnrotation::CNRotation *)&v54, v64);
    uint64_t v60 = 0x100000003;
    *(_OWORD *)&v59[8] = xmmword_18E1F6F60;
    *(void *)int v59 = &unk_1EDD18D98;
    uint64_t v61 = &v62;
    long long v62 = *(_OWORD *)(a1 + 80);
    uint64_t v63 = *(void *)(a1 + 96);
    sub_18DFEDF6C((cnrotation::CNRotation *)v64, (uint64_t)v59, (uint64_t)&v54);
    sub_18DFE2F24((uint64_t)v59, (uint64_t)&v54);
    uint64_t v50 = 0x100000003;
    long long v49 = xmmword_18E1F6F60;
    unsigned int v48 = &unk_1EDD18D98;
    uint64_t v51 = &v52;
    long long v52 = *(_OWORD *)(a2 + 16);
    v23.f64[1] = *((float64_t *)&v52 + 1);
    uint64_t v53 = *(void *)(a2 + 32);
    double v24 = v8 / (v8 + *(double *)(a1 + 8) / 6.28318531);
    uint64_t v56 = 0x100000003;
    long long v55 = xmmword_18E1F6F60;
    double v54 = COERCE_DOUBLE(&unk_1EDD18D98);
    uint64_t v57 = v58;
    v23.f64[0] = v24;
    float64x2_t v25 = sub_18DFE3240((uint64_t)&v48, (uint64_t)&v54, v23);
    v25.f64[0] = 1.0 - v24;
    uint64_t v40 = 0x100000003;
    __int16 v38 = &unk_1EDD18D98;
    long long v39 = xmmword_18E1F6F60;
    int v41 = &v42;
    sub_18DFE3240((uint64_t)v59, (uint64_t)&v38, v25);
    uint64_t v45 = 0x100000003;
    int v43 = &unk_1EDD18D98;
    long long v44 = xmmword_18E1F6F60;
    uint64_t v46 = &v47;
    sub_18DFEF1F4((uint64_t)&v54, (uint64_t)&v38, (uint64_t)&v43);
    *(int8x16_t *)(a1 + 16) = v74;
    double v26 = v65;
    double v27 = v66;
    double v28 = v67;
    double v29 = v68;
    if ((double *)(a1 + 48) != &v65)
    {
      *(double *)(a1 + 48) = v65;
      *(double *)(a1 + 56) = v27;
      *(double *)(a1 + 64) = v28;
      *(double *)(a1 + 72) = v29;
    }
    unsigned int v30 = v46;
    *(void *)(a1 + 80) = *v46;
    *(void *)(a1 + 88) = v30[1];
    *(void *)(a1 + 96) = v30[2];
    uint64_t v56 = 0x100000004;
    long long v55 = xmmword_18E1F6F80;
    double v54 = COERCE_DOUBLE(&unk_1EDD19458);
    uint64_t v57 = v58;
    *(double *)int v58 = v26;
    *(double *)&v58[1] = v27;
    *(double *)&v58[2] = v28;
    *(double *)&v58[3] = v29;
    uint64_t result = sub_18E093A7C(a1 + 104, &v74, (uint64_t)&v54);
    if (result)
    {
      *(unsigned char *)(a1 + 1) = 0;
      return 0xFFFFFFFFLL;
    }
  }
  else
  {
    *(_OWORD *)int v59 = *(_OWORD *)a2;
    uint64_t v56 = 0x100000004;
    double v54 = COERCE_DOUBLE(&unk_1EDD19458);
    uint64_t v57 = v58;
    long long v55 = xmmword_18E1F6F80;
    sub_18DFE2CC8((uint64_t)&v54, 0.0);
    void v57[3] = 0x3FF0000000000000;
    if (sub_18E093A7C(a1 + 104, v59, (uint64_t)&v54)) {
      return 0xFFFFFFFFLL;
    }
    long long v32 = *(_OWORD *)v59;
    *(_OWORD *)(a1 + 16) = *(_OWORD *)v59;
    *(_OWORD *)(a1 + 32) = v32;
    sub_18DFE32C4((uint64_t)&v69, (uint64_t)&v54);
    double v33 = sqrt(*(double *)&v70 * *(double *)&v70+ v69 * v69+ *((double *)&v70 + 1) * *((double *)&v70 + 1)+ *(double *)&v71 * *(double *)&v71);
    if (fabs(v33) >= 2.22044605e-16)
    {
      double v35 = v69 / v33;
      double v36 = *(double *)&v70 / v33;
      double v37 = *((double *)&v70 + 1) / v33;
      double v34 = *(double *)&v71 / v33;
    }
    else
    {
      double v34 = 1.0;
      double v35 = 0.0;
      double v36 = 0.0;
      double v37 = 0.0;
    }
    uint64_t result = 0;
    *(double *)(a1 + 48) = v35;
    *(double *)(a1 + 56) = v36;
    *(double *)(a1 + 64) = v37;
    *(double *)(a1 + 72) = v34;
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 16);
    *(void *)(a1 + 96) = *(void *)(a2 + 32);
    *(unsigned char *)(a1 + 1) = 1;
  }
  return result;
}

uint64_t sub_18E0938FC(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!(*(unsigned int (**)(_DWORD *))(*(void *)a1 + 24))(a1)) {
    return 0xFFFFFFFFLL;
  }
  int v8 = a1[5];
  uint64_t v25 = 0x100000003;
  double v20 = &unk_1EDD18D98;
  double v26 = &v27;
  int v21 = v8;
  int v22 = 1;
  int v23 = v8;
  int v24 = v8;
  sub_18DFE2CC8((uint64_t)&v20, 0.0);
  uint64_t v17 = 0x400000004;
  double v15 = &unk_1EDD195A8;
  long long v16 = xmmword_18E1F6F70;
  double v18 = &v19;
  uint64_t v12 = 0x300000004;
  double v10 = &unk_1EDD19578;
  long long v11 = xmmword_18E1F6F90;
  double v13 = &v14;
  return (*(uint64_t (**)(_DWORD *, uint64_t, void **, uint64_t, uint64_t, void **, void **))(*(void *)a1 + 96))(a1, a2, &v20, a3, a4, &v15, &v10);
}

uint64_t sub_18E093A7C(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4 = *(unsigned int *)(a3 + 8);
  int v3 = *(_DWORD *)(a3 + 12);
  if (v4) {
    BOOL v5 = v3 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5 || v3 != 1) {
    return 0xFFFFFFFFLL;
  }
  if (*(unsigned char *)(a1 + 8))
  {
    if (v4 != *(_DWORD *)(a1 + 16)) {
      return 0xFFFFFFFFLL;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 16) = v4;
  }
  *(_OWORD *)(a1 + 224) = *a2;
  sub_18DFE2F24(a1 + 240, a3);
  uint64_t v19 = 0x400000004;
  uint64_t v14 = &unk_1EDD195A8;
  double v20 = v21;
  int v15 = v4;
  int v16 = v4;
  int v17 = v4 * v4;
  int v18 = v4;
  sub_18DFE2CC8((uint64_t)&v14, 0.0);
  if ((int)v4 >= 1)
  {
    int v9 = 0;
    int v10 = v18 + 1;
    long long v11 = v20;
    uint64_t v12 = v4;
    do
    {
      *(void *)&v11[8 * v9] = 0x3FF0000000000000;
      v9 += v10;
      --v12;
    }
    while (v12);
  }
  sub_18DFE2F24(a1 + 312, (uint64_t)&v14);
  if (*(unsigned char *)(a1 + 8))
  {
    int v13 = *(_DWORD *)(a1 + 20);
    uint64_t v19 = 0x300000004;
    uint64_t v14 = &unk_1EDD19578;
    double v20 = v21;
    int v15 = v4;
    int v16 = v13;
    int v17 = v13 * v4;
    int v18 = v4;
    sub_18DFE2CC8((uint64_t)&v14, 0.0);
    sub_18DFE2F24(a1 + 480, (uint64_t)&v14);
  }
  uint64_t result = 0;
  *(unsigned char *)(a1 + 216) = 1;
  return result;
}

uint64_t cnestimation::RotationStabilizedAccelerationEstimator::GetRotationStabilizedAcceleration(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a1 + 1)) {
    return 0xFFFFFFFFLL;
  }
  long long v2 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)a2 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a2 + 16) = v2;
  if (a2 != a1 + 16)
  {
    *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 48);
    *(_OWORD *)(a2 + 48) = *(_OWORD *)(a1 + 64);
  }
  uint64_t v3 = 0;
  long long v4 = *(_OWORD *)(a1 + 80);
  *(void *)(a2 + 80) = *(void *)(a1 + 96);
  *(_OWORD *)(a2 + 64) = v4;
  return v3;
}

double sub_18E093C38(uint64_t a1)
{
  *(void *)a1 = &unk_1EDD0B230;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 41) = 0u;
  *(void *)(a1 + 88) = 0x100000004;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 64) = &unk_1EDD19458;
  *(void *)(a1 + 96) = a1 + 104;
  *(void *)(a1 + 160) = 0x100000004;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 136) = &unk_1EDD19458;
  *(void *)(a1 + 168) = a1 + 176;
  *(unsigned char *)(a1 + 208) = 1;
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 264) = 0x100000004;
  *(void *)(a1 + 240) = &unk_1EDD19458;
  *(_OWORD *)(a1 + 248) = xmmword_18E1F6F80;
  *(void *)(a1 + 272) = a1 + 280;
  *(void *)(a1 + 336) = 0x400000004;
  *(void *)(a1 + 312) = &unk_1EDD195A8;
  *(_OWORD *)(a1 + 320) = xmmword_18E1F6F70;
  *(void *)(a1 + 344) = a1 + 352;
  *(void *)(a1 + 504) = 0x300000004;
  *(void *)(a1 + 480) = &unk_1EDD19578;
  *(void *)&double result = 0x300000004;
  *(_OWORD *)(a1 + 488) = xmmword_18E1F6F90;
  *(void *)(a1 + 512) = a1 + 520;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 216) = 0;
  return result;
}

void *sub_18E093D94(void *result)
{
  *double result = &unk_1EDD0B230;
  result[60] = &unk_1EDD17478;
  result[39] = &unk_1EDD17478;
  result[30] = &unk_1EDD17478;
  result[17] = &unk_1EDD17478;
  result[8] = &unk_1EDD17478;
  return result;
}

void sub_18E093E54(void *a1)
{
  *a1 = &unk_1EDD0B230;
  a1[60] = &unk_1EDD17478;
  a1[39] = &unk_1EDD17478;
  a1[30] = &unk_1EDD17478;
  a1[17] = &unk_1EDD17478;
  a1[8] = &unk_1EDD17478;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E093F24(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a1 + 8)) {
    return 0xFFFFFFFFLL;
  }
  long long v4 = *(_OWORD *)(a1 + 16);
  long long v5 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 25) = *(_OWORD *)(a1 + 41);
  *(_OWORD *)a2 = v4;
  *(_OWORD *)(a2 + 16) = v5;
  sub_18DFE2F24(a2 + 48, a1 + 64);
  sub_18DFE2F24(a2 + 120, a1 + 136);
  uint64_t result = 0;
  *(unsigned char *)(a2 + 192) = *(unsigned char *)(a1 + 208);
  return result;
}

uint64_t sub_18E093F8C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t sub_18E093F94(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 16) == 4 && *(_DWORD *)(a2 + 20) == 4 && *(unsigned char *)(a2 + 40) == 0) {
    return sub_18E093124(a1, (int *)a2);
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t sub_18E093FB8(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  if (!*(unsigned char *)(a1 + 216)) {
    return 0xFFFFFFFFLL;
  }
  *a2 = *(_OWORD *)(a1 + 224);
  sub_18DFE2F24(a3, a1 + 240);
  return 0;
}

uint64_t sub_18E093FF4(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!*(unsigned char *)(a1 + 216) || !*(unsigned char *)(a1 + 208)) {
    return 0xFFFFFFFFLL;
  }
  *a2 = *(_OWORD *)(a1 + 224);
  sub_18DFE2F24(a3, a1 + 240);
  sub_18DFE2F24(a4, a1 + 312);
  sub_18DFE2F24(a5, a1 + 480);
  return 0;
}

uint64_t sub_18E09406C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 216);
}

uint64_t sub_18E094074(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!(*(unsigned int (**)(uint64_t))(*(void *)a1 + 24))(a1)) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v18 = 0x400000004;
  int v16 = &unk_1EDD195A8;
  long long v17 = xmmword_18E1F6F70;
  uint64_t v19 = &v20;
  uint64_t v13 = 0x300000004;
  long long v11 = &unk_1EDD19578;
  long long v12 = xmmword_18E1F6F90;
  uint64_t v14 = &v15;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void **, void **))(*(void *)a1 + 96))(a1, a2, a3, a4, a5, &v16, &v11);
}

uint64_t sub_18E0941A8(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (!(*(unsigned int (**)(_DWORD *))(*(void *)a1 + 24))(a1)) {
    return 0xFFFFFFFFLL;
  }
  int v12 = a1[5];
  uint64_t v19 = 0x100000003;
  uint64_t v14 = &unk_1EDD18D98;
  uint64_t v20 = &v21;
  int v15 = v12;
  int v16 = 1;
  int v17 = v12;
  int v18 = v12;
  sub_18DFE2CC8((uint64_t)&v14, 0.0);
  return (*(uint64_t (**)(_DWORD *, uint64_t, void **, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 96))(a1, a2, &v14, a3, a4, a5, a6);
}

uint64_t sub_18E0942B4(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1F4188790](a1);
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  uint64_t v13 = v12;
  uint64_t v14 = v1;
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v1 + 24))(v1)
    || !(*(unsigned int (**)(uint64_t))(*(void *)v14 + 64))(v14))
  {
    return 0xFFFFFFFFLL;
  }
  unsigned int v17 = *(_DWORD *)(v14 + 20);
  uint64_t result = 0xFFFFFFFFLL;
  if (*(_DWORD *)(v11 + 8) == v17 && *(_DWORD *)(v11 + 12) == 1)
  {
    uint64_t v19 = *(unsigned int *)(v14 + 16);
    uint64_t v20 = *(unsigned int (**)(long long *, double *, void **, uint64_t, uint64_t, void **, void **, void **))(v14 + 24);
    uint64_t v21 = v13;
    int v22 = *(unsigned __int8 *)(v14 + 208);
    uint64_t v103 = (_OWORD *)v21;
    int v105 = (_OWORD *)(v14 + 224);
    uint64_t v23 = CNTimeSpan::operator-(v21, (void *)(v14 + 224), v15, v16);
    double v25 = v24 + (double)v23;
    if (fabs(v25) >= 2.22044605e-16)
    {
      uint64_t v101 = v7;
      uint64_t v100 = v5;
      double v30 = 1.0;
      double v31 = 0.0;
      if (v25 < 0.0) {
        double v31 = -1.0;
      }
      if (v25 <= 0.0) {
        double v30 = v31;
      }
      int v32 = vcvtpd_s64_f64(fabs(v25 / *(double *)(v14 + 48)));
      double v341 = v30;
      if (v32 <= 1) {
        int v32 = 1;
      }
      int v104 = v32;
      double v33 = (double)v32;
      uint64_t v102 = v14 + 240;
      sub_18E0963D8((uint64_t)v340, v14 + 240);
      uint64_t v344 = 0x400000004;
      uint64_t v342 = &unk_1EDD195A8;
      if (v22)
      {
        long long v345 = v346;
        LODWORD(v343) = v19;
        DWORD1(v343) = v19;
        DWORD2(v343) = v19 * v19;
        HIDWORD(v343) = v19;
        sub_18DFE2CC8((uint64_t)&v342, 0.0);
        if ((int)v19 >= 1)
        {
          int v34 = 0;
          int v35 = HIDWORD(v343) + 1;
          double v36 = v345;
          uint64_t v37 = v19;
          do
          {
            *(void *)&v36[8 * v34] = 0x3FF0000000000000;
            v34 += v35;
            --v37;
          }
          while (v37);
        }
        uint64_t v337 = 0x300000004;
        uint64_t v335 = &unk_1EDD19578;
        int64x2_t v338 = v339;
        *(void *)&long long v336 = __PAIR64__(v17, v19);
        DWORD2(v336) = v17 * v19;
        HIDWORD(v336) = v19;
        sub_18DFE2CC8((uint64_t)&v335, 0.0);
      }
      else
      {
        long long v343 = xmmword_18E1F6F70;
        long long v345 = v346;
        uint64_t v337 = 0x300000004;
        long long v336 = xmmword_18E1F6F90;
        uint64_t v335 = &unk_1EDD19578;
        int64x2_t v338 = v339;
      }
      double v38 = v25 / v33;
      uint64_t v332 = 0x100000004;
      uint64_t v327 = &unk_1EDD19458;
      long long v333 = &v334;
      int v328 = v19;
      int v329 = 1;
      int v330 = v19;
      int v331 = v19;
      sub_18DFE2CC8((uint64_t)&v327, 0.0);
      uint64_t v324 = 0x400000004;
      uint64_t v322 = &unk_1EDD195A8;
      if (v22)
      {
        uint64_t v325 = v326;
        LODWORD(v323) = v19;
        DWORD1(v323) = v19;
        DWORD2(v323) = v19 * v19;
        HIDWORD(v323) = v19;
        sub_18DFE2CC8((uint64_t)&v322, 0.0);
        uint64_t v319 = 0x300000004;
        v317 = &unk_1EDD19578;
        int v320 = v321;
        *(void *)&long long v318 = __PAIR64__(v17, v19);
        DWORD2(v318) = v17 * v19;
        HIDWORD(v318) = v19;
        sub_18DFE2CC8((uint64_t)&v317, 0.0);
      }
      else
      {
        long long v323 = xmmword_18E1F6F70;
        uint64_t v325 = v326;
        uint64_t v319 = 0x300000004;
        long long v318 = xmmword_18E1F6F90;
        v317 = &unk_1EDD19578;
        int v320 = v321;
      }
      uint64_t v40 = v11;
      v41.n128_u64[1] = 0x40000000CLL;
      for (int i = 1; ; ++i)
      {
        v41.n128_f64[0] = v38 * (double)(i - 1);
        *(void *)&long long v307 = 0;
        long long v306 = 0;
        CNTimeSpan::SetTimeSpan((uint64_t *)&v306, 0, (int8x16_t)v41, v39);
        *(void *)&long long v316 = CNTimeSpan::operator+((uint64_t)v105, &v306, v43, v44);
        *((void *)&v316 + 1) = v45;
        uint64_t v313 = 0x100000004;
        double v311 = &unk_1EDD19458;
        long long v312 = xmmword_18E1F6F80;
        uint64_t v314 = &v315;
        sub_18DFEF1F4((uint64_t)v340, (uint64_t)&v327, (uint64_t)&v311);
        uint64_t v308 = 0x400000004;
        long long v307 = xmmword_18E1F6F70;
        long long v306 = &unk_1EDD195A8;
        uint64_t v309 = v310;
        if (v22)
        {
          sub_18DFEF1F4((uint64_t)&v342, (uint64_t)&v322, (uint64_t)&v306);
          uint64_t v303 = 0x300000004;
          long long v302 = xmmword_18E1F6F90;
          long long v301 = &unk_1EDD19578;
          uint64_t v304 = v305;
          sub_18DFEF1F4((uint64_t)&v335, (uint64_t)&v317, (uint64_t)&v301);
        }
        else
        {
          uint64_t v303 = 0x300000004;
          long long v302 = xmmword_18E1F6F90;
          long long v301 = &unk_1EDD19578;
          uint64_t v304 = v305;
        }
        long long v300 = v316;
        sub_18E0963D8((uint64_t)v299, (uint64_t)&v311);
        if (v22)
        {
          sub_18E096528((uint64_t)&v294, (uint64_t)&v306);
          uint64_t v291 = 0x300000004;
          uint64_t v289 = &unk_1EDD19578;
          *(void *)&long long v290 = v302;
          uint64_t v46 = (DWORD1(v302) * v302);
          DWORD2(v290) = DWORD1(v302) * v302;
          HIDWORD(v290) = v302;
          long long v292 = v293;
          if (v302 > 4)
          {
            int v98 = 616;
            uint64_t v99 = "this->max_num_rows_ >= A.num_rows_";
            goto LABEL_79;
          }
          if (DWORD1(v302) >= 4)
          {
            int v98 = 617;
            uint64_t v99 = "this->max_num_cols_ >= A.num_cols_";
LABEL_79:
            __assert_rtn("CNMatrix", "cnmatrix.h", v98, v99);
          }
          int v47 = DWORD2(v302);
          if (SDWORD2(v302) > 3)
          {
            uint64_t v51 = v304;
            uint64_t v52 = (DWORD2(v302) - 1) >> 1;
            uint64_t v53 = (long long *)v304;
            double v54 = v293;
            do
            {
              long long v55 = *v53++;
              *v54++ = v55;
              --v52;
            }
            while (v52);
            *(_OWORD *)&v293[v47 - 2] = *(_OWORD *)&v51[8 * (v47 - 2)];
          }
          else if ((int)v46 >= 1)
          {
            unsigned int v48 = (uint64_t *)v304;
            long long v49 = v293;
            do
            {
              uint64_t v50 = *v48++;
              *v49++ = v50;
              --v46;
            }
            while (v46);
          }
        }
        else
        {
          uint64_t v296 = 0x400000004;
          long long v295 = xmmword_18E1F6F70;
          double v294 = &unk_1EDD195A8;
          long long v297 = &v298;
          uint64_t v291 = 0x300000004;
          long long v290 = xmmword_18E1F6F90;
          uint64_t v289 = &unk_1EDD19578;
          long long v292 = v293;
        }
        uint64_t v286 = 0x100000004;
        long long v285 = xmmword_18E1F6F80;
        double v284 = &unk_1EDD19458;
        double v287 = &v288;
        uint64_t v281 = 0x400000004;
        long long v280 = xmmword_18E1F6F70;
        uint64_t v279 = &unk_1EDD195A8;
        double v282 = &v283;
        uint64_t v276 = 0x300000004;
        long long v275 = xmmword_18E1F6F90;
        uint64_t v274 = &unk_1EDD19578;
        int8x16_t v277 = &v278;
        if (v20(&v300, &v341, (void **)v299, v40, v9, &v284, &v279, &v274)) {
          return 0xFFFFFFFFLL;
        }
        uint64_t v271 = 0x400000004;
        long long v270 = xmmword_18E1F6F70;
        uint64_t v269 = &unk_1EDD195A8;
        uint64_t v272 = &v273;
        if (v22)
        {
          sub_18DFE2B44((uint64_t)&v279, (uint64_t)&v294, (uint64_t)&v269);
          uint64_t v255 = 0x300000004;
          long long v254 = xmmword_18E1F6F90;
          long long v253 = &unk_1EDD19578;
          uint64_t v256 = v257;
          sub_18DFE2B44((uint64_t)&v279, (uint64_t)&v289, (uint64_t)&v253);
          uint64_t v266 = 0x300000004;
          long long v265 = xmmword_18E1F6F90;
          double v264 = &unk_1EDD19578;
          uint64_t v267 = v268;
          float64x2_t v57 = sub_18DFEF1F4((uint64_t)&v253, (uint64_t)&v274, (uint64_t)&v264);
        }
        else
        {
          uint64_t v266 = 0x300000004;
          *(void *)&v57.f64[1] = 0x40000000CLL;
          long long v265 = xmmword_18E1F6F90;
          double v264 = &unk_1EDD19578;
          uint64_t v267 = v268;
        }
        *(void *)&long long v254 = 0;
        long long v253 = 0;
        v57.f64[0] = v38 * 0.5;
        CNTimeSpan::SetTimeSpan((uint64_t *)&v253, 0, (int8x16_t)v57, v56);
        v263[0] = CNTimeSpan::operator+((uint64_t)&v316, &v253, v58, v59);
        v263[1] = v60;
        uint64_t v255 = 0x100000004;
        *(void *)&v61.f64[1] = 0x400000004;
        long long v254 = xmmword_18E1F6F80;
        long long v253 = &unk_1EDD19458;
        uint64_t v256 = v257;
        v61.f64[0] = v38 * 0.5;
        sub_18DFE3240((uint64_t)&v284, (uint64_t)&v253, v61);
        uint64_t v260 = 0x100000004;
        long long v259 = xmmword_18E1F6F80;
        __n128 v258 = &unk_1EDD19458;
        uint64_t v261 = &v262;
        sub_18DFEF1F4((uint64_t)&v311, (uint64_t)&v253, (uint64_t)&v258);
        if (v22)
        {
          uint64_t v250 = 0x400000004;
          *(void *)&v62.f64[1] = 0x400000010;
          long long v249 = xmmword_18E1F6F70;
          long long v248 = &unk_1EDD195A8;
          uint64_t v251 = v252;
          v62.f64[0] = v38 * 0.5;
          sub_18DFE3240((uint64_t)&v269, (uint64_t)&v248, v62);
          uint64_t v255 = 0x400000004;
          long long v254 = xmmword_18E1F6F70;
          long long v253 = &unk_1EDD195A8;
          uint64_t v256 = v257;
          sub_18DFEF1F4((uint64_t)&v306, (uint64_t)&v248, (uint64_t)&v253);
          uint64_t v250 = 0x300000004;
          *(void *)&v63.f64[1] = 0x40000000CLL;
          long long v249 = xmmword_18E1F6F90;
          long long v248 = &unk_1EDD19578;
          uint64_t v251 = v252;
          v63.f64[0] = v38 * 0.5;
          sub_18DFE3240((uint64_t)&v264, (uint64_t)&v248, v63);
          uint64_t v245 = 0x300000004;
          long long v244 = xmmword_18E1F6F90;
          long long v243 = &unk_1EDD19578;
          uint64_t v246 = v247;
          sub_18DFEF1F4((uint64_t)&v301, (uint64_t)&v248, (uint64_t)&v243);
          long long v64 = xmmword_18E1F6F70;
          long long v65 = xmmword_18E1F6F90;
        }
        else
        {
          uint64_t v255 = 0x400000004;
          long long v64 = xmmword_18E1F6F70;
          long long v65 = xmmword_18E1F6F90;
          long long v254 = xmmword_18E1F6F70;
          long long v253 = &unk_1EDD195A8;
          uint64_t v256 = v257;
          uint64_t v245 = 0x300000004;
          long long v244 = xmmword_18E1F6F90;
          long long v243 = &unk_1EDD19578;
          uint64_t v246 = v247;
        }
        uint64_t v240 = 0x100000004;
        long long v239 = xmmword_18E1F6F80;
        int v238 = &unk_1EDD19458;
        double v241 = &v242;
        uint64_t v250 = 0x400000004;
        long long v249 = v64;
        long long v248 = &unk_1EDD195A8;
        uint64_t v251 = v252;
        uint64_t v235 = 0x300000004;
        long long v234 = v65;
        double v233 = &unk_1EDD19578;
        double v236 = &v237;
        if (v20((long long *)v263, &v341, &v258, v11, v9, &v238, &v248, &v233)) {
          return 0xFFFFFFFFLL;
        }
        uint64_t v230 = 0x400000004;
        long long v229 = xmmword_18E1F6F70;
        long long v228 = &unk_1EDD195A8;
        uint64_t v231 = &v232;
        if (v22)
        {
          sub_18DFE2B44((uint64_t)&v248, (uint64_t)&v253, (uint64_t)&v228);
          uint64_t v214 = 0x300000004;
          long long v213 = xmmword_18E1F6F90;
          int64x2_t v212 = &unk_1EDD19578;
          uint64_t v215 = v216;
          sub_18DFE2B44((uint64_t)&v248, (uint64_t)&v243, (uint64_t)&v212);
          uint64_t v225 = 0x300000004;
          long long v224 = xmmword_18E1F6F90;
          uint64_t v223 = &unk_1EDD19578;
          int v226 = v227;
          float64x2_t v67 = sub_18DFEF1F4((uint64_t)&v212, (uint64_t)&v233, (uint64_t)&v223);
        }
        else
        {
          uint64_t v225 = 0x300000004;
          *(void *)&v67.f64[1] = 0x40000000CLL;
          long long v224 = xmmword_18E1F6F90;
          uint64_t v223 = &unk_1EDD19578;
          int v226 = v227;
        }
        int v68 = i;
        *(void *)&long long v213 = 0;
        int64x2_t v212 = 0;
        v67.f64[0] = v38 * 0.5;
        CNTimeSpan::SetTimeSpan((uint64_t *)&v212, 0, (int8x16_t)v67, v66);
        v222[0] = CNTimeSpan::operator+((uint64_t)&v316, &v212, v69, v70);
        v222[1] = v71;
        uint64_t v214 = 0x100000004;
        *(void *)&v72.f64[1] = 0x400000004;
        long long v213 = xmmword_18E1F6F80;
        int64x2_t v212 = &unk_1EDD19458;
        uint64_t v215 = v216;
        v72.f64[0] = v38 * 0.5;
        sub_18DFE3240((uint64_t)&v238, (uint64_t)&v212, v72);
        uint64_t v219 = 0x100000004;
        long long v218 = xmmword_18E1F6F80;
        uint64_t v217 = &unk_1EDD19458;
        int v220 = &v221;
        sub_18DFEF1F4((uint64_t)&v311, (uint64_t)&v212, (uint64_t)&v217);
        if (v22)
        {
          uint64_t v209 = 0x400000004;
          *(void *)&v73.f64[1] = 0x400000010;
          long long v208 = xmmword_18E1F6F70;
          uint64_t v207 = &unk_1EDD195A8;
          long long v210 = v211;
          v73.f64[0] = v38 * 0.5;
          sub_18DFE3240((uint64_t)&v228, (uint64_t)&v207, v73);
          uint64_t v214 = 0x400000004;
          long long v213 = xmmword_18E1F6F70;
          int64x2_t v212 = &unk_1EDD195A8;
          uint64_t v215 = v216;
          sub_18DFEF1F4((uint64_t)&v306, (uint64_t)&v207, (uint64_t)&v212);
          uint64_t v209 = 0x300000004;
          *(void *)&v74.f64[1] = 0x40000000CLL;
          long long v208 = xmmword_18E1F6F90;
          uint64_t v207 = &unk_1EDD19578;
          long long v210 = v211;
          v74.f64[0] = v38 * 0.5;
          sub_18DFE3240((uint64_t)&v223, (uint64_t)&v207, v74);
          uint64_t v204 = 0x300000004;
          long long v203 = xmmword_18E1F6F90;
          double v202 = &unk_1EDD19578;
          uint64_t v205 = v206;
          sub_18DFEF1F4((uint64_t)&v301, (uint64_t)&v207, (uint64_t)&v202);
          long long v75 = xmmword_18E1F6F70;
          long long v76 = xmmword_18E1F6F90;
        }
        else
        {
          uint64_t v214 = 0x400000004;
          long long v75 = xmmword_18E1F6F70;
          long long v76 = xmmword_18E1F6F90;
          long long v213 = xmmword_18E1F6F70;
          int64x2_t v212 = &unk_1EDD195A8;
          uint64_t v215 = v216;
          uint64_t v204 = 0x300000004;
          long long v203 = xmmword_18E1F6F90;
          double v202 = &unk_1EDD19578;
          uint64_t v205 = v206;
        }
        uint64_t v199 = 0x100000004;
        long long v198 = xmmword_18E1F6F80;
        double v197 = &unk_1EDD19458;
        float64x2_t v200 = &v201;
        uint64_t v209 = 0x400000004;
        long long v208 = v75;
        uint64_t v207 = &unk_1EDD195A8;
        long long v210 = v211;
        uint64_t v194 = 0x300000004;
        long long v193 = v76;
        double v192 = &unk_1EDD19578;
        double v195 = &v196;
        if (v20((long long *)v222, &v341, &v217, v11, v9, &v197, &v207, &v192)) {
          return 0xFFFFFFFFLL;
        }
        uint64_t v189 = 0x400000004;
        long long v188 = xmmword_18E1F6F70;
        double v187 = &unk_1EDD195A8;
        uint64_t v190 = &v191;
        if (v22)
        {
          sub_18DFE2B44((uint64_t)&v207, (uint64_t)&v212, (uint64_t)&v187);
          uint64_t v173 = 0x300000004;
          long long v172 = xmmword_18E1F6F90;
          long long v171 = &unk_1EDD19578;
          uint64_t v174 = v175;
          sub_18DFE2B44((uint64_t)&v207, (uint64_t)&v202, (uint64_t)&v171);
          uint64_t v184 = 0x300000004;
          long long v183 = xmmword_18E1F6F90;
          uint64_t v182 = &unk_1EDD19578;
          uint64_t v185 = v186;
          float64x2_t v78 = sub_18DFEF1F4((uint64_t)&v171, (uint64_t)&v192, (uint64_t)&v182);
        }
        else
        {
          uint64_t v184 = 0x300000004;
          *(void *)&v78.f64[1] = 0x40000000CLL;
          long long v183 = xmmword_18E1F6F90;
          uint64_t v182 = &unk_1EDD19578;
          uint64_t v185 = v186;
        }
        *(void *)&long long v172 = 0;
        long long v171 = 0;
        v78.f64[0] = v38;
        CNTimeSpan::SetTimeSpan((uint64_t *)&v171, 0, (int8x16_t)v78, v77);
        v181[0] = CNTimeSpan::operator+((uint64_t)&v316, &v171, v79, v80);
        v181[1] = v81;
        uint64_t v173 = 0x100000004;
        *(void *)&v82.f64[1] = 0x400000004;
        long long v172 = xmmword_18E1F6F80;
        long long v171 = &unk_1EDD19458;
        uint64_t v174 = v175;
        v82.f64[0] = v38;
        sub_18DFE3240((uint64_t)&v197, (uint64_t)&v171, v82);
        uint64_t v178 = 0x100000004;
        long long v177 = xmmword_18E1F6F80;
        double v176 = &unk_1EDD19458;
        uint64_t v179 = &v180;
        sub_18DFEF1F4((uint64_t)&v311, (uint64_t)&v171, (uint64_t)&v176);
        if (v22)
        {
          uint64_t v168 = 0x400000004;
          *(void *)&v83.f64[1] = 0x400000010;
          long long v167 = xmmword_18E1F6F70;
          long long v166 = &unk_1EDD195A8;
          long long v169 = v170;
          v83.f64[0] = v38;
          sub_18DFE3240((uint64_t)&v187, (uint64_t)&v166, v83);
          uint64_t v173 = 0x400000004;
          long long v172 = xmmword_18E1F6F70;
          long long v171 = &unk_1EDD195A8;
          uint64_t v174 = v175;
          sub_18DFEF1F4((uint64_t)&v306, (uint64_t)&v166, (uint64_t)&v171);
          uint64_t v168 = 0x300000004;
          *(void *)&v84.f64[1] = 0x40000000CLL;
          long long v167 = xmmword_18E1F6F90;
          long long v166 = &unk_1EDD19578;
          long long v169 = v170;
          v84.f64[0] = v38;
          sub_18DFE3240((uint64_t)&v182, (uint64_t)&v166, v84);
          uint64_t v163 = 0x300000004;
          long long v162 = xmmword_18E1F6F90;
          long long v161 = &unk_1EDD19578;
          long long v164 = v165;
          sub_18DFEF1F4((uint64_t)&v301, (uint64_t)&v166, (uint64_t)&v161);
          long long v85 = xmmword_18E1F6F70;
          long long v86 = xmmword_18E1F6F90;
        }
        else
        {
          uint64_t v173 = 0x400000004;
          long long v85 = xmmword_18E1F6F70;
          long long v86 = xmmword_18E1F6F90;
          long long v172 = xmmword_18E1F6F70;
          long long v171 = &unk_1EDD195A8;
          uint64_t v174 = v175;
          uint64_t v163 = 0x300000004;
          long long v162 = xmmword_18E1F6F90;
          long long v161 = &unk_1EDD19578;
          long long v164 = v165;
        }
        uint64_t v158 = 0x100000004;
        long long v157 = xmmword_18E1F6F80;
        double v156 = &unk_1EDD19458;
        double v159 = &v160;
        uint64_t v168 = 0x400000004;
        long long v167 = v85;
        long long v166 = &unk_1EDD195A8;
        long long v169 = v170;
        uint64_t v153 = 0x300000004;
        long long v152 = v86;
        uint64_t v151 = &unk_1EDD19578;
        double v154 = &v155;
        uint64_t v40 = v11;
        if (v20((long long *)v181, &v341, &v176, v11, v9, &v156, &v166, &v151)) {
          return 0xFFFFFFFFLL;
        }
        if (v22)
        {
          sub_18E096248((uint64_t)&v146, (uint64_t)&v166, (uint64_t)&v171);
          sub_18E0962D0((uint64_t)&v166, (uint64_t)&v161, (uint64_t)&v136);
          sub_18E0961F8((uint64_t)&v141, (uint64_t)&v136, (uint64_t)&v151);
        }
        else
        {
          uint64_t v148 = 0x400000004;
          long long v147 = xmmword_18E1F6F70;
          uint64_t v146 = &unk_1EDD195A8;
          long long v149 = &v150;
          uint64_t v143 = 0x300000004;
          long long v142 = xmmword_18E1F6F90;
          double v141 = &unk_1EDD19578;
          long long v144 = &v145;
        }
        uint64_t v113 = 0x100000004;
        *(void *)&v87.f64[1] = 0x400000004;
        long long v112 = xmmword_18E1F6F80;
        double v111 = &unk_1EDD19458;
        long long v114 = &v115;
        v87.f64[0] = 2.0;
        sub_18DFE3240((uint64_t)&v238, (uint64_t)&v111, v87);
        uint64_t v118 = 0x100000004;
        long long v117 = xmmword_18E1F6F80;
        unsigned int v116 = &unk_1EDD19458;
        long long v119 = &v120;
        sub_18DFEF1F4((uint64_t)&v284, (uint64_t)&v111, (uint64_t)&v116);
        uint64_t v108 = 0x100000004;
        uint64_t v106 = &unk_1EDD19458;
        *(void *)&v88.f64[1] = 0x400000004;
        long long v107 = xmmword_18E1F6F80;
        int v109 = &v110;
        v88.f64[0] = 2.0;
        sub_18DFE3240((uint64_t)&v197, (uint64_t)&v106, v88);
        uint64_t v123 = 0x100000004;
        long long v122 = xmmword_18E1F6F80;
        double v121 = &unk_1EDD19458;
        long long v124 = &v125;
        sub_18DFEF1F4((uint64_t)&v116, (uint64_t)&v106, (uint64_t)&v121);
        uint64_t v128 = 0x100000004;
        long long v127 = xmmword_18E1F6F80;
        double v126 = &unk_1EDD19458;
        long long v129 = &v130;
        sub_18DFEF1F4((uint64_t)&v121, (uint64_t)&v156, (uint64_t)&v126);
        uint64_t v133 = 0x100000004;
        *(void *)&v89.f64[1] = 0x400000004;
        long long v132 = xmmword_18E1F6F80;
        double v131 = &unk_1EDD19458;
        long long v134 = &v135;
        v89.f64[0] = v38 / 6.0;
        sub_18DFE3240((uint64_t)&v126, (uint64_t)&v131, v89);
        uint64_t v138 = 0x100000004;
        long long v137 = xmmword_18E1F6F80;
        double v136 = &unk_1EDD19458;
        long long v139 = &v140;
        sub_18DFEF1F4((uint64_t)&v327, (uint64_t)&v131, (uint64_t)&v136);
        __n128 v41 = sub_18DFE2F24((uint64_t)&v327, (uint64_t)&v136);
        if (v22)
        {
          v41.n128_u64[0] = 2.0;
          sub_18E096354((uint64_t)&v228, (uint64_t)&v111, (float64x2_t)v41);
          sub_18E06D7C8((uint64_t)&v269, (uint64_t)&v111, (uint64_t)&v116);
          v90.f64[0] = 2.0;
          sub_18E096354((uint64_t)&v187, (uint64_t)&v106, v90);
          sub_18E06D7C8((uint64_t)&v116, (uint64_t)&v106, (uint64_t)&v121);
          sub_18E06D7C8((uint64_t)&v121, (uint64_t)&v146, (uint64_t)&v126);
          v91.f64[0] = v38 / 6.0;
          sub_18E096354((uint64_t)&v126, (uint64_t)&v131, v91);
          sub_18E06D7C8((uint64_t)&v322, (uint64_t)&v131, (uint64_t)&v136);
          __n128 v92 = sub_18DFE2F24((uint64_t)&v322, (uint64_t)&v136);
          v92.n128_u64[0] = 2.0;
          sub_18E096394((uint64_t)&v223, (uint64_t)&v111, (float64x2_t)v92);
          sub_18E0961F8((uint64_t)&v116, (uint64_t)&v264, (uint64_t)&v111);
          v93.f64[0] = 2.0;
          sub_18E096394((uint64_t)&v182, (uint64_t)&v106, v93);
          sub_18E0961F8((uint64_t)&v121, (uint64_t)&v116, (uint64_t)&v106);
          sub_18E0961F8((uint64_t)&v126, (uint64_t)&v121, (uint64_t)&v141);
          v94.f64[0] = v38 / 6.0;
          sub_18E096394((uint64_t)&v126, (uint64_t)&v131, v94);
          sub_18E0961F8((uint64_t)&v136, (uint64_t)&v317, (uint64_t)&v131);
          __n128 v41 = sub_18DFE2F24((uint64_t)&v317, (uint64_t)&v136);
        }
        if (v68 == v104)
        {
          *(double *)(v14 + 40) = v38;
          *int v105 = *v103;
          uint64_t v308 = 0x100000004;
          long long v307 = xmmword_18E1F6F80;
          long long v306 = &unk_1EDD19458;
          uint64_t v309 = v310;
          sub_18DFEF1F4(v102, (uint64_t)&v327, (uint64_t)&v306);
          sub_18DFE2F24(v102, (uint64_t)&v306);
          if (v22)
          {
            sub_18E06D7C8((uint64_t)&v342, (uint64_t)&v322, (uint64_t)&v294);
            sub_18E096248((uint64_t)&v306, (uint64_t)&v294, v14 + 312);
            sub_18DFE2F24(v14 + 312, (uint64_t)&v306);
            sub_18E06D7C8((uint64_t)&v342, (uint64_t)&v322, (uint64_t)&v306);
            uint64_t v95 = v14 + 480;
            sub_18E0962D0((uint64_t)&v306, v95, (uint64_t)&v279);
            sub_18E0961F8((uint64_t)&v269, (uint64_t)&v335, (uint64_t)&v317);
            sub_18E0961F8((uint64_t)&v294, (uint64_t)&v279, (uint64_t)&v269);
            sub_18DFE2F24(v95, (uint64_t)&v294);
            sub_18DFE2F24(v101, v102);
            sub_18E06D7C8((uint64_t)&v342, (uint64_t)&v322, (uint64_t)&v306);
            sub_18DFE2F24(v100, (uint64_t)&v306);
            sub_18E0961F8((uint64_t)&v306, (uint64_t)&v335, (uint64_t)&v317);
            unsigned __int8 v96 = &v306;
            uint64_t v97 = v3;
          }
          else
          {
            uint64_t v97 = v101;
            unsigned __int8 v96 = (void **)(v14 + 240);
          }
          sub_18DFE2F24(v97, (uint64_t)v96);
          return 0;
        }
      }
    }
    sub_18DFE2F24(v7, v14 + 240);
    if (v22)
    {
      uint64_t v344 = 0x400000004;
      uint64_t v342 = &unk_1EDD195A8;
      long long v345 = v346;
      LODWORD(v343) = v19;
      DWORD1(v343) = v19;
      DWORD2(v343) = v19 * v19;
      HIDWORD(v343) = v19;
      sub_18DFE2CC8((uint64_t)&v342, 0.0);
      if ((int)v19 >= 1)
      {
        int v26 = 0;
        int v27 = HIDWORD(v343) + 1;
        double v28 = v345;
        uint64_t v29 = v19;
        do
        {
          *(void *)&v28[8 * v26] = 0x3FF0000000000000;
          v26 += v27;
          --v29;
        }
        while (v29);
      }
      sub_18DFE2F24(v5, (uint64_t)&v342);
      uint64_t v344 = 0x300000004;
      uint64_t v342 = &unk_1EDD19578;
      long long v345 = v346;
      *(void *)&long long v343 = __PAIR64__(v17, v19);
      DWORD2(v343) = v17 * v19;
      HIDWORD(v343) = v19;
      sub_18DFE2CC8((uint64_t)&v342, 0.0);
      sub_18DFE2F24(v3, (uint64_t)&v342);
    }
    uint64_t result = 0;
    *(void *)(v14 + 40) = 0;
  }
  return result;
}

uint64_t sub_18E0961A4(uint64_t result)
{
  *(unsigned char *)(result + 216) = 0;
  return result;
}

uint64_t sub_18E0961B4@<X0>(int a1@<W0>, int a2@<W1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 24) = 0x400000004;
  *(void *)a3 = &unk_1EDD195A8;
  *(void *)(a3 + 32) = a3 + 40;
  *(_DWORD *)(a3 + 8) = a1;
  *(_DWORD *)(a3 + 12) = a2;
  *(_DWORD *)(a3 + 16) = a2 * a1;
  *(_DWORD *)(a3 + 20) = a1;
  return sub_18DFE2CC8(a3, 0.0);
}

double sub_18E0961F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 24) = 0x300000004;
  *(void *)a1 = &unk_1EDD19578;
  *(_OWORD *)(a1 + 8) = xmmword_18E1F6F90;
  *(void *)(a1 + 32) = a1 + 40;
  *(void *)&double result = *(_OWORD *)&sub_18DFEF1F4(a2, a3, a1);
  return result;
}

void sub_18E096248(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 24) = 0x400000004;
  *(void *)a1 = &unk_1EDD195A8;
  *(_OWORD *)(a1 + 8) = xmmword_18E1F6F70;
  *(void *)(a1 + 32) = a1 + 40;
  sub_18DFE2B44(a2, a3, a1);
}

void sub_18E0962B0(_Unwind_Exception *a1)
{
  *uint64_t v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

void sub_18E0962D0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 24) = 0x300000004;
  *(void *)a3 = &unk_1EDD19578;
  *(_OWORD *)(a3 + 8) = xmmword_18E1F6F90;
  *(void *)(a3 + 32) = a3 + 40;
  sub_18DFE2B44(a1, a2, a3);
}

void sub_18E096334(_Unwind_Exception *a1)
{
  *uint64_t v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

double sub_18E096354@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>, float64x2_t a3@<Q0>)
{
  *(void *)(a2 + 24) = 0x400000004;
  *(void *)a2 = &unk_1EDD195A8;
  *(_OWORD *)(a2 + 8) = xmmword_18E1F6F70;
  *(void *)(a2 + 32) = a2 + 40;
  *(void *)&double result = *(_OWORD *)&sub_18DFE3240(a1, a2, a3);
  return result;
}

double sub_18E096394@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>, float64x2_t a3@<Q0>)
{
  *(void *)(a2 + 24) = 0x300000004;
  *(void *)a2 = &unk_1EDD19578;
  *(_OWORD *)(a2 + 8) = xmmword_18E1F6F90;
  *(void *)(a2 + 32) = a2 + 40;
  *(void *)&double result = *(_OWORD *)&sub_18DFE3240(a1, a2, a3);
  return result;
}

__n128 sub_18E0963D8(uint64_t a1, uint64_t a2)
{
  result.n128_u64[0] = 0x100000004;
  *(void *)(a1 + 24) = 0x100000004;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1EDD19458;
  if (a1 == a2)
  {
    unsigned int v17 = "this != &(A)";
    int v18 = 603;
    goto LABEL_16;
  }
  int v3 = *(_DWORD *)(a2 + 8);
  int v4 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = v4;
  uint64_t v5 = (v4 * v3);
  *(_DWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 20) = v3;
  uint64_t v6 = (unint64_t *)(a1 + 40);
  *(void *)(a1 + 32) = a1 + 40;
  if (*(_DWORD *)(a2 + 8) > 4u)
  {
    unsigned int v17 = "this->max_num_rows_ >= A.num_rows_";
    int v18 = 616;
    goto LABEL_16;
  }
  if (*(_DWORD *)(a2 + 12) >= 2u)
  {
    unsigned int v17 = "this->max_num_cols_ >= A.num_cols_";
    int v18 = 617;
LABEL_16:
    __assert_rtn("CNMatrix", "cnmatrix.h", v18, v17);
  }
  int v7 = *(_DWORD *)(a2 + 16);
  if (v7 > 3)
  {
    uint64_t v10 = (v7 - 2);
    uint64_t v11 = *(long long **)(a2 + 32);
    uint64_t v12 = (v7 - 1) >> 1;
    uint64_t v13 = v11;
    uint64_t v14 = (_OWORD *)(a1 + 40);
    do
    {
      long long v15 = *v13++;
      *v14++ = v15;
      --v12;
    }
    while (v12);
    uint64_t v16 = v10;
    __n128 result = *(__n128 *)((char *)v11 + v16 * 8);
    *(__n128 *)&v6[v16] = result;
  }
  else if ((int)v5 >= 1)
  {
    uint64_t v8 = *(unint64_t **)(a2 + 32);
    do
    {
      unint64_t v9 = *v8++;
      result.n128_u64[0] = v9;
      *v6++ = v9;
      --v5;
    }
    while (v5);
  }
  return result;
}

void sub_18E096508(_Unwind_Exception *a1)
{
  *uint64_t v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

__n128 sub_18E096528(uint64_t a1, uint64_t a2)
{
  result.n128_u64[0] = 0x400000004;
  *(void *)(a1 + 24) = 0x400000004;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1EDD195A8;
  if (a1 == a2)
  {
    unsigned int v17 = "this != &(A)";
    int v18 = 603;
    goto LABEL_16;
  }
  int v3 = *(_DWORD *)(a2 + 8);
  int v4 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = v4;
  uint64_t v5 = (v4 * v3);
  *(_DWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 20) = v3;
  uint64_t v6 = (unint64_t *)(a1 + 40);
  *(void *)(a1 + 32) = a1 + 40;
  if (*(_DWORD *)(a2 + 8) > 4u)
  {
    unsigned int v17 = "this->max_num_rows_ >= A.num_rows_";
    int v18 = 616;
    goto LABEL_16;
  }
  if (*(_DWORD *)(a2 + 12) >= 5u)
  {
    unsigned int v17 = "this->max_num_cols_ >= A.num_cols_";
    int v18 = 617;
LABEL_16:
    __assert_rtn("CNMatrix", "cnmatrix.h", v18, v17);
  }
  int v7 = *(_DWORD *)(a2 + 16);
  if (v7 > 3)
  {
    uint64_t v10 = (v7 - 2);
    uint64_t v11 = *(long long **)(a2 + 32);
    uint64_t v12 = (v7 - 1) >> 1;
    uint64_t v13 = v11;
    uint64_t v14 = (_OWORD *)(a1 + 40);
    do
    {
      long long v15 = *v13++;
      *v14++ = v15;
      --v12;
    }
    while (v12);
    uint64_t v16 = v10;
    __n128 result = *(__n128 *)((char *)v11 + v16 * 8);
    *(__n128 *)&v6[v16] = result;
  }
  else if ((int)v5 >= 1)
  {
    uint64_t v8 = *(unint64_t **)(a2 + 32);
    do
    {
      unint64_t v9 = *v8++;
      result.n128_u64[0] = v9;
      *v6++ = v9;
      --v5;
    }
    while (v5);
  }
  return result;
}

void sub_18E096654(_Unwind_Exception *a1)
{
  *uint64_t v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

double sub_18E096674@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 24) = 0x100000004;
  *(void *)a2 = &unk_1EDD19458;
  *(_OWORD *)(a2 + 8) = xmmword_18E1F6F80;
  *(void *)(a2 + 32) = a2 + 40;
  uint64_t v5 = 0x100000004;
  int v3 = &unk_1EDD194B8;
  long long v4 = xmmword_18E1F6F80;
  uint64_t v6 = &v7;
  *(void *)&double result = sub_18E064598(a1, a2, (uint64_t)&v3).n128_u64[0];
  return result;
}

void sub_18E096714(_Unwind_Exception *a1)
{
  *uint64_t v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

double sub_18E096734@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 24) = 0x200000004;
  *(void *)a2 = &unk_1EDD194E8;
  *(_OWORD *)(a2 + 8) = xmmword_18E200B60;
  *(void *)(a2 + 32) = a2 + 40;
  uint64_t v5 = 0x200000004;
  int v3 = &unk_1EDD19548;
  long long v4 = xmmword_18E200B60;
  uint64_t v6 = &v7;
  *(void *)&double result = sub_18E064598(a1, a2, (uint64_t)&v3).n128_u64[0];
  return result;
}

void sub_18E0967D4(_Unwind_Exception *a1)
{
  *uint64_t v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

uint64_t sub_18E0967F4@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 24) = 0x200000004;
  *(void *)a3 = &unk_1EDD194E8;
  *(_OWORD *)(a3 + 8) = xmmword_18E200B60;
  *(void *)(a3 + 32) = a3 + 40;
  uint64_t v6 = 0x200000004;
  long long v4 = &unk_1EDD19548;
  long long v5 = xmmword_18E200B60;
  uint64_t v7 = &v8;
  return sub_18DFE2934(a1, a2, a3, (uint64_t)&v4);
}

uint64_t sub_18E096888@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 24) = 0x200000004;
  *(void *)a3 = &unk_1EDD194E8;
  *(_OWORD *)(a3 + 8) = xmmword_18E200B60;
  *(void *)(a3 + 32) = a3 + 40;
  return sub_18E064994(a1, a2, a3);
}

void sub_18E0968EC(_Unwind_Exception *a1)
{
  *uint64_t v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

void *sub_18E09690C(void *result)
{
  *double result = &unk_1EDD17478;
  return result;
}

void *sub_18E09692C(void *result)
{
  *double result = &unk_1EDD174D8;
  return result;
}

void sub_18E09694C(void *a1)
{
  *a1 = &unk_1EDD174D8;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E09697C(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E096988(uint64_t a1)
{
  sub_18DFE2870(a1, v1);
}

void *sub_18E0969AC(void *result)
{
  *double result = &unk_1EDD174D8;
  return result;
}

void sub_18E0969CC(void *a1)
{
  *a1 = &unk_1EDD17478;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E0969FC(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E096A08(uint64_t a1)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  sub_18DEF3CF4(a1, v1);
}

void sub_18E096A58(void *a1)
{
  *a1 = &unk_1EDD174D8;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E096A88(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E096A94(uint64_t a1)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  sub_18DFE2870(a1, v1);
}

void raven::RavenSupervisor::RavenSupervisor(raven::RavenSupervisor *this)
{
  char v1 = 1;
  raven::RavenSupervisor::RavenSupervisor((uint64_t)this, &v1);
}

{
  char v1;

  char v1 = 1;
  raven::RavenSupervisor::RavenSupervisor((uint64_t)this, &v1);
}

void raven::RavenSupervisor::RavenSupervisor(uint64_t a1, unsigned char *a2)
{
  uint64_t v4 = cnframework::Supervisor::Supervisor(a1, a2);
  *(void *)uint64_t v4 = &unk_1EDD13B80;
  *(unsigned char *)(v4 + 817) = 0;
  *(_OWORD *)(v4 + 824) = 0u;
  sub_18E0B5758(v4 + 840);
  sub_18E0B5758(a1 + 4672);
  cnframework::ActiveObjectBase::ActiveObjectBase(a1 + 8504, a2);
  *(void *)(a1 + 8504) = &unk_1EDD15F78;
  long long v5 = (_WORD *)(a1 + 25848);
  *(unsigned char *)(a1 + 8984) = 0;
  *(void *)(a1 + 8992) = 0;
  *(void *)(a1 + 9000) = &unk_1EDD0A608;
  int64x2_t v6 = vdupq_n_s64(0x7FF8000000000000uLL);
  uint64_t v7 = 9048;
  do
  {
    uint64_t v8 = a1 + v7;
    *(void *)(v8 + 8) = 0;
    *(void *)(v8 + 16) = 0;
    *(void *)uint64_t v8 = &unk_1EDD14240;
    *(int64x2_t *)(v8 + 24) = v6;
    *(void *)(v8 + 40) = 0x7FF8000000000000;
    v7 += 48;
  }
  while ((_WORD *)(v8 + 48) != v5);
  *(_DWORD *)(a1 + 9008) = 0;
  *(_OWORD *)(a1 + 9016) = 0u;
  *(_OWORD *)(a1 + 9032) = 0u;
  *(void *)(a1 + 25912) = 0;
  *(_OWORD *)(a1 + 25864) = 0u;
  *(_OWORD *)(a1 + 25880) = 0u;
  *(_OWORD *)(a1 + 25896) = 0u;
  *(void *)(a1 + 25920) = 0x3FF0000000000000;
  sub_18E093C38(a1 + 25952);
  *(void *)(a1 + 25952) = &unk_1EDD0B2B0;
  *(unsigned char *)(a1 + 26168) = 0;
  *long long v5 = 0;
  *(_OWORD *)(a1 + 26584) = 0u;
  *(_OWORD *)(a1 + 26600) = 0u;
  *(_OWORD *)(a1 + 26616) = 0u;
  *(unsigned char *)(a1 + 8984) = 0;
  cnframework::ActiveObjectBase::ActiveObjectBase(a1 + 26632, a2);
  *(void *)(a1 + 26632) = &unk_1EDD15D20;
  *(unsigned char *)(a1 + 27112) = 0;
  *(void *)(a1 + 27120) = 0;
  *(unsigned char *)(a1 + 27128) = 0;
  *(unsigned char *)(a1 + 27240) = 0;
  *(unsigned char *)(a1 + 27248) = 0;
  *(unsigned char *)(a1 + 27456) = 0;
  *(unsigned char *)(a1 + 27464) = 0;
  *(unsigned char *)(a1 + 27696) = 0;
  *(unsigned char *)(a1 + 27704) = 0;
  *(unsigned char *)(a1 + 27864) = 0;
  *(unsigned char *)(a1 + 27872) = 0;
  *(unsigned char *)(a1 + 28032) = 0;
  *(unsigned char *)(a1 + 28040) = 0;
  *(void *)(a1 + 28048) = 0;
  *(void *)(a1 + 28056) = &unk_1EDD0A420;
  *(void *)(a1 + 28088) = 0x10000000ALL;
  *(void *)(a1 + 28064) = &unk_1EDD17628;
  *(void *)(a1 + 28096) = a1 + 28104;
  *(void *)(a1 + 28208) = 0x10000000ALL;
  *(void *)(a1 + 28184) = &unk_1EDD17628;
  *(void *)(a1 + 28216) = a1 + 28224;
  *(void *)(a1 + 28312) = 0x3DDB7CDFD9D7BDBBLL;
  *(void *)(a1 + 28072) = 0;
  *(void *)(a1 + 28080) = 0;
  *(void *)(a1 + 28192) = 0;
  *(void *)(a1 + 28200) = 0;
  *(_DWORD *)(a1 + 28304) = 1;
  *(void *)(a1 + 28320) = 0;
  *(void *)(a1 + 28328) = 0x7FF8000000000000;
  *(void *)(a1 + 28336) = &unk_1EDD140B8;
  *(void *)(a1 + 28344) = 0;
  *(void *)(a1 + 28352) = 0;
  *(unsigned char *)(a1 + 28360) = 0;
  *(void *)(a1 + 28368) = 0;
  *(void *)(a1 + 28376) = 0;
  *(unsigned char *)(a1 + 28384) = 0;
  *(void *)(a1 + 28392) = 0;
  *(void *)(a1 + 28400) = 0;
  *(unsigned char *)(a1 + 28408) = 0;
  *(void *)(a1 + 28424) = 0;
  *(void *)(a1 + 28416) = 0;
  *(void *)(a1 + 28432) = 0x7FF8000000000000;
  *(unsigned char *)(a1 + 28440) = 0;
  *(void *)(a1 + 28448) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 28456) = 0u;
  *(_OWORD *)(a1 + 28472) = 0u;
  *(_OWORD *)(a1 + 28488) = 0u;
  *(_OWORD *)(a1 + 28504) = 0u;
  *(void *)(a1 + 28520) = 0;
  cnframework::ActiveObjectBase::ActiveObjectBase(a1 + 28528, a2);
  *(unsigned char *)(a1 + 29008) = 0;
  *(void *)(a1 + 29064) = 0;
  *(_OWORD *)(a1 + 29016) = 0u;
  *(_OWORD *)(a1 + 29032) = 0u;
  *(_OWORD *)(a1 + 29048) = 0u;
  *(void *)(a1 + 28528) = &unk_1EDD15B08;
  *(_OWORD *)(a1 + 29080) = 0u;
  sub_18DFF49CC(a1 + 29096);
  raven::RavenConvergenceEstimator::RavenConvergenceEstimator((raven::RavenConvergenceEstimator *)(a1 + 31528));
}

void sub_18E098A5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, cnframework::ActiveObjectBase *a14, cnframework::ActiveObjectBase *a15, raven::RavenAccelerationDecompositionActiveObject *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,cnframework::ActiveObjectBase *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,cnframework::ActiveObjectBase *a56,uint64_t a57,cnframework::ActiveObjectBase *a58,void **a59,cnframework::ActiveObjectBase *a60,raven::VLLocalizationEvent *a61,uint64_t a62,uint64_t a63)
{
  raven::RavenTimerActiveObject::~RavenTimerActiveObject(v70);
  raven::RavenSolutionSelectorActiveObject::~RavenSolutionSelectorActiveObject(v73);
  raven::RavenSolutionPostprocessorActiveObject::~RavenSolutionPostprocessorActiveObject(v75);
  sub_18E015214(v74);
  sub_18DFF6AD0(a45);
  raven::RavenPassThroughEstimatorActiveObject::~RavenPassThroughEstimatorActiveObject(a56);
  sub_18E098FF0(a58);
  raven::RavenPositionContextEstimatorActiveObject::~RavenPositionContextEstimatorActiveObject(v72);
  raven::RavenPNTEstimatorActiveObject::~RavenPNTEstimatorActiveObject(v71);
  sub_18E0B83FC(a59);
  raven::RavenMountStateEstimatorActiveObject::~RavenMountStateEstimatorActiveObject(a66);
  sub_18E0B8510(a64);
  raven::RavenIntegrityEstimatorActiveObject::~RavenIntegrityEstimatorActiveObject(a65);
  raven::RavenIMUPreprocessorActiveObject::~RavenIMUPreprocessorActiveObject(a69);
  raven::RavenGnssPreprocessorActiveObject::~RavenGnssPreprocessorActiveObject(a61);
  sub_18E0B85B4(a60);
  sub_18E0B8920((uint64_t)a67);
  raven::RavenDeltaAltitudeActiveObject::~RavenDeltaAltitudeActiveObject(a68);
  raven::RavenConvergenceEstimatorActiveObject::~RavenConvergenceEstimatorActiveObject(a14);
  sub_18E0B8EB0(a15);
  raven::RavenAccelerationDecompositionActiveObject::~RavenAccelerationDecompositionActiveObject(a16);
  sub_18E00C30C(a17);
  sub_18E00C30C(a18);
  cnframework::Supervisor::~Supervisor(v69, v77, v78, v79, v80, v81, v82, v83);
  _Unwind_Resume(a1);
}

void sub_18E098F98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (SLOBYTE(STACK[0x20F]) < 0) {
    operator delete(__p);
  }
  sub_18E0B6438(v72);
  sub_18E0B6554(a14);
  JUMPOUT(0x18E098F68);
}

void sub_18E098FF0(cnframework::ActiveObjectBase *a1)
{
  *(void *)a1 = &unk_1EDD15678;
  sub_18E0B8298((void *)a1 + 70);
  sub_18DEE2DB8((void *)a1 + 64);

  cnframework::ActiveObjectBase::~ActiveObjectBase(a1);
}

void raven::RavenSupervisor::~RavenSupervisor(raven::RavenSupervisor *this)
{
  *(void *)this = &unk_1EDD13B80;
  cnframework::Supervisor::TearDown(this);
  uint64_t v2 = *((void *)this + 23314);
  *((void *)this + 23314) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  int v3 = (char *)this + 170136;
  uint64_t v4 = *((void *)this + 23313);
  *((void *)this + 23313) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *((void *)this + 23312);
  *((void *)this + 23312) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  int64x2_t v6 = (char *)this + 79576;
  *((void *)this + 23142) = &unk_1EDD14B08;
  uint64_t v16 = (raven::RavenSupervisor *)((char *)this + 82472);
  unsigned int v17 = (raven::RavenSupervisor *)((char *)this + 78224);
  cnframework::ActiveObjectBase::~ActiveObjectBase((raven::RavenSupervisor *)((char *)this + 185136));
  raven::RavenTimerActiveObject::~RavenTimerActiveObject((raven::RavenSupervisor *)((char *)this + 184440));
  raven::RavenSolutionSelectorActiveObject::~RavenSolutionSelectorActiveObject((raven::RavenSupervisor *)((char *)this + 183456));
  raven::RavenSolutionPostprocessorActiveObject::~RavenSolutionPostprocessorActiveObject((raven::RavenSupervisor *)((char *)this + 181472));
  *((void *)this + 21285) = &unk_1EDD149F8;
  std::mutex::~mutex((std::mutex *)((char *)this + 181408));
  CoreNavigation::CLP::LogEntry::Raven::RavenOutput::~RavenOutput((raven::RavenSupervisor *)((char *)this + 181344));
  sub_18E014AC8((void ***)this + 22667, 0);
  *((void *)this + 22009) = &unk_1EDD0B168;
  *((void *)this + 22330) = &unk_1EDD0A858;
  *((void *)this + 22008) = &unk_1EDD0A858;
  *((void *)this + 21667) = &unk_1EDD0B168;
  *((void *)this + 21988) = &unk_1EDD0A858;
  cnframework::ActiveObjectBase::~ActiveObjectBase((raven::RavenSupervisor *)((char *)this + 170280));
  *((void *)this + 21205) = &unk_1EDD156E8;
  if (*((unsigned char *)this + 170256)) {
    *((unsigned char *)this + 170256) = 0;
  }
  if (*v3) {
    *int v3 = 0;
  }
  cnframework::ActiveObjectBase::~ActiveObjectBase((raven::RavenSupervisor *)((char *)this + 169640));
  *((void *)this + 20726) = &unk_1EDD15C00;
  *((void *)this + 20794) = &unk_1EDD14928;
  sub_18E0268B0((uint64_t)this + 166352);
  sub_18E0B7FF0((void **)this + 20726);
  *((void *)this + 20650) = &unk_1EDD15678;
  sub_18E0B8298((void *)this + 20720);
  sub_18DEE2DB8((void *)this + 20714);
  cnframework::ActiveObjectBase::~ActiveObjectBase((raven::RavenSupervisor *)((char *)this + 165200));
  raven::RavenPositionContextEstimatorActiveObject::~RavenPositionContextEstimatorActiveObject((void **)this + 20518);
  *((void *)this + 11116) = &unk_1EDD14E58;
  sub_18E06955C((uint64_t)this + 89472);
  sub_18E0B7D28((void **)this + 11116);
  sub_18E0B83FC((void **)this + 10505);
  *(void *)uint64_t v16 = &unk_1EDD15A70;
  sub_18E0B79E0((void *)this + 10371);
  cnframework::ActiveObjectBase::~ActiveObjectBase(v16);
  *(void *)unsigned int v17 = &unk_1EDD14A98;
  sub_18DEE2DB8((void *)this + 10299);
  if (*((unsigned char *)this + 79752)) {
    *((unsigned char *)this + 79752) = 0;
  }
  uint64_t v7 = (char *)this + 79288;
  if (*((unsigned char *)this + 79600)) {
    *((unsigned char *)this + 79600) = 0;
  }
  uint64_t v8 = (char *)this + 78920;
  if (*v6) {
    *int64x2_t v6 = 0;
  }
  if (*v7) {
    *uint64_t v7 = 0;
  }
  if (*((unsigned char *)this + 79128)) {
    *((unsigned char *)this + 79128) = 0;
  }
  if (*v8) {
    *uint64_t v8 = 0;
  }
  cnframework::ActiveObjectBase::~ActiveObjectBase(v17);
  *((void *)this + 9503) = &unk_1EDD15868;
  sub_18E0B760C((uint64_t)this + 76520);
  cnframework::ActiveObjectBase::~ActiveObjectBase((raven::RavenSupervisor *)((char *)this + 76024));
  raven::RavenIMUPreprocessorActiveObject::~RavenIMUPreprocessorActiveObject((raven::RavenSupervisor *)((char *)this + 75288));
  *((void *)this + 9023) = &unk_1EDD15570;
  sub_18E15E488((uint64_t)this + 72672);
  cnframework::ActiveObjectBase::~ActiveObjectBase((raven::RavenSupervisor *)((char *)this + 72184));
  sub_18E0B85B4((raven::RavenSupervisor *)((char *)this + 63776));
  sub_18E0B8920((uint64_t)this + 53832);
  *((void *)this + 6656) = &unk_1EDD14F90;
  sub_18E15E6D4((uint64_t)this + 53784);
  cnframework::ActiveObjectBase::~ActiveObjectBase((raven::RavenSupervisor *)((char *)this + 53248));
  raven::RavenConvergenceEstimatorActiveObject::~RavenConvergenceEstimatorActiveObject((raven::RavenSupervisor *)((char *)this + 28528));
  sub_18E0B8EB0((raven::RavenSupervisor *)((char *)this + 26632));
  raven::RavenAccelerationDecompositionActiveObject::~RavenAccelerationDecompositionActiveObject((raven::RavenSupervisor *)((char *)this + 8504));
  sub_18E00C30C((uint64_t)this + 4672);
  sub_18E00C30C((uint64_t)this + 840);

  cnframework::Supervisor::~Supervisor(this, v9, v10, v11, v12, v13, v14, v15);
}

{
  uint64_t vars8;

  raven::RavenSupervisor::~RavenSupervisor(this);

  JUMPOUT(0x192FA6240);
}

uint64_t raven::RavenSupervisor::Configure(unsigned char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(unsigned char *)(a2 + 33))
  {
    uint64_t v10 = a1 + 5313;
    sub_18E0999FC((uint64_t)(a1 + 840), a2);
    uint64_t v11 = (cnprint::CNPrinter *)sub_18E0999FC((uint64_t)(a1 + 4672), a2);
    if (v10[3080])
    {
      uint64_t v32 = 0;
      cnprint::CNPrinter::EnableLogStream((cnprint::CNPrinter *)&v32);
    }
    if (v10[3081])
    {
      cnprint::CNPrinter::SetFileLogStreamName((cnprint::CNPrinter *)(a1 + 8400));
      uint64_t v32 = 1;
      cnprint::CNPrinter::EnableLogStream((cnprint::CNPrinter *)&v32);
    }
    if (v10[3111])
    {
      uint64_t v32 = 2;
      cnprint::CNPrinter::EnableLogStream((cnprint::CNPrinter *)&v32);
    }
    if (v10[3080] || v10[3081] || v10[3111])
    {
      unsigned int v17 = v10[3143];
      if (v17 < cnprint::CNPrinter::GetLogLevel(v11)) {
        cnprint::CNPrinter::SetLogLevel((cnprint::CNPrinter *)(v10 + 3143));
      }
    }
    LOWORD(v32) = 12;
    unsigned __int8 v33 = 2;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v32, &v33, "RavenSupervisor configuration parameters set", v12, v13, v14, v15, v16, v30);
    if (a1[817])
    {
      LOWORD(v32) = 12;
      unsigned __int8 v33 = 2;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v32, &v33, "RavenSupervisor::Configure called after RavenSupervisor was already configured.", v19, v20, v21, v22, v23, v31);
    }
    if (v10[1919] && *v10) {
      operator new();
    }
    if (cnprint::CNPrinter::GetLogLevel(v18) <= 1)
    {
      LOWORD(v32) = 12;
      unsigned __int8 v33 = 1;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v32, &v33, "RavenIonosphereEstimatorActiveObject was not instantiated", v24, v25, v26, v27, v28, v31);
    }
    if (v10[2855])
    {
      if (*v10) {
        operator new();
      }
    }
    LOWORD(v32) = 12;
    unsigned __int8 v33 = 3;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v32, &v33, "RavenRayTracingActiveObject was not instantiated", v24, v25, v26, v27, v28, v31);
    operator new();
  }
  LOWORD(v32) = 12;
  unsigned __int8 v33 = 4;
  cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v32, &v33, "RavenSupervisor::Configure called with uninitialized parameters.", a4, a5, a6, a7, a8, v30);
  return 0;
}

void sub_18E0999A4(_Unwind_Exception *a1)
{
  MEMORY[0x192FA6240](v1, 0x10E3C40A4539767);
  _Unwind_Resume(a1);
}

uint64_t sub_18E0999FC(uint64_t a1, uint64_t a2)
{
  std::string::operator=((std::string *)(a1 + 8), (const std::string *)(a2 + 8));
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  if (a1 != a2)
  {
    uint64_t v5 = (void **)(a1 + 40);
    uint64_t v4 = *(std::string **)(a1 + 40);
    uint64_t v7 = *(long long **)(a2 + 40);
    int64x2_t v6 = *(long long **)(a2 + 48);
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)v6 - (char *)v7) >> 3);
    uint64_t v9 = *(void *)(a1 + 56);
    if (0xAAAAAAAAAAAAAAABLL * ((v9 - (uint64_t)v4) >> 3) < v8)
    {
      if (v4)
      {
        sub_18E00C2BC((uint64_t *)(a1 + 40));
        operator delete(*v5);
        uint64_t v9 = 0;
        *uint64_t v5 = 0;
        *(void *)(a1 + 48) = 0;
        *(void *)(a1 + 56) = 0;
      }
      if (v8 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_26;
      }
      unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (v9 >> 3);
      uint64_t v11 = 2 * v10;
      if (2 * v10 <= v8) {
        uint64_t v11 = 0xAAAAAAAAAAAAAAABLL * (((char *)v6 - (char *)v7) >> 3);
      }
      unint64_t v12 = v10 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v11;
      if (v12 > 0xAAAAAAAAAAAAAAALL) {
LABEL_26:
      }
        sub_18DEE1FC8();
      uint64_t v13 = (char *)sub_18E00C070(a1 + 56, v12);
      *(void *)(a1 + 40) = v13;
      *(void *)(a1 + 48) = v13;
      *(void *)(a1 + 56) = &v13[24 * v14];
      uint64_t v15 = sub_18E0B8F98(a1 + 56, v7, v6, v13);
      goto LABEL_15;
    }
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 48) - (void)v4) >> 3) < v8)
    {
      uint64_t v16 = (std::string *)((char *)v7 + 8 * ((uint64_t)(*(void *)(a1 + 48) - (void)v4) >> 3));
      sub_18E0B90B8(*(std::string **)(a2 + 40), v16, v4);
      uint64_t v15 = sub_18E0B8F98(a1 + 56, (long long *)v16, v6, *(char **)(a1 + 48));
LABEL_15:
      *(void *)(a1 + 48) = v15;
      goto LABEL_21;
    }
    unsigned int v17 = sub_18E0B90B8(*(std::string **)(a2 + 40), *(std::string **)(a2 + 48), v4);
    for (int i = *(std::string **)(a1 + 48); i != v17; --i)
    {
      if (SHIBYTE(i[-1].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(i[-1].__r_.__value_.__l.__data_);
      }
    }
    *(void *)(a1 + 48) = v17;
  }
LABEL_21:
  memcpy((void *)(a1 + 64), (const void *)(a2 + 64), 0x8D0uLL);
  uint64_t v19 = *(void *)(a2 + 2320);
  uint64_t v20 = *(void *)(a2 + 2328);
  if (v20) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 2320) = v19;
  uint64_t v21 = *(std::__shared_weak_count **)(a1 + 2328);
  *(void *)(a1 + 2328) = v20;
  if (v21) {
    sub_18DEE4E18(v21);
  }
  *(_OWORD *)(a1 + 2336) = *(_OWORD *)(a2 + 2336);
  memcpy((void *)(a1 + 2352), (const void *)(a2 + 2352), 0x519uLL);
  std::string::operator=((std::string *)(a1 + 3664), (const std::string *)(a2 + 3664));
  __int16 v22 = *(_WORD *)(a2 + 3692);
  *(_DWORD *)(a1 + 3688) = *(_DWORD *)(a2 + 3688);
  *(_WORD *)(a1 + 3692) = v22;
  std::string::operator=((std::string *)(a1 + 3696), (const std::string *)(a2 + 3696));
  char v23 = *(unsigned char *)(a2 + 3722);
  *(_WORD *)(a1 + 3720) = *(_WORD *)(a2 + 3720);
  *(unsigned char *)(a1 + 3722) = v23;
  std::string::operator=((std::string *)(a1 + 3728), (const std::string *)(a2 + 3728));
  char v24 = *(unsigned char *)(a2 + 3754);
  *(_WORD *)(a1 + 3752) = *(_WORD *)(a2 + 3752);
  *(unsigned char *)(a1 + 3754) = v24;
  std::string::operator=((std::string *)(a1 + 3760), (const std::string *)(a2 + 3760));
  long long v25 = *(_OWORD *)(a2 + 3813);
  long long v26 = *(_OWORD *)(a2 + 3800);
  *(_OWORD *)(a1 + 3784) = *(_OWORD *)(a2 + 3784);
  *(_OWORD *)(a1 + 3800) = v26;
  *(_OWORD *)(a1 + 3813) = v25;
  return a1;
}

void sub_18E099C90(_Unwind_Exception *a1)
{
  *(void *)(v1 + 48) = v2;
  _Unwind_Resume(a1);
}

void sub_18E099C98(_Unwind_Exception *a1)
{
  *(void *)(v1 + 48) = v2;
  _Unwind_Resume(a1);
}

uint64_t raven::RavenSupervisor::IsConfigured(raven::RavenSupervisor *this)
{
  return *((unsigned __int8 *)this + 817);
}

void *raven::RavenSupervisor::GetSupervisorName@<X0>(void *a1@<X8>)
{
  return sub_18DEDE7B0(a1, "RavenSupervisor");
}

uint64_t raven::RavenSupervisor::GetMutableRavenParameters(raven::RavenSupervisor *this)
{
  return (uint64_t)this + 4672;
}

uint64_t raven::RavenSupervisor::GetRavenSolution(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (std::mutex *)(a1 + 181408);
  std::mutex::lock((std::mutex *)(a1 + 181408));
  memcpy((void *)(a2 + 8), (const void *)(a1 + 170896), 0x971uLL);
  std::mutex::unlock(v4);
  return 0;
}

uint64_t raven::RavenSupervisor::GetRavenSolution(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v3 = *(double *)(a2 + 8) + (double)*(uint64_t *)a2;
  double v4 = fabs(v3);
  if ((unint64_t)(*(void *)&v4 - 0x10000000000000) >> 53 < 0x3FF
    || (unint64_t)(*(void *)&v4 - 1) < 0xFFFFFFFFFFFFFLL
    || *(void *)&v3 == 0)
  {
    uint64_t v7 = a1 + 170280;
    return raven::RavenSolutionActiveObject::GetRavenSolution(v7, a2, a3);
  }
  else
  {
    sub_18DFF4C24(a3);
    return 0xFFFFFFFFLL;
  }
}

uint64_t raven::RavenSupervisor::GetRavenIonosphereParameters(uint64_t a1, _OWORD *a2)
{
  uint64_t result = *(void *)(a1 + 186504);
  if (result) {
    return raven::RavenIonosphereEstimatorActiveObject::GetIonosphereParameters(result, a2);
  }
  *(unsigned char *)a2 = 0;
  return result;
}

#error "18E099DB4: too big function (funcsize=0)"

void sub_18E0AE5F0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 113) < 0) {
    operator delete(*(void **)(v1 - 136));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_18E0AEC34(uint64_t a1, uint64_t *a2)
{
  if (*(unsigned char *)(a1 + 601))
  {
    puts("Warning: RavenEstimator::Configure() called more than once.");
    *(unsigned char *)(a1 + 480) = 0;
    return 0xFFFFFFFFLL;
  }
  else
  {
    *(void *)(a1 + 1712) = *a2;
    *(unsigned char *)(a1 + 601) = 1;
    return sub_18E0B8068((unsigned char *)a1, a2);
  }
}

uint64_t sub_18E0AECA0(unsigned char *a1, uint64_t *a2)
{
  uint64_t v5 = *a2;
  if (!raven::RavenConvergenceEstimator::Configure((uint64_t)(a1 + 3000), &v5)) {
    return sub_18E0B65CC(a1, a2);
  }
  a1[480] = 0;
  return 0xFFFFFFFFLL;
}

uint64_t sub_18E0AECFC(char **a1, uint64_t *a2, int8x16_t a3, int8x16_t a4)
{
  uint64_t v65 = *a2;
  if (!raven::RavenPNTEstimator::Configure((raven::RavenPNTEstimator *)(a1 + 68), &v65, a3, a4))
  {
    uint64_t v6 = v65;
    double v7 = *(double *)(v65 + 856);
    if ((*(void *)&v7 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v7 < 0.0)
    {
      __int16 v64 = 12;
      unsigned __int8 v63 = 4;
      (*((void (**)(void **__return_ptr, char **))*a1 + 2))(__p, a1);
      if (v62 >= 0) {
        unsigned int v17 = __p;
      }
      else {
        LOBYTE(v17) = __p[0];
      }
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v64, &v63, "Error: %s could not be configured. Invalid tolerable_accelerometer_event_age: %.3lf", v12, v13, v14, v15, v16, (char)v17);
    }
    else
    {
      if ((*(void *)(v65 + 864) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && *(double *)(v65 + 864) >= 0.0)
      {
        unint64_t v8 = (unint64_t)a1[20];
        uint64_t v9 = a1 + 18;
        unint64_t v10 = (unint64_t)a1[19];
        if (v10 >= v8)
        {
          uint64_t v25 = (uint64_t)(v10 - (void)*v9) >> 4;
          unint64_t v26 = v25 + 1;
          if ((unint64_t)(v25 + 1) >> 60) {
            goto LABEL_59;
          }
          uint64_t v27 = v8 - (void)*v9;
          if (v27 >> 3 > v26) {
            unint64_t v26 = v27 >> 3;
          }
          if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v28 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v28 = v26;
          }
          uint64_t v29 = (char *)sub_18DFF7B64((uint64_t)(a1 + 20), v28);
          char v30 = &v29[16 * v25];
          uint64_t v32 = &v29[16 * v31];
          *((void *)v30 + 1) = *(void *)(v6 + 856);
          uint64_t v11 = v30 + 16;
          int v34 = a1[18];
          unsigned __int8 v33 = a1[19];
          if (v33 != v34)
          {
            do
            {
              *((_OWORD *)v30 - 1) = *((_OWORD *)v33 - 1);
              v30 -= 16;
              v33 -= 16;
            }
            while (v33 != v34);
            unsigned __int8 v33 = *v9;
          }
          a1[18] = v30;
          a1[19] = v11;
          a1[20] = v32;
          if (v33) {
            operator delete(v33);
          }
        }
        else
        {
          *(double *)(v10 + 8) = v7;
          uint64_t v11 = (char *)(v10 + 16);
        }
        a1[19] = v11;
        uint64_t v35 = v65;
        unint64_t v36 = (unint64_t)a1[20];
        if ((unint64_t)v11 >= v36)
        {
          uint64_t v38 = (v11 - *v9) >> 4;
          if ((unint64_t)(v38 + 1) >> 60) {
            goto LABEL_59;
          }
          uint64_t v39 = v36 - (void)*v9;
          uint64_t v40 = v39 >> 3;
          if (v39 >> 3 <= (unint64_t)(v38 + 1)) {
            uint64_t v40 = v38 + 1;
          }
          if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v41 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v41 = v40;
          }
          uint64_t v42 = (char *)sub_18DFF7B64((uint64_t)(a1 + 20), v41);
          int8x16_t v43 = &v42[16 * v38];
          uint64_t v45 = &v42[16 * v44];
          *((void *)v43 + 1) = *(void *)(v35 + 864);
          uint64_t v37 = v43 + 16;
          int v47 = a1[18];
          uint64_t v46 = a1[19];
          if (v46 != v47)
          {
            do
            {
              *((_OWORD *)v43 - 1) = *((_OWORD *)v46 - 1);
              v43 -= 16;
              v46 -= 16;
            }
            while (v46 != v47);
            uint64_t v46 = *v9;
          }
          a1[18] = v43;
          a1[19] = v37;
          a1[20] = v45;
          if (v46) {
            operator delete(v46);
          }
        }
        else
        {
          *((void *)v11 + 1) = *(void *)(v35 + 864);
          uint64_t v37 = v11 + 16;
        }
        a1[19] = v37;
        uint64_t v48 = v65;
        unint64_t v49 = (unint64_t)a1[20];
        if ((unint64_t)v37 < v49)
        {
          *((void *)v37 + 1) = *(void *)(v48 + 864);
          uint64_t v50 = v37 + 16;
LABEL_58:
          a1[19] = v50;
          return sub_18E0B7DA0(a1, a2);
        }
        uint64_t v51 = (v37 - *v9) >> 4;
        if (!((unint64_t)(v51 + 1) >> 60))
        {
          uint64_t v52 = v49 - (void)*v9;
          uint64_t v53 = v52 >> 3;
          if (v52 >> 3 <= (unint64_t)(v51 + 1)) {
            uint64_t v53 = v51 + 1;
          }
          if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v54 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v54 = v53;
          }
          long long v55 = (char *)sub_18DFF7B64((uint64_t)(a1 + 20), v54);
          int8x16_t v56 = &v55[16 * v51];
          int8x16_t v58 = &v55[16 * v57];
          *((void *)v56 + 1) = *(void *)(v48 + 864);
          uint64_t v50 = v56 + 16;
          uint64_t v60 = a1[18];
          int8x16_t v59 = a1[19];
          if (v59 != v60)
          {
            do
            {
              *((_OWORD *)v56 - 1) = *((_OWORD *)v59 - 1);
              v56 -= 16;
              v59 -= 16;
            }
            while (v59 != v60);
            int8x16_t v59 = *v9;
          }
          a1[18] = v56;
          a1[19] = v50;
          a1[20] = v58;
          if (v59) {
            operator delete(v59);
          }
          goto LABEL_58;
        }
LABEL_59:
        sub_18DEE1FC8();
      }
      __int16 v64 = 12;
      unsigned __int8 v63 = 4;
      (*((void (**)(void **__return_ptr, char **))*a1 + 2))(__p, a1);
      if (v62 >= 0) {
        char v23 = __p;
      }
      else {
        LOBYTE(v23) = __p[0];
      }
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v64, &v63, "Error: %s could not be configured. Invalid tolerable_rategyro_event_age: %.3lf", v18, v19, v20, v21, v22, (char)v23);
    }
    if (v62 < 0) {
      operator delete(__p[0]);
    }
    return 0xFFFFFFFFLL;
  }
  *((unsigned char *)a1 + 480) = 0;
  return 0xFFFFFFFFLL;
}

void sub_18E0AF118(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_18E0AF138(uint64_t a1, uint64_t a2)
{
  v28[4] = *MEMORY[0x1E4F143B8];
  LOBYTE(v24) = 0;
  LOBYTE(v25) = 0;
  *((void *)&v25 + 1) = a2;
  unint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  double v3 = (char **)(a1 + 8);
  if (v4 == v5)
  {
LABEL_5:
    unint64_t v6 = *(void *)(a1 + 24);
    if (v4 >= v6)
    {
      uint64_t v9 = (uint64_t)(v4 - (void)*v3) >> 5;
      if ((unint64_t)(v9 + 1) >> 59) {
        sub_18DEE1FC8();
      }
      uint64_t v10 = v6 - (void)*v3;
      uint64_t v11 = v10 >> 4;
      if (v10 >> 4 <= (unint64_t)(v9 + 1)) {
        uint64_t v11 = v9 + 1;
      }
      if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v12 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v12 = v11;
      }
      if (v12) {
        uint64_t v13 = (char *)sub_18E01ACC8(a1 + 24, v12);
      }
      else {
        uint64_t v13 = 0;
      }
      uint64_t v14 = &v13[32 * v9];
      uint64_t v15 = &v13[32 * v12];
      long long v16 = v25;
      *(_OWORD *)uint64_t v14 = v24;
      *((_OWORD *)v14 + 1) = v16;
      unint64_t v8 = v14 + 32;
      uint64_t v18 = *(char **)(a1 + 8);
      unsigned int v17 = *(char **)(a1 + 16);
      if (v17 != v18)
      {
        do
        {
          long long v19 = *((_OWORD *)v17 - 1);
          *((_OWORD *)v14 - 2) = *((_OWORD *)v17 - 2);
          *((_OWORD *)v14 - 1) = v19;
          v14 -= 32;
          v17 -= 32;
        }
        while (v17 != v18);
        unsigned int v17 = *v3;
      }
      *(void *)(a1 + 8) = v14;
      *(void *)(a1 + 16) = v8;
      *(void *)(a1 + 24) = v15;
      if (v17) {
        operator delete(v17);
      }
    }
    else
    {
      long long v7 = v25;
      *(_OWORD *)unint64_t v4 = v24;
      *(_OWORD *)(v4 + 16) = v7;
      unint64_t v8 = (_OWORD *)(v4 + 32);
    }
    *(void *)(a1 + 16) = v8;
    int v20 = *(unsigned __int8 *)(a1 + 168);
    if (*(unsigned char *)(a1 + 168))
    {
      uint64_t v21 = 0;
    }
    else
    {
      uint64_t v21 = (std::mutex *)(a1 + 72);
      std::mutex::lock((std::mutex *)(a1 + 72));
    }
    uint64_t v22 = (void *)(a1 + 32);
    if (sub_18DEE511C(v22, (uint64_t *)&v26))
    {
      if (v20) {
        return;
      }
    }
    else
    {
      _OWORD v28[3] = v28;
      uint64_t v27 = &v26;
      v28[0] = &unk_1EDD1CFD0;
      char v23 = sub_18E0BB7A0((uint64_t)v22, (uint64_t *)&v26, (uint64_t)&std::piecewise_construct, &v27);
      sub_18E0BA000(v23 + 3, (uint64_t)v28);
      sub_18DEE52C8(v28);
      if (v20) {
        return;
      }
    }
    std::mutex::unlock(v21);
    return;
  }
  while (!cnframework::EventSubscription::operator==((unsigned __int8 *)v4, (unsigned __int8 *)&v24))
  {
    v4 += 32;
    if (v4 == v5)
    {
      unint64_t v4 = *(void *)(a1 + 16);
      goto LABEL_5;
    }
  }
}

void sub_18E0AF340(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_18DEE52C8((uint64_t *)va);
  if (!v9) {
    std::mutex::unlock(v8);
  }
  _Unwind_Resume(a1);
}

void sub_18E0AF368(uint64_t a1, uint64_t a2)
{
  v28[4] = *MEMORY[0x1E4F143B8];
  LOBYTE(v24) = 0;
  LOBYTE(v25) = 0;
  *((void *)&v25 + 1) = a2;
  unint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  double v3 = (char **)(a1 + 8);
  if (v4 == v5)
  {
LABEL_5:
    unint64_t v6 = *(void *)(a1 + 24);
    if (v4 >= v6)
    {
      uint64_t v9 = (uint64_t)(v4 - (void)*v3) >> 5;
      if ((unint64_t)(v9 + 1) >> 59) {
        sub_18DEE1FC8();
      }
      uint64_t v10 = v6 - (void)*v3;
      uint64_t v11 = v10 >> 4;
      if (v10 >> 4 <= (unint64_t)(v9 + 1)) {
        uint64_t v11 = v9 + 1;
      }
      if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v12 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v12 = v11;
      }
      if (v12) {
        uint64_t v13 = (char *)sub_18E01ACC8(a1 + 24, v12);
      }
      else {
        uint64_t v13 = 0;
      }
      uint64_t v14 = &v13[32 * v9];
      uint64_t v15 = &v13[32 * v12];
      long long v16 = v25;
      *(_OWORD *)uint64_t v14 = v24;
      *((_OWORD *)v14 + 1) = v16;
      unint64_t v8 = v14 + 32;
      uint64_t v18 = *(char **)(a1 + 8);
      unsigned int v17 = *(char **)(a1 + 16);
      if (v17 != v18)
      {
        do
        {
          long long v19 = *((_OWORD *)v17 - 1);
          *((_OWORD *)v14 - 2) = *((_OWORD *)v17 - 2);
          *((_OWORD *)v14 - 1) = v19;
          v14 -= 32;
          v17 -= 32;
        }
        while (v17 != v18);
        unsigned int v17 = *v3;
      }
      *(void *)(a1 + 8) = v14;
      *(void *)(a1 + 16) = v8;
      *(void *)(a1 + 24) = v15;
      if (v17) {
        operator delete(v17);
      }
    }
    else
    {
      long long v7 = v25;
      *(_OWORD *)unint64_t v4 = v24;
      *(_OWORD *)(v4 + 16) = v7;
      unint64_t v8 = (_OWORD *)(v4 + 32);
    }
    *(void *)(a1 + 16) = v8;
    int v20 = *(unsigned __int8 *)(a1 + 168);
    if (*(unsigned char *)(a1 + 168))
    {
      uint64_t v21 = 0;
    }
    else
    {
      uint64_t v21 = (std::mutex *)(a1 + 72);
      std::mutex::lock((std::mutex *)(a1 + 72));
    }
    uint64_t v22 = (void *)(a1 + 32);
    if (sub_18DEE511C(v22, (uint64_t *)&v26))
    {
      if (v20) {
        return;
      }
    }
    else
    {
      _OWORD v28[3] = v28;
      uint64_t v27 = &v26;
      v28[0] = &unk_1EDD1B7C0;
      char v23 = sub_18E0BB7A0((uint64_t)v22, (uint64_t *)&v26, (uint64_t)&std::piecewise_construct, &v27);
      sub_18E0BA000(v23 + 3, (uint64_t)v28);
      sub_18DEE52C8(v28);
      if (v20) {
        return;
      }
    }
    std::mutex::unlock(v21);
    return;
  }
  while (!cnframework::EventSubscription::operator==((unsigned __int8 *)v4, (unsigned __int8 *)&v24))
  {
    v4 += 32;
    if (v4 == v5)
    {
      unint64_t v4 = *(void *)(a1 + 16);
      goto LABEL_5;
    }
  }
}

void sub_18E0AF570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_18DEE52C8((uint64_t *)va);
  if (!v9) {
    std::mutex::unlock(v8);
  }
  _Unwind_Resume(a1);
}

void sub_18E0AF598(uint64_t a1, uint64_t a2)
{
  v28[4] = *MEMORY[0x1E4F143B8];
  LOBYTE(v24) = 0;
  LOBYTE(v25) = 0;
  *((void *)&v25 + 1) = a2;
  unint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  double v3 = (char **)(a1 + 8);
  if (v4 == v5)
  {
LABEL_5:
    unint64_t v6 = *(void *)(a1 + 24);
    if (v4 >= v6)
    {
      uint64_t v9 = (uint64_t)(v4 - (void)*v3) >> 5;
      if ((unint64_t)(v9 + 1) >> 59) {
        sub_18DEE1FC8();
      }
      uint64_t v10 = v6 - (void)*v3;
      uint64_t v11 = v10 >> 4;
      if (v10 >> 4 <= (unint64_t)(v9 + 1)) {
        uint64_t v11 = v9 + 1;
      }
      if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v12 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v12 = v11;
      }
      if (v12) {
        uint64_t v13 = (char *)sub_18E01ACC8(a1 + 24, v12);
      }
      else {
        uint64_t v13 = 0;
      }
      uint64_t v14 = &v13[32 * v9];
      uint64_t v15 = &v13[32 * v12];
      long long v16 = v25;
      *(_OWORD *)uint64_t v14 = v24;
      *((_OWORD *)v14 + 1) = v16;
      unint64_t v8 = v14 + 32;
      uint64_t v18 = *(char **)(a1 + 8);
      unsigned int v17 = *(char **)(a1 + 16);
      if (v17 != v18)
      {
        do
        {
          long long v19 = *((_OWORD *)v17 - 1);
          *((_OWORD *)v14 - 2) = *((_OWORD *)v17 - 2);
          *((_OWORD *)v14 - 1) = v19;
          v14 -= 32;
          v17 -= 32;
        }
        while (v17 != v18);
        unsigned int v17 = *v3;
      }
      *(void *)(a1 + 8) = v14;
      *(void *)(a1 + 16) = v8;
      *(void *)(a1 + 24) = v15;
      if (v17) {
        operator delete(v17);
      }
    }
    else
    {
      long long v7 = v25;
      *(_OWORD *)unint64_t v4 = v24;
      *(_OWORD *)(v4 + 16) = v7;
      unint64_t v8 = (_OWORD *)(v4 + 32);
    }
    *(void *)(a1 + 16) = v8;
    int v20 = *(unsigned __int8 *)(a1 + 168);
    if (*(unsigned char *)(a1 + 168))
    {
      uint64_t v21 = 0;
    }
    else
    {
      uint64_t v21 = (std::mutex *)(a1 + 72);
      std::mutex::lock((std::mutex *)(a1 + 72));
    }
    uint64_t v22 = (void *)(a1 + 32);
    if (sub_18DEE511C(v22, (uint64_t *)&v26))
    {
      if (v20) {
        return;
      }
    }
    else
    {
      _OWORD v28[3] = v28;
      uint64_t v27 = &v26;
      v28[0] = &unk_1EDD1C058;
      char v23 = sub_18E0BB7A0((uint64_t)v22, (uint64_t *)&v26, (uint64_t)&std::piecewise_construct, &v27);
      sub_18E0BA000(v23 + 3, (uint64_t)v28);
      sub_18DEE52C8(v28);
      if (v20) {
        return;
      }
    }
    std::mutex::unlock(v21);
    return;
  }
  while (!cnframework::EventSubscription::operator==((unsigned __int8 *)v4, (unsigned __int8 *)&v24))
  {
    v4 += 32;
    if (v4 == v5)
    {
      unint64_t v4 = *(void *)(a1 + 16);
      goto LABEL_5;
    }
  }
}

void sub_18E0AF7A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_18DEE52C8((uint64_t *)va);
  if (!v9) {
    std::mutex::unlock(v8);
  }
  _Unwind_Resume(a1);
}

void sub_18E0AF7C8(uint64_t a1, uint64_t a2)
{
  v28[4] = *MEMORY[0x1E4F143B8];
  LOBYTE(v24) = 0;
  LOBYTE(v25) = 0;
  *((void *)&v25 + 1) = a2;
  unint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  double v3 = (char **)(a1 + 8);
  if (v4 == v5)
  {
LABEL_5:
    unint64_t v6 = *(void *)(a1 + 24);
    if (v4 >= v6)
    {
      uint64_t v9 = (uint64_t)(v4 - (void)*v3) >> 5;
      if ((unint64_t)(v9 + 1) >> 59) {
        sub_18DEE1FC8();
      }
      uint64_t v10 = v6 - (void)*v3;
      uint64_t v11 = v10 >> 4;
      if (v10 >> 4 <= (unint64_t)(v9 + 1)) {
        uint64_t v11 = v9 + 1;
      }
      if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v12 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v12 = v11;
      }
      if (v12) {
        uint64_t v13 = (char *)sub_18E01ACC8(a1 + 24, v12);
      }
      else {
        uint64_t v13 = 0;
      }
      uint64_t v14 = &v13[32 * v9];
      uint64_t v15 = &v13[32 * v12];
      long long v16 = v25;
      *(_OWORD *)uint64_t v14 = v24;
      *((_OWORD *)v14 + 1) = v16;
      unint64_t v8 = v14 + 32;
      uint64_t v18 = *(char **)(a1 + 8);
      unsigned int v17 = *(char **)(a1 + 16);
      if (v17 != v18)
      {
        do
        {
          long long v19 = *((_OWORD *)v17 - 1);
          *((_OWORD *)v14 - 2) = *((_OWORD *)v17 - 2);
          *((_OWORD *)v14 - 1) = v19;
          v14 -= 32;
          v17 -= 32;
        }
        while (v17 != v18);
        unsigned int v17 = *v3;
      }
      *(void *)(a1 + 8) = v14;
      *(void *)(a1 + 16) = v8;
      *(void *)(a1 + 24) = v15;
      if (v17) {
        operator delete(v17);
      }
    }
    else
    {
      long long v7 = v25;
      *(_OWORD *)unint64_t v4 = v24;
      *(_OWORD *)(v4 + 16) = v7;
      unint64_t v8 = (_OWORD *)(v4 + 32);
    }
    *(void *)(a1 + 16) = v8;
    int v20 = *(unsigned __int8 *)(a1 + 168);
    if (*(unsigned char *)(a1 + 168))
    {
      uint64_t v21 = 0;
    }
    else
    {
      uint64_t v21 = (std::mutex *)(a1 + 72);
      std::mutex::lock((std::mutex *)(a1 + 72));
    }
    uint64_t v22 = (void *)(a1 + 32);
    if (sub_18DEE511C(v22, (uint64_t *)&v26))
    {
      if (v20) {
        return;
      }
    }
    else
    {
      _OWORD v28[3] = v28;
      uint64_t v27 = &v26;
      v28[0] = &unk_1EDD1C108;
      char v23 = sub_18E0BB7A0((uint64_t)v22, (uint64_t *)&v26, (uint64_t)&std::piecewise_construct, &v27);
      sub_18E0BA000(v23 + 3, (uint64_t)v28);
      sub_18DEE52C8(v28);
      if (v20) {
        return;
      }
    }
    std::mutex::unlock(v21);
    return;
  }
  while (!cnframework::EventSubscription::operator==((unsigned __int8 *)v4, (unsigned __int8 *)&v24))
  {
    v4 += 32;
    if (v4 == v5)
    {
      unint64_t v4 = *(void *)(a1 + 16);
      goto LABEL_5;
    }
  }
}

void sub_18E0AF9D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_18DEE52C8((uint64_t *)va);
  if (!v9) {
    std::mutex::unlock(v8);
  }
  _Unwind_Resume(a1);
}

void sub_18E0AF9F8(uint64_t a1, uint64_t a2)
{
  v28[4] = *MEMORY[0x1E4F143B8];
  LOBYTE(v24) = 0;
  LOBYTE(v25) = 0;
  *((void *)&v25 + 1) = a2;
  unint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  double v3 = (char **)(a1 + 8);
  if (v4 == v5)
  {
LABEL_5:
    unint64_t v6 = *(void *)(a1 + 24);
    if (v4 >= v6)
    {
      uint64_t v9 = (uint64_t)(v4 - (void)*v3) >> 5;
      if ((unint64_t)(v9 + 1) >> 59) {
        sub_18DEE1FC8();
      }
      uint64_t v10 = v6 - (void)*v3;
      uint64_t v11 = v10 >> 4;
      if (v10 >> 4 <= (unint64_t)(v9 + 1)) {
        uint64_t v11 = v9 + 1;
      }
      if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v12 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v12 = v11;
      }
      if (v12) {
        uint64_t v13 = (char *)sub_18E01ACC8(a1 + 24, v12);
      }
      else {
        uint64_t v13 = 0;
      }
      uint64_t v14 = &v13[32 * v9];
      uint64_t v15 = &v13[32 * v12];
      long long v16 = v25;
      *(_OWORD *)uint64_t v14 = v24;
      *((_OWORD *)v14 + 1) = v16;
      unint64_t v8 = v14 + 32;
      uint64_t v18 = *(char **)(a1 + 8);
      unsigned int v17 = *(char **)(a1 + 16);
      if (v17 != v18)
      {
        do
        {
          long long v19 = *((_OWORD *)v17 - 1);
          *((_OWORD *)v14 - 2) = *((_OWORD *)v17 - 2);
          *((_OWORD *)v14 - 1) = v19;
          v14 -= 32;
          v17 -= 32;
        }
        while (v17 != v18);
        unsigned int v17 = *v3;
      }
      *(void *)(a1 + 8) = v14;
      *(void *)(a1 + 16) = v8;
      *(void *)(a1 + 24) = v15;
      if (v17) {
        operator delete(v17);
      }
    }
    else
    {
      long long v7 = v25;
      *(_OWORD *)unint64_t v4 = v24;
      *(_OWORD *)(v4 + 16) = v7;
      unint64_t v8 = (_OWORD *)(v4 + 32);
    }
    *(void *)(a1 + 16) = v8;
    int v20 = *(unsigned __int8 *)(a1 + 168);
    if (*(unsigned char *)(a1 + 168))
    {
      uint64_t v21 = 0;
    }
    else
    {
      uint64_t v21 = (std::mutex *)(a1 + 72);
      std::mutex::lock((std::mutex *)(a1 + 72));
    }
    uint64_t v22 = (void *)(a1 + 32);
    if (sub_18DEE511C(v22, (uint64_t *)&v26))
    {
      if (v20) {
        return;
      }
    }
    else
    {
      _OWORD v28[3] = v28;
      uint64_t v27 = &v26;
      v28[0] = &unk_1EDD1C4D0;
      char v23 = sub_18E0BB7A0((uint64_t)v22, (uint64_t *)&v26, (uint64_t)&std::piecewise_construct, &v27);
      sub_18E0BA000(v23 + 3, (uint64_t)v28);
      sub_18DEE52C8(v28);
      if (v20) {
        return;
      }
    }
    std::mutex::unlock(v21);
    return;
  }
  while (!cnframework::EventSubscription::operator==((unsigned __int8 *)v4, (unsigned __int8 *)&v24))
  {
    v4 += 32;
    if (v4 == v5)
    {
      unint64_t v4 = *(void *)(a1 + 16);
      goto LABEL_5;
    }
  }
}

void sub_18E0AFC00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_18DEE52C8((uint64_t *)va);
  if (!v9) {
    std::mutex::unlock(v8);
  }
  _Unwind_Resume(a1);
}

void sub_18E0AFC28(uint64_t a1, uint64_t a2)
{
  v28[4] = *MEMORY[0x1E4F143B8];
  LOBYTE(v24) = 0;
  LOBYTE(v25) = 0;
  *((void *)&v25 + 1) = a2;
  unint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  double v3 = (char **)(a1 + 8);
  if (v4 == v5)
  {
LABEL_5:
    unint64_t v6 = *(void *)(a1 + 24);
    if (v4 >= v6)
    {
      uint64_t v9 = (uint64_t)(v4 - (void)*v3) >> 5;
      if ((unint64_t)(v9 + 1) >> 59) {
        sub_18DEE1FC8();
      }
      uint64_t v10 = v6 - (void)*v3;
      uint64_t v11 = v10 >> 4;
      if (v10 >> 4 <= (unint64_t)(v9 + 1)) {
        uint64_t v11 = v9 + 1;
      }
      if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v12 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v12 = v11;
      }
      if (v12) {
        uint64_t v13 = (char *)sub_18E01ACC8(a1 + 24, v12);
      }
      else {
        uint64_t v13 = 0;
      }
      uint64_t v14 = &v13[32 * v9];
      uint64_t v15 = &v13[32 * v12];
      long long v16 = v25;
      *(_OWORD *)uint64_t v14 = v24;
      *((_OWORD *)v14 + 1) = v16;
      unint64_t v8 = v14 + 32;
      uint64_t v18 = *(char **)(a1 + 8);
      unsigned int v17 = *(char **)(a1 + 16);
      if (v17 != v18)
      {
        do
        {
          long long v19 = *((_OWORD *)v17 - 1);
          *((_OWORD *)v14 - 2) = *((_OWORD *)v17 - 2);
          *((_OWORD *)v14 - 1) = v19;
          v14 -= 32;
          v17 -= 32;
        }
        while (v17 != v18);
        unsigned int v17 = *v3;
      }
      *(void *)(a1 + 8) = v14;
      *(void *)(a1 + 16) = v8;
      *(void *)(a1 + 24) = v15;
      if (v17) {
        operator delete(v17);
      }
    }
    else
    {
      long long v7 = v25;
      *(_OWORD *)unint64_t v4 = v24;
      *(_OWORD *)(v4 + 16) = v7;
      unint64_t v8 = (_OWORD *)(v4 + 32);
    }
    *(void *)(a1 + 16) = v8;
    int v20 = *(unsigned __int8 *)(a1 + 168);
    if (*(unsigned char *)(a1 + 168))
    {
      uint64_t v21 = 0;
    }
    else
    {
      uint64_t v21 = (std::mutex *)(a1 + 72);
      std::mutex::lock((std::mutex *)(a1 + 72));
    }
    uint64_t v22 = (void *)(a1 + 32);
    if (sub_18DEE511C(v22, (uint64_t *)&v26))
    {
      if (v20) {
        return;
      }
    }
    else
    {
      _OWORD v28[3] = v28;
      uint64_t v27 = &v26;
      v28[0] = &unk_1EDD1B030;
      char v23 = sub_18E0BB7A0((uint64_t)v22, (uint64_t *)&v26, (uint64_t)&std::piecewise_construct, &v27);
      sub_18E0BA000(v23 + 3, (uint64_t)v28);
      sub_18DEE52C8(v28);
      if (v20) {
        return;
      }
    }
    std::mutex::unlock(v21);
    return;
  }
  while (!cnframework::EventSubscription::operator==((unsigned __int8 *)v4, (unsigned __int8 *)&v24))
  {
    v4 += 32;
    if (v4 == v5)
    {
      unint64_t v4 = *(void *)(a1 + 16);
      goto LABEL_5;
    }
  }
}

void sub_18E0AFE30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_18DEE52C8((uint64_t *)va);
  if (!v9) {
    std::mutex::unlock(v8);
  }
  _Unwind_Resume(a1);
}

void sub_18E0AFE58(uint64_t a1, uint64_t a2)
{
  v28[4] = *MEMORY[0x1E4F143B8];
  LOBYTE(v24) = 0;
  LOBYTE(v25) = 0;
  *((void *)&v25 + 1) = a2;
  unint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  double v3 = (char **)(a1 + 8);
  if (v4 == v5)
  {
LABEL_5:
    unint64_t v6 = *(void *)(a1 + 24);
    if (v4 >= v6)
    {
      uint64_t v9 = (uint64_t)(v4 - (void)*v3) >> 5;
      if ((unint64_t)(v9 + 1) >> 59) {
        sub_18DEE1FC8();
      }
      uint64_t v10 = v6 - (void)*v3;
      uint64_t v11 = v10 >> 4;
      if (v10 >> 4 <= (unint64_t)(v9 + 1)) {
        uint64_t v11 = v9 + 1;
      }
      if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v12 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v12 = v11;
      }
      if (v12) {
        uint64_t v13 = (char *)sub_18E01ACC8(a1 + 24, v12);
      }
      else {
        uint64_t v13 = 0;
      }
      uint64_t v14 = &v13[32 * v9];
      uint64_t v15 = &v13[32 * v12];
      long long v16 = v25;
      *(_OWORD *)uint64_t v14 = v24;
      *((_OWORD *)v14 + 1) = v16;
      unint64_t v8 = v14 + 32;
      uint64_t v18 = *(char **)(a1 + 8);
      unsigned int v17 = *(char **)(a1 + 16);
      if (v17 != v18)
      {
        do
        {
          long long v19 = *((_OWORD *)v17 - 1);
          *((_OWORD *)v14 - 2) = *((_OWORD *)v17 - 2);
          *((_OWORD *)v14 - 1) = v19;
          v14 -= 32;
          v17 -= 32;
        }
        while (v17 != v18);
        unsigned int v17 = *v3;
      }
      *(void *)(a1 + 8) = v14;
      *(void *)(a1 + 16) = v8;
      *(void *)(a1 + 24) = v15;
      if (v17) {
        operator delete(v17);
      }
    }
    else
    {
      long long v7 = v25;
      *(_OWORD *)unint64_t v4 = v24;
      *(_OWORD *)(v4 + 16) = v7;
      unint64_t v8 = (_OWORD *)(v4 + 32);
    }
    *(void *)(a1 + 16) = v8;
    int v20 = *(unsigned __int8 *)(a1 + 168);
    if (*(unsigned char *)(a1 + 168))
    {
      uint64_t v21 = 0;
    }
    else
    {
      uint64_t v21 = (std::mutex *)(a1 + 72);
      std::mutex::lock((std::mutex *)(a1 + 72));
    }
    uint64_t v22 = (void *)(a1 + 32);
    if (sub_18DEE511C(v22, (uint64_t *)&v26))
    {
      if (v20) {
        return;
      }
    }
    else
    {
      _OWORD v28[3] = v28;
      uint64_t v27 = &v26;
      v28[0] = &unk_1EDD1A3D0;
      char v23 = sub_18E0BB7A0((uint64_t)v22, (uint64_t *)&v26, (uint64_t)&std::piecewise_construct, &v27);
      sub_18E0BA000(v23 + 3, (uint64_t)v28);
      sub_18DEE52C8(v28);
      if (v20) {
        return;
      }
    }
    std::mutex::unlock(v21);
    return;
  }
  while (!cnframework::EventSubscription::operator==((unsigned __int8 *)v4, (unsigned __int8 *)&v24))
  {
    v4 += 32;
    if (v4 == v5)
    {
      unint64_t v4 = *(void *)(a1 + 16);
      goto LABEL_5;
    }
  }
}

void sub_18E0B0060(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_18DEE52C8((uint64_t *)va);
  if (!v9) {
    std::mutex::unlock(v8);
  }
  _Unwind_Resume(a1);
}

double raven::RavenSupervisor::OnReset(raven::RavenSupervisor *this)
{
  double result = 0.0;
  *(_OWORD *)((char *)this + 824) = 0u;
  return result;
}

void raven::RavenSupervisor::RaiseEventsFrom(raven::RavenSupervisor *this, const CoreNavigation::CLP::LogEntry::PrivateData::Accel *a2, raven::AccelerometerEvent *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, int8x16_t a10)
{
  LODWORD(v10) = *((_DWORD *)a2 + 6);
  if ((int)v10 >= 1)
  {
    uint64_t v12 = 0;
    int64x2_t v14 = vdupq_n_s64(0x7FF8000000000000uLL);
    do
    {
      v15[0] = &unk_1EDD14058;
      v15[1] = 0;
      void v15[2] = 0;
      char v16 = 0;
      uint64_t v17 = 0;
      uint64_t v18 = 0;
      char v19 = 0;
      uint64_t v20 = 0;
      uint64_t v21 = 0;
      char v22 = 0;
      uint64_t v23 = 0;
      uint64_t v24 = 0;
      int8x16_t v13 = (int8x16_t)v14;
      int64x2_t v25 = v14;
      int64x2_t v26 = v14;
      char v27 = 0;
      uint64_t v28 = 0x7FF8000000000000;
      __int16 v29 = 0;
      if (v12 >= (int)v10)
      {
        wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
        wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
        wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
        wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v30);
      }
      if (raven::ConvertProtobufToAccelerometerEvent(*(float32x2_t **)(*((void *)a2 + 2) + 8 * v12), (const CoreNavigation::CLP::LogEntry::PrivateData::AccelSample *)v15, a3, a4, a5, a6, a7, a8, v13, a10))sub_18E0B01F4(); {
      ++v12;
      }
      uint64_t v10 = *((int *)a2 + 6);
    }
    while (v12 < v10);
  }
}

void sub_18E0B01DC(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)(v1 - 136));
  _Unwind_Resume(a1);
}

void sub_18E0B01F4()
{
}

void sub_18E0B0268(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a11) {
    sub_18DEE4E18(a11);
  }
  if (a13) {
    sub_18DEE4E18(a13);
  }
  _Unwind_Resume(exception_object);
}

void raven::RavenSupervisor::RaiseEventsFrom(raven::RavenSupervisor *this, const CoreNavigation::CLP::LogEntry::PrivateData::AccessoryVehicleSpeedNotification *a2, raven::AccessoryVehicleSpeedEvent *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, int8x16_t a10)
{
  v10[1] = 0;
  v10[2] = 0;
  v10[0] = &unk_1EDD14A68;
  char v11 = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  char v14 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  char v17 = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v20 = 0x7FF8000000000000;
  char v23 = 0;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  char v26 = 0;
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  char v29 = 0;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  uint64_t v32 = 0x7FF8000000000000;
  char v33 = 0;
  long long v34 = 0u;
  long long v35 = 0u;
  memset(v36, 0, sizeof(v36));
  if (raven::ConvertProtobufToAccessoryVehicleSpeedEvent(a2, (const CoreNavigation::CLP::LogEntry::PrivateData::AccessoryVehicleSpeedNotification *)v10, a3, a4, a5, a6, a7, a8, (int8x16_t)0, a10))sub_18E0CCF94(); {
  raven::AccessoryVehicleSpeedEvent::~AccessoryVehicleSpeedEvent((raven::AccessoryVehicleSpeedEvent *)v10);
  }
}

void sub_18E0B03A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  uint64_t v5 = *(std::__shared_weak_count **)(v3 - 56);
  if (v5) {
    sub_18DEE4E18(v5);
  }
  if (v2) {
    sub_18DEE4E18(v2);
  }
  raven::AccessoryVehicleSpeedEvent::~AccessoryVehicleSpeedEvent((raven::AccessoryVehicleSpeedEvent *)va);
  _Unwind_Resume(a1);
}

uint64_t raven::RavenSupervisor::RaiseEventsFrom(raven::RavenSupervisor *this, const CoreNavigation::CLP::LogEntry::PrivateData::GnssAvailabilityPrediction *a2, raven::GnssAvailabilityEvent *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, int8x16_t a10)
{
  v13[1] = 0;
  void v13[2] = 0;
  v13[0] = &unk_1EDD143A8;
  char v14 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  char v17 = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  char v20 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  long long v23 = xmmword_18E1FD1C0;
  __int16 v24 = 0;
  uint64_t result = raven::ConvertProtobufToGnssAvailabilityEvent(a2, (const CoreNavigation::CLP::LogEntry::PrivateData::GnssAvailabilityPrediction *)v13, a3, a4, a5, a6, a7, a8, (int8x16_t)xmmword_18E1FD1C0, a10);
  if (result)
  {
    char v11 = operator new(0x60uLL);
    v11[1] = 0;
    void v11[2] = 0;
    *char v11 = &unk_1EDD1E458;
    void v11[3] = &unk_1EDD0A260;
    uint64_t v12 = MEMORY[0x1E4FBA3D8];
    *((unsigned char *)v11 + 32) = 0;
    v11[5] = 0;
    v11[6] = v12;
    v11[7] = 0;
    unsigned char v11[8] = 0;
    sub_18DEDE7B0(v11 + 9, "");
    *((unsigned char *)v11 + 32) = 1;
    operator new();
  }
  return result;
}

void sub_18E0B0674(_Unwind_Exception *a1)
{
  unint64_t v4 = *(std::__shared_weak_count **)(v2 - 64);
  if (v4) {
    sub_18DEE4E18(v4);
  }
  sub_18DEE4E18(v1);
  _Unwind_Resume(a1);
}

void raven::RavenSupervisor::RaiseEventsFrom(raven::RavenSupervisor *this, const CoreNavigation::CLP::LogEntry::PrivateData::Baro *a2, raven::BarometerEvent *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, int8x16_t a10)
{
  LODWORD(v10) = *((_DWORD *)a2 + 6);
  if ((int)v10 >= 1)
  {
    uint64_t v12 = 0;
    int64x2_t v16 = vdupq_n_s64(0x7FF8000000000000uLL);
    do
    {
      v17[0] = &unk_1EDD138B0;
      v17[1] = 0;
      double v17[2] = 0;
      char v18 = 0;
      uint64_t v19 = 0;
      uint64_t v20 = 0;
      char v21 = 0;
      uint64_t v22 = 0;
      uint64_t v23 = 0;
      char v24 = 0;
      uint64_t v25 = 0;
      uint64_t v26 = 0;
      int8x16_t v13 = (int8x16_t)v16;
      int64x2_t v27 = v16;
      char v28 = 0;
      uint64_t v29 = 0x7FF8000000000000;
      __int16 v30 = 0;
      if (v12 >= (int)v10)
      {
        wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
        wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
        wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
        wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)&v31);
      }
      raven::ConvertProtobufToBarometerEvent(*(raven **)(*((void *)a2 + 2) + 8 * v12), (const CoreNavigation::CLP::LogEntry::PrivateData::BaroSample *)v17, a3, a4, a5, a6, a7, a8, v13, a10);
      if (v14)
      {
        uint64_t v15 = operator new(0x60uLL);
        v15[1] = 0;
        void v15[2] = 0;
        *uint64_t v15 = &unk_1EDD1E458;
        void v15[3] = &unk_1EDD0A260;
        *((unsigned char *)v15 + 32) = 0;
        v15[5] = 0;
        v15[6] = MEMORY[0x1E4FBA3D8];
        v15[7] = 0;
        v15[8] = 0;
        sub_18DEDE7B0(v15 + 9, "");
        *((unsigned char *)v15 + 32) = 1;
        operator new();
      }
      ++v12;
      uint64_t v10 = *((int *)a2 + 6);
    }
    while (v12 < v10);
  }
}

void sub_18E0B0A48(_Unwind_Exception *a1)
{
  unint64_t v4 = *(std::__shared_weak_count **)(v2 - 128);
  if (v4) {
    sub_18DEE4E18(v4);
  }
  sub_18DEE4E18(v1);
  _Unwind_Resume(a1);
}

uint64_t raven::RavenSupervisor::RaiseEventsFrom(uint64_t this, const CoreNavigation::CLP::LogEntry::PrivateData::DeviceMotion *a2, raven::AccelerometerEvent *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, int8x16_t a10)
{
  uint64_t v31 = this;
  __int16 v30 = (unsigned char *)(this + 8462);
  if (!*(unsigned char *)(this + 8491))
  {
    LODWORD(v11) = *((_DWORD *)a2 + 6);
    if ((int)v11 >= 1)
    {
      uint64_t v12 = 0;
      int64x2_t v32 = vdupq_n_s64(0x7FF8000000000000uLL);
      do
      {
        char v33 = &unk_1EDD14058;
        uint64_t v34 = 0;
        double v35 = 0.0;
        char v36 = 0;
        uint64_t v37 = 0;
        uint64_t v38 = 0;
        char v39 = 0;
        uint64_t v40 = 0;
        uint64_t v41 = 0;
        char v42 = 0;
        uint64_t v43 = 0;
        uint64_t v44 = 0;
        int8x16_t v13 = (int8x16_t)v32;
        int64x2_t v45 = v32;
        int64x2_t v46 = v32;
        LOBYTE(v47) = 0;
        *((void *)&v47 + 1) = 0x7FF8000000000000;
        v48.i16[0] = 0;
        if (v12 >= (int)v11)
        {
          wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
          wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
          wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
          wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)&v54);
        }
        if (raven::ConvertProtobufToDeviceMotionAccelerationEvent(*(raven **)(*((void *)a2 + 2) + 8 * v12), (const CoreNavigation::CLP::LogEntry::PrivateData::DeviceMotionSample *)&v33, a3, a4, a5, a6, a7, a8, v13, a10))sub_18E0B01F4(); {
        unint64_t v54 = &unk_1EDD137F0;
        }
        uint64_t v55 = 0;
        uint64_t v56 = 0;
        char v57 = 0;
        uint64_t v58 = 0;
        uint64_t v59 = 0;
        char v60 = 0;
        uint64_t v61 = 0;
        uint64_t v62 = 0;
        char v63 = 0;
        uint64_t v64 = 0;
        uint64_t v65 = 0;
        int8x16_t v21 = (int8x16_t)v32;
        int64x2_t v66 = v32;
        int64x2_t v67 = v32;
        char v68 = 0;
        uint64_t v69 = 0x7FF8000000000000;
        __int16 v70 = 0;
        if (v12 >= *((int *)a2 + 6))
        {
          wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
          wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
          wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
          wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v71);
        }
        this = raven::ConvertProtobufToDeviceMotionRotationRateEvent(*(raven **)(*((void *)a2 + 2) + 8 * v12), (const CoreNavigation::CLP::LogEntry::PrivateData::DeviceMotionSample *)&v54, v14, v15, v16, v17, v18, v19, v21, v20);
        if (this) {
          sub_18E0B0E70();
        }
        ++v12;
        uint64_t v11 = *((int *)a2 + 6);
      }
      while (v12 < v11);
    }
  }
  if (*v30)
  {
    uint64_t v34 = 0;
    double v35 = 0.0;
    char v33 = &unk_1EDD13760;
    char v36 = 0;
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    char v39 = 0;
    uint64_t v40 = 0;
    uint64_t v41 = 0;
    char v42 = 0;
    uint64_t v43 = 0;
    uint64_t v44 = 0;
    int64x2_t v45 = (int64x2_t)0x7FF8000000000000uLL;
    int64x2_t v46 = 0uLL;
    long long v47 = xmmword_18E200CD0;
    int8x16_t v48 = (int8x16_t)vdupq_n_s64(0x7FF8000000000000uLL);
    int8x16_t v49 = v48;
    int8x16_t v50 = v48;
    int8x16_t v51 = v48;
    uint64_t v52 = 0x7FF8000000000000;
    __int16 v53 = 1;
    this = raven::ConvertProtobufToDeviceMotionAttitudeEvent(*(void *)(*((void *)a2 + 2) + 8 * *((int *)a2 + 6) - 8), (uint64_t)&v33, *(_DWORD *)(v31 + 5704), a4, a5, a6, a7, a8, (int8x16_t)xmmword_18E200CD0, v48);
    if (this)
    {
      uint64_t v24 = v34;
      double v25 = v35;
      v22.i64[0] = *(void *)(v31 + 5696);
      unint64_t v54 = 0;
      uint64_t v55 = 0;
      CNTimeSpan::SetTimeSpan((uint64_t *)&v54, 0, v22, v23);
      this = CNTimeSpan::operator+(v31 + 824, &v54, v26, v27);
      if (!v24 && (*(void *)&v25 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000
        || !this && (*(void *)&v28 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000
        || (BOOL v29 = v24 <= this, v24 == this))
      {
        BOOL v29 = v25 <= v28;
      }
      if (!v29)
      {
        *(void *)(v31 + 824) = v24;
        *(double *)(v31 + 832) = v25;
        sub_18E0B0F08();
      }
    }
  }
  return this;
}

void sub_18E0B0E40(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)(v1 - 152));
  _Unwind_Resume(a1);
}

void sub_18E0B0E70()
{
}

void sub_18E0B0EE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a11) {
    sub_18DEE4E18(a11);
  }
  if (a13) {
    sub_18DEE4E18(a13);
  }
  _Unwind_Resume(exception_object);
}

void sub_18E0B0F08()
{
}

void sub_18E0B0F7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a11) {
    sub_18DEE4E18(a11);
  }
  if (a13) {
    sub_18DEE4E18(a13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t raven::RavenSupervisor::RaiseEventsFrom(uint64_t this, const CoreNavigation::CLP::LogEntry::PrivateData::DeviceMotionSample *a2, raven::AccelerometerEvent *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, int8x16_t a10)
{
  uint64_t v11 = this;
  uint64_t v12 = (unsigned char *)(this + 8462);
  if (!*(unsigned char *)(this + 8491))
  {
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    int8x16_t v21 = &unk_1EDD14058;
    char v24 = 0;
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    char v27 = 0;
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    char v30 = 0;
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    int8x16_t v33 = (int8x16_t)vdupq_n_s64(0x7FF8000000000000uLL);
    int8x16_t v20 = v33;
    int8x16_t v34 = v33;
    LOBYTE(v35) = 0;
    *((void *)&v35 + 1) = 0x7FF8000000000000;
    v36.i16[0] = 0;
    if (raven::ConvertProtobufToDeviceMotionAccelerationEvent(a2, (const CoreNavigation::CLP::LogEntry::PrivateData::DeviceMotionSample *)&v21, a3, a4, a5, a6, a7, a8, v33, a10))sub_18E0B01F4(); {
    v42[1] = 0;
    }
    _OWORD v42[2] = 0;
    v42[0] = &unk_1EDD137F0;
    char v43 = 0;
    uint64_t v44 = 0;
    uint64_t v45 = 0;
    char v46 = 0;
    uint64_t v47 = 0;
    uint64_t v48 = 0;
    char v49 = 0;
    uint64_t v50 = 0;
    uint64_t v51 = 0;
    int8x16_t v52 = v20;
    int8x16_t v53 = v20;
    char v54 = 0;
    uint64_t v55 = 0x7FF8000000000000;
    __int16 v56 = 0;
    this = raven::ConvertProtobufToDeviceMotionRotationRateEvent(a2, (const CoreNavigation::CLP::LogEntry::PrivateData::DeviceMotionSample *)v42, v13, v14, v15, v16, v17, v18, v20, v19);
    if (this) {
      sub_18E0B0E70();
    }
  }
  if (*v12)
  {
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    int8x16_t v21 = &unk_1EDD13760;
    char v24 = 0;
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    char v27 = 0;
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    char v30 = 0;
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    int8x16_t v33 = (int8x16_t)0x7FF8000000000000uLL;
    int8x16_t v34 = 0uLL;
    long long v35 = xmmword_18E200CD0;
    int8x16_t v36 = (int8x16_t)vdupq_n_s64(0x7FF8000000000000uLL);
    int8x16_t v37 = v36;
    int8x16_t v38 = v36;
    int8x16_t v39 = v36;
    uint64_t v40 = 0x7FF8000000000000;
    __int16 v41 = 1;
    this = raven::ConvertProtobufToDeviceMotionAttitudeEvent((uint64_t)a2, (uint64_t)&v21, *(_DWORD *)(v11 + 5704), a4, a5, a6, a7, a8, (int8x16_t)xmmword_18E200CD0, v36);
    if (this) {
      sub_18E0B0F08();
    }
  }
  return this;
}

uint64_t raven::RavenSupervisor::RaiseEventsFrom(raven::RavenSupervisor *this, const CoreNavigation::CLP::LogEntry::PrivateData::DigitalElevationModel *a2, raven::AltitudeEvent *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9, int8x16_t a10)
{
  v11[1] = 0;
  void v11[2] = 0;
  v11[0] = &unk_1EDD13730;
  char v12 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  char v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  char v18 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0x7FF8000000000000;
  uint64_t result = raven::ConvertProtobufToAltitudeEvent(a2, (const CoreNavigation::CLP::LogEntry::PrivateData::DigitalElevationModel *)v11, a3, a4, a5, a6, a7, a8, a9, a10);
  if (result) {
    sub_18E0CDC7C();
  }
  return result;
}

void sub_18E0B123C(_Unwind_Exception *exception_object)
{
  unint64_t v4 = *(std::__shared_weak_count **)(v2 - 40);
  if (v4) {
    sub_18DEE4E18(v4);
  }
  if (v1) {
    sub_18DEE4E18(v1);
  }
  _Unwind_Resume(exception_object);
}

void raven::RavenSupervisor::RaiseEventsFrom(raven::RavenSupervisor *this, const std::string **a2)
{
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  long long v7 = &unk_1EDD14270;
  LOBYTE(v10) = 0;
  *((void *)&v10 + 1) = 0;
  *(void *)&long long v11 = 0;
  BYTE8(v11) = 0;
  long long v12 = 0uLL;
  LOBYTE(v13) = 0;
  *((void *)&v13 + 1) = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0x7FF8000000000000;
  memset(&__p, 0, sizeof(__p));
  std::string::operator=(&__p, a2[3]);
  std::mutex::lock((std::mutex *)((char *)this + 608));
  uint64_t v3 = *((void *)this + 74);
  uint64_t v4 = *((void *)this + 75);
  std::mutex::unlock((std::mutex *)((char *)this + 608));
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  uint64_t v8 = v3;
  uint64_t v9 = v4;
  uint64_t v14 = 0;
  uint64_t v15 = 0x7FF8000000000000;
  uint64_t v5 = operator new(0x60uLL);
  v5[1] = 0;
  double v5[2] = 0;
  *uint64_t v5 = &unk_1EDD1E458;
  v5[3] = &unk_1EDD0A260;
  uint64_t v6 = MEMORY[0x1E4FBA3D8];
  *((unsigned char *)v5 + 32) = 0;
  v5[5] = 0;
  v5[6] = v6;
  v5[7] = 0;
  v5[8] = 0;
  sub_18DEDE7B0(v5 + 9, "");
  *((unsigned char *)v5 + 32) = 1;
  operator new();
}

void sub_18E0B14E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v31 = *(std::__shared_weak_count **)(v29 - 64);
  if (v31) {
    sub_18DEE4E18(v31);
  }
  sub_18DEE4E18(v28);
  if (a28 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void raven::RavenSupervisor::RaiseEventsFrom(raven::RavenSupervisor *this, const CoreNavigation::CLP::LogEntry::PrivateData::GEOMapBuildingData *a2, raven::GEOMapBuildingDataEvent *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, int8x16_t a10)
{
  v12[1] = 0;
  void v12[2] = 0;
  v12[0] = &unk_1EDD14628;
  char v13 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  char v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  char v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0x7FF8000000000000;
  memset(v23, 0, sizeof(v23));
  int8x16_t v24 = (int8x16_t)vdupq_n_s64(0x7FF8000000000000uLL);
  v26[0] = 0;
  v26[1] = 0;
  uint64_t v25 = v26;
  if (raven::ConvertProtobufToGEOMapBuildingDataEvent(a2, (const CoreNavigation::CLP::LogEntry::PrivateData::GEOMapBuildingData *)v12, a3, a4, a5, a6, a7, a8, v24, a10))
  {
    long long v10 = operator new(0x60uLL);
    v10[1] = 0;
    v10[2] = 0;
    *long long v10 = &unk_1EDD1E458;
    void v10[3] = &unk_1EDD0A260;
    uint64_t v11 = MEMORY[0x1E4FBA3D8];
    *((unsigned char *)v10 + 32) = 0;
    v10[5] = 0;
    v10[6] = v11;
    v10[7] = 0;
    v10[8] = 0;
    sub_18DEDE7B0(v10 + 9, "");
    *((unsigned char *)v10 + 32) = 1;
    operator new();
  }
  v12[0] = &unk_1EDD14628;
  sub_18E012A10((uint64_t)&v25, v26[0]);
  *(void *)&long long v27 = v23;
  sub_18E0DDF5C((void ***)&v27);
}

void sub_18E0B182C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  long long v12 = *(std::__shared_weak_count **)(v10 - 80);
  if (v12) {
    sub_18DEE4E18(v12);
  }
  sub_18DEE4E18(v9);
  raven::GEOMapBuildingDataEvent::~GEOMapBuildingDataEvent((raven::GEOMapBuildingDataEvent *)&a9);
  _Unwind_Resume(a1);
}

void raven::RavenSupervisor::RaiseEventsFrom(raven::RavenSupervisor *this, const CoreNavigation::CLP::LogEntry::PrivateData::Gyro *a2, raven::RateGyroEvent *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, int8x16_t a10)
{
  LODWORD(v10) = *((_DWORD *)a2 + 6);
  if ((int)v10 >= 1)
  {
    uint64_t v12 = 0;
    int64x2_t v14 = vdupq_n_s64(0x7FF8000000000000uLL);
    do
    {
      v15[0] = &unk_1EDD137F0;
      v15[1] = 0;
      void v15[2] = 0;
      char v16 = 0;
      uint64_t v17 = 0;
      uint64_t v18 = 0;
      char v19 = 0;
      uint64_t v20 = 0;
      uint64_t v21 = 0;
      char v22 = 0;
      uint64_t v23 = 0;
      uint64_t v24 = 0;
      int8x16_t v13 = (int8x16_t)v14;
      int64x2_t v25 = v14;
      int64x2_t v26 = v14;
      char v27 = 0;
      uint64_t v28 = 0x7FF8000000000000;
      __int16 v29 = 0;
      if (v12 >= (int)v10)
      {
        wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
        wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
        wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
        wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v30);
      }
      if (raven::ConvertProtobufToRateGyroEvent(*(float32x2_t **)(*((void *)a2 + 2) + 8 * v12), (const CoreNavigation::CLP::LogEntry::PrivateData::GyroSample *)v15, a3, a4, a5, a6, a7, a8, v13, a10))sub_18E0B0E70(); {
      ++v12;
      }
      uint64_t v10 = *((int *)a2 + 6);
    }
    while (v12 < v10);
  }
}

void sub_18E0B1A20(_Unwind_Exception *a1)
{
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)(v1 - 136));
  _Unwind_Resume(a1);
}

CoreNavigation::CLP::LogEntry::PrivateData *raven::RavenSupervisor::RaiseEventsFrom(raven::RavenSupervisor *this, const CoreNavigation::CLP::LogEntry::PrivateData::Location *a2, raven::PositionEvent *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, int8x16_t a10)
{
  v54[1] = 0;
  v54[2] = 0;
  v54[0] = &unk_1EDD137C0;
  char v55 = 0;
  uint64_t v56 = 0;
  uint64_t v57 = 0;
  char v58 = 0;
  uint64_t v59 = 0;
  uint64_t v60 = 0;
  char v61 = 0;
  uint64_t v62 = 0;
  uint64_t v63 = 0;
  uint64_t v65 = 0;
  uint64_t v66 = 0;
  uint64_t v64 = 0x7FF8000000000000;
  char v67 = 0;
  uint64_t v68 = 0;
  uint64_t v69 = 0;
  char v70 = 0;
  uint64_t v72 = 0;
  uint64_t v71 = 0;
  char v73 = 0;
  uint64_t v74 = 0;
  uint64_t v75 = 0;
  uint64_t v76 = 0x7FF8000000000000;
  __int16 v77 = 0;
  char v78 = 0;
  int8x16_t v79 = (int8x16_t)vdupq_n_s64(0x7FF8000000000000uLL);
  int8x16_t v80 = v79;
  int8x16_t v81 = v79;
  int8x16_t v82 = v79;
  uint64_t v83 = 0x7FF8000000000000;
  char v84 = 0;
  int8x16_t v85 = v79;
  int8x16_t v86 = v79;
  int8x16_t v87 = v79;
  int8x16_t v88 = v79;
  int8x16_t v18 = v79;
  uint64_t v89 = 0x7FF8000000000000;
  if (raven::ConvertProtobufToPositionEvent(a2, (const CoreNavigation::CLP::LogEntry::PrivateData::Location *)v54, a3, a4, a5, a6, a7, a8, v79, a10))sub_18E0B1C28(); {
  v19[1] = 0;
  }
  v19[2] = 0;
  v19[0] = &unk_1EDD13880;
  char v20 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  char v23 = 0;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  char v26 = 0;
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  uint64_t v29 = 0x7FF8000000000000;
  char v32 = 0;
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  char v35 = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  char v38 = 0;
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  uint64_t v41 = 0x7FF8000000000000;
  int v42 = 0;
  int8x16_t v43 = v18;
  int8x16_t v44 = v18;
  int8x16_t v45 = v18;
  int8x16_t v46 = v18;
  uint64_t v47 = 0x7FF8000000000000;
  char v48 = 0;
  int8x16_t v49 = v18;
  int8x16_t v50 = v18;
  int8x16_t v51 = v18;
  int8x16_t v52 = v18;
  uint64_t v53 = 0x7FF8000000000000;
  uint64_t result = raven::ConvertProtobufToVelocityEvent(a2, (const CoreNavigation::CLP::LogEntry::PrivateData::Location *)v54, (const raven::PositionEvent *)v19, v11, v12, v13, v14, v15, v18, v16);
  if (result) {
    sub_18E0D4C2C();
  }
  return result;
}

void sub_18E0B1C04(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *(std::__shared_weak_count **)(v2 - 56);
  if (v4) {
    sub_18DEE4E18(v4);
  }
  if (v1) {
    sub_18DEE4E18(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_18E0B1C28()
{
}

void sub_18E0B1C9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a11) {
    sub_18DEE4E18(a11);
  }
  if (a13) {
    sub_18DEE4E18(a13);
  }
  _Unwind_Resume(exception_object);
}

void raven::RavenSupervisor::RaiseEventsFrom(raven::RavenSupervisor *this, const CoreNavigation::CLP::LogEntry::PrivateData::MapMatchingRouteHint *a2, raven::MapsRouteHintEvent *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9, int8x16_t a10)
{
  v12[1] = 0;
  void v12[2] = 0;
  v12[0] = &unk_1EDD140E8;
  char v13 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  char v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  char v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  uint64_t v22 = 0x7FF8000000000000;
  char v25 = 0;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  char v28 = 0;
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  char v31 = 0;
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  uint64_t v34 = 0x7FF8000000000000;
  __int16 v35 = 0;
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  std::string __p = 0;
  if (raven::ConvertProtobufToMapsRouteHintEvent(a2, (const CoreNavigation::CLP::LogEntry::PrivateData::MapMatchingRouteHint *)v12, a3, a4, a5, a6, a7, a8, a9, a10))
  {
    uint64_t v10 = operator new(0x60uLL);
    v10[1] = 0;
    v10[2] = 0;
    *uint64_t v10 = &unk_1EDD1E458;
    void v10[3] = &unk_1EDD0A260;
    uint64_t v11 = MEMORY[0x1E4FBA3D8];
    *((unsigned char *)v10 + 32) = 0;
    v10[5] = 0;
    v10[6] = v11;
    v10[7] = 0;
    v10[8] = 0;
    sub_18DEDE7B0(v10 + 9, "");
    *((unsigned char *)v10 + 32) = 1;
    operator new();
  }
  v12[0] = &unk_1EDD140E8;
  if (__p)
  {
    uint64_t v37 = __p;
    operator delete(__p);
  }
}

void sub_18E0B1FE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36)
{
  uint64_t v39 = *(std::__shared_weak_count **)(v37 - 80);
  if (v39) {
    sub_18DEE4E18(v39);
  }
  sub_18DEE4E18(v36);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t raven::RavenSupervisor::RaiseEventsFrom(raven::RavenSupervisor *this, const CoreNavigation::CLP::LogEntry::PrivateData::MapVector *a2, raven::MapVectorEvent *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, int8x16_t a10)
{
  v11[1] = 0;
  void v11[2] = 0;
  v11[0] = &unk_1EDD138E0;
  char v12 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  char v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  char v18 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  uint64_t v21 = 0x7FF8000000000000;
  char v24 = 0;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  char v27 = 0;
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  char v30 = 0;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  int8x16_t v33 = (int8x16_t)vdupq_n_s64(0x7FF8000000000000uLL);
  int8x16_t v34 = v33;
  int8x16_t v35 = v33;
  int8x16_t v36 = v33;
  int8x16_t v37 = v33;
  int v38 = 0;
  uint64_t result = raven::ConvertProtobufToMapVectorEvent(a2, (const CoreNavigation::CLP::LogEntry::PrivateData::MapVector *)v11, a3, a4, a5, a6, a7, a8, v33, a10);
  if (result) {
    sub_18E0CFDBC();
  }
  return result;
}

void sub_18E0B21AC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 - 40);
  if (v3) {
    sub_18DEE4E18(v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(v1 - 24);
  if (v4) {
    sub_18DEE4E18(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t raven::RavenSupervisor::RaiseEventsFrom(raven::RavenSupervisor *this, const CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents *a2, raven::GnssMeasurementDataEvent *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v11[1] = 0;
  void v11[2] = 0;
  v11[0] = &unk_1EDD14688;
  char v12 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  char v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  char v18 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  long long v21 = xmmword_18E200CE0;
  uint64_t v22 = -1;
  int32x4_t v23 = vdupq_n_s32(0x7FC00000u);
  int8x16_t v24 = (int8x16_t)vdupq_n_s64(0x7FF8000000000000uLL);
  unint64_t v25 = 0x8000000000000000;
  uint64_t v26 = v23.i64[0];
  uint64_t v27 = 0x7FF8000000000000;
  int v28 = 2143289344;
  long long v36 = 0u;
  long long v35 = 0u;
  long long v34 = 0u;
  long long v33 = 0u;
  long long v32 = 0u;
  long long v31 = 0u;
  long long v30 = 0u;
  long long v29 = 0u;
  if (raven::ConvertProtobufToGnssMeasDataEvent(a2, (const CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents *)v11, a3, a4, a5, a6, a7, a8, (int8x16_t)0, v24))
  {
    uint64_t v8 = operator new(0x60uLL);
    v8[1] = 0;
    v8[2] = 0;
    *uint64_t v8 = &unk_1EDD1E458;
    void v8[3] = &unk_1EDD0A260;
    uint64_t v9 = MEMORY[0x1E4FBA3D8];
    *((unsigned char *)v8 + 32) = 0;
    v8[5] = 0;
    v8[6] = v9;
    v8[7] = 0;
    unsigned char v8[8] = 0;
    sub_18DEDE7B0(v8 + 9, "");
    *((unsigned char *)v8 + 32) = 1;
    operator new();
  }
  v11[0] = &unk_1EDD14688;
  return sub_18E15E380((uint64_t)&v22);
}

void sub_18E0B24F4(_Unwind_Exception *a1)
{
  uint64_t v5 = *(std::__shared_weak_count **)(v3 - 96);
  if (v5) {
    sub_18DEE4E18(v5);
  }
  sub_18DEE4E18(v2);
  sub_18E15E380(v1);
  _Unwind_Resume(a1);
}

CoreNavigation::CLP::LogEntry::PrivateData *raven::RavenSupervisor::RaiseEventsFrom(raven::RavenSupervisor *this, const CoreNavigation::CLP::LogEntry::PrivateData::MotionState *a2, raven::ActivityInputEvent *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9, int8x16_t a10)
{
  uint64_t v81 = 0;
  double v82 = 0.0;
  int8x16_t v80 = &unk_1EDD14088;
  char v83 = 0;
  uint64_t v84 = 0;
  uint64_t v85 = 0;
  char v86 = 0;
  uint64_t v87 = 0;
  uint64_t v88 = 0;
  char v89 = 0;
  uint64_t v90 = 0;
  uint64_t v91 = 0;
  uint64_t v92 = 0x7FF8000000000000;
  __int16 v93 = 0;
  uint64_t v11 = (CoreNavigation::CLP::LogEntry::PrivateData *)raven::ConvertProtobufToActivityInputEvent(a2, (const CoreNavigation::CLP::LogEntry::PrivateData::MotionState *)&v80, a3, a4, a5, a6, a7, a8, a9, a10);
  if (v11)
  {
    LOWORD(v62) = 12;
    LOBYTE(v44) = 2;
    double v20 = v82 + (double)v81;
    if (!*((void *)a2 + 2)) {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(v11);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v62, (unsigned __int8 *)&v44, "t,%.3lf,Raising ActivityInputEvent,%d,from protobuf activity type,%d", v13, v14, v15, v16, v17, SLOBYTE(v20));
    long long v21 = operator new(0x60uLL);
    v21[1] = 0;
    double v21[2] = 0;
    *long long v21 = &unk_1EDD1E458;
    void v21[3] = &unk_1EDD0A260;
    uint64_t v22 = MEMORY[0x1E4FBA3D8];
    *((unsigned char *)v21 + 32) = 0;
    v21[5] = 0;
    v21[6] = v22;
    v21[7] = 0;
    v21[8] = 0;
    sub_18DEDE7B0(v21 + 9, "");
    *((unsigned char *)v21 + 32) = 1;
    operator new();
  }
  uint64_t v63 = 0;
  double v64 = 0.0;
  uint64_t v62 = &unk_1EDD13AA8;
  char v65 = 0;
  uint64_t v66 = 0;
  uint64_t v67 = 0;
  char v68 = 0;
  uint64_t v69 = 0;
  uint64_t v70 = 0;
  char v71 = 0;
  uint64_t v72 = 0;
  uint64_t v73 = 0;
  uint64_t v74 = 0x7FF8000000000000;
  char v75 = 0;
  uint64_t v76 = 0x3FF0000000000000;
  uint64_t v77 = 0;
  uint64_t v78 = 0;
  uint64_t v79 = 0;
  int32x4_t v23 = (CoreNavigation::CLP::LogEntry::PrivateData *)raven::ConvertProtobufToMountStateEvent(a2, (const CoreNavigation::CLP::LogEntry::PrivateData::MotionState *)&v62, v12, v13, v14, v15, v16, v17, v18, v19);
  if (v23)
  {
    LOWORD(v44) = 12;
    LOBYTE(v95) = 2;
    uint64_t v33 = v63;
    double v32 = v64;
    if (!*((void *)a2 + 2)) {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(v23);
    }
    double v42 = v32 + (double)v33;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v44, (unsigned __int8 *)&v95, "t,%.3lf,Raising MountStateEvent,%d,from protobuf mounted state,%d", v25, v26, v27, v28, v29, SLOBYTE(v42));
    sub_18E0D03B4();
  }
  uint64_t v45 = 0;
  double v46 = 0.0;
  int8x16_t v44 = &unk_1EDD13CF0;
  char v47 = 0;
  uint64_t v48 = 0;
  uint64_t v49 = 0;
  char v50 = 0;
  uint64_t v51 = 0;
  uint64_t v52 = 0;
  char v53 = 0;
  uint64_t v54 = 0;
  uint64_t v55 = 0;
  uint64_t v56 = 0x7FF8000000000000;
  char v57 = 0;
  uint64_t v58 = 0x3FF0000000000000;
  uint64_t v59 = 0;
  uint64_t v60 = 0;
  uint64_t v61 = 0;
  uint64_t result = (CoreNavigation::CLP::LogEntry::PrivateData *)raven::ConvertProtobufToMovingStateEvent(a2, (const CoreNavigation::CLP::LogEntry::PrivateData::MotionState *)&v44, v24, v25, v26, v27, v28, v29, v30, v31);
  if (result)
  {
    LOWORD(v95) = 12;
    LOBYTE(v94) = 2;
    uint64_t v41 = v45;
    double v40 = v46;
    if (!*((void *)a2 + 2)) {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataShared_2eproto(result);
    }
    double v43 = v40 + (double)v41;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v95, (unsigned __int8 *)&v94, "t,%.3lf,Raising MovingStateEvent,%d,from protobuf activity type,%d", v35, v36, v37, v38, v39, SLOBYTE(v43));
    sub_18E0D0930();
  }
  return result;
}

void sub_18E0B2AC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  long long v34 = *(std::__shared_weak_count **)(v32 - 104);
  if (v34) {
    sub_18DEE4E18(v34);
  }
  uint64_t v35 = *(std::__shared_weak_count **)(v32 - 88);
  if (v35) {
    sub_18DEE4E18(v35);
  }
  _Unwind_Resume(exception_object);
}

uint64_t raven::RavenSupervisor::RaiseEventsFrom(raven::RavenSupervisor *this, const CoreNavigation::CLP::LogEntry::PrivateData::MotionStateObserver *a2, raven::FitnessSessionEvent *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9, int8x16_t a10)
{
  v11[1] = 0;
  void v11[2] = 0;
  v11[0] = &unk_1EDD141E0;
  char v12 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  char v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  char v18 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0x7FF8000000000000;
  char v22 = 0;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  char v25 = 0;
  char v28 = 0;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  char v31 = 0;
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  uint64_t v34 = 0x7FF8000000000000;
  uint64_t result = raven::ConvertProtobufToFitnessSessionEvent(a2, (const CoreNavigation::CLP::LogEntry::PrivateData::MotionStateObserver *)v11, a3, a4, a5, a6, a7, a8, a9, a10);
  if (result) {
    sub_18E0CF7F0();
  }
  return result;
}

void sub_18E0B2C84(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *(std::__shared_weak_count **)(v2 - 56);
  if (v4) {
    sub_18DEE4E18(v4);
  }
  if (v1) {
    sub_18DEE4E18(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t raven::RavenSupervisor::RaiseEventsFrom(raven::RavenSupervisor *this, const CoreNavigation::CLP::LogEntry::PrivateData::Natalimetry *a2, raven::BodyMetricsEvent *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9, int8x16_t a10)
{
  v13[1] = 0;
  void v13[2] = 0;
  v13[0] = &unk_1EDD13C88;
  char v14 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  char v17 = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  char v20 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0x7FF8000000000000;
  char v24 = 0;
  uint64_t result = raven::ConvertProtobufToBodyMetricsEvent(a2, (const CoreNavigation::CLP::LogEntry::PrivateData::Natalimetry *)v13, a3, a4, a5, a6, a7, a8, a9, a10);
  if (result)
  {
    uint64_t v11 = operator new(0x60uLL);
    v11[1] = 0;
    void v11[2] = 0;
    *uint64_t v11 = &unk_1EDD1E458;
    void v11[3] = &unk_1EDD0A260;
    uint64_t v12 = MEMORY[0x1E4FBA3D8];
    *((unsigned char *)v11 + 32) = 0;
    v11[5] = 0;
    v11[6] = v12;
    v11[7] = 0;
    unsigned char v11[8] = 0;
    sub_18DEDE7B0(v11 + 9, "");
    *((unsigned char *)v11 + 32) = 1;
    operator new();
  }
  return result;
}

void sub_18E0B2F44(_Unwind_Exception *a1)
{
  uint64_t v4 = *(std::__shared_weak_count **)(v2 - 64);
  if (v4) {
    sub_18DEE4E18(v4);
  }
  sub_18DEE4E18(v1);
  _Unwind_Resume(a1);
}

uint64_t raven::RavenSupervisor::RaiseEventsFrom(raven::RavenSupervisor *this, const CoreNavigation::CLP::LogEntry::PrivateData::SignalEnvironment *a2, raven::SignalEnvironmentEvent *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9, int8x16_t a10)
{
  v11[1] = 0;
  void v11[2] = 0;
  v11[0] = &unk_1EDD145D0;
  char v12 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  char v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  char v18 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0x7FF8000000000000;
  char v22 = 0;
  uint64_t result = raven::ConvertProtobufToSignalEnvironmentEvent(a2, (const CoreNavigation::CLP::LogEntry::PrivateData::SignalEnvironment *)v11, a3, a4, a5, a6, a7, a8, a9, a10);
  if (result) {
    sub_18DFF6B84();
  }
  return result;
}

void sub_18E0B3098(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 - 40);
  if (v3) {
    sub_18DEE4E18(v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(v1 - 24);
  if (v4) {
    sub_18DEE4E18(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t raven::RavenSupervisor::RaiseEventsFrom(raven::RavenSupervisor *this, const CoreNavigation::CLP::LogEntry::PrivateData::StepCount *a2, raven::StepCountEvent *a3)
{
  v4[1] = 0;
  v4[2] = 0;
  v4[0] = &unk_1EDD139E0;
  char v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  char v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  char v11 = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0x7FF8000000000000;
  char v15 = 0;
  int64x2_t v16 = vdupq_n_s64(0x7FF8000000000000uLL);
  uint64_t v17 = 0x7FF8000000000000;
  int v18 = 0;
  uint64_t v19 = 0x7FF8000000000000;
  uint64_t v20 = 0xFFFFFFFFLL;
  uint64_t result = raven::ConvertProtobufToStepCountEvent(a2, (const CoreNavigation::CLP::LogEntry::PrivateData::StepCount *)v4, a3);
  if (result) {
    sub_18E0D451C();
  }
  return result;
}

void sub_18E0B31A8(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *(std::__shared_weak_count **)(v2 - 40);
  if (v4) {
    sub_18DEE4E18(v4);
  }
  if (v1) {
    sub_18DEE4E18(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t raven::RavenSupervisor::RaiseEventsFrom(raven::RavenSupervisor *this, const CoreNavigation::CLP::LogEntry::PrivateData::Timer *a2, raven::TimerEvent *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9, int8x16_t a10)
{
  v13[1] = 0;
  void v13[2] = 0;
  v13[0] = &unk_1EDD13700;
  char v14 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  char v17 = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  char v20 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0x7FF8000000000000;
  uint64_t result = raven::ConvertProtobufToTimerEvent(a2, (const CoreNavigation::CLP::LogEntry::PrivateData::Timer *)v13, a3, a4, a5, a6, a7, a8, a9, a10);
  if (result)
  {
    char v11 = operator new(0x60uLL);
    v11[1] = 0;
    void v11[2] = 0;
    *char v11 = &unk_1EDD1E458;
    void v11[3] = &unk_1EDD0A260;
    uint64_t v12 = MEMORY[0x1E4FBA3D8];
    *((unsigned char *)v11 + 32) = 0;
    v11[5] = 0;
    v11[6] = v12;
    v11[7] = 0;
    unsigned char v11[8] = 0;
    sub_18DEDE7B0(v11 + 9, "");
    *((unsigned char *)v11 + 32) = 1;
    operator new();
  }
  return result;
}

void sub_18E0B345C(_Unwind_Exception *a1)
{
  uint64_t v4 = *(std::__shared_weak_count **)(v2 - 64);
  if (v4) {
    sub_18DEE4E18(v4);
  }
  sub_18DEE4E18(v1);
  _Unwind_Resume(a1);
}

uint64_t raven::RavenSupervisor::RaiseEventsFrom(raven::RavenSupervisor *this, const CoreNavigation::CLP::LogEntry::PrivateData::TunnelBridgeNotification *a2, raven::TunnelBridgeNotificationEvent *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, int8x16_t a10)
{
  v11[1] = 0;
  void v11[2] = 0;
  v11[0] = &unk_1EDD14EE0;
  char v12 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  char v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  char v18 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  uint64_t v21 = 0x7FF8000000000000;
  char v24 = 0;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  char v27 = 0;
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  char v30 = 0;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  int8x16_t v33 = (int8x16_t)vdupq_n_s64(0x7FF8000000000000uLL);
  int8x16_t v34 = v33;
  int v35 = 0;
  uint64_t result = raven::ConvertProtobufToTunnelBridgeNotificationEvent(a2, (const CoreNavigation::CLP::LogEntry::PrivateData::TunnelBridgeNotification *)v11, a3, a4, a5, a6, a7, a8, v33, a10);
  if (result) {
    sub_18E0D2EE0();
  }
  return result;
}

void sub_18E0B35DC(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *(std::__shared_weak_count **)(v2 - 56);
  if (v4) {
    sub_18DEE4E18(v4);
  }
  if (v1) {
    sub_18DEE4E18(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t raven::RavenSupervisor::RaiseEventsFrom(raven::RavenSupervisor *this, const CoreNavigation::CLP::LogEntry::PrivateData::TunnelEndPoint *a2, raven::TunnelEndPointAssistanceEvent *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, int8x16_t a10)
{
  v11[1] = 0;
  void v11[2] = 0;
  v11[0] = &unk_1EDD14F10;
  char v12 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  char v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  char v18 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  uint64_t v21 = 0x7FF8000000000000;
  char v24 = 0;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  char v27 = 0;
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  char v30 = 0;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  int8x16_t v33 = (int8x16_t)vdupq_n_s64(0x7FF8000000000000uLL);
  int8x16_t v34 = v33;
  int8x16_t v35 = v33;
  char v36 = 0;
  uint64_t result = raven::ConvertProtobufToTunnelEndPointAssistanceEvent(a2, (const CoreNavigation::CLP::LogEntry::PrivateData::TunnelEndPoint *)v11, a3, a4, a5, a6, a7, a8, v33, a10);
  if (result) {
    sub_18E0D36BC();
  }
  return result;
}

void sub_18E0B3704(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *(std::__shared_weak_count **)(v2 - 56);
  if (v4) {
    sub_18DEE4E18(v4);
  }
  if (v1) {
    sub_18DEE4E18(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t raven::RavenSupervisor::RaiseEventsFrom(int8x16_t a1, int8x16_t a2, uint64_t a3, cnprint::CNPrinter *a4, uint64_t a5)
{
  v8[1] = 0;
  v8[2] = 0;
  v8[0] = &unk_1EDD142D0;
  char v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  char v12 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  char v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0x7FF8000000000000;
  char v19 = 0;
  uint64_t result = raven::ConvertProtobufToARSessionStatusEvent(a4, a5, (uint64_t)v8, a1, a2);
  if (result)
  {
    uint64_t v6 = operator new(0x60uLL);
    v6[1] = 0;
    v6[2] = 0;
    *uint64_t v6 = &unk_1EDD1E458;
    v6[3] = &unk_1EDD0A260;
    uint64_t v7 = MEMORY[0x1E4FBA3D8];
    *((unsigned char *)v6 + 32) = 0;
    void v6[5] = 0;
    v6[6] = v7;
    v6[7] = 0;
    v6[8] = 0;
    sub_18DEDE7B0(v6 + 9, "");
    *((unsigned char *)v6 + 32) = 1;
    operator new();
  }
  return result;
}

void sub_18E0B39C8(_Unwind_Exception *a1)
{
  uint64_t v4 = *(std::__shared_weak_count **)(v2 - 64);
  if (v4) {
    sub_18DEE4E18(v4);
  }
  sub_18DEE4E18(v1);
  _Unwind_Resume(a1);
}

void raven::RavenSupervisor::RaiseEventsFrom(raven::RavenSupervisor *this, const CoreNavigation::CLP::LogEntry::Vision::VIOEstimation *a2)
{
  v8[1] = 0;
  v8[2] = 0;
  v8[0] = &unk_1EDD13DC0;
  char v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  char v12 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  char v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v18 = 0x7FF8000000000000;
  char v21 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  char v24 = 0;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  char v27 = 0;
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  uint64_t v30 = 0x7FF8000000000000;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  char v33 = 0;
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  char v36 = 0;
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  char v39 = 0;
  uint64_t v40 = 0;
  uint64_t v41 = 0;
  uint64_t v42 = 0x7FF8000000000000;
  char v43 = 0;
  cntransformation::CNRigidTransformation::CNRigidTransformation((cntransformation::CNRigidTransformation *)&v44);
  cntransformation::CNRigidTransformation::CNRigidTransformation((cntransformation::CNRigidTransformation *)v45);
  v45[220] = 0;
  char v46 = 0;
  if (raven::ConvertProtobufToVIOEstimateEvent(a2, (const CoreNavigation::CLP::LogEntry::Vision::VIOEstimation *)v8, v3, v4, v5))
  {
    uint64_t v6 = operator new(0x60uLL);
    v6[1] = 0;
    v6[2] = 0;
    *uint64_t v6 = &unk_1EDD1E458;
    v6[3] = &unk_1EDD0A260;
    uint64_t v7 = MEMORY[0x1E4FBA3D8];
    *((unsigned char *)v6 + 32) = 0;
    void v6[5] = 0;
    v6[6] = v7;
    v6[7] = 0;
    v6[8] = 0;
    sub_18DEDE7B0(v6 + 9, "");
    *((unsigned char *)v6 + 32) = 1;
    operator new();
  }
  raven::VIOEstimateEvent::~VIOEstimateEvent((raven::VIOEstimateEvent *)v8);
}

void sub_18E0B3D50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  char v12 = *(std::__shared_weak_count **)(v10 - 80);
  if (v12) {
    sub_18DEE4E18(v12);
  }
  sub_18DEE4E18(v9);
  raven::VIOEstimateEvent::~VIOEstimateEvent((raven::VIOEstimateEvent *)&a9);
  _Unwind_Resume(a1);
}

void raven::RavenSupervisor::RaiseEventsFrom(raven::RavenSupervisor *this, const CoreNavigation::CLP::LogEntry::Vision::VLLocalizationResult *a2, const CoreNavigation::CLP::LogEntry::LogEntry_TimeStamp *a3)
{
  v47[1] = 0;
  v47[2] = 0;
  v47[0] = &unk_1EDD142A0;
  char v48 = 0;
  uint64_t v49 = 0;
  uint64_t v50 = 0;
  char v51 = 0;
  uint64_t v52 = 0;
  uint64_t v53 = 0;
  char v54 = 0;
  uint64_t v55 = 0;
  uint64_t v56 = 0;
  int8x16_t v58 = 0uLL;
  uint64_t v57 = 0x7FF8000000000000;
  LOBYTE(v59) = 0;
  *(void *)&long long v60 = 0;
  *((void *)&v59 + 1) = 0;
  BYTE8(v60) = 0;
  long long v61 = 0uLL;
  v62.i8[0] = 0;
  v62.i64[1] = 0;
  *(void *)&long long v63 = 0;
  *((void *)&v63 + 1) = 0x7FF8000000000000;
  cntransformation::CNRigidTransformation::CNRigidTransformation((cntransformation::CNRigidTransformation *)&v64);
  cntransformation::CNRigidTransformation::CNRigidTransformation((cntransformation::CNRigidTransformation *)&v65);
  char v69 = 0;
  int8x16_t v70 = (int8x16_t)vdupq_n_s64(0x7FF8000000000000uLL);
  if (raven::ConvertProtobufToVLLocalizationEvent(a2, a3, (const CoreNavigation::CLP::LogEntry::LogEntry_TimeStamp *)v47, v6, v70, v7))
  {
    if (*(double *)v70.i64 < *((double *)this + 983))
    {
      LOWORD(v76[0]) = 12;
      LOBYTE(v45) = 2;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v76, (unsigned __int8 *)&v45, "Ignoring current VL localization event with low confidence level: %.3lf < %.3lf min", v8, v9, v10, v11, v12, v70.i8[0]);
      goto LABEL_41;
    }
    double v13 = *((double *)this + 688);
    *(double *)&v70.i64[1] = v13;
    memset(v46, 0, 17);
    uint64_t v45 = &unk_1EDD137C0;
    *((void *)&v46[1] + 1) = 0;
    *(void *)&v46[2] = 0;
    BYTE8(v46[2]) = 0;
    memset(&v46[3], 0, 17);
    *((void *)&v46[4] + 1) = 0;
    *(void *)&v46[5] = 0;
    memset(&v46[6], 0, 17);
    *((void *)&v46[5] + 1) = 0x7FF8000000000000;
    *((void *)&v46[7] + 1) = 0;
    *(void *)&v46[8] = 0;
    BYTE8(v46[8]) = 0;
    memset(&v46[9], 0, 17);
    *((void *)&v46[10] + 1) = 0;
    *(void *)&v46[11] = 0;
    *((void *)&v46[11] + 1) = 0x7FF8000000000000;
    LOWORD(v46[12]) = 0;
    BYTE2(v46[12]) = 0;
    int64x2_t v14 = vdupq_n_s64(0x7FF8000000000000uLL);
    *(int64x2_t *)((char *)&v46[12] + 8) = v14;
    *(int64x2_t *)((char *)&v46[13] + 8) = v14;
    *(int64x2_t *)((char *)&v46[14] + 8) = v14;
    *(int64x2_t *)((char *)&v46[15] + 8) = v14;
    *((void *)&v46[16] + 1) = 0x7FF8000000000000;
    LOBYTE(v46[17]) = 0;
    *(int64x2_t *)((char *)&v46[17] + 8) = v14;
    *(int64x2_t *)((char *)&v46[18] + 8) = v14;
    *(int64x2_t *)((char *)&v46[19] + 8) = v14;
    *(int64x2_t *)((char *)&v46[20] + 8) = v14;
    *((void *)&v46[21] + 1) = 0x7FF8000000000000;
    if (!v69)
    {
LABEL_40:
      uint64_t v42 = operator new(0x60uLL);
      v42[1] = 0;
      _OWORD v42[2] = 0;
      void *v42 = &unk_1EDD1E458;
      void v42[3] = &unk_1EDD0A260;
      uint64_t v43 = MEMORY[0x1E4FBA3D8];
      *((unsigned char *)v42 + 32) = 0;
      v42[5] = 0;
      v42[6] = v43;
      v42[7] = 0;
      v42[8] = 0;
      sub_18DEDE7B0(v42 + 9, "");
      *((unsigned char *)v42 + 32) = 1;
      operator new();
    }
    memset(&v76[1], 0, 80);
    *(void *)&v76[0] = &unk_1EDD137C0;
    *((void *)&v76[0] + 1) = 0;
    memset(&v76[7], 0, 80);
    v76[6] = 0x7FF8000000000000uLL;
    v76[13] = v14;
    v76[14] = v14;
    v76[15] = v14;
    v76[16] = v14;
    v76[12] = 0x7FF8000000000000uLL;
    v76[17] = 0x7FF8000000000000uLL;
    v76[18] = v14;
    v76[19] = v14;
    v76[20] = v14;
    v76[21] = v14;
    *(void *)&v76[22] = 0x7FF8000000000000;
    memcpy(v46, (char *)v76 + 8, sizeof(v46));
    v15.i64[1] = *((void *)&v63 + 1);
    v46[4] = v62;
    v46[5] = v63;
    v46[2] = v60;
    v46[3] = v61;
    v46[0] = v58;
    v46[1] = v59;
    _WORD v46[10] = v62;
    v46[11] = v63;
    v46[8] = v60;
    v46[9] = v61;
    v46[6] = v58;
    void v46[7] = v59;
    LOBYTE(v46[12]) = 14;
    LOBYTE(v46[17]) = 1;
    *((void *)&v46[17] + 1) = *(void *)v66;
    v46[18] = *(_OWORD *)(v66 + 8);
    v46[19] = *(_OWORD *)v68;
    *(void *)&unsigned char v46[20] = *(void *)(v68 + 16);
    *((void *)&v46[20] + 1) = *(void *)(v68 + 8 * (v67 + 1));
    *(void *)&v46[21] = *(void *)(v68 + 8 * (v67 + 2));
    *((void *)&v46[21] + 1) = *(void *)(v68 + 8 * (2 * v67 + 2));
    v15.i64[0] = 0;
    if (v13 < 2.0 && v13 > 0.0 && (*(void *)&v13 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000) {
      *(double *)v15.i64 = v13;
    }
    double v75 = 0.0;
    uint64_t v74 = 0;
    CNTimeSpan::SetTimeSpan(&v74, 0, v15, v62);
    int8x16_t v72 = v58;
    v71[0] = (*(uint64_t (**)(void *))(v47[0] + 16))(v47);
    v71[1] = v18;
    *(double *)v21.i64 = (double)CNTimeSpan::operator-((uint64_t)&v72, v71, v19, v20);
    *(double *)v23.i64 = fabs(v22 + *(double *)v21.i64);
    v76[0] = 0uLL;
    char v24 = CNTimeSpan::SetTimeSpan((uint64_t *)v76, 0, v23, v21);
    uint64_t v25 = *(void *)&v76[0];
    long long v73 = v76[0];
    double v26 = *((double *)v76 + 1);
    if (*(void *)&v76[0] == 2)
    {
      if (*((double *)v76 + 1) <= 0.0) {
        goto LABEL_22;
      }
    }
    else
    {
      if (!*(void *)&v76[0])
      {
        if ((*((void *)&v76[0] + 1) & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
        {
          if (*((double *)v76 + 1) <= 0.0) {
            goto LABEL_25;
          }
          goto LABEL_19;
        }
LABEL_22:
        if (!v74)
        {
          double v34 = v75;
          if ((*(void *)&v75 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
          {
LABEL_26:
            if (v34 >= *((double *)v76 + 1)) {
              goto LABEL_36;
            }
LABEL_29:
            double v35 = *(double *)&v58.i64[1];
            uint64_t v36 = v58.i64[0];
            uint64_t v37 = (*(uint64_t (**)(void *))(v47[0] + 16))(v47);
            if ((v36 || (*(void *)&v35 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
              && (v37 || (*(void *)&v38 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
              && v36 != v37)
            {
              if (v36 >= v37) {
                goto LABEL_36;
              }
              goto LABEL_35;
            }
            if (v35 < v38)
            {
LABEL_35:
              memset(&v46[7], 0, 72);
              *((void *)&v46[11] + 1) = 0x7FF8000000000000;
              v76[0] = v58;
              *(void *)&v46[6] = CNTimeSpan::operator+((uint64_t)v76, &v73, v58, v39);
              *((void *)&v46[6] + 1) = v40;
              *(void *)&v46[0] = *(void *)&v46[6];
              *((void *)&v46[0] + 1) = v40;
              double v41 = ((double)v25 + v26) * 2.5 * (((double)v25 + v26) * 2.5);
              *(double *)&v46[19] = v41 + *(double *)&v46[19];
              *((double *)&v46[20] + 1) = v41 + *((double *)&v46[20] + 1);
              *((double *)&v46[21] + 1) = v41 + *((double *)&v46[21] + 1);
            }
LABEL_36:
            if (sub_18E0B99D0((uint64_t)&v45)) {
              sub_18E0B9CE0((uint64_t)&v45);
            }
            if (BYTE1(v46[12]) | LOBYTE(v46[17])) {
              sub_18E0B1C28();
            }
            goto LABEL_40;
          }
        }
        if (*(void *)&v76[0] != v74)
        {
          if (*(uint64_t *)&v76[0] <= v74) {
            goto LABEL_36;
          }
          goto LABEL_29;
        }
LABEL_25:
        double v34 = v75;
        goto LABEL_26;
      }
      if (*(uint64_t *)&v76[0] < 3) {
        goto LABEL_22;
      }
    }
LABEL_19:
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v24) <= 1)
    {
      LOWORD(v76[0]) = 12;
      v72.i8[0] = 1;
      uint64_t v27 = (*(uint64_t (**)(void *))(v47[0] + 16))(v47);
      double v44 = v28 + (double)v27;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v76, (unsigned __int8 *)&v72, "VLLocalizationEvent, VL localization position too old to use, t_event,%.3lf, t_vl,%.3lf, dt,%.3lf > %.3lf ", v29, v30, v31, v32, v33, SLOBYTE(v44));
    }
    goto LABEL_40;
  }
LABEL_41:
  raven::VLLocalizationEvent::~VLLocalizationEvent((raven::VLLocalizationEvent *)v47);
}

void sub_18E0B4644(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  if (STACK[0x628]) {
    sub_18DEE4E18((std::__shared_weak_count *)STACK[0x628]);
  }
  sub_18DEE4E18(v59);
  raven::VLLocalizationEvent::~VLLocalizationEvent((raven::VLLocalizationEvent *)&a59);
  _Unwind_Resume(a1);
}

void raven::RavenSupervisor::RaiseEventsFrom(raven::RavenSupervisor *this, const CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::AssistanceFileContents *a2, const CoreNavigation::CLP::LogEntry::LogEntry_TimeStamp *a3, raven::RavenGnssAssistanceFileEvent *a4)
{
  if (*((unsigned char *)this + 7216))
  {
    v13[1] = 0;
    void v13[2] = 0;
    v13[0] = &unk_1EDD14DF8;
    char v14 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    char v17 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    char v20 = 0;
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    uint64_t v23 = 0x7FF8000000000000;
    long long v24 = 0u;
    *(_OWORD *)std::string __p = 0u;
    uint64_t v26 = 0;
    if (raven::ConvertProtobufToRavenGnssAssistanceFileEvent(a2, a3, (const CoreNavigation::CLP::LogEntry::LogEntry_TimeStamp *)v13, a4))
    {
      uint64_t v9 = operator new(0x60uLL);
      v9[1] = 0;
      v9[2] = 0;
      *uint64_t v9 = &unk_1EDD1E458;
      v9[3] = &unk_1EDD0A260;
      uint64_t v10 = MEMORY[0x1E4FBA3D8];
      *((unsigned char *)v9 + 32) = 0;
      v9[5] = 0;
      v9[6] = v10;
      v9[7] = 0;
      v9[8] = 0;
      sub_18DEDE7B0(v9 + 9, "");
      *((unsigned char *)v9 + 32) = 1;
      operator new();
    }
    v27[0] = 12;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v27, &v12, "#rof,Convert protobuf to event failed", v4, v5, v6, v7, v8, v11);
    v13[0] = &unk_1EDD14DF8;
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
}

void sub_18E0B4A28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p)
{
  double v28 = *(std::__shared_weak_count **)(v26 + 152);
  if (v28) {
    sub_18DEE4E18(v28);
  }
  sub_18DEE4E18(v25);
  if (__p)
  {
    *(void *)(v26 + 128) = __p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t raven::RavenSupervisor::RaiseEventsFrom(raven::RavenSupervisor *this, const CoreNavigation::CLP::LogEntry::LogEntry *a2, raven::AccelerometerEvent *a3, raven::RavenGnssAssistanceFileEvent *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int8x16_t a9, int8x16_t a10)
{
  char v11 = this;
  unsigned __int8 v12 = (char *)this + 8481;
  if (!*((unsigned char *)this + 8491)) {
    goto LABEL_5;
  }
  uint64_t v13 = *((void *)a2 + 5);
  if (!v13)
  {
    CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
    uint64_t v13 = *(void *)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_ + 40);
  }
  if (*(unsigned char *)(v13 + 316))
  {
    uint64_t v15 = *((void *)a2 + 5);
    if (!v15)
    {
      CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
      uint64_t v15 = *(void *)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_ + 40);
    }
    uint64_t v16 = *(const CoreNavigation::CLP::LogEntry::PrivateData::Accel **)(v15 + 8);
    if (!v16)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto(this);
      uint64_t v16 = *(const CoreNavigation::CLP::LogEntry::PrivateData::Accel **)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_
                                                                        + 8);
    }
    raven::RavenSupervisor::RaiseEventsFrom(v11, v16, a3, (uint64_t)a4, a5, a6, a7, a8, *(double *)a9.i64, a10);
    uint64_t v14 = 1;
  }
  else
  {
LABEL_5:
    uint64_t v14 = 0;
  }
  uint64_t v17 = *((void *)a2 + 5);
  uint64_t v18 = v17;
  if (!v17)
  {
    CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
    uint64_t v18 = *(void *)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_ + 40);
    uint64_t v17 = *((void *)a2 + 5);
  }
  if ((*(unsigned char *)(v18 + 318) & 0x10) != 0)
  {
    if (!v17)
    {
      CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
      uint64_t v17 = *(void *)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_ + 40);
    }
    uint64_t v19 = *(const CoreNavigation::CLP::LogEntry::PrivateData::AccessoryVehicleSpeedNotification **)(v17 + 168);
    if (!v19)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto(this);
      uint64_t v19 = *(const CoreNavigation::CLP::LogEntry::PrivateData::AccessoryVehicleSpeedNotification **)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_ + 168);
    }
    raven::RavenSupervisor::RaiseEventsFrom(v11, v19, a3, (uint64_t)a4, a5, a6, a7, a8, *(double *)a9.i64, a10);
    uint64_t v17 = *((void *)a2 + 5);
    uint64_t v14 = 2;
  }
  uint64_t v20 = v17;
  if (!v17)
  {
    CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
    uint64_t v20 = *(void *)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_ + 40);
    uint64_t v17 = *((void *)a2 + 5);
  }
  if ((*(unsigned char *)(v20 + 316) & 4) != 0)
  {
    if (!v17)
    {
      CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
      uint64_t v17 = *(void *)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_ + 40);
    }
    uint64_t v21 = *(const CoreNavigation::CLP::LogEntry::PrivateData::Baro **)(v17 + 24);
    if (!v21)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto(this);
      uint64_t v21 = *(const CoreNavigation::CLP::LogEntry::PrivateData::Baro **)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_
                                                                       + 24);
    }
    raven::RavenSupervisor::RaiseEventsFrom(v11, v21, a3, (uint64_t)a4, a5, a6, a7, a8, *(double *)a9.i64, a10);
    uint64_t v17 = *((void *)a2 + 5);
    uint64_t v14 = 4;
  }
  uint64_t v22 = v17;
  if (!v17)
  {
    CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
    uint64_t v22 = *(void *)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_ + 40);
    uint64_t v17 = *((void *)a2 + 5);
  }
  if (*(unsigned char *)(v22 + 317))
  {
    if (!v17)
    {
      CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
      uint64_t v17 = *(void *)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_ + 40);
    }
    uint64_t v23 = *(const CoreNavigation::CLP::LogEntry::PrivateData::DigitalElevationModel **)(v17 + 72);
    if (!v23)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto(this);
      uint64_t v23 = *(const CoreNavigation::CLP::LogEntry::PrivateData::DigitalElevationModel **)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_
                                                                                        + 72);
    }
    this = (raven::RavenSupervisor *)raven::RavenSupervisor::RaiseEventsFrom(v11, v23, a3, (uint64_t)a4, a5, a6, a7, a8, a9, a10);
    uint64_t v17 = *((void *)a2 + 5);
    uint64_t v14 = 5;
  }
  uint64_t v24 = v17;
  if (!v17)
  {
    CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
    uint64_t v24 = *(void *)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_ + 40);
    uint64_t v17 = *((void *)a2 + 5);
  }
  if ((*(unsigned char *)(v24 + 318) & 0x80) != 0)
  {
    if (!v17)
    {
      CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
      uint64_t v17 = *(void *)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_ + 40);
    }
    uint64_t v25 = *(const CoreNavigation::CLP::LogEntry::PrivateData::DeviceMotion **)(v17 + 192);
    if (!v25)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto(this);
      uint64_t v25 = *(const CoreNavigation::CLP::LogEntry::PrivateData::DeviceMotion **)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_
                                                                               + 192);
    }
    this = (raven::RavenSupervisor *)raven::RavenSupervisor::RaiseEventsFrom((uint64_t)v11, v25, a3, (uint64_t)a4, a5, a6, a7, a8, *(double *)a9.i64, a10);
    uint64_t v17 = *((void *)a2 + 5);
    uint64_t v14 = 6;
  }
  uint64_t v26 = v17;
  if (!v17)
  {
    CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
    uint64_t v26 = *(void *)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_ + 40);
    uint64_t v17 = *((void *)a2 + 5);
  }
  if (*(unsigned char *)(v26 + 318))
  {
    if (!v17)
    {
      CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
      uint64_t v17 = *(void *)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_ + 40);
    }
    uint64_t v27 = *(const CoreNavigation::CLP::LogEntry::PrivateData::DeviceMotionSample **)(v17 + 136);
    if (!v27)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto(this);
      uint64_t v27 = *(const CoreNavigation::CLP::LogEntry::PrivateData::DeviceMotionSample **)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_
                                                                                     + 136);
    }
    this = (raven::RavenSupervisor *)raven::RavenSupervisor::RaiseEventsFrom((uint64_t)v11, v27, a3, (uint64_t)a4, a5, a6, a7, a8, *(double *)a9.i64, a10);
    uint64_t v17 = *((void *)a2 + 5);
    uint64_t v14 = 7;
  }
  uint64_t v28 = v17;
  if (!v17)
  {
    CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
    uint64_t v28 = *(void *)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_ + 40);
    uint64_t v17 = *((void *)a2 + 5);
  }
  if ((*(unsigned char *)(v28 + 319) & 2) != 0)
  {
    if (!v17)
    {
      CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
      uint64_t v17 = *(void *)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_ + 40);
    }
    uint64_t v29 = *(const CoreNavigation::CLP::LogEntry::PrivateData::GEOMapBuildingData **)(v17 + 208);
    if (!v29)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto(this);
      uint64_t v29 = *(const CoreNavigation::CLP::LogEntry::PrivateData::GEOMapBuildingData **)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_
                                                                                     + 208);
    }
    raven::RavenSupervisor::RaiseEventsFrom(v11, v29, a3, (uint64_t)a4, a5, a6, a7, a8, *(double *)a9.i64, a10);
    uint64_t v17 = *((void *)a2 + 5);
    uint64_t v14 = 8;
  }
  uint64_t v30 = v17;
  if (!v17)
  {
    CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
    uint64_t v30 = *(void *)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_ + 40);
    uint64_t v17 = *((void *)a2 + 5);
  }
  if (*(unsigned char *)(v30 + 319))
  {
    if (!v17)
    {
      CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
      uint64_t v17 = *(void *)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_ + 40);
    }
    uint64_t v31 = *(const CoreNavigation::CLP::LogEntry::PrivateData::GnssAvailabilityPrediction **)(v17 + 200);
    if (!v31)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto(this);
      uint64_t v31 = *(const CoreNavigation::CLP::LogEntry::PrivateData::GnssAvailabilityPrediction **)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_
                                                                                             + 200);
    }
    this = (raven::RavenSupervisor *)raven::RavenSupervisor::RaiseEventsFrom(v11, v31, a3, (uint64_t)a4, a5, a6, a7, a8, *(double *)a9.i64, a10);
    uint64_t v17 = *((void *)a2 + 5);
    uint64_t v14 = 9;
  }
  uint64_t v32 = v17;
  if (!v17)
  {
    CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
    uint64_t v32 = *(void *)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_ + 40);
    uint64_t v17 = *((void *)a2 + 5);
  }
  if ((*(unsigned char *)(v32 + 317) & 0x10) != 0)
  {
    if (!v17)
    {
      CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
      uint64_t v17 = *(void *)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_ + 40);
    }
    uint64_t v33 = *(const CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents **)(v17 + 104);
    if (!v33)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto(this);
      uint64_t v33 = *(const CoreNavigation::CLP::LogEntry::PrivateData::MeasurementReportCallbackContents **)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_ + 104);
    }
    this = (raven::RavenSupervisor *)raven::RavenSupervisor::RaiseEventsFrom(v11, v33, a3, (uint64_t)a4, a5, a6, a7, a8);
    uint64_t v17 = *((void *)a2 + 5);
    uint64_t v14 = 10;
  }
  if (v12[10])
  {
    uint64_t v34 = v17;
    if (!v17)
    {
      CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
      uint64_t v34 = *(void *)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_ + 40);
      uint64_t v17 = *((void *)a2 + 5);
    }
    if ((*(unsigned char *)(v34 + 316) & 2) != 0)
    {
      if (!v17)
      {
        CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
        uint64_t v17 = *(void *)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_ + 40);
      }
      double v35 = *(const CoreNavigation::CLP::LogEntry::PrivateData::Gyro **)(v17 + 16);
      if (!v35)
      {
        CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto(this);
        double v35 = *(const CoreNavigation::CLP::LogEntry::PrivateData::Gyro **)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_
                                                                         + 16);
      }
      raven::RavenSupervisor::RaiseEventsFrom(v11, v35, a3, (uint64_t)a4, a5, a6, a7, a8, *(double *)a9.i64, a10);
      uint64_t v17 = *((void *)a2 + 5);
      uint64_t v14 = 11;
    }
  }
  uint64_t v36 = v17;
  if (!v17)
  {
    CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
    uint64_t v36 = *(void *)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_ + 40);
    uint64_t v17 = *((void *)a2 + 5);
  }
  if ((*(unsigned char *)(v36 + 316) & 8) != 0)
  {
    if (!v17)
    {
      CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
      uint64_t v17 = *(void *)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_ + 40);
    }
    uint64_t v37 = *(const CoreNavigation::CLP::LogEntry::PrivateData::Location **)(v17 + 32);
    if (!v37)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto(this);
      uint64_t v37 = *(const CoreNavigation::CLP::LogEntry::PrivateData::Location **)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_
                                                                           + 32);
    }
    this = raven::RavenSupervisor::RaiseEventsFrom(v11, v37, a3, (uint64_t)a4, a5, a6, a7, a8, *(double *)a9.i64, a10);
    uint64_t v17 = *((void *)a2 + 5);
    uint64_t v14 = 12;
  }
  if (!v17)
  {
    CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
    uint64_t v17 = *(void *)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_ + 40);
  }
  if ((*(unsigned char *)(v17 + 317) & 0x20) != 0)
  {
    uint64_t v38 = *((void *)a2 + 5);
    if (!v38)
    {
      CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
      uint64_t v38 = *(void *)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_ + 40);
    }
    if (!*(void *)(v38 + 112)) {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto(this);
    }
    uint64_t v14 = 13;
  }
  uint64_t v39 = *((void *)a2 + 5);
  uint64_t v40 = v39;
  if (!v39)
  {
    CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
    uint64_t v40 = *(void *)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_ + 40);
    uint64_t v39 = *((void *)a2 + 5);
  }
  if ((*(unsigned char *)(v40 + 318) & 0x20) != 0)
  {
    if (!v39)
    {
      CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
      uint64_t v39 = *(void *)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_ + 40);
    }
    double v41 = *(const CoreNavigation::CLP::LogEntry::PrivateData::MapMatchingRouteHint **)(v39 + 176);
    if (!v41)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto(this);
      double v41 = *(const CoreNavigation::CLP::LogEntry::PrivateData::MapMatchingRouteHint **)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_
                                                                                       + 176);
    }
    raven::RavenSupervisor::RaiseEventsFrom(v11, v41, a3, (uint64_t)a4, a5, a6, a7, a8, a9, a10);
    uint64_t v39 = *((void *)a2 + 5);
    uint64_t v14 = 15;
  }
  uint64_t v42 = v39;
  if (!v39)
  {
    CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
    uint64_t v42 = *(void *)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_ + 40);
    uint64_t v39 = *((void *)a2 + 5);
  }
  if ((*(unsigned char *)(v42 + 317) & 2) != 0)
  {
    if (!v39)
    {
      CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
      uint64_t v39 = *(void *)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_ + 40);
    }
    uint64_t v43 = *(const CoreNavigation::CLP::LogEntry::PrivateData::MapVector **)(v39 + 80);
    if (!v43)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto(this);
      uint64_t v43 = *(const CoreNavigation::CLP::LogEntry::PrivateData::MapVector **)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_
                                                                            + 80);
    }
    this = (raven::RavenSupervisor *)raven::RavenSupervisor::RaiseEventsFrom(v11, v43, a3, (uint64_t)a4, a5, a6, a7, a8, *(double *)a9.i64, a10);
    uint64_t v39 = *((void *)a2 + 5);
    uint64_t v14 = 16;
  }
  uint64_t v44 = v39;
  if (!v39)
  {
    CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
    uint64_t v44 = *(void *)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_ + 40);
    uint64_t v39 = *((void *)a2 + 5);
  }
  if ((*(unsigned char *)(v44 + 316) & 0x10) != 0)
  {
    if (!v39)
    {
      CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
      uint64_t v39 = *(void *)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_ + 40);
    }
    uint64_t v45 = *(const CoreNavigation::CLP::LogEntry::PrivateData::MotionState **)(v39 + 40);
    if (!v45)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto(this);
      uint64_t v45 = *(const CoreNavigation::CLP::LogEntry::PrivateData::MotionState **)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_
                                                                              + 40);
    }
    this = raven::RavenSupervisor::RaiseEventsFrom(v11, v45, a3, (uint64_t)a4, a5, a6, a7, a8, a9, a10);
    uint64_t v39 = *((void *)a2 + 5);
    uint64_t v14 = 17;
  }
  uint64_t v46 = v39;
  if (!v39)
  {
    CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
    uint64_t v46 = *(void *)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_ + 40);
    uint64_t v39 = *((void *)a2 + 5);
  }
  if ((*(unsigned char *)(v46 + 316) & 0x20) != 0)
  {
    if (!v39)
    {
      CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
      uint64_t v39 = *(void *)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_ + 40);
    }
    char v47 = *(const CoreNavigation::CLP::LogEntry::PrivateData::MotionStateObserver **)(v39 + 48);
    if (!v47)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto(this);
      char v47 = *(const CoreNavigation::CLP::LogEntry::PrivateData::MotionStateObserver **)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_
                                                                                      + 48);
    }
    this = (raven::RavenSupervisor *)raven::RavenSupervisor::RaiseEventsFrom(v11, v47, a3, (uint64_t)a4, a5, a6, a7, a8, a9, a10);
    uint64_t v39 = *((void *)a2 + 5);
    uint64_t v14 = 18;
  }
  uint64_t v48 = v39;
  if (!v39)
  {
    CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
    uint64_t v48 = *(void *)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_ + 40);
    uint64_t v39 = *((void *)a2 + 5);
  }
  if ((*(unsigned char *)(v48 + 316) & 0x40) != 0)
  {
    if (!v39)
    {
      CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
      uint64_t v39 = *(void *)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_ + 40);
    }
    uint64_t v49 = *(const CoreNavigation::CLP::LogEntry::PrivateData::Natalimetry **)(v39 + 56);
    if (!v49)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto(this);
      uint64_t v49 = *(const CoreNavigation::CLP::LogEntry::PrivateData::Natalimetry **)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_
                                                                              + 56);
    }
    this = (raven::RavenSupervisor *)raven::RavenSupervisor::RaiseEventsFrom(v11, v49, a3, (uint64_t)a4, a5, a6, a7, a8, a9, a10);
    uint64_t v39 = *((void *)a2 + 5);
    uint64_t v14 = 19;
  }
  uint64_t v50 = v39;
  if (!v39)
  {
    CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
    uint64_t v50 = *(void *)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_ + 40);
    uint64_t v39 = *((void *)a2 + 5);
  }
  if ((*(unsigned char *)(v50 + 317) & 8) != 0)
  {
    if (!v39)
    {
      CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
      uint64_t v39 = *(void *)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_ + 40);
    }
    char v51 = *(const CoreNavigation::CLP::LogEntry::PrivateData::SignalEnvironment **)(v39 + 96);
    if (!v51)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto(this);
      char v51 = *(const CoreNavigation::CLP::LogEntry::PrivateData::SignalEnvironment **)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_
                                                                                    + 96);
    }
    this = (raven::RavenSupervisor *)raven::RavenSupervisor::RaiseEventsFrom(v11, v51, a3, (uint64_t)a4, a5, a6, a7, a8, a9, a10);
    uint64_t v39 = *((void *)a2 + 5);
    uint64_t v14 = 22;
  }
  uint64_t v52 = v39;
  if (!v39)
  {
    CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
    uint64_t v52 = *(void *)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_ + 40);
    uint64_t v39 = *((void *)a2 + 5);
  }
  if ((*(unsigned char *)(v52 + 317) & 0x80) != 0)
  {
    if (!v39)
    {
      CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
      uint64_t v39 = *(void *)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_ + 40);
    }
    uint64_t v53 = *(const CoreNavigation::CLP::LogEntry::PrivateData::StepCount **)(v39 + 128);
    if (!v53)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto(this);
      uint64_t v53 = *(const CoreNavigation::CLP::LogEntry::PrivateData::StepCount **)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_
                                                                            + 128);
    }
    this = (raven::RavenSupervisor *)raven::RavenSupervisor::RaiseEventsFrom(v11, v53, a3);
    uint64_t v39 = *((void *)a2 + 5);
    uint64_t v14 = 23;
  }
  uint64_t v54 = v39;
  if (!v39)
  {
    CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
    uint64_t v54 = *(void *)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_ + 40);
    uint64_t v39 = *((void *)a2 + 5);
  }
  if ((*(unsigned char *)(v54 + 320) & 0x20) != 0)
  {
    if (!v39)
    {
      CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
      uint64_t v39 = *(void *)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_ + 40);
    }
    uint64_t v55 = *(const std::string ***)(v39 + 304);
    if (!v55)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto(this);
      uint64_t v55 = *(const std::string ***)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_
                                   + 304);
    }
    raven::RavenSupervisor::RaiseEventsFrom(v11, v55);
  }
  uint64_t v56 = v39;
  if (!v39)
  {
    CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
    uint64_t v56 = *(void *)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_ + 40);
    uint64_t v39 = *((void *)a2 + 5);
  }
  if ((*(unsigned char *)(v56 + 316) & 0x80) != 0)
  {
    if (!v39)
    {
      CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
      uint64_t v39 = *(void *)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_ + 40);
    }
    uint64_t v57 = *(const CoreNavigation::CLP::LogEntry::PrivateData::Timer **)(v39 + 64);
    if (!v57)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto(this);
      uint64_t v57 = *(const CoreNavigation::CLP::LogEntry::PrivateData::Timer **)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_
                                                                        + 64);
    }
    this = (raven::RavenSupervisor *)raven::RavenSupervisor::RaiseEventsFrom(v11, v57, a3, (uint64_t)a4, a5, a6, a7, a8, a9, a10);
    uint64_t v39 = *((void *)a2 + 5);
    uint64_t v14 = 24;
  }
  uint64_t v58 = v39;
  if (!v39)
  {
    CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
    uint64_t v58 = *(void *)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_ + 40);
    uint64_t v39 = *((void *)a2 + 5);
  }
  if ((*(unsigned char *)(v58 + 318) & 2) != 0)
  {
    if (!v39)
    {
      CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
      uint64_t v39 = *(void *)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_ + 40);
    }
    long long v59 = *(const CoreNavigation::CLP::LogEntry::PrivateData::TunnelBridgeNotification **)(v39 + 144);
    if (!v59)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto(this);
      long long v59 = *(const CoreNavigation::CLP::LogEntry::PrivateData::TunnelBridgeNotification **)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_
                                                                                           + 144);
    }
    this = (raven::RavenSupervisor *)raven::RavenSupervisor::RaiseEventsFrom(v11, v59, a3, (uint64_t)a4, a5, a6, a7, a8, *(double *)a9.i64, a10);
    uint64_t v39 = *((void *)a2 + 5);
    uint64_t v14 = 25;
  }
  uint64_t v60 = v39;
  if (!v39)
  {
    CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
    uint64_t v60 = *(void *)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_ + 40);
    uint64_t v39 = *((void *)a2 + 5);
  }
  if ((*(unsigned char *)(v60 + 318) & 8) != 0)
  {
    if (!v39)
    {
      CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
      uint64_t v39 = *(void *)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_ + 40);
    }
    long long v61 = *(const CoreNavigation::CLP::LogEntry::PrivateData::TunnelEndPoint **)(v39 + 160);
    if (!v61)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto(this);
      long long v61 = *(const CoreNavigation::CLP::LogEntry::PrivateData::TunnelEndPoint **)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_
                                                                                 + 160);
    }
    this = (raven::RavenSupervisor *)raven::RavenSupervisor::RaiseEventsFrom(v11, v61, a3, (uint64_t)a4, a5, a6, a7, a8, *(double *)a9.i64, a10);
    uint64_t v39 = *((void *)a2 + 5);
    uint64_t v14 = 26;
  }
  if (!v39)
  {
    CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
    uint64_t v39 = *(void *)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_ + 40);
  }
  if ((*(unsigned char *)(v39 + 320) & 4) != 0)
  {
    uint64_t v62 = *((void *)a2 + 5);
    if (!v62)
    {
      CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
      uint64_t v62 = *(void *)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_ + 40);
    }
    uint64_t v63 = *(void *)(v62 + 280);
    if (!v63)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto(this);
      uint64_t v63 = *(void *)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_ + 280);
    }
    uint64_t v64 = (const CoreNavigation::CLP::LogEntry::LogEntry_TimeStamp *)*((void *)a2 + 4);
    if (!v64)
    {
      CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
      uint64_t v64 = *(const CoreNavigation::CLP::LogEntry::LogEntry_TimeStamp **)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_
                                                                        + 32);
    }
    int v65 = *(_DWORD *)(v63 + 40);
    if (v65)
    {
      int v73 = *(_DWORD *)(v63 + 32);
      this = (raven::RavenSupervisor *)raven::RavenSupervisor::RaiseEventsFrom(a9, a10, (uint64_t)v11, (cnprint::CNPrinter *)&v73, (uint64_t)v64);
      int v65 = *(_DWORD *)(v63 + 40);
      uint64_t v14 = 3;
      if ((v65 & 2) == 0)
      {
LABEL_199:
        if ((v65 & 8) == 0) {
          goto LABEL_212;
        }
        goto LABEL_207;
      }
    }
    else if ((v65 & 2) == 0)
    {
      goto LABEL_199;
    }
    if (*v12)
    {
      uint64_t v66 = *(const CoreNavigation::CLP::LogEntry::Vision::VIOEstimation **)(v63 + 8);
      if (!v66)
      {
        CoreNavigation::CLP::LogEntry::Vision::protobuf_AddDesc_CoreNavigationCLPVisionLogEntry_2eproto(this);
        uint64_t v66 = *(const CoreNavigation::CLP::LogEntry::Vision::VIOEstimation **)(CoreNavigation::CLP::LogEntry::Vision::LogEntry::default_instance_
                                                                             + 8);
      }
      raven::RavenSupervisor::RaiseEventsFrom(v11, v66);
      int v65 = *(_DWORD *)(v63 + 40);
    }
    uint64_t v14 = 27;
    if ((v65 & 8) != 0)
    {
LABEL_207:
      if (v12[1])
      {
        int v67 = *(const CoreNavigation::CLP::LogEntry::Vision::VLLocalizationResult **)(v63 + 24);
        if (!v67)
        {
          CoreNavigation::CLP::LogEntry::Vision::protobuf_AddDesc_CoreNavigationCLPVisionLogEntry_2eproto(this);
          int v67 = *(const CoreNavigation::CLP::LogEntry::Vision::VLLocalizationResult **)(CoreNavigation::CLP::LogEntry::Vision::LogEntry::default_instance_
                                                                                      + 24);
        }
        raven::RavenSupervisor::RaiseEventsFrom(v11, v67, v64);
      }
      uint64_t v14 = 28;
    }
  }
LABEL_212:
  uint64_t v68 = *((void *)a2 + 5);
  uint64_t v69 = v68;
  if (!v68)
  {
    CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
    uint64_t v69 = *(void *)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_ + 40);
    uint64_t v68 = *((void *)a2 + 5);
  }
  if ((*(unsigned char *)(v69 + 319) & 0x40) != 0)
  {
    if (!v68)
    {
      CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
      uint64_t v68 = *(void *)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_ + 40);
    }
    int8x16_t v70 = *(const CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::AssistanceFileContents **)(v68 + 248);
    if (!v70)
    {
      CoreNavigation::CLP::LogEntry::PrivateData::protobuf_AddDesc_CoreNavigationCLPPrivateDataCapture_2eproto(this);
      int8x16_t v70 = *(const CoreNavigation::CLP::LogEntry::RavenGnssAssistanceFile::AssistanceFileContents **)(CoreNavigation::CLP::LogEntry::PrivateData::PrivateDataCapture::default_instance_ + 248);
    }
    char v71 = (const CoreNavigation::CLP::LogEntry::LogEntry_TimeStamp *)*((void *)a2 + 4);
    if (!v71)
    {
      CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
      char v71 = *(const CoreNavigation::CLP::LogEntry::LogEntry_TimeStamp **)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_
                                                                        + 32);
    }
    raven::RavenSupervisor::RaiseEventsFrom(v11, v70, v71, a4);
    uint64_t v68 = *((void *)a2 + 5);
    uint64_t v14 = 29;
  }
  if (!v68)
  {
    CoreNavigation::CLP::LogEntry::protobuf_AddDesc_CoreNavigationCLPLogEntry_2eproto(this);
    uint64_t v68 = *(void *)(CoreNavigation::CLP::LogEntry::LogEntry::default_instance_ + 40);
  }
  if ((*(unsigned char *)(v68 + 317) & 0x40) != 0)
  {
    cnframework::Supervisor::Reset(v11);
    return 21;
  }
  return v14;
}

uint64_t raven::RavenSupervisor::RaiseEventsFrom(raven::RavenSupervisor *a1)
{
  CoreNavigation::CLP::LogEntry::LogEntry::LogEntry((CoreNavigation::CLP::LogEntry::LogEntry *)v15);
  if (wireless_diagnostics::google::protobuf::MessageLite::ParseFromString())
  {
    uint64_t v10 = raven::RavenSupervisor::RaiseEventsFrom(a1, (const CoreNavigation::CLP::LogEntry::LogEntry *)v15, v2, v3, v4, v5, v6, v7, v8, v9);
  }
  else
  {
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v14, &v13, "Failed to parse incoming LogEntry", (uint64_t)v3, v4, v5, v6, v7, v12);
    uint64_t v10 = 0;
  }
  CoreNavigation::CLP::LogEntry::LogEntry::~LogEntry((CoreNavigation::CLP::LogEntry::LogEntry *)v15);
  return v10;
}

void sub_18E0B5740(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  CoreNavigation::CLP::LogEntry::LogEntry::~LogEntry((CoreNavigation::CLP::LogEntry::LogEntry *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_18E0B5758(uint64_t a1)
{
  uint64_t v2 = a1 + 547;
  *(void *)a1 = &unk_1EDD16178;
  sub_18DEDE7B0((void *)(a1 + 8), "");
  *(void *)a1 = &unk_1EDD13B48;
  *(unsigned char *)(a1 + 33) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = xmmword_18E1FC1B0;
  *(_OWORD *)(a1 + 88) = xmmword_18E1FC1C0;
  *(_OWORD *)(a1 + 104) = xmmword_18E1FC1D0;
  *(int64x2_t *)(a1 + 120) = vdupq_n_s64(0x3EE4F8B588E368F1uLL);
  *(_OWORD *)(a1 + 136) = xmmword_18E1FC1D0;
  *(_OWORD *)(a1 + 152) = xmmword_18E1FC1C0;
  *(_OWORD *)(a1 + 168) = xmmword_18E1FC1D0;
  *(int64x2_t *)(a1 + 184) = vdupq_n_s64(0x3F9B573EAB367A10uLL);
  *(_OWORD *)(a1 + 200) = xmmword_18E1FC1D0;
  *(_OWORD *)(a1 + 216) = xmmword_18E1FC1C0;
  *(_OWORD *)(a1 + 232) = xmmword_18E1FC1D0;
  *(_OWORD *)(a1 + 248) = xmmword_18E1FC1E0;
  *(void *)(a1 + 264) = 0x3FF0000000000000;
  __asm { FMOV            V2.2D, #1.0 }
  *(_OWORD *)(a1 + 272) = _Q2;
  *(_OWORD *)(a1 + 288) = xmmword_18E1FC1F0;
  *(_OWORD *)(a1 + 304) = xmmword_18E1FC200;
  *(_OWORD *)(a1 + 320) = xmmword_18E1FC210;
  *(_OWORD *)(a1 + 336) = xmmword_18E1FC220;
  *(_OWORD *)(a1 + 352) = xmmword_18E1FC230;
  *(_OWORD *)(a1 + 368) = xmmword_18E1FC240;
  *(_OWORD *)(a1 + 384) = xmmword_18E1FC250;
  *(_OWORD *)(a1 + 400) = xmmword_18E1FC260;
  *(void *)(a1 + 416) = 0x3F847AE147AE147BLL;
  *(_DWORD *)(a1 + 424) = 2;
  *(_OWORD *)(a1 + 432) = xmmword_18E1FC270;
  *(_OWORD *)(a1 + 448) = xmmword_18E1FC280;
  *(_OWORD *)(a1 + 464) = xmmword_18E1FC290;
  *(_OWORD *)(a1 + 480) = xmmword_18E1FC2A0;
  *(_OWORD *)(a1 + 496) = xmmword_18E1FC2B0;
  *(_OWORD *)(a1 + 512) = xmmword_18E1FC2C0;
  *(_OWORD *)(a1 + 528) = xmmword_18E1FC2D0;
  *(_WORD *)(a1 + 544) = 257;
  *(unsigned char *)(a1 + 546) = 1;
  *(_DWORD *)uint64_t v2 = 0;
  *(unsigned char *)(a1 + 551) = 1;
  *(_DWORD *)(a1 + 552) = 0;
  *(_OWORD *)(a1 + 560) = xmmword_18E1FC2E0;
  *(_DWORD *)(a1 + 576) = 0x1000000;
  *(unsigned char *)(a1 + 580) = 0;
  *(_DWORD *)(a1 + 584) = 0;
  *(unsigned char *)(a1 + 588) = 0;
  *(void *)(v2 + 42) = 0x101010101010101;
  *(unsigned char *)(a1 + 597) = 0;
  *(void *)(a1 + 603) = 0x101010101010101;
  *(void *)(a1 + 598) = 0x101010101010101;
  *(_DWORD *)(a1 + 612) = 1096810496;
  *(void *)(a1 + 616) = 0x3FE0000000000000;
  *(_OWORD *)(a1 + 624) = xmmword_18E1FC2F0;
  *(_WORD *)(a1 + 640) = 0;
  *(void *)(a1 + 648) = 0x3F847AE147AE147BLL;
  *(_OWORD *)(a1 + 656) = xmmword_18E1FC300;
  *(_OWORD *)(a1 + 672) = xmmword_18E1FC310;
  *(_OWORD *)(a1 + 688) = xmmword_18E1FC320;
  *(_OWORD *)(a1 + 704) = xmmword_18E1FC330;
  *(_OWORD *)(a1 + 720) = xmmword_18E1FC340;
  *(_OWORD *)(a1 + 736) = xmmword_18E1FC350;
  *(_OWORD *)(a1 + 752) = xmmword_18E1FC360;
  *(_OWORD *)(a1 + 768) = xmmword_18E1FC370;
  *(_OWORD *)(a1 + 784) = xmmword_18E1FC380;
  *(_OWORD *)(a1 + 800) = xmmword_18E1FC390;
  *(void *)(a1 + 816) = 0x3DB5FD7FE1796495;
  *(_DWORD *)(a1 + 824) = 2;
  *(void *)(a1 + 832) = 0x3FE0000000000000;
  *(_WORD *)(a1 + 840) = 256;
  *(_OWORD *)(a1 + 848) = xmmword_18E1FC3A0;
  *(_OWORD *)(a1 + 864) = xmmword_18E1FC3B0;
  *(_OWORD *)(a1 + 880) = xmmword_18E1FC3C0;
  *(_OWORD *)(a1 + 896) = xmmword_18E1FC3D0;
  *(_OWORD *)(a1 + 912) = xmmword_18E1FC3E0;
  *(_OWORD *)(a1 + 928) = xmmword_18E1FC3F0;
  *(_OWORD *)(a1 + 944) = xmmword_18E1FC400;
  *(_OWORD *)(a1 + 960) = xmmword_18E1FC410;
  *(void *)(a1 + 976) = 0x3FF0000000000000;
  *(_DWORD *)(a1 + 984) = 350;
  *(_OWORD *)(a1 + 992) = xmmword_18E1FC420;
  *(_OWORD *)(a1 + 1008) = xmmword_18E1FC430;
  *(void *)(a1 + 1024) = 0x3FF0000000000000;
  *(_DWORD *)(a1 + 1032) = 3;
  *(_OWORD *)(a1 + 1040) = xmmword_18E1FC440;
  *(_OWORD *)(a1 + 1056) = xmmword_18E1FC450;
  *(_OWORD *)(a1 + 1072) = xmmword_18E1FC460;
  *(_OWORD *)(a1 + 1088) = _Q2;
  *(_OWORD *)(a1 + 1104) = xmmword_18E1FC470;
  *(_OWORD *)(a1 + 1120) = xmmword_18E1FC480;
  *(_OWORD *)(a1 + 1136) = xmmword_18E1FC490;
  *(_OWORD *)(a1 + 1152) = xmmword_18E1FC4A0;
  *(_OWORD *)(a1 + 1168) = xmmword_18E1FC4B0;
  *(void *)(a1 + 1184) = 0x4018000000000000;
  *(_DWORD *)(a1 + 1192) = 3;
  *(_OWORD *)(a1 + 1200) = xmmword_18E1FC4C0;
  *(_OWORD *)(a1 + 1216) = xmmword_18E1FC4D0;
  *(_OWORD *)(a1 + 1232) = xmmword_18E1FC4E0;
  *(_OWORD *)(a1 + 1248) = xmmword_18E1FC4F0;
  *(_OWORD *)(a1 + 1264) = xmmword_18E1FC4C0;
  *(_DWORD *)(a1 + 1280) = 6;
  *(void *)(a1 + 1288) = 0x4000000000000000;
  *(_DWORD *)(a1 + 1296) = 6;
  *(void *)(a1 + 1304) = 0x4000000000000000;
  *(_DWORD *)(a1 + 1312) = 2;
  *(void *)(a1 + 1320) = 0x4000000000000000;
  *(_OWORD *)(a1 + 1328) = xmmword_18E1FC500;
  *(_OWORD *)(a1 + 1344) = xmmword_18E1FC510;
  *(_OWORD *)(a1 + 1360) = xmmword_18E1FC520;
  *(_OWORD *)(a1 + 1376) = xmmword_18E1FC530;
  __asm { FMOV            V2.2D, #6.0 }
  *(_OWORD *)(a1 + 1392) = _Q2;
  *(_OWORD *)(a1 + 1408) = xmmword_18E1FC540;
  __asm { FMOV            V2.2D, #3.0 }
  *(_OWORD *)(a1 + 1424) = _Q2;
  *(_OWORD *)(a1 + 1440) = _Q2;
  *(_OWORD *)(a1 + 1456) = xmmword_18E1FC550;
  *(_DWORD *)(a1 + 1472) = 2;
  *(void *)(a1 + 1480) = 0x4024000000000000;
  *(int64x2_t *)(a1 + 1488) = vdupq_n_s64(0x3FE0CCCCCCCCCCCDuLL);
  *(_OWORD *)(a1 + 1504) = xmmword_18E1FC560;
  *(_OWORD *)(a1 + 1520) = xmmword_18E1FC570;
  *(_OWORD *)(a1 + 1536) = xmmword_18E1FC580;
  *(int64x2_t *)(a1 + 1552) = vdupq_n_s64(0x4066800000000000uLL);
  *(_OWORD *)(a1 + 1568) = xmmword_18E1FC590;
  *(_OWORD *)(a1 + 1584) = xmmword_18E1FC5A0;
  *(_OWORD *)(a1 + 1600) = xmmword_18E1FC5B0;
  *(_OWORD *)(a1 + 1616) = xmmword_18E1FC5C0;
  *(_OWORD *)(a1 + 1632) = xmmword_18E1FC5D0;
  *(void *)(a1 + 1648) = 0;
  *(_OWORD *)(a1 + 1656) = xmmword_18E200DB0;
  *(_OWORD *)(a1 + 1672) = unk_18E200DC0;
  *(_OWORD *)(a1 + 1688) = xmmword_18E200DB0;
  *(_OWORD *)(a1 + 1704) = unk_18E200DC0;
  *(_OWORD *)(a1 + 1720) = xmmword_18E200DB0;
  *(_OWORD *)(a1 + 1736) = unk_18E200DC0;
  *(_OWORD *)(a1 + 1752) = xmmword_18E200DB0;
  *(_OWORD *)(a1 + 1768) = unk_18E200DC0;
  *(_OWORD *)(a1 + 1784) = xmmword_18E200DB0;
  *(_OWORD *)(a1 + 1800) = unk_18E200DC0;
  *(_OWORD *)(a1 + 1816) = xmmword_18E200DB0;
  *(_OWORD *)(a1 + 1832) = unk_18E200DC0;
  *(_OWORD *)(a1 + 1848) = xmmword_18E200D70;
  *(_OWORD *)(a1 + 1864) = unk_18E200D80;
  *(_OWORD *)(a1 + 1880) = xmmword_18E200D50;
  *(_OWORD *)(a1 + 1896) = unk_18E200D60;
  *(_OWORD *)(a1 + 1912) = xmmword_18E200D70;
  *(_OWORD *)(a1 + 1928) = unk_18E200D80;
  *(_OWORD *)(a1 + 1944) = xmmword_18E200D90;
  *(_OWORD *)(a1 + 1960) = unk_18E200DA0;
  *(_OWORD *)(a1 + 1976) = xmmword_18E200DB0;
  *(_OWORD *)(a1 + 1992) = unk_18E200DC0;
  *(_OWORD *)(a1 + 2008) = xmmword_18E200DB0;
  *(_OWORD *)(a1 + 2024) = unk_18E200DC0;
  *(_OWORD *)(a1 + 2040) = xmmword_18E200DB0;
  *(_OWORD *)(a1 + 2056) = unk_18E200DC0;
  *(_OWORD *)(a1 + 2072) = xmmword_18E200DB0;
  *(_OWORD *)(a1 + 2088) = unk_18E200DC0;
  *(unsigned char *)(a1 + 2104) = 0;
  *(_OWORD *)(a1 + 2112) = xmmword_18E1FC5E0;
  *(_OWORD *)(a1 + 2128) = xmmword_18E1FC5F0;
  *(_OWORD *)(a1 + 2144) = xmmword_18E1FC550;
  *(_OWORD *)(a1 + 2160) = xmmword_18E1FC600;
  *(_OWORD *)(a1 + 2176) = xmmword_18E1FC610;
  *(_WORD *)(a1 + 2192) = 0;
  *(void *)(a1 + 2200) = 0x4034000000000000;
  *(_DWORD *)(a1 + 2208) = 0;
  *(void *)(a1 + 2216) = 0x404E000000000000;
  *(_OWORD *)(a1 + 2224) = xmmword_18E1FC620;
  *(_OWORD *)(a1 + 2240) = xmmword_18E1FC630;
  *(_OWORD *)(a1 + 2256) = xmmword_18E1FC640;
  *(void *)(a1 + 2272) = 0x3FE3333333333333;
  *(_DWORD *)(a1 + 2280) = 1;
  *(int64x2_t *)(a1 + 2288) = vdupq_n_s64(0x3FE3333333333333uLL);
  *(_WORD *)(a1 + 2304) = 0;
  *(void *)(a1 + 2344) = 0;
  *(_OWORD *)(a1 + 2328) = 0u;
  *(_OWORD *)(a1 + 2312) = 0u;
  *(void *)(a1 + 2352) = 0x3FD51EB851EB851FLL;
  *(_OWORD *)(a1 + 2360) = xmmword_18E200DD0;
  *(_OWORD *)(a1 + 2376) = unk_18E200DE0;
  *(_WORD *)(a1 + 2392) = 257;
  *(unsigned char *)(a1 + 2394) = 1;
  *(_OWORD *)(a1 + 2400) = xmmword_18E200DF0;
  *(_OWORD *)(a1 + 2416) = unk_18E200E00;
  *(_OWORD *)(a1 + 2432) = xmmword_18E1FC650;
  *(_OWORD *)(a1 + 2448) = xmmword_18E1FC660;
  *(_OWORD *)(a1 + 2464) = xmmword_18E1FC670;
  __asm { FMOV            V1.2D, #0.5 }
  *(_OWORD *)(a1 + 2480) = _Q1;
  *(int64x2_t *)(a1 + 2496) = vdupq_n_s64(0x3FEE666666666666uLL);
  *(_OWORD *)(a1 + 2512) = xmmword_18E1FC680;
  *(_OWORD *)(a1 + 2528) = xmmword_18E1FC690;
  *(unsigned char *)(a1 + 2544) = 1;
  *(void *)(a1 + 2552) = 0x40BC200000000000;
  *(_WORD *)(a1 + 2560) = 1;
  *(unsigned char *)(a1 + 2562) = 0;
  *(void *)(a1 + 2568) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 2576) = xmmword_18E200F00;
  *(_OWORD *)(a1 + 2640) = xmmword_18E200F40;
  *(_OWORD *)(a1 + 2656) = xmmword_18E200E10;
  *(_OWORD *)(a1 + 2720) = xmmword_18E200E50;
  *(_OWORD *)(a1 + 2704) = unk_18E200E40;
  *(_OWORD *)(a1 + 2624) = unk_18E200F30;
  *(_OWORD *)(a1 + 2608) = xmmword_18E200F20;
  *(_OWORD *)(a1 + 2592) = *(_OWORD *)algn_18E200F10;
  *(_OWORD *)(a1 + 2688) = xmmword_18E200E30;
  *(_OWORD *)(a1 + 2672) = unk_18E200E20;
  *(unsigned char *)(a1 + 2736) = 0;
  *(_OWORD *)(a1 + 2808) = xmmword_18E200EA0;
  *(_OWORD *)(a1 + 2776) = xmmword_18E200E80;
  *(_OWORD *)(a1 + 2792) = unk_18E200E90;
  *(_OWORD *)(a1 + 2744) = xmmword_18E200E60;
  *(_OWORD *)(a1 + 2760) = unk_18E200E70;
  *(_OWORD *)(a1 + 2888) = xmmword_18E200EF0;
  *(_OWORD *)(a1 + 2856) = xmmword_18E200ED0;
  *(_OWORD *)(a1 + 2872) = unk_18E200EE0;
  *(_OWORD *)(a1 + 2824) = xmmword_18E200EB0;
  *(_OWORD *)(a1 + 2840) = unk_18E200EC0;
  *(_OWORD *)(a1 + 2952) = unk_18E200F30;
  *(_OWORD *)(a1 + 2968) = xmmword_18E200F40;
  *(_OWORD *)(a1 + 2920) = *(_OWORD *)algn_18E200F10;
  *(_OWORD *)(a1 + 2936) = xmmword_18E200F20;
  *(_OWORD *)(a1 + 2904) = xmmword_18E200F00;
  *(_OWORD *)(a1 + 3032) = unk_18E200F80;
  *(_OWORD *)(a1 + 3048) = xmmword_18E200F90;
  *(_OWORD *)(a1 + 3000) = unk_18E200F60;
  *(_OWORD *)(a1 + 3016) = xmmword_18E200F70;
  *(_OWORD *)(a1 + 2984) = xmmword_18E200F50;
  *(void *)(a1 + 3064) = 0x3FEE666666666666;
  *(_OWORD *)(a1 + 3072) = xmmword_18E1FC6A0;
  *(_OWORD *)(a1 + 3088) = xmmword_18E1FC6B0;
  *(_OWORD *)(a1 + 3104) = xmmword_18E1FC6C0;
  *(_OWORD *)(a1 + 3120) = xmmword_18E1FC6D0;
  *(_OWORD *)(a1 + 3136) = xmmword_18E1FC6E0;
  *(_OWORD *)(a1 + 3152) = xmmword_18E1FC6F0;
  *(_OWORD *)(a1 + 3168) = xmmword_18E1FC700;
  *(_OWORD *)(a1 + 3184) = xmmword_18E1FC710;
  *(_OWORD *)(a1 + 3200) = xmmword_18E1FC720;
  *(_OWORD *)(a1 + 3216) = xmmword_18E1FC730;
  *(_OWORD *)(a1 + 3232) = xmmword_18E1FC2B0;
  *(_OWORD *)(a1 + 3248) = xmmword_18E1FC740;
  *(_OWORD *)(a1 + 3264) = xmmword_18E1FC750;
  *(_OWORD *)(a1 + 3280) = xmmword_18E1FC760;
  *(_OWORD *)(a1 + 3296) = xmmword_18E1FC770;
  __asm { FMOV            V0.2D, #5.0 }
  *(_OWORD *)(a1 + 3312) = _Q0;
  *(_OWORD *)(a1 + 3328) = xmmword_18E1FC780;
  *(void *)(a1 + 3344) = 0x3FE999999999999ALL;
  *(unsigned char *)(a1 + 3352) = 1;
  *(_OWORD *)(a1 + 3360) = xmmword_18E1FC790;
  *(void *)(a1 + 3376) = 0x3FE0000000000000;
  *(void *)(a1 + 3384) = 0x400000005;
  *(_OWORD *)(a1 + 3392) = xmmword_18E1FC7A0;
  *(_OWORD *)(a1 + 3408) = xmmword_18E1FC7B0;
  *(_OWORD *)(a1 + 3424) = xmmword_18E1FC7C0;
  *(int64x2_t *)(a1 + 3440) = vdupq_n_s64(0x4014880F19EA2B99uLL);
  *(_OWORD *)(a1 + 3456) = xmmword_18E1FC7D0;
  *(_OWORD *)(a1 + 3472) = xmmword_18E1FC7E0;
  *(void *)(a1 + 3488) = 0x4022000000000000;
  *(unsigned char *)(a1 + 3496) = 0;
  *(_OWORD *)(a1 + 3504) = xmmword_18E1FC7F0;
  *(_WORD *)(a1 + 3520) = 257;
  *(void *)(a1 + 3528) = 0x4072C00000000000;
  *(void *)(a1 + 3536) = 0x412E848000000000;
  *(void *)(a1 + 3544) = 2;
  *(unsigned char *)(a1 + 3552) = 1;
  *(void *)(a1 + 3560) = 0x4014000000000000;
  *(void *)(a1 + 3568) = 0x3F847AE147AE147BLL;
  *(_DWORD *)(a1 + 3576) = 5;
  *(unsigned char *)(a1 + 3580) = 1;
  *(_OWORD *)(a1 + 3584) = xmmword_18E1FC800;
  *(void *)(a1 + 3600) = 0x4014000000000000;
  *(void *)(a1 + 3608) = 100;
  *(_OWORD *)(a1 + 3616) = xmmword_18E1FC810;
  *(void *)(a1 + 3632) = 0x3FD3333333333333;
  *(void *)(a1 + 3640) = 3;
  *(unsigned char *)(a1 + 3648) = 0;
  *(_DWORD *)(a1 + 3652) = 0;
  *(unsigned char *)(a1 + 3656) = 0;
  sub_18DEDE7B0((void *)(a1 + 3664), "");
  *(_DWORD *)(a1 + 3688) = 10;
  *(_WORD *)(a1 + 3692) = 0;
  sub_18DEDE7B0((void *)(a1 + 3696), "raven_output.bin");
  *(_WORD *)(a1 + 3720) = 256;
  *(unsigned char *)(a1 + 3722) = 0;
  sub_18DEDE7B0((void *)(a1 + 3728), "raven_debug.txt");
  *(_WORD *)(a1 + 3752) = 0;
  *(unsigned char *)(a1 + 3754) = 0;
  sub_18DEDE7B0((void *)(a1 + 3760), "raven_msr.txt");
  *(unsigned char *)(a1 + 3788) = 1;
  *(_DWORD *)(a1 + 3784) = 16843009;
  *(_WORD *)(a1 + 3789) = 0;
  *(void *)(v2 + 3244) = 0x101010101010101;
  *(unsigned char *)(a1 + 3799) = 0;
  *(_DWORD *)(a1 + 3800) = 16843009;
  *(unsigned char *)(a1 + 3804) = 0;
  *(_DWORD *)(a1 + 3808) = 16843009;
  *(_DWORD *)(a1 + 3805) = 16843009;
  *(unsigned char *)(a1 + 3812) = 0;
  *(unsigned char *)(a1 + 3817) = 1;
  *(_DWORD *)(a1 + 3813) = 16843009;
  *(_WORD *)(a1 + 3818) = 256;
  *(unsigned char *)(a1 + 3820) = 1;
  *(_DWORD *)(a1 + 3824) = 0;
  *(unsigned char *)(a1 + 3828) = 0;
  return a1;
}

void sub_18E0B61E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(char *)(v2 + 3751) < 0) {
    operator delete(*v7);
  }
  if (*(char *)(v2 + 3719) < 0) {
    operator delete(*v6);
  }
  if (*(char *)(v2 + 3687) < 0) {
    operator delete(*v5);
  }
  int8x16_t v9 = *(std::__shared_weak_count **)(v2 + 2328);
  if (v9) {
    sub_18DEE4E18(v9);
  }
  sub_18E00C268((void ***)va);
  *(void *)uint64_t v2 = v4;
  if (*(char *)(v2 + 31) < 0) {
    operator delete(*v3);
  }
  _Unwind_Resume(a1);
}

void *sub_18E0B6264(void *result)
{
  *uint64_t result = &unk_1EDD0A420;
  result[16] = &unk_1EDD17478;
  result[1] = &unk_1EDD17478;
  return result;
}

void *sub_18E0B62C4(void *result)
{
  *uint64_t result = &unk_1EDD17478;
  return result;
}

void sub_18E0B62E4(void *a1)
{
  *a1 = &unk_1EDD0A420;
  a1[16] = &unk_1EDD17478;
  a1[1] = &unk_1EDD17478;
  JUMPOUT(0x192FA6240);
}

double sub_18E0B6354@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 24) = 0x10000000ALL;
  *(void *)a2 = &unk_1EDD17628;
  *(_OWORD *)(a2 + 8) = xmmword_18E200CF0;
  *(void *)(a2 + 32) = a2 + 40;
  if (*(_DWORD *)(a1 + 248)) {
    uint64_t v2 = a1 + 128;
  }
  else {
    uint64_t v2 = a1 + 8;
  }
  *(void *)&double result = sub_18DFE2F24(a2, v2).n128_u64[0];
  return result;
}

void sub_18E0B63AC(void *a1)
{
  *a1 = &unk_1EDD17478;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E0B63DC(uint64_t result)
{
  *(void *)(result + 32) = result + 40;
  return result;
}

void sub_18E0B63E8(uint64_t a1)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  sub_18DEF3CF4(a1, v1);
}

uint64_t sub_18E0B6438(void *a1)
{
  *a1 = &unk_1EDD14798;
  sub_18E0B687C(a1 + 1042);
  a1[1033] = &unk_1EDD0A6A8;
  sub_18E067E60((uint64_t)(a1 + 713));
  a1[330] = &unk_1EDD0A818;
  a1[631] = &unk_1EDD17478;
  a1[618] = &unk_1EDD17478;
  a1[549] = &unk_1EDD17478;
  sub_18E0B6C34((uint64_t)(a1 + 330));

  return sub_18E0268B0((uint64_t)a1);
}

void sub_18E0B6554(void **this)
{
  *this = &unk_1EDD15088;
  if (*((char *)this + 543) < 0) {
    operator delete(this[65]);
  }
  if (*((char *)this + 519) < 0) {
    operator delete(this[62]);
  }

  cnframework::ActiveObjectBase::~ActiveObjectBase((cnframework::ActiveObjectBase *)this);
}

uint64_t sub_18E0B65CC(unsigned char *a1, uint64_t *a2)
{
  if ((*(unsigned int (**)(unsigned char *))(*(void *)a1 + 104))(a1))
  {
    __int16 v28 = 12;
    unsigned __int8 v27 = 3;
    (*(void (**)(void **__return_ptr, unsigned char *))(*(void *)a1 + 16))(__p, a1);
    if (v26 >= 0) {
      int8x16_t v9 = __p;
    }
    else {
      LOBYTE(v9) = __p[0];
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v28, &v27, "Warning: %s configured more than once.", v4, v5, v6, v7, v8, (char)v9);
    if (v26 < 0) {
      operator delete(__p[0]);
    }
  }
  a1[480] = 0;
  uint64_t v10 = *a2;
  if (*a2 && *(unsigned char *)(v10 + 33))
  {
    *((void *)a1 + 61) = v10;
    cnframework::ActiveObjectBase::SetEventQueueDelay((cnframework::ActiveObjectBase *)a1, *(double *)(v10 + 832));
    a1[480] = 1;
    if (cnprint::CNPrinter::GetLogLevel(v11) <= 1)
    {
      __int16 v28 = 12;
      unsigned __int8 v27 = 1;
      (*(void (**)(void **__return_ptr, unsigned char *))(*(void *)a1 + 16))(__p, a1);
      if (v26 >= 0) {
        uint64_t v17 = __p;
      }
      else {
        LOBYTE(v17) = __p[0];
      }
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v28, &v27, "%s configured successfully.", v12, v13, v14, v15, v16, (char)v17);
      if (v26 < 0) {
        operator delete(__p[0]);
      }
    }
    return 0;
  }
  else
  {
    __int16 v28 = 12;
    unsigned __int8 v27 = 4;
    (*(void (**)(void **__return_ptr, unsigned char *))(*(void *)a1 + 16))(__p, a1);
    if (v26 >= 0) {
      uint64_t v24 = __p;
    }
    else {
      LOBYTE(v24) = __p[0];
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v28, &v27, "Error: %s could not be configured.", v19, v20, v21, v22, v23, (char)v24);
    if (v26 < 0) {
      operator delete(__p[0]);
    }
    return 0xFFFFFFFFLL;
  }
}

void sub_18E0B67D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_18E0B67F4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 480);
}

uint64_t sub_18E0B67FC(uint64_t a1)
{
  *(void *)a1 = &unk_1EDD0A818;
  *(void *)(a1 + 2408) = &unk_1EDD17478;
  *(void *)(a1 + 2304) = &unk_1EDD17478;
  *(void *)(a1 + 1752) = &unk_1EDD17478;
  return sub_18E0B6C34(a1);
}

uint64_t *sub_18E0B687C(uint64_t *a1)
{
  a1[1581] = (uint64_t)&unk_1EDD173E8;
  a1[1489] = (uint64_t)&unk_1EDD17328;
  a1[1482] = (uint64_t)&unk_1EDD198D8;
  sub_18E066A94(a1 + 1487);
  a1[1482] = (uint64_t)&unk_1EDD17058;
  a1[1476] = (uint64_t)&unk_1EDD198A8;
  sub_18E066E88(a1 + 1481);
  a1[1476] = (uint64_t)&unk_1EDD17028;
  a1[1427] = (uint64_t)&unk_1EDD174A8;
  a1[1421] = (uint64_t)&unk_1EDD198A8;
  sub_18E066E88(a1 + 1426);
  a1[1421] = (uint64_t)&unk_1EDD17028;
  a1[1329] = (uint64_t)&unk_1EDD17478;
  a1[1280] = (uint64_t)&unk_1EDD174A8;
  a1[1101] = (uint64_t)&unk_1EDD16ED8;
  a1[922] = (uint64_t)&unk_1EDD173E8;
  a1[743] = (uint64_t)&unk_1EDD17328;
  a1[736] = (uint64_t)&unk_1EDD17A18;
  sub_18E066A94(a1 + 741);
  a1[736] = (uint64_t)&unk_1EDD17058;
  a1[730] = (uint64_t)&unk_1EDD179E8;
  sub_18E066E88(a1 + 735);
  a1[730] = (uint64_t)&unk_1EDD17028;
  a1[638] = (uint64_t)&unk_1EDD174A8;
  a1[632] = (uint64_t)&unk_1EDD179E8;
  sub_18E066E88(a1 + 637);
  a1[632] = (uint64_t)&unk_1EDD17028;
  a1[453] = (uint64_t)&unk_1EDD17478;
  a1[361] = (uint64_t)&unk_1EDD174A8;
  a1[8] = (uint64_t)&unk_1EDD16ED8;
  sub_18E067BEC(a1 + 5);
  return a1;
}

uint64_t sub_18E0B6C34(uint64_t a1)
{
  *(void *)a1 = &unk_1EDD0A5C8;
  if (*(char *)(a1 + 1751) < 0) {
    operator delete(*(void **)(a1 + 1728));
  }
  if (*(char *)(a1 + 1727) < 0) {
    operator delete(*(void **)(a1 + 1704));
  }
  uint64_t v3 = (void **)(a1 + 1680);
  sub_18E0694B8(&v3);
  uint64_t v3 = (void **)(a1 + 1656);
  sub_18E0694B8(&v3);
  uint64_t v3 = (void **)(a1 + 1632);
  sub_18E0694B8(&v3);
  *(void *)(a1 + 1424) = &unk_1EDD17478;
  *(void *)(a1 + 872) = &unk_1EDD17478;
  *(void *)(a1 + 768) = &unk_1EDD17478;
  *(void *)(a1 + 664) = &unk_1EDD17478;
  *(void *)(a1 + 112) = &unk_1EDD17478;
  *(void *)(a1 + 8) = &unk_1EDD17478;
  return a1;
}

void sub_18E0B6D8C(void *a1)
{
  *a1 = &unk_1EDD0A818;
  a1[301] = &unk_1EDD17478;
  a1[288] = &unk_1EDD17478;
  a1[219] = &unk_1EDD17478;
  sub_18E0B6C34((uint64_t)a1);

  JUMPOUT(0x192FA6240);
}

double sub_18E0B6E40@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 24) = 0x100000008;
  *(void *)a2 = &unk_1EDD19CC8;
  *(_OWORD *)(a2 + 8) = xmmword_18E1FD760;
  *(void *)(a2 + 32) = a2 + 40;
  if (*(_DWORD *)(a1 + 1540)) {
    uint64_t v2 = a1 + 768;
  }
  else {
    uint64_t v2 = a1 + 8;
  }
  *(void *)&double result = sub_18DFE2F24(a2, v2).n128_u64[0];
  return result;
}

double sub_18E0B6E98@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 24) = 0x100000008;
  *(void *)a2 = &unk_1EDD19CC8;
  *(_OWORD *)(a2 + 8) = xmmword_18E1FD760;
  *(void *)(a2 + 32) = a2 + 40;
  if (*(_DWORD *)(a1 + 1540)) {
    uint64_t v2 = a1 + 1424;
  }
  else {
    uint64_t v2 = a1 + 664;
  }
  *(void *)&double result = sub_18DFE2F24(a2, v2).n128_u64[0];
  return result;
}

__n128 sub_18E0B6EF0@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v21 = 0x800000008;
  uint64_t v19 = &unk_1EDD19DE8;
  long long v20 = xmmword_18E1FD750;
  uint64_t v22 = &v23;
  if (*(_DWORD *)(a1 + 1540)) {
    uint64_t v3 = a1 + 872;
  }
  else {
    uint64_t v3 = a1 + 112;
  }
  uint64_t v16 = 0x800000008;
  uint64_t v14 = &unk_1EDD19DE8;
  long long v15 = xmmword_18E1FD750;
  uint64_t v17 = v18;
  uint64_t v31 = 0x100000008;
  long long v30 = xmmword_18E1FD760;
  uint64_t v29 = &unk_1EDD19CF8;
  uint64_t v32 = &v33;
  uint64_t v26 = 0x100000020;
  long long v25 = xmmword_18E1FD780;
  uint64_t v24 = &unk_1EDD18C78;
  unsigned __int8 v27 = &v28;
  sub_18E01BFEC(v3, (uint64_t)&v29, (uint64_t)&v24, (uint64_t)&v14);
  sub_18DFE2F24((uint64_t)&v19, (uint64_t)&v14);
  int v4 = DWORD1(v20);
  int v5 = v20;
  uint64_t v16 = 0x800000008;
  uint64_t v14 = &unk_1EDD19DE8;
  uint64_t v17 = v18;
  *(void *)&long long v15 = __PAIR64__(v20, DWORD1(v20));
  DWORD2(v15) = v20 * DWORD1(v20);
  HIDWORD(v15) = DWORD1(v20);
  if (DWORD1(v20))
  {
    int v6 = 0;
    int v7 = 0;
    int v8 = HIDWORD(v20);
    int8x16_t v9 = v22;
    do
    {
      int v10 = v6;
      int v11 = v7;
      for (int i = v5; i; --i)
      {
        v18[v11] = v9[v10];
        v11 += v4;
        ++v10;
      }
      ++v7;
      v6 += v8;
    }
    while (v7 != v4);
  }
  *(void *)(a2 + 24) = 0x800000008;
  *(void *)a2 = &unk_1EDD19DE8;
  *(_OWORD *)(a2 + 8) = xmmword_18E1FD750;
  *(void *)(a2 + 32) = a2 + 40;
  sub_18DFE2B44((uint64_t)&v19, (uint64_t)&v14, a2);
  return result;
}

void sub_18E0B710C(_Unwind_Exception *a1)
{
  *uint64_t v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

double sub_18E0B712C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 24) = 0x800000008;
  *(void *)a2 = &unk_1EDD19DE8;
  *(_OWORD *)(a2 + 8) = xmmword_18E1FD750;
  *(void *)(a2 + 32) = a2 + 40;
  if (*(_DWORD *)(a1 + 1540)) {
    uint64_t v2 = a1 + 872;
  }
  else {
    uint64_t v2 = a1 + 112;
  }
  *(void *)&double result = sub_18DFE2F24(a2, v2).n128_u64[0];
  return result;
}

void sub_18E0B7184(uint64_t a1)
{
  sub_18E0B6C34(a1);

  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E0B71BC(uint64_t result)
{
  if (*(unsigned char *)(result + 1088))
  {
    *(void *)(result + 960) = &unk_1EDD17478;
    *(void *)(result + 848) = &unk_1EDD17478;
    *(void *)(result + 736) = &unk_1EDD17478;
    *(void *)(result + 672) = &unk_1EDD17478;
    *(void *)(result + 520) = &unk_1EDD17478;
    *(void *)(result + 408) = &unk_1EDD17478;
    *(void *)(result + 296) = &unk_1EDD17478;
    *(void *)(result + 232) = &unk_1EDD17478;
  }
  return result;
}

void *sub_18E0B72C8(void *result)
{
  *double result = &unk_1EDD0A3A0;
  result[1] = &unk_1EDD17478;
  return result;
}

void sub_18E0B7308(void *a1)
{
  *a1 = &unk_1EDD0A3A0;
  a1[1] = &unk_1EDD17478;
  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E0B7358(void *a1)
{
  uint64_t v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  if (v3 == v2)
  {
    int v4 = a1 + 5;
    uint64_t v3 = (void **)a1[1];
  }
  else
  {
    int v4 = a1 + 5;
    unint64_t v5 = a1[4];
    int v6 = &v2[v5 >> 4];
    int v7 = (char *)*v6 + 2432 * (v5 & 0xF);
    uint64_t v8 = *(uint64_t *)((char *)v2 + (((a1[5] + v5) >> 1) & 0x7FFFFFFFFFFFFFF8))
       + 2432 * ((*((_DWORD *)a1 + 10) + (int)v5) & 0xF);
    if (v7 != (char *)v8)
    {
      do
      {
        (**(void (***)(char *))v7)(v7);
        v7 += 2432;
        if (v7 - (unsigned char *)*v6 == 38912)
        {
          int8x16_t v9 = (char *)v6[1];
          ++v6;
          int v7 = v9;
        }
      }
      while (v7 != (char *)v8);
      uint64_t v2 = (void **)a1[1];
      uint64_t v3 = (void **)a1[2];
    }
  }
  *int v4 = 0;
  unint64_t v10 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v10 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v11 = v10 >> 3;
  if (v11 == 1)
  {
    uint64_t v12 = 8;
  }
  else
  {
    if (v11 != 2) {
      goto LABEL_16;
    }
    uint64_t v12 = 16;
  }
  a1[4] = v12;
LABEL_16:
  while (v2 != v3)
  {
    uint64_t v13 = *v2++;
    operator delete(v13);
  }

  return sub_18DEE1F78((uint64_t)a1);
}

void **sub_18E0B74B8(void **a1)
{
  return a1;
}

void sub_18E0B7500(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_18E011990(a2 + 24);
    sub_18E012A10(a2, *(void **)(a2 + 8));
    JUMPOUT(0x192FA6240);
  }
}

uint64_t sub_18E0B7560(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_18E011990(result);
    JUMPOUT(0x192FA6240);
  }
  return result;
}

void sub_18E0B75B0(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_18E0B75B0(a1, *a2);
    sub_18E0B75B0(a1, a2[1]);
    sub_18E01B724((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

uint64_t sub_18E0B760C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 1696);
  *(void *)(a1 + 1696) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 1688);
  *(void *)(a1 + 1688) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
  }
  uint64_t v4 = *(void *)(a1 + 1680);
  *(void *)(a1 + 1680) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  uint64_t v5 = *(void *)(a1 + 1672);
  *(void *)(a1 + 1672) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 24))(v5);
  }
  uint64_t v6 = *(void *)(a1 + 1664);
  *(void *)(a1 + 1664) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 24))(v6);
  }
  uint64_t v7 = *(void *)(a1 + 1656);
  *(void *)(a1 + 1656) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 24))(v7);
  }
  uint64_t v8 = *(void *)(a1 + 1648);
  *(void *)(a1 + 1648) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 24))(v8);
  }
  uint64_t v9 = *(void *)(a1 + 1640);
  *(void *)(a1 + 1640) = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 24))(v9);
  }
  uint64_t v10 = *(void *)(a1 + 1632);
  *(void *)(a1 + 1632) = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 24))(v10);
  }
  uint64_t v11 = *(void *)(a1 + 1624);
  *(void *)(a1 + 1624) = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 24))(v11);
  }
  uint64_t v12 = *(void *)(a1 + 1616);
  *(void *)(a1 + 1616) = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 24))(v12);
  }
  uint64_t v13 = *(void *)(a1 + 1608);
  *(void *)(a1 + 1608) = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 24))(v13);
  }
  uint64_t v14 = *(void *)(a1 + 1600);
  *(void *)(a1 + 1600) = 0;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 24))(v14);
  }
  uint64_t v15 = *(void *)(a1 + 1592);
  *(void *)(a1 + 1592) = 0;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 24))(v15);
  }
  uint64_t v16 = *(void *)(a1 + 1584);
  *(void *)(a1 + 1584) = 0;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 24))(v16);
  }
  uint64_t v17 = *(void *)(a1 + 1576);
  *(void *)(a1 + 1576) = 0;
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 24))(v17);
  }
  uint64_t v18 = *(void *)(a1 + 1568);
  *(void *)(a1 + 1568) = 0;
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 24))(v18);
  }
  uint64_t v19 = *(void *)(a1 + 1560);
  *(void *)(a1 + 1560) = 0;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 24))(v19);
  }
  if (*(unsigned char *)(a1 + 1536)) {
    *(unsigned char *)(a1 + 1536) = 0;
  }
  if (*(unsigned char *)(a1 + 1168)) {
    *(unsigned char *)(a1 + 1168) = 0;
  }
  if (*(unsigned char *)(a1 + 800)) {
    *(unsigned char *)(a1 + 800) = 0;
  }
  if (*(unsigned char *)(a1 + 680)) {
    *(unsigned char *)(a1 + 680) = 0;
  }
  if (*(unsigned char *)(a1 + 288)) {
    *(unsigned char *)(a1 + 288) = 0;
  }
  if (*(unsigned char *)(a1 + 160)) {
    *(unsigned char *)(a1 + 160) = 0;
  }
  sub_18E011990(a1 + 32);
  return a1;
}

uint64_t sub_18E0B79E0(void *a1)
{
  uint64_t v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  if (v3 == v2)
  {
    uint64_t v4 = a1 + 5;
    uint64_t v3 = (void **)a1[1];
  }
  else
  {
    uint64_t v4 = a1 + 5;
    unint64_t v5 = a1[4];
    uint64_t v6 = &v2[v5 / 0x14];
    unint64_t v7 = (unint64_t)v2[(a1[5] + v5) / 0x14] + 200 * ((a1[5] + v5) % 0x14);
    if ((char *)*v6 + 200 * (v5 % 0x14) != (void *)v7)
    {
      uint64_t v8 = (void (***)(void))((char *)*v6 + 200 * (v5 % 0x14));
      do
      {
        uint64_t v9 = *v8;
        v8 += 25;
        (*v9)();
        if ((char *)v8 - (unsigned char *)*v6 == 4000)
        {
          uint64_t v10 = (void (***)(void))v6[1];
          ++v6;
          uint64_t v8 = v10;
        }
      }
      while (v8 != (void (***)(void))v7);
      uint64_t v2 = (void **)a1[1];
      uint64_t v3 = (void **)a1[2];
    }
  }
  *uint64_t v4 = 0;
  unint64_t v11 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v11 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v12 = v11 >> 3;
  if (v12 == 1)
  {
    uint64_t v13 = 10;
  }
  else
  {
    if (v12 != 2) {
      goto LABEL_17;
    }
    uint64_t v13 = 20;
  }
  a1[4] = v13;
LABEL_17:
  while (v2 != v3)
  {
    uint64_t v14 = *v2++;
    operator delete(v14);
  }

  return sub_18DEE1F78((uint64_t)a1);
}

void *sub_18E0B7B44(void *result)
{
  *uint64_t result = &unk_1EDD0A4C0;
  result[9] = &unk_1EDD17478;
  result[1] = &unk_1EDD17478;
  return result;
}

void sub_18E0B7BA4(void *a1)
{
  *a1 = &unk_1EDD0A4C0;
  a1[9] = &unk_1EDD17478;
  a1[1] = &unk_1EDD17478;
  JUMPOUT(0x192FA6240);
}

double sub_18E0B7C14@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 24) = 0x100000003;
  *(void *)a2 = &unk_1EDD18D98;
  *(_OWORD *)(a2 + 8) = xmmword_18E1F6F60;
  *(void *)(a2 + 32) = a2 + 40;
  if (*(_DWORD *)(a1 + 136)) {
    uint64_t v2 = a1 + 72;
  }
  else {
    uint64_t v2 = a1 + 8;
  }
  *(void *)&double result = sub_18DFE2F24(a2, v2).n128_u64[0];
  return result;
}

uint64_t sub_18E0B7C6C(uint64_t a1)
{
  uint64_t v2 = (char *)(a1 + 4183);
  if (*(char *)(a1 + 4207) < 0) {
    operator delete(*(void **)(a1 + 4184));
  }
  if (*v2 < 0) {
    operator delete(*(void **)(a1 + 4160));
  }
  *(void *)(a1 + 3992) = &unk_1EDD0A4C0;
  *(void *)(a1 + 4064) = &unk_1EDD17478;
  *(void *)(a1 + 4000) = &unk_1EDD17478;
  uint64_t v3 = *(void **)(a1 + 712);
  if (v3)
  {
    *(void *)(a1 + 720) = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_18E0B7D28(void **this)
{
  *this = &unk_1EDD15000;
  if (*((char *)this + 543) < 0) {
    operator delete(this[65]);
  }
  if (*((char *)this + 519) < 0) {
    operator delete(this[62]);
  }

  cnframework::ActiveObjectBase::~ActiveObjectBase((cnframework::ActiveObjectBase *)this);
}

uint64_t sub_18E0B7DA0(unsigned char *a1, uint64_t *a2)
{
  if ((*(unsigned int (**)(unsigned char *))(*(void *)a1 + 104))(a1))
  {
    __int16 v28 = 12;
    unsigned __int8 v27 = 3;
    (*(void (**)(void **__return_ptr, unsigned char *))(*(void *)a1 + 16))(__p, a1);
    if (v26 >= 0) {
      uint64_t v9 = __p;
    }
    else {
      LOBYTE(v9) = __p[0];
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v28, &v27, "Warning: %s configured more than once.", v4, v5, v6, v7, v8, (char)v9);
    if (v26 < 0) {
      operator delete(__p[0]);
    }
  }
  a1[480] = 0;
  uint64_t v10 = *a2;
  if (*a2 && *(unsigned char *)(v10 + 33))
  {
    *((void *)a1 + 61) = v10;
    cnframework::ActiveObjectBase::SetEventQueueDelay((cnframework::ActiveObjectBase *)a1, *(double *)(v10 + 832));
    a1[480] = 1;
    if (cnprint::CNPrinter::GetLogLevel(v11) <= 1)
    {
      __int16 v28 = 12;
      unsigned __int8 v27 = 1;
      (*(void (**)(void **__return_ptr, unsigned char *))(*(void *)a1 + 16))(__p, a1);
      if (v26 >= 0) {
        uint64_t v17 = __p;
      }
      else {
        LOBYTE(v17) = __p[0];
      }
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v28, &v27, "%s configured successfully.", v12, v13, v14, v15, v16, (char)v17);
      if (v26 < 0) {
        operator delete(__p[0]);
      }
    }
    return 0;
  }
  else
  {
    __int16 v28 = 12;
    unsigned __int8 v27 = 4;
    (*(void (**)(void **__return_ptr, unsigned char *))(*(void *)a1 + 16))(__p, a1);
    if (v26 >= 0) {
      uint64_t v24 = __p;
    }
    else {
      LOBYTE(v24) = __p[0];
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v28, &v27, "Error: %s could not be configured.", v19, v20, v21, v22, v23, (char)v24);
    if (v26 < 0) {
      operator delete(__p[0]);
    }
    return 0xFFFFFFFFLL;
  }
}

void sub_18E0B7FA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_18E0B7FC8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 480);
}

uint64_t sub_18E0B7FD0(uint64_t a1)
{
  *(void *)a1 = &unk_1EDD14928;
  return sub_18E0268B0(a1);
}

void sub_18E0B7FF0(void **this)
{
  *this = &unk_1EDD15110;
  if (*((char *)this + 543) < 0) {
    operator delete(this[65]);
  }
  if (*((char *)this + 519) < 0) {
    operator delete(this[62]);
  }

  cnframework::ActiveObjectBase::~ActiveObjectBase((cnframework::ActiveObjectBase *)this);
}

uint64_t sub_18E0B8068(unsigned char *a1, uint64_t *a2)
{
  if ((*(unsigned int (**)(unsigned char *))(*(void *)a1 + 104))(a1))
  {
    __int16 v28 = 12;
    unsigned __int8 v27 = 3;
    (*(void (**)(void **__return_ptr, unsigned char *))(*(void *)a1 + 16))(__p, a1);
    if (v26 >= 0) {
      uint64_t v9 = __p;
    }
    else {
      LOBYTE(v9) = __p[0];
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v28, &v27, "Warning: %s configured more than once.", v4, v5, v6, v7, v8, (char)v9);
    if (v26 < 0) {
      operator delete(__p[0]);
    }
  }
  a1[480] = 0;
  uint64_t v10 = *a2;
  if (*a2 && *(unsigned char *)(v10 + 33))
  {
    *((void *)a1 + 61) = v10;
    cnframework::ActiveObjectBase::SetEventQueueDelay((cnframework::ActiveObjectBase *)a1, *(double *)(v10 + 832));
    a1[480] = 1;
    if (cnprint::CNPrinter::GetLogLevel(v11) <= 1)
    {
      __int16 v28 = 12;
      unsigned __int8 v27 = 1;
      (*(void (**)(void **__return_ptr, unsigned char *))(*(void *)a1 + 16))(__p, a1);
      if (v26 >= 0) {
        uint64_t v17 = __p;
      }
      else {
        LOBYTE(v17) = __p[0];
      }
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v28, &v27, "%s configured successfully.", v12, v13, v14, v15, v16, (char)v17);
      if (v26 < 0) {
        operator delete(__p[0]);
      }
    }
    return 0;
  }
  else
  {
    __int16 v28 = 12;
    unsigned __int8 v27 = 4;
    (*(void (**)(void **__return_ptr, unsigned char *))(*(void *)a1 + 16))(__p, a1);
    if (v26 >= 0) {
      uint64_t v24 = __p;
    }
    else {
      LOBYTE(v24) = __p[0];
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v28, &v27, "Error: %s could not be configured.", v19, v20, v21, v22, v23, (char)v24);
    if (v26 < 0) {
      operator delete(__p[0]);
    }
    return 0xFFFFFFFFLL;
  }
}

void sub_18E0B826C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_18E0B8290(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 480);
}

uint64_t sub_18E0B8298(void *a1)
{
  uint64_t v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  if (v3 == v2)
  {
    uint64_t v4 = a1 + 5;
    uint64_t v3 = (void **)a1[1];
  }
  else
  {
    uint64_t v4 = a1 + 5;
    unint64_t v5 = a1[4];
    uint64_t v6 = &v2[v5 / 0x1E];
    unint64_t v7 = (unint64_t)v2[(a1[5] + v5) / 0x1E] + 136 * ((a1[5] + v5) % 0x1E);
    if ((char *)*v6 + 136 * (v5 % 0x1E) != (void *)v7)
    {
      uint64_t v8 = (void (***)(void))((char *)*v6 + 136 * (v5 % 0x1E));
      do
      {
        uint64_t v9 = *v8;
        v8 += 17;
        (*v9)();
        if ((char *)v8 - (unsigned char *)*v6 == 4080)
        {
          uint64_t v10 = (void (***)(void))v6[1];
          ++v6;
          uint64_t v8 = v10;
        }
      }
      while (v8 != (void (***)(void))v7);
      uint64_t v2 = (void **)a1[1];
      uint64_t v3 = (void **)a1[2];
    }
  }
  *uint64_t v4 = 0;
  unint64_t v11 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v11 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v12 = v11 >> 3;
  if (v12 == 1)
  {
    uint64_t v13 = 15;
  }
  else
  {
    if (v12 != 2) {
      goto LABEL_17;
    }
    uint64_t v13 = 30;
  }
  a1[4] = v13;
LABEL_17:
  while (v2 != v3)
  {
    uint64_t v14 = *v2++;
    operator delete(v14);
  }

  return sub_18DEE1F78((uint64_t)a1);
}

void sub_18E0B83FC(void **this)
{
  uint64_t v2 = (char *)this + 4719;
  *this = &unk_1EDD15B90;
  if (*((char *)this + 4743) < 0) {
    operator delete(this[590]);
  }
  if (*v2 < 0) {
    operator delete(this[587]);
  }
  this[566] = &unk_1EDD0A4C0;
  this[575] = &unk_1EDD17478;
  this[567] = &unk_1EDD17478;
  uint64_t v3 = this[156];
  if (v3)
  {
    this[157] = v3;
    operator delete(v3);
  }
  if (*((char *)this + 535) < 0) {
    operator delete(this[64]);
  }
  if (*((char *)this + 511) < 0) {
    operator delete(this[61]);
  }

  cnframework::ActiveObjectBase::~ActiveObjectBase((cnframework::ActiveObjectBase *)this);
}

void sub_18E0B8510(uint64_t a1)
{
  *(void *)a1 = &unk_1EDD14A98;
  sub_18DEE2DB8((void *)(a1 + 4168));
  if (*(unsigned char *)(a1 + 1528)) {
    *(unsigned char *)(a1 + 1528) = 0;
  }
  if (*(unsigned char *)(a1 + 1376)) {
    *(unsigned char *)(a1 + 1376) = 0;
  }
  if (*(unsigned char *)(a1 + 1352)) {
    *(unsigned char *)(a1 + 1352) = 0;
  }
  if (*(unsigned char *)(a1 + 1064)) {
    *(unsigned char *)(a1 + 1064) = 0;
  }
  if (*(unsigned char *)(a1 + 904)) {
    *(unsigned char *)(a1 + 904) = 0;
  }
  if (*(unsigned char *)(a1 + 696)) {
    *(unsigned char *)(a1 + 696) = 0;
  }

  cnframework::ActiveObjectBase::~ActiveObjectBase((cnframework::ActiveObjectBase *)a1);
}

void sub_18E0B85B4(cnframework::ActiveObjectBase *a1)
{
  *(void *)a1 = &unk_1EDD15260;
  sub_18E0B8878((void *)a1 + 1044);
  sub_18E0B79E0((void *)a1 + 1037);
  *((void *)a1 + 1026) = &unk_1EDD0A3A0;
  *((void *)a1 + 1027) = &unk_1EDD17478;
  *((void *)a1 + 1018) = &unk_1EDD17478;
  *((void *)a1 + 1010) = &unk_1EDD17478;
  *((void *)a1 + 1002) = &unk_1EDD17478;
  sub_18DFFF978((void *)a1 + 996);
  sub_18DFFF978((void *)a1 + 990);
  sub_18E0B7358((void *)a1 + 984);
  sub_18E0B7358((void *)a1 + 978);
  sub_18DFFF978((void *)a1 + 972);
  sub_18DFFF978((void *)a1 + 966);
  sub_18DFFF978((void *)a1 + 863);
  *((void *)a1 + 522) = &unk_1EDD0B168;
  *((void *)a1 + 843) = &unk_1EDD0A858;
  *((void *)a1 + 521) = &unk_1EDD0A858;
  *((void *)a1 + 180) = &unk_1EDD0B168;
  *((void *)a1 + 501) = &unk_1EDD0A858;
  *((void *)a1 + 131) = &unk_1EDD17478;
  *((void *)a1 + 113) = &unk_1EDD17478;
  *((void *)a1 + 99) = &unk_1EDD17478;
  *((void *)a1 + 89) = &unk_1EDD17478;
  *((void *)a1 + 75) = &unk_1EDD17478;
  sub_18DFFF978((void *)a1 + 62);

  cnframework::ActiveObjectBase::~ActiveObjectBase(a1);
}

uint64_t sub_18E0B8878(void *a1)
{
  uint64_t v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  a1[5] = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 64;
  }
  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 128;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    unint64_t v7 = *v2++;
    operator delete(v7);
  }

  return sub_18DEE1F78((uint64_t)a1);
}

void sub_18E0B8920(uint64_t a1)
{
  *(void *)a1 = &unk_1EDD15500;
  sub_18E0B8C6C((void *)(a1 + 9888));
  *(void *)(a1 + 9720) = &unk_1EDD17478;
  *(void *)(a1 + 9656) = &unk_1EDD17478;
  *(void *)(a1 + 9592) = &unk_1EDD17478;
  *(void *)(a1 + 9472) = &unk_1EDD17478;
  *(void *)(a1 + 9360) = &unk_1EDD17478;
  *(void *)(a1 + 9248) = &unk_1EDD17478;
  *(void *)(a1 + 9184) = &unk_1EDD17478;
  *(void *)(a1 + 9032) = &unk_1EDD17478;
  *(void *)(a1 + 8920) = &unk_1EDD17478;
  *(void *)(a1 + 8808) = &unk_1EDD17478;
  *(void *)(a1 + 8744) = &unk_1EDD17478;
  *(void *)(a1 + 8592) = &unk_1EDD17478;
  *(void *)(a1 + 8480) = &unk_1EDD17478;
  *(void *)(a1 + 8368) = &unk_1EDD17478;
  *(void *)(a1 + 8304) = &unk_1EDD17478;
  *(void *)(a1 + 8152) = &unk_1EDD17478;
  *(void *)(a1 + 8040) = &unk_1EDD17478;
  *(void *)(a1 + 7928) = &unk_1EDD17478;
  *(void *)(a1 + 7864) = &unk_1EDD17478;
  sub_18E0B71BC(a1 + 6736);
  if (*(unsigned char *)(a1 + 6728)) {
    raven::VLLocalizationEvent::~VLLocalizationEvent((raven::VLLocalizationEvent *)(a1 + 5624));
  }
  *(void *)(a1 + 632) = &unk_1EDD17478;

  cnframework::ActiveObjectBase::~ActiveObjectBase((cnframework::ActiveObjectBase *)a1);
}

uint64_t sub_18E0B8C6C(void *a1)
{
  uint64_t v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  if (v3 == v2)
  {
    unint64_t v4 = a1 + 5;
    uint64_t v3 = (void **)a1[1];
  }
  else
  {
    unint64_t v4 = a1 + 5;
    unint64_t v5 = a1[4];
    uint64_t v6 = &v2[v5 >> 4];
    unint64_t v7 = (char *)*v6 + 1088 * (v5 & 0xF);
    uint64_t v8 = *(uint64_t *)((char *)v2 + (((a1[5] + v5) >> 1) & 0x7FFFFFFFFFFFFFF8))
       + 1088 * ((*((_DWORD *)a1 + 10) + (int)v5) & 0xF);
    if (v7 != (char *)v8)
    {
      do
      {
        sub_18E0B8DAC(v7);
        v7 += 1088;
        if (v7 - (unsigned char *)*v6 == 17408)
        {
          uint64_t v9 = (char *)v6[1];
          ++v6;
          unint64_t v7 = v9;
        }
      }
      while (v7 != (char *)v8);
      uint64_t v2 = (void **)a1[1];
      uint64_t v3 = (void **)a1[2];
    }
  }
  *unint64_t v4 = 0;
  unint64_t v10 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v10 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v11 = v10 >> 3;
  if (v11 == 1)
  {
    uint64_t v12 = 8;
  }
  else
  {
    if (v11 != 2) {
      goto LABEL_16;
    }
    uint64_t v12 = 16;
  }
  a1[4] = v12;
LABEL_16:
  while (v2 != v3)
  {
    uint64_t v13 = *v2++;
    operator delete(v13);
  }

  return sub_18DEE1F78((uint64_t)a1);
}

void *sub_18E0B8DAC(void *result)
{
  result[120] = &unk_1EDD17478;
  result[106] = &unk_1EDD17478;
  result[92] = &unk_1EDD17478;
  result[84] = &unk_1EDD17478;
  result[65] = &unk_1EDD17478;
  result[51] = &unk_1EDD17478;
  result[37] = &unk_1EDD17478;
  result[29] = &unk_1EDD17478;
  return result;
}

void sub_18E0B8EB0(cnframework::ActiveObjectBase *this)
{
  *(void *)this = &unk_1EDD15D20;
  *((void *)this + 178) = &unk_1EDD0A420;
  *((void *)this + 194) = &unk_1EDD17478;
  *((void *)this + 179) = &unk_1EDD17478;
  if (*((unsigned char *)this + 1064))
  {
    *((void *)this + 104) = &unk_1EDD140E8;
    uint64_t v2 = (void *)*((void *)this + 130);
    if (v2)
    {
      *((void *)this + 131) = v2;
      operator delete(v2);
    }
  }

  cnframework::ActiveObjectBase::~ActiveObjectBase(this);
}

char *sub_18E0B8F98(uint64_t a1, long long *a2, long long *a3, char *__dst)
{
  unint64_t v4 = __dst;
  unint64_t v11 = __dst;
  uint64_t v12 = __dst;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        sub_18DEDE668(v4, *(void **)v6, *((void *)v6 + 1));
        unint64_t v4 = v12;
      }
      else
      {
        long long v7 = *v6;
        *((void *)v4 + 2) = *((void *)v6 + 2);
        *(_OWORD *)unint64_t v4 = v7;
      }
      uint64_t v6 = (long long *)((char *)v6 + 24);
      v4 += 24;
      uint64_t v12 = v4;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  sub_18E0B9058((uint64_t)v9);
  return v4;
}

void sub_18E0B9044(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_18E0B9058(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = **(void **)(a1 + 8);
    for (uint64_t i = **(void **)(a1 + 16); i != v3; i -= 24)
    {
      if (*(char *)(i - 1) < 0) {
        operator delete(*(void **)(i - 24));
      }
    }
  }
  return a1;
}

std::string *sub_18E0B90B8(std::string *__str, std::string *a2, std::string *this)
{
  if (__str != a2)
  {
    unint64_t v5 = __str;
    do
      std::string::operator=(this++, v5++);
    while (v5 != a2);
  }
  return this;
}

uint64_t sub_18E0B9110(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8.i64[0] = *(void *)(a3 + 8);
  v8.i64[1] = *(void *)(a4 + 8);
  if (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(v8, (int32x4_t)xmmword_18E200D00))))) {
    return 0xFFFFFFFFLL;
  }
  v100[1] = 0;
  v100[2] = 0;
  v100[0] = &unk_1EDD14240;
  int64x2_t v101 = vdupq_n_s64(0x7FF8000000000000uLL);
  double v102 = NAN;
  if ((*(unsigned int (**)(void, uint64_t, void *))(*(void *)*a5 + 48))(*a5, a1, v100)) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v14 = *(double **)(a3 + 32);
  double v15 = *v14;
  double v16 = v14[1];
  double v17 = v14[2];
  double v18 = v14[3];
  double v19 = sqrt(v16 * v16 + v15 * v15 + v17 * v17 + v18 * v18);
  if (fabs(v19) <= 0.000000015) {
    return 0xFFFFFFFFLL;
  }
  double v20 = v15 / v19;
  double v21 = v16 / v19;
  double v22 = v17 / v19;
  double v23 = v18 / v19;
  double v24 = sqrt(v21 * v21 + v20 * v20 + v22 * v22 + v23 * v23);
  if (fabs(v24) >= 2.22044605e-16)
  {
    double v26 = v20 / v24;
    double v27 = v21 / v24;
    double v28 = v22 / v24;
    double v25 = v23 / v24;
  }
  else
  {
    double v25 = 1.0;
    double v26 = 0.0;
    double v27 = 0.0;
    double v28 = 0.0;
  }
  *(double *)uint64_t v99 = v26;
  *(double *)&v99[1] = v27;
  *(double *)&void v99[2] = v28;
  *(double *)&v99[3] = v25;
  uint64_t v96 = 0x100000004;
  long long v95 = xmmword_18E1F6F80;
  uint64_t v94 = &unk_1EDD19458;
  uint64_t v97 = v98;
  *(double *)int v98 = v20;
  *(double *)&v98[1] = v21;
  *(double *)&double v98[2] = v22;
  *(double *)&v98[3] = v23;
  long long v30 = *(double **)(a4 + 32);
  double v31 = *(double *)v101.i64 - *v30;
  double v32 = *(double *)&v101.i64[1] - v30[1];
  double v33 = v102 - v30[2];
  cnrotation::CNRotation::RotationDerivativeQuaternion((cnrotation::CNRotation *)v99, v31, v32, v33, (uint64_t)v93);
  uint64_t v90 = 0x100000004;
  long long v89 = xmmword_18E1F6F80;
  uint64_t v88 = &unk_1EDD19458;
  uint64_t v91 = v92;
  sub_18DFE2F24(a6, (uint64_t)&v88);
  uint64_t v34 = *(void **)(a6 + 32);
  *uint64_t v34 = v93[0];
  v34[1] = v93[1];
  v34[2] = v93[2];
  v34[3] = v93[3];
  uint64_t v90 = 0x400000004;
  long long v89 = xmmword_18E1F6F70;
  uint64_t v88 = &unk_1EDD195A8;
  uint64_t v91 = v92;
  v92[0] = 0;
  v92[5] = 0;
  *(double *)&v92[8] = -v32;
  *(double *)&v92[9] = v31;
  *(double *)&v92[1] = -v33;
  *(double *)&v92[2] = v32;
  v92[10] = 0;
  *(double *)&v92[13] = v32;
  *(double *)&v92[14] = v33;
  *(double *)&v92[4] = v33;
  *(double *)&v92[3] = -v31;
  *(double *)&v92[6] = -v31;
  *(double *)&v92[7] = -v32;
  *(double *)&v92[12] = v31;
  *(double *)&v92[11] = -v33;
  v92[15] = 0;
  uint64_t v85 = 0x400000004;
  char v83 = &unk_1EDD195A8;
  char v86 = &v87;
  long long v84 = xmmword_18E1F6F70;
  sub_18DFE2CC8((uint64_t)&v83, 0.0);
  int v35 = HIDWORD(v84);
  uint64_t v36 = v86;
  v86[3 * HIDWORD(v84)] = 0x3FF0000000000000;
  v36[(2 * v35) | 1] = 0x3FF0000000000000;
  v36[v35 + 2] = 0xBFF0000000000000;
  v36[3] = 0xBFF0000000000000;
  uint64_t v80 = 0x400000004;
  uint64_t v78 = &unk_1EDD195A8;
  uint64_t v81 = &v82;
  long long v79 = xmmword_18E1F6F70;
  sub_18DFE2CC8((uint64_t)&v78, 0.0);
  int v37 = HIDWORD(v79);
  uint64_t v38 = v81;
  v81[2 * SHIDWORD(v79)] = 0xBFF0000000000000;
  v38[3 * v37 + 1] = 0x3FF0000000000000;
  v38[2] = 0x3FF0000000000000;
  v38[v37 + 3] = 0xBFF0000000000000;
  uint64_t v75 = 0x400000004;
  int v73 = &unk_1EDD195A8;
  uint64_t v76 = &v77;
  long long v74 = xmmword_18E1F6F70;
  sub_18DFE2CC8((uint64_t)&v73, 0.0);
  int v39 = HIDWORD(v74);
  uint64_t v40 = v76;
  v76[SHIDWORD(v74)] = 0x3FF0000000000000;
  v40[1] = 0xBFF0000000000000;
  v40[3 * v39 + 2] = 0x3FF0000000000000;
  v40[2 * v39 + 3] = 0xBFF0000000000000;
  uint64_t v70 = 0x400000004;
  *(void *)&v41.f64[1] = 0x400000010;
  long long v69 = xmmword_18E1F6F70;
  uint64_t v68 = &unk_1EDD195A8;
  char v71 = v72;
  v41.f64[0] = 0.5;
  sub_18DFE3240((uint64_t)&v88, (uint64_t)&v68, v41);
  sub_18DFE2F24(a7, (uint64_t)&v68);
  uint64_t v55 = 0x100000004;
  long long v54 = xmmword_18E1F6F80;
  uint64_t v53 = &unk_1EDD19458;
  uint64_t v56 = &v57;
  sub_18DFE2B44((uint64_t)&v83, (uint64_t)&v94, (uint64_t)&v53);
  uint64_t v50 = 0x100000004;
  uint64_t v48 = &unk_1EDD19458;
  long long v49 = xmmword_18E1F6F80;
  char v51 = &v52;
  sub_18DFE2B44((uint64_t)&v78, (uint64_t)&v94, (uint64_t)&v48);
  uint64_t v60 = 0x200000004;
  long long v59 = xmmword_18E200B60;
  uint64_t v58 = &unk_1EDD194E8;
  long long v61 = &v62;
  sub_18E064994((uint64_t)&v53, (uint64_t)&v48, (uint64_t)&v58);
  uint64_t v45 = 0x100000004;
  uint64_t v43 = &unk_1EDD19458;
  long long v44 = xmmword_18E1F6F80;
  uint64_t v46 = &v47;
  sub_18DFE2B44((uint64_t)&v73, (uint64_t)&v94, (uint64_t)&v43);
  uint64_t v65 = 0x300000004;
  long long v64 = xmmword_18E1F6F90;
  uint64_t v63 = &unk_1EDD19578;
  uint64_t v66 = &v67;
  sub_18E064994((uint64_t)&v58, (uint64_t)&v43, (uint64_t)&v63);
  uint64_t v70 = 0x300000004;
  *(void *)&v42.f64[1] = 0x40000000CLL;
  long long v69 = xmmword_18E1F6F90;
  uint64_t v68 = &unk_1EDD19578;
  char v71 = v72;
  v42.f64[0] = -0.5;
  sub_18DFE3240((uint64_t)&v63, (uint64_t)&v68, v42);
  sub_18DFE2F24(a8, (uint64_t)&v68);
  return 0;
}

uint64_t sub_18E0B9784@<X0>(int a1@<W0>, int a2@<W1>, uint64_t a3@<X8>)
{
  if (a1 < 0) {
    __assert_rtn("Zeros", "cnmatrix.h", 3098, "nr >= 0");
  }
  if (a2 < 0) {
    __assert_rtn("Zeros", "cnmatrix.h", 3099, "nc >= 0");
  }
  *(void *)(a3 + 24) = 0x400000004;
  *(void *)a3 = &unk_1EDD195A8;
  *(void *)(a3 + 32) = a3 + 40;
  *(_DWORD *)(a3 + 8) = a1;
  *(_DWORD *)(a3 + 12) = a2;
  *(_DWORD *)(a3 + 16) = a2 * a1;
  *(_DWORD *)(a3 + 20) = a1;

  return sub_18DFE2CC8(a3, 0.0);
}

void sub_18E0B9830(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    unint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 256;
        sub_18E0B98B4(v4);
      }
      while ((void *)v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_18E0B98B4(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 224);
  if (v2)
  {
    *(void *)(a1 + 232) = v2;
    operator delete(v2);
  }
  if (*(unsigned char *)(a1 + 48))
  {
    uint64_t v3 = *(void **)(a1 + 24);
    if (v3)
    {
      *(void *)(a1 + 32) = v3;
      operator delete(v3);
    }
  }
}

void sub_18E0B9914(void ***a1)
{
  uint64_t v2 = (uint64_t *)*a1;
  if (*v2)
  {
    sub_18E0B9968((uint64_t)v2, *v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

uint64_t sub_18E0B9968(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  for (uint64_t i = *(void *)(result + 8); i != a2; i -= 200)
  {
    double result = *(void *)(i - 16);
    *(void *)(i - 16) = 0;
    if (result) {
      double result = MEMORY[0x192FA6240](result, 0x1000C4041240993);
    }
  }
  *(void *)(v3 + 8) = a2;
  return result;
}

uint64_t sub_18E0B99D0(uint64_t a1)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 280)) {
    return 1;
  }
  if (!*(unsigned char *)(a1 + 201)) {
    return 0;
  }
  if (!*(unsigned char *)(a1 + 202)) {
    return 0;
  }
  long long v55 = 0uLL;
  uint64_t v56 = 0;
  double v3 = *(double *)(a1 + 208);
  double v53 = v3;
  long long v21 = *(_OWORD *)(a1 + 216);
  long long v54 = v21;
  if (cnnavigation::LLAToECEF(&v53, 1, (double *)&v55, 0, (uint64_t)v40)) {
    return 0;
  }
  *(_OWORD *)(a1 + 288) = v55;
  *(void *)(a1 + 304) = v56;
  uint64_t v49 = 0x300000003;
  long long v48 = xmmword_18E1F0010;
  uint64_t v47 = &unk_1EDD18EE8;
  uint64_t v50 = v51;
  uint64_t v4 = *(void *)(a1 + 240);
  uint64_t v5 = *(void *)(a1 + 248);
  uint64_t v6 = *(void *)(a1 + 256);
  v51[0] = *(void *)(a1 + 232);
  v51[1] = v4;
  v51[2] = v5;
  v51[3] = v4;
  long long v7 = *(_OWORD *)(a1 + 264);
  v51[4] = v6;
  v51[5] = v7;
  v51[6] = v5;
  long long v52 = v7;
  uint64_t v44 = 0x300000003;
  long long v43 = xmmword_18E1F0010;
  float64x2_t v42 = &unk_1EDD18EE8;
  uint64_t v45 = &v46;
  sub_18E07A858((uint64_t)v40, v3, *(double *)&v21);
  if (v40[8]) {
    sub_18DFE2F24((uint64_t)&v42, (uint64_t)&v41);
  }
  uint64_t v32 = 0x300000003;
  long long v30 = &unk_1EDD18EE8;
  long long v31 = xmmword_18E1F0010;
  double v33 = &v34;
  sub_18DFE2B44((uint64_t)&v42, (uint64_t)&v47, (uint64_t)&v30);
  int v8 = DWORD1(v43);
  int v9 = v43;
  uint64_t v27 = 0x300000003;
  double v22 = &unk_1EDD18EE8;
  double v28 = v29;
  int v23 = DWORD1(v43);
  int v24 = v43;
  int v25 = v43 * DWORD1(v43);
  int v26 = DWORD1(v43);
  if (DWORD1(v43))
  {
    int v10 = 0;
    int v11 = 0;
    int v12 = HIDWORD(v43);
    uint64_t v13 = v45;
    do
    {
      int v14 = v10;
      int v15 = v11;
      for (int i = v9; i; --i)
      {
        v29[v15] = v13[v14];
        v15 += v8;
        ++v14;
      }
      ++v11;
      v10 += v12;
    }
    while (v11 != v8);
  }
  uint64_t v37 = 0x300000003;
  long long v36 = xmmword_18E1F0010;
  int v35 = &unk_1EDD18EE8;
  uint64_t v38 = &v39;
  sub_18DFE2B44((uint64_t)&v30, (uint64_t)&v22, (uint64_t)&v35);
  double v17 = v38;
  *(void *)(a1 + 312) = *v38;
  uint64_t v18 = SHIDWORD(v36);
  double v19 = &v17[SHIDWORD(v36)];
  *(void *)(a1 + 320) = *v19;
  *(void *)(a1 + 328) = v17[2 * v18];
  *(void *)(a1 + 336) = v19[1];
  double v20 = &v17[2 * (int)v18];
  *(void *)(a1 + 344) = v20[1];
  *(void *)(a1 + 352) = v20[2];
  uint64_t result = 1;
  *(unsigned char *)(a1 + 280) = 1;
  return result;
}

BOOL sub_18E0B9CE0(uint64_t a1)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  int v2 = *(unsigned __int8 *)(a1 + 201);
  if (*(unsigned char *)(a1 + 201))
  {
    int v3 = *(unsigned __int8 *)(a1 + 202);
    if (*(unsigned char *)(a1 + 202)) {
      return 1;
    }
    if (!*(unsigned char *)(a1 + 280)) {
      return v3 != 0;
    }
  }
  else if (!*(unsigned char *)(a1 + 280))
  {
    return 0;
  }
  float64x2_t v57 = *(float64x2_t *)(a1 + 288);
  uint64_t v58 = *(void *)(a1 + 304);
  double v55 = 0.0;
  long long v56 = 0uLL;
  if (cnnavigation::ECEFToLLA(&v57, 1, &v55, 0, (uint64_t)v42))
  {
    if (v2)
    {
      int v3 = *(unsigned __int8 *)(a1 + 202);
      return v3 != 0;
    }
    return 0;
  }
  double v5 = v55;
  *(double *)(a1 + 208) = v55;
  double v6 = *(double *)&v56;
  *(_OWORD *)(a1 + 216) = v56;
  uint64_t v51 = 0x300000003;
  long long v50 = xmmword_18E1F0010;
  uint64_t v49 = &unk_1EDD18EE8;
  long long v52 = v53;
  uint64_t v7 = *(void *)(a1 + 320);
  uint64_t v8 = *(void *)(a1 + 328);
  uint64_t v9 = *(void *)(a1 + 336);
  v53[0] = *(void *)(a1 + 312);
  v53[1] = v7;
  v53[2] = v8;
  v53[3] = v7;
  long long v10 = *(_OWORD *)(a1 + 344);
  v53[4] = v9;
  v53[5] = v10;
  v53[6] = v8;
  long long v54 = v10;
  uint64_t v46 = 0x300000003;
  long long v45 = xmmword_18E1F0010;
  uint64_t v44 = &unk_1EDD18EE8;
  uint64_t v47 = &v48;
  sub_18DFFDBB4((uint64_t)v42, v5, v6);
  if (v42[8]) {
    sub_18DFE2F24((uint64_t)&v44, (uint64_t)&v43);
  }
  uint64_t v34 = 0x300000003;
  uint64_t v32 = &unk_1EDD18EE8;
  long long v33 = xmmword_18E1F0010;
  int v35 = &v36;
  sub_18DFE2B44((uint64_t)&v44, (uint64_t)&v49, (uint64_t)&v32);
  int v11 = DWORD1(v45);
  int v12 = v45;
  uint64_t v29 = 0x300000003;
  int v24 = &unk_1EDD18EE8;
  long long v30 = v31;
  int v25 = DWORD1(v45);
  int v26 = v45;
  int v27 = v45 * DWORD1(v45);
  int v28 = DWORD1(v45);
  if (DWORD1(v45))
  {
    int v13 = 0;
    int v14 = 0;
    int v15 = HIDWORD(v45);
    double v16 = v47;
    do
    {
      int v17 = v13;
      int v18 = v14;
      for (int i = v12; i; --i)
      {
        v31[v18] = v16[v17];
        v18 += v11;
        ++v17;
      }
      ++v14;
      v13 += v15;
    }
    while (v14 != v11);
  }
  uint64_t v39 = 0x300000003;
  long long v38 = xmmword_18E1F0010;
  uint64_t v37 = &unk_1EDD18EE8;
  uint64_t v40 = &v41;
  sub_18DFE2B44((uint64_t)&v32, (uint64_t)&v24, (uint64_t)&v37);
  double v20 = v40;
  *(void *)(a1 + 232) = *v40;
  uint64_t v21 = SHIDWORD(v38);
  double v22 = &v20[SHIDWORD(v38)];
  *(void *)(a1 + 240) = *v22;
  *(void *)(a1 + 248) = v20[2 * v21];
  *(void *)(a1 + 256) = v22[1];
  int v23 = &v20[2 * (int)v21];
  *(void *)(a1 + 264) = v23[1];
  *(void *)(a1 + 272) = v23[2];
  *(_WORD *)(a1 + 201) = 257;
  return 1;
}

void *sub_18E0BA000(void *a1, uint64_t a2)
{
  v4[4] = *MEMORY[0x1E4F143B8];
  sub_18DEE5230((uint64_t)v4, a2);
  sub_18E0BBA94(v4, a1);
  sub_18DEE52C8(v4);
  return a1;
}

void sub_18E0BA078()
{
}

void *sub_18E0BA08C()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EDD1DE40;
  return result;
}

void sub_18E0BA0C4(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1DE40;
}

void sub_18E0BA0EC(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  sub_18E0BA6B4((uint64_t)v32, this, (uint64_t)this, a4, a5, a6, a7, a8);
  sub_18E0BAFF8((void *)(v8 + 18080), (uint64_t)v32);
  unint64_t v9 = *(void *)(v8 + 18120);
  if (v9 >= *(unsigned int *)(*(void *)(v8 + 488) + 984))
  {
    sub_18E0BB424(v8);
  }
  else if (v9)
  {
    while (1)
    {
      unint64_t v10 = *(void *)(v8 + 18112);
      uint64_t v11 = *(void *)(*(void *)(v8 + 18088) + 8 * (v10 / 0x1A));
      long long v54 = &unk_1EDD14240;
      if (!*(_DWORD *)(v8 + 504)) {
        return;
      }
      unint64_t v12 = v10 % 0x1A;
      uint64_t v13 = v11 + 152 * (v10 % 0x1A);
      uint64_t v14 = v8 + 48 * *(unsigned int *)(v8 + 540);
      uint64_t v15 = v14 + 544;
      uint64_t v16 = *(void *)(v14 + 584);
      long long v17 = *(_OWORD *)(v15 + 24);
      long long v55 = *(_OWORD *)(v15 + 8);
      long long v56 = v17;
      uint64_t v57 = v16;
      uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 16))(v13);
      v20.n128_f64[0] = v19;
      if ((void)v55
        || (double v21 = *((double *)&v55 + 1), (*((void *)&v55 + 1) & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000))
      {
        if (v18) {
          BOOL v22 = 1;
        }
        else {
          BOOL v22 = (*(void *)&v19 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
        }
        if (v22 && (void)v55 != v18)
        {
          if ((uint64_t)v55 < v18) {
            return;
          }
          goto LABEL_16;
        }
        double v21 = *((double *)&v55 + 1);
      }
      if (v21 < v19) {
        return;
      }
LABEL_16:
      uint64_t v50 = 0;
      uint64_t v51 = 0;
      uint64_t v50 = (*(uint64_t (**)(unint64_t, __n128))(*(void *)v13 + 16))(v11 + 152 * v12, v20);
      uint64_t v51 = v23;
      uint64_t v24 = v11 + 152 * v12;
      float64x2_t v52 = *(float64x2_t *)(v24 + 104);
      double v53 = *(double *)(v24 + 120);
      if (!cnestimation::RotationStabilizedAccelerationEstimator::AddAcceleration(v8 + 17344, (uint64_t)&v50, v53, v25))
      {
        if (*(unsigned char *)(v8 + 17345))
        {
          uint64_t v26 = *(void *)(v8 + 17360);
          uint64_t v27 = *(void *)(v8 + 17368);
          uint64_t v28 = *(void *)(v8 + 17376);
          uint64_t v29 = *(void *)(v8 + 17416);
          double v30 = *(double *)(v8 + 17440);
          long long v36 = 0u;
          long long v37 = 0u;
          long long v38 = 0u;
          long long v39 = 0u;
          uint64_t v40 = 0;
          long long v33 = &unk_1EDD14BF0;
          uint64_t v34 = v26;
          uint64_t v35 = v27;
          uint64_t v41 = 0x7FF8000000000000;
          float64x2_t v42 = *(float64x2_t *)(v8 + 17424);
          float64x2_t v44 = vsubq_f64(v52, v42);
          double v43 = v30;
          double v45 = v53 - v30;
          uint64_t v46 = v28;
          long long v47 = *(_OWORD *)(v8 + 17384);
          long long v48 = *(_OWORD *)(v8 + 17400);
          uint64_t v49 = v29;
          long long v31 = operator new(0x60uLL);
          v31[1] = 0;
          v31[2] = 0;
          *long long v31 = &unk_1EDD1E458;
          v31[3] = &unk_1EDD0A260;
          *((unsigned char *)v31 + 32) = 0;
          v31[5] = 0;
          v31[6] = MEMORY[0x1E4FBA3D8];
          v31[7] = 0;
          v31[8] = 0;
          sub_18DEDE7B0(v31 + 9, "");
          *((unsigned char *)v31 + 32) = 1;
          operator new();
        }
        sub_18E0BB590((int64x2_t *)(v8 + 18080));
        if (*(void *)(v8 + 18120)) {
          continue;
        }
      }
      return;
    }
  }
}

void sub_18E0BA5E8(_Unwind_Exception *a1)
{
  uint64_t v4 = *(std::__shared_weak_count **)(v2 - 104);
  if (v4) {
    sub_18DEE4E18(v4);
  }
  sub_18DEE4E18(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_18E0BA668(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD0A0F0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0BA6A8()
{
  return &unk_1EDD0A0F0;
}

int64x2_t sub_18E0BA6B4(uint64_t a1, cnframework::GenericEvent *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t EventType = cnframework::GenericEvent::GetEventType(this, (uint64_t)this, a3, a4, a5, a6, a7, a8);
  {
    uint64_t v18 = *((void *)this + 2);
    if (v18) {
      uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 16))(v18);
    }
    else {
      uint64_t v19 = MEMORY[0x1E4FBA3D8];
    }
    uint64_t v27 = (const char *)(*(void *)(v19 + 8) & 0x7FFFFFFFFFFFFFFFLL);
    if (v27 != (const char *)((unint64_t)off_1EDD05298 & 0x7FFFFFFFFFFFFFFFLL))
    {
      if (strcmp(v27, (const char *)((unint64_t)off_1EDD05298 & 0x7FFFFFFFFFFFFFFFLL)))
      {
        v36.__vftable = 0;
        std::bad_cast::bad_cast(&v36);
        v36.__vftable = (std::bad_cast_vtbl *)&unk_1EDD12A18;
        sub_18E0BA8B8();
      }
    }
    uint64_t v28 = *((void *)this + 2);
    *(void *)a1 = &unk_1EDD14058;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(v28 + 16);
    long long v29 = *(_OWORD *)(v28 + 64);
    long long v30 = *(_OWORD *)(v28 + 80);
    long long v31 = *(_OWORD *)(v28 + 48);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(v28 + 32);
    *(_OWORD *)(a1 + 72) = v30;
    *(_OWORD *)(a1 + 56) = v29;
    *(_OWORD *)(a1 + 40) = v31;
    long long v32 = *(_OWORD *)(v28 + 112);
    int64x2_t result = *(int64x2_t *)(v28 + 128);
    long long v33 = *(_OWORD *)(v28 + 138);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(v28 + 96);
    *(_OWORD *)(a1 + 130) = v33;
    *(int64x2_t *)(a1 + 120) = result;
    *(_OWORD *)(a1 + 104) = v32;
  }
  else
  {
    __int16 v35 = 3;
    unsigned __int8 v34 = 5;
    uint64_t v20 = cnframework::GenericEvent::GetEventType(this, v11, v12, v13, v14, v15, v16, v17);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v35, &v34, "Attempted to cast a GenericEvent of type %s to type %s.", v21, v22, v23, v24, v25, *(unsigned char *)(v20 + 8));
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_OWORD *)(a1 + 136) = 0u;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = &unk_1EDD14058;
    *(unsigned char *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    *(unsigned char *)(a1 + 48) = 0;
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
    *(unsigned char *)(a1 + 72) = 0;
    *(void *)(a1 + 80) = 0;
    *(void *)(a1 + 88) = 0;
    int64x2_t result = vdupq_n_s64(0x7FF8000000000000uLL);
    *(int64x2_t *)(a1 + 96) = result;
    *(int64x2_t *)(a1 + 112) = result;
    *(void *)(a1 + 136) = 0x7FF8000000000000;
    *(unsigned char *)(a1 + 145) = 0;
  }
  return result;
}

void sub_18E0BA8A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::exception a12)
{
}

void sub_18E0BA8B8()
{
  exception = __cxa_allocate_exception(0x38uLL);
  sub_18E0BA918((uint64_t)exception);
  __cxa_throw(exception, (struct type_info *)&unk_1EDD04650, (void (*)(void *))sub_18E0BA988);
}

void sub_18E0BA900(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_18E0BA918(uint64_t result)
{
  *(void *)(result + 24) = 0;
  *(void *)(result + 32) = 0;
  *(void *)(result + 40) = 0;
  *(_DWORD *)(result + 48) = -1;
  *(void *)int64x2_t result = &unk_1EDD125E0;
  *(void *)(result + 8) = &unk_1EDD12610;
  *(void *)(result + 16) = &unk_1EDD12638;
  return result;
}

uint64_t sub_18E0BA988(uint64_t a1)
{
  *(void *)(a1 + 16) = &unk_1EDD136E0;
  sub_18DFE4B84((uint64_t *)(a1 + 24));
  std::exception::~exception((std::exception *)(a1 + 8));
  return a1;
}

void sub_18E0BA9DC()
{
}

void sub_18E0BAB9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_18DFE4B84(&a9);
  sub_18DFE4B84(&a10);
  (*(void (**)(uint64_t))(*(void *)v10 + 24))(v10);
  _Unwind_Resume(a1);
}

void sub_18E0BAC14(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x38uLL);
  sub_18E0BAEC8((uint64_t)exception, a1);
  __cxa_throw(exception, (struct type_info *)&unk_1EDD04650, (void (*)(void *))sub_18E0BA988);
}

void sub_18E0BAC5C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_18E0BAC70(uint64_t a1)
{
  *(void *)(a1 + 16) = &unk_1EDD136E0;
  sub_18DFE4B84((uint64_t *)(a1 + 24));
  std::exception::~exception((std::exception *)(a1 + 8));

  JUMPOUT(0x192FA6240);
}

void sub_18E0BACE4(uint64_t a1)
{
  *(void *)(a1 + 8) = &unk_1EDD136E0;
  sub_18DFE4B84((uint64_t *)(a1 + 16));

  std::exception::~exception((std::exception *)a1);
}

void sub_18E0BAD40(uint64_t a1)
{
  *(void *)(a1 + 8) = &unk_1EDD136E0;
  sub_18DFE4B84((uint64_t *)(a1 + 16));
  std::exception::~exception((std::exception *)a1);

  JUMPOUT(0x192FA6240);
}

const char *sub_18E0BADB8()
{
  return "boost::bad_any_cast: failed conversion using boost::any_cast";
}

void sub_18E0BADC4(void *a1)
{
  *a1 = &unk_1EDD136E0;
  sub_18DFE4B84(a1 + 1);

  std::exception::~exception((std::exception *)a1 - 1);
}

void sub_18E0BAE1C(void *a1)
{
  *a1 = &unk_1EDD136E0;
  sub_18DFE4B84(a1 + 1);
  std::exception::~exception((std::exception *)a1 - 1);

  JUMPOUT(0x192FA6240);
}

void sub_18E0BAE90(std::exception *a1)
{
  std::exception::~exception(a1);

  JUMPOUT(0x192FA6240);
}

uint64_t sub_18E0BAEC8(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1EDD12A90;
  *(void *)(a1 + 8) = &unk_1EDD12A18;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = &unk_1EDD136E0;
  *(void *)(a1 + 24) = v4;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  long long v5 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v5;
  *(void *)a1 = &unk_1EDD125E0;
  *(void *)(a1 + 8) = &unk_1EDD12610;
  *(void *)(a1 + 16) = &unk_1EDD12638;
  return a1;
}

void sub_18E0BAFE4(_Unwind_Exception *a1)
{
  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

__n128 sub_18E0BAFF8(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v6 = 26 * ((v5 - v4) >> 3) - 1;
  if (v5 == v4) {
    uint64_t v6 = 0;
  }
  if (v6 == a1[5] + a1[4])
  {
    sub_18E0BB10C(a1);
    uint64_t v4 = a1[1];
    uint64_t v5 = a1[2];
  }
  if (v5 == v4)
  {
    unint64_t v8 = 0;
  }
  else
  {
    unint64_t v7 = a1[5] + a1[4];
    unint64_t v8 = *(void *)(v4 + 8 * (v7 / 0x1A)) + 152 * (v7 % 0x1A);
  }
  *(void *)unint64_t v8 = &unk_1EDD14058;
  *(_OWORD *)(v8 + 8) = *(_OWORD *)(a2 + 8);
  long long v9 = *(_OWORD *)(a2 + 24);
  long long v10 = *(_OWORD *)(a2 + 40);
  long long v11 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(v8 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(v8 + 56) = v11;
  *(_OWORD *)(v8 + 40) = v10;
  *(_OWORD *)(v8 + 24) = v9;
  __n128 result = *(__n128 *)(a2 + 88);
  long long v13 = *(_OWORD *)(a2 + 104);
  long long v14 = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(v8 + 130) = *(_OWORD *)(a2 + 130);
  *(_OWORD *)(v8 + 120) = v14;
  *(_OWORD *)(v8 + 104) = v13;
  *(__n128 *)(v8 + 88) = result;
  ++a1[5];
  return result;
}

void sub_18E0BB10C(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x1A;
  unint64_t v4 = v2 - 26;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    long long v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      unsigned __int8 v34 = (char *)sub_18DEDF808(v5, v33);
      __int16 v35 = &v34[8 * (v33 >> 2)];
      long long v37 = &v34[8 * v36];
      long long v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        uint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)uint64_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      long long v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0xF70uLL);
      sub_18DEDF368(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0xF70uLL);
    sub_18DEDF480((uint64_t)a1, &v54);
    float64x2_t v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    long long v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      unsigned __int8 v34 = (char *)sub_18DEDF808((uint64_t)(a1 + 3), v46);
      __int16 v35 = &v34[8 * (v46 >> 2)];
      long long v37 = &v34[8 * v47];
      long long v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        uint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)uint64_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      double v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  long long v56 = a1 + 3;
  *(void *)&long long v54 = sub_18DEDF808((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0xF70uLL);
  sub_18DEDF5A0(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_18DEDF6B8((uint64_t)&v54, v27);
  }
  long long v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_18E0BB3D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_18E0BB424(uint64_t a1)
{
  *(_DWORD *)(a1 + 504) = 0;
  *(void *)(a1 + 536) = 0;
  *(void *)(a1 + 528) = 0;
  *(unsigned char *)(a1 + 17345) = 0;
  unint64_t v2 = *(void ***)(a1 + 18088);
  BOOL v3 = *(void ***)(a1 + 18096);
  if (v3 == v2)
  {
    uint64_t v6 = (void *)(a1 + 18120);
    BOOL v3 = *(void ***)(a1 + 18088);
  }
  else
  {
    unint64_t v4 = *(void *)(a1 + 18112);
    uint64_t v5 = &v2[v4 / 0x1A];
    uint64_t v6 = (void *)(a1 + 18120);
    unint64_t v7 = (unint64_t)v2[(*(void *)(a1 + 18120) + v4) / 0x1A] + 152 * ((*(void *)(a1 + 18120) + v4) % 0x1A);
    if ((char *)*v5 + 152 * (v4 % 0x1A) != (void *)v7)
    {
      unint64_t v8 = (void (***)(void))((char *)*v5 + 152 * (v4 % 0x1A));
      do
      {
        long long v9 = *v8;
        v8 += 19;
        (*v9)();
        if ((char *)v8 - (unsigned char *)*v5 == 3952)
        {
          uint64_t v10 = (void (***)(void))v5[1];
          ++v5;
          unint64_t v8 = v10;
        }
      }
      while (v8 != (void (***)(void))v7);
      BOOL v3 = *(void ***)(a1 + 18096);
      unint64_t v2 = *(void ***)(a1 + 18088);
    }
  }
  *uint64_t v6 = 0;
  unint64_t v11 = (char *)v3 - (char *)v2;
  if (v11 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      unint64_t v2 = (void **)(*(void *)(a1 + 18088) + 8);
      *(void *)(a1 + 18088) = v2;
      unint64_t v11 = *(void *)(a1 + 18096) - (void)v2;
    }
    while (v11 > 0x10);
  }
  if (v11 >> 3 == 1)
  {
    uint64_t v12 = 13;
  }
  else
  {
    if (v11 >> 3 != 2) {
      return;
    }
    uint64_t v12 = 26;
  }
  *(void *)(a1 + 18112) = v12;
}

uint64_t sub_18E0BB590(int64x2_t *a1)
{
  unint64_t v2 = (void (***)(void))(*(void *)(a1->i64[1] + 8 * (a1[2].i64[0] / 0x1AuLL))
                                     + 152 * (a1[2].i64[0] % 0x1AuLL));
  (**v2)(v2);
  a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_18E1EF670);

  return sub_18E0BB740((uint64_t)a1, 1);
}

__n128 sub_18E0BB634(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1EDD13238;
  *(void *)(a1 + 8) = &unk_1EDD14BF0;
  long long v2 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 32) = v2;
  long long v3 = *(_OWORD *)(a2 + 40);
  long long v4 = *(_OWORD *)(a2 + 56);
  long long v5 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 96) = v5;
  *(_OWORD *)(a1 + 48) = v3;
  *(_OWORD *)(a1 + 64) = v4;
  __n128 result = *(__n128 *)(a2 + 104);
  long long v6 = *(_OWORD *)(a2 + 120);
  long long v7 = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 160) = v7;
  *(__n128 *)(a1 + 112) = result;
  *(_OWORD *)(a1 + 128) = v6;
  result.n128_u64[0] = 0;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  if (a1 + 8 != a2)
  {
    *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 168);
    __n128 result = *(__n128 *)(a2 + 184);
    *(__n128 *)(a1 + 192) = result;
  }
  return result;
}

void sub_18E0BB6D4()
{
}

void *sub_18E0BB6E8()
{
}

void sub_18E0BB6F4()
{
}

uint64_t sub_18E0BB740(uint64_t a1, int a2)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 < 0x1A) {
    a2 = 1;
  }
  if (v2 < 0x34) {
    int v4 = a2;
  }
  else {
    int v4 = 0;
  }
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8;
    *(void *)(a1 + 32) -= 26;
  }
  return v4 ^ 1u;
}

void *sub_18E0BB7A0(uint64_t a1, uint64_t *a2, uint64_t a3, void **a4)
{
  unint64_t v8 = *(void *)(*a2 + 8);
  if ((v8 & 0x8000000000000000) != 0)
  {
    long long v9 = (unsigned __int8 *)(v8 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v10 = 5381;
    do
    {
      unint64_t v8 = v10;
      unsigned int v11 = *v9++;
      uint64_t v10 = (33 * v10) ^ v11;
    }
    while (v11);
  }
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    unint64_t v14 = v13.u32[0];
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v8;
      if (v8 >= v12) {
        unint64_t v4 = v8 % v12;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v8;
    }
    uint64_t v15 = *(void **)(*(void *)a1 + 8 * v4);
    if (v15)
    {
      uint64_t v16 = (void *)*v15;
      if (*v15)
      {
        do
        {
          unint64_t v17 = v16[1];
          if (v17 == v8)
          {
            if (sub_18DEE4C68(v16[2], *a2)) {
              return v16;
            }
          }
          else
          {
            if (v14 > 1)
            {
              if (v17 >= v12) {
                v17 %= v12;
              }
            }
            else
            {
              v17 &= v12 - 1;
            }
            if (v17 != v4) {
              break;
            }
          }
          uint64_t v16 = (void *)*v16;
        }
        while (v16);
      }
    }
  }
  uint64_t v18 = operator new(0x38uLL);
  v28[0] = v18;
  v28[1] = a1 + 16;
  *uint64_t v18 = 0;
  v18[1] = v8;
  v18[2] = **a4;
  v18[6] = 0;
  char v29 = 1;
  float v19 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v20 = *(float *)(a1 + 32);
  if (!v12 || (float)(v20 * (float)v12) < v19)
  {
    BOOL v21 = 1;
    if (v12 >= 3) {
      BOOL v21 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v12);
    unint64_t v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23) {
      size_t v24 = v23;
    }
    else {
      size_t v24 = v22;
    }
    sub_18DFF4F38(a1, v24);
    unint64_t v12 = *(void *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v8 >= v12) {
        unint64_t v4 = v8 % v12;
      }
      else {
        unint64_t v4 = v8;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v8;
    }
  }
  unint64_t v25 = *(void **)(*(void *)a1 + 8 * v4);
  if (v25)
  {
    *(void *)v28[0] = *v25;
    *unint64_t v25 = v28[0];
  }
  else
  {
    *(void *)v28[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v28[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v28[0])
    {
      unint64_t v26 = *(void *)(*(void *)v28[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v26 >= v12) {
          v26 %= v12;
        }
      }
      else
      {
        v26 &= v12 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v26) = v28[0];
    }
  }
  uint64_t v16 = (void *)v28[0];
  v28[0] = 0;
  ++*(void *)(a1 + 24);
  sub_18E0BBA3C((uint64_t)v28, 0);
  return v16;
}

void sub_18E0BBA24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_18E0BBA3C((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void sub_18E0BBA3C(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_18DEE52C8(v2 + 3);
    }
    operator delete(v2);
  }
}

void *sub_18E0BBA94(void *result, void *a2)
{
  v6[3] = *MEMORY[0x1E4F143B8];
  if (a2 != result)
  {
    long long v3 = result;
    unint64_t v4 = (void *)result[3];
    long long v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        __n128 result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_18E0BBCF4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_18DEDD524(a1);
}

void sub_18E0BBD04()
{
}

void *sub_18E0BBD18()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1EDD1DD90;
  return result;
}

void sub_18E0BBD50(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1DD90;
}

void sub_18E0BBD78(int a1, unsigned char **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8 = *a2;
  sub_18E0BBF64((uint64_t)v14, this, (uint64_t)this, a4, a5, a6, a7, a8);
  if (v8[480])
  {
    BOOL v21 = &unk_1EDD14240;
    uint64_t v22 = 0;
    int64x2_t v24 = vdupq_n_s64(0x7FF8000000000000uLL);
    uint64_t v23 = 0;
    uint64_t v25 = 0x7FF8000000000000;
    uint64_t v22 = (*(uint64_t (**)(void *))(v14[0] + 16))(v14);
    uint64_t v23 = v9;
    int64x2_t v24 = v15;
    uint64_t v25 = v16;
    if (sub_18E04D850((uint64_t)(v8 + 496), (uint64_t)&v21))
    {
      (*(void (**)(void **__return_ptr, unsigned char *))(*(void *)v8 + 16))(v19, v8);
      int v10 = v20;
      unsigned int v11 = (const char *)v19[0];
      (*(void (**)(void **__return_ptr, void *))(v14[0] + 24))(v17, v14);
      if (v10 >= 0) {
        unint64_t v12 = (const char *)v19;
      }
      else {
        unint64_t v12 = v11;
      }
      if (v18 >= 0) {
        uint8x8_t v13 = (const char *)v17;
      }
      else {
        uint8x8_t v13 = (const char *)v17[0];
      }
      printf("Warning: %s failed to handle event of type %s.\n", v12, v13);
      if (v18 < 0) {
        operator delete(v17[0]);
      }
      if (v20 < 0) {
        operator delete(v19[0]);
      }
    }
  }
}

void sub_18E0BBEFC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 97) < 0) {
    operator delete(*(void **)(v1 - 120));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_18E0BBF18(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD0A0D0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0BBF58()
{
  return &unk_1EDD0A0D0;
}

int64x2_t sub_18E0BBF64(uint64_t a1, cnframework::GenericEvent *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t EventType = cnframework::GenericEvent::GetEventType(this, (uint64_t)this, a3, a4, a5, a6, a7, a8);
  {
    uint64_t v18 = *((void *)this + 2);
    if (v18) {
      uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 16))(v18);
    }
    else {
      uint64_t v19 = MEMORY[0x1E4FBA3D8];
    }
    uint64_t v27 = (const char *)(*(void *)(v19 + 8) & 0x7FFFFFFFFFFFFFFFLL);
    if (v27 != (const char *)((unint64_t)off_1EDD05018 & 0x7FFFFFFFFFFFFFFFLL))
    {
      if (strcmp(v27, (const char *)((unint64_t)off_1EDD05018 & 0x7FFFFFFFFFFFFFFFLL)))
      {
        v36.__vftable = 0;
        std::bad_cast::bad_cast(&v36);
        v36.__vftable = (std::bad_cast_vtbl *)&unk_1EDD12A18;
        sub_18E0BA8B8();
      }
    }
    uint64_t v28 = *((void *)this + 2);
    *(void *)a1 = &unk_1EDD137F0;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(v28 + 16);
    long long v29 = *(_OWORD *)(v28 + 64);
    long long v30 = *(_OWORD *)(v28 + 80);
    long long v31 = *(_OWORD *)(v28 + 48);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(v28 + 32);
    *(_OWORD *)(a1 + 72) = v30;
    *(_OWORD *)(a1 + 56) = v29;
    *(_OWORD *)(a1 + 40) = v31;
    long long v32 = *(_OWORD *)(v28 + 112);
    int64x2_t result = *(int64x2_t *)(v28 + 128);
    long long v33 = *(_OWORD *)(v28 + 138);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(v28 + 96);
    *(_OWORD *)(a1 + 130) = v33;
    *(int64x2_t *)(a1 + 120) = result;
    *(_OWORD *)(a1 + 104) = v32;
  }
  else
  {
    __int16 v35 = 3;
    unsigned __int8 v34 = 5;
    uint64_t v20 = cnframework::GenericEvent::GetEventType(this, v11, v12, v13, v14, v15, v16, v17);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v35, &v34, "Attempted to cast a GenericEvent of type %s to type %s.", v21, v22, v23, v24, v25, *(unsigned char *)(v20 + 8));
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_OWORD *)(a1 + 136) = 0u;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = &unk_1EDD137F0;
    *(unsigned char *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    *(unsigned char *)(a1 + 48) = 0;
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
    *(unsigned char *)(a1 + 72) = 0;
    *(void *)(a1 + 80) = 0;
    *(void *)(a1 + 88) = 0;
    int64x2_t result = vdupq_n_s64(0x7FF8000000000000uLL);
    *(int64x2_t *)(a1 + 96) = result;
    *(int64x2_t *)(a1 + 112) = result;
    *(void *)(a1 + 136) = 0x7FF8000000000000;
    *(unsigned char *)(a1 + 145) = 0;
  }
  return result;
}

void sub_18E0BC154(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::exception a12)
{
}

void sub_18E0BC16C()
{
}

void *sub_18E0BC180()
{
  int64x2_t result = operator new(0x10uLL);
  *int64x2_t result = &unk_1EDD1DDE8;
  return result;
}

void sub_18E0BC1B8(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1DDE8;
}

void sub_18E0BC1E0(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  __n128 v9 = sub_18E0BC290((uint64_t)v10, this, (uint64_t)this, a4, a5, a6, a7, a8);
  if (!v10[26]) {
    (*(void (**)(uint64_t, __n128))(*(void *)v8 + 48))(v8, v9);
  }
}

uint64_t sub_18E0BC244(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD0A0E0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0BC284()
{
  return &unk_1EDD0A0E0;
}

__n128 sub_18E0BC290(uint64_t a1, cnframework::GenericEvent *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t EventType = cnframework::GenericEvent::GetEventType(this, (uint64_t)this, a3, a4, a5, a6, a7, a8);
  {
    uint64_t v18 = *((void *)this + 2);
    if (v18) {
      uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 16))(v18);
    }
    else {
      uint64_t v19 = MEMORY[0x1E4FBA3D8];
    }
    uint64_t v27 = (const char *)(*(void *)(v19 + 8) & 0x7FFFFFFFFFFFFFFFLL);
    if (v27 != (const char *)((unint64_t)off_1EDD05208 & 0x7FFFFFFFFFFFFFFFLL))
    {
      if (strcmp(v27, (const char *)((unint64_t)off_1EDD05208 & 0x7FFFFFFFFFFFFFFFLL)))
      {
        v35.__vftable = 0;
        std::bad_cast::bad_cast(&v35);
        v35.__vftable = (std::bad_cast_vtbl *)&unk_1EDD12A18;
        sub_18E0BA8B8();
      }
    }
    uint64_t v28 = *((void *)this + 2);
    *(void *)a1 = &unk_1EDD13D20;
    long long v30 = *(_OWORD *)(v28 + 32);
    long long v29 = *(_OWORD *)(v28 + 48);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(v28 + 16);
    *(_OWORD *)(a1 + 24) = v30;
    *(_OWORD *)(a1 + 40) = v29;
    long long v31 = *(_OWORD *)(v28 + 80);
    __n128 result = *(__n128 *)(v28 + 96);
    int v32 = *(_DWORD *)(v28 + 112);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(v28 + 64);
    *(_DWORD *)(a1 + 104) = v32;
    *(__n128 *)(a1 + 88) = result;
    *(_OWORD *)(a1 + 72) = v31;
  }
  else
  {
    __int16 v34 = 3;
    unsigned __int8 v33 = 5;
    uint64_t v20 = cnframework::GenericEvent::GetEventType(this, v11, v12, v13, v14, v15, v16, v17);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v34, &v33, "Attempted to cast a GenericEvent of type %s to type %s.", v21, v22, v23, v24, v25, *(unsigned char *)(v20 + 8));
    result.n128_u64[0] = 0;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = &unk_1EDD13D20;
    *(unsigned char *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    *(unsigned char *)(a1 + 48) = 0;
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
    *(unsigned char *)(a1 + 72) = 0;
    *(void *)(a1 + 80) = 0;
    *(void *)(a1 + 88) = 0;
    *(void *)(a1 + 96) = 0x7FF8000000000000;
    *(void *)(a1 + 104) = 0;
  }
  return result;
}

void sub_18E0BC45C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::exception a12)
{
}

void sub_18E0BC474()
{
}

void *sub_18E0BC488()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1EDD1DA78;
  return result;
}

void sub_18E0BC4C0(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1DA78;
}

void sub_18E0BC4E8(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = *a2;
  uint64_t EventType = cnframework::GenericEvent::GetEventType(this, (uint64_t)a2, (uint64_t)this, a4, a5, a6, a7, a8);
  {
    uint64_t v18 = *((void *)this + 2);
    if (v18) {
      uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 16))(v18);
    }
    else {
      uint64_t v19 = MEMORY[0x1E4FBA3D8];
    }
    uint64_t v28 = (const char *)(*(void *)(v19 + 8) & 0x7FFFFFFFFFFFFFFFLL);
    if (v28 != (const char *)((unint64_t)off_1EDD052B0 & 0x7FFFFFFFFFFFFFFFLL)
      && strcmp(v28, (const char *)((unint64_t)off_1EDD052B0 & 0x7FFFFFFFFFFFFFFFLL)))
    {
      v31.__vftable = 0;
      std::bad_cast::bad_cast(&v31);
      v31.__vftable = (std::bad_cast_vtbl *)&unk_1EDD12A18;
      sub_18E0BA8B8();
    }
    uint64_t v29 = *((void *)this + 2);
    long long v34 = *(_OWORD *)(v29 + 48);
    long long v35 = *(_OWORD *)(v29 + 64);
    long long v36 = *(_OWORD *)(v29 + 80);
    uint64_t v37 = *(void *)(v29 + 96);
    long long v32 = *(_OWORD *)(v29 + 16);
    long long v33 = *(_OWORD *)(v29 + 32);
    uint64_t v27 = *(void *)(v29 + 104);
    __int16 v26 = *(_WORD *)(v29 + 112);
  }
  else
  {
    LOWORD(v31.__vftable) = 3;
    unsigned __int8 v30 = 5;
    uint64_t v20 = cnframework::GenericEvent::GetEventType(this, v11, v12, v13, v14, v15, v16, v17);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v31, &v30, "Attempted to cast a GenericEvent of type %s to type %s.", v21, v22, v23, v24, v25, *(unsigned char *)(v20 + 8));
    __int16 v26 = 0;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    uint64_t v37 = 0;
    uint64_t v27 = 0x7FF8000000000000;
  }
  if (*(unsigned char *)(v9 + 608))
  {
    *(void *)(v9 + 584) = v37;
    *(_OWORD *)(v9 + 536) = v34;
    *(_OWORD *)(v9 + 552) = v35;
    *(_OWORD *)(v9 + 568) = v36;
    *(_OWORD *)(v9 + 504) = v32;
    *(_OWORD *)(v9 + 520) = v33;
  }
  else
  {
    *(void *)(v9 + 496) = &unk_1EDD14088;
    *(void *)(v9 + 584) = v37;
    *(_OWORD *)(v9 + 536) = v34;
    *(_OWORD *)(v9 + 552) = v35;
    *(_OWORD *)(v9 + 568) = v36;
    *(_OWORD *)(v9 + 504) = v32;
    *(_OWORD *)(v9 + 520) = v33;
    *(unsigned char *)(v9 + 608) = 1;
  }
  *(void *)(v9 + 592) = v27;
  *(_WORD *)(v9 + 600) = v26;
}

void sub_18E0BC734(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::exception a12)
{
}

uint64_t sub_18E0BC750(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD0A040)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0BC790()
{
  return &unk_1EDD0A040;
}

void sub_18E0BC7A0()
{
}

void *sub_18E0BC7B4()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1EDD1DB28;
  return result;
}

void sub_18E0BC7EC(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1DB28;
}

__n128 sub_18E0BC814(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  sub_18E0BC96C((uint64_t)&v20, this, (uint64_t)this, a4, a5, a6, a7, a8);
  if (*(unsigned char *)(v8 + 824))
  {
    long long v9 = v30;
    long long v10 = v32;
    *(_OWORD *)(v8 + 784) = v31;
    *(_OWORD *)(v8 + 800) = v10;
    *(void *)(v8 + 816) = v33;
    long long v11 = v26;
    long long v12 = v28;
    *(_OWORD *)(v8 + 720) = v27;
    *(_OWORD *)(v8 + 736) = v12;
    *(_OWORD *)(v8 + 752) = v29;
    *(_OWORD *)(v8 + 768) = v9;
    __n128 result = v22;
    long long v14 = v24;
    *(_OWORD *)(v8 + 656) = v23;
    *(_OWORD *)(v8 + 672) = v14;
    *(_OWORD *)(v8 + 688) = v25;
    *(_OWORD *)(v8 + 704) = v11;
    *(_OWORD *)(v8 + 624) = v21;
    *(__n128 *)(v8 + 640) = result;
  }
  else
  {
    *(void *)(v8 + 616) = &unk_1EDD141E0;
    long long v15 = v30;
    long long v16 = v32;
    *(_OWORD *)(v8 + 784) = v31;
    *(_OWORD *)(v8 + 800) = v16;
    *(void *)(v8 + 816) = v33;
    long long v17 = v26;
    long long v18 = v28;
    *(_OWORD *)(v8 + 720) = v27;
    *(_OWORD *)(v8 + 736) = v18;
    *(_OWORD *)(v8 + 752) = v29;
    *(_OWORD *)(v8 + 768) = v15;
    __n128 result = v22;
    long long v19 = v24;
    *(_OWORD *)(v8 + 656) = v23;
    *(_OWORD *)(v8 + 672) = v19;
    *(_OWORD *)(v8 + 688) = v25;
    *(_OWORD *)(v8 + 704) = v17;
    *(_OWORD *)(v8 + 624) = v21;
    *(__n128 *)(v8 + 640) = result;
    *(unsigned char *)(v8 + 824) = 1;
  }
  return result;
}

uint64_t sub_18E0BC920(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD0A060)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0BC960()
{
  return &unk_1EDD0A060;
}

__n128 sub_18E0BC96C(uint64_t a1, cnframework::GenericEvent *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t EventType = cnframework::GenericEvent::GetEventType(this, (uint64_t)this, a3, a4, a5, a6, a7, a8);
  {
    uint64_t v18 = *((void *)this + 2);
    if (v18) {
      uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 16))(v18);
    }
    else {
      uint64_t v19 = MEMORY[0x1E4FBA3D8];
    }
    long long v27 = (const char *)(*(void *)(v19 + 8) & 0x7FFFFFFFFFFFFFFFLL);
    if (v27 != (const char *)((unint64_t)off_1EDD05358 & 0x7FFFFFFFFFFFFFFFLL))
    {
      if (strcmp(v27, (const char *)((unint64_t)off_1EDD05358 & 0x7FFFFFFFFFFFFFFFLL)))
      {
        v39.__vftable = 0;
        std::bad_cast::bad_cast(&v39);
        v39.__vftable = (std::bad_cast_vtbl *)&unk_1EDD12A18;
        sub_18E0BA8B8();
      }
    }
    uint64_t v28 = *((void *)this + 2);
    *(void *)a1 = &unk_1EDD141E0;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(v28 + 16);
    long long v29 = *(_OWORD *)(v28 + 64);
    long long v30 = *(_OWORD *)(v28 + 80);
    long long v31 = *(_OWORD *)(v28 + 48);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(v28 + 32);
    *(_OWORD *)(a1 + 72) = v30;
    *(_OWORD *)(a1 + 56) = v29;
    *(_OWORD *)(a1 + 40) = v31;
    long long v32 = *(_OWORD *)(v28 + 128);
    long long v33 = *(_OWORD *)(v28 + 144);
    long long v34 = *(_OWORD *)(v28 + 112);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(v28 + 96);
    *(_OWORD *)(a1 + 136) = v33;
    *(_OWORD *)(a1 + 120) = v32;
    *(_OWORD *)(a1 + 104) = v34;
    long long v35 = *(_OWORD *)(v28 + 176);
    __n128 result = *(__n128 *)(v28 + 192);
    uint64_t v36 = *(void *)(v28 + 208);
    *(_OWORD *)(a1 + 152) = *(_OWORD *)(v28 + 160);
    *(void *)(a1 + 200) = v36;
    *(__n128 *)(a1 + 184) = result;
    *(_OWORD *)(a1 + 168) = v35;
  }
  else
  {
    __int16 v38 = 3;
    unsigned __int8 v37 = 5;
    uint64_t v20 = cnframework::GenericEvent::GetEventType(this, v11, v12, v13, v14, v15, v16, v17);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v38, &v37, "Attempted to cast a GenericEvent of type %s to type %s.", v21, v22, v23, v24, v25, *(unsigned char *)(v20 + 8));
    result.n128_u64[0] = 0;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 168) = 0u;
    *(_OWORD *)(a1 + 152) = 0u;
    *(_OWORD *)(a1 + 136) = 0u;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = &unk_1EDD141E0;
    *(unsigned char *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    *(unsigned char *)(a1 + 48) = 0;
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
    *(unsigned char *)(a1 + 72) = 0;
    *(void *)(a1 + 80) = 0;
    *(void *)(a1 + 88) = 0;
    *(void *)(a1 + 96) = 0x7FF8000000000000;
    *(void *)(a1 + 112) = 0;
    *(void *)(a1 + 120) = 0;
    *(unsigned char *)(a1 + 128) = 0;
    *(void *)(a1 + 136) = 0;
    *(void *)(a1 + 144) = 0;
    *(unsigned char *)(a1 + 152) = 0;
    *(void *)(a1 + 160) = 0;
    *(void *)(a1 + 168) = 0;
    *(unsigned char *)(a1 + 176) = 0;
    *(void *)(a1 + 184) = 0;
    *(void *)(a1 + 192) = 0;
    *(void *)(a1 + 200) = 0x7FF8000000000000;
  }
  return result;
}

void sub_18E0BCB90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::exception a12)
{
}

void sub_18E0BCBA8()
{
}

void *sub_18E0BCBBC()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1EDD1DAD0;
  return result;
}

void sub_18E0BCBF4(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1DAD0;
}

void sub_18E0BCC1C(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = *a2;
  uint64_t EventType = cnframework::GenericEvent::GetEventType(this, (uint64_t)a2, (uint64_t)this, a4, a5, a6, a7, a8);
  {
    uint64_t v18 = *((void *)this + 2);
    if (v18) {
      uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 16))(v18);
    }
    else {
      uint64_t v19 = MEMORY[0x1E4FBA3D8];
    }
    long long v26 = (const char *)(*(void *)(v19 + 8) & 0x7FFFFFFFFFFFFFFFLL);
    if (v26 != (const char *)((unint64_t)off_1EDD052E0 & 0x7FFFFFFFFFFFFFFFLL)
      && strcmp(v26, (const char *)((unint64_t)off_1EDD052E0 & 0x7FFFFFFFFFFFFFFFLL)))
    {
      v55.__vftable = 0;
      std::bad_cast::bad_cast(&v55);
      v55.__vftable = (std::bad_cast_vtbl *)&unk_1EDD12A18;
      sub_18E0BA8B8();
    }
    uint64_t v27 = *((void *)this + 2);
    unsigned __int8 v37 = &unk_1EDD140E8;
    long long v38 = *(_OWORD *)(v27 + 16);
    long long v28 = *(_OWORD *)(v27 + 32);
    long long v29 = *(_OWORD *)(v27 + 48);
    long long v30 = *(_OWORD *)(v27 + 80);
    long long v41 = *(_OWORD *)(v27 + 64);
    long long v42 = v30;
    long long v39 = v28;
    long long v40 = v29;
    long long v31 = *(_OWORD *)(v27 + 96);
    long long v32 = *(_OWORD *)(v27 + 112);
    long long v33 = *(_OWORD *)(v27 + 128);
    long long v46 = *(_OWORD *)(v27 + 144);
    long long v44 = v32;
    long long v45 = v33;
    long long v43 = v31;
    long long v34 = *(_OWORD *)(v27 + 160);
    long long v35 = *(_OWORD *)(v27 + 176);
    long long v36 = *(_OWORD *)(v27 + 192);
    LOWORD(v50) = *(_WORD *)(v27 + 208);
    long long v49 = v36;
    long long v48 = v35;
    long long v47 = v34;
    uint64_t v52 = 0;
    uint64_t v53 = 0;
    std::string __p = 0;
    sub_18E0BCF38(&__p, *(const void **)(v27 + 216), *(void *)(v27 + 224), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v27 + 224) - *(void *)(v27 + 216)) >> 3));
  }
  else
  {
    LOWORD(v55.__vftable) = 3;
    unsigned __int8 v54 = 5;
    uint64_t v20 = cnframework::GenericEvent::GetEventType(this, v11, v12, v13, v14, v15, v16, v17);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v55, &v54, "Attempted to cast a GenericEvent of type %s to type %s.", v21, v22, v23, v24, v25, *(unsigned char *)(v20 + 8));
    long long v39 = 0uLL;
    long long v42 = 0uLL;
    long long v45 = 0uLL;
    long long v46 = 0u;
    long long v48 = 0uLL;
    long long v38 = 0uLL;
    unsigned __int8 v37 = &unk_1EDD140E8;
    long long v40 = 0uLL;
    long long v41 = 0uLL;
    *(void *)&long long v43 = 0;
    *((void *)&v43 + 1) = 0x7FF8000000000000;
    long long v44 = 0uLL;
    BYTE8(v46) = 0;
    *(void *)&long long v46 = 0;
    long long v47 = 0uLL;
    *(void *)&long long v49 = 0;
    *((void *)&v49 + 1) = 0x7FF8000000000000;
    uint64_t v50 = 0;
    std::string __p = 0;
    uint64_t v52 = 0;
    uint64_t v53 = 0;
  }
  sub_18E1732E8(v9 + 832, (uint64_t)&v37);
  unsigned __int8 v37 = &unk_1EDD140E8;
  if (__p)
  {
    uint64_t v52 = __p;
    operator delete(__p);
  }
}

void sub_18E0BCEA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39)
{
  std::exception::~exception((std::exception *)(v39 - 56));
  _Unwind_Resume(a1);
}

uint64_t sub_18E0BCEEC(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD0A050)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0BCF2C()
{
  return &unk_1EDD0A050;
}

void *sub_18E0BCF38(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    __n128 result = sub_18E01AEC0(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      __n128 result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_18E0BCF98(_Unwind_Exception *exception_object)
{
  long long v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_18E0BCFB8()
{
}

void *sub_18E0BCFCC()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1EDD1DA20;
  return result;
}

void sub_18E0BD004(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1DA20;
}

void sub_18E0BD02C(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  __n128 v9 = sub_18E0BC290((uint64_t)v10, this, (uint64_t)this, a4, a5, a6, a7, a8);
  if (!v10[26]) {
    (*(void (**)(uint64_t, __n128))(*(void *)v8 + 48))(v8, v9);
  }
}

uint64_t sub_18E0BD090(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD0A030)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0BD0D0()
{
  return &unk_1EDD0A030;
}

void sub_18E0BD0E0()
{
}

void *sub_18E0BD0F4()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1EDD1D9C8;
  return result;
}

void sub_18E0BD12C(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1D9C8;
}

double sub_18E0BD154(int a1, raven::RavenActivityStateEstimatorActiveObject **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  sub_18E0BD1E0((uint64_t)v10, this, (uint64_t)this, a4, a5, a6, a7, a8);
  *(void *)&double result = raven::RavenActivityStateEstimatorActiveObject::HandleEvent(v8, (const raven::StepCountEvent *)v10).n128_u64[0];
  return result;
}

uint64_t sub_18E0BD194(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD0A020)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0BD1D4()
{
  return &unk_1EDD0A020;
}

__n128 sub_18E0BD1E0(uint64_t a1, cnframework::GenericEvent *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t EventType = cnframework::GenericEvent::GetEventType(this, (uint64_t)this, a3, a4, a5, a6, a7, a8);
  {
    uint64_t v18 = *((void *)this + 2);
    if (v18) {
      uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 16))(v18);
    }
    else {
      uint64_t v19 = MEMORY[0x1E4FBA3D8];
    }
    uint64_t v27 = (const char *)(*(void *)(v19 + 8) & 0x7FFFFFFFFFFFFFFFLL);
    if (v27 != (const char *)((unint64_t)off_1EDD050B8 & 0x7FFFFFFFFFFFFFFFLL))
    {
      if (strcmp(v27, (const char *)((unint64_t)off_1EDD050B8 & 0x7FFFFFFFFFFFFFFFLL)))
      {
        v37.__vftable = 0;
        std::bad_cast::bad_cast(&v37);
        v37.__vftable = (std::bad_cast_vtbl *)&unk_1EDD12A18;
        sub_18E0BA8B8();
      }
    }
    uint64_t v28 = *((void *)this + 2);
    *(void *)a1 = &unk_1EDD139E0;
    long long v29 = *(_OWORD *)(v28 + 32);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(v28 + 16);
    *(_OWORD *)(a1 + 24) = v29;
    long long v30 = *(_OWORD *)(v28 + 80);
    long long v31 = *(_OWORD *)(v28 + 96);
    long long v32 = *(_OWORD *)(v28 + 64);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(v28 + 48);
    *(_OWORD *)(a1 + 88) = v31;
    *(_OWORD *)(a1 + 72) = v30;
    *(_OWORD *)(a1 + 56) = v32;
    long long v33 = *(_OWORD *)(v28 + 128);
    __n128 result = *(__n128 *)(v28 + 144);
    uint64_t v34 = *(void *)(v28 + 160);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(v28 + 112);
    *(void *)(a1 + 152) = v34;
    *(__n128 *)(a1 + 136) = result;
    *(_OWORD *)(a1 + 120) = v33;
  }
  else
  {
    __int16 v36 = 3;
    unsigned __int8 v35 = 5;
    uint64_t v20 = cnframework::GenericEvent::GetEventType(this, v11, v12, v13, v14, v15, v16, v17);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v36, &v35, "Attempted to cast a GenericEvent of type %s to type %s.", v21, v22, v23, v24, v25, *(unsigned char *)(v20 + 8));
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = &unk_1EDD139E0;
    *(unsigned char *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    *(unsigned char *)(a1 + 48) = 0;
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
    *(unsigned char *)(a1 + 72) = 0;
    *(void *)(a1 + 80) = 0;
    *(void *)(a1 + 88) = 0;
    *(void *)(a1 + 96) = 0x7FF8000000000000;
    *(int64x2_t *)(a1 + 112) = vdupq_n_s64(0x7FF8000000000000uLL);
    *(void *)(a1 + 128) = 0x7FF8000000000000;
    *(void *)(a1 + 136) = 0;
    *(void *)(a1 + 144) = 0x7FF8000000000000;
    result.n128_u64[0] = 0xFFFFFFFFLL;
    *(void *)(a1 + 152) = 0xFFFFFFFFLL;
  }
  return result;
}

void sub_18E0BD3DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::exception a12)
{
}

void sub_18E0BD3F4()
{
}

void *sub_18E0BD408()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1EDD1D970;
  return result;
}

void sub_18E0BD440(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1D970;
}

void sub_18E0BD468(int a1, raven::RavenActivityStateEstimatorActiveObject **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  sub_18E0BD4F4((uint64_t)v15, this, (uint64_t)this, a4, a5, a6, a7, a8);
  raven::RavenActivityStateEstimatorActiveObject::HandleEvent(v8, (const raven::TimeMarkEvent *)v15, v9, v10, v11, v12, v13, v14);
}

uint64_t sub_18E0BD4A8(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD0A010)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0BD4E8()
{
  return &unk_1EDD0A010;
}

__n128 sub_18E0BD4F4(uint64_t a1, cnframework::GenericEvent *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t EventType = cnframework::GenericEvent::GetEventType(this, (uint64_t)this, a3, a4, a5, a6, a7, a8);
  {
    uint64_t v18 = *((void *)this + 2);
    if (v18) {
      uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 16))(v18);
    }
    else {
      uint64_t v19 = MEMORY[0x1E4FBA3D8];
    }
    uint64_t v27 = (const char *)(*(void *)(v19 + 8) & 0x7FFFFFFFFFFFFFFFLL);
    if (v27 != (const char *)((unint64_t)off_1EDD05030 & 0x7FFFFFFFFFFFFFFFLL))
    {
      if (strcmp(v27, (const char *)((unint64_t)off_1EDD05030 & 0x7FFFFFFFFFFFFFFFLL)))
      {
        v34.__vftable = 0;
        std::bad_cast::bad_cast(&v34);
        v34.__vftable = (std::bad_cast_vtbl *)&unk_1EDD12A18;
        sub_18E0BA8B8();
      }
    }
    uint64_t v28 = *((void *)this + 2);
    *(void *)a1 = &unk_1EDD13820;
    long long v29 = *(_OWORD *)(v28 + 32);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(v28 + 16);
    *(_OWORD *)(a1 + 24) = v29;
    __n128 result = *(__n128 *)(v28 + 80);
    long long v30 = *(_OWORD *)(v28 + 96);
    long long v31 = *(_OWORD *)(v28 + 64);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(v28 + 48);
    *(_OWORD *)(a1 + 88) = v30;
    *(__n128 *)(a1 + 72) = result;
    *(_OWORD *)(a1 + 56) = v31;
  }
  else
  {
    __int16 v33 = 3;
    unsigned __int8 v32 = 5;
    uint64_t v20 = cnframework::GenericEvent::GetEventType(this, v11, v12, v13, v14, v15, v16, v17);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v33, &v32, "Attempted to cast a GenericEvent of type %s to type %s.", v21, v22, v23, v24, v25, *(unsigned char *)(v20 + 8));
    result.n128_u64[0] = 0;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(void *)(a1 + 72) = 0;
    *(void *)(a1 + 80) = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = &unk_1EDD13820;
    *(unsigned char *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    *(unsigned char *)(a1 + 48) = 0;
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
    *(unsigned char *)(a1 + 72) = 0;
    *(void *)(a1 + 88) = 0;
    *(void *)(a1 + 96) = 0x7FF8000000000000;
  }
  return result;
}

void sub_18E0BD6AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::exception a12)
{
}

void sub_18E0BD6C4()
{
}

void *sub_18E0BD6D8()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1EDD1D1E0;
  return result;
}

void sub_18E0BD710(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1D1E0;
}

void sub_18E0BD738(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  sub_18E0BD958((uint64_t)v31, this, (uint64_t)this, a4, a5, a6, a7, a8);
  if ((*(uint64_t (**)(uint64_t))(*(void *)v8 + 104))(v8))
  {
    uint64_t v9 = (cnprint::CNPrinter *)raven::RavenConvergenceEstimator::HandleEvent((raven::RavenConvergenceEstimator *)(v8 + 3000), (const raven::AccessoryVehicleSpeedEvent *)v31);
    if (v9 && cnprint::CNPrinter::GetLogLevel(v9) <= 1)
    {
      __int16 v36 = 12;
      unsigned __int8 v35 = 1;
      v34[0] = (*(uint64_t (**)(void *))(v31[0] + 16))(v31);
      v34[1] = v10;
      (*(void (**)(void **__return_ptr, void *))(v31[0] + 24))(v32, v31);
      if (v33 >= 0) {
        uint64_t v16 = v32;
      }
      else {
        uint64_t v16 = (void **)v32[0];
      }
      char v17 = cnprint::CNLogFormatter::FormatWarning(v8 + 496, (uint64_t)v34, "Failed to handle event - %s.", v11, v12, v13, v14, v15, (uint64_t)v16);
      if (*(char *)(v8 + 519) >= 0) {
        LOBYTE(v23) = v17;
      }
      else {
        uint64_t v23 = *(void *)(v8 + 496);
      }
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v36, &v35, "%s", v18, v19, v20, v21, v22, v23);
      if (v33 < 0) {
        operator delete(v32[0]);
      }
    }
  }
  else
  {
    LOWORD(v32[0]) = 12;
    LOBYTE(v34[0]) = 2;
    unsigned __int8 v24 = cnprint::CNLogFormatter::FormatGeneral((const void **)(v8 + 496), "Warning,RavenConvergenceEstimatorActiveObject is not configured");
    if (*(char *)(v8 + 519) >= 0) {
      LOBYTE(v30) = v24;
    }
    else {
      uint64_t v30 = *(void *)(v8 + 496);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v32, (unsigned __int8 *)v34, "%s", v25, v26, v27, v28, v29, v30);
  }
  raven::AccessoryVehicleSpeedEvent::~AccessoryVehicleSpeedEvent((raven::AccessoryVehicleSpeedEvent *)v31);
}

void sub_18E0BD8E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(char *)(v2 - 57) < 0) {
    operator delete(*(void **)(v2 - 80));
  }
  raven::AccessoryVehicleSpeedEvent::~AccessoryVehicleSpeedEvent((raven::AccessoryVehicleSpeedEvent *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_18E0BD90C(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09EB0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0BD94C()
{
  return &unk_1EDD09EB0;
}

void sub_18E0BD958(uint64_t a1, cnframework::GenericEvent *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t EventType = cnframework::GenericEvent::GetEventType(this, (uint64_t)this, a3, a4, a5, a6, a7, a8);
  {
    uint64_t v18 = *((void *)this + 2);
    if (v18) {
      uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 16))(v18);
    }
    else {
      uint64_t v19 = MEMORY[0x1E4FBA3D8];
    }
    uint64_t v26 = (const char *)(*(void *)(v19 + 8) & 0x7FFFFFFFFFFFFFFFLL);
    if (v26 != (const char *)((unint64_t)off_1EDD057D0 & 0x7FFFFFFFFFFFFFFFLL))
    {
      if (strcmp(v26, (const char *)((unint64_t)off_1EDD057D0 & 0x7FFFFFFFFFFFFFFFLL)))
      {
        v39.__vftable = 0;
        std::bad_cast::bad_cast(&v39);
        v39.__vftable = (std::bad_cast_vtbl *)&unk_1EDD12A18;
        sub_18E0BA8B8();
      }
    }
    uint64_t v27 = *((void *)this + 2);
    *(void *)a1 = &unk_1EDD14A68;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(v27 + 16);
    long long v28 = *(_OWORD *)(v27 + 32);
    long long v29 = *(_OWORD *)(v27 + 48);
    long long v30 = *(_OWORD *)(v27 + 64);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(v27 + 80);
    *(_OWORD *)(a1 + 56) = v30;
    *(_OWORD *)(a1 + 40) = v29;
    *(_OWORD *)(a1 + 24) = v28;
    long long v31 = *(_OWORD *)(v27 + 96);
    long long v32 = *(_OWORD *)(v27 + 112);
    long long v33 = *(_OWORD *)(v27 + 128);
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(v27 + 144);
    *(_OWORD *)(a1 + 120) = v33;
    *(_OWORD *)(a1 + 104) = v32;
    *(_OWORD *)(a1 + 88) = v31;
    long long v34 = *(_OWORD *)(v27 + 160);
    long long v35 = *(_OWORD *)(v27 + 176);
    long long v36 = *(_OWORD *)(v27 + 192);
    *(void *)(a1 + 200) = *(void *)(v27 + 208);
    *(_OWORD *)(a1 + 184) = v36;
    *(_OWORD *)(a1 + 168) = v35;
    *(_OWORD *)(a1 + 152) = v34;
    *(void *)(a1 + 208) = 0;
    *(void *)(a1 + 216) = 0;
    *(void *)(a1 + 224) = 0;
    sub_18E0BDC10((void *)(a1 + 208), *(const void **)(v27 + 216), *(void *)(v27 + 224), (uint64_t)(*(void *)(v27 + 224) - *(void *)(v27 + 216)) >> 3);
    *(void *)(a1 + 232) = 0;
    *(void *)(a1 + 240) = 0;
    *(void *)(a1 + 248) = 0;
    sub_18E0BDC10((void *)(a1 + 232), *(const void **)(v27 + 240), *(void *)(v27 + 248), (uint64_t)(*(void *)(v27 + 248) - *(void *)(v27 + 240)) >> 3);
    *(_WORD *)(a1 + 256) = *(_WORD *)(v27 + 264);
  }
  else
  {
    __int16 v38 = 3;
    unsigned __int8 v37 = 5;
    uint64_t v20 = cnframework::GenericEvent::GetEventType(this, v11, v12, v13, v14, v15, v16, v17);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v38, &v37, "Attempted to cast a GenericEvent of type %s to type %s.", v21, v22, v23, v24, v25, *(unsigned char *)(v20 + 8));
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 248) = 0u;
    *(_OWORD *)(a1 + 232) = 0u;
    *(_OWORD *)(a1 + 216) = 0u;
    *(_OWORD *)(a1 + 200) = 0u;
    *(_OWORD *)(a1 + 184) = 0u;
    *(_OWORD *)(a1 + 168) = 0u;
    *(_OWORD *)(a1 + 152) = 0u;
    *(_OWORD *)(a1 + 136) = 0u;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = &unk_1EDD14A68;
    *(unsigned char *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    *(unsigned char *)(a1 + 48) = 0;
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
    *(unsigned char *)(a1 + 72) = 0;
    *(void *)(a1 + 80) = 0;
    *(void *)(a1 + 88) = 0;
    *(unsigned char *)(a1 + 120) = 0;
    *(void *)(a1 + 96) = 0x7FF8000000000000;
    *(void *)(a1 + 104) = 0;
    *(void *)(a1 + 112) = 0;
    *(unsigned char *)(a1 + 144) = 0;
    *(void *)(a1 + 128) = 0;
    *(void *)(a1 + 136) = 0;
    *(unsigned char *)(a1 + 168) = 0;
    *(void *)(a1 + 152) = 0;
    *(void *)(a1 + 160) = 0;
    *(void *)(a1 + 176) = 0;
    *(void *)(a1 + 184) = 0;
    *(void *)(a1 + 192) = 0x7FF8000000000000;
    *(_OWORD *)(a1 + 204) = 0u;
    *(_OWORD *)(a1 + 220) = 0u;
    *(_OWORD *)(a1 + 236) = 0u;
    *(void *)(a1 + 250) = 0;
  }
}

void sub_18E0BDBE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::exception a12)
{
}

void *sub_18E0BDC10(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    __n128 result = sub_18DFFA7B0(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      __n128 result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_18E0BDC70(_Unwind_Exception *exception_object)
{
  long long v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_18E0BDC90()
{
}

void *sub_18E0BDCA4()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1EDD1CF78;
  return result;
}

void sub_18E0BDCDC(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1CF78;
}

void sub_18E0BDD04(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  __n128 v9 = sub_18E0BDF10((uint64_t)v31, this, (uint64_t)this, a4, a5, a6, a7, a8);
  if ((*(uint64_t (**)(uint64_t, __n128))(*(void *)v8 + 104))(v8, v9))
  {
    raven::RavenEstimator::HandleActivityStateEvent((raven::RavenEstimator *)(v8 + 3000), (const raven::ActivityStateEvent *)v31);
    if (v10 && cnprint::CNPrinter::GetLogLevel(v10) <= 1)
    {
      __int16 v36 = 12;
      unsigned __int8 v35 = 1;
      v34[0] = (*(uint64_t (**)(void *))(v31[0] + 16))(v31);
      v34[1] = v11;
      (*(void (**)(void **__return_ptr, void *))(v31[0] + 24))(v32, v31);
      if (v33 >= 0) {
        uint64_t v17 = v32;
      }
      else {
        uint64_t v17 = (void **)v32[0];
      }
      cnprint::CNLogFormatter::FormatWarning(v8 + 496, (uint64_t)v34, "Failed to handle event - %s.", v12, v13, v14, v15, v16, (uint64_t)v17);
      if (*(char *)(v8 + 519) >= 0) {
        LOBYTE(v23) = v8 - 16;
      }
      else {
        uint64_t v23 = *(void *)(v8 + 496);
      }
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v36, &v35, "%s", v18, v19, v20, v21, v22, v23);
      if (v33 < 0) {
        operator delete(v32[0]);
      }
    }
  }
  else
  {
    LOWORD(v32[0]) = 12;
    LOBYTE(v34[0]) = 2;
    unsigned __int8 v24 = cnprint::CNLogFormatter::FormatGeneral((const void **)(v8 + 496), "Warning,RavenConvergenceEstimatorActiveObject is not configured");
    if (*(char *)(v8 + 519) >= 0) {
      LOBYTE(v30) = v24;
    }
    else {
      uint64_t v30 = *(void *)(v8 + 496);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v32, (unsigned __int8 *)v34, "%s", v25, v26, v27, v28, v29, v30);
  }
}

void sub_18E0BDEA8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 57) < 0) {
    operator delete(*(void **)(v1 - 80));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_18E0BDEC4(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09E40)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0BDF04()
{
  return &unk_1EDD09E40;
}

__n128 sub_18E0BDF10(uint64_t a1, cnframework::GenericEvent *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t EventType = cnframework::GenericEvent::GetEventType(this, (uint64_t)this, a3, a4, a5, a6, a7, a8);
  {
    uint64_t v18 = *((void *)this + 2);
    if (v18) {
      uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 16))(v18);
    }
    else {
      uint64_t v19 = MEMORY[0x1E4FBA3D8];
    }
    uint64_t v27 = (const char *)(*(void *)(v19 + 8) & 0x7FFFFFFFFFFFFFFFLL);
    if (v27 != (const char *)((unint64_t)off_1EDD052C8 & 0x7FFFFFFFFFFFFFFFLL))
    {
      if (strcmp(v27, (const char *)((unint64_t)off_1EDD052C8 & 0x7FFFFFFFFFFFFFFFLL)))
      {
        v39.__vftable = 0;
        std::bad_cast::bad_cast(&v39);
        v39.__vftable = (std::bad_cast_vtbl *)&unk_1EDD12A18;
        sub_18E0BA8B8();
      }
    }
    uint64_t v28 = *((void *)this + 2);
    *(void *)a1 = &unk_1EDD140B8;
    long long v29 = *(_OWORD *)(v28 + 48);
    long long v30 = *(_OWORD *)(v28 + 64);
    long long v31 = *(_OWORD *)(v28 + 32);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(v28 + 16);
    *(_OWORD *)(a1 + 56) = v30;
    *(_OWORD *)(a1 + 40) = v29;
    *(_OWORD *)(a1 + 24) = v31;
    long long v32 = *(_OWORD *)(v28 + 112);
    long long v33 = *(_OWORD *)(v28 + 128);
    long long v34 = *(_OWORD *)(v28 + 96);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(v28 + 80);
    *(_OWORD *)(a1 + 120) = v33;
    *(_OWORD *)(a1 + 104) = v32;
    *(_OWORD *)(a1 + 88) = v34;
    long long v35 = *(_OWORD *)(v28 + 160);
    __n128 result = *(__n128 *)(v28 + 176);
    uint64_t v36 = *(void *)(v28 + 192);
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(v28 + 144);
    *(void *)(a1 + 184) = v36;
    *(__n128 *)(a1 + 168) = result;
    *(_OWORD *)(a1 + 152) = v35;
  }
  else
  {
    __int16 v38 = 3;
    unsigned __int8 v37 = 5;
    uint64_t v20 = cnframework::GenericEvent::GetEventType(this, v11, v12, v13, v14, v15, v16, v17);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v38, &v37, "Attempted to cast a GenericEvent of type %s to type %s.", v21, v22, v23, v24, v25, *(unsigned char *)(v20 + 8));
    result.n128_u64[0] = 0;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = &unk_1EDD140B8;
    *(unsigned char *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    *(unsigned char *)(a1 + 48) = 0;
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
    *(unsigned char *)(a1 + 72) = 0;
    *(void *)(a1 + 80) = 0;
    *(void *)(a1 + 88) = 0;
    *(void *)(a1 + 96) = 0x7FF8000000000000;
    *(void *)(a1 + 104) = 0;
    *(void *)(a1 + 112) = 0x3FF0000000000000;
    *(void *)(a1 + 184) = 0;
    *(_OWORD *)(a1 + 168) = 0u;
    *(_OWORD *)(a1 + 152) = 0u;
    *(_OWORD *)(a1 + 136) = 0u;
    *(_OWORD *)(a1 + 120) = 0u;
  }
  return result;
}

void sub_18E0BE114(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::exception a12)
{
}

void sub_18E0BE12C()
{
}

void *sub_18E0BE140()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1EDD1D028;
  return result;
}

void sub_18E0BE178(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1D028;
}

void sub_18E0BE1A0(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  __n128 v9 = sub_18E0BE3AC((uint64_t)v31, this, (uint64_t)this, a4, a5, a6, a7, a8);
  if ((*(uint64_t (**)(uint64_t, __n128))(*(void *)v8 + 104))(v8, v9))
  {
    uint64_t v10 = (cnprint::CNPrinter *)raven::RavenConvergenceEstimator::HandleEvent((raven::RavenConvergenceEstimator *)(v8 + 3000), (const raven::AltitudeChangeEvent *)v31);
    if (v10 && cnprint::CNPrinter::GetLogLevel(v10) <= 1)
    {
      __int16 v36 = 12;
      unsigned __int8 v35 = 1;
      v34[0] = (*(uint64_t (**)(void *))(v31[0] + 16))(v31);
      v34[1] = v11;
      (*(void (**)(void **__return_ptr, void *))(v31[0] + 24))(v32, v31);
      if (v33 >= 0) {
        uint64_t v17 = v32;
      }
      else {
        uint64_t v17 = (void **)v32[0];
      }
      cnprint::CNLogFormatter::FormatWarning(v8 + 496, (uint64_t)v34, "Failed to handle event - %s.", v12, v13, v14, v15, v16, (uint64_t)v17);
      if (*(char *)(v8 + 519) >= 0) {
        LOBYTE(v23) = v8 - 16;
      }
      else {
        uint64_t v23 = *(void *)(v8 + 496);
      }
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v36, &v35, "%s", v18, v19, v20, v21, v22, v23);
      if (v33 < 0) {
        operator delete(v32[0]);
      }
    }
  }
  else
  {
    LOWORD(v32[0]) = 12;
    LOBYTE(v34[0]) = 2;
    unsigned __int8 v24 = cnprint::CNLogFormatter::FormatGeneral((const void **)(v8 + 496), "Warning,RavenConvergenceEstimatorActiveObject is not configured");
    if (*(char *)(v8 + 519) >= 0) {
      LOBYTE(v30) = v24;
    }
    else {
      uint64_t v30 = *(void *)(v8 + 496);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v32, (unsigned __int8 *)v34, "%s", v25, v26, v27, v28, v29, v30);
  }
}

void sub_18E0BE344(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 57) < 0) {
    operator delete(*(void **)(v1 - 80));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_18E0BE360(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09E60)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0BE3A0()
{
  return &unk_1EDD09E60;
}

__n128 sub_18E0BE3AC(uint64_t a1, cnframework::GenericEvent *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t EventType = cnframework::GenericEvent::GetEventType(this, (uint64_t)this, a3, a4, a5, a6, a7, a8);
  {
    uint64_t v18 = *((void *)this + 2);
    if (v18) {
      uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 16))(v18);
    }
    else {
      uint64_t v19 = MEMORY[0x1E4FBA3D8];
    }
    uint64_t v27 = (const char *)(*(void *)(v19 + 8) & 0x7FFFFFFFFFFFFFFFLL);
    if (v27 != (const char *)((unint64_t)off_1EDD05328 & 0x7FFFFFFFFFFFFFFFLL))
    {
      if (strcmp(v27, (const char *)((unint64_t)off_1EDD05328 & 0x7FFFFFFFFFFFFFFFLL)))
      {
        v39.__vftable = 0;
        std::bad_cast::bad_cast(&v39);
        v39.__vftable = (std::bad_cast_vtbl *)&unk_1EDD12A18;
        sub_18E0BA8B8();
      }
    }
    uint64_t v28 = *((void *)this + 2);
    *(void *)a1 = &unk_1EDD14180;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(v28 + 16);
    long long v29 = *(_OWORD *)(v28 + 64);
    long long v30 = *(_OWORD *)(v28 + 80);
    long long v31 = *(_OWORD *)(v28 + 48);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(v28 + 32);
    *(_OWORD *)(a1 + 72) = v30;
    *(_OWORD *)(a1 + 56) = v29;
    *(_OWORD *)(a1 + 40) = v31;
    long long v32 = *(_OWORD *)(v28 + 128);
    long long v33 = *(_OWORD *)(v28 + 144);
    long long v34 = *(_OWORD *)(v28 + 112);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(v28 + 96);
    *(_OWORD *)(a1 + 136) = v33;
    *(_OWORD *)(a1 + 120) = v32;
    *(_OWORD *)(a1 + 104) = v34;
    __n128 result = *(__n128 *)(v28 + 192);
    long long v35 = *(_OWORD *)(v28 + 208);
    long long v36 = *(_OWORD *)(v28 + 176);
    *(_OWORD *)(a1 + 152) = *(_OWORD *)(v28 + 160);
    *(_OWORD *)(a1 + 200) = v35;
    *(__n128 *)(a1 + 184) = result;
    *(_OWORD *)(a1 + 168) = v36;
  }
  else
  {
    __int16 v38 = 3;
    unsigned __int8 v37 = 5;
    uint64_t v20 = cnframework::GenericEvent::GetEventType(this, v11, v12, v13, v14, v15, v16, v17);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v38, &v37, "Attempted to cast a GenericEvent of type %s to type %s.", v21, v22, v23, v24, v25, *(unsigned char *)(v20 + 8));
    result.n128_u64[0] = 0;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 200) = 0u;
    *(_OWORD *)(a1 + 184) = 0u;
    *(_OWORD *)(a1 + 168) = 0u;
    *(_OWORD *)(a1 + 152) = 0u;
    *(_OWORD *)(a1 + 136) = 0u;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = &unk_1EDD14180;
    *(unsigned char *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    *(unsigned char *)(a1 + 48) = 0;
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
    *(unsigned char *)(a1 + 72) = 0;
    *(void *)(a1 + 80) = 0;
    *(void *)(a1 + 88) = 0;
    *(unsigned char *)(a1 + 120) = 0;
    *(void *)(a1 + 96) = 0x7FF8000000000000;
    *(void *)(a1 + 104) = 0;
    *(void *)(a1 + 112) = 0;
    *(unsigned char *)(a1 + 144) = 0;
    *(void *)(a1 + 128) = 0;
    *(void *)(a1 + 136) = 0;
    *(unsigned char *)(a1 + 168) = 0;
    *(void *)(a1 + 152) = 0;
    *(void *)(a1 + 160) = 0;
    *(void *)(a1 + 176) = 0;
    *(void *)(a1 + 184) = 0;
    *(void *)(a1 + 192) = 0x7FF8000000000000;
  }
  return result;
}

void sub_18E0BE5D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::exception a12)
{
}

void sub_18E0BE5EC()
{
}

void *sub_18E0BE600()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1EDD1CC08;
  return result;
}

void sub_18E0BE638(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1CC08;
}

void sub_18E0BE660(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  __n128 v9 = sub_18E0BE86C((uint64_t)v31, this, (uint64_t)this, a4, a5, a6, a7, a8);
  if ((*(uint64_t (**)(uint64_t, __n128))(*(void *)v8 + 104))(v8, v9))
  {
    uint64_t v10 = (cnprint::CNPrinter *)raven::RavenConvergenceEstimator::HandleEvent((raven::RavenConvergenceEstimator *)(v8 + 3000), (const raven::AltitudeEvent *)v31);
    if (v10 && cnprint::CNPrinter::GetLogLevel(v10) <= 1)
    {
      __int16 v36 = 12;
      unsigned __int8 v35 = 1;
      v34[0] = (*(uint64_t (**)(void *))(v31[0] + 16))(v31);
      v34[1] = v11;
      (*(void (**)(void **__return_ptr, void *))(v31[0] + 24))(v32, v31);
      if (v33 >= 0) {
        uint64_t v17 = v32;
      }
      else {
        uint64_t v17 = (void **)v32[0];
      }
      cnprint::CNLogFormatter::FormatWarning(v8 + 496, (uint64_t)v34, "Failed to handle event - %s.", v12, v13, v14, v15, v16, (uint64_t)v17);
      if (*(char *)(v8 + 519) >= 0) {
        LOBYTE(v23) = v8 - 16;
      }
      else {
        uint64_t v23 = *(void *)(v8 + 496);
      }
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v36, &v35, "%s", v18, v19, v20, v21, v22, v23);
      if (v33 < 0) {
        operator delete(v32[0]);
      }
    }
  }
  else
  {
    LOWORD(v32[0]) = 12;
    LOBYTE(v34[0]) = 2;
    unsigned __int8 v24 = cnprint::CNLogFormatter::FormatGeneral((const void **)(v8 + 496), "Warning,RavenConvergenceEstimatorActiveObject is not configured");
    if (*(char *)(v8 + 519) >= 0) {
      LOBYTE(v30) = v24;
    }
    else {
      uint64_t v30 = *(void *)(v8 + 496);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v32, (unsigned __int8 *)v34, "%s", v25, v26, v27, v28, v29, v30);
  }
}

void sub_18E0BE804(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 57) < 0) {
    operator delete(*(void **)(v1 - 80));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_18E0BE820(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09DA0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0BE860()
{
  return &unk_1EDD09DA0;
}

__n128 sub_18E0BE86C(uint64_t a1, cnframework::GenericEvent *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t EventType = cnframework::GenericEvent::GetEventType(this, (uint64_t)this, a3, a4, a5, a6, a7, a8);
  {
    uint64_t v18 = *((void *)this + 2);
    if (v18) {
      uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 16))(v18);
    }
    else {
      uint64_t v19 = MEMORY[0x1E4FBA3D8];
    }
    uint64_t v27 = (const char *)(*(void *)(v19 + 8) & 0x7FFFFFFFFFFFFFFFLL);
    if (v27 != (const char *)((unint64_t)off_1EDD04FB8 & 0x7FFFFFFFFFFFFFFFLL))
    {
      if (strcmp(v27, (const char *)((unint64_t)off_1EDD04FB8 & 0x7FFFFFFFFFFFFFFFLL)))
      {
        v35.__vftable = 0;
        std::bad_cast::bad_cast(&v35);
        v35.__vftable = (std::bad_cast_vtbl *)&unk_1EDD12A18;
        sub_18E0BA8B8();
      }
    }
    uint64_t v28 = *((void *)this + 2);
    *(void *)a1 = &unk_1EDD13730;
    long long v30 = *(_OWORD *)(v28 + 32);
    long long v29 = *(_OWORD *)(v28 + 48);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(v28 + 16);
    *(_OWORD *)(a1 + 24) = v30;
    *(_OWORD *)(a1 + 40) = v29;
    __n128 result = *(__n128 *)(v28 + 96);
    long long v31 = *(_OWORD *)(v28 + 112);
    long long v32 = *(_OWORD *)(v28 + 80);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(v28 + 64);
    *(_OWORD *)(a1 + 104) = v31;
    *(__n128 *)(a1 + 88) = result;
    *(_OWORD *)(a1 + 72) = v32;
  }
  else
  {
    __int16 v34 = 3;
    unsigned __int8 v33 = 5;
    uint64_t v20 = cnframework::GenericEvent::GetEventType(this, v11, v12, v13, v14, v15, v16, v17);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v34, &v33, "Attempted to cast a GenericEvent of type %s to type %s.", v21, v22, v23, v24, v25, *(unsigned char *)(v20 + 8));
    result.n128_u64[0] = 0;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = &unk_1EDD13730;
    *(unsigned char *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    *(unsigned char *)(a1 + 48) = 0;
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
    *(unsigned char *)(a1 + 72) = 0;
    *(void *)(a1 + 80) = 0;
    *(void *)(a1 + 88) = 0;
    *(void *)(a1 + 96) = 0x7FF8000000000000;
  }
  return result;
}

void sub_18E0BEA38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::exception a12)
{
}

void sub_18E0BEA50()
{
}

void *sub_18E0BEA64()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1EDD1D238;
  return result;
}

void sub_18E0BEA9C(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1D238;
}

void sub_18E0BEAC4(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  __n128 v9 = sub_18E0BEFB4((uint64_t)v70, this, (uint64_t)this, a4, a5, a6, a7, a8);
  if ((*(uint64_t (**)(uint64_t, __n128))(*(void *)v8 + 104))(v8, v9))
  {
    if (v72 == *(unsigned char *)(v8 + 3056))
    {
      LOWORD(v76) = 12;
      LOBYTE(v78) = 3;
      long long v74 = v71;
      cnprint::CNLogFormatter::FormatGeneral(v8 + 496, (uint64_t)&v74, "EstimatorErrorRecoveryEvent received, type, %u", v73);
      if (*(char *)(v8 + 519) >= 0) {
        LOBYTE(v15) = v8 - 16;
      }
      else {
        uint64_t v15 = *(void *)(v8 + 496);
      }
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v76, (unsigned __int8 *)&v78, "%s", v10, v11, v12, v13, v14, v15);
      switch(v73)
      {
        case 3u:
          LOWORD(v76) = 12;
          LOBYTE(v78) = 3;
          long long v74 = v71;
          cnprint::CNLogFormatter::FormatGeneral(v8 + 496, (uint64_t)&v74, "Initiating RavenErrorRecoveryAction::InflatePositionUncertainty");
          if (*(char *)(v8 + 519) >= 0) {
            LOBYTE(v21) = v8 - 16;
          }
          else {
            uint64_t v21 = *(void *)(v8 + 496);
          }
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v76, (unsigned __int8 *)&v78, "%s", v16, v17, v18, v19, v20, v21);
          raven::RavenConvergenceEstimator::InflatePositionUncertainty((raven::RavenConvergenceEstimator *)(v8 + 3000), *(double *)(*(void *)(v8 + 4168) + 1440));
          break;
        case 4u:
          LOWORD(v76) = 12;
          LOBYTE(v78) = 3;
          long long v74 = v71;
          cnprint::CNLogFormatter::FormatGeneral(v8 + 496, (uint64_t)&v74, "Initiating RavenErrorRecoveryAction::InflateVelocityUncertainty");
          if (*(char *)(v8 + 519) >= 0) {
            LOBYTE(v39) = v8 - 16;
          }
          else {
            uint64_t v39 = *(void *)(v8 + 496);
          }
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v76, (unsigned __int8 *)&v78, "%s", v34, v35, v36, v37, v38, v39);
          raven::RavenConvergenceEstimator::InflateVelocityUncertainty((raven::RavenConvergenceEstimator *)(v8 + 3000), *(double *)(*(void *)(v8 + 4168) + 1448));
          break;
        case 5u:
          LOWORD(v76) = 12;
          LOBYTE(v78) = 3;
          long long v74 = v71;
          cnprint::CNLogFormatter::FormatGeneral(v8 + 496, (uint64_t)&v74, "Initiating RavenErrorRecoveryAction::InflateXOUncertainty");
          if (*(char *)(v8 + 519) >= 0) {
            LOBYTE(v45) = v8 - 16;
          }
          else {
            uint64_t v45 = *(void *)(v8 + 496);
          }
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v76, (unsigned __int8 *)&v78, "%s", v40, v41, v42, v43, v44, v45);
          raven::RavenConvergenceEstimator::InflateXOUncertainty((raven::RavenConvergenceEstimator *)(v8 + 3000), *(double *)(*(void *)(v8 + 4168) + 1456));
          break;
        case 6u:
          LOWORD(v76) = 12;
          LOBYTE(v78) = 3;
          long long v74 = v71;
          cnprint::CNLogFormatter::FormatGeneral(v8 + 496, (uint64_t)&v74, "Initiating RavenErrorRecoveryAction::ResetAO");
          if (*(char *)(v8 + 519) >= 0) {
            LOBYTE(v51) = v8 - 16;
          }
          else {
            uint64_t v51 = *(void *)(v8 + 496);
          }
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v76, (unsigned __int8 *)&v78, "%s", v46, v47, v48, v49, v50, v51);
          (*(void (**)(uint64_t))(*(void *)v8 + 48))(v8);
          break;
        case 7u:
          LOWORD(v76) = 12;
          LOBYTE(v78) = 3;
          long long v74 = v71;
          cnprint::CNLogFormatter::FormatGeneral(v8 + 496, (uint64_t)&v74, "Initiating RavenErrorRecoveryAction::ResetEstimator");
          if (*(char *)(v8 + 519) >= 0) {
            LOBYTE(v57) = v8 - 16;
          }
          else {
            uint64_t v57 = *(void *)(v8 + 496);
          }
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v76, (unsigned __int8 *)&v78, "%s", v52, v53, v54, v55, v56, v57);
          raven::RavenConvergenceEstimator::Reset((raven::RavenConvergenceEstimator *)(v8 + 3000));
          break;
        case 9u:
          LOWORD(v76) = 12;
          LOBYTE(v78) = 3;
          long long v74 = v71;
          cnprint::CNLogFormatter::FormatGeneral(v8 + 496, (uint64_t)&v74, "Initiating RavenErrorRecoveryAction::ResetXOStates");
          if (*(char *)(v8 + 519) >= 0) {
            LOBYTE(v69) = v8 - 16;
          }
          else {
            uint64_t v69 = *(void *)(v8 + 496);
          }
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v76, (unsigned __int8 *)&v78, "%s", v64, v65, v66, v67, v68, v69);
          raven::RavenConvergenceEstimator::ResetOscillatorStates((raven::RavenConvergenceEstimator *)(v8 + 3000));
          break;
        default:
          LOWORD(v76) = 12;
          LOBYTE(v78) = 4;
          long long v74 = v71;
          cnprint::CNLogFormatter::FormatGeneral(v8 + 496, (uint64_t)&v74, "Unhandled RavenErrorRecoveryAction, type, %u", v73);
          if (*(char *)(v8 + 519) >= 0) {
            LOBYTE(v63) = v8 - 16;
          }
          else {
            uint64_t v63 = *(void *)(v8 + 496);
          }
          cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v76, (unsigned __int8 *)&v78, "%s", v58, v59, v60, v61, v62, v63);
          break;
      }
    }
  }
  else
  {
    __int16 v78 = 12;
    unsigned __int8 v77 = 2;
    long long v76 = v71;
    sub_18DEDE7B0(&v74, "EstimatorErrorRecoveryEvent");
    if (v75 >= 0) {
      uint64_t v27 = &v74;
    }
    else {
      uint64_t v27 = (long long *)v74;
    }
    cnprint::CNLogFormatter::FormatWarning(v8 + 496, (uint64_t)&v76, "RavenConvergenceEstimatorActiveObject not configured, cannot handle event, %s", v22, v23, v24, v25, v26, (uint64_t)v27);
    if (*(char *)(v8 + 519) >= 0) {
      LOBYTE(v33) = v8 - 16;
    }
    else {
      uint64_t v33 = *(void *)(v8 + 496);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v78, &v77, "%s", v28, v29, v30, v31, v32, v33);
    if (v75 < 0) {
      operator delete((void *)v74);
    }
  }
}

void sub_18E0BEF30(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 73) < 0) {
    operator delete(*(void **)(v1 - 96));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_18E0BEF68(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09EC0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0BEFA8()
{
  return &unk_1EDD09EC0;
}

__n128 sub_18E0BEFB4(uint64_t a1, cnframework::GenericEvent *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t EventType = cnframework::GenericEvent::GetEventType(this, (uint64_t)this, a3, a4, a5, a6, a7, a8);
  {
    uint64_t v18 = *((void *)this + 2);
    if (v18) {
      uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 16))(v18);
    }
    else {
      uint64_t v19 = MEMORY[0x1E4FBA3D8];
    }
    uint64_t v27 = (const char *)(*(void *)(v19 + 8) & 0x7FFFFFFFFFFFFFFFLL);
    if (v27 != (const char *)((unint64_t)off_1EDD058A8 & 0x7FFFFFFFFFFFFFFFLL))
    {
      if (strcmp(v27, (const char *)((unint64_t)off_1EDD058A8 & 0x7FFFFFFFFFFFFFFFLL)))
      {
        v35.__vftable = 0;
        std::bad_cast::bad_cast(&v35);
        v35.__vftable = (std::bad_cast_vtbl *)&unk_1EDD12A18;
        sub_18E0BA8B8();
      }
    }
    uint64_t v28 = *((void *)this + 2);
    *(void *)a1 = &unk_1EDD14C20;
    long long v30 = *(_OWORD *)(v28 + 32);
    long long v29 = *(_OWORD *)(v28 + 48);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(v28 + 16);
    *(_OWORD *)(a1 + 24) = v30;
    *(_OWORD *)(a1 + 40) = v29;
    long long v31 = *(_OWORD *)(v28 + 80);
    __n128 result = *(__n128 *)(v28 + 96);
    __int16 v32 = *(_WORD *)(v28 + 112);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(v28 + 64);
    *(_WORD *)(a1 + 104) = v32;
    *(__n128 *)(a1 + 88) = result;
    *(_OWORD *)(a1 + 72) = v31;
  }
  else
  {
    __int16 v34 = 3;
    unsigned __int8 v33 = 5;
    uint64_t v20 = cnframework::GenericEvent::GetEventType(this, v11, v12, v13, v14, v15, v16, v17);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v34, &v33, "Attempted to cast a GenericEvent of type %s to type %s.", v21, v22, v23, v24, v25, *(unsigned char *)(v20 + 8));
    result.n128_u64[0] = 0;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = &unk_1EDD14C20;
    *(unsigned char *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    *(unsigned char *)(a1 + 48) = 0;
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
    *(unsigned char *)(a1 + 72) = 0;
    *(void *)(a1 + 80) = 0;
    *(void *)(a1 + 88) = 0;
    *(void *)(a1 + 96) = 0x7FF8000000000000;
    *(void *)(a1 + 104) = 0;
    *(unsigned char *)(a1 + 105) = 0;
  }
  return result;
}

void sub_18E0BF184(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::exception a12)
{
}

uint64_t sub_18E0BF198(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

void *sub_18E0BF1A4@<X0>(void *a1@<X8>)
{
  return sub_18DEDE7B0(a1, "EstimatorErrorRecoveryEvent");
}

void sub_18E0BF1B8()
{
}

void *sub_18E0BF1CC()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1EDD1D080;
  return result;
}

void sub_18E0BF204(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1D080;
}

void sub_18E0BF22C(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  __n128 v9 = sub_18E0BC96C((uint64_t)v31, this, (uint64_t)this, a4, a5, a6, a7, a8);
  if ((*(uint64_t (**)(uint64_t, __n128))(*(void *)v8 + 104))(v8, v9))
  {
    raven::RavenEstimator::HandleFitnessSessionEvent((raven::RavenEstimator *)(v8 + 3000), (const raven::FitnessSessionEvent *)v31);
    if (v10 && cnprint::CNPrinter::GetLogLevel(v10) <= 1)
    {
      __int16 v36 = 12;
      unsigned __int8 v35 = 1;
      v34[0] = (*(uint64_t (**)(void *))(v31[0] + 16))(v31);
      v34[1] = v11;
      (*(void (**)(void **__return_ptr, void *))(v31[0] + 24))(v32, v31);
      if (v33 >= 0) {
        uint64_t v17 = v32;
      }
      else {
        uint64_t v17 = (void **)v32[0];
      }
      cnprint::CNLogFormatter::FormatWarning(v8 + 496, (uint64_t)v34, "Failed to handle event - %s.", v12, v13, v14, v15, v16, (uint64_t)v17);
      if (*(char *)(v8 + 519) >= 0) {
        LOBYTE(v23) = v8 - 16;
      }
      else {
        uint64_t v23 = *(void *)(v8 + 496);
      }
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v36, &v35, "%s", v18, v19, v20, v21, v22, v23);
      if (v33 < 0) {
        operator delete(v32[0]);
      }
    }
  }
  else
  {
    LOWORD(v32[0]) = 12;
    LOBYTE(v34[0]) = 2;
    unsigned __int8 v24 = cnprint::CNLogFormatter::FormatGeneral((const void **)(v8 + 496), "Warning,RavenConvergenceEstimatorActiveObject is not configured");
    if (*(char *)(v8 + 519) >= 0) {
      LOBYTE(v30) = v24;
    }
    else {
      uint64_t v30 = *(void *)(v8 + 496);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v32, (unsigned __int8 *)v34, "%s", v25, v26, v27, v28, v29, v30);
  }
}

void sub_18E0BF3D0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 57) < 0) {
    operator delete(*(void **)(v1 - 80));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_18E0BF3EC(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09E70)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0BF42C()
{
  return &unk_1EDD09E70;
}

void sub_18E0BF43C()
{
}

void *sub_18E0BF450()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1EDD1D290;
  return result;
}

void sub_18E0BF488(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1D290;
}

void sub_18E0BF4B0(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  sub_18E0BF728((uint64_t)v31, this, (uint64_t)this, a4, a5, a6, a7, a8);
  if ((*(uint64_t (**)(uint64_t))(*(void *)v8 + 104))(v8))
  {
    __n128 v9 = (cnprint::CNPrinter *)raven::RavenConvergenceEstimator::HandleEvent((raven::RavenConvergenceEstimator *)(v8 + 3000), (const raven::GnssPreprocessedMeasurementsEvent *)v31);
    if (v9 && cnprint::CNPrinter::GetLogLevel(v9) <= 1)
    {
      v37[0] = 12;
      unsigned __int8 v36 = 1;
      v35[0] = (*(uint64_t (**)(void *))(v31[0] + 16))(v31);
      v35[1] = v10;
      (*(void (**)(void ***__return_ptr, void *))(v31[0] + 24))(v33, v31);
      if (v34 >= 0) {
        uint64_t v16 = v33;
      }
      else {
        uint64_t v16 = (void ***)v33[0];
      }
      char v17 = cnprint::CNLogFormatter::FormatWarning(v8 + 496, (uint64_t)v35, "Failed to handle event - %s.", v11, v12, v13, v14, v15, (uint64_t)v16);
      if (*(char *)(v8 + 519) >= 0) {
        LOBYTE(v23) = v17;
      }
      else {
        uint64_t v23 = *(void *)(v8 + 496);
      }
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v37, &v36, "%s", v18, v19, v20, v21, v22, v23);
      if (v34 < 0) {
        operator delete(v33[0]);
      }
    }
  }
  else
  {
    LOWORD(v33[0]) = 12;
    LOBYTE(v35[0]) = 2;
    unsigned __int8 v24 = cnprint::CNLogFormatter::FormatGeneral((const void **)(v8 + 496), "Warning,RavenConvergenceEstimatorActiveObject is not configured");
    if (*(char *)(v8 + 519) >= 0) {
      LOBYTE(v30) = v24;
    }
    else {
      uint64_t v30 = *(void *)(v8 + 496);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v33, (unsigned __int8 *)v35, "%s", v25, v26, v27, v28, v29, v30);
  }
  v31[0] = &unk_1EDD154D0;
  v33[0] = (void **)&v32;
  sub_18DEE4B60(v33);
}

void sub_18E0BF68C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (*(char *)(v23 - 65) < 0) {
    operator delete(*(void **)(v23 - 88));
  }
  *(void *)(v23 - 40) = &a23;
  sub_18DEE4B60((void ***)(v23 - 40));
  _Unwind_Resume(a1);
}

uint64_t sub_18E0BF6DC(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09ED0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0BF71C()
{
  return &unk_1EDD09ED0;
}

void sub_18E0BF728(uint64_t a1, cnframework::GenericEvent *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t EventType = cnframework::GenericEvent::GetEventType(this, (uint64_t)this, a3, a4, a5, a6, a7, a8);
  {
    uint64_t v18 = *((void *)this + 2);
    if (v18) {
      uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 16))(v18);
    }
    else {
      uint64_t v19 = MEMORY[0x1E4FBA3D8];
    }
    uint64_t v26 = (const char *)(*(void *)(v19 + 8) & 0x7FFFFFFFFFFFFFFFLL);
    if (v26 != (const char *)((unint64_t)off_1EDD05C28 & 0x7FFFFFFFFFFFFFFFLL)
      && strcmp(v26, (const char *)((unint64_t)off_1EDD05C28 & 0x7FFFFFFFFFFFFFFFLL)))
    {
      v39.__vftable = 0;
      std::bad_cast::bad_cast(&v39);
      v39.__vftable = (std::bad_cast_vtbl *)&unk_1EDD12A18;
      sub_18E0BA8B8();
    }
    uint64_t v27 = *((void *)this + 2);
    *(void *)a1 = &unk_1EDD154D0;
    long long v28 = *(_OWORD *)(v27 + 48);
    long long v29 = *(_OWORD *)(v27 + 64);
    long long v30 = *(_OWORD *)(v27 + 80);
    uint64_t v31 = *(void *)(v27 + 96);
    long long v32 = *(_OWORD *)(v27 + 16);
    long long v33 = *(_OWORD *)(v27 + 32);
    *(void *)(a1 + 96) = 0;
    char v34 = (void *)(a1 + 96);
    *(_OWORD *)(v34 - 9) = v33;
    *(_OWORD *)(v34 - 11) = v32;
    *(v34 - 1) = v31;
    *(_OWORD *)(v34 - 3) = v30;
    *(_OWORD *)(v34 - 5) = v29;
    *(_OWORD *)(v34 - 7) = v28;
    v34[1] = 0;
    void v34[2] = 0;
    unsigned __int8 v35 = *(char **)(v27 + 104);
    unsigned __int8 v36 = *(char **)(v27 + 112);
    sub_18DFF7A80(v34, v35, v36, (v36 - v35) >> 4);
  }
  else
  {
    __int16 v38 = 3;
    unsigned __int8 v37 = 5;
    uint64_t v20 = cnframework::GenericEvent::GetEventType(this, v11, v12, v13, v14, v15, v16, v17);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v38, &v37, "Attempted to cast a GenericEvent of type %s to type %s.", v21, v22, v23, v24, v25, *(unsigned char *)(v20 + 8));
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(void *)(a1 + 88) = 0;
    *(_OWORD *)(a1 + 24) = 0u;
    *(unsigned char *)(a1 + 40) = 0;
    *(unsigned char *)(a1 + 56) = 0;
    *(unsigned char *)(a1 + 72) = 0;
    *(void *)(a1 + 108) = 0;
    *(void *)(a1 + 100) = 0;
    *(_DWORD *)(a1 + 116) = 0;
    *(void *)(a1 + 92) = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = &unk_1EDD154D0;
    *(unsigned char *)(a1 + 24) = 0;
  }
}

void sub_18E0BF924(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::exception a12)
{
}

void sub_18E0BF93C()
{
}

void *sub_18E0BF950()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1EDD1CDC0;
  return result;
}

void sub_18E0BF988(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1CDC0;
}

void sub_18E0BF9B0(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  sub_18E0BFBBC((uint64_t)v30, this, (uint64_t)this, a4, a5, a6, a7, a8);
  if ((*(uint64_t (**)(uint64_t))(*(void *)v8 + 104))(v8))
  {
    __n128 v9 = (cnprint::CNPrinter *)raven::RavenConvergenceEstimator::HandleEvent((raven::RavenConvergenceEstimator *)(v8 + 3000), (const raven::MapVectorEvent *)v30);
    if (v9 && cnprint::CNPrinter::GetLogLevel(v9) <= 1)
    {
      __int16 v35 = 12;
      unsigned __int8 v34 = 1;
      v33[0] = (*(uint64_t (**)(void *))(v30[0] + 16))(v30);
      v33[1] = v10;
      (*(void (**)(void **__return_ptr, void *))(v30[0] + 24))(v31, v30);
      if (v32 >= 0) {
        uint64_t v16 = v31;
      }
      else {
        uint64_t v16 = (void **)v31[0];
      }
      cnprint::CNLogFormatter::FormatWarning(v8 + 496, (uint64_t)v33, "Failed to handle event - %s.", v11, v12, v13, v14, v15, (uint64_t)v16);
      if (*(char *)(v8 + 519) >= 0) {
        LOBYTE(v22) = v8 - 16;
      }
      else {
        uint64_t v22 = *(void *)(v8 + 496);
      }
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v35, &v34, "%s", v17, v18, v19, v20, v21, v22);
      if (v32 < 0) {
        operator delete(v31[0]);
      }
    }
  }
  else
  {
    LOWORD(v31[0]) = 12;
    LOBYTE(v33[0]) = 2;
    unsigned __int8 v23 = cnprint::CNLogFormatter::FormatGeneral((const void **)(v8 + 496), "Warning,RavenConvergenceEstimatorActiveObject is not configured");
    if (*(char *)(v8 + 519) >= 0) {
      LOBYTE(v29) = v23;
    }
    else {
      uint64_t v29 = *(void *)(v8 + 496);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v31, (unsigned __int8 *)v33, "%s", v24, v25, v26, v27, v28, v29);
  }
}

void sub_18E0BFB54(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 57) < 0) {
    operator delete(*(void **)(v1 - 80));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_18E0BFB70(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09DF0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0BFBB0()
{
  return &unk_1EDD09DF0;
}

void sub_18E0BFBBC(uint64_t a1, cnframework::GenericEvent *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t EventType = cnframework::GenericEvent::GetEventType(this, (uint64_t)this, a3, a4, a5, a6, a7, a8);
  {
    uint64_t v18 = *((void *)this + 2);
    if (v18) {
      uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 16))(v18);
    }
    else {
      uint64_t v19 = MEMORY[0x1E4FBA3D8];
    }
    uint64_t v27 = (const char *)(*(void *)(v19 + 8) & 0x7FFFFFFFFFFFFFFFLL);
    if (v27 != (const char *)((unint64_t)off_1EDD05090 & 0x7FFFFFFFFFFFFFFFLL)
      && strcmp(v27, (const char *)((unint64_t)off_1EDD05090 & 0x7FFFFFFFFFFFFFFFLL)))
    {
      v31.__vftable = 0;
      std::bad_cast::bad_cast(&v31);
      v31.__vftable = (std::bad_cast_vtbl *)&unk_1EDD12A18;
      sub_18E0BA8B8();
    }
    uint64_t v28 = *((void *)this + 2);
    *(void *)a1 = &unk_1EDD138E0;
    memcpy((void *)(a1 + 8), (const void *)(v28 + 16), 0x10CuLL);
  }
  else
  {
    __int16 v30 = 3;
    unsigned __int8 v29 = 5;
    uint64_t v20 = cnframework::GenericEvent::GetEventType(this, v11, v12, v13, v14, v15, v16, v17);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v30, &v29, "Attempted to cast a GenericEvent of type %s to type %s.", v21, v22, v23, v24, v25, *(unsigned char *)(v20 + 8));
    *(_OWORD *)(a1 + 248) = 0u;
    *(_OWORD *)(a1 + 232) = 0u;
    *(_OWORD *)(a1 + 216) = 0u;
    *(_OWORD *)(a1 + 200) = 0u;
    *(_OWORD *)(a1 + 184) = 0u;
    *(_OWORD *)(a1 + 168) = 0u;
    *(_OWORD *)(a1 + 152) = 0u;
    *(_OWORD *)(a1 + 136) = 0u;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 264) = 0u;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = &unk_1EDD138E0;
    *(unsigned char *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    *(unsigned char *)(a1 + 48) = 0;
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
    *(unsigned char *)(a1 + 72) = 0;
    *(void *)(a1 + 80) = 0;
    *(void *)(a1 + 88) = 0;
    *(unsigned char *)(a1 + 120) = 0;
    *(void *)(a1 + 96) = 0x7FF8000000000000;
    *(void *)(a1 + 104) = 0;
    *(void *)(a1 + 112) = 0;
    *(unsigned char *)(a1 + 144) = 0;
    *(void *)(a1 + 128) = 0;
    *(void *)(a1 + 136) = 0;
    *(unsigned char *)(a1 + 168) = 0;
    *(void *)(a1 + 152) = 0;
    *(void *)(a1 + 160) = 0;
    int64x2_t v26 = vdupq_n_s64(0x7FF8000000000000uLL);
    *(void *)(a1 + 176) = 0;
    *(void *)(a1 + 184) = 0;
    *(int64x2_t *)(a1 + 192) = v26;
    *(int64x2_t *)(a1 + 208) = v26;
    *(int64x2_t *)(a1 + 224) = v26;
    *(int64x2_t *)(a1 + 240) = v26;
    *(int64x2_t *)(a1 + 256) = v26;
  }
}

void sub_18E0BFDE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::exception a12)
{
}

void sub_18E0BFDF8()
{
}

void *sub_18E0BFE0C()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1EDD1CE70;
  return result;
}

void sub_18E0BFE44(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1CE70;
}

void sub_18E0BFE6C(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  __n128 v9 = sub_18E0C0078((uint64_t)v31, this, (uint64_t)this, a4, a5, a6, a7, a8);
  if ((*(uint64_t (**)(uint64_t, __n128))(*(void *)v8 + 104))(v8, v9))
  {
    raven::RavenEstimator::HandleMountStateEvent((raven::RavenEstimator *)(v8 + 3000), (const raven::MountStateEvent *)v31);
    if (v10 && cnprint::CNPrinter::GetLogLevel(v10) <= 1)
    {
      __int16 v36 = 12;
      unsigned __int8 v35 = 1;
      v34[0] = (*(uint64_t (**)(void *))(v31[0] + 16))(v31);
      v34[1] = v11;
      (*(void (**)(void **__return_ptr, void *))(v31[0] + 24))(v32, v31);
      if (v33 >= 0) {
        uint64_t v17 = v32;
      }
      else {
        uint64_t v17 = (void **)v32[0];
      }
      cnprint::CNLogFormatter::FormatWarning(v8 + 496, (uint64_t)v34, "Failed to handle event - %s.", v12, v13, v14, v15, v16, (uint64_t)v17);
      if (*(char *)(v8 + 519) >= 0) {
        LOBYTE(v23) = v8 - 16;
      }
      else {
        uint64_t v23 = *(void *)(v8 + 496);
      }
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v36, &v35, "%s", v18, v19, v20, v21, v22, v23);
      if (v33 < 0) {
        operator delete(v32[0]);
      }
    }
  }
  else
  {
    LOWORD(v32[0]) = 12;
    LOBYTE(v34[0]) = 2;
    unsigned __int8 v24 = cnprint::CNLogFormatter::FormatGeneral((const void **)(v8 + 496), "Warning,RavenConvergenceEstimatorActiveObject is not configured");
    if (*(char *)(v8 + 519) >= 0) {
      LOBYTE(v30) = v24;
    }
    else {
      uint64_t v30 = *(void *)(v8 + 496);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v32, (unsigned __int8 *)v34, "%s", v25, v26, v27, v28, v29, v30);
  }
}

void sub_18E0C0010(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 57) < 0) {
    operator delete(*(void **)(v1 - 80));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_18E0C002C(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09E10)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0C006C()
{
  return &unk_1EDD09E10;
}

__n128 sub_18E0C0078(uint64_t a1, cnframework::GenericEvent *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t EventType = cnframework::GenericEvent::GetEventType(this, (uint64_t)this, a3, a4, a5, a6, a7, a8);
  {
    uint64_t v18 = *((void *)this + 2);
    if (v18) {
      uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 16))(v18);
    }
    else {
      uint64_t v19 = MEMORY[0x1E4FBA3D8];
    }
    uint64_t v27 = (const char *)(*(void *)(v19 + 8) & 0x7FFFFFFFFFFFFFFFLL);
    if (v27 != (const char *)((unint64_t)off_1EDD05118 & 0x7FFFFFFFFFFFFFFFLL))
    {
      if (strcmp(v27, (const char *)((unint64_t)off_1EDD05118 & 0x7FFFFFFFFFFFFFFFLL)))
      {
        v36.__vftable = 0;
        std::bad_cast::bad_cast(&v36);
        v36.__vftable = (std::bad_cast_vtbl *)&unk_1EDD12A18;
        sub_18E0BA8B8();
      }
    }
    uint64_t v28 = *((void *)this + 2);
    *(void *)a1 = &unk_1EDD13AA8;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(v28 + 16);
    long long v29 = *(_OWORD *)(v28 + 64);
    long long v30 = *(_OWORD *)(v28 + 80);
    long long v31 = *(_OWORD *)(v28 + 48);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(v28 + 32);
    *(_OWORD *)(a1 + 72) = v30;
    *(_OWORD *)(a1 + 56) = v29;
    *(_OWORD *)(a1 + 40) = v31;
    long long v32 = *(_OWORD *)(v28 + 112);
    __n128 result = *(__n128 *)(v28 + 128);
    uint64_t v33 = *(void *)(v28 + 144);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(v28 + 96);
    *(void *)(a1 + 136) = v33;
    *(__n128 *)(a1 + 120) = result;
    *(_OWORD *)(a1 + 104) = v32;
  }
  else
  {
    __int16 v35 = 3;
    unsigned __int8 v34 = 5;
    uint64_t v20 = cnframework::GenericEvent::GetEventType(this, v11, v12, v13, v14, v15, v16, v17);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v35, &v34, "Attempted to cast a GenericEvent of type %s to type %s.", v21, v22, v23, v24, v25, *(unsigned char *)(v20 + 8));
    result.n128_u64[0] = 0;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = &unk_1EDD13AA8;
    *(unsigned char *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    *(unsigned char *)(a1 + 48) = 0;
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
    *(unsigned char *)(a1 + 72) = 0;
    *(void *)(a1 + 80) = 0;
    *(void *)(a1 + 88) = 0;
    *(void *)(a1 + 96) = 0x7FF8000000000000;
    *(void *)(a1 + 104) = 0;
    *(void *)(a1 + 112) = 0x3FF0000000000000;
    *(void *)(a1 + 120) = 0;
    *(void *)(a1 + 128) = 0;
    *(void *)(a1 + 136) = 0;
  }
  return result;
}

void sub_18E0C025C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::exception a12)
{
}

void sub_18E0C0274()
{
}

void *sub_18E0C0288()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1EDD1CEC8;
  return result;
}

void sub_18E0C02C0(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1CEC8;
}

void sub_18E0C02E8(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  __n128 v9 = sub_18E0C04F4((uint64_t)v31, this, (uint64_t)this, a4, a5, a6, a7, a8);
  if ((*(uint64_t (**)(uint64_t, __n128))(*(void *)v8 + 104))(v8, v9))
  {
    uint64_t v10 = (cnprint::CNPrinter *)raven::RavenConvergenceEstimator::HandleEvent((raven::RavenConvergenceEstimator *)(v8 + 3000), (const raven::MovingStateEvent *)v31);
    if (v10 && cnprint::CNPrinter::GetLogLevel(v10) <= 1)
    {
      __int16 v36 = 12;
      unsigned __int8 v35 = 1;
      v34[0] = (*(uint64_t (**)(void *))(v31[0] + 16))(v31);
      v34[1] = v11;
      (*(void (**)(void **__return_ptr, void *))(v31[0] + 24))(v32, v31);
      if (v33 >= 0) {
        uint64_t v17 = v32;
      }
      else {
        uint64_t v17 = (void **)v32[0];
      }
      cnprint::CNLogFormatter::FormatWarning(v8 + 496, (uint64_t)v34, "Failed to handle event - %s.", v12, v13, v14, v15, v16, (uint64_t)v17);
      if (*(char *)(v8 + 519) >= 0) {
        LOBYTE(v23) = v8 - 16;
      }
      else {
        uint64_t v23 = *(void *)(v8 + 496);
      }
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v36, &v35, "%s", v18, v19, v20, v21, v22, v23);
      if (v33 < 0) {
        operator delete(v32[0]);
      }
    }
  }
  else
  {
    LOWORD(v32[0]) = 12;
    LOBYTE(v34[0]) = 2;
    unsigned __int8 v24 = cnprint::CNLogFormatter::FormatGeneral((const void **)(v8 + 496), "Warning,RavenConvergenceEstimatorActiveObject is not configured");
    if (*(char *)(v8 + 519) >= 0) {
      LOBYTE(v30) = v24;
    }
    else {
      uint64_t v30 = *(void *)(v8 + 496);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v32, (unsigned __int8 *)v34, "%s", v25, v26, v27, v28, v29, v30);
  }
}

void sub_18E0C048C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 57) < 0) {
    operator delete(*(void **)(v1 - 80));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_18E0C04A8(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09E20)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0C04E8()
{
  return &unk_1EDD09E20;
}

__n128 sub_18E0C04F4(uint64_t a1, cnframework::GenericEvent *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t EventType = cnframework::GenericEvent::GetEventType(this, (uint64_t)this, a3, a4, a5, a6, a7, a8);
  {
    uint64_t v18 = *((void *)this + 2);
    if (v18) {
      uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 16))(v18);
    }
    else {
      uint64_t v19 = MEMORY[0x1E4FBA3D8];
    }
    uint64_t v27 = (const char *)(*(void *)(v19 + 8) & 0x7FFFFFFFFFFFFFFFLL);
    if (v27 != (const char *)((unint64_t)off_1EDD051F0 & 0x7FFFFFFFFFFFFFFFLL))
    {
      if (strcmp(v27, (const char *)((unint64_t)off_1EDD051F0 & 0x7FFFFFFFFFFFFFFFLL)))
      {
        v36.__vftable = 0;
        std::bad_cast::bad_cast(&v36);
        v36.__vftable = (std::bad_cast_vtbl *)&unk_1EDD12A18;
        sub_18E0BA8B8();
      }
    }
    uint64_t v28 = *((void *)this + 2);
    *(void *)a1 = &unk_1EDD13CF0;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(v28 + 16);
    long long v29 = *(_OWORD *)(v28 + 64);
    long long v30 = *(_OWORD *)(v28 + 80);
    long long v31 = *(_OWORD *)(v28 + 48);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(v28 + 32);
    *(_OWORD *)(a1 + 72) = v30;
    *(_OWORD *)(a1 + 56) = v29;
    *(_OWORD *)(a1 + 40) = v31;
    long long v32 = *(_OWORD *)(v28 + 112);
    __n128 result = *(__n128 *)(v28 + 128);
    uint64_t v33 = *(void *)(v28 + 144);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(v28 + 96);
    *(void *)(a1 + 136) = v33;
    *(__n128 *)(a1 + 120) = result;
    *(_OWORD *)(a1 + 104) = v32;
  }
  else
  {
    __int16 v35 = 3;
    unsigned __int8 v34 = 5;
    uint64_t v20 = cnframework::GenericEvent::GetEventType(this, v11, v12, v13, v14, v15, v16, v17);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v35, &v34, "Attempted to cast a GenericEvent of type %s to type %s.", v21, v22, v23, v24, v25, *(unsigned char *)(v20 + 8));
    result.n128_u64[0] = 0;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = &unk_1EDD13CF0;
    *(unsigned char *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    *(unsigned char *)(a1 + 48) = 0;
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
    *(unsigned char *)(a1 + 72) = 0;
    *(void *)(a1 + 80) = 0;
    *(void *)(a1 + 88) = 0;
    *(void *)(a1 + 96) = 0x7FF8000000000000;
    *(void *)(a1 + 104) = 0;
    *(void *)(a1 + 112) = 0x3FF0000000000000;
    *(void *)(a1 + 120) = 0;
    *(void *)(a1 + 128) = 0;
    *(void *)(a1 + 136) = 0;
  }
  return result;
}

void sub_18E0C06D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::exception a12)
{
}

void sub_18E0C06F0()
{
}

void *sub_18E0C0704()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1EDD1CC60;
  return result;
}

void sub_18E0C073C(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1CC60;
}

void sub_18E0C0764(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  __n128 v9 = sub_18E0C0970((uint64_t)v31, this, (uint64_t)this, a4, a5, a6, a7, a8);
  if ((*(uint64_t (**)(uint64_t, __n128))(*(void *)v8 + 104))(v8, v9))
  {
    uint64_t v10 = (cnprint::CNPrinter *)raven::RavenConvergenceEstimator::HandleEvent((raven::RavenConvergenceEstimator *)(v8 + 3000), (const raven::OdometerEvent *)v31);
    if (v10 && cnprint::CNPrinter::GetLogLevel(v10) <= 1)
    {
      __int16 v36 = 12;
      unsigned __int8 v35 = 1;
      v34[0] = (*(uint64_t (**)(void *))(v31[0] + 16))(v31);
      v34[1] = v11;
      (*(void (**)(void **__return_ptr, void *))(v31[0] + 24))(v32, v31);
      if (v33 >= 0) {
        uint64_t v17 = v32;
      }
      else {
        uint64_t v17 = (void **)v32[0];
      }
      cnprint::CNLogFormatter::FormatWarning(v8 + 496, (uint64_t)v34, "Failed to handle event - %s.", v12, v13, v14, v15, v16, (uint64_t)v17);
      if (*(char *)(v8 + 519) >= 0) {
        LOBYTE(v23) = v8 - 16;
      }
      else {
        uint64_t v23 = *(void *)(v8 + 496);
      }
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v36, &v35, "%s", v18, v19, v20, v21, v22, v23);
      if (v33 < 0) {
        operator delete(v32[0]);
      }
    }
  }
  else
  {
    LOWORD(v32[0]) = 12;
    LOBYTE(v34[0]) = 2;
    unsigned __int8 v24 = cnprint::CNLogFormatter::FormatGeneral((const void **)(v8 + 496), "Warning,RavenConvergenceEstimatorActiveObject is not configured");
    if (*(char *)(v8 + 519) >= 0) {
      LOBYTE(v30) = v24;
    }
    else {
      uint64_t v30 = *(void *)(v8 + 496);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v32, (unsigned __int8 *)v34, "%s", v25, v26, v27, v28, v29, v30);
  }
}

void sub_18E0C0908(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 57) < 0) {
    operator delete(*(void **)(v1 - 80));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_18E0C0924(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09DB0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0C0964()
{
  return &unk_1EDD09DB0;
}

__n128 sub_18E0C0970(uint64_t a1, cnframework::GenericEvent *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t EventType = cnframework::GenericEvent::GetEventType(this, (uint64_t)this, a3, a4, a5, a6, a7, a8);
  {
    uint64_t v18 = *((void *)this + 2);
    if (v18) {
      uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 16))(v18);
    }
    else {
      uint64_t v19 = MEMORY[0x1E4FBA3D8];
    }
    uint64_t v27 = (const char *)(*(void *)(v19 + 8) & 0x7FFFFFFFFFFFFFFFLL);
    if (v27 != (const char *)((unint64_t)off_1EDD04FE8 & 0x7FFFFFFFFFFFFFFFLL))
    {
      if (strcmp(v27, (const char *)((unint64_t)off_1EDD04FE8 & 0x7FFFFFFFFFFFFFFFLL)))
      {
        v39.__vftable = 0;
        std::bad_cast::bad_cast(&v39);
        v39.__vftable = (std::bad_cast_vtbl *)&unk_1EDD12A18;
        sub_18E0BA8B8();
      }
    }
    uint64_t v28 = *((void *)this + 2);
    *(void *)a1 = &unk_1EDD13790;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(v28 + 16);
    long long v29 = *(_OWORD *)(v28 + 64);
    long long v30 = *(_OWORD *)(v28 + 80);
    long long v31 = *(_OWORD *)(v28 + 48);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(v28 + 32);
    *(_OWORD *)(a1 + 72) = v30;
    *(_OWORD *)(a1 + 56) = v29;
    *(_OWORD *)(a1 + 40) = v31;
    long long v32 = *(_OWORD *)(v28 + 128);
    long long v33 = *(_OWORD *)(v28 + 144);
    long long v34 = *(_OWORD *)(v28 + 112);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(v28 + 96);
    *(_OWORD *)(a1 + 136) = v33;
    *(_OWORD *)(a1 + 120) = v32;
    *(_OWORD *)(a1 + 104) = v34;
    __n128 result = *(__n128 *)(v28 + 192);
    long long v35 = *(_OWORD *)(v28 + 208);
    long long v36 = *(_OWORD *)(v28 + 176);
    *(_OWORD *)(a1 + 152) = *(_OWORD *)(v28 + 160);
    *(_OWORD *)(a1 + 200) = v35;
    *(__n128 *)(a1 + 184) = result;
    *(_OWORD *)(a1 + 168) = v36;
  }
  else
  {
    __int16 v38 = 3;
    unsigned __int8 v37 = 5;
    uint64_t v20 = cnframework::GenericEvent::GetEventType(this, v11, v12, v13, v14, v15, v16, v17);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v38, &v37, "Attempted to cast a GenericEvent of type %s to type %s.", v21, v22, v23, v24, v25, *(unsigned char *)(v20 + 8));
    result.n128_u64[0] = 0;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 200) = 0u;
    *(_OWORD *)(a1 + 184) = 0u;
    *(_OWORD *)(a1 + 168) = 0u;
    *(_OWORD *)(a1 + 152) = 0u;
    *(_OWORD *)(a1 + 136) = 0u;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = &unk_1EDD13790;
    *(unsigned char *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    *(unsigned char *)(a1 + 48) = 0;
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
    *(unsigned char *)(a1 + 72) = 0;
    *(void *)(a1 + 80) = 0;
    *(void *)(a1 + 88) = 0;
    *(unsigned char *)(a1 + 120) = 0;
    *(void *)(a1 + 96) = 0x7FF8000000000000;
    *(void *)(a1 + 104) = 0;
    *(void *)(a1 + 112) = 0;
    *(unsigned char *)(a1 + 144) = 0;
    *(void *)(a1 + 128) = 0;
    *(void *)(a1 + 136) = 0;
    *(unsigned char *)(a1 + 168) = 0;
    *(void *)(a1 + 152) = 0;
    *(void *)(a1 + 160) = 0;
    *(void *)(a1 + 176) = 0;
    *(void *)(a1 + 184) = 0;
    *(void *)(a1 + 192) = 0x7FF8000000000000;
  }
  return result;
}

void sub_18E0C0B98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::exception a12)
{
}

void sub_18E0C0BB0()
{
}

void *sub_18E0C0BC4()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1EDD1D0D8;
  return result;
}

void sub_18E0C0BFC(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1D0D8;
}

void sub_18E0C0C24(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  double v9 = sub_18E0C0E30((uint64_t)v31, this, (uint64_t)this, a4, a5, a6, a7, a8);
  if ((*(uint64_t (**)(uint64_t, double))(*(void *)v8 + 104))(v8, v9))
  {
    uint64_t v10 = (cnprint::CNPrinter *)raven::RavenConvergenceEstimator::HandleEvent((raven::RavenConvergenceEstimator *)(v8 + 3000), (const raven::PositionChangeEvent *)v31);
    if (v10 && cnprint::CNPrinter::GetLogLevel(v10) <= 1)
    {
      __int16 v36 = 12;
      unsigned __int8 v35 = 1;
      v34[0] = (*(uint64_t (**)(void *))(v31[0] + 16))(v31);
      v34[1] = v11;
      (*(void (**)(void **__return_ptr, void *))(v31[0] + 24))(v32, v31);
      if (v33 >= 0) {
        uint64_t v17 = v32;
      }
      else {
        uint64_t v17 = (void **)v32[0];
      }
      cnprint::CNLogFormatter::FormatWarning(v8 + 496, (uint64_t)v34, "Failed to handle event - %s.", v12, v13, v14, v15, v16, (uint64_t)v17);
      if (*(char *)(v8 + 519) >= 0) {
        LOBYTE(v23) = v8 - 16;
      }
      else {
        uint64_t v23 = *(void *)(v8 + 496);
      }
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v36, &v35, "%s", v18, v19, v20, v21, v22, v23);
      if (v33 < 0) {
        operator delete(v32[0]);
      }
    }
  }
  else
  {
    LOWORD(v32[0]) = 12;
    LOBYTE(v34[0]) = 2;
    unsigned __int8 v24 = cnprint::CNLogFormatter::FormatGeneral((const void **)(v8 + 496), "Warning,RavenConvergenceEstimatorActiveObject is not configured");
    if (*(char *)(v8 + 519) >= 0) {
      LOBYTE(v30) = v24;
    }
    else {
      uint64_t v30 = *(void *)(v8 + 496);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v32, (unsigned __int8 *)v34, "%s", v25, v26, v27, v28, v29, v30);
  }
}

void sub_18E0C0DC8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 57) < 0) {
    operator delete(*(void **)(v1 - 80));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_18E0C0DE4(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09E80)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0C0E24()
{
  return &unk_1EDD09E80;
}

double sub_18E0C0E30(uint64_t a1, cnframework::GenericEvent *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t EventType = cnframework::GenericEvent::GetEventType(this, (uint64_t)this, a3, a4, a5, a6, a7, a8);
  {
    uint64_t v18 = *((void *)this + 2);
    if (v18) {
      uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 16))(v18);
    }
    else {
      uint64_t v19 = MEMORY[0x1E4FBA3D8];
    }
    uint64_t v27 = (const char *)(*(void *)(v19 + 8) & 0x7FFFFFFFFFFFFFFFLL);
    if (v27 != (const char *)((unint64_t)off_1EDD05370 & 0x7FFFFFFFFFFFFFFFLL))
    {
      if (strcmp(v27, (const char *)((unint64_t)off_1EDD05370 & 0x7FFFFFFFFFFFFFFFLL)))
      {
        v40.__vftable = 0;
        std::bad_cast::bad_cast(&v40);
        v40.__vftable = (std::bad_cast_vtbl *)&unk_1EDD12A18;
        sub_18E0BA8B8();
      }
    }
    uint64_t v28 = (_OWORD *)*((void *)this + 2);
    *(void *)a1 = &unk_1EDD14210;
    long long v29 = v28[3];
    long long v30 = v28[4];
    long long v31 = v28[2];
    *(_OWORD *)(a1 + 8) = v28[1];
    *(_OWORD *)(a1 + 56) = v30;
    *(_OWORD *)(a1 + 40) = v29;
    *(_OWORD *)(a1 + 24) = v31;
    long long v32 = v28[7];
    long long v33 = v28[8];
    long long v34 = v28[6];
    *(_OWORD *)(a1 + 72) = v28[5];
    *(_OWORD *)(a1 + 120) = v33;
    *(_OWORD *)(a1 + 104) = v32;
    *(_OWORD *)(a1 + 88) = v34;
    long long v35 = v28[11];
    long long v36 = v28[12];
    long long v37 = v28[10];
    *(_OWORD *)(a1 + 136) = v28[9];
    *(_OWORD *)(a1 + 184) = v36;
    *(_OWORD *)(a1 + 168) = v35;
    *(_OWORD *)(a1 + 152) = v37;
    sub_18DFF2980(a1 + 200, (uint64_t)(v28 + 13));
    *(void *)&double result = sub_18DFE2FA8(a1 + 264, (uint64_t)(v28 + 17)).n128_u64[0];
  }
  else
  {
    __int16 v39 = 3;
    unsigned __int8 v38 = 5;
    uint64_t v20 = cnframework::GenericEvent::GetEventType(this, v11, v12, v13, v14, v15, v16, v17);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v39, &v38, "Attempted to cast a GenericEvent of type %s to type %s.", v21, v22, v23, v24, v25, *(unsigned char *)(v20 + 8));
    *(_OWORD *)(a1 + 248) = 0u;
    *(_OWORD *)(a1 + 232) = 0u;
    *(_OWORD *)(a1 + 216) = 0u;
    *(_OWORD *)(a1 + 184) = 0u;
    *(_OWORD *)(a1 + 168) = 0u;
    *(_OWORD *)(a1 + 152) = 0u;
    *(_OWORD *)(a1 + 136) = 0u;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 344) = 0u;
    *(_OWORD *)(a1 + 360) = 0u;
    *(_OWORD *)(a1 + 312) = 0u;
    *(_OWORD *)(a1 + 328) = 0u;
    *(_OWORD *)(a1 + 280) = 0u;
    *(_OWORD *)(a1 + 296) = 0u;
    *(_OWORD *)(a1 + 264) = 0u;
    *(_OWORD *)(a1 + 200) = 0u;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = &unk_1EDD14210;
    *(unsigned char *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    *(unsigned char *)(a1 + 48) = 0;
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
    *(unsigned char *)(a1 + 72) = 0;
    *(void *)(a1 + 80) = 0;
    *(void *)(a1 + 88) = 0;
    *(void *)(a1 + 104) = 0;
    *(void *)(a1 + 112) = 0;
    *(void *)(a1 + 96) = 0x7FF8000000000000;
    *(unsigned char *)(a1 + 120) = 0;
    *(void *)(a1 + 128) = 0;
    *(void *)(a1 + 136) = 0;
    *(unsigned char *)(a1 + 144) = 0;
    *(void *)(a1 + 152) = 0;
    *(void *)(a1 + 160) = 0;
    *(unsigned char *)(a1 + 168) = 0;
    *(void *)(a1 + 176) = 0;
    *(void *)(a1 + 184) = 0;
    *(void *)(a1 + 192) = 0x7FF8000000000000;
    *(void *)(a1 + 224) = 0x100000003;
    *(void *)(a1 + 200) = &unk_1EDD18D98;
    *(_OWORD *)(a1 + 208) = xmmword_18E1F6F60;
    *(void *)(a1 + 232) = a1 + 240;
    *(void *)(a1 + 288) = 0x300000003;
    *(void *)(a1 + 264) = &unk_1EDD18EE8;
    *(void *)&double result = 0x300000003;
    *(_OWORD *)(a1 + 272) = xmmword_18E1F0010;
    *(void *)(a1 + 296) = a1 + 304;
  }
  return result;
}

void sub_18E0C1108(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::exception a12)
{
}

void sub_18E0C1144()
{
}

void *sub_18E0C1158()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1EDD1D188;
  return result;
}

void sub_18E0C1190(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1D188;
}

void sub_18E0C11B8(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  __n128 v9 = sub_18E0C13C4((uint64_t)v31, this, (uint64_t)this, a4, a5, a6, a7, a8);
  if ((*(uint64_t (**)(uint64_t, __n128))(*(void *)v8 + 104))(v8, v9))
  {
    raven::RavenEstimator::HandlePositionContextStateEvent((raven::RavenEstimator *)(v8 + 3000), (const raven::PositionContextStateEvent *)v31);
    if (v10 && cnprint::CNPrinter::GetLogLevel(v10) <= 1)
    {
      __int16 v36 = 12;
      unsigned __int8 v35 = 1;
      v34[0] = (*(uint64_t (**)(void *))(v31[0] + 16))(v31);
      v34[1] = v11;
      (*(void (**)(void **__return_ptr, void *))(v31[0] + 24))(v32, v31);
      if (v33 >= 0) {
        uint64_t v17 = v32;
      }
      else {
        uint64_t v17 = (void **)v32[0];
      }
      cnprint::CNLogFormatter::FormatWarning(v8 + 496, (uint64_t)v34, "Failed to handle event - %s.", v12, v13, v14, v15, v16, (uint64_t)v17);
      if (*(char *)(v8 + 519) >= 0) {
        LOBYTE(v23) = v8 - 16;
      }
      else {
        uint64_t v23 = *(void *)(v8 + 496);
      }
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v36, &v35, "%s", v18, v19, v20, v21, v22, v23);
      if (v33 < 0) {
        operator delete(v32[0]);
      }
    }
  }
  else
  {
    LOWORD(v32[0]) = 12;
    LOBYTE(v34[0]) = 2;
    unsigned __int8 v24 = cnprint::CNLogFormatter::FormatGeneral((const void **)(v8 + 496), "Warning,RavenConvergenceEstimatorActiveObject is not configured");
    if (*(char *)(v8 + 519) >= 0) {
      LOBYTE(v30) = v24;
    }
    else {
      uint64_t v30 = *(void *)(v8 + 496);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v32, (unsigned __int8 *)v34, "%s", v25, v26, v27, v28, v29, v30);
  }
}

void sub_18E0C135C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 57) < 0) {
    operator delete(*(void **)(v1 - 80));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_18E0C1378(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09EA0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0C13B8()
{
  return &unk_1EDD09EA0;
}

__n128 sub_18E0C13C4(uint64_t a1, cnframework::GenericEvent *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t EventType = cnframework::GenericEvent::GetEventType(this, (uint64_t)this, a3, a4, a5, a6, a7, a8);
  {
    uint64_t v18 = *((void *)this + 2);
    if (v18) {
      uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 16))(v18);
    }
    else {
      uint64_t v19 = MEMORY[0x1E4FBA3D8];
    }
    long long v31 = (const char *)(*(void *)(v19 + 8) & 0x7FFFFFFFFFFFFFFFLL);
    if (v31 != (const char *)((unint64_t)off_1EDD05758 & 0x7FFFFFFFFFFFFFFFLL))
    {
      if (strcmp(v31, (const char *)((unint64_t)off_1EDD05758 & 0x7FFFFFFFFFFFFFFFLL)))
      {
        v40.__vftable = 0;
        std::bad_cast::bad_cast(&v40);
        v40.__vftable = (std::bad_cast_vtbl *)&unk_1EDD12A18;
        sub_18E0BA8B8();
      }
    }
    uint64_t v32 = *((void *)this + 2);
    *(void *)a1 = &unk_1EDD14738;
    long long v33 = *(_OWORD *)(v32 + 48);
    long long v34 = *(_OWORD *)(v32 + 64);
    long long v35 = *(_OWORD *)(v32 + 32);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(v32 + 16);
    *(_OWORD *)(a1 + 56) = v34;
    *(_OWORD *)(a1 + 40) = v33;
    *(_OWORD *)(a1 + 24) = v35;
    long long v36 = *(_OWORD *)(v32 + 96);
    __n128 result = *(__n128 *)(v32 + 112);
    uint64_t v37 = *(void *)(v32 + 128);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(v32 + 80);
    *(void *)(a1 + 120) = v37;
    *(__n128 *)(a1 + 104) = result;
    *(_OWORD *)(a1 + 88) = v36;
  }
  else
  {
    __int16 v39 = 3;
    unsigned __int8 v38 = 5;
    uint64_t v20 = cnframework::GenericEvent::GetEventType(this, v11, v12, v13, v14, v15, v16, v17);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v39, &v38, "Attempted to cast a GenericEvent of type %s to type %s.", v21, v22, v23, v24, v25, *(unsigned char *)(v20 + 8));
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = &unk_1EDD14738;
    *(unsigned char *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    *(unsigned char *)(a1 + 48) = 0;
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
    *(unsigned char *)(a1 + 72) = 0;
    *(void *)(a1 + 80) = 0;
    *(void *)(a1 + 88) = 0;
    *(void *)(a1 + 96) = 0x7FF8000000000000;
    *(void *)(a1 + 104) = 0;
    __asm { FMOV            V0.2D, #0.5 }
    *(__n128 *)(a1 + 112) = result;
  }
  return result;
}

void sub_18E0C159C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::exception a12)
{
}

void sub_18E0C15B4()
{
}

void *sub_18E0C15C8()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1EDD1CCB8;
  return result;
}

void sub_18E0C1600(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1CCB8;
}

void sub_18E0C1628(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  sub_18E0C1834((uint64_t)v30, this, (uint64_t)this, a4, a5, a6, a7, a8);
  if ((*(uint64_t (**)(uint64_t))(*(void *)v8 + 104))(v8))
  {
    __n128 v9 = (cnprint::CNPrinter *)raven::RavenConvergenceEstimator::HandleEvent((raven::RavenConvergenceEstimator *)(v8 + 3000), (const raven::PositionEvent *)v30);
    if (v9 && cnprint::CNPrinter::GetLogLevel(v9) <= 1)
    {
      __int16 v35 = 12;
      unsigned __int8 v34 = 1;
      v33[0] = (*(uint64_t (**)(void *))(v30[0] + 16))(v30);
      v33[1] = v10;
      (*(void (**)(void **__return_ptr, void *))(v30[0] + 24))(v31, v30);
      if (v32 >= 0) {
        uint64_t v16 = v31;
      }
      else {
        uint64_t v16 = (void **)v31[0];
      }
      cnprint::CNLogFormatter::FormatWarning(v8 + 496, (uint64_t)v33, "Failed to handle event - %s.", v11, v12, v13, v14, v15, (uint64_t)v16);
      if (*(char *)(v8 + 519) >= 0) {
        LOBYTE(v22) = v8 - 16;
      }
      else {
        uint64_t v22 = *(void *)(v8 + 496);
      }
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v35, &v34, "%s", v17, v18, v19, v20, v21, v22);
      if (v32 < 0) {
        operator delete(v31[0]);
      }
    }
  }
  else
  {
    LOWORD(v31[0]) = 12;
    LOBYTE(v33[0]) = 2;
    unsigned __int8 v23 = cnprint::CNLogFormatter::FormatGeneral((const void **)(v8 + 496), "Warning,RavenConvergenceEstimatorActiveObject is not configured");
    if (*(char *)(v8 + 519) >= 0) {
      LOBYTE(v29) = v23;
    }
    else {
      uint64_t v29 = *(void *)(v8 + 496);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v31, (unsigned __int8 *)v33, "%s", v24, v25, v26, v27, v28, v29);
  }
}

void sub_18E0C17CC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 57) < 0) {
    operator delete(*(void **)(v1 - 80));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_18E0C17E8(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09DC0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0C1828()
{
  return &unk_1EDD09DC0;
}

void sub_18E0C1834(uint64_t a1, cnframework::GenericEvent *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t EventType = cnframework::GenericEvent::GetEventType(this, (uint64_t)this, a3, a4, a5, a6, a7, a8);
  {
    uint64_t v18 = *((void *)this + 2);
    if (v18) {
      uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 16))(v18);
    }
    else {
      uint64_t v19 = MEMORY[0x1E4FBA3D8];
    }
    uint64_t v27 = (const char *)(*(void *)(v19 + 8) & 0x7FFFFFFFFFFFFFFFLL);
    if (v27 != (const char *)((unint64_t)off_1EDD05000 & 0x7FFFFFFFFFFFFFFFLL)
      && strcmp(v27, (const char *)((unint64_t)off_1EDD05000 & 0x7FFFFFFFFFFFFFFFLL)))
    {
      v31.__vftable = 0;
      std::bad_cast::bad_cast(&v31);
      v31.__vftable = (std::bad_cast_vtbl *)&unk_1EDD12A18;
      sub_18E0BA8B8();
    }
    uint64_t v28 = *((void *)this + 2);
    *(void *)a1 = &unk_1EDD137C0;
    memcpy((void *)(a1 + 8), (const void *)(v28 + 16), 0x160uLL);
  }
  else
  {
    __int16 v30 = 3;
    unsigned __int8 v29 = 5;
    uint64_t v20 = cnframework::GenericEvent::GetEventType(this, v11, v12, v13, v14, v15, v16, v17);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v30, &v29, "Attempted to cast a GenericEvent of type %s to type %s.", v21, v22, v23, v24, v25, *(unsigned char *)(v20 + 8));
    *(void *)(a1 + 280) = 0;
    *(_OWORD *)(a1 + 248) = 0u;
    *(_OWORD *)(a1 + 232) = 0u;
    *(_OWORD *)(a1 + 216) = 0u;
    *(_OWORD *)(a1 + 200) = 0u;
    *(_OWORD *)(a1 + 184) = 0u;
    *(_OWORD *)(a1 + 168) = 0u;
    *(_OWORD *)(a1 + 152) = 0u;
    *(_OWORD *)(a1 + 136) = 0u;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 264) = 0u;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = &unk_1EDD137C0;
    *(unsigned char *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    *(unsigned char *)(a1 + 48) = 0;
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
    *(unsigned char *)(a1 + 72) = 0;
    *(void *)(a1 + 80) = 0;
    *(void *)(a1 + 88) = 0;
    *(void *)(a1 + 104) = 0;
    *(void *)(a1 + 112) = 0;
    *(void *)(a1 + 96) = 0x7FF8000000000000;
    *(unsigned char *)(a1 + 120) = 0;
    *(void *)(a1 + 128) = 0;
    *(void *)(a1 + 136) = 0;
    *(unsigned char *)(a1 + 144) = 0;
    *(void *)(a1 + 152) = 0;
    *(void *)(a1 + 160) = 0;
    *(unsigned char *)(a1 + 168) = 0;
    *(void *)(a1 + 176) = 0;
    *(void *)(a1 + 184) = 0;
    *(void *)(a1 + 192) = 0x7FF8000000000000;
    *(unsigned char *)(a1 + 201) = 0;
    int64x2_t v26 = vdupq_n_s64(0x7FF8000000000000uLL);
    *(int64x2_t *)(a1 + 208) = v26;
    *(int64x2_t *)(a1 + 224) = v26;
    *(int64x2_t *)(a1 + 240) = v26;
    *(int64x2_t *)(a1 + 256) = v26;
    *(void *)(a1 + 272) = 0x7FF8000000000000;
    *(int64x2_t *)(a1 + 288) = v26;
    *(int64x2_t *)(a1 + 304) = v26;
    *(int64x2_t *)(a1 + 320) = v26;
    *(int64x2_t *)(a1 + 336) = v26;
    *(void *)(a1 + 352) = 0x7FF8000000000000;
  }
}

void sub_18E0C1A70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::exception a12)
{
}

void sub_18E0C1A88()
{
}

void *sub_18E0C1A9C()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1EDD1CFD0;
  return result;
}

void sub_18E0C1AD4(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1CFD0;
}

void sub_18E0C1AFC(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  sub_18E0C1E40(&v38, this, (uint64_t)this, a4, a5, a6, a7, a8);
  __n128 v9 = (cnprint::CNPrinter *)(*(uint64_t (**)(uint64_t))(*(void *)v8 + 104))(v8);
  if ((v9 & 1) == 0)
  {
    __int16 v45 = 12;
    unsigned __int8 v44 = 2;
    uint64_t v42 = (*(uint64_t (**)(uint64_t *))(v38 + 16))(&v38);
    uint64_t v43 = v31;
    (*(void (**)(void **__return_ptr, uint64_t *))(v38 + 24))(v40, &v38);
    if (v41 >= 0) {
      uint64_t v37 = v40;
    }
    else {
      uint64_t v37 = (void **)v40[0];
    }
    cnprint::CNLogFormatter::FormatWarning(v8 + 496, (uint64_t)&v42, "RavenConvergenceEstimatorActiveObject not configured, cannot handle event, %s", v32, v33, v34, v35, v36, (uint64_t)v37);
    if (*(char *)(v8 + 519) >= 0) {
      LOBYTE(v30) = v8 - 16;
    }
    else {
      uint64_t v30 = *(void *)(v8 + 496);
    }
    goto LABEL_23;
  }
  if (!cnprint::CNPrinter::GetLogLevel(v9))
  {
    LOWORD(v42) = 12;
    LOBYTE(v45) = 0;
    v40[0] = (void *)(*(uint64_t (**)(uint64_t *))(v38 + 16))(&v38);
    v40[1] = v10;
    cnprint::CNLogFormatter::FormatGeneral(v8 + 496, (uint64_t)v40, "RavenSolutionEvent received");
    if (*(char *)(v8 + 519) >= 0) {
      LOBYTE(v16) = v8 - 16;
    }
    else {
      uint64_t v16 = *(void *)(v8 + 496);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v42, (unsigned __int8 *)&v45, "%s", v11, v12, v13, v14, v15, v16);
  }
  if (BYTE1(v39[25]) == 2)
  {
    *(unsigned char *)(v8 + 544) = 1;
    *(_OWORD *)(v8 + 552) = *(_OWORD *)&v39[145];
    memcpy((void *)(v8 + 576), v39, 0x971uLL);
  }
  uint64_t v17 = (cnprint::CNPrinter *)raven::RavenConvergenceEstimator::HandleEvent((raven::RavenConvergenceEstimator *)(v8 + 3000), (const raven::RavenSolutionEvent *)&v38);
  if (v17 && cnprint::CNPrinter::GetLogLevel(v17) <= 1)
  {
    __int16 v45 = 12;
    unsigned __int8 v44 = 1;
    uint64_t v42 = (*(uint64_t (**)(uint64_t *))(v38 + 16))(&v38);
    uint64_t v43 = v18;
    (*(void (**)(void **__return_ptr, uint64_t *))(v38 + 24))(v40, &v38);
    if (v41 >= 0) {
      uint64_t v24 = v40;
    }
    else {
      uint64_t v24 = (void **)v40[0];
    }
    cnprint::CNLogFormatter::FormatWarning(v8 + 496, (uint64_t)&v42, "Failed to handle event - %s.", v19, v20, v21, v22, v23, (uint64_t)v24);
    if (*(char *)(v8 + 519) >= 0) {
      LOBYTE(v30) = v8 - 16;
    }
    else {
      uint64_t v30 = *(void *)(v8 + 496);
    }
LABEL_23:
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v45, &v44, "%s", v25, v26, v27, v28, v29, v30);
    if (v41 < 0) {
      operator delete(v40[0]);
    }
  }
}

void sub_18E0C1DD4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 57) < 0) {
    operator delete(*(void **)(v1 - 80));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_18E0C1DF4(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09E50)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0C1E34()
{
  return &unk_1EDD09E50;
}

void *sub_18E0C1E40(void *a1, cnframework::GenericEvent *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t EventType = cnframework::GenericEvent::GetEventType(this, (uint64_t)this, a3, a4, a5, a6, a7, a8);
  {
    uint64_t v18 = *((void *)this + 2);
    if (v18) {
      uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 16))(v18);
    }
    else {
      uint64_t v19 = MEMORY[0x1E4FBA3D8];
    }
    uint64_t v27 = (const char *)(*(void *)(v19 + 8) & 0x7FFFFFFFFFFFFFFFLL);
    if (v27 != (const char *)((unint64_t)off_1EDD05310 & 0x7FFFFFFFFFFFFFFFLL)
      && strcmp(v27, (const char *)((unint64_t)off_1EDD05310 & 0x7FFFFFFFFFFFFFFFLL)))
    {
      v31.__vftable = 0;
      std::bad_cast::bad_cast(&v31);
      v31.__vftable = (std::bad_cast_vtbl *)&unk_1EDD12A18;
      sub_18E0BA8B8();
    }
    uint64_t v28 = *((void *)this + 2);
    *a1 = &unk_1EDD14150;
    return memcpy(a1 + 1, (const void *)(v28 + 16), 0x971uLL);
  }
  else
  {
    __int16 v30 = 3;
    unsigned __int8 v29 = 5;
    uint64_t v20 = cnframework::GenericEvent::GetEventType(this, v11, v12, v13, v14, v15, v16, v17);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v30, &v29, "Attempted to cast a GenericEvent of type %s to type %s.", v21, v22, v23, v24, v25, *(unsigned char *)(v20 + 8));
    return (void *)sub_18DFF49CC((uint64_t)a1);
  }
}

void sub_18E0C1FC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::exception a12)
{
}

void sub_18E0C1FDC()
{
}

void *sub_18E0C1FF0()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1EDD1CF20;
  return result;
}

void sub_18E0C2028(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1CF20;
}

void sub_18E0C2050(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  __n128 v9 = sub_18E0BC290((uint64_t)v38, this, (uint64_t)this, a4, a5, a6, a7, a8);
  uint64_t v10 = (cnprint::CNPrinter *)(*(uint64_t (**)(uint64_t, __n128))(*(void *)v8 + 104))(v8, v9);
  if (v10)
  {
    if (!cnprint::CNPrinter::GetLogLevel(v10))
    {
      LOWORD(v43[0]) = 12;
      LOBYTE(v45) = 0;
      std::bad_cast v40 = (void **)(*(uint64_t (**)(void *))(v38[0] + 16))(v38);
      uint64_t v41 = v11;
      cnprint::CNLogFormatter::FormatGeneral(v8 + 496, (uint64_t)&v40, "RavenSystemEvent received");
      if (*(char *)(v8 + 519) >= 0) {
        LOBYTE(v17) = v8 - 16;
      }
      else {
        uint64_t v17 = *(void *)(v8 + 496);
      }
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v43, (unsigned __int8 *)&v45, "%s", v12, v13, v14, v15, v16, v17);
    }
    if (!v39)
    {
      LOWORD(v43[0]) = 12;
      LOBYTE(v45) = 4;
      std::bad_cast v40 = (void **)(*(uint64_t (**)(void *))(v38[0] + 16))(v38);
      uint64_t v41 = v18;
      cnprint::CNLogFormatter::FormatGeneral(v8 + 496, (uint64_t)&v40, "Resetting estimator based on system event");
      if (*(char *)(v8 + 519) >= 0) {
        LOBYTE(v24) = v8 - 16;
      }
      else {
        uint64_t v24 = *(void *)(v8 + 496);
      }
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v43, (unsigned __int8 *)&v45, "%s", v19, v20, v21, v22, v23, v24);
      (*(void (**)(uint64_t))(*(void *)v8 + 48))(v8);
    }
  }
  else
  {
    __int16 v45 = 12;
    unsigned __int8 v44 = 2;
    v43[0] = (*(uint64_t (**)(void *))(v38[0] + 16))(v38);
    v43[1] = v25;
    (*(void (**)(void ***__return_ptr, void *))(v38[0] + 24))(&v40, v38);
    if (v42 >= 0) {
      std::bad_cast v31 = (void **)&v40;
    }
    else {
      std::bad_cast v31 = v40;
    }
    cnprint::CNLogFormatter::FormatWarning(v8 + 496, (uint64_t)v43, "RavenConvergenceEstimatorActiveObject not configured, cannot handle event, %s", v26, v27, v28, v29, v30, (uint64_t)v31);
    if (*(char *)(v8 + 519) >= 0) {
      LOBYTE(v37) = v8 - 16;
    }
    else {
      uint64_t v37 = *(void *)(v8 + 496);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v45, &v44, "%s", v32, v33, v34, v35, v36, v37);
    if (v42 < 0) {
      operator delete(v40);
    }
  }
}

void sub_18E0C22C4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 57) < 0) {
    operator delete(*(void **)(v1 - 80));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_18E0C22E0(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09E30)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0C2320()
{
  return &unk_1EDD09E30;
}

void sub_18E0C2330()
{
}

void *sub_18E0C2344()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1EDD1D130;
  return result;
}

void sub_18E0C237C(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1D130;
}

void sub_18E0C23A4(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  __n128 v9 = sub_18E0C25B0((uint64_t)v31, this, (uint64_t)this, a4, a5, a6, a7, a8);
  if ((*(uint64_t (**)(uint64_t, __n128))(*(void *)v8 + 104))(v8, v9))
  {
    raven::RavenEstimator::HandleSignalEnvironmentEvent((raven::RavenEstimator *)(v8 + 3000), (const raven::SignalEnvironmentEvent *)v31);
    if (v10 && cnprint::CNPrinter::GetLogLevel(v10) <= 1)
    {
      __int16 v36 = 12;
      unsigned __int8 v35 = 1;
      v34[0] = (*(uint64_t (**)(void *))(v31[0] + 16))(v31);
      v34[1] = v11;
      (*(void (**)(void **__return_ptr, void *))(v31[0] + 24))(v32, v31);
      if (v33 >= 0) {
        uint64_t v17 = v32;
      }
      else {
        uint64_t v17 = (void **)v32[0];
      }
      cnprint::CNLogFormatter::FormatWarning(v8 + 496, (uint64_t)v34, "Failed to handle event - %s.", v12, v13, v14, v15, v16, (uint64_t)v17);
      if (*(char *)(v8 + 519) >= 0) {
        LOBYTE(v23) = v8 - 16;
      }
      else {
        uint64_t v23 = *(void *)(v8 + 496);
      }
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v36, &v35, "%s", v18, v19, v20, v21, v22, v23);
      if (v33 < 0) {
        operator delete(v32[0]);
      }
    }
  }
  else
  {
    LOWORD(v32[0]) = 12;
    LOBYTE(v34[0]) = 2;
    unsigned __int8 v24 = cnprint::CNLogFormatter::FormatGeneral((const void **)(v8 + 496), "Warning,RavenConvergenceEstimatorActiveObject is not configured");
    if (*(char *)(v8 + 519) >= 0) {
      LOBYTE(v30) = v24;
    }
    else {
      uint64_t v30 = *(void *)(v8 + 496);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v32, (unsigned __int8 *)v34, "%s", v25, v26, v27, v28, v29, v30);
  }
}

void sub_18E0C2548(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 57) < 0) {
    operator delete(*(void **)(v1 - 80));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_18E0C2564(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09E90)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0C25A4()
{
  return &unk_1EDD09E90;
}

__n128 sub_18E0C25B0(uint64_t a1, cnframework::GenericEvent *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t EventType = cnframework::GenericEvent::GetEventType(this, (uint64_t)this, a3, a4, a5, a6, a7, a8);
  {
    uint64_t v18 = *((void *)this + 2);
    if (v18) {
      uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 16))(v18);
    }
    else {
      uint64_t v19 = MEMORY[0x1E4FBA3D8];
    }
    uint64_t v27 = (const char *)(*(void *)(v19 + 8) & 0x7FFFFFFFFFFFFFFFLL);
    if (v27 != (const char *)((unint64_t)off_1EDD05528 & 0x7FFFFFFFFFFFFFFFLL))
    {
      if (strcmp(v27, (const char *)((unint64_t)off_1EDD05528 & 0x7FFFFFFFFFFFFFFFLL)))
      {
        v35.__vftable = 0;
        std::bad_cast::bad_cast(&v35);
        v35.__vftable = (std::bad_cast_vtbl *)&unk_1EDD12A18;
        sub_18E0BA8B8();
      }
    }
    uint64_t v28 = *((void *)this + 2);
    *(void *)a1 = &unk_1EDD145D0;
    long long v30 = *(_OWORD *)(v28 + 32);
    long long v29 = *(_OWORD *)(v28 + 48);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(v28 + 16);
    *(_OWORD *)(a1 + 24) = v30;
    *(_OWORD *)(a1 + 40) = v29;
    long long v31 = *(_OWORD *)(v28 + 80);
    __n128 result = *(__n128 *)(v28 + 96);
    char v32 = *(unsigned char *)(v28 + 112);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(v28 + 64);
    *(unsigned char *)(a1 + 104) = v32;
    *(__n128 *)(a1 + 88) = result;
    *(_OWORD *)(a1 + 72) = v31;
  }
  else
  {
    __int16 v34 = 3;
    unsigned __int8 v33 = 5;
    uint64_t v20 = cnframework::GenericEvent::GetEventType(this, v11, v12, v13, v14, v15, v16, v17);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v34, &v33, "Attempted to cast a GenericEvent of type %s to type %s.", v21, v22, v23, v24, v25, *(unsigned char *)(v20 + 8));
    result.n128_u64[0] = 0;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = &unk_1EDD145D0;
    *(unsigned char *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    *(unsigned char *)(a1 + 48) = 0;
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
    *(unsigned char *)(a1 + 72) = 0;
    *(void *)(a1 + 80) = 0;
    *(void *)(a1 + 88) = 0;
    *(void *)(a1 + 96) = 0x7FF8000000000000;
    *(void *)(a1 + 104) = 0;
  }
  return result;
}

void sub_18E0C277C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::exception a12)
{
}

void sub_18E0C2794()
{
}

void *sub_18E0C27A8()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1EDD1CD10;
  return result;
}

void sub_18E0C27E0(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1CD10;
}

void sub_18E0C2808(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  __n128 v9 = sub_18E0BD4F4((uint64_t)&v98, this, (uint64_t)this, a4, a5, a6, a7, a8);
  if (((*(uint64_t (**)(uint64_t, __n128))(*(void *)v8 + 104))(v8, v9) & 1) == 0)
  {
    LOWORD(v100) = 12;
    LOBYTE(v103) = 2;
    *(void *)std::string __src = (*(uint64_t (**)(uint64_t *))(v98 + 16))(&v98);
    *(void *)&__src[8] = v22;
    (*(void (**)(void **__return_ptr, uint64_t *))(v98 + 24))(&__p, &v98);
    if (v105[1] >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    cnprint::CNLogFormatter::FormatWarning(v8 + 496, (uint64_t)__src, "RavenConvergenceEstimatorActiveObject not configured, cannot handle event, %s", v23, v24, v25, v26, v27, (uint64_t)p_p);
    if (*(char *)(v8 + 519) >= 0) {
      LOBYTE(v34) = v8 - 16;
    }
    else {
      uint64_t v34 = *(void *)(v8 + 496);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v100, (unsigned __int8 *)&v103, "%s", v29, v30, v31, v32, v33, v34);
    if (SHIBYTE(v105[1]) < 0) {
      operator delete(__p);
    }
    return;
  }
  if (!*(unsigned char *)(v8 + 3058) && *(unsigned char *)(v8 + 544))
  {
    uint64_t v10 = (*(uint64_t (**)(uint64_t *))(v98 + 16))(&v98);
    double v12 = v11;
    double v13 = v11;
    uint64_t v14 = *(void *)(v8 + 488);
    v15.i64[0] = *(void *)(v14 + 832);
    *(double *)v16.i64 = *(double *)(v14 + 896) + *(double *)(v14 + 872) + *(double *)v15.i64;
    v105[0] = 0;
    std::string __p = 0;
    CNTimeSpan::SetTimeSpan((uint64_t *)&__p, 0, v16, v15);
    uint64_t v19 = CNTimeSpan::operator+(v8 + 552, &__p, v17, v18);
    if (v10) {
      BOOL v21 = 1;
    }
    else {
      BOOL v21 = (*(void *)&v12 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
    }
    if (v21 && (v19 || (*(void *)&v20 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000) && v10 != v19)
    {
      if (v10 >= v19)
      {
LABEL_29:
        *(unsigned char *)(v8 + 544) = 0;
        *(void *)(v8 + 552) = 0;
        *(void *)(v8 + 560) = 0xFFF0000000000000;
        sub_18DFF49CC((uint64_t)&__p);
        memcpy((void *)(v8 + 576), v105, 0x971uLL);
        goto LABEL_30;
      }
    }
    else if (v13 > v20)
    {
      goto LABEL_29;
    }
    std::string __p = &unk_1EDD14150;
    memcpy(v105, (const void *)(v8 + 576), 0x971uLL);
    BYTE1(v105[25]) = 1;
    std::bad_cast v35 = (cnprint::CNPrinter *)raven::RavenConvergenceEstimator::HandleEvent((raven::RavenConvergenceEstimator *)(v8 + 3000), (const raven::RavenSolutionEvent *)&__p);
    if (v35 && cnprint::CNPrinter::GetLogLevel(v35) <= 1)
    {
      LOWORD(v100) = 12;
      LOBYTE(v103) = 1;
      *(void *)std::string __src = (*(uint64_t (**)(uint64_t *))(v98 + 16))(&v98);
      *(void *)&__src[8] = v36;
      char v42 = cnprint::CNLogFormatter::FormatWarning(v8 + 496, (uint64_t)__src, "Could not initialize from external solution", v37, v38, v39, v40, v41, v97);
      if (*(char *)(v8 + 519) >= 0) {
        LOBYTE(v48) = v42;
      }
      else {
        uint64_t v48 = *(void *)(v8 + 496);
      }
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v100, (unsigned __int8 *)&v103, "%s", v43, v44, v45, v46, v47, v48);
    }
    goto LABEL_29;
  }
LABEL_30:
  uint64_t v103 = raven::RavenConvergenceEstimator::HandleTimeMarkEvent((raven::RavenConvergenceEstimator *)(v8 + 3000), (const raven::TimeMarkEvent *)&v98);
  uint64_t v49 = (cnprint::CNPrinter *)sub_18E056F48(&v103);
  if (!v49) {
    goto LABEL_41;
  }
  if (cnprint::CNPrinter::GetLogLevel(v49) <= 1)
  {
    LOWORD(v100) = 12;
    LOBYTE(v101) = 1;
    *(void *)std::string __src = (*(uint64_t (**)(uint64_t *))(v98 + 16))(&v98);
    *(void *)&__src[8] = v50;
    (*(void (**)(void **__return_ptr, uint64_t *))(v98 + 24))(&__p, &v98);
    uint64_t v56 = v105[1] >= 0 ? &__p : (void **)__p;
    char v57 = cnprint::CNLogFormatter::FormatWarning(v8 + 496, (uint64_t)__src, "Error handling event of type %s,code,%d", v51, v52, v53, v54, v55, (uint64_t)v56);
    if (*(char *)(v8 + 519) >= 0) {
      LOBYTE(v63) = v57;
    }
    else {
      uint64_t v63 = *(void *)(v8 + 496);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v100, (unsigned __int8 *)&v101, "%s", v58, v59, v60, v61, v62, v63);
    if (SHIBYTE(v105[1]) < 0) {
      operator delete(__p);
    }
  }
  if ((v103 & 4) != 0)
  {
    *(_WORD *)std::string __src = 12;
    LOBYTE(v100) = 2;
    std::string __p = (void *)(*(uint64_t (**)(uint64_t *))(v98 + 16))(&v98);
    v105[0] = v65;
    cnprint::CNLogFormatter::FormatWarning(v8 + 496, (uint64_t)&__p, "Resetting filter due to prediction error", v66, v67, v68, v69, v70, v97);
    if (*(char *)(v8 + 519) >= 0) {
      LOBYTE(v76) = v8 - 16;
    }
    else {
      uint64_t v76 = *(void *)(v8 + 496);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)__src, (unsigned __int8 *)&v100, "%s", v71, v72, v73, v74, v75, v76);
    int v64 = 1;
  }
  else
  {
LABEL_41:
    int v64 = 0;
  }
  if (*(unsigned char *)(v8 + 3058) && (v103 & 2) == 0)
  {
    if (!v64) {
      return;
    }
    goto LABEL_49;
  }
  sub_18DFF49CC((uint64_t)&__p);
  uint64_t CurrentTime = cnframework::ActiveObjectBase::GetCurrentTime((cnframework::ActiveObjectBase *)v8);
  memset(&v105[2], 0, 72);
  v105[0] = CurrentTime;
  v105[1] = v78;
  v105[11] = 0x7FF8000000000000;
  raven::RavenConvergenceEstimator::GetRavenStatus((raven::RavenConvergenceEstimator *)(v8 + 3000), (uint64_t)__src);
  memcpy(&v105[12], __src, 0x428uLL);
  if (LOBYTE(v105[25]) == *(unsigned __int8 *)(v8 + 3056))
  {
    raven::RavenConvergenceEstimator::GetRavenSolution((raven::RavenConvergenceEstimator *)(v8 + 3000), (uint64_t)__src);
    memcpy(&v105[145], __src, 0x360uLL);
    raven::RavenEstimator::GetRavenActivity((raven::RavenEstimator *)(v8 + 3000), (uint64_t)__src);
    memcpy(&v105[253], __src, 0x189uLL);
    if (BYTE1(v105[25]) == 1)
    {
      LOWORD(v100) = 12;
      LOBYTE(v101) = 2;
      *(void *)std::string __src = (*(uint64_t (**)(uint64_t *))(v98 + 16))(&v98);
      *(void *)&__src[8] = v81;
      char v87 = cnprint::CNLogFormatter::FormatWarning(v8 + 496, (uint64_t)__src, "Estimator unhealthy; resetting...",
              v82,
              v83,
              v84,
              v85,
              v86,
              v97);
      if (*(char *)(v8 + 519) >= 0) {
        LOBYTE(v93) = v87;
      }
      else {
        uint64_t v93 = *(void *)(v8 + 496);
      }
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v100, (unsigned __int8 *)&v101, "%s", v88, v89, v90, v91, v92, v93);
      int v64 = 1;
    }
    else
    {
      if (LOBYTE(v105[247])) {
        char v94 = v64;
      }
      else {
        char v94 = 1;
      }
      if ((v94 & 1) == 0)
      {
        double v95 = *(double *)&v105[250];
        if (*(double *)&v105[250] > 0.0)
        {
          v79.i64[0] = v105[248];
          *(_OWORD *)std::string __src = 0uLL;
          CNTimeSpan::SetTimeSpan((uint64_t *)__src, 0, v79, v80);
          double v101 = sqrt(v95);
          long long v100 = *(_OWORD *)__src;
          sub_18E0C2F48((uint64_t)&__p, (uint64_t)v99, &v100, (uint64_t *)&v101, *(int8x16_t *)__src, v96);
          goto LABEL_67;
        }
        int v64 = 0;
      }
    }
    sub_18E0C2FCC((uint64_t)&__p, (uint64_t)v99, v79, v80);
    if (v64)
    {
      BYTE1(v105[25]) = 1;
      raven::RavenConvergenceEstimator::Reset((raven::RavenConvergenceEstimator *)(v8 + 3000));
    }
LABEL_67:
    sub_18E0C3028();
  }
  if (v64) {
LABEL_49:
  }
    raven::RavenConvergenceEstimator::Reset((raven::RavenConvergenceEstimator *)(v8 + 3000));
}

void sub_18E0C2EB4(_Unwind_Exception *a1)
{
}

uint64_t sub_18E0C2EFC(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09DD0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0C2F3C()
{
  return &unk_1EDD09DD0;
}

void sub_18E0C2F48(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, int8x16_t a5, int8x16_t a6)
{
  raven::PopulateAllTimeFields(a1 + 8, a2, a3, a4, a5, a6);
  raven::PopulateAllTimeFields(a1 + 1168, a2, a3, a4, v10, v11);
  raven::PopulateAllTimeFields(a1 + 112, a2, a3, a4, v12, v13);

  raven::PopulateAllTimeFields(a1 + 2032, a2, a3, a4, v14, v15);
}

uint64_t sub_18E0C2FCC(uint64_t a1, uint64_t a2, int8x16_t a3, int8x16_t a4)
{
  raven::PopulateAllTimeFields(a1 + 8, a2, a3, a4);
  raven::PopulateAllTimeFields(a1 + 1168, a2, v6, v7);
  raven::PopulateAllTimeFields(a1 + 112, a2, v8, v9);

  return raven::PopulateAllTimeFields(a1 + 2032, a2, v10, v11);
}

void sub_18E0C3028()
{
  uint64_t v0 = operator new(0x60uLL);
  v0[1] = 0;
  v0[2] = 0;
  *uint64_t v0 = &unk_1EDD1E458;
  v0[3] = &unk_1EDD0A260;
  uint64_t v1 = MEMORY[0x1E4FBA3D8];
  *((unsigned char *)v0 + 32) = 0;
  v0[5] = 0;
  v0[6] = v1;
  void v0[7] = 0;
  unsigned char v0[8] = 0;
  sub_18DEDE7B0(v0 + 9, "");
  *((unsigned char *)v0 + 32) = 1;
  operator new();
}

void sub_18E0C3274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_18DEE4E18(a11);
  }
  sub_18DEE4E18(v11);
  _Unwind_Resume(a1);
}

void sub_18E0C32F8()
{
}

void *sub_18E0C330C()
{
}

void sub_18E0C3318()
{
}

void sub_18E0C33A8()
{
}

void *sub_18E0C33BC()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1EDD1CE18;
  return result;
}

void sub_18E0C33F4(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1CE18;
}

void sub_18E0C341C(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  int64x2_t v9 = sub_18E0C3628((uint64_t)v31, this, (uint64_t)this, a4, a5, a6, a7, a8);
  if ((*(uint64_t (**)(uint64_t, int64x2_t))(*(void *)v8 + 104))(v8, v9))
  {
    int8x16_t v10 = (cnprint::CNPrinter *)raven::RavenConvergenceEstimator::HandleEvent((raven::RavenConvergenceEstimator *)(v8 + 3000), (const raven::UserSpeedEvent *)v31);
    if (v10 && cnprint::CNPrinter::GetLogLevel(v10) <= 1)
    {
      __int16 v36 = 12;
      unsigned __int8 v35 = 1;
      v34[0] = (*(uint64_t (**)(void *))(v31[0] + 16))(v31);
      v34[1] = v11;
      (*(void (**)(void **__return_ptr, void *))(v31[0] + 24))(v32, v31);
      if (v33 >= 0) {
        int8x16_t v17 = v32;
      }
      else {
        int8x16_t v17 = (void **)v32[0];
      }
      cnprint::CNLogFormatter::FormatWarning(v8 + 496, (uint64_t)v34, "Failed to handle event - %s.", v12, v13, v14, v15, v16, (uint64_t)v17);
      if (*(char *)(v8 + 519) >= 0) {
        LOBYTE(v23) = v8 - 16;
      }
      else {
        uint64_t v23 = *(void *)(v8 + 496);
      }
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v36, &v35, "%s", v18, v19, v20, v21, v22, v23);
      if (v33 < 0) {
        operator delete(v32[0]);
      }
    }
  }
  else
  {
    LOWORD(v32[0]) = 12;
    LOBYTE(v34[0]) = 2;
    unsigned __int8 v24 = cnprint::CNLogFormatter::FormatGeneral((const void **)(v8 + 496), "Warning,RavenConvergenceEstimatorActiveObject is not configured");
    if (*(char *)(v8 + 519) >= 0) {
      LOBYTE(v30) = v24;
    }
    else {
      uint64_t v30 = *(void *)(v8 + 496);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v32, (unsigned __int8 *)v34, "%s", v25, v26, v27, v28, v29, v30);
  }
}

void sub_18E0C35C0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 57) < 0) {
    operator delete(*(void **)(v1 - 80));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_18E0C35DC(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09E00)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0C361C()
{
  return &unk_1EDD09E00;
}

int64x2_t sub_18E0C3628(uint64_t a1, cnframework::GenericEvent *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t EventType = cnframework::GenericEvent::GetEventType(this, (uint64_t)this, a3, a4, a5, a6, a7, a8);
  {
    uint64_t v18 = *((void *)this + 2);
    if (v18) {
      uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 16))(v18);
    }
    else {
      uint64_t v19 = MEMORY[0x1E4FBA3D8];
    }
    uint64_t v27 = (const char *)(*(void *)(v19 + 8) & 0x7FFFFFFFFFFFFFFFLL);
    if (v27 != (const char *)((unint64_t)off_1EDD050E8 & 0x7FFFFFFFFFFFFFFFLL))
    {
      if (strcmp(v27, (const char *)((unint64_t)off_1EDD050E8 & 0x7FFFFFFFFFFFFFFFLL)))
      {
        v35.__vftable = 0;
        std::bad_cast::bad_cast(&v35);
        v35.__vftable = (std::bad_cast_vtbl *)&unk_1EDD12A18;
        sub_18E0BA8B8();
      }
    }
    uint64_t v28 = *((void *)this + 2);
    *(void *)a1 = &unk_1EDD13A40;
    long long v30 = *(_OWORD *)(v28 + 32);
    long long v29 = *(_OWORD *)(v28 + 48);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(v28 + 16);
    *(_OWORD *)(a1 + 24) = v30;
    *(_OWORD *)(a1 + 40) = v29;
    int64x2_t result = *(int64x2_t *)(v28 + 96);
    long long v31 = *(_OWORD *)(v28 + 112);
    long long v32 = *(_OWORD *)(v28 + 80);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(v28 + 64);
    *(_OWORD *)(a1 + 104) = v31;
    *(int64x2_t *)(a1 + 88) = result;
    *(_OWORD *)(a1 + 72) = v32;
  }
  else
  {
    __int16 v34 = 3;
    unsigned __int8 v33 = 5;
    uint64_t v20 = cnframework::GenericEvent::GetEventType(this, v11, v12, v13, v14, v15, v16, v17);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v34, &v33, "Attempted to cast a GenericEvent of type %s to type %s.", v21, v22, v23, v24, v25, *(unsigned char *)(v20 + 8));
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(void *)(a1 + 72) = 0;
    *(void *)(a1 + 80) = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = &unk_1EDD13A40;
    *(unsigned char *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    *(unsigned char *)(a1 + 48) = 0;
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
    *(unsigned char *)(a1 + 72) = 0;
    *(void *)(a1 + 88) = 0;
    int64x2_t result = vdupq_n_s64(0x7FF8000000000000uLL);
    *(int64x2_t *)(a1 + 96) = result;
    *(void *)(a1 + 112) = 0x7FF8000000000000;
  }
  return result;
}

void sub_18E0C37F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::exception a12)
{
}

void sub_18E0C380C()
{
}

void *sub_18E0C3820()
{
  int64x2_t result = operator new(0x10uLL);
  *int64x2_t result = &unk_1EDD1CD68;
  return result;
}

void sub_18E0C3858(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1CD68;
}

void sub_18E0C3880(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  sub_18E0C3A8C((uint64_t)v30, this, (uint64_t)this, a4, a5, a6, a7, a8);
  if ((*(uint64_t (**)(uint64_t))(*(void *)v8 + 104))(v8))
  {
    int64x2_t v9 = (cnprint::CNPrinter *)raven::RavenConvergenceEstimator::HandleEvent((raven::RavenConvergenceEstimator *)(v8 + 3000), (const raven::VelocityEvent *)v30);
    if (v9 && cnprint::CNPrinter::GetLogLevel(v9) <= 1)
    {
      __int16 v35 = 12;
      unsigned __int8 v34 = 1;
      v33[0] = (*(uint64_t (**)(void *))(v30[0] + 16))(v30);
      v33[1] = v10;
      (*(void (**)(void **__return_ptr, void *))(v30[0] + 24))(v31, v30);
      if (v32 >= 0) {
        uint64_t v16 = v31;
      }
      else {
        uint64_t v16 = (void **)v31[0];
      }
      cnprint::CNLogFormatter::FormatWarning(v8 + 496, (uint64_t)v33, "Failed to handle event - %s.", v11, v12, v13, v14, v15, (uint64_t)v16);
      if (*(char *)(v8 + 519) >= 0) {
        LOBYTE(v22) = v8 - 16;
      }
      else {
        uint64_t v22 = *(void *)(v8 + 496);
      }
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v35, &v34, "%s", v17, v18, v19, v20, v21, v22);
      if (v32 < 0) {
        operator delete(v31[0]);
      }
    }
  }
  else
  {
    LOWORD(v31[0]) = 12;
    LOBYTE(v33[0]) = 2;
    unsigned __int8 v23 = cnprint::CNLogFormatter::FormatGeneral((const void **)(v8 + 496), "Warning,RavenConvergenceEstimatorActiveObject is not configured");
    if (*(char *)(v8 + 519) >= 0) {
      LOBYTE(v29) = v23;
    }
    else {
      uint64_t v29 = *(void *)(v8 + 496);
    }
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)v31, (unsigned __int8 *)v33, "%s", v24, v25, v26, v27, v28, v29);
  }
}

void sub_18E0C3A24(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 57) < 0) {
    operator delete(*(void **)(v1 - 80));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_18E0C3A40(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09DE0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0C3A80()
{
  return &unk_1EDD09DE0;
}

void sub_18E0C3A8C(uint64_t a1, cnframework::GenericEvent *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t EventType = cnframework::GenericEvent::GetEventType(this, (uint64_t)this, a3, a4, a5, a6, a7, a8);
  {
    uint64_t v18 = *((void *)this + 2);
    if (v18) {
      uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 16))(v18);
    }
    else {
      uint64_t v19 = MEMORY[0x1E4FBA3D8];
    }
    uint64_t v27 = (const char *)(*(void *)(v19 + 8) & 0x7FFFFFFFFFFFFFFFLL);
    if (v27 != (const char *)((unint64_t)off_1EDD05060 & 0x7FFFFFFFFFFFFFFFLL)
      && strcmp(v27, (const char *)((unint64_t)off_1EDD05060 & 0x7FFFFFFFFFFFFFFFLL)))
    {
      v31.__vftable = 0;
      std::bad_cast::bad_cast(&v31);
      v31.__vftable = (std::bad_cast_vtbl *)&unk_1EDD12A18;
      sub_18E0BA8B8();
    }
    uint64_t v28 = *((void *)this + 2);
    *(void *)a1 = &unk_1EDD13880;
    memcpy((void *)(a1 + 8), (const void *)(v28 + 16), 0x160uLL);
  }
  else
  {
    __int16 v30 = 3;
    unsigned __int8 v29 = 5;
    uint64_t v20 = cnframework::GenericEvent::GetEventType(this, v11, v12, v13, v14, v15, v16, v17);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v30, &v29, "Attempted to cast a GenericEvent of type %s to type %s.", v21, v22, v23, v24, v25, *(unsigned char *)(v20 + 8));
    *(void *)(a1 + 280) = 0;
    *(_OWORD *)(a1 + 248) = 0u;
    *(_OWORD *)(a1 + 232) = 0u;
    *(_OWORD *)(a1 + 216) = 0u;
    *(_OWORD *)(a1 + 200) = 0u;
    *(_OWORD *)(a1 + 184) = 0u;
    *(_OWORD *)(a1 + 168) = 0u;
    *(_OWORD *)(a1 + 152) = 0u;
    *(_OWORD *)(a1 + 136) = 0u;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 264) = 0u;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = &unk_1EDD13880;
    *(unsigned char *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    *(unsigned char *)(a1 + 48) = 0;
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
    *(unsigned char *)(a1 + 72) = 0;
    *(void *)(a1 + 80) = 0;
    *(void *)(a1 + 88) = 0;
    *(void *)(a1 + 104) = 0;
    *(void *)(a1 + 112) = 0;
    *(void *)(a1 + 96) = 0x7FF8000000000000;
    *(unsigned char *)(a1 + 120) = 0;
    *(void *)(a1 + 128) = 0;
    *(void *)(a1 + 136) = 0;
    *(unsigned char *)(a1 + 144) = 0;
    *(void *)(a1 + 152) = 0;
    *(void *)(a1 + 160) = 0;
    *(unsigned char *)(a1 + 168) = 0;
    *(void *)(a1 + 176) = 0;
    *(void *)(a1 + 184) = 0;
    *(void *)(a1 + 192) = 0x7FF8000000000000;
    int64x2_t v26 = vdupq_n_s64(0x7FF8000000000000uLL);
    *(int64x2_t *)(a1 + 208) = v26;
    *(int64x2_t *)(a1 + 224) = v26;
    *(int64x2_t *)(a1 + 240) = v26;
    *(int64x2_t *)(a1 + 256) = v26;
    *(void *)(a1 + 272) = 0x7FF8000000000000;
    *(int64x2_t *)(a1 + 288) = v26;
    *(int64x2_t *)(a1 + 304) = v26;
    *(int64x2_t *)(a1 + 320) = v26;
    *(int64x2_t *)(a1 + 336) = v26;
    *(void *)(a1 + 352) = 0x7FF8000000000000;
  }
}

void sub_18E0C3CC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::exception a12)
{
}

void sub_18E0C3CDC()
{
}

void *sub_18E0C3CF0()
{
  int64x2_t result = operator new(0x10uLL);
  *int64x2_t result = &unk_1EDD1B450;
  return result;
}

void sub_18E0C3D28(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1B450;
}

void sub_18E0C3D50(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = *a2;
  uint64_t EventType = cnframework::GenericEvent::GetEventType(this, (uint64_t)a2, (uint64_t)this, a4, a5, a6, a7, a8);
  {
    uint64_t v18 = *((void *)this + 2);
    if (v18) {
      uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 16))(v18);
    }
    else {
      uint64_t v19 = MEMORY[0x1E4FBA3D8];
    }
    uint64_t v26 = *(void *)(v19 + 8) & 0x7FFFFFFFFFFFFFFFLL;
    if (v26 != ((unint64_t)off_1EDD05770 & 0x7FFFFFFFFFFFFFFFLL))
    {
      uint64_t v26 = strcmp((const char *)v26, (const char *)((unint64_t)off_1EDD05770 & 0x7FFFFFFFFFFFFFFFLL));
      if (v26)
      {
        v220.__vftable = 0;
        std::bad_cast::bad_cast(&v220);
        v220.__vftable = (std::bad_cast_vtbl *)&unk_1EDD12A18;
        sub_18E0BA8B8();
      }
    }
    uint64_t v27 = *((void *)this + 2);
    long long v215 = *(_OWORD *)(v27 + 48);
    long long v216 = *(_OWORD *)(v27 + 64);
    long long v213 = *(_OWORD *)(v27 + 16);
    long long v214 = *(_OWORD *)(v27 + 32);
    *(_OWORD *)&v218[26] = *(_OWORD *)(v27 + 122);
    *(_OWORD *)long long v218 = *(_OWORD *)(v27 + 96);
    *(_OWORD *)&v218[16] = *(_OWORD *)(v27 + 112);
    long long v217 = *(_OWORD *)(v27 + 80);
    uint64_t v219 = *(void *)(v27 + 144);
  }
  else
  {
    LOWORD(v220.__vftable) = 3;
    v249[0] = 5;
    uint64_t v20 = cnframework::GenericEvent::GetEventType(this, v11, v12, v13, v14, v15, v16, v17);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v220, v249, "Attempted to cast a GenericEvent of type %s to type %s.", v21, v22, v23, v24, v25, *(unsigned char *)(v20 + 8));
    *(void *)long long v218 = 0;
    *(void *)&v218[24] = 0;
    long long v213 = 0u;
    long long v214 = 0u;
    long long v215 = 0u;
    long long v216 = 0u;
    long long v217 = 0u;
    *(int64x2_t *)&v218[8] = vdupq_n_s64(0x7FF8000000000000uLL);
    *(_OWORD *)&v218[32] = 0x7FF8000000000000uLL;
    uint64_t v219 = 0x7FF8000000000000;
  }
  uint64_t v28 = *(uint64_t **)(v9 + 552);
  unsigned __int8 v29 = *(char **)(v9 + 544);
  unint64_t v30 = ((char *)v28 - v29) >> 3;
  if (v28 == (uint64_t *)v29) {
    uint64_t v31 = 0;
  }
  else {
    uint64_t v31 = 28 * v30 - 1;
  }
  unint64_t v32 = *(void *)(v9 + 568);
  if (v31 == *(void *)(v9 + 576) + v32)
  {
    BOOL v97 = v32 >= 0x1C;
    unint64_t v33 = v32 - 28;
    if (v97)
    {
      *(void *)(v9 + 568) = v33;
      uint64_t v36 = *(void *)v29;
      unsigned __int8 v34 = (uint64_t *)(v29 + 8);
      uint64_t v35 = v36;
      *(void *)(v9 + 544) = v34;
      if (v28 == *(uint64_t **)(v9 + 560))
      {
        unint64_t v37 = *(void *)(v9 + 536);
        uint64_t v38 = (uint64_t)v34 - v37;
        if ((unint64_t)v34 <= v37)
        {
          uint64_t v62 = (uint64_t)v28 - v37;
          BOOL v61 = v62 == 0;
          uint64_t v63 = v62 >> 2;
          if (v61) {
            unint64_t v64 = 1;
          }
          else {
            unint64_t v64 = v63;
          }
          uint64_t v26 = (uint64_t)sub_18DEE2FBC(v64);
          uint64_t v66 = (uint64_t *)(v26 + 8 * (v64 >> 2));
          uint64_t v67 = *(uint64_t **)(v9 + 544);
          uint64_t v28 = v66;
          uint64_t v68 = *(void *)(v9 + 552) - (void)v67;
          if (v68)
          {
            uint64_t v28 = (uint64_t *)((char *)v66 + (v68 & 0xFFFFFFFFFFFFFFF8));
            uint64_t v69 = 8 * (v68 >> 3);
            uint64_t v70 = (void *)(v26 + 8 * (v64 >> 2));
            do
            {
              uint64_t v71 = *v67++;
              *v70++ = v71;
              v69 -= 8;
            }
            while (v69);
          }
          uint64_t v72 = *(void **)(v9 + 536);
          *(void *)(v9 + 536) = v26;
          *(void *)(v9 + 544) = v66;
          *(void *)(v9 + 552) = v28;
          *(void *)(v9 + 560) = v26 + 8 * v65;
          if (v72)
          {
            operator delete(v72);
            uint64_t v28 = *(uint64_t **)(v9 + 552);
          }
        }
        else
        {
          uint64_t v39 = v38 >> 3;
          BOOL v40 = v38 >> 3 < -1;
          uint64_t v41 = (v38 >> 3) + 2;
          if (v40) {
            uint64_t v42 = v41;
          }
          else {
            uint64_t v42 = v39 + 1;
          }
          uint64_t v43 = -(v42 >> 1);
          uint64_t v44 = v42 >> 1;
          uint64_t v45 = &v34[-v44];
          int64_t v46 = (char *)v28 - (char *)v34;
          if (v28 != v34)
          {
            uint64_t v26 = (uint64_t)memmove(&v34[-v44], v34, (char *)v28 - (char *)v34);
            uint64_t v28 = *(uint64_t **)(v9 + 544);
          }
          uint64_t v47 = &v28[v43];
          uint64_t v28 = (uint64_t *)((char *)v45 + v46);
          *(void *)(v9 + 552) = (char *)v45 + v46;
          *(void *)(v9 + 544) = v47;
        }
      }
      *uint64_t v28 = v35;
    }
    else
    {
      uint64_t v48 = *(char **)(v9 + 560);
      uint64_t v49 = *(char **)(v9 + 536);
      if (v30 >= (v48 - v49) >> 3)
      {
        if (v48 == v49) {
          unint64_t v51 = 1;
        }
        else {
          unint64_t v51 = (v48 - v49) >> 2;
        }
        uint64_t v52 = (uint64_t *)sub_18DEE2FBC(v51);
        uint64_t v54 = v53;
        uint64_t v55 = operator new(0xFC0uLL);
        uint64_t v56 = &v52[v30];
        char v57 = &v52[v54];
        if (v30 == v54)
        {
          uint64_t v58 = 8 * v30;
          if ((char *)v28 - v29 < 1)
          {
            uint64_t v155 = v58 >> 2;
            if (v28 == (uint64_t *)v29) {
              unint64_t v156 = 1;
            }
            else {
              unint64_t v156 = v155;
            }
            long long v157 = (char *)sub_18DEE2FBC(v156);
            uint64_t v56 = (uint64_t *)&v157[8 * (v156 >> 2)];
            char v57 = (uint64_t *)&v157[8 * v158];
            if (v52) {
              operator delete(v52);
            }
            uint64_t v52 = (uint64_t *)v157;
          }
          else
          {
            uint64_t v59 = v58 >> 3;
            if (v59 >= -1) {
              unint64_t v60 = v59 + 1;
            }
            else {
              unint64_t v60 = v59 + 2;
            }
            v56 -= v60 >> 1;
          }
        }
        *uint64_t v56 = (uint64_t)v55;
        uint64_t v28 = v56 + 1;
        for (uint64_t i = *(void *)(v9 + 552); i != *(void *)(v9 + 544); i -= 8)
        {
          if (v56 == v52)
          {
            if (v28 >= v57)
            {
              if (v57 == v52) {
                unint64_t v164 = 1;
              }
              else {
                unint64_t v164 = ((char *)v57 - (char *)v52) >> 2;
              }
              double v165 = (char *)sub_18DEE2FBC(v164);
              long long v167 = (uint64_t *)v165;
              uint64_t v56 = (uint64_t *)&v165[(2 * v164 + 6) & 0xFFFFFFFFFFFFFFF8];
              uint64_t v168 = (char *)v28 - (char *)v52;
              BOOL v61 = v28 == v52;
              uint64_t v28 = v56;
              if (!v61)
              {
                uint64_t v28 = (uint64_t *)((char *)v56 + (v168 & 0xFFFFFFFFFFFFFFF8));
                uint64_t v169 = 8 * (v168 >> 3);
                uint64_t v170 = v56;
                long long v171 = v52;
                do
                {
                  uint64_t v172 = *v171++;
                  *v170++ = v172;
                  v169 -= 8;
                }
                while (v169);
              }
              char v57 = (uint64_t *)&v165[8 * v166];
              if (v52) {
                operator delete(v52);
              }
              uint64_t v52 = v167;
            }
            else
            {
              uint64_t v160 = v57 - v28;
              if (v160 >= -1) {
                uint64_t v161 = v160 + 1;
              }
              else {
                uint64_t v161 = v160 + 2;
              }
              uint64_t v162 = v161 >> 1;
              uint64_t v56 = &v52[v161 >> 1];
              uint64_t v163 = v52;
              if (v28 != v52)
              {
                memmove(v56, v52, (char *)v28 - (char *)v52);
                uint64_t v163 = v28;
              }
              uint64_t v28 = &v163[v162];
            }
          }
          uint64_t v173 = *(void *)(i - 8);
          *--uint64_t v56 = v173;
        }
        uint64_t v26 = *(void *)(v9 + 536);
        *(void *)(v9 + 536) = v52;
        *(void *)(v9 + 544) = v56;
        *(void *)(v9 + 552) = v28;
        *(void *)(v9 + 560) = v57;
        if (v26)
        {
          operator delete((void *)v26);
          uint64_t v28 = *(uint64_t **)(v9 + 552);
        }
        goto LABEL_45;
      }
      uint64_t v26 = (uint64_t)operator new(0xFC0uLL);
      uint64_t v50 = v26;
      if (v48 == (char *)v28)
      {
        if (v29 == v49)
        {
          if (v28 == (uint64_t *)v29) {
            unint64_t v134 = 1;
          }
          else {
            unint64_t v134 = (v48 - v29) >> 2;
          }
          uint64_t v26 = (uint64_t)sub_18DEE2FBC(v134);
          unsigned __int8 v29 = (char *)(v26 + ((2 * v134 + 6) & 0xFFFFFFFFFFFFFFF8));
          double v136 = *(uint64_t **)(v9 + 544);
          long long v137 = v29;
          uint64_t v138 = *(void *)(v9 + 552) - (void)v136;
          if (v138)
          {
            long long v137 = &v29[v138 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v139 = 8 * (v138 >> 3);
            uint64_t v140 = (void *)(v26 + ((2 * v134 + 6) & 0xFFFFFFFFFFFFFFF8));
            do
            {
              uint64_t v141 = *v136++;
              *v140++ = v141;
              v139 -= 8;
            }
            while (v139);
          }
          long long v142 = *(void **)(v9 + 536);
          *(void *)(v9 + 536) = v26;
          *(void *)(v9 + 544) = v29;
          *(void *)(v9 + 552) = v137;
          *(void *)(v9 + 560) = v26 + 8 * v135;
          if (v142)
          {
            operator delete(v142);
            unsigned __int8 v29 = *(char **)(v9 + 544);
          }
        }
        *((void *)v29 - 1) = v50;
        uint64_t v143 = *(char **)(v9 + 544);
        *(void *)(v9 + 544) = v143 - 8;
        uint64_t v144 = *((void *)v143 - 1);
        *(void *)(v9 + 544) = v143;
        uint64_t v145 = *(char **)(v9 + 552);
        if (v145 == *(char **)(v9 + 560))
        {
          unint64_t v146 = *(void *)(v9 + 536);
          uint64_t v147 = (uint64_t)&v143[-v146];
          if ((unint64_t)v143 <= v146)
          {
            uint64_t v199 = (uint64_t)&v145[-v146];
            BOOL v61 = v199 == 0;
            uint64_t v200 = v199 >> 2;
            if (v61) {
              unint64_t v201 = 1;
            }
            else {
              unint64_t v201 = v200;
            }
            uint64_t v26 = (uint64_t)sub_18DEE2FBC(v201);
            long long v203 = (char *)(v26 + 8 * (v201 >> 2));
            uint64_t v204 = *(uint64_t **)(v9 + 544);
            uint64_t v145 = v203;
            uint64_t v205 = *(void *)(v9 + 552) - (void)v204;
            if (v205)
            {
              uint64_t v145 = &v203[v205 & 0xFFFFFFFFFFFFFFF8];
              uint64_t v206 = 8 * (v205 >> 3);
              uint64_t v207 = (void *)(v26 + 8 * (v201 >> 2));
              do
              {
                uint64_t v208 = *v204++;
                *v207++ = v208;
                v206 -= 8;
              }
              while (v206);
            }
            uint64_t v209 = *(void **)(v9 + 536);
            *(void *)(v9 + 536) = v26;
            *(void *)(v9 + 544) = v203;
            *(void *)(v9 + 552) = v145;
            *(void *)(v9 + 560) = v26 + 8 * v202;
            if (v209)
            {
              operator delete(v209);
              uint64_t v145 = *(char **)(v9 + 552);
            }
          }
          else
          {
            uint64_t v148 = v147 >> 3;
            BOOL v40 = v147 >> 3 < -1;
            uint64_t v149 = (v147 >> 3) + 2;
            if (v40) {
              uint64_t v150 = v149;
            }
            else {
              uint64_t v150 = v148 + 1;
            }
            uint64_t v151 = -(v150 >> 1);
            uint64_t v152 = v150 >> 1;
            uint64_t v153 = &v143[-8 * v152];
            int64_t v154 = v145 - v143;
            if (v145 != v143)
            {
              uint64_t v26 = (uint64_t)memmove(&v143[-8 * v152], v143, v145 - v143);
              uint64_t v143 = *(char **)(v9 + 544);
            }
            uint64_t v145 = &v153[v154];
            *(void *)(v9 + 552) = &v153[v154];
            *(void *)(v9 + 544) = &v143[8 * v151];
          }
        }
        *(void *)uint64_t v145 = v144;
      }
      else
      {
        *uint64_t v28 = v26;
      }
    }
    uint64_t v28 = (uint64_t *)(*(void *)(v9 + 552) + 8);
    *(void *)(v9 + 552) = v28;
LABEL_45:
    unsigned __int8 v29 = *(char **)(v9 + 544);
  }
  if (v28 == (uint64_t *)v29)
  {
    unint64_t v74 = 0;
  }
  else
  {
    unint64_t v73 = *(void *)(v9 + 576) + *(void *)(v9 + 568);
    unint64_t v74 = *(void *)&v29[8 * (v73 / 0x1C)] + 144 * (v73 % 0x1C);
  }
  *(void *)unint64_t v74 = &unk_1EDD138B0;
  *(_OWORD *)(v74 + 56) = v216;
  *(_OWORD *)(v74 + 40) = v215;
  *(_OWORD *)(v74 + 24) = v214;
  *(_OWORD *)(v74 + 8) = v213;
  *(_OWORD *)(v74 + 114) = *(_OWORD *)&v218[26];
  *(_OWORD *)(v74 + 104) = *(_OWORD *)&v218[16];
  *(_OWORD *)(v74 + 88) = *(_OWORD *)v218;
  *(_OWORD *)(v74 + 72) = v217;
  *(void *)unint64_t v74 = &unk_1EDD14768;
  *(void *)(v74 + 136) = v219;
  uint64_t v75 = *(void *)(v9 + 576);
  *(void *)(v9 + 576) = v75 + 1;
  if (v75 == -1)
  {
    if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v26) <= 1)
    {
      LOWORD(v220.__vftable) = 12;
      v249[0] = 1;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v220, v249, "#WARNING,Prefilted pressure is empty", v76, v77, v78, v79, v80, v210);
    }
    return;
  }
  unint64_t v81 = *(void *)(*(void *)(v9 + 544) + 8 * ((*(void *)(v9 + 568) + v75) / 0x1CuLL))
      + 144 * ((*(void *)(v9 + 568) + v75) % 0x1CuLL);
  uint64_t v82 = (*(uint64_t (**)(unint64_t))(*(void *)v81 + 16))(v81);
  double v84 = v83;
  *(void *)&long long v260 = v82;
  *((double *)&v260 + 1) = v83;
  unint64_t v85 = *(void *)(*(void *)(v9 + 544) + 8 * (*(void *)(v9 + 568) / 0x1CuLL))
      + 144 * (*(void *)(v9 + 568) % 0x1CuLL);
  v259[0] = (*(uint64_t (**)(unint64_t))(*(void *)v85 + 16))(v85);
  v259[1] = v86;
  unint64_t v93 = *(void *)(v9 + 576);
  v94.i64[0] = *(void *)(*(void *)(*(void *)(v9 + 544) + 8 * ((v93 + *(void *)(v9 + 568) - 1) / 0x1C))
                         + 144 * ((v93 + *(void *)(v9 + 568) - 1) % 0x1C)
                         + 136);
  double v95 = *(double *)v94.i64 * 1000.0;
  unint64_t v96 = (unint64_t)(COERCE__INT64(fabs(*(double *)v94.i64 * 1000.0)) - 0x10000000000000) >> 53;
  BOOL v97 = COERCE__INT64(*(double *)v94.i64 * 1000.0) <= -1 || v96 >= 0x3FF;
  BOOL v98 = v97 && (unint64_t)(COERCE__INT64(*(double *)v94.i64 * 1000.0) - 1) >= 0xFFFFFFFFFFFFFLL;
  double v99 = v84;
  if (v98)
  {
    LOWORD(v220.__vftable) = 12;
    v249[0] = 4;
    double v211 = v84 + (double)v82;
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v220, v249, "time,%.3lf,Most recent pressure is invalid", v87, v88, v89, v90, v91, SLOBYTE(v211));
    return;
  }
  long long v100 = (void *)(v9 + 496);
  if (*(unsigned char *)(v9 + 528))
  {
    uint64_t v101 = CNTimeSpan::operator-((uint64_t)&v260, (void *)(v9 + 496), v94, v92);
    *(double *)v94.i64 = v102 + (double)v101;
    uint64_t v103 = *(void *)(v9 + 488);
    v92.i64[0] = *(void *)(v103 + 1336);
    if (*(double *)v94.i64 > *(double *)v92.i64)
    {
      *long long v100 = 0;
      *(void *)(v9 + 504) = 0;
      int8x16_t v94 = (int8x16_t)vdupq_n_s64(0x7FF8000000000000uLL);
      *(int8x16_t *)(v9 + 512) = v94;
      *(unsigned char *)(v9 + 528) = 0;
    }
  }
  else
  {
    uint64_t v103 = *(void *)(v9 + 488);
  }
  uint64_t v104 = CNTimeSpan::operator-((uint64_t)&v260, v259, v94, v92);
  if (v105 + (double)v104 > *(double *)(v103 + 1344))
  {
    uint64_t v256 = 0;
    uint64_t v257 = 0;
    uint64_t v258 = 0;
    sub_18E0C4D50((uint64_t)&v256, v93);
    uint64_t v106 = *(void *)(v9 + 544);
    if (*(void *)(v9 + 552) != v106)
    {
      unint64_t v107 = *(void *)(v9 + 568);
      unint64_t v108 = v107 / 0x1C;
      uint64_t v109 = *(void *)(v106 + 8 * (v107 / 0x1C));
      uint64_t v110 = v109 + 144 * (v107 % 0x1C);
      unint64_t v111 = *(void *)(v106 + 8 * ((*(void *)(v9 + 576) + v107) / 0x1C))
           + 144 * ((*(void *)(v9 + 576) + v107) % 0x1C);
      if (v110 != v111)
      {
        uint64_t v112 = v106 + 8 * v108;
        uint64_t v113 = v256;
        do
        {
          *uint64_t v113 = vabdd_f64(*(double *)(v110 + 104), *(double *)(v110 + 136));
          v110 += 144;
          if (v110 - v109 == 4032)
          {
            uint64_t v114 = *(void *)(v112 + 8);
            v112 += 8;
            uint64_t v109 = v114;
            uint64_t v110 = v114;
          }
          ++v113;
        }
        while (v110 != v111);
      }
    }
    uint64_t v252 = 0;
    long long v253 = 0;
    uint64_t v254 = 0;
    v249[0] = 0;
    uint64_t v250 = 0;
    char v251 = 1;
    sub_18E0C5398(&v252);
    char v255 = 1;
    uint64_t v115 = (uint64_t *)v256;
    unsigned int v116 = (uint64_t *)v257;
    while (v115 != v116)
    {
      if (sub_18E0C4D80((uint64_t)v249, v115, 1.0))
      {
        LOWORD(v220.__vftable) = 12;
        v246[0] = 4;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v220, v246, "RavenDeltaAltitudeActiveObject failed to add noise sample %.3lf to OnlineRobustStatisticsEstimator", v117, v118, v119, v120, v121, *v115);
        (*(void (**)(uint64_t))(*(void *)v9 + 48))(v9);
        goto LABEL_158;
      }
      ++v115;
    }
    sub_18E0C5470((uint64_t)v249, 50.0);
    uint64_t v122 = *(void *)(v9 + 488);
    uint64_t v123 = *(void ***)(v9 + 544);
    long long v124 = *(void ***)(v9 + 552);
    if (v125 < *(double *)(v122 + 1352))
    {
      if (v124 == v123)
      {
        double v131 = v256;
      }
      else
      {
        unint64_t v126 = *(void *)(v9 + 568);
        long long v127 = &v123[v126 / 0x1C];
        unint64_t v128 = (unint64_t)*v127;
        unint64_t v129 = (unint64_t)*v127 + 144 * (v126 % 0x1C);
        unint64_t v130 = (unint64_t)v123[(*(void *)(v9 + 576) + v126) / 0x1C]
             + 144 * ((*(void *)(v9 + 576) + v126) % 0x1C);
        double v131 = v256;
        if (v129 != v130)
        {
          long long v132 = v256;
          do
          {
            double *v132 = *(double *)(v129 + 104) - *(double *)(v129 + 136);
            v129 += 144;
            if (v129 - v128 == 4032)
            {
              unint64_t v133 = (unint64_t)v127[1];
              ++v127;
              unint64_t v128 = v133;
              unint64_t v129 = v133;
            }
            ++v132;
          }
          while (v129 != v130);
        }
      }
      v246[0] = 0;
      long long v247 = 0u;
      memset(v248, 0, sizeof(v248));
      uint64_t v174 = v257;
      if (v131 != v257)
      {
        while (!sub_18DFF11E4((uint64_t)v246, v131, 1.0))
        {
          if (++v131 == v174)
          {
            double v180 = *(double *)&v248[5];
            uint64_t v122 = *(void *)(v9 + 488);
            goto LABEL_135;
          }
        }
        LOWORD(v220.__vftable) = 12;
        unsigned __int8 v245 = 4;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v220, &v245, "RavenDeltaAltitudeActiveObject failed to add noise sample %.3lf to OnlineStatisticsEstimator", v175, v176, v177, v178, v179, *(void *)v131);
        (*(void (**)(uint64_t))(*(void *)v9 + 48))(v9);
        goto LABEL_158;
      }
      double v180 = 0.0;
LABEL_135:
      double v186 = pow(v95 / 101325.0, 0.190263237);
      double v187 = sqrt(v180) * 1000.0;
      if (v187 <= *(double *)(v122 + 720)) {
        double v187 = *(double *)(v122 + 720);
      }
      if (fabs(v187) < 2.22044605e-16)
      {
        LOWORD(v220.__vftable) = 12;
        unsigned __int8 v245 = 4;
        double v212 = v99 + (double)v82;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v220, &v245, "time,%.3lf,Most recent pressure is invalid", v181, v182, v183, v184, v185, SLOBYTE(v212));
LABEL_158:
        if (v252)
        {
          long long v253 = v252;
          operator delete(v252);
        }
        if (v256)
        {
          uint64_t v257 = v256;
          operator delete(v256);
        }
        return;
      }
      double v188 = (v186 + -1.0) * -44330.7692;
      double v189 = fabs((v188 + 44330.7692) * 0.190263237 / v95) * v187;
      if (*(unsigned char *)(v9 + 528))
      {
        v220.__vftable = (std::bad_cast_vtbl *)&unk_1EDD14180;
        uint64_t v223 = 0;
        uint64_t v224 = 0;
        char v225 = 0;
        uint64_t v226 = 0;
        uint64_t v227 = 0;
        char v228 = 0;
        uint64_t v229 = 0;
        uint64_t v230 = 0;
        uint64_t v231 = 0x7FF8000000000000;
        uint64_t v234 = 0;
        uint64_t v235 = 0;
        char v236 = 0;
        uint64_t v237 = 0;
        uint64_t v238 = 0;
        char v239 = 0;
        uint64_t v240 = 0;
        uint64_t v241 = 0;
        uint64_t v242 = 0x7FF8000000000000;
        char v222 = 0;
        long long v221 = v260;
        char v233 = 0;
        long long v232 = *(_OWORD *)v100;
        double v190 = sqrt(*(double *)(v9 + 520) * *(double *)(v9 + 520) + v189 * v189);
        double v243 = v188 - *(double *)(v9 + 512);
        double v244 = v190;
        sub_18E0C4F70();
      }
      *(_OWORD *)long long v100 = v260;
      *(double *)(v9 + 512) = v188;
      *(double *)(v9 + 520) = v189;
      *(unsigned char *)(v9 + 528) = 1;
      uint64_t v123 = *(void ***)(v9 + 544);
      long long v124 = *(void ***)(v9 + 552);
    }
    if (v124 == v123)
    {
      uint64_t v123 = v124;
    }
    else
    {
      unint64_t v191 = *(void *)(v9 + 568);
      double v192 = &v123[v191 / 0x1C];
      unint64_t v193 = (unint64_t)v123[(*(void *)(v9 + 576) + v191) / 0x1C]
           + 144 * ((*(void *)(v9 + 576) + v191) % 0x1C);
      if ((char *)*v192 + 144 * (v191 % 0x1C) != (void *)v193)
      {
        uint64_t v194 = (void (***)(void))((char *)*v192 + 144 * (v191 % 0x1C));
        do
        {
          double v195 = *v194;
          v194 += 18;
          (*v195)();
          if ((char *)v194 - (unsigned char *)*v192 == 4032)
          {
            uint64_t v196 = (void (***)(void))v192[1];
            ++v192;
            uint64_t v194 = v196;
          }
        }
        while (v194 != (void (***)(void))v193);
        long long v124 = *(void ***)(v9 + 552);
        uint64_t v123 = *(void ***)(v9 + 544);
      }
    }
    *(void *)(v9 + 576) = 0;
    unint64_t v197 = (char *)v124 - (char *)v123;
    if (v197 >= 0x11)
    {
      do
      {
        operator delete(*v123);
        uint64_t v123 = (void **)(*(void *)(v9 + 544) + 8);
        *(void *)(v9 + 544) = v123;
        unint64_t v197 = *(void *)(v9 + 552) - (void)v123;
      }
      while (v197 > 0x10);
    }
    if (v197 >> 3 == 1)
    {
      uint64_t v198 = 14;
    }
    else
    {
      if (v197 >> 3 != 2) {
        goto LABEL_158;
      }
      uint64_t v198 = 28;
    }
    *(void *)(v9 + 568) = v198;
    goto LABEL_158;
  }
}

void sub_18E0C4C74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,std::exception a30)
{
  unint64_t v32 = *(void **)(v30 - 224);
  if (v32)
  {
    *(void *)(v30 - 216) = v32;
    operator delete(v32);
  }
  unint64_t v33 = *(void **)(v30 - 192);
  if (v33)
  {
    *(void *)(v30 - 184) = v33;
    operator delete(v33);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_18E0C4D04(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09950)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0C4D44()
{
  return &unk_1EDD09950;
}

void sub_18E0C4D50(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 8 * a2;
    }
  }
  else
  {
    sub_18E0C527C((char **)a1, a2 - v2);
  }
}

uint64_t sub_18E0C4D80(uint64_t a1, uint64_t *a2, double a3)
{
  if (!*(unsigned char *)a1)
  {
    *(unsigned char *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(unsigned char *)(a1 + 16) = 1;
    *(void *)(a1 + 32) = *(void *)(a1 + 24);
    sub_18E0C5398((char **)(a1 + 24));
    *(unsigned char *)(a1 + 48) = 1;
  }
  BOOL v6 = (*(void *)&a3 & 0x7FFFFFFFFFFFFFFFuLL) - 1 < 0xFFFFFFFFFFFFFLL;
  BOOL v7 = ((*(void *)&a3 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 < 0x3FF;
  if (a3 >= 0.0)
  {
    BOOL v7 = 0;
    BOOL v6 = 0;
  }
  if ((*(void *)&a3 & 0x7FFFFFFFFFFFFFFFLL) == 0) {
    BOOL v6 = 1;
  }
  int v8 = (*(void *)&a3 & 0x7FFFFFFFFFFFFFFFLL) == 0x7FF0000000000000 || v6;
  if ((*(void *)&a3 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FF0000000000000) {
    int v8 = 1;
  }
  uint64_t result = 0xFFFFFFFFLL;
  if (((v8 | v7) & 1) == 0)
  {
    uint64_t v10 = *(double **)(a1 + 24);
    uint64_t v11 = *(double **)(a1 + 32);
    *(double *)(a1 + 8) = *(double *)(a1 + 8) + a3;
    uint64_t v12 = *a2;
    unint64_t v13 = *(void *)(a1 + 40);
    if ((unint64_t)v11 >= v13)
    {
      uint64_t v15 = ((char *)v11 - (char *)v10) >> 4;
      unint64_t v16 = v15 + 1;
      if ((unint64_t)(v15 + 1) >> 60) {
        sub_18DEE1FC8();
      }
      uint64_t v17 = v13 - (void)v10;
      if (v17 >> 3 > v16) {
        unint64_t v16 = v17 >> 3;
      }
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v18 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v18 = v16;
      }
      if (v18)
      {
        uint64_t v19 = (char *)sub_18DFF7B64(a1 + 40, v18);
        uint64_t v20 = *(double **)(a1 + 24);
        uint64_t v21 = *(double **)(a1 + 32);
      }
      else
      {
        uint64_t v19 = 0;
        uint64_t v20 = v10;
        uint64_t v21 = v11;
      }
      uint64_t v22 = &v19[16 * v15];
      uint64_t v23 = &v19[16 * v18];
      *(double *)uint64_t v22 = a3;
      *((void *)v22 + 1) = v12;
      uint64_t v14 = v22 + 16;
      if (v21 != v20)
      {
        do
        {
          *((_OWORD *)v22 - 1) = *((_OWORD *)v21 - 1);
          v22 -= 16;
          v21 -= 2;
        }
        while (v21 != v20);
        uint64_t v20 = *(double **)(a1 + 24);
      }
      *(void *)(a1 + 24) = v22;
      *(void *)(a1 + 32) = v14;
      *(void *)(a1 + 40) = v23;
      if (v20) {
        operator delete(v20);
      }
    }
    else
    {
      *uint64_t v11 = a3;
      *((void *)v11 + 1) = v12;
      uint64_t v14 = (char *)(v11 + 2);
    }
    *(void *)(a1 + 32) = v14;
    if (v11 != v10)
    {
      BOOL v25 = vabdd_f64(**(double **)(a1 + 24), a3) < 2.22044605e-16 && *(unsigned char *)(a1 + 16) != 0;
      *(unsigned char *)(a1 + 16) = v25;
      *(unsigned char *)(a1 + 48) = 0;
    }
    uint64_t result = 0;
    *(unsigned char *)a1 = 1;
  }
  return result;
}

void sub_18E0C4F70()
{
  uint64_t v0 = operator new(0x60uLL);
  v0[1] = 0;
  v0[2] = 0;
  *uint64_t v0 = &unk_1EDD1E458;
  v0[3] = &unk_1EDD0A260;
  uint64_t v1 = MEMORY[0x1E4FBA3D8];
  *((unsigned char *)v0 + 32) = 0;
  v0[5] = 0;
  v0[6] = v1;
  void v0[7] = 0;
  unsigned char v0[8] = 0;
  sub_18DEDE7B0(v0 + 9, "");
  *((unsigned char *)v0 + 32) = 1;
  operator new();
}

void sub_18E0C51FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_18DEE4E18(a11);
  }
  sub_18DEE4E18(v11);
  _Unwind_Resume(a1);
}

void sub_18E0C527C(char **a1, unint64_t a2)
{
  BOOL v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  long long v5 = v6;
  BOOL v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    int v8 = *a1;
    uint64_t v9 = v7 - *a1;
    unint64_t v10 = a2 + (v9 >> 3);
    if (v10 >> 61) {
      sub_18DEE1FC8();
    }
    uint64_t v11 = v9 >> 3;
    uint64_t v12 = v5 - v8;
    if (v12 >> 2 > v10) {
      unint64_t v10 = v12 >> 2;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v10;
    }
    if (v13)
    {
      uint64_t v14 = (char *)sub_18DEDF808(v4, v13);
      int v8 = *a1;
      BOOL v7 = a1[1];
    }
    else
    {
      uint64_t v14 = 0;
    }
    uint64_t v15 = &v14[8 * v11];
    unint64_t v16 = &v14[8 * v13];
    bzero(v15, 8 * a2);
    uint64_t v17 = &v15[8 * a2];
    while (v7 != v8)
    {
      uint64_t v18 = *((void *)v7 - 1);
      v7 -= 8;
      *((void *)v15 - 1) = v18;
      v15 -= 8;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

void sub_18E0C5398(char **a1)
{
  uint64_t v2 = (uint64_t)(a1 + 2);
  long long v3 = a1[2];
  uint64_t v4 = *a1;
  long long v5 = a1[1];
  unint64_t v6 = (v5 - v4) >> 4;
  if (v6 >= (v3 - v4) >> 4) {
    return;
  }
  if (v5 == v4)
  {
    uint64_t v11 = 0;
    uint64_t v9 = 16 * v6;
    goto LABEL_8;
  }
  BOOL v7 = (char *)sub_18DFF7B64(v2, v6);
  int v8 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v9 = (uint64_t)&v7[16 * v6];
  uint64_t v11 = &v7[16 * v10];
  if (v4 == *a1)
  {
LABEL_8:
    uint64_t v12 = v9;
    goto LABEL_9;
  }
  uint64_t v12 = v9;
  do
  {
    *(_OWORD *)(v12 - 16) = *((_OWORD *)v4 - 1);
    v12 -= 16;
    v4 -= 16;
  }
  while (v4 != v8);
  uint64_t v4 = *a1;
LABEL_9:
  *a1 = (char *)v12;
  a1[1] = (char *)v9;
  a1[2] = v11;
  if (v4)
  {
    operator delete(v4);
  }
}

void sub_18E0C5470(uint64_t a1, double a2)
{
  if (a2 >= 0.0 && a2 <= 100.0 && (*(void *)&a2 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    if (*(unsigned char *)a1)
    {
      unint64_t v5 = *(void *)(a1 + 24);
      unint64_t v6 = *(double **)(a1 + 32);
      if ((double *)((char *)v6 - v5) != (double *)16)
      {
        unint64_t v7 = (uint64_t)((uint64_t)v6 - v5) >> 4;
        if (!*(unsigned char *)(a1 + 48))
        {
          unint64_t v8 = 126 - 2 * __clz(v7);
          if (v6 == (double *)v5) {
            uint64_t v9 = 0;
          }
          else {
            uint64_t v9 = v8;
          }
          sub_18E0C56C4(v5, v6, (uint64_t)&v23, v9, 1);
          *(unsigned char *)(a1 + 48) = 1;
        }
        double v10 = a2 / 100.0;
        if (*(unsigned char *)(a1 + 16))
        {
          double v11 = (double)v7 + 1.0;
          if (v10 > 1.0 / v11 && v10 < (double)v7 / v11)
          {
            double v12 = v10 * v11;
            unint64_t v13 = vcvtmd_u64_f64(v12);
            unint64_t v14 = (uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 4;
            if (v14 <= v13 - 1 || v14 <= v13) {
              sub_18E0C64E0();
            }
            fmod(v12, 1.0);
          }
        }
        else
        {
          double v15 = *(double *)(a1 + 8);
          unint64_t v16 = *(double **)(a1 + 24);
          double v17 = *v16 * 0.5 / v15;
          if (v10 > v17)
          {
            uint64_t v18 = *(double **)(a1 + 32);
            if (v10 < *(v18 - 2) * -0.5 / v15 + 1.0 && v16 != v18)
            {
              double v19 = v17 + 0.0;
              if (v17 + 0.0 < v10)
              {
                uint64_t v20 = v16 + 2;
                do
                {
                  if (v20 == v18) {
                    break;
                  }
                  double v21 = v17 + v19;
                  double v22 = *v20;
                  v20 += 2;
                  double v17 = v22 * 0.5 / v15;
                  double v19 = v21 + v17;
                }
                while (v19 < v10);
              }
            }
          }
        }
      }
    }
  }
}

void sub_18E0C56C4(unint64_t a1, double *a2, uint64_t a3, uint64_t a4, char a5)
{
LABEL_1:
  unint64_t v11 = a1;
LABEL_2:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    a1 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (uint64_t)a2 - v11;
    unint64_t v15 = (uint64_t)((uint64_t)a2 - v11) >> 4;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          if (*(a2 - 1) < *(double *)(v11 + 8))
          {
            double v22 = *(double *)v11;
            *(double *)unint64_t v11 = *(a2 - 2);
            *(a2 - 2) = v22;
            uint64_t v23 = *(void *)(v11 + 8);
            *(double *)(v11 + 8) = *(a2 - 1);
            *((void *)a2 - 1) = v23;
          }
          break;
        case 3uLL:
          sub_18E0C5B7C((double *)v11, (double *)(v11 + 16), a2 - 2);
          break;
        case 4uLL:
          sub_18E0C5FF8((double *)v11, v11 + 16, v11 + 32, (uint64_t)(a2 - 2));
          break;
        case 5uLL:
          sub_18E0C60C4((double *)v11, (double *)(v11 + 16), (double *)(v11 + 32), (double *)(v11 + 48), a2 - 2);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v14 <= 383) {
      break;
    }
    if (v13 == 1)
    {
      if ((double *)v11 != a2)
      {
        sub_18E0C61CC(v11, a2, a2, a3);
      }
      return;
    }
    unint64_t v16 = v15 >> 1;
    double v17 = (double *)(v11 + 16 * (v15 >> 1));
    if ((unint64_t)v14 >= 0x801)
    {
      sub_18E0C5B7C((double *)v11, (double *)(v11 + 16 * (v15 >> 1)), a2 - 2);
      sub_18E0C5B7C((double *)(v11 + 16), v17 - 2, a2 - 4);
      sub_18E0C5B7C((double *)(v11 + 32), (double *)(v11 + 16 + 16 * v16), a2 - 6);
      sub_18E0C5B7C(v17 - 2, v17, (double *)(v11 + 16 + 16 * v16));
      long long v18 = *(_OWORD *)v11;
      *(_OWORD *)unint64_t v11 = *(_OWORD *)v17;
      *(_OWORD *)double v17 = v18;
      if (a5) {
        goto LABEL_13;
      }
    }
    else
    {
      sub_18E0C5B7C((double *)(v11 + 16 * (v15 >> 1)), (double *)v11, a2 - 2);
      if (a5) {
        goto LABEL_13;
      }
    }
    if (*(double *)(v11 - 8) >= *(double *)(v11 + 8))
    {
      unint64_t v11 = sub_18E0C5C74((double *)v11, a2);
      goto LABEL_18;
    }
LABEL_13:
    unint64_t v19 = sub_18E0C5D5C((double *)v11, a2);
    if ((v20 & 1) == 0) {
      goto LABEL_16;
    }
    BOOL v21 = sub_18E0C5E44(v11, v19);
    unint64_t v11 = v19 + 16;
    if (sub_18E0C5E44(v19 + 16, (uint64_t)a2))
    {
      a4 = -v13;
      a2 = (double *)v19;
      if (v21) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v12 = v13 + 1;
    if (!v21)
    {
LABEL_16:
      sub_18E0C56C4(a1, v19, a3, -v13, a5 & 1);
      unint64_t v11 = v19 + 16;
LABEL_18:
      a5 = 0;
      a4 = -v13;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    sub_18E0C5A94(v11, a2);
  }
  else
  {
    sub_18E0C5B14((void *)v11, a2);
  }
}

uint64_t sub_18E0C5A94(uint64_t result, void *a2)
{
  if ((void *)result != a2)
  {
    uint64_t v2 = (void *)(result + 16);
    if ((void *)(result + 16) != a2)
    {
      uint64_t v3 = 0;
      uint64_t v4 = (void *)result;
      do
      {
        double v5 = *((double *)v4 + 3);
        double v6 = *((double *)v4 + 1);
        uint64_t v4 = v2;
        if (v5 < v6)
        {
          uint64_t v7 = *v2;
          uint64_t v8 = v3;
          while (1)
          {
            uint64_t v9 = result + v8;
            uint64_t v10 = *(void *)(result + v8 + 8);
            *(void *)(v9 + 16) = *(void *)(result + v8);
            *(void *)(v9 + 24) = v10;
            if (!v8) {
              break;
            }
            v8 -= 16;
            if (v5 >= *(double *)(v9 - 8))
            {
              uint64_t v11 = result + v8 + 16;
              goto LABEL_10;
            }
          }
          uint64_t v11 = result;
LABEL_10:
          *(void *)uint64_t v11 = v7;
          *(double *)(v11 + 8) = v5;
        }
        uint64_t v2 = v4 + 2;
        v3 += 16;
      }
      while (v4 + 2 != a2);
    }
  }
  return result;
}

void *sub_18E0C5B14(void *result, void *a2)
{
  if (result != a2)
  {
    uint64_t v2 = result + 2;
    if (result + 2 != a2)
    {
      uint64_t v3 = (double *)(result + 3);
      do
      {
        double v4 = *((double *)result + 3);
        double v5 = *((double *)result + 1);
        uint64_t result = v2;
        if (v4 < v5)
        {
          uint64_t v6 = *v2;
          uint64_t v7 = v3;
          do
          {
            uint64_t v8 = v7;
            double v9 = *(v7 - 4);
            *(v7 - 1) = *(v7 - 3);
            uint64_t v10 = *((void *)v7 - 2);
            v7 -= 2;
            *(void *)uint64_t v8 = v10;
          }
          while (v4 < v9);
          *((void *)v7 - 1) = v6;
          *uint64_t v7 = v4;
        }
        uint64_t v2 = result + 2;
        v3 += 2;
      }
      while (result + 2 != a2);
    }
  }
  return result;
}

uint64_t sub_18E0C5B7C(double *a1, double *a2, double *a3)
{
  uint64_t v3 = a2 + 1;
  double v4 = a2[1];
  double v5 = a1 + 1;
  double v6 = a3[1];
  if (v4 >= a1[1])
  {
    if (v6 >= v4) {
      return 0;
    }
    double v9 = *a2;
    *a2 = *a3;
    *a3 = v9;
    uint64_t v10 = *((void *)a2 + 1);
    a2[1] = a3[1];
    *((void *)a3 + 1) = v10;
    if (a2[1] < *v5)
    {
      double v11 = *a1;
      *a1 = *a2;
      *a2 = v11;
      uint64_t result = 2;
LABEL_10:
      double v14 = *v5;
      *double v5 = *v3;
      *uint64_t v3 = v14;
      return result;
    }
  }
  else
  {
    uint64_t v7 = *(void *)a1;
    if (v6 < v4)
    {
      *a1 = *a3;
      *(void *)a3 = v7;
      uint64_t result = 1;
LABEL_9:
      uint64_t v3 = a3 + 1;
      goto LABEL_10;
    }
    *a1 = *a2;
    *(void *)a2 = v7;
    double v12 = a1[1];
    a1[1] = a2[1];
    a2[1] = v12;
    if (a3[1] < v12)
    {
      double v13 = *a2;
      *a2 = *a3;
      *a3 = v13;
      uint64_t result = 2;
      double v5 = a2 + 1;
      goto LABEL_9;
    }
  }
  return 1;
}

unint64_t sub_18E0C5C74(double *a1, double *a2)
{
  double v2 = a1[1];
  if (v2 >= *(a2 - 1))
  {
    unint64_t v6 = (unint64_t)(a1 + 2);
    do
    {
      unint64_t v4 = v6;
      if (v6 >= (unint64_t)a2) {
        break;
      }
      double v7 = *(double *)(v6 + 8);
      v6 += 16;
    }
    while (v2 >= v7);
  }
  else
  {
    uint64_t v3 = a1;
    do
    {
      unint64_t v4 = (unint64_t)(v3 + 2);
      double v5 = v3[3];
      v3 += 2;
    }
    while (v2 >= v5);
  }
  if (v4 >= (unint64_t)a2)
  {
    uint64_t v8 = a2;
  }
  else
  {
    do
    {
      uint64_t v8 = a2 - 2;
      double v9 = *(a2 - 1);
      a2 -= 2;
    }
    while (v2 < v9);
  }
  double v10 = *a1;
  while (v4 < (unint64_t)v8)
  {
    uint64_t v11 = *(void *)v4;
    *(double *)unint64_t v4 = *v8;
    *(void *)uint64_t v8 = v11;
    uint64_t v12 = *(void *)(v4 + 8);
    *(double *)(v4 + 8) = v8[1];
    *((void *)v8 + 1) = v12;
    do
    {
      double v13 = *(double *)(v4 + 24);
      v4 += 16;
    }
    while (v2 >= v13);
    do
    {
      double v14 = *(v8 - 1);
      v8 -= 2;
    }
    while (v2 < v14);
  }
  if ((double *)(v4 - 16) != a1)
  {
    *a1 = *(double *)(v4 - 16);
    a1[1] = *(double *)(v4 - 8);
  }
  *(double *)(v4 - 16) = v10;
  *(double *)(v4 - 8) = v2;
  return v4;
}

unint64_t sub_18E0C5D5C(double *a1, double *a2)
{
  uint64_t v2 = 0;
  double v3 = *a1;
  double v4 = a1[1];
  do
  {
    double v5 = a1[v2 + 3];
    v2 += 2;
  }
  while (v5 < v4);
  unint64_t v6 = (unint64_t)&a1[v2];
  if (v2 == 2)
  {
    while (v6 < (unint64_t)a2)
    {
      double v7 = a2 - 2;
      double v9 = *(a2 - 1);
      a2 -= 2;
      if (v9 < v4) {
        goto LABEL_9;
      }
    }
    double v7 = a2;
  }
  else
  {
    do
    {
      double v7 = a2 - 2;
      double v8 = *(a2 - 1);
      a2 -= 2;
    }
    while (v8 >= v4);
  }
LABEL_9:
  unint64_t v10 = (unint64_t)&a1[v2];
  if (v6 < (unint64_t)v7)
  {
    uint64_t v11 = v7;
    do
    {
      uint64_t v12 = *(void *)v10;
      *(double *)unint64_t v10 = *v11;
      *(void *)uint64_t v11 = v12;
      uint64_t v13 = *(void *)(v10 + 8);
      *(double *)(v10 + 8) = v11[1];
      *((void *)v11 + 1) = v13;
      do
      {
        double v14 = *(double *)(v10 + 24);
        v10 += 16;
      }
      while (v14 < v4);
      do
      {
        double v15 = *(v11 - 1);
        v11 -= 2;
      }
      while (v15 >= v4);
    }
    while (v10 < (unint64_t)v11);
  }
  if ((double *)(v10 - 16) != a1)
  {
    *a1 = *(double *)(v10 - 16);
    a1[1] = *(double *)(v10 - 8);
  }
  *(double *)(v10 - 16) = v3;
  *(double *)(v10 - 8) = v4;
  return v10 - 16;
}

BOOL sub_18E0C5E44(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(double *)(a2 - 8) < *(double *)(a1 + 8))
      {
        double v6 = *(double *)a1;
        *(void *)a1 = *(void *)(a2 - 16);
        *(double *)(a2 - 16) = v6;
        uint64_t v7 = *(void *)(a1 + 8);
        *(void *)(a1 + 8) = *(void *)(a2 - 8);
        *(void *)(a2 - 8) = v7;
      }
      return result;
    case 3:
      sub_18E0C5B7C((double *)a1, (double *)(a1 + 16), (double *)(a2 - 16));
      return 1;
    case 4:
      sub_18E0C5FF8((double *)a1, a1 + 16, a1 + 32, a2 - 16);
      return 1;
    case 5:
      sub_18E0C60C4((double *)a1, (double *)(a1 + 16), (double *)(a1 + 32), (double *)(a1 + 48), (double *)(a2 - 16));
      return 1;
    default:
      uint64_t v8 = a1 + 32;
      sub_18E0C5B7C((double *)a1, (double *)(a1 + 16), (double *)(a1 + 32));
      uint64_t v9 = a1 + 48;
      if (a1 + 48 == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    double v12 = *(double *)(v9 + 8);
    if (v12 < *(double *)(v8 + 8))
    {
      uint64_t v13 = *(void *)v9;
      uint64_t v14 = v10;
      while (1)
      {
        uint64_t v15 = a1 + v14;
        uint64_t v16 = *(void *)(a1 + v14 + 40);
        *(void *)(v15 + 48) = *(void *)(a1 + v14 + 32);
        *(void *)(v15 + 56) = v16;
        if (v14 == -32) {
          break;
        }
        v14 -= 16;
        if (v12 >= *(double *)(v15 + 24))
        {
          uint64_t v17 = a1 + v14 + 48;
          goto LABEL_12;
        }
      }
      uint64_t v17 = a1;
LABEL_12:
      *(void *)uint64_t v17 = v13;
      *(double *)(v17 + 8) = v12;
      if (++v11 == 8) {
        return v9 + 16 == a2;
      }
    }
    uint64_t v8 = v9;
    v10 += 16;
    v9 += 16;
    if (v9 == a2) {
      return 1;
    }
  }
}

double sub_18E0C5FF8(double *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_18E0C5B7C(a1, (double *)a2, (double *)a3);
  double result = *(double *)(a4 + 8);
  if (result < *(double *)(a3 + 8))
  {
    double v9 = *(double *)a3;
    *(void *)a3 = *(void *)a4;
    *(double *)a4 = v9;
    uint64_t v10 = *(void *)(a3 + 8);
    *(void *)(a3 + 8) = *(void *)(a4 + 8);
    *(void *)(a4 + 8) = v10;
    double result = *(double *)(a3 + 8);
    if (result < *(double *)(a2 + 8))
    {
      double v11 = *(double *)a2;
      *(void *)a2 = *(void *)a3;
      *(double *)a3 = v11;
      uint64_t v12 = *(void *)(a2 + 8);
      *(void *)(a2 + 8) = *(void *)(a3 + 8);
      *(void *)(a3 + 8) = v12;
      double result = *(double *)(a2 + 8);
      if (result < a1[1])
      {
        double v13 = *a1;
        *a1 = *(double *)a2;
        *(double *)a2 = v13;
        double result = a1[1];
        a1[1] = *(double *)(a2 + 8);
        *(double *)(a2 + 8) = result;
      }
    }
  }
  return result;
}

double sub_18E0C60C4(double *a1, double *a2, double *a3, double *a4, double *a5)
{
  sub_18E0C5FF8(a1, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4);
  double result = a5[1];
  if (result < a4[1])
  {
    double v11 = *a4;
    *a4 = *a5;
    *a5 = v11;
    uint64_t v12 = *((void *)a4 + 1);
    a4[1] = a5[1];
    *((void *)a5 + 1) = v12;
    double result = a4[1];
    if (result < a3[1])
    {
      double v13 = *a3;
      *a3 = *a4;
      *a4 = v13;
      uint64_t v14 = *((void *)a3 + 1);
      a3[1] = a4[1];
      *((void *)a4 + 1) = v14;
      double result = a3[1];
      if (result < a2[1])
      {
        double v15 = *a2;
        *a2 = *a3;
        *a3 = v15;
        uint64_t v16 = *((void *)a2 + 1);
        a2[1] = a3[1];
        *((void *)a3 + 1) = v16;
        double result = a2[1];
        if (result < a1[1])
        {
          double v17 = *a1;
          *a1 = *a2;
          *a2 = v17;
          double result = a1[1];
          a1[1] = a2[1];
          a2[1] = result;
        }
      }
    }
  }
  return result;
}

double *sub_18E0C61CC(uint64_t a1, double *a2, double *a3, uint64_t a4)
{
  if ((double *)a1 != a2)
  {
    uint64_t v8 = (uint64_t)a2 - a1;
    uint64_t v9 = ((uint64_t)a2 - a1) >> 4;
    if ((uint64_t)a2 - a1 >= 17)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = (double *)(a1 + 16 * v10);
      do
      {
        sub_18E0C6340(a1, a4, v9, v12);
        v12 -= 2;
        --v11;
      }
      while (v11);
    }
    double v13 = a2;
    if (a2 != a3)
    {
      uint64_t v14 = a2;
      do
      {
        if (v14[1] < *(double *)(a1 + 8))
        {
          double v15 = *v14;
          *uint64_t v14 = *(double *)a1;
          *(double *)a1 = v15;
          uint64_t v16 = *((void *)v14 + 1);
          v14[1] = *(double *)(a1 + 8);
          *(void *)(a1 + 8) = v16;
          sub_18E0C6340(a1, a4, v9, (double *)a1);
        }
        v14 += 2;
      }
      while (v14 != a3);
      double v13 = a3;
    }
    if (v8 >= 17)
    {
      uint64_t v17 = (unint64_t)v8 >> 4;
      long long v18 = a2 - 2;
      do
      {
        double v20 = *(double *)a1;
        uint64_t v19 = *(void *)(a1 + 8);
        sub_18E0C6408(a1, a4, v17);
        if (v18 == v21)
        {
          *BOOL v21 = v20;
          *((void *)v21 + 1) = v19;
        }
        else
        {
          *BOOL v21 = *v18;
          v21[1] = v18[1];
          *long long v18 = v20;
          *((void *)v18 + 1) = v19;
          sub_18E0C6478(a1, (uint64_t)(v21 + 2), a4, ((uint64_t)v21 - a1 + 16) >> 4);
        }
        v18 -= 2;
      }
      while (v17-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t sub_18E0C6340(uint64_t result, uint64_t a2, uint64_t a3, double *a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = (uint64_t)a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 4)
    {
      uint64_t v6 = v4 >> 3;
      uint64_t v7 = (v4 >> 3) + 1;
      uint64_t v8 = (double *)(result + 16 * v7);
      uint64_t v9 = v6 + 2;
      if (v9 < a3 && v8[1] < v8[3])
      {
        v8 += 2;
        uint64_t v7 = v9;
      }
      double v10 = a4[1];
      if (v8[1] >= v10)
      {
        double v11 = *a4;
        do
        {
          uint64_t v12 = a4;
          a4 = v8;
          *uint64_t v12 = *v8;
          v12[1] = v8[1];
          if (v5 < v7) {
            break;
          }
          uint64_t v13 = 2 * v7;
          uint64_t v7 = (2 * v7) | 1;
          uint64_t v8 = (double *)(result + 16 * v7);
          uint64_t v14 = v13 + 2;
          if (v14 < a3 && v8[1] < v8[3])
          {
            v8 += 2;
            uint64_t v7 = v14;
          }
        }
        while (v8[1] >= v10);
        *a4 = v11;
        a4[1] = v10;
      }
    }
  }
  return result;
}

double sub_18E0C6408(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 0;
  uint64_t v4 = a3 - 2;
  if (a3 < 2) {
    uint64_t v4 = a3 - 1;
  }
  uint64_t v5 = v4 >> 1;
  do
  {
    uint64_t v6 = a1;
    a1 += 16 * (v3 + 1);
    uint64_t v7 = 2 * v3;
    uint64_t v3 = (2 * v3) | 1;
    uint64_t v8 = v7 + 2;
    if (v8 < a3 && *(double *)(a1 + 8) < *(double *)(a1 + 24))
    {
      a1 += 16;
      uint64_t v3 = v8;
    }
    *(void *)uint64_t v6 = *(void *)a1;
    double result = *(double *)(a1 + 8);
    *(double *)(v6 + 8) = result;
  }
  while (v3 <= v5);
  return result;
}

uint64_t sub_18E0C6478(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    unint64_t v4 = (unint64_t)(a4 - 2) >> 1;
    double v5 = *(double *)(a2 - 8);
    if (*(double *)(result + 16 * v4 + 8) < v5)
    {
      uint64_t v7 = *(void *)(a2 - 16);
      uint64_t v6 = (void *)(a2 - 16);
      uint64_t v8 = v7;
      do
      {
        uint64_t v9 = v6;
        uint64_t v6 = (void *)(result + 16 * v4);
        *uint64_t v9 = *v6;
        v9[1] = v6[1];
        if (!v4) {
          break;
        }
        unint64_t v4 = (v4 - 1) >> 1;
      }
      while (*(double *)(result + 16 * v4 + 8) < v5);
      *uint64_t v6 = v8;
      *((double *)v6 + 1) = v5;
    }
  }
  return result;
}

void sub_18E0C64E0()
{
}

void sub_18E0C64FC()
{
}

void *sub_18E0C6510()
{
}

void sub_18E0C651C()
{
}

void sub_18E0C65CC()
{
}

void *sub_18E0C65E0()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1EDD1B4A8;
  return result;
}

void sub_18E0C6618(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1B4A8;
}

uint64_t sub_18E0C6640(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = *a2;
  uint64_t EventType = cnframework::GenericEvent::GetEventType(this, (uint64_t)a2, (uint64_t)this, a4, a5, a6, a7, a8);
  {
    uint64_t v18 = *((void *)this + 2);
    if (v18) {
      uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 16))(v18);
    }
    else {
      uint64_t v19 = MEMORY[0x1E4FBA3D8];
    }
    uint64_t v26 = (const char *)(*(void *)(v19 + 8) & 0x7FFFFFFFFFFFFFFFLL);
    if (v26 != (const char *)((unint64_t)off_1EDD059B8 & 0x7FFFFFFFFFFFFFFFLL)
      && strcmp(v26, (const char *)((unint64_t)off_1EDD059B8 & 0x7FFFFFFFFFFFFFFFLL)))
    {
      v33.__vftable = 0;
      std::bad_cast::bad_cast(&v33);
      v33.__vftable = (std::bad_cast_vtbl *)&unk_1EDD12A18;
      sub_18E0BA8B8();
    }
    uint64_t v27 = (_OWORD *)*((void *)this + 2);
    v33.__vftable = (std::bad_cast_vtbl *)&unk_1EDD14E28;
    long long v28 = v27[2];
    long long v34 = v27[1];
    long long v35 = v28;
    long long v29 = v27[5];
    long long v30 = v27[6];
    long long v31 = v27[4];
    long long v36 = v27[3];
    long long v39 = v30;
    long long v38 = v29;
    long long v37 = v31;
  }
  else
  {
    LOWORD(v33.__vftable) = 3;
    unsigned __int8 v40 = 5;
    uint64_t v20 = cnframework::GenericEvent::GetEventType(this, v11, v12, v13, v14, v15, v16, v17);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v33, &v40, "Attempted to cast a GenericEvent of type %s to type %s.", v21, v22, v23, v24, v25, *(unsigned char *)(v20 + 8));
    long long v35 = 0uLL;
    long long v34 = 0uLL;
    v33.__vftable = (std::bad_cast_vtbl *)&unk_1EDD14E28;
    long long v36 = 0uLL;
    long long v37 = 0uLL;
    long long v38 = 0uLL;
    *(void *)&long long v39 = 0;
    *((void *)&v39 + 1) = 0x7FF8000000000000;
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v9 + 48))(v9);
}

void sub_18E0C682C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::exception a11)
{
}

uint64_t sub_18E0C6840(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09960)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0C6880()
{
  return &unk_1EDD09960;
}

void sub_18E0C6890()
{
}

void *sub_18E0C68A4()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1EDD1BB88;
  return result;
}

void sub_18E0C68DC(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1BB88;
}

unsigned char *sub_18E0C6904(int a1, unsigned char **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  sub_18E0C6990((uint64_t)v10, this, (uint64_t)this, a4, a5, a6, a7, a8);
  return raven::RavenDeltaVIOEstimateActiveObject::HandleEvent(v8, (const raven::ARSessionStatusEvent *)v10);
}

uint64_t sub_18E0C6944(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09AA0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0C6984()
{
  return &unk_1EDD09AA0;
}

__n128 sub_18E0C6990(uint64_t a1, cnframework::GenericEvent *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t EventType = cnframework::GenericEvent::GetEventType(this, (uint64_t)this, a3, a4, a5, a6, a7, a8);
  {
    uint64_t v18 = *((void *)this + 2);
    if (v18) {
      uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 16))(v18);
    }
    else {
      uint64_t v19 = MEMORY[0x1E4FBA3D8];
    }
    uint64_t v27 = (const char *)(*(void *)(v19 + 8) & 0x7FFFFFFFFFFFFFFFLL);
    if (v27 != (const char *)((unint64_t)off_1EDD053E0 & 0x7FFFFFFFFFFFFFFFLL))
    {
      if (strcmp(v27, (const char *)((unint64_t)off_1EDD053E0 & 0x7FFFFFFFFFFFFFFFLL)))
      {
        v35.__vftable = 0;
        std::bad_cast::bad_cast(&v35);
        v35.__vftable = (std::bad_cast_vtbl *)&unk_1EDD12A18;
        sub_18E0BA8B8();
      }
    }
    uint64_t v28 = *((void *)this + 2);
    *(void *)a1 = &unk_1EDD142D0;
    long long v30 = *(_OWORD *)(v28 + 32);
    long long v29 = *(_OWORD *)(v28 + 48);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(v28 + 16);
    *(_OWORD *)(a1 + 24) = v30;
    *(_OWORD *)(a1 + 40) = v29;
    long long v31 = *(_OWORD *)(v28 + 80);
    __n128 result = *(__n128 *)(v28 + 96);
    char v32 = *(unsigned char *)(v28 + 112);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(v28 + 64);
    *(unsigned char *)(a1 + 104) = v32;
    *(__n128 *)(a1 + 88) = result;
    *(_OWORD *)(a1 + 72) = v31;
  }
  else
  {
    __int16 v34 = 3;
    unsigned __int8 v33 = 5;
    uint64_t v20 = cnframework::GenericEvent::GetEventType(this, v11, v12, v13, v14, v15, v16, v17);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v34, &v33, "Attempted to cast a GenericEvent of type %s to type %s.", v21, v22, v23, v24, v25, *(unsigned char *)(v20 + 8));
    result.n128_u64[0] = 0;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = &unk_1EDD142D0;
    *(unsigned char *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    *(unsigned char *)(a1 + 48) = 0;
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
    *(unsigned char *)(a1 + 72) = 0;
    *(void *)(a1 + 80) = 0;
    *(void *)(a1 + 88) = 0;
    *(void *)(a1 + 96) = 0x7FF8000000000000;
    *(void *)(a1 + 104) = 0;
  }
  return result;
}

void sub_18E0C6B5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::exception a12)
{
}

void sub_18E0C6B74()
{
}

void *sub_18E0C6B88()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1EDD1BAD8;
  return result;
}

void sub_18E0C6BC0(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1BAD8;
}

void sub_18E0C6BE8(int a1, raven::RavenDeltaVIOEstimateActiveObject **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  sub_18E0C1E40(v11, this, (uint64_t)this, a4, a5, a6, a7, a8);
  raven::RavenDeltaVIOEstimateActiveObject::HandleEvent(v8, v11, v9, v10);
}

uint64_t sub_18E0C6C28(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09A80)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0C6C68()
{
  return &unk_1EDD09A80;
}

void sub_18E0C6C78()
{
}

void *sub_18E0C6C8C()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1EDD1BA80;
  return result;
}

void sub_18E0C6CC4(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1BA80;
}

void sub_18E0C6CEC(int a1, raven::RavenDeltaVIOEstimateActiveObject **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  double v9 = *a2;
  uint64_t EventType = cnframework::GenericEvent::GetEventType(this, (uint64_t)a2, (uint64_t)this, a4, a5, a6, a7, a8);
  {
    uint64_t v18 = *((void *)this + 2);
    if (v18) {
      uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 16))(v18);
    }
    else {
      uint64_t v19 = MEMORY[0x1E4FBA3D8];
    }
    uint64_t v28 = (const char *)(*(void *)(v19 + 8) & 0x7FFFFFFFFFFFFFFFLL);
    if (v28 != (const char *)((unint64_t)off_1EDD05250 & 0x7FFFFFFFFFFFFFFFLL)
      && strcmp(v28, (const char *)((unint64_t)off_1EDD05250 & 0x7FFFFFFFFFFFFFFFLL)))
    {
      v68.__vftable = 0;
      std::bad_cast::bad_cast(&v68);
      v68.__vftable = (std::bad_cast_vtbl *)&unk_1EDD12A18;
      sub_18E0BA8B8();
    }
    long long v29 = (_OWORD *)*((void *)this + 2);
    __int16 v34 = &unk_1EDD13DC0;
    long long v30 = v29[2];
    long long v35 = v29[1];
    long long v36 = v30;
    long long v31 = v29[5];
    long long v32 = v29[6];
    long long v33 = v29[4];
    long long v37 = v29[3];
    long long v38 = v33;
    long long v39 = v31;
    long long v40 = v32;
    sub_18E0C6F80((uint64_t)v41, (uint64_t)(v29 + 7));
  }
  else
  {
    LOWORD(v68.__vftable) = 3;
    unsigned __int8 v67 = 5;
    uint64_t v20 = cnframework::GenericEvent::GetEventType(this, v11, v12, v13, v14, v15, v16, v17);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v68, &v67, "Attempted to cast a GenericEvent of type %s to type %s.", v21, v22, v23, v24, v25, *(unsigned char *)(v20 + 8));
    bzero(&v36, 0x490uLL);
    long long v35 = 0uLL;
    __int16 v34 = &unk_1EDD13DC0;
    LOBYTE(v36) = 0;
    *((void *)&v36 + 1) = 0;
    *(void *)&long long v37 = 0;
    BYTE8(v37) = 0;
    long long v38 = 0uLL;
    LOBYTE(v39) = 0;
    *((void *)&v39 + 1) = 0;
    *(void *)&long long v40 = 0;
    v41[0] = 0;
    v41[1] = 0;
    *((void *)&v40 + 1) = 0x7FF8000000000000;
    char v42 = 0;
    uint64_t v43 = 0;
    uint64_t v44 = 0;
    char v45 = 0;
    uint64_t v46 = 0;
    uint64_t v47 = 0;
    char v48 = 0;
    uint64_t v49 = 0;
    uint64_t v50 = 0;
    uint64_t v51 = 0x7FF8000000000000;
    uint64_t v52 = 0;
    uint64_t v53 = 0;
    char v54 = 0;
    uint64_t v55 = 0;
    uint64_t v56 = 0;
    char v57 = 0;
    uint64_t v58 = 0;
    uint64_t v59 = 0;
    char v60 = 0;
    uint64_t v61 = 0;
    uint64_t v62 = 0;
    uint64_t v63 = 0x7FF8000000000000;
    cntransformation::CNRigidTransformation::CNRigidTransformation((cntransformation::CNRigidTransformation *)&v64);
    cntransformation::CNRigidTransformation::CNRigidTransformation((cntransformation::CNRigidTransformation *)v65);
    v65[220] = 0;
    char v66 = 0;
  }
  raven::RavenDeltaVIOEstimateActiveObject::HandleEvent(v9, (const raven::VIOEstimateEvent *)&v34, v26, v27);
  raven::VIOEstimateEvent::~VIOEstimateEvent((raven::VIOEstimateEvent *)&v34);
}

void sub_18E0C6F10(_Unwind_Exception *a1)
{
  std::exception::~exception((std::exception *)(v1 - 40));
  _Unwind_Resume(a1);
}

uint64_t sub_18E0C6F34(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09A70)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0C6F74()
{
  return &unk_1EDD09A70;
}

uint64_t sub_18E0C6F80(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v5 = *(_OWORD *)(a2 + 32);
  long long v6 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v6;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = v5;
  long long v7 = *(_OWORD *)(a2 + 80);
  long long v8 = *(_OWORD *)(a2 + 96);
  long long v9 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v9;
  *(_OWORD *)(a1 + 80) = v7;
  *(_OWORD *)(a1 + 96) = v8;
  long long v10 = *(_OWORD *)(a2 + 144);
  long long v11 = *(_OWORD *)(a2 + 160);
  long long v12 = *(_OWORD *)(a2 + 176);
  *(unsigned char *)(a1 + 192) = *(unsigned char *)(a2 + 192);
  *(_OWORD *)(a1 + 160) = v11;
  *(_OWORD *)(a1 + 176) = v12;
  *(_OWORD *)(a1 + 144) = v10;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  if (a1 != a2)
  {
    *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
    *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  }
  sub_18DFF2980(a1 + 232, a2 + 232);
  sub_18DFE2FA8(a1 + 296, a2 + 296);
  sub_18DFE2FA8(a1 + 408, a2 + 408);
  sub_18DFE2FA8(a1 + 520, a2 + 520);
  *(unsigned char *)(a1 + 632) = *(unsigned char *)(a2 + 632);
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  if (a1 != a2)
  {
    *(_OWORD *)(a1 + 640) = *(_OWORD *)(a2 + 640);
    *(_OWORD *)(a1 + 656) = *(_OWORD *)(a2 + 656);
  }
  sub_18DFF2980(a1 + 672, a2 + 672);
  sub_18DFE2FA8(a1 + 736, a2 + 736);
  sub_18DFE2FA8(a1 + 848, a2 + 848);
  sub_18DFE2FA8(a1 + 960, a2 + 960);
  *(unsigned char *)(a1 + 1072) = *(unsigned char *)(a2 + 1072);
  __int16 v13 = *(_WORD *)(a2 + 1080);
  *(unsigned char *)(a1 + 1082) = *(unsigned char *)(a2 + 1082);
  *(_WORD *)(a1 + 1080) = v13;
  return a1;
}

void sub_18E0C70E8(_Unwind_Exception *a1)
{
  *long long v7 = &unk_1EDD17478;
  *long long v6 = &unk_1EDD17478;
  *long long v5 = &unk_1EDD17478;
  *long long v4 = &unk_1EDD17478;
  *uint64_t v3 = &unk_1EDD17478;
  *uint64_t v2 = &unk_1EDD17478;
  *uint64_t v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

void sub_18E0C71CC()
{
}

void *sub_18E0C71E0()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1EDD1BB30;
  return result;
}

void sub_18E0C7218(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1BB30;
}

void sub_18E0C7240(int a1, raven::RavenDeltaVIOEstimateActiveObject **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  long long v9 = *a2;
  uint64_t EventType = cnframework::GenericEvent::GetEventType(this, (uint64_t)a2, (uint64_t)this, a4, a5, a6, a7, a8);
  {
    uint64_t v18 = *((void *)this + 2);
    if (v18) {
      uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 16))(v18);
    }
    else {
      uint64_t v19 = MEMORY[0x1E4FBA3D8];
    }
    double v26 = (const char *)(*(void *)(v19 + 8) & 0x7FFFFFFFFFFFFFFFLL);
    if (v26 != (const char *)((unint64_t)off_1EDD053B8 & 0x7FFFFFFFFFFFFFFFLL)
      && strcmp(v26, (const char *)((unint64_t)off_1EDD053B8 & 0x7FFFFFFFFFFFFFFFLL)))
    {
      v54.__vftable = 0;
      std::bad_cast::bad_cast(&v54);
      v54.__vftable = (std::bad_cast_vtbl *)&unk_1EDD12A18;
      sub_18E0BA8B8();
    }
    sub_18E0C7480((uint64_t)v27, *((void *)this + 2) + 8);
  }
  else
  {
    LOWORD(v54.__vftable) = 3;
    unsigned __int8 v53 = 5;
    uint64_t v20 = cnframework::GenericEvent::GetEventType(this, v11, v12, v13, v14, v15, v16, v17);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v54, &v53, "Attempted to cast a GenericEvent of type %s to type %s.", v21, v22, v23, v24, v25, *(unsigned char *)(v20 + 8));
    bzero(v28, 0x438uLL);
    v27[1] = 0;
    v27[2] = 0;
    v27[0] = &unk_1EDD142A0;
    v28[0] = 0;
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    char v31 = 0;
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    char v34 = 0;
    uint64_t v35 = 0;
    uint64_t v36 = 0;
    uint64_t v38 = 0;
    uint64_t v39 = 0;
    uint64_t v37 = 0x7FF8000000000000;
    char v40 = 0;
    uint64_t v41 = 0;
    uint64_t v42 = 0;
    char v43 = 0;
    uint64_t v44 = 0;
    uint64_t v45 = 0;
    char v46 = 0;
    uint64_t v47 = 0;
    uint64_t v48 = 0;
    uint64_t v49 = 0x7FF8000000000000;
    cntransformation::CNRigidTransformation::CNRigidTransformation((cntransformation::CNRigidTransformation *)&v50);
    cntransformation::CNRigidTransformation::CNRigidTransformation((cntransformation::CNRigidTransformation *)v51);
    v51[440] = 0;
    int64x2_t v52 = vdupq_n_s64(0x7FF8000000000000uLL);
  }
  raven::RavenDeltaVIOEstimateActiveObject::HandleEvent(v9, (const raven::VLLocalizationEvent *)v27);
  raven::VLLocalizationEvent::~VLLocalizationEvent((raven::VLLocalizationEvent *)v27);
}

void sub_18E0C7410(_Unwind_Exception *a1)
{
  std::exception::~exception((std::exception *)(v1 - 40));
  _Unwind_Resume(a1);
}

uint64_t sub_18E0C7434(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09A90)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0C7474()
{
  return &unk_1EDD09A90;
}

uint64_t sub_18E0C7480(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1EDD142A0;
  long long v4 = *(_OWORD *)(a2 + 8);
  long long v5 = *(_OWORD *)(a2 + 24);
  long long v6 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v6;
  *(_OWORD *)(a1 + 24) = v5;
  *(_OWORD *)(a1 + 8) = v4;
  long long v7 = *(_OWORD *)(a2 + 72);
  long long v8 = *(_OWORD *)(a2 + 88);
  long long v9 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = v9;
  *(_OWORD *)(a1 + 88) = v8;
  *(_OWORD *)(a1 + 72) = v7;
  long long v10 = *(_OWORD *)(a2 + 136);
  long long v11 = *(_OWORD *)(a2 + 152);
  long long v12 = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 168) = v12;
  *(_OWORD *)(a1 + 152) = v11;
  *(_OWORD *)(a1 + 136) = v10;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  if (a1 != a2)
  {
    *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
    *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  }
  sub_18DFF2980(a1 + 232, a2 + 232);
  sub_18DFE2FA8(a1 + 296, a2 + 296);
  sub_18DFE2FA8(a1 + 408, a2 + 408);
  sub_18DFE2FA8(a1 + 520, a2 + 520);
  *(unsigned char *)(a1 + 632) = *(unsigned char *)(a2 + 632);
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  if (a1 != a2)
  {
    *(_OWORD *)(a1 + 640) = *(_OWORD *)(a2 + 640);
    *(_OWORD *)(a1 + 656) = *(_OWORD *)(a2 + 656);
  }
  sub_18DFF2980(a1 + 672, a2 + 672);
  sub_18DFE2FA8(a1 + 736, a2 + 736);
  sub_18DFE2FA8(a1 + 848, a2 + 848);
  sub_18DFE2FA8(a1 + 960, a2 + 960);
  *(unsigned char *)(a1 + 1072) = *(unsigned char *)(a2 + 1072);
  long long v13 = *(_OWORD *)(a2 + 1080);
  *(void *)(a1 + 1096) = *(void *)(a2 + 1096);
  *(_OWORD *)(a1 + 1080) = v13;
  return a1;
}

void sub_18E0C762C(_Unwind_Exception *a1)
{
  *long long v7 = &unk_1EDD17478;
  *long long v6 = &unk_1EDD17478;
  *long long v5 = &unk_1EDD17478;
  *long long v4 = &unk_1EDD17478;
  *uint64_t v3 = &unk_1EDD17478;
  *uint64_t v2 = &unk_1EDD17478;
  *uint64_t v1 = &unk_1EDD17478;
  _Unwind_Resume(a1);
}

void sub_18E0C7710()
{
}

void *sub_18E0C7724()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1EDD1B710;
  return result;
}

void sub_18E0C775C(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1B710;
}

void sub_18E0C7784(int a1, int64x2_t **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  long long v8 = *a2;
  sub_18E0BA6B4((uint64_t)v9, this, (uint64_t)this, a4, a5, a6, a7, a8);
  raven::RavenDeviceAttitudeActiveObject::HandleEvent(v8, (const raven::AccelerometerEvent *)v9);
}

uint64_t sub_18E0C77C4(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD099D0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0C7804()
{
  return &unk_1EDD099D0;
}

void sub_18E0C7814()
{
}

void *sub_18E0C7828()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1EDD1B768;
  return result;
}

void sub_18E0C7860(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1B768;
}

double sub_18E0C7888(int a1, raven::RavenDeviceAttitudeActiveObject **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  long long v8 = *a2;
  sub_18E0BDF10((uint64_t)v10, this, (uint64_t)this, a4, a5, a6, a7, a8);
  *(void *)&double result = raven::RavenDeviceAttitudeActiveObject::HandleEvent(v8, (const raven::ActivityStateEvent *)v10).n128_u64[0];
  return result;
}

uint64_t sub_18E0C78C8(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD099E0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0C7908()
{
  return &unk_1EDD099E0;
}

void sub_18E0C7918()
{
}

void *sub_18E0C792C()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1EDD1B500;
  return result;
}

void sub_18E0C7964(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1B500;
}

void sub_18E0C798C(int a1, raven::RavenDeviceAttitudeActiveObject **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  long long v8 = *a2;
  sub_18E0C7A18((uint64_t)v9, this, (uint64_t)this, a4, a5, a6, a7, a8);
  raven::RavenDeviceAttitudeActiveObject::HandleEvent(v8, (const raven::AttitudeEvent *)v9);
}

uint64_t sub_18E0C79CC(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09970)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0C7A0C()
{
  return &unk_1EDD09970;
}

__n128 sub_18E0C7A18(uint64_t a1, cnframework::GenericEvent *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t EventType = cnframework::GenericEvent::GetEventType(this, (uint64_t)this, a3, a4, a5, a6, a7, a8);
  {
    uint64_t v18 = *((void *)this + 2);
    if (v18) {
      uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 16))(v18);
    }
    else {
      uint64_t v19 = MEMORY[0x1E4FBA3D8];
    }
    uint64_t v28 = (const char *)(*(void *)(v19 + 8) & 0x7FFFFFFFFFFFFFFFLL);
    if (v28 != (const char *)((unint64_t)off_1EDD04FD0 & 0x7FFFFFFFFFFFFFFFLL)
      && strcmp(v28, (const char *)((unint64_t)off_1EDD04FD0 & 0x7FFFFFFFFFFFFFFFLL)))
    {
      v39.__vftable = 0;
      std::bad_cast::bad_cast(&v39);
      v39.__vftable = (std::bad_cast_vtbl *)&unk_1EDD12A18;
      sub_18E0BA8B8();
    }
    uint64_t v29 = *((void *)this + 2);
    *(void *)a1 = &unk_1EDD13760;
    long long v30 = *(_OWORD *)(v29 + 16);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(v29 + 32);
    *(_OWORD *)(a1 + 8) = v30;
    long long v31 = *(_OWORD *)(v29 + 48);
    long long v32 = *(_OWORD *)(v29 + 64);
    long long v33 = *(_OWORD *)(v29 + 80);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(v29 + 96);
    *(_OWORD *)(a1 + 72) = v33;
    *(_OWORD *)(a1 + 56) = v32;
    *(_OWORD *)(a1 + 40) = v31;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 120) = 0u;
    if (a1 != v29 + 8)
    {
      *(_OWORD *)(a1 + 104) = *(_OWORD *)(v29 + 112);
      *(_OWORD *)(a1 + 120) = *(_OWORD *)(v29 + 128);
    }
    long long v34 = *(_OWORD *)(v29 + 144);
    *(_OWORD *)(a1 + 152) = *(_OWORD *)(v29 + 160);
    *(_OWORD *)(a1 + 136) = v34;
    __n128 result = *(__n128 *)(v29 + 176);
    long long v35 = *(_OWORD *)(v29 + 192);
    long long v36 = *(_OWORD *)(v29 + 208);
    *(_WORD *)(a1 + 216) = *(_WORD *)(v29 + 224);
    *(_OWORD *)(a1 + 200) = v36;
    *(_OWORD *)(a1 + 184) = v35;
    *(__n128 *)(a1 + 168) = result;
  }
  else
  {
    __int16 v38 = 3;
    unsigned __int8 v37 = 5;
    uint64_t v20 = cnframework::GenericEvent::GetEventType(this, v11, v12, v13, v14, v15, v16, v17);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v38, &v37, "Attempted to cast a GenericEvent of type %s to type %s.", v21, v22, v23, v24, v25, *(unsigned char *)(v20 + 8));
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(void *)(a1 + 216) = 0;
    *(_OWORD *)(a1 + 200) = 0u;
    *(_OWORD *)(a1 + 184) = 0u;
    *(_OWORD *)(a1 + 168) = 0u;
    *(_OWORD *)(a1 + 152) = 0u;
    *(_OWORD *)(a1 + 136) = 0u;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = &unk_1EDD13760;
    *(unsigned char *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    *(unsigned char *)(a1 + 48) = 0;
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
    *(unsigned char *)(a1 + 72) = 0;
    *(void *)(a1 + 80) = 0;
    *(void *)(a1 + 88) = 0;
    *(void *)(a1 + 96) = 0x7FF8000000000000;
    *(void *)(a1 + 104) = 0;
    *(void *)(a1 + 112) = 0;
    *(void *)(a1 + 120) = 0;
    result.n128_u64[0] = 0x3FF0000000000000;
    int64x2_t v27 = vdupq_n_s64(0x7FF8000000000000uLL);
    *(_OWORD *)(a1 + 128) = xmmword_18E200CD0;
    *(int64x2_t *)(a1 + 144) = v27;
    *(int64x2_t *)(a1 + 160) = v27;
    *(int64x2_t *)(a1 + 176) = v27;
    *(int64x2_t *)(a1 + 192) = v27;
    *(void *)(a1 + 208) = 0x7FF8000000000000;
    *(unsigned char *)(a1 + 216) = 1;
  }
  return result;
}

void sub_18E0C7C70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::exception a12)
{
}

void sub_18E0C7C88()
{
}

void *sub_18E0C7C9C()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1EDD1B818;
  return result;
}

void sub_18E0C7CD4(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1B818;
}

void sub_18E0C7CFC(int a1, raven::RavenDeviceAttitudeActiveObject **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  long long v8 = *a2;
  __n128 v9 = sub_18E0C7D88((uint64_t)v11, this, (uint64_t)this, a4, a5, a6, a7, a8);
  raven::RavenDeviceAttitudeActiveObject::HandleEvent(v8, (const raven::DecomposedAccelerationEvent *)v11, (int8x16_t)v9, v10);
}

uint64_t sub_18E0C7D3C(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09A00)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0C7D7C()
{
  return &unk_1EDD09A00;
}

__n128 sub_18E0C7D88(uint64_t a1, cnframework::GenericEvent *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t EventType = cnframework::GenericEvent::GetEventType(this, (uint64_t)this, a3, a4, a5, a6, a7, a8);
  {
    uint64_t v18 = *((void *)this + 2);
    if (v18) {
      uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 16))(v18);
    }
    else {
      uint64_t v19 = MEMORY[0x1E4FBA3D8];
    }
    uint64_t v28 = (const char *)(*(void *)(v19 + 8) & 0x7FFFFFFFFFFFFFFFLL);
    if (v28 != (const char *)((unint64_t)off_1EDD05890 & 0x7FFFFFFFFFFFFFFFLL)
      && strcmp(v28, (const char *)((unint64_t)off_1EDD05890 & 0x7FFFFFFFFFFFFFFFLL)))
    {
      v38.__vftable = 0;
      std::bad_cast::bad_cast(&v38);
      v38.__vftable = (std::bad_cast_vtbl *)&unk_1EDD12A18;
      sub_18E0BA8B8();
    }
    uint64_t v29 = *((void *)this + 2);
    *(void *)a1 = &unk_1EDD14BF0;
    long long v30 = *(_OWORD *)(v29 + 16);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(v29 + 32);
    *(_OWORD *)(a1 + 8) = v30;
    long long v31 = *(_OWORD *)(v29 + 48);
    long long v32 = *(_OWORD *)(v29 + 64);
    long long v33 = *(_OWORD *)(v29 + 80);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(v29 + 96);
    *(_OWORD *)(a1 + 72) = v33;
    *(_OWORD *)(a1 + 56) = v32;
    *(_OWORD *)(a1 + 40) = v31;
    __n128 result = *(__n128 *)(v29 + 112);
    long long v34 = *(_OWORD *)(v29 + 128);
    long long v35 = *(_OWORD *)(v29 + 144);
    *(_OWORD *)(a1 + 152) = *(_OWORD *)(v29 + 160);
    *(_OWORD *)(a1 + 136) = v35;
    *(_OWORD *)(a1 + 120) = v34;
    *(__n128 *)(a1 + 104) = result;
    result.n128_u64[0] = 0;
    *(_OWORD *)(a1 + 168) = 0u;
    *(_OWORD *)(a1 + 184) = 0u;
    if (a1 != v29 + 8)
    {
      *(_OWORD *)(a1 + 168) = *(_OWORD *)(v29 + 176);
      __n128 result = *(__n128 *)(v29 + 192);
      *(__n128 *)(a1 + 184) = result;
    }
  }
  else
  {
    __int16 v37 = 3;
    unsigned __int8 v36 = 5;
    uint64_t v20 = cnframework::GenericEvent::GetEventType(this, v11, v12, v13, v14, v15, v16, v17);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v37, &v36, "Attempted to cast a GenericEvent of type %s to type %s.", v21, v22, v23, v24, v25, *(unsigned char *)(v20 + 8));
    result.n128_u64[0] = 0;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(void *)(a1 + 72) = 0;
    *(void *)(a1 + 80) = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = &unk_1EDD14BF0;
    *(unsigned char *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    *(unsigned char *)(a1 + 48) = 0;
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
    *(unsigned char *)(a1 + 72) = 0;
    *(void *)(a1 + 88) = 0;
    int64x2_t v27 = vdupq_n_s64(0x7FF8000000000000uLL);
    *(int64x2_t *)(a1 + 96) = v27;
    *(int64x2_t *)(a1 + 112) = v27;
    *(int64x2_t *)(a1 + 128) = v27;
    *(void *)(a1 + 144) = 0x7FF8000000000000;
    *(_OWORD *)(a1 + 168) = 0u;
    *(_OWORD *)(a1 + 152) = 0u;
    *(void *)(a1 + 184) = 0;
    *(void *)(a1 + 192) = 0x3FF0000000000000;
  }
  return result;
}

void sub_18E0C7FA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::exception a12)
{
}

void sub_18E0C7FB8()
{
}

void *sub_18E0C7FCC()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1EDD1B660;
  return result;
}

void sub_18E0C8004(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1B660;
}

double sub_18E0C802C(int a1, raven::RavenDeviceAttitudeActiveObject **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  long long v8 = *a2;
  sub_18E0C0078((uint64_t)v10, this, (uint64_t)this, a4, a5, a6, a7, a8);
  return raven::RavenDeviceAttitudeActiveObject::HandleEvent(v8, (const raven::MountStateEvent *)v10);
}

uint64_t sub_18E0C806C(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD099B0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0C80AC()
{
  return &unk_1EDD099B0;
}

void sub_18E0C80BC()
{
}

void *sub_18E0C80D0()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1EDD1B6B8;
  return result;
}

void sub_18E0C8108(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1B6B8;
}

double sub_18E0C8130(int a1, raven::RavenDeviceAttitudeActiveObject **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  long long v8 = *a2;
  sub_18E0C04F4((uint64_t)v10, this, (uint64_t)this, a4, a5, a6, a7, a8);
  *(void *)&double result = raven::RavenDeviceAttitudeActiveObject::HandleEvent(v8, (const raven::MovingStateEvent *)v10).n128_u64[0];
  return result;
}

uint64_t sub_18E0C8170(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD099C0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0C81B0()
{
  return &unk_1EDD099C0;
}

void sub_18E0C81C0()
{
}

void *sub_18E0C81D4()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1EDD1B558;
  return result;
}

void sub_18E0C820C(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1B558;
}

void sub_18E0C8234(int a1, raven::RavenDeviceAttitudeActiveObject **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  long long v8 = *a2;
  sub_18E0BBF64((uint64_t)v9, this, (uint64_t)this, a4, a5, a6, a7, a8);
  raven::RavenDeviceAttitudeActiveObject::HandleEvent(v8, (const raven::RateGyroEvent *)v9);
}

uint64_t sub_18E0C8274(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09980)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0C82B4()
{
  return &unk_1EDD09980;
}

void sub_18E0C82C4()
{
}

void *sub_18E0C82D8()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1EDD1B7C0;
  return result;
}

void sub_18E0C8310(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1B7C0;
}

void sub_18E0C8338(int a1, raven::RavenDeviceAttitudeActiveObject **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  long long v8 = *a2;
  sub_18E0C1E40(v9, this, (uint64_t)this, a4, a5, a6, a7, a8);
  raven::RavenDeviceAttitudeActiveObject::HandleEvent(v8, (const raven::RavenSolutionEvent *)v9);
}

uint64_t sub_18E0C8378(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD099F0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0C83B8()
{
  return &unk_1EDD099F0;
}

void sub_18E0C83C8()
{
}

void *sub_18E0C83DC()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1EDD1B608;
  return result;
}

void sub_18E0C8414(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1B608;
}

double sub_18E0C843C(int a1, raven::RavenDeviceAttitudeActiveObject **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __n128 v9 = *a2;
  uint64_t EventType = cnframework::GenericEvent::GetEventType(this, (uint64_t)a2, (uint64_t)this, a4, a5, a6, a7, a8);
  {
    uint64_t v18 = *((void *)this + 2);
    if (v18) {
      uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 16))(v18);
    }
    else {
      uint64_t v19 = MEMORY[0x1E4FBA3D8];
    }
    double v26 = (const char *)(*(void *)(v19 + 8) & 0x7FFFFFFFFFFFFFFFLL);
    if (v26 != (const char *)((unint64_t)off_1EDD05048 & 0x7FFFFFFFFFFFFFFFLL)
      && strcmp(v26, (const char *)((unint64_t)off_1EDD05048 & 0x7FFFFFFFFFFFFFFFLL)))
    {
      v35.__vftable = 0;
      std::bad_cast::bad_cast(&v35);
      v35.__vftable = (std::bad_cast_vtbl *)&unk_1EDD12A18;
      sub_18E0BA8B8();
    }
    uint64_t v27 = *((void *)this + 2);
    v35.__vftable = (std::bad_cast_vtbl *)&unk_1EDD13850;
    long long v36 = *(_OWORD *)(v27 + 16);
    long long v28 = *(_OWORD *)(v27 + 64);
    long long v29 = *(_OWORD *)(v27 + 80);
    long long v30 = *(_OWORD *)(v27 + 48);
    long long v37 = *(_OWORD *)(v27 + 32);
    long long v38 = v30;
    long long v39 = v28;
    long long v40 = v29;
    long long v31 = *(_OWORD *)(v27 + 96);
    long long v32 = *(_OWORD *)(v27 + 112);
    long long v33 = *(_OWORD *)(v27 + 128);
    uint64_t v44 = *(void *)(v27 + 144);
    long long v42 = v32;
    long long v43 = v33;
    long long v41 = v31;
  }
  else
  {
    LOWORD(v35.__vftable) = 3;
    unsigned __int8 v45 = 5;
    uint64_t v20 = cnframework::GenericEvent::GetEventType(this, v11, v12, v13, v14, v15, v16, v17);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v35, &v45, "Attempted to cast a GenericEvent of type %s to type %s.", v21, v22, v23, v24, v25, *(unsigned char *)(v20 + 8));
    long long v37 = 0uLL;
    long long v36 = 0uLL;
    v35.__vftable = (std::bad_cast_vtbl *)&unk_1EDD13850;
    long long v38 = 0uLL;
    long long v39 = 0uLL;
    long long v40 = 0uLL;
    *(void *)&long long v41 = 0;
    *((void *)&v41 + 1) = 0x7FF8000000000000;
    *(void *)&long long v42 = 0;
    *((void *)&v42 + 1) = 0x7FF8000000000000;
    *(void *)&long long v43 = 0;
    *((void *)&v43 + 1) = 0x7FF8000000000000;
    uint64_t v44 = 0x80000000;
  }
  *(void *)&double result = raven::RavenDeviceAttitudeActiveObject::HandleEvent(v9, (const raven::UserGaitEvent *)&v35).n128_u64[0];
  return result;
}

void sub_18E0C8628(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::exception a12)
{
}

uint64_t sub_18E0C863C(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD099A0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0C867C()
{
  return &unk_1EDD099A0;
}

void sub_18E0C868C()
{
}

void *sub_18E0C86A0()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1EDD1B5B0;
  return result;
}

void sub_18E0C86D8(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1B5B0;
}

void sub_18E0C8700(int a1, raven::RavenDeviceAttitudeActiveObject **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  long long v8 = *a2;
  sub_18E0BD4F4((uint64_t)v9, this, (uint64_t)this, a4, a5, a6, a7, a8);
  raven::RavenDeviceAttitudeActiveObject::HandleEvent(v8, (const raven::TimeMarkEvent *)v9);
}

uint64_t sub_18E0C8740(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09990)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0C8780()
{
  return &unk_1EDD09990;
}

void sub_18E0C8790()
{
}

void *sub_18E0C87A4()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1EDD1BC38;
  return result;
}

void sub_18E0C87DC(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1BC38;
}

void sub_18E0C8804(int a1, unsigned char **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  long long v8 = *a2;
  sub_18E0BDF10((uint64_t)v27, this, (uint64_t)this, a4, a5, a6, a7, a8);
  if (v8[480])
  {
    *(void *)&long long v32 = cnframework::ActiveObjectBase::GetCurrentTime((cnframework::ActiveObjectBase *)v8);
    *((void *)&v32 + 1) = v9;
    raven::GnssMeasurementPreprocessor::UpdateCurrentFrameworkTime((cnprint::CNPrinter *)(v8 + 488), &v32);
    if (raven::GnssMeasurementPreprocessor::HandleEvent((raven::GnssMeasurementPreprocessor *)(v8 + 488), (const raven::ActivityStateEvent *)v27))
    {
      char v68 = 0;
      char v69 = 0;
      char v70 = 0;
      char v71 = 0;
      char v72 = 0;
      char v73 = 0;
      char v74 = 0;
      memset(v75, 0, sizeof(v75));
      int v76 = 0;
      v66[1] = 0;
      void v66[2] = 0;
      v66[0] = (uint64_t *)&unk_1EDD154D0;
      char v67 = 0;
      if (raven::GnssMeasurementPreprocessor::GetPreprocessedGnssMeasurements((uint64_t **)v8 + 61, v66)) {
        sub_18DFF76F0();
      }
      v48[1] = 0;
      v48[2] = 0;
      v48[0] = &unk_1EDD14410;
      char v49 = 0;
      uint64_t v50 = 0;
      uint64_t v51 = 0;
      char v52 = 0;
      uint64_t v53 = 0;
      uint64_t v54 = 0;
      char v55 = 0;
      uint64_t v57 = 0;
      uint64_t v56 = 0;
      uint64_t v58 = 0x7FF8000000000000;
      __int16 v59 = 0;
      long long v60 = 0u;
      long long v61 = 0u;
      int v62 = 0;
      int v65 = 0;
      uint64_t v63 = 0;
      uint64_t v64 = 0;
      if (raven::GnssMeasurementPreprocessor::GetGpsUTCParametersEvent((raven::GnssMeasurementPreprocessor *)(v8 + 488), (raven::GNSSUTCParametersEvent *)v48))
      {
        sub_18E0C8C40();
      }
      *((void *)&v32 + 1) = 0;
      double v33 = 0.0;
      *(void *)&long long v32 = &unk_1EDD146B8;
      LOBYTE(v34) = 0;
      *((void *)&v34 + 1) = 0;
      *(void *)&long long v35 = 0;
      BYTE8(v35) = 0;
      long long v36 = 0uLL;
      LOBYTE(v37) = 0;
      *((void *)&v37 + 1) = 0;
      uint64_t v38 = 0;
      uint64_t v39 = 0x7FF8000000000000;
      int v40 = 0;
      uint64_t v41 = 0;
      long long v42 = &unk_1EDD0B000;
      long long v43 = 0u;
      long long v44 = 0u;
      long long v45 = xmmword_18E1EFA40;
      long long v46 = xmmword_18E1EFA50;
      char v47 = 0;
      if (raven::GnssMeasurementPreprocessor::GetKlobucharParametersEvent((raven::GnssMeasurementPreprocessor *)(v8 + 488), (raven::KlobucharParametersEvent *)&v32))
      {
        uint64_t CurrentTime = cnframework::ActiveObjectBase::GetCurrentTime((cnframework::ActiveObjectBase *)v8);
        double v12 = v11;
        long long v37 = 0u;
        long long v36 = 0u;
        long long v35 = 0u;
        long long v34 = 0u;
        *((void *)&v32 + 1) = CurrentTime;
        double v33 = v11;
        uint64_t v38 = 0;
        uint64_t v39 = 0x7FF8000000000000;
        __int16 v31 = 12;
        unsigned __int8 v30 = 2;
        sub_18DEDE7B0(&__p, "KlobucharParametersEvent");
        double v26 = v12 + (double)CurrentTime;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v31, &v30, "t,%.3lf,RavenGnssPreprocessorActiveObject, Raising event - %s.", v13, v14, v15, v16, v17, SLOBYTE(v26));
        if (v29 < 0) {
          operator delete(__p);
        }
        sub_18E0C8F5C();
      }
      v66[0] = (uint64_t *)&unk_1EDD154D0;
      *(void *)&long long v32 = &v75[4];
      sub_18DEE4B60((void ***)&v32);
    }
    else
    {
      LOWORD(v48[0]) = 12;
      LOBYTE(v66[0]) = 2;
      uint64_t v18 = (*(uint64_t (**)(void *))(v27[0] + 16))(v27);
      double v20 = v19 + (double)v18;
      (*(void (**)(long long *__return_ptr, void *))(v27[0] + 24))(&v32, v27);
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v48, (unsigned __int8 *)v66, "t,%.3lf,RavenGnssPreprocessorActiveObject Failed to handle event - %s.", v21, v22, v23, v24, v25, SLOBYTE(v20));
      if (SHIBYTE(v33) < 0) {
        operator delete((void *)v32);
      }
    }
  }
}

void sub_18E0C8B90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (a40 < 0) {
    operator delete(__p);
  }
  *(void *)(v48 - 184) = v47;
  a42 = (void *)(v48 - 88);
  sub_18DEE4B60((void ***)&a42);
  _Unwind_Resume(a1);
}

uint64_t sub_18E0C8BF4(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09AC0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0C8C34()
{
  return &unk_1EDD09AC0;
}

void sub_18E0C8C40()
{
  uint64_t v0 = operator new(0x60uLL);
  v0[1] = 0;
  v0[2] = 0;
  *uint64_t v0 = &unk_1EDD1E458;
  v0[3] = &unk_1EDD0A260;
  uint64_t v1 = MEMORY[0x1E4FBA3D8];
  *((unsigned char *)v0 + 32) = 0;
  v0[5] = 0;
  v0[6] = v1;
  void v0[7] = 0;
  unsigned char v0[8] = 0;
  sub_18DEDE7B0(v0 + 9, "");
  *((unsigned char *)v0 + 32) = 1;
  operator new();
}

void sub_18E0C8EC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_18DEE4E18(a11);
  }
  sub_18DEE4E18(v11);
  _Unwind_Resume(a1);
}

uint64_t sub_18E0C8F40(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

void *sub_18E0C8F4C@<X0>(void *a1@<X8>)
{
  return sub_18DEDE7B0(a1, "KlobucharParametersEvent");
}

void sub_18E0C8F5C()
{
  uint64_t v0 = operator new(0x60uLL);
  v0[1] = 0;
  v0[2] = 0;
  *uint64_t v0 = &unk_1EDD1E458;
  v0[3] = &unk_1EDD0A260;
  uint64_t v1 = MEMORY[0x1E4FBA3D8];
  *((unsigned char *)v0 + 32) = 0;
  v0[5] = 0;
  v0[6] = v1;
  void v0[7] = 0;
  unsigned char v0[8] = 0;
  sub_18DEDE7B0(v0 + 9, "");
  *((unsigned char *)v0 + 32) = 1;
  operator new();
}

void sub_18E0C9164(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_18DEE4E18(a11);
  }
  sub_18DEE4E18(v11);
  _Unwind_Resume(a1);
}

void sub_18E0C91E8()
{
}

void *sub_18E0C91FC()
{
}

void sub_18E0C9208()
{
}

__n128 sub_18E0C92AC(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1EDD13178;
  *(void *)(a1 + 8) = &unk_1EDD146B8;
  long long v2 = *(_OWORD *)(a2 + 8);
  long long v3 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 48) = v3;
  *(_OWORD *)(a1 + 16) = v2;
  long long v4 = *(_OWORD *)(a2 + 56);
  long long v5 = *(_OWORD *)(a2 + 72);
  long long v6 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 112) = v6;
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 80) = v5;
  *(void *)(a1 + 128) = &unk_1EDD0B000;
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 160);
  __n128 result = *(__n128 *)(a2 + 176);
  *(__n128 *)(a1 + 184) = result;
  *(unsigned char *)(a1 + 200) = *(unsigned char *)(a2 + 192);
  return result;
}

uint64_t sub_18E0C9360(uint64_t result)
{
  *(void *)(result + 8) = &unk_1EDD146B8;
  return result;
}

void sub_18E0C9384(uint64_t a1)
{
  *(void *)(a1 + 8) = &unk_1EDD146B8;
  JUMPOUT(0x192FA6240);
}

void *sub_18E0C93B8()
{
}

void sub_18E0C93C4()
{
}

void sub_18E0C9414()
{
}

void *sub_18E0C9428()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1EDD1BCE8;
  return result;
}

void sub_18E0C9460(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1BCE8;
}

uint64_t sub_18E0C9488(int a1, void *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = (unsigned char *)*a2;
  uint64_t EventType = cnframework::GenericEvent::GetEventType(this, (uint64_t)a2, (uint64_t)this, a4, a5, a6, a7, a8);
  {
    uint64_t v18 = *((void *)this + 2);
    if (v18) {
      uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 16))(v18);
    }
    else {
      uint64_t v19 = MEMORY[0x1E4FBA3D8];
    }
    double v26 = (const char *)(*(void *)(v19 + 8) & 0x7FFFFFFFFFFFFFFFLL);
    if (v26 != (const char *)((unint64_t)off_1EDD055B8 & 0x7FFFFFFFFFFFFFFFLL)
      && strcmp(v26, (const char *)((unint64_t)off_1EDD055B8 & 0x7FFFFFFFFFFFFFFFLL)))
    {
      *(void *)&long long v78 = 0;
      std::bad_cast::bad_cast((std::bad_cast *)&v78);
      *(void *)&long long v78 = &unk_1EDD12A18;
      sub_18E0BA8B8();
    }
    uint64_t v27 = *((void *)this + 2);
    uint64_t v53 = (uint64_t (**)(void **))&unk_1EDD14688;
    long long v29 = *(_OWORD *)(v27 + 32);
    long long v28 = *(_OWORD *)(v27 + 48);
    long long v54 = *(_OWORD *)(v27 + 16);
    long long v55 = v29;
    long long v56 = v28;
    long long v30 = *(_OWORD *)(v27 + 64);
    long long v31 = *(_OWORD *)(v27 + 80);
    long long v32 = *(_OWORD *)(v27 + 96);
    *(void *)&v59[16] = *(void *)(v27 + 112);
    long long v58 = v31;
    *(_OWORD *)__int16 v59 = v32;
    long long v57 = v30;
    sub_18E0C9B44((uint64_t)&v60, v27 + 120);
  }
  else
  {
    LOWORD(v78) = 3;
    LOBYTE(v94[0]) = 5;
    uint64_t v20 = cnframework::GenericEvent::GetEventType(this, v11, v12, v13, v14, v15, v16, v17);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v78, (unsigned __int8 *)v94, "Attempted to cast a GenericEvent of type %s to type %s.", v21, v22, v23, v24, v25, *(unsigned char *)(v20 + 8));
    long long v55 = 0uLL;
    long long v58 = 0uLL;
    long long v65 = 0u;
    long long v54 = 0uLL;
    uint64_t v53 = (uint64_t (**)(void **))&unk_1EDD14688;
    long long v56 = 0uLL;
    long long v57 = 0uLL;
    *(void *)__int16 v59 = 0;
    *(_OWORD *)&v59[8] = xmmword_18E200CE0;
    uint64_t v60 = -1;
    int32x4_t v61 = vdupq_n_s32(0x7FC00000u);
    int64x2_t v62 = vdupq_n_s64(0x7FF8000000000000uLL);
    unint64_t v63 = 0x8000000000000000;
    uint64_t v64 = v61.i64[0];
    *(void *)&long long v65 = 0x7FF8000000000000;
    DWORD2(v65) = 2143289344;
    long long v71 = 0u;
    long long v72 = 0u;
    long long v73 = 0u;
    long long v66 = 0u;
    long long v67 = 0u;
    long long v68 = 0u;
    long long v69 = 0u;
    long long v70 = 0u;
  }
  if (v9[480])
  {
    *(void *)&long long v78 = cnframework::ActiveObjectBase::GetCurrentTime((cnframework::ActiveObjectBase *)v9);
    *((void *)&v78 + 1) = v33;
    raven::GnssMeasurementPreprocessor::UpdateCurrentFrameworkTime((cnprint::CNPrinter *)(v9 + 488), &v78);
    if (raven::GnssMeasurementPreprocessor::HandleEvent((raven::GnssMeasurementPreprocessor *)(v9 + 488), (const raven::GnssMeasurementDataEvent *)&v53) == 1)
    {
      char v114 = 0;
      char v115 = 0;
      char v116 = 0;
      char v117 = 0;
      char v118 = 0;
      char v119 = 0;
      char v120 = 0;
      memset(v121, 0, sizeof(v121));
      int v122 = 0;
      v112[1] = 0;
      _OWORD v112[2] = 0;
      v112[0] = (uint64_t *)&unk_1EDD154D0;
      char v113 = 0;
      if (raven::GnssMeasurementPreprocessor::GetPreprocessedGnssMeasurements((uint64_t **)v9 + 61, v112)) {
        sub_18DFF76F0();
      }
      _OWORD v94[2] = 0;
      v94[0] = &unk_1EDD14410;
      v94[1] = 0;
      char v95 = 0;
      uint64_t v97 = 0;
      uint64_t v96 = 0;
      char v98 = 0;
      uint64_t v100 = 0;
      uint64_t v99 = 0;
      char v101 = 0;
      uint64_t v103 = 0;
      uint64_t v102 = 0;
      uint64_t v104 = 0x7FF8000000000000;
      __int16 v105 = 0;
      long long v106 = 0u;
      long long v107 = 0u;
      int v108 = 0;
      int v111 = 0;
      uint64_t v109 = 0;
      uint64_t v110 = 0;
      if (raven::GnssMeasurementPreprocessor::GetGpsUTCParametersEvent((raven::GnssMeasurementPreprocessor *)(v9 + 488), (raven::GNSSUTCParametersEvent *)v94))
      {
        sub_18E0C8C40();
      }
      *((void *)&v78 + 1) = 0;
      double v79 = 0.0;
      *(void *)&long long v78 = &unk_1EDD146B8;
      LOBYTE(v80) = 0;
      *((void *)&v80 + 1) = 0;
      *(void *)&long long v81 = 0;
      BYTE8(v81) = 0;
      long long v82 = 0uLL;
      LOBYTE(v83) = 0;
      *((void *)&v83 + 1) = 0;
      uint64_t v84 = 0;
      uint64_t v85 = 0x7FF8000000000000;
      int v86 = 0;
      uint64_t v87 = 0;
      uint64_t v88 = &unk_1EDD0B000;
      long long v89 = 0u;
      long long v90 = 0u;
      long long v91 = xmmword_18E1EFA40;
      long long v92 = xmmword_18E1EFA50;
      char v93 = 0;
      if (raven::GnssMeasurementPreprocessor::GetKlobucharParametersEvent((raven::GnssMeasurementPreprocessor *)(v9 + 488), (raven::KlobucharParametersEvent *)&v78))
      {
        uint64_t CurrentTime = cnframework::ActiveObjectBase::GetCurrentTime((cnframework::ActiveObjectBase *)v9);
        double v36 = v35;
        long long v83 = 0u;
        long long v82 = 0u;
        long long v81 = 0u;
        long long v80 = 0u;
        *((void *)&v78 + 1) = CurrentTime;
        double v79 = v35;
        uint64_t v84 = 0;
        uint64_t v85 = 0x7FF8000000000000;
        __int16 v77 = 12;
        unsigned __int8 v76 = 2;
        sub_18DEDE7B0(&__p, "KlobucharParametersEvent");
        double v51 = v36 + (double)CurrentTime;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v77, &v76, "t,%.3lf,RavenGnssPreprocessorActiveObject, Raising event - %s.", v37, v38, v39, v40, v41, SLOBYTE(v51));
        if (v75 < 0) {
          operator delete(__p);
        }
        sub_18E0C8F5C();
      }
      v112[0] = (uint64_t *)&unk_1EDD154D0;
      *(void *)&long long v78 = &v121[4];
      sub_18DEE4B60((void ***)&v78);
    }
    else
    {
      LOWORD(v94[0]) = 12;
      LOBYTE(v112[0]) = 2;
      uint64_t v42 = v53[2]((void **)&v53);
      double v44 = v43;
      ((void (*)(long long *__return_ptr, uint64_t (***)(void **)))v53[3])(&v78, &v53);
      double v52 = v44 + (double)v42;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v94, (unsigned __int8 *)v112, "t,%.3lf,RavenGnssPreprocessorActiveObject Failed to handle event - %s.", v45, v46, v47, v48, v49, SLOBYTE(v52));
      if (SHIBYTE(v79) < 0) {
        operator delete((void *)v78);
      }
    }
  }
  uint64_t v53 = (uint64_t (**)(void **))&unk_1EDD14688;
  return sub_18E15E380((uint64_t)&v60);
}

void sub_18E0C9A54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52,int a53,__int16 a54,char a55,char a56,uint64_t a57,std::exception a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  if (a56 < 0) {
    operator delete(__p);
  }
  *(void *)(v64 - 168) = v63;
  a58.__vftable = (std::exception_vtbl *)(v64 - 72);
  sub_18DEE4B60((void ***)&a58);
  sub_18E15E380((uint64_t)&a26);
  _Unwind_Resume(a1);
}

uint64_t sub_18E0C9AF8(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09AE0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0C9B38()
{
  return &unk_1EDD09AE0;
}

uint64_t sub_18E0C9B44(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v5 = *(_OWORD *)(a2 + 32);
  long long v6 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  uint64_t v7 = *(void *)(a2 + 72);
  uint64_t v8 = *(void *)(a2 + 80);
  if (v8 != v7)
  {
    unint64_t v9 = 0x8F5C28F5C28F5C29 * ((v8 - v7) >> 3);
    if (v9 >= 0x147AE147AE147AFLL) {
      sub_18DEE1FC8();
    }
    int8x16_t v10 = (char *)sub_18E0CA098(a1 + 88, v9);
    *(void *)(a1 + 72) = v10;
    *(void *)(a1 + 80) = v10;
    *(void *)(a1 + 88) = &v10[200 * v11];
    double v43 = v10;
    double v44 = v10;
    uint64_t v39 = a1 + 88;
    uint64_t v40 = &v43;
    uint64_t v41 = &v44;
    char v42 = 0;
    uint64_t v12 = (uint64_t)v10;
    do
    {
      sub_18E0CA0E4(v12, v7);
      v7 += 200;
      uint64_t v12 = (uint64_t)(v44 + 200);
      v44 += 200;
    }
    while (v7 != v8);
    char v42 = 1;
    sub_18E0CA1E0((uint64_t)&v39);
    *(void *)(a1 + 80) = v12;
  }
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  uint64_t v13 = *(void *)(a2 + 96);
  uint64_t v14 = *(void *)(a2 + 104);
  uint64_t v39 = a1 + 96;
  LOBYTE(v40) = 0;
  uint64_t v15 = v14 - v13;
  if (v14 != v13)
  {
    if (v15 < 0) {
      sub_18DEE1FC8();
    }
    uint64_t v16 = (char *)sub_18E0CA250(a1 + 112, v15 >> 8);
    uint64_t v17 = 0;
    *(void *)(a1 + 96) = v16;
    *(void *)(a1 + 104) = v16;
    *(void *)(a1 + 112) = &v16[256 * v18];
    do
    {
      uint64_t v19 = &v16[v17];
      uint64_t v20 = v13 + v17;
      long long v21 = *(_OWORD *)(v13 + v17);
      v19[16] = *(unsigned char *)(v13 + v17 + 16);
      *(_OWORD *)uint64_t v19 = v21;
      sub_18E01B794((uint64_t)&v16[v17 + 24], v13 + v17 + 24);
      long long v22 = *(_OWORD *)(v13 + v17 + 56);
      long long v23 = *(_OWORD *)(v13 + v17 + 72);
      long long v24 = *(_OWORD *)(v13 + v17 + 88);
      *(_OWORD *)(v19 + 104) = *(_OWORD *)(v13 + v17 + 104);
      *(_OWORD *)(v19 + 88) = v24;
      *(_OWORD *)(v19 + 72) = v23;
      *(_OWORD *)(v19 + 56) = v22;
      long long v25 = *(_OWORD *)(v13 + v17 + 120);
      long long v26 = *(_OWORD *)(v13 + v17 + 136);
      long long v27 = *(_OWORD *)(v13 + v17 + 152);
      *((void *)v19 + 21) = *(void *)(v13 + v17 + 168);
      *(_OWORD *)(v19 + 152) = v27;
      *(_OWORD *)(v19 + 136) = v26;
      *(_OWORD *)(v19 + 120) = v25;
      long long v28 = *(_OWORD *)(v13 + v17 + 176);
      long long v29 = *(_OWORD *)(v13 + v17 + 192);
      long long v30 = *(_OWORD *)(v13 + v17 + 206);
      *((void *)v19 + 28) = 0;
      long long v31 = &v16[v17 + 224];
      *(_OWORD *)(v31 - 18) = v30;
      *((_OWORD *)v31 - 3) = v28;
      *((_OWORD *)v31 - 2) = v29;
      *((void *)v31 + 1) = 0;
      *((void *)v31 + 2) = 0;
      sub_18E01AF5C(v31, *(const void **)(v20 + 224), *(void *)(v20 + 232), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v20 + 232) - *(void *)(v20 + 224)) >> 3));
      *(_DWORD *)&v16[v17 + 248] = *(_DWORD *)(v13 + v17 + 248);
      v17 += 256;
    }
    while (v20 + 256 != v14);
    *(void *)(a1 + 104) = &v16[v17];
  }
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  uint64_t v33 = *(unsigned char **)(a2 + 120);
  long long v32 = *(unsigned char **)(a2 + 128);
  uint64_t v34 = v32 - v33;
  if (v32 != v33)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v34 >> 3) >= 0xAAAAAAAAAAAAAABLL) {
      sub_18DEE1FC8();
    }
    double v35 = (char *)sub_18E00C070(a1 + 136, 0xAAAAAAAAAAAAAAABLL * (v34 >> 3));
    *(void *)(a1 + 120) = v35;
    *(void *)(a1 + 128) = v35;
    *(void *)(a1 + 136) = &v35[24 * v36];
    memmove(v35, v33, v34 - 4);
    *(void *)(a1 + 128) = &v35[8 * (v34 >> 3)];
  }
  if (*(void *)(a2 + 144)) {
    operator new();
  }
  *(void *)(a1 + 144) = 0;
  if (*(void *)(a2 + 152)) {
    operator new();
  }
  *(void *)(a1 + 152) = 0;
  if (*(void *)(a2 + 160)) {
    operator new();
  }
  *(void *)(a1 + 160) = 0;
  if (*(void *)(a2 + 168)) {
    operator new();
  }
  *(void *)(a1 + 168) = 0;
  if (*(void *)(a2 + 176)) {
    operator new();
  }
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  uint64_t v37 = *(void *)(a2 + 192);
  *(void *)(a1 + 192) = v37;
  if (v37) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v37 + 8), 1uLL, memory_order_relaxed);
  }
  return a1;
}

void sub_18E0C9F48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, void **a13)
{
  uint64_t v17 = v13[21];
  v13[21] = 0;
  if (v17) {
    MEMORY[0x192FA6240](v17, 0x1000C4095D96C66);
  }
  uint64_t v18 = v13[20];
  v13[20] = 0;
  if (v18) {
    MEMORY[0x192FA6240](v18, 0x1000C4095D96C66);
  }
  uint64_t v19 = v13[19];
  unsigned char v13[19] = 0;
  if (v19) {
    MEMORY[0x192FA6240](v19, 0x1000C40D315E998);
  }
  uint64_t v20 = v13[18];
  unsigned char v13[18] = 0;
  if (v20) {
    MEMORY[0x192FA6240](v20, 0x1000C4079AA8B5ELL);
  }
  long long v21 = *v15;
  if (*v15)
  {
    v13[16] = v21;
    operator delete(v21);
  }
  a13 = v14;
  sub_18E0B9830(&a13);
  a13 = a10;
  sub_18E0B9914(&a13);
  _Unwind_Resume(a1);
}

void *sub_18E0CA098(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x147AE147AE147AFLL) {
    sub_18DEDF7D4();
  }
  return operator new(200 * a2);
}

uint64_t sub_18E0CA0E4(uint64_t result, uint64_t a2)
{
  *(void *)__n128 result = *(void *)a2;
  int v2 = *(_DWORD *)(a2 + 8);
  *(_WORD *)(result + 12) = *(_WORD *)(a2 + 12);
  *(_DWORD *)(result + 8) = v2;
  *(_OWORD *)(result + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(result + 40) = *(_OWORD *)(a2 + 40);
  long long v3 = *(_OWORD *)(a2 + 56);
  *(void *)(result + 72) = *(void *)(a2 + 72);
  *(_OWORD *)(result + 56) = v3;
  long long v4 = *(_OWORD *)(a2 + 80);
  *(void *)(result + 96) = *(void *)(a2 + 96);
  *(_OWORD *)(result + 80) = v4;
  long long v5 = *(_OWORD *)(a2 + 104);
  *(void *)(result + 120) = *(void *)(a2 + 120);
  *(_OWORD *)(result + 104) = v5;
  long long v6 = *(_OWORD *)(a2 + 128);
  long long v7 = *(_OWORD *)(a2 + 144);
  long long v8 = *(_OWORD *)(a2 + 160);
  *(void *)(result + 176) = *(void *)(a2 + 176);
  *(_OWORD *)(result + 144) = v7;
  *(_OWORD *)(result + 160) = v8;
  *(_OWORD *)(result + 128) = v6;
  if (*(void *)(a2 + 184)) {
    operator new();
  }
  *(void *)(result + 184) = 0;
  *(_DWORD *)(result + 192) = *(_DWORD *)(a2 + 192);
  *(_WORD *)(result + 196) = *(_WORD *)(a2 + 196);
  return result;
}

uint64_t sub_18E0CA1E0(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = **(void **)(a1 + 8);
    for (uint64_t i = **(void **)(a1 + 16); i != v3; i -= 200)
    {
      uint64_t v5 = *(void *)(i - 16);
      *(void *)(i - 16) = 0;
      if (v5) {
        MEMORY[0x192FA6240](v5, 0x1000C4041240993);
      }
    }
  }
  return a1;
}

void *sub_18E0CA250(uint64_t a1, unint64_t a2)
{
  if (HIBYTE(a2)) {
    sub_18DEDF7D4();
  }
  return operator new(a2 << 8);
}

void sub_18E0CA28C()
{
}

void *sub_18E0CA2A0()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1EDD1BBE0;
  return result;
}

void sub_18E0CA2D8(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1BBE0;
}

void sub_18E0CA300(int a1, unsigned char **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  long long v8 = *a2;
  sub_18E0C1834((uint64_t)v27, this, (uint64_t)this, a4, a5, a6, a7, a8);
  if (v8[480])
  {
    *(void *)&long long v32 = cnframework::ActiveObjectBase::GetCurrentTime((cnframework::ActiveObjectBase *)v8);
    *((void *)&v32 + 1) = v9;
    raven::GnssMeasurementPreprocessor::UpdateCurrentFrameworkTime((cnprint::CNPrinter *)(v8 + 488), &v32);
    if (raven::GnssMeasurementPreprocessor::HandleEvent((raven::GnssMeasurementPreprocessor *)(v8 + 488), (const raven::PositionEvent *)v27))
    {
      char v68 = 0;
      char v69 = 0;
      char v70 = 0;
      char v71 = 0;
      char v72 = 0;
      char v73 = 0;
      char v74 = 0;
      memset(v75, 0, sizeof(v75));
      int v76 = 0;
      v66[1] = 0;
      void v66[2] = 0;
      v66[0] = (uint64_t *)&unk_1EDD154D0;
      char v67 = 0;
      if (raven::GnssMeasurementPreprocessor::GetPreprocessedGnssMeasurements((uint64_t **)v8 + 61, v66)) {
        sub_18DFF76F0();
      }
      v48[2] = 0;
      v48[0] = &unk_1EDD14410;
      v48[1] = 0;
      char v49 = 0;
      uint64_t v51 = 0;
      uint64_t v50 = 0;
      char v52 = 0;
      uint64_t v54 = 0;
      uint64_t v53 = 0;
      char v55 = 0;
      uint64_t v57 = 0;
      uint64_t v56 = 0;
      uint64_t v58 = 0x7FF8000000000000;
      __int16 v59 = 0;
      long long v60 = 0u;
      long long v61 = 0u;
      int v62 = 0;
      int v65 = 0;
      uint64_t v63 = 0;
      uint64_t v64 = 0;
      if (raven::GnssMeasurementPreprocessor::GetGpsUTCParametersEvent((raven::GnssMeasurementPreprocessor *)(v8 + 488), (raven::GNSSUTCParametersEvent *)v48))
      {
        sub_18E0C8C40();
      }
      *((void *)&v32 + 1) = 0;
      double v33 = 0.0;
      *(void *)&long long v32 = &unk_1EDD146B8;
      LOBYTE(v34) = 0;
      *((void *)&v34 + 1) = 0;
      *(void *)&long long v35 = 0;
      BYTE8(v35) = 0;
      long long v36 = 0uLL;
      LOBYTE(v37) = 0;
      *((void *)&v37 + 1) = 0;
      uint64_t v38 = 0;
      uint64_t v39 = 0x7FF8000000000000;
      int v40 = 0;
      uint64_t v41 = 0;
      char v42 = &unk_1EDD0B000;
      long long v43 = 0u;
      long long v44 = 0u;
      long long v45 = xmmword_18E1EFA40;
      long long v46 = xmmword_18E1EFA50;
      char v47 = 0;
      if (raven::GnssMeasurementPreprocessor::GetKlobucharParametersEvent((raven::GnssMeasurementPreprocessor *)(v8 + 488), (raven::KlobucharParametersEvent *)&v32))
      {
        uint64_t CurrentTime = cnframework::ActiveObjectBase::GetCurrentTime((cnframework::ActiveObjectBase *)v8);
        double v12 = v11;
        long long v37 = 0u;
        long long v36 = 0u;
        long long v35 = 0u;
        long long v34 = 0u;
        *((void *)&v32 + 1) = CurrentTime;
        double v33 = v11;
        uint64_t v38 = 0;
        uint64_t v39 = 0x7FF8000000000000;
        __int16 v31 = 12;
        unsigned __int8 v30 = 2;
        sub_18DEDE7B0(&__p, "KlobucharParametersEvent");
        double v26 = v12 + (double)CurrentTime;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v31, &v30, "t,%.3lf,RavenGnssPreprocessorActiveObject, Raising event - %s.", v13, v14, v15, v16, v17, SLOBYTE(v26));
        if (v29 < 0) {
          operator delete(__p);
        }
        sub_18E0C8F5C();
      }
      v66[0] = (uint64_t *)&unk_1EDD154D0;
      *(void *)&long long v32 = &v75[4];
      sub_18DEE4B60((void ***)&v32);
    }
    else
    {
      LOWORD(v48[0]) = 12;
      LOBYTE(v66[0]) = 2;
      uint64_t v18 = (*(uint64_t (**)(void *))(v27[0] + 16))(v27);
      double v20 = v19 + (double)v18;
      (*(void (**)(long long *__return_ptr, void *))(v27[0] + 24))(&v32, v27);
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v48, (unsigned __int8 *)v66, "t,%.3lf,RavenGnssPreprocessorActiveObject Failed to handle event - %s.", v21, v22, v23, v24, v25, SLOBYTE(v20));
      if (SHIBYTE(v33) < 0) {
        operator delete((void *)v32);
      }
    }
  }
}

void sub_18E0CA6A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *__p,uint64_t a58,int a59,__int16 a60,char a61,char a62,uint64_t a63)
{
  if (a62 < 0) {
    operator delete(__p);
  }
  *(void *)(v65 - 184) = v64;
  a64 = (void *)(v65 - 88);
  sub_18DEE4B60((void ***)&a64);
  _Unwind_Resume(a1);
}

uint64_t sub_18E0CA708(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09AB0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0CA748()
{
  return &unk_1EDD09AB0;
}

void sub_18E0CA758()
{
}

void *sub_18E0CA76C()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1EDD1BC90;
  return result;
}

void sub_18E0CA7A4(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1BC90;
}

void sub_18E0CA7CC(int a1, unsigned char **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  long long v8 = *a2;
  sub_18E0C25B0((uint64_t)v27, this, (uint64_t)this, a4, a5, a6, a7, a8);
  if (v8[480])
  {
    *(void *)&long long v32 = cnframework::ActiveObjectBase::GetCurrentTime((cnframework::ActiveObjectBase *)v8);
    *((void *)&v32 + 1) = v9;
    raven::GnssMeasurementPreprocessor::UpdateCurrentFrameworkTime((cnprint::CNPrinter *)(v8 + 488), &v32);
    if (raven::GnssMeasurementPreprocessor::HandleEvent((raven::GnssMeasurementPreprocessor *)(v8 + 488), (const raven::SignalEnvironmentEvent *)v27))
    {
      char v68 = 0;
      char v69 = 0;
      char v70 = 0;
      char v71 = 0;
      char v72 = 0;
      char v73 = 0;
      char v74 = 0;
      memset(v75, 0, sizeof(v75));
      int v76 = 0;
      v66[1] = 0;
      void v66[2] = 0;
      v66[0] = (uint64_t *)&unk_1EDD154D0;
      char v67 = 0;
      if (raven::GnssMeasurementPreprocessor::GetPreprocessedGnssMeasurements((uint64_t **)v8 + 61, v66)) {
        sub_18DFF76F0();
      }
      v48[1] = 0;
      v48[2] = 0;
      v48[0] = &unk_1EDD14410;
      char v49 = 0;
      uint64_t v50 = 0;
      uint64_t v51 = 0;
      char v52 = 0;
      uint64_t v53 = 0;
      uint64_t v54 = 0;
      char v55 = 0;
      uint64_t v56 = 0;
      uint64_t v57 = 0;
      uint64_t v58 = 0x7FF8000000000000;
      __int16 v59 = 0;
      long long v60 = 0u;
      long long v61 = 0u;
      int v62 = 0;
      int v65 = 0;
      uint64_t v63 = 0;
      uint64_t v64 = 0;
      if (raven::GnssMeasurementPreprocessor::GetGpsUTCParametersEvent((raven::GnssMeasurementPreprocessor *)(v8 + 488), (raven::GNSSUTCParametersEvent *)v48))
      {
        sub_18E0C8C40();
      }
      *((void *)&v32 + 1) = 0;
      double v33 = 0.0;
      *(void *)&long long v32 = &unk_1EDD146B8;
      LOBYTE(v34) = 0;
      *((void *)&v34 + 1) = 0;
      *(void *)&long long v35 = 0;
      BYTE8(v35) = 0;
      long long v36 = 0uLL;
      LOBYTE(v37) = 0;
      *((void *)&v37 + 1) = 0;
      uint64_t v38 = 0;
      uint64_t v39 = 0x7FF8000000000000;
      int v40 = 0;
      uint64_t v41 = 0;
      char v42 = &unk_1EDD0B000;
      long long v43 = 0u;
      long long v44 = 0u;
      long long v45 = xmmword_18E1EFA40;
      long long v46 = xmmword_18E1EFA50;
      char v47 = 0;
      if (raven::GnssMeasurementPreprocessor::GetKlobucharParametersEvent((raven::GnssMeasurementPreprocessor *)(v8 + 488), (raven::KlobucharParametersEvent *)&v32))
      {
        uint64_t CurrentTime = cnframework::ActiveObjectBase::GetCurrentTime((cnframework::ActiveObjectBase *)v8);
        double v12 = v11;
        long long v37 = 0u;
        long long v36 = 0u;
        long long v35 = 0u;
        long long v34 = 0u;
        *((void *)&v32 + 1) = CurrentTime;
        double v33 = v11;
        uint64_t v38 = 0;
        uint64_t v39 = 0x7FF8000000000000;
        __int16 v31 = 12;
        unsigned __int8 v30 = 2;
        sub_18DEDE7B0(&__p, "KlobucharParametersEvent");
        double v26 = v12 + (double)CurrentTime;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v31, &v30, "t,%.3lf,RavenGnssPreprocessorActiveObject, Raising event - %s.", v13, v14, v15, v16, v17, SLOBYTE(v26));
        if (v29 < 0) {
          operator delete(__p);
        }
        sub_18E0C8F5C();
      }
      v66[0] = (uint64_t *)&unk_1EDD154D0;
      *(void *)&long long v32 = &v75[4];
      sub_18DEE4B60((void ***)&v32);
    }
    else
    {
      LOWORD(v48[0]) = 12;
      LOBYTE(v66[0]) = 2;
      uint64_t v18 = (*(uint64_t (**)(void *))(v27[0] + 16))(v27);
      double v20 = v19 + (double)v18;
      (*(void (**)(long long *__return_ptr, void *))(v27[0] + 24))(&v32, v27);
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v48, (unsigned __int8 *)v66, "t,%.3lf,RavenGnssPreprocessorActiveObject Failed to handle event - %s.", v21, v22, v23, v24, v25, SLOBYTE(v20));
      if (SHIBYTE(v33) < 0) {
        operator delete((void *)v32);
      }
    }
  }
}

void sub_18E0CAB54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  *(void *)(v38 - 184) = v37;
  a32 = (void *)(v38 - 88);
  sub_18DEE4B60((void ***)&a32);
  _Unwind_Resume(a1);
}

uint64_t sub_18E0CABB8(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09AD0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0CABF8()
{
  return &unk_1EDD09AD0;
}

void sub_18E0CAC08()
{
}

void *sub_18E0CAC1C()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1EDD1BDF0;
  return result;
}

void sub_18E0CAC54(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1BDF0;
}

void sub_18E0CAC7C(int a1, unsigned char **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  long long v8 = *a2;
  sub_18E0CB0E8((uint64_t)v27, this, (uint64_t)this, a4, a5, a6, a7, a8);
  if (v8[480])
  {
    *(void *)&long long v32 = cnframework::ActiveObjectBase::GetCurrentTime((cnframework::ActiveObjectBase *)v8);
    *((void *)&v32 + 1) = v9;
    raven::GnssMeasurementPreprocessor::UpdateCurrentFrameworkTime((cnprint::CNPrinter *)(v8 + 488), &v32);
    if (raven::GnssMeasurementPreprocessor::HandleEvent((raven::GnssMeasurementPreprocessor *)(v8 + 488), (const raven::ReceiverDifferentialCodeBiasesEvent *)v27))
    {
      char v68 = 0;
      char v69 = 0;
      char v70 = 0;
      char v71 = 0;
      char v72 = 0;
      char v73 = 0;
      char v74 = 0;
      memset(v75, 0, sizeof(v75));
      int v76 = 0;
      v66[1] = 0;
      void v66[2] = 0;
      v66[0] = (uint64_t *)&unk_1EDD154D0;
      char v67 = 0;
      if (raven::GnssMeasurementPreprocessor::GetPreprocessedGnssMeasurements((uint64_t **)v8 + 61, v66)) {
        sub_18DFF76F0();
      }
      v48[2] = 0;
      v48[0] = &unk_1EDD14410;
      v48[1] = 0;
      char v49 = 0;
      uint64_t v51 = 0;
      uint64_t v50 = 0;
      char v52 = 0;
      uint64_t v54 = 0;
      uint64_t v53 = 0;
      char v55 = 0;
      uint64_t v57 = 0;
      uint64_t v56 = 0;
      uint64_t v58 = 0x7FF8000000000000;
      __int16 v59 = 0;
      long long v60 = 0u;
      long long v61 = 0u;
      int v62 = 0;
      int v65 = 0;
      uint64_t v63 = 0;
      uint64_t v64 = 0;
      if (raven::GnssMeasurementPreprocessor::GetGpsUTCParametersEvent((raven::GnssMeasurementPreprocessor *)(v8 + 488), (raven::GNSSUTCParametersEvent *)v48))
      {
        sub_18E0C8C40();
      }
      double v33 = 0.0;
      *(void *)&long long v32 = &unk_1EDD146B8;
      *((void *)&v32 + 1) = 0;
      LOBYTE(v34) = 0;
      *(void *)&long long v35 = 0;
      *((void *)&v34 + 1) = 0;
      BYTE8(v35) = 0;
      long long v36 = 0uLL;
      LOBYTE(v37) = 0;
      uint64_t v38 = 0;
      *((void *)&v37 + 1) = 0;
      uint64_t v39 = 0x7FF8000000000000;
      int v40 = 0;
      uint64_t v41 = 0;
      char v42 = &unk_1EDD0B000;
      long long v43 = 0u;
      long long v44 = 0u;
      long long v45 = xmmword_18E1EFA40;
      long long v46 = xmmword_18E1EFA50;
      char v47 = 0;
      if (raven::GnssMeasurementPreprocessor::GetKlobucharParametersEvent((raven::GnssMeasurementPreprocessor *)(v8 + 488), (raven::KlobucharParametersEvent *)&v32))
      {
        uint64_t CurrentTime = cnframework::ActiveObjectBase::GetCurrentTime((cnframework::ActiveObjectBase *)v8);
        double v12 = v11;
        long long v37 = 0u;
        long long v36 = 0u;
        long long v35 = 0u;
        long long v34 = 0u;
        *((void *)&v32 + 1) = CurrentTime;
        double v33 = v11;
        uint64_t v38 = 0;
        uint64_t v39 = 0x7FF8000000000000;
        __int16 v31 = 12;
        unsigned __int8 v30 = 2;
        sub_18DEDE7B0(&__p, "KlobucharParametersEvent");
        double v26 = v12 + (double)CurrentTime;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v31, &v30, "t,%.3lf,RavenGnssPreprocessorActiveObject, Raising event - %s.", v13, v14, v15, v16, v17, SLOBYTE(v26));
        if (v29 < 0) {
          operator delete(__p);
        }
        sub_18E0C8F5C();
      }
      v66[0] = (uint64_t *)&unk_1EDD154D0;
      *(void *)&long long v32 = &v75[4];
      sub_18DEE4B60((void ***)&v32);
    }
    else
    {
      LOWORD(v48[0]) = 12;
      LOBYTE(v66[0]) = 2;
      uint64_t v18 = (*(uint64_t (**)(void *))(v27[0] + 16))(v27);
      double v20 = v19 + (double)v18;
      (*(void (**)(long long *__return_ptr, void *))(v27[0] + 24))(&v32, v27);
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v48, (unsigned __int8 *)v66, "t,%.3lf,RavenGnssPreprocessorActiveObject Failed to handle event - %s.", v21, v22, v23, v24, v25, SLOBYTE(v20));
      if (SHIBYTE(v33) < 0) {
        operator delete((void *)v32);
      }
    }
  }
}

void sub_18E0CB038(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x367]) < 0) {
    operator delete((void *)STACK[0x350]);
  }
  *(void *)(v2 - 184) = v1;
  STACK[0x370] = v2 - 88;
  sub_18DEE4B60((void ***)&STACK[0x370]);
  _Unwind_Resume(a1);
}

uint64_t sub_18E0CB09C(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09B10)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0CB0DC()
{
  return &unk_1EDD09B10;
}

void sub_18E0CB0E8(uint64_t a1, cnframework::GenericEvent *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t EventType = cnframework::GenericEvent::GetEventType(this, (uint64_t)this, a3, a4, a5, a6, a7, a8);
  {
    uint64_t v18 = *((void *)this + 2);
    if (v18) {
      uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 16))(v18);
    }
    else {
      uint64_t v19 = MEMORY[0x1E4FBA3D8];
    }
    long long v27 = (const char *)(*(void *)(v19 + 8) & 0x7FFFFFFFFFFFFFFFLL);
    if (v27 != (const char *)((unint64_t)off_1EDD05DE0 & 0x7FFFFFFFFFFFFFFFLL)
      && strcmp(v27, (const char *)((unint64_t)off_1EDD05DE0 & 0x7FFFFFFFFFFFFFFFLL)))
    {
      v31.__vftable = 0;
      std::bad_cast::bad_cast(&v31);
      v31.__vftable = (std::bad_cast_vtbl *)&unk_1EDD12A18;
      sub_18E0BA8B8();
    }
    uint64_t v28 = *((void *)this + 2);
    *(void *)a1 = &unk_1EDD15958;
    memcpy((void *)(a1 + 8), (const void *)(v28 + 16), 0x334uLL);
  }
  else
  {
    __int16 v30 = 3;
    unsigned __int8 v29 = 5;
    uint64_t v20 = cnframework::GenericEvent::GetEventType(this, v11, v12, v13, v14, v15, v16, v17);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v30, &v29, "Attempted to cast a GenericEvent of type %s to type %s.", v21, v22, v23, v24, v25, *(unsigned char *)(v20 + 8));
    bzero((void *)(a1 + 24), 0x328uLL);
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = &unk_1EDD15958;
    *(unsigned char *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    *(unsigned char *)(a1 + 48) = 0;
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
    *(unsigned char *)(a1 + 72) = 0;
    *(void *)(a1 + 80) = 0;
    *(void *)(a1 + 88) = 0;
    *(void *)(a1 + 96) = 0x7FF8000000000000;
    *(unsigned char *)(a1 + 105) = 0;
    *(void *)(a1 + 112) = 0;
    *(void *)(a1 + 120) = 0;
    *(unsigned char *)(a1 + 128) = 0;
    *(unsigned char *)(a1 + 152) = 0;
    *(void *)(a1 + 136) = 0;
    *(void *)(a1 + 144) = 0;
    *(void *)(a1 + 160) = 0;
    *(void *)(a1 + 168) = 0;
    *(unsigned char *)(a1 + 176) = 0;
    *(void *)(a1 + 184) = 0;
    *(void *)(a1 + 192) = 0;
    int64x2_t v26 = vdupq_n_s64(0x7FF8000000000000uLL);
    *(int64x2_t *)(a1 + 200) = v26;
    *(int64x2_t *)(a1 + 216) = v26;
    *(int64x2_t *)(a1 + 232) = v26;
    *(int64x2_t *)(a1 + 248) = v26;
    *(void *)(a1 + 264) = 0x7FF8000000000000;
    *(void *)(a1 + 272) = 0x7FF8000000000000;
    *(_OWORD *)(a1 + 280) = 0u;
    *(_OWORD *)(a1 + 296) = 0u;
    *(_OWORD *)(a1 + 312) = 0u;
    *(_OWORD *)(a1 + 328) = 0u;
    *(_OWORD *)(a1 + 344) = 0u;
    *(void *)(a1 + 360) = 0;
    *(void *)(a1 + 368) = 0x7FF8000000000000;
    *(_OWORD *)(a1 + 400) = 0u;
    *(_OWORD *)(a1 + 416) = 0u;
    *(_OWORD *)(a1 + 384) = 0u;
  }
}

void sub_18E0CB2FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::exception a12)
{
}

void sub_18E0CB314()
{
}

void *sub_18E0CB328()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1EDD1BD98;
  return result;
}

void sub_18E0CB360(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1BD98;
}

void sub_18E0CB388(int a1, unsigned char **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  long long v8 = *a2;
  sub_18E0CB7F4((uint64_t)v27, this, (uint64_t)this, a4, a5, a6, a7, a8);
  if (v8[480])
  {
    *(void *)&long long v32 = cnframework::ActiveObjectBase::GetCurrentTime((cnframework::ActiveObjectBase *)v8);
    *((void *)&v32 + 1) = v9;
    raven::GnssMeasurementPreprocessor::UpdateCurrentFrameworkTime((cnprint::CNPrinter *)(v8 + 488), &v32);
    if (raven::GnssMeasurementPreprocessor::HandleEvent((raven::GnssMeasurementPreprocessor *)(v8 + 488), (const raven::ThinShellIonosphereParametersEvent *)v27))
    {
      char v68 = 0;
      char v69 = 0;
      char v70 = 0;
      char v71 = 0;
      char v72 = 0;
      char v73 = 0;
      char v74 = 0;
      memset(v75, 0, sizeof(v75));
      int v76 = 0;
      v66[1] = 0;
      void v66[2] = 0;
      v66[0] = (uint64_t *)&unk_1EDD154D0;
      char v67 = 0;
      if (raven::GnssMeasurementPreprocessor::GetPreprocessedGnssMeasurements((uint64_t **)v8 + 61, v66)) {
        sub_18DFF76F0();
      }
      v48[2] = 0;
      v48[0] = &unk_1EDD14410;
      v48[1] = 0;
      char v49 = 0;
      uint64_t v51 = 0;
      uint64_t v50 = 0;
      char v52 = 0;
      uint64_t v54 = 0;
      uint64_t v53 = 0;
      char v55 = 0;
      uint64_t v57 = 0;
      uint64_t v56 = 0;
      uint64_t v58 = 0x7FF8000000000000;
      __int16 v59 = 0;
      long long v60 = 0u;
      long long v61 = 0u;
      int v62 = 0;
      int v65 = 0;
      uint64_t v63 = 0;
      uint64_t v64 = 0;
      if (raven::GnssMeasurementPreprocessor::GetGpsUTCParametersEvent((raven::GnssMeasurementPreprocessor *)(v8 + 488), (raven::GNSSUTCParametersEvent *)v48))
      {
        sub_18E0C8C40();
      }
      double v33 = 0.0;
      *(void *)&long long v32 = &unk_1EDD146B8;
      *((void *)&v32 + 1) = 0;
      LOBYTE(v34) = 0;
      *(void *)&long long v35 = 0;
      *((void *)&v34 + 1) = 0;
      BYTE8(v35) = 0;
      long long v36 = 0uLL;
      LOBYTE(v37) = 0;
      uint64_t v38 = 0;
      *((void *)&v37 + 1) = 0;
      uint64_t v39 = 0x7FF8000000000000;
      int v40 = 0;
      uint64_t v41 = 0;
      char v42 = &unk_1EDD0B000;
      long long v43 = 0u;
      long long v44 = 0u;
      long long v45 = xmmword_18E1EFA40;
      long long v46 = xmmword_18E1EFA50;
      char v47 = 0;
      if (raven::GnssMeasurementPreprocessor::GetKlobucharParametersEvent((raven::GnssMeasurementPreprocessor *)(v8 + 488), (raven::KlobucharParametersEvent *)&v32))
      {
        uint64_t CurrentTime = cnframework::ActiveObjectBase::GetCurrentTime((cnframework::ActiveObjectBase *)v8);
        double v12 = v11;
        long long v37 = 0u;
        long long v36 = 0u;
        long long v35 = 0u;
        long long v34 = 0u;
        *((void *)&v32 + 1) = CurrentTime;
        double v33 = v11;
        uint64_t v38 = 0;
        uint64_t v39 = 0x7FF8000000000000;
        __int16 v31 = 12;
        unsigned __int8 v30 = 2;
        sub_18DEDE7B0(&__p, "KlobucharParametersEvent");
        double v26 = v12 + (double)CurrentTime;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v31, &v30, "t,%.3lf,RavenGnssPreprocessorActiveObject, Raising event - %s.", v13, v14, v15, v16, v17, SLOBYTE(v26));
        if (v29 < 0) {
          operator delete(__p);
        }
        sub_18E0C8F5C();
      }
      v66[0] = (uint64_t *)&unk_1EDD154D0;
      *(void *)&long long v32 = &v75[4];
      sub_18DEE4B60((void ***)&v32);
    }
    else
    {
      LOWORD(v48[0]) = 12;
      LOBYTE(v66[0]) = 2;
      uint64_t v18 = (*(uint64_t (**)(void *))(v27[0] + 16))(v27);
      double v20 = v19 + (double)v18;
      (*(void (**)(long long *__return_ptr, void *))(v27[0] + 24))(&v32, v27);
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v48, (unsigned __int8 *)v66, "t,%.3lf,RavenGnssPreprocessorActiveObject Failed to handle event - %s.", v21, v22, v23, v24, v25, SLOBYTE(v20));
      if (SHIBYTE(v33) < 0) {
        operator delete((void *)v32);
      }
    }
  }
}

void sub_18E0CB744(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x367]) < 0) {
    operator delete((void *)STACK[0x350]);
  }
  *(void *)(v2 - 184) = v1;
  STACK[0x370] = v2 - 88;
  sub_18DEE4B60((void ***)&STACK[0x370]);
  _Unwind_Resume(a1);
}

uint64_t sub_18E0CB7A8(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09B00)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0CB7E8()
{
  return &unk_1EDD09B00;
}

void sub_18E0CB7F4(uint64_t a1, cnframework::GenericEvent *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t EventType = cnframework::GenericEvent::GetEventType(this, (uint64_t)this, a3, a4, a5, a6, a7, a8);
  {
    uint64_t v18 = *((void *)this + 2);
    if (v18) {
      uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 16))(v18);
    }
    else {
      uint64_t v19 = MEMORY[0x1E4FBA3D8];
    }
    long long v27 = (const char *)(*(void *)(v19 + 8) & 0x7FFFFFFFFFFFFFFFLL);
    if (v27 != (const char *)((unint64_t)off_1EDD05D00 & 0x7FFFFFFFFFFFFFFFLL)
      && strcmp(v27, (const char *)((unint64_t)off_1EDD05D00 & 0x7FFFFFFFFFFFFFFFLL)))
    {
      v31.__vftable = 0;
      std::bad_cast::bad_cast(&v31);
      v31.__vftable = (std::bad_cast_vtbl *)&unk_1EDD12A18;
      sub_18E0BA8B8();
    }
    uint64_t v28 = *((void *)this + 2);
    *(void *)a1 = &unk_1EDD15758;
    memcpy((void *)(a1 + 8), (const void *)(v28 + 16), 0x334uLL);
  }
  else
  {
    __int16 v30 = 3;
    unsigned __int8 v29 = 5;
    uint64_t v20 = cnframework::GenericEvent::GetEventType(this, v11, v12, v13, v14, v15, v16, v17);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v30, &v29, "Attempted to cast a GenericEvent of type %s to type %s.", v21, v22, v23, v24, v25, *(unsigned char *)(v20 + 8));
    bzero((void *)(a1 + 24), 0x328uLL);
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = &unk_1EDD15758;
    *(unsigned char *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    *(unsigned char *)(a1 + 48) = 0;
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
    *(unsigned char *)(a1 + 72) = 0;
    *(void *)(a1 + 80) = 0;
    *(void *)(a1 + 88) = 0;
    *(void *)(a1 + 96) = 0x7FF8000000000000;
    *(unsigned char *)(a1 + 105) = 0;
    *(void *)(a1 + 112) = 0;
    *(void *)(a1 + 120) = 0;
    int64x2_t v26 = vdupq_n_s64(0x7FF8000000000000uLL);
    *(int64x2_t *)(a1 + 128) = v26;
    *(void *)(a1 + 144) = 0x7FF8000000000000;
    *(void *)(a1 + 152) = 0;
    *(void *)(a1 + 160) = 0;
    *(int64x2_t *)(a1 + 168) = v26;
    *(int64x2_t *)(a1 + 184) = v26;
    *(int64x2_t *)(a1 + 200) = v26;
    *(int64x2_t *)(a1 + 216) = v26;
    *(int64x2_t *)(a1 + 232) = v26;
    *(int64x2_t *)(a1 + 248) = v26;
    *(void *)(a1 + 264) = 0x7FF8000000000000;
    *(void *)(a1 + 272) = 0x7FF8000000000000;
    *(_OWORD *)(a1 + 280) = 0u;
    *(_OWORD *)(a1 + 296) = 0u;
    *(_OWORD *)(a1 + 312) = 0u;
    *(_OWORD *)(a1 + 328) = 0u;
    *(_OWORD *)(a1 + 344) = 0u;
    *(void *)(a1 + 360) = 0;
    *(void *)(a1 + 368) = 0x7FF8000000000000;
    *(_OWORD *)(a1 + 384) = 0u;
    *(_OWORD *)(a1 + 400) = 0u;
    *(_OWORD *)(a1 + 416) = 0u;
  }
}

void sub_18E0CBA04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::exception a12)
{
}

void sub_18E0CBA1C()
{
}

void *sub_18E0CBA30()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1EDD1BD40;
  return result;
}

void sub_18E0CBA68(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1BD40;
}

void sub_18E0CBA90(int a1, void *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = (unsigned char *)*a2;
  uint64_t EventType = cnframework::GenericEvent::GetEventType(this, (uint64_t)a2, (uint64_t)this, a4, a5, a6, a7, a8);
  {
    uint64_t v18 = *((void *)this + 2);
    if (v18) {
      uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 16))(v18);
    }
    else {
      uint64_t v19 = MEMORY[0x1E4FBA3D8];
    }
    int64x2_t v26 = (const char *)(*(void *)(v19 + 8) & 0x7FFFFFFFFFFFFFFFLL);
    if (v26 != (const char *)((unint64_t)off_1EDD059A0 & 0x7FFFFFFFFFFFFFFFLL)
      && strcmp(v26, (const char *)((unint64_t)off_1EDD059A0 & 0x7FFFFFFFFFFFFFFFLL)))
    {
      *(void *)&long long v72 = 0;
      std::bad_cast::bad_cast((std::bad_cast *)&v72);
      *(void *)&long long v72 = &unk_1EDD12A18;
      sub_18E0BA8B8();
    }
    uint64_t v27 = *((void *)this + 2);
    uint64_t v58 = (uint64_t (**)(void **))&unk_1EDD14DF8;
    long long v28 = *(_OWORD *)(v27 + 16);
    long long v29 = *(_OWORD *)(v27 + 32);
    long long v61 = *(_OWORD *)(v27 + 48);
    long long v60 = v29;
    long long v59 = v28;
    long long v30 = *(_OWORD *)(v27 + 64);
    long long v31 = *(_OWORD *)(v27 + 80);
    long long v32 = *(_OWORD *)(v27 + 96);
    long long v65 = *(_OWORD *)(v27 + 112);
    long long v64 = v32;
    long long v63 = v31;
    long long v62 = v30;
    v66[1] = 0;
    uint64_t v67 = 0;
    v66[0] = 0;
    sub_18E0CC10C(v66, *(char **)(v27 + 128), *(char **)(v27 + 136), 0x80FE03F80FE03F81 * ((uint64_t)(*(void *)(v27 + 136) - *(void *)(v27 + 128)) >> 6));
  }
  else
  {
    LOWORD(v72) = 3;
    LOBYTE(v88[0]) = 5;
    uint64_t v20 = cnframework::GenericEvent::GetEventType(this, v11, v12, v13, v14, v15, v16, v17);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v72, (unsigned __int8 *)v88, "Attempted to cast a GenericEvent of type %s to type %s.", v21, v22, v23, v24, v25, *(unsigned char *)(v20 + 8));
    long long v60 = 0uLL;
    long long v59 = 0uLL;
    uint64_t v58 = (uint64_t (**)(void **))&unk_1EDD14DF8;
    long long v61 = 0uLL;
    long long v62 = 0uLL;
    long long v63 = 0uLL;
    *(void *)&long long v64 = 0;
    *((void *)&v64 + 1) = 0x7FF8000000000000;
    uint64_t v67 = 0;
    *(_OWORD *)long long v66 = 0u;
    long long v65 = 0u;
  }
  if (v9[480])
  {
    *(void *)&long long v72 = cnframework::ActiveObjectBase::GetCurrentTime((cnframework::ActiveObjectBase *)v9);
    *((void *)&v72 + 1) = v33;
    raven::GnssMeasurementPreprocessor::UpdateCurrentFrameworkTime((cnprint::CNPrinter *)(v9 + 488), &v72);
    if (raven::GnssMeasurementPreprocessor::HandleEvent((cnnavigation::SphericalHarmonicsIonosphereModel **)v9 + 61, (const raven::RavenGnssAssistanceFileEvent *)&v58, v34, v35, v36, v37, v38, v39))
    {
      char v108 = 0;
      char v109 = 0;
      char v110 = 0;
      char v111 = 0;
      char v112 = 0;
      char v113 = 0;
      char v114 = 0;
      memset(v115, 0, sizeof(v115));
      int v116 = 0;
      v106[1] = 0;
      v106[2] = 0;
      v106[0] = (uint64_t *)&unk_1EDD154D0;
      char v107 = 0;
      if (raven::GnssMeasurementPreprocessor::GetPreprocessedGnssMeasurements((uint64_t **)v9 + 61, v106)) {
        sub_18DFF76F0();
      }
      v88[1] = 0;
      v88[2] = 0;
      v88[0] = &unk_1EDD14410;
      char v89 = 0;
      uint64_t v90 = 0;
      uint64_t v91 = 0;
      char v92 = 0;
      uint64_t v93 = 0;
      uint64_t v94 = 0;
      char v95 = 0;
      uint64_t v96 = 0;
      uint64_t v97 = 0;
      uint64_t v98 = 0x7FF8000000000000;
      __int16 v99 = 0;
      long long v100 = 0u;
      long long v101 = 0u;
      int v102 = 0;
      int v105 = 0;
      uint64_t v103 = 0;
      uint64_t v104 = 0;
      if (raven::GnssMeasurementPreprocessor::GetGpsUTCParametersEvent((raven::GnssMeasurementPreprocessor *)(v9 + 488), (raven::GNSSUTCParametersEvent *)v88))
      {
        sub_18E0C8C40();
      }
      *((void *)&v72 + 1) = 0;
      double v73 = 0.0;
      *(void *)&long long v72 = &unk_1EDD146B8;
      LOBYTE(v74) = 0;
      *((void *)&v74 + 1) = 0;
      *(void *)&long long v75 = 0;
      BYTE8(v75) = 0;
      long long v76 = 0uLL;
      LOBYTE(v77) = 0;
      *((void *)&v77 + 1) = 0;
      uint64_t v78 = 0;
      uint64_t v79 = 0x7FF8000000000000;
      int v80 = 0;
      uint64_t v81 = 0;
      long long v82 = &unk_1EDD0B000;
      long long v83 = 0u;
      long long v84 = 0u;
      long long v85 = xmmword_18E1EFA40;
      long long v86 = xmmword_18E1EFA50;
      char v87 = 0;
      if (raven::GnssMeasurementPreprocessor::GetKlobucharParametersEvent((raven::GnssMeasurementPreprocessor *)(v9 + 488), (raven::KlobucharParametersEvent *)&v72))
      {
        uint64_t CurrentTime = cnframework::ActiveObjectBase::GetCurrentTime((cnframework::ActiveObjectBase *)v9);
        double v42 = v41;
        long long v77 = 0u;
        long long v76 = 0u;
        long long v75 = 0u;
        long long v74 = 0u;
        *((void *)&v72 + 1) = CurrentTime;
        double v73 = v41;
        uint64_t v78 = 0;
        uint64_t v79 = 0x7FF8000000000000;
        __int16 v71 = 12;
        unsigned __int8 v70 = 2;
        sub_18DEDE7B0(&__p, "KlobucharParametersEvent");
        double v56 = v42 + (double)CurrentTime;
        cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v71, &v70, "t,%.3lf,RavenGnssPreprocessorActiveObject, Raising event - %s.", v43, v44, v45, v46, v47, SLOBYTE(v56));
        if (v69 < 0) {
          operator delete(__p);
        }
        sub_18E0C8F5C();
      }
      v106[0] = (uint64_t *)&unk_1EDD154D0;
      *(void *)&long long v72 = &v115[4];
      sub_18DEE4B60((void ***)&v72);
    }
    else
    {
      LOWORD(v88[0]) = 12;
      LOBYTE(v106[0]) = 2;
      uint64_t v48 = v58[2]((void **)&v58);
      double v50 = v49;
      ((void (*)(long long *__return_ptr, uint64_t (***)(void **)))v58[3])(&v72, &v58);
      double v57 = v50 + (double)v48;
      cnprint::CNPrinter::Print((cnprint::CNPrinter *)v88, (unsigned __int8 *)v106, "t,%.3lf,RavenGnssPreprocessorActiveObject Failed to handle event - %s.", v51, v52, v53, v54, v55, SLOBYTE(v57));
      if (SHIBYTE(v73) < 0) {
        operator delete((void *)v72);
      }
    }
  }
  uint64_t v58 = (uint64_t (**)(void **))&unk_1EDD14DF8;
  if (v66[0])
  {
    v66[1] = v66[0];
    operator delete(v66[0]);
  }
}

void sub_18E0CC014(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,std::exception a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  if (a34 < 0) {
    operator delete(__p);
  }
  *(void *)(v42 - 168) = v41;
  a36.__vftable = (std::exception_vtbl *)(v42 - 72);
  sub_18DEE4B60((void ***)&a36);
  if (a26) {
    operator delete(a26);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_18E0CC0C0(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09AF0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0CC100()
{
  return &unk_1EDD09AF0;
}

void *sub_18E0CC10C(void *result, char *a2, char *a3, unint64_t a4)
{
  if (a4)
  {
    long long v4 = result;
    if (a4 >= 0x7F01FC07F01FDLL) {
      sub_18DEE1FC8();
    }
    __n128 result = sub_18E0CC1E0((uint64_t)(result + 2), a4);
    long long v7 = result;
    *long long v4 = result;
    v4[1] = result;
    v4[2] = &result[1032 * v8];
    if (a2 != a3)
    {
      uint64_t v9 = (char *)result;
      do
      {
        __n128 result = memcpy(v9, a2, 0x2040uLL);
        a2 += 8256;
        v9 += 8256;
        v7 += 1032;
      }
      while (a2 != a3);
    }
    v4[1] = v7;
  }
  return result;
}

void sub_18E0CC1C4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_18E0CC1E0(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x7F01FC07F01FDLL) {
    sub_18DEDF7D4();
  }
  return operator new(8256 * a2);
}

void sub_18E0CC230()
{
}

void *sub_18E0CC244()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1EDD1B920;
  return result;
}

void sub_18E0CC27C(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1B920;
}

void sub_18E0CC2A4(int a1, raven::RavenIMUPreprocessorActiveObject **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  sub_18E0BA6B4((uint64_t)v9, this, (uint64_t)this, a4, a5, a6, a7, a8);
  raven::RavenIMUPreprocessorActiveObject::HandleEvent(v8, (const raven::AccelerometerEvent *)v9);
}

uint64_t sub_18E0CC2E4(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09A30)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0CC324()
{
  return &unk_1EDD09A30;
}

void sub_18E0CC334()
{
}

void *sub_18E0CC348()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1EDD1B870;
  return result;
}

void sub_18E0CC380(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1B870;
}

void sub_18E0CC3A8(int a1, raven::RavenIMUPreprocessorActiveObject **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  sub_18E0BBF64((uint64_t)v9, this, (uint64_t)this, a4, a5, a6, a7, a8);
  raven::RavenIMUPreprocessorActiveObject::HandleEvent(v8, (const raven::RateGyroEvent *)v9);
}

uint64_t sub_18E0CC3E8(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09A10)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0CC428()
{
  return &unk_1EDD09A10;
}

void sub_18E0CC438()
{
}

void *sub_18E0CC44C()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1EDD1B8C8;
  return result;
}

void sub_18E0CC484(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1B8C8;
}

void sub_18E0CC4AC(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  __n128 v9 = sub_18E0BC290((uint64_t)v10, this, (uint64_t)this, a4, a5, a6, a7, a8);
  if (!v10[26]) {
    (*(void (**)(uint64_t, __n128))(*(void *)v8 + 48))(v8, v9);
  }
}

uint64_t sub_18E0CC510(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09A20)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0CC550()
{
  return &unk_1EDD09A20;
}

void sub_18E0CC560()
{
}

void *sub_18E0CC574()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1EDD1C9F8;
  return result;
}

void sub_18E0CC5AC(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1C9F8;
}

void sub_18E0CC5D4(int a1, raven::RavenIonosphereEstimatorActiveObject **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  sub_18E0BF728((uint64_t)v9, this, (uint64_t)this, a4, a5, a6, a7, a8);
  raven::RavenIonosphereEstimatorActiveObject::HandleEvent(v8, (const raven::GnssPreprocessedMeasurementsEvent *)v9);
  v9[0] = &unk_1EDD154D0;
  uint64_t v11 = (void **)&v10;
  sub_18DEE4B60(&v11);
}

void sub_18E0CC644(_Unwind_Exception *a1)
{
  *(void *)(v2 - 24) = v1 + 96;
  sub_18DEE4B60((void ***)(v2 - 24));
  _Unwind_Resume(a1);
}

uint64_t sub_18E0CC67C(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09D40)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0CC6BC()
{
  return &unk_1EDD09D40;
}

void sub_18E0CC6CC()
{
}

void *sub_18E0CC6E0()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1EDD1C9A0;
  return result;
}

void sub_18E0CC718(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1C9A0;
}

void sub_18E0CC740(int a1, raven::RavenIonosphereEstimatorActiveObject **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __n128 v9 = *a2;
  uint64_t EventType = cnframework::GenericEvent::GetEventType(this, (uint64_t)a2, (uint64_t)this, a4, a5, a6, a7, a8);
  {
    uint64_t v18 = *((void *)this + 2);
    if (v18) {
      uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 16))(v18);
    }
    else {
      uint64_t v19 = MEMORY[0x1E4FBA3D8];
    }
    int64x2_t v26 = (const char *)(*(void *)(v19 + 8) & 0x7FFFFFFFFFFFFFFFLL);
    if (v26 != (const char *)((unint64_t)off_1EDD055D0 & 0x7FFFFFFFFFFFFFFFLL)
      && strcmp(v26, (const char *)((unint64_t)off_1EDD055D0 & 0x7FFFFFFFFFFFFFFFLL)))
    {
      v35.__vftable = 0;
      std::bad_cast::bad_cast(&v35);
      v35.__vftable = (std::bad_cast_vtbl *)&unk_1EDD12A18;
      sub_18E0BA8B8();
    }
    uint64_t v27 = *((void *)this + 2);
    v35.__vftable = (std::bad_cast_vtbl *)&unk_1EDD146B8;
    long long v28 = *(_OWORD *)(v27 + 16);
    long long v29 = *(_OWORD *)(v27 + 32);
    long long v38 = *(_OWORD *)(v27 + 48);
    long long v37 = v29;
    long long v36 = v28;
    long long v30 = *(_OWORD *)(v27 + 64);
    long long v31 = *(_OWORD *)(v27 + 80);
    long long v32 = *(_OWORD *)(v27 + 96);
    long long v42 = *(_OWORD *)(v27 + 112);
    long long v41 = v32;
    long long v40 = v31;
    long long v39 = v30;
    v43[0] = &unk_1EDD0B000;
    long long v33 = *(_OWORD *)(v27 + 152);
    *(_OWORD *)&v43[1] = *(_OWORD *)(v27 + 136);
    long long v44 = v33;
    long long v34 = *(_OWORD *)(v27 + 184);
    long long v45 = *(_OWORD *)(v27 + 168);
    *(_OWORD *)uint64_t v46 = v34;
    v46[16] = *(unsigned char *)(v27 + 200);
  }
  else
  {
    LOWORD(v35.__vftable) = 3;
    unsigned __int8 v47 = 5;
    uint64_t v20 = cnframework::GenericEvent::GetEventType(this, v11, v12, v13, v14, v15, v16, v17);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v35, &v47, "Attempted to cast a GenericEvent of type %s to type %s.", v21, v22, v23, v24, v25, *(unsigned char *)(v20 + 8));
    long long v37 = 0uLL;
    long long v40 = 0uLL;
    long long v42 = 0u;
    *(_OWORD *)&v46[8] = 0u;
    long long v36 = 0uLL;
    v35.__vftable = (std::bad_cast_vtbl *)&unk_1EDD146B8;
    long long v38 = 0uLL;
    long long v39 = 0uLL;
    *(void *)&long long v41 = 0;
    *((void *)&v41 + 1) = 0x7FF8000000000000;
    v43[0] = &unk_1EDD0B000;
    *(_OWORD *)&v43[1] = 0u;
    long long v44 = 0u;
    long long v45 = xmmword_18E1EFA40;
    *(_OWORD *)uint64_t v46 = xmmword_18E1EFA50;
  }
  raven::RavenIonosphereEstimatorActiveObject::HandleEvent(v9, (const raven::KlobucharParametersEvent *)&v35);
}

void sub_18E0CC9B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::exception a11)
{
}

uint64_t sub_18E0CC9CC(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09D30)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0CCA0C()
{
  return &unk_1EDD09D30;
}

void sub_18E0CCA1C()
{
}

void *sub_18E0CCA30()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1EDD1C948;
  return result;
}

void sub_18E0CCA68(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1C948;
}

void sub_18E0CCA90(int a1, const void ***a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  sub_18E0C1E40(v9, this, (uint64_t)this, a4, a5, a6, a7, a8);
  raven::RavenIonosphereEstimatorActiveObject::HandleEvent(v8, (const raven::RavenSolutionEvent *)v9);
}

uint64_t sub_18E0CCAD0(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09D20)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0CCB10()
{
  return &unk_1EDD09D20;
}

void sub_18E0CCB20()
{
}

void *sub_18E0CCB34()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1EDD1C8F0;
  return result;
}

void sub_18E0CCB6C(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1C8F0;
}

void sub_18E0CCB94(int a1, raven::RavenIonosphereEstimatorActiveObject **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  sub_18E0BD4F4((uint64_t)v9, this, (uint64_t)this, a4, a5, a6, a7, a8);
  raven::RavenIonosphereEstimatorActiveObject::HandleEvent(v8, (const raven::TimeMarkEvent *)v9);
}

uint64_t sub_18E0CCBD4(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09D10)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0CCC14()
{
  return &unk_1EDD09D10;
}

void sub_18E0CCC24()
{
}

void *sub_18E0CCC38()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1EDD1C420;
  return result;
}

void sub_18E0CCC70(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1C420;
}

void sub_18E0CCC98(int a1, cnframework::ActiveObjectBase **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  sub_18E0BA6B4((uint64_t)v10, this, (uint64_t)this, a4, a5, a6, a7, a8);
  *((void *)v8 + 64) = cnframework::ActiveObjectBase::GetCurrentTime(v8);
  *((void *)v8 + 65) = v9;
  sub_18DFFEE48();
}

uint64_t sub_18E0CCCE8(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09C30)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0CCD28()
{
  return &unk_1EDD09C30;
}

void sub_18E0CCD38()
{
}

void *sub_18E0CCD4C()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1EDD1C738;
  return result;
}

void sub_18E0CCD84(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1C738;
}

void sub_18E0CCDAC(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  sub_18E0BD958((uint64_t)v10, this, (uint64_t)this, a4, a5, a6, a7, a8);
  *(void *)(v8 + 512) = cnframework::ActiveObjectBase::GetCurrentTime((cnframework::ActiveObjectBase *)v8);
  *(void *)(v8 + 520) = v9;
  v11[1] = 0;
  void v11[2] = 0;
  v11[0] = &unk_1EDD14A68;
  char v12 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  char v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  char v18 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  uint64_t v21 = 0x7FF8000000000000;
  char v24 = 0;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  char v27 = 0;
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  char v30 = 0;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  uint64_t v33 = 0x7FF8000000000000;
  char v34 = 0;
  long long v35 = 0u;
  long long v36 = 0u;
  memset(v37, 0, sizeof(v37));
  if (!raven::AccessoryVehicleSpeedChecker::HandleEvent(*(raven::AccessoryVehicleSpeedChecker **)(v8 + 2064), (const raven::AccessoryVehicleSpeedEvent *)v10, (raven::AccessoryVehicleSpeedEvent *)v11))sub_18E0CCF94(); {
  raven::AccessoryVehicleSpeedEvent::~AccessoryVehicleSpeedEvent((raven::AccessoryVehicleSpeedEvent *)v11);
  }
  raven::AccessoryVehicleSpeedEvent::~AccessoryVehicleSpeedEvent((raven::AccessoryVehicleSpeedEvent *)v10);
}

void sub_18E0CCF04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  long long v45 = *(std::__shared_weak_count **)(v43 - 56);
  if (v45) {
    sub_18DEE4E18(v45);
  }
  if (v42) {
    sub_18DEE4E18(v42);
  }
  raven::AccessoryVehicleSpeedEvent::~AccessoryVehicleSpeedEvent((raven::AccessoryVehicleSpeedEvent *)&a42);
  raven::AccessoryVehicleSpeedEvent::~AccessoryVehicleSpeedEvent((raven::AccessoryVehicleSpeedEvent *)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_18E0CCF48(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09CC0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0CCF88()
{
  return &unk_1EDD09CC0;
}

void sub_18E0CCF94()
{
  uint64_t v0 = operator new(0x60uLL);
  v0[1] = 0;
  v0[2] = 0;
  *uint64_t v0 = &unk_1EDD1E458;
  v0[3] = &unk_1EDD0A260;
  uint64_t v1 = MEMORY[0x1E4FBA3D8];
  *((unsigned char *)v0 + 32) = 0;
  v0[5] = 0;
  v0[6] = v1;
  void v0[7] = 0;
  unsigned char v0[8] = 0;
  sub_18DEDE7B0(v0 + 9, "");
  *((unsigned char *)v0 + 32) = 1;
  operator new();
}

void sub_18E0CD14C(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 95) < 0) {
    operator delete(*v2);
  }
  uint64_t v4 = *(void *)(v1 + 40);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v1);
  operator delete(v5);
  _Unwind_Resume(a1);
}

uint64_t sub_18E0CD1D0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1EDD13208;
  *(void *)(a1 + 8) = &unk_1EDD14A68;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 8);
  long long v4 = *(_OWORD *)(a2 + 24);
  long long v5 = *(_OWORD *)(a2 + 40);
  long long v6 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 48) = v5;
  long long v7 = *(_OWORD *)(a2 + 88);
  long long v8 = *(_OWORD *)(a2 + 104);
  long long v9 = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 144) = v9;
  *(_OWORD *)(a1 + 96) = v7;
  *(_OWORD *)(a1 + 112) = v8;
  long long v10 = *(_OWORD *)(a2 + 152);
  long long v11 = *(_OWORD *)(a2 + 168);
  long long v12 = *(_OWORD *)(a2 + 184);
  *(void *)(a1 + 208) = *(void *)(a2 + 200);
  *(_OWORD *)(a1 + 176) = v11;
  *(_OWORD *)(a1 + 192) = v12;
  *(_OWORD *)(a1 + 160) = v10;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 232) = 0;
  sub_18E0BDC10((void *)(a1 + 216), *(const void **)(a2 + 208), *(void *)(a2 + 216), (uint64_t)(*(void *)(a2 + 216) - *(void *)(a2 + 208)) >> 3);
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 256) = 0;
  sub_18E0BDC10((void *)(a1 + 240), *(const void **)(a2 + 232), *(void *)(a2 + 240), (uint64_t)(*(void *)(a2 + 240) - *(void *)(a2 + 232)) >> 3);
  *(_WORD *)(a1 + 264) = *(_WORD *)(a2 + 256);
  return a1;
}

void sub_18E0CD2D8(_Unwind_Exception *exception_object)
{
  long long v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 224) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_18E0CD2F4(uint64_t a1)
{
  return a1;
}

void sub_18E0CD320(uint64_t a1)
{
  raven::AccessoryVehicleSpeedEvent::~AccessoryVehicleSpeedEvent((raven::AccessoryVehicleSpeedEvent *)(a1 + 8));

  JUMPOUT(0x192FA6240);
}

void *sub_18E0CD36C()
{
}

void sub_18E0CD378()
{
}

void sub_18E0CD3C0(_Unwind_Exception *a1)
{
  MEMORY[0x192FA6240](v1, 0x1081C40EDB5AB56);
  _Unwind_Resume(a1);
}

void sub_18E0CD3E8()
{
}

void *sub_18E0CD3FC()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1EDD1C478;
  return result;
}

void sub_18E0CD434(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1C478;
}

uint64_t sub_18E0CD45C(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  sub_18E0BDF10((uint64_t)v13, this, (uint64_t)this, a4, a5, a6, a7, a8);
  *(void *)(v8 + 512) = cnframework::ActiveObjectBase::GetCurrentTime((cnframework::ActiveObjectBase *)v8);
  *(void *)(v8 + 520) = v9;
  v14[1] = 0;
  void v14[2] = 0;
  v14[0] = &unk_1EDD140B8;
  char v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  char v18 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  char v21 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  uint64_t v24 = 0x7FF8000000000000;
  LOBYTE(v25) = 0;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  *((void *)&v25 + 1) = 0x3FF0000000000000;
  uint64_t v30 = 0;
  uint64_t result = raven::ActivityStateChecker::HandleEvent(*(raven::ActivityStateChecker **)(v8 + 2056), (const raven::ActivityStateEvent *)v13, (raven::ActivityStateEvent *)v14);
  if (!result)
  {
    long long v11 = v28;
    *(_OWORD *)(v8 + 600) = v27;
    *(_OWORD *)(v8 + 616) = v11;
    *(_OWORD *)(v8 + 632) = v29;
    *(void *)(v8 + 648) = v30;
    long long v12 = v26;
    *(_OWORD *)(v8 + 568) = v25;
    *(_OWORD *)(v8 + 584) = v12;
    sub_18E0CD5AC();
  }
  return result;
}

uint64_t sub_18E0CD560(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09C40)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0CD5A0()
{
  return &unk_1EDD09C40;
}

void sub_18E0CD5AC()
{
}

void sub_18E0CD640(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a11) {
    sub_18DEE4E18(a11);
  }
  if (a13) {
    sub_18DEE4E18(a13);
  }
  _Unwind_Resume(exception_object);
}

void sub_18E0CD664()
{
  uint64_t v0 = operator new(0x60uLL);
  sub_18E0CD6C0(v0);
}

void sub_18E0CD6AC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_18E0CD6C0(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1EDD1E458;
  sub_18E0CD71C((uint64_t)(a1 + 3));
}

void sub_18E0CD708(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_18E0CD71C(uint64_t a1)
{
  *(void *)a1 = &unk_1EDD0A260;
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  uint64_t v2 = MEMORY[0x1E4FBA3D8];
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = v2;
  sub_18DEDE7B0((void *)(a1 + 48), "");
  *(unsigned char *)(a1 + 8) = 1;
  sub_18E0CD8B4();
}

void sub_18E0CD85C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 71) < 0) {
    operator delete(*v3);
  }
  if (*v2) {
    (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_18E0CD8B4()
{
}

void sub_18E0CD9B4()
{
}

void *sub_18E0CD9C8()
{
}

void sub_18E0CD9D4()
{
}

void sub_18E0CDA84()
{
}

void *sub_18E0CDA98()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EDD1C000;
  return result;
}

void sub_18E0CDAD0(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1C000;
}

double sub_18E0CDAF8(int a1, void **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  sub_18E0BE86C((uint64_t)v12, this, (uint64_t)this, a4, a5, a6, a7, a8);
  v8[64] = cnframework::ActiveObjectBase::GetCurrentTime((cnframework::ActiveObjectBase *)v8);
  v8[65] = v9;
  v13[1] = 0;
  void v13[2] = 0;
  v13[0] = &unk_1EDD13730;
  char v14 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  char v17 = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  char v20 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0x7FF8000000000000;
  *(void *)&double result = raven::RavenIntegrityEstimator::HandleEvent((raven::RavenIntegrityEstimator *)(v8 + 62), (const raven::AltitudeEvent *)v12, (raven::AltitudeEvent *)v13).n128_u64[0];
  if (!v11) {
    sub_18E0CDC7C();
  }
  return result;
}

void sub_18E0CDC0C(_Unwind_Exception *exception_object)
{
  long long v4 = *(std::__shared_weak_count **)(v2 - 56);
  if (v4) {
    sub_18DEE4E18(v4);
  }
  if (v1) {
    sub_18DEE4E18(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_18E0CDC30(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09B70)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0CDC70()
{
  return &unk_1EDD09B70;
}

void sub_18E0CDC7C()
{
  uint64_t v0 = operator new(0x60uLL);
  v0[1] = 0;
  v0[2] = 0;
  *uint64_t v0 = &unk_1EDD1E458;
  v0[3] = &unk_1EDD0A260;
  uint64_t v1 = MEMORY[0x1E4FBA3D8];
  *((unsigned char *)v0 + 32) = 0;
  v0[5] = 0;
  v0[6] = v1;
  void v0[7] = 0;
  unsigned char v0[8] = 0;
  sub_18DEDE7B0(v0 + 9, "");
  *((unsigned char *)v0 + 32) = 1;
  operator new();
}

void sub_18E0CDE94(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 95) < 0) {
    operator delete(*v2);
  }
  uint64_t v4 = *(void *)(v1 + 40);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v1);
  operator delete(v5);
  _Unwind_Resume(a1);
}

void sub_18E0CDEFC()
{
}

void *sub_18E0CDF10()
{
}

void sub_18E0CDF1C()
{
}

void sub_18E0CDFB4()
{
}

void *sub_18E0CDFC8()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1EDD1C528;
  return result;
}

void sub_18E0CE000(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1C528;
}

uint64_t sub_18E0CE028(int a1, uint64_t *a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  sub_18E0BE3AC((uint64_t)v11, this, (uint64_t)this, a4, a5, a6, a7, a8);
  *(void *)(v8 + 512) = cnframework::ActiveObjectBase::GetCurrentTime((cnframework::ActiveObjectBase *)v8);
  *(void *)(v8 + 520) = v9;
  v12[1] = 0;
  void v12[2] = 0;
  v12[0] = &unk_1EDD14180;
  char v13 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  char v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  char v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  uint64_t v22 = 0x7FF8000000000000;
  char v25 = 0;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  char v28 = 0;
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  char v31 = 0;
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  uint64_t v34 = 0x7FF8000000000000;
  uint64_t result = raven::AltitudeChangeChecker::HandleEvent(*(raven::AltitudeChangeChecker **)(v8 + 2072), (const raven::AltitudeChangeEvent *)v11, (raven::AltitudeChangeEvent *)v12);
  if (!result) {
    sub_18E0C4F70();
  }
  return result;
}

uint64_t sub_18E0CE0F0(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09C60)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0CE130()
{
  return &unk_1EDD09C60;
}

void sub_18E0CE140()
{
}

void *sub_18E0CE154()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EDD1C688;
  return result;
}

void sub_18E0CE18C(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1C688;
}

void sub_18E0CE1B4(int a1, void **a2, cnframework::GenericEvent *this, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  sub_18E0C6990((uint64_t)v18, this, (uint64_t)this, a4, a5, a6, a7, a8);
  v8[64] = cnframework::ActiveObjectBase::GetCurrentTime((cnframework::ActiveObjectBase *)v8);
  v8[65] = v9;
  if (raven::RavenIntegrityEstimator::HandleEvent((raven::RavenIntegrityEstimator *)(v8 + 62), (const raven::ARSessionStatusEvent *)v18))
  {
    __int16 v22 = 12;
    unsigned __int8 v21 = 2;
    uint64_t v10 = (*(uint64_t (**)(void *))(v18[0] + 16))(v18);
    double v12 = v11 + (double)v10;
    (*(void (**)(void **__return_ptr, void *))(v18[0] + 24))(&v19, v18);
    cnprint::CNPrinter::Print((cnprint::CNPrinter *)&v22, &v21, "t,%.3lf,IE failed to handle %s", v13, v14, v15, v16, v17, SLOBYTE(v12));
    if (v20 < 0) {
      operator delete(v19);
    }
  }
}

void sub_18E0CE2D0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 57) < 0) {
    operator delete(*(void **)(v1 - 80));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_18E0CE2EC(uint64_t a1, uint64_t a2)
{
  if (sub_18DEE4C68(a2, (uint64_t)&unk_1EDD09CA0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_18E0CE32C()
{
  return &unk_1EDD09CA0;
}

void sub_18E0CE33C()
{
}

void *sub_18E0CE350()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EDD1C580;
  return result;
}

void sub_18E0CE388(uint64_t a1, void *a2)
{
  *a2 = &unk_1EDD1C580;
}