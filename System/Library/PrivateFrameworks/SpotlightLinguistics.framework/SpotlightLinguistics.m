__CFString *SILanguagesGetLanguage(int a1)
{
  if ((a1 - 1) > 0x39) {
    return 0;
  }
  else {
    return gLanguageTags[a1];
  }
}

void SILanguageModelPurge()
{
  if (!atomic_load((unsigned int *)languageReservations))
  {
    if (logger(void)::token != -1) {
      dispatch_once(&logger(void)::token, &__block_literal_global_102);
    }
    v1 = logger(void)::log;
    if (os_log_type_enabled((os_log_t)logger(void)::log, OS_LOG_TYPE_DEBUG)) {
      SILanguageModelPurge_cold_1(v1);
    }
    if (getResourcePools(void)::t != -1) {
      dispatch_once(&getResourcePools(void)::t, &__block_literal_global_106);
    }
    SIResourcePools::compactAll((SIResourcePools *)getResourcePools(void)::pools);
    if (sLanguageIdentifierPool) {
      SIResourcePools::compactAll((SIResourcePools *)sLanguageIdentifierPool);
    }
  }
}

void SIResourcePools::compactAll(SIResourcePools *this)
{
  v3.__m_ = (std::unique_lock<std::mutex>::mutex_type *)((char *)this + 24);
  *(void *)&v3.__owns_ = 1;
  std::mutex::lock((std::mutex *)((char *)this + 24));
  for (i = (int64x2_t **)((char *)this + 184); ; SIResourcePool::compactLocked(i[3]))
  {
    i = (int64x2_t **)*i;
    if (!i) {
      break;
    }
  }
  std::unique_lock<std::mutex>::unlock(&v3);
  std::condition_variable::notify_all((std::condition_variable *)((char *)this + 88));
  if (v3.__owns_) {
    std::mutex::unlock(v3.__m_);
  }
}

void sub_1BDAD1DB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::mutex *a9, char a10)
{
  if (a10) {
    std::mutex::unlock(a9);
  }
  _Unwind_Resume(exception_object);
}

void std::unique_lock<std::mutex>::unlock(std::unique_lock<std::mutex> *this)
{
  if (this->__owns_)
  {
    std::mutex::unlock(this->__m_);
    this->__owns_ = 0;
  }
  else
  {
    std::__throw_system_error(1, "unique_lock::unlock: not locked");
    SILanguagesGetLanguageIDForIdentifier(v2);
  }
}

uint64_t SILanguagesGetLanguageIDForIdentifier(CFLocaleIdentifier localeIdentifier)
{
  if (!localeIdentifier) {
    return 0;
  }
  CFLocaleRef v1 = CFLocaleCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], localeIdentifier);
  if (!v1) {
    return 0;
  }
  CFLocaleRef v2 = v1;
  uint64_t LanguageID = SILanguagesGetLanguageID(v1);
  CFRelease(v2);
  return LanguageID;
}

uint64_t SILanguagesGetLanguageID(const __CFLocale *a1)
{
  if (!a1) {
    return 0;
  }
  CFStringRef v2 = (const __CFString *)MEMORY[0x1C1883020]();
  if (CFStringHasPrefix(v2, @"und")) {
    return 1;
  }
  uint64_t v3 = MEMORY[0x1C1883720](a1);
  if ((int)v3 <= 1)
  {
    CFStringRef Value = (const __CFString *)CFLocaleGetValue(a1, (CFLocaleKey)*MEMORY[0x1E4F1D218]);
    if (CFStringHasPrefix(Value, @"hr"))
    {
      return 6;
    }
    else if (CFStringHasPrefix(Value, @"cs"))
    {
      return 7;
    }
    else if (CFStringHasPrefix(Value, @"el"))
    {
      return 14;
    }
    else if (CFStringHasPrefix(Value, @"sk"))
    {
      return 28;
    }
    else if (CFStringHasPrefix(Value, @"hy"))
    {
      return 35;
    }
    else
    {
      if (CFStringHasPrefix(Value, @"bn")) {
        return 36;
      }
      if (CFStringHasPrefix(Value, @"pa")) {
        return 37;
      }
      if (CFStringHasPrefix(Value, @"bn"))
      {
        return 36;
      }
      else if (CFStringHasPrefix(Value, @"gu"))
      {
        return 38;
      }
      else if (CFStringHasPrefix(Value, @"or"))
      {
        return 39;
      }
      else if (CFStringHasPrefix(Value, @"ta"))
      {
        return 40;
      }
      else if (CFStringHasPrefix(Value, @"te"))
      {
        return 41;
      }
      else if (CFStringHasPrefix(Value, @"kn"))
      {
        return 42;
      }
      else if (CFStringHasPrefix(Value, @"ml"))
      {
        return 43;
      }
      else if (CFStringHasPrefix(Value, @"si"))
      {
        return 44;
      }
      else if (CFStringHasPrefix(Value, @"lo"))
      {
        return 45;
      }
      else if (CFStringHasPrefix(Value, @"bo"))
      {
        return 46;
      }
      else if (CFStringHasPrefix(Value, @"my"))
      {
        return 47;
      }
      else if (CFStringHasPrefix(Value, @"ka"))
      {
        return 48;
      }
      else if (CFStringHasPrefix(Value, @"am"))
      {
        return 49;
      }
      else if (CFStringHasPrefix(Value, @"chr"))
      {
        return 50;
      }
      else if (CFStringHasPrefix(Value, @"iu"))
      {
        return 51;
      }
      else if (CFStringHasPrefix(Value, @"km"))
      {
        return 52;
      }
      else if (CFStringHasPrefix(Value, @"mn"))
      {
        return 53;
      }
      else if (CFStringHasPrefix(Value, @"id"))
      {
        return 57;
      }
      else if (CFStringHasPrefix(Value, @"kk"))
      {
        return 58;
      }
    }
  }
  return v3;
}

uint64_t db_rwlock_unlock_unknown(uint64_t a1)
{
  uint64_t v2 = pthread_mutex_lock((pthread_mutex_t *)a1);
  uint64_t v3 = *(_opaque_pthread_t **)(a1 + 184);
  if (v3 == pthread_self()
    || *(void *)(a1 + 184)
    && exc_pthread_key
    && ((v9 = pthread_getspecific(exc_pthread_key), v9 == (void *)-1) || v9 == *(void **)(a1 + 184)))
  {
    *(_DWORD *)(a1 + 204) = 0;
    v11 = *(pthread_override_s **)(a1 + 176);
    *(void *)(a1 + 176) = 0;
    *(void *)(a1 + 184) = 0;
    BOOL v12 = *(_DWORD *)(a1 + 196) != 0;
    *(unsigned char *)(a1 + 212) = 0;
    db_rwlock_wakeup(a1, v12, 0, v4, v5, v6, v7, v8);
    pthread_mutex_unlock((pthread_mutex_t *)a1);
    if (v11) {
      pthread_override_qos_class_end_np(v11);
    }
  }
  else
  {
    int v10 = *(_DWORD *)(a1 + 196) - 1;
    *(_DWORD *)(a1 + 196) = v10;
    if (!v10) {
      db_rwlock_wakeup(a1, 0, 0, v4, v5, v6, v7, v8);
    }
    pthread_mutex_unlock((pthread_mutex_t *)a1);
  }
  return v2;
}

uint64_t db_rwlock_is_locked(uint64_t a1)
{
  if (pthread_mutex_trylock((pthread_mutex_t *)a1)) {
    return 1;
  }
  if (*(_DWORD *)(a1 + 196) || (unsigned int v3 = *(_DWORD *)(a1 + 200)) != 0) {
    unsigned int v3 = 1;
  }
  if (*(void *)(a1 + 184)) {
    uint64_t v2 = 1;
  }
  else {
    uint64_t v2 = v3;
  }
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  return v2;
}

uint64_t db_read_unlock(uint64_t a1)
{
  uint64_t v7 = pthread_mutex_lock((pthread_mutex_t *)a1);
  int v8 = *(_DWORD *)(a1 + 196) - 1;
  *(_DWORD *)(a1 + 196) = v8;
  if (!v8) {
    db_rwlock_wakeup(a1, 0, 0, v2, v3, v4, v5, v6);
  }
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  return v7;
}

uint64_t db_read_lock(uint64_t a1)
{
  uint64_t v2 = pthread_mutex_lock((pthread_mutex_t *)a1);
  unsigned int v3 = qos_level();
  uint64_t v4 = *(_opaque_pthread_t **)(a1 + 184);
  pthread_t v5 = pthread_self();
  if (v4 == v5) {
    db_read_lock_cold_1((uint64_t)v5, v6, v7, v8, v9, v10, v11, v12);
  }
  if (db_rwlock_reader_excluded(a1, v3, 0)) {
    db_rwlock_wait(a1, v3, 4);
  }
  else {
    ++*(_DWORD *)(a1 + 196);
  }
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  return v2;
}

uint64_t qos_level()
{
  HIDWORD(v1) = qos_class_self() - 9;
  LODWORD(v1) = HIDWORD(v1);
  unsigned int v0 = v1 >> 2;
  if (v0 > 6) {
    return 0;
  }
  else {
    return dword_1BDB1EA10[v0];
  }
}

void __message_assert(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  v9[0] = 0;
  v9[1] = &a9;
  vasprintf((char **)v9, "%s:%u: failed assertion '%s' %s ", &a9);
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315138;
    uint64_t v11 = v9[0];
    _os_log_error_impl(&dword_1BDAD0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%s", buf, 0xCu);
  }
  free(v9[0]);
}

BOOL db_rwlock_reader_excluded(uint64_t a1, int a2, char a3)
{
  if (*(void *)(a1 + 184) && ((a3 & 1) != 0 || !*(unsigned char *)(a1 + 212))
    || *(void *)(a1 + 160) && *(_DWORD *)(a1 + 192) >= a2 && (a3 & 1) == 0 && !*(_DWORD *)(a1 + 200))
  {
    return 1;
  }
  if (!*(_DWORD *)(a1 + 196) && !*(unsigned char *)(a1 + 212)) {
    return 0;
  }
  uint64_t v3 = a2 <= 5 ? 5 : a2;
  uint64_t v4 = v3 - a2 + 1;
  pthread_t v5 = (uint64_t *)(a1 + 16 * a2 + 80);
  while (--v4)
  {
    uint64_t v6 = *v5;
    v5 += 2;
    if (v6) {
      return 1;
    }
  }
  return *(void *)(a1 + 16 * a2 + 64) && !*(_DWORD *)(a1 + 200);
}

uint64_t db_rwlock_wait(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v12 = db_rwlock_alloc_waiter(a1);
  LODWORD(v12[1].__sig) = a3;
  if ((a3 & 0xFFFFFFFE) == 2) {
    *(void *)v12[1].__opaque = pthread_self();
  }
  ++*(_DWORD *)(a1 + 208);
  db_rwlock_waiter_list_enqueue_inner((uint64_t *)(a1 + 16 * a2 + 64), (uint64_t)v12, v6, v7, v8, v9, v10, v11);
  do
  {
    v13 = *(_opaque_pthread_t **)(a1 + 184);
    if (v13)
    {
      if (!*(unsigned char *)(a1 + 212) && *(_DWORD *)(a1 + 204) < (signed int)a2)
      {
        *(_DWORD *)(a1 + 204) = a2;
        v14 = *(pthread_override_s **)(a1 + 176);
        qos_class_t v15 = qos_class_self();
        *(void *)(a1 + 176) = pthread_override_qos_class_start_np(v13, v15, 0);
        if (v14) {
          pthread_override_qos_class_end_np(v14);
        }
      }
    }
    uint64_t result = pthread_cond_wait(v12, (pthread_mutex_t *)a1);
  }
  while (!BYTE4(v12[1].__sig));
  *(void *)&v12[1].__opaque[8] = *(void *)(a1 + 168);
  *(void *)(a1 + 168) = v12;
  return result;
}

uint64_t db_longread_lock(uint64_t a1)
{
  uint64_t v2 = pthread_mutex_lock((pthread_mutex_t *)a1);
  unsigned int v3 = qos_level();
  if (db_rwlock_reader_excluded(a1, v3, 1)) {
    db_rwlock_wait(a1, v3, 5);
  }
  else {
    *(int32x2_t *)(a1 + 196) = vadd_s32(*(int32x2_t *)(a1 + 196), (int32x2_t)0x100000001);
  }
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  return v2;
}

uint64_t db_longread_unlock(uint64_t a1)
{
  uint64_t v7 = pthread_mutex_lock((pthread_mutex_t *)a1);
  int32x2_t v8 = vadd_s32(*(int32x2_t *)(a1 + 196), (int32x2_t)-1);
  *(int32x2_t *)(a1 + 196) = v8;
  if (!v8.i32[0]) {
    db_rwlock_wakeup(a1, 0, 0, v2, v3, v4, v5, v6);
  }
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  return v7;
}

uint64_t db_rwlock_wakeup(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8 = a3;
  char v9 = a2;
  uint64_t v10 = result;
  unint64_t v11 = 6;
  while (1)
  {
    unint64_t v12 = v11 - 1;
    if ((uint64_t)(v11 - 1) <= *(int *)(v10 + 192))
    {
      uint64_t result = *(void *)(v10 + 160);
      if (result)
      {
        if ((v9 & 1) == 0)
        {
          *(unsigned char *)(result + 52) = 1;
          *(void *)(v10 + 160) = 0;
          *(_DWORD *)(v10 + 192) = 0;
          *(unsigned char *)(v10 + 212) = 0;
          return pthread_cond_signal((pthread_cond_t *)result);
        }
        return result;
      }
    }
    BOOL v13 = (v9 & 1) != 0 || *(unsigned char *)(v10 + 212) != 0;
    long long v27 = 0uLL;
    unint64_t v14 = v10 + 16 * v12;
    uint64_t v17 = *(void *)(v14 + 64);
    v16 = (uint64_t *)(v14 + 64);
    uint64_t v15 = v17;
    if (v17) {
      break;
    }
LABEL_38:
    if (v11-- <= 1) {
      return result;
    }
  }
  v18 = (void *)(v10 + 16 * v12 + 72);
  while (1)
  {
    unsigned int v19 = *(_DWORD *)(v15 + 48);
    if (v19 < 3) {
      break;
    }
    if (v19 != 3)
    {
      if (v19 == 5 && ((v8 & 1) != 0 || *(_DWORD *)(v10 + 200))) {
        goto LABEL_21;
      }
      uint64_t result = pthread_cond_signal((pthread_cond_t *)v15);
      uint64_t v20 = *v16;
      if (*v16 != *v18)
      {
        uint64_t *v16 = *(void *)(v20 + 64);
        goto LABEL_26;
      }
      uint64_t *v16 = 0;
      v16[1] = 0;
      if (v20)
      {
LABEL_26:
        *(unsigned char *)(v20 + 52) = 1;
        --*(_DWORD *)(v10 + 208);
      }
      ++*(_DWORD *)(v10 + 196);
      if (*(_DWORD *)(v15 + 48) == 5) {
        ++*(_DWORD *)(v10 + 200);
      }
      goto LABEL_34;
    }
    if (*(void *)(v10 + 184))
    {
      if (!*(void *)(v15 + 56)) {
        db_rwlock_wakeup_cold_1(result, a2, a3, a4, a5, a6, a7, a8);
      }
      goto LABEL_21;
    }
    uint64_t result = pthread_cond_signal((pthread_cond_t *)v15);
    uint64_t v22 = *v16;
    if (*v16 != *v18)
    {
      uint64_t *v16 = *(void *)(v22 + 64);
LABEL_32:
      *(unsigned char *)(v22 + 52) = 1;
      --*(_DWORD *)(v10 + 208);
      goto LABEL_33;
    }
    uint64_t *v16 = 0;
    v16[1] = 0;
    if (v22) {
      goto LABEL_32;
    }
LABEL_33:
    *(void *)(v10 + 184) = *(void *)(v15 + 56);
    char v8 = 1;
    *(unsigned char *)(v10 + 212) = 1;
LABEL_34:
    BOOL v13 = 1;
    char v9 = 1;
LABEL_35:
    uint64_t v15 = *v16;
    if (!*v16)
    {
      if ((void)v27) {
        *(_OWORD *)v16 = v27;
      }
      goto LABEL_38;
    }
  }
  if (*(_DWORD *)(v10 + 200) || *(unsigned char *)(v10 + 212))
  {
LABEL_21:
    if (v15 == *v18)
    {
      uint64_t v21 = 0;
      void *v18 = 0;
    }
    else
    {
      uint64_t v21 = *(void *)(v15 + 64);
    }
    uint64_t *v16 = v21;
    uint64_t result = (uint64_t)db_rwlock_waiter_list_enqueue_inner((uint64_t *)&v27, v15, a3, a4, a5, a6, a7, a8);
    goto LABEL_35;
  }
  if (!v13)
  {
    pthread_cond_signal((pthread_cond_t *)v15);
    uint64_t v24 = *v16;
    if (*v16 != *v18)
    {
      v25 = *(uint64_t **)(v24 + 64);
      uint64_t *v16 = (uint64_t)v25;
      goto LABEL_44;
    }
    v25 = 0;
    uint64_t result = 0;
    uint64_t *v16 = 0;
    v16[1] = 0;
    if (v24)
    {
LABEL_44:
      *(unsigned char *)(v24 + 52) = 1;
      --*(_DWORD *)(v10 + 208);
      uint64_t result = (uint64_t)v25;
    }
    *(void *)(v10 + 184) = *(void *)(v15 + 56);
    uint64_t v15 = result;
  }
  if ((void)v27)
  {
    if (v15)
    {
      uint64_t v26 = v16[1];
      *(_OWORD *)v16 = v27;
      *(void *)(v16[1] + 64) = v15;
      v16[1] = v26;
    }
    else
    {
      *(_OWORD *)v16 = v27;
    }
  }
  return result;
}

uint64_t _db_write_lock(uint64_t a1)
{
  unsigned int v2 = qos_level();
  uint64_t v3 = pthread_mutex_lock((pthread_mutex_t *)a1);
  if (db_rwlock_writer_excluded(a1, v2)) {
    db_rwlock_wait(a1, v2, 2);
  }
  else {
    *(void *)(a1 + 184) = pthread_self();
  }
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  return v3;
}

BOOL db_rwlock_writer_excluded(uint64_t a1, int a2)
{
  if (*(void *)(a1 + 184) || *(_DWORD *)(a1 + 196) || *(unsigned char *)(a1 + 212)) {
    return 1;
  }
  if (a2 > 5) {
    return 0;
  }
  if (*(void *)(a1 + 16 * a2 + 64)) {
    return 1;
  }
  uint64_t v3 = a2;
  uint64_t v4 = (uint64_t *)(a1 + 16 * a2 + 80);
  do
  {
    uint64_t v5 = v3;
    if (v3 == 5) {
      break;
    }
    uint64_t v6 = *v4;
    v4 += 2;
    ++v3;
  }
  while (!v6);
  return v5 < 5;
}

uint64_t db_write_unlock(uint64_t a1)
{
  uint64_t v2 = pthread_mutex_lock((pthread_mutex_t *)a1);
  *(_DWORD *)(a1 + 204) = 0;
  uint64_t v3 = *(pthread_override_s **)(a1 + 176);
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  BOOL v4 = *(_DWORD *)(a1 + 196) != 0;
  *(unsigned char *)(a1 + 212) = 0;
  db_rwlock_wakeup(a1, v4, 0, v5, v6, v7, v8, v9);
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v3) {
    pthread_override_qos_class_end_np(v3);
  }
  return v2;
}

uint64_t _db_write_lock_downgraded(uint64_t a1)
{
  unsigned int v2 = qos_level();
  uint64_t v3 = pthread_mutex_lock((pthread_mutex_t *)a1);
  if (db_rwlock_writer_excluded(a1, v2))
  {
    db_rwlock_wait(a1, v2, 3);
  }
  else
  {
    *(void *)(a1 + 184) = pthread_self();
    *(unsigned char *)(a1 + 212) = 1;
  }
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  return v3;
}

BOOL db_writelock_assertlock(uint64_t a1)
{
  int v2 = pthread_mutex_lock((pthread_mutex_t *)a1);
  uint64_t v3 = *(_opaque_pthread_t **)(a1 + 184);
  if (v3 == pthread_self()) {
    goto LABEL_7;
  }
  if (!*(void *)(a1 + 184) || !exc_pthread_key)
  {
    BOOL v5 = 0;
    if (v2) {
      return 0;
    }
    goto LABEL_10;
  }
  BOOL v4 = pthread_getspecific(exc_pthread_key);
  if (v4 == (void *)-1)
  {
LABEL_7:
    BOOL v5 = 1;
    if (v2) {
      return 0;
    }
LABEL_10:
    pthread_mutex_unlock((pthread_mutex_t *)a1);
    return v5;
  }
  BOOL v5 = v4 == *(void **)(a1 + 184);
  if (!v2) {
    goto LABEL_10;
  }
  return 0;
}

uint64_t db_downgrade_lock(pthread_mutex_t *a1)
{
  uint64_t v2 = pthread_mutex_lock(a1);
  a1[3].__opaque[12] = 1;
  db_rwlock_wakeup((uint64_t)a1, 1, 1, v3, v4, v5, v6, v7);
  pthread_mutex_unlock(a1);
  return v2;
}

uint64_t db_writer_yield_lock(uint64_t a1)
{
  unsigned int v2 = qos_level();
  if (!*(_DWORD *)(a1 + 208)) {
    return 0;
  }
  unsigned int v3 = v2;
  if (pthread_mutex_lock((pthread_mutex_t *)a1)) {
    return 0;
  }
  uint64_t v9 = 16 * v3;
  while (1)
  {
    uint64_t v10 = *(void *)(a1 + v9 + 64);
    if (v10)
    {
      if (*(_DWORD *)(v10 + 48) == 4) {
        break;
      }
    }
    v9 += 16;
    if (v9 == 96)
    {
      pthread_mutex_unlock((pthread_mutex_t *)a1);
      return 0;
    }
  }
  uint64_t v11 = 1;
  *(unsigned char *)(a1 + 212) = 1;
  db_rwlock_wakeup(a1, 1, 1, v4, v5, v6, v7, v8);
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  db_upgrade_lock(a1);
  return v11;
}

uint64_t db_upgrade_lock(uint64_t a1)
{
  uint64_t v2 = pthread_mutex_lock((pthread_mutex_t *)a1);
  unsigned int v3 = qos_level();
  unsigned int v4 = v3;
  if (*(_DWORD *)(a1 + 196))
  {
LABEL_2:
    uint64_t v5 = db_rwlock_alloc_waiter(a1);
    LODWORD(v5[1].__sig) = 1;
    *(void *)v5[1].__opaque = pthread_self();
    *(void *)(a1 + 160) = v5;
    *(_DWORD *)(a1 + 192) = v4;
    while (!BYTE4(v5[1].__sig))
      pthread_cond_wait(v5, (pthread_mutex_t *)a1);
    *(void *)&v5[1].__opaque[8] = *(void *)(a1 + 168);
    *(void *)(a1 + 168) = v5;
  }
  else
  {
    uint64_t v6 = 16 * v3;
    while (v6 != 80)
    {
      uint64_t v7 = *(void *)(a1 + 80 + v6);
      v6 += 16;
      if (v7)
      {
        if (*(_DWORD *)(v7 + 48) >= 4u) {
          goto LABEL_2;
        }
        break;
      }
    }
    *(unsigned char *)(a1 + 212) = 0;
  }
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  return v2;
}

uint64_t db_convert_to_reader(uint64_t a1)
{
  uint64_t v2 = pthread_mutex_lock((pthread_mutex_t *)a1);
  *(_DWORD *)(a1 + 204) = 0;
  unsigned int v3 = *(pthread_override_s **)(a1 + 176);
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  ++*(_DWORD *)(a1 + 196);
  db_rwlock_wakeup(a1, 1, 0, v4, v5, v6, v7, v8);
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v3) {
    pthread_override_qos_class_end_np(v3);
  }
  return v2;
}

uint64_t db_rwlock_destroy(pthread_mutex_t *a1)
{
  for (uint64_t i = 0; i != 6; ++i)
  {
    unsigned int v3 = (char *)a1 + 16 * i;
    uint64_t v4 = (uint64_t *)(v3 + 64);
    uint64_t v5 = v3 + 72;
    while (1)
    {
      uint64_t v6 = *v4;
      if (*v4 != *v5)
      {
        *uint64_t v4 = *(void *)(v6 + 64);
        goto LABEL_6;
      }
      *uint64_t v4 = 0;
      v4[1] = 0;
      if (!v6) {
        break;
      }
LABEL_6:
      *(unsigned char *)(v6 + 52) = 1;
      --*(_DWORD *)&a1[3].__opaque[8];
      pthread_cond_destroy((pthread_cond_t *)v6);
      free((void *)v6);
    }
  }
  while (1)
  {
    uint64_t v7 = *(void *)&a1[2].__opaque[32];
    if (!v7) {
      break;
    }
    *(void *)&a1[2].__opaque[32] = *(void *)(v7 + 64);
    pthread_cond_destroy((pthread_cond_t *)v7);
    free((void *)v7);
  }
  uint64_t v8 = *(void **)&a1[2].__opaque[24];
  if (v8)
  {
    pthread_cond_destroy(*(pthread_cond_t **)&a1[2].__opaque[24]);
    free(v8);
  }

  return pthread_mutex_destroy(a1);
}

uint64_t _db_rwlock_init(uint64_t a1)
{
  *(void *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return pthread_mutex_init((pthread_mutex_t *)a1, 0);
}

uint64_t db_dryrun_lock()
{
  return 0;
}

pthread_cond_t *db_rwlock_alloc_waiter(uint64_t a1)
{
  unint64_t v1 = *(pthread_cond_t **)(a1 + 168);
  if (v1)
  {
    *(void *)(a1 + 168) = *(void *)&v1[1].__opaque[8];
  }
  else
  {
    unint64_t v1 = (pthread_cond_t *)malloc_type_malloc(0x48uLL, 0x10200407DFAD57DuLL);
    pthread_cond_init(v1, 0);
  }
  LODWORD(v1[1].__sig) = 0;
  BYTE4(v1[1].__sig) = 0;
  *(void *)v1[1].__opaque = 0;
  *(void *)&v1[1].__opaque[8] = 0;
  return v1;
}

uint64_t *db_rwlock_waiter_list_enqueue_inner(uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(a2 + 64) = 0;
  uint64_t v8 = result[1];
  if (v8)
  {
    uint64_t v9 = (uint64_t *)(v8 + 64);
  }
  else
  {
    uint64_t v9 = result;
    if (*result) {
      db_rwlock_waiter_list_enqueue_inner_cold_1((uint64_t)result, a2, a3, a4, a5, a6, a7, a8);
    }
  }
  uint64_t *v9 = a2;
  result[1] = a2;
  return result;
}

void OUTLINED_FUNCTION_0()
{
  MEMORY[0xBAD] = -559038737;
  abort();
}

void _data_map32_clear_seen(uint64_t a1)
{
  uint64_t v2 = (os_unfair_lock_s *)(a1 + 1436);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 1436));
  unsigned int v3 = *(void **)(a1 + 1440);
  if (v3)
  {
    uint64_t v4 = (const void *)v3[2];
    if (v4) {
      CFRelease(v4);
    }
    free(v3);
    *(void *)(a1 + 1440) = 0;
  }

  os_unfair_lock_unlock(v2);
}

uint64_t _data_map32_wrlock(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 1453)) {
    return 0;
  }
  uint64_t v1 = _db_write_lock(a1);
  if (v1)
  {
    int v3 = *__error();
    uint64_t v4 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      _data_map32_wrlock_cold_1(v1);
    }
    *__error() = v3;
  }
  return v1;
}

uint64_t _data_map32_rdlock(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 1453)) {
    return 0;
  }
  uint64_t lock = db_read_lock(a1);
  if (lock)
  {
    int v3 = *__error();
    uint64_t v4 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      _data_map32_rdlock_cold_1(lock);
    }
    *__error() = v3;
  }
  return lock;
}

uint64_t _data_map32_unlock(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 1453)) {
    return 0;
  }
  uint64_t v1 = db_rwlock_unlock_unknown(a1);
  if (v1)
  {
    int v3 = *__error();
    uint64_t v4 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      _data_map32_unlock_cold_1(v1);
    }
    *__error() = v3;
  }
  return v1;
}

uint64_t data_map32_make_read_only(uint64_t a1)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  int v2 = *(unsigned __int8 *)(a1 + 1454);
  if (_data_map32_commit(a1, 0)) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = fd_parent_fd(*(void *)(a1 + 1264));
  if (result != -1)
  {
    int v4 = result;
    bzero(v25, 0x400uLL);
    uint64_t v5 = fd_name(*(void *)(a1 + 1264), v25, 0x400uLL);
    if (!v5) {
      return 0xFFFFFFFFLL;
    }
    uint64_t v6 = v5;
    size_t v7 = strlen(v5);
    if (v7 < 8) {
      return 0xFFFFFFFFLL;
    }
    uint64_t v8 = (char *)&v6[v7 - 7];
    if (strcmp(v8, ".header")) {
      return 0xFFFFFFFFLL;
    }
    strcpy(v8, ".map");
    unsigned __int8 v9 = v2 ? 3 : 0;
    uint64_t v10 = (atomic_uint *)fd_create_protected(v4, v6, 1538, v9);
    if (!v10) {
      return 0xFFFFFFFFLL;
    }
    uint64_t v11 = v10;
    uint64_t v12 = (*(unsigned int *)(a1 + 1368) + 103) & 0x1FFFFFFF8;
    uint64_t v13 = (*(unsigned int *)(a1 + 1340) + v12 + 15) & 0x3FFFFFFF8;
    uint64_t v14 = (*(unsigned int *)(a1 + 1320) + v13 + 15) & 0x7FFFFFFF8;
    if (fd_truncate((uint64_t)v10, v14) || (uint64_t v15 = fd_mmap((uint64_t)v11), v15 == -1))
    {
      fd_unlink((uint64_t)v11);
      fd_release(v11);
      return 0xFFFFFFFFLL;
    }
    v16 = (char *)v15;
    uint64_t v17 = *(long long **)(a1 + 1288);
    long long v18 = *v17;
    long long v19 = v17[1];
    long long v20 = v17[2];
    *(void *)(v15 + 48) = *((void *)v17 + 6);
    *(_OWORD *)(v15 + 16) = v19;
    *(_OWORD *)(v15 + 32) = v20;
    *(_OWORD *)uint64_t v15 = v18;
    *(_DWORD *)(v15 + 56) = 13;
    *(_DWORD *)(v15 + 60) = v14;
    *(_DWORD *)(v15 + 64) = 88;
    *(_DWORD *)(v15 + 68) = v12;
    *(_DWORD *)(v15 + 72) = v13;
    memcpy((void *)(v15 + 88), *(const void **)(a1 + 1376), *(unsigned int *)(a1 + 1368));
    memcpy(&v16[v12], *(const void **)(a1 + 1344), *(unsigned int *)(a1 + 1340));
    memcpy(&v16[v13], *(const void **)(a1 + 1312), *(unsigned int *)(a1 + 1320));
    fd_msync(v16, v14, 16, 1);
    munmap(v16, v14);
    fd_release(v11);
    free(*(void **)(a1 + 1288));
    *(void *)(a1 + 1288) = 0;
    fd_unlink(*(void *)(a1 + 1264));
    fd_release(*(atomic_uint **)(a1 + 1264));
    *(void *)(a1 + 1264) = 0;
    munmap(*(void **)(a1 + 1376), *(unsigned int *)(a1 + 1372));
    *(void *)(a1 + 1376) = -1;
    fd_unlink(*(void *)(a1 + 1360));
    fd_release(*(atomic_uint **)(a1 + 1360));
    *(void *)(a1 + 1360) = 0;
    munmap(*(void **)(a1 + 1344), *(unsigned int *)(a1 + 1336));
    *(void *)(a1 + 1344) = -1;
    fd_unlink(*(void *)(a1 + 1328));
    fd_release(*(atomic_uint **)(a1 + 1328));
    *(void *)(a1 + 1328) = 0;
    munmap(*(void **)(a1 + 1312), *(unsigned int *)(a1 + 1304));
    *(void *)(a1 + 1312) = -1;
    fd_unlink(*(void *)(a1 + 1296));
    fd_release(*(atomic_uint **)(a1 + 1296));
    *(void *)(a1 + 1296) = 0;
    if (*(unsigned char *)(a1 + 1454)) {
      unsigned __int8 v21 = 3;
    }
    else {
      unsigned __int8 v21 = 0;
    }
    uint64_t v22 = fd_create_protected(v4, v6, 1, v21);
    *(void *)(a1 + 1264) = v22;
    data_map32_prepare_mappings(v22);
    uint64_t v23 = fd_mmap(*(void *)(a1 + 1264));
    if (v23 == -1)
    {
      return 0;
    }
    else
    {
      uint64_t v24 = (unsigned int *)v23;
      uint64_t result = 0;
      *(void *)(a1 + 1248) = v24;
      *(void *)(a1 + 1288) = v24;
      *(void *)(a1 + 1376) = (char *)v24 + v24[16];
      *(void *)(a1 + 1344) = (char *)v24 + v24[17];
      *(void *)(a1 + 1312) = (char *)v24 + v24[18];
    }
  }
  return result;
}

uint64_t _data_map32_commit(uint64_t a1, int a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (_data_map32_rdlock(a1)) {
    return 0xFFFFFFFFLL;
  }
  int v5 = *(_DWORD *)(*(void *)(a1 + 1288) + 16);
  if (v5 == 1) {
    goto LABEL_7;
  }
  if (v5)
  {
    uint64_t v4 = 0xFFFFFFFFLL;
  }
  else
  {
    uint64_t v4 = _data_map32_sync_data(a1, a2);
    if (!v4)
    {
      uint64_t v4 = _data_map32_sync_header(a1, a2);
      if (!v4)
      {
LABEL_7:
        uint64_t v4 = data_map32_shadow(a1);
        if (!v4)
        {
          uint64_t v4 = data_map32_commit_shadow(a1);
          if (!v4) {
            uint64_t v4 = data_map32_commit_shadow_complete(a1);
          }
        }
      }
    }
  }
  memset(v19, 0, sizeof(v19));
  int v6 = *__error();
  size_t v7 = _SILogForLogForCategory(7);
  os_log_type_t v8 = 2 * (dword_1EA0DBB6C < 4);
  if (os_log_type_enabled(v7, v8))
  {
    unsigned __int8 v9 = fd_name(*(void *)(a1 + 1264), (char *)v19, 0x100uLL);
    uint64_t v10 = "syncless commit";
    int v11 = *(_DWORD *)(a1 + 1388);
    int v13 = 136315650;
    uint64_t v14 = v9;
    if (a2) {
      uint64_t v10 = "commit";
    }
    __int16 v15 = 2080;
    v16 = v10;
    __int16 v17 = 1024;
    int v18 = v11 - 1;
    _os_log_impl(&dword_1BDAD0000, v7, v8, "%s complete %s with count: %d", (uint8_t *)&v13, 0x1Cu);
  }
  *__error() = v6;
  _data_map32_unlock(a1);
  return v4;
}

uint64_t data_map32_init(unsigned int a1, uint64_t a2, int a3, int a4)
{
  uint64_t v10 = 0;
  v5[0] = a1;
  v5[1] = a2;
  int v6 = a3;
  int v7 = a4;
  uint64_t v8 = 0;
  long long v9 = 0uLL;
  return data_map32_init_with_ctx((uint64_t)v5);
}

uint64_t data_map32_init_with_ctx(uint64_t a1)
{
  uint64_t v117 = *MEMORY[0x1E4F143B8];
  int v2 = *(_DWORD *)a1;
  int v3 = *(const char **)(a1 + 8);
  int v5 = *(_DWORD *)(a1 + 16);
  unsigned int v4 = *(_DWORD *)(a1 + 20);
  int v6 = malloc_type_calloc(1uLL, 0x5B8uLL, 0x10B004052B42AF2uLL);
  uint64_t v7 = (uint64_t)v6;
  int v8 = *(_DWORD *)(a1 + 20) & 0x100;
  v6[54] = 842150450;
  *((void *)v6 + 177) = *(void *)(a1 + 24);
  *((void *)v6 + 176) = *(void *)(a1 + 32);
  *((void *)v6 + 178) = *(void *)(a1 + 40);
  v6[358] = *(_DWORD *)(a1 + 48);
  *((unsigned char *)v6 + 1453) = (v4 & 8) != 0;
  if ((v4 & 8) == 0) {
    _db_rwlock_init((uint64_t)v6);
  }
  bzero(v116, 0x400uLL);
  *(void *)(v7 + 1248) = -1;
  *(void *)(v7 + 1288) = 0;
  *(void *)(v7 + 1312) = -1;
  *(void *)(v7 + 1344) = -1;
  *(void *)(v7 + 1376) = -1;
  *(_DWORD *)(v7 + 1436) = 0;
  *(unsigned char *)(v7 + 1454) = BYTE1(v8);
  if (!v3 || (size_t v9 = strlen(v3), v2 == -1) || !v9 || v9 >= 0xF1)
  {
    int v23 = *__error();
    uint64_t v24 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
      data_map32_init_with_ctx_cold_1();
    }
    goto LABEL_26;
  }
  int v98 = v5;
  uint64_t v99 = v7 + 1288;
  __strlcpy_chk();
  bzero(__str, 0x400uLL);
  snprintf(__str, 0x400uLL, "tmp.%s.rehash", (const char *)(v7 + 220));
  memset(&v106, 0, sizeof(v106));
  int v97 = fstatat(*(_DWORD *)a1, __str, &v106, 0);
  if ((v4 & 2) != 0) {
    int v10 = 0;
  }
  else {
    int v10 = ((v4 & 1) << 10) | 0x20000202;
  }
  if ((v4 & 3) != 2)
  {
    if (v8) {
      unsigned __int8 v11 = 3;
    }
    else {
      unsigned __int8 v11 = 0;
    }
LABEL_33:
    snprintf(v116, 0x400uLL, "%s.header", v3);
    uint64_t v26 = fd_create_protected(v2, v116, v10, 3u);
    *(void *)(v7 + 1264) = v26;
    *(_DWORD *)(v7 + 1280) = fd_lseek(v26, 0, 2);
    snprintf(v116, 0x400uLL, "%s.data", v3);
    long long v27 = fd_create_protected(v2, v116, v10, v11);
    *(void *)(v7 + 1296) = v27;
    if ((v4 & 3) == 0)
    {
      memset(&v114, 0, sizeof(v114));
      if (!fd_stat((uint64_t)v27, &v114))
      {
        blkcnt_t v28 = v114.st_blocks << 9;
        if (v114.st_blocks << 9 > v114.st_size + 0x400000)
        {
          bzero(&v106, 0x400uLL);
          int v96 = *__error();
          log = _SILogForLogForCategory(0);
          if (os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134218498;
            blkcnt_t v101 = v28;
            __int16 v102 = 2048;
            off_t st_size = v114.st_size;
            __int16 v104 = 2080;
            v105 = v116;
            _os_log_impl(&dword_1BDAD0000, log, OS_LOG_TYPE_DEFAULT, "found allocated size %lld for %lld %s", buf, 0x20u);
          }
          *__error() = v96;
          snprintf((char *)&v106, 0x400uLL, "tmp.%s.data.1", v3);
          v29 = (atomic_uint *)fd_create_protected(v2, (const char *)&v106, 1538, v11);
          if (!fd_copyfile(*(void *)(v7 + 1296), (uint64_t)v29, 0))
          {
            snprintf((char *)&v106, 0x400uLL, "tmp.%s.data.2", v3);
            if (!fd_rename(*(void *)(v7 + 1296), (const char *)&v106)
              && !fd_rename((uint64_t)v29, v116))
            {
              fd_unlink(*(void *)(v7 + 1296));
              fd_release(*(atomic_uint **)(v7 + 1296));
              *(void *)(v7 + 1296) = v29;
              v29 = 0;
            }
          }
          fd_unlink((uint64_t)v29);
          fd_release(v29);
        }
      }
      long long v27 = *(void **)(v7 + 1296);
    }
    *(_DWORD *)(v7 + 1308) = fd_lseek(v27, 0, 2);
    snprintf(v116, 0x400uLL, "%s.offsets", v3);
    v30 = fd_create_protected(v2, v116, v10, 3u);
    *(void *)(v7 + 1328) = v30;
    *(_DWORD *)(v7 + 1340) = fd_lseek(v30, 0, 2);
    snprintf(v116, 0x400uLL, "%s.buckets", v3);
    v31 = fd_create_protected(v2, v116, 514, 3u);
    *(void *)(v7 + 1360) = v31;
    *(_DWORD *)(v7 + 1368) = fd_lseek(v31, 0, 2);
    if (v4)
    {
      if (fd_truncate(*(void *)(v7 + 1264), 56) == -1)
      {
        int v23 = *__error();
        v48 = _SILogForLogForCategory(0);
        if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR)) {
          data_map32_init_with_ctx_cold_16();
        }
        goto LABEL_26;
      }
      v33 = malloc_type_calloc(1uLL, 0x38uLL, 0x100004021716A34uLL);
      *(void *)(v7 + 1288) = v33;
      *(_DWORD *)(v7 + 1280) = 56;
      *(void *)v33 = 0x446174615000;
      v33[2] = 13;
      v33[3] = v98;
      *((void *)v33 + 2) = 0;
      v34 = (uint64_t *)MEMORY[0x1E4F14B00];
      if (fd_truncate(*(void *)(v7 + 1296), *MEMORY[0x1E4F14B00]) == -1)
      {
        int v23 = *__error();
        v55 = _SILogForLogForCategory(0);
        if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR)) {
          data_map32_init_with_ctx_cold_17();
        }
        goto LABEL_26;
      }
      uint64_t v35 = fd_mmap(*(void *)(v7 + 1296));
      *(void *)(v7 + 1312) = v35;
      if (v35 == -1)
      {
        int v23 = *__error();
        v56 = _SILogForLogForCategory(0);
        if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR)) {
          data_map32_init_with_ctx_cold_18();
        }
        goto LABEL_26;
      }
      *(_DWORD *)(v7 + 1304) = 0x100000;
      uint64_t v36 = *v34;
      *(_DWORD *)(v7 + 1308) = *v34;
      if (fd_truncate(*(void *)(v7 + 1328), v36 & 0xFFFFFFFFFFFFFFFCLL) == -1)
      {
        int v23 = *__error();
        v70 = _SILogForLogForCategory(0);
        if (os_log_type_enabled(v70, OS_LOG_TYPE_ERROR)) {
          data_map32_init_with_ctx_cold_19();
        }
        goto LABEL_26;
      }
      uint64_t v37 = fd_mmap(*(void *)(v7 + 1328));
      *(void *)(v7 + 1344) = v37;
      if (v37 == -1)
      {
        int v23 = *__error();
        v71 = _SILogForLogForCategory(0);
        if (os_log_type_enabled(v71, OS_LOG_TYPE_ERROR)) {
          data_map32_init_with_ctx_cold_20();
        }
        goto LABEL_26;
      }
      *(_DWORD *)(v7 + 1336) = 0x100000;
      uint64_t v38 = *v34;
      *(_DWORD *)(v7 + 1340) = *v34 & 0xFFFFFFFC;
      *(_DWORD *)(v7 + 1352) = v38 >> 2;
      int v39 = v38 & 0xFFFFFFFC;
      if (fd_truncate(*(void *)(v7 + 1360), v38 & 0xFFFFFFFFFFFFFFFCLL) == -1)
      {
        int v23 = *__error();
        v81 = _SILogForLogForCategory(0);
        if (os_log_type_enabled(v81, OS_LOG_TYPE_ERROR)) {
          data_map32_init_with_ctx_cold_21();
        }
        goto LABEL_26;
      }
      uint64_t v40 = fd_mmap(*(void *)(v7 + 1360));
      *(void *)(v7 + 1376) = v40;
      if (v40 == -1)
      {
        int v23 = *__error();
        v83 = _SILogForLogForCategory(0);
        if (os_log_type_enabled(v83, OS_LOG_TYPE_ERROR)) {
          data_map32_init_with_ctx_cold_22();
        }
        goto LABEL_26;
      }
      *(_DWORD *)(v7 + 1372) = 0x100000;
      *(_DWORD *)(v7 + 1368) = v39;
      unint64_t v41 = (unint64_t)*v34 >> 2;
      *(_DWORD *)(*(void *)(v7 + 1288) + 24) = v41;
      *(_DWORD *)(v7 + 1384) = v41;
      int v42 = data_entry_store(*(void *)(v7 + 1312), 0, dword_1E63491D8);
      uint64_t v43 = *(void *)(v7 + 1288);
      *(_DWORD *)(v43 + 20) = v42;
      *(_DWORD *)(v7 + 1320) = v42;
      **(_DWORD **)(v7 + 1344) = 0;
      *(_DWORD *)(v43 + 28) = 1;
      v44 = (_DWORD *)(v7 + 1388);
      int v22 = v98;
    }
    else
    {
      if (*(_DWORD *)(v7 + 1280) <= 0x37u)
      {
        int v23 = *__error();
        v32 = _SILogForLogForCategory(0);
        if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR)) {
          data_map32_init_with_ctx_cold_2();
        }
        goto LABEL_26;
      }
      *(void *)uint64_t v99 = malloc_type_calloc(1uLL, 0x38uLL, 0x100004021716A34uLL);
      if ((v4 & 0x80) != 0)
      {
        int v45 = (v4 >> 2) & 1;
        sibling_with_suffix_protected = fd_create_sibling_with_suffix_protected(*(void *)(v7 + 1264), ".shadow", 0, 3u);
        if (sibling_with_suffix_protected)
        {
          v47 = sibling_with_suffix_protected;
          if (!fd_copyfile((uint64_t)sibling_with_suffix_protected, *(void *)(v7 + 1264), 0)) {
            int v45 = 0;
          }
          fd_release(v47);
        }
      }
      else
      {
        int v45 = v4 & 4;
      }
      if (fd_pread(*(_DWORD **)(v7 + 1264), *(void **)(v7 + 1288), 0x38uLL, 0) != 56)
      {
        int v23 = *__error();
        v54 = _SILogForLogForCategory(0);
        if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR)) {
          data_map32_init_with_ctx_cold_15();
        }
        goto LABEL_26;
      }
      uint64_t v49 = *(void *)v99;
      unsigned int v50 = *(_DWORD *)(*(void *)v99 + 8);
      if (v50 == 1)
      {
        if (fd_truncate(*(void *)(v7 + 1264), 56) == -1)
        {
          int v23 = *__error();
          v72 = _SILogForLogForCategory(0);
          if (os_log_type_enabled(v72, OS_LOG_TYPE_ERROR)) {
            data_map32_init_with_ctx_cold_3();
          }
          goto LABEL_26;
        }
        int v51 = 0;
        int v52 = 0;
        *(_DWORD *)(v7 + 1280) = 56;
        uint64_t v49 = *(void *)v99;
        uint64_t v53 = 0;
        *(void *)(v49 + 44) = 0;
        *(_DWORD *)(v49 + 52) = 0;
        unsigned int v50 = 9;
        *(_DWORD *)(v49 + 8) = 9;
        *(_DWORD *)(v49 + 24) = 0;
      }
      else
      {
        int v52 = *(_DWORD *)(v49 + 24);
        uint64_t v53 = *(void *)(v49 + 44);
        int v51 = *(_DWORD *)(v49 + 52);
      }
      unsigned int v57 = *(_DWORD *)(v49 + 28);
      *(_DWORD *)(v7 + 1388) = v57;
      unsigned int v58 = *(_DWORD *)(v49 + 20);
      *(_DWORD *)(v7 + 1320) = v58;
      *(_DWORD *)(v7 + 1352) = *(_DWORD *)(v7 + 1340) >> 2;
      *(_DWORD *)(v7 + 1384) = v52;
      *(void *)(v7 + 1392) = v53;
      *(_DWORD *)(v7 + 1400) = v51;
      *(unsigned char *)(v7 + 1452) = v50 < 9;
      if (v45)
      {
        unsigned int v59 = *(_DWORD *)(v49 + 32);
        if (v58 < v59) {
          goto LABEL_27;
        }
        if (v59 != v58)
        {
          if ((v4 & 2) == 0) {
            *(_DWORD *)(v49 + 20) = v59;
          }
          *(_DWORD *)(v7 + 1320) = v59;
        }
        unsigned int v60 = *(_DWORD *)(v49 + 40);
        if (v57 < v60) {
          goto LABEL_27;
        }
        if (v57 != v60)
        {
          if ((v4 & 2) == 0)
          {
            *(_DWORD *)(v49 + 24) = 0;
            *(_DWORD *)(v49 + 28) = v60;
            *(_DWORD *)(v49 + 20) = v59;
          }
          *(_DWORD *)(v7 + 1388) = v60;
          *(_DWORD *)(v7 + 1384) = 0;
        }
      }
      v61 = (void *)MEMORY[0x1E4F14B00];
      if (((*MEMORY[0x1E4F14B00] + (unint64_t)*(unsigned int *)(v7 + 1308) - 1) & -*MEMORY[0x1E4F14B00]) <= 0x100000) {
        LODWORD(v62) = 0x100000;
      }
      else {
        uint64_t v62 = (*MEMORY[0x1E4F14B00] + *(unsigned int *)(v7 + 1308) - 1) & -*MEMORY[0x1E4F14B00];
      }
      uint64_t v63 = fd_mmap(*(void *)(v7 + 1296));
      *(void *)(v7 + 1312) = v63;
      if (v63 == -1)
      {
        int v23 = *__error();
        v73 = _SILogForLogForCategory(0);
        if (os_log_type_enabled(v73, OS_LOG_TYPE_ERROR)) {
          data_map32_init_with_ctx_cold_4();
        }
        goto LABEL_26;
      }
      *(_DWORD *)(v7 + 1304) = v62;
      if (((*v61 + (unint64_t)*(unsigned int *)(v7 + 1340) - 1) & -*v61) <= 0x100000) {
        LODWORD(v64) = 0x100000;
      }
      else {
        uint64_t v64 = (*v61 + *(unsigned int *)(v7 + 1340) - 1) & -*v61;
      }
      uint64_t v65 = fd_mmap(*(void *)(v7 + 1328));
      *(void *)(v7 + 1344) = v65;
      if (v65 == -1)
      {
        int v23 = *__error();
        v82 = _SILogForLogForCategory(0);
        if (os_log_type_enabled(v82, OS_LOG_TYPE_ERROR)) {
          data_map32_init_with_ctx_cold_5();
        }
        goto LABEL_26;
      }
      *(_DWORD *)(v7 + 1336) = v64;
      if (((*v61 + (unint64_t)*(unsigned int *)(v7 + 1368) - 1) & -*v61) <= 0x100000) {
        LODWORD(v66) = 0x100000;
      }
      else {
        uint64_t v66 = (*v61 + *(unsigned int *)(v7 + 1368) - 1) & -*v61;
      }
      uint64_t v67 = fd_mmap(*(void *)(v7 + 1360));
      *(void *)(v7 + 1376) = v67;
      if (v67 == -1)
      {
        int v23 = *__error();
        v85 = _SILogForLogForCategory(0);
        if (os_log_type_enabled(v85, OS_LOG_TYPE_ERROR)) {
          data_map32_init_with_ctx_cold_6();
        }
        goto LABEL_26;
      }
      *(_DWORD *)(v7 + 1372) = v66;
      uint64_t v68 = *(void *)(v7 + 1288);
      int v22 = v98;
      if (*(_DWORD *)(v68 + 28)) {
        goto LABEL_101;
      }
      v44 = (_DWORD *)(v7 + 1388);
      *(_DWORD *)(v68 + 28) = 1;
    }
    _DWORD *v44 = 1;
LABEL_101:
    if ((v4 & 0x10) != 0)
    {
      data_map32_prepare_mappings(*(void *)(v7 + 1264));
      data_map32_prepare_mappings(*(void *)(v7 + 1360));
      data_map32_prepare_mappings(*(void *)(v7 + 1328));
      data_map32_prepare_mappings(*(void *)(v7 + 1296));
    }
    char v21 = 0;
    goto LABEL_104;
  }
  snprintf(v116, 0x400uLL, "%s.map", v3);
  if (v8) {
    unsigned __int8 v11 = 3;
  }
  else {
    unsigned __int8 v11 = 0;
  }
  uint64_t v12 = fd_create_protected(v2, v116, v10, v11);
  *(void *)(v7 + 1264) = v12;
  unsigned int v13 = fd_lseek(v12, 0, 2);
  *(_DWORD *)(v7 + 1280) = v13;
  if (v13 == -1 || v13 < 0x4DuLL)
  {
    fd_release(*(atomic_uint **)(v7 + 1264));
    *(_DWORD *)(v7 + 1280) = 0;
    goto LABEL_33;
  }
  uint64_t v14 = fd_mmap(*(void *)(v7 + 1264));
  *(void *)(v7 + 1248) = v14;
  if (v14 == -1) {
    goto LABEL_27;
  }
  unsigned int v15 = *(_DWORD *)(v7 + 1280);
  *(_DWORD *)(v7 + 1256) = v15;
  if (*(_DWORD *)(v14 + 60) != v15) {
    goto LABEL_27;
  }
  *(void *)uint64_t v99 = v14;
  uint64_t v16 = *(unsigned int *)(v14 + 64);
  if (v16 >= v15) {
    goto LABEL_27;
  }
  uint64_t v17 = *(unsigned int *)(v14 + 68);
  if (v17 >= v15) {
    goto LABEL_27;
  }
  uint64_t v18 = *(unsigned int *)(v14 + 72);
  if (v18 >= v15) {
    goto LABEL_27;
  }
  *(void *)(v7 + 1376) = v14 + v16;
  *(void *)&long long v19 = *(void *)(v14 + 24);
  *(void *)(v7 + 1344) = v14 + v17;
  *(void *)(v7 + 1312) = v14 + v18;
  *(_DWORD *)(v7 + 1320) = *(_DWORD *)(v14 + 20);
  unsigned int v20 = (v18 - v17) >> 2;
  if (*(_DWORD *)(v7 + 1352) > DWORD1(v19)) {
    unsigned int v20 = DWORD1(v19);
  }
  *(_DWORD *)(v7 + 1352) = v20;
  *((void *)&v19 + 1) = *(void *)(v14 + 44);
  *(_OWORD *)(v7 + 1384) = v19;
  *(_DWORD *)(v7 + 1400) = *(_DWORD *)(v14 + 52);
  *(unsigned char *)(v7 + 1452) = *(_DWORD *)(v14 + 8) < 9u;
  char v21 = 1;
  int v22 = v5;
LABEL_104:
  if (*(_DWORD *)(v7 + 1352) < *(_DWORD *)(v7 + 1388))
  {
    int v23 = *__error();
    v69 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v69, OS_LOG_TYPE_ERROR)) {
      data_map32_init_with_ctx_cold_7((unsigned int *)(v7 + 1352), (int *)(v7 + 1388), v69);
    }
LABEL_26:
    *__error() = v23;
LABEL_27:
    data_map32_destroy(v7);
    return 0;
  }
  v74 = *(_DWORD **)v99;
  if (**(void **)v99 != 0x446174615000)
  {
    int v23 = *__error();
    v84 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v84, OS_LOG_TYPE_ERROR)) {
      data_map32_init_with_ctx_cold_14();
    }
    goto LABEL_26;
  }
  int v75 = v74[2];
  if ((v75 - 8) >= 6 && v75 != 1)
  {
    int v23 = *__error();
    v87 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v87, OS_LOG_TYPE_ERROR)) {
      data_map32_init_with_ctx_cold_8();
    }
    goto LABEL_26;
  }
  if (v74[3] != v22)
  {
    int v23 = *__error();
    v86 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v86, OS_LOG_TYPE_ERROR)) {
      data_map32_init_with_ctx_cold_13();
    }
    goto LABEL_26;
  }
  *(_DWORD *)(v7 + 1244) = v22;
  if ((v21 & 1) == 0)
  {
    if (*(_DWORD *)(v7 + 1280) <= 0x37u)
    {
      int v23 = *__error();
      v88 = _SILogForLogForCategory(0);
      if (os_log_type_enabled(v88, OS_LOG_TYPE_ERROR)) {
        data_map32_init_with_ctx_cold_9();
      }
      goto LABEL_26;
    }
    if (*(_DWORD *)(v7 + 1308) < *(_DWORD *)(v7 + 1320))
    {
      int v23 = *__error();
      v89 = _SILogForLogForCategory(0);
      if (os_log_type_enabled(v89, OS_LOG_TYPE_ERROR)) {
        data_map32_init_with_ctx_cold_10(v7 + 1308, (_DWORD *)(v7 + 1320), v89);
      }
      goto LABEL_26;
    }
    if (!v97
      || (v4 & 0x80) != 0
      || !v74[4]
      || (uint64_t v90 = *(unsigned int *)(v7 + 1384), !v90)
      || (unint64_t v91 = *(unsigned int *)(v7 + 1368), v92 = 4 * v90, v92 > v91))
    {
      if ((_data_map32_rehash(v7) & 1) == 0)
      {
        int v23 = *__error();
        v94 = _SILogForLogForCategory(0);
        if (os_log_type_enabled(v94, OS_LOG_TYPE_ERROR)) {
          data_map32_init_with_ctx_cold_12();
        }
        goto LABEL_26;
      }
      unlinkat(*(_DWORD *)a1, __str, 2048);
      unint64_t v91 = *(unsigned int *)(v7 + 1368);
      unint64_t v92 = 4 * *(unsigned int *)(v7 + 1384);
    }
    if (v92 > v91)
    {
      int v23 = *__error();
      v93 = _SILogForLogForCategory(0);
      if (os_log_type_enabled(v93, OS_LOG_TYPE_ERROR)) {
        data_map32_init_with_ctx_cold_11();
      }
      goto LABEL_26;
    }
  }
  long long v112 = 0u;
  long long v113 = 0u;
  long long v110 = 0u;
  long long v111 = 0u;
  long long v108 = 0u;
  long long v109 = 0u;
  long long v107 = 0u;
  memset(&v106, 0, sizeof(v106));
  int v76 = *__error();
  v77 = _SILogForLogForCategory(7);
  os_log_type_t v78 = 2 * (dword_1EA0DBB6C < 4);
  if (os_log_type_enabled(v77, v78))
  {
    v79 = fd_name(*(void *)(v7 + 1264), (char *)&v106, 0x100uLL);
    int v80 = *(_DWORD *)(v7 + 1388) - 1;
    v114.st_dev = 136315394;
    *(void *)&v114.st_mode = v79;
    WORD2(v114.st_ino) = 1024;
    *(_DWORD *)((char *)&v114.st_ino + 6) = v80;
    _os_log_impl(&dword_1BDAD0000, v77, v78, "Opened map %s with counts: %d", (uint8_t *)&v114, 0x12u);
  }
  *__error() = v76;
  return v7;
}

uint64_t data_entry_store(uint64_t a1, unsigned int a2, unsigned int *a3)
{
  uint64_t v4 = a2;
  unsigned int v5 = *a3;
  unsigned int v6 = *a3 >> 28;
  if (v6)
  {
    int v8 = (unsigned char *)(a1 + a2);
    *int v8 = v5 | 0x80;
    v8[1] = (v5 >> 7) | 0x80;
    v8[2] = (v5 >> 14) | 0x80;
    uint64_t v4 = a2 + 4;
    v8[3] = (v5 >> 21) | 0x80;
  }
  else if ((v5 & 0xFE00000) != 0)
  {
    uint64_t v7 = (unsigned char *)(a1 + a2);
    *uint64_t v7 = v5 | 0x80;
    v7[1] = (v5 >> 7) | 0x80;
    uint64_t v4 = a2 + 3;
    v7[2] = (v5 >> 14) | 0x80;
    unsigned int v6 = (v5 & 0xFE00000) >> 21;
  }
  else if ((v5 & 0x1FC000) != 0)
  {
    unsigned __int8 v11 = (unsigned char *)(a1 + a2);
    unsigned char *v11 = v5 | 0x80;
    uint64_t v4 = a2 + 2;
    v11[1] = (v5 >> 7) | 0x80;
    unsigned int v6 = (v5 & 0x1FC000) >> 14;
  }
  else if ((v5 & 0x3F80) != 0)
  {
    *(unsigned char *)(a1 + a2) = v5 | 0x80;
    uint64_t v4 = a2 + 1;
    unsigned int v6 = (unsigned __int16)(v5 & 0x3F80) >> 7;
  }
  else
  {
    unsigned int v6 = *a3;
  }
  *(unsigned char *)(a1 + v4) = v6;
  int v9 = v4 + 1;
  memcpy((void *)(a1 + (v4 + 1)), *((const void **)a3 + 1), *a3);
  return *a3 + v9;
}

uint64_t _data_map32_rehash(uint64_t a1)
{
  uint64_t v90 = *MEMORY[0x1E4F143B8];
  *(_DWORD *)(a1 + 1396) = 0;
  int v2 = *(_DWORD *)(a1 + 1388) - *(_DWORD *)(a1 + 1392);
  int v3 = *__error();
  uint64_t v4 = _SILogForLogForCategory(0);
  os_log_type_t v5 = 2 * (gSILogLevels[0] < 4);
  if (os_log_type_enabled(v4, v5))
  {
    int v6 = *(_DWORD *)(a1 + 1388);
    int v7 = *(_DWORD *)(a1 + 1392);
    int v8 = *(_DWORD *)(a1 + 1384);
    *(_DWORD *)buf = 134219008;
    *(void *)&uint8_t buf[4] = a1;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v6;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = v7;
    *(_WORD *)&buf[24] = 1024;
    *(_DWORD *)&buf[26] = v2;
    *(_WORD *)&buf[30] = 1024;
    LODWORD(v65) = v8;
    _os_log_impl(&dword_1BDAD0000, v4, v5, "rehash %p max id: %d deletes: %d count: %d hash_size: %d", buf, 0x24u);
  }
  *__error() = v3;
  fd_msync(*(void **)(a1 + 1376), 4 * *(unsigned int *)(a1 + 1384), 4, 1);
  if (fd_truncate(*(void *)(a1 + 1360), 0) == -1) {
    goto LABEL_33;
  }
  unsigned int v9 = 2 * v2;
  if (2 * v2 <= (*MEMORY[0x1E4F14B00] >> 2)) {
    unsigned int v9 = *MEMORY[0x1E4F14B00] >> 2;
  }
  *(_DWORD *)(a1 + 1384) = v9;
  unint64_t v10 = 4 * v9;
  if (fd_truncate(*(void *)(a1 + 1360), v10) == -1) {
    goto LABEL_33;
  }
  if (!*(unsigned char *)(a1 + 1450))
  {
    _data_map32_dirty(a1);
    *(unsigned char *)(a1 + 1450) = 1;
  }
  *(_DWORD *)(a1 + 1368) = v10;
  size_t v14 = *(unsigned int *)(a1 + 1372);
  if (v10 <= v14) {
    goto LABEL_14;
  }
  unint64_t v15 = v10 & 0xFFFFFFFC;
  unint64_t v16 = *(unsigned int *)(a1 + 1372);
  do
  {
    unint64_t v17 = v16;
    v16 *= 2;
  }
  while (v17 < v15);
  munmap(*(void **)(a1 + 1376), v14);
  *(_DWORD *)(a1 + 1372) = 0;
  *(void *)(a1 + 1376) = -1;
  uint64_t v18 = fd_mmap(*(void *)(a1 + 1360));
  *(void *)(a1 + 1376) = v18;
  if (v18 == -1)
  {
LABEL_33:
    int v42 = *__error();
    uint64_t v43 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR)) {
      _data_map32_rehash_cold_1();
    }
    v44 = __error();
    uint64_t result = 0;
    int *v44 = v42;
    return result;
  }
  *(_DWORD *)(a1 + 1372) = v17;
LABEL_14:
  unint64_t v19 = *(unsigned int *)(a1 + 1388);
  if (v19 >= 2)
  {
    for (unint64_t i = 1; i < v19; ++i)
    {
      uint64_t v21 = *(void *)(a1 + 1344);
      if (!v21) {
        goto LABEL_33;
      }
      uint64_t v22 = *(unsigned int *)(v21 + 4 * i);
      if (v22 != 1)
      {
        uint64_t v47 = 0;
        uint64_t v48 = 0;
        char v49 = 0;
        uint64_t v23 = *(unsigned int *)(a1 + 1320);
        if (v23 <= v22)
        {
          long long v77 = 0u;
          long long v78 = 0u;
          long long v75 = 0u;
          long long v76 = 0u;
          long long v73 = 0u;
          long long v74 = 0u;
          long long v71 = 0u;
          long long v72 = 0u;
          long long v69 = 0u;
          long long v70 = 0u;
          long long v67 = 0u;
          long long v68 = 0u;
          long long v65 = 0u;
          long long v66 = 0u;
          memset(buf, 0, sizeof(buf));
          int v31 = *__error();
          v32 = _SILogForLogForCategory(0);
          if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
          {
            uint64_t v33 = *(unsigned int *)(a1 + 1320);
            v34 = fd_name(*(void *)(a1 + 1264), (char *)buf, 0x100uLL);
            *(_DWORD *)__s = 136316418;
            *(void *)&__s[4] = "_data_map32_get_data_entry";
            *(_WORD *)&__s[12] = 1024;
            *(_DWORD *)&__s[14] = 448;
            *(_WORD *)&__s[18] = 2048;
            *(void *)&__s[20] = v22;
            *(_WORD *)&__s[28] = 2048;
            *(void *)&__s[30] = v33;
            *(_WORD *)&__s[38] = 2048;
            *(void *)&__s[40] = a1;
            LOWORD(v80) = 2080;
            *(void *)((char *)&v80 + 2) = v34;
            uint64_t v35 = "%s:%d: invalid data offset 0x%lx 0x%lx %p %s";
            uint64_t v36 = (uint8_t *)__s;
            uint64_t v37 = v32;
            uint32_t v38 = 58;
            goto LABEL_37;
          }
LABEL_32:
          *__error() = v31;
          goto LABEL_33;
        }
        data_entry_restore_32(*(void *)(a1 + 1312), v22, v23, (uint64_t)&v47, &v49, v11, v12, v13);
        if (v49)
        {
          uint64_t v39 = 0;
          uint64_t v89 = 0;
          long long v87 = 0u;
          long long v88 = 0u;
          long long v85 = 0u;
          long long v86 = 0u;
          long long v83 = 0u;
          long long v84 = 0u;
          long long v81 = 0u;
          long long v82 = 0u;
          long long v80 = 0u;
          memset(__s, 0, sizeof(__s));
          do
          {
            if (v22 + v39 >= (unint64_t)*(unsigned int *)(a1 + 1320)) {
              break;
            }
            size_t v40 = strlen(__s);
            sprintf(&__s[v40], "%d ", *(unsigned __int8 *)(*(void *)(a1 + 1312) + v22 + v39++));
          }
          while (v39 != 5);
          long long v77 = 0u;
          long long v78 = 0u;
          long long v75 = 0u;
          long long v76 = 0u;
          long long v73 = 0u;
          long long v74 = 0u;
          long long v71 = 0u;
          long long v72 = 0u;
          long long v69 = 0u;
          long long v70 = 0u;
          long long v67 = 0u;
          long long v68 = 0u;
          long long v65 = 0u;
          long long v66 = 0u;
          memset(buf, 0, sizeof(buf));
          int v31 = *__error();
          unint64_t v41 = _SILogForLogForCategory(0);
          if (!os_log_type_enabled(v41, OS_LOG_TYPE_ERROR)) {
            goto LABEL_32;
          }
          int v45 = fd_name(*(void *)(a1 + 1264), (char *)buf, 0x100uLL);
          uint64_t v46 = *(unsigned int *)(a1 + 1320);
          *(_DWORD *)unsigned int v50 = 136316674;
          int v51 = "_data_map32_get_data_entry";
          __int16 v52 = 1024;
          int v53 = 444;
          __int16 v54 = 2080;
          v55 = v45;
          __int16 v56 = 2048;
          uint64_t v57 = v22;
          __int16 v58 = 2048;
          uint64_t v59 = v46;
          __int16 v60 = 2048;
          uint64_t v61 = v47;
          __int16 v62 = 2080;
          uint64_t v63 = __s;
          uint64_t v35 = "%s:%d: data_entry_restore_32 failure: %s off: 0x%lx end: 0x%lx sz: 0x%lx sz bytes: %s";
          uint64_t v36 = v50;
          uint64_t v37 = v41;
          uint32_t v38 = 68;
LABEL_37:
          _os_log_error_impl(&dword_1BDAD0000, v37, OS_LOG_TYPE_ERROR, v35, v36, v38);
          goto LABEL_32;
        }
        unsigned int v24 = *(_DWORD *)(a1 + 1244);
        if (v47 < v24) {
          goto LABEL_33;
        }
        unsigned int v25 = data_entry_hash(v47, v48, v24, *(unsigned __int8 *)(a1 + 1452));
        bucket_entry = (_DWORD *)_data_map32_get_bucket_entry(a1, v25, i, 0, 0, v26, v27, v28);
        if (!bucket_entry || *bucket_entry) {
          goto LABEL_33;
        }
        _DWORD *bucket_entry = i;
        unint64_t v19 = *(unsigned int *)(a1 + 1388);
      }
    }
  }
  return 1;
}

void data_map32_destroy(uint64_t a1)
{
  if (a1)
  {
    int v2 = *(unsigned int **)(a1 + 1248);
    if ((unint64_t)v2 + 1 >= 2)
    {
      munmap(v2, v2[15]);
      *(void *)(a1 + 1248) = -1;
      fd_release(*(atomic_uint **)(a1 + 1264));
      *(void *)(a1 + 1264) = 0;
    }
    else
    {
      uint64_t v3 = *(void *)(a1 + 1288);
      if (v3)
      {
        if (!*(_DWORD *)(v3 + 16))
        {
          if (*(unsigned char *)(a1 + 1450))
          {
            fd_msync(*(void **)(a1 + 1376), 4 * *(unsigned int *)(a1 + 1384), 4, 1);
            fd_unlink(*(void *)(a1 + 1360));
            munmap(*(void **)(a1 + 1376), *(unsigned int *)(a1 + 1372));
            *(void *)(a1 + 1376) = -1;
          }
          if (*(unsigned char *)(a1 + 1449))
          {
            fd_msync(*(void **)(a1 + 1312), *(unsigned int *)(a1 + 1320), 4, 1);
            munmap(*(void **)(a1 + 1312), *(unsigned int *)(a1 + 1304));
            *(void *)(a1 + 1312) = -1;
            fd_truncate(*(void *)(a1 + 1296), *(unsigned int *)(*(void *)(a1 + 1288) + 20));
          }
          if (*(unsigned char *)(a1 + 1451))
          {
            fd_msync(*(void **)(a1 + 1344), 4 * *(unsigned int *)(a1 + 1388), 4, 1);
            munmap(*(void **)(a1 + 1344), *(unsigned int *)(a1 + 1336));
            *(void *)(a1 + 1344) = -1;
            fd_truncate(*(void *)(a1 + 1328), 4 * *(unsigned int *)(a1 + 1388));
          }
        }
        uint64_t v4 = *(void **)(a1 + 1288);
        if (v4)
        {
          free(v4);
          *(void *)(a1 + 1288) = 0;
        }
      }
      fd_release(*(atomic_uint **)(a1 + 1264));
      *(void *)(a1 + 1264) = 0;
      os_log_type_t v5 = *(void **)(a1 + 1312);
      if (v5 != (void *)-1)
      {
        munmap(v5, *(unsigned int *)(a1 + 1304));
        *(void *)(a1 + 1312) = -1;
        *(_DWORD *)(a1 + 1304) = 0;
      }
      fd_release(*(atomic_uint **)(a1 + 1296));
      *(void *)(a1 + 1296) = 0;
      int v6 = *(void **)(a1 + 1344);
      if (v6 != (void *)-1)
      {
        munmap(v6, *(unsigned int *)(a1 + 1336));
        *(void *)(a1 + 1344) = -1;
        *(_DWORD *)(a1 + 1336) = 0;
      }
      fd_release(*(atomic_uint **)(a1 + 1328));
      *(void *)(a1 + 1328) = 0;
      int v7 = *(void **)(a1 + 1376);
      if (v7 != (void *)-1)
      {
        munmap(v7, *(unsigned int *)(a1 + 1372));
        *(void *)(a1 + 1376) = -1;
        *(_DWORD *)(a1 + 1372) = 0;
      }
      fd_release(*(atomic_uint **)(a1 + 1360));
      *(void *)(a1 + 1360) = 0;
    }
    int v8 = *(atomic_uint **)(a1 + 1272);
    if (v8)
    {
      fd_release(v8);
      *(void *)(a1 + 1272) = 0;
    }
    unsigned int v9 = *(void **)(a1 + 1440);
    if (v9)
    {
      unint64_t v10 = (const void *)v9[2];
      if (v10) {
        CFRelease(v10);
      }
      free(v9);
      *(void *)(a1 + 1440) = 0;
    }
    if (!*(unsigned char *)(a1 + 1453)) {
      db_rwlock_destroy((pthread_mutex_t *)a1);
    }
    free((void *)a1);
  }
}

uint64_t data_map32_count(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 1388) - 1);
}

uint64_t data_map32_get_storage_fd(uint64_t a1)
{
  return *(void *)(a1 + 1296);
}

BOOL _data_map32_needs_sync(uint64_t a1)
{
  return *(_DWORD *)(*(void *)(a1 + 1288) + 16) == 0;
}

uint64_t _data_map32_version(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(*(void *)(result + 1288) + 8);
  }
  return result;
}

BOOL _data_map32_version_is_current(BOOL result)
{
  if (result) {
    return *(_DWORD *)(*(void *)(result + 1288) + 8) > 0xAu;
  }
  return result;
}

uint64_t _data_map32_version_update(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 1288);
  if (*(_DWORD *)(v1 + 8) <= 0xAu)
  {
    uint64_t v2 = result;
    *(_DWORD *)(v1 + 8) = 12;
    fd_pwrite(*(void *)(result + 1264), v1, 0x38uLL, 0);
    uint64_t v3 = *(void **)(v2 + 1312);
    size_t v4 = *(unsigned int *)(v2 + 1320);
    return fd_msync(v3, v4, 16, 1);
  }
  return result;
}

uint64_t _data_map32_sync_data(uint64_t a1, int a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t result = *(unsigned int *)(a1 + 1456);
  if (!result)
  {
    uint64_t v4 = *(void *)(a1 + 1288);
    if (*(_DWORD *)(v4 + 16))
    {
      return 0;
    }
    else
    {
      if (*(unsigned char *)(a1 + 1449))
      {
        if (a2) {
          fd_msync((void *)((*(unsigned int *)(v4 + 32) + *(void *)(a1 + 1312)) & -*MEMORY[0x1E4F14B00]), (*(_DWORD *)(a1 + 1320) - *(_DWORD *)(v4 + 32)), 16, 1);
        }
        *(unsigned char *)(a1 + 1449) = 0;
      }
      if (*(unsigned char *)(a1 + 1451))
      {
        if (a2)
        {
          uint64_t v6 = *(unsigned int *)(*(void *)(a1 + 1288) + 40);
          fd_msync((void *)((*(void *)(a1 + 1344) + 4 * v6) & -*MEMORY[0x1E4F14B00]), 4 * (*(_DWORD *)(a1 + 1388) - v6), 16, 1);
        }
        *(unsigned char *)(a1 + 1451) = 0;
      }
      if (*(unsigned char *)(a1 + 1450))
      {
        if (a2) {
          fd_msync(*(void **)(a1 + 1376), 4 * *(unsigned int *)(a1 + 1384), 16, 1);
        }
        *(unsigned char *)(a1 + 1450) = 0;
      }
      uint64_t v7 = *(void *)(a1 + 1288);
      *(_DWORD *)(v7 + 20) = *(_DWORD *)(a1 + 1320);
      *(void *)(v7 + 24) = *(void *)(a1 + 1384);
      *(void *)(v7 + 44) = *(void *)(a1 + 1392);
      *(_DWORD *)(v7 + 52) = *(_DWORD *)(a1 + 1400);
      *(_DWORD *)(v7 + 16) = 0;
      fd_pwrite(*(void *)(a1 + 1264), v7, 0x38uLL, 0);
      memset(v20, 0, sizeof(v20));
      int v8 = *__error();
      unsigned int v9 = _SILogForLogForCategory(7);
      os_log_type_t v10 = 2 * (dword_1EA0DBB6C < 4);
      if (os_log_type_enabled(v9, v10))
      {
        uint64_t v11 = fd_name(*(void *)(a1 + 1264), (char *)v20, 0x100uLL);
        uint64_t v12 = "update";
        int v13 = *(_DWORD *)(a1 + 1388);
        int v14 = 136315650;
        unint64_t v15 = v11;
        if (a2) {
          uint64_t v12 = "sync";
        }
        __int16 v16 = 2080;
        unint64_t v17 = v12;
        __int16 v18 = 1024;
        int v19 = v13 - 1;
        _os_log_impl(&dword_1BDAD0000, v9, v10, "%s complete %s map with count: %d", (uint8_t *)&v14, 0x1Cu);
      }
      *__error() = v8;
      return *(unsigned int *)(a1 + 1456);
    }
  }
  return result;
}

uint64_t _data_map32_sync_header(uint64_t a1, int a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t result = *(unsigned int *)(a1 + 1456);
  if (!result)
  {
    uint64_t v5 = *(void *)(a1 + 1288);
    if (*(_DWORD *)(v5 + 16) == 1)
    {
      return 0;
    }
    else
    {
      uint64_t v6 = *(void *)(v5 + 20);
      *(_DWORD *)(v5 + 40) = *(_DWORD *)(v5 + 28);
      *(_DWORD *)(v5 + 20) = *(_DWORD *)(a1 + 1320);
      *(void *)&long long v7 = *(void *)(a1 + 1384);
      *((void *)&v7 + 1) = v6;
      *(_OWORD *)(v5 + 24) = v7;
      *(_DWORD *)(v5 + 16) = 0;
      fd_pwrite(*(void *)(a1 + 1264), v5, 0x38uLL, 0);
      if (a2) {
        fd_sync(*(void *)(a1 + 1264), 0, 1);
      }
      *(_DWORD *)(*(void *)(a1 + 1288) + 16) = 2;
      memset(v20, 0, sizeof(v20));
      int v8 = *__error();
      unsigned int v9 = _SILogForLogForCategory(7);
      os_log_type_t v10 = 2 * (dword_1EA0DBB6C < 4);
      if (os_log_type_enabled(v9, v10))
      {
        uint64_t v11 = fd_name(*(void *)(a1 + 1264), (char *)v20, 0x100uLL);
        uint64_t v12 = "update";
        int v13 = *(_DWORD *)(a1 + 1388);
        int v14 = 136315650;
        unint64_t v15 = v11;
        if (a2) {
          uint64_t v12 = "sync";
        }
        __int16 v16 = 2080;
        unint64_t v17 = v12;
        __int16 v18 = 1024;
        int v19 = v13 - 1;
        _os_log_impl(&dword_1BDAD0000, v9, v10, "%s complete %s header with count: %d", (uint8_t *)&v14, 0x1Cu);
      }
      *__error() = v8;
      return *(unsigned int *)(a1 + 1456);
    }
  }
  return result;
}

uint64_t data_map32_flush(uint64_t a1)
{
  if (_data_map32_rdlock(a1)) {
    return 0xFFFFFFFFLL;
  }
  if (*(_DWORD *)(*(void *)(a1 + 1288) + 16)) {
    uint64_t v2 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v2 = _data_map32_sync_data(a1, 1);
  }
  _data_map32_unlock(a1);
  return v2;
}

uint64_t data_map32_commit(uint64_t a1)
{
  return _data_map32_commit(a1, 1);
}

uint64_t data_map32_commit_sync(uint64_t a1)
{
  uint64_t result = *(unsigned int *)(a1 + 1456);
  if (!result)
  {
    uint64_t v3 = *(void *)(a1 + 1288);
    if (*(_DWORD *)(v3 + 16) == 1)
    {
      return 0;
    }
    else
    {
      *(_DWORD *)(v3 + 16) = 2;
      fd_pwrite(*(void *)(a1 + 1264), v3, 0x38uLL, 0);
      fd_sync(*(void *)(a1 + 1264), 0, 1);
      return *(unsigned int *)(a1 + 1456);
    }
  }
  return result;
}

uint64_t data_map32_shadow(uint64_t a1)
{
  uint64_t result = *(unsigned int *)(a1 + 1456);
  if (!result)
  {
    uint64_t v3 = *(void *)(a1 + 1288);
    if (*(_DWORD *)(v3 + 16) == 2)
    {
      *(_DWORD *)(v3 + 16) = 2;
      sibling_with_suffix_protected = *(_DWORD **)(a1 + 1272);
      if (!sibling_with_suffix_protected)
      {
        sibling_with_suffix_protected = fd_create_sibling_with_suffix_protected(*(void *)(a1 + 1264), ".shadow", 514, 3u);
        *(void *)(a1 + 1272) = sibling_with_suffix_protected;
        uint64_t v3 = *(void *)(a1 + 1288);
      }
      fd_pwrite((uint64_t)sibling_with_suffix_protected, v3, 0x38uLL, 0);
      return *(unsigned int *)(a1 + 1456);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t data_map32_commit_shadow(uint64_t a1)
{
  if (!*(_DWORD *)(a1 + 1456) && *(_DWORD *)(*(void *)(a1 + 1288) + 16) == 2) {
    fd_sync(*(void *)(a1 + 1272), 0, 1);
  }
  fd_release(*(atomic_uint **)(a1 + 1272));
  *(void *)(a1 + 1272) = 0;
  return *(unsigned int *)(a1 + 1456);
}

uint64_t data_map32_commit_shadow_complete(uint64_t a1)
{
  uint64_t result = *(unsigned int *)(a1 + 1456);
  if (!result)
  {
    uint64_t v3 = *(void *)(a1 + 1288);
    if (*(_DWORD *)(v3 + 16) == 2)
    {
      *(void *)(v3 + 32) = *(void *)(v3 + 20);
      *(_DWORD *)(v3 + 40) = *(_DWORD *)(v3 + 28);
      *(_DWORD *)(v3 + 16) = 1;
      fd_pwrite(*(void *)(a1 + 1264), v3, 0x38uLL, 0);
      fd_sync(*(void *)(a1 + 1264), 0, 1);
      return *(unsigned int *)(a1 + 1456);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t data_map32_clone_files(uint64_t a1, const char *a2, uint64_t a3)
{
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  int v13 = 0;
  int v6 = *(unsigned __int8 *)(a1 + 1454);
  asprintf(&v13, "%s%s", a2, ".buckets");
  if (v6) {
    unsigned __int8 v7 = 3;
  }
  else {
    unsigned __int8 v7 = 0;
  }
  sibling_protected = fd_create_sibling_protected(*(void *)(a1 + 1360), v13, 514, v7);
  *(void *)a3 = sibling_protected;
  if (sibling_protected) {
    fd_copyfile(*(void *)(a1 + 1360), (uint64_t)sibling_protected, 1);
  }
  free(v13);
  asprintf(&v13, "%s%s", a2, ".header");
  unsigned int v9 = fd_create_sibling_protected(*(void *)(a1 + 1264), v13, 514, v7);
  *(void *)(a3 + 24) = v9;
  if (v9) {
    fd_copyfile(*(void *)(a1 + 1264), (uint64_t)v9, 1);
  }
  free(v13);
  asprintf(&v13, "%s%s", a2, ".offsets");
  os_log_type_t v10 = fd_create_sibling_protected(*(void *)(a1 + 1328), v13, 514, v7);
  *(void *)(a3 + 8) = v10;
  if (v10) {
    fd_copyfile(*(void *)(a1 + 1328), (uint64_t)v10, 1);
  }
  free(v13);
  asprintf(&v13, "%s%s", a2, ".data");
  uint64_t v11 = fd_create_sibling_protected(*(void *)(a1 + 1296), v13, 514, v7);
  *(void *)(a3 + 16) = v11;
  if (v11) {
    fd_copyfile(*(void *)(a1 + 1296), (uint64_t)v11, 1);
  }
  free(v13);
  return 0;
}

uint64_t data_map32_delete_files(int a1, const char *a2, int a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  int v5 = a3 << 23 >> 31;
  bzero(__str, 0x400uLL);
  snprintf(__str, 0x400uLL, "%s%s", a2, ".buckets");
  unsigned __int8 v6 = v5 & 3;
  unsigned __int8 v7 = (atomic_uint *)fd_create_protected(a1, __str, 2, v6);
  if (v7)
  {
    int v8 = v7;
    fd_unlink((uint64_t)v7);
    fd_release(v8);
  }
  snprintf(__str, 0x400uLL, "%s%s", a2, ".header");
  unsigned int v9 = (atomic_uint *)fd_create_protected(a1, __str, 514, v6);
  if (v9)
  {
    os_log_type_t v10 = v9;
    fd_unlink((uint64_t)v9);
    fd_release(v10);
  }
  snprintf(__str, 0x400uLL, "%s%s", a2, ".offsets");
  uint64_t v11 = (atomic_uint *)fd_create_protected(a1, __str, 514, v6);
  if (v11)
  {
    uint64_t v12 = v11;
    fd_unlink((uint64_t)v11);
    fd_release(v12);
  }
  snprintf(__str, 0x400uLL, "%s%s", a2, ".data");
  int v13 = (atomic_uint *)fd_create_protected(a1, __str, 514, v6);
  if (v13)
  {
    int v14 = v13;
    fd_unlink((uint64_t)v13);
    fd_release(v14);
  }
  return 0;
}

uint64_t data_map32_validate(uint64_t a1)
{
  uint64_t v107 = *MEMORY[0x1E4F143B8];
  if (_data_map32_rdlock(a1)) {
    return 0;
  }
  uint64_t v6 = *(unsigned int *)(a1 + 1320);
  uint64_t v5 = 1;
  if (!v6) {
    goto LABEL_66;
  }
  uint64_t v7 = 0;
  unsigned int v8 = 0;
  unsigned int v9 = *(_DWORD *)(a1 + 1244);
  while (1)
  {
    uint64_t v67 = 0;
    long long v68 = 0;
    if (*(_DWORD *)(a1 + 1388) <= v8)
    {
      long long v95 = 0u;
      long long v96 = 0u;
      long long v93 = 0u;
      long long v94 = 0u;
      long long v91 = 0u;
      long long v92 = 0u;
      long long v89 = 0u;
      long long v90 = 0u;
      long long v87 = 0u;
      long long v88 = 0u;
      long long v85 = 0u;
      long long v86 = 0u;
      memset(v84, 0, sizeof(v84));
      int v11 = *__error();
      uint64_t v12 = _SILogForLogForCategory(0);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        int v29 = *(_DWORD *)(a1 + 1388);
        v30 = fd_name(*(void *)(a1 + 1264), (char *)v84, 0x100uLL);
        *(_DWORD *)buf = 136316418;
        *(void *)&uint8_t buf[4] = "_data_map32_get_offset_entry";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 424;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = v8;
        *(_WORD *)&buf[24] = 1024;
        *(_DWORD *)&buf[26] = v29;
        *(_WORD *)&buf[30] = 2048;
        *(void *)&uint8_t buf[32] = a1;
        *(_WORD *)&buf[40] = 2080;
        *(void *)&buf[42] = v30;
        _os_log_error_impl(&dword_1BDAD0000, v12, OS_LOG_TYPE_ERROR, "%s:%d: invalid data id %d max %d %p %s", buf, 0x32u);
      }
      os_log_type_t v10 = 0;
      *__error() = v11;
      uint64_t v6 = *(unsigned int *)(a1 + 1320);
    }
    else
    {
      os_log_type_t v10 = (_DWORD *)(*(void *)(a1 + 1344) + 4 * v8);
    }
    char v69 = 0;
    if (v6 <= v7)
    {
      long long v95 = 0u;
      long long v96 = 0u;
      long long v93 = 0u;
      long long v94 = 0u;
      long long v91 = 0u;
      long long v92 = 0u;
      long long v89 = 0u;
      long long v90 = 0u;
      long long v87 = 0u;
      long long v88 = 0u;
      long long v85 = 0u;
      long long v86 = 0u;
      memset(v84, 0, sizeof(v84));
      int v52 = *__error();
      int v53 = _SILogForLogForCategory(0);
      if (!os_log_type_enabled(v53, OS_LOG_TYPE_ERROR)) {
        goto LABEL_54;
      }
      uint64_t v54 = *(unsigned int *)(a1 + 1320);
      v55 = fd_name(*(void *)(a1 + 1264), (char *)v84, 0x100uLL);
      *(_DWORD *)buf = 136316418;
      *(void *)&uint8_t buf[4] = "_data_map32_get_data_entry";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 448;
      *(_WORD *)&buf[18] = 2048;
      *(void *)&buf[20] = v7;
      *(_WORD *)&buf[28] = 2048;
      *(void *)&buf[30] = v54;
      *(_WORD *)&buf[38] = 2048;
      *(void *)&buf[40] = a1;
      *(_WORD *)&buf[48] = 2080;
      *(void *)&buf[50] = v55;
      __int16 v56 = "%s:%d: invalid data offset 0x%lx 0x%lx %p %s";
      uint64_t v57 = buf;
      __int16 v58 = v53;
      uint32_t v59 = 58;
      goto LABEL_69;
    }
    data_entry_restore_32(*(void *)(a1 + 1312), v7, v6, (uint64_t)&v67, &v69, v2, v3, v4);
    if (v69)
    {
      uint64_t v60 = 0;
      long long v104 = 0u;
      long long v105 = 0u;
      long long v102 = 0u;
      long long v103 = 0u;
      long long v100 = 0u;
      long long v101 = 0u;
      long long v98 = 0u;
      long long v99 = 0u;
      memset(buf, 0, sizeof(buf));
      uint64_t v106 = 0;
      do
      {
        if ((unint64_t)v7 + v60 >= *(unsigned int *)(a1 + 1320)) {
          break;
        }
        size_t v61 = strlen((const char *)buf);
        sprintf((char *)&buf[v61], "%d ", *(unsigned __int8 *)(*(void *)(a1 + 1312) + v7 + v60++));
      }
      while (v60 != 5);
      long long v95 = 0u;
      long long v96 = 0u;
      long long v93 = 0u;
      long long v94 = 0u;
      long long v91 = 0u;
      long long v92 = 0u;
      long long v89 = 0u;
      long long v90 = 0u;
      long long v87 = 0u;
      long long v88 = 0u;
      long long v85 = 0u;
      long long v86 = 0u;
      memset(v84, 0, sizeof(v84));
      int v52 = *__error();
      __int16 v62 = _SILogForLogForCategory(0);
      if (!os_log_type_enabled(v62, OS_LOG_TYPE_ERROR))
      {
LABEL_54:
        *__error() = v52;
        int v33 = *__error();
        uint64_t v63 = _SILogForLogForCategory(0);
        if (os_log_type_enabled(v63, OS_LOG_TYPE_ERROR)) {
          data_map32_validate_cold_4();
        }
        goto LABEL_64;
      }
      long long v65 = fd_name(*(void *)(a1 + 1264), (char *)v84, 0x100uLL);
      uint64_t v66 = *(unsigned int *)(a1 + 1320);
      *(_DWORD *)long long v70 = 136316674;
      long long v71 = "_data_map32_get_data_entry";
      __int16 v72 = 1024;
      int v73 = 444;
      __int16 v74 = 2080;
      long long v75 = v65;
      __int16 v76 = 2048;
      uint64_t v77 = v7;
      __int16 v78 = 2048;
      uint64_t v79 = v66;
      __int16 v80 = 2048;
      uint64_t v81 = v67;
      __int16 v82 = 2080;
      long long v83 = buf;
      __int16 v56 = "%s:%d: data_entry_restore_32 failure: %s off: 0x%lx end: 0x%lx sz: 0x%lx sz bytes: %s";
      uint64_t v57 = v70;
      __int16 v58 = v62;
      uint32_t v59 = 68;
LABEL_69:
      _os_log_error_impl(&dword_1BDAD0000, v58, OS_LOG_TYPE_ERROR, v56, v57, v59);
      goto LABEL_54;
    }
    if (!v10 || *v10 != v7) {
      break;
    }
    if (!v8)
    {
      unsigned int v14 = v67;
      goto LABEL_21;
    }
    unsigned int v14 = v67;
    int v13 = v68;
    unsigned int v15 = data_entry_hash(v67, (uint64_t)v68, v9, *(unsigned __int8 *)(a1 + 1452));
    bucket_entry = (int *)_data_map32_get_bucket_entry(a1, v15, v8, 0, 0, v16, v17, v18);
    unsigned int v20 = bucket_entry;
    if (!bucket_entry || v8 != *bucket_entry)
    {
      int v40 = *__error();
      unint64_t v41 = _SILogForLogForCategory(0);
      if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR)) {
        data_map32_validate_cold_2();
      }
      *__error() = v40;
      int v33 = *__error();
      int v42 = _SILogForLogForCategory(0);
      BOOL v43 = os_log_type_enabled(v42, OS_LOG_TYPE_ERROR);
      if (v20)
      {
        if (v43)
        {
          int v44 = *v20;
          *(_DWORD *)long long v84 = 136316418;
          *(void *)&v84[4] = "_data_map32_validate";
          *(_WORD *)&v84[12] = 1024;
          *(_DWORD *)&v84[14] = 791;
          *(_WORD *)&v84[18] = 1024;
          *(_DWORD *)&v84[20] = v8;
          *(_WORD *)&v84[24] = 1024;
          *(_DWORD *)&v84[26] = v44;
          *(_WORD *)&v84[30] = 2048;
          *(void *)&v84[32] = v7;
          *(_WORD *)&v84[40] = 2080;
          *(void *)&v84[42] = v13;
          int v45 = "%s:%d: sid: %d hid: %d offset: %ld %s";
          uint64_t v46 = v42;
          uint32_t v47 = 50;
          goto LABEL_71;
        }
      }
      else if (v43)
      {
        *(_DWORD *)long long v84 = 136316162;
        *(void *)&v84[4] = "_data_map32_validate";
        *(_WORD *)&v84[12] = 1024;
        *(_DWORD *)&v84[14] = 793;
        *(_WORD *)&v84[18] = 1024;
        *(_DWORD *)&v84[20] = v8;
        *(_WORD *)&v84[24] = 2048;
        *(void *)&v84[26] = v7;
        *(_WORD *)&v84[34] = 2080;
        *(void *)&v84[36] = v13;
        int v45 = "%s:%d: hash entry not found for %d offset 0x%lx %s";
        uint64_t v46 = v42;
        uint32_t v47 = 44;
LABEL_71:
        _os_log_error_impl(&dword_1BDAD0000, v46, OS_LOG_TYPE_ERROR, v45, v84, v47);
      }
      uint64_t v5 = 0;
      goto LABEL_65;
    }
    unsigned int v21 = dm_hash(a1, v13, v14);
    unsigned int v25 = (int *)_data_map32_get_bucket_entry(a1, v21, 0, v13, v14, v22, v23, v24);
    uint64_t v26 = v25;
    if (!v25 || v8 != *v25)
    {
      int v48 = *__error();
      char v49 = _SILogForLogForCategory(0);
      if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR)) {
        data_map32_validate_cold_3();
      }
      *__error() = v48;
      int v33 = *__error();
      v34 = _SILogForLogForCategory(0);
      BOOL v50 = os_log_type_enabled(v34, OS_LOG_TYPE_ERROR);
      if (v26)
      {
        if (!v50) {
          goto LABEL_64;
        }
        int v51 = *v26;
        *(_DWORD *)long long v84 = 136316418;
        *(void *)&v84[4] = "_data_map32_validate";
        *(_WORD *)&v84[12] = 1024;
        *(_DWORD *)&v84[14] = 805;
        *(_WORD *)&v84[18] = 1024;
        *(_DWORD *)&v84[20] = v8;
        *(_WORD *)&v84[24] = 1024;
        *(_DWORD *)&v84[26] = v51;
        *(_WORD *)&v84[30] = 2048;
        *(void *)&v84[32] = v7;
        *(_WORD *)&v84[40] = 2080;
        *(void *)&v84[42] = v13;
        uint64_t v37 = "%s:%d: sid: %d hid: %d offset: %ld %s";
        uint32_t v38 = v34;
        uint32_t v39 = 50;
LABEL_63:
        _os_log_error_impl(&dword_1BDAD0000, v38, OS_LOG_TYPE_ERROR, v37, v84, v39);
        goto LABEL_64;
      }
      if (!v50) {
        goto LABEL_64;
      }
      *(_DWORD *)long long v84 = 136316162;
      *(void *)&v84[4] = "_data_map32_validate";
      *(_WORD *)&v84[12] = 1024;
      *(_DWORD *)&v84[14] = 807;
      *(_WORD *)&v84[18] = 1024;
      *(_DWORD *)&v84[20] = v8;
      *(_WORD *)&v84[24] = 2048;
      *(void *)&v84[26] = v7;
      *(_WORD *)&v84[34] = 2080;
      *(void *)&v84[36] = v13;
      uint64_t v37 = "%s:%d: hash entry not found for %d offset 0x%lx %s";
LABEL_62:
      uint32_t v38 = v34;
      uint32_t v39 = 44;
      goto LABEL_63;
    }
LABEL_21:
    if ((v14 & 0x3F80) != 0) {
      int v27 = 2;
    }
    else {
      int v27 = 1;
    }
    if ((v14 & 0x1FC000) != 0) {
      int v27 = 3;
    }
    if ((v14 & 0xFE00000) != 0) {
      int v27 = 4;
    }
    if (v14 >> 28) {
      int v28 = 5;
    }
    else {
      int v28 = v27;
    }
    uint64_t v7 = v14 + v7 + v28;
    ++v8;
    uint64_t v6 = *(unsigned int *)(a1 + 1320);
    if (v7 >= v6)
    {
      uint64_t v5 = 1;
      goto LABEL_66;
    }
  }
  int v31 = *__error();
  v32 = _SILogForLogForCategory(0);
  if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR)) {
    data_map32_validate_cold_1();
  }
  *__error() = v31;
  int v33 = *__error();
  v34 = _SILogForLogForCategory(0);
  BOOL v35 = os_log_type_enabled(v34, OS_LOG_TYPE_ERROR);
  if (!v10)
  {
    if (!v35) {
      goto LABEL_64;
    }
    *(_DWORD *)long long v84 = 136316162;
    *(void *)&v84[4] = "_data_map32_validate";
    *(_WORD *)&v84[12] = 1024;
    *(_DWORD *)&v84[14] = 779;
    *(_WORD *)&v84[18] = 1024;
    *(_DWORD *)&v84[20] = v8;
    *(_WORD *)&v84[24] = 2048;
    *(void *)&v84[26] = v7;
    *(_WORD *)&v84[34] = 2080;
    *(void *)&v84[36] = v68;
    uint64_t v37 = "%s:%d: offset not found for %d offset 0x%lx %s";
    goto LABEL_62;
  }
  if (v35)
  {
    uint64_t v36 = *v10;
    *(_DWORD *)long long v84 = 136316418;
    *(void *)&v84[4] = "_data_map32_validate";
    *(_WORD *)&v84[12] = 1024;
    *(_DWORD *)&v84[14] = 777;
    *(_WORD *)&v84[18] = 1024;
    *(_DWORD *)&v84[20] = v8;
    *(_WORD *)&v84[24] = 2048;
    *(void *)&v84[26] = v7;
    *(_WORD *)&v84[34] = 2048;
    *(void *)&v84[36] = v36;
    *(_WORD *)&v84[44] = 2080;
    *(void *)&v84[46] = v68;
    uint64_t v37 = "%s:%d: sid: %d so: %ld oo:%ld %s";
    uint32_t v38 = v34;
    uint32_t v39 = 54;
    goto LABEL_63;
  }
LABEL_64:
  uint64_t v5 = 1;
LABEL_65:
  *__error() = v33;
LABEL_66:
  _data_map32_unlock(a1);
  return v5;
}

uint64_t data_map32_ids_get(uint64_t a1, unsigned __int16 *a2, size_t a3, uint64_t a4, unsigned int a5)
{
  unsigned int v10 = dm_hash(a1, a2, a3);
  if (_data_map32_rdlock(a1)) {
    return 0;
  }
  uint64_t locked_with_hash = data_map32_ids_get_locked_with_hash(a4, a1, v10, a5, a2, a3, v11, v12);
  _data_map32_unlock(a1);
  return locked_with_hash;
}

uint64_t dm_hash(uint64_t a1, unsigned __int16 *a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 1452)) {
    return LegacyHash(a2, a3);
  }
  else {
    return commonHash(a3, (uint64_t)a2);
  }
}

uint64_t data_map32_ids_get_locked_with_hash(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, const void *a5, size_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v41 = 0;
  uint64_t v85 = *MEMORY[0x1E4F143B8];
  unsigned int v9 = *(_DWORD *)(a2 + 1384);
  int v10 = a3 % v9;
  uint64_t v37 = *(unsigned int *)(a2 + 1244);
  size_t v40 = v37 + a6;
  unsigned int v11 = a3 % v9;
  do
  {
    uint64_t v12 = *(void *)(a2 + 1376);
    uint64_t v13 = *(unsigned int *)(v12 + 4 * v11);
    if (!v13) {
      break;
    }
    uint64_t v14 = v11;
    if (*(_DWORD *)(a2 + 1388) <= v13)
    {
      long long v73 = 0u;
      long long v74 = 0u;
      long long v71 = 0u;
      long long v72 = 0u;
      long long v69 = 0u;
      long long v70 = 0u;
      long long v67 = 0u;
      long long v68 = 0u;
      long long v65 = 0u;
      long long v66 = 0u;
      long long v63 = 0u;
      long long v64 = 0u;
      long long v61 = 0u;
      long long v62 = 0u;
      long long v59 = 0u;
      long long v60 = 0u;
      int v19 = *__error();
      int v27 = _SILogForLogForCategory(0);
      if (!os_log_type_enabled(v27, OS_LOG_TYPE_ERROR)) {
        goto LABEL_13;
      }
      int v34 = *(_DWORD *)(a2 + 1388);
      int v31 = fd_name(*(void *)(a2 + 1264), (char *)&v59, 0x100uLL);
      *(_DWORD *)__s = 136316418;
      *(void *)&__s[4] = "_data_map32_get_offset_entry";
      *(_WORD *)&__s[12] = 1024;
      *(_DWORD *)&__s[14] = 424;
      *(_WORD *)&__s[18] = 1024;
      *(_DWORD *)&__s[20] = v13;
      *(_WORD *)&__s[24] = 1024;
      *(_DWORD *)&__s[26] = v34;
      *(_WORD *)&__s[30] = 2048;
      *(void *)&__s[32] = a2;
      *(_WORD *)&__s[40] = 2080;
      *(void *)&__s[42] = v31;
      uint64_t v23 = __s;
      uint64_t v24 = v27;
      unsigned int v25 = "%s:%d: invalid data id %d max %d %p %s";
      uint32_t v26 = 50;
      goto LABEL_27;
    }
    uint64_t v15 = *(unsigned int *)(*(void *)(a2 + 1344) + 4 * v13);
    if (v15 != 1)
    {
      uint64_t v42 = 0;
      uint64_t v43 = 0;
      char v44 = 0;
      uint64_t v16 = *(unsigned int *)(a2 + 1320);
      if (v16 > v15)
      {
        data_entry_restore_32(*(void *)(a2 + 1312), v15, v16, (uint64_t)&v42, &v44, a6, a7, a8);
        if (!v44)
        {
          if (v40 == v42 && !memcmp(a5, (const void *)(v43 + v37), a6))
          {
            unsigned int v30 = v41;
            if (v41 < a4)
            {
              *(_DWORD *)(a1 + 4 * v41) = *(_DWORD *)(v12 + 4 * v14);
              unsigned int v30 = v41;
            }
            unsigned int v41 = v30 + 1;
          }
          goto LABEL_14;
        }
        uint64_t v17 = 0;
        uint64_t v84 = 0;
        long long v82 = 0u;
        long long v83 = 0u;
        long long v80 = 0u;
        long long v81 = 0u;
        long long v78 = 0u;
        long long v79 = 0u;
        long long v76 = 0u;
        long long v77 = 0u;
        memset(__s, 0, sizeof(__s));
        do
        {
          if (v15 + v17 >= (unint64_t)*(unsigned int *)(a2 + 1320)) {
            break;
          }
          size_t v18 = strlen(__s);
          sprintf(&__s[v18], "%d ", *(unsigned __int8 *)(*(void *)(a2 + 1312) + v15 + v17++));
        }
        while (v17 != 5);
        long long v73 = 0u;
        long long v74 = 0u;
        long long v71 = 0u;
        long long v72 = 0u;
        long long v69 = 0u;
        long long v70 = 0u;
        long long v67 = 0u;
        long long v68 = 0u;
        long long v65 = 0u;
        long long v66 = 0u;
        long long v63 = 0u;
        long long v64 = 0u;
        long long v61 = 0u;
        long long v62 = 0u;
        long long v59 = 0u;
        long long v60 = 0u;
        int v19 = *__error();
        unsigned int v20 = _SILogForLogForCategory(0);
        if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
        {
          unsigned int v21 = fd_name(*(void *)(a2 + 1264), (char *)&v59, 0x100uLL);
          uint64_t v22 = *(unsigned int *)(a2 + 1320);
          int v45 = 136316674;
          uint64_t v46 = "_data_map32_get_data_entry";
          __int16 v47 = 1024;
          int v48 = 444;
          __int16 v49 = 2080;
          BOOL v50 = v21;
          __int16 v51 = 2048;
          uint64_t v52 = v15;
          __int16 v53 = 2048;
          uint64_t v54 = v22;
          __int16 v55 = 2048;
          uint64_t v56 = v42;
          __int16 v57 = 2080;
          __int16 v58 = __s;
          uint64_t v23 = (char *)&v45;
          uint64_t v24 = v20;
          unsigned int v25 = "%s:%d: data_entry_restore_32 failure: %s off: 0x%lx end: 0x%lx sz: 0x%lx sz bytes: %s";
          uint32_t v26 = 68;
          goto LABEL_27;
        }
LABEL_13:
        *__error() = v19;
        goto LABEL_14;
      }
      long long v73 = 0u;
      long long v74 = 0u;
      long long v71 = 0u;
      long long v72 = 0u;
      long long v69 = 0u;
      long long v70 = 0u;
      long long v67 = 0u;
      long long v68 = 0u;
      long long v65 = 0u;
      long long v66 = 0u;
      long long v63 = 0u;
      long long v64 = 0u;
      long long v61 = 0u;
      long long v62 = 0u;
      long long v59 = 0u;
      long long v60 = 0u;
      int v19 = *__error();
      int v28 = _SILogForLogForCategory(0);
      if (!os_log_type_enabled(v28, OS_LOG_TYPE_ERROR)) {
        goto LABEL_13;
      }
      uint64_t v33 = *(unsigned int *)(a2 + 1320);
      int v29 = fd_name(*(void *)(a2 + 1264), (char *)&v59, 0x100uLL);
      *(_DWORD *)__s = 136316418;
      *(void *)&__s[4] = "_data_map32_get_data_entry";
      *(_WORD *)&__s[12] = 1024;
      *(_DWORD *)&__s[14] = 448;
      *(_WORD *)&__s[18] = 2048;
      *(void *)&__s[20] = v15;
      *(_WORD *)&__s[28] = 2048;
      *(void *)&__s[30] = v33;
      *(_WORD *)&__s[38] = 2048;
      *(void *)&__s[40] = a2;
      *(_WORD *)&char __s[48] = 2080;
      *(void *)&__s[50] = v29;
      uint64_t v23 = __s;
      uint64_t v24 = v28;
      unsigned int v25 = "%s:%d: invalid data offset 0x%lx 0x%lx %p %s";
      uint32_t v26 = 58;
LABEL_27:
      _os_log_error_impl(&dword_1BDAD0000, v24, OS_LOG_TYPE_ERROR, v25, (uint8_t *)v23, v26);
      goto LABEL_13;
    }
LABEL_14:
    if (v14 + 1 == v9) {
      unsigned int v11 = 0;
    }
    else {
      unsigned int v11 = v14 + 1;
    }
  }
  while (v11 != v10);
  return v41;
}

uint64_t data_map32_ids_get_locked(uint64_t a1, unsigned __int16 *a2, size_t a3, uint64_t a4, unsigned int a5)
{
  unsigned int v10 = dm_hash(a1, a2, a3);

  return data_map32_ids_get_locked_with_hash(a4, a1, v10, a5, a2, a3, v11, v12);
}

uint64_t data_map32_id_get_with_key_noextra(uint64_t a1, unsigned __int16 *a2, uint64_t a3)
{
  uint64_t v90 = *MEMORY[0x1E4F143B8];
  unsigned int v6 = dm_hash(a1, a2, a3);
  if (!_data_map32_rdlock(a1))
  {
    char v44 = a2;
    size_t __n = a3;
    unsigned int v12 = *(_DWORD *)(a1 + 1384);
    int v13 = v6 % v12;
    uint64_t v43 = *(unsigned int *)(a1 + 1244);
    uint64_t v46 = v43 + a3;
    unsigned int v14 = v13;
    while (1)
    {
      uint64_t v15 = *(void *)(a1 + 1376);
      uint64_t v16 = *(unsigned int *)(v15 + 4 * v14);
      if (!v16) {
        goto LABEL_2;
      }
      uint64_t v17 = v14;
      if (*(_DWORD *)(a1 + 1388) <= v16) {
        break;
      }
      uint64_t v18 = *(unsigned int *)(*(void *)(a1 + 1344) + 4 * v16);
      if (v18 != 1)
      {
        uint64_t v47 = 0;
        uint64_t v48 = 0;
        char v49 = 0;
        uint64_t v19 = *(unsigned int *)(a1 + 1320);
        if (v19 <= v18)
        {
          long long v78 = 0u;
          long long v79 = 0u;
          long long v76 = 0u;
          long long v77 = 0u;
          long long v74 = 0u;
          long long v75 = 0u;
          long long v72 = 0u;
          long long v73 = 0u;
          long long v70 = 0u;
          long long v71 = 0u;
          long long v68 = 0u;
          long long v69 = 0u;
          long long v66 = 0u;
          long long v67 = 0u;
          long long v64 = 0u;
          long long v65 = 0u;
          int v22 = *__error();
          int v31 = _SILogForLogForCategory(0);
          if (!os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
            goto LABEL_17;
          }
          uint64_t v41 = *(unsigned int *)(a1 + 1320);
          v32 = fd_name(*(void *)(a1 + 1264), (char *)&v64, 0x100uLL);
          *(_DWORD *)__s = 136316418;
          *(void *)&__s[4] = "_data_map32_get_data_entry";
          *(_WORD *)&__s[12] = 1024;
          *(_DWORD *)&__s[14] = 448;
          *(_WORD *)&__s[18] = 2048;
          *(void *)&__s[20] = v18;
          *(_WORD *)&__s[28] = 2048;
          *(void *)&__s[30] = v41;
          *(_WORD *)&__s[38] = 2048;
          *(void *)&__s[40] = a1;
          *(_WORD *)&char __s[48] = 2080;
          *(void *)&__s[50] = v32;
          uint32_t v26 = __s;
          int v27 = v31;
          int v28 = "%s:%d: invalid data offset 0x%lx 0x%lx %p %s";
          uint32_t v29 = 58;
          goto LABEL_29;
        }
        data_entry_restore_32(*(void *)(a1 + 1312), v18, v19, (uint64_t)&v47, &v49, v7, v8, v9);
        if (v49)
        {
          uint64_t v20 = 0;
          uint64_t v89 = 0;
          long long v87 = 0u;
          long long v88 = 0u;
          long long v85 = 0u;
          long long v86 = 0u;
          long long v83 = 0u;
          long long v84 = 0u;
          long long v81 = 0u;
          long long v82 = 0u;
          memset(__s, 0, sizeof(__s));
          do
          {
            if (v18 + v20 >= (unint64_t)*(unsigned int *)(a1 + 1320)) {
              break;
            }
            size_t v21 = strlen(__s);
            sprintf(&__s[v21], "%d ", *(unsigned __int8 *)(*(void *)(a1 + 1312) + v18 + v20++));
          }
          while (v20 != 5);
          long long v78 = 0u;
          long long v79 = 0u;
          long long v76 = 0u;
          long long v77 = 0u;
          long long v74 = 0u;
          long long v75 = 0u;
          long long v72 = 0u;
          long long v73 = 0u;
          long long v70 = 0u;
          long long v71 = 0u;
          long long v68 = 0u;
          long long v69 = 0u;
          long long v66 = 0u;
          long long v67 = 0u;
          long long v64 = 0u;
          long long v65 = 0u;
          int v22 = *__error();
          uint64_t v23 = _SILogForLogForCategory(0);
          if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
          {
            uint64_t v24 = fd_name(*(void *)(a1 + 1264), (char *)&v64, 0x100uLL);
            uint64_t v25 = *(unsigned int *)(a1 + 1320);
            int v50 = 136316674;
            __int16 v51 = "_data_map32_get_data_entry";
            __int16 v52 = 1024;
            int v53 = 444;
            __int16 v54 = 2080;
            __int16 v55 = v24;
            __int16 v56 = 2048;
            uint64_t v57 = v18;
            __int16 v58 = 2048;
            uint64_t v59 = v25;
            __int16 v60 = 2048;
            uint64_t v61 = v47;
            __int16 v62 = 2080;
            long long v63 = __s;
            uint32_t v26 = (char *)&v50;
            int v27 = v23;
            int v28 = "%s:%d: data_entry_restore_32 failure: %s off: 0x%lx end: 0x%lx sz: 0x%lx sz bytes: %s";
            uint32_t v29 = 68;
            goto LABEL_29;
          }
LABEL_17:
          *__error() = v22;
          goto LABEL_18;
        }
        if (v46 == v47 && !memcmp(v44, (const void *)(v48 + v43), __n))
        {
          uint64_t v10 = *(unsigned int *)(v15 + 4 * v17);
          goto LABEL_3;
        }
      }
LABEL_18:
      if (v17 + 1 == v12) {
        unsigned int v14 = 0;
      }
      else {
        unsigned int v14 = v17 + 1;
      }
      if (v14 == v13) {
        goto LABEL_2;
      }
    }
    long long v78 = 0u;
    long long v79 = 0u;
    long long v76 = 0u;
    long long v77 = 0u;
    long long v74 = 0u;
    long long v75 = 0u;
    long long v72 = 0u;
    long long v73 = 0u;
    long long v70 = 0u;
    long long v71 = 0u;
    long long v68 = 0u;
    long long v69 = 0u;
    long long v66 = 0u;
    long long v67 = 0u;
    long long v64 = 0u;
    long long v65 = 0u;
    int v22 = *__error();
    unsigned int v30 = _SILogForLogForCategory(0);
    if (!os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
      goto LABEL_17;
    }
    int v42 = *(_DWORD *)(a1 + 1388);
    uint64_t v33 = fd_name(*(void *)(a1 + 1264), (char *)&v64, 0x100uLL);
    *(_DWORD *)__s = 136316418;
    *(void *)&__s[4] = "_data_map32_get_offset_entry";
    *(_WORD *)&__s[12] = 1024;
    *(_DWORD *)&__s[14] = 424;
    *(_WORD *)&__s[18] = 1024;
    *(_DWORD *)&__s[20] = v16;
    *(_WORD *)&__s[24] = 1024;
    *(_DWORD *)&__s[26] = v42;
    *(_WORD *)&__s[30] = 2048;
    *(void *)&__s[32] = a1;
    *(_WORD *)&__s[40] = 2080;
    *(void *)&__s[42] = v33;
    uint32_t v26 = __s;
    int v27 = v30;
    int v28 = "%s:%d: invalid data id %d max %d %p %s";
    uint32_t v29 = 50;
LABEL_29:
    _os_log_error_impl(&dword_1BDAD0000, v27, OS_LOG_TYPE_ERROR, v28, (uint8_t *)v26, v29);
    goto LABEL_17;
  }
LABEL_2:
  uint64_t v10 = 0;
LABEL_3:
  if (*(void *)(a1 + 1440))
  {
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 1436));
    size_t v40 = *(void **)(a1 + 1440);
    if (v40) {
      bit_vector_set(v40, v10, v34, v35, v36, v37, v38, v39);
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 1436));
  }
  _data_map32_unlock(a1);
  return v10;
}

void _data_map32_set_seen_id(uint64_t a1, unsigned int a2)
{
  if (*(void *)(a1 + 1440))
  {
    uint64_t v4 = (os_unfair_lock_s *)(a1 + 1436);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 1436));
    uint64_t v11 = *(void **)(a1 + 1440);
    if (v11) {
      bit_vector_set(v11, a2, v5, v6, v7, v8, v9, v10);
    }
    os_unfair_lock_unlock(v4);
  }
}

uint64_t data_map32_id_get_with_key(uint64_t a1, unsigned __int16 *a2, uint64_t a3, const void *a4)
{
  uint64_t v96 = *MEMORY[0x1E4F143B8];
  unsigned int v8 = dm_hash(a1, a2, a3);
  if (!_data_map32_rdlock(a1))
  {
    size_t v50 = a3;
    unsigned int v14 = *(_DWORD *)(a1 + 1384);
    int v15 = v8 % v14;
    uint64_t lock = (os_unfair_lock_s *)(a1 + 1436);
    size_t __n = *(unsigned int *)(a1 + 1244);
    size_t v52 = __n + a3;
    unsigned int v16 = v15;
    while (1)
    {
      uint64_t v17 = *(void *)(a1 + 1376);
      unint64_t v18 = *(unsigned int *)(v17 + 4 * v16);
      if (!v18) {
        goto LABEL_2;
      }
      uint64_t v19 = v16;
      if (*(void *)(a1 + 1440))
      {
        os_unfair_lock_lock(lock);
        uint64_t v46 = *(void **)(a1 + 1440);
        if (v46) {
          bit_vector_set(v46, v18, v40, v41, v42, v43, v44, v45);
        }
        os_unfair_lock_unlock(lock);
        unint64_t v18 = *(unsigned int *)(v17 + 4 * v19);
      }
      if (*(unsigned int *)(a1 + 1388) <= v18) {
        break;
      }
      uint64_t v20 = *(void *)(a1 + 1344);
      if (v20)
      {
        uint64_t v21 = *(unsigned int *)(v20 + 4 * v18);
        if (v21 != 1)
        {
          uint64_t v53 = 0;
          __int16 v54 = 0;
          char v55 = 0;
          uint64_t v22 = *(unsigned int *)(a1 + 1320);
          if (v22 <= v21)
          {
            long long v84 = 0u;
            long long v85 = 0u;
            long long v82 = 0u;
            long long v83 = 0u;
            long long v80 = 0u;
            long long v81 = 0u;
            long long v78 = 0u;
            long long v79 = 0u;
            long long v76 = 0u;
            long long v77 = 0u;
            long long v74 = 0u;
            long long v75 = 0u;
            long long v72 = 0u;
            long long v73 = 0u;
            long long v70 = 0u;
            long long v71 = 0u;
            int v25 = *__error();
            uint64_t v34 = _SILogForLogForCategory(0);
            if (!os_log_type_enabled(v34, OS_LOG_TYPE_ERROR)) {
              goto LABEL_18;
            }
            uint64_t v48 = a4;
            uint64_t v35 = *(unsigned int *)(a1 + 1320);
            uint64_t v36 = fd_name(*(void *)(a1 + 1264), (char *)&v70, 0x100uLL);
            *(_DWORD *)__s = 136316418;
            *(void *)&__s[4] = "_data_map32_get_data_entry";
            *(_WORD *)&__s[12] = 1024;
            *(_DWORD *)&__s[14] = 448;
            *(_WORD *)&__s[18] = 2048;
            *(void *)&__s[20] = v21;
            *(_WORD *)&__s[28] = 2048;
            *(void *)&__s[30] = v35;
            a4 = v48;
            *(_WORD *)&__s[38] = 2048;
            *(void *)&__s[40] = a1;
            *(_WORD *)&char __s[48] = 2080;
            *(void *)&__s[50] = v36;
            uint32_t v29 = __s;
            unsigned int v30 = v34;
            int v31 = "%s:%d: invalid data offset 0x%lx 0x%lx %p %s";
            uint32_t v32 = 58;
            goto LABEL_27;
          }
          data_entry_restore_32(*(void *)(a1 + 1312), v21, v22, (uint64_t)&v53, &v55, v9, v10, v11);
          if (v55)
          {
            uint64_t v23 = 0;
            uint64_t v95 = 0;
            long long v93 = 0u;
            long long v94 = 0u;
            long long v91 = 0u;
            long long v92 = 0u;
            long long v89 = 0u;
            long long v90 = 0u;
            long long v87 = 0u;
            long long v88 = 0u;
            memset(__s, 0, sizeof(__s));
            do
            {
              if (v21 + v23 >= (unint64_t)*(unsigned int *)(a1 + 1320)) {
                break;
              }
              size_t v24 = strlen(__s);
              sprintf(&__s[v24], "%d ", *(unsigned __int8 *)(*(void *)(a1 + 1312) + v21 + v23++));
            }
            while (v23 != 5);
            long long v84 = 0u;
            long long v85 = 0u;
            long long v82 = 0u;
            long long v83 = 0u;
            long long v80 = 0u;
            long long v81 = 0u;
            long long v78 = 0u;
            long long v79 = 0u;
            long long v76 = 0u;
            long long v77 = 0u;
            long long v74 = 0u;
            long long v75 = 0u;
            long long v72 = 0u;
            long long v73 = 0u;
            long long v70 = 0u;
            long long v71 = 0u;
            int v25 = *__error();
            uint32_t v26 = _SILogForLogForCategory(0);
            if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
            {
              int v27 = fd_name(*(void *)(a1 + 1264), (char *)&v70, 0x100uLL);
              uint64_t v28 = *(unsigned int *)(a1 + 1320);
              int v56 = 136316674;
              uint64_t v57 = "_data_map32_get_data_entry";
              __int16 v58 = 1024;
              int v59 = 444;
              __int16 v60 = 2080;
              uint64_t v61 = v27;
              __int16 v62 = 2048;
              uint64_t v63 = v21;
              __int16 v64 = 2048;
              uint64_t v65 = v28;
              __int16 v66 = 2048;
              uint64_t v67 = v53;
              __int16 v68 = 2080;
              long long v69 = __s;
              uint32_t v29 = (char *)&v56;
              unsigned int v30 = v26;
              int v31 = "%s:%d: data_entry_restore_32 failure: %s off: 0x%lx end: 0x%lx sz: 0x%lx sz bytes: %s";
              uint32_t v32 = 68;
              goto LABEL_27;
            }
LABEL_18:
            *__error() = v25;
            goto LABEL_19;
          }
          if (v52 == v53)
          {
            uint64_t v39 = v54;
            if (!memcmp(a2, &v54[__n], v50) && !memcmp(v39, a4, __n))
            {
              uint64_t v12 = *(unsigned int *)(v17 + 4 * v19);
              goto LABEL_3;
            }
          }
        }
      }
LABEL_19:
      if (v19 + 1 == v14) {
        unsigned int v16 = 0;
      }
      else {
        unsigned int v16 = v19 + 1;
      }
      if (v16 == v15) {
        goto LABEL_2;
      }
    }
    long long v84 = 0u;
    long long v85 = 0u;
    long long v82 = 0u;
    long long v83 = 0u;
    long long v80 = 0u;
    long long v81 = 0u;
    long long v78 = 0u;
    long long v79 = 0u;
    long long v76 = 0u;
    long long v77 = 0u;
    long long v74 = 0u;
    long long v75 = 0u;
    long long v72 = 0u;
    long long v73 = 0u;
    long long v70 = 0u;
    long long v71 = 0u;
    int v25 = *__error();
    uint64_t v33 = _SILogForLogForCategory(0);
    if (!os_log_type_enabled(v33, OS_LOG_TYPE_ERROR)) {
      goto LABEL_18;
    }
    char v49 = a4;
    int v37 = *(_DWORD *)(a1 + 1388);
    uint64_t v38 = fd_name(*(void *)(a1 + 1264), (char *)&v70, 0x100uLL);
    *(_DWORD *)__s = 136316418;
    *(void *)&__s[4] = "_data_map32_get_offset_entry";
    *(_WORD *)&__s[12] = 1024;
    *(_DWORD *)&__s[14] = 424;
    *(_WORD *)&__s[18] = 1024;
    *(_DWORD *)&__s[20] = v18;
    *(_WORD *)&__s[24] = 1024;
    *(_DWORD *)&__s[26] = v37;
    a4 = v49;
    *(_WORD *)&__s[30] = 2048;
    *(void *)&__s[32] = a1;
    *(_WORD *)&__s[40] = 2080;
    *(void *)&__s[42] = v38;
    uint32_t v29 = __s;
    unsigned int v30 = v33;
    int v31 = "%s:%d: invalid data id %d max %d %p %s";
    uint32_t v32 = 50;
LABEL_27:
    _os_log_error_impl(&dword_1BDAD0000, v30, OS_LOG_TYPE_ERROR, v31, (uint8_t *)v29, v32);
    goto LABEL_18;
  }
LABEL_2:
  uint64_t v12 = 0;
LABEL_3:
  _data_map32_unlock(a1);
  return v12;
}

uint64_t data_map32_get_extra_with_key(uint64_t a1, unsigned __int16 *a2, size_t a3, unsigned char *a4)
{
  uint64_t v92 = *MEMORY[0x1E4F143B8];
  *a4 = 0;
  uint64_t v50 = 0;
  unsigned int v7 = dm_hash(a1, a2, a3);
  if (!_data_map32_rdlock(a1))
  {
    unsigned int v12 = *(_DWORD *)(a1 + 1384);
    int v13 = v7 % v12;
    uint64_t lock = (os_unfair_lock_s *)(a1 + 1436);
    uint64_t v46 = *(unsigned int *)(a1 + 1244);
    unsigned int v14 = v13;
    while (1)
    {
      uint64_t v15 = *(void *)(a1 + 1376);
      unint64_t v16 = *(unsigned int *)(v15 + 4 * v14);
      if (!v16) {
        goto LABEL_2;
      }
      uint64_t v17 = v14;
      if (*(void *)(a1 + 1440))
      {
        os_unfair_lock_lock(lock);
        uint64_t v43 = *(void **)(a1 + 1440);
        if (v43) {
          bit_vector_set(v43, v16, v37, v38, v39, v40, v41, v42);
        }
        os_unfair_lock_unlock(lock);
        unint64_t v16 = *(unsigned int *)(v15 + 4 * v17);
      }
      if (*(unsigned int *)(a1 + 1388) <= v16) {
        break;
      }
      uint64_t v18 = *(void *)(a1 + 1344);
      if (v18)
      {
        uint64_t v19 = *(unsigned int *)(v18 + 4 * v16);
        if (v19 != 1)
        {
          uint64_t v48 = 0;
          uint64_t v49 = 0;
          char v51 = 0;
          uint64_t v20 = *(unsigned int *)(a1 + 1320);
          if (v20 <= v19)
          {
            long long v80 = 0u;
            long long v81 = 0u;
            long long v78 = 0u;
            long long v79 = 0u;
            long long v76 = 0u;
            long long v77 = 0u;
            long long v74 = 0u;
            long long v75 = 0u;
            long long v72 = 0u;
            long long v73 = 0u;
            long long v70 = 0u;
            long long v71 = 0u;
            long long v68 = 0u;
            long long v69 = 0u;
            long long v66 = 0u;
            long long v67 = 0u;
            int v23 = *__error();
            uint32_t v32 = _SILogForLogForCategory(0);
            if (!os_log_type_enabled(v32, OS_LOG_TYPE_ERROR)) {
              goto LABEL_17;
            }
            uint64_t v33 = *(unsigned int *)(a1 + 1320);
            uint64_t v34 = fd_name(*(void *)(a1 + 1264), (char *)&v66, 0x100uLL);
            *(_DWORD *)__s = 136316418;
            *(void *)&__s[4] = "_data_map32_get_data_entry";
            *(_WORD *)&__s[12] = 1024;
            *(_DWORD *)&__s[14] = 448;
            *(_WORD *)&__s[18] = 2048;
            *(void *)&__s[20] = v19;
            *(_WORD *)&__s[28] = 2048;
            *(void *)&__s[30] = v33;
            *(_WORD *)&__s[38] = 2048;
            *(void *)&__s[40] = a1;
            *(_WORD *)&char __s[48] = 2080;
            *(void *)&__s[50] = v34;
            int v27 = __s;
            uint64_t v28 = v32;
            uint32_t v29 = "%s:%d: invalid data offset 0x%lx 0x%lx %p %s";
            uint32_t v30 = 58;
            goto LABEL_26;
          }
          data_entry_restore_32(*(void *)(a1 + 1312), v19, v20, (uint64_t)&v48, &v51, v8, v9, v10);
          if (v51)
          {
            uint64_t v21 = 0;
            uint64_t v91 = 0;
            long long v89 = 0u;
            long long v90 = 0u;
            long long v87 = 0u;
            long long v88 = 0u;
            long long v85 = 0u;
            long long v86 = 0u;
            long long v83 = 0u;
            long long v84 = 0u;
            memset(__s, 0, sizeof(__s));
            do
            {
              if (v19 + v21 >= (unint64_t)*(unsigned int *)(a1 + 1320)) {
                break;
              }
              size_t v22 = strlen(__s);
              sprintf(&__s[v22], "%d ", *(unsigned __int8 *)(*(void *)(a1 + 1312) + v19 + v21++));
            }
            while (v21 != 5);
            long long v80 = 0u;
            long long v81 = 0u;
            long long v78 = 0u;
            long long v79 = 0u;
            long long v76 = 0u;
            long long v77 = 0u;
            long long v74 = 0u;
            long long v75 = 0u;
            long long v72 = 0u;
            long long v73 = 0u;
            long long v70 = 0u;
            long long v71 = 0u;
            long long v68 = 0u;
            long long v69 = 0u;
            long long v66 = 0u;
            long long v67 = 0u;
            int v23 = *__error();
            size_t v24 = _SILogForLogForCategory(0);
            if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
            {
              int v25 = fd_name(*(void *)(a1 + 1264), (char *)&v66, 0x100uLL);
              uint64_t v26 = *(unsigned int *)(a1 + 1320);
              int v52 = 136316674;
              uint64_t v53 = "_data_map32_get_data_entry";
              __int16 v54 = 1024;
              int v55 = 444;
              __int16 v56 = 2080;
              uint64_t v57 = v25;
              __int16 v58 = 2048;
              uint64_t v59 = v19;
              __int16 v60 = 2048;
              uint64_t v61 = v26;
              __int16 v62 = 2048;
              uint64_t v63 = v48;
              __int16 v64 = 2080;
              uint64_t v65 = __s;
              int v27 = (char *)&v52;
              uint64_t v28 = v24;
              uint32_t v29 = "%s:%d: data_entry_restore_32 failure: %s off: 0x%lx end: 0x%lx sz: 0x%lx sz bytes: %s";
              uint32_t v30 = 68;
              goto LABEL_26;
            }
LABEL_17:
            *__error() = v23;
            goto LABEL_18;
          }
          if (v46 + a3 == v48 && !memcmp(a2, (const void *)(v49 + v46), a3))
          {
            int v44 = *(_DWORD *)(a1 + 1244);
            __memcpy_chk();
            HIDWORD(v50) = v44;
            *a4 = 1;
            goto LABEL_2;
          }
        }
      }
LABEL_18:
      if (v17 + 1 == v12) {
        unsigned int v14 = 0;
      }
      else {
        unsigned int v14 = v17 + 1;
      }
      if (v14 == v13) {
        goto LABEL_2;
      }
    }
    long long v80 = 0u;
    long long v81 = 0u;
    long long v78 = 0u;
    long long v79 = 0u;
    long long v76 = 0u;
    long long v77 = 0u;
    long long v74 = 0u;
    long long v75 = 0u;
    long long v72 = 0u;
    long long v73 = 0u;
    long long v70 = 0u;
    long long v71 = 0u;
    long long v68 = 0u;
    long long v69 = 0u;
    long long v66 = 0u;
    long long v67 = 0u;
    int v23 = *__error();
    int v31 = _SILogForLogForCategory(0);
    if (!os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
      goto LABEL_17;
    }
    int v35 = *(_DWORD *)(a1 + 1388);
    uint64_t v36 = fd_name(*(void *)(a1 + 1264), (char *)&v66, 0x100uLL);
    *(_DWORD *)__s = 136316418;
    *(void *)&__s[4] = "_data_map32_get_offset_entry";
    *(_WORD *)&__s[12] = 1024;
    *(_DWORD *)&__s[14] = 424;
    *(_WORD *)&__s[18] = 1024;
    *(_DWORD *)&__s[20] = v16;
    *(_WORD *)&__s[24] = 1024;
    *(_DWORD *)&__s[26] = v35;
    *(_WORD *)&__s[30] = 2048;
    *(void *)&__s[32] = a1;
    *(_WORD *)&__s[40] = 2080;
    *(void *)&__s[42] = v36;
    int v27 = __s;
    uint64_t v28 = v31;
    uint32_t v29 = "%s:%d: invalid data id %d max %d %p %s";
    uint32_t v30 = 50;
LABEL_26:
    _os_log_error_impl(&dword_1BDAD0000, v28, OS_LOG_TYPE_ERROR, v29, (uint8_t *)v27, v30);
    goto LABEL_17;
  }
LABEL_2:
  _data_map32_unlock(a1);
  return v50;
}

uint64_t data_map32_get_data_entry@<X0>(uint64_t result@<X0>, unsigned int a2@<W1>, unsigned char *a3@<X2>, int a4@<W3>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t v10 = result;
  uint64_t v85 = *MEMORY[0x1E4F143B8];
  *(void *)(a8 + 16) = 0;
  *a3 = 0;
  *(void *)a8 = 0;
  *(void *)(a8 + 8) = 0;
  *(_DWORD *)(a8 + 20) = *(_DWORD *)(result + 1244);
  uint64_t v41 = 0;
  if (!a4)
  {
    uint64_t result = data_map32_get_data(result, a2, &v41);
LABEL_14:
    if (result)
    {
      *a3 = 1;
      uint64_t v20 = *(unsigned int *)(v10 + 1244);
      uint64_t v21 = v41 - v20;
      *(void *)a8 = result;
      *(void *)(a8 + 8) = v21;
      *(_DWORD *)(a8 + 20) = v20;
      if (v20) {
        return __memcpy_chk();
      }
    }
    return result;
  }
  if (*(_DWORD *)(result + 1388) > a2)
  {
    uint64_t v12 = *(void *)(result + 1344);
    if (!v12) {
      return result;
    }
    uint64_t v13 = *(unsigned int *)(v12 + 4 * a2);
    if (v13 == 1) {
      return result;
    }
    uint64_t v42 = 0;
    uint64_t v43 = 0;
    char v44 = 0;
    uint64_t v14 = *(unsigned int *)(result + 1320);
    if (v14 <= v13)
    {
      long long v73 = 0u;
      long long v74 = 0u;
      long long v71 = 0u;
      long long v72 = 0u;
      long long v69 = 0u;
      long long v70 = 0u;
      long long v67 = 0u;
      long long v68 = 0u;
      long long v65 = 0u;
      long long v66 = 0u;
      long long v63 = 0u;
      long long v64 = 0u;
      long long v61 = 0u;
      long long v62 = 0u;
      long long v59 = 0u;
      long long v60 = 0u;
      int v24 = *__error();
      int v25 = _SILogForLogForCategory(0);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      {
        uint64_t v30 = *(unsigned int *)(v10 + 1320);
        int v31 = fd_name(*(void *)(v10 + 1264), (char *)&v59, 0x100uLL);
        *(_DWORD *)__s = 136316418;
        *(void *)&__s[4] = "_data_map32_get_data_entry";
        *(_WORD *)&__s[12] = 1024;
        *(_DWORD *)&__s[14] = 448;
        *(_WORD *)&__s[18] = 2048;
        *(void *)&__s[20] = v13;
        *(_WORD *)&__s[28] = 2048;
        *(void *)&__s[30] = v30;
        *(_WORD *)&__s[38] = 2048;
        *(void *)&__s[40] = v10;
        *(_WORD *)&char __s[48] = 2080;
        *(void *)&__s[50] = v31;
        _os_log_error_impl(&dword_1BDAD0000, v25, OS_LOG_TYPE_ERROR, "%s:%d: invalid data offset 0x%lx 0x%lx %p %s", (uint8_t *)__s, 0x3Au);
      }
      uint64_t v26 = __error();
      uint64_t result = 0;
      *uint64_t v26 = v24;
    }
    else
    {
      data_entry_restore_32(*(void *)(result + 1312), v13, v14, (uint64_t)&v42, &v44, a5, a6, a7);
      if (v44)
      {
        uint64_t v15 = 0;
        uint64_t v84 = 0;
        long long v82 = 0u;
        long long v83 = 0u;
        long long v80 = 0u;
        long long v81 = 0u;
        long long v78 = 0u;
        long long v79 = 0u;
        long long v76 = 0u;
        long long v77 = 0u;
        memset(__s, 0, sizeof(__s));
        do
        {
          if (v13 + v15 >= (unint64_t)*(unsigned int *)(v10 + 1320)) {
            break;
          }
          size_t v16 = strlen(__s);
          sprintf(&__s[v16], "%d ", *(unsigned __int8 *)(*(void *)(v10 + 1312) + v13 + v15++));
        }
        while (v15 != 5);
        long long v73 = 0u;
        long long v74 = 0u;
        long long v71 = 0u;
        long long v72 = 0u;
        long long v69 = 0u;
        long long v70 = 0u;
        long long v67 = 0u;
        long long v68 = 0u;
        long long v65 = 0u;
        long long v66 = 0u;
        long long v63 = 0u;
        long long v64 = 0u;
        long long v61 = 0u;
        long long v62 = 0u;
        long long v59 = 0u;
        long long v60 = 0u;
        int v17 = *__error();
        uint64_t v18 = _SILogForLogForCategory(0);
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        {
          uint32_t v32 = fd_name(*(void *)(v10 + 1264), (char *)&v59, 0x100uLL);
          uint64_t v33 = *(unsigned int *)(v10 + 1320);
          *(_DWORD *)buf = 136316674;
          uint64_t v46 = "_data_map32_get_data_entry";
          __int16 v47 = 1024;
          int v48 = 444;
          __int16 v49 = 2080;
          uint64_t v50 = v32;
          __int16 v51 = 2048;
          uint64_t v52 = v13;
          __int16 v53 = 2048;
          uint64_t v54 = v33;
          __int16 v55 = 2048;
          uint64_t v56 = v42;
          __int16 v57 = 2080;
          __int16 v58 = __s;
          _os_log_error_impl(&dword_1BDAD0000, v18, OS_LOG_TYPE_ERROR, "%s:%d: data_entry_restore_32 failure: %s off: 0x%lx end: 0x%lx sz: 0x%lx sz bytes: %s", buf, 0x44u);
        }
        uint64_t v19 = __error();
        uint64_t result = 0;
        *uint64_t v19 = v17;
      }
      else
      {
        unsigned int v27 = *(_DWORD *)(v10 + 1244);
        uint64_t v41 = v42 - v27;
        if (*(void *)(v10 + 1440))
        {
          os_unfair_lock_lock((os_unfair_lock_t)(v10 + 1436));
          uint64_t v40 = *(void **)(v10 + 1440);
          if (v40) {
            bit_vector_set(v40, a2, v34, v35, v36, v37, v38, v39);
          }
          os_unfair_lock_unlock((os_unfair_lock_t)(v10 + 1436));
          unsigned int v27 = *(_DWORD *)(v10 + 1244);
        }
        uint64_t result = v43 + v27;
      }
    }
    goto LABEL_14;
  }
  long long v73 = 0u;
  long long v74 = 0u;
  long long v71 = 0u;
  long long v72 = 0u;
  long long v69 = 0u;
  long long v70 = 0u;
  long long v67 = 0u;
  long long v68 = 0u;
  long long v65 = 0u;
  long long v66 = 0u;
  long long v63 = 0u;
  long long v64 = 0u;
  long long v61 = 0u;
  long long v62 = 0u;
  long long v59 = 0u;
  long long v60 = 0u;
  int v22 = *__error();
  int v23 = _SILogForLogForCategory(0);
  if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
  {
    int v28 = *(_DWORD *)(v10 + 1388);
    uint32_t v29 = fd_name(*(void *)(v10 + 1264), (char *)&v59, 0x100uLL);
    *(_DWORD *)__s = 136316418;
    *(void *)&__s[4] = "_data_map32_get_offset_entry";
    *(_WORD *)&__s[12] = 1024;
    *(_DWORD *)&__s[14] = 424;
    *(_WORD *)&__s[18] = 1024;
    *(_DWORD *)&__s[20] = a2;
    *(_WORD *)&__s[24] = 1024;
    *(_DWORD *)&__s[26] = v28;
    *(_WORD *)&__s[30] = 2048;
    *(void *)&__s[32] = v10;
    *(_WORD *)&__s[40] = 2080;
    *(void *)&__s[42] = v29;
    _os_log_error_impl(&dword_1BDAD0000, v23, OS_LOG_TYPE_ERROR, "%s:%d: invalid data id %d max %d %p %s", (uint8_t *)__s, 0x32u);
  }
  uint64_t result = (uint64_t)__error();
  *(_DWORD *)uint64_t result = v22;
  return result;
}

uint64_t data_map32_get_data_locked(uint64_t a1, unsigned int a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v82 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a1 + 1388) <= a2)
  {
    long long v70 = 0u;
    long long v71 = 0u;
    long long v68 = 0u;
    long long v69 = 0u;
    long long v66 = 0u;
    long long v67 = 0u;
    long long v64 = 0u;
    long long v65 = 0u;
    long long v62 = 0u;
    long long v63 = 0u;
    long long v60 = 0u;
    long long v61 = 0u;
    long long v58 = 0u;
    long long v59 = 0u;
    long long v56 = 0u;
    long long v57 = 0u;
    int v16 = *__error();
    int v24 = _SILogForLogForCategory(0);
    if (!os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
LABEL_14:
      int v28 = __error();
      uint64_t result = 0;
      *int v28 = v16;
      return result;
    }
    int v25 = *(_DWORD *)(a1 + 1388);
    uint64_t v26 = fd_name(*(void *)(a1 + 1264), (char *)&v56, 0x100uLL);
    *(_DWORD *)__s = 136316418;
    *(void *)&__s[4] = "_data_map32_get_offset_entry";
    *(_WORD *)&__s[12] = 1024;
    *(_DWORD *)&__s[14] = 424;
    *(_WORD *)&__s[18] = 1024;
    *(_DWORD *)&__s[20] = a2;
    *(_WORD *)&__s[24] = 1024;
    *(_DWORD *)&__s[26] = v25;
    *(_WORD *)&__s[30] = 2048;
    *(void *)&__s[32] = a1;
    *(_WORD *)&__s[40] = 2080;
    *(void *)&__s[42] = v26;
    uint64_t v20 = "%s:%d: invalid data id %d max %d %p %s";
    uint64_t v21 = __s;
    int v22 = v24;
    uint32_t v23 = 50;
LABEL_20:
    _os_log_error_impl(&dword_1BDAD0000, v22, OS_LOG_TYPE_ERROR, v20, (uint8_t *)v21, v23);
    goto LABEL_14;
  }
  uint64_t v10 = *(void *)(a1 + 1344);
  if (!v10) {
    return 0;
  }
  uint64_t v11 = *(unsigned int *)(v10 + 4 * a2);
  if (v11 == 1) {
    return 0;
  }
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  char v41 = 0;
  uint64_t v13 = *(unsigned int *)(a1 + 1320);
  if (v13 <= v11)
  {
    long long v70 = 0u;
    long long v71 = 0u;
    long long v68 = 0u;
    long long v69 = 0u;
    long long v66 = 0u;
    long long v67 = 0u;
    long long v64 = 0u;
    long long v65 = 0u;
    long long v62 = 0u;
    long long v63 = 0u;
    long long v60 = 0u;
    long long v61 = 0u;
    long long v58 = 0u;
    long long v59 = 0u;
    long long v56 = 0u;
    long long v57 = 0u;
    int v16 = *__error();
    unsigned int v27 = _SILogForLogForCategory(0);
    if (!os_log_type_enabled(v27, OS_LOG_TYPE_ERROR)) {
      goto LABEL_14;
    }
    uint64_t v30 = *(unsigned int *)(a1 + 1320);
    int v31 = fd_name(*(void *)(a1 + 1264), (char *)&v56, 0x100uLL);
    *(_DWORD *)__s = 136316418;
    *(void *)&__s[4] = "_data_map32_get_data_entry";
    *(_WORD *)&__s[12] = 1024;
    *(_DWORD *)&__s[14] = 448;
    *(_WORD *)&__s[18] = 2048;
    *(void *)&__s[20] = v11;
    *(_WORD *)&__s[28] = 2048;
    *(void *)&__s[30] = v30;
    *(_WORD *)&__s[38] = 2048;
    *(void *)&__s[40] = a1;
    *(_WORD *)&char __s[48] = 2080;
    *(void *)&__s[50] = v31;
    uint64_t v20 = "%s:%d: invalid data offset 0x%lx 0x%lx %p %s";
    uint64_t v21 = __s;
    int v22 = v27;
    uint32_t v23 = 58;
    goto LABEL_20;
  }
  data_entry_restore_32(*(void *)(a1 + 1312), v11, v13, (uint64_t)&v39, &v41, a6, a7, a8);
  if (v41)
  {
    uint64_t v14 = 0;
    long long v79 = 0u;
    long long v80 = 0u;
    long long v77 = 0u;
    long long v78 = 0u;
    long long v75 = 0u;
    long long v76 = 0u;
    long long v73 = 0u;
    long long v74 = 0u;
    memset(__s, 0, sizeof(__s));
    uint64_t v81 = 0;
    do
    {
      if (v11 + v14 >= (unint64_t)*(unsigned int *)(a1 + 1320)) {
        break;
      }
      size_t v15 = strlen(__s);
      sprintf(&__s[v15], "%d ", *(unsigned __int8 *)(*(void *)(a1 + 1312) + v11 + v14++));
    }
    while (v14 != 5);
    long long v70 = 0u;
    long long v71 = 0u;
    long long v68 = 0u;
    long long v69 = 0u;
    long long v66 = 0u;
    long long v67 = 0u;
    long long v64 = 0u;
    long long v65 = 0u;
    long long v62 = 0u;
    long long v63 = 0u;
    long long v60 = 0u;
    long long v61 = 0u;
    long long v58 = 0u;
    long long v59 = 0u;
    long long v56 = 0u;
    long long v57 = 0u;
    int v16 = *__error();
    int v17 = _SILogForLogForCategory(0);
    if (!os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
      goto LABEL_14;
    }
    uint64_t v18 = fd_name(*(void *)(a1 + 1264), (char *)&v56, 0x100uLL);
    uint64_t v19 = *(unsigned int *)(a1 + 1320);
    int v42 = 136316674;
    uint64_t v43 = "_data_map32_get_data_entry";
    __int16 v44 = 1024;
    int v45 = 444;
    __int16 v46 = 2080;
    __int16 v47 = v18;
    __int16 v48 = 2048;
    uint64_t v49 = v11;
    __int16 v50 = 2048;
    uint64_t v51 = v19;
    __int16 v52 = 2048;
    uint64_t v53 = v39;
    __int16 v54 = 2080;
    __int16 v55 = __s;
    uint64_t v20 = "%s:%d: data_entry_restore_32 failure: %s off: 0x%lx end: 0x%lx sz: 0x%lx sz bytes: %s";
    uint64_t v21 = (char *)&v42;
    int v22 = v17;
    uint32_t v23 = 68;
    goto LABEL_20;
  }
  if (a3) {
    *a3 = (v39 - *(_DWORD *)(a1 + 1244));
  }
  if (*(void *)(a1 + 1440))
  {
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 1436));
    uint64_t v38 = *(void **)(a1 + 1440);
    if (v38) {
      bit_vector_set(v38, a2, v32, v33, v34, v35, v36, v37);
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 1436));
  }
  return v40 + *(unsigned int *)(a1 + 1244);
}

uint64_t data_map32_get_data(uint64_t a1, unsigned int a2, void *a3)
{
  uint64_t v81 = *MEMORY[0x1E4F143B8];
  if (_data_map32_rdlock(a1)) {
    goto LABEL_18;
  }
  if (*(_DWORD *)(a1 + 1388) <= a2)
  {
    long long v69 = 0u;
    long long v70 = 0u;
    long long v67 = 0u;
    long long v68 = 0u;
    long long v65 = 0u;
    long long v66 = 0u;
    long long v63 = 0u;
    long long v64 = 0u;
    long long v61 = 0u;
    long long v62 = 0u;
    long long v59 = 0u;
    long long v60 = 0u;
    long long v57 = 0u;
    long long v58 = 0u;
    long long v55 = 0u;
    long long v56 = 0u;
    int v16 = *__error();
    int v17 = _SILogForLogForCategory(0);
    if (!os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
LABEL_16:
      *__error() = v16;
LABEL_17:
      _data_map32_unlock(a1);
      goto LABEL_18;
    }
    int v18 = *(_DWORD *)(a1 + 1388);
    uint64_t v19 = fd_name(*(void *)(a1 + 1264), (char *)&v55, 0x100uLL);
    *(_DWORD *)__s = 136316418;
    *(void *)&__s[4] = "_data_map32_get_offset_entry";
    *(_WORD *)&__s[12] = 1024;
    *(_DWORD *)&__s[14] = 424;
    *(_WORD *)&__s[18] = 1024;
    *(_DWORD *)&__s[20] = a2;
    *(_WORD *)&__s[24] = 1024;
    *(_DWORD *)&__s[26] = v18;
    *(_WORD *)&__s[30] = 2048;
    *(void *)&__s[32] = a1;
    *(_WORD *)&__s[40] = 2080;
    *(void *)&__s[42] = v19;
    uint64_t v20 = "%s:%d: invalid data id %d max %d %p %s";
    uint64_t v21 = v17;
    uint32_t v22 = 50;
LABEL_27:
    _os_log_error_impl(&dword_1BDAD0000, v21, OS_LOG_TYPE_ERROR, v20, (uint8_t *)__s, v22);
    goto LABEL_16;
  }
  uint64_t v9 = *(void *)(a1 + 1344);
  if (!v9) {
    goto LABEL_17;
  }
  uint64_t v10 = *(unsigned int *)(v9 + 4 * a2);
  if (v10 == 1) {
    goto LABEL_17;
  }
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  char v40 = 0;
  uint64_t v11 = *(unsigned int *)(a1 + 1320);
  if (v11 <= v10)
  {
    long long v69 = 0u;
    long long v70 = 0u;
    long long v67 = 0u;
    long long v68 = 0u;
    long long v65 = 0u;
    long long v66 = 0u;
    long long v63 = 0u;
    long long v64 = 0u;
    long long v61 = 0u;
    long long v62 = 0u;
    long long v59 = 0u;
    long long v60 = 0u;
    long long v57 = 0u;
    long long v58 = 0u;
    long long v55 = 0u;
    long long v56 = 0u;
    int v16 = *__error();
    uint32_t v23 = _SILogForLogForCategory(0);
    if (!os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
      goto LABEL_16;
    }
    uint64_t v27 = *(unsigned int *)(a1 + 1320);
    int v28 = fd_name(*(void *)(a1 + 1264), (char *)&v55, 0x100uLL);
    *(_DWORD *)__s = 136316418;
    *(void *)&__s[4] = "_data_map32_get_data_entry";
    *(_WORD *)&__s[12] = 1024;
    *(_DWORD *)&__s[14] = 448;
    *(_WORD *)&__s[18] = 2048;
    *(void *)&__s[20] = v10;
    *(_WORD *)&__s[28] = 2048;
    *(void *)&__s[30] = v27;
    *(_WORD *)&__s[38] = 2048;
    *(void *)&__s[40] = a1;
    *(_WORD *)&char __s[48] = 2080;
    *(void *)&__s[50] = v28;
    uint64_t v20 = "%s:%d: invalid data offset 0x%lx 0x%lx %p %s";
    uint64_t v21 = v23;
    uint32_t v22 = 58;
    goto LABEL_27;
  }
  data_entry_restore_32(*(void *)(a1 + 1312), v10, v11, (uint64_t)&v38, &v40, v6, v7, v8);
  if (v40)
  {
    uint64_t v12 = 0;
    long long v78 = 0u;
    long long v79 = 0u;
    long long v76 = 0u;
    long long v77 = 0u;
    long long v74 = 0u;
    long long v75 = 0u;
    long long v72 = 0u;
    long long v73 = 0u;
    memset(__s, 0, sizeof(__s));
    uint64_t v80 = 0;
    do
    {
      if (v10 + v12 >= (unint64_t)*(unsigned int *)(a1 + 1320)) {
        break;
      }
      size_t v13 = strlen(__s);
      sprintf(&__s[v13], "%d ", *(unsigned __int8 *)(*(void *)(a1 + 1312) + v10 + v12++));
    }
    while (v12 != 5);
    long long v69 = 0u;
    long long v70 = 0u;
    long long v67 = 0u;
    long long v68 = 0u;
    long long v65 = 0u;
    long long v66 = 0u;
    long long v63 = 0u;
    long long v64 = 0u;
    long long v61 = 0u;
    long long v62 = 0u;
    long long v59 = 0u;
    long long v60 = 0u;
    long long v57 = 0u;
    long long v58 = 0u;
    long long v55 = 0u;
    long long v56 = 0u;
    int v14 = *__error();
    size_t v15 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      uint32_t v29 = fd_name(*(void *)(a1 + 1264), (char *)&v55, 0x100uLL);
      uint64_t v30 = *(unsigned int *)(a1 + 1320);
      *(_DWORD *)buf = 136316674;
      int v42 = "_data_map32_get_data_entry";
      __int16 v43 = 1024;
      int v44 = 444;
      __int16 v45 = 2080;
      __int16 v46 = v29;
      __int16 v47 = 2048;
      uint64_t v48 = v10;
      __int16 v49 = 2048;
      uint64_t v50 = v30;
      __int16 v51 = 2048;
      uint64_t v52 = v38;
      __int16 v53 = 2080;
      __int16 v54 = __s;
      _os_log_error_impl(&dword_1BDAD0000, v15, OS_LOG_TYPE_ERROR, "%s:%d: data_entry_restore_32 failure: %s off: 0x%lx end: 0x%lx sz: 0x%lx sz bytes: %s", buf, 0x44u);
    }
    *__error() = v14;
    goto LABEL_17;
  }
  if (a3) {
    *a3 = (v38 - *(_DWORD *)(a1 + 1244));
  }
  if (*(void *)(a1 + 1440))
  {
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 1436));
    uint64_t v37 = *(void **)(a1 + 1440);
    if (v37) {
      bit_vector_set(v37, a2, v31, v32, v33, v34, v35, v36);
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 1436));
  }
  uint64_t v25 = v39;
  uint64_t v26 = *(unsigned int *)(a1 + 1244);
  _data_map32_unlock(a1);
  if (v25) {
    return v25 + v26;
  }
LABEL_18:
  uint64_t result = 0;
  if (a3) {
    *a3 = 0;
  }
  return result;
}

uint64_t data_map32_id_get(uint64_t a1, char *a2, size_t a3)
{
  return _data_map32_get_data_id(a1, *(_DWORD *)(a1 + 1244), a2, a3, 0);
}

uint64_t _data_map32_get_data_id(uint64_t a1, unsigned int a2, char *a3, size_t a4, int a5)
{
  unsigned int v9 = dm_hash(a1, (unsigned __int16 *)&a3[a2], a4 - a2);
  if (!_data_map32_rdlock(a1))
  {
    bucket_entry = (_DWORD *)_data_map32_get_bucket_entry(a1, v9, 0, a3, a4, v10, v11, v12);
    if (!bucket_entry) {
      goto LABEL_19;
    }
    size_t v15 = bucket_entry;
    unsigned int v16 = *bucket_entry;
    if (*bucket_entry)
    {
      if (v16 >= *(_DWORD *)(a1 + 1388)) {
        uint64_t v13 = 0;
      }
      else {
        uint64_t v13 = v16;
      }
      goto LABEL_20;
    }
    if (!a5) {
      goto LABEL_19;
    }
    v31[1] = a3;
    v31[0] = a4;
    int v17 = 1;
    if ((a4 & 0x3F80) != 0) {
      int v17 = 2;
    }
    if ((a4 & 0x1FC000) != 0) {
      int v17 = 3;
    }
    if ((a4 & 0xFE00000) != 0) {
      int v17 = 4;
    }
    int v18 = a4 >> 28 ? 5 : v17;
    uint64_t v19 = *(unsigned int *)(a1 + 1388);
    _data_map32_unlock(a1);
    if (_data_map32_wrlock(a1)) {
      goto LABEL_19;
    }
    if (v19 != *(_DWORD *)(a1 + 1388))
    {
      uint32_t v29 = (unsigned int *)_data_map32_get_bucket_entry(a1, v9, 0, a3, a4, v20, v21, v22);
      if (!v29 || (size_t v15 = v29, v13 = *v29, v19 = *(unsigned int *)(a1 + 1388), v13 >= v19))
      {
LABEL_19:
        uint64_t v13 = 0;
LABEL_20:
        _data_map32_unlock(a1);
        return v13;
      }
      if (v13)
      {
        _data_map32_set_seen_id(a1, v13);
        goto LABEL_20;
      }
    }
    int v30 = 0;
    uint64_t v13 = 0;
    if (_data_map32_grow(a1, (v18 + a4), &v30))
    {
      if (!*(unsigned char *)(a1 + 1451))
      {
        _data_map32_dirty(a1);
        *(unsigned char *)(a1 + 1451) = 1;
      }
      uint64_t v24 = *(void *)(a1 + 1344);
      unsigned int v25 = *(_DWORD *)(a1 + 1320);
      *(_DWORD *)(v24 + 4 * v19) = v25;
      if (!*(unsigned char *)(a1 + 1449))
      {
        _data_map32_dirty(a1);
        *(unsigned char *)(a1 + 1449) = 1;
        unsigned int v25 = *(_DWORD *)(v24 + 4 * v19);
      }
      *(_DWORD *)(a1 + 1320) = data_entry_store(*(void *)(a1 + 1312), v25, (unsigned int *)v31);
      ++*(_DWORD *)(a1 + 1388);
      if (!*(unsigned char *)(a1 + 1450))
      {
        _data_map32_dirty(a1);
        *(unsigned char *)(a1 + 1450) = 1;
      }
      if ((v30 & 4) != 0) {
        size_t v15 = (_DWORD *)_data_map32_get_bucket_entry(a1, v9, v19, 0, 0, v26, v27, v28);
      }
      *size_t v15 = v19;
      uint64_t v13 = v19;
    }
    goto LABEL_20;
  }
  return 0;
}

uint64_t data_map32_id_insert(uint64_t a1, char *a2, size_t a3)
{
  return _data_map32_get_data_id(a1, *(_DWORD *)(a1 + 1244), a2, a3, 1);
}

BOOL data_map32_valid(uint64_t a1)
{
  return *(_DWORD *)(a1 + 1456) == 0;
}

uint64_t _data_map32_match_address(uint64_t result, unint64_t a2)
{
  if (result)
  {
    unint64_t v2 = *(void *)(result + 1248);
    if (v2 != -1)
    {
      if (v2)
      {
        if (v2 <= a2)
        {
          uint64_t v3 = *(unsigned int *)(result + 1256);
          if (v2 + v3 > a2)
          {
            uint64_t v4 = *(void *)(result + 1264);
            uint64_t v5 = "data ro header";
            uint64_t v6 = a2;
            uint64_t v7 = v2;
            int v8 = v3;
LABEL_28:
            log_map_access_error(v6, v7, v3, v8, (uint64_t)v5, v4);
            return 1;
          }
        }
      }
      return 0;
    }
    unint64_t v9 = *(void *)(result + 1312);
    BOOL v10 = v9 + 1 < 2 || v9 > a2;
    if (v10 || (uint64_t v3 = *(unsigned int *)(result + 1304), v9 + v3 <= a2))
    {
      unint64_t v9 = *(void *)(result + 1344);
      BOOL v11 = v9 + 1 < 2 || v9 > a2;
      if (v11 || (uint64_t v3 = *(unsigned int *)(result + 1336), v9 + v3 <= a2))
      {
        unint64_t v9 = *(void *)(result + 1376);
        if (v9 + 1 < 2) {
          return 0;
        }
        if (v9 > a2) {
          return 0;
        }
        uint64_t v3 = *(unsigned int *)(result + 1372);
        if (v9 + v3 <= a2) {
          return 0;
        }
        int v8 = *(_DWORD *)(result + 1368);
        uint64_t v4 = *(void *)(result + 1360);
        uint64_t v5 = "data buckets";
      }
      else
      {
        int v8 = *(_DWORD *)(result + 1340);
        uint64_t v4 = *(void *)(result + 1328);
        uint64_t v5 = "data offsets";
      }
    }
    else
    {
      int v8 = *(_DWORD *)(result + 1308);
      uint64_t v4 = *(void *)(result + 1296);
      uint64_t v5 = "data storage";
    }
    uint64_t v6 = a2;
    uint64_t v7 = v9;
    goto LABEL_28;
  }
  return result;
}

int *log_map_access_error(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  memset(&v19, 0, sizeof(v19));
  memset(v38, 0, sizeof(v38));
  int v12 = fd_parent_fd(a6);
  uint64_t v13 = fd_name(a6, (char *)v38, 0x100uLL);
  if (fstatat(v12, v13, &v19, 32) == -1) {
    int v14 = *__error();
  }
  else {
    int v14 = 0;
  }
  int v15 = *__error();
  unsigned int v16 = _SILogForLogForCategory(0);
  os_log_type_t v17 = gSILogLevels[0] < 3;
  if (os_log_type_enabled(v16, (os_log_type_t)(gSILogLevels[0] < 3)))
  {
    *(_DWORD *)buf = 136317186;
    uint64_t v21 = a5;
    __int16 v22 = 2080;
    uint32_t v23 = v13;
    __int16 v24 = 2048;
    uint64_t v25 = a1;
    __int16 v26 = 2048;
    uint64_t v27 = a2;
    __int16 v28 = 2048;
    uint64_t v29 = a2 + a3;
    __int16 v30 = 1024;
    int v31 = a4;
    __int16 v32 = 1024;
    int v33 = v14;
    __int16 v34 = 1024;
    dev_t st_dev = v19.st_dev;
    __int16 v36 = 2048;
    __darwin_ino64_t st_ino = v19.st_ino;
    _os_log_impl(&dword_1BDAD0000, v16, v17, "*warn* Got exception on %s %s addr:%p start:%p map end:%p file end:%d sres:%d dev:%d ino:%lld", buf, 0x50u);
  }
  uint64_t result = __error();
  *uint64_t result = v15;
  return result;
}

uint64_t data_map32_get_data_offset_locked(uint64_t a1, unsigned int a2)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a1 + 1388) <= a2)
  {
    memset(v30, 0, sizeof(v30));
    int v13 = *__error();
    int v14 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      int v16 = *(_DWORD *)(a1 + 1388);
      os_log_type_t v17 = fd_name(*(void *)(a1 + 1264), (char *)v30, 0x100uLL);
      int v18 = 136316418;
      stat v19 = "_data_map32_get_offset_entry";
      __int16 v20 = 1024;
      int v21 = 424;
      __int16 v22 = 1024;
      unsigned int v23 = a2;
      __int16 v24 = 1024;
      int v25 = v16;
      __int16 v26 = 2048;
      uint64_t v27 = a1;
      __int16 v28 = 2080;
      uint64_t v29 = v17;
      _os_log_error_impl(&dword_1BDAD0000, v14, OS_LOG_TYPE_ERROR, "%s:%d: invalid data id %d max %d %p %s", (uint8_t *)&v18, 0x32u);
    }
    unsigned int v5 = 0;
    *__error() = v13;
  }
  else
  {
    uint64_t v4 = *(void *)(a1 + 1344);
    if (!v4) {
      return 0;
    }
    unsigned int v5 = *(_DWORD *)(v4 + 4 * a2);
    if (v5 == 1)
    {
      return 0;
    }
    else if (*(void *)(a1 + 1440))
    {
      os_unfair_lock_lock((os_unfair_lock_t)(a1 + 1436));
      int v12 = *(void **)(a1 + 1440);
      if (v12) {
        bit_vector_set(v12, a2, v6, v7, v8, v9, v10, v11);
      }
      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 1436));
    }
  }
  return v5;
}

uint64_t data_map32_setup_mappings(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  if ((unint64_t)*a2 <= 3) {
    data_map32_setup_mappings_cold_1(a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  }
  uint64_t v9 = (void *)a2[1];
  void *v9 = *(void *)(a1 + 1312);
  v9[1] = *(unsigned int *)(a1 + 1304);
  uint64_t v10 = v9 + 1;
  uint64_t v11 = *(void *)(a1 + 1344);
  v9[2] = *(void *)(a1 + 1296);
  v9[3] = v11;
  uint64_t v12 = *(void *)(a1 + 1328);
  v9[4] = *(unsigned int *)(a1 + 1336);
  v9[5] = v12;
  uint64_t v13 = *(unsigned int *)(a1 + 1372);
  v9[6] = *(void *)(a1 + 1376);
  v9[7] = v13;
  uint64_t v14 = *(void *)(a1 + 1248);
  v9[8] = *(void *)(a1 + 1360);
  v9[9] = v14;
  uint64_t v15 = *(void *)(a1 + 1264);
  v9[10] = *(unsigned int *)(a1 + 1256);
  v9[11] = v15;
  uint64_t v16 = v8 - 4;
  if (v16)
  {
    os_log_type_t v17 = v9 + 12;
    do
    {
      *os_log_type_t v17 = -1;
      v17 += 3;
      --v16;
    }
    while (v16);
    *uint64_t v10 = 0;
    v10[1] = 0;
  }
  return 0;
}

uint64_t data_map32_garbage_collect_setup(uint64_t a1)
{
  _data_map32_wrlock(a1);
  CFIndex v2 = *(unsigned int *)(a1 + 1388);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 1436));
  if (*(void *)(a1 + 1440))
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 1436));
    _data_map32_unlock(a1);
    return 22;
  }
  else
  {
    uint64_t v4 = malloc_type_malloc(0x18uLL, 0x10200403ED2C137uLL);
    if (!v4) {
      data_map32_garbage_collect_setup_cold_1(0, v5, v6, v7, v8, v9, v10, v11);
    }
    uint64_t v12 = v4;
    CFAllocatorRef v13 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    if (v2 <= 128) {
      CFIndex v2 = 128;
    }
    *uint64_t v12 = 0;
    v12[1] = v2;
    Mutable = CFBitVectorCreateMutable(v13, v2);
    v12[2] = Mutable;
    CFBitVectorSetCount(Mutable, v2);
    if (!v12[2]) {
      data_map32_garbage_collect_setup_cold_2(v15, v16, v17, v18, v19, v20, v21, v22);
    }
    *(void *)(a1 + 1440) = v12;
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 1436));
    return 0;
  }
}

uint64_t data_map32_garbage_compact_collect_commit(uint64_t a1, void *a2, unsigned char *a3, char a4)
{
  _data_map32_wrlock(a1);
  if ((a4 & 1) == 0 && !*a3)
  {
    if (a2[1])
    {
      uint64_t v8 = *(unsigned int *)(a1 + 1388);
      if (a2[2] != v8
        || (uint64_t v9 = a2[3],
            v11.length = (v8 - 1),
            v11.location = 0,
            v9 != CFBitVectorGetCountOfBit(*(CFBitVectorRef *)(*(void *)(a1 + 1440) + 16), v11, 1u)))
      {
        *a3 = 1;
      }
    }
  }
  return 0;
}

uint64_t data_map32_garbage_collect_handle_deletes(uint64_t a1, int64x2_t *a2)
{
  uint64_t v93 = *MEMORY[0x1E4F143B8];
  if (a2->i64[1])
  {
    bzero(v92, 0x400uLL);
    bzero(v91, 0x400uLL);
    munmap(*(void **)(a1 + 1312), *(unsigned int *)(a1 + 1304));
    *(void *)(a1 + 1312) = a2[2].i64[1];
    *(int32x2_t *)(a1 + 1304) = vmovn_s64(a2[5]);
    *(_DWORD *)(a1 + 1320) = a2[6].i64[0];
    a2[2].i64[1] = -1;
    fd_sync(a2[2].i64[0], 0, 1);
    fd_sync(a2[3].i64[0], 1, 1);
    munmap(*(void **)(a1 + 1344), *(unsigned int *)(a1 + 1336));
    *(void *)(a1 + 1344) = a2[3].i64[1];
    *(_DWORD *)(a1 + 1340) = a2[4].i64[1];
    a2[3].i64[1] = -1;
    long long v89 = 0u;
    long long v90 = 0u;
    long long v87 = 0u;
    long long v88 = 0u;
    long long v85 = 0u;
    long long v86 = 0u;
    long long v83 = 0u;
    long long v84 = 0u;
    long long v81 = 0u;
    long long v82 = 0u;
    long long v79 = 0u;
    long long v80 = 0u;
    long long v77 = 0u;
    long long v78 = 0u;
    long long v75 = 0u;
    long long v76 = 0u;
    long long v73 = 0u;
    long long v74 = 0u;
    long long v71 = 0u;
    long long v72 = 0u;
    long long v69 = 0u;
    long long v70 = 0u;
    long long v67 = 0u;
    long long v68 = 0u;
    long long v65 = 0u;
    long long v66 = 0u;
    long long v63 = 0u;
    long long v64 = 0u;
    long long v61 = 0u;
    long long v62 = 0u;
    long long v59 = 0u;
    long long v60 = 0u;
    __buf[0] = 0x6D6F76650A00;
    __buf[1] = 0x3232323200000003;
    __strlcpy_chk();
    uint64_t v4 = (const float *)&a2->i32[2];
    int32x2_t v5 = (int32x2_t)vld1_dup_f32(v4);
    *(int32x2_t *)(a1 + 1392) = vadd_s32(*(int32x2_t *)(a1 + 1392), v5);
    *(_DWORD *)(a1 + 1400) = 0;
    _data_map32_dirty(a1);
    _data_map32_sync_data(a1, 1);
    if (!*(_DWORD *)(a1 + 1456) && *(_DWORD *)(*(void *)(a1 + 1288) + 16) != 1)
    {
      uint64_t v6 = (char *)malloc_type_calloc(1uLL, 0x38uLL, 0x100004021716A34uLL);
      uint64_t v7 = *(long long **)(a1 + 1288);
      uint64_t v8 = *((void *)v7 + 6);
      long long v9 = v7[2];
      long long v10 = *v7;
      *((_OWORD *)v6 + 1) = v7[1];
      *((_OWORD *)v6 + 2) = v9;
      *((void *)v6 + 6) = v8;
      *(_OWORD *)uint64_t v6 = v10;
      *(void *)&long long v9 = *(void *)(v6 + 20);
      *((_DWORD *)v6 + 10) = *((_DWORD *)v6 + 7);
      *((_DWORD *)v6 + 5) = *(_DWORD *)(a1 + 1320);
      *(void *)&long long v10 = *(void *)(a1 + 1384);
      *((void *)&v10 + 1) = v9;
      *(_OWORD *)(v6 + 24) = v10;
      *((_DWORD *)v6 + 4) = 2;
      sibling_with_prefix = fd_create_sibling_with_prefix(*(void *)(a1 + 1264), "tmp.", 1538);
      fd_pwrite((uint64_t)sibling_with_prefix, *(void *)(a1 + 1288), 0x38uLL, 0);
      fd_sync((uint64_t)sibling_with_prefix, 1, 1);
      fd_release(sibling_with_prefix);
      long long v56 = 0u;
      long long v57 = 0u;
      long long v54 = 0u;
      long long v55 = 0u;
      long long v52 = 0u;
      long long v53 = 0u;
      long long v50 = 0u;
      long long v51 = 0u;
      long long v48 = 0u;
      long long v49 = 0u;
      long long v46 = 0u;
      long long v47 = 0u;
      long long v44 = 0u;
      long long v45 = 0u;
      *(_OWORD *)__str = 0u;
      long long v43 = 0u;
      int v12 = *__error();
      CFAllocatorRef v13 = _SILogForLogForCategory(7);
      os_log_type_t v14 = 2 * (dword_1EA0DBB6C < 4);
      if (os_log_type_enabled(v13, v14))
      {
        uint64_t v15 = fd_name(*(void *)(a1 + 1264), __str, 0x100uLL);
        int v16 = *(_DWORD *)(a1 + 1388) - 1;
        *(_DWORD *)buf = 136315394;
        uint64_t v37 = (uint64_t)v15;
        __int16 v38 = 1024;
        LODWORD(v39) = v16;
        _os_log_impl(&dword_1BDAD0000, v13, v14, "%s complete write tmp header with count: %d", buf, 0x12u);
      }
      *__error() = v12;
    }
    uint64_t v17 = fd_parent_fd(*(void *)(a1 + 1296));
    int v18 = si_openat_protected(v17, "tmp.movePlan", 1538, 384, 3);
    pwrite(v18, __buf, 0x210uLL, 0);
    fcntl(v18, 85);
    bzero(__str, 0x400uLL);
    snprintf(__str, 0x400uLL, "tmp.%s.rehash", (const char *)(a1 + 220));
    uint64_t v19 = fd_parent_fd(*(void *)(a1 + 1296));
    int v20 = si_openat_protected(v19, __str, 1538, 384, 3);
    close(v20);
    uint64_t v21 = fd_name(*(void *)(a1 + 1296), v92, 0x400uLL);
    int v22 = *__error();
    unsigned int v23 = _SILogForLogForCategory(0);
    os_log_type_t v24 = 2 * (gSILogLevels[0] < 4);
    if (os_log_type_enabled(v23, v24))
    {
      int v25 = fd_realpath((_DWORD *)a2[2].i64[0], v91);
      *(_DWORD *)buf = 134218498;
      uint64_t v37 = a1;
      __int16 v38 = 2080;
      uint64_t v39 = v25;
      __int16 v40 = 2080;
      char v41 = v21;
      _os_log_impl(&dword_1BDAD0000, v23, v24, "rename %p %s to %s", buf, 0x20u);
    }
    *__error() = v22;
    fd_rename(a2[2].i64[0], v21);
    __int16 v26 = *(atomic_uint **)(a1 + 1296);
    *(void *)(a1 + 1296) = a2[2].i64[0];
    fd_release(v26);
    a2[2].i64[0] = 0;
    uint64_t v27 = fd_name(*(void *)(a1 + 1328), v92, 0x400uLL);
    int v28 = *__error();
    uint64_t v29 = _SILogForLogForCategory(0);
    os_log_type_t v30 = 2 * (gSILogLevels[0] < 4);
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = fd_realpath((_DWORD *)a2[3].i64[0], v91);
      *(_DWORD *)buf = 134218498;
      uint64_t v37 = a1;
      __int16 v38 = 2080;
      uint64_t v39 = v31;
      __int16 v40 = 2080;
      char v41 = v27;
      _os_log_impl(&dword_1BDAD0000, v29, v30, "rename %p %s to %s", buf, 0x20u);
    }
    *__error() = v28;
    fd_rename(a2[3].i64[0], v27);
    __int16 v32 = *(atomic_uint **)(a1 + 1328);
    *(void *)(a1 + 1328) = a2[3].i64[0];
    fd_release(v32);
    a2[3].i64[0] = 0;
    _data_map32_sync_header(a1, 1);
    data_map32_commit_sync(a1);
    data_map32_shadow(a1);
    data_map32_commit_shadow(a1);
    data_map32_commit_shadow_complete(a1);
    int v33 = fd_parent_fd(*(void *)(a1 + 1296));
    unlinkat(v33, "tmp.movePlan", 2048);
    close(v18);
    if (!*(unsigned char *)(a1 + 1450))
    {
      _data_map32_dirty(a1);
      *(unsigned char *)(a1 + 1450) = 1;
    }
    _data_map32_rehash(a1);
    _data_map32_sync_data(a1, 1);
    _data_map32_sync_header(a1, 1);
    data_map32_shadow(a1);
    data_map32_commit_shadow(a1);
    data_map32_commit_shadow_complete(a1);
    int v34 = fd_parent_fd(*(void *)(a1 + 1296));
    unlinkat(v34, __str, 2048);
  }
  return 0;
}

uint64_t _data_map32_dirty(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 1288);
  if (*(_DWORD *)(v1 + 16))
  {
    uint64_t v2 = result;
    *(_DWORD *)(v1 + 16) = 0;
    fd_pwrite(*(void *)(result + 1264), v1, 0x38uLL, 0);
    uint64_t v3 = *(void *)(v2 + 1264);
    return fd_sync(v3, 0, 1);
  }
  return result;
}

void data_map32_cleanup_compact_ctx(void *a1)
{
  uint64_t v2 = (void *)a1[5];
  if (v2 != (void *)-1) {
    munmap(v2, a1[10]);
  }
  uint64_t v3 = a1[4];
  if (v3)
  {
    fd_unlink(v3);
    fd_release((atomic_uint *)a1[4]);
  }
  uint64_t v4 = (void *)a1[7];
  if (v4 != (void *)-1) {
    munmap(v4, a1[8]);
  }
  uint64_t v5 = a1[6];
  if (v5)
  {
    fd_unlink(v5);
    uint64_t v6 = (atomic_uint *)a1[6];
    fd_release(v6);
  }
}

uint64_t data_map32_garbage_collect(uint64_t a1, unsigned int a2, char a3, uint64_t a4)
{
  uint64_t v208 = *MEMORY[0x1E4F143B8];
  if (!*(void *)(a1 + 1440)) {
    return 0;
  }
  _data_map32_wrlock(a1);
  int v8 = *(_DWORD *)(a1 + 1388);
  unsigned int v9 = v8 - 1;
  if (v8 - 1 <= a2) {
    goto LABEL_8;
  }
  uint64_t v10 = *(void *)(a1 + 1440);
  v209.location = a2;
  v209.length = v8 - a2;
  unsigned int FirstIndexOfBit = CFBitVectorGetFirstIndexOfBit(*(CFBitVectorRef *)(v10 + 16), v209, 0);
  unsigned int v15 = FirstIndexOfBit;
  uint64_t v16 = 0;
  if (FirstIndexOfBit < a2) {
    goto LABEL_9;
  }
  if (v9 < FirstIndexOfBit || *(_DWORD *)(a1 + 1388) <= FirstIndexOfBit) {
    goto LABEL_8;
  }
  uint64_t v141 = a4;
  char v143 = a3;
  while (1)
  {
    if (*(void *)v10 > (uint64_t)v15 && CFBitVectorGetBitAtIndex(*(CFBitVectorRef *)(v10 + 16), v15)) {
      goto LABEL_27;
    }
    if (*(_DWORD *)(a1 + 1388) > v15) {
      break;
    }
    long long v170 = 0u;
    long long v169 = 0u;
    long long v168 = 0u;
    long long v167 = 0u;
    long long v166 = 0u;
    long long v165 = 0u;
    long long v164 = 0u;
    long long v163 = 0u;
    long long v162 = 0u;
    long long v161 = 0u;
    long long v160 = 0u;
    long long v159 = 0u;
    long long v158 = 0u;
    memset(v157, 0, sizeof(v157));
    int v27 = *__error();
    uint64_t v35 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
    {
      int v38 = *(_DWORD *)(a1 + 1388);
      uint64_t v39 = fd_name(*(void *)(a1 + 1264), (char *)v157, 0x100uLL);
      *(_DWORD *)__s = 136316418;
      *(void *)&__s[4] = "_data_map32_get_offset_entry";
      *(_WORD *)&__s[12] = 1024;
      *(_DWORD *)&__s[14] = 424;
      *(_WORD *)&__s[18] = 1024;
      *(_DWORD *)&__s[20] = v15;
      *(_WORD *)&__s[24] = 1024;
      *(_DWORD *)&__s[26] = v38;
      *(_WORD *)&__s[30] = 2048;
      *(void *)&__s[32] = a1;
      *(_WORD *)&__s[40] = 2080;
      *(void *)&__s[42] = v39;
      uint64_t v31 = (uint8_t *)__s;
      __int16 v32 = v35;
      int v33 = "%s:%d: invalid data id %d max %d %p %s";
      uint32_t v34 = 50;
      goto LABEL_32;
    }
LABEL_26:
    *__error() = v27;
LABEL_27:
    if (++v15 > v9) {
      goto LABEL_8;
    }
  }
  uint64_t v19 = *(void *)(a1 + 1344);
  if (!v19) {
    goto LABEL_27;
  }
  uint64_t v20 = *(unsigned int *)(v19 + 4 * v15);
  if (v20 < 2) {
    goto LABEL_27;
  }
  *(void *)&buf[8] = 0;
  *(void *)buf = 0;
  LOBYTE(v171) = 0;
  uint64_t v21 = *(unsigned int *)(a1 + 1320);
  if (v21 <= v20)
  {
    long long v170 = 0u;
    long long v169 = 0u;
    long long v168 = 0u;
    long long v167 = 0u;
    long long v166 = 0u;
    long long v165 = 0u;
    long long v164 = 0u;
    long long v163 = 0u;
    long long v162 = 0u;
    long long v161 = 0u;
    long long v160 = 0u;
    long long v159 = 0u;
    long long v158 = 0u;
    memset(v157, 0, sizeof(v157));
    int v27 = *__error();
    __int16 v36 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
    {
      uint64_t v139 = *(unsigned int *)(a1 + 1320);
      uint64_t v37 = fd_name(*(void *)(a1 + 1264), (char *)v157, 0x100uLL);
      *(_DWORD *)__s = 136316418;
      *(void *)&__s[4] = "_data_map32_get_data_entry";
      *(_WORD *)&__s[12] = 1024;
      *(_DWORD *)&__s[14] = 448;
      *(_WORD *)&__s[18] = 2048;
      *(void *)&__s[20] = v20;
      *(_WORD *)&__s[28] = 2048;
      *(void *)&__s[30] = v139;
      *(_WORD *)&__s[38] = 2048;
      *(void *)&__s[40] = a1;
      *(_WORD *)&char __s[48] = 2080;
      *(void *)&__s[50] = v37;
      uint64_t v31 = (uint8_t *)__s;
      __int16 v32 = v36;
      int v33 = "%s:%d: invalid data offset 0x%lx 0x%lx %p %s";
      uint32_t v34 = 58;
LABEL_32:
      _os_log_error_impl(&dword_1BDAD0000, v32, OS_LOG_TYPE_ERROR, v33, v31, v34);
      goto LABEL_26;
    }
    goto LABEL_26;
  }
  data_entry_restore_32(*(void *)(a1 + 1312), v20, v21, (uint64_t)buf, &v171, v12, v13, v14);
  if ((_BYTE)v171)
  {
    uint64_t v25 = 0;
    uint64_t v156 = 0;
    long long v154 = 0u;
    long long v155 = 0u;
    long long v152 = 0u;
    long long v153 = 0u;
    long long v151 = 0u;
    long long v149 = 0u;
    long long v150 = 0u;
    long long v148 = 0u;
    memset(__s, 0, sizeof(__s));
    do
    {
      if (v20 + v25 >= (unint64_t)*(unsigned int *)(a1 + 1320)) {
        break;
      }
      size_t v26 = strlen(__s);
      sprintf(&__s[v26], "%d ", *(unsigned __int8 *)(*(void *)(a1 + 1312) + v20 + v25++));
    }
    while (v25 != 5);
    long long v170 = 0u;
    long long v169 = 0u;
    long long v168 = 0u;
    long long v167 = 0u;
    long long v166 = 0u;
    long long v165 = 0u;
    long long v164 = 0u;
    long long v163 = 0u;
    long long v162 = 0u;
    long long v161 = 0u;
    long long v160 = 0u;
    long long v159 = 0u;
    long long v158 = 0u;
    memset(v157, 0, sizeof(v157));
    int v27 = *__error();
    int v28 = _SILogForLogForCategory(0);
    if (!os_log_type_enabled(v28, OS_LOG_TYPE_ERROR)) {
      goto LABEL_26;
    }
    uint64_t v29 = fd_name(*(void *)(a1 + 1264), (char *)v157, 0x100uLL);
    uint64_t v30 = *(unsigned int *)(a1 + 1320);
    *(_DWORD *)v185 = 136316674;
    *(void *)&v185[4] = "_data_map32_get_data_entry";
    *(_WORD *)&v185[12] = 1024;
    *(_DWORD *)&v185[14] = 444;
    *(_WORD *)&v185[18] = 2080;
    *(void *)&v185[20] = v29;
    *(_WORD *)&v185[28] = 2048;
    *(void *)&v185[30] = v20;
    *(_WORD *)&v185[38] = 2048;
    *(void *)&v185[40] = v30;
    LOWORD(v186[0]) = 2048;
    *(void *)((char *)v186 + 2) = *(unsigned int *)buf;
    HIWORD(v186[2]) = 2080;
    *(void *)&v186[3] = __s;
    uint64_t v31 = v185;
    __int16 v32 = v28;
    int v33 = "%s:%d: data_entry_restore_32 failure: %s off: 0x%lx end: 0x%lx sz: 0x%lx sz bytes: %s";
    uint32_t v34 = 68;
    goto LABEL_32;
  }
  if (!v15) {
    goto LABEL_8;
  }
  uint64_t v40 = *(unsigned int *)(a1 + 1388);
  unsigned int v41 = v40 - 1;
  if ((v143 & 4) != 0 || !v141)
  {
    if (v41 < v15)
    {
      LODWORD(v84) = 0;
LABEL_95:
      if ((v143 & 2) != 0)
      {
        int v85 = *__error();
        long long v86 = _SILogForLogForCategory(0);
        os_log_type_t v87 = 2 * (gSILogLevels[0] < 4);
        if (os_log_type_enabled(v86, v87))
        {
          *(_DWORD *)v157 = 67109376;
          *(_DWORD *)&v157[4] = v84;
          *(_WORD *)&v157[8] = 2048;
          *(void *)&v157[10] = a1;
          _os_log_impl(&dword_1BDAD0000, v86, v87, "Found %d deleted strings from %p", v157, 0x12u);
        }
        uint64_t v16 = 0;
        *__error() = v85;
        goto LABEL_9;
      }
LABEL_8:
      uint64_t v16 = 0;
      goto LABEL_9;
    }
    uint64_t v84 = 0;
    int v142 = *(_DWORD *)(a1 + 1244);
    while (1)
    {
      if (*(void *)v10 <= (uint64_t)v15 || !CFBitVectorGetBitAtIndex(*(CFBitVectorRef *)(v10 + 16), v15))
      {
        if (*(_DWORD *)(a1 + 1388) <= v15)
        {
          long long v170 = 0u;
          long long v169 = 0u;
          long long v168 = 0u;
          long long v167 = 0u;
          long long v166 = 0u;
          long long v165 = 0u;
          long long v164 = 0u;
          long long v163 = 0u;
          long long v162 = 0u;
          long long v161 = 0u;
          long long v160 = 0u;
          long long v159 = 0u;
          long long v158 = 0u;
          memset(v157, 0, sizeof(v157));
          int v101 = *__error();
          long long v102 = _SILogForLogForCategory(0);
          if (os_log_type_enabled(v102, OS_LOG_TYPE_ERROR))
          {
            int v105 = *(_DWORD *)(a1 + 1388);
            uint64_t v106 = fd_name(*(void *)(a1 + 1264), (char *)v157, 0x100uLL);
            *(_DWORD *)__s = 136316418;
            *(void *)&__s[4] = "_data_map32_get_offset_entry";
            *(_WORD *)&__s[12] = 1024;
            *(_DWORD *)&__s[14] = 424;
            *(_WORD *)&__s[18] = 1024;
            *(_DWORD *)&__s[20] = v15;
            *(_WORD *)&__s[24] = 1024;
            *(_DWORD *)&__s[26] = v105;
            *(_WORD *)&__s[30] = 2048;
            *(void *)&__s[32] = a1;
            *(_WORD *)&__s[40] = 2080;
            *(void *)&__s[42] = v106;
            _os_log_error_impl(&dword_1BDAD0000, v102, OS_LOG_TYPE_ERROR, "%s:%d: invalid data id %d max %d %p %s", (uint8_t *)__s, 0x32u);
          }
          *__error() = v101;
          goto LABEL_118;
        }
        uint64_t v88 = *(void *)(a1 + 1344);
        if (v88)
        {
          uint64_t v89 = *(unsigned int *)(v88 + 4 * v15);
          if (v89 >= 2) {
            break;
          }
        }
      }
LABEL_118:
      if (++v15 > v41) {
        goto LABEL_95;
      }
    }
    *(void *)&buf[8] = 0;
    *(void *)buf = 0;
    LOBYTE(v171) = 0;
    uint64_t v90 = *(unsigned int *)(a1 + 1320);
    if (v90 <= v89)
    {
      long long v170 = 0u;
      long long v169 = 0u;
      long long v168 = 0u;
      long long v167 = 0u;
      long long v166 = 0u;
      long long v165 = 0u;
      long long v164 = 0u;
      long long v163 = 0u;
      long long v162 = 0u;
      long long v161 = 0u;
      long long v160 = 0u;
      long long v159 = 0u;
      long long v158 = 0u;
      memset(v157, 0, sizeof(v157));
      int v93 = *__error();
      long long v103 = _SILogForLogForCategory(0);
      if (!os_log_type_enabled(v103, OS_LOG_TYPE_ERROR))
      {
LABEL_116:
        *__error() = v93;
        uint64_t v104 = v84;
LABEL_117:
        uint64_t v84 = v104;
        goto LABEL_118;
      }
      size_t v137 = *(unsigned int *)(a1 + 1320);
      long long v112 = fd_name(*(void *)(a1 + 1264), (char *)v157, 0x100uLL);
      *(_DWORD *)__s = 136316418;
      *(void *)&__s[4] = "_data_map32_get_data_entry";
      *(_WORD *)&__s[12] = 1024;
      *(_DWORD *)&__s[14] = 448;
      *(_WORD *)&__s[18] = 2048;
      *(void *)&__s[20] = v89;
      *(_WORD *)&__s[28] = 2048;
      *(void *)&__s[30] = v137;
      *(_WORD *)&__s[38] = 2048;
      *(void *)&__s[40] = a1;
      *(_WORD *)&char __s[48] = 2080;
      *(void *)&__s[50] = v112;
      int v97 = (uint8_t *)__s;
      long long v98 = v103;
      long long v99 = "%s:%d: invalid data offset 0x%lx 0x%lx %p %s";
      uint32_t v100 = 58;
LABEL_135:
      _os_log_error_impl(&dword_1BDAD0000, v98, OS_LOG_TYPE_ERROR, v99, v97, v100);
      goto LABEL_116;
    }
    data_entry_restore_32(*(void *)(a1 + 1312), v89, v90, (uint64_t)buf, &v171, v22, v23, v24);
    if ((_BYTE)v171)
    {
      uint64_t v91 = 0;
      uint64_t v156 = 0;
      long long v154 = 0u;
      long long v155 = 0u;
      long long v152 = 0u;
      long long v153 = 0u;
      long long v151 = 0u;
      long long v149 = 0u;
      long long v150 = 0u;
      long long v148 = 0u;
      memset(__s, 0, sizeof(__s));
      do
      {
        if (v89 + v91 >= (unint64_t)*(unsigned int *)(a1 + 1320)) {
          break;
        }
        size_t v92 = strlen(__s);
        sprintf(&__s[v92], "%d ", *(unsigned __int8 *)(*(void *)(a1 + 1312) + v89 + v91++));
      }
      while (v91 != 5);
      long long v170 = 0u;
      long long v169 = 0u;
      long long v168 = 0u;
      long long v167 = 0u;
      long long v166 = 0u;
      long long v165 = 0u;
      long long v164 = 0u;
      long long v163 = 0u;
      long long v162 = 0u;
      long long v161 = 0u;
      long long v160 = 0u;
      long long v159 = 0u;
      long long v158 = 0u;
      memset(v157, 0, sizeof(v157));
      int v93 = *__error();
      long long v94 = _SILogForLogForCategory(0);
      if (!os_log_type_enabled(v94, OS_LOG_TYPE_ERROR)) {
        goto LABEL_116;
      }
      uint64_t v95 = fd_name(*(void *)(a1 + 1264), (char *)v157, 0x100uLL);
      uint64_t v96 = *(unsigned int *)(a1 + 1320);
      *(_DWORD *)v185 = 136316674;
      *(void *)&v185[4] = "_data_map32_get_data_entry";
      *(_WORD *)&v185[12] = 1024;
      *(_DWORD *)&v185[14] = 444;
      *(_WORD *)&v185[18] = 2080;
      *(void *)&v185[20] = v95;
      *(_WORD *)&v185[28] = 2048;
      *(void *)&v185[30] = v89;
      *(_WORD *)&v185[38] = 2048;
      *(void *)&v185[40] = v96;
      LOWORD(v186[0]) = 2048;
      *(void *)((char *)v186 + 2) = *(unsigned int *)buf;
      HIWORD(v186[2]) = 2080;
      *(void *)&v186[3] = __s;
      int v97 = v185;
      long long v98 = v94;
      long long v99 = "%s:%d: data_entry_restore_32 failure: %s off: 0x%lx end: 0x%lx sz: 0x%lx sz bytes: %s";
      uint32_t v100 = 68;
      goto LABEL_135;
    }
    char v107 = v143;
    if ((v143 & 2) == 0)
    {
LABEL_127:
      uint64_t v104 = v84 + 1;
      if ((v107 & 4) == 0)
      {
        if (!v84)
        {
          if (!*(unsigned char *)(a1 + 1449))
          {
            _data_map32_dirty(a1);
            *(unsigned char *)(a1 + 1449) = 1;
          }
          if (!*(unsigned char *)(a1 + 1451))
          {
            _data_map32_dirty(a1);
            *(unsigned char *)(a1 + 1451) = 1;
          }
        }
        *(_DWORD *)(v88 + 4 * v15) = 1;
        bzero(*(void **)&buf[8], (*(_DWORD *)buf + v142));
      }
      goto LABEL_117;
    }
    if ((v143 & 8) != 0)
    {
      char v107 = v143;
      if (gSILogLevels[0] < 5) {
        goto LABEL_127;
      }
      int v136 = *__error();
      long long v113 = _SILogForLogForCategory(0);
      if (!os_log_type_enabled(v113, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_139;
      }
      uint64_t v115 = *(void *)&buf[8] + *(unsigned int *)(a1 + 1244);
      *(_DWORD *)v157 = 67109890;
      *(_DWORD *)&v157[4] = v15;
      *(_WORD *)&v157[8] = 1024;
      *(_DWORD *)&v157[10] = *(_DWORD *)buf;
      *(_WORD *)&v157[14] = 2080;
      *(void *)&v157[16] = v115;
      *(_WORD *)&v157[24] = 2048;
      *(void *)&v157[26] = a1;
      long long v109 = v113;
      long long v110 = "Delete data for id:%d size:%d %s from %p";
      uint32_t v111 = 34;
    }
    else
    {
      char v107 = v143;
      if (gSILogLevels[0] < 5) {
        goto LABEL_127;
      }
      int v136 = *__error();
      long long v108 = _SILogForLogForCategory(0);
      if (!os_log_type_enabled(v108, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_139;
      }
      *(_DWORD *)v157 = 67109632;
      *(_DWORD *)&v157[4] = v15;
      *(_WORD *)&v157[8] = 1024;
      *(_DWORD *)&v157[10] = *(_DWORD *)buf;
      *(_WORD *)&v157[14] = 2048;
      *(void *)&v157[16] = a1;
      long long v109 = v108;
      long long v110 = "Delete data for id:%d size:%d from %p";
      uint32_t v111 = 24;
    }
    _os_log_impl(&dword_1BDAD0000, v109, OS_LOG_TYPE_DEFAULT, v110, v157, v111);
LABEL_139:
    *__error() = v136;
    char v107 = v143;
    goto LABEL_127;
  }
  bzero(v157, 0x400uLL);
  bzero(__s, 0x400uLL);
  int v42 = *(unsigned __int8 *)(a1 + 1454);
  *(_DWORD *)uint64_t v141 = 842150450;
  *(void *)(v141 + 8) = 0;
  *(void *)(v141 + 16) = v40;
  v210.location = 0;
  v210.length = (v40 - 1);
  *(void *)(v141 + 24) = CFBitVectorGetCountOfBit(*(CFBitVectorRef *)(v10 + 16), v210, 1u);
  long long v43 = fd_name(*(void *)(a1 + 1296), (char *)v157, 0x400uLL);
  snprintf(__s, 0x400uLL, "tmp.%s", v43);
  if (v42) {
    unsigned __int8 v44 = 3;
  }
  else {
    unsigned __int8 v44 = 0;
  }
  sibling_protected = fd_create_sibling_protected(*(void *)(a1 + 1296), __s, 1538, v44);
  if (fd_truncate((uint64_t)sibling_protected, *(unsigned int *)(a1 + 1308)) == -1)
  {
    v116 = __error();
    long long v48 = 0;
    size_t v117 = 0;
    size_t v118 = 0;
    if (*v116) {
      uint64_t v16 = *v116;
    }
    else {
      uint64_t v16 = 0xFFFFFFFFLL;
    }
LABEL_149:
    uint64_t v123 = -1;
    uint64_t v50 = -1;
    goto LABEL_157;
  }
  size_t v46 = *MEMORY[0x1E4F14B00];
  uint64_t v140 = fd_mmap((uint64_t)sibling_protected);
  if (v140 == -1)
  {
    unsigned int v119 = *__error();
    if (v119) {
      uint64_t v16 = v119;
    }
    else {
      uint64_t v16 = 0xFFFFFFFFLL;
    }
    int v120 = *__error();
    v121 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v121, OS_LOG_TYPE_ERROR)) {
      data_map32_garbage_collect_cold_1();
    }
    v122 = __error();
    long long v48 = 0;
    size_t v117 = 0;
    size_t v118 = 0;
    int *v122 = v120;
    goto LABEL_149;
  }
  size_t v138 = *(unsigned int *)(a1 + 1304);
  long long v47 = fd_name(*(void *)(a1 + 1328), (char *)v157, 0x400uLL);
  snprintf(__s, 0x400uLL, "tmp.%s", v47);
  long long v48 = fd_create_sibling_protected(*(void *)(a1 + 1328), __s, 1538, v44);
  if (fd_truncate((uint64_t)v48, *(unsigned int *)(a1 + 1340)) == -1)
  {
LABEL_153:
    size_t v117 = 0;
    unsigned int v126 = *__error();
    if (v126) {
      uint64_t v16 = v126;
    }
    else {
      uint64_t v16 = 0xFFFFFFFFLL;
    }
    uint64_t v50 = -1;
    size_t v118 = v138;
    uint64_t v123 = v140;
    goto LABEL_157;
  }
  size_t v135 = v46;
  size_t v132 = *(unsigned int *)(a1 + 1340);
  uint64_t v49 = fd_mmap((uint64_t)v48);
  if (v49 == -1)
  {
    int v124 = *__error();
    v125 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v125, OS_LOG_TYPE_ERROR)) {
      data_map32_garbage_collect_cold_2();
    }
    *__error() = v124;
    goto LABEL_153;
  }
  uint64_t v50 = v49;
  uint64_t v133 = (uint64_t)sibling_protected;
  size_t v130 = *(unsigned int *)(a1 + 1336);
  v131 = v48;
  uint64_t v134 = data_entry_store(v140, 0, dword_1E63491D8);
  *(_DWORD *)uint64_t v50 = 0;
  if (!v41) {
    goto LABEL_172;
  }
  unsigned int v54 = 1;
  while (2)
  {
    if (*(_DWORD *)(a1 + 1388) <= v54)
    {
      long long v196 = 0u;
      long long v197 = 0u;
      long long v194 = 0u;
      long long v195 = 0u;
      long long v192 = 0u;
      long long v193 = 0u;
      long long v190 = 0u;
      long long v191 = 0u;
      long long v188 = 0u;
      long long v189 = 0u;
      long long v187 = 0u;
      memset(v186, 0, sizeof(v186));
      memset(v185, 0, sizeof(v185));
      int v60 = *__error();
      long long v68 = _SILogForLogForCategory(0);
      if (!os_log_type_enabled(v68, OS_LOG_TYPE_ERROR)) {
        goto LABEL_56;
      }
      int v72 = *(_DWORD *)(a1 + 1388);
      long long v73 = fd_name(*(void *)(a1 + 1264), (char *)v185, 0x100uLL);
      *(_DWORD *)buf = 136316418;
      *(void *)&uint8_t buf[4] = "_data_map32_get_offset_entry";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 424;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v54;
      *(_WORD *)&buf[24] = 1024;
      *(_DWORD *)&buf[26] = v72;
      *(_WORD *)&buf[30] = 2048;
      *(void *)&uint8_t buf[32] = a1;
      *(_WORD *)&buf[40] = 2080;
      *(void *)&buf[42] = v73;
      long long v64 = buf;
      long long v65 = v68;
      long long v66 = "%s:%d: invalid data id %d max %d %p %s";
      uint32_t v67 = 50;
LABEL_63:
      _os_log_error_impl(&dword_1BDAD0000, v65, OS_LOG_TYPE_ERROR, v66, v64, v67);
      goto LABEL_56;
    }
    uint64_t v55 = *(void *)(a1 + 1344);
    if (!v55) {
      goto LABEL_57;
    }
    uint64_t v56 = *(unsigned int *)(v55 + 4 * v54);
    if (v56 < 2) {
      goto LABEL_57;
    }
    uint64_t v144 = 0;
    uint64_t v145 = 0;
    char v146 = 0;
    uint64_t v57 = *(unsigned int *)(a1 + 1320);
    if (v57 <= v56)
    {
      long long v196 = 0u;
      long long v197 = 0u;
      long long v194 = 0u;
      long long v195 = 0u;
      long long v192 = 0u;
      long long v193 = 0u;
      long long v190 = 0u;
      long long v191 = 0u;
      long long v188 = 0u;
      long long v189 = 0u;
      long long v187 = 0u;
      memset(v186, 0, sizeof(v186));
      memset(v185, 0, sizeof(v185));
      int v60 = *__error();
      long long v69 = _SILogForLogForCategory(0);
      if (!os_log_type_enabled(v69, OS_LOG_TYPE_ERROR)) {
        goto LABEL_56;
      }
      uint64_t v70 = *(unsigned int *)(a1 + 1320);
      long long v71 = fd_name(*(void *)(a1 + 1264), (char *)v185, 0x100uLL);
      *(_DWORD *)buf = 136316418;
      *(void *)&uint8_t buf[4] = "_data_map32_get_data_entry";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 448;
      *(_WORD *)&buf[18] = 2048;
      *(void *)&buf[20] = v56;
      *(_WORD *)&buf[28] = 2048;
      *(void *)&buf[30] = v70;
      *(_WORD *)&buf[38] = 2048;
      *(void *)&buf[40] = a1;
      *(_WORD *)&buf[48] = 2080;
      *(void *)&buf[50] = v71;
      long long v64 = buf;
      long long v65 = v69;
      long long v66 = "%s:%d: invalid data offset 0x%lx 0x%lx %p %s";
      uint32_t v67 = 58;
      goto LABEL_63;
    }
    data_entry_restore_32(*(void *)(a1 + 1312), v56, v57, (uint64_t)&v144, &v146, v51, v52, v53);
    if (v146)
    {
      uint64_t v58 = 0;
      uint64_t v207 = 0;
      long long v205 = 0u;
      long long v206 = 0u;
      long long v203 = 0u;
      long long v204 = 0u;
      long long v201 = 0u;
      long long v202 = 0u;
      long long v199 = 0u;
      long long v200 = 0u;
      memset(buf, 0, sizeof(buf));
      do
      {
        if (v56 + v58 >= (unint64_t)*(unsigned int *)(a1 + 1320)) {
          break;
        }
        size_t v59 = strlen((const char *)buf);
        sprintf((char *)&buf[v59], "%d ", *(unsigned __int8 *)(*(void *)(a1 + 1312) + v56 + v58++));
      }
      while (v58 != 5);
      long long v196 = 0u;
      long long v197 = 0u;
      long long v194 = 0u;
      long long v195 = 0u;
      long long v192 = 0u;
      long long v193 = 0u;
      long long v190 = 0u;
      long long v191 = 0u;
      long long v188 = 0u;
      long long v189 = 0u;
      long long v187 = 0u;
      memset(v186, 0, sizeof(v186));
      memset(v185, 0, sizeof(v185));
      int v60 = *__error();
      long long v61 = _SILogForLogForCategory(0);
      if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
      {
        long long v62 = fd_name(*(void *)(a1 + 1264), (char *)v185, 0x100uLL);
        uint64_t v63 = *(unsigned int *)(a1 + 1320);
        int v171 = 136316674;
        v172 = "_data_map32_get_data_entry";
        __int16 v173 = 1024;
        int v174 = 444;
        __int16 v175 = 2080;
        v176 = v62;
        __int16 v177 = 2048;
        uint64_t v178 = v56;
        __int16 v179 = 2048;
        uint64_t v180 = v63;
        __int16 v181 = 2048;
        uint64_t v182 = v144;
        __int16 v183 = 2080;
        v184 = buf;
        long long v64 = (uint8_t *)&v171;
        long long v65 = v61;
        long long v66 = "%s:%d: data_entry_restore_32 failure: %s off: 0x%lx end: 0x%lx sz: 0x%lx sz bytes: %s";
        uint32_t v67 = 68;
        goto LABEL_63;
      }
LABEL_56:
      *__error() = v60;
LABEL_57:
      *(_DWORD *)(v50 + 4 * v54) = 1;
LABEL_58:
      if (++v54 > v41) {
        goto LABEL_172;
      }
      continue;
    }
    break;
  }
  if (v54 >= v15 && (*(void *)v10 <= (uint64_t)v54 || !CFBitVectorGetBitAtIndex(*(CFBitVectorRef *)(v10 + 16), v54)))
  {
    ++*(void *)(v141 + 8);
    if ((v143 & 2) == 0) {
      goto LABEL_57;
    }
    if ((v143 & 8) != 0)
    {
      if (gSILogLevels[0] < 5) {
        goto LABEL_57;
      }
      int v60 = *__error();
      long long v82 = _SILogForLogForCategory(0);
      if (!os_log_type_enabled(v82, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_56;
      }
      uint64_t v83 = v145 + *(unsigned int *)(a1 + 1244);
      *(_DWORD *)v185 = 67109890;
      *(_DWORD *)&v185[4] = v54;
      *(_WORD *)&v185[8] = 1024;
      *(_DWORD *)&v185[10] = v144;
      *(_WORD *)&v185[14] = 2080;
      *(void *)&v185[16] = v83;
      *(_WORD *)&v185[24] = 2048;
      *(void *)&v185[26] = a1;
      long long v79 = v82;
      long long v80 = "Deleting id: %d size: %d %s from %p";
      uint32_t v81 = 34;
    }
    else
    {
      if (gSILogLevels[0] < 5) {
        goto LABEL_57;
      }
      int v60 = *__error();
      long long v78 = _SILogForLogForCategory(0);
      if (!os_log_type_enabled(v78, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_56;
      }
      *(_DWORD *)v185 = 67109632;
      *(_DWORD *)&v185[4] = v54;
      *(_WORD *)&v185[8] = 1024;
      *(_DWORD *)&v185[10] = v144;
      *(_WORD *)&v185[14] = 2048;
      *(void *)&v185[16] = a1;
      long long v79 = v78;
      long long v80 = "Deleting id: %d size: %d from %p";
      uint32_t v81 = 24;
    }
    _os_log_impl(&dword_1BDAD0000, v79, OS_LOG_TYPE_DEFAULT, v80, v185, v81);
    goto LABEL_56;
  }
  *(_DWORD *)(v50 + 4 * v54) = v134;
  if ((v144 & 0x3F80) != 0) {
    int v74 = 2;
  }
  else {
    int v74 = 1;
  }
  if ((v144 & 0x1FC000) != 0) {
    int v74 = 3;
  }
  if ((v144 & 0xFE00000) != 0) {
    int v74 = 4;
  }
  if (v144 >> 28) {
    int v75 = 5;
  }
  else {
    int v75 = v74;
  }
  unint64_t v76 = v134 + (v75 + v144) + 8;
  if (v76 >= v135)
  {
    off_t v77 = (v76 + *MEMORY[0x1E4F14B00] - 1) & -*MEMORY[0x1E4F14B00];
    if (fd_truncate(v133, v77) == -1)
    {
      unsigned int v127 = *__error();
      if (v127) {
        uint64_t v16 = v127;
      }
      else {
        uint64_t v16 = 0xFFFFFFFFLL;
      }
      sibling_protected = (atomic_uint *)v133;
      long long v48 = v131;
      goto LABEL_175;
    }
    size_t v135 = v77;
  }
  if (v76 <= v138)
  {
LABEL_83:
    uint64_t v134 = data_entry_store(v140, v134, (unsigned int *)&v144);
    goto LABEL_58;
  }
  munmap((void *)v140, v138);
  uint64_t v140 = fd_mmap(v133);
  if (v140 != -1)
  {
    size_t v138 = (2 * v138);
    goto LABEL_83;
  }
  int v128 = *__error();
  v129 = _SILogForLogForCategory(0);
  if (os_log_type_enabled(v129, OS_LOG_TYPE_ERROR)) {
    data_map32_garbage_collect_cold_3();
  }
  *__error() = v128;
  uint64_t v140 = -1;
LABEL_172:
  long long v48 = v131;
  if (*(void *)(v141 + 8))
  {
    fd_msync((void *)v140, v135, 16, 1);
    fd_msync((void *)v50, v132, 16, 1);
    uint64_t v16 = 0;
    *(void *)(v141 + 32) = v133;
    *(void *)(v141 + 40) = v140;
    *(void *)(v141 + 48) = v131;
    *(void *)(v141 + 56) = v50;
    *(void *)(v141 + 64) = v130;
    *(void *)(v141 + 72) = v132;
    *(void *)(v141 + 80) = v138;
    *(void *)(v141 + 88) = v135;
    *(void *)(v141 + 96) = v134;
    *(_DWORD *)uint64_t v141 = 842150450;
    goto LABEL_9;
  }
  uint64_t v16 = 0;
  sibling_protected = (atomic_uint *)v133;
LABEL_175:
  size_t v118 = v138;
  uint64_t v123 = v140;
  size_t v117 = v130;
LABEL_157:
  if ((unint64_t)(v123 + 1) >= 2) {
    munmap((void *)v123, v118);
  }
  if (sibling_protected)
  {
    fd_release(sibling_protected);
    fd_unlink((uint64_t)sibling_protected);
  }
  if (v50 != -1) {
    munmap((void *)v50, v117);
  }
  if (v48)
  {
    fd_release(v48);
    fd_unlink((uint64_t)v48);
  }
LABEL_9:
  _data_map32_unlock(a1);
  return v16;
}

void *data_map32_copy_deleted_ids(uint64_t a1)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  if (!a1 || !*(_DWORD *)(a1 + 1392)) {
    return 0;
  }
  uint64_t v2 = *(unsigned int *)(a1 + 1388);
  uint64_t v3 = malloc_type_malloc(0x18uLL, 0x10200403ED2C137uLL);
  if (!v3) {
    data_map32_garbage_collect_setup_cold_1(0, v4, v5, v6, v7, v8, v9, v10);
  }
  CFRange v11 = v3;
  CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  if (v2 <= 128) {
    CFIndex v13 = 128;
  }
  else {
    CFIndex v13 = v2;
  }
  void *v11 = 0;
  v11[1] = v13;
  Mutable = CFBitVectorCreateMutable(v12, v13);
  v11[2] = Mutable;
  CFBitVectorSetCount(Mutable, v13);
  if (!v11[2]) {
    data_map32_garbage_collect_setup_cold_2(v15, v16, v17, v18, v19, v20, v21, v22);
  }
  if (v2 >= 2)
  {
    for (unint64_t i = 1; v2 != i; ++i)
    {
      if (i >= *(unsigned int *)(a1 + 1388))
      {
        memset(v41, 0, sizeof(v41));
        int v24 = *__error();
        uint64_t v25 = _SILogForLogForCategory(0);
        if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
        {
          int v26 = *(_DWORD *)(a1 + 1388);
          int v27 = fd_name(*(void *)(a1 + 1264), (char *)v41, 0x100uLL);
          *(_DWORD *)buf = 136316418;
          uint64_t v30 = "_data_map32_get_offset_entry";
          __int16 v31 = 1024;
          int v32 = 424;
          __int16 v33 = 1024;
          int v34 = i;
          __int16 v35 = 1024;
          int v36 = v26;
          __int16 v37 = 2048;
          uint64_t v38 = a1;
          __int16 v39 = 2080;
          uint64_t v40 = v27;
          _os_log_error_impl(&dword_1BDAD0000, v25, OS_LOG_TYPE_ERROR, "%s:%d: invalid data id %d max %d %p %s", buf, 0x32u);
        }
        *__error() = v24;
      }
      else if (*(_DWORD *)(*(void *)(a1 + 1344) + 4 * i) != 1)
      {
        continue;
      }
      bit_vector_set(v11, i, v17, v18, v19, v20, v21, v22);
    }
  }
  return v11;
}

void bit_vector_set(void *a1, CFIndex idx, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CFIndex v10 = a1[1];
  if (v10 <= idx)
  {
    if (v10) {
      CFIndex v12 = a1[1];
    }
    else {
      CFIndex v12 = 32;
    }
    while (1)
    {
      v12 *= 2;
      if (v12 > idx) {
        break;
      }
      if (v12 <= v10) {
        bit_vector_set_cold_2((uint64_t)a1, idx, a3, a4, a5, a6, a7, a8);
      }
    }
    CFBitVectorRef v13 = (const __CFBitVector *)a1[2];
    CFAllocatorRef v14 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    if (v13) {
      MutableCopy = CFBitVectorCreateMutableCopy(v14, v12, v13);
    }
    else {
      MutableCopy = CFBitVectorCreateMutable(v14, v12);
    }
    uint64_t v23 = MutableCopy;
    if (!MutableCopy) {
      bit_vector_set_cold_1(0, v16, v17, v18, v19, v20, v21, v22);
    }
    CFBitVectorSetCount(MutableCopy, v12);
    int v24 = (const void *)a1[2];
    if (v24) {
      CFRelease(v24);
    }
    a1[1] = v12;
    a1[2] = v23;
  }
  if (*a1 <= idx) {
    *a1 = idx + 1;
  }
  CFRange v11 = (__CFBitVector *)a1[2];

  CFBitVectorSetBitAtIndex(v11, idx, 1u);
}

uint64_t data_map32_garbage_collect_complete(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (const char *)(a3 + 268);
  _rename_prefix_suffix(a1, (const char *)(a3 + 268), ".offsets");
  _rename_prefix_suffix(a1, v4, ".data");

  return _rename_prefix_suffix(a1, v4, ".header");
}

uint64_t _rename_prefix_suffix(int a1, const char *a2, const char *a3)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  bzero(v8, 0x400uLL);
  bzero(__str, 0x400uLL);
  snprintf(__str, 0x400uLL, "%s%s%s", "", a2, a3);
  snprintf(v8, 0x400uLL, "%s%s%s", "tmp.", a2, a3);
  return renameat(a1, v8, a1, __str);
}

uint64_t data_map32_safely_free_memory(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(void))(a1 + 1416);
  if (v2) {
    return v2(*(void *)(a1 + 1424));
  }
  else {
    return (*(uint64_t (**)(uint64_t))(a2 + 16))(a2);
  }
}

uint64_t data_entry_hash(int a1, uint64_t a2, unsigned int a3, int a4)
{
  if (a4) {
    return LegacyHash((unsigned __int16 *)(a2 + a3), a1 - a3);
  }
  else {
    return commonHash(a1 - a3, a2 + a3);
  }
}

uint64_t _data_map32_get_bucket_entry(uint64_t a1, unsigned int a2, unsigned int a3, const void *a4, size_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v94 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a1 + 1388) > a3)
  {
    int v10 = 0;
    unint64_t v11 = *(unsigned int *)(a1 + 1384);
    unint64_t v12 = a2 - a2 / *(_DWORD *)(a1 + 1384) * v11;
    unint64_t v48 = v11;
    while (1)
    {
      int v50 = v10;
      unint64_t v49 = v12;
      if (v12 < v11) {
        break;
      }
      BOOL v31 = 0;
LABEL_31:
      BOOL v33 = v12 != v48;
      if (v31) {
        return 0;
      }
      unint64_t v12 = 0;
      uint64_t result = 0;
      int v10 = 1;
      unint64_t v11 = v49;
      if ((v50 | v33)) {
        return result;
      }
    }
    while (1)
    {
      uint64_t v13 = *(void *)(a1 + 1376);
      uint64_t v14 = *(unsigned int *)(v13 + 4 * v12);
      if (v14) {
        BOOL v15 = v14 == a3;
      }
      else {
        BOOL v15 = 1;
      }
      if (v15) {
        return v13 + 4 * v12;
      }
      if (a3) {
        goto LABEL_9;
      }
      if (*(_DWORD *)(a1 + 1388) <= v14)
      {
        long long v82 = 0u;
        long long v83 = 0u;
        long long v80 = 0u;
        long long v81 = 0u;
        long long v78 = 0u;
        long long v79 = 0u;
        long long v76 = 0u;
        long long v77 = 0u;
        long long v74 = 0u;
        long long v75 = 0u;
        long long v72 = 0u;
        long long v73 = 0u;
        long long v70 = 0u;
        long long v71 = 0u;
        long long v68 = 0u;
        long long v69 = 0u;
        int v38 = *__error();
        __int16 v39 = _SILogForLogForCategory(0);
        if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
        {
          int v43 = *(_DWORD *)(a1 + 1388);
          unsigned __int8 v44 = fd_name(*(void *)(a1 + 1264), (char *)&v68, 0x100uLL);
          *(_DWORD *)__s = 136316418;
          *(void *)&__s[4] = "_data_map32_get_offset_entry";
          *(_WORD *)&__s[12] = 1024;
          *(_DWORD *)&__s[14] = 424;
          *(_WORD *)&__s[18] = 1024;
          *(_DWORD *)&__s[20] = v14;
          *(_WORD *)&__s[24] = 1024;
          *(_DWORD *)&__s[26] = v43;
          *(_WORD *)&__s[30] = 2048;
          *(void *)&__s[32] = a1;
          *(_WORD *)&__s[40] = 2080;
          *(void *)&__s[42] = v44;
          _os_log_error_impl(&dword_1BDAD0000, v39, OS_LOG_TYPE_ERROR, "%s:%d: invalid data id %d max %d %p %s", (uint8_t *)__s, 0x32u);
        }
        uint64_t v40 = __error();
        uint64_t result = 0;
        *uint64_t v40 = v38;
        return result;
      }
      uint64_t v17 = *(void *)(a1 + 1344);
      if (!v17) {
        return 0;
      }
      uint64_t v18 = *(unsigned int *)(v17 + 4 * v14);
      if (v18 == 1) {
        return 0;
      }
      uint64_t v51 = 0;
      __s2 = 0;
      char v53 = 0;
      uint64_t v19 = *(unsigned int *)(a1 + 1320);
      if (v19 <= v18)
      {
        long long v82 = 0u;
        long long v83 = 0u;
        long long v80 = 0u;
        long long v81 = 0u;
        long long v78 = 0u;
        long long v79 = 0u;
        long long v76 = 0u;
        long long v77 = 0u;
        long long v74 = 0u;
        long long v75 = 0u;
        long long v72 = 0u;
        long long v73 = 0u;
        long long v70 = 0u;
        long long v71 = 0u;
        long long v68 = 0u;
        long long v69 = 0u;
        int v22 = *__error();
        uint64_t v30 = _SILogForLogForCategory(0);
        if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
        {
          uint64_t v45 = *(unsigned int *)(a1 + 1320);
          int v32 = fd_name(*(void *)(a1 + 1264), (char *)&v68, 0x100uLL);
          *(_DWORD *)__s = 136316418;
          *(void *)&__s[4] = "_data_map32_get_data_entry";
          *(_WORD *)&__s[12] = 1024;
          *(_DWORD *)&__s[14] = 448;
          *(_WORD *)&__s[18] = 2048;
          *(void *)&__s[20] = v18;
          *(_WORD *)&__s[28] = 2048;
          *(void *)&__s[30] = v45;
          *(_WORD *)&__s[38] = 2048;
          *(void *)&__s[40] = a1;
          *(_WORD *)&char __s[48] = 2080;
          *(void *)&__s[50] = v32;
          int v26 = __s;
          int v27 = v30;
          int v28 = "%s:%d: invalid data offset 0x%lx 0x%lx %p %s";
          uint32_t v29 = 58;
          goto LABEL_29;
        }
      }
      else
      {
        data_entry_restore_32(*(void *)(a1 + 1312), v18, v19, (uint64_t)&v51, &v53, a6, a7, a8);
        if (!v53)
        {
          if (v51 == a5 && !memcmp(a4, __s2, a5)) {
            return v13 + 4 * v12;
          }
LABEL_9:
          int v16 = 0;
          goto LABEL_22;
        }
        uint64_t v20 = 0;
        uint64_t v93 = 0;
        long long v91 = 0u;
        long long v92 = 0u;
        long long v89 = 0u;
        long long v90 = 0u;
        long long v87 = 0u;
        long long v88 = 0u;
        long long v85 = 0u;
        long long v86 = 0u;
        memset(__s, 0, sizeof(__s));
        do
        {
          if (v18 + v20 >= (unint64_t)*(unsigned int *)(a1 + 1320)) {
            break;
          }
          size_t v21 = strlen(__s);
          sprintf(&__s[v21], "%d ", *(unsigned __int8 *)(*(void *)(a1 + 1312) + v18 + v20++));
        }
        while (v20 != 5);
        long long v82 = 0u;
        long long v83 = 0u;
        long long v80 = 0u;
        long long v81 = 0u;
        long long v78 = 0u;
        long long v79 = 0u;
        long long v76 = 0u;
        long long v77 = 0u;
        long long v74 = 0u;
        long long v75 = 0u;
        long long v72 = 0u;
        long long v73 = 0u;
        long long v70 = 0u;
        long long v71 = 0u;
        long long v68 = 0u;
        long long v69 = 0u;
        int v22 = *__error();
        uint64_t v23 = _SILogForLogForCategory(0);
        if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
        {
          int v24 = fd_name(*(void *)(a1 + 1264), (char *)&v68, 0x100uLL);
          uint64_t v25 = *(unsigned int *)(a1 + 1320);
          int v54 = 136316674;
          uint64_t v55 = "_data_map32_get_data_entry";
          __int16 v56 = 1024;
          int v57 = 444;
          __int16 v58 = 2080;
          size_t v59 = v24;
          __int16 v60 = 2048;
          uint64_t v61 = v18;
          __int16 v62 = 2048;
          uint64_t v63 = v25;
          __int16 v64 = 2048;
          uint64_t v65 = v51;
          __int16 v66 = 2080;
          uint32_t v67 = __s;
          int v26 = (char *)&v54;
          int v27 = v23;
          int v28 = "%s:%d: data_entry_restore_32 failure: %s off: 0x%lx end: 0x%lx sz: 0x%lx sz bytes: %s";
          uint32_t v29 = 68;
LABEL_29:
          _os_log_error_impl(&dword_1BDAD0000, v27, OS_LOG_TYPE_ERROR, v28, (uint8_t *)v26, v29);
        }
      }
      *__error() = v22;
      int v16 = 1;
LABEL_22:
      ++v12;
      BOOL v31 = v16 != 0;
      if (v16 || v12 >= v11) {
        goto LABEL_31;
      }
    }
  }
  if (!a3) {
    return 0;
  }
  long long v82 = 0u;
  long long v83 = 0u;
  long long v80 = 0u;
  long long v81 = 0u;
  long long v78 = 0u;
  long long v79 = 0u;
  long long v76 = 0u;
  long long v77 = 0u;
  long long v74 = 0u;
  long long v75 = 0u;
  long long v72 = 0u;
  long long v73 = 0u;
  long long v70 = 0u;
  long long v71 = 0u;
  long long v68 = 0u;
  long long v69 = 0u;
  int v35 = *__error();
  int v36 = _SILogForLogForCategory(0);
  if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
  {
    int v41 = *(_DWORD *)(a1 + 1388);
    uint64_t v42 = fd_name(*(void *)(a1 + 1264), (char *)&v68, 0x100uLL);
    *(_DWORD *)__s = 136316418;
    *(void *)&__s[4] = "_data_map32_get_bucket_entry";
    *(_WORD *)&__s[12] = 1024;
    *(_DWORD *)&__s[14] = 518;
    *(_WORD *)&__s[18] = 1024;
    *(_DWORD *)&__s[20] = a3;
    *(_WORD *)&__s[24] = 1024;
    *(_DWORD *)&__s[26] = v41;
    *(_WORD *)&__s[30] = 2048;
    *(void *)&__s[32] = a1;
    *(_WORD *)&__s[40] = 2080;
    *(void *)&__s[42] = v42;
    _os_log_error_impl(&dword_1BDAD0000, v36, OS_LOG_TYPE_ERROR, "%s:%d: invalid data id %d max %d %p %s", (uint8_t *)__s, 0x32u);
  }
  __int16 v37 = __error();
  uint64_t result = 0;
  *__int16 v37 = v35;
  return result;
}

uint64_t LegacyHash(unsigned __int16 *a1, uint64_t a2)
{
  uint64_t v2 = 0;
  if (a1 && a2 >= 1)
  {
    int v3 = a2 & 3;
    if ((unint64_t)a2 >= 4)
    {
      unint64_t v4 = ((unint64_t)a2 >> 2) + 1;
      do
      {
        unsigned int v5 = ((a2 + *a1) << 16) ^ (a1[1] << 11) ^ (a2 + *a1);
        a1 += 2;
        LODWORD(a2) = v5 + (v5 >> 11);
        --v4;
      }
      while (v4 > 1);
    }
    switch(v3)
    {
      case 1:
        unsigned int v7 = (a2 + *(unsigned __int8 *)a1) ^ ((a2 + *(unsigned __int8 *)a1) << 10);
        LODWORD(a2) = v7 + (v7 >> 1);
        break;
      case 2:
        unsigned int v8 = (a2 + *a1) ^ ((a2 + *a1) << 11);
        LODWORD(a2) = v8 + (v8 >> 17);
        break;
      case 3:
        unsigned int v6 = (*((unsigned __int8 *)a1 + 2) << 18) ^ ((a2 + *a1) << 16) ^ (a2 + *a1);
        LODWORD(a2) = v6 + (v6 >> 11);
        break;
    }
    int v9 = (a2 ^ (8 * a2)) + ((a2 ^ (8 * a2)) >> 5);
    unsigned int v10 = (v9 ^ (16 * v9)) + ((v9 ^ (16 * v9)) >> 17);
    return (v10 ^ (v10 << 25)) + ((v10 ^ (v10 << 25)) >> 6);
  }
  return v2;
}

uint64_t commonHash(int a1, uint64_t a2)
{
  int v2 = -1759636613;
  if (a1 >= 0) {
    int v3 = a1;
  }
  else {
    int v3 = a1 + 3;
  }
  unint64_t v4 = (unsigned __int8 *)(a2 + (int)(v3 & 0xFFFFFFFC));
  if ((a1 + 3) >= 7)
  {
    uint64_t v7 = -(v3 >> 2);
    int v8 = -1789642873;
    int v9 = 718793509;
    do
    {
      int v8 = 5 * v8 + 2071795100;
      int v9 = 5 * v9 + 1808688022;
      HIDWORD(v10) = v8 * *(_DWORD *)&v4[4 * v7];
      LODWORD(v10) = HIDWORD(v10);
      int v11 = (v10 >> 21) * v9;
      HIDWORD(v10) = v2;
      LODWORD(v10) = v2;
      int v2 = v11 ^ (5 * (v10 >> 19) + 1390208809);
    }
    while (!__CFADD__(v7++, 1));
    int v6 = 5 * v8 + 2071795100;
    int v5 = 5 * v9 + 1808688022;
  }
  else
  {
    int v5 = 1107688271;
    int v6 = 1713515327;
  }
  int v13 = 0;
  int v14 = a1 & 3;
  switch(v14)
  {
    case 1:
      goto LABEL_15;
    case 2:
LABEL_14:
      v13 |= v4[1] << 8;
LABEL_15:
      HIDWORD(v15) = (v13 ^ *v4) * v6;
      LODWORD(v15) = HIDWORD(v15);
      int v16 = (v15 >> 21) * v5;
      HIDWORD(v15) = v2;
      LODWORD(v15) = v2;
      int v2 = v16 ^ (5 * (v15 >> 19) + 1390208809);
      break;
    case 3:
      int v13 = v4[2] << 16;
      goto LABEL_14;
  }
  unsigned int v17 = -1028477387 * ((-2048144789 * (v2 ^ a1)) ^ ((-2048144789 * (v2 ^ a1)) >> 13));
  return v17 ^ HIWORD(v17);
}

uint64_t data_entry_restore_32(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned char *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = a2;
  unint64_t v9 = a2 + 1;
  unsigned int v10 = *(unsigned __int8 *)(result + a2);
  if ((*(char *)(result + a2) & 0x80000000) == 0)
  {
    uint64_t v8 = a2 + 1;
    goto LABEL_16;
  }
  if (v9 >= a3) {
    goto LABEL_15;
  }
  unint64_t v11 = a2 + 2;
  int v12 = *(char *)(result + v9);
  int v13 = *(unsigned __int8 *)(result + v9);
  if ((v12 & 0x80000000) == 0)
  {
    unsigned int v10 = v10 & 0x7F | (v13 << 7);
    uint64_t v8 = a2 + 2;
    goto LABEL_16;
  }
  if (v11 >= a3) {
    goto LABEL_15;
  }
  unint64_t v14 = a2 + 3;
  int v15 = *(char *)(result + v11);
  int v16 = *(unsigned __int8 *)(result + v11);
  if ((v15 & 0x80000000) == 0)
  {
    uint64_t v8 = a2 + 3;
    unsigned int v10 = ((v13 & 0x7F) << 7) | (v16 << 14) | v10 & 0x7F;
    goto LABEL_16;
  }
  if (v14 >= a3) {
    goto LABEL_15;
  }
  unint64_t v17 = a2 + 4;
  int v18 = *(char *)(result + v14);
  int v19 = *(unsigned __int8 *)(result + v14);
  if ((v18 & 0x80000000) == 0)
  {
    uint64_t v8 = a2 + 4;
    unsigned int v10 = ((v16 & 0x7F) << 14) | (v19 << 21) | ((v13 & 0x7F) << 7) | v10 & 0x7F;
    goto LABEL_16;
  }
  if (v17 >= a3)
  {
LABEL_15:
    unsigned int v10 = 0;
    *a5 = 1;
  }
  else
  {
    int v20 = *(char *)(result + v17);
    if (v20 < 0) {
      data_entry_restore_32_cold_1(result, a2, a3, a4, (uint64_t)a5, a6, a7, a8);
    }
    uint64_t v8 = a2 + 5;
    unsigned int v10 = ((v19 & 0x7F) << 21) | (v20 << 28) | ((v16 & 0x7F) << 14) | ((v13 & 0x7F) << 7) | v10 & 0x7F;
  }
LABEL_16:
  *(_DWORD *)a4 = v10;
  if (v8 + (unint64_t)v10 <= a3) {
    *(void *)(a4 + 8) = result + v8;
  }
  else {
    *a5 = 1;
  }
  return result;
}

void si_analytics_log(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  v9[0] = 0;
  v9[1] = &a9;
  vasprintf((char **)v9, "%s:%u: failed assertion '%s' %s readVInt32_boundschecked: exceeds max size for uint32_t", &a9);
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT)) {
    si_analytics_log_cold_1((uint64_t *)v9);
  }
  free(v9[0]);
}

uint64_t _data_map32_grow(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  if (*(_DWORD *)(a1 + 1456)) {
    return 0;
  }
  unsigned int v7 = *(_DWORD *)(a1 + 1388);
  if (v7 >= *(_DWORD *)(a1 + 1352))
  {
    unint64_t v8 = (*MEMORY[0x1E4F14B00] + 4 * (v7 + 1) - 1) & -*MEMORY[0x1E4F14B00];
    if (fd_truncate(*(void *)(a1 + 1328), v8) == -1) {
      goto LABEL_23;
    }
    *(_DWORD *)(a1 + 1340) = v8;
    size_t v9 = *(unsigned int *)(a1 + 1336);
    if (v8 > v9)
    {
      int v10 = 2 * v9;
      munmap(*(void **)(a1 + 1344), v9);
      *(_DWORD *)(a1 + 1336) = 0;
      uint64_t v11 = fd_mmap(*(void *)(a1 + 1328));
      *(void *)(a1 + 1344) = v11;
      if (v11 == -1) {
        goto LABEL_23;
      }
      *(_DWORD *)(a1 + 1336) = v10;
    }
    *(_DWORD *)(a1 + 1352) = v8 >> 2;
    *a3 |= 2u;
    unsigned int v7 = *(_DWORD *)(a1 + 1388);
  }
  unsigned int v12 = v7 - *(_DWORD *)(a1 + 1392);
  if (v12 >= 2 * *(_DWORD *)(a1 + 1384) / 3u || v12 < 2 * *(_DWORD *)(a1 + 1396))
  {
    if (!_data_map32_rehash(a1)) {
      goto LABEL_23;
    }
    *a3 |= 4u;
  }
  unint64_t v13 = a2 + *(unsigned int *)(a1 + 1320) + 8;
  if (v13 < *(unsigned int *)(a1 + 1308)) {
    return 1;
  }
  unint64_t v14 = (v13 + *MEMORY[0x1E4F14B00] - 1) & -*MEMORY[0x1E4F14B00];
  if (fd_truncate(*(void *)(a1 + 1296), v14) != -1)
  {
    *(_DWORD *)(a1 + 1308) = v14;
    unint64_t v15 = *(unsigned int *)(a1 + 1304);
    if (v14 <= v15)
    {
LABEL_21:
      *a3 |= 1u;
      return 1;
    }
    int v16 = 2 * v15;
    unint64_t v17 = *(void (**)(void, void))(a1 + 1408);
    if (v17) {
      v17(*(void *)(a1 + 1424), *(void *)(a1 + 1312));
    }
    else {
      munmap(*(void **)(a1 + 1312), *(unsigned int *)(a1 + 1304));
    }
    *(_DWORD *)(a1 + 1304) = 0;
    uint64_t v18 = fd_mmap(*(void *)(a1 + 1296));
    *(void *)(a1 + 1312) = v18;
    if (v18 != -1)
    {
      *(_DWORD *)(a1 + 1304) = v16;
      goto LABEL_21;
    }
  }
LABEL_23:
  if (*(_DWORD *)(a1 + 1456)) {
    return 0;
  }
  uint64_t result = 0;
  *(_DWORD *)(a1 + 1456) = 1;
  return result;
}

void OUTLINED_FUNCTION_2(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x12u);
}

void OUTLINED_FUNCTION_4(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x18u);
}

void OUTLINED_FUNCTION_7(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x1Eu);
}

uint64_t si_get_token_info(uint64_t result, int a2, uint64_t a3)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  if (a2 <= 1043)
  {
    uint64_t v5 = result;
    bzero(&v46, 0x415uLL);
    if (!a2) {
      goto LABEL_13;
    }
    uint64_t v13 = 0;
    do
    {
      *(&v46 + v13) = si_tcmr[*(unsigned __int8 *)(v5 + v13)];
      ++v13;
    }
    while (a2 != v13);
    *(&v46 + a2) = 0;
    if (a2 >= 2 && v46 - 1 <= 3)
    {
      switch(v46)
      {
        case 1u:
          uint64_t v14 = 1;
          if (v47 == 2) {
            uint64_t v14 = 2;
          }
          unsigned int v15 = 4 * (v47 == 2);
          if (*(&v46 + (a2 - 1)) != 1 || *(&v46 + (a2 - 2)) != 1)
          {
            uint64_t v27 = v14;
            goto LABEL_44;
          }
          uint64_t v16 = 1;
          break;
        case 2u:
          unsigned int v15 = 16;
          goto LABEL_43;
        case 3u:
          unsigned int v15 = 32;
          goto LABEL_43;
        case 4u:
          unsigned int v15 = 64;
          goto LABEL_43;
        default:
          unsigned int v15 = 0;
LABEL_43:
          uint64_t v27 = 1;
LABEL_44:
          uint64_t v28 = v27 + 1;
          uint64_t v16 = *(&v46 + v27);
          if ((char)*(&v46 + v27) < 0)
          {
            uint64_t v14 = v27 + 2;
            int v29 = (char)*(&v46 + v28);
            int v30 = *(&v46 + v28);
            if (v29 < 0)
            {
              uint64_t v31 = v27 + 3;
              int v32 = (char)*(&v46 + v14);
              char v33 = v32;
              if (v32 < 0)
              {
                uint64_t v14 = v27 | 4;
                int v35 = (char)*(&v46 + v31);
                int v36 = *(&v46 + v31);
                if (v35 < 0)
                {
                  int v44 = (char)*(&v46 + v14);
                  if (v44 < 0) {
                    si_get_token_info_cold_1(v6, v7, v8, v16, v9, v10, v11, v12);
                  }
                  int v45 = v44;
                  uint64_t v14 = v27 + 5;
                  int v37 = ((v36 & 0x7F) << 21) | (v45 << 28) | ((v33 & 0x7F) << 14);
                }
                else
                {
                  int v37 = ((v33 & 0x7F) << 14) | (v36 << 21);
                }
                uint64_t v34 = v37 & 0xFFFFC000 | ((v30 & 0x7F) << 7) | v16 & 0x7F;
              }
              else
              {
                uint64_t v34 = ((v30 & 0x7F) << 7) | (v32 << 14) | (v16 & 0x7F);
                uint64_t v14 = v31;
              }
              uint64_t v16 = v34;
            }
            else
            {
              uint64_t v16 = v16 & 0x7F | (v30 << 7);
            }
          }
          else
          {
            uint64_t v14 = v27 + 1;
          }
          break;
      }
    }
    else
    {
LABEL_13:
      uint64_t v14 = 0;
      uint64_t v16 = 0;
      unsigned int v15 = 0;
    }
    unint64_t v17 = (char *)(&v46 + v14);
    uint64_t v18 = &v46 + a2 - 1;
    unsigned int v19 = *v18;
    if (v19 == 3) {
      uint64_t v20 = v15 | 2;
    }
    else {
      uint64_t v20 = v15;
    }
    if (v19 <= 5)
    {
      if (v18 <= (unsigned __int8 *)v17)
      {
        if (v19 == 1) {
          goto LABEL_28;
        }
      }
      else
      {
        int v21 = a2 - v14;
        int v22 = 1;
        uint64_t v23 = &v46 + a2 - 1;
        while (1)
        {
          unsigned int v24 = *--v23;
          if (v24 > 5) {
            break;
          }
          ++v22;
          uint64_t v18 = v23;
          if (v23 <= (unsigned __int8 *)v17)
          {
            uint64_t v18 = &v46 + v14;
            goto LABEL_26;
          }
        }
        int v21 = v22;
LABEL_26:
        if (*v18 == 1)
        {
          if (v21 != 1)
          {
            if (v16 || v21 < 3 || v18[2] != 5)
            {
              int v26 = v18;
            }
            else
            {
              switch(v18[1])
              {
                case 2u:
                  uint64_t v20 = v20 | 0x80;
                  break;
                case 3u:
                  uint64_t v20 = v20 | 0x100;
                  break;
                case 4u:
                  uint64_t v20 = v20 | 0x200;
                  break;
                case 5u:
                  uint64_t v20 = v20 | 0x400;
                  break;
                default:
                  break;
              }
              int v26 = v18 + 3;
              v21 -= 3;
            }
            if (v21 >= 2)
            {
              int v38 = v26[1];
              unsigned int v39 = v38 - 4;
              if (v16 <= 1) {
                unsigned int v40 = 1;
              }
              else {
                unsigned int v40 = v16;
              }
              unsigned int v41 = v20 | 8;
              if (v38 != 2) {
                unsigned int v41 = v20;
              }
              BOOL v42 = v38 == 1;
              if (v38 == 1) {
                unsigned int v43 = v40;
              }
              else {
                unsigned int v43 = v16;
              }
              if (v42) {
                unsigned int v41 = v20;
              }
              if (v39 >= 2) {
                uint64_t v16 = v43;
              }
              else {
                uint64_t v16 = v40;
              }
              if (v39 >= 2) {
                uint64_t v20 = v41;
              }
              else {
                uint64_t v20 = v20 | 1;
              }
            }
            goto LABEL_29;
          }
LABEL_28:
          uint64_t v20 = v20 | 1;
LABEL_29:
          uint64_t v25 = v18 - (unsigned __int8 *)v17;
          unsigned __int8 *v18 = 0;
          return (*(uint64_t (**)(uint64_t, char *, uint64_t, uint64_t, uint64_t))(a3 + 16))(a3, v17, v25, v16, v20);
        }
      }
    }
    uint64_t v25 = a2 - v14;
    return (*(uint64_t (**)(uint64_t, char *, uint64_t, uint64_t, uint64_t))(a3 + 16))(a3, v17, v25, v16, v20);
  }
  return result;
}

void __message_assert_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  v9[0] = 0;
  v9[1] = &a9;
  vasprintf((char **)v9, "%s:%u: failed assertion '%s' %s readVInt32: exceeds max size for uint32_t", &a9);
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315138;
    uint64_t v11 = v9[0];
    _os_log_error_impl(&dword_1BDAD0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%s", buf, 0xCu);
  }
  free(v9[0]);
}

void *si_calendar_retain()
{
  uint64_t v0 = OSAtomicDequeue(&s_si_calendar_head, 0);
  if (!v0)
  {
    uint64_t v0 = malloc_type_malloc(0x28uLL, 0xE00401D00DCF7uLL);
    if (si_calendar_retain_once != -1) {
      dispatch_once(&si_calendar_retain_once, &__block_literal_global);
    }
    CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CFB0];
    CFStringRef v3 = (const __CFString *)*MEMORY[0x1E4F1D198];
    uint64_t v4 = CFCalendarCreateWithIdentifier((CFAllocatorRef)*MEMORY[0x1E4F1CFB0], (CFCalendarIdentifier)*MEMORY[0x1E4F1D198]);
    v0[1] = v4;
    CFCalendarSetTimeZone(v4, (CFTimeZoneRef)si_calendar_retain_s_local_tz);
    v0[3] = si_calendar_retain_s_local_tz;
    uint64_t v5 = CFCalendarCreateWithIdentifier(v2, v3);
    v0[2] = v5;
    CFCalendarSetTimeZone(v5, (CFTimeZoneRef)si_calendar_retain_s_gmt_tz);
    v0[4] = si_calendar_retain_s_gmt_tz;
  }
  return v0;
}

CFTimeZoneRef __si_calendar_retain_block_invoke()
{
  si_calendar_retain_s_local_tz = (uint64_t)CFTimeZoneCopySystem();
  CFTimeZoneRef result = CFTimeZoneCreateWithTimeIntervalFromGMT((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0.0);
  si_calendar_retain_s_gmt_tz = (uint64_t)result;
  return result;
}

void si_calendar_release(void *__new)
{
  if (__new) {
    OSAtomicEnqueue(&s_si_calendar_head, __new, 0);
  }
}

uint64_t si_calendar_get_cfcalendar(uint64_t result, unsigned int a2)
{
  if (result) {
    return *(void *)(result + 8 * a2 + 8);
  }
  return result;
}

uint64_t si_calendar_get_cftimezone(uint64_t result, unsigned int a2)
{
  if (result) {
    return *(void *)(result + 8 * a2 + 24);
  }
  return result;
}

uint64_t expandFunctions(const char *a1, char *a2, size_t a3, uint64_t a4, CFAbsoluteTime a5)
{
  return _expandFunctions(a1, a2, a3, a4, (uint64_t)&__block_literal_global_4, a5);
}

uint64_t _expandFunctions(const char *a1, char *a2, size_t a3, uint64_t a4, uint64_t a5, CFAbsoluteTime a6)
{
  uint64_t v128 = *MEMORY[0x1E4F143B8];
  CFAbsoluteTime v122 = 0.0;
  *a2 = 0;
  if (strncmp(a1, "time.", 5uLL))
  {
LABEL_2:
    *(_WORD *)a2 = 36;
    strlcat(a2, a1, a3);
    return 0;
  }
  if (!strncmp(a1 + 5, "absolute(", 9uLL))
  {
    *(void *)at = a1 + 14;
    CFAbsoluteTime v122 = strtod(a1 + 14, (char **)at);
    if (*(const char **)at == a1 + 14) {
      goto LABEL_106;
    }
    goto LABEL_201;
  }
  if (!strncmp(a1 + 5, "iso(", 4uLL))
  {
    uint64_t v19 = 0;
    uint64_t v20 = a1 + 9;
    while (v20[v19] && v20[v19] != 41)
      ++v19;
    if ((unint64_t)(v19 + 9) < 0xA)
    {
      int v22 = (unsigned __int8 *)(a1 + 9);
    }
    else
    {
      uint64_t v21 = v19;
      int v22 = (unsigned __int8 *)(a1 + 9);
      while (1)
      {
        unsigned int v23 = *v22;
        BOOL v24 = v23 > 0x20;
        uint64_t v25 = (1 << v23) & 0x100000600;
        if (v24 || v25 == 0) {
          break;
        }
        ++v22;
        if (!--v21) {
          goto LABEL_106;
        }
      }
    }
    unint64_t v27 = (unint64_t)&v20[v19];
    if ((unsigned __int8 *)v27 == v22) {
      goto LABEL_106;
    }
    int v28 = *v22;
    if (v28 == 39)
    {
      int v29 = v22 + 1;
      int v30 = v22 + 1;
      if ((unint64_t)(v22 + 1) < v27)
      {
        uint64_t v33 = (uint64_t)&a1[v19 + 8];
        uint64_t v34 = (uint64_t)&a1[v19 + 9];
        int v30 = v22 + 1;
        while (*v30 != 39)
        {
          ++v30;
          if ((unsigned __int8 *)v33 == ++v22)
          {
            int v30 = (unsigned char *)v34;
            break;
          }
        }
      }
    }
    else
    {
      if (v28 != 34)
      {
        uint64_t v35 = a1 - (const char *)v22 + v19 + 9;
        int v29 = v22;
        goto LABEL_52;
      }
      int v29 = v22 + 1;
      int v30 = v22 + 1;
      if ((unint64_t)(v22 + 1) < v27)
      {
        uint64_t v31 = (uint64_t)&a1[v19 + 9];
        uint64_t v32 = a1 - (const char *)v22 + v19 + 8;
        int v30 = v22 + 1;
        while (*v30 != 34)
        {
          ++v30;
          if (!--v32)
          {
            int v30 = (unsigned char *)v31;
            break;
          }
        }
      }
    }
    if ((unsigned char *)v27 == v30) {
      goto LABEL_106;
    }
    uint64_t v35 = v30 - v29;
LABEL_52:
    if (!v35) {
      goto LABEL_106;
    }
    unint64_t v36 = (unint64_t)&v29[v35];
    if (v35 < 1)
    {
      uint64_t v46 = 0;
      int v44 = v29;
    }
    else
    {
      int v37 = *v29;
      unsigned int v38 = v37 - 48;
      int v39 = 10 * v37 - 480;
      if (v38 >= 0xA) {
        int v39 = 0;
      }
      unsigned int v40 = v29[1] - 48;
      if (v40 >= 0xA) {
        unsigned int v40 = 0;
      }
      unsigned int v41 = v39 + v40;
      unsigned int v42 = v29[2] - 48;
      if (v42 >= 0xA) {
        unsigned int v42 = 0;
      }
      unsigned int v43 = v42 + 10 * v41;
      int v44 = v29 + 4;
      unsigned int v45 = v29[3] - 48;
      if (v45 >= 0xA) {
        unsigned int v45 = 0;
      }
      uint64_t v46 = v45 + 10 * v43;
    }
    if ((unint64_t)v44 < v36 && *v44 == 45) {
      ++v44;
    }
    if ((unint64_t)v44 >= v36)
    {
      uint64_t v52 = 0;
    }
    else
    {
      int v47 = *v44;
      unsigned int v48 = v47 - 48;
      char v49 = 10 * v47 + 32;
      if (v48 >= 0xA) {
        char v49 = 0;
      }
      int v50 = v44[1];
      v44 += 2;
      unsigned int v51 = v50 - 48;
      if (v51 >= 0xA) {
        LOBYTE(v51) = 0;
      }
      uint64_t v52 = (char)(v51 + v49);
    }
    if ((unint64_t)v44 < v36 && *v44 == 45) {
      ++v44;
    }
    if ((unint64_t)v44 >= v36)
    {
      uint64_t v58 = 0;
    }
    else
    {
      int v53 = *v44;
      unsigned int v54 = v53 - 48;
      char v55 = 10 * v53 + 32;
      if (v54 >= 0xA) {
        char v55 = 0;
      }
      int v56 = v44[1];
      v44 += 2;
      unsigned int v57 = v56 - 48;
      if (v57 >= 0xA) {
        LOBYTE(v57) = 0;
      }
      uint64_t v58 = (char)(v57 + v55);
    }
    if ((unint64_t)v44 >= v36)
    {
      char v59 = 0;
      char v62 = 0;
      char v63 = 0;
      int v64 = 0;
      BOOL v65 = 0;
      goto LABEL_196;
    }
    char v59 = 0;
    unint64_t v61 = (unint64_t)(v44 + 1);
    int v60 = *v44;
    if ((v60 - 32) > 0x3A)
    {
      char v62 = 0;
      char v63 = 0;
      int v64 = 0;
      BOOL v65 = 0;
      goto LABEL_196;
    }
    char v62 = 0;
    char v63 = 0;
    int v64 = 0;
    BOOL v65 = 0;
    if (((1 << (v60 - 32)) & 0x410000000000001) == 0) {
      goto LABEL_196;
    }
    if (v61 >= v36)
    {
      char v59 = 0;
    }
    else
    {
      int v66 = v44[1];
      unsigned int v67 = v66 - 48;
      char v68 = 10 * v66 + 32;
      if (v67 >= 0xA) {
        char v68 = 0;
      }
      unint64_t v61 = (unint64_t)(v44 + 3);
      unsigned int v69 = v44[2] - 48;
      if (v69 >= 0xA) {
        LOBYTE(v69) = 0;
      }
      char v59 = v69 + v68;
    }
    if (v61 < v36)
    {
      long long v83 = (unsigned char *)(v61 + 1);
      if (*(unsigned char *)v61 == 58)
      {
        if ((unint64_t)v83 >= v36)
        {
          char v62 = 0;
        }
        else
        {
          int v84 = *(unsigned __int8 *)(v61 + 1);
          unsigned int v85 = v84 - 48;
          char v86 = 10 * v84 + 32;
          if (v85 >= 0xA) {
            char v86 = 0;
          }
          long long v83 = (unsigned char *)(v61 + 3);
          unsigned int v87 = *(unsigned __int8 *)(v61 + 2) - 48;
          if (v87 >= 0xA) {
            LOBYTE(v87) = 0;
          }
          char v62 = v87 + v86;
        }
        if ((unint64_t)v83 < v36)
        {
          unint64_t v61 = (unint64_t)(v83 + 1);
          if (*v83 == 58)
          {
            int v89 = v83[1];
            unsigned int v90 = v89 - 48;
            char v91 = 10 * v89 + 32;
            if (v90 >= 0xA) {
              char v91 = 0;
            }
            unint64_t v61 = (unint64_t)(v83 + 3);
            unsigned int v92 = v83[2] - 48;
            if (v92 >= 0xA) {
              LOBYTE(v92) = 0;
            }
            char v63 = v92 + v91;
            goto LABEL_153;
          }
          goto LABEL_129;
        }
      }
      else
      {
        char v62 = 0;
      }
      char v63 = 0;
      unint64_t v61 = (unint64_t)v83;
      goto LABEL_153;
    }
    char v62 = 0;
LABEL_129:
    char v63 = 0;
LABEL_153:
    if (v61 >= v36)
    {
      BOOL v97 = 0;
    }
    else if (*(unsigned char *)v61 == 32)
    {
      uint64_t v93 = &v29[v35];
      uint64_t v94 = (unsigned __int8 *)(v61 + 1);
      uint64_t v95 = &v93[~v61];
      while (1)
      {
        uint64_t v96 = v94;
        if (!v95) {
          break;
        }
        ++v94;
        --v95;
        if (*v96 != 32)
        {
          uint64_t v93 = v96;
          break;
        }
      }
      BOOL v97 = (unint64_t)v96 < v36;
      unint64_t v61 = (unint64_t)v93;
    }
    else
    {
      BOOL v97 = 1;
    }
    BOOL v98 = v60 == 84 && v97;
    if (v60 == 32 || v98)
    {
      int v99 = *(unsigned __int8 *)v61;
      BOOL v65 = v99 == 90;
      if (v99 == 90) {
        uint32_t v100 = (unsigned __int8 *)(v61 + 1);
      }
      else {
        uint32_t v100 = (unsigned __int8 *)v61;
      }
      int v101 = *v100;
      if (v101 == 45 || v101 == 43) {
        long long v103 = v100 + 1;
      }
      else {
        long long v103 = v100;
      }
      if ((unint64_t)v103 >= v36)
      {
        int v64 = 0;
      }
      else
      {
        int v104 = 0;
        int v105 = *v103;
        if ((v105 - 48) >= 0xA) {
          char v106 = 0;
        }
        else {
          char v106 = 10 * v105 + 32;
        }
        unsigned int v107 = v103[1] - 48;
        if (v107 >= 0xA) {
          LOBYTE(v107) = 0;
        }
        char v108 = v107 + v106;
        if ((unint64_t)(v103 + 2) < v36)
        {
          if (v103[2] == 58)
          {
            int v109 = v103[3];
            unsigned int v110 = v109 - 48;
            char v111 = 10 * v109 + 32;
            if (v110 >= 0xA) {
              char v111 = 0;
            }
            unsigned int v112 = v103[4] - 48;
            if (v112 >= 0xA) {
              LOBYTE(v112) = 0;
            }
            int v104 = (char)(v112 + v111);
          }
          else
          {
            int v104 = 0;
          }
        }
        if (v101 == 45)
        {
          int v113 = 3600 * v108;
          int v114 = 60;
        }
        else
        {
          int v113 = -3600 * v108;
          int v114 = -60;
        }
        int v64 = v113 + v104 * v114;
        BOOL v65 = 1;
      }
    }
    else
    {
      int v64 = 0;
      BOOL v65 = v60 == 90;
    }
LABEL_196:
    *(void *)at = 0;
    if (a4) {
      uint64_t v115 = *(__CFCalendar **)(a4 + 8 * v65 + 8);
    }
    else {
      uint64_t v115 = 0;
    }
    if (CFCalendarComposeAbsoluteTime(v115, (CFAbsoluteTime *)at, "yMdHms", v46, v52, v58, v59, v62, v63))
    {
      CFAbsoluteTime v122 = *(double *)at + (double)v64;
      goto LABEL_201;
    }
LABEL_106:
    if (*a2) {
      return 0;
    }
    goto LABEL_2;
  }
  uint64_t v120 = 0;
  uint64_t v121 = 0;
  uint64_t v119 = 0;
  *(CFAbsoluteTime *)at = a6;
  pthread_mutex_lock(&_expandFunctions_expand_mutex);
  if (_expandFunctions_once != -1) {
    dispatch_once(&_expandFunctions_once, &__block_literal_global_15);
  }
  if (!CFCalendarDecomposeAbsoluteTime((CFCalendarRef)_expandFunctions_calendar, a6, "yMdHms", &v120, (char *)&v119 + 4, &v119, (char *)&v121 + 4, &v121, (char *)&v120 + 4))goto LABEL_102; {
  if (strncmp(a1 + 5, "now", 3uLL))
  }
  {
    if (!strncmp(a1 + 5, "today", 5uLL))
    {
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      uint64_t v15 = 0;
      uint64_t v16 = a1 + 10;
      uint64_t v121 = 0;
      HIDWORD(v120) = 0;
      uint64_t v18 = 100;
      uint64_t v17 = v119;
      goto LABEL_97;
    }
    if (!strncmp(a1 + 5, "yesterday", 9uLL))
    {
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      uint64_t v15 = 0;
      uint64_t v16 = a1 + 14;
      uint64_t v121 = 0;
      HIDWORD(v120) = 0;
      uint64_t v17 = (v119 - 1);
    }
    else if (!strncmp(a1 + 5, "two_days_ago", 0xCuLL))
    {
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      uint64_t v15 = 0;
      uint64_t v16 = a1 + 17;
      uint64_t v121 = 0;
      HIDWORD(v120) = 0;
      uint64_t v17 = (v119 - 2);
    }
    else
    {
      if (strncmp(a1 + 5, "three_days_ago", 0xEuLL))
      {
        if (!strncmp(a1 + 5, "this_week", 9uLL))
        {
          uint64_t v16 = a1 + 14;
          uint64_t v121 = 0;
          HIDWORD(v120) = 0;
          int OrdinalityOfUnit = CFCalendarGetOrdinalityOfUnit((CFCalendarRef)_expandFunctions_calendar, 0x10uLL, 0x1000uLL, a6);
          uint64_t v17 = (v119 - OrdinalityOfUnit + 1);
          LODWORD(v119) = v119 - OrdinalityOfUnit + 1;
          uint64_t v14 = v121;
          uint64_t v15 = HIDWORD(v121);
          uint64_t v18 = 119;
          uint64_t v13 = HIDWORD(v120);
        }
        else if (!strncmp(a1 + 5, "this_month", 0xAuLL))
        {
          uint64_t v13 = 0;
          uint64_t v14 = 0;
          uint64_t v15 = 0;
          uint64_t v16 = a1 + 15;
          uint64_t v121 = 0;
          HIDWORD(v120) = 0;
          uint64_t v17 = 1;
          LODWORD(v119) = 1;
          uint64_t v18 = 77;
        }
        else
        {
          if (strncmp(a1 + 5, "this_year", 9uLL)) {
            goto LABEL_102;
          }
          uint64_t v13 = 0;
          uint64_t v14 = 0;
          uint64_t v15 = 0;
          uint64_t v121 = 0;
          uint64_t v16 = a1 + 14;
          HIDWORD(v120) = 0;
          uint64_t v17 = 1;
          uint64_t v119 = 0x100000001;
          uint64_t v18 = 89;
        }
LABEL_97:
        if (CFCalendarComposeAbsoluteTime((CFCalendarRef)_expandFunctions_calendar, (CFAbsoluteTime *)at, "yMdHms", v120, HIDWORD(v119), v17, v15, v14, v13))
        {
          goto LABEL_98;
        }
LABEL_102:
        pthread_mutex_unlock(&_expandFunctions_expand_mutex);
LABEL_103:
        int v73 = *__error();
        long long v74 = _SILogForLogForCategory(1);
        os_log_type_t v75 = dword_1EA0DBB54 < 3;
        if (os_log_type_enabled(v74, (os_log_type_t)(dword_1EA0DBB54 < 3)))
        {
          *(_DWORD *)at = 136315138;
          *(void *)&at[4] = a1;
          _os_log_impl(&dword_1BDAD0000, v74, v75, "*warn* failed to parse %s", at, 0xCu);
        }
        *__error() = v73;
        goto LABEL_106;
      }
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      uint64_t v15 = 0;
      uint64_t v16 = a1 + 19;
      uint64_t v121 = 0;
      HIDWORD(v120) = 0;
      uint64_t v17 = (v119 - 3);
    }
    LODWORD(v119) = v17;
    uint64_t v18 = 100;
    goto LABEL_97;
  }
  uint64_t v16 = a1 + 8;
  uint64_t v18 = 115;
LABEL_98:
  if (*v16 == 40)
  {
    int v71 = v16[1];
    long long v70 = v16 + 1;
    if (v71 != 41)
    {
      size_t v118 = v70;
      double v76 = strtod(v70, &v118);
      if (v118 == v70)
      {
LABEL_142:
        pthread_mutex_unlock(&_expandFunctions_expand_mutex);
        goto LABEL_201;
      }
      int v77 = (int)v76;
      int v78 = parseTimeUnit((uint64_t *)&v118, v18);
      if (v78 <= 103)
      {
        if (v78 == 77)
        {
          HIDWORD(v119) += v77;
          goto LABEL_100;
        }
        if (v78 == 89)
        {
          LODWORD(v120) = v120 + v77;
          goto LABEL_100;
        }
        if (v78 != 100) {
          goto LABEL_100;
        }
        double v79 = *(double *)at;
        int v81 = 86400;
      }
      else if (v78 > 114)
      {
        if (v78 != 119)
        {
          if (v78 != 115) {
            goto LABEL_100;
          }
          double v79 = *(double *)at;
          double v88 = (double)v77;
          goto LABEL_141;
        }
        double v79 = *(double *)at;
        int v81 = 604800;
      }
      else
      {
        if (v78 != 104)
        {
          if (v78 != 109) {
            goto LABEL_100;
          }
          double v79 = *(double *)at;
          int v80 = 60 * v77;
          goto LABEL_140;
        }
        double v79 = *(double *)at;
        int v81 = 3600;
      }
      int v80 = v77 * v81;
LABEL_140:
      double v88 = (double)v80;
LABEL_141:
      CFAbsoluteTime v122 = v79 + v88;
      goto LABEL_142;
    }
  }
LABEL_100:
  int v72 = CFCalendarComposeAbsoluteTime((CFCalendarRef)_expandFunctions_calendar, &v122, "yMdHms", v120, HIDWORD(v119), v119, HIDWORD(v121), v121, HIDWORD(v120));
  pthread_mutex_unlock(&_expandFunctions_expand_mutex);
  if (!v72) {
    goto LABEL_103;
  }
LABEL_201:
  (*(void (**)(uint64_t, char *, size_t, CFAbsoluteTime))(a5 + 16))(a5, a2, a3, v122);
  if (dword_1EA0DBB54 >= 5)
  {
    int v116 = *__error();
    size_t v117 = _SILogForLogForCategory(1);
    if (os_log_type_enabled(v117, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)at = 134218498;
      *(void *)&at[4] = (uint64_t)v122;
      __int16 v124 = 2080;
      v125 = a2;
      __int16 v126 = 2080;
      unsigned int v127 = a1;
      _os_log_impl(&dword_1BDAD0000, v117, OS_LOG_TYPE_DEFAULT, "Computed time (%lld) %s from %s", at, 0x20u);
    }
    *__error() = v116;
  }
  return 0x10000;
}

uint64_t __expandFunctions_block_invoke(int a1, char *__str, size_t __size, double a4)
{
  if (trunc(a4) == a4) {
    return snprintf(__str, __size, "%lld");
  }
  else {
    return snprintf(__str, __size, "%f");
  }
}

uint64_t expandFunctionsISO8601(const char *a1, char *a2, size_t a3, uint64_t a4, CFAbsoluteTime a5)
{
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 0x40000000;
  v6[2] = __expandFunctionsISO8601_block_invoke;
  v6[3] = &__block_descriptor_tmp_9;
  v6[4] = a4;
  return _expandFunctions(a1, a2, a3, a4, (uint64_t)v6, a5);
}

uint64_t __expandFunctionsISO8601_block_invoke(uint64_t a1, char *a2, size_t a3, CFAbsoluteTime a4)
{
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6) {
    uint64_t v7 = *(__CFCalendar **)(v6 + 16);
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v9 = 0;
  CFCalendarDecomposeAbsoluteTime(v7, a4, "yMdHms", &v10, (char *)&v9 + 4, &v9, (char *)&v11 + 4, &v11, (char *)&v10 + 4);
  return snprintf(a2, a3, "%04i-%02i-%02iT%02i:%02i:%02iZ", v10, HIDWORD(v9), v9, HIDWORD(v11), v11, HIDWORD(v10));
}

CFCalendarRef ___expandFunctions_block_invoke()
{
  CFCalendarRef result = CFCalendarCreateWithIdentifier((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (CFCalendarIdentifier)*MEMORY[0x1E4F1D198]);
  _expandFunctions_calendar = (uint64_t)result;
  return result;
}

uint64_t parseTimeUnit(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(char *)(*a1)++;
  if ((v3 - 77) > 0x2A || ((1 << (v3 - 77)) & 0x44108801001) == 0)
  {
    *a1 = v2;
    return a2;
  }
  return v3;
}

uint64_t unicode_combinable(unsigned int a1)
{
  if (a1 < 0x300) {
    return 0;
  }
  int v1 = __CFUniCharCombiningBitmap[(unint64_t)a1 >> 8];
  if (!__CFUniCharCombiningBitmap[(unint64_t)a1 >> 8]) {
    return 0;
  }
  if (v1 == 255) {
    return 1;
  }
  return (__CFUniCharCombiningBitmap[(a1 >> 3) + 256 + 32 * v1 - 32] >> (a1 & 7)) & 1;
}

uint64_t unicode_decomposeable(unsigned int a1)
{
  if (a1 < 0xC0) {
    return 0;
  }
  int v1 = __CFUniCharDecomposableBitmap[(unint64_t)a1 >> 8];
  if (!__CFUniCharDecomposableBitmap[(unint64_t)a1 >> 8]) {
    return 0;
  }
  if (v1 == 255) {
    return 1;
  }
  return (__CFUniCharDecomposableBitmap[(a1 >> 3) + 256 + 32 * v1 - 32] >> (a1 & 7)) & 1;
}

uint64_t utf8_encodelen(unsigned __int16 *a1, unint64_t a2, int a3, char a4)
{
  if (a2 < 2) {
    return 0;
  }
  uint64_t result = 0;
  unint64_t v6 = a2 >> 1;
  if (a3) {
    __int16 v7 = a3;
  }
  else {
    __int16 v7 = 95;
  }
  do
  {
    unsigned int v9 = *a1++;
    unsigned __int16 v8 = v9;
    unsigned int v10 = bswap32(v9) >> 16;
    if (a4) {
      unsigned __int16 v8 = v10;
    }
    int v11 = v8;
    if (!v8) {
      unsigned __int16 v8 = 9216;
    }
    if (v11 == 47) {
      unsigned __int16 v8 = v7;
    }
    if (v8 >= 0x80u)
    {
      if (v8 >= 0x800u)
      {
        if (v8 >> 11 == 27) {
          uint64_t v12 = 2;
        }
        else {
          uint64_t v12 = 3;
        }
      }
      else
      {
        uint64_t v12 = 2;
      }
    }
    else
    {
      uint64_t v12 = 1;
    }
    result += v12;
    --v6;
  }
  while (v6);
  return result;
}

uint64_t utf8_encodestr(unsigned __int16 *a1, unint64_t a2, unsigned char *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  void v31[2] = *MEMORY[0x1E4F143B8];
  v31[0] = 0;
  v31[1] = 0;
  if (a2 < 2)
  {
    uint64_t result = 0;
    unsigned __int16 v8 = a3;
    goto LABEL_39;
  }
  uint64_t result = 0;
  int v10 = 0;
  int v11 = 0;
  unint64_t v12 = (unint64_t)&a3[a5 - ((a7 & 2) == 0)];
  unint64_t v13 = a2 >> 1;
  unsigned __int16 v8 = a3;
  while (1)
  {
    while (1)
    {
      --v13;
      if (v10 < 1)
      {
        unsigned int v16 = *a1++;
        unsigned int v14 = v16;
        unsigned int v17 = bswap32(v16) >> 16;
        if (a7) {
          unsigned int v14 = v17;
        }
        if ((a7 & 4) != 0)
        {
          int v18 = (unsigned __int16)v14;
          if ((unsigned __int16)v14 >= 0xC0u)
          {
            int v19 = __CFUniCharDecomposableBitmap[(unint64_t)(unsigned __int16)v14 >> 8];
            if (!__CFUniCharDecomposableBitmap[(unint64_t)(unsigned __int16)v14 >> 8]
              || v19 != 255
              && ((__CFUniCharDecomposableBitmap[(v14 >> 3) + 256 + 32 * v19 - 32] >> (v14 & 7)) & 1) == 0)
            {
              goto LABEL_18;
            }
            unsigned int v30 = result;
            uint64_t v20 = a4;
            uint64_t v21 = a3;
            uint64_t v22 = a6;
            uint64_t v23 = a7;
            int v24 = unicode_decompose(v14, v31);
            a7 = v23;
            a6 = v22;
            a3 = v21;
            a4 = v20;
            int v10 = v24 - 1;
            uint64_t result = v30;
            v13 += v10;
            unsigned int v14 = LOWORD(v31[0]);
            int v11 = (unsigned __int16 *)v31 + 1;
          }
        }
      }
      else
      {
        unsigned int v15 = *v11++;
        unsigned int v14 = v15;
        --v10;
      }
      if (!(_WORD)v14)
      {
        LOBYTE(v14) = 0;
        LOBYTE(v25) = 2;
        LOBYTE(v26) = -112;
        goto LABEL_23;
      }
      if ((unsigned __int16)v14 == 47)
      {
        unsigned int v14 = a6;
        if (!a6) {
          break;
        }
      }
      int v18 = (unsigned __int16)v14;
      if ((unsigned __int16)v14 < 0x80u) {
        goto LABEL_35;
      }
LABEL_18:
      if ((unsigned __int16)v14 > 0x7FFu)
      {
        __int16 v26 = (unsigned __int16)v14 >> 6;
        __int16 v25 = (unsigned __int16)v14 >> 12;
        if ((unsigned __int16)v14 >> 10 != 54 || !v13) {
          goto LABEL_23;
        }
        unsigned int v27 = *a1;
        unsigned int v28 = bswap32(v27) >> 16;
        if (a7) {
          LOWORD(v27) = v28;
        }
        if ((unsigned __int16)v27 >> 10 == 55)
        {
          if ((unint64_t)(v8 + 3) >= v12) {
            goto LABEL_38;
          }
          unsigned int v29 = (v18 << 10) + (unsigned __int16)v27 - 56613888;
          --v13;
          ++a1;
          *unsigned __int16 v8 = (v29 >> 18) | 0xF0;
          v8[1] = (v29 >> 12) & 0x3F | 0x80;
          v8[2] = (v29 >> 6) & 0x3F | 0x80;
          v8[3] = v27 & 0x3F | 0x80;
          v8 += 4;
          if (!v13) {
            goto LABEL_39;
          }
        }
        else
        {
LABEL_23:
          if ((unint64_t)(v8 + 2) >= v12) {
            goto LABEL_38;
          }
          *unsigned __int16 v8 = v25 | 0xE0;
          v8[1] = v26 & 0x3F | 0x80;
          v8[2] = v14 & 0x3F | 0x80;
          v8 += 3;
          if (!v13) {
            goto LABEL_39;
          }
        }
      }
      else
      {
        if ((unint64_t)(v8 + 1) >= v12) {
          goto LABEL_38;
        }
        *unsigned __int16 v8 = (v14 >> 6) | 0xC0;
        v8[1] = v14 & 0x3F | 0x80;
        v8 += 2;
        if (!v13) {
          goto LABEL_39;
        }
      }
    }
    LOBYTE(v14) = 95;
    uint64_t result = 22;
LABEL_35:
    if ((unint64_t)v8 >= v12) {
      break;
    }
    *v8++ = v14;
    if (!v13) {
      goto LABEL_39;
    }
  }
LABEL_38:
  uint64_t result = 63;
LABEL_39:
  *a4 = v8 - a3;
  if ((a7 & 2) == 0) {
    *unsigned __int16 v8 = 0;
  }
  return result;
}

uint64_t unicode_decompose(__int16 a1, _WORD *a2)
{
  unsigned __int16 v2 = a1 + 21504;
  if ((unsigned __int16)(a1 + 21504) > 0x2BA4u) {
    return unicode_recursive_decompose(a1, a2);
  }
  *a2 = ((28533 * (unsigned __int16)(a1 + 21504)) >> 24) | 0x1100;
  a2[1] = v2 % 0x24Cu / 0x1C + 4449;
  if (!(v2 % 0x1Cu)) {
    return 2;
  }
  a2[2] = (unsigned __int16)(a1 + 21504) % 0x1Cu + 4519;
  return 3;
}

uint64_t utf8_decodestr(unsigned __int8 *a1, unint64_t a2, _WORD *a3, void *a4, uint64_t a5, _DWORD *a6, char a7)
{
  v45[2] = *MEMORY[0x1E4F143B8];
  *a6 = 0;
  if (!a2)
  {
    uint64_t result = 0;
    int v11 = a3;
    goto LABEL_66;
  }
  unint64_t v9 = a2;
  unint64_t v10 = (unint64_t)a3 + a5;
  int v11 = a3;
  unint64_t v12 = a1;
  while (1)
  {
    unsigned int v14 = *v12++;
    unint64_t v13 = v14;
    if (!v14)
    {
LABEL_61:
      uint64_t result = 0;
      goto LABEL_66;
    }
    --v9;
    if ((v13 & 0x80) == 0) {
      goto LABEL_56;
    }
    unint64_t v15 = utf_extrabytes[v13 >> 3];
    BOOL v16 = v9 >= v15;
    v9 -= v15;
    if (!v16) {
      goto LABEL_63;
    }
    if (v15 != 3) {
      break;
    }
    int v19 = *v12;
    if ((v19 & 0xC0) != 0x80
      || (int v20 = a1[2], (v20 & 0xC0) != 0x80)
      || (int v21 = a1[3], (v21 & 0xC0) != 0x80)
      || (unsigned int v22 = v21 + (((v19 << 6) + (v13 << 12) + v20) << 6) - 63512704, v22 >> 20))
    {
LABEL_63:
      uint64_t result = 22;
      goto LABEL_66;
    }
    unsigned int v23 = (v22 >> 10) - 10240;
    if (a7)
    {
      _WORD *v11 = bswap32(v23) >> 16;
      int v24 = v11 + 1;
      if ((unint64_t)(v11 + 1) >= v10)
      {
LABEL_67:
        uint64_t result = 63;
        int v11 = v24;
        goto LABEL_66;
      }
      __int16 v25 = __rev16(v22 & 0x3FF | 0xDC00);
    }
    else
    {
      _WORD *v11 = v23;
      int v24 = v11 + 1;
      if ((unint64_t)(v11 + 1) >= v10) {
        goto LABEL_67;
      }
      __int16 v25 = v22 & 0x3FF | 0xDC00;
    }
    unint64_t v12 = a1 + 4;
    v11[1] = v25;
    v11 += 2;
LABEL_60:
    a1 = v12;
    if (!v9) {
      goto LABEL_61;
    }
  }
  if (v15 == 2)
  {
    int v26 = *v12;
    if ((v26 & 0xC0) != 0x80) {
      goto LABEL_63;
    }
    int v27 = a1[2];
    if ((v27 & 0xC0) != 0x80) {
      goto LABEL_63;
    }
    int v28 = (v26 << 6) + (v13 << 12) + v27;
    unsigned int v18 = v28 - 925824;
    if ((v28 - 925824) < 0x800) {
      goto LABEL_63;
    }
    unint64_t v12 = a1 + 3;
    if (v18 >> 11 >= 0x1B)
    {
      uint64_t result = 22;
      if (v18 < 0xE000 || (v28 & 0x3FFFFE) == 0xF207E) {
        goto LABEL_66;
      }
    }
  }
  else
  {
    if (v15 != 1) {
      goto LABEL_63;
    }
    int v17 = *v12;
    if ((v17 & 0xC0) != 0x80) {
      goto LABEL_63;
    }
    unsigned int v18 = v17 + (v13 << 6) - 12416;
    if (v18 < 0x80) {
      goto LABEL_63;
    }
    unint64_t v12 = a1 + 2;
  }
  if ((a7 & 4) == 0)
  {
    if ((a7 & 8) != 0 && (unsigned __int16)v18 >= 0x300u)
    {
      int v30 = __CFUniCharCombiningBitmap[BYTE1(v18)];
      if (__CFUniCharCombiningBitmap[BYTE1(v18)])
      {
        if (v30 == 255
          || ((__CFUniCharCombiningBitmap[(v18 >> 3) + 256 + 32 * v30 - 32] >> (v18 & 7)) & 1) != 0)
        {
          *a6 = 1;
          if (v11 == a3)
          {
            int v11 = a3;
          }
          else
          {
            unsigned int v31 = (unsigned __int16)*(v11 - 1);
            unsigned int v32 = bswap32(v31) >> 16;
            if (a7) {
              LOWORD(v31) = v32;
            }
            uint64_t v33 = a4;
            unsigned int v43 = a6;
            unsigned int v34 = unicode_combine((unsigned __int16)v31, (unsigned __int16)v18);
            a6 = v43;
            a4 = v33;
            if (v34)
            {
              --v11;
              unsigned int v18 = v34;
            }
          }
        }
      }
    }
LABEL_53:
    if (v18 == 9216) {
      LODWORD(v13) = 0;
    }
    else {
      LODWORD(v13) = v18;
    }
LABEL_56:
    if ((unint64_t)v11 >= v10) {
      goto LABEL_65;
    }
    unsigned int v42 = bswap32(v13) >> 16;
    if (a7) {
      LOWORD(v13) = v42;
    }
    *v11++ = v13;
    goto LABEL_60;
  }
  if ((unsigned __int16)v18 < 0xC0u) {
    goto LABEL_53;
  }
  int v35 = __CFUniCharDecomposableBitmap[BYTE1(v18)];
  if (!__CFUniCharDecomposableBitmap[BYTE1(v18)]
    || v35 != 255
    && ((__CFUniCharDecomposableBitmap[(v18 >> 3) + 256 + 32 * v35 - 32] >> (v18 & 7)) & 1) == 0)
  {
    goto LABEL_53;
  }
  int v44 = a6;
  v45[0] = 0;
  unint64_t v36 = a4;
  v45[1] = 0;
  int v37 = unicode_decompose(v18, v45);
  if (v37 < 1)
  {
    a4 = v36;
    a6 = v44;
    goto LABEL_60;
  }
  uint64_t v38 = 0;
  a4 = v36;
  a6 = v44;
  while (1)
  {
    int v39 = &v11[v38];
    unsigned int v40 = *(unsigned __int16 *)((char *)v45 + v38 * 2);
    unsigned int v41 = bswap32(v40) >> 16;
    if (a7) {
      LOWORD(v40) = v41;
    }
    *int v39 = v40;
    if ((unint64_t)(v39 + 1) >= v10) {
      break;
    }
    if (v37 == ++v38)
    {
      int v11 = (_WORD *)((char *)v11 + v38 * 2);
      goto LABEL_60;
    }
  }
  int v11 = v39 + 1;
LABEL_65:
  uint64_t result = 63;
LABEL_66:
  *a4 = (char *)v11 - (char *)a3;
  return result;
}

uint64_t unicode_combine(unsigned int a1, unsigned int a2)
{
  if (a2 - 4449 > 0x61)
  {
    if ((unsigned __int16)(a2 - 12443) < 0xD265u) {
      return 0;
    }
  }
  else
  {
    if (a2 >> 1 <= 0x8BA && (unsigned __int16)(a1 - 4352) <= 0x12u)
    {
      __int16 v2 = 28 * a2 + 588 * a1;
      __int16 v3 = -18076;
      return (unsigned __int16)(v2 + v3);
    }
    if (a2 >> 3 >= 0x235 && (unsigned __int16)((unsigned __int16)(a1 + 21504) >> 2) <= 0xAE8u)
    {
      HIDWORD(v9) = -1227133513 * a1 - 1840706560;
      LODWORD(v9) = HIDWORD(v9);
      if ((v9 >> 2) > 0x9249249) {
        return 0;
      }
      __int16 v2 = a1 + a2;
      __int16 v3 = -4519;
      return (unsigned __int16)(v2 + v3);
    }
  }
  uint64_t v5 = (unsigned int *)&__CFUniCharPrecompSourceTable;
  unint64_t v6 = (unsigned int *)&unk_1BDB1ED40;
  while (1)
  {
    uint64_t v7 = ((char *)v6 - (char *)v5) >> 4;
    unsigned __int16 v8 = &v5[2 * v7];
    if (*v8 <= a2) {
      break;
    }
    unint64_t v6 = v8 - 2;
LABEL_12:
    if (v5 > v6) {
      return 0;
    }
  }
  if (*v8 < a2)
  {
    uint64_t v5 = v8 + 2;
    goto LABEL_12;
  }
  unsigned int v10 = v5[2 * v7 + 1];
  if (v10)
  {
    int v11 = (char *)&__CFUniCharBMPPrecompDestinationTable + 4 * (unsigned __int16)v10;
    if (*(unsigned __int16 *)v11 <= a1)
    {
      unint64_t v12 = (unsigned __int16 *)&v11[4 * HIWORD(v10) - 4];
      if (*v12 >= a1)
      {
        while (1)
        {
          uint64_t v14 = ((char *)v12 - v11) >> 3;
          unint64_t v15 = (unsigned __int16 *)&v11[4 * v14];
          unsigned int v16 = *v15;
          if (v16 <= a1)
          {
            if (v16 >= a1) {
              return *(unsigned __int16 *)&v11[4 * v14 + 2];
            }
            int v11 = (char *)(v15 + 2);
          }
          else
          {
            unint64_t v12 = v15 - 2;
          }
          unsigned __int16 v4 = 0;
          if (v11 > (char *)v12) {
            return v4;
          }
        }
      }
    }
  }
  return 0;
}

uint64_t unicode_recursive_decompose(unsigned int a1, _WORD *a2)
{
  __int16 v2 = a2;
  if ((unsigned __int16)(a1 + 1201) < 0x571u)
  {
LABEL_8:
    unsigned int v8 = 0;
    goto LABEL_9;
  }
  __int16 v3 = (unsigned __int16 *)&__CFUniCharDecompositionTable;
  unsigned __int16 v4 = (unsigned __int16 *)&unk_1BDB22768;
  while (1)
  {
    uint64_t v5 = ((char *)v4 - (char *)v3) >> 3;
    unint64_t v6 = &v3[2 * v5];
    unsigned int v7 = *v6;
    if (v7 <= a1) {
      break;
    }
    unsigned __int16 v4 = v6 - 2;
LABEL_7:
    if (v3 > v4) {
      goto LABEL_8;
    }
  }
  if (v7 < a1)
  {
    __int16 v3 = v6 + 2;
    goto LABEL_7;
  }
  unsigned int v8 = v3[2 * v5 + 1];
LABEL_9:
  int v9 = (v8 >> 12) & 7;
  __int16 v15 = v8 & 0xFFF;
  unsigned int v10 = (char *)&__CFUniCharMultipleDecompositionTable + 2 * (v8 & 0xFFF);
  int v11 = (unsigned __int16 *)&v15;
  if (v9 != 1) {
    int v11 = (unsigned __int16 *)((char *)&__CFUniCharMultipleDecompositionTable + 2 * (v8 & 0xFFF));
  }
  if ((v8 & 0x8000) == 0)
  {
    LODWORD(result) = 0;
    goto LABEL_17;
  }
  uint64_t result = unicode_recursive_decompose(*v11, a2);
  if (result)
  {
    --v9;
    unint64_t v13 = &v15;
    if (v9) {
      unint64_t v13 = (__int16 *)v10;
    }
    int v11 = (unsigned __int16 *)(v13 + 1);
    v2 += result;
LABEL_17:
    for (uint64_t result = (result + v9); v9; --v9)
    {
      __int16 v14 = *v11++;
      *v2++ = v14;
    }
  }
  return result;
}

uint64_t check_and_decompose_string(unsigned __int8 *a1, unint64_t a2, unsigned __int8 **a3, unint64_t *a4)
{
  unint64_t v23 = 0;
  *a3 = a1;
  *a4 = a2;
  if (!a2) {
    return 0;
  }
  unint64_t v8 = 0;
  int v24 = 0;
  int v9 = a1;
  while (((char)*v9 & 0x80000000) == 0)
  {
LABEL_10:
    ++v8;
    ++v9;
    if (v8 >= a2) {
      goto LABEL_11;
    }
  }
  int v22 = 0;
  unint64_t v10 = utf8_byte_length_noerror_utf8_len_table[(unint64_t)*v9 >> 4];
  if (utf8_decodestr(v9, v10, &v22, &v23, 4, &v24, 0)) {
    return 22;
  }
  if ((unsigned __int16)v22 < 0xC0u
    || (int v11 = __CFUniCharDecomposableBitmap[(unint64_t)(unsigned __int16)v22 >> 8]) == 0
    || v11 != 255
    && ((__CFUniCharDecomposableBitmap[(v22 >> 3) + 256 + 32 * v11 - 32] >> (v22 & 7)) & 1) == 0)
  {
    v8 += v10 - 1;
    v9 += v10 - 1;
    goto LABEL_10;
  }
LABEL_11:
  if (v8 >= a2)
  {
    if (v8 <= a2) {
      return 0;
    }
    return 22;
  }
  uint64_t v12 = (a2 >> 1) & 0x7FFFFFFFFFFFFFFELL;
  unint64_t v13 = malloc_type_malloc(v12 + 2 * a2 + 2, 0xBDF9019uLL);
  if (v13)
  {
    size_t v14 = 2 * a2 + v12 + 66;
    do
    {
      int v15 = utf8_decodestr(a1, a2, v13, &v23, v14 - 64, &v24, 4);
      if (!v15) {
        break;
      }
      if (v15 == 22)
      {
        free(v13);
        return 22;
      }
      free(v13);
      unint64_t v13 = malloc_type_malloc(v14, 0xBDF9019uLL);
      v14 += 64;
    }
    while (v13);
  }
  unint64_t v16 = v23;
  uint64_t v17 = utf8_encodelen(v13, v23, 47, 0);
  unsigned int v18 = malloc_type_malloc(v17 + 1, 0xB67BE8AFuLL);
  uint64_t v19 = utf8_encodestr(v13, v16, v18, &v23, v17 + 1, 47, 4);
  if (v19)
  {
    uint64_t v20 = v19;
    free(v13);
    free(v18);
    return v20;
  }
  v18[v17] = 0;
  *a3 = v18;
  *a4 = v17 + 1;
  free(v13);
  return 0;
}

uint64_t map_case(uint64_t a1)
{
  uint64_t v1 = a1;
  if (a1 > 0x7F)
  {
    if ((unsigned __int16)(a1 + 223) < 0x3Au || a1 < 0x587 || (unsigned __int16)(a1 - 7680) <= 0x6E9u)
    {
      int __key = (unsigned __int16)a1;
      __int16 v3 = (unsigned __int16 *)bsearch(&__key, &case_mapping_table, 0x57AuLL, 4uLL, (int (__cdecl *)(const void *, const void *))case_cmp);
      if (v3) {
        return v3[1];
      }
    }
  }
  else
  {
    if ((a1 - 97) > 0x19) {
      __int16 v2 = (unsigned __int8 *)&tolower_map;
    }
    else {
      __int16 v2 = (unsigned __int8 *)&toupper_map;
    }
    return v2[a1];
  }
  return v1;
}

uint64_t case_cmp(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return *a1 - *a2;
}

void get_canonical_language_identifier_for_string(char *cStr, char *a2, int a3)
{
  *a2 = 0;
  CFStringRef v6 = CFStringCreateWithCStringNoCopy(0, cStr, 0x8000100u, (CFAllocatorRef)*MEMORY[0x1E4F1CFA0]);
  if (v6)
  {
    CFStringRef v7 = v6;
    CFStringRef CanonicalLanguageIdentifierFromString = CFLocaleCreateCanonicalLanguageIdentifierFromString(0, v6);
    if (CanonicalLanguageIdentifierFromString)
    {
      CFStringRef v9 = CanonicalLanguageIdentifierFromString;
      CFStringGetCString(CanonicalLanguageIdentifierFromString, a2, a3, 0x8000100u);
      CFRelease(v9);
    }
    CFRelease(v7);
  }
  if (!*a2)
  {
    strlcpy(a2, cStr, a3);
  }
}

ssize_t file_scanner_read(ssize_t result)
{
  uint64_t v1 = (char *)(result + 16);
  *(void *)(result + 4120) = result + 16;
  *(void *)(result + 4112) = result + 16;
  if (!*(_DWORD *)(result + 4128))
  {
    ssize_t v2 = result;
    uint64_t result = pread(*(_DWORD *)result, v1, 0x1000uLL, *(void *)(result + 8));
    if (result == -1)
    {
      __int16 v3 = (FILE *)*MEMORY[0x1E4F143C8];
      unsigned __int16 v4 = __error();
      int v5 = *v4;
      *(_DWORD *)(v2 + 4128) = *v4;
      return fprintf(v3, "\npread error(%d) offset: 0x%llx \n", v5, *(void *)(v2 + 8));
    }
    else
    {
      *(void *)(v2 + 8) += result;
      *(void *)(v2 + 4112) = v1;
      *(void *)(v2 + 4120) = &v1[result];
      if (!result) {
        *(_DWORD *)(v2 + 4128) = -1;
      }
    }
  }
  return result;
}

ssize_t file_scanner_init(ssize_t result, int a2, uint64_t a3)
{
  *(_DWORD *)uint64_t result = a2;
  *(void *)(result + 8) = a3;
  *(void *)(result + 4120) = result + 16;
  *(void *)(result + 4112) = result + 16;
  *(_DWORD *)(result + 4128) = 0;
  return file_scanner_read(result);
}

uint64_t file_scanner_read_vint(ssize_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  ssize_t v2 = *(char **)(a1 + 4112);
  if ((uint64_t)(*(void *)(a1 + 4120) - (void)v2) < 11)
  {
    uint64_t v7 = 0;
    memset(v13, 0, sizeof(v13));
    while (1)
    {
      if ((unint64_t)v2 >= *(void *)(a1 + 4120))
      {
        file_scanner_read(a1);
        ssize_t v2 = *(char **)(a1 + 4112);
      }
      unint64_t v8 = v2 + 1;
      *(void *)(a1 + 4112) = v2 + 1;
      int v9 = *v2;
      *((unsigned char *)v13 + v7) = v9;
      if ((v9 & 0x80000000) == 0) {
        break;
      }
      ++v7;
      ssize_t v2 = v8;
      if (v7 == 11) {
        return 0;
      }
    }
    uint64_t result = 0;
    if (v7 <= 9)
    {
      int v10 = *(_DWORD *)(a1 + 4128);
      if (!v10)
      {
        uint64_t result = 0;
        int v11 = (char *)v13;
        do
        {
          char v12 = *v11++;
          result |= (unint64_t)(v12 & 0x7F) << v10;
          v10 += 7;
        }
        while (v12 < 0);
      }
    }
  }
  else
  {
    int v3 = 0;
    uint64_t result = 0;
    int v5 = v2 + 1;
    do
    {
      char v6 = *(v5 - 1);
      *(void *)(a1 + 4112) = v5;
      result |= (unint64_t)(v6 & 0x7F) << v3;
      v3 += 7;
      ++v5;
    }
    while (v6 < 0);
  }
  return result;
}

uint64_t file_scanner_read_vint32(ssize_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  int v9 = *(char **)(a1 + 4112);
  if ((uint64_t)(*(void *)(a1 + 4120) - (void)v9) >= 11)
  {
    uint64_t result = *v9;
    if (*v9 < 0)
    {
      int v15 = v9[1];
      if (v9[1] < 0)
      {
        int v16 = v9[2];
        if (v9[2] < 0)
        {
          int v18 = v9[3];
          if (v9[3] < 0)
          {
            int v19 = v9[4];
            if (v19 < 0) {
              file_scanner_read_vint32_cold_1(result, a2, a3, a4, a5, a6, a7, a8);
            }
            uint64_t v20 = ((v18 & 0x7F) << 21) | (v19 << 28) | ((v16 & 0x7F) << 14) | ((v15 & 0x7F) << 7) | (result & 0x7F);
            uint64_t v11 = 5;
            uint64_t result = v20;
            goto LABEL_22;
          }
          uint64_t v17 = ((v16 & 0x7F) << 14) | (v18 << 21) | ((v15 & 0x7F) << 7) | (result & 0x7F);
          uint64_t v11 = 4;
        }
        else
        {
          uint64_t v17 = ((v15 & 0x7F) << 7) | (v16 << 14) | (result & 0x7F);
          uint64_t v11 = 3;
        }
        uint64_t result = v17;
      }
      else
      {
        uint64_t result = result & 0x7F | (v15 << 7);
        uint64_t v11 = 2;
      }
    }
    else
    {
      uint64_t v11 = 1;
    }
LABEL_22:
    *(void *)(a1 + 4112) = &v9[v11];
    return result;
  }
  uint64_t v12 = 0;
  memset(v21, 0, sizeof(v21));
  while (1)
  {
    if ((unint64_t)v9 >= *(void *)(a1 + 4120))
    {
      file_scanner_read(a1);
      int v9 = *(char **)(a1 + 4112);
    }
    unint64_t v13 = (unsigned __int8 *)(v9 + 1);
    *(void *)(a1 + 4112) = v9 + 1;
    int v14 = *v9;
    *((unsigned char *)v21 + v12) = v14;
    if ((v14 & 0x80000000) == 0) {
      break;
    }
    ++v12;
    int v9 = (char *)v13;
    if (v12 == 11) {
      return 0;
    }
  }
  uint64_t result = 0;
  if (v12 <= 9 && !*(_DWORD *)(a1 + 4128))
  {
    uint64_t result = LOBYTE(v21[0]);
    if (SLOBYTE(v21[0]) < 0)
    {
      if (SBYTE1(v21[0]) < 0)
      {
        if (SBYTE2(v21[0]) < 0)
        {
          if (SBYTE3(v21[0]) < 0)
          {
            if (SBYTE4(v21[0]) < 0) {
              file_scanner_read_vint32_cold_1(LOBYTE(v21[0]), a2, a3, a4, a5, a6, a7, a8);
            }
            return ((BYTE3(v21[0]) & 0x7F) << 21) | (BYTE4(v21[0]) << 28) | ((BYTE2(v21[0]) & 0x7F) << 14) | ((BYTE1(v21[0]) & 0x7F) << 7) | v21[0] & 0x7F;
          }
          else
          {
            return ((BYTE2(v21[0]) & 0x7F) << 14) | (BYTE3(v21[0]) << 21) | ((BYTE1(v21[0]) & 0x7F) << 7) | v21[0] & 0x7F;
          }
        }
        else
        {
          return ((BYTE1(v21[0]) & 0x7F) << 7) | (BYTE2(v21[0]) << 14) | v21[0] & 0x7F;
        }
      }
      else
      {
        return v21[0] & 0x7F | (BYTE1(v21[0]) << 7);
      }
    }
  }
  return result;
}

unint64_t file_scanner_read_vint64_v2(ssize_t a1)
{
  *(void *)&v19[31] = *MEMORY[0x1E4F143B8];
  unint64_t v1 = *(void *)(a1 + 4120);
  ssize_t v2 = (void *)(a1 + 4112);
  int v3 = *(char **)(a1 + 4112);
  if ((uint64_t)(v1 - (void)v3) < 11)
  {
    if ((unint64_t)v3 >= v1)
    {
      file_scanner_read(a1);
      int v3 = *(char **)(a1 + 4112);
    }
    memset(v19, 0, 31);
    uint64_t v7 = v3 + 1;
    *ssize_t v2 = v3 + 1;
    int v8 = *v3;
    char v18 = v8;
    if (v8 < 0)
    {
      if (v8 >= 0xC0u)
      {
        uint64_t v10 = 4;
        uint64_t v11 = 5;
        uint64_t v12 = 6;
        uint64_t v13 = 7;
        uint64_t v14 = 8;
        if (v8 == 255) {
          uint64_t v14 = 9;
        }
        if (v8 >= 0xFEu) {
          uint64_t v13 = v14;
        }
        if (v8 >= 0xFCu) {
          uint64_t v12 = v13;
        }
        if (v8 >= 0xF8u) {
          uint64_t v11 = v12;
        }
        if (v8 >= 0xF0u) {
          uint64_t v10 = v11;
        }
        if (v8 >= 0xE0u) {
          uint64_t v9 = v10;
        }
        else {
          uint64_t v9 = 3;
        }
      }
      else
      {
        uint64_t v9 = 2;
      }
      int v15 = v19;
      uint64_t v16 = v9 - 1;
      do
      {
        if ((unint64_t)v7 >= *(void *)(a1 + 4120))
        {
          file_scanner_read(a1);
          uint64_t v7 = *(unsigned char **)(a1 + 4112);
        }
        *ssize_t v2 = v7 + 1;
        *v15++ = *v7++;
        --v16;
      }
      while (v16);
    }
    uint64_t v17 = &v18;
    return fp_restoreVInt64(&v17);
  }
  else
  {
    unsigned __int16 v4 = (char **)(a1 + 4112);
    return fp_restoreVInt64(v4);
  }
}

unint64_t fp_restoreVInt64(char **a1)
{
  unint64_t v1 = *a1;
  unint64_t v2 = **a1;
  if (**a1 < 0)
  {
    unsigned int v4 = **a1;
    if (v4 > 0xBF)
    {
      if (v4 > 0xDF)
      {
        if (v4 > 0xEF)
        {
          if (v4 > 0xF7)
          {
            if (v4 > 0xFB)
            {
              if (v4 > 0xFD)
              {
                if (v4 == 255)
                {
                  unint64_t v2 = *(void *)(v1 + 1);
                  uint64_t v3 = 9;
                }
                else
                {
                  unint64_t v2 = ((unint64_t)v1[1] << 48) | ((unint64_t)v1[2] << 40) | ((unint64_t)v1[3] << 32) | ((unint64_t)v1[4] << 24) | ((unint64_t)v1[5] << 16) | ((unint64_t)v1[6] << 8) | v1[7];
                  uint64_t v3 = 8;
                }
              }
              else
              {
                unint64_t v2 = ((v2 & 1) << 48) | ((unint64_t)v1[1] << 40) | ((unint64_t)v1[2] << 32) | ((unint64_t)v1[3] << 24) | ((unint64_t)v1[4] << 16) | ((unint64_t)v1[5] << 8) | v1[6];
                uint64_t v3 = 7;
              }
            }
            else
            {
              unint64_t v2 = ((v2 & 3) << 40) | ((unint64_t)v1[1] << 32) | ((unint64_t)v1[2] << 24) | ((unint64_t)v1[3] << 16) | ((unint64_t)v1[4] << 8) | v1[5];
              uint64_t v3 = 6;
            }
          }
          else
          {
            unint64_t v2 = ((v2 & 7) << 32) | ((unint64_t)v1[1] << 24) | ((unint64_t)v1[2] << 16) | ((unint64_t)v1[3] << 8) | v1[4];
            uint64_t v3 = 5;
          }
        }
        else
        {
          unint64_t v2 = ((v2 & 0xF) << 24) | ((unint64_t)v1[1] << 16) | ((unint64_t)v1[2] << 8) | v1[3];
          uint64_t v3 = 4;
        }
      }
      else
      {
        unint64_t v2 = ((v2 & 0x1F) << 16) | ((unint64_t)v1[1] << 8) | v1[2];
        uint64_t v3 = 3;
      }
    }
    else
    {
      unint64_t v2 = v1[1] | ((v2 & 0x3F) << 8);
      uint64_t v3 = 2;
    }
  }
  else
  {
    uint64_t v3 = 1;
  }
  *a1 = &v1[v3];
  return v2;
}

uint64_t file_scanner_read_vint32_v2(ssize_t a1)
{
  *(void *)&v16[31] = *MEMORY[0x1E4F143B8];
  unint64_t v1 = *(void *)(a1 + 4120);
  unint64_t v2 = (void *)(a1 + 4112);
  uint64_t v3 = *(char **)(a1 + 4112);
  if ((uint64_t)(v1 - (void)v3) < 11)
  {
    if ((unint64_t)v3 >= v1)
    {
      file_scanner_read(a1);
      uint64_t v3 = *(char **)(a1 + 4112);
    }
    memset(v16, 0, 31);
    uint64_t v7 = v3 + 1;
    *unint64_t v2 = v3 + 1;
    int v8 = *v3;
    char v15 = v8;
    if (v8 < 0)
    {
      uint64_t v9 = 3;
      uint64_t v10 = 4;
      if (v8 >= 0xF0u) {
        uint64_t v10 = 5;
      }
      if (v8 >= 0xE0u) {
        uint64_t v9 = v10;
      }
      if (v8 >= 0xC0u) {
        uint64_t v11 = v9;
      }
      else {
        uint64_t v11 = 2;
      }
      uint64_t v12 = v16;
      uint64_t v13 = v11 - 1;
      do
      {
        if ((unint64_t)v7 >= *(void *)(a1 + 4120))
        {
          file_scanner_read(a1);
          uint64_t v7 = *(unsigned char **)(a1 + 4112);
        }
        *unint64_t v2 = v7 + 1;
        *v12++ = *v7++;
        --v13;
      }
      while (v13);
    }
    uint64_t v14 = &v15;
    return fp_restoreVInt32(&v14);
  }
  else
  {
    unsigned int v4 = (char **)(a1 + 4112);
    return fp_restoreVInt32(v4);
  }
}

uint64_t fp_restoreVInt32(char **a1)
{
  unint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (**a1 < 0)
  {
    if (v2 > 0xBF)
    {
      if (v2 > 0xDF)
      {
        if (v2 > 0xEF)
        {
          uint64_t v2 = *(unsigned int *)(v1 + 1);
          uint64_t v3 = 5;
        }
        else
        {
          uint64_t v2 = ((v2 & 0xF) << 24) | (v1[1] << 16) | (v1[2] << 8) | v1[3];
          uint64_t v3 = 4;
        }
      }
      else
      {
        uint64_t v2 = ((v2 & 0x1F) << 16) | (v1[1] << 8) | v1[2];
        uint64_t v3 = 3;
      }
    }
    else
    {
      uint64_t v3 = 2;
      uint64_t v2 = v1[1] | ((v2 & 0x3F) << 8);
    }
  }
  else
  {
    uint64_t v3 = 1;
  }
  *a1 = &v1[v3];
  return v2;
}

size_t file_scanner_read_bytes(ssize_t a1, char *__dst, size_t __nbyte)
{
  size_t v3 = *(int *)(a1 + 4128);
  if (!v3)
  {
    size_t v5 = __nbyte;
    int v8 = *(unsigned char **)(a1 + 4120);
    uint64_t v9 = *(unsigned char **)(a1 + 4112);
    size_t v10 = v8 - v9;
    if (v8 != v9)
    {
      if (__nbyte <= v10)
      {
        memcpy(__dst, v9, __nbyte);
        *(void *)(a1 + 4112) += v5;
        return v5;
      }
      memcpy(__dst, v9, v8 - v9);
      *(void *)(a1 + 4112) += v10;
      v5 -= v10;
    }
    if (pread(*(_DWORD *)a1, &__dst[v10], v5, *(void *)(a1 + 8)) == v5)
    {
      size_t v3 = v5 + v10;
      *(void *)(a1 + 8) += v3;
      *(void *)(a1 + 4120) = a1 + 16;
      *(void *)(a1 + 4112) = a1 + 16;
      *(_DWORD *)(a1 + 4128) = 0;
      file_scanner_read(a1);
    }
    else
    {
      uint64_t v11 = (FILE *)*MEMORY[0x1E4F143C8];
      uint64_t v12 = __error();
      int v13 = *v12;
      *(_DWORD *)(a1 + 4128) = *v12;
      fprintf(v11, "\npread error(%d) offset: 0x%llx\n", v13, *(void *)(a1 + 8));
      return -1;
    }
  }
  return v3;
}

void IncompleteRomajiKanaResolve(char *__s, uint64_t a2)
{
  size_t v3 = std::string::basic_string[abi:ne180100]<0>(__p, __s);
  incompleteRomajiKanaData((uint64_t)v3);
  unsigned int v4 = std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::find<std::string>(incompleteRomajiKanaData(void)::data, (unsigned __int8 *)__p);
  size_t v5 = v4;
  if (v12 < 0)
  {
    operator delete(__p[0]);
    if (!v5) {
      return;
    }
  }
  else if (!v4)
  {
    return;
  }
  memset(&v10, 0, sizeof(v10));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v10, *((long long **)v5 + 5), *((long long **)v5 + 6), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v5 + 6) - *((void *)v5 + 5)) >> 3));
  if (v10.__r_.__value_.__l.__size_ != v10.__r_.__value_.__r.__words[0])
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    unint64_t v8 = (int64_t)(v10.__r_.__value_.__l.__size_ - v10.__r_.__value_.__r.__words[0]) / 24;
    if (v8 <= 1) {
      int64_t v9 = 1;
    }
    else {
      int64_t v9 = (int64_t)(v10.__r_.__value_.__l.__size_ - v10.__r_.__value_.__r.__words[0]) / 24;
    }
    do
    {
      (*(void (**)(uint64_t, unint64_t, uint64_t))(a2 + 16))(a2, v8, v7++);
      v6 += 24;
    }
    while (v9 != v7);
  }
  int v13 = &v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v13);
}

void sub_1BDADE858(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void incompleteRomajiKanaData(uint64_t a1)
{
  MEMORY[0x1F4188790](a1);
  uint64_t v532 = *MEMORY[0x1E4F143B8];
  {
    std::string::basic_string[abi:ne180100]<0>(v214, "b");
    std::string::basic_string[abi:ne180100]<0>(&v469, "っ");
    std::string::basic_string[abi:ne180100]<0>(v470, "ば");
    std::string::basic_string[abi:ne180100]<0>(v471, "び");
    std::string::basic_string[abi:ne180100]<0>(v472, "ぶ");
    std::string::basic_string[abi:ne180100]<0>(v473, "べ");
    std::string::basic_string[abi:ne180100]<0>(v474, "ぼ");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)v213, &v469, 6uLL);
    std::pair<std::string const,std::vector<std::string>>::pair[abi:ne180100]<true,0>(v475, (long long *)v214, v213);
    std::string::basic_string[abi:ne180100]<0>(v211, "by");
    std::string::basic_string[abi:ne180100]<0>(&v464, "びゃ");
    std::string::basic_string[abi:ne180100]<0>(v465, "びぃ");
    std::string::basic_string[abi:ne180100]<0>(v466, "びゅ");
    std::string::basic_string[abi:ne180100]<0>(v467, "びぇ");
    std::string::basic_string[abi:ne180100]<0>(v468, "びょ");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)v210, &v464, 5uLL);
    std::pair<std::string const,std::vector<std::string>>::pair[abi:ne180100]<true,0>(v476, (long long *)v211, v210);
    std::string::basic_string[abi:ne180100]<0>(v208, "c");
    std::string::basic_string[abi:ne180100]<0>(&v457, "っ");
    std::string::basic_string[abi:ne180100]<0>(v458, "か");
    std::string::basic_string[abi:ne180100]<0>(v459, "し");
    std::string::basic_string[abi:ne180100]<0>(v460, "く");
    std::string::basic_string[abi:ne180100]<0>(v461, "せ");
    std::string::basic_string[abi:ne180100]<0>(v462, "こ");
    std::string::basic_string[abi:ne180100]<0>(v463, "ち");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)v207, &v457, 7uLL);
    std::pair<std::string const,std::vector<std::string>>::pair[abi:ne180100]<true,0>(v477, (long long *)v208, v207);
    std::string::basic_string[abi:ne180100]<0>(v205, "ch");
    std::string::basic_string[abi:ne180100]<0>(v455, "ち");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)v204, (long long *)v455, 1uLL);
    std::pair<std::string const,std::vector<std::string>>::pair[abi:ne180100]<true,0>(v478, (long long *)v205, v204);
    std::string::basic_string[abi:ne180100]<0>(v202, "cy");
    std::string::basic_string[abi:ne180100]<0>(&v450, "ちゃ");
    std::string::basic_string[abi:ne180100]<0>(v451, "ちぃ");
    std::string::basic_string[abi:ne180100]<0>(v452, "ちゅ");
    std::string::basic_string[abi:ne180100]<0>(v453, "ちぇ");
    std::string::basic_string[abi:ne180100]<0>(v454, "ちょ");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)v201, &v450, 5uLL);
    std::pair<std::string const,std::vector<std::string>>::pair[abi:ne180100]<true,0>(v479, (long long *)v202, v201);
    std::string::basic_string[abi:ne180100]<0>(v199, "d");
    std::string::basic_string[abi:ne180100]<0>(&v444, "っ");
    std::string::basic_string[abi:ne180100]<0>(v445, "だ");
    std::string::basic_string[abi:ne180100]<0>(v446, "ぢ");
    std::string::basic_string[abi:ne180100]<0>(v447, "づ");
    std::string::basic_string[abi:ne180100]<0>(v448, "で");
    std::string::basic_string[abi:ne180100]<0>(v449, "ど");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)v198, &v444, 6uLL);
    std::pair<std::string const,std::vector<std::string>>::pair[abi:ne180100]<true,0>(v480, (long long *)v199, v198);
    std::string::basic_string[abi:ne180100]<0>(v196, "dh");
    std::string::basic_string[abi:ne180100]<0>(&v439, "でゃ");
    std::string::basic_string[abi:ne180100]<0>(v440, "でぃ");
    std::string::basic_string[abi:ne180100]<0>(v441, "でゅ");
    std::string::basic_string[abi:ne180100]<0>(v442, "でぇ");
    std::string::basic_string[abi:ne180100]<0>(v443, "でょ");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)v195, &v439, 5uLL);
    std::pair<std::string const,std::vector<std::string>>::pair[abi:ne180100]<true,0>(v481, (long long *)v196, v195);
    std::string::basic_string[abi:ne180100]<0>(v193, "dw");
    std::string::basic_string[abi:ne180100]<0>(v437, "どぅ");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)v192, (long long *)v437, 1uLL);
    std::pair<std::string const,std::vector<std::string>>::pair[abi:ne180100]<true,0>(v482, (long long *)v193, v192);
    std::string::basic_string[abi:ne180100]<0>(v190, "dy");
    std::string::basic_string[abi:ne180100]<0>(&v432, "ぢゃ");
    std::string::basic_string[abi:ne180100]<0>(v433, "ぢぃ");
    std::string::basic_string[abi:ne180100]<0>(v434, "ぢゅ");
    std::string::basic_string[abi:ne180100]<0>(v435, "ぢぇ");
    std::string::basic_string[abi:ne180100]<0>(v436, "ぢょ");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)v189, &v432, 5uLL);
    std::pair<std::string const,std::vector<std::string>>::pair[abi:ne180100]<true,0>(v483, (long long *)v190, v189);
    std::string::basic_string[abi:ne180100]<0>(v187, "f");
    std::string::basic_string[abi:ne180100]<0>(v430, "ふ");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)v186, (long long *)v430, 1uLL);
    std::pair<std::string const,std::vector<std::string>>::pair[abi:ne180100]<true,0>(v484, (long long *)v187, v186);
    std::string::basic_string[abi:ne180100]<0>(v184, "fy");
    std::string::basic_string[abi:ne180100]<0>(v428, "ふゅ");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)v183, (long long *)v428, 1uLL);
    std::pair<std::string const,std::vector<std::string>>::pair[abi:ne180100]<true,0>(v485, (long long *)v184, v183);
    std::string::basic_string[abi:ne180100]<0>(v181, "g");
    std::string::basic_string[abi:ne180100]<0>(&v422, "っ");
    std::string::basic_string[abi:ne180100]<0>(v423, "が");
    std::string::basic_string[abi:ne180100]<0>(v424, "ぎ");
    std::string::basic_string[abi:ne180100]<0>(v425, "ぐ");
    std::string::basic_string[abi:ne180100]<0>(v426, "げ");
    std::string::basic_string[abi:ne180100]<0>(v427, "ご");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)v180, &v422, 6uLL);
    std::pair<std::string const,std::vector<std::string>>::pair[abi:ne180100]<true,0>(v486, (long long *)v181, v180);
    std::string::basic_string[abi:ne180100]<0>(v178, "gw");
    std::string::basic_string[abi:ne180100]<0>(&v417, "ぐぁ");
    std::string::basic_string[abi:ne180100]<0>(v418, "ぐぃ");
    std::string::basic_string[abi:ne180100]<0>(v419, "ぐぅ");
    std::string::basic_string[abi:ne180100]<0>(v420, "ぐぇ");
    std::string::basic_string[abi:ne180100]<0>(v421, "ぐぉ");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)v177, &v417, 5uLL);
    std::pair<std::string const,std::vector<std::string>>::pair[abi:ne180100]<true,0>(v487, (long long *)v178, v177);
    std::string::basic_string[abi:ne180100]<0>(v175, "gy");
    std::string::basic_string[abi:ne180100]<0>(&v412, "ぎゃ");
    std::string::basic_string[abi:ne180100]<0>(v413, "ぎぃ");
    std::string::basic_string[abi:ne180100]<0>(v414, "ぎゅ");
    std::string::basic_string[abi:ne180100]<0>(v415, "ぎぇ");
    std::string::basic_string[abi:ne180100]<0>(v416, "ぎょ");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)v174, &v412, 5uLL);
    std::pair<std::string const,std::vector<std::string>>::pair[abi:ne180100]<true,0>(v488, (long long *)v175, v174);
    std::string::basic_string[abi:ne180100]<0>(v172, "h");
    std::string::basic_string[abi:ne180100]<0>(&v406, "っ");
    std::string::basic_string[abi:ne180100]<0>(v407, "は");
    std::string::basic_string[abi:ne180100]<0>(v408, "ひ");
    std::string::basic_string[abi:ne180100]<0>(v409, "ふ");
    std::string::basic_string[abi:ne180100]<0>(v410, "へ");
    std::string::basic_string[abi:ne180100]<0>(v411, "ほ");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)v171, &v406, 6uLL);
    std::pair<std::string const,std::vector<std::string>>::pair[abi:ne180100]<true,0>(v489, (long long *)v172, v171);
    std::string::basic_string[abi:ne180100]<0>(v169, "hw");
    std::string::basic_string[abi:ne180100]<0>(&v401, "ふぁ");
    std::string::basic_string[abi:ne180100]<0>(v402, "ふぃ");
    std::string::basic_string[abi:ne180100]<0>(v403, "ふぇ");
    std::string::basic_string[abi:ne180100]<0>(v404, "ふぉ");
    std::string::basic_string[abi:ne180100]<0>(v405, "ふゅ");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)v168, &v401, 5uLL);
    std::pair<std::string const,std::vector<std::string>>::pair[abi:ne180100]<true,0>(v490, (long long *)v169, v168);
    std::string::basic_string[abi:ne180100]<0>(v166, "hy");
    std::string::basic_string[abi:ne180100]<0>(&v396, "ひゃ");
    std::string::basic_string[abi:ne180100]<0>(v397, "ひぃ");
    std::string::basic_string[abi:ne180100]<0>(v398, "ひゅ");
    std::string::basic_string[abi:ne180100]<0>(v399, "ひぇ");
    std::string::basic_string[abi:ne180100]<0>(v400, "ひょ");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)v165, &v396, 5uLL);
    std::pair<std::string const,std::vector<std::string>>::pair[abi:ne180100]<true,0>(v491, (long long *)v166, v165);
    std::string::basic_string[abi:ne180100]<0>(v163, "j");
    std::string::basic_string[abi:ne180100]<0>(&v394, "っ");
    std::string::basic_string[abi:ne180100]<0>(v395, "じ");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)v162, &v394, 2uLL);
    std::pair<std::string const,std::vector<std::string>>::pair[abi:ne180100]<true,0>(v492, (long long *)v163, v162);
    std::string::basic_string[abi:ne180100]<0>(v160, "jy");
    std::string::basic_string[abi:ne180100]<0>(&v389, "じゃ");
    std::string::basic_string[abi:ne180100]<0>(v390, "じぃ");
    std::string::basic_string[abi:ne180100]<0>(v391, "じゅ");
    std::string::basic_string[abi:ne180100]<0>(v392, "じぇ");
    std::string::basic_string[abi:ne180100]<0>(v393, "じょ");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)v159, &v389, 5uLL);
    std::pair<std::string const,std::vector<std::string>>::pair[abi:ne180100]<true,0>(v493, (long long *)v160, v159);
    std::string::basic_string[abi:ne180100]<0>(v157, "k");
    std::string::basic_string[abi:ne180100]<0>(&v383, "っ");
    std::string::basic_string[abi:ne180100]<0>(v384, "か");
    std::string::basic_string[abi:ne180100]<0>(v385, "き");
    std::string::basic_string[abi:ne180100]<0>(v386, "く");
    std::string::basic_string[abi:ne180100]<0>(v387, "け");
    std::string::basic_string[abi:ne180100]<0>(v388, "こ");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)v156, &v383, 6uLL);
    std::pair<std::string const,std::vector<std::string>>::pair[abi:ne180100]<true,0>(v494, (long long *)v157, v156);
    std::string::basic_string[abi:ne180100]<0>(v154, "kw");
    std::string::basic_string[abi:ne180100]<0>(&v378, "くぁ");
    std::string::basic_string[abi:ne180100]<0>(v379, "くぃ");
    std::string::basic_string[abi:ne180100]<0>(v380, "くぅ");
    std::string::basic_string[abi:ne180100]<0>(v381, "くぇ");
    std::string::basic_string[abi:ne180100]<0>(v382, "くぉ");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)v153, &v378, 5uLL);
    std::pair<std::string const,std::vector<std::string>>::pair[abi:ne180100]<true,0>(v495, (long long *)v154, v153);
    std::string::basic_string[abi:ne180100]<0>(v151, "ky");
    std::string::basic_string[abi:ne180100]<0>(&v373, "きゃ");
    std::string::basic_string[abi:ne180100]<0>(v374, "きぃ");
    std::string::basic_string[abi:ne180100]<0>(v375, "きゅ");
    std::string::basic_string[abi:ne180100]<0>(v376, "きぇ");
    std::string::basic_string[abi:ne180100]<0>(v377, "きょ");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)v150, &v373, 5uLL);
    std::pair<std::string const,std::vector<std::string>>::pair[abi:ne180100]<true,0>(v496, (long long *)v151, v150);
    std::string::basic_string[abi:ne180100]<0>(v148, "l");
    std::string::basic_string[abi:ne180100]<0>(&v363, "っ");
    std::string::basic_string[abi:ne180100]<0>(v364, "ぁ");
    std::string::basic_string[abi:ne180100]<0>(v365, "ぃ");
    std::string::basic_string[abi:ne180100]<0>(v366, "ぅ");
    std::string::basic_string[abi:ne180100]<0>(v367, "ぇ");
    std::string::basic_string[abi:ne180100]<0>(v368, "ぉ");
    std::string::basic_string[abi:ne180100]<0>(v369, "ゃ");
    std::string::basic_string[abi:ne180100]<0>(v370, "ゅ");
    std::string::basic_string[abi:ne180100]<0>(v371, "ょ");
    std::string::basic_string[abi:ne180100]<0>(v372, "ゎ");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)v147, &v363, 0xAuLL);
    std::pair<std::string const,std::vector<std::string>>::pair[abi:ne180100]<true,0>(v497, (long long *)v148, v147);
    std::string::basic_string[abi:ne180100]<0>(v145, "lt");
    std::string::basic_string[abi:ne180100]<0>(v361, "っ");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)v144, (long long *)v361, 1uLL);
    std::pair<std::string const,std::vector<std::string>>::pair[abi:ne180100]<true,0>(v498, (long long *)v145, v144);
    std::string::basic_string[abi:ne180100]<0>(v142, "lw");
    std::string::basic_string[abi:ne180100]<0>(v359, "ゎ");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)v141, (long long *)v359, 1uLL);
    std::pair<std::string const,std::vector<std::string>>::pair[abi:ne180100]<true,0>(v499, (long long *)v142, v141);
    std::string::basic_string[abi:ne180100]<0>(v139, "ly");
    std::string::basic_string[abi:ne180100]<0>(&v354, "ゃ");
    std::string::basic_string[abi:ne180100]<0>(v355, "ぃ");
    std::string::basic_string[abi:ne180100]<0>(v356, "ゅ");
    std::string::basic_string[abi:ne180100]<0>(v357, "ぇ");
    std::string::basic_string[abi:ne180100]<0>(v358, "ょ");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)v138, &v354, 5uLL);
    std::pair<std::string const,std::vector<std::string>>::pair[abi:ne180100]<true,0>(v500, (long long *)v139, v138);
    std::string::basic_string[abi:ne180100]<0>(v136, "m");
    std::string::basic_string[abi:ne180100]<0>(&v348, "っ");
    std::string::basic_string[abi:ne180100]<0>(v349, "ま");
    std::string::basic_string[abi:ne180100]<0>(v350, "み");
    std::string::basic_string[abi:ne180100]<0>(v351, "む");
    std::string::basic_string[abi:ne180100]<0>(v352, "め");
    std::string::basic_string[abi:ne180100]<0>(v353, "も");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)v135, &v348, 6uLL);
    std::pair<std::string const,std::vector<std::string>>::pair[abi:ne180100]<true,0>(v501, (long long *)v136, v135);
    std::string::basic_string[abi:ne180100]<0>(v133, "my");
    std::string::basic_string[abi:ne180100]<0>(&v343, "みゃ");
    std::string::basic_string[abi:ne180100]<0>(v344, "みぃ");
    std::string::basic_string[abi:ne180100]<0>(v345, "みゅ");
    std::string::basic_string[abi:ne180100]<0>(v346, "みぇ");
    std::string::basic_string[abi:ne180100]<0>(v347, "みょ");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)v132, &v343, 5uLL);
    std::pair<std::string const,std::vector<std::string>>::pair[abi:ne180100]<true,0>(v502, (long long *)v133, v132);
    std::string::basic_string[abi:ne180100]<0>(v130, "n");
    std::string::basic_string[abi:ne180100]<0>(&v336, "っ");
    std::string::basic_string[abi:ne180100]<0>(v337, "な");
    std::string::basic_string[abi:ne180100]<0>(v338, "に");
    std::string::basic_string[abi:ne180100]<0>(v339, "ぬ");
    std::string::basic_string[abi:ne180100]<0>(v340, "ね");
    std::string::basic_string[abi:ne180100]<0>(v341, "の");
    std::string::basic_string[abi:ne180100]<0>(v342, "ん");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)v129, &v336, 7uLL);
    std::pair<std::string const,std::vector<std::string>>::pair[abi:ne180100]<true,0>(v503, (long long *)v130, v129);
    std::string::basic_string[abi:ne180100]<0>(v127, "ny");
    std::string::basic_string[abi:ne180100]<0>(&v331, "にゃ");
    std::string::basic_string[abi:ne180100]<0>(v332, "にぃ");
    std::string::basic_string[abi:ne180100]<0>(v333, "にゅ");
    std::string::basic_string[abi:ne180100]<0>(v334, "にぇ");
    std::string::basic_string[abi:ne180100]<0>(v335, "にょ");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)v126, &v331, 5uLL);
    std::pair<std::string const,std::vector<std::string>>::pair[abi:ne180100]<true,0>(v504, (long long *)v127, v126);
    std::string::basic_string[abi:ne180100]<0>(v124, "p");
    std::string::basic_string[abi:ne180100]<0>(&v325, "っ");
    std::string::basic_string[abi:ne180100]<0>(v326, "ぱ");
    std::string::basic_string[abi:ne180100]<0>(v327, "ぴ");
    std::string::basic_string[abi:ne180100]<0>(v328, "ぷ");
    std::string::basic_string[abi:ne180100]<0>(v329, "ぺ");
    std::string::basic_string[abi:ne180100]<0>(v330, "ぽ");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)v123, &v325, 6uLL);
    std::pair<std::string const,std::vector<std::string>>::pair[abi:ne180100]<true,0>(v505, (long long *)v124, v123);
    std::string::basic_string[abi:ne180100]<0>(v121, "py");
    std::string::basic_string[abi:ne180100]<0>(&v320, "ぴゃ");
    std::string::basic_string[abi:ne180100]<0>(v321, "ぴぃ");
    std::string::basic_string[abi:ne180100]<0>(v322, "ぴゅ");
    std::string::basic_string[abi:ne180100]<0>(v323, "ぴぇ");
    std::string::basic_string[abi:ne180100]<0>(v324, "ぴょ");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)v120, &v320, 5uLL);
    std::pair<std::string const,std::vector<std::string>>::pair[abi:ne180100]<true,0>(v506, (long long *)v121, v120);
    std::string::basic_string[abi:ne180100]<0>(v118, "q");
    std::string::basic_string[abi:ne180100]<0>(v318, "く");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)v117, (long long *)v318, 1uLL);
    std::pair<std::string const,std::vector<std::string>>::pair[abi:ne180100]<true,0>(v507, (long long *)v118, v117);
    std::string::basic_string[abi:ne180100]<0>(v115, "qy");
    std::string::basic_string[abi:ne180100]<0>(&v313, "くゃ");
    std::string::basic_string[abi:ne180100]<0>(v314, "くぃ");
    std::string::basic_string[abi:ne180100]<0>(v315, "くゅ");
    std::string::basic_string[abi:ne180100]<0>(v316, "くぇ");
    std::string::basic_string[abi:ne180100]<0>(v317, "くょ");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)v114, &v313, 5uLL);
    std::pair<std::string const,std::vector<std::string>>::pair[abi:ne180100]<true,0>(v508, (long long *)v115, v114);
    std::string::basic_string[abi:ne180100]<0>(v112, "r");
    std::string::basic_string[abi:ne180100]<0>(&v307, "っ");
    std::string::basic_string[abi:ne180100]<0>(v308, "ら");
    std::string::basic_string[abi:ne180100]<0>(v309, "り");
    std::string::basic_string[abi:ne180100]<0>(v310, "る");
    std::string::basic_string[abi:ne180100]<0>(v311, "れ");
    std::string::basic_string[abi:ne180100]<0>(v312, "ろ");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)v111, &v307, 6uLL);
    std::pair<std::string const,std::vector<std::string>>::pair[abi:ne180100]<true,0>(v509, (long long *)v112, v111);
    std::string::basic_string[abi:ne180100]<0>(v109, "ry");
    std::string::basic_string[abi:ne180100]<0>(&v302, "りゃ");
    std::string::basic_string[abi:ne180100]<0>(v303, "りぃ");
    std::string::basic_string[abi:ne180100]<0>(v304, "りゅ");
    std::string::basic_string[abi:ne180100]<0>(v305, "りぇ");
    std::string::basic_string[abi:ne180100]<0>(v306, "りょ");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)v108, &v302, 5uLL);
    std::pair<std::string const,std::vector<std::string>>::pair[abi:ne180100]<true,0>(v510, (long long *)v109, v108);
    std::string::basic_string[abi:ne180100]<0>(v106, "s");
    std::string::basic_string[abi:ne180100]<0>(&v296, "っ");
    std::string::basic_string[abi:ne180100]<0>(v297, "さ");
    std::string::basic_string[abi:ne180100]<0>(v298, "し");
    std::string::basic_string[abi:ne180100]<0>(v299, "す");
    std::string::basic_string[abi:ne180100]<0>(v300, "せ");
    std::string::basic_string[abi:ne180100]<0>(v301, "そ");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)v105, &v296, 6uLL);
    std::pair<std::string const,std::vector<std::string>>::pair[abi:ne180100]<true,0>(v511, (long long *)v106, v105);
    std::string::basic_string[abi:ne180100]<0>(v103, "sh");
    std::string::basic_string[abi:ne180100]<0>(v294, "し");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)v102, (long long *)v294, 1uLL);
    std::pair<std::string const,std::vector<std::string>>::pair[abi:ne180100]<true,0>(v512, (long long *)v103, v102);
    std::string::basic_string[abi:ne180100]<0>(v100, "sy");
    std::string::basic_string[abi:ne180100]<0>(&v289, "しゃ");
    std::string::basic_string[abi:ne180100]<0>(v290, "しぃ");
    std::string::basic_string[abi:ne180100]<0>(v291, "しゅ");
    std::string::basic_string[abi:ne180100]<0>(v292, "しぇ");
    std::string::basic_string[abi:ne180100]<0>(v293, "しょ");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)v99, &v289, 5uLL);
    std::pair<std::string const,std::vector<std::string>>::pair[abi:ne180100]<true,0>(v513, (long long *)v100, v99);
    std::string::basic_string[abi:ne180100]<0>(v97, "t");
    std::string::basic_string[abi:ne180100]<0>(&v283, "っ");
    std::string::basic_string[abi:ne180100]<0>(v284, "た");
    std::string::basic_string[abi:ne180100]<0>(v285, "ち");
    std::string::basic_string[abi:ne180100]<0>(v286, "つ");
    std::string::basic_string[abi:ne180100]<0>(v287, "て");
    std::string::basic_string[abi:ne180100]<0>(v288, "と");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)v96, &v283, 6uLL);
    std::pair<std::string const,std::vector<std::string>>::pair[abi:ne180100]<true,0>(v514, (long long *)v97, v96);
    std::string::basic_string[abi:ne180100]<0>(v94, "th");
    std::string::basic_string[abi:ne180100]<0>(&v279, "てゃてぃ");
    std::string::basic_string[abi:ne180100]<0>(v280, "てゅ");
    std::string::basic_string[abi:ne180100]<0>(v281, "てぇ");
    std::string::basic_string[abi:ne180100]<0>(v282, "てょ");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)v93, &v279, 4uLL);
    std::pair<std::string const,std::vector<std::string>>::pair[abi:ne180100]<true,0>(v515, (long long *)v94, v93);
    std::string::basic_string[abi:ne180100]<0>(v91, "ts");
    std::string::basic_string[abi:ne180100]<0>(v277, "つ");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)v90, (long long *)v277, 1uLL);
    std::pair<std::string const,std::vector<std::string>>::pair[abi:ne180100]<true,0>(v516, (long long *)v91, v90);
    std::string::basic_string[abi:ne180100]<0>(v88, "tw");
    std::string::basic_string[abi:ne180100]<0>(v275, "とぅ");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)v87, (long long *)v275, 1uLL);
    std::pair<std::string const,std::vector<std::string>>::pair[abi:ne180100]<true,0>(v517, (long long *)v88, v87);
    std::string::basic_string[abi:ne180100]<0>(v85, "ty");
    std::string::basic_string[abi:ne180100]<0>(&v270, "ちゃ");
    std::string::basic_string[abi:ne180100]<0>(v271, "ちぃ");
    std::string::basic_string[abi:ne180100]<0>(v272, "ちゅ");
    std::string::basic_string[abi:ne180100]<0>(v273, "ちぇ");
    std::string::basic_string[abi:ne180100]<0>(v274, "ちょ");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)v84, &v270, 5uLL);
    std::pair<std::string const,std::vector<std::string>>::pair[abi:ne180100]<true,0>(v518, (long long *)v85, v84);
    std::string::basic_string[abi:ne180100]<0>(v82, "v");
    std::string::basic_string[abi:ne180100]<0>(&v268, "っ");
    std::string::basic_string[abi:ne180100]<0>(v269, "ゔ");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)v81, &v268, 2uLL);
    std::pair<std::string const,std::vector<std::string>>::pair[abi:ne180100]<true,0>(v519, (long long *)v82, v81);
    std::string::basic_string[abi:ne180100]<0>(v79, "vy");
    std::string::basic_string[abi:ne180100]<0>(v266, "ゔゅ");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)v78, (long long *)v266, 1uLL);
    std::pair<std::string const,std::vector<std::string>>::pair[abi:ne180100]<true,0>(v520, (long long *)v79, v78);
    std::string::basic_string[abi:ne180100]<0>(v76, "w");
    std::string::basic_string[abi:ne180100]<0>(&v260, "っ");
    std::string::basic_string[abi:ne180100]<0>(v261, "わ");
    std::string::basic_string[abi:ne180100]<0>(v262, "う");
    std::string::basic_string[abi:ne180100]<0>(v263, "を");
    std::string::basic_string[abi:ne180100]<0>(v264, "ゐ");
    std::string::basic_string[abi:ne180100]<0>(v265, "ゑ");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)v75, &v260, 6uLL);
    std::pair<std::string const,std::vector<std::string>>::pair[abi:ne180100]<true,0>(v521, (long long *)v76, v75);
    std::string::basic_string[abi:ne180100]<0>(v73, "wh");
    std::string::basic_string[abi:ne180100]<0>(&v257, "うぃ");
    std::string::basic_string[abi:ne180100]<0>(v258, "うぇ");
    std::string::basic_string[abi:ne180100]<0>(v259, "うぉ");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)v72, &v257, 3uLL);
    std::pair<std::string const,std::vector<std::string>>::pair[abi:ne180100]<true,0>(v522, (long long *)v73, v72);
    std::string::basic_string[abi:ne180100]<0>(v70, "wy");
    std::string::basic_string[abi:ne180100]<0>(&v255, "ゐ");
    std::string::basic_string[abi:ne180100]<0>(v256, "ゑ");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)v69, &v255, 2uLL);
    std::pair<std::string const,std::vector<std::string>>::pair[abi:ne180100]<true,0>(v523, (long long *)v70, v69);
    std::string::basic_string[abi:ne180100]<0>(v67, "x");
    std::string::basic_string[abi:ne180100]<0>(&v245, "っ");
    std::string::basic_string[abi:ne180100]<0>(v246, "ぁ");
    std::string::basic_string[abi:ne180100]<0>(v247, "ぃ");
    std::string::basic_string[abi:ne180100]<0>(v248, "ぅ");
    std::string::basic_string[abi:ne180100]<0>(v249, "ぇ");
    std::string::basic_string[abi:ne180100]<0>(v250, "ぉ");
    std::string::basic_string[abi:ne180100]<0>(v251, "ゃ");
    std::string::basic_string[abi:ne180100]<0>(v252, "ゅ");
    std::string::basic_string[abi:ne180100]<0>(v253, "ょ");
    std::string::basic_string[abi:ne180100]<0>(v254, "ゎ");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)v66, &v245, 0xAuLL);
    std::pair<std::string const,std::vector<std::string>>::pair[abi:ne180100]<true,0>(v524, (long long *)v67, v66);
    std::string::basic_string[abi:ne180100]<0>(v64, "xt");
    std::string::basic_string[abi:ne180100]<0>(v243, "っ");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)v63, (long long *)v243, 1uLL);
    std::pair<std::string const,std::vector<std::string>>::pair[abi:ne180100]<true,0>(v525, (long long *)v64, v63);
    std::string::basic_string[abi:ne180100]<0>(v61, "xts");
    std::string::basic_string[abi:ne180100]<0>(v241, "っ");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)v60, (long long *)v241, 1uLL);
    std::pair<std::string const,std::vector<std::string>>::pair[abi:ne180100]<true,0>(v526, (long long *)v61, v60);
    std::string::basic_string[abi:ne180100]<0>(v58, "xw");
    std::string::basic_string[abi:ne180100]<0>(v239, "ゎ");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)v57, (long long *)v239, 1uLL);
    std::pair<std::string const,std::vector<std::string>>::pair[abi:ne180100]<true,0>(v527, (long long *)v58, v57);
    std::string::basic_string[abi:ne180100]<0>(v55, "xy");
    std::string::basic_string[abi:ne180100]<0>(&v234, "ゃ");
    std::string::basic_string[abi:ne180100]<0>(v235, "ぃ");
    std::string::basic_string[abi:ne180100]<0>(v236, "ゅ");
    std::string::basic_string[abi:ne180100]<0>(v237, "ぇ");
    std::string::basic_string[abi:ne180100]<0>(v238, "ょ");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)v54, &v234, 5uLL);
    std::pair<std::string const,std::vector<std::string>>::pair[abi:ne180100]<true,0>(v528, (long long *)v55, v54);
    std::string::basic_string[abi:ne180100]<0>(v52, "y");
    std::string::basic_string[abi:ne180100]<0>(&v228, "っ");
    std::string::basic_string[abi:ne180100]<0>(v229, "や");
    std::string::basic_string[abi:ne180100]<0>(v230, "い");
    std::string::basic_string[abi:ne180100]<0>(v231, "ゆ");
    std::string::basic_string[abi:ne180100]<0>(v232, "いぇ");
    std::string::basic_string[abi:ne180100]<0>(v233, "よ");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)v51, &v228, 6uLL);
    std::pair<std::string const,std::vector<std::string>>::pair[abi:ne180100]<true,0>(v529, (long long *)v52, v51);
    std::string::basic_string[abi:ne180100]<0>(v49, "z");
    std::string::basic_string[abi:ne180100]<0>(&v222, "っ");
    std::string::basic_string[abi:ne180100]<0>(v223, "ざ");
    std::string::basic_string[abi:ne180100]<0>(v224, "じ");
    std::string::basic_string[abi:ne180100]<0>(v225, "ず");
    std::string::basic_string[abi:ne180100]<0>(v226, "ぜ");
    std::string::basic_string[abi:ne180100]<0>(v227, "ぞ");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)v48, &v222, 6uLL);
    std::pair<std::string const,std::vector<std::string>>::pair[abi:ne180100]<true,0>(v530, (long long *)v49, v48);
    std::string::basic_string[abi:ne180100]<0>(__p, "zy");
    std::string::basic_string[abi:ne180100]<0>(&v217, "じゃ");
    std::string::basic_string[abi:ne180100]<0>(v218, "じぃ");
    std::string::basic_string[abi:ne180100]<0>(v219, "じゅ");
    std::string::basic_string[abi:ne180100]<0>(v220, "じぇ");
    std::string::basic_string[abi:ne180100]<0>(v221, "じょ");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)v45, &v217, 5uLL);
    std::pair<std::string const,std::vector<std::string>>::pair[abi:ne180100]<true,0>(v531, (long long *)__p, v45);
    std::unordered_map<std::string,std::vector<std::string>>::unordered_map((uint64_t)&incompleteRomajiKanaData(void)::data, (unsigned __int8 *)v475, 57);
    for (unint64_t i = 2688; i != -48; i -= 48)
      std::pair<std::string const,std::vector<std::string>>::~pair((uint64_t)&v475[i / 0x18]);
    v216 = v45;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v216);
    for (uint64_t j = 0; j != -15; j -= 3)
    {
      if (SHIBYTE(v221[j + 2]) < 0) {
        operator delete((void *)v221[j]);
      }
    }
    if (v47 < 0) {
      operator delete(__p[0]);
    }
    *(void *)&long long v217 = v48;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v217);
    for (uint64_t k = 0; k != -18; k -= 3)
    {
      if (SHIBYTE(v227[k + 2]) < 0) {
        operator delete((void *)v227[k]);
      }
    }
    if (v50 < 0) {
      operator delete(v49[0]);
    }
    *(void *)&long long v222 = v51;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v222);
    for (uint64_t m = 0; m != -18; m -= 3)
    {
      if (SHIBYTE(v233[m + 2]) < 0) {
        operator delete((void *)v233[m]);
      }
    }
    if (v53 < 0) {
      operator delete(v52[0]);
    }
    *(void *)&long long v228 = v54;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v228);
    for (uint64_t n = 0; n != -15; n -= 3)
    {
      if (SHIBYTE(v238[n + 2]) < 0) {
        operator delete(v238[n]);
      }
    }
    if (v56 < 0) {
      operator delete(v55[0]);
    }
    *(void *)&long long v228 = v57;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v228);
    if (v240 < 0) {
      operator delete(v239[0]);
    }
    if (v59 < 0) {
      operator delete(v58[0]);
    }
    *(void *)&long long v228 = v60;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v228);
    if (v242 < 0) {
      operator delete(v241[0]);
    }
    if (v62 < 0) {
      operator delete(v61[0]);
    }
    *(void *)&long long v228 = v63;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v228);
    if (v244 < 0) {
      operator delete(v243[0]);
    }
    if (v65 < 0) {
      operator delete(v64[0]);
    }
    *(void *)&long long v228 = v66;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v228);
    for (iunint64_t i = 0; ii != -30; ii -= 3)
    {
      if (SHIBYTE(v254[ii + 2]) < 0) {
        operator delete((void *)v254[ii]);
      }
    }
    if (v68 < 0) {
      operator delete(v67[0]);
    }
    *(void *)&long long v245 = v69;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v245);
    for (juint64_t j = 0; jj != -6; jj -= 3)
    {
      if (SHIBYTE(v256[jj + 2]) < 0) {
        operator delete((void *)v256[jj]);
      }
    }
    if (v71 < 0) {
      operator delete(v70[0]);
    }
    *(void *)&long long v245 = v72;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v245);
    for (kuint64_t k = 0; kk != -9; kk -= 3)
    {
      if (SHIBYTE(v259[kk + 2]) < 0) {
        operator delete((void *)v259[kk]);
      }
    }
    if (v74 < 0) {
      operator delete(v73[0]);
    }
    *(void *)&long long v245 = v75;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v245);
    for (muint64_t m = 0; mm != -18; mm -= 3)
    {
      if (SHIBYTE(v265[mm + 2]) < 0) {
        operator delete(v265[mm]);
      }
    }
    if (v77 < 0) {
      operator delete(v76[0]);
    }
    *(void *)&long long v245 = v78;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v245);
    if (v267 < 0) {
      operator delete(v266[0]);
    }
    if (v80 < 0) {
      operator delete(v79[0]);
    }
    *(void *)&long long v245 = v81;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v245);
    for (nuint64_t n = 0; nn != -6; nn -= 3)
    {
      if (SHIBYTE(v269[nn + 2]) < 0) {
        operator delete((void *)v269[nn]);
      }
    }
    if (v83 < 0) {
      operator delete(v82[0]);
    }
    *(void *)&long long v245 = v84;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v245);
    for (uint64_t i1 = 0; i1 != -15; i1 -= 3)
    {
      if (SHIBYTE(v274[i1 + 2]) < 0) {
        operator delete(v274[i1]);
      }
    }
    if (v86 < 0) {
      operator delete(v85[0]);
    }
    *(void *)&long long v245 = v87;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v245);
    if (v276 < 0) {
      operator delete(v275[0]);
    }
    if (v89 < 0) {
      operator delete(v88[0]);
    }
    *(void *)&long long v245 = v90;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v245);
    if (v278 < 0) {
      operator delete(v277[0]);
    }
    if (v92 < 0) {
      operator delete(v91[0]);
    }
    *(void *)&long long v245 = v93;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v245);
    for (uint64_t i2 = 0; i2 != -12; i2 -= 3)
    {
      if (SHIBYTE(v282[i2 + 2]) < 0) {
        operator delete((void *)v282[i2]);
      }
    }
    if (v95 < 0) {
      operator delete(v94[0]);
    }
    *(void *)&long long v245 = v96;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v245);
    for (uint64_t i3 = 0; i3 != -18; i3 -= 3)
    {
      if (SHIBYTE(v288[i3 + 2]) < 0) {
        operator delete((void *)v288[i3]);
      }
    }
    if (v98 < 0) {
      operator delete(v97[0]);
    }
    *(void *)&long long v245 = v99;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v245);
    for (uint64_t i4 = 0; i4 != -15; i4 -= 3)
    {
      if (SHIBYTE(v293[i4 + 2]) < 0) {
        operator delete(v293[i4]);
      }
    }
    if (v101 < 0) {
      operator delete(v100[0]);
    }
    *(void *)&long long v245 = v102;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v245);
    if (v295 < 0) {
      operator delete(v294[0]);
    }
    if (v104 < 0) {
      operator delete(v103[0]);
    }
    *(void *)&long long v245 = v105;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v245);
    for (uint64_t i5 = 0; i5 != -18; i5 -= 3)
    {
      if (SHIBYTE(v301[i5 + 2]) < 0) {
        operator delete((void *)v301[i5]);
      }
    }
    if (v107 < 0) {
      operator delete(v106[0]);
    }
    *(void *)&long long v245 = v108;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v245);
    for (uint64_t i6 = 0; i6 != -15; i6 -= 3)
    {
      if (SHIBYTE(v306[i6 + 2]) < 0) {
        operator delete((void *)v306[i6]);
      }
    }
    if (v110 < 0) {
      operator delete(v109[0]);
    }
    *(void *)&long long v245 = v111;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v245);
    for (uint64_t i7 = 0; i7 != -18; i7 -= 3)
    {
      if (SHIBYTE(v312[i7 + 2]) < 0) {
        operator delete((void *)v312[i7]);
      }
    }
    if (v113 < 0) {
      operator delete(v112[0]);
    }
    *(void *)&long long v245 = v114;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v245);
    for (uint64_t i8 = 0; i8 != -15; i8 -= 3)
    {
      if (SHIBYTE(v317[i8 + 2]) < 0) {
        operator delete(v317[i8]);
      }
    }
    if (v116 < 0) {
      operator delete(v115[0]);
    }
    *(void *)&long long v245 = v117;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v245);
    if (v319 < 0) {
      operator delete(v318[0]);
    }
    if (v119 < 0) {
      operator delete(v118[0]);
    }
    *(void *)&long long v245 = v120;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v245);
    for (uint64_t i9 = 0; i9 != -15; i9 -= 3)
    {
      if (SHIBYTE(v324[i9 + 2]) < 0) {
        operator delete((void *)v324[i9]);
      }
    }
    if (v122 < 0) {
      operator delete(v121[0]);
    }
    *(void *)&long long v245 = v123;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v245);
    for (uint64_t i10 = 0; i10 != -18; i10 -= 3)
    {
      if (SHIBYTE(v330[i10 + 2]) < 0) {
        operator delete((void *)v330[i10]);
      }
    }
    if (v125 < 0) {
      operator delete(v124[0]);
    }
    *(void *)&long long v245 = v126;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v245);
    for (uint64_t i11 = 0; i11 != -15; i11 -= 3)
    {
      if (SHIBYTE(v335[i11 + 2]) < 0) {
        operator delete((void *)v335[i11]);
      }
    }
    if (v128 < 0) {
      operator delete(v127[0]);
    }
    *(void *)&long long v245 = v129;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v245);
    for (uint64_t i12 = 0; i12 != -21; i12 -= 3)
    {
      if (SHIBYTE(v342[i12 + 2]) < 0) {
        operator delete((void *)v342[i12]);
      }
    }
    if (v131 < 0) {
      operator delete(v130[0]);
    }
    *(void *)&long long v245 = v132;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v245);
    for (uint64_t i13 = 0; i13 != -15; i13 -= 3)
    {
      if (SHIBYTE(v347[i13 + 2]) < 0) {
        operator delete((void *)v347[i13]);
      }
    }
    if (v134 < 0) {
      operator delete(v133[0]);
    }
    *(void *)&long long v245 = v135;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v245);
    for (uint64_t i14 = 0; i14 != -18; i14 -= 3)
    {
      if (SHIBYTE(v353[i14 + 2]) < 0) {
        operator delete((void *)v353[i14]);
      }
    }
    if (v137 < 0) {
      operator delete(v136[0]);
    }
    *(void *)&long long v245 = v138;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v245);
    for (uint64_t i15 = 0; i15 != -15; i15 -= 3)
    {
      if (SHIBYTE(v358[i15 + 2]) < 0) {
        operator delete(v358[i15]);
      }
    }
    if (v140 < 0) {
      operator delete(v139[0]);
    }
    *(void *)&long long v245 = v141;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v245);
    if (v360 < 0) {
      operator delete(v359[0]);
    }
    if (v143 < 0) {
      operator delete(v142[0]);
    }
    *(void *)&long long v245 = v144;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v245);
    if (v362 < 0) {
      operator delete(v361[0]);
    }
    if (v146 < 0) {
      operator delete(v145[0]);
    }
    *(void *)&long long v245 = v147;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v245);
    for (uint64_t i16 = 0; i16 != -30; i16 -= 3)
    {
      if (SHIBYTE(v372[i16 + 2]) < 0) {
        operator delete((void *)v372[i16]);
      }
    }
    if (v149 < 0) {
      operator delete(v148[0]);
    }
    *(void *)&long long v363 = v150;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v363);
    for (uint64_t i17 = 0; i17 != -15; i17 -= 3)
    {
      if (SHIBYTE(v377[i17 + 2]) < 0) {
        operator delete((void *)v377[i17]);
      }
    }
    if (v152 < 0) {
      operator delete(v151[0]);
    }
    *(void *)&long long v363 = v153;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v363);
    for (uint64_t i18 = 0; i18 != -15; i18 -= 3)
    {
      if (SHIBYTE(v382[i18 + 2]) < 0) {
        operator delete((void *)v382[i18]);
      }
    }
    if (v155 < 0) {
      operator delete(v154[0]);
    }
    *(void *)&long long v363 = v156;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v363);
    for (uint64_t i19 = 0; i19 != -18; i19 -= 3)
    {
      if (SHIBYTE(v388[i19 + 2]) < 0) {
        operator delete((void *)v388[i19]);
      }
    }
    if (v158 < 0) {
      operator delete(v157[0]);
    }
    *(void *)&long long v363 = v159;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v363);
    for (uint64_t i20 = 0; i20 != -15; i20 -= 3)
    {
      if (SHIBYTE(v393[i20 + 2]) < 0) {
        operator delete((void *)v393[i20]);
      }
    }
    if (v161 < 0) {
      operator delete(v160[0]);
    }
    *(void *)&long long v363 = v162;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v363);
    for (uint64_t i21 = 0; i21 != -6; i21 -= 3)
    {
      if (SHIBYTE(v395[i21 + 2]) < 0) {
        operator delete((void *)v395[i21]);
      }
    }
    if (v164 < 0) {
      operator delete(v163[0]);
    }
    *(void *)&long long v363 = v165;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v363);
    for (uint64_t i22 = 0; i22 != -15; i22 -= 3)
    {
      if (SHIBYTE(v400[i22 + 2]) < 0) {
        operator delete((void *)v400[i22]);
      }
    }
    if (v167 < 0) {
      operator delete(v166[0]);
    }
    *(void *)&long long v363 = v168;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v363);
    for (uint64_t i23 = 0; i23 != -15; i23 -= 3)
    {
      if (SHIBYTE(v405[i23 + 2]) < 0) {
        operator delete((void *)v405[i23]);
      }
    }
    if (v170 < 0) {
      operator delete(v169[0]);
    }
    *(void *)&long long v363 = v171;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v363);
    for (uint64_t i24 = 0; i24 != -18; i24 -= 3)
    {
      if (SHIBYTE(v411[i24 + 2]) < 0) {
        operator delete((void *)v411[i24]);
      }
    }
    if (v173 < 0) {
      operator delete(v172[0]);
    }
    *(void *)&long long v363 = v174;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v363);
    for (uint64_t i25 = 0; i25 != -15; i25 -= 3)
    {
      if (SHIBYTE(v416[i25 + 2]) < 0) {
        operator delete((void *)v416[i25]);
      }
    }
    if (v176 < 0) {
      operator delete(v175[0]);
    }
    *(void *)&long long v363 = v177;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v363);
    for (uint64_t i26 = 0; i26 != -15; i26 -= 3)
    {
      if (SHIBYTE(v421[i26 + 2]) < 0) {
        operator delete((void *)v421[i26]);
      }
    }
    if (v179 < 0) {
      operator delete(v178[0]);
    }
    *(void *)&long long v363 = v180;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v363);
    for (uint64_t i27 = 0; i27 != -18; i27 -= 3)
    {
      if (SHIBYTE(v427[i27 + 2]) < 0) {
        operator delete(v427[i27]);
      }
    }
    if (v182 < 0) {
      operator delete(v181[0]);
    }
    *(void *)&long long v363 = v183;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v363);
    if (v429 < 0) {
      operator delete(v428[0]);
    }
    if (v185 < 0) {
      operator delete(v184[0]);
    }
    *(void *)&long long v363 = v186;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v363);
    if (v431 < 0) {
      operator delete(v430[0]);
    }
    if (v188 < 0) {
      operator delete(v187[0]);
    }
    *(void *)&long long v363 = v189;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v363);
    for (uint64_t i28 = 0; i28 != -15; i28 -= 3)
    {
      if (SHIBYTE(v436[i28 + 2]) < 0) {
        operator delete(v436[i28]);
      }
    }
    if (v191 < 0) {
      operator delete(v190[0]);
    }
    *(void *)&long long v363 = v192;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v363);
    if (v438 < 0) {
      operator delete(v437[0]);
    }
    if (v194 < 0) {
      operator delete(v193[0]);
    }
    *(void *)&long long v363 = v195;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v363);
    for (uint64_t i29 = 0; i29 != -15; i29 -= 3)
    {
      if (SHIBYTE(v443[i29 + 2]) < 0) {
        operator delete((void *)v443[i29]);
      }
    }
    if (v197 < 0) {
      operator delete(v196[0]);
    }
    *(void *)&long long v363 = v198;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v363);
    for (uint64_t i30 = 0; i30 != -18; i30 -= 3)
    {
      if (SHIBYTE(v449[i30 + 2]) < 0) {
        operator delete((void *)v449[i30]);
      }
    }
    if (v200 < 0) {
      operator delete(v199[0]);
    }
    *(void *)&long long v363 = v201;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v363);
    for (uint64_t i31 = 0; i31 != -15; i31 -= 3)
    {
      if (SHIBYTE(v454[i31 + 2]) < 0) {
        operator delete(v454[i31]);
      }
    }
    if (v203 < 0) {
      operator delete(v202[0]);
    }
    *(void *)&long long v363 = v204;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v363);
    if (v456 < 0) {
      operator delete(v455[0]);
    }
    if (v206 < 0) {
      operator delete(v205[0]);
    }
    *(void *)&long long v363 = v207;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v363);
    for (uint64_t i32 = 0; i32 != -21; i32 -= 3)
    {
      if (SHIBYTE(v463[i32 + 2]) < 0) {
        operator delete((void *)v463[i32]);
      }
    }
    if (v209 < 0) {
      operator delete(v208[0]);
    }
    *(void *)&long long v363 = v210;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v363);
    for (uint64_t i33 = 0; i33 != -15; i33 -= 3)
    {
      if (SHIBYTE(v468[i33 + 2]) < 0) {
        operator delete((void *)v468[i33]);
      }
    }
    if (v212 < 0) {
      operator delete(v211[0]);
    }
    *(void *)&long long v363 = v213;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v363);
    for (uint64_t i34 = 0; i34 != -18; i34 -= 3)
    {
      if (SHIBYTE(v474[i34 + 2]) < 0) {
        operator delete((void *)v474[i34]);
      }
    }
    if (v215 < 0) {
      operator delete(v214[0]);
    }
  }
}

void sub_1BDAE1D4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,char a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53,char a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,int a59,__int16 a60,char a61,char a62,char a63)
{
  for (uint64_t i = 2688; i != -48; i -= 48)
    std::pair<std::string const,std::vector<std::string>>::~pair(v82 + i);
  STACK[0xAB0] = (unint64_t)&a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0xAB0]);
  uint64_t v87 = 0;
  while (1)
  {
    if (*((char *)&STACK[0xAB8] + v87 + 119) < 0) {
      operator delete(*(void **)((char *)&STACK[0xAB8] + v87 + 96));
    }
    v87 -= 24;
    if (v87 == -120)
    {
      if (a17 < 0) {
        operator delete(__p);
      }
      STACK[0xAB8] = (unint64_t)&a18;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0xAB8]);
      uint64_t v88 = 0;
      while (1)
      {
        if (*((char *)&STACK[0xB30] + v88 + 143) < 0) {
          operator delete(*(void **)((char *)&STACK[0xB30] + v88 + 120));
        }
        v88 -= 24;
        if (v88 == -144)
        {
          if (a26 < 0) {
            operator delete(a21);
          }
          STACK[0xB30] = (unint64_t)&a27;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0xB30]);
          uint64_t v89 = 0;
          while (1)
          {
            if (*((char *)&STACK[0xBC0] + v89 + 143) < 0) {
              operator delete(*(void **)((char *)&STACK[0xBC0] + v89 + 120));
            }
            v89 -= 24;
            if (v89 == -144)
            {
              if (a35 < 0) {
                operator delete(a30);
              }
              STACK[0xBC0] = (unint64_t)&a36;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0xBC0]);
              uint64_t v90 = 0;
              while (1)
              {
                if (*((char *)&STACK[0xC50] + v90 + 119) < 0) {
                  operator delete(*(void **)((char *)&STACK[0xC50] + v90 + 96));
                }
                v90 -= 24;
                if (v90 == -120)
                {
                  if (a44 < 0) {
                    operator delete(a39);
                  }
                  STACK[0xBC0] = (unint64_t)&a45;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0xBC0]);
                  if (SLOBYTE(STACK[0xCDF]) < 0) {
                    operator delete((void *)STACK[0xCC8]);
                  }
                  if (a53 < 0) {
                    operator delete(a48);
                  }
                  STACK[0xBC0] = (unint64_t)&a54;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0xBC0]);
                  if (SLOBYTE(STACK[0xCF7]) < 0) {
                    operator delete((void *)STACK[0xCE0]);
                  }
                  if (a62 < 0) {
                    operator delete(a57);
                  }
                  STACK[0xBC0] = (unint64_t)&a63;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0xBC0]);
                  if (SLOBYTE(STACK[0xD0F]) < 0) {
                    operator delete((void *)STACK[0xCF8]);
                  }
                  if (a71 < 0) {
                    operator delete(a66);
                  }
                  STACK[0xBC0] = (unint64_t)&a72;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0xBC0]);
                  uint64_t v91 = 0;
                  while (1)
                  {
                    if (*((char *)&STACK[0xD10] + v91 + 239) < 0) {
                      operator delete(*(void **)((char *)&STACK[0xD10] + v91 + 216));
                    }
                    v91 -= 24;
                    if (v91 == -240)
                    {
                      if (a74 < 0) {
                        operator delete(a73);
                      }
                      STACK[0xD10] = (unint64_t)&a75;
                      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0xD10]);
                      uint64_t v92 = 0;
                      while (1)
                      {
                        if (*((char *)&STACK[0xE00] + v92 + 47) < 0) {
                          operator delete(*(void **)((char *)&STACK[0xE00] + v92 + 24));
                        }
                        v92 -= 24;
                        if (v92 == -48)
                        {
                          if (a77 < 0) {
                            operator delete(a76);
                          }
                          STACK[0xD10] = (unint64_t)&a78;
                          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0xD10]);
                          uint64_t v93 = 0;
                          while (1)
                          {
                            if (*((char *)&STACK[0xE30] + v93 + 71) < 0) {
                              operator delete(*(void **)((char *)&STACK[0xE30] + v93 + 48));
                            }
                            v93 -= 24;
                            if (v93 == -72)
                            {
                              if (a80 < 0) {
                                operator delete(a79);
                              }
                              STACK[0xD10] = (unint64_t)&a81;
                              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0xD10]);
                              uint64_t v94 = 0;
                              while (1)
                              {
                                if (*((char *)&STACK[0xE78] + v94 + 143) < 0) {
                                  operator delete(*(void **)((char *)&STACK[0xE78] + v94 + 120));
                                }
                                v94 -= 24;
                                if (v94 == -144)
                                {
                                  if (SLOBYTE(STACK[0x20F]) < 0) {
                                    operator delete(a82);
                                  }
                                  STACK[0xD10] = (unint64_t)&STACK[0x210];
                                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0xD10]);
                                  if (SLOBYTE(STACK[0xF1F]) < 0) {
                                    operator delete((void *)STACK[0xF08]);
                                  }
                                  if (SLOBYTE(STACK[0x23F]) < 0) {
                                    operator delete((void *)STACK[0x228]);
                                  }
                                  STACK[0xD10] = (unint64_t)&STACK[0x240];
                                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0xD10]);
                                  uint64_t v95 = 0;
                                  while (1)
                                  {
                                    if (*((char *)&STACK[0xF20] + v95 + 47) < 0) {
                                      operator delete(*(void **)((char *)&STACK[0xF20] + v95 + 24));
                                    }
                                    v95 -= 24;
                                    if (v95 == -48)
                                    {
                                      if (SLOBYTE(STACK[0x26F]) < 0) {
                                        operator delete((void *)STACK[0x258]);
                                      }
                                      STACK[0xD10] = (unint64_t)&STACK[0x270];
                                      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0xD10]);
                                      uint64_t v96 = 0;
                                      while (1)
                                      {
                                        if (*((char *)&STACK[0xF50] + v96 + 119) < 0) {
                                          operator delete(*(void **)((char *)&STACK[0xF50] + v96 + 96));
                                        }
                                        v96 -= 24;
                                        if (v96 == -120)
                                        {
                                          if (SLOBYTE(STACK[0x29F]) < 0) {
                                            operator delete((void *)STACK[0x288]);
                                          }
                                          STACK[0xD10] = (unint64_t)&STACK[0x2A0];
                                          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0xD10]);
                                          if (v84[23] < 0) {
                                            operator delete((void *)STACK[0xFC8]);
                                          }
                                          if (SLOBYTE(STACK[0x2CF]) < 0) {
                                            operator delete((void *)STACK[0x2B8]);
                                          }
                                          STACK[0xD10] = (unint64_t)&STACK[0x2D0];
                                          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0xD10]);
                                          if (v84[47] < 0) {
                                            operator delete((void *)STACK[0xFE0]);
                                          }
                                          if (SLOBYTE(STACK[0x2FF]) < 0) {
                                            operator delete((void *)STACK[0x2E8]);
                                          }
                                          STACK[0xD10] = (unint64_t)&STACK[0x300];
                                          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0xD10]);
                                          uint64_t v97 = 0;
                                          while (1)
                                          {
                                            if (*((char *)&STACK[0xFF8] + v97 + 95) < 0) {
                                              operator delete(*(void **)((char *)&STACK[0xFF8] + v97 + 72));
                                            }
                                            v97 -= 24;
                                            if (v97 == -96)
                                            {
                                              if (SLOBYTE(STACK[0x32F]) < 0) {
                                                operator delete((void *)STACK[0x318]);
                                              }
                                              STACK[0xD10] = (unint64_t)&STACK[0x330];
                                              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0xD10]);
                                              uint64_t v98 = 0;
                                              while (1)
                                              {
                                                if (*((char *)&STACK[0x1058] + v98 + 143) < 0) {
                                                  operator delete(*(void **)((char *)&STACK[0x1058] + v98 + 120));
                                                }
                                                v98 -= 24;
                                                if (v98 == -144)
                                                {
                                                  if (SLOBYTE(STACK[0x35F]) < 0) {
                                                    operator delete((void *)STACK[0x348]);
                                                  }
                                                  STACK[0xD10] = (unint64_t)&STACK[0x360];
                                                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0xD10]);
                                                  uint64_t v99 = 0;
                                                  while (1)
                                                  {
                                                    if (*((char *)&STACK[0x10E8] + v99 + 119) < 0) {
                                                      operator delete(*(void **)((char *)&STACK[0x10E8] + v99 + 96));
                                                    }
                                                    v99 -= 24;
                                                    if (v99 == -120)
                                                    {
                                                      if (SLOBYTE(STACK[0x38F]) < 0) {
                                                        operator delete((void *)STACK[0x378]);
                                                      }
                                                      STACK[0xD10] = (unint64_t)&STACK[0x390];
                                                      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0xD10]);
                                                      if (v84[431] < 0) {
                                                        operator delete((void *)STACK[0x1160]);
                                                      }
                                                      if (SLOBYTE(STACK[0x3BF]) < 0) {
                                                        operator delete((void *)STACK[0x3A8]);
                                                      }
                                                      STACK[0xD10] = (unint64_t)&STACK[0x3C0];
                                                      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0xD10]);
                                                      uint64_t v100 = 0;
                                                      while (1)
                                                      {
                                                        if (*((char *)&STACK[0x1178] + v100 + 143) < 0) {
                                                          operator delete(*(void **)((char *)&STACK[0x1178] + v100 + 120));
                                                        }
                                                        v100 -= 24;
                                                        if (v100 == -144)
                                                        {
                                                          if (SLOBYTE(STACK[0x3EF]) < 0) {
                                                            operator delete((void *)STACK[0x3D8]);
                                                          }
                                                          STACK[0xD10] = (unint64_t)&STACK[0x3F0];
                                                          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0xD10]);
                                                          uint64_t v101 = 0;
                                                          while (1)
                                                          {
                                                            if (*((char *)&STACK[0x1208] + v101 + 119) < 0) {
                                                              operator delete(*(void **)((char *)&STACK[0x1208]
                                                            }
                                                                                       + v101
                                                                                       + 96));
                                                            v101 -= 24;
                                                            if (v101 == -120)
                                                            {
                                                              if (SLOBYTE(STACK[0x41F]) < 0) {
                                                                operator delete((void *)STACK[0x408]);
                                                              }
                                                              STACK[0xD10] = (unint64_t)&STACK[0x420];
                                                              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0xD10]);
                                                              uint64_t v102 = 0;
                                                              while (1)
                                                              {
                                                                if (*((char *)&STACK[0x1280] + v102 + 143) < 0) {
                                                                  operator delete(*(void **)((char *)&STACK[0x1280]
                                                                }
                                                                                           + v102
                                                                                           + 120));
                                                                v102 -= 24;
                                                                if (v102 == -144)
                                                                {
                                                                  if (SLOBYTE(STACK[0x44F]) < 0) {
                                                                    operator delete((void *)STACK[0x438]);
                                                                  }
                                                                  STACK[0xD10] = (unint64_t)&STACK[0x450];
                                                                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0xD10]);
                                                                  uint64_t v103 = 0;
                                                                  while (1)
                                                                  {
                                                                    if (*((char *)&STACK[0x1310] + v103 + 119) < 0) {
                                                                      operator delete(*(void **)((char *)&STACK[0x1310]
                                                                    }
                                                                                               + v103
                                                                                               + 96));
                                                                    v103 -= 24;
                                                                    if (v103 == -120)
                                                                    {
                                                                      if (SLOBYTE(STACK[0x47F]) < 0) {
                                                                        operator delete((void *)STACK[0x468]);
                                                                      }
                                                                      STACK[0xD10] = (unint64_t)&STACK[0x480];
                                                                      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0xD10]);
                                                                      if (v84[983] < 0) {
                                                                        operator delete((void *)STACK[0x1388]);
                                                                      }
                                                                      if (SLOBYTE(STACK[0x4AF]) < 0) {
                                                                        operator delete((void *)STACK[0x498]);
                                                                      }
                                                                      STACK[0xD10] = (unint64_t)&STACK[0x4B0];
                                                                      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0xD10]);
                                                                      uint64_t v104 = 0;
                                                                      while (1)
                                                                      {
                                                                        if (*((char *)&STACK[0x13A0] + v104 + 119) < 0) {
                                                                          operator delete(*(void **)((char *)&STACK[0x13A0] + v104 + 96));
                                                                        }
                                                                        v104 -= 24;
                                                                        if (v104 == -120)
                                                                        {
                                                                          if (SLOBYTE(STACK[0x4DF]) < 0) {
                                                                            operator delete((void *)STACK[0x4C8]);
                                                                          }
                                                                          STACK[0xD10] = (unint64_t)&STACK[0x4E0];
                                                                          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0xD10]);
                                                                          uint64_t v105 = 0;
                                                                          while (1)
                                                                          {
                                                                            if (*((char *)&STACK[0x1418] + v105 + 143) < 0) {
                                                                              operator delete(*(void **)((char *)&STACK[0x1418] + v105 + 120));
                                                                            }
                                                                            v105 -= 24;
                                                                            if (v105 == -144)
                                                                            {
                                                                              if (SLOBYTE(STACK[0x50F]) < 0) {
                                                                                operator delete((void *)STACK[0x4F8]);
                                                                              }
                                                                              STACK[0xD10] = (unint64_t)&STACK[0x510];
                                                                              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0xD10]);
                                                                              uint64_t v106 = 0;
                                                                              while (1)
                                                                              {
                                                                                if (*((char *)&STACK[0x14A8]
                                                                                     + v106
                                                                                     + 119) < 0)
                                                                                  operator delete(*(void **)((char *)&STACK[0x14A8] + v106 + 96));
                                                                                v106 -= 24;
                                                                                if (v106 == -120)
                                                                                {
                                                                                  if (SLOBYTE(STACK[0x53F]) < 0) {
                                                                                    operator delete((void *)STACK[0x528]);
                                                                                  }
                                                                                  STACK[0xD10] = (unint64_t)&STACK[0x540];
                                                                                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0xD10]);
                                                                                  uint64_t v107 = 0;
                                                                                  while (1)
                                                                                  {
                                                                                    if (*((char *)&STACK[0x1520]
                                                                                         + v107
                                                                                         + 167) < 0)
                                                                                      operator delete(*(void **)((char *)&STACK[0x1520] + v107 + 144));
                                                                                    v107 -= 24;
                                                                                    if (v107 == -168)
                                                                                    {
                                                                                      if (SLOBYTE(STACK[0x56F]) < 0) {
                                                                                        operator delete((void *)STACK[0x558]);
                                                                                      }
                                                                                      STACK[0xD10] = (unint64_t)&STACK[0x570];
                                                                                      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0xD10]);
                                                                                      uint64_t v108 = 0;
                                                                                      while (1)
                                                                                      {
                                                                                        if (*((char *)&STACK[0x15C8]
                                                                                             + v108
                                                                                             + 119) < 0)
                                                                                          operator delete(*(void **)((char *)&STACK[0x15C8] + v108 + 96));
                                                                                        v108 -= 24;
                                                                                        if (v108 == -120)
                                                                                        {
                                                                                          if (SLOBYTE(STACK[0x59F]) < 0) {
                                                                                            operator delete((void *)STACK[0x588]);
                                                                                          }
                                                                                          STACK[0xD10] = (unint64_t)&STACK[0x5A0];
                                                                                          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0xD10]);
                                                                                          uint64_t v109 = 0;
                                                                                          while (1)
                                                                                          {
                                                                                            if (*((char *)&STACK[0x1640]
                                                                                                 + v109
                                                                                                 + 143) < 0)
                                                                                              operator delete(*(void **)((char *)&STACK[0x1640] + v109 + 120));
                                                                                            v109 -= 24;
                                                                                            if (v109 == -144)
                                                                                            {
                                                                                              if (SLOBYTE(STACK[0x5CF]) < 0) {
                                                                                                operator delete((void *)STACK[0x5B8]);
                                                                                              }
                                                                                              STACK[0xD10] = (unint64_t)&STACK[0x5D0];
                                                                                              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0xD10]);
                                                                                              uint64_t v110 = 0;
                                                                                              while (1)
                                                                                              {
                                                                                                if (*((char *)&STACK[0x16D0] + v110 + 119) < 0) {
                                                                                                  operator delete(*(void **)((char *)&STACK[0x16D0] + v110 + 96));
                                                                                                }
                                                                                                v110 -= 24;
                                                                                                if (v110 == -120)
                                                                                                {
                                                                                                  if (SLOBYTE(STACK[0x5FF]) < 0) {
                                                                                                    operator delete((void *)STACK[0x5E8]);
                                                                                                  }
                                                                                                  STACK[0xD10] = (unint64_t)&STACK[0x600];
                                                                                                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0xD10]);
                                                                                                  if (v84[1943] < 0) {
                                                                                                    operator delete((void *)STACK[0x1748]);
                                                                                                  }
                                                                                                  if (SLOBYTE(STACK[0x62F]) < 0) {
                                                                                                    operator delete((void *)STACK[0x618]);
                                                                                                  }
                                                                                                  STACK[0xD10] = (unint64_t)&STACK[0x630];
                                                                                                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0xD10]);
                                                                                                  if (v84[1967] < 0) {
                                                                                                    operator delete((void *)STACK[0x1760]);
                                                                                                  }
                                                                                                  if (SLOBYTE(STACK[0x65F]) < 0) {
                                                                                                    operator delete((void *)STACK[0x648]);
                                                                                                  }
                                                                                                  STACK[0xD10] = (unint64_t)&STACK[0x660];
                                                                                                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0xD10]);
                                                                                                  uint64_t v111 = 0;
                                                                                                  while (1)
                                                                                                  {
                                                                                                    if (*((char *)&STACK[0x1778] + v111 + 239) < 0) {
                                                                                                      operator delete(*(void **)((char *)&STACK[0x1778] + v111 + 216));
                                                                                                    }
                                                                                                    v111 -= 24;
                                                                                                    if (v111 == -240)
                                                                                                    {
                                                                                                      if (SLOBYTE(STACK[0x68F]) < 0) {
                                                                                                        operator delete((void *)STACK[0x678]);
                                                                                                      }
                                                                                                      STACK[0x1778] = (unint64_t)&STACK[0x690];
                                                                                                      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x1778]);
                                                                                                      uint64_t v112 = 0;
                                                                                                      while (1)
                                                                                                      {
                                                                                                        if (*((char *)&STACK[0x1868] + v112 + 119) < 0) {
                                                                                                          operator delete(*(void **)((char *)&STACK[0x1868] + v112 + 96));
                                                                                                        }
                                                                                                        v112 -= 24;
                                                                                                        if (v112 == -120)
                                                                                                        {
                                                                                                          if (SLOBYTE(STACK[0x6BF]) < 0) {
                                                                                                            operator delete((void *)STACK[0x6A8]);
                                                                                                          }
                                                                                                          STACK[0x1778] = (unint64_t)&STACK[0x6C0];
                                                                                                          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x1778]);
                                                                                                          uint64_t v113 = 0;
                                                                                                          while (1)
                                                                                                          {
                                                                                                            if (*((char *)&STACK[0x18E0] + v113 + 119) < 0) {
                                                                                                              operator delete(*(void **)((char *)&STACK[0x18E0] + v113 + 96));
                                                                                                            }
                                                                                                            v113 -= 24;
                                                                                                            if (v113 == -120)
                                                                                                            {
                                                                                                              if (SLOBYTE(STACK[0x6EF]) < 0) {
                                                                                                                operator delete((void *)STACK[0x6D8]);
                                                                                                              }
                                                                                                              STACK[0x1778] = (unint64_t)&STACK[0x6F0];
                                                                                                              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x1778]);
                                                                                                              uint64_t v114 = 0;
                                                                                                              while (1)
                                                                                                              {
                                                                                                                if (*((char *)&STACK[0x1958] + v114 + 143) < 0) {
                                                                                                                  operator delete(*(void **)((char *)&STACK[0x1958] + v114 + 120));
                                                                                                                }
                                                                                                                v114 -= 24;
                                                                                                                if (v114 == -144)
                                                                                                                {
                                                                                                                  if (SLOBYTE(STACK[0x71F]) < 0) {
                                                                                                                    operator delete((void *)STACK[0x708]);
                                                                                                                  }
                                                                                                                  STACK[0x1778] = (unint64_t)&STACK[0x720];
                                                                                                                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x1778]);
                                                                                                                  uint64_t v115 = 0;
                                                                                                                  while (1)
                                                                                                                  {
                                                                                                                    if (*((char *)&STACK[0x19E8] + v115 + 119) < 0) {
                                                                                                                      operator delete(*(void **)((char *)&STACK[0x19E8] + v115 + 96));
                                                                                                                    }
                                                                                                                    v115 -= 24;
                                                                                                                    if (v115 == -120)
                                                                                                                    {
                                                                                                                      if (SLOBYTE(STACK[0x74F]) < 0) {
                                                                                                                        operator delete((void *)STACK[0x738]);
                                                                                                                      }
                                                                                                                      STACK[0x1778] = (unint64_t)&STACK[0x750];
                                                                                                                      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x1778]);
                                                                                                                      uint64_t v116 = 0;
                                                                                                                      while (1)
                                                                                                                      {
                                                                                                                        if (*((char *)&STACK[0x1A60] + v116 + 47) < 0) {
                                                                                                                          operator delete(*(void **)((char *)&STACK[0x1A60] + v116 + 24));
                                                                                                                        }
                                                                                                                        v116 -= 24;
                                                                                                                        if (v116 == -48)
                                                                                                                        {
                                                                                                                          if (SLOBYTE(STACK[0x77F]) < 0) {
                                                                                                                            operator delete((void *)STACK[0x768]);
                                                                                                                          }
                                                                                                                          STACK[0x1778] = (unint64_t)&STACK[0x780];
                                                                                                                          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x1778]);
                                                                                                                          uint64_t v117 = 0;
                                                                                                                          while (1)
                                                                                                                          {
                                                                                                                            if (*((char *)&STACK[0x1A90] + v117 + 119) < 0) {
                                                                                                                              operator delete(*(void **)((char *)&STACK[0x1A90] + v117 + 96));
                                                                                                                            }
                                                                                                                            v117 -= 24;
                                                                                                                            if (v117 == -120)
                                                                                                                            {
                                                                                                                              if (SLOBYTE(STACK[0x7AF]) < 0) {
                                                                                                                                operator delete((void *)STACK[0x798]);
                                                                                                                              }
                                                                                                                              STACK[0x1778] = (unint64_t)&STACK[0x7B0];
                                                                                                                              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x1778]);
                                                                                                                              uint64_t v118 = 0;
                                                                                                                              while (1)
                                                                                                                              {
                                                                                                                                if (*((char *)&STACK[0x1B08] + v118 + 119) < 0) {
                                                                                                                                  operator delete(*(void **)((char *)&STACK[0x1B08] + v118 + 96));
                                                                                                                                }
                                                                                                                                v118 -= 24;
                                                                                                                                if (v118 == -120)
                                                                                                                                {
                                                                                                                                  if (SLOBYTE(STACK[0x7DF]) < 0) {
                                                                                                                                    operator delete((void *)STACK[0x7C8]);
                                                                                                                                  }
                                                                                                                                  STACK[0x1778] = (unint64_t)&STACK[0x7E0];
                                                                                                                                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x1778]);
                                                                                                                                  uint64_t v119 = 0;
                                                                                                                                  while (1)
                                                                                                                                  {
                                                                                                                                    if (*((char *)&STACK[0x1B80] + v119 + 143) < 0) {
                                                                                                                                      operator delete(*(void **)((char *)&STACK[0x1B80] + v119 + 120));
                                                                                                                                    }
                                                                                                                                    v119 -= 24;
                                                                                                                                    if (v119 == -144)
                                                                                                                                    {
                                                                                                                                      if (SLOBYTE(STACK[0x80F]) < 0) {
                                                                                                                                        operator delete((void *)STACK[0x7F8]);
                                                                                                                                      }
                                                                                                                                      STACK[0x1778] = (unint64_t)&STACK[0x810];
                                                                                                                                      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x1778]);
                                                                                                                                      uint64_t v120 = 0;
                                                                                                                                      while (1)
                                                                                                                                      {
                                                                                                                                        if (*((char *)&STACK[0x1C10] + v120 + 119) < 0) {
                                                                                                                                          operator delete(*(void **)((char *)&STACK[0x1C10] + v120 + 96));
                                                                                                                                        }
                                                                                                                                        v120 -= 24;
                                                                                                                                        if (v120 == -120)
                                                                                                                                        {
                                                                                                                                          if (SLOBYTE(STACK[0x83F]) < 0) {
                                                                                                                                            operator delete((void *)STACK[0x828]);
                                                                                                                                          }
                                                                                                                                          STACK[0x1778] = (unint64_t)&STACK[0x840];
                                                                                                                                          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x1778]);
                                                                                                                                          uint64_t v121 = 0;
                                                                                                                                          while (1)
                                                                                                                                          {
                                                                                                                                            if (*((char *)&STACK[0x1C88] + v121 + 119) < 0) {
                                                                                                                                              operator delete(*(void **)((char *)&STACK[0x1C88] + v121 + 96));
                                                                                                                                            }
                                                                                                                                            v121 -= 24;
                                                                                                                                            if (v121 == -120)
                                                                                                                                            {
                                                                                                                                              if (SLOBYTE(STACK[0x86F]) < 0) {
                                                                                                                                                operator delete((void *)STACK[0x858]);
                                                                                                                                              }
                                                                                                                                              STACK[0x1778] = (unint64_t)&STACK[0x870];
                                                                                                                                              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x1778]);
                                                                                                                                              uint64_t v122 = 0;
                                                                                                                                              while (1)
                                                                                                                                              {
                                                                                                                                                if (*((char *)&STACK[0x1D00] + v122 + 143) < 0) {
                                                                                                                                                  operator delete(*(void **)((char *)&STACK[0x1D00] + v122 + 120));
                                                                                                                                                }
                                                                                                                                                v122 -= 24;
                                                                                                                                                if (v122 == -144)
                                                                                                                                                {
                                                                                                                                                  if (SLOBYTE(STACK[0x89F]) < 0) {
                                                                                                                                                    operator delete((void *)STACK[0x888]);
                                                                                                                                                  }
                                                                                                                                                  STACK[0x1778] = (unint64_t)&STACK[0x8A0];
                                                                                                                                                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x1778]);
                                                                                                                                                  if (v84[3551] < 0) {
                                                                                                                                                    operator delete((void *)STACK[0x1D90]);
                                                                                                                                                  }
                                                                                                                                                  if (SLOBYTE(STACK[0x8CF]) < 0) {
                                                                                                                                                    operator delete((void *)STACK[0x8B8]);
                                                                                                                                                  }
                                                                                                                                                  STACK[0x1778] = (unint64_t)&STACK[0x8D0];
                                                                                                                                                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x1778]);
                                                                                                                                                  if (v84[3575] < 0) {
                                                                                                                                                    operator delete((void *)STACK[0x1DA8]);
                                                                                                                                                  }
                                                                                                                                                  if (SLOBYTE(STACK[0x8FF]) < 0) {
                                                                                                                                                    operator delete((void *)STACK[0x8E8]);
                                                                                                                                                  }
                                                                                                                                                  STACK[0x1778] = (unint64_t)&STACK[0x900];
                                                                                                                                                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x1778]);
                                                                                                                                                  uint64_t v123 = 0;
                                                                                                                                                  while (1)
                                                                                                                                                  {
                                                                                                                                                    if (*((char *)&STACK[0x1DC0] + v123 + 119) < 0) {
                                                                                                                                                      operator delete(*(void **)((char *)&STACK[0x1DC0] + v123 + 96));
                                                                                                                                                    }
                                                                                                                                                    v123 -= 24;
                                                                                                                                                    if (v123 == -120)
                                                                                                                                                    {
                                                                                                                                                      if (SLOBYTE(STACK[0x92F]) < 0) {
                                                                                                                                                        operator delete((void *)STACK[0x918]);
                                                                                                                                                      }
                                                                                                                                                      STACK[0x1778] = (unint64_t)&STACK[0x930];
                                                                                                                                                      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x1778]);
                                                                                                                                                      if (v84[3719] < 0) {
                                                                                                                                                        operator delete((void *)STACK[0x1E38]);
                                                                                                                                                      }
                                                                                                                                                      if (SLOBYTE(STACK[0x95F]) < 0) {
                                                                                                                                                        operator delete((void *)STACK[0x948]);
                                                                                                                                                      }
                                                                                                                                                      STACK[0x1778] = (unint64_t)&STACK[0x960];
                                                                                                                                                      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x1778]);
                                                                                                                                                      uint64_t v124 = 0;
                                                                                                                                                      while (1)
                                                                                                                                                      {
                                                                                                                                                        if (*((char *)&STACK[0x1E50] + v124 + 119) < 0) {
                                                                                                                                                          operator delete(*(void **)((char *)&STACK[0x1E50] + v124 + 96));
                                                                                                                                                        }
                                                                                                                                                        v124 -= 24;
                                                                                                                                                        if (v124 == -120)
                                                                                                                                                        {
                                                                                                                                                          if (SLOBYTE(STACK[0x98F]) < 0) {
                                                                                                                                                            operator delete((void *)STACK[0x978]);
                                                                                                                                                          }
                                                                                                                                                          STACK[0x1778] = (unint64_t)&STACK[0x990];
                                                                                                                                                          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x1778]);
                                                                                                                                                          uint64_t v125 = 0;
                                                                                                                                                          while (1)
                                                                                                                                                          {
                                                                                                                                                            if (*((char *)&STACK[0x1EC8] + v125 + 143) < 0) {
                                                                                                                                                              operator delete(*(void **)((char *)&STACK[0x1EC8] + v125 + 120));
                                                                                                                                                            }
                                                                                                                                                            v125 -= 24;
                                                                                                                                                            if (v125 == -144)
                                                                                                                                                            {
                                                                                                                                                              if (SLOBYTE(STACK[0x9BF]) < 0) {
                                                                                                                                                                operator delete((void *)STACK[0x9A8]);
                                                                                                                                                              }
                                                                                                                                                              STACK[0x1778] = (unint64_t)&STACK[0x9C0];
                                                                                                                                                              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x1778]);
                                                                                                                                                              uint64_t v126 = 0;
                                                                                                                                                              while (1)
                                                                                                                                                              {
                                                                                                                                                                if (*((char *)&STACK[0x1F58] + v126 + 119) < 0) {
                                                                                                                                                                  operator delete(*(void **)((char *)&STACK[0x1F58] + v126 + 96));
                                                                                                                                                                }
                                                                                                                                                                v126 -= 24;
                                                                                                                                                                if (v126 == -120)
                                                                                                                                                                {
                                                                                                                                                                  if (SLOBYTE(STACK[0x9EF]) < 0) {
                                                                                                                                                                    operator delete((void *)STACK[0x9D8]);
                                                                                                                                                                  }
                                                                                                                                                                  STACK[0x1778] = (unint64_t)&STACK[0x9F0];
                                                                                                                                                                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x1778]);
                                                                                                                                                                  if (*(char *)(v83 + 23) < 0) {
                                                                                                                                                                    operator delete((void *)STACK[0x1FD0]);
                                                                                                                                                                  }
                                                                                                                                                                  if (SLOBYTE(STACK[0xA1F]) < 0) {
                                                                                                                                                                    operator delete((void *)STACK[0xA08]);
                                                                                                                                                                  }
                                                                                                                                                                  STACK[0x1778] = (unint64_t)&STACK[0xA20];
                                                                                                                                                                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x1778]);
                                                                                                                                                                  uint64_t v127 = 0;
                                                                                                                                                                  while (1)
                                                                                                                                                                  {
                                                                                                                                                                    if (*((char *)&STACK[0x1FE8] + v127 + 167) < 0) {
                                                                                                                                                                      operator delete(*(void **)((char *)&STACK[0x1FE8] + v127 + 144));
                                                                                                                                                                    }
                                                                                                                                                                    v127 -= 24;
                                                                                                                                                                    if (v127 == -168)
                                                                                                                                                                    {
                                                                                                                                                                      if (SLOBYTE(STACK[0xA4F]) < 0) {
                                                                                                                                                                        operator delete((void *)STACK[0xA38]);
                                                                                                                                                                      }
                                                                                                                                                                      STACK[0x1778] = (unint64_t)&STACK[0xA50];
                                                                                                                                                                      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x1778]);
                                                                                                                                                                      uint64_t v128 = 0;
                                                                                                                                                                      while (1)
                                                                                                                                                                      {
                                                                                                                                                                        if (*((char *)&STACK[0x2090] + v128 + 119) < 0) {
                                                                                                                                                                          operator delete(*(void **)((char *)&STACK[0x2090] + v128 + 96));
                                                                                                                                                                        }
                                                                                                                                                                        v128 -= 24;
                                                                                                                                                                        if (v128 == -120)
                                                                                                                                                                        {
                                                                                                                                                                          if (SLOBYTE(STACK[0xA7F]) < 0) {
                                                                                                                                                                            operator delete((void *)STACK[0xA68]);
                                                                                                                                                                          }
                                                                                                                                                                          STACK[0x1778] = (unint64_t)&STACK[0xA80];
                                                                                                                                                                          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x1778]);
                                                                                                                                                                          uint64_t v129 = 0;
                                                                                                                                                                          while (1)
                                                                                                                                                                          {
                                                                                                                                                                            if (*((char *)&STACK[0x2108] + v129 + 143) < 0) {
                                                                                                                                                                              operator delete(*(void **)((char *)&STACK[0x2108] + v129 + 120));
                                                                                                                                                                            }
                                                                                                                                                                            v129 -= 24;
                                                                                                                                                                            if (v129 == -144)
                                                                                                                                                                            {
                                                                                                                                                                              if (SLOBYTE(STACK[0xAAF]) < 0) {
                                                                                                                                                                                operator delete((void *)STACK[0xA98]);
                                                                                                                                                                              }
                                                                                                                                                                              _Unwind_Resume(a1);
                                                                                                                                                                            }
                                                                                                                                                                          }
                                                                                                                                                                        }
                                                                                                                                                                      }
                                                                                                                                                                    }
                                                                                                                                                                  }
                                                                                                                                                                }
                                                                                                                                                              }
                                                                                                                                                            }
                                                                                                                                                          }
                                                                                                                                                        }
                                                                                                                                                      }
                                                                                                                                                    }
                                                                                                                                                  }
                                                                                                                                                }
                                                                                                                                              }
                                                                                                                                            }
                                                                                                                                          }
                                                                                                                                        }
                                                                                                                                      }
                                                                                                                                    }
                                                                                                                                  }
                                                                                                                                }
                                                                                                                              }
                                                                                                                            }
                                                                                                                          }
                                                                                                                        }
                                                                                                                      }
                                                                                                                    }
                                                                                                                  }
                                                                                                                }
                                                                                                              }
                                                                                                            }
                                                                                                          }
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

void sub_1BDAE3A7C()
{
  while (1)
  {
    if (*((char *)v0 - 1) < 0) {
      operator delete((void *)*(v0 - 3));
    }
    v0 -= 3;
    if (v0 == &STACK[0xE78]) {
      JUMPOUT(0x1BDAE3AA0);
    }
  }
}

void sub_1BDAE3AA8()
{
  while (1)
  {
    if (*((char *)v0 - 1) < 0) {
      operator delete((void *)*(v0 - 3));
    }
    v0 -= 3;
    if (v0 == &STACK[0x1058]) {
      JUMPOUT(0x1BDAE3AD0);
    }
  }
}

void sub_1BDAE3AD8()
{
  while (1)
  {
    if (*((char *)v0 - 1) < 0) {
      operator delete((void *)*(v0 - 3));
    }
    v0 -= 3;
    if (v0 == &STACK[0x1178]) {
      JUMPOUT(0x1BDAE3B00);
    }
  }
}

void sub_1BDAE3B08()
{
  while (1)
  {
    if (*((char *)v0 - 1) < 0) {
      operator delete((void *)*(v0 - 3));
    }
    v0 -= 3;
    if (v0 == &STACK[0x1280]) {
      JUMPOUT(0x1BDAE3B30);
    }
  }
}

void sub_1BDAE3B38()
{
  while (1)
  {
    if (*((char *)v0 - 1) < 0) {
      operator delete((void *)*(v0 - 3));
    }
    v0 -= 3;
    if (v0 == &STACK[0x1418]) {
      JUMPOUT(0x1BDAE3B60);
    }
  }
}

void sub_1BDAE3B68()
{
  while (1)
  {
    if (*((char *)v0 - 1) < 0) {
      operator delete((void *)*(v0 - 3));
    }
    v0 -= 3;
    if (v0 == &STACK[0x1640]) {
      JUMPOUT(0x1BDAE3B90);
    }
  }
}

void sub_1BDAE3B98()
{
  while (1)
  {
    if (*((char *)v0 - 1) < 0) {
      operator delete((void *)*(v0 - 3));
    }
    v0 -= 3;
    if (v0 == &STACK[0x1958]) {
      JUMPOUT(0x1BDAE3BC0);
    }
  }
}

void sub_1BDAE3BC8()
{
  while (1)
  {
    if (*((char *)v0 - 1) < 0) {
      operator delete((void *)*(v0 - 3));
    }
    v0 -= 3;
    if (v0 == &STACK[0x1B80]) {
      JUMPOUT(0x1BDAE3BF0);
    }
  }
}

void sub_1BDAE3BF8()
{
  while (1)
  {
    if (*((char *)v0 - 1) < 0) {
      operator delete((void *)*(v0 - 3));
    }
    v0 -= 3;
    if (v0 == &STACK[0x1D00]) {
      JUMPOUT(0x1BDAE3C20);
    }
  }
}

void sub_1BDAE3C28()
{
  while (1)
  {
    if (*((char *)v0 - 1) < 0) {
      operator delete((void *)*(v0 - 3));
    }
    v0 -= 3;
    if (v0 == &STACK[0x1EC8]) {
      JUMPOUT(0x1BDAE3C50);
    }
  }
}

void sub_1BDAE3C58()
{
  while (1)
  {
    if (*((char *)v0 - 1) < 0) {
      operator delete((void *)*(v0 - 3));
    }
    v0 -= 3;
    if (v0 == &STACK[0x2108]) {
      JUMPOUT(0x1BDAE3C80);
    }
  }
}

void sub_1BDAE3C90()
{
  while (1)
  {
    if (*((char *)v0 - 1) < 0) {
      operator delete((void *)*(v0 - 3));
    }
    v0 -= 3;
    if (v0 == &STACK[0x1520]) {
      JUMPOUT(0x1BDAE3CB8);
    }
  }
}

void sub_1BDAE3CC0()
{
  while (1)
  {
    if (*((char *)v0 - 1) < 0) {
      operator delete((void *)*(v0 - 3));
    }
    v0 -= 3;
    if (v0 == &STACK[0x1FE8]) {
      JUMPOUT(0x1BDAE3CE8);
    }
  }
}

void sub_1BDAE3CF0()
{
  while (1)
  {
    if (*((char *)v0 - 1) < 0) {
      operator delete((void *)*(v0 - 3));
    }
    v0 -= 3;
    if (v0 == &STACK[0xD10]) {
      JUMPOUT(0x1BDAE3D14);
    }
  }
}

void sub_1BDAE3D1C()
{
  while (1)
  {
    if (*((char *)v0 - 1) < 0) {
      operator delete((void *)*(v0 - 3));
    }
    v0 -= 3;
    if (v0 == &STACK[0x1778]) {
      JUMPOUT(0x1BDAE3D44);
    }
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::find<std::string>(void *a1, unsigned __int8 *a2)
{
  unint64_t v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), (uint64_t)a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  std::string v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  uint64_t v11 = *v10;
  if (*v10)
  {
    uint64_t v12 = (uint64_t)(a1 + 4);
    do
    {
      unint64_t v13 = *((void *)v11 + 1);
      if (v6 == v13)
      {
        if (std::equal_to<std::string>::operator()[abi:ne180100](v12, v11 + 16, a2)) {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(void *)&v5) {
            v13 %= *(void *)&v5;
          }
        }
        else
        {
          v13 &= *(void *)&v5 - 1;
        }
        if (v13 != v9) {
          return 0;
        }
      }
      uint64_t v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

unint64_t std::__string_hash<char>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v3 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v3 = v2;
  }
  return std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v5, (uint64_t *)a2, v3);
}

void __clang_call_terminate(void *a1)
{
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2, unint64_t a3)
{
  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      uint64_t v4 = *(uint64_t *)((char *)a2 + a3 - 48);
      uint64_t v5 = *(uint64_t *)((char *)a2 + a3 - 40);
      uint64_t v6 = *(uint64_t *)((char *)a2 + a3 - 24);
      uint64_t v8 = *(uint64_t *)((char *)a2 + a3 - 64);
      uint64_t v7 = *(uint64_t *)((char *)a2 + a3 - 56);
      uint64_t v9 = *(uint64_t *)((char *)a2 + a3 - 16);
      uint64_t v10 = *(uint64_t *)((char *)a2 + a3 - 8);
      unint64_t v11 = v7 + v9;
      unint64_t v12 = 0x9DDFEA08EB382D69
          * (v6 ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))));
      unint64_t v13 = 0x9DDFEA08EB382D69 * (v12 ^ (v12 >> 47));
      unint64_t v14 = v8 + a3 + v7 + v4;
      uint64_t v15 = v14 + v5;
      unint64_t v16 = __ROR8__(v14, 44) + v8 + a3 + __ROR8__(v5 + v8 + a3 - 0x622015F714C7D297 * (v12 ^ (v12 >> 47)), 21);
      uint64_t v17 = v7 + v9 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      uint64_t v18 = v17 + v6 + v9;
      uint64_t v19 = __ROR8__(v18, 44);
      uint64_t v20 = v18 + v10;
      uint64_t v21 = v19 + v17 + __ROR8__(v17 + v5 + v10, 21);
      uint64_t v23 = *a2;
      uint64_t v22 = a2 + 4;
      unint64_t v24 = v23 - 0x4B6D499041670D8DLL * v5;
      uint64_t v25 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        uint64_t v26 = *(v22 - 3);
        uint64_t v27 = v24 + v15 + v11 + v26;
        uint64_t v28 = v22[2];
        uint64_t v29 = v22[3];
        uint64_t v30 = v22[1];
        unint64_t v11 = v30 + v15 - 0x4B6D499041670D8DLL * __ROR8__(v11 + v16 + v28, 42);
        uint64_t v31 = v13 + v20;
        uint64_t v32 = *(v22 - 2);
        uint64_t v33 = *(v22 - 1);
        uint64_t v34 = *(v22 - 4) - 0x4B6D499041670D8DLL * v16;
        uint64_t v35 = v34 + v20 + v33;
        uint64_t v36 = v34 + v26 + v32;
        uint64_t v15 = v36 + v33;
        uint64_t v37 = __ROR8__(v36, 44) + v34;
        unint64_t v38 = (0xB492B66FBE98F273 * __ROR8__(v27, 37)) ^ v21;
        unint64_t v24 = 0xB492B66FBE98F273 * __ROR8__(v31, 33);
        unint64_t v16 = v37 + __ROR8__(v35 + v38, 21);
        unint64_t v39 = v24 + v21 + *v22;
        uint64_t v20 = v39 + v30 + v28 + v29;
        uint64_t v21 = __ROR8__(v39 + v30 + v28, 44) + v39 + __ROR8__(v11 + v32 + v39 + v29, 21);
        v22 += 8;
        unint64_t v13 = v38;
        v25 += 64;
      }
      while (v25);
      unint64_t v40 = v24
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) ^ ((0x9DDFEA08EB382D69 * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) >> 47));
      unint64_t v41 = 0x9DDFEA08EB382D69
          * (v40 ^ (v38
                  - 0x4B6D499041670D8DLL * (v11 ^ (v11 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) ^ ((0x9DDFEA08EB382D69 * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) ^ ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) >> 47));
    }
    else
    {
      return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](a2, a3);
    }
  }
  else if (a3 > 0x10)
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](a2, a3);
  }
  else
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](a2, a3);
  }
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](_DWORD *a1, unint64_t a2)
{
  if (a2 < 9)
  {
    if (a2 < 4)
    {
      unint64_t result = 0x9AE16A3B2F90404FLL;
      if (a2)
      {
        unint64_t v8 = (0xC949D7C7509E6557 * (a2 + 4 * *((unsigned __int8 *)a1 + a2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                      * (*(unsigned __int8 *)a1 | ((unint64_t)*((unsigned __int8 *)a1 + (a2 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v8 ^ (v8 >> 47));
      }
    }
    else
    {
      uint64_t v6 = *(unsigned int *)((char *)a1 + a2 - 4);
      unint64_t v7 = 0x9DDFEA08EB382D69 * (((8 * *a1) + a2) ^ v6);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
    }
  }
  else
  {
    uint64_t v3 = *(void *)((char *)a1 + a2 - 8);
    uint64_t v4 = __ROR8__(v3 + a2, a2);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)))) >> 47))) ^ v3;
  }
  return result;
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](void *a1, uint64_t a2)
{
  uint64_t v2 = a1[1];
  unint64_t v3 = 0xB492B66FBE98F273 * *a1;
  uint64_t v4 = __ROR8__(0x9AE16A3B2F90404FLL * *(void *)((char *)a1 + a2 - 8), 30) + __ROR8__(v3 - v2, 43);
  unint64_t v5 = v3 + a2 + __ROR8__(v2 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(void *)((char *)a1 + a2 - 8);
  unint64_t v6 = 0x9DDFEA08EB382D69 * (v5 ^ (v4 - 0x3C5A37A36834CED9 * *(void *)((char *)a1 + a2 - 16)));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) ^ ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) >> 47));
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](void *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)((char *)a1 + a2 - 16);
  uint64_t v3 = *a1 - 0x3C5A37A36834CED9 * (v2 + a2);
  uint64_t v5 = a1[2];
  uint64_t v4 = a1[3];
  uint64_t v6 = __ROR8__(v3 + v4, 52);
  uint64_t v7 = v3 + a1[1];
  uint64_t v8 = __ROR8__(v7, 7);
  uint64_t v9 = v7 + v5;
  uint64_t v10 = *(void *)((char *)a1 + a2 - 32) + v5;
  uint64_t v11 = v8 + __ROR8__(*a1 - 0x3C5A37A36834CED9 * (v2 + a2), 37) + v6 + __ROR8__(v9, 31);
  uint64_t v12 = *(void *)((char *)a1 + a2 - 24) + v10 + v2;
  unint64_t v13 = 0xC3A5C85C97CB3127 * (v12 + *(void *)((char *)a1 + a2 - 8) + v4 + v11)
      - 0x651E95C4D06FBFB1
      * (v9
       + v4
       + __ROR8__(v10, 37)
       + __ROR8__(*(void *)((char *)a1 + a2 - 24) + v10, 7)
       + __ROR8__(*(void *)((char *)a1 + a2 - 8) + v4 + v10, 52)
       + __ROR8__(v12, 31));
  return 0x9AE16A3B2F90404FLL
       * ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) ^ ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) >> 47));
}

uint64_t std::equal_to<std::string>::operator()[abi:ne180100](uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = a2[23];
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = a2[23];
  }
  else {
    uint64_t v5 = *((void *)a2 + 1);
  }
  uint64_t v6 = a3[23];
  int v7 = (char)v6;
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *((void *)a3 + 1);
  }
  if (v5 != v6) {
    return 0;
  }
  if (v7 < 0) {
    uint64_t v3 = *(unsigned __int8 **)a3;
  }
  if ((v4 & 0x80) != 0) {
    return memcmp(*(const void **)a2, v3, *((void *)a2 + 1)) == 0;
  }
  if (!a2[23]) {
    return 1;
  }
  uint64_t v8 = v4 - 1;
  do
  {
    int v10 = *a2++;
    int v9 = v10;
    int v12 = *v3++;
    int v11 = v12;
    BOOL v14 = v8-- != 0;
    uint64_t result = v9 == v11;
  }
  while (v9 == v11 && v14);
  return result;
}

uint64_t std::vector<std::string>::vector[abi:ne180100](uint64_t a1, long long *a2, unint64_t a3)
{
  *(void *)(a1 + 16) = 0;
  uint64_t v4 = a1 + 16;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  if (a3)
  {
    std::vector<std::string>::__vallocate[abi:ne180100]((void *)a1, a3);
    *(void *)(a1 + 8) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>(v4, a2, (long long *)((char *)a2 + 24 * a3), *(std::string **)(a1 + 8));
  }
  return a1;
}

void sub_1BDAE4438(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string const,std::vector<std::string>>::~pair(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

char *std::vector<std::string>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

void std::vector<std::string>::__throw_length_error[abi:ne180100]()
{
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(24 * a2);
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
}

void sub_1BDAE45A0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  uint64_t result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D0] + 16);
  return result;
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  exceptiouint64_t n = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  unint64_t v1 = std::bad_array_new_length::bad_array_new_length(exception);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>(uint64_t a1, long long *a2, long long *a3, std::string *this)
{
  uint64_t v4 = this;
  int v11 = this;
  int v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  uint64_t v10 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((void *)v6 + 1));
        uint64_t v4 = v12;
      }
      else
      {
        long long v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      uint64_t v6 = (long long *)((char *)v6 + 24);
      int v12 = ++v4;
    }
    while (v6 != a3);
  }
  LOBYTE(v10) = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_1BDAE46C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  uint64_t v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17) {
      std::string::size_type v6 = __sz | 7;
    }
    std::string::size_type v7 = v6 + 1;
    uint64_t v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    uint64_t v5 = v8;
  }
  else
  {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = __sz;
  }

  memmove(v5, __s, __sz + 1);
}

void std::string::__throw_length_error[abi:ne180100]()
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 1) < 0) {
      operator delete(*(void **)(v1 - 24));
    }
    v1 -= 24;
  }
}

void std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::string>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0) {
      operator delete(*(void **)(i - 24));
    }
  }
  a1[1] = v2;
}

std::string *std::pair<std::string const,std::vector<std::string>>::pair[abi:ne180100]<true,0>(std::string *this, long long *a2, long long **a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(this + 1, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a3[1] - (char *)*a3) >> 3));
  return this;
}

void sub_1BDAE4930(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::unordered_map<std::string,std::vector<std::string>>::unordered_map(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 48 * a3;
    do
    {
      std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::vector<std::string>> const&>(a1, a2, (long long *)a2);
      a2 += 48;
      v5 -= 48;
    }
    while (v5);
  }
  return a1;
}

void sub_1BDAE49B4(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::vector<std::string>> const&>(uint64_t a1, unsigned __int8 *a2, long long *a3)
{
  std::string::size_type v6 = (void *)(a1 + 24);
  unint64_t v7 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v12 = v7;
      if (v7 >= v9) {
        unint64_t v12 = v7 % v9;
      }
    }
    else
    {
      unint64_t v12 = (v9 - 1) & v7;
    }
    unint64_t v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v12);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v8)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v11 > 1)
          {
            if (v15 >= v9) {
              v15 %= v9;
            }
          }
          else
          {
            v15 &= v9 - 1;
          }
          if (v15 != v12) {
            break;
          }
        }
      }
    }
  }
  else
  {
    unint64_t v12 = 0;
  }
  memset(v25, 0, sizeof(v25));
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__construct_node_hash<std::pair<std::string const,std::vector<std::string>> const&>(a1, v8, a3, v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v9 || (float)(v17 * (float)v9) < v16)
  {
    BOOL v18 = 1;
    if (v9 >= 3) {
      BOOL v18 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v9);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__rehash<true>(a1, v21);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v12 = v8 % v9;
      }
      else {
        unint64_t v12 = v8;
      }
    }
    else
    {
      unint64_t v12 = (v9 - 1) & v8;
    }
  }
  uint64_t v22 = *(void **)(*(void *)a1 + 8 * v12);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *uint64_t v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v12) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v23 >= v9) {
          v23 %= v9;
        }
      }
      else
      {
        v23 &= v9 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v6;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
  return i;
}

void sub_1BDAE4C40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__construct_node_hash<std::pair<std::string const,std::vector<std::string>> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, void *a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  unint64_t v8 = (char *)operator new(0x40uLL);
  *a4 = v8;
  a4[1] = v7;
  *((unsigned char *)a4 + 16) = 0;
  *(void *)unint64_t v8 = 0;
  *((void *)v8 + 1) = a2;
  uint64_t result = std::pair<std::string const,std::vector<std::string>>::pair[abi:ne180100]((std::string *)(v8 + 16), a3);
  *((unsigned char *)a4 + 16) = 1;
  return result;
}

void sub_1BDAE4CC0(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::string>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::vector<std::string>>::pair[abi:ne180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(this + 1, *((long long **)a2 + 3), *((long long **)a2 + 4), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 4) - *((void *)a2 + 3)) >> 3));
  return this;
}

void sub_1BDAE4D50(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4)
    {
LABEL_16:
      std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__do_rehash<true>(a1, prime);
    }
  }
}

void std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    uint64_t v7 = *(void **)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v8) = a1 + 16;
      unint64_t v11 = (void *)*v7;
      if (*v7)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2) {
              v12 %= a2;
            }
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(void *)(*(void *)a1 + 8 * v12))
            {
              *(void *)(*(void *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            *uint64_t v7 = *v11;
            void *v11 = **(void **)(*(void *)a1 + 8 * v12);
            **(void **)(*(void *)a1 + 8 * v12) = v11;
            unint64_t v11 = v7;
          }
          unint64_t v12 = v8;
LABEL_24:
          uint64_t v7 = v11;
          unint64_t v11 = (void *)*v11;
          unint64_t v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    uint8x8_t v10 = *(void **)a1;
    *(void *)a1 = 0;
    if (v10) {
      operator delete(v10);
    }
    *(void *)(a1 + 8) = 0;
  }
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::string>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::string>>,0>((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::string>>,0>(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::string>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void *std::string::basic_string[abi:ne180100]<0>(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    uint64_t v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((unsigned char *)v6 + v5) = 0;
  return a1;
}

std::string *std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(std::string *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_1BDAE51F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(uint64_t a1, long long *a2, long long *a3, std::string *this)
{
  size_t v4 = this;
  unint64_t v11 = this;
  unint64_t v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  uint64_t v10 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((void *)v6 + 1));
        size_t v4 = v12;
      }
      else
      {
        long long v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      uint64_t v6 = (long long *)((char *)v6 + 24);
      unint64_t v12 = ++v4;
    }
    while (v6 != a3);
  }
  LOBYTE(v10) = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_1BDAE52BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t SIIsAppleInternal()
{
  if (SIIsAppleInternal_onceToken != -1) {
    dispatch_once(&SIIsAppleInternal_onceToken, &__block_literal_global_0);
  }
  return SIIsAppleInternal_internal;
}

uint64_t __SIIsAppleInternal_block_invoke()
{
  uint64_t result = MGGetBoolAnswer();
  SIIsAppleInternal_internal = result;
  return result;
}

uint64_t SIBullseyeFilterLocalSuggestionsDefault()
{
  if (SIBullseyeFilterLocalSuggestionsDefault_onceFilterLocalToken != -1) {
    dispatch_once(&SIBullseyeFilterLocalSuggestionsDefault_onceFilterLocalToken, &__block_literal_global_3);
  }
  return SIBullseyeFilterLocalSuggestionsDefault__bullseyeFilterLocalSuggestions;
}

uint64_t __SIBullseyeFilterLocalSuggestionsDefault_block_invoke()
{
  Boolean keyExistsAndHasValidFormat = 0;
  CFStringRef v0 = (const __CFString *)*MEMORY[0x1E4F1D3D8];
  CFPreferencesAddSuitePreferencesToApp((CFStringRef)*MEMORY[0x1E4F1D3D8], @"com.apple.spotlightui");
  uint64_t result = CFPreferencesGetAppBooleanValue(@"SPBullseyeFilterLocalSuggestions", v0, &keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat) {
    BOOL v2 = result == 0;
  }
  else {
    BOOL v2 = 1;
  }
  char v3 = !v2;
  SIBullseyeFilterLocalSuggestionsDefault__bullseyeFilterLocalSuggestions = v3;
  return result;
}

uint64_t SIBullseyeThresholdLocalSuggestionsDefault()
{
  if (SIBullseyeThresholdLocalSuggestionsDefault_onceThresholdLocalToken != -1) {
    dispatch_once(&SIBullseyeThresholdLocalSuggestionsDefault_onceThresholdLocalToken, &__block_literal_global_11);
  }
  return SIBullseyeThresholdLocalSuggestionsDefault__bullseyeThresholdLocalSuggestions;
}

uint64_t __SIBullseyeThresholdLocalSuggestionsDefault_block_invoke()
{
  Boolean keyExistsAndHasValidFormat = 0;
  CFStringRef v0 = (const __CFString *)*MEMORY[0x1E4F1D3D8];
  CFPreferencesAddSuitePreferencesToApp((CFStringRef)*MEMORY[0x1E4F1D3D8], @"com.apple.spotlightui");
  uint64_t result = CFPreferencesGetAppBooleanValue(@"SPBullseyeThresholdLocalSuggestions", v0, &keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat) {
    BOOL v2 = result == 0;
  }
  else {
    BOOL v2 = 1;
  }
  char v3 = !v2;
  SIBullseyeThresholdLocalSuggestionsDefault__bullseyeThresholdLocalSuggestions = v3;
  return result;
}

uint64_t SIBullseyeNoForceUnigramsDefault()
{
  if (SIBullseyeNoForceUnigramsDefault_onceToken != -1) {
    dispatch_once(&SIBullseyeNoForceUnigramsDefault_onceToken, &__block_literal_global_16);
  }
  return SIBullseyeNoForceUnigramsDefault_sUnigrams;
}

uint64_t __SIBullseyeNoForceUnigramsDefault_block_invoke()
{
  Boolean keyExistsAndHasValidFormat = 0;
  CFStringRef v0 = (const __CFString *)*MEMORY[0x1E4F1D3D8];
  CFPreferencesAddSuitePreferencesToApp((CFStringRef)*MEMORY[0x1E4F1D3D8], @"com.apple.spotlightui");
  uint64_t result = CFPreferencesGetAppBooleanValue(@"SIBullseyeNoForceUnigrams", v0, &keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat) {
    BOOL v2 = result == 0;
  }
  else {
    BOOL v2 = 1;
  }
  char v3 = !v2;
  SIBullseyeNoForceUnigramsDefault_sUnigrams = v3;
  return result;
}

void SISimulateCrashForPid(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
  {
    uint64_t v5 = 3134249728;
    if (a2) {
      uint64_t v5 = a2;
    }
    int v6 = 134218242;
    uint64_t v7 = v5;
    __int16 v8 = 2112;
    uint64_t v9 = a3;
    _os_log_fault_impl(&dword_1BDAD0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "%lld %@", (uint8_t *)&v6, 0x16u);
  }
}

uint64_t SIIsProcessDebugged(int a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  bzero(v7, 0x288uLL);
  *(void *)size_t v4 = 0xE00000001;
  int v5 = 1;
  int v6 = a1;
  size_t v3 = 648;
  if (sysctl(v4, 4u, v7, &v3, 0, 0)) {
    return 0;
  }
  else {
    return (v8 >> 11) & 1;
  }
}

void *SIDataMapCreateMutableWithOptions(const __CFURL *a1, const __CFString *a2, const __CFDictionary *a3)
{
  values[128] = *(void **)MEMORY[0x1E4F143B8];
  if (!a1) {
    return 0;
  }
  if (!CFURLResourceIsReachable(a1, 0))
  {
    BOOL v13 = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
    if (v13) {
      SIDataMapCreateMutableWithOptions_cold_1(v13, v14, v15, v16, v17, v18, v19, v20);
    }
    return 0;
  }
  int v6 = (const void *)*MEMORY[0x1E4F1D678];
  values[0] = *(void **)MEMORY[0x1E4F1D678];
  CFArrayRef v7 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)values, 1, MEMORY[0x1E4F1D510]);
  if (!v7) {
    return 0;
  }
  CFArrayRef v8 = v7;
  CFDictionaryRef v9 = CFURLCopyResourcePropertiesForKeys(a1, v7, 0);
  if (!v9
    || (CFDictionaryRef v10 = v9,
        unint64_t v11 = CFDictionaryGetValue(v9, v6),
        unint64_t v12 = (const void *)*MEMORY[0x1E4F1CFD0],
        CFRelease(v10),
        v11 != v12))
  {
    CFRelease(v8);
    return 0;
  }
  CFRelease(v8);
  unint64_t v23 = (void *)*MEMORY[0x1E4F1CFC8];
  value = (void *)*MEMORY[0x1E4F1CFC8];
  if (a2) {
    CFStringRef v24 = a2;
  }
  else {
    CFStringRef v24 = @"data.map";
  }
  bzero(values, 0x400uLL);
  usedBufLeuint64_t n = 0;
  memset(&v47, 0, sizeof(v47));
  CFStringRef v25 = CFURLCopyPath(a1);
  if (v25)
  {
    CFStringRef v26 = v25;
    v51.length = CFStringGetLength(v25);
    v51.locatiouint64_t n = 0;
    CFStringGetBytes(v26, v51, 0x8000100u, 0x2Du, 0, (UInt8 *)values, 1024, &usedBufLen);
    *((unsigned char *)values + usedBufLen) = 0;
    CFRelease(v26);
  }
  if (stat((const char *)values, &v47)) {
    return 0;
  }
  int v27 = open((const char *)values, 256);
  if (v27 < 0)
  {
    BOOL v31 = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
    if (v31) {
      SIDataMapCreateMutableWithOptions_cold_2(v31, v32, v33, v34, v35, v36, v37, v38);
    }
    if (v27 == -1) {
      return 0;
    }
    goto LABEL_29;
  }
  v52.length = CFStringGetLength(v24);
  v52.locatiouint64_t n = 0;
  CFStringGetBytes(v24, v52, 0x8000100u, 0x2Du, 0, (UInt8 *)values, 1024, &usedBufLen);
  *((unsigned char *)values + usedBufLen) = 0;
  if (a3)
  {
    CFDictionaryGetValueIfPresent(a3, (const void *)kSIDataMapOptionEnablePayloads, (const void **)&value);
    unint64_t v23 = value;
  }
  int v28 = 4 * (v23 == v11);
  uint64_t v29 = data_map32_init(v27, (uint64_t)values, v28, 9);
  if (!v29)
  {
    BOOL v39 = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
    if (v39) {
      SIDataMapCreateMutableWithOptions_cold_3(v39, v40, v41, v42, v43, v44, v45, v46);
    }
LABEL_29:
    close(v27);
    return 0;
  }
  uint64_t v30 = v29;
  size_t v21 = malloc_type_calloc(1uLL, 0x20uLL, 0x1060040504AB746uLL);
  if (v21)
  {
    v21[1] = CFRetain(a1);
    _OWORD v21[2] = v30;
    *((_DWORD *)v21 + 6) = v28;
    *((_DWORD *)v21 + 7) = v27;
    atomic_fetch_add((atomic_uint *volatile)v21, 1u);
  }
  else
  {
    close(v27);
    data_map32_destroy(v30);
  }
  return v21;
}

atomic_uint *SIDataMapRetain(atomic_uint *result)
{
  if (result) {
    atomic_fetch_add(result, 1u);
  }
  return result;
}

void *SIDataMapCreateWithOptions(const __CFURL *a1, const __CFString *a2, const __CFDictionary *a3)
{
  values[128] = *(void **)MEMORY[0x1E4F143B8];
  if (!a1) {
    return 0;
  }
  if (!CFURLResourceIsReachable(a1, 0))
  {
    BOOL v14 = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
    if (v14) {
      SIDataMapCreateMutableWithOptions_cold_1(v14, v15, v16, v17, v18, v19, v20, v21);
    }
    return 0;
  }
  int v6 = (const void *)*MEMORY[0x1E4F1D678];
  values[0] = *(void **)MEMORY[0x1E4F1D678];
  CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFArrayRef v8 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)values, 1, MEMORY[0x1E4F1D510]);
  if (!v8) {
    return 0;
  }
  CFArrayRef v9 = v8;
  CFDictionaryRef v10 = CFURLCopyResourcePropertiesForKeys(a1, v8, 0);
  if (!v10
    || (CFDictionaryRef v11 = v10,
        unint64_t v12 = CFDictionaryGetValue(v10, v6),
        BOOL v13 = (const void *)*MEMORY[0x1E4F1CFD0],
        CFRelease(v11),
        v12 != v13))
  {
    CFRelease(v9);
    return 0;
  }
  CFRelease(v9);
  CFStringRef v24 = (void *)*MEMORY[0x1E4F1CFC8];
  value = (void *)*MEMORY[0x1E4F1CFC8];
  if (a2) {
    CFStringRef v25 = a2;
  }
  else {
    CFStringRef v25 = @"data.map";
  }
  bzero(values, 0x400uLL);
  usedBufLeuint64_t n = 0;
  memset(&v59, 0, sizeof(v59));
  CFStringRef v26 = CFURLCopyPath(a1);
  if (v26)
  {
    CFStringRef v27 = v26;
    v63.length = CFStringGetLength(v26);
    v63.locatiouint64_t n = 0;
    CFStringGetBytes(v27, v63, 0x8000100u, 0x2Du, 0, (UInt8 *)values, 1024, &usedBufLen);
    *((unsigned char *)values + usedBufLen) = 0;
    CFRelease(v27);
  }
  if (stat((const char *)values, &v59)) {
    return 0;
  }
  int v28 = open((const char *)values, 256);
  if (v28 < 0)
  {
    BOOL v38 = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
    if (v38) {
      SIDataMapCreateMutableWithOptions_cold_2(v38, v39, v40, v41, v42, v43, v44, v45);
    }
    return 0;
  }
  unsigned int v29 = v28;
  CFStringRef v30 = CFStringCreateWithFormat(v7, 0, @"%@/%@.plist", a1, @"config");
  if (v30)
  {
    CFStringRef v31 = v30;
    CFURLRef v32 = CFURLCreateWithString(v7, v30, 0);
    if (v32)
    {
      CFURLRef v33 = v32;
      CFErrorRef v58 = 0;
      CFDictionaryRef v34 = (const __CFDictionary *)createDictionaryWithContentsOfURL(v32, &v58);
      if (v34)
      {
        CFDictionaryRef v35 = v34;
        CFNumberRef v36 = (const __CFNumber *)CFDictionaryGetValue(v34, @"_SIDataMapVersion");
        if (v36)
        {
          uint64_t valuePtr = 0;
          CFNumberGetValue(v36, kCFNumberCFIndexType, &valuePtr);
          BOOL v37 = valuePtr == 1;
        }
        else
        {
          BOOL v37 = 1;
        }
        CFRelease(v35);
      }
      else
      {
        BOOL v37 = 1;
      }
      CFRelease(v33);
      CFRelease(v31);
      if (!v37) {
        return 0;
      }
    }
    else
    {
      CFRelease(v31);
    }
  }
  v64.length = CFStringGetLength(v25);
  v64.locatiouint64_t n = 0;
  CFStringGetBytes(v25, v64, 0x8000100u, 0x2Du, 0, (UInt8 *)values, 1024, &usedBufLen);
  *((unsigned char *)values + usedBufLen) = 0;
  if (a3)
  {
    CFDictionaryGetValueIfPresent(a3, (const void *)kSIDataMapOptionEnablePayloads, (const void **)&value);
    CFStringRef v24 = value;
  }
  int v46 = 4 * (v24 == v12);
  uint64_t v47 = data_map32_init(v29, (uint64_t)values, v46, 10);
  if (!v47)
  {
    BOOL v49 = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
    if (v49) {
      SIDataMapCreateMutableWithOptions_cold_3(v49, v50, v51, v52, v53, v54, v55, v56);
    }
    close(v29);
    return 0;
  }
  uint64_t v48 = v47;
  uint64_t v22 = malloc_type_calloc(1uLL, 0x20uLL, 0x1060040504AB746uLL);
  if (v22)
  {
    v22[1] = CFRetain(a1);
    v22[2] = v48;
    *((_DWORD *)v22 + 6) = v46;
    *((_DWORD *)v22 + 7) = v29;
    atomic_fetch_add((atomic_uint *volatile)v22, 1u);
  }
  else
  {
    close(v29);
    data_map32_destroy(v48);
  }
  return v22;
}

uint64_t SIDataMapGetCount(uint64_t result)
{
  if (result)
  {
    uint64_t result = *(void *)(result + 16);
    if (result) {
      return data_map32_count(result);
    }
  }
  return result;
}

uint64_t SIDataMapLookupKey(uint64_t result, unsigned __int16 *a2, size_t a3, unint64_t a4, unint64_t a5)
{
  if (!result) {
    return result;
  }
  uint64_t v5 = result;
  uint64_t result = *(void *)(result + 16);
  if (!result) {
    return result;
  }
  if (!(a4 | a5)) {
    return 0;
  }
  if (a4)
  {
    char v11 = 0;
    int extra_with_key = data_map32_get_extra_with_key(result, a2, a3, &v11);
    if (v11)
    {
      *(_DWORD *)a4 = extra_with_key;
      goto LABEL_7;
    }
    return 0;
  }
LABEL_7:
  if (!a5) {
    return 1;
  }
  uint64_t result = *(void *)(v5 + 16);
  if (result)
  {
    uint64_t result = data_map32_id_get(result, (char *)a2, a3);
    if (result)
    {
      *(_DWORD *)a5 = result;
      return 1;
    }
  }
  return result;
}

uint64_t SIDataMapAddKeyWithPayload(uint64_t result, const void *a2, size_t a3, int a4, _DWORD *a5)
{
  v14[1] = *MEMORY[0x1E4F143B8];
  if (result)
  {
    uint64_t v5 = result;
    if (*(void *)(result + 16))
    {
      uint64_t v10 = *(unsigned int *)(result + 24);
      size_t v11 = v10 + a3;
      MEMORY[0x1F4188790](result);
      BOOL v13 = (char *)v14 - v12;
      bzero((char *)v14 - v12, v11);
      *(_DWORD *)BOOL v13 = a4;
      memcpy(&v13[v10], a2, a3);
      uint64_t result = data_map32_id_insert(*(void *)(v5 + 16), v13, v11);
      if (result)
      {
        if (a5) {
          *a5 = result;
        }
        return 1;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t SIDataMapAddKey(uint64_t a1, const void *a2, size_t a3, _DWORD *a4)
{
  return SIDataMapAddKeyWithPayload(a1, a2, a3, 0, a4);
}

uint64_t SIDataMapLookupStringKey(uint64_t result, CFStringRef theString, unint64_t a3, unint64_t a4)
{
  v14[1] = *MEMORY[0x1E4F143B8];
  if (result)
  {
    uint64_t v4 = result;
    if (*(void *)(result + 16))
    {
      CFIndex Length = CFStringGetLength(theString);
      v14[0] = Length;
      CFIndex MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
      size_t v10 = MaximumSizeForEncoding + 1;
      MEMORY[0x1F4188790](MaximumSizeForEncoding);
      uint64_t v12 = (UInt8 *)v14 - v11;
      bzero((char *)v14 - v11, v10);
      v15.locatiouint64_t n = 0;
      v15.length = Length;
      CFStringGetBytes(theString, v15, 0x8000100u, 0x2Du, 0, v12, v10, v14);
      size_t v13 = v14[0];
      v12[v14[0]] = 0;
      return SIDataMapLookupKey(v4, (unsigned __int16 *)v12, v13, a3, a4);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t SIDataMapAddStringKeyWithPayload(uint64_t result, CFStringRef theString, int a3, _DWORD *a4)
{
  v14[1] = *MEMORY[0x1E4F143B8];
  if (result)
  {
    uint64_t v4 = result;
    if (*(void *)(result + 16))
    {
      CFIndex Length = CFStringGetLength(theString);
      v14[0] = Length;
      CFIndex MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
      size_t v10 = MaximumSizeForEncoding + 1;
      MEMORY[0x1F4188790](MaximumSizeForEncoding);
      uint64_t v12 = (UInt8 *)v14 - v11;
      bzero((char *)v14 - v11, v10);
      v15.locatiouint64_t n = 0;
      v15.length = Length;
      CFStringGetBytes(theString, v15, 0x8000100u, 0x2Du, 0, v12, v10, v14);
      size_t v13 = v14[0];
      v12[v14[0]] = 0;
      return SIDataMapAddKeyWithPayload(v4, v12, v13, a3, a4);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t SIDataMapAddStringKey(uint64_t a1, const __CFString *a2, _DWORD *a3)
{
  return SIDataMapAddStringKeyWithPayload(a1, a2, 0, a3);
}

uint64_t SIDataMapLookupUInt32Key(uint64_t result, int a2, unint64_t a3, unint64_t a4)
{
  int v4 = a2;
  if (result)
  {
    if (*(void *)(result + 16)) {
      return SIDataMapLookupKey(result, (unsigned __int16 *)&v4, 4uLL, a3, a4);
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t SIDataMapAddUInt32KeyWithPayload(uint64_t result, int a2, int a3, _DWORD *a4)
{
  int v4 = a2;
  if (result)
  {
    if (*(void *)(result + 16)) {
      return SIDataMapAddKeyWithPayload(result, &v4, 4uLL, a3, a4);
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t SIDataMapAddUInt32Key(uint64_t result, int a2, _DWORD *a3)
{
  int v3 = a2;
  if (result)
  {
    if (*(void *)(result + 16)) {
      return SIDataMapAddKeyWithPayload(result, &v3, 4uLL, 0, a3);
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t SIDataMapGetKey(uint64_t result, unsigned int a2, void *a3, int a4, _DWORD *a5)
{
  if (result)
  {
    uint64_t result = *(void *)(result + 16);
    if (result)
    {
      LODWORD(v6) = a4;
      uint64_t v9 = 0;
      data = (const void *)data_map32_get_data(result, a2, &v9);
      if (a3)
      {
        if (v9 <= v6) {
          size_t v6 = v9;
        }
        else {
          size_t v6 = v6;
        }
        memcpy(a3, data, v6);
        if (a5) {
          *a5 = v6;
        }
        return 1;
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

void SIDataMapWrite(uint64_t a1, const __CFDictionary *a2)
{
  if (a1)
  {
    uint64_t v3 = *(void *)(a1 + 16);
    if (v3)
    {
      data_map32_commit(v3);
      data_map32_make_read_only(*(void *)(a1 + 16));
      CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CFMutableDictionaryRef v6 = a2
         ? CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, a2)
         : CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      CFAllocatorRef v7 = v6;
      if (v6)
      {
        uint64_t valuePtr = 1;
        CFNumberRef v8 = CFNumberCreate(v5, kCFNumberCFIndexType, &valuePtr);
        if (v8)
        {
          CFNumberRef v9 = v8;
          CFDictionarySetValue(v7, @"_SIDataMapVersion", v8);
          CFRelease(v9);
        }
        CFStringRef v10 = CFStringCreateWithFormat(v5, 0, @"%@/%@.plist", *(void *)(a1 + 8), @"config");
        if (v10)
        {
          CFStringRef v11 = v10;
          CFURLRef v12 = CFURLCreateWithString(v5, v10, 0);
          if (v12)
          {
            CFURLRef v13 = v12;
            CFTypeRef cf = 0;
            writeContentsOfDictionaryToURL(v7, v12, kCFPropertyListXMLFormat_v1_0, (CFErrorRef *)&cf);
            if (cf) {
              CFRelease(cf);
            }
            CFRelease(v13);
          }
          CFRelease(v11);
        }
        CFRelease(v7);
      }
    }
  }
}

void SIDataMapRelease(void *a1)
{
  if (a1 && atomic_fetch_add((atomic_uint *volatile)a1, 0xFFFFFFFF) == 1)
  {
    BOOL v2 = (const void *)a1[1];
    if (v2) {
      CFRelease(v2);
    }
    uint64_t v3 = a1[2];
    if (v3) {
      data_map32_destroy(v3);
    }
    int v4 = *((_DWORD *)a1 + 7);
    if ((v4 & 0x80000000) == 0) {
      close(v4);
    }
    free(a1);
  }
}

void OUTLINED_FUNCTION_0_1(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

uint64_t MDHash(unsigned __int8 *a1, unsigned int a2, int a3)
{
  unsigned int v3 = -1640531527;
  if (a2 < 0xC)
  {
    int v5 = -1640531527;
    unsigned int v4 = a2;
  }
  else
  {
    unsigned int v4 = a2;
    int v5 = -1640531527;
    do
    {
      unsigned int v6 = *((_DWORD *)a1 + 1) + v3;
      unsigned int v7 = *((_DWORD *)a1 + 2) + a3;
      int v8 = (*(_DWORD *)a1 + v5 - (v6 + v7)) ^ (v7 >> 13);
      unsigned int v9 = (v6 - v7 - v8) ^ (v8 << 8);
      unsigned int v10 = (v7 - v8 - v9) ^ (v9 >> 13);
      int v11 = (v8 - v9 - v10) ^ (v10 >> 12);
      unsigned int v12 = (v9 - v10 - v11) ^ (v11 << 16);
      unsigned int v13 = (v10 - v11 - v12) ^ (v12 >> 5);
      int v5 = (v11 - v12 - v13) ^ (v13 >> 3);
      unsigned int v3 = (v12 - v13 - v5) ^ (v5 << 10);
      a3 = (v13 - v5 - v3) ^ (v3 >> 15);
      a1 += 12;
      v4 -= 12;
    }
    while (v4 > 0xB);
  }
  unsigned int v14 = a3 + a2;
  switch(v4)
  {
    case 1u:
      goto LABEL_17;
    case 2u:
      goto LABEL_16;
    case 3u:
      goto LABEL_15;
    case 4u:
      goto LABEL_14;
    case 5u:
      goto LABEL_13;
    case 6u:
      goto LABEL_12;
    case 7u:
      goto LABEL_11;
    case 8u:
      goto LABEL_10;
    case 9u:
      goto LABEL_9;
    case 0xAu:
      goto LABEL_8;
    case 0xBu:
      v14 += a1[10] << 24;
LABEL_8:
      v14 += a1[9] << 16;
LABEL_9:
      v14 += a1[8] << 8;
LABEL_10:
      v3 += a1[7] << 24;
LABEL_11:
      v3 += a1[6] << 16;
LABEL_12:
      v3 += a1[5] << 8;
LABEL_13:
      v3 += a1[4];
LABEL_14:
      v5 += a1[3] << 24;
LABEL_15:
      v5 += a1[2] << 16;
LABEL_16:
      v5 += a1[1] << 8;
LABEL_17:
      v5 += *a1;
      break;
    default:
      break;
  }
  int v15 = (v5 - v3 - v14) ^ (v14 >> 13);
  unsigned int v16 = (v3 - v14 - v15) ^ (v15 << 8);
  unsigned int v17 = (v14 - v15 - v16) ^ (v16 >> 13);
  int v18 = (v15 - v16 - v17) ^ (v17 >> 12);
  unsigned int v19 = (v16 - v17 - v18) ^ (v18 << 16);
  unsigned int v20 = (v17 - v18 - v19) ^ (v19 >> 5);
  int v21 = (v18 - v19 - v20) ^ (v20 >> 3);
  return (v20 - v21 - ((v19 - v20 - v21) ^ (v21 << 10))) ^ (((v19 - v20 - v21) ^ (v21 << 10)) >> 15);
}

uint64_t MDHashQuick32(int a1)
{
  unsigned int v1 = (-1640531527 - a1) ^ ((a1 - 4) << 8);
  unsigned int v2 = (8 - a1 - v1) ^ (v1 >> 13);
  int v3 = (a1 - 4 - v1 - v2) ^ (v2 >> 12);
  unsigned int v4 = (v1 - v2 - v3) ^ (v3 << 16);
  unsigned int v5 = (v2 - v3 - v4) ^ (v4 >> 5);
  int v6 = (v3 - v4 - v5) ^ (v5 >> 3);
  return (v5 - v6 - ((v4 - v5 - v6) ^ (v6 << 10))) ^ (((v4 - v5 - v6) ^ (v6 << 10)) >> 15);
}

uint64_t MDHashQuick32Pair(int a1, int a2)
{
  int v2 = a1 - a2 - 8;
  unsigned int v3 = (a2 - (a1 - a2) - 1640531527) ^ (v2 << 8);
  unsigned int v4 = (16 - (a1 - a2) - v3) ^ (v3 >> 13);
  int v5 = (v2 - v3 - v4) ^ (v4 >> 12);
  unsigned int v6 = (v3 - v4 - v5) ^ (v5 << 16);
  unsigned int v7 = (v4 - v5 - v6) ^ (v6 >> 5);
  int v8 = (v5 - v6 - v7) ^ (v7 >> 3);
  return (v7 - v8 - ((v6 - v7 - v8) ^ (v8 << 10))) ^ (((v6 - v7 - v8) ^ (v8 << 10)) >> 15);
}

uint64_t MDHashQuick64(uint64_t a1)
{
  int v1 = HIDWORD(a1) - a1 - 8;
  unsigned int v2 = (a1 - (HIDWORD(a1) - a1) - 1640531527) ^ (v1 << 8);
  unsigned int v3 = (16 - (HIDWORD(a1) - a1) - v2) ^ (v2 >> 13);
  int v4 = (v1 - v2 - v3) ^ (v3 >> 12);
  unsigned int v5 = (v2 - v3 - v4) ^ (v4 << 16);
  unsigned int v6 = (v3 - v4 - v5) ^ (v5 >> 5);
  int v7 = (v4 - v5 - v6) ^ (v6 >> 3);
  return (v6 - v7 - ((v5 - v6 - v7) ^ (v7 << 10))) ^ (((v5 - v6 - v7) ^ (v7 << 10)) >> 15);
}

unint64_t MDHash64Quick64(uint64_t a1)
{
  int v1 = HIDWORD(a1) - a1 + 608135808;
  unsigned int v2 = (a1 - (HIDWORD(a1) - a1) + 2046299953) ^ (v1 << 8);
  unsigned int v3 = (-608135800 - (HIDWORD(a1) - a1) - v2) ^ (v2 >> 13);
  int v4 = (v1 - v2 - v3) ^ (v3 >> 12);
  unsigned int v5 = (v2 - v3 - v4) ^ (v4 << 16);
  unsigned int v6 = (v3 - v4 - v5) ^ (v5 >> 5);
  int v7 = (v4 - v5 - v6) ^ (v6 >> 3);
  uint64_t v8 = (v6 - v7 - ((v5 - v6 - v7) ^ (v7 << 10))) ^ (((v5 - v6 - v7) ^ (v7 << 10)) >> 15);
  int v9 = a1 + 608135808 - HIDWORD(a1);
  unsigned int v10 = (HIDWORD(a1) - (v9 + 8) - 1640531527) ^ (v9 << 8);
  unsigned int v11 = (8 - v9 - v10) ^ (v10 >> 13);
  int v12 = (v9 - v10 - v11) ^ (v11 >> 12);
  unsigned int v13 = (v10 - v11 - v12) ^ (v12 << 16);
  unsigned int v14 = (v11 - v12 - v13) ^ (v13 >> 5);
  int v15 = (v12 - v13 - v14) ^ (v14 >> 3);
  return v8 | ((unint64_t)((v14 - v15 - ((v13 - v14 - v15) ^ (v15 << 10))) ^ (((v13 - v14 - v15) ^ (v15 << 10)) >> 15)) << 32);
}

unint64_t MDUHash32(int a1)
{
  unsigned int v1 = (2 * a1 + 2046299953) ^ ((608135808 - a1) << 8);
  unsigned int v2 = (a1 - 608135800 - v1) ^ (v1 >> 13);
  int v3 = (608135808 - a1 - v1 - v2) ^ (v2 >> 12);
  unsigned int v4 = (v1 - v2 - v3) ^ (v3 << 16);
  unsigned int v5 = (v2 - v3 - v4) ^ (v4 >> 5);
  int v6 = (v3 - v4 - v5) ^ (v5 >> 3);
  uint64_t v7 = (v5 - v6 - ((v4 - v5 - v6) ^ (v6 << 10))) ^ (((v4 - v5 - v6) ^ (v6 << 10)) >> 15);
  unsigned int v8 = (2046299953 - a1) ^ ((a1 + 608135808) << 8);
  unsigned int v9 = (-608135800 - a1 - v8) ^ (v8 >> 13);
  int v10 = (a1 + 608135808 - v8 - v9) ^ (v9 >> 12);
  unsigned int v11 = (v8 - v9 - v10) ^ (v10 << 16);
  unsigned int v12 = (v9 - v10 - v11) ^ (v11 >> 5);
  int v13 = (v10 - v11 - v12) ^ (v12 >> 3);
  return v7 | ((unint64_t)((v12 - v13 - ((v11 - v12 - v13) ^ (v13 << 10))) ^ (((v11 - v12 - v13) ^ (v13 << 10)) >> 15)) << 32);
}

void *CITokenizerCreate(int a1)
{
  unsigned int v2 = malloc_type_calloc(1uLL, 0x70uLL, 0x10F0040AEFF90DEuLL);
  int v3 = v2;
  if (v2)
  {
    v2[3] = 0;
    v2[4] = 0;
    *((_DWORD *)v2 + 10) = a1;
    uint64_t v4 = NLStringTokenizerCreate();
    v3[1] = v4;
    v3[2] = 0;
    if (!v4) {
      CITokenizerCreate_cold_1();
    }
    v3[7] = 0;
    v3[8] = 0;
  }
  return v3;
}

void __message_assert_1(char *a1, ...)
{
  va_start(va, a1);
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  v1[0] = 0;
  va_copy((va_list)&v1[1], va);
  vasprintf((char **)v1, a1, va);
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315138;
    int v3 = v1[0];
    _os_log_error_impl(&dword_1BDAD0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%s", buf, 0xCu);
  }
  free(v1[0]);
}

void CITokenizerDispose(void *a1)
{
  if (a1)
  {
    unsigned int v2 = (const void *)a1[1];
    if (v2) {
      CFRelease(v2);
    }
    int v3 = (const void *)a1[2];
    if (v3) {
      CFRelease(v3);
    }
    uint64_t v4 = (void *)a1[8];
    if (v4) {
      free(v4);
    }
    unsigned int v5 = (const void *)a1[7];
    if (v5) {
      CFRelease(v5);
    }
    free(a1);
  }
}

uint64_t CITokenizerReset(uint64_t a1)
{
  if (*(void *)(a1 + 8)) {
    _NLStringTokenizerSetStringWithOptionsAndLanguageID();
  }
  uint64_t result = *(void *)(a1 + 16);
  if (result)
  {
    return _NLStringTokenizerSetStringWithOptionsAndLanguageID();
  }
  return result;
}

uint64_t CITokenizerGetClientObject(uint64_t a1)
{
  return *(void *)(a1 + 48);
}

uint64_t CITokenizerSetClientObject(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = result;
  int v6 = *(uint64_t (**)(void))(result + 80);
  if (v6) {
    uint64_t result = v6(*(void *)(result + 48));
  }
  *(void *)(v5 + 48) = a2;
  *(void *)(v5 + 80) = a3;
  return result;
}

void *CIRetainIndexingTokenizer(unsigned int a1)
{
  if (a1 >= 4) {
    CIRetainIndexingTokenizer_cold_1();
  }
  unsigned int v2 = OSAtomicDequeue((OSQueueHead *)&gIndexingTokenizerStack + a1, 0);
  if (v2)
  {
    uint64_t v3 = v2[1];
    v2[1] = 0;
    OSAtomicEnqueue(&gIndexingTokenizerHeap, v2, 0);
    return (void *)v3;
  }
  else
  {
    return CITokenizerCreate(a1);
  }
}

void CIPurgeTokenizers()
{
  for (uint64_t i = 0; i != 4; ++i)
  {
    unsigned int v1 = OSAtomicDequeue((OSQueueHead *)&gIndexingTokenizerStack + i, 0);
    unsigned int v2 = (void **)OSAtomicDequeue((OSQueueHead *)&gIndexingTokenizerStack + i, 0);
    if (v2)
    {
      uint64_t v3 = v2;
      do
      {
        CITokenizerDispose(v3[1]);
        v3[1] = 0;
        OSAtomicEnqueue(&gIndexingTokenizerHeap, v3, 0);
        uint64_t v3 = (void **)OSAtomicDequeue((OSQueueHead *)&gIndexingTokenizerStack + i, 0);
      }
      while (v3);
    }
    if (v1) {
      OSAtomicEnqueue((OSQueueHead *)&gIndexingTokenizerStack + i, v1, 0);
    }
  }
}

void CIReleaseIndexingTokenizer(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 40);
  if (v1 >= 4) {
    CIReleaseIndexingTokenizer_cold_1();
  }
  CITokenizerReset(a1);
  uint64_t v3 = OSAtomicDequeue(&gIndexingTokenizerHeap, 0);
  if (!v3) {
    uint64_t v3 = malloc_type_malloc(0x10uLL, 0xA0040BD48D6D6uLL);
  }
  v3[1] = a1;

  OSAtomicEnqueue((OSQueueHead *)&gIndexingTokenizerStack + v1, v3, 0);
}

void CITokenizerSetLocale(uint64_t a1, const __CFString *a2, const char *a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  bzero(buffer, 0x400uLL);
  if (a2 && (int v6 = buffer, CFStringGetCString(a2, buffer, 1024, 0x8000100u)) || (int v6 = (char *)a3) != 0)
  {
    if (*v6) {
      a3 = v6;
    }
    else {
      a3 = 0;
    }
    if (*v6) {
      CFStringRef v7 = a2;
    }
    else {
      CFStringRef v7 = 0;
    }
  }
  else
  {
    CFStringRef v7 = a2;
  }
  unsigned int v8 = *(char **)(a1 + 64);
  if (a3 == v8) {
    return;
  }
  if (a3 && v8)
  {
    if (!strcmp(a3, *(const char **)(a1 + 64))) {
      return;
    }
    goto LABEL_17;
  }
  if (v8) {
LABEL_17:
  }
    free(v8);
  *(void *)(a1 + 64) = 0;
  unsigned int v9 = *(const void **)(a1 + 56);
  if (v9) {
    CFRelease(v9);
  }
  *(void *)(a1 + 56) = 0;
  int v10 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
  if (a3 && !v7) {
    CFStringRef v7 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a3, 0x8000100u);
  }
  if (v7)
  {
    CFLocaleRef v11 = CFLocaleCreate(*v10, v7);
    *(void *)(a1 + 56) = v11;
    if (v11) {
      *(void *)(a1 + 64) = strdup(a3);
    }
    if (v7 != a2) {
      CFRelease(v7);
    }
  }
  *(_DWORD *)(a1 + 72) = MEMORY[0x1C1883720](*(void *)(a1 + 56));
}

BOOL CIStringTokenizerResolveTranscriptions(uint64_t a1)
{
  uint64_t v1 = (const char *)MEMORY[0x1F4188790](a1);
  CFIndex v3 = v2;
  uint64_t v5 = v4;
  CFStringRef v7 = v6;
  unsigned int v8 = (const UInt8 *)v1;
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  size_t v9 = strlen(v1);
  CFAllocatorRef alloc = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFStringRef v10 = CFStringCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v8, v9, 0x8000100u, 0, (CFAllocatorRef)*MEMORY[0x1E4F1CFA0]);
  if (!v10) {
    return 0;
  }
  CFStringRef v11 = v10;
  unsigned int v12 = CIRetainIndexingTokenizer(3u);
  if (!v12)
  {
    BOOL v35 = 0;
    goto LABEL_55;
  }
  uint64_t v13 = (uint64_t)v12;
  buffer = v5;
  CFIndex v38 = v3;
  bzero(v53, 0x1000uLL);
  bzero(&v52, 0x800uLL);
  bzero(v51, 0x800uLL);
  bzero(v50, 0x800uLL);
  uint64_t v49 = 0;
  *(_OWORD *)uint64_t v47 = 0u;
  *(_OWORD *)CFTypeRef cf = 0u;
  memset(v46, 0, sizeof(v46));
  CITokenizerSetLocale(v13, 0, v7);
  CITokenizerStateInit((uint64_t)v46, v11, (*(unsigned int *)(v13 + 72) < 0x37uLL) & (0x40000000300030uLL >> *(_DWORD *)(v13 + 72)), 0);
  CFStringRef v39 = v11;
  if (cf[0]) {
    CFStringRef v14 = (const __CFString *)cf[0];
  }
  else {
    CFStringRef v14 = v11;
  }
  CFStringGetLength(v14);
  _NLStringTokenizerSetStringWithOptionsAndLanguageID();
  CFMutableStringRef Mutable = 0;
  uint64_t v16 = 0;
  char v17 = 0;
  UniChar chars = 32;
  uint64_t v44 = (const UniChar *)v47[0];
  uint64_t v40 = v13;
  do
  {
    uint64_t v18 = _NLStringTokenizerTokenizeWithTranscriptions();
    uint64_t v19 = v18;
    uint64_t v20 = v18 - 1;
    if (v18 >= 1)
    {
      uint64_t v21 = 0;
      uint64_t v22 = (uint64_t *)v53;
      uint64_t v42 = &v53[v20];
      uint64_t v41 = v18 - 1;
      unint64_t v23 = (CFIndex *)v51;
      while (1)
      {
        if (!*v23)
        {
          if (v20 != v21) {
            goto LABEL_26;
          }
          if (!v16) {
            goto LABEL_26;
          }
          uint64_t v24 = v42[1] + *v42;
          CFIndex v25 = v24 - v16;
          if (v24 == v16) {
            goto LABEL_26;
          }
          unint64_t v26 = v44[v16];
          if (v26 > 0x7F)
          {
            if (!__maskrune(v26, 0x4000uLL)) {
              goto LABEL_34;
            }
          }
          else if ((*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v26 + 60) & 0x4000) == 0)
          {
LABEL_34:
            CFStringAppendCharacters(Mutable, &chars, 1);
          }
          unsigned int v29 = Mutable;
          CFStringRef v27 = &v44[v16];
          CFIndex v28 = v25;
          goto LABEL_25;
        }
        if (*(unsigned __int16 *)v50[v21] >= 0x80u) {
          char v17 = 1;
        }
        if (Mutable) {
          break;
        }
        CFMutableStringRef Mutable = CFStringCreateMutable(alloc, 0);
        if (v21) {
          goto LABEL_22;
        }
LABEL_24:
        uint64_t v16 = v22[1] + *v22;
        CFStringRef v27 = (const UniChar *)v50[v21];
        CFIndex v28 = *v23;
        unsigned int v29 = Mutable;
LABEL_25:
        CFStringAppendCharacters(v29, v27, v28);
LABEL_26:
        ++v21;
        v22 += 2;
        ++v23;
        if (v19 == v21) {
          goto LABEL_43;
        }
      }
      if (!v21) {
        goto LABEL_24;
      }
LABEL_22:
      if (*(v23 - 1))
      {
LABEL_23:
        CFStringAppendCharacters(Mutable, &chars, 1);
        goto LABEL_24;
      }
      uint64_t v30 = *v22;
      CFIndex v31 = *v22 - v16;
      if (v31 < 1) {
        goto LABEL_24;
      }
      if (v16)
      {
        unint64_t v32 = v44[v16];
        if (v32 > 0x7F)
        {
          if (__maskrune(v32, 0x4000uLL)) {
            goto LABEL_38;
          }
        }
        else if ((*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v32 + 60) & 0x4000) != 0)
        {
          goto LABEL_38;
        }
        CFStringAppendCharacters(Mutable, &chars, 1);
      }
LABEL_38:
      CFStringAppendCharacters(Mutable, &v44[v16], v31);
      unint64_t v33 = v44[v30 - 1];
      if (v33 > 0x7F) {
        int v34 = __maskrune(v33, 0x4000uLL);
      }
      else {
        int v34 = *(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v33 + 60) & 0x4000;
      }
      uint64_t v20 = v41;
      if (v34) {
        goto LABEL_24;
      }
      goto LABEL_23;
    }
LABEL_43:
    ;
  }
  while (v19);
  if (v17) {
    CFStringNormalize(Mutable, kCFStringNormalizationFormD);
  }
  CFStringRef v11 = v39;
  if (Mutable)
  {
    BOOL v35 = CFStringGetCString(Mutable, buffer, v38, 0x8000100u) != 0;
    CFRelease(Mutable);
  }
  else
  {
    BOOL v35 = 0;
  }
  CIReleaseIndexingTokenizer(v40);
  if (cf[0]) {
    CFRelease(cf[0]);
  }
  if (v47[1]) {
    free(v47[1]);
  }
LABEL_55:
  CFRelease(v11);
  return v35;
}

void CITokenizerStateInit(uint64_t a1, CFStringRef theString, int a3, int a4)
{
  *(void *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  if (theString) {
    CFIndex Length = CFStringGetLength(theString);
  }
  else {
    CFIndex Length = 0;
  }
  CharactersPtr = CFStringGetCharactersPtr(theString);
  *(void *)(a1 + 96) = CharactersPtr;
  if (!CharactersPtr)
  {
    CFStringRef v10 = (UniChar *)malloc_type_malloc(2 * Length + 32, 0xBD203FB0uLL);
    *(void *)(a1 + 104) = v10;
    if (!v10) {
      CITokenizerStateInit_cold_1(Length);
    }
    v19.locatiouint64_t n = 0;
    v19.length = Length;
    CFStringGetCharacters(theString, v19, v10);
    *(void *)(a1 + 96) = *(void *)(a1 + 104);
  }
  *(void *)(a1 + 120) = Length;
  if (!a3 || (int)Length < 1) {
    goto LABEL_15;
  }
  unorm2_getNFCInstance();
  if (unorm2_quickCheck() == 1)
  {
    *(unsigned char *)(a1 + 128) = 1;
    if (!a4) {
      return;
    }
    goto LABEL_16;
  }
  CFStringRef v11 = malloc_type_malloc(2 * Length, 0x1000040BDFB0063uLL);
  if (!v11)
  {
LABEL_15:
    if (!a4) {
      return;
    }
    goto LABEL_16;
  }
  unsigned int v12 = v11;
  int v13 = unorm2_normalize();
  int v17 = v13;
  *(unsigned char *)(a1 + 128) = 1;
  if (v13 == Length && !memcmp(*(const void **)(a1 + 96), v12, Length))
  {
    free(v12);
    goto LABEL_15;
  }
  if (v17 < (int)Length) {
    LODWORD(Length) = v17;
  }
  uint64_t v18 = *(void **)(a1 + 104);
  if (v18) {
    free(v18);
  }
  *(void *)(a1 + 96) = v12;
  *(void *)(a1 + 104) = v12;
  *(void *)(a1 + 112) = CFStringCreateWithCharactersNoCopy(0, (const UniChar *)v12, (int)Length, (CFAllocatorRef)*MEMORY[0x1E4F1CFA0]);
  *(void *)(a1 + 120) = (int)Length;
  if (a4)
  {
LABEL_16:
    uint64_t v14 = *(void *)(a1 + 120);
    if (v14 >= 2)
    {
      uint64_t v15 = *(void *)(a1 + 96);
      uint64_t v16 = v15 + 2 * v14;
      if (*(_WORD *)(v16 - 2) == 42
        && (*(_WORD *)(v16 - 4) != 92 || (unint64_t)v14 >= 3 && *(_WORD *)(v15 + 2 * v14 - 6) != 92))
      {
        *(unsigned char *)(a1 + 129) = 1;
      }
    }
  }
}

__n128 CITokenizerGetMatchState@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result = *(__n128 *)(a1 + 88);
  *a2 = result;
  a2[1].n128_u64[0] = *(void *)(a1 + 104);
  return result;
}

uint64_t CITokenizerGetOptions(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t CITokenizerSetOptions(uint64_t result, uint64_t a2)
{
  *(void *)(result + 32) = a2;
  return result;
}

void CITokenizerGetQueryTokens(uint64_t a1)
{
}

void CITokenizerGetQueryTokensWithOptions(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1F4188790](a1);
  uint64_t v7 = v6;
  if (v2)
  {
    int v8 = v4;
    CFStringRef v9 = v3;
    uint64_t v10 = (uint64_t)v2;
    uint64_t v11 = v1;
    unsigned int v12 = v5;
    if (CFStringGetLength(v2))
    {
      v15[0] = v12;
      v15[1] = v7;
      long long v16 = 0u;
      long long v17 = 0u;
      uint64_t v18 = 0;
      bzero(&cf, 0x1810uLL);
      CITokenizerSetLocale(v11, v9, 0);
      _CITokenizerGetTokens(v11, *(void *)(v11 + 8), v10, (uint64_t)&cf, v8 | 0x46u, (uint64_t)_CITokenizerGetQueryTokensStart, (uint64_t)_CITokenizerGetQueryTokens, 0, 0, 0, (void (*)(void, uint64_t, uint64_t))_CITokenizerGetQueryTokensEnd, (uint64_t)v15);
      if (cf) {
        CFRelease(cf);
      }
      if (v14) {
        free(v14);
      }
    }
    else
    {
      v12();
    }
  }
  else
  {
    ((void (*)(void))v5)(0);
  }
}

void _CITokenizerGetTokens(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void (*a9)(void, void *, uint64_t *), void (*a10)(uint64_t, uint64_t), void (*a11)(void, uint64_t, uint64_t), uint64_t a12)
{
  uint64_t v12 = MEMORY[0x1F4188790](a1);
  v220 = v13;
  v216 = v14;
  long long v16 = v15;
  unsigned int v18 = v17;
  uint64_t v211 = v19;
  CFStringRef v21 = v20;
  uint64_t v23 = v22;
  uint64_t v24 = v12;
  uint64_t v253 = *MEMORY[0x1E4F143B8];
  bzero(v226, 0xC30uLL);
  uint64_t v228 = -1;
  uint64_t v25 = *(void *)(v24 + 8);
  uint64_t v222 = v23;
  if (v25 != v23) {
    goto LABEL_2;
  }
  if ((v18 & 4) != 0)
  {
    LODWORD(v26) = 1;
  }
  else
  {
    unsigned int v27 = *(_DWORD *)(v24 + 72);
    if (v27 > 0x36)
    {
LABEL_2:
      LODWORD(v26) = 0;
      goto LABEL_7;
    }
    unint64_t v26 = (0x40000000300030uLL >> v27) & 1;
  }
LABEL_7:
  char v212 = a11;
  unsigned int v28 = *(_DWORD *)(v24 + 40);
  unsigned int v223 = v18;
  uint64_t v238 = 0;
  long long v237 = 0u;
  long long v236 = 0u;
  long long v235 = 0u;
  long long v234 = 0u;
  memset(v233, 0, sizeof(v233));
  long long v232 = 0u;
  long long v231 = 0u;
  bzero(v252, 0x1010uLL);
  bzero(v251, 0x808uLL);
  bzero(&v247, 0x1010uLL);
  bzero(v243, 0x808uLL);
  bzero(v241, 0x808uLL);
  bzero(v240, 0x808uLL);
  CITokenizerStateInit((uint64_t)&v231, v21, v26, (v18 >> 6) & 1);
  if (*(void *)(v24 + 16) == v222) {
    LOBYTE(v238) = 1;
  }
  uint64_t v29 = a12;
  uint64_t v218 = a12;
  uint64_t v215 = *((void *)&v237 + 1);
  if (!*((void *)&v237 + 1))
  {
    v184 = v212;
    uint64_t v185 = 0;
    if (v223)
    {
      if (v16) {
        v16(0, 0, v218);
      }
      if (v216) {
        v216(0, 0, 0, v218);
      }
    }
    goto LABEL_359;
  }
  uint64_t v225 = v24;
  if (a10)
  {
    uint64_t v30 = NLStringTokenizerCopyBestStringLanguage();
    if (v30)
    {
      CFIndex v31 = (const void *)v30;
      a10(v30, a12);
      CFRelease(v31);
    }
  }
  v219 = a9;
  _NLStringTokenizerSetStringWithOptionsAndLanguageID();
  if (v16) {
    v16(v236, v215, a12);
  }
  uint64_t v217 = 0;
  unint64_t v32 = &v234;
  v221 = &v233[1];
  CFAllocatorRef v33 = (const __CFAllocator *)*MEMORY[0x1E4F1CFA0];
  unsigned int v203 = v223 & 0xFFFFFFFE;
  uint64_t v201 = v211 + 4112;
  uint64_t v202 = v211 + 16;
  char v206 = &v249;
  CFAllocatorRef v204 = v33;
  long long v205 = &v244;
  char v200 = (void *)(v211 + 24);
  v213 = &v248;
  v214 = &v227;
  char v209 = &v242;
  CFRange v210 = &v246;
  uint64_t v207 = &v245;
  uint64_t v208 = &v250;
  uint64_t v34 = v225;
  v224 = &v234;
LABEL_16:
  while (2)
  {
    while (2)
    {
      while (2)
      {
        uint64_t v35 = *((void *)&v232 + 1);
        while (1)
        {
          uint64_t v36 = v232;
          if (v35 >= (uint64_t)v232)
          {
            uint64_t v62 = *((void *)&v231 + 1);
            uint64_t v63 = v231;
            if (*((uint64_t *)&v231 + 1) >= (uint64_t)v231)
            {
              *((void *)&v231 + 1) = 0;
              if ((v223 & 2) != 0) {
                uint64_t v63 = _NLStringTokenizerTokenize();
              }
              else {
                uint64_t v63 = _NLStringTokenizerTokenizeWithTranscriptions();
              }
              *(void *)&long long v231 = v63;
              if (!v63)
              {
                if (v217 < v215 && *(void *)(v34 + 8) == v222) {
                  handle_missing_punctuation(v236, v217, v215, v216, v29, 0);
                }
                goto LABEL_337;
              }
              uint64_t v217 = *((void *)&v252[v63 - 1] + 1) + *(void *)&v252[v63 - 1];
              uint64_t v62 = *((void *)&v231 + 1);
              unint64_t v32 = v224;
            }
            uint64_t v64 = v62 + 1;
            uint64_t v65 = v251[v62];
            *((void *)&v231 + 1) = v62 + 1;
            void v233[3] = v65;
            _OWORD *v221 = v252[v62];
            if (v233[2] == 1)
            {
              if (*(_WORD *)(v236 + 2 * v233[1]) == 8204) {
                goto LABEL_16;
              }
              if ((_BYTE)v238) {
                goto LABEL_127;
              }
            }
            else if ((_BYTE)v238)
            {
              if (v233[2] > 256) {
                goto LABEL_16;
              }
              goto LABEL_127;
            }
            if (v65 & 1) != 0 || v64 < v63 && (v251[v64])
            {
              if ((v65 & 0x40001000) != 0
                || (unsigned int v66 = *(unsigned __int16 *)(v236 + 2 * v233[1]), v66 >> 8 >= 0x11)
                && ((v66 & 0xFF00) == 0x1100 || (v66 - 11904) >> 7 < 0x197 || v66 - 65376 <= 0x4F))
              {
                v239[0] = 0;
                unorm2_getNFCInstance();
                v184 = v212;
                uint64_t v185 = v215;
                if (v239[0] <= 0)
                {
                  uint64_t v189 = v233[1];
                  uint64_t v190 = v215 - v233[1];
                  char v191 = (UniChar *)malloc_type_malloc(2 * (v215 - v233[1]), 0x4AF24339uLL);
                  if (v191)
                  {
                    long long v192 = v191;
                    int v193 = unorm2_normalize();
                    if (v239[0] <= 0)
                    {
                      CFIndex v194 = v190 >= v193 ? v193 : v185 - v189;
                      CFStringRef v195 = CFStringCreateWithCharactersNoCopy(0, v192, v194, v204);
                      if (v195)
                      {
                        CFStringRef v196 = v195;
                        uint64_t v197 = v225;
                        if (!*(void *)(v225 + 16)) {
                          *(void *)(v197 + 16) = NLStringTokenizerCreate();
                        }
                        _NLStringTokenizerSetLocale();
                        _CITokenizerGetTokens(v197, *(void *)(v197 + 16), v196, v211, v203, 0, v216, v220, 0, 0, 0, v218);
                        CFRelease(v196);
                      }
                    }
                    free(v192);
                  }
                }
                goto LABEL_359;
              }
            }
            if (v233[2] > 256) {
              goto LABEL_16;
            }
            if ((~(_WORD)v65 & 0x401) == 0)
            {
              v239[0] = 0;
              uint64_t NFCInstance = unorm2_getNFCInstance();
              if (v239[0] <= 0)
              {
                int v68 = v233[2];
                int v69 = v233[2];
                MEMORY[0x1F4188790](NFCInstance);
                char v71 = (char *)&v198 - ((v70 + 15) & 0x3FFFFFFF0);
                bzero(v71, v70);
                int v72 = unorm2_normalize();
                if (v239[0] <= 0)
                {
                  int v73 = v72;
                  if (v72 <= v68 && (v72 != v68 || !memcmp(v71, (const void *)(v236 + 2 * v233[1]), 2 * v69)))
                  {
                    CFStringRef v74 = CFStringCreateWithCharactersNoCopy(0, (const UniChar *)v71, v73, v204);
                    if (v74)
                    {
                      CFStringRef v75 = v74;
                      uint64_t v34 = v225;
                      if (!*(void *)(v225 + 16)) {
                        *(void *)(v34 + 16) = NLStringTokenizerCreate();
                      }
                      _NLStringTokenizerSetLocale();
                      _CITokenizerGetTokens(v34, *(void *)(v34 + 16), v75, v211, v203, 0, v216, v220, 0, 0, 0, v29);
                      CFRelease(v75);
                      unint64_t v32 = v224;
                      goto LABEL_16;
                    }
                  }
                }
                uint64_t v34 = v225;
              }
              unint64_t v32 = v224;
            }
LABEL_127:
            char v92 = v223;
            if ((v223 & 2) == 0)
            {
              if (v241[v62])
              {
                *(_OWORD *)(v34 + 88) = *(_OWORD *)&v233[1];
                *(void *)(v34 + 104) = v62;
                if (v220)
                {
                  v220(v240[v62]);
                  unint64_t v32 = v224;
                }
              }
            }
            *((void *)&v232 + 1) = 0;
            DWORD2(v235) = 0;
            if ((v233[3] & 0xFFFFFFFFFFFFFFFDLL) == 0)
            {
              *(void *)&long long v232 = 1;
              uint64_t v247 = 0;
              uint64_t v248 = v233[2];
              v243[0] = 0;
              goto LABEL_144;
            }
            if ((v233[3] & 0x400) == 0) {
              goto LABEL_133;
            }
            __int16 v177 = *(__CFString **)v211;
            if (*(void *)v211)
            {
              v254.length = CFStringGetLength(*(CFStringRef *)v211);
              v254.locatiouint64_t n = 0;
              CFStringDelete(v177, v254);
              uint64_t v29 = v218;
              uint64_t v34 = v225;
            }
            else
            {
              uint64_t v178 = *(UniChar **)(v211 + 8);
              uint64_t v29 = v218;
              uint64_t v34 = v225;
              if (!v178)
              {
                uint64_t v178 = (UniChar *)malloc_type_malloc(0x400uLL, 0x1000040BDFB0063uLL);
                *(void *)(v211 + 8) = v178;
                if (!v178) {
                  goto LABEL_337;
                }
              }
              CFMutableStringRef MutableWithExternalCharactersNoCopy = CFStringCreateMutableWithExternalCharactersNoCopy(0, v178, 0, 512, v204);
              *(void *)uint64_t v211 = MutableWithExternalCharactersNoCopy;
              if (!MutableWithExternalCharactersNoCopy) {
                goto LABEL_337;
              }
            }
            *(void *)&long long v232 = 0;
            uint64_t DerivedTokens = _NLStringTokenizerGetDerivedTokens();
            *(void *)&long long v232 = DerivedTokens;
            if (DerivedTokens == 1)
            {
              uint64_t v93 = v233[2];
              char v92 = v223;
              unint64_t v32 = v224;
              if (v233[2] == v248)
              {
                *(void *)&long long v232 = 0;
                goto LABEL_134;
              }
              uint64_t DerivedTokens = 1;
            }
            else
            {
              char v92 = v223;
              unint64_t v32 = v224;
              if (DerivedTokens < 1)
              {
LABEL_133:
                uint64_t v93 = v233[2];
                uint64_t v29 = v218;
                uint64_t v34 = v225;
LABEL_134:
                if (v93 >= 2 && ((v92 & 0x20) == 0 || (v233[3] & 0x200) != 0))
                {
                  uint64_t SubTokensOfCompound = _NLStringTokenizerGetSubTokensOfCompound();
                  *(void *)&long long v232 = SubTokensOfCompound;
                  if (SubTokensOfCompound)
                  {
                    unint64_t v32 = v224;
                    if (SubTokensOfCompound >= 2)
                    {
                      if ((v233[3] & 0x20) == 0) {
                        goto LABEL_147;
                      }
                      if ((v92 & 8) != 0 && (v233[3] & 0x40001000) == 0)
                      {
                        uint64_t v95 = v233[2];
                        uint64_t v96 = &v247 + 2 * *((void *)&v232 + 1);
                        *uint64_t v96 = 0;
                        v96[1] = v95;
                        *(void *)&long long v232 = 1;
LABEL_144:
                        uint64_t SubTokensOfCompound = 1;
                        goto LABEL_147;
                      }
                      uint64_t v156 = 0;
                      uint64_t v157 = 0;
                      int v158 = 0;
                      BOOL v159 = 0;
                      uint64_t v160 = v236;
                      uint64_t v161 = v233[1];
                      long long v162 = v213;
                      uint64_t v138 = SubTokensOfCompound;
                      while (1)
                      {
                        uint64_t v163 = v243[v157];
                        if ((v163 & 0x20) != 0) {
                          break;
                        }
                        BOOL v164 = (v163 & 0xFFFFFFFFFFFFFFF1) == 0;
                        if ((v164 & v158) != 1) {
                          goto LABEL_297;
                        }
                        if (*v162 > 2)
                        {
                          BOOL v164 = 1;
LABEL_297:
                          uint64_t v167 = v156 + (v158 & 1);
                          *((_OWORD *)&v247 + v167) = *(_OWORD *)(v162 - 1);
                          uint64_t v156 = v167 + 1;
                          v243[v167] = v163;
                          int v158 = 0;
                          goto LABEL_298;
                        }
                        int v158 = 0;
                        BOOL v164 = 0;
                        *(&v247 + 2 * v156 + 1) += *v162;
                        v243[v156++] |= v163;
                        *(void *)&long long v232 = --v138;
LABEL_298:
                        BOOL v159 = v164;
                        ++v157;
                        v162 += 2;
                        if (SubTokensOfCompound == v157) {
                          goto LABEL_246;
                        }
                      }
                      if (*v162 == 1)
                      {
                        int v165 = *(unsigned __int16 *)(v160 + 2 * (*(v162 - 1) + v161));
                        if (v165 == 8217 || v165 == 39)
                        {
                          if (!v157) {
                            goto LABEL_246;
                          }
                          if (v159)
                          {
                            --v156;
                            ++*(&v247 + 2 * v156 + 1);
                            uint64_t v166 = v243[v156];
                            if ((v166 & 0x20) == 0) {
                              v243[v156] = v166 | 0x10000020;
                            }
                            BOOL v164 = 0;
                            *(void *)&long long v232 = --v138;
                            int v158 = 1;
                            goto LABEL_298;
                          }
                        }
                      }
                      BOOL v164 = 0;
                      goto LABEL_297;
                    }
                    uint64_t v138 = SubTokensOfCompound;
LABEL_246:
                    uint64_t SubTokensOfCompound = v138;
                    if (!v138) {
                      goto LABEL_16;
                    }
LABEL_147:
                    uint64_t v97 = *((void *)&v232 + 1);
                    uint64_t v98 = &v247 + 2 * *((void *)&v232 + 1);
                    long long *v32 = *(_OWORD *)v98;
                    uint64_t v99 = v243[v97];
                    *(void *)&long long v235 = v99;
                    if ((v99 & 0x20) == 0)
                    {
                      uint64_t v100 = *v98;
                      uint64_t v101 = *(&v247 + 2 * SubTokensOfCompound - 1) + *(&v247 + 2 * SubTokensOfCompound - 2);
                      v233[0] = v101;
                      if (v97 >= SubTokensOfCompound)
                      {
                        uint64_t v110 = v99;
                        uint64_t v58 = v101;
                        goto LABEL_181;
                      }
                      uint64_t v102 = 0;
                      uint64_t v103 = 0;
                      uint64_t v104 = v236 + 2 * v233[1];
                      if (BYTE1(v238)) {
                        BOOL v105 = v233[2] + v233[1] == *((void *)&v237 + 1);
                      }
                      else {
                        BOOL v105 = 0;
                      }
                      int v106 = v105;
                      uint64_t v107 = &v213[2 * v97];
                      BOOL v108 = 1;
                      uint64_t v109 = v97;
                      uint64_t v110 = v99;
                      while (1)
                      {
                        if ((v243[v109] & 0x10000020) == 0x20)
                        {
                          uint64_t v58 = *(v107 - 1);
                          if (v28 < 2
                            || (uint64_t v111 = *v107, *v107 != 1)
                            && (v111 == 2 ? (int v112 = v106) : (int v112 = 0), v112 != 1
                                                                     || *(_WORD *)(v104 + 2 * v58 + 2) != 42)
                            || (int v113 = *(unsigned __int16 *)(v104 + 2 * v58),
                                uint64_t v34 = v225,
                                (v113 - 8208) >= 2)
                            && (v113 != 45 ? (BOOL v114 = v113 == 65293) : (BOOL v114 = 1), !v114))
                          {
                            v233[0] = *(v107 - 1);
LABEL_177:
                            if (v103 >= 9)
                            {
                              if (v102 - v100 <= 63 && (v102 - v100) / v103 > 2)
                              {
                                if (v108) {
                                  uint64_t v139 = v109;
                                }
                                else {
                                  uint64_t v139 = SubTokensOfCompound - 1;
                                }
                                if ((v243[v139] & 0x20) != 0)
                                {
                                  if (v28 < 2
                                    || (v147 = &v247 + 2 * v139, v147[1] != 1)
                                    || (int v148 = *(unsigned __int16 *)(v236 + 2 * v233[1] + 2 * *v147),
                                        (v148 - 8208) >= 2)
                                    && (v148 != 45 ? (BOOL v149 = v148 == 65293) : (BOOL v149 = 1), !v149))
                                  {
                                    --v139;
                                  }
                                }
                                uint64_t v150 = 0;
                                long long v151 = &v210[2 * v139];
                                uint64_t v115 = v139 - 7;
                                char v152 = &v209[v139];
                                long long v153 = &v208[2 * v97];
                                long long v154 = &v207[v97];
                                do
                                {
                                  uint64_t v155 = *v154--;
                                  *v152-- = v155;
                                  *(_OWORD *)&v151[v150] = *(_OWORD *)&v153[v150];
                                  v150 -= 2;
                                }
                                while (v150 != -10);
                              }
                              else
                              {
                                *(void *)&long long v234 = v100;
                                *((void *)&v234 + 1) = v102 - v100;
                                uint64_t v115 = v103 + v97;
                              }
LABEL_183:
                              *((void *)&v232 + 1) = v115;
                              if (v115) {
                                goto LABEL_124;
                              }
                              goto LABEL_184;
                            }
LABEL_181:
                            *(void *)&long long v235 = v110 | v99;
LABEL_182:
                            uint64_t v115 = v97 + 1;
                            goto LABEL_183;
                          }
                          v110 |= 0x10uLL;
                        }
                        else
                        {
                          ++v103;
                          uint64_t v58 = *(v107 - 1);
                          uint64_t v111 = *v107;
                        }
                        uint64_t v102 = v111 + v58;
                        BOOL v108 = ++v109 < SubTokensOfCompound;
                        v107 += 2;
                        if (SubTokensOfCompound == v109)
                        {
                          uint64_t v58 = v101;
                          uint64_t v109 = SubTokensOfCompound;
                          goto LABEL_177;
                        }
                      }
                    }
                    uint64_t v58 = *((void *)&v234 + 1) + v234;
                    v233[0] = *((void *)&v234 + 1) + v234;
                    goto LABEL_182;
                  }
                  uint64_t v93 = v233[2];
                  unint64_t v32 = v224;
                }
                *(void *)&long long v232 = 1;
                uint64_t v247 = 0;
                uint64_t v248 = v93;
                uint64_t SubTokensOfCompound = 1;
                v243[0] = 0;
                goto LABEL_147;
              }
            }
            uint64_t v181 = 0;
            char v182 = v200;
            do
            {
              if (*v182)
              {
                uint64_t v183 = v225;
                *(_OWORD *)(v225 + 88) = *(_OWORD *)&v233[1];
                *(void *)(v183 + 104) = v62;
                if (v220)
                {
                  ((void (*)(uint64_t, void, uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t, void *))v220)(*(void *)(v211 + 8) + 2 * *(v182 - 1), *v182, 2, v218, &v247, 1, 4294959088, v243);
                  unint64_t v32 = v224;
                  uint64_t DerivedTokens = v232;
                }
              }
              ++v181;
              v182 += 2;
            }
            while (v181 < DerivedTokens);
            goto LABEL_133;
          }
          BOOL v37 = &v247 + 2 * v35;
          long long *v32 = *(_OWORD *)v37;
          uint64_t v38 = v243[v35];
          *(void *)&long long v235 = v38;
          if (v35)
          {
            uint64_t v39 = v35 + 2;
            if (v35 + 2 < v36)
            {
              uint64_t v40 = v35 - 1;
              uint64_t v41 = v35 - 2;
              if (v35 < 2
                || (v243[v41] & 0x20) == 0
                || *(&v247 + 2 * v41 + 1) + *(&v247 + 2 * v41) != *(&v247 + 2 * v40))
              {
                uint64_t v42 = v38 & 0x20;
                if ((v243[v40] & 0x30) == 0 && v42 != 0 && v37[1] == 1)
                {
                  uint64_t v44 = v233[1];
                  uint64_t v45 = v236 + 2 * v233[1];
                  if (*(_WORD *)(v45 + 2 * *v37) == 46)
                  {
                    uint64_t v46 = v35 + 1;
                    if ((v243[v35 + 1] & 0x30) == 0 && (v243[v39] & 0x20) != 0)
                    {
                      uint64_t v47 = &v247 + 2 * v39;
                      if (v47[1] == 1 && *(_WORD *)(v45 + 2 * *v47) == 46)
                      {
                        memset(v239, 0, 512);
                        uint64_t v48 = &v247 + 2 * v40;
                        uint64_t v49 = v48[1];
                        long long v199 = v48;
                        if (v49 > 255)
                        {
                          uint64_t v51 = 0;
                        }
                        else
                        {
                          uint64_t v50 = v49;
                          __memcpy_chk();
                          uint64_t v51 = v50;
                        }
                        uint64_t v52 = &v206[2 * v35];
                        uint64_t v53 = &v205[v35];
                        while ((*(unsigned char *)(v53 - 1) & 0x30) == 0)
                        {
                          if ((*(unsigned char *)v53 & 0x20) == 0) {
                            goto LABEL_45;
                          }
                          if (*v52 != 1) {
                            goto LABEL_45;
                          }
                          if (*(_WORD *)(v45 + 2 * *(v52 - 1)) != 46) {
                            goto LABEL_45;
                          }
                          uint64_t v54 = *(v52 - 2);
                          uint64_t v55 = v54 + v51;
                          if (v54 + v51 > 255) {
                            goto LABEL_45;
                          }
                          memcpy((char *)v239 + 2 * v51, (const void *)(v45 + 2 * *(v52 - 3)), 2 * v54);
                          v46 += 2;
                          v39 += 2;
                          v52 += 4;
                          v53 += 2;
                          uint64_t v51 = v55;
                          if (v39 >= v36)
                          {
                            uint64_t v46 = v39 - 1;
                            goto LABEL_46;
                          }
                        }
                        uint64_t v46 = v39 - 1;
LABEL_45:
                        uint64_t v55 = v51;
LABEL_46:
                        uint64_t v56 = *v199 + v44;
                        uint64_t v57 = *(&v247 + 2 * v46 - 2) - v56 + *(&v247 + 2 * v46 - 1);
                        uint64_t v34 = v225;
                        *(void *)(v225 + 88) = v56;
                        *(void *)(v34 + 96) = v57;
                        *(void *)(v34 + 104) = *((void *)&v231 + 1) - 1;
                        uint64_t v29 = v218;
                        if (v220) {
                          ((void (*)(_DWORD *, uint64_t, void, uint64_t, uint64_t *))v220)(v239, v55, 0, v218, &v247);
                        }
                        unint64_t v32 = v224;
                      }
                    }
                  }
                }
              }
            }
          }
          uint64_t v58 = v233[0];
          if (*((void *)&v234 + 1) + (void)v234 > v233[0]) {
            break;
          }
          DWORD2(v235) = 1;
          uint64_t v59 = *((void *)&v232 + 1);
          uint64_t v35 = ++*((void *)&v232 + 1);
          if (v59 < 1) {
            goto LABEL_123;
          }
          if (v28 >= 2 && *((void *)&v234 + 1) == 1)
          {
            int v60 = *(unsigned __int16 *)(v236 + 2 * v233[1] + 2 * v234);
            BOOL v61 = (v60 - 8208) < 2 || v60 == 65293;
            if (v61 || v60 == 45) {
              continue;
            }
          }
          goto LABEL_124;
        }
        if ((v235 & 0x20) != 0)
        {
          if (v28 < 2
            || *((void *)&v234 + 1) != 1
            || (int v86 = *(unsigned __int16 *)(v236 + 2 * v233[1] + 2 * v234), (v86 - 8208) >= 2)
            && (v86 != 45 ? (BOOL v87 = v86 == 65293) : (BOOL v87 = 1), !v87))
          {
            v233[0] = *((void *)&v234 + 1) + v234;
            uint64_t v35 = *((void *)&v232 + 1) + 1;
            uint64_t v58 = *((void *)&v234 + 1) + v234;
            goto LABEL_122;
          }
        }
        uint64_t v76 = *(&v247 + 2 * *((void *)&v232 + 1));
        uint64_t v77 = *(&v247 + 2 * (void)v232 - 1) + *(&v247 + 2 * (void)v232 - 2);
        v233[0] = v77;
        if ((uint64_t)v232 <= *((uint64_t *)&v232 + 1))
        {
          uint64_t v58 = v77;
LABEL_121:
          uint64_t v35 = *((void *)&v232 + 1) + 1;
          goto LABEL_122;
        }
        uint64_t v78 = 0;
        uint64_t v79 = 0;
        char v80 = &v213[2 * *((void *)&v232 + 1)];
        BOOL v81 = 1;
        uint64_t v82 = *((void *)&v232 + 1);
        while (2)
        {
          uint64_t v58 = *(v80 - 1);
          if ((v243[v82] & 0x10000020) != 0x20)
          {
            uint64_t v85 = *v80;
            goto LABEL_105;
          }
          if (v28 < 2 || *v80 != 1) {
            goto LABEL_116;
          }
          int v83 = *(unsigned __int16 *)(v236 + 2 * v233[1] + 2 * v58);
          if ((v83 - 8208) < 2)
          {
            uint64_t v85 = 1;
LABEL_105:
            ++v79;
            uint64_t v78 = v85 + v58;
            BOOL v81 = ++v82 < (uint64_t)v232;
            v80 += 2;
            if ((void)v232 == v82)
            {
              uint64_t v58 = v77;
              uint64_t v79 = v232 - *((void *)&v232 + 1);
              uint64_t v82 = v232;
              goto LABEL_117;
            }
            continue;
          }
          break;
        }
        BOOL v84 = v83 == 45 || v83 == 65293;
        uint64_t v85 = 1;
        if (v84) {
          goto LABEL_105;
        }
LABEL_116:
        v233[0] = *(v80 - 1);
LABEL_117:
        if ((unint64_t)v79 < 9) {
          goto LABEL_121;
        }
        if (v78 - v76 <= 63 && (v78 - v76) / v79 > 2)
        {
          if (v81) {
            uint64_t v140 = v82;
          }
          else {
            uint64_t v140 = v232 - 1;
          }
          if ((v243[v140] & 0x20) != 0)
          {
            if (v28 < 2
              || (long long v168 = &v247 + 2 * v140, v168[1] != 1)
              || (int v169 = *(unsigned __int16 *)(v236 + 2 * v233[1] + 2 * *v168), (v169 - 8208) >= 2)
              && (v169 != 45 ? (BOOL v170 = v169 == 65293) : (BOOL v170 = 1), !v170))
            {
              --v140;
            }
          }
          uint64_t v171 = 0;
          v172 = &v210[2 * v140];
          uint64_t v35 = v140 - 7;
          char v173 = &v209[v140];
          int v174 = &v208[2 * *((void *)&v232 + 1)];
          __int16 v175 = &v207[*((void *)&v232 + 1)];
          do
          {
            uint64_t v176 = *v175--;
            *v173-- = v176;
            *(_OWORD *)&v172[v171] = *(_OWORD *)&v174[v171];
            v171 -= 2;
          }
          while (v171 != -10);
        }
        else
        {
          *(void *)&long long v234 = v76;
          *((void *)&v234 + 1) = v78 - v76;
          uint64_t v35 = v79 + *((void *)&v232 + 1);
        }
LABEL_122:
        *((void *)&v232 + 1) = v35;
        DWORD2(v235) = 0;
LABEL_123:
        if (v35)
        {
LABEL_124:
          uint64_t v88 = v234;
          uint64_t v89 = v233[1];
          uint64_t v90 = v233[2];
          uint64_t v91 = v233[2] - v234;
          *(void *)(v34 + 88) = v234 + v233[1];
          *(void *)(v34 + 96) = v91;
          goto LABEL_185;
        }
LABEL_184:
        uint64_t v89 = v233[1];
        uint64_t v90 = v233[2];
        *(void *)(v34 + 88) = v233[1];
        *(void *)(v34 + 96) = v90;
        uint64_t v88 = v234;
LABEL_185:
        uint64_t v116 = v236;
        *(void *)(v34 + 104) = *((void *)&v231 + 1) - 1;
        uint64_t v117 = (unsigned __int16 *)(v116 + 2 * v89 + 2 * v88);
        uint64_t v118 = v58 - v88;
        int v119 = *v117;
        if ((v119 - 12441) > 1)
        {
          if (v90 != 1 || (v119 & 0xF800 | 0x400) != 0xDC00) {
            goto LABEL_188;
          }
          continue;
        }
        break;
      }
      if (!v118) {
        continue;
      }
      break;
    }
    while (*v117 - 12441 <= 1)
    {
      ++v117;
      if (!--v118) {
        goto LABEL_16;
      }
    }
LABEL_188:
    if (DWORD2(v235))
    {
      if (v220)
      {
        char v120 = ((uint64_t (*)(unsigned __int16 *, uint64_t, void, uint64_t))v220)(v117, v118, 0, v29);
        unint64_t v32 = v224;
        char v121 = v120;
        if (v120) {
          goto LABEL_241;
        }
      }
      else
      {
        char v121 = 0;
      }
LABEL_236:
      if (*(void *)(v34 + 8) == v222
        && (void)v232 == *((void *)&v232 + 1)
        && *((uint64_t *)&v231 + 1) < (uint64_t)v231)
      {
        size_t v135 = (uint64_t *)&v252[*((void *)&v231 + 1)];
        uint64_t v136 = *(v135 - 1) + *(v135 - 2);
        if (v136 < *v135)
        {
          char v137 = handle_missing_punctuation(v236, v136, *v135, v216, v29, 0);
          unint64_t v32 = v224;
          char v121 = v137;
        }
      }
      goto LABEL_241;
    }
    if ((v223 & 0x10) != 0 && (v233[3] & 0x40001000) != 0 && v118 >= 2)
    {
      uint64_t v124 = 0;
      char v125 = 0;
      uint64_t v126 = v216;
      while (1)
      {
        uint64_t v127 = &v117[v124];
        if ((*v127 & 0xFC00) == 0xD800)
        {
          if (++v124 >= v118 || (v117[v124] & 0xFC00) != 0xDC00)
          {
LABEL_213:
            if (v125) {
              char v121 = v125;
            }
            else {
              char v121 = 0;
            }
            if (v125)
            {
              uint64_t v34 = v225;
            }
            else
            {
              uint64_t v34 = v225;
              if (v220)
              {
                char v123 = ((uint64_t (*)(unsigned __int16 *, uint64_t, uint64_t, uint64_t))v220)(v117, v118, 3, v29);
LABEL_219:
                char v121 = v123;
              }
            }
            goto LABEL_220;
          }
          if (v126)
          {
            uint64_t v128 = 2;
LABEL_209:
            char v125 = v126((uint64_t)v127, v128, v235, v29);
            goto LABEL_211;
          }
        }
        else if (v126)
        {
          uint64_t v128 = 1;
          goto LABEL_209;
        }
        char v125 = 0;
LABEL_211:
        if (++v124 >= v118 || (v125 & 1) != 0) {
          goto LABEL_213;
        }
      }
    }
    if (v216)
    {
      char v123 = v216((uint64_t)v117, v118, v235, v29);
      goto LABEL_219;
    }
    char v121 = 0;
LABEL_220:
    if (v219)
    {
      if (v230 < 128)
      {
        uint64_t v129 = (uint64_t)((uint64_t)v117 - v236) >> 1;
        if (v230)
        {
          uint64_t v130 = v226[2 * v230 - 1] + v226[2 * v230 - 2];
          if (v130 < v129) {
            handle_missing_punctuation(v236, v130, (uint64_t)((uint64_t)v117 - v236) >> 1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sentenceTokenizerMissingPunctuation, (uint64_t)v226, 1);
          }
        }
      }
      else
      {
        v219(v236, v226, v214);
        uint64_t v230 = 0;
        uint64_t v129 = (uint64_t)((uint64_t)v117 - v236) >> 1;
      }
      if (v118)
      {
        uint64_t v228 = v129;
        uint64_t v229 = v118;
        char v131 = &v226[2 * v230];
        uint64_t *v131 = v129;
        v131[1] = v118;
        v226[v230++ + 258] = v235;
      }
      size_t v132 = &v117[v118];
      if ((unint64_t)v132 >= (uint64_t)v236 + 2 * v215) {
        goto LABEL_233;
      }
      int v133 = *v132;
      switch(v133)
      {
        case 9:
          goto LABEL_233;
        case 8200:
          goto LABEL_233;
        case 12288:
          goto LABEL_233;
      }
      CFCharacterSetRef Predefined = CFCharacterSetGetPredefined(kCFCharacterSetNewline);
      if (CFCharacterSetIsCharacterMember(Predefined, v133)) {
        goto LABEL_233;
      }
      if (*((void *)&v232 + 1) == (void)v232)
      {
        uint64_t v29 = v218;
        unint64_t v32 = v224;
        if (*((uint64_t *)&v231 + 1) >= (uint64_t)v231
          || (unint64_t v141 = v236 + 2 * *(void *)&v252[*((void *)&v231 + 1)], (unint64_t)v132 >= v141))
        {
          uint64_t v34 = v225;
          if (v121) {
            goto LABEL_241;
          }
          goto LABEL_236;
        }
        uint64_t v142 = *((void *)&v252[*((void *)&v231 + 1) - 1] + 1) + *(void *)&v252[*((void *)&v231 + 1) - 1];
        uint64_t v143 = 2 * v142 + 2;
        while (1)
        {
          int v144 = *v132;
          if (v144 == 9 || v144 == 8200) {
            break;
          }
          if (v144 == 12288) {
            break;
          }
          CFCharacterSetRef v146 = CFCharacterSetGetPredefined(kCFCharacterSetNewline);
          if (CFCharacterSetIsCharacterMember(v146, v144)) {
            break;
          }
          ++v142;
          size_t v132 = (unsigned __int16 *)(v236 + v143);
          v143 += 2;
          if ((uint64_t)v236 + 2 * v142 >= v141) {
            goto LABEL_270;
          }
        }
LABEL_233:
        uint64_t v29 = v218;
        ((void (*)(void, void *, uint64_t *, uint64_t, uint64_t))v219)(v236, v226, v214, v230, v218);
        uint64_t v230 = 0;
      }
      else
      {
LABEL_270:
        uint64_t v29 = v218;
      }
      uint64_t v34 = v225;
    }
    unint64_t v32 = v224;
    if ((v121 & 1) == 0) {
      goto LABEL_236;
    }
LABEL_241:
    if ((v121 & 1) == 0)
    {
      if ((v121 & 2) != 0 && !DWORD2(v235)) {
        v233[3] &= ~0x400uLL;
      }
      continue;
    }
    break;
  }
LABEL_337:
  v184 = v212;
  uint64_t v185 = v215;
  if (v219)
  {
    uint64_t v186 = v230;
    if (v230)
    {
      if (v230 <= 127)
      {
        uint64_t v187 = v226[2 * v230 - 1] + v226[2 * v230 - 2];
        uint64_t v188 = v236;
        if (v187 < v215)
        {
          handle_missing_punctuation(v236, v187, v215, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sentenceTokenizerMissingPunctuation, (uint64_t)v226, 1);
          uint64_t v188 = v236;
          uint64_t v186 = v230;
        }
        ((void (*)(uint64_t, void *, uint64_t *, uint64_t, uint64_t))v219)(v188, v226, v214, v186, v218);
        uint64_t v230 = 0;
      }
    }
  }
LABEL_359:
  if (v184) {
    v184(v236, v185, v218);
  }
  if ((void)v237) {
    CFRelease((CFTypeRef)v237);
  }
  if (*((void *)&v236 + 1)) {
    free(*((void **)&v236 + 1));
  }
}

uint64_t _CITokenizerGetQueryTokensStart(uint64_t result, uint64_t a2, void *a3)
{
  a3[5] = result;
  a3[2] = result;
  a3[3] = result + 2 * a2;
  return result;
}

uint64_t _CITokenizerGetQueryTokens(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2)
  {
    uint64_t v5 = (_WORD *)a1;
    if (*(void *)(a4 + 16) <= a1)
    {
      uint64_t v6 = a2;
      unint64_t v7 = *(void *)(a4 + 24);
      if (v7 > a1 && a1 + 2 * a2 <= v7)
      {
        CFStringRef v9 = (_WORD *)(a1 - 2);
        unint64_t v10 = *(void *)(a4 + 40);
        if (a1 - 2 >= v10)
        {
          uint64_t v11 = (_WORD *)(a1 - 2);
          while (1)
          {
            int v12 = (unsigned __int16)*v11--;
            if (v12 != 42) {
              break;
            }
            if ((unint64_t)v11 > v10 && *v11 == 92) {
              goto LABEL_15;
            }
            --v5;
            ++v6;
            CFStringRef v9 = v11;
            if ((unint64_t)v11 < v10)
            {
              uint64_t v5 = v11 + 1;
              goto LABEL_15;
            }
          }
          uint64_t v5 = v9 + 1;
        }
LABEL_15:
        uint64_t v13 = *(void *)(a4 + 48);
        if (v13)
        {
          uint64_t v14 = *(void *)(a4 + 32);
          uint64_t v15 = (_WORD *)(v14 + 2 * v13);
          if (v15 < v5)
          {
            uint64_t v16 = v13 + 1;
            do
            {
              if (*v15 != 42) {
                break;
              }
              ++v15;
              *(void *)(a4 + 48) = v16++;
            }
            while (v15 < v5);
            uint64_t v13 = v16 - 1;
          }
          unsigned int v17 = (_WORD *)(v14 + 2 * v13);
          if (v17 == v5)
          {
            if (*(v17 - 1) == 42 && (v13 < 2 || *(_WORD *)(v14 + 2 * v13 - 4) != 92))
            {
              *(void *)(a4 + 48) = v13 + v6;
              return 0;
            }
          }
          else
          {
            (*(void (**)(void))a4)();
            uint64_t v13 = 0;
            uint64_t v18 = *(void *)(a4 + 32) + 2 * *(void *)(a4 + 48);
            *(void *)(a4 + 32) = 0;
            *(void *)(a4 + 40) = v18;
            *(void *)(a4 + 48) = 0;
          }
        }
        uint64_t v19 = &v5[v6];
        if (*(v19 - 1) == 42 && (v6 < 2 || v5[v6 - 2] != 92)
          || (unint64_t)v19 < *(void *)(a4 + 24) && *v19 == 42)
        {
          CFStringRef v20 = *(_WORD **)(a4 + 32);
          if (!v20)
          {
            *(void *)(a4 + 32) = v5;
            CFStringRef v20 = v5;
          }
          *(void *)(a4 + 40) = &v20[v13 + v6];
          *(void *)(a4 + 48) = v13 + v6;
        }
        else
        {
          if (v13)
          {
            (*(void (**)(void, uint64_t, void))a4)(*(void *)(a4 + 32), v13, *(void *)(a4 + 8));
            uint64_t v21 = *(void *)(a4 + 32) + 2 * *(void *)(a4 + 48);
            *(void *)(a4 + 32) = 0;
            *(void *)(a4 + 40) = v21;
            *(void *)(a4 + 48) = 0;
          }
          (*(void (**)(_WORD *, uint64_t, void))a4)(v5, v6, *(void *)(a4 + 8));
          *(void *)(a4 + 40) = v19;
        }
      }
    }
  }
  return 0;
}

uint64_t _CITokenizerGetQueryTokensEnd(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 + 48);
  if (v3) {
    return (*(uint64_t (**)(void, uint64_t, void))a3)(*(void *)(a3 + 32), v3, *(void *)(a3 + 8));
  }
  return result;
}

void CITokenizerGetTokensNew(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void (*a9)(uint64_t, uint64_t), uint64_t a10)
{
  uint64_t v10 = MEMORY[0x1F4188790](a1);
  int v12 = v11;
  uint64_t v14 = v13;
  uint64_t v16 = v15;
  uint64_t v18 = v17;
  uint64_t v20 = v19;
  CFStringRef v22 = v21;
  uint64_t v24 = v23;
  uint64_t v25 = v10;
  bzero(&cf, 0x1810uLL);
  CITokenizerSetLocale(v25, v22, 0);
  _CITokenizerGetTokens(v25, *(void *)(v25 + 8), v24, (uint64_t)&cf, v20, v18, v16, v14, v12, a9, 0, a10);
  if (cf) {
    CFRelease(cf);
  }
  if (v27) {
    free(v27);
  }
}

void CITokenizerGetTokensTranscriptionsOptional(uint64_t a1, uint64_t a2, const __CFString *a3, int a4, int a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  CITokenizerSetLocale(a1, a3, 0);
  v19[0] = a8;
  v19[1] = 0;
  v19[2] = a9;
  unsigned int v17 = a4 != 0;
  if (a5) {
    v17 |= 2u;
  }
  if (a6) {
    uint64_t v18 = v17 | 0x20;
  }
  else {
    uint64_t v18 = v17;
  }
  CITokenizerGetTokensNew(a1, a2, (uint64_t)a3, v18, a7, (uint64_t)getTokensWrapper, (uint64_t)getSubTokensWrapper, 0, 0, (uint64_t)v19);
}

uint64_t getTokensWrapper(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void, void))a4)(a1, a2, 0, *(void *)(a4 + 16));
}

uint64_t getSubTokensWrapper(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))a4)(a1, a2, 1, *(void *)(a4 + 16));
}

void CITokenizerGetTokens(uint64_t a1, uint64_t a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  CITokenizerSetLocale(a1, a3, 0);
  v13[0] = a6;
  v13[1] = a5;
  _OWORD v13[2] = a7;
  CITokenizerGetTokensNew(a1, a2, (uint64_t)a3, *(_DWORD *)(a1 + 32) & 0x18, (uint64_t)getPreTokenizerCallback, (uint64_t)getTokensWrapper, (uint64_t)getSubTokensWrapper, 0, 0, (uint64_t)v13);
}

uint64_t getPreTokenizerCallback(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, void))(a3 + 8);
  if (v3) {
    return v3(result, a2, *(void *)(a3 + 16));
  }
  return result;
}

unsigned char *CIDecomposeCFString(const __CFString *cf, unsigned char *a2, unint64_t a3, size_t a4)
{
  uint64_t v21 = 0;
  CFIndex v4 = a3 - a4;
  if (a3 < a4) {
    CIDecomposeCFString_cold_1();
  }
  if (!cf) {
    return 0;
  }
  CFTypeID v8 = CFGetTypeID(cf);
  if (v8 != CFStringGetTypeID()) {
    return 0;
  }
  CFIndex Length = CFStringGetLength(cf);
  CFIndex MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
  CharactersPtr = CFStringGetCharactersPtr(cf);
  if (CharactersPtr)
  {
    int v12 = (unsigned __int16 *)CharactersPtr;
    uint64_t v13 = 0;
    goto LABEL_8;
  }
  uint64_t v14 = (UniChar *)malloc_type_malloc(2 * Length, 0x1000040BDFB0063uLL);
  if (!v14) {
    return 0;
  }
  int v12 = v14;
  v22.locatiouint64_t n = 0;
  v22.length = Length;
  CFStringGetCharacters(cf, v22, v14);
  uint64_t v13 = v12;
LABEL_8:
  uint64_t v15 = a2;
  if (MaximumSizeForEncoding >= v4)
  {
    uint64_t v16 = malloc_type_malloc(MaximumSizeForEncoding + 1 + a4, 0xD7682243uLL);
    uint64_t v15 = v16;
    if (a2)
    {
      if (a4) {
        memcpy(v16, a2, a4);
      }
    }
  }
  if (v15)
  {
    int v17 = utf8_encodestr(v12, 2 * Length, &v15[a4], &v21, MaximumSizeForEncoding + 1, 47, 4);
    if (v17) {
      uint64_t v18 = v15;
    }
    else {
      uint64_t v18 = 0;
    }
    if (v17) {
      uint64_t v19 = 0;
    }
    else {
      uint64_t v19 = v15;
    }
  }
  else
  {
    uint64_t v18 = 0;
    uint64_t v19 = 0;
  }
  free(v13);
  if (v18 && v18 != a2) {
    free(v18);
  }
  return v19;
}

uint64_t handle_missing_punctuation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a5, int a6)
{
  if (a2 >= a3) {
    return 0;
  }
  uint64_t v9 = a2;
  unsigned int v11 = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  do
  {
    UChar32 v15 = *(unsigned __int16 *)(a1 + 2 * v9);
    if (u_isUWhiteSpace(v15))
    {
      if (v13)
      {
        if (a4)
        {
          unsigned int v11 = a4(a1 + 2 * v14, v13, v12, a5);
          uint64_t v14 = 0;
          uint64_t v13 = 0;
          uint64_t v12 = 0;
          goto LABEL_19;
        }
        uint64_t v14 = 0;
        uint64_t v13 = 0;
        uint64_t v12 = 0;
      }
      else
      {
        if (!a6) {
          goto LABEL_8;
        }
        if (a4)
        {
          unsigned int v11 = a4(a1 + 2 * v14, 1, 2048, a5);
LABEL_8:
          uint64_t v13 = 0;
          goto LABEL_19;
        }
        uint64_t v13 = 0;
      }
      unsigned int v11 = 0;
    }
    else
    {
      if (((1 << u_charType(v15)) & 0x30F80000) != 0) {
        v12 |= 0x20uLL;
      }
      if (!v13) {
        uint64_t v14 = v9;
      }
      ++v13;
    }
LABEL_19:
    ++v9;
  }
  while (a3 != v9);
  if (v13) {
    uint64_t result = 0;
  }
  else {
    uint64_t result = v11;
  }
  if (v13 && a4)
  {
    return a4(a1 + 2 * v14, v13, v12, a5);
  }
  return result;
}

uint64_t sentenceTokenizerMissingPunctuation(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    uint64_t v4 = a4[387];
    if (v4 == -1) {
      uint64_t v5 = 0;
    }
    else {
      uint64_t v5 = a4[388] + v4;
    }
    a4[387] = v5;
    a4[388] = a2;
    if ((a3 & 0x800) == 0)
    {
      uint64_t v6 = a4[389];
      if (v6 <= 127)
      {
        *(_OWORD *)&a4[2 * v6] = *(_OWORD *)(a4 + 387);
        a4[a4[389]++ + 258] = a3;
      }
    }
  }
  return 0;
}

unsigned char *fixPath(unsigned char *a1, unsigned char *a2)
{
  char v2 = 0;
  uint64_t v3 = a2;
  while (1)
  {
    int v4 = *a1;
    if (v4 == 47)
    {
      char v2 = 1;
      goto LABEL_10;
    }
    if (!*a1) {
      break;
    }
    if (v3 - a2 > 1022) {
      return 0;
    }
    if (v2)
    {
      *v3++ = 47;
      if (v3 - a2 > 1022) {
        return 0;
      }
      LOBYTE(v4) = *a1;
    }
    char v2 = 0;
    *v3++ = v4;
LABEL_10:
    ++a1;
  }
  if (v3 == a2 && (v2 & 1) != 0)
  {
    *a2 = 47;
    uint64_t v3 = a2 + 1;
  }
  *uint64_t v3 = 0;
  return a2;
}

char *separate_path_parent_child(char *__source, char *__s)
{
  if (__s == __source) {
    size_t v3 = strlen(__s);
  }
  else {
    size_t v3 = strlcpy(__s, __source, 0x400uLL);
  }
  size_t v4 = v3;
  size_t v5 = v3 - 1;
  if (v3 - 1 > 0x3FE) {
    return 0;
  }
  uint64_t v6 = &__s[v5];
  if (__s[v5] != 47 || __s[v3])
  {
    uint64_t v6 = strrchr(__s, 47);
    if (!v6)
    {
      if (v4 <= 0x3FE)
      {
        unint64_t v7 = __s + 1;
        memmove(__s + 1, __s, v4 + 1);
        *__s = 0;
        return v7;
      }
      return 0;
    }
  }
  if (v6 == __s)
  {
    if (v4 <= 0x3FE)
    {
      unint64_t v7 = __s + 2;
      memmove(__s + 2, __s + 1, v4);
      *(_WORD *)__s = 47;
      return v7;
    }
    return 0;
  }
  *uint64_t v6 = 0;
  return v6 + 1;
}

char *partial_path(unsigned char *a1, const char *a2, char *__dst)
{
  size_t v3 = __dst;
  size_t v4 = a2;
  int v6 = *a1;
  if (*a1)
  {
    unint64_t v7 = a1 + 1;
    while (v6 == *(unsigned __int8 *)a2)
    {
      ++a2;
      int v8 = *v7++;
      int v6 = v8;
      if (!v8) {
        goto LABEL_5;
      }
    }
    size_t v3 = 0;
    size_t v9 = -(uint64_t)v4;
  }
  else
  {
LABEL_5:
    size_t v9 = a2 - v4;
    if (a2 && v9 <= 0x3FF && (!a1[v9] && !*a2 || a1[v9 - 1] == 47 || (int v10 = *(unsigned __int8 *)a2, ++a2, v10 == 47))) {
      size_t v9 = strlcpy(__dst, a2, 0x400uLL);
    }
    else {
      size_t v3 = 0;
    }
  }
  if (v9 <= 0x3FF) {
    return v3;
  }
  else {
    return 0;
  }
}

const char *combine_paths(const char *__source, const char *a2, char *__dst)
{
  if (__source)
  {
    size_t v5 = __source;
    if (__source == __dst) {
      size_t v6 = 0;
    }
    else {
      size_t v6 = strlcpy(__dst, __source, 0x400uLL);
    }
    int v7 = *(unsigned __int8 *)a2;
    if (*a2)
    {
      if (strcmp(v5, "/"))
      {
        strlcat(__dst, "/", 0x400uLL);
        int v7 = *(unsigned __int8 *)a2;
      }
      if (v7 == 47) {
        int v8 = a2 + 1;
      }
      else {
        int v8 = a2;
      }
      size_t v6 = strlcat(__dst, v8, 0x400uLL);
    }
    if (v6 <= 0x3FF) {
      return __dst;
    }
    else {
      return 0;
    }
  }
  return __source;
}

uint64_t open_directory_nosymlink(char *a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6, int a7, int a8, unsigned __int16 a9)
{
  return x_openat(-2, a1, 537952260, a4, a5, a6, a7, a8, a9);
}

uint64_t x_openat(int a1, char *a2, int a3, int a4, int a5, int a6, int a7, int a8, unsigned __int16 a9)
{
  if ((a3 & 0x200) != 0) {
    uint64_t v12 = a9;
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t result = openat(a1, a2, a3, v12);
  if (result == -1)
  {
    uint64_t v14 = __error();
    uint64_t result = 0xFFFFFFFFLL;
    if ((a3 & 0x20000000) != 0 && *v14 == 22) {
      return openat(a1, a2, a3 & 0xDFFFFFFF, v12);
    }
  }
  return result;
}

unsigned char *faccurate_realpath(int a1, unsigned char *a2)
{
  char v2 = a2;
  if (fcntl(a1, 50, a2) < 0 || !*v2) {
    return 0;
  }
  return v2;
}

unsigned char *accurate_realpath(char *a1, unsigned char *a2)
{
  if (!a1) {
    return 0;
  }
  int v4 = open(a1, 32772);
  if ((v4 & 0x80000000) == 0) {
    goto LABEL_21;
  }
  if (*__error() != 13) {
    return 0;
  }
  if (geteuid()) {
    return 0;
  }
  memset(&v7, 0, sizeof(v7));
  if (md_stat_real(a1, &v7)) {
    return 0;
  }
  if (!v7.st_uid) {
    return 0;
  }
  *(void *)size_t v6 = 0;
  if (pthread_getugid_np(&v6[1], v6) || pthread_setugid_np(v7.st_uid, v7.st_gid)) {
    return 0;
  }
  int v4 = open(a1, 32772);
  if (pthread_setugid_np(v6[1], v6[0])) {
    accurate_realpath_cold_1();
  }
  if (v4 < 0) {
    return 0;
  }
LABEL_21:
  if (fcntl(v4, 50, a2) < 0 || !*a2) {
    a2 = 0;
  }
  close(v4);
  return a2;
}

uint64_t md_stat_real(char *a1, stat *a2)
{
  uint64_t v4 = fstatat(-2, a1, a2, 512);
  if (!v4 || *__error() != 22) {
    return v4;
  }

  return fstatat(-2, a1, a2, 0);
}

unsigned char *accurate_realpath_nocred(const char *a1, unsigned char *a2)
{
  if (!a1) {
    return 0;
  }
  int v3 = open(a1, 32772);
  if (v3 < 0) {
    return 0;
  }
  int v4 = v3;
  if (fcntl(v3, 50, a2) < 0 || !*a2) {
    a2 = 0;
  }
  close(v4);
  return a2;
}

uint64_t device_for_path()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  memset(&v2, 0, sizeof(v2));
  bzero(__s, 0x400uLL);
  if ((unint64_t)__strlcpy_chk() > 0x3FF) {
    return 0xFFFFFFFFLL;
  }
  while (md_stat_real(__s, &v2))
  {
    CFStringRef v0 = strrchr(__s, 47);
    if (!v0) {
      return 0xFFFFFFFFLL;
    }
    *CFStringRef v0 = 0;
  }
  return v2.st_dev;
}

char *device_subpath(char *a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (*a1 != 47) {
    return 0;
  }
  uint64_t v1 = a1;
  memset(&v8, 0, sizeof(v8));
  if (md_stat_real(a1, &v8)) {
    return 0;
  }
  dev_t st_dev = v8.st_dev;
  size_t v5 = v9;
  bzero(v9, 0x400uLL);
  while (1)
  {
    size_t v6 = strchr(v1, 47);
    if (!v6) {
      break;
    }
    stat v2 = v6 + 1;
    size_t v7 = v6 + 1 - v1;
    memcpy(v5, v1, v7);
    v5 += v7;
    *size_t v5 = 0;
    if (md_stat_real(v9, &v8)) {
      return 0;
    }
    uint64_t v1 = v2;
    if (v8.st_dev == st_dev) {
      return v2;
    }
  }
  return &v1[strlen(v1)];
}

uint64_t create_scratch_directory(char *a1, uid_t a2, gid_t a3, int a4)
{
  memset(&v12, 0, sizeof(v12));
  if (md_stat_real(a1, &v12))
  {
LABEL_2:
    if (!mkdir(a1, a4))
    {
      stat v8 = a1;
      mode_t v9 = a4;
      goto LABEL_11;
    }
    return 0xFFFFFFFFLL;
  }
  int v10 = v12.st_mode & 0xF000;
  if (v10 != 0x4000)
  {
    if (v10 == 0x8000)
    {
      if (unlink(a1)) {
        return 0xFFFFFFFFLL;
      }
      goto LABEL_2;
    }
    return 0;
  }
  if ((v12.st_mode & 0x1FF) == a4) {
    return 0;
  }
  mode_t v9 = a4;
  stat v8 = a1;
LABEL_11:
  if (chmod(v8, v9)) {
    return 0xFFFFFFFFLL;
  }
  if (chown(a1, a2, a3)) {
    return 0xFFFFFFFFLL;
  }
  else {
    return 0;
  }
}

uint64_t nosymlink_open(char *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, unsigned __int16 a9)
{
  if ((a2 & 0x200) != 0) {
    unsigned __int16 v9 = a9;
  }
  else {
    unsigned __int16 v9 = 0;
  }
  return x_openat(-1, a1, a2 | 0x20000000u, a4, a5, a6, a7, a8, v9);
}

uint64_t nosymlink_mkdir(unsigned char *a1, mode_t a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  bzero(__s, 0x400uLL);
  fixed = fixPath(a1, __s);
  if (!fixed || (size_t v5 = separate_path_parent_child(fixed, __s)) == 0)
  {
    uint64_t v14 = 0xFFFFFFFFLL;
    int v15 = 22;
LABEL_10:
    *__error() = v15;
    return v14;
  }
  unsigned int v11 = v5;
  int v12 = x_openat(-2, __s, 537952260, v6, v7, v8, v9, v10, v17);
  if ((v12 & 0x80000000) == 0)
  {
    int v13 = v12;
    uint64_t v14 = mkdirat(v12, v11, a2);
    if (v14) {
      int v15 = *__error();
    }
    else {
      int v15 = 0;
    }
    close(v13);
    goto LABEL_10;
  }
  return 0xFFFFFFFFLL;
}

uint64_t nosymlink_unlink(const char *a1)
{
  return x_unlinkat(-2, a1, 2048);
}

uint64_t x_unlinkat(int a1, const char *a2, int a3)
{
  uint64_t v6 = unlinkat(a1, a2, a3);
  if (!v6) {
    return v6;
  }
  int v7 = __error();
  if ((a3 & 0x800) == 0 || *v7 != 22) {
    return v6;
  }

  return unlinkat(a1, a2, a3 & 0xFFFFF7FF);
}

uint64_t nosymlink_rmdir(const char *a1)
{
  return x_unlinkat(-2, a1, 2176);
}

uint64_t nosymlink_rename(const char *a1, const char *a2)
{
  return x_renamex_np(a1, a2, 0x10u);
}

uint64_t x_renamex_np(const char *a1, const char *a2, unsigned int a3)
{
  uint64_t v6 = renamex_np(a1, a2, a3);
  if (!v6) {
    return v6;
  }
  int v7 = __error();
  if ((a3 & 0x10) == 0 || *v7 != 22) {
    return v6;
  }

  return renamex_np(a1, a2, a3 & 0xFFFFFFEF);
}

uint64_t md_savedir(uint64_t a1, int *a2)
{
  *a2 = -1;
  memset(&v5, 0, sizeof(v5));
  if (md_fstat_real(a1, &v5)) {
    return 0;
  }
  *a2 = open(".", 32772);
  if (!MEMORY[0x1C1884060](a1)) {
    return 1;
  }
  if ((*a2 & 0x80000000) == 0) {
    close(*a2);
  }
  uint64_t result = 0;
  *a2 = -1;
  return result;
}

uint64_t md_fstat_real(int a1, stat *a2)
{
  uint64_t v4 = fstatat(a1, 0, a2, 1536);
  if (!v4 || *__error() != 22) {
    return v4;
  }

  return fstat(a1, a2);
}

uint64_t md_resetdir(int a1)
{
  uint64_t result = MEMORY[0x1C1884060]();
  if ((a1 & 0x80000000) == 0)
  {
    return close(a1);
  }
  return result;
}

size_t md_fsgetpath_fast(char *a1, int a2, uint64_t a3)
{
  sprintf(a1, "/.vol/%llu/%llu", a2, a3);

  return strlen(a1);
}

uint64_t md_lstat_real(char *a1, stat *a2)
{
  uint64_t v4 = fstatat(-2, a1, a2, 544);
  if (!v4 || *__error() != 22) {
    return v4;
  }

  return fstatat(-2, a1, a2, 32);
}

uint64_t md_getattrlist_real(const char *a1, void *a2, void *a3, size_t a4, int a5)
{
  return getattrlist(a1, a2, a3, a4, a5 | 0x200);
}

uint64_t md_fgetattrlist_real(int a1, void *a2, void *a3, size_t a4, int a5)
{
  return fgetattrlist(a1, a2, a3, a4, a5 | 0x200);
}

uint64_t md_getattrlistat_real(int a1, const char *a2, void *a3, void *a4, size_t a5, int a6)
{
  return getattrlistat(a1, a2, a3, a4, a5, a6 | 0x200u);
}

uint64_t md_getattrlistbulk_real(int a1, void *a2, void *a3, size_t a4, int a5)
{
  return getattrlistbulk(a1, a2, a3, a4, a5 | 0x200u);
}

uint64_t x_fstatat(int a1, const char *a2, stat *a3, int a4)
{
  uint64_t v8 = fstatat(a1, a2, a3, a4);
  if (!v8) {
    return v8;
  }
  int v9 = __error();
  if ((a4 & 0x800) == 0 || *v9 != 22) {
    return v8;
  }

  return fstatat(a1, a2, a3, a4 & 0xFFFFF7FF);
}

uint64_t x_faccessat(int a1, const char *a2, int a3, int a4)
{
  uint64_t v8 = faccessat(a1, a2, a3, a4);
  if (!v8) {
    return v8;
  }
  int v9 = __error();
  if ((a4 & 0x800) == 0 || *v9 != 22) {
    return v8;
  }

  return faccessat(a1, a2, a3, a4 & 0xFFFFF7FF);
}

uint64_t x_fchownat(int a1, const char *a2, uid_t a3, gid_t a4, int a5)
{
  uint64_t v10 = fchownat(a1, a2, a3, a4, a5);
  if (!v10) {
    return v10;
  }
  unsigned int v11 = __error();
  if ((a5 & 0x800) == 0 || *v11 != 22) {
    return v10;
  }

  return fchownat(a1, a2, a3, a4, a5 & 0xFFFFF7FF);
}

uint64_t x_linkat(int a1, const char *a2, int a3, const char *a4, int a5)
{
  uint64_t v10 = linkat(a1, a2, a3, a4, a5);
  if (!v10) {
    return v10;
  }
  unsigned int v11 = __error();
  if ((a5 & 0x800) == 0 || *v11 != 22) {
    return v10;
  }

  return linkat(a1, a2, a3, a4, a5 & 0xFFFFF7FF);
}

uint64_t x_renameatx_np(int a1, const char *a2, int a3, const char *a4, unsigned int a5)
{
  uint64_t v10 = renameatx_np(a1, a2, a3, a4, a5);
  if (!v10) {
    return v10;
  }
  unsigned int v11 = __error();
  if ((a5 & 0x10) == 0 || *v11 != 22) {
    return v10;
  }

  return renameatx_np(a1, a2, a3, a4, a5 & 0xFFFFFFEF);
}

uint64_t x_getattrlist(const char *a1, void *a2, void *a3, size_t a4, unsigned int a5)
{
  uint64_t v10 = getattrlist(a1, a2, a3, a4, a5);
  if (!v10) {
    return v10;
  }
  unsigned int v11 = __error();
  if ((a5 & 0x800) == 0 || *v11 != 22) {
    return v10;
  }

  return getattrlist(a1, a2, a3, a4, a5 & 0xFFFFF7FF);
}

uint64_t x_getattrlistat(int a1, const char *a2, void *a3, void *a4, size_t a5, unint64_t a6)
{
  uint64_t v12 = getattrlistat(a1, a2, a3, a4, a5, a6);
  if (!v12) {
    return v12;
  }
  int v13 = __error();
  if ((a6 & 0x800) == 0 || *v13 != 22) {
    return v12;
  }

  return getattrlistat(a1, a2, a3, a4, a5, a6 & 0xFFFFFFFFFFFFF7FFLL);
}

uint64_t x2_openat(int a1, char *a2, int a3, int a4, int a5, int a6, int a7, int a8, unsigned __int16 a9)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  if (x2_openat_onceToken != -1) {
    dispatch_once(&x2_openat_onceToken, &__block_literal_global_1);
  }
  if (*a2 == 47)
  {
    uint64_t v12 = 0;
    int v13 = 47;
    while (v13 == a2[v12])
    {
      int v13 = aSystemVolumesD_0[++v12];
      if (v12 == 37)
      {
LABEL_20:
        BOOL v14 = 1;
        goto LABEL_21;
      }
    }
    uint64_t v15 = 0;
    int v16 = 47;
    while (v16 == a2[v15])
    {
      int v16 = aSystemVolumesD_1[++v15];
      if (v15 == 51) {
        goto LABEL_20;
      }
    }
    uint64_t v17 = 0;
    int v18 = 47;
    while (v18 == a2[v17])
    {
      int v18 = aPrivateVarDbSp[++v17];
      if (v17 == 31) {
        goto LABEL_20;
      }
    }
    uint64_t v19 = 0;
    int v20 = 47;
    while (v20 == a2[v19])
    {
      int v20 = aSystemVolumesD_2[++v19];
      if (v19 == 46) {
        goto LABEL_20;
      }
    }
    uint64_t v26 = 0;
    int v27 = 47;
    do
    {
      int v28 = a2[v26];
      BOOL v14 = v27 == v28;
      if (v27 != v28) {
        break;
      }
      int v27 = aPrivateVarDbSp_0[++v26];
    }
    while (v26 != 26);
  }
  else
  {
    BOOL v14 = 0;
  }
LABEL_21:
  if ((a3 & 0x400) != 0) {
    int v21 = a3 & 0xDFFFFBFF | 0x20000000;
  }
  else {
    int v21 = a3 | 0x20000000;
  }
  if ((v21 & 0x200) != 0) {
    unsigned __int16 v22 = a9;
  }
  else {
    unsigned __int16 v22 = 0;
  }
  uint64_t v23 = x_openat(a1, a2, v21, a4, a5, a6, a7, a8, v22);
  uint64_t v24 = v23;
  if ((v23 & 0x80000000) == 0)
  {
    memset(&v29, 0, sizeof(v29));
    if (fstat(v23, &v29)
      || v29.st_nlink != 1
      || (bzero(&v30, 0x878uLL), !v14)
      && (fstatfs(v24, &v30)
       || *(void *)&v30.f_fsid == x2_openat_sBootFSID
       || *(void *)&v30.f_fsid == x2_openat_sDataFSID))
    {
      close(v24);
      *__error() = 1;
      return 0xFFFFFFFFLL;
    }
    else if ((a3 & 0x400) != 0)
    {
      ftruncate(v24, 0);
    }
  }
  return v24;
}

uint64_t __x2_openat_block_invoke()
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  bzero(&v1, 0x878uLL);
  statfs("/", &v1);
  x2_openat_sBootFSID = (uint64_t)v1.f_fsid;
  uint64_t result = statfs("/System/Volumes/Data", &v1);
  x2_openat_sDataFSID = (uint64_t)v1.f_fsid;
  return result;
}

void *SILexiconCacheCreateWithOptions(const __CFDictionary *a1)
{
  uint64_t v2 = malloc_type_malloc(0x18uLL, 0x1020040D836DF85uLL);
  if (v2)
  {
    CFStringRef Value = (const void *)*MEMORY[0x1E4F1CFC8];
    if (a1)
    {
      uint64_t v4 = @"forceLoad";
      if (CFDictionaryContainsKey(a1, @"forceLoad")
        || (uint64_t v4 = @"forTesting", CFDictionaryContainsKey(a1, @"forTesting")))
      {
        CFStringRef Value = CFDictionaryGetValue(a1, v4);
      }
      stat v5 = CFDictionaryGetValue(a1, @"shouldCacheResources");
      uint64_t v6 = CFDictionaryGetValue(a1, @"shouldFilter");
      int v7 = (const void *)*MEMORY[0x1E4F1CFD0];
    }
    else
    {
      int v7 = (const void *)*MEMORY[0x1E4F1CFD0];
      stat v5 = (const void *)*MEMORY[0x1E4F1CFD0];
      uint64_t v6 = (const void *)*MEMORY[0x1E4F1CFD0];
    }
    v2[1] = SILocalizationCreateWithOptions(a1);
    *((unsigned char *)v2 + 17) = v5 == v7;
    *((unsigned char *)v2 + 16) = v6 == v7;
    *((unsigned char *)v2 + 18) = Value == v7;
    atomic_store(0, (unsigned int *)v2);
    atomic_fetch_add((atomic_uint *volatile)v2, 1u);
  }
  return v2;
}

atomic_uint *SILexiconCacheRetain(atomic_uint *result)
{
  if (result) {
    atomic_fetch_add(result, 1u);
  }
  return result;
}

void SILexiconCacheLoad(uint64_t a1, const __CFLocale *a2, uint64_t a3)
{
  uint64_t v27 = 0;
  int v28 = &v27;
  uint64_t v29 = 0x2000000000;
  uint64_t v30 = 0;
  if (logger(void)::token != -1) {
    dispatch_once(&logger(void)::token, &__block_literal_global_2);
  }
  os_signpost_id_t v6 = os_signpost_id_generate((os_log_t)logger(void)::log);
  if (logger(void)::token != -1) {
    dispatch_once(&logger(void)::token, &__block_literal_global_2);
  }
  unint64_t v7 = v6 - 1;
  if (v6 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    uint64_t v8 = logger(void)::log;
    if (os_signpost_enabled((os_log_t)logger(void)::log))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_1BDAD0000, v8, OS_SIGNPOST_INTERVAL_BEGIN, v6, "SILexiconCacheLoad", (const char *)&unk_1BDB2739A, buf, 2u);
    }
  }
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __SILexiconCacheLoad_block_invoke;
  block[3] = &unk_1E6349290;
  block[4] = &v27;
  if (SILexiconCacheLoad::onceToken != -1)
  {
    dispatch_once(&SILexiconCacheLoad::onceToken, block);
    if (a2) {
      goto LABEL_10;
    }
LABEL_12:
    int LanguageID = 0u;
    goto LABEL_13;
  }
  if (!a2) {
    goto LABEL_12;
  }
LABEL_10:
  int LanguageID = SILanguagesGetLanguageID(a2);
LABEL_13:
  unsigned __int8 v10 = atomic_load(&sLexiconsLoaded[LanguageID]);
  if ((v10 & 1) != 0
    || (atomic_store(1u, &sLexiconsLoaded[LanguageID]), LanguageID < 2)
    || LanguageID >= 59)
  {
    if (logger(void)::token != -1) {
      dispatch_once(&logger(void)::token, &__block_literal_global_2);
    }
    if (v7 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      int v18 = logger(void)::log;
      if (os_signpost_enabled((os_log_t)logger(void)::log))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl(&dword_1BDAD0000, v18, OS_SIGNPOST_INTERVAL_END, v6, "SILexiconCacheLoad", (const char *)&unk_1BDB2739A, buf, 2u);
      }
    }
    (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a3, v28[3]);
    uint64_t v19 = (const void *)v28[3];
    if (v19) {
      CFRelease(v19);
    }
  }
  else
  {
    unsigned int v11 = dispatch_group_create();
    uint64_t v12 = v11;
    if (*(unsigned char *)(a1 + 18))
    {
      dispatch_group_enter(v11);
      uint64_t v13 = *(void *)(a1 + 8);
      v24[0] = MEMORY[0x1E4F143A8];
      v24[1] = 0x40000000;
      v24[2] = __SILexiconCacheLoad_block_invoke_17;
      v24[3] = &unk_1E63492B8;
      v24[4] = &v27;
      v24[5] = a2;
      v24[6] = v12;
      SILocalizationLoad(v13, a2, (uint64_t)v24);
      dispatch_group_wait(v12, 0xFFFFFFFFFFFFFFFFLL);
      if (!v28[3])
      {
        Lexicouint64_t n = createLexicon(a2);
        StaticLexicouint64_t n = createStaticLexicon(a2);
        os_unfair_lock_lock((os_unfair_lock_t)&sLexiconLock);
        sDynamicLexicons[LanguageID] = Lexicon;
        sLexicons[LanguageID] = StaticLexicon;
        os_unfair_lock_unlock((os_unfair_lock_t)&sLexiconLock);
      }
      if (logger(void)::token != -1) {
        dispatch_once(&logger(void)::token, &__block_literal_global_2);
      }
      if (v7 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        int v16 = logger(void)::log;
        if (os_signpost_enabled((os_log_t)logger(void)::log))
        {
          *(_WORD *)buf = 0;
          _os_signpost_emit_with_name_impl(&dword_1BDAD0000, v16, OS_SIGNPOST_INTERVAL_END, v6, "SILexiconCacheLoad", (const char *)&unk_1BDB2739A, buf, 2u);
        }
      }
      (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a3, v28[3]);
      dispatch_release(v12);
      uint64_t v17 = (const void *)v28[3];
      if (v17) {
        CFRelease(v17);
      }
    }
    else
    {
      CFRetain(a2);
      dispatch_group_enter(v12);
      uint64_t v20 = *(void *)(a1 + 8);
      v22[0] = MEMORY[0x1E4F143A8];
      v22[1] = 0x40000000;
      v22[2] = __SILexiconCacheLoad_block_invoke_23;
      v22[3] = &unk_1E6349300;
      v22[4] = &v27;
      v22[5] = a2;
      v22[6] = v12;
      int v23 = LanguageID;
      SILocalizationLoad(v20, a2, (uint64_t)v22);
      if (getRefreshQueue(void)::onceRefQueueToken != -1) {
        dispatch_once(&getRefreshQueue(void)::onceRefQueueToken, &__block_literal_global_58);
      }
      v21[0] = MEMORY[0x1E4F143A8];
      v21[1] = 0x40000000;
      _OWORD v21[2] = __SILexiconCacheLoad_block_invoke_3;
      v21[3] = &unk_1E6349328;
      v21[4] = a3;
      v21[5] = &v27;
      v21[6] = v6;
      v21[7] = v12;
      dispatch_group_notify(v12, (dispatch_queue_t)getRefreshQueue(void)::gRefQueue, v21);
    }
  }
  _Block_object_dispose(&v27, 8);
}

void sub_1BDAEB59C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 136), 8);
  _Unwind_Resume(a1);
}

void __SILexiconCacheLoad_block_invoke()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  CFDictionaryRef OptionsDictionary = SIGeneralTrieCreateOptionsDictionary(1, 64, 0, 0, 0);
  sCache = (uint64_t)SIGeneralTrieCreateMutableWithDictionary(OptionsDictionary);
  if (OptionsDictionary) {
    CFRelease(OptionsDictionary);
  }
  CFDictionaryRef v1 = SIGeneralTrieCreateOptionsDictionary(2, 64, 0, 0, 0);
  sTypes = (uint64_t)SIGeneralTrieCreateMutableWithDictionary(v1);
  if (v1) {
    CFRelease(v1);
  }
  sOVSLexicouint64_t n = LXCreateWordModerationLexicon();
  for (uint64_t i = 0; i != 59; ++i)
  {
    sDynamicLexicons[i] = 0;
    atomic_store(0, &sLexiconsLoaded[i]);
    sLexicons[i] = 0;
  }
}

void __SILexiconCacheLoad_block_invoke_17(uint64_t a1, uint64_t a2)
{
  userInfoKeys[1] = *(void **)MEMORY[0x1E4F143B8];
  if (a2)
  {
    CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    uint64_t v4 = (__CFString *)CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"SILexiconCache: could not load localization for locale (%@)", *(void *)(a1 + 40));
    if (v4)
    {
      stat v5 = v4;
      os_signpost_id_t v6 = (void *)*MEMORY[0x1E4F1D140];
      userInfoValues = v4;
      userInfoKeys[0] = v6;
      *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = CFErrorCreateWithUserInfoKeysAndValues(v3, @"SpotlightLinguisticsErrorDomain", 1, (const void *const *)userInfoKeys, (const void *const *)&userInfoValues, 1);
      CFRelease(v5);
    }
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

uint64_t createLexicon(const __CFLocale *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t LanguageID = SILanguagesGetLanguageID(a1);
  double Current = CFAbsoluteTimeGetCurrent();
  if (logger(void)::token != -1) {
    dispatch_once(&logger(void)::token, &__block_literal_global_2);
  }
  uint64_t v4 = logger(void)::log;
  if (os_log_type_enabled((os_log_t)logger(void)::log, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109120;
    int v16 = LanguageID;
    _os_log_impl(&dword_1BDAD0000, v4, OS_LOG_TYPE_INFO, "Creating lexicon for language ID %d", buf, 8u);
    if (logger(void)::token != -1) {
      dispatch_once(&logger(void)::token, &__block_literal_global_2);
    }
  }
  os_signpost_id_t v5 = os_signpost_id_make_with_pointer((os_log_t)logger(void)::log, a1);
  if (logger(void)::token != -1) {
    dispatch_once(&logger(void)::token, &__block_literal_global_2);
  }
  if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    os_signpost_id_t v6 = logger(void)::log;
    if (os_signpost_enabled((os_log_t)logger(void)::log))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_1BDAD0000, v6, OS_SIGNPOST_INTERVAL_BEGIN, v5, "LexResources", "start creating lexicon resources", buf, 2u);
    }
  }
  CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableStringRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F72458], a1);
  CFStringRef v9 = CFStringCreateWithFormat(v7, 0, @"lm_seed_%d", LanguageID);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F72460], v9);
  uint64_t Transient = LXLexiconCreateTransient();
  CFRelease(v9);
  CFRelease(Mutable);
  if (logger(void)::token != -1) {
    dispatch_once(&logger(void)::token, &__block_literal_global_2);
  }
  unsigned int v11 = logger(void)::log;
  if (os_log_type_enabled((os_log_t)logger(void)::log, OS_LOG_TYPE_INFO))
  {
    CFAbsoluteTime v12 = CFAbsoluteTimeGetCurrent();
    *(_DWORD *)buf = 67109376;
    int v16 = LanguageID;
    __int16 v17 = 2048;
    double v18 = v12 - Current;
    _os_log_impl(&dword_1BDAD0000, v11, OS_LOG_TYPE_INFO, "Created lexicon for language ID %d <%f s>", buf, 0x12u);
    if (logger(void)::token != -1) {
      dispatch_once(&logger(void)::token, &__block_literal_global_2);
    }
  }
  if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    uint64_t v13 = logger(void)::log;
    if (os_signpost_enabled((os_log_t)logger(void)::log))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_1BDAD0000, v13, OS_SIGNPOST_INTERVAL_END, v5, "LexResources", (const char *)&unk_1BDB2739A, buf, 2u);
    }
  }
  return Transient;
}

uint64_t createStaticLexicon(const __CFLocale *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  int LanguageID = SILanguagesGetLanguageID(a1);
  double Current = CFAbsoluteTimeGetCurrent();
  if (logger(void)::token != -1) {
    dispatch_once(&logger(void)::token, &__block_literal_global_2);
  }
  uint64_t v4 = logger(void)::log;
  if (os_log_type_enabled((os_log_t)logger(void)::log, OS_LOG_TYPE_INFO))
  {
    int v13 = 67109120;
    int v14 = LanguageID;
    _os_log_impl(&dword_1BDAD0000, v4, OS_LOG_TYPE_INFO, "Creating lexicon for language ID %d", (uint8_t *)&v13, 8u);
    if (logger(void)::token != -1) {
      dispatch_once(&logger(void)::token, &__block_literal_global_2);
    }
  }
  os_signpost_id_t v5 = os_signpost_id_make_with_pointer((os_log_t)logger(void)::log, a1);
  if (logger(void)::token != -1) {
    dispatch_once(&logger(void)::token, &__block_literal_global_2);
  }
  if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    os_signpost_id_t v6 = logger(void)::log;
    if (os_signpost_enabled((os_log_t)logger(void)::log))
    {
      LOWORD(v13) = 0;
      _os_signpost_emit_with_name_impl(&dword_1BDAD0000, v6, OS_SIGNPOST_INTERVAL_BEGIN, v5, "LexResources", "start creating lexicon resources", (uint8_t *)&v13, 2u);
    }
  }
  CFMutableStringRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F72458], a1);
  uint64_t v8 = LXLexiconCreate();
  CFRelease(Mutable);
  if (logger(void)::token != -1) {
    dispatch_once(&logger(void)::token, &__block_literal_global_2);
  }
  CFStringRef v9 = logger(void)::log;
  if (os_log_type_enabled((os_log_t)logger(void)::log, OS_LOG_TYPE_INFO))
  {
    CFAbsoluteTime v10 = CFAbsoluteTimeGetCurrent();
    int v13 = 67109376;
    int v14 = LanguageID;
    __int16 v15 = 2048;
    double v16 = v10 - Current;
    _os_log_impl(&dword_1BDAD0000, v9, OS_LOG_TYPE_INFO, "Created System lexicon for language ID %d <%f s>", (uint8_t *)&v13, 0x12u);
    if (logger(void)::token != -1) {
      dispatch_once(&logger(void)::token, &__block_literal_global_2);
    }
  }
  if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    unsigned int v11 = logger(void)::log;
    if (os_signpost_enabled((os_log_t)logger(void)::log))
    {
      LOWORD(v13) = 0;
      _os_signpost_emit_with_name_impl(&dword_1BDAD0000, v11, OS_SIGNPOST_INTERVAL_END, v5, "LexResources", (const char *)&unk_1BDB2739A, (uint8_t *)&v13, 2u);
    }
  }
  return v8;
}

void __SILexiconCacheLoad_block_invoke_23(uint64_t a1, uint64_t a2)
{
  userInfoKeys[1] = *(void **)MEMORY[0x1E4F143B8];
  if (a2)
  {
    CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    uint64_t v4 = (__CFString *)CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"SILexiconCache: could not load localization for locale (%@)", *(void *)(a1 + 40));
    if (v4)
    {
      os_signpost_id_t v5 = v4;
      os_signpost_id_t v6 = (void *)*MEMORY[0x1E4F1D140];
      userInfoValues = v4;
      userInfoKeys[0] = v6;
      *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = CFErrorCreateWithUserInfoKeysAndValues(v3, @"SpotlightLinguisticsErrorDomain", 1, (const void *const *)userInfoKeys, (const void *const *)&userInfoValues, 1);
      CFRelease(v5);
    }
    CFRelease(*(CFTypeRef *)(a1 + 40));
  }
  else
  {
    dispatch_group_enter(*(dispatch_group_t *)(a1 + 48));
    if (getLexiconQueue(void)::onceLexQueueToken != -1) {
      dispatch_once(&getLexiconQueue(void)::onceLexQueueToken, &__block_literal_global_54);
    }
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __SILexiconCacheLoad_block_invoke_2;
    block[3] = &__block_descriptor_tmp_24;
    int v9 = *(_DWORD *)(a1 + 56);
    long long v8 = *(_OWORD *)(a1 + 40);
    dispatch_async((dispatch_queue_t)getLexiconQueue(void)::gLexQueue, block);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

void __SILexiconCacheLoad_block_invoke_2(uint64_t a1)
{
  Lexicouint64_t n = createLexicon(*(const __CFLocale **)(a1 + 32));
  StaticLexicouint64_t n = createStaticLexicon(*(const __CFLocale **)(a1 + 32));
  os_unfair_lock_lock((os_unfair_lock_t)&sLexiconLock);
  uint64_t v4 = *(unsigned int *)(a1 + 48);
  sDynamicLexicons[v4] = Lexicon;
  sLexicons[v4] = StaticLexicon;
  os_unfair_lock_unlock((os_unfair_lock_t)&sLexiconLock);
  CFRelease(*(CFTypeRef *)(a1 + 32));
  os_signpost_id_t v5 = *(NSObject **)(a1 + 40);

  dispatch_group_leave(v5);
}

void __SILexiconCacheLoad_block_invoke_3(uint64_t a1)
{
  if (logger(void)::token != -1) {
    dispatch_once(&logger(void)::token, &__block_literal_global_2);
  }
  os_signpost_id_t v2 = *(void *)(a1 + 48);
  if (v2 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    CFAllocatorRef v3 = logger(void)::log;
    if (os_signpost_enabled((os_log_t)logger(void)::log))
    {
      *(_WORD *)os_signpost_id_t v5 = 0;
      _os_signpost_emit_with_name_impl(&dword_1BDAD0000, v3, OS_SIGNPOST_INTERVAL_END, v2, "SILexiconCacheLoad", (const char *)&unk_1BDB2739A, v5, 2u);
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  dispatch_release(*(dispatch_object_t *)(a1 + 56));
  uint64_t v4 = *(const void **)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
  if (v4) {
    CFRelease(v4);
  }
}

void SILexiconCacheRefresh(uint64_t a1, CFArrayRef theArray, uint64_t a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v16 = a3;
  if (theArray)
  {
    uint64_t Count = CFArrayGetCount(theArray);
    MEMORY[0x1F4188790](Count);
    CFAllocatorRef v7 = (const __CFString **)((char *)&block[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
    bzero(v7, v6);
    v22.locatiouint64_t n = 0;
    v22.length = Count;
    CFArrayGetValues(theArray, v22, (const void **)v7);
  }
  else
  {
    uint64_t Count = 0;
    CFAllocatorRef v7 = (const __CFString **)&v20;
  }
  long long v8 = dispatch_group_create();
  int v9 = malloc_type_calloc(0x3BuLL, 1uLL, 0x100004077774924uLL);
  CFAbsoluteTime v10 = malloc_type_calloc(0x3BuLL, 1uLL, 0x100004077774924uLL);
  if (Count >= 1)
  {
    do
    {
      CFStringRef Locale = *v7;
      CFTypeID v12 = CFGetTypeID(*v7);
      if (v12 != CFLocaleGetTypeID())
      {
        CFTypeID v13 = CFGetTypeID(Locale);
        if (v13 == CFStringGetTypeID())
        {
          unsigned int LanguageIDForIdentifier = SILanguagesGetLanguageIDForIdentifier(Locale);
          CFStringRef Locale = (const __CFString *)SILanguagesGetLocale(LanguageIDForIdentifier);
        }
        else
        {
          CFStringRef Locale = 0;
        }
      }
      int LanguageID = SILanguagesGetLanguageID((const __CFLocale *)Locale);
      dispatch_group_enter(v8);
      v18[0] = MEMORY[0x1E4F143A8];
      v18[1] = 0x40000000;
      v18[2] = __SILexiconCacheRefresh_block_invoke;
      v18[3] = &__block_descriptor_tmp_27;
      int v19 = LanguageID;
      v18[4] = v9;
      v18[5] = v10;
      v18[6] = v8;
      SILexiconCacheLoad(a1, (const __CFLocale *)Locale, (uint64_t)v18);
      ++v7;
      --Count;
    }
    while (Count);
  }
  if (getRefreshQueue(void)::onceRefQueueToken != -1) {
    dispatch_once(&getRefreshQueue(void)::onceRefQueueToken, &__block_literal_global_58);
  }
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __SILexiconCacheRefresh_block_invoke_2;
  block[3] = &unk_1E6349370;
  void block[4] = v16;
  void block[5] = v9;
  block[6] = v10;
  block[7] = v8;
  dispatch_group_notify(v8, (dispatch_queue_t)getRefreshQueue(void)::gRefQueue, block);
}

void __SILexiconCacheRefresh_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 56);
  *(unsigned char *)(*(void *)(a1 + 32) + v2) = 1;
  if (a2) {
    *(unsigned char *)(*(void *)(a1 + 40) + v2) = 1;
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

void __SILexiconCacheRefresh_block_invoke_2(uint64_t a1)
{
  uint64_t v2 = 0;
  char v3 = 0;
  userInfoKeys[1] = *(void **)MEMORY[0x1E4F143B8];
  do
  {
    if (*(unsigned char *)(*(void *)(a1 + 40) + v2))
    {
      v3 |= *(unsigned char *)(*(void *)(a1 + 48) + v2) != 0;
    }
    else
    {
      os_unfair_lock_lock((os_unfair_lock_t)&sLexiconLock);
      uint64_t v4 = (const void *)sDynamicLexicons[v2];
      if (v4)
      {
        CFRelease(v4);
        sDynamicLexicons[v2] = 0;
      }
      os_signpost_id_t v5 = (const void *)sLexicons[v2];
      if (v5)
      {
        CFRelease(v5);
        sLexicons[v2] = 0;
      }
      atomic_store(0, &sLexiconsLoaded[v2]);
      os_unfair_lock_unlock((os_unfair_lock_t)&sLexiconLock);
    }
    ++v2;
  }
  while (v2 != 59);
  if ((v3 & 1) != 0
    && (CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80],
        (CFAllocatorRef v7 = (__CFString *)CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"SILexiconCache: error loading locales")) != 0))
  {
    long long v8 = v7;
    int v9 = (void *)*MEMORY[0x1E4F1D140];
    userInfoValues = v7;
    userInfoKeys[0] = v9;
    CFErrorRef v10 = CFErrorCreateWithUserInfoKeysAndValues(v6, @"SpotlightLinguisticsErrorDomain", 1, (const void *const *)userInfoKeys, (const void *const *)&userInfoValues, 1);
    CFRelease(v8);
  }
  else
  {
    CFErrorRef v10 = 0;
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  if (v10) {
    CFRelease(v10);
  }
  free(*(void **)(a1 + 40));
  free(*(void **)(a1 + 48));
  dispatch_release(*(dispatch_object_t *)(a1 + 56));
}

BOOL SILexiconCacheIsAvailable(uint64_t a1, const __CFLocale *a2)
{
  int LanguageID = SILanguagesGetLanguageID(a2);
  if ((LanguageID - 59) >= 0xFFFFFFC7
    && (unsigned __int8 v3 = atomic_load(&sLexiconsLoaded[LanguageID]), (v3 & 1) != 0)
    && sLexicons[LanguageID])
  {
    return sOVSLexicon != 0;
  }
  else
  {
    return 0;
  }
}

void SILexiconCacheRelease(void *a1)
{
  if (a1 && atomic_fetch_add((atomic_uint *volatile)a1, 0xFFFFFFFF) == 1)
  {
    uint64_t v2 = (void *)a1[1];
    if (v2) {
      SILocalizationRelease(v2);
    }
    free(a1);
  }
}

uint64_t SILexiconCacheContainsTokenIDInString(uint64_t a1, const __CFLocale *a2, CFStringRef theString, unsigned int *a4, unsigned int *a5, void *a6)
{
  v19[1] = *MEMORY[0x1E4F143B8];
  if (!theString) {
    return 0;
  }
  CFIndex Length = CFStringGetLength(theString);
  uint64_t result = 0;
  v19[0] = Length;
  if (a1 && a2 && Length)
  {
    if (SILanguagesGetLanguageID(a2) - 59 < 0xFFFFFFC7) {
      return 0;
    }
    CFIndex MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
    size_t v15 = MaximumSizeForEncoding + 1;
    MEMORY[0x1F4188790](MaximumSizeForEncoding);
    uint64_t v17 = (UInt8 *)v19 - v16;
    bzero((char *)v19 - v16, v15);
    v20.locatiouint64_t n = 0;
    v20.length = Length;
    CFStringGetBytes(theString, v20, 0x8000100u, 0x2Du, 0, v17, v15, v19);
    unsigned int v18 = v19[0];
    v17[v19[0]] = 0;
    return SILexiconCacheContainsTokenID(a1, a2, v17, v18, a4, a5, a6);
  }
  return result;
}

uint64_t SILexiconCacheContainsTokenID(uint64_t a1, const __CFLocale *a2, void *a3, unsigned int a4, unsigned int *a5, unsigned int *a6, void *a7)
{
  uint64_t result = 0;
  if (a3 && a1 && a2 && a4)
  {
    int LanguageID = SILanguagesGetLanguageID(a2);
    if ((LanguageID - 59) < 0xFFFFFFC7) {
      return 0;
    }
    int v15 = LanguageID;
    CFAllocatorRef v33 = 0;
    unsigned int v39 = 0;
    os_unfair_lock_lock((os_unfair_lock_t)&sCacheLock);
    if (sCache)
    {
      std::to_string(&v35, v15);
      uint64_t v16 = std::string::append(&v35, ":");
      long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
      v36.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v17;
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:ne180100](&__p, a3, a4);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      CFRange v20 = std::string::append(&v36, (const std::string::value_type *)p_p, size);
      long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
      int64_t v38 = v20->__r_.__value_.__r.__words[2];
      *(_OWORD *)BOOL v37 = v21;
      v20->__r_.__value_.__l.__size_ = 0;
      v20->__r_.__value_.__r.__words[2] = 0;
      v20->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v36.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v35.__r_.__value_.__l.__data_);
      }
      if (v38 >= 0) {
        CFRange v22 = v37;
      }
      else {
        CFRange v22 = (void **)v37[0];
      }
      if (v38 >= 0) {
        uint64_t v23 = HIBYTE(v38);
      }
      else {
        uint64_t v23 = LODWORD(v37[1]);
      }
      SIGeneralTrieContainsKey(sCache, v22, v23, &v39, &v33);
      if (SHIBYTE(v38) < 0) {
        operator delete(v37[0]);
      }
    }
    os_unfair_lock_unlock((os_unfair_lock_t)&sCacheLock);
    unsigned int v24 = v39;
    if (v39)
    {
      unsigned int v39 = 0;
      os_unfair_lock_lock((os_unfair_lock_t)&sCacheLock);
      if (sTypes)
      {
        std::to_string(&v35, v24);
        uint64_t v25 = std::string::append(&v35, ":");
        long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
        v36.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v26;
        v25->__r_.__value_.__l.__size_ = 0;
        v25->__r_.__value_.__r.__words[2] = 0;
        v25->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&__p, v15);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v27 = &__p;
        }
        else {
          uint64_t v27 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v28 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v28 = __p.__r_.__value_.__l.__size_;
        }
        uint64_t v29 = std::string::append(&v36, (const std::string::value_type *)v27, v28);
        long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
        int64_t v38 = v29->__r_.__value_.__r.__words[2];
        *(_OWORD *)BOOL v37 = v30;
        v29->__r_.__value_.__l.__size_ = 0;
        v29->__r_.__value_.__r.__words[2] = 0;
        v29->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v36.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v35.__r_.__value_.__l.__data_);
        }
        if (v38 >= 0) {
          uint64_t v31 = v37;
        }
        else {
          uint64_t v31 = (void **)v37[0];
        }
        if (v38 >= 0) {
          uint64_t v32 = HIBYTE(v38);
        }
        else {
          uint64_t v32 = LODWORD(v37[1]);
        }
        SIGeneralTrieContainsKey(sTypes, v31, v32, &v39, 0);
        if (SHIBYTE(v38) < 0) {
          operator delete(v37[0]);
        }
      }
      os_unfair_lock_unlock((os_unfair_lock_t)&sCacheLock);
      if (a5) {
        *a5 = v24;
      }
      if (a6) {
        *a6 = v39;
      }
      if (a7) {
        *a7 = v33;
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void sub_1BDAECAA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a35 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void SILexiconCacheSetTokenIDInString(uint64_t a1, const __CFLocale *a2, CFStringRef theString, unsigned int a4, int a5, double a6)
{
  v19[1] = *MEMORY[0x1E4F143B8];
  if (theString)
  {
    CFIndex Length = CFStringGetLength(theString);
    v19[0] = Length;
    if (a1)
    {
      if (a2)
      {
        CFIndex v13 = Length;
        if (Length)
        {
          if (SILanguagesGetLanguageID(a2) - 59 >= 0xFFFFFFC7)
          {
            CFIndex MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(v13, 0x8000100u);
            size_t v15 = MaximumSizeForEncoding + 1;
            MEMORY[0x1F4188790](MaximumSizeForEncoding);
            long long v17 = (UInt8 *)v19 - v16;
            bzero((char *)v19 - v16, v15);
            v20.locatiouint64_t n = 0;
            v20.length = v13;
            CFStringGetBytes(theString, v20, 0x8000100u, 0x2Du, 0, v17, v15, v19);
            unsigned int v18 = v19[0];
            v17[v19[0]] = 0;
            SILexiconCacheSetTokenID(a1, a2, v17, v18, a4, a5, a6);
          }
        }
      }
    }
  }
}

void SILexiconCacheSetTokenID(uint64_t a1, const __CFLocale *a2, void *a3, unsigned int a4, unsigned int a5, int a6, double a7)
{
  if (a1)
  {
    if (a2)
    {
      if (a3)
      {
        if (a4)
        {
          int LanguageID = SILanguagesGetLanguageID(a2);
          if ((LanguageID - 59) >= 0xFFFFFFC7)
          {
            int v13 = LanguageID;
            os_unfair_lock_lock((os_unfair_lock_t)&sCacheLock);
            if (a5 && sCache)
            {
              std::to_string(&v31, v13);
              int v14 = std::string::append(&v31, ":");
              long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
              v32.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v15;
              v14->__r_.__value_.__l.__size_ = 0;
              v14->__r_.__value_.__r.__words[2] = 0;
              v14->__r_.__value_.__r.__words[0] = 0;
              std::string::basic_string[abi:ne180100](&__p, a3, a4);
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                p_p = &__p;
              }
              else {
                p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
              }
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type size = __p.__r_.__value_.__l.__size_;
              }
              unsigned int v18 = std::string::append(&v32, (const std::string::value_type *)p_p, size);
              __n128 v19 = *(__n128 *)&v18->__r_.__value_.__l.__data_;
              int64_t v34 = v18->__r_.__value_.__r.__words[2];
              *(__n128 *)CFAllocatorRef v33 = v19;
              v18->__r_.__value_.__l.__size_ = 0;
              v18->__r_.__value_.__r.__words[2] = 0;
              v18->__r_.__value_.__r.__words[0] = 0;
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v32.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v31.__r_.__value_.__l.__data_);
              }
              if (v34 >= 0) {
                CFRange v20 = v33;
              }
              else {
                CFRange v20 = (void **)v33[0];
              }
              if (v34 >= 0) {
                unsigned int v21 = HIBYTE(v34);
              }
              else {
                unsigned int v21 = v33[1];
              }
              v19.n128_f64[0] = a7;
              SIGeneralTrieSetKeyWithScore(sCache, (uint64_t)v20, v21, a5, v19);
              if (SHIBYTE(v34) < 0) {
                operator delete(v33[0]);
              }
            }
            os_unfair_lock_unlock((os_unfair_lock_t)&sCacheLock);
            os_unfair_lock_lock((os_unfair_lock_t)&sCacheLock);
            if (a5 && a6 && sTypes)
            {
              std::to_string(&v31, a5);
              CFRange v22 = std::string::append(&v31, ":");
              long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
              v32.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v23;
              v22->__r_.__value_.__l.__size_ = 0;
              v22->__r_.__value_.__r.__words[2] = 0;
              v22->__r_.__value_.__r.__words[0] = 0;
              std::to_string(&__p, v13);
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                unsigned int v24 = &__p;
              }
              else {
                unsigned int v24 = (std::string *)__p.__r_.__value_.__r.__words[0];
              }
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type v25 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type v25 = __p.__r_.__value_.__l.__size_;
              }
              long long v26 = std::string::append(&v32, (const std::string::value_type *)v24, v25);
              long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
              int64_t v34 = v26->__r_.__value_.__r.__words[2];
              *(_OWORD *)CFAllocatorRef v33 = v27;
              v26->__r_.__value_.__l.__size_ = 0;
              v26->__r_.__value_.__r.__words[2] = 0;
              v26->__r_.__value_.__r.__words[0] = 0;
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v32.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v31.__r_.__value_.__l.__data_);
              }
              if (v34 >= 0) {
                std::string::size_type v28 = v33;
              }
              else {
                std::string::size_type v28 = (void **)v33[0];
              }
              if (v34 >= 0) {
                unsigned int v29 = HIBYTE(v34);
              }
              else {
                unsigned int v29 = v33[1];
              }
              SIGeneralTrieAddKey(sTypes, (uint64_t)v28, v29, a6);
              if (SHIBYTE(v34) < 0) {
                operator delete(v33[0]);
              }
            }
            os_unfair_lock_unlock((os_unfair_lock_t)&sCacheLock);
          }
        }
      }
    }
  }
}

void sub_1BDAECF28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SILexiconCacheEnumerateOVSAnnotationsInString(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return 0;
  }
  uint64_t v4 = 0;
  os_signpost_id_t v5 = &v4;
  uint64_t v6 = 0x2000000000;
  char v7 = 0;
  if (sOVSLexicon)
  {
    LXLexiconEnumerateEntriesForString();
    uint64_t v2 = *((unsigned __int8 *)v5 + 24);
  }
  else
  {
    uint64_t v2 = 0;
  }
  _Block_object_dispose(&v4, 8);
  return v2;
}

void sub_1BDAED05C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __SILexiconCacheEnumerateOVSAnnotationsInString_block_invoke(uint64_t a1)
{
  int MetaFlags = LXEntryGetMetaFlags();
  uint64_t result = LXEntryGetCategoryFlags();
  if ((MetaFlags & 0x3800000) != 0 || (result & 0x1F500) != 0)
  {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
  }
  return result;
}

CFIndex SILexiconCacheEnumerateAnnotationsInString(uint64_t a1, const __CFLocale *a2, CFStringRef theString)
{
  CFIndex result = 0;
  v15[1] = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (theString)
    {
      CFIndex result = CFStringGetLength(theString);
      if (result)
      {
        CFIndex v7 = result;
        int LanguageID = SILanguagesGetLanguageID(a2);
        unsigned __int8 v9 = atomic_load(&sLexiconsLoaded[LanguageID]);
        if ((v9 & 1) != 0 && sLexicons[LanguageID])
        {
          CFIndex MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(v7, 0x8000100u);
          size_t v11 = MaximumSizeForEncoding + 1;
          MEMORY[0x1F4188790](MaximumSizeForEncoding);
          int v13 = (UInt8 *)v15 - v12;
          bzero((char *)v15 - v12, v11);
          v15[0] = 0;
          v16.locatiouint64_t n = 0;
          v16.length = v7;
          CFStringGetBytes(theString, v16, 0x8000100u, 0x2Du, 0, v13, v11, v15);
          int v14 = v15[0];
          v13[v15[0]] = 0;
          return SILexiconCacheEnumerateAnnotations(a1, a2, (uint64_t)v13, v14);
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t SILexiconCacheEnumerateAnnotations(uint64_t a1, const __CFLocale *a2, uint64_t a3, int a4)
{
  uint64_t v4 = 0;
  if (a1 && a4)
  {
    int LanguageID = SILanguagesGetLanguageID(a2);
    unsigned __int8 v6 = atomic_load(&sLexiconsLoaded[LanguageID]);
    if ((v6 & 1) != 0 && sLexicons[LanguageID])
    {
      uint64_t v10 = 0;
      size_t v11 = &v10;
      uint64_t v12 = 0x2000000000;
      char v13 = 0;
      RootCursor = (const void *)LXLexiconCreateRootCursor();
      if (RootCursor)
      {
        long long v8 = (const void *)LXCursorCreateByAdvancingWithUTF8();
        if (v8)
        {
          LXCursorEnumerateEntries();
          CFRelease(v8);
        }
        CFRelease(RootCursor);
      }
      uint64_t v4 = *((unsigned __int8 *)v11 + 24);
      _Block_object_dispose(&v10, 8);
    }
    else
    {
      return 0;
    }
  }
  return v4;
}

void sub_1BDAED3A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __SILexiconCacheEnumerateAnnotations_block_invoke(uint64_t a1)
{
  int MetaFlags = LXEntryGetMetaFlags();
  uint64_t result = LXEntryGetCategoryFlags();
  if ((MetaFlags & 0x3800000) != 0 || (result & 0x1F500) != 0)
  {
    uint64_t v4 = *(uint64_t (**)(void))(*(void *)(a1 + 32) + 16);
  }
  else
  {
    if ((MetaFlags & 0x200061) != 0) {
      return result;
    }
    uint64_t v4 = *(uint64_t (**)(void))(*(void *)(a1 + 32) + 16);
  }
  uint64_t result = v4();
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
  return result;
}

uint64_t SILexiconCacheGetTokenIDInString(uint64_t a1, const __CFLocale *a2, CFStringRef theString)
{
  if (!theString) {
    return 0;
  }
  CFIndex Length = CFStringGetLength(theString);
  uint64_t v6 = 0;
  if (a1 && a2 && Length)
  {
    unsigned int LanguageID = SILanguagesGetLanguageID(a2);
    if (LanguageID - 59 < 0xFFFFFFC7) {
      return 0;
    }
    unsigned __int8 v8 = atomic_load(&sLexiconsLoaded[LanguageID]);
    if ((v8 & 1) == 0) {
      return 0;
    }
    uint64_t v10 = LanguageID;
    os_unfair_lock_lock((os_unfair_lock_t)&sLexiconLock);
    if (sDynamicLexicons[v10]) {
      uint64_t v6 = LXLexiconAdd();
    }
    else {
      uint64_t v6 = 0;
    }
    os_unfair_lock_unlock((os_unfair_lock_t)&sLexiconLock);
  }
  return v6;
}

uint64_t SILexiconCacheGetTokenType(uint64_t a1, const __CFLocale *a2, const char *a3, uint64_t a4)
{
  uint64_t result = 0;
  if (a3 && a1 && a2 && a4)
  {
    LODWORD(result) = SILocalizationGetTokenType(*(void *)(a1 + 8), a2, a3, a4, 0);
    if (result == 5) {
      return 1;
    }
    else {
      return result;
    }
  }
  return result;
}

uint64_t SILexiconCacheGetTokenTypeInString(uint64_t a1, const __CFLocale *a2, CFStringRef theString)
{
  if (!theString) {
    return 0;
  }
  CFIndex Length = CFStringGetLength(theString);
  uint64_t result = 0;
  if (a1 && a2 && Length)
  {
    if (SILanguagesGetLanguageID(a2) - 59 >= 0xFFFFFFC7)
    {
      LODWORD(result) = SILocalizationGetTokenTypeInString(*(void *)(a1 + 8), a2, theString, 0);
      if (result == 5) {
        return 1;
      }
      else {
        return result;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t SILexiconCacheGetTokenID(uint64_t a1, const __CFLocale *a2, const char *a3, uint64_t a4)
{
  uint64_t result = 0;
  if (a3 && a1 && a2 && a4)
  {
    if (SILanguagesGetLanguageID(a2) - 59 >= 0xFFFFFFC7)
    {
      LODWORD(result) = SILocalizationGetTokenType(*(void *)(a1 + 8), a2, a3, a4, 0);
      if (result == 5) {
        return 1;
      }
      else {
        return result;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

os_log_t ___ZL6loggerv_block_invoke()
{
  CFStringRef v0 = _nlpLoggingSubsystem();
  os_log_t result = os_log_create(v0, "SpotlightLexiconCache");
  logger(void)::log = (uint64_t)result;
  return result;
}

dispatch_queue_t ___ZL15getLexiconQueuev_block_invoke()
{
  dispatch_queue_t result = dispatch_queue_create("com.apple.SI.Lexicon", 0);
  getLexiconQueue(void)::gLexQueue = (uint64_t)result;
  return result;
}

dispatch_queue_t ___ZL15getRefreshQueuev_block_invoke()
{
  dispatch_queue_t result = dispatch_queue_create("com.apple.SI.Lexicon.refresh", 0);
  getRefreshQueue(void)::gRefQueue = (uint64_t)result;
  return result;
}

void *std::string::basic_string[abi:ne180100](void *__dst, void *__src, size_t __len)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *__dst = v6;
  }
  else
  {
    *((unsigned char *)__dst + 23) = __len;
    uint64_t v6 = __dst;
    if (!__len) {
      goto LABEL_9;
    }
  }
  memmove(v6, __src, __len);
LABEL_9:
  *((unsigned char *)v6 + __len) = 0;
  return __dst;
}

CFArrayRef SIGeoIndexCreateMutableWithOptions(const __CFURL *a1, const __CFDictionary *a2)
{
  v16[1] = *(const void **)MEMORY[0x1E4F143B8];
  if (!a1) {
    return 0;
  }
  if (!CFURLResourceIsReachable(a1, 0))
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      SIGeoIndexCreateMutableWithOptions_cold_1();
    }
    return 0;
  }
  uint64_t v4 = (const void *)*MEMORY[0x1E4F1D678];
  v16[0] = *(const void **)MEMORY[0x1E4F1D678];
  CFArrayRef v5 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v16, 1, MEMORY[0x1E4F1D510]);
  if (v5)
  {
    CFDictionaryRef v6 = CFURLCopyResourcePropertiesForKeys(a1, v5, 0);
    if (!v6
      || (CFDictionaryRef v7 = v6,
          CFStringRef Value = CFDictionaryGetValue(v6, v4),
          unsigned __int8 v9 = (const void *)*MEMORY[0x1E4F1CFD0],
          CFRelease(v7),
          Value != v9))
    {
      CFRelease(v5);
      return 0;
    }
    CFRelease(v5);
    MutableWithOptions = SIDataMapCreateMutableWithOptions(a1, @"geobase", a2);
    if (!MutableWithOptions) {
      return 0;
    }
    uint64_t v12 = MutableWithOptions;
    char v13 = SIGeneralTrieCreateMutableWithOptions(128, 1);
    if (!v13)
    {
      SIDataMapRelease(v12);
      return 0;
    }
    int v14 = v13;
    CFArrayRef v5 = (const __CFArray *)malloc_type_malloc(0x30uLL, 0x10600404F81B905uLL);
    if (v5)
    {
      CFTypeRef v15 = CFRetain(a1);
      *((void *)v5 + 4) = 0;
      *((void *)v5 + 5) = v14;
      *((void *)v5 + 1) = v15;
      *((void *)v5 + 2) = 0;
      *((void *)v5 + 3) = v12;
      atomic_fetch_add((atomic_uint *volatile)v5, 1u);
    }
    else
    {
      SIDataMapRelease(v12);
      SIGeneralTrieRelease(v14);
    }
  }
  return v5;
}

atomic_uint *SIGeoIndexRetain(atomic_uint *result)
{
  if (result) {
    atomic_fetch_add(result, 1u);
  }
  return result;
}

atomic_uint *SIGeoIndexCreateWithOptions(const __CFURL *a1)
{
  values[1] = *(void **)MEMORY[0x1E4F143B8];
  if (!a1) {
    return 0;
  }
  if (!CFURLResourceIsReachable(a1, 0))
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      SIGeoIndexCreateMutableWithOptions_cold_1();
    }
    return 0;
  }
  uint64_t v2 = (const void *)*MEMORY[0x1E4F1D678];
  values[0] = *(void **)MEMORY[0x1E4F1D678];
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFArrayRef v4 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)values, 1, MEMORY[0x1E4F1D510]);
  if (!v4) {
    return 0;
  }
  CFArrayRef v5 = v4;
  CFDictionaryRef v6 = CFURLCopyResourcePropertiesForKeys(a1, v4, 0);
  if (!v6
    || (CFDictionaryRef v7 = v6,
        CFStringRef Value = CFDictionaryGetValue(v6, v2),
        unsigned __int8 v9 = (const void *)*MEMORY[0x1E4F1CFD0],
        CFRelease(v7),
        Value != v9))
  {
    CFRelease(v5);
    return 0;
  }
  CFRelease(v5);
  CFStringRef v12 = CFStringCreateWithFormat(v3, 0, @"%@/%@.plist", a1, @"config");
  if (v12)
  {
    CFStringRef v13 = v12;
    CFURLRef v14 = CFURLCreateWithString(v3, v12, 0);
    if (v14)
    {
      CFURLRef v15 = v14;
      values[0] = 0;
      CFDictionaryRef DictionaryWithContentsOfURL = (const __CFDictionary *)createDictionaryWithContentsOfURL(v14, (CFErrorRef *)values);
      if (DictionaryWithContentsOfURL)
      {
        CFDictionaryRef v17 = DictionaryWithContentsOfURL;
        CFNumberRef v18 = (const __CFNumber *)CFDictionaryGetValue(DictionaryWithContentsOfURL, @"_SIGeoIndexVersion");
        if (v18)
        {
          uint64_t valuePtr = 0;
          CFNumberGetValue(v18, kCFNumberCFIndexType, &valuePtr);
          BOOL v19 = valuePtr == 2;
        }
        else
        {
          BOOL v19 = 1;
        }
        CFRelease(v17);
      }
      else
      {
        BOOL v19 = 1;
      }
      CFRelease(v15);
      CFRelease(v13);
      if (!v19) {
        return 0;
      }
    }
    else
    {
      CFRelease(v13);
    }
  }
  CFRange v20 = SIDataMapCreateWithOptions(a1, @"geobase", 0);
  if (!v20) {
    return 0;
  }
  unsigned int v21 = v20;
  CFStringRef v22 = CFStringCreateWithFormat(v3, 0, @"%@/%@", a1, @"stringbase");
  if (!v22) {
    goto LABEL_28;
  }
  CFStringRef v23 = v22;
  CFURLRef v24 = CFURLCreateWithString(v3, v22, 0);
  if (!v24)
  {
    CFRelease(v23);
    goto LABEL_28;
  }
  CFURLRef v25 = v24;
  long long v26 = (char *)SIGeneralTrieCreateFromFileURL(v24);
  CFRelease(v25);
  CFRelease(v23);
  if (!v26)
  {
LABEL_28:
    SIDataMapRelease(v21);
    return 0;
  }
  uint64_t v10 = (atomic_uint *)malloc_type_malloc(0x30uLL, 0x10600404F81B905uLL);
  if (v10)
  {
    CFTypeRef v27 = CFRetain(a1);
    *((void *)v10 + 4) = v26;
    *((void *)v10 + 5) = 0;
    *((void *)v10 + 1) = v27;
    *((void *)v10 + 2) = v21;
    *((void *)v10 + 3) = 0;
    atomic_fetch_add(v10, 1u);
  }
  else
  {
    SIDataMapRelease(v21);
    SIGeneralTrieRelease(v26);
  }
  return v10;
}

CFStringRef SIGeoIndexAddEntry(void *a1, void *a2)
{
  if (!a1) {
    return (CFStringRef)0xFFFFFFFFLL;
  }
  if (a1[2] || a1[4]) {
    return (CFStringRef)0xFFFFFFFFLL;
  }
  CFStringRef result = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"%f:%f:%f:%f:%f:%f:", *a2, a2[1], a2[2], a2[3], a2[4], a2[5]);
  if (result)
  {
    CFArrayRef v4 = result;
    unsigned int v5 = 0;
    if (!SIDataMapAddStringKey(a1[3], result, &v5)) {
      unsigned int v5 = 0;
    }
    CFRelease(v4);
    return (CFStringRef)v5;
  }
  return result;
}

uint64_t SIGeoIndexAddStringKeyForID(void *a1, const __CFLocale *a2, const __CFSet *a3, uint64_t a4, double a5)
{
  v21[1] = *MEMORY[0x1E4F143B8];
  if (!a1 || a1[2]) {
    return 0;
  }
  unsigned __int8 v6 = 0;
  if (a2 && a3 && !a1[4])
  {
    uint64_t LanguageID = SILanguagesGetLanguageID(a2);
    if ((int)LanguageID < 2) {
      return 0;
    }
    uint64_t v12 = LanguageID;
    CFIndex Count = CFSetGetCount(a3);
    v21[0] = v21;
    MEMORY[0x1F4188790](Count);
    CFURLRef v15 = (CFTypeRef *)((char *)v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
    bzero(v15, v14);
    CFSetGetValues(a3, v15);
    if (Count < 1)
    {
      return 0;
    }
    else
    {
      unsigned __int8 v6 = 0;
      CFAllocatorRef v16 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      do
      {
        CFTypeRef v17 = *v15;
        CFTypeID v18 = CFGetTypeID(*v15);
        if (v18 == CFStringGetTypeID())
        {
          CFStringRef v19 = CFStringCreateWithFormat(v16, 0, @"%@:%d:%d", v17, v12, a4);
          if (v19)
          {
            CFStringRef v20 = v19;
            if (!SIGeneralTrieContainsStringKey(a1[5], v19, 0, 0))
            {
              SIGeneralTrieAddStringKeyWithScore(a1[5], v20, 2, 0, 0, a5);
              CFRelease(v20);
              unsigned __int8 v6 = 1;
            }
          }
        }
        ++v15;
        --Count;
      }
      while (Count);
    }
  }
  return v6;
}

CFStringRef SIGeoIndexContainsEntry(CFStringRef result, void *a2, _DWORD *a3)
{
  if (result)
  {
    uint64_t data = (uint64_t)result->data;
    if (!data) {
      uint64_t data = result->length;
    }
    CFStringRef result = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"%f:%f:%f:%f:%f:%f:", *a2, a2[1], a2[2], a2[3], a2[4], a2[5]);
    if (result)
    {
      CFStringRef v5 = result;
      int v7 = 0;
      if (!SIDataMapLookupStringKey(data, result, 0, (unint64_t)&v7)) {
        int v7 = 0;
      }
      CFRelease(v5);
      int v6 = v7;
      if (a3) {
        *a3 = v7;
      }
      return (CFStringRef)(v6 != 0);
    }
  }
  return result;
}

char *SIGeoIndexContainsStringKey(uint64_t a1, const __CFString *a2)
{
  CFStringRef result = 0;
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  unsigned __int8 v8 = 0;
  if (a1 && a2)
  {
    uint64_t v5 = *(void *)(a1 + 32);
    if (v5 || (uint64_t v5 = *(void *)(a1 + 40)) != 0)
    {
      bzero(buffer, 0x400uLL);
      v11.length = CFStringGetLength(a2);
      usedBufLeuint64_t n = 0;
      v11.locatiouint64_t n = 0;
      CFStringGetBytes(a2, v11, 0x8000100u, 0x2Du, 0, buffer, 1024, &usedBufLen);
      CFStringRef result = (char *)SIGeneralTrieCreateCursorWithBytes(v5, buffer, usedBufLen);
      if (result)
      {
        int v6 = result;
        SIGeneralTrieTraverseFromCursor(result, -1, (uint64_t)&v8, (uint64_t (*)(uint64_t, uint64_t, void, double))nameSearchCallback);
        SIGeneralTrieCursorDispose(v6);
        return (char *)v8;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

unsigned char *nameSearchCallback(unsigned char *result, const unsigned __int8 *a2, unsigned int a3, unsigned int a4, double a5, BOOL *a6)
{
  if (*a2 == 58)
  {
    *CFStringRef result = 1;
    *a6 = 1;
  }
  return result;
}

uint64_t SIGeoIndexEnumerateGeoIDForString(uint64_t a1, const __CFLocale *a2, CFStringRef theString, uint64_t a4)
{
  uint64_t result = 0;
  uint64_t v11 = a4;
  if (a1)
  {
    if (theString)
    {
      uint64_t result = CFStringGetLength(theString);
      if (result)
      {
        uint64_t LanguageID = SILanguagesGetLanguageID(a2);
        if ((int)LanguageID < 2)
        {
          return 0;
        }
        else
        {
          uint64_t v9 = *(void *)(a1 + 32);
          if (!v9) {
            uint64_t v9 = *(void *)(a1 + 40);
          }
          uint64_t result = (uint64_t)CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"%@:%d:", theString, LanguageID);
          if (result)
          {
            uint64_t v10 = (const void *)result;
            SIGeneralTrieSearchString(v9, (CFStringRef)result, -1, (uint64_t)&v11, (uint64_t)geoIDLookupCallback);
            CFRelease(v10);
            return 1;
          }
        }
      }
    }
  }
  return result;
}

uint64_t geoIDLookupCallback(uint64_t a1, uint64_t a2)
{
  uint64_t result = SITrieCompletionGetPayload(a2);
  if (result == 2)
  {
    int Length = SITrieCompletionGetLength(a2);
    uint64_t result = SITrieCompletionGetCompletion(a2);
    unsigned int v6 = Length - 1;
    while (v6)
    {
      unsigned int v7 = v6;
      int v8 = *(unsigned __int8 *)(result + v6--);
      if (v8 == 58)
      {
        uint64_t result = atoi((const char *)(result + v7 + 1));
        if (result)
        {
          v9.n128_f64[0] = SITrieCompletionGetScore(a2);
          uint64_t v10 = *(uint64_t (**)(__n128))(*(void *)a1 + 16);
          return v10(v9);
        }
        return result;
      }
    }
  }
  return result;
}

uint64_t SIGeoIndexLookupEntry(void *a1, const __CFLocale *a2, unsigned int a3, uint64_t a4)
{
  uint64_t v4 = 0;
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (a2 && a1 && a3)
  {
    if ((int)SILanguagesGetLanguageID(a2) < 2)
    {
      return 0;
    }
    else
    {
      bzero(v18, 0x400uLL);
      unsigned int v17 = 0;
      uint64_t v8 = a1[4];
      if (!v8) {
        uint64_t v8 = a1[5];
      }
      uint64_t v9 = a1[2];
      if (!v9) {
        uint64_t v9 = a1[3];
      }
      uint64_t v4 = 0;
      if (v8)
      {
        if (v9)
        {
          uint64_t Key = SIDataMapGetKey(v9, a3, v18, 1024, &v17);
          uint64_t v4 = Key;
          if (a4)
          {
            if (Key)
            {
              *(_OWORD *)(a4 + 16) = 0u;
              *(_OWORD *)(a4 + 32) = 0u;
              *(_OWORD *)a4 = 0u;
              uint64_t v11 = v17;
              if (v17)
              {
                uint64_t v12 = 0;
                unsigned int v13 = 0;
                uint64_t v14 = 0;
                do
                {
                  if (v18[v12] != 58 || v13 <= 5)
                  {
                    switch(v13)
                    {
                      case 0u:
                        *(double *)a4 = atof(&v18[v14]);
                        uint64_t v14 = v12 + 1;
                        unsigned int v13 = 1;
                        break;
                      case 1u:
                        *(double *)(a4 + 8) = atof(&v18[v14]);
                        uint64_t v14 = v12 + 1;
                        unsigned int v13 = 2;
                        break;
                      case 2u:
                        *(double *)(a4 + 16) = atof(&v18[v14]);
                        uint64_t v14 = v12 + 1;
                        unsigned int v13 = 3;
                        break;
                      case 3u:
                        *(double *)(a4 + 24) = atof(&v18[v14]);
                        uint64_t v14 = v12 + 1;
                        unsigned int v13 = 4;
                        break;
                      case 4u:
                        *(double *)(a4 + 32) = atof(&v18[v14]);
                        uint64_t v14 = v12 + 1;
                        unsigned int v13 = 5;
                        break;
                      case 5u:
                        *(double *)(a4 + 40) = atof(&v18[v14]);
                        uint64_t v14 = v12;
                        unsigned int v13 = 6;
                        break;
                      default:
                        JUMPOUT(0);
                    }
                  }
                  ++v12;
                }
                while (v11 != v12);
              }
            }
          }
        }
      }
    }
  }
  return v4;
}

uint64_t SIGeoIndexGetCount(uint64_t a1)
{
  if (a1 && ((uint64_t v2 = *(void *)(a1 + 16)) != 0 || (uint64_t v2 = *(void *)(a1 + 24)) != 0)) {
    return SIDataMapGetCount(v2);
  }
  else {
    return 0;
  }
}

void SIGeoIndexWrite(uint64_t a1, const __CFDictionary *a2)
{
  if (a1)
  {
    uint64_t v3 = *(void *)(a1 + 24);
    if (v3)
    {
      if (*(void *)(a1 + 40))
      {
        SIDataMapWrite(v3, 0);
        SIDataMapRelease(*(void **)(a1 + 24));
        *(void *)(a1 + 24) = 0;
        *(void *)(a1 + 16) = SIDataMapCreateWithOptions(*(const __CFURL **)(a1 + 8), @"geobase", 0);
        CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        CFStringRef v6 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"%@/%@", *(void *)(a1 + 8), @"stringbase");
        if (v6)
        {
          CFStringRef v7 = v6;
          CFURLRef v8 = CFURLCreateWithString(v5, v6, 0);
          if (v8)
          {
            CFURLRef v9 = v8;
            SIGeneralTrieWriteToFileURL(*(void *)(a1 + 40), v8);
            SIGeneralTrieRelease(*(char **)(a1 + 40));
            *(void *)(a1 + 40) = 0;
            *(void *)(a1 + 32) = SIGeneralTrieCreateFromFileURL(v9);
            CFRelease(v9);
          }
          CFRelease(v7);
        }
        if (a2) {
          CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(v5, 0, a2);
        }
        else {
          CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutable(v5, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        }
        uint64_t v11 = MutableCopy;
        if (MutableCopy)
        {
          uint64_t valuePtr = 2;
          CFNumberRef v12 = CFNumberCreate(v5, kCFNumberCFIndexType, &valuePtr);
          if (v12)
          {
            CFNumberRef v13 = v12;
            CFDictionarySetValue(v11, @"_SIGeoIndexVersion", v12);
            CFRelease(v13);
          }
          CFStringRef v14 = CFStringCreateWithFormat(v5, 0, @"%@/%@.plist", *(void *)(a1 + 8), @"config");
          if (v14)
          {
            CFStringRef v15 = v14;
            CFURLRef v16 = CFURLCreateWithString(v5, v14, 0);
            if (v16)
            {
              CFURLRef v17 = v16;
              CFTypeRef cf = 0;
              writeContentsOfDictionaryToURL(v11, v16, kCFPropertyListXMLFormat_v1_0, (CFErrorRef *)&cf);
              if (cf) {
                CFRelease(cf);
              }
              CFRelease(v17);
            }
            CFRelease(v15);
          }
          CFRelease(v11);
        }
      }
    }
  }
}

void SIGeoIndexRelease(void *a1)
{
  if (a1 && atomic_fetch_add((atomic_uint *volatile)a1, 0xFFFFFFFF) == 1)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEBUG)) {
      SIGeoIndexRelease_cold_1();
    }
    uint64_t v2 = (const void *)a1[1];
    if (v2) {
      CFRelease(v2);
    }
    uint64_t v3 = (void *)a1[2];
    if (v3) {
      SIDataMapRelease(v3);
    }
    uint64_t v4 = (void *)a1[3];
    if (v4) {
      SIDataMapRelease(v4);
    }
    CFAllocatorRef v5 = (char *)a1[4];
    if (v5) {
      SIGeneralTrieRelease(v5);
    }
    CFStringRef v6 = (char *)a1[5];
    if (v6) {
      SIGeneralTrieRelease(v6);
    }
    free(a1);
  }
}

void *fd_create_protected(int a1, const char *a2, int a3, unsigned __int8 a4)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  if (fd_create_protected_once != -1) {
    dispatch_once(&fd_create_protected_once, &__block_literal_global_3);
  }
  CFURLRef v8 = malloc_type_malloc(0x68uLL, 0x10300409CE040BCuLL);
  *(_DWORD *)CFURLRef v8 = -50529037;
  v8[2] = 0;
  v8[3] = 0;
  v8[1] = 0;
  v8[4] = 1;
  *((_DWORD *)v8 + 10) = -1;
  *((_DWORD *)v8 + 11) = a1;
  int v9 = (a3 & 3) != 0;
  *((_DWORD *)v8 + 12) = a3 | (v9 << 29);
  __int16 v10 = *((_WORD *)v8 + 28);
  *((_WORD *)v8 + 30) &= 0xFC00u;
  __int16 v11 = v10 & 0xFFF0 | (4 * v9);
  *((_WORD *)v8 + 28) = v11;
  CFNumberRef v12 = strdup(a2);
  *((unsigned char *)v8 + 52) = 0;
  *((_DWORD *)v8 + 17) = 0;
  v8[9] = v12;
  v8[10] = 0;
  v8[11] = 0;
  v8[12] = 0;
  *((_WORD *)v8 + 28) = v11 & 0xF00F | (16 * a4);
  uint64_t v21 = 0;
  int v13 = _fd_acquire_fd((uint64_t)v8, &v21);
  if (v13 == -1)
  {
    int v14 = *__error();
    bzero(v33, 0x400uLL);
    CFStringRef v15 = faccurate_realpath(a1, v33);
    if ((a3 & 0x200) != 0) {
      int v16 = 17;
    }
    else {
      int v16 = 2;
    }
    if (v14 == v16)
    {
      if (gSILogLevels[0] < 5)
      {
LABEL_15:
        fd_release((atomic_uint *)v8);
        CFURLRef v8 = 0;
        *__error() = v14;
        return v8;
      }
      int v17 = *__error();
      CFTypeID v18 = _SILogForLogForCategory(0);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136316162;
        CFStringRef v23 = v15;
        __int16 v24 = 2080;
        *(void *)CFURLRef v25 = a2;
        *(_WORD *)&v25[8] = 1024;
        *(_DWORD *)&v25[10] = a3;
        __int16 v26 = 1024;
        *(_DWORD *)CFTypeRef v27 = a1;
        *(_WORD *)&v27[4] = 1024;
        *(_DWORD *)&v27[6] = v14;
        _os_log_impl(&dword_1BDAD0000, v18, OS_LOG_TYPE_DEFAULT, "fd_open failed, path:%s, name:%s, flags:0x%x, parent_fd:%d, errno:%d", buf, 0x28u);
      }
    }
    else
    {
      int v17 = *__error();
      uint64_t v19 = _SILogForLogForCategory(0);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136316674;
        CFStringRef v23 = "fd_create_protected";
        __int16 v24 = 1024;
        *(_DWORD *)CFURLRef v25 = 207;
        *(_WORD *)&v25[4] = 2080;
        *(void *)&v25[6] = v15;
        __int16 v26 = 2080;
        *(void *)CFTypeRef v27 = a2;
        *(_WORD *)&v27[8] = 1024;
        int v28 = a3;
        __int16 v29 = 1024;
        int v30 = a1;
        __int16 v31 = 1024;
        int v32 = v14;
        _os_log_error_impl(&dword_1BDAD0000, v19, OS_LOG_TYPE_ERROR, "%s:%d: fd_open failed, path:%s, name:%s, flags:0x%x, parent_fd:%d, errno:%d", buf, 0x38u);
      }
    }
    *__error() = v17;
    goto LABEL_15;
  }
  *((_DWORD *)v8 + 12) &= 0xFFFFF9FF;
  _fd_release_fd(v8, v13, 0, v21);
  return v8;
}

int *__fd_create_protected_block_invoke()
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  v7.int rlim_cur = 0;
  v7.rlim_max = 0;
  if (getrlimit(8, &v7)) {
    int rlim_cur = 1024;
  }
  else {
    int rlim_cur = v7.rlim_cur;
  }
  gOpenLimit = rlim_cur;
  CFDictionaryRef v1 = malloc_type_calloc(1uLL, 0x18uLL, 0x10200406E52F545uLL);
  g_fd_list = (uint64_t)v1;
  int v2 = rlim_cur / 4;
  if (rlim_cur >= 512) {
    int v2 = 128;
  }
  v1[2] = v2;
  int v3 = *__error();
  uint64_t v4 = _SILogForLogForCategory(0);
  os_log_type_t v5 = 2 * (gSILogLevels[0] < 4);
  if (os_log_type_enabled(v4, v5))
  {
    *(_DWORD *)buf = 67109120;
    int v9 = gOpenLimit;
    _os_log_impl(&dword_1BDAD0000, v4, v5, "fd limit %d", buf, 8u);
  }
  uint64_t result = __error();
  *uint64_t result = v3;
  return result;
}

_DWORD *fd_close(_DWORD *a1, int a2, uint64_t a3)
{
  return _fd_release_fd(a1, a2, 0, a3);
}

void fd_release(atomic_uint *a1)
{
  if (a1 && atomic_fetch_add_explicit(a1 + 8, 0xFFFFFFFF, memory_order_relaxed) == 1)
  {
    if (*a1 != -50529037) {
      fd_release_cold_1();
    }
    uint64_t v3 = 0;
    pthread_mutex_lock(&g_fd_lock);
    int v2 = _fd_remove_locked((uint64_t)a1, &v3);
    pthread_mutex_unlock(&g_fd_lock);
    if (v2 != -1) {
      guarded_close_np();
    }
    *a1 = 0;
    free(*((void **)a1 + 9));
    if (*((void *)a1 + 10)) {
      fd_release();
    }
    free(a1);
  }
}

void *fd_create(int a1, const char *a2, int a3)
{
  return fd_create_protected(a1, a2, a3, 0);
}

void *fd_create_read_only(int a1, const char *a2)
{
  if (a1 == -1) {
    return 0;
  }
  uint64_t v4 = malloc_type_malloc(0x68uLL, 0x10300409CE040BCuLL);
  *(_DWORD *)uint64_t v4 = -50529037;
  int v4[2] = 0;
  v4[3] = 0;
  v4[4] = 0x100000001;
  *((_DWORD *)v4 + 10) = a1;
  *(void *)((char *)v4 + 44) = 0xFFFFFFFFLL;
  __int16 v5 = *((_WORD *)v4 + 28);
  *((_WORD *)v4 + 30) &= 0xFC00u;
  *((_WORD *)v4 + 28) = v5 & 0xFFF0;
  CFStringRef v6 = strdup(a2);
  *((unsigned char *)v4 + 52) = 0;
  v4[9] = v6;
  v4[10] = 0;
  *((_DWORD *)v4 + 17) = 1;
  v4[11] = 0;
  v4[12] = 0;
  return v4;
}

atomic_uint *fd_dup(uint64_t a1, int a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 0;
  }
  pthread_mutex_lock(&g_fd_lock);
  uint64_t v4 = *(atomic_uint **)(a1 + 80);
  if (v4)
  {
    atomic_fetch_add_explicit(v4 + 8, 1u, memory_order_relaxed);
  }
  else
  {
    pthread_mutex_unlock(&g_fd_lock);
    bzero(v12, 0x400uLL);
    __int16 v5 = fd_name(a1, v12, 0x400uLL);
    if (!v5 || (atomic_uint v6 = *(_DWORD *)(a1 + 44), v6 == -1))
    {
      uint64_t v4 = 0;
    }
    else
    {
      atomic_uint v7 = *(_DWORD *)(a1 + 48);
      if (a2)
      {
        uint64_t v4 = (atomic_uint *)fd_create_protected(*(_DWORD *)(a1 + 44), v12, *(_DWORD *)(a1 + 48), *(unsigned __int16 *)(a1 + 56) >> 4);
      }
      else
      {
        CFURLRef v8 = v5;
        uint64_t v4 = (atomic_uint *)malloc_type_calloc(1uLL, 0x68uLL, 0x10300409CE040BCuLL);
        *uint64_t v4 = -50529037;
        v4[8] = 1;
        __int16 v9 = v4[14] & 0xFFFB | (4 * ((*(_WORD *)(a1 + 56) >> 2) & 1));
        *((_WORD *)v4 + 28) = v9;
        v4[11] = v6;
        v4[12] = v7;
        *((void *)v4 + 9) = strdup(v8);
        *((_WORD *)v4 + 28) = *(_WORD *)(a1 + 56) & 0xFF0 | v9 & 0xF00F;
        v4[10] = -1;
      }
    }
    pthread_mutex_lock(&g_fd_lock);
    uint64_t v10 = *(void *)(a1 + 80);
    if (v10)
    {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v10 + 32), 1u, memory_order_relaxed);
      pthread_mutex_unlock(&g_fd_lock);
      fd_release(v4);
      return (atomic_uint *)v10;
    }
    if (v4) {
      atomic_fetch_add_explicit(v4 + 8, 1u, memory_order_relaxed);
    }
    *(void *)(a1 + 80) = v4;
  }
  pthread_mutex_unlock(&g_fd_lock);
  return v4;
}

uint64_t fd_retain(uint64_t result)
{
  if (result) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(result + 32), 1u, memory_order_relaxed);
  }
  return result;
}

char *fd_name(uint64_t a1, char *a2, size_t a3)
{
  if (!a1) {
    return 0;
  }
  if (*(_DWORD *)a1 != -50529037) {
    fd_name_cold_1();
  }
  os_unfair_lock_lock((os_unfair_lock_t)&g_name_lock);
  if (strlcpy(a2, *(const char **)(a1 + 72), a3) > a3) {
    a2 = 0;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&g_name_lock);
  return a2;
}

uint64_t fd_parent_fd(uint64_t a1)
{
  if (a1) {
    return *(unsigned int *)(a1 + 44);
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t fd_flags(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 48);
  }
  return result;
}

uint64_t close_inactive_fds_if_necessary(uint64_t result, uint64_t a2)
{
  if (result)
  {
    uint64_t result = _fd_close_inactive(*(_DWORD *)(a2 + 44), 0, 1, 1);
    if (!result)
    {
      uint64_t result = _fd_close_inactive(-1, 0, 1, 1);
      if (!result)
      {
        uint64_t result = _fd_close_inactive(*(_DWORD *)(a2 + 44), 0, 1, 0);
        if (!result)
        {
          return _fd_close_inactive(-1, 0, 1, 0);
        }
      }
    }
  }
  return result;
}

_DWORD *fd_create_sibling_protected(uint64_t a1, const char *a2, int a3, unsigned __int8 a4)
{
  if (!a1) {
    return 0;
  }
  CFURLRef v8 = malloc_type_malloc(0x68uLL, 0x10300409CE040BCuLL);
  *CFURLRef v8 = -50529037;
  *((void *)v8 + 2) = 0;
  *((void *)v8 + 3) = 0;
  *((void *)v8 + 4) = 1;
  v8[10] = -1;
  v8[11] = *(_DWORD *)(a1 + 44);
  v8[12] = a3 | (((a3 & 3) != 0) << 29);
  LOWORD(a3) = *((_WORD *)v8 + 28);
  *((_WORD *)v8 + 30) &= 0xFC00u;
  *((_WORD *)v8 + 28) = a3 & 0xFFF0;
  *((void *)v8 + 9) = strdup(a2);
  *((unsigned char *)v8 + 52) = 0;
  *((void *)v8 + 11) = 0;
  *((void *)v8 + 12) = 0;
  *((void *)v8 + 10) = 0;
  *((_WORD *)v8 + 28) = a3 & 0xF000 | (16 * a4);
  uint64_t v13 = 0;
  int v9 = _fd_acquire_fd((uint64_t)v8, &v13);
  if (v9 == -1)
  {
    int v10 = *__error();
    __int16 v11 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      fd_create_sibling_protected_cold_1((uint64_t)(v8 + 18), v8 + 11, v11);
    }
    *__error() = v10;
    fd_release(v8);
    return 0;
  }
  v8[12] &= 0xFFFFF9FF;
  _fd_release_fd(v8, v9, 0, v13);
  return v8;
}

_DWORD *fd_create_sibling_with_suffix_protected(uint64_t a1, const char *a2, int a3, unsigned __int8 a4)
{
  if (!a1) {
    return 0;
  }
  int v9 = 0;
  asprintf(&v9, "%s%s", *(const char **)(a1 + 72), a2);
  sibling_protected = fd_create_sibling_protected(a1, v9, a3, a4);
  free(v9);
  return sibling_protected;
}

_DWORD *fd_create_sibling_with_prefix_protected(uint64_t a1, const char *a2, int a3, unsigned __int8 a4)
{
  if (!a1) {
    return 0;
  }
  int v9 = 0;
  asprintf(&v9, "%s%s", a2, *(const char **)(a1 + 72));
  sibling_protected = fd_create_sibling_protected(a1, v9, a3, a4);
  free(v9);
  return sibling_protected;
}

_DWORD *fd_create_sibling(uint64_t a1, const char *a2, int a3)
{
  return fd_create_sibling_protected(a1, a2, a3, 0);
}

_DWORD *fd_create_sibling_with_suffix(uint64_t a1, const char *a2, int a3)
{
  return fd_create_sibling_with_suffix_protected(a1, a2, a3, 0);
}

_DWORD *fd_create_sibling_with_prefix(uint64_t a1, const char *a2, int a3)
{
  return fd_create_sibling_with_prefix_protected(a1, a2, a3, 0);
}

uint64_t fd_truncate(uint64_t a1, off_t a2)
{
  uint64_t v11 = 0;
  uint64_t v4 = _fd_acquire_fd(a1, &v11);
  if (v4 == -1) {
    return 0xFFFFFFFFLL;
  }
  int v5 = v4;
  uint64_t v6 = _fd_ftruncate_guarded(v4, (uint64_t)&v11, a2);
  int v7 = *__error();
  if (v6 == -1 || a2 == 0) {
    __int16 v9 = 0;
  }
  else {
    __int16 v9 = 2;
  }
  *(_WORD *)(a1 + 56) = *(_WORD *)(a1 + 56) & 0xFFFD | v9;
  _fd_release_fd((_DWORD *)a1, v5, 0, v11);
  if (v6 == -1) {
    *__error() = v7;
  }
  return v6;
}

uint64_t fd_truncate_and_make_readonly(uint64_t a1, off_t a2)
{
  uint64_t v3 = fd_truncate(a1, a2);
  if (!v3)
  {
    fd_make_readonly(a1);
    fd_chmod(a1, 0x100u);
  }
  return v3;
}

uint64_t fd_make_readonly(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v3 = 0;
    if (*(_DWORD *)result != -50529037) {
      fd_make_readonly_cold_1();
    }
    *(_DWORD *)(result + 48) = 0;
    pthread_mutex_lock(&g_fd_lock);
    if (*(_DWORD *)(v1 + 36) || *(_DWORD *)(v1 + 40) == -1)
    {
      return pthread_mutex_unlock(&g_fd_lock);
    }
    else
    {
      int v2 = _fd_remove_locked(v1, &v3);
      uint64_t result = pthread_mutex_unlock(&g_fd_lock);
      if (v2 != -1) {
        return guarded_close_np();
      }
    }
  }
  return result;
}

uint64_t fd_chmod(uint64_t a1, mode_t a2)
{
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  while (1)
  {
    uint64_t result = fchmodat(*(_DWORD *)(a1 + 44), *(const char **)(a1 + 72), a2, 2048);
    uint64_t v5 = g_prot_error_callback;
    if (result != -1 || g_prot_error_callback == 0) {
      break;
    }
    uint64_t v7 = *(unsigned int *)(a1 + 40);
    CFURLRef v8 = __error();
    if (((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t))(v5 + 16))(v5, v7, *v8, 19) & 1) == 0) {
      return 0xFFFFFFFFLL;
    }
  }
  return result;
}

uint64_t fd_zero_truncate(uint64_t a1)
{
  uint64_t v7 = 0;
  uint64_t v2 = _fd_acquire_fd(a1, &v7);
  if (v2 == -1) {
    return 0xFFFFFFFFLL;
  }
  int v3 = v2;
  if ((*(unsigned char *)(a1 + 48) & 3) == 0)
  {
    _fd_release_fd((_DWORD *)a1, v2, 0, v7);
    int v5 = 1;
LABEL_6:
    *__error() = v5;
    return 0xFFFFFFFFLL;
  }
  uint64_t v4 = _fd_ftruncate_guarded(v2, (uint64_t)&v7, 0);
  int v5 = *__error();
  *(_WORD *)(a1 + 56) &= ~2u;
  _fd_release_fd((_DWORD *)a1, v3, 0, v7);
  if (v4 == -1) {
    goto LABEL_6;
  }
  return v4;
}

uint64_t _fd_acquire_fd(uint64_t a1, void *a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    int v8 = *__error();
    __int16 v9 = _SILogForLogForCategory(0);
    os_log_type_t v10 = 2 * (gSILogLevels[0] < 4);
    if (os_log_type_enabled(v9, v10))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1BDAD0000, v9, v10, "open error NULL obj", buf, 2u);
    }
    *__error() = v8;
    uint64_t v6 = __error();
    int v7 = 2;
    goto LABEL_10;
  }
  if (*(_DWORD *)a1 != -50529037) {
    _fd_acquire_fd_cold_2();
  }
  pthread_mutex_lock(&g_fd_lock);
  if (*(unsigned char *)(a1 + 52))
  {
    pthread_mutex_unlock(&g_fd_lock);
    int v4 = *__error();
    int v5 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      _fd_acquire_fd_cold_1(v5);
    }
    *__error() = v4;
    uint64_t v6 = __error();
    int v7 = 22;
LABEL_10:
    *uint64_t v6 = v7;
    return 0xFFFFFFFFLL;
  }
  if (*(_DWORD *)(a1 + 40) == -1)
  {
    pthread_mutex_unlock(&g_fd_lock);
  }
  else
  {
    uint64_t updated = _fd_update_locked(a1, 0, a2);
    pthread_mutex_unlock(&g_fd_lock);
    if (updated != -1) {
      return updated;
    }
  }
  bzero(buf, 0x400uLL);
  int v13 = (*(unsigned __int16 *)(a1 + 56) >> 4);
  int v14 = fd_name(a1, (char *)buf, 0x400uLL);
  int v19 = _fd_open(*(unsigned int *)(a1 + 44), v14, *(_DWORD *)(a1 + 48), *(_WORD *)(a1 + 56) & 1, v13, v15, v16, v17, v18);
  if (v19 == -1) {
    return 0xFFFFFFFFLL;
  }
  int v20 = v19;
  uint64_t __buf = 0;
  arc4random_buf(&__buf, 8uLL);
  int v26 = *(_DWORD *)(a1 + 48);
  int v21 = change_fdguard_np();
  __error();
  if (v21 && gSILogLevels[0] >= 5)
  {
    int v23 = *__error();
    __int16 v24 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)CFURLRef v25 = 0;
      _os_log_impl(&dword_1BDAD0000, v24, OS_LOG_TYPE_DEFAULT, "open file failed to change fdguard", v25, 2u);
    }
    *__error() = v23;
  }
  pthread_mutex_lock(&g_fd_lock);
  if (*(_DWORD *)(a1 + 40) == -1)
  {
    *(void *)(a1 + 8) = __buf;
    *(_DWORD *)(a1 + 40) = v20;
    uint64_t updated = _fd_update_locked(a1, 1, a2);
    BOOL v22 = *(_DWORD *)(g_fd_list + 4) > *(_DWORD *)(g_fd_list + 8);
    pthread_mutex_unlock(&g_fd_lock);
  }
  else
  {
    uint64_t updated = _fd_update_locked(a1, 0, a2);
    pthread_mutex_unlock(&g_fd_lock);
    guarded_close_np();
    BOOL v22 = 0;
  }
  close_inactive_fds_if_necessary(v22, a1);
  return updated;
}

BOOL fd_validfs(_DWORD *a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = 0;
  int v2 = _fd_acquire_fd((uint64_t)a1, &v6);
  if (v2 == -1) {
    return 0;
  }
  int v3 = v2;
  bzero(&v7, 0x878uLL);
  int v4 = fstatfs(v3, &v7);
  _fd_release_fd(a1, v3, 0, v6);
  return v4 == 0;
}

uint64_t fd_stat(uint64_t a1, stat *a2)
{
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  while (1)
  {
    uint64_t result = fstatat(*(_DWORD *)(a1 + 44), *(const char **)(a1 + 72), a2, 2048);
    uint64_t v5 = g_prot_error_callback;
    if (result != -1 || g_prot_error_callback == 0) {
      break;
    }
    uint64_t v7 = *(unsigned int *)(a1 + 40);
    uint64_t v8 = __error();
    if (((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t))(v5 + 16))(v5, v7, *v8, 8) & 1) == 0) {
      return 0xFFFFFFFFLL;
    }
  }
  return result;
}

uint64_t fd_lseek(_DWORD *a1, off_t a2, int a3)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t v17 = 0;
  int v6 = _fd_acquire_fd((uint64_t)a1, &v17);
  if (v6 == -1) {
    goto LABEL_7;
  }
  while (1)
  {
    off_t v7 = lseek(v6, a2, a3);
    if (v7 != -1 || !g_prot_error_callback) {
      break;
    }
    int v8 = *__error();
    uint64_t v9 = g_prot_error_callback;
    uint64_t v10 = a1[10];
    uint64_t v11 = __error();
    if (((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t))(v9 + 16))(v9, v10, *v11, 9) & 1) == 0)
    {
      *__error() = v8;
      _fd_release_fd(a1, v6, 0, v17);
      goto LABEL_7;
    }
  }
  _fd_release_fd(a1, v6, 0, v17);
  if (v7 == -1)
  {
LABEL_7:
    bzero(v32, 0x400uLL);
    int v12 = *__error();
    int v13 = *__error();
    int v14 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      int v16 = fd_realpath(a1, v32);
      if (!v16)
      {
        int v16 = fd_name((uint64_t)a1, v32, 0x400uLL);
        if (!v16) {
          int v16 = "";
        }
      }
      *(_DWORD *)buf = 136316674;
      int v19 = "fd_lseek";
      __int16 v20 = 1024;
      int v21 = 619;
      __int16 v22 = 1024;
      int v23 = v6;
      __int16 v24 = 2080;
      CFURLRef v25 = v16;
      __int16 v26 = 2048;
      off_t v27 = a2;
      __int16 v28 = 1024;
      int v29 = a3;
      __int16 v30 = 1024;
      int v31 = v12;
      _os_log_error_impl(&dword_1BDAD0000, v14, OS_LOG_TYPE_ERROR, "%s:%d: lseek(%d %s, o:%lx, w:%d) err:%d", buf, 0x38u);
    }
    *__error() = v13;
    *__error() = v12;
    return -1;
  }
  return v7;
}

unsigned char *fd_realpath(_DWORD *a1, unsigned char *a2)
{
  uint64_t v8 = 0;
  int v4 = _fd_acquire_fd((uint64_t)a1, &v8);
  if (v4 == -1) {
    return 0;
  }
  int v5 = v4;
  int v6 = faccurate_realpath(v4, a2);
  _fd_release_fd(a1, v5, 0, v8);
  return v6;
}

uint64_t fd_pread(_DWORD *a1, void *a2, size_t a3, off_t a4)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  uint64_t v16 = 0;
  uint64_t v8 = _fd_acquire_fd((uint64_t)a1, &v16);
  int v9 = v8;
  if (v8 == -1 || (ssize_t v10 = prot_pread(v8, a2, a3, a4), _fd_release_fd(a1, v9, 0, v16), v10 == -1))
  {
    bzero(v31, 0x400uLL);
    int v11 = *__error();
    int v12 = *__error();
    int v13 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      int v15 = fd_realpath(a1, v31);
      if (!v15)
      {
        int v15 = fd_name((uint64_t)a1, v31, 0x400uLL);
        if (!v15) {
          int v15 = "";
        }
      }
      *(_DWORD *)buf = 136316674;
      __n128 v18 = "fd_pread";
      __int16 v19 = 1024;
      int v20 = 638;
      __int16 v21 = 1024;
      int v22 = v9;
      __int16 v23 = 2080;
      __int16 v24 = v15;
      __int16 v25 = 2048;
      off_t v26 = a4;
      __int16 v27 = 1024;
      int v28 = a3;
      __int16 v29 = 1024;
      int v30 = v11;
      _os_log_error_impl(&dword_1BDAD0000, v13, OS_LOG_TYPE_ERROR, "%s:%d: pread(%d %s, o:%lx, s:%d) err:%d", buf, 0x38u);
    }
    *__error() = v12;
    *__error() = v11;
    return -1;
  }
  return v10;
}

uint64_t fd_pwrite(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    *__error() = 2;
    return -1;
  }
  if (*(void *)(a1 + 96)) {
    fd_pwrite_cold_1();
  }
  uint64_t v17 = 0;
  uint64_t v8 = _fd_acquire_fd(a1, &v17);
  int v9 = v8;
  if (v8 == -1)
  {
    int v12 = *__error();
LABEL_9:
    bzero(v32, 0x400uLL);
    int v13 = *__error();
    int v14 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      uint64_t v16 = fd_realpath((_DWORD *)a1, v32);
      if (!v16)
      {
        uint64_t v16 = fd_name(a1, v32, 0x400uLL);
        if (!v16) {
          uint64_t v16 = "";
        }
      }
      *(_DWORD *)buf = 136316674;
      __int16 v19 = "fd_pwrite";
      __int16 v20 = 1024;
      int v21 = 668;
      __int16 v22 = 1024;
      int v23 = v9;
      __int16 v24 = 2080;
      __int16 v25 = v16;
      __int16 v26 = 2048;
      uint64_t v27 = a4;
      __int16 v28 = 1024;
      int v29 = a3;
      __int16 v30 = 1024;
      int v31 = v12;
      _os_log_error_impl(&dword_1BDAD0000, v14, OS_LOG_TYPE_ERROR, "%s:%d: pwrite(%d %s, o:%lx, s:%d) err:%d", buf, 0x38u);
    }
    *__error() = v13;
    *__error() = v12;
    return -1;
  }
  uint64_t v10 = prot_pwrite_guarded(v8, (uint64_t)&v17, a2, a3, a4);
  if (v10 == -1)
  {
    int v12 = *__error();
    _fd_release_fd((_DWORD *)a1, v9, 0, v17);
    goto LABEL_9;
  }
  uint64_t v11 = v10;
  _fd_release_fd((_DWORD *)a1, v9, 0, v17);
  return v11;
}

uint64_t fd_write(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    *__error() = 2;
    return -1;
  }
  if (*(void *)(a1 + 96)) {
    fd_write_cold_1();
  }
  uint64_t v15 = 0;
  uint64_t v6 = _fd_acquire_fd(a1, &v15);
  int v7 = v6;
  if (v6 == -1
    || (uint64_t v8 = prot_write_guarded(v6, (uint64_t)&v15, a2, a3),
        int v9 = *__error(),
        _fd_release_fd((_DWORD *)a1, v7, 0, v15),
        *__error() = v9,
        v8 == -1))
  {
    bzero(v28, 0x400uLL);
    int v10 = *__error();
    int v11 = *__error();
    int v12 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      int v14 = fd_realpath((_DWORD *)a1, v28);
      if (!v14)
      {
        int v14 = fd_name(a1, v28, 0x400uLL);
        if (!v14) {
          int v14 = "";
        }
      }
      *(_DWORD *)buf = 136316418;
      uint64_t v17 = "fd_write";
      __int16 v18 = 1024;
      int v19 = 697;
      __int16 v20 = 1024;
      int v21 = v7;
      __int16 v22 = 2080;
      int v23 = v14;
      __int16 v24 = 1024;
      int v25 = a3;
      __int16 v26 = 1024;
      int v27 = v10;
      _os_log_error_impl(&dword_1BDAD0000, v12, OS_LOG_TYPE_ERROR, "%s:%d: write(%d %s, s:%d) err:%d", buf, 0x2Eu);
    }
    *__error() = v11;
    *__error() = v10;
    return -1;
  }
  return v8;
}

uint64_t fd_sync(uint64_t a1, int a2, int a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (a3) {
    fd_system_status_stall_if_busy();
  }
  uint64_t v14 = 0;
  uint64_t v5 = _fd_acquire_fd(a1, &v14);
  uint64_t v6 = 0xFFFFFFFFLL;
  if (v5 != -1)
  {
    uint64_t v7 = v5;
    bzero(v16, 0x400uLL);
    int v13 = -1;
    __int16 v8 = *(_WORD *)(a1 + 56);
    if ((v8 & 0xE) == 6
      && (*(_WORD *)(a1 + 56) = v8 & 0xFFFB, bzero(&v15, 0x878uLL), fstatfs(*(_DWORD *)(a1 + 44), &v15) != -1)
      && *(_DWORD *)v15.f_fstypename ^ 0x73667061 | v15.f_fstypename[4])
    {
      int v9 = fd_name(a1, v16, 0x400uLL);
      if (v9)
      {
        if (fd_setDir(*(unsigned int *)(a1 + 44), &v13))
        {
          int v12 = 1;
          if (fsctl(v9, 0x80006817uLL, &v12, 0) != -1) {
            *(_WORD *)(a1 + 56) |= 0xCu;
          }
        }
      }
      if (a2) {
        goto LABEL_12;
      }
    }
    else
    {
      int v9 = 0;
      if (a2)
      {
LABEL_12:
        BOOL v10 = (*(_WORD *)(a1 + 56) & 8) == 0;
        goto LABEL_15;
      }
    }
    BOOL v10 = 0;
LABEL_15:
    uint64_t v6 = prot_fsync(v7, v10);
    if (v6 != -1 && (*(_WORD *)(a1 + 56) & 8) != 0)
    {
      v15.f_bstd::string::size_type size = 0;
      fsctl(v9, 0x80006817uLL, &v15, 0);
      *(_WORD *)(a1 + 56) &= 0xFFF5u;
    }
    if (v13 != -1) {
      md_resetdir(v13);
    }
    _fd_release_fd((_DWORD *)a1, v7, 0, v14);
  }
  return v6;
}

uint64_t _fd_cancel_pending_unlink(uint64_t result)
{
  if (result)
  {
    if ((*(_WORD *)(result + 60) & 0x100) != 0) {
      *(_WORD *)(result + 60) &= ~0x100u;
    }
  }
  return result;
}

uint64_t _fd_unlink_with_origin(uint64_t a1, int a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    int v13 = 0;
    if (fd_setDir(*(unsigned int *)(a1 + 44), &v13))
    {
      bzero(v15, 0x400uLL);
      int v4 = fd_name(a1, v15, 0x400uLL);
      if (v4)
      {
        uint64_t v5 = v4;
        int v6 = *__error();
        uint64_t v7 = _SILogForLogForCategory(6);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315138;
          *(void *)&uint8_t buf[4] = v5;
          _os_log_impl(&dword_1BDAD0000, v7, OS_LOG_TYPE_DEFAULT, "Unlink %s", buf, 0xCu);
        }
        *__error() = v6;
        os_unfair_lock_lock(&map_guard_lock);
        __int16 v8 = *(_WORD *)(a1 + 60);
        if (!(_BYTE)v8)
        {
          *(_WORD *)(a1 + 60) = v8 & 0xFCFF | 0x200;
          *(_DWORD *)(a1 + 64) = a2;
          os_unfair_lock_unlock(&map_guard_lock);
          if ((*(unsigned char *)(a1 + 48) & 3) != 0)
          {
            *(void *)buf = 0;
            uint64_t v10 = _fd_acquire_fd(a1, buf);
            if (v10 != -1)
            {
              int v11 = v10;
              _fd_ftruncate_guarded(v10, (uint64_t)buf, 0);
              _fd_release_fd((_DWORD *)a1, v11, 0, *(uint64_t *)buf);
            }
          }
          uint64_t v9 = unlink(v5);
          goto LABEL_14;
        }
        *(_WORD *)(a1 + 60) = v8 | 0x100;
        *(_DWORD *)(a1 + 64) = a2;
        os_unfair_lock_unlock(&map_guard_lock);
      }
      uint64_t v9 = 0xFFFFFFFFLL;
LABEL_14:
      md_resetdir(v13);
      return v9;
    }
  }
  return 0xFFFFFFFFLL;
}

uint64_t fd_unlink(uint64_t a1)
{
  return _fd_unlink_with_origin(a1, 0);
}

uint64_t fd_mmap(uint64_t a1)
{
  if (!a1)
  {
    *__error() = 22;
    return -1;
  }
  uint64_t v8 = 0;
  if (*(_DWORD *)(a1 + 44) == -1) {
    int v2 = *(_DWORD *)(a1 + 40);
  }
  else {
    int v2 = _fd_acquire_fd(a1, &v8);
  }
  if (v2 == -1) {
    return -1;
  }
  do
  {
    uint64_t v3 = __mmap();
    if (v3 != -1) {
      break;
    }
    uint64_t v4 = g_prot_error_callback;
    if (!g_prot_error_callback) {
      break;
    }
    uint64_t v5 = *(unsigned int *)(a1 + 40);
    int v6 = __error();
  }
  while (((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t))(v4 + 16))(v4, v5, *v6, 10) & 1) != 0);
  if (*(_DWORD *)(a1 + 44) != -1) {
    _fd_release_fd((_DWORD *)a1, v2, (*(_WORD *)(a1 + 56) & 2) == 0, v8);
  }
  return v3;
}

_DWORD *_fd_release_fd(_DWORD *result, int a2, int a3, uint64_t a4)
{
  if (result && a2 != -1)
  {
    uint64_t v5 = (uint64_t)result;
    uint64_t v11 = 0;
    if (*result != -50529037) {
      _fd_release_fd_cold_4();
    }
    pthread_mutex_lock(&g_fd_lock);
    int v8 = *(unsigned __int8 *)(v5 + 52);
    if (!*(unsigned char *)(v5 + 52))
    {
      if (*(_DWORD *)(v5 + 40) != a2) {
        _fd_release_fd_cold_3();
      }
      if (*(void *)(v5 + 8) != a4) {
        _fd_release_fd_cold_2();
      }
    }
    int v9 = *(_DWORD *)(v5 + 36);
    if (!v9) {
      _fd_release_fd_cold_1();
    }
    int v10 = v9 - 1;
    *(_DWORD *)(v5 + 36) = v10;
    if (v8 || v10 || !a3 || *(_DWORD *)(v5 + 68) || _fd_remove_locked(v5, &v11) == -1)
    {
      return (_DWORD *)pthread_mutex_unlock(&g_fd_lock);
    }
    else
    {
      *(_WORD *)(v5 + 56) &= ~8u;
      pthread_mutex_unlock(&g_fd_lock);
      return (_DWORD *)guarded_close_np();
    }
  }
  return result;
}

uint64_t fd_guarded_mmap(uint64_t a1)
{
  uint64_t v2 = fd_mmap(a1);
  if (v2 != -1)
  {
    os_unfair_lock_lock(&map_guard_lock);
    ++*(unsigned char *)(a1 + 60);
    os_unfair_lock_unlock(&map_guard_lock);
  }
  return v2;
}

uint64_t fd_guarded_munmap(uint64_t a1, void *a2, size_t a3)
{
  os_unfair_lock_lock(&map_guard_lock);
  __int16 v6 = *(_WORD *)(a1 + 60);
  if (!(_BYTE)v6)
  {
    os_unfair_lock_unlock(&map_guard_lock);
    si_analytics_log_0(v8, v9, v10, v11, v12, v13, v14, v15, a1);
    return 0;
  }
  *(_WORD *)(a1 + 60) = v6 & 0xFF00 | (v6 - 1);
  if ((_BYTE)v6 == 1)
  {
    *(_WORD *)(a1 + 60) = v6 & 0xFF00;
    BOOL v7 = (v6 & 0x100) == 0;
  }
  else
  {
    BOOL v7 = 1;
  }
  os_unfair_lock_unlock(&map_guard_lock);
  uint64_t v17 = 0;
  do
  {
    uint64_t v16 = v17;
    if (a2 != (void *)-1) {
      uint64_t v16 = munmap(a2, a3);
    }
    if (v16 != -1) {
      break;
    }
    uint64_t v18 = g_prot_error_callback;
    if (!g_prot_error_callback) {
      break;
    }
    uint64_t v19 = *(unsigned int *)(a1 + 40);
    __int16 v20 = __error();
    char v21 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t))(v18 + 16))(v18, v19, *v20, 11);
    uint64_t v17 = 0xFFFFFFFFLL;
  }
  while ((v21 & 1) != 0);
  if (v7) {
    return v16;
  }

  return _fd_unlink_with_origin(a1, 878);
}

void si_analytics_log_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  v9[0] = 0;
  v9[1] = &a9;
  vasprintf((char **)v9, "Overrelease of fd_obj %p", &a9);
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT)) {
    si_analytics_log_cold_1((uint64_t *)v9);
  }
  free(v9[0]);
}

uint64_t fd_read_advise(_DWORD *a1, uint64_t a2)
{
  uint64_t v11 = 0;
  int v4 = _fd_acquire_fd((uint64_t)a1, &v11);
  do
  {
    uint64_t v5 = fcntl(v4, 44, a2);
    uint64_t v6 = g_prot_error_callback;
    if (v5 != -1 || g_prot_error_callback == 0) {
      break;
    }
    uint64_t v8 = a1[10];
    uint64_t v9 = __error();
  }
  while (((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t))(v6 + 16))(v6, v8, *v9, 12) & 1) != 0);
  _fd_release_fd(a1, v4, 0, v11);
  return v5;
}

uint64_t fd_hold_assertion(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v16 = 0;
  int v6 = _fd_acquire_fd(a1, &v16);
  v15[0] = 0;
  v15[1] = (unint64_t)(a3 * 1000000000.0);
  uint64_t v7 = fcntl(v6, 108, v15);
  bzero(v18, 0x400uLL);
  fd_name(a1, v18, 0x400uLL);
  if ((v7 & 0x80000000) != 0)
  {
    int v12 = *__error();
    uint64_t v13 = _SILogForLogForCategory(10);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      fd_hold_assertion_cold_1();
    }
    *__error() = v12;
  }
  else if (a2)
  {
    bzero(__s, 0x402uLL);
    __sprintf_chk(__s, 0, 0x402uLL, "%s$", v18);
    size_t v8 = strlen(__s);
    uint64_t v9 = fd_write(a2, (uint64_t)__s, v8);
    if (v9 != strlen(__s))
    {
      int v10 = *__error();
      uint64_t v11 = _SILogForLogForCategory(10);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
        fd_hold_assertion_cold_2(v11);
      }
      *__error() = v10;
      uint64_t v7 = 0xFFFFFFFFLL;
    }
  }
  if (a1) {
    *(CFAbsoluteTime *)(a1 + 88) = CFAbsoluteTimeGetCurrent() + a3;
  }
  _fd_release_fd((_DWORD *)a1, v6, 0, v16);
  return v7;
}

uint64_t fd_drop_assertion(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  pthread_mutex_lock(&g_fd_lock);
  if (a1)
  {
    int v2 = *(_DWORD *)(a1 + 40);
    pthread_mutex_unlock(&g_fd_lock);
    if (v2 != -1)
    {
      uint64_t v10 = 0;
      int v3 = _fd_acquire_fd(a1, &v10);
      uint64_t v4 = fcntl(v3, 109, 0);
      if ((v4 & 0x80000000) != 0)
      {
        bzero(buf, 0x400uLL);
        int v5 = *__error();
        int v6 = _SILogForLogForCategory(10);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
          fd_drop_assertion_cold_1(a1, (char *)buf);
        }
        *__error() = v5;
      }
      *(void *)(a1 + 88) = 0;
      _fd_release_fd((_DWORD *)a1, v3, 0, v10);
      return v4;
    }
  }
  else
  {
    pthread_mutex_unlock(&g_fd_lock);
  }
  if (dword_1EA0DBB78 < 5) {
    return 0;
  }
  int v8 = *__error();
  uint64_t v9 = _SILogForLogForCategory(10);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1BDAD0000, v9, OS_LOG_TYPE_DEFAULT, "Unable to drop assertion as obj is invalid", buf, 2u);
  }
  uint64_t v4 = 0;
  *__error() = v8;
  return v4;
}

uint64_t fd_transfer_assertion(uint64_t a1, uint64_t a2)
{
  if (a1) {
    double v4 = *(double *)(a1 + 88);
  }
  else {
    double v4 = 0.0;
  }
  double v5 = v4 - CFAbsoluteTimeGetCurrent();
  if (v5 <= 0.0) {
    return 0;
  }
  uint64_t v10 = 0;
  int v6 = _fd_acquire_fd(a2, &v10);
  v9[0] = 0;
  v9[1] = (unint64_t)(v5 * 1000000000.0);
  uint64_t v7 = fcntl(v6, 108, v9);
  if (!v7)
  {
    if (a1) {
      *(void *)(a1 + 88) = 0;
    }
    if (a2) {
      *(double *)(a2 + 88) = v4;
    }
  }
  _fd_release_fd((_DWORD *)a2, v6, 0, v10);
  return v7;
}

uint64_t fd_update_assertion(uint64_t a1, int a2)
{
  if (a1) {
    double v4 = *(double *)(a1 + 88);
  }
  else {
    double v4 = 0.0;
  }
  double v5 = v4 - CFAbsoluteTimeGetCurrent();
  if (v5 <= 0.0) {
    return 0;
  }
  v7[0] = 0;
  v7[1] = (unint64_t)(v5 * 1000000000.0);
  uint64_t result = fcntl(a2, 108, v7);
  if (a1)
  {
    if (result) {
      *(void *)(a1 + 88) = 0;
    }
  }
  return result;
}

uint64_t fd_no_cache(uint64_t a1, int a2)
{
  uint64_t v7 = 0;
  uint64_t result = _fd_acquire_fd(a1, &v7);
  if (result != -1)
  {
    int v5 = result;
    *(_WORD *)(a1 + 56) = *(_WORD *)(a1 + 56) & 0xFFFE | (a2 != 0);
    uint64_t v6 = fcntl(result, 48, a2 != 0);
    fcntl(v5, 76, *(_WORD *)(a1 + 56) & 1);
    _fd_release_fd((_DWORD *)a1, v5, 0, v7);
    return v6;
  }
  return result;
}

uint64_t fd_get_no_cache(uint64_t result)
{
  if (result) {
    return *(_WORD *)(result + 56) & 1;
  }
  return result;
}

uint64_t fd_zero_fill_on_sync(uint64_t a1, int a2)
{
  if (a1) {
    *(_WORD *)(a1 + 56) = *(_WORD *)(a1 + 56) & 0xFFFB | (4 * (a2 != 0));
  }
  return 0;
}

uint64_t fd_rename(uint64_t a1, const char *a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    *(void *)uint64_t v16 = 0;
    int v4 = _fd_acquire_fd(a1, v16);
    if (v4 != -1)
    {
      int v5 = v4;
      bzero(v25, 0x400uLL);
      uint64_t v6 = fd_name(a1, v25, 0x400uLL);
      if (v6 && renameat(*(_DWORD *)(a1 + 44), v6, *(_DWORD *)(a1 + 44), a2) != -1)
      {
        uint64_t v7 = strdup(a2);
        os_unfair_lock_lock((os_unfair_lock_t)&g_name_lock);
        int v8 = *(void **)(a1 + 72);
        *(void *)(a1 + 72) = v7;
        os_unfair_lock_unlock((os_unfair_lock_t)&g_name_lock);
        free(v8);
        _fd_release_fd((_DWORD *)a1, v5, 0, *(uint64_t *)v16);
        pthread_mutex_lock(&g_fd_lock);
        uint64_t v9 = *(atomic_uint **)(a1 + 80);
        if (v9)
        {
          *(void *)(a1 + 80) = 0;
          pthread_mutex_unlock(&g_fd_lock);
          fd_release(v9);
        }
        else
        {
          pthread_mutex_unlock(&g_fd_lock);
        }
        return 0;
      }
      _fd_release_fd((_DWORD *)a1, v5, 0, *(uint64_t *)v16);
    }
  }
  else
  {
    *__error() = 22;
  }
  bzero(v25, 0x400uLL);
  int v10 = *__error();
  int v11 = *__error();
  uint64_t v12 = _SILogForLogForCategory(0);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    uint64_t v14 = fd_realpath((_DWORD *)a1, v25);
    *(_DWORD *)uint64_t v16 = 136316162;
    *(void *)&v16[4] = "fd_rename";
    uint64_t v15 = "";
    __int16 v17 = 1024;
    if (v14) {
      uint64_t v15 = v14;
    }
    int v18 = 1086;
    __int16 v19 = 2080;
    __int16 v20 = v15;
    __int16 v21 = 2080;
    __int16 v22 = a2;
    __int16 v23 = 1024;
    int v24 = v10;
    _os_log_error_impl(&dword_1BDAD0000, v12, OS_LOG_TYPE_ERROR, "%s:%d: rename(%s, %s) err:%d", v16, 0x2Cu);
  }
  *__error() = v11;
  *__error() = v10;
  return 0xFFFFFFFFLL;
}

uint64_t fd_reparent(uint64_t a1, int a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a1 + 44) == a2) {
    return 0;
  }
  *(void *)uint64_t v14 = 0;
  int v5 = _fd_acquire_fd(a1, v14);
  if (v5 != -1)
  {
    int v6 = v5;
    bzero(v21, 0x400uLL);
    uint64_t v7 = fd_name(a1, v21, 0x400uLL);
    if (v7 && renameat(*(_DWORD *)(a1 + 44), v7, a2, v7) != -1)
    {
      *(_DWORD *)(a1 + 44) = a2;
      _fd_release_fd((_DWORD *)a1, v6, 0, *(uint64_t *)v14);
      pthread_mutex_lock(&g_fd_lock);
      int v8 = *(atomic_uint **)(a1 + 80);
      if (v8)
      {
        *(void *)(a1 + 80) = 0;
        pthread_mutex_unlock(&g_fd_lock);
        fd_release(v8);
      }
      else
      {
        pthread_mutex_unlock(&g_fd_lock);
      }
      return 0;
    }
    _fd_release_fd((_DWORD *)a1, v6, 0, *(uint64_t *)v14);
  }
  bzero(v21, 0x400uLL);
  int v9 = *__error();
  int v10 = *__error();
  int v11 = _SILogForLogForCategory(0);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
  {
    uint64_t v12 = fd_realpath((_DWORD *)a1, v21);
    *(_DWORD *)uint64_t v14 = 136315906;
    *(void *)&v14[4] = "fd_reparent";
    uint64_t v13 = "";
    __int16 v15 = 1024;
    if (v12) {
      uint64_t v13 = v12;
    }
    int v16 = 1136;
    __int16 v17 = 2080;
    int v18 = v13;
    __int16 v19 = 1024;
    int v20 = v9;
    _os_log_error_impl(&dword_1BDAD0000, v11, OS_LOG_TYPE_ERROR, "%s:%d: reparent(%s) err:%d", v14, 0x22u);
  }
  *__error() = v10;
  *__error() = v9;
  return 0xFFFFFFFFLL;
}

uint64_t fd_rename_over_and_release(uint64_t a1, uint64_t a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    uint64_t v16 = 0;
    int v4 = _fd_acquire_fd(a2, &v16);
    if (v4 != -1)
    {
      int v5 = v4;
      bzero(v25, 0x400uLL);
      int v6 = fd_name(a1, v25, 0x400uLL);
      bzero(buf, 0x400uLL);
      uint64_t v7 = fd_name(a2, (char *)buf, 0x400uLL);
      if (renameat(*(_DWORD *)(a2 + 44), v7, *(_DWORD *)(a1 + 44), v6) != -1)
      {
        os_unfair_lock_lock((os_unfair_lock_t)&g_name_lock);
        uint64_t v8 = *(void *)(a1 + 72);
        *(void *)(a1 + 72) = *(void *)(a2 + 72);
        *(void *)(a2 + 72) = v8;
        os_unfair_lock_unlock((os_unfair_lock_t)&g_name_lock);
        _fd_release_fd((_DWORD *)a2, v5, 0, v16);
        fd_release((atomic_uint *)a1);
        pthread_mutex_lock(&g_fd_lock);
        int v9 = *(atomic_uint **)(a2 + 80);
        if (v9)
        {
          *(void *)(a2 + 80) = 0;
          pthread_mutex_unlock(&g_fd_lock);
          fd_release(v9);
        }
        else
        {
          pthread_mutex_unlock(&g_fd_lock);
        }
        return 0;
      }
      _fd_release_fd((_DWORD *)a2, v5, 0, v16);
      fd_release((atomic_uint *)a1);
    }
  }
  else
  {
    *__error() = 22;
  }
  bzero(v25, 0x400uLL);
  int v10 = *__error();
  int v11 = *__error();
  uint64_t v12 = _SILogForLogForCategory(0);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    uint64_t v14 = fd_realpath((_DWORD *)a2, v25);
    *(_DWORD *)buf = 136315906;
    int v18 = "fd_rename_over_and_release";
    __int16 v15 = "";
    __int16 v19 = 1024;
    if (v14) {
      __int16 v15 = v14;
    }
    int v20 = 1192;
    __int16 v21 = 2080;
    uint64_t v22 = v15;
    __int16 v23 = 1024;
    int v24 = v10;
    _os_log_error_impl(&dword_1BDAD0000, v12, OS_LOG_TYPE_ERROR, "%s:%d: rename_over(%s) err:%d", buf, 0x22u);
  }
  *__error() = v11;
  *__error() = v10;
  return 0xFFFFFFFFLL;
}

uint64_t fd_protection_class(uint64_t result)
{
  if (result) {
    return (*(unsigned __int16 *)(result + 56) >> 4);
  }
  return result;
}

_DWORD *fd_name_ptr(_DWORD *a1)
{
  uint64_t v1 = a1;
  if (a1)
  {
    if (*a1 != -50529037) {
      fd_name_ptr_cold_1();
    }
    os_unfair_lock_lock((os_unfair_lock_t)&g_name_lock);
    uint64_t v1 = (_DWORD *)*((void *)v1 + 9);
    os_unfair_lock_unlock((os_unfair_lock_t)&g_name_lock);
  }
  return v1;
}

uint64_t _fd_remove_locked(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  *a2 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 24);
  if (v4)
  {
    if (!v2) {
      _fd_remove_locked_cold_2();
    }
    uint64_t v5 = g_fd_list;
    uint64_t v6 = *(void *)(g_fd_list + 16);
    if (v6 == a1)
    {
      *(void *)(g_fd_list + 16) = v4;
      uint64_t v6 = v4;
    }
    *(void *)(v2 + 24) = v4;
    *(void *)(*(void *)(a1 + 24) + 16) = v2;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
    int v7 = *(_DWORD *)v5;
    int v8 = *(_DWORD *)v5 - 1;
    *(_DWORD *)uint64_t v5 = v8;
    if (v6 == a1)
    {
      if (v8) {
        _fd_remove_locked_cold_3();
      }
      *(void *)(v5 + 16) = 0;
      if (v3 != -1) {
        --*(_DWORD *)(v5 + 4);
      }
    }
    else
    {
      if (!v8) {
        _fd_remove_locked_cold_4();
      }
      if (v3 != -1)
      {
        --*(_DWORD *)(v5 + 4);
        if (v7 <= 0) {
          _fd_remove_locked_cold_5();
        }
      }
    }
  }
  else if (v2)
  {
    _fd_remove_locked_cold_1();
  }
  *(_DWORD *)(a1 + 40) = -1;
  *(void *)(a1 + 8) = 0;
  return v3;
}

uint64_t fd_dump()
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  pthread_mutex_lock(&g_fd_lock);
  if (*(void *)(g_fd_list + 16))
  {
    int v0 = *__error();
    uint64_t v1 = _SILogForLogForCategory(0);
    os_log_type_t v2 = gSILogLevels[0] < 3;
    if (os_log_type_enabled(v1, (os_log_type_t)(gSILogLevels[0] < 3)))
    {
      int v3 = *(_DWORD *)g_fd_list;
      int v4 = *(_DWORD *)(g_fd_list + 4);
      int v5 = *(_DWORD *)(g_fd_list + 8);
      *(_DWORD *)buf = 67109632;
      int v52 = v3;
      __int16 v53 = 1024;
      int v54 = v4;
      __int16 v55 = 1024;
      int v56 = v5;
      _os_log_impl(&dword_1BDAD0000, v1, v2, "*warn* item count: %d, fd count: %d, soft limit: %d", buf, 0x14u);
    }
    *__error() = v0;
    uint64_t v6 = *(void *)(g_fd_list + 16);
    uint64_t v7 = *(void *)(v6 + 16);
    do
    {
      bzero(buf, 0x400uLL);
      if (*(_DWORD *)v6 != -50529037) {
        fd_dump_cold_1();
      }
      int v8 = *(_DWORD *)(v6 + 40);
      if (v8 == -1)
      {
        bzero(v43, 0x400uLL);
      }
      else
      {
        int v9 = faccurate_realpath(v8, buf);
        int v10 = *__error();
        int v11 = _SILogForLogForCategory(0);
        os_log_type_t v12 = gSILogLevels[0] < 3;
        if (os_log_type_enabled(v11, (os_log_type_t)(gSILogLevels[0] < 3)))
        {
          int v14 = *(_DWORD *)(v6 + 40);
          int v13 = *(_DWORD *)(v6 + 44);
          int v15 = *(_DWORD *)(v6 + 36);
          *(_DWORD *)uint64_t v43 = 136315906;
          uint64_t v44 = v9;
          __int16 v45 = 1024;
          int v46 = v13;
          __int16 v47 = 1024;
          int v48 = v14;
          __int16 v49 = 1024;
          int v50 = v15;
          _os_log_impl(&dword_1BDAD0000, v11, v12, "*warn* path:%s, dir:%d, fd:%d, oc:%d", v43, 0x1Eu);
        }
        *__error() = v10;
        bzero(v43, 0x400uLL);
        if (v9)
        {
          int v16 = *__error();
          __int16 v17 = _SILogForLogForCategory(0);
          BOOL v18 = gSILogLevels[0] < 3;
          if (os_log_type_enabled(v17, (os_log_type_t)(gSILogLevels[0] < 3)))
          {
            __int16 v19 = fd_name(v6, (char *)v43, 0x400uLL);
            int v21 = *(_DWORD *)(v6 + 40);
            int v20 = *(_DWORD *)(v6 + 44);
            int v22 = *(_DWORD *)(v6 + 36);
            *(_DWORD *)std::string v35 = 136315906;
            std::string v36 = v19;
            __int16 v37 = 1024;
            *(_DWORD *)int64_t v38 = v20;
            *(_WORD *)&v38[4] = 1024;
            *(_DWORD *)&v38[6] = v21;
            *(_WORD *)unsigned int v39 = 1024;
            *(_DWORD *)&v39[2] = v22;
            __int16 v23 = v17;
            os_log_type_t v24 = v18;
            int v25 = "*warn* name: %s dir:%d, fd:%d, oc:%d";
            uint32_t v26 = 30;
LABEL_15:
            _os_log_impl(&dword_1BDAD0000, v23, v24, v25, v35, v26);
            goto LABEL_16;
          }
          goto LABEL_16;
        }
      }
      int v27 = faccurate_realpath(*(_DWORD *)(v6 + 44), buf);
      int v16 = *__error();
      __int16 v28 = _SILogForLogForCategory(0);
      BOOL v29 = gSILogLevels[0] < 3;
      if (os_log_type_enabled(v28, (os_log_type_t)(gSILogLevels[0] < 3)))
      {
        __int16 v30 = fd_name(v6, (char *)v43, 0x400uLL);
        int v32 = *(_DWORD *)(v6 + 40);
        int v31 = *(_DWORD *)(v6 + 44);
        int v33 = *(_DWORD *)(v6 + 36);
        *(_DWORD *)std::string v35 = 136316162;
        std::string v36 = v27;
        __int16 v37 = 2080;
        *(void *)int64_t v38 = v30;
        *(_WORD *)&v38[8] = 1024;
        *(_DWORD *)unsigned int v39 = v31;
        *(_WORD *)&v39[4] = 1024;
        int v40 = v32;
        __int16 v41 = 1024;
        int v42 = v33;
        __int16 v23 = v28;
        os_log_type_t v24 = v29;
        int v25 = "*warn* path: %s//%s, dir:%d, fd:%d, oc:%d";
        uint32_t v26 = 40;
        goto LABEL_15;
      }
LABEL_16:
      *__error() = v16;
      uint64_t v6 = *(void *)(v6 + 24);
    }
    while (v6 != v7);
  }
  return pthread_mutex_unlock(&g_fd_lock);
}

uint64_t fd_mark_purgable(_DWORD *a1, uint64_t a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = 0;
  uint64_t v13 = a2;
  int v3 = _fd_acquire_fd((uint64_t)a1, &v12);
  if (v3 == -1) {
    return 0xFFFFFFFFLL;
  }
  int v4 = v3;
  uint64_t v5 = ffsctl(v3, 0xC0084A44uLL, &v13, 0);
  if (v5 == -1)
  {
    int v7 = *__error();
    bzero(v24, 0x400uLL);
    int v8 = faccurate_realpath(a1[11], v24);
    int v9 = *__error();
    int v10 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316162;
      int v15 = "fd_mark_purgable";
      __int16 v16 = 1024;
      int v17 = 1741;
      __int16 v18 = 2080;
      __int16 v19 = v8;
      __int16 v20 = 2048;
      uint64_t v21 = v13;
      __int16 v22 = 1024;
      int v23 = v7;
      _os_log_error_impl(&dword_1BDAD0000, v10, OS_LOG_TYPE_ERROR, "%s:%d: mark purgable failed, path:%s flags:0x%ld errno:%d", buf, 0x2Cu);
    }
    *__error() = v9;
    _fd_release_fd(a1, v4, 0, v12);
    *__error() = v7;
    return 0xFFFFFFFFLL;
  }
  uint64_t v6 = v5;
  _fd_release_fd(a1, v4, 0, v12);
  return v6;
}

_DWORD *fd_invalidate(_DWORD *result)
{
  if (result)
  {
    uint64_t v1 = (uint64_t)result;
    if (*result != -50529037) {
      fd_invalidate_cold_1();
    }
    pthread_mutex_lock(&g_fd_lock);
    *(unsigned char *)(v1 + 52) = 1;
    if (!*(_DWORD *)(v1 + 36) || (uint64_t v2 = 0, _fd_remove_locked(v1, &v2) == -1))
    {
      return (_DWORD *)pthread_mutex_unlock(&g_fd_lock);
    }
    else
    {
      *(_WORD *)(v1 + 56) &= ~8u;
      pthread_mutex_unlock(&g_fd_lock);
      return (_DWORD *)guarded_close_np();
    }
  }
  return result;
}

uint64_t fd_close_inactive(uint64_t result, const char *a2)
{
  if (g_fd_list)
  {
    BOOL v3 = result == -1 && a2 == 0;
    return _fd_close_inactive(result, a2, 0, v3);
  }
  return result;
}

uint64_t _fd_close_inactive(int a1, const char *a2, char a3, int a4)
{
  int v32 = a1;
  int v33 = a4;
  uint64_t v34 = a2;
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  if (gOpenLimit >= 0) {
    int v5 = gOpenLimit;
  }
  else {
    int v5 = gOpenLimit + 1;
  }
  int v6 = v5 >> 1;
  if (gOpenLimit >= 2048) {
    int v7 = 1024;
  }
  else {
    int v7 = v6;
  }
  uint64_t v8 = ((uint64_t (*)(void))MEMORY[0x1F4188790])();
  int v10 = (char *)&v30 - v9;
  MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)&v30 - v11;
  bzero((char *)&v30 - v11, v13);
  pthread_mutex_lock(&g_fd_lock);
  int v14 = (_DWORD *)g_fd_list;
  uint64_t v15 = *(void *)(g_fd_list + 16);
  if (!v15) {
    goto LABEL_12;
  }
  uint64_t v16 = *(void *)(v15 + 16);
  int v17 = v34;
  if (v34) {
    int v17 = (const char *)strlen(v34);
  }
  int v18 = *(_DWORD *)(g_fd_list + 4);
  if (v18 < *(_DWORD *)(g_fd_list + 8) && (a3 & 1) != 0)
  {
LABEL_12:
    pthread_mutex_unlock(&g_fd_lock);
    return 0;
  }
  __int16 v30 = v17;
  unint64_t v31 = v7;
  bzero(v10, 4 * v7);
  uint64_t v19 = 0;
  int v20 = 1;
  int v22 = v32;
  int v21 = v33;
  while (1)
  {
    int v23 = *(_DWORD *)(v16 + 40);
    if (v23 != -1
      && !*(_DWORD *)(v16 + 36)
      && v18
      && !*(_DWORD *)(v16 + 68)
      && (!v21 || (*(_WORD *)(v16 + 56) & 2) == 0))
    {
      if (v22 != -1)
      {
        if (*(_DWORD *)(v16 + 44) != v22) {
          goto LABEL_16;
        }
        if (v30)
        {
          bzero(v35, 0x400uLL);
          os_log_type_t v24 = fd_name(v16, v35, 0x400uLL);
          if (!v24)
          {
            int v14 = (_DWORD *)g_fd_list;
LABEL_35:
            int v22 = v32;
            int v21 = v33;
            goto LABEL_16;
          }
          int v25 = strncmp(v34, v24, (size_t)v30);
          int v14 = (_DWORD *)g_fd_list;
          if (v25) {
            goto LABEL_35;
          }
          int v23 = *(_DWORD *)(v16 + 40);
          int v22 = v32;
          int v21 = v33;
        }
      }
      __int16 v26 = *(_WORD *)(v16 + 56);
      *(void *)&v12[8 * v19] = *(void *)(v16 + 8);
      *(_DWORD *)&v10[4 * v19] = v23;
      *(void *)(v16 + 8) = 0;
      *(_DWORD *)(v16 + 40) = -1;
      *(_WORD *)(v16 + 56) = v26 & 0xFFF5;
      int v27 = v14[1];
      v14[1] = v27 - 1;
      if (v27 <= 0) {
        _fd_close_inactive_cold_3();
      }
      if (++v19 >= v31) {
        goto LABEL_37;
      }
    }
LABEL_16:
    if (v20 - 1 >= *v14) {
      _fd_close_inactive_cold_2();
    }
    if (v16 == v15) {
      break;
    }
    uint64_t v16 = *(void *)(v16 + 16);
    int v18 = v14[1];
    ++v20;
    if (v18 < v14[2] && (a3 & 1) != 0) {
      goto LABEL_37;
    }
  }
  if (v20 != *v14) {
    _fd_close_inactive_cold_1();
  }
LABEL_37:
  pthread_mutex_unlock(&g_fd_lock);
  if (v19)
  {
    for (uint64_t i = 0; i != v19; ++i)
    {
      guarded_close_np();
      v12 += 8;
    }
  }
  return v19;
}

void fd_assert_not_unlinked(uint64_t a1)
{
  os_unfair_lock_lock(&map_guard_lock);
  if (a1)
  {
    __int16 v2 = *(_WORD *)(a1 + 60);
    os_unfair_lock_unlock(&map_guard_lock);
    if ((v2 & 0x200) != 0) {
      fd_assert_not_unlinked_cold_1(a1);
    }
  }
  else
  {
    os_unfair_lock_unlock(&map_guard_lock);
  }
}

_DWORD *fd_warmup(_DWORD *a1)
{
  uint64_t v4 = 0;
  uint64_t result = (_DWORD *)_fd_acquire_fd((uint64_t)a1, &v4);
  if (result != -1)
  {
    a1[17] = 1;
    uint64_t v3 = v4;
    return _fd_release_fd(a1, (int)result, 0, v3);
  }
  return result;
}

uint64_t fd_cooldown(uint64_t result)
{
  if (result) {
    *(_DWORD *)(result + 68) = 0;
  }
  return result;
}

uint64_t fd_copyfile(uint64_t a1, uint64_t a2, int a3)
{
  int v27 = 0;
  if (!a1)
  {
    uint64_t v12 = __error();
    int v13 = 2;
LABEL_8:
    *uint64_t v12 = v13;
    return 0xFFFFFFFFLL;
  }
  if (!a2)
  {
    uint64_t v12 = __error();
    int v13 = 22;
    goto LABEL_8;
  }
  int v6 = *(_DWORD *)(a1 + 44);
  int v7 = *(const char **)(a1 + 72);
  int v8 = *(_DWORD *)(a2 + 44);
  uint64_t v9 = *(const char **)(a2 + 72);
  if (a3)
  {
    int v10 = copyFile(v6, v7, v8, v9, &v27);
    uint64_t v11 = v10 ^ 1u;
    if ((v10 & 1) == 0) {
      return v11;
    }
  }
  else
  {
    uint64_t v11 = copyFileNoClone(v6, v7, v8, v9, &v27) ^ 1;
    if (v11) {
      return v11;
    }
  }
  if (*(_DWORD *)(a2 + 40) != -1)
  {
    uint64_t __buf = 0;
    pthread_mutex_lock(&g_fd_lock);
    int v15 = _fd_remove_locked(a2, &__buf);
    pthread_mutex_unlock(&g_fd_lock);
    if (v15 != -1)
    {
      guarded_close_np();
      int v20 = _fd_open(*(unsigned int *)(a2 + 44), *(char **)(a2 + 72), *(_DWORD *)(a2 + 48), *(_WORD *)(a2 + 56) & 1, (*(unsigned __int16 *)(a2 + 56) >> 4), v16, v17, v18, v19);
      arc4random_buf(&__buf, 8uLL);
      int v25 = *(_DWORD *)(a2 + 48);
      int v21 = change_fdguard_np();
      __error();
      if (v21 && gSILogLevels[0] >= 5)
      {
        int v22 = *__error();
        int v23 = _SILogForLogForCategory(0);
        if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)os_log_type_t v24 = 0;
          _os_log_impl(&dword_1BDAD0000, v23, OS_LOG_TYPE_DEFAULT, "copy file failed to change fdguard", v24, 2u);
        }
        *__error() = v22;
      }
      if (v20 != -1)
      {
        pthread_mutex_lock(&g_fd_lock);
        if (*(_DWORD *)(a2 + 40) == -1)
        {
          *(_DWORD *)(a2 + 40) = v20;
          *(void *)(a2 + 8) = __buf;
          fd_update_assertion(a2, v20);
          _fd_update_locked(a2, 1, &__buf);
        }
        pthread_mutex_unlock(&g_fd_lock);
        guarded_close_np();
      }
    }
  }
  return v11;
}

uint64_t _fd_open(uint64_t a1, char *a2, int a3, int a4, int a5, int a6, int a7, int a8, __n128 a9)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  a9.n128_u64[0] = 136315394;
  while (1)
  {
    uint64_t v14 = a5 ? si_openat_protected(a1, a2, a3, 384, a5) : _safe_open_at(a1, a2, a3, a4, a5, a6, a7, a8, a9, 0x180u);
    uint64_t v15 = v14;
    if (a4)
    {
      if (v14 != -1) {
        break;
      }
    }
    if (v14 != -1 || !g_prot_error_callback) {
      return v15;
    }
    int v16 = *__error();
    if (gSILogLevels[0] >= 5)
    {
      int v22 = *__error();
      __n128 v19 = _SILogForLogForCategory(0);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        int v20 = *__error();
        *(_DWORD *)buf = 136315394;
        os_log_type_t v24 = a2;
        __int16 v25 = 1024;
        int v26 = v20;
        _os_log_impl(&dword_1BDAD0000, v19, OS_LOG_TYPE_DEFAULT, "~~~~########### file error %s %d", buf, 0x12u);
      }
      *__error() = v22;
    }
    uint64_t v17 = g_prot_error_callback;
    int v18 = __error();
    if (((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t))(v17 + 16))(v17, a1, *v18, 15) & 1) == 0)
    {
      *__error() = v16;
      return v15;
    }
  }
  fcntl(v14, 48, 1);
  fcntl(v15, 76, 1);
  return v15;
}

uint64_t _fd_update_locked(uint64_t a1, int a2, void *a3)
{
  uint64_t result = *(unsigned int *)(a1 + 40);
  if (result == -1) {
    _fd_update_locked_cold_1();
  }
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(a1 + 24);
  if (v6)
  {
    if (!v5) {
      _fd_update_locked_cold_5();
    }
    uint64_t v7 = g_fd_list;
    uint64_t v8 = *(void *)(g_fd_list + 16);
    if (!v8) {
      _fd_update_locked_cold_6();
    }
    if (v8 != a1)
    {
      *(void *)(v5 + 24) = v6;
      *(void *)(*(void *)(a1 + 24) + 16) = v5;
      *(void *)(a1 + 16) = *(void *)(v8 + 16);
      *(void *)(a1 + 24) = v8;
      *(void *)(*(void *)(v8 + 16) + 24) = a1;
      *(void *)(v8 + 16) = a1;
    }
    if (a2) {
LABEL_8:
    }
      ++*(_DWORD *)(v7 + 4);
  }
  else
  {
    if (v5) {
      _fd_update_locked_cold_4();
    }
    uint64_t v7 = g_fd_list;
    uint64_t v9 = *(void *)(g_fd_list + 16);
    int v10 = *(_DWORD *)g_fd_list;
    if (v9)
    {
      if (!v10) {
        _fd_update_locked_cold_3();
      }
      *(void *)(a1 + 16) = *(void *)(v9 + 16);
      *(void *)(a1 + 24) = v9;
      *(void *)(*(void *)(v9 + 16) + 24) = a1;
      *(void *)(v9 + 16) = a1;
      int v11 = v10 + 1;
    }
    else
    {
      if (v10) {
        _fd_update_locked_cold_2();
      }
      *(void *)(a1 + 16) = a1;
      *(void *)(a1 + 24) = a1;
      int v11 = 1;
    }
    *(_DWORD *)uint64_t v7 = v11;
    if (a2) {
      goto LABEL_8;
    }
  }
  *(void *)(v7 + 16) = a1;
  ++*(_DWORD *)(a1 + 36);
  *a3 = *(void *)(a1 + 8);
  return result;
}

uint64_t _safe_open_at(uint64_t a1, char *a2, int a3, int a4, int a5, int a6, int a7, int a8, __n128 a9, unsigned __int16 a10)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  if ((a3 & 0x200) != 0)
  {
    bzero(&v57, 0x400uLL);
    if (faccurate_realpath(a1, &v57))
    {
      if ((_BYTE)v57 && (unsigned __int16)v57 != 47)
      {
        uint64_t v13 = a10;
        goto LABEL_3;
      }
      int v26 = *__error();
      uint64_t v27 = _SILogForLogForCategory(0);
      if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
      {
        int v53 = 136316162;
        *(void *)int v54 = "_safe_open_at";
        *(_WORD *)&v54[8] = 1024;
        *(_DWORD *)&v54[10] = 1404;
        __int16 v55 = 2080;
        v56[0] = &v57;
        LOWORD(v56[1]) = 2080;
        *(void *)((char *)&v56[1] + 2) = a2;
        WORD1(v56[2]) = 2048;
        *(void *)((char *)&v56[2] + 4) = a3;
        _os_log_error_impl(&dword_1BDAD0000, v27, OS_LOG_TYPE_ERROR, "%s:%d: Invalid parent path, currentPath:%s, path:%s, flags:0x%lx\n", (uint8_t *)&v53, 0x30u);
      }
      int v28 = 22;
    }
    else
    {
      int v28 = *__error();
      int v26 = *__error();
      BOOL v29 = _SILogForLogForCategory(0);
      if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
      {
        int v53 = 136316418;
        *(void *)int v54 = "_safe_open_at";
        *(_WORD *)&v54[8] = 1024;
        *(_DWORD *)&v54[10] = 1400;
        __int16 v55 = 1024;
        LODWORD(v56[0]) = a1;
        WORD2(v56[0]) = 2080;
        *(void *)((char *)v56 + 6) = a2;
        HIWORD(v56[1]) = 2048;
        v56[2] = a3;
        LOWORD(v56[3]) = 1024;
        *(_DWORD *)((char *)&v56[3] + 2) = v28;
        _os_log_error_impl(&dword_1BDAD0000, v29, OS_LOG_TYPE_ERROR, "%s:%d: faccurate_realpath() failed, parent_fd:%d, path:%s, flags:0x%lx, errno:%d\n", (uint8_t *)&v53, 0x32u);
      }
    }
    *__error() = v26;
    *__error() = v28;
    return 0xFFFFFFFFLL;
  }
  uint64_t v13 = 0;
LABEL_3:
  a9.n128_u64[0] = 136315394;
  __n128 v50 = a9;
  while (1)
  {
    uint64_t result = openat(a1, a2, a3);
    if (result != -1) {
      break;
    }
    uint64_t v15 = g_prot_error_callback;
    if (!g_prot_error_callback) {
      break;
    }
    if (gSILogLevels[0] >= 5)
    {
      LODWORD(v51) = *__error();
      uint64_t v17 = _SILogForLogForCategory(0);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        int v18 = *__error();
        int v57 = v50.n128_u32[0];
        uint64_t v58 = a2;
        __int16 v59 = 1024;
        int v60 = v18;
        _os_log_impl(&dword_1BDAD0000, v17, OS_LOG_TYPE_DEFAULT, "~~~~########### file error %s %d", (uint8_t *)&v57, 0x12u);
      }
      *__error() = v51;
      uint64_t v15 = g_prot_error_callback;
    }
    int v16 = __error();
    if (((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t))(v15 + 16))(v15, a1, *v16, 13) & 1) == 0) {
      goto LABEL_17;
    }
  }
  if (result != -1) {
    return result;
  }
LABEL_17:
  LODWORD(v51) = *__error();
  if ((v51 - 23) > 1) {
    goto LABEL_36;
  }
  int v19 = *__error();
  int v20 = _SILogForLogForCategory(0);
  os_log_type_t v21 = gSILogLevels[0] < 3;
  if (os_log_type_enabled(v20, (os_log_type_t)(gSILogLevels[0] < 3)))
  {
    int v57 = 67109120;
    LODWORD(v58) = v51;
    _os_log_impl(&dword_1BDAD0000, v20, v21, "*warn* too many open files, err: %d, closing inactive and trying again", (uint8_t *)&v57, 8u);
  }
  *__error() = v19;
  _fd_close_inactive(-1, 0, 0, 0);
  while (1)
  {
    uint64_t result = openat(a1, a2, a3, v13);
    if (result != -1) {
      break;
    }
    uint64_t v22 = g_prot_error_callback;
    if (!g_prot_error_callback) {
      break;
    }
    if (gSILogLevels[0] >= 5)
    {
      int v49 = *__error();
      os_log_type_t v24 = _SILogForLogForCategory(0);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
      {
        int v25 = *__error();
        int v57 = v50.n128_u32[0];
        uint64_t v58 = a2;
        __int16 v59 = 1024;
        int v60 = v25;
        _os_log_impl(&dword_1BDAD0000, v24, OS_LOG_TYPE_DEFAULT, "~~~~########### file error %s %d", (uint8_t *)&v57, 0x12u);
      }
      *__error() = v49;
      uint64_t v22 = g_prot_error_callback;
    }
    int v23 = __error();
    if (((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t))(v22 + 16))(v22, a1, *v23, 14) & 1) == 0) {
      goto LABEL_36;
    }
  }
  if (result == -1)
  {
LABEL_36:
    if (v51 == 23) {
      _safe_open_at_cold_1();
    }
    if (v51 == 24)
    {
      CFAllocatorRef v30 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CFMutableStringRef Mutable = CFBagCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D520]);
      bzero(&v57, 0x400uLL);
      if (gOpenLimit < 1)
      {
        int v34 = 0;
        unint64_t v33 = 0;
      }
      else
      {
        int v32 = 0;
        unint64_t v33 = 0;
        int v34 = 0;
        do
        {
          std::string v35 = faccurate_realpath(v32, &v57);
          if (v35)
          {
            if (*v35)
            {
              CFStringRef v36 = CFStringCreateWithCString(v30, v35, 0x8000100u);
              CFBagAddValue(Mutable, v36);
              CFRelease(v36);
            }
            else
            {
              CFBagAddValue(Mutable, &stru_1F181E430);
              unint64_t v33 = (v33 + 1);
            }
            ++v34;
          }
          ++v32;
        }
        while (v32 < gOpenLimit);
      }
      v50.n128_u64[0] = v33;
      size_t v37 = MEMORY[0x1C1882D00](Mutable);
      MEMORY[0x1F4188790](v37);
      unsigned int v39 = (uint64_t *)((char *)&v48 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0));
      bzero(v39, v38);
      CFBagGetValues(Mutable, (const void **)v39);
      v52[0] = MEMORY[0x1E4F143A8];
      v52[1] = 0x40000000;
      v52[2] = ___safe_open_at_block_invoke;
      v52[3] = &__block_descriptor_tmp_26_0;
      v52[4] = Mutable;
      qsort_b(v39, v37, 8uLL, v52);
      pthread_mutex_lock(&g_fd_lock);
      if (v34 >= 1)
      {
        uint64_t v41 = 0;
        uint64_t v42 = v34;
        *(void *)&long long v40 = 67109378;
        long long v51 = v40;
        do
        {
          if (*v39 != v41)
          {
            int v43 = *__error();
            uint64_t v44 = _SILogForLogForCategory(0);
            os_log_type_t v45 = gSILogLevels[0] < 3;
            if (os_log_type_enabled(v44, (os_log_type_t)(gSILogLevels[0] < 3)))
            {
              int v46 = MEMORY[0x1C1882D10](Mutable, *v39);
              uint64_t v47 = *v39;
              int v53 = v51;
              *(_DWORD *)int v54 = v46;
              *(_WORD *)&v54[4] = 2112;
              *(void *)&v54[6] = v47;
              _os_log_impl(&dword_1BDAD0000, v44, v45, "*warn* (%d) - %@", (uint8_t *)&v53, 0x12u);
            }
            *__error() = v43;
            uint64_t v41 = *v39;
          }
          ++v39;
          --v42;
        }
        while (v42);
      }
      pthread_mutex_unlock(&g_fd_lock);
      CFRelease(Mutable);
      __message_assert_1("%s:%u: failed assertion '%s' %s Too many open files %d (%d) (%d)", "fd_obj.c", 1508, "false", "", 24, v34, v50.n128_u32[0]);
      MEMORY[0xBAD] = -559038737;
      abort();
    }
    return 0xFFFFFFFFLL;
  }
  return result;
}

CFComparisonResult ___safe_open_at_block_invoke(uint64_t a1, const __CFString **a2, const __CFString **a3)
{
  CFStringRef v4 = *a2;
  CFStringRef v5 = *a3;
  uint64_t v6 = MEMORY[0x1C1882D10](*(void *)(a1 + 32), *a2);
  uint64_t v7 = MEMORY[0x1C1882D10](*(void *)(a1 + 32), v5);
  if (v6 < v7) {
    return 0xFFFFFFFFLL;
  }
  if (v6 <= v7) {
    return CFStringCompare(v4, v5, 0);
  }
  return 1;
}

void OUTLINED_FUNCTION_2_0(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x2Cu);
}

_DWORD *SQueueCreate(int a1)
{
  uint64_t result = malloc_type_calloc(1uLL, 0x38uLL, 0x1030040023F4036uLL);
  *uint64_t result = ((a1 + 4127) & 0xFFFFF000) - 32;
  return result;
}

void SQueueDestroy(uint64_t a1)
{
  if (a1)
  {
    __int16 v2 = *(void **)(a1 + 24);
    if (v2)
    {
      do
      {
        uint64_t v3 = (void *)v2[1];
        free(v2);
        __int16 v2 = v3;
      }
      while (v3);
    }
    free(*(void **)(a1 + 16));
    free((void *)a1);
  }
}

uint64_t SQueueLargestAllocatableSize(unsigned int *a1)
{
  return *a1;
}

uint64_t SQueueSize(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

BOOL SQueueIsEmpty(uint64_t a1)
{
  return *(void *)(a1 + 8) == 0;
}

uint64_t SQueuePeekData(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2 && (uint64_t v3 = *(void *)(v2 + 24)) != 0)
  {
    if (a2) {
      *a2 = v3;
    }
    return *(void *)(a1 + 40);
  }
  else
  {
    uint64_t result = 0;
    if (a2) {
      *a2 = 0;
    }
  }
  return result;
}

uint64_t SQueueDropData(void *a1, unint64_t a2)
{
  uint64_t v3 = (void *)a1[3];
  if (!v3) {
    SQueueDropData_cold_1();
  }
  unint64_t v5 = v3[3];
  while (1)
  {
    if (a2 >= v5) {
      unint64_t v6 = v5;
    }
    else {
      unint64_t v6 = a2;
    }
    v3[3] = v5 - v6;
    a1[1] -= v6;
    uint64_t v7 = a1[5];
    a1[5] = v7 + v6;
    if (!v3[3] && v3 != (void *)a1[4])
    {
      uint64_t v8 = (void *)v3[1];
      a1[3] = v8;
      a1[5] = 0;
      if (v8)
      {
        *uint64_t v8 = 0;
        a1[5] = a1[3] + 32;
      }
      if (a1[2])
      {
        free(v3);
        --gSlabs;
      }
      else
      {
        a1[2] = v3;
      }
    }
    uint64_t v3 = (void *)a1[3];
    a2 -= v6;
    if (!a2) {
      break;
    }
    unint64_t v5 = v3[3];
    if (!v5)
    {
      uint64_t v9 = v7 + v6;
      unint64_t v11 = a1[1];
      if (!v11) {
        goto LABEL_23;
      }
LABEL_21:
      unint64_t v10 = 0;
LABEL_22:
      if (v10 <= v11)
      {
LABEL_23:
        if (a2) {
          SQueueDropData_cold_3();
        }
        return v9;
      }
LABEL_26:
      SQueueDropData_cold_2();
    }
  }
  uint64_t v9 = v7 + v6;
  if (v3)
  {
    unint64_t v10 = v3[3];
    unint64_t v11 = a1[1];
    if (v10) {
      goto LABEL_22;
    }
    if (v11) {
      goto LABEL_21;
    }
    goto LABEL_23;
  }
  if (a1[1]) {
    goto LABEL_26;
  }
  return v9;
}

BOOL SQueueIsSlabAfter(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    return 0;
  }
  while (v2 + 32 > a2 || v2 + (unint64_t)*(unsigned int *)(v2 + 16) + 32 < a2)
  {
    uint64_t v2 = *(void *)(v2 + 8);
    if (!v2) {
      return 0;
    }
  }
  return *(void *)(v2 + 8) != 0;
}

unint64_t SQueueAvailableDataAfterOffset(uint64_t a1, unint64_t a2, unint64_t *a3, unsigned char *a4)
{
  unint64_t v4 = *(void *)(a1 + 24);
  if (a2 && v4)
  {
    uint64_t v5 = *(void *)(a1 + 24);
    while (1)
    {
      unint64_t v6 = v5 + 32;
      if (v5 + 32 <= a2 && v5 + (unint64_t)*(unsigned int *)(v5 + 16) + 32 >= a2) {
        break;
      }
      uint64_t v5 = *(void *)(v5 + 8);
      if (!v5) {
        goto LABEL_21;
      }
    }
    if (v5 != v4) {
      goto LABEL_12;
    }
  }
  else if (!v4)
  {
    unint64_t result = 0;
    uint64_t v5 = 0;
    goto LABEL_22;
  }
  unint64_t v6 = *(void *)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 24);
LABEL_12:
  if (a2) {
    unint64_t result = a2;
  }
  else {
    unint64_t result = v6;
  }
  uint64_t v8 = *(void *)(v5 + 24);
  if (v6 + v8 <= result)
  {
    uint64_t v9 = *(void *)(v5 + 8);
    if (v9)
    {
      unint64_t v4 = *(void *)(v9 + 24);
      unint64_t v10 = v9 + 32;
      if (v4) {
        unint64_t result = v10;
      }
      else {
        unint64_t result = 0;
      }
    }
    else
    {
LABEL_21:
      unint64_t result = 0;
      unint64_t v4 = 0;
    }
  }
  else
  {
    unint64_t v4 = v8 + v6 - result;
  }
LABEL_22:
  if (a3) {
    *a3 = v4;
  }
  if (a4)
  {
    if (v5) {
      LOBYTE(v5) = *(void *)(v5 + 8) != 0;
    }
    *a4 = v5;
  }
  return result;
}

uint64_t SQueueCouldPush(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 32);
  if (v2) {
    BOOL v4 = v2 == v3;
  }
  else {
    BOOL v4 = 0;
  }
  if (!v4)
  {
    uint64_t v2 = *(void *)(a1 + 32);
    if (!v3) {
      return 0;
    }
    return (v2 - *(_DWORD *)(a1 + 48) + *(_DWORD *)(v2 + 16) + 32) >= a2;
  }
  if (*(void *)(v2 + 24)) {
    return (v2 - *(_DWORD *)(a1 + 48) + *(_DWORD *)(v2 + 16) + 32) >= a2;
  }
  return 1;
}

void *SQueueOpenPushData(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 32);
  if (v3) {
    BOOL v5 = v3 == v4;
  }
  else {
    BOOL v5 = 0;
  }
  if (v5)
  {
    if (!*(void *)(v3 + 24))
    {
      unint64_t result = (void *)(v3 + 32);
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v3 = *(void *)(a1 + 32);
    if (!v4)
    {
      NewSlab = squeue_getNewSlab((unsigned int *)a1, a2);
      NewSlab[3] = 0;
      void *NewSlab = 0;
      NewSlab[1] = 0;
      *(void *)(a1 + 24) = NewSlab;
      *(void *)(a1 + 32) = NewSlab;
      unint64_t result = NewSlab + 4;
LABEL_11:
      *(void *)(a1 + 40) = result;
      goto LABEL_12;
    }
  }
  unint64_t result = *(void **)(a1 + 48);
  if ((v3 - result + *(_DWORD *)(v3 + 16) + 32) >= a2) {
    return result;
  }
  uint64_t v8 = squeue_getNewSlab((unsigned int *)a1, a2);
  *(void *)(*(void *)(a1 + 32) + 8) = v8;
  v8[3] = 0;
  *uint64_t v8 = *(void *)(a1 + 32);
  v8[1] = 0;
  *(void *)(a1 + 32) = v8;
  unint64_t result = v8 + 4;
LABEL_12:
  *(void *)(a1 + 48) = result;
  return result;
}

_DWORD *squeue_getNewSlab(unsigned int *a1, unint64_t a2)
{
  unint64_t result = (_DWORD *)*((void *)a1 + 2);
  if (result && result[4] >= a2)
  {
    *((void *)a1 + 2) = 0;
  }
  else
  {
    unint64_t v4 = *a1;
    if (v4 <= a2) {
      unint64_t v5 = a2;
    }
    else {
      unint64_t v5 = v4;
    }
    unint64_t result = malloc_type_malloc(v5 + 32, 0xCAB03470uLL);
    result[4] = v5;
    ++gSlabs;
  }
  return result;
}

void *SQueueClosePushData(void *result, uint64_t a2)
{
  result[6] += a2;
  *(void *)(result[4] + 24) += a2;
  result[1] += a2;
  return result;
}

void *SQueuePushData(void *a1, unint64_t a2, const void *a3)
{
  unint64_t v6 = SQueueOpenPushData((uint64_t)a1, a2);
  uint64_t v7 = v6;
  if (a3) {
    memcpy(v6, a3, a2);
  }
  a1[6] += a2;
  *(void *)(a1[4] + 24) += a2;
  a1[1] += a2;
  return v7;
}

double SQueueEmpty(void *a1)
{
  uint64_t v3 = a1 + 3;
  uint64_t v2 = (void *)a1[3];
  if (v2)
  {
    do
    {
      unint64_t v4 = (void *)v2[1];
      if (a1[2])
      {
        free(v2);
        --gSlabs;
      }
      else
      {
        a1[2] = v2;
      }
      uint64_t v2 = v4;
    }
    while (v4);
  }
  a1[1] = 0;
  double result = 0.0;
  *uint64_t v3 = 0u;
  v3[1] = 0u;
  return result;
}

void *SQueueDropBefore(void *a1, unint64_t a2)
{
  double result = (void *)a1[3];
  if ((unint64_t)(result + 4) <= a2)
  {
    if ((unint64_t)result + *((unsigned int *)result + 4) + 32 >= a2)
    {
      uint64_t v9 = a1[5];
      uint64_t v8 = a1 + 5;
      result[3] -= a2 - v9;
      *(v8 - 4) -= a2 - v9;
      goto LABEL_13;
    }
    goto LABEL_5;
  }
  if (result)
  {
    do
    {
LABEL_5:
      if ((unint64_t)(result + 4) <= a2 && (unint64_t)result + *((unsigned int *)result + 4) + 32 >= a2) {
        break;
      }
      unint64_t v5 = (void *)result[1];
      uint64_t v6 = a1[2];
      a1[1] -= result[3];
      if (v6)
      {
        free(result);
        --gSlabs;
      }
      else
      {
        a1[2] = result;
      }
      double result = v5;
    }
    while (v5);
  }
  *double result = 0;
  a1[3] = result;
  uint64_t v7 = a2 - (void)result - 32;
  result[3] -= v7;
  a1[1] -= v7;
  uint64_t v8 = a1 + 5;
LABEL_13:
  *uint64_t v8 = a2;
  return result;
}

void *SQueuePopBack(void *a1, unint64_t a2)
{
  for (double result = (void *)a1[4];
        (unint64_t)(result + 4) > a2 || (unint64_t)result + *((unsigned int *)result + 4) + 32 < a2;
        double result = v5)
  {
    unint64_t v5 = (void *)*result;
    uint64_t v6 = a1[2];
    a1[1] -= result[3];
    if (v6)
    {
      free(result);
      --gSlabs;
    }
    else
    {
      a1[2] = result;
    }
  }
  result[1] = 0;
  a1[4] = result;
  a1[1] -= result[3];
  unint64_t v7 = a2 - (void)(result + 4);
  result[3] = v7;
  if (result == (void *)a1[3])
  {
    unint64_t v7 = a2 - a1[5];
    result[3] = v7;
  }
  a1[1] += v7;
  a1[6] = a2;
  return result;
}

uint64_t fd_setDir(uint64_t a1, int *a2)
{
  *a2 = -1;
  memset(&v5, 0, sizeof(v5));
  if (!fstat(a1, &v5))
  {
    *a2 = open(".", 4);
    if (!MEMORY[0x1C1884060](a1)) {
      return 1;
    }
    if ((*a2 & 0x80000000) == 0)
    {
      close(*a2);
      uint64_t result = 0;
      *a2 = -1;
      return result;
    }
  }
  return 0;
}

uint64_t sync_invalidate_fd(int a1, uint64_t a2, uint64_t a3)
{
  if (!a3) {
    return 0;
  }
  off_t v3 = a2 & ~*MEMORY[0x1E4F14AF0];
  size_t v4 = a2 - v3 + a3;
  stat v5 = (char *)mmap(0, v4, 1, 1025, a1, v3);
  uint64_t v6 = sync_invalidate_mapping(v5, v4);
  munmap(v5, v4);
  return v6;
}

uint64_t sync_invalidate_mapping(char *a1, uint64_t a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (a1 == (char *)-1)
  {
    *__error() = 22;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO))
    {
      int v8 = *__error();
      int v11 = 134218240;
      uint64_t v12 = -1;
      __int16 v13 = 1024;
      int v14 = v8;
      uint64_t v9 = MEMORY[0x1E4F14500];
LABEL_16:
      _os_log_impl(&dword_1BDAD0000, v9, OS_LOG_TYPE_INFO, "fd_msync(%p) err %d", (uint8_t *)&v11, 0x12u);
    }
  }
  else
  {
    unint64_t v3 = (unint64_t)&a1[a2];
    if (&a1[a2] > a1)
    {
      size_t v4 = 0x20000;
      stat v5 = a1;
LABEL_4:
      if ((unint64_t)&v5[v4] > v3) {
        size_t v4 = v3 - (void)v5;
      }
      do
      {
        fd_system_status_stall_if_busy();
        uint64_t v6 = msync(v5, v4, 16);
        int v7 = *__error();
        madvise(v5, v4, 4);
        if (v6 != -1)
        {
          v5 += v4;
          if ((unint64_t)v5 < v3) {
            goto LABEL_4;
          }
          return v6;
        }
      }
      while (g_prot_error_callback && ((*(uint64_t (**)(void))(g_prot_error_callback + 16))() & 1) != 0);
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_INFO)) {
        return 0xFFFFFFFFLL;
      }
      int v11 = 134218240;
      uint64_t v12 = (uint64_t)a1;
      __int16 v13 = 1024;
      int v14 = v7;
      uint64_t v9 = MEMORY[0x1E4F14500];
      goto LABEL_16;
    }
  }
  return 0xFFFFFFFFLL;
}

uint64_t fd_msync(void *a1, size_t a2, int a3, int a4)
{
  if (a4) {
    fd_system_status_stall_if_busy();
  }

  return msync(a1, a2, a3);
}

void _fd_disable_preallocate()
{
  gDisablePreallocate = 1;
}

void _fd_enable_preallocate()
{
  gDisablePreallocate = 0;
}

uint64_t ci_preallocate(int a1, uint64_t a2)
{
  if (gDisablePreallocate == 1)
  {
    *__error() = 45;
    return 0xFFFFFFFFLL;
  }
  uint64_t v3 = a2;
  v7[0] = 0x300000002;
  v7[1] = 0;
  void v7[2] = a2;
  v7[3] = 0;
  uint64_t result = fcntl(a1, 42, v7);
  if (result == -1)
  {
    if (*__error() == 45) {
      return 0xFFFFFFFFLL;
    }
    while (v3 >= 419430401)
    {
      long long v5 = xmmword_1BDB236E0;
      long long v6 = unk_1BDB236F0;
      v3 -= 419430400;
      if (fcntl(a1, 42, &v5) == -1) {
        return 0xFFFFFFFFLL;
      }
    }
    long long v5 = 0x300000004uLL;
    long long v6 = (unint64_t)v3;
    uint64_t result = fcntl(a1, 42, &v5);
    if (result == -1) {
      return 0xFFFFFFFFLL;
    }
  }
  return result;
}

uint64_t prot_error_check()
{
  uint64_t result = g_prot_error_callback;
  if (g_prot_error_callback) {
    return (*(uint64_t (**)(void))(g_prot_error_callback + 16))();
  }
  return result;
}

uint64_t prot_fsync(uint64_t a1, int a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    while (1)
    {
      double Current = CFAbsoluteTimeGetCurrent();
      uint64_t v4 = fcntl(a1, 85);
      if (v4 != -1)
      {
        uint64_t v5 = v4;
        goto LABEL_17;
      }
      if (*__error() == 25 || *__error() == 45)
      {
        *__error() = 0;
        uint64_t v5 = fcntl(a1, 51);
      }
      else
      {
        uint64_t v5 = 0xFFFFFFFFLL;
      }
      if (v5 != -1) {
        break;
      }
      uint64_t v6 = g_prot_error_callback;
      if (!g_prot_error_callback) {
        break;
      }
      int v7 = __error();
      if (((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t))(v6 + 16))(v6, a1, *v7, 2) & 1) == 0) {
        goto LABEL_13;
      }
    }
    if (v5 == -1) {
      goto LABEL_13;
    }
  }
  else
  {
LABEL_13:
    while (1)
    {
      double Current = CFAbsoluteTimeGetCurrent();
      uint64_t v5 = fsync(a1);
      if (v5 != -1) {
        break;
      }
      uint64_t v8 = g_prot_error_callback;
      if (!g_prot_error_callback) {
        break;
      }
      uint64_t v9 = __error();
      if (((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t))(v8 + 16))(v8, a1, *v9, 3) & 1) == 0)
      {
        uint64_t v5 = 0xFFFFFFFFLL;
        break;
      }
    }
  }
LABEL_17:
  int v10 = *__error();
  double v11 = CFAbsoluteTimeGetCurrent();
  bzero(v23, 0x400uLL);
  int v12 = *__error();
  __int16 v13 = _SILogForLogForCategory(0);
  os_log_type_t v14 = 2 * (gSILogLevels[0] < 4);
  if (os_log_type_enabled(v13, v14))
  {
    double v15 = v11 - Current;
    int v16 = faccurate_realpath(a1, v23);
    uint64_t v17 = "";
    if (v16) {
      uint64_t v17 = v16;
    }
    int v19 = 134218242;
    double v20 = v15;
    __int16 v21 = 2080;
    uint64_t v22 = v17;
    _os_log_impl(&dword_1BDAD0000, v13, v14, "fsync time %f - %s\n", (uint8_t *)&v19, 0x16u);
  }
  *__error() = v12;
  *__error() = v10;
  return v5;
}

ssize_t prot_pread(uint64_t __fd, void *__buf, size_t __nbyte, off_t a4)
{
  do
  {
    ssize_t v8 = pread(__fd, __buf, __nbyte, a4);
    if (v8 != -1) {
      break;
    }
    uint64_t v9 = g_prot_error_callback;
    if (!g_prot_error_callback) {
      break;
    }
    int v10 = __error();
  }
  while (((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t))(v9 + 16))(v9, __fd, *v10, 4) & 1) != 0);
  return v8;
}

uint64_t prot_pwrite(uint64_t __fd, char *__buf, size_t __nbyte, off_t a4)
{
  uint64_t v8 = 0;
  do
  {
    while (1)
    {
      unint64_t v9 = pwrite(__fd, __buf, __nbyte, a4);
      if ((v9 & 0x8000000000000000) != 0) {
        break;
      }
      v8 += v9;
      BOOL v12 = __nbyte > v9;
      __nbyte -= v9;
      if (!v12) {
        return v8;
      }
      __buf += v9;
      a4 += v9;
    }
    uint64_t v10 = g_prot_error_callback;
    if (!g_prot_error_callback) {
      break;
    }
    double v11 = __error();
  }
  while (((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t))(v10 + 16))(v10, __fd, *v11, 5) & 1) != 0);
  return -1;
}

uint64_t prot_pwrite_guarded(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v9 = 0;
  do
  {
    while (1)
    {
      unint64_t v10 = guarded_pwrite_np();
      if ((v10 & 0x8000000000000000) != 0) {
        break;
      }
      v9 += v10;
      BOOL v13 = a4 > v10;
      a4 -= v10;
      if (!v13) {
        return v9;
      }
      a3 += v10;
      a5 += v10;
    }
    uint64_t v11 = g_prot_error_callback;
    if (!g_prot_error_callback) {
      break;
    }
    BOOL v12 = __error();
  }
  while (((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t))(v11 + 16))(v11, a1, *v12, 5) & 1) != 0);
  return -1;
}

uint64_t prot_write(uint64_t __fd, char *__buf, size_t __nbyte)
{
  uint64_t v6 = 0;
  do
  {
    while (1)
    {
      unint64_t v7 = write(__fd, __buf, __nbyte);
      if ((v7 & 0x8000000000000000) != 0) {
        break;
      }
      v6 += v7;
      BOOL v10 = __nbyte > v7;
      __nbyte -= v7;
      if (!v10) {
        return v6;
      }
      __buf += v7;
    }
    uint64_t v8 = g_prot_error_callback;
    if (!g_prot_error_callback) {
      break;
    }
    uint64_t v9 = __error();
  }
  while (((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t))(v8 + 16))(v8, __fd, *v9, 6) & 1) != 0);
  return -1;
}

uint64_t prot_write_guarded(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = 0;
  do
  {
    while (1)
    {
      unint64_t v8 = guarded_write_np();
      if ((v8 & 0x8000000000000000) != 0) {
        break;
      }
      v7 += v8;
      BOOL v11 = a4 > v8;
      a4 -= v8;
      if (!v11) {
        return v7;
      }
      a3 += v8;
    }
    uint64_t v9 = g_prot_error_callback;
    if (!g_prot_error_callback) {
      break;
    }
    BOOL v10 = __error();
  }
  while (((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t))(v9 + 16))(v9, a1, *v10, 6) & 1) != 0);
  return -1;
}

void *fd_set_error_callback(void *aBlock)
{
  uint64_t result = (void *)g_prot_error_callback;
  if ((void *)g_prot_error_callback != aBlock)
  {
    if (g_prot_error_callback) {
      _Block_release((const void *)g_prot_error_callback);
    }
    uint64_t result = _Block_copy(aBlock);
    g_prot_error_callbacuint64_t k = (uint64_t)result;
  }
  return result;
}

uint64_t si_openat_protected(uint64_t a1, const char *a2, int a3, uint64_t a4, int a5)
{
  unsigned int v13 = 0;
  if ((fd_setDir(a1, (int *)&v13) & 1) == 0) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v9 = open_dprotected_np(a2, a3, a5, 0, a4);
  int v10 = *__error();
  int v11 = v13;
  MEMORY[0x1C1884060](v13);
  if ((v11 & 0x80000000) == 0) {
    close(v11);
  }
  if (v9 == -1 && v10)
  {
    *__error() = v10;
    return 0xFFFFFFFFLL;
  }
  return v9;
}

uint64_t _fd_ftruncate(uint64_t a1, off_t a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if ((gDisablePreallocate & 1) == 0)
  {
    off_t v4 = lseek(a1, 0, 2);
    uint64_t v5 = a2 - v4;
    if (a2 > v4 && v5 > *MEMORY[0x1E4F14B00])
    {
      ci_preallocate(a1, v5);
      if (prot_pwrite(a1, "", 1uLL, a2 - 1) == 1) {
        return 0;
      }
    }
  }
  while (1)
  {
    uint64_t result = ftruncate(a1, a2);
    if (result != -1) {
      break;
    }
    if (*__error() == 22)
    {
      uint64_t result = ftruncate(a1, a2);
      if (result != -1) {
        break;
      }
    }
    int v7 = *__error();
    uint64_t v8 = g_prot_error_callback;
    if (g_prot_error_callback)
    {
      uint64_t v9 = __error();
      if ((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t))(v8 + 16))(v8, a1, *v9, 7)) {
        continue;
      }
    }
    bzero(v19, 0x400uLL);
    int v10 = faccurate_realpath(a1, v19);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v11 = "";
      v12[0] = 67109890;
      if (v10) {
        int v11 = v10;
      }
      v12[1] = a1;
      __int16 v13 = 2080;
      os_log_type_t v14 = v11;
      __int16 v15 = 2048;
      off_t v16 = a2;
      __int16 v17 = 1024;
      int v18 = v7;
      _os_log_error_impl(&dword_1BDAD0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "ftruncate(%d %s, %lld) error:%d", (uint8_t *)v12, 0x22u);
    }
    *__error() = v7;
    return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t _fd_ftruncate_guarded(uint64_t a1, uint64_t a2, off_t a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if ((gDisablePreallocate & 1) == 0)
  {
    off_t v6 = lseek(a1, 0, 2);
    uint64_t v7 = a3 - v6;
    if (a3 > v6 && v7 > *MEMORY[0x1E4F14B00])
    {
      ci_preallocate(a1, v7);
      if (prot_pwrite_guarded(a1, a2, (uint64_t)"", 1uLL, a3 - 1) == 1) {
        return 0;
      }
    }
  }
  while (1)
  {
    uint64_t result = ftruncate(a1, a3);
    if (result != -1) {
      break;
    }
    if (*__error() == 22)
    {
      uint64_t result = ftruncate(a1, a3);
      if (result != -1) {
        break;
      }
    }
    int v9 = *__error();
    uint64_t v10 = g_prot_error_callback;
    if (g_prot_error_callback)
    {
      int v11 = __error();
      if ((*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t))(v10 + 16))(v10, a1, *v11, 7)) {
        continue;
      }
    }
    bzero(v21, 0x400uLL);
    BOOL v12 = faccurate_realpath(a1, v21);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      __int16 v13 = "";
      v14[0] = 67109890;
      if (v12) {
        __int16 v13 = v12;
      }
      v14[1] = a1;
      __int16 v15 = 2080;
      off_t v16 = v13;
      __int16 v17 = 2048;
      off_t v18 = a3;
      __int16 v19 = 1024;
      int v20 = v9;
      _os_log_error_impl(&dword_1BDAD0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "ftruncate(%d %s, %lld) error:%d", (uint8_t *)v14, 0x22u);
    }
    *__error() = v9;
    return 0xFFFFFFFFLL;
  }
  return result;
}

void fd_system_status_stall_if_busy()
{
  if (_gSystemStatusBool)
  {
    pthread_mutex_lock(&_gSystemStatusLock);
    while (_gSystemStatusBool)
      pthread_cond_wait(&_gSystemStatusCond, &_gSystemStatusLock);
    pthread_mutex_unlock(&_gSystemStatusLock);
  }
}

uint64_t fd_system_status_busy()
{
  return _gSystemStatusBool;
}

void fd_system_status_set_busy(char a1)
{
  _gSystemStatusBool = a1;
  __dmb(0xBu);
  pthread_cond_broadcast(&_gSystemStatusCond);
  pthread_mutex_unlock(&_gSystemStatusLock);
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
    fd_system_status_set_busy_cold_1(a1);
  }
}

uint64_t rename_prefix(int a1, const char *a2, const char *a3, const char *a4)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  bzero(v10, 0x400uLL);
  bzero(__str, 0x400uLL);
  snprintf(__str, 0x400uLL, "%s%s", a3, a4);
  snprintf(v10, 0x400uLL, "%s%s", a2, a4);
  return renameatx_np(a1, v10, a1, __str, 0x10u);
}

uint64_t cleanup_prefix(int a1, const char *a2, const char *a3, const char *a4)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  bzero(__str, 0x400uLL);
  snprintf(__str, 0x400uLL, "%s%s", a3, a4);
  x_unlinkat(a1, __str, 2048);
  snprintf(__str, 0x400uLL, "%s%s", a2, a4);
  return x_unlinkat(a1, __str, 2048);
}

__n128 SITokenInit(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    if (a2)
    {
      __n128 result = *(__n128 *)(*(void *)(a2 + 24) + 16 * a3);
      off_t v4 = (__n128 *)(a1 + 40 * a3);
      *off_t v4 = result;
      v4[1].n128_u64[0] = 0;
      v4[1].n128_u64[1] = 0;
      v4[2].n128_u8[0] = 0;
    }
  }
  return result;
}

uint64_t SITextTokenizerEnumerateTokensInString(uint64_t a1, CFStringRef theString, uint64_t a3, uint64_t a4)
{
  if (!theString) {
    return 0;
  }
  CFIndex Length = CFStringGetLength(theString);
  if (!Length) {
    return 0;
  }
  CFIndex v9 = Length;
  uint64_t v13 = 0;
  os_log_type_t v14 = &v13;
  uint64_t v15 = 0x2000000000;
  char v16 = 1;
  if (getTaggerQueue(void)::onceTaggerQueueToken != -1) {
    dispatch_once(&getTaggerQueue(void)::onceTaggerQueueToken, &__block_literal_global_4);
  }
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 0x40000000;
  _DWORD v12[2] = __SITextTokenizerEnumerateTokensInString_block_invoke;
  v12[3] = &unk_1E63494B0;
  v12[6] = v9;
  v12[7] = theString;
  v12[8] = a1;
  v12[9] = a3;
  v12[4] = a4;
  v12[5] = &v13;
  dispatch_sync((dispatch_queue_t)getTaggerQueue(void)::gTaggerQueue, v12);
  uint64_t v10 = *((unsigned __int8 *)v14 + 24);
  _Block_object_dispose(&v13, 8);
  return v10;
}

void __SITextTokenizerEnumerateTokensInString_block_invoke(uint64_t a1)
{
  if (getTagger(void)::onceTaggerQueueToken != -1) {
    dispatch_once(&getTagger(void)::onceTaggerQueueToken, &__block_literal_global_9);
  }
  NLTaggerSetString();
  if (*(void *)(a1 + 64)) {
    NLTaggerSetLocaleForRange();
  }
  v13[0] = 0;
  v13[1] = v13;
  _OWORD v13[2] = 0x2000000000;
  void v13[3] = 0;
  v12[0] = 0;
  v12[1] = v12;
  _DWORD v12[2] = 0x2000000000;
  v12[3] = *(void *)(a1 + 72);
  v10[0] = 0;
  v10[1] = v10;
  v10[2] = 0x3802000000;
  v10[3] = __Block_byref_object_copy_;
  v10[4] = __Block_byref_object_dispose_;
  long long v11 = xmmword_1BDB23710;
  v9[0] = 0;
  v9[1] = v9;
  void v9[2] = 0x3802000000;
  void v9[3] = __Block_byref_object_copy_;
  v9[5] = 0;
  v9[6] = 0;
  v9[4] = __Block_byref_object_dispose_;
  v8[0] = 0;
  v8[1] = v8;
  v8[2] = 0x3802000000;
  v8[3] = __Block_byref_object_copy_;
  v8[5] = 0;
  v8[6] = 0;
  v8[4] = __Block_byref_object_dispose_;
  v6[0] = 0;
  v6[1] = v6;
  gid_t v6[2] = 0x2000000000;
  char v7 = 0;
  v4[0] = 0;
  v4[1] = v4;
  int v4[2] = 0x2000000000;
  char v5 = 0;
  v2[0] = 0;
  v2[1] = v2;
  v2[2] = 0x2000000000;
  char v3 = 0;
  NLTaggerEnumerateTokens();
  _Block_object_dispose(v2, 8);
  _Block_object_dispose(v4, 8);
  _Block_object_dispose(v6, 8);
  _Block_object_dispose(v8, 8);
  _Block_object_dispose(v9, 8);
  _Block_object_dispose(v10, 8);
  _Block_object_dispose(v12, 8);
  _Block_object_dispose(v13, 8);
}

void sub_1BDAF4CA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  _Block_object_dispose(&a28, 8);
  _Block_object_dispose(&a32, 8);
  _Block_object_dispose(&a36, 8);
  _Block_object_dispose(&a40, 8);
  _Block_object_dispose((const void *)(v40 - 208), 8);
  _Block_object_dispose((const void *)(v40 - 152), 8);
  _Block_object_dispose((const void *)(v40 - 96), 8);
  _Block_object_dispose((const void *)(v40 - 64), 8);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy_(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  return result;
}

void __SITextTokenizerEnumerateTokensInString_block_invoke_1(uint64_t a1, _OWORD *a2, unsigned char *a3)
{
  unsigned int v39 = a3;
  char v3 = a2;
  uint64_t v75 = *MEMORY[0x1E4F143B8];
  uint64_t v71 = 0;
  int v72 = &v71;
  uint64_t v73 = 0x2000000000;
  char v74 = 0;
  uint64_t v40 = &v64;
  uint64_t v41 = v47;
  uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v6 = *(void *)(v5 + 40);
  uint64_t v42 = a2;
  while (1)
  {
    if (v6 == -1 || (uint64_t v7 = *(void *)(v5 + 48) + v6, v7 < *(void *)v3))
    {
      *(_OWORD *)(v5 + 40) = *v3;
      uint64_t v7 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 48)
         + *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
    }
    int v43 = &v38;
    CFIndex v8 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
    CFIndex v9 = v7 - v8;
    uint64_t v10 = v9 >= *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24)
        ? *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24)
        : v9;
    uint64_t v11 = *(void *)(a1 + 112) - v8 + *(void *)(a1 + 120);
    uint64_t v44 = v10;
    CFIndex v12 = 2 * v10 >= v11 ? v11 : 2 * v10;
    MEMORY[0x1F4188790](a1);
    os_log_type_t v14 = &v38 - 2 * v13;
    bzero(v14, v15);
    MEMORY[0x1F4188790](v16);
    off_t v18 = &v38 - 2 * v17;
    bzero(v18, v19);
    MEMORY[0x1F4188790](v20);
    uint64_t v22 = (char *)&v38 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
    bzero(v22, v21);
    CFIndex MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(v12, 0x8000100u);
    uint64_t v24 = (char *)&v38 - ((MEMORY[0x1F4188790](MaximumSizeForEncoding) + 16) & 0xFFFFFFFFFFFFFFF0);
    bzero(v24, v25);
    MEMORY[0x1F4188790](v26);
    int v28 = (char *)&v38 - ((v27 + 17) & 0xFFFFFFFFFFFFFFF0);
    bzero(v28, v29);
    v76.locatiouint64_t n = v8;
    v76.length = v12;
    CFStringGetCharacters(*(CFStringRef *)(a1 + 128), v76, (UniChar *)v28);
    v70[0] = 0;
    v70[1] = v70;
    v70[2] = 0x2000000000;
    v70[3] = 0;
    v69[0] = 0;
    v69[1] = v69;
    v69[2] = 0x2000000000;
    v69[3] = v14;
    v68[0] = 0;
    v68[1] = v68;
    v68[2] = 0x2000000000;
    v68[3] = v18;
    v67[0] = 0;
    v67[1] = v67;
    v67[2] = 0x2000000000;
    v67[3] = v22;
    v66[0] = 0;
    v66[1] = v66;
    v66[2] = 0x2000000000;
    v66[3] = v24;
    v65[0] = 0;
    v65[1] = v65;
    v65[2] = 0x2000000000;
    v65[3] = v28;
    *((unsigned char *)v72 + 24) = 0;
    uint64_t v45 = MEMORY[0x1E4F143A8];
    uint64_t v46 = 0x40000000;
    v47[0] = __SITextTokenizerEnumerateTokensInString_block_invoke_2;
    v47[1] = &unk_1E6349488;
    uint64_t v30 = *(void *)(a1 + 128);
    long long v48 = *(_OWORD *)(a1 + 64);
    uint64_t v60 = v30;
    CFIndex v61 = v8;
    uint64_t v31 = *(void *)(a1 + 32);
    uint64_t v49 = *(void *)(a1 + 40);
    __n128 v50 = v68;
    long long v51 = v70;
    int v52 = v67;
    uint64_t v53 = *(void *)(a1 + 80);
    int v54 = v66;
    __int16 v55 = v69;
    int v56 = v65;
    uint64_t v62 = v44;
    CFIndex v63 = MaximumSizeForEncoding;
    v47[2] = v31;
    v47[3] = &v71;
    long long v57 = *(_OWORD *)(a1 + 88);
    char v3 = v42;
    long long v32 = *v42;
    unint64_t v33 = v40;
    v40[2] = *((void *)v42 + 2);
    *(_OWORD *)unint64_t v33 = v32;
    uint64_t v34 = *(void *)(a1 + 48);
    uint64_t v58 = *(void *)(a1 + 104);
    uint64_t v59 = v34;
    NLTaggerEnumerateTokens();
    _Block_object_dispose(v65, 8);
    _Block_object_dispose(v66, 8);
    _Block_object_dispose(v67, 8);
    _Block_object_dispose(v68, 8);
    _Block_object_dispose(v69, 8);
    _Block_object_dispose(v70, 8);
    uint64_t v35 = *(void *)(*(void *)(a1 + 48) + 8);
    uint64_t v36 = *(void *)(v35 + 24);
    uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8);
    uint64_t v6 = *(void *)(v5 + 40);
    uint64_t v37 = *(void *)(v5 + 48) + v6;
    if (v36 >= v37) {
      break;
    }
    if (*(unsigned char *)(*(void *)(*(void *)(a1 + 96) + 8) + 24)) {
      goto LABEL_18;
    }
    if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 88) + 8) + 24) || !*((unsigned char *)v72 + 24)) {
      goto LABEL_17;
    }
  }
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 96) + 8) + 24)) {
    goto LABEL_18;
  }
LABEL_17:
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 88) + 8) + 24)) {
    goto LABEL_19;
  }
LABEL_18:
  *unsigned int v39 = 0;
  uint64_t v35 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v36 = *(void *)(v35 + 24);
  uint64_t v37 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 48)
      + *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
LABEL_19:
  if (v36 < v37
    && !*(unsigned char *)(*(void *)(*(void *)(a1 + 96) + 8) + 24)
    && *(unsigned char *)(*(void *)(*(void *)(a1 + 88) + 8) + 24)
    && !*((unsigned char *)v72 + 24))
  {
    *(void *)(v35 + 24) = v37;
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) = 0;
  *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = 0;
  *(_OWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) = xmmword_1BDB23710;
  _Block_object_dispose(&v71, 8);
}

void sub_1BDAF51F4(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 + 272), 8);
  _Block_object_dispose((const void *)(v1 + 304), 8);
  _Block_object_dispose((const void *)(v1 + 336), 8);
  _Block_object_dispose((const void *)(v2 - 240), 8);
  _Block_object_dispose((const void *)(v2 - 208), 8);
  _Block_object_dispose((const void *)(v2 - 176), 8);
  _Block_object_dispose((const void *)(v2 - 144), 8);
  _Unwind_Resume(a1);
}

dispatch_queue_t ___ZL14getTaggerQueuev_block_invoke()
{
  dispatch_queue_t result = dispatch_queue_create("com.apple.SITextTokenizer.Tokenize", 0);
  getTaggerQueue(void)::gTaggerQueue = (uint64_t)result;
  return result;
}

void ___ZL9getTaggerv_block_invoke()
{
  v2[1] = *(const void **)MEMORY[0x1E4F143B8];
  v2[0] = *(const void **)MEMORY[0x1E4F5C920];
  CFArrayRef v0 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v2, 1, MEMORY[0x1E4F1D510]);
  if (v0)
  {
    CFArrayRef v1 = v0;
    getTagger(void)::gTagger = NLTaggerCreate();
    CFRelease(v1);
  }
}

uint64_t SIGetResourceRootURLsForLocaleOfType(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0;
  if (a1 && a2)
  {
    if (getAssetResourceManager_assetsAvailableOnceToken != -1) {
      dispatch_once(&getAssetResourceManager_assetsAvailableOnceToken, &__block_literal_global_7);
    }
    if (getAssetResourceManager_gResourceManager)
    {
      uint64_t v8 = 0;
      CFIndex v9 = &v8;
      uint64_t v10 = 0x2000000000;
      uint64_t v11 = 0;
      uint64_t v5 = *(NSObject **)(getAssetResourceManager_gResourceManager + 8);
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 0x40000000;
      block[2] = __SIAssetManagerGetResourceRootURLsForLocaleOfType_block_invoke;
      block[3] = &unk_1E6349568;
      void block[5] = a1;
      block[6] = a2;
      void block[4] = &v8;
      dispatch_sync(v5, block);
      uint64_t v2 = v9[3];
      _Block_object_dispose(&v8, 8);
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

uint64_t SIGetResourceURLsForLocaleOfType(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = 0;
  if (a1 && a2)
  {
    if (getAssetResourceManager_assetsAvailableOnceToken != -1) {
      dispatch_once(&getAssetResourceManager_assetsAvailableOnceToken, &__block_literal_global_7);
    }
    if (getAssetResourceManager_gResourceManager)
    {
      uint64_t v12 = 0;
      uint64_t v13 = &v12;
      uint64_t v14 = 0x2000000000;
      uint64_t v15 = 0;
      CFIndex v9 = *(NSObject **)(getAssetResourceManager_gResourceManager + 8);
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 0x40000000;
      block[2] = __SIAssetManagerGetResourceURLsForLocaleOfType_block_invoke;
      block[3] = &unk_1E6349660;
      void block[4] = &v12;
      void block[5] = a1;
      block[6] = a2;
      void block[7] = a3;
      void block[8] = a4;
      dispatch_sync(v9, block);
      uint64_t v4 = v13[3];
      _Block_object_dispose(&v12, 8);
    }
    else
    {
      return 0;
    }
  }
  return v4;
}

void __SIAssetManagerGetResourceRootURLsForLocaleOfType_block_invoke(uint64_t a1)
{
  CFStringRef Value = (const __CFString *)CFLocaleGetValue(*(CFLocaleRef *)(a1 + 40), (CFLocaleKey)*MEMORY[0x1E4F1D218]);
  CFLocaleRef v3 = CFLocaleCopyNormalizedLocaleIdentifier(*(const __CFLocale **)(a1 + 40), 0);
  if (v3)
  {
    CFStringRef v4 = (const __CFString *)v3;
    if (getAssetResourceRoots_resourceRootsOnceToken != -1) {
      dispatch_once(&getAssetResourceRoots_resourceRootsOnceToken, &__block_literal_global_5);
    }
    uint64_t v5 = (__CFDictionary *)getAssetResourceRoots_gAssetResourceRoots;
    char v6 = gHasUpdatedAssetResources;
    if (!CFDictionaryContainsKey((CFDictionaryRef)getAssetResourceRoots_gAssetResourceRoots, v4))
    {
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      CFDictionarySetValue(v5, v4, Mutable);
      CFRelease(Mutable);
    }
    uint64_t v8 = (__CFDictionary *)CFDictionaryGetValue(v5, v4);
    if (!CFDictionaryContainsKey(v8, *(const void **)(a1 + 48)))
    {
      *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
      CFDictionarySetValue(v8, *(const void **)(a1 + 48), *(const void **)(*(void *)(*(void *)(a1 + 32) + 8) + 24));
      CFRelease(*(CFTypeRef *)(*(void *)(*(void *)(a1 + 32) + 8) + 24));
      char v6 = 0;
      *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
    }
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = CFDictionaryGetValue(v8, *(const void **)(a1 + 48));
    if ((v6 & 1) == 0)
    {
      CFArrayRemoveAllValues(*(CFMutableArrayRef *)(*(void *)(*(void *)(a1 + 32) + 8) + 24));
      CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CFLocaleRef v10 = CFLocaleCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], Value);
      if (v10)
      {
        CFLocaleRef v11 = v10;
        LDEnumerateAssetDataItems();
        CFRelease(v11);
      }
      if (!CFStringsAreEqual(Value, v4))
      {
        CFLocaleRef v12 = CFLocaleCreate(v9, v4);
        if (v12)
        {
          CFLocaleRef v13 = v12;
          LDEnumerateAssetDataItems();
          CFRelease(v13);
        }
      }
      gHasUpdatedAssetResources = 1;
    }
    CFRelease(v4);
  }
}

void __SIAssetManagerGetResourceRootURLsForLocaleOfType_block_invoke_2(uint64_t a1, const __CFURL *a2, int a3, uint64_t a4, const __CFString *a5)
{
  if (CFStringsAreEqual(a5, *(const __CFString **)(a1 + 40)))
  {
    CFURLRef PathComponent = CFURLCreateCopyDeletingLastPathComponent((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a2);
    if (PathComponent)
    {
      CFURLRef v9 = PathComponent;
      CFArrayRef v10 = *(const __CFArray **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
      v13.length = CFArrayGetCount(v10);
      v13.locatiouint64_t n = 0;
      if (!CFArrayContainsValue(v10, v13, v9))
      {
        CFLocaleRef v11 = *(__CFArray **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
        if (a3) {
          CFArrayAppendValue(v11, v9);
        }
        else {
          CFArrayInsertValueAtIndex(v11, 0, v9);
        }
      }
      CFRelease(v9);
    }
  }
}

void __SIAssetManagerGetResourceRootURLsForLocaleOfType_block_invoke_3(uint64_t a1, const __CFURL *a2, int a3, uint64_t a4, const __CFString *a5)
{
  if (CFStringsAreEqual(a5, *(const __CFString **)(a1 + 40)))
  {
    CFURLRef PathComponent = CFURLCreateCopyDeletingLastPathComponent((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a2);
    if (PathComponent)
    {
      CFURLRef v9 = PathComponent;
      CFArrayRef v10 = *(const __CFArray **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
      v13.length = CFArrayGetCount(v10);
      v13.locatiouint64_t n = 0;
      if (!CFArrayContainsValue(v10, v13, v9))
      {
        CFLocaleRef v11 = *(__CFArray **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
        if (a3) {
          CFArrayAppendValue(v11, v9);
        }
        else {
          CFArrayInsertValueAtIndex(v11, 0, v9);
        }
      }
      CFRelease(v9);
    }
  }
}

CFMutableDictionaryRef __getAssetResourceRoots_block_invoke()
{
  CFMutableDictionaryRef result = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  getAssetResourceRoots_gAssetResourceRoots = (uint64_t)result;
  return result;
}

_DWORD *__getAssetResourceManager_block_invoke()
{
  CFMutableDictionaryRef result = malloc_type_malloc(0x10uLL, 0x10200405730B0C9uLL);
  uint64_t v1 = (uint64_t)result;
  if (result)
  {
    *CFMutableDictionaryRef result = 0;
    result[1] = 0;
    uint64_t v2 = dispatch_queue_create("com.apple.SpotlightLinguistics.Resources", 0);
    *(void *)(v1 + 8) = v2;
    notify_register_dispatch("com.apple.MobileAsset.LinguisticData.ma.new-asset-installed", (int *)v1, v2, &__block_literal_global_12);
    CFMutableDictionaryRef result = (_DWORD *)notify_register_dispatch("com.apple.MobileAsset.LinguisticData.ma.cached-metadata-updated", (int *)(v1 + 4), *(dispatch_queue_t *)(v1 + 8), &__block_literal_global_15_0);
  }
  getAssetResourceManager_gResourceManager = v1;
  return result;
}

void __SIAssetResourceManagerCreate_block_invoke()
{
  gHasUpdatedAssetResources = 0;
}

void __SIAssetResourceManagerCreate_block_invoke_2()
{
  gHasUpdatedAssetResources = 0;
}

void __SIAssetManagerGetResourceURLsForLocaleOfType_block_invoke(uint64_t a1)
{
  CFStringRef Value = (const __CFString *)CFLocaleGetValue(*(CFLocaleRef *)(a1 + 40), (CFLocaleKey)*MEMORY[0x1E4F1D218]);
  CFLocaleRef v3 = CFLocaleCopyNormalizedLocaleIdentifier(*(const __CFLocale **)(a1 + 40), 0);
  if (v3)
  {
    CFStringRef v4 = (const __CFString *)v3;
    if (getAssetResourcePaths_resourcePathsOnceToken != -1) {
      dispatch_once(&getAssetResourcePaths_resourcePathsOnceToken, &__block_literal_global_23);
    }
    uint64_t v5 = (__CFDictionary *)getAssetResourcePaths_gAssetResourcePaths;
    char v6 = gHasUpdatedAssetResources;
    if (!CFDictionaryContainsKey((CFDictionaryRef)getAssetResourcePaths_gAssetResourcePaths, v4))
    {
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      CFDictionarySetValue(v5, v4, Mutable);
      CFRelease(Mutable);
    }
    uint64_t v8 = (__CFDictionary *)CFDictionaryGetValue(v5, v4);
    if (!CFDictionaryContainsKey(v8, *(const void **)(a1 + 48)))
    {
      *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
      CFDictionarySetValue(v8, *(const void **)(a1 + 48), *(const void **)(*(void *)(*(void *)(a1 + 32) + 8) + 24));
      CFRelease(*(CFTypeRef *)(*(void *)(*(void *)(a1 + 32) + 8) + 24));
      char v6 = 0;
      *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
    }
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = CFDictionaryGetValue(v8, *(const void **)(a1 + 48));
    if ((v6 & 1) == 0)
    {
      CFArrayRemoveAllValues(*(CFMutableArrayRef *)(*(void *)(*(void *)(a1 + 32) + 8) + 24));
      BOOL v9 = CFStringsAreEqual(Value, v4);
      CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      if (!v9)
      {
        CFLocaleRef v11 = CFLocaleCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v4);
        if (v11)
        {
          CFLocaleRef v12 = v11;
          LDEnumerateAssetDataItems();
          CFRelease(v12);
        }
      }
      CFLocaleRef v13 = CFLocaleCreate(v10, Value);
      if (v13)
      {
        CFLocaleRef v14 = v13;
        LDEnumerateAssetDataItems();
        CFRelease(v14);
      }
    }
    CFRelease(v4);
  }
}

void __SIAssetManagerGetResourceURLsForLocaleOfType_block_invoke_2(uint64_t a1, const __CFURL *a2, uint64_t a3, uint64_t a4, const __CFString *a5)
{
  if (CFStringsAreEqual(a5, *(const __CFString **)(a1 + 40)))
  {
    CFStringRef PathComponent = CFURLCopyLastPathComponent(a2);
    if (PathComponent)
    {
      CFStringRef v8 = PathComponent;
      CFStringRef v9 = *(const __CFString **)(a1 + 48);
      if (!v9 || CFStringHasPrefix(PathComponent, v9))
      {
        CFStringRef v10 = *(const __CFString **)(a1 + 56);
        if (!v10 || CFStringHasSuffix(v8, v10))
        {
          CFArrayRef v11 = *(const __CFArray **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
          v13.length = CFArrayGetCount(v11);
          v13.locatiouint64_t n = 0;
          if (!CFArrayContainsValue(v11, v13, a2)) {
            CFArrayInsertValueAtIndex(*(CFMutableArrayRef *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), 0, a2);
          }
        }
      }
      CFRelease(v8);
    }
  }
}

void __SIAssetManagerGetResourceURLsForLocaleOfType_block_invoke_3(uint64_t a1, const __CFURL *a2, uint64_t a3, uint64_t a4, const __CFString *a5)
{
  if (CFStringsAreEqual(a5, *(const __CFString **)(a1 + 40)))
  {
    CFStringRef PathComponent = CFURLCopyLastPathComponent(a2);
    if (PathComponent)
    {
      CFStringRef v8 = PathComponent;
      CFStringRef v9 = *(const __CFString **)(a1 + 48);
      if (!v9 || CFStringHasPrefix(PathComponent, v9))
      {
        CFStringRef v10 = *(const __CFString **)(a1 + 56);
        if (!v10 || CFStringHasSuffix(v8, v10))
        {
          CFArrayRef v11 = *(const __CFArray **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
          v13.length = CFArrayGetCount(v11);
          v13.locatiouint64_t n = 0;
          if (!CFArrayContainsValue(v11, v13, a2)) {
            CFArrayAppendValue(*(CFMutableArrayRef *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), a2);
          }
        }
      }
      CFRelease(v8);
    }
  }
}

CFMutableDictionaryRef __getAssetResourcePaths_block_invoke()
{
  CFMutableDictionaryRef result = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  getAssetResourcePaths_gAssetResourcePaths = (uint64_t)result;
  return result;
}

unsigned int *SILocalizationCreateWithOptions(const __CFDictionary *a1)
{
  uint64_t v2 = (unsigned int *)malloc_type_malloc(8uLL, 0x100004090D0E795uLL);
  if (v2)
  {
    CFStringRef Value = (const void *)*MEMORY[0x1E4F1CFC8];
    if (a1)
    {
      CFStringRef v4 = @"forceLoad";
      if (CFDictionaryContainsKey(a1, @"forceLoad")
        || (CFStringRef v4 = @"forTesting", CFDictionaryContainsKey(a1, @"forTesting")))
      {
        CFStringRef Value = CFDictionaryGetValue(a1, v4);
      }
    }
    *((unsigned char *)v2 + 4) = Value == (const void *)*MEMORY[0x1E4F1CFD0];
    atomic_store(0, v2);
    atomic_fetch_add((atomic_uint *volatile)v2, 1u);
  }
  return v2;
}

atomic_uint *SILocalizationRetain(atomic_uint *result)
{
  if (result) {
    atomic_fetch_add(result, 1u);
  }
  return result;
}

void SILocalizationLoad(uint64_t a1, const __CFLocale *a2, uint64_t a3)
{
  userInfoKeys[1] = *(void **)MEMORY[0x1E4F143B8];
  if (SILocalizationLoad::onceToken != -1)
  {
    dispatch_once(&SILocalizationLoad::onceToken, &__block_literal_global_6);
    if (a2) {
      goto LABEL_3;
    }
LABEL_5:
    unsigned int LanguageID = 0u;
    goto LABEL_6;
  }
  if (!a2) {
    goto LABEL_5;
  }
LABEL_3:
  unsigned int LanguageID = SILanguagesGetLanguageID(a2);
LABEL_6:
  unsigned __int8 v7 = atomic_load(&sLocalizationLoaded[LanguageID]);
  if ((v7 & 1) == 0)
  {
    uint64_t v8 = LanguageID;
    atomic_store(1u, &sLocalizationLoaded[LanguageID]);
    if (LanguageID >= 2 && (int)LanguageID < 59)
    {
      if (getMainBundle(void)::onceToken != -1) {
        dispatch_once(&getMainBundle(void)::onceToken, &__block_literal_global_32);
      }
      if (!getMainBundle(void)::gMainBundle)
      {
        if (getFallbackBundle(void)::onceToken != -1) {
          dispatch_once(&getFallbackBundle(void)::onceToken, &__block_literal_global_38);
        }
        if (!getFallbackBundle(void)::gFallbackBundle) {
          goto LABEL_85;
        }
      }
      LODWORD(userInfoKeys[0]) = -1;
      int v39 = -1;
      LODWORD(userInfoValues) = -1;
      int v38 = 0;
      MEMORY[0x1C1883020](a2);
      if (!CFBundleGetLocalizationInfoForLocalization()) {
        goto LABEL_85;
      }
      uint64_t v9 = CFBundleCopyLocalizationForLocalizationInfo();
      if (!v9)
      {
        off_t v18 = 0;
        goto LABEL_49;
      }
      CFStringRef v10 = (const __CFString *)v9;
      if (getMainBundle(void)::onceToken != -1) {
        dispatch_once(&getMainBundle(void)::onceToken, &__block_literal_global_32);
      }
      if (getMainBundle(void)::gMainBundle)
      {
        CFDictionaryRef v11 = (const __CFDictionary *)CFBundleCopyLocalizedStringTableForLocalization();
        if (v11)
        {
          CFDictionaryRef v12 = v11;
          if (CFDictionaryGetCount(v11)) {
            goto LABEL_30;
          }
          CFRelease(v12);
        }
      }
      if (getFallbackBundle(void)::onceToken != -1) {
        dispatch_once(&getFallbackBundle(void)::onceToken, &__block_literal_global_38);
      }
      if (getFallbackBundle(void)::gFallbackBundle)
      {
        CFDictionaryRef v13 = (const __CFDictionary *)CFBundleCopyLocalizedStringTableForLocalization();
        CFDictionaryRef v12 = v13;
        if (!v13 || CFDictionaryGetCount(v13))
        {
LABEL_30:
          CFStringRef v14 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"%@-filters", v10);
          if (v14)
          {
            CFStringRef v15 = v14;
            if (getMainBundle(void)::onceToken != -1) {
              dispatch_once(&getMainBundle(void)::onceToken, &__block_literal_global_32);
            }
            if (!getMainBundle(void)::gMainBundle
              || (v16 = CFBundleCopyResourceURLForLocalization((CFBundleRef)getMainBundle(void)::gMainBundle, v15, @"dat", 0, v10)) == 0|| (CFURLRef v17 = v16, v18 = (char *)SIGeneralTrieCreateFromFileURL(v16), CFRelease(v17), !v18))
            {
              if (getFallbackBundle(void)::onceToken != -1) {
                dispatch_once(&getFallbackBundle(void)::onceToken, &__block_literal_global_38);
              }
              if (getFallbackBundle(void)::gFallbackBundle
                && (CFURLRef v19 = CFBundleCopyResourceURLForLocalization((CFBundleRef)getFallbackBundle(void)::gFallbackBundle, v15, @"dat", 0, v10)) != 0)
              {
                CFURLRef v20 = v19;
                off_t v18 = (char *)SIGeneralTrieCreateFromFileURL(v19);
                CFRelease(v20);
              }
              else
              {
                off_t v18 = 0;
              }
            }
            CFRelease(v15);
          }
          else
          {
            off_t v18 = 0;
          }
          CFRelease(v10);
          if (v12) {
            goto LABEL_79;
          }
LABEL_49:
          uint64_t v22 = CFBundleCopyLocalizationForLocalizationInfo();
          if (!v22)
          {
LABEL_83:
            if (v18) {
              SIGeneralTrieRelease(v18);
            }
LABEL_85:
            CFAllocatorRef v32 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
            unint64_t v33 = (__CFString *)CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"SILocalization: could not load locale (%@)", a2);
            userInfoKeys[0] = *(void **)MEMORY[0x1E4F1D140];
            userInfoValues = v33;
            CFErrorRef v34 = CFErrorCreateWithUserInfoKeysAndValues(v32, @"SpotlightLinguisticsErrorDomain", 1, (const void *const *)userInfoKeys, (const void *const *)&userInfoValues, 1);
            (*(void (**)(uint64_t, CFErrorRef))(a3 + 16))(a3, v34);
            CFRelease(v33);
            CFRelease(v34);
            return;
          }
          CFStringRef v23 = (const __CFString *)v22;
          if (getMainBundle(void)::onceToken != -1) {
            dispatch_once(&getMainBundle(void)::onceToken, &__block_literal_global_32);
          }
          if (getMainBundle(void)::gMainBundle)
          {
            CFDictionaryRef v24 = (const __CFDictionary *)CFBundleCopyLocalizedStringTableForLocalization();
            if (v24)
            {
              CFDictionaryRef v12 = v24;
              if (CFDictionaryGetCount(v24)) {
                goto LABEL_63;
              }
              CFRelease(v12);
            }
          }
          if (getFallbackBundle(void)::onceToken != -1) {
            dispatch_once(&getFallbackBundle(void)::onceToken, &__block_literal_global_38);
          }
          if (getFallbackBundle(void)::gFallbackBundle)
          {
            CFDictionaryRef v25 = (const __CFDictionary *)CFBundleCopyLocalizedStringTableForLocalization();
            CFDictionaryRef v12 = v25;
            if (!v25 || CFDictionaryGetCount(v25))
            {
LABEL_63:
              if (!v18)
              {
                CFStringRef v26 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"%@-filters", v23);
                if (v26)
                {
                  CFStringRef v27 = v26;
                  if (getMainBundle(void)::onceToken != -1) {
                    dispatch_once(&getMainBundle(void)::onceToken, &__block_literal_global_32);
                  }
                  if (!getMainBundle(void)::gMainBundle
                    || (v28 = CFBundleCopyResourceURLForLocalization((CFBundleRef)getMainBundle(void)::gMainBundle, v27, @"dat", 0, v23)) == 0|| (v29 = v28, off_t v18 = (char *)SIGeneralTrieCreateFromFileURL(v28), CFRelease(v29), !v18))
                  {
                    if (getFallbackBundle(void)::onceToken != -1) {
                      dispatch_once(&getFallbackBundle(void)::onceToken, &__block_literal_global_38);
                    }
                    if (getFallbackBundle(void)::gFallbackBundle
                      && (CFURLRef v30 = CFBundleCopyResourceURLForLocalization((CFBundleRef)getFallbackBundle(void)::gFallbackBundle, v27, @"dat", 0, v23)) != 0)
                    {
                      CFURLRef v31 = v30;
                      off_t v18 = (char *)SIGeneralTrieCreateFromFileURL(v30);
                      CFRelease(v31);
                    }
                    else
                    {
                      off_t v18 = 0;
                    }
                  }
                  CFRelease(v27);
                }
                else
                {
                  off_t v18 = 0;
                }
              }
              CFRelease(v23);
              if (v12)
              {
LABEL_79:
                if (v18) {
                  sLocalizationFilters[v8] = v18;
                }
                if (*(unsigned char *)(a1 + 4))
                {
                  update(a2, v12);
                  CFRelease(v12);
                  (*(void (**)(uint64_t, void))(a3 + 16))(a3, 0);
                }
                else
                {
                  uint64_t v35 = dispatch_group_create();
                  dispatch_group_enter(v35);
                  CFRetain(a2);
                  if (getLocalizationQueue(void)::onceLocQueueToken != -1) {
                    dispatch_once(&getLocalizationQueue(void)::onceLocQueueToken, &__block_literal_global_116);
                  }
                  block[0] = MEMORY[0x1E4F143A8];
                  block[1] = 0x40000000;
                  block[2] = __SILocalizationLoad_block_invoke_2;
                  block[3] = &__block_descriptor_tmp_14;
                  void block[4] = a2;
                  void block[5] = v12;
                  block[6] = v35;
                  dispatch_async((dispatch_queue_t)getLocalizationQueue(void)::gLocQueue, block);
                  if (getRefreshQueue(void)::onceRefQueueToken != -1) {
                    dispatch_once(&getRefreshQueue(void)::onceRefQueueToken, &__block_literal_global_120);
                  }
                  v36[0] = MEMORY[0x1E4F143A8];
                  v36[1] = 0x40000000;
                  v36[2] = __SILocalizationLoad_block_invoke_3;
                  v36[3] = &unk_1E63496E8;
                  v36[4] = a3;
                  v36[5] = v35;
                  dispatch_group_notify(v35, (dispatch_queue_t)getRefreshQueue(void)::gRefQueue, v36);
                }
                return;
              }
              goto LABEL_83;
            }
            CFRelease(v12);
          }
          CFDictionaryRef v12 = 0;
          goto LABEL_63;
        }
        CFRelease(v12);
      }
      CFDictionaryRef v12 = 0;
      goto LABEL_30;
    }
  }
  size_t v21 = *(void (**)(uint64_t, void))(a3 + 16);

  v21(a3, 0);
}

void __SILocalizationLoad_block_invoke()
{
  CFDictionaryRef OptionsDictionary = SIGeneralTrieCreateOptionsDictionary(2, 64, 0, 0, 0);
  sDynamicCache = (uint64_t)SIGeneralTrieCreateMutableWithDictionary(OptionsDictionary);
  if (OptionsDictionary)
  {
    CFRelease(OptionsDictionary);
  }
}

void update(const __CFLocale *a1, const __CFDictionary *a2)
{
  if (a1)
  {
    CFDictionaryRef v2 = a2;
    if (a2)
    {
      uint64_t LanguageID = SILanguagesGetLanguageID(a1);
      CFAllocatorRef alloc = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CFMutableStringRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
      uint64_t v5 = 0;
      CFDictionaryRef v16 = v2;
      do
      {
        CFStringRef v6 = gSuggestionsAcceptRejectLists[v5];
        if (CFStringHasPrefix(v6, @"REJECT"))
        {
          int v7 = 0;
          int v8 = 1;
        }
        else if (CFStringHasPrefix(v6, @"ACCEPT"))
        {
          int v7 = 0;
          int v8 = 3;
        }
        else if (CFStringHasPrefix(v6, @"FILLER"))
        {
          int v7 = 0;
          int v8 = 2;
        }
        else
        {
          if (!CFStringHasPrefix(v6, @"STOPWORDS")) {
            break;
          }
          int v8 = 5;
          int v7 = 1;
        }
        CFStringRef Value = (const __CFString *)CFDictionaryGetValue(v2, v6);
        if (Value)
        {
          CFArrayRef ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings(alloc, Value, @" | ");
          if (ArrayBySeparatingStrings)
          {
            CFArrayRef v11 = ArrayBySeparatingStrings;
            CFIndex Count = CFArrayGetCount(ArrayBySeparatingStrings);
            if (Count >= 1)
            {
              CFIndex v13 = Count;
              for (CFIndex i = 0; i != v13; ++i)
              {
                CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v11, i);
                if (CFStringGetLength(ValueAtIndex))
                {
                  v19.length = CFStringGetLength(Mutable);
                  v19.locatiouint64_t n = 0;
                  CFStringReplace(Mutable, v19, &stru_1F181E430);
                  CFStringAppendFormat(Mutable, 0, @"%d:%@", LanguageID, ValueAtIndex);
                  if (v7)
                  {
                    v20.length = CFStringGetLength(Mutable);
                    v20.locatiouint64_t n = 0;
                    CFStringFindAndReplace(Mutable, @"’", @"'", v20, 0);
                  }
                  addTerm(v8, Mutable);
                  CFStringNormalize(Mutable, kCFStringNormalizationFormD);
                  addTerm(v8, Mutable);
                }
              }
            }
            CFRelease(v11);
            CFDictionaryRef v2 = v16;
          }
        }
        ++v5;
      }
      while (v5 != 16);
      CFRelease(Mutable);
    }
  }
}

void __SILocalizationLoad_block_invoke_2(uint64_t a1)
{
  update(*(const __CFLocale **)(a1 + 32), *(const __CFDictionary **)(a1 + 40));
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
  CFRelease(*(CFTypeRef *)(a1 + 32));
  CFDictionaryRef v2 = *(const void **)(a1 + 40);

  CFRelease(v2);
}

void __SILocalizationLoad_block_invoke_3(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  CFDictionaryRef v2 = *(NSObject **)(a1 + 40);

  dispatch_release(v2);
}

void SILocalizationRefresh(uint64_t a1, CFArrayRef theArray, uint64_t a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v16 = a3;
  if (theArray)
  {
    uint64_t Count = CFArrayGetCount(theArray);
    MEMORY[0x1F4188790](Count);
    int v7 = (const __CFString **)((char *)&block[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
    bzero(v7, v6);
    v22.locatiouint64_t n = 0;
    v22.length = Count;
    CFArrayGetValues(theArray, v22, (const void **)v7);
  }
  else
  {
    uint64_t Count = 0;
    int v7 = (const __CFString **)&v20;
  }
  int v8 = dispatch_group_create();
  uint64_t v9 = malloc_type_calloc(0x3BuLL, 1uLL, 0x100004077774924uLL);
  CFStringRef v10 = malloc_type_calloc(0x3BuLL, 1uLL, 0x100004077774924uLL);
  if (Count >= 1)
  {
    do
    {
      CFStringRef Locale = *v7;
      CFTypeID v12 = CFGetTypeID(*v7);
      if (v12 != CFLocaleGetTypeID())
      {
        CFTypeID v13 = CFGetTypeID(Locale);
        if (v13 == CFStringGetTypeID())
        {
          unsigned int LanguageIDForIdentifier = SILanguagesGetLanguageIDForIdentifier(Locale);
          CFStringRef Locale = (const __CFString *)SILanguagesGetLocale(LanguageIDForIdentifier);
        }
        else
        {
          CFStringRef Locale = 0;
        }
      }
      int LanguageID = SILanguagesGetLanguageID((const __CFLocale *)Locale);
      dispatch_group_enter(v8);
      v18[0] = MEMORY[0x1E4F143A8];
      v18[1] = 0x40000000;
      v18[2] = __SILocalizationRefresh_block_invoke;
      v18[3] = &__block_descriptor_tmp_23;
      int v19 = LanguageID;
      v18[4] = v9;
      v18[5] = v10;
      v18[6] = v8;
      SILocalizationLoad(a1, (const __CFLocale *)Locale, (uint64_t)v18);
      ++v7;
      --Count;
    }
    while (Count);
  }
  if (getRefreshQueue(void)::onceRefQueueToken != -1) {
    dispatch_once(&getRefreshQueue(void)::onceRefQueueToken, &__block_literal_global_120);
  }
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __SILocalizationRefresh_block_invoke_2;
  block[3] = &unk_1E6349730;
  void block[4] = v16;
  void block[5] = v9;
  block[6] = v10;
  void block[7] = v8;
  dispatch_group_notify(v8, (dispatch_queue_t)getRefreshQueue(void)::gRefQueue, block);
}

void __SILocalizationRefresh_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 56);
  *(unsigned char *)(*(void *)(a1 + 32) + v2) = 1;
  if (a2) {
    *(unsigned char *)(*(void *)(a1 + 40) + v2) = 1;
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

void __SILocalizationRefresh_block_invoke_2(uint64_t a1)
{
  uint64_t v2 = 0;
  char v3 = 0;
  userInfoKeys[1] = *(void **)MEMORY[0x1E4F143B8];
  do
  {
    if (*(unsigned char *)(*(void *)(a1 + 40) + v2))
    {
      v3 |= *(unsigned char *)(*(void *)(a1 + 48) + v2) != 0;
    }
    else
    {
      atomic_store(0, &sLocalizationLoaded[v2]);
      sLocalizationFilters[v2] = 0;
    }
    ++v2;
  }
  while (v2 != 59);
  if ((v3 & 1) != 0
    && (CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80],
        (uint64_t v5 = (__CFString *)CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"SILocalization: error loading locales")) != 0))
  {
    size_t v6 = v5;
    int v7 = (void *)*MEMORY[0x1E4F1D140];
    userInfoValues = v5;
    userInfoKeys[0] = v7;
    CFErrorRef v8 = CFErrorCreateWithUserInfoKeysAndValues(v4, @"SpotlightLinguisticsErrorDomain", 1, (const void *const *)userInfoKeys, (const void *const *)&userInfoValues, 1);
    CFRelease(v6);
  }
  else
  {
    CFErrorRef v8 = 0;
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  if (v8) {
    CFRelease(v8);
  }
  free(*(void **)(a1 + 40));
  free(*(void **)(a1 + 48));
  dispatch_release(*(dispatch_object_t *)(a1 + 56));
}

BOOL SILocalizationIsAvailable(uint64_t a1, const __CFLocale *a2)
{
  int LanguageID = SILanguagesGetLanguageID(a2);
  if ((LanguageID - 59) >= 0xFFFFFFC7
    && (unsigned __int8 v3 = atomic_load(&sLocalizationLoaded[LanguageID]), (v3 & 1) != 0))
  {
    return sLocalizationFilters[LanguageID] != 0;
  }
  else
  {
    return 0;
  }
}

void SILocalizationRelease(void *a1)
{
  if (a1)
  {
    if (atomic_fetch_add((atomic_uint *volatile)a1, 0xFFFFFFFF) == 1) {
      free(a1);
    }
  }
}

uint64_t SILocalizationGetTokenType(uint64_t a1, const __CFLocale *a2, const char *a3, uint64_t a4, int a5)
{
  uint64_t result = 0;
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  unsigned int v26 = 0;
  if (a1 && a2 && a4)
  {
    int LanguageID = SILanguagesGetLanguageID(a2);
    uint64_t v12 = snprintf(0, 0, "%d:", LanguageID);
    size_t v13 = (a4 + v12 + 1);
    MEMORY[0x1F4188790](v12);
    CFStringRef v15 = &v25[-v14];
    bzero(&v25[-v14], v13);
    snprintf(v15, v13, "%d:%.*s", LanguageID, a4, a3);
    size_t v16 = strlen(v15);
    v15[v16] = 0;
    os_unfair_lock_lock((os_unfair_lock_t)&sCacheLock);
    uint64_t v17 = sDynamicCache;
    if (sDynamicCache)
    {
      int v18 = SIGeneralTrieContainsKey(sDynamicCache, v15, v16, &v26, 0);
      os_unfair_lock_unlock((os_unfair_lock_t)&sCacheLock);
      if (v18) {
        return v26;
      }
    }
    else
    {
      os_unfair_lock_unlock((os_unfair_lock_t)&sCacheLock);
    }
    uint64_t v19 = sLocalizationFilters[LanguageID];
    if (v19 && SIGeneralTrieContainsKey(v19, a3, a4, 0, 0))
    {
      return 6;
    }
    else if (a5)
    {
      if (v17)
      {
        CFAllocatorRef v20 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        CFStringRef v21 = CFStringCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const UInt8 *)v15, v16, 0x8000100u, 0, (CFAllocatorRef)*MEMORY[0x1E4F1CFA0]);
        if (v21)
        {
          CFStringRef v22 = v21;
          CFMutableDictionaryRef MutableCopy = CFStringCreateMutableCopy(v20, 0, v21);
          if (MutableCopy)
          {
            CFStringRef v24 = MutableCopy;
            CFStringLowercase(MutableCopy, a2);
            os_unfair_lock_lock((os_unfair_lock_t)&sCacheLock);
            if (sDynamicCache) {
              SIGeneralTrieContainsStringKey(sDynamicCache, v24, &v26, 0);
            }
            os_unfair_lock_unlock((os_unfair_lock_t)&sCacheLock);
            CFRelease(v24);
          }
          CFRelease(v22);
        }
      }
    }
    return v26;
  }
  return result;
}

uint64_t SILocalizationGetTokenTypeInString(uint64_t a1, const __CFLocale *a2, CFStringRef theString, int a4)
{
  v16[1] = *MEMORY[0x1E4F143B8];
  if (!theString) {
    return 0;
  }
  unsigned int Length = CFStringGetLength(theString);
  uint64_t result = 0;
  CFIndex v10 = Length;
  v16[0] = Length;
  if (a1 && a2)
  {
    if (Length)
    {
      CFIndex MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
      size_t v12 = MaximumSizeForEncoding + 1;
      MEMORY[0x1F4188790](MaximumSizeForEncoding);
      uint64_t v14 = (UInt8 *)v16 - v13;
      bzero((char *)v16 - v13, v12);
      v17.locatiouint64_t n = 0;
      v17.length = v10;
      CFStringGetBytes(theString, v17, 0x8000100u, 0x2Du, 0, v14, v12, v16);
      uint64_t v15 = v16[0];
      v14[v16[0]] = 0;
      return SILocalizationGetTokenType(a1, a2, (const char *)v14, v15, a4);
    }
  }
  return result;
}

CFBundleRef ___ZL13getMainBundlev_block_invoke()
{
  CFBundleRef result = CFBundleGetBundleWithIdentifier(@"com.apple.metadata.SpotlightLinguistics");
  getMainBundle(void)::gMainBundle = (uint64_t)result;
  return result;
}

void ___ZL17getFallbackBundlev_block_invoke()
{
  CFAllocatorRef v0 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFURLRef v1 = CFURLCreateWithString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], @"/System/Library/PrivateFrameworks/SpotlightLinguistics.framework", 0);
  if (v1)
  {
    CFURLRef v2 = v1;
    getFallbackBundle(void)::gFallbackBundle = (uint64_t)CFBundleCreate(v0, v1);
    CFRelease(v2);
  }
}

void addTerm(int a1, const __CFString *a2)
{
  if (a2)
  {
    os_unfair_lock_lock((os_unfair_lock_t)&sCacheLock);
    if (sDynamicCache) {
      SIGeneralTrieAddStringKey(sDynamicCache, a2, a1);
    }
    os_unfair_lock_unlock((os_unfair_lock_t)&sCacheLock);
  }
}

dispatch_queue_t ___ZL20getLocalizationQueuev_block_invoke()
{
  dispatch_queue_t result = dispatch_queue_create("com.apple.SI.Localization", 0);
  getLocalizationQueue(void)::gLocQueue = (uint64_t)result;
  return result;
}

dispatch_queue_t ___ZL15getRefreshQueuev_block_invoke_0()
{
  dispatch_queue_t result = dispatch_queue_create("com.apple.SI.Localization.refresh", 0);
  getRefreshQueue(void)::gRefQueue = (uint64_t)result;
  return result;
}

void *SStackCreate(int a1)
{
  CFURLRef v2 = malloc_type_calloc(1uLL, 8uLL, 0x2004093837F09uLL);
  *CFURLRef v2 = SQueueCreate(((a1 + 3) & 0xFFFFFFFC) + 8);
  return v2;
}

void SStackDestroy(uint64_t *a1)
{
  SQueueDestroy(*a1);

  free(a1);
}

uint64_t SStackLargestAllocatableSize(unsigned int **a1)
{
  return SQueueLargestAllocatableSize(*a1) - 8;
}

uint64_t SStackFirst(uint64_t *a1)
{
  uint64_t v3 = 0;
  uint64_t v1 = SQueuePeekData(*a1, &v3);
  if (v1) {
    return v1 + 4;
  }
  else {
    return 0;
  }
}

unsigned int *SStackDropFirst(uint64_t *a1)
{
  uint64_t v3 = 0;
  dispatch_queue_t result = (unsigned int *)SQueuePeekData(*a1, &v3);
  if (result) {
    return (unsigned int *)SQueueDropData((void *)*a1, ((*result - 1) & 0xFFFFFFFFFFFFFFFCLL) + 4);
  }
  return result;
}

uint64_t SStackDataLength(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 - 4) - 4;
}

uint64_t SStackCouldPushData(uint64_t *a1, int a2)
{
  return SQueueCouldPush(*a1, ((a2 + 3) & 0xFFFFFFFC) + 8);
}

_DWORD *SStackPushData(uint64_t *a1, size_t a2, const void *a3)
{
  uint64_t v6 = (a2 + 3) & 0xFFFFFFFC;
  int v7 = SQueueOpenPushData(*a1, v6 + 8);
  *int v7 = a2 + 4;
  CFErrorRef v8 = v7 + 1;
  if (a3) {
    memcpy(v7 + 1, a3, a2);
  }
  *(_DWORD *)((char *)v8 + v6) = 0;
  SQueueClosePushData((void *)*a1, v6 + 4);
  return v8;
}

_DWORD *SStackNextData(uint64_t *a1, uint64_t a2)
{
  CFURLRef v2 = (_DWORD *)(a2 + (((*(_DWORD *)(a2 - 4) - 4) + 3) & 0x1FFFFFFFCLL));
  if (*v2) {
    return v2 + 1;
  }
  unint64_t v5 = 0;
  unint64_t v4 = SQueueAvailableDataAfterOffset(*a1, (unint64_t)v2, &v5, 0);
  if (v4) {
    return (_DWORD *)(v4 + 4);
  }
  else {
    return 0;
  }
}

double SStackEmpty(void **a1)
{
  return SQueueEmpty(*a1);
}

void *SStackPopBack(void *result, uint64_t a2)
{
  if (a2)
  {
    CFURLRef v2 = (_DWORD *)(a2 + ((*(unsigned int *)(a2 - 4) - 1) & 0xFFFFFFFFFFFFFFFCLL));
    dispatch_queue_t result = SQueuePopBack((void *)*result, (unint64_t)v2);
    *CFURLRef v2 = 0;
  }
  return result;
}

void _log_fault_for_malloc_failure()
{
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT)) {
    _log_fault_for_malloc_failure_cold_1();
  }
}

CFAllocatorRef _MDZoneAllocatorCreate(void *a1)
{
  context.versiouint64_t n = 0;
  context.info = a1;
  memset(&context.retain, 0, 24);
  context.allocate = (CFAllocatorAllocateCallBack)zone_allocate;
  context.reallocate = (CFAllocatorReallocateCallBack)zone_reallocate;
  context.deallocate = (CFAllocatorDeallocateCallBack)zone_deallocate;
  context.preferredSize = (CFAllocatorPreferredSizeCallBack)zone_preferredSize;
  return CFAllocatorCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], &context);
}

void *zone_allocate(size_t size, int a2, malloc_zone_t *zone)
{
  return malloc_type_zone_malloc(zone, size, 0xF02CAAABuLL);
}

void *zone_reallocate(void *ptr, size_t size, int a3, malloc_zone_t *zone)
{
  return malloc_type_zone_realloc(zone, ptr, size, 0x3455C427uLL);
}

void zone_deallocate(void *ptr, malloc_zone_t *zone)
{
}

void query_zone_init()
{
  if (query_zone_init_onceToken != -1) {
    dispatch_once(&query_zone_init_onceToken, &__block_literal_global_7);
  }
}

CFAllocatorRef __query_zone_init_block_invoke()
{
  queryZone = (uint64_t)malloc_create_zone(0x10000uLL, 0);
  malloc_set_zone_name((malloc_zone_t *)queryZone, "SIQueryMallocZone");
  context.versiouint64_t n = 0;
  context.info = (void *)queryZone;
  memset(&context.retain, 0, 24);
  context.allocate = (CFAllocatorAllocateCallBack)zone_allocate;
  context.reallocate = (CFAllocatorReallocateCallBack)zone_reallocate;
  context.deallocate = (CFAllocatorDeallocateCallBack)zone_deallocate;
  context.preferredSize = (CFAllocatorPreferredSizeCallBack)zone_preferredSize;
  CFAllocatorRef result = CFAllocatorCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], &context);
  kCIQueryZoneAllocator = (uint64_t)result;
  return result;
}

uint64_t traverseCallback(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    a2 += 28;
    int v4 = *(_DWORD *)(v2 + 20);
    unsigned int v3 = *(_DWORD *)(v2 + 24);
  }
  else
  {
    unsigned int v3 = 0;
    int v4 = 0;
  }
  return SIGeneralTrieAddKey(a1, a2, v3, v4);
}

uint64_t SIGeneralTrieAddKey(uint64_t result, uint64_t a2, unsigned int a3, int a4)
{
  if (result)
  {
    uint64_t v4 = result;
    CFAllocatorRef result = 0;
    if (a3)
    {
      if (a4 && a2 && !*(void *)(v4 + 2088))
      {
        int v5 = *(_DWORD *)(v4 + 2076);
        if (v5)
        {
          return 0;
        }
        else
        {
          int v6 = 0;
          int v7 = 0;
          if (a3 > 0x3FF) {
            return v6 != 0;
          }
          if ((v5 & 8) == 0)
          {
            addLevel(v4, (int *)(v4 + 4), a2, a3, 0, a4, &v7);
            int v6 = v7;
            if (v7 == 2)
            {
              ++*(_DWORD *)(v4 + 2072);
              int v6 = 2;
            }
            return v6 != 0;
          }
          MDTrieInsert();
          return 1;
        }
      }
    }
  }
  return result;
}

uint64_t SITrieCompletionGetCompletion(uint64_t a1)
{
  if (a1) {
    return a1 + 28;
  }
  else {
    return 0;
  }
}

uint64_t SITrieCompletionGetLength(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 24);
  }
  return result;
}

uint64_t SITrieCompletionGetPayload(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 20);
  }
  return result;
}

uint64_t rankedTraverseCallback(uint64_t a1, uint64_t a2, __n128 a3)
{
  if (a2)
  {
    uint64_t v3 = a2;
    a2 += 28;
    int v5 = *(_DWORD *)(v3 + 20);
    unsigned int v4 = *(_DWORD *)(v3 + 24);
    a3.n128_u64[0] = *(void *)(v3 + 4);
  }
  else
  {
    int v5 = 0;
    unsigned int v4 = 0;
    a3.n128_u64[0] = 0;
  }
  return SIGeneralTrieAddKeyWithScore(a1, a2, v4, v5, 0, 0, a3);
}

uint64_t SIGeneralTrieAddKeyWithScore(uint64_t result, uint64_t a2, unsigned int a3, int a4, uint64_t a5, void (*a6)(uint64_t, double, double), __n128 a7)
{
  if (result)
  {
    uint64_t v7 = result;
    if (!*(void *)(result + 2088) && (int v8 = *(_DWORD *)(result + 2076), (v8 & 1) != 0))
    {
      CFAllocatorRef result = 0;
      int v11 = 0;
      if (a3 - 1 <= 0x3FE && a4)
      {
        if ((v8 & 8) != 0)
        {
          MDTrieInsert();
          return 1;
        }
        else
        {
          double v10 = 0.0;
          addLevelRanked(v7, v7 + 4, a2, a3, 0, a4, &v10, 0, a7, &v11, a5, a6);
          int v9 = v11;
          if (v11 == 2) {
            ++*(_DWORD *)(v7 + 2072);
          }
          return v9 != 0;
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

double SITrieCompletionGetScore(uint64_t a1)
{
  if (a1) {
    return *(double *)(a1 + 4);
  }
  else {
    return 0.0;
  }
}

CFDictionaryRef SIGeneralTrieCreateOptionsDictionary(int a1, uint64_t a2, const void *a3, int a4, int a5)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  int valuePtr = a1;
  *(void *)uint64_t v15 = a2;
  uint64_t v22 = 0;
  *(_OWORD *)keys = 0u;
  long long v21 = 0u;
  uint64_t v19 = 0;
  *(_OWORD *)values = 0u;
  long long v18 = 0u;
  int v9 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
  if (a1)
  {
    values[0] = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberIntType, &valuePtr);
    keys[0] = @"trieOptions";
    CFIndex v10 = 1;
  }
  else
  {
    CFIndex v10 = 0;
  }
  if (a2)
  {
    *(void *)((unint64_t)values | (8 * v10)) = CFNumberCreate(*v9, kCFNumberCFIndexType, v15);
    int v11 = (void *)((unint64_t)keys & 0xFFFFFFFFFFFFFFF7 | (8 * (v10++ & 1)));
    void *v11 = @"containerSize";
  }
  if (a3)
  {
    values[v10] = (void *)CFRetain(a3);
    keys[v10++] = @"directoryPath";
  }
  size_t v12 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
  if (a4)
  {
    values[v10] = (void *)CFRetain((CFTypeRef)*MEMORY[0x1E4F1CFD0]);
    keys[v10++] = @"containerSize";
  }
  if (a5)
  {
    values[v10] = (void *)CFRetain(*v12);
    keys[v10++] = @"storePayload";
  }
  else if (!v10)
  {
    return 0;
  }
  CFDictionaryRef v13 = CFDictionaryCreate(*v9, (const void **)keys, (const void **)values, v10, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  do
    CFRelease(*(CFTypeRef *)&v15[2 * v10-- + 2]);
  while (v10);
  return v13;
}

char *SIGeneralTrieCreateMutable()
{
  CFDictionaryRef OptionsDictionary = SIGeneralTrieCreateOptionsDictionary(0, 64, 0, 0, 0);
  MutableWithDictionary = SIGeneralTrieCreateMutableWithDictionary(OptionsDictionary);
  if (OptionsDictionary) {
    CFRelease(OptionsDictionary);
  }
  return MutableWithDictionary;
}

char *SIGeneralTrieCreateMutableWithDictionary(const __CFDictionary *a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = burstTrieCreate();
  uint64_t v3 = v2;
  if (a1 && v2)
  {
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a1, @"containerSize");
    if (Value) {
      CFNumberGetValue(Value, kCFNumberSInt32Type, v3 + 2096);
    }
    CFNumberRef v5 = (const __CFNumber *)CFDictionaryGetValue(a1, @"trieOptions");
    if (v5) {
      CFNumberGetValue(v5, kCFNumberSInt32Type, v3 + 2076);
    }
    if ((v3[2076] & 8) != 0)
    {
      CFStringRef v6 = (const __CFString *)CFDictionaryGetValue(a1, @"directoryPath");
      CFDictionaryGetValue(a1, @"readOnly");
      CFDictionaryGetValue(a1, @"storePayload");
      if (v6)
      {
        bzero(buffer, 0x400uLL);
        usedBufLeuint64_t n = 0;
        memset(&v9, 0, sizeof(v9));
        v13.length = CFStringGetLength(v6);
        v13.locatiouint64_t n = 0;
        CFStringGetBytes(v6, v13, 0x8000100u, 0x2Du, 0, buffer, 1023, &usedBufLen);
        buffer[usedBufLen] = 0;
        if (!stat((const char *)buffer, &v9))
        {
          int v7 = open((const char *)buffer, 0);
          *((_DWORD *)v3 + 528) = v7;
          if ((v7 & 0x80000000) == 0) {
            *(void *)(v3 + 2116) = MDTrieCreate();
          }
        }
      }
    }
  }
  return v3;
}

char *burstTrieCreate(void)
{
  CFAllocatorRef result = (char *)malloc_type_calloc(1uLL, 0x850uLL, 0x1070040072F646FuLL);
  if (result)
  {
    *(_OWORD *)(result + 2072) = 0u;
    atomic_store(0, (unsigned int *)result);
    *((void *)result + 261) = 0;
    *((void *)result + 262) = 64;
    *((_DWORD *)result + 526) = 2;
    atomic_fetch_add((atomic_uint *volatile)result, 1u);
  }
  return result;
}

char *SIGeneralTrieCreateMutableWithOptions(int a1, int a2)
{
  CFAllocatorRef result = burstTrieCreate();
  if (result)
  {
    *((_DWORD *)result + 519) = a2;
    *((_DWORD *)result + 524) = a1;
  }
  return result;
}

_DWORD *SIGeneralTrieCreateFromFileURL(const __CFURL *a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 0;
  }
  memset(&v11, 0, sizeof(v11));
  CFStringRef v1 = CFURLCopyPath(a1);
  if (!v1) {
    return 0;
  }
  CFStringRef v2 = v1;
  bzero(buffer, 0x400uLL);
  usedBufLeuint64_t n = 0;
  v14.length = CFStringGetLength(v2);
  v14.locatiouint64_t n = 0;
  CFStringGetBytes(v2, v14, 0x8000100u, 0x2Du, 0, buffer, 1024, &usedBufLen);
  buffer[usedBufLen] = 0;
  if (stat((const char *)buffer, &v11))
  {
LABEL_13:
    CFRelease(v2);
    return 0;
  }
  int v3 = open((const char *)buffer, 0);
  int v4 = v3;
  if (v3 < 0)
  {
    if (v3 == -1) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  CFNumberRef v5 = mmap(0, v11.st_size, 1, 1, v3, 0);
  CFStringRef v6 = v5;
  if (v5 == (_DWORD *)-1) {
    goto LABEL_11;
  }
  int v7 = burstTrieCreateWithBytes(v5, 1);
  if (!v7)
  {
    if (!v6)
    {
LABEL_12:
      close(v4);
      goto LABEL_13;
    }
LABEL_11:
    munmap(v6, v11.st_size);
    goto LABEL_12;
  }
  int v8 = v7;
  CFRelease(v2);
  close(v4);
  return v8;
}

_DWORD *burstTrieCreateWithBytes(_DWORD *result, int a2)
{
  if (result)
  {
    CFStringRef v2 = result;
    if (*result == 12648430 || *result == -900339842)
    {
      CFAllocatorRef result = malloc_type_calloc(1uLL, 0x850uLL, 0x1070040072F646FuLL);
      *((void *)result + 261) = v2;
      int v5 = v2[3];
      *((void *)result + 260) = v2[2];
      result[518] = v5;
      int v6 = v2[4];
      result[519] = v6;
      if (*v2 == -900339842) {
        result[519] = v6 | 1;
      }
      result[524] = v2[5];
      result[525] = a2;
      result[526] = 2;
      atomic_store(0, result);
      atomic_fetch_add(result, 1u);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void SIGeneralTrieRelease(char *a1)
{
  if (a1 && atomic_fetch_add((atomic_uint *volatile)a1, 0xFFFFFFFF) == 1)
  {
    CFStringRef v2 = (void *)*((void *)a1 + 261);
    if (v2)
    {
      if (*((_DWORD *)a1 + 525)) {
        munmap(v2, *((void *)a1 + 260));
      }
    }
    else
    {
      int v3 = a1 + 4;
      if (a1[2076]) {
        finishLevel<_RankedTrieLevel *,_RankedListNode *>((uint64_t)v3);
      }
      else {
        finishLevel<_TrieLevel *,_ListNode *>((uint64_t)v3);
      }
    }
    if ((a1[2076] & 8) != 0 && *(void *)(a1 + 2116))
    {
      MDTrieSync();
      MDTrieClose();
      free(*(void **)(a1 + 2116));
    }
    free(a1);
  }
}

_DWORD *SIGeneralTrieCreateWithBytes(_DWORD *a1)
{
  return burstTrieCreateWithBytes(a1, 0);
}

char *SIGeneralTrieCreateWithFileDescriptors()
{
  CFAllocatorRef v0 = burstTrieCreate();
  *(void *)(v0 + 2116) = MDTrieOpenReadOnly();
  *((_DWORD *)v0 + 519) = 8;
  return v0;
}

uint64_t SIGeneralTrieGetCount(uint64_t a1)
{
  if (a1 && (*(unsigned char *)(a1 + 2076) & 8) != 0) {
    return MEMORY[0x1F412F0A8](*(void *)(a1 + 2116));
  }
  else {
    return *(unsigned int *)(a1 + 2072);
  }
}

char *SIGeneralTrieCreateMutableCopy(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  int v2 = *(_DWORD *)(a1 + 2076);
  if ((v2 & 8) != 0) {
    return 0;
  }
  CFDictionaryRef OptionsDictionary = SIGeneralTrieCreateOptionsDictionary(v2, *(unsigned int *)(a1 + 2096), 0, 0, 0);
  MutableWithDictionary = SIGeneralTrieCreateMutableWithDictionary(OptionsDictionary);
  if (OptionsDictionary) {
    CFRelease(OptionsDictionary);
  }
  if (*(_DWORD *)(a1 + 2076)) {
    int v5 = rankedTraverseCallback;
  }
  else {
    int v5 = traverseCallback;
  }
  SIGeneralTrieSearch(a1, 0, 0, -1, (uint64_t)MutableWithDictionary, (uint64_t)v5);
  return MutableWithDictionary;
}

void SIGeneralTrieSearch(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a1)
  {
    if ((*(unsigned char *)(a1 + 2076) & 8) != 0)
    {
      uint64_t v17 = MEMORY[0x1E4F143A8];
      uint64_t v18 = 0x40000000;
      uint64_t v19 = __SIGeneralTrieSearch_block_invoke;
      CFAllocatorRef v20 = &__block_descriptor_tmp_7;
      uint64_t v21 = a6;
      uint64_t v22 = a5;
      MDTrieEnumerateEntry();
    }
    else
    {
      unsigned int v9 = a3;
      if (a4 < 0)
      {
        uint64_t v13 = 3;
        uint64_t v14 = 0;
        uint64_t v15 = a5;
        uint64_t v16 = a6;
        searchWithContext((void *)a1, a2, a3, 0, (uint64_t)&v13);
      }
      else
      {
        CursorWithBytes = (char *)SIGeneralTrieCreateCursorWithBytes(a1, (unsigned __int8 *)a2, a3);
        if (CursorWithBytes)
        {
          uint64_t v12 = CursorWithBytes;
          uint64_t v13 = (uint64_t)a2;
          uint64_t v14 = v9;
          uint64_t v15 = a5;
          uint64_t v16 = a6;
          SIGeneralTrieTraverseFromCursor(CursorWithBytes, a4, (uint64_t)&v13, (uint64_t (*)(uint64_t, uint64_t, void, double))searchCallback);
          free(v12);
        }
      }
    }
  }
}

atomic_uint *SIGeneralTrieRetain(atomic_uint *result)
{
  if (result) {
    atomic_fetch_add(result, 1u);
  }
  return result;
}

uint64_t addLevel(uint64_t result, int *a2, uint64_t a3, unsigned int a4, unsigned int a5, int a6, _DWORD *a7)
{
  int v20 = 0;
  if (a5 < a4)
  {
    uint64_t v10 = result;
    stat v11 = (unsigned __int8 *)(a3 + a5);
    uint64_t v12 = *(void *)&a2[2 * *v11 + 1];
    if ((v12 & 3) == 2)
    {
      uint64_t v19 = (_DWORD *)(v12 & 0xFFFFFFFFFFFFFFFCLL);
      CFAllocatorRef result = addListNode(result, &v19, a3, a4, a5 + 1, a6, &v20);
      uint64_t v14 = (uint64_t)v19;
      if (result >= *(_DWORD *)(v10 + 2096))
      {
        CFAllocatorRef result = (uint64_t)burstLevel(v10, v19, 0);
        uint64_t v14 = result;
        uint64_t v15 = 1;
      }
      else
      {
        uint64_t v15 = 2;
      }
      uint64_t v18 = v15 | v14;
    }
    else
    {
      if ((v12 & 3) == 1)
      {
        CFAllocatorRef result = addLevel(result, v12 & 0xFFFFFFFFFFFFFFFCLL);
        if (!a7) {
          return result;
        }
        goto LABEL_10;
      }
      size_t v16 = ~a5 + a4;
      unint64_t v17 = (unint64_t)malloc_type_calloc(1uLL, v16 + 15, 0xEEB99C1AuLL);
      CFAllocatorRef result = (uint64_t)memcpy((void *)(v17 + 14), v11 + 1, v16);
      *(unsigned char *)(v17 + 14 + v16) = 0;
      *(_WORD *)(v17 + 12) = v16;
      *(_DWORD *)(v17 + 8) = a6;
      *(void *)unint64_t v17 = 0;
      uint64_t v18 = v17 | 2;
      int v20 = 2;
    }
    *(void *)&a2[2 * *v11 + 1] = v18;
    if (!a7) {
      return result;
    }
LABEL_10:
    *a7 = v20;
    return result;
  }
  if (*a2) {
    int v13 = 1;
  }
  else {
    int v13 = 2;
  }
  int v20 = v13;
  *a2 = a6;
  if (a7) {
    goto LABEL_10;
  }
  return result;
}

uint64_t SIGeneralTrieAddStringKey(uint64_t a1, CFStringRef theString, int a3)
{
  uint64_t result = 0;
  v14[1] = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (theString)
    {
      CFIndex Length = CFStringGetLength(theString);
      uint64_t result = 0;
      if (a3)
      {
        if (Length)
        {
          CFIndex v8 = CFStringGetLength(theString);
          v14[0] = v8;
          CFIndex MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(v8, 0x8000100u);
          size_t v10 = MaximumSizeForEncoding + 1;
          MEMORY[0x1F4188790](MaximumSizeForEncoding);
          uint64_t v12 = (UInt8 *)v14 - v11;
          bzero((char *)v14 - v11, v10);
          v15.locatiouint64_t n = 0;
          v15.length = v8;
          CFStringGetBytes(theString, v15, 0x8000100u, 0x2Du, 0, v12, v10, v14);
          unsigned int v13 = v14[0];
          v12[v14[0]] = 0;
          return SIGeneralTrieAddKey(a1, (uint64_t)v12, v13, a3);
        }
      }
    }
  }
  return result;
}

void addLevelRanked(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned int a5, int a6, double *a7, uint64_t a8, __n128 a9, _DWORD *a10, uint64_t a11, void (*a12)(uint64_t, double, double))
{
  double v14 = a9.n128_f64[0];
  int v29 = 0;
  if (a5 >= a4)
  {
    if (*(_DWORD *)(a2 + 16)) {
      int v20 = 1;
    }
    else {
      int v20 = 2;
    }
    int v29 = v20;
    *(_DWORD *)(a2 + 16) = a6;
    if (a12 || (a8 & 1) == 0)
    {
      double v21 = *(double *)(a2 + 8);
      if (a12) {
        double v14 = ((double (*)(uint64_t, double, double))a12)(a11, v21, v14);
      }
      else {
        double v14 = v21 + v14;
      }
    }
    *(double *)(a2 + 8) = v14;
    *a7 = v14;
  }
  else
  {
    uint64_t v18 = (unsigned __int8 *)(a3 + a5);
    uint64_t v19 = *(void *)(a2 + 8 * *v18 + 20);
    if ((v19 & 3) == 2)
    {
      CFURLRef v28 = (double *)(v19 & 0xFFFFFFFFFFFFFFFCLL);
      unsigned int v22 = addListNodeRanked(a1, &v28, a3, a4, a5 + 1, a6, a7, a8, a9.n128_f64[0], &v29, a11, a12);
      uint64_t v23 = v28;
      if (v22 >= *(_DWORD *)(a1 + 2096))
      {
        uint64_t v23 = burstLevelRanked(a1, (unsigned __int16 *)v28, a7, a8, &v29);
        uint64_t v24 = 1;
      }
      else
      {
        uint64_t v24 = 2;
      }
      uint64_t v27 = v24 | (unint64_t)v23;
    }
    else
    {
      if ((v19 & 3) == 1)
      {
        addLevelRanked(a1, v19 & 0xFFFFFFFFFFFFFFFCLL, a9);
        goto LABEL_20;
      }
      *a7 = a9.n128_f64[0];
      size_t v25 = ~a5 + a4;
      unint64_t v26 = (unint64_t)malloc_type_calloc(1uLL, v25 + 31, 0x68F56B5CuLL);
      memcpy((void *)(v26 + 30), v18 + 1, v25);
      *(unsigned char *)(v26 + 30 + v25) = 0;
      *(_WORD *)(v26 + 28) = v25;
      *(_DWORD *)(v26 + 24) = a6;
      *(double *)(v26 + 8) = v14;
      *(double *)(v26 + 16) = v14;
      *(void *)unint64_t v26 = 0;
      uint64_t v27 = v26 | 2;
      int v29 = 2;
    }
    *(void *)(a2 + 8 * *v18 + 20) = v27;
  }
LABEL_20:
  if (*a7 > *(double *)a2) {
    *(double *)a2 = *a7;
  }
  if (a10) {
    *a10 = v29;
  }
}

uint64_t SIGeneralTrieAddStringKeyWithScore(uint64_t a1, CFStringRef theString, int a3, uint64_t a4, void (*a5)(uint64_t, double, double), double a6)
{
  uint64_t result = 0;
  v21[1] = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (theString)
    {
      CFIndex Length = CFStringGetLength(theString);
      uint64_t result = 0;
      if (a3)
      {
        if (Length)
        {
          CFIndex v14 = CFStringGetLength(theString);
          v21[0] = v14;
          CFIndex MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(v14, 0x8000100u);
          size_t v16 = MaximumSizeForEncoding + 1;
          MEMORY[0x1F4188790](MaximumSizeForEncoding);
          uint64_t v18 = (UInt8 *)v21 - v17;
          bzero((char *)v21 - v17, v16);
          v22.locatiouint64_t n = 0;
          v22.length = v14;
          CFStringGetBytes(theString, v22, 0x8000100u, 0x2Du, 0, v18, v16, v21);
          unsigned int v19 = v21[0];
          v18[v21[0]] = 0;
          v20.n128_f64[0] = a6;
          return SIGeneralTrieAddKeyWithScore(a1, (uint64_t)v18, v19, a3, a4, a5, v20);
        }
      }
    }
  }
  return result;
}

uint64_t SIGeneralTrieSetKeyWithScore(uint64_t result, uint64_t a2, unsigned int a3, int a4, __n128 a5)
{
  if (result)
  {
    uint64_t v5 = result;
    if (!*(void *)(result + 2088) && (int v6 = *(_DWORD *)(result + 2076), (v6 & 1) != 0))
    {
      uint64_t result = 0;
      int v9 = 0;
      if (a3 - 1 <= 0x3FE && a4)
      {
        if ((v6 & 8) != 0)
        {
          MDTrieInsert();
          return 1;
        }
        else
        {
          double v8 = 0.0;
          addLevelRanked(v5, v5 + 4, a2, a3, 0, a4, &v8, 1, a5, &v9, 0, 0);
          int v7 = v9;
          if (v9 == 2) {
            ++*(_DWORD *)(v5 + 2072);
          }
          return v7 != 0;
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t SIGeneralTrieSetStringKeyWithScore(uint64_t a1, CFStringRef theString, int a3, double a4)
{
  uint64_t result = 0;
  v17[1] = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (theString)
    {
      CFIndex Length = CFStringGetLength(theString);
      uint64_t result = 0;
      if (a3)
      {
        if (Length)
        {
          CFIndex v10 = CFStringGetLength(theString);
          v17[0] = v10;
          CFIndex MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(v10, 0x8000100u);
          size_t v12 = MaximumSizeForEncoding + 1;
          MEMORY[0x1F4188790](MaximumSizeForEncoding);
          CFIndex v14 = (UInt8 *)v17 - v13;
          bzero((char *)v17 - v13, v12);
          v18.locatiouint64_t n = 0;
          v18.length = v10;
          CFStringGetBytes(theString, v18, 0x8000100u, 0x2Du, 0, v14, v12, v17);
          unsigned int v15 = v17[0];
          v14[v17[0]] = 0;
          v16.n128_f64[0] = a4;
          return SIGeneralTrieSetKeyWithScore(a1, (uint64_t)v14, v15, a3, v16);
        }
      }
    }
  }
  return result;
}

atomic_uint *SITrieCompletionRetain(atomic_uint *result)
{
  if (result) {
    atomic_fetch_add(result, 1u);
  }
  return result;
}

atomic_uint *trieCompletionRetain(const __CFAllocator *a1, atomic_uint *a2)
{
  uint64_t result = a2;
  if (a2) {
    atomic_fetch_add(a2, 1u);
  }
  return result;
}

void SITrieCompletionRelease(const __CFAllocator *a1)
{
  if (a1) {
    trieCompletionRelease(a1, (atomic_uint *)a1);
  }
}

void trieCompletionRelease(const __CFAllocator *a1, atomic_uint *a2)
{
  if (a2)
  {
    atomic_fetch_add(a2, 0xFFFFFFFF);
    __atomic_load();
    if (!v3) {
      free(a2);
    }
  }
}

uint64_t SIGeneralTrieContainsKey(uint64_t a1, const void *a2, uint64_t a3, _DWORD *a4, void **a5)
{
  if (!a3) {
    return 0;
  }
  if ((*(unsigned char *)(a1 + 2076) & 8) != 0)
  {
    v9[0] = 0;
    *(void *)&long long v10 = 0;
    return MDTrieSearch();
  }
  *(_OWORD *)int v9 = 0u;
  long long v10 = 0u;
  searchWithContext((void *)a1, a2, a3, 1, (uint64_t)v9);
  if (!HIDWORD(v9[0])) {
    return 0;
  }
  if (a4) {
    *a4 = HIDWORD(v9[0]);
  }
  if (a5) {
    *a5 = v9[1];
  }
  return 1;
}

void *searchWithContext(void *result, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v19[4] = *MEMORY[0x1E4F143B8];
  if (a3 <= 0x3FF)
  {
    uint64_t v9 = (uint64_t)result;
    long long v10 = sharedBuffer();
    memcpy(v10, a2, a3);
    *((unsigned char *)v10 + a3) = 0;
    uint64_t v11 = *(void *)(v9 + 2088);
    int v12 = *(_DWORD *)(v9 + 2076);
    if (v11)
    {
      uint64_t v13 = (*(_DWORD *)(v11 + 4) & 0xFFFFFFFC) + v11;
      if (v12)
      {
        CFIndex v14 = v19;
        v19[0] = &unk_1F181DBB8;
        v19[1] = containsKey;
        void v19[3] = v19;
        searchDiskLevelRanked(v9, v13, (const unsigned __int8 *)v10, a3, 0, a4, a5, (uint64_t)v19);
      }
      else
      {
        CFIndex v14 = v18;
        v18[0] = &unk_1F181DBB8;
        v18[1] = containsKey;
        v18[3] = v18;
        searchDiskLevel(v9, v13, (const unsigned __int8 *)v10, a3, 0, a4, a5, (uint64_t)v18);
      }
    }
    else
    {
      unsigned int v15 = (int *)(v9 + 4);
      if (v12)
      {
        CFIndex v14 = v17;
        v17[0] = &unk_1F181DBB8;
        v17[1] = containsKey;
        v17[3] = v17;
        searchLevelRanked((uint64_t)v15, (const unsigned __int8 *)v10, a3, 0, a4, a5, (uint64_t)v17);
      }
      else
      {
        CFIndex v14 = v16;
        v16[0] = &unk_1F181DBB8;
        v16[1] = containsKey;
        v16[3] = v16;
        searchLevel(v15, (const unsigned __int8 *)v10, a3, 0, a4, a5, (uint64_t)v16);
      }
    }
    return std::__function::__value_func<void ()(void *,_SITrieCompletion *,BOOL,BOOL *)>::~__value_func[abi:ne180100](v14);
  }
  return result;
}

void sub_1BDAF9590(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::__function::__value_func<void ()(void *,_SITrieCompletion *,BOOL,BOOL *)>::~__value_func[abi:ne180100](va);
  _Unwind_Resume(a1);
}

CFIndex SIGeneralTrieContainsStringKey(uint64_t a1, CFStringRef theString, _DWORD *a3, void **a4)
{
  CFIndex result = 0;
  v15[1] = *MEMORY[0x1E4F143B8];
  if (a1 && theString)
  {
    CFIndex result = CFStringGetLength(theString);
    if (result)
    {
      CFIndex Length = CFStringGetLength(theString);
      v15[0] = Length;
      CFIndex MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
      size_t v11 = MaximumSizeForEncoding + 1;
      MEMORY[0x1F4188790](MaximumSizeForEncoding);
      uint64_t v13 = (UInt8 *)v15 - v12;
      bzero((char *)v15 - v12, v11);
      v16.locatiouint64_t n = 0;
      v16.length = Length;
      CFStringGetBytes(theString, v16, 0x8000100u, 0x2Du, 0, v13, v11, v15);
      uint64_t v14 = v15[0];
      v13[v15[0]] = 0;
      return SIGeneralTrieContainsKey(a1, v13, v14, a3, a4);
    }
  }
  return result;
}

void __SIGeneralTrieSearch_block_invoke(uint64_t a1, const void *a2, unsigned int a3, int a4, uint64_t a5, double a6)
{
  v19[1] = *MEMORY[0x1E4F143B8];
  MEMORY[0x1F4188790](a1);
  uint64_t v13 = (char *)v19 - ((v12 + 15) & 0x1FFFFFFF0);
  size_t v15 = v14;
  bzero(&v13[v14], v16);
  memcpy(v13, a2, v15);
  uint64_t v17 = SITrieCompletionCreate((const unsigned __int8 *)v13, a3, a4, a6);
  CFAllocatorRef v18 = (const __CFAllocator *)(*(uint64_t (**)(void, char *, uint64_t))(a1 + 32))(*(void *)(a1 + 40), v17, a5);
  if (v17)
  {
    trieCompletionRelease(v18, (atomic_uint *)v17);
  }
}

char *SITrieCompletionCreate(const unsigned __int8 *a1, unsigned int a2, int a3, double a4)
{
  size_t v8 = a2;
  uint64_t v9 = (char *)malloc_type_malloc(a2 + 29, 0xC028C689uLL);
  long long v10 = v9;
  if (v9)
  {
    *((_DWORD *)v9 + 6) = a2;
    size_t v11 = v9 + 28;
    v11[v8] = 0;
    memcpy(v11, a1, v8);
    *((_DWORD *)v10 + 5) = a3;
    *(double *)(v10 + 4) = a4;
    __atomic_store();
    atomic_fetch_add((atomic_uint *volatile)v10, 1u);
  }
  return v10;
}

void *SIGeneralTrieCreateCursorWithBytes(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  int v6 = malloc_type_calloc(0x2CuLL, 1uLL, 0xD98E55FAuLL);
  if (!SIGeneralTrieSetCursorWithBytes(a1, (uint64_t)v6, a2, a3, v7, v8, v9, v10, v11, v12) && v6)
  {
    free(v6);
    return 0;
  }
  return v6;
}

char *SIGeneralTrieTraverseFromCursor(char *result, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, void, double))
{
  if (result)
  {
    uint64_t v7 = result;
    CFIndex result = (char *)sharedBuffer();
    char v12 = 0;
    int v8 = *((_DWORD *)v7 + 8);
    if (v8)
    {
      if (v8 == 1)
      {
        long long v10 = *(_OWORD *)v7;
        LODWORD(v11) = *((_DWORD *)v7 + 4);
        *(void *)((char *)&v11 + 4) = *(void *)(v7 + 20);
        return (char *)traverseFromCompactMapCursor(*(void *)(v7 + 36), (uint64_t)&v10, (uint64_t)result, 0x1000u, 0, &v12, a3, a4);
      }
    }
    else
    {
      long long v10 = *(_OWORD *)v7;
      uint64_t v9 = *((void *)v7 + 3);
      *(void *)&long long v11 = *((void *)v7 + 2);
      *((void *)&v11 + 1) = v9;
      return (char *)traverseFromMapCursor(*(void *)(v7 + 36), (uint64_t)&v10, (uint64_t)result, 0, a2, &v12, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t, void, unsigned char *, double))a4);
    }
  }
  return result;
}

void searchCallback(unsigned int *a1, const unsigned __int8 *a2, unsigned int a3, int a4, double a5, BOOL *a6)
{
  v21[1] = *MEMORY[0x1E4F143B8];
  size_t v12 = a1[2];
  uint64_t v13 = v12 + a3;
  unsigned int v14 = (const void **)MEMORY[0x1F4188790](a1);
  size_t v16 = (char *)v21 - v15;
  uint64_t v17 = *v14;
  if (v13 <= v12) {
    size_t v18 = 0;
  }
  else {
    size_t v18 = v13 - v12;
  }
  bzero(&v16[v12], v18);
  memcpy(v16, v17, v12);
  memcpy(&v16[v12], a2, a3);
  unsigned int v19 = SITrieCompletionCreate((const unsigned __int8 *)v16, v13, a4, a5);
  CFAllocatorRef v20 = (const __CFAllocator *)(*((uint64_t (**)(void, char *, BOOL *))a1 + 3))(*((void *)a1 + 2), v19, a6);
  if (v19)
  {
    trieCompletionRelease(v20, (atomic_uint *)v19);
  }
}

void SIGeneralTrieCursorDispose(void *a1)
{
  if (a1) {
    free(a1);
  }
}

void SIGeneralTrieSearchString(uint64_t a1, CFStringRef theString, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v15[1] = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if (theString) {
      CFIndex Length = CFStringGetLength(theString);
    }
    else {
      CFIndex Length = 0;
    }
    v15[0] = Length;
    CFIndex MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
    size_t v12 = MaximumSizeForEncoding + 1;
    MEMORY[0x1F4188790](MaximumSizeForEncoding);
    unsigned int v14 = (UInt8 *)v15 - v13;
    bzero((char *)v15 - v13, v12);
    if (theString)
    {
      v16.locatiouint64_t n = 0;
      v16.length = Length;
      CFStringGetBytes(theString, v16, 0x8000100u, 0x2Du, 0, v14, v12, v15);
      CFIndex Length = v15[0];
      v14[v15[0]] = 0;
    }
    SIGeneralTrieSearch(a1, v14, Length, a3, a4, a5);
  }
}

uint64_t enumerateListNode<_ListNode *>(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t, double))
{
  *(unsigned char *)(a2 + a3) = 0;
  return a6(a5, 0.0);
}

uint64_t traverseFromCompactMapCursor(uint64_t result, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, unsigned char *a6, uint64_t a7, uint64_t (*a8)(uint64_t, uint64_t, void, double))
{
  uint64_t v8 = *(void *)a2;
  unsigned int v10 = a5;
  uint64_t v14 = result;
  switch(*(void *)a2 & 3)
  {
    case 1:
      goto LABEL_3;
    case 2:
      int v15 = *(_DWORD *)(result + 2076);
      CFRange v16 = (_DWORD *)((v8 & 0xFFFFFFFFFFFFFFFCLL) + *(void *)(result + 2088));
      if ((v15 & 1) == 0)
      {
        unsigned int v17 = *v16 - 4;
        unsigned int v18 = *(_DWORD *)(a2 + 8);
        if ((v15 & 4) == 0)
        {
          if (v18 >= v17) {
            return result;
          }
          while (1)
          {
            unsigned int v19 = (char *)v16 + v18;
            uint64_t v20 = *((unsigned __int16 *)v19 + 4);
            uint64_t v21 = *(unsigned int *)(a2 + 12);
            if (v20 >= v21)
            {
              uint64_t v23 = v19 + 4;
              int v24 = v20 - v21;
              memcpy((void *)(a3 + v10), &v19[v21 + 10], v20 - (int)v21);
              *(unsigned char *)(a3 + v24 + v10) = 0;
              CFIndex result = a8(a7, a3, *((unsigned __int16 *)v23 + 2), (double)*(unsigned int *)v23);
              if (a6 && *a6) {
                return result;
              }
              int v22 = *((unsigned __int16 *)v23 + 2) + *(_DWORD *)(a2 + 8);
            }
            else
            {
              int v22 = v18 + v20;
            }
            unsigned int v18 = v22 + 6;
            *(_DWORD *)(a2 + 8) = v18;
            if (v18 >= v17) {
              return result;
            }
          }
        }
        if (v18 >= v17) {
          return result;
        }
        while (1)
        {
          __int16 v55 = (char *)v16 + v18;
          uint64_t v56 = *((unsigned __int16 *)v55 + 4);
          uint64_t v57 = *(unsigned int *)(a2 + 12);
          if (v56 >= v57)
          {
            uint64_t v59 = (unsigned int *)(v55 + 4);
            int v60 = v56 - v57;
            memcpy((void *)(a3 + v10 + v55[10]), &v55[v57 + 11], v56 - (int)v57);
            *(unsigned char *)(a3 + v60 + v10 + *((unsigned __int8 *)v59 + 6)) = 0;
            CFIndex result = ((uint64_t (*)(uint64_t, uint64_t, void, void, unsigned char *, double))a8)(a7, a3, *((unsigned __int16 *)v59 + 2), *v59, a6, 0.0);
            if (a6 && *a6) {
              return result;
            }
            int v58 = *((unsigned __int16 *)v59 + 2) + *(_DWORD *)(a2 + 8);
          }
          else
          {
            int v58 = v18 + v56;
          }
          unsigned int v18 = v58 + 7;
          *(_DWORD *)(a2 + 8) = v18;
          if (v18 >= v17) {
            return result;
          }
        }
      }
      unsigned int v26 = *v16 - 12;
      if (*v16 != 12)
      {
        unsigned int v27 = 0;
        do
        {
          CFURLRef v28 = (char *)v16 + v27;
          uint64_t v29 = *((unsigned __int16 *)v28 + 12);
          uint64_t v30 = *(unsigned int *)(a2 + 12);
          if (v29 >= v30)
          {
            CFURLRef v31 = v28 + 12;
            int v32 = v29 - v30;
            memcpy((void *)(a3 + v10), &v28[v30 + 26], v29 - (int)v30);
            *(unsigned char *)(a3 + v32 + v10) = 0;
            CFIndex result = ((uint64_t (*)(uint64_t, uint64_t, void, void, unsigned char *, double))a8)(a7, a3, *((unsigned __int16 *)v31 + 6), *((unsigned int *)v31 + 2), a6, *(double *)v31);
            LODWORD(v29) = *((unsigned __int16 *)v31 + 6);
          }
          v27 += v29 + 14;
        }
        while (v27 < v26);
      }
      return result;
    case 3:
      unint64_t v25 = (v8 & 0xFFFFFFFFFFFFFFFCLL) + *(void *)(result + 2088);
      if ((*(unsigned char *)(result + 2076) & 1) == 0)
      {
        if (*(_DWORD *)(v25 + 32)
          && (*(unsigned char *)(a3 + a5) = 0,
              CFIndex result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, void, unsigned char *, double))a8)(a7, a3, a5, *(unsigned int *)(v25 + 32), a6, 0.0), a6))
        {
          if (v10 >= a4 || *a6) {
            return result;
          }
        }
        else if (v10 >= a4)
        {
          return result;
        }
        uint64_t v33 = v10;
        unint64_t v34 = 0;
        uint64_t v35 = a4 - 1;
        uint64_t v36 = v10 + 1;
        while (1)
        {
          *(unsigned char *)(a3 + v33) = v34;
          if (v34 >> 6 <= 1) {
            uint64_t v37 = 1;
          }
          else {
            uint64_t v37 = v34 >> 6;
          }
          uint64_t v38 = *(void *)(v25 + 8 * (v34 >> 6));
          if ((v38 & (1 << v34)) == 0) {
            goto LABEL_47;
          }
          if (v34 >= 0x40)
          {
            int v39 = 0;
            uint64_t v40 = (int8x8_t *)v25;
            do
            {
              int8x8_t v41 = *v40++;
              uint8x8_t v42 = (uint8x8_t)vcnt_s8(v41);
              v42.i16[0] = vaddlv_u8(v42);
              v39 += v42.i32[0];
              --v37;
            }
            while (v37);
          }
          else
          {
            int v39 = 0;
          }
          uint8x8_t v43 = (uint8x8_t)vcnt_s8((int8x8_t)(v38 & ((1 << v34) - 1)));
          v43.i16[0] = vaddlv_u8(v43);
          *(void *)a2 = *(unsigned int *)(v25 + 4 * (v39 + v43.i32[0]) + 36);
          *(void *)(a2 + 8) = 0;
          *(_DWORD *)(a2 + 16) = 0;
          CFIndex result = traverseFromCompactMapCursor(v14, a2, a3, v35, v36, a6, a7, a8);
          if (a6)
          {
            if (*a6 || v34 >= 0xFF) {
              return result;
            }
          }
          else
          {
LABEL_47:
            if (v34 > 0xFE) {
              return result;
            }
          }
          ++v34;
        }
      }
      if (!*(_DWORD *)(v25 + 48)
        || (*(unsigned char *)(a3 + a5) = 0,
            CFIndex result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, void, unsigned char *, double))a8)(a7, a3, a5, *(unsigned int *)(v25 + 48), a6, *(double *)(v25 + 40)), !a6))
      {
        if (v10 >= a4) {
          return result;
        }
        goto LABEL_50;
      }
      if (v10 < a4 && !*a6)
      {
LABEL_50:
        uint64_t v44 = v10;
        unint64_t v45 = 0;
        uint64_t v46 = a4 - 1;
        uint64_t v47 = v10 + 1;
        while (1)
        {
          *(unsigned char *)(a3 + v44) = v45;
          if (v45 >> 6 <= 1) {
            uint64_t v48 = 1;
          }
          else {
            uint64_t v48 = v45 >> 6;
          }
          uint64_t v49 = *(void *)(v25 + 8 * (v45 >> 6));
          if ((v49 & (1 << v45)) == 0) {
            goto LABEL_63;
          }
          if (v45 >= 0x40)
          {
            int v50 = 0;
            long long v51 = (int8x8_t *)v25;
            do
            {
              int8x8_t v52 = *v51++;
              uint8x8_t v53 = (uint8x8_t)vcnt_s8(v52);
              v53.i16[0] = vaddlv_u8(v53);
              v50 += v53.i32[0];
              --v48;
            }
            while (v48);
          }
          else
          {
            int v50 = 0;
          }
          uint8x8_t v54 = (uint8x8_t)vcnt_s8((int8x8_t)(v49 & ((1 << v45) - 1)));
          v54.i16[0] = vaddlv_u8(v54);
          *(void *)a2 = *(unsigned int *)(v25 + 4 * (v50 + v54.i32[0]) + 52);
          *(void *)(a2 + 8) = 0;
          *(void *)(a2 + 16) = 0;
          *(_DWORD *)(a2 + 24) = 0;
          CFIndex result = traverseFromCompactMapCursor(v14, a2, a3, v46, v47, a6, a7, a8);
          if (a6)
          {
            if (*a6 || v45 >= 0xFF) {
              return result;
            }
          }
          else
          {
LABEL_63:
            if (v45 > 0xFE) {
              return result;
            }
          }
          ++v45;
        }
      }
      return result;
    default:
      if (v8 == *(_DWORD *)(*(void *)(result + 2088) + 4))
      {
LABEL_3:
        return traverseFromCompactMapCursorMappedLevel(result, a2, a3, a4, a5, a6, a7, (uint64_t (*)(uint64_t, uint64_t, void, void, unsigned char *, double))a8);
      }
      return result;
  }
}

uint64_t traverseFromCompactMapCursorMappedLevel(uint64_t result, uint64_t a2, uint64_t a3, unsigned int a4, unsigned int a5, unsigned char *a6, uint64_t a7, uint64_t (*a8)(uint64_t, uint64_t, void, void, unsigned char *, double))
{
  uint64_t v13 = result;
  unint64_t v14 = (*(void *)a2 & 0xFFFFFFFFFFFFFFFCLL) + *(void *)(result + 2088);
  if ((*(unsigned char *)(result + 2076) & 1) == 0)
  {
    if (*(_DWORD *)(v14 + 1024)
      && (*(unsigned char *)(a3 + a5) = 0, CFIndex result = a8(a7, a3, 0, *(unsigned int *)(v14 + 1024), a6, 0.0), a6))
    {
      if (a5 >= a4 || *a6) {
        return result;
      }
    }
    else if (a5 >= a4)
    {
      return result;
    }
    for (uint64_t i = 0; ; ++i)
    {
      *(unsigned char *)(a3 + a5) = i;
      *(void *)a2 = *(unsigned int *)(v14 + 4 * i);
      *(void *)(a2 + 8) = 0;
      *(_DWORD *)(a2 + 16) = 0;
      if (i) {
        uint64_t v16 = a5 + 1;
      }
      else {
        uint64_t v16 = a5;
      }
      CFIndex result = traverseFromCompactMapCursor(v13, a2, a3, a4 - (i != 0), v16, a6, a7, a8);
      if (a6)
      {
        if (*a6 || i >= 0xFF) {
          return result;
        }
      }
      else if (i > 0xFE)
      {
        return result;
      }
    }
  }
  if (!*(_DWORD *)(v14 + 1024)
    || (*(unsigned char *)(a3 + a5) = 0,
        CFIndex result = a8(a7, a3, 0, *(unsigned int *)(v14 + 1024), a6, *(double *)(v14 + 1036)),
        !a6))
  {
    if (a5 >= a4) {
      return result;
    }
LABEL_24:
    for (uint64_t j = 0; ; ++j)
    {
      *(unsigned char *)(a3 + a5) = j;
      *(void *)a2 = *(unsigned int *)(v14 + 4 * j);
      if (j) {
        uint64_t v18 = a5 + 1;
      }
      else {
        uint64_t v18 = a5;
      }
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = 0;
      *(_DWORD *)(a2 + 24) = 0;
      CFIndex result = traverseFromCompactMapCursor(v13, a2, a3, a4 - (j != 0), v18, a6, a7, a8);
      if (a6)
      {
        if (*a6 || j >= 0xFF) {
          return result;
        }
      }
      else if (j > 0xFE)
      {
        return result;
      }
    }
  }
  if (a5 < a4 && !*a6) {
    goto LABEL_24;
  }
  return result;
}

uint64_t SIGeneralTrieSetCursorWithBytes(uint64_t a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9, __n128 a10)
{
  if (!a1 || !a2) {
    return 0;
  }
  *(void *)(a2 + 36) = a1;
  unsigned int v10 = *(_DWORD **)(a1 + 2088);
  if (!v10)
  {
    *(_DWORD *)(a2 + 32) = 0;
    *(void *)(a2 + 8) = (a1 + 4) | 1;
    *(void *)(a2 + 16) = 0;
    return SIGeneralTrieCursorAdvanceWithBytes(a2, a3, a4, a9, a10, a4, a5, a6, a7, a8);
  }
  if (*v10 != -900339842 && (*v10 != 12648430 || v10[7] != 2)) {
    return 0;
  }
  *(_DWORD *)(a2 + 32) = 1;
  uint64_t v11 = v10[1];
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = v11;
  *(_DWORD *)(a2 + 24) = 0;
  return SIGeneralTrieCursorAdvanceWithBytes(a2, a3, a4, a9, a10, a4, a5, a6, a7, a8);
}

uint64_t SIGeneralTrieCursorAdvanceWithBytes(uint64_t result, unsigned __int8 *a2, uint64_t a3, __n128 a4, __n128 a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (result)
  {
    uint64_t v10 = result;
    int v11 = *(_DWORD *)(result + 32);
    if (v11)
    {
      if (v11 == 1)
      {
        uint64_t v12 = *(void *)result;
        uint64_t v13 = *(void *)(result + 8);
        int v14 = *(_DWORD *)(result + 16);
        uint64_t v15 = *(void *)(result + 20);
        CFIndex result = advanceCompactMapCursor(*(void *)(result + 36), result, a2, a3, a4.n128_f64[0], a5);
        if (!result)
        {
          *(void *)uint64_t v10 = v12;
          *(void *)(v10 + 8) = v13;
          *(_DWORD *)(v10 + 16) = v14;
          *(void *)(v10 + 20) = v15;
          return result;
        }
        return 1;
      }
      return 0;
    }
    else
    {
      uint64_t v17 = *(void *)result;
      uint64_t v16 = *(void *)(result + 8);
      uint64_t v18 = *(void *)(result + 16);
      uint64_t v19 = *(void *)(result + 24);
      CFIndex result = advanceMapCursor(*(void *)(result + 36), result, a2, a3, a7, a8, a9, a10, a4);
      if (result) {
        return 1;
      }
      *(void *)uint64_t v10 = v17;
      *(void *)(v10 + 8) = v16;
      *(void *)(v10 + 16) = v18;
      *(void *)(v10 + 24) = v19;
    }
  }
  return result;
}

BOOL advanceCompactMapCursor(uint64_t a1, uint64_t a2, unsigned __int8 *a3, unsigned int a4, double a5, __n128 a6)
{
  uint64_t v6 = *(void *)a2;
  size_t v7 = a4;
  switch(*(void *)a2 & 3)
  {
    case 1:
      goto LABEL_3;
    case 2:
      int v13 = *(_DWORD *)(a1 + 2076);
      int v14 = (int *)((v6 & 0xFFFFFFFFFFFFFFFCLL) + *(void *)(a1 + 2088));
      int v15 = *v14;
      if ((v13 & 1) == 0)
      {
        unsigned int v16 = v15 - 4;
        if (v15 == 4) {
          goto LABEL_21;
        }
        uint64_t v17 = *(unsigned int *)(a2 + 8);
        if ((v13 & 4) != 0)
        {
          if (a4)
          {
            if (v17 < v16)
            {
              unsigned int v45 = 0;
              while (1)
              {
                uint64_t v46 = (char *)v14 + v17;
                uint64_t v47 = v46 + 4;
                uint64_t v48 = v46[10];
                LODWORD(v49) = v48;
                if (v48 < a4)
                {
                  if (v48 <= *((unsigned __int16 *)v47 + 2)) {
                    uint64_t v49 = *((unsigned __int16 *)v47 + 2);
                  }
                  else {
                    uint64_t v49 = v48;
                  }
                  uint64_t v50 = v48;
                  while (v49 != v50)
                  {
                    if (v47[(v50 + *(_DWORD *)(a2 + 12)) + 7] != a3[v45 + v50])
                    {
                      LODWORD(v49) = v50;
                      break;
                    }
                    if (a4 == ++v50)
                    {
                      LODWORD(v49) = a4;
                      break;
                    }
                  }
                }
                v45 += v49;
                int v51 = *((unsigned __int16 *)v47 + 2);
                if (v45 == a4) {
                  break;
                }
                int v22 = 0;
                LODWORD(v17) = v17 + v51 + 7;
                *(_DWORD *)(a2 + 8) = v17;
                if (v17 >= v16) {
                  goto LABEL_89;
                }
              }
              unsigned int v63 = *(_DWORD *)(a2 + 12) + a4;
              *(_DWORD *)(a2 + 16) = 0;
              if (v51 + v48 == v63) {
                *(_DWORD *)(a2 + 16) = *(_DWORD *)v47;
              }
              goto LABEL_87;
            }
LABEL_21:
            int v22 = 0;
            goto LABEL_89;
          }
          uint64_t v62 = (char *)v14 + v17;
          if (*(unsigned __int16 *)((char *)v14 + v17 + 8) + *((unsigned __int8 *)v14 + v17 + 10))
          {
LABEL_78:
            *(_DWORD *)(a2 + 16) = 0;
            goto LABEL_88;
          }
        }
        else
        {
          if (a4)
          {
            if (v17 < v16)
            {
              uint64_t v18 = *(unsigned int *)(a2 + 12);
              while (1)
              {
                uint64_t v19 = (char *)v14 + v17;
                unsigned int v20 = *((unsigned __int16 *)v19 + 4);
                if (v20 >= v18)
                {
                  uint64_t v21 = v19 + 4;
                  if (!memcmp(&v19[v18 + 10], a3, v7)) {
                    break;
                  }
                }
                int v22 = 0;
                LODWORD(v17) = v17 + v20 + 6;
                *(_DWORD *)(a2 + 8) = v17;
                if (v17 >= v16) {
                  goto LABEL_89;
                }
              }
              *(_DWORD *)(a2 + 16) = 0;
              if (v20 - v18 == a4) {
                *(_DWORD *)(a2 + 16) = *v21;
              }
              unsigned int v63 = v18 + a4;
LABEL_87:
              *(_DWORD *)(a2 + 12) = v63;
              goto LABEL_88;
            }
            goto LABEL_21;
          }
          uint64_t v62 = (char *)v14 + v17;
          if (*(_WORD *)((char *)v14 + v17 + 8)) {
            goto LABEL_78;
          }
        }
        *(_DWORD *)(a2 + 16) = 0;
        *(_DWORD *)(a2 + 16) = *((_DWORD *)v62 + 1);
        goto LABEL_88;
      }
      if (v15 == 4) {
        goto LABEL_21;
      }
      unsigned int v35 = *(_DWORD *)(a2 + 8);
      a6.n128_u64[0] = *(void *)(a2 + 12);
      double v36 = *(double *)(a2 + 20);
      unsigned int v37 = v15 - 12;
      if (v15 == 12)
      {
        int v22 = 0;
LABEL_76:
        *(_DWORD *)(a2 + 8) = v35;
        *(void *)(a2 + 12) = a6.n128_u64[0];
        *(double *)(a2 + 20) = v36;
        goto LABEL_89;
      }
      unsigned int v38 = 0;
      int v22 = 0;
      uint64_t v39 = a6.n128_u32[0];
      unsigned __int32 v40 = a6.n128_u32[0] + a4;
      while (2)
      {
        while (1)
        {
          int8x8_t v41 = (char *)v14 + v38;
          unsigned __int32 v42 = *((unsigned __int16 *)v41 + 12);
          if (v40 <= v42) {
            break;
          }
          v38 += v42 + 14;
          if (v38 >= v37) {
            goto LABEL_76;
          }
        }
        __n128 v67 = a6;
        unsigned int v65 = v35;
        uint64_t v66 = v39;
        uint64_t v64 = v41 + 12;
        if (memcmp(&v41[v39 + 26], a3, v7))
        {
          unsigned int v35 = v65;
          a6 = v67;
          goto LABEL_39;
        }
        a6 = v67;
        if (v40 != v42)
        {
          HIDWORD(v43) = 0;
          BOOL v44 = v22 == 0;
          unsigned int v35 = v65;
          if (!v22)
          {
            unsigned int v35 = v38;
            double v36 = 0.0;
          }
          int v22 = 1;
          if (v44)
          {
            LODWORD(v43) = v67.n128_u32[0] + a4;
            a6.n128_f64[0] = v43;
          }
LABEL_39:
          v38 += v42 + 14;
          uint64_t v39 = v66;
          if (v38 >= v37) {
            goto LABEL_76;
          }
          continue;
        }
        break;
      }
      *(_DWORD *)(a2 + 16) = 0;
      *(_DWORD *)(a2 + 16) = *((_DWORD *)v64 + 2);
      *(void *)(a2 + 20) = *(void *)v64;
      *(_DWORD *)(a2 + 8) = v38;
      *(_DWORD *)(a2 + 12) = v40;
LABEL_88:
      int v22 = 1;
LABEL_89:
      BOOL v61 = v22 == 0;
      return !v61;
    case 3:
      unint64_t v23 = (v6 & 0xFFFFFFFFFFFFFFFCLL) + *(void *)(a1 + 2088);
      if (*(unsigned char *)(a1 + 2076))
      {
        if (a4)
        {
          unsigned int v30 = *a3;
          LODWORD(v31) = v30 >> 6;
          uint64_t v32 = *(void *)(v23 + 8 * (v30 >> 6));
          uint64_t v33 = 1 << v30;
          if (((1 << v30) & v32) != 0)
          {
            if (v30 >= 0x40)
            {
              int v34 = 0;
              if (v31 <= 1) {
                uint64_t v31 = 1;
              }
              else {
                uint64_t v31 = v31;
              }
              uint64_t v57 = (int8x8_t *)v23;
              do
              {
                int8x8_t v58 = *v57++;
                uint8x8_t v59 = (uint8x8_t)vcnt_s8(v58);
                v59.i16[0] = vaddlv_u8(v59);
                v34 += v59.i32[0];
                --v31;
              }
              while (v31);
            }
            else
            {
              int v34 = 0;
            }
            uint8x8_t v60 = (uint8x8_t)vcnt_s8((int8x8_t)((v33 - 1) & v32));
            v60.i16[0] = vaddlv_u8(v60);
            uint64_t v56 = *(unsigned int *)(v23 + 4 * (v34 + v60.i32[0]) + 52);
            goto LABEL_73;
          }
LABEL_41:
          int v12 = 0;
          goto LABEL_74;
        }
        *(_DWORD *)(a2 + 16) = *(_DWORD *)(v23 + 48);
        *(void *)(a2 + 20) = *(void *)(v23 + 40);
      }
      else
      {
        if (a4)
        {
          unsigned int v24 = *a3;
          LODWORD(v25) = v24 >> 6;
          uint64_t v26 = *(void *)(v23 + 8 * (v24 >> 6));
          uint64_t v27 = 1 << v24;
          if (((1 << v24) & v26) != 0)
          {
            if (v24 >= 0x40)
            {
              int v28 = 0;
              if (v25 <= 1) {
                uint64_t v25 = 1;
              }
              else {
                uint64_t v25 = v25;
              }
              int8x8_t v52 = (int8x8_t *)v23;
              do
              {
                int8x8_t v53 = *v52++;
                uint8x8_t v54 = (uint8x8_t)vcnt_s8(v53);
                v54.i16[0] = vaddlv_u8(v54);
                v28 += v54.i32[0];
                --v25;
              }
              while (v25);
            }
            else
            {
              int v28 = 0;
            }
            uint8x8_t v55 = (uint8x8_t)vcnt_s8((int8x8_t)((v27 - 1) & v26));
            v55.i16[0] = vaddlv_u8(v55);
            uint64_t v56 = *(unsigned int *)(v23 + 4 * (v28 + v55.i32[0]) + 36);
LABEL_73:
            updateCompactMapCursorPointer(a1, a2, v56);
            int v12 = advanceCompactMapCursor(a1, a2, a3 + 1, a4 - 1);
            goto LABEL_74;
          }
          goto LABEL_41;
        }
        *(_DWORD *)(a2 + 16) = *(_DWORD *)(v23 + 32);
      }
      int v12 = 1;
LABEL_74:
      BOOL v61 = v12 == 0;
      return !v61;
    default:
      if (v6 == *(_DWORD *)(*(void *)(a1 + 2088) + 4))
      {
LABEL_3:
        int v12 = advanceCompactMapCursorMappedLevel(a1, a2, a3, a4);
        goto LABEL_74;
      }
      return 0;
  }
}

uint64_t advanceMapCursor(uint64_t a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  int v9 = a4;
  uint64_t v13 = *(void *)(a2 + 8);
  if ((v13 & 3) == 2)
  {
    int v16 = advanceMapCursorTrieList(a1, a2, a3, a4, a5, a6, a7, a8, a9);
    return v16 != 0;
  }
  if ((v13 & 3) != 1) {
    return 0;
  }
  unint64_t v14 = v13 & 0xFFFFFFFFFFFFFFFCLL;
  if (*(unsigned char *)(a1 + 2076))
  {
    if (a4)
    {
      int v15 = (uint64_t *)(v14 + 8 * *a3 + 20);
      goto LABEL_10;
    }
    *(_DWORD *)(a2 + 20) = *(_DWORD *)(v14 + 16);
    *(void *)(a2 + 24) = *(void *)(v14 + 8);
  }
  else
  {
    if (a4)
    {
      int v15 = (uint64_t *)(v14 + 8 * *a3 + 4);
LABEL_10:
      updateMapCursorPointer(a1, a2, *v15);
      int v16 = advanceMapCursor(a1, a2, a3 + 1, (v9 - 1));
      return v16 != 0;
    }
    *(_DWORD *)(a2 + 20) = *(_DWORD *)v14;
  }
  return 1;
}

void *sharedBuffer(void)
{
  if (sharedBuffer(void)::once != -1) {
    dispatch_once(&sharedBuffer(void)::once, &__block_literal_global_8);
  }
  CFAllocatorRef v0 = pthread_getspecific(sharedBuffer(void)::key);
  if (!v0)
  {
    CFAllocatorRef v0 = malloc_type_malloc(0x1000uLL, 0xA2F502AAuLL);
    pthread_setspecific(sharedBuffer(void)::key, v0);
  }
  return v0;
}

uint64_t traverseFromMapCursor(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned char *a6, uint64_t a7, uint64_t (*a8)(uint64_t, uint64_t, uint64_t, void, unsigned char *, double))
{
  unsigned int v11 = a4;
  int v14 = *(_DWORD *)(result + 2076);
  uint64_t v15 = *(void *)(a2 + 8);
  if ((v15 & 3) != 2)
  {
    if ((v15 & 3) != 1) {
      return result;
    }
    uint64_t v16 = result;
    uint64_t v17 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFFCLL);
    if ((v14 & 1) == 0)
    {
      if (*v17 && (*(unsigned char *)(a3 + a4) = 0, CFIndex result = a8(a7, a3, a4, *v17, a6, *(double *)(a2 + 24)), a6))
      {
        if (!a5 || *a6) {
          return result;
        }
      }
      else if (!a5)
      {
        return result;
      }
      unsigned __int32 v42 = v17;
      uint64_t v43 = v11;
      uint64_t v44 = 0;
      uint64_t v45 = v11 + 1;
      uint64_t v46 = a5 - 1;
      uint64_t v47 = v42 + 1;
      while (1)
      {
        *(unsigned char *)(a3 + v43) = v44;
        updateMapCursorPointer(v16, a2, *(void *)&v47[2 * v44]);
        CFIndex result = traverseFromMapCursor(v16, a2, a3, v45, v46, a6, a7, a8);
        if (a6)
        {
          if (*a6 || v44 >= 0xFF) {
            return result;
          }
        }
        else if (v44 > 0xFE)
        {
          return result;
        }
        ++v44;
      }
    }
    if (v17[4]
      && (*(unsigned char *)(a3 + a4) = 0, CFIndex result = a8(a7, a3, a4, v17[4], a6, *(double *)(a2 + 24)), a6))
    {
      if (!a5 || *a6) {
        return result;
      }
    }
    else if (!a5)
    {
      return result;
    }
    uint64_t v48 = v17;
    uint64_t v49 = v11;
    uint64_t v50 = 0;
    uint64_t v51 = v11 + 1;
    uint64_t v52 = a5 - 1;
    int8x8_t v53 = v48 + 5;
    while (1)
    {
      *(unsigned char *)(a3 + v49) = v50;
      updateMapCursorPointer(v16, a2, *(void *)&v53[2 * v50]);
      CFIndex result = traverseFromMapCursor(v16, a2, a3, v51, v52, a6, a7, a8);
      if (a6)
      {
        if (*a6 || v50 >= 0xFF) {
          return result;
        }
      }
      else if (v50 > 0xFE)
      {
        return result;
      }
      ++v50;
    }
  }
  if (v14)
  {
    unint64_t v30 = *(void *)a2 & 0xFFFFFFFFFFFFFFFCLL;
    if (!v30) {
      return result;
    }
    uint64_t v31 = (unsigned __int8 *)(v30 + 30);
    uint64_t v32 = *(unsigned int *)(a2 + 16);
    while (1)
    {
      uint64_t v33 = *(unsigned __int16 *)(v30 + 28);
      if (v33 >= v32)
      {
        int64_t v34 = v33 - (int)v32;
        if (a5 < 0 || v34 <= a5)
        {
          if (v32)
          {
            unsigned int v35 = (unsigned __int8 *)(v30 + 30);
            double v36 = v31;
            uint64_t v37 = v32;
            while (1)
            {
              int v39 = *v35++;
              int v38 = v39;
              int v40 = *v36++;
              if (v38 != v40) {
                break;
              }
              if (!--v37) {
                goto LABEL_40;
              }
            }
          }
          else
          {
LABEL_40:
            uint64_t v41 = v34 + v11;
            memcpy((void *)(a3 + v11), (const void *)(v30 + v32 + 30), v34);
            *(unsigned char *)(a3 + v41) = 0;
            CFIndex result = a8(a7, a3, v41, *(unsigned int *)(v30 + 24), a6, *(double *)(v30 + 16));
            if (a6 && *a6) {
              return result;
            }
          }
        }
      }
      unint64_t v30 = *(void *)v30;
      if (!v30) {
        return result;
      }
    }
  }
  unint64_t v18 = v15 & 0xFFFFFFFFFFFFFFFCLL;
  uint64_t v19 = *(unsigned int *)(a2 + 16);
  if (v19 > *(unsigned __int16 *)((v15 & 0xFFFFFFFFFFFFFFFCLL) + 12)) {
    traverseFromMapCursor(result, a2, a3, a4, a5, (uint64_t)a6, a7, (uint64_t)a8);
  }
  if (!v18) {
    return result;
  }
  unint64_t v20 = v15 & 0xFFFFFFFFFFFFFFFCLL;
  __dst = (void *)(a3 + a4);
  while (v20 == v18)
  {
    unsigned int v21 = *(unsigned __int16 *)(v18 + 12);
LABEL_21:
    int v28 = v21 - v19;
    if (a5 < 0 || v28 <= a5)
    {
      uint64_t v29 = v28 + v11;
      memcpy(__dst, (const void *)(v20 + v19 + 14), v28);
      *(unsigned char *)(a3 + v29) = 0;
      CFIndex result = a8(a7, a3, v29, *(unsigned int *)(v20 + 8), a6, 0.0);
    }
    unint64_t v20 = *(void *)v20;
    if (!v20) {
      return result;
    }
  }
  unsigned int v21 = *(unsigned __int16 *)(v20 + 12);
  if (v21 <= (unsigned __int16)v19) {
    return result;
  }
  if (!v19) {
    goto LABEL_21;
  }
  int v22 = (unsigned __int8 *)(v20 + 14);
  unint64_t v23 = (unsigned __int8 *)(v18 + 14);
  uint64_t v24 = v19;
  while (1)
  {
    int v26 = *v22++;
    int v25 = v26;
    int v27 = *v23++;
    if (v25 != v27) {
      return result;
    }
    if (!--v24) {
      goto LABEL_21;
    }
  }
}

void *SIGeneralTrieCursorCreateCopy(void *result)
{
  if (result)
  {
    CFStringRef v1 = result;
    CFIndex result = malloc_type_calloc(0x2CuLL, 1uLL, 0x293AC042uLL);
    int v2 = *((_DWORD *)v1 + 8);
    if (v2)
    {
      if (v2 == 1)
      {
        *CFIndex result = *v1;
        result[1] = v1[1];
        *((_DWORD *)result + 4) = *((_DWORD *)v1 + 4);
        *(void *)((char *)result + 20) = *(void *)((char *)v1 + 20);
      }
    }
    else
    {
      *(_OWORD *)CFIndex result = *(_OWORD *)v1;
      uint64_t v3 = v1[3];
      result[2] = v1[2];
      result[3] = v3;
    }
    *((_DWORD *)result + 8) = v2;
    *(void *)((char *)result + 36) = *(void *)((char *)v1 + 36);
  }
  return result;
}

BOOL SIGeneralTrieCursorIsEqual(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 36) != *(void *)(a2 + 36)) {
    return 0;
  }
  int v2 = *(_DWORD *)(a1 + 32);
  if (v2 != *(_DWORD *)(a2 + 32)) {
    return 0;
  }
  if (v2)
  {
    if (v2 == 1 && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8) && *(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12)) {
      return *(void *)a1 == *(void *)a2;
    }
    return 0;
  }
  if (*(void *)(a1 + 8) != *(void *)(a2 + 8)) {
    return 0;
  }
  return *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
}

uint64_t SIGeneralTrieCursorGetPayload(_DWORD *a1, _DWORD *a2)
{
  int v2 = a1[8];
  if (v2)
  {
    if (v2 != 1) {
      return 0;
    }
    int v3 = a1[4];
    if (!v3) {
      return 0;
    }
  }
  else
  {
    int v3 = a1[5];
    if (!v3) {
      return 0;
    }
  }
  if (a2) {
    *a2 = v3;
  }
  return 1;
}

CFBinaryHeapRef SITrieCursorQueueCreate()
{
  v1.versiouint64_t n = 0;
  v1.copyDescriptiouint64_t n = 0;
  v1.retaiuint64_t n = (const void *(__cdecl *)(CFAllocatorRef, const void *))TrieCursorRetain;
  v1.release = (void (__cdecl *)(CFAllocatorRef, const void *))TrieCursorRelease;
  v1.compare = (CFComparisonResult (__cdecl *)(const void *, const void *, void *))TrieCursorCompare;
  return CFBinaryHeapCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, &v1, 0);
}

_DWORD *TrieCursorRetain(const __CFAllocator *a1, _DWORD *a2)
{
  CFIndex result = a2;
  if (a2) {
    ++a2[6];
  }
  return result;
}

void TrieCursorRelease(const __CFAllocator *a1, _DWORD *a2)
{
  if (a2)
  {
    int v2 = a2[6] - 1;
    a2[6] = v2;
    if (!v2) {
      free(a2);
    }
  }
}

uint64_t TrieCursorCompare(double *a1, double *a2, void *a3)
{
  double v3 = a1[2];
  double v4 = a2[2];
  if (v3 == v4)
  {
    size_t v5 = *((unsigned int *)a1 + 7);
    int v6 = *((_DWORD *)a2 + 7);
    if (v5 == v6) {
      int v7 = memcmp(a1 + 4, a2 + 4, v5);
    }
    else {
      int v7 = v5 - v6;
    }
    uint64_t v9 = -1;
    if (v7 <= 0) {
      uint64_t v9 = 1;
    }
    if (v7) {
      return v9;
    }
    else {
      return 0;
    }
  }
  else if (v3 <= v4)
  {
    return 1;
  }
  else
  {
    return -1;
  }
}

CFBinaryHeapRef SITrieCompletionQueueCreate()
{
  v1.versiouint64_t n = 0;
  v1.copyDescriptiouint64_t n = 0;
  v1.retaiuint64_t n = (const void *(__cdecl *)(CFAllocatorRef, const void *))trieCompletionRetain;
  v1.release = (void (__cdecl *)(CFAllocatorRef, const void *))trieCompletionRelease;
  v1.compare = (CFComparisonResult (__cdecl *)(const void *, const void *, void *))trieCompletionCompareScore;
  return CFBinaryHeapCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, &v1, 0);
}

uint64_t trieCompletionCompareScore(char *a1, char *a2, void *a3)
{
  double v3 = *(double *)(a1 + 4);
  double v4 = *(double *)(a2 + 4);
  if (v3 != v4)
  {
    if (v3 <= v4) {
      return 1;
    }
    else {
      return -1;
    }
  }
  size_t v5 = *((unsigned int *)a1 + 6);
  int v6 = *((_DWORD *)a2 + 6);
  if (v5 != v6)
  {
    int v7 = v5 - v6;
LABEL_13:
    if (v7 > 0) {
      return -1;
    }
    else {
      return 1;
    }
  }
  int v7 = *((_DWORD *)a1 + 5) - *((_DWORD *)a2 + 5);
  if (v7) {
    goto LABEL_13;
  }
  int v8 = memcmp(a1 + 28, a2 + 28, v5);
  uint64_t v9 = -1;
  if (v8 <= 0) {
    uint64_t v9 = 1;
  }
  if (v8) {
    return v9;
  }
  else {
    return 0;
  }
}

void SIGeneralTrieRankedSearchWithSelection(uint64_t a1, void *a2, unsigned __int8 *a3, unsigned int a4, uint64_t a5, __CFBinaryHeap *a6, __CFBinaryHeap *a7)
{
  if ((*(_DWORD *)(a1 + 2076) & 9) == 1)
  {
    callBacks.versiouint64_t n = 0;
    callBacks.copyDescriptiouint64_t n = 0;
    callBacks.retaiuint64_t n = (const void *(__cdecl *)(CFAllocatorRef, const void *))trieCompletionRetain;
    callBacks.release = (void (__cdecl *)(CFAllocatorRef, const void *))trieCompletionRelease;
    callBacks.compare = (CFComparisonResult (__cdecl *)(const void *, const void *, void *))trieCompletionInternalCompareScore;
    int v14 = CFBinaryHeapCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, &callBacks, 0);
    if (v14)
    {
      uint64_t v15 = v14;
      uint64_t v16 = *(_DWORD **)(a1 + 2088);
      if (v16)
      {
        if (*v16 != -900339842 && v16[7] != 2) {
          return;
        }
        rankSearchDiskLevel(a1, (uint64_t)v16 + (v16[1] & 0xFFFFFFFC), a3, a4, 0, a6, v14, a5, a2);
      }
      else
      {
        rankSearchLevel(a1, a1 + 4, a3, a4, 0, a6, v14, a5, a2);
      }
      while (CFBinaryHeapGetCount(v15))
      {
        Minimuuint64_t m = CFBinaryHeapGetMinimum(v15);
        CFBinaryHeapAddValue(a7, Minimum);
        CFBinaryHeapRemoveMinimumValue(v15);
      }
      CFRelease(v15);
    }
  }
}

uint64_t trieCompletionInternalCompareScore(char *a1, char *a2, void *a3)
{
  double v3 = *(double *)(a1 + 4);
  double v4 = *(double *)(a2 + 4);
  if (v3 != v4)
  {
    if (v3 >= v4) {
      return 1;
    }
    else {
      return -1;
    }
  }
  size_t v5 = *((unsigned int *)a1 + 6);
  int v6 = *((_DWORD *)a2 + 6);
  if (v5 != v6)
  {
    int v7 = v5 - v6;
LABEL_13:
    if (v7 < 0) {
      return -1;
    }
    else {
      return 1;
    }
  }
  int v7 = *((_DWORD *)a1 + 5) - *((_DWORD *)a2 + 5);
  if (v7) {
    goto LABEL_13;
  }
  int v8 = memcmp(a1 + 28, a2 + 28, v5);
  uint64_t v9 = -1;
  if (v8 >= 0) {
    uint64_t v9 = 1;
  }
  if (v8) {
    return v9;
  }
  else {
    return 0;
  }
}

uint64_t rankSearchDiskLevel(uint64_t a1, uint64_t a2, unsigned __int8 *a3, unsigned int a4, unsigned int a5, __CFBinaryHeap *a6, __CFBinaryHeap *a7, uint64_t a8, void *a9)
{
  if (a5 >= a4)
  {
LABEL_5:
    unint64_t v18 = sharedBuffer();
    if ((int)(a4 + 1) <= 1023)
    {
      uint64_t v19 = v18;
      memcpy(v18, a3, a4);
      uint64_t v20 = 0;
      v19[a4 + 1] = 0;
      do
      {
        uint64_t v21 = *(unsigned int *)(a2 + 4 * v20);
        v19[a4] = v20;
        rankSearchGetCursor(a1, v21, v19, a4 + 1, a6);
        ++v20;
      }
      while (v20 != 256);
    }
    int v22 = *(_DWORD *)(a2 + 1024);
    if (v22)
    {
      unint64_t v23 = SITrieCompletionCreate(a3, a4, v22, *(double *)(a2 + 1036));
      BOOL updated = updateCompletions(v23, a9, a6, a7, a8);
      BOOL v25 = updated;
      if (v23) {
        trieCompletionRelease((const __CFAllocator *)updated, (atomic_uint *)v23);
      }
      if (!v25) {
        return 0;
      }
    }
    rankSearchCursors(a1, a6);
    return 1;
  }
  uint64_t v14 = a5;
  while (1)
  {
    int v15 = *(_DWORD *)(a2 + 4 * a3[v14]);
    uint64_t v16 = v15 & 3;
    if (v16 != 1) {
      break;
    }
    a2 = (v15 & 0xFFFFFFFC) + *(void *)(a1 + 2088);
    if (a4 == ++v14) {
      goto LABEL_5;
    }
  }
  if (v16 != 2)
  {
    if (v16 == 3)
    {
      uint64_t v26 = (v15 & 0xFFFFFFFC) + *(void *)(a1 + 2088);
      return rankSearchCompactDiskLevel(a1, v26, a3, a4, (int)v14 + 1, a6, a7, a8, a9);
    }
    return 1;
  }
  int v28 = (unsigned int *)((v15 & 0xFFFFFFFC) + *(void *)(a1 + 2088));

  return rankSearchDiskPage(a1, v28, (char *)a3, a4, (int)v14 + 1, a6, a7, a8, a9);
}

uint64_t rankSearchLevel(uint64_t a1, unint64_t a2, unsigned __int8 *a3, unsigned int a4, unsigned int a5, __CFBinaryHeap *a6, __CFBinaryHeap *a7, unsigned int a8, void *a9)
{
  if (a5 >= a4)
  {
LABEL_5:
    uint64_t v16 = sharedBuffer();
    memcpy(v16, a3, a4);
    uint64_t v17 = 0;
    *((unsigned char *)v16 + (int)(a4 + 1)) = 0;
    do
    {
      uint64_t v18 = *(void *)(a2 + 20 + 8 * v17);
      *((unsigned char *)v16 + a4) = v17;
      rankSearchGetCursor(a1, v18, v16, a4 + 1, a6);
      ++v17;
    }
    while (v17 != 256);
    int v19 = *(_DWORD *)(a2 + 16);
    if (!v19) {
      goto LABEL_11;
    }
    uint64_t v20 = SITrieCompletionCreate(a3, a4, v19, *(double *)(a2 + 8));
    BOOL updated = updateCompletions(v20, a9, a6, a7, a8);
    BOOL v22 = updated;
    if (v20) {
      trieCompletionRelease((const __CFAllocator *)updated, (atomic_uint *)v20);
    }
    if (!v22)
    {
      return 0;
    }
    else
    {
LABEL_11:
      return rankSearchCursors(a1, a6);
    }
  }
  else
  {
    uint64_t v14 = a5;
    while (1)
    {
      uint64_t v15 = *(void *)(a2 + 8 * a3[v14] + 20);
      if ((v15 & 3) != 1) {
        break;
      }
      a2 = v15 & 0xFFFFFFFFFFFFFFFCLL;
      if (a4 == ++v14) {
        goto LABEL_5;
      }
    }
    if ((v15 & 3) == 2)
    {
      return rankSearchList((uint64_t *)(v15 & 0xFFFFFFFFFFFFFFFCLL), (char *)a3, a4, (int)v14 + 1, a6, a7, a8, a9);
    }
    else
    {
      return 1;
    }
  }
}

void SIGeneralTrieRankedSearch(uint64_t a1, unsigned __int8 *a2, unsigned int a3, uint64_t a4, __CFBinaryHeap *a5, __CFBinaryHeap *a6)
{
}

void SIGeneralTrieContinueRankedSearch(uint64_t a1, uint64_t a2, __CFBinaryHeap *a3, __CFBinaryHeap *a4)
{
  if ((*(_DWORD *)(a1 + 2076) & 9) == 1)
  {
    v11.versiouint64_t n = 0;
    v11.copyDescriptiouint64_t n = 0;
    v11.retaiuint64_t n = (const void *(__cdecl *)(CFAllocatorRef, const void *))trieCompletionRetain;
    v11.release = (void (__cdecl *)(CFAllocatorRef, const void *))trieCompletionRelease;
    v11.compare = (CFComparisonResult (__cdecl *)(const void *, const void *, void *))trieCompletionInternalCompareScore;
    CFBinaryHeapRef v8 = CFBinaryHeapCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, &v11, 0);
    if (v8)
    {
      uint64_t v9 = v8;
      while (CFBinaryHeapGetCount(a3))
      {
        if (CFBinaryHeapGetCount(a4) >= (int)a2) {
          break;
        }
        rankSearchCursors(a1, a3, v9, a2, 0);
        while (CFBinaryHeapGetCount(v9))
        {
          Minimuuint64_t m = CFBinaryHeapGetMinimum(v9);
          CFBinaryHeapAddValue(a4, Minimum);
          CFBinaryHeapRemoveMinimumValue(v9);
        }
      }
      CFRelease(v9);
    }
  }
}

BOOL rankSearchCursors(uint64_t a1, CFBinaryHeapRef heap, __CFBinaryHeap *a3, uint64_t a4, void *a5)
{
  while (1)
  {
    CFIndex Count = CFBinaryHeapGetCount(heap);
    if (!Count) {
      return Count == 0;
    }
    Minimuuint64_t m = (char *)CFBinaryHeapGetMinimum(heap);
    int v12 = Minimum;
    if (Minimum) {
      ++*((_DWORD *)Minimum + 6);
    }
    CFBinaryHeapRemoveMinimumValue(heap);
    unint64_t v13 = *((void *)v12 + 1);
    uint64_t v14 = v13 & 3;
    if ((v13 & 3) == 0)
    {
      int v19 = SITrieCompletionCreate((const unsigned __int8 *)v12 + 32, *((_DWORD *)v12 + 7), v13 >> 2, *((double *)v12 + 2));
      BOOL updated = updateCompletions(v19, a5, heap, a3, a4);
      char v21 = updated;
      if (v19) {
        trieCompletionRelease((const __CFAllocator *)updated, (atomic_uint *)v19);
      }
      goto LABEL_18;
    }
    uint64_t v15 = *(void *)(a1 + 2088);
    if (v15)
    {
      uint64_t v16 = (unsigned int *)((v13 & 0xFFFFFFFFFFFFFFFCLL) + v15);
      uint64_t v17 = (unsigned __int8 *)(v12 + 32);
      if (v14 == 3)
      {
        char v18 = rankSearchCompactDiskLevel(a1, (uint64_t)v16, v17, *((_DWORD *)v12 + 7), *((_DWORD *)v12 + 7), heap, a3, a4, a5);
      }
      else if (v14 == 1)
      {
        char v18 = rankSearchDiskLevel(a1, (uint64_t)v16, v17, *((_DWORD *)v12 + 7), *((_DWORD *)v12 + 7), heap, a3, a4, a5);
      }
      else
      {
        char v18 = rankSearchDiskPage(a1, v16, (char *)v17, *((_DWORD *)v12 + 7), *((_DWORD *)v12 + 7), heap, a3, a4, a5);
      }
    }
    else if (v14 == 2)
    {
      char v18 = rankSearchList((uint64_t *)(v13 & 0xFFFFFFFFFFFFFFFCLL), v12 + 32, *((_DWORD *)v12 + 7), *((_DWORD *)v12 + 7), heap, a3, a4, a5);
    }
    else
    {
      if (v14 != 1)
      {
        char v21 = 1;
        goto LABEL_18;
      }
      char v18 = rankSearchLevel(a1, v13 & 0xFFFFFFFFFFFFFFFCLL, (unsigned __int8 *)v12 + 32, *((_DWORD *)v12 + 7), *((_DWORD *)v12 + 7), heap, a3, a4, a5);
    }
    char v21 = v18;
LABEL_18:
    int v22 = *((_DWORD *)v12 + 6) - 1;
    *((_DWORD *)v12 + 6) = v22;
    if (v22)
    {
      if ((v21 & 1) == 0) {
        return Count == 0;
      }
    }
    else
    {
      free(v12);
      if ((v21 & 1) == 0) {
        return Count == 0;
      }
    }
  }
}

uint64_t SIGeneralTrieWriteToFileDescriptor(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  if ((*(unsigned char *)(a1 + 2076) & 8) != 0) {
    return 0;
  }
  uint64_t result = 0;
  if ((a2 & 0x80000000) != 0 || *(void *)(a1 + 2088)) {
    return result;
  }
  uint64_t v7 = sysconf(29);
  *(void *)&__buf[1] = 12648430;
  off_t v8 = (v7 + lseek(a2, 0, 2) - 1) & -v7;
  __buf[3] = 0;
  uint64_t v12 = *(void *)(a1 + 2072);
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v14 = 0;
  int v17 = 0;
  int v13 = *(_DWORD *)(a1 + 2096);
  HIDWORD(v14) = 2;
  lseek(a2, v8, 0);
  write(a2, &__buf[1], 0x34uLL);
  if (*(unsigned char *)(a1 + 2076)) {
    serializeListsRanked(a1, a1 + 4, v8, a2);
  }
  else {
    serializeLists(a1, a1 + 4, v8, a2);
  }
  __buf[0] = lseek(a2, 0, 1) - v8;
  pwrite(a2, __buf, 4uLL, v8 + 4);
  if (*(unsigned char *)(a1 + 2076)) {
    serializeLevelsRanked((_DWORD *)(a1 + 4), v8, a2, 0, 1, __buf);
  }
  else {
    serializeLevels((_DWORD *)(a1 + 4), v8, a2, 0, 1, __buf);
  }
  pwrite(a2, __buf, 4uLL, v8 + 8);
  lseek(a2, __buf[0], 0);
  *(_DWORD *)(a1 + 2072) = 0;
  size_t v9 = (*(unsigned char *)(a1 + 2076) & 1) != 0 ? 2068 : 2052;
  bzero((void *)(a1 + 4), v9);
  uint64_t v10 = mmap(0, __buf[0], 1, 1, a2, v8);
  if (v10 == (void *)-1) {
    return 0;
  }
  *(void *)(a1 + 2088) = v10;
  if (a3) {
    *a3 = v8;
  }
  return 1;
}

uint64_t SIGeneralTrieWriteToFileURL(uint64_t a1, const __CFURL *a2)
{
  uint64_t v2 = 0;
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (a1 && a2)
  {
    if ((*(unsigned char *)(a1 + 2076) & 8) == 0)
    {
      bzero(buffer, 0x400uLL);
      usedBufLeuint64_t n = 0;
      CFStringRef v5 = CFURLCopyPath(a2);
      if (v5)
      {
        CFStringRef v6 = v5;
        v14.length = CFStringGetLength(v5);
        v14.locatiouint64_t n = 0;
        CFStringGetBytes(v6, v14, 0x8000100u, 0x2Du, 0, buffer, 1024, &usedBufLen);
        buffer[usedBufLen] = 0;
        uint64_t v7 = open((const char *)buffer, 1538, 384);
        int v8 = v7;
        if ((v7 & 0x80000000) == 0)
        {
          int v10 = -1;
          uint64_t v2 = SIGeneralTrieWriteToFileDescriptor(a1, v7, &v10);
          close(v8);
          CFRelease(v6);
          return v2;
        }
        if (v7 != -1) {
          close(v7);
        }
        CFRelease(v6);
      }
    }
    return 0;
  }
  return v2;
}

void finishLevel<_RankedTrieLevel *,_RankedListNode *>(uint64_t a1)
{
  for (uint64_t i = 0; i != 256; ++i)
  {
    uint64_t v3 = a1 + 8 * i;
    uint64_t v6 = *(void *)(v3 + 20);
    CFStringRef v5 = (void *)(v3 + 20);
    uint64_t v4 = v6;
    uint64_t v7 = v6 & 3;
    if (v7 == 2)
    {
      int v8 = (void *)(v4 & 0xFFFFFFFFFFFFFFFCLL);
      do
      {
        size_t v9 = (void *)*v8;
        free(v8);
        int v8 = v9;
      }
      while (v9);
    }
    else if (v7 == 1)
    {
      finishLevel<_RankedTrieLevel *,_RankedListNode *>(v4 & 0xFFFFFFFFFFFFFFFCLL);
      free((void *)(*v5 & 0xFFFFFFFFFFFFFFFCLL));
    }
  }
}

void finishLevel<_TrieLevel *,_ListNode *>(uint64_t a1)
{
  for (uint64_t i = 0; i != 256; ++i)
  {
    uint64_t v3 = a1 + 8 * i;
    uint64_t v6 = *(void *)(v3 + 4);
    CFStringRef v5 = (void *)(v3 + 4);
    uint64_t v4 = v6;
    uint64_t v7 = v6 & 3;
    if (v7 == 2)
    {
      int v8 = (void *)(v4 & 0xFFFFFFFFFFFFFFFCLL);
      do
      {
        size_t v9 = (void *)*v8;
        free(v8);
        int v8 = v9;
      }
      while (v9);
    }
    else if (v7 == 1)
    {
      finishLevel<_TrieLevel *,_ListNode *>(v4 & 0xFFFFFFFFFFFFFFFCLL);
      free((void *)(*v5 & 0xFFFFFFFFFFFFFFFCLL));
    }
  }
}

uint64_t addListNode(uint64_t a1, void *a2, uint64_t a3, int a4, unsigned int a5, int a6, int *a7)
{
  uint64_t v12 = a2;
  uint64_t v13 = a1;
  CFRange v14 = (uint64_t *)*a2;
  uint64_t v15 = malloc_type_calloc(8uLL, (*(_DWORD *)(a1 + 2096) + 1), 0xC3C13903uLL);
  uint64_t v16 = (const void *)(a3 + a5);
  if (v14)
  {
    int v40 = v12;
    uint64_t v41 = v13;
    int v17 = a7;
    int v18 = 0;
    unsigned int v19 = 0;
    do
    {
      unsigned int v20 = v19;
      size_t v21 = *((unsigned __int16 *)v14 + 6);
      if (v21 + a5 == a4 && !memcmp(v16, (char *)v14 + 14, v21))
      {
        *((_DWORD *)v14 + 2) = a6;
        int v18 = 1;
      }
      ++v19;
      v15[v20] = v14;
      CFRange v14 = (uint64_t *)*v14;
    }
    while (v14);
    if (v18)
    {
      int v22 = 1;
      a7 = v17;
      uint64_t v12 = v40;
      uint64_t v13 = v41;
      goto LABEL_12;
    }
    a7 = v17;
    uint64_t v12 = v40;
    uint64_t v13 = v41;
  }
  else
  {
    unsigned int v19 = 0;
  }
  size_t v23 = a4 - a5;
  uint64_t v24 = (char *)malloc_type_calloc(1uLL, v23 + 15, 0xEEB99C1AuLL);
  memcpy(v24 + 14, v16, v23);
  v24[v23 + 14] = 0;
  *((_WORD *)v24 + 6) = v23;
  *(void *)uint64_t v24 = 0;
  v15[v19++] = v24;
  int v22 = 2;
  *((_DWORD *)v24 + 2) = a6;
LABEL_12:
  qsort(v15, v19, 8uLL, (int (__cdecl *)(const void *, const void *))nodeStringCompare);
  BOOL v25 = (void *)*v15;
  uint64_t v26 = (void *)*v15;
  if (v19 >= 2)
  {
    int v27 = v15 + 1;
    uint64_t v28 = v19 - 1;
    uint64_t v29 = (void *)*v15;
    do
    {
      unint64_t v30 = (void *)*v27++;
      uint64_t v26 = v30;
      void *v29 = v30;
      uint64_t v29 = v30;
      --v28;
    }
    while (v28);
  }
  *uint64_t v26 = 0;
  *uint64_t v12 = v25;
  free(v15);
  if (a7) {
    *a7 = v22;
  }
  if (v19 > *(_DWORD *)(v13 + 2096)) {
    addListNode(v31, v32, v33, v34, v35, v36, v37, v38);
  }
  return v19;
}

_DWORD *burstLevel(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t v6 = malloc_type_calloc(1uLL, 0x804uLL, 0x10000406A7154B6uLL);
  if (a2)
  {
    do
    {
      int v7 = *((unsigned __int16 *)a2 + 6);
      int v8 = a2[2];
      int v19 = 0;
      if (v7)
      {
        uint64_t v9 = *(void *)&v6[2 * *((unsigned __int8 *)a2 + 14) + 1];
        if (v9)
        {
          unint64_t v18 = v9 & 0xFFFFFFFFFFFFFFFCLL;
          unsigned int v10 = addListNode(a1, &v18, (uint64_t)a2 + 14, v7, 1u, v8, &v19);
          uint64_t v11 = v18;
          if (v10 >= *(_DWORD *)(a1 + 2096))
          {
            uint64_t v11 = burstLevel(a1, v18, &v19);
            uint64_t v12 = 1;
          }
          else
          {
            uint64_t v12 = 2;
          }
          *(void *)&v6[2 * *((unsigned __int8 *)a2 + 14) + 1] = v12 | v11;
        }
        else
        {
          size_t v14 = (v7 - 1);
          unint64_t v15 = (unint64_t)malloc_type_calloc(1uLL, v14 + 15, 0xEEB99C1AuLL);
          memcpy((void *)(v15 + 14), (char *)a2 + 15, v14);
          *(unsigned char *)(v15 + 14 + v14) = 0;
          *(_WORD *)(v15 + 12) = v14;
          *(_DWORD *)(v15 + 8) = v8;
          *(void *)unint64_t v15 = 0;
          *(void *)&v6[2 * *((unsigned __int8 *)a2 + 14) + 1] = v15 | 2;
          int v19 = 2;
        }
      }
      else
      {
        if (*v6) {
          int v13 = 1;
        }
        else {
          int v13 = 2;
        }
        int v19 = v13;
        *uint64_t v6 = v8;
      }
      if (a3) {
        *a3 = v19;
      }
      uint64_t v16 = *(_DWORD **)a2;
      free(a2);
      a2 = v16;
    }
    while (v16);
  }
  return v6;
}

uint64_t nodeStringCompare(void *a1, void *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  uint64_t v4 = (const void *)(*a1 + 14);
  CFStringRef v5 = (const void *)(*a2 + 14);
  unsigned int v6 = *(unsigned __int16 *)(v2 + 12);
  unsigned int v7 = *(unsigned __int16 *)(v3 + 12);
  unsigned int v8 = v6 - v7;
  if ((int)v6 >= (int)v7) {
    size_t v9 = v7;
  }
  else {
    size_t v9 = v6;
  }
  LODWORD(result) = memcmp(v4, v5, v9);
  if (result) {
    return result;
  }
  else {
    return v8;
  }
}

uint64_t addListNodeRanked(uint64_t a1, void *a2, uint64_t a3, int a4, unsigned int a5, int a6, double *a7, char a8, double a9, int *a10, uint64_t a11, void (*a12)(uint64_t, double, double))
{
  uint64_t v18 = a1;
  int v19 = (uint64_t *)*a2;
  unsigned int v20 = (uint64_t *)malloc_type_calloc(8uLL, (*(_DWORD *)(a1 + 2096) + 1), 0x8513F69DuLL);
  size_t v21 = (const void *)(a3 + a5);
  if (v19)
  {
    uint64_t v49 = v18;
    int v22 = 0;
    LODWORD(v23) = 0;
    if (a12) {
      a8 = 0;
    }
    double v24 = 0.0;
    do
    {
      int v25 = v23;
      size_t v26 = *((unsigned __int16 *)v19 + 14);
      if (v26 + a5 == a4 && !memcmp(v21, (char *)v19 + 30, v26))
      {
        *((_DWORD *)v19 + 6) = a6;
        double v27 = a9;
        if ((a8 & 1) == 0)
        {
          double v28 = *((double *)v19 + 2);
          if (a12) {
            a12(a11, v28, a9);
          }
          else {
            double v27 = v28 + a9;
          }
        }
        *((double *)v19 + 2) = v27;
        int v22 = 1;
      }
      if (*((double *)v19 + 1) > v24) {
        double v24 = *((double *)v19 + 1);
      }
      uint64_t v23 = (v23 + 1);
      v20[v25] = (uint64_t)v19;
      int v19 = (uint64_t *)*v19;
    }
    while (v19);
    if (v22)
    {
      int v29 = 1;
      uint64_t v18 = v49;
      uint64_t v31 = a2;
      unint64_t v30 = a10;
      goto LABEL_22;
    }
    uint64_t v18 = v49;
  }
  else
  {
    LODWORD(v23) = 0;
    double v24 = 0.0;
  }
  uint64_t v31 = a2;
  unint64_t v30 = a10;
  if (v24 < a9) {
    double v24 = a9;
  }
  size_t v32 = a4 - a5;
  uint64_t v33 = (char *)malloc_type_calloc(1uLL, v32 + 31, 0x68F56B5CuLL);
  memcpy(v33 + 30, v21, v32);
  v33[v32 + 30] = 0;
  *((_WORD *)v33 + 14) = v32;
  *(void *)uint64_t v33 = 0;
  v20[v23] = (uint64_t)v33;
  *((_DWORD *)v33 + 6) = a6;
  uint64_t v23 = (v23 + 1);
  int v29 = 2;
  *((double *)v33 + 1) = v24;
  *((double *)v33 + 2) = a9;
LABEL_22:
  qsort(v20, v23, 8uLL, (int (__cdecl *)(const void *, const void *))nodeScoreCompare);
  uint64_t v34 = (void *)*v20;
  *a7 = v24;
  uint64_t v35 = v34;
  uint64_t v36 = (v23 - 1);
  if (v23 != 1)
  {
    uint64_t v37 = v20 + 1;
    uint64_t v38 = v34;
    do
    {
      uint64_t v39 = *v37++;
      uint64_t v35 = (void *)v39;
      *uint64_t v38 = v39;
      *(double *)(v39 + 8) = *a7;
      uint64_t v38 = (void *)v39;
      --v36;
    }
    while (v36);
  }
  *uint64_t v35 = 0;
  void *v31 = v34;
  free(v20);
  if (v30) {
    int *v30 = v29;
  }
  if (v23 > *(_DWORD *)(v18 + 2096)) {
    addListNodeRanked(v40, v41, v42, v43, v44, v45, v46, v47);
  }
  return v23;
}

double *burstLevelRanked(uint64_t a1, unsigned __int16 *a2, double *a3, uint64_t a4, _DWORD *a5)
{
  unsigned int v10 = (double *)malloc_type_calloc(1uLL, 0x814uLL, 0x1000040B01ABE46uLL);
  *a3 = 0.0;
  if (a2)
  {
    double v27 = a5;
    do
    {
      double v28 = 0.0;
      int v11 = a2[14];
      int v12 = *((_DWORD *)a2 + 6);
      double v13 = *((double *)a2 + 2);
      int v30 = 0;
      if (v11)
      {
        uint64_t v14 = *(void *)((char *)&v10[*((unsigned __int8 *)a2 + 30) + 2] + 4);
        if (v14)
        {
          unint64_t v29 = v14 & 0xFFFFFFFFFFFFFFFCLL;
          unsigned int v15 = addListNodeRanked(a1, &v29, (uint64_t)(a2 + 15), v11, 1u, v12, &v28, a4, v13, &v30, 0, 0);
          uint64_t v16 = v29;
          if (v15 >= *(_DWORD *)(a1 + 2096))
          {
            uint64_t v16 = burstLevelRanked(a1, v29, &v28, a4, 0);
            uint64_t v17 = 1;
          }
          else
          {
            uint64_t v17 = 2;
          }
          *(void *)((char *)&v10[*((unsigned __int8 *)a2 + 30) + 2] + 4) = v17 | v16;
        }
        else
        {
          uint64_t v19 = a1;
          uint64_t v20 = a4;
          size_t v21 = (v11 - 1);
          unint64_t v22 = (unint64_t)malloc_type_calloc(1uLL, v21 + 31, 0x68F56B5CuLL);
          memcpy((void *)(v22 + 30), (char *)a2 + 31, v21);
          *(unsigned char *)(v22 + 30 + v21) = 0;
          *(_WORD *)(v22 + 28) = v21;
          a4 = v20;
          a1 = v19;
          a5 = v27;
          *(_DWORD *)(v22 + 24) = v12;
          *(double *)(v22 + 8) = v13;
          *(double *)(v22 + 16) = v13;
          *(void *)unint64_t v22 = 0;
          double v28 = v13;
          *(void *)((char *)&v10[*((unsigned __int8 *)a2 + 30) + 2] + 4) = v22 | 2;
          int v30 = 2;
        }
      }
      else
      {
        if (*((_DWORD *)v10 + 4)) {
          int v18 = 1;
        }
        else {
          int v18 = 2;
        }
        int v30 = v18;
        *((_DWORD *)v10 + 4) = v12;
        v10[1] = v13;
        double v28 = v13;
      }
      if (a5) {
        *a5 = v30;
      }
      double v23 = v28;
      if (v28 <= *a3) {
        double v23 = *a3;
      }
      *a3 = v23;
      double v24 = *(unsigned __int16 **)a2;
      free(a2);
      a2 = v24;
    }
    while (v24);
    double v25 = *a3;
  }
  else
  {
    double v25 = 0.0;
  }
  *unsigned int v10 = v25;
  return v10;
}

uint64_t nodeScoreCompare(const void *a1, const void *a2)
{
  double v2 = *(double *)(*(void *)a1 + 16);
  double v3 = *(double *)(*(void *)a2 + 16);
  if (v2 == v3)
  {
    unsigned int v4 = *(_DWORD *)(*(void *)a1 + 24);
    unsigned int v5 = *(_DWORD *)(*(void *)a2 + 24);
    BOOL v6 = v4 == v5;
    if (v4 > v5) {
      unsigned int v7 = -1;
    }
    else {
      unsigned int v7 = 1;
    }
    if (v6) {
      return 0;
    }
    else {
      return v7;
    }
  }
  else if (v2 - v3 <= 0.0)
  {
    return 1;
  }
  else
  {
    return 0xFFFFFFFFLL;
  }
}

BOOL searchDiskLevelRanked(uint64_t a1, uint64_t a2, const unsigned __int8 *a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  char v37 = 0;
  if (a5 < a4)
  {
    int v15 = *(_DWORD *)(a2 + 4 * a3[a5]);
    uint64_t v16 = v15 & 3;
    switch(v16)
    {
      case 3:
        uint64_t v33 = *(void *)(a1 + 2088);
        std::__function::__value_func<void ()(void *,_SITrieCompletion *,BOOL,BOOL *)>::__value_func[abi:ne180100]((uint64_t)v42, a8);
        int v18 = v42;
        uint64_t v19 = searchCompactDiskLevelRanked(a1, (v15 & 0xFFFFFFFC) + v33, a3, a4, a5 + 1, a6, a7, (uint64_t)v42);
        goto LABEL_28;
      case 2:
        uint64_t v34 = *(void *)(a1 + 2088);
        std::__function::__value_func<void ()(void *,_SITrieCompletion *,BOOL,BOOL *)>::__value_func[abi:ne180100]((uint64_t)v41, a8);
        int v18 = v41;
        uint64_t v19 = searchDiskPageRanked((unsigned int *)((v15 & 0xFFFFFFFC) + v34), a3, a4, a5 + 1, a6, a7, (uint64_t)v41);
        goto LABEL_28;
      case 1:
        uint64_t v17 = *(void *)(a1 + 2088);
        std::__function::__value_func<void ()(void *,_SITrieCompletion *,BOOL,BOOL *)>::__value_func[abi:ne180100]((uint64_t)v43, a8);
        int v18 = v43;
        uint64_t v19 = searchDiskLevelRanked(a1, (v15 & 0xFFFFFFFC) + v17, a3, a4, a5 + 1, a6, a7, v43);
LABEL_28:
        BOOL v23 = v19;
        std::__function::__value_func<void ()(void *,_SITrieCompletion *,BOOL,BOOL *)>::~__value_func[abi:ne180100](v18);
        return v23;
    }
    return 0;
  }
  int v20 = *(_DWORD *)(a2 + 1024);
  if (!v20)
  {
    if (a6) {
      return 0;
    }
    goto LABEL_14;
  }
  size_t v21 = SITrieCompletionCreate(a3, a4, v20, *(double *)(a2 + 1036));
  CFAllocatorRef v22 = (const __CFAllocator *)std::function<void ()(void *,_SITrieCompletion *,BOOL,BOOL *)>::operator()(a8, a7, (uint64_t)v21, 1, (uint64_t)&v37);
  if (v21) {
    trieCompletionRelease(v22, (atomic_uint *)v21);
  }
  BOOL v23 = v37 != 0;
  if (!v37 && (a6 & 1) == 0)
  {
LABEL_14:
    uint64_t v24 = 0;
    uint64_t v25 = (a4 + 1);
    while (1)
    {
      int v26 = *(_DWORD *)(a2 + 4 * v24);
      a3[a5] = v24;
      uint64_t v27 = v26 & 3;
      switch(v27)
      {
        case 3:
          uint64_t v30 = *(void *)(a1 + 2088);
          std::__function::__value_func<void ()(void *,_SITrieCompletion *,BOOL,BOOL *)>::__value_func[abi:ne180100]((uint64_t)v39, a8);
          char v37 = searchCompactDiskLevelRanked(a1, (v26 & 0xFFFFFFFC) + v30, a3, v25, a5 + 1, 0, a7, (uint64_t)v39);
          unint64_t v29 = v39;
          break;
        case 2:
          uint64_t v31 = *(void *)(a1 + 2088);
          std::__function::__value_func<void ()(void *,_SITrieCompletion *,BOOL,BOOL *)>::__value_func[abi:ne180100]((uint64_t)v38, a8);
          char v37 = searchDiskPageRanked((unsigned int *)((v26 & 0xFFFFFFFC) + v31), a3, v25, a5 + 1, 0, a7, (uint64_t)v38);
          unint64_t v29 = v38;
          break;
        case 1:
          uint64_t v28 = *(void *)(a1 + 2088);
          std::__function::__value_func<void ()(void *,_SITrieCompletion *,BOOL,BOOL *)>::__value_func[abi:ne180100]((uint64_t)v40, a8);
          char v37 = searchDiskLevelRanked(a1, (v26 & 0xFFFFFFFC) + v28, a3, v25, a5 + 1, 0, a7, v40);
          unint64_t v29 = v40;
          break;
        default:
          goto LABEL_22;
      }
      std::__function::__value_func<void ()(void *,_SITrieCompletion *,BOOL,BOOL *)>::~__value_func[abi:ne180100](v29);
LABEL_22:
      BOOL v23 = v37 != 0;
      if (!v37 && v24++ != 255) {
        continue;
      }
      return v23;
    }
  }
  return v23;
}

void sub_1BDAFCBBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  std::__function::__value_func<void ()(void *,_SITrieCompletion *,BOOL,BOOL *)>::~__value_func[abi:ne180100](va);
  _Unwind_Resume(a1);
}

uint64_t containsKey(uint64_t result, uint64_t a2, int a3, unsigned char *a4)
{
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
LABEL_5:
      *(_DWORD *)(result + 4) = *(_DWORD *)(a2 + 20);
      *(void *)(result + 8) = *(void *)(a2 + 4);
LABEL_8:
      *a4 = 1;
      return result;
    }
    if (!*(_DWORD *)result)
    {
      if (!a3) {
        return result;
      }
      goto LABEL_5;
    }
    char v6 = 0;
    unsigned int v5 = *(uint64_t (**)(void, uint64_t, char *))(result + 24);
    if (v5)
    {
      uint64_t result = v5(*(void *)(result + 16), a2, &v6);
      if (v6) {
        goto LABEL_8;
      }
    }
  }
  return result;
}

BOOL searchDiskLevel(uint64_t a1, uint64_t a2, const unsigned __int8 *a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  char v37 = 0;
  if (a5 < a4)
  {
    int v15 = *(_DWORD *)(a2 + 4 * a3[a5]);
    uint64_t v16 = v15 & 3;
    switch(v16)
    {
      case 3:
        uint64_t v33 = *(void *)(a1 + 2088);
        std::__function::__value_func<void ()(void *,_SITrieCompletion *,BOOL,BOOL *)>::__value_func[abi:ne180100]((uint64_t)v42, a8);
        int v18 = v42;
        uint64_t v19 = searchCompactDiskLevel(a1, (int8x8_t *)((v15 & 0xFFFFFFFC) + v33), a3, a4, a5 + 1, a6, a7, (uint64_t)v42);
        goto LABEL_28;
      case 2:
        uint64_t v34 = *(void *)(a1 + 2088);
        std::__function::__value_func<void ()(void *,_SITrieCompletion *,BOOL,BOOL *)>::__value_func[abi:ne180100]((uint64_t)v41, a8);
        int v18 = v41;
        uint64_t v19 = searchDiskPage(a1, (unsigned int *)((v15 & 0xFFFFFFFC) + v34), a3, a4, a5 + 1, a6, a7, (uint64_t)v41);
        goto LABEL_28;
      case 1:
        uint64_t v17 = *(void *)(a1 + 2088);
        std::__function::__value_func<void ()(void *,_SITrieCompletion *,BOOL,BOOL *)>::__value_func[abi:ne180100]((uint64_t)v43, a8);
        int v18 = v43;
        uint64_t v19 = searchDiskLevel(a1, (v15 & 0xFFFFFFFC) + v17, a3, a4, a5 + 1, a6, a7, v43);
LABEL_28:
        BOOL v23 = v19;
        std::__function::__value_func<void ()(void *,_SITrieCompletion *,BOOL,BOOL *)>::~__value_func[abi:ne180100](v18);
        return v23;
    }
    return 0;
  }
  int v20 = *(_DWORD *)(a2 + 1024);
  if (!v20)
  {
    if (a6) {
      return 0;
    }
    goto LABEL_14;
  }
  size_t v21 = SITrieCompletionCreate(a3, a4, v20, 0.0);
  CFAllocatorRef v22 = (const __CFAllocator *)std::function<void ()(void *,_SITrieCompletion *,BOOL,BOOL *)>::operator()(a8, a7, (uint64_t)v21, 1, (uint64_t)&v37);
  if (v21) {
    trieCompletionRelease(v22, (atomic_uint *)v21);
  }
  BOOL v23 = v37 != 0;
  if (!v37 && (a6 & 1) == 0)
  {
LABEL_14:
    uint64_t v24 = 0;
    uint64_t v25 = (a4 + 1);
    while (1)
    {
      int v26 = *(_DWORD *)(a2 + 4 * v24);
      a3[a5] = v24;
      uint64_t v27 = v26 & 3;
      switch(v27)
      {
        case 3:
          uint64_t v30 = *(void *)(a1 + 2088);
          std::__function::__value_func<void ()(void *,_SITrieCompletion *,BOOL,BOOL *)>::__value_func[abi:ne180100]((uint64_t)v39, a8);
          char v37 = searchCompactDiskLevel(a1, (int8x8_t *)((v26 & 0xFFFFFFFC) + v30), a3, v25, a5 + 1, 0, a7, (uint64_t)v39);
          unint64_t v29 = v39;
          break;
        case 2:
          uint64_t v31 = *(void *)(a1 + 2088);
          std::__function::__value_func<void ()(void *,_SITrieCompletion *,BOOL,BOOL *)>::__value_func[abi:ne180100]((uint64_t)v38, a8);
          char v37 = searchDiskPage(a1, (unsigned int *)((v26 & 0xFFFFFFFC) + v31), a3, v25, a5 + 1, 0, a7, (uint64_t)v38);
          unint64_t v29 = v38;
          break;
        case 1:
          uint64_t v28 = *(void *)(a1 + 2088);
          std::__function::__value_func<void ()(void *,_SITrieCompletion *,BOOL,BOOL *)>::__value_func[abi:ne180100]((uint64_t)v40, a8);
          char v37 = searchDiskLevel(a1, (v26 & 0xFFFFFFFC) + v28, a3, v25, a5 + 1, 0, a7, v40);
          unint64_t v29 = v40;
          break;
        default:
          goto LABEL_22;
      }
      std::__function::__value_func<void ()(void *,_SITrieCompletion *,BOOL,BOOL *)>::~__value_func[abi:ne180100](v29);
LABEL_22:
      BOOL v23 = v37 != 0;
      if (!v37 && v24++ != 255) {
        continue;
      }
      return v23;
    }
  }
  return v23;
}

void sub_1BDAFCFA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  std::__function::__value_func<void ()(void *,_SITrieCompletion *,BOOL,BOOL *)>::~__value_func[abi:ne180100](va);
  _Unwind_Resume(a1);
}

BOOL searchLevelRanked(uint64_t a1, const unsigned __int8 *a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  char v33 = 0;
  if (a4 < a3)
  {
    uint64_t v14 = *(void *)(a1 + 8 * a2[a4] + 20);
    if ((v14 & 3) == 2)
    {
      std::__function::__value_func<void ()(void *,_SITrieCompletion *,BOOL,BOOL *)>::__value_func[abi:ne180100]((uint64_t)v36, a7);
      int v15 = v36;
      uint64_t v16 = searchListRanked(v14 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4 + 1, a5, a6, (uint64_t)v36);
      goto LABEL_24;
    }
    if ((v14 & 3) == 1)
    {
      std::__function::__value_func<void ()(void *,_SITrieCompletion *,BOOL,BOOL *)>::__value_func[abi:ne180100]((uint64_t)v37, a7);
      int v15 = v37;
      uint64_t v16 = searchLevelRanked(v14 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4 + 1, a5, a6, v37);
LABEL_24:
      BOOL v20 = v16;
      std::__function::__value_func<void ()(void *,_SITrieCompletion *,BOOL,BOOL *)>::~__value_func[abi:ne180100](v15);
      return v20;
    }
    return 0;
  }
  int v17 = *(_DWORD *)(a1 + 16);
  if (!v17)
  {
    if (a5) {
      return 0;
    }
    goto LABEL_13;
  }
  int v18 = SITrieCompletionCreate(a2, a4, v17, *(double *)(a1 + 8));
  CFAllocatorRef v19 = (const __CFAllocator *)std::function<void ()(void *,_SITrieCompletion *,BOOL,BOOL *)>::operator()(a7, a6, (uint64_t)v18, 1, (uint64_t)&v33);
  if (v18) {
    trieCompletionRelease(v19, (atomic_uint *)v18);
  }
  BOOL v20 = v33 != 0;
  if (!v33 && (a5 & 1) == 0)
  {
LABEL_13:
    uint64_t v21 = 0;
    uint64_t v22 = (a3 + 1);
    uint64_t v23 = a4 + 1;
    uint64_t v24 = a1 + 20;
    uint64_t v25 = a4;
    while (1)
    {
      uint64_t v26 = *(void *)(v24 + 8 * v21);
      a2[v25] = v21;
      if ((v26 & 3) == 2)
      {
        std::__function::__value_func<void ()(void *,_SITrieCompletion *,BOOL,BOOL *)>::__value_func[abi:ne180100]((uint64_t)v34, a7);
        unint64_t v30 = v26 & 0xFFFFFFFFFFFFFFFCLL;
        uint64_t v28 = v34;
        char v29 = searchListRanked(v30, a2, v22, v23, 0, a6, (uint64_t)v34);
      }
      else
      {
        if ((v26 & 3) != 1) {
          goto LABEL_19;
        }
        std::__function::__value_func<void ()(void *,_SITrieCompletion *,BOOL,BOOL *)>::__value_func[abi:ne180100]((uint64_t)v35, a7);
        unint64_t v27 = v26 & 0xFFFFFFFFFFFFFFFCLL;
        uint64_t v28 = v35;
        char v29 = searchLevelRanked(v27, a2, v22, v23, 0, a6, v35);
      }
      char v33 = v29;
      std::__function::__value_func<void ()(void *,_SITrieCompletion *,BOOL,BOOL *)>::~__value_func[abi:ne180100](v28);
LABEL_19:
      BOOL v20 = v33 != 0;
      if (!v33 && v21++ != 255) {
        continue;
      }
      return v20;
    }
  }
  return v20;
}

void sub_1BDAFD254(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  std::__function::__value_func<void ()(void *,_SITrieCompletion *,BOOL,BOOL *)>::~__value_func[abi:ne180100](va);
  _Unwind_Resume(a1);
}

uint64_t searchLevel(int *a1, const unsigned __int8 *a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  char v31 = 0;
  if (a4 < a3)
  {
    uint64_t v14 = *(void *)&a1[2 * a2[a4] + 1];
    if ((v14 & 3) == 2)
    {
      std::__function::__value_func<void ()(void *,_SITrieCompletion *,BOOL,BOOL *)>::__value_func[abi:ne180100]((uint64_t)v34, a7);
      int v15 = v34;
      uint64_t v16 = searchList(v14 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4 + 1, a5, a6, (uint64_t)v34);
      goto LABEL_23;
    }
    if ((v14 & 3) == 1)
    {
      std::__function::__value_func<void ()(void *,_SITrieCompletion *,BOOL,BOOL *)>::__value_func[abi:ne180100]((uint64_t)v35, a7);
      int v15 = v35;
      uint64_t v16 = searchLevel(v14 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, a4 + 1, a5, a6, v35);
LABEL_23:
      BOOL v19 = v16;
      std::__function::__value_func<void ()(void *,_SITrieCompletion *,BOOL,BOOL *)>::~__value_func[abi:ne180100](v15);
      return v19;
    }
    return 0;
  }
  if (!*a1)
  {
    if (a5) {
      return 0;
    }
    goto LABEL_12;
  }
  int v17 = SITrieCompletionCreate(a2, a4, *a1, 0.0);
  CFAllocatorRef v18 = (const __CFAllocator *)std::function<void ()(void *,_SITrieCompletion *,BOOL,BOOL *)>::operator()(a7, a6, (uint64_t)v17, 1, (uint64_t)&v31);
  if (v17) {
    trieCompletionRelease(v18, (atomic_uint *)v17);
  }
  BOOL v19 = v31 != 0;
  if (!v31 && (a5 & 1) == 0)
  {
LABEL_12:
    uint64_t v20 = 0;
    uint64_t v21 = (a3 + 1);
    uint64_t v22 = a4 + 1;
    uint64_t v23 = a1 + 1;
    uint64_t v24 = a4;
    while (1)
    {
      uint64_t v25 = *(void *)&v23[2 * v20];
      a2[v24] = v20;
      if (!v25) {
        goto LABEL_20;
      }
      if ((v25 & 3) == 2)
      {
        std::__function::__value_func<void ()(void *,_SITrieCompletion *,BOOL,BOOL *)>::__value_func[abi:ne180100]((uint64_t)v32, a7);
        unint64_t v29 = v25 & 0xFFFFFFFFFFFFFFFCLL;
        unint64_t v27 = v32;
        char v28 = searchList(v29, a2, v21, v22, 0, a6, (uint64_t)v32);
      }
      else
      {
        if ((v25 & 3) != 1) {
          goto LABEL_19;
        }
        std::__function::__value_func<void ()(void *,_SITrieCompletion *,BOOL,BOOL *)>::__value_func[abi:ne180100]((uint64_t)v33, a7);
        unint64_t v26 = v25 & 0xFFFFFFFFFFFFFFFCLL;
        unint64_t v27 = v33;
        char v28 = searchLevel(v26, a2, v21, v22, 0, a6, v33);
      }
      char v31 = v28;
      std::__function::__value_func<void ()(void *,_SITrieCompletion *,BOOL,BOOL *)>::~__value_func[abi:ne180100](v27);
LABEL_19:
      if (v31) {
        return 1;
      }
LABEL_20:
      if (++v20 == 256) {
        return 0;
      }
    }
  }
  return v19;
}

void sub_1BDAFD4E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  std::__function::__value_func<void ()(void *,_SITrieCompletion *,BOOL,BOOL *)>::~__value_func[abi:ne180100](va);
  _Unwind_Resume(a1);
}

BOOL searchCompactDiskLevelRanked(uint64_t a1, uint64_t a2, const unsigned __int8 *a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  char v54 = 0;
  if (a5 < a4)
  {
    unint64_t v14 = a3[a5];
    uint64_t v15 = v14 >> 6;
    uint64_t v16 = *(void *)(a2 + 8 * (v14 >> 6));
    uint64_t v17 = 1 << v14;
    if (((1 << v14) & v16) != 0)
    {
      if (v14 >= 0x40)
      {
        int v18 = 0;
        if (v15 <= 1) {
          uint64_t v15 = 1;
        }
        else {
          uint64_t v15 = v15;
        }
        uint64_t v38 = (int8x8_t *)a2;
        do
        {
          int8x8_t v39 = *v38++;
          uint8x8_t v40 = (uint8x8_t)vcnt_s8(v39);
          v40.i16[0] = vaddlv_u8(v40);
          v18 += v40.i32[0];
          --v15;
        }
        while (v15);
      }
      else
      {
        int v18 = 0;
      }
      uint8x8_t v41 = (uint8x8_t)vcnt_s8((int8x8_t)((v17 - 1) & v16));
      v41.i16[0] = vaddlv_u8(v41);
      int v42 = *(_DWORD *)(a2 + 4 * (v18 + v41.i32[0]) + 52);
      int v43 = v42 & 3;
      switch(v43)
      {
        case 1:
          uint64_t v48 = *(void *)(a1 + 2088);
          std::__function::__value_func<void ()(void *,_SITrieCompletion *,BOOL,BOOL *)>::__value_func[abi:ne180100]((uint64_t)v60, a8);
          uint64_t v49 = (v42 & 0xFFFFFFFC) + v48;
          uint64_t v46 = v60;
          uint64_t v47 = searchDiskLevelRanked(a1, v49, a3, a4, a5 + 1, a6, a7, v60);
          goto LABEL_43;
        case 2:
          uint64_t v50 = *(void *)(a1 + 2088);
          std::__function::__value_func<void ()(void *,_SITrieCompletion *,BOOL,BOOL *)>::__value_func[abi:ne180100]((uint64_t)v58, a8);
          uint64_t v46 = v58;
          uint64_t v47 = searchDiskPageRanked((unsigned int *)((v42 & 0xFFFFFFFC) + v50), a3, a4, a5 + 1, a6, a7, (uint64_t)v58);
          goto LABEL_43;
        case 3:
          uint64_t v44 = *(void *)(a1 + 2088);
          std::__function::__value_func<void ()(void *,_SITrieCompletion *,BOOL,BOOL *)>::__value_func[abi:ne180100]((uint64_t)v59, a8);
          uint64_t v45 = (v42 & 0xFFFFFFFC) + v44;
          uint64_t v46 = v59;
          uint64_t v47 = searchCompactDiskLevelRanked(a1, v45, a3, a4, a5 + 1, a6, a7, v59);
LABEL_43:
          BOOL v22 = v47;
          std::__function::__value_func<void ()(void *,_SITrieCompletion *,BOOL,BOOL *)>::~__value_func[abi:ne180100](v46);
          return v22;
      }
    }
    return 0;
  }
  int v19 = *(_DWORD *)(a2 + 48);
  if (!v19)
  {
    if (a6) {
      return 0;
    }
    goto LABEL_12;
  }
  uint64_t v20 = SITrieCompletionCreate(a3, a4, v19, *(double *)(a2 + 40));
  CFAllocatorRef v21 = (const __CFAllocator *)std::function<void ()(void *,_SITrieCompletion *,BOOL,BOOL *)>::operator()(a8, a7, (uint64_t)v20, 1, (uint64_t)&v54);
  if (v20) {
    trieCompletionRelease(v21, (atomic_uint *)v20);
  }
  BOOL v22 = v54 != 0;
  if (!v54 && (a6 & 1) == 0)
  {
LABEL_12:
    unint64_t v23 = 0;
    uint64_t v24 = (a4 + 1);
    while (1)
    {
      if (v23 >> 6 <= 1) {
        uint64_t v25 = 1;
      }
      else {
        uint64_t v25 = v23 >> 6;
      }
      uint64_t v26 = *(void *)(a2 + 8 * (v23 >> 6));
      if ((v26 & (1 << v23)) == 0) {
        goto LABEL_28;
      }
      if (v23 >= 0x40)
      {
        int v27 = 0;
        char v28 = (int8x8_t *)a2;
        do
        {
          int8x8_t v29 = *v28++;
          uint8x8_t v30 = (uint8x8_t)vcnt_s8(v29);
          v30.i16[0] = vaddlv_u8(v30);
          v27 += v30.i32[0];
          --v25;
        }
        while (v25);
      }
      else
      {
        int v27 = 0;
      }
      uint8x8_t v31 = (uint8x8_t)vcnt_s8((int8x8_t)(v26 & ((1 << v23) - 1)));
      v31.i16[0] = vaddlv_u8(v31);
      int v32 = *(_DWORD *)(a2 + 4 * (v27 + v31.i32[0]) + 52);
      a3[a5] = v23;
      int v33 = v32 & 3;
      switch(v33)
      {
        case 1:
          uint64_t v36 = *(void *)(a1 + 2088);
          std::__function::__value_func<void ()(void *,_SITrieCompletion *,BOOL,BOOL *)>::__value_func[abi:ne180100]((uint64_t)v57, a8);
          char v54 = searchDiskLevelRanked(a1, v36 + (v32 & 0xFFFFFFFC), a3, v24, a5 + 1, 0, a7, v57);
          uint64_t v35 = v57;
          break;
        case 2:
          uint64_t v37 = *(void *)(a1 + 2088);
          std::__function::__value_func<void ()(void *,_SITrieCompletion *,BOOL,BOOL *)>::__value_func[abi:ne180100]((uint64_t)v55, a8);
          char v54 = searchDiskPageRanked((unsigned int *)(v37 + (v32 & 0xFFFFFFFC)), a3, v24, a5 + 1, 0, a7, (uint64_t)v55);
          uint64_t v35 = v55;
          break;
        case 3:
          uint64_t v34 = *(void *)(a1 + 2088);
          std::__function::__value_func<void ()(void *,_SITrieCompletion *,BOOL,BOOL *)>::__value_func[abi:ne180100]((uint64_t)v56, a8);
          char v54 = searchCompactDiskLevelRanked(a1, v34 + (v32 & 0xFFFFFFFC), a3, v24, a5 + 1, 0, a7, v56);
          uint64_t v35 = v56;
          break;
        default:
          goto LABEL_28;
      }
      std::__function::__value_func<void ()(void *,_SITrieCompletion *,BOOL,BOOL *)>::~__value_func[abi:ne180100](v35);
LABEL_28:
      BOOL v22 = v54 != 0;
      if (!v54 && ++v23 != 256) {
        continue;
      }
      return v22;
    }
  }
  return v22;
}

void sub_1BDAFD910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  std::__function::__value_func<void ()(void *,_SITrieCompletion *,BOOL,BOOL *)>::~__value_func[abi:ne180100](va);
  _Unwind_Resume(a1);
}

BOOL searchDiskPageRanked(unsigned int *a1, const unsigned __int8 *a2, unsigned int a3, int a4, char a5, uint64_t a6, uint64_t a7)
{
  char v33 = 0;
  unsigned int v7 = *a1;
  if (!*a1) {
    return 0;
  }
  int v8 = a4;
  unsigned int v10 = 0;
  int v11 = &a2[a4];
  int v12 = a3 - a4;
  uint64_t v28 = a3;
  __dst = (unsigned __int8 *)&a2[a3];
  while (1)
  {
    double v13 = (char *)a1 + v10;
    unint64_t v14 = v13 + 12;
    uint64_t v15 = *((unsigned __int16 *)v13 + 12);
    if (v12 <= (int)v15 && !memcmp(v13 + 26, v11, v12))
    {
      char v16 = a5;
      if (v12 == v15) {
        char v16 = 0;
      }
      if ((v16 & 1) == 0)
      {
        uint64_t v17 = (v15 + v8);
        unsigned int v18 = a3;
        size_t v19 = v17 - a3;
        uint64_t v20 = v28;
        if ((int)v19 >= 1)
        {
          memcpy(__dst, &v14[v15 - (int)v19 + 14], v19);
          uint64_t v20 = v17;
          unsigned int v18 = v17;
        }
        a2[v20] = 0;
        CFAllocatorRef v21 = SITrieCompletionCreate(a2, v18, *((_DWORD *)v14 + 2), *(double *)v14);
        int v8 = a4;
        if (v21)
        {
          BOOL v22 = (atomic_uint *)v21;
          CFAllocatorRef v23 = (const __CFAllocator *)std::function<void ()(void *,_SITrieCompletion *,BOOL,BOOL *)>::operator()(a7, a6, (uint64_t)v21, v12 == v15, (uint64_t)&v33);
          trieCompletionRelease(v23, v22);
          if (v33) {
            break;
          }
        }
      }
    }
    v10 += *((unsigned __int16 *)v14 + 6) + 14;
    if (v10 >= v7) {
      return v33 != 0;
    }
  }
  return 1;
}

uint64_t std::function<void ()(void *,_SITrieCompletion *,BOOL,BOOL *)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v10 = a2;
  uint64_t v9 = a3;
  char v8 = a4;
  uint64_t v7 = a5;
  uint64_t v5 = *(void *)(a1 + 24);
  if (!v5) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *, char *, uint64_t *))(*(void *)v5 + 48))(v5, &v10, &v9, &v8, &v7);
}

uint64_t std::__function::__value_func<void ()(void *,_SITrieCompletion *,BOOL,BOOL *)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void std::__throw_bad_function_call[abi:ne180100]()
{
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
}

void std::bad_function_call::~bad_function_call(std::bad_function_call *this)
{
  std::exception::~exception(this);

  JUMPOUT(0x1C1883920);
}

void std::__function::__func<void (*)(void *,_SITrieCompletion *,BOOL,BOOL *),std::allocator<void (*)(void *,_SITrieCompletion *,BOOL,BOOL *)>,void ()(void *,_SITrieCompletion *,BOOL,BOOL *)>::~__func()
{
}

void *std::__function::__func<void (*)(void *,_SITrieCompletion *,BOOL,BOOL *),std::allocator<void (*)(void *,_SITrieCompletion *,BOOL,BOOL *)>,void ()(void *,_SITrieCompletion *,BOOL,BOOL *)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F181DBB8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(void *,_SITrieCompletion *,BOOL,BOOL *),std::allocator<void (*)(void *,_SITrieCompletion *,BOOL,BOOL *)>,void ()(void *,_SITrieCompletion *,BOOL,BOOL *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F181DBB8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void (*)(void *,_SITrieCompletion *,BOOL,BOOL *),std::allocator<void (*)(void *,_SITrieCompletion *,BOOL,BOOL *)>,void ()(void *,_SITrieCompletion *,BOOL,BOOL *)>::operator()(uint64_t a1, void *a2, void *a3, unsigned __int8 *a4, void *a5)
{
  return (*(uint64_t (**)(void, void, void, void))(a1 + 8))(*a2, *a3, *a4, *a5);
}

void *std::__function::__value_func<void ()(void *,_SITrieCompletion *,BOOL,BOOL *)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

BOOL searchCompactDiskLevel(uint64_t a1, int8x8_t *a2, const unsigned __int8 *a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  char v55 = 0;
  if (a5 < a4)
  {
    unint64_t v14 = a3[a5];
    uint64_t v15 = v14 >> 6;
    int8x8_t v16 = a2[v14 >> 6];
    uint64_t v17 = 1 << v14;
    if (((1 << v14) & *(void *)&v16) != 0)
    {
      if (v14 >= 0x40)
      {
        int v18 = 0;
        if (v15 <= 1) {
          uint64_t v15 = 1;
        }
        else {
          uint64_t v15 = v15;
        }
        uint64_t v38 = a2;
        do
        {
          int8x8_t v39 = *v38++;
          uint8x8_t v40 = (uint8x8_t)vcnt_s8(v39);
          v40.i16[0] = vaddlv_u8(v40);
          v18 += v40.i32[0];
          --v15;
        }
        while (v15);
      }
      else
      {
        int v18 = 0;
      }
      uint8x8_t v41 = (uint8x8_t)vcnt_s8((int8x8_t)((v17 - 1) & *(void *)&v16));
      v41.i16[0] = vaddlv_u8(v41);
      __int32 v42 = a2[4].i32[v18 + v41.i32[0] + 1];
      int v43 = v42 & 3;
      switch(v43)
      {
        case 1:
          uint64_t v48 = *(void *)(a1 + 2088);
          std::__function::__value_func<void ()(void *,_SITrieCompletion *,BOOL,BOOL *)>::__value_func[abi:ne180100]((uint64_t)v61, a8);
          uint64_t v49 = (v42 & 0xFFFFFFFC) + v48;
          uint64_t v46 = v61;
          uint64_t v47 = searchDiskLevel(a1, v49, a3, a4, a5 + 1, a6, a7, v61);
          goto LABEL_43;
        case 2:
          uint64_t v50 = *(void *)(a1 + 2088);
          std::__function::__value_func<void ()(void *,_SITrieCompletion *,BOOL,BOOL *)>::__value_func[abi:ne180100]((uint64_t)v59, a8);
          uint64_t v51 = (unsigned int *)((v42 & 0xFFFFFFFC) + v50);
          uint64_t v46 = v59;
          uint64_t v47 = searchDiskPage(a1, v51, a3, a4, a5 + 1, a6, a7, (uint64_t)v59);
          goto LABEL_43;
        case 3:
          uint64_t v44 = *(void *)(a1 + 2088);
          std::__function::__value_func<void ()(void *,_SITrieCompletion *,BOOL,BOOL *)>::__value_func[abi:ne180100]((uint64_t)v60, a8);
          uint64_t v45 = (v42 & 0xFFFFFFFC) + v44;
          uint64_t v46 = v60;
          uint64_t v47 = searchCompactDiskLevel(a1, v45, a3, a4, a5 + 1, a6, a7, v60);
LABEL_43:
          BOOL v22 = v47;
          std::__function::__value_func<void ()(void *,_SITrieCompletion *,BOOL,BOOL *)>::~__value_func[abi:ne180100](v46);
          return v22;
      }
    }
    return 0;
  }
  int v19 = a2[4].i32[0];
  if (!v19)
  {
    if (a6) {
      return 0;
    }
    goto LABEL_12;
  }
  uint64_t v20 = SITrieCompletionCreate(a3, a4, v19, 0.0);
  CFAllocatorRef v21 = (const __CFAllocator *)std::function<void ()(void *,_SITrieCompletion *,BOOL,BOOL *)>::operator()(a8, a7, (uint64_t)v20, 1, (uint64_t)&v55);
  if (v20) {
    trieCompletionRelease(v21, (atomic_uint *)v20);
  }
  BOOL v22 = v55 != 0;
  if (!v55 && (a6 & 1) == 0)
  {
LABEL_12:
    unint64_t v23 = 0;
    uint64_t v24 = (a4 + 1);
    while (1)
    {
      if (v23 >> 6 <= 1) {
        uint64_t v25 = 1;
      }
      else {
        uint64_t v25 = v23 >> 6;
      }
      int8x8_t v26 = a2[v23 >> 6];
      if ((*(void *)&v26 & (1 << v23)) == 0) {
        goto LABEL_28;
      }
      if (v23 >= 0x40)
      {
        int v27 = 0;
        uint64_t v28 = a2;
        do
        {
          int8x8_t v29 = *v28++;
          uint8x8_t v30 = (uint8x8_t)vcnt_s8(v29);
          v30.i16[0] = vaddlv_u8(v30);
          v27 += v30.i32[0];
          --v25;
        }
        while (v25);
      }
      else
      {
        int v27 = 0;
      }
      uint8x8_t v31 = (uint8x8_t)vcnt_s8((int8x8_t)(*(void *)&v26 & ((1 << v23) - 1)));
      v31.i16[0] = vaddlv_u8(v31);
      __int32 v32 = a2[4].i32[v27 + v31.i32[0] + 1];
      a3[a5] = v23;
      int v33 = v32 & 3;
      switch(v33)
      {
        case 1:
          uint64_t v36 = *(void *)(a1 + 2088);
          std::__function::__value_func<void ()(void *,_SITrieCompletion *,BOOL,BOOL *)>::__value_func[abi:ne180100]((uint64_t)v58, a8);
          char v55 = searchDiskLevel(a1, v36 + (v32 & 0xFFFFFFFC), a3, v24, a5 + 1, 0, a7, v58);
          uint64_t v35 = v58;
          break;
        case 2:
          uint64_t v37 = *(void *)(a1 + 2088);
          std::__function::__value_func<void ()(void *,_SITrieCompletion *,BOOL,BOOL *)>::__value_func[abi:ne180100]((uint64_t)v56, a8);
          char v55 = searchDiskPage(a1, (unsigned int *)(v37 + (v32 & 0xFFFFFFFC)), a3, v24, a5 + 1, 0, a7, (uint64_t)v56);
          uint64_t v35 = v56;
          break;
        case 3:
          uint64_t v34 = *(void *)(a1 + 2088);
          std::__function::__value_func<void ()(void *,_SITrieCompletion *,BOOL,BOOL *)>::__value_func[abi:ne180100]((uint64_t)v57, a8);
          char v55 = searchCompactDiskLevel(a1, v34 + (v32 & 0xFFFFFFFC), a3, v24, a5 + 1, 0, a7, v57);
          uint64_t v35 = v57;
          break;
        default:
          goto LABEL_28;
      }
      std::__function::__value_func<void ()(void *,_SITrieCompletion *,BOOL,BOOL *)>::~__value_func[abi:ne180100](v35);
LABEL_28:
      BOOL v22 = v55 != 0;
      if (!v55 && ++v23 != 256) {
        continue;
      }
      return v22;
    }
  }
  return v22;
}

void sub_1BDAFE180(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  std::__function::__value_func<void ()(void *,_SITrieCompletion *,BOOL,BOOL *)>::~__value_func[abi:ne180100](va);
  _Unwind_Resume(a1);
}

uint64_t searchDiskPage(uint64_t a1, unsigned int *a2, const unsigned __int8 *a3, unsigned int a4, int a5, char a6, uint64_t a7, uint64_t a8)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  char v53 = 0;
  int v9 = a4 - a5;
  unsigned int v10 = *a2;
  if ((*(unsigned char *)(a1 + 2076) & 4) != 0)
  {
    memset(__s1, 0, sizeof(__s1));
    if (v10)
    {
      uint64_t v24 = 0;
      unsigned int v25 = 0;
      int8x8_t v26 = &a3[a5];
      while (1)
      {
        int v27 = (char *)a2 + v25;
        uint64_t v28 = v27[10];
        if (v24)
        {
          uint64_t v29 = v24[6];
          if (v28 > v29) {
            memcpy((char *)__s1 + v29, v24 + 7, v28 - v29);
          }
        }
        uint64_t v24 = v27 + 4;
        unsigned int v30 = *((unsigned __int16 *)v27 + 4);
        int v31 = v30 + v28;
        if ((int)(v30 + v28) >= v9)
        {
          if (a4 == a5 || ((int)v28 >= v9 ? (int v32 = v9) : (int v32 = v28), !memcmp(__s1, v26, v32)))
          {
            unsigned int v33 = v9 - v28;
            if (v9 - (int)v28 < 0
              || ((int)v30 >= (int)v33 ? (size_t v34 = v33) : (size_t v34 = v30), !memcmp(v24 + 7, &v26[v28], v34)))
            {
              char v35 = a6;
              if (v9 == v31) {
                char v35 = 0;
              }
              if ((v35 & 1) == 0)
              {
                unsigned int v36 = v28 + a5;
                int v37 = v28 + a5 - a4;
                if (v37 < 1)
                {
                  unsigned int v36 = a4;
                }
                else
                {
                  memcpy((void *)&a3[a4], (char *)__s1 + v28 - v37, v36 - a4);
                  unsigned int v30 = *((unsigned __int16 *)v24 + 2);
                  LODWORD(v28) = v24[6];
                }
                int v38 = a5 - a4 + v30 + v28;
                if (v38 < 1)
                {
                  uint8x8_t v40 = a3;
                }
                else
                {
                  int v39 = v38 - (v37 & ~(v37 >> 31));
                  uint8x8_t v40 = a3;
                  memcpy((void *)&a3[v36], &v24[v30 - v39 + 7], v39);
                  v36 += v39;
                }
                v40[v36] = 0;
                uint8x8_t v41 = SITrieCompletionCreate(v40, v36, *(_DWORD *)v24, 0.0);
                int8x8_t v26 = &a3[a5];
                if (v41)
                {
                  __int32 v42 = (atomic_uint *)v41;
                  CFAllocatorRef v43 = (const __CFAllocator *)std::function<void ()(void *,_SITrieCompletion *,BOOL,BOOL *)>::operator()(a8, a7, (uint64_t)v41, v9 == v31, (uint64_t)&v53);
                  trieCompletionRelease(v43, v42);
                  if (v53) {
                    break;
                  }
                }
              }
            }
          }
        }
        v25 += *((unsigned __int16 *)v24 + 2) + 7;
        if (v25 >= v10) {
          return v53 != 0;
        }
      }
      return 1;
    }
  }
  else if (v10)
  {
    unsigned int v11 = 0;
    int v12 = &a3[a5];
    char v13 = a6;
    __dst = (unsigned __int8 *)&a3[a4];
    while (1)
    {
      unint64_t v14 = (char *)a2 + v11;
      uint64_t v15 = v14 + 4;
      uint64_t v16 = *((unsigned __int16 *)v14 + 4);
      if (v9 <= (int)v16 && !memcmp(v14 + 10, v12, v9))
      {
        char v17 = v9 == v16 ? 0 : v13;
        if ((v17 & 1) == 0)
        {
          unsigned int v18 = a4;
          size_t v19 = v16 + a5 - a4;
          uint64_t v20 = a4;
          if ((int)v19 >= 1)
          {
            memcpy(__dst, &v15[v16 - (int)v19 + 6], v19);
            uint64_t v20 = (v16 + a5);
            unsigned int v18 = v16 + a5;
          }
          a3[v20] = 0;
          CFAllocatorRef v21 = SITrieCompletionCreate(a3, v18, *(_DWORD *)v15, 0.0);
          char v13 = a6;
          if (v21)
          {
            BOOL v22 = (atomic_uint *)v21;
            CFAllocatorRef v23 = (const __CFAllocator *)std::function<void ()(void *,_SITrieCompletion *,BOOL,BOOL *)>::operator()(a8, a7, (uint64_t)v21, v9 == v16, (uint64_t)&v53);
            trieCompletionRelease(v23, v22);
            if (v53) {
              break;
            }
          }
        }
      }
      v11 += *((unsigned __int16 *)v15 + 2) + 6;
      if (v11 >= v10) {
        return v53 != 0;
      }
    }
    return 1;
  }
  return v53 != 0;
}

BOOL searchListRanked(BOOL result, const unsigned __int8 *a2, unsigned int a3, int a4, char a5, uint64_t a6, uint64_t a7)
{
  char v26 = 0;
  if (result)
  {
    unsigned int v10 = (uint64_t *)result;
    unsigned int v11 = &a2[a4];
    size_t v12 = (int)(a3 - a4);
    uint64_t v25 = a3;
    __dst = (unsigned __int8 *)&a2[a3];
    while (1)
    {
      uint64_t v14 = *((unsigned __int16 *)v10 + 14);
      if ((int)v12 <= (int)v14 && !memcmp((char *)v10 + 30, v11, v12))
      {
        char v15 = v12 == v14 ? 0 : a5;
        if ((v15 & 1) == 0)
        {
          size_t v16 = v14 + a4 - a3;
          uint64_t v17 = v25;
          unsigned int v18 = a3;
          if ((int)v16 >= 1)
          {
            memcpy(__dst, (char *)v10 + v14 - (int)v16 + 30, v16);
            uint64_t v17 = (v14 + a4);
            unsigned int v18 = v14 + a4;
          }
          a2[v17] = 0;
          size_t v19 = SITrieCompletionCreate(a2, v18, *((_DWORD *)v10 + 6), *((double *)v10 + 2));
          if (v19)
          {
            uint64_t v20 = (atomic_uint *)v19;
            CFAllocatorRef v21 = (const __CFAllocator *)std::function<void ()(void *,_SITrieCompletion *,BOOL,BOOL *)>::operator()(a7, a6, (uint64_t)v19, v12 == v14, (uint64_t)&v26);
            trieCompletionRelease(v21, v20);
            if (v26) {
              break;
            }
          }
        }
      }
      unsigned int v10 = (uint64_t *)*v10;
      if (!v10) {
        return v26 != 0;
      }
    }
    return 1;
  }
  return result;
}

BOOL searchList(BOOL result, const unsigned __int8 *a2, unsigned int a3, int a4, char a5, uint64_t a6, uint64_t a7)
{
  char v26 = 0;
  if (result)
  {
    unsigned int v10 = (uint64_t *)result;
    unsigned int v11 = &a2[a4];
    size_t v12 = (int)(a3 - a4);
    uint64_t v25 = a3;
    __dst = (unsigned __int8 *)&a2[a3];
    while (1)
    {
      uint64_t v14 = *((unsigned __int16 *)v10 + 6);
      if ((int)v12 <= (int)v14 && !memcmp((char *)v10 + 14, v11, v12))
      {
        char v15 = v12 == v14 ? 0 : a5;
        if ((v15 & 1) == 0)
        {
          size_t v16 = v14 + a4 - a3;
          uint64_t v17 = v25;
          unsigned int v18 = a3;
          if ((int)v16 >= 1)
          {
            memcpy(__dst, (char *)v10 + v14 - (int)v16 + 14, v16);
            uint64_t v17 = (v14 + a4);
            unsigned int v18 = v14 + a4;
          }
          a2[v17] = 0;
          size_t v19 = SITrieCompletionCreate(a2, v18, *((_DWORD *)v10 + 2), 0.0);
          if (v19)
          {
            uint64_t v20 = (atomic_uint *)v19;
            CFAllocatorRef v21 = (const __CFAllocator *)std::function<void ()(void *,_SITrieCompletion *,BOOL,BOOL *)>::operator()(a7, a6, (uint64_t)v19, v12 == v14, (uint64_t)&v26);
            trieCompletionRelease(v21, v20);
            if (v26) {
              break;
            }
          }
        }
      }
      unsigned int v10 = (uint64_t *)*v10;
      if (!v10) {
        return v26 != 0;
      }
    }
    return 1;
  }
  return result;
}

uint64_t advanceCompactMapCursorMappedLevel(uint64_t a1, uint64_t a2, unsigned __int8 *a3, int a4)
{
  unint64_t v8 = (*(void *)a2 & 0xFFFFFFFFFFFFFFFCLL) + *(void *)(a1 + 2088);
  if (*(unsigned char *)(a1 + 2076))
  {
    if (!a4)
    {
      *(_DWORD *)(a2 + 16) = *(_DWORD *)(v8 + 1024);
      *(void *)(a2 + 20) = *(void *)(v8 + 1036);
      return 1;
    }
  }
  else if (!a4)
  {
    *(_DWORD *)(a2 + 16) = *(_DWORD *)(v8 + 1024);
    return 1;
  }
  updateCompactMapCursorPointer(a1, a2, *(unsigned int *)(v8 + 4 * *a3));

  return advanceCompactMapCursor(a1, a2, a3 + 1, (a4 - 1));
}

uint64_t updateCompactMapCursorPointer(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)a2 != a3)
  {
    switch(a3 & 3)
    {
      case 1:
        unint64_t v3 = (a3 & 0xFFFFFFFFFFFFFFFCLL) + *(void *)(result + 2088);
        if ((*(unsigned char *)(result + 2076) & 1) == 0)
        {
          int v4 = *(_DWORD *)(v3 + 1024);
          goto LABEL_13;
        }
        *(_DWORD *)(a2 + 16) = *(_DWORD *)(v3 + 1024);
        uint64_t v8 = *(void *)(v3 + 1036);
        goto LABEL_16;
      case 2:
        int v5 = *(_DWORD *)(result + 2076);
        if ((v5 & 4) != 0)
        {
          int v4 = *(_DWORD *)((a3 & 0xFFFFFFFFFFFFFFFCLL) + *(void *)(result + 2088));
          goto LABEL_13;
        }
        char v6 = (int *)((a3 & 0xFFFFFFFFFFFFFFFCLL) + *(void *)(result + 2088));
        if ((v5 & 1) == 0)
        {
          int v4 = *v6;
          goto LABEL_13;
        }
        *(_DWORD *)(a2 + 16) = v6[2];
        uint64_t v8 = *(void *)v6;
        goto LABEL_16;
      case 3:
        unint64_t v7 = (a3 & 0xFFFFFFFFFFFFFFFCLL) + *(void *)(result + 2088);
        if (*(unsigned char *)(result + 2076))
        {
          *(_DWORD *)(a2 + 16) = *(_DWORD *)(v7 + 48);
          uint64_t v8 = *(void *)(v7 + 40);
LABEL_16:
          *(void *)(a2 + 20) = v8;
        }
        else
        {
          int v4 = *(_DWORD *)(v7 + 32);
LABEL_13:
          *(_DWORD *)(a2 + 16) = v4;
        }
LABEL_17:
        *(void *)a2 = a3;
        *(void *)(a2 + 8) = 0;
        break;
      default:
        *(_DWORD *)(a2 + 16) = 0;
        goto LABEL_17;
    }
  }
  return result;
}

uint64_t advanceMapCursorTrieList(uint64_t a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  unsigned int v9 = a4;
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = *(void *)(a2 + 8);
  if ((*(unsigned char *)(a1 + 2076) & 1) == 0)
  {
    unint64_t v13 = v12 & 0xFFFFFFFFFFFFFFFCLL;
    uint64_t v14 = *(unsigned int *)(a2 + 16);
    if (v14 > *(unsigned __int16 *)(v13 + 12)) {
      advanceMapCursorTrieList(a1, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    }
    if (!v13)
    {
LABEL_20:
      LOBYTE(v25) = 0;
      return v25;
    }
    unint64_t v15 = v13;
    while (1)
    {
      unsigned int v16 = *(unsigned __int16 *)(v13 + 12);
      if (v15 != v13)
      {
        unsigned int v16 = *(unsigned __int16 *)(v15 + 12);
        if (v14 >= v16) {
          goto LABEL_19;
        }
        if (v14)
        {
          uint64_t v17 = (unsigned __int8 *)(v15 + 14);
          uint64_t v18 = *(unsigned int *)(a2 + 16);
          size_t v19 = (unsigned __int8 *)(v13 + 14);
          do
          {
            int v21 = *v17++;
            int v20 = v21;
            int v22 = *v19++;
            if (v20 != v22) {
              goto LABEL_19;
            }
          }
          while (--v18);
        }
      }
      LODWORD(v23) = 0;
      int v24 = *(_DWORD *)(a2 + 16);
      if (v14 < v16 && a4)
      {
        unint64_t v23 = 0;
        do
        {
          if (*(unsigned __int8 *)(v15 + v14 + 14 + v23) != a3[v23]) {
            break;
          }
          if (++v23 + v14 >= v16) {
            break;
          }
        }
        while (v23 < a4);
        int v24 = v14 + v23;
      }
      if (v23 == a4)
      {
        *(void *)(a2 + 8) = v15 | 2;
        if (v24 == v16)
        {
          *(_DWORD *)(a2 + 16) = v16;
          *(_DWORD *)(a2 + 20) = *(_DWORD *)(v15 + 8);
        }
        else
        {
          *(void *)(a2 + 16) = (v14 + a4);
        }
        LOBYTE(v25) = 1;
        return v25;
      }
LABEL_19:
      unint64_t v15 = *(void *)v15;
      if (!v15) {
        goto LABEL_20;
      }
    }
  }
  uint64_t v46 = &v44;
  uint64_t v45 = *(void *)a2;
  a9.n128_u64[0] = *(void *)(a2 + 16);
  double v26 = *(double *)(a2 + 24);
  uint64_t v49 = v12;
  __n128 v48 = a9;
  MEMORY[0x1F4188790](a1);
  uint64_t v29 = (char *)&v44 - v28;
  int v31 = (const void *)(v30 + 30);
  size_t v32 = *(unsigned int *)(a2 + 16);
  if (v27 <= v32) {
    size_t v33 = 0;
  }
  else {
    size_t v33 = v27 - v32;
  }
  bzero(&v29[v32], v33);
  memcpy(v29, v31, v32);
  int v25 = 0;
  unint64_t v34 = *(void *)a2 & 0xFFFFFFFFFFFFFFFCLL;
  if (v34)
  {
    unsigned int v35 = v32 + v9;
    size_t v47 = v9;
    do
    {
      unsigned int v36 = *(unsigned __int16 *)(v34 + 28);
      if (v35 <= v36 && !memcmp((const void *)(v34 + 30), v29, v32) && !memcmp((const void *)(v34 + 30 + v32), a3, v47))
      {
        if (v35 == v36)
        {
          *(void *)(a2 + 8) = v34 | 2;
          int v43 = *(_DWORD *)(v34 + 24);
          *(void *)(a2 + 24) = *(void *)(v34 + 16);
          *(_DWORD *)(a2 + 16) = v35;
          *(_DWORD *)(a2 + 20) = v43;
          LOBYTE(v25) = 1;
          return v25;
        }
        __n128 v37 = v48;
        HIDWORD(v38) = 0;
        BOOL v39 = v25 == 0;
        uint64_t v40 = v49;
        if (!v25) {
          uint64_t v40 = v34 | 2;
        }
        uint64_t v49 = v40;
        if (!v25) {
          double v26 = 0.0;
        }
        int v25 = 1;
        if (v39)
        {
          LODWORD(v38) = v48.n128_u32[0] + v9;
          v37.n128_f64[0] = v38;
        }
        __n128 v48 = v37;
      }
      unint64_t v34 = *(void *)v34;
    }
    while (v34);
  }
  uint64_t v41 = v49;
  *(void *)a2 = v45;
  *(void *)(a2 + 8) = v41;
  *(void *)(a2 + 16) = v48.n128_u64[0];
  *(double *)(a2 + 24) = v26;
  return v25;
}

uint64_t updateMapCursorPointer(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a2 + 8) != a3)
  {
    uint64_t v3 = a3 & 3;
    if ((a3 & 3) != 0)
    {
      if (v3 == 2)
      {
        unint64_t v6 = a3 & 0xFFFFFFFFFFFFFFFCLL;
        if ((*(unsigned char *)(result + 2076) & 1) == 0)
        {
          if (*(_WORD *)(v6 + 12)) {
            int v5 = 0;
          }
          else {
            int v5 = *(_DWORD *)(v6 + 8);
          }
          goto LABEL_14;
        }
        *(_DWORD *)(a2 + 20) = *(_DWORD *)(v6 + 24);
        *(void *)(a2 + 24) = *(void *)(v6 + 16);
        *(void *)a2 = a3;
      }
      else if (v3 == 1)
      {
        unint64_t v4 = a3 & 0xFFFFFFFFFFFFFFFCLL;
        if ((*(unsigned char *)(result + 2076) & 1) == 0)
        {
          int v5 = *(_DWORD *)v4;
LABEL_14:
          *(_DWORD *)(a2 + 20) = v5;
          goto LABEL_15;
        }
        *(_DWORD *)(a2 + 20) = *(_DWORD *)(v4 + 16);
        *(void *)(a2 + 24) = *(void *)(v4 + 8);
      }
    }
    else
    {
      *(_DWORD *)(a2 + 20) = 0;
      *(void *)(a2 + 24) = 0;
    }
LABEL_15:
    *(void *)(a2 + 8) = a3;
    *(_DWORD *)(a2 + 16) = 0;
  }
  return result;
}

uint64_t ___ZL12sharedBufferv_block_invoke()
{
  return pthread_key_create((pthread_key_t *)&sharedBuffer(void)::key, MEMORY[0x1E4F14838]);
}

uint64_t rankSearchCompactDiskLevel(uint64_t a1, uint64_t a2, unsigned __int8 *a3, unsigned int a4, unsigned int a5, __CFBinaryHeap *a6, __CFBinaryHeap *a7, unsigned int a8, void *a9)
{
  if (a5 >= a4)
  {
LABEL_12:
    double v26 = sharedBuffer();
    if ((int)(a4 + 1) <= 1023)
    {
      uint64_t v27 = v26;
      memcpy(v26, a3, a4);
      unint64_t v28 = 0;
      v27[a4 + 1] = 0;
      do
      {
        if (v28 >> 6 <= 1) {
          uint64_t v29 = 1;
        }
        else {
          uint64_t v29 = v28 >> 6;
        }
        uint64_t v30 = *(void *)(a2 + 8 * (v28 >> 6));
        if (((1 << v28) & v30) != 0)
        {
          if (v28 >= 0x40)
          {
            int v31 = 0;
            size_t v32 = (int8x8_t *)a2;
            do
            {
              int8x8_t v33 = *v32++;
              uint8x8_t v34 = (uint8x8_t)vcnt_s8(v33);
              v34.i16[0] = vaddlv_u8(v34);
              v31 += v34.i32[0];
              --v29;
            }
            while (v29);
          }
          else
          {
            int v31 = 0;
          }
          uint8x8_t v35 = (uint8x8_t)vcnt_s8((int8x8_t)(((1 << v28) - 1) & v30));
          v35.i16[0] = vaddlv_u8(v35);
          uint64_t v36 = *(unsigned int *)(a2 + 4 * (v31 + v35.i32[0]) + 52);
          v27[a4] = v28;
          rankSearchGetCursor(a1, v36, v27, a4 + 1, a6);
        }
        ++v28;
      }
      while (v28 != 256);
    }
    int v37 = *(_DWORD *)(a2 + 48);
    if (!v37) {
      goto LABEL_28;
    }
    double v38 = SITrieCompletionCreate(a3, a4, v37, *(double *)(a2 + 40));
    BOOL updated = updateCompletions(v38, a9, a6, a7, a8);
    BOOL v40 = updated;
    if (v38) {
      trieCompletionRelease((const __CFAllocator *)updated, (atomic_uint *)v38);
    }
    if (!v40)
    {
      return 0;
    }
    else
    {
LABEL_28:
      return rankSearchCursors(a1, a6);
    }
  }
  else
  {
    while (1)
    {
      unint64_t v14 = a3[a5];
      uint64_t v15 = v14 >> 6;
      uint64_t v16 = *(void *)(a2 + 8 * (v14 >> 6));
      uint64_t result = 1;
      uint64_t v18 = 1 << v14;
      if (((1 << v14) & v16) == 0) {
        break;
      }
      if (v14 >= 0x40)
      {
        int v19 = 0;
        if (v15 <= 1) {
          uint64_t v15 = 1;
        }
        else {
          uint64_t v15 = v15;
        }
        int v20 = (int8x8_t *)a2;
        do
        {
          int8x8_t v21 = *v20++;
          uint8x8_t v22 = (uint8x8_t)vcnt_s8(v21);
          v22.i16[0] = vaddlv_u8(v22);
          v19 += v22.i32[0];
          --v15;
        }
        while (v15);
      }
      else
      {
        int v19 = 0;
      }
      uint8x8_t v23 = (uint8x8_t)vcnt_s8((int8x8_t)((v18 - 1) & v16));
      v23.i16[0] = vaddlv_u8(v23);
      int v24 = *(_DWORD *)(a2 + 4 * (v19 + v23.i32[0]) + 52);
      int v25 = v24 & 3;
      if (v25 != 3)
      {
        if (v25 == 1)
        {
          uint64_t v43 = (v24 & 0xFFFFFFFC) + *(void *)(a1 + 2088);
          return rankSearchDiskLevel(a1, v43);
        }
        else if (v25 == 2)
        {
          uint64_t v41 = (unsigned int *)((v24 & 0xFFFFFFFC) + *(void *)(a1 + 2088));
          unsigned int v42 = a5 + 1;
          return rankSearchDiskPage(a1, v41, (char *)a3, a4, v42, a6, a7, a8, a9);
        }
        else
        {
          return 1;
        }
      }
      a2 = (v24 & 0xFFFFFFFC) + *(void *)(a1 + 2088);
      if (++a5 == a4) {
        goto LABEL_12;
      }
    }
  }
  return result;
}

uint64_t rankSearchDiskPage(uint64_t a1, unsigned int *a2, char *a3, unsigned int a4, unsigned int a5, __CFBinaryHeap *a6, __CFBinaryHeap *a7, unsigned int a8, void *a9)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  int v14 = a4 - a5;
  unsigned int v52 = *a2;
  uint64_t v15 = (unsigned __int8 *)sharedBuffer();
  uint64_t v16 = v15;
  if ((*(unsigned char *)(a1 + 2076) & 4) != 0)
  {
    if (a4 <= 0x3FF)
    {
      unsigned int v23 = a4;
      memcpy(v15, a3, a4);
      __dst = (unsigned __int8 *)&v16[a4];
      unsigned __int8 *__dst = 0;
      memset(__s1, 0, sizeof(__s1));
      if (v52)
      {
        int v24 = 0;
        unsigned int v25 = 0;
        unsigned int v43 = a5 - v23;
        char v51 = 1;
        __s2 = &a3[a5];
        unsigned int v48 = v23;
        while (1)
        {
          double v26 = (char *)a2 + v25;
          uint64_t v27 = v26[26];
          if (v24)
          {
            uint64_t v28 = v24[14];
            if (v27 > v28) {
              memcpy((char *)__s1 + v28, v24 + 15, v27 - v28);
            }
          }
          int v24 = v26 + 12;
          int v29 = *((unsigned __int16 *)v26 + 12);
          if (v29 + (int)v27 >= v14)
          {
            if (v23 == a5 || ((int)v27 >= v14 ? (int v30 = v14) : (int v30 = v27), !memcmp(__s1, __s2, v30)))
            {
              int v31 = v14 - v27;
              if (v14 == v27) {
                goto LABEL_28;
              }
              if (v29 < v31) {
                int v31 = v29;
              }
              if (!memcmp(v26 + 27, &__s2[v27], v31))
              {
LABEL_28:
                unsigned int v32 = v27 + a5;
                unsigned int v33 = v23;
                size_t v34 = v27 + a5 - v23;
                if ((int)v34 < 1)
                {
                  unsigned int v32 = v33;
                }
                else
                {
                  memcpy(__dst, (char *)__s1 + v27 - (int)v34, v34);
                  int v29 = *((unsigned __int16 *)v24 + 6);
                  LODWORD(v27) = v24[14];
                }
                int v35 = v43 + v29 + v27;
                if (v35 >= 1)
                {
                  int v36 = v35 - (v34 & ~((int)v34 >> 31));
                  memcpy((void *)&v16[v32], &v24[v29 - v36 + 15], v36);
                  v32 += v36;
                }
                unsigned int v23 = v48;
                v16[v32] = 0;
                int v37 = SITrieCompletionCreate(v16, v32, *((_DWORD *)v24 + 2), *(double *)v24);
                if (v37)
                {
                  double v38 = (atomic_uint *)v37;
                  BOOL updated = updateCompletions(v37, a9, a6, a7, a8);
                  char v51 = updated;
                  trieCompletionRelease((const __CFAllocator *)updated, v38);
                }
                if ((v51 & 1) == 0) {
                  goto LABEL_12;
                }
                int v29 = *((unsigned __int16 *)v24 + 6);
              }
            }
          }
          v25 += v29 + 15;
          if (v25 >= v52) {
            goto LABEL_41;
          }
        }
      }
      char v51 = 1;
LABEL_41:
      char v40 = v51 & 1;
      goto LABEL_42;
    }
LABEL_12:
    char v47 = 0;
    return v47 & 1;
  }
  if (a5 > 0x3FF) {
    goto LABEL_12;
  }
  memcpy(v15, a3, a5);
  v16[a5] = 0;
  if (!v52)
  {
    char v40 = 1;
LABEL_42:
    char v47 = v40;
    return v47 & 1;
  }
  unsigned int v17 = 0;
  uint64_t v50 = &a3[a5];
  char v47 = 1;
  do
  {
    uint64_t v18 = (char *)a2 + v17;
    memcpy((void *)&v16[a5], v18 + 26, *((unsigned __int16 *)v18 + 12));
    unint64_t v19 = *((unsigned __int16 *)v18 + 12) + (unint64_t)a5;
    v16[v19] = 0;
    if (v14 <= *((unsigned __int16 *)v18 + 12) && !memcmp(v18 + 26, v50, v14))
    {
      int v20 = SITrieCompletionCreate(v16, v19, *((_DWORD *)v18 + 5), *(double *)(v18 + 12));
      if (v20)
      {
        int8x8_t v21 = (atomic_uint *)v20;
        BOOL v22 = updateCompletions(v20, a9, a6, a7, a8);
        char v47 = v22;
        trieCompletionRelease((const __CFAllocator *)v22, v21);
      }
    }
    v17 += *((unsigned __int16 *)v18 + 12) + 14;
  }
  while (v17 < v52);
  return v47 & 1;
}

BOOL updateCompletions(char *value, void *a2, __CFBinaryHeap *a3, CFBinaryHeapRef heap, uint64_t a5)
{
  if (CFBinaryHeapContainsValue(heap, value))
  {
LABEL_2:
    BOOL v10 = 1;
    goto LABEL_5;
  }
  if (a2)
  {
    BOOL v10 = ((unsigned int (*)(void, void, char *, CFBinaryHeapRef, uint64_t))a2[2])(a2[1], *a2, value, heap, a5) != 0;
  }
  else
  {
    if (CFBinaryHeapGetCount(heap) < a5) {
      goto LABEL_2;
    }
    Minimuuint64_t m = (char *)CFBinaryHeapGetMinimum(heap);
    uint64_t v12 = (double *)CFBinaryHeapGetMinimum(a3);
    double v13 = 0.0;
    double v14 = 0.0;
    if (value) {
      double v14 = *(double *)(value + 4);
    }
    if (Minimum) {
      double v13 = *(double *)(Minimum + 4);
    }
    if (v14 > v13) {
      goto LABEL_2;
    }
    if (v12)
    {
      double v15 = Minimum ? *(double *)(Minimum + 4) : 0.0;
      if (v15 < v12[2]) {
        goto LABEL_2;
      }
    }
    BOOL v10 = 0;
  }
LABEL_5:
  if (!CFBinaryHeapContainsValue(heap, value))
  {
    if (a2)
    {
      if (((unsigned int (*)(void, void, char *, CFBinaryHeapRef, uint64_t))a2[3])(a2[1], *a2, value, heap, a5))
      {
        ((void (*)(void, void, char *, CFBinaryHeapRef, uint64_t))a2[4])(a2[1], *a2, value, heap, a5);
LABEL_32:
        size_t v34 = heap;
        int v35 = value;
LABEL_33:
        CFBinaryHeapAddValue(v34, v35);
      }
    }
    else
    {
      if (CFBinaryHeapGetCount(heap) < a5) {
        goto LABEL_32;
      }
      uint64_t v16 = (char *)CFBinaryHeapGetMinimum(heap);
      unsigned int v17 = v16;
      double v18 = 0.0;
      double v19 = 0.0;
      if (v16) {
        double v19 = *(double *)(v16 + 4);
      }
      if (value) {
        double v18 = *(double *)(value + 4);
      }
      if (v19 < v18)
      {
        int v21 = *((_DWORD *)v16 + 5);
        size_t v20 = *((unsigned int *)v16 + 6);
        uint64_t v22 = *(void *)(v16 + 4);
        unsigned int v23 = malloc_type_malloc(v20 + 4129, 0x2CE6EF4DuLL);
        if (v23)
        {
          int v24 = v23;
          *((void *)v23 + 1) = (4 * v21);
          *((void *)v23 + 2) = v22;
          v23[7] = v20;
          unsigned int v25 = v23 + 8;
          v25[v20] = 0;
          memcpy(v25, v17 + 28, v20);
          v24[6] = 1;
          CFBinaryHeapAddValue(a3, v24);
          int v26 = v24[6] - 1;
          v24[6] = v26;
          if (!v26) {
            free(v24);
          }
        }
        else
        {
          CFBinaryHeapAddValue(a3, 0);
        }
        CFBinaryHeapRemoveMinimumValue(heap);
        goto LABEL_32;
      }
      int v28 = *((_DWORD *)value + 5);
      size_t v27 = *((unsigned int *)value + 6);
      uint64_t v29 = *(void *)(value + 4);
      int v30 = malloc_type_malloc(v27 + 4129, 0x2CE6EF4DuLL);
      if (!v30)
      {
        size_t v34 = a3;
        int v35 = 0;
        goto LABEL_33;
      }
      int v31 = v30;
      *((void *)v30 + 1) = (4 * v28);
      *((void *)v30 + 2) = v29;
      v30[7] = v27;
      unsigned int v32 = v30 + 8;
      v32[v27] = 0;
      memcpy(v32, value + 28, v27);
      v31[6] = 1;
      CFBinaryHeapAddValue(a3, v31);
      int v33 = v31[6] - 1;
      v31[6] = v33;
      if (!v33) {
        free(v31);
      }
    }
  }
  return v10;
}

void rankSearchGetCursor(uint64_t a1, uint64_t a2, const void *a3, unsigned int a4, __CFBinaryHeap *a5)
{
  uint64_t v9 = *(void *)(a1 + 2088);
  uint64_t v10 = a2 & 3;
  if (v9)
  {
    if (v10 == 3)
    {
      uint64_t v12 = *(void *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + v9 + 32);
      goto LABEL_13;
    }
    if (v10 == 2)
    {
      uint64_t v12 = *(void *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + v9 + 4);
      goto LABEL_13;
    }
    if (v10 != 1) {
      return;
    }
    unsigned int v11 = (uint64_t *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + v9 + 1028);
  }
  else
  {
    if (v10 == 2)
    {
      uint64_t v12 = *(void *)((a2 & 0xFFFFFFFFFFFFFFFCLL) + 8);
      goto LABEL_13;
    }
    if (v10 != 1) {
      return;
    }
    unsigned int v11 = (uint64_t *)(a2 & 0xFFFFFFFFFFFFFFFCLL);
  }
  uint64_t v12 = *v11;
LABEL_13:
  double v13 = malloc_type_malloc(a4 + 4129, 0x2CE6EF4DuLL);
  if (v13)
  {
    double v14 = v13;
    *((void *)v13 + 1) = a2;
    *((void *)v13 + 2) = v12;
    v13[7] = a4;
    double v15 = v13 + 8;
    v15[a4] = 0;
    memcpy(v15, a3, a4);
    v14[6] = 1;
    CFBinaryHeapAddValue(a5, v14);
    int v16 = v14[6] - 1;
    v14[6] = v16;
    if (!v16)
    {
      free(v14);
    }
  }
}

uint64_t rankSearchList(uint64_t *a1, char *a2, int a3, unsigned int a4, __CFBinaryHeap *a5, __CFBinaryHeap *a6, unsigned int a7, void *a8)
{
  if (a4 <= 0x3FF)
  {
    double v13 = (char *)sharedBuffer();
    memcpy(v13, a2, a4);
    v13[a4] = 0;
    if (a1)
    {
      int v14 = a3 - a4;
      double v15 = &a2[a4];
      char v8 = 1;
      do
      {
        memcpy(&v13[a4], (char *)a1 + 30, *((unsigned __int16 *)a1 + 14));
        unint64_t v16 = *((unsigned __int16 *)a1 + 14) + (unint64_t)a4;
        v13[v16] = 0;
        if (v14 <= *((unsigned __int16 *)a1 + 14) && !memcmp((char *)a1 + 30, v15, v14))
        {
          unsigned int v17 = SITrieCompletionCreate((const unsigned __int8 *)v13, v16, *((_DWORD *)a1 + 6), *((double *)a1 + 2));
          if (v17)
          {
            double v18 = (atomic_uint *)v17;
            BOOL updated = updateCompletions(v17, a8, a5, a6, a7);
            char v8 = updated;
            trieCompletionRelease((const __CFAllocator *)updated, v18);
          }
        }
        a1 = (uint64_t *)*a1;
      }
      while (a1);
    }
    else
    {
      char v8 = 1;
    }
  }
  else
  {
    char v8 = 0;
  }
  return v8 & 1;
}

void serializeListsRanked(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  uint64_t v6 = a2;
  uint64_t v7 = a1;
  uint64_t v8 = 0;
  unsigned int __fd = a4;
  do
  {
    uint64_t v9 = v6 + 8 * v8;
    uint64_t v12 = *(void *)(v9 + 20);
    unsigned int v11 = (uint64_t *)(v9 + 20);
    uint64_t v10 = v12;
    uint64_t v13 = v12 & 3;
    if (v13 == 2)
    {
      int v14 = (void *)(v10 & 0xFFFFFFFFFFFFFFFCLL);
      int v15 = 1;
      int v35 = lseek(v4, 0, 1);
      unsigned int v16 = *(_DWORD *)(v7 + 2096);
      if (v16 <= 1) {
        unint64_t v17 = 1;
      }
      else {
        unint64_t v17 = v16;
      }
      uint64_t v18 = v14[1];
      double v19 = (char *)malloc_type_malloc(1039 * v17 + 12, 0x9032B255uLL);
      size_t v20 = malloc_type_malloc(8 * v17, 0x2004093837F09uLL);
      LODWORD(v21) = 0;
      uint64_t v22 = v14;
      do
      {
        unsigned int v23 = v15;
        if (v17 <= v21)
        {
          size_t v20 = malloc_type_realloc(v20, 16 * v17, 0x2004093837F09uLL);
          v17 *= 2;
        }
        *((void *)v20 + v21) = v22;
        uint64_t v22 = (void *)*v22;
        size_t v21 = (v21 + 1);
        ++v15;
      }
      while (v22);
      qsort(v20, v21, 8uLL, (int (__cdecl *)(const void *, const void *))nodeScoreCompare);
      unsigned int v24 = 0;
      if (v21)
      {
        uint64_t v25 = v23;
        int v26 = (uint64_t *)v20;
        do
        {
          uint64_t v27 = *v26++;
          int v28 = &v19[v24];
          *((_WORD *)v28 + 12) = *(_WORD *)(v27 + 28);
          *(void *)(v28 + 12) = *(void *)(v27 + 16);
          *((_DWORD *)v28 + 5) = *(_DWORD *)(v27 + 24);
          memcpy(v28 + 26, (const void *)(v27 + 30), *(unsigned __int16 *)(v27 + 28));
          v24 += *(unsigned __int16 *)(v27 + 28) + 14;
          --v25;
        }
        while (v25);
      }
      uint64_t v5 = a3;
      size_t v29 = (v24 + 15) & 0x1FFFFFFFCLL;
      *(_DWORD *)double v19 = v24;
      *(void *)(v19 + 4) = v18;
      uint64_t v4 = __fd;
      write(__fd, v19, v29);
      free(v20);
      free(v19);
      do
      {
        int v30 = (void *)*v14;
        free(v14);
        int v14 = v30;
      }
      while (v30);
      uint64_t *v11 = (v35 - a3) | 2;
      uint64_t v7 = a1;
      uint64_t v6 = a2;
    }
    else if (v13 == 1)
    {
      serializeListsRanked(v7, v10 & 0xFFFFFFFFFFFFFFFCLL, v5, v4);
    }
    ++v8;
  }
  while (v8 != 256);
}

void serializeLists(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  uint64_t v6 = a2;
  uint64_t v7 = 0;
  unsigned int __fd = a4;
  do
  {
    uint64_t v8 = v6 + 8 * v7;
    uint64_t v11 = *(void *)(v8 + 4);
    uint64_t v10 = (uint64_t *)(v8 + 4);
    uint64_t v9 = v11;
    uint64_t v12 = v11 & 3;
    if (v12 == 2)
    {
      uint64_t v13 = (void *)(v9 & 0xFFFFFFFFFFFFFFFCLL);
      int v41 = lseek(v4, 0, 1);
      unsigned int v14 = *(_DWORD *)(a1 + 2096);
      if (v14 <= 1) {
        unint64_t v15 = 1;
      }
      else {
        unint64_t v15 = v14;
      }
      unsigned int v16 = malloc_type_malloc(1031 * v15 + 4, 0x17BC0821uLL);
      unint64_t v17 = malloc_type_malloc(8 * v15, 0x2004093837F09uLL);
      unsigned int v18 = 0;
      if (v13)
      {
        double v19 = v13;
        do
        {
          if (v15 <= v18)
          {
            unint64_t v17 = malloc_type_realloc(v17, 16 * v15, 0x2004093837F09uLL);
            v15 *= 2;
          }
          *((void *)v17 + v18) = v19;
          double v19 = (void *)*v19;
          ++v18;
        }
        while (v19);
      }
      int v20 = *(_DWORD *)(a1 + 2076);
      if ((v20 & 4) != 0)
      {
        uint64_t v28 = v18;
        qsort(v17, v18, 8uLL, (int (__cdecl *)(const void *, const void *))nodeStringCompare);
        if (v18)
        {
          uint64_t v29 = 0;
          uint64_t v30 = 0;
          unsigned int v23 = 0;
          do
          {
            uint64_t v31 = v30;
            uint64_t v30 = *((void *)v17 + v29);
            if (v31)
            {
              uint64_t v32 = 0;
              uint64_t v33 = *(unsigned __int16 *)(v30 + 12);
              unsigned int v34 = *(_WORD *)(v30 + 12);
              while (v33 != v32)
              {
                if (*(unsigned __int16 *)(v31 + 12) <= (unsigned __int16)v32
                  || *(unsigned __int8 *)(v30 + 14 + v32) != *(unsigned __int8 *)(v31 + 14 + v32))
                {
                  unsigned int v34 = v32;
                  break;
                }
                if (++v32 == 255)
                {
                  unsigned int v34 = 255;
                  break;
                }
              }
            }
            else
            {
              unsigned int v34 = 0;
              LOWORD(v33) = *(_WORD *)(v30 + 12);
            }
            int v35 = (char *)v16 + v23;
            unsigned __int16 v36 = v33 - v34;
            *((_WORD *)v35 + 4) = v36;
            *((_DWORD *)v35 + 1) = *(_DWORD *)(v30 + 8);
            v35[10] = v34;
            memcpy(v35 + 11, (const void *)(v30 + v34 + 14), v36);
            unsigned int v23 = v23 - v34 + *(unsigned __int16 *)(v30 + 12) + 7;
            ++v29;
          }
          while (v29 != v28);
        }
        else
        {
          unsigned int v23 = 0;
        }
        uint64_t v27 = 10;
      }
      else
      {
        uint64_t v21 = v18;
        if (v20) {
          uint64_t v22 = (int (__cdecl *)(const void *, const void *))nodeScoreCompare;
        }
        else {
          uint64_t v22 = (int (__cdecl *)(const void *, const void *))nodeStringCompare;
        }
        qsort(v17, v18, 8uLL, v22);
        unsigned int v23 = 0;
        if (v18)
        {
          unsigned int v24 = (uint64_t *)v17;
          do
          {
            uint64_t v25 = *v24++;
            int v26 = (char *)v16 + v23;
            *((_WORD *)v26 + 4) = *(_WORD *)(v25 + 12);
            *((_DWORD *)v26 + 1) = *(_DWORD *)(v25 + 8);
            memcpy(v26 + 10, (const void *)(v25 + 14), *(unsigned __int16 *)(v25 + 12));
            v23 += *(unsigned __int16 *)(v25 + 12) + 6;
            --v21;
          }
          while (v21);
        }
        uint64_t v27 = 7;
      }
      uint64_t v4 = __fd;
      uint64_t v5 = a3;
      _DWORD *v16 = v23;
      write(__fd, v16, (v27 + v23) & 0x1FFFFFFFCLL);
      free(v17);
      free(v16);
      do
      {
        int v37 = (void *)*v13;
        free(v13);
        uint64_t v13 = v37;
      }
      while (v37);
      *uint64_t v10 = (v41 - a3) | 2;
      uint64_t v6 = a2;
    }
    else if (v12 == 1)
    {
      serializeLists(a1, v9 & 0xFFFFFFFFFFFFFFFCLL, v5, v4);
    }
    ++v7;
  }
  while (v7 != 256);
}

uint64_t serializeLevelsRanked(_DWORD *a1, uint64_t a2, uint64_t a3, int a4, int a5, int *a6)
{
  int v47 = a4;
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  int32x4_t v10 = 0uLL;
  for (uint64_t i = 5; i != 517; i += 8)
    int32x4_t v10 = vsubq_s32(v10, (int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_s64(*(int64x2_t *)&a1[i]), (int32x4_t)vceqzq_s64(*(int64x2_t *)&a1[i + 4]))));
  unsigned int v12 = vaddvq_s32(v10);
  if (v12 > 0xC7) {
    a5 = 1;
  }
  unsigned int v46 = a5;
  if (a5)
  {
    uint64_t v14 = *a6;
    bzero(v48, 0x400uLL);
    uint64_t v15 = 0;
    *a6 = v14 + 1044;
    do
    {
      uint64_t v16 = *(void *)&a1[2 * v15 + 5];
      if ((v16 & 3) == 1)
      {
        int v17 = *a6;
        if (serializeLevelsRanked(v16 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, 1, 0, a6)) {
          int v18 = v17 | 1;
        }
        else {
          int v18 = v17 | 3;
        }
        v48[v15] = v18;
      }
      else
      {
        v48[v15] = v16;
      }
      ++v15;
    }
    while (v15 != 256);
    v48[256] = a1[4];
    long long v49 = *(_OWORD *)a1;
    off_t v19 = v14 + a2;
    int v20 = (int8x16_t *)v48;
    int v21 = a3;
    size_t v22 = 1044;
  }
  else
  {
    uint64_t v45 = v12;
    size_t v23 = 4 * v12 + 52;
    uint64_t v24 = *a6;
    MEMORY[0x1F4188790](a1);
    int v26 = (int8x16_t *)((char *)&v42 - v25);
    bzero((char *)&v42 - v25, v23);
    uint64_t v35 = 0;
    int v36 = 0;
    uint64_t v43 = v24;
    size_t v44 = v23;
    *a6 = v24 + v23;
    do
    {
      uint64_t v37 = *(void *)&a1[2 * v35 + 5];
      if (v37)
      {
        v26->i64[v35 >> 6] |= 1 << v35;
        double v38 = &v26->i8[4 * v36];
        if ((v37 & 3) == 1)
        {
          int v39 = *a6;
          uint64_t v27 = serializeLevelsRanked(v37 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, 1, 0, a6);
          if (v27) {
            int v40 = v39 | 1;
          }
          else {
            int v40 = v39 | 3;
          }
          *((_DWORD *)v38 + 13) = v40;
        }
        else
        {
          *((_DWORD *)v38 + 13) = v37;
        }
        ++v36;
      }
      ++v35;
    }
    while (v35 != 256);
    if (vaddvq_s32(vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(*v26)))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(v26[1])))))) != v45)serializeLevelsRanked(v27, v28, v29, v30, v31, v32, v33, v34); {
    v26[3].i32[0] = a1[4];
    }
    v26[2] = *(int8x16_t *)a1;
    size_t v22 = v44;
    off_t v19 = v43 + a2;
    int v21 = a3;
    int v20 = v26;
  }
  pwrite(v21, v20, v22, v19);
  if (v47) {
    free(a1);
  }
  return v46;
}

uint64_t serializeLevels(_DWORD *a1, uint64_t a2, uint64_t a3, int a4, int a5, int *a6)
{
  int v47 = a4;
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  int32x4_t v10 = 0uLL;
  for (uint64_t i = 1; i != 513; i += 8)
    int32x4_t v10 = vsubq_s32(v10, (int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_s64(*(int64x2_t *)&a1[i]), (int32x4_t)vceqzq_s64(*(int64x2_t *)&a1[i + 4]))));
  unsigned int v12 = vaddvq_s32(v10);
  if (v12 > 0xC7) {
    a5 = 1;
  }
  unsigned int v46 = a5;
  if (a5)
  {
    uint64_t v14 = *a6;
    bzero(v48, 0x400uLL);
    uint64_t v15 = 0;
    *a6 = v14 + 1028;
    do
    {
      uint64_t v16 = *(void *)&a1[2 * v15 + 1];
      if ((v16 & 3) == 1)
      {
        int v17 = *a6;
        if (serializeLevels(v16 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, 1, 0, a6)) {
          int v18 = v17 | 1;
        }
        else {
          int v18 = v17 | 3;
        }
        v48[v15] = v18;
      }
      else
      {
        v48[v15] = v16;
      }
      ++v15;
    }
    while (v15 != 256);
    v48[256] = *a1;
    off_t v19 = v14 + a2;
    int v20 = (int8x16_t *)v48;
    int v21 = a3;
    size_t v22 = 1028;
  }
  else
  {
    uint64_t v45 = v12;
    size_t v23 = 4 * v12 + 36;
    uint64_t v24 = *a6;
    MEMORY[0x1F4188790](a1);
    int v26 = (int8x16_t *)((char *)&v42 - v25);
    bzero((char *)&v42 - v25, v23);
    uint64_t v35 = 0;
    int v36 = 0;
    uint64_t v43 = v24;
    size_t v44 = v23;
    *a6 = v24 + v23;
    do
    {
      uint64_t v37 = *(void *)&a1[2 * v35 + 1];
      if (v37)
      {
        v26->i64[v35 >> 6] |= 1 << v35;
        double v38 = &v26->i8[4 * v36];
        if ((v37 & 3) == 1)
        {
          int v39 = *a6;
          uint64_t v27 = serializeLevels(v37 & 0xFFFFFFFFFFFFFFFCLL, a2, a3, 1, 0, a6);
          if (v27) {
            int v40 = v39 | 1;
          }
          else {
            int v40 = v39 | 3;
          }
          *((_DWORD *)v38 + 9) = v40;
        }
        else
        {
          *((_DWORD *)v38 + 9) = v37;
        }
        ++v36;
      }
      ++v35;
    }
    while (v35 != 256);
    if (vaddvq_s32(vuzp1q_s32((int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(*v26)))), (int32x4_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(v26[1])))))) != v45)serializeLevels(v27, v28, v29, v30, v31, v32, v33, v34); {
    v26[2].i32[0] = *a1;
    }
    size_t v22 = v44;
    off_t v19 = v43 + a2;
    int v21 = a3;
    int v20 = v26;
  }
  pwrite(v21, v20, v22, v19);
  if (v47) {
    free(a1);
  }
  return v46;
}

void SILanguageModelShrinkLanguageGuessers()
{
  if (sLanguageIdentifierPool) {
    SIResourcePools::shrinkAll((SIResourcePools *)sLanguageIdentifierPool);
  }
}

uint64_t SIIsLanguagePreferred(uint64_t a1)
{
  uint64_t v5 = 0;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x2000000000;
  char v8 = 0;
  if (getAvailableLanguagesQueue(void)::onceAvailableLanguagesQueueToken != -1) {
    dispatch_once(&getAvailableLanguagesQueue(void)::onceAvailableLanguagesQueueToken, &__block_literal_global_73);
  }
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  int v4[2] = __SIIsLanguagePreferred_block_invoke;
  void v4[3] = &unk_1E63498B8;
  v4[4] = &v5;
  v4[5] = a1;
  dispatch_sync((dispatch_queue_t)getAvailableLanguagesQueue(void)::gAvailableLanguagesQueue, v4);
  uint64_t v2 = *((unsigned __int8 *)v6 + 24);
  _Block_object_dispose(&v5, 8);
  return v2;
}

uint64_t __SIIsLanguagePreferred_block_invoke(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t result = gAvailableLanguages;
  if (gAvailableLanguages)
  {
    *(void *)buffer = 0;
    uint64_t v11 = 0;
    uint64_t result = CFArrayGetCount((CFArrayRef)gAvailableLanguages);
    if ((int)result >= 1)
    {
      uint64_t v3 = result;
      int v4 = strlen(*(const char **)(a1 + 40));
      CFIndex v5 = 0;
      if (v4 >= 8) {
        int v6 = 8;
      }
      else {
        int v6 = v4;
      }
      size_t v7 = v6;
      if (v3 <= 1) {
        uint64_t v8 = 1;
      }
      else {
        uint64_t v8 = v3;
      }
      while (1)
      {
        uint64_t result = (uint64_t)CFArrayGetValueAtIndex((CFArrayRef)gAvailableLanguages, v5);
        if (result)
        {
          CFStringRef v9 = (const __CFString *)result;
          v13.length = CFStringGetLength((CFStringRef)result);
          v13.locatiouint64_t n = 0;
          buffer[(int)CFStringGetBytes(v9, v13, 0x8000100u, 0x3Fu, 0, buffer, 16, 0)] = 0;
          uint64_t result = strncmp((const char *)buffer, *(const char **)(a1 + 40), v7);
          if (!result) {
            break;
          }
        }
        if (v8 == ++v5) {
          return result;
        }
      }
      *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
    }
  }
  return result;
}

uint64_t SILanguageModelCreateWithOptions(CFURLRef url, CFDictionaryRef theDict)
{
  values[1] = *(void **)MEMORY[0x1E4F143B8];
  if (url)
  {
    if (!CFURLResourceIsReachable(url, 0)) {
      return 0;
    }
    int v4 = (const void *)*MEMORY[0x1E4F1D678];
    values[0] = *(void **)MEMORY[0x1E4F1D678];
    CFArrayRef v5 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)values, 1, MEMORY[0x1E4F1D510]);
    if (!v5) {
      return 0;
    }
    CFArrayRef v6 = v5;
    CFDictionaryRef v7 = CFURLCopyResourcePropertiesForKeys(url, v5, 0);
    if (!v7
      || (CFDictionaryRef v8 = v7,
          CFStringRef v9 = (void *)CFDictionaryGetValue(v7, v4),
          int32x4_t v10 = (void *)*MEMORY[0x1E4F1CFD0],
          CFRelease(v8),
          v9 != v10))
    {
      CFRelease(v6);
      return 0;
    }
    CFRelease(v6);
  }
  else
  {
    CFStringRef v9 = (void *)*MEMORY[0x1E4F1CFD0];
  }
  uint64_t v56 = v9;
  values[0] = 0;
  uint64_t v12 = (void *)*MEMORY[0x1E4F1CFC8];
  uint64_t v54 = v12;
  uint64_t v55 = v12;
  unsigned int v52 = v9;
  char v53 = v9;
  uint64_t v50 = v9;
  char v51 = v9;
  unsigned int v48 = v12;
  uint64_t v49 = v12;
  unsigned int v46 = v12;
  int v47 = v9;
  size_t v44 = v12;
  uint64_t v45 = v12;
  CFTypeRef cf = 0;
  value = 0;
  CFRange v13 = v12;
  if (theDict)
  {
    CFDictionaryGetValueIfPresent(theDict, (const void *)kSILanguageModelOptionLocale, (const void **)&value);
    CFDictionaryGetValueIfPresent(theDict, (const void *)kSILanguageModelOptionPreferredLanguages, &cf);
    CFDictionaryGetValueIfPresent(theDict, (const void *)kSILanguageModelOptionBundleIdentifier, (const void **)values);
    CFDictionaryGetValueIfPresent(theDict, (const void *)kSILanguageModelOptionCacheResults, (const void **)&v56);
    CFDictionaryGetValueIfPresent(theDict, (const void *)kSILanguageModelOptionCacheResourcePaths, (const void **)&v55);
    CFDictionaryGetValueIfPresent(theDict, (const void *)kSILanguageModelOptionReducedResources, (const void **)&v48);
    CFDictionaryGetValueIfPresent(theDict, (const void *)kSILanguageModelOptionNoTimeout, (const void **)&v44);
    CFDictionaryGetValueIfPresent(theDict, (const void *)kSILanguageModelOptionEnableAdaptation, (const void **)&v54);
    CFDictionaryGetValueIfPresent(theDict, (const void *)kSILanguageModelOptionThresholdKeyphrases, (const void **)&v49);
    CFDictionaryGetValueIfPresent(theDict, (const void *)kSILanguageModelOptionNormalizeText, (const void **)&v53);
    CFDictionaryGetValueIfPresent(theDict, (const void *)kSILanguageModelOptionFilterByLexicon, (const void **)&v52);
    CFDictionaryGetValueIfPresent(theDict, (const void *)kSILanguageModelOptionFilterByBlocklist, (const void **)&v51);
    CFDictionaryGetValueIfPresent(theDict, (const void *)kSILanguageModelOptionFilterByAllowlist, (const void **)&v50);
    CFDictionaryGetValueIfPresent(theDict, (const void *)kSILanguageModelOptionEnableTokenizer, (const void **)&v45);
    CFDictionaryGetValueIfPresent(theDict, (const void *)kSILanguageModelOptionEnableLanguageModel, (const void **)&v47);
    CFDictionaryGetValueIfPresent(theDict, (const void *)kSILanguageModelOptionEnableLexicon, (const void **)&v46);
    CFRange v13 = v48;
  }
  if (v13 == v9)
  {
    unsigned int v48 = v12;
    if (MGGetBoolAnswer())
    {
      CFRange v13 = v48;
    }
    else
    {
      unsigned int v48 = v9;
      CFRange v13 = v9;
    }
  }
  int v14 = v56 == v9;
  if (v55 == v9) {
    v14 |= 0x800u;
  }
  if (v13 == v9) {
    int v15 = v14 | 0x400;
  }
  else {
    int v15 = v14;
  }
  if (v44 == v9) {
    v15 |= 0x1000u;
  }
  if (v54 == v9) {
    v15 |= 2u;
  }
  if (v53 == v9) {
    v15 |= 4u;
  }
  if (v49 == v9) {
    v15 |= 0x40u;
  }
  if (v52 == v9) {
    v15 |= 8u;
  }
  if (v51 == v9) {
    v15 |= 0x10u;
  }
  if (v50 == v9) {
    v15 |= 0x20u;
  }
  if (v47 == v9) {
    v15 |= 0x80u;
  }
  if (v46 == v9) {
    v15 |= 0x100u;
  }
  if (v45 == v9) {
    v15 |= 0x200u;
  }
  if (value) {
    int v16 = v15;
  }
  else {
    int v16 = v15 | 0x2000;
  }
  CFAllocatorRef v17 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableStringRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (value)
  {
    CFStringRef v19 = (const __CFString *)CFLocaleGetValue((CFLocaleRef)value, (CFLocaleKey)*MEMORY[0x1E4F1D1F0]);
    if (v19) {
      CFStringRef Copy = CFStringCreateCopy(v17, v19);
    }
    else {
      CFStringRef Copy = 0;
    }
    int LanguageID = SILanguagesGetLanguageID((const __CFLocale *)value);
    if (LanguageID >= 2)
    {
      Language = SILanguagesGetLanguage(LanguageID);
      if (Language) {
        CFArrayAppendValue(Mutable, Language);
      }
    }
  }
  else
  {
    CFLocaleRef v21 = CFLocaleCopyCurrent();
    if (v21)
    {
      CFLocaleRef v22 = v21;
      CFStringRef v23 = (const __CFString *)CFLocaleGetValue(v21, (CFLocaleKey)*MEMORY[0x1E4F1D1F0]);
      if (v23) {
        CFStringRef Copy = CFStringCreateCopy(v17, v23);
      }
      else {
        CFStringRef Copy = 0;
      }
      CFRelease(v22);
    }
    else
    {
      CFStringRef Copy = 0;
    }
    if (cf) {
      CFArrayRef v26 = (const __CFArray *)CFRetain(cf);
    }
    else {
      CFArrayRef v26 = copyAvailableUserLanguages();
    }
    CFArrayRef v27 = v26;
    if (v26)
    {
      CFIndex Count = CFArrayGetCount(v26);
      if (Count >= 1)
      {
        CFIndex v29 = Count;
        for (CFIndex i = 0; i != v29; ++i)
        {
          CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v27, i);
          CFLocaleRef v32 = CFLocaleCreate(v17, ValueAtIndex);
          if (v32)
          {
            CFLocaleRef v33 = v32;
            int v34 = SILanguagesGetLanguageID(v32);
            if (v34 >= 2)
            {
              uint64_t v35 = SILanguagesGetLanguage(v34);
              if (v35) {
                CFArrayAppendValue(Mutable, v35);
              }
            }
            CFRelease(v33);
          }
        }
      }
      CFRelease(v27);
    }
  }
  if (!Copy) {
    goto LABEL_73;
  }
  if (CFStringsAreEqual(Copy, @"001"))
  {
    CFRelease(Copy);
LABEL_73:
    CFStringRef Copy = CFStringCreateCopy(v17, @"US");
  }
  int v36 = malloc_type_malloc(0x28uLL, 0x1020040E5841EF2uLL);
  uint64_t v11 = (uint64_t)v36;
  if (v36)
  {
    v36[2] = 0;
    *((_DWORD *)v36 + 6) = v16;
    v36[4] = SILanguagesGetRegionID(Copy);
    atomic_store(0, (unsigned int *)v11);
    uint64_t v37 = CFDictionaryCreateMutable(v17, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFDictionaryRef v38 = v37;
    if (values[0]) {
      CFDictionarySetValue(v37, @"bundleIdentifier", values[0]);
    }
    *(void *)(v11 + 8) = SILocalizationCreateWithOptions(v38);
    CFRelease(v38);
    updateAvailableLanguages(v11, Mutable);
    if (value)
    {
      signed int v39 = SILanguagesGetLanguageID((const __CFLocale *)value);
      *(void *)(v11 + 16) = SILanguageResourcesCreate(v39, *(void *)(v11 + 32), *(_DWORD *)(v11 + 24), values[0], url);
    }
    else if (!cf)
    {
      LocalCenter = CFNotificationCenterGetLocalCenter();
      CFNotificationCenterAddObserver(LocalCenter, (const void *)v11, (CFNotificationCallback)localeChangeCallback, (CFStringRef)*MEMORY[0x1E4F1D200], 0, CFNotificationSuspensionBehaviorDeliverImmediately);
    }
    atomic_fetch_add((atomic_uint *volatile)v11, 1u);
  }
  if (Copy) {
    CFRelease(Copy);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v11;
}

__CFArray *copyAvailableUserLanguages(void)
{
  CFAllocatorRef v0 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableStringRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  CFArrayRef v2 = CFLocaleCopyPreferredLanguages();
  if (v2)
  {
    CFArrayRef v3 = v2;
    CFIndex Count = CFArrayGetCount(v2);
    if (Count >= 1)
    {
      CFIndex v5 = Count;
      for (CFIndex i = 0; i != v5; ++i)
      {
        CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v3, i);
        CFLocaleRef v8 = CFLocaleCreate(v0, ValueAtIndex);
        if (v8)
        {
          CFLocaleRef v9 = v8;
          int LanguageID = SILanguagesGetLanguageID(v8);
          if (LanguageID >= 2)
          {
            Language = SILanguagesGetLanguage(LanguageID);
            CFArrayAppendValue(Mutable, Language);
          }
          CFRelease(v9);
        }
      }
    }
    CFRelease(v3);
  }
  return Mutable;
}

void updateAvailableLanguages(uint64_t a1, const __CFArray *a2)
{
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableStringRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  CFArrayRef v6 = CFSetCreateMutable(v4, 0, MEMORY[0x1E4F1D548]);
  CFIndex Count = CFArrayGetCount(a2);
  if (Count >= 1)
  {
    CFIndex v8 = Count;
    for (CFIndex i = 0; i != v8; ++i)
    {
      CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(a2, i);
      if (!CFSetContainsValue(v6, ValueAtIndex))
      {
        CFSetAddValue(v6, ValueAtIndex);
        if ((*(unsigned char *)(a1 + 25) & 0x20) != 0)
        {
          int LanguageIDForIdentifier = SILanguagesGetLanguageIDForIdentifier(ValueAtIndex);
          int v16 = 0;
          SIRetainLanguageResources(LanguageIDForIdentifier, *(void *)(a1 + 32), *(_DWORD *)(a1 + 24), &v16);
          if (v16)
          {
            uint64_t v12 = (os_unfair_lock_s *)SIResourceLock::get(v16);
            if (v12)
            {
              CFRange v13 = v12 + 16;
              os_unfair_lock_lock(v12 + 16);
              os_unfair_lock_unlock(v13);
            }
            int v14 = v16;
            int v16 = 0;
            if (v14)
            {
              SIResourceLock::~SIResourceLock(v14);
              MEMORY[0x1C1883920]();
            }
          }
        }
        CFArrayAppendValue(Mutable, ValueAtIndex);
      }
    }
  }
  CFRelease(v6);
  if (getAvailableLanguagesQueue(void)::onceAvailableLanguagesQueueToken != -1) {
    dispatch_once(&getAvailableLanguagesQueue(void)::onceAvailableLanguagesQueueToken, &__block_literal_global_73);
  }
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 0x40000000;
  CFIndex v15[2] = ___ZL24updateAvailableLanguagesP14_LanguageModelPK9__CFArray_block_invoke;
  _DWORD v15[3] = &__block_descriptor_tmp_75;
  v15[4] = Mutable;
  dispatch_sync((dispatch_queue_t)getAvailableLanguagesQueue(void)::gAvailableLanguagesQueue, v15);
}

void sub_1BDB00F08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::unique_ptr<SIResourceLock>::reset[abi:ne180100]((SIResourceLock **)va, 0);
  _Unwind_Resume(a1);
}

uint64_t *SILanguageResourcesCreate(signed int a1, CFIndex a2, int a3, void *a4, void *a5)
{
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  uint64_t Locale = SILanguagesGetLocale(a1);
  if (!Locale) {
    return 0;
  }
  uint64_t v11 = Locale;
  uint64_t v12 = (uint64_t *)malloc_type_malloc(0x48uLL, 0x10E004020B22391uLL);
  if (v12)
  {
    double Current = CFAbsoluteTimeGetCurrent();
    value = a5;
    if (logger(void)::token != -1) {
      dispatch_once(&logger(void)::token, &__block_literal_global_102);
    }
    int v14 = logger(void)::log;
    if (os_log_type_enabled((os_log_t)logger(void)::log, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 67109120;
      signed int v60 = a1;
      _os_log_impl(&dword_1BDAD0000, v14, OS_LOG_TYPE_INFO, "Creating lm resources for language ID %d", buf, 8u);
      if (logger(void)::token != -1) {
        dispatch_once(&logger(void)::token, &__block_literal_global_102);
      }
    }
    os_signpost_id_t v15 = os_signpost_id_make_with_pointer((os_log_t)logger(void)::log, v12);
    if (logger(void)::token != -1)
    {
      os_signpost_id_t v51 = v15;
      dispatch_once(&logger(void)::token, &__block_literal_global_102);
      os_signpost_id_t v15 = v51;
    }
    CFLocaleRef v55 = (const __CFLocale *)v11;
    os_signpost_id_t spid = v15;
    unint64_t v56 = v15 - 1;
    uint64_t v57 = a4;
    if (v15 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      int v16 = logger(void)::log;
      if (os_signpost_enabled((os_log_t)logger(void)::log))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl(&dword_1BDAD0000, v16, OS_SIGNPOST_INTERVAL_BEGIN, spid, "LangResources", "start creating lm resources", buf, 2u);
      }
    }
    void v12[4] = 0;
    *(_OWORD *)uint64_t v12 = 0u;
    *((_OWORD *)v12 + 1) = 0u;
    *((_DWORD *)v12 + 10) = a1;
    *((_DWORD *)v12 + 14) = a3;
    *((unsigned char *)v12 + 60) = 1;
    *((_DWORD *)v12 + 16) = 0;
    CFLocaleRef v17 = SILanguagesCopyLocaleIdentifier(a1, a2);
    CFAllocatorRef v18 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    if (v17)
    {
      CFLocaleRef v19 = v17;
      CFLocaleRef v20 = CFLocaleCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (CFLocaleIdentifier)v17);
      CFRelease(v19);
    }
    else
    {
      CFLocaleRef v20 = 0;
    }
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v18, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFMutableArrayRef v22 = CFArrayCreateMutable(v18, 0, MEMORY[0x1E4F1D510]);
    CFMutableArrayRef v23 = v22;
    if (!Mutable || !v22)
    {
LABEL_48:
      if (a3)
      {
        CFDictionaryRef OptionsDictionary = SIGeneralTrieCreateOptionsDictionary(1, 64, 0, 0, 0);
        v12[1] = (uint64_t)SIGeneralTrieCreateMutableWithDictionary(OptionsDictionary);
        if (OptionsDictionary) {
          CFRelease(OptionsDictionary);
        }
      }
      else
      {
        v12[1] = 0;
      }
      if (v57 || (a3 & 0x1000) != 0)
      {
        uint64_t v37 = CFDictionaryCreateMutable(v18, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        int v34 = v37;
        if ((a3 & 0x1000) != 0) {
          CFDictionarySetValue(v37, @"forceLoad", (const void *)*MEMORY[0x1E4F1CFD0]);
        }
        CFLocaleRef v36 = v55;
        unint64_t v35 = v56;
        if (v57) {
          CFDictionarySetValue(v34, @"bundleIdentifier", v57);
        }
      }
      else
      {
        int v34 = 0;
        CFLocaleRef v36 = v55;
        unint64_t v35 = v56;
      }
      CFDictionaryRef v38 = SILexiconCacheCreateWithOptions(v34);
      _DWORD v12[2] = (uint64_t)v38;
      SILexiconCacheLoad((uint64_t)v38, v36, (uint64_t)&__block_literal_global_90);
      if (v34) {
        CFRelease(v34);
      }
      double v58 = 0.0;
      if (a1 > 18)
      {
        if (a1 == 19)
        {
          signed int v39 = "di";
          goto LABEL_70;
        }
        if (a1 != 29)
        {
LABEL_71:
          if (Mutable) {
            CFRelease(Mutable);
          }
          if (v23) {
            CFRelease(v23);
          }
          if (logger(void)::token != -1) {
            dispatch_once(&logger(void)::token, &__block_literal_global_102);
          }
          int v41 = logger(void)::log;
          if (os_log_type_enabled((os_log_t)logger(void)::log, OS_LOG_TYPE_INFO))
          {
            CFAbsoluteTime v42 = CFAbsoluteTimeGetCurrent();
            *(_DWORD *)buf = 67109376;
            signed int v60 = a1;
            __int16 v61 = 2048;
            double v62 = v42 - Current;
            _os_log_impl(&dword_1BDAD0000, v41, OS_LOG_TYPE_INFO, "Created lm resources for language ID %d <%f s>", buf, 0x12u);
            if (logger(void)::token != -1) {
              dispatch_once(&logger(void)::token, &__block_literal_global_102);
            }
          }
          if (v35 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            uint64_t v43 = logger(void)::log;
            if (os_signpost_enabled((os_log_t)logger(void)::log))
            {
              *(_WORD *)buf = 0;
              _os_signpost_emit_with_name_impl(&dword_1BDAD0000, v43, OS_SIGNPOST_INTERVAL_END, spid, "LangResources", (const char *)&unk_1BDB2739A, buf, 2u);
            }
          }
          return v12;
        }
      }
      else
      {
        if (a1 == 10)
        {
          signed int v39 = "of";
          goto LABEL_70;
        }
        if (a1 != 12) {
          goto LABEL_71;
        }
      }
      signed int v39 = "de";
LABEL_70:
      unsigned int TokenID = getTokenID((uint64_t)v12, (UInt8 *)v39, 2, 0, &v58);
      SILexiconCacheSetTokenID(v12[2], v36, v39, 2u, TokenID, 2, v58);
      goto LABEL_71;
    }
    CFLocaleRef v52 = v20;
    if ((a3 & 0x800) != 0)
    {
      CFArrayRef v24 = (const __CFArray *)SIGetResourceRootURLsForLocaleOfType((uint64_t)v20, @"LanguageModel");
      if (v24)
      {
        CFArrayRef v25 = v24;
        CFIndex Count = CFArrayGetCount(v24);
        if (Count >= 1)
        {
          CFIndex v27 = Count;
          for (CFIndex i = 0; i != v27; ++i)
          {
            CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(v25, i);
            v64.length = CFArrayGetCount(v23);
            v64.locatiouint64_t n = 0;
            if (!CFArrayContainsValue(v23, v64, ValueAtIndex)) {
              CFArrayAppendValue(v23, ValueAtIndex);
            }
          }
        }
      }
    }
    BOOL v30 = (a1 & 0xFFFFFFFE) == 4 || a1 == 54;
    if (a1 == 20) {
      BOOL v30 = 1;
    }
    *((unsigned char *)v12 + 61) = v30;
    if (a1 <= 0x36 && ((1 << a1) & 0x40000000000030) != 0)
    {
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F72370], @"Chinese.lm");
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F723F0], (const void *)*MEMORY[0x1E4F1CFC8]);
    }
    else
    {
      uint64_t v31 = value;
      if (a1 != 20 && (a3 & 0x400) == 0) {
        goto LABEL_35;
      }
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F723B0], (const void *)*MEMORY[0x1E4F1CFD0]);
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F723F0], (const void *)*MEMORY[0x1E4F1CFC8]);
      if ((a3 & 0x800) != 0)
      {
        CFArrayRef v45 = (const __CFArray *)SIGetResourceRootURLsForLocaleOfType((uint64_t)v52, @"SearchQueryLanguageModel");
        if (v45)
        {
          CFArrayRef v46 = v45;
          CFIndex v47 = CFArrayGetCount(v45);
          if (v47 >= 1)
          {
            CFIndex v48 = v47;
            for (CFIndex j = 0; j != v48; ++j)
            {
              uint64_t v50 = CFArrayGetValueAtIndex(v46, j);
              v65.length = CFArrayGetCount(v23);
              v65.locatiouint64_t n = 0;
              if (!CFArrayContainsValue(v23, v65, v50)) {
                CFArrayAppendValue(v23, v50);
              }
            }
          }
        }
      }
      *((unsigned char *)v12 + 60) = 0;
    }
    uint64_t v31 = value;
LABEL_35:
    if ((a3 & 2) != 0 && v31)
    {
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F72378], v31);
      CFLocaleRef v32 = (const void *)*MEMORY[0x1E4F1CFD0];
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F723F8], (const void *)*MEMORY[0x1E4F1CFD0]);
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F72358], v32);
    }
    if ((a3 & 0x80) != 0)
    {
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F723C8], v52);
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F723D8], (const void *)*MEMORY[0x1E4F1CFD0]);
      if ((a3 & 0x800) != 0) {
        CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F72380], v23);
      }
      v12[3] = LMLanguageModelCreate();
      CFDictionaryRemoveAllValues(Mutable);
    }
    if ((a3 & 0x100) != 0 || v12[3])
    {
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F72458], v52);
      if ((a3 & 0x800) != 0) {
        CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F72380], v23);
      }
      void v12[4] = LXLexiconCreate();
      CFDictionaryRemoveAllValues(Mutable);
    }
    CFArrayRemoveAllValues(v23);
    goto LABEL_48;
  }
  return v12;
}

void localeChangeCallback(__CFNotificationCenter *a1, uint64_t a2, const __CFString *a3, const void *a4, const __CFDictionary *a5)
{
  if (a2)
  {
    CFArrayRef v6 = copyAvailableUserLanguages();
    updateAvailableLanguages(a2, v6);
    if (v6)
    {
      CFRelease(v6);
    }
  }
}

atomic_uint *SILanguageModelRetain(atomic_uint *result)
{
  if (result) {
    atomic_fetch_add(result, 1u);
  }
  return result;
}

void SILanguageModelRelease(void *a1)
{
  if (a1 && atomic_fetch_add((atomic_uint *volatile)a1, 0xFFFFFFFF) == 1)
  {
    if (logger(void)::token != -1) {
      dispatch_once(&logger(void)::token, &__block_literal_global_102);
    }
    CFArrayRef v2 = logger(void)::log;
    if (os_log_type_enabled((os_log_t)logger(void)::log, OS_LOG_TYPE_DEBUG)) {
      SILanguageModelRelease_cold_1(v2);
    }
    if (sLanguageIdentifierPool) {
      SIResourcePools::compactAll((SIResourcePools *)sLanguageIdentifierPool);
    }
    CFArrayRef v3 = (void *)a1[1];
    if (v3) {
      SILocalizationRelease(v3);
    }
    CFAllocatorRef v4 = (void *)a1[2];
    if (v4) {
      SILanguageResourcesRelease(v4);
    }
    free(a1);
  }
}

uint64_t SILanguageModelGetDefaultModel()
{
  if (SILanguageModelGetDefaultModel::onceToken != -1) {
    dispatch_once(&SILanguageModelGetDefaultModel::onceToken, &__block_literal_global_9);
  }
  return SILanguageModelGetDefaultModel::model;
}

uint64_t __SILanguageModelGetDefaultModel_block_invoke()
{
  uint64_t result = SILanguageModelCreateWithOptions(0, 0);
  SILanguageModelGetDefaultModel::model = result;
  return result;
}

uint64_t SILanguageModelGetDefaultModelWithContext(uint64_t a1)
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __SILanguageModelGetDefaultModelWithContext_block_invoke;
  block[3] = &__block_descriptor_tmp_57;
  void block[4] = a1;
  if (SILanguageModelGetDefaultModelWithContext::onceToken != -1) {
    dispatch_once(&SILanguageModelGetDefaultModelWithContext::onceToken, block);
  }
  return SILanguageModelGetDefaultModelWithContext::model;
}

uint64_t __SILanguageModelGetDefaultModelWithContext_block_invoke(uint64_t a1)
{
  uint64_t result = SILanguageModelCreateWithOptions(0, *(CFDictionaryRef *)(a1 + 32));
  SILanguageModelGetDefaultModelWithContext::model = result;
  return result;
}

void *SILanguageModelPreheat(uint64_t a1, const __CFLocale *a2, unint64_t a3, int a4)
{
  void v13[4] = *MEMORY[0x1E4F143B8];
  int LanguageID = SILanguagesGetLanguageID(a2);
  uint64_t v8 = *(void *)(a1 + 32);
  int v9 = *(_DWORD *)(a1 + 24);
  if (getResourcePools(void)::t != -1) {
    dispatch_once(&getResourcePools(void)::t, &__block_literal_global_106);
  }
  uint64_t v10 = getResourcePools(void)::pools;
  uint64_t v11 = operator new(0x20uLL);
  *(void *)uint64_t v11 = &unk_1F181DC90;
  v11[2] = LanguageID;
  *((void *)v11 + 2) = v8;
  v11[6] = v9;
  void v13[3] = v11;
  SIResourcePools::populate(v10, LanguageID, a3, a4, (uint64_t)v13);
  return std::__function::__value_func<void * ()(void)>::~__value_func[abi:ne180100](v13);
}

void sub_1BDB01A6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void * ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void SILanguageModelReserve()
{
}

void SILanguageModelUnreserve()
{
}

__CFString *SILanguageModelGetLanguageGuessUsingMontrealInString()
{
  CFAllocatorRef v4 = 0;
  getLanguageIdentifier(&v4);
  if (!v4) {
    return 0;
  }
  if (SIResourceLock::get(v4)
    && (NLLanguageIdentifierReset(),
        NLLanguageIdentifierConsumeString(),
        int TopHypothesis = NLLanguageIdentifierGetTopHypothesis(),
        TopHypothesis <= 58))
  {
    Language = SILanguagesGetLanguage(TopHypothesis);
  }
  else
  {
    Language = 0;
  }
  CFArrayRef v2 = v4;
  CFAllocatorRef v4 = 0;
  if (v2)
  {
    SIResourceLock::~SIResourceLock(v2);
    MEMORY[0x1C1883920]();
  }
  return Language;
}

void sub_1BDB01B6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<SIResourceLock>::reset[abi:ne180100]((SIResourceLock **)va, 0);
  _Unwind_Resume(a1);
}

void *getLanguageIdentifier@<X0>(void *a1@<X8>)
{
  v3[4] = *MEMORY[0x1E4F143B8];
  if (getLanguageIdentifier(void)::onceToken != -1) {
    dispatch_once(&getLanguageIdentifier(void)::onceToken, &__block_literal_global_114);
  }
  v3[0] = &unk_1F181DC00;
  v3[3] = v3;
  SIResourcePools::acquireResource(sLanguageIdentifierPool, 0, (uint64_t)v3, 0, a1);
  return std::__function::__value_func<void * ()(void)>::~__value_func[abi:ne180100](v3);
}

void sub_1BDB01C4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void * ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

__CFString *SILanguageModelGetLanguageGuessUsingMontreal()
{
  CFAllocatorRef v4 = 0;
  getLanguageIdentifier(&v4);
  if (!v4) {
    return 0;
  }
  if (SIResourceLock::get(v4)
    && (NLLanguageIdentifierReset(),
        NLLanguageIdentifierConsumeCharacters(),
        int TopHypothesis = NLLanguageIdentifierGetTopHypothesis(),
        TopHypothesis <= 58))
  {
    Language = SILanguagesGetLanguage(TopHypothesis);
  }
  else
  {
    Language = 0;
  }
  CFArrayRef v2 = v4;
  CFAllocatorRef v4 = 0;
  if (v2)
  {
    SIResourceLock::~SIResourceLock(v2);
    MEMORY[0x1C1883920]();
  }
  return Language;
}

void sub_1BDB01D1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<SIResourceLock>::reset[abi:ne180100]((SIResourceLock **)va, 0);
  _Unwind_Resume(a1);
}

uint64_t SILanguageModelCopyLocale(uint64_t result, uint64_t a2, const __CFLocale *ValidatedLocaleFromTokens, char a4)
{
  if (result)
  {
    uint64_t v7 = result;
    if (!isValidTokenizedString((void *)a2)) {
      return 0;
    }
    uint64_t v52 = 0;
    char v53 = &v52;
    uint64_t v54 = 0x2000000000;
    uint64_t v55 = 0;
    if (getAvailableLanguagesQueue(void)::onceAvailableLanguagesQueueToken != -1) {
      dispatch_once(&getAvailableLanguagesQueue(void)::onceAvailableLanguagesQueueToken, &__block_literal_global_73);
    }
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = ___ZL22copyAvailableLanguagesv_block_invoke;
    block[3] = &unk_1E6349AC8;
    void block[4] = &v52;
    dispatch_sync((dispatch_queue_t)getAvailableLanguagesQueue(void)::gAvailableLanguagesQueue, block);
    CFArrayRef v8 = (const __CFArray *)v53[3];
    _Block_object_dispose(&v52, 8);
    int v9 = (const __CFAllocator **)MEMORY[0x1E4F1CF80];
    if (ValidatedLocaleFromTokens)
    {
      CFStringRef Value = (const __CFString *)CFLocaleGetValue(ValidatedLocaleFromTokens, (CFLocaleKey)*MEMORY[0x1E4F1D218]);
      CFTypeRef v11 = CFLocaleGetValue(ValidatedLocaleFromTokens, (CFLocaleKey)*MEMORY[0x1E4F1D220]);
      CFAllocatorRef v12 = *v9;
      CFStringRef prefix = Value;
      if (v11)
      {
        CFStringRef v13 = CFStringCreateWithFormat(v12, 0, @"%@-%@", Value, v11);
        if (v13)
        {
          CFStringRef v14 = v13;
          CFLocaleRef v15 = CFLocaleCreate(v12, v13);
          CFRelease(v14);
        }
        else
        {
          CFLocaleRef v15 = 0;
        }
      }
      else
      {
        CFLocaleRef v15 = CFLocaleCreate(v12, Value);
      }
    }
    else
    {
      CFStringRef prefix = 0;
      CFLocaleRef v15 = 0;
      CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    }
    if ((uint64_t)(*(void *)(*(void *)(a2 + 24) + 16 * *(void *)(a2 + 40) - 8)
                 + *(void *)(*(void *)(a2 + 24) + 16 * *(void *)(a2 + 40) - 16)
                 - **(void **)(a2 + 24)) >= 300)
      CFIndex v16 = 300;
    else {
      CFIndex v16 = *(void *)(*(void *)(a2 + 24) + 16 * *(void *)(a2 + 40) - 8)
    }
          + *(void *)(*(void *)(a2 + 24) + 16 * *(void *)(a2 + 40) - 16)
          - **(void **)(a2 + 24);
    CFStringRef v17 = CFStringCreateWithCharactersNoCopy(v12, *(const UniChar **)(a2 + 16), v16, (CFAllocatorRef)*MEMORY[0x1E4F1CFA0]);
    if (!v17)
    {
      ValidatedLocaleFromTokens = 0;
      if (!v15)
      {
LABEL_28:
        if (v8) {
          CFRelease(v8);
        }
        if (ValidatedLocaleFromTokens) {
          return MEMORY[0x1C1883010](v12, ValidatedLocaleFromTokens);
        }
        return 0;
      }
LABEL_27:
      CFRelease(v15);
      goto LABEL_28;
    }
    CFStringRef v18 = v17;
    CFArrayRef theArray = v8;
    CFStringRef v19 = (const __CFString *)NLStringTokenizerCopyBestStringLanguage();
    if (!v19) {
      goto LABEL_25;
    }
    CFStringRef v20 = v19;
    CFLocaleRef v21 = CFLocaleCreate(v12, v19);
    if (!v21)
    {
      CFRelease(v20);
      goto LABEL_25;
    }
    CFLocaleRef v22 = v21;
    CFStringRef v47 = (CFStringRef)v15;
    unsigned int LanguageID = SILanguagesGetLanguageID(v21);
    uint64_t Locale = SILanguagesGetLocale(LanguageID);
    CFRelease(v22);
    CFStringRef v25 = v20;
    CFLocaleRef v26 = (const __CFLocale *)Locale;
    CFRelease(v25);
    if (!Locale)
    {
      ValidatedLocaleFromTokens = 0;
      CFLocaleRef v15 = (CFLocaleRef)v47;
      goto LABEL_26;
    }
    CFStringRef v27 = (const __CFString *)MEMORY[0x1C1883020](Locale);
    CFLocaleRef v15 = (CFLocaleRef)v47;
    if (v47)
    {
      CFStringRef v28 = (const __CFString *)MEMORY[0x1C1883020](v47);
      if (CFStringHasPrefix(v28, v27))
      {
        ValidatedLocaleFromTokens = v26;
        goto LABEL_26;
      }
      if (!theArray) {
        goto LABEL_25;
      }
      CFStringRef v34 = (const __CFString *)MEMORY[0x1C1883020](v26);
      if (CFStringHasPrefix(v34, prefix))
      {
        CFStringRef v45 = v27;
        CFIndex Count = CFArrayGetCount(theArray);
        CFLocaleRef v36 = (const void *)MEMORY[0x1C1883020](v47);
        v57.locatiouint64_t n = 0;
        v57.length = Count;
        CFStringRef v27 = v45;
        CFLocaleRef v15 = (CFLocaleRef)v47;
        if (CFArrayContainsValue(theArray, v57, v36)) {
          goto LABEL_26;
        }
      }
    }
    else if (!theArray)
    {
      goto LABEL_25;
    }
    CFStringRef v29 = v27;
    CFArrayRef v30 = theArray;
    v56.length = CFArrayGetCount(theArray);
    v56.locatiouint64_t n = 0;
    if (CFArrayContainsValue(theArray, v56, v29))
    {
      if ((a4 & 1) == 0)
      {
        uint64_t v31 = v7;
        CFLocaleRef v32 = v26;
        CFArrayRef v33 = theArray;
LABEL_39:
        ValidatedLocaleFromTokens = (const __CFLocale *)GetValidatedLocaleFromTokens(v31, v32, v33, (uint64_t *)a2);
        goto LABEL_26;
      }
LABEL_25:
      ValidatedLocaleFromTokens = 0;
      goto LABEL_26;
    }
    if (CFArrayGetCount(theArray) < 2) {
      goto LABEL_25;
    }
    CFStringRef v48 = (const __CFString *)CFLocaleGetValue(v26, (CFLocaleKey)*MEMORY[0x1E4F1D218]);
    CFIndex v46 = CFArrayGetCount(theArray);
    if (v46 < 1) {
      goto LABEL_50;
    }
    CFIndex v37 = 0;
    while (1)
    {
      CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v30, v37);
      if (CFStringHasPrefix(ValueAtIndex, v48))
      {
        if (CFStringGetLength(ValueAtIndex) >= 4) {
          break;
        }
      }
      ++v37;
      CFArrayRef v30 = theArray;
      if (v46 == v37) {
        goto LABEL_50;
      }
    }
    CFLocaleRef v42 = CFLocaleCreate(v12, ValueAtIndex);
    if (v42)
    {
      CFLocaleRef v43 = v42;
      unsigned int v44 = SILanguagesGetLanguageID(v42);
      ValidatedLocaleFromTokens = (const __CFLocale *)SILanguagesGetLocale(v44);
      CFRelease(v43);
    }
    else
    {
LABEL_50:
      ValidatedLocaleFromTokens = 0;
    }
    if ((unint64_t)(v16 - 15) <= 0x54 && !ValidatedLocaleFromTokens)
    {
      CFLocaleRef v39 = (const __CFLocale *)guessedLocaleUsingMontreal(*(const unsigned __int16 **)(a2 + 16));
      CFLocaleRef v40 = v39;
      if ((a4 & 1) == 0) {
        goto LABEL_57;
      }
      ValidatedLocaleFromTokens = 0;
      if (v39 && prefix)
      {
        CFStringRef v41 = (const __CFString *)MEMORY[0x1C1883020](v39);
        if (!CFStringHasPrefix(v41, prefix)) {
          goto LABEL_25;
        }
LABEL_57:
        uint64_t v31 = v7;
        CFLocaleRef v32 = v40;
        CFArrayRef v33 = theArray;
        goto LABEL_39;
      }
    }
LABEL_26:
    CFRelease(v18);
    CFArrayRef v8 = theArray;
    if (!v15) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  return result;
}

void *isValidTokenizedString(void *result)
{
  if (result)
  {
    if (*result && result[1] && result[2] && result[3] && result[4]) {
      return (void *)(result[5] > 0);
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t GetValidatedLocaleFromTokens(uint64_t a1, const __CFLocale *a2, const __CFArray *a3, uint64_t *a4)
{
  CFRange v56 = a4;
  v58[1] = *(SIResourceLock **)MEMORY[0x1E4F143B8];
  if (!a2 || !isValidTokenizedString(v56)) {
    return 0;
  }
  uint64_t LanguageID = SILanguagesGetLanguageID(a2);
  int v8 = LanguageID;
  if ((*(unsigned char *)(a1 + 25) & 0x20) == 0)
  {
    if (*(void *)(a1 + 16))
    {
      int v9 = v56;
      MEMORY[0x1F4188790](LanguageID);
      CFTypeRef v11 = (char *)&v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
      bzero(v11, v10);
      double ValidatedTokenScore = getValidatedTokenScore(*(void *)(a1 + 16), v9, (uint64_t)v11);
      if (ValidatedTokenScore >= 0.5) {
        unsigned int v13 = v8;
      }
      else {
        unsigned int v13 = 0;
      }
      if (ValidatedTokenScore >= 0.5) {
        double v14 = ValidatedTokenScore;
      }
      else {
        double v14 = 0.0;
      }
      goto LABEL_23;
    }
LABEL_18:
    unsigned int v13 = 0;
    double v14 = 0.0;
    goto LABEL_23;
  }
  if (!languageIsPreferred(LanguageID)) {
    return 0;
  }
  v58[0] = 0;
  SIRetainLanguageResources(v8, *(void *)(a1 + 32), *(_DWORD *)(a1 + 24), v58);
  if (!v58[0]) {
    goto LABEL_18;
  }
  CFLocaleRef v15 = (os_unfair_lock_s *)SIResourceLock::get(v58[0]);
  CFIndex v16 = v15;
  if (v15)
  {
    CFArrayRef v17 = a3;
    os_unfair_lock_lock(v15 + 16);
    CFStringRef v18 = v56;
    MEMORY[0x1F4188790](v19);
    CFLocaleRef v21 = (char *)&v52 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
    bzero(v21, v20);
    double v22 = getValidatedTokenScore((uint64_t)v16, v18, (uint64_t)v21);
    if (v22 >= 0.5)
    {
      double v14 = v22;
    }
    else
    {
      int v8 = 0;
      double v14 = 0.0;
    }
    os_unfair_lock_unlock(v16 + 16);
    a3 = v17;
  }
  else
  {
    int v8 = 0;
    double v14 = 0.0;
  }
  CFMutableArrayRef v23 = v58[0];
  v58[0] = 0;
  if (v23)
  {
    SIResourceLock::~SIResourceLock(v23);
    MEMORY[0x1C1883920]();
  }
  unsigned int v13 = v8;
LABEL_23:
  CFIndex Count = CFArrayGetCount(a3);
  CFIndex v25 = Count;
  if (Count >= 1)
  {
    CFIndex v26 = 0;
    uint64_t v27 = 0;
    CFAllocatorRef v57 = (CFAllocatorRef)*MEMORY[0x1E4F1CF80];
    CFIndex v55 = Count;
    uint64_t v53 = a1;
    while (1)
    {
      CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(a3, v26);
      CFLocaleRef v29 = CFLocaleCreate(v57, ValueAtIndex);
      CFLocaleRef v30 = v29;
      if (!v29) {
        goto LABEL_43;
      }
      int v31 = SILanguagesGetLanguageID(v29);
      uint64_t IsPreferred = languageIsPreferred(v31);
      if (IsPreferred) {
        break;
      }
LABEL_45:
      if (v25 == ++v26) {
        goto LABEL_46;
      }
    }
    unsigned int v33 = *(_DWORD *)(a1 + 24);
    if ((v33 & 0x2000) != 0)
    {
      v58[0] = 0;
      SIRetainLanguageResources(v31, *(void *)(a1 + 32), v33, v58);
      if (v58[0])
      {
        CFLocaleRef v40 = (os_unfair_lock_s *)SIResourceLock::get(v58[0]);
        CFStringRef v41 = v40;
        if (v40)
        {
          unsigned int v42 = v13;
          CFLocaleRef v43 = v56;
          os_unfair_lock_lock(v40 + 16);
          uint64_t v54 = &v52;
          MEMORY[0x1F4188790](v44);
          CFIndex v46 = (char *)&v52 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
          bzero(v46, v45);
          double v47 = getValidatedTokenScore((uint64_t)v41, v43, (uint64_t)v46);
          BOOL v48 = v47 >= 0.5;
          BOOL v49 = v47 > v14;
          if (v48 && v49) {
            unsigned int v13 = v31;
          }
          else {
            unsigned int v13 = v42;
          }
          if (v48 && v49) {
            double v14 = v47;
          }
          os_unfair_lock_unlock(v41 + 16);
          CFIndex v25 = v55;
          a1 = v53;
        }
        uint64_t v50 = v58[0];
        v58[0] = 0;
        if (v50)
        {
          SIResourceLock::~SIResourceLock(v50);
          MEMORY[0x1C1883920]();
        }
      }
    }
    else if (*(void *)(a1 + 16))
    {
      CFStringRef v34 = v56;
      MEMORY[0x1F4188790](IsPreferred);
      unsigned int v36 = v13;
      CFIndex v37 = (char *)&v52 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
      bzero(v37, v35);
      uint64_t v38 = (uint64_t)v37;
      unsigned int v13 = v36;
      CFIndex v25 = v55;
      double v39 = getValidatedTokenScore(*(void *)(a1 + 16), v34, v38);
      if (v39 >= 0.5 && v39 > v14)
      {
        unsigned int v13 = v31;
        double v14 = v39;
      }
    }
    CFRelease(v30);
LABEL_43:
    if (v27 > 1) {
      goto LABEL_46;
    }
    ++v27;
    goto LABEL_45;
  }
LABEL_46:
  if (v14 > 0.0) {
    return SILanguagesGetLocale(v13);
  }
  return 0;
}

void sub_1BDB0266C(_Unwind_Exception *a1)
{
  std::unique_ptr<SIResourceLock>::reset[abi:ne180100]((SIResourceLock **)(v1 - 112), 0);
  _Unwind_Resume(a1);
}

const void *guessedLocaleUsingMontreal(const unsigned __int16 *a1)
{
  if (!a1) {
    return 0;
  }
  CFArrayRef v6 = 0;
  getLanguageIdentifier(&v6);
  if (!v6) {
    return 0;
  }
  if (SIResourceLock::get(v6)
    && (NLLanguageIdentifierReset(),
        NLLanguageIdentifierConsumeCharacters(),
        signed int TopHypothesis = NLLanguageIdentifierGetTopHypothesis(),
        TopHypothesis >= 2))
  {
    uint64_t Locale = (const void *)SILanguagesGetLocale(TopHypothesis);
    CFArrayRef v3 = Locale;
    if (Locale) {
      CFRetain(Locale);
    }
  }
  else
  {
    CFArrayRef v3 = 0;
  }
  CFAllocatorRef v4 = v6;
  CFArrayRef v6 = 0;
  if (v4)
  {
    SIResourceLock::~SIResourceLock(v4);
    MEMORY[0x1C1883920]();
  }
  return v3;
}

void sub_1BDB02764(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<SIResourceLock>::reset[abi:ne180100]((SIResourceLock **)va, 0);
  _Unwind_Resume(a1);
}

uint64_t SILanguageModelCopyLocaleInString(uint64_t a1, CFStringRef theString, uint64_t a3)
{
  uint64_t v3 = 0;
  if (a1 && theString)
  {
    CFIndex Length = CFStringGetLength(theString);
    if (Length < 2001)
    {
      uint64_t v8 = Length;
      CFStringRef v9 = (const __CFString *)CFRetain(theString);
    }
    else
    {
      uint64_t v8 = 2000;
      v17.locatiouint64_t n = 0;
      v17.length = 2000;
      CFStringRef v9 = CFStringCreateWithSubstring((CFAllocatorRef)*MEMORY[0x1E4F1CF80], theString, v17);
    }
    CFStringRef v10 = v9;
    uint64_t v13 = 0;
    double v14 = &v13;
    uint64_t v15 = 0x2000000000;
    uint64_t v16 = 0;
    if (v9)
    {
      v12[0] = MEMORY[0x1E4F143A8];
      v12[1] = 0x40000000;
      _DWORD v12[2] = __SILanguageModelCopyLocaleInString_block_invoke;
      v12[3] = &unk_1E6349920;
      void v12[4] = &v13;
      v12[5] = a1;
      v12[6] = a3;
      SITextTokenizerEnumerateTokensInString(0, v9, v8, (uint64_t)v12);
      CFRelease(v10);
      uint64_t v3 = v14[3];
    }
    else
    {
      uint64_t v3 = 0;
    }
    _Block_object_dispose(&v13, 8);
  }
  return v3;
}

void sub_1BDB028AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __SILanguageModelCopyLocaleInString_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned char *a7)
{
  uint64_t result = SILanguageModelCopyLocale(*(void *)(a1 + 40), a4, *(const __CFLocale **)(a1 + 48), 1);
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  *a7 = 1;
  return result;
}

BOOL SILanguageModelIsValidPhraseToken(unsigned __int16 *a1, uint64_t a2, char a3)
{
  if (a2 != 1) {
    return (a3 & 0x20) == 0;
  }
  unsigned int v3 = *a1 - 38;
  BOOL v4 = v3 > 0x39;
  uint64_t v5 = (1 << v3) & 0x2000000000000A1;
  return !v4 && v5 != 0 || (a3 & 0x20) == 0;
}

BOOL SILanguageModelIsStopWord(BOOL result, const __CFLocale *a2, const char *a3, uint64_t a4)
{
  if (result)
  {
    uint64_t v5 = result;
    uint64_t result = 0;
    if (a4)
    {
      if (a3 && a2)
      {
        if (*(void *)(v5 + 8))
        {
          SILocalizationLoad(*(void *)(v5 + 8), a2, (uint64_t)&__block_literal_global_66);
          return SILocalizationGetTokenType(*(void *)(v5 + 8), a2, a3, a4, 0) == 5;
        }
      }
    }
  }
  return result;
}

void __SILanguageModelIsStopWord_block_invoke(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (logger(void)::token != -1) {
      dispatch_once(&logger(void)::token, &__block_literal_global_102);
    }
    unsigned int v3 = logger(void)::log;
    if (os_log_type_enabled((os_log_t)logger(void)::log, OS_LOG_TYPE_ERROR)) {
      __SILanguageModelIsStopWord_block_invoke_cold_1(a2, v3);
    }
  }
}

uint64_t SILanguageModelEnumerateKeyPhrasesInString(uint64_t a1, uint64_t a2, CFStringRef theString, uint64_t a4)
{
  if (!theString) {
    return 0;
  }
  CFIndex Length = CFStringGetLength(theString);
  uint64_t v9 = 0;
  if (a1 && a2 && Length)
  {
    uint64_t v14 = 0;
    uint64_t v15 = &v14;
    uint64_t v16 = 0x2000000000;
    char v17 = 1;
    v12[0] = 0;
    v12[1] = v12;
    _DWORD v12[2] = 0x2000000000;
    char v13 = 0;
    v11[0] = MEMORY[0x1E4F143A8];
    v11[1] = 0x40000000;
    v11[2] = __SILanguageModelEnumerateKeyPhrasesInString_block_invoke;
    v11[3] = &unk_1E6349990;
    v11[7] = a1;
    v11[8] = a2;
    v11[4] = a4;
    v11[5] = &v14;
    v11[6] = v12;
    SITextTokenizerEnumerateTokensInString(a2, theString, 2000, (uint64_t)v11);
    uint64_t v9 = *((unsigned __int8 *)v15 + 24);
    _Block_object_dispose(v12, 8);
    _Block_object_dispose(&v14, 8);
  }
  return v9;
}

void sub_1BDB02B78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t __SILanguageModelEnumerateKeyPhrasesInString_block_invoke(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, unsigned char *a7)
{
  if (a4[5])
  {
    uint64_t v8 = (void *)result;
    uint64_t v9 = *(void *)(result + 56);
    CFLocaleRef v10 = (const __CFLocale *)v8[8];
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 0x40000000;
    _DWORD v12[2] = __SILanguageModelEnumerateKeyPhrasesInString_block_invoke_2;
    void v12[3] = &unk_1E6349968;
    v12[6] = a4;
    void v12[7] = a2;
    v12[8] = a3;
    uint64_t v11 = v8[6];
    void v12[4] = v8[4];
    v12[5] = v11;
    uint64_t result = EnumerateKeyPhrases(v9, v10, a4, (uint64_t)v12);
    *(unsigned char *)(*(void *)(v8[5] + 8) + 24) = result;
    if (*(unsigned char *)(*(void *)(v8[6] + 8) + 24) || !*(unsigned char *)(*(void *)(v8[5] + 8) + 24)) {
      *a7 = 1;
    }
  }
  return result;
}

uint64_t EnumerateKeyPhrases(uint64_t a1, const __CFLocale *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t LanguageID = SILanguagesGetLanguageID(a2);
  int v8 = LanguageID;
  MEMORY[0x1F4188790](LanguageID);
  CFLocaleRef v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  bzero(v10, v9);
  if ((*(unsigned char *)(a1 + 25) & 0x20) != 0)
  {
    uint64_t result = languageIsPreferred(v8);
    if (!result) {
      return result;
    }
    uint64_t v27 = 0;
    SIRetainLanguageResources(v8, *(void *)(a1 + 32), *(_DWORD *)(a1 + 24), &v27);
    if (v27)
    {
      CFLocaleRef v21 = (os_unfair_lock_s *)SIResourceLock::get(v27);
      uint64_t v11 = (uint64_t)v21;
      if (v21) {
        os_unfair_lock_lock(v21 + 16);
      }
      double v22 = v27;
      uint64_t v27 = 0;
      if (v22)
      {
        SIResourceLock::~SIResourceLock(v22);
        MEMORY[0x1C1883920]();
      }
    }
    else
    {
      uint64_t v11 = 0;
    }
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 16);
  }
  if (!v11) {
    return 0;
  }
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  if (a3[5] >= 1)
  {
    CFAllocatorRef v12 = 0;
    long long v23 = xmmword_1BDB23710;
    while (1)
    {
      long long v26 = v23;
      double v25 = 0.0;
      uint64_t KeyPhraseAtIndex = getKeyPhraseAtIndex(v11, (uint64_t)v12, 0, a3, (uint64_t)v10, (uint64_t *)&v27);
      uint64_t v15 = KeyPhraseAtIndex;
      int v16 = *(_DWORD *)(v11 + 56);
      if (*(void *)(v11 + 24)) {
        BOOL v17 = (*(_DWORD *)(v11 + 56) & 0x80) == 0;
      }
      else {
        BOOL v17 = 1;
      }
      if (v17)
      {
        if (*(void *)(v11 + 32))
        {
          if ((v16 & 0x100) != 0)
          {
            if (lex_getCandidateKeyphrase(v11, a3, (uint64_t)v10, KeyPhraseAtIndex, v14, (uint64_t *)&v26, &v25)) {
              uint64_t v18 = 2;
            }
            else {
              uint64_t v18 = 0;
            }
            goto LABEL_21;
          }
        }
        else if ((v16 & 0x100) != 0)
        {
          *(void *)&long long v26 = KeyPhraseAtIndex;
          *((void *)&v26 + 1) = v14;
          uint64_t v18 = 1;
          goto LABEL_22;
        }
        uint64_t v18 = 0;
      }
      else if (lm_getCandidateKeyphrase(v11, a3, (uint64_t)v10, KeyPhraseAtIndex, v14, (uint64_t *)&v26, &v25))
      {
        uint64_t v18 = 3;
      }
      else
      {
        uint64_t v18 = 0;
      }
LABEL_21:
      uint64_t v15 = v26;
LABEL_22:
      if (v15 == -1
        || (char v24 = 0,
            (*(void (**)(uint64_t, uint64_t, void, uint64_t, char *, double))(a4 + 16))(a4, v15, *((void *)&v26 + 1), v18, &v24, v25), !v24))
      {
        CFAllocatorRef v12 = (char *)v27 + v28;
        if ((uint64_t)v27 + v28 < a3[5]) {
          continue;
        }
      }
      break;
    }
  }
  if ((*(unsigned char *)(a1 + 25) & 0x20) != 0) {
    os_unfair_lock_unlock((os_unfair_lock_t)(v11 + 64));
  }
  return 1;
}

void sub_1BDB02EFC(_Unwind_Exception *a1)
{
  std::unique_ptr<SIResourceLock>::reset[abi:ne180100]((SIResourceLock **)(v1 - 88), 0);
  _Unwind_Resume(a1);
}

uint64_t __SILanguageModelEnumerateKeyPhrasesInString_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned char *a5)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24)) {
    *a5 = 1;
  }
  return result;
}

uint64_t SILanguageModelGetKeyPhraseAtIndex(uint64_t a1, const __CFLocale *a2, uint64_t *a3, uint64_t a4, double *a5, uint64_t *a6, int *a7)
{
  return GetKeyPhraseRangeAtIndex(a1, a2, a4, a3, a6, a5, a7);
}

uint64_t GetKeyPhraseRangeAtIndex(uint64_t a1, const __CFLocale *a2, uint64_t a3, uint64_t *a4, uint64_t *a5, double *a6, int *a7)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  long long v35 = xmmword_1BDB23710;
  uint64_t LanguageID = SILanguagesGetLanguageID(a2);
  int v14 = LanguageID;
  MEMORY[0x1F4188790](LanguageID);
  int v16 = (char *)&v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  bzero(v16, v15);
  if ((*(unsigned char *)(a1 + 25) & 0x20) != 0)
  {
    if (!languageIsPreferred(v14)) {
      return v35;
    }
    CFStringRef v34 = 0;
    SIRetainLanguageResources(v14, *(void *)(a1 + 32), *(_DWORD *)(a1 + 24), &v34);
    if (!v34) {
      goto LABEL_18;
    }
    double v22 = (os_unfair_lock_s *)SIResourceLock::get(v34);
    uint64_t v23 = (uint64_t)v22;
    if (!v22)
    {
      int v21 = 0;
      goto LABEL_33;
    }
    os_unfair_lock_lock(v22 + 16);
    uint64_t KeyPhraseAtIndex = getKeyPhraseAtIndex(v23, a3, 1, a4, (uint64_t)v16, a5);
    if (*(void *)(v23 + 24) && (*(unsigned char *)(v23 + 56) & 0x80) != 0)
    {
      BOOL v27 = lm_getCandidateKeyphrase(v23, a4, (uint64_t)v16, KeyPhraseAtIndex, v25, (uint64_t *)&v35, a6) == 0;
      int v28 = 3;
LABEL_26:
      if (v27) {
        int v21 = 0;
      }
      else {
        int v21 = v28;
      }
      goto LABEL_32;
    }
    int v26 = *(_DWORD *)(v23 + 56);
    if (*(void *)(v23 + 32))
    {
      if ((v26 & 0x100) != 0)
      {
        BOOL v27 = !lex_getCandidateKeyphrase(v23, a4, (uint64_t)v16, KeyPhraseAtIndex, v25, (uint64_t *)&v35, a6);
        int v28 = 2;
        goto LABEL_26;
      }
    }
    else if ((v26 & 0x100) != 0)
    {
      *(void *)&long long v35 = KeyPhraseAtIndex;
      *((void *)&v35 + 1) = v25;
      int v21 = 1;
      goto LABEL_32;
    }
    int v21 = 0;
LABEL_32:
    os_unfair_lock_unlock((os_unfair_lock_t)(v23 + 64));
LABEL_33:
    int v31 = v34;
    CFStringRef v34 = 0;
    if (v31)
    {
      SIResourceLock::~SIResourceLock(v31);
      MEMORY[0x1C1883920]();
    }
    goto LABEL_35;
  }
  uint64_t v17 = *(void *)(a1 + 16);
  if (!v17)
  {
LABEL_18:
    int v21 = 0;
    goto LABEL_35;
  }
  uint64_t v19 = getKeyPhraseAtIndex(v17, a3, 1, a4, (uint64_t)v16, a5);
  uint64_t v20 = *(void *)(a1 + 16);
  if (!v20) {
    goto LABEL_8;
  }
  if (*(void *)(v20 + 24) && (*(unsigned char *)(v20 + 56) & 0x80) != 0)
  {
    BOOL v29 = lm_getCandidateKeyphrase(v20, a4, (uint64_t)v16, v19, v18, (uint64_t *)&v35, a6) == 0;
    int v30 = 3;
  }
  else
  {
    if (!*(void *)(v20 + 32) || (*(unsigned char *)(v20 + 57) & 1) == 0)
    {
LABEL_8:
      if (*(unsigned char *)(v20 + 57))
      {
        *(void *)&long long v35 = v19;
        *((void *)&v35 + 1) = v18;
        int v21 = 1;
        goto LABEL_35;
      }
      goto LABEL_18;
    }
    BOOL v29 = !lex_getCandidateKeyphrase(v20, a4, (uint64_t)v16, v19, v18, (uint64_t *)&v35, a6);
    int v30 = 2;
  }
  if (v29) {
    int v21 = 0;
  }
  else {
    int v21 = v30;
  }
LABEL_35:
  if (a7) {
    *a7 = v21;
  }
  return v35;
}

void sub_1BDB03274(_Unwind_Exception *a1)
{
  std::unique_ptr<SIResourceLock>::reset[abi:ne180100]((SIResourceLock **)(v1 - 104), 0);
  _Unwind_Resume(a1);
}

double SILanguageModelGetPhraseScoreAtIndex(uint64_t a1, const __CFLocale *a2, uint64_t *a3, uint64_t a4, int *a5)
{
  return GetKeyPhraseScoreAtIndex(a1, a2, a4, a3, a5);
}

double GetKeyPhraseScoreAtIndex(uint64_t a1, const __CFLocale *a2, uint64_t a3, uint64_t *a4, int *a5)
{
  v33[1] = *(double *)MEMORY[0x1E4F143B8];
  v33[0] = 0.0;
  uint64_t LanguageID = SILanguagesGetLanguageID(a2);
  int v10 = LanguageID;
  long long v32 = xmmword_1BDB23710;
  MEMORY[0x1F4188790](LanguageID);
  CFAllocatorRef v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  bzero(v12, v11);
  if ((*(unsigned char *)(a1 + 25) & 0x20) != 0)
  {
    if (!languageIsPreferred(v10)) {
      return v33[0];
    }
    int v31 = 0;
    SIRetainLanguageResources(v10, *(void *)(a1 + 32), *(_DWORD *)(a1 + 24), &v31);
    if (!v31) {
      goto LABEL_18;
    }
    uint64_t v19 = (os_unfair_lock_s *)SIResourceLock::get(v31);
    uint64_t v20 = (uint64_t)v19;
    if (!v19)
    {
      int v18 = 0;
      goto LABEL_33;
    }
    os_unfair_lock_lock(v19 + 16);
    uint64_t KeyPhraseAtIndex = getKeyPhraseAtIndex(v20, a3, 1, a4, (uint64_t)v12, 0);
    if (*(void *)(v20 + 24) && (*(unsigned char *)(v20 + 56) & 0x80) != 0)
    {
      BOOL v24 = lm_getCandidateKeyphrase(v20, a4, (uint64_t)v12, KeyPhraseAtIndex, v22, (uint64_t *)&v32, v33) == 0;
      int v25 = 3;
LABEL_26:
      if (v24) {
        int v18 = 0;
      }
      else {
        int v18 = v25;
      }
      goto LABEL_32;
    }
    int v23 = *(_DWORD *)(v20 + 56);
    if (*(void *)(v20 + 32))
    {
      if ((v23 & 0x100) != 0)
      {
        BOOL v24 = !lex_getCandidateKeyphrase(v20, a4, (uint64_t)v12, KeyPhraseAtIndex, v22, (uint64_t *)&v32, v33);
        int v25 = 2;
        goto LABEL_26;
      }
    }
    else if ((v23 & 0x100) != 0)
    {
      *(void *)&long long v32 = KeyPhraseAtIndex;
      *((void *)&v32 + 1) = v22;
      int v18 = 1;
      goto LABEL_32;
    }
    int v18 = 0;
LABEL_32:
    os_unfair_lock_unlock((os_unfair_lock_t)(v20 + 64));
LABEL_33:
    int v28 = v31;
    int v31 = 0;
    if (v28)
    {
      SIResourceLock::~SIResourceLock(v28);
      MEMORY[0x1C1883920]();
    }
    goto LABEL_35;
  }
  uint64_t v13 = *(void *)(a1 + 16);
  if (!v13)
  {
LABEL_18:
    int v18 = 0;
LABEL_35:
    uint64_t v16 = *((void *)&v32 + 1);
    goto LABEL_36;
  }
  uint64_t v15 = getKeyPhraseAtIndex(v13, a3, 1, a4, (uint64_t)v12, 0);
  uint64_t v16 = v14;
  uint64_t v17 = *(void *)(a1 + 16);
  if (v17)
  {
    if (*(void *)(v17 + 24) && (*(unsigned char *)(v17 + 56) & 0x80) != 0)
    {
      BOOL v26 = lm_getCandidateKeyphrase(v17, a4, (uint64_t)v12, v15, v14, (uint64_t *)&v32, v33) == 0;
      int v27 = 3;
    }
    else
    {
      if (!*(void *)(v17 + 32) || (*(unsigned char *)(v17 + 57) & 1) == 0) {
        goto LABEL_8;
      }
      BOOL v26 = !lex_getCandidateKeyphrase(v17, a4, (uint64_t)v12, v15, v14, (uint64_t *)&v32, v33);
      int v27 = 2;
    }
    if (v26) {
      int v18 = 0;
    }
    else {
      int v18 = v27;
    }
    goto LABEL_35;
  }
LABEL_8:
  if ((*(unsigned char *)(v17 + 57) & 1) == 0) {
    goto LABEL_18;
  }
  *(void *)&long long v32 = v15;
  *((void *)&v32 + 1) = v14;
  int v18 = 1;
LABEL_36:
  if (v16 == 1) {
    v33[0] = *(double *)&v12[40 * v32 + 24];
  }
  if (a5) {
    *a5 = v18;
  }
  return v33[0];
}

void sub_1BDB03580(_Unwind_Exception *a1)
{
  std::unique_ptr<SIResourceLock>::reset[abi:ne180100]((SIResourceLock **)(v1 - 104), 0);
  _Unwind_Resume(a1);
}

uint64_t IsContentToken(uint64_t a1, const __CFLocale *a2, uint64_t *a3, uint64_t a4, double *a5, _DWORD *a6)
{
  v31[1] = *(SIResourceLock **)MEMORY[0x1E4F143B8];
  uint64_t LanguageID = SILanguagesGetLanguageID(a2);
  int v13 = LanguageID;
  MEMORY[0x1F4188790](LanguageID);
  uint64_t v15 = (char *)v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  bzero(v15, v14);
  SITokenInit((uint64_t)v15, (uint64_t)a3, a4);
  if ((*(unsigned char *)(a1 + 25) & 0x20) != 0)
  {
    uint64_t result = languageIsPreferred(v13);
    if (!result) {
      return result;
    }
    v31[0] = 0;
    SIRetainLanguageResources(v13, *(void *)(a1 + 32), *(_DWORD *)(a1 + 24), v31);
    if (v31[0])
    {
      uint64_t v20 = (os_unfair_lock_s *)SIResourceLock::get(v31[0]);
      uint64_t v18 = (uint64_t)v20;
      if (v20)
      {
        int v21 = v20 + 16;
        os_unfair_lock_lock(v20 + 16);
        updateTokenWithIDAndScoreAtIndex(v18, a3, (uint64_t)v15, a4);
        if (*(void *)(v18 + 24) && (*(unsigned char *)(v18 + 56) & 0x80) != 0)
        {
          LODWORD(v18) = 3;
        }
        else
        {
          unsigned int v22 = *(_DWORD *)(v18 + 56);
          if (*(void *)(v18 + 32) && (v22 & 0x100) != 0) {
            LODWORD(v18) = 2;
          }
          else {
            LODWORD(v18) = (v22 >> 8) & 1;
          }
        }
        os_unfair_lock_unlock(v21);
      }
      int v23 = v31[0];
      v31[0] = 0;
      if (v23)
      {
        SIResourceLock::~SIResourceLock(v23);
        MEMORY[0x1C1883920](v24, 0x1020C403A5D3213);
      }
      goto LABEL_25;
    }
LABEL_17:
    LODWORD(v18) = 0;
    goto LABEL_25;
  }
  uint64_t v16 = *(void *)(a1 + 16);
  if (!v16) {
    goto LABEL_17;
  }
  updateTokenWithIDAndScoreAtIndex(v16, a3, (uint64_t)v15, a4);
  uint64_t v17 = *(void *)(a1 + 16);
  if (v17)
  {
    if (*(void *)(v17 + 24) && (*(unsigned char *)(v17 + 56) & 0x80) != 0)
    {
      LODWORD(v18) = 3;
      goto LABEL_25;
    }
    if (*(void *)(v17 + 32) && (*(unsigned char *)(v17 + 57) & 1) != 0)
    {
      LODWORD(v18) = 2;
      goto LABEL_25;
    }
  }
  LODWORD(v18) = (*(_DWORD *)(v17 + 56) >> 8) & 1;
LABEL_25:
  int v25 = &v15[40 * a4];
  uint64_t v26 = *((void *)v25 + 1);
  double v27 = *((double *)v25 + 3);
  if ((v25[32] & 1) != 0 && v27 != 0.0)
  {
    if ((v13 - 4) > 6) {
      double v28 = -3.7;
    }
    else {
      double v28 = dbl_1BDB23780[v13 - 4];
    }
    if (v27 < v28)
    {
      uint64_t result = 1;
      goto LABEL_45;
    }
LABEL_44:
    uint64_t result = 0;
    goto LABEL_45;
  }
  uint64_t result = 0;
  if ((v25[32] & 1) != 0 || *((_DWORD *)v25 + 4) != 7) {
    goto LABEL_45;
  }
  if (*(void *)(a3[4] + 8 * a4)) {
    goto LABEL_44;
  }
  LODWORD(v18) = 0;
  if (SILanguagesIsCJK(a2)) {
    BOOL v29 = 1;
  }
  else {
    BOOL v29 = v26 <= 1;
  }
  uint64_t result = !v29 && v26 < 4;
LABEL_45:
  if (a5) {
    *a5 = v27;
  }
  if (a6) {
    *a6 = v18;
  }
  return result;
}

void sub_1BDB0385C(_Unwind_Exception *a1)
{
  std::unique_ptr<SIResourceLock>::reset[abi:ne180100]((SIResourceLock **)(v1 - 112), 0);
  _Unwind_Resume(a1);
}

uint64_t SILanguageModelIsContentTokenInString(uint64_t a1, const __CFLocale *a2, CFStringRef theString, uint64_t a4)
{
  if (!theString) {
    return 0;
  }
  CFIndex Length = CFStringGetLength(theString);
  uint64_t v9 = 0;
  if (!a1) {
    return v9;
  }
  if (!a2) {
    return v9;
  }
  uint64_t v10 = Length;
  if (!Length) {
    return v9;
  }
  int LanguageID = SILanguagesGetLanguageID(a2);
  if (!languageIsPreferred(LanguageID)) {
    return 0;
  }
  if (v10 < 2001)
  {
    CFStringRef v12 = (const __CFString *)CFRetain(theString);
  }
  else
  {
    uint64_t v10 = 2000;
    v20.locatiouint64_t n = 0;
    v20.length = 2000;
    CFStringRef v12 = CFStringCreateWithSubstring((CFAllocatorRef)*MEMORY[0x1E4F1CF80], theString, v20);
  }
  CFStringRef v13 = v12;
  uint64_t v16 = 0;
  uint64_t v17 = &v16;
  uint64_t v18 = 0x2000000000;
  char v19 = 0;
  if (v12)
  {
    v15[0] = MEMORY[0x1E4F143A8];
    v15[1] = 0x40000000;
    CFIndex v15[2] = __SILanguageModelIsContentTokenInString_block_invoke;
    _DWORD v15[3] = &unk_1E63499B8;
    v15[6] = a2;
    v15[7] = a4;
    v15[4] = &v16;
    void v15[5] = a1;
    SITextTokenizerEnumerateTokensInString(0, v12, v10, (uint64_t)v15);
    CFRelease(v13);
    uint64_t v9 = *((unsigned __int8 *)v17 + 24);
  }
  else
  {
    uint64_t v9 = 0;
  }
  _Block_object_dispose(&v16, 8);
  return v9;
}

void sub_1BDB039D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t languageIsPreferred(int a1)
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2000000000;
  char v9 = 0;
  if (getAvailableLanguagesQueue(void)::onceAvailableLanguagesQueueToken != -1) {
    dispatch_once(&getAvailableLanguagesQueue(void)::onceAvailableLanguagesQueueToken, &__block_literal_global_73);
  }
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  int v4[2] = ___ZL19languageIsPreferred12SILanguageID_block_invoke;
  void v4[3] = &unk_1E6349AF0;
  int v5 = a1;
  v4[4] = &v6;
  dispatch_sync((dispatch_queue_t)getAvailableLanguagesQueue(void)::gAvailableLanguagesQueue, v4);
  uint64_t v2 = *((unsigned __int8 *)v7 + 24);
  _Block_object_dispose(&v6, 8);
  return v2;
}

uint64_t __SILanguageModelIsContentTokenInString_block_invoke(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, unsigned char *a7)
{
  if (a4[5] >= 1)
  {
    uint64_t v9 = result;
    uint64_t v10 = 0;
    while (1)
    {
      uint64_t result = IsContentToken(*(void *)(v9 + 40), *(const __CFLocale **)(v9 + 48), a4, v10, 0, *(_DWORD **)(v9 + 56));
      if (result) {
        break;
      }
      if (++v10 >= a4[5]) {
        goto LABEL_7;
      }
    }
    *(unsigned char *)(*(void *)(*(void *)(v9 + 32) + 8) + 24) = 1;
  }
LABEL_7:
  *a7 = 1;
  return result;
}

uint64_t _SILanguageModelGetCacheCount(uint64_t a1, const __CFLocale *a2)
{
  uint64_t Count = -1;
  if (!a1 || !a2) {
    return Count;
  }
  int LanguageID = SILanguagesGetLanguageID(a2);
  if ((*(unsigned char *)(a1 + 25) & 0x20) != 0)
  {
    int v8 = LanguageID;
    if (!languageIsPreferred(LanguageID)) {
      return -1;
    }
    size_t v14 = 0;
    SIRetainLanguageResources(v8, *(void *)(a1 + 32), *(_DWORD *)(a1 + 24), &v14);
    if (!v14) {
      return -1;
    }
    uint64_t v9 = (os_unfair_lock_s *)SIResourceLock::get(v14);
    uint64_t v10 = v9;
    if (v9)
    {
      size_t v11 = v9 + 16;
      os_unfair_lock_lock(v9 + 16);
      uint64_t v12 = *(void *)&v10[2]._os_unfair_lock_opaque;
      if (v12) {
        uint64_t Count = SIGeneralTrieGetCount(v12);
      }
      else {
        uint64_t Count = -1;
      }
      os_unfair_lock_unlock(v11);
    }
    else
    {
      uint64_t Count = -1;
    }
    CFStringRef v13 = v14;
    size_t v14 = 0;
    if (v13)
    {
      SIResourceLock::~SIResourceLock(v13);
      MEMORY[0x1C1883920]();
    }
    return Count;
  }
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5) {
    return Count;
  }
  uint64_t v6 = *(void *)(v5 + 8);
  if (!v6) {
    return Count;
  }

  return SIGeneralTrieGetCount(v6);
}

void sub_1BDB03C64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<SIResourceLock>::reset[abi:ne180100]((SIResourceLock **)va, 0);
  _Unwind_Resume(a1);
}

void *SIRetainLanguageResources@<X0>(int a1@<W0>, uint64_t a2@<X1>, unsigned int a3@<W2>, void *a4@<X8>)
{
  v11[4] = *MEMORY[0x1E4F143B8];
  if (getResourcePools(void)::t != -1) {
    dispatch_once(&getResourcePools(void)::t, &__block_literal_global_106);
  }
  uint64_t v8 = getResourcePools(void)::pools;
  uint64_t v9 = operator new(0x20uLL);
  *(void *)uint64_t v9 = &unk_1F181DC48;
  void v9[2] = a1;
  *((void *)v9 + 2) = a2;
  v9[6] = a3;
  v11[3] = v9;
  SIResourcePools::acquireResource(v8, a1, (uint64_t)v11, (a3 >> 12) & 1, a4);
  return std::__function::__value_func<void * ()(void)>::~__value_func[abi:ne180100](v11);
}

void sub_1BDB03D70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void * ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

dispatch_queue_t ___ZL26getAvailableLanguagesQueuev_block_invoke()
{
  dispatch_queue_t result = dispatch_queue_create("com.apple.SI.AvailableLanguages", 0);
  getAvailableLanguagesQueue(void)::gAvailableLanguagesQueue = (uint64_t)result;
  return result;
}

CFArrayRef ___ZL24updateAvailableLanguagesP14_LanguageModelPK9__CFArray_block_invoke(uint64_t a1)
{
  if (gAvailableLanguages)
  {
    CFRelease((CFTypeRef)gAvailableLanguages);
    gAvailableLanguages = 0;
  }
  CFArrayRef result = *(CFArrayRef *)(a1 + 32);
  if (!result) {
    CFArrayRef result = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, MEMORY[0x1E4F1D510]);
  }
  gAvailableLanguages = (uint64_t)result;
  return result;
}

uint64_t getTokenID(uint64_t a1, UInt8 *a2, CFIndex a3, _DWORD *a4, double *a5)
{
  if (!a1) {
    return 0;
  }
  unsigned int v6 = *(_DWORD *)(a1 + 40);
  if (v6 - 59 < 0xFFFFFFC7) {
    return 0;
  }
  uint64_t v7 = 0;
  if (a2 && a3)
  {
    unsigned int TokenID = 0;
    double v26 = 0.0;
    int v25 = 0;
    CFLocaleRef Locale = (const __CFLocale *)SILanguagesGetLocale(v6);
    CFAllocatorRef v13 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFStringRef v14 = CFStringCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a2, a3, 0x8000100u, 0, (CFAllocatorRef)*MEMORY[0x1E4F1CFA0]);
    int v15 = SILexiconCacheContainsTokenID(*(void *)(a1 + 16), Locale, a2, a3, &TokenID, (unsigned int *)&v25, &v26);
    if (v15)
    {
      if (TokenID) {
        goto LABEL_12;
      }
    }
    else
    {
      unsigned int TokenID = _getTokenID(a1, v14, &v25, &v26);
      if (TokenID) {
        goto LABEL_12;
      }
    }
    if ((*(unsigned char *)(a1 + 56) & 4) != 0)
    {
      CFMutableDictionaryRef MutableCopy = CFStringCreateMutableCopy(v13, 0, v14);
      CFStringRef v16 = MutableCopy;
      if (MutableCopy)
      {
        CFStringLowercase(MutableCopy, Locale);
        if (!CFStringHasPrefix(v14, v16)
          && !SILexiconCacheContainsTokenIDInString(*(void *)(a1 + 16), Locale, v16, &TokenID, (unsigned int *)&v25, &v26))
        {
          unsigned int TokenID = _getTokenID(a1, v16, &v25, &v26);
          if (TokenID) {
            goto LABEL_14;
          }
          goto LABEL_22;
        }
      }
LABEL_13:
      if (TokenID)
      {
LABEL_14:
        if (!v15 && !v25)
        {
          uint64_t v17 = *(void *)(a1 + 16);
          if (v16) {
            int TokenTypeInString = SILexiconCacheGetTokenTypeInString(v17, Locale, v16);
          }
          else {
            int TokenTypeInString = SILexiconCacheGetTokenType(v17, Locale, (const char *)a2, a3);
          }
          int v25 = TokenTypeInString;
        }
LABEL_33:
        if (TokenID && !v15 && v26 != 0.0)
        {
          SILexiconCacheSetTokenID(*(void *)(a1 + 16), Locale, a2, a3, TokenID, v25, v26);
          SILexiconCacheSetTokenIDInString(*(void *)(a1 + 16), Locale, v16, TokenID, v25, v26);
        }
        if (v25 == 8) {
          int v25 = (*(unsigned char *)(a1 + 56) & 8) != 0;
        }
        if (v16) {
          CFRelease(v16);
        }
        if (v14) {
          CFRelease(v14);
        }
        if (a5) {
          *a5 = v26;
        }
        if (a4) {
          *a4 = v25;
        }
        return TokenID;
      }
LABEL_22:
      uint64_t v20 = *(void *)(a1 + 16);
      if (v16)
      {
        unsigned int TokenID = SILexiconCacheGetTokenIDInString(v20, Locale, v16);
        int TokenType = SILexiconCacheGetTokenTypeInString(*(void *)(a1 + 16), Locale, v16);
      }
      else
      {
        unsigned int TokenID = SILexiconCacheGetTokenID(v20, Locale, (const char *)a2, a3);
        int TokenType = SILexiconCacheGetTokenType(*(void *)(a1 + 16), Locale, (const char *)a2, a3);
      }
      if (TokenType) {
        int v22 = TokenType;
      }
      else {
        int v22 = 7;
      }
      int v25 = v22;
      if (*(void *)(a1 + 24) && (*(unsigned char *)(a1 + 56) & 0x80) != 0)
      {
        LMLanguageModelJointProbability();
        double v26 = v23;
      }
      goto LABEL_33;
    }
LABEL_12:
    CFStringRef v16 = 0;
    goto LABEL_13;
  }
  return v7;
}

CFIndex _getTokenID(uint64_t a1, CFStringRef theString, int *a3, double *a4)
{
  CFIndex result = 0;
  if (theString)
  {
    if ((*(_DWORD *)(a1 + 40) - 59) >= 0xFFFFFFC7)
    {
      CFIndex result = CFStringGetLength(theString);
      if (result)
      {
        unsigned int TokenIDForString = 0;
        double v19 = 0.0;
        if (*(void *)(a1 + 24) && (*(unsigned char *)(a1 + 56) & 0x80) != 0)
        {
          unsigned int TokenIDForString = LMLanguageModelGetTokenIDForString();
          if (!TokenIDForString) {
            return TokenIDForString;
          }
          if (v19 == -99.0 || !*(unsigned char *)(a1 + 60))
          {
            LMLanguageModelJointProbability();
            double v19 = v8;
          }
        }
        else
        {
          if (!*(void *)(a1 + 32)) {
            return TokenIDForString;
          }
          if ((*(unsigned char *)(a1 + 57) & 1) == 0) {
            return TokenIDForString;
          }
          unsigned int TokenIDForString = LXLexiconGetFirstTokenIDForString();
          if (!TokenIDForString) {
            return TokenIDForString;
          }
        }
        if (*(void *)(a1 + 32))
        {
          uint64_t v15 = 0;
          CFStringRef v16 = &v15;
          uint64_t v17 = 0x2000000000;
          char v18 = 0;
          uint64_t v11 = 0;
          uint64_t v12 = &v11;
          uint64_t v13 = 0x2000000000;
          uint64_t v14 = 0;
          LXLexiconEnumerateEntriesForString();
          int v9 = 8 * *((unsigned __int8 *)v16 + 24);
          if (*(void *)(a1 + 24) && (*(unsigned char *)(a1 + 56) & 0x80) != 0) {
            uint64_t v10 = &v19;
          }
          else {
            uint64_t v10 = (double *)(v12 + 3);
          }
          double v19 = *v10;
          _Block_object_dispose(&v11, 8);
          _Block_object_dispose(&v15, 8);
        }
        else
        {
          int v9 = 0;
        }
        if (a3) {
          *a3 = v9;
        }
        if (a4) {
          *a4 = v19;
        }
        return TokenIDForString;
      }
    }
  }
  return result;
}

void sub_1BDB042FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZL11_getTokenIDP18_LanguageResourcesPK10__CFStringPjPd_block_invoke(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  if ((LXEntryGetMetaFlags() & 2) != 0
    || (LXEntryGetMetaFlags() & 0x800000) != 0
    || (LXEntryGetMetaFlags() & 0x1000000) != 0
    || (LXEntryGetCategoryFlags() & 0x8000) != 0
    || (LXEntryGetCategoryFlags() & 0x200) != 0
    || (LXEntryGetCategoryFlags() & 0x100) != 0)
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
  }
  uint64_t result = LXEntryGetProbability();
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v6;
  *a3 = 1;
  return result;
}

void SILanguageResourcesRelease(void *a1)
{
  if (a1)
  {
    if (logger(void)::token != -1) {
      dispatch_once(&logger(void)::token, &__block_literal_global_102);
    }
    uint64_t v2 = logger(void)::log;
    if (os_log_type_enabled((os_log_t)logger(void)::log, OS_LOG_TYPE_DEBUG)) {
      SILanguageResourcesRelease((uint64_t)a1, v2);
    }
    unsigned int v3 = (char *)a1[1];
    if (v3) {
      SIGeneralTrieRelease(v3);
    }
    BOOL v4 = (void *)a1[2];
    if (v4) {
      SILexiconCacheRelease(v4);
    }
    if (a1[3]) {
      LMLanguageModelRelease();
    }
    uint64_t v5 = (const void *)a1[4];
    if (v5) {
      CFRelease(v5);
    }
    free(a1);
  }
}

void std::__function::__func<SIPreheatLanguageResources(SILanguageID,long,unsigned int,long,BOOL)::$_0,std::allocator<SIPreheatLanguageResources(SILanguageID,long,unsigned int,long,BOOL)::$_0>,void * ()(void)>::~__func()
{
}

__n128 std::__function::__func<SIPreheatLanguageResources(SILanguageID,long,unsigned int,long,BOOL)::$_0,std::allocator<SIPreheatLanguageResources(SILanguageID,long,unsigned int,long,BOOL)::$_0>,void * ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1F181DC90;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<SIPreheatLanguageResources(SILanguageID,long,unsigned int,long,BOOL)::$_0,std::allocator<SIPreheatLanguageResources(SILanguageID,long,unsigned int,long,BOOL)::$_0>,void * ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F181DC90;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t *std::__function::__func<SIPreheatLanguageResources(SILanguageID,long,unsigned int,long,BOOL)::$_0,std::allocator<SIPreheatLanguageResources(SILanguageID,long,unsigned int,long,BOOL)::$_0>,void * ()(void)>::operator()(uint64_t a1)
{
  return SILanguageResourcesCreate(*(_DWORD *)(a1 + 8), *(void *)(a1 + 16), *(_DWORD *)(a1 + 24), 0, 0);
}

void *std::__function::__value_func<void * ()(void)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

os_log_t ___ZL6loggerv_block_invoke_0()
{
  CFAllocatorRef v0 = _nlpLoggingSubsystem();
  os_log_t result = os_log_create(v0, "SpotlightLanguageModel");
  logger(void)::log = (uint64_t)result;
  return result;
}

void ___ZL16getResourcePoolsv_block_invoke()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_1BDB04698(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((uint64_t *)va);
  MEMORY[0x1C1883920](v2, 0x10A0C4050831D44);
  _Unwind_Resume(a1);
}

void _ZNSt3__110__function6__funcIZZL16getResourcePoolsvEUb0_E3__2NS_9allocatorIS2_EEFvPvEED0Ev()
{
}

void *_ZNKSt3__110__function6__funcIZZL16getResourcePoolsvEUb0_E3__2NS_9allocatorIS2_EEFvPvEE7__cloneEv()
{
  os_log_t result = operator new(0x10uLL);
  *os_log_t result = &unk_1F181DCD8;
  return result;
}

void _ZNKSt3__110__function6__funcIZZL16getResourcePoolsvEUb0_E3__2NS_9allocatorIS2_EEFvPvEE7__cloneEPNS0_6__baseIS6_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1F181DCD8;
}

void _ZNSt3__110__function6__funcIZZL16getResourcePoolsvEUb0_E3__2NS_9allocatorIS2_EEFvPvEEclEOS5_(uint64_t a1, void **a2)
{
}

void *std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void ___ZL21getLanguageIdentifierv_block_invoke()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_1BDB0487C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((uint64_t *)va);
  MEMORY[0x1C1883920](v2, 0x10A0C4050831D44);
  _Unwind_Resume(a1);
}

void _ZNSt3__110__function6__funcIZZL21getLanguageIdentifiervEUb_E3__0NS_9allocatorIS2_EEFvPvEED0Ev()
{
}

void *_ZNKSt3__110__function6__funcIZZL21getLanguageIdentifiervEUb_E3__0NS_9allocatorIS2_EEFvPvEE7__cloneEv()
{
  os_log_t result = operator new(0x10uLL);
  *os_log_t result = &unk_1F181DD20;
  return result;
}

void _ZNKSt3__110__function6__funcIZZL21getLanguageIdentifiervEUb_E3__0NS_9allocatorIS2_EEFvPvEE7__cloneEPNS0_6__baseIS6_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_1F181DD20;
}

uint64_t _ZNSt3__110__function6__funcIZZL21getLanguageIdentifiervEUb_E3__0NS_9allocatorIS2_EEFvPvEEclEOS5_(uint64_t a1, void *a2)
{
  return MEMORY[0x1F4113F80](*a2);
}

void std::__function::__func<getLanguageIdentifier(void)::$_0,std::allocator<getLanguageIdentifier(void)::$_0>,void * ()(void)>::~__func()
{
}

void *std::__function::__func<getLanguageIdentifier(void)::$_0,std::allocator<getLanguageIdentifier(void)::$_0>,void * ()(void)>::__clone()
{
  os_log_t result = operator new(0x10uLL);
  *os_log_t result = &unk_1F181DC00;
  return result;
}

void std::__function::__func<getLanguageIdentifier(void)::$_0,std::allocator<getLanguageIdentifier(void)::$_0>,void * ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F181DC00;
}

uint64_t std::__function::__func<getLanguageIdentifier(void)::$_0,std::allocator<getLanguageIdentifier(void)::$_0>,void * ()(void)>::operator()()
{
  return MEMORY[0x1F4113F60]();
}

CFTypeRef ___ZL22copyAvailableLanguagesv_block_invoke(uint64_t a1)
{
  CFTypeRef result = (CFTypeRef)gAvailableLanguages;
  if (gAvailableLanguages)
  {
    CFTypeRef result = CFRetain((CFTypeRef)gAvailableLanguages);
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  }
  return result;
}

double getValidatedTokenScore(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  double v3 = 0.0;
  if (a1)
  {
    if (*(void *)(a1 + 32))
    {
      int v5 = *(_DWORD *)(a1 + 56);
      if ((v5 & 0x100) != 0 && *(void *)(a1 + 24) && (v5 & 0x80) != 0 && a2[5] >= 1)
      {
        uint64_t v9 = 0;
        uint64_t v10 = 0;
        uint64_t v11 = 0;
        uint64_t v12 = (unsigned char *)(a3 + 32);
        do
        {
          SITokenInit(a3, (uint64_t)a2, v10);
          updateTokenWithIDAndScoreAtIndex(a1, a2, a3, v10);
          uint64_t v13 = a2[3];
          if (*(void *)(v13 + v9 + 8) == 1
            && ((int v14 = *(unsigned __int16 *)(a2[2] + 2 * *(void *)(v13 + v9)), v14 == 38) || v14 == 45)
            || (*(void *)(a2[4] + 8 * v10) & 0x20) == 0)
          {
            v11 += *v12 & (*((_DWORD *)v12 - 4) != 7);
          }
          v12 += 40;
          ++v10;
          v9 += 16;
        }
        while (v10 < a2[5] && v11 < 16);
        if (v11) {
          return (float)(0.0 / (float)v11);
        }
      }
    }
  }
  return v3;
}

uint64_t updateTokenWithIDAndScoreAtIndex(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = result;
  uint64_t v7 = (void *)(a2[3] + 16 * a4);
  uint64_t v8 = v7[1];
  unint64_t v9 = *(void *)(a2[4] + 8 * a4);
  uint64_t v10 = (unsigned __int16 *)(a2[2] + 2 * *v7);
  uint64_t v11 = *a2;
  uint64_t v12 = (uint64_t *)(a2[1] + 16 * a4);
  uint64_t v14 = *v12;
  CFIndex v13 = v12[1];
  double v46 = 0.0;
  int v45 = 0;
  if (v8 != 1 || (int v15 = *v10, v16 = 1, v17 = 1, v15 != 38) && v15 != 45)
  {
    int v16 = 0;
    BOOL v17 = (v9 & 0x20) == 0;
  }
  if ((v9 & 0x800) != 0)
  {
    int v45 = 4;
    unsigned int v22 = *(_DWORD *)(result + 40) - 4;
    if (v22 > 6) {
      double v23 = -3.7;
    }
    else {
      double v23 = dbl_1BDB23780[v22];
    }
    double v46 = v23;
    unsigned int v20 = 4;
    int v19 = 1;
    int v18 = 65;
  }
  else
  {
    CFTypeRef result = getTokenID(result, (UInt8 *)(v11 + v14), v13, &v45, &v46);
    int v18 = result;
    int v19 = v17;
    unsigned int v20 = v45;
    if (v45) {
      int v21 = 0;
    }
    else {
      int v21 = v16;
    }
    if (v21 == 1)
    {
      unsigned int v20 = 4;
LABEL_19:
      int v45 = v20;
      goto LABEL_22;
    }
    if (result <= 0x40 && v45 == 0)
    {
      double v46 = 0.0;
      unsigned int v20 = 1;
      goto LABEL_19;
    }
  }
LABEL_22:
  if (v18) {
    BOOL v25 = v20 == 1;
  }
  else {
    BOOL v25 = 0;
  }
  if (v25) {
    int v19 = 0;
  }
  if (v18 && v20 == 3)
  {
    if ((*(unsigned char *)(v6 + 56) & 0x20) != 0)
    {
      unsigned int v20 = 3;
      if (!v19) {
        goto LABEL_83;
      }
      goto LABEL_32;
    }
    unsigned int v20 = 0;
    int v45 = 0;
  }
  if (!v19) {
    goto LABEL_83;
  }
LABEL_32:
  LOBYTE(v19) = 1;
  if (v20 > 7 || ((1 << v20) & 0x83) == 0) {
    goto LABEL_83;
  }
  unsigned int v26 = *(_DWORD *)(v6 + 40);
  if (v26 <= 0x36 && ((1 << v26) & 0x40000000100030) != 0) {
    uint64_t v27 = 1;
  }
  else {
    uint64_t v27 = 3;
  }
  uint64_t v28 = (v9 >> 5) & 1;
  if (v8 != 1) {
    LODWORD(v28) = 0;
  }
  int v29 = v8 < v27 ? v28 : 1;
  uint64_t v30 = v26 <= 0x36 && ((1 << v26) & 0x40000000100030) != 0 ? 15 : 20;
  int v19 = v8 <= v30 ? v29 : 0;
  if (v20 != 7 || !v19) {
    goto LABEL_83;
  }
  CFCharacterSetRef Predefined = CFCharacterSetGetPredefined(kCFCharacterSetDecimalDigit);
  CFTypeRef result = (uint64_t)CFCharacterSetGetPredefined(kCFCharacterSetLetter);
  CFCharacterSetRef theSet = (const __CFCharacterSet *)result;
  if (v8 < 1)
  {
    uint64_t v32 = 0;
    char v40 = 1;
    goto LABEL_79;
  }
  uint64_t v43 = a3;
  uint64_t v32 = 0;
  UTF32Char v33 = 0;
  uint64_t v34 = 0;
  while (1)
  {
    UTF32Char v35 = v33;
    UTF32Char v33 = v10[v34];
    if ((v33 & 0xFC00) != 0xD800)
    {
      uint64_t v36 = v34;
      goto LABEL_61;
    }
    uint64_t v36 = v34 + 1;
    if (v34 + 1 >= v8) {
      break;
    }
    int v37 = v10[v36];
    if ((v37 & 0xFC00) != 0xDC00) {
      break;
    }
    UTF32Char v33 = (v33 << 10) - 56613888 + v37;
LABEL_61:
    if (v33 == v35)
    {
      ++v32;
    }
    else
    {
      if (v32 > 2) {
        break;
      }
      uint64_t v32 = 1;
    }
    CFTypeRef result = CFCharacterSetIsLongCharacterMember(Predefined, v33);
    uint64_t v34 = v36 + 1;
    if (result)
    {
      if (v36)
      {
        CFTypeRef result = CFCharacterSetIsLongCharacterMember(theSet, v35);
        if (result) {
          break;
        }
      }
      if (v34 < v8)
      {
        UTF32Char v38 = v10[v34];
        if ((v38 & 0xFC00) == 0xD800)
        {
          if (v36 + 2 >= v8) {
            goto LABEL_74;
          }
          int v39 = v10[v36 + 2];
          if ((v39 & 0xFC00) != 0xDC00) {
            goto LABEL_74;
          }
          UTF32Char v38 = (v38 << 10) - 56613888 + v39;
        }
        CFTypeRef result = CFCharacterSetIsLongCharacterMember(theSet, v38);
        if (result) {
          break;
        }
      }
    }
LABEL_74:
    if (v34 >= v8)
    {
      char v40 = 1;
      goto LABEL_77;
    }
  }
  char v40 = 0;
LABEL_77:
  a3 = v43;
LABEL_79:
  if (v32 < 3) {
    LOBYTE(v19) = v40;
  }
  else {
    LOBYTE(v19) = 0;
  }
  unsigned int v20 = v45;
LABEL_83:
  uint64_t v41 = a3 + 40 * a4;
  double v42 = v46;
  if (fabs(v46) == INFINITY) {
    double v42 = 0.0;
  }
  *(double *)(v41 + 24) = v42;
  *(_DWORD *)(v41 + 16) = v20;
  *(_DWORD *)(v41 + 20) = v18;
  *(unsigned char *)(v41 + 32) = v19;
  return result;
}

uint64_t getKeyPhraseAtIndex(uint64_t a1, uint64_t a2, char a3, uint64_t *a4, uint64_t a5, uint64_t *a6)
{
  if (a2 < 0)
  {
    uint64_t v19 = 0;
    uint64_t v15 = -1;
LABEL_35:
    if (a6)
    {
      *a6 = v15;
      a6[1] = v19;
    }
    return -1;
  }
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = a4[5];
  UTF32Char v35 = a6;
  uint64_t v45 = 0;
  uint64_t v33 = v11 - a2;
  uint64_t v34 = v11;
  uint64_t v12 = a5 + 40 * a2;
  uint64_t v13 = a2;
  uint64_t v14 = -1;
  while (1)
  {
    uint64_t v15 = v13;
    uint64_t v40 = v9;
    uint64_t v16 = a2 + v9;
    SITokenInit(a5, (uint64_t)a4, a2 + v9);
    updateTokenWithIDAndScoreAtIndex(a1, a4, a5, v16);
    long long v17 = *(_OWORD *)(v12 + 16);
    long long v46 = *(_OWORD *)v12;
    long long v47 = v17;
    uint64_t v48 = *(void *)(v12 + 32);
    uint64_t v37 = v14;
    if (v16)
    {
      SITokenInit(a5, (uint64_t)a4, v16 - 1);
      updateTokenWithIDAndScoreAtIndex(a1, a4, a5, v16 - 1);
      long long v18 = *(_OWORD *)(v12 - 24);
      long long v43 = *(_OWORD *)(v12 - 40);
      long long v44 = v18;
      uint64_t v45 = *(void *)(v12 - 8);
    }
    else
    {
      long long v43 = 0xFFFFFFFFFFFFFFFFLL;
      long long v44 = 0uLL;
      LOBYTE(v45) = 0;
    }
    uint64_t v19 = v10 + 1;
    int v20 = *(_DWORD *)(a1 + 40);
    if (checkIsNonPhraseToken(v20, (uint64_t)&v43, (uint64_t *)&v46))
    {
      uint64_t result = v37;
      uint64_t v24 = v10;
      uint64_t v21 = v40;
      goto LABEL_19;
    }
    uint64_t v21 = v40;
    if (!v40 && v47 == 2)
    {
      uint64_t v15 = a2;
      goto LABEL_18;
    }
    if (v16 < a2)
    {
      long long v22 = *(_OWORD *)(v12 + 56);
      v41[0] = *(_OWORD *)(v12 + 40);
      v41[1] = v22;
      uint64_t v42 = *(void *)(v12 + 72);
      BOOL v23 = checkIsNonPhraseToken(v20, (uint64_t)&v46, (uint64_t *)v41);
      uint64_t v21 = v40;
      if (v23) {
        break;
      }
    }
    if (v16 >= 1)
    {
      uint64_t v13 = v15 - 1;
      uint64_t v9 = v21 - 1;
      v12 -= 40;
      ++v10;
      uint64_t v14 = v16;
      if (a3) {
        continue;
      }
    }
    uint64_t v24 = v19;
    uint64_t result = v15;
    goto LABEL_19;
  }
  uint64_t v15 = a2 + v40;
LABEL_18:
  uint64_t result = v37;
  uint64_t v24 = v10;
LABEL_19:
  if (result == -1 || !v24)
  {
    a6 = v35;
    goto LABEL_35;
  }
  uint64_t v26 = a2 + 1;
  if (a2 + 1 < v34)
  {
    uint64_t v38 = result;
    uint64_t v27 = 0;
    uint64_t v19 = v33 - v21;
    uint64_t v28 = 40 * a2 + 40;
    while (1)
    {
      SITokenInit(a5, (uint64_t)a4, v26 + v27);
      updateTokenWithIDAndScoreAtIndex(a1, a4, a5, v26 + v27);
      uint64_t v29 = a5 + v28;
      long long v30 = *(_OWORD *)(a5 + v28 + 16);
      long long v46 = *(_OWORD *)(a5 + v28);
      long long v47 = v30;
      uint64_t v48 = *(void *)(a5 + v28 + 32);
      if (v26 + v27)
      {
        long long v31 = *(_OWORD *)(v29 - 24);
        long long v43 = *(_OWORD *)(v29 - 40);
        long long v44 = v31;
        uint64_t v45 = *(void *)(v29 - 8);
      }
      else
      {
        long long v43 = 0xFFFFFFFFFFFFFFFFLL;
        long long v44 = 0uLL;
        LOBYTE(v45) = 0;
      }
      if (checkIsNonPhraseToken(*(_DWORD *)(a1 + 40), (uint64_t)&v43, (uint64_t *)&v46)) {
        break;
      }
      long long v32 = *(_OWORD *)(v29 + 16);
      long long v43 = *(_OWORD *)v29;
      long long v44 = v32;
      uint64_t v45 = *(void *)(v29 + 32);
      ++v27;
      v28 += 40;
      if (!(a2 + 1 - v34 + v27))
      {
        v24 += v34 + ~a2;
        goto LABEL_31;
      }
    }
    v24 += v27;
    uint64_t v19 = v27 - v40 + 2;
LABEL_31:
    uint64_t result = v38;
  }
  a6 = v35;
  if (v35)
  {
    *UTF32Char v35 = v15;
    v35[1] = v19;
  }
  if (!v24) {
    goto LABEL_35;
  }
  return result;
}

uint64_t lm_getCandidateKeyphrase(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, void *a7)
{
  uint64_t v16 = 0;
  uint64_t CandidateKeyphraseRangeFromSequenceRange = extractCandidateKeyphraseRangeFromSequenceRange(a1, a2, a3, a4, a5);
  if (CandidateKeyphraseRangeFromSequenceRange == -1) {
    return 0;
  }
  uint64_t v13 = CandidateKeyphraseRangeFromSequenceRange;
  uint64_t v14 = v12;
  if (lm_shouldFilterTokenSequence(a1, a3 + 40 * CandidateKeyphraseRangeFromSequenceRange, v12)) {
    return 0;
  }
  uint64_t result = lm_shouldAcceptKeyphraseCandidate(a1, a3, v13, v14, (double *)&v16);
  if (result)
  {
    if (a6)
    {
      *a6 = v13;
      a6[1] = v14;
    }
    if (a7) {
      *a7 = v16;
    }
    return 1;
  }
  return result;
}

BOOL lex_getCandidateKeyphrase(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, double *a7)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  uint64_t CandidateKeyphraseRangeFromSequenceRange = extractCandidateKeyphraseRangeFromSequenceRange(a1, a2, a3, a4, a5);
  BOOL result = CandidateKeyphraseRangeFromSequenceRange != -1 && (unint64_t)(v11 - 1) < 0xA;
  if (!result) {
    return result;
  }
  uint64_t v15 = v11;
  long long v30 = a6;
  long long v31 = a7;
  double v32 = 0.0;
  bzero(__s, 0x400uLL);
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v29 = v15;
  uint64_t v18 = CandidateKeyphraseRangeFromSequenceRange + v15;
  uint64_t v19 = (double *)(a3 + 40 * CandidateKeyphraseRangeFromSequenceRange + 24);
  double v20 = 0.0;
  uint64_t v21 = CandidateKeyphraseRangeFromSequenceRange;
  do
  {
    double v22 = *v19;
    int v23 = snprintf(&__s[v17], 1024 - v17, "%d/", *((_DWORD *)v19 - 1));
    if (v22 != 0.0)
    {
      double v20 = v20 + v22;
      double v32 = v20;
      ++v16;
    }
    v17 += v23;
    ++v21;
    v19 += 5;
  }
  while (v21 < v18);
  if (v20 == 0.0)
  {
    uint64_t v24 = v30;
    uint64_t v25 = v29;
  }
  else
  {
    uint64_t v24 = v30;
    uint64_t v25 = v29;
    if (v16)
    {
      double v20 = v20 / (double)v16;
      double v32 = v20;
    }
  }
  size_t v26 = strlen(__s);
  __s[v26] = 0;
  uint64_t v28 = *(void *)(a1 + 8);
  if (v28) {
    goto LABEL_19;
  }
  SIGeneralTrieContainsKey(0, __s, v26, 0, (void **)&v32);
  uint64_t v28 = *(void *)(a1 + 8);
  if (v28)
  {
    double v20 = v32;
LABEL_19:
    v27.n128_f64[0] = v20;
    SIGeneralTrieSetKeyWithScore(v28, (uint64_t)__s, v26, 3, v27);
  }
  if (v24)
  {
    *uint64_t v24 = CandidateKeyphraseRangeFromSequenceRange;
    v24[1] = v25;
  }
  BOOL result = 1;
  if (v31) {
    double *v31 = v32;
  }
  return result;
}

BOOL checkIsNonPhraseToken(int a1, uint64_t a2, uint64_t *a3)
{
  if (!*((unsigned char *)a3 + 32)) {
    return 1;
  }
  uint64_t v3 = *a3;
  if (*a3 == -1 || !a3[1]) {
    return 0;
  }
  unsigned int v4 = *((_DWORD *)a3 + 5);
  if (v4)
  {
    int v5 = *((_DWORD *)a3 + 4);
    if (v4 <= 0x40 && (v5 - 5) < 0xFFFFFFFE) {
      return 1;
    }
    if (!v5)
    {
      double v7 = (a1 - 4) > 6 ? -3.7 : dbl_1BDB23780[a1 - 4];
      if (*((double *)a3 + 3) > v7) {
        return 1;
      }
    }
  }
  if (*(void *)a2 == -1) {
    return 0;
  }
  uint64_t v8 = *(void *)(a2 + 8);
  if (!v8) {
    return 0;
  }
  int v9 = *(_DWORD *)(a2 + 16);
  if (v9 != 3)
  {
    if (v9 != 2 || *((_DWORD *)a3 + 4) != 2) {
      goto LABEL_21;
    }
    return 1;
  }
  if (*((_DWORD *)a3 + 4) == 2) {
    return 0;
  }
LABEL_21:
  unsigned int v10 = *(_DWORD *)(a2 + 20);
  uint64_t v11 = v8 + *(void *)a2;
  if (v10 <= 0x40 && v10 != 24 && v11 == v3 || v4 == 24 && v3 > v11) {
    return 1;
  }
  return v10 == 24 && v11 != v3;
}

uint64_t extractCandidateKeyphraseRangeFromSequenceRange(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = -1;
  if (a4 == -1 || !a5) {
    return v5;
  }
  if (a4 < 0)
  {
    uint64_t v11 = a2[3];
    uint64_t v12 = *(void *)(v11 + 16 * a4);
    uint64_t v8 = a5;
  }
  else
  {
    uint64_t v6 = 16 * a4;
    double v7 = (unsigned int *)(a3 + 40 * a4 + 20);
    uint64_t v8 = a5;
    for (uint64_t i = a4; ; ++i)
    {
      unsigned int v10 = *v7;
      v7 += 10;
      if (v10 > 0x40) {
        break;
      }
      v6 += 16;
      if (!--v8) {
        return -1;
      }
    }
    if ((a4 & 0x8000000000000000) == 0)
    {
      for (CFIndex j = (_DWORD *)(a3 + 40 * (a4 + a5) - 24); j[1] < 0x41u || *j == 2; j -= 10)
      {
        if (!--v8) {
          return -1;
        }
      }
    }
    uint64_t v11 = a2[3];
    uint64_t v12 = *(void *)(v11 + v6);
    if (!i)
    {
      a4 = 0;
      uint64_t v16 = 0;
      uint64_t v15 = -1;
      goto LABEL_18;
    }
    a4 = i;
  }
  uint64_t v14 = v11 + 16 * a4;
  uint64_t v15 = *(void *)(v14 - 16);
  uint64_t v16 = *(void *)(v14 - 8);
LABEL_18:
  uint64_t v17 = v8 + a4;
  if (v8 + a4 >= a2[5])
  {
    uint64_t v20 = 0;
    uint64_t v19 = -1;
  }
  else
  {
    uint64_t v18 = (uint64_t *)(v11 + 16 * v17);
    uint64_t v19 = *v18;
    uint64_t v20 = v18[1];
  }
  if (v15 != -1)
  {
    unsigned __int8 v21 = 0;
    if (v16 && v16 <= 1)
    {
      unsigned int v22 = *(unsigned __int16 *)(a2[2] + 2 * v15);
      unsigned __int8 v21 = vmaxv_u16((uint16x4_t)vceq_s16(vdup_n_s16(v22), (int16x4_t)0x26002B005F002DLL)) | (v22 == 58);
    }
    if ((v21 & (v16 + v15 == v12)) != 0) {
      uint64_t v8 = 0;
    }
  }
  if (v19 == -1 || !v20 || v20 > 1)
  {
    if (!v8) {
      return -1;
    }
  }
  else
  {
    unsigned int v23 = *(unsigned __int16 *)(a2[2] + 2 * v19);
    char v24 = (vmaxv_u16((uint16x4_t)vceq_s16(vdup_n_s16(v23), (int16x4_t)0x26002B005F002DLL)) | (v23 == 58)) & (*(void *)(v11 + 16 * v17 - 8) + *(void *)(v11 + 16 * v17 - 16) == v19);
    uint64_t v5 = -1;
    if ((v24 & 1) != 0 || !v8) {
      return v5;
    }
  }
  if ((*(unsigned char *)(a1 + 56) & 8) != 0 && a5 > 2) {
    v8 -= *(_DWORD *)(a3 + 40 * (a4 + v8) - 24) == 6;
  }
  if (v8 < 2)
  {
    uint64_t v29 = v8 - (*(_DWORD *)(a3 + 40 * a4 + 16) == 3);
  }
  else
  {
    uint64_t v25 = v8 + a4;
    size_t v26 = (int *)(a3 + 40 * a4 + 16);
    uint64_t v27 = a4;
    while (1)
    {
      int v28 = *v26;
      v26 += 10;
      if (v28 != 7) {
        break;
      }
      if (++v27 >= v25) {
        return -1;
      }
    }
    uint64_t v30 = a3 + 40 * v25;
    if (*(_DWORD *)(v30 - 24)
      || ((double v31 = *(double *)(v30 - 16), v32 = *(_DWORD *)(a1 + 40) - 4, v32 > 6)
        ? (double v33 = -3.6)
        : (double v33 = dbl_1BDB237B8[v32]),
          v31 <= v33))
    {
      uint64_t v29 = v8;
    }
    else
    {
      uint64_t v29 = v8 - 1;
    }
  }
  if (a4 == -1) {
    return -1;
  }
  uint64_t v5 = a4;
  if (!v29) {
    return -1;
  }
  return v5;
}

uint64_t lm_shouldFilterTokenSequence(uint64_t result, uint64_t a2, uint64_t a3)
{
  v12[1] = *MEMORY[0x1E4F143B8];
  if (result)
  {
    uint64_t v4 = result;
    BOOL result = 1;
    if (a2)
    {
      if (a3)
      {
        if ((*(unsigned char *)(v4 + 56) & 0x10) != 0)
        {
          MEMORY[0x1F4188790](1);
          double v7 = (char *)v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
          bzero(v7, v6);
          if (a3 >= 1)
          {
            uint64_t v8 = (int *)(a2 + 20);
            int v9 = v7;
            uint64_t v10 = a3;
            do
            {
              int v11 = *v8;
              v8 += 10;
              _DWORD *v9 = v11;
              if (LMLanguageModelTokenSequenceIsBlocklisted()) {
                return 1;
              }
              ++v9;
            }
            while (--v10);
          }
          if (LMLanguageModelTokenSequenceIsBlocklisted()) {
            return 1;
          }
        }
        return 0;
      }
    }
  }
  return result;
}

uint64_t lm_shouldAcceptKeyphraseCandidate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double *a5)
{
  uint64_t v40 = a1;
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  if ((unint64_t)(a4 - 11) < 0xFFFFFFFFFFFFFFF6) {
    return 0;
  }
  uint64_t v36 = a5;
  double v42 = 0.0;
  bzero(v43, 0x400uLL);
  uint64_t v38 = &v35;
  MEMORY[0x1F4188790](v9);
  int v39 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  bzero(v39, v10);
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (double *)((char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  bzero(v13, v12);
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v37 = a4;
  uint64_t v17 = a3 + a4;
  uint64_t v18 = (int *)(a2 + 40 * a3 + 20);
  do
  {
    int v19 = *(v18 - 1);
    if (v19 != 4)
    {
      int v41 = *v18;
      LMLanguageModelJointProbability();
      double v21 = v20;
      if (v19 == 7) {
        ++v16;
      }
      int v22 = snprintf(&v43[v15], 1024 - v15, "%d/", v41);
      if (v21 != 0.0)
      {
        *(_DWORD *)&v39[4 * v14] = v41;
        v13[v14++] = v21;
      }
      v15 += v22;
    }
    v18 += 10;
    ++a3;
  }
  while (a3 < v17);
  if (v16 > 1 && (v37 <= 3 && v37 == v16 || v37 >= 4 && v37 - v16 < v16)) {
    return 0;
  }
  size_t v23 = strlen(v43);
  v43[v23] = 0;
  uint64_t v25 = *(void *)(v40 + 8);
  if (v25 && SIGeneralTrieContainsKey(v25, v43, v23, 0, (void **)&v42)) {
    goto LABEL_31;
  }
  uint64_t v26 = v14 - 1;
  if (v14 == 1)
  {
    double v27 = *v13;
  }
  else
  {
    if (v14 <= 0)
    {
      double v42 = 0.0;
      goto LABEL_31;
    }
    LMLanguageModelJointProbability();
    double v29 = *v13;
    int v28 = v13 + 1;
    double v30 = v29;
    do
    {
      double v31 = *v28++;
      double v30 = v30 + v31;
      --v26;
    }
    while (v26);
    double v32 = v24.n128_f64[0] - v30;
    BOOL v33 = vabdd_f64(v24.n128_f64[0], v30) == INFINITY;
    double v27 = 0.0;
    if (!v33) {
      double v27 = v32;
    }
  }
  double v42 = v27;
  BOOL v33 = v27 == 0.0 || v14 == 0;
  if (!v33) {
    double v42 = v27 / (double)v14;
  }
LABEL_31:
  uint64_t v34 = *(void *)(v40 + 8);
  if (v34)
  {
    v24.n128_f64[0] = v42;
    SIGeneralTrieSetKeyWithScore(v34, (uint64_t)v43, v23, 3, v24);
  }
  if ((*(unsigned char *)(v40 + 56) & 0x40) != 0 && (v14 == 1 && v42 > -3.5 || v14 >= 2 && fabs(v42) > 2.5)) {
    return 0;
  }
  if (v36) {
    *uint64_t v36 = v42;
  }
  return 1;
}

uint64_t ___ZL19languageIsPreferred12SILanguageID_block_invoke(uint64_t result)
{
  if (gAvailableLanguages)
  {
    uint64_t v1 = result;
    Language = SILanguagesGetLanguage(*(_DWORD *)(result + 40));
    CFArrayRef v3 = (const __CFArray *)gAvailableLanguages;
    v4.length = CFArrayGetCount((CFArrayRef)gAvailableLanguages);
    v4.locatiouint64_t n = 0;
    BOOL result = CFArrayContainsValue(v3, v4, Language);
    if (result) {
      *(unsigned char *)(*(void *)(*(void *)(v1 + 32) + 8) + 24) = 1;
    }
  }
  return result;
}

void std::__function::__func<SIRetainLanguageResources(SILanguageID,long,unsigned int)::$_0,std::allocator<SIRetainLanguageResources(SILanguageID,long,unsigned int)::$_0>,void * ()(void)>::~__func()
{
}

__n128 std::__function::__func<SIRetainLanguageResources(SILanguageID,long,unsigned int)::$_0,std::allocator<SIRetainLanguageResources(SILanguageID,long,unsigned int)::$_0>,void * ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1F181DC48;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<SIRetainLanguageResources(SILanguageID,long,unsigned int)::$_0,std::allocator<SIRetainLanguageResources(SILanguageID,long,unsigned int)::$_0>,void * ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F181DC48;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t *std::__function::__func<SIRetainLanguageResources(SILanguageID,long,unsigned int)::$_0,std::allocator<SIRetainLanguageResources(SILanguageID,long,unsigned int)::$_0>,void * ()(void)>::operator()(uint64_t a1)
{
  return SILanguageResourcesCreate(*(_DWORD *)(a1 + 8), *(void *)(a1 + 16), *(_DWORD *)(a1 + 24), 0, 0);
}

SIResourceLock *std::unique_ptr<SIResourceLock>::reset[abi:ne180100](SIResourceLock **a1, SIResourceLock *a2)
{
  __n128 result = *a1;
  *a1 = a2;
  if (result)
  {
    SIResourceLock::~SIResourceLock(result);
    JUMPOUT(0x1C1883920);
  }
  return result;
}

CFIndex SICurrenciesGetCurrencyID(const void *a1)
{
  if (SICurrenciesGetCurrencyID::onceToken != -1) {
    dispatch_once(&SICurrenciesGetCurrencyID::onceToken, &__block_literal_global_10);
  }
  CFArrayRef v2 = (const __CFArray *)SICurrenciesGetCurrencyID::sCurrencyStrings;
  v4.length = CFArrayGetCount((CFArrayRef)SICurrenciesGetCurrencyID::sCurrencyStrings);
  v4.locatiouint64_t n = 0;
  CFIndex result = CFArrayGetFirstIndexOfValue(v2, v4, a1);
  if (result == -1) {
    return 0;
  }
  else {
    return result;
  }
}

CFArrayRef __SICurrenciesGetCurrencyID_block_invoke()
{
  CFArrayRef result = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)gCurrencyTags, 169, MEMORY[0x1E4F1D510]);
  SICurrenciesGetCurrencyID::sCurrencyStrings = (uint64_t)result;
  return result;
}

uint64_t SICurrenciesGetCurrencyCode(const void *a1)
{
  return gCurrencyCodes[SICurrenciesGetCurrencyID(a1)];
}

__CFString *SICurrenciesGetCurrencyFromCode(uint64_t a1)
{
  uint64_t v2 = 0;
  CFArrayRef result = @"NONE";
  while (gCurrencyCodes[v2] != a1)
  {
    if (++v2 == 169) {
      return result;
    }
  }
  return gCurrencyTags[v2];
}

__CFString *SICurrenciesGetCurrencyFromID(unsigned int a1)
{
  if (a1 > 0xA8) {
    return @"NONE";
  }
  else {
    return gCurrencyTags[a1];
  }
}

void *fsi_create_walk()
{
  uint64_t v0 = malloc_type_calloc(1uLL, 0x4620uLL, 0x10F0040DF486990uLL);
  atomic_fetch_add_explicit(&gIteratorCount, 1u, memory_order_relaxed);
  if (initWalk((uint64_t)v0))
  {
    fsi_close(v0);
    return 0;
  }
  return v0;
}

uint64_t initWalk(uint64_t a1)
{
  uint64_t v1 = (void *)MEMORY[0x1F4188790](a1);
  unsigned int v3 = v2;
  size_t v5 = v4;
  double v7 = v6;
  uint64_t v9 = v8;
  uint64_t v10 = (uint64_t)v1;
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  bzero(v1, 0x4620uLL);
  __strlcpy_chk();
  initCapabilities(v10);
  *(_DWORD *)uint64_t v10 = 0;
  long long v46 = xmmword_1BDB23E60;
  uint64_t v47 = 0;
  if (v7) {
    uint64_t v11 = v7;
  }
  else {
    uint64_t v11 = &v46;
  }
  if (!v5) {
    size_t v5 = fsi_attr_size((uint64_t)v11);
  }
  *(void *)(v10 + 9688) = malloc_type_malloc(0x1000uLL, 0x2004093837F09uLL);
  *(void *)(v10 + 9680) = SStackCreate(v5 << 8);
  *(void *)(v10 + 9640) = SQueueCreate(v5 << 8);
  *(_DWORD *)(v10 + 9696) = 0;
  *(_DWORD *)(v10 + 9704) = -1;
  uint64_t v12 = *((void *)v11 + 2);
  *(_OWORD *)(v10 + 1032) = *v11;
  *(void *)(v10 + 1048) = v12;
  *(void *)(v10 + 1056) = v5;
  int v43 = 5;
  long long v44 = xmmword_1BDB23D40;
  int v45 = 0;
  fsi_attr_mapping_descriptor((uint64_t)v11, (uint64_t)&v43, (char *)(v10 + 1128));
  bzero(v50, 0x8A8uLL);
  int v40 = 5;
  long long v41 = xmmword_1BDB23D50;
  int v42 = 0;
  fsi_attr_mapping_descriptor((uint64_t)v11, (uint64_t)&v40, v50);
  uint64_t v13 = v51;
  uint64_t v14 = v52;
  *(void *)(v10 + 1096) = v51;
  *(void *)(v10 + 1080) = v14;
  uint64_t v15 = v53;
  uint64_t v16 = v54;
  *(void *)(v10 + 1088) = v53;
  *(void *)(v10 + 1112) = v16;
  uint64_t v17 = v55;
  *(void *)(v10 + 1120) = v55;
  *(_DWORD *)(v10 + 1028) = v3 & 0xFFFFFFF9 | 4;
  *(_DWORD *)(v10 + 9708) = 0;
  *(_DWORD *)(v10 + 9712) = (~v3 & 0x18) == 0;
  if (v7) {
    uint64_t v18 = v7;
  }
  else {
    uint64_t v18 = &v46;
  }
  if ((*((_DWORD *)v18 + 1) & 0x80000000) == 0) {
    initWalk_cold_1();
  }
  if (!v14) {
    initWalk_cold_2();
  }
  if (!v13) {
    initWalk_cold_3();
  }
  if (!v15) {
    initWalk_cold_4();
  }
  if (!v16) {
    initWalk_cold_5();
  }
  if (!v17) {
    initWalk_cold_6();
  }
  *(_DWORD *)(v10 + 9716) = ((v3 >> 5) & 1) == 0;
  *(_DWORD *)(v10 + 9720) = (v3 >> 6) & 1;
  *(unsigned char *)(v10 + 1064) = v3 & 1;
  int v19 = (unsigned char *)(v10 + 8616);
  *(unsigned char *)(v10 + 8616) = 0;
  *(void *)(v10 + 3360) = v10 + 8616;
  *(void *)(v10 + 3376) = v10 + 8616;
  bzero(v49, 0x400uLL);
  if (*v9 == 46)
  {
    double v20 = v9;
    do
    {
      if (v20[1] != 47) {
        break;
      }
      int v21 = *((unsigned __int8 *)v20 + 2);
      v20 += 2;
    }
    while (v21 == 46);
  }
  if ((unint64_t)__strlcpy_chk() > 0x3FF)
  {
    uint64_t v25 = __error();
    int v26 = 63;
LABEL_31:
    int *v25 = v26;
    return 0xFFFFFFFFLL;
  }
  int v22 = strrchr((char *)(v10 + 8616), 47);
  if (!v22 || (size_t v23 = v22, !strcmp((const char *)(v10 + 8616), "/")))
  {
    __strlcpy_chk();
    uint64_t v24 = 0;
    *int v19 = 0;
  }
  else
  {
    uint64_t v24 = v23 - v19;
    __strlcpy_chk();
    if (v23 == v19)
    {
      *(unsigned char *)(v10 + 8617) = 0;
      uint64_t v24 = 1;
    }
    else
    {
      *size_t v23 = 0;
    }
  }
  *(void *)(v10 + 3352) = v24;
  *(void *)(v10 + 9736) = 0;
  if (!(*(void *)(v10 + 1096) | *(void *)(v10 + 1088) | *(void *)(v10 + 1112)))
  {
    uint64_t v25 = __error();
    int v26 = 22;
    goto LABEL_31;
  }
  double v27 = (unsigned int *)malloc_type_malloc(*(void *)(v10 + 1056) + 4, 0x7E0B752EuLL);
  if (md_getattrlist_real(v9, (void *)(v10 + 1032), v27, v5, 8))
  {
LABEL_28:
    int v28 = *__error();
LABEL_29:
    *__error() = v28;
LABEL_50:
    free(v27);
    return 0xFFFFFFFFLL;
  }
  *(_DWORD *)(v10 + 9724) = *(unsigned int *)((char *)v27 + *(void *)(v10 + 1088));
  *(_DWORD *)(v10 + 9728) = *(unsigned int *)((char *)v27 + *(void *)(v10 + 1096));
  uint64_t v29 = *(void *)(v10 + 1080);
  if (v29)
  {
    unint64_t v30 = *v27;
    if (v29 + 8 <= v30)
    {
      double v31 = (char *)v27 + v29;
      double v32 = (char *)v27 + v29 + *(int *)((char *)v27 + v29);
      if (&v32[*(unsigned int *)((char *)v27 + v29 + 4)] <= (char *)v27 + v30 && (!strcmp(v9, "/") || !strcmp(v9, ".")))
      {
        strncpy(v32, v9, 2uLL);
        *((_DWORD *)v31 + 1) = 2;
      }
    }
  }
  if (*(_DWORD *)(v10 + 9708))
  {
    uint64_t v33 = *(void *)((char *)v27 + *(void *)(v10 + 1112));
  }
  else
  {
    bzero(v48, 0x400uLL);
    __strlcpy_chk();
    if (strcmp(v9, ".") && (unint64_t)__strlcat_chk() > 0x3FF)
    {
      int v28 = 63;
      goto LABEL_29;
    }
    atomic_fetch_add_explicit(&gFDCount, 1u, memory_order_relaxed);
    unsigned int v34 = open(v48, 32772);
    if (v34 > 0x7FF)
    {
      if ((v34 & 0x80000000) != 0)
      {
        atomic_fetch_add_explicit(&gFDCount, 0xFFFFFFFF, memory_order_relaxed);
        if (v34 == -1) {
          goto LABEL_28;
        }
      }
    }
    else
    {
      *(_DWORD *)(v10 + 4 * v34 + 9756) = 957;
      ++*(_DWORD *)(v10 + 9752);
    }
    uint64_t v33 = (int)v34;
  }
  if (pushStackEntry(v10, v33)) {
    goto LABEL_50;
  }
  size_t v36 = *(void *)(v10 + 3368);
  uint64_t v37 = *(const void **)(v10 + 3376);
  if (*(void *)(v10 + 9664))
  {
    uint64_t v38 = *(void *)(v10 + 9672);
    if (v38) {
      int v39 = (*(uint64_t (**)(uint64_t, uint64_t))(v38 + 16))(v38, v10);
    }
    else {
      int v39 = 1;
    }
  }
  else
  {
    int v39 = 0;
  }
  addIntoChildList(v10, v27, v36, v37, v39);
  free(v27);
  return 0;
}

void fsi_close(void *a1)
{
  internalClose((uint64_t)a1);
  atomic_fetch_add_explicit(&gIteratorCount, 0xFFFFFFFF, memory_order_relaxed);
  unsigned int v2 = (const void *)a1[1208];
  if (v2) {
    _Block_release(v2);
  }
  unsigned int v3 = (const void *)a1[1209];
  if (v3) {
    _Block_release(v3);
  }

  free(a1);
}

void *fsi_set_sort_comparator(uint64_t a1, void *aBlock)
{
  CFArrayRef result = _Block_copy(aBlock);
  *(void *)(a1 + 9664) = result;
  *(_DWORD *)(a1 + 9716) = 1;
  return result;
}

void *fsi_set_sort_check(uint64_t a1, void *aBlock)
{
  CFArrayRef result = _Block_copy(aBlock);
  *(void *)(a1 + 9672) = result;
  return result;
}

char *fsi_create_hybrid(double a1, uint64_t a2, uint64_t a3, size_t a4, int a5, uint64_t a6, int *a7, int *a8, int a9)
{
  uint64_t v16 = (char *)malloc_type_calloc(1uLL, 0x4620uLL, 0x10F0040DF486990uLL);
  atomic_fetch_add_explicit(&gIteratorCount, 1u, memory_order_relaxed);
  __strlcpy_chk();
  initCapabilities((uint64_t)v16);
  *(_DWORD *)uint64_t v16 = 2;
  v43[1] = 0;
  v43[2] = 0;
  uint64_t v42 = 0;
  v43[0] = 0x200000000000005;
  int v41 = 12;
  int v39 = 12;
  uint64_t v40 = -1;
  if (a6) {
    uint64_t v17 = a8;
  }
  else {
    uint64_t v17 = &v39;
  }
  if (a6) {
    uint64_t v18 = a7;
  }
  else {
    uint64_t v18 = &v41;
  }
  if (a6) {
    int v19 = (void *)a6;
  }
  else {
    int v19 = v43;
  }
  uint64_t v20 = *(void *)(a3 + 16);
  *(_OWORD *)(v16 + 4148) = *(_OWORD *)a3;
  *(void *)(v16 + 4164) = v20;
  int v21 = *((unsigned __int16 *)v16 + 2074);
  if (*((_WORD *)v16 + 2074))
  {
    int v22 = (int *)(a6 + 4);
    if (!a6) {
      int v22 = (int *)v43 + 1;
    }
    size_t v23 = v16 + 4152;
    int v24 = *((unsigned __int16 *)v16 + 2074);
    uint64_t v25 = v16 + 4152;
    do
    {
      int v26 = *v22++;
      *v25++ |= v26;
      --v24;
    }
    while (v24);
    double v27 = &v37;
    long long v37 = xmmword_1BDB23D60;
    int v38 = 0;
    do
    {
      int v28 = *(_DWORD *)v27;
      double v27 = (long long *)((char *)v27 + 4);
      *v23++ |= v28;
      --v21;
    }
    while (v21);
  }
  v36[1] = 0;
  v36[2] = 0;
  v36[0] = 0x400000000005;
  *((void *)v16 + 138) = fsi_attr_offset((uint64_t)(v16 + 4148), (uint64_t)v36);
  waluint64_t k = fsi_create_walk();
  *((void *)v16 + 1076) = walk;
  if (walk)
  {
    *((_DWORD *)v16 + 257) = a9;
    *((double *)v16 + 427) = a1;
    long long v30 = *(_OWORD *)a3;
    *((void *)v16 + 131) = *(void *)(a3 + 16);
    *(_OWORD *)(v16 + 1032) = v30;
    if (!a4) {
      a4 = fsi_attr_size(a3);
    }
    *((void *)v16 + 132) = a4;
    *((void *)v16 + 429) = a4;
    *((void *)v16 + 430) = malloc_type_malloc(a4, 0xE75F5C4DuLL);
    long long v31 = *(_OWORD *)v19;
    *((void *)v16 + 433) = v19[2];
    *(_OWORD *)(v16 + 3448) = v31;
    double v32 = malloc_type_malloc(*v18, 0x2E03AA8CuLL);
    memcpy(v32, v18, *v18);
    *((void *)v16 + 434) = v32;
    uint64_t v33 = malloc_type_malloc(*v17, 0xC626BDFBuLL);
    memcpy(v33, v17, *v17);
    *((void *)v16 + 435) = v33;
    *((_DWORD *)v16 + 856) = a5 | 1;
    fsi_attr_mapping_descriptor((uint64_t)(v16 + 4148), (uint64_t)v19, v16 + 4176);
    fsi_attr_mapping_descriptor((uint64_t)(v16 + 4148), a3, v16 + 6392);
  }
  else
  {
    fsi_close(v16);
    return 0;
  }
  return v16;
}

uint64_t initCapabilities(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  bzero(&v12, 0x878uLL);
  uint64_t result = statfs((const char *)(a1 + 4), &v12);
  if (!result)
  {
    uint64_t v11 = 0;
    long long v10 = xmmword_1BDB23E78;
    int v9 = 0;
    long long v7 = 0u;
    long long v8 = 0u;
    uint64_t result = md_getattrlist_real(v12.f_mntonname, &v10, &v7, 0x24uLL, 0);
    if (!result)
    {
      unsigned int v3 = DWORD1(v8);
      int v4 = DWORD1(v7);
      char v5 = BYTE8(v7) & BYTE8(v8);
      *(unsigned char *)(a1 + 3408) = BYTE8(v7) & BYTE8(v8) & 1;
      *(unsigned char *)(a1 + 3409) = (v5 & 8) != 0;
      unsigned int v6 = ((v4 & v3) >> 14) & 1;
      if (!(*(_DWORD *)v12.f_fstypename ^ 0x73666361 | v12.f_fstypename[4])) {
        LOBYTE(v6) = 1;
      }
      *(unsigned char *)(a1 + 3410) = v6;
    }
  }
  return result;
}

char *fsi_create_search(double a1, uint64_t a2, uint64_t a3, unint64_t a4, int a5, void *a6, unsigned int *a7, unsigned int *a8, char a9)
{
  uint64_t v16 = (char *)malloc_type_calloc(1uLL, 0x4620uLL, 0x10F0040DF486990uLL);
  atomic_fetch_add_explicit(&gIteratorCount, 1u, memory_order_relaxed);
  __strlcpy_chk();
  initCapabilities((uint64_t)v16);
  *(_DWORD *)uint64_t v16 = 1;
  v16[1064] = a9 & 1;
  if (a9)
  {
    v35[1] = 0;
    v35[2] = 0;
    v35[0] = 0x200000000000005;
    *((void *)v16 + 139) = fsi_attr_offset(a3, (uint64_t)v35);
  }
  *((_DWORD *)v16 + 857) = 1024;
  long long v17 = *(_OWORD *)a3;
  *((void *)v16 + 131) = *(void *)(a3 + 16);
  *(_OWORD *)(v16 + 1032) = v17;
  if (!a4) {
    a4 = fsi_attr_size(a3);
  }
  *((void *)v16 + 132) = a4;
  *((void *)v16 + 429) = a4 << 10;
  *((void *)v16 + 430) = malloc_type_malloc(a4 << 10, 0xBF873F4BuLL);
  v34[1] = 0;
  v34[2] = 0;
  v34[0] = 0x200000000000005;
  if (!a6)
  {
    a8 = (unsigned int *)&unk_1BDB23E9C;
    a7 = (unsigned int *)&unk_1BDB23E90;
  }
  uint64_t v18 = v34;
  if (a6) {
    uint64_t v18 = a6;
  }
  uint64_t v19 = v18[2];
  *(_OWORD *)(v16 + 3448) = *(_OWORD *)v18;
  *((void *)v16 + 433) = v19;
  uint64_t v20 = malloc_type_malloc(*a7, 0x31A948F5uLL);
  memcpy(v20, a7, *a7);
  *((void *)v16 + 434) = v20;
  int v21 = (unsigned int *)malloc_type_malloc(*a8, 0x9A324D4AuLL);
  memcpy(v21, a8, *a8);
  *((void *)v16 + 435) = v21;
  *((_DWORD *)v16 + 856) = a5 | 1;
  *((double *)v16 + 427) = a1;
  double v22 = 1.0;
  if (a1 != 0.0) {
    double v22 = a1;
  }
  uint64_t v23 = *((void *)v16 + 430);
  uint64_t v24 = *((void *)v16 + 429);
  uint64_t v25 = *((int *)v16 + 857);
  int v26 = (unsigned int *)*((void *)v16 + 434);
  uint64_t v27 = *v26;
  uint64_t v28 = *v21;
  *((void *)v16 + 436) = v16 + 1032;
  *((void *)v16 + 437) = v23;
  *((void *)v16 + 438) = v24;
  *((void *)v16 + 439) = v25;
  *((void *)v16 + 440) = (uint64_t)v22;
  *((_DWORD *)v16 + 882) = 0;
  *((void *)v16 + 442) = v26;
  *((void *)v16 + 443) = v27;
  *((void *)v16 + 444) = v21;
  *((void *)v16 + 445) = v28;
  *((_OWORD *)v16 + 223) = *(_OWORD *)(v16 + 3448);
  *((void *)v16 + 448) = *((void *)v16 + 433);
  int v31 = 5;
  long long v32 = xmmword_1BDB23D40;
  int v33 = 0;
  fsi_attr_mapping_descriptor((uint64_t)(v16 + 1032), (uint64_t)&v31, v16 + 1128);
  return v16;
}

void internalClose(uint64_t a1)
{
  if (!*(_DWORD *)a1)
  {
    if (!*(_DWORD *)(a1 + 9708))
    {
      for (int i = *(_DWORD *)(a1 + 9696); i; *(_DWORD *)(a1 + 9696) = i)
      {
        uint64_t v10 = *(void *)(*(void *)(a1 + 9688) + 8 * --i);
        if (!v10) {
          break;
        }
        uint64_t v11 = *(void *)(v10 + 48);
        if (v11 != -1)
        {
          if ((v11 & 0x80000000) == 0)
          {
            atomic_fetch_add_explicit(&gFDCount, 0xFFFFFFFF, memory_order_relaxed);
            if ((int)v11 <= 2047)
            {
              int v12 = *(_DWORD *)(a1 + 9752);
              *(_DWORD *)(a1 + 9752) = v12 - 1;
              uint64_t v13 = a1 + 4 * (int)v11;
              int v14 = *(_DWORD *)(v13 + 9756);
              if (v14 < 0 || v12 <= 0) {
                internalClose_cold_2();
              }
              if (v14) {
                *(_DWORD *)(v13 + 9756) = -v14;
              }
            }
          }
          close(v11);
          int i = *(_DWORD *)(a1 + 9696) - 1;
        }
      }
    }
    free(*(void **)(a1 + 9688));
    free(*(void **)(a1 + 9648));
    *(void *)(a1 + 9648) = 0;
    uint64_t v2 = *(unsigned int *)(a1 + 9704);
    if ((v2 & 0x80000000) == 0)
    {
      atomic_fetch_add_explicit(&gFDCount, 0xFFFFFFFF, memory_order_relaxed);
      if (v2 <= 0x7FF)
      {
        int v3 = *(_DWORD *)(a1 + 9752);
        *(_DWORD *)(a1 + 9752) = v3 - 1;
        uint64_t v4 = a1 + 4 * v2;
        int v5 = *(_DWORD *)(v4 + 9756);
        if (v5 < 0 || v3 <= 0) {
          internalClose_cold_1();
        }
        if (v5) {
          *(_DWORD *)(v4 + 9756) = -v5;
        }
      }
      close(v2);
    }
    unsigned int v6 = *(uint64_t **)(a1 + 9680);
    if (v6) {
      SStackDestroy(v6);
    }
    uint64_t v7 = *(void *)(a1 + 9640);
    if (v7) {
      SQueueDestroy(v7);
    }
  }
  free(*(void **)(a1 + 3440));
  free(*(void **)(a1 + 3472));
  free(*(void **)(a1 + 3480));
  if (*(void *)(a1 + 8608)) {
    fsi_close();
  }
  long long v8 = *(const void **)(a1 + 1072);
  if (v8)
  {
    CFRelease(v8);
    *(void *)(a1 + 1072) = 0;
  }
}

uint64_t fsi_debug(uint64_t result, uint64_t a2)
{
  *(void *)(result + 9744) = a2;
  return result;
}

uint64_t fsi_suspend(uint64_t result)
{
  do
  {
    *(_DWORD *)(result + 3400) = 1;
    uint64_t result = *(void *)(result + 8608);
  }
  while (result);
  return result;
}

uint64_t fsi_reset(uint64_t a1)
{
  char v2 = 0;
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  while (1)
  {
    *(void *)(a1 + 3400) = 0;
    int v3 = *(_DWORD *)a1;
    if (*(_DWORD *)a1 != 2) {
      break;
    }
    a1 = *(void *)(a1 + 8608);
    char v2 = 1;
  }
  if (v3 == 1)
  {
    unsigned int v4 = 0;
    *(_DWORD *)(a1 + 3424) |= 1u;
  }
  else if (v3)
  {
    unsigned int v4 = 0;
  }
  else
  {
    internalClose(a1);
    bzero(v6, 0x400uLL);
    __strlcpy_chk();
    if (initWalk(a1)) {
      unsigned int v4 = -1;
    }
    else {
      unsigned int v4 = 0;
    }
  }
  if (v2) {
    return 0;
  }
  else {
    return v4;
  }
}

uint64_t fsi_level(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8608);
  if (!v1) {
    uint64_t v1 = a1;
  }
  return *(unsigned int *)(v1 + 9696);
}

uint64_t fsi_total_descriptor_count()
{
  return gFDCount;
}

uint64_t fsi_descriptor_count(uint64_t a1)
{
  return *(unsigned int *)(a1 + 9752);
}

uint64_t fsi_total_iterator_count()
{
  return gIteratorCount;
}

uint64_t fsi_uses_volfs(uint64_t a1)
{
  return *(unsigned int *)(a1 + 9708);
}

uint64_t fsi_get_stat_attr_mapping(uint64_t a1)
{
  return a1 + 1128;
}

uint64_t fsi_get_attrs(uint64_t a1)
{
  return a1 + 1032;
}

_DWORD *fsi_get_hybrid_mapping_descriptor(_DWORD *a1)
{
  if (*a1 == 2) {
    return a1 + 1598;
  }
  else {
    return 0;
  }
}

uint64_t fsi_is_suspended(uint64_t a1)
{
  return *(unsigned int *)(a1 + 3404);
}

void fsi_set_visited_fileid_set(uint64_t a1, CFTypeRef cf)
{
  CFTypeRef v3 = CFRetain(cf);
  uint64_t v4 = *(void *)(a1 + 8608);
  if (v4)
  {
    int v5 = *(const void **)(v4 + 1072);
    if (v5)
    {
      CFRelease(v5);
      uint64_t v4 = *(void *)(a1 + 8608);
    }
    unsigned int v6 = (void *)(v4 + 1072);
  }
  else
  {
    unsigned int v6 = (void *)(a1 + 1072);
    uint64_t v7 = *(const void **)(a1 + 1072);
    if (v7) {
      CFRelease(v7);
    }
  }
  *unsigned int v6 = v3;
}

uint64_t fsi_copy_visited_fileid_set(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8608);
  if (!v1) {
    uint64_t v1 = a1;
  }
  uint64_t v2 = *(void *)(v1 + 1072);
  if (v2) {
    CFRetain(*(CFTypeRef *)(v1 + 1072));
  }
  return v2;
}

uint64_t fsi_clear_visited_fileid(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 8608);
  if (!v1) {
    uint64_t v1 = result;
  }
  *(unsigned char *)(v1 + 1065) = 0;
  return result;
}

uint64_t fsi_iterate(uint64_t a1, long long *a2)
{
  return fsi_iterate_f(a1, a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))callBlock);
}

uint64_t fsi_iterate_f(uint64_t a1, long long *a2, uint64_t (*a3)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))
{
  uint64_t v160 = *MEMORY[0x1E4F143B8];
  long long v154 = 0u;
  long long v155 = 0u;
  *(_DWORD *)(a1 + 3404) = 0;
  uint64_t v4 = *(void *)(a1 + 8608);
  if (v4) {
    *(_DWORD *)(v4 + 3404) = 0;
  }
  double Current = CFAbsoluteTimeGetCurrent();
  int v6 = *(_DWORD *)a1;
  if (!*(_DWORD *)a1)
  {
    uint64_t v7 = a1;
    goto LABEL_8;
  }
  if (v6 == 1)
  {
    if (*(unsigned char *)(a1 + 1064) && !*(void *)(a1 + 1072)) {
      *(void *)(a1 + 1072) = SIUINT64SetCreate(*MEMORY[0x1E4F1CF80]);
    }
    double v10 = CFAbsoluteTimeGetCurrent();
    while (1)
    {
      v158.d_ino = 0;
      if (searchfs((const char *)(a1 + 4), (fssearchblock *)(a1 + 3488), &v158.d_ino, 0x8000103u, *(_DWORD *)(a1 + 3424), (searchstate *)(a1 + 3592)))
      {
        int v11 = *__error();
        BOOL v12 = v11 == 35;
        if (v11 != 35 && v11 != 0)
        {
          *(_DWORD *)(a1 + 3424) &= ~1u;
          if (v11 != 35) {
            goto LABEL_357;
          }
          goto LABEL_36;
        }
      }
      else
      {
        BOOL v12 = 0;
        int v11 = 0;
      }
      if (v158.d_ino) {
        break;
      }
LABEL_35:
      *(_DWORD *)(a1 + 3424) &= ~1u;
      if (!v12)
      {
LABEL_357:
        unsigned int v24 = 0;
        int v23 = *(_DWORD *)(a1 + 3400);
LABEL_42:
        *(_DWORD *)(a1 + 3404) = v23;
        *(_DWORD *)(a1 + 3400) = 0;
        *__error() = v11;
        if (v11) {
          uint64_t v25 = 1;
        }
        else {
          uint64_t v25 = v24;
        }
        goto LABEL_346;
      }
LABEL_36:
      double v20 = *(double *)(a1 + 3416);
      CFAbsoluteTime v21 = CFAbsoluteTimeGetCurrent();
      uint64_t v22 = a1;
      if (v20 < v21 - v10)
      {
        do
        {
          *(_DWORD *)(v22 + 3400) = 1;
          uint64_t v22 = *(void *)(v22 + 8608);
        }
        while (v22);
      }
      int v23 = *(_DWORD *)(a1 + 3400);
      if (v23)
      {
        unsigned int v24 = 0;
        goto LABEL_42;
      }
    }
    int v14 = *(unsigned int **)(a1 + 3440);
    unsigned int v15 = 1;
    while (1)
    {
      uint64_t v16 = *(void *)(a1 + 1072);
      *(unsigned char *)(a1 + 1065) = v16 != 0;
      if (v16)
      {
        unint64_t v17 = *(void *)((char *)v14 + *(void *)(a1 + 1112));
        if (SIUINT64SetContainsValue(v16, v17)) {
          goto LABEL_34;
        }
        uint64_t v18 = *(void *)(a1 + 1072);
      }
      else
      {
        uint64_t v18 = 0;
        unint64_t v17 = 0;
      }
      *(unsigned char *)(a1 + 1065) = v18 != 0;
      int v19 = a3(a1, a1 + 3344, (uint64_t)a2, *(unsigned int *)(a1 + 3384), (uint64_t)v14);
      if (*(unsigned char *)(a1 + 1065)) {
        SIUINT64SetAddValue(*(void *)(a1 + 1072), v17);
      }
      if (v19 == 1)
      {
        int v23 = 0;
        unsigned int v24 = -1;
        goto LABEL_42;
      }
LABEL_34:
      int v14 = (unsigned int *)((char *)v14 + *v14);
      BOOL v54 = v158.d_ino > v15++;
      if (!v54) {
        goto LABEL_35;
      }
    }
  }
  if (v6 != 2)
  {
    uint64_t v25 = 0xFFFFFFFFLL;
    goto LABEL_346;
  }
  *(double *)&long long v154 = Current;
  *((void *)&v154 + 1) = a3;
  *(void *)&long long v155 = a2;
  *((void *)&v155 + 1) = a1;
  uint64_t v7 = *(void *)(a1 + 8608);
  a3 = hybridSearch;
  a2 = &v154;
LABEL_8:
  if (*(unsigned char *)(v7 + 1064) && !*(void *)(v7 + 1072)) {
    *(void *)(v7 + 1072) = SIUINT64SetCreate(*MEMORY[0x1E4F1CF80]);
  }
  int v8 = *(_DWORD *)(v7 + 9696);
  if (v8) {
    uint64_t v9 = *(void *)(*(void *)(v7 + 9688) + 8 * (v8 - 1));
  }
  else {
    uint64_t v9 = 0;
  }
  int v26 = -1;
  if (*(_DWORD *)(v7 + 9708)) {
    goto LABEL_47;
  }
  atomic_fetch_add_explicit(&gFDCount, 1u, memory_order_relaxed);
  unsigned int v119 = open(".", 32772);
  int v26 = v119;
  if (v119 > 0x7FF)
  {
    if ((v119 & 0x80000000) != 0)
    {
      atomic_fetch_add_explicit(&gFDCount, 0xFFFFFFFF, memory_order_relaxed);
      goto LABEL_338;
    }
  }
  else
  {
    *(_DWORD *)(v7 + 4 * v119 + 9756) = 1607;
    ++*(_DWORD *)(v7 + 9752);
  }
  if ((*(_DWORD *)(v7 + 9704) & 0x80000000) == 0 || v9 && (*(_DWORD *)(v9 + 48) & 0x80000000) == 0)
  {
    if (!MEMORY[0x1C1884060]())
    {
      uint64_t v142 = *(unsigned int *)(v7 + 9704);
      if ((v142 & 0x80000000) == 0)
      {
        atomic_fetch_add_explicit(&gFDCount, 0xFFFFFFFF, memory_order_relaxed);
        if (v142 <= 0x7FF)
        {
          int v143 = *(_DWORD *)(v7 + 9752);
          *(_DWORD *)(v7 + 9752) = v143 - 1;
          uint64_t v144 = v7 + 4 * v142;
          int v145 = *(_DWORD *)(v144 + 9756);
          if (v145 < 0 || v143 <= 0) {
            fsi_iterate_f_cold_8();
          }
          if (v145) {
            *(_DWORD *)(v144 + 9756) = -v145;
          }
        }
      }
      close(v142);
      *(_DWORD *)(v7 + 9704) = -1;
      goto LABEL_47;
    }
    int v120 = *__error();
    atomic_fetch_add_explicit(&gFDCount, 0xFFFFFFFF, memory_order_relaxed);
    if (v26 <= 2047)
    {
      int v121 = *(_DWORD *)(v7 + 9752);
      *(_DWORD *)(v7 + 9752) = v121 - 1;
      uint64_t v122 = v7 + 4 * v26;
      int v123 = *(_DWORD *)(v122 + 9756);
      if (v123 < 0 || v121 <= 0) {
        fsi_iterate_f_cold_9();
      }
      if (v123) {
        *(_DWORD *)(v122 + 9756) = -v123;
      }
    }
    int v124 = v26;
LABEL_337:
    close(v124);
    *__error() = v120;
LABEL_338:
    uint64_t v25 = 1;
    goto LABEL_346;
  }
LABEL_47:
  unsigned int v146 = v26;
  uint64_t v27 = *(void *)(v7 + 1056);
  char v28 = 10;
  if (*(_DWORD *)(v7 + 9712)) {
    char v28 = 0;
  }
  size_t v149 = v27 << v28;
  uint64_t v29 = (char *)malloc_type_malloc(v27 << v28, 0x80A0E6F6uLL);
  int v30 = 0;
  uint64_t v150 = v7 + 3344;
  long long v151 = v29;
  int v148 = (void *)(v7 + 1032);
  do
  {
    if (*(_DWORD *)(v7 + 9700) != 2)
    {
      int v30 = 0;
      *(_DWORD *)(v7 + 9700) = 0;
      if (*(_DWORD *)(v7 + 3400))
      {
LABEL_52:
        *(_DWORD *)(v7 + 9700) = 1;
        goto LABEL_147;
      }
      LODWORD(v31) = 0;
      int v30 = 0;
      while (2)
      {
        int v32 = *(_DWORD *)(v7 + 9696);
        if (!v32) {
          goto LABEL_294;
        }
        while (1)
        {
          int v33 = v32 - 1;
          uint64_t v9 = *(void *)(*(void *)(v7 + 9688) + 8 * (v32 - 1));
          if (!v9) {
            goto LABEL_146;
          }
          unsigned int v34 = *(const char **)v9;
          if (*(void *)v9 && v31 == 0) {
            break;
          }
          if (!*(_DWORD *)(v7 + 9708))
          {
            uint64_t v36 = *(void *)(v9 + 48);
            if (v36 != -1)
            {
              if ((v36 & 0x80000000) == 0)
              {
                atomic_fetch_add_explicit(&gFDCount, 0xFFFFFFFF, memory_order_relaxed);
                if (v36 <= 0x7FF)
                {
                  int v37 = *(_DWORD *)(v7 + 9752);
                  *(_DWORD *)(v7 + 9752) = v37 - 1;
                  uint64_t v38 = v7 + 4 * v36;
                  int v39 = *(_DWORD *)(v38 + 9756);
                  if (v39 < 0 || v37 <= 0) {
                    fsi_iterate_f_cold_5();
                  }
                  if (v39) {
                    *(_DWORD *)(v38 + 9756) = -v39;
                  }
                }
              }
              close(v36);
              int v32 = *(_DWORD *)(v7 + 9696);
              int v33 = v32 - 1;
            }
          }
          *(_DWORD *)(v7 + 9696) = v33;
          if (!v33)
          {
LABEL_145:
            uint64_t v9 = 0;
LABEL_146:
            if (v30 == 1) {
              goto LABEL_270;
            }
            goto LABEL_147;
          }
          uint64_t v40 = *(void *)(v7 + 9688);
          uint64_t v41 = *(void *)(v40 + 8 * (v32 - 2));
          if (v41)
          {
            if (*(void *)(v7 + 1080)) {
              *(void *)(v7 + 9736) = *(void *)(v41 + 56);
            }
            if (*(_DWORD *)(v7 + 9708) || !MEMORY[0x1C1884060](*(unsigned int *)(v41 + 48))) {
              uint64_t v31 = 0;
            }
            else {
              uint64_t v31 = *__error();
            }
            uint64_t v42 = *(uint64_t **)(v7 + 9680);
            Data = SStackNextData(v42, *(void *)(v41 + 8));
            SStackPopBack(v42, (uint64_t)Data);
            int v33 = *(_DWORD *)(v7 + 9696);
            if (!v33) {
              goto LABEL_145;
            }
            uint64_t v40 = *(void *)(v7 + 9688);
          }
          else
          {
            uint64_t v31 = 0;
          }
          uint64_t v9 = *(void *)(v40 + 8 * (v33 - 1));
          if (v9)
          {
            LODWORD(v31) = updateStackEntry(v7, v31, *(const char **)(v9 + 16));
            *(_DWORD *)(v7 + 3348) = 2;
            int v44 = a3(v7, v150, (uint64_t)a2, *(unsigned int *)(v7 + 3384), *(void *)(v7 + 3392));
            if (v44 == 2) {
              int v30 = 0;
            }
            else {
              int v30 = v44;
            }
            if (v44 == 1) {
              goto LABEL_146;
            }
            int v33 = *(_DWORD *)(v7 + 9696);
          }
          int v32 = v33;
          if (!v33) {
            goto LABEL_145;
          }
        }
        if (*(_DWORD *)(v7 + 9712) && !*(void *)(v7 + 1080))
        {
          uint64_t v45 = (uint64_t)SStackNextData(*(uint64_t **)(v7 + 9680), *(void *)v9);
          if (v45) {
            SStackDataLength(*(void *)(v7 + 9680), v45);
          }
        }
        else
        {
          uint64_t v45 = 0;
        }
        *(void *)(v9 + 16) = v34;
        LODWORD(v31) = updateStackEntry(v7, 0, v34);
        if (*(void *)(v7 + 9664)
          && ((uint64_t v46 = *(void *)(v7 + 9672)) == 0
           || (*(unsigned int (**)(uint64_t, uint64_t))(v46 + 16))(v46, v7)))
        {
          uint64_t v47 = *(void *)(v9 + 40);
          if (v47 != *(void *)(v9 + 24))
          {
            uint64_t v48 = *(void *)(v9 + 32);
            *(void *)(v9 + 40) = v47 + 1;
            BOOL v49 = *(_DWORD **)(v48 + 8 * v47);
            goto LABEL_99;
          }
        }
        else if (v34 != *(const char **)(v9 + 8))
        {
          BOOL v49 = SStackNextData(*(uint64_t **)(v7 + 9680), (uint64_t)v34);
          goto LABEL_99;
        }
        BOOL v49 = 0;
LABEL_99:
        *(void *)uint64_t v9 = v49;
        if (*(_DWORD *)&v34[*(void *)(v7 + 1096)] == 1 && *(void *)(v7 + 9664))
        {
          uint64_t v50 = *(void *)(v7 + 9672);
          if (!v50) {
            goto LABEL_280;
          }
          if ((*(unsigned int (**)(uint64_t, uint64_t))(v50 + 16))(v50, v7))
          {
            if (!*(void *)(v7 + 9664)) {
              fsi_iterate_f_cold_7();
            }
LABEL_280:
            *(_DWORD *)(v7 + 3348) = 0;
            int v30 = a3(v7, v150, (uint64_t)a2, *(unsigned int *)(v7 + 3384), *(void *)(v7 + 3392));
            if ((v30 & 0xFFFFFFFD) == 0)
            {
              BOOL v114 = *(const char **)v9;
              if (*(void *)v9)
              {
                if (*(_DWORD *)&v114[*(void *)(v7 + 1096)] == 1)
                {
                  uint64_t updated = 0;
                  do
                  {
                    *(void *)(v9 + 16) = v114;
                    uint64_t v116 = *(void *)(v9 + 40);
                    if (v116 == *(void *)(v9 + 24))
                    {
                      uint64_t v117 = 0;
                    }
                    else
                    {
                      uint64_t v118 = *(void *)(v9 + 32);
                      *(void *)(v9 + 40) = v116 + 1;
                      uint64_t v117 = *(void *)(v118 + 8 * v116);
                    }
                    *(void *)uint64_t v9 = v117;
                    uint64_t updated = updateStackEntry(v7, updated, v114);
                    *(_DWORD *)(v7 + 3348) = 0;
                    int v30 = a3(v7, v150, (uint64_t)a2, *(unsigned int *)(v7 + 3384), *(void *)(v7 + 3392));
                    if ((v30 & 0xFFFFFFFD) != 0) {
                      break;
                    }
                    BOOL v114 = *(const char **)v9;
                    if (!*(void *)v9) {
                      break;
                    }
                  }
                  while (*(_DWORD *)&v114[*(void *)(v7 + 1096)] == 1);
                }
              }
            }
            if (v30 == 2)
            {
              int v30 = 0;
              goto LABEL_147;
            }
            goto LABEL_146;
          }
        }
        if (*(_DWORD *)(v7 + 9708))
        {
          uint64_t v51 = *(void *)(v7 + 1112);
          unint64_t v52 = v51 + 8;
          uint64_t v53 = (uint64_t *)&v34[v51];
          if (v53) {
            BOOL v54 = v52 > *(unsigned int *)v34;
          }
          else {
            BOOL v54 = 1;
          }
          if (!v54)
          {
            uint64_t v45 = *v53;
LABEL_128:
            int v65 = 1;
LABEL_131:
            *(_DWORD *)(v7 + 3348) = 1;
            if (*(_DWORD *)(v7 + 9720))
            {
              *(_DWORD *)(v7 + 3388) = 0;
              int v66 = a3(v7, v150, (uint64_t)a2, *(unsigned int *)(v7 + 3384), *(void *)(v7 + 3392));
              *(_DWORD *)(v7 + 3388) = 0;
            }
            else
            {
              int v66 = a3(v7, v150, (uint64_t)a2, *(unsigned int *)(v7 + 3384), *(void *)(v7 + 3392));
            }
            if (v66) {
              int v67 = 0;
            }
            else {
              int v67 = v65;
            }
            if (v67 != 1)
            {
              cleanupAfterNoPush(v7, v45);
              if (v66 == 1) {
                goto LABEL_270;
              }
              *(_DWORD *)(v7 + 3348) = 2;
              if (v66 != 3
                && a3(v7, v150, (uint64_t)a2, *(unsigned int *)(v7 + 3384), *(void *)(v7 + 3392)) == 1)
              {
                goto LABEL_270;
              }
LABEL_143:
              int v30 = 2;
              if (!*(_DWORD *)(v7 + 3400)) {
                continue;
              }
              goto LABEL_52;
            }
            if (pushStackEntry(v7, v45))
            {
              cleanupAfterNoPush(v7, v45);
              goto LABEL_143;
            }
            int v113 = *(_DWORD *)(v7 + 9696);
            if (v113)
            {
              int v30 = 0;
              uint64_t v9 = *(void *)(*(void *)(v7 + 9688) + 8 * (v113 - 1));
              goto LABEL_147;
            }
            int v30 = 0;
LABEL_294:
            uint64_t v9 = 0;
LABEL_147:
            if (*(_DWORD *)(v7 + 3400)) {
              goto LABEL_269;
            }
            goto LABEL_148;
          }
        }
        else
        {
          uint64_t v55 = *(void *)(v7 + 1080);
          if (v55)
          {
            unint64_t v56 = *(unsigned int *)v34;
            if (v55 + 8 <= v56)
            {
              CFAllocatorRef v57 = &v34[v55];
              uint64_t v58 = *((unsigned int *)v57 + 1);
              uint8x8_t v59 = &v57[*(int *)v57];
              if (&v59[v58] <= &v34[v56]) {
                uint64_t v45 = (uint64_t)v59;
              }
              else {
                uint64_t v45 = 0;
              }
            }
            else
            {
              uint64_t v45 = 0;
            }
          }
          atomic_fetch_add_explicit(&gFDCount, 1u, memory_order_relaxed);
          uint64_t v60 = open((const char *)v45, 32772);
          LODWORD(v45) = v60;
          if (v60 > 0x7FF)
          {
            if ((v60 & 0x80000000) != 0)
            {
              atomic_fetch_add_explicit(&gFDCount, 0xFFFFFFFF, memory_order_relaxed);
              break;
            }
          }
          else
          {
            *(_DWORD *)(v7 + 4 * v60 + 9756) = 749;
            ++*(_DWORD *)(v7 + 9752);
          }
          if (!MEMORY[0x1C1884060](v60))
          {
            uint64_t v45 = v45;
            goto LABEL_128;
          }
          int v61 = *__error();
          atomic_fetch_add_explicit(&gFDCount, 0xFFFFFFFF, memory_order_relaxed);
          if ((int)v45 <= 2047)
          {
            int v62 = *(_DWORD *)(v7 + 9752);
            *(_DWORD *)(v7 + 9752) = v62 - 1;
            uint64_t v63 = v7 + 4 * v45;
            int v64 = *(_DWORD *)(v63 + 9756);
            if (v64 < 0 || v62 <= 0) {
              fsi_iterate_f_cold_6();
            }
            if (v64) {
              *(_DWORD *)(v63 + 9756) = -v64;
            }
          }
          close(v45);
          *__error() = v61;
        }
        break;
      }
      __error();
      int v65 = 0;
      uint64_t v45 = -1;
      goto LABEL_131;
    }
LABEL_148:
    if (!v9) {
      goto LABEL_269;
    }
    if (*(_DWORD *)(v7 + 3400) && !*(_DWORD *)(v7 + 9700))
    {
      *(_DWORD *)(v7 + 9700) = 2;
      goto LABEL_269;
    }
    *(_DWORD *)(v7 + 9700) = 0;
    bzero(v159, 0x400uLL);
    if (*(_DWORD *)(v7 + 9708))
    {
      d_name = v159;
      md_fsgetpath_fast(v159, *(_DWORD *)(v7 + 9724), *(void *)(v9 + 48));
    }
    else
    {
      d_name = ".";
    }
    if (*(_DWORD *)(v7 + 9712))
    {
      int v69 = opendir(d_name);
      if (!v69) {
        goto LABEL_269;
      }
      size_t v70 = v69;
      bzero(&v158, 0x418uLL);
      uint64_t v157 = 0;
      if (*(void *)(v7 + 9664))
      {
        uint64_t v71 = *(void *)(v7 + 9672);
        if (v71) {
          int v72 = (*(uint64_t (**)(uint64_t, uint64_t))(v71 + 16))(v71, v7);
        }
        else {
          int v72 = 1;
        }
      }
      else
      {
        int v72 = 0;
      }
      while (1)
      {
        while (1)
        {
          while (1)
          {
            if (v30 != 1 && !readdir_r(v70, &v158, &v157))
            {
              uint64_t v97 = v157;
              if (v157) {
                continue;
              }
            }
            closedir(v70);
            if (*(_DWORD *)(v7 + 9716)
              && (!*(void *)(v7 + 9664)
               || (uint64_t v107 = *(void *)(v7 + 9672)) != 0
               && ((*(uint64_t (**)(uint64_t, uint64_t))(v107 + 16))(v107, v7) & 1) == 0))
            {
              if (v30 != 1)
              {
                *(void *)&v156.dev_t st_dev = 0;
                BOOL v108 = (const char *)SQueuePeekData(*(void *)(v7 + 9640), &v156);
                if (*(void *)&v156.st_dev >= 4uLL)
                {
                  uint64_t v109 = v108;
                  unint64_t v110 = *(unsigned int *)v108;
                  if (*(void *)&v156.st_dev >= v110)
                  {
                    uint64_t v111 = 0;
                    do
                    {
                      uint64_t v111 = updateStackEntry(v7, v111, v109);
                      *(_DWORD *)(v7 + 3348) = 0;
                      int v30 = a3(v7, v150, (uint64_t)a2, *(unsigned int *)(v7 + 3384), *(void *)(v7 + 3392));
                      SQueueDropData(*(void **)(v7 + 9640), v110);
                      if (v30 == 2) {
                        int v30 = 0;
                      }
                      if (v30 == 1) {
                        break;
                      }
                      *(void *)&v156.dev_t st_dev = 0;
                      int v112 = (const char *)SQueuePeekData(*(void *)(v7 + 9640), &v156);
                      if (*(void *)&v156.st_dev < 4uLL) {
                        break;
                      }
                      uint64_t v109 = v112;
                      unint64_t v110 = *(unsigned int *)v112;
                    }
                    while (*(void *)&v156.st_dev >= v110);
                  }
                }
              }
              SQueueEmpty(*(void **)(v7 + 9640));
            }
            else
            {
              finishChildList((_DWORD *)v7);
            }
            goto LABEL_269;
            if (strcmp(v157->d_name, ".") && strcmp(v97->d_name, ".."))
            {
              if (*(_DWORD *)(v7 + 9708))
              {
                md_fsgetpath_fast(v159, *(_DWORD *)(v7 + 9724), v97->d_ino);
                uint64_t v97 = v157;
              }
              else
              {
                d_name = v97->d_name;
              }
              int d_type = v97->d_type;
              if (!v97->d_type)
              {
                memset(&v156, 0, sizeof(v156));
                int v99 = md_lstat_real(d_name, &v156);
                uint64_t v100 = v157;
                if (!v99) {
                  v157->int d_type = v156.st_mode >> 12;
                }
                int d_type = v100->d_type;
              }
              if ((d_type == 8 || d_type == 4)
                && (!md_getattrlist_real(d_name, v148, v29, v149, 8) || !*__error()))
              {
                break;
              }
            }
          }
          if (v157->d_type != 8) {
            break;
          }
          if (*(_DWORD *)(v7 + 9724) == *(_DWORD *)&v29[*(void *)(v7 + 1088)])
          {
            if (*(_DWORD *)(v7 + 9716))
            {
              if (v72)
              {
                uint64_t v101 = v7;
                uint64_t v102 = (unsigned int *)v29;
                d_namleuint64_t n = 0;
                uint64_t v104 = 0;
                int v105 = 1;
                goto LABEL_248;
              }
              SQueuePushData(*(void **)(v7 + 9640), *(unsigned int *)v29, v29);
            }
            else
            {
              updateStackEntry(v7, 0, v29);
              *(_DWORD *)(v7 + 3348) = 0;
              int v106 = a3(v7, v150, (uint64_t)a2, *(unsigned int *)(v7 + 3384), *(void *)(v7 + 3392));
              if (v106 == 2) {
                int v30 = 0;
              }
              else {
                int v30 = v106;
              }
            }
          }
        }
        if ((v29[*(void *)(v7 + 1120)] & 3) == 0 && *(_DWORD *)(v7 + 9724) == *(_DWORD *)&v29[*(void *)(v7 + 1088)])
        {
          d_namleuint64_t n = v157->d_namlen;
          uint64_t v104 = v157->d_name;
          uint64_t v101 = v7;
          uint64_t v102 = (unsigned int *)v29;
          int v105 = v72;
LABEL_248:
          addIntoChildList(v101, v102, d_namlen, v104, v105);
        }
      }
    }
    atomic_fetch_add_explicit(&gFDCount, 1u, memory_order_relaxed);
    unsigned int v73 = open(d_name, 32772);
    int v74 = v73;
    unsigned int v147 = v73;
    if (v73 > 0x7FF)
    {
      if ((v73 & 0x80000000) != 0)
      {
        atomic_fetch_add_explicit(&gFDCount, 0xFFFFFFFF, memory_order_relaxed);
        goto LABEL_269;
      }
    }
    else
    {
      *(_DWORD *)(v7 + 4 * v73 + 9756) = 1654;
      ++*(_DWORD *)(v7 + 9752);
    }
    while (1)
    {
      int v75 = md_getattrlistbulk_real(v74, v148, v29, v149, 8);
      if ((v75 & 0x80000000) == 0)
      {
        int v76 = v75;
        if (!v75)
        {
          BOOL v87 = v30 != 1;
          goto LABEL_197;
        }
        if (*(void *)(v7 + 9664))
        {
          uint64_t v77 = *(void *)(v7 + 9672);
          if (v77) {
            int v78 = (*(uint64_t (**)(uint64_t, uint64_t))(v77 + 16))(v77, v7);
          }
          else {
            int v78 = 1;
          }
        }
        else
        {
          int v78 = 0;
        }
        uint64_t v79 = 0;
        int v30 = 0;
        int v80 = 1;
        BOOL v81 = v151;
        while (1)
        {
          if (*(_DWORD *)(v7 + 9724) != *(_DWORD *)&v81[*(void *)(v7 + 1088)]) {
            goto LABEL_189;
          }
          int v82 = *(_DWORD *)&v81[*(void *)(v7 + 1096)];
          if ((v82 - 1) > 1) {
            goto LABEL_189;
          }
          uint64_t v83 = *(void *)(v7 + 1072);
          if (v83)
          {
            if (SIUINT64SetContainsValue(v83, *(void *)&v81[*(void *)(v7 + 1112)])) {
              goto LABEL_189;
            }
          }
          if (v82 != 1) {
            break;
          }
          if (!*(_DWORD *)(v7 + 9716))
          {
            uint64_t v79 = updateStackEntry(v7, v79, v81);
            *(_DWORD *)(v7 + 3348) = 0;
            *(unsigned char *)(v7 + 1065) = *(void *)(v7 + 1072) != 0;
            int v30 = a3(v7, v150, (uint64_t)a2, *(unsigned int *)(v7 + 3384), *(void *)(v7 + 3392));
            if (*(unsigned char *)(v7 + 1065)) {
              SIUINT64SetAddValue(*(void *)(v7 + 1072), *(void *)(*(void *)(v7 + 3392) + *(void *)(v7 + 1112)));
            }
            if (v30 == 2) {
              int v30 = 0;
            }
            goto LABEL_189;
          }
          if (v78)
          {
            uint64_t v84 = v7;
            uint64_t v85 = (unsigned int *)v81;
            int v86 = 1;
LABEL_182:
            addIntoChildList(v84, v85, 0, 0, v86);
            goto LABEL_189;
          }
          SQueuePushData(*(void **)(v7 + 9640), *(unsigned int *)v81, v81);
LABEL_189:
          if (v80 < v76)
          {
            v81 += *(unsigned int *)v81;
            ++v80;
            if (v30 != 1) {
              continue;
            }
          }
          goto LABEL_191;
        }
        if ((v81[*(void *)(v7 + 1120)] & 3) != 0) {
          goto LABEL_189;
        }
        uint64_t v84 = v7;
        uint64_t v85 = (unsigned int *)v81;
        int v86 = v78;
        goto LABEL_182;
      }
      LODWORD(v79) = *__error();
LABEL_191:
      BOOL v87 = v30 != 1;
      if (v79) {
        break;
      }
      uint64_t v29 = (char *)v151;
      int v74 = v147;
      if (v30 == 1) {
        goto LABEL_197;
      }
    }
    uint64_t v29 = (char *)v151;
    int v74 = v147;
LABEL_197:
    if (*(_DWORD *)(v7 + 9716)
      && (!*(void *)(v7 + 9664)
       || (uint64_t v88 = *(void *)(v7 + 9672)) != 0
       && ((*(uint64_t (**)(uint64_t, uint64_t))(v88 + 16))(v88, v7) & 1) == 0))
    {
      if (v30 != 1)
      {
        v158.d_ino = 0;
        uint64_t v89 = (const char *)SQueuePeekData(*(void *)(v7 + 9640), &v158);
        if (v158.d_ino >= 4)
        {
          uint64_t v90 = v89;
          __uint64_t v91 = *(unsigned int *)v89;
          if (v158.d_ino >= v91)
          {
            uint64_t v92 = 0;
            do
            {
              uint64_t v92 = updateStackEntry(v7, v92, v90);
              *(_DWORD *)(v7 + 3348) = 0;
              *(unsigned char *)(v7 + 1065) = *(void *)(v7 + 1072) != 0;
              int v30 = a3(v7, v150, (uint64_t)a2, *(unsigned int *)(v7 + 3384), *(void *)(v7 + 3392));
              if (*(unsigned char *)(v7 + 1065)) {
                SIUINT64SetAddValue(*(void *)(v7 + 1072), *(void *)(*(void *)(v7 + 3392) + *(void *)(v7 + 1112)));
              }
              SQueueDropData(*(void **)(v7 + 9640), v91);
              if (v30 == 2) {
                int v30 = 0;
              }
              if (v30 == 1) {
                break;
              }
              v158.d_ino = 0;
              uint64_t v93 = (const char *)SQueuePeekData(*(void *)(v7 + 9640), &v158);
              if (v158.d_ino < 4) {
                break;
              }
              uint64_t v90 = v93;
              __uint64_t v91 = *(unsigned int *)v93;
            }
            while (v158.d_ino >= v91);
          }
        }
        int v74 = v147;
      }
      SQueueEmpty(*(void **)(v7 + 9640));
    }
    else if (v87)
    {
      finishChildList((_DWORD *)v7);
    }
    else
    {
      int v30 = 1;
    }
    atomic_fetch_add_explicit(&gFDCount, 0xFFFFFFFF, memory_order_relaxed);
    if (v74 <= 2047)
    {
      int v94 = *(_DWORD *)(v7 + 9752);
      *(_DWORD *)(v7 + 9752) = v94 - 1;
      uint64_t v95 = v7 + 4 * v74;
      int v96 = *(_DWORD *)(v95 + 9756);
      if (v96 < 0 || v94 <= 0) {
        fsi_iterate_f_cold_4();
      }
      if (v96) {
        *(_DWORD *)(v95 + 9756) = -v96;
      }
    }
    close(v74);
LABEL_269:
    if (v30 != 1)
    {
      uint64_t v25 = 0;
      if (!v9) {
        break;
      }
      continue;
    }
LABEL_270:
    if (!*(_DWORD *)(v7 + 9708))
    {
      int v125 = *(_DWORD *)(v7 + 9696);
      uint64_t v25 = 0xFFFFFFFFLL;
      if (v125)
      {
        do
        {
          uint64_t v126 = *(void *)(*(void *)(v7 + 9688) + 8 * --v125);
          if (!v126) {
            break;
          }
          uint64_t v127 = *(void *)(v126 + 48);
          if (v127 != -1)
          {
            if ((v127 & 0x80000000) == 0)
            {
              atomic_fetch_add_explicit(&gFDCount, 0xFFFFFFFF, memory_order_relaxed);
              if ((int)v127 <= 2047)
              {
                int v128 = *(_DWORD *)(v7 + 9752);
                *(_DWORD *)(v7 + 9752) = v128 - 1;
                uint64_t v129 = v7 + 4 * (int)v127;
                int v130 = *(_DWORD *)(v129 + 9756);
                if (v130 < 0 || v128 <= 0) {
                  fsi_iterate_f_cold_3();
                }
                if (v130) {
                  *(_DWORD *)(v129 + 9756) = -v130;
                }
              }
            }
            close(v127);
            int v125 = *(_DWORD *)(v7 + 9696) - 1;
          }
          *(_DWORD *)(v7 + 9696) = v125;
        }
        while (v125);
        uint64_t v25 = 0xFFFFFFFFLL;
      }
      break;
    }
    int v30 = 1;
    uint64_t v25 = 0xFFFFFFFFLL;
    if (!v9) {
      break;
    }
  }
  while (v30 != 1 && !*(_DWORD *)(v7 + 3400));
  v131.n128_f64[0] = SQueueEmpty(*(void **)(v7 + 9640));
  if (*(_DWORD *)(v7 + 3400))
  {
    *(_DWORD *)(v7 + 3404) = 1;
    uint64_t v132 = v146;
    if (!*(_DWORD *)(v7 + 9708))
    {
      atomic_fetch_add_explicit(&gFDCount, 1u, memory_order_relaxed);
      unsigned int v133 = open(".", 32772, v131.n128_f64[0]);
      if (v133 <= 0x7FF)
      {
        *(_DWORD *)(v7 + 4 * v133 + 9756) = 1868;
        ++*(_DWORD *)(v7 + 9752);
        goto LABEL_328;
      }
      if ((v133 & 0x80000000) != 0)
      {
        atomic_fetch_add_explicit(&gFDCount, 0xFFFFFFFF, memory_order_relaxed);
        *(_DWORD *)(v7 + 9704) = v133;
        *(_DWORD *)(v7 + 3404) = 0;
        uint64_t v25 = 1;
      }
      else
      {
LABEL_328:
        *(_DWORD *)(v7 + 9704) = v133;
      }
    }
    *(_DWORD *)(v7 + 3400) = 0;
    if ((v146 & 0x80000000) == 0)
    {
LABEL_330:
      if (MEMORY[0x1C1884060](v132, v131))
      {
        *(_DWORD *)(v7 + 3404) = 0;
        int v120 = *__error();
        atomic_fetch_add_explicit(&gFDCount, 0xFFFFFFFF, memory_order_relaxed);
        if (v132 <= 0x7FF)
        {
          int v134 = *(_DWORD *)(v7 + 9752);
          *(_DWORD *)(v7 + 9752) = v134 - 1;
          uint64_t v135 = v7 + 4 * v132;
          int v136 = *(_DWORD *)(v135 + 9756);
          if (v136 < 0 || v134 <= 0) {
            fsi_iterate_f_cold_2();
          }
          if (v136) {
            *(_DWORD *)(v135 + 9756) = -v136;
          }
        }
        int v124 = v132;
        goto LABEL_337;
      }
      atomic_fetch_add_explicit(&gFDCount, 0xFFFFFFFF, memory_order_relaxed);
      if (v132 <= 0x7FF)
      {
        int v137 = *(_DWORD *)(v7 + 9752);
        *(_DWORD *)(v7 + 9752) = v137 - 1;
        uint64_t v138 = v7 + 4 * v132;
        int v139 = *(_DWORD *)(v138 + 9756);
        if (v139 < 0 || v137 <= 0) {
          fsi_iterate_f_cold_1();
        }
        if (v139) {
          *(_DWORD *)(v138 + 9756) = -v139;
        }
      }
      close(v132);
    }
  }
  else
  {
    uint64_t v132 = v146;
    if ((v146 & 0x80000000) == 0) {
      goto LABEL_330;
    }
  }
  free(v29);
LABEL_346:
  uint64_t v140 = *(void *)(a1 + 8608);
  if (v140)
  {
    *(_DWORD *)(a1 + 3404) = *(_DWORD *)(v140 + 3404);
    *(_DWORD *)(a1 + 3400) = 0;
  }
  return v25;
}

uint64_t callBlock(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 16))(a3, a1, a2);
}

uint64_t hybridSearch(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = *(void *)(a3 + 24);
  int v7 = *(_DWORD *)(a2 + 4);
  if (v7 == 2)
  {
    if (*(double *)(v6 + 3416) < CFAbsoluteTimeGetCurrent() - *(double *)a3)
    {
      do
      {
        *(_DWORD *)(v6 + 3400) = 1;
        uint64_t v6 = *(void *)(v6 + 8608);
      }
      while (v6);
    }
    return 0;
  }
  int v12 = *(_DWORD *)a2;
  if (v7 != 1 || v12 < 1)
  {
    int v14 = 0;
  }
  else
  {
    if ((*(unsigned char *)(v6 + 3424) & 0x40) == 0)
    {
      int v14 = 0;
      goto LABEL_17;
    }
    uint64_t v15 = *(void *)(a2 + 16);
    if (path_bundle_index_predicate != -1) {
      dispatch_once(&path_bundle_index_predicate, &__block_literal_global_11);
    }
    int v14 = fcntl(path_bundle_index_sDummyFD, 52, v15) >= 0;
    int v12 = *(_DWORD *)a2;
  }
  if (v12 < 1)
  {
LABEL_18:
    int v16 = 0;
    goto LABEL_26;
  }
LABEL_17:
  if ((*(unsigned char *)(v6 + 3424) & 0x20) == 0) {
    goto LABEL_18;
  }
  if ((*(_WORD *)(a5 + *(void *)(v6 + 1104) + 8) & 0x40) == 0)
  {
    unint64_t v17 = *(unsigned char **)(a2 + 32);
    if (!v17)
    {
      int v16 = 0;
      goto LABEL_25;
    }
    if (*v17 != 46)
    {
      int v16 = 0;
      LODWORD(v17) = 0;
      goto LABEL_25;
    }
  }
  LODWORD(v17) = *(_DWORD *)(a2 + 4) == 1;
  int v16 = 1;
LABEL_25:
  v14 |= v17;
LABEL_26:
  int v18 = *(_DWORD *)(a2 + 4);
  if (v18)
  {
    if (v18 == 1)
    {
      int v19 = *(_DWORD *)(v6 + 3424);
      if ((v19 & 4) == 0) {
        return (2 * v14);
      }
    }
    else
    {
      int v19 = *(_DWORD *)(v6 + 3424);
    }
  }
  else
  {
    int v19 = *(_DWORD *)(v6 + 3424);
    if ((v19 & 8) == 0) {
      return (2 * v14);
    }
  }
  if (!fsi_compare_attr(v19, (int *)(v6 + 4176), a5, *(void *)(v6 + 3472), *(void *)(v6 + 3480)) || v16) {
    return (2 * v14);
  }
  if ((*(unsigned char *)(v6 + 1028) & 0x80) == 0)
  {
    fsi_copy_attr(v6 + 6392, a5, *(char **)(v6 + 3440));
    a5 = *(void *)(v6 + 3440);
  }
  unsigned int v20 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, uint64_t))(a3 + 8))(v6, a2, *(void *)(a3 + 16), a4, a5);
  if (v14) {
    unsigned int v21 = 2;
  }
  else {
    unsigned int v21 = v20;
  }
  if (v20 == 1) {
    return 1;
  }
  else {
    return v21;
  }
}

uint64_t fsi_walk_once(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, long long *a5)
{
  return fsi_walk_once_f(a1, a2, a3, a4, a5, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))callBlock);
}

uint64_t fsi_walk_once_f(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, long long *a5, uint64_t (*a6)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))
{
  waluint64_t k = fsi_create_walk();
  if (!walk) {
    return 4294967294;
  }
  uint64_t v9 = walk;
  uint64_t v10 = fsi_iterate_f((uint64_t)walk, a5, a6);
  fsi_close(v9);
  return v10;
}

uint64_t fsi_search_once(uint64_t a1, uint64_t a2, unint64_t a3, int a4, void *a5, unsigned int *a6, unsigned int *a7, char a8, long long *a9)
{
  search = fsi_create_search(0.0, a1, a2, a3, a4, a5, a6, a7, a8);
  if (!search) {
    return 4294967294;
  }
  uint64_t v10 = search;
  do
    uint64_t v11 = fsi_iterate_f((uint64_t)v10, a9, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))callBlock);
  while (v11 && *__error() == 35);
  fsi_close(v10);
  return v11;
}

uint64_t fsi_search_once_f(uint64_t a1, uint64_t a2, unint64_t a3, int a4, void *a5, unsigned int *a6, unsigned int *a7, char a8, uint64_t a9, uint64_t a10)
{
  *(void *)&long long v11 = MEMORY[0x1E4F143A8];
  *((void *)&v11 + 1) = 0x40000000;
  int v12 = __fsi_search_once_f_block_invoke;
  uint64_t v13 = &__block_descriptor_tmp_10;
  uint64_t v14 = a10;
  uint64_t v15 = a9;
  return fsi_search_once(a1, a2, a3, a4, a5, a6, a7, a8, &v11);
}

uint64_t __fsi_search_once_f_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(a1 + 32))(a2, a3, *(void *)(a1 + 40));
}

BOOL fsi_compare_attr(int a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v6 = *a2;
  if (*a2 >= 1)
  {
    uint64_t v9 = 0;
    uint64_t v10 = (unsigned int *)(a5 + 4);
    long long v11 = (unsigned int *)(a4 + 4);
    while (1)
    {
      int v12 = &a2[2 * v9];
      unint64_t v13 = *((void *)v12 + 197);
      uint64_t v14 = *((void *)v12 + 37);
      if (!v14) {
        goto LABEL_26;
      }
      if (*((unsigned char *)a2 + v9 + 136)) {
        break;
      }
      BOOL v20 = 1;
LABEL_28:
      if (++v9 >= v6 || !v20) {
        goto LABEL_42;
      }
    }
    uint64_t v15 = (unsigned int *)(a3 + v14);
    switch(*((unsigned char *)a2 + v9 + 216))
    {
      case 1:
        if (v13 < 4) {
          goto LABEL_26;
        }
        unint64_t v16 = v13 >> 2;
        unint64_t v17 = v10;
        int v18 = v11;
        while (2)
        {
          unsigned int v19 = *v15;
          if (*v15 > *v18 && v19 < *v17) {
            goto LABEL_26;
          }
          if (v19 >= *v18 && v19 <= *v17)
          {
            ++v15;
            ++v18;
            ++v17;
            BOOL v20 = 1;
            if (!--v16) {
              goto LABEL_27;
            }
            continue;
          }
          goto LABEL_40;
        }
      case 2:
        if (v13 < 8) {
          goto LABEL_26;
        }
        unint64_t v21 = v13 >> 3;
        uint64_t v22 = (unint64_t *)v10;
        int v23 = (unint64_t *)v11;
        break;
      case 3:
        uint64_t v25 = (char *)v15 + (int)*v15;
        int v26 = (char *)v11 + (int)*v11;
        if ((a1 & 2) != 0)
        {
          BOOL v20 = strcasestr(v25, v26) != 0;
          int v6 = *a2;
        }
        else
        {
          BOOL v20 = strcasecmp(v25, v26) == 0;
        }
        goto LABEL_27;
      case 4:
        if (v13 < 4) {
          goto LABEL_26;
        }
        if (v13 >> 2 <= 1) {
          uint64_t v27 = 1;
        }
        else {
          uint64_t v27 = v13 >> 2;
        }
        if ((*v10 & *v15) != *v11) {
          goto LABEL_40;
        }
        uint64_t v28 = 1;
        do
        {
          unint64_t v29 = v28;
          if (v27 == v28) {
            break;
          }
          int v30 = v10[v28] & v15[v28];
          int v31 = v11[v28++];
        }
        while (v30 == v31);
        BOOL v20 = v29 >= v13 >> 2;
        goto LABEL_27;
      default:
        goto LABEL_26;
    }
    while (1)
    {
      unint64_t v24 = *(void *)v15;
      if (*(void *)v15 > *v23 && v24 < *v22) {
        break;
      }
      if (v24 < *v23 || v24 > *v22)
      {
LABEL_40:
        BOOL v20 = 0;
        goto LABEL_27;
      }
      v15 += 2;
      ++v23;
      ++v22;
      BOOL v20 = 1;
      if (!--v21) {
        goto LABEL_27;
      }
    }
LABEL_26:
    BOOL v20 = 1;
LABEL_27:
    long long v11 = (unsigned int *)((char *)v11 + v13);
    uint64_t v10 = (unsigned int *)((char *)v10 + v13);
    goto LABEL_28;
  }
  BOOL v20 = 1;
LABEL_42:
  if (a1 >= 0) {
    return v20;
  }
  else {
    return !v20;
  }
}

char *fsi_copy_attr(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v14 = &a3[*(void *)(a1 + 40)];
  uint64_t v15 = a3 + 4;
  uint64_t v6 = *(void *)(a1 + 24);
  if (v6)
  {
    int v7 = *(_DWORD *)(a2 + v6);
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8) {
      int v7 = accessMaskToVType(*(_DWORD *)(a2 + v8));
    }
    else {
      int v7 = -1;
    }
  }
  if (*(int *)(a1 + 4) < 1) {
    goto LABEL_15;
  }
  uint64_t v9 = 0;
  do
  {
    storeField(*(void *)(a1 + 8 * v9 + 1576), *(char *)(a1 + v9 + 56), *(void *)(a1 + 8 * v9 + 296), a2, &v15, (void **)&v14);
    ++v9;
    uint64_t v10 = *(int *)(a1 + 4);
  }
  while (v9 < v10);
  if (v7 == 2 && (uint64_t v11 = *(unsigned int *)(a1 + 4), (int)v10 >= 1))
  {
    if (*(int *)(a1 + 8) >= 1)
    {
      do
      {
        storeField(*(void *)(a1 + 8 * v11 + 1576), *(char *)(a1 + v11 + 56), *(void *)(a1 + 8 * v11 + 296), a2, &v15, (void **)&v14);
        ++v11;
      }
      while (v11 < *(int *)(a1 + 8) + (uint64_t)*(int *)(a1 + 4));
    }
  }
  else
  {
LABEL_15:
    if (v7 == 1 && *(int *)(a1 + 16) >= 1)
    {
      uint64_t v12 = *(int *)(a1 + 12);
      do
      {
        storeField(*(void *)(a1 + 8 * v12 + 1576), *(char *)(a1 + v12 + 56), *(void *)(a1 + 8 * v12 + 296), a2, &v15, (void **)&v14);
        ++v12;
      }
      while (v12 < *(int *)(a1 + 16) + (uint64_t)*(int *)(a1 + 12));
    }
  }
  uint64_t result = (char *)(v14 - a3);
  *(_DWORD *)a3 = v14 - a3;
  return result;
}

uint64_t accessMaskToVType(__int16 a1)
{
  unsigned int v1 = (a1 & 0xF000) - 4096;
  if (v1 >> 14 > 2) {
    return 0;
  }
  else {
    return dword_1BDB23EA8[v1 >> 12];
  }
}

void storeField(size_t __n, int a2, uint64_t a3, uint64_t a4, void **a5, void **a6)
{
  if (a3)
  {
    if (a2)
    {
      uint64_t v9 = a4 + a3;
      unsigned int v10 = *a6 - *(_DWORD *)a5;
      unsigned int v11 = *(_DWORD *)(a4 + a3 + 4);
      memcpy(*a6, (const void *)(a4 + a3 + *(int *)(a4 + a3)), v11);
      uint64_t v12 = *a5;
      *uint64_t v12 = v10;
      v12[1] = v11;
      *a6 = (char *)*a6 + ((*(_DWORD *)(v9 + 4) + 3) & 0xFFFFFFFC);
    }
    else
    {
      memcpy(*a5, (const void *)(a4 + a3), __n);
    }
  }
  else
  {
    bzero(*a5, __n);
  }
  *a5 = (char *)*a5 + __n;
}

uint64_t fsi_attr_mapping_descriptor(uint64_t a1, uint64_t a2, char *a3)
{
  if (a1) {
    uint64_t v5 = a1;
  }
  else {
    uint64_t v5 = a2;
  }
  bzero(a3, 0x8A8uLL);
  uint64_t v6 = (BOOL *)(a3 + 56);
  int v7 = a3 + 136;
  uint64_t v8 = a3 + 216;
  uint64_t v9 = (unint64_t *)(a3 + 296);
  unsigned int v10 = a3 + 936;
  unsigned int v11 = a3 + 1576;
  v30[1] = 0;
  v30[2] = 0;
  v30[0] = 0x800000005;
  *((void *)a3 + 3) = fsi_attr_offset(v5, (uint64_t)v30);
  v29[1] = 0;
  v29[2] = 0;
  v29[0] = 0x2000000000005;
  uint64_t v12 = fsi_attr_offset(v5, (uint64_t)v29);
  unint64_t v13 = 0;
  uint64_t result = 0;
  *((void *)a3 + 4) = v12;
  uint64_t v15 = (_DWORD *)(v5 + 4);
  unint64_t v16 = (_DWORD *)(a2 + 4);
  unint64_t v17 = 4;
  *(int64x2_t *)(a3 + 40) = vdupq_n_s64(4uLL);
  int v18 = attrTable_table;
  unsigned int v19 = &attrTable_commonattr;
  unint64_t v20 = 4;
  do
  {
    BOOL v21 = v19 != &attrTable_dirattr;
    if (v19 == &attrTable_dirattr)
    {
      uint64_t v22 = a3 + 4;
      unint64_t v13 = v20;
    }
    else
    {
      if (v19 != &attrTable_fileattr)
      {
        BOOL v21 = 0;
        goto LABEL_11;
      }
      uint64_t v22 = a3 + 12;
      unint64_t v20 = v13;
    }
    *(_DWORD *)uint64_t v22 = result;
LABEL_11:
    int v23 = *((_DWORD *)v19 + 2);
    if (v23)
    {
      unint64_t v24 = v19 + 3;
      do
      {
        int v25 = *v15 & v23;
        if ((*v16 & v23) != 0)
        {
          BOOL v26 = *(v24 - 1) != *v24;
          if (v25) {
            unint64_t v27 = v20;
          }
          else {
            unint64_t v27 = 0;
          }
          *v9++ = v27;
          *v10++ = *((void *)a3 + 5);
          *v11++ = *(v24 - 1);
          *v6++ = v26;
          *v7++ = *((_DWORD *)v24 + 3);
          *v8++ = *((_DWORD *)v24 + 2);
          *((void *)a3 + 5) += *(v24 - 1);
          if (v19 == &attrTable_dirattr) {
            ++*((_DWORD *)a3 + 2);
          }
          uint64_t result = (result + 1);
          if (v21) {
            ++*((_DWORD *)a3 + 4);
          }
        }
        if (v25) {
          v20 += (unint64_t)*(v24 - 1);
        }
        int v23 = *((_DWORD *)v24 + 6);
        v24 += 5;
      }
      while (v23);
      unint64_t v17 = *((void *)a3 + 6);
    }
    if (v20 > v17) {
      unint64_t v17 = v20;
    }
    *((void *)a3 + 6) = v17;
    uint64_t v28 = v18[1];
    ++v18;
    unsigned int v19 = v28;
    ++v15;
    ++v16;
  }
  while (v28);
  *(_DWORD *)a3 = result;
  return result;
}

uint64_t fsi_attr_offset(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0;
  CFTypeRef v3 = (_DWORD *)(a1 + 4);
  uint64_t v4 = attrTable_table;
  uint64_t v5 = &attrTable_commonattr;
  uint64_t v6 = (_DWORD *)(a2 + 4);
  uint64_t result = 4;
  do
  {
    if (v5 == &attrTable_dirattr) {
      uint64_t v8 = result;
    }
    else {
      uint64_t v8 = v2;
    }
    if (v5 == &attrTable_fileattr) {
      uint64_t result = v2;
    }
    int v9 = *((_DWORD *)v5 + 2);
    if (v9)
    {
      unsigned int v10 = v5 + 6;
      do
      {
        if ((*v3 & v9) != 0)
        {
          if (v9 == *v6) {
            return result;
          }
          result += *((void *)v10 - 4);
        }
        int v11 = *v10;
        v10 += 10;
        int v9 = v11;
      }
      while (v11);
    }
    uint64_t v12 = v4[1];
    ++v4;
    uint64_t v5 = v12;
    ++v3;
    ++v6;
    uint64_t v2 = v8;
  }
  while (v12);
  return 0;
}

char *fsi_attr_reference_data(char *a1, uint64_t a2, void *a3)
{
  unint64_t v3 = *(unsigned int *)a1;
  if (a2 + 8 > v3) {
    return 0;
  }
  uint64_t v5 = *(unsigned int *)&a1[a2 + 4];
  uint64_t result = &a1[a2 + *(int *)&a1[a2]];
  if (&result[v5] > &a1[v3]) {
    return 0;
  }
  if (a3) {
    *a3 = v5;
  }
  return result;
}

unint64_t fsi_attr_size(uint64_t a1)
{
  unint64_t v1 = 0;
  unint64_t v2 = 0;
  unint64_t v3 = attrTable_table;
  uint64_t v4 = &attrTable_commonattr;
  uint64_t v5 = (_DWORD *)(a1 + 4);
  unint64_t v6 = 4;
  do
  {
    if (v4 == &attrTable_dirattr) {
      unint64_t v7 = v6;
    }
    else {
      unint64_t v7 = v2;
    }
    if (v4 == &attrTable_fileattr)
    {
      unint64_t v1 = v6;
      unint64_t v6 = v2;
    }
    int v8 = *((_DWORD *)v4 + 2);
    if (v8)
    {
      int v9 = v4 + 3;
      do
      {
        if ((*v5 & v8) != 0) {
          v6 += (unint64_t)*v9;
        }
        int v8 = *((_DWORD *)v9 + 6);
        v9 += 5;
      }
      while (v8);
    }
    unsigned int v10 = v3[1];
    ++v3;
    uint64_t v4 = v10;
    ++v5;
    unint64_t v2 = v7;
  }
  while (v10);
  if (v6 <= v1) {
    return v1;
  }
  else {
    return v6;
  }
}

_WORD *fsi_attrlist_union(_WORD *result, uint64_t a2)
{
  int v2 = (unsigned __int16)*result;
  if (*result)
  {
    unint64_t v3 = (int *)(a2 + 4);
    uint64_t v4 = result + 2;
    do
    {
      int v5 = *v3++;
      *v4++ |= v5;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t fsi_attr_set_scalar(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  if (*(unsigned char *)(result + a3 + 56)) {
    fsi_attr_set_scalar_cold_3();
  }
  if (!*(unsigned char *)(result + a3 + 216)) {
    fsi_attr_set_scalar_cold_1();
  }
  uint64_t v4 = result + 8 * a3;
  uint64_t v5 = *(void *)(v4 + 296);
  uint64_t v6 = *(void *)(v4 + 1576);
  if (v6 == 8)
  {
    *(void *)(a2 + v5) = a4;
  }
  else
  {
    if (v6 != 4) {
      fsi_attr_set_scalar_cold_2();
    }
    if (a4 == 0x7FFFFFFFFFFFFFFFLL) {
      int v7 = 0x7FFFFFFF;
    }
    else {
      int v7 = a4;
    }
    *(_DWORD *)(a2 + v5) = v7;
  }
  return result;
}

void *fsi_attr_set_fixed_data(uint64_t a1, uint64_t a2, int a3, void *__src)
{
  if (*(unsigned char *)(a1 + a3 + 56)) {
    fsi_attr_set_fixed_data_cold_2();
  }
  if (!*(unsigned char *)(a1 + a3 + 216)) {
    fsi_attr_set_fixed_data_cold_1();
  }
  uint64_t v4 = a1 + 8 * a3;
  uint64_t v5 = (void *)(a2 + *(void *)(v4 + 296));
  size_t v6 = *(void *)(v4 + 1576);

  return memcpy(v5, __src, v6);
}

void *fsi_attr_set_variable_data(uint64_t a1, uint64_t a2, int a3, void *__src, size_t __n, void **a6)
{
  if (!*(unsigned char *)(a1 + a3 + 56)) {
    fsi_attr_set_variable_data_cold_1();
  }
  uint64_t v7 = a3;
  if (!*(unsigned char *)(a1 + a3 + 216)) {
    fsi_attr_set_variable_data_cold_2();
  }
  int v11 = *a6;
  if (!*a6)
  {
    int v11 = (void *)(a2 + *(void *)(a1 + 48));
    *a6 = v11;
  }
  uint64_t result = memcpy(v11, __src, __n);
  unint64_t v13 = (_DWORD *)(a2 + *(void *)(a1 + 8 * v7 + 296));
  uint64_t v14 = (char *)*a6;
  _DWORD *v13 = *a6 - v13;
  v13[1] = __n;
  *a6 = &v14[(__n + 3) & 0xFFFFFFFFFFFFFFFCLL];
  return result;
}

void *fsi_attr_set_string(uint64_t a1, uint64_t a2, int a3, char *__s, void **a5)
{
  size_t v10 = strlen(__s) + 1;

  return fsi_attr_set_variable_data(a1, a2, a3, __s, v10, a5);
}

_DWORD *fsi_attr_build(_DWORD *result, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  size_t v10 = result;
  BOOL v21 = 0;
  uint64_t v22 = (const char **)&a9;
  if (*a2 < 1) {
    goto LABEL_14;
  }
  uint64_t v11 = 0;
  do
  {
    switch(*((unsigned char *)a2 + v11 + 216))
    {
      case 0:
        fsi_attr_build_cold_1();
      case 1:
        if (*(void *)&a2[2 * v11 + 394] != 4) {
          goto LABEL_9;
        }
        uint64_t v12 = v22++;
        LODWORD(v20) = *(_DWORD *)v12;
        goto LABEL_8;
      case 2:
        if (*(void *)&a2[2 * v11 + 394] != 8) {
          goto LABEL_9;
        }
        unint64_t v13 = v22++;
        unint64_t v20 = *v13;
LABEL_8:
        uint64_t v14 = (char *)&v20;
        goto LABEL_10;
      case 3:
        unint64_t v16 = v22++;
        unint64_t v17 = (char *)*v16;
        size_t v18 = strlen(*v16);
        uint64_t result = fsi_attr_set_variable_data((uint64_t)a2, (uint64_t)v10, v11, v17, v18 + 1, &v21);
        break;
      case 4:
LABEL_9:
        uint64_t v15 = v22++;
        uint64_t v14 = (char *)*v15;
LABEL_10:
        uint64_t result = fsi_attr_set_fixed_data((uint64_t)a2, (uint64_t)v10, v11, v14);
        break;
      default:
        break;
    }
    ++v11;
  }
  while (v11 < *a2);
  LODWORD(v19) = v21;
  if (!v21) {
LABEL_14:
  }
    unsigned int v19 = (char *)v10 + *((void *)a2 + 6);
  *size_t v10 = v19 - v10;
  return result;
}

uint64_t fsi_attr_finalize(uint64_t result, _DWORD *a2, char **a3)
{
  if (a3) {
    unint64_t v3 = a3;
  }
  else {
    unint64_t v3 = (char **)&fsi_attr_finalize_localContext;
  }
  uint64_t v4 = *v3;
  if (!*v3)
  {
    uint64_t v4 = (char *)a2 + *(void *)(result + 48);
    *unint64_t v3 = v4;
  }
  *a2 = v4 - a2;
  return result;
}

uint64_t fsi_attr_stat(uint64_t result, uint64_t a2, _OWORD *a3)
{
  a3[7] = 0u;
  a3[8] = 0u;
  a3[5] = 0u;
  a3[6] = 0u;
  a3[3] = 0u;
  a3[4] = 0u;
  a3[1] = 0u;
  a3[2] = 0u;
  *a3 = 0u;
  uint64_t v5 = (uint64_t *)(result + 296);
  uint64_t v6 = *(void *)(result + 24);
  if (v6)
  {
    int v7 = *(_DWORD *)(a2 + v6);
  }
  else
  {
    uint64_t v8 = *(void *)(result + 32);
    if (v8)
    {
      uint64_t result = accessMaskToVType(*(_DWORD *)(a2 + v8));
      int v7 = result;
    }
    else
    {
      int v7 = -1;
    }
  }
  int v9 = &unk_1BDB23D78;
  uint64_t v10 = 1;
  do
  {
    uint64_t v11 = *v5;
    size_t v12 = v5[160];
    if (*v5) {
      BOOL v13 = v12 == 0;
    }
    else {
      BOOL v13 = 1;
    }
    if (!v13)
    {
      uint64_t v14 = *(v9 - 1);
      if (v12 == *v9)
      {
        uint64_t result = (uint64_t)memcpy((char *)a3 + v14, (const void *)(a2 + v11), v12);
      }
      else
      {
        if (((0xA08000uLL >> v10) & 1) == 0) {
          fsi_attr_stat_cold_1();
        }
        int v15 = *(_DWORD *)(a2 + v11);
        if (v10 == 21)
        {
          *(_WORD *)((char *)a3 + v14) = v15 + 2;
          goto LABEL_19;
        }
        *(_WORD *)((char *)a3 + v14) = v15;
      }
    }
    if (v10 == 19 && v7 == -1) {
      return result;
    }
LABEL_19:
    if (v7 == 2 && v10 == 21) {
      break;
    }
    v9 += 2;
    ++v5;
    BOOL v13 = v10 == 29;
    v10 += 2;
  }
  while (!v13);
  return result;
}

uint64_t pushStackEntry(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (*(int *)(a1 + 9696) < 512)
  {
    bzero(v8, 0x440uLL);
    uint64_t v5 = SStackPushData(*(uint64_t **)(a1 + 9680), 0x440uLL, v8);
    *((void *)v5 + 6) = a2;
    strcpy((char *)v5 + 64, (const char *)(a1 + 8616));
    *((void *)v5 + 1) = v5;
    uint64_t v6 = *(int *)(a1 + 9696);
    *(void *)(*(void *)(a1 + 9688) + 8 * v6) = v5;
    *(_DWORD *)(a1 + 9696) = v6 + 1;
    if (*(void *)(a1 + 1080))
    {
      uint64_t v7 = *(void *)(a1 + 3352);
      *(void *)(a1 + 9736) = v7;
      *((void *)v5 + 7) = v7;
    }
    return 0;
  }
  else
  {
    *__error() = 22;
    return 0xFFFFFFFFLL;
  }
}

void *addIntoChildList(uint64_t a1, unsigned int *a2, size_t a3, const void *a4, int a5)
{
  int v9 = *(_DWORD *)(a1 + 9696);
  if (v9) {
    uint64_t v10 = *(void **)(*(void *)(a1 + 9688) + 8 * (v9 - 1));
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t result = SStackPushData(*(uint64_t **)(a1 + 9680), *a2, a2);
  size_t v12 = result;
  if (*(_DWORD *)(a1 + 9712) && !*(void *)(a1 + 1080)) {
    uint64_t result = SStackPushData(*(uint64_t **)(a1 + 9680), a3, a4);
  }
  v10[1] = result;
  if (a5)
  {
    unint64_t v13 = v10[3];
    unint64_t v14 = *(void *)(a1 + 9656);
    if (v13 >= v14)
    {
      uint64_t v15 = 2 * v14;
      if (!v14) {
        uint64_t v15 = 8;
      }
      *(void *)(a1 + 9656) = v15;
      uint64_t result = malloc_type_realloc(*(void **)(a1 + 9648), 8 * v15, 0x80040B8603338uLL);
      *(void *)(a1 + 9648) = result;
      unint64_t v13 = v10[3];
    }
    else
    {
      uint64_t result = *(void **)(a1 + 9648);
    }
    result[v13] = v12;
    v10[3] = v13 + 1;
  }
  else if (!*v10)
  {
    *uint64_t v10 = v12;
  }
  return result;
}

uint64_t __path_bundle_index_block_invoke()
{
  uint64_t result = open("/System/Library", 4);
  path_bundle_index_sDummyFD = result;
  return result;
}

uint64_t updateStackEntry(uint64_t a1, uint64_t a2, const char *a3)
{
  uint64_t v6 = *(void *)(a1 + 1080);
  if (v6)
  {
    unint64_t v7 = *(unsigned int *)a3;
    if (v6 + 8 > v7 || (uint64_t v8 = &a3[v6], v9 = *((unsigned int *)v8 + 1), v10 = &v8[*(int *)v8], &v10[v9] > &a3[v7]))
    {
      a2 = 2;
      uint64_t v11 = -1;
LABEL_5:
      *(void *)(a1 + 3376) = a1 + *(void *)(a1 + 3352) - v11 + 8616;
      *(void *)(a1 + 3368) = v11;
      goto LABEL_6;
    }
    uint64_t v11 = v9 - 1;
    uint64_t v13 = *(void *)(a1 + 9736);
    if (v13 == 1)
    {
      if (*(unsigned char *)(a1 + 8616) == 47)
      {
        strlcpy((char *)(a1 + 8617), v10, 0x3FFuLL);
        goto LABEL_12;
      }
    }
    else if (!v13)
    {
      __strlcpy_chk();
LABEL_12:
      --v9;
LABEL_15:
      *(void *)(a1 + 3352) = *(void *)(a1 + 9736) + v9;
      goto LABEL_5;
    }
    if ((unint64_t)(v13 + v9) > 0x3FF)
    {
      a2 = 63;
      goto LABEL_5;
    }
    *(unsigned char *)(a1 + 8616 + v13) = 47;
    strlcpy((char *)(a1 + 8616 + *(void *)(a1 + 9736) + 1), v10, 1023 - *(void *)(a1 + 9736));
    goto LABEL_15;
  }
LABEL_6:
  *(_DWORD *)(a1 + 3384) = a2;
  *(void *)(a1 + 3392) = a3;
  *(_DWORD *)(a1 + 3344) = *(_DWORD *)(a1 + 9696) - 1;
  return a2;
}

_DWORD *finishChildList(_DWORD *result)
{
  if (*((void *)result + 1208))
  {
    unint64_t v1 = result;
    uint64_t result = (_DWORD *)*((void *)result + 1209);
    if (!result
      || (uint64_t result = (_DWORD *)(*((uint64_t (**)(_DWORD *, _DWORD *))result + 2))(result, v1), result))
    {
      int v2 = v1[2424];
      if (v2) {
        unint64_t v3 = *(void **)(*((void *)v1 + 1211) + 8 * (v2 - 1));
      }
      else {
        unint64_t v3 = 0;
      }
      size_t v4 = v3[5];
      size_t v5 = v3[3];
      if (v4)
      {
        if (v4 < v5)
        {
          if (!*v3) {
            finishChildList_cold_4();
          }
          if (*v3 != *(void *)(v3[4] + 8 * v4 - 8)) {
            finishChildList_cold_5();
          }
        }
      }
      else if (v5)
      {
        uint64_t v6 = (void *)*((void *)v1 + 1206);
        __compar[0] = MEMORY[0x1E4F143A8];
        __compar[1] = 0x40000000;
        __compar[2] = __finishChildList_block_invoke;
        __compar[3] = &__block_descriptor_tmp_28_0;
        __compar[4] = v1;
        qsort_b(v6, v5, 8uLL, __compar);
        uint64_t result = SStackPushData(*((uint64_t **)v1 + 1210), 8 * v3[3], *((const void **)v1 + 1206));
        v3[4] = result;
        if (*v3) {
          finishChildList_cold_3();
        }
        if (v3[5]) {
          finishChildList_cold_2();
        }
        void v3[5] = 1;
        *unint64_t v3 = *(void *)result;
      }
      else if (*v3)
      {
        finishChildList_cold_1();
      }
      v3[1] = v3[4];
    }
  }
  return result;
}

uint64_t cleanupAfterNoPush(uint64_t result, uint64_t a2)
{
  if (a2 != -1)
  {
    uint64_t v2 = result;
    if (!*(_DWORD *)(result + 9708))
    {
      unsigned int v3 = a2;
      int v4 = *(_DWORD *)(result + 9696);
      if (v4)
      {
        uint64_t v5 = *(void *)(*(void *)(result + 9688) + 8 * (v4 - 1));
        if (v5) {
          MEMORY[0x1C1884060](*(unsigned int *)(v5 + 48));
        }
      }
      if ((v3 & 0x80000000) == 0)
      {
        atomic_fetch_add_explicit(&gFDCount, 0xFFFFFFFF, memory_order_relaxed);
        if (v3 <= 0x7FF)
        {
          int v6 = *(_DWORD *)(v2 + 9752);
          *(_DWORD *)(v2 + 9752) = v6 - 1;
          uint64_t v7 = v2 + 4 * v3;
          int v8 = *(_DWORD *)(v7 + 9756);
          if (v8 < 0 || v6 <= 0) {
            cleanupAfterNoPush_cold_1();
          }
          if (v8) {
            *(_DWORD *)(v7 + 9756) = -v8;
          }
        }
      }
      return close(v3);
    }
  }
  return result;
}

uint64_t __finishChildList_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(a1 + 32) + 9664) + 16))();
}

BOOL CFStringsAreEqual(const __CFString *a1, const __CFString *a2)
{
  BOOL result = 0;
  if (a1)
  {
    if (a2)
    {
      CFIndex Length = CFStringGetLength(a1);
      if (Length == CFStringGetLength(a2))
      {
        if (CFStringHasPrefix(a1, a2)) {
          return 1;
        }
      }
    }
  }
  return result;
}

CFLocaleRef CFLocaleCopyNormalizedLocaleIdentifier(const __CFLocale *result, int a2)
{
  if (result)
  {
    CFLocaleRef v3 = result;
    CFTypeRef Value = CFLocaleGetValue(result, (CFLocaleKey)*MEMORY[0x1E4F1D218]);
    CFTypeRef v5 = CFLocaleGetValue(v3, (CFLocaleKey)*MEMORY[0x1E4F1D220]);
    if (a2) {
      CFTypeRef v6 = 0;
    }
    else {
      CFTypeRef v6 = CFLocaleGetValue(v3, (CFLocaleKey)*MEMORY[0x1E4F1D1F0]);
    }
    return (const __CFLocale *)copyNormalizedLocaleIdentifier(Value, (uint64_t)v5, (uint64_t)v6);
  }
  return result;
}

CFStringRef copyNormalizedLocaleIdentifier(const void *a1, uint64_t a2, uint64_t a3)
{
  if (a1) {
    BOOL v3 = a2 == 0;
  }
  else {
    BOOL v3 = 1;
  }
  int v4 = !v3;
  if (v4 == 1 && a3 != 0) {
    return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"%@-%@-%@", a1, a2, a3);
  }
  if (v4)
  {
    CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    uint64_t v8 = a2;
    return CFStringCreateWithFormat(v6, 0, @"%@-%@", a1, v8);
  }
  if (a1 && a3)
  {
    CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    uint64_t v8 = a3;
    return CFStringCreateWithFormat(v6, 0, @"%@-%@", a1, v8);
  }

  return (CFStringRef)CFRetain(a1);
}

CFLocaleRef CFLocaleCopyNormalizedLocaleIdentifierForRegion(const __CFLocale *result, uint64_t a2)
{
  if (result)
  {
    CFLocaleRef v3 = result;
    CFTypeRef Value = CFLocaleGetValue(result, (CFLocaleKey)*MEMORY[0x1E4F1D218]);
    CFTypeRef v5 = CFLocaleGetValue(v3, (CFLocaleKey)*MEMORY[0x1E4F1D220]);
    return (const __CFLocale *)copyNormalizedLocaleIdentifier(Value, (uint64_t)v5, a2);
  }
  return result;
}

CFPropertyListRef createDictionaryWithContentsOfURL(const __CFURL *a1, CFErrorRef *a2)
{
  return _createDictionaryWithContentsOfURL(a1, 0, a2);
}

CFPropertyListRef _createDictionaryWithContentsOfURL(CFURLRef fileURL, int a2, CFErrorRef *a3)
{
  if (!fileURL) {
    return 0;
  }
  CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t v7 = CFReadStreamCreateWithFile((CFAllocatorRef)*MEMORY[0x1E4F1CF80], fileURL);
  if (!v7)
  {
    if (a3)
    {
      CFStringRef v12 = CFURLCopyPath(fileURL);
      if (v12)
      {
        CFStringRef v13 = v12;
        CFStringRef v14 = CFStringCreateWithFormat(v6, 0, @"%@: %@", @"File at URL is not readable", v12);
        if (v14)
        {
          CFStringRef v15 = v14;
          CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v6, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
          CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F1D170], v15);
          CFRelease(Mutable);
          *a3 = CFErrorCreate(v6, @"com.apple.SpotlightLinguistics.ErrorDomain", 0, Mutable);
          CFRelease(v15);
        }
        CFRelease(v13);
      }
    }
    return 0;
  }
  uint64_t v8 = v7;
  if (!CFReadStreamOpen(v7)) {
    return 0;
  }
  if (a2) {
    CFOptionFlags v9 = 2;
  }
  else {
    CFOptionFlags v9 = 0;
  }
  CFPropertyListRef v10 = CFPropertyListCreateWithStream(v6, v8, 0, v9, 0, a3);
  CFReadStreamClose(v8);
  return v10;
}

CFPropertyListRef createMutableDictionaryWithContentsOfURL(const __CFURL *a1, CFErrorRef *a2)
{
  return _createDictionaryWithContentsOfURL(a1, 1, a2);
}

BOOL writeContentsOfDictionaryToURL(const void *a1, const __CFURL *a2, CFPropertyListFormat a3, CFErrorRef *a4)
{
  BOOL v4 = 0;
  if (a1 && a2)
  {
    uint64_t v8 = CFWriteStreamCreateWithFile((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a2);
    if (v8)
    {
      CFOptionFlags v9 = v8;
      if (CFWriteStreamOpen(v8))
      {
        BOOL v4 = CFPropertyListWrite(a1, v9, a3, 0, a4) != 0;
        CFWriteStreamClose(v9);
      }
      else
      {
        BOOL v4 = 0;
      }
      CFRelease(v9);
    }
    else
    {
      return 0;
    }
  }
  return v4;
}

void SIResourcePool::~SIResourcePool(SIResourcePool *this)
{
  uint64_t v2 = (std::mutex *)*((void *)this + 11);
  std::mutex::lock(v2);
  CFLocaleRef v3 = (uint64_t *)*((void *)this + 4);
  for (int i = (uint64_t *)*((void *)this + 5); v3 != i; v3 += 3)
  {
    if (*v3) {
      std::function<void ()(void *)>::operator()((uint64_t)this + 56, *v3);
    }
  }
  std::mutex::unlock(v2);
  std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 7);
  CFTypeRef v5 = (void *)*((void *)this + 4);
  if (v5)
  {
    *((void *)this + 5) = v5;
    operator delete(v5);
  }
}

uint64_t std::function<void ()(void *)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
}

uint64_t SIResourcePool::acquireResourceLocked@<X0>(std::unique_lock<std::mutex> *__lk@<X1>, uint64_t a2@<X0>, int a3@<W2>, void *a4@<X8>)
{
  if (a3)
  {
    if (*(void *)(a2 + 112))
    {
      while (1)
      {
        if (*(void *)(a2 + 120))
        {
          uint64_t v7 = *(void *)(a2 + 32);
          uint64_t v8 = *(void *)(a2 + 40) - v7;
          if (v8) {
            break;
          }
        }
LABEL_9:
        std::condition_variable::wait(*(std::condition_variable **)(a2 + 96), __lk);
        if (!*(void *)(a2 + 112)) {
          goto LABEL_58;
        }
      }
      uint64_t v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
      while (!*(void *)(v7 + 24 * v9) || *(unsigned char *)(v7 + 24 * v9 + 8))
      {
        uint64_t v9 = ++v10;
        if (v11 <= v10) {
          goto LABEL_9;
        }
      }
      goto LABEL_52;
    }
    goto LABEL_58;
  }
  if (!*(unsigned char *)(a2 + 104))
  {
    CFStringRef v12 = *(std::condition_variable **)(a2 + 96);
    unsigned int v13 = *(_DWORD *)(a2 + 24);
    v14.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_ + 1000000 * v13;
    while (1)
    {
      if (!*(void *)(a2 + 112)) {
        goto LABEL_49;
      }
      if (*(void *)(a2 + 120))
      {
        uint64_t v15 = *(void *)(a2 + 32);
        uint64_t v16 = *(void *)(a2 + 40) - v15;
        if (v16)
        {
          uint64_t v17 = 0;
          unsigned int v10 = 0;
          unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * (v16 >> 3);
          while (!*(void *)(v15 + 24 * v17) || *(unsigned char *)(v15 + 24 * v17 + 8))
          {
            uint64_t v17 = ++v10;
            if (v18 <= v10) {
              goto LABEL_20;
            }
          }
          goto LABEL_50;
        }
      }
LABEL_20:
      if (std::chrono::steady_clock::now().__d_.__rep_ >= v14.__d_.__rep_) {
        goto LABEL_35;
      }
      v19.__d_.__rep_ = v14.__d_.__rep_ - std::chrono::steady_clock::now().__d_.__rep_;
      if (v19.__d_.__rep_ < 1) {
        goto LABEL_34;
      }
      std::chrono::steady_clock::now();
      v20.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      if (v20.__d_.__rep_)
      {
        if (v20.__d_.__rep_ < 1)
        {
          if ((unint64_t)v20.__d_.__rep_ < 0xFFDF3B645A1CAC09)
          {
            std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v21 = 0x8000000000000000;
LABEL_32:
            v22.__d_.__rep_ = v21 + v19.__d_.__rep_;
            goto LABEL_33;
          }
        }
        else if ((unint64_t)v20.__d_.__rep_ > 0x20C49BA5E353F7)
        {
          std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v21 = 0x7FFFFFFFFFFFFFFFLL;
          goto LABEL_30;
        }
        std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v21 = 1000 * v20.__d_.__rep_;
      }
      else
      {
        std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v21 = 0;
      }
LABEL_30:
      if (v21 <= (v19.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL)) {
        goto LABEL_32;
      }
      v22.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
LABEL_33:
      std::condition_variable::__do_timed_wait(v12, __lk, v22);
      std::chrono::steady_clock::now();
LABEL_34:
      if (std::chrono::steady_clock::now().__d_.__rep_ >= v14.__d_.__rep_)
      {
LABEL_35:
        if (!*(void *)(a2 + 112))
        {
LABEL_49:
          unsigned int v10 = -1;
          goto LABEL_50;
        }
        if (!*(void *)(a2 + 120) || (v23 = *(void *)(a2 + 32), uint64_t v24 = *(void *)(a2 + 40), v24 == v23))
        {
LABEL_47:
          int v28 = *(unsigned __int8 *)(a2 + 104);
          *(unsigned char *)(a2 + 104) = 1;
          if (!v28) {
            std::condition_variable::notify_all(*(std::condition_variable **)(a2 + 96));
          }
          goto LABEL_58;
        }
        uint64_t v25 = 0;
        unsigned int v10 = 0;
        unint64_t v26 = 0xAAAAAAAAAAAAAAABLL * ((v24 - v23) >> 3);
        while (!*(void *)(v23 + 24 * v25) || *(unsigned char *)(v23 + 24 * v25 + 8))
        {
          uint64_t v25 = ++v10;
          if (v26 <= v10)
          {
            if (v24 == v23) {
              goto LABEL_47;
            }
            uint64_t v27 = 0;
            unsigned int v10 = 0;
            while (!*(void *)(v23 + 24 * v27) || *(unsigned char *)(v23 + 24 * v27 + 8))
            {
              uint64_t v27 = ++v10;
              if (v26 <= v10) {
                goto LABEL_47;
              }
            }
            break;
          }
        }
LABEL_50:
        int v29 = *(unsigned __int8 *)(a2 + 104);
        *(unsigned char *)(a2 + 104) = 0;
        if (v29) {
          std::condition_variable::notify_all(*(std::condition_variable **)(a2 + 96));
        }
LABEL_52:
        if (v10 != -1)
        {
          uint64_t v30 = *(void *)(a2 + 120);
          *(unsigned char *)(*(void *)(a2 + 32) + 24 * (int)v10 + 8) = 1;
          *(void *)(a2 + 120) = v30 - 1;
          if (logger(void)::token != -1) {
            dispatch_once(&logger(void)::token, &__block_literal_global_11_0);
          }
          if (os_log_type_enabled((os_log_t)logger(void)::log, OS_LOG_TYPE_DEBUG)) {
            SIResourcePool::acquireResourceLocked();
          }
          operator new();
        }
LABEL_58:
        if (logger(void)::token != -1) {
          dispatch_once(&logger(void)::token, &__block_literal_global_11_0);
        }
        int v31 = logger(void)::log;
        if (os_log_type_enabled((os_log_t)logger(void)::log, OS_LOG_TYPE_DEBUG)) {
          SIResourcePool::acquireResourceLocked(a2, v31, v32, v33, v34, v35, v36, v37);
        }
        break;
      }
    }
  }
  uint64_t result = 0;
  *a4 = 0;
  return result;
}

void SIResourcePool::releaseResource(SIResourcePool *this, unsigned int a2)
{
  v5.__m_ = (std::unique_lock<std::mutex>::mutex_type *)*((void *)this + 11);
  *(void *)&v5.__owns_ = 1;
  std::mutex::lock(v5.__m_);
  uint64_t v4 = *((void *)this + 15);
  *(unsigned char *)(*((void *)this + 4) + 24 * a2 + 8) = 0;
  *((void *)this + 15) = v4 + 1;
  if (logger(void)::token != -1) {
    dispatch_once(&logger(void)::token, &__block_literal_global_11_0);
  }
  if (os_log_type_enabled((os_log_t)logger(void)::log, OS_LOG_TYPE_DEBUG)) {
    SIResourcePool::releaseResource();
  }
  *((unsigned char *)this + 104) = 0;
  std::unique_lock<std::mutex>::unlock(&v5);
  std::condition_variable::notify_all(*((std::condition_variable **)this + 12));
  if (v5.__owns_) {
    std::mutex::unlock(v5.__m_);
  }
}

void sub_1BDB0A460(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::mutex *a9, char a10)
{
  if (a10) {
    std::mutex::unlock(a9);
  }
  _Unwind_Resume(exception_object);
}

int64x2_t SIResourcePool::addResourceLocked(int64x2_t *this, void *a2)
{
  for (int i = (void *)this[2].i64[0]; i != (void *)this[2].i64[1]; i += 3)
  {
    if (*i) {
      BOOL v3 = 0;
    }
    else {
      BOOL v3 = i[2] == 0;
    }
    if (v3)
    {
      *int i = a2;
      int64x2_t result = vaddq_s64(this[7], vdupq_n_s64(1uLL));
      this[7] = result;
      this[6].i8[8] = 0;
      return result;
    }
  }
  return result;
}

void SIResourcePool::addResourceForTicket(SIResourcePool *this, void *a2, uint64_t a3)
{
  v7.__m_ = (std::unique_lock<std::mutex>::mutex_type *)*((void *)this + 11);
  *(void *)&v7.__owns_ = 1;
  std::mutex::lock(v7.__m_);
  for (uint64_t i = *((void *)this + 4); i != *((void *)this + 5); i += 24)
  {
    if (*(void *)(i + 16) == a3)
    {
      *(void *)uint64_t i = a2;
      *(unsigned char *)(i + 8) = 0;
      *(void *)(i + 16) = 0;
      ++*((void *)this + 15);
      break;
    }
  }
  *((unsigned char *)this + 104) = 0;
  std::unique_lock<std::mutex>::unlock(&v7);
  std::condition_variable::notify_all(*((std::condition_variable **)this + 12));
  if (v7.__owns_) {
    std::mutex::unlock(v7.__m_);
  }
}

void sub_1BDB0A56C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::mutex *a9, char a10)
{
  if (a10) {
    std::mutex::unlock(a9);
  }
  _Unwind_Resume(exception_object);
}

void SIResourcePool::surrenderTicket(SIResourcePool *this, uint64_t a2)
{
  v5.__m_ = (std::unique_lock<std::mutex>::mutex_type *)*((void *)this + 11);
  *(void *)&v5.__owns_ = 1;
  std::mutex::lock(v5.__m_);
  for (uint64_t i = *((void *)this + 4); i != *((void *)this + 5); i += 24)
  {
    if (*(void *)(i + 16) == a2)
    {
      *(unsigned char *)(i + 8) = 0;
      *(void *)(i + 16) = 0;
      --*((void *)this + 14);
      break;
    }
  }
  std::unique_lock<std::mutex>::unlock(&v5);
  std::condition_variable::notify_all(*((std::condition_variable **)this + 12));
  if (v5.__owns_) {
    std::mutex::unlock(v5.__m_);
  }
}

void sub_1BDB0A61C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::mutex *a9, char a10)
{
  if (a10) {
    std::mutex::unlock(a9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SIResourcePool::reserveResourceLocked(SIResourcePool *this)
{
  for (uint64_t i = *((void *)this + 4); ; i += 24)
  {
    if (i == *((void *)this + 5)) {
      return 0;
    }
    if (!*(void *)i && !*(void *)(i + 16)) {
      break;
    }
  }
  *(unsigned char *)(i + 8) = 1;
  uint64_t v2 = *(void *)this + 1;
  *(void *)this = v2;
  *(void *)(i + 16) = v2;
  ++*((void *)this + 14);
  return v2;
}

uint64_t SIResourcePool::compactLocked(int64x2_t *this)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = this[2].i64[0];
  uint64_t v3 = this[2].i64[1];
  if (v2 == v3) {
    goto LABEL_15;
  }
  uint64_t v4 = 0;
  do
  {
    if (*(void *)v2) {
      BOOL v5 = *(unsigned char *)(v2 + 8) == 0;
    }
    else {
      BOOL v5 = 0;
    }
    if (v5)
    {
      std::function<void ()(void *)>::operator()((uint64_t)&this[3].i64[1], *(void *)v2);
      *(void *)uint64_t v2 = 0;
      v6.i64[0] = -1;
      v6.i64[1] = -1;
      this[7] = vaddq_s64(this[7], v6);
      ++v4;
    }
    v2 += 24;
  }
  while (v2 != v3);
  if (!v4)
  {
LABEL_15:
    if (logger(void)::token != -1) {
      dispatch_once(&logger(void)::token, &__block_literal_global_11_0);
    }
    unsigned int v10 = logger(void)::log;
    if (os_log_type_enabled((os_log_t)logger(void)::log, OS_LOG_TYPE_DEFAULT))
    {
      __int32 v11 = this->i32[2];
      uint64_t v12 = this[7].i64[0];
      int v14 = 67109632;
      __int32 v15 = v11;
      __int16 v16 = 2048;
      uint64_t v17 = v12;
      __int16 v18 = 2048;
      uint64_t v19 = 0;
      _os_log_impl(&dword_1BDAD0000, v10, OS_LOG_TYPE_DEFAULT, "pool %d compaction failed, %lu active, %lu freed", (uint8_t *)&v14, 0x1Cu);
    }
    return 0;
  }
  else
  {
    if (logger(void)::token != -1) {
      dispatch_once(&logger(void)::token, &__block_literal_global_11_0);
    }
    std::unique_lock<std::mutex> v7 = logger(void)::log;
    if (os_log_type_enabled((os_log_t)logger(void)::log, OS_LOG_TYPE_DEFAULT))
    {
      __int32 v8 = this->i32[2];
      uint64_t v9 = this[7].i64[0];
      int v14 = 67109632;
      __int32 v15 = v8;
      __int16 v16 = 2048;
      uint64_t v17 = v9;
      __int16 v18 = 2048;
      uint64_t v19 = v4;
      _os_log_impl(&dword_1BDAD0000, v7, OS_LOG_TYPE_DEFAULT, "pool %d compacted, %lu active, %lu freed", (uint8_t *)&v14, 0x1Cu);
    }
  }
  return v4;
}

int64x2_t *SIResourcePool::shrinkLocked(int64x2_t *this)
{
  uint64_t v1 = this[2].i64[0];
  uint64_t v2 = this[2].i64[1];
  if (v1 != v2)
  {
    uint64_t v3 = this;
    uint64_t v4 = (uint64_t)&this[3].i64[1];
    uint64_t v5 = this[7].i64[0];
    do
    {
      if (v5 == 1) {
        break;
      }
      if (*(void *)v1 && *(unsigned char *)(v1 + 8) == 0)
      {
        this = (int64x2_t *)std::function<void ()(void *)>::operator()(v4, *(void *)v1);
        *(void *)uint64_t v1 = 0;
        v7.i64[0] = -1;
        v7.i64[1] = -1;
        int64x2_t v8 = vaddq_s64(v3[7], v7);
        v3[7] = v8;
        uint64_t v5 = v8.i64[0];
      }
      v1 += 24;
    }
    while (v1 != v2);
  }
  return this;
}

void SIResourceLock::~SIResourceLock(SIResourceLock *this)
{
}

uint64_t SIResourceLock::get(SIResourceLock *this)
{
  return *(void *)(*(void *)(*(void *)this + 32) + 24 * *((unsigned int *)this + 2));
}

void SIResourcePools::PoolDesc::~PoolDesc(SIResourcePool **this)
{
}

uint64_t *SIResourcePools::getOrCreateLocked(SIResourcePools *this, int a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  int v5 = a2;
  uint64_t v2 = std::__hash_table<std::__hash_value_type<int,SIResourcePools::PoolDesc>,std::__unordered_map_hasher<int,std::__hash_value_type<int,SIResourcePools::PoolDesc>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,SIResourcePools::PoolDesc>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,SIResourcePools::PoolDesc>>>::find<int>((void *)this + 21, &v5);
  if (!v2)
  {
    uint64_t v4 = 0;
    operator new();
  }
  return v2 + 3;
}

void sub_1BDB0AAC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<SIResourcePool>::reset[abi:ne180100]((SIResourcePool **)va, 0);
  _Unwind_Resume(a1);
}

uint64_t SIResourcePools::SIResourcePools(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(_DWORD *)(a1 + 16) = a4;
  *(void *)(a1 + 24) = 850045863;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(void *)(a1 + 8std::unique_ptr<SIResourcePool>::reset[abi:ne180100](this, 0) = 0;
  *(void *)(a1 + 88) = 1018212795;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(void *)(a1 + 128) = 0;
  std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100](a1 + 136, a5);
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_DWORD *)(a1 + 20std::unique_ptr<SIResourcePool>::reset[abi:ne180100](this, 0) = 1065353216;
  return a1;
}

void sub_1BDB0ABA4(_Unwind_Exception *a1)
{
  std::condition_variable::~condition_variable(v2);
  std::mutex::~mutex(v1);
  _Unwind_Resume(a1);
}

uint64_t SIResourcePools::decayUsageCountLocked(uint64_t this)
{
  for (uint64_t i = *(float **)(this + 184); i; uint64_t i = *(float **)i)
    i[9] = i[9] * 0.5;
  return this;
}

BOOL SIResourcePools::populateLocked(SIResourcePools *a1, int a2, unint64_t a3, int a4, uint64_t a5)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  Locked = SIResourcePools::getOrCreateLocked(a1, a2);
  if (*((unsigned char *)Locked + 8)) {
    return 1;
  }
  uint64_t v12 = Locked;
  unsigned int v13 = (SIResourcePool *)*Locked;
  unint64_t v14 = *((void *)a1 + 1);
  if (v14 >= a3) {
    unint64_t v14 = a3;
  }
  uint64_t v15 = v14 - *((void *)v13 + 14);
  if (v15 < 1) {
    return 1;
  }
  unsigned int v49 = a2;
  __int16 v16 = (void *)*((void *)a1 + 23);
  if (v16)
  {
    uint64_t v17 = 0;
    do
    {
      v17 += *(void *)(v16[3] + 112);
      __int16 v16 = (void *)*v16;
    }
    while (v16);
  }
  else
  {
    uint64_t v17 = 0;
  }
  uint64_t v18 = *(void *)a1 - v17;
  if (v18 < v15)
  {
    int v19 = 0;
    do
    {
      if (v19) {
        break;
      }
      uint64_t v20 = (uint64_t *)*((void *)a1 + 23);
      if (v20)
      {
        std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v21 = (float *)*((void *)a1 + 23);
        do
        {
          v21[9] = v21[9] * 0.5;
          std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v21 = *(float **)v21;
        }
        while (v21);
        std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v22 = 0;
        float v23 = 3.4028e38;
        do
        {
          uint64_t v24 = v20[3];
          if (*((unsigned char *)v20 + 32))
          {
            float v25 = 3.4028e38;
            if (*(void *)(v24 + 120)) {
              float v25 = 0.0;
            }
          }
          else
          {
            float v25 = 3.4028e38;
            if (v12 != v20 + 3)
            {
              unint64_t v26 = *(void *)(v24 + 112);
              if (v26)
              {
                if (*(void *)(v24 + 120)) {
                  float v25 = *((float *)v20 + 9) / (float)v26;
                }
                else {
                  float v25 = 3.4028e38;
                }
              }
            }
          }
          if (v25 < v23)
          {
            float v23 = v25;
            std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v22 = (int64x2_t **)(v20 + 3);
          }
          uint64_t v20 = (uint64_t *)*v20;
        }
        while (v20);
        if (v22) {
          v18 += SIResourcePool::compactLocked(*v22);
        }
      }
      int v19 = 1;
    }
    while (v18 < v15);
  }
  uint64_t v47 = v15;
  if (v15 >= v18) {
    uint64_t v15 = v18;
  }
  if (!v18) {
    return 0;
  }
  uint64_t v46 = v18;
  if (!a4)
  {
    uint64_t v30 = malloc_type_malloc(8 * v15, 0x100004000313F17uLL);
    uint64_t v48 = v30;
    if (v15 < 1)
    {
      uint64_t v45 = 0;
    }
    else
    {
      int v31 = v30;
      uint64_t v32 = v15;
      do
      {
        *v31++ = SIResourcePool::reserveResourceLocked(v13);
        --v32;
      }
      while (v32);
      uint64_t v45 = v15;
    }
    if (SIResourcePools::populateLocked(int,unsigned long,BOOL,std::function<void * ()(void)> const&)::once != -1) {
      dispatch_once(&SIResourcePools::populateLocked(int,unsigned long,BOOL,std::function<void * ()(void)> const&)::once, &__block_literal_global_12);
    }
    memset(buf, 0, 32);
    std::__function::__value_func<void * ()(void)>::__value_func[abi:ne180100]((uint64_t)buf, a5);
    if (v15 > 0)
    {
      uint64_t v33 = 0;
      uint64_t v34 = MEMORY[0x1E4F143A8];
      do
      {
        uint64_t v35 = SIResourcePools::populateLocked(int,unsigned long,BOOL,std::function<void * ()(void)> const&)::queue;
        block[0] = v34;
        block[1] = 1174405120;
        block[2] = ___ZN15SIResourcePools14populateLockedEimbRKNSt3__18functionIFPvvEEE_block_invoke_2;
        block[3] = &__block_descriptor_tmp_2_1;
        void block[4] = v12;
        std::__function::__value_func<void * ()(void)>::__value_func[abi:ne180100]((uint64_t)v55, (uint64_t)buf);
        v55[4] = v13;
        v55[5] = v48;
        v55[6] = v33;
        unsigned int v56 = v49;
        dispatch_async(v35, block);
        std::__function::__value_func<void * ()(void)>::~__value_func[abi:ne180100](v55);
        ++v33;
      }
      while (v15 != v33);
    }
    v50[0] = MEMORY[0x1E4F143A8];
    v50[1] = 0x40000000;
    v50[2] = ___ZN15SIResourcePools14populateLockedEimbRKNSt3__18functionIFPvvEEE_block_invoke_3;
    v50[3] = &__block_descriptor_tmp_4_1;
    uint8_t v50[4] = v48;
    dispatch_barrier_async((dispatch_queue_t)SIResourcePools::populateLocked(int,unsigned long,BOOL,std::function<void * ()(void)> const&)::queue, v50);
    std::__function::__value_func<void * ()(void)>::~__value_func[abi:ne180100](buf);
    uint64_t v15 = v45;
    goto LABEL_56;
  }
  if (v15 < 1)
  {
    uint64_t v15 = 0;
LABEL_56:
    if (logger(void)::token != -1) {
      dispatch_once(&logger(void)::token, &__block_literal_global_11_0);
    }
    uint64_t v36 = logger(void)::log;
    if (os_log_type_enabled((os_log_t)logger(void)::log, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67110144;
      *(_DWORD *)&uint8_t buf[4] = v49;
      *(_WORD *)&uint8_t buf[8] = 2048;
      *(void *)&buf[10] = v15;
      *(_WORD *)&buf[18] = 2048;
      *(void *)&buf[20] = v17;
      *(_WORD *)&buf[28] = 2048;
      *(void *)&buf[30] = v46;
      __int16 v52 = 2048;
      uint64_t v53 = v47;
      _os_log_debug_impl(&dword_1BDAD0000, v36, OS_LOG_TYPE_DEBUG, "prepopulated pool %d with %llu resources, totalCount=%lu, allowedDelta=%lld, desiredDelta=%lld", buf, 0x30u);
    }
    return v46 > 0 || v15 != 0;
  }
  uint64_t v27 = v15;
  while (1)
  {
    uint64_t v28 = *(void *)(a5 + 24);
    if (!v28) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    int v29 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v28 + 48))(v28);
    if (!v29) {
      break;
    }
    SIResourcePool::addResourceLocked((int64x2_t *)v13, v29);
    if (!--v27) {
      goto LABEL_56;
    }
  }
  if (logger(void)::token != -1) {
    dispatch_once(&logger(void)::token, &__block_literal_global_11_0);
  }
  uint64_t v38 = logger(void)::log;
  if (os_log_type_enabled((os_log_t)logger(void)::log, OS_LOG_TYPE_DEBUG)) {
    SIResourcePools::populateLocked(v49, v38, v39, v40, v41, v42, v43, v44);
  }
  BOOL result = 1;
  *((unsigned char *)v12 + 8) = 1;
  return result;
}

void sub_1BDB0B0EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
}

void ___ZN15SIResourcePools14populateLockedEimbRKNSt3__18functionIFPvvEEE_block_invoke()
{
  initially_inactive = dispatch_queue_attr_make_initially_inactive(MEMORY[0x1E4F14430]);
  SIResourcePools::populateLocked(int,unsigned long,BOOL,std::function<void * ()(void)> const&)::queue = (uint64_t)dispatch_queue_create("language queue", initially_inactive);
  dispatch_queue_set_width();
  uint64_t v1 = SIResourcePools::populateLocked(int,unsigned long,BOOL,std::function<void * ()(void)> const&)::queue;

  dispatch_activate(v1);
}

void ___ZN15SIResourcePools14populateLockedEimbRKNSt3__18functionIFPvvEEE_block_invoke_2(void *a1)
{
  if (!*(unsigned char *)(a1[4] + 8))
  {
    uint64_t v2 = a1[8];
    if (!v2) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    uint64_t v3 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 48))(v2);
    uint64_t v4 = (SIResourcePool *)a1[9];
    uint64_t v5 = a1[10];
    uint64_t v6 = a1[11];
    if (v3)
    {
      SIResourcePool::addResourceForTicket(v4, v3, *(void *)(v5 + 8 * v6));
      char v7 = 0;
    }
    else
    {
      SIResourcePool::surrenderTicket(v4, *(void *)(v5 + 8 * v6));
      if (logger(void)::token != -1) {
        dispatch_once(&logger(void)::token, &__block_literal_global_11_0);
      }
      int64x2_t v8 = logger(void)::log;
      if (os_log_type_enabled((os_log_t)logger(void)::log, OS_LOG_TYPE_DEBUG)) {
        ___ZN15SIResourcePools14populateLockedEimbRKNSt3__18functionIFPvvEEE_block_invoke_2_cold_1((uint64_t)a1, v8, v9, v10, v11, v12, v13, v14);
      }
      char v7 = 1;
    }
    *(unsigned char *)(a1[4] + 8) = v7;
  }
}

uint64_t __copy_helper_block_e8_40c28_ZTSNSt3__18functionIFPvvEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void * ()(void)>::__value_func[abi:ne180100](a1 + 40, a2 + 40);
}

void *__destroy_helper_block_e8_40c28_ZTSNSt3__18functionIFPvvEEE(uint64_t a1)
{
  return std::__function::__value_func<void * ()(void)>::~__value_func[abi:ne180100]((void *)(a1 + 40));
}

void ___ZN15SIResourcePools14populateLockedEimbRKNSt3__18functionIFPvvEEE_block_invoke_3(uint64_t a1)
{
}

void SIResourcePools::populate(uint64_t a1, int a2, unint64_t a3, int a4, uint64_t a5)
{
  v10.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 24);
  *(void *)&v10.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 24));
  SIResourcePools::populateLocked((SIResourcePools *)a1, a2, a3, a4, a5);
  std::unique_lock<std::mutex>::unlock(&v10);
  std::condition_variable::notify_all((std::condition_variable *)(a1 + 88));
  if (v10.__owns_) {
    std::mutex::unlock(v10.__m_);
  }
}

void sub_1BDB0B2F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::mutex *a9, char a10)
{
  if (a10) {
    std::mutex::unlock(a9);
  }
  _Unwind_Resume(exception_object);
}

void SIResourcePools::acquireResource(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, int a4@<W3>, void *a5@<X8>)
{
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 24);
  *(void *)&__lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 24));
  Locked = SIResourcePools::getOrCreateLocked((SIResourcePools *)a1, a2);
  uint64_t v11 = Locked;
  if (*((unsigned char *)Locked + 8)) {
    goto LABEL_2;
  }
  uint64_t v12 = *Locked;
  if (a4)
  {
    for (uint64_t i = *(void *)(v12 + 112);
          i != 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v12 + 40) - *(void *)(v12 + 32)) >> 3);
          uint64_t i = *(void *)(v12 + 112))
    {
      if (*(void *)(v12 + 120) || SIResourcePools::populateLocked((SIResourcePools *)a1, a2, i + 1, 1, a3)) {
        break;
      }
      if (*((unsigned char *)v11 + 8)) {
        goto LABEL_2;
      }
      std::condition_variable::wait((std::condition_variable *)(a1 + 88), &__lk);
    }
LABEL_42:
    if (*((unsigned char *)v11 + 8)) {
      goto LABEL_2;
    }
    uint64_t v25 = 0;
    SIResourcePool::acquireResourceLocked(&__lk, v12, a4, &v25);
    uint64_t v23 = v25;
    if (v25)
    {
      *((float *)v11 + 3) = *((float *)v11 + 3) + 1.0;
      std::unique_lock<std::mutex>::unlock(&__lk);
      std::condition_variable::notify_all((std::condition_variable *)(a1 + 88));
    }
    *a5 = v23;
    goto LABEL_3;
  }
  if (*(unsigned char *)(v12 + 104)) {
    goto LABEL_2;
  }
  unsigned int v14 = *(_DWORD *)(a1 + 16);
  v15.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_ + 1000000 * v14;
  do
  {
    uint64_t v16 = *(void *)(v12 + 112);
    if (v16 == 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v12 + 40) - *(void *)(v12 + 32)) >> 3)) {
      goto LABEL_35;
    }
    if (*(unsigned char *)(v12 + 104)) {
      goto LABEL_38;
    }
    if (*(void *)(v12 + 120)) {
      goto LABEL_41;
    }
    if (SIResourcePools::populateLocked((SIResourcePools *)a1, a2, v16 + 1, 0, a3)) {
      goto LABEL_35;
    }
    if (std::chrono::steady_clock::now().__d_.__rep_ >= v15.__d_.__rep_) {
      break;
    }
    v17.__d_.__rep_ = v15.__d_.__rep_ - std::chrono::steady_clock::now().__d_.__rep_;
    if (v17.__d_.__rep_ >= 1)
    {
      std::chrono::steady_clock::now();
      v18.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      if (!v18.__d_.__rep_)
      {
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v19 = 0;
        goto LABEL_29;
      }
      if (v18.__d_.__rep_ < 1)
      {
        if ((unint64_t)v18.__d_.__rep_ >= 0xFFDF3B645A1CAC09) {
          goto LABEL_28;
        }
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v19 = 0x8000000000000000;
      }
      else
      {
        if ((unint64_t)v18.__d_.__rep_ > 0x20C49BA5E353F7)
        {
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v19 = 0x7FFFFFFFFFFFFFFFLL;
          goto LABEL_29;
        }
LABEL_28:
        std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v19 = 1000 * v18.__d_.__rep_;
LABEL_29:
        if (v19 > (v17.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
        {
          v20.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
LABEL_32:
          std::condition_variable::__do_timed_wait((std::condition_variable *)(a1 + 88), &__lk, v20);
          std::chrono::steady_clock::now();
          continue;
        }
      }
      v20.__d_.__rep_ = v19 + v17.__d_.__rep_;
      goto LABEL_32;
    }
  }
  while (std::chrono::steady_clock::now().__d_.__rep_ < v15.__d_.__rep_);
  uint64_t v21 = *(void *)(v12 + 112);
  if (v21 == 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v12 + 40) - *(void *)(v12 + 32)) >> 3))
  {
LABEL_35:
    int v22 = *(unsigned __int8 *)(v12 + 104);
    *(unsigned char *)(v12 + 104) = 0;
    if (!v22) {
      goto LABEL_42;
    }
    goto LABEL_39;
  }
  if (*(unsigned char *)(v12 + 104))
  {
LABEL_38:
    *(unsigned char *)(v12 + 104) = 0;
LABEL_39:
    std::condition_variable::notify_all(*(std::condition_variable **)(v12 + 96));
    goto LABEL_42;
  }
  if (*(void *)(v12 + 120))
  {
LABEL_41:
    *(unsigned char *)(v12 + 104) = 0;
    goto LABEL_42;
  }
  if (SIResourcePools::populateLocked((SIResourcePools *)a1, a2, v21 + 1, 0, a3)) {
    goto LABEL_35;
  }
  int v24 = *(unsigned __int8 *)(v12 + 104);
  *(unsigned char *)(v12 + 104) = 1;
  if (!v24) {
    std::condition_variable::notify_all(*(std::condition_variable **)(v12 + 96));
  }
LABEL_2:
  *a5 = 0;
LABEL_3:
  if (__lk.__owns_) {
    std::mutex::unlock(__lk.__m_);
  }
}

void sub_1BDB0B634(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, std::mutex *a11, char a12)
{
  if (a12) {
    std::mutex::unlock(a11);
  }
  _Unwind_Resume(exception_object);
}

void SIResourcePools::shrinkAll(SIResourcePools *this)
{
  v3.__m_ = (std::unique_lock<std::mutex>::mutex_type *)((char *)this + 24);
  *(void *)&v3.__owns_ = 1;
  std::mutex::lock((std::mutex *)((char *)this + 24));
  for (uint64_t i = (int64x2_t **)((char *)this + 184); ; SIResourcePool::shrinkLocked(i[3]))
  {
    uint64_t i = (int64x2_t **)*i;
    if (!i) {
      break;
    }
  }
  std::unique_lock<std::mutex>::unlock(&v3);
  if (v3.__owns_) {
    std::mutex::unlock(v3.__m_);
  }
}

void sub_1BDB0B6E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::mutex *a9, char a10)
{
  if (a10) {
    std::mutex::unlock(a9);
  }
  _Unwind_Resume(exception_object);
}

void SIResourcePools::getPoolStatsForTesting(SIResourcePools *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v30 = 0;
  int v31 = 0;
  unint64_t v32 = 0;
  std::unique_lock<std::mutex> v3 = (uint64_t *)*((void *)this + 23);
  if (v3)
  {
    do
    {
      memset(&v29, 0, sizeof(v29));
      std::to_string(&v28, *((_DWORD *)v3 + 4));
      uint64_t v4 = std::string::append(&v28, ":");
      long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
      v29.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v5;
      v4->__r_.__value_.__l.__size_ = 0;
      v4->__r_.__value_.__r.__words[2] = 0;
      v4->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v28.__r_.__value_.__l.__data_);
      }
      std::to_string(&v27, *(void *)(v3[3] + 112));
      uint64_t v6 = std::string::insert(&v27, 0, "active=");
      long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
      v28.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v7;
      v6->__r_.__value_.__l.__size_ = 0;
      v6->__r_.__value_.__r.__words[2] = 0;
      v6->__r_.__value_.__r.__words[0] = 0;
      if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int64x2_t v8 = &v28;
      }
      else {
        int64x2_t v8 = (std::string *)v28.__r_.__value_.__r.__words[0];
      }
      if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v28.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v28.__r_.__value_.__l.__size_;
      }
      std::string::append(&v29, (const std::string::value_type *)v8, size);
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v28.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v27.__r_.__value_.__l.__data_);
      }
      std::to_string(&v27, *(void *)(v3[3] + 120));
      std::unique_lock<std::mutex> v10 = std::string::insert(&v27, 0, ",unused=");
      long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      v28.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v12 = &v28;
      }
      else {
        uint64_t v12 = (std::string *)v28.__r_.__value_.__r.__words[0];
      }
      if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v13 = HIBYTE(v28.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v13 = v28.__r_.__value_.__l.__size_;
      }
      std::string::append(&v29, (const std::string::value_type *)v12, v13);
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v28.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v27.__r_.__value_.__l.__data_);
      }
      unsigned int v14 = v31;
      if ((unint64_t)v31 >= v32)
      {
        uint64_t v16 = (std::string *)std::vector<std::string>::__emplace_back_slow_path<std::string&>(&v30, (long long *)&v29);
      }
      else
      {
        if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(v31, v29.__r_.__value_.__l.__data_, v29.__r_.__value_.__l.__size_);
        }
        else
        {
          long long v15 = *(_OWORD *)&v29.__r_.__value_.__l.__data_;
          v31->__r_.__value_.__r.__words[2] = v29.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v15;
        }
        uint64_t v16 = v14 + 1;
      }
      int v31 = v16;
      if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v29.__r_.__value_.__l.__data_);
      }
      std::unique_lock<std::mutex> v3 = (uint64_t *)*v3;
    }
    while (v3);
    uint64_t v17 = v30;
    std::chrono::system_clock::time_point v18 = (long long *)v31;
  }
  else
  {
    std::chrono::system_clock::time_point v18 = 0;
    uint64_t v17 = 0;
  }
  unint64_t v19 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v18 - v17) >> 3));
  if (v18 == (long long *)v17) {
    uint64_t v20 = 0;
  }
  else {
    uint64_t v20 = v19;
  }
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,false>(v17, v18, (uint64_t)&v28, v20, 1);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v21 = v30;
  for (uint64_t i = v31; (std::string *)v21 != i; v21 += 24)
  {
    uint64_t v23 = *(unsigned __int8 *)(a2 + 23);
    if ((v23 & 0x80u) != 0) {
      uint64_t v23 = *(void *)(a2 + 8);
    }
    if (v23) {
      std::string::append((std::string *)a2, " ");
    }
    int v24 = *(char *)(v21 + 23);
    if (v24 >= 0) {
      uint64_t v25 = (const std::string::value_type *)v21;
    }
    else {
      uint64_t v25 = *(const std::string::value_type **)v21;
    }
    if (v24 >= 0) {
      std::string::size_type v26 = *(unsigned __int8 *)(v21 + 23);
    }
    else {
      std::string::size_type v26 = *(void *)(v21 + 8);
    }
    std::string::append((std::string *)a2, v25, v26);
  }
  v29.__r_.__value_.__r.__words[0] = (std::string::size_type)&v30;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
}

void sub_1BDB0B9CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29,uint64_t a30)
{
  std::string __p = &a29;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void sub_1BDB0BA64()
{
  if (*(char *)(v0 + 23) < 0) {
    JUMPOUT(0x1BDB0BA2CLL);
  }
  JUMPOUT(0x1BDB0BA30);
}

os_log_t ___ZL6loggerv_block_invoke_1()
{
  uint64_t v0 = _nlpLoggingSubsystem();
  os_log_t result = os_log_create(v0, "SpotlightResourcePool");
  logger(void)::log = (uint64_t)result;
  return result;
}

uint64_t std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

SIResourcePool *std::unique_ptr<SIResourcePool>::reset[abi:ne180100](SIResourcePool **a1, SIResourcePool *a2)
{
  os_log_t result = *a1;
  *a1 = a2;
  if (result)
  {
    SIResourcePool::~SIResourcePool(result);
    JUMPOUT(0x1C1883920);
  }
  return result;
}

uint64_t *std::__hash_table<std::__hash_value_type<int,SIResourcePools::PoolDesc>,std::__unordered_map_hasher<int,std::__hash_value_type<int,SIResourcePools::PoolDesc>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,SIResourcePools::PoolDesc>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,SIResourcePools::PoolDesc>>>::find<int>(void *a1, int *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (*(void *)&v2 <= v3) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = (*(void *)&v2 - 1) & v3;
  }
  uint64_t v6 = *(uint64_t ***)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  for (os_log_t result = *v6; result; os_log_t result = (uint64_t *)*result)
  {
    unint64_t v8 = result[1];
    if (v8 == v3)
    {
      if (*((_DWORD *)result + 4) == v3) {
        return result;
      }
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(void *)&v2) {
          v8 %= *(void *)&v2;
        }
      }
      else
      {
        v8 &= *(void *)&v2 - 1;
      }
      if (v8 != v5) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t SIResourcePool::SIResourcePool(uint64_t a1, int a2, unint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + 24) = a4;
  std::vector<SIResourcePool::ResourceDesc>::vector((void *)(a1 + 32), a3);
  std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100](a1 + 56, a5);
  *(void *)(a1 + 88) = a6;
  *(void *)(a1 + 96) = a7;
  *(unsigned char *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 12std::unique_ptr<SIResourcePool>::reset[abi:ne180100](this, 0) = 0;
  return a1;
}

void sub_1BDB0BCB8(_Unwind_Exception *exception_object)
{
  uint8x8_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 4std::unique_ptr<SIResourcePool>::reset[abi:ne180100](this, 0) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<SIResourcePool::ResourceDesc>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::string>::__vallocate[abi:ne180100](a1, a2);
    uint8x8_t v4 = (char *)a1[1];
    size_t v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_1BDB0BD54(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::__hash_table<std::__hash_value_type<int,SIResourcePools::PoolDesc>,std::__unordered_map_hasher<int,std::__hash_value_type<int,SIResourcePools::PoolDesc>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,SIResourcePools::PoolDesc>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,SIResourcePools::PoolDesc>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<SIResourcePools::PoolDesc&&>>(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4, uint64_t **a5)
{
  unint64_t v8 = *a2;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v11 = *a2;
      if (v9 <= v8) {
        unint64_t v11 = v8 % v9;
      }
    }
    else
    {
      unint64_t v11 = (v9 - 1) & v8;
    }
    uint64_t v12 = *(void ***)(*(void *)a1 + 8 * v11);
    if (v12)
    {
      std::string::size_type v13 = *v12;
      if (*v12)
      {
        do
        {
          unint64_t v14 = v13[1];
          if (v14 == v8)
          {
            if (*((_DWORD *)v13 + 4) == v8) {
              return v13;
            }
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v14 >= v9) {
                v14 %= v9;
              }
            }
            else
            {
              v14 &= v9 - 1;
            }
            if (v14 != v11) {
              break;
            }
          }
          std::string::size_type v13 = (void *)*v13;
        }
        while (v13);
      }
    }
  }
  else
  {
    unint64_t v11 = 0;
  }
  long long v15 = (void *)(a1 + 16);
  std::string::size_type v13 = operator new(0x28uLL);
  void *v13 = 0;
  v13[1] = v8;
  uint64_t v16 = *a5;
  *((_DWORD *)v13 + 4) = **a4;
  uint64_t v17 = *v16;
  uint64_t *v16 = 0;
  void v13[3] = v17;
  void v13[4] = v16[1];
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (!v9 || (float)(v19 * (float)v9) < v18)
  {
    BOOL v20 = 1;
    if (v9 >= 3) {
      BOOL v20 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v9);
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      size_t v23 = v22;
    }
    else {
      size_t v23 = v21;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::__rehash<true>(a1, v23);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v9 <= v8) {
        unint64_t v11 = v8 % v9;
      }
      else {
        unint64_t v11 = v8;
      }
    }
    else
    {
      unint64_t v11 = (v9 - 1) & v8;
    }
  }
  uint64_t v24 = *(void *)a1;
  uint64_t v25 = *(void **)(*(void *)a1 + 8 * v11);
  if (v25)
  {
    void *v13 = *v25;
LABEL_38:
    void *v25 = v13;
    goto LABEL_39;
  }
  void *v13 = *v15;
  *long long v15 = v13;
  *(void *)(v24 + 8 * v11) = v15;
  if (*v13)
  {
    unint64_t v26 = *(void *)(*v13 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v26 >= v9) {
        v26 %= v9;
      }
    }
    else
    {
      v26 &= v9 - 1;
    }
    uint64_t v25 = (void *)(*(void *)a1 + 8 * v26);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v13;
}

void sub_1BDB0BFC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,SIResourcePools::PoolDesc>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,SIResourcePools::PoolDesc>,void *>>>::operator()[abi:ne180100](uint64_t a1, SIResourcePool **__p)
{
  if (*(unsigned char *)(a1 + 8)) {
    std::unique_ptr<SIResourcePool>::reset[abi:ne180100](__p + 3, 0);
  }
  if (__p)
  {
    operator delete(__p);
  }
}

uint64_t std::__function::__value_func<void * ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t std::vector<std::string>::__emplace_back_slow_path<std::string&>(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 2);
  if (v9) {
    uint8x8_t v10 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  }
  else {
    uint8x8_t v10 = 0;
  }
  std::__split_buffer<std::string>::pointer end = v10 + v4;
  __v.__first_ = v10;
  __v.__begin_ = end;
  __v.__end_ = end;
  __v.__end_cap_.__value_ = &v10[v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    std::__split_buffer<std::string>::pointer end = __v.__end_;
  }
  else
  {
    long long v12 = *a2;
    end->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v12;
  }
  __v.__end_ = end + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
  uint64_t v13 = a1[1];
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  return v13;
}

void sub_1BDB0C1E0(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void std::vector<std::string>::__swap_out_circular_buffer(std::vector<std::string> *this, std::__split_buffer<std::string> *__v)
{
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>((uint64_t)&this->__end_cap_, (uint64_t)this->__end_, (uint64_t)this->__end_, (uint64_t)this->__begin_, (uint64_t)this->__begin_, (uint64_t)__v->__begin_, (uint64_t)__v->__begin_);
  __v->__begin_ = v4;
  begiuint64_t n = this->__begin_;
  this->__begin_ = v4;
  __v->__begin_ = begin;
  std::__split_buffer<std::string>::pointer end = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = end;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  void v12[2] = &v15;
  uint64_t v13 = 0;
  if (a3 != a5)
  {
    uint64_t v9 = a7;
    do
    {
      long long v10 = *(_OWORD *)(a3 - 24);
      *(void *)(v9 - 8) = *(void *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v10;
      v9 -= 24;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 8) = 0;
      *(void *)(a3 - 24) = 0;
      v7 -= 24;
      a3 -= 24;
    }
    while (a3 != a5);
    *((void *)&v15 + 1) = v9;
  }
  LOBYTE(v13) = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    v1 += 24;
  }
}

void std::__split_buffer<std::string>::~__split_buffer(std::__split_buffer<std::string> *this)
{
  if (this->__first_) {
    operator delete(this->__first_);
  }
}

void std::__split_buffer<std::string>::__destruct_at_end[abi:ne180100](uint64_t a1, void **a2)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      unint64_t v5 = v2 - 3;
      *(void *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        unint64_t v5 = *(void ***)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != a2);
  }
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,false>(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4, char a5)
{
LABEL_1:
  uint64_t v11 = (long long *)((char *)a2 - 24);
  long long v12 = (const void **)a1;
LABEL_2:
  uint64_t v13 = 1 - a4;
  while (1)
  {
    a1 = (uint64_t)v12;
    uint64_t v14 = v13;
    uint64_t v15 = (char *)a2 - (char *)v12;
    unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)v12) >> 3);
    if (!(!v6 & v5))
    {
      switch(v16)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          if (std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(a3, (const void **)a2 - 3, v12))
          {
            int v31 = v12[2];
            long long v29 = *(_OWORD *)v12;
            long long v27 = *v11;
            void v12[2] = (const void *)*((void *)a2 - 1);
            *(_OWORD *)long long v12 = v27;
            long long *v11 = v29;
            *((void *)a2 - 1) = v31;
          }
          break;
        case 3uLL:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(v12, v12 + 3, (const void **)a2 - 3, a3);
          break;
        case 4uLL:
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((uint64_t)v12, v12 + 3, v12 + 6, (long long *)((char *)a2 - 24), a3);
          break;
        case 5uLL:
          std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((uint64_t)v12, v12 + 3, v12 + 6, (long long *)(v12 + 9), (long long *)((char *)a2 - 24), a3);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v15 <= 575) {
      break;
    }
    if (v14 == 1)
    {
      if (v12 != (const void **)a2)
      {
        std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,std::string *>((uint64_t)v12, a2, a2, a3);
      }
      return;
    }
    unint64_t v17 = v16 >> 1;
    float v18 = &v12[3 * (v16 >> 1)];
    if ((unint64_t)v15 >= 0xC01)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(v12, &v12[3 * (v16 >> 1)], (const void **)a2 - 3, a3);
      uint64_t v19 = 3 * v17;
      BOOL v20 = &v12[3 * v17 - 3];
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(v12 + 3, v20, (const void **)a2 - 6, a3);
      unint64_t v21 = v12 + 6;
      unint64_t v22 = &v12[v19 + 3];
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(v21, v22, (const void **)a2 - 9, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(v20, v18, v22, a3);
      uint64_t v30 = *(const void **)(a1 + 16);
      long long v28 = *(_OWORD *)a1;
      long long v23 = *(_OWORD *)v18;
      *(void *)(a1 + 16) = v18[2];
      *(_OWORD *)a1 = v23;
      v18[2] = v30;
      *(_OWORD *)float v18 = v28;
      if (a5) {
        goto LABEL_13;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(&v12[3 * (v16 >> 1)], v12, (const void **)a2 - 3, a3);
      if (a5) {
        goto LABEL_13;
      }
    }
    if (!std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(a3, (const void **)(a1 - 24), (const void **)a1))
    {
      long long v12 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::string *,std::__less<void,void> &>((const void **)a1, (unint64_t)a2, a3);
      goto LABEL_18;
    }
LABEL_13:
    unint64_t v24 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::string *,std::__less<void,void> &>((long long *)a1, (const void **)a2, a3);
    if ((v25 & 1) == 0) {
      goto LABEL_16;
    }
    BOOL v26 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, v24, a3);
    long long v12 = (const void **)(v24 + 24);
    if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(v24 + 24, (uint64_t)a2, a3))
    {
      a4 = -v14;
      a2 = (long long *)v24;
      if (v26) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v13 = v14 + 1;
    if (!v26)
    {
LABEL_16:
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,false>(a1, v24, a3, -v14, a5 & 1);
      long long v12 = (const void **)(v24 + 24);
LABEL_18:
      a5 = 0;
      a4 = -v14;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((uint64_t)v12, (const void **)a2, a3);
  }
  else
  {
    std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(v12, (const void **)a2, a3);
  }
}

BOOL std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(uint64_t a1, const void **a2, const void **a3)
{
  int v3 = *((char *)a3 + 23);
  int v4 = *((char *)a2 + 23);
  if (v4 >= 0) {
    size_t v5 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v5 = (size_t)a2[1];
  }
  if (v4 >= 0) {
    char v6 = a2;
  }
  else {
    char v6 = *a2;
  }
  if (v3 >= 0) {
    size_t v7 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v7 = (size_t)a3[1];
  }
  if (v3 >= 0) {
    unint64_t v8 = a3;
  }
  else {
    unint64_t v8 = *a3;
  }
  if (v7 >= v5) {
    size_t v9 = v5;
  }
  else {
    size_t v9 = v7;
  }
  int v10 = memcmp(v6, v8, v9);
  if (v10) {
    return v10 < 0;
  }
  else {
    return v5 < v7;
  }
}

void std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(uint64_t a1, const void **a2, uint64_t a3)
{
  if ((const void **)a1 != a2)
  {
    uint64_t v19 = v3;
    uint64_t v20 = v4;
    size_t v7 = (const void **)(a1 + 24);
    if ((const void **)(a1 + 24) != a2)
    {
      uint64_t v9 = 0;
      int v10 = (const void **)a1;
      do
      {
        uint64_t v11 = v10;
        int v10 = v7;
        if (std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(a3, v7, v11))
        {
          long long v17 = *(_OWORD *)v10;
          float v18 = v10[2];
          v10[1] = 0;
          v10[2] = 0;
          *int v10 = 0;
          uint64_t v12 = v9;
          do
          {
            uint64_t v13 = a1 + v12;
            uint64_t v14 = (void **)(a1 + v12 + 24);
            if (*(char *)(a1 + v12 + 47) < 0) {
              operator delete(*v14);
            }
            *(_OWORD *)uint64_t v14 = *(_OWORD *)v13;
            *(void *)(a1 + v12 + 4std::unique_ptr<SIResourcePool>::reset[abi:ne180100](this, 0) = *(void *)(v13 + 16);
            *(unsigned char *)(v13 + 23) = 0;
            *(unsigned char *)uint64_t v13 = 0;
            if (!v12)
            {
              uint64_t v16 = a1;
              goto LABEL_13;
            }
            v12 -= 24;
          }
          while (std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(a3, (const void **)&v17, (const void **)(v12 + a1)));
          int v15 = *(char *)(a1 + v12 + 47);
          uint64_t v16 = a1 + v12 + 24;
          if (v15 < 0) {
            operator delete(*(void **)v16);
          }
LABEL_13:
          *(_OWORD *)uint64_t v16 = v17;
          *(void *)(v16 + 16) = v18;
        }
        size_t v7 = v10 + 3;
        v9 += 24;
      }
      while (v10 + 3 != a2);
    }
  }
}

void std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(const void **a1, const void **a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v18 = v3;
    uint64_t v19 = v4;
    char v6 = a1;
    size_t v7 = a1 + 3;
    if (a1 + 3 != a2)
    {
      uint64_t v9 = a1 - 3;
      do
      {
        int v10 = v6;
        char v6 = v7;
        if (std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(a3, v7, v10))
        {
          long long v16 = *(_OWORD *)v6;
          long long v17 = v6[2];
          v6[1] = 0;
          gid_t v6[2] = 0;
          *char v6 = 0;
          uint64_t v11 = v9;
          do
          {
            uint64_t v12 = (void **)(v11 + 6);
            if (*((char *)v11 + 71) < 0) {
              operator delete(*v12);
            }
            *(_OWORD *)uint64_t v12 = *(_OWORD *)(v11 + 3);
            v11[8] = v11[5];
            *((unsigned char *)v11 + 47) = 0;
            *((unsigned char *)v11 + 24) = 0;
            BOOL v13 = std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(a3, (const void **)&v16, v11);
            v11 -= 3;
          }
          while (v13);
          int v14 = *((char *)v11 + 71);
          int v15 = v11 + 6;
          if (v14 < 0) {
            operator delete((void *)*v15);
          }
          *(_OWORD *)int v15 = v16;
          CFIndex v15[2] = v17;
        }
        size_t v7 = v6 + 3;
        v9 += 3;
      }
      while (v6 + 3 != a2);
    }
  }
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(const void **a1, const void **a2, const void **a3, uint64_t a4)
{
  BOOL v8 = std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(a4, a2, a1);
  uint64_t result = std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(a4, a3, a2);
  if (!v8)
  {
    if (!result) {
      return result;
    }
    BOOL v13 = a2[2];
    long long v14 = *(_OWORD *)a2;
    int v15 = a3[2];
    *(_OWORD *)a2 = *(_OWORD *)a3;
    a2[2] = v15;
    *(_OWORD *)a3 = v14;
    a3[2] = v13;
    if (!std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(a4, a2, a1)) {
      return 1;
    }
    long long v16 = a1[2];
    long long v17 = *(_OWORD *)a1;
    uint64_t v18 = a2[2];
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = v18;
    *(_OWORD *)a2 = v17;
    a2[2] = v16;
    return 2;
  }
  if (!result)
  {
    uint64_t v19 = a1[2];
    long long v20 = *(_OWORD *)a1;
    unint64_t v21 = a2[2];
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = v21;
    *(_OWORD *)a2 = v20;
    a2[2] = v19;
    if (!std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(a4, a3, a2)) {
      return 1;
    }
    unint64_t v22 = a2[2];
    long long v23 = *(_OWORD *)a2;
    unint64_t v24 = a3[2];
    *(_OWORD *)a2 = *(_OWORD *)a3;
    a2[2] = v24;
    *(_OWORD *)a3 = v23;
    a3[2] = v22;
    return 2;
  }
  int v10 = a1[2];
  long long v11 = *(_OWORD *)a1;
  uint64_t v12 = a3[2];
  *(_OWORD *)a1 = *(_OWORD *)a3;
  a1[2] = v12;
  *(_OWORD *)a3 = v11;
  a3[2] = v10;
  return 1;
}

const void **std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::string *,std::__less<void,void> &>(const void **a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4 = a2;
  long long v16 = *(_OWORD *)a1;
  long long v17 = a1[2];
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  if (std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(a3, (const void **)&v16, (const void **)(a2 - 24)))
  {
    char v6 = a1;
    do
      v6 += 3;
    while (!std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(a3, (const void **)&v16, v6));
  }
  else
  {
    size_t v7 = a1 + 3;
    do
    {
      char v6 = v7;
      if ((unint64_t)v7 >= v4) {
        break;
      }
      BOOL v8 = std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(a3, (const void **)&v16, v7);
      size_t v7 = v6 + 3;
    }
    while (!v8);
  }
  if ((unint64_t)v6 < v4)
  {
    do
      v4 -= 24;
    while (std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(a3, (const void **)&v16, (const void **)v4));
  }
  while ((unint64_t)v6 < v4)
  {
    long long v9 = *(_OWORD *)v6;
    uint64_t v19 = v6[2];
    long long v18 = v9;
    long long v10 = *(_OWORD *)v4;
    gid_t v6[2] = *(const void **)(v4 + 16);
    *(_OWORD *)char v6 = v10;
    long long v11 = v18;
    *(void *)(v4 + 16) = v19;
    *(_OWORD *)unint64_t v4 = v11;
    do
      v6 += 3;
    while (!std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(a3, (const void **)&v16, v6));
    do
      v4 -= 24;
    while (std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(a3, (const void **)&v16, (const void **)v4));
  }
  uint64_t v12 = (void **)(v6 - 3);
  if (v6 - 3 == a1)
  {
    if (*((char *)v6 - 1) < 0) {
      operator delete(*v12);
    }
  }
  else
  {
    if (*((char *)a1 + 23) < 0) {
      operator delete((void *)*a1);
    }
    long long v13 = *(_OWORD *)v12;
    a1[2] = *(v6 - 1);
    *(_OWORD *)a1 = v13;
    *((unsigned char *)v6 - 1) = 0;
    *((unsigned char *)v6 - 24) = 0;
  }
  long long v14 = v16;
  *(v6 - 1) = v17;
  *(_OWORD *)uint64_t v12 = v14;
  return v6;
}

unint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::string *,std::__less<void,void> &>(long long *a1, const void **a2, uint64_t a3)
{
  uint64_t v6 = 0;
  long long v17 = *a1;
  uint64_t v18 = *((void *)a1 + 2);
  *((void *)a1 + 1) = 0;
  *((void *)a1 + 2) = 0;
  *(void *)a1 = 0;
  do
    v6 += 24;
  while (std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(a3, (const void **)((char *)a1 + v6), (const void **)&v17));
  unint64_t v7 = (unint64_t)a1 + v6;
  if (v6 == 24)
  {
    do
    {
      if (v7 >= (unint64_t)a2) {
        break;
      }
      a2 -= 3;
    }
    while (!std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(a3, a2, (const void **)&v17));
  }
  else
  {
    do
      a2 -= 3;
    while (!std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(a3, a2, (const void **)&v17));
  }
  if (v7 >= (unint64_t)a2)
  {
    unint64_t v9 = (unint64_t)a1 + v6;
  }
  else
  {
    BOOL v8 = a2;
    unint64_t v9 = (unint64_t)a1 + v6;
    do
    {
      long long v19 = *(_OWORD *)v9;
      long long v10 = v19;
      long long v20 = *(const void **)(v9 + 16);
      long long v11 = v20;
      uint64_t v12 = v8[2];
      *(_OWORD *)unint64_t v9 = *(_OWORD *)v8;
      *(void *)(v9 + 16) = v12;
      v8[2] = v11;
      *(_OWORD *)BOOL v8 = v10;
      do
        v9 += 24;
      while (std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(a3, (const void **)v9, (const void **)&v17));
      do
        v8 -= 3;
      while (!std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(a3, v8, (const void **)&v17));
    }
    while (v9 < (unint64_t)v8);
  }
  long long v13 = (void **)(v9 - 24);
  if ((long long *)(v9 - 24) == a1)
  {
    if (*(char *)(v9 - 1) < 0) {
      operator delete(*v13);
    }
  }
  else
  {
    if (*((char *)a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
    long long v14 = *(_OWORD *)v13;
    *((void *)a1 + 2) = *(void *)(v9 - 8);
    *a1 = v14;
    *(unsigned char *)(v9 - 1) = 0;
    *(unsigned char *)(v9 - 24) = 0;
  }
  long long v15 = v17;
  *(void *)(v9 - 8) = v18;
  *(_OWORD *)long long v13 = v15;
  return v9 - 24;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      uint64_t v8 = a2 - 24;
      if (std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(a3, (const void **)(a2 - 24), (const void **)a1))
      {
        uint64_t v9 = *(void *)(a1 + 16);
        long long v10 = *(_OWORD *)a1;
        uint64_t v11 = *(void *)(v8 + 16);
        *(_OWORD *)a1 = *(_OWORD *)v8;
        *(void *)(a1 + 16) = v11;
        *(_OWORD *)uint64_t v8 = v10;
        *(void *)(v8 + 16) = v9;
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((const void **)a1, (const void **)(a1 + 24), (const void **)(a2 - 24), a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, (const void **)(a1 + 24), (const void **)(a1 + 48), (long long *)(a2 - 24), a3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, (const void **)(a1 + 24), (const void **)(a1 + 48), (long long *)(a1 + 72), (long long *)(a2 - 24), a3);
      return 1;
    default:
      uint64_t v12 = (const void **)(a1 + 48);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((const void **)a1, (const void **)(a1 + 24), (const void **)(a1 + 48), a3);
      uint64_t v13 = a1 + 72;
      if (a1 + 72 == a2) {
        return 1;
      }
      uint64_t v14 = 0;
      int v15 = 0;
      break;
  }
  while (1)
  {
    if (std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(a3, (const void **)v13, v12))
    {
      long long v22 = *(_OWORD *)v13;
      uint64_t v23 = *(void *)(v13 + 16);
      *(void *)(v13 + 8) = 0;
      *(void *)(v13 + 16) = 0;
      *(void *)uint64_t v13 = 0;
      uint64_t v16 = v14;
      do
      {
        uint64_t v17 = a1 + v16;
        uint64_t v18 = (void **)(a1 + v16 + 72);
        if (*(char *)(a1 + v16 + 95) < 0) {
          operator delete(*v18);
        }
        *(_OWORD *)uint64_t v18 = *(_OWORD *)(v17 + 48);
        *(void *)(a1 + v16 + 88) = *(void *)(v17 + 64);
        *(unsigned char *)(v17 + 71) = 0;
        *(unsigned char *)(v17 + 48) = 0;
        if (v16 == -48)
        {
          uint64_t v21 = a1;
          goto LABEL_15;
        }
        BOOL v19 = std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(a3, (const void **)&v22, (const void **)(a1 + v16 + 24));
        v16 -= 24;
      }
      while (v19);
      int v20 = *(char *)(a1 + v16 + 95);
      uint64_t v21 = a1 + v16 + 72;
      if (v20 < 0) {
        operator delete(*(void **)v21);
      }
LABEL_15:
      *(_OWORD *)uint64_t v21 = v22;
      *(void *)(v21 + 16) = v23;
      if (++v15 == 8) {
        return v13 + 24 == a2;
      }
    }
    uint64_t v12 = (const void **)v13;
    v14 += 24;
    v13 += 24;
    if (v13 == a2) {
      return 1;
    }
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(uint64_t a1, const void **a2, const void **a3, long long *a4, uint64_t a5)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((const void **)a1, a2, a3, a5);
  if (std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(a5, (const void **)a4, a3))
  {
    uint64_t v11 = a3[2];
    long long v12 = *(_OWORD *)a3;
    uint64_t v13 = (const void *)*((void *)a4 + 2);
    *(_OWORD *)a3 = *a4;
    a3[2] = v13;
    *a4 = v12;
    *((void *)a4 + 2) = v11;
    if (std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(a5, a3, a2))
    {
      uint64_t v14 = a2[2];
      long long v15 = *(_OWORD *)a2;
      uint64_t v16 = a3[2];
      *(_OWORD *)a2 = *(_OWORD *)a3;
      a2[2] = v16;
      *(_OWORD *)a3 = v15;
      a3[2] = v14;
      if (std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(a5, a2, (const void **)a1))
      {
        uint64_t v17 = *(const void **)(a1 + 16);
        __n128 result = *(__n128 *)a1;
        uint64_t v18 = a2[2];
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(void *)(a1 + 16) = v18;
        *(__n128 *)a2 = result;
        a2[2] = v17;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(uint64_t a1, const void **a2, const void **a3, long long *a4, long long *a5, uint64_t a6)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, a2, a3, a4, a6);
  if (std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(a6, (const void **)a5, (const void **)a4))
  {
    uint64_t v13 = *((void *)a4 + 2);
    long long v14 = *a4;
    uint64_t v15 = *((void *)a5 + 2);
    *a4 = *a5;
    *((void *)a4 + 2) = v15;
    *a5 = v14;
    *((void *)a5 + 2) = v13;
    if (std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(a6, (const void **)a4, a3))
    {
      uint64_t v16 = a3[2];
      long long v17 = *(_OWORD *)a3;
      uint64_t v18 = (const void *)*((void *)a4 + 2);
      *(_OWORD *)a3 = *a4;
      a3[2] = v18;
      *a4 = v17;
      *((void *)a4 + 2) = v16;
      if (std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(a6, a3, a2))
      {
        BOOL v19 = a2[2];
        long long v20 = *(_OWORD *)a2;
        uint64_t v21 = a3[2];
        *(_OWORD *)a2 = *(_OWORD *)a3;
        a2[2] = v21;
        *(_OWORD *)a3 = v20;
        a3[2] = v19;
        if (std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(a6, a2, (const void **)a1))
        {
          long long v22 = *(const void **)(a1 + 16);
          __n128 result = *(__n128 *)a1;
          uint64_t v23 = a2[2];
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(void *)(a1 + 16) = v23;
          *(__n128 *)a2 = result;
          a2[2] = v22;
        }
      }
    }
  }
  return result;
}

long long *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,std::string *>(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  if ((long long *)a1 != a2)
  {
    uint64_t v8 = (uint64_t)a2 - a1;
    uint64_t v9 = ((uint64_t)a2 - a1) / 24;
    if ((uint64_t)a2 - a1 >= 25)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      long long v12 = (__n128 *)(a1 + 24 * v10);
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, a4, v9, v12);
        long long v12 = (__n128 *)((char *)v12 - 24);
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = a2;
    if (a2 != a3)
    {
      long long v14 = a2;
      do
      {
        if (std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(a4, (const void **)v14, (const void **)a1))
        {
          uint64_t v15 = *((void *)v14 + 2);
          long long v16 = *v14;
          uint64_t v17 = *(void *)(a1 + 16);
          long long *v14 = *(_OWORD *)a1;
          *((void *)v14 + 2) = v17;
          *(_OWORD *)a1 = v16;
          *(void *)(a1 + 16) = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, a4, v9, (__n128 *)a1);
        }
        long long v14 = (long long *)((char *)v14 + 24);
      }
      while (v14 != a3);
      uint64_t v13 = a3;
    }
    if (v8 >= 25)
    {
      int64_t v18 = v8 / 0x18uLL;
      BOOL v19 = (long long *)((char *)a2 - 24);
      do
      {
        uint64_t v20 = *(void *)a1;
        *(void *)long long v28 = *(void *)(a1 + 8);
        *(void *)&v28[7] = *(void *)(a1 + 15);
        char v21 = *(unsigned char *)(a1 + 23);
        *(void *)(a1 + 8) = 0;
        *(void *)(a1 + 16) = 0;
        *(void *)a1 = 0;
        uint64_t v22 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, a4, v18);
        uint64_t v23 = v22;
        int v24 = *(char *)(v22 + 23);
        if (v19 == (long long *)v22)
        {
          if (v24 < 0) {
            operator delete(*(void **)v22);
          }
          *(void *)uint64_t v23 = v20;
          *(void *)(v23 + 8) = *(void *)v28;
          *(void *)(v23 + 15) = *(void *)&v28[7];
          *(unsigned char *)(v23 + 23) = v21;
        }
        else
        {
          if (v24 < 0) {
            operator delete(*(void **)v22);
          }
          long long v25 = *v19;
          *(void *)(v23 + 16) = *((void *)v19 + 2);
          *(_OWORD *)uint64_t v23 = v25;
          *(void *)BOOL v19 = v20;
          *((void *)v19 + 1) = *(void *)v28;
          *(void *)((char *)v19 + 15) = *(void *)&v28[7];
          *((unsigned char *)v19 + 23) = v21;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, v23 + 24, a4, 0xAAAAAAAAAAAAAAABLL * ((v23 + 24 - a1) >> 3));
        }
        BOOL v19 = (long long *)((char *)v19 - 24);
      }
      while (v18-- > 2);
    }
    return v13;
  }
  return a3;
}

void sub_1BDB0D5F4(_Unwind_Exception *exception_object)
{
  if (v2 < 0) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

__n128 std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(uint64_t a1, uint64_t a2, uint64_t a3, __n128 *a4)
{
  unint64_t v6 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v22 = v4;
    uint64_t v23 = v5;
    unint64_t v7 = a4;
    uint64_t v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a4 - a1) >> 3)))
    {
      uint64_t v12 = (0x5555555555555556 * (((uint64_t)a4 - a1) >> 3)) | 1;
      uint64_t v13 = a1 + 24 * v12;
      uint64_t v14 = 0x5555555555555556 * (((uint64_t)a4 - a1) >> 3) + 2;
      if (v14 < a3
        && std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(a2, (const void **)(a1 + 24 * v12), (const void **)(v13 + 24)))
      {
        v13 += 24;
        uint64_t v12 = v14;
      }
      if (!std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(a2, (const void **)v13, (const void **)v7))
      {
        __n128 v20 = *v7;
        unint64_t v21 = v7[1].n128_u64[0];
        v7->n128_u64[1] = 0;
        v7[1].n128_u64[0] = 0;
        v7->n128_u64[0] = 0;
        while (1)
        {
          long long v16 = (__n128 *)v13;
          if (v7[1].n128_i8[7] < 0) {
            operator delete((void *)v7->n128_u64[0]);
          }
          __n128 v17 = *(__n128 *)v13;
          v7[1].n128_u64[0] = *(void *)(v13 + 16);
          *unint64_t v7 = v17;
          *(unsigned char *)(v13 + 23) = 0;
          *(unsigned char *)uint64_t v13 = 0;
          if (v9 < v12) {
            break;
          }
          uint64_t v18 = (2 * v12) | 1;
          uint64_t v13 = a1 + 24 * v18;
          uint64_t v19 = 2 * v12 + 2;
          if (v19 < a3
            && std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(a2, (const void **)(a1 + 24 * v18), (const void **)(v13 + 24)))
          {
            v13 += 24;
            uint64_t v18 = v19;
          }
          unint64_t v7 = v16;
          uint64_t v12 = v18;
          if (std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(a2, (const void **)v13, (const void **)&v20))
          {
            if (v16[1].n128_i8[7] < 0) {
              operator delete((void *)v16->n128_u64[0]);
            }
            break;
          }
        }
        __n128 result = v20;
        v16[1].n128_u64[0] = v21;
        __n128 *v16 = result;
      }
    }
  }
  return result;
}

uint64_t std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = a3 - 2;
  if (a3 < 2) {
    uint64_t v7 = a3 - 1;
  }
  uint64_t v8 = v7 >> 1;
  do
  {
    uint64_t v9 = a1 + 24 * v6 + 24;
    uint64_t v10 = 2 * v6;
    uint64_t v6 = (2 * v6) | 1;
    uint64_t v11 = v10 + 2;
    if (v10 + 2 < a3
      && std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(a2, (const void **)v9, (const void **)(v9 + 24)))
    {
      v9 += 24;
      uint64_t v6 = v11;
    }
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
    long long v12 = *(_OWORD *)v9;
    *(void *)(a1 + 16) = *(void *)(v9 + 16);
    *(_OWORD *)a1 = v12;
    *(unsigned char *)(v9 + 23) = 0;
    *(unsigned char *)uint64_t v9 = 0;
    a1 = v9;
  }
  while (v6 <= v8);
  return v9;
}

double std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    uint64_t v16 = v4;
    uint64_t v17 = v5;
    unint64_t v8 = (unint64_t)(a4 - 2) >> 1;
    uint64_t v9 = (long long *)(a1 + 24 * v8);
    uint64_t v10 = (long long *)(a2 - 24);
    if (std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(a3, (const void **)v9, (const void **)(a2 - 24)))
    {
      long long v14 = *v10;
      uint64_t v15 = *((void *)v10 + 2);
      *((void *)v10 + 1) = 0;
      *((void *)v10 + 2) = 0;
      *(void *)uint64_t v10 = 0;
      while (1)
      {
        long long v12 = v9;
        if (*((char *)v10 + 23) < 0) {
          operator delete(*(void **)v10);
        }
        long long v13 = *v9;
        *((void *)v10 + 2) = *((void *)v9 + 2);
        *uint64_t v10 = v13;
        *((unsigned char *)v9 + 23) = 0;
        *(unsigned char *)uint64_t v9 = 0;
        if (!v8) {
          break;
        }
        unint64_t v8 = (v8 - 1) >> 1;
        uint64_t v9 = (long long *)(a1 + 24 * v8);
        uint64_t v10 = v12;
        if (!std::__less<void,void>::operator()[abi:ne180100]<std::string,std::string>(a3, (const void **)v9, (const void **)&v14))
        {
          if (*((char *)v12 + 23) < 0) {
            operator delete(*(void **)v12);
          }
          break;
        }
      }
      double result = *(double *)&v14;
      *long long v12 = v14;
      *((void *)v12 + 2) = v15;
    }
  }
  return result;
}

void OUTLINED_FUNCTION_1_1(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 8u);
}

void OUTLINED_FUNCTION_2_1(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_debug_impl(a1, log, OS_LOG_TYPE_DEBUG, a4, (uint8_t *)va, 0x1Cu);
}

void OUTLINED_FUNCTION_3(uint64_t a1@<X8>)
{
  *(void *)(v1 - 8) = a1;
}

BOOL isFsType(int a1, const char *a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  bzero(&v5, 0x878uLL);
  return !fstatfs(a1, &v5) && !strcmp(v5.f_fstypename, a2);
}

BOOL isExFat(int a1)
{
  return isFsType(a1, "exfat");
}

BOOL isMsDos(int a1)
{
  return isFsType(a1, "msdos");
}

BOOL isFat32(int a1)
{
  return isFsType(a1, "fat32");
}

uint64_t SISetLoggingBlock(uint64_t result)
{
  gSILoggingBuint64_t lock = result;
  return result;
}

uint64_t SISetLogging(uint64_t result, int a2)
{
  if (result <= 0x14) {
    gSILogLevels[result] = a2;
  }
  return result;
}

uint64_t _SILogForLogForCategory(int a1)
{
  if (_SILogForLogForCategory_onceToken != -1) {
    dispatch_once(&_SILogForLogForCategory_onceToken, &__block_literal_global_13);
  }
  return gSILogArray[a1];
}

CFPropertyListRef SICreateDictionaryWithContentsOfURL(const __CFURL *a1, __CFError **a2)
{
  return _createDictionaryWithContentsOfURL(a1, 0, a2);
}

CFPropertyListRef _createDictionaryWithContentsOfURL(CFURLRef fileURL, int a2, __CFError **a3)
{
  uint64_t v6 = CFReadStreamCreateWithFile((CFAllocatorRef)*MEMORY[0x1E4F1CF80], fileURL);
  if (!v6)
  {
    if (a3)
    {
      CFStringRef v11 = @"File at URL is not readable";
      goto LABEL_15;
    }
    return 0;
  }
  uint64_t v7 = v6;
  if (!CFReadStreamOpen(v6))
  {
    CFRelease(v7);
    goto LABEL_13;
  }
  if (a2) {
    CFOptionFlags v8 = 2;
  }
  else {
    CFOptionFlags v8 = 0;
  }
  CFPropertyListRef v9 = CFPropertyListCreateWithStream(0, v7, 0, v8, 0, 0);
  CFReadStreamClose(v7);
  CFRelease(v7);
  if (!v9)
  {
LABEL_13:
    if (a3)
    {
      CFStringRef v11 = @"File at URL is not a valid property list";
      goto LABEL_15;
    }
    return 0;
  }
  CFTypeID v10 = CFGetTypeID(v9);
  if (v10 != CFDictionaryGetTypeID())
  {
    if (a3)
    {
      CFStringRef v11 = @"Property list at URL is not a dictionary";
LABEL_15:
      CFPropertyListRef v9 = 0;
      *a3 = _createErrorWithMessageAndURL(v11, fileURL);
      return v9;
    }
    return 0;
  }
  return v9;
}

CFPropertyListRef SICreateMutableDictionaryWithContentsOfURL(const __CFURL *a1, __CFError **a2)
{
  return _createDictionaryWithContentsOfURL(a1, 1, a2);
}

CFErrorRef _createErrorWithMessageAndURL(const __CFString *a1, CFURLRef anURL)
{
  if (anURL) {
    CFStringRef v3 = CFURLCopyPath(anURL);
  }
  else {
    CFStringRef v3 = 0;
  }
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFStringRef v5 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"%@: %@", a1, v3);
  if (!v5)
  {
    CFErrorRef v8 = 0;
    if (!v3) {
      return v8;
    }
    goto LABEL_6;
  }
  CFStringRef v6 = v5;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v4, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F1D170], v6);
  CFErrorRef v8 = CFErrorCreate(v4, @"com.apple.SpotlightIndex.ErrorDomain", 0, Mutable);
  CFRelease(v6);
  if (v3) {
LABEL_6:
  }
    CFRelease(v3);
  return v8;
}

void SI::encode(uint64_t *a1)
{
  memset(__p, 0, 24);
  if (*((char *)a1 + 23) >= 0) {
    std::string::size_type v2 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    std::string::size_type v2 = a1[1];
  }
  std::string::reserve(__p, v2);
  BOOL v3 = *((char *)a1 + 23) < 0;
  uint64_t v4 = *((unsigned __int8 *)a1 + 23);
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = a1[1];
  }
  if (v4)
  {
    uint64_t v5 = 0;
    do
    {
      if (v3) {
        CFStringRef v6 = (uint64_t *)*a1;
      }
      else {
        CFStringRef v6 = a1;
      }
      uint64_t v7 = (char *)v6 + v5;
      int v8 = *((char *)v6 + v5);
      if (v8 <= 38)
      {
        CFPropertyListRef v9 = "&quot;";
        if (v8 != 34)
        {
          if (v8 != 38)
          {
LABEL_26:
            std::string::append(__p, v7, 1uLL);
            goto LABEL_22;
          }
          CFPropertyListRef v9 = "&amp;";
        }
      }
      else
      {
        switch(v8)
        {
          case '\'':
            CFPropertyListRef v9 = "&apos;";
            break;
          case '<':
            CFPropertyListRef v9 = "&lt;";
            break;
          case '>':
            CFPropertyListRef v9 = "&gt;";
            break;
          default:
            goto LABEL_26;
        }
      }
      std::string::append(__p, v9);
LABEL_22:
      ++v5;
      BOOL v3 = *((char *)a1 + 23) < 0;
      uint64_t v10 = *((unsigned __int8 *)a1 + 23);
      if ((v10 & 0x80u) != 0) {
        uint64_t v10 = a1[1];
      }
    }
    while (v5 != v10);
  }
  std::string::size_type v11 = a1[2];
  long long v12 = *(_OWORD *)a1;
  *(std::string *)a1 = __p[0];
  *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v12;
  __p[0].__r_.__value_.__r.__words[2] = v11;
  if (SHIBYTE(v11) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
}

void sub_1BDB0DF08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void SI::split(std::string *__str, char *a2, uint64_t a3)
{
  uint64_t v3 = a3;
  int64_t v6 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  int v7 = (char)v6;
  if ((v6 & 0x80u) == 0) {
    int v8 = __str;
  }
  else {
    int v8 = (std::string *)__str->__r_.__value_.__r.__words[0];
  }
  int v9 = a2[23];
  if (v9 >= 0) {
    uint64_t v10 = a2;
  }
  else {
    uint64_t v10 = *(char **)a2;
  }
  if (v9 >= 0) {
    int64_t v11 = a2[23];
  }
  else {
    int64_t v11 = *((void *)a2 + 1);
  }
  if (!v11)
  {
    int64_t v13 = 0;
LABEL_16:
    std::string::size_type v12 = 0;
    long long v14 = (std::allocator<std::string> *)(v3 + 16);
    uint8x8_t v59 = (std::allocator<std::string> *)(v3 + 16);
    uint64_t v60 = v3;
    while (1)
    {
      std::string::basic_string(&v61, __str, v12, v13 - v12, (std::allocator<char> *)&__v);
      unint64_t v16 = *(void *)(v3 + 8);
      unint64_t v15 = *(void *)(v3 + 16);
      if (v16 >= v15)
      {
        unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - *(void *)v3) >> 3);
        unint64_t v19 = v18 + 1;
        if (v18 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - *(void *)v3) >> 3);
        if (2 * v20 > v19) {
          unint64_t v19 = 2 * v20;
        }
        if (v20 >= 0x555555555555555) {
          unint64_t v21 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v21 = v19;
        }
        __v.__end_cap_.__value_ = v14;
        if (v21) {
          uint64_t v22 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)v14, v21);
        }
        else {
          uint64_t v22 = 0;
        }
        uint64_t v23 = v22 + v18;
        __v.__first_ = v22;
        __v.__begin_ = v23;
        __v.__end_cap_.__value_ = &v22[v21];
        long long v24 = *(_OWORD *)&v61.__r_.__value_.__l.__data_;
        v23->__r_.__value_.__r.__words[2] = v61.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v23->__r_.__value_.__l.__data_ = v24;
        memset(&v61, 0, sizeof(v61));
        __v.__end_ = v23 + 1;
        std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)v3, &__v);
        uint64_t v25 = *(void *)(v3 + 8);
        std::__split_buffer<std::string>::~__split_buffer(&__v);
        int v26 = SHIBYTE(v61.__r_.__value_.__r.__words[2]);
        *(void *)(v3 + 8) = v25;
        if (v26 < 0) {
          operator delete(v61.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        long long v17 = *(_OWORD *)&v61.__r_.__value_.__l.__data_;
        *(void *)(v16 + 16) = *((void *)&v61.__r_.__value_.__l + 2);
        *(_OWORD *)unint64_t v16 = v17;
        *(void *)(v3 + 8) = v16 + 24;
      }
      int v27 = a2[23];
      std::string::size_type size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
      int v7 = (char)size;
      if ((size & 0x80u) == 0) {
        long long v29 = __str;
      }
      else {
        long long v29 = (std::string *)__str->__r_.__value_.__r.__words[0];
      }
      if ((size & 0x80u) != 0) {
        std::string::size_type size = __str->__r_.__value_.__l.__size_;
      }
      int64_t v30 = v27 >= 0 ? a2[23] : *((void *)a2 + 1);
      std::string::size_type v12 = v30 + v13;
      int v31 = v27 >= 0 ? a2 : *(char **)a2;
      if (size < v12) {
        break;
      }
      v13 += v30;
      if (v30)
      {
        unint64_t v32 = (char *)v29 + v12;
        uint64_t v33 = (char *)v29 + size;
        int64_t v34 = size - v12;
        if (v34 >= v30)
        {
          int v35 = *v31;
          while (1)
          {
            int64_t v36 = v34 - v30;
            if (v36 == -1) {
              break;
            }
            uint64_t v37 = (char *)memchr(v32, v35, v36 + 1);
            if (!v37) {
              break;
            }
            uint64_t v38 = v37;
            if (!memcmp(v37, v31, v30))
            {
              if (v38 == v33) {
                goto LABEL_54;
              }
              int64_t v13 = v38 - (char *)v29;
              goto LABEL_52;
            }
            unint64_t v32 = v38 + 1;
            int64_t v34 = v33 - (v38 + 1);
            if (v34 < v30) {
              goto LABEL_54;
            }
          }
        }
        break;
      }
LABEL_52:
      long long v14 = v59;
      uint64_t v3 = v60;
      if (v13 == -1) {
        goto LABEL_61;
      }
    }
LABEL_54:
    uint64_t v3 = v60;
    goto LABEL_61;
  }
  if ((v6 & 0x80u) != 0) {
    int64_t v6 = __str->__r_.__value_.__l.__size_;
  }
  if (v6 < v11)
  {
    std::string::size_type v12 = 0;
    goto LABEL_61;
  }
  uint64_t v40 = (char *)v8 + v6;
  int v41 = *v10;
  uint64_t v42 = v8;
  while (1)
  {
    int64_t v43 = v6 - v11;
    if (v43 == -1 || (uint64_t v44 = (char *)memchr(v42, v41, v43 + 1)) == 0)
    {
LABEL_60:
      std::string::size_type v12 = 0;
      uint64_t v3 = a3;
      goto LABEL_61;
    }
    uint64_t v45 = v44;
    if (!memcmp(v44, v10, v11)) {
      break;
    }
    uint64_t v42 = (std::string *)(v45 + 1);
    int64_t v6 = v40 - (v45 + 1);
    if (v6 < v11) {
      goto LABEL_60;
    }
  }
  std::string::size_type v12 = 0;
  uint64_t v3 = a3;
  if (v45 != v40)
  {
    int64_t v13 = v45 - (char *)v8;
    if (v13 != -1) {
      goto LABEL_16;
    }
  }
LABEL_61:
  if (v7 < 0)
  {
    std::string::size_type v46 = __str->__r_.__value_.__l.__size_;
    if (v12 >= v46) {
      return;
    }
  }
  else
  {
    if (v12 >= v7) {
      return;
    }
    std::string::size_type v46 = v7;
  }
  std::string::basic_string(&v61, __str, v12, v46 - v12, (std::allocator<char> *)&__v);
  unint64_t v47 = *(void *)(v3 + 16);
  unint64_t v48 = *(void *)(v3 + 8);
  if (v48 >= v47)
  {
    unint64_t v50 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v48 - *(void *)v3) >> 3);
    unint64_t v51 = v50 + 1;
    if (v50 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v52 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v47 - *(void *)v3) >> 3);
    if (2 * v52 > v51) {
      unint64_t v51 = 2 * v52;
    }
    if (v52 >= 0x555555555555555) {
      unint64_t v53 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v53 = v51;
    }
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)(v3 + 16);
    if (v53) {
      BOOL v54 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v3 + 16, v53);
    }
    else {
      BOOL v54 = 0;
    }
    uint64_t v55 = v54 + v50;
    __v.__first_ = v54;
    __v.__begin_ = v55;
    __v.__end_cap_.__value_ = &v54[v53];
    long long v56 = *(_OWORD *)&v61.__r_.__value_.__l.__data_;
    v55->__r_.__value_.__r.__words[2] = v61.__r_.__value_.__r.__words[2];
    *(_OWORD *)&v55->__r_.__value_.__l.__data_ = v56;
    memset(&v61, 0, sizeof(v61));
    __v.__end_ = v55 + 1;
    std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)v3, &__v);
    uint64_t v57 = *(void *)(v3 + 8);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
    int v58 = SHIBYTE(v61.__r_.__value_.__r.__words[2]);
    *(void *)(v3 + 8) = v57;
    if (v58 < 0) {
      operator delete(v61.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    long long v49 = *(_OWORD *)&v61.__r_.__value_.__l.__data_;
    *(void *)(v48 + 16) = *((void *)&v61.__r_.__value_.__l + 2);
    *(_OWORD *)unint64_t v48 = v49;
    *(void *)(v3 + 8) = v48 + 24;
  }
}

void sub_1BDB0E360(_Unwind_Exception *a1, uint64_t a2, void *__p, uint64_t a4, int a5, __int16 a6, char a7, char a8, std::__split_buffer<std::string> *a9, uint64_t a10, void *__pa, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17)
{
  if (a16 < 0) {
    operator delete(__pa);
  }
  _Unwind_Resume(a1);
}

void *SI::getUTF8StringFromCFString@<X0>(const __CFString *this@<X0>, void *a2@<X8>)
{
  if (this)
  {
    CFIndex Length = CFStringGetLength(this);
    CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
    operator new[]();
  }

  return std::string::basic_string[abi:ne180100]<0>(a2, "");
}

void sub_1BDB0E46C(_Unwind_Exception *a1)
{
  MEMORY[0x1C1883900](v1, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

CFStringRef SI::createCFStringFromString(uint64_t a1)
{
  uint64_t v1 = (const UInt8 *)a1;
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    CFIndex v2 = *(unsigned __int8 *)(a1 + 23);
    if (!*(unsigned char *)(a1 + 23)) {
      return &stru_1F181E430;
    }
    return CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v1, v2, 0x8000100u, 0);
  }
  CFIndex v2 = *(void *)(a1 + 8);
  if (v2)
  {
    uint64_t v1 = *(const UInt8 **)a1;
    return CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v1, v2, 0x8000100u, 0);
  }
  return &stru_1F181E430;
}

void registerForCloning(int a1, int a2, int a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  int valuePtr = a1;
  if (registerForCloning_once != -1) {
    dispatch_once(&registerForCloning_once, &__block_literal_global_14);
  }
  CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFNumberRef v6 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberIntType, &valuePtr);
  pthread_mutex_lock(&registeredFdsLock);
  if (a2)
  {
    CFMutableDictionaryRef Mutable = (__CFSet *)registeredCloneFds;
    if (!registeredCloneFds)
    {
      CFMutableDictionaryRef Mutable = CFSetCreateMutable(v5, 0, 0);
      registeredCloneFds = (uint64_t)Mutable;
    }
    CFSetAddValue(Mutable, v6);
  }
  if (registerForCloning_allow_TM_NoCOW == 1 && a3)
  {
    int v8 = (__CFSet *)registeredTimeMachineFds;
    if (!registeredTimeMachineFds)
    {
      int v8 = CFSetCreateMutable(v5, 0, 0);
      registeredTimeMachineFds = (uint64_t)v8;
    }
    CFSetAddValue(v8, v6);
    bzero(v10, 0x400uLL);
    fcntl(valuePtr, 50, v10);
  }
  pthread_mutex_unlock(&registeredFdsLock);
  CFRelease(v6);
}

void __registerForCloning_block_invoke()
{
  registerForCloning_allow_TM_NoCOW = 1;
}

void unregisterForCloning(int a1)
{
  int valuePtr = a1;
  CFNumberRef v1 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberIntType, &valuePtr);
  pthread_mutex_lock(&registeredFdsLock);
  if (registeredCloneFds && CFSetContainsValue((CFSetRef)registeredCloneFds, v1)) {
    CFSetRemoveValue((CFMutableSetRef)registeredCloneFds, v1);
  }
  if (registeredTimeMachineFds && CFSetContainsValue((CFSetRef)registeredTimeMachineFds, v1)) {
    CFSetRemoveValue((CFMutableSetRef)registeredTimeMachineFds, v1);
  }
  pthread_mutex_unlock(&registeredFdsLock);
  CFRelease(v1);
}

BOOL isRegisteredForCloning(int a1)
{
  int valuePtr = a1;
  CFNumberRef v1 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberIntType, &valuePtr);
  pthread_mutex_lock(&registeredFdsLock);
  if (registeredCloneFds) {
    BOOL v2 = CFSetContainsValue((CFSetRef)registeredCloneFds, v1) != 0;
  }
  else {
    BOOL v2 = 0;
  }
  pthread_mutex_unlock(&registeredFdsLock);
  CFRelease(v1);
  return v2;
}

uint64_t _copyFile(int a1, const char *a2, int a3, const char *a4, _DWORD *a5, off_t a6)
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  memset(&v60, 0, sizeof(v60));
  uint64_t v58 = 0;
  uint64_t v59 = 0;
  if (*a5)
  {
    int v6 = *__error();
    int v7 = _SILogForLogForCategory(10);
    os_log_type_t v8 = 2 * (dword_1EA0DBB78 < 4);
    if (os_log_type_enabled(v7, v8))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1BDAD0000, v7, v8, "canceled", buf, 2u);
    }
    int v9 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    LODWORD(v12) = -1;
    goto LABEL_34;
  }
  long long v14 = a5;
  uint64_t v11 = (atomic_uint *)fd_create(a1, a2, 0);
  uint64_t v17 = fd_open(v11, &v59);
  uint64_t v12 = v17;
  if (!v11 || v17 == -1)
  {
    int v6 = *__error();
    uint64_t v38 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR)) {
      _copyFile_cold_1();
    }
    goto LABEL_33;
  }
  if (fstat(v17, &v60) == -1)
  {
    int v6 = *__error();
    uint64_t v39 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR)) {
      _copyFile_cold_2();
    }
LABEL_33:
    int v9 = 0;
    uint64_t v10 = 0;
LABEL_34:
    uint64_t v19 = 0xFFFFFFFFLL;
LABEL_35:
    uint64_t v40 = 0;
    *__error() = v6;
    goto LABEL_36;
  }
  int v9 = (atomic_uint *)fd_create(a3, a4, 536872450);
  uint64_t v18 = fd_open(v9, &v58);
  uint64_t v19 = v18;
  if (!v9 || v18 == -1)
  {
    int v6 = *__error();
    int64_t v43 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR)) {
      _copyFile_cold_3();
    }
    goto LABEL_47;
  }
  ci_preallocate(v18, v60.st_size);
  if (_fd_ftruncate_guarded(v19, (uint64_t)&v58, v60.st_size) == -1)
  {
    int v6 = *__error();
    uint64_t v44 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR)) {
      _copyFile_cold_4();
    }
LABEL_47:
    uint64_t v10 = 0;
    goto LABEL_35;
  }
  uint64_t v57 = v14;
  fcntl(v12, 48, 1);
  fcntl(v12, 76, 1);
  fcntl(v19, 48, 1);
  fcntl(v19, 76, 1);
  unint64_t v20 = malloc_type_malloc(0x100000uLL, 0xE2BF8B06uLL);
  uint64_t v10 = v20;
  off_t v56 = a6;
  uint64_t v21 = 0;
  if (v60.st_size > a6)
  {
    BOOL v54 = v20;
    uint64_t v55 = v9;
    unsigned int v53 = v12;
    while (!*v14)
    {
      ssize_t v22 = prot_pread(v12, v10, 0x100000uLL, a6);
      if (v22 == -1)
      {
        int v45 = *__error();
        unint64_t v50 = _SILogForLogForCategory(0);
        if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR)) {
          _copyFile_cold_6();
        }
        goto LABEL_66;
      }
      if (*v14)
      {
        int v45 = *__error();
        unint64_t v51 = _SILogForLogForCategory(10);
        os_log_type_t v52 = 2 * (dword_1EA0DBB78 < 4);
        if (os_log_type_enabled(v51, v52))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1BDAD0000, v51, v52, "canceled", buf, 2u);
        }
LABEL_66:
        LODWORD(v12) = v53;
        goto LABEL_52;
      }
      int64_t v23 = v22;
      uint64_t v24 = prot_pwrite_guarded(v19, (uint64_t)&v58, (uint64_t)v10, v22, a6);
      if (v24 == -1)
      {
LABEL_49:
        int v45 = *__error();
        std::string::size_type v46 = _SILogForLogForCategory(0);
        if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR)) {
          _copyFile_cold_7();
        }
        LODWORD(v12) = v53;
        long long v14 = v57;
        goto LABEL_52;
      }
      uint64_t v32 = v24;
      char v33 = 1;
      uint64_t v34 = (uint64_t)v10;
      while (1)
      {
        unint64_t v35 = v23 - v32;
        if (v23 < v32) {
          _copyFile_cold_8(v24, v25, v26, v27, v28, v29, v30, v31);
        }
        v21 += v32;
        if (v23 <= v32) {
          break;
        }
        if ((v32 != 0) | v33 & 1)
        {
          v33 &= v32 != 0;
        }
        else
        {
          int v36 = *__error();
          uint64_t v37 = _SILogForLogForCategory(0);
          if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            int v62 = "_copyFile";
            __int16 v63 = 1024;
            int v64 = 194;
            _os_log_error_impl(&dword_1BDAD0000, v37, OS_LOG_TYPE_ERROR, "%s:%d: write failed", buf, 0x12u);
          }
          char v33 = 0;
          *__error() = v36;
        }
        a6 += v32;
        v34 += v32;
        uint64_t v24 = prot_pwrite_guarded(v19, (uint64_t)&v58, v34, v35, a6);
        uint64_t v32 = v24;
        int64_t v23 = v35;
        if (v24 == -1) {
          goto LABEL_49;
        }
      }
      a6 += v23;
      uint64_t v12 = v53;
      uint64_t v10 = v54;
      int v9 = v55;
      long long v14 = v57;
      if (a6 >= v60.st_size) {
        goto LABEL_53;
      }
    }
    int v45 = *__error();
    unint64_t v48 = _SILogForLogForCategory(10);
    os_log_type_t v49 = 2 * (dword_1EA0DBB78 < 4);
    if (os_log_type_enabled(v48, v49))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1BDAD0000, v48, v49, "canceled", buf, 2u);
    }
LABEL_52:
    *__error() = v45;
    uint64_t v10 = v54;
    int v9 = v55;
  }
LABEL_53:
  if (v21 + v56 == v60.st_size)
  {
    uint64_t v40 = 1;
  }
  else
  {
    if (!*v14)
    {
      int v6 = *__error();
      unint64_t v47 = _SILogForLogForCategory(0);
      if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR)) {
        _copyFile_cold_5();
      }
      goto LABEL_35;
    }
    uint64_t v40 = 0;
  }
LABEL_36:
  int v41 = *__error();
  free(v10);
  prot_fsync(v19, 0);
  if ((v12 & 0x80000000) == 0) {
    fd_close(v11, v12, v59);
  }
  fd_release(v11);
  if ((v19 & 0x80000000) == 0) {
    fd_close(v9, v19, v58);
  }
  fd_release(v9);
  if (v41) {
    *__error() = v41;
  }
  return v40;
}

uint64_t copyFile(int a1, const char *a2, int a3, const char *a4, _DWORD *a5)
{
  return copyFileFallback(a1, a2, a3, a4, a5, 1, 1);
}

uint64_t copyFileFallback(int a1, const char *a2, int a3, const char *a4, _DWORD *a5, char a6, int a7)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  if (a1 != a3 || !isRegisteredForCloning(a1) || !a7) {
    return _copyFile(a1, a2, a3, a4, a5, 0);
  }
  bzero(v45, 0x400uLL);
  bzero(v44, 0x400uLL);
  long long v14 = faccurate_realpath(a1, v45);
  if (!v14)
  {
    int v28 = *__error();
    int v29 = *__error();
    uint64_t v30 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
      copyFileFallback_cold_1();
    }
    goto LABEL_28;
  }
  unint64_t v15 = v14;
  size_t v16 = strlen(v14);
  snprintf((char *)&v15[v16], 1024 - v16, "/%s", a2);
  uint64_t v17 = faccurate_realpath(a1, v44);
  if (!v17)
  {
    int v28 = *__error();
    int v29 = *__error();
    uint64_t v32 = _SILogForLogForCategory(0);
    if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR)) {
      copyFileFallback_cold_2();
    }
LABEL_28:
    *__error() = v29;
    char v33 = __error();
    uint64_t result = 0;
    int *v33 = v28;
    return result;
  }
  uint64_t v18 = (const std::__fs::filesystem::path *)v17;
  char v38 = a6;
  size_t v19 = strlen(v17);
  uint64_t v37 = a4;
  snprintf((char *)v18 + v19, 1024 - v19, "/%s", a4);
  int v20 = *__error();
  uint64_t v21 = _SILogForLogForCategory(7);
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    int v41 = v15;
    __int16 v42 = 2080;
    int64_t v43 = v18;
    _os_log_impl(&dword_1BDAD0000, v21, OS_LOG_TYPE_DEFAULT, "copy file %s to %s", buf, 0x16u);
  }
  *__error() = v20;
  while (1)
  {
    int v22 = open((const char *)v18, 0);
    to = 0;
    asprintf(&to, "%s.tmp", (const char *)v18);
    unlink(to);
    int v23 = copyfile(v15, to, 0, 0x20C0000u);
    int v25 = *__error();
    if (v25 != 45) {
      goto LABEL_12;
    }
    int v26 = open(v15, 0);
    if (v26 != -1)
    {
      close(v26);
      int v25 = 45;
LABEL_12:
      if (v23) {
        goto LABEL_14;
      }
LABEL_13:
      rename((const std::__fs::filesystem::path *)to, v18, v24);
      int v23 = v27;
      int v25 = *__error();
      goto LABEL_14;
    }
    int v25 = *__error();
    if (!v23) {
      goto LABEL_13;
    }
LABEL_14:
    free(to);
    if (v22 != -1) {
      close(v22);
    }
    if (v23 != -1) {
      break;
    }
    if ((prot_error_check() & 1) == 0)
    {
      *__error() = v25;
      *__error() = v25;
      if ((prot_error_check() & 1) == 0)
      {
        *__error() = v25;
        goto LABEL_29;
      }
    }
  }
  *__error() = v25;
  if (!v23) {
    return 1;
  }
LABEL_29:
  int v34 = *__error();
  int v35 = *__error();
  int v36 = _SILogForLogForCategory(0);
  if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR)) {
    copyFileFallback_cold_3((uint64_t)v15, (uint64_t)v18, v36);
  }
  *__error() = v35;
  *__error() = v34;
  if (v38)
  {
    a4 = v37;
    return _copyFile(a1, a2, a3, a4, a5, 0);
  }
  return 0;
}

uint64_t copyFileIfTargetWritable(int a1, const char *a2, int a3, char *a4, _DWORD *a5)
{
  memset(&v11, 0, sizeof(v11));
  if (fstatat(a3, a4, &v11, 0) || v11.st_mode != 256) {
    return copyFileFallback(a1, a2, a3, a4, a5, 1, 1);
  }
  else {
    return 1;
  }
}

uint64_t copyFileNoFallback(int a1, const char *a2, int a3, const char *a4, _DWORD *a5)
{
  return copyFileFallback(a1, a2, a3, a4, a5, 0, 1);
}

uint64_t copyFileNoClone(int a1, const char *a2, int a3, const char *a4, _DWORD *a5)
{
  return copyFileFallback(a1, a2, a3, a4, a5, 0, 0);
}

void OUTLINED_FUNCTION_5_0(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x22u);
}

void OUTLINED_FUNCTION_6_0(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x28u);
}

const char *_nlpLoggingSubsystem()
{
  return "com.apple.spotlight.SpotlightLinguistics";
}

uint64_t _nlpDefaultLog()
{
  if (_nlpDefaultLog::token != -1) {
    dispatch_once(&_nlpDefaultLog::token, &__block_literal_global_15);
  }
  return _nlpDefaultLog::log;
}

os_log_t ___nlpDefaultLog_block_invoke()
{
  os_log_t result = os_log_create("com.apple.spotlight.SpotlightLinguistics", "SIDefaultLog");
  _nlpDefaultLog::log = (uint64_t)result;
  return result;
}

uint64_t _nlpSignpostLog()
{
  if (_nlpSignpostLog::token != -1) {
    dispatch_once(&_nlpSignpostLog::token, &__block_literal_global_3_0);
  }
  return _nlpSignpostLog::log;
}

os_log_t ___nlpSignpostLog_block_invoke()
{
  os_log_t result = os_log_create("com.apple.spotlight.SpotlightLinguistics", "SISignposts");
  _nlpSignpostLog::log = (uint64_t)result;
  return result;
}

atomic_uint *SIStringCacheCreateWithOptions(const void *a1, const __CFDictionary *a2)
{
  uint64_t v4 = (atomic_uint *)malloc_type_malloc(0x38uLL, 0x10600406D1038DAuLL);
  if (v4)
  {
    CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (Mutable)
    {
      int valuePtr = 65;
      CFNumberRef v7 = CFNumberCreate(v5, kCFNumberSInt32Type, &valuePtr);
      CFDictionarySetValue(Mutable, @"containerSize", v7);
      int v16 = 1;
      CFNumberRef v8 = CFNumberCreate(v5, kCFNumberSInt32Type, &v16);
      CFDictionarySetValue(Mutable, @"trieOptions", v8);
      CFRelease(v7);
      CFRelease(v8);
    }
    if (a1) {
      CFTypeRef v9 = CFRetain(a1);
    }
    else {
      CFTypeRef v9 = 0;
    }
    *((void *)v4 + 1) = v9;
    *((void *)v4 + 2) = 0;
    MutableWithDictionary = SIGeneralTrieCreateMutableWithDictionary(Mutable);
    *((void *)v4 + 5) = 500;
    *((void *)v4 + 3) = MutableWithDictionary;
    *((void *)v4 + 4) = 0;
    *((void *)v4 + 6) = 0x4000000000000000;
    if (Mutable) {
      CFRelease(Mutable);
    }
    if (a2)
    {
      CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a2, (const void *)kSIStringCacheOptionMaxCacheSize);
      if (Value) {
        CFNumberGetValue(Value, kCFNumberCFIndexType, v4 + 10);
      }
      CFNumberRef v12 = (const __CFNumber *)CFDictionaryGetValue(a2, (const void *)kSIStringCacheOptionCacheGrowthFactor);
      if (v12) {
        CFNumberGetValue(v12, kCFNumberDoubleType, v4 + 12);
      }
    }
    if (*((void *)v4 + 1))
    {
      CFStringRef v13 = CFStringCreateWithFormat(v5, 0, @"%@/strings.dat", *((void *)v4 + 1));
      if (v13)
      {
        CFStringRef v14 = v13;
        *((void *)v4 + 2) = CFURLCreateWithString(v5, v13, 0);
        CFRelease(v14);
      }
    }
    atomic_fetch_add(v4, 1u);
  }
  return v4;
}

atomic_uint *SIStringCacheRetain(atomic_uint *result)
{
  if (result) {
    atomic_fetch_add(result, 1u);
  }
  return result;
}

void SIStringCacheAdd(double *a1, CFStringRef theString)
{
  if (a1 && theString && CFStringGetLength(theString))
  {
    uint64_t v4 = *((void *)a1 + 3);
    if (v4 && CFStringGetLength(theString)) {
      SIGeneralTrieAddStringKeyWithScore(v4, theString, 1, 0, 0, 1.0);
    }
    uint64_t v5 = *((void *)a1 + 5);
    double v6 = a1[6];
    commit((uint64_t)a1, v5, v6);
  }
}

void commit(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v3 = *(void *)(a1 + 24);
  if (v3)
  {
    uint64_t v7 = *(void *)(a1 + 32);
    if (v7) {
      SIGeneralTrieSearch(v7, "", 0, -1, v3, (uint64_t)mergeKeyCallback);
    }
    if (a2 && (double)a2 * a3 < (double)SIGeneralTrieGetCount(*(void *)(a1 + 24)))
    {
      if (!*(void *)(a1 + 8) || !*(void *)(a1 + 16))
      {
        CFNumberRef v12 = SITrieCursorQueueCreate();
        CFStringRef v13 = SITrieCompletionQueueCreate();
        SIGeneralTrieRankedSearch(*(void *)(a1 + 24), "", 0, a2, v12, v13);
        if (CFBinaryHeapGetCount(v13))
        {
          CFDictionaryRef OptionsDictionary = SIGeneralTrieCreateOptionsDictionary(1, 65, 0, 0, 0);
          MutableWithDictionary = SIGeneralTrieCreateMutableWithDictionary(OptionsDictionary);
          if (OptionsDictionary) {
            CFRelease(OptionsDictionary);
          }
          if (CFBinaryHeapGetCount(v13) >= 1)
          {
            do
            {
              Minimuuint64_t m = CFBinaryHeapGetMinimum(v13);
              Completiouint64_t n = SITrieCompletionGetCompletion((uint64_t)Minimum);
              unsigned int Length = SITrieCompletionGetLength((uint64_t)Minimum);
              int Payload = SITrieCompletionGetPayload((uint64_t)Minimum);
              v20.n128_f64[0] = SITrieCompletionGetScore((uint64_t)Minimum);
              SIGeneralTrieAddKeyWithScore((uint64_t)MutableWithDictionary, Completion, Length, Payload, 0, 0, v20);
              CFBinaryHeapRemoveMinimumValue(v13);
            }
            while (CFBinaryHeapGetCount(v13) > 0);
          }
          SIGeneralTrieRelease(*(char **)(a1 + 24));
          *(void *)(a1 + 24) = MutableWithDictionary;
        }
        CFRelease(v12);
        stat v11 = v13;
        goto LABEL_21;
      }
      CFNumberRef v8 = *(char **)(a1 + 32);
      if (v8)
      {
        SIGeneralTrieRelease(v8);
        *(void *)(a1 + 32) = 0;
      }
      uint64_t v9 = *(void *)(a1 + 24);
      if (v9)
      {
        SIGeneralTrieWriteToFileURL(v9, *(const __CFURL **)(a1 + 16));
        SIGeneralTrieRelease(*(char **)(a1 + 24));
        CFDictionaryRef v10 = SIGeneralTrieCreateOptionsDictionary(1, 65, 0, 0, 0);
        *(void *)(a1 + 24) = SIGeneralTrieCreateMutableWithDictionary(v10);
        *(void *)(a1 + 32) = SIGeneralTrieCreateFromFileURL(*(const __CFURL **)(a1 + 16));
        if (v10)
        {
          stat v11 = v10;
LABEL_21:
          CFRelease(v11);
        }
      }
    }
  }
}

void SIStringCachePrune(uint64_t a1, uint64_t a2)
{
  if (a1) {
    commit(a1, a2, 1.0);
  }
}

void SIStringCacheEnumerateStrings(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v4 = *(void *)(a1 + 24);
    v7[0] = MEMORY[0x1E4F143A8];
    v7[1] = 0x40000000;
    void v7[2] = __SIStringCacheEnumerateStrings_block_invoke;
    v7[3] = &unk_1E634A1F8;
    void v7[4] = a2;
    enumerateStrings(v4, (uint64_t)v7);
    uint64_t v5 = *(void *)(a1 + 32);
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 0x40000000;
    gid_t v6[2] = __SIStringCacheEnumerateStrings_block_invoke_2;
    void v6[3] = &unk_1E634A220;
    v6[4] = a2;
    enumerateStrings(v5, (uint64_t)v6);
  }
}

void enumerateStrings(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  if (a1 && SIGeneralTrieGetCount(a1))
  {
    if (a2) {
      SIGeneralTrieSearchString(a1, &stru_1F181E430, -1, (uint64_t)&v4, (uint64_t)keyCacheCallback);
    }
  }
}

void __SIStringCacheEnumerateStrings_block_invoke(uint64_t a1, const UInt8 *a2, CFIndex numBytes)
{
  CFStringRef v4 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a2, numBytes, 0x8000100u, 0);
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();

  CFRelease(v4);
}

void __SIStringCacheEnumerateStrings_block_invoke_2(uint64_t a1, const UInt8 *a2, CFIndex numBytes)
{
  CFStringRef v4 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a2, numBytes, 0x8000100u, 0);
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();

  CFRelease(v4);
}

uint64_t SIStringCacheContains(uint64_t result, CFStringRef theString)
{
  if (result)
  {
    uint64_t v3 = result;
    os_log_t result = 0;
    uint64_t v5 = *(void *)(v3 + 24);
    uint64_t v4 = *(void *)(v3 + 32);
    BOOL v6 = *(_OWORD *)(v3 + 24) != 0;
    if (theString)
    {
      if (v6)
      {
        os_log_t result = CFStringGetLength(theString);
        if (result)
        {
          if (v5)
          {
            int v7 = SIGeneralTrieContainsStringKey(v5, theString, 0, 0);
            os_log_t result = v7 != 0;
            if (v7 || !v4) {
              return result;
            }
          }
          else if (!v4)
          {
            return 0;
          }
          return SIGeneralTrieContainsStringKey(v4, theString, 0, 0) != 0;
        }
      }
    }
  }
  return result;
}

uint64_t SIStringCacheGetCount(uint64_t a1)
{
  if (a1 && (uint64_t v1 = *(void *)(a1 + 24)) != 0) {
    return SIGeneralTrieGetCount(v1);
  }
  else {
    return 0;
  }
}

void SIStringCacheRelease(void *a1)
{
  if (a1 && atomic_fetch_add((atomic_uint *volatile)a1, 0xFFFFFFFF) == 1)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEBUG)) {
      SIStringCacheRelease_cold_1();
    }
    BOOL v2 = (const void *)a1[1];
    if (v2) {
      CFRelease(v2);
    }
    uint64_t v3 = (const void *)a1[2];
    if (v3) {
      CFRelease(v3);
    }
    uint64_t v4 = (char *)a1[3];
    if (v4) {
      SIGeneralTrieRelease(v4);
    }
    uint64_t v5 = (char *)a1[4];
    if (v5) {
      SIGeneralTrieRelease(v5);
    }
    free(a1);
  }
}

uint64_t mergeKeyCallback(uint64_t result, uint64_t a2)
{
  if (result)
  {
    uint64_t v3 = result;
    Completiouint64_t n = SITrieCompletionGetCompletion(a2);
    unsigned int Length = SITrieCompletionGetLength(a2);
    int Payload = SITrieCompletionGetPayload(a2);
    v7.n128_f64[0] = SITrieCompletionGetScore(a2);
    return SIGeneralTrieAddKeyWithScore(v3, Completion, Length, Payload, 0, 0, v7);
  }
  return result;
}

uint64_t *keyCacheCallback(uint64_t *result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    uint64_t v5 = *result;
    Completiouint64_t n = SITrieCompletionGetCompletion(a2);
    uint64_t Length = SITrieCompletionGetLength(a2);
    uint64_t Payload = SITrieCompletionGetPayload(a2);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 16);
    return (uint64_t *)v9(v5, Completion, Length, Payload, a3);
  }
  return result;
}

void my_vm_tag_stats(__n128 a1)
{
  uint64_t v1 = 0;
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  int v2 = gSILogLevels[0];
  a1.n128_u64[0] = 67109376;
  do
  {
    uint64_t v3 = tag_sizes[v1];
    if (v3) {
      BOOL v4 = v2 < 5;
    }
    else {
      BOOL v4 = 1;
    }
    if (!v4)
    {
      __n128 v8 = a1;
      int v5 = *__error();
      BOOL v6 = _SILogForLogForCategory(0);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = v8.n128_u32[0];
        int v10 = v1 + 240;
        __int16 v11 = 1024;
        int v12 = v3;
        _os_log_impl(&dword_1BDAD0000, v6, OS_LOG_TYPE_DEFAULT, "tag: %d, usage: %d", buf, 0xEu);
      }
      *__error() = v5;
      int v2 = gSILogLevels[0];
      a1 = v8;
    }
    ++v1;
  }
  while (v1 != 16);
}

uint64_t my_vm_tag_usage(int a1)
{
  if ((a1 - 240) > 0x10) {
    return 0;
  }
  else {
    return tag_sizes[a1 - 240];
  }
}

unint64_t my_vm_tag_size_add(int a1, unint64_t a2)
{
  if ((a1 - 240) > 0x10) {
    return 0;
  }
  else {
    return atomic_fetch_add_explicit(&tag_sizes[a1 - 240], a2, memory_order_relaxed) + a2;
  }
}

unint64_t my_vm_tag_flags_size_add(unsigned int a1, unint64_t a2)
{
  unsigned int v2 = HIBYTE(a1) - 240;
  if (v2 > 0x10) {
    return 0;
  }
  else {
    return atomic_fetch_add_explicit(&tag_sizes[v2], a2, memory_order_relaxed) + a2;
  }
}

uint64_t my_vm_reallocate(void **a1, size_t a2, size_t a3, int a4, uint64_t a5)
{
  uint64_t v9 = *a1;
  uint64_t result = my_vm_allocate(a1, a3, (a4 << 24) | 1u);
  if (a2 && v9)
  {
    if (result)
    {
      *a1 = v9;
      return result;
    }
    if (a2 <= 4 * *MEMORY[0x1E4F14B00])
    {
      memcpy(*a1, v9, a2);
      if (a5) {
        goto LABEL_7;
      }
    }
    else
    {
      vm_copy(*MEMORY[0x1E4F14960], (vm_address_t)v9, a2, (vm_address_t)*a1);
      if (a5)
      {
LABEL_7:
        v11[0] = MEMORY[0x1E4F143A8];
        v11[1] = 0x40000000;
        v11[2] = __my_vm_reallocate_block_invoke;
        v11[3] = &__block_descriptor_tmp_16;
        v11[4] = v9;
        void v11[5] = a2;
        char v12 = a4;
        (*(void (**)(uint64_t, void *))(a5 + 16))(a5, v11);
        return 0;
      }
    }
    if ((a4 - 240) <= 0x10) {
      atomic_fetch_add_explicit(&tag_sizes[a4 - 240], -(uint64_t)a2, memory_order_relaxed);
    }
    munmap(v9, a2);
    return 0;
  }
  return result;
}

uint64_t my_vm_allocate(void **a1, size_t a2, unsigned int a3)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  if ((a3 & 0xFFFFFF) == 1)
  {
    BOOL v6 = mmap(0, a2, 3, 4098, a3 & 0xFF000000, 0);
    *a1 = v6;
    if (v6 == (void *)-1)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        my_vm_allocate_cold_1(a2, a3 & 0xFF000000, a3);
      }
      return 3;
    }
    goto LABEL_7;
  }
  __n128 v8 = *a1;
  unsigned int v9 = a3 & 0xFF000000;
  int v10 = mmap(*a1, a2, 3, 4114, a3 & 0xFF000000, 0);
  *a1 = v10;
  if (v10 != (void *)-1)
  {
LABEL_7:
    unsigned int v11 = HIBYTE(a3) - 240;
    uint64_t v7 = 0;
    if (v11 <= 0x10) {
      atomic_fetch_add_explicit(&tag_sizes[v11], a2, memory_order_relaxed);
    }
    return v7;
  }
  uint64_t v7 = 3;
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    int v13 = *__error();
    CFStringRef v14 = __error();
    unint64_t v15 = strerror(*v14);
    int v16 = 136317442;
    uint64_t v17 = "slab_allocator.h";
    __int16 v18 = 1024;
    int v19 = 92;
    __int16 v20 = 2048;
    uint64_t v21 = v8;
    __int16 v22 = 2048;
    size_t v23 = a2;
    __int16 v24 = 1024;
    int v25 = 3;
    __int16 v26 = 1024;
    int v27 = 4114;
    __int16 v28 = 1024;
    unsigned int v29 = v9;
    __int16 v30 = 1024;
    unsigned int v31 = a3;
    __int16 v32 = 1024;
    int v33 = v13;
    __int16 v34 = 2080;
    int v35 = v15;
    _os_log_error_impl(&dword_1BDAD0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%s:%u: mmap failed for addr %p, len 0x%08lx, prot 0x%04x, flags 0x%04x, fd 0x%04x, flags %u, errno %d(%s)", (uint8_t *)&v16, 0x4Eu);
  }
  return v7;
}

uint64_t __my_vm_reallocate_block_invoke(uint64_t a1)
{
  unsigned int v2 = *(void **)(a1 + 32);
  size_t v3 = *(void *)(a1 + 40);
  unsigned int v4 = *(unsigned __int8 *)(a1 + 48) - 240;
  if (v4 <= 0x10) {
    atomic_fetch_add_explicit(&tag_sizes[v4], -(uint64_t)v3, memory_order_relaxed);
  }
  return munmap(v2, v3);
}

void **slab_cleanup(void **result)
{
  if ((result - 243) > 4)
  {
    if (result == 250)
    {
      int v5 = (void **)OSAtomicDequeue(&stru_1EA0DC170, 0);
      if (v5)
      {
        BOOL v6 = v5;
        uint64_t v7 = (size_t *)MEMORY[0x1E4F14B00];
        do
        {
          munmap(v6[1], *v7);
          OSAtomicEnqueue(&slab_cache, v6, 0);
          BOOL v6 = (void **)OSAtomicDequeue(&stru_1EA0DC170, 0);
        }
        while (v6);
      }
      uint64_t result = (void **)OSAtomicDequeue(&stru_1EA0DC180, 0);
      if (result)
      {
        __n128 v8 = result;
        do
        {
          atomic_fetch_add(qword_1EA0DC190, 0xFFFFFFFFFFFFFFFFLL);
          munmap(v8[1], 0x100000uLL);
          OSAtomicEnqueue(&slab_cache, v8, 0);
          uint64_t result = (void **)OSAtomicDequeue(&stru_1EA0DC180, 0);
          __n128 v8 = result;
        }
        while (result);
      }
    }
  }
  else
  {
    uint64_t v1 = (void **)OSAtomicDequeue(&stru_1EA0DC130, 0);
    if (v1)
    {
      unsigned int v2 = v1;
      size_t v3 = (size_t *)MEMORY[0x1E4F14B00];
      do
      {
        munmap(v2[1], *v3);
        OSAtomicEnqueue(&slab_cache, v2, 0);
        unsigned int v2 = (void **)OSAtomicDequeue(&stru_1EA0DC130, 0);
      }
      while (v2);
    }
    uint64_t result = (void **)OSAtomicDequeue(&stru_1EA0DC140, 0);
    if (result)
    {
      unsigned int v4 = result;
      do
      {
        atomic_fetch_add(qword_1EA0DC150, 0xFFFFFFFFFFFFFFFFLL);
        munmap(v4[1], 0x100000uLL);
        OSAtomicEnqueue(&slab_cache, v4, 0);
        uint64_t result = (void **)OSAtomicDequeue(&stru_1EA0DC140, 0);
        unsigned int v4 = result;
      }
      while (result);
    }
  }
  return result;
}

char *slab_create(int a1)
{
  BOOL v6 = 0;
  uint64_t v1 = (size_t *)MEMORY[0x1E4F14B00];
  uint64_t v2 = *MEMORY[0x1E4F14B00];
  size_t v3 = 0;
  if (!slab_vm_allocate((void **)&v6, *MEMORY[0x1E4F14B00], a1))
  {
    size_t v3 = v6;
    unsigned int v4 = v6 + 24;
    *(void *)BOOL v6 = 0;
    *((void *)v3 + 1) = v4;
    *((void *)v3 + 2) = &v3[v2];
    madvise(v4, *v1, 3);
  }
  return v3;
}

uint64_t slab_vm_allocate(void **a1, unint64_t a2, int a3)
{
  if (a3 != 250)
  {
    if ((a3 - 243) > 4) {
      goto LABEL_18;
    }
    if (*MEMORY[0x1E4F14B00] == a2)
    {
      uint64_t v7 = OSAtomicDequeue(&stru_1EA0DC130, 0);
      if (!v7) {
        goto LABEL_18;
      }
    }
    else
    {
      if (a2 != 0x100000) {
        goto LABEL_18;
      }
      int v10 = OSAtomicDequeue(&stru_1EA0DC140, 0);
      if (!v10) {
        goto LABEL_18;
      }
      uint64_t v7 = v10;
      atomic_fetch_add(qword_1EA0DC150, 0xFFFFFFFFFFFFFFFFLL);
    }
    unsigned int v11 = (void *)v7[1];
    *a1 = v11;
    bzero(v11, v11[1] - (void)v11);
    OSAtomicEnqueue(&slab_cache, v7, 0);
    unsigned int v9 = &tag_sizes[a3 - 240];
    goto LABEL_17;
  }
  if (*MEMORY[0x1E4F14B00] == a2)
  {
    BOOL v6 = OSAtomicDequeue(&stru_1EA0DC170, 0);
    if (!v6) {
      goto LABEL_18;
    }
    goto LABEL_12;
  }
  if (a2 == 0x100000)
  {
    __n128 v8 = OSAtomicDequeue(&stru_1EA0DC180, 0);
    if (v8)
    {
      BOOL v6 = v8;
      atomic_fetch_add(qword_1EA0DC190, 0xFFFFFFFFFFFFFFFFLL);
LABEL_12:
      *a1 = (void *)v6[1];
      OSAtomicEnqueue(&slab_cache, v6, 0);
      unsigned int v9 = (atomic_ullong *)&unk_1EA0DC0F0;
LABEL_17:
      atomic_fetch_add_explicit(v9, a2, memory_order_relaxed);
      return 0;
    }
  }
LABEL_18:

  return my_vm_allocate(a1, a2, (a3 << 24) | 1u);
}

void *slab_usage(void *result, uint64_t *a2, uint64_t *a3)
{
  if (result)
  {
    uint64_t v3 = 0;
    uint64_t v4 = 0;
    do
    {
      uint64_t v4 = v4 - (void)result + result[1];
      uint64_t v3 = v3 - (void)result + result[2];
      uint64_t result = (void *)*result;
    }
    while (result);
    if (!a2) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  uint64_t v4 = 0;
  uint64_t v3 = 0;
  if (a2) {
LABEL_5:
  }
    *a2 = v4;
LABEL_6:
  if (a3) {
    *a3 = v3;
  }
  return result;
}

void *slab_destroy(void *result, int a2)
{
  if (result)
  {
    do
    {
      uint64_t v3 = (void *)*result;
      slab_vm_deallocate(result, result[2] - (void)result, a2);
      uint64_t result = v3;
    }
    while (v3);
  }
  return result;
}

void slab_vm_deallocate(void *a1, size_t a2, int a3)
{
  if (a3 == 250)
  {
    if (a2 != 0x100000)
    {
      unsigned int v9 = (size_t *)MEMORY[0x1E4F14B00];
      if (*MEMORY[0x1E4F14B00] == a2)
      {
        int v10 = node_alloc();
        v10[1] = a1;
        madvise(a1, *v9, 5);
        atomic_fetch_add_explicit(qword_1EA0DC0F0, -(uint64_t)a2, memory_order_relaxed);
        __n128 v8 = &stru_1EA0DC170;
        uint64_t v7 = v10;
        goto LABEL_16;
      }
      goto LABEL_19;
    }
    madvise(a1, 0x100000uLL, 5);
    atomic_fetch_add_explicit(qword_1EA0DC0F0, 0xFFFFFFFFFFF00000, memory_order_relaxed);
    BOOL v6 = qword_1EA0DC190;
    if (atomic_fetch_add(qword_1EA0DC190, 1uLL) <= 4)
    {
      uint64_t v7 = node_alloc();
      v7[1] = a1;
      __n128 v8 = &stru_1EA0DC180;
LABEL_16:
      OSAtomicEnqueue(v8, v7, 0);
      return;
    }
  }
  else
  {
    if ((a3 - 243) > 4)
    {
      int v11 = a3 - 240;
      if ((a3 - 240) > 0x10) {
        goto LABEL_21;
      }
      goto LABEL_20;
    }
    if (a2 != 0x100000)
    {
      if (*MEMORY[0x1E4F14B00] == a2)
      {
        uint64_t v7 = node_alloc();
        v7[1] = a1;
        atomic_fetch_add_explicit(&tag_sizes[a3 - 240], -(uint64_t)a2, memory_order_relaxed);
        __n128 v8 = &stru_1EA0DC130;
        goto LABEL_16;
      }
      goto LABEL_19;
    }
    atomic_fetch_add_explicit(&tag_sizes[a3 - 240], 0xFFFFFFFFFFF00000, memory_order_relaxed);
    BOOL v6 = qword_1EA0DC150;
    if (atomic_fetch_add(qword_1EA0DC150, 1uLL) <= 4)
    {
      uint64_t v7 = node_alloc();
      v7[1] = a1;
      __n128 v8 = &stru_1EA0DC140;
      goto LABEL_16;
    }
  }
  atomic_fetch_add(v6, 0xFFFFFFFFFFFFFFFFLL);
LABEL_19:
  int v11 = a3 - 240;
LABEL_20:
  atomic_fetch_add_explicit(&tag_sizes[v11], -(uint64_t)a2, memory_order_relaxed);
LABEL_21:

  munmap(a1, a2);
}

void *slab_evict(void *result)
{
  if (result)
  {
    do
    {
      uint64_t v1 = (void *)*result;
      madvise(result, result[2] - (void)result, 4);
      uint64_t result = v1;
    }
    while (v1);
  }
  return result;
}

void *slab_reset(void *result, int a2)
{
  uint64_t v2 = (void **)*result;
  if (*result)
  {
    uint64_t v3 = result;
    uint64_t result = *v2;
    *uint64_t v2 = 0;
    *(void *)(*v3 + 8) = *v3 + 24;
    if (result)
    {
      do
      {
        int v5 = (void *)*result;
        slab_vm_deallocate(result, result[2] - (void)result, a2);
        uint64_t result = v5;
      }
      while (v5);
    }
  }
  return result;
}

void *slab_new(void **a1, unint64_t a2, int a3)
{
  uint64_t v4 = *a1;
  __int16 v28 = *a1;
  if (a2 < 0xFFFE9)
  {
    uint64_t v18 = slab_vm_allocate((void **)&v28, 0x100000uLL, a3);
    if (v18) {
      slab_new_cold_2(v18, v19, v20, v21, v22, v23, v24, v25);
    }
    __int16 v26 = v28;
    *__int16 v28 = *a1;
    *a1 = v26;
    uint64_t result = v26 + 3;
    v26[1] = (char *)v26 + a2 + 24;
    v26[2] = v26 + 0x20000;
  }
  else
  {
    int v27 = 0;
    unint64_t v5 = a2 + 24;
    uint64_t v6 = slab_vm_allocate((void **)&v27, a2 + 24, a3);
    if (v6) {
      slab_new_cold_1(v6, v7, v8, v9, v10, v11, v12, v13);
    }
    CFStringRef v14 = v27;
    unint64_t v15 = (char *)v27 + v5;
    v27[1] = (char *)v27 + v5;
    CFIndex v14[2] = v15;
    void *v14 = *v4;
    *uint64_t v4 = v14;
    return v14 + 3;
  }
  return result;
}

void *slab_new_slab(void **a1, unint64_t a2, int a3)
{
  uint64_t v4 = *a1;
  unsigned int v29 = *a1;
  if (a2 < 0xFFFE9)
  {
    uint64_t v17 = slab_vm_allocate((void **)&v29, 0x100000uLL, a3);
    if (v17) {
      slab_new_slab_cold_2(v17, v18, v19, v20, v21, v22, v23, v24);
    }
    uint64_t v25 = *a1;
    CFStringRef v14 = v29;
    v29[2] = v29 + 0x20000;
    unint64_t v26 = (unint64_t)v14 + a2 + 24;
    atomic_store(v26, v14 + 1);
    void *v14 = v25;
    v14[1] = v26 + a2;
    __dmb(0xBu);
    *a1 = v29;
  }
  else
  {
    __int16 v28 = 0;
    unint64_t v5 = a2 + 24;
    uint64_t v6 = slab_vm_allocate((void **)&v28, a2 + 24, a3);
    if (v6) {
      slab_new_slab_cold_1(v6, v7, v8, v9, v10, v11, v12, v13);
    }
    CFStringRef v14 = v28;
    unint64_t v15 = &v28[v5];
    atomic_store((unint64_t)&v28[v5], v4 + 1);
    CFIndex v14[2] = v15;
    void *v14 = *v4;
    *uint64_t v4 = v14;
  }
  return v14 + 3;
}

void *node_alloc()
{
  uint64_t v0 = OSAtomicDequeue(&slab_cache, 0);
  if (!v0)
  {
    os_unfair_lock_lock((os_unfair_lock_t)&node_alloc_node_lock);
    uint64_t v0 = OSAtomicDequeue(&slab_cache, 0);
    if (!v0)
    {
      unint64_t v1 = *MEMORY[0x1E4F14B00];
      uint64_t v2 = (char *)malloc_type_malloc(*MEMORY[0x1E4F14B00], 0xBFCC7F5uLL);
      uint64_t v0 = v2;
      if (v1 >= 0x20)
      {
        uint64_t v3 = (v1 >> 4) - 1;
        uint64_t v4 = v2 + 16;
        do
        {
          OSAtomicEnqueue(&slab_cache, v4, 0);
          v4 += 16;
          --v3;
        }
        while (v3);
      }
    }
    os_unfair_lock_unlock((os_unfair_lock_t)&node_alloc_node_lock);
  }
  return v0;
}

uint64_t SIUINT32SetGetTypeID()
{
  uint64_t result = __kSIUINT32SetTypeID;
  if (!__kSIUINT32SetTypeID)
  {
    uint64_t result = _CFRuntimeRegisterClass();
    __kSIUINT32SetTypeID = result;
  }
  return result;
}

uint64_t SIUINT32SetCreate(uint64_t a1)
{
  if (!__kSIUINT32SetTypeID) {
    __kSIUINT32SetTypeID = _CFRuntimeRegisterClass();
  }

  return MEMORY[0x1F40D90D0](a1);
}

uint64_t SIUINT32SetContainsValue(uint64_t a1, unsigned int a2)
{
  return SIValueSet<unsigned int>::SIValueSetContains(a1 + 16, a2);
}

uint64_t SIValueSet<unsigned int>::SIValueSetContains(uint64_t a1, unsigned int a2)
{
  if (*(unsigned char *)(a1 + 160)) {
    return 0;
  }
  int v3 = *(_DWORD *)(a1 + 4);
  if (v3 && (*(_DWORD *)a1 ^ a2) >> (-4 * v3)) {
    return 0;
  }
  else {
    return SIValueSet<unsigned int>::_SIValueSetInnerContains(a1 + 32, a2, v3);
  }
}

uint64_t SIUINT32SetAddValue(uint64_t a1, uint64_t a2)
{
  return SIValueSet<unsigned int>::SIValueSetInsert((unsigned int *)(a1 + 16), a2);
}

uint64_t SIValueSet<unsigned int>::SIValueSetInsert(unsigned int *a1, uint64_t a2)
{
  int v4 = a1[1];
  if (v4)
  {
    unsigned int v5 = *a1;
    if ((*a1 ^ a2) >> (-4 * v4))
    {
      uint64_t v6 = a1 + 8;
      do
      {
        int v7 = a1[1];
        int v8 = v7 - 1;
        a1[1] = v7 - 1;
        if (v7 <= 0) {
          SIValueSet<unsigned int>::SIValueSetInsert();
        }
        char v9 = 32 - 4 * v7;
        if (v8) {
          int v10 = -1 << (-4 * v8);
        }
        else {
          int v10 = 0;
        }
        unsigned int v11 = (v5 >> (v9 & 0xFC)) & 0xF;
        *a1 = v5 & v10;
        uint64_t v12 = SIValueSet<unsigned int>::CombLevel_s::malloc_chain_s::chain_alloc_level((uint64_t)(a1 + 2));
        long long v13 = *((_OWORD *)a1 + 5);
        long long v15 = *v6;
        long long v14 = *((_OWORD *)a1 + 3);
        *(_OWORD *)(v12 + 32) = *((_OWORD *)a1 + 4);
        *(_OWORD *)(v12 + 48) = v13;
        *(_OWORD *)uint64_t v12 = v15;
        *(_OWORD *)(v12 + 16) = v14;
        long long v16 = *((_OWORD *)a1 + 9);
        long long v18 = *((_OWORD *)a1 + 6);
        long long v17 = *((_OWORD *)a1 + 7);
        *(_OWORD *)(v12 + 96) = *((_OWORD *)a1 + 8);
        *(_OWORD *)(v12 + 112) = v16;
        *(_OWORD *)(v12 + 64) = v18;
        *(_OWORD *)(v12 + 8std::unique_ptr<SIResourcePool>::reset[abi:ne180100](this, 0) = v17;
        *uint64_t v6 = 0u;
        *((_OWORD *)a1 + 3) = 0u;
        *((_OWORD *)a1 + 4) = 0u;
        *((_OWORD *)a1 + 5) = 0u;
        *((_OWORD *)a1 + 6) = 0u;
        *((_OWORD *)a1 + 7) = 0u;
        *((_OWORD *)a1 + 8) = 0u;
        *((_OWORD *)a1 + 9) = 0u;
        *((void *)v6 + v11) = v12 | 1;
        unsigned int v5 = *a1;
      }
      while (*a1 != (v10 & a2));
      int v4 = a1[1];
    }
    if ((4 * v4 - 29) <= 0xFFFFFFDE) {
      SIValueSet<unsigned int>::SIValueSetInsert();
    }
  }
  else if (*((unsigned char *)a1 + 160))
  {
    int v4 = 4;
    *a1 = a2 & 0xFFFF0000;
    a1[1] = 4;
  }
  else
  {
    int v4 = 0;
  }
  *((unsigned char *)a1 + 16std::unique_ptr<SIResourcePool>::reset[abi:ne180100](this, 0) = 0;

  return SIValueSet<unsigned int>::_SIValueSetInnerInsert((unint64_t)(a1 + 8), a2, v4, (uint64_t)(a1 + 2));
}

uint64_t SIUINT64SetCreate(uint64_t a1)
{
  if (!__kSIUINT64SetTypeID) {
    __kSIUINT64SetTypeID = _CFRuntimeRegisterClass();
  }

  return MEMORY[0x1F40D90D0](a1);
}

uint64_t SIUINT64SetGetTypeID()
{
  uint64_t result = __kSIUINT64SetTypeID;
  if (!__kSIUINT64SetTypeID)
  {
    uint64_t result = _CFRuntimeRegisterClass();
    __kSIUINT64SetTypeID = result;
  }
  return result;
}

uint64_t SIUINT64SetContainsValue(uint64_t a1, unint64_t a2)
{
  return SIValueSet<unsigned long long>::SIValueSetContains(a1 + 16, a2);
}

uint64_t SIValueSet<unsigned long long>::SIValueSetContains(uint64_t a1, unint64_t a2)
{
  if (*(unsigned char *)(a1 + 168)) {
    return 0;
  }
  int v3 = *(_DWORD *)(a1 + 8);
  if (v3 && (*(void *)a1 ^ a2) >> (-4 * v3)) {
    return 0;
  }
  else {
    return SIValueSet<unsigned long long>::_SIValueSetInnerContains(a1 + 40, a2, v3);
  }
}

uint64_t SIUINT64SetAddValue(uint64_t a1, unint64_t a2)
{
  return SIValueSet<unsigned long long>::SIValueSetInsert((unint64_t *)(a1 + 16), a2);
}

uint64_t SIValueSet<unsigned long long>::SIValueSetInsert(unint64_t *a1, unint64_t a2)
{
  int v4 = *((_DWORD *)a1 + 2);
  if (v4)
  {
    unint64_t v5 = *a1;
    if ((*a1 ^ a2) >> (-4 * v4))
    {
      uint64_t v6 = a1 + 5;
      do
      {
        int v7 = *((_DWORD *)a1 + 2);
        int v8 = v7 - 1;
        *((_DWORD *)a1 + 2) = v7 - 1;
        if (v7 <= 0) {
          SIValueSet<unsigned int>::SIValueSetInsert();
        }
        char v9 = 64 - 4 * v7;
        if (v8) {
          uint64_t v10 = -1 << (-4 * v8);
        }
        else {
          uint64_t v10 = 0;
        }
        uint64_t v11 = (v5 >> (v9 & 0xFC)) & 0xF;
        *a1 = v5 & v10;
        uint64_t v12 = SIValueSet<unsigned int>::CombLevel_s::malloc_chain_s::chain_alloc_level((uint64_t)(a1 + 2));
        long long v13 = *(_OWORD *)(a1 + 11);
        long long v15 = *v6;
        long long v14 = *(_OWORD *)(a1 + 7);
        *(_OWORD *)(v12 + 32) = *(_OWORD *)(a1 + 9);
        *(_OWORD *)(v12 + 48) = v13;
        *(_OWORD *)uint64_t v12 = v15;
        *(_OWORD *)(v12 + 16) = v14;
        long long v16 = *(_OWORD *)(a1 + 19);
        long long v18 = *(_OWORD *)(a1 + 13);
        long long v17 = *(_OWORD *)(a1 + 15);
        *(_OWORD *)(v12 + 96) = *(_OWORD *)(a1 + 17);
        *(_OWORD *)(v12 + 112) = v16;
        *(_OWORD *)(v12 + 64) = v18;
        *(_OWORD *)(v12 + 8std::unique_ptr<SIResourcePool>::reset[abi:ne180100](this, 0) = v17;
        *uint64_t v6 = 0u;
        *(_OWORD *)(a1 + 7) = 0u;
        *(_OWORD *)(a1 + 9) = 0u;
        *(_OWORD *)(a1 + 11) = 0u;
        *(_OWORD *)(a1 + 13) = 0u;
        *(_OWORD *)(a1 + 15) = 0u;
        *(_OWORD *)(a1 + 17) = 0u;
        *(_OWORD *)(a1 + 19) = 0u;
        *((void *)v6 + v11) = v12 | 1;
        unint64_t v5 = *a1;
      }
      while (*a1 != (v10 & a2));
      int v4 = *((_DWORD *)a1 + 2);
    }
    if ((4 * v4 - 61) <= 0xFFFFFFBE) {
      SIValueSet<unsigned int>::SIValueSetInsert();
    }
  }
  else if (*((unsigned char *)a1 + 168))
  {
    int v4 = 12;
    *((_DWORD *)a1 + 2) = 12;
    *a1 = a2 & 0xFFFFFFFFFFFF0000;
  }
  else
  {
    int v4 = 0;
  }
  *((unsigned char *)a1 + 168) = 0;

  return SIValueSet<unsigned long long>::_SIValueSetInnerInsert((unint64_t)(a1 + 5), a2, v4, (uint64_t)(a1 + 2));
}

uint64_t SIUINT64SetRemoveValue(uint64_t a1, unint64_t a2)
{
  return SIValueSet<unsigned long long>::SIValueSetRemove(a1 + 16, a2);
}

uint64_t SIValueSet<unsigned long long>::SIValueSetRemove(uint64_t a1, unint64_t a2)
{
  if (*(unsigned char *)(a1 + 168)) {
    return 0;
  }
  int v3 = *(_DWORD *)(a1 + 8);
  if (v3 && *(void *)a1 != ((-1 << (-4 * v3)) & a2)) {
    return 0;
  }
  else {
    return SIValueSet<unsigned long long>::_SIValueSetInnerRemove(a1 + 40, a2, v3, a1 + 16);
  }
}

uint64_t SIUINT64SetIterate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return SIValueSet<unsigned long long>::_SIValueSetInnerIterate(a1 + 56, *(void *)(a1 + 16), *(_DWORD *)(a1 + 24), a2, a4, a3);
}

double __SIUINT32SetInit(const void *a1)
{
  CFAllocatorRef v2 = CFGetAllocator(a1);
  *((void *)a1 + 2) = 0;
  *((void *)a1 + 4) = 0;
  *((void *)a1 + 5) = v2;
  int v3 = CFAllocatorAllocate(v2, 8072, 0);
  bzero(v3, 0x1F88uLL);
  *((void *)a1 + 3) = v3;
  double result = 0.0;
  *((_OWORD *)a1 + 3) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + 5) = 0u;
  *((_OWORD *)a1 + 6) = 0u;
  *((_OWORD *)a1 + 7) = 0u;
  *((_OWORD *)a1 + 8) = 0u;
  *((_OWORD *)a1 + 9) = 0u;
  *((_OWORD *)a1 + 1std::unique_ptr<SIResourcePool>::reset[abi:ne180100](this, 0) = 0u;
  *((unsigned char *)a1 + 176) = 1;
  return result;
}

uint64_t __SIUINT32SetFinalize(const void *a1)
{
  return SIValueSet<unsigned int>::~SIValueSet((uint64_t)a1 + 16);
}

uint64_t SIValueSet<unsigned int>::CombLevel_s::malloc_chain_s::~malloc_chain_s(uint64_t a1)
{
  CFAllocatorRef v2 = *(void ***)a1;
  if (v2)
  {
    SIValueSet<unsigned int>::CombLevel_s::malloc_chain_s::chain_s::clear(v2, *(const __CFAllocator **)(a1 + 16), *(void *)(a1 + 8));
    CFAllocatorDeallocate(*(CFAllocatorRef *)(a1 + 16), *(void **)a1);
    *(void *)a1 = 0;
  }
  return a1;
}

void SIValueSet<unsigned int>::CombLevel_s::malloc_chain_s::chain_s::clear(void **a1, const __CFAllocator *a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  if (v6)
  {
    SIValueSet<unsigned int>::CombLevel_s::malloc_chain_s::chain_s::clear(v6, a2, 63);
    CFAllocatorDeallocate(a2, *a1);
    *a1 = 0;
  }
  if (a3)
  {
    uint64_t v7 = (uint64_t)(a1 + 1);
    do
    {
      SIValueSet<unsigned int>::_SIValueSetInnerDealloc(v7, a2);
      v7 += 128;
      --a3;
    }
    while (a3);
  }
}

void SIValueSet<unsigned int>::_SIValueSetInnerDealloc(uint64_t a1, const __CFAllocator *a2)
{
  for (uint64_t i = 0; i != 128; i += 8)
  {
    unint64_t v5 = *(void **)(a1 + i);
    if (v5)
    {
      if ((v5 & 1) == 0)
      {
        (*(void (**)(void))(*(void *)v5 + 72))(*(void *)(a1 + i));
        CFAllocatorDeallocate(a2, v5);
      }
      *(void *)(a1 + i) = 0;
    }
  }
}

uint64_t SIValueSet<unsigned int>::~SIValueSet(uint64_t a1)
{
  return a1;
}

double __SIUINT64SetInit(char *a1)
{
  CFAllocatorRef v2 = CFGetAllocator(a1);
  *((void *)a1 + 2) = 0;
  *((_DWORD *)a1 + 6) = 0;
  *((void *)a1 + 5) = 0;
  *((void *)a1 + 6) = v2;
  int v3 = CFAllocatorAllocate(v2, 8072, 0);
  bzero(v3, 0x1F88uLL);
  *((void *)a1 + 4) = v3;
  double result = 0.0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 12std::unique_ptr<SIResourcePool>::reset[abi:ne180100](this, 0) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  a1[184] = 1;
  return result;
}

uint64_t __SIUINT64SetFinalize(const void *a1)
{
  return SIValueSet<unsigned long long>::~SIValueSet((uint64_t)a1 + 16);
}

uint64_t SIValueSet<unsigned long long>::CombLevel_s::malloc_chain_s::~malloc_chain_s(uint64_t a1)
{
  CFAllocatorRef v2 = *(void ***)a1;
  if (v2)
  {
    SIValueSet<unsigned long long>::CombLevel_s::malloc_chain_s::chain_s::clear(v2, *(const __CFAllocator **)(a1 + 16), *(void *)(a1 + 8));
    CFAllocatorDeallocate(*(CFAllocatorRef *)(a1 + 16), *(void **)a1);
    *(void *)a1 = 0;
  }
  return a1;
}

void SIValueSet<unsigned long long>::CombLevel_s::malloc_chain_s::chain_s::clear(void **a1, const __CFAllocator *a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  if (v6)
  {
    SIValueSet<unsigned long long>::CombLevel_s::malloc_chain_s::chain_s::clear(v6, a2, 63);
    CFAllocatorDeallocate(a2, *a1);
    *a1 = 0;
  }
  if (a3)
  {
    uint64_t v7 = (uint64_t)(a1 + 1);
    do
    {
      SIValueSet<unsigned long long>::_SIValueSetInnerDealloc(v7, a2);
      v7 += 128;
      --a3;
    }
    while (a3);
  }
}

void SIValueSet<unsigned long long>::_SIValueSetInnerDealloc(uint64_t a1, const __CFAllocator *a2)
{
  for (uint64_t i = 0; i != 128; i += 8)
  {
    unint64_t v5 = *(void **)(a1 + i);
    if (v5)
    {
      if ((v5 & 1) == 0)
      {
        (*(void (**)(void))(*(void *)v5 + 72))(*(void *)(a1 + i));
        CFAllocatorDeallocate(a2, v5);
      }
      *(void *)(a1 + i) = 0;
    }
  }
}

uint64_t SIValueSet<unsigned long long>::~SIValueSet(uint64_t a1)
{
  return a1;
}

uint64_t SIValueSet<unsigned int>::_SIValueSetInnerContains(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t result = *(void *)(a1 + 8 * ((a2 >> (28 - 4 * a3)) & 0xF));
  if (result)
  {
    int v4 = a3 + 2;
    do
      uint64_t result = *(void *)((result & 0xFFFFFFFFFFFFFFFELL) + 8 * ((a2 >> (32 - 4 * v4++)) & 0xF));
    while ((result & 1) != 0);
  }
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 16))();
  }
  return result;
}

uint64_t SIValueSet<unsigned int>::CombLevel_s::malloc_chain_s::chain_alloc_level(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 == 63 || (int v3 = *(void **)a1) == 0)
  {
    int v3 = CFAllocatorAllocate(*(CFAllocatorRef *)(a1 + 16), 8072, 0);
    *int v3 = *(void *)a1;
    bzero(v3 + 1, 0x1F80uLL);
    uint64_t v2 = 0;
    *(void *)a1 = v3;
  }
  *(void *)(a1 + 8) = v2 + 1;
  return (uint64_t)&v3[16 * v2 + 1];
}

uint64_t SIValueSet<unsigned int>::_SIValueSetInnerInsert(unint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  int v5 = a3;
  unsigned __int16 v7 = 28 - 4 * a3;
  char v8 = 28 - 4 * a3;
  uint64_t v9 = (a2 >> v8) & 0xF;
  unint64_t v10 = *(void *)(a1 + 8 * v9);
  if (v10)
  {
    do
    {
      unint64_t v11 = v10 & 0xFFFFFFFFFFFFFFFELL;
      unsigned __int16 v7 = 24 - 4 * v5;
      char v8 = 24 - 4 * v5;
      uint64_t v9 = (a2 >> v8) & 0xF;
      unint64_t v10 = *(void *)((v10 & 0xFFFFFFFFFFFFFFFELL) + 8 * v9);
      ++v5;
    }
    while ((v10 & 1) != 0);
  }
  else
  {
    unint64_t v11 = a1;
  }
  if ((__int16)v7 < 13)
  {
    if (!v10)
    {
      unint64_t v10 = (unint64_t)CFAllocatorAllocate(*(CFAllocatorRef *)(a4 + 16), 520, 0);
      *(void *)unint64_t v10 = &unk_1F181D6E8;
      *(_OWORD *)(v10 + 24) = 0u;
      *(_OWORD *)(v10 + 4std::unique_ptr<SIResourcePool>::reset[abi:ne180100](this, 0) = 0u;
      *(_OWORD *)(v10 + 56) = 0u;
      *(_OWORD *)(v10 + 72) = 0u;
      *(_OWORD *)(v10 + 88) = 0u;
      *(_OWORD *)(v10 + 104) = 0u;
      *(_OWORD *)(v10 + 12std::unique_ptr<SIResourcePool>::reset[abi:ne180100](this, 0) = 0u;
      *(_OWORD *)(v10 + 136) = 0u;
      *(_OWORD *)(v10 + 152) = 0u;
      *(_OWORD *)(v10 + 168) = 0u;
      *(_OWORD *)(v10 + 184) = 0u;
      *(_OWORD *)(v10 + 20std::unique_ptr<SIResourcePool>::reset[abi:ne180100](this, 0) = 0u;
      *(_OWORD *)(v10 + 216) = 0u;
      *(_OWORD *)(v10 + 232) = 0u;
      *(_OWORD *)(v10 + 248) = 0u;
      *(_OWORD *)(v10 + 8) = 0u;
      *(_OWORD *)(v10 + 264) = 0u;
      *(_OWORD *)(v10 + 28std::unique_ptr<SIResourcePool>::reset[abi:ne180100](this, 0) = 0u;
      *(_OWORD *)(v10 + 296) = 0u;
      *(_OWORD *)(v10 + 312) = 0u;
      *(_OWORD *)(v10 + 328) = 0u;
      *(_OWORD *)(v10 + 344) = 0u;
      *(_OWORD *)(v10 + 36std::unique_ptr<SIResourcePool>::reset[abi:ne180100](this, 0) = 0u;
      *(_OWORD *)(v10 + 376) = 0u;
      *(_OWORD *)(v10 + 392) = 0u;
      *(_OWORD *)(v10 + 408) = 0u;
      *(_OWORD *)(v10 + 424) = 0u;
      *(_OWORD *)(v10 + 44std::unique_ptr<SIResourcePool>::reset[abi:ne180100](this, 0) = 0u;
      *(_OWORD *)(v10 + 456) = 0u;
      *(_OWORD *)(v10 + 472) = 0u;
      *(_OWORD *)(v10 + 488) = 0u;
      *(_OWORD *)(v10 + 504) = 0u;
      *(void *)(v11 + 8 * v9) = v10;
    }
    int v13 = a2 & ~(-1 << v8);
    int v14 = (__int16)v13 >> 6;
    uint64_t v15 = 1 << v13;
    long long v16 = (char *)(v10 + 8 * (__int16)v14);
    uint64_t v19 = *((void *)v16 + 1);
    long long v17 = (uint64_t *)(v16 + 8);
    uint64_t v18 = v19;
    if ((v19 & v15) != 0)
    {
      return 0;
    }
    else
    {
      *long long v17 = v18 | v15;
      return 1;
    }
  }
  else
  {
    if (v10)
    {
      uint64_t v12 = *(uint64_t (***)(unint64_t, uint64_t, void))v10;
    }
    else
    {
      if (v7 < 0x20u)
      {
        CFAllocatorRef v21 = *(const __CFAllocator **)(a4 + 16);
        if (v7 < 0x10u)
        {
          unint64_t v10 = (unint64_t)CFAllocatorAllocate(v21, 136, 0);
          uint64_t v12 = (uint64_t (**)(unint64_t, uint64_t, void))&unk_1F181D828;
          *(void *)unint64_t v10 = &unk_1F181D828;
          *(_OWORD *)(v10 + 8) = 0u;
          *(_OWORD *)(v10 + 24) = 0u;
          *(_OWORD *)(v10 + 4std::unique_ptr<SIResourcePool>::reset[abi:ne180100](this, 0) = 0u;
          *(_OWORD *)(v10 + 56) = 0u;
          *(_OWORD *)(v10 + 72) = 0u;
          *(_OWORD *)(v10 + 88) = 0u;
          *(_OWORD *)(v10 + 104) = 0u;
          *(_OWORD *)(v10 + 12std::unique_ptr<SIResourcePool>::reset[abi:ne180100](this, 0) = 0u;
        }
        else
        {
          unint64_t v10 = (unint64_t)CFAllocatorAllocate(v21, 264, 0);
          uint64_t v12 = (uint64_t (**)(unint64_t, uint64_t, void))&unk_1F181D788;
          *(void *)unint64_t v10 = &unk_1F181D788;
          *(_OWORD *)(v10 + 8) = 0u;
          *(_OWORD *)(v10 + 24) = 0u;
          *(_OWORD *)(v10 + 4std::unique_ptr<SIResourcePool>::reset[abi:ne180100](this, 0) = 0u;
          *(_OWORD *)(v10 + 56) = 0u;
          *(_OWORD *)(v10 + 72) = 0u;
          *(_OWORD *)(v10 + 88) = 0u;
          *(_OWORD *)(v10 + 104) = 0u;
          *(_OWORD *)(v10 + 12std::unique_ptr<SIResourcePool>::reset[abi:ne180100](this, 0) = 0u;
          *(_OWORD *)(v10 + 136) = 0u;
          *(_OWORD *)(v10 + 152) = 0u;
          *(_OWORD *)(v10 + 168) = 0u;
          *(_OWORD *)(v10 + 184) = 0u;
          *(_OWORD *)(v10 + 20std::unique_ptr<SIResourcePool>::reset[abi:ne180100](this, 0) = 0u;
          *(_OWORD *)(v10 + 216) = 0u;
          *(_OWORD *)(v10 + 232) = 0u;
          *(_OWORD *)(v10 + 248) = 0u;
        }
      }
      else
      {
        unint64_t v10 = (unint64_t)CFAllocatorAllocate(*(CFAllocatorRef *)(a4 + 16), 520, 0);
        uint64_t v12 = (uint64_t (**)(unint64_t, uint64_t, void))&unk_1F181D8C8;
        *(void *)unint64_t v10 = &unk_1F181D8C8;
        *(_OWORD *)(v10 + 24) = 0u;
        *(_OWORD *)(v10 + 4std::unique_ptr<SIResourcePool>::reset[abi:ne180100](this, 0) = 0u;
        *(_OWORD *)(v10 + 56) = 0u;
        *(_OWORD *)(v10 + 72) = 0u;
        *(_OWORD *)(v10 + 88) = 0u;
        *(_OWORD *)(v10 + 104) = 0u;
        *(_OWORD *)(v10 + 12std::unique_ptr<SIResourcePool>::reset[abi:ne180100](this, 0) = 0u;
        *(_OWORD *)(v10 + 136) = 0u;
        *(_OWORD *)(v10 + 152) = 0u;
        *(_OWORD *)(v10 + 168) = 0u;
        *(_OWORD *)(v10 + 184) = 0u;
        *(_OWORD *)(v10 + 20std::unique_ptr<SIResourcePool>::reset[abi:ne180100](this, 0) = 0u;
        *(_OWORD *)(v10 + 216) = 0u;
        *(_OWORD *)(v10 + 232) = 0u;
        *(_OWORD *)(v10 + 248) = 0u;
        *(_OWORD *)(v10 + 8) = 0u;
        *(_OWORD *)(v10 + 264) = 0u;
        *(_OWORD *)(v10 + 28std::unique_ptr<SIResourcePool>::reset[abi:ne180100](this, 0) = 0u;
        *(_OWORD *)(v10 + 296) = 0u;
        *(_OWORD *)(v10 + 312) = 0u;
        *(_OWORD *)(v10 + 328) = 0u;
        *(_OWORD *)(v10 + 344) = 0u;
        *(_OWORD *)(v10 + 36std::unique_ptr<SIResourcePool>::reset[abi:ne180100](this, 0) = 0u;
        *(_OWORD *)(v10 + 376) = 0u;
        *(_OWORD *)(v10 + 392) = 0u;
        *(_OWORD *)(v10 + 408) = 0u;
        *(_OWORD *)(v10 + 424) = 0u;
        *(_OWORD *)(v10 + 44std::unique_ptr<SIResourcePool>::reset[abi:ne180100](this, 0) = 0u;
        *(_OWORD *)(v10 + 456) = 0u;
        *(_OWORD *)(v10 + 472) = 0u;
        *(_OWORD *)(v10 + 488) = 0u;
        *(_OWORD *)(v10 + 504) = 0u;
      }
      *(void *)(v11 + 8 * v9) = v10;
    }
    uint64_t v20 = (*v12)(v10, a2, ~(-1 << v8));
    if ((unint64_t)(*(uint64_t (**)(unint64_t))(*(void *)v10 + 56))(v10) >= 0x3E) {
      *(void *)(v11 + 8 * v9) = SIValueSet<unsigned int>::_SIValueSetBurstRLE((void *)v10, v5, a4);
    }
  }
  return v20;
}

uint64_t SIValueSet<unsigned int>::_SIValueSetBurstRLE(void *a1, int a2, uint64_t a3)
{
  uint64_t v6 = (_OWORD *)SIValueSet<unsigned int>::CombLevel_s::malloc_chain_s::chain_alloc_level(a3);
  unint64_t v7 = (unint64_t)v6;
  uint64_t v8 = 0;
  *uint64_t v6 = 0u;
  v6[1] = 0u;
  gid_t v6[2] = 0u;
  void v6[3] = 0u;
  v6[4] = 0u;
  void v6[5] = 0u;
  v6[6] = 0u;
  v6[7] = 0u;
  v11[0] = v6;
  v11[1] = (a2 + 1);
  v11[2] = a3;
  do
  {
    if (*(void *)((char *)v6 + v8)) {
      SIValueSet<unsigned int>::_SIValueSetBurstRLE();
    }
    v8 += 8;
  }
  while (v8 != 128);
  int v9 = 32 - 4 * (a2 + 1);
  if (v9 <= 31)
  {
    if (v9 < 16) {
      SIValueSet<unsigned int>::RLEKeyHolder<unsigned short>::Apply((uint64_t)a1, 128, 0, (void (*)(char *, uint64_t, uint64_t))SIValueSet<unsigned int>::applyFun, (uint64_t)v11);
    }
    else {
      SIValueSet<unsigned int>::RLEKeyHolder<unsigned int>::Apply((uint64_t)a1, 128, 0, (void (*)(char *, uint64_t, uint64_t))SIValueSet<unsigned int>::applyFun, (uint64_t)v11);
    }
  }
  else
  {
    SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::Apply((uint64_t)a1, 128, 0, (void (*)(char *, uint64_t, uint64_t))SIValueSet<unsigned int>::applyFun, (uint64_t)v11);
  }
  (*(void (**)(void *))(*(void *)a1 + 72))(a1);
  CFAllocatorDeallocate(*(CFAllocatorRef *)(a3 + 16), a1);
  return v7 | 1;
}

BOOL SIValueSet<unsigned int>::BitmapHolder::AddKey(uint64_t a1, int a2, int a3)
{
  uint64_t v3 = 1 << (a3 & a2);
  uint64_t v4 = a1 + ((uint64_t)((unint64_t)((a3 & a2) << 16 >> 22) << 48) >> 45);
  uint64_t v7 = *(void *)(v4 + 8);
  int v5 = (uint64_t *)(v4 + 8);
  uint64_t v6 = v7;
  uint64_t v8 = v7 & v3;
  if ((v7 & v3) == 0) {
    *int v5 = v6 | v3;
  }
  return v8 == 0;
}

BOOL SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::AddKey(uint64_t a1, int a2, int a3)
{
  int v5 = a3 & a2;
  v4[0] = (unsigned int *)&v5;
  v4[1] = (unsigned int *)&vars0;
  return SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::AddSortedValuesWithContext<SIValueSet<unsigned int>::FlatContext,SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::InertContext>(a1, v4) != 0;
}

uint64_t SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::ContainsKey(uint64_t a1, unsigned int a2, int a3)
{
  unint64_t v3 = a3 & a2;
  uint64_t v4 = (unsigned int *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 8);
  unint64_t v6 = a1 + 16 + 8 * v5;
  uint64_t v7 = 8 * v5;
  if (v5 >= 1 && (unint64_t)v7 >= 0x18)
  {
    unint64_t v9 = a1 + 16 + 8 * v5;
    do
    {
      unint64_t v10 = &v4[2 * (v7 >> 4)];
      unint64_t v11 = *(void *)v10;
      if ((*(void *)v10 & 0x8000000000000000) != 0)
      {
        unint64_t v12 = *((void *)v10 - 1);
        v10 -= 2;
        unint64_t v11 = v12;
      }
      if (v10 <= v4) {
        break;
      }
      if (v11 == v3)
      {
        uint64_t v4 = v10;
        goto LABEL_20;
      }
      if (v11 > v3) {
        unint64_t v9 = (unint64_t)v10;
      }
      else {
        uint64_t v4 = v10;
      }
      uint64_t v7 = v9 - (void)v4;
    }
    while (v9 > (unint64_t)v4 && (unint64_t)v7 > 0x17);
  }
  while (1)
  {
LABEL_20:
    if ((unint64_t)v4 >= v6) {
      return 0;
    }
    unsigned int v14 = *v4;
    if (v3 == *v4) {
      break;
    }
    v4 += 2;
    if (v3 < v14) {
      return 0;
    }
  }
  return 1;
}

unint64_t SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::CloseKey(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    return 0;
  }
  unint64_t result = a3 & a2;
  unint64_t v6 = (unsigned int *)(a1 + 16);
  unint64_t v7 = 8 * v3;
  if (v3 >= 1 && v7 >= 0x18)
  {
    uint64_t v9 = 8 * v3;
    unint64_t v10 = a1 + 16 + 8 * v3;
    do
    {
      unint64_t v11 = &v6[2 * (v9 >> 4)];
      unint64_t v12 = *(void *)v11;
      if ((*(void *)v11 & 0x8000000000000000) != 0)
      {
        unint64_t v13 = *((void *)v11 - 1);
        v11 -= 2;
        unint64_t v12 = v13;
      }
      if (v11 <= v6) {
        break;
      }
      if (v12 == result)
      {
        unint64_t v6 = v11;
        break;
      }
      if (v12 > result) {
        unint64_t v10 = (unint64_t)v11;
      }
      else {
        unint64_t v6 = v11;
      }
      uint64_t v9 = v10 - (void)v6;
    }
    while (v10 > (unint64_t)v6 && (unint64_t)v9 > 0x17);
  }
  while ((unint64_t)v6 < a1 + 16 + 8 * v3)
  {
    uint64_t v15 = *v6;
    if (result == v15) {
      return result;
    }
    v6 += 2;
    if (result < v15) {
      return v15;
    }
  }
  unint64_t result = *(void *)(a1 + 8 * v3 + 8);
  if ((result & 0x8000000000000000) != 0) {
    return (*(_DWORD *)(v7 + a1) + result);
  }
  return result;
}

uint64_t SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::RemoveKey(uint64_t a1, unsigned int a2, int a3)
{
  unint64_t v4 = a3 & a2;
  uint64_t v5 = (unint64_t *)(a1 + 16);
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = a1 + 16 + 8 * v6;
  uint64_t v8 = 8 * v6;
  if (v6 >= 1 && (unint64_t)v8 >= 0x18)
  {
    unint64_t v10 = a1 + 16 + 8 * v6;
    do
    {
      unint64_t v11 = &v5[v8 >> 4];
      unint64_t v12 = *v11;
      if ((*v11 & 0x8000000000000000) != 0)
      {
        unint64_t v13 = *--v11;
        unint64_t v12 = v13;
      }
      if (v11 <= v5) {
        break;
      }
      if (v12 == v4)
      {
        uint64_t v5 = v11;
        break;
      }
      if (v12 > v4) {
        unint64_t v10 = (unint64_t)v11;
      }
      else {
        uint64_t v5 = v11;
      }
      uint64_t v8 = v10 - (void)v5;
    }
    while (v10 > (unint64_t)v5 && (unint64_t)v8 > 0x17);
  }
  if ((unint64_t)v5 >= v7) {
    return 0;
  }
  uint64_t v15 = v5 + 1;
  unint64_t v16 = *v5;
  if (*v5 != v4)
  {
    uint64_t v17 = 0;
    while (1)
    {
      uint64_t v18 = &v5[v17 + 1];
      if ((v16 & 0x8000000000000000) != 0)
      {
        unint64_t v20 = v5[v17 - 1];
        unint64_t v21 = v20 + (v16 & 0x7FFFFFFFFFFFFFFFLL);
        if (v20 < v4 && v21 >= v4)
        {
          uint64_t v25 = &v5[v17];
          unint64_t v26 = &v5[v17 + 1];
          if ((v16 & 0x7FFFFFFFFFFFFFFFLL) == 1)
          {
            if ((unint64_t)v26 < v7)
            {
              size_t v24 = a1 + 8 * v6 - (void)v5 - v17 * 8 + 8;
              uint64_t v15 = &v5[v17 + 1];
LABEL_44:
              memmove(v25, v15, v24);
              uint64_t v6 = *(void *)(a1 + 8);
            }
            *(void *)(a1 + 8) = v6 - 1;
            return 1;
          }
          if (v21 == v4)
          {
            unint64_t *v25 = (v16 - 1) | 0x8000000000000000;
            return 1;
          }
          if (v20 + 1 == v4)
          {
            unint64_t *v25 = v4 + 1;
            unint64_t v27 = v21 + ~v4;
            if (!v27) {
              return 1;
            }
            unint64_t v28 = *(void *)(a1 + 8);
            if (v28 >= 0x3F) {
              SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::RemoveKey();
            }
            uint64_t v29 = (uint64_t)&v5[v17 - 1] - a1;
            uint64_t v30 = v29 >> 3;
            if (v28 != v29 >> 3)
            {
              unint64_t v31 = v28 - (v29 >> 3);
              __int16 v32 = &v5[v17 + 2];
              goto LABEL_63;
            }
          }
          else
          {
            v5[v17] = ((v4 - 1) - v20) | 0x8000000000000000;
            unint64_t v33 = *(void *)(a1 + 8);
            if (v33 >= 0x3F) {
              SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::RemoveKey();
            }
            __int16 v34 = (char *)v5 - a1;
            uint64_t v35 = (uint64_t)&v5[v17 - 1] - a1;
            uint64_t v36 = v35 >> 3;
            if (v33 != v35 >> 3)
            {
              memmove(&v5[v17 + 2], &v5[v17 + 1], 8 * (v33 - (v35 >> 3)));
              uint64_t v36 = *(void *)(a1 + 8);
            }
            *(void *)(a1 + 8) = v36 + 1;
            *unint64_t v26 = (v4 + 1);
            unint64_t v27 = v21 + ~v4;
            if (!v27) {
              return 1;
            }
            unint64_t v37 = *(void *)(a1 + 8);
            if (v37 >= 0x3F) {
              SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::RemoveKey();
            }
            unint64_t v26 = &v5[v17 + 2];
            uint64_t v30 = (uint64_t)&v34[v17 * 8] >> 3;
            if (v37 != v30)
            {
              unint64_t v31 = v37 - ((uint64_t)&v34[v17 * 8] >> 3);
              __int16 v32 = &v5[v17 + 3];
LABEL_63:
              memmove(v32, v26, 8 * v31);
              uint64_t v30 = *(void *)(a1 + 8);
            }
          }
          *(void *)(a1 + 8) = v30 + 1;
          *unint64_t v26 = v27 | 0x8000000000000000;
          return 1;
        }
        if ((unint64_t)v18 >= v7) {
          return 0;
        }
      }
      else
      {
        uint64_t result = 0;
        if (v16 > v4 || (unint64_t)v18 >= v7) {
          return result;
        }
      }
      unint64_t v16 = *v18;
      ++v17;
      if (*v18 == v4)
      {
        uint64_t v5 = (unint64_t *)((char *)v5 + v17 * 8);
        uint64_t v15 = v5 + 1;
        break;
      }
    }
  }
  if ((unint64_t)v15 >= v7)
  {
    *(void *)(a1 + 8) = v6 - 1;
  }
  else
  {
    unint64_t v23 = *v15;
    if ((*v15 & 0x8000000000000000) == 0)
    {
      size_t v24 = v7 - (void)v15;
      uint64_t v25 = v5;
      goto LABEL_44;
    }
    *uint64_t v5 = v4 + 1;
    if ((v23 & 0x7FFFFFFFFFFFFFFFLL) == 1)
    {
      size_t v24 = v7 - (void)(v5 + 2);
      uint64_t v25 = v15;
      uint64_t v15 = v5 + 2;
      goto LABEL_44;
    }
    *uint64_t v15 = (v23 - 1) | 0x8000000000000000;
  }
  return 1;
}

void SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::Apply(uint64_t a1, uint64_t a2, int a3, void (*a4)(char *, uint64_t, uint64_t), uint64_t a5)
{
  v19[1] = *MEMORY[0x1E4F143B8];
  uint64_t v9 = MEMORY[0x1F4188790](a1);
  unint64_t v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v12 = *(void *)(v9 + 8);
  if (v12 > 0x3F) {
    return;
  }
  unint64_t v13 = (uint64_t *)(v9 + 16);
  unint64_t v14 = v9 + 16 + 8 * v12;
  bzero((char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v10);
  LODWORD(v15) = 0;
  uint64_t v16 = 0;
LABEL_3:
  uint64_t v17 = 0;
  while (v16)
  {
    --v16;
    LODWORD(v15) = v15 + 1;
LABEL_15:
    *(_DWORD *)&v11[4 * v17++] = v15 | a3;
    if (v17 == a2)
    {
      a4(v11, a2, a5);
      goto LABEL_3;
    }
  }
  if ((unint64_t)v13 < v14)
  {
    uint64_t v18 = v13 + 1;
    uint64_t v15 = *v13;
    if ((unint64_t)(v13 + 1) >= v14)
    {
      uint64_t v16 = 0;
      ++v13;
    }
    else
    {
      if (*v18 < 0) {
        v13 += 2;
      }
      else {
        ++v13;
      }
      if (*v18 < 0) {
        uint64_t v16 = *v18 & 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        uint64_t v16 = 0;
      }
    }
    goto LABEL_15;
  }
  if (v17) {
    a4(v11, v17, a5);
  }
}

BOOL SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::IsEmpty(uint64_t a1)
{
  return *(void *)(a1 + 8) == 0;
}

uint64_t SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::GetRawCount(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::Serialize(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 8))(a2, 8);
  (*(void (**)(uint64_t, void))(*(void *)a2 + 8))(a2, *(unsigned int *)(a1 + 8));
  uint64_t v4 = 8 * *(void *)(a1 + 8);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 16);

  return v5(a2, a1 + 16, v4);
}

void SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::~RLEKeyHolder()
{
}

uint64_t SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::valueIterator(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  *(void *)a3 = &unk_1F181D898;
  *(void *)(a3 + 8) = a1 + 16;
  *(void *)(a3 + 16) = a1 + 16 + 8 * v3;
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  *(_DWORD *)(a3 + 4std::unique_ptr<SIResourcePool>::reset[abi:ne180100](this, 0) = a2;
  return a3;
}

uint64_t SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::AddSortedValuesWithContext<SIValueSet<unsigned int>::FlatContext,SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::InertContext>(uint64_t a1, unsigned int **a2)
{
  if (*a2 >= a2[1]) {
    return 0;
  }
  unint64_t v3 = **a2;
  uint64_t v4 = (unint64_t *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 8);
  unint64_t v6 = a1 + 16 + 8 * v5;
  uint64_t v7 = 8 * v5;
  BOOL v8 = v5 >= 1 && (unint64_t)v7 >= 0x18;
  uint64_t v42 = a1 + 16;
  if (v8)
  {
    unint64_t v9 = a1 + 16 + 8 * v5;
    do
    {
      size_t v10 = &v4[v7 >> 4];
      unint64_t v11 = *v10;
      if ((*v10 & 0x8000000000000000) != 0)
      {
        unint64_t v12 = *--v10;
        unint64_t v11 = v12;
      }
      if (v10 <= v4) {
        break;
      }
      if (v11 == v3)
      {
        uint64_t v4 = v10;
        break;
      }
      if (v11 > v3) {
        unint64_t v9 = (unint64_t)v10;
      }
      else {
        uint64_t v4 = v10;
      }
      uint64_t v7 = v9 - (void)v4;
    }
    while (v9 > (unint64_t)v4 && (unint64_t)v7 > 0x17);
  }
  int v15 = 0;
  uint64_t v14 = 0;
  unint64_t v16 = a1 + 520;
  uint64_t v17 = v4;
  int v18 = 1;
  unint64_t v44 = a1 + 520;
  while (2)
  {
    unint64_t v19 = 0;
    uint64_t v20 = 0;
    unint64_t v21 = v4;
    while (1)
    {
      uint64_t v22 = v20;
      while ((unint64_t)v21 >= v6 || v3 < *v21)
      {
        if (v22)
        {
          int v23 = 1;
          if (v22 + v19 < v3 || v3 + 1 < v19) {
            goto LABEL_43;
          }
          uint64_t v24 = v22 + v19 - 1;
          BOOL v25 = v19 > v3;
          BOOL v26 = v19 > v3;
          if (v19 >= v3) {
            unint64_t v19 = v3;
          }
          if (v25) {
            uint64_t v22 = v24;
          }
          if (v3 < v22 + v19)
          {
            uint64_t v27 = v26;
          }
          else
          {
            uint64_t v22 = v3 + 1 - v19;
            uint64_t v27 = 1;
          }
        }
        else
        {
          unint64_t v19 = v3;
          uint64_t v22 = 1;
          uint64_t v27 = 1;
        }
        unint64_t v28 = *a2 + 1;
        uint64_t v29 = **a2;
        *a2 = v28;
        if (v3 != v29) {
          SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::AddSortedValuesWithContext<SIValueSet<unsigned int>::FlatContext,SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::InertContext>();
        }
        v14 += v27;
        if (v28 >= a2[1])
        {
          int v23 = 0;
          ++v15;
          goto LABEL_43;
        }
        unint64_t v3 = *v28;
        ++v18;
        ++v15;
      }
      int v23 = 1;
LABEL_43:
      if ((unint64_t)v21 >= v6) {
        break;
      }
      unint64_t v30 = *v21;
      if ((unint64_t)(v21 + 1) >= v6)
      {
        uint64_t v32 = 1;
        uint64_t v20 = 1;
        if (!v22) {
          goto LABEL_62;
        }
      }
      else
      {
        uint64_t v31 = v21[1];
        if (v31 < 0) {
          uint64_t v32 = 2;
        }
        else {
          uint64_t v32 = 1;
        }
        if (v31 < 0) {
          uint64_t v20 = (v31 & 0x7FFFFFFFFFFFFFFFLL) + 1;
        }
        else {
          uint64_t v20 = 1;
        }
        if (!v22)
        {
LABEL_62:
          unint64_t v19 = *v21;
          goto LABEL_63;
        }
      }
      if (v22 + v19 < v30) {
        break;
      }
      unint64_t v33 = v20 + v30;
      if (v20 + v30 < v19) {
        break;
      }
      uint64_t v34 = v22 + v19 - v20;
      BOOL v35 = v19 > v30;
      if (v19 >= v30) {
        unint64_t v19 = *v21;
      }
      if (v35) {
        uint64_t v22 = v34;
      }
      if (v33 > v22 + v19) {
        uint64_t v20 = v33 - v19;
      }
      else {
        uint64_t v20 = v22;
      }
LABEL_63:
      v21 += v32;
      if (v3 <= v20 + v19) {
        char v36 = v23;
      }
      else {
        char v36 = 0;
      }
      if ((v36 & 1) == 0) {
        goto LABEL_69;
      }
    }
    uint64_t v20 = v22;
LABEL_69:
    uint64_t v37 = v20 - 1;
    if (v20 == 1)
    {
      if (v17 >= v21)
      {
        if (v6 + 16 > v16) {
          SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::AddSortedValuesWithContext<SIValueSet<unsigned int>::FlatContext,SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::InertContext>();
        }
        uint64_t v4 = (unint64_t *)(v16 - (v6 - (void)v21));
        if ((unint64_t *)v6 != v21)
        {
          memmove((void *)(v16 - (v6 - (void)v21)), v21, v6 - (void)v21);
          unint64_t v16 = v44;
        }
        unint64_t v6 = v16;
      }
      else
      {
        uint64_t v4 = v21;
      }
      *uint64_t v17 = v19;
LABEL_85:
      ++v17;
      if (v23)
      {
        if ((unint64_t)v17 + v6 - (void)v4 + 16 > v16) {
          goto LABEL_91;
        }
        continue;
      }
      unint64_t v21 = v4;
    }
    else
    {
      if (v20)
      {
        char v38 = v17 + 1;
        if (v17 + 1 >= v21)
        {
          if (v6 + 16 > v16) {
            SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::AddSortedValuesWithContext<SIValueSet<unsigned int>::FlatContext,SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::InertContext>();
          }
          uint64_t v4 = (unint64_t *)(v16 - (v6 - (void)v21));
          if ((unint64_t *)v6 != v21)
          {
            uint64_t v43 = v37;
            memmove((void *)(v16 - (v6 - (void)v21)), v21, v6 - (void)v21);
            uint64_t v37 = v43;
            char v38 = v17 + 1;
            unint64_t v16 = v44;
          }
          unint64_t v6 = v16;
        }
        else
        {
          uint64_t v4 = v21;
        }
        *uint64_t v17 = v19;
        v17[1] = v37 | 0x8000000000000000;
        uint64_t v17 = v38;
        goto LABEL_85;
      }
      uint64_t v4 = v21;
      if (v23)
      {
LABEL_91:
        if (v15 >= v18) {
          SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::AddSortedValuesWithContext<SIValueSet<unsigned int>::FlatContext,SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::InertContext>();
        }
        goto LABEL_94;
      }
    }
    break;
  }
  uint64_t v4 = v21;
  if (v15 != v18) {
    SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::AddSortedValuesWithContext<SIValueSet<unsigned int>::FlatContext,SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::InertContext>();
  }
LABEL_94:
  unint64_t v39 = v6 - (void)v4;
  if (v6 > (unint64_t)v4)
  {
    memmove(v17, v4, v6 - (void)v4);
    uint64_t v17 = (unint64_t *)((char *)v17 + v39);
  }
  *(void *)(a1 + 8) = ((uint64_t)v17 - v42) >> 3;
  return v14;
}

uint64_t SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::AddSortedValuesWithContext<SIValueSet<unsigned int>::FlatContextWithPfx,SIValueSet<unsigned int>::CollectorContext>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)a2 >= *(void *)(a2 + 8) || (*(_DWORD *)(a2 + 20) & **(_DWORD **)a2) != *(_DWORD *)(a2 + 16)) {
    return 0;
  }
  unsigned int v5 = SIValueSet<unsigned int>::FlatContextWithPfx::peek((int **)a2);
  unint64_t v6 = v5;
  uint64_t v7 = *(void *)(a1 + 8);
  unint64_t v8 = a1 + 16 + 8 * v7;
  uint64_t v9 = 8 * v7;
  if (v7 >= 1 && (unint64_t)v9 >= 0x18)
  {
    unint64_t v14 = a1 + 16 + 8 * v7;
    unint64_t v11 = (unint64_t *)(a1 + 16);
    do
    {
      int v15 = &v11[v9 >> 4];
      unint64_t v16 = *v15;
      if ((*v15 & 0x8000000000000000) != 0)
      {
        unint64_t v17 = *--v15;
        unint64_t v16 = v17;
      }
      if (v15 <= v11) {
        break;
      }
      if (v16 == v5)
      {
        unint64_t v11 = v15;
        break;
      }
      if (v16 > v5) {
        unint64_t v14 = (unint64_t)v15;
      }
      else {
        unint64_t v11 = v15;
      }
      uint64_t v9 = v14 - (void)v11;
    }
    while (v14 > (unint64_t)v11 && (unint64_t)v9 > 0x17);
  }
  else
  {
    unint64_t v11 = (unint64_t *)(a1 + 16);
  }
  uint64_t v48 = a1;
  uint64_t v49 = a1 + 16;
  int v19 = 0;
  uint64_t v12 = 0;
  unint64_t v20 = a1 + 520;
  unint64_t v21 = v11;
  int v22 = 1;
  unint64_t v50 = v20;
  while (2)
  {
    unint64_t v51 = v21;
    unint64_t v23 = 0;
    uint64_t v24 = 0;
    BOOL v25 = v11;
    while (1)
    {
      uint64_t v26 = v24;
      while ((unint64_t)v25 >= v8 || v6 < *v25)
      {
        if (v26)
        {
          int v27 = 1;
          if (v26 + v23 < v6 || v6 + 1 < v23) {
            goto LABEL_54;
          }
          uint64_t v28 = v26 + v23 - 1;
          BOOL v29 = v23 > v6;
          BOOL v30 = v23 > v6;
          if (v23 >= v6) {
            unint64_t v23 = v6;
          }
          if (!v29) {
            uint64_t v28 = v26;
          }
          if (v6 >= v28 + v23) {
            uint64_t v26 = v6 + 1 - v23;
          }
          else {
            uint64_t v26 = v28;
          }
          int v31 = v6 >= v28 + v23 || v30;
        }
        else
        {
          uint64_t v26 = 1;
          unint64_t v23 = v6;
          int v31 = 1;
        }
        if (v6 != SIValueSet<unsigned int>::FlatContextWithPfx::nextKey((int **)a2)) {
          SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::AddSortedValuesWithContext<SIValueSet<unsigned int>::FlatContext,SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::InertContext>();
        }
        if (v31)
        {
          ++v12;
        }
        else if (a3)
        {
          SIValueSet<unsigned int>::SIValueSetInsert(*(unsigned int **)(a3 + 8), *(_DWORD *)a3 | v6);
        }
        if (*(void *)a2 >= *(void *)(a2 + 8))
        {
          int v27 = 0;
          ++v19;
          goto LABEL_54;
        }
        ++v19;
        if ((*(_DWORD *)(a2 + 20) & **(_DWORD **)a2) != *(_DWORD *)(a2 + 16))
        {
          int v27 = 0;
          goto LABEL_54;
        }
        unint64_t v6 = SIValueSet<unsigned int>::FlatContextWithPfx::peek((int **)a2);
        ++v22;
      }
      int v27 = 1;
LABEL_54:
      if ((unint64_t)v25 >= v8) {
        break;
      }
      unint64_t v32 = *v25;
      if ((unint64_t)(v25 + 1) >= v8)
      {
        uint64_t v36 = 1;
        uint64_t v24 = 1;
        if (!v26) {
          goto LABEL_70;
        }
      }
      else
      {
        int64_t v33 = v25[1];
        uint64_t v34 = v33 & 0x7FFFFFFFFFFFFFFFLL;
        BOOL v35 = v33 >= 0;
        uint64_t v24 = 1;
        uint64_t v36 = 2;
        if (v35) {
          uint64_t v36 = 1;
        }
        else {
          uint64_t v24 = v34 + 1;
        }
        if (!v26)
        {
LABEL_70:
          unint64_t v23 = *v25;
          goto LABEL_71;
        }
      }
      if (v26 + v23 < v32) {
        break;
      }
      unint64_t v37 = v24 + v32;
      if (v24 + v32 < v23) {
        break;
      }
      uint64_t v24 = v26 + v23 - v24;
      BOOL v38 = v23 > v32;
      if (v23 >= v32) {
        unint64_t v23 = *v25;
      }
      if (!v38) {
        uint64_t v24 = v26;
      }
      if (v37 > v24 + v23) {
        uint64_t v24 = v37 - v23;
      }
LABEL_71:
      v25 += v36;
      if (v6 <= v24 + v23) {
        char v39 = v27;
      }
      else {
        char v39 = 0;
      }
      if ((v39 & 1) == 0) {
        goto LABEL_77;
      }
    }
    uint64_t v24 = v26;
LABEL_77:
    uint64_t v40 = v24 - 1;
    if (v24 == 1)
    {
      unint64_t v41 = v50;
      uint64_t v43 = v51;
      if (v51 >= v25)
      {
        if (v8 + 16 > v50) {
          SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::AddSortedValuesWithContext<SIValueSet<unsigned int>::FlatContext,SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::InertContext>();
        }
        unint64_t v11 = (unint64_t *)(v50 - (v8 - (void)v25));
        if ((unint64_t *)v8 != v25)
        {
          memmove((void *)(v50 - (v8 - (void)v25)), v25, v8 - (void)v25);
          unint64_t v11 = (unint64_t *)(v50 - (v8 - (void)v25));
          unint64_t v41 = v50;
          uint64_t v43 = v51;
        }
        unint64_t v8 = v41;
      }
      else
      {
        unint64_t v11 = v25;
      }
      *uint64_t v43 = v23;
LABEL_93:
      unint64_t v21 = v43 + 1;
      if (v27)
      {
        if ((unint64_t)v21 + v8 - (void)v11 + 16 > v41) {
          goto LABEL_99;
        }
        continue;
      }
      BOOL v25 = v11;
    }
    else
    {
      unint64_t v41 = v50;
      unint64_t v21 = v51;
      if (v24)
      {
        uint64_t v42 = v51 + 1;
        if (v51 + 1 >= v25)
        {
          if (v8 + 16 > v50) {
            SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::AddSortedValuesWithContext<SIValueSet<unsigned int>::FlatContext,SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::InertContext>();
          }
          unint64_t v11 = (unint64_t *)(v50 - (v8 - (void)v25));
          size_t v44 = v8 - (void)v25;
          if ((unint64_t *)v8 != v25)
          {
            int v45 = (void *)(v50 - (v8 - (void)v25));
            memmove(v45, v25, v44);
            uint64_t v42 = v51 + 1;
            unint64_t v11 = (unint64_t *)v45;
            unint64_t v41 = v50;
            unint64_t v21 = v51;
          }
          unint64_t v8 = v41;
        }
        else
        {
          unint64_t v11 = v25;
        }
        *unint64_t v21 = v23;
        v21[1] = v40 | 0x8000000000000000;
        uint64_t v43 = v42;
        goto LABEL_93;
      }
      unint64_t v11 = v25;
      if (v27)
      {
LABEL_99:
        if (v19 >= v22) {
          SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::AddSortedValuesWithContext<SIValueSet<unsigned int>::FlatContext,SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::InertContext>();
        }
        goto LABEL_102;
      }
    }
    break;
  }
  unint64_t v11 = v25;
  if (v19 != v22) {
    SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::AddSortedValuesWithContext<SIValueSet<unsigned int>::FlatContext,SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::InertContext>();
  }
LABEL_102:
  unint64_t v46 = v8 - (void)v11;
  unint64_t v47 = v21;
  if (v8 > (unint64_t)v11)
  {
    memmove(v21, v11, v8 - (void)v11);
    unint64_t v47 = (unint64_t *)((char *)v47 + v46);
  }
  *(void *)(v48 + 8) = ((uint64_t)v47 - v49) >> 3;
  return v12;
}

uint64_t SIValueSet<unsigned int>::FlatContextWithPfx::peek(int **a1)
{
  int v1 = **a1;
  int v2 = *((_DWORD *)a1 + 5);
  if ((v2 & v1) != *((_DWORD *)a1 + 4)) {
    SIValueSet<unsigned int>::FlatContextWithPfx::peek();
  }
  return v1 & ~v2;
}

uint64_t SIValueSet<unsigned int>::FlatContextWithPfx::nextKey(int **a1)
{
  int v1 = *(*a1)++;
  int v2 = *((_DWORD *)a1 + 5);
  if ((v2 & v1) != *((_DWORD *)a1 + 4)) {
    SIValueSet<unsigned int>::FlatContextWithPfx::nextKey();
  }
  return v1 & ~v2;
}

uint64_t SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::KeyHolderContext::nextKey(uint64_t **a1)
{
  int v1 = a1[3];
  if (v1)
  {
    int v2 = (uint64_t *)((char *)v1 - 1);
    uint64_t v3 = (uint64_t)a1[2] + 1;
    a1[2] = (uint64_t *)v3;
    a1[3] = v2;
  }
  else
  {
    uint64_t v4 = *a1;
    unint64_t v5 = (unint64_t)a1[1];
    unint64_t v6 = *a1 + 1;
    uint64_t v3 = **a1;
    *a1 = v6;
    a1[2] = (uint64_t *)v3;
    if ((unint64_t)v6 < v5)
    {
      uint64_t v7 = *v6;
      if (v7 < 0)
      {
        *a1 = v4 + 2;
        a1[3] = (uint64_t *)(v7 & 0x7FFFFFFFFFFFFFFFLL);
      }
    }
  }
  return v3;
}

uint64_t SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::RLEKeyIterator::nextKey(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 40);
  return v1 | SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::KeyHolderContext::nextKey((uint64_t **)(a1 + 8));
}

BOOL SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::RLEKeyIterator::hasMore(void *a1)
{
  return a1[4] || a1[1] < a1[2];
}

void SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::RLEKeyIterator::~RLEKeyIterator()
{
}

BOOL SIValueSet<unsigned int>::RLEKeyHolder<unsigned int>::AddKey(uint64_t a1, int a2, int a3)
{
  int v5 = a3 & a2;
  v4[0] = (unsigned int *)&v5;
  v4[1] = (unsigned int *)&vars0;
  return SIValueSet<unsigned int>::RLEKeyHolder<unsigned int>::AddSortedValuesWithContext<SIValueSet<unsigned int>::FlatContext,SIValueSet<unsigned int>::RLEKeyHolder<unsigned int>::InertContext>(a1, v4) != 0;
}

uint64_t SIValueSet<unsigned int>::RLEKeyHolder<unsigned int>::ContainsKey(uint64_t a1, int a2, int a3)
{
  unsigned int v3 = a2 & a3 & 0x7FFFFFFF;
  uint64_t v4 = (unsigned int *)(a1 + 12);
  uint64_t v5 = *(unsigned int *)(a1 + 8);
  unint64_t v6 = a1 + 12 + 4 * v5;
  if (v5 >= 3)
  {
    uint64_t v7 = 4 * v5;
    unint64_t v8 = a1 + 12 + 4 * v5;
    do
    {
      uint64_t v9 = &v4[v7 >> 3];
      unsigned int v10 = *v9;
      if ((*v9 & 0x80000000) != 0)
      {
        unsigned int v11 = *--v9;
        unsigned int v10 = v11;
      }
      if (v9 <= v4) {
        break;
      }
      if (v10 == v3)
      {
        uint64_t v4 = v9;
        break;
      }
      if (v10 > v3) {
        unint64_t v8 = (unint64_t)v9;
      }
      else {
        uint64_t v4 = v9;
      }
      uint64_t v7 = v8 - (void)v4;
    }
    while (v8 > (unint64_t)v4 && (unint64_t)v7 > 0xB);
  }
  if ((unint64_t)v4 >= v6) {
    return 0;
  }
  unsigned int v13 = *v4;
  if (*v4 != v3)
  {
    unint64_t v14 = v4 + 1;
    do
    {
      if ((v13 & 0x80000000) != 0)
      {
        unsigned int v16 = *(v14 - 2);
        unsigned int v17 = v16 + (v13 & 0x7FFFFFFF);
        if (v3 >= v16 && v3 <= v17) {
          return 1;
        }
        if ((unint64_t)v14 >= v6) {
          return 0;
        }
      }
      else
      {
        uint64_t result = 0;
        if (v13 > v3 || (unint64_t)v14 >= v6) {
          return result;
        }
      }
      unsigned int v19 = *v14++;
      unsigned int v13 = v19;
    }
    while (v19 != v3);
  }
  return 1;
}

uint64_t SIValueSet<unsigned int>::RLEKeyHolder<unsigned int>::CloseKey(uint64_t a1, int a2, int a3)
{
  uint64_t v3 = *(unsigned int *)(a1 + 8);
  if (!v3) {
    return 0;
  }
  unsigned int v4 = a2 & a3 & 0x7FFFFFFF;
  uint64_t v5 = (unsigned int *)(a1 + 12);
  unint64_t v6 = a1 + 12 + 4 * v3;
  if (v3 >= 3)
  {
    uint64_t v7 = 4 * v3;
    unint64_t v8 = a1 + 12 + 4 * v3;
    do
    {
      uint64_t v9 = &v5[v7 >> 3];
      unsigned int v10 = *v9;
      if ((*v9 & 0x80000000) != 0)
      {
        unsigned int v11 = *--v9;
        unsigned int v10 = v11;
      }
      if (v9 <= v5) {
        break;
      }
      if (v10 == v4)
      {
        uint64_t v5 = v9;
        break;
      }
      if (v10 > v4) {
        unint64_t v8 = (unint64_t)v9;
      }
      else {
        uint64_t v5 = v9;
      }
      uint64_t v7 = v8 - (void)v5;
    }
    while (v8 > (unint64_t)v5 && (unint64_t)v7 > 0xB);
  }
  if ((unint64_t)v5 >= v6)
  {
LABEL_30:
    uint64_t v13 = *(unsigned int *)(a1 + 4 * (v3 - 1) + 12);
    if ((v13 & 0x80000000) != 0) {
      return *(_DWORD *)(a1 + 4 * (v3 - 2) + 12) + (v13 & 0x7FFFFFFF);
    }
  }
  else
  {
    unint64_t v14 = v5;
    while (1)
    {
      unsigned int v15 = *v14++;
      uint64_t v13 = v15;
      if (v15 == v4) {
        return a2 & a3 & 0x7FFFFFFF;
      }
      if ((v13 & 0x80000000) != 0)
      {
        unsigned int v16 = *(v5 - 1);
        unsigned int v17 = v16 + (v13 & 0x7FFFFFFF);
        if (v4 >= v16 && v4 <= v17) {
          return a2 & a3 & 0x7FFFFFFF;
        }
      }
      else if (v13 > v4)
      {
        return v13;
      }
      uint64_t v5 = v14;
      if ((unint64_t)v14 >= v6) {
        goto LABEL_30;
      }
    }
  }
  return v13;
}

uint64_t SIValueSet<unsigned int>::RLEKeyHolder<unsigned int>::RemoveKey(uint64_t a1, int a2, int a3)
{
  unsigned int v4 = a2 & a3 & 0x7FFFFFFF;
  uint64_t v5 = (unsigned int *)(a1 + 12);
  uint64_t v6 = *(unsigned int *)(a1 + 8);
  unint64_t v7 = a1 + 12 + 4 * v6;
  if (v6 >= 3)
  {
    uint64_t v8 = 4 * v6;
    unint64_t v9 = a1 + 12 + 4 * v6;
    do
    {
      unsigned int v10 = &v5[v8 >> 3];
      unsigned int v11 = *v10;
      if ((*v10 & 0x80000000) != 0)
      {
        unsigned int v12 = *--v10;
        unsigned int v11 = v12;
      }
      if (v10 <= v5) {
        break;
      }
      if (v11 == v4)
      {
        uint64_t v5 = v10;
        break;
      }
      if (v11 > v4) {
        unint64_t v9 = (unint64_t)v10;
      }
      else {
        uint64_t v5 = v10;
      }
      uint64_t v8 = v9 - (void)v5;
    }
    while (v9 > (unint64_t)v5 && (unint64_t)v8 > 0xB);
  }
  if ((unint64_t)v5 >= v7) {
    return 0;
  }
  unint64_t v14 = v5 + 1;
  unsigned int v15 = *v5;
  if (*v5 == v4)
  {
LABEL_31:
    if ((unint64_t)v14 >= v7) {
      goto LABEL_41;
    }
    unsigned int v22 = *v14;
    if ((*v14 & 0x80000000) != 0)
    {
      *uint64_t v5 = v4 + 1;
      if ((v22 & 0x7FFFFFFF) != 1)
      {
        unsigned int *v14 = (v22 - 1) | 0x80000000;
        return 1;
      }
      size_t v23 = v7 - (void)(v5 + 2);
      uint64_t v24 = v14;
      unint64_t v14 = v5 + 2;
    }
    else
    {
      size_t v23 = v7 - (void)v14;
      uint64_t v24 = v5;
    }
    memmove(v24, v14, v23);
    int v25 = *(_DWORD *)(a1 + 8) - 1;
    goto LABEL_42;
  }
  uint64_t v16 = 0;
  while (1)
  {
    unsigned int v17 = &v5[v16 + 1];
    if ((v15 & 0x80000000) == 0)
    {
      uint64_t result = 0;
      if (v15 > v4 || (unint64_t)v17 >= v7) {
        return result;
      }
      goto LABEL_29;
    }
    unsigned int v19 = v5[v16 - 1];
    unsigned int v20 = v19 + (v15 & 0x7FFFFFFF);
    if (v4 > v19 && v4 <= v20) {
      break;
    }
    if ((unint64_t)v17 >= v7) {
      return 0;
    }
LABEL_29:
    unsigned int v15 = *v17;
    ++v16;
    if (*v17 == v4)
    {
      uint64_t v5 = (unsigned int *)((char *)v5 + v16 * 4);
      unint64_t v14 = v5 + 1;
      goto LABEL_31;
    }
  }
  uint64_t v26 = &v5[v16];
  int v27 = &v5[v16 + 1];
  if ((v15 & 0x7FFFFFFF) != 1)
  {
    if (v4 == v20)
    {
      *uint64_t v26 = (v15 - 1) | 0x80000000;
      return 1;
    }
    if (v4 == v19 + 1)
    {
      *uint64_t v26 = v4 + 1;
      unsigned int v28 = v20 + ~v4;
      if (!v28) {
        return 1;
      }
      uint64_t v29 = *(unsigned int *)(a1 + 8);
      if (v29 >= 0x3F) {
        SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::RemoveKey();
      }
      uint64_t v30 = (uint64_t)&v5[v16 - 2] - a1;
      if (v29 == v30 >> 2) {
        goto LABEL_61;
      }
      uint64_t v31 = v29 - (v30 >> 2);
      unint64_t v32 = &v5[v16 + 2];
    }
    else
    {
      v5[v16] = (v4 + ~v19) | 0x80000000;
      uint64_t v33 = *(unsigned int *)(a1 + 8);
      if (v33 >= 0x3F) {
        SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::RemoveKey();
      }
      uint64_t v34 = (uint64_t)&v5[v16 - 2] - a1;
      if (v33 != v34 >> 2)
      {
        memmove(&v5[v16 + 2], &v5[v16 + 1], 4 * (v33 - (v34 >> 2)));
        LODWORD(v33) = *(_DWORD *)(a1 + 8);
      }
      *(_DWORD *)(a1 + 8) = v33 + 1;
      *int v27 = v4 + 1;
      unsigned int v28 = v20 + ~v4;
      if (!v28) {
        return 1;
      }
      uint64_t v29 = *(unsigned int *)(a1 + 8);
      if (v29 >= 0x3F) {
        SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::RemoveKey();
      }
      int v27 = &v5[v16 + 2];
      uint64_t v35 = (uint64_t)&v5[v16 - 1] - a1;
      if (v29 == v35 >> 2)
      {
LABEL_61:
        *(_DWORD *)(a1 + 8) = v29 + 1;
        *int v27 = v28 | 0x80000000;
        return 1;
      }
      uint64_t v31 = v29 - (v35 >> 2);
      unint64_t v32 = &v5[v16 + 3];
    }
    memmove(v32, v27, 4 * v31);
    LODWORD(v29) = *(_DWORD *)(a1 + 8);
    goto LABEL_61;
  }
  if ((unint64_t)v27 < v7)
  {
    memmove(v26, &v5[v16 + 1], a1 + 4 * v6 - (void)v5 - v16 * 4 + 8);
    LODWORD(v6) = *(_DWORD *)(a1 + 8);
  }
LABEL_41:
  int v25 = v6 - 1;
LABEL_42:
  *(_DWORD *)(a1 + 8) = v25;
  return 1;
}

void SIValueSet<unsigned int>::RLEKeyHolder<unsigned int>::Apply(uint64_t a1, uint64_t a2, int a3, void (*a4)(char *, uint64_t, uint64_t), uint64_t a5)
{
  v19[1] = *MEMORY[0x1E4F143B8];
  uint64_t v9 = MEMORY[0x1F4188790](a1);
  unsigned int v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(unsigned int *)(v9 + 8);
  if (v12 > 0x3F) {
    return;
  }
  uint64_t v13 = (int *)(v9 + 12);
  unint64_t v14 = v9 + 12 + 4 * v12;
  bzero((char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v10);
  int v15 = 0;
  int v16 = 0;
LABEL_3:
  uint64_t v17 = 0;
  while (v16)
  {
    --v16;
    ++v15;
LABEL_15:
    *(_DWORD *)&v11[4 * v17++] = v15 | a3;
    if (v17 == a2)
    {
      a4(v11, a2, a5);
      goto LABEL_3;
    }
  }
  if ((unint64_t)v13 < v14)
  {
    int v18 = v13 + 1;
    int v15 = *v13;
    if ((unint64_t)(v13 + 1) >= v14)
    {
      int v16 = 0;
      ++v13;
    }
    else
    {
      if (*v18 < 0) {
        v13 += 2;
      }
      else {
        ++v13;
      }
      if (*v18 < 0) {
        int v16 = *v18 & 0x7FFFFFFF;
      }
      else {
        int v16 = 0;
      }
    }
    goto LABEL_15;
  }
  if (v17) {
    a4(v11, v17, a5);
  }
}

BOOL SIValueSet<unsigned int>::RLEKeyHolder<unsigned int>::IsEmpty(uint64_t a1)
{
  return *(_DWORD *)(a1 + 8) == 0;
}

uint64_t SIValueSet<unsigned int>::RLEKeyHolder<unsigned int>::GetRawCount(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

uint64_t SIValueSet<unsigned int>::RLEKeyHolder<unsigned int>::Serialize(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 8))(a2, 4);
  (*(void (**)(uint64_t, void))(*(void *)a2 + 8))(a2, *(unsigned int *)(a1 + 8));
  uint64_t v4 = 4 * *(unsigned int *)(a1 + 8);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 16);

  return v5(a2, a1 + 12, v4);
}

void SIValueSet<unsigned int>::RLEKeyHolder<unsigned int>::~RLEKeyHolder()
{
}

uint64_t SIValueSet<unsigned int>::RLEKeyHolder<unsigned int>::valueIterator(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3 = *(unsigned int *)(a1 + 8);
  *(void *)a3 = &unk_1F181D758;
  *(void *)(a3 + 8) = a1 + 12;
  *(void *)(a3 + 16) = a1 + 12 + 4 * v3;
  *(void *)(a3 + 24) = 0;
  *(_DWORD *)(a3 + 32) = a2;
  return a3;
}

uint64_t SIValueSet<unsigned int>::RLEKeyHolder<unsigned int>::AddSortedValuesWithContext<SIValueSet<unsigned int>::FlatContext,SIValueSet<unsigned int>::RLEKeyHolder<unsigned int>::InertContext>(uint64_t a1, unsigned int **a2)
{
  if (*a2 >= a2[1]) {
    return 0;
  }
  unsigned int v3 = **a2;
  uint64_t v4 = (unsigned int *)(a1 + 12);
  uint64_t v5 = *(unsigned int *)(a1 + 8);
  unint64_t v6 = a1 + 12 + 4 * v5;
  uint64_t v50 = a1 + 12;
  if (v5 >= 3)
  {
    uint64_t v7 = 4 * v5;
    unint64_t v8 = a1 + 12 + 4 * v5;
    do
    {
      uint64_t v9 = &v4[v7 >> 3];
      unsigned int v10 = *v9;
      if ((*v9 & 0x80000000) != 0)
      {
        unsigned int v11 = *--v9;
        unsigned int v10 = v11;
      }
      if (v9 <= v4) {
        break;
      }
      if (v10 == v3)
      {
        uint64_t v4 = v9;
        break;
      }
      if (v10 > v3) {
        unint64_t v8 = (unint64_t)v9;
      }
      else {
        uint64_t v4 = v9;
      }
      uint64_t v7 = v8 - (void)v4;
    }
    while (v8 > (unint64_t)v4 && (unint64_t)v7 > 0xB);
  }
  int v14 = 0;
  uint64_t v13 = 0;
  unint64_t v15 = a1 + 264;
  int v16 = v4;
  int v17 = 1;
  while (2)
  {
    unsigned int v18 = 0;
    uint64_t v19 = 0;
    unsigned int v20 = v4;
    while (1)
    {
      uint64_t v21 = v19;
      while ((unint64_t)v20 >= v6 || v3 < *v20)
      {
        if (v21)
        {
          unint64_t v22 = v21 + v18;
          int v23 = 1;
          if (v22 < v3) {
            goto LABEL_41;
          }
          unint64_t v24 = v3 + 1;
          if (v24 < v18) {
            goto LABEL_41;
          }
          uint64_t v25 = v21 + v18 - 1;
          unint64_t v26 = v25 + v3;
          BOOL v27 = v18 > v3;
          if (v18 <= v3)
          {
            int v28 = 0;
          }
          else
          {
            unsigned int v18 = v3;
            uint64_t v21 = v25;
            int v28 = 1;
          }
          if (v27) {
            unint64_t v22 = v26;
          }
          uint64_t v29 = v21 + v24 - v22;
          if (v22 > v3)
          {
            unsigned int v30 = v28;
          }
          else
          {
            uint64_t v21 = v29;
            unsigned int v30 = 1;
          }
        }
        else
        {
          uint64_t v21 = 1;
          unsigned int v18 = v3;
          unsigned int v30 = 1;
        }
        uint64_t v31 = *a2 + 1;
        unsigned int v32 = **a2;
        *a2 = v31;
        if (v32 != v3) {
          SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::AddSortedValuesWithContext<SIValueSet<unsigned int>::FlatContext,SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::InertContext>();
        }
        v13 += v30;
        if (v31 >= a2[1])
        {
          int v23 = 0;
          ++v14;
          goto LABEL_41;
        }
        unsigned int v3 = *v31;
        ++v17;
        ++v14;
      }
      int v23 = 1;
LABEL_41:
      if ((unint64_t)v20 >= v6) {
        break;
      }
      unint64_t v33 = *v20;
      if ((unint64_t)(v20 + 1) >= v6)
      {
        uint64_t v37 = 1;
        uint64_t v19 = 1;
        if (!v21) {
          goto LABEL_61;
        }
      }
      else
      {
        int v34 = v20[1];
        uint64_t v35 = v34 & 0x7FFFFFFF;
        BOOL v36 = v34 >= 0;
        if (v34 < 0) {
          uint64_t v37 = 2;
        }
        else {
          uint64_t v37 = 1;
        }
        if (v36) {
          uint64_t v19 = 1;
        }
        else {
          uint64_t v19 = v35 + 1;
        }
        if (!v21)
        {
LABEL_61:
          unsigned int v18 = *v20;
          goto LABEL_62;
        }
      }
      unint64_t v38 = v21 + v18;
      if (v38 < v33) {
        break;
      }
      unint64_t v39 = v19 + v33;
      if (v19 + v33 < v18) {
        break;
      }
      uint64_t v40 = v21 - v19 + v18;
      BOOL v41 = v18 > v33;
      if (v18 >= v33) {
        unsigned int v18 = *v20;
      }
      if (v41)
      {
        uint64_t v21 = v40;
        unint64_t v42 = v40 + v33;
      }
      else
      {
        unint64_t v42 = v38;
      }
      if (v39 > v42) {
        uint64_t v19 = v21 + v39 - v42;
      }
      else {
        uint64_t v19 = v21;
      }
LABEL_62:
      v20 += v37;
      if (v19 + (unint64_t)v18 >= v3) {
        char v43 = v23;
      }
      else {
        char v43 = 0;
      }
      if ((v43 & 1) == 0) {
        goto LABEL_68;
      }
    }
    uint64_t v19 = v21;
LABEL_68:
    if (v19 == 1)
    {
      if (v16 >= v20)
      {
        if (v6 + 8 > v15) {
          SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::AddSortedValuesWithContext<SIValueSet<unsigned int>::FlatContext,SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::InertContext>();
        }
        uint64_t v4 = (unsigned int *)(v15 - (v6 - (void)v20));
        if ((unsigned int *)v6 == v20)
        {
          unint64_t v6 = v15;
        }
        else
        {
          BOOL v54 = v16;
          unint64_t v45 = v15;
          memmove((void *)(v15 - (v6 - (void)v20)), v20, v6 - (void)v20);
          unint64_t v15 = v45;
          int v16 = v54;
          unint64_t v6 = v45;
        }
      }
      else
      {
        uint64_t v4 = v20;
      }
      unsigned int *v16 = v18;
LABEL_84:
      ++v16;
      if (v23)
      {
        if ((unint64_t)v16 + v6 - (void)v4 + 8 > v15) {
          goto LABEL_90;
        }
        continue;
      }
      unsigned int v20 = v4;
    }
    else
    {
      if (v19)
      {
        size_t v44 = v16 + 1;
        if (v16 + 1 >= v20)
        {
          if (v6 + 8 > v15) {
            SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::AddSortedValuesWithContext<SIValueSet<unsigned int>::FlatContext,SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::InertContext>();
          }
          uint64_t v4 = (unsigned int *)(v15 - (v6 - (void)v20));
          if ((unsigned int *)v6 != v20)
          {
            unint64_t v52 = v15;
            unsigned int v53 = v16;
            unint64_t v51 = v16 + 1;
            memmove((void *)(v15 - (v6 - (void)v20)), v20, v6 - (void)v20);
            size_t v44 = v51;
            unint64_t v15 = v52;
            int v16 = v53;
          }
          unint64_t v6 = v15;
        }
        else
        {
          uint64_t v4 = v20;
        }
        unsigned int *v16 = v18;
        v16[1] = (v19 - 1) | 0x80000000;
        int v16 = v44;
        goto LABEL_84;
      }
      uint64_t v4 = v20;
      if (v23)
      {
LABEL_90:
        if (v14 >= v17) {
          SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::AddSortedValuesWithContext<SIValueSet<unsigned int>::FlatContext,SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::InertContext>();
        }
        goto LABEL_93;
      }
    }
    break;
  }
  uint64_t v4 = v20;
  if (v14 != v17) {
    SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::AddSortedValuesWithContext<SIValueSet<unsigned int>::FlatContext,SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::InertContext>();
  }
LABEL_93:
  unint64_t v46 = v6 - (void)v4;
  if (v6 > (unint64_t)v4)
  {
    unint64_t v47 = v16;
    memmove(v16, v4, v6 - (void)v4);
    int v16 = (unsigned int *)((char *)v47 + v46);
  }
  *(_DWORD *)(a1 + 8) = ((unint64_t)v16 - v50) >> 2;
  return v13;
}

uint64_t SIValueSet<unsigned int>::RLEKeyHolder<unsigned int>::AddSortedValuesWithContext<SIValueSet<unsigned int>::FlatContextWithPfx,SIValueSet<unsigned int>::CollectorContext>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)a2 >= *(void *)(a2 + 8) || (*(_DWORD *)(a2 + 20) & **(_DWORD **)a2) != *(_DWORD *)(a2 + 16)) {
    return 0;
  }
  unsigned int v6 = SIValueSet<unsigned int>::FlatContextWithPfx::peek((int **)a2);
  unsigned int v7 = v6;
  uint64_t v8 = *(unsigned int *)(a1 + 8);
  if (v8 >= 3)
  {
    uint64_t v12 = 4 * v8;
    uint64_t v9 = a1 + 12 + 4 * v8;
    uint64_t v13 = (char *)v9;
    unsigned int v10 = (char *)(a1 + 12);
    do
    {
      int v14 = &v10[4 * (v12 >> 3)];
      unsigned int v15 = *(_DWORD *)v14;
      if ((*(_DWORD *)v14 & 0x80000000) != 0)
      {
        unsigned int v16 = *((_DWORD *)v14 - 1);
        v14 -= 4;
        unsigned int v15 = v16;
      }
      if (v14 <= v10) {
        break;
      }
      if (v15 == v6)
      {
        unsigned int v10 = v14;
        break;
      }
      if (v15 > v6) {
        uint64_t v13 = v14;
      }
      else {
        unsigned int v10 = v14;
      }
      uint64_t v12 = v13 - v10;
    }
    while (v13 > v10 && (unint64_t)v12 > 0xB);
  }
  else
  {
    uint64_t v9 = a1 + 12 + 4 * v8;
    unsigned int v10 = (char *)(a1 + 12);
  }
  uint64_t v47 = a1;
  uint64_t v48 = a1 + 12;
  int v18 = 0;
  uint64_t v53 = a3;
  uint64_t v54 = 0;
  unint64_t v19 = a1 + 264;
  unsigned int v20 = (unsigned int *)v10;
  int v21 = 1;
  unint64_t v22 = v9;
  unint64_t v51 = v19;
  while (2)
  {
    unint64_t v52 = v20;
    unsigned int v23 = 0;
    uint64_t v24 = 0;
    uint64_t v25 = (unsigned int *)v10;
    unint64_t v26 = v22;
    do
    {
      uint64_t v27 = v24;
      while ((unint64_t)v25 >= v22 || v7 < *v25)
      {
        if (!v27)
        {
          uint64_t v27 = 1;
          unsigned int v23 = v7;
LABEL_34:
          int v29 = 1;
          goto LABEL_35;
        }
        unint64_t v28 = v27 + v23;
        int v29 = 1;
        if (v28 < v7) {
          goto LABEL_46;
        }
        unint64_t v30 = v7 + 1;
        if (v30 < v23) {
          goto LABEL_45;
        }
        if (v23 <= v7)
        {
          int v29 = 0;
        }
        else
        {
          uint64_t v27 = v27 + v23 - 1;
          unint64_t v28 = v27 + v7;
          unsigned int v23 = v7;
        }
        if (v28 <= v7)
        {
          uint64_t v27 = v27 + v30 - v28;
          goto LABEL_34;
        }
LABEL_35:
        if (SIValueSet<unsigned int>::FlatContextWithPfx::nextKey((int **)a2) != v7) {
          SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::AddSortedValuesWithContext<SIValueSet<unsigned int>::FlatContext,SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::InertContext>();
        }
        if (v29)
        {
          ++v54;
        }
        else if (v53)
        {
          SIValueSet<unsigned int>::SIValueSetInsert(*(unsigned int **)(v53 + 8), *(_DWORD *)v53 | v7);
        }
        if (*(void *)a2 >= *(void *)(a2 + 8))
        {
          int v29 = 0;
          ++v18;
LABEL_45:
          unint64_t v22 = v26;
          goto LABEL_46;
        }
        ++v18;
        if ((*(_DWORD *)(a2 + 20) & **(_DWORD **)a2) != *(_DWORD *)(a2 + 16))
        {
          int v29 = 0;
          goto LABEL_45;
        }
        unsigned int v7 = SIValueSet<unsigned int>::FlatContextWithPfx::peek((int **)a2);
        ++v21;
        unint64_t v22 = v26;
      }
      int v29 = 1;
LABEL_46:
      if ((unint64_t)v25 >= v22)
      {
        uint64_t v24 = v27;
        break;
      }
      unint64_t v31 = *v25;
      if ((unint64_t)(v25 + 1) >= v22)
      {
        uint64_t v35 = 1;
        uint64_t v24 = 1;
        if (v27) {
          goto LABEL_52;
        }
LABEL_65:
        unsigned int v23 = *v25;
        goto LABEL_66;
      }
      signed int v32 = v25[1];
      uint64_t v33 = v32 & 0x7FFFFFFF;
      BOOL v34 = v32 >= 0;
      uint64_t v35 = 2;
      if (v34)
      {
        uint64_t v35 = 1;
        uint64_t v24 = 1;
      }
      else
      {
        uint64_t v24 = v33 + 1;
      }
      if (!v27) {
        goto LABEL_65;
      }
LABEL_52:
      unint64_t v36 = v27 + v23;
      if (v36 < v31 || (unint64_t v37 = v24 + v31, v24 + v31 < v23))
      {
        uint64_t v24 = v27;
        unint64_t v22 = v26;
        break;
      }
      uint64_t v38 = v27 - v24 + v23;
      unint64_t v39 = v38 + v31;
      BOOL v40 = v23 > v31;
      if (v23 >= v31) {
        unsigned int v23 = *v25;
      }
      if (v40) {
        uint64_t v41 = v38;
      }
      else {
        uint64_t v41 = v27;
      }
      if (v40) {
        unint64_t v36 = v39;
      }
      if (v37 > v36) {
        uint64_t v24 = v41 + v37 - v36;
      }
      else {
        uint64_t v24 = v41;
      }
LABEL_66:
      v25 += v35;
      if (v24 + (unint64_t)v23 >= v7) {
        char v42 = v29;
      }
      else {
        char v42 = 0;
      }
      unint64_t v22 = v26;
    }
    while ((v42 & 1) != 0);
    if (v24 == 1)
    {
      size_t v44 = v52;
      if (v52 >= v25)
      {
        unint64_t v45 = v51;
        if (v22 + 8 > v51) {
          SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::AddSortedValuesWithContext<SIValueSet<unsigned int>::FlatContext,SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::InertContext>();
        }
        unsigned int v10 = (char *)(v51 - (v22 - (void)v25));
        if ((unsigned int *)v22 != v25)
        {
          uint64_t v50 = (char *)(v51 - (v22 - (void)v25));
          memmove(v50, v25, v22 - (void)v25);
          unsigned int v10 = v50;
        }
        unint64_t v22 = v51;
      }
      else
      {
        unsigned int v10 = (char *)v25;
        unint64_t v45 = v51;
      }
      *unint64_t v52 = v23;
LABEL_90:
      unsigned int v20 = v44 + 1;
      if (v29)
      {
        if ((unint64_t)v20 + v22 - (void)v10 + 8 > v45) {
          goto LABEL_96;
        }
        continue;
      }
      uint64_t v25 = (unsigned int *)v10;
    }
    else
    {
      unsigned int v20 = v52;
      if (v24)
      {
        char v43 = v52 + 1;
        if (v52 + 1 >= v25)
        {
          if (v22 + 8 > v51) {
            SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::AddSortedValuesWithContext<SIValueSet<unsigned int>::FlatContext,SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::InertContext>();
          }
          unsigned int v10 = (char *)(v51 - (v22 - (void)v25));
          if ((unsigned int *)v22 != v25)
          {
            uint64_t v49 = (char *)(v51 - (v22 - (void)v25));
            memmove(v49, v25, v22 - (void)v25);
            char v43 = v52 + 1;
            unsigned int v10 = v49;
          }
          unint64_t v22 = v51;
        }
        else
        {
          unsigned int v10 = (char *)v25;
        }
        *unint64_t v52 = v23;
        v52[1] = (v24 - 1) | 0x80000000;
        size_t v44 = v43;
        unint64_t v45 = v51;
        goto LABEL_90;
      }
      unsigned int v10 = (char *)v25;
      if (v29)
      {
LABEL_96:
        if (v18 >= v21) {
          SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::AddSortedValuesWithContext<SIValueSet<unsigned int>::FlatContext,SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::InertContext>();
        }
        goto LABEL_99;
      }
    }
    break;
  }
  unsigned int v10 = (char *)v25;
  if (v18 != v21) {
    SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::AddSortedValuesWithContext<SIValueSet<unsigned int>::FlatContext,SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::InertContext>();
  }
LABEL_99:
  unint64_t v46 = v22 - (void)v10;
  if (v22 > (unint64_t)v10)
  {
    memmove(v20, v10, v22 - (void)v10);
    unsigned int v20 = (unsigned int *)((char *)v20 + v46);
  }
  uint64_t result = v54;
  *(_DWORD *)(v47 + 8) = ((unint64_t)v20 - v48) >> 2;
  return result;
}

uint64_t SIValueSet<unsigned int>::RLEKeyHolder<unsigned int>::KeyHolderContext::nextKey(unsigned int **a1)
{
  int v1 = *((_DWORD *)a1 + 5);
  if (v1)
  {
    int v2 = v1 - 1;
    uint64_t v3 = (*((_DWORD *)a1 + 4) + 1);
    *((_DWORD *)a1 + 4) = v3;
    *((_DWORD *)a1 + 5) = v2;
  }
  else
  {
    uint64_t v4 = (uint64_t)*a1;
    uint64_t v5 = a1[1];
    unsigned int v6 = *a1 + 1;
    uint64_t v3 = **a1;
    *a1 = v6;
    *((_DWORD *)a1 + 4) = v3;
    if (v6 < v5)
    {
      unsigned int v7 = *v6;
      if ((v7 & 0x80000000) != 0)
      {
        *a1 = (unsigned int *)(v4 + 8);
        *((_DWORD *)a1 + 5) = v7 & 0x7FFFFFFF;
      }
    }
  }
  return v3;
}

uint64_t SIValueSet<unsigned int>::RLEKeyHolder<unsigned int>::RLEKeyIterator::nextKey(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 32);
  return SIValueSet<unsigned int>::RLEKeyHolder<unsigned int>::KeyHolderContext::nextKey((unsigned int **)(a1 + 8)) | v1;
}

BOOL SIValueSet<unsigned int>::RLEKeyHolder<unsigned int>::RLEKeyIterator::hasMore(uint64_t a1)
{
  return *(_DWORD *)(a1 + 28) || *(void *)(a1 + 8) < *(void *)(a1 + 16);
}

void SIValueSet<unsigned int>::RLEKeyHolder<unsigned int>::RLEKeyIterator::~RLEKeyIterator()
{
}

BOOL SIValueSet<unsigned int>::RLEKeyHolder<unsigned short>::AddKey(uint64_t a1, int a2, int a3)
{
  int v5 = a3 & a2;
  v4[0] = (unsigned __int16 *)&v5;
  v4[1] = (unsigned __int16 *)&vars0;
  return SIValueSet<unsigned int>::RLEKeyHolder<unsigned short>::AddSortedValuesWithContext<SIValueSet<unsigned int>::FlatContext,SIValueSet<unsigned int>::RLEKeyHolder<unsigned short>::InertContext>(a1, v4) != 0;
}

uint64_t SIValueSet<unsigned int>::RLEKeyHolder<unsigned short>::ContainsKey(uint64_t a1, unsigned __int16 a2, unsigned __int16 a3)
{
  unsigned int v3 = a2 & a3 & 0x7FFF;
  uint64_t v4 = (__int16 *)(a1 + 10);
  unint64_t v5 = *(unsigned __int16 *)(a1 + 8);
  unint64_t v6 = a1 + 10 + 2 * v5;
  if (v5 >= 3)
  {
    uint64_t v7 = 2 * v5;
    unint64_t v8 = a1 + 10 + 2 * v5;
    do
    {
      uint64_t v9 = &v4[v7 >> 2];
      if (*v9 < 0)
      {
        unsigned int v11 = (unsigned __int16)*--v9;
        unsigned int v10 = v11;
      }
      else
      {
        unsigned int v10 = (unsigned __int16)*v9;
      }
      if (v9 <= v4) {
        break;
      }
      if (v10 == v3)
      {
        uint64_t v4 = v9;
        break;
      }
      if (v10 > v3) {
        unint64_t v8 = (unint64_t)v9;
      }
      else {
        uint64_t v4 = v9;
      }
      uint64_t v7 = v8 - (void)v4;
    }
    while (v8 > (unint64_t)v4 && (unint64_t)v7 > 5);
  }
  if ((unint64_t)v4 >= v6) {
    return 0;
  }
  unsigned int v13 = (unsigned __int16)*v4;
  if (v3 != v13)
  {
    int v14 = (unsigned __int16 *)(v4 + 1);
    do
    {
      if ((v13 & 0x8000) != 0)
      {
        unsigned int v16 = *(v14 - 2);
        unsigned int v17 = v16 + (v13 & 0x7FFF);
        if (v3 >= v16 && v3 <= v17) {
          return 1;
        }
        if ((unint64_t)v14 >= v6) {
          return 0;
        }
      }
      else
      {
        uint64_t result = 0;
        if (v3 < v13 || (unint64_t)v14 >= v6) {
          return result;
        }
      }
      unsigned int v19 = *v14++;
      unsigned int v13 = v19;
    }
    while (v3 != v19);
  }
  return 1;
}

uint64_t SIValueSet<unsigned int>::RLEKeyHolder<unsigned short>::CloseKey(uint64_t a1, int a2, int a3)
{
  uint64_t v3 = *(unsigned __int16 *)(a1 + 8);
  if (!*(_WORD *)(a1 + 8)) {
    return 0;
  }
  unsigned int v4 = a2 & a3 & 0x7FFF;
  unint64_t v5 = (__int16 *)(a1 + 10);
  unint64_t v6 = a1 + 10 + 2 * v3;
  if (v3 >= 3)
  {
    uint64_t v7 = 2 * v3;
    unint64_t v8 = a1 + 10 + 2 * v3;
    do
    {
      uint64_t v9 = &v5[v7 >> 2];
      if (*v9 < 0)
      {
        unsigned int v11 = (unsigned __int16)*--v9;
        unsigned int v10 = v11;
      }
      else
      {
        unsigned int v10 = (unsigned __int16)*v9;
      }
      if (v9 <= v5) {
        break;
      }
      if (v10 == v4)
      {
        unint64_t v5 = v9;
        break;
      }
      if (v10 > v4) {
        unint64_t v8 = (unint64_t)v9;
      }
      else {
        unint64_t v5 = v9;
      }
      uint64_t v7 = v8 - (void)v5;
    }
    while (v8 > (unint64_t)v5 && (unint64_t)v7 > 5);
  }
  if ((unint64_t)v5 >= v6)
  {
LABEL_31:
    uint64_t v19 = a1 + 2 * v3;
    uint64_t v13 = *(unsigned __int16 *)(v19 + 8);
    if (*(__int16 *)(v19 + 8) < 0) {
      return (v13 & 0x7FFF) + *(unsigned __int16 *)(v19 + 6);
    }
  }
  else
  {
    int v14 = (unsigned __int16 *)v5;
    while (1)
    {
      unsigned int v15 = *v14++;
      uint64_t v13 = v15;
      if (v4 == v15) {
        return a2 & a3 & 0x7FFF;
      }
      if ((v13 & 0x8000) != 0)
      {
        unsigned int v16 = (unsigned __int16)*(v5 - 1);
        unsigned int v17 = v16 + (v13 & 0x7FFF);
        if (v4 >= v16 && v4 <= v17) {
          return a2 & a3 & 0x7FFF;
        }
      }
      else if (v4 < v13)
      {
        return v13;
      }
      unint64_t v5 = (__int16 *)v14;
      if ((unint64_t)v14 >= v6) {
        goto LABEL_31;
      }
    }
  }
  return v13;
}

uint64_t SIValueSet<unsigned int>::RLEKeyHolder<unsigned short>::RemoveKey(uint64_t a1, unsigned __int16 a2, unsigned __int16 a3)
{
  unsigned int v4 = a2 & a3 & 0x7FFF;
  unint64_t v5 = (__int16 *)(a1 + 10);
  unint64_t v6 = *(unsigned __int16 *)(a1 + 8);
  unint64_t v7 = a1 + 10 + 2 * v6;
  if (v6 >= 3)
  {
    uint64_t v8 = 2 * v6;
    unint64_t v9 = a1 + 10 + 2 * v6;
    do
    {
      unsigned int v10 = &v5[v8 >> 2];
      int v11 = *v10;
      if (v11 < 0)
      {
        __int16 v12 = *--v10;
        LOWORD(v11) = v12;
      }
      if (v10 <= v5) {
        break;
      }
      if (v4 == (unsigned __int16)v11)
      {
        unint64_t v5 = v10;
        break;
      }
      if ((unsigned __int16)v11 > v4) {
        unint64_t v9 = (unint64_t)v10;
      }
      else {
        unint64_t v5 = v10;
      }
      uint64_t v8 = v9 - (void)v5;
    }
    while (v9 > (unint64_t)v5 && (unint64_t)v8 > 5);
  }
  if ((unint64_t)v5 >= v7) {
    return 0;
  }
  int v14 = v5 + 1;
  unsigned int v15 = (unsigned __int16)*v5;
  if (v4 == v15)
  {
LABEL_28:
    if ((unint64_t)v14 >= v7) {
      goto LABEL_39;
    }
    int v20 = *v14;
    if (v20 < 0)
    {
      *unint64_t v5 = v15 + 1;
      if ((v20 & 0x7FFF) != 1)
      {
        __int16 *v14 = (v20 - 1) | 0x8000;
        return 1;
      }
      size_t v21 = v7 - (void)(v5 + 2);
      unint64_t v22 = v14;
      int v14 = v5 + 2;
    }
    else
    {
      size_t v21 = v7 - (void)v14;
      unint64_t v22 = v5;
    }
    memmove(v22, v14, v21);
    __int16 v23 = *(_WORD *)(a1 + 8) - 1;
    goto LABEL_40;
  }
  uint64_t v16 = 0;
  while (1)
  {
    unsigned int v17 = &v5[v16 + 1];
    if ((v15 & 0x8000) == 0)
    {
      uint64_t result = 0;
      if (v4 < v15 || (unint64_t)v17 >= v7) {
        return result;
      }
      goto LABEL_26;
    }
    unsigned int v19 = (unsigned __int16)v5[v16 - 1];
    if (v4 > v19 && v4 <= (unsigned __int16)(v19 + (v15 & 0x7FFF))) {
      break;
    }
    if ((unint64_t)v17 >= v7) {
      return 0;
    }
LABEL_26:
    unsigned int v15 = (unsigned __int16)*v17;
    ++v16;
    if (v4 == v15)
    {
      unint64_t v5 = (__int16 *)((char *)v5 + v16 * 2);
      int v14 = v5 + 1;
      goto LABEL_28;
    }
  }
  uint64_t v24 = &v5[v16];
  uint64_t v25 = &v5[v16 + 1];
  if ((v15 & 0x7FFF) != 1)
  {
    int v26 = (unsigned __int16)(v19 + (v15 & 0x7FFF));
    if (v4 == v26)
    {
      *uint64_t v24 = (v15 - 1) | 0x8000;
      return 1;
    }
    if (v4 == v19 + 1)
    {
      *uint64_t v24 = v4 + 1;
      if (!(~v4 + v26)) {
        return 1;
      }
      unint64_t v27 = *(unsigned __int16 *)(a1 + 8);
      if (v27 >= 0x3F) {
        SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::RemoveKey();
      }
      uint64_t v28 = (uint64_t)&v5[v16 - 4] - a1;
      if (v27 != v28 >> 1)
      {
        memmove(&v5[v16 + 2], &v5[v16 + 1], 2 * (v27 - (v28 >> 1)));
        LOWORD(v27) = *(_WORD *)(a1 + 8);
      }
      *(_WORD *)(a1 + 8) = v27 + 1;
      __int16 v29 = (v26 + ~(_WORD)v4) | 0x8000;
    }
    else
    {
      v5[v16] = (v4 + ~(_WORD)v19) | 0x8000;
      unint64_t v30 = *(unsigned __int16 *)(a1 + 8);
      if (v30 >= 0x3F) {
        SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::RemoveKey();
      }
      uint64_t v31 = (uint64_t)&v5[v16 - 4] - a1;
      if (v30 != v31 >> 1)
      {
        memmove(&v5[v16 + 2], &v5[v16 + 1], 2 * (v30 - (v31 >> 1)));
        LOWORD(v3std::unique_ptr<SIResourcePool>::reset[abi:ne180100](this, 0) = *(_WORD *)(a1 + 8);
      }
      *(_WORD *)(a1 + 8) = v30 + 1;
      __int16 *v25 = v4 + 1;
      __int16 v32 = ~(_WORD)v4;
      __int16 v33 = v26 + ~(_WORD)v4;
      if (!((_WORD)v26 + v32)) {
        return 1;
      }
      unint64_t v34 = *(unsigned __int16 *)(a1 + 8);
      if (v34 >= 0x3F) {
        SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::RemoveKey();
      }
      uint64_t v25 = &v5[v16 + 2];
      uint64_t v35 = (uint64_t)&v5[v16 - 3] - a1;
      if (v34 != v35 >> 1)
      {
        memmove(&v5[v16 + 3], &v5[v16 + 2], 2 * (v34 - (v35 >> 1)));
        LOWORD(v34) = *(_WORD *)(a1 + 8);
      }
      *(_WORD *)(a1 + 8) = v34 + 1;
      __int16 v29 = v33 | 0x8000;
    }
    __int16 *v25 = v29;
    return 1;
  }
  if ((unint64_t)v25 < v7)
  {
    memmove(v24, &v5[v16 + 1], a1 + 2 * v6 - (void)v5 - v16 * 2 + 8);
    LOWORD(v6) = *(_WORD *)(a1 + 8);
  }
LABEL_39:
  __int16 v23 = v6 - 1;
LABEL_40:
  *(_WORD *)(a1 + 8) = v23;
  return 1;
}

void SIValueSet<unsigned int>::RLEKeyHolder<unsigned short>::Apply(uint64_t a1, uint64_t a2, int a3, void (*a4)(char *, uint64_t, uint64_t), uint64_t a5)
{
  v19[1] = *MEMORY[0x1E4F143B8];
  uint64_t v9 = MEMORY[0x1F4188790](a1);
  int v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v12 = *(unsigned __int16 *)(v9 + 8);
  if (v12 > 0x3F) {
    return;
  }
  uint64_t v13 = (unsigned __int16 *)(v9 + 10);
  unint64_t v14 = v9 + 10 + 2 * v12;
  bzero((char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v10);
  unsigned __int16 v15 = 0;
  __int16 v16 = 0;
LABEL_3:
  uint64_t v17 = 0;
  while (v16)
  {
    --v16;
    ++v15;
LABEL_15:
    *(_DWORD *)&v11[4 * v17++] = v15 | a3;
    if (v17 == a2)
    {
      a4(v11, a2, a5);
      goto LABEL_3;
    }
  }
  if ((unint64_t)v13 < v14)
  {
    unsigned __int16 v15 = *v13;
    if ((unint64_t)(v13 + 1) >= v14)
    {
      __int16 v16 = 0;
      ++v13;
    }
    else
    {
      int v18 = (__int16)v13[1];
      if (v18 < 0) {
        __int16 v16 = v18 & 0x7FFF;
      }
      else {
        __int16 v16 = 0;
      }
      if (v18 < 0) {
        v13 += 2;
      }
      else {
        ++v13;
      }
    }
    goto LABEL_15;
  }
  if (v17) {
    a4(v11, v17, a5);
  }
}

BOOL SIValueSet<unsigned int>::RLEKeyHolder<unsigned short>::IsEmpty(uint64_t a1)
{
  return *(_WORD *)(a1 + 8) == 0;
}

uint64_t SIValueSet<unsigned int>::RLEKeyHolder<unsigned short>::GetRawCount(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 8);
}

uint64_t SIValueSet<unsigned int>::RLEKeyHolder<unsigned short>::Serialize(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 8))(a2, 2);
  (*(void (**)(uint64_t, void))(*(void *)a2 + 8))(a2, *(unsigned __int16 *)(a1 + 8));
  uint64_t v4 = 2 * *(unsigned __int16 *)(a1 + 8);
  unint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 16);

  return v5(a2, a1 + 10, v4);
}

void SIValueSet<unsigned int>::RLEKeyHolder<unsigned short>::~RLEKeyHolder()
{
}

uint64_t SIValueSet<unsigned int>::RLEKeyHolder<unsigned short>::valueIterator(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3 = *(unsigned __int16 *)(a1 + 8);
  *(void *)a3 = &unk_1F181D7F8;
  *(void *)(a3 + 8) = a1 + 10;
  *(void *)(a3 + 16) = a1 + 10 + 2 * v3;
  *(_DWORD *)(a3 + 24) = 0;
  *(_DWORD *)(a3 + 32) = a2;
  return a3;
}

uint64_t SIValueSet<unsigned int>::RLEKeyHolder<unsigned short>::AddSortedValuesWithContext<SIValueSet<unsigned int>::FlatContext,SIValueSet<unsigned int>::RLEKeyHolder<unsigned short>::InertContext>(uint64_t a1, unsigned __int16 **a2)
{
  if (*a2 >= a2[1]) {
    return 0;
  }
  int v3 = *(_DWORD *)*a2;
  unint64_t v4 = *(unsigned __int16 *)(a1 + 8);
  unint64_t v5 = a1 + 10 + 2 * v4;
  unint64_t v6 = (__int16 *)(a1 + 10);
  if (v4 >= 3)
  {
    uint64_t v7 = 2 * v4;
    unint64_t v8 = a1 + 10 + 2 * v4;
    unint64_t v6 = (__int16 *)(a1 + 10);
    do
    {
      uint64_t v9 = &v6[v7 >> 2];
      int v10 = *v9;
      if (v10 < 0)
      {
        __int16 v11 = *--v9;
        LOWORD(v1std::unique_ptr<SIResourcePool>::reset[abi:ne180100](this, 0) = v11;
      }
      if (v9 <= v6) {
        break;
      }
      if ((unsigned __int16)v10 == (unsigned __int16)v3)
      {
        unint64_t v6 = v9;
        break;
      }
      if ((unsigned __int16)v10 > (unsigned __int16)v3) {
        unint64_t v8 = (unint64_t)v9;
      }
      else {
        unint64_t v6 = v9;
      }
      uint64_t v7 = v8 - (void)v6;
    }
    while (v8 > (unint64_t)v6 && (unint64_t)v7 > 5);
  }
  int v47 = a1 + 10;
  int v14 = 0;
  uint64_t v13 = 0;
  unint64_t v15 = a1 + 136;
  __int16 v16 = v6;
  int v17 = 1;
  while (2)
  {
    LOWORD(v18) = 0;
    uint64_t v19 = 0;
    int v20 = v6;
    while (1)
    {
      uint64_t v21 = v19;
      while ((unint64_t)v20 >= v5 || (unsigned __int16)*v20 > (unsigned __int16)v3)
      {
        if (v21)
        {
          unint64_t v22 = v21 + (unsigned __int16)v18;
          int v23 = 1;
          if (v22 < (unsigned __int16)v3) {
            goto LABEL_42;
          }
          unint64_t v24 = (unsigned __int16)v3 + 1;
          if (v24 < (unsigned __int16)v18) {
            goto LABEL_42;
          }
          unsigned int v25 = (unsigned __int16)v18;
          uint64_t v26 = v21 + (unsigned __int16)v18 - 1;
          unint64_t v27 = v26 + (unsigned __int16)v3;
          if ((unsigned __int16)v18 > (unsigned __int16)v3) {
            LOWORD(v18) = v3;
          }
          if (v25 <= (unsigned __int16)v3)
          {
            int v28 = 0;
          }
          else
          {
            uint64_t v21 = v26;
            int v28 = 1;
          }
          if (v25 > (unsigned __int16)v3) {
            unint64_t v22 = v27;
          }
          uint64_t v29 = v21 + v24 - v22;
          if (v22 > (unsigned __int16)v3)
          {
            unsigned int v30 = v28;
          }
          else
          {
            uint64_t v21 = v29;
            unsigned int v30 = 1;
          }
        }
        else
        {
          uint64_t v21 = 1;
          LOWORD(v18) = v3;
          unsigned int v30 = 1;
        }
        uint64_t v31 = *a2 + 2;
        int v32 = **a2;
        *a2 = v31;
        if (v32 != (unsigned __int16)v3) {
          SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::AddSortedValuesWithContext<SIValueSet<unsigned int>::FlatContext,SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::InertContext>();
        }
        v13 += v30;
        if (v31 >= a2[1])
        {
          int v23 = 0;
          ++v14;
          goto LABEL_42;
        }
        int v3 = *(_DWORD *)v31;
        ++v17;
        ++v14;
      }
      int v23 = 1;
LABEL_42:
      unsigned __int16 v33 = v18;
      if ((unint64_t)v20 >= v5) {
        break;
      }
      unint64_t v18 = (unsigned __int16)*v20;
      if ((unint64_t)(v20 + 1) >= v5)
      {
        uint64_t v36 = 1;
        uint64_t v19 = 1;
        if (!v21) {
          goto LABEL_63;
        }
      }
      else
      {
        int v34 = v20[1];
        BOOL v35 = v34 >= 0;
        if (v34 < 0) {
          uint64_t v36 = 2;
        }
        else {
          uint64_t v36 = 1;
        }
        if (v35) {
          uint64_t v19 = 1;
        }
        else {
          uint64_t v19 = (v20[1] & 0x7FFF) + 1;
        }
        if (!v21) {
          goto LABEL_63;
        }
      }
      if (v21 + (unint64_t)v33 < v18) {
        break;
      }
      unint64_t v37 = v19 + v18;
      if (v19 + v18 < v33) {
        break;
      }
      unint64_t v38 = v21 - v19 + v33 + v18;
      BOOL v39 = v33 > v18;
      if (v33 < v18) {
        LODWORD(v18) = v33;
      }
      if (v39)
      {
        uint64_t v21 = v21 - v19 + v33;
        unint64_t v40 = v38;
      }
      else
      {
        unint64_t v40 = v21 + v33;
      }
      if (v37 > v40) {
        uint64_t v19 = v21 + v37 - v40;
      }
      else {
        uint64_t v19 = v21;
      }
LABEL_63:
      v20 += v36;
      if (v19 + (unint64_t)v18 >= (unsigned __int16)v3) {
        char v41 = v23;
      }
      else {
        char v41 = 0;
      }
      if ((v41 & 1) == 0) {
        goto LABEL_69;
      }
    }
    LOWORD(v18) = v33;
    uint64_t v19 = v21;
LABEL_69:
    if (v19 == 1)
    {
      if (v16 >= v20)
      {
        if (v5 + 4 > v15) {
          SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::AddSortedValuesWithContext<SIValueSet<unsigned int>::FlatContext,SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::InertContext>();
        }
        unint64_t v6 = (__int16 *)(v15 - (v5 - (void)v20));
        if ((__int16 *)v5 == v20)
        {
          unint64_t v5 = v15;
        }
        else
        {
          unint64_t v52 = v16;
          unint64_t v43 = v15;
          memmove((void *)(v15 - (v5 - (void)v20)), v20, v5 - (void)v20);
          unint64_t v15 = v43;
          __int16 v16 = v52;
          unint64_t v5 = v43;
        }
      }
      else
      {
        unint64_t v6 = v20;
      }
      __int16 *v16 = v18;
LABEL_85:
      ++v16;
      if (v23)
      {
        if ((unint64_t)v16 + v5 - (void)v6 + 4 > v15) {
          goto LABEL_91;
        }
        continue;
      }
      int v20 = v6;
    }
    else
    {
      if (v19)
      {
        char v42 = v16 + 1;
        if (v16 + 1 >= v20)
        {
          if (v5 + 4 > v15) {
            SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::AddSortedValuesWithContext<SIValueSet<unsigned int>::FlatContext,SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::InertContext>();
          }
          unint64_t v6 = (__int16 *)(v15 - (v5 - (void)v20));
          if ((__int16 *)v5 != v20)
          {
            unint64_t v50 = v15;
            unint64_t v51 = v16;
            uint64_t v49 = v16 + 1;
            memmove((void *)(v15 - (v5 - (void)v20)), v20, v5 - (void)v20);
            char v42 = v49;
            unint64_t v15 = v50;
            __int16 v16 = v51;
          }
          unint64_t v5 = v15;
        }
        else
        {
          unint64_t v6 = v20;
        }
        __int16 *v16 = v18;
        v16[1] = (v19 - 1) | 0x8000;
        __int16 v16 = v42;
        goto LABEL_85;
      }
      unint64_t v6 = v20;
      if (v23)
      {
LABEL_91:
        if (v14 >= v17) {
          SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::AddSortedValuesWithContext<SIValueSet<unsigned int>::FlatContext,SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::InertContext>();
        }
        goto LABEL_94;
      }
    }
    break;
  }
  unint64_t v6 = v20;
  if (v14 != v17) {
    SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::AddSortedValuesWithContext<SIValueSet<unsigned int>::FlatContext,SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::InertContext>();
  }
LABEL_94:
  int v44 = v5 - v6;
  if (v5 > (unint64_t)v6)
  {
    int v45 = (int)v16;
    memmove(v16, v6, v5 - (void)v6);
    LODWORD(v16) = v45 + v44;
  }
  *(_WORD *)(a1 + 8) = (v16 - v47) >> 1;
  return v13;
}

uint64_t SIValueSet<unsigned int>::RLEKeyHolder<unsigned short>::AddSortedValuesWithContext<SIValueSet<unsigned int>::FlatContextWithPfx,SIValueSet<unsigned int>::CollectorContext>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)a2 >= *(void *)(a2 + 8) || (*(_DWORD *)(a2 + 20) & **(_DWORD **)a2) != *(_DWORD *)(a2 + 16)) {
    return 0;
  }
  unsigned __int16 v6 = SIValueSet<unsigned int>::FlatContextWithPfx::peek((int **)a2);
  unsigned __int16 v7 = v6;
  unint64_t v8 = *(unsigned __int16 *)(a1 + 8);
  uint64_t v9 = a1 + 10 + 2 * v8;
  int v10 = (__int16 *)(a1 + 10);
  if (v8 >= 3)
  {
    uint64_t v11 = 2 * v8;
    unint64_t v12 = a1 + 10 + 2 * v8;
    int v10 = (__int16 *)(a1 + 10);
    do
    {
      uint64_t v13 = &v10[v11 >> 2];
      int v14 = *v13;
      if (v14 < 0)
      {
        __int16 v15 = *--v13;
        LOWORD(v14) = v15;
      }
      if (v13 <= v10) {
        break;
      }
      if ((unsigned __int16)v14 == v6)
      {
        int v10 = v13;
        break;
      }
      if ((unsigned __int16)v14 > v6) {
        unint64_t v12 = (unint64_t)v13;
      }
      else {
        int v10 = v13;
      }
      uint64_t v11 = v12 - (void)v10;
    }
    while (v12 > (unint64_t)v10 && (unint64_t)v11 > 5);
  }
  uint64_t v46 = a1;
  int v47 = a1 + 10;
  int v18 = 0;
  uint64_t v50 = a3;
  uint64_t v51 = 0;
  unint64_t v19 = a1 + 136;
  int v20 = v10;
  int v21 = 1;
  unint64_t v22 = v9;
  unint64_t v48 = v19;
  while (2)
  {
    uint64_t v49 = v20;
    LOWORD(v23) = 0;
    uint64_t v24 = 0;
    unsigned int v25 = v10;
    unint64_t v26 = v22;
    do
    {
      uint64_t v27 = v24;
      while ((unint64_t)v25 >= v22 || (unsigned __int16)*v25 > v7)
      {
        if (!v27)
        {
          uint64_t v27 = 1;
          LOWORD(v23) = v7;
LABEL_33:
          int v29 = 1;
          goto LABEL_34;
        }
        unint64_t v28 = v27 + (unsigned __int16)v23;
        int v29 = 1;
        if (v28 < v7) {
          goto LABEL_46;
        }
        unint64_t v30 = v7 + 1;
        if (v30 < (unsigned __int16)v23) {
          goto LABEL_44;
        }
        if ((unsigned __int16)v23 <= v7)
        {
          int v29 = 0;
        }
        else
        {
          uint64_t v27 = v27 + (unsigned __int16)v23 - 1;
          unint64_t v28 = v27 + v7;
          LOWORD(v23) = v7;
        }
        if (v28 <= v7)
        {
          uint64_t v27 = v27 + v30 - v28;
          goto LABEL_33;
        }
LABEL_34:
        if (v7 != (unsigned __int16)SIValueSet<unsigned int>::FlatContextWithPfx::nextKey((int **)a2)) {
          SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::AddSortedValuesWithContext<SIValueSet<unsigned int>::FlatContext,SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::InertContext>();
        }
        if (v29)
        {
          ++v51;
        }
        else if (v50)
        {
          SIValueSet<unsigned int>::SIValueSetInsert(*(unsigned int **)(v50 + 8), *(_DWORD *)v50 | v7);
        }
        if (*(void *)a2 >= *(void *)(a2 + 8))
        {
          int v29 = 0;
          ++v18;
LABEL_44:
          unsigned __int16 v31 = v23;
          unint64_t v22 = v26;
          goto LABEL_47;
        }
        ++v18;
        if ((*(_DWORD *)(a2 + 20) & **(_DWORD **)a2) != *(_DWORD *)(a2 + 16))
        {
          int v29 = 0;
          goto LABEL_44;
        }
        unsigned __int16 v7 = SIValueSet<unsigned int>::FlatContextWithPfx::peek((int **)a2);
        ++v21;
        unint64_t v22 = v26;
      }
      int v29 = 1;
LABEL_46:
      unsigned __int16 v31 = v23;
LABEL_47:
      if ((unint64_t)v25 >= v22)
      {
        LOWORD(v23) = v31;
        uint64_t v24 = v27;
        break;
      }
      unint64_t v23 = (unsigned __int16)*v25;
      if ((unint64_t)(v25 + 1) >= v22)
      {
        uint64_t v35 = 1;
        uint64_t v24 = 1;
        if (!v27) {
          goto LABEL_67;
        }
      }
      else
      {
        int v32 = v25[1];
        uint64_t v33 = v32 & 0x7FFF;
        BOOL v34 = v32 >= 0;
        uint64_t v35 = 2;
        if (v34)
        {
          uint64_t v35 = 1;
          uint64_t v24 = 1;
        }
        else
        {
          uint64_t v24 = v33 + 1;
        }
        if (!v27) {
          goto LABEL_67;
        }
      }
      unint64_t v36 = v27 + v31;
      if (v36 < v23 || (unint64_t v37 = v24 + v23, v24 + v23 < v31))
      {
        LOWORD(v23) = v31;
        uint64_t v24 = v27;
        unint64_t v22 = v26;
        break;
      }
      unint64_t v38 = v27 - v24 + v31 + v23;
      BOOL v39 = v31 > v23;
      if (v31 < v23) {
        LODWORD(v23) = v31;
      }
      if (v39) {
        uint64_t v40 = v27 - v24 + v31;
      }
      else {
        uint64_t v40 = v27;
      }
      if (v39) {
        unint64_t v36 = v38;
      }
      if (v37 > v36) {
        uint64_t v24 = v40 + v37 - v36;
      }
      else {
        uint64_t v24 = v40;
      }
LABEL_67:
      v25 += v35;
      if (v24 + (unint64_t)v23 >= v7) {
        char v41 = v29;
      }
      else {
        char v41 = 0;
      }
      unint64_t v22 = v26;
    }
    while ((v41 & 1) != 0);
    if (v24 == 1)
    {
      int v44 = v49;
      if (v49 >= v25)
      {
        if (v22 + 4 > v48) {
          SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::AddSortedValuesWithContext<SIValueSet<unsigned int>::FlatContext,SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::InertContext>();
        }
        int v10 = (__int16 *)(v48 - (v22 - (void)v25));
        if ((__int16 *)v22 != v25) {
          memmove((void *)(v48 - (v22 - (void)v25)), v25, v22 - (void)v25);
        }
        unint64_t v22 = v48;
        unint64_t v43 = v48;
      }
      else
      {
        int v10 = v25;
        unint64_t v43 = v48;
      }
      *uint64_t v49 = v23;
LABEL_90:
      int v20 = v44 + 1;
      if (v29)
      {
        if ((unint64_t)v20 + v22 - (void)v10 + 4 > v43) {
          goto LABEL_96;
        }
        continue;
      }
      unsigned int v25 = v10;
    }
    else
    {
      int v20 = v49;
      if (v24)
      {
        char v42 = v49 + 1;
        if (v49 + 1 >= v25)
        {
          unint64_t v43 = v48;
          if (v22 + 4 > v48) {
            SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::AddSortedValuesWithContext<SIValueSet<unsigned int>::FlatContext,SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::InertContext>();
          }
          int v10 = (__int16 *)(v48 - (v22 - (void)v25));
          if ((__int16 *)v22 == v25)
          {
            unint64_t v22 = v48;
          }
          else
          {
            memmove((void *)(v48 - (v22 - (void)v25)), v25, v22 - (void)v25);
            char v42 = v49 + 1;
            unint64_t v22 = v48;
            unint64_t v43 = v48;
          }
        }
        else
        {
          int v10 = v25;
          unint64_t v43 = v48;
        }
        *uint64_t v49 = v23;
        v49[1] = (v24 - 1) | 0x8000;
        int v44 = v42;
        goto LABEL_90;
      }
      int v10 = v25;
      if (v29)
      {
LABEL_96:
        if (v18 >= v21) {
          SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::AddSortedValuesWithContext<SIValueSet<unsigned int>::FlatContext,SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::InertContext>();
        }
        goto LABEL_99;
      }
    }
    break;
  }
  int v10 = v25;
  if (v18 != v21) {
    SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::AddSortedValuesWithContext<SIValueSet<unsigned int>::FlatContext,SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::InertContext>();
  }
LABEL_99:
  int v45 = v22 - v10;
  if (v22 > (unint64_t)v10)
  {
    memmove(v20, v10, v22 - (void)v10);
    LODWORD(v2std::unique_ptr<SIResourcePool>::reset[abi:ne180100](this, 0) = v20 + v45;
  }
  uint64_t result = v51;
  *(_WORD *)(v46 + 8) = (v20 - v47) >> 1;
  return result;
}

uint64_t SIValueSet<unsigned int>::RLEKeyHolder<unsigned short>::KeyHolderContext::nextKey(__int16 **a1)
{
  if (*((_WORD *)a1 + 9))
  {
    --*((_WORD *)a1 + 9);
    unsigned __int16 v1 = *((_WORD *)a1 + 8) + 1;
    *((_WORD *)a1 + 8) = v1;
  }
  else
  {
    int v2 = *a1;
    unint64_t v3 = (unint64_t)a1[1];
    unint64_t v4 = *a1 + 1;
    unsigned __int16 v1 = **a1;
    *a1 = v4;
    *((_WORD *)a1 + 8) = v1;
    if ((unint64_t)v4 < v3)
    {
      int v5 = *v4;
      if (v5 < 0)
      {
        *a1 = v2 + 2;
        *((_WORD *)a1 + 9) = v5 & 0x7FFF;
      }
    }
  }
  return v1;
}

uint64_t SIValueSet<unsigned int>::RLEKeyHolder<unsigned short>::RLEKeyIterator::nextKey(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 32);
  return v1 | SIValueSet<unsigned int>::RLEKeyHolder<unsigned short>::KeyHolderContext::nextKey((__int16 **)(a1 + 8));
}

BOOL SIValueSet<unsigned int>::RLEKeyHolder<unsigned short>::RLEKeyIterator::hasMore(uint64_t a1)
{
  return *(_WORD *)(a1 + 26) || *(void *)(a1 + 8) < *(void *)(a1 + 16);
}

void SIValueSet<unsigned int>::RLEKeyHolder<unsigned short>::RLEKeyIterator::~RLEKeyIterator()
{
}

uint64_t SIValueSet<unsigned int>::applyFun(unsigned int *a1, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v4 = a2;
    do
    {
      unsigned int v6 = *a1++;
      SIValueSet<unsigned int>::_SIValueSetInnerInsert(*(void *)a3, v6, *(unsigned int *)(a3 + 8), *(void *)(a3 + 16));
      --v4;
    }
    while (v4);
  }
  return 0;
}

uint64_t SIValueSet<unsigned int>::BitmapHolder::AddSortedKeysWithContext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = *(int **)a2;
  if (*(void *)a2 < *(void *)(a2 + 8))
  {
    while ((*(_DWORD *)(a2 + 20) & *v3) == *(_DWORD *)(a2 + 16))
    {
      unsigned int Key = SIValueSet<unsigned int>::FlatContextWithPfx::nextKey((int **)a2);
      uint64_t v8 = a1 + ((uint64_t)((unint64_t)((__int16)Key >> 6) << 48) >> 45);
      uint64_t v11 = *(void *)(v8 + 8);
      uint64_t v9 = (uint64_t *)(v8 + 8);
      uint64_t v10 = v11;
      if (((1 << Key) & v11) == 0)
      {
        uint64_t *v9 = (1 << Key) | v10;
        return 1;
      }
      if (a3) {
        SIValueSet<unsigned int>::SIValueSetInsert(*(unsigned int **)(a3 + 8), *(_DWORD *)a3 | Key);
      }
      unint64_t v3 = *(int **)a2;
      if (*(void *)a2 >= *(void *)(a2 + 8)) {
        return 0;
      }
    }
  }
  return 0;
}

uint64_t SIValueSet<unsigned int>::BitmapHolder::ContainsKey(uint64_t a1, int a2, int a3)
{
  return (*(void *)(a1 + 8 * ((a3 & a2) << 16 >> 22) + 8) >> (a3 & a2)) & 1;
}

uint64_t SIValueSet<unsigned int>::BitmapHolder::CloseKey(uint64_t a1, uint64_t a2, __int16 a3)
{
  if ((*(void *)(a1 + 8 * ((__int16)(a3 & a2) >> 6) + 8) >> (a3 & a2))) {
    return a2;
  }
  LODWORD(v3) = a2;
  LOWORD(v4) = a3 & a2;
  while (1)
  {
    int v4 = (__int16)(v4 + 1);
    if (v4 >= 64) {
      break;
    }
    uint64_t v3 = (v3 + 1);
    if ((*(void *)(a1 + 8 * (v4 >> 6) + 8) >> v4)) {
      return v3;
    }
  }
  unsigned int v5 = (unsigned __int16)(a3 & a2);
  LODWORD(v3) = a2;
  while ((__int16)v5 >= 1)
  {
    --v5;
    uint64_t v3 = (v3 - 1);
    if ((*(void *)(a1 + 8 * (v5 >> 6) + 8) >> v5)) {
      return v3;
    }
  }
  return 0;
}

BOOL SIValueSet<unsigned int>::BitmapHolder::RemoveKey(uint64_t a1, int a2, int a3)
{
  uint64_t v3 = 1 << (a3 & a2);
  uint64_t v4 = a1 + 8 * ((a3 & a2) << 16 >> 22);
  uint64_t v7 = *(void *)(v4 + 8);
  unsigned int v5 = (uint64_t *)(v4 + 8);
  uint64_t v6 = v7;
  uint64_t v8 = v7 & v3;
  if ((v7 & v3) != 0) {
    *unsigned int v5 = v6 ^ v3;
  }
  return v8 != 0;
}

uint64_t SIValueSet<unsigned int>::BitmapHolder::Apply(uint64_t a1, uint64_t a2, int a3, uint64_t (*a4)(char *, uint64_t, uint64_t), uint64_t a5)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  MEMORY[0x1F4188790](a1);
  uint64_t v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  bzero(v11, v10);
  uint64_t v19 = a1 + 8;
  uint64_t v20 = 0;
  uint64_t v18 = 0;
  uint64_t result = SIValueSet<unsigned int>::BitmapHolder::BitmapHolderContext::hasMore((uint64_t)&v18);
  uint64_t v13 = 0;
  if (result)
  {
    uint64_t v13 = 0;
    do
    {
      __int16 v14 = v20;
      if ((__int16)v20 > 4095)
      {
LABEL_6:
        int v17 = 0;
      }
      else
      {
        while (1)
        {
          unint64_t v15 = *(void *)(v19 + 8 * (v14 >> 6));
          if (v15) {
            break;
          }
          int v16 = v14;
          v14 += 64;
          LOWORD(v2std::unique_ptr<SIResourcePool>::reset[abi:ne180100](this, 0) = v14;
          if (v16 >= 4032) {
            goto LABEL_6;
          }
        }
        if (((v15 >> v14) & 1) == 0)
        {
          while (1)
            ;
        }
        LOWORD(v2std::unique_ptr<SIResourcePool>::reset[abi:ne180100](this, 0) = v14 + 1;
        int v17 = v18 | v14;
      }
      *(_DWORD *)&v11[4 * v13++] = v17 | a3;
      if (v13 == a2)
      {
        uint64_t result = a4(v11, a2, a5);
        if (result) {
          return result;
        }
        uint64_t v13 = 0;
      }
      uint64_t result = SIValueSet<unsigned int>::BitmapHolder::BitmapHolderContext::hasMore((uint64_t)&v18);
    }
    while ((result & 1) != 0);
  }
  if (v13) {
    return a4(v11, v13, a5);
  }
  return result;
}

uint64_t SIValueSet<unsigned int>::BitmapHolder::IsEmpty(uint64_t a1)
{
  v2[0] = 0;
  v2[1] = a1 + 8;
  v2[2] = 0;
  return SIValueSet<unsigned int>::BitmapHolder::BitmapHolderContext::hasMore((uint64_t)v2) ^ 1;
}

uint64_t SIValueSet<unsigned int>::BitmapHolder::GetRawCount()
{
  return 61;
}

uint64_t SIValueSet<unsigned int>::BitmapHolder::Serialize(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, void))(*(void *)a2 + 8))(a2, 0);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 16);

  return v4(a2, a1 + 8, 512);
}

void SIValueSet<unsigned int>::BitmapHolder::~BitmapHolder()
{
}

uint64_t SIValueSet<unsigned int>::BitmapHolder::valueIterator(uint64_t a1, int a2, uint64_t a3)
{
  *(void *)a3 = &unk_1F181D6B8;
  *(_DWORD *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = a1 + 8;
  *(_WORD *)(a3 + 24) = 0;
  *(_DWORD *)(a3 + 32) = a2;
  return a3;
}

uint64_t SIValueSet<unsigned int>::BitmapHolder::BitmapHolderContext::hasMore(uint64_t a1)
{
  int v1 = *(__int16 *)(a1 + 16);
  if (v1 > 4095) {
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 8);
  while (1)
  {
    unint64_t v3 = *(void *)(v2 + 8 * ((__int16)v1 >> 6));
    if (v3) {
      break;
    }
    v1 += 64;
    *(_WORD *)(a1 + 16) = v1;
LABEL_9:
    if ((__int16)v1 >= 4096) {
      return 0;
    }
  }
  uint64_t v4 = v1 & 0x3F;
  while (((v3 >> v4) & 1) == 0)
  {
    *(_WORD *)(a1 + 16) = ++v1;
    if (++v4 == 64) {
      goto LABEL_9;
    }
  }
  return 1;
}

uint64_t SIValueSet<unsigned int>::BitmapHolder::BitmapHolderContext::nextKey(int *a1)
{
  int v1 = *((__int16 *)a1 + 8);
  if (v1 > 4095) {
    return 0;
  }
  uint64_t v2 = *((void *)a1 + 1);
  while (1)
  {
    int v3 = (__int16)v1;
    if (*(void *)(v2 + 8 * ((__int16)v1 >> 6))) {
      break;
    }
    LOWORD(v1) = v1 + 64;
    *((_WORD *)a1 + 8) = v1;
    if (v3 >= 4032) {
      return 0;
    }
  }
  int v5 = *a1;
  *((_WORD *)a1 + 8) = v1 + 1;
  return v5 | (__int16)v1;
}

uint64_t SIValueSet<unsigned int>::BitmapHolder::BitmapIterator::nextKey(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 32);
  return SIValueSet<unsigned int>::BitmapHolder::BitmapHolderContext::nextKey((int *)(a1 + 8)) | v1;
}

uint64_t SIValueSet<unsigned int>::BitmapHolder::BitmapIterator::hasMore(uint64_t a1)
{
  return SIValueSet<unsigned int>::BitmapHolder::BitmapHolderContext::hasMore(a1 + 8);
}

void SIValueSet<unsigned int>::BitmapHolder::BitmapIterator::~BitmapIterator()
{
}

uint64_t SIValueSet<unsigned long long>::_SIValueSetInnerContains(uint64_t a1, unint64_t a2, int a3)
{
  uint64_t result = *(void *)(a1 + 8 * ((a2 >> ((60 - 4 * a3) & 0xFC)) & 0xF));
  if (result)
  {
    int v4 = a3 + 2;
    do
      uint64_t result = *(void *)((result & 0xFFFFFFFFFFFFFFFELL) + 8 * ((a2 >> ((64 - 4 * v4++) & 0xFC)) & 0xF));
    while ((result & 1) != 0);
  }
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 16))();
  }
  return result;
}

uint64_t SIValueSet<unsigned long long>::_SIValueSetInnerInsert(unint64_t a1, unint64_t a2, int a3, uint64_t a4)
{
  int v5 = a3;
  unsigned __int16 v7 = 60 - 4 * a3;
  char v8 = (60 - 4 * a3) & 0xFC;
  uint64_t v9 = (a2 >> v8) & 0xF;
  unint64_t v10 = *(void *)(a1 + 8 * v9);
  if (v10)
  {
    do
    {
      unint64_t v11 = v10 & 0xFFFFFFFFFFFFFFFELL;
      unsigned __int16 v7 = 56 - 4 * v5;
      char v8 = (56 - 4 * v5) & 0xFC;
      uint64_t v9 = (a2 >> v8) & 0xF;
      unint64_t v10 = *(void *)((v10 & 0xFFFFFFFFFFFFFFFELL) + 8 * v9);
      ++v5;
    }
    while ((v10 & 1) != 0);
  }
  else
  {
    unint64_t v11 = a1;
  }
  if ((__int16)v7 < 13)
  {
    if (!v10)
    {
      unint64_t v10 = (unint64_t)CFAllocatorAllocate(*(CFAllocatorRef *)(a4 + 16), 520, 0);
      *(void *)unint64_t v10 = &unk_1F181D968;
      *(_OWORD *)(v10 + 24) = 0u;
      *(_OWORD *)(v10 + 4std::unique_ptr<SIResourcePool>::reset[abi:ne180100](this, 0) = 0u;
      *(_OWORD *)(v10 + 56) = 0u;
      *(_OWORD *)(v10 + 72) = 0u;
      *(_OWORD *)(v10 + 88) = 0u;
      *(_OWORD *)(v10 + 104) = 0u;
      *(_OWORD *)(v10 + 12std::unique_ptr<SIResourcePool>::reset[abi:ne180100](this, 0) = 0u;
      *(_OWORD *)(v10 + 136) = 0u;
      *(_OWORD *)(v10 + 152) = 0u;
      *(_OWORD *)(v10 + 168) = 0u;
      *(_OWORD *)(v10 + 184) = 0u;
      *(_OWORD *)(v10 + 20std::unique_ptr<SIResourcePool>::reset[abi:ne180100](this, 0) = 0u;
      *(_OWORD *)(v10 + 216) = 0u;
      *(_OWORD *)(v10 + 232) = 0u;
      *(_OWORD *)(v10 + 248) = 0u;
      *(_OWORD *)(v10 + 8) = 0u;
      *(_OWORD *)(v10 + 264) = 0u;
      *(_OWORD *)(v10 + 28std::unique_ptr<SIResourcePool>::reset[abi:ne180100](this, 0) = 0u;
      *(_OWORD *)(v10 + 296) = 0u;
      *(_OWORD *)(v10 + 312) = 0u;
      *(_OWORD *)(v10 + 328) = 0u;
      *(_OWORD *)(v10 + 344) = 0u;
      *(_OWORD *)(v10 + 36std::unique_ptr<SIResourcePool>::reset[abi:ne180100](this, 0) = 0u;
      *(_OWORD *)(v10 + 376) = 0u;
      *(_OWORD *)(v10 + 392) = 0u;
      *(_OWORD *)(v10 + 408) = 0u;
      *(_OWORD *)(v10 + 424) = 0u;
      *(_OWORD *)(v10 + 44std::unique_ptr<SIResourcePool>::reset[abi:ne180100](this, 0) = 0u;
      *(_OWORD *)(v10 + 456) = 0u;
      *(_OWORD *)(v10 + 472) = 0u;
      *(_OWORD *)(v10 + 488) = 0u;
      *(_OWORD *)(v10 + 504) = 0u;
      *(void *)(v11 + 8 * v9) = v10;
    }
    int v13 = a2 & ~(-1 << v8);
    int v14 = (__int16)v13 >> 6;
    uint64_t v15 = 1 << v13;
    int v16 = (char *)(v10 + 8 * (__int16)v14);
    uint64_t v19 = *((void *)v16 + 1);
    int v17 = (uint64_t *)(v16 + 8);
    uint64_t v18 = v19;
    if ((v19 & v15) != 0)
    {
      return 0;
    }
    else
    {
      *int v17 = v18 | v15;
      return 1;
    }
  }
  else
  {
    if (v10)
    {
      unint64_t v12 = *(uint64_t (***)(void *, unint64_t, uint64_t))v10;
    }
    else
    {
      if (v7 < 0x20u)
      {
        CFAllocatorRef v21 = *(const __CFAllocator **)(a4 + 16);
        if (v7 < 0x10u)
        {
          unint64_t v10 = (unint64_t)CFAllocatorAllocate(v21, 136, 0);
          unint64_t v12 = (uint64_t (**)(void *, unint64_t, uint64_t))&unk_1F181DAA8;
          *(void *)unint64_t v10 = &unk_1F181DAA8;
          *(_OWORD *)(v10 + 8) = 0u;
          *(_OWORD *)(v10 + 24) = 0u;
          *(_OWORD *)(v10 + 4std::unique_ptr<SIResourcePool>::reset[abi:ne180100](this, 0) = 0u;
          *(_OWORD *)(v10 + 56) = 0u;
          *(_OWORD *)(v10 + 72) = 0u;
          *(_OWORD *)(v10 + 88) = 0u;
          *(_OWORD *)(v10 + 104) = 0u;
          *(_OWORD *)(v10 + 12std::unique_ptr<SIResourcePool>::reset[abi:ne180100](this, 0) = 0u;
        }
        else
        {
          unint64_t v10 = (unint64_t)CFAllocatorAllocate(v21, 264, 0);
          unint64_t v12 = (uint64_t (**)(void *, unint64_t, uint64_t))&unk_1F181DA08;
          *(void *)unint64_t v10 = &unk_1F181DA08;
          *(_OWORD *)(v10 + 8) = 0u;
          *(_OWORD *)(v10 + 24) = 0u;
          *(_OWORD *)(v10 + 4std::unique_ptr<SIResourcePool>::reset[abi:ne180100](this, 0) = 0u;
          *(_OWORD *)(v10 + 56) = 0u;
          *(_OWORD *)(v10 + 72) = 0u;
          *(_OWORD *)(v10 + 88) = 0u;
          *(_OWORD *)(v10 + 104) = 0u;
          *(_OWORD *)(v10 + 12std::unique_ptr<SIResourcePool>::reset[abi:ne180100](this, 0) = 0u;
          *(_OWORD *)(v10 + 136) = 0u;
          *(_OWORD *)(v10 + 152) = 0u;
          *(_OWORD *)(v10 + 168) = 0u;
          *(_OWORD *)(v10 + 184) = 0u;
          *(_OWORD *)(v10 + 20std::unique_ptr<SIResourcePool>::reset[abi:ne180100](this, 0) = 0u;
          *(_OWORD *)(v10 + 216) = 0u;
          *(_OWORD *)(v10 + 232) = 0u;
          *(_OWORD *)(v10 + 248) = 0u;
        }
      }
      else
      {
        unint64_t v10 = (unint64_t)CFAllocatorAllocate(*(CFAllocatorRef *)(a4 + 16), 520, 0);
        unint64_t v12 = (uint64_t (**)(void *, unint64_t, uint64_t))&unk_1F181DB48;
        *(void *)unint64_t v10 = &unk_1F181DB48;
        *(_OWORD *)(v10 + 24) = 0u;
        *(_OWORD *)(v10 + 4std::unique_ptr<SIResourcePool>::reset[abi:ne180100](this, 0) = 0u;
        *(_OWORD *)(v10 + 56) = 0u;
        *(_OWORD *)(v10 + 72) = 0u;
        *(_OWORD *)(v10 + 88) = 0u;
        *(_OWORD *)(v10 + 104) = 0u;
        *(_OWORD *)(v10 + 12std::unique_ptr<SIResourcePool>::reset[abi:ne180100](this, 0) = 0u;
        *(_OWORD *)(v10 + 136) = 0u;
        *(_OWORD *)(v10 + 152) = 0u;
        *(_OWORD *)(v10 + 168) = 0u;
        *(_OWORD *)(v10 + 184) = 0u;
        *(_OWORD *)(v10 + 20std::unique_ptr<SIResourcePool>::reset[abi:ne180100](this, 0) = 0u;
        *(_OWORD *)(v10 + 216) = 0u;
        *(_OWORD *)(v10 + 232) = 0u;
        *(_OWORD *)(v10 + 248) = 0u;
        *(_OWORD *)(v10 + 8) = 0u;
        *(_OWORD *)(v10 + 264) = 0u;
        *(_OWORD *)(v10 + 28std::unique_ptr<SIResourcePool>::reset[abi:ne180100](this, 0) = 0u;
        *(_OWORD *)(v10 + 296) = 0u;
        *(_OWORD *)(v10 + 312) = 0u;
        *(_OWORD *)(v10 + 328) = 0u;
        *(_OWORD *)(v10 + 344) = 0u;
        *(_OWORD *)(v10 + 36std::unique_ptr<SIResourcePool>::reset[abi:ne180100](this, 0) = 0u;
        *(_OWORD *)(v10 + 376) = 0u;
        *(_OWORD *)(v10 + 392) = 0u;
        *(_OWORD *)(v10 + 408) = 0u;
        *(_OWORD *)(v10 + 424) = 0u;
        *(_OWORD *)(v10 + 44std::unique_ptr<SIResourcePool>::reset[abi:ne180100](this, 0) = 0u;
        *(_OWORD *)(v10 + 456) = 0u;
        *(_OWORD *)(v10 + 472) = 0u;
        *(_OWORD *)(v10 + 488) = 0u;
        *(_OWORD *)(v10 + 504) = 0u;
      }
      *(void *)(v11 + 8 * v9) = v10;
    }
    uint64_t v20 = (*v12)((void *)v10, a2, ~(-1 << v8));
    if ((unint64_t)(*(uint64_t (**)(unint64_t))(*(void *)v10 + 56))(v10) >= 0x3E) {
      *(void *)(v11 + 8 * v9) = SIValueSet<unsigned long long>::_SIValueSetBurstRLE((void *)v10, v5, a4);
    }
  }
  return v20;
}

uint64_t SIValueSet<unsigned long long>::_SIValueSetBurstRLE(void *a1, int a2, uint64_t a3)
{
  uint64_t v6 = (_OWORD *)SIValueSet<unsigned int>::CombLevel_s::malloc_chain_s::chain_alloc_level(a3);
  unint64_t v7 = (unint64_t)v6;
  uint64_t v8 = 0;
  *uint64_t v6 = 0u;
  v6[1] = 0u;
  gid_t v6[2] = 0u;
  void v6[3] = 0u;
  v6[4] = 0u;
  void v6[5] = 0u;
  v6[6] = 0u;
  v6[7] = 0u;
  v11[0] = v6;
  v11[1] = (a2 + 1);
  v11[2] = a3;
  do
  {
    if (*(void *)((char *)v6 + v8)) {
      SIValueSet<unsigned int>::_SIValueSetBurstRLE();
    }
    v8 += 8;
  }
  while (v8 != 128);
  int v9 = 64 - 4 * (a2 + 1);
  if (v9 <= 31)
  {
    if (v9 < 16) {
      SIValueSet<unsigned long long>::RLEKeyHolder<unsigned short>::Apply((uint64_t)a1, 128, 0, (void (*)(char *, uint64_t, uint64_t))SIValueSet<unsigned long long>::applyFun, (uint64_t)v11);
    }
    else {
      SIValueSet<unsigned long long>::RLEKeyHolder<unsigned int>::Apply((uint64_t)a1, 128, 0, (void (*)(char *, uint64_t, uint64_t))SIValueSet<unsigned long long>::applyFun, (uint64_t)v11);
    }
  }
  else
  {
    SIValueSet<unsigned long long>::RLEKeyHolder<unsigned long long>::Apply((uint64_t)a1, 128, 0, (void (*)(char *, uint64_t, uint64_t))SIValueSet<unsigned long long>::applyFun, (uint64_t)v11);
  }
  (*(void (**)(void *))(*(void *)a1 + 72))(a1);
  CFAllocatorDeallocate(*(CFAllocatorRef *)(a3 + 16), a1);
  return v7 | 1;
}

BOOL SIValueSet<unsigned long long>::BitmapHolder::AddKey(uint64_t a1, int a2, int a3)
{
  uint64_t v3 = 1 << (a3 & a2);
  uint64_t v4 = a1 + ((uint64_t)((unint64_t)((a3 & a2) << 16 >> 22) << 48) >> 45);
  uint64_t v7 = *(void *)(v4 + 8);
  int v5 = (uint64_t *)(v4 + 8);
  uint64_t v6 = v7;
  uint64_t v8 = v7 & v3;
  if ((v7 & v3) == 0) {
    *int v5 = v6 | v3;
  }
  return v8 == 0;
}

BOOL SIValueSet<unsigned long long>::RLEKeyHolder<unsigned long long>::AddKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a3 & a2;
  v4[0] = (unint64_t *)&v5;
  v4[1] = (unint64_t *)&vars0;
  return SIValueSet<unsigned long long>::RLEKeyHolder<unsigned long long>::AddSortedValuesWithContext<SIValueSet<unsigned long long>::FlatContext,SIValueSet<unsigned long long>::RLEKeyHolder<unsigned long long>::InertContext>(a1, v4) != 0;
}

uint64_t SIValueSet<unsigned long long>::RLEKeyHolder<unsigned long long>::ContainsKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = a2 & a3 & 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v4 = (unint64_t *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 8);
  unint64_t v6 = a1 + 16 + 8 * v5;
  uint64_t v7 = 8 * v5;
  if (v5 >= 1 && (unint64_t)v7 >= 0x18)
  {
    unint64_t v9 = a1 + 16 + 8 * v5;
    do
    {
      unint64_t v10 = &v4[v7 >> 4];
      unint64_t v11 = *v10;
      if ((*v10 & 0x8000000000000000) != 0)
      {
        unint64_t v12 = *--v10;
        unint64_t v11 = v12;
      }
      if (v10 <= v4) {
        break;
      }
      if (v11 == v3)
      {
        uint64_t v4 = v10;
        break;
      }
      if (v11 > v3) {
        unint64_t v9 = (unint64_t)v10;
      }
      else {
        uint64_t v4 = v10;
      }
      uint64_t v7 = v9 - (void)v4;
      if (v9 > (unint64_t)v4)
      {
        BOOL v13 = (unint64_t)v7 >= 0x17;
        BOOL v14 = v7 == 23;
      }
      else
      {
        BOOL v13 = 0;
        BOOL v14 = 0;
      }
    }
    while (!v14 && v13);
  }
  if ((unint64_t)v4 >= v6) {
    return 0;
  }
  unint64_t v15 = *v4;
  if (*v4 != v3)
  {
    int v16 = v4 + 1;
    do
    {
      if ((v15 & 0x8000000000000000) != 0)
      {
        unint64_t v18 = *(v16 - 2);
        unint64_t v19 = v18 + (v15 & 0x7FFFFFFFFFFFFFFFLL);
        if (v3 >= v18)
        {
          BOOL v20 = v3 >= v19;
          BOOL v21 = v3 == v19;
        }
        else
        {
          BOOL v20 = 1;
          BOOL v21 = 0;
        }
        if (v21 || !v20) {
          return 1;
        }
        if ((unint64_t)v16 >= v6) {
          return 0;
        }
      }
      else
      {
        uint64_t result = 0;
        if (v15 > v3 || (unint64_t)v16 >= v6) {
          return result;
        }
      }
      unint64_t v22 = *v16++;
      unint64_t v15 = v22;
    }
    while (v22 != v3);
  }
  return 1;
}

uint64_t SIValueSet<unsigned long long>::RLEKeyHolder<unsigned long long>::CloseKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    return 0;
  }
  unint64_t v4 = a2 & a3 & 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v5 = (unint64_t *)(a1 + 16);
  unint64_t v6 = a1 + 16 + 8 * v3;
  uint64_t v7 = 8 * v3;
  if (v3 >= 1 && (unint64_t)v7 >= 0x18)
  {
    unint64_t v9 = a1 + 16 + 8 * v3;
    do
    {
      unint64_t v10 = &v5[v7 >> 4];
      unint64_t v11 = *v10;
      if ((*v10 & 0x8000000000000000) != 0)
      {
        unint64_t v12 = *--v10;
        unint64_t v11 = v12;
      }
      if (v10 <= v5) {
        break;
      }
      if (v11 == v4)
      {
        uint64_t v5 = v10;
        break;
      }
      if (v11 > v4) {
        unint64_t v9 = (unint64_t)v10;
      }
      else {
        uint64_t v5 = v10;
      }
      uint64_t v7 = v9 - (void)v5;
    }
    while (v9 > (unint64_t)v5 && (unint64_t)v7 > 0x17);
  }
  if ((unint64_t)v5 >= v6)
  {
LABEL_34:
    unint64_t v14 = *(void *)(a1 + 8 * v3 + 8);
    if ((v14 & 0x8000000000000000) != 0) {
      return *(void *)(a1 + 8 * v3) + (v14 & 0x7FFFFFFFFFFFFFFFLL);
    }
  }
  else
  {
    unint64_t v15 = v5;
    while (1)
    {
      unint64_t v16 = *v15++;
      unint64_t v14 = v16;
      if (v16 == v4) {
        return a2 & a3 & 0x7FFFFFFFFFFFFFFFLL;
      }
      if ((v14 & 0x8000000000000000) != 0)
      {
        unint64_t v17 = *(v5 - 1);
        unint64_t v18 = v17 + (v14 & 0x7FFFFFFFFFFFFFFFLL);
        if (v4 >= v17 && v4 <= v18) {
          return a2 & a3 & 0x7FFFFFFFFFFFFFFFLL;
        }
      }
      else if (v14 > v4)
      {
        return v14;
      }
      uint64_t v5 = v15;
      if ((unint64_t)v15 >= v6) {
        goto LABEL_34;
      }
    }
  }
  return v14;
}

uint64_t SIValueSet<unsigned long long>::RLEKeyHolder<unsigned long long>::RemoveKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4 = a2 & a3 & 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v5 = (unint64_t *)(a1 + 16);
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = a1 + 16 + 8 * v6;
  uint64_t v8 = 8 * v6;
  if (v6 >= 1 && (unint64_t)v8 >= 0x18)
  {
    unint64_t v10 = a1 + 16 + 8 * v6;
    do
    {
      unint64_t v11 = &v5[v8 >> 4];
      unint64_t v12 = *v11;
      if ((*v11 & 0x8000000000000000) != 0)
      {
        unint64_t v13 = *--v11;
        unint64_t v12 = v13;
      }
      if (v11 <= v5) {
        break;
      }
      if (v12 == v4)
      {
        uint64_t v5 = v11;
        break;
      }
      if (v12 > v4) {
        unint64_t v10 = (unint64_t)v11;
      }
      else {
        uint64_t v5 = v11;
      }
      uint64_t v8 = v10 - (void)v5;
    }
    while (v10 > (unint64_t)v5 && (unint64_t)v8 > 0x17);
  }
  if ((unint64_t)v5 >= v7) {
    return 0;
  }
  unint64_t v15 = v5 + 1;
  unint64_t v16 = *v5;
  if (*v5 != v4)
  {
    uint64_t v17 = 0;
    while (1)
    {
      unint64_t v18 = &v5[v17 + 1];
      if ((v16 & 0x8000000000000000) != 0)
      {
        unint64_t v20 = v5[v17 - 1];
        unint64_t v21 = v20 + (v16 & 0x7FFFFFFFFFFFFFFFLL);
        if (v4 > v20 && v4 <= v21)
        {
          unsigned int v25 = &v5[v17];
          unint64_t v26 = &v5[v17 + 1];
          if ((v16 & 0x7FFFFFFFFFFFFFFFLL) == 1)
          {
            if ((unint64_t)v26 < v7)
            {
              size_t v24 = a1 + 8 * v6 - (void)v5 - v17 * 8 + 8;
              unint64_t v15 = &v5[v17 + 1];
LABEL_45:
              memmove(v25, v15, v24);
              uint64_t v6 = *(void *)(a1 + 8);
            }
            *(void *)(a1 + 8) = v6 - 1;
            return 1;
          }
          if (v4 == v21)
          {
            unint64_t *v25 = (v16 - 1) | 0x8000000000000000;
            return 1;
          }
          if (v4 == v20 + 1)
          {
            unint64_t *v25 = v4 + 1;
            unint64_t v27 = v21 + ~v4;
            if (!v27) {
              return 1;
            }
            unint64_t v28 = *(void *)(a1 + 8);
            if (v28 >= 0x3F) {
              SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::RemoveKey();
            }
            uint64_t v29 = (uint64_t)&v5[v17 - 1] - a1;
            uint64_t v30 = v29 >> 3;
            if (v28 != v29 >> 3)
            {
              unint64_t v31 = v28 - (v29 >> 3);
              int v32 = &v5[v17 + 2];
              goto LABEL_64;
            }
          }
          else
          {
            v5[v17] = (v4 + ~v20) | 0x8000000000000000;
            unint64_t v33 = *(void *)(a1 + 8);
            if (v33 >= 0x3F) {
              SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::RemoveKey();
            }
            BOOL v34 = (char *)v5 - a1;
            uint64_t v35 = (uint64_t)&v5[v17 - 1] - a1;
            uint64_t v36 = v35 >> 3;
            if (v33 != v35 >> 3)
            {
              memmove(&v5[v17 + 2], &v5[v17 + 1], 8 * (v33 - (v35 >> 3)));
              uint64_t v36 = *(void *)(a1 + 8);
            }
            *(void *)(a1 + 8) = v36 + 1;
            *unint64_t v26 = v4 + 1;
            unint64_t v27 = v21 + ~v4;
            if (!v27) {
              return 1;
            }
            unint64_t v37 = *(void *)(a1 + 8);
            if (v37 >= 0x3F) {
              SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::RemoveKey();
            }
            unint64_t v26 = &v5[v17 + 2];
            uint64_t v30 = (uint64_t)&v34[v17 * 8] >> 3;
            if (v37 != v30)
            {
              unint64_t v31 = v37 - ((uint64_t)&v34[v17 * 8] >> 3);
              int v32 = &v5[v17 + 3];
LABEL_64:
              memmove(v32, v26, 8 * v31);
              uint64_t v30 = *(void *)(a1 + 8);
            }
          }
          *(void *)(a1 + 8) = v30 + 1;
          *unint64_t v26 = v27 | 0x8000000000000000;
          return 1;
        }
        if ((unint64_t)v18 >= v7) {
          return 0;
        }
      }
      else
      {
        uint64_t result = 0;
        if (v16 > v4 || (unint64_t)v18 >= v7) {
          return result;
        }
      }
      unint64_t v16 = *v18;
      ++v17;
      if (*v18 == v4)
      {
        uint64_t v5 = (unint64_t *)((char *)v5 + v17 * 8);
        unint64_t v15 = v5 + 1;
        break;
      }
    }
  }
  if ((unint64_t)v15 >= v7)
  {
    *(void *)(a1 + 8) = v6 - 1;
  }
  else
  {
    unint64_t v23 = *v15;
    if ((*v15 & 0x8000000000000000) == 0)
    {
      size_t v24 = v7 - (void)v15;
      unsigned int v25 = v5;
      goto LABEL_45;
    }
    *uint64_t v5 = v4 + 1;
    if ((v23 & 0x7FFFFFFFFFFFFFFFLL) == 1)
    {
      size_t v24 = v7 - (void)(v5 + 2);
      unsigned int v25 = v15;
      unint64_t v15 = v5 + 2;
      goto LABEL_45;
    }
    *unint64_t v15 = (v23 - 1) | 0x8000000000000000;
  }
  return 1;
}

void SIValueSet<unsigned long long>::RLEKeyHolder<unsigned long long>::Apply(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(char *, uint64_t, uint64_t), uint64_t a5)
{
  v19[1] = *MEMORY[0x1E4F143B8];
  uint64_t v9 = MEMORY[0x1F4188790](a1);
  unint64_t v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v12 = *(void *)(v9 + 8);
  if (v12 > 0x3F) {
    return;
  }
  unint64_t v13 = (uint64_t *)(v9 + 16);
  unint64_t v14 = v9 + 16 + 8 * v12;
  bzero((char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v10);
  uint64_t v15 = 0;
  uint64_t v16 = 0;
LABEL_3:
  uint64_t v17 = 0;
  while (v16)
  {
    --v16;
    ++v15;
LABEL_15:
    *(void *)&v11[8 * v17++] = v15 | a3;
    if (v17 == a2)
    {
      a4(v11, a2, a5);
      goto LABEL_3;
    }
  }
  if ((unint64_t)v13 < v14)
  {
    unint64_t v18 = v13 + 1;
    uint64_t v15 = *v13;
    if ((unint64_t)(v13 + 1) >= v14)
    {
      uint64_t v16 = 0;
      ++v13;
    }
    else
    {
      if (*v18 < 0) {
        v13 += 2;
      }
      else {
        ++v13;
      }
      if (*v18 < 0) {
        uint64_t v16 = *v18 & 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        uint64_t v16 = 0;
      }
    }
    goto LABEL_15;
  }
  if (v17) {
    a4(v11, v17, a5);
  }
}

BOOL SIValueSet<unsigned long long>::RLEKeyHolder<unsigned long long>::IsEmpty(uint64_t a1)
{
  return *(void *)(a1 + 8) == 0;
}

uint64_t SIValueSet<unsigned long long>::RLEKeyHolder<unsigned long long>::GetRawCount(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t SIValueSet<unsigned long long>::RLEKeyHolder<unsigned long long>::Serialize(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 8))(a2, 8);
  (*(void (**)(uint64_t, void))(*(void *)a2 + 8))(a2, *(unsigned int *)(a1 + 8));
  uint64_t v4 = 8 * *(void *)(a1 + 8);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 16);

  return v5(a2, a1 + 16, v4);
}

void SIValueSet<unsigned long long>::RLEKeyHolder<unsigned long long>::~RLEKeyHolder()
{
}

void *SIValueSet<unsigned long long>::RLEKeyHolder<unsigned long long>::valueIterator(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  *a3 = &unk_1F181DB18;
  a3[1] = a1 + 16;
  a3[2] = a1 + 16 + 8 * v3;
  a3[3] = 0;
  a3[4] = 0;
  a3[5] = a2;
  return a3;
}

uint64_t SIValueSet<unsigned long long>::RLEKeyHolder<unsigned long long>::AddSortedValuesWithContext<SIValueSet<unsigned long long>::FlatContext,SIValueSet<unsigned long long>::RLEKeyHolder<unsigned long long>::InertContext>(uint64_t a1, unint64_t **a2)
{
  if (*a2 >= a2[1]) {
    return 0;
  }
  unint64_t v3 = **a2;
  uint64_t v4 = (unint64_t *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 8);
  unint64_t v6 = a1 + 16 + 8 * v5;
  uint64_t v7 = 8 * v5;
  BOOL v8 = v5 >= 1 && (unint64_t)v7 >= 0x18;
  uint64_t v43 = a1 + 16;
  if (v8)
  {
    unint64_t v9 = a1 + 16 + 8 * v5;
    do
    {
      size_t v10 = &v4[v7 >> 4];
      unint64_t v11 = *v10;
      if ((*v10 & 0x8000000000000000) != 0)
      {
        unint64_t v12 = *--v10;
        unint64_t v11 = v12;
      }
      if (v10 <= v4) {
        break;
      }
      if (v11 == v3)
      {
        uint64_t v4 = v10;
        break;
      }
      if (v11 > v3) {
        unint64_t v9 = (unint64_t)v10;
      }
      else {
        uint64_t v4 = v10;
      }
      uint64_t v7 = v9 - (void)v4;
    }
    while (v9 > (unint64_t)v4 && (unint64_t)v7 > 0x17);
  }
  int v15 = 0;
  uint64_t v14 = 0;
  unint64_t v16 = a1 + 520;
  uint64_t v17 = v4;
  int v18 = 1;
  unint64_t v45 = a1 + 520;
  while (2)
  {
    unint64_t v19 = 0;
    uint64_t v20 = 0;
    unint64_t v21 = v4;
    while (1)
    {
      uint64_t v22 = v20;
      while ((unint64_t)v21 >= v6 || v3 < *v21)
      {
        if (v22)
        {
          int v23 = 1;
          if (v22 + v19 < v3) {
            goto LABEL_43;
          }
          unint64_t v24 = v3 + 1;
          if (v3 + 1 < v19) {
            goto LABEL_43;
          }
          uint64_t v25 = v22 + v19 - 1;
          BOOL v26 = v19 > v3;
          BOOL v27 = v19 > v3;
          if (v19 >= v3) {
            unint64_t v19 = v3;
          }
          if (v26) {
            uint64_t v22 = v25;
          }
          if (v24 <= v22 + v19)
          {
            uint64_t v28 = v27;
          }
          else
          {
            uint64_t v22 = v24 - v19;
            uint64_t v28 = 1;
          }
        }
        else
        {
          unint64_t v19 = v3;
          uint64_t v22 = 1;
          uint64_t v28 = 1;
        }
        uint64_t v29 = *a2 + 1;
        unint64_t v30 = **a2;
        *a2 = v29;
        if (v30 != v3) {
          SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::AddSortedValuesWithContext<SIValueSet<unsigned int>::FlatContext,SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::InertContext>();
        }
        v14 += v28;
        if (v29 >= a2[1])
        {
          int v23 = 0;
          ++v15;
          goto LABEL_43;
        }
        unint64_t v3 = *v29;
        ++v18;
        ++v15;
      }
      int v23 = 1;
LABEL_43:
      if ((unint64_t)v21 >= v6) {
        break;
      }
      unint64_t v31 = *v21;
      if ((unint64_t)(v21 + 1) >= v6)
      {
        uint64_t v33 = 1;
        uint64_t v20 = 1;
        if (!v22) {
          goto LABEL_62;
        }
      }
      else
      {
        uint64_t v32 = v21[1];
        if (v32 < 0) {
          uint64_t v33 = 2;
        }
        else {
          uint64_t v33 = 1;
        }
        if (v32 < 0) {
          uint64_t v20 = (v32 & 0x7FFFFFFFFFFFFFFFLL) + 1;
        }
        else {
          uint64_t v20 = 1;
        }
        if (!v22)
        {
LABEL_62:
          unint64_t v19 = *v21;
          goto LABEL_63;
        }
      }
      if (v22 + v19 < v31) {
        break;
      }
      unint64_t v34 = v20 + v31;
      if (v20 + v31 < v19) {
        break;
      }
      uint64_t v35 = v22 + v19 - v20;
      BOOL v36 = v19 > v31;
      if (v19 >= v31) {
        unint64_t v19 = *v21;
      }
      if (v36) {
        uint64_t v22 = v35;
      }
      if (v34 > v22 + v19) {
        uint64_t v20 = v34 - v19;
      }
      else {
        uint64_t v20 = v22;
      }
LABEL_63:
      v21 += v33;
      if (v3 <= v20 + v19) {
        char v37 = v23;
      }
      else {
        char v37 = 0;
      }
      if ((v37 & 1) == 0) {
        goto LABEL_69;
      }
    }
    uint64_t v20 = v22;
LABEL_69:
    uint64_t v38 = v20 - 1;
    if (v20 == 1)
    {
      if (v17 >= v21)
      {
        if (v6 + 16 > v16) {
          SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::AddSortedValuesWithContext<SIValueSet<unsigned int>::FlatContext,SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::InertContext>();
        }
        uint64_t v4 = (unint64_t *)(v16 - (v6 - (void)v21));
        if ((unint64_t *)v6 != v21)
        {
          memmove((void *)(v16 - (v6 - (void)v21)), v21, v6 - (void)v21);
          unint64_t v16 = v45;
        }
        unint64_t v6 = v16;
      }
      else
      {
        uint64_t v4 = v21;
      }
      *uint64_t v17 = v19;
LABEL_85:
      ++v17;
      if (v23)
      {
        if ((unint64_t)v17 + v6 - (void)v4 + 16 > v16) {
          goto LABEL_91;
        }
        continue;
      }
      unint64_t v21 = v4;
    }
    else
    {
      if (v20)
      {
        BOOL v39 = v17 + 1;
        if (v17 + 1 >= v21)
        {
          if (v6 + 16 > v16) {
            SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::AddSortedValuesWithContext<SIValueSet<unsigned int>::FlatContext,SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::InertContext>();
          }
          uint64_t v4 = (unint64_t *)(v16 - (v6 - (void)v21));
          if ((unint64_t *)v6 != v21)
          {
            uint64_t v44 = v38;
            memmove((void *)(v16 - (v6 - (void)v21)), v21, v6 - (void)v21);
            uint64_t v38 = v44;
            BOOL v39 = v17 + 1;
            unint64_t v16 = v45;
          }
          unint64_t v6 = v16;
        }
        else
        {
          uint64_t v4 = v21;
        }
        *uint64_t v17 = v19;
        v17[1] = v38 | 0x8000000000000000;
        uint64_t v17 = v39;
        goto LABEL_85;
      }
      uint64_t v4 = v21;
      if (v23)
      {
LABEL_91:
        if (v15 >= v18) {
          SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::AddSortedValuesWithContext<SIValueSet<unsigned int>::FlatContext,SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::InertContext>();
        }
        goto LABEL_94;
      }
    }
    break;
  }
  uint64_t v4 = v21;
  if (v15 != v18) {
    SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::AddSortedValuesWithContext<SIValueSet<unsigned int>::FlatContext,SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::InertContext>();
  }
LABEL_94:
  unint64_t v40 = v6 - (void)v4;
  if (v6 > (unint64_t)v4)
  {
    memmove(v17, v4, v6 - (void)v4);
    uint64_t v17 = (unint64_t *)((char *)v17 + v40);
  }
  *(void *)(a1 + 8) = ((uint64_t)v17 - v43) >> 3;
  return v14;
}

uint64_t SIValueSet<unsigned long long>::RLEKeyHolder<unsigned long long>::AddSortedValuesWithContext<SIValueSet<unsigned long long>::FlatContextWithPfx,SIValueSet<unsigned long long>::CollectorContext>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)a2 >= *(void *)(a2 + 8) || (*(void *)(a2 + 24) & **(void **)a2) != *(void *)(a2 + 16)) {
    return 0;
  }
  unint64_t v5 = SIValueSet<unsigned long long>::FlatContextWithPfx::peek((uint64_t **)a2);
  unint64_t v6 = v5;
  uint64_t v7 = *(void *)(a1 + 8);
  unint64_t v8 = a1 + 16 + 8 * v7;
  uint64_t v9 = 8 * v7;
  if (v7 >= 1 && (unint64_t)v9 >= 0x18)
  {
    unint64_t v14 = a1 + 16 + 8 * v7;
    unint64_t v11 = (unint64_t *)(a1 + 16);
    do
    {
      int v15 = &v11[v9 >> 4];
      unint64_t v16 = *v15;
      if ((*v15 & 0x8000000000000000) != 0)
      {
        unint64_t v17 = *--v15;
        unint64_t v16 = v17;
      }
      if (v15 <= v11) {
        break;
      }
      if (v16 == v5)
      {
        unint64_t v11 = v15;
        break;
      }
      if (v16 > v5) {
        unint64_t v14 = (unint64_t)v15;
      }
      else {
        unint64_t v11 = v15;
      }
      uint64_t v9 = v14 - (void)v11;
    }
    while (v14 > (unint64_t)v11 && (unint64_t)v9 > 0x17);
  }
  else
  {
    unint64_t v11 = (unint64_t *)(a1 + 16);
  }
  uint64_t v49 = a1;
  uint64_t v50 = a1 + 16;
  int v19 = 0;
  uint64_t v12 = 0;
  unint64_t v20 = a1 + 520;
  unint64_t v21 = v11;
  int v22 = 1;
  unint64_t v51 = v20;
  while (2)
  {
    unint64_t v52 = v21;
    unint64_t v23 = 0;
    uint64_t v24 = 0;
    uint64_t v25 = v11;
    while (1)
    {
      uint64_t v26 = v24;
      while ((unint64_t)v25 >= v8 || v6 < *v25)
      {
        if (v26)
        {
          int v27 = 1;
          if (v26 + v23 < v6) {
            goto LABEL_54;
          }
          unint64_t v28 = v6 + 1;
          if (v6 + 1 < v23) {
            goto LABEL_54;
          }
          uint64_t v29 = v26 + v23 - 1;
          BOOL v30 = v23 > v6;
          BOOL v31 = v23 > v6;
          if (v23 >= v6) {
            unint64_t v23 = v6;
          }
          if (!v30) {
            uint64_t v29 = v26;
          }
          if (v28 > v29 + v23) {
            uint64_t v26 = v28 - v23;
          }
          else {
            uint64_t v26 = v29;
          }
          int v32 = v28 > v29 + v23 || v31;
        }
        else
        {
          uint64_t v26 = 1;
          unint64_t v23 = v6;
          int v32 = 1;
        }
        if (SIValueSet<unsigned long long>::FlatContextWithPfx::nextKey((uint64_t **)a2) != v6) {
          SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::AddSortedValuesWithContext<SIValueSet<unsigned int>::FlatContext,SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::InertContext>();
        }
        if (v32)
        {
          ++v12;
        }
        else if (a3)
        {
          SIValueSet<unsigned long long>::SIValueSetInsert(*(unint64_t **)(a3 + 8), *(void *)a3 | v6);
        }
        if (*(void *)a2 >= *(void *)(a2 + 8))
        {
          int v27 = 0;
          ++v19;
          goto LABEL_54;
        }
        ++v19;
        if ((*(void *)(a2 + 24) & **(void **)a2) != *(void *)(a2 + 16))
        {
          int v27 = 0;
          goto LABEL_54;
        }
        unint64_t v6 = SIValueSet<unsigned long long>::FlatContextWithPfx::peek((uint64_t **)a2);
        ++v22;
      }
      int v27 = 1;
LABEL_54:
      if ((unint64_t)v25 >= v8) {
        break;
      }
      unint64_t v33 = *v25;
      if ((unint64_t)(v25 + 1) >= v8)
      {
        uint64_t v37 = 1;
        uint64_t v24 = 1;
        if (!v26) {
          goto LABEL_70;
        }
      }
      else
      {
        int64_t v34 = v25[1];
        uint64_t v35 = v34 & 0x7FFFFFFFFFFFFFFFLL;
        BOOL v36 = v34 >= 0;
        uint64_t v24 = 1;
        uint64_t v37 = 2;
        if (v36) {
          uint64_t v37 = 1;
        }
        else {
          uint64_t v24 = v35 + 1;
        }
        if (!v26)
        {
LABEL_70:
          unint64_t v23 = *v25;
          goto LABEL_71;
        }
      }
      if (v26 + v23 < v33) {
        break;
      }
      unint64_t v38 = v24 + v33;
      if (v24 + v33 < v23) {
        break;
      }
      uint64_t v24 = v26 + v23 - v24;
      BOOL v39 = v23 > v33;
      if (v23 >= v33) {
        unint64_t v23 = *v25;
      }
      if (!v39) {
        uint64_t v24 = v26;
      }
      if (v38 > v24 + v23) {
        uint64_t v24 = v38 - v23;
      }
LABEL_71:
      v25 += v37;
      if (v6 <= v24 + v23) {
        char v40 = v27;
      }
      else {
        char v40 = 0;
      }
      if ((v40 & 1) == 0) {
        goto LABEL_77;
      }
    }
    uint64_t v24 = v26;
LABEL_77:
    uint64_t v41 = v24 - 1;
    if (v24 == 1)
    {
      unint64_t v42 = v51;
      uint64_t v44 = v52;
      if (v52 >= v25)
      {
        if (v8 + 16 > v51) {
          SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::AddSortedValuesWithContext<SIValueSet<unsigned int>::FlatContext,SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::InertContext>();
        }
        unint64_t v11 = (unint64_t *)(v51 - (v8 - (void)v25));
        if ((unint64_t *)v8 != v25)
        {
          memmove((void *)(v51 - (v8 - (void)v25)), v25, v8 - (void)v25);
          unint64_t v11 = (unint64_t *)(v51 - (v8 - (void)v25));
          unint64_t v42 = v51;
          uint64_t v44 = v52;
        }
        unint64_t v8 = v42;
      }
      else
      {
        unint64_t v11 = v25;
      }
      unint64_t *v44 = v23;
LABEL_93:
      unint64_t v21 = v44 + 1;
      if (v27)
      {
        if ((unint64_t)v21 + v8 - (void)v11 + 16 > v42) {
          goto LABEL_99;
        }
        continue;
      }
      uint64_t v25 = v11;
    }
    else
    {
      unint64_t v42 = v51;
      unint64_t v21 = v52;
      if (v24)
      {
        uint64_t v43 = v52 + 1;
        if (v52 + 1 >= v25)
        {
          if (v8 + 16 > v51) {
            SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::AddSortedValuesWithContext<SIValueSet<unsigned int>::FlatContext,SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::InertContext>();
          }
          unint64_t v11 = (unint64_t *)(v51 - (v8 - (void)v25));
          size_t v45 = v8 - (void)v25;
          if ((unint64_t *)v8 != v25)
          {
            uint64_t v46 = (void *)(v51 - (v8 - (void)v25));
            memmove(v46, v25, v45);
            uint64_t v43 = v52 + 1;
            unint64_t v11 = (unint64_t *)v46;
            unint64_t v42 = v51;
            unint64_t v21 = v52;
          }
          unint64_t v8 = v42;
        }
        else
        {
          unint64_t v11 = v25;
        }
        *unint64_t v21 = v23;
        v21[1] = v41 | 0x8000000000000000;
        uint64_t v44 = v43;
        goto LABEL_93;
      }
      unint64_t v11 = v25;
      if (v27)
      {
LABEL_99:
        if (v19 >= v22) {
          SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::AddSortedValuesWithContext<SIValueSet<unsigned int>::FlatContext,SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::InertContext>();
        }
        goto LABEL_102;
      }
    }
    break;
  }
  unint64_t v11 = v25;
  if (v19 != v22) {
    SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::AddSortedValuesWithContext<SIValueSet<unsigned int>::FlatContext,SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::InertContext>();
  }
LABEL_102:
  unint64_t v47 = v8 - (void)v11;
  unint64_t v48 = v21;
  if (v8 > (unint64_t)v11)
  {
    memmove(v21, v11, v8 - (void)v11);
    unint64_t v48 = (unint64_t *)((char *)v48 + v47);
  }
  *(void *)(v49 + 8) = ((uint64_t)v48 - v50) >> 3;
  return v12;
}

uint64_t SIValueSet<unsigned long long>::FlatContextWithPfx::peek(uint64_t **a1)
{
  uint64_t v1 = **a1;
  uint64_t v2 = a1[3];
  if ((uint64_t *)((unint64_t)v2 & v1) != a1[2]) {
    SIValueSet<unsigned int>::FlatContextWithPfx::peek();
  }
  return v1 & ~(unint64_t)v2;
}

uint64_t SIValueSet<unsigned long long>::FlatContextWithPfx::nextKey(uint64_t **a1)
{
  uint64_t v1 = *(*a1)++;
  uint64_t v2 = a1[3];
  if ((uint64_t *)((unint64_t)v2 & v1) != a1[2]) {
    SIValueSet<unsigned int>::FlatContextWithPfx::nextKey();
  }
  return v1 & ~(unint64_t)v2;
}

uint64_t SIValueSet<unsigned long long>::RLEKeyHolder<unsigned long long>::RLEKeyIterator::nextKey(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  return SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::KeyHolderContext::nextKey((uint64_t **)(a1 + 8)) | v1;
}

BOOL SIValueSet<unsigned long long>::RLEKeyHolder<unsigned long long>::RLEKeyIterator::hasMore(void *a1)
{
  return a1[4] || a1[1] < a1[2];
}

void SIValueSet<unsigned long long>::RLEKeyHolder<unsigned long long>::RLEKeyIterator::~RLEKeyIterator()
{
}

BOOL SIValueSet<unsigned long long>::RLEKeyHolder<unsigned int>::AddKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a3 & a2;
  v4[0] = (unsigned int *)&v5;
  v4[1] = (unsigned int *)&vars0;
  return SIValueSet<unsigned long long>::RLEKeyHolder<unsigned int>::AddSortedValuesWithContext<SIValueSet<unsigned long long>::FlatContext,SIValueSet<unsigned long long>::RLEKeyHolder<unsigned int>::InertContext>(a1, v4) != 0;
}

uint64_t SIValueSet<unsigned long long>::RLEKeyHolder<unsigned int>::ContainsKey(uint64_t a1, int a2, int a3)
{
  unint64_t v3 = a2 & a3 & 0x7FFFFFFF;
  uint64_t v4 = (unsigned int *)(a1 + 12);
  uint64_t v5 = *(unsigned int *)(a1 + 8);
  unint64_t v6 = a1 + 12 + 4 * v5;
  if (v5 >= 3)
  {
    uint64_t v7 = 4 * v5;
    unint64_t v8 = a1 + 12 + 4 * v5;
    do
    {
      uint64_t v9 = &v4[v7 >> 3];
      unsigned int v10 = *v9;
      if ((*v9 & 0x80000000) != 0)
      {
        unsigned int v11 = *--v9;
        unsigned int v10 = v11;
      }
      if (v9 <= v4) {
        break;
      }
      if (v10 == v3)
      {
        uint64_t v4 = v9;
        break;
      }
      if (v10 > v3) {
        unint64_t v8 = (unint64_t)v9;
      }
      else {
        uint64_t v4 = v9;
      }
      uint64_t v7 = v8 - (void)v4;
    }
    while (v8 > (unint64_t)v4 && (unint64_t)v7 > 0xB);
  }
  if ((unint64_t)v4 >= v6) {
    return 0;
  }
  unint64_t v13 = *v4;
  if (v3 != v13)
  {
    unint64_t v14 = v4 + 1;
    do
    {
      if ((v13 & 0x80000000) != 0)
      {
        unint64_t v16 = *(v14 - 2);
        unint64_t v17 = v16 + (v13 & 0x7FFFFFFF);
        if (v3 >= v16 && v3 <= v17) {
          return 1;
        }
        if ((unint64_t)v14 >= v6) {
          return 0;
        }
      }
      else
      {
        uint64_t result = 0;
        if (v3 < v13 || (unint64_t)v14 >= v6) {
          return result;
        }
      }
      unsigned int v19 = *v14++;
      unint64_t v13 = v19;
    }
    while (v3 != v19);
  }
  return 1;
}

unint64_t SIValueSet<unsigned long long>::RLEKeyHolder<unsigned int>::CloseKey(uint64_t a1, int a2, int a3)
{
  uint64_t v3 = *(unsigned int *)(a1 + 8);
  if (!v3) {
    return 0;
  }
  unint64_t v4 = a2 & a3 & 0x7FFFFFFF;
  uint64_t v5 = (unsigned int *)(a1 + 12);
  unint64_t v6 = a1 + 12 + 4 * v3;
  if (v3 >= 3)
  {
    uint64_t v7 = 4 * v3;
    unint64_t v8 = a1 + 12 + 4 * v3;
    do
    {
      uint64_t v9 = &v5[v7 >> 3];
      unsigned int v10 = *v9;
      if ((*v9 & 0x80000000) != 0)
      {
        unsigned int v11 = *--v9;
        unsigned int v10 = v11;
      }
      if (v9 <= v5) {
        break;
      }
      if (v10 == v4)
      {
        uint64_t v5 = v9;
        break;
      }
      if (v10 > v4) {
        unint64_t v8 = (unint64_t)v9;
      }
      else {
        uint64_t v5 = v9;
      }
      uint64_t v7 = v8 - (void)v5;
    }
    while (v8 > (unint64_t)v5 && (unint64_t)v7 > 0xB);
  }
  if ((unint64_t)v5 >= v6)
  {
LABEL_30:
    unint64_t v13 = *(unsigned int *)(a1 + 4 * (v3 - 1) + 12);
    if ((v13 & 0x80000000) != 0) {
      return *(_DWORD *)(a1 + 4 * (v3 - 2) + 12) + (v13 & 0x7FFFFFFF);
    }
  }
  else
  {
    unint64_t v14 = v5;
    while (1)
    {
      unsigned int v15 = *v14++;
      unint64_t v13 = v15;
      if (v4 == v15) {
        return a2 & a3 & 0x7FFFFFFF;
      }
      if ((v13 & 0x80000000) != 0)
      {
        unint64_t v16 = *(v5 - 1);
        unint64_t v17 = v16 + (v13 & 0x7FFFFFFF);
        if (v4 >= v16 && v4 <= v17) {
          return a2 & a3 & 0x7FFFFFFF;
        }
      }
      else if (v4 < v13)
      {
        return v13;
      }
      uint64_t v5 = v14;
      if ((unint64_t)v14 >= v6) {
        goto LABEL_30;
      }
    }
  }
  return v13;
}

uint64_t SIValueSet<unsigned long long>::RLEKeyHolder<unsigned int>::RemoveKey(uint64_t a1, int a2, int a3)
{
  unint64_t v4 = a2 & a3 & 0x7FFFFFFF;
  uint64_t v5 = (unsigned int *)(a1 + 12);
  uint64_t v6 = *(unsigned int *)(a1 + 8);
  unint64_t v7 = a1 + 12 + 4 * v6;
  if (v6 >= 3)
  {
    uint64_t v8 = 4 * v6;
    unint64_t v9 = a1 + 12 + 4 * v6;
    do
    {
      unsigned int v10 = &v5[v8 >> 3];
      unsigned int v11 = *v10;
      if ((*v10 & 0x80000000) != 0)
      {
        unsigned int v12 = *--v10;
        unsigned int v11 = v12;
      }
      if (v10 <= v5) {
        break;
      }
      if (v11 == v4)
      {
        uint64_t v5 = v10;
        break;
      }
      if (v11 > v4) {
        unint64_t v9 = (unint64_t)v10;
      }
      else {
        uint64_t v5 = v10;
      }
      uint64_t v8 = v9 - (void)v5;
    }
    while (v9 > (unint64_t)v5 && (unint64_t)v8 > 0xB);
  }
  if ((unint64_t)v5 >= v7) {
    return 0;
  }
  unint64_t v14 = v5 + 1;
  unint64_t v15 = *v5;
  if (v4 == v15)
  {
LABEL_31:
    if ((unint64_t)v14 >= v7) {
      goto LABEL_41;
    }
    unsigned int v22 = *v14;
    if ((*v14 & 0x80000000) != 0)
    {
      *uint64_t v5 = v15 + 1;
      if ((v22 & 0x7FFFFFFF) != 1)
      {
        unsigned int *v14 = (v22 - 1) | 0x80000000;
        return 1;
      }
      size_t v23 = v7 - (void)(v5 + 2);
      uint64_t v24 = v14;
      unint64_t v14 = v5 + 2;
    }
    else
    {
      size_t v23 = v7 - (void)v14;
      uint64_t v24 = v5;
    }
    memmove(v24, v14, v23);
    int v25 = *(_DWORD *)(a1 + 8) - 1;
    goto LABEL_42;
  }
  uint64_t v16 = 0;
  while (1)
  {
    unint64_t v17 = &v5[v16 + 1];
    if ((v15 & 0x80000000) == 0)
    {
      uint64_t result = 0;
      if (v4 < v15 || (unint64_t)v17 >= v7) {
        return result;
      }
      goto LABEL_29;
    }
    unint64_t v19 = v5[v16 - 1];
    unint64_t v20 = v19 + (v15 & 0x7FFFFFFF);
    if (v4 > v19 && v4 <= v20) {
      break;
    }
    if ((unint64_t)v17 >= v7) {
      return 0;
    }
LABEL_29:
    unint64_t v15 = *v17;
    ++v16;
    if (v4 == v15)
    {
      uint64_t v5 = (unsigned int *)((char *)v5 + v16 * 4);
      unint64_t v14 = v5 + 1;
      goto LABEL_31;
    }
  }
  uint64_t v26 = &v5[v16];
  int v27 = &v5[v16 + 1];
  if ((v15 & 0x7FFFFFFF) != 1)
  {
    if (v4 == v20)
    {
      *uint64_t v26 = (v15 - 1) | 0x80000000;
      return 1;
    }
    if (v4 == v19 + 1)
    {
      *uint64_t v26 = v4 + 1;
      if (v20 == v4 + 1) {
        return 1;
      }
      uint64_t v28 = *(unsigned int *)(a1 + 8);
      if (v28 >= 0x3F) {
        SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::RemoveKey();
      }
      uint64_t v29 = (uint64_t)&v5[v16 - 2] - a1;
      if (v28 != v29 >> 2)
      {
        memmove(&v5[v16 + 2], &v5[v16 + 1], 4 * (v28 - (v29 >> 2)));
        LODWORD(v28) = *(_DWORD *)(a1 + 8);
      }
      *(_DWORD *)(a1 + 8) = v28 + 1;
      unsigned int v30 = (v20 + ~v4) | 0x80000000;
    }
    else
    {
      v5[v16] = (v4 + ~v19) | 0x80000000;
      uint64_t v31 = *(unsigned int *)(a1 + 8);
      if (v31 >= 0x3F) {
        SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::RemoveKey();
      }
      uint64_t v32 = (uint64_t)&v5[v16 - 2] - a1;
      if (v31 != v32 >> 2)
      {
        memmove(&v5[v16 + 2], &v5[v16 + 1], 4 * (v31 - (v32 >> 2)));
        LODWORD(v31) = *(_DWORD *)(a1 + 8);
      }
      *(_DWORD *)(a1 + 8) = v31 + 1;
      *int v27 = v4 + 1;
      int v33 = v20 + ~v4;
      if (!v33) {
        return 1;
      }
      uint64_t v34 = *(unsigned int *)(a1 + 8);
      if (v34 >= 0x3F) {
        SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::RemoveKey();
      }
      int v27 = &v5[v16 + 2];
      uint64_t v35 = (uint64_t)&v5[v16 - 1] - a1;
      if (v34 != v35 >> 2)
      {
        memmove(&v5[v16 + 3], &v5[v16 + 2], 4 * (v34 - (v35 >> 2)));
        LODWORD(v34) = *(_DWORD *)(a1 + 8);
      }
      *(_DWORD *)(a1 + 8) = v34 + 1;
      unsigned int v30 = v33 | 0x80000000;
    }
    *int v27 = v30;
    return 1;
  }
  if ((unint64_t)v27 < v7)
  {
    memmove(v26, &v5[v16 + 1], a1 + 4 * v6 - (void)v5 - v16 * 4 + 8);
    LODWORD(v6) = *(_DWORD *)(a1 + 8);
  }
LABEL_41:
  int v25 = v6 - 1;
LABEL_42:
  *(_DWORD *)(a1 + 8) = v25;
  return 1;
}

void SIValueSet<unsigned long long>::RLEKeyHolder<unsigned int>::Apply(uint64_t a1, uint64_t a2, unint64_t a3, void (*a4)(char *, uint64_t, uint64_t), uint64_t a5)
{
  v19[1] = *MEMORY[0x1E4F143B8];
  uint64_t v9 = MEMORY[0x1F4188790](a1);
  unsigned int v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(unsigned int *)(v9 + 8);
  if (v12 > 0x3F) {
    return;
  }
  unint64_t v13 = (_DWORD *)(v9 + 12);
  unint64_t v14 = v9 + 12 + 4 * v12;
  bzero((char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v10);
  unsigned int v15 = 0;
  int v16 = 0;
LABEL_3:
  uint64_t v17 = 0;
  while (v16)
  {
    --v16;
    ++v15;
LABEL_15:
    *(void *)&v11[8 * v17++] = v15 | a3;
    if (v17 == a2)
    {
      a4(v11, a2, a5);
      goto LABEL_3;
    }
  }
  if ((unint64_t)v13 < v14)
  {
    int v18 = v13 + 1;
    unsigned int v15 = *v13;
    if ((unint64_t)(v13 + 1) >= v14)
    {
      int v16 = 0;
      ++v13;
    }
    else
    {
      if (*v18 < 0) {
        v13 += 2;
      }
      else {
        ++v13;
      }
      if (*v18 < 0) {
        int v16 = *v18 & 0x7FFFFFFF;
      }
      else {
        int v16 = 0;
      }
    }
    goto LABEL_15;
  }
  if (v17) {
    a4(v11, v17, a5);
  }
}

BOOL SIValueSet<unsigned long long>::RLEKeyHolder<unsigned int>::IsEmpty(uint64_t a1)
{
  return *(_DWORD *)(a1 + 8) == 0;
}

uint64_t SIValueSet<unsigned long long>::RLEKeyHolder<unsigned int>::GetRawCount(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

uint64_t SIValueSet<unsigned long long>::RLEKeyHolder<unsigned int>::Serialize(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 8))(a2, 4);
  (*(void (**)(uint64_t, void))(*(void *)a2 + 8))(a2, *(unsigned int *)(a1 + 8));
  uint64_t v4 = 4 * *(unsigned int *)(a1 + 8);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 16);

  return v5(a2, a1 + 12, v4);
}

void SIValueSet<unsigned long long>::RLEKeyHolder<unsigned int>::~RLEKeyHolder()
{
}

void *SIValueSet<unsigned long long>::RLEKeyHolder<unsigned int>::valueIterator(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(unsigned int *)(a1 + 8);
  *a3 = &unk_1F181D9D8;
  a3[1] = a1 + 12;
  a3[2] = a1 + 12 + 4 * v3;
  a3[3] = 0;
  a3[4] = a2;
  return a3;
}

uint64_t SIValueSet<unsigned long long>::RLEKeyHolder<unsigned int>::AddSortedValuesWithContext<SIValueSet<unsigned long long>::FlatContext,SIValueSet<unsigned long long>::RLEKeyHolder<unsigned int>::InertContext>(uint64_t a1, unsigned int **a2)
{
  if (*a2 >= a2[1]) {
    return 0;
  }
  unsigned int v3 = **a2;
  uint64_t v4 = (unsigned int *)(a1 + 12);
  uint64_t v5 = *(unsigned int *)(a1 + 8);
  unint64_t v6 = a1 + 12 + 4 * v5;
  uint64_t v50 = a1 + 12;
  if (v5 >= 3)
  {
    uint64_t v7 = 4 * v5;
    unint64_t v8 = a1 + 12 + 4 * v5;
    do
    {
      uint64_t v9 = &v4[v7 >> 3];
      unsigned int v10 = *v9;
      if ((*v9 & 0x80000000) != 0)
      {
        unsigned int v11 = *--v9;
        unsigned int v10 = v11;
      }
      if (v9 <= v4) {
        break;
      }
      if (v10 == v3)
      {
        uint64_t v4 = v9;
        break;
      }
      if (v10 > v3) {
        unint64_t v8 = (unint64_t)v9;
      }
      else {
        uint64_t v4 = v9;
      }
      uint64_t v7 = v8 - (void)v4;
    }
    while (v8 > (unint64_t)v4 && (unint64_t)v7 > 0xB);
  }
  int v14 = 0;
  uint64_t v13 = 0;
  unint64_t v15 = a1 + 264;
  int v16 = v4;
  int v17 = 1;
  while (2)
  {
    unsigned int v18 = 0;
    uint64_t v19 = 0;
    unint64_t v20 = v4;
    while (1)
    {
      uint64_t v21 = v19;
      while ((unint64_t)v20 >= v6 || v3 < *v20)
      {
        if (v21)
        {
          unint64_t v22 = v21 + v18;
          int v23 = 1;
          if (v22 < v3) {
            goto LABEL_41;
          }
          unint64_t v24 = v3 + 1;
          if (v24 < v18) {
            goto LABEL_41;
          }
          uint64_t v25 = v21 + v18 - 1;
          unint64_t v26 = v25 + v3;
          BOOL v27 = v18 > v3;
          if (v18 <= v3)
          {
            int v28 = 0;
          }
          else
          {
            unsigned int v18 = v3;
            uint64_t v21 = v25;
            int v28 = 1;
          }
          if (v27) {
            unint64_t v22 = v26;
          }
          uint64_t v29 = v21 + v24 - v22;
          if (v22 > v3)
          {
            unsigned int v30 = v28;
          }
          else
          {
            uint64_t v21 = v29;
            unsigned int v30 = 1;
          }
        }
        else
        {
          uint64_t v21 = 1;
          unsigned int v18 = v3;
          unsigned int v30 = 1;
        }
        uint64_t v31 = *a2 + 2;
        unsigned int v32 = **a2;
        *a2 = v31;
        if (v3 != v32) {
          SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::AddSortedValuesWithContext<SIValueSet<unsigned int>::FlatContext,SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::InertContext>();
        }
        v13 += v30;
        if (v31 >= a2[1])
        {
          int v23 = 0;
          ++v14;
          goto LABEL_41;
        }
        unsigned int v3 = *v31;
        ++v17;
        ++v14;
      }
      int v23 = 1;
LABEL_41:
      if ((unint64_t)v20 >= v6) {
        break;
      }
      unint64_t v33 = *v20;
      if ((unint64_t)(v20 + 1) >= v6)
      {
        uint64_t v37 = 1;
        uint64_t v19 = 1;
        if (!v21) {
          goto LABEL_61;
        }
      }
      else
      {
        int v34 = v20[1];
        uint64_t v35 = v34 & 0x7FFFFFFF;
        BOOL v36 = v34 >= 0;
        if (v34 < 0) {
          uint64_t v37 = 2;
        }
        else {
          uint64_t v37 = 1;
        }
        if (v36) {
          uint64_t v19 = 1;
        }
        else {
          uint64_t v19 = v35 + 1;
        }
        if (!v21)
        {
LABEL_61:
          unsigned int v18 = *v20;
          goto LABEL_62;
        }
      }
      unint64_t v38 = v21 + v18;
      if (v38 < v33) {
        break;
      }
      unint64_t v39 = v19 + v33;
      if (v19 + v33 < v18) {
        break;
      }
      uint64_t v40 = v21 - v19 + v18;
      BOOL v41 = v18 > v33;
      if (v18 >= v33) {
        unsigned int v18 = *v20;
      }
      if (v41)
      {
        uint64_t v21 = v40;
        unint64_t v42 = v40 + v33;
      }
      else
      {
        unint64_t v42 = v38;
      }
      if (v39 > v42) {
        uint64_t v19 = v21 + v39 - v42;
      }
      else {
        uint64_t v19 = v21;
      }
LABEL_62:
      v20 += v37;
      if (v19 + (unint64_t)v18 >= v3) {
        char v43 = v23;
      }
      else {
        char v43 = 0;
      }
      if ((v43 & 1) == 0) {
        goto LABEL_68;
      }
    }
    uint64_t v19 = v21;
LABEL_68:
    if (v19 == 1)
    {
      if (v16 >= v20)
      {
        if (v6 + 8 > v15) {
          SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::AddSortedValuesWithContext<SIValueSet<unsigned int>::FlatContext,SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::InertContext>();
        }
        uint64_t v4 = (unsigned int *)(v15 - (v6 - (void)v20));
        if ((unsigned int *)v6 == v20)
        {
          unint64_t v6 = v15;
        }
        else
        {
          uint64_t v54 = v16;
          unint64_t v45 = v15;
          memmove((void *)(v15 - (v6 - (void)v20)), v20, v6 - (void)v20);
          unint64_t v15 = v45;
          int v16 = v54;
          unint64_t v6 = v45;
        }
      }
      else
      {
        uint64_t v4 = v20;
      }
      unsigned int *v16 = v18;
LABEL_84:
      ++v16;
      if (v23)
      {
        if ((unint64_t)v16 + v6 - (void)v4 + 8 > v15) {
          goto LABEL_90;
        }
        continue;
      }
      unint64_t v20 = v4;
    }
    else
    {
      if (v19)
      {
        uint64_t v44 = v16 + 1;
        if (v16 + 1 >= v20)
        {
          if (v6 + 8 > v15) {
            SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::AddSortedValuesWithContext<SIValueSet<unsigned int>::FlatContext,SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::InertContext>();
          }
          uint64_t v4 = (unsigned int *)(v15 - (v6 - (void)v20));
          if ((unsigned int *)v6 != v20)
          {
            unint64_t v52 = v15;
            uint64_t v53 = v16;
            unint64_t v51 = v16 + 1;
            memmove((void *)(v15 - (v6 - (void)v20)), v20, v6 - (void)v20);
            uint64_t v44 = v51;
            unint64_t v15 = v52;
            int v16 = v53;
          }
          unint64_t v6 = v15;
        }
        else
        {
          uint64_t v4 = v20;
        }
        unsigned int *v16 = v18;
        v16[1] = (v19 - 1) | 0x80000000;
        int v16 = v44;
        goto LABEL_84;
      }
      uint64_t v4 = v20;
      if (v23)
      {
LABEL_90:
        if (v14 >= v17) {
          SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::AddSortedValuesWithContext<SIValueSet<unsigned int>::FlatContext,SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::InertContext>();
        }
        goto LABEL_93;
      }
    }
    break;
  }
  uint64_t v4 = v20;
  if (v14 != v17) {
    SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::AddSortedValuesWithContext<SIValueSet<unsigned int>::FlatContext,SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::InertContext>();
  }
LABEL_93:
  unint64_t v46 = v6 - (void)v4;
  if (v6 > (unint64_t)v4)
  {
    unint64_t v47 = v16;
    memmove(v16, v4, v6 - (void)v4);
    int v16 = (unsigned int *)((char *)v47 + v46);
  }
  *(_DWORD *)(a1 + 8) = ((unint64_t)v16 - v50) >> 2;
  return v13;
}

uint64_t SIValueSet<unsigned long long>::RLEKeyHolder<unsigned int>::AddSortedValuesWithContext<SIValueSet<unsigned long long>::FlatContextWithPfx,SIValueSet<unsigned long long>::CollectorContext>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)a2 >= *(void *)(a2 + 8) || (*(void *)(a2 + 24) & **(void **)a2) != *(void *)(a2 + 16)) {
    return 0;
  }
  unsigned int v6 = SIValueSet<unsigned long long>::FlatContextWithPfx::peek((uint64_t **)a2);
  unsigned int v7 = v6;
  unint64_t v8 = (char *)(a1 + 12);
  uint64_t v9 = *(unsigned int *)(a1 + 8);
  uint64_t v48 = a1 + 12;
  if (v9 >= 3)
  {
    uint64_t v12 = 4 * v9;
    uint64_t v10 = a1 + 12 + 4 * v9;
    uint64_t v13 = (char *)v10;
    do
    {
      int v14 = &v8[4 * (v12 >> 3)];
      unsigned int v15 = *(_DWORD *)v14;
      if ((*(_DWORD *)v14 & 0x80000000) != 0)
      {
        unsigned int v16 = *((_DWORD *)v14 - 1);
        v14 -= 4;
        unsigned int v15 = v16;
      }
      if (v14 <= v8) {
        break;
      }
      if (v15 == v6)
      {
        unint64_t v8 = v14;
        break;
      }
      if (v15 > v6) {
        uint64_t v13 = v14;
      }
      else {
        unint64_t v8 = v14;
      }
      uint64_t v12 = v13 - v8;
    }
    while (v13 > v8 && (unint64_t)v12 > 0xB);
  }
  else
  {
    uint64_t v10 = a1 + 12 + 4 * v9;
  }
  int v18 = 0;
  uint64_t v51 = a3;
  uint64_t v52 = 0;
  uint64_t v47 = a1;
  unint64_t v19 = a1 + 264;
  unint64_t v20 = (unsigned int *)v8;
  int v21 = 1;
  unint64_t v22 = v10;
  unint64_t v49 = v19;
  while (2)
  {
    uint64_t v50 = v20;
    unsigned int v23 = 0;
    uint64_t v24 = 0;
    uint64_t v25 = (unsigned int *)v8;
    unint64_t v26 = v22;
    do
    {
      uint64_t v27 = v24;
      while ((unint64_t)v25 >= v22 || v7 < *v25)
      {
        if (!v27)
        {
          uint64_t v27 = 1;
          unsigned int v23 = v7;
LABEL_34:
          int v29 = 1;
          goto LABEL_35;
        }
        unint64_t v28 = v27 + v23;
        int v29 = 1;
        if (v28 < v7) {
          goto LABEL_46;
        }
        unint64_t v30 = v7 + 1;
        if (v30 < v23) {
          goto LABEL_45;
        }
        if (v23 <= v7)
        {
          int v29 = 0;
        }
        else
        {
          uint64_t v27 = v27 + v23 - 1;
          unint64_t v28 = v27 + v7;
          unsigned int v23 = v7;
        }
        if (v28 <= v7)
        {
          uint64_t v27 = v27 + v30 - v28;
          goto LABEL_34;
        }
LABEL_35:
        if (v7 != SIValueSet<unsigned long long>::FlatContextWithPfx::nextKey((uint64_t **)a2)) {
          SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::AddSortedValuesWithContext<SIValueSet<unsigned int>::FlatContext,SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::InertContext>();
        }
        if (v29)
        {
          ++v52;
        }
        else if (v51)
        {
          SIValueSet<unsigned long long>::SIValueSetInsert(*(unint64_t **)(v51 + 8), *(void *)v51 | v7);
        }
        if (*(void *)a2 >= *(void *)(a2 + 8))
        {
          int v29 = 0;
          ++v18;
LABEL_45:
          unint64_t v22 = v26;
          goto LABEL_46;
        }
        ++v18;
        if ((*(void *)(a2 + 24) & **(void **)a2) != *(void *)(a2 + 16))
        {
          int v29 = 0;
          goto LABEL_45;
        }
        unsigned int v7 = SIValueSet<unsigned long long>::FlatContextWithPfx::peek((uint64_t **)a2);
        ++v21;
        unint64_t v22 = v26;
      }
      int v29 = 1;
LABEL_46:
      if ((unint64_t)v25 >= v22)
      {
        uint64_t v24 = v27;
        break;
      }
      unint64_t v31 = *v25;
      if ((unint64_t)(v25 + 1) >= v22)
      {
        uint64_t v35 = 1;
        uint64_t v24 = 1;
        if (v27) {
          goto LABEL_52;
        }
LABEL_65:
        unsigned int v23 = *v25;
        goto LABEL_66;
      }
      signed int v32 = v25[1];
      uint64_t v33 = v32 & 0x7FFFFFFF;
      BOOL v34 = v32 >= 0;
      uint64_t v35 = 2;
      if (v34)
      {
        uint64_t v35 = 1;
        uint64_t v24 = 1;
      }
      else
      {
        uint64_t v24 = v33 + 1;
      }
      if (!v27) {
        goto LABEL_65;
      }
LABEL_52:
      unint64_t v36 = v27 + v23;
      if (v36 < v31 || (unint64_t v37 = v24 + v31, v24 + v31 < v23))
      {
        uint64_t v24 = v27;
        unint64_t v22 = v26;
        break;
      }
      uint64_t v38 = v27 - v24 + v23;
      unint64_t v39 = v38 + v31;
      BOOL v40 = v23 > v31;
      if (v23 >= v31) {
        unsigned int v23 = *v25;
      }
      if (v40) {
        uint64_t v41 = v38;
      }
      else {
        uint64_t v41 = v27;
      }
      if (v40) {
        unint64_t v36 = v39;
      }
      if (v37 > v36) {
        uint64_t v24 = v41 + v37 - v36;
      }
      else {
        uint64_t v24 = v41;
      }
LABEL_66:
      v25 += v35;
      if (v24 + (unint64_t)v23 >= v7) {
        char v42 = v29;
      }
      else {
        char v42 = 0;
      }
      unint64_t v22 = v26;
    }
    while ((v42 & 1) != 0);
    if (v24 == 1)
    {
      unint64_t v45 = v50;
      if (v50 >= v25)
      {
        if (v22 + 8 > v49) {
          SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::AddSortedValuesWithContext<SIValueSet<unsigned int>::FlatContext,SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::InertContext>();
        }
        unint64_t v8 = (char *)(v49 - (v22 - (void)v25));
        if ((unsigned int *)v22 != v25) {
          memmove((void *)(v49 - (v22 - (void)v25)), v25, v22 - (void)v25);
        }
        unint64_t v22 = v49;
        unint64_t v44 = v49;
      }
      else
      {
        unint64_t v8 = (char *)v25;
        unint64_t v44 = v49;
      }
      *uint64_t v50 = v23;
LABEL_90:
      unint64_t v20 = v45 + 1;
      if (v29)
      {
        if ((unint64_t)v20 + v22 - (void)v8 + 8 > v44) {
          goto LABEL_96;
        }
        continue;
      }
      uint64_t v25 = (unsigned int *)v8;
    }
    else
    {
      unint64_t v20 = v50;
      if (v24)
      {
        char v43 = v50 + 1;
        if (v50 + 1 >= v25)
        {
          unint64_t v44 = v49;
          if (v22 + 8 > v49) {
            SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::AddSortedValuesWithContext<SIValueSet<unsigned int>::FlatContext,SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::InertContext>();
          }
          unint64_t v8 = (char *)(v49 - (v22 - (void)v25));
          if ((unsigned int *)v22 == v25)
          {
            unint64_t v22 = v49;
          }
          else
          {
            memmove((void *)(v49 - (v22 - (void)v25)), v25, v22 - (void)v25);
            char v43 = v50 + 1;
            unint64_t v22 = v49;
            unint64_t v44 = v49;
          }
        }
        else
        {
          unint64_t v8 = (char *)v25;
          unint64_t v44 = v49;
        }
        *uint64_t v50 = v23;
        v50[1] = (v24 - 1) | 0x80000000;
        unint64_t v45 = v43;
        goto LABEL_90;
      }
      unint64_t v8 = (char *)v25;
      if (v29)
      {
LABEL_96:
        if (v18 >= v21) {
          SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::AddSortedValuesWithContext<SIValueSet<unsigned int>::FlatContext,SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::InertContext>();
        }
        goto LABEL_99;
      }
    }
    break;
  }
  unint64_t v8 = (char *)v25;
  if (v18 != v21) {
    SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::AddSortedValuesWithContext<SIValueSet<unsigned int>::FlatContext,SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::InertContext>();
  }
LABEL_99:
  unint64_t v46 = v22 - (void)v8;
  if (v22 > (unint64_t)v8)
  {
    memmove(v20, v8, v22 - (void)v8);
    unint64_t v20 = (unsigned int *)((char *)v20 + v46);
  }
  uint64_t result = v52;
  *(_DWORD *)(v47 + 8) = ((unint64_t)v20 - v48) >> 2;
  return result;
}

uint64_t SIValueSet<unsigned long long>::RLEKeyHolder<unsigned int>::RLEKeyIterator::nextKey(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  return v1 | SIValueSet<unsigned int>::RLEKeyHolder<unsigned int>::KeyHolderContext::nextKey((unsigned int **)(a1 + 8));
}

BOOL SIValueSet<unsigned long long>::RLEKeyHolder<unsigned int>::RLEKeyIterator::hasMore(uint64_t a1)
{
  return *(_DWORD *)(a1 + 28) || *(void *)(a1 + 8) < *(void *)(a1 + 16);
}

void SIValueSet<unsigned long long>::RLEKeyHolder<unsigned int>::RLEKeyIterator::~RLEKeyIterator()
{
}

BOOL SIValueSet<unsigned long long>::RLEKeyHolder<unsigned short>::AddKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a3 & a2;
  v4[0] = (unsigned __int16 *)&v5;
  v4[1] = (unsigned __int16 *)&vars0;
  return SIValueSet<unsigned long long>::RLEKeyHolder<unsigned short>::AddSortedValuesWithContext<SIValueSet<unsigned long long>::FlatContext,SIValueSet<unsigned long long>::RLEKeyHolder<unsigned short>::InertContext>(a1, v4) != 0;
}

uint64_t SIValueSet<unsigned long long>::RLEKeyHolder<unsigned short>::ContainsKey(uint64_t a1, unsigned __int16 a2, unsigned __int16 a3)
{
  unint64_t v3 = a2 & a3 & 0x7FFF;
  uint64_t v4 = (__int16 *)(a1 + 10);
  unint64_t v5 = *(unsigned __int16 *)(a1 + 8);
  unint64_t v6 = a1 + 10 + 2 * v5;
  if (v5 >= 3)
  {
    uint64_t v7 = 2 * v5;
    unint64_t v8 = a1 + 10 + 2 * v5;
    do
    {
      uint64_t v9 = &v4[v7 >> 2];
      if (*v9 < 0)
      {
        unsigned int v11 = (unsigned __int16)*--v9;
        unsigned int v10 = v11;
      }
      else
      {
        unsigned int v10 = (unsigned __int16)*v9;
      }
      if (v9 <= v4) {
        break;
      }
      if (v10 == v3)
      {
        uint64_t v4 = v9;
        break;
      }
      if (v10 > v3) {
        unint64_t v8 = (unint64_t)v9;
      }
      else {
        uint64_t v4 = v9;
      }
      uint64_t v7 = v8 - (void)v4;
    }
    while (v8 > (unint64_t)v4 && (unint64_t)v7 > 5);
  }
  if ((unint64_t)v4 >= v6) {
    return 0;
  }
  unint64_t v13 = (unsigned __int16)*v4;
  if (v3 != v13)
  {
    int v14 = (unsigned __int16 *)(v4 + 1);
    __int16 v15 = v13;
    do
    {
      if (v15 < 0)
      {
        unint64_t v17 = *(v14 - 2);
        unint64_t v18 = v17 + (v15 & 0x7FFF);
        if (v3 >= v17 && v3 <= v18) {
          return 1;
        }
        if ((unint64_t)v14 >= v6) {
          return 0;
        }
      }
      else
      {
        uint64_t result = 0;
        if (v3 < v13 || (unint64_t)v14 >= v6) {
          return result;
        }
      }
      unsigned int v20 = *v14++;
      unint64_t v13 = v20;
      __int16 v15 = v20;
    }
    while (v3 != v20);
  }
  return 1;
}

uint64_t SIValueSet<unsigned long long>::RLEKeyHolder<unsigned short>::CloseKey(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v3 = *(unsigned __int16 *)(a1 + 8);
  if (!*(_WORD *)(a1 + 8)) {
    return 0;
  }
  unint64_t v4 = a2 & a3 & 0x7FFFLL;
  unint64_t v5 = (__int16 *)(a1 + 10);
  unint64_t v6 = a1 + 10 + 2 * v3;
  if (v3 >= 3)
  {
    uint64_t v7 = 2 * v3;
    unint64_t v8 = a1 + 10 + 2 * v3;
    do
    {
      uint64_t v9 = &v5[v7 >> 2];
      if (*v9 < 0)
      {
        unsigned int v11 = (unsigned __int16)*--v9;
        unsigned int v10 = v11;
      }
      else
      {
        unsigned int v10 = (unsigned __int16)*v9;
      }
      if (v9 <= v5) {
        break;
      }
      if (v10 == v4)
      {
        unint64_t v5 = v9;
        break;
      }
      if (v10 > v4) {
        unint64_t v8 = (unint64_t)v9;
      }
      else {
        unint64_t v5 = v9;
      }
      uint64_t v7 = v8 - (void)v5;
    }
    while (v8 > (unint64_t)v5 && (unint64_t)v7 > 5);
  }
  if ((unint64_t)v5 >= v6)
  {
LABEL_31:
    uint64_t v19 = a1 + 2 * v3;
    unint64_t v13 = *(unsigned __int16 *)(v19 + 8);
    if (*(__int16 *)(v19 + 8) < 0) {
      return (v13 & 0x7FFF) + *(unsigned __int16 *)(v19 + 6);
    }
  }
  else
  {
    int v14 = (unsigned __int16 *)v5;
    while (1)
    {
      unsigned int v15 = *v14++;
      unint64_t v13 = v15;
      if (v4 == v15) {
        return a2 & a3 & 0x7FFFLL;
      }
      if ((v13 & 0x8000) != 0)
      {
        unint64_t v16 = (unsigned __int16)*(v5 - 1);
        unint64_t v17 = v16 + (v13 & 0x7FFF);
        if (v4 >= v16 && v4 <= v17) {
          return a2 & a3 & 0x7FFFLL;
        }
      }
      else if (v4 < v13)
      {
        return v13;
      }
      unint64_t v5 = (__int16 *)v14;
      if ((unint64_t)v14 >= v6) {
        goto LABEL_31;
      }
    }
  }
  return v13;
}

uint64_t SIValueSet<unsigned long long>::RLEKeyHolder<unsigned short>::RemoveKey(uint64_t a1, unsigned __int16 a2, unsigned __int16 a3)
{
  unint64_t v4 = a2 & a3 & 0x7FFF;
  unint64_t v5 = (__int16 *)(a1 + 10);
  unint64_t v6 = *(unsigned __int16 *)(a1 + 8);
  unint64_t v7 = a1 + 10 + 2 * v6;
  if (v6 >= 3)
  {
    uint64_t v8 = 2 * v6;
    unint64_t v9 = a1 + 10 + 2 * v6;
    do
    {
      unsigned int v10 = &v5[v8 >> 2];
      int v11 = *v10;
      if (v11 < 0)
      {
        __int16 v12 = *--v10;
        LOWORD(v11) = v12;
      }
      if (v10 <= v5) {
        break;
      }
      if (v4 == (unsigned __int16)v11)
      {
        unint64_t v5 = v10;
        break;
      }
      if ((unsigned __int16)v11 > v4) {
        unint64_t v9 = (unint64_t)v10;
      }
      else {
        unint64_t v5 = v10;
      }
      uint64_t v8 = v9 - (void)v5;
    }
    while (v9 > (unint64_t)v5 && (unint64_t)v8 > 5);
  }
  if ((unint64_t)v5 >= v7) {
    return 0;
  }
  int v14 = v5 + 1;
  unint64_t v15 = (unsigned __int16)*v5;
  if (v4 == v15)
  {
LABEL_31:
    if ((unint64_t)v14 >= v7) {
      goto LABEL_41;
    }
    int v22 = *v14;
    if (v22 < 0)
    {
      *unint64_t v5 = v15 + 1;
      if ((v22 & 0x7FFF) != 1)
      {
        __int16 *v14 = (v22 - 1) | 0x8000;
        return 1;
      }
      size_t v23 = v7 - (void)(v5 + 2);
      uint64_t v24 = v14;
      int v14 = v5 + 2;
    }
    else
    {
      size_t v23 = v7 - (void)v14;
      uint64_t v24 = v5;
    }
    memmove(v24, v14, v23);
    __int16 v25 = *(_WORD *)(a1 + 8) - 1;
    goto LABEL_42;
  }
  uint64_t v16 = 0;
  while (1)
  {
    unint64_t v17 = &v5[v16 + 1];
    if ((v15 & 0x8000) == 0)
    {
      uint64_t result = 0;
      if (v4 < v15 || (unint64_t)v17 >= v7) {
        return result;
      }
      goto LABEL_29;
    }
    unint64_t v19 = (unsigned __int16)v5[v16 - 1];
    unint64_t v20 = (unsigned __int16)(v19 + (v15 & 0x7FFF));
    if (v4 > v19 && v4 <= v20) {
      break;
    }
    if ((unint64_t)v17 >= v7) {
      return 0;
    }
LABEL_29:
    unint64_t v15 = (unsigned __int16)*v17;
    ++v16;
    if (v4 == v15)
    {
      unint64_t v5 = (__int16 *)((char *)v5 + v16 * 2);
      int v14 = v5 + 1;
      goto LABEL_31;
    }
  }
  unint64_t v26 = &v5[v16];
  uint64_t v27 = &v5[v16 + 1];
  if ((v15 & 0x7FFF) != 1)
  {
    if (v4 == v20)
    {
      *unint64_t v26 = (v15 - 1) | 0x8000;
      return 1;
    }
    if (v4 == v19 + 1)
    {
      *unint64_t v26 = v4 + 1;
      if (!(~v4 + v20)) {
        return 1;
      }
      unint64_t v28 = *(unsigned __int16 *)(a1 + 8);
      if (v28 >= 0x3F) {
        SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::RemoveKey();
      }
      uint64_t v29 = (uint64_t)&v5[v16 - 4] - a1;
      if (v28 != v29 >> 1)
      {
        memmove(&v5[v16 + 2], &v5[v16 + 1], 2 * (v28 - (v29 >> 1)));
        LOWORD(v28) = *(_WORD *)(a1 + 8);
      }
      *(_WORD *)(a1 + 8) = v28 + 1;
      __int16 v30 = (v20 + ~(_WORD)v4) | 0x8000;
    }
    else
    {
      v5[v16] = (v4 + ~(_WORD)v19) | 0x8000;
      unint64_t v31 = *(unsigned __int16 *)(a1 + 8);
      if (v31 >= 0x3F) {
        SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::RemoveKey();
      }
      uint64_t v32 = (uint64_t)&v5[v16 - 4] - a1;
      if (v31 != v32 >> 1)
      {
        memmove(&v5[v16 + 2], &v5[v16 + 1], 2 * (v31 - (v32 >> 1)));
        LOWORD(v31) = *(_WORD *)(a1 + 8);
      }
      *(_WORD *)(a1 + 8) = v31 + 1;
      *uint64_t v27 = v4 + 1;
      __int16 v33 = ~(_WORD)v4;
      __int16 v34 = v20 + ~(_WORD)v4;
      if (!((_WORD)v20 + v33)) {
        return 1;
      }
      unint64_t v35 = *(unsigned __int16 *)(a1 + 8);
      if (v35 >= 0x3F) {
        SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::RemoveKey();
      }
      uint64_t v27 = &v5[v16 + 2];
      uint64_t v36 = (uint64_t)&v5[v16 - 3] - a1;
      if (v35 != v36 >> 1)
      {
        memmove(&v5[v16 + 3], &v5[v16 + 2], 2 * (v35 - (v36 >> 1)));
        LOWORD(v35) = *(_WORD *)(a1 + 8);
      }
      *(_WORD *)(a1 + 8) = v35 + 1;
      __int16 v30 = v34 | 0x8000;
    }
    *uint64_t v27 = v30;
    return 1;
  }
  if ((unint64_t)v27 < v7)
  {
    memmove(v26, &v5[v16 + 1], a1 + 2 * v6 - (void)v5 - v16 * 2 + 8);
    LOWORD(v6) = *(_WORD *)(a1 + 8);
  }
LABEL_41:
  __int16 v25 = v6 - 1;
LABEL_42:
  *(_WORD *)(a1 + 8) = v25;
  return 1;
}

void SIValueSet<unsigned long long>::RLEKeyHolder<unsigned short>::Apply(uint64_t a1, uint64_t a2, unint64_t a3, void (*a4)(char *, uint64_t, uint64_t), uint64_t a5)
{
  v19[1] = *MEMORY[0x1E4F143B8];
  uint64_t v9 = MEMORY[0x1F4188790](a1);
  int v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v12 = *(unsigned __int16 *)(v9 + 8);
  if (v12 > 0x3F) {
    return;
  }
  unint64_t v13 = (unsigned __int16 *)(v9 + 10);
  unint64_t v14 = v9 + 10 + 2 * v12;
  bzero((char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v10);
  unsigned __int16 v15 = 0;
  __int16 v16 = 0;
LABEL_3:
  uint64_t v17 = 0;
  while (v16)
  {
    --v16;
    ++v15;
LABEL_15:
    *(void *)&v11[8 * v17++] = v15 | a3;
    if (v17 == a2)
    {
      a4(v11, a2, a5);
      goto LABEL_3;
    }
  }
  if ((unint64_t)v13 < v14)
  {
    unsigned __int16 v15 = *v13;
    if ((unint64_t)(v13 + 1) >= v14)
    {
      __int16 v16 = 0;
      ++v13;
    }
    else
    {
      int v18 = (__int16)v13[1];
      if (v18 < 0) {
        __int16 v16 = v18 & 0x7FFF;
      }
      else {
        __int16 v16 = 0;
      }
      if (v18 < 0) {
        v13 += 2;
      }
      else {
        ++v13;
      }
    }
    goto LABEL_15;
  }
  if (v17) {
    a4(v11, v17, a5);
  }
}

BOOL SIValueSet<unsigned long long>::RLEKeyHolder<unsigned short>::IsEmpty(uint64_t a1)
{
  return *(_WORD *)(a1 + 8) == 0;
}

uint64_t SIValueSet<unsigned long long>::RLEKeyHolder<unsigned short>::GetRawCount(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 8);
}

uint64_t SIValueSet<unsigned long long>::RLEKeyHolder<unsigned short>::Serialize(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 8))(a2, 2);
  (*(void (**)(uint64_t, void))(*(void *)a2 + 8))(a2, *(unsigned __int16 *)(a1 + 8));
  uint64_t v4 = 2 * *(unsigned __int16 *)(a1 + 8);
  unint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 16);

  return v5(a2, a1 + 10, v4);
}

void SIValueSet<unsigned long long>::RLEKeyHolder<unsigned short>::~RLEKeyHolder()
{
}

uint64_t SIValueSet<unsigned long long>::RLEKeyHolder<unsigned short>::valueIterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(unsigned __int16 *)(a1 + 8);
  *(void *)a3 = &unk_1F181DA78;
  *(void *)(a3 + 8) = a1 + 10;
  *(void *)(a3 + 16) = a1 + 10 + 2 * v3;
  *(_DWORD *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = a2;
  return a3;
}

uint64_t SIValueSet<unsigned long long>::RLEKeyHolder<unsigned short>::AddSortedValuesWithContext<SIValueSet<unsigned long long>::FlatContext,SIValueSet<unsigned long long>::RLEKeyHolder<unsigned short>::InertContext>(uint64_t a1, unsigned __int16 **a2)
{
  if (*a2 >= a2[1]) {
    return 0;
  }
  unsigned __int16 v3 = **a2;
  unint64_t v4 = *(unsigned __int16 *)(a1 + 8);
  unint64_t v5 = a1 + 10 + 2 * v4;
  unint64_t v6 = (__int16 *)(a1 + 10);
  if (v4 >= 3)
  {
    uint64_t v7 = 2 * v4;
    unint64_t v8 = a1 + 10 + 2 * v4;
    unint64_t v6 = (__int16 *)(a1 + 10);
    do
    {
      uint64_t v9 = &v6[v7 >> 2];
      int v10 = *v9;
      if (v10 < 0)
      {
        __int16 v11 = *--v9;
        LOWORD(v1std::unique_ptr<SIResourcePool>::reset[abi:ne180100](this, 0) = v11;
      }
      if (v9 <= v6) {
        break;
      }
      if ((unsigned __int16)v10 == v3)
      {
        unint64_t v6 = v9;
        break;
      }
      if ((unsigned __int16)v10 > v3) {
        unint64_t v8 = (unint64_t)v9;
      }
      else {
        unint64_t v6 = v9;
      }
      uint64_t v7 = v8 - (void)v6;
    }
    while (v8 > (unint64_t)v6 && (unint64_t)v7 > 5);
  }
  int v47 = a1 + 10;
  int v14 = 0;
  uint64_t v13 = 0;
  unint64_t v15 = a1 + 136;
  __int16 v16 = v6;
  int v17 = 1;
  while (2)
  {
    LOWORD(v18) = 0;
    uint64_t v19 = 0;
    unint64_t v20 = v6;
    while (1)
    {
      uint64_t v21 = v19;
      while ((unint64_t)v20 >= v5 || (unsigned __int16)*v20 > v3)
      {
        if (v21)
        {
          unint64_t v22 = v21 + (unsigned __int16)v18;
          int v23 = 1;
          if (v22 < v3) {
            goto LABEL_42;
          }
          unint64_t v24 = v3 + 1;
          if (v24 < (unsigned __int16)v18) {
            goto LABEL_42;
          }
          unsigned int v25 = (unsigned __int16)v18;
          uint64_t v26 = v21 + (unsigned __int16)v18 - 1;
          unint64_t v27 = v26 + v3;
          if ((unsigned __int16)v18 > v3) {
            LOWORD(v18) = v3;
          }
          if (v25 <= v3)
          {
            int v28 = 0;
          }
          else
          {
            uint64_t v21 = v26;
            int v28 = 1;
          }
          if (v25 > v3) {
            unint64_t v22 = v27;
          }
          uint64_t v29 = v21 + v24 - v22;
          if (v22 > v3)
          {
            unsigned int v30 = v28;
          }
          else
          {
            uint64_t v21 = v29;
            unsigned int v30 = 1;
          }
        }
        else
        {
          uint64_t v21 = 1;
          LOWORD(v18) = v3;
          unsigned int v30 = 1;
        }
        unint64_t v31 = *a2 + 4;
        int v32 = **a2;
        *a2 = v31;
        if (v32 != v3) {
          SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::AddSortedValuesWithContext<SIValueSet<unsigned int>::FlatContext,SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::InertContext>();
        }
        v13 += v30;
        if (v31 >= a2[1])
        {
          int v23 = 0;
          ++v14;
          goto LABEL_42;
        }
        unsigned __int16 v3 = *v31;
        ++v17;
        ++v14;
      }
      int v23 = 1;
LABEL_42:
      unsigned __int16 v33 = v18;
      if ((unint64_t)v20 >= v5) {
        break;
      }
      unint64_t v18 = (unsigned __int16)*v20;
      if ((unint64_t)(v20 + 1) >= v5)
      {
        uint64_t v36 = 1;
        uint64_t v19 = 1;
        if (!v21) {
          goto LABEL_63;
        }
      }
      else
      {
        int v34 = v20[1];
        BOOL v35 = v34 >= 0;
        if (v34 < 0) {
          uint64_t v36 = 2;
        }
        else {
          uint64_t v36 = 1;
        }
        if (v35) {
          uint64_t v19 = 1;
        }
        else {
          uint64_t v19 = (v20[1] & 0x7FFF) + 1;
        }
        if (!v21) {
          goto LABEL_63;
        }
      }
      if (v21 + (unint64_t)v33 < v18) {
        break;
      }
      unint64_t v37 = v19 + v18;
      if (v19 + v18 < v33) {
        break;
      }
      unint64_t v38 = v21 - v19 + v33 + v18;
      BOOL v39 = v33 > v18;
      if (v33 < v18) {
        LODWORD(v18) = v33;
      }
      if (v39)
      {
        uint64_t v21 = v21 - v19 + v33;
        unint64_t v40 = v38;
      }
      else
      {
        unint64_t v40 = v21 + v33;
      }
      if (v37 > v40) {
        uint64_t v19 = v21 + v37 - v40;
      }
      else {
        uint64_t v19 = v21;
      }
LABEL_63:
      v20 += v36;
      if (v19 + (unint64_t)v18 >= v3) {
        char v41 = v23;
      }
      else {
        char v41 = 0;
      }
      if ((v41 & 1) == 0) {
        goto LABEL_69;
      }
    }
    LOWORD(v18) = v33;
    uint64_t v19 = v21;
LABEL_69:
    if (v19 == 1)
    {
      if (v16 >= v20)
      {
        if (v5 + 4 > v15) {
          SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::AddSortedValuesWithContext<SIValueSet<unsigned int>::FlatContext,SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::InertContext>();
        }
        unint64_t v6 = (__int16 *)(v15 - (v5 - (void)v20));
        if ((__int16 *)v5 == v20)
        {
          unint64_t v5 = v15;
        }
        else
        {
          uint64_t v52 = v16;
          unint64_t v43 = v15;
          memmove((void *)(v15 - (v5 - (void)v20)), v20, v5 - (void)v20);
          unint64_t v15 = v43;
          __int16 v16 = v52;
          unint64_t v5 = v43;
        }
      }
      else
      {
        unint64_t v6 = v20;
      }
      __int16 *v16 = v18;
LABEL_85:
      ++v16;
      if (v23)
      {
        if ((unint64_t)v16 + v5 - (void)v6 + 4 > v15) {
          goto LABEL_91;
        }
        continue;
      }
      unint64_t v20 = v6;
    }
    else
    {
      if (v19)
      {
        char v42 = v16 + 1;
        if (v16 + 1 >= v20)
        {
          if (v5 + 4 > v15) {
            SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::AddSortedValuesWithContext<SIValueSet<unsigned int>::FlatContext,SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::InertContext>();
          }
          unint64_t v6 = (__int16 *)(v15 - (v5 - (void)v20));
          if ((__int16 *)v5 != v20)
          {
            unint64_t v50 = v15;
            uint64_t v51 = v16;
            unint64_t v49 = v16 + 1;
            memmove((void *)(v15 - (v5 - (void)v20)), v20, v5 - (void)v20);
            char v42 = v49;
            unint64_t v15 = v50;
            __int16 v16 = v51;
          }
          unint64_t v5 = v15;
        }
        else
        {
          unint64_t v6 = v20;
        }
        __int16 *v16 = v18;
        v16[1] = (v19 - 1) | 0x8000;
        __int16 v16 = v42;
        goto LABEL_85;
      }
      unint64_t v6 = v20;
      if (v23)
      {
LABEL_91:
        if (v14 >= v17) {
          SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::AddSortedValuesWithContext<SIValueSet<unsigned int>::FlatContext,SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::InertContext>();
        }
        goto LABEL_94;
      }
    }
    break;
  }
  unint64_t v6 = v20;
  if (v14 != v17) {
    SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::AddSortedValuesWithContext<SIValueSet<unsigned int>::FlatContext,SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::InertContext>();
  }
LABEL_94:
  int v44 = v5 - v6;
  if (v5 > (unint64_t)v6)
  {
    int v45 = (int)v16;
    memmove(v16, v6, v5 - (void)v6);
    LODWORD(v16) = v45 + v44;
  }
  *(_WORD *)(a1 + 8) = (v16 - v47) >> 1;
  return v13;
}

uint64_t SIValueSet<unsigned long long>::RLEKeyHolder<unsigned short>::AddSortedValuesWithContext<SIValueSet<unsigned long long>::FlatContextWithPfx,SIValueSet<unsigned long long>::CollectorContext>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)a2 >= *(void *)(a2 + 8) || (*(void *)(a2 + 24) & **(void **)a2) != *(void *)(a2 + 16)) {
    return 0;
  }
  unsigned __int16 v6 = SIValueSet<unsigned long long>::FlatContextWithPfx::peek((uint64_t **)a2);
  unsigned __int16 v7 = v6;
  unint64_t v8 = *(unsigned __int16 *)(a1 + 8);
  uint64_t v9 = a1 + 10 + 2 * v8;
  int v10 = (__int16 *)(a1 + 10);
  if (v8 >= 3)
  {
    uint64_t v11 = 2 * v8;
    unint64_t v12 = a1 + 10 + 2 * v8;
    int v10 = (__int16 *)(a1 + 10);
    do
    {
      uint64_t v13 = &v10[v11 >> 2];
      int v14 = *v13;
      if (v14 < 0)
      {
        __int16 v15 = *--v13;
        LOWORD(v14) = v15;
      }
      if (v13 <= v10) {
        break;
      }
      if ((unsigned __int16)v14 == v6)
      {
        int v10 = v13;
        break;
      }
      if ((unsigned __int16)v14 > v6) {
        unint64_t v12 = (unint64_t)v13;
      }
      else {
        int v10 = v13;
      }
      uint64_t v11 = v12 - (void)v10;
    }
    while (v12 > (unint64_t)v10 && (unint64_t)v11 > 5);
  }
  uint64_t v46 = a1;
  int v47 = a1 + 10;
  int v18 = 0;
  uint64_t v50 = a3;
  uint64_t v51 = 0;
  unint64_t v19 = a1 + 136;
  unint64_t v20 = v10;
  int v21 = 1;
  unint64_t v22 = v9;
  unint64_t v48 = v19;
  while (2)
  {
    unint64_t v49 = v20;
    LOWORD(v23) = 0;
    uint64_t v24 = 0;
    unsigned int v25 = v10;
    unint64_t v26 = v22;
    do
    {
      uint64_t v27 = v24;
      while ((unint64_t)v25 >= v22 || (unsigned __int16)*v25 > v7)
      {
        if (!v27)
        {
          uint64_t v27 = 1;
          LOWORD(v23) = v7;
LABEL_33:
          int v29 = 1;
          goto LABEL_34;
        }
        unint64_t v28 = v27 + (unsigned __int16)v23;
        int v29 = 1;
        if (v28 < v7) {
          goto LABEL_46;
        }
        unint64_t v30 = v7 + 1;
        if (v30 < (unsigned __int16)v23) {
          goto LABEL_44;
        }
        if ((unsigned __int16)v23 <= v7)
        {
          int v29 = 0;
        }
        else
        {
          uint64_t v27 = v27 + (unsigned __int16)v23 - 1;
          unint64_t v28 = v27 + v7;
          LOWORD(v23) = v7;
        }
        if (v28 <= v7)
        {
          uint64_t v27 = v27 + v30 - v28;
          goto LABEL_33;
        }
LABEL_34:
        if (v7 != (unsigned __int16)SIValueSet<unsigned long long>::FlatContextWithPfx::nextKey((uint64_t **)a2)) {
          SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::AddSortedValuesWithContext<SIValueSet<unsigned int>::FlatContext,SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::InertContext>();
        }
        if (v29)
        {
          ++v51;
        }
        else if (v50)
        {
          SIValueSet<unsigned long long>::SIValueSetInsert(*(unint64_t **)(v50 + 8), *(void *)v50 | v7);
        }
        if (*(void *)a2 >= *(void *)(a2 + 8))
        {
          int v29 = 0;
          ++v18;
LABEL_44:
          unsigned __int16 v31 = v23;
          unint64_t v22 = v26;
          goto LABEL_47;
        }
        ++v18;
        if ((*(void *)(a2 + 24) & **(void **)a2) != *(void *)(a2 + 16))
        {
          int v29 = 0;
          goto LABEL_44;
        }
        ++v21;
        unsigned __int16 v7 = SIValueSet<unsigned long long>::FlatContextWithPfx::peek((uint64_t **)a2);
        unint64_t v22 = v26;
      }
      int v29 = 1;
LABEL_46:
      unsigned __int16 v31 = v23;
LABEL_47:
      if ((unint64_t)v25 >= v22)
      {
        LOWORD(v23) = v31;
        uint64_t v24 = v27;
        break;
      }
      unint64_t v23 = (unsigned __int16)*v25;
      if ((unint64_t)(v25 + 1) >= v22)
      {
        uint64_t v35 = 1;
        uint64_t v24 = 1;
        if (!v27) {
          goto LABEL_67;
        }
      }
      else
      {
        int v32 = v25[1];
        uint64_t v33 = v32 & 0x7FFF;
        BOOL v34 = v32 >= 0;
        uint64_t v35 = 2;
        if (v34)
        {
          uint64_t v35 = 1;
          uint64_t v24 = 1;
        }
        else
        {
          uint64_t v24 = v33 + 1;
        }
        if (!v27) {
          goto LABEL_67;
        }
      }
      unint64_t v36 = v27 + v31;
      if (v36 < v23 || (unint64_t v37 = v24 + v23, v24 + v23 < v31))
      {
        LOWORD(v23) = v31;
        uint64_t v24 = v27;
        unint64_t v22 = v26;
        break;
      }
      unint64_t v38 = v27 - v24 + v31 + v23;
      BOOL v39 = v31 > v23;
      if (v31 < v23) {
        LODWORD(v23) = v31;
      }
      if (v39) {
        uint64_t v40 = v27 - v24 + v31;
      }
      else {
        uint64_t v40 = v27;
      }
      if (v39) {
        unint64_t v36 = v38;
      }
      if (v37 > v36) {
        uint64_t v24 = v40 + v37 - v36;
      }
      else {
        uint64_t v24 = v40;
      }
LABEL_67:
      v25 += v35;
      if (v24 + (unint64_t)v23 >= v7) {
        char v41 = v29;
      }
      else {
        char v41 = 0;
      }
      unint64_t v22 = v26;
    }
    while ((v41 & 1) != 0);
    if (v24 == 1)
    {
      int v44 = v49;
      if (v49 >= v25)
      {
        if (v22 + 4 > v48) {
          SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::AddSortedValuesWithContext<SIValueSet<unsigned int>::FlatContext,SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::InertContext>();
        }
        int v10 = (__int16 *)(v48 - (v22 - (void)v25));
        if ((__int16 *)v22 != v25) {
          memmove((void *)(v48 - (v22 - (void)v25)), v25, v22 - (void)v25);
        }
        unint64_t v22 = v48;
        unint64_t v43 = v48;
      }
      else
      {
        int v10 = v25;
        unint64_t v43 = v48;
      }
      *unint64_t v49 = v23;
LABEL_90:
      unint64_t v20 = v44 + 1;
      if (v29)
      {
        if ((unint64_t)v20 + v22 - (void)v10 + 4 > v43) {
          goto LABEL_96;
        }
        continue;
      }
      unsigned int v25 = v10;
    }
    else
    {
      unint64_t v20 = v49;
      if (v24)
      {
        char v42 = v49 + 1;
        if (v49 + 1 >= v25)
        {
          unint64_t v43 = v48;
          if (v22 + 4 > v48) {
            SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::AddSortedValuesWithContext<SIValueSet<unsigned int>::FlatContext,SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::InertContext>();
          }
          int v10 = (__int16 *)(v48 - (v22 - (void)v25));
          if ((__int16 *)v22 == v25)
          {
            unint64_t v22 = v48;
          }
          else
          {
            memmove((void *)(v48 - (v22 - (void)v25)), v25, v22 - (void)v25);
            char v42 = v49 + 1;
            unint64_t v22 = v48;
            unint64_t v43 = v48;
          }
        }
        else
        {
          int v10 = v25;
          unint64_t v43 = v48;
        }
        *unint64_t v49 = v23;
        v49[1] = (v24 - 1) | 0x8000;
        int v44 = v42;
        goto LABEL_90;
      }
      int v10 = v25;
      if (v29)
      {
LABEL_96:
        if (v18 >= v21) {
          SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::AddSortedValuesWithContext<SIValueSet<unsigned int>::FlatContext,SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::InertContext>();
        }
        goto LABEL_99;
      }
    }
    break;
  }
  int v10 = v25;
  if (v18 != v21) {
    SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::AddSortedValuesWithContext<SIValueSet<unsigned int>::FlatContext,SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::InertContext>();
  }
LABEL_99:
  int v45 = v22 - v10;
  if (v22 > (unint64_t)v10)
  {
    memmove(v20, v10, v22 - (void)v10);
    LODWORD(v2std::unique_ptr<SIResourcePool>::reset[abi:ne180100](this, 0) = v20 + v45;
  }
  uint64_t result = v51;
  *(_WORD *)(v46 + 8) = (v20 - v47) >> 1;
  return result;
}

uint64_t SIValueSet<unsigned long long>::RLEKeyHolder<unsigned short>::RLEKeyIterator::nextKey(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  return v1 | SIValueSet<unsigned int>::RLEKeyHolder<unsigned short>::KeyHolderContext::nextKey((__int16 **)(a1 + 8));
}

BOOL SIValueSet<unsigned long long>::RLEKeyHolder<unsigned short>::RLEKeyIterator::hasMore(uint64_t a1)
{
  return *(_WORD *)(a1 + 26) || *(void *)(a1 + 8) < *(void *)(a1 + 16);
}

void SIValueSet<unsigned long long>::RLEKeyHolder<unsigned short>::RLEKeyIterator::~RLEKeyIterator()
{
}

uint64_t SIValueSet<unsigned long long>::applyFun(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v4 = a2;
    do
    {
      uint64_t v6 = *a1++;
      SIValueSet<unsigned long long>::_SIValueSetInnerInsert(*(void *)a3, v6, *(unsigned int *)(a3 + 8), *(void *)(a3 + 16));
      --v4;
    }
    while (v4);
  }
  return 0;
}

uint64_t SIValueSet<unsigned long long>::BitmapHolder::AddSortedKeysWithContext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int16 v3 = *(uint64_t **)a2;
  if (*(void *)a2 < *(void *)(a2 + 8))
  {
    while ((*(void *)(a2 + 24) & *v3) == *(void *)(a2 + 16))
    {
      uint64_t Key = SIValueSet<unsigned long long>::FlatContextWithPfx::nextKey((uint64_t **)a2);
      uint64_t v8 = a1 + ((uint64_t)((unint64_t)((__int16)Key >> 6) << 48) >> 45);
      uint64_t v11 = *(void *)(v8 + 8);
      uint64_t v9 = (uint64_t *)(v8 + 8);
      uint64_t v10 = v11;
      if (((1 << Key) & v11) == 0)
      {
        uint64_t *v9 = (1 << Key) | v10;
        return 1;
      }
      if (a3) {
        SIValueSet<unsigned long long>::SIValueSetInsert(*(unint64_t **)(a3 + 8), *(void *)a3 | Key);
      }
      unsigned __int16 v3 = *(uint64_t **)a2;
      if (*(void *)a2 >= *(void *)(a2 + 8)) {
        return 0;
      }
    }
  }
  return 0;
}

uint64_t SIValueSet<unsigned long long>::BitmapHolder::ContainsKey(uint64_t a1, int a2, int a3)
{
  return (*(void *)(a1 + 8 * ((a3 & a2) << 16 >> 22) + 8) >> (a3 & a2)) & 1;
}

uint64_t SIValueSet<unsigned long long>::BitmapHolder::CloseKey(uint64_t a1, uint64_t a2, int a3)
{
  if ((*(void *)(a1 + 8 * ((int)((a3 & a2) << 16) >> 22) + 8) >> (a3 & a2))) {
    return a2;
  }
  uint64_t v3 = a2;
  LOWORD(v4) = a3 & a2;
  while (1)
  {
    int v4 = (__int16)(v4 + 1);
    if (v4 >= 64) {
      break;
    }
    ++v3;
    if ((*(void *)(a1 + 8 * (v4 >> 6) + 8) >> v4)) {
      return v3;
    }
  }
  unsigned int v5 = (unsigned __int16)(a3 & a2);
  uint64_t v3 = a2;
  while ((__int16)v5 >= 1)
  {
    --v5;
    --v3;
    if ((*(void *)(a1 + 8 * (v5 >> 6) + 8) >> v5)) {
      return v3;
    }
  }
  return 0;
}

BOOL SIValueSet<unsigned long long>::BitmapHolder::RemoveKey(uint64_t a1, int a2, int a3)
{
  uint64_t v3 = 1 << (a3 & a2);
  uint64_t v4 = a1 + 8 * ((a3 & a2) << 16 >> 22);
  uint64_t v7 = *(void *)(v4 + 8);
  unsigned int v5 = (uint64_t *)(v4 + 8);
  uint64_t v6 = v7;
  uint64_t v8 = v7 & v3;
  if ((v7 & v3) != 0) {
    *unsigned int v5 = v6 ^ v3;
  }
  return v8 != 0;
}

uint64_t SIValueSet<unsigned long long>::BitmapHolder::Apply(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(char *, uint64_t, uint64_t), uint64_t a5)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  MEMORY[0x1F4188790](a1);
  uint64_t v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  bzero(v11, v10);
  uint64_t v19 = a1 + 8;
  uint64_t v20 = 0;
  uint64_t v18 = 0;
  uint64_t result = SIValueSet<unsigned int>::BitmapHolder::BitmapHolderContext::hasMore((uint64_t)&v18);
  uint64_t v13 = 0;
  if (result)
  {
    uint64_t v13 = 0;
    do
    {
      __int16 v14 = v20;
      if ((__int16)v20 > 4095)
      {
LABEL_6:
        uint64_t v17 = 0;
      }
      else
      {
        while (1)
        {
          unint64_t v15 = *(void *)(v19 + 8 * (v14 >> 6));
          if (v15) {
            break;
          }
          int v16 = v14;
          v14 += 64;
          LOWORD(v2std::unique_ptr<SIResourcePool>::reset[abi:ne180100](this, 0) = v14;
          if (v16 >= 4032) {
            goto LABEL_6;
          }
        }
        if (((v15 >> v14) & 1) == 0)
        {
          while (1)
            ;
        }
        LOWORD(v2std::unique_ptr<SIResourcePool>::reset[abi:ne180100](this, 0) = v14 + 1;
        uint64_t v17 = v18 | v14;
      }
      *(void *)&v11[8 * v13++] = v17 | a3;
      if (v13 == a2)
      {
        uint64_t result = a4(v11, a2, a5);
        if (result) {
          return result;
        }
        uint64_t v13 = 0;
      }
      uint64_t result = SIValueSet<unsigned int>::BitmapHolder::BitmapHolderContext::hasMore((uint64_t)&v18);
    }
    while ((result & 1) != 0);
  }
  if (v13) {
    return a4(v11, v13, a5);
  }
  return result;
}

uint64_t SIValueSet<unsigned long long>::BitmapHolder::IsEmpty(uint64_t a1)
{
  v2[0] = 0;
  v2[1] = a1 + 8;
  v2[2] = 0;
  return SIValueSet<unsigned int>::BitmapHolder::BitmapHolderContext::hasMore((uint64_t)v2) ^ 1;
}

uint64_t SIValueSet<unsigned long long>::BitmapHolder::GetRawCount()
{
  return 61;
}

uint64_t SIValueSet<unsigned long long>::BitmapHolder::Serialize(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, void))(*(void *)a2 + 8))(a2, 0);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 16);

  return v4(a2, a1 + 8, 512);
}

void SIValueSet<unsigned long long>::BitmapHolder::~BitmapHolder()
{
}

uint64_t SIValueSet<unsigned long long>::BitmapHolder::valueIterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a3 = &unk_1F181D938;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = a1 + 8;
  *(_WORD *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = a2;
  return a3;
}

uint64_t SIValueSet<unsigned long long>::BitmapHolder::BitmapHolderContext::nextKey(uint64_t *a1)
{
  int v1 = *((__int16 *)a1 + 8);
  if (v1 > 4095) {
    return 0;
  }
  uint64_t v2 = a1[1];
  while (!*(void *)(v2 + 8 * ((__int16)v1 >> 6)))
  {
    int v3 = (__int16)v1;
    LOWORD(v1) = v1 + 64;
    *((_WORD *)a1 + 8) = v1;
    if (v3 >= 4032) {
      return 0;
    }
  }
  uint64_t v5 = *a1;
  *((_WORD *)a1 + 8) = v1 + 1;
  return v5 | (__int16)v1;
}

uint64_t SIValueSet<unsigned long long>::BitmapHolder::BitmapIterator::nextKey(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  return SIValueSet<unsigned long long>::BitmapHolder::BitmapHolderContext::nextKey((uint64_t *)(a1 + 8)) | v1;
}

uint64_t SIValueSet<unsigned long long>::BitmapHolder::BitmapIterator::hasMore(uint64_t a1)
{
  return SIValueSet<unsigned int>::BitmapHolder::BitmapHolderContext::hasMore(a1 + 8);
}

void SIValueSet<unsigned long long>::BitmapHolder::BitmapIterator::~BitmapIterator()
{
}

uint64_t SIValueSet<unsigned long long>::_SIValueSetInnerRemove(unint64_t a1, unint64_t a2, int a3, uint64_t a4)
{
  int v5 = a3;
  uint64_t v6 = (a2 >> ((60 - 4 * a3) & 0xFC)) & 0xF;
  unint64_t v7 = *(void *)(a1 + 8 * v6);
  if (v7)
  {
    do
    {
      unint64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      uint64_t v6 = (a2 >> ((56 - 4 * v5) & 0xFC)) & 0xF;
      unint64_t v7 = *(void *)((v7 & 0xFFFFFFFFFFFFFFFELL) + 8 * v6);
      ++v5;
    }
    while ((v7 & 1) != 0);
  }
  else
  {
    unint64_t v8 = a1;
  }
  if (!v7) {
    return 0;
  }
  uint64_t v9 = (*(uint64_t (**)(unint64_t))(*(void *)v7 + 32))(v7);
  unint64_t v10 = (*(uint64_t (**)(unint64_t))(*(void *)v7 + 56))(v7);
  if (v10 >= 0x3E)
  {
    uint64_t v11 = SIValueSet<unsigned long long>::_SIValueSetBurstRLE((void *)v7, v5, a4);
LABEL_10:
    *(void *)(v8 + 8 * v6) = v11;
    return v9;
  }
  if (!v10)
  {
    (*(void (**)(unint64_t))(*(void *)v7 + 72))(v7);
    CFAllocatorDeallocate(*(CFAllocatorRef *)(a4 + 16), (void *)v7);
    uint64_t v11 = 0;
    goto LABEL_10;
  }
  return v9;
}

uint64_t SIValueSet<unsigned long long>::_SIValueSetInnerIterate(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = 0;
  uint64_t v12 = (a3 + 1);
  char v13 = (64 - 4 * (a3 + 1)) & 0xFC;
  do
  {
    uint64_t result = *(void *)(a1 + 8 * v11);
    if (result)
    {
      if (result) {
        uint64_t result = SIValueSet<unsigned long long>::_SIValueSetInnerIterate(result & 0xFFFFFFFFFFFFFFFELL, (v11 << v13) | a2, v12, a4, a5, a6);
      }
      else {
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)result + 40))(result, a6, (v11 << v13) | a2, a4, a5);
      }
    }
    ++v11;
  }
  while (v11 != 16);
  return result;
}

uint64_t SILanguagesGetLocale(unsigned int a1)
{
  if (a1 - 59 < 0xFFFFFFC7) {
    return 0;
  }
  uint64_t v9 = v1;
  uint64_t v10 = v2;
  uint64_t v3 = SILanguagesGetLocale::gLocales[a1];
  if (!v3)
  {
    uint64_t v4 = a1;
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __SILanguagesGetLocale_block_invoke;
    block[3] = &__block_descriptor_tmp_17;
    unsigned int v8 = a1;
    if (SILanguagesGetLocale::onceLocalesToken[a1] != -1)
    {
      uint64_t v6 = a1;
      dispatch_once(&SILanguagesGetLocale::onceLocalesToken[a1], block);
      uint64_t v4 = v6;
    }
    return SILanguagesGetLocale::gLocales[v4];
  }
  return v3;
}

CFLocaleRef __SILanguagesGetLocale_block_invoke(CFLocaleRef result)
{
  uint64_t v1 = *((unsigned int *)result + 8);
  if ((v1 - 1) <= 0x39)
  {
    CFLocaleRef v2 = result;
    uint64_t result = CFLocaleCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], gLanguageTags[v1]);
    SILanguagesGetLocale::gLocales[*((unsigned int *)v2 + 8)] = result;
  }
  return result;
}

CFLocaleRef SILanguagesCopyLocaleIdentifier(unsigned int a1, CFIndex a2)
{
  CFLocaleRef result = (const __CFLocale *)SILanguagesGetLocale(a1);
  if (result)
  {
    CFLocaleRef v4 = result;
    Regiouint64_t n = SILanguagesGetRegion(a2);
    return CFLocaleCopyNormalizedLocaleIdentifierForRegion(v4, (uint64_t)Region);
  }
  return result;
}

const void *SILanguagesGetRegion(CFIndex a1)
{
  if (getRegions(void)::onceToken == -1)
  {
    if (a1 < 0) {
      return 0;
    }
  }
  else
  {
    dispatch_once(&getRegions(void)::onceToken, &__block_literal_global_16);
    if (a1 < 0) {
      return 0;
    }
  }
  CFArrayRef v2 = (const __CFArray *)getRegions(void)::gRegions;
  if (CFArrayGetCount((CFArrayRef)getRegions(void)::gRegions) <= a1) {
    return 0;
  }

  return CFArrayGetValueAtIndex(v2, a1);
}

CFLocaleRef SILanguagesIsCJK(const __CFLocale *result)
{
  if (result)
  {
    unsigned int LanguageID = SILanguagesGetLanguageID(result);
    return (const __CFLocale *)((LanguageID < 0x37) & (0x40000000300030uLL >> LanguageID));
  }
  return result;
}

CFIndex SILanguagesGetRegionID(const void *a1)
{
  if (getRegions(void)::onceToken == -1)
  {
    if (a1) {
      goto LABEL_3;
    }
    return -1;
  }
  dispatch_once(&getRegions(void)::onceToken, &__block_literal_global_16);
  if (!a1) {
    return -1;
  }
LABEL_3:
  CFArrayRef v2 = (const __CFArray *)getRegions(void)::gRegions;
  v4.length = CFArrayGetCount((CFArrayRef)getRegions(void)::gRegions);
  v4.locatiouint64_t n = 0;
  CFIndex result = CFArrayGetFirstIndexOfValue(v2, v4, a1);
  if (result < 0) {
    return -1;
  }
  return result;
}

uint64_t SILanguagesGuessLanguageInString(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return SILanguagesGuessLanguageInStringWithHints(a1, a2, a3, a4, a5, a4);
}

uint64_t SILanguagesGuessLanguageInStringWithHints(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  if ((a6 & 2) != 0)
  {
    return MEMORY[0x1F4113F78]();
  }
  else
  {
    CFStringRef v6 = (const __CFString *)NLStringTokenizerCopyBestStringLanguage();
    if (v6)
    {
      CFStringRef v7 = v6;
      uint64_t LanguageIDForIdentifier = SILanguagesGetLanguageIDForIdentifier(v6);
      CFRelease(v7);
      return LanguageIDForIdentifier;
    }
    else
    {
      return 1;
    }
  }
}

CFArrayRef ___ZL10getRegionsv_block_invoke()
{
  CFArrayRef result = CFLocaleCopyISOCountryCodes();
  getRegions(void)::gRegions = (uint64_t)result;
  return result;
}

uint64_t SIMurmurHash3_x86_32(uint64_t a1, int a2, int a3)
{
  if (a2 >= 0) {
    int v3 = a2;
  }
  else {
    int v3 = a2 + 3;
  }
  unsigned int v4 = a3 ^ 0x971E137B;
  int v5 = (unsigned __int8 *)(a1 + (int)(v3 & 0xFFFFFFFC));
  if ((a2 + 3) >= 7)
  {
    uint64_t v8 = -(v3 >> 2);
    int v9 = -1789642873;
    int v10 = 718793509;
    do
    {
      int v9 = 5 * v9 + 2071795100;
      int v10 = 5 * v10 + 1808688022;
      HIDWORD(v11) = v9 * *(_DWORD *)&v5[4 * v8];
      LODWORD(v11) = HIDWORD(v11);
      int v12 = (v11 >> 21) * v10;
      HIDWORD(v11) = v4;
      LODWORD(v11) = v4;
      unsigned int v4 = v12 ^ (5 * (v11 >> 19) + 1390208809);
    }
    while (!__CFADD__(v8++, 1));
    int v7 = 5 * v9 + 2071795100;
    int v6 = 5 * v10 + 1808688022;
  }
  else
  {
    int v6 = 1107688271;
    int v7 = 1713515327;
  }
  int v14 = 0;
  int v15 = a2 & 3;
  switch(v15)
  {
    case 1:
      goto LABEL_15;
    case 2:
LABEL_14:
      v14 |= v5[1] << 8;
LABEL_15:
      HIDWORD(v16) = (v14 ^ *v5) * v7;
      LODWORD(v16) = HIDWORD(v16);
      int v17 = (v16 >> 21) * v6;
      HIDWORD(v16) = v4;
      LODWORD(v16) = v4;
      unsigned int v4 = v17 ^ (5 * (v16 >> 19) + 1390208809);
      break;
    case 3:
      int v14 = v5[2] << 16;
      goto LABEL_14;
  }
  unsigned int v18 = -1028477387 * ((-2048144789 * (v4 ^ a2)) ^ ((-2048144789 * (v4 ^ a2)) >> 13));
  return a3 ^ HIWORD(v18) ^ v18;
}

uint64_t SIMurmurHash3_x86_32String(const __CFString *a1, int a2)
{
  v11[1] = *MEMORY[0x1E4F143B8];
  CFIndex Length = CFStringGetLength(a1);
  v11[0] = Length;
  CFIndex MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
  size_t v6 = MaximumSizeForEncoding + 1;
  MEMORY[0x1F4188790](MaximumSizeForEncoding);
  uint64_t v8 = (UInt8 *)v11 - v7;
  bzero((char *)v11 - v7, v6);
  v12.locatiouint64_t n = 0;
  v12.length = Length;
  CFStringGetBytes(a1, v12, 0x8000100u, 0x2Du, 0, v8, v6, v11);
  int v9 = v11[0];
  v8[v11[0]] = 0;
  return SIMurmurHash3_x86_32((uint64_t)v8, v9, a2);
}

uint64_t store_stream_init(uint64_t a1, _DWORD *a2, char a3)
{
  uint64_t v10 = 0;
  uint64_t v6 = fd_open(a2, &v10);
  int v7 = v6;
  uint64_t inited = store_stream_init_fd(a1, v6, v10, 0, a3);
  if (inited) {
    *(void *)(a1 + 56) = a2;
  }
  else {
    fd_close(a2, v7, v10);
  }
  return inited;
}

uint64_t store_stream_init_fd(uint64_t a1, uint64_t a2, uint64_t a3, off_t a4, char a5)
{
  memset(&v17, 0, sizeof(v17));
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_DWORD *)a1 = -1;
  int v10 = fstat(a2, &v17);
  *(_DWORD *)(a1 + 16) = v10;
  if (!v10)
  {
    size_t st_size = 0x100000;
    *(void *)(a1 + 32) = 0x100000;
    if ((a5 & 1) == 0)
    {
      size_t st_size = v17.st_size;
      if (v17.st_size >= 0x100000) {
        size_t st_size = 0x100000;
      }
      else {
        *(void *)(a1 + 32) = v17.st_size;
      }
    }
    int v15 = malloc_type_malloc(st_size, 0x96E29757uLL);
    *(void *)(a1 + 48) = v15;
    if (v15)
    {
      *(void *)(a1 + 24) = a4;
      if (a5)
      {
LABEL_13:
        *(_DWORD *)a1 = a2;
        *(void *)(a1 + 8) = a3;
        return 1;
      }
      ssize_t v16 = prot_pread(a2, v15, *(void *)(a1 + 32), a4);
      if (v16 != -1)
      {
        *(void *)(a1 + 24) += v16;
        *(void *)(a1 + 32) = v16;
        goto LABEL_13;
      }
    }
  }
  unint64_t v11 = __error();
  int v12 = *v11;
  *(_DWORD *)(a1 + 16) = *v11;
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
    store_stream_init_fd_cold_1(v12);
  }
  store_stream_destroy(a1);
  return 0;
}

void store_stream_destroy(uint64_t a1)
{
  CFArrayRef v2 = *(void **)(a1 + 48);
  if (v2)
  {
    free(v2);
    *(void *)(a1 + 48) = 0;
    *(void *)(a1 + 32) = 0;
    if (*(_DWORD *)a1 != -1)
    {
      int v3 = *(_DWORD **)(a1 + 56);
      if (v3)
      {
        fd_close(v3, *(_DWORD *)a1, *(void *)(a1 + 8));
        *(_DWORD *)a1 = -1;
      }
    }
    *(void *)(a1 + 56) = 0;
  }
}

uint64_t store_stream_flush(unsigned int *a1, int a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = a1[4];
  if (v2) {
    return v2;
  }
  uint64_t v6 = (uint64_t)(a1 + 2);
  uint64_t v7 = *((void *)a1 + 1);
  uint64_t v8 = *a1;
  if (v7) {
    uint64_t v9 = prot_pwrite_guarded(v8, v6, *((void *)a1 + 6), *((void *)a1 + 5), *((void *)a1 + 3));
  }
  else {
    uint64_t v9 = prot_pwrite(v8, *((char **)a1 + 6), *((void *)a1 + 5), *((void *)a1 + 3));
  }
  if (*((void *)a1 + 5) == v9)
  {
    *((void *)a1 + 3) += v9;
  }
  else
  {
    uint64_t v2 = *__error();
    a1[4] = v2;
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      goto LABEL_10;
    }
    store_stream_flush_cold_1(v2);
  }
  uint64_t v2 = a1[4];
LABEL_10:
  *((void *)a1 + 5) = 0;
  if (a2 && !v2)
  {
    int v10 = fsync(*a1);
    a1[4] = v10;
    if (v10)
    {
      uint64_t v2 = *__error();
      a1[4] = v2;
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        v11[0] = 67109120;
        v11[1] = v2;
        _os_log_error_impl(&dword_1BDAD0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "store_stream_flush sync err:%d", (uint8_t *)v11, 8u);
        return a1[4];
      }
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

void db_read_lock_cold_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void db_rwlock_wakeup_cold_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void db_rwlock_waiter_list_enqueue_inner_cold_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void _data_map32_wrlock_cold_1(int a1)
{
  if (a1 == -1) {
    __error();
  }
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_4(&dword_1BDAD0000, v1, v2, "%s:%d: _data_map32_wrlock error %d", v3, v4, v5, v6, 2u);
}

void _data_map32_rdlock_cold_1(int a1)
{
  if (a1 == -1) {
    __error();
  }
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_4(&dword_1BDAD0000, v1, v2, "%s:%d: _data_map32_rdlock error %d", v3, v4, v5, v6, 2u);
}

void _data_map32_unlock_cold_1(int a1)
{
  if (a1 == -1) {
    __error();
  }
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_4(&dword_1BDAD0000, v1, v2, "%s:%d: _data_map32_unlock error %d", v3, v4, v5, v6, 2u);
}

void data_map32_init_with_ctx_cold_1()
{
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_2(&dword_1BDAD0000, v0, v1, "%s:%d: param error", v2, v3, v4, v5, v6);
}

void data_map32_init_with_ctx_cold_2()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  *(_DWORD *)uint64_t v2 = 136315650;
  OUTLINED_FUNCTION_6();
  *(_DWORD *)&v2[7] = 1225;
  v2[9] = 2048;
  uint64_t v3 = v0;
  _os_log_error_impl(&dword_1BDAD0000, v1, OS_LOG_TYPE_ERROR, "%s:%d: invalid header size %ld", (uint8_t *)v2, 0x1Cu);
}

void data_map32_init_with_ctx_cold_3()
{
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_2(&dword_1BDAD0000, v0, v1, "%s:%d: fd_truncate error", v2, v3, v4, v5, v6);
}

void data_map32_init_with_ctx_cold_4()
{
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_2(&dword_1BDAD0000, v0, v1, "%s:%d: storage fd_mmap error", v2, v3, v4, v5, v6);
}

void data_map32_init_with_ctx_cold_5()
{
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_2(&dword_1BDAD0000, v0, v1, "%s:%d: offset fd_mmap error", v2, v3, v4, v5, v6);
}

void data_map32_init_with_ctx_cold_6()
{
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_2(&dword_1BDAD0000, v0, v1, "%s:%d: offset fd_mmap error", v2, v3, v4, v5, v6);
}

void data_map32_init_with_ctx_cold_7(unsigned int *a1, int *a2, os_log_t log)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a1;
  int v4 = *a2;
  int v5 = 136315906;
  uint8_t v6 = "data_map32_init_with_ctx";
  __int16 v7 = 1024;
  int v8 = 1349;
  __int16 v9 = 2048;
  uint64_t v10 = v3;
  __int16 v11 = 1024;
  int v12 = v4;
  _os_log_error_impl(&dword_1BDAD0000, log, OS_LOG_TYPE_ERROR, "%s:%d: invalid offset size 1 - %ld %d", (uint8_t *)&v5, 0x22u);
}

void data_map32_init_with_ctx_cold_8()
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  v1[0] = 136315650;
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_5();
  _os_log_error_impl(&dword_1BDAD0000, v0, OS_LOG_TYPE_ERROR, "%s:%d: invalid version %d", (uint8_t *)v1, 0x18u);
}

void data_map32_init_with_ctx_cold_9()
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  *(_DWORD *)uint64_t v3 = 136315906;
  OUTLINED_FUNCTION_6();
  *(_DWORD *)&v3[7] = 1371;
  v3[9] = v0;
  int v4 = v1;
  __int16 v5 = 2048;
  uint64_t v6 = 56;
  _os_log_error_impl(&dword_1BDAD0000, v2, OS_LOG_TYPE_ERROR, "%s:%d: invalid header size %u < %lu", (uint8_t *)v3, 0x22u);
}

void data_map32_init_with_ctx_cold_10(uint64_t a1, _DWORD *a2, NSObject *a3)
{
  LODWORD(v3) = 136315906;
  *(void *)((char *)&v3 + 4) = "data_map32_init_with_ctx";
  LOWORD(v4) = 1024;
  *(_DWORD *)((char *)&v4 + 2) = *a2;
  OUTLINED_FUNCTION_7(&dword_1BDAD0000, (uint64_t)a2, a3, "%s:%d: invalid storage size 1 (%u < %u)", (const char *)v3, (unint64_t)"data_map32_init_with_ctx" >> 32, 0x4000000, v4);
}

void data_map32_init_with_ctx_cold_11()
{
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_2(&dword_1BDAD0000, v0, v1, "%s:%d: invalid hash size 1", v2, v3, v4, v5, v6);
}

void data_map32_init_with_ctx_cold_12()
{
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_2(&dword_1BDAD0000, v0, v1, "%s:%d: re-build hash error", v2, v3, v4, v5, v6);
}

void data_map32_init_with_ctx_cold_13()
{
  LODWORD(v3) = 136315906;
  OUTLINED_FUNCTION_6();
  LOWORD(v5) = 0;
  HIWORD(v5) = v0;
  LOWORD(v6) = v0;
  HIWORD(v6) = v1;
  OUTLINED_FUNCTION_7(&dword_1BDAD0000, v1, v2, "%s:%d: invalid extra_size %d %d", v3, v4, v5, v6);
}

void data_map32_init_with_ctx_cold_14()
{
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_2(&dword_1BDAD0000, v0, v1, "%s:%d: invalid offset signature", v2, v3, v4, v5, v6);
}

void data_map32_init_with_ctx_cold_15()
{
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_2(&dword_1BDAD0000, v0, v1, "%s:%d: header pread error", v2, v3, v4, v5, v6);
}

void data_map32_init_with_ctx_cold_16()
{
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_2(&dword_1BDAD0000, v0, v1, "%s:%d: fd_truncate error", v2, v3, v4, v5, v6);
}

void data_map32_init_with_ctx_cold_17()
{
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_2(&dword_1BDAD0000, v0, v1, "%s:%d: fd_truncate error", v2, v3, v4, v5, v6);
}

void data_map32_init_with_ctx_cold_18()
{
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_2(&dword_1BDAD0000, v0, v1, "%s:%d: storage fd_mmap error", v2, v3, v4, v5, v6);
}

void data_map32_init_with_ctx_cold_19()
{
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_2(&dword_1BDAD0000, v0, v1, "%s:%d: fd_truncate error", v2, v3, v4, v5, v6);
}

void data_map32_init_with_ctx_cold_20()
{
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_2(&dword_1BDAD0000, v0, v1, "%s:%d: offsets fd_mmap error", v2, v3, v4, v5, v6);
}

void data_map32_init_with_ctx_cold_21()
{
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_2(&dword_1BDAD0000, v0, v1, "%s:%d: fd_truncate error", v2, v3, v4, v5, v6);
}

void data_map32_init_with_ctx_cold_22()
{
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_2(&dword_1BDAD0000, v0, v1, "%s:%d: hash fd_mmap error", v2, v3, v4, v5, v6);
}

void _data_map32_rehash_cold_1()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  *(_DWORD *)uint64_t v2 = 136315650;
  OUTLINED_FUNCTION_1();
  *(_DWORD *)&v2[7] = 634;
  v2[9] = 2048;
  uint64_t v3 = v0;
  _os_log_error_impl(&dword_1BDAD0000, v1, OS_LOG_TYPE_ERROR, "%s:%d: re-build hash error %p", (uint8_t *)v2, 0x1Cu);
}

void data_map32_validate_cold_1()
{
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_2(&dword_1BDAD0000, v0, v1, "%s:%d: Error mismatch offset ids ", v2, v3, v4, v5, v6);
}

void data_map32_validate_cold_2()
{
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_2(&dword_1BDAD0000, v0, v1, "%s:%d: Error mismatch hash ids ", v2, v3, v4, v5, v6);
}

void data_map32_validate_cold_3()
{
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_2(&dword_1BDAD0000, v0, v1, "%s:%d: Error mismatch hash ", v2, v3, v4, v5, v6);
}

void data_map32_validate_cold_4()
{
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_2(&dword_1BDAD0000, v0, v1, "%s:%d: entry exceeds storage", v2, v3, v4, v5, v6);
}

void data_map32_setup_mappings_cold_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void data_map32_garbage_collect_setup_cold_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void data_map32_garbage_collect_setup_cold_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void data_map32_garbage_collect_cold_1()
{
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_2(&dword_1BDAD0000, v0, v1, "%s:%d: storage fd_mmap error", v2, v3, v4, v5, v6);
}

void data_map32_garbage_collect_cold_2()
{
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_2(&dword_1BDAD0000, v0, v1, "%s:%d: offsets fd_mmap error", v2, v3, v4, v5, v6);
}

void data_map32_garbage_collect_cold_3()
{
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_2(&dword_1BDAD0000, v0, v1, "%s:%d: storage fd_mmap error", v2, v3, v4, v5, v6);
}

void bit_vector_set_cold_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void bit_vector_set_cold_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void data_entry_restore_32_cold_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  MEMORY[0xB00] = -559038737;
  abort();
}

void si_analytics_log_cold_1(uint64_t *a1)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *a1;
  int v2 = 136315138;
  uint64_t v3 = v1;
  _os_log_fault_impl(&dword_1BDAD0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "%s", (uint8_t *)&v2, 0xCu);
}

void si_get_token_info_cold_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  MEMORY[0xBAD] = -559038737;
  abort();
}

void file_scanner_read_vint32_cold_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void SIDataMapCreateMutableWithOptions_cold_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void SIDataMapCreateMutableWithOptions_cold_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void SIDataMapCreateMutableWithOptions_cold_3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void CITokenizerCreate_cold_1()
{
  uint64_t v0 = __error();
  __message_assert_1("%s:%u: failed assertion '%s' %s NLStringTokenizerCreate err:%d", "CITokenizer.c", 173, "false", "", *v0);
  OUTLINED_FUNCTION_0();
}

void CIRetainIndexingTokenizer_cold_1()
{
  __message_assert_1("%s:%u: failed assertion '%s' %s ", "CITokenizer.c", 254, "version>=0 && version<=kCITokenizerVersionCurrent", "");
  OUTLINED_FUNCTION_0();
}

void CIReleaseIndexingTokenizer_cold_1()
{
  __message_assert_1("%s:%u: failed assertion '%s' %s ", "CITokenizer.c", 288, "version>=0 && version<=kCITokenizerVersionCurrent", "");
  OUTLINED_FUNCTION_0();
}

void CITokenizerStateInit_cold_1(int a1)
{
  int v2 = __error();
  __message_assert_1("%s:%u: failed assertion '%s' %s alloc err:%d (%x)", "CITokenizer.c", 78, "state->uniChars", "", *v2, a1);
  OUTLINED_FUNCTION_0();
}

void CIDecomposeCFString_cold_1()
{
  __message_assert_1("%s:%u: failed assertion '%s' %s ", "CITokenizer.c", 1473, "(startOffset>=0) && (startOffset<=inBufferLen)", "");
  OUTLINED_FUNCTION_0();
}

void accurate_realpath_cold_1()
{
  __assert_rtn("accurate_realpath", "MDFileUtil.c", 394, "rc == 0");
}

void SIGeoIndexCreateMutableWithOptions_cold_1()
{
  *(_WORD *)uint64_t v0 = 0;
  _os_log_error_impl(&dword_1BDAD0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "SIGeoIndex: unable to open resources directory", v0, 2u);
}

void SIGeoIndexRelease_cold_1()
{
  *(_WORD *)uint64_t v0 = 0;
  _os_log_debug_impl(&dword_1BDAD0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEBUG, "SIGeoIndex: geoIndexDestory", v0, 2u);
}

void fd_release_cold_1()
{
  __message_assert_1("%s:%u: failed assertion '%s' %s ", "fd_obj.c", 483, "obj->_magic==(0xFCFCFCF3)", "");
  OUTLINED_FUNCTION_0();
}

void fd_name_cold_1()
{
  __message_assert_1("%s:%u: failed assertion '%s' %s ", "fd_obj.c", 1231, "obj->_magic==(0xFCFCFCF3)", "");
  OUTLINED_FUNCTION_0();
}

void fd_create_sibling_protected_cold_1(uint64_t a1, int *a2, NSObject *a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  int v4 = *a2;
  __error();
  int v7 = 136316162;
  int v8 = "fd_create_sibling_protected";
  __int16 v9 = 1024;
  OUTLINED_FUNCTION_1_0();
  int v10 = v4;
  __int16 v11 = v5;
  int v12 = v6;
  _os_log_error_impl(&dword_1BDAD0000, a3, OS_LOG_TYPE_ERROR, "%s:%d: Open failed on %s child of %d with error %d", (uint8_t *)&v7, 0x28u);
}

void fd_make_readonly_cold_1()
{
  __message_assert_1("%s:%u: failed assertion '%s' %s ", "fd_obj.c", 1260, "obj->_magic==(0xFCFCFCF3)", "");
  OUTLINED_FUNCTION_0();
}

void _fd_acquire_fd_cold_1(os_log_t log)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  int v1 = 136315394;
  int v2 = "_fd_acquire_fd";
  __int16 v3 = 1024;
  int v4 = 1627;
  _os_log_error_impl(&dword_1BDAD0000, log, OS_LOG_TYPE_ERROR, "%s:%d: fd_ptr instance was invalidated", (uint8_t *)&v1, 0x12u);
}

void _fd_acquire_fd_cold_2()
{
  __message_assert_1("%s:%u: failed assertion '%s' %s ", "fd_obj.c", 1622, "obj->_magic==(0xFCFCFCF3)", "");
  OUTLINED_FUNCTION_0();
}

void fd_pwrite_cold_1()
{
}

void fd_write_cold_1()
{
}

void _fd_release_fd_cold_1()
{
}

void _fd_release_fd_cold_2()
{
  __message_assert_1("%s:%u: failed assertion '%s' %s ", "fd_obj.c", 1707, "obj->_guard == inguard", "");
  OUTLINED_FUNCTION_0();
}

void _fd_release_fd_cold_3()
{
  __message_assert_1("%s:%u: failed assertion '%s' %s ", "fd_obj.c", 1706, "obj->fd == in_fd", "");
  OUTLINED_FUNCTION_0();
}

void _fd_release_fd_cold_4()
{
  __message_assert_1("%s:%u: failed assertion '%s' %s ", "fd_obj.c", 1701, "obj->_magic==(0xFCFCFCF3)", "");
  OUTLINED_FUNCTION_0();
}

void fd_hold_assertion_cold_1()
{
  __error();
  uint64_t v0 = __error();
  strerror(*v0);
  OUTLINED_FUNCTION_2_0(&dword_1BDAD0000, v1, v2, "%s:%d: Unable to take assertion on %s: %d(%s)", v3, v4, v5, v6, 2u);
}

void fd_hold_assertion_cold_2(NSObject *a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = __error();
  strerror(*v2);
  __error();
  int v4 = 136315906;
  uint64_t v5 = "fd_hold_assertion";
  __int16 v6 = 1024;
  OUTLINED_FUNCTION_1_0();
  int v7 = v3;
  _os_log_error_impl(&dword_1BDAD0000, a1, OS_LOG_TYPE_ERROR, "%s:%d: bg assertion touch file write error: %s(%d)", (uint8_t *)&v4, 0x22u);
}

void fd_drop_assertion_cold_1(uint64_t a1, char *a2)
{
  fd_name(a1, a2, 0x400uLL);
  __error();
  uint64_t v2 = __error();
  strerror(*v2);
  OUTLINED_FUNCTION_2_0(&dword_1BDAD0000, v3, v4, "%s:%d: Unable to drop assertion on %s: %d(%s)", v5, v6, v7, v8, 2u);
}

void fd_name_ptr_cold_1()
{
  __message_assert_1("%s:%u: failed assertion '%s' %s ", "fd_obj.c", 1246, "obj->_magic==(0xFCFCFCF3)", "");
  OUTLINED_FUNCTION_0();
}

void _fd_remove_locked_cold_1()
{
}

void _fd_remove_locked_cold_2()
{
}

void _fd_remove_locked_cold_3()
{
  __message_assert_1("%s:%u: failed assertion '%s' %s ", "fd_obj.c", 444, "g_fd_list->item_count==0", "");
  OUTLINED_FUNCTION_0();
}

void _fd_remove_locked_cold_4()
{
}

void _fd_remove_locked_cold_5()
{
  __message_assert_1("%s:%u: failed assertion '%s' %s ", "fd_obj.c", 451, "g_fd_list->item_count>=0", "");
  OUTLINED_FUNCTION_0();
}

void fd_dump_cold_1()
{
  __message_assert_1("%s:%u: failed assertion '%s' %s ", "fd_obj.c", 1301, "obj->_magic==(0xFCFCFCF3)", "");
  OUTLINED_FUNCTION_0();
}

void fd_invalidate_cold_1()
{
  __message_assert_1("%s:%u: failed assertion '%s' %s ", "fd_obj.c", 1758, "obj->_magic==(0xFCFCFCF3)", "");
  OUTLINED_FUNCTION_0();
}

void _fd_close_inactive_cold_1()
{
  __message_assert_1("%s:%u: failed assertion '%s' %s ", "fd_obj.c", 1372, "processed == g_fd_list->item_count", "");
  OUTLINED_FUNCTION_0();
}

void _fd_close_inactive_cold_2()
{
}

void _fd_close_inactive_cold_3()
{
  __message_assert_1("%s:%u: failed assertion '%s' %s ", "fd_obj.c", 1363, "g_fd_list->fd_count>=0", "");
  OUTLINED_FUNCTION_0();
}

void fd_assert_not_unlinked_cold_1(uint64_t a1)
{
}

void _fd_update_locked_cold_1()
{
  __message_assert_1("%s:%u: failed assertion '%s' %s ", "fd_obj.c", 1565, "obj->fd != -1", "");
  OUTLINED_FUNCTION_0();
}

void _fd_update_locked_cold_2()
{
  __message_assert_1("%s:%u: failed assertion '%s' %s ", "fd_obj.c", 1569, "g_fd_list->item_count==0", "");
  OUTLINED_FUNCTION_0();
}

void _fd_update_locked_cold_3()
{
  __message_assert_1("%s:%u: failed assertion '%s' %s ", "fd_obj.c", 1572, "g_fd_list->item_count!=0", "");
  OUTLINED_FUNCTION_0();
}

void _fd_update_locked_cold_4()
{
}

void _fd_update_locked_cold_5()
{
}

void _fd_update_locked_cold_6()
{
}

void _safe_open_at_cold_1()
{
}

void SQueueDropData_cold_1()
{
}

void SQueueDropData_cold_2()
{
  __assert_rtn("SQueueDropData", "SlabQueue.c", 179, "(squeue->firstSlab == NULL && squeue->totalSize == 0) || (squeue->firstSlab != NULL && squeue->firstSlab->availableToRead == 0 && squeue->totalSize == 0) || (squeue->firstSlab != NULL && squeue->firstSlab->availableToRead <= squeue->totalSize)");
}

void SQueueDropData_cold_3()
{
  __assert_rtn("SQueueDropData", "SlabQueue.c", 182, "length == 0");
}

void fd_system_status_set_busy_cold_1(char a1)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  v1[0] = 67109120;
  v1[1] = a1 & 1;
  _os_log_error_impl(&dword_1BDAD0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "======= fd_system_status_set_busy:%d", (uint8_t *)v1, 8u);
}

void _log_fault_for_malloc_failure_cold_1()
{
  *(_WORD *)uint64_t v0 = 0;
  _os_log_fault_impl(&dword_1BDAD0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "allocation function returned null", v0, 2u);
}

void traverseFromMapCursor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void addListNode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void addListNodeRanked(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void advanceMapCursorTrieList(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void serializeLevelsRanked(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void serializeLevels(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void SILanguageModelRelease_cold_1(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl(&dword_1BDAD0000, log, OS_LOG_TYPE_DEBUG, "languageModelDestroy (every language ID)", v1, 2u);
}

void SILanguageModelPurge_cold_1(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl(&dword_1BDAD0000, log, OS_LOG_TYPE_DEBUG, "SILanguageModelPurge (every language ID)", v1, 2u);
}

void __SILanguageModelIsStopWord_block_invoke_cold_1(uint64_t a1, NSObject *a2)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl(&dword_1BDAD0000, a2, OS_LOG_TYPE_ERROR, "localization (IsStopWord): %@", (uint8_t *)&v2, 0xCu);
}

void SILanguageResourcesRelease(uint64_t a1, NSObject *a2)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  int v2 = *(_DWORD *)(a1 + 40);
  v3[0] = 67109120;
  v3[1] = v2;
  _os_log_debug_impl(&dword_1BDAD0000, a2, OS_LOG_TYPE_DEBUG, "Releasing resources for language ID %d", (uint8_t *)v3, 8u);
}

void initWalk_cold_1()
{
}

void initWalk_cold_2()
{
}

void initWalk_cold_3()
{
}

void initWalk_cold_4()
{
}

void initWalk_cold_5()
{
}

void initWalk_cold_6()
{
}

void internalClose_cold_1()
{
  __assert_rtn("internalClose", "fsi.c", 1227, "iterator->fdArray[iterator->resumeFd] >= 0 && iterator->fdCount >= 0");
}

void internalClose_cold_2()
{
  __assert_rtn("internalClose", "fsi.c", 1216, "iterator->fdArray[(int)tos->fileReference] >= 0 && iterator->fdCount >= 0");
}

void fsi_iterate_f_cold_1()
{
  __assert_rtn("internalIterateWalk", "fsi.c", 1884, "iterator->fdArray[savedFd] >= 0 && iterator->fdCount >= 0");
}

void fsi_iterate_f_cold_2()
{
  __assert_rtn("internalIterateWalk", "fsi.c", 1880, "iterator->fdArray[savedFd] >= 0 && iterator->fdCount >= 0");
}

void fsi_iterate_f_cold_3()
{
  __assert_rtn("internalIterateWalk", "fsi.c", 1856, "iterator->fdArray[(int)tos->fileReference] >= 0 && iterator->fdCount >= 0");
}

void fsi_iterate_f_cold_4()
{
  __assert_rtn("internalIterateWalk", "fsi.c", 1767, "iterator->fdArray[fd] >= 0 && iterator->fdCount >= 0");
}

void fsi_iterate_f_cold_5()
{
  __assert_rtn("pop", "fsi.c", 708, "iterator->fdArray[(int)previousFileReference] >= 0 && iterator->fdCount >= 0");
}

void fsi_iterate_f_cold_6()
{
  __assert_rtn("prepareForPush", "fsi.c", 756, "iterator->fdArray[fd] >= 0 && iterator->fdCount >= 0");
}

void fsi_iterate_f_cold_7()
{
}

void fsi_iterate_f_cold_8()
{
  __assert_rtn("internalIterateWalk", "fsi.c", 1619, "iterator->fdArray[iterator->resumeFd] >= 0 && iterator->fdCount >= 0");
}

void fsi_iterate_f_cold_9()
{
  __assert_rtn("internalIterateWalk", "fsi.c", 1615, "iterator->fdArray[savedFd] >= 0 && iterator->fdCount >= 0");
}

void fsi_attr_set_scalar_cold_1()
{
  __assert_rtn("fsi_attr_set_scalar", "fsi.c", 2487, "descriptor->fieldType[index] != FSI_TYPE_IGNORE");
}

void fsi_attr_set_scalar_cold_2()
{
}

void fsi_attr_set_scalar_cold_3()
{
}

void fsi_attr_set_fixed_data_cold_1()
{
  __assert_rtn("fsi_attr_set_fixed_data", "fsi.c", 2506, "descriptor->fieldType[index] != FSI_TYPE_IGNORE");
}

void fsi_attr_set_fixed_data_cold_2()
{
}

void fsi_attr_set_variable_data_cold_1()
{
}

void fsi_attr_set_variable_data_cold_2()
{
  __assert_rtn("fsi_attr_set_variable_data", "fsi.c", 2516, "descriptor->fieldType[index] != FSI_TYPE_IGNORE");
}

void fsi_attr_build_cold_1()
{
}

void fsi_attr_stat_cold_1()
{
}

void finishChildList_cold_1()
{
  __assert_rtn("finishChildList", "fsi.c", 568, "tos->currentItem==0");
}

void finishChildList_cold_2()
{
  __assert_rtn("finishChildList", "fsi.c", 565, "tos->currentChild==0");
}

void finishChildList_cold_3()
{
  __assert_rtn("finishChildList", "fsi.c", 564, "tos->currentItem==0");
}

void finishChildList_cold_4()
{
  __assert_rtn("finishChildList", "fsi.c", 574, "tos->currentItem!=0");
}

void finishChildList_cold_5()
{
  __assert_rtn("finishChildList", "fsi.c", 575, "tos->currentItem == tos->children[tos->currentChild-1]");
}

void cleanupAfterNoPush_cold_1()
{
  __assert_rtn("cleanupAfterNoPush", "fsi.c", 776, "iterator->fdArray[(int)fileReference] >= 0 && iterator->fdCount >= 0");
}

void SIResourcePool::acquireResourceLocked(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void SIResourcePool::acquireResourceLocked()
{
  OUTLINED_FUNCTION_3(*MEMORY[0x1E4F143B8]);
  OUTLINED_FUNCTION_0_2();
  OUTLINED_FUNCTION_2_1(&dword_1BDAD0000, v0, v1, "pool %d resource acquired, %lu active, %lu unused", v2, v3, v4);
}

void SIResourcePool::releaseResource()
{
  OUTLINED_FUNCTION_3(*MEMORY[0x1E4F143B8]);
  OUTLINED_FUNCTION_0_2();
  OUTLINED_FUNCTION_2_1(&dword_1BDAD0000, v0, v1, "pool %d resource released, %lu active, %lu unused", v2, v3, v4);
}

void SIResourcePools::populateLocked(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void ___ZN15SIResourcePools14populateLockedEimbRKNSt3__18functionIFPvvEEE_block_invoke_2_cold_1(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void _copyFile_cold_1()
{
  __error();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_0(&dword_1BDAD0000, v0, v1, "%s:%d: error (%d) opening %s\n", v2, v3, v4, v5, 2u);
}

void _copyFile_cold_2()
{
  __error();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_4(&dword_1BDAD0000, v0, v1, "%s:%d: fstat error (%d)\n", v2, v3, v4, v5, 2u);
}

void _copyFile_cold_3()
{
  __error();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_4_0();
  OUTLINED_FUNCTION_5_0(&dword_1BDAD0000, v0, v1, "%s:%d: error (%d) opening %s\n", v2, v3, v4, v5, 2u);
}

void _copyFile_cold_4()
{
  __error();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_4(&dword_1BDAD0000, v0, v1, "%s:%d: ftruncate error (%d)\n", v2, v3, v4, v5, 2u);
}

void _copyFile_cold_5()
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  *(_DWORD *)uint64_t v3 = 136315906;
  OUTLINED_FUNCTION_6();
  *(_DWORD *)&v3[7] = 208;
  v3[9] = 2048;
  uint64_t v4 = v0;
  __int16 v5 = 2048;
  uint64_t v6 = v1;
  _os_log_error_impl(&dword_1BDAD0000, v2, OS_LOG_TYPE_ERROR, "%s:%d: write failed - expected:%lld, actual: %lld", (uint8_t *)v3, 0x26u);
}

void _copyFile_cold_6()
{
  __error();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_4(&dword_1BDAD0000, v0, v1, "%s:%d: read error (%d)\n", v2, v3, v4, v5, 2u);
}

void _copyFile_cold_7()
{
  __error();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_3_0();
  OUTLINED_FUNCTION_4(&dword_1BDAD0000, v0, v1, "%s:%d: write error (%d)\n", v2, v3, v4, v5, 2u);
}

void _copyFile_cold_8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  MEMORY[0xBAD] = -559038737;
  abort();
}

void copyFileFallback_cold_1()
{
  __error();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_2_2();
  OUTLINED_FUNCTION_6_0(&dword_1BDAD0000, v0, v1, "%s:%d: copy file error(%d) resolving source fd %d for %s", v2, v3, v4, v5, 2u);
}

void copyFileFallback_cold_2()
{
  __error();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_2_2();
  OUTLINED_FUNCTION_6_0(&dword_1BDAD0000, v0, v1, "%s:%d: copy file error(%d) resolving dest fd %d for %s", v2, v3, v4, v5, 2u);
}

void copyFileFallback_cold_3(uint64_t a1, uint64_t a2, NSObject *a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  __error();
  *(_DWORD *)uint64_t v8 = 136316162;
  OUTLINED_FUNCTION_6();
  *(_DWORD *)&void v8[7] = 337;
  v8[9] = v6;
  int v9 = v7;
  __int16 v10 = 2080;
  uint64_t v11 = a1;
  __int16 v12 = 2080;
  uint64_t v13 = a2;
  _os_log_error_impl(&dword_1BDAD0000, a3, OS_LOG_TYPE_ERROR, "%s:%d: copy file error(%d) (%s) (%s)", (uint8_t *)v8, 0x2Cu);
}

void SIStringCacheRelease_cold_1()
{
  *(_WORD *)uint64_t v0 = 0;
  _os_log_debug_impl(&dword_1BDAD0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEBUG, "SIStringCache: stringCacheDestory", v0, 2u);
}

void my_vm_allocate_cold_1(uint64_t a1, int a2, int a3)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  int v6 = *__error();
  int v7 = __error();
  uint64_t v8 = strerror(*v7);
  int v9 = 136317186;
  __int16 v10 = "slab_allocator.h";
  __int16 v11 = 1024;
  int v12 = 85;
  __int16 v13 = 2048;
  uint64_t v14 = a1;
  __int16 v15 = 1024;
  int v16 = 3;
  __int16 v17 = 1024;
  int v18 = 4098;
  __int16 v19 = 1024;
  int v20 = a2;
  __int16 v21 = 1024;
  int v22 = a3;
  __int16 v23 = 1024;
  int v24 = v6;
  __int16 v25 = 2080;
  unint64_t v26 = v8;
  _os_log_error_impl(&dword_1BDAD0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%s:%u: mmap failed for addr NULL, len 0x%08lx, prot 0x%04x, flags 0x%04x, fd 0x%04x, flags %u, errno %d(%s)", (uint8_t *)&v9, 0x44u);
}

void slab_new_cold_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void slab_new_cold_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void slab_new_slab_cold_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void slab_new_slab_cold_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void SIValueSet<unsigned int>::SIValueSetInsert()
{
  __message_assert_1("%s:%u: failed assertion '%s' %s ", "SIValueSetInternals.h", 1670, "((sizeof(ValueType) * 8) -4*(1+(s->sharedDepth))) <= sizeof(ValueType)*8", "");
  OUTLINED_FUNCTION_0();
}

{
  __message_assert_1("%s:%u: failed assertion '%s' %s ", "SIValueSetInternals.h", 1650, "s->sharedDepth>=0", "");
  OUTLINED_FUNCTION_0();
}

void SIValueSet<unsigned int>::_SIValueSetBurstRLE()
{
  __message_assert_1("%s:%u: failed assertion '%s' %s ", "SIValueSetInternals.h", 1268, "newLevel->children[i]==0", "");
  OUTLINED_FUNCTION_0();
}

void SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::RemoveKey()
{
}

void SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::AddSortedValuesWithContext<SIValueSet<unsigned int>::FlatContext,SIValueSet<unsigned int>::RLEKeyHolder<unsigned long long>::InertContext>()
{
}

{
  __message_assert_1("%s:%u: failed assertion '%s' %s ", "SIValueSetInternals.h", 811, "popped==peeked", "");
  OUTLINED_FUNCTION_0();
}

{
  __message_assert_1("%s:%u: Unexpected code path %s ", "SIValueSetInternals.h", 626, "");
  OUTLINED_FUNCTION_0();
}

{
  __message_assert_1("%s:%u: failed assertion '%s' %s ", "SIValueSetInternals.h", 761, "v==key", "");
  OUTLINED_FUNCTION_0();
}

void SIValueSet<unsigned int>::FlatContextWithPfx::peek()
{
  __message_assert_1("%s:%u: failed assertion '%s' %s ", "SIValueSetInternals.h", 164, "(key & fMask) == fPfx", "");
  OUTLINED_FUNCTION_0();
}

void SIValueSet<unsigned int>::FlatContextWithPfx::nextKey()
{
  __message_assert_1("%s:%u: failed assertion '%s' %s ", "SIValueSetInternals.h", 172, "(key & fMask) == fPfx", "");
  OUTLINED_FUNCTION_0();
}

void store_stream_init_fd_cold_1(int a1)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  v1[0] = 67109120;
  v1[1] = a1;
  _os_log_error_impl(&dword_1BDAD0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "store_stream_init err:%d", (uint8_t *)v1, 8u);
}

void store_stream_flush_cold_1(int a1)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  v1[0] = 67109120;
  v1[1] = a1;
  _os_log_error_impl(&dword_1BDAD0000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "store_stream_flush write err:%d", (uint8_t *)v1, 8u);
}

CFAbsoluteTime CFAbsoluteTimeGetCurrent(void)
{
  MEMORY[0x1F40D70A8]();
  return result;
}

void *__cdecl CFAllocatorAllocate(CFAllocatorRef allocator, CFIndex size, CFOptionFlags hint)
{
  return (void *)MEMORY[0x1F40D70E8](allocator, size, hint);
}

CFAllocatorRef CFAllocatorCreate(CFAllocatorRef allocator, CFAllocatorContext *context)
{
  return (CFAllocatorRef)MEMORY[0x1F40D70F8](allocator, context);
}

void CFAllocatorDeallocate(CFAllocatorRef allocator, void *ptr)
{
}

void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value)
{
}

Boolean CFArrayContainsValue(CFArrayRef theArray, CFRange range, const void *value)
{
  return MEMORY[0x1F40D7160](theArray, range.location, range.length, value);
}

CFArrayRef CFArrayCreate(CFAllocatorRef allocator, const void **values, CFIndex numValues, const CFArrayCallBacks *callBacks)
{
  return (CFArrayRef)MEMORY[0x1F40D7170](allocator, values, numValues, callBacks);
}

CFMutableArrayRef CFArrayCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks)
{
  return (CFMutableArrayRef)MEMORY[0x1F40D7190](allocator, capacity, callBacks);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x1F40D71B8](theArray);
}

CFIndex CFArrayGetFirstIndexOfValue(CFArrayRef theArray, CFRange range, const void *value)
{
  return MEMORY[0x1F40D71C8](theArray, range.location, range.length, value);
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x1F40D71F0](theArray, idx);
}

void CFArrayGetValues(CFArrayRef theArray, CFRange range, const void **values)
{
}

void CFArrayInsertValueAtIndex(CFMutableArrayRef theArray, CFIndex idx, const void *value)
{
}

void CFArrayRemoveAllValues(CFMutableArrayRef theArray)
{
}

void CFBagAddValue(CFMutableBagRef theBag, const void *value)
{
}

CFMutableBagRef CFBagCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFBagCallBacks *callBacks)
{
  return (CFMutableBagRef)MEMORY[0x1F40D7308](allocator, capacity, callBacks);
}

CFIndex CFBagGetCount(CFBagRef theBag)
{
  return MEMORY[0x1F40D7318](theBag);
}

CFIndex CFBagGetCountOfValue(CFBagRef theBag, const void *value)
{
  return MEMORY[0x1F40D7320](theBag, value);
}

void CFBagGetValues(CFBagRef theBag, const void **values)
{
}

void CFBinaryHeapAddValue(CFBinaryHeapRef heap, const void *value)
{
}

Boolean CFBinaryHeapContainsValue(CFBinaryHeapRef heap, const void *value)
{
  return MEMORY[0x1F40D7368](heap, value);
}

CFBinaryHeapRef CFBinaryHeapCreate(CFAllocatorRef allocator, CFIndex capacity, const CFBinaryHeapCallBacks *callBacks, const CFBinaryHeapCompareContext *compareContext)
{
  return (CFBinaryHeapRef)MEMORY[0x1F40D7370](allocator, capacity, callBacks, compareContext);
}

CFIndex CFBinaryHeapGetCount(CFBinaryHeapRef heap)
{
  return MEMORY[0x1F40D7378](heap);
}

const void *__cdecl CFBinaryHeapGetMinimum(CFBinaryHeapRef heap)
{
  return (const void *)MEMORY[0x1F40D7388](heap);
}

void CFBinaryHeapRemoveMinimumValue(CFBinaryHeapRef heap)
{
}

CFMutableBitVectorRef CFBitVectorCreateMutable(CFAllocatorRef allocator, CFIndex capacity)
{
  return (CFMutableBitVectorRef)MEMORY[0x1F40D73B8](allocator, capacity);
}

CFMutableBitVectorRef CFBitVectorCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFBitVectorRef bv)
{
  return (CFMutableBitVectorRef)MEMORY[0x1F40D73C0](allocator, capacity, bv);
}

CFBit CFBitVectorGetBitAtIndex(CFBitVectorRef bv, CFIndex idx)
{
  return MEMORY[0x1F40D73C8](bv, idx);
}

CFIndex CFBitVectorGetCountOfBit(CFBitVectorRef bv, CFRange range, CFBit value)
{
  return MEMORY[0x1F40D73E0](bv, range.location, range.length, *(void *)&value);
}

CFIndex CFBitVectorGetFirstIndexOfBit(CFBitVectorRef bv, CFRange range, CFBit value)
{
  return MEMORY[0x1F40D73E8](bv, range.location, range.length, *(void *)&value);
}

void CFBitVectorSetBitAtIndex(CFMutableBitVectorRef bv, CFIndex idx, CFBit value)
{
}

void CFBitVectorSetCount(CFMutableBitVectorRef bv, CFIndex count)
{
}

uint64_t CFBundleCopyLocalizationForLocalizationInfo()
{
  return MEMORY[0x1F40D7488]();
}

uint64_t CFBundleCopyLocalizedStringTableForLocalization()
{
  return MEMORY[0x1F40D74B8]();
}

CFURLRef CFBundleCopyResourceURLForLocalization(CFBundleRef bundle, CFStringRef resourceName, CFStringRef resourceType, CFStringRef subDirName, CFStringRef localizationName)
{
  return (CFURLRef)MEMORY[0x1F40D74D8](bundle, resourceName, resourceType, subDirName, localizationName);
}

CFBundleRef CFBundleCreate(CFAllocatorRef allocator, CFURLRef bundleURL)
{
  return (CFBundleRef)MEMORY[0x1F40D7528](allocator, bundleURL);
}

CFBundleRef CFBundleGetBundleWithIdentifier(CFStringRef bundleID)
{
  return (CFBundleRef)MEMORY[0x1F40D7538](bundleID);
}

uint64_t CFBundleGetLocalizationInfoForLocalization()
{
  return MEMORY[0x1F40D7590]();
}

Boolean CFCalendarComposeAbsoluteTime(CFCalendarRef calendar, CFAbsoluteTime *at, const char *componentDesc, ...)
{
  return MEMORY[0x1F40D7678](calendar, at, componentDesc);
}

CFCalendarRef CFCalendarCreateWithIdentifier(CFAllocatorRef allocator, CFCalendarIdentifier identifier)
{
  return (CFCalendarRef)MEMORY[0x1F40D7690](allocator, identifier);
}

Boolean CFCalendarDecomposeAbsoluteTime(CFCalendarRef calendar, CFAbsoluteTime at, const char *componentDesc, ...)
{
  va_start(va, componentDesc);
  uint64_t v3 = va_arg(va, void);
  return MEMORY[0x1F40D7698](calendar, v3, at);
}

CFIndex CFCalendarGetOrdinalityOfUnit(CFCalendarRef calendar, CFCalendarUnit smallerUnit, CFCalendarUnit biggerUnit, CFAbsoluteTime at)
{
  return MEMORY[0x1F40D76B8](calendar, smallerUnit, biggerUnit, at);
}

void CFCalendarSetTimeZone(CFCalendarRef calendar, CFTimeZoneRef tz)
{
}

CFCharacterSetRef CFCharacterSetGetPredefined(CFCharacterSetPredefinedSet theSetIdentifier)
{
  return (CFCharacterSetRef)MEMORY[0x1F40D7740](theSetIdentifier);
}

Boolean CFCharacterSetIsCharacterMember(CFCharacterSetRef theSet, UniChar theChar)
{
  return MEMORY[0x1F40D7770](theSet, theChar);
}

Boolean CFCharacterSetIsLongCharacterMember(CFCharacterSetRef theSet, UTF32Char theChar)
{
  return MEMORY[0x1F40D7778](theSet, *(void *)&theChar);
}

Boolean CFDictionaryContainsKey(CFDictionaryRef theDict, const void *key)
{
  return MEMORY[0x1F40D7968](theDict, key);
}

CFDictionaryRef CFDictionaryCreate(CFAllocatorRef allocator, const void **keys, const void **values, CFIndex numValues, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFDictionaryRef)MEMORY[0x1F40D7978](allocator, keys, values, numValues, keyCallBacks, valueCallBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x1F40D7998](allocator, capacity, keyCallBacks, valueCallBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFDictionaryRef theDict)
{
  return (CFMutableDictionaryRef)MEMORY[0x1F40D79A8](allocator, capacity, theDict);
}

CFIndex CFDictionaryGetCount(CFDictionaryRef theDict)
{
  return MEMORY[0x1F40D79C0](theDict);
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return MEMORY[0x1F40D7A00]();
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x1F40D7A10](theDict, key);
}

Boolean CFDictionaryGetValueIfPresent(CFDictionaryRef theDict, const void *key, const void **value)
{
  return MEMORY[0x1F40D7A18](theDict, key, value);
}

void CFDictionaryRemoveAllValues(CFMutableDictionaryRef theDict)
{
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

CFErrorRef CFErrorCreate(CFAllocatorRef allocator, CFErrorDomain domain, CFIndex code, CFDictionaryRef userInfo)
{
  return (CFErrorRef)MEMORY[0x1F40D7A98](allocator, domain, code, userInfo);
}

CFErrorRef CFErrorCreateWithUserInfoKeysAndValues(CFAllocatorRef allocator, CFErrorDomain domain, CFIndex code, const void *const *userInfoKeys, const void *const *userInfoValues, CFIndex numUserInfoValues)
{
  return (CFErrorRef)MEMORY[0x1F40D7AA0](allocator, domain, code, userInfoKeys, userInfoValues, numUserInfoValues);
}

CFAllocatorRef CFGetAllocator(CFTypeRef cf)
{
  return (CFAllocatorRef)MEMORY[0x1F40D7B60](cf);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x1F40D7B80](cf);
}

CFLocaleRef CFLocaleCopyCurrent(void)
{
  return (CFLocaleRef)MEMORY[0x1F40D7BB8]();
}

CFArrayRef CFLocaleCopyISOCountryCodes(void)
{
  return (CFArrayRef)MEMORY[0x1F40D7BC8]();
}

CFArrayRef CFLocaleCopyPreferredLanguages(void)
{
  return (CFArrayRef)MEMORY[0x1F40D7BD8]();
}

CFLocaleRef CFLocaleCreate(CFAllocatorRef allocator, CFLocaleIdentifier localeIdentifier)
{
  return (CFLocaleRef)MEMORY[0x1F40D7BE0](allocator, localeIdentifier);
}

CFLocaleIdentifier CFLocaleCreateCanonicalLanguageIdentifierFromString(CFAllocatorRef allocator, CFStringRef localeIdentifier)
{
  return (CFLocaleIdentifier)MEMORY[0x1F40D7BE8](allocator, localeIdentifier);
}

CFLocaleRef CFLocaleCreateCopy(CFAllocatorRef allocator, CFLocaleRef locale)
{
  return (CFLocaleRef)MEMORY[0x1F40D7C08](allocator, locale);
}

CFLocaleIdentifier CFLocaleGetIdentifier(CFLocaleRef locale)
{
  return (CFLocaleIdentifier)MEMORY[0x1F40D7C20](locale);
}

CFTypeID CFLocaleGetTypeID(void)
{
  return MEMORY[0x1F40D7C40]();
}

CFTypeRef CFLocaleGetValue(CFLocaleRef locale, CFLocaleKey key)
{
  return (CFTypeRef)MEMORY[0x1F40D7C48](locale, key);
}

void CFNotificationCenterAddObserver(CFNotificationCenterRef center, const void *observer, CFNotificationCallback callBack, CFStringRef name, const void *object, CFNotificationSuspensionBehavior suspensionBehavior)
{
}

CFNotificationCenterRef CFNotificationCenterGetLocalCenter(void)
{
  return (CFNotificationCenterRef)MEMORY[0x1F40D7D20]();
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x1F40D7D80](allocator, theType, valuePtr);
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return MEMORY[0x1F40D7E20](number, theType, valuePtr);
}

void CFPreferencesAddSuitePreferencesToApp(CFStringRef applicationID, CFStringRef suiteID)
{
}

Boolean CFPreferencesGetAppBooleanValue(CFStringRef key, CFStringRef applicationID, Boolean *keyExistsAndHasValidFormat)
{
  return MEMORY[0x1F40D7EE0](key, applicationID, keyExistsAndHasValidFormat);
}

CFPropertyListRef CFPropertyListCreateWithStream(CFAllocatorRef allocator, CFReadStreamRef stream, CFIndex streamLength, CFOptionFlags options, CFPropertyListFormat *format, CFErrorRef *error)
{
  return (CFPropertyListRef)MEMORY[0x1F40D7F58](allocator, stream, streamLength, options, format, error);
}

CFIndex CFPropertyListWrite(CFPropertyListRef propertyList, CFWriteStreamRef stream, CFPropertyListFormat format, CFOptionFlags options, CFErrorRef *error)
{
  return MEMORY[0x1F40D7F70](propertyList, stream, format, options, error);
}

void CFReadStreamClose(CFReadStreamRef stream)
{
}

CFReadStreamRef CFReadStreamCreateWithFile(CFAllocatorRef alloc, CFURLRef fileURL)
{
  return (CFReadStreamRef)MEMORY[0x1F40D7FC0](alloc, fileURL);
}

Boolean CFReadStreamOpen(CFReadStreamRef stream)
{
  return MEMORY[0x1F40D7FF8](stream);
}

void CFRelease(CFTypeRef cf)
{
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1F40D8048](cf);
}

void CFSetAddValue(CFMutableSetRef theSet, const void *value)
{
}

Boolean CFSetContainsValue(CFSetRef theSet, const void *value)
{
  return MEMORY[0x1F40D81F8](theSet, value);
}

CFMutableSetRef CFSetCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFSetCallBacks *callBacks)
{
  return (CFMutableSetRef)MEMORY[0x1F40D8210](allocator, capacity, callBacks);
}

CFIndex CFSetGetCount(CFSetRef theSet)
{
  return MEMORY[0x1F40D8220](theSet);
}

void CFSetGetValues(CFSetRef theSet, const void **values)
{
}

void CFSetRemoveValue(CFMutableSetRef theSet, const void *value)
{
}

void CFStringAppendCharacters(CFMutableStringRef theString, const UniChar *chars, CFIndex numChars)
{
}

void CFStringAppendFormat(CFMutableStringRef theString, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
}

CFComparisonResult CFStringCompare(CFStringRef theString1, CFStringRef theString2, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x1F40D8388](theString1, theString2, compareOptions);
}

CFArrayRef CFStringCreateArrayBySeparatingStrings(CFAllocatorRef alloc, CFStringRef theString, CFStringRef separatorString)
{
  return (CFArrayRef)MEMORY[0x1F40D83D0](alloc, theString, separatorString);
}

CFStringRef CFStringCreateCopy(CFAllocatorRef alloc, CFStringRef theString)
{
  return (CFStringRef)MEMORY[0x1F40D83F0](alloc, theString);
}

CFMutableStringRef CFStringCreateMutable(CFAllocatorRef alloc, CFIndex maxLength)
{
  return (CFMutableStringRef)MEMORY[0x1F40D8408](alloc, maxLength);
}

CFMutableStringRef CFStringCreateMutableCopy(CFAllocatorRef alloc, CFIndex maxLength, CFStringRef theString)
{
  return (CFMutableStringRef)MEMORY[0x1F40D8410](alloc, maxLength, theString);
}

CFMutableStringRef CFStringCreateMutableWithExternalCharactersNoCopy(CFAllocatorRef alloc, UniChar *chars, CFIndex numChars, CFIndex capacity, CFAllocatorRef externalCharactersAllocator)
{
  return (CFMutableStringRef)MEMORY[0x1F40D8418](alloc, chars, numChars, capacity, externalCharactersAllocator);
}

CFStringRef CFStringCreateWithBytes(CFAllocatorRef alloc, const UInt8 *bytes, CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalRepresentation)
{
  return (CFStringRef)MEMORY[0x1F40D8438](alloc, bytes, numBytes, *(void *)&encoding, isExternalRepresentation);
}

CFStringRef CFStringCreateWithBytesNoCopy(CFAllocatorRef alloc, const UInt8 *bytes, CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalRepresentation, CFAllocatorRef contentsDeallocator)
{
  return (CFStringRef)MEMORY[0x1F40D8440](alloc, bytes, numBytes, *(void *)&encoding, isExternalRepresentation, contentsDeallocator);
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x1F40D8448](alloc, cStr, *(void *)&encoding);
}

CFStringRef CFStringCreateWithCStringNoCopy(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding, CFAllocatorRef contentsDeallocator)
{
  return (CFStringRef)MEMORY[0x1F40D8458](alloc, cStr, *(void *)&encoding, contentsDeallocator);
}

CFStringRef CFStringCreateWithCharactersNoCopy(CFAllocatorRef alloc, const UniChar *chars, CFIndex numChars, CFAllocatorRef contentsDeallocator)
{
  return (CFStringRef)MEMORY[0x1F40D8470](alloc, chars, numChars, contentsDeallocator);
}

CFStringRef CFStringCreateWithFormat(CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
  return (CFStringRef)MEMORY[0x1F40D8490](alloc, formatOptions, format);
}

CFStringRef CFStringCreateWithSubstring(CFAllocatorRef alloc, CFStringRef str, CFRange range)
{
  return (CFStringRef)MEMORY[0x1F40D84A8](alloc, str, range.location, range.length);
}

void CFStringDelete(CFMutableStringRef theString, CFRange range)
{
}

uint64_t CFStringEncodingUnicodeToBytes()
{
  return MEMORY[0x1F40D84C0]();
}

CFIndex CFStringFindAndReplace(CFMutableStringRef theString, CFStringRef stringToFind, CFStringRef replacementString, CFRange rangeToSearch, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x1F40D84D0](theString, stringToFind, replacementString, rangeToSearch.location, rangeToSearch.length, compareOptions);
}

CFIndex CFStringGetBytes(CFStringRef theString, CFRange range, CFStringEncoding encoding, UInt8 lossByte, Boolean isExternalRepresentation, UInt8 *buffer, CFIndex maxBufLen, CFIndex *usedBufLen)
{
  return MEMORY[0x1F40D8500](theString, range.location, range.length, *(void *)&encoding, lossByte, isExternalRepresentation, buffer, maxBufLen);
}

Boolean CFStringGetCString(CFStringRef theString, char *buffer, CFIndex bufferSize, CFStringEncoding encoding)
{
  return MEMORY[0x1F40D8510](theString, buffer, bufferSize, *(void *)&encoding);
}

UniChar CFStringGetCharacterAtIndex(CFStringRef theString, CFIndex idx)
{
  return MEMORY[0x1F40D8528](theString, idx);
}

void CFStringGetCharacters(CFStringRef theString, CFRange range, UniChar *buffer)
{
}

const UniChar *__cdecl CFStringGetCharactersPtr(CFStringRef theString)
{
  return (const UniChar *)MEMORY[0x1F40D8540](theString);
}

CFIndex CFStringGetLength(CFStringRef theString)
{
  return MEMORY[0x1F40D8578](theString);
}

CFIndex CFStringGetMaximumSizeForEncoding(CFIndex length, CFStringEncoding encoding)
{
  return MEMORY[0x1F40D8590](length, *(void *)&encoding);
}

CFTypeID CFStringGetTypeID(void)
{
  return MEMORY[0x1F40D85F0]();
}

Boolean CFStringHasPrefix(CFStringRef theString, CFStringRef prefix)
{
  return MEMORY[0x1F40D8600](theString, prefix);
}

Boolean CFStringHasSuffix(CFStringRef theString, CFStringRef suffix)
{
  return MEMORY[0x1F40D8608](theString, suffix);
}

void CFStringLowercase(CFMutableStringRef theString, CFLocaleRef locale)
{
}

void CFStringNormalize(CFMutableStringRef theString, CFStringNormalizationForm theForm)
{
}

void CFStringReplace(CFMutableStringRef theString, CFRange range, CFStringRef replacement)
{
}

CFTimeZoneRef CFTimeZoneCopySystem(void)
{
  return (CFTimeZoneRef)MEMORY[0x1F40D86F8]();
}

CFTimeZoneRef CFTimeZoneCreateWithTimeIntervalFromGMT(CFAllocatorRef allocator, CFTimeInterval ti)
{
  return (CFTimeZoneRef)MEMORY[0x1F40D8708](allocator, ti);
}

CFStringRef CFURLCopyLastPathComponent(CFURLRef url)
{
  return (CFStringRef)MEMORY[0x1F40D8770](url);
}

CFStringRef CFURLCopyPath(CFURLRef anURL)
{
  return (CFStringRef)MEMORY[0x1F40D8790](anURL);
}

CFDictionaryRef CFURLCopyResourcePropertiesForKeys(CFURLRef url, CFArrayRef keys, CFErrorRef *error)
{
  return (CFDictionaryRef)MEMORY[0x1F40D87A8](url, keys, error);
}

CFURLRef CFURLCreateCopyDeletingLastPathComponent(CFAllocatorRef allocator, CFURLRef url)
{
  return (CFURLRef)MEMORY[0x1F40D8808](allocator, url);
}

CFURLRef CFURLCreateWithString(CFAllocatorRef allocator, CFStringRef URLString, CFURLRef baseURL)
{
  return (CFURLRef)MEMORY[0x1F40D88C0](allocator, URLString, baseURL);
}

Boolean CFURLResourceIsReachable(CFURLRef url, CFErrorRef *error)
{
  return MEMORY[0x1F40D8948](url, error);
}

void CFWriteStreamClose(CFWriteStreamRef stream)
{
}

CFWriteStreamRef CFWriteStreamCreateWithFile(CFAllocatorRef alloc, CFURLRef fileURL)
{
  return (CFWriteStreamRef)MEMORY[0x1F40D8AB0](alloc, fileURL);
}

Boolean CFWriteStreamOpen(CFWriteStreamRef stream)
{
  return MEMORY[0x1F40D8AD0](stream);
}

uint64_t LDEnumerateAssetDataItems()
{
  return MEMORY[0x1F412A878]();
}

uint64_t LMLanguageModelCreate()
{
  return MEMORY[0x1F412A158]();
}

uint64_t LMLanguageModelGetTokenIDForString()
{
  return MEMORY[0x1F412A1A0]();
}

uint64_t LMLanguageModelJointProbability()
{
  return MEMORY[0x1F412A1C0]();
}

uint64_t LMLanguageModelRelease()
{
  return MEMORY[0x1F412A1E0]();
}

uint64_t LMLanguageModelTokenSequenceIsBlocklisted()
{
  return MEMORY[0x1F412A220]();
}

uint64_t LXCreateWordModerationLexicon()
{
  return MEMORY[0x1F412A600]();
}

uint64_t LXCursorCreateByAdvancingWithUTF8()
{
  return MEMORY[0x1F412A620]();
}

uint64_t LXCursorEnumerateEntries()
{
  return MEMORY[0x1F412A630]();
}

uint64_t LXEntryGetCategoryFlags()
{
  return MEMORY[0x1F412A6C8]();
}

uint64_t LXEntryGetMetaFlags()
{
  return MEMORY[0x1F412A6D8]();
}

uint64_t LXEntryGetProbability()
{
  return MEMORY[0x1F412A6F0]();
}

uint64_t LXLexiconAdd()
{
  return MEMORY[0x1F412A728]();
}

uint64_t LXLexiconCreate()
{
  return MEMORY[0x1F412A768]();
}

uint64_t LXLexiconCreateRootCursor()
{
  return MEMORY[0x1F412A778]();
}

uint64_t LXLexiconCreateTransient()
{
  return MEMORY[0x1F412A780]();
}

uint64_t LXLexiconEnumerateEntriesForString()
{
  return MEMORY[0x1F412A788]();
}

uint64_t LXLexiconGetFirstTokenIDForString()
{
  return MEMORY[0x1F412A798]();
}

uint64_t MDTrieClose()
{
  return MEMORY[0x1F412F0A0]();
}

uint64_t MDTrieCreate()
{
  return MEMORY[0x1F412F0B0]();
}

uint64_t MDTrieEnumerateEntry()
{
  return MEMORY[0x1F412F0B8]();
}

uint64_t MDTrieInsert()
{
  return MEMORY[0x1F412F0C0]();
}

uint64_t MDTrieOpenReadOnly()
{
  return MEMORY[0x1F412F0C8]();
}

uint64_t MDTrieSearch()
{
  return MEMORY[0x1F412F0D0]();
}

uint64_t MDTrieSync()
{
  return MEMORY[0x1F412F0D8]();
}

uint64_t MGGetBoolAnswer()
{
  return MEMORY[0x1F417CE00]();
}

uint64_t NLLanguageIdentifierConsumeCharacters()
{
  return MEMORY[0x1F4113F50]();
}

uint64_t NLLanguageIdentifierConsumeString()
{
  return MEMORY[0x1F4113F58]();
}

uint64_t NLLanguageIdentifierGetTopHypothesis()
{
  return MEMORY[0x1F4113F70]();
}

uint64_t NLLanguageIdentifierReset()
{
  return MEMORY[0x1F4113F90]();
}

uint64_t NLStringTokenizerCopyBestStringLanguage()
{
  return MEMORY[0x1F41140C0]();
}

uint64_t NLStringTokenizerCreate()
{
  return MEMORY[0x1F41140C8]();
}

uint64_t NLTaggerCreate()
{
  return MEMORY[0x1F4114108]();
}

uint64_t NLTaggerEnumerateTokens()
{
  return MEMORY[0x1F4114110]();
}

uint64_t NLTaggerSetLocaleForRange()
{
  return MEMORY[0x1F4114128]();
}

uint64_t NLTaggerSetString()
{
  return MEMORY[0x1F4114130]();
}

void *__cdecl OSAtomicDequeue(OSQueueHead *__list, size_t a2)
{
  return (void *)MEMORY[0x1F40C99E8](__list, a2);
}

void OSAtomicEnqueue(OSQueueHead *__list, void *__new, size_t a3)
{
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x1F40C9A70](aBlock);
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

void _Block_release(const void *aBlock)
{
}

uint64_t _CFRuntimeRegisterClass()
{
  return MEMORY[0x1F40D90E8]();
}

uint64_t _NLStringTokenizerGetDerivedTokens()
{
  return MEMORY[0x1F4114198]();
}

uint64_t _NLStringTokenizerGetLanguageIDForLocale()
{
  return MEMORY[0x1F41141A0]();
}

uint64_t _NLStringTokenizerGetSubTokensOfCompound()
{
  return MEMORY[0x1F41141A8]();
}

uint64_t _NLStringTokenizerSetLocale()
{
  return MEMORY[0x1F41141B0]();
}

uint64_t _NLStringTokenizerSetStringWithOptionsAndLanguageID()
{
  return MEMORY[0x1F41141B8]();
}

uint64_t _NLStringTokenizerTokenize()
{
  return MEMORY[0x1F41141C0]();
}

uint64_t _NLStringTokenizerTokenizeWithTranscriptions()
{
  return MEMORY[0x1F41141C8]();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x1F417E448](this, a2);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x1F417E530](this);
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x1F417E588](__n);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x1F417E5B8](this, __s);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1F417E5C0](this, __s, __n);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x1F417E600](this, __pos, __s);
}

void std::string::reserve(std::string *this, std::string::size_type __requested_capacity)
{
}

std::string *__cdecl std::string::basic_string(std::string *this, const std::string *__str, std::string::size_type __pos, std::string::size_type __n, std::allocator<char> *__a)
{
  return (std::string *)MEMORY[0x1F417E660](this, __str, __pos, __n, __a);
}

void std::condition_variable::notify_all(std::condition_variable *this)
{
}

void std::condition_variable::__do_timed_wait(std::condition_variable *this, std::unique_lock<std::mutex> *__lk, std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> a3)
{
}

void std::condition_variable::wait(std::condition_variable *this, std::unique_lock<std::mutex> *__lk)
{
}

void std::condition_variable::~condition_variable(std::condition_variable *this)
{
}

void std::__throw_system_error(int __ev, const char *__what_arg)
{
}

void std::mutex::lock(std::mutex *this)
{
}

void std::mutex::unlock(std::mutex *this)
{
}

void std::mutex::~mutex(std::mutex *this)
{
}

std::chrono::steady_clock::time_point std::chrono::steady_clock::now(void)
{
  return (std::chrono::steady_clock::time_point)MEMORY[0x1F417EC90]();
}

std::chrono::system_clock::time_point std::chrono::system_clock::now(void)
{
  return (std::chrono::system_clock::time_point)MEMORY[0x1F417ECA0]();
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, int __val)
{
  return (std::string *)MEMORY[0x1F417EE70](retstr, *(void *)&__val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unsigned int __val)
{
  return (std::string *)MEMORY[0x1F417EE78](retstr, *(void *)&__val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unint64_t __val)
{
  return (std::string *)MEMORY[0x1F417EE88](retstr, __val);
}

void std::exception::~exception(std::exception *this)
{
}

void std::terminate(void)
{
}

void operator delete[]()
{
  while (1)
    ;
}

void operator delete(void *__p)
{
  while (1)
    ;
}

void operator delete()
{
  while (1)
    ;
}

void operator new[]()
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz)
{
  while (1)
    ;
}

void operator new()
{
  while (1)
    ;
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
}

uint64_t __atomic_load()
{
  return MEMORY[0x1F40C9B40]();
}

uint64_t __atomic_store()
{
  return MEMORY[0x1F40C9B48]();
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x1F417EF30](thrown_size);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x1F417EF48](a1);
}

void __cxa_free_exception(void *a1)
{
}

void __cxa_guard_abort(__guard *a1)
{
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x1F417EF80](a1);
}

void __cxa_guard_release(__guard *a1)
{
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
}

int *__error(void)
{
  return (int *)MEMORY[0x1F40C9B88]();
}

int __maskrune(__darwin_ct_rune_t a1, unint64_t a2)
{
  return MEMORY[0x1F40C9C18](*(void *)&a1, a2);
}

uint64_t __memcpy_chk()
{
  return MEMORY[0x1F40C9C28]();
}

uint64_t __mmap()
{
  return MEMORY[0x1F40C9C40]();
}

int __sprintf_chk(char *a1, int a2, size_t a3, const char *a4, ...)
{
  return MEMORY[0x1F40C9CA0](a1, *(void *)&a2, a3, a4);
}

uint64_t __strlcat_chk()
{
  return MEMORY[0x1F40C9CD0]();
}

uint64_t __strlcpy_chk()
{
  return MEMORY[0x1F40C9CD8]();
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_signpost_emit_with_name_impl(void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
}

void abort(void)
{
}

void arc4random_buf(void *__buf, size_t __nbytes)
{
}

int asprintf(char **a1, const char *a2, ...)
{
  return MEMORY[0x1F40CA440](a1, a2);
}

double atof(const char *a1)
{
  MEMORY[0x1F40CA498](a1);
  return result;
}

int atoi(const char *a1)
{
  return MEMORY[0x1F40CA4A8](a1);
}

void *__cdecl bsearch(const void *__key, const void *__base, size_t __nel, size_t __width, int (__cdecl *__compar)(const void *, const void *))
{
  return (void *)MEMORY[0x1F40CA570](__key, __base, __nel, __width, __compar);
}

void bzero(void *a1, size_t a2)
{
}

uint64_t change_fdguard_np()
{
  return MEMORY[0x1F40CB388]();
}

int chmod(const char *a1, mode_t a2)
{
  return MEMORY[0x1F40CB3A0](a1, a2);
}

int chown(const char *a1, uid_t a2, gid_t a3)
{
  return MEMORY[0x1F40CB3A8](a1, *(void *)&a2, *(void *)&a3);
}

int close(int a1)
{
  return MEMORY[0x1F40CB3F8](*(void *)&a1);
}

int closedir(DIR *a1)
{
  return MEMORY[0x1F40CB400](a1);
}

int copyfile(const char *from, const char *to, copyfile_state_t state, copyfile_flags_t flags)
{
  return MEMORY[0x1F40CB880](from, to, state, *(void *)&flags);
}

void dispatch_activate(dispatch_object_t object)
{
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_barrier_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x1F40CBA88]();
}

void dispatch_group_enter(dispatch_group_t group)
{
}

void dispatch_group_leave(dispatch_group_t group)
{
}

void dispatch_group_notify(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
}

intptr_t dispatch_group_wait(dispatch_group_t group, dispatch_time_t timeout)
{
  return MEMORY[0x1F40CBAC0](group, timeout);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

dispatch_queue_attr_t dispatch_queue_attr_make_initially_inactive(dispatch_queue_attr_t attr)
{
  return (dispatch_queue_attr_t)MEMORY[0x1F40CBBA0](attr);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x1F40CBBC0](label, attr);
}

uint64_t dispatch_queue_set_width()
{
  return MEMORY[0x1F40CBC00]();
}

void dispatch_release(dispatch_object_t object)
{
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

int faccessat(int a1, const char *a2, int a3, int a4)
{
  return MEMORY[0x1F40CC018](*(void *)&a1, a2, *(void *)&a3, *(void *)&a4);
}

int fchmodat(int a1, const char *a2, mode_t a3, int a4)
{
  return MEMORY[0x1F40CC030](*(void *)&a1, a2, a3, *(void *)&a4);
}

int fchownat(int a1, const char *a2, uid_t a3, gid_t a4, int a5)
{
  return MEMORY[0x1F40CC040](*(void *)&a1, a2, *(void *)&a3, *(void *)&a4, *(void *)&a5);
}

int fcntl(int a1, int a2, ...)
{
  return MEMORY[0x1F40CC058](*(void *)&a1, *(void *)&a2);
}

int ffsctl(int a1, unint64_t a2, void *a3, unsigned int a4)
{
  return MEMORY[0x1F40CC0D8](*(void *)&a1, a2, a3, *(void *)&a4);
}

int fgetattrlist(int a1, void *a2, void *a3, size_t a4, unsigned int a5)
{
  return MEMORY[0x1F40CC0E0](*(void *)&a1, a2, a3, a4, *(void *)&a5);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x1F40CC1D8](a1, a2);
}

void free(void *a1)
{
}

int fsctl(const char *a1, unint64_t a2, void *a3, unsigned int a4)
{
  return MEMORY[0x1F40CC288](a1, a2, a3, *(void *)&a4);
}

ssize_t fsgetpath(char *a1, size_t a2, fsid_t *a3, uint64_t a4)
{
  return MEMORY[0x1F40CC2B0](a1, a2, a3, a4);
}

int fstat(int a1, stat *a2)
{
  return MEMORY[0x1F40CC2B8](*(void *)&a1, a2);
}

int fstatat(int a1, const char *a2, stat *a3, int a4)
{
  return MEMORY[0x1F40CC2C8](*(void *)&a1, a2, a3, *(void *)&a4);
}

int fstatfs(int a1, statfs *a2)
{
  return MEMORY[0x1F40CC2D0](*(void *)&a1, a2);
}

int fsync(int a1)
{
  return MEMORY[0x1F40CC2D8](*(void *)&a1);
}

int ftruncate(int a1, off_t a2)
{
  return MEMORY[0x1F40CC2F0](*(void *)&a1, a2);
}

int getattrlist(const char *a1, void *a2, void *a3, size_t a4, unsigned int a5)
{
  return MEMORY[0x1F40CC360](a1, a2, a3, a4, *(void *)&a5);
}

int getattrlistat(int a1, const char *a2, void *a3, void *a4, size_t a5, unint64_t a6)
{
  return MEMORY[0x1F40CC368](*(void *)&a1, a2, a3, a4, a5, a6);
}

int getattrlistbulk(int a1, void *a2, void *a3, size_t a4, uint64_t a5)
{
  return MEMORY[0x1F40CC370](*(void *)&a1, a2, a3, a4, a5);
}

uid_t geteuid(void)
{
  return MEMORY[0x1F40CC3B8]();
}

int getrlimit(int a1, rlimit *a2)
{
  return MEMORY[0x1F40CC500](*(void *)&a1, a2);
}

uint64_t guarded_close_np()
{
  return MEMORY[0x1F40CC5B8]();
}

uint64_t guarded_pwrite_np()
{
  return MEMORY[0x1F40CC5D0]();
}

uint64_t guarded_write_np()
{
  return MEMORY[0x1F40CC5D8]();
}

int linkat(int a1, const char *a2, int a3, const char *a4, int a5)
{
  return MEMORY[0x1F40CC838](*(void *)&a1, a2, *(void *)&a3, a4, *(void *)&a5);
}

off_t lseek(int a1, off_t a2, int a3)
{
  return MEMORY[0x1F40CC8F8](*(void *)&a1, a2, *(void *)&a3);
}

int madvise(void *a1, size_t a2, int a3)
{
  return MEMORY[0x1F40CCB08](a1, a2, *(void *)&a3);
}

malloc_zone_t *__cdecl malloc_create_zone(vm_size_t start_size, unsigned int flags)
{
  return (malloc_zone_t *)MEMORY[0x1F40CCB20](start_size, *(void *)&flags);
}

size_t malloc_good_size(size_t size)
{
  return MEMORY[0x1F40CCB58](size);
}

void malloc_set_zone_name(malloc_zone_t *zone, const char *name)
{
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCB90](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCB98](size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCBA8](ptr, size, type_id);
}

void *__cdecl malloc_type_zone_malloc(malloc_zone_t *zone, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCBC0](zone, size, type_id);
}

void *__cdecl malloc_type_zone_realloc(malloc_zone_t *zone, void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCBD8](zone, ptr, size, type_id);
}

void malloc_zone_free(malloc_zone_t *zone, void *ptr)
{
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x1F40CCCD8](__s, *(void *)&__c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x1F40CCCE8](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1F40CCCF0](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1F40CCD10](__dst, __src, __len);
}

int mkdir(const char *a1, mode_t a2)
{
  return MEMORY[0x1F40CCDD0](a1, a2);
}

int mkdirat(int a1, const char *a2, mode_t a3)
{
  return MEMORY[0x1F40CCDD8](*(void *)&a1, a2, a3);
}

void *__cdecl mmap(void *a1, size_t a2, int a3, int a4, int a5, off_t a6)
{
  return (void *)MEMORY[0x1F40CCE40](a1, a2, *(void *)&a3, *(void *)&a4, *(void *)&a5, a6);
}

int msync(void *a1, size_t a2, int a3)
{
  return MEMORY[0x1F40CCE78](a1, a2, *(void *)&a3);
}

int munmap(void *a1, size_t a2)
{
  return MEMORY[0x1F40CCE88](a1, a2);
}

uint32_t notify_register_dispatch(const char *name, int *out_token, dispatch_queue_t queue, notify_handler_t handler)
{
  return MEMORY[0x1F40CD060](name, out_token, queue, handler);
}

int open(const char *a1, int a2, ...)
{
  return MEMORY[0x1F40CD0E0](a1, *(void *)&a2);
}

int open_dprotected_np(const char *a1, int a2, int a3, int a4, ...)
{
  return MEMORY[0x1F40CD0F0](a1, *(void *)&a2, *(void *)&a3, *(void *)&a4);
}

int openat(int a1, const char *a2, int a3, ...)
{
  return MEMORY[0x1F40CD100](*(void *)&a1, a2, *(void *)&a3);
}

DIR *__cdecl opendir(const char *a1)
{
  return (DIR *)MEMORY[0x1F40CD120](a1);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x1F40CD360](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1F40CD3B8](oslog, type);
}

BOOL os_signpost_enabled(os_log_t log)
{
  return MEMORY[0x1F40CD550](log);
}

os_signpost_id_t os_signpost_id_generate(os_log_t log)
{
  return MEMORY[0x1F40CD558](log);
}

os_signpost_id_t os_signpost_id_make_with_pointer(os_log_t log, const void *ptr)
{
  return MEMORY[0x1F40CD560](log, ptr);
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
}

ssize_t pread(int __fd, void *__buf, size_t __nbyte, off_t a4)
{
  return MEMORY[0x1F40CD830](*(void *)&__fd, __buf, __nbyte, a4);
}

int pthread_cond_broadcast(pthread_cond_t *a1)
{
  return MEMORY[0x1F40CD978](a1);
}

int pthread_cond_destroy(pthread_cond_t *a1)
{
  return MEMORY[0x1F40CD980](a1);
}

int pthread_cond_init(pthread_cond_t *a1, const pthread_condattr_t *a2)
{
  return MEMORY[0x1F40CD988](a1, a2);
}

int pthread_cond_signal(pthread_cond_t *a1)
{
  return MEMORY[0x1F40CD990](a1);
}

int pthread_cond_wait(pthread_cond_t *a1, pthread_mutex_t *a2)
{
  return MEMORY[0x1F40CD9A8](a1, a2);
}

uint64_t pthread_fchdir_np()
{
  return MEMORY[0x1F40CD9F0]();
}

void *__cdecl pthread_getspecific(pthread_key_t a1)
{
  return (void *)MEMORY[0x1F40CDA20](a1);
}

int pthread_getugid_np(uid_t *a1, gid_t *a2)
{
  return MEMORY[0x1F40CDA28](a1, a2);
}

int pthread_key_create(pthread_key_t *a1, void (__cdecl *a2)(void *))
{
  return MEMORY[0x1F40CDA40](a1, a2);
}

int pthread_mutex_destroy(pthread_mutex_t *a1)
{
  return MEMORY[0x1F40CDA78](a1);
}

int pthread_mutex_init(pthread_mutex_t *a1, const pthread_mutexattr_t *a2)
{
  return MEMORY[0x1F40CDA80](a1, a2);
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return MEMORY[0x1F40CDA88](a1);
}

int pthread_mutex_trylock(pthread_mutex_t *a1)
{
  return MEMORY[0x1F40CDA90](a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return MEMORY[0x1F40CDA98](a1);
}

int pthread_override_qos_class_end_np(pthread_override_t __override)
{
  return MEMORY[0x1F40CDAD0](__override);
}

pthread_override_t pthread_override_qos_class_start_np(pthread_t __pthread, qos_class_t __qos_class, int __relative_priority)
{
  return (pthread_override_t)MEMORY[0x1F40CDAD8](__pthread, *(void *)&__qos_class, *(void *)&__relative_priority);
}

pthread_t pthread_self(void)
{
  return (pthread_t)MEMORY[0x1F40CDB30]();
}

int pthread_setspecific(pthread_key_t a1, const void *a2)
{
  return MEMORY[0x1F40CDB70](a1, a2);
}

int pthread_setugid_np(uid_t a1, gid_t a2)
{
  return MEMORY[0x1F40CDB78](*(void *)&a1, *(void *)&a2);
}

ssize_t pwrite(int __fd, const void *__buf, size_t __nbyte, off_t a4)
{
  return MEMORY[0x1F40CDBC0](*(void *)&__fd, __buf, __nbyte, a4);
}

qos_class_t qos_class_self(void)
{
  return MEMORY[0x1F40CDBD8]();
}

void qsort(void *__base, size_t __nel, size_t __width, int (__cdecl *__compar)(const void *, const void *))
{
}

void qsort_b(void *__base, size_t __nel, size_t __width, void *__compar)
{
}

int readdir_r(DIR *a1, dirent *a2, dirent **a3)
{
  return MEMORY[0x1F40CDC68](a1, a2, a3);
}

void rename(const std::__fs::filesystem::path *__from, const std::__fs::filesystem::path *__to, std::error_code *__ec)
{
}

int renameat(int a1, const char *a2, int a3, const char *a4)
{
  return MEMORY[0x1F40CDD60](*(void *)&a1, a2, *(void *)&a3, a4);
}

int renameatx_np(int a1, const char *a2, int a3, const char *a4, unsigned int a5)
{
  return MEMORY[0x1F40CDD68](*(void *)&a1, a2, *(void *)&a3, a4, *(void *)&a5);
}

int renamex_np(const char *a1, const char *a2, unsigned int a3)
{
  return MEMORY[0x1F40CDD70](a1, a2, *(void *)&a3);
}

int searchfs(const char *a1, fssearchblock *a2, unint64_t *a3, unsigned int a4, unsigned int a5, searchstate *a6)
{
  return MEMORY[0x1F40CDED0](a1, a2, a3, *(void *)&a4, *(void *)&a5, a6);
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x1F40CE080](__str, __size, __format);
}

int sprintf(char *a1, const char *a2, ...)
{
  return MEMORY[0x1F40CE0A0](a1, a2);
}

int stat(const char *a1, stat *a2)
{
  return MEMORY[0x1F40CE110](a1, a2);
}

int statfs(const char *a1, statfs *a2)
{
  return MEMORY[0x1F40CE118](a1, a2);
}

int strcasecmp(const char *a1, const char *a2)
{
  return MEMORY[0x1F40CE138](a1, a2);
}

char *__cdecl strcasestr(const char *__big, const char *__little)
{
  return (char *)MEMORY[0x1F40CE140](__big, __little);
}

char *__cdecl strchr(char *__s, int __c)
{
  return (char *)MEMORY[0x1F40CE150](__s, *(void *)&__c);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1F40CE158](__s1, __s2);
}

char *__cdecl strcpy(char *__dst, const char *__src)
{
  return (char *)MEMORY[0x1F40CE168](__dst, __src);
}

char *__cdecl strdup(const char *__s1)
{
  return (char *)MEMORY[0x1F40CE178](__s1);
}

char *__cdecl strerror(int __errnum)
{
  return (char *)MEMORY[0x1F40CE188](*(void *)&__errnum);
}

size_t strlcat(char *__dst, const char *__source, size_t __size)
{
  return MEMORY[0x1F40CE1A8](__dst, __source, __size);
}

size_t strlcpy(char *__dst, const char *__source, size_t __size)
{
  return MEMORY[0x1F40CE1B0](__dst, __source, __size);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1F40CE1C8](__s);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return MEMORY[0x1F40CE1F0](__s1, __s2, __n);
}

char *__cdecl strncpy(char *__dst, const char *__src, size_t __n)
{
  return (char *)MEMORY[0x1F40CE1F8](__dst, __src, __n);
}

char *__cdecl strrchr(char *__s, int __c)
{
  return (char *)MEMORY[0x1F40CE230](__s, *(void *)&__c);
}

double strtod(const char *a1, char **a2)
{
  MEMORY[0x1F40CE260](a1, a2);
  return result;
}

uint64_t sysconf(int a1)
{
  return MEMORY[0x1F40CE3B8](*(void *)&a1);
}

int sysctl(int *a1, u_int a2, void *a3, size_t *a4, void *a5, size_t a6)
{
  return MEMORY[0x1F40CE3C0](a1, *(void *)&a2, a3, a4, a5, a6);
}

int8_t u_charType(UChar32 c)
{
  return MEMORY[0x1F417F718](*(void *)&c);
}

UBool u_isUWhiteSpace(UChar32 c)
{
  return MEMORY[0x1F417F7A0](*(void *)&c);
}

int unlink(const char *a1)
{
  return MEMORY[0x1F40CE5E0](a1);
}

int unlinkat(int a1, const char *a2, int a3)
{
  return MEMORY[0x1F40CE5E8](*(void *)&a1, a2, *(void *)&a3);
}

uint64_t unorm2_getNFCInstance()
{
  return MEMORY[0x1F4180230]();
}

uint64_t unorm2_normalize()
{
  return MEMORY[0x1F4180258]();
}

uint64_t unorm2_quickCheck()
{
  return MEMORY[0x1F4180268]();
}

int vasprintf(char **a1, const char *a2, va_list a3)
{
  return MEMORY[0x1F40CE680](a1, a2, a3);
}

kern_return_t vm_copy(vm_map_t target_task, vm_address_t source_address, vm_size_t size, vm_address_t dest_address)
{
  return MEMORY[0x1F40CE6B8](*(void *)&target_task, source_address, size, dest_address);
}