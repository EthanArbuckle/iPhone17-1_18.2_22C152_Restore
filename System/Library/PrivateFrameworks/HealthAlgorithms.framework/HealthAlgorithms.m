void sub_22275B9EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_22275BE10(_Unwind_Exception *a1)
{
  v7 = v4;

  objc_destroyWeak(v5);
  objc_destroyWeak(v3);
  objc_destroyWeak((id *)(v6 - 96));

  _Unwind_Resume(a1);
}

void sub_22275C1D4(_Unwind_Exception *a1)
{
  v8 = v5;

  objc_destroyWeak(v6);
  objc_destroyWeak(v4);
  objc_destroyWeak((id *)(v7 - 96));

  _Unwind_Resume(a1);
}

void sub_22275C3EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_22275C5D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_22275C884(_Unwind_Exception *a1)
{
  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_22275CB84(_Unwind_Exception *a1)
{
  v4 = v3;

  _Unwind_Resume(a1);
}

id ha_get_log()
{
  if (ha_get_log_onceToken != -1) {
    dispatch_once(&ha_get_log_onceToken, &__block_literal_global);
  }
  v0 = (void *)ha_get_log_log;
  return v0;
}

uint64_t ha_sensitive_logging_is_enabled()
{
  v0 = [MEMORY[0x263EFFA40] standardUserDefaults];
  uint64_t v1 = [v0 BOOLForKey:@"HKShowSensitiveLogItems"];

  return v1;
}

uint64_t __ha_get_log_block_invoke()
{
  ha_get_log_log = (uint64_t)os_log_create("com.apple.HealthAlgorithms", "framework");
  return MEMORY[0x270F9A758]();
}

uint64_t HAFacialMetricsGenerateHashForTimestamp(double a1)
{
  *(double *)&v6[1] = a1;
  uint64_t v1 = (void *)SecSHA1DigestCreate();
  v2 = v1;
  if (!v1)
  {
    v4 = ha_get_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT)) {
      HAFacialMetricsGenerateHashForTimestamp_cold_1(v4);
    }
    goto LABEL_8;
  }
  v6[0] = 0;
  if ((unint64_t)[v1 length] < 8)
  {
    v4 = ha_get_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT)) {
      HAFacialMetricsGenerateHashForTimestamp_cold_2(v4);
    }
LABEL_8:

    uint64_t v3 = 0;
    goto LABEL_9;
  }
  [v2 getBytes:v6 length:8];
  uint64_t v3 = v6[0];
LABEL_9:

  return v3;
}

void sub_22275CFF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22275D370(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22275D74C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id location, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  std::__function::__value_func<BOOL ()(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,double)>::~__value_func[abi:ne180100](&a16);
  std::__function::__value_func<BOOL ()(mimosa::Metadata const&)>::~__value_func[abi:ne180100](&a20);
  std::__function::__value_func<BOOL ()(mimosa::CodecVersion const&)>::~__value_func[abi:ne180100]((void *)(v22 - 72));
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<mimosa::Decoder,std::function<BOOL ()(mimosa::CodecVersion const&)> &,std::function<BOOL ()(mimosa::Metadata const&)> &,std::function<BOOL ()(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,double)> &>()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void sub_22275D87C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v9 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v12 = va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void);
  std::__function::__value_func<BOOL ()(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,double)>::~__value_func[abi:ne180100]((uint64_t *)va);
  std::__function::__value_func<BOOL ()(mimosa::Metadata const&)>::~__value_func[abi:ne180100]((uint64_t *)va1);
  std::__function::__value_func<BOOL ()(mimosa::CodecVersion const&)>::~__value_func[abi:ne180100]((uint64_t *)va2);
  MEMORY[0x223C9C430](v2, 0x10B2C4063BC60BBLL);
  _Unwind_Resume(a1);
}

void sub_22275DAAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  MEMORY[0x223C9C430](v12, 0x10E0C400EA7FA6FLL);
  _Unwind_Resume(a1);
}

void health_algorithms::PPGProcessor::Output::~Output(health_algorithms::PPGProcessor::Output *this)
{
  uint64_t v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v3;
    operator delete(v3);
  }
}

void sub_22275DDE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__throw_bad_variant_access[abi:ne180100]()
{
  exception = __cxa_allocate_exception(8uLL);
  void *exception = MEMORY[0x263F8C3A8] + 16;
  __cxa_throw(exception, MEMORY[0x263F8C1F8], (void (*)(void *))std::bad_variant_access::~bad_variant_access);
}

unint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<-[HAPPGFrame timestamp]::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,mimosa::PacketV1,std::__variant_detail::_Trait::PacketV2,std::__variant_detail::_Trait::PacketV3,std::__variant_detail::_Trait::PacketV4,std::__variant_detail::_Trait::PacketV5,std::__variant_detail::_Trait::PacketV6,std::__variant_detail::_Trait::PacketV7> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (*(unsigned char *)(a2 + 12))
  {
    unint64_t v3 = (__PAIR128__(125 * v2 / 3uLL, 125 * v2) - 3 * (125 * v2 / 3uLL)) >> 64;
    unint64_t v4 = -3 * v3 + 125 * v2;
    unint64_t v5 = 3 * (v3 + 1) - 125 * v2;
    unint64_t result = v3;
    if (v4 >= v5)
    {
      unint64_t result = v3 + 1;
      if (v4 == v5)
      {
        if (v3) {
          return v3 + 1;
        }
        else {
          return v3;
        }
      }
    }
  }
  else
  {
    char v7 = 101 * v2;
    unint64_t v8 = (unint64_t)(1953125 * v2) >> 6;
    unint64_t v9 = (1953125 * v2) & 0x3F;
    unint64_t v10 = -1953125 * v2 + ((v8 + 1) << 6);
    if ((v7 & 0x40) != 0) {
      unint64_t v11 = v8 + 1;
    }
    else {
      unint64_t v11 = v8;
    }
    BOOL v12 = v9 >= v10;
    if (v9 == v10) {
      unint64_t v13 = v11;
    }
    else {
      unint64_t v13 = v8 + 1;
    }
    if (v12) {
      return v13;
    }
    else {
      return v8;
    }
  }
  return result;
}

unint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<-[HAPPGFrame timestamp]::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,mimosa::PacketV1,std::__variant_detail::_Trait::PacketV2,std::__variant_detail::_Trait::PacketV3,std::__variant_detail::_Trait::PacketV4,std::__variant_detail::_Trait::PacketV5,std::__variant_detail::_Trait::PacketV6,std::__variant_detail::_Trait::PacketV7> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (*(unsigned char *)(a2 + 12))
  {
    unint64_t v3 = (__PAIR128__(125 * v2 / 3uLL, 125 * v2) - 3 * (125 * v2 / 3uLL)) >> 64;
    unint64_t v4 = -3 * v3 + 125 * v2;
    unint64_t v5 = 3 * (v3 + 1) - 125 * v2;
    unint64_t result = v3;
    if (v4 >= v5)
    {
      unint64_t result = v3 + 1;
      if (v4 == v5)
      {
        if (v3) {
          return v3 + 1;
        }
        else {
          return v3;
        }
      }
    }
  }
  else
  {
    char v7 = 101 * v2;
    unint64_t v8 = (unint64_t)(1953125 * v2) >> 6;
    unint64_t v9 = (1953125 * v2) & 0x3F;
    unint64_t v10 = -1953125 * v2 + ((v8 + 1) << 6);
    if ((v7 & 0x40) != 0) {
      unint64_t v11 = v8 + 1;
    }
    else {
      unint64_t v11 = v8;
    }
    BOOL v12 = v9 >= v10;
    if (v9 == v10) {
      unint64_t v13 = v11;
    }
    else {
      unint64_t v13 = v8 + 1;
    }
    if (v12) {
      return v13;
    }
    else {
      return v8;
    }
  }
  return result;
}

unint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<-[HAPPGFrame timestamp]::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,mimosa::PacketV1,std::__variant_detail::_Trait::PacketV2,std::__variant_detail::_Trait::PacketV3,std::__variant_detail::_Trait::PacketV4,std::__variant_detail::_Trait::PacketV5,std::__variant_detail::_Trait::PacketV6,std::__variant_detail::_Trait::PacketV7> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (*(unsigned char *)(a2 + 12))
  {
    unint64_t v3 = (__PAIR128__(125 * v2 / 3uLL, 125 * v2) - 3 * (125 * v2 / 3uLL)) >> 64;
    unint64_t v4 = -3 * v3 + 125 * v2;
    unint64_t v5 = 3 * (v3 + 1) - 125 * v2;
    unint64_t result = v3;
    if (v4 >= v5)
    {
      unint64_t result = v3 + 1;
      if (v4 == v5)
      {
        if (v3) {
          return v3 + 1;
        }
        else {
          return v3;
        }
      }
    }
  }
  else
  {
    char v7 = 101 * v2;
    unint64_t v8 = (unint64_t)(1953125 * v2) >> 6;
    unint64_t v9 = (1953125 * v2) & 0x3F;
    unint64_t v10 = -1953125 * v2 + ((v8 + 1) << 6);
    if ((v7 & 0x40) != 0) {
      unint64_t v11 = v8 + 1;
    }
    else {
      unint64_t v11 = v8;
    }
    BOOL v12 = v9 >= v10;
    if (v9 == v10) {
      unint64_t v13 = v11;
    }
    else {
      unint64_t v13 = v8 + 1;
    }
    if (v12) {
      return v13;
    }
    else {
      return v8;
    }
  }
  return result;
}

unint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<-[HAPPGFrame timestamp]::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,mimosa::PacketV1,std::__variant_detail::_Trait::PacketV2,std::__variant_detail::_Trait::PacketV3,std::__variant_detail::_Trait::PacketV4,std::__variant_detail::_Trait::PacketV5,std::__variant_detail::_Trait::PacketV6,std::__variant_detail::_Trait::PacketV7> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (*(unsigned char *)(a2 + 12))
  {
    unint64_t v3 = (__PAIR128__(125 * v2 / 3uLL, 125 * v2) - 3 * (125 * v2 / 3uLL)) >> 64;
    unint64_t v4 = -3 * v3 + 125 * v2;
    unint64_t v5 = 3 * (v3 + 1) - 125 * v2;
    unint64_t result = v3;
    if (v4 >= v5)
    {
      unint64_t result = v3 + 1;
      if (v4 == v5)
      {
        if (v3) {
          return v3 + 1;
        }
        else {
          return v3;
        }
      }
    }
  }
  else
  {
    char v7 = 101 * v2;
    unint64_t v8 = (unint64_t)(1953125 * v2) >> 6;
    unint64_t v9 = (1953125 * v2) & 0x3F;
    unint64_t v10 = -1953125 * v2 + ((v8 + 1) << 6);
    if ((v7 & 0x40) != 0) {
      unint64_t v11 = v8 + 1;
    }
    else {
      unint64_t v11 = v8;
    }
    BOOL v12 = v9 >= v10;
    if (v9 == v10) {
      unint64_t v13 = v11;
    }
    else {
      unint64_t v13 = v8 + 1;
    }
    if (v12) {
      return v13;
    }
    else {
      return v8;
    }
  }
  return result;
}

unint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<-[HAPPGFrame timestamp]::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,mimosa::PacketV1,std::__variant_detail::_Trait::PacketV2,std::__variant_detail::_Trait::PacketV3,std::__variant_detail::_Trait::PacketV4,std::__variant_detail::_Trait::PacketV5,std::__variant_detail::_Trait::PacketV6,std::__variant_detail::_Trait::PacketV7> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (*(unsigned char *)(a2 + 12))
  {
    unint64_t v3 = (__PAIR128__(125 * v2 / 3uLL, 125 * v2) - 3 * (125 * v2 / 3uLL)) >> 64;
    unint64_t v4 = -3 * v3 + 125 * v2;
    unint64_t v5 = 3 * (v3 + 1) - 125 * v2;
    unint64_t result = v3;
    if (v4 >= v5)
    {
      unint64_t result = v3 + 1;
      if (v4 == v5)
      {
        if (v3) {
          return v3 + 1;
        }
        else {
          return v3;
        }
      }
    }
  }
  else
  {
    char v7 = 101 * v2;
    unint64_t v8 = (unint64_t)(1953125 * v2) >> 6;
    unint64_t v9 = (1953125 * v2) & 0x3F;
    unint64_t v10 = -1953125 * v2 + ((v8 + 1) << 6);
    if ((v7 & 0x40) != 0) {
      unint64_t v11 = v8 + 1;
    }
    else {
      unint64_t v11 = v8;
    }
    BOOL v12 = v9 >= v10;
    if (v9 == v10) {
      unint64_t v13 = v11;
    }
    else {
      unint64_t v13 = v8 + 1;
    }
    if (v12) {
      return v13;
    }
    else {
      return v8;
    }
  }
  return result;
}

unint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<-[HAPPGFrame timestamp]::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,mimosa::PacketV1,std::__variant_detail::_Trait::PacketV2,std::__variant_detail::_Trait::PacketV3,std::__variant_detail::_Trait::PacketV4,std::__variant_detail::_Trait::PacketV5,std::__variant_detail::_Trait::PacketV6,std::__variant_detail::_Trait::PacketV7> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (*(unsigned char *)(a2 + 12))
  {
    unint64_t v3 = (__PAIR128__(125 * v2 / 3uLL, 125 * v2) - 3 * (125 * v2 / 3uLL)) >> 64;
    unint64_t v4 = -3 * v3 + 125 * v2;
    unint64_t v5 = 3 * (v3 + 1) - 125 * v2;
    unint64_t result = v3;
    if (v4 >= v5)
    {
      unint64_t result = v3 + 1;
      if (v4 == v5)
      {
        if (v3) {
          return v3 + 1;
        }
        else {
          return v3;
        }
      }
    }
  }
  else
  {
    char v7 = 101 * v2;
    unint64_t v8 = (unint64_t)(1953125 * v2) >> 6;
    unint64_t v9 = (1953125 * v2) & 0x3F;
    unint64_t v10 = -1953125 * v2 + ((v8 + 1) << 6);
    if ((v7 & 0x40) != 0) {
      unint64_t v11 = v8 + 1;
    }
    else {
      unint64_t v11 = v8;
    }
    BOOL v12 = v9 >= v10;
    if (v9 == v10) {
      unint64_t v13 = v11;
    }
    else {
      unint64_t v13 = v8 + 1;
    }
    if (v12) {
      return v13;
    }
    else {
      return v8;
    }
  }
  return result;
}

unint64_t std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<-[HAPPGFrame timestamp]::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,mimosa::PacketV1,std::__variant_detail::_Trait::PacketV2,std::__variant_detail::_Trait::PacketV3,std::__variant_detail::_Trait::PacketV4,std::__variant_detail::_Trait::PacketV5,std::__variant_detail::_Trait::PacketV6,std::__variant_detail::_Trait::PacketV7> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (*(unsigned char *)(a2 + 12))
  {
    unint64_t v3 = (__PAIR128__(125 * v2 / 3uLL, 125 * v2) - 3 * (125 * v2 / 3uLL)) >> 64;
    unint64_t v4 = -3 * v3 + 125 * v2;
    unint64_t v5 = 3 * (v3 + 1) - 125 * v2;
    unint64_t result = v3;
    if (v4 >= v5)
    {
      unint64_t result = v3 + 1;
      if (v4 == v5)
      {
        if (v3) {
          return v3 + 1;
        }
        else {
          return v3;
        }
      }
    }
  }
  else
  {
    char v7 = 101 * v2;
    unint64_t v8 = (unint64_t)(1953125 * v2) >> 6;
    unint64_t v9 = (1953125 * v2) & 0x3F;
    unint64_t v10 = -1953125 * v2 + ((v8 + 1) << 6);
    if ((v7 & 0x40) != 0) {
      unint64_t v11 = v8 + 1;
    }
    else {
      unint64_t v11 = v8;
    }
    BOOL v12 = v9 >= v10;
    if (v9 == v10) {
      unint64_t v13 = v11;
    }
    else {
      unint64_t v13 = v8 + 1;
    }
    if (v12) {
      return v13;
    }
    else {
      return v8;
    }
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<-[HAPPGFrame usage]::$_1> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,mimosa::PacketV1,std::__variant_detail::_Trait::PacketV2,std::__variant_detail::_Trait::PacketV3,std::__variant_detail::_Trait::PacketV4,std::__variant_detail::_Trait::PacketV5,std::__variant_detail::_Trait::PacketV6,std::__variant_detail::_Trait::PacketV7> const&>(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(a2 + 124);
  uint64_t v3 = 8;
  if ((v2 & 0x2000) != 0) {
    uint64_t v3 = (8 * (*(unsigned char *)(a2 + 140) & 1)) | 4;
  }
  if ((*(unsigned char *)(a2 + 122) & 1) == 0) {
    uint64_t v3 = 8 * (*(unsigned char *)(a2 + 140) & 1);
  }
  return v3 | (v2 >> 14) & 2 | (8 * ((v2 >> 1) & 1)) | ((v2 & 0x10080) != 0);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<-[HAPPGFrame usage]::$_1> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,mimosa::PacketV1,std::__variant_detail::_Trait::PacketV2,std::__variant_detail::_Trait::PacketV3,std::__variant_detail::_Trait::PacketV4,std::__variant_detail::_Trait::PacketV5,std::__variant_detail::_Trait::PacketV6,std::__variant_detail::_Trait::PacketV7> const&>(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(a2 + 124);
  uint64_t v3 = 8;
  if ((v2 & 0x2000) != 0) {
    uint64_t v3 = (8 * (*(unsigned char *)(a2 + 140) & 1)) | 4;
  }
  if ((*(unsigned char *)(a2 + 122) & 1) == 0) {
    uint64_t v3 = 8 * (*(unsigned char *)(a2 + 140) & 1);
  }
  return v3 | (v2 >> 14) & 2 | (8 * ((v2 >> 1) & 1)) | ((v2 & 0x10080) != 0);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<-[HAPPGFrame usage]::$_1> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,mimosa::PacketV1,std::__variant_detail::_Trait::PacketV2,std::__variant_detail::_Trait::PacketV3,std::__variant_detail::_Trait::PacketV4,std::__variant_detail::_Trait::PacketV5,std::__variant_detail::_Trait::PacketV6,std::__variant_detail::_Trait::PacketV7> const&>(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(a2 + 132);
  uint64_t v3 = 8;
  if ((v2 & 0x2000) != 0) {
    uint64_t v3 = (8 * (*(unsigned char *)(a2 + 138) & 1)) | 4;
  }
  if ((*(unsigned char *)(a2 + 130) & 1) == 0) {
    uint64_t v3 = 8 * (*(unsigned char *)(a2 + 138) & 1);
  }
  return v3 | (v2 >> 14) & 2 | (8 * ((v2 >> 1) & 1)) | ((v2 & 0x10080) != 0);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<-[HAPPGFrame usage]::$_1> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,mimosa::PacketV1,std::__variant_detail::_Trait::PacketV2,std::__variant_detail::_Trait::PacketV3,std::__variant_detail::_Trait::PacketV4,std::__variant_detail::_Trait::PacketV5,std::__variant_detail::_Trait::PacketV6,std::__variant_detail::_Trait::PacketV7> const&>(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(a2 + 132);
  uint64_t v3 = 8;
  if ((v2 & 0x2000) != 0) {
    uint64_t v3 = (8 * (*(unsigned char *)(a2 + 138) & 1)) | 4;
  }
  if ((*(unsigned char *)(a2 + 130) & 1) == 0) {
    uint64_t v3 = 8 * (*(unsigned char *)(a2 + 138) & 1);
  }
  return v3 | (v2 >> 14) & 2 | (8 * ((v2 >> 1) & 1)) | ((v2 & 0x10080) != 0);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<-[HAPPGFrame usage]::$_1> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,mimosa::PacketV1,std::__variant_detail::_Trait::PacketV2,std::__variant_detail::_Trait::PacketV3,std::__variant_detail::_Trait::PacketV4,std::__variant_detail::_Trait::PacketV5,std::__variant_detail::_Trait::PacketV6,std::__variant_detail::_Trait::PacketV7> const&>(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(a2 + 132);
  uint64_t v3 = 8;
  if ((v2 & 0x2000) != 0) {
    uint64_t v3 = (8 * (*(unsigned char *)(a2 + 138) & 1)) | 4;
  }
  if ((*(unsigned char *)(a2 + 130) & 1) == 0) {
    uint64_t v3 = 8 * (*(unsigned char *)(a2 + 138) & 1);
  }
  return v3 | (v2 >> 14) & 2 | (8 * ((v2 >> 1) & 1)) | ((v2 & 0x10080) != 0);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<-[HAPPGFrame usage]::$_1> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,mimosa::PacketV1,std::__variant_detail::_Trait::PacketV2,std::__variant_detail::_Trait::PacketV3,std::__variant_detail::_Trait::PacketV4,std::__variant_detail::_Trait::PacketV5,std::__variant_detail::_Trait::PacketV6,std::__variant_detail::_Trait::PacketV7> const&>(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(a2 + 132);
  uint64_t v3 = 8;
  if ((v2 & 0x2000) != 0) {
    uint64_t v3 = (8 * (*(unsigned char *)(a2 + 138) & 1)) | 4;
  }
  if ((*(unsigned char *)(a2 + 130) & 1) == 0) {
    uint64_t v3 = 8 * (*(unsigned char *)(a2 + 138) & 1);
  }
  return v3 | (v2 >> 14) & 2 | (8 * ((v2 >> 1) & 1)) | ((v2 & 0x10080) != 0);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<-[HAPPGFrame usage]::$_1> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,mimosa::PacketV1,std::__variant_detail::_Trait::PacketV2,std::__variant_detail::_Trait::PacketV3,std::__variant_detail::_Trait::PacketV4,std::__variant_detail::_Trait::PacketV5,std::__variant_detail::_Trait::PacketV6,std::__variant_detail::_Trait::PacketV7> const&>(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(a2 + 132);
  uint64_t v3 = 8;
  if ((v2 & 0x2000) != 0) {
    uint64_t v3 = (8 * (*(unsigned char *)(a2 + 138) & 1)) | 4;
  }
  if ((*(unsigned char *)(a2 + 130) & 1) == 0) {
    uint64_t v3 = 8 * (*(unsigned char *)(a2 + 138) & 1);
  }
  return v3 | (v2 >> 14) & 2 | (8 * ((v2 >> 1) & 1)) | ((v2 & 0x10080) != 0);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<-[HAPPGFrame temperatureSample]::$_2> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,mimosa::PacketV1,std::__variant_detail::_Trait::PacketV2,std::__variant_detail::_Trait::PacketV3,std::__variant_detail::_Trait::PacketV4,std::__variant_detail::_Trait::PacketV5,std::__variant_detail::_Trait::PacketV6,std::__variant_detail::_Trait::PacketV7> const&>()
{
  return 0;
}

HAPPGTemperatureSample *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<-[HAPPGFrame temperatureSample]::$_2> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,mimosa::PacketV1,std::__variant_detail::_Trait::PacketV2,std::__variant_detail::_Trait::PacketV3,std::__variant_detail::_Trait::PacketV4,std::__variant_detail::_Trait::PacketV5,std::__variant_detail::_Trait::PacketV6,std::__variant_detail::_Trait::PacketV7> const&>(uint64_t a1, uint64_t a2)
{
  if (*(_WORD *)(a2 + 208) == 1)
  {
    uint64_t v3 = [HAPPGTemperatureSample alloc];
    *(float *)&double v4 = (float)*(__int16 *)(a2 + 210) * 0.0078125;
    unint64_t v5 = [(HAPPGTemperatureSample *)v3 initWithDegreesCelsius:v4];
  }
  else
  {
    unint64_t v5 = 0;
  }
  return v5;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<-[HAPPGFrame temperatureSample]::$_2> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,mimosa::PacketV1,std::__variant_detail::_Trait::PacketV2,std::__variant_detail::_Trait::PacketV3,std::__variant_detail::_Trait::PacketV4,std::__variant_detail::_Trait::PacketV5,std::__variant_detail::_Trait::PacketV6,std::__variant_detail::_Trait::PacketV7> const&>()
{
  return 0;
}

HAPPGTemperatureSample *std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<-[HAPPGFrame temperatureSample]::$_2> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,mimosa::PacketV1,std::__variant_detail::_Trait::PacketV2,std::__variant_detail::_Trait::PacketV3,std::__variant_detail::_Trait::PacketV4,std::__variant_detail::_Trait::PacketV5,std::__variant_detail::_Trait::PacketV6,std::__variant_detail::_Trait::PacketV7> const&>(uint64_t a1, uint64_t a2)
{
  if (*(_WORD *)(a2 + 216) == 1)
  {
    uint64_t v3 = [HAPPGTemperatureSample alloc];
    *(float *)&double v4 = (float)*(__int16 *)(a2 + 218) * 0.0078125;
    unint64_t v5 = [(HAPPGTemperatureSample *)v3 initWithDegreesCelsius:v4];
  }
  else
  {
    unint64_t v5 = 0;
  }
  return v5;
}

HAPPGTemperatureSample *std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<-[HAPPGFrame temperatureSample]::$_2> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,mimosa::PacketV1,std::__variant_detail::_Trait::PacketV2,std::__variant_detail::_Trait::PacketV3,std::__variant_detail::_Trait::PacketV4,std::__variant_detail::_Trait::PacketV5,std::__variant_detail::_Trait::PacketV6,std::__variant_detail::_Trait::PacketV7> const&>(uint64_t a1, uint64_t a2)
{
  if (*(_WORD *)(a2 + 216) == 1)
  {
    uint64_t v3 = [HAPPGTemperatureSample alloc];
    *(float *)&double v4 = (float)*(__int16 *)(a2 + 218) * 0.0078125;
    unint64_t v5 = [(HAPPGTemperatureSample *)v3 initWithDegreesCelsius:v4];
  }
  else
  {
    unint64_t v5 = 0;
  }
  return v5;
}

HAPPGTemperatureSample *std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<-[HAPPGFrame temperatureSample]::$_2> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,mimosa::PacketV1,std::__variant_detail::_Trait::PacketV2,std::__variant_detail::_Trait::PacketV3,std::__variant_detail::_Trait::PacketV4,std::__variant_detail::_Trait::PacketV5,std::__variant_detail::_Trait::PacketV6,std::__variant_detail::_Trait::PacketV7> const&>(uint64_t a1, uint64_t a2)
{
  if (*(_WORD *)(a2 + 192) == 1)
  {
    uint64_t v3 = [HAPPGTemperatureSample alloc];
    *(float *)&double v4 = (float)*(__int16 *)(a2 + 194) * 0.0078125;
    unint64_t v5 = [(HAPPGTemperatureSample *)v3 initWithDegreesCelsius:v4];
  }
  else
  {
    unint64_t v5 = 0;
  }
  return v5;
}

HAPPGTemperatureSample *std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<-[HAPPGFrame temperatureSample]::$_2> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,mimosa::PacketV1,std::__variant_detail::_Trait::PacketV2,std::__variant_detail::_Trait::PacketV3,std::__variant_detail::_Trait::PacketV4,std::__variant_detail::_Trait::PacketV5,std::__variant_detail::_Trait::PacketV6,std::__variant_detail::_Trait::PacketV7> const&>(uint64_t a1, uint64_t a2)
{
  if (*(_WORD *)(a2 + 192) == 1)
  {
    uint64_t v3 = [HAPPGTemperatureSample alloc];
    *(float *)&double v4 = (float)*(__int16 *)(a2 + 194) * 0.0078125;
    unint64_t v5 = [(HAPPGTemperatureSample *)v3 initWithDegreesCelsius:v4];
  }
  else
  {
    unint64_t v5 = 0;
  }
  return v5;
}

void __clang_call_terminate(void *a1)
{
}

void std::__shared_weak_count::__release_shared[abi:ne180100](std::__shared_weak_count *a1)
{
  if (!atomic_fetch_add(&a1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a1->__on_zero_shared)(a1);
    std::__shared_weak_count::__release_weak(a1);
  }
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  uint64_t v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x263F8C208], MEMORY[0x263F8C090]);
}

BOOL std::type_info::operator==[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  if (v2 == v3) {
    return 1;
  }
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3)) {
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  }
  return 0;
}

void *std::__function::__value_func<BOOL ()(mimosa::CodecVersion const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_22275EBA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<BOOL ()(mimosa::Metadata const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_22275EE0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<BOOL ()(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,double)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__function::__value_func<BOOL ()(mimosa::CodecVersion const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t std::__function::__value_func<BOOL ()(mimosa::Metadata const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t std::__function::__value_func<BOOL ()(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,double)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void std::default_delete<mimosa::Decoder>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    std::__variant_detail::__dtor<std::__variant_detail::__traits<mimosa::v1::Decoder,mimosa::v2::Decoder>,(std::__variant_detail::_Trait)1>::~__dtor((unsigned int *)(a2 + 96));
    std::__function::__value_func<BOOL ()(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,double)>::~__value_func[abi:ne180100]((void *)(a2 + 64));
    std::__function::__value_func<BOOL ()(mimosa::Metadata const&)>::~__value_func[abi:ne180100]((void *)(a2 + 32));
    std::__function::__value_func<BOOL ()(mimosa::CodecVersion const&)>::~__value_func[abi:ne180100]((void *)a2);
    JUMPOUT(0x223C9C430);
  }
}

unsigned int *std::__variant_detail::__dtor<std::__variant_detail::__traits<mimosa::v1::Decoder,mimosa::v2::Decoder>,(std::__variant_detail::_Trait)1>::~__dtor(unsigned int *a1)
{
  uint64_t v2 = a1[548];
  if (v2 != -1) {
    off_26D4E3E20[v2]((int)&v4, (mimosa::v1::Decoder *)a1);
  }
  a1[548] = -1;
  return a1;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN6mimosa2v17DecoderENS8_2v27DecoderEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSA_SC_EEEEEEDcSG_DpT0_(int a1, mimosa::v1::Decoder *this)
{
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN6mimosa2v17DecoderENS8_2v27DecoderEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSA_SC_EEEEEEDcSG_DpT0_(int a1, mimosa::v2::Decoder *this)
{
}

void mimosa::v1::Decoder::~Decoder(mimosa::v1::Decoder *this)
{
  std::__function::__value_func<BOOL ()(mimosa::PacketV1 const&,double)>::~__value_func[abi:ne180100]((void *)this + 270);
  std::__function::__value_func<BOOL ()(mimosa::Metadata const&)>::~__value_func[abi:ne180100]((void *)this + 266);
  uint64_t v2 = (void *)*((void *)this + 254);
  if (v2)
  {
    *((void *)this + 255) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 249);
  if (v3)
  {
    *((void *)this + 250) = v3;
    operator delete(v3);
  }
  std::__optional_destruct_base<mimosa::LightPathSemantics,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 152);
  if (*((unsigned char *)this + 144) && *((char *)this + 143) < 0) {
    operator delete(*((void **)this + 15));
  }
  if (*((unsigned char *)this + 112) && *((char *)this + 111) < 0) {
    operator delete(*((void **)this + 11));
  }
  if (*((unsigned char *)this + 80))
  {
    if (*((char *)this + 79) < 0) {
      operator delete(*((void **)this + 7));
    }
  }
}

void *std::__function::__value_func<BOOL ()(mimosa::PacketV1 const&,double)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__optional_destruct_base<mimosa::LightPathSemantics,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t v2 = *(void **)(a1 + 48);
    if (v2)
    {
      *(void *)(a1 + 56) = v2;
      operator delete(v2);
    }
    uint64_t v3 = *(void **)(a1 + 24);
    if (v3)
    {
      *(void *)(a1 + 32) = v3;
      operator delete(v3);
    }
    char v4 = *(void **)a1;
    if (*(void *)a1)
    {
      *(void *)(a1 + 8) = v4;
      operator delete(v4);
    }
  }
  return a1;
}

void mimosa::v2::Decoder::~Decoder(mimosa::v2::Decoder *this)
{
}

void mimosa::v2::PacketState::~PacketState(mimosa::v2::PacketState *this)
{
  std::__hash_table<std::__hash_value_type<unsigned short,unsigned int>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,unsigned int>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,unsigned int>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,unsigned int>>>::~__hash_table((uint64_t)this + 1104);
  std::__hash_table<std::__hash_value_type<unsigned short,unsigned int>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,unsigned int>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,unsigned int>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,unsigned int>>>::~__hash_table((uint64_t)this + 1064);
  uint64_t v2 = (void *)*((void *)this + 125);
  if (v2)
  {
    *((void *)this + 126) = v2;
    operator delete(v2);
  }
  std::__hash_table<std::__hash_value_type<unsigned short,unsigned int>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,unsigned int>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,unsigned int>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,unsigned int>>>::~__hash_table((uint64_t)this + 952);
  std::__hash_table<std::__hash_value_type<unsigned short,unsigned int>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,unsigned int>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,unsigned int>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,unsigned int>>>::~__hash_table((uint64_t)this + 912);
  uint64_t v3 = (void *)*((void *)this + 106);
  if (v3)
  {
    *((void *)this + 107) = v3;
    operator delete(v3);
  }
  char v4 = (void *)*((void *)this + 90);
  if (v4)
  {
    *((void *)this + 9std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = v4;
    operator delete(v4);
  }
  unint64_t v10 = (void **)((char *)this + 680);
  std::vector<std::vector<unsigned short>>::__destroy_vector::operator()[abi:ne180100](&v10);
  unint64_t v5 = (void *)*((void *)this + 77);
  if (v5)
  {
    *((void *)this + 78) = v5;
    operator delete(v5);
  }
  unint64_t v10 = (void **)((char *)this + 584);
  std::vector<std::vector<unsigned short>>::__destroy_vector::operator()[abi:ne180100](&v10);
  uint64_t v6 = (void *)*((void *)this + 46);
  if (v6)
  {
    *((void *)this + 47) = v6;
    operator delete(v6);
  }
  char v7 = (void *)*((void *)this + 43);
  if (v7)
  {
    *((void *)this + 44) = v7;
    operator delete(v7);
  }
  unint64_t v10 = (void **)((char *)this + 320);
  std::vector<std::vector<unsigned short>>::__destroy_vector::operator()[abi:ne180100](&v10);
  unint64_t v8 = (void *)*((void *)this + 31);
  if (v8)
  {
    *((void *)this + 32) = v8;
    operator delete(v8);
  }
  std::__hash_table<std::__hash_value_type<unsigned short,unsigned int>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,unsigned int>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,unsigned int>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,unsigned int>>>::~__hash_table((uint64_t)this + 208);
  unint64_t v10 = (void **)((char *)this + 184);
  std::vector<std::vector<unsigned short>>::__destroy_vector::operator()[abi:ne180100](&v10);
  unint64_t v9 = (void *)*((void *)this + 15);
  if (v9)
  {
    *((void *)this + 16) = v9;
    operator delete(v9);
  }
  std::__hash_table<std::__hash_value_type<unsigned short,unsigned int>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,unsigned int>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,unsigned int>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,unsigned int>>>::~__hash_table((uint64_t)this + 80);
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned short,unsigned int>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,unsigned int>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,unsigned int>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,unsigned int>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  char v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void std::vector<std::vector<unsigned short>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::vector<unsigned short>>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::vector<unsigned short>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (v2 != *a1)
  {
    uint64_t v4 = a1[1];
    do
    {
      uint64_t v6 = *(void **)(v4 - 24);
      v4 -= 24;
      unint64_t v5 = v6;
      if (v6)
      {
        *(void *)(v2 - 16) = v5;
        operator delete(v5);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

void *std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::default_delete<health_algorithms::PPGProcessor>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    std::__hash_table<std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>>>::~__hash_table(a2 + 16);
    uint64_t v3 = *(std::__shared_weak_count **)(a2 + 8);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    JUMPOUT(0x223C9C430);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>>>::__deallocate_node(int a1, void *__p)
{
  if (__p)
  {
    uint64_t v2 = __p;
    do
    {
      uint64_t v3 = (void *)*v2;
      uint64_t v4 = v2[4];
      v2[4] = 0;
      if (v4) {
        MEMORY[0x223C9C430](v4, 0x1000C40A094D7EDLL);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void *std::allocate_shared[abi:ne180100]<std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7>,std::allocator<std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7>>,std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,void>@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x160uLL);
  unint64_t result = std::__shared_ptr_emplace<std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7>>::__shared_ptr_emplace[abi:ne180100]<std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,std::allocator<std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7>>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_22275F728(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7>>::__shared_ptr_emplace[abi:ne180100]<std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,std::allocator<std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7>>,0>(void *a1, uint64_t a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26D4E3E40;
  std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_22275F784(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D4E3E40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D4E3E40;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x223C9C430);
}

uint64_t std::__shared_ptr_emplace<std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7>>::__on_zero_shared(uint64_t a1)
{
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7>,(std::__variant_detail::_Trait)1>::~__dtor(a1 + 24);
}

uint64_t std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7>,(std::__variant_detail::_Trait)1>::__copy_constructor(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(_DWORD *)(a1 + 320) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7>>::__generic_construct[abi:ne180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7>,(std::__variant_detail::_Trait)1> const&>(a1, a2);
  return a1;
}

void sub_22275F84C(_Unwind_Exception *a1)
{
  std::__variant_detail::__dtor<std::__variant_detail::__traits<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7>,(std::__variant_detail::_Trait)1>::~__dtor(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7>>::__generic_construct[abi:ne180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7>,(std::__variant_detail::_Trait)1> const&>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 320);
  if (v4 != -1) {
    unint64_t result = ((uint64_t (*)(char *, uint64_t))off_26D4E3E80[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 320) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 320);
  if (v5 != -1)
  {
    unint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))*(&off_26D4E3EB8 + v5))(&v6, v3, a2);
    *(_DWORD *)(v3 + 320) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN6mimosa8PacketV1ENS8_8PacketV2ENS8_8PacketV3ENS8_8PacketV4ENS8_8PacketV5ENS8_8PacketV6ENS8_8PacketV7EEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSH_1EJS9_SA_SB_SC_SD_SE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, void *a2)
{
  uint64_t v3 = (void *)a2[9];
  if (v3)
  {
    a2[10] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a2[4];
  if (v4)
  {
    a2[5] = v4;
    operator delete(v4);
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN6mimosa8PacketV1ENS8_8PacketV2ENS8_8PacketV3ENS8_8PacketV4ENS8_8PacketV5ENS8_8PacketV6ENS8_8PacketV7EEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSH_1EJS9_SA_SB_SC_SD_SE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, void *a2)
{
  uint64_t v3 = (void *)a2[20];
  if (v3)
  {
    a2[21] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a2[9];
  if (v4)
  {
    a2[10] = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)a2[4];
  if (v5)
  {
    a2[5] = v5;
    operator delete(v5);
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN6mimosa8PacketV1ENS8_8PacketV2ENS8_8PacketV3ENS8_8PacketV4ENS8_8PacketV5ENS8_8PacketV6ENS8_8PacketV7EEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSH_1EJS9_SA_SB_SC_SD_SE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, void *a2)
{
  uint64_t v3 = (void *)a2[20];
  if (v3)
  {
    a2[21] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a2[9];
  if (v4)
  {
    a2[10] = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)a2[4];
  if (v5)
  {
    a2[5] = v5;
    operator delete(v5);
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN6mimosa8PacketV1ENS8_8PacketV2ENS8_8PacketV3ENS8_8PacketV4ENS8_8PacketV5ENS8_8PacketV6ENS8_8PacketV7EEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSH_1EJS9_SA_SB_SC_SD_SE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, void *a2)
{
  uint64_t v3 = (void *)a2[20];
  if (v3)
  {
    a2[21] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a2[9];
  if (v4)
  {
    a2[10] = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)a2[4];
  if (v5)
  {
    a2[5] = v5;
    operator delete(v5);
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN6mimosa8PacketV1ENS8_8PacketV2ENS8_8PacketV3ENS8_8PacketV4ENS8_8PacketV5ENS8_8PacketV6ENS8_8PacketV7EEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSH_1EJS9_SA_SB_SC_SD_SE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, void *a2)
{
  uint64_t v3 = (void *)a2[20];
  if (v3)
  {
    a2[21] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a2[9];
  if (v4)
  {
    a2[10] = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)a2[4];
  if (v5)
  {
    a2[5] = v5;
    operator delete(v5);
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN6mimosa8PacketV1ENS8_8PacketV2ENS8_8PacketV3ENS8_8PacketV4ENS8_8PacketV5ENS8_8PacketV6ENS8_8PacketV7EEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSH_1EJS9_SA_SB_SC_SD_SE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, void *a2)
{
  uint64_t v3 = (void *)a2[9];
  if (v3)
  {
    a2[10] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a2[4];
  if (v4)
  {
    a2[5] = v4;
    operator delete(v4);
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN6mimosa8PacketV1ENS8_8PacketV2ENS8_8PacketV3ENS8_8PacketV4ENS8_8PacketV5ENS8_8PacketV6ENS8_8PacketV7EEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSH_1EJS9_SA_SB_SC_SD_SE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, void *a2)
{
  uint64_t v3 = (void *)a2[9];
  if (v3)
  {
    a2[10] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a2[4];
  if (v4)
  {
    a2[5] = v4;
    operator delete(v4);
  }
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN6mimosa8PacketV1ENS8_8PacketV2ENS8_8PacketV3ENS8_8PacketV4ENS8_8PacketV5ENS8_8PacketV6ENS8_8PacketV7EEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSP_OT0_E_JRNS0_6__baseILSK_1EJS9_SA_SB_SC_SD_SE_SF_EEERKSX_EEEDcSP_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return std::__variant_detail::__alt<0ul,mimosa::PacketV1>::__alt[abi:ne180100]<mimosa::PacketV1 const&>(a2, a3);
}

mimosa::PacketV2 *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN6mimosa8PacketV1ENS8_8PacketV2ENS8_8PacketV3ENS8_8PacketV4ENS8_8PacketV5ENS8_8PacketV6ENS8_8PacketV7EEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSP_OT0_E_JRNS0_6__baseILSK_1EJS9_SA_SB_SC_SD_SE_SF_EEERKSX_EEEDcSP_DpT0_(int a1, mimosa::PacketV2 *this, mimosa::PacketV2 *a3)
{
  return mimosa::PacketV2::PacketV2(this, a3);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN6mimosa8PacketV1ENS8_8PacketV2ENS8_8PacketV3ENS8_8PacketV4ENS8_8PacketV5ENS8_8PacketV6ENS8_8PacketV7EEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSP_OT0_E_JRNS0_6__baseILSK_1EJS9_SA_SB_SC_SD_SE_SF_EEERKSX_EEEDcSP_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mimosa::PacketV3::PacketV3(a2, a3);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN6mimosa8PacketV1ENS8_8PacketV2ENS8_8PacketV3ENS8_8PacketV4ENS8_8PacketV5ENS8_8PacketV6ENS8_8PacketV7EEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSP_OT0_E_JRNS0_6__baseILSK_1EJS9_SA_SB_SC_SD_SE_SF_EEERKSX_EEEDcSP_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mimosa::PacketV4::PacketV4(a2, a3);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN6mimosa8PacketV1ENS8_8PacketV2ENS8_8PacketV3ENS8_8PacketV4ENS8_8PacketV5ENS8_8PacketV6ENS8_8PacketV7EEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSP_OT0_E_JRNS0_6__baseILSK_1EJS9_SA_SB_SC_SD_SE_SF_EEERKSX_EEEDcSP_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return mimosa::PacketV5::PacketV5(a2, a3);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN6mimosa8PacketV1ENS8_8PacketV2ENS8_8PacketV3ENS8_8PacketV4ENS8_8PacketV5ENS8_8PacketV6ENS8_8PacketV7EEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSP_OT0_E_JRNS0_6__baseILSK_1EJS9_SA_SB_SC_SD_SE_SF_EEERKSX_EEEDcSP_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return std::__variant_detail::__alt<5ul,mimosa::PacketV6>::__alt[abi:ne180100]<mimosa::PacketV6 const&>(a2, a3);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6ELm6EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJN6mimosa8PacketV1ENS8_8PacketV2ENS8_8PacketV3ENS8_8PacketV4ENS8_8PacketV5ENS8_8PacketV6ENS8_8PacketV7EEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSP_OT0_E_JRNS0_6__baseILSK_1EJS9_SA_SB_SC_SD_SE_SF_EEERKSX_EEEDcSP_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return std::__variant_detail::__alt<6ul,mimosa::PacketV7>::__alt[abi:ne180100]<mimosa::PacketV7 const&>(a2, a3);
}

uint64_t std::__variant_detail::__alt<0ul,mimosa::PacketV1>::__alt[abi:ne180100]<mimosa::PacketV1 const&>(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  std::vector<mimosa::OpticalSampleV1>::__init_with_size[abi:ne180100]<mimosa::OpticalSampleV1*,mimosa::OpticalSampleV1*>((void *)(a1 + 32), *(const void **)(a2 + 32), *(void *)(a2 + 40), 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 2));
  long long v4 = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 56) = v4;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  std::vector<mimosa::AccelSample>::__init_with_size[abi:ne180100]<mimosa::AccelSample*,mimosa::AccelSample*>((void *)(a1 + 72), *(const void **)(a2 + 72), *(void *)(a2 + 80), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 80) - *(void *)(a2 + 72)) >> 2));
  long long v5 = *(_OWORD *)(a2 + 96);
  long long v6 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v6;
  *(_OWORD *)(a1 + 96) = v5;
  return a1;
}

void sub_22275FCA4(_Unwind_Exception *exception_object)
{
  long long v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 40) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<mimosa::OpticalSampleV1>::__init_with_size[abi:ne180100]<mimosa::OpticalSampleV1*,mimosa::OpticalSampleV1*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    unint64_t result = std::vector<mimosa::OpticalSampleV1>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      unint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_22275FD20(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<mimosa::OpticalSampleV1>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x71C71C71C71C71DLL) {
    std::vector<mimosa::OpticalSampleV1>::__throw_length_error[abi:ne180100]();
  }
  unint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<mimosa::OpticalSampleV1>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[36 * v4];
  return result;
}

void std::vector<mimosa::OpticalSampleV1>::__throw_length_error[abi:ne180100]()
{
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<mimosa::OpticalSampleV1>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x71C71C71C71C71DLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(36 * a2);
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_2646269B0, MEMORY[0x263F8C060]);
}

void sub_22275FE40(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  unint64_t result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C388] + 16);
  return result;
}

void *std::vector<mimosa::AccelSample>::__init_with_size[abi:ne180100]<mimosa::AccelSample*,mimosa::AccelSample*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    unint64_t result = std::vector<mimosa::AccelSample>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      unint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_22275FEE8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<mimosa::AccelSample>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0xCCCCCCCCCCCCCCDLL) {
    std::vector<mimosa::OpticalSampleV1>::__throw_length_error[abi:ne180100]();
  }
  unint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<mimosa::AccelSample>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[20 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<mimosa::AccelSample>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xCCCCCCCCCCCCCCDLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(20 * a2);
}

mimosa::PacketV2 *mimosa::PacketV2::PacketV2(mimosa::PacketV2 *this, const mimosa::PacketV2 *a2)
{
  *(_OWORD *)this = *(_OWORD *)a2;
  *((_OWORD *)this + std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = *((_OWORD *)a2 + 1);
  *((void *)this + 4) = 0;
  *((void *)this + std::__function::__value_func<BOOL ()(mimosa::Metadata const&)>::~__value_func[abi:ne180100]((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  std::vector<mimosa::OpticalSampleV1>::__init_with_size[abi:ne180100]<mimosa::OpticalSampleV1*,mimosa::OpticalSampleV1*>((void *)this + 4, *((const void **)a2 + 4), *((void *)a2 + 5), 0x8E38E38E38E38E39 * ((uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 2));
  long long v4 = *(_OWORD *)((char *)a2 + 56);
  *((void *)this + std::__function::__value_func<BOOL ()(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,double)>::~__value_func[abi:ne180100]((void *)this + 9) = 0;
  *(_OWORD *)((char *)this + 56) = v4;
  *((void *)this + 10) = 0;
  *((void *)this + 1std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = 0;
  std::vector<mimosa::AccelSample>::__init_with_size[abi:ne180100]<mimosa::AccelSample*,mimosa::AccelSample*>((void *)this + 9, *((const void **)a2 + 9), *((void *)a2 + 10), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)a2 + 10) - *((void *)a2 + 9)) >> 2));
  long long v5 = *((_OWORD *)a2 + 6);
  long long v6 = *((_OWORD *)a2 + 8);
  *((_OWORD *)this + 7) = *((_OWORD *)a2 + 7);
  *((_OWORD *)this + 8) = v6;
  *((_OWORD *)this + 6) = v5;
  long long v7 = *((_OWORD *)a2 + 9);
  *((void *)this + 20) = 0;
  *((_OWORD *)this + std::__function::__value_func<BOOL ()(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,double)>::~__value_func[abi:ne180100]((void *)this + 9) = v7;
  *((void *)this + 2std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = 0;
  *((void *)this + 22) = 0;
  std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short *,unsigned short *>((void *)this + 20, *((const void **)a2 + 20), *((void *)a2 + 21), (uint64_t)(*((void *)a2 + 21) - *((void *)a2 + 20)) >> 1);
  *((_WORD *)this + 92) = *((_WORD *)a2 + 92);
  long long v8 = *((_OWORD *)a2 + 13);
  *((_OWORD *)this + 12) = *((_OWORD *)a2 + 12);
  *((_OWORD *)this + 13) = v8;
  long long v9 = *((_OWORD *)a2 + 14);
  long long v10 = *((_OWORD *)a2 + 15);
  long long v11 = *((_OWORD *)a2 + 17);
  *((_OWORD *)this + 16) = *((_OWORD *)a2 + 16);
  *((_OWORD *)this + 17) = v11;
  *((_OWORD *)this + 14) = v9;
  *((_OWORD *)this + 1std::__function::__value_func<BOOL ()(mimosa::Metadata const&)>::~__value_func[abi:ne180100]((void *)this + 5) = v10;
  return this;
}

void sub_2227600A0(_Unwind_Exception *exception_object)
{
  long long v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 80) = v5;
    operator delete(v5);
  }
  long long v6 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 40) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short *,unsigned short *>(void *result, const void *a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    unint64_t result = std::vector<unsigned short>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      unint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_222760134(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned short>::__vallocate[abi:ne180100](void *a1, uint64_t a2)
{
  if (a2 < 0) {
    std::vector<mimosa::OpticalSampleV1>::__throw_length_error[abi:ne180100]();
  }
  unint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[2 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(uint64_t a1, uint64_t a2)
{
  if (a2 < 0) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(2 * a2);
}

uint64_t mimosa::PacketV3::PacketV3(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  std::vector<mimosa::OpticalSampleV1>::__init_with_size[abi:ne180100]<mimosa::OpticalSampleV1*,mimosa::OpticalSampleV1*>((void *)(a1 + 32), *(const void **)(a2 + 32), *(void *)(a2 + 40), 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 2));
  long long v4 = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 56) = v4;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  std::vector<mimosa::AccelSample>::__init_with_size[abi:ne180100]<mimosa::AccelSample*,mimosa::AccelSample*>((void *)(a1 + 72), *(const void **)(a2 + 72), *(void *)(a2 + 80), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 80) - *(void *)(a2 + 72)) >> 2));
  long long v5 = *(_OWORD *)(a2 + 96);
  long long v6 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v6;
  *(_OWORD *)(a1 + 96) = v5;
  long long v7 = *(_OWORD *)(a2 + 144);
  *(void *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 144) = v7;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short *,unsigned short *>((void *)(a1 + 160), *(const void **)(a2 + 160), *(void *)(a2 + 168), (uint64_t)(*(void *)(a2 + 168) - *(void *)(a2 + 160)) >> 1);
  uint64_t v8 = *(void *)(a2 + 184);
  *(_DWORD *)(a1 + 19std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = *(_DWORD *)(a2 + 191);
  *(void *)(a1 + 184) = v8;
  return a1;
}

void sub_2227602B4(_Unwind_Exception *exception_object)
{
  long long v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 80) = v5;
    operator delete(v5);
  }
  long long v6 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 40) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mimosa::PacketV4::PacketV4(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  std::vector<mimosa::OpticalSampleV1>::__init_with_size[abi:ne180100]<mimosa::OpticalSampleV1*,mimosa::OpticalSampleV1*>((void *)(a1 + 32), *(const void **)(a2 + 32), *(void *)(a2 + 40), 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 2));
  long long v4 = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 56) = v4;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  std::vector<mimosa::AccelSample>::__init_with_size[abi:ne180100]<mimosa::AccelSample*,mimosa::AccelSample*>((void *)(a1 + 72), *(const void **)(a2 + 72), *(void *)(a2 + 80), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 80) - *(void *)(a2 + 72)) >> 2));
  long long v5 = *(_OWORD *)(a2 + 96);
  long long v6 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v6;
  *(_OWORD *)(a1 + 96) = v5;
  long long v7 = *(_OWORD *)(a2 + 144);
  *(void *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 144) = v7;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short *,unsigned short *>((void *)(a1 + 160), *(const void **)(a2 + 160), *(void *)(a2 + 168), (uint64_t)(*(void *)(a2 + 168) - *(void *)(a2 + 160)) >> 1);
  uint64_t v8 = *(void *)(a2 + 184);
  *(_DWORD *)(a1 + 19std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = *(_DWORD *)(a2 + 191);
  *(void *)(a1 + 184) = v8;
  long long v9 = *(_OWORD *)(a2 + 248);
  long long v10 = *(_OWORD *)(a2 + 264);
  long long v11 = *(_OWORD *)(a2 + 280);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 264) = v10;
  *(_OWORD *)(a1 + 280) = v11;
  *(_OWORD *)(a1 + 248) = v9;
  long long v12 = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 200) = v12;
  return a1;
}

void sub_222760408(_Unwind_Exception *exception_object)
{
  long long v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 80) = v5;
    operator delete(v5);
  }
  long long v6 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 40) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mimosa::PacketV5::PacketV5(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  std::vector<mimosa::OpticalSampleV1>::__init_with_size[abi:ne180100]<mimosa::OpticalSampleV1*,mimosa::OpticalSampleV1*>((void *)(a1 + 32), *(const void **)(a2 + 32), *(void *)(a2 + 40), 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 2));
  long long v4 = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 56) = v4;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  std::vector<mimosa::AccelSample>::__init_with_size[abi:ne180100]<mimosa::AccelSample*,mimosa::AccelSample*>((void *)(a1 + 72), *(const void **)(a2 + 72), *(void *)(a2 + 80), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 80) - *(void *)(a2 + 72)) >> 2));
  long long v5 = *(_OWORD *)(a2 + 96);
  long long v6 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v6;
  *(_OWORD *)(a1 + 96) = v5;
  long long v7 = *(_OWORD *)(a2 + 144);
  *(void *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 144) = v7;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short *,unsigned short *>((void *)(a1 + 160), *(const void **)(a2 + 160), *(void *)(a2 + 168), (uint64_t)(*(void *)(a2 + 168) - *(void *)(a2 + 160)) >> 1);
  uint64_t v8 = *(void *)(a2 + 184);
  *(_DWORD *)(a1 + 19std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = *(_DWORD *)(a2 + 191);
  *(void *)(a1 + 184) = v8;
  long long v10 = *(_OWORD *)(a2 + 280);
  long long v9 = *(_OWORD *)(a2 + 296);
  long long v11 = *(_OWORD *)(a2 + 264);
  *(void *)(a1 + 312) = *(void *)(a2 + 312);
  *(_OWORD *)(a1 + 280) = v10;
  *(_OWORD *)(a1 + 296) = v9;
  *(_OWORD *)(a1 + 264) = v11;
  long long v12 = *(_OWORD *)(a2 + 200);
  long long v13 = *(_OWORD *)(a2 + 216);
  long long v14 = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
  *(_OWORD *)(a1 + 232) = v14;
  *(_OWORD *)(a1 + 216) = v13;
  *(_OWORD *)(a1 + 200) = v12;
  return a1;
}

void sub_22276056C(_Unwind_Exception *exception_object)
{
  long long v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 80) = v5;
    operator delete(v5);
  }
  long long v6 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 40) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__alt<5ul,mimosa::PacketV6>::__alt[abi:ne180100]<mimosa::PacketV6 const&>(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  std::vector<mimosa::OpticalSampleV2>::__init_with_size[abi:ne180100]<mimosa::OpticalSampleV2*,mimosa::OpticalSampleV2*>((void *)(a1 + 32), *(const void **)(a2 + 32), *(void *)(a2 + 40), (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 5);
  long long v4 = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 56) = v4;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  std::vector<mimosa::AccelSample>::__init_with_size[abi:ne180100]<mimosa::AccelSample*,mimosa::AccelSample*>((void *)(a1 + 72), *(const void **)(a2 + 72), *(void *)(a2 + 80), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 80) - *(void *)(a2 + 72)) >> 2));
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  long long v5 = *(_OWORD *)(a2 + 112);
  long long v6 = *(_OWORD *)(a2 + 128);
  long long v7 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 160) = v7;
  *(_OWORD *)(a1 + 112) = v5;
  *(_OWORD *)(a1 + 128) = v6;
  long long v8 = *(_OWORD *)(a2 + 176);
  long long v9 = *(_OWORD *)(a2 + 192);
  long long v10 = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 224) = v10;
  *(_OWORD *)(a1 + 176) = v8;
  *(_OWORD *)(a1 + 192) = v9;
  long long v11 = *(_OWORD *)(a2 + 240);
  long long v12 = *(_OWORD *)(a2 + 256);
  long long v13 = *(_OWORD *)(a2 + 272);
  *(void *)(a1 + 288) = *(void *)(a2 + 288);
  *(_OWORD *)(a1 + 256) = v12;
  *(_OWORD *)(a1 + 272) = v13;
  *(_OWORD *)(a1 + 240) = v11;
  return a1;
}

void sub_222760674(_Unwind_Exception *exception_object)
{
  long long v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 40) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<mimosa::OpticalSampleV2>::__init_with_size[abi:ne180100]<mimosa::OpticalSampleV2*,mimosa::OpticalSampleV2*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    unint64_t result = std::vector<mimosa::OpticalSampleV2>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      unint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_2227606F0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<mimosa::OpticalSampleV2>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 59) {
    std::vector<mimosa::OpticalSampleV1>::__throw_length_error[abi:ne180100]();
  }
  unint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<mimosa::OpticalSampleV2>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<mimosa::OpticalSampleV2>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(32 * a2);
}

uint64_t std::__variant_detail::__alt<6ul,mimosa::PacketV7>::__alt[abi:ne180100]<mimosa::PacketV7 const&>(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  std::vector<mimosa::OpticalSampleV2>::__init_with_size[abi:ne180100]<mimosa::OpticalSampleV2*,mimosa::OpticalSampleV2*>((void *)(a1 + 32), *(const void **)(a2 + 32), *(void *)(a2 + 40), (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 5);
  long long v4 = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 56) = v4;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  std::vector<mimosa::AccelSample>::__init_with_size[abi:ne180100]<mimosa::AccelSample*,mimosa::AccelSample*>((void *)(a1 + 72), *(const void **)(a2 + 72), *(void *)(a2 + 80), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 80) - *(void *)(a2 + 72)) >> 2));
  long long v5 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v5;
  long long v6 = *(_OWORD *)(a2 + 128);
  long long v7 = *(_OWORD *)(a2 + 144);
  long long v8 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v8;
  *(_OWORD *)(a1 + 128) = v6;
  *(_OWORD *)(a1 + 144) = v7;
  long long v9 = *(_OWORD *)(a2 + 192);
  long long v10 = *(_OWORD *)(a2 + 208);
  long long v11 = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 240) = v11;
  *(_OWORD *)(a1 + 192) = v9;
  *(_OWORD *)(a1 + 208) = v10;
  long long v12 = *(_OWORD *)(a2 + 256);
  long long v13 = *(_OWORD *)(a2 + 272);
  long long v14 = *(_OWORD *)(a2 + 304);
  *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
  *(_OWORD *)(a1 + 304) = v14;
  *(_OWORD *)(a1 + 256) = v12;
  *(_OWORD *)(a1 + 272) = v13;
  return a1;
}

void sub_222760854(_Unwind_Exception *exception_object)
{
  long long v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 40) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__dtor<std::__variant_detail::__traits<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7>,(std::__variant_detail::_Trait)1>::~__dtor(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 320);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26D4E3E80[v2])(&v4, a1);
  }
  *(_DWORD *)(a1 + 320) = -1;
  return a1;
}

void *std::allocate_shared[abi:ne180100]<mimosa::Metadata const,std::allocator<mimosa::Metadata const>,mimosa::Metadata const&,void>@<X0>(const mimosa::Metadata *a1@<X1>, void *a2@<X8>)
{
  char v4 = operator new(0x7B0uLL);
  unint64_t result = std::__shared_ptr_emplace<mimosa::Metadata const>::__shared_ptr_emplace[abi:ne180100]<mimosa::Metadata const&,std::allocator<mimosa::Metadata const>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_222760914(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<mimosa::Metadata const>::__shared_ptr_emplace[abi:ne180100]<mimosa::Metadata const&,std::allocator<mimosa::Metadata const>,0>(void *a1, const mimosa::Metadata *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26D4E3F00;
  mimosa::Metadata::Metadata((mimosa::Metadata *)(a1 + 3), a2);
  return a1;
}

void sub_222760970(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<mimosa::Metadata const>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D4E3F00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mimosa::Metadata const>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D4E3F00;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x223C9C430);
}

void std::__shared_ptr_emplace<mimosa::Metadata const>::__on_zero_shared(uint64_t a1)
{
}

mimosa::Metadata *mimosa::Metadata::Metadata(mimosa::Metadata *this, const mimosa::Metadata *a2)
{
  long long v4 = *(_OWORD *)a2;
  long long v5 = *((_OWORD *)a2 + 1);
  long long v6 = *((_OWORD *)a2 + 2);
  *((_WORD *)this + 24) = *((_WORD *)a2 + 24);
  *((_OWORD *)this + std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = v5;
  *((_OWORD *)this + 2) = v6;
  *(_OWORD *)this = v4;
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)((char *)this + 56), (long long *)((char *)a2 + 56));
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)((char *)this + 88), (long long *)((char *)a2 + 88));
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)this + 5, (long long *)((char *)a2 + 120));
  std::__optional_copy_base<mimosa::LightPathSemantics,false>::__optional_copy_base[abi:ne180100]((uint64_t)this + 152, (uint64_t)a2 + 152);
  memcpy((char *)this + 232, (char *)a2 + 232, 0x6B0uLL);
  return this;
}

void sub_222760AA0(_Unwind_Exception *exception_object)
{
  if (v1[144] && v1[143] < 0) {
    operator delete(*v4);
  }
  if (v1[112] && v1[111] < 0) {
    operator delete(*v3);
  }
  if (v1[80])
  {
    if (v1[79] < 0) {
      operator delete(*v2);
    }
  }
  _Unwind_Resume(exception_object);
}

std::string *std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](std::string *a1, long long *a2)
{
  a1->__r_.__value_.__s.__data_[0] = 0;
  a1[1].__r_.__value_.__s.__data_[0] = 0;
  std::__optional_storage_base<std::string,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<std::string,false> const&>(a1, a2);
  return a1;
}

void sub_222760B34(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 24)) {
    std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__optional_storage_base<std::string,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<std::string,false> const&>(std::string *this, long long *a2)
{
  if (*((unsigned char *)a2 + 24))
  {
    if (*((char *)a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    }
    else
    {
      long long v3 = *a2;
      this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
    }
    this[1].__r_.__value_.__s.__data_[0] = 1;
  }
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  long long v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17) {
      std::string::size_type v6 = __sz | 7;
    }
    std::string::size_type v7 = v6 + 1;
    long long v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    long long v5 = v8;
  }
  else
  {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

void std::string::__throw_length_error[abi:ne180100]()
{
}

uint64_t std::__optional_copy_base<mimosa::LightPathSemantics,false>::__optional_copy_base[abi:ne180100](uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 72) = 0;
  if (*(unsigned char *)(a2 + 72))
  {
    std::construct_at[abi:ne180100]<mimosa::LightPathSemantics,mimosa::LightPathSemantics const&,mimosa::LightPathSemantics*>((void *)a1, a2);
    *(unsigned char *)(a1 + 72) = 1;
  }
  return a1;
}

void sub_222760CA8(_Unwind_Exception *a1)
{
  std::__optional_destruct_base<mimosa::LightPathSemantics,false>::~__optional_destruct_base[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void *std::construct_at[abi:ne180100]<mimosa::LightPathSemantics,mimosa::LightPathSemantics const&,mimosa::LightPathSemantics*>(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a1, *(const void **)a2, *(void *)(a2 + 8), *(void *)(a2 + 8) - *(void *)a2);
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a1 + 3, *(const void **)(a2 + 24), *(void *)(a2 + 32), *(void *)(a2 + 32) - *(void *)(a2 + 24));
  a1[6] = 0;
  a1[7] = 0;
  a1[8] = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a1 + 6, *(const void **)(a2 + 48), *(void *)(a2 + 56), *(void *)(a2 + 56) - *(void *)(a2 + 48));
  return a1;
}

void sub_222760D38(_Unwind_Exception *exception_object)
{
  long long v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v4;
    operator delete(v4);
  }
  long long v5 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(void *result, const void *a2, uint64_t a3, size_t __sz)
{
  if (__sz)
  {
    std::string::size_type v6 = result;
    unint64_t result = std::vector<unsigned char>::__vallocate[abi:ne180100](result, __sz);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      unint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_222760DCC(_Unwind_Exception *exception_object)
{
  long long v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned char>::__vallocate[abi:ne180100](void *a1, size_t __sz)
{
  if ((__sz & 0x8000000000000000) != 0) {
    std::vector<mimosa::OpticalSampleV1>::__throw_length_error[abi:ne180100]();
  }
  unint64_t result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

void std::__destroy_at[abi:ne180100]<mimosa::Metadata const,0>(uint64_t a1)
{
  std::__optional_destruct_base<mimosa::LightPathSemantics,false>::~__optional_destruct_base[abi:ne180100](a1 + 152);
  if (*(unsigned char *)(a1 + 144) && *(char *)(a1 + 143) < 0) {
    operator delete(*(void **)(a1 + 120));
  }
  if (*(unsigned char *)(a1 + 112) && *(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  if (*(unsigned char *)(a1 + 80) && *(char *)(a1 + 79) < 0)
  {
    uint64_t v2 = *(void **)(a1 + 56);
    operator delete(v2);
  }
}

__n128 hal9000::SignalProcessor::SignalProcessor(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  __n128 result = (__n128)a2[4];
  long long v6 = a2[5];
  long long v7 = a2[6];
  *(void *)(a1 + 112) = *((void *)a2 + 14);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  *(unsigned char *)(a1 + 124) = 0;
  *(unsigned char *)(a1 + 128) = 0;
  *(unsigned char *)(a1 + 132) = 0;
  *(unsigned char *)(a1 + 136) = 0;
  *(unsigned char *)(a1 + 140) = 0;
  *(unsigned char *)(a1 + 144) = 0;
  *(unsigned char *)(a1 + 148) = 0;
  *(unsigned char *)(a1 + 152) = 0;
  *(unsigned char *)(a1 + 156) = 0;
  *(unsigned char *)(a1 + 160) = 0;
  return result;
}

{
  long long v2;
  long long v3;
  long long v4;
  __n128 result;
  long long v6;
  long long v7;

  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  __n128 result = (__n128)a2[4];
  long long v6 = a2[5];
  long long v7 = a2[6];
  *(void *)(a1 + 112) = *((void *)a2 + 14);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  *(unsigned char *)(a1 + 124) = 0;
  *(unsigned char *)(a1 + 128) = 0;
  *(unsigned char *)(a1 + 132) = 0;
  *(unsigned char *)(a1 + 136) = 0;
  *(unsigned char *)(a1 + 140) = 0;
  *(unsigned char *)(a1 + 144) = 0;
  *(unsigned char *)(a1 + 148) = 0;
  *(unsigned char *)(a1 + 152) = 0;
  *(unsigned char *)(a1 + 156) = 0;
  *(unsigned char *)(a1 + 160) = 0;
  return result;
}

void hal9000::compute_tick_offsets(uint64_t a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v4 = *(unsigned int *)(a1 + 320);
  if (v4 == -1) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  __src[0] = &v23;
  ((void (*)(unsigned __int8 **__return_ptr, void **, uint64_t))off_26D4E3F40[v4])(&v21, __src, a1);
  long long v6 = v22;
  if (v21 == v22)
  {
    long long v6 = v21;
    if (!v21) {
      return;
    }
    goto LABEL_12;
  }
  if (a2)
  {
    char v7 = *(v22 - 1);
    __src[1] = 0;
    uint64_t v20 = 0;
    __src[0] = 0;
    int v8 = (v7 + 1);
    do
    {
      int v10 = *(v6 - 2);
      v6 -= 2;
      int v9 = v10;
      if (v10)
      {
        double v11 = 11.0;
        if ((v9 - 9) < 0xC) {
          __assert_rtn("get_ts_width_gemstone", "SignalProcessor.cpp", 116, "false");
        }
      }
      else
      {
        double v11 = 0.0;
      }
      double v23 = (double)(v8 - v6[1]) * v11 + 0.0;
      std::vector<double>::insert((uint64_t)__src, (char *)__src[0], (char *)&v23);
    }
    while (v6 != v21);
    uint64_t v12 = v20;
    *(_OWORD *)a3 = *(_OWORD *)__src;
    a3[2] = v12;
LABEL_12:
    uint64_t v22 = v6;
    operator delete(v6);
    return;
  }
  uint64_t v13 = 0;
  LOBYTE(v14) = 0;
  __src[0] = 0;
  __src[1] = 0;
  uint64_t v20 = 0;
  double v15 = 0.0;
  double v23 = 0.0;
  while (v6 != v21)
  {
    uint64_t v16 = *(v6 - 2);
    if (a2 && v16 == v13 && *(v6 - 1) == v14)
    {
      uint64_t v16 = v13;
    }
    else
    {
      if ((v16 - 12) >= 3)
      {
        if (*(v6 - 2))
        {
          double v17 = 12.0;
          if ((v16 - 15) < 7) {
            __assert_rtn("get_ts_width_carnelian", "SignalProcessor.cpp", 77, "false");
          }
        }
        else
        {
          double v17 = 0.0;
        }
      }
      else
      {
        double v17 = 7.0;
      }
      double v15 = v15 + v17;
      double v23 = v15;
      if (a2)
      {
        LOBYTE(v14) = *(v6 - 1);
      }
      else
      {
        uint64_t v16 = *((_WORD *)v6 - 1);
        int v14 = HIBYTE(*((unsigned __int16 *)v6 - 1));
        a2 = 1;
      }
    }
    std::vector<double>::insert((uint64_t)__src, (char *)__src[0], (char *)&v23);
    v6 -= 2;
    uint64_t v13 = v16;
  }
  uint64_t v18 = v20;
  *(_OWORD *)a3 = *(_OWORD *)__src;
  a3[2] = v18;
  if (v6) {
    goto LABEL_12;
  }
}

void sub_222761198(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  if (a13) {
    operator delete(a13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t hal9000::SignalProcessor::process@<X0>(unsigned char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(unsigned char *)a3 = 0;
  *(unsigned char *)(a3 + 4) = 0;
  *(_WORD *)(a3 + 8) = 0;
  *(unsigned char *)(a3 + 12) = 0;
  *(unsigned char *)(a3 + 16) = 0;
  *(unsigned char *)(a3 + 20) = 0;
  *(unsigned char *)(a3 + 24) = 0;
  *(unsigned char *)(a3 + 28) = 0;
  *(unsigned char *)(a3 + 32) = 0;
  *(unsigned char *)(a3 + 36) = 0;
  *(unsigned char *)(a3 + 40) = 0;
  hal9000::SignalProcessor::init(a1);
  hal9000::SignalProcessor::populate_data_validity((uint64_t)a1, a2);
  hal9000::SignalProcessor::perform_conversion((uint64_t)a1, a2);
  return hal9000::SignalProcessor::populate_output((uint64_t)a1, a3);
}

unsigned char *hal9000::SignalProcessor::init(unsigned char *this)
{
  if (this[128]) {
    this[128] = 0;
  }
  if (this[136]) {
    this[136] = 0;
  }
  if (this[144]) {
    this[144] = 0;
  }
  if (this[152]) {
    this[152] = 0;
  }
  if (this[160]) {
    this[160] = 0;
  }
  return this;
}

uint64_t hal9000::SignalProcessor::populate_data_validity(uint64_t a1, uint64_t a2)
{
  int v3 = *(unsigned __int16 *)(a2 + 12);
  uint64_t result = hal9000::SignalProcessor::get_blank_sample_validity(a1, a2);
  *(unsigned char *)(a1 + 120) = 0;
  if (v3) {
    BOOL v5 = 0;
  }
  else {
    BOOL v5 = result == 0;
  }
  if (!v5)
  {
    if (v3) {
      BOOL v6 = 0;
    }
    else {
      BOOL v6 = result == 3;
    }
    if (v6)
    {
      char v7 = 1;
    }
    else if (v3 || result != 1)
    {
      if (v3 || result != 2)
      {
        if (v3 != 8 || result)
        {
          if (v3 == 8 && result == 3)
          {
            char v7 = 5;
          }
          else if (v3 == 8 && result == 1)
          {
            char v7 = 6;
          }
          else if (v3 == 8 && result == 2)
          {
            char v7 = 7;
          }
          else
          {
            if ((v3 == 8) != (v3 == 0)) {
              hal9000::SignalProcessor::populate_data_validity();
            }
            char v7 = 8;
          }
        }
        else
        {
          char v7 = 4;
        }
      }
      else
      {
        char v7 = 3;
      }
    }
    else
    {
      char v7 = 2;
    }
    *(unsigned char *)(a1 + 120) = v7;
  }
  *(unsigned char *)(a1 + 12std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = result;
  return result;
}

void hal9000::SignalProcessor::perform_conversion(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 120) != 8)
  {
    uint64_t v4 = hal9000::SignalProcessor::compute_nr_coef(a1);
    if ((v4 & 0xFF00000000) != 0)
    {
      float v5 = *(float *)&v4;
      hal9000::SignalProcessor::get_idc((hal9000::SignalProcessor *)a1);
      *(float *)(a1 + 124) = v6 * v5;
      *(unsigned char *)(a1 + 128) = 1;
      if ((*(unsigned __int8 *)(a1 + 120) | 4) != 7 && (*(unsigned char *)(a1 + 121) != 3 || *(unsigned char *)(a1 + 118)))
      {
        hal9000::SignalProcessor::compute_noise_terms(a1, a2, v5);
      }
    }
  }
}

uint64_t hal9000::SignalProcessor::populate_output(uint64_t result, uint64_t a2)
{
  unsigned int v2 = *(unsigned __int8 *)(result + 120);
  if (v2 != 8)
  {
    if (*(unsigned char *)(result + 128))
    {
      *(_DWORD *)a2 = *(_DWORD *)(result + 124);
      *(unsigned char *)(a2 + 4) = 1;
      unsigned int v2 = *(unsigned __int8 *)(result + 120);
    }
    if (v2 <= 8) {
      *(unsigned char *)(a2 + 8) = byte_222795171[(char)v2];
    }
    unsigned int v3 = *(unsigned __int8 *)(result + 121);
    *(unsigned char *)(a2 + std::__function::__value_func<BOOL ()(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,double)>::~__value_func[abi:ne180100]((void *)this + 9) = v3 == 1;
    if (v3 < 2 || v3 == 3 && *(unsigned char *)(result + 118))
    {
      int v4 = *(_DWORD *)(result + 132);
      *(unsigned char *)(a2 + 16) = *(unsigned char *)(result + 136);
      *(_DWORD *)(a2 + 12) = v4;
      int v5 = *(_DWORD *)(result + 140);
      *(unsigned char *)(a2 + 24) = *(unsigned char *)(result + 144);
      *(_DWORD *)(a2 + 20) = v5;
      int v6 = *(_DWORD *)(result + 148);
      *(unsigned char *)(a2 + 32) = *(unsigned char *)(result + 152);
      *(_DWORD *)(a2 + 28) = v6;
      int v7 = *(_DWORD *)(result + 156);
      *(unsigned char *)(a2 + 40) = *(unsigned char *)(result + 160);
      *(_DWORD *)(a2 + 36) = v7;
    }
  }
  return result;
}

uint64_t hal9000::SignalProcessor::get_ppg_sample_validity(uint64_t a1, uint64_t a2)
{
  if (*(_WORD *)(a2 + 12) == 8) {
    unsigned int v2 = 1;
  }
  else {
    unsigned int v2 = 2;
  }
  if (*(_WORD *)(a2 + 12)) {
    return v2;
  }
  else {
    return 0;
  }
}

uint64_t hal9000::SignalProcessor::get_blank_sample_validity(uint64_t a1, uint64_t a2)
{
  if (hal9000::SignalProcessor::blank_data_is_absent(a1, a2))
  {
    return 3;
  }
  else
  {
    int blank_validity = hal9000::SignalProcessor::get_blank_validity(a1, a2);
    if (blank_validity == 8) {
      unsigned __int8 v4 = 1;
    }
    else {
      unsigned __int8 v4 = 2;
    }
    if (!blank_validity) {
      return 0;
    }
  }
  return v4;
}

BOOL hal9000::SignalProcessor::blank_data_is_absent(uint64_t a1, uint64_t a2)
{
  unsigned int first_pd_idx = hal9000::get_first_pd_idx((hal9000 *)*(unsigned __int8 *)(a1 + 115));
  unsigned int v5 = *(unsigned __int8 *)(a1 + 115);
  if (v5 > 9) {
    goto LABEL_14;
  }
  if (((1 << v5) & 0x116) == 0)
  {
    if (v5 == 6)
    {
      uint64_t v7 = 2;
LABEL_8:
      uint64_t v8 = *(void *)(a2 + 24 + 8 * v7);
      return !*(void *)(a2 + 24 + 8 * first_pd_idx) || v8 == 0;
    }
    if (v5 == 9)
    {
      uint64_t v7 = 3;
      goto LABEL_8;
    }
LABEL_14:
    hal9000::SignalProcessor::blank_data_is_absent();
  }
  return *(void *)(a2 + 8 * first_pd_idx + 24) == 0;
}

uint64_t hal9000::SignalProcessor::get_blank_validity(uint64_t a1, uint64_t a2)
{
  unsigned int first_pd_idx = hal9000::get_first_pd_idx((hal9000 *)*(unsigned __int8 *)(a1 + 115));
  unsigned int v5 = *(unsigned __int8 *)(a1 + 115);
  if (v5 > 9) {
    goto LABEL_11;
  }
  if (((1 << v5) & 0x116) != 0)
  {
    uint64_t v6 = a2 + 8 * first_pd_idx + 24;
    return *(unsigned __int16 *)(*(void *)v6 + 12);
  }
  if (v5 != 6)
  {
    if (v5 == 9)
    {
      uint64_t v8 = 3;
      goto LABEL_9;
    }
LABEL_11:
    hal9000::SignalProcessor::blank_data_is_absent();
  }
  uint64_t v8 = 2;
LABEL_9:
  uint64_t v9 = *(void *)(a2 + 24 + 8 * first_pd_idx);
  uint64_t result = *(unsigned __int16 *)(v9 + 12);
  if (!*(_WORD *)(v9 + 12))
  {
    uint64_t v6 = a2 + 24 + 8 * v8;
    return *(unsigned __int16 *)(*(void *)v6 + 12);
  }
  return result;
}

uint64_t hal9000::get_first_pd_idx(hal9000 *this)
{
  char v1 = (_BYTE)this - 1;
  if ((this - 1) >= 9 || ((0x1ABu >> v1) & 1) == 0) {
    hal9000::get_first_pd_idx();
  }
  return byte_222795168[v1];
}

uint64_t hal9000::SignalProcessor::compute_nr_coef(uint64_t a1)
{
  if (!*(_WORD *)(a1 + 112)) {
    hal9000::SignalProcessor::compute_nr_coef();
  }
  float v2 = *(float *)(a1 + 48);
  float opre_gain = hal9000::SignalProcessor::get_opre_gain((hal9000::SignalProcessor *)a1);
  float opre_ndce = hal9000::SignalProcessor::get_opre_ndce((hal9000::SignalProcessor *)a1);
  float v5 = (float)(opre_gain
             / (float)((float)(v2 * opre_ndce)
                     * hal9000::SignalProcessor::get_iled_corrected_mA((hal9000::SignalProcessor *)a1)))
     * 1000000000.0;
  if ((LODWORD(v5) & 0x7FFFFFFFu) >= 0x7F800000) {
    return 0;
  }
  else {
    return LODWORD(v5) | 0x100000000;
  }
}

float hal9000::SignalProcessor::compute_normalized_reflectance(hal9000::SignalProcessor *a1, float a2)
{
  hal9000::SignalProcessor::get_idc(a1);
  return v3 * a2;
}

void hal9000::SignalProcessor::compute_noise_terms(uint64_t a1, uint64_t a2, float a3)
{
  *(float *)(a1 + 132) = hal9000::SignalProcessor::get_device_white_noise((hal9000::SignalProcessor *)a1, a2, a3);
  *(unsigned char *)(a1 + 136) = 1;
  *(float *)(a1 + 140) = hal9000::SignalProcessor::get_device_pink_noise((hal9000::SignalProcessor *)a1, a3);
  *(unsigned char *)(a1 + 144) = 1;
  if (!*(unsigned char *)(a1 + 118))
  {
    *(float *)(a1 + 148) = hal9000::SignalProcessor::get_blank_idc((unsigned __int8 *)a1) * a3;
    *(unsigned char *)(a1 + 152) = 1;
    *(float *)(a1 + 156) = hal9000::SignalProcessor::get_background_noise_offset((unsigned __int8 *)a1, a2, a3);
    *(unsigned char *)(a1 + 160) = 1;
  }
}

float hal9000::SignalProcessor::get_device_white_noise(hal9000::SignalProcessor *a1, uint64_t a2, float a3)
{
  hal9000::SignalProcessor::get_idc(a1);
  float v7 = v6;
  float iamb = hal9000::SignalProcessor::get_iamb((uint64_t)a1, a2);
  return (float)(a3 * a3)
       * hal9000::SignalProcessor::get_circuit_noise_term1(a1, v7, iamb, (hal9000 *)*(unsigned int *)(a2 + 16));
}

float hal9000::SignalProcessor::get_device_pink_noise(hal9000::SignalProcessor *a1, float a2)
{
  hal9000::SignalProcessor::get_idc(a1);
  float v5 = v4;
  float nled = hal9000::SignalProcessor::get_nled(a1);
  return (float)(a2 * a2)
       * (float)((float)((float)(v5 * 0.000005) * (float)(v5 * 0.000005))
               + (float)((float)((float)(v5 * 0.000005) * (float)(v5 * 0.000005))
                       + (float)((float)(v5 * nled) * (float)(v5 * nled))));
}

float hal9000::SignalProcessor::get_background_noise(unsigned __int8 *a1, float a2)
{
  return hal9000::SignalProcessor::get_blank_idc(a1) * a2;
}

float hal9000::SignalProcessor::get_background_noise_offset(unsigned __int8 *a1, uint64_t a2, float a3)
{
  uint64_t v3 = a2;
  float iamb = hal9000::SignalProcessor::get_iamb((uint64_t)a1, a2);
  unsigned int first_pd_idx = hal9000::get_first_pd_idx((hal9000 *)a1[115]);
  if (!a1[118]) {
    uint64_t v3 = *(void *)(v3 + 8 * first_pd_idx + 24);
  }
  return (float)(a3 * a3)
       * hal9000::SignalProcessor::get_circuit_noise_term1((hal9000::SignalProcessor *)a1, 0.0, iamb, (hal9000 *)*(unsigned int *)(v3 + 16));
}

float hal9000::SignalProcessor::populate_nr(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 120) != 8)
  {
    if (*(unsigned char *)(a1 + 128))
    {
      float result = *(float *)(a1 + 124);
      *(float *)a2 = result;
      *(unsigned char *)(a2 + 4) = 1;
    }
  }
  return result;
}

uint64_t hal9000::SignalProcessor::populate_is_saturated(uint64_t result, uint64_t a2)
{
  unint64_t v2 = *(char *)(result + 120);
  if (v2 <= 8) {
    *(unsigned char *)(a2 + 8) = byte_222795171[v2];
  }
  return result;
}

uint64_t hal9000::SignalProcessor::populate_noise_is_unreliable(uint64_t result, uint64_t a2)
{
  *(unsigned char *)(a2 + std::__function::__value_func<BOOL ()(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,double)>::~__value_func[abi:ne180100]((void *)this + 9) = *(unsigned char *)(result + 121) == 1;
  return result;
}

uint64_t hal9000::SignalProcessor::populate_noise(uint64_t result, uint64_t a2)
{
  unsigned int v2 = *(unsigned __int8 *)(result + 121);
  if (v2 < 2 || v2 == 3 && *(unsigned char *)(result + 118))
  {
    int v3 = *(_DWORD *)(result + 132);
    *(unsigned char *)(a2 + 16) = *(unsigned char *)(result + 136);
    *(_DWORD *)(a2 + 12) = v3;
    int v4 = *(_DWORD *)(result + 140);
    *(unsigned char *)(a2 + 24) = *(unsigned char *)(result + 144);
    *(_DWORD *)(a2 + 20) = v4;
    int v5 = *(_DWORD *)(result + 148);
    *(unsigned char *)(a2 + 32) = *(unsigned char *)(result + 152);
    *(_DWORD *)(a2 + 28) = v5;
    int v6 = *(_DWORD *)(result + 156);
    *(unsigned char *)(a2 + 40) = *(unsigned char *)(result + 160);
    *(_DWORD *)(a2 + 36) = v6;
  }
  return result;
}

uint64_t hal9000::SignalProcessor::populate_new_noise(uint64_t result, uint64_t a2)
{
  int v2 = *(_DWORD *)(result + 132);
  *(unsigned char *)(a2 + 16) = *(unsigned char *)(result + 136);
  *(_DWORD *)(a2 + 12) = v2;
  int v3 = *(_DWORD *)(result + 140);
  *(unsigned char *)(a2 + 24) = *(unsigned char *)(result + 144);
  *(_DWORD *)(a2 + 20) = v3;
  int v4 = *(_DWORD *)(result + 148);
  *(unsigned char *)(a2 + 32) = *(unsigned char *)(result + 152);
  *(_DWORD *)(a2 + 28) = v4;
  int v5 = *(_DWORD *)(result + 156);
  *(unsigned char *)(a2 + 40) = *(unsigned char *)(result + 160);
  *(_DWORD *)(a2 + 36) = v5;
  return result;
}

float hal9000::SignalProcessor::get_opre_gain(hal9000::SignalProcessor *this)
{
  unsigned int first_pd_idx = hal9000::get_first_pd_idx((hal9000 *)*((unsigned __int8 *)this + 115));
  int v3 = *((unsigned __int8 *)this + 115);
  char v4 = v3 - 1;
  if ((v3 - 1) >= 9 || ((0x1ABu >> v4) & 1) == 0) {
    hal9000::SignalProcessor::blank_data_is_absent();
  }
  if (!*(_DWORD *)this) {
    return 1.0;
  }
  if (((0xDFu >> v4) & 1) == 0)
  {
    if (v3 == 6)
    {
      unsigned int first_pd_idx = 0;
    }
    else
    {
      if (v3 != 9) {
        hal9000::SignalProcessor::get_opre_gain();
      }
      unsigned int first_pd_idx = 2;
    }
  }
  if (*((unsigned char *)this + 108))
  {
    if (!*((unsigned char *)this + 36)) {
      hal9000::SignalProcessor::get_opre_gain();
    }
    if (!*((unsigned char *)this + 44)) {
      hal9000::SignalProcessor::get_opre_gain();
    }
    return *((float *)this + first_pd_idx + 5)
         * (float)((float)((float)*((char *)this + first_pd_idx + 40) * 0.0039062) + 1.0);
  }
  else
  {
    if (!*((unsigned char *)this + 36)) {
      hal9000::SignalProcessor::get_opre_gain();
    }
    return *((float *)this + first_pd_idx + 5);
  }
}

float hal9000::SignalProcessor::get_opre_ndce(hal9000::SignalProcessor *this)
{
  unsigned int first_pd_idx = hal9000::get_first_pd_idx((hal9000 *)*((unsigned __int8 *)this + 115));
  unsigned int v3 = *((unsigned __int8 *)this + 115);
  if (v3 > 9) {
    goto LABEL_10;
  }
  if (((1 << v3) & 0x116) == 0)
  {
    if (v3 == 6)
    {
      uint64_t v7 = 2;
      goto LABEL_8;
    }
    if (v3 == 9)
    {
      uint64_t v7 = 3;
LABEL_8:
      char v4 = (float *)((char *)this + 4 * first_pd_idx + 52);
      float v5 = *((float *)this + v7 + 13);
      float v6 = 2.0;
      return (float)(v5 + *v4) / v6;
    }
LABEL_10:
    hal9000::SignalProcessor::blank_data_is_absent();
  }
  char v4 = (float *)((char *)this + 4 * first_pd_idx + 52);
  float v5 = 0.0;
  float v6 = 1.0;
  return (float)(v5 + *v4) / v6;
}

float hal9000::SignalProcessor::get_opre_tadj()
{
  return 1.0;
}

float hal9000::SignalProcessor::get_iled_corrected_mA(hal9000::SignalProcessor *this)
{
  hal9000::SignalProcessor::get_led_nl_poly_fit(this);
  uint64_t v3 = *(int *)this;
  float v4 = 0.0;
  if (v3 <= 3) {
    float v4 = flt_2227952A0[v3];
  }
  return v2 * v4;
}

void hal9000::SignalProcessor::get_idc(hal9000::SignalProcessor *this)
{
  if (*((unsigned char *)this + 108)) {
    hal9000::SignalProcessor::get_lpf_gain(this);
  }
}

float hal9000::SignalProcessor::get_iamb(uint64_t a1, uint64_t a2)
{
  unsigned int first_pd_idx = hal9000::get_first_pd_idx((hal9000 *)*(unsigned __int8 *)(a1 + 115));
  if (*(unsigned char *)(a1 + 118))
  {
    int ambient_counts_from_blank = *(_DWORD *)(a2 + 4);
    unsigned int v6 = *(_DWORD *)(a2 + 16);
  }
  else
  {
    unsigned int v7 = first_pd_idx;
    int ambient_counts_from_blank = hal9000::SignalProcessor::get_ambient_counts_from_blank(a1, a2);
    unsigned int v6 = *(_DWORD *)(*(void *)(a2 + 8 * v7 + 24) + 16);
  }
  int v8 = *(_DWORD *)a1;
  if ((*(_DWORD *)a1 - 2) < 2)
  {
    float v9 = 1.3214;
  }
  else if (v8 == 1)
  {
    float v9 = 2.55;
  }
  else
  {
    float v9 = 0.0;
    if (!v8) {
      float v9 = 2.6147;
    }
  }
  return (float)((float)(v9 / 10150000.0) * (float)ambient_counts_from_blank) / (float)v6;
}

float hal9000::SignalProcessor::get_circuit_noise_term1(hal9000::SignalProcessor *this, float a2, float a3, hal9000 *a4)
{
  float v6 = a2;
  LOWORD(a2) = *((_WORD *)this + 55);
  float v8 = (float)LODWORD(a2) * 0.5;
  unsigned int v9 = (int)v8;
  float neb_system = hal9000::SignalProcessor::get_neb_system(this, (int)v8, v8);
  float neb_tx = hal9000::SignalProcessor::get_neb_tx(this, v9, neb_system);
  float pd_noise = hal9000::SignalProcessor::get_pd_noise(this, a4);
  float lpf1_gain = hal9000::SignalProcessor::get_lpf1_gain(this);
  float v14 = neb_system
      * (float)((float)(pd_noise * pd_noise)
              / (float)((float)((float)((float)a4 * (float)a4)
                              * (float)(lpf1_gain * lpf1_gain))
                      * 1.4641));
  float v15 = 0.000000035044;
  if (*(_DWORD *)this != 3) {
    float v15 = 0.0;
  }
  return (float)((float)(v14 + (float)((float)(a3 * 3.204e-19) * neb_system)) + (float)((float)(v6 * 3.204e-19) * neb_tx))
       + (float)((float)((float)(v15 * v6) * (float)(v15 * v6)) * neb_tx);
}

float hal9000::SignalProcessor::convert_iq_to_magnitude(hal9000::SignalProcessor *this, int a2, int a3)
{
  return sqrtf((float)((float)a2 * (float)a2) + (float)((float)a3 * (float)a3));
}

float hal9000::SignalProcessor::get_dcs_counts_to_current_A(hal9000::SignalProcessor *this, int a2, unsigned int a3)
{
  uint64_t v3 = *(int *)this;
  float v4 = 0.0;
  if (v3 <= 3) {
    float v4 = flt_222795280[v3];
  }
  return (float)((float)(v4 / 10150000.0) * (float)a2) / (float)a3;
}

float hal9000::SignalProcessor::get_lpf_gain(hal9000::SignalProcessor *this)
{
  if (!*((unsigned char *)this + 108)) {
    std::__throw_bad_optional_access[abi:ne180100]();
  }
  if (!(!v2 & v1))
  {
    switch(*((unsigned char *)this + 106))
    {
      case '#':
        return 0.8278;
      case '$':
      case '%':
      case '&':
      case '\'':
      case ')':
      case '+':
      case ',':
        goto LABEL_19;
      case '(':
        return 0.7619;
      case '*':
        return 0.7259;
      case '-':
        return 0.6574;
      case '.':
        return 0.6298;
      default:
        JUMPOUT(0);
    }
  }
  switch(*((unsigned char *)this + 106))
  {
    case 0x17:
      return *(float *)"aTr?";
    case 0x18:
    case 0x1A:
    case 0x1B:
    case 0x1D:
    case 0x1E:
      goto LABEL_19;
    case 0x19:
      return *(float *)"mVm?aTr?";
    case 0x1C:
      return 0.9047;
    case 0x1F:
      return 0.8708;
    default:
      if (*((unsigned char *)this + 106) != 19) {
LABEL_19:
      }
        hal9000::SignalProcessor::get_lpf_gain();
      return 0.9641;
  }
}

uint64_t hal9000::SignalProcessor::get_ambient_counts_from_blank(uint64_t a1, uint64_t a2)
{
  unsigned int first_pd_idx = hal9000::get_first_pd_idx((hal9000 *)*(unsigned __int8 *)(a1 + 115));
  unsigned int v5 = *(unsigned __int8 *)(a1 + 115);
  if (v5 > 9) {
    goto LABEL_22;
  }
  char v6 = 1;
  if (((1 << v5) & 0x116) != 0)
  {
    uint64_t v7 = 255;
    goto LABEL_4;
  }
  if (v5 != 6)
  {
    if (v5 == 9)
    {
      char v6 = 0;
      uint64_t v7 = 3;
      goto LABEL_4;
    }
LABEL_22:
    hal9000::SignalProcessor::blank_data_is_absent();
  }
  char v6 = 0;
  uint64_t v7 = 2;
LABEL_4:
  if (*(_DWORD *)a1)
  {
    uint64_t v8 = a2 + 24;
    unsigned int v9 = *(_DWORD **)(a2 + 24 + 8 * first_pd_idx);
    if (*(unsigned char *)(a1 + 119))
    {
      uint64_t result = v9[2];
      if ((v6 & 1) == 0) {
        return (*(_DWORD *)(*(void *)(v8 + 8 * v7) + 8) + result);
      }
      return result;
    }
    int v12 = v9[1] + *v9;
    if ((v6 & 1) == 0) {
      v12 += **(_DWORD **)(v8 + 8 * v7) + *(_DWORD *)(*(void *)(v8 + 8 * v7) + 4);
    }
  }
  else
  {
    if ((v6 & 1) == 0) {
      hal9000::SignalProcessor::get_ambient_counts_from_blank();
    }
    double v11 = *(_DWORD **)(a2 + 8 * first_pd_idx + 24);
    int v12 = v11[1] + *v11;
  }
  if (v12 >= 0) {
    int v13 = v12;
  }
  else {
    int v13 = v12 + 1;
  }
  return (v13 >> 1);
}

uint64_t hal9000::SignalProcessor::get_blank_circuit_noise_tia_gain(uint64_t a1, uint64_t a2)
{
  unsigned int first_pd_idx = hal9000::get_first_pd_idx((hal9000 *)*(unsigned __int8 *)(a1 + 115));
  if (!*(unsigned char *)(a1 + 118)) {
    a2 = *(void *)(a2 + 8 * first_pd_idx + 24);
  }
  return *(unsigned int *)(a2 + 16);
}

float hal9000::SignalProcessor::get_circuit_noise_term2(hal9000::SignalProcessor *this, float a2)
{
  float nled = hal9000::SignalProcessor::get_nled(this);
  return (float)((float)(a2 * 0.000005) * (float)(a2 * 0.000005))
       + (float)((float)((float)(a2 * 0.000005) * (float)(a2 * 0.000005))
               + (float)((float)(nled * a2) * (float)(nled * a2)));
}

float hal9000::SignalProcessor::get_blank_idc(unsigned __int8 *a1)
{
  hal9000::get_first_pd_idx((hal9000 *)a1[115]);
  char v2 = (hal9000 *)a1[115];
  if (v2 > 9) {
    goto LABEL_14;
  }
  char v3 = 1;
  if (((1 << (char)v2) & 0x116) != 0) {
    goto LABEL_3;
  }
  if (v2 != 6)
  {
    if (v2 == 9)
    {
      char v3 = 0;
      goto LABEL_3;
    }
LABEL_14:
    hal9000::SignalProcessor::blank_data_is_absent();
  }
  char v3 = 0;
LABEL_3:
  if (a1[118]) {
    hal9000::SignalProcessor::get_blank_idc();
  }
  hal9000::get_first_pd_idx(v2);
  hal9000::SignalProcessor::get_idc((hal9000::SignalProcessor *)a1);
  float v5 = v4;
  if ((v3 & 1) == 0)
  {
    if (!*(_DWORD *)a1) {
      hal9000::SignalProcessor::get_blank_idc();
    }
    hal9000::SignalProcessor::get_idc((hal9000::SignalProcessor *)a1);
    return v5 + v6;
  }
  return v5;
}

float hal9000::SignalProcessor::get_nled(hal9000::SignalProcessor *this)
{
  if ((*(_DWORD *)this - 1) >= 3)
  {
    if (*(_DWORD *)this) {
      hal9000::SignalProcessor::get_nled();
    }
    return flt_222794EA0[*((unsigned char *)this + 117) == 0];
  }
  else
  {
    return hal9000::SignalProcessor::get_nled_gemstone(this);
  }
}

float hal9000::SignalProcessor::get_nled_carnelian(hal9000::SignalProcessor *this)
{
  return flt_222794EA0[*((unsigned char *)this + 117) == 0];
}

float hal9000::SignalProcessor::get_nled_gemstone(hal9000::SignalProcessor *this)
{
  unint64_t v1 = *((char *)this + 117);
  if (v1 >= 4) {
    hal9000::SignalProcessor::get_nled_gemstone();
  }
  return flt_222795270[v1];
}

float hal9000::SignalProcessor::get_adc_counts_to_current_factor(hal9000::SignalProcessor *this)
{
  uint64_t v1 = *(int *)this;
  float v2 = 0.0;
  if (v1 <= 3) {
    float v2 = flt_222795280[v1];
  }
  return v2 / 10150000.0;
}

float hal9000::SignalProcessor::get_adc_ref(hal9000::SignalProcessor *this)
{
  uint64_t v1 = *(int *)this;
  float result = 0.0;
  if (v1 <= 3) {
    return flt_222795280[v1];
  }
  return result;
}

float hal9000::SignalProcessor::get_iled_current_mA(hal9000::SignalProcessor *this)
{
  uint64_t v1 = *(int *)this;
  float v2 = 0.0;
  if (v1 <= 3) {
    float v2 = flt_222795290[v1];
  }
  return v2 * (float)*((unsigned __int16 *)this + 56);
}

float hal9000::SignalProcessor::get_idac(hal9000::SignalProcessor *this)
{
  uint64_t v1 = *(int *)this;
  float result = 0.0;
  if (v1 <= 3) {
    return flt_222795290[v1];
  }
  return result;
}

void hal9000::SignalProcessor::get_led_nl_poly_fit(hal9000::SignalProcessor *this)
{
  uint64_t v1 = *(int *)this;
  float v2 = 0.0;
  if (v1 <= 3) {
    float v2 = flt_222795290[v1];
  }
  if ((v1 - 2) >= 2 && v1 <= 1) {
    powf(v2 * (float)*((unsigned __int16 *)this + 56), 3.0);
  }
}

float hal9000::SignalProcessor::get_normfit_iled(hal9000::SignalProcessor *this)
{
  uint64_t v1 = *(int *)this;
  float result = 0.0;
  if (v1 <= 3) {
    return flt_2227952A0[v1];
  }
  return result;
}

float hal9000::SignalProcessor::get_opre_mdm_gain_float(hal9000::SignalProcessor *this, int a2)
{
  return (float)((float)a2 * 0.0039062) + 1.0;
}

float hal9000::SignalProcessor::get_neb_system(hal9000::SignalProcessor *this, unsigned int a2, float a3)
{
  switch(*(_DWORD *)this)
  {
    case 0:
      float v3 = 12780.0;
      break;
    case 1:
      float v3 = 13600.0;
      break;
    case 2:
      goto LABEL_7;
    case 3:
      if (*((unsigned char *)this + 108))
      {
        LOWORD(a3) = *((_WORD *)this + 52);
        float v3 = 2526600.0 / (float)LODWORD(a3);
      }
      else
      {
LABEL_7:
        float v3 = *(float *)"";
      }
      break;
    default:
      float v3 = 0.0;
      break;
  }
  return v3 / (float)a2;
}

float hal9000::SignalProcessor::get_neb_system_sunstone3p75(hal9000::SignalProcessor *this, float a2)
{
  if (!*((unsigned char *)this + 108)) {
    return *(float *)"";
  }
  LOWORD(a2) = *((_WORD *)this + 52);
  return 2526600.0 / (float)LODWORD(a2);
}

float hal9000::SignalProcessor::get_neb_tx(hal9000::SignalProcessor *this, unsigned int a2, float a3)
{
  switch(*(_DWORD *)this)
  {
    case 0:
      float v3 = 8640.0;
      break;
    case 1:
      float v3 = 9200.0;
      break;
    case 2:
      goto LABEL_7;
    case 3:
      if (*((unsigned char *)this + 108))
      {
        LOWORD(a3) = *((_WORD *)this + 52);
        float v3 = 1277400.0 / (float)LODWORD(a3);
      }
      else
      {
LABEL_7:
        float v3 = 9189.0;
      }
      break;
    default:
      float v3 = 0.0;
      break;
  }
  return v3 / (float)a2;
}

float hal9000::SignalProcessor::get_neb_tx_sunstone3p75(hal9000::SignalProcessor *this, float a2)
{
  if (!*((unsigned char *)this + 108)) {
    return 9189.0;
  }
  LOWORD(a2) = *((_WORD *)this + 52);
  return 1277400.0 / (float)LODWORD(a2);
}

float hal9000::SignalProcessor::get_thermal_noise(hal9000::SignalProcessor *this, float a2, hal9000 *a3)
{
  unsigned int v3 = a3;
  float pd_noise = hal9000::SignalProcessor::get_pd_noise(this, a3);
  float lpf1_gain = hal9000::SignalProcessor::get_lpf1_gain(this);
  return (float)((float)(pd_noise * pd_noise)
               / (float)((float)((float)((float)v3 * (float)v3) * (float)(lpf1_gain * lpf1_gain)) * 1.4641))
       * a2;
}

float hal9000::SignalProcessor::get_pd_noise(hal9000::SignalProcessor *this, hal9000 *a2)
{
  unsigned int v2 = *((unsigned __int8 *)this + 115);
  if (v2 > 9) {
    goto LABEL_10;
  }
  int v3 = 1 << v2;
  if ((v3 & 0x116) != 0)
  {
    return hal9000::SignalProcessor::get_vnth_pd(this, a2);
  }
  if ((v3 & 0x240) == 0) {
LABEL_10:
  }
    hal9000::SignalProcessor::blank_data_is_absent();
  return hal9000::SignalProcessor::get_vnth_2pd(this, a2);
}

float hal9000::SignalProcessor::get_lpf1_gain(hal9000::SignalProcessor *this)
{
  if (*(_DWORD *)this < 3u) {
    return 1.0;
  }
  float result = 0.0;
  if (*(_DWORD *)this == 3) {
    return hal9000::SignalProcessor::get_lpf1_gain_sunstone3p75(this);
  }
  return result;
}

float hal9000::SignalProcessor::get_vnth_pd(hal9000::SignalProcessor *this, hal9000 *a2)
{
  switch(*(_DWORD *)this)
  {
    case 0:
      float result = hal9000::SignalProcessor::get_vnth_pd_carnelian(this, a2);
      break;
    case 1:
      float result = hal9000::SignalProcessor::get_vnth_pd_gemstone(this, a2);
      break;
    case 2:
      float result = hal9000::SignalProcessor::get_vnth_pd_sunstone3p5(this, a2);
      break;
    case 3:
      float result = hal9000::SignalProcessor::get_pd_noise_sunstone3p75(this, a2);
      break;
    default:
      float result = 0.0;
      break;
  }
  return result;
}

float hal9000::SignalProcessor::get_vnth_2pd(hal9000::SignalProcessor *this, hal9000 *a2)
{
  switch(*(_DWORD *)this)
  {
    case 0:
      hal9000::SignalProcessor::get_vnth_2pd();
    case 1:
      int tia_index_by_gain = hal9000::get_tia_index_by_gain(a2);
      int v3 = (float *)&unk_22279517C;
      goto LABEL_5;
    case 2:
      int tia_index_by_gain = hal9000::get_tia_index_by_gain(a2);
      int v3 = (float *)&unk_22279519C;
LABEL_5:
      float result = v3[tia_index_by_gain];
      break;
    case 3:
      float result = hal9000::SignalProcessor::get_pd_noise_sunstone3p75(this, a2);
      break;
    default:
      float result = 0.0;
      break;
  }
  return result;
}

float hal9000::SignalProcessor::get_vnth_pd_carnelian(hal9000::SignalProcessor *this, hal9000 *a2)
{
  return flt_2227951BC[hal9000::get_tia_index_by_gain(a2)];
}

float hal9000::SignalProcessor::get_vnth_pd_gemstone(hal9000::SignalProcessor *this, hal9000 *a2)
{
  return flt_2227951DC[hal9000::get_tia_index_by_gain(a2)];
}

float hal9000::SignalProcessor::get_vnth_pd_sunstone3p5(hal9000::SignalProcessor *this, hal9000 *a2)
{
  return flt_2227951FC[hal9000::get_tia_index_by_gain(a2)];
}

float hal9000::SignalProcessor::get_pd_noise_sunstone3p75(hal9000::SignalProcessor *this, hal9000 *a2)
{
  unsigned int tia_index_by_gain = hal9000::get_tia_index_by_gain(a2);
  unsigned int v4 = *((unsigned __int8 *)this + 115) - 1;
  BOOL v5 = v4 > 9;
  if (v4 >= 9 || ((0x1ABu >> v4) & 1) == 0) {
    hal9000::SignalProcessor::blank_data_is_absent();
  }
  uint64_t v6 = qword_222795220[(char)v4];
  if (*((unsigned char *)this + 108))
  {
    if (!v5)
    {
      switch(*((unsigned char *)this + 106))
      {
        case '#':
          uint64_t v7 = (float *)&hal9000::SignalProcessor::get_pd_noise_sunstone3p75const::noise_77k;
          return v7[8 * v6 + tia_index_by_gain];
        case '$':
        case '%':
        case '&':
        case '\'':
        case ')':
        case '+':
        case ',':
          goto LABEL_22;
        case '(':
          uint64_t v7 = (float *)&hal9000::SignalProcessor::get_pd_noise_sunstone3p75const::noise_95k;
          return v7[8 * v6 + tia_index_by_gain];
        case '*':
          uint64_t v7 = (float *)&hal9000::SignalProcessor::get_pd_noise_sunstone3p75const::noise_104k;
          return v7[8 * v6 + tia_index_by_gain];
        case '-':
          uint64_t v7 = (float *)&hal9000::SignalProcessor::get_pd_noise_sunstone3p75const::noise_123k;
          return v7[8 * v6 + tia_index_by_gain];
        case '.':
          uint64_t v7 = (float *)&hal9000::SignalProcessor::get_pd_noise_sunstone3p75const::noise_131k;
          return v7[8 * v6 + tia_index_by_gain];
        default:
          JUMPOUT(0);
      }
    }
    switch(*((unsigned char *)this + 106))
    {
      case 0x17:
        uint64_t v7 = (float *)&hal9000::SignalProcessor::get_pd_noise_sunstone3p75const::noise_40k;
        return v7[8 * v6 + tia_index_by_gain];
      case 0x18:
      case 0x1A:
      case 0x1B:
      case 0x1D:
      case 0x1E:
        goto LABEL_22;
      case 0x19:
        uint64_t v7 = (float *)&hal9000::SignalProcessor::get_pd_noise_sunstone3p75const::noise_47k;
        return v7[8 * v6 + tia_index_by_gain];
      case 0x1C:
        uint64_t v7 = (float *)&hal9000::SignalProcessor::get_pd_noise_sunstone3p75const::noise_55k;
        return v7[8 * v6 + tia_index_by_gain];
      case 0x1F:
        uint64_t v7 = (float *)&hal9000::SignalProcessor::get_pd_noise_sunstone3p75const::noise_65k;
        return v7[8 * v6 + tia_index_by_gain];
      default:
        if (*((unsigned char *)this + 106) != 19) {
LABEL_22:
        }
          hal9000::SignalProcessor::get_pd_noise_sunstone3p75();
        uint64_t v7 = (float *)&hal9000::SignalProcessor::get_pd_noise_sunstone3p75const::noise_32k;
        break;
    }
  }
  else
  {
    uint64_t v7 = (float *)&hal9000::SignalProcessor::get_pd_noise_sunstone3p75const::noise_dcs;
  }
  return v7[8 * v6 + tia_index_by_gain];
}

uint64_t hal9000::get_tia_index_by_gain(hal9000 *this)
{
  if ((int)this > 119999)
  {
    if ((int)this > 239999)
    {
      if (this == 240000)
      {
        return 5;
      }
      else
      {
        if (this != 480000) {
          goto LABEL_20;
        }
        return 6;
      }
    }
    else if (this == 120000)
    {
      return 3;
    }
    else
    {
      if (this != 180000) {
        goto LABEL_20;
      }
      return 4;
    }
  }
  else if ((int)this > 59999)
  {
    if (this == 60000)
    {
      return 1;
    }
    else
    {
      if (this != 90000) {
        goto LABEL_20;
      }
      return 2;
    }
  }
  else
  {
    if (this != 10000)
    {
      if (this == 30000) {
        return 0;
      }
LABEL_20:
      hal9000::get_tia_index_by_gain();
    }
    return 7;
  }
}

float hal9000::SignalProcessor::get_lpf1_gain_sunstone3p75(hal9000::SignalProcessor *this)
{
  if (!*((unsigned char *)this + 108)) {
    return 1.0;
  }
  if (!(!v2 & v1))
  {
    switch(*((unsigned char *)this + 106))
    {
      case '#':
        return 0.888;
      case '$':
      case '%':
      case '&':
      case '\'':
      case ')':
      case '+':
      case ',':
        goto LABEL_19;
      case '(':
        return 0.844;
      case '*':
        return 0.8196;
      case '-':
        return 0.7724;
      case '.':
        return 0.753;
      default:
        JUMPOUT(0);
    }
  }
  switch(*((unsigned char *)this + 106))
  {
    case 0x17:
      return 0.9656;
    case 0x18:
    case 0x1A:
    case 0x1B:
    case 0x1D:
    case 0x1E:
      goto LABEL_19;
    case 0x19:
      return 0.953;
    case 0x1C:
      return 0.9385;
    case 0x1F:
      return 0.9163;
    default:
      if (*((unsigned char *)this + 106) != 19) {
LABEL_19:
      }
        hal9000::SignalProcessor::get_lpf1_gain_sunstone3p75();
      float result = 0.977;
      break;
  }
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<hal9000::compute_tick_offsets(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,hal9000::Generation)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<hal9000::compute_tick_offsets(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,hal9000::Generation)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<hal9000::compute_tick_offsets(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,hal9000::Generation)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<hal9000::compute_tick_offsets(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,hal9000::Generation)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<hal9000::compute_tick_offsets(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,hal9000::Generation)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
}

void std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<hal9000::compute_tick_offsets(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,hal9000::Generation)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
}

void std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<hal9000::compute_tick_offsets(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,hal9000::Generation)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
}

void hal9000::extract_subframe_types<mimosa::OpticalSamplesV1Subpacket>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  std::vector<std::pair<hal9000::SubframeType,unsigned char>>::reserve((void **)a2, 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 2));
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v8 = (void **)a2;
  while (v5 != v4)
  {
    unsigned int v6 = *(unsigned __int8 *)(v5 + 4);
    if (v6 >= 0x15) {
      __assert_rtn("get_subframe_type", "SignalProcessor.cpp", 261, "false");
    }
    __int16 v7 = v6 | (*(unsigned __int8 *)(v5 + 32) << 8);
    std::back_insert_iterator<std::vector<std::pair<hal9000::SubframeType,unsigned char>>>::operator=[abi:ne180100](&v8, &v7);
    v5 += 36;
  }
}

void sub_222762E50(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::pair<hal9000::SubframeType,unsigned char>>::reserve(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 1)
  {
    if ((a2 & 0x8000000000000000) != 0) {
      std::vector<mimosa::OpticalSampleV1>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    unsigned int v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v3, a2);
    __int16 v7 = &v6[v5 & 0xFFFFFFFFFFFFFFFELL];
    unsigned int v9 = &v6[2 * v8];
    double v11 = (char *)*a1;
    int v10 = (char *)a1[1];
    int v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        __int16 v13 = *((_WORD *)v10 - 1);
        v10 -= 2;
        *((_WORD *)v12 - std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = v13;
        v12 -= 2;
      }
      while (v10 != v11);
      int v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void ***std::back_insert_iterator<std::vector<std::pair<hal9000::SubframeType,unsigned char>>>::operator=[abi:ne180100](void ***a1, _WORD *a2)
{
  uint64_t v4 = *a1;
  int64_t v5 = (*a1)[1];
  unsigned int v6 = *a1;
  unint64_t v9 = (unint64_t)v6[2];
  uint64_t v7 = (uint64_t)(v6 + 2);
  unint64_t v8 = v9;
  if ((unint64_t)v5 >= v9)
  {
    uint64_t v11 = (char *)v5 - (unsigned char *)*v4;
    if (v11 <= -3) {
      std::vector<mimosa::OpticalSampleV1>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v11 >> 1;
    unint64_t v13 = v8 - (void)*v4;
    if (v13 <= (v11 >> 1) + 1) {
      unint64_t v14 = v12 + 1;
    }
    else {
      unint64_t v14 = v13;
    }
    if (v13 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v15 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v15 = v14;
    }
    if (v15) {
      uint64_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v7, v15);
    }
    else {
      uint64_t v16 = 0;
    }
    double v17 = &v16[2 * v12];
    uint64_t v18 = &v16[2 * v15];
    *(_WORD *)double v17 = *a2;
    int v10 = v17 + 2;
    uint64_t v20 = (char *)*v4;
    v19 = (char *)v4[1];
    if (v19 != *v4)
    {
      do
      {
        __int16 v21 = *((_WORD *)v19 - 1);
        v19 -= 2;
        *((_WORD *)v17 - std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = v21;
        v17 -= 2;
      }
      while (v19 != v20);
      v19 = (char *)*v4;
    }
    unsigned char *v4 = v17;
    v4[1] = v10;
    v4[2] = v18;
    if (v19) {
      operator delete(v19);
    }
  }
  else
  {
    _WORD *v5 = *a2;
    int v10 = v5 + 1;
  }
  v4[1] = v10;
  return a1;
}

void hal9000::extract_subframe_types<mimosa::OpticalSamplesV2Subpacket>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  std::vector<std::pair<hal9000::SubframeType,unsigned char>>::reserve((void **)a2, (uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 5);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  for (i = (void **)a2; v5 != v4; v5 += 32)
  {
    if ((*(unsigned char *)(v5 + 30) & 4) == 0) {
      __assert_rtn("get_subframe_type", "SignalProcessor.cpp", 273, "false");
    }
    __int16 v6 = (*(unsigned __int8 *)(v5 + 24) << 8) | 0x15;
    std::back_insert_iterator<std::vector<std::pair<hal9000::SubframeType,unsigned char>>>::operator=[abi:ne180100](&i, &v6);
  }
}

void sub_2227630B0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<double>::insert(uint64_t a1, char *__src, char *a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = __src;
  __int16 v6 = *(char **)(a1 + 8);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    unint64_t v13 = *(char **)a1;
    unint64_t v14 = ((uint64_t)&v6[-*(void *)a1] >> 3) + 1;
    if (v14 >> 61) {
      std::vector<mimosa::OpticalSampleV1>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = __src - v13;
    uint64_t v16 = (__src - v13) >> 3;
    uint64_t v17 = v7 - (void)v13;
    if (v17 >> 2 > v14) {
      unint64_t v14 = v17 >> 2;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v14;
    }
    uint64_t v30 = a1 + 16;
    if (v18) {
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a1 + 16, v18);
    }
    else {
      v19 = 0;
    }
    uint64_t v20 = &v19[8 * v16];
    __p = v19;
    v27 = v20;
    v28 = v20;
    v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4) {
          unint64_t v22 = 1;
        }
        else {
          unint64_t v22 = v15 >> 2;
        }
        double v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v8, v22);
        uint64_t v20 = &v23[8 * (v22 >> 2)];
        __p = v23;
        v27 = v20;
        v29 = &v23[8 * v24];
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        unint64_t v21 = v16 + 2;
        if (v16 >= -1) {
          unint64_t v21 = v16 + 1;
        }
        v20 -= 8 * (v21 >> 1);
        v27 = v20;
      }
    }
    *(void *)uint64_t v20 = *(void *)v3;
    v28 = v20 + 8;
    uint64_t v4 = std::vector<double>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27) {
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else if (__src == v6)
  {
    *(void *)__src = *(void *)a3;
    *(void *)(a1 + 8) = __src + 8;
  }
  else
  {
    unint64_t v9 = __src + 8;
    int v10 = v6 - 8;
    uint64_t v11 = *(void **)(a1 + 8);
    while (v10 < v6)
    {
      uint64_t v12 = *(void *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(void *)(a1 + 8) = v11;
    if (v6 != v9) {
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    }
    if (v4 <= v3) {
      v3 += 8 * (*(void *)(a1 + 8) > (unint64_t)v3);
    }
    *(void *)uint64_t v4 = *(void *)v3;
  }
  return v4;
}

void sub_2227632DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<double>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  uint64_t v5 = *(char **)(a2 + 8);
  __int16 v6 = (char *)*a1;
  unint64_t v7 = v5;
  if (*a1 != __src)
  {
    uint64_t v8 = __src;
    unint64_t v7 = *(char **)(a2 + 8);
    do
    {
      uint64_t v9 = *((void *)v8 - 1);
      v8 -= 8;
      *((void *)v7 - std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = v9;
      v7 -= 8;
    }
    while (v8 != v6);
  }
  *(void *)(a2 + 8) = v7;
  int v10 = a1[1];
  uint64_t v11 = *(void *)(a2 + 16);
  int64_t v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    unint64_t v7 = *(char **)(a2 + 8);
  }
  *(void *)(a2 + 16) = v11 + v12;
  unint64_t v13 = (char *)*a1;
  *a1 = v7;
  *(void *)(a2 + 8) = v13;
  unint64_t v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(void *)(a2 + 16) = v14;
  uint64_t v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(void *)(a2 + 24) = v15;
  *(void *)a2 = *(void *)(a2 + 8);
  return v5;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(8 * a2);
}

void std::__throw_bad_optional_access[abi:ne180100]()
{
  exception = __cxa_allocate_exception(8uLL);
  void *exception = MEMORY[0x263F8C3B0] + 16;
  __cxa_throw(exception, MEMORY[0x263F8C200], MEMORY[0x263F8C088]);
}

void sub_222763574(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_22276370C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22276392C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_222763AC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_222763C8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_222763ECC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_222763FC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<-[HAWristTemperatureSession parsePacket:]::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,PackedWristTemperatureHeaderV0,PackedWristTemperatureHeaderV1> &>(id ***a1, uint64_t a2)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a1;
  if ((unint64_t)[*((id *)***a1 + 7) length] <= 0x19)
  {
    uint64_t v4 = ha_get_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT)) {
      std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<-[HAWristTemperatureSession parsePacket:]::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,PackedWristTemperatureHeaderV0,PackedWristTemperatureHeaderV1> &>(v31, [*((id *)**v3 + 7) length]);
    }

    return 0;
  }
  [*((id *)**v3 + 7) getBytes:a2 length:26];
  uint64_t v5 = [NSNumber numberWithUnsignedChar:*(unsigned __int8 *)(a2 + 9)];
  uint64_t v6 = [v5 stringValue];
  unint64_t v7 = **v3;
  uint64_t v8 = (void *)v7[4];
  v7[4] = v6;

  uint64_t v9 = *v3;
  *((_DWORD *)**v3 + 3) = *(_DWORD *)(a2 + 10);
  *((_DWORD *)*v9 + 4) = *(_DWORD *)(a2 + 14);
  id v10 = objc_alloc(MEMORY[0x263F08980]);
  float v11 = *(float *)(a2 + 18);
  int64_t v12 = [MEMORY[0x263F08D08] milliwatts];
  uint64_t v13 = [v10 initWithDoubleValue:v12 unit:v11];
  unint64_t v14 = **v3;
  uint64_t v15 = (void *)v14[5];
  v14[5] = v13;

  id v16 = objc_alloc(MEMORY[0x263F08980]);
  float v17 = *(float *)(a2 + 22);
  unint64_t v18 = [MEMORY[0x263F08D08] milliwatts];
  uint64_t v19 = [v16 initWithDoubleValue:v18 unit:v17];
  uint64_t v20 = **v3;
  unint64_t v21 = (void *)v20[6];
  v20[6] = v19;

  uint64_t v22 = [*((id *)**v3 + 7) length];
  uint64_t v23 = ((unint64_t)(v22 - 26) * (unsigned __int128)0x8618618618618619) >> 64;
  unint64_t v24 = (v23 + ((unint64_t)(v22 - 26 - v23) >> 1)) >> 4;
  if (v22 - 26 != 21 * v24)
  {
    v25 = ha_get_log();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_FAULT)) {
      std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<-[HAWristTemperatureSession parsePacket:]::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,PackedWristTemperatureHeaderV0,PackedWristTemperatureHeaderV1> &>();
    }

    return 0;
  }
  v27 = *v3;
  *((void *)**v3 + 8) = v24;
  *((void *)*v27 + std::__function::__value_func<BOOL ()(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,double)>::~__value_func[abi:ne180100]((void *)this + 9) = 26;
  uint64_t v28 = [*v27 sessionIntervalV0WithStartTime:*(double *)(a2 + 1)];
  v29 = **v3;
  uint64_t v30 = (void *)v29[3];
  v29[3] = v28;

  return 1;
}

void sub_22276432C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<-[HAWristTemperatureSession parsePacket:]::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,PackedWristTemperatureHeaderV0,PackedWristTemperatureHeaderV1> &>(id ***a1, uint64_t a2)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a1;
  if ((unint64_t)[*((id *)***a1 + 7) length] <= 0x1A)
  {
    uint64_t v4 = ha_get_log();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT)) {
      std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<-[HAWristTemperatureSession parsePacket:]::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,PackedWristTemperatureHeaderV0,PackedWristTemperatureHeaderV1> &>(v31, [*((id *)**v3 + 7) length]);
    }

    return 0;
  }
  [*((id *)**v3 + 7) getBytes:a2 length:27];
  uint64_t v5 = [NSNumber numberWithUnsignedChar:*(unsigned __int8 *)(a2 + 9)];
  uint64_t v6 = [v5 stringValue];
  unint64_t v7 = **v3;
  uint64_t v8 = (void *)v7[4];
  v7[4] = v6;

  uint64_t v9 = *v3;
  *((_DWORD *)**v3 + 3) = *(_DWORD *)(a2 + 10);
  *((_DWORD *)*v9 + 4) = *(_DWORD *)(a2 + 14);
  id v10 = objc_alloc(MEMORY[0x263F08980]);
  float v11 = *(float *)(a2 + 18);
  int64_t v12 = [MEMORY[0x263F08D08] milliwatts];
  uint64_t v13 = [v10 initWithDoubleValue:v12 unit:v11];
  unint64_t v14 = **v3;
  uint64_t v15 = (void *)v14[5];
  v14[5] = v13;

  id v16 = objc_alloc(MEMORY[0x263F08980]);
  float v17 = *(float *)(a2 + 22);
  unint64_t v18 = [MEMORY[0x263F08D08] milliwatts];
  uint64_t v19 = [v16 initWithDoubleValue:v18 unit:v17];
  uint64_t v20 = **v3;
  unint64_t v21 = (void *)v20[6];
  v20[6] = v19;

  uint64_t v22 = [*((id *)**v3 + 7) length];
  uint64_t v23 = ((unint64_t)(v22 - 27) * (unsigned __int128)0x8618618618618619) >> 64;
  unint64_t v24 = (v23 + ((unint64_t)(v22 - 27 - v23) >> 1)) >> 4;
  if (v22 - 27 != 21 * v24)
  {
    v25 = ha_get_log();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_FAULT)) {
      std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<-[HAWristTemperatureSession parsePacket:]::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,PackedWristTemperatureHeaderV0,PackedWristTemperatureHeaderV1> &>();
    }

    return 0;
  }
  v27 = *v3;
  *((void *)**v3 + 8) = v24;
  *((void *)*v27 + std::__function::__value_func<BOOL ()(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,double)>::~__value_func[abi:ne180100]((void *)this + 9) = 27;
  uint64_t v28 = [*v27 sessionIntervalV0WithStartTime:*(double *)(a2 + 1)];
  v29 = **v3;
  uint64_t v30 = (void *)v29[3];
  v29[3] = v28;

  return 1;
}

void sub_2227645CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<Visitor<-[HAWristTemperatureSession parsePacket:]::$_1,-[HAWristTemperatureSession parsePacket:]::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,PackedWristTemperatureHeaderV0,PackedWristTemperatureHeaderV1> &>()
{
  return 0;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<Visitor<-[HAWristTemperatureSession parsePacket:]::$_1,-[HAWristTemperatureSession parsePacket:]::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,PackedWristTemperatureHeaderV0,PackedWristTemperatureHeaderV1> &>(uint64_t a1, uint64_t a2)
{
  return *(unsigned char *)(a2 + 26) != 0;
}

uint64_t OUTLINED_FUNCTION_0@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(result + 4) = a3;
  *(_WORD *)(result + 12) = 2048;
  *(void *)(result + 14) = a2;
  return result;
}

void OUTLINED_FUNCTION_2(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, a5, 0x16u);
}

void sub_2227647CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_222764928(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_222764A64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_222764F74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2227650DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_222765198(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_1_0(void *a1, int a2, os_log_t log, const char *a4, uint8_t *a5)
{
  _os_log_fault_impl(a1, log, OS_LOG_TYPE_FAULT, a4, a5, 0x16u);
}

void sub_2227652D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22276538C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  float v11 = v10;

  _Unwind_Resume(a1);
}

void sub_222765494(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_222765588(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_222765684(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_22276586C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_222765A9C(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_222765D88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_2227660D4(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_222766468(_Unwind_Exception *a1)
{
  uint64_t v5 = v4;

  _Unwind_Resume(a1);
}

void sub_2227666CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_222766864(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_222766A84(_Unwind_Exception *a1)
{
  uint64_t v5 = v4;

  _Unwind_Resume(a1);
}

void sub_222766C48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  float v11 = v10;

  _Unwind_Resume(a1);
}

void sub_222766EEC(_Unwind_Exception *a1)
{
  uint64_t v5 = v3;

  _Unwind_Resume(a1);
}

void sub_222767024(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_22276723C(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_22276736C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_2227674D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_222767554(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_222767650(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  id v10 = v9;

  a9.super_class = (Class)HAMenstrualAlgorithmsDayStreamProcessor;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_22276777C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_22276780C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_222767AE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

void sub_222767BA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{
}

void sub_222767EA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_222768130(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_2227682F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_222768374(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2227683E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  id v10 = v9;

  a9.super_class = (Class)HAMenstrualAlgorithmsHistoricalAnalyzer;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_2227684FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_22276858C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_2227685F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_2227688C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

void sub_222768984(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

float health_algorithms::correct_v4_coeffs(uint64_t a1, float result, double a3, double a4, double a5, double a6)
{
  if (*(unsigned char *)a1 == 4)
  {
    uint64_t v6 = 0;
    float v7 = *(float *)(a1 + 24);
    LODWORD(a4) = *(_DWORD *)(a1 + 76);
    LODWORD(astd::__function::__value_func<BOOL ()(mimosa::Metadata const&)>::~__value_func[abi:ne180100]((void *)this + 5) = *(_DWORD *)(a1 + 128);
    LODWORD(a6) = *(_DWORD *)(a1 + 180);
    float32x4_t v8 = vmlaq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a6, 0), (float32x4_t)xmmword_2227952F0, vmlaq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a5, 0), (float32x4_t)xmmword_2227952F0, vmlaq_n_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a4, 0), (float32x4_t)xmmword_2227952F0, v7)));
    int8x16_t v29 = vbicq_s8((int8x16_t)vmulq_f32(v8, (float32x4_t)xmmword_222795300), (int8x16_t)vcltzq_f32(v8));
    float v9 = *(float *)&a6
       + (float)((float)(*(float *)&a5 + (float)((float)(*(float *)&a4 + (float)(v7 * 180.0)) * 180.0)) * 180.0);
    float v10 = v9 * 10.0;
    BOOL v11 = v9 < 0.0;
    float v12 = 0.0;
    if (!v11) {
      float v12 = v10;
    }
    float v30 = v12;
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    uint64_t v13 = (char *)&health_algorithms::correct_v4_coeffs(mimosa::OpREv5 &)::M_RD0;
    do
    {
      uint64_t v14 = 0;
      float v15 = *((float *)&v27 + v6);
      do
      {
        float v15 = v15 + (float)(*(float *)&v29.i32[v14] * *(float *)&v13[v14 * 4]);
        ++v14;
      }
      while (v14 != 5);
      *((float *)&v27 + v6++) = v15;
      v13 += 20;
    }
    while (v6 != 3);
    uint64_t v16 = 0;
    LODWORD(a4) = HIDWORD(v27);
    *(_DWORD *)(a1 + 24) = v27;
    *(_DWORD *)(a1 + 76) = LODWORD(a4);
    LODWORD(a4) = HIDWORD(v28);
    *(_DWORD *)(a1 + 128) = v28;
    *(_DWORD *)(a1 + 180) = LODWORD(a4);
    float v17 = *(float *)(a1 + 36);
    LODWORD(a4) = *(_DWORD *)(a1 + 88);
    LODWORD(astd::__function::__value_func<BOOL ()(mimosa::Metadata const&)>::~__value_func[abi:ne180100]((void *)this + 5) = *(_DWORD *)(a1 + 140);
    LODWORD(a6) = *(_DWORD *)(a1 + 192);
    float32x4_t v18 = vmlaq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a6, 0), (float32x4_t)xmmword_2227952F0, vmlaq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a5, 0), (float32x4_t)xmmword_2227952F0, vmlaq_n_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a4, 0), (float32x4_t)xmmword_2227952F0, v17)));
    int8x16_t v29 = vbicq_s8((int8x16_t)vmulq_f32(v18, (float32x4_t)xmmword_222795310), (int8x16_t)vcltzq_f32(v18));
    float v19 = *(float *)&a6
        + (float)((float)(*(float *)&a5 + (float)((float)(*(float *)&a4 + (float)(v17 * 180.0)) * 180.0)) * 180.0);
    float v20 = v19 * 0.0555;
    BOOL v11 = v19 < 0.0;
    float v21 = 0.0;
    if (!v11) {
      float v21 = v20;
    }
    float v30 = v21;
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    uint64_t v22 = (char *)&health_algorithms::correct_v4_coeffs(mimosa::OpREv5 &)::M_RD3;
    do
    {
      uint64_t v23 = 0;
      float v24 = *((float *)&v27 + v16);
      do
      {
        float v24 = v24 + (float)(*(float *)&v29.i32[v23] * *(float *)&v22[v23 * 4]);
        ++v23;
      }
      while (v23 != 5);
      *((float *)&v27 + v16++) = v24;
      v22 += 20;
    }
    while (v16 != 3);
    int v25 = HIDWORD(v27);
    *(_DWORD *)(a1 + 36) = v27;
    *(_DWORD *)(a1 + 88) = v25;
    int v26 = HIDWORD(v28);
    float result = *(float *)&v28;
    *(_DWORD *)(a1 + 140) = v28;
    *(_DWORD *)(a1 + 192) = v26;
  }
  return result;
}

uint64_t health_algorithms::PPGProcessor::PPGProcessor(uint64_t a1, void *a2)
{
  *(void *)a1 = *a2;
  uint64_t v3 = a2[1];
  *(void *)(a1 + 8) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_DWORD *)(a1 + 48) = 1065353216;
  do
  {
    uint64_t v5 = a1 + v4;
    *(unsigned char *)(v5 + 56) = 0;
    *(unsigned char *)(v5 + 76) = 0;
    v4 += 24;
  }
  while (v4 != 96);
  *(unsigned char *)(a1 + 152) = 0;
  *(unsigned char *)(a1 + 160) = 0;
  uint64_t v6 = *a2;
  if (*(unsigned char *)(v6 + 1940) && !*(_DWORD *)(v6 + 1936) && *(unsigned char *)(v6 + 232) == 4)
  {
    std::allocate_shared[abi:ne180100]<mimosa::Metadata,std::allocator<mimosa::Metadata>,mimosa::Metadata const&,void>((const mimosa::Metadata *)v6, &v16);
    if (*(_DWORD *)(v16 + 1936)) {
      std::__throw_bad_variant_access[abi:ne180100]();
    }
    health_algorithms::correct_v4_coeffs(v16 + 232, v7, v8, v9, v10, v11);
    uint64_t v13 = v16;
    float v12 = v17;
    if (v17) {
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v14 = *(std::__shared_weak_count **)(a1 + 8);
    *(void *)a1 = v13;
    *(void *)(a1 + 8) = v12;
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
    if (v17) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v17);
    }
  }
  return a1;
}

void sub_222768CF8(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>>>::~__hash_table(v2);
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + 8);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  _Unwind_Resume(a1);
}

void health_algorithms::PPGProcessor::raw_ppg_datums_for_packet(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void health_algorithms::PPGProcessor::raw_ppg_datums_for_packet(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  std::vector<health_algorithms::PPGProcessor::RawPPGDatum>::reserve((void **)a2, 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a1 + 40) - *(void *)(a1 + 32)) >> 2));
  int v4 = *(_DWORD *)(a1 + 128);
  uint64_t v5 = *(unsigned __int16 **)(a1 + 160);
  uint64_t v6 = *(unsigned __int16 **)(a1 + 168);
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v28 = (void **)a2;
  if (v5 != v6)
  {
    double v8 = (unsigned __int8 *)(v7 + 35);
    do
    {
      unint64_t v9 = *v5;
      BOOL v10 = (v4 & 0x40) != 0 && *(v8 - 1) == 1 || (v9 - 16) < 0xA;
      unsigned __int16 v11 = *(_WORD *)(v8 - 7) - 1;
      if (v11 >= 8u || ((0x8Bu >> v11) & 1) == 0) {
        __assert_rtn("operator()", "PPGProcessor.cpp", 417, "false");
      }
      LODWORD(v12) = *(_DWORD *)(v8 - 35);
      DWORD1(v12) = *(_DWORD *)(v8 - 27);
      DWORD2(v12) = *(_DWORD *)(v8 - 19);
      BYTE12(v12) = 0;
      char v13 = 0;
      uint64_t v14 = 0;
      __int16 v15 = *(_WORD *)(v8 - 15);
      __int16 v16 = *(_WORD *)(v8 - 11);
      __int16 v17 = *(_WORD *)(v8 - 5);
      __int16 v18 = v9 >> 1;
      char v19 = *(v8 - 3);
      char v20 = health_algorithms::index_for_tia_gain((health_algorithms *)(10000 * *v8));
      char v21 = 1 << (v9 & 1);
      char v22 = 0x300000002000100uLL >> (8 * v11);
      if (v9 >= 0x3E) {
        std::__throw_out_of_range[abi:ne180100]("array::at");
      }
      char v23 = health_algorithms::PPGProcessor::raw_ppg_datums_for_packet(mimosa::PacketV3 const&)::carnelian_measurement_index_to_emitter[v9 >> 1];
      BOOL v24 = v10;
      char v25 = (v9 < 0x18) & (0xC30000u >> v9);
      char v26 = (*(void *)(a1 + 112) >> (v9 >> 1)) & 1;
      char v27 = 0;
      std::back_insert_iterator<std::vector<health_algorithms::PPGProcessor::RawPPGDatum>>::operator=[abi:ne180100](&v28, &v12);
      ++v5;
      v8 += 36;
    }
    while (v5 != v6);
  }
}

{
  health_algorithms::PPGProcessor::extract_datums(a1 + 16, a1 + 144, *(void *)(a1 + 112), a2);
}

{
  health_algorithms::PPGProcessor::extract_datums(a1 + 16, a1 + 144, *(void *)(a1 + 112), a2);
}

{
  health_algorithms::PPGProcessor::raw_ppg_datums_for_optical_samples(a1 + 16, *(void *)(a1 + 112), a2);
}

{
  health_algorithms::PPGProcessor::raw_ppg_datums_for_optical_samples(a1 + 16, *(void *)(a1 + 112), a2);
}

void sub_222768F54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  unsigned __int16 v11 = *(void **)a10;
  if (*(void *)a10)
  {
    *(void *)(a10 + 8) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<health_algorithms::PPGProcessor::RawPPGDatum>::reserve(void **a1, unint64_t a2)
{
  int v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (0x6DB6DB6DB6DB6DB7 * ((v4 - (unsigned char *)*a1) >> 3) < a2)
  {
    if (a2 >= 0x492492492492493) {
      std::vector<mimosa::OpticalSampleV1>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<health_algorithms::PPGProcessor::RawPPGDatum>>(v3, a2);
    uint64_t v7 = &v6[v5];
    unint64_t v9 = &v6[56 * v8];
    unsigned __int16 v11 = (char *)*a1;
    BOOL v10 = (char *)a1[1];
    long long v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        long long v13 = *(_OWORD *)(v10 - 56);
        long long v14 = *(_OWORD *)(v10 - 40);
        long long v15 = *(_OWORD *)(v10 - 24);
        *(v12 - 8) = *(v10 - 8);
        *(_OWORD *)(v12 - 24) = v15;
        *(_OWORD *)(v12 - 40) = v14;
        *(_OWORD *)(v12 - 56) = v13;
        v12 -= 56;
        v10 -= 56;
      }
      while (v10 != v11);
      BOOL v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void health_algorithms::PPGProcessor::raw_ppg_datums_for_optical_samples(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  std::vector<health_algorithms::PPGProcessor::RawPPGDatum>::reserve((void **)a3, (uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 5);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(a1 + 24);
  for (i = (void **)a3; v7 != v6; v7 += 32)
  {
    unsigned int v8 = *(unsigned __int8 *)(v7 + 29);
    if (v8 > 0x2D || (unsigned int v9 = *(unsigned __int16 *)(v7 + 22), v9 > 0x1FF))
    {
      __int16 v10 = 0;
      char v12 = 0;
      LOWORD(v1std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = 0;
    }
    else
    {
      __int16 v10 = *(_WORD *)(v7 + 22);
      unsigned int v11 = v9 >> 8;
      char v12 = 1;
    }
    unint64_t v13 = *(unsigned __int16 *)(v7 + 12);
    *(void *)&long long v14 = *(void *)v7;
    DWORD2(v14) = *(_DWORD *)(v7 + 8);
    WORD6(v14) = v10 | ((_WORD)v11 << 8);
    BYTE14(v14) = v8;
    char v15 = v12;
    uint64_t v16 = 0;
    __int16 v17 = *(_WORD *)(v7 + 14);
    int v18 = *(_DWORD *)(v7 + 18);
    __int16 v19 = v13 >> 2;
    char v20 = *(unsigned char *)(v7 + 24);
    char v21 = health_algorithms::index_for_tia_gain((health_algorithms *)(10000 * *(unsigned __int8 *)(v7 + 28)));
    char v22 = *(unsigned char *)(v7 + 27);
    char v23 = *(unsigned char *)(v7 + 26);
    char v24 = *(unsigned char *)(v7 + 25);
    BOOL v25 = v13 > 0xC7;
    BOOL is_light_path_redacted_for_gemstone_and_newer = health_algorithms::is_light_path_redacted_for_gemstone_and_newer((health_algorithms *)*(unsigned __int16 *)(v7 + 12));
    char v27 = (a2 >> (v13 >> 2)) & 1;
    BOOL v28 = (*(unsigned char *)(v7 + 30) & 2) != 0;
    std::back_insert_iterator<std::vector<health_algorithms::PPGProcessor::RawPPGDatum>>::operator=[abi:ne180100](&i, &v14);
  }
}

void sub_2227691D4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void health_algorithms::PPGProcessor::extract_datums(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  unint64_t v6 = 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 2);
  if (v6 != (uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "element count mismatch between OpticalSamplesV1Subpacket and OpticalDecoderV2Subpacket");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  std::vector<health_algorithms::PPGProcessor::RawPPGDatum>::reserve((void **)a4, v6);
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v9 = *(void *)(a1 + 24);
  unsigned int v11 = *(unsigned __int16 **)(a2 + 16);
  for (i = (void **)a4; v10 != v9; ++v11)
  {
    unsigned __int16 v12 = *(_WORD *)(v10 + 28) - 1;
    if (v12 >= 8u || ((0x8Bu >> v12) & 1) == 0) {
      __assert_rtn("operator()", "PPGProcessor.cpp", 571, "false");
    }
    unint64_t v13 = *v11;
    unint64_t v14 = v13 >> 2;
    LODWORD(v16) = *(_DWORD *)v10;
    DWORD1(v16) = *(_DWORD *)(v10 + 8);
    DWORD2(v16) = *(_DWORD *)(v10 + 16);
    BYTE12(v16) = 0;
    char v17 = 0;
    uint64_t v18 = 0;
    __int16 v19 = *(_WORD *)(v10 + 20);
    __int16 v20 = *(_WORD *)(v10 + 24);
    __int16 v21 = *(_WORD *)(v10 + 30);
    __int16 v22 = v13 >> 2;
    char v23 = *(unsigned char *)(v10 + 32);
    char v24 = health_algorithms::index_for_tia_gain((health_algorithms *)(10000
                                                                    * *(unsigned __int8 *)(v10 + 35)));
    if (v13 >= 0xC8) {
      std::__throw_out_of_range[abi:ne180100]("array::at");
    }
    char v25 = health_algorithms::PPGProcessor::extract_datums(mimosa::OpticalSamplesV1Subpacket const&,mimosa::OpticalDecoderV2Subpacket const&,unsigned long long)::light_path_to_photodiodes_table[v13];
    char v26 = 0x300000002000100uLL >> (8 * v12);
    char v27 = health_algorithms::PPGProcessor::extract_datums(mimosa::OpticalSamplesV1Subpacket const&,mimosa::OpticalDecoderV2Subpacket const&,unsigned long long)::measurement_index_to_emitter_table[v14];
    char v28 = 0;
    BOOL is_light_path_redacted_for_gemstone_and_newer = health_algorithms::is_light_path_redacted_for_gemstone_and_newer((health_algorithms *)v13);
    char v30 = (a3 >> v14) & 1;
    char v31 = 0;
    std::back_insert_iterator<std::vector<health_algorithms::PPGProcessor::RawPPGDatum>>::operator=[abi:ne180100](&i, &v16);
    v10 += 36;
  }
}

void sub_222769414(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  __cxa_free_exception(v10);
  unsigned __int16 v12 = *(void **)a10;
  if (*(void *)a10)
  {
    *(void *)(a10 + 8) = v12;
    operator delete(v12);
  }
  _Unwind_Resume(a1);
}

uint64_t health_algorithms::PPGProcessor::update_blank_samples(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (*a2 != v3)
  {
    uint64_t v4 = result + 56;
    do
    {
      if (*(unsigned __int8 *)(v2 + 44) == 255 && *(unsigned char *)(v2 + 48) == 0)
      {
        unsigned __int8 v6 = *(unsigned char *)(v2 + 42) - 1;
        if (v6 >= 8u || ((0x8Bu >> v6) & 1) == 0) {
          health_algorithms::PPGProcessor::update_blank_samples();
        }
        __int16 v7 = *(_WORD *)(v2 + 34);
        float result = health_algorithms::tia_gain_table[*(unsigned __int8 *)(v2 + 41)];
        uint64_t v8 = v4 + 24 * qword_2227955F8[(char)v6];
        int v9 = *(unsigned __int8 *)(v8 + 20);
        int v10 = *(_DWORD *)(v2 + 8);
        *(void *)uint64_t v8 = *(void *)v2;
        *(_DWORD *)(v8 + 8) = v10;
        *(_WORD *)(v8 + 12) = v7;
        *(_DWORD *)(v8 + 16) = result;
        if (!v9) {
          *(unsigned char *)(v8 + 20) = 1;
        }
      }
      v2 += 56;
    }
    while (v2 != v3);
  }
  return result;
}

void health_algorithms::PPGProcessor::make_processor(uint64_t *a1, uint64_t a2, int a3)
{
  if (a3)
  {
    uint64_t v4 = *a1;
    if (*(unsigned char *)(*a1 + 1940))
    {
      if (a3 == 3)
      {
        if (*(_DWORD *)(v4 + 1936) == 2)
        {
          unsigned int v5 = *(unsigned __int8 *)(a2 + 44);
          if (v5 < 0xD)
          {
            if (v5 != 4)
            {
              if (*(unsigned __int8 *)(a2 + 41) < 8u)
              {
                health_algorithms::led_to_wavelength_index(3, *(unsigned __int8 *)(a2 + 44));
                health_algorithms::led_to_wavelength_index(3, *(unsigned __int8 *)(a2 + 44));
                operator new();
              }
              health_algorithms::PPGProcessor::make_processor();
            }
            health_algorithms::PPGProcessor::make_processor();
          }
          health_algorithms::PPGProcessor::make_processor();
        }
      }
      else if (a3 == 2)
      {
        if (*(_DWORD *)(v4 + 1936) == 1)
        {
          if (*(unsigned __int8 *)(a2 + 44) < 0xDuLL)
          {
            if (*(unsigned __int8 *)(a2 + 41) < 8u)
            {
              health_algorithms::led_to_wavelength_index(2, *(unsigned __int8 *)(a2 + 44));
              health_algorithms::led_to_wavelength_index(2, *(unsigned __int8 *)(a2 + 44));
              operator new();
            }
            health_algorithms::PPGProcessor::make_processor();
          }
          health_algorithms::PPGProcessor::make_processor();
        }
      }
      else if (!*(_DWORD *)(v4 + 1936))
      {
        if (*(unsigned __int8 *)(a2 + 44) < 0xDuLL)
        {
          if (*(unsigned __int8 *)(a2 + 41) < 8u)
          {
            health_algorithms::led_to_wavelength_index(1, *(unsigned __int8 *)(a2 + 44));
            health_algorithms::led_to_wavelength_index(1, *(unsigned __int8 *)(a2 + 44));
            operator new();
          }
          health_algorithms::PPGProcessor::make_processor();
        }
        health_algorithms::PPGProcessor::make_processor();
      }
      std::__throw_bad_variant_access[abi:ne180100]();
    }
    health_algorithms::PPGProcessor::make_processor();
  }
  if (*(unsigned __int8 *)(a2 + 44) < 6u) {
    operator new();
  }
  health_algorithms::PPGProcessor::make_processor();
}

void sub_222769B7C(_Unwind_Exception *a1)
{
  MEMORY[0x223C9C430](v1, 0x1000C40A094D7EDLL);
  _Unwind_Resume(a1);
}

uint64_t health_algorithms::led_to_wavelength_index(int a1, unsigned int a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  if (a1)
  {
    if (a2 >= 0xD) {
      health_algorithms::led_to_wavelength_index();
    }
    int v3 = 33686018;
    char v4 = 3;
    uint64_t v5 = 16843009;
    return *((unsigned __int8 *)&v3 + a2);
  }
  else
  {
    if (a2 >= 6) {
      health_algorithms::led_to_wavelength_index();
    }
    return 2 * (a2 < 2);
  }
}

void health_algorithms::PPGProcessor::process_packet(uint64_t a1@<X0>, uint64_t a2@<X1>, void **a3@<X8>)
{
  int v3 = a3;
  *((_OWORD *)a3 + std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = 0u;
  *((_OWORD *)a3 + 2) = 0u;
  *(_OWORD *)a3 = 0u;
  uint64_t v102 = *(void *)a1 + 232;
  uint64_t v4 = *(unsigned int *)(a2 + 320);
  if (v4 == -1) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  *(void *)&long long v96 = &v102;
  int v7 = ((uint64_t (*)(long long *))off_26D4E3FD8[v4])(&v96);
  if (!v7 || *(unsigned char *)(*(void *)a1 + 1940))
  {
    uint64_t v8 = *(unsigned int *)(a2 + 320);
    if (v8 == -1) {
      std::__throw_bad_variant_access[abi:ne180100]();
    }
    *(void *)&long long v96 = &v102;
    int v93 = ((uint64_t (*)(long long *, uint64_t))off_26D4E4010[v8])(&v96, a2);
    hal9000::compute_tick_offsets(a2, v7, &v117);
    uint64_t v9 = *(unsigned int *)(a2 + 320);
    if (v9 == -1) {
      std::__throw_bad_variant_access[abi:ne180100]();
    }
    *(void *)&long long v96 = &v102;
    ((void (*)(char **__return_ptr, long long *, uint64_t))off_26D4E4048[v9])(&v115, &v96, a2);
    int v10 = v117;
    unint64_t v11 = v118 - v117;
    if (v11 != 0x6DB6DB6DB6DB6DB7 * ((v116 - v115) >> 3)) {
      __assert_rtn("process_packet", "PPGProcessor.cpp", 803, "tick_offsets.size() == datums.size()");
    }
    if (v118 != v117)
    {
      if (v11 <= 1) {
        unint64_t v11 = 1;
      }
      unsigned __int16 v12 = v115 + 24;
      do
      {
        uint64_t v13 = *v10++;
        *unsigned __int16 v12 = v13;
        v12 += 7;
        --v11;
      }
      while (v11);
    }
    uint64_t v14 = a2;
    health_algorithms::PPGProcessor::update_blank_samples(a1, (uint64_t *)&v115);
    uint64_t v15 = 0;
    long long v113 = 0u;
    long long v114 = 0u;
    long long v16 = (uint64_t *)&v113;
    do
    {
      if (*(unsigned char *)(a1 + v15 + 76)) {
        uint64_t v17 = a1 + v15 + 56;
      }
      else {
        uint64_t v17 = 0;
      }
      *v16++ = v17;
      v15 += 24;
    }
    while (v15 != 96);
    uint64_t v18 = *(unsigned int *)(a2 + 320);
    if (v18 == -1) {
      std::__throw_bad_variant_access[abi:ne180100]();
    }
    *(void *)&long long v96 = &v102;
    uint64_t v94 = ((uint64_t (*)(long long *, uint64_t))off_26D4E4080[v18])(&v96, a2);
    uint64_t v87 = a1;
    uint64_t v19 = *(unsigned int *)(a2 + 320);
    if (v19 == -1) {
      std::__throw_bad_variant_access[abi:ne180100]();
    }
    *(void *)&long long v96 = &v102;
    uint64_t v20 = ((uint64_t (*)(long long *, uint64_t))off_26D4E40B8[v19])(&v96, a2);
    __int16 v21 = v115;
    __int16 v22 = v116;
    if (v115 != v116)
    {
      do
      {
        if (v21[47] || (*((_WORD *)v21 + 17) & 0xFFF7) != 0)
        {
          LODWORD(v96) = (v21[44] << 16) | (v21[42] << 8) | v21[45];
          std::__hash_table<std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>>>::__erase_unique<unsigned int>((void *)(v87 + 16), (unsigned int *)&v96);
        }
        v21 += 56;
      }
      while (v21 != v22);
      char v23 = v116;
      if (v115 != v116)
      {
        char v24 = v115 + 56;
        while (1)
        {
          BOOL v25 = *(v24 - 12) != 255 && *(v24 - 10) == 0;
          BOOL v26 = v25 && *(v24 - 9) == 0;
          if (!v26 || (*((_WORD *)v24 - 11) & 0xFFF7) != 0) {
            break;
          }
          BOOL v25 = v24 == v116;
          v24 += 56;
          if (v25) {
            goto LABEL_53;
          }
        }
        char v27 = v24 - 56;
        if (v24 - 56 != v116)
        {
          while (v24 != v23)
          {
            if (v24[44] != 255 && v24[46] == 0 && v24[47] == 0 && (*((_WORD *)v24 + 17) & 0xFFF7) == 0)
            {
              long long v30 = *(_OWORD *)v24;
              long long v31 = *((_OWORD *)v24 + 1);
              long long v32 = *((_OWORD *)v24 + 2);
              v27[48] = v24[48];
              *((_OWORD *)v27 + std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = v31;
              *((_OWORD *)v27 + 2) = v32;
              *(_OWORD *)char v27 = v30;
              v27 += 56;
            }
            v24 += 56;
          }
        }
        if (v27 != v23) {
          v116 = v27;
        }
      }
    }
LABEL_53:
    v33 = (uint64_t *)v87;
    v34 = (void *)(v87 + 16);
    for (i = *(uint64_t **)(v87 + 32); i; i = (uint64_t *)*i)
    {
      while (v20 - i[3] <= 999999999)
      {
        i = (uint64_t *)std::__hash_table<std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>>>::erase(v34, i);
        if (!i) {
          goto LABEL_58;
        }
      }
    }
LABEL_58:
    uint64_t v36 = *(unsigned int *)(v14 + 320);
    if (v36 == -1) {
      std::__throw_bad_variant_access[abi:ne180100]();
    }
    v83 = v3 + 3;
    *(void *)&long long v96 = &v102;
    ((void (*)(long long *, uint64_t))off_26D4E40F0[v36])(&v96, v14);
    uint64_t v37 = v14;
    v38 = v115;
    v92 = v116;
    if (v115 != v116)
    {
      uint64_t v84 = (uint64_t)(v3 + 2);
      int v91 = v7;
      uint64_t v90 = v20;
      uint64_t v85 = v14;
      v86 = v3;
      do
      {
        LODWORD(v102) = (v38[44] << 16) | (v38[42] << 8) | v38[45];
        v39 = std::__hash_table<std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>>>::find<unsigned int>(v34, (unsigned int *)&v102);
        if (!v39 || *((unsigned __int16 *)v39 + 20) != *((unsigned __int16 *)v38 + 16))
        {
          *(void *)&long long v96 = v20;
          health_algorithms::PPGProcessor::make_processor(v33, (uint64_t)v38, v7);
        }
        v40 = (unsigned char *)v39[4];
        uint64_t v41 = *(void *)v38;
        DWORD2(v96) = *((_DWORD *)v38 + 2);
        *(void *)&long long v96 = v41;
        WORD6(v96) = *((_WORD *)v38 + 17);
        LODWORD(v4std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = health_algorithms::tia_gain_table[v38[41]];
        long long v98 = v113;
        long long v99 = v114;
        char v101 = BYTE4(v94);
        LODWORD(v97) = v41;
        int v100 = v94;
        hal9000::SignalProcessor::process(v40, (uint64_t)&v96, (uint64_t)&v102);
        __int16 v42 = health_algorithms::wavelength_table[health_algorithms::led_to_wavelength_index(v7, v38[44])];
        LOWORD(v96) = v42;
        *((void *)&v96 + std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = v38;
        uint64_t v43 = *(unsigned int *)(v37 + 320);
        if (v43 == -1) {
          std::__throw_bad_variant_access[abi:ne180100]();
        }
        v119 = &v96;
        float v44 = ((float (*)(long long **, uint64_t))off_26D4E4128[v43])(&v119, v37);
        double v45 = *((double *)v38 + 3);
        __int16 v95 = v42;
        uint64_t v46 = v37;
        if (v93)
        {
          double v47 = v45 * 1953125.0;
          uint64_t v48 = (__PAIR128__((uint64_t)(v47 * 0.015625), *(unint64_t *)&v47)
               - COERCE_UNSIGNED_INT64((double)(uint64_t)(v47 * 0.015625) * 64.0)) >> 64;
          double v49 = v47 - (double)v48 * 64.0;
          double v50 = (double)(v48 + 1) * 64.0;
        }
        else
        {
          double v47 = v45 * 125.0;
          uint64_t v48 = (__PAIR128__((uint64_t)(v47 / 3.0), *(unint64_t *)&v47)
               - COERCE_UNSIGNED_INT64((double)(uint64_t)(v47 / 3.0) * 3.0)) >> 64;
          double v49 = v47 - (double)v48 * 3.0;
          double v50 = (double)(v48 + 1) * 3.0;
        }
        double v51 = v50 - v47;
        if (v48) {
          uint64_t v52 = v48 + 1;
        }
        else {
          uint64_t v52 = v48;
        }
        if (v49 == v51) {
          int v53 = 0;
        }
        else {
          int v53 = -127;
        }
        if (v49 > v51) {
          int v53 = 1;
        }
        if (v49 < v51) {
          int v53 = -1;
        }
        if (v49 > v51) {
          uint64_t v52 = v48 + 1;
        }
        if (v53 >= 0 || v53 == -127) {
          uint64_t v48 = v52;
        }
        uint64_t v55 = v20 - v48;
        unsigned __int8 v56 = v38[44];
        unsigned __int8 v57 = v38[42];
        unsigned __int8 v58 = v38[45];
        __int16 v59 = *((_WORD *)v38 + 16);
        LODWORD(v11std::__function::__value_func<BOOL ()(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,double)>::~__value_func[abi:ne180100]((void *)this + 9) = v102;
        BYTE4(v11std::__function::__value_func<BOOL ()(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,double)>::~__value_func[abi:ne180100]((void *)this + 9) = BYTE4(v102);
        char v60 = v103;
        char v61 = v104;
        *(_DWORD *)((char *)&v96 + 2) = v105;
        unint64_t v62 = ((unint64_t)v107 << 24) | ((unint64_t)v108 << 56);
        BYTE6(v96) = v106;
        unint64_t v63 = ((unint64_t)v109 << 24) | ((unint64_t)v110 << 56);
        unint64_t v64 = ((unint64_t)v111 << 24) | ((unint64_t)v112 << 56);
        v65 = (char *)v3[1];
        v66 = (char *)v3[2];
        if (v65 >= v66)
        {
          char v88 = v56;
          __int16 v89 = v59;
          v68 = *v3;
          uint64_t v69 = (v65 - (unsigned char *)*v3) >> 6;
          unint64_t v70 = v69 + 1;
          if ((unint64_t)(v69 + 1) >> 58) {
            std::vector<mimosa::OpticalSampleV1>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v71 = v55;
          uint64_t v72 = v66 - v68;
          if (v72 >> 5 > v70) {
            unint64_t v70 = v72 >> 5;
          }
          if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFC0) {
            unint64_t v73 = 0x3FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v73 = v70;
          }
          if (v73) {
            v74 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<health_algorithms::PPGProcessor::PPGOutputSignal>>(v84, v73);
          }
          else {
            v74 = 0;
          }
          v75 = &v74[64 * v69];
          *(void *)v75 = v71;
          v75[8] = v88;
          v75[9] = v57;
          v75[10] = v58;
          *((_WORD *)v75 + 6) = v89;
          *((_WORD *)v75 + 7) = v95;
          *((float *)v75 + 4) = v44;
          *((_DWORD *)v75 + std::__function::__value_func<BOOL ()(mimosa::Metadata const&)>::~__value_func[abi:ne180100]((void *)this + 5) = v119;
          v75[24] = BYTE4(v119);
          v75[28] = v60;
          v75[29] = v61;
          *(_DWORD *)(v75 + 30) = v96;
          *(_DWORD *)(v75 + 33) = *(_DWORD *)((char *)&v96 + 3);
          *(void *)(v75 + 37) = v62;
          *(void *)(v75 + 4std::__function::__value_func<BOOL ()(mimosa::Metadata const&)>::~__value_func[abi:ne180100]((void *)this + 5) = v63;
          *(void *)(v75 + 53) = v64;
          int v3 = v86;
          v77 = (char *)*v86;
          v76 = (char *)v86[1];
          v78 = v75;
          if (v76 == *v86)
          {
            uint64_t v37 = v85;
            v33 = (uint64_t *)v87;
            int v7 = v91;
            v34 = (void *)(v87 + 16);
            uint64_t v20 = v90;
          }
          else
          {
            uint64_t v37 = v85;
            v33 = (uint64_t *)v87;
            int v7 = v91;
            v34 = (void *)(v87 + 16);
            uint64_t v20 = v90;
            do
            {
              long long v79 = *((_OWORD *)v76 - 4);
              long long v80 = *((_OWORD *)v76 - 3);
              long long v81 = *((_OWORD *)v76 - 1);
              *((_OWORD *)v78 - 2) = *((_OWORD *)v76 - 2);
              *((_OWORD *)v78 - std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = v81;
              *((_OWORD *)v78 - 4) = v79;
              *((_OWORD *)v78 - 3) = v80;
              v78 -= 64;
              v76 -= 64;
            }
            while (v76 != v77);
            v76 = v77;
          }
          v67 = v75 + 64;
          *v86 = v78;
          v86[1] = v75 + 64;
          v86[2] = &v74[64 * v73];
          if (v76) {
            operator delete(v76);
          }
        }
        else
        {
          *(void *)v65 = v55;
          v65[8] = v56;
          v65[9] = v57;
          v65[10] = v58;
          *((_WORD *)v65 + 6) = v59;
          *((_WORD *)v65 + 7) = v95;
          *((float *)v65 + 4) = v44;
          *((_DWORD *)v65 + std::__function::__value_func<BOOL ()(mimosa::Metadata const&)>::~__value_func[abi:ne180100]((void *)this + 5) = v119;
          v65[24] = BYTE4(v119);
          v65[28] = v60;
          v65[29] = v61;
          *(_DWORD *)(v65 + 30) = v96;
          *(_DWORD *)(v65 + 33) = *(_DWORD *)((char *)&v96 + 3);
          *(void *)(v65 + 37) = v62;
          *(void *)(v65 + 4std::__function::__value_func<BOOL ()(mimosa::Metadata const&)>::~__value_func[abi:ne180100]((void *)this + 5) = v63;
          v67 = v65 + 64;
          *(void *)(v65 + 53) = v64;
          int v7 = v91;
          v34 = (void *)(v87 + 16);
          uint64_t v20 = v90;
          uint64_t v37 = v46;
        }
        v3[1] = v67;
        v38 += 56;
      }
      while (v38 != v92);
    }
    health_algorithms::PPGProcessor::compute_accel_output((uint64_t)v33, v37, (void **)&v96);
    v82 = *v83;
    if (*v83)
    {
      v3[4] = v82;
      operator delete(v82);
      *v83 = 0;
      v83[1] = 0;
      v83[2] = 0;
    }
    *(_OWORD *)(v3 + 3) = v96;
    v3[5] = v97;
    if (v115)
    {
      v116 = v115;
      operator delete(v115);
    }
    if (v117)
    {
      v118 = v117;
      operator delete(v117);
    }
  }
}

void sub_22276A5D4(_Unwind_Exception *a1)
{
  uint64_t v4 = *(void **)(v2 - 176);
  if (v4)
  {
    *(void *)(v2 - 168) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)(v2 - 152);
  if (v5)
  {
    *(void *)(v2 - 144) = v5;
    operator delete(v5);
  }
  health_algorithms::PPGProcessor::Output::~Output(v1);
  _Unwind_Resume(a1);
}

BOOL health_algorithms::PPGProcessor::RawPPGDatum::invalid_for_reasons_other_than_saturation(health_algorithms::PPGProcessor::RawPPGDatum *this)
{
  return (*((_WORD *)this + 17) & 0xFFF7) != 0;
}

uint64_t health_algorithms::PPGProcessor::RawPPGDatum::key(health_algorithms::PPGProcessor::RawPPGDatum *this)
{
  return (*((unsigned __int8 *)this + 44) << 16) | (*((unsigned __int8 *)this + 42) << 8) | *((unsigned __int8 *)this + 45);
}

void health_algorithms::PPGProcessor::compute_accel_output(uint64_t a1@<X0>, uint64_t a2@<X1>, void **a3@<X8>)
{
  v52[0] = 0;
  v52[1] = 0;
  int v53 = 0;
  uint64_t v4 = *(unsigned int *)(a2 + 320);
  if (v4 == -1) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  v49[0] = &v54;
  uint64_t v7 = ((uint64_t (*)(void *))off_26D4E4160[v4])(v49);
  unsigned __int16 v8 = v7;
  if ((v7 & 0xFF0000) != 0)
  {
    uint64_t v9 = *(unsigned int *)(a2 + 320);
    if (v9 == -1) {
      std::__throw_bad_variant_access[abi:ne180100]();
    }
    v54 = &v48;
    ((void (*)(void *__return_ptr, char **, uint64_t))off_26D4E4198[v9])(v49, &v54, a2);
    uint64_t v47 = a1;
    std::vector<health_algorithms::PPGProcessor::AccelOutputSignal>::reserve(v52, 0xCCCCCCCCCCCCCCCDLL * (((char *)v51 - (unsigned char *)__p) >> 2));
    int v10 = (int32x2_t *)__p;
    unint64_t v11 = v51;
    if (__p == v51)
    {
LABEL_27:
      BOOL v25 = (char *)v52[0];
      if (v52[0] == v52[1])
      {
        int8x16_t v29 = v52[0];
      }
      else
      {
        unsigned __int16 v26 = v8;
        unsigned int v27 = *((unsigned __int16 *)v52[0] + 4);
        if (v27 >= v8) {
          unint64_t v28 = v27 / v8;
        }
        else {
          unint64_t v28 = 1;
        }
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v52[1] - (char *)v52[0]) >> 3) > v28)
        {
          long long v30 = (char *)v52[1] - 24 * (int)v28;
          if (v52[0] != v30)
          {
            uint64_t v31 = -24 * -(int)v28;
            if (v52[1] != v30) {
              memmove(v52[0], (char *)v52[1] - 24 * (int)v28, -24 * -(int)v28);
            }
            v52[1] = &v25[v31];
          }
        }
        uint64_t v32 = *(unsigned int *)(a2 + 320);
        if (v32 == -1) {
          std::__throw_bad_variant_access[abi:ne180100]();
        }
        v54 = &v48;
        if (((unsigned int (*)(char **, uint64_t))off_26D4E41D0[v32])(&v54, a2))
        {
          uint64_t v33 = 125 * v49[0] / 3 - (3 * (125 * v49[0] / 3) > 125 * v49[0]);
          uint64_t v34 = -3 * v33 + 125 * v49[0];
          uint64_t v35 = 3 * (v33 + 1) - 125 * v49[0];
          uint64_t v36 = v33;
          if (v34 >= v35)
          {
            uint64_t v36 = v33 + 1;
            if (v34 == v35)
            {
              if (v33) {
                uint64_t v36 = v33 + 1;
              }
              else {
                uint64_t v36 = 125 * v49[0] / 3 - (3 * (125 * v49[0] / 3) > 125 * v49[0]);
              }
            }
          }
        }
        else
        {
          uint64_t v37 = 1953125 * v49[0];
          uint64_t v38 = 1953125 * v49[0] + 63;
          if (1953125 * v49[0] >= 0) {
            uint64_t v38 = 1953125 * v49[0];
          }
          uint64_t v39 = (v38 >> 6) - ((uint64_t)(v38 & 0xFFFFFFFFFFFFFFC0) > v37);
          uint64_t v40 = v39 + 1;
          uint64_t v41 = v37 - (v39 << 6);
          uint64_t v42 = -1953125 * v49[0] + ((v39 + 1) << 6);
          if ((v39 & 1) == 0) {
            uint64_t v40 = v39;
          }
          BOOL v43 = v41 < v42;
          if (v41 == v42) {
            uint64_t v36 = v40;
          }
          else {
            uint64_t v36 = v39 + 1;
          }
          if (v43) {
            uint64_t v36 = v39;
          }
        }
        BOOL v25 = (char *)v52[0];
        int8x16_t v29 = v52[1];
        int64_t v44 = (char *)v52[1] - (char *)v52[0];
        if (v52[1] != v52[0])
        {
          uint64_t v45 = v36;
          uint64_t v46 = (char *)v52[1];
          do
          {
            *((void *)v46 - 3) = v45;
            v46 -= 24;
            v45 -= 0x3B9ACA00 / v27;
          }
          while (v46 != v25);
        }
        if (v44 == 24) {
          *((_WORD *)v25 + 4) = v26;
        }
        if (!*(unsigned char *)(v47 + 160)) {
          *(unsigned char *)(v47 + 160) = 1;
        }
        *(void *)(v47 + 152) = v36;
      }
      *a3 = v25;
      a3[1] = v29;
      a3[2] = v53;
      a3 = v52;
    }
    else
    {
      float32x2_t v12 = (float32x2_t)vdup_n_s32(0x37800000u);
      while (1)
      {
        if (v10[2].i8[0] == 1)
        {
          if (v10[1].i16[2] || !v10[1].i16[3]) {
            break;
          }
          uint64_t v13 = v52[1];
          if (v52[1] >= v53)
          {
            unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * (((char *)v52[1] - (char *)v52[0]) >> 3);
            unint64_t v16 = v15 + 1;
            if (v15 + 1 > 0xAAAAAAAAAAAAAAALL) {
              std::vector<mimosa::OpticalSampleV1>::__throw_length_error[abi:ne180100]();
            }
            if (0x5555555555555556 * ((v53 - (char *)v52[0]) >> 3) > v16) {
              unint64_t v16 = 0x5555555555555556 * ((v53 - (char *)v52[0]) >> 3);
            }
            if (0xAAAAAAAAAAAAAAABLL * ((v53 - (char *)v52[0]) >> 3) >= 0x555555555555555) {
              unint64_t v17 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v17 = v16;
            }
            if (v17) {
              uint64_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<health_algorithms::PPGProcessor::AccelOutputSignal>>((uint64_t)&v53, v17);
            }
            else {
              uint64_t v18 = 0;
            }
            uint64_t v19 = &v18[24 * v15];
            *(void *)uint64_t v19 = 0;
            *((void *)v19 + std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = 0;
            *((void *)v19 + 2) = 0;
            __int16 v21 = (char *)v52[0];
            uint64_t v20 = (char *)v52[1];
            __int16 v22 = v19;
            if (v52[1] != v52[0])
            {
              do
              {
                long long v23 = *(_OWORD *)(v20 - 24);
                *((void *)v22 - std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = *((void *)v20 - 1);
                *(_OWORD *)(v22 - 24) = v23;
                v22 -= 24;
                v20 -= 24;
              }
              while (v20 != v21);
              uint64_t v20 = (char *)v52[0];
            }
            uint64_t v14 = v19 + 24;
            v52[0] = v22;
            v52[1] = v19 + 24;
            int v53 = &v18[24 * v17];
            if (v20) {
              operator delete(v20);
            }
          }
          else
          {
            *(void *)v52[1] = 0;
            v13[1] = 0;
            uint64_t v14 = (char *)(v13 + 3);
            v13[2] = 0;
          }
          v52[1] = v14;
          *(float32x2_t *)(v14 - 12) = vmul_f32(vcvt_f32_s32(*v10), v12);
          *((float *)v14 - std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = (float)v10[1].i32[0] * 0.000015259;
          int v24 = v10[1].u16[3];
          *((_WORD *)v14 - 8) = v24;
          if (*((unsigned __int16 *)v52[0] + 4) != v24) {
            break;
          }
        }
        int v10 = (int32x2_t *)((char *)v10 + 20);
        if (v10 == v11) {
          goto LABEL_27;
        }
      }
    }
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    if (__p)
    {
      double v51 = (int32x2_t *)__p;
      operator delete(__p);
    }
    if (v52[0])
    {
      v52[1] = v52[0];
      operator delete(v52[0]);
    }
  }
  else
  {
    *(_OWORD *)a3 = *(_OWORD *)v52;
    a3[2] = v53;
  }
}

void sub_22276AB38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, void *a17, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  if (a17) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<health_algorithms::PPGProcessor::AccelOutputSignal>::reserve(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (unsigned char *)*a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<mimosa::OpticalSampleV1>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = ((unsigned char *)a1[1] - (unsigned char *)*a1) / 24;
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<health_algorithms::PPGProcessor::AccelOutputSignal>>(v3, a2);
    uint64_t v7 = &v6[24 * v5];
    uint64_t v9 = &v6[24 * v8];
    unint64_t v11 = (char *)*a1;
    int v10 = (char *)a1[1];
    float32x2_t v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        long long v13 = *(_OWORD *)(v10 - 24);
        *((void *)v12 - std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = *((void *)v10 - 1);
        *(_OWORD *)(v12 - 24) = v13;
        v12 -= 24;
        v10 -= 24;
      }
      while (v10 != v11);
      int v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<health_algorithms::PPGProcessor::RawPPGDatum>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x492492492492493) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(56 * a2);
}

void ***std::back_insert_iterator<std::vector<health_algorithms::PPGProcessor::RawPPGDatum>>::operator=[abi:ne180100](void ***a1, long long *a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = (char *)(*a1)[1];
  uint64_t v6 = *a1;
  uint64_t v9 = (char *)v6[2];
  uint64_t v7 = (uint64_t)(v6 + 2);
  uint64_t v8 = v9;
  if (v5 >= v9)
  {
    uint64_t v14 = 0x6DB6DB6DB6DB6DB7 * ((v5 - (unsigned char *)*v4) >> 3);
    unint64_t v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) > 0x492492492492492) {
      std::vector<mimosa::OpticalSampleV1>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v16 = 0x6DB6DB6DB6DB6DB7 * ((v8 - (unsigned char *)*v4) >> 3);
    if (2 * v16 > v15) {
      unint64_t v15 = 2 * v16;
    }
    if (v16 >= 0x249249249249249) {
      unint64_t v17 = 0x492492492492492;
    }
    else {
      unint64_t v17 = v15;
    }
    if (v17) {
      uint64_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<health_algorithms::PPGProcessor::RawPPGDatum>>(v7, v17);
    }
    else {
      uint64_t v18 = 0;
    }
    uint64_t v19 = &v18[56 * v14];
    uint64_t v20 = &v18[56 * v17];
    long long v21 = *a2;
    long long v22 = a2[1];
    long long v23 = a2[2];
    *((void *)v19 + 6) = *((void *)a2 + 6);
    *((_OWORD *)v19 + std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = v22;
    *((_OWORD *)v19 + 2) = v23;
    *(_OWORD *)uint64_t v19 = v21;
    long long v13 = v19 + 56;
    BOOL v25 = (char *)*v4;
    int v24 = (char *)v4[1];
    if (v24 != *v4)
    {
      do
      {
        long long v26 = *(_OWORD *)(v24 - 56);
        long long v27 = *(_OWORD *)(v24 - 40);
        long long v28 = *(_OWORD *)(v24 - 24);
        *(v19 - 8) = *(v24 - 8);
        *(_OWORD *)(v19 - 24) = v28;
        *(_OWORD *)(v19 - 40) = v27;
        *(_OWORD *)(v19 - 56) = v26;
        v19 -= 56;
        v24 -= 56;
      }
      while (v24 != v25);
      int v24 = (char *)*v4;
    }
    unsigned char *v4 = v19;
    v4[1] = v13;
    v4[2] = v20;
    if (v24) {
      operator delete(v24);
    }
  }
  else
  {
    long long v10 = *a2;
    long long v11 = a2[1];
    long long v12 = a2[2];
    *((void *)v5 + 6) = *((void *)a2 + 6);
    *((_OWORD *)v5 + std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = v11;
    *((_OWORD *)v5 + 2) = v12;
    *(_OWORD *)uint64_t v5 = v10;
    long long v13 = v5 + 56;
  }
  v4[1] = v13;
  return a1;
}

uint64_t health_algorithms::index_for_tia_gain(health_algorithms *this)
{
  if ((int)this > 119999)
  {
    if ((int)this > 239999)
    {
      if (this == 240000)
      {
        return 6;
      }
      else
      {
        if (this != 480000) {
          goto LABEL_20;
        }
        return 7;
      }
    }
    else if (this == 120000)
    {
      return 4;
    }
    else
    {
      if (this != 180000) {
        goto LABEL_20;
      }
      return 5;
    }
  }
  else if ((int)this > 59999)
  {
    if (this == 60000)
    {
      return 2;
    }
    else
    {
      if (this != 90000) {
        goto LABEL_20;
      }
      return 3;
    }
  }
  else
  {
    if (this != 10000)
    {
      if (this == 30000) {
        return 1;
      }
LABEL_20:
      health_algorithms::index_for_tia_gain();
    }
    return 0;
  }
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_2646269B8, MEMORY[0x263F8C068]);
}

void sub_22276AF5C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  float result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
  return result;
}

BOOL health_algorithms::is_light_path_redacted_for_gemstone_and_newer(health_algorithms *this)
{
  int v1 = (int)this;
  BOOL result = 1;
  if ((v1 - 89) > 0xE || ((1 << (v1 - 89)) & 0x7F85) == 0) {
    return (v1 - 188) < 8;
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<mimosa::Visitor<health_algorithms::determine_hardware_generation(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,std::optional<std::variant<mimosa::OpREv5,mimosa::OpREv6,mimosa::OpREv7>> const&)::$_0,health_algorithms::determine_hardware_generation(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,std::optional<std::variant<mimosa::OpREv5,mimosa::OpREv6,mimosa::OpREv7>> const&)::$_1,health_algorithms::determine_hardware_generation(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,std::optional<std::variant<mimosa::OpREv5,mimosa::OpREv6,mimosa::OpREv7>> const&)::$_2,health_algorithms::determine_hardware_generation(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,std::optional<std::variant<mimosa::OpREv5,mimosa::OpREv6,mimosa::OpREv7>> const&)::$_3,health_algorithms::determine_hardware_generation(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,std::optional<std::variant<mimosa::OpREv5,mimosa::OpREv6,mimosa::OpREv7>> const&)::$_4,health_algorithms::determine_hardware_generation(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,std::optional<std::variant<mimosa::OpREv5,mimosa::OpREv6,mimosa::OpREv7>> const&)::$_5,health_algorithms::determine_hardware_generation(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,std::optional<std::variant<mimosa::OpREv5,mimosa::OpREv6,mimosa::OpREv7>> const&)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<mimosa::Visitor<health_algorithms::determine_hardware_generation(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,std::optional<std::variant<mimosa::OpREv5,mimosa::OpREv6,mimosa::OpREv7>> const&)::$_0,health_algorithms::determine_hardware_generation(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,std::optional<std::variant<mimosa::OpREv5,mimosa::OpREv6,mimosa::OpREv7>> const&)::$_1,health_algorithms::determine_hardware_generation(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,std::optional<std::variant<mimosa::OpREv5,mimosa::OpREv6,mimosa::OpREv7>> const&)::$_2,health_algorithms::determine_hardware_generation(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,std::optional<std::variant<mimosa::OpREv5,mimosa::OpREv6,mimosa::OpREv7>> const&)::$_3,health_algorithms::determine_hardware_generation(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,std::optional<std::variant<mimosa::OpREv5,mimosa::OpREv6,mimosa::OpREv7>> const&)::$_4,health_algorithms::determine_hardware_generation(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,std::optional<std::variant<mimosa::OpREv5,mimosa::OpREv6,mimosa::OpREv7>> const&)::$_5,health_algorithms::determine_hardware_generation(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,std::optional<std::variant<mimosa::OpREv5,mimosa::OpREv6,mimosa::OpREv7>> const&)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&>()
{
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<mimosa::Visitor<health_algorithms::determine_hardware_generation(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,std::optional<std::variant<mimosa::OpREv5,mimosa::OpREv6,mimosa::OpREv7>> const&)::$_0,health_algorithms::determine_hardware_generation(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,std::optional<std::variant<mimosa::OpREv5,mimosa::OpREv6,mimosa::OpREv7>> const&)::$_1,health_algorithms::determine_hardware_generation(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,std::optional<std::variant<mimosa::OpREv5,mimosa::OpREv6,mimosa::OpREv7>> const&)::$_2,health_algorithms::determine_hardware_generation(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,std::optional<std::variant<mimosa::OpREv5,mimosa::OpREv6,mimosa::OpREv7>> const&)::$_3,health_algorithms::determine_hardware_generation(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,std::optional<std::variant<mimosa::OpREv5,mimosa::OpREv6,mimosa::OpREv7>> const&)::$_4,health_algorithms::determine_hardware_generation(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,std::optional<std::variant<mimosa::OpREv5,mimosa::OpREv6,mimosa::OpREv7>> const&)::$_5,health_algorithms::determine_hardware_generation(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,std::optional<std::variant<mimosa::OpREv5,mimosa::OpREv6,mimosa::OpREv7>> const&)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<mimosa::Visitor<health_algorithms::determine_hardware_generation(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,std::optional<std::variant<mimosa::OpREv5,mimosa::OpREv6,mimosa::OpREv7>> const&)::$_0,health_algorithms::determine_hardware_generation(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,std::optional<std::variant<mimosa::OpREv5,mimosa::OpREv6,mimosa::OpREv7>> const&)::$_1,health_algorithms::determine_hardware_generation(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,std::optional<std::variant<mimosa::OpREv5,mimosa::OpREv6,mimosa::OpREv7>> const&)::$_2,health_algorithms::determine_hardware_generation(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,std::optional<std::variant<mimosa::OpREv5,mimosa::OpREv6,mimosa::OpREv7>> const&)::$_3,health_algorithms::determine_hardware_generation(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,std::optional<std::variant<mimosa::OpREv5,mimosa::OpREv6,mimosa::OpREv7>> const&)::$_4,health_algorithms::determine_hardware_generation(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,std::optional<std::variant<mimosa::OpREv5,mimosa::OpREv6,mimosa::OpREv7>> const&)::$_5,health_algorithms::determine_hardware_generation(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,std::optional<std::variant<mimosa::OpREv5,mimosa::OpREv6,mimosa::OpREv7>> const&)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&>()
{
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<mimosa::Visitor<health_algorithms::determine_hardware_generation(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,std::optional<std::variant<mimosa::OpREv5,mimosa::OpREv6,mimosa::OpREv7>> const&)::$_0,health_algorithms::determine_hardware_generation(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,std::optional<std::variant<mimosa::OpREv5,mimosa::OpREv6,mimosa::OpREv7>> const&)::$_1,health_algorithms::determine_hardware_generation(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,std::optional<std::variant<mimosa::OpREv5,mimosa::OpREv6,mimosa::OpREv7>> const&)::$_2,health_algorithms::determine_hardware_generation(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,std::optional<std::variant<mimosa::OpREv5,mimosa::OpREv6,mimosa::OpREv7>> const&)::$_3,health_algorithms::determine_hardware_generation(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,std::optional<std::variant<mimosa::OpREv5,mimosa::OpREv6,mimosa::OpREv7>> const&)::$_4,health_algorithms::determine_hardware_generation(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,std::optional<std::variant<mimosa::OpREv5,mimosa::OpREv6,mimosa::OpREv7>> const&)::$_5,health_algorithms::determine_hardware_generation(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,std::optional<std::variant<mimosa::OpREv5,mimosa::OpREv6,mimosa::OpREv7>> const&)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&>()
{
  return 2;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<mimosa::Visitor<health_algorithms::determine_hardware_generation(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,std::optional<std::variant<mimosa::OpREv5,mimosa::OpREv6,mimosa::OpREv7>> const&)::$_0,health_algorithms::determine_hardware_generation(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,std::optional<std::variant<mimosa::OpREv5,mimosa::OpREv6,mimosa::OpREv7>> const&)::$_1,health_algorithms::determine_hardware_generation(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,std::optional<std::variant<mimosa::OpREv5,mimosa::OpREv6,mimosa::OpREv7>> const&)::$_2,health_algorithms::determine_hardware_generation(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,std::optional<std::variant<mimosa::OpREv5,mimosa::OpREv6,mimosa::OpREv7>> const&)::$_3,health_algorithms::determine_hardware_generation(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,std::optional<std::variant<mimosa::OpREv5,mimosa::OpREv6,mimosa::OpREv7>> const&)::$_4,health_algorithms::determine_hardware_generation(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,std::optional<std::variant<mimosa::OpREv5,mimosa::OpREv6,mimosa::OpREv7>> const&)::$_5,health_algorithms::determine_hardware_generation(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,std::optional<std::variant<mimosa::OpREv5,mimosa::OpREv6,mimosa::OpREv7>> const&)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&>()
{
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<mimosa::Visitor<health_algorithms::determine_hardware_generation(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,std::optional<std::variant<mimosa::OpREv5,mimosa::OpREv6,mimosa::OpREv7>> const&)::$_0,health_algorithms::determine_hardware_generation(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,std::optional<std::variant<mimosa::OpREv5,mimosa::OpREv6,mimosa::OpREv7>> const&)::$_1,health_algorithms::determine_hardware_generation(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,std::optional<std::variant<mimosa::OpREv5,mimosa::OpREv6,mimosa::OpREv7>> const&)::$_2,health_algorithms::determine_hardware_generation(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,std::optional<std::variant<mimosa::OpREv5,mimosa::OpREv6,mimosa::OpREv7>> const&)::$_3,health_algorithms::determine_hardware_generation(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,std::optional<std::variant<mimosa::OpREv5,mimosa::OpREv6,mimosa::OpREv7>> const&)::$_4,health_algorithms::determine_hardware_generation(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,std::optional<std::variant<mimosa::OpREv5,mimosa::OpREv6,mimosa::OpREv7>> const&)::$_5,health_algorithms::determine_hardware_generation(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,std::optional<std::variant<mimosa::OpREv5,mimosa::OpREv6,mimosa::OpREv7>> const&)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&>(uint64_t **a1)
{
  uint64_t v1 = **a1;
  if (*(unsigned char *)(v1 + 1708) && *(_DWORD *)(v1 + 1704) == 2) {
    return 3;
  }
  else {
    return 2;
  }
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<health_algorithms::PPGProcessor::process_packet(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&>(uint64_t a1, uint64_t a2)
{
  return *(unsigned char *)(a2 + 12) == 0;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<health_algorithms::PPGProcessor::process_packet(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&>(uint64_t a1, uint64_t a2)
{
  return *(unsigned char *)(a2 + 12) == 0;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<health_algorithms::PPGProcessor::process_packet(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&>(uint64_t a1, uint64_t a2)
{
  return *(unsigned char *)(a2 + 12) == 0;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<health_algorithms::PPGProcessor::process_packet(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&>(uint64_t a1, uint64_t a2)
{
  return *(unsigned char *)(a2 + 12) == 0;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<health_algorithms::PPGProcessor::process_packet(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&>(uint64_t a1, uint64_t a2)
{
  return *(unsigned char *)(a2 + 12) == 0;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<health_algorithms::PPGProcessor::process_packet(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&>(uint64_t a1, uint64_t a2)
{
  return *(unsigned char *)(a2 + 12) == 0;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<health_algorithms::PPGProcessor::process_packet(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&>(uint64_t a1, uint64_t a2)
{
  return *(unsigned char *)(a2 + 12) == 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<health_algorithms::PPGProcessor::process_packet(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&)::$_1> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<health_algorithms::PPGProcessor::process_packet(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&)::$_1> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<health_algorithms::PPGProcessor::process_packet(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&)::$_1> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<health_algorithms::PPGProcessor::process_packet(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&)::$_1> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<health_algorithms::PPGProcessor::process_packet(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&)::$_1> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
}

void std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<health_algorithms::PPGProcessor::process_packet(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&)::$_1> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
}

void std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<health_algorithms::PPGProcessor::process_packet(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&)::$_1> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<health_algorithms::PPGProcessor::process_packet(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&)::$_3> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<health_algorithms::PPGProcessor::process_packet(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&)::$_3> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&>(uint64_t a1, uint64_t a2)
{
  if (*(_WORD *)(a2 + 208) == 1) {
    return COERCE_UNSIGNED_INT((float)*(__int16 *)(a2 + 210) * 0.0078125) | 0x100000000;
  }
  else {
    return 0;
  }
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<health_algorithms::PPGProcessor::process_packet(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&)::$_3> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<health_algorithms::PPGProcessor::process_packet(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&)::$_3> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&>(uint64_t a1, uint64_t a2)
{
  if (*(_WORD *)(a2 + 216) == 1) {
    return COERCE_UNSIGNED_INT((float)*(__int16 *)(a2 + 218) * 0.0078125) | 0x100000000;
  }
  else {
    return 0;
  }
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<health_algorithms::PPGProcessor::process_packet(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&)::$_3> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&>(uint64_t a1, uint64_t a2)
{
  if (*(_WORD *)(a2 + 216) == 1) {
    return COERCE_UNSIGNED_INT((float)*(__int16 *)(a2 + 218) * 0.0078125) | 0x100000000;
  }
  else {
    return 0;
  }
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<health_algorithms::PPGProcessor::process_packet(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&)::$_3> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&>(uint64_t a1, uint64_t a2)
{
  if (*(_WORD *)(a2 + 192) == 1) {
    return COERCE_UNSIGNED_INT((float)*(__int16 *)(a2 + 194) * 0.0078125) | 0x100000000;
  }
  else {
    return 0;
  }
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<health_algorithms::PPGProcessor::process_packet(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&)::$_3> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&>(uint64_t a1, uint64_t a2)
{
  if (*(_WORD *)(a2 + 192) == 1) {
    return COERCE_UNSIGNED_INT((float)*(__int16 *)(a2 + 194) * 0.0078125) | 0x100000000;
  }
  else {
    return 0;
  }
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<health_algorithms::PPGProcessor::process_packet(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&)::$_4> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&>(uint64_t a1, uint64_t a2)
{
  double v2 = (double)*(unint64_t *)(a2 + 16);
  if (*(unsigned char *)(a2 + 12))
  {
    *(double *)&unint64_t v3 = v2 * 125.0;
    uint64_t v4 = (__PAIR128__((uint64_t)(*(double *)&v3 / 3.0), v3)
        - COERCE_UNSIGNED_INT64((double)(uint64_t)(*(double *)&v3 / 3.0) * 3.0)) >> 64;
    double v5 = *(double *)&v3 - (double)v4 * 3.0;
    double v6 = (double)(v4 + 1) * 3.0 - *(double *)&v3;
    if (v4) {
      uint64_t v7 = v4 + 1;
    }
    else {
      uint64_t v7 = v4;
    }
    BOOL v8 = v5 == v6;
    BOOL v9 = v5 < v6;
    BOOL v10 = v5 <= v6;
  }
  else
  {
    *(double *)&unint64_t v11 = v2 * 1953125.0;
    uint64_t v4 = (__PAIR128__((uint64_t)(*(double *)&v11 * 0.015625), v11)
        - COERCE_UNSIGNED_INT64((double)(uint64_t)(*(double *)&v11 * 0.015625) * 64.0)) >> 64;
    double v12 = *(double *)&v11 - (double)v4 * 64.0;
    double v13 = (double)(v4 + 1) * 64.0 - *(double *)&v11;
    if (v4) {
      uint64_t v7 = v4 + 1;
    }
    else {
      uint64_t v7 = v4;
    }
    BOOL v8 = v12 == v13;
    BOOL v9 = v12 < v13;
    BOOL v10 = v12 <= v13;
  }
  if (v8) {
    int v14 = 0;
  }
  else {
    int v14 = -127;
  }
  if (!v10) {
    int v14 = 1;
  }
  if (v9) {
    int v14 = -1;
  }
  if (!v10) {
    uint64_t v7 = v4 + 1;
  }
  if (v14 >= 0 || v14 == -127) {
    return v7;
  }
  else {
    return v4;
  }
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<health_algorithms::PPGProcessor::process_packet(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&)::$_4> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&>(uint64_t a1, uint64_t a2)
{
  double v2 = (double)*(unint64_t *)(a2 + 16);
  if (*(unsigned char *)(a2 + 12))
  {
    *(double *)&unint64_t v3 = v2 * 125.0;
    uint64_t v4 = (__PAIR128__((uint64_t)(*(double *)&v3 / 3.0), v3)
        - COERCE_UNSIGNED_INT64((double)(uint64_t)(*(double *)&v3 / 3.0) * 3.0)) >> 64;
    double v5 = *(double *)&v3 - (double)v4 * 3.0;
    double v6 = (double)(v4 + 1) * 3.0 - *(double *)&v3;
    if (v4) {
      uint64_t v7 = v4 + 1;
    }
    else {
      uint64_t v7 = v4;
    }
    BOOL v8 = v5 == v6;
    BOOL v9 = v5 < v6;
    BOOL v10 = v5 <= v6;
  }
  else
  {
    *(double *)&unint64_t v11 = v2 * 1953125.0;
    uint64_t v4 = (__PAIR128__((uint64_t)(*(double *)&v11 * 0.015625), v11)
        - COERCE_UNSIGNED_INT64((double)(uint64_t)(*(double *)&v11 * 0.015625) * 64.0)) >> 64;
    double v12 = *(double *)&v11 - (double)v4 * 64.0;
    double v13 = (double)(v4 + 1) * 64.0 - *(double *)&v11;
    if (v4) {
      uint64_t v7 = v4 + 1;
    }
    else {
      uint64_t v7 = v4;
    }
    BOOL v8 = v12 == v13;
    BOOL v9 = v12 < v13;
    BOOL v10 = v12 <= v13;
  }
  if (v8) {
    int v14 = 0;
  }
  else {
    int v14 = -127;
  }
  if (!v10) {
    int v14 = 1;
  }
  if (v9) {
    int v14 = -1;
  }
  if (!v10) {
    uint64_t v7 = v4 + 1;
  }
  if (v14 >= 0 || v14 == -127) {
    return v7;
  }
  else {
    return v4;
  }
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<health_algorithms::PPGProcessor::process_packet(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&)::$_4> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&>(uint64_t a1, uint64_t a2)
{
  double v2 = (double)*(unint64_t *)(a2 + 16);
  if (*(unsigned char *)(a2 + 12))
  {
    *(double *)&unint64_t v3 = v2 * 125.0;
    uint64_t v4 = (__PAIR128__((uint64_t)(*(double *)&v3 / 3.0), v3)
        - COERCE_UNSIGNED_INT64((double)(uint64_t)(*(double *)&v3 / 3.0) * 3.0)) >> 64;
    double v5 = *(double *)&v3 - (double)v4 * 3.0;
    double v6 = (double)(v4 + 1) * 3.0 - *(double *)&v3;
    if (v4) {
      uint64_t v7 = v4 + 1;
    }
    else {
      uint64_t v7 = v4;
    }
    BOOL v8 = v5 == v6;
    BOOL v9 = v5 < v6;
    BOOL v10 = v5 <= v6;
  }
  else
  {
    *(double *)&unint64_t v11 = v2 * 1953125.0;
    uint64_t v4 = (__PAIR128__((uint64_t)(*(double *)&v11 * 0.015625), v11)
        - COERCE_UNSIGNED_INT64((double)(uint64_t)(*(double *)&v11 * 0.015625) * 64.0)) >> 64;
    double v12 = *(double *)&v11 - (double)v4 * 64.0;
    double v13 = (double)(v4 + 1) * 64.0 - *(double *)&v11;
    if (v4) {
      uint64_t v7 = v4 + 1;
    }
    else {
      uint64_t v7 = v4;
    }
    BOOL v8 = v12 == v13;
    BOOL v9 = v12 < v13;
    BOOL v10 = v12 <= v13;
  }
  if (v8) {
    int v14 = 0;
  }
  else {
    int v14 = -127;
  }
  if (!v10) {
    int v14 = 1;
  }
  if (v9) {
    int v14 = -1;
  }
  if (!v10) {
    uint64_t v7 = v4 + 1;
  }
  if (v14 >= 0 || v14 == -127) {
    return v7;
  }
  else {
    return v4;
  }
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<health_algorithms::PPGProcessor::process_packet(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&)::$_4> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&>(uint64_t a1, uint64_t a2)
{
  double v2 = (double)*(unint64_t *)(a2 + 16);
  if (*(unsigned char *)(a2 + 12))
  {
    *(double *)&unint64_t v3 = v2 * 125.0;
    uint64_t v4 = (__PAIR128__((uint64_t)(*(double *)&v3 / 3.0), v3)
        - COERCE_UNSIGNED_INT64((double)(uint64_t)(*(double *)&v3 / 3.0) * 3.0)) >> 64;
    double v5 = *(double *)&v3 - (double)v4 * 3.0;
    double v6 = (double)(v4 + 1) * 3.0 - *(double *)&v3;
    if (v4) {
      uint64_t v7 = v4 + 1;
    }
    else {
      uint64_t v7 = v4;
    }
    BOOL v8 = v5 == v6;
    BOOL v9 = v5 < v6;
    BOOL v10 = v5 <= v6;
  }
  else
  {
    *(double *)&unint64_t v11 = v2 * 1953125.0;
    uint64_t v4 = (__PAIR128__((uint64_t)(*(double *)&v11 * 0.015625), v11)
        - COERCE_UNSIGNED_INT64((double)(uint64_t)(*(double *)&v11 * 0.015625) * 64.0)) >> 64;
    double v12 = *(double *)&v11 - (double)v4 * 64.0;
    double v13 = (double)(v4 + 1) * 64.0 - *(double *)&v11;
    if (v4) {
      uint64_t v7 = v4 + 1;
    }
    else {
      uint64_t v7 = v4;
    }
    BOOL v8 = v12 == v13;
    BOOL v9 = v12 < v13;
    BOOL v10 = v12 <= v13;
  }
  if (v8) {
    int v14 = 0;
  }
  else {
    int v14 = -127;
  }
  if (!v10) {
    int v14 = 1;
  }
  if (v9) {
    int v14 = -1;
  }
  if (!v10) {
    uint64_t v7 = v4 + 1;
  }
  if (v14 >= 0 || v14 == -127) {
    return v7;
  }
  else {
    return v4;
  }
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<health_algorithms::PPGProcessor::process_packet(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&)::$_4> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&>(uint64_t a1, uint64_t a2)
{
  double v2 = (double)*(unint64_t *)(a2 + 16);
  if (*(unsigned char *)(a2 + 12))
  {
    *(double *)&unint64_t v3 = v2 * 125.0;
    uint64_t v4 = (__PAIR128__((uint64_t)(*(double *)&v3 / 3.0), v3)
        - COERCE_UNSIGNED_INT64((double)(uint64_t)(*(double *)&v3 / 3.0) * 3.0)) >> 64;
    double v5 = *(double *)&v3 - (double)v4 * 3.0;
    double v6 = (double)(v4 + 1) * 3.0 - *(double *)&v3;
    if (v4) {
      uint64_t v7 = v4 + 1;
    }
    else {
      uint64_t v7 = v4;
    }
    BOOL v8 = v5 == v6;
    BOOL v9 = v5 < v6;
    BOOL v10 = v5 <= v6;
  }
  else
  {
    *(double *)&unint64_t v11 = v2 * 1953125.0;
    uint64_t v4 = (__PAIR128__((uint64_t)(*(double *)&v11 * 0.015625), v11)
        - COERCE_UNSIGNED_INT64((double)(uint64_t)(*(double *)&v11 * 0.015625) * 64.0)) >> 64;
    double v12 = *(double *)&v11 - (double)v4 * 64.0;
    double v13 = (double)(v4 + 1) * 64.0 - *(double *)&v11;
    if (v4) {
      uint64_t v7 = v4 + 1;
    }
    else {
      uint64_t v7 = v4;
    }
    BOOL v8 = v12 == v13;
    BOOL v9 = v12 < v13;
    BOOL v10 = v12 <= v13;
  }
  if (v8) {
    int v14 = 0;
  }
  else {
    int v14 = -127;
  }
  if (!v10) {
    int v14 = 1;
  }
  if (v9) {
    int v14 = -1;
  }
  if (!v10) {
    uint64_t v7 = v4 + 1;
  }
  if (v14 >= 0 || v14 == -127) {
    return v7;
  }
  else {
    return v4;
  }
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<health_algorithms::PPGProcessor::process_packet(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&)::$_4> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&>(uint64_t a1, uint64_t a2)
{
  double v2 = (double)*(unint64_t *)(a2 + 16);
  if (*(unsigned char *)(a2 + 12))
  {
    *(double *)&unint64_t v3 = v2 * 125.0;
    uint64_t v4 = (__PAIR128__((uint64_t)(*(double *)&v3 / 3.0), v3)
        - COERCE_UNSIGNED_INT64((double)(uint64_t)(*(double *)&v3 / 3.0) * 3.0)) >> 64;
    double v5 = *(double *)&v3 - (double)v4 * 3.0;
    double v6 = (double)(v4 + 1) * 3.0 - *(double *)&v3;
    if (v4) {
      uint64_t v7 = v4 + 1;
    }
    else {
      uint64_t v7 = v4;
    }
    BOOL v8 = v5 == v6;
    BOOL v9 = v5 < v6;
    BOOL v10 = v5 <= v6;
  }
  else
  {
    *(double *)&unint64_t v11 = v2 * 1953125.0;
    uint64_t v4 = (__PAIR128__((uint64_t)(*(double *)&v11 * 0.015625), v11)
        - COERCE_UNSIGNED_INT64((double)(uint64_t)(*(double *)&v11 * 0.015625) * 64.0)) >> 64;
    double v12 = *(double *)&v11 - (double)v4 * 64.0;
    double v13 = (double)(v4 + 1) * 64.0 - *(double *)&v11;
    if (v4) {
      uint64_t v7 = v4 + 1;
    }
    else {
      uint64_t v7 = v4;
    }
    BOOL v8 = v12 == v13;
    BOOL v9 = v12 < v13;
    BOOL v10 = v12 <= v13;
  }
  if (v8) {
    int v14 = 0;
  }
  else {
    int v14 = -127;
  }
  if (!v10) {
    int v14 = 1;
  }
  if (v9) {
    int v14 = -1;
  }
  if (!v10) {
    uint64_t v7 = v4 + 1;
  }
  if (v14 >= 0 || v14 == -127) {
    return v7;
  }
  else {
    return v4;
  }
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<health_algorithms::PPGProcessor::process_packet(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&)::$_4> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&>(uint64_t a1, uint64_t a2)
{
  double v2 = (double)*(unint64_t *)(a2 + 16);
  if (*(unsigned char *)(a2 + 12))
  {
    *(double *)&unint64_t v3 = v2 * 125.0;
    uint64_t v4 = (__PAIR128__((uint64_t)(*(double *)&v3 / 3.0), v3)
        - COERCE_UNSIGNED_INT64((double)(uint64_t)(*(double *)&v3 / 3.0) * 3.0)) >> 64;
    double v5 = *(double *)&v3 - (double)v4 * 3.0;
    double v6 = (double)(v4 + 1) * 3.0 - *(double *)&v3;
    if (v4) {
      uint64_t v7 = v4 + 1;
    }
    else {
      uint64_t v7 = v4;
    }
    BOOL v8 = v5 == v6;
    BOOL v9 = v5 < v6;
    BOOL v10 = v5 <= v6;
  }
  else
  {
    *(double *)&unint64_t v11 = v2 * 1953125.0;
    uint64_t v4 = (__PAIR128__((uint64_t)(*(double *)&v11 * 0.015625), v11)
        - COERCE_UNSIGNED_INT64((double)(uint64_t)(*(double *)&v11 * 0.015625) * 64.0)) >> 64;
    double v12 = *(double *)&v11 - (double)v4 * 64.0;
    double v13 = (double)(v4 + 1) * 64.0 - *(double *)&v11;
    if (v4) {
      uint64_t v7 = v4 + 1;
    }
    else {
      uint64_t v7 = v4;
    }
    BOOL v8 = v12 == v13;
    BOOL v9 = v12 < v13;
    BOOL v10 = v12 <= v13;
  }
  if (v8) {
    int v14 = 0;
  }
  else {
    int v14 = -127;
  }
  if (!v10) {
    int v14 = 1;
  }
  if (v9) {
    int v14 = -1;
  }
  if (!v10) {
    uint64_t v7 = v4 + 1;
  }
  if (v14 >= 0 || v14 == -127) {
    return v7;
  }
  else {
    return v4;
  }
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<health_algorithms::PPGProcessor::process_packet(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&)::$_6> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<health_algorithms::PPGProcessor::process_packet(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&)::$_6> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<health_algorithms::PPGProcessor::process_packet(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&)::$_6> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<health_algorithms::PPGProcessor::process_packet(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&)::$_6> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<health_algorithms::PPGProcessor::process_packet(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&)::$_6> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<health_algorithms::PPGProcessor::process_packet(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&)::$_6> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&>()
{
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<health_algorithms::PPGProcessor::process_packet(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&)::$_6> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&>()
{
  return 1;
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>>>::find<unsigned int>(void *a1, unsigned int *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (*(void *)&v2 <= v3) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = (v2.i32[0] - 1) & v3;
  }
  double v6 = *(uint64_t ***)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  for (BOOL result = *v6; result; BOOL result = (uint64_t *)*result)
  {
    unint64_t v8 = result[1];
    if (v8 == v3)
    {
      if (*((_DWORD *)result + 4) == v3) {
        return result;
      }
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(void *)&v2) {
          v8 %= *(void *)&v2;
        }
      }
      else
      {
        v8 &= *(void *)&v2 - 1;
      }
      if (v8 != v5) {
        return 0;
      }
    }
  }
  return result;
}

void *std::__hash_table<std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>>>::__emplace_unique_key_args<unsigned int,unsigned int const&,health_algorithms::PPGProcessor::SignalProcessorAndFriends>(uint64_t a1, unsigned int *a2, _DWORD *a3, uint64_t *a4)
{
  unint64_t v8 = *a2;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v9 <= v8) {
        unint64_t v4 = v8 % v9;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
    unint64_t v11 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v11)
    {
      double v12 = *v11;
      if (*v11)
      {
        do
        {
          unint64_t v13 = v12[1];
          if (v13 == v8)
          {
            if (*((_DWORD *)v12 + 4) == v8) {
              return v12;
            }
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9) {
                v13 %= v9;
              }
            }
            else
            {
              v13 &= v9 - 1;
            }
            if (v13 != v4) {
              break;
            }
          }
          double v12 = (void *)*v12;
        }
        while (v12);
      }
    }
  }
  int v14 = (void *)(a1 + 16);
  double v12 = operator new(0x30uLL);
  *double v12 = 0;
  v12[1] = v8;
  *((_DWORD *)v12 + 4) = *a3;
  uint64_t v15 = *a4;
  uint64_t v16 = a4[1];
  a4[1] = 0;
  v12[3] = v15;
  v12[4] = v16;
  *((_WORD *)v12 + 20) = *((_WORD *)a4 + 8);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v9 || (float)(v18 * (float)v9) < v17)
  {
    BOOL v19 = 1;
    if (v9 >= 3) {
      BOOL v19 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v9);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>>>::__rehash<true>(a1, v22);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v9 <= v8) {
        unint64_t v4 = v8 % v9;
      }
      else {
        unint64_t v4 = v8;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
  }
  uint64_t v23 = *(void *)a1;
  int v24 = *(void **)(*(void *)a1 + 8 * v4);
  if (v24)
  {
    *double v12 = *v24;
LABEL_38:
    *int v24 = v12;
    goto LABEL_39;
  }
  *double v12 = *v14;
  *int v14 = v12;
  *(void *)(v23 + 8 * v4) = v14;
  if (*v12)
  {
    unint64_t v25 = *(void *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v25 >= v9) {
        v25 %= v9;
      }
    }
    else
    {
      v25 &= v9 - 1;
    }
    int v24 = (void *)(*(void *)a1 + 8 * v25);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v12;
}

void sub_22276BBC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4)
    {
LABEL_16:
      std::__hash_table<std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>>>::__do_rehash<true>(a1, prime);
    }
  }
}

void std::__hash_table<std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    uint64_t v7 = *(void **)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v8) = a1 + 16;
      uint64_t v11 = (void *)*v7;
      if (*v7)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2) {
              v12 %= a2;
            }
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(void *)(*(void *)a1 + 8 * v12))
            {
              *(void *)(*(void *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            void *v7 = *v11;
            *uint64_t v11 = **(void **)(*(void *)a1 + 8 * v12);
            **(void **)(*(void *)a1 + 8 * v12) = v11;
            uint64_t v11 = v7;
          }
          unint64_t v12 = v8;
LABEL_24:
          uint64_t v7 = v11;
          uint64_t v11 = (void *)*v11;
          unint64_t v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    uint8x8_t v10 = *(void **)a1;
    *(void *)a1 = 0;
    if (v10) {
      operator delete(v10);
    }
    *(void *)(a1 + 8) = 0;
  }
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>,void *>>>::operator()[abi:ne180100](uint64_t a1, void *__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v3 = __p[4];
    __p[4] = 0;
    if (v3) {
      MEMORY[0x223C9C430](v3, 0x1000C40A094D7EDLL);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

float std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<health_algorithms::PPGProcessor::process_packet(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&)::$_7> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&>(unsigned __int16 **a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v7 = 0;
  std::vector<mimosa::OpticalSampleV1>::__init_with_size[abi:ne180100]<mimosa::OpticalSampleV1*,mimosa::OpticalSampleV1*>(&v7, *(const void **)(a2 + 32), *(void *)(a2 + 40), 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 2));
  long long v10 = *(_OWORD *)(a2 + 56);
  unint64_t v12 = 0;
  uint64_t v13 = 0;
  __p = 0;
  std::vector<mimosa::AccelSample>::__init_with_size[abi:ne180100]<mimosa::AccelSample*,mimosa::AccelSample*>(&__p, *(const void **)(a2 + 72), *(void *)(a2 + 80), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 80) - *(void *)(a2 + 72)) >> 2));
  long long v4 = *(_OWORD *)(a2 + 112);
  long long v14 = *(_OWORD *)(a2 + 96);
  long long v15 = v4;
  long long v16 = *(_OWORD *)(a2 + 128);
  unsigned int v5 = *v3;
  if (__p)
  {
    unint64_t v12 = __p;
    operator delete(__p);
  }
  if (v7)
  {
    unint64_t v8 = v7;
    operator delete(v7);
  }
  return (float)v5;
}

void sub_22276BF74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

float std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<health_algorithms::PPGProcessor::process_packet(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&)::$_7> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&>(uint64_t *a1, const mimosa::PacketV2 *a2)
{
  uint64_t v2 = *a1;
  mimosa::PacketV2::PacketV2((mimosa::PacketV2 *)&v8, a2);
  if (v16) {
    goto LABEL_8;
  }
  uint64_t v4 = 0;
  while (*(unsigned __int16 *)&v15[v4 + 4] != *(unsigned __int16 *)(*(void *)(v2 + 8) + 38))
  {
    v4 += 8;
    if (v4 == 48) {
      goto LABEL_8;
    }
  }
  unsigned int v5 = *(_DWORD *)&v15[v4];
  if (!v5)
  {
LABEL_8:
    LOWORD(v3) = *(_WORD *)v2;
    float v6 = (float)v3;
  }
  else
  {
    float v6 = (double)v5 * 0.0078125;
  }
  if (__p)
  {
    long long v14 = __p;
    operator delete(__p);
  }
  if (v11)
  {
    unint64_t v12 = v11;
    operator delete(v11);
  }
  if (v9)
  {
    long long v10 = v9;
    operator delete(v9);
  }
  return v6;
}

float std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<health_algorithms::PPGProcessor::process_packet(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&)::$_7> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&>(unsigned __int16 **a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  mimosa::PacketV3::PacketV3((uint64_t)v5, a2);
  unsigned int v3 = *v2;
  if (__p)
  {
    uint64_t v11 = __p;
    operator delete(__p);
  }
  if (v8)
  {
    uint64_t v9 = v8;
    operator delete(v8);
  }
  if (v6)
  {
    uint64_t v7 = v6;
    operator delete(v6);
  }
  return (float)v3;
}

float std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<health_algorithms::PPGProcessor::process_packet(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&)::$_7> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  mimosa::PacketV4::PacketV4((uint64_t)v8, a2);
  if (v16) {
    goto LABEL_8;
  }
  uint64_t v4 = 0;
  while (*(unsigned __int16 *)&v15[v4 + 4] != *(unsigned __int16 *)(*(void *)(v2 + 8) + 38))
  {
    v4 += 8;
    if (v4 == 48) {
      goto LABEL_8;
    }
  }
  unsigned int v5 = *(_DWORD *)&v15[v4];
  if (!v5)
  {
LABEL_8:
    LOWORD(v3) = *(_WORD *)v2;
    float v6 = (float)v3;
  }
  else
  {
    float v6 = (double)v5 * 0.0078125;
  }
  if (__p)
  {
    long long v14 = __p;
    operator delete(__p);
  }
  if (v11)
  {
    unint64_t v12 = v11;
    operator delete(v11);
  }
  if (v9)
  {
    long long v10 = v9;
    operator delete(v9);
  }
  return v6;
}

float std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<health_algorithms::PPGProcessor::process_packet(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&)::$_7> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  mimosa::PacketV5::PacketV5((uint64_t)&v8, a2);
  if (v16) {
    goto LABEL_8;
  }
  uint64_t v4 = 0;
  while (*(unsigned __int16 *)&v15[v4 + 4] != *(unsigned __int16 *)(*(void *)(v2 + 8) + 38))
  {
    v4 += 8;
    if (v4 == 72) {
      goto LABEL_8;
    }
  }
  unsigned int v5 = *(_DWORD *)&v15[v4];
  if (!v5)
  {
LABEL_8:
    LOWORD(v3) = *(_WORD *)v2;
    float v6 = (float)v3;
  }
  else
  {
    float v6 = (double)v5 * 0.0078125;
  }
  if (__p)
  {
    long long v14 = __p;
    operator delete(__p);
  }
  if (v11)
  {
    unint64_t v12 = v11;
    operator delete(v11);
  }
  if (v9)
  {
    long long v10 = v9;
    operator delete(v9);
  }
  return v6;
}

float std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<health_algorithms::PPGProcessor::process_packet(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&)::$_7> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&>(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  long long v4 = a2[1];
  long long v15 = *a2;
  long long v16 = v4;
  float v18 = 0;
  uint64_t v19 = 0;
  float v17 = 0;
  std::vector<mimosa::OpticalSampleV2>::__init_with_size[abi:ne180100]<mimosa::OpticalSampleV2*,mimosa::OpticalSampleV2*>(&v17, *((const void **)a2 + 4), *((void *)a2 + 5), (uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 5);
  long long v20 = *(long long *)((char *)a2 + 56);
  size_t v22 = 0;
  uint64_t v23 = 0;
  __p = 0;
  std::vector<mimosa::AccelSample>::__init_with_size[abi:ne180100]<mimosa::AccelSample*,mimosa::AccelSample*>(&__p, *((const void **)a2 + 9), *((void *)a2 + 10), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)a2 + 10) - *((void *)a2 + 9)) >> 2));
  long long v5 = a2[9];
  long long v26 = a2[8];
  long long v27 = v5;
  long long v6 = a2[13];
  long long v30 = a2[12];
  v31[0] = v6;
  long long v7 = a2[11];
  long long v28 = a2[10];
  long long v29 = v7;
  uint64_t v34 = *((void *)a2 + 36);
  long long v8 = a2[17];
  long long v32 = a2[16];
  long long v33 = v8;
  long long v9 = a2[15];
  v31[1] = a2[14];
  v31[2] = v9;
  long long v10 = a2[7];
  long long v24 = a2[6];
  long long v25 = v10;
  if (WORD4(v32)) {
    goto LABEL_8;
  }
  uint64_t v11 = 0;
  while (*(unsigned __int16 *)((char *)v31 + v11 + 12) != *(unsigned __int16 *)(*(void *)(v3 + 8) + 38))
  {
    v11 += 8;
    if (v11 == 48) {
      goto LABEL_8;
    }
  }
  unsigned int v12 = *(_DWORD *)((char *)v31 + v11 + 8);
  if (!v12)
  {
LABEL_8:
    LOWORD(v10) = *(_WORD *)v3;
    float v13 = (float)v10;
  }
  else
  {
    float v13 = (double)v12 * 0.0078125;
  }
  if (__p)
  {
    size_t v22 = __p;
    operator delete(__p);
  }
  if (v17)
  {
    float v18 = v17;
    operator delete(v17);
  }
  return v13;
}

void sub_22276C408(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

float std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<health_algorithms::PPGProcessor::process_packet(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&)::$_7> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&>(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  long long v4 = a2[1];
  long long v17 = *a2;
  long long v18 = v4;
  long long v20 = 0;
  uint64_t v21 = 0;
  uint64_t v19 = 0;
  std::vector<mimosa::OpticalSampleV2>::__init_with_size[abi:ne180100]<mimosa::OpticalSampleV2*,mimosa::OpticalSampleV2*>(&v19, *((const void **)a2 + 4), *((void *)a2 + 5), (uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 5);
  long long v22 = *(long long *)((char *)a2 + 56);
  long long v24 = 0;
  uint64_t v25 = 0;
  __p = 0;
  std::vector<mimosa::AccelSample>::__init_with_size[abi:ne180100]<mimosa::AccelSample*,mimosa::AccelSample*>(&__p, *((const void **)a2 + 9), *((void *)a2 + 10), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)a2 + 10) - *((void *)a2 + 9)) >> 2));
  long long v5 = a2[11];
  long long v30 = a2[10];
  long long v31 = v5;
  long long v6 = a2[9];
  long long v28 = a2[8];
  long long v29 = v6;
  long long v7 = a2[15];
  v33[1] = a2[14];
  v33[2] = v7;
  long long v8 = a2[13];
  long long v32 = a2[12];
  v33[0] = v8;
  long long v9 = a2[19];
  long long v34 = a2[18];
  long long v35 = v9;
  long long v10 = a2[17];
  v33[3] = a2[16];
  v33[4] = v10;
  long long v11 = a2[6];
  long long v12 = a2[7];
  long long v26 = v11;
  long long v27 = v12;
  if ((_WORD)v34) {
    goto LABEL_8;
  }
  uint64_t v13 = 0;
  while (*(unsigned __int16 *)((char *)v33 + v13 + 12) != *(unsigned __int16 *)(*(void *)(v3 + 8) + 38))
  {
    v13 += 8;
    if (v13 == 72) {
      goto LABEL_8;
    }
  }
  unsigned int v14 = *(_DWORD *)((char *)v33 + v13 + 8);
  if (!v14)
  {
LABEL_8:
    LOWORD(v1std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = *(_WORD *)v3;
    float v15 = (float)v11;
  }
  else
  {
    float v15 = (double)v14 * 0.0078125;
  }
  if (__p)
  {
    long long v24 = __p;
    operator delete(__p);
  }
  if (v19)
  {
    long long v20 = v19;
    operator delete(v19);
  }
  return v15;
}

void sub_22276C588(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<health_algorithms::PPGProcessor::PPGOutputSignal>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 58) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(a2 << 6);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<health_algorithms::PPGProcessor::compute_accel_output(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 32);
  uint64_t v3 = *(void *)(a2 + 40);
  if (v2 == v3) {
    return 0;
  }
  for (uint64_t i = v2 + 36; i != v3; i += 36)
  {
    if (*(unsigned __int16 *)(v2 + 20) < *(unsigned __int16 *)(i + 20)) {
      uint64_t v2 = i;
    }
  }
  return *(unsigned __int16 *)(v2 + 20) | 0x10000u;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<health_algorithms::PPGProcessor::compute_accel_output(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 32);
  uint64_t v3 = *(void *)(a2 + 40);
  if (v2 == v3) {
    return 0;
  }
  for (uint64_t i = v2 + 36; i != v3; i += 36)
  {
    if (*(unsigned __int16 *)(v2 + 20) < *(unsigned __int16 *)(i + 20)) {
      uint64_t v2 = i;
    }
  }
  return *(unsigned __int16 *)(v2 + 20) | 0x10000u;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<health_algorithms::PPGProcessor::compute_accel_output(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 32);
  uint64_t v3 = *(void *)(a2 + 40);
  if (v2 == v3) {
    return 0;
  }
  for (uint64_t i = v2 + 36; i != v3; i += 36)
  {
    if (*(unsigned __int16 *)(v2 + 20) < *(unsigned __int16 *)(i + 20)) {
      uint64_t v2 = i;
    }
  }
  return *(unsigned __int16 *)(v2 + 20) | 0x10000u;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<health_algorithms::PPGProcessor::compute_accel_output(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 32);
  uint64_t v3 = *(void *)(a2 + 40);
  if (v2 == v3) {
    return 0;
  }
  for (uint64_t i = v2 + 36; i != v3; i += 36)
  {
    if (*(unsigned __int16 *)(v2 + 20) < *(unsigned __int16 *)(i + 20)) {
      uint64_t v2 = i;
    }
  }
  return *(unsigned __int16 *)(v2 + 20) | 0x10000u;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<health_algorithms::PPGProcessor::compute_accel_output(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 32);
  uint64_t v3 = *(void *)(a2 + 40);
  if (v2 == v3) {
    return 0;
  }
  for (uint64_t i = v2 + 36; i != v3; i += 36)
  {
    if (*(unsigned __int16 *)(v2 + 20) < *(unsigned __int16 *)(i + 20)) {
      uint64_t v2 = i;
    }
  }
  return *(unsigned __int16 *)(v2 + 20) | 0x10000u;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<health_algorithms::PPGProcessor::compute_accel_output(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 32);
  uint64_t v3 = *(void *)(a2 + 40);
  if (v2 == v3) {
    return 0;
  }
  for (uint64_t i = v2 + 32; i != v3; i += 32)
  {
    if (*(unsigned __int16 *)(v2 + 14) < *(unsigned __int16 *)(i + 14)) {
      uint64_t v2 = i;
    }
  }
  return *(unsigned __int16 *)(v2 + 14) | 0x10000u;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<health_algorithms::PPGProcessor::compute_accel_output(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 32);
  uint64_t v3 = *(void *)(a2 + 40);
  if (v2 == v3) {
    return 0;
  }
  for (uint64_t i = v2 + 32; i != v3; i += 32)
  {
    if (*(unsigned __int16 *)(v2 + 14) < *(unsigned __int16 *)(i + 14)) {
      uint64_t v2 = i;
    }
  }
  return *(unsigned __int16 *)(v2 + 14) | 0x10000u;
}

void *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<health_algorithms::PPGProcessor::compute_accel_output(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&)::$_1> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = *(_OWORD *)(a1 + 56);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 16) = 0;
  return std::vector<mimosa::AccelSample>::__init_with_size[abi:ne180100]<mimosa::AccelSample*,mimosa::AccelSample*>((void *)(a2 + 16), *(const void **)(a1 + 72), *(void *)(a1 + 80), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 80) - *(void *)(a1 + 72)) >> 2));
}

void *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<health_algorithms::PPGProcessor::compute_accel_output(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&)::$_1> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = *(_OWORD *)(a1 + 56);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 16) = 0;
  return std::vector<mimosa::AccelSample>::__init_with_size[abi:ne180100]<mimosa::AccelSample*,mimosa::AccelSample*>((void *)(a2 + 16), *(const void **)(a1 + 72), *(void *)(a1 + 80), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 80) - *(void *)(a1 + 72)) >> 2));
}

void *std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<health_algorithms::PPGProcessor::compute_accel_output(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&)::$_1> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = *(_OWORD *)(a1 + 56);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 16) = 0;
  return std::vector<mimosa::AccelSample>::__init_with_size[abi:ne180100]<mimosa::AccelSample*,mimosa::AccelSample*>((void *)(a2 + 16), *(const void **)(a1 + 72), *(void *)(a1 + 80), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 80) - *(void *)(a1 + 72)) >> 2));
}

void *std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<health_algorithms::PPGProcessor::compute_accel_output(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&)::$_1> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = *(_OWORD *)(a1 + 56);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 16) = 0;
  return std::vector<mimosa::AccelSample>::__init_with_size[abi:ne180100]<mimosa::AccelSample*,mimosa::AccelSample*>((void *)(a2 + 16), *(const void **)(a1 + 72), *(void *)(a1 + 80), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 80) - *(void *)(a1 + 72)) >> 2));
}

void *std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<health_algorithms::PPGProcessor::compute_accel_output(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&)::$_1> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = *(_OWORD *)(a1 + 56);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 16) = 0;
  return std::vector<mimosa::AccelSample>::__init_with_size[abi:ne180100]<mimosa::AccelSample*,mimosa::AccelSample*>((void *)(a2 + 16), *(const void **)(a1 + 72), *(void *)(a1 + 80), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 80) - *(void *)(a1 + 72)) >> 2));
}

void *std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<health_algorithms::PPGProcessor::compute_accel_output(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&)::$_1> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = *(_OWORD *)(a1 + 56);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 16) = 0;
  return std::vector<mimosa::AccelSample>::__init_with_size[abi:ne180100]<mimosa::AccelSample*,mimosa::AccelSample*>((void *)(a2 + 16), *(const void **)(a1 + 72), *(void *)(a1 + 80), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 80) - *(void *)(a1 + 72)) >> 2));
}

void *std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<health_algorithms::PPGProcessor::compute_accel_output(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&)::$_1> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = *(_OWORD *)(a1 + 56);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 16) = 0;
  return std::vector<mimosa::AccelSample>::__init_with_size[abi:ne180100]<mimosa::AccelSample*,mimosa::AccelSample*>((void *)(a2 + 16), *(const void **)(a1 + 72), *(void *)(a1 + 80), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 80) - *(void *)(a1 + 72)) >> 2));
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<health_algorithms::PPGProcessor::AccelOutputSignal>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(24 * a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<health_algorithms::PPGProcessor::compute_accel_output(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&)::$_2> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&>(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(a2 + 12);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<health_algorithms::PPGProcessor::compute_accel_output(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&)::$_2> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&>(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(a2 + 12);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<health_algorithms::PPGProcessor::compute_accel_output(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&)::$_2> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&>(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(a2 + 12);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<health_algorithms::PPGProcessor::compute_accel_output(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&)::$_2> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&>(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(a2 + 12);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<health_algorithms::PPGProcessor::compute_accel_output(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&)::$_2> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&>(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(a2 + 12);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<health_algorithms::PPGProcessor::compute_accel_output(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&)::$_2> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&>(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(a2 + 12);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<health_algorithms::PPGProcessor::compute_accel_output(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&)::$_2> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&>(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(a2 + 12);
}

void *std::allocate_shared[abi:ne180100]<mimosa::Metadata,std::allocator<mimosa::Metadata>,mimosa::Metadata const&,void>@<X0>(const mimosa::Metadata *a1@<X1>, void *a2@<X8>)
{
  long long v4 = operator new(0x7B0uLL);
  BOOL result = std::__shared_ptr_emplace<mimosa::Metadata>::__shared_ptr_emplace[abi:ne180100]<mimosa::Metadata const&,std::allocator<mimosa::Metadata>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_22276C9EC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<mimosa::Metadata>::__shared_ptr_emplace[abi:ne180100]<mimosa::Metadata const&,std::allocator<mimosa::Metadata>,0>(void *a1, const mimosa::Metadata *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26D4E4218;
  mimosa::Metadata::Metadata((mimosa::Metadata *)(a1 + 3), a2);
  return a1;
}

void sub_22276CA48(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<mimosa::Metadata>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D4E4218;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<mimosa::Metadata>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D4E4218;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x223C9C430);
}

void std::__shared_ptr_emplace<mimosa::Metadata>::__on_zero_shared(uint64_t a1)
{
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>>>::__erase_unique<unsigned int>(void *a1, unsigned int *a2)
{
  BOOL result = std::__hash_table<std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>>>::find<unsigned int>(a1, a2);
  if (result)
  {
    std::__hash_table<std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>>>::erase(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>>>::erase(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  std::__hash_table<std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>>>::remove(a1, a2, (uint64_t)&__p);
  uint64_t v3 = __p;
  __p = 0;
  if (v3) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>,void *>>>::operator()[abi:ne180100]((uint64_t)&v6, v3);
  }
  return v2;
}

void *std::__hash_table<std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>>>::remove@<X0>(void *result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  int8x8_t v3 = (int8x8_t)result[1];
  unint64_t v4 = a2[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(void *)&v3) {
      v4 %= *(void *)&v3;
    }
  }
  else
  {
    v4 &= *(void *)&v3 - 1;
  }
  uint64_t v6 = *(void **)(*result + 8 * v4);
  do
  {
    long long v7 = v6;
    uint64_t v6 = (void *)*v6;
  }
  while (v6 != a2);
  if (v7 == result + 2) {
    goto LABEL_18;
  }
  unint64_t v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(void *)&v3) {
      v8 %= *(void *)&v3;
    }
  }
  else
  {
    v8 &= *(void *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a2) {
      goto LABEL_19;
    }
    unint64_t v9 = *(void *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(void *)&v3) {
        v9 %= *(void *)&v3;
      }
    }
    else
    {
      v9 &= *(void *)&v3 - 1;
    }
    if (v9 != v4) {
LABEL_19:
    }
      *(void *)(*result + 8 * v4) = 0;
  }
  uint64_t v10 = *a2;
  if (*a2)
  {
    unint64_t v11 = *(void *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(void *)&v3) {
        v11 %= *(void *)&v3;
      }
    }
    else
    {
      v11 &= *(void *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(void *)(*result + 8 * v1std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = v7;
      uint64_t v10 = *a2;
    }
  }
  void *v7 = v10;
  *a2 = 0;
  --result[3];
  *(void *)a3 = a2;
  *(void *)(a3 + 8) = result + 2;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_22276CE38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_222770154(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *a25,void *a26,void *a27,void *a28,void *a29,void *a30,void *a31,void *a32,void *a33,void *a34,void *a35,void *a36,void *a37,void *a38,void *a39,void *a40,void *a41,void *a42,void *a43,void *a44,void *a45,void *a46,void *a47,void *a48,void *a49,void *a50,void *a51,void *a52,void *a53,void *a54,void *a55,void *a56,void *a57,void *a58,void *a59,void *a60,void *a61,void *a62,void *a63)
{
  STACK[0x2D8] = a1;
  _Unwind_Resume((_Unwind_Exception *)STACK[0x2D8]);
}

void sub_22277243C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_222773D6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_222775780(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

float CinnAlgs::convertImpedance(char *a1, unsigned int a2)
{
  if (a2 > 0xF) {
    return 0.0;
  }
  unint64_t v3 = a1[25];
  float v4 = 0.0;
  float v5 = 0.0;
  if (v3 <= 6) {
    float v5 = flt_22279569C[v3];
  }
  float v6 = 2.0;
  if (a1[26] != 1) {
    float v6 = 0.0;
  }
  if (!a1[26]) {
    float v6 = 1.0;
  }
  float v7 = v5 * v6;
  unint64_t v8 = a1[27];
  if (v8 <= 8) {
    float v4 = flt_222795678[v8];
  }
  float v9 = sqrt((float)(v4 / 40000.0) * (float)(v4 / 40000.0) + 1.0);
  return roundf((float)((float)(sqrtf((float)((float)*(int *)&a1[28 * a2 + 55] * (float)*(int *)&a1[28 * a2 + 55])+ (float)((float)*(int *)&a1[28 * a2 + 51] * (float)*(int *)&a1[28 * a2 + 51]))/ v7)* 0.60797)* v9);
}

float CinnAlgs::getPgaGain(CinnAlgs *this)
{
  float result = 0.0;
  if (this <= 6) {
    return flt_22279569C[(char)this];
  }
  return result;
}

float CinnAlgs::getBuffGain(CinnAlgs *this)
{
  float result = 0.0;
  if (this == 1) {
    float result = 2.0;
  }
  if (!this) {
    return 1.0;
  }
  return result;
}

float CinnAlgs::getZdacFreq(unsigned int a1)
{
  float result = 0.0;
  if (a1 <= 8) {
    return flt_222795678[(char)a1];
  }
  return result;
}

float CinnAlgs::convertAdcAcVolt(uint64_t a1, unsigned int a2, int a3)
{
  float result = 0.0;
  if (a2 <= 0xF)
  {
    float v4 = 0.0;
    float v5 = 2.0;
    if (*(unsigned char *)(a1 + 26) != 1) {
      float v5 = 0.0;
    }
    if (!*(unsigned char *)(a1 + 26)) {
      float v5 = 1.0;
    }
    if (a3)
    {
      unint64_t v6 = *(char *)(a1 + 25);
      if (v6 <= 6) {
        float v4 = flt_22279569C[v6];
      }
      float v5 = v5 * v4;
      float v7 = 0.30398;
    }
    else
    {
      float v7 = 0.3117;
    }
    return (float)(v7 * (float)*(int *)(a1 + 28 * a2 + 47)) / v5;
  }
  return result;
}

void mimosa::v2::encode_start_of_stream(uint64_t a1, uint64_t a2)
{
  __p = 0;
  long long v32 = 0;
  unint64_t v33 = 0;
  std::vector<std::byte>::reserve((unint64_t *)&__p, 0x80uLL);
  std::vector<std::byte>::__insert_with_size[abi:ne180100]<std::byte const*,std::byte const*>((uint64_t)&__p, (char *)__p, mimosa::v2::encode_start_of_stream(mimosa::Metadata const&,std::function<void ()(std::byte const*,unsigned long)>)::start_sequence, "NSt3__117bad_function_callE", 8);
  if ((unint64_t)(v32 - (unsigned char *)__p) > 0xFFFFFFFFFFFFFFFDLL) {
    v32 += 2;
  }
  else {
    std::vector<std::byte>::__append((unint64_t *)&__p, 2uLL);
  }
  if (*(unsigned char *)(a1 + 4)) {
    mimosa::v2::encode_metadata_kv_pair<unsigned int>(0, (int *)a1, &__p);
  }
  if (*(unsigned char *)(a1 + 12)) {
    mimosa::v2::encode_metadata_kv_pair<unsigned int>(1, (int *)(a1 + 8), &__p);
  }
  if (*(unsigned char *)(a1 + 32)) {
    mimosa::v2::encode_metadata_kv_pair(2, a1 + 16, (unint64_t *)&__p);
  }
  if (*(unsigned char *)(a1 + 49)) {
    mimosa::v2::encode_metadata_kv_pair(3, a1 + 33, (unint64_t *)&__p);
  }
  if (*(unsigned char *)(a1 + 80)) {
    mimosa::v2::encode_metadata_kv_pair(4, a1 + 56, (unint64_t *)&__p);
  }
  if (*(unsigned char *)(a1 + 112)) {
    mimosa::v2::encode_metadata_kv_pair(5, a1 + 88, (unint64_t *)&__p);
  }
  if (*(unsigned char *)(a1 + 144)) {
    mimosa::v2::encode_metadata_kv_pair(6, a1 + 120, (unint64_t *)&__p);
  }
  float v4 = v32;
  if (*(unsigned char *)(a1 + 224))
  {
    if ((unint64_t)v32 >= v33)
    {
      unint64_t v6 = (unint64_t)__p;
      uint64_t v7 = v32 - (unsigned char *)__p;
      uint64_t v8 = v32 - (unsigned char *)__p + 1;
      if (v8 < 0) {
        goto LABEL_73;
      }
      unint64_t v9 = v33 - (void)__p;
      if (2 * (v33 - (unint64_t)__p) > v8) {
        uint64_t v8 = 2 * v9;
      }
      if (v9 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v10 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v10 = v8;
      }
      if (v10) {
        unint64_t v11 = operator new(v10);
      }
      else {
        unint64_t v11 = 0;
      }
      long long v12 = (char *)v11 + v10;
      *((unsigned char *)v11 + v7) = 7;
      uint64_t v5 = (uint64_t)v11 + v7 + 1;
      if (v4 == (unsigned char *)v6)
      {
        unint64_t v11 = (char *)v11 + v7;
      }
      else
      {
        uint64_t v13 = &v4[~v6];
        do
        {
          char v14 = *--v4;
          (v13--)[(void)v11] = v14;
        }
        while (v4 != (unsigned char *)v6);
        float v4 = __p;
      }
      __p = v11;
      long long v32 = (unsigned char *)v5;
      unint64_t v33 = (unint64_t)v12;
      if (v4) {
        operator delete(v4);
      }
    }
    else
    {
      *long long v32 = 7;
      uint64_t v5 = (uint64_t)(v4 + 1);
    }
    long long v32 = (unsigned char *)v5;
    mimosa::v2::encode((mimosa::v2 *)(a1 + 152), (unint64_t *)&v34);
    mimosa::v2::nanite::leb128_encode<std::back_insert_iterator<std::vector<std::byte>>>(v35 - v34, (unint64_t *)&__p);
    float v15 = v34;
    long long v16 = v35;
    p_p = &__p;
    if (v34 != v35)
    {
      do
        std::back_insert_iterator<std::vector<std::byte>>::operator=[abi:ne180100]((unint64_t **)&p_p, v15++);
      while (v15 != v16);
      float v15 = v34;
    }
    if (v15)
    {
      long long v35 = v15;
      operator delete(v15);
    }
    float v4 = v32;
  }
  if (!*(unsigned char *)(a1 + 1940)) {
    goto LABEL_68;
  }
  if ((unint64_t)v4 >= v33)
  {
    unint64_t v18 = (unint64_t)__p;
    uint64_t v19 = v4 - (unsigned char *)__p;
    uint64_t v20 = v4 - (unsigned char *)__p + 1;
    if (v20 >= 0)
    {
      unint64_t v21 = v33 - (void)__p;
      if (2 * (v33 - (unint64_t)__p) > v20) {
        uint64_t v20 = 2 * v21;
      }
      if (v21 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v22 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v22 = v20;
      }
      if (v22) {
        uint64_t v23 = operator new(v22);
      }
      else {
        uint64_t v23 = 0;
      }
      long long v24 = (char *)v23 + v22;
      *((unsigned char *)v23 + v1std::__function::__value_func<BOOL ()(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,double)>::~__value_func[abi:ne180100]((void *)this + 9) = 8;
      uint64_t v17 = (uint64_t)v23 + v19 + 1;
      if (v4 == (unsigned char *)v18)
      {
        uint64_t v23 = (char *)v23 + v19;
      }
      else
      {
        uint64_t v25 = &v4[~v18];
        do
        {
          char v26 = *--v4;
          (v25--)[(void)v23] = v26;
        }
        while (v4 != (unsigned char *)v18);
        float v4 = __p;
      }
      __p = v23;
      long long v32 = (unsigned char *)v17;
      unint64_t v33 = (unint64_t)v24;
      if (v4) {
        operator delete(v4);
      }
      goto LABEL_62;
    }
LABEL_73:
    std::vector<mimosa::OpticalSampleV1>::__throw_length_error[abi:ne180100]();
  }
  unsigned char *v4 = 8;
  uint64_t v17 = (uint64_t)(v4 + 1);
LABEL_62:
  long long v32 = (unsigned char *)v17;
  mimosa::v2::encode(a1 + 232);
  mimosa::v2::nanite::leb128_encode<std::back_insert_iterator<std::vector<std::byte>>>(v35 - v34, (unint64_t *)&__p);
  long long v27 = v34;
  long long v28 = v35;
  p_p = &__p;
  if (v34 != v35)
  {
    do
      std::back_insert_iterator<std::vector<std::byte>>::operator=[abi:ne180100]((unint64_t **)&p_p, v27++);
    while (v27 != v28);
    long long v27 = v34;
  }
  if (v27)
  {
    long long v35 = v27;
    operator delete(v27);
  }
  float v4 = v32;
LABEL_68:
  long long v29 = __p;
  if ((unint64_t)(v4 - (unsigned char *)__p) >= 0x1000A)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "too much metadata to encode");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  *((_WORD *)__p + 4) = (_WORD)v4 - (_WORD)__p - 10;
  std::function<void ()(std::byte const*,unsigned long)>::operator()(a2, (uint64_t)v29, v32 - v29);
  if (__p)
  {
    long long v32 = __p;
    operator delete(__p);
  }
}

void sub_222776454(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  __cxa_free_exception(v14);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void std::vector<std::byte>::reserve(unint64_t *a1, size_t __sz)
{
  unint64_t v2 = *a1;
  if (a1[2] - *a1 < __sz)
  {
    if ((__sz & 0x8000000000000000) != 0) {
      std::vector<mimosa::OpticalSampleV1>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = (char *)a1[1];
    unint64_t v6 = operator new(__sz);
    uint64_t v7 = &v5[(void)v6 - v2];
    uint64_t v8 = v7;
    if (v5 != (char *)v2)
    {
      unint64_t v9 = &v5[~v2];
      do
      {
        char v10 = *--v5;
        (v9--)[(void)v6] = v10;
      }
      while (v5 != (char *)v2);
      uint64_t v8 = v6;
    }
    *a1 = (unint64_t)v8;
    a1[1] = (unint64_t)v7;
    a1[2] = (unint64_t)&v6[__sz];
    if (v2)
    {
      operator delete((void *)v2);
    }
  }
}

char *mimosa::v2::encode_metadata_kv_pair<unsigned int>(char a1, int *a2, void *a3)
{
  uint64_t v7 = (char *)a3[1];
  unint64_t v6 = a3[2];
  if ((unint64_t)v7 >= v6)
  {
    unint64_t v9 = (char *)*a3;
    char v10 = &v7[-*a3];
    unint64_t v11 = (unint64_t)(v10 + 1);
    if ((uint64_t)(v10 + 1) < 0) {
      std::vector<mimosa::OpticalSampleV1>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v12 = v6 - (void)v9;
    if (2 * v12 > v11) {
      unint64_t v11 = 2 * v12;
    }
    if (v12 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v13 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v13 = v11;
    }
    if (v13) {
      char v14 = (char *)operator new(v13);
    }
    else {
      char v14 = 0;
    }
    float v15 = &v14[v13];
    v10[(void)v14] = a1;
    uint64_t v8 = &v10[(void)v14 + 1];
    if (v7 == v9)
    {
      char v14 = &v10[(void)v14];
    }
    else
    {
      long long v16 = &v7[~(unint64_t)v9];
      do
      {
        char v17 = *--v7;
        (v16--)[(void)v14] = v17;
      }
      while (v7 != v9);
      uint64_t v7 = (char *)*a3;
    }
    *a3 = v14;
    a3[1] = v8;
    a3[2] = v15;
    if (v7) {
      operator delete(v7);
    }
  }
  else
  {
    char *v7 = a1;
    uint64_t v8 = v7 + 1;
  }
  a3[1] = v8;
  int __src = *a2;
  return std::vector<std::byte>::__insert_with_size[abi:ne180100]<std::byte const*,std::byte const*>((uint64_t)a3, v8, (char *)&__src, (char *)&v20, 4);
}

unint64_t **mimosa::v2::encode_metadata_kv_pair(char a1, uint64_t a2, unint64_t *a3)
{
  uint64_t v7 = (unsigned char *)a3[1];
  unint64_t v6 = a3[2];
  if ((unint64_t)v7 >= v6)
  {
    unint64_t v9 = *a3;
    char v10 = &v7[-*a3];
    unint64_t v11 = (unint64_t)(v10 + 1);
    if ((uint64_t)(v10 + 1) < 0) {
      std::vector<mimosa::OpticalSampleV1>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v12 = v6 - v9;
    if (2 * v12 > v11) {
      unint64_t v11 = 2 * v12;
    }
    if (v12 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v13 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v13 = v11;
    }
    if (v13) {
      unint64_t v14 = (unint64_t)operator new(v13);
    }
    else {
      unint64_t v14 = 0;
    }
    float v15 = (char *)(v14 + v13);
    v10[v14] = a1;
    uint64_t v8 = (uint64_t)&v10[v14 + 1];
    if (v7 == (unsigned char *)v9)
    {
      v14 += (unint64_t)v10;
    }
    else
    {
      long long v16 = &v7[~v9];
      do
      {
        char v17 = *--v7;
        (v16--)[v14] = v17;
      }
      while (v7 != (unsigned char *)v9);
      uint64_t v7 = (unsigned char *)*a3;
    }
    *a3 = v14;
    a3[1] = v8;
    a3[2] = (unint64_t)v15;
    if (v7) {
      operator delete(v7);
    }
  }
  else
  {
    unsigned char *v7 = a1;
    uint64_t v8 = (uint64_t)(v7 + 1);
  }
  uint64_t v18 = 0;
  a3[1] = v8;
  unint64_t v21 = a3;
  do
  {
    char v20 = *(unsigned char *)(a2 + v18);
    float result = std::back_insert_iterator<std::vector<std::byte>>::operator=[abi:ne180100](&v21, &v20);
    ++v18;
  }
  while (v18 != 16);
  return result;
}

void mimosa::v2::encode_metadata_kv_pair(char a1, uint64_t a2, unint64_t *a3)
{
  float v4 = (char *)a2;
  if (*(char *)(a2 + 23) < 0 && *(void *)(a2 + 8) >= 0x100uLL)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "attempt to encode a string of metadata that's longer than 255");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  uint64_t v7 = (unsigned char *)a3[1];
  unint64_t v6 = a3[2];
  if ((unint64_t)v7 >= v6)
  {
    unint64_t v9 = *a3;
    char v10 = &v7[-*a3];
    unint64_t v11 = (unint64_t)(v10 + 1);
    if ((uint64_t)(v10 + 1) < 0) {
      goto LABEL_49;
    }
    unint64_t v12 = v6 - v9;
    if (2 * v12 > v11) {
      unint64_t v11 = 2 * v12;
    }
    if (v12 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v13 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v13 = v11;
    }
    if (v13) {
      unint64_t v14 = (unint64_t)operator new(v13);
    }
    else {
      unint64_t v14 = 0;
    }
    float v15 = (char *)(v14 + v13);
    v10[v14] = a1;
    uint64_t v8 = &v10[v14 + 1];
    if (v7 == (unsigned char *)v9)
    {
      v14 += (unint64_t)v10;
    }
    else
    {
      long long v16 = &v7[~v9];
      do
      {
        char v17 = *--v7;
        (v16--)[v14] = v17;
      }
      while (v7 != (unsigned char *)v9);
      uint64_t v7 = (unsigned char *)*a3;
    }
    *a3 = v14;
    a3[1] = (unint64_t)v8;
    a3[2] = (unint64_t)v15;
    if (v7) {
      operator delete(v7);
    }
  }
  else
  {
    unsigned char *v7 = a1;
    uint64_t v8 = v7 + 1;
  }
  a3[1] = (unint64_t)v8;
  if (v4[23] >= 0) {
    char v18 = v4[23];
  }
  else {
    char v18 = *((_DWORD *)v4 + 2);
  }
  unint64_t v19 = a3[2];
  if ((unint64_t)v8 < v19)
  {
    unsigned char *v8 = v18;
    uint64_t v20 = (uint64_t)(v8 + 1);
    goto LABEL_42;
  }
  unint64_t v21 = *a3;
  size_t v22 = &v8[-*a3];
  unint64_t v23 = (unint64_t)(v22 + 1);
  if ((uint64_t)(v22 + 1) < 0) {
LABEL_49:
  }
    std::vector<mimosa::OpticalSampleV1>::__throw_length_error[abi:ne180100]();
  unint64_t v24 = v19 - v21;
  if (2 * v24 > v23) {
    unint64_t v23 = 2 * v24;
  }
  if (v24 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v25 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v25 = v23;
  }
  if (v25) {
    unint64_t v26 = (unint64_t)operator new(v25);
  }
  else {
    unint64_t v26 = 0;
  }
  long long v27 = (char *)(v26 + v25);
  v22[v26] = v18;
  uint64_t v20 = (uint64_t)&v22[v26 + 1];
  if (v8 == (unsigned char *)v21)
  {
    *a3 = (unint64_t)&v22[v26];
    a3[1] = v20;
    a3[2] = (unint64_t)v27;
  }
  else
  {
    long long v28 = &v8[~v21];
    do
    {
      char v29 = *--v8;
      (v28--)[v26] = v29;
    }
    while (v8 != (unsigned char *)v21);
    uint64_t v8 = (unsigned char *)*a3;
    *a3 = v26;
    a3[1] = v20;
    a3[2] = (unint64_t)v27;
    if (!v8) {
      goto LABEL_42;
    }
  }
  operator delete(v8);
LABEL_42:
  a3[1] = v20;
  uint64_t v30 = *((void *)v4 + 1);
  if (v4[23] >= 0)
  {
    uint64_t v31 = v4[23];
  }
  else
  {
    float v4 = *(char **)v4;
    uint64_t v31 = v30;
  }
  for (uint64_t i = a3; v31; --v31)
  {
    char v32 = *v4++;
    char v34 = v32;
    std::back_insert_iterator<std::vector<std::byte>>::operator=[abi:ne180100](&i, &v34);
  }
}

void sub_222776A10(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::function<void ()(std::byte const*,unsigned long)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a3;
  uint64_t v6 = a2;
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v3 + 48))(v3, &v6, &v5);
}

int64_t mimosa::v2::decode_metadata(unsigned __int8 *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  if (a2 < 2) {
    return 0;
  }
  float v4 = a1 + 2;
  uint64_t v5 = *(unsigned __int16 *)a1;
  uint64_t v30 = a1 + 2;
  if (v5 + 2 > a2) {
    return 0;
  }
  uint64_t v8 = (unsigned __int8 **)&a1[v5 + 2];
  LOBYTE(v32) = 0;
  char v33 = 0;
  LOBYTE(v34) = 0;
  char v35 = 0;
  LOBYTE(v36[0]) = 0;
  *(_WORD *)uint64_t v37 = 0;
  char v39 = 0;
  LOBYTE(v40[0]) = 0;
  char v42 = 0;
  LOBYTE(v43[0]) = 0;
  char v45 = 0;
  LOBYTE(v46[0]) = 0;
  char v48 = 0;
  LOBYTE(__p[0]) = 0;
  char v52 = 0;
  LOBYTE(v53[0]) = 0;
  char v54 = 0;
  v29[0] = &v30;
  v29[1] = v8;
  if (v5)
  {
    do
    {
      unint64_t v9 = v4 + 1;
      uint64_t v30 = v4 + 1;
      switch(*v4)
      {
        case 0u:
          int v32 = 0;
          char v33 = 1;
          char v10 = v4 + 5;
          if (v10 > (unsigned __int8 *)v8) {
            goto LABEL_56;
          }
          int v32 = *(_DWORD *)v9;
          goto LABEL_43;
        case 1u:
          int v34 = 0;
          char v35 = 1;
          char v10 = v4 + 5;
          if (v10 > (unsigned __int8 *)v8) {
            goto LABEL_56;
          }
          int v34 = *(_DWORD *)v9;
          goto LABEL_43;
        case 2u:
          v36[0] = 0;
          v36[1] = 0;
          v37[0] = 1;
          char v10 = v4 + 17;
          if (v10 > (unsigned __int8 *)v8) {
            goto LABEL_56;
          }
          for (uint64_t i = 0; i != 16; ++i)
            *((unsigned char *)v36 + i) = v9[i];
          goto LABEL_43;
        case 3u:
          *(void *)&v37[1] = 0;
          uint64_t v38 = 0;
          char v39 = 1;
          char v10 = v4 + 17;
          if (v10 > (unsigned __int8 *)v8) {
            goto LABEL_56;
          }
          for (uint64_t j = 0; j != 16; ++j)
            v37[j + 1] = v9[j];
          goto LABEL_43;
        case 4u:
          unint64_t v11 = &v42;
          unint64_t v12 = (std::string *)v40;
          if (!v42) {
            goto LABEL_39;
          }
          unint64_t v11 = &v42;
          unint64_t v12 = (std::string *)v40;
          if ((v41 & 0x80000000) == 0) {
            goto LABEL_39;
          }
          goto LABEL_38;
        case 5u:
          unint64_t v11 = &v45;
          unint64_t v12 = (std::string *)v43;
          if (!v45) {
            goto LABEL_39;
          }
          unint64_t v11 = &v45;
          unint64_t v12 = (std::string *)v43;
          if ((v44 & 0x80000000) == 0) {
            goto LABEL_39;
          }
          goto LABEL_38;
        case 6u:
          unint64_t v11 = &v48;
          unint64_t v12 = (std::string *)v46;
          if (v48)
          {
            unint64_t v11 = &v48;
            unint64_t v12 = (std::string *)v46;
            if (v47 < 0) {
LABEL_38:
            }
              operator delete(v12->__r_.__value_.__l.__data_);
          }
LABEL_39:
          v12->__r_.__value_.__r.__words[0] = 0;
          v12->__r_.__value_.__l.__size_ = 0;
          v12->__r_.__value_.__r.__words[2] = 0;
          *unint64_t v11 = 1;
          mimosa::v2::decode_metadata(std::byte const*,unsigned long,std::function<BOOL ()(mimosa::Metadata const&)>)::$_1::operator()(v29, v12);
          goto LABEL_44;
        case 7u:
          std::__optional_destruct_base<mimosa::LightPathSemantics,false>::reset[abi:ne180100]((uint64_t)__p);
          uint64_t v51 = 0;
          long long v50 = 0u;
          memset(__p, 0, sizeof(__p));
          char v52 = 1;
          if (v30 == (unsigned __int8 *)v8) {
            goto LABEL_56;
          }
          uint64_t v15 = mimosa::v2::nanite::leb128_decode<unsigned long long,std::byte const*>(v30, (unsigned __int8 *)v8);
          uint64_t v30 = v16;
          mimosa::v2::decode_light_path_semantics(v16, v15, __src);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
          *(_OWORD *)__p = *(_OWORD *)__src;
          __p[2] = *(void **)&__src[16];
          memset(__src, 0, 24);
          if (__p[3])
          {
            __p[4] = __p[3];
            operator delete(__p[3]);
          }
          *(_OWORD *)&__p[3] = *(_OWORD *)&__src[24];
          __p[5] = *(void **)&__src[40];
          memset(&__src[24], 0, 24);
          char v17 = (void *)v50;
          if ((void)v50)
          {
            *((void *)&v50 + std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = v50;
            operator delete((void *)v50);
            char v17 = *(void **)&__src[24];
          }
          long long v50 = *(_OWORD *)&__src[48];
          uint64_t v51 = *(void *)&__src[64];
          memset(&__src[48], 0, 24);
          if (v17)
          {
            *(void *)&__src[32] = v17;
            operator delete(v17);
          }
          if (*(void *)__src)
          {
            *(void *)&__src[8] = *(void *)__src;
            operator delete(*(void **)__src);
          }
          break;
        case 8u:
          bzero(v53, 0x33CuLL);
          v53[426] = 0;
          char v54 = 1;
          if (v9 == (unsigned __int8 *)v8)
          {
LABEL_56:
            exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(exception, "attempt to read beyond metadata buffer region");
            __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
          }
          uint64_t v15 = mimosa::v2::nanite::leb128_decode<unsigned long long,std::byte const*>(v9, (unsigned __int8 *)v8);
          uint64_t v30 = v18;
          mimosa::v2::decode_opre(v18, v15, __src);
          memcpy(v53, __src, sizeof(v53));
          break;
        default:
          int v22 = *v4;
          unint64_t v23 = __cxa_allocate_exception(0x10uLL);
          std::to_string(&v27, v22);
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("metadata dictionary key ", &v27, &v28);
          __n128 v24 = std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(" not recognized", &v28, (std::string *)__src);
          MEMORY[0x223C9C340](v23, __src, v24);
          __cxa_throw(v23, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      char v10 = &v30[v15];
LABEL_43:
      uint64_t v30 = v10;
LABEL_44:
      float v4 = v30;
    }
    while (v30 < (unsigned __int8 *)v8);
  }
  if (v4 != (unsigned __int8 *)v8)
  {
    size_t v25 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v25, "something went wrong while parsing the metadata dictionary");
    __cxa_throw(v25, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  uint64_t v19 = *(void *)(a3 + 24);
  if (!v19) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, int *))(*(void *)v19 + 48))(v19, &v32);
  uint64_t v20 = v30;
  std::__optional_destruct_base<mimosa::LightPathSemantics,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)__p);
  if (v48 && v47 < 0) {
    operator delete(v46[0]);
  }
  if (v45 && v44 < 0) {
    operator delete(v43[0]);
  }
  int64_t v6 = v20 - a1;
  if (v42 && v41 < 0) {
    operator delete(v40[0]);
  }
  return v6;
}

void sub_22277708C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a38 < 0) {
    operator delete(__p);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  if (a23 < 0)
  {
    operator delete(a18);
    if ((v39 & 1) == 0)
    {
LABEL_10:
      mimosa::Metadata::~Metadata((void **)&STACK[0x740]);
      _Unwind_Resume(a1);
    }
  }
  else if (!v39)
  {
    goto LABEL_10;
  }
  __cxa_free_exception(v38);
  goto LABEL_10;
}

void mimosa::v2::decode_metadata(std::byte const*,unsigned long,std::function<BOOL ()(mimosa::Metadata const&)>)::$_1::operator()(unsigned __int8 ***a1, std::string *this)
{
  unint64_t v2 = **a1;
  if (v2 == (unsigned __int8 *)a1[1]) {
    goto LABEL_13;
  }
  **a1 = v2 + 1;
  std::string::resize(this, *v2, 0);
  uint64_t v5 = *a1;
  int64_t v6 = (std::string::value_type *)**a1;
  LODWORD(v7) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((v7 & 0x80000000) != 0)
  {
    std::string::size_type size = this->__r_.__value_.__l.__size_;
    if (&v6[size] <= (std::string::value_type *)a1[1])
    {
      unint64_t v9 = (std::string *)this->__r_.__value_.__r.__words[0];
      if (!size) {
        goto LABEL_10;
      }
      do
      {
LABEL_8:
        std::string::value_type v10 = *v6++;
        v9->__r_.__value_.__s.__data_[0] = v10;
        unint64_t v9 = (std::string *)((char *)v9 + 1);
        --size;
      }
      while (size);
      LOBYTE(v7) = *((unsigned char *)&this->__r_.__value_.__s + 23);
      uint64_t v5 = *a1;
      int64_t v6 = (std::string::value_type *)**a1;
      goto LABEL_10;
    }
LABEL_13:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "attempt to read beyond metadata buffer region");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  unint64_t v9 = this;
  if (&v6[size] > (std::string::value_type *)a1[1]) {
    goto LABEL_13;
  }
  if (*((unsigned char *)&this->__r_.__value_.__s + 23)) {
    goto LABEL_8;
  }
LABEL_10:
  std::string::size_type v7 = v7;
  if ((v7 & 0x80u) != 0) {
    std::string::size_type v7 = this->__r_.__value_.__l.__size_;
  }
  char *v5 = (unsigned __int8 *)&v6[v7];
}

void sub_222777284(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

__n128 std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>@<Q0>(char *__s@<X1>, std::string *a2@<X0>, std::string *a3@<X8>)
{
  size_t v6 = strlen(__s);
  std::string::size_type v7 = (__n128 *)std::string::append(a2, __s, v6);
  __n128 result = *v7;
  *a3 = *(std::string *)v7->n128_u8;
  v7->n128_u64[0] = 0;
  v7->n128_u64[1] = 0;
  v7[1].n128_u64[0] = 0;
  return result;
}

__n128 std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>@<Q0>(const char *a1@<X0>, std::string *a2@<X1>, std::string *a3@<X8>)
{
  size_t v6 = strlen(a1);
  std::string::size_type v7 = (__n128 *)std::string::insert(a2, 0, a1, v6);
  __n128 result = *v7;
  *a3 = *(std::string *)v7->n128_u8;
  v7->n128_u64[0] = 0;
  v7->n128_u64[1] = 0;
  v7[1].n128_u64[0] = 0;
  return result;
}

void mimosa::Metadata::~Metadata(void **this)
{
  if (*((unsigned char *)this + 144) && *((char *)this + 143) < 0) {
    operator delete(this[15]);
  }
  if (*((unsigned char *)this + 112) && *((char *)this + 111) < 0) {
    operator delete(this[11]);
  }
  if (*((unsigned char *)this + 80))
  {
    if (*((char *)this + 79) < 0) {
      operator delete(this[7]);
    }
  }
}

char *std::vector<std::byte>::__insert_with_size[abi:ne180100]<std::byte const*,std::byte const*>(uint64_t a1, char *__dst, char *__src, char *a4, int64_t a5)
{
  uint64_t v5 = __dst;
  if (a5 < 1) {
    return v5;
  }
  std::string::value_type v10 = *(char **)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  if (v9 - (uint64_t)v10 < a5)
  {
    unint64_t v11 = *(char **)a1;
    uint64_t v12 = (uint64_t)&v10[a5 - *(void *)a1];
    if (v12 < 0) {
      std::vector<mimosa::OpticalSampleV1>::__throw_length_error[abi:ne180100]();
    }
    size_t v13 = (char *)(__dst - v11);
    unint64_t v14 = v9 - (void)v11;
    if (2 * v14 > v12) {
      uint64_t v12 = 2 * v14;
    }
    if (v14 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v15 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v15 = v12;
    }
    if (v15)
    {
      size_t v16 = v15;
      char v17 = (char *)operator new(v15);
    }
    else
    {
      size_t v16 = 0;
      char v17 = 0;
    }
    std::string v27 = &v13[(void)v17];
    memcpy(&v13[(void)v17], __src, a5);
    std::string v28 = &v13[(void)v17];
    size_t v29 = v16;
    if (v11 != v5)
    {
      do
      {
        v13[(void)v17 - 1] = v13[(void)(v11 - 1)];
        --v13;
      }
      while (v13);
      std::string::value_type v10 = *(char **)(a1 + 8);
      std::string v28 = v17;
    }
    uint64_t v30 = &v27[a5];
    uint64_t v31 = &v17[v29];
    if (v10 != v5) {
      memmove(v30, v5, v10 - v5);
    }
    int v32 = *(char **)a1;
    *(void *)a1 = v28;
    *(void *)(a1 + 8) = &v30[v10 - v5];
    *(void *)(a1 + 16) = v31;
    if (v32) {
      operator delete(v32);
    }
    return v27;
  }
  uint64_t v18 = v10 - __dst;
  if (v10 - __dst >= a5)
  {
    uint64_t v19 = &__src[a5];
    unint64_t v21 = *(char **)(a1 + 8);
LABEL_17:
    int v22 = &v5[a5];
    unint64_t v23 = &v21[-a5];
    __n128 v24 = v21;
    if (&v21[-a5] < v10)
    {
      int64_t v25 = &v10[a5] - v21;
      __n128 v24 = v21;
      do
      {
        char v26 = *v23++;
        *v24++ = v26;
        --v25;
      }
      while (v25);
    }
    *(void *)(a1 + 8) = v24;
    if (v21 != v22) {
      memmove(&v5[a5], v5, v21 - v22);
    }
    if (v19 != __src) {
      memmove(v5, __src, v19 - __src);
    }
    return v5;
  }
  uint64_t v19 = &__src[v18];
  int64_t v20 = a4 - &__src[v18];
  if (a4 != &__src[v18]) {
    memmove(*(void **)(a1 + 8), &__src[v18], a4 - &__src[v18]);
  }
  unint64_t v21 = &v10[v20];
  *(void *)(a1 + 8) = &v10[v20];
  if (v18 >= 1) {
    goto LABEL_17;
  }
  return v5;
}

void std::vector<std::byte>::__append(unint64_t *a1, size_t a2)
{
  uint64_t v5 = (char *)a1[1];
  float v4 = (char *)a1[2];
  if (v4 - v5 >= a2)
  {
    if (a2)
    {
      bzero((void *)a1[1], a2);
      v5 += a2;
    }
    a1[1] = (unint64_t)v5;
  }
  else
  {
    unint64_t v6 = *a1;
    std::string::size_type v7 = &v5[-*a1];
    unint64_t v8 = (unint64_t)&v7[a2];
    if ((uint64_t)&v7[a2] < 0) {
      std::vector<mimosa::OpticalSampleV1>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v9 = (unint64_t)&v4[-v6];
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v10 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v10 = v8;
    }
    if (v10) {
      unint64_t v11 = (unint64_t)operator new(v10);
    }
    else {
      unint64_t v11 = 0;
    }
    uint64_t v12 = &v7[v11];
    size_t v13 = (char *)(v11 + v10);
    bzero(v12, a2);
    if (v5 == (char *)v6)
    {
      unint64_t v11 = (unint64_t)v12;
    }
    else
    {
      unint64_t v14 = &v5[~v6];
      do
      {
        char v15 = *--v5;
        (v14--)[v11] = v15;
      }
      while (v5 != (char *)v6);
      uint64_t v5 = (char *)*a1;
    }
    *a1 = v11;
    a1[1] = (unint64_t)&v12[a2];
    a1[2] = (unint64_t)v13;
    if (v5)
    {
      operator delete(v5);
    }
  }
}

unint64_t **std::back_insert_iterator<std::vector<std::byte>>::operator=[abi:ne180100](unint64_t **a1, unsigned char *a2)
{
  float v4 = *a1;
  unint64_t v6 = (unsigned char *)(*a1)[1];
  unint64_t v5 = (*a1)[2];
  if ((unint64_t)v6 >= v5)
  {
    unint64_t v8 = *v4;
    unint64_t v9 = &v6[-*v4];
    unint64_t v10 = (unint64_t)(v9 + 1);
    if ((uint64_t)(v9 + 1) < 0) {
      std::vector<mimosa::OpticalSampleV1>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = v5 - v8;
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v12 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v12 = v10;
    }
    if (v12) {
      unint64_t v13 = (unint64_t)operator new(v12);
    }
    else {
      unint64_t v13 = 0;
    }
    unint64_t v14 = (char *)(v13 + v12);
    v9[v13] = *a2;
    uint64_t v7 = (uint64_t)&v9[v13 + 1];
    if (v6 == (unsigned char *)v8)
    {
      v13 += (unint64_t)v9;
    }
    else
    {
      char v15 = &v6[~v8];
      do
      {
        char v16 = *--v6;
        (v15--)[v13] = v16;
      }
      while (v6 != (unsigned char *)v8);
      unint64_t v6 = (unsigned char *)*v4;
    }
    unint64_t *v4 = v13;
    v4[1] = v7;
    v4[2] = (unint64_t)v14;
    if (v6) {
      operator delete(v6);
    }
  }
  else
  {
    *unint64_t v6 = *a2;
    uint64_t v7 = (uint64_t)(v6 + 1);
  }
  v4[1] = v7;
  return a1;
}

unint64_t *mimosa::v2::nanite::leb128_encode<std::back_insert_iterator<std::vector<std::byte>>>(unint64_t a1, unint64_t *a2)
{
  unint64_t v3 = a1;
  char v8 = a1 | 0x80;
  LOBYTE(v4) = a1;
  if (a1 >= 0x80)
  {
    do
    {
      unint64_t v4 = v3 >> 7;
      uint64_t v7 = a2;
      std::back_insert_iterator<std::vector<std::byte>>::operator=[abi:ne180100](&v7, &v8);
      char v8 = (v3 >> 7) | 0x80;
      unint64_t v5 = v3 >> 14;
      v3 >>= 7;
    }
    while (v5);
  }
  char v8 = v4 & 0x7F;
  uint64_t v7 = a2;
  std::back_insert_iterator<std::vector<std::byte>>::operator=[abi:ne180100](&v7, &v8);
  return a2;
}

uint64_t mimosa::v2::nanite::leb128_decode<unsigned long long,std::byte const*>(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v3 = 0;
  uint64_t result = 0;
  while (1)
  {
    if (a1 == a2)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::range_error::range_error[abi:ne180100](exception, "no more encoded bytes available");
      uint64_t v7 = (struct type_info *)off_2646269A8;
      char v8 = (void (*)(void *))MEMORY[0x263F8C050];
      goto LABEL_9;
    }
    unsigned int v5 = *a1;
    result |= (unint64_t)(v5 & 0x7F) << v3;
    if (v3 == 63) {
      break;
    }
    ++a1;
    v3 += 7;
    if ((v5 & 0x80) == 0) {
      return result;
    }
  }
  if (v5 >= 2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "invalid input");
    uint64_t v7 = (struct type_info *)MEMORY[0x263F8C1F0];
    char v8 = (void (*)(void *))MEMORY[0x263F8C070];
LABEL_9:
    __cxa_throw(exception, v7, v8);
  }
  return result;
}

void sub_222777960(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::runtime_error *std::range_error::range_error[abi:ne180100](std::runtime_error *a1, const char *a2)
{
  uint64_t result = std::runtime_error::runtime_error(a1, a2);
  result->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x263F8C370] + 16);
  return result;
}

void std::__optional_destruct_base<mimosa::LightPathSemantics,false>::reset[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 72))
  {
    unint64_t v2 = *(void **)(a1 + 48);
    if (v2)
    {
      *(void *)(a1 + 56) = v2;
      operator delete(v2);
    }
    uint64_t v3 = *(void **)(a1 + 24);
    if (v3)
    {
      *(void *)(a1 + 32) = v3;
      operator delete(v3);
    }
    unint64_t v4 = *(void **)a1;
    if (*(void *)a1)
    {
      *(void *)(a1 + 8) = v4;
      operator delete(v4);
    }
    *(unsigned char *)(a1 + 72) = 0;
  }
}

void std::__throw_bad_function_call[abi:ne180100]()
{
  exception = __cxa_allocate_exception(8uLL);
}

void std::bad_function_call::~bad_function_call(std::bad_function_call *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x223C9C430);
}

uint64_t mimosa::v2::encode(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 1704);
  if (v1 == -1) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  unint64_t v4 = &v3;
  return ((uint64_t (*)(char **, uint64_t))*(&off_26D4E4298 + v1))(&v4, a1);
}

void *mimosa::v2::decode_opre@<X0>(unsigned __int8 *a1@<X0>, unint64_t a2@<X1>, _DWORD *a3@<X8>)
{
  uint64_t v79 = *MEMORY[0x263EF8340];
  int v6 = *a1;
  if ((v6 - 4) < 2)
  {
    bzero(__src, 0x2F4uLL);
    if (!a2) {
      mimosa::v2::decode_opre();
    }
    LOBYTE(__src[0]) = v6;
    if (a2 <= 0x34) {
      mimosa::v2::decode_opre();
    }
    *(_OWORD *)((char *)__src + 4) = *(_OWORD *)(a1 + 1);
    *(_OWORD *)((char *)&__src[1] + 4) = *(_OWORD *)(a1 + 17);
    *(_OWORD *)((char *)&__src[2] + 4) = *(_OWORD *)(a1 + 33);
    DWORD1(__src[3]) = *(_DWORD *)(a1 + 49);
    if (a2 - 53 <= 0x33) {
      mimosa::v2::decode_opre();
    }
    *(_OWORD *)((char *)&__src[3] + 8) = *(_OWORD *)(a1 + 53);
    *(_OWORD *)((char *)&__src[4] + 8) = *(_OWORD *)(a1 + 69);
    *(_OWORD *)((char *)&__src[5] + 8) = *(_OWORD *)(a1 + 85);
    DWORD2(__src[6]) = *(_DWORD *)(a1 + 101);
    if (a2 - 105 <= 0x33) {
      mimosa::v2::decode_opre();
    }
    *(_OWORD *)((char *)&__src[6] + 12) = *(_OWORD *)(a1 + 105);
    *(_OWORD *)((char *)&__src[7] + 12) = *(_OWORD *)(a1 + 121);
    *(_OWORD *)((char *)&__src[8] + 12) = *(_OWORD *)(a1 + 137);
    HIDWORD(__src[9]) = *(_DWORD *)(a1 + 153);
    if (a2 - 157 <= 0x33) {
      mimosa::v2::decode_opre();
    }
    __src[10] = *(_OWORD *)(a1 + 157);
    __src[11] = *(_OWORD *)(a1 + 173);
    __src[12] = *(_OWORD *)(a1 + 189);
    LODWORD(__src[13]) = *(_DWORD *)(a1 + 205);
    if (a2 - 209 <= 0x7F) {
      mimosa::v2::decode_opre();
    }
    *(_OWORD *)((char *)&__src[17] + 4) = *(_OWORD *)(a1 + 273);
    *(_OWORD *)((char *)&__src[18] + 4) = *(_OWORD *)(a1 + 289);
    *(_OWORD *)((char *)&__src[19] + 4) = *(_OWORD *)(a1 + 305);
    *(_OWORD *)((char *)&__src[20] + 4) = *(_OWORD *)(a1 + 321);
    *(_OWORD *)((char *)&__src[16] + 4) = *(_OWORD *)(a1 + 257);
    *(_OWORD *)((char *)&__src[13] + 4) = *(_OWORD *)(a1 + 209);
    *(_OWORD *)((char *)&__src[14] + 4) = *(_OWORD *)(a1 + 225);
    *(_OWORD *)((char *)&__src[15] + 4) = *(_OWORD *)(a1 + 241);
    if (a2 - 337 <= 0xF) {
      mimosa::v2::decode_opre();
    }
    *(_OWORD *)((char *)&__src[33] + 4) = *(_OWORD *)(a1 + 337);
    if (a2 - 353 <= 0xCF) {
      mimosa::v2::decode_opre();
    }
    long long v50 = *(_OWORD *)(a1 + 529);
    v78[10] = *(_OWORD *)(a1 + 513);
    v78[11] = v50;
    v78[12] = *(_OWORD *)(a1 + 545);
    long long v51 = *(_OWORD *)(a1 + 465);
    v78[6] = *(_OWORD *)(a1 + 449);
    v78[7] = v51;
    long long v52 = *(_OWORD *)(a1 + 481);
    v78[9] = *(_OWORD *)(a1 + 497);
    v78[8] = v52;
    long long v53 = *(_OWORD *)(a1 + 401);
    v78[2] = *(_OWORD *)(a1 + 385);
    v78[3] = v53;
    long long v54 = *(_OWORD *)(a1 + 417);
    v78[5] = *(_OWORD *)(a1 + 433);
    v78[4] = v54;
    long long v55 = *(_OWORD *)(a1 + 353);
    v78[1] = *(_OWORD *)(a1 + 369);
    v78[0] = v55;
    if (a2 - 561 <= 0x3F) {
      mimosa::v2::decode_opre();
    }
    *(_OWORD *)((char *)&__src[47] + 4) = *(_OWORD *)(a1 + 561);
    *(_OWORD *)((char *)&__src[48] + 4) = *(_OWORD *)(a1 + 577);
    *(_OWORD *)((char *)&__src[49] + 4) = *(_OWORD *)(a1 + 593);
    *(_OWORD *)((char *)&__src[50] + 4) = *(_OWORD *)(a1 + 609);
    if (a2 - 625 <= 3) {
      mimosa::v2::decode_opre();
    }
    DWORD1(__src[51]) = *(_DWORD *)(a1 + 625);
    if (a2 - 629 <= 3) {
      mimosa::v2::decode_opre();
    }
    DWORD2(__src[51]) = *(_DWORD *)(a1 + 629);
    unsigned __int8 v56 = mimosa::OpREv5::n_dce_led_index_map;
    for (uint64_t i = 548; i != 756; i += 16)
    {
      int v58 = *v56++;
      *(_OWORD *)((char *)__src + i) = v78[v58];
    }
    memset(v75, 0, 384);
    mimosa::v2::nanite::Codec<unsigned short,9040ull,1230ull,2050ull,130ull,350ull,30ull,130ull,50ull,60ull,10ull,50ull,20ull,50ull,40ull,30ull,30ull,20ull,40ull,1ull,10ull,1ull,40ull,1ull,10ull,1ull,10ull,1ull,1ull,1ull,10ull,1ull,1ull>::decode<std::__wrap_iter<std::byte const*>,unsigned short *>((uint64_t)(a1 + 633), (uint64_t)&a1[a2], (uint64_t)v75, (uint64_t)&v75[24]);
    uint64_t v59 = 0;
    int v60 = 0;
    char v61 = (char *)&__src[21] + 4;
    unint64_t v62 = (unsigned __int16 *)v75;
    do
    {
      uint64_t v63 = 0;
      unint64_t v64 = v61;
      do
      {
        for (uint64_t j = 0; j != 192; j += 48)
        {
          unsigned int v66 = *v62++;
          v60 += -(v66 & 1) ^ (v66 >> 1);
          v64[j] = v60;
        }
        ++v63;
        v64 += 6;
      }
      while (v63 != 8);
      ++v59;
      ++v61;
    }
    while (v59 != 6);
    uint64_t result = memcpy(a3, __src, 0x33CuLL);
    a3[426] = 0;
  }
  else
  {
    if ((v6 - 7) >= 2)
    {
      if (v6 != 6) {
        mimosa::v2::decode_opre();
      }
      bzero(v75, 0x554uLL);
      if (!a2) {
        mimosa::v2::decode_opre();
      }
      LOBYTE(v75[0]) = 6;
      if (a2 <= 0x34) {
        mimosa::v2::decode_opre();
      }
      *(_OWORD *)((char *)v75 + 4) = *(_OWORD *)(a1 + 1);
      *(_OWORD *)((char *)&v75[1] + 4) = *(_OWORD *)(a1 + 17);
      *(_OWORD *)((char *)&v75[2] + 4) = *(_OWORD *)(a1 + 33);
      DWORD1(v75[3]) = *(_DWORD *)(a1 + 49);
      if (a2 - 53 <= 0x33) {
        mimosa::v2::decode_opre();
      }
      *(_OWORD *)((char *)&v75[3] + 8) = *(_OWORD *)(a1 + 53);
      *(_OWORD *)((char *)&v75[4] + 8) = *(_OWORD *)(a1 + 69);
      *(_OWORD *)((char *)&v75[5] + 8) = *(_OWORD *)(a1 + 85);
      DWORD2(v75[6]) = *(_DWORD *)(a1 + 101);
      if (a2 - 105 <= 0x33) {
        mimosa::v2::decode_opre();
      }
      *(_OWORD *)((char *)&v75[6] + 12) = *(_OWORD *)(a1 + 105);
      *(_OWORD *)((char *)&v75[7] + 12) = *(_OWORD *)(a1 + 121);
      *(_OWORD *)((char *)&v75[8] + 12) = *(_OWORD *)(a1 + 137);
      HIDWORD(v75[9]) = *(_DWORD *)(a1 + 153);
      if (a2 - 157 <= 0x33) {
        mimosa::v2::decode_opre();
      }
      v75[10] = *(_OWORD *)(a1 + 157);
      v75[11] = *(_OWORD *)(a1 + 173);
      v75[12] = *(_OWORD *)(a1 + 189);
      LODWORD(v75[13]) = *(_DWORD *)(a1 + 205);
      if (a2 - 209 <= 0x7F) {
        mimosa::v2::decode_opre();
      }
      *(_OWORD *)((char *)&v75[17] + 4) = *(_OWORD *)(a1 + 273);
      *(_OWORD *)((char *)&v75[18] + 4) = *(_OWORD *)(a1 + 289);
      *(_OWORD *)((char *)&v75[19] + 4) = *(_OWORD *)(a1 + 305);
      *(_OWORD *)((char *)&v75[20] + 4) = *(_OWORD *)(a1 + 321);
      *(_OWORD *)((char *)&v75[16] + 4) = *(_OWORD *)(a1 + 257);
      *(_OWORD *)((char *)&v75[13] + 4) = *(_OWORD *)(a1 + 209);
      *(_OWORD *)((char *)&v75[14] + 4) = *(_OWORD *)(a1 + 225);
      *(_OWORD *)((char *)&v75[15] + 4) = *(_OWORD *)(a1 + 241);
      if (a2 - 337 <= 0xF) {
        mimosa::v2::decode_opre();
      }
      *(_OWORD *)((char *)&v75[85] + 4) = *(_OWORD *)(a1 + 337);
      if (a2 - 353 <= 0xCF) {
        mimosa::v2::decode_opre();
      }
      *(_OWORD *)((char *)&v75[95] + 4) = *(_OWORD *)(a1 + 497);
      *(_OWORD *)((char *)&v75[96] + 4) = *(_OWORD *)(a1 + 513);
      *(_OWORD *)((char *)&v75[97] + 4) = *(_OWORD *)(a1 + 529);
      *(_OWORD *)((char *)&v75[98] + 4) = *(_OWORD *)(a1 + 545);
      *(_OWORD *)((char *)&v75[91] + 4) = *(_OWORD *)(a1 + 433);
      *(_OWORD *)((char *)&v75[92] + 4) = *(_OWORD *)(a1 + 449);
      *(_OWORD *)((char *)&v75[93] + 4) = *(_OWORD *)(a1 + 465);
      *(_OWORD *)((char *)&v75[94] + 4) = *(_OWORD *)(a1 + 481);
      *(_OWORD *)((char *)&v75[87] + 4) = *(_OWORD *)(a1 + 369);
      *(_OWORD *)((char *)&v75[88] + 4) = *(_OWORD *)(a1 + 385);
      *(_OWORD *)((char *)&v75[89] + 4) = *(_OWORD *)(a1 + 401);
      *(_OWORD *)((char *)&v75[90] + 4) = *(_OWORD *)(a1 + 417);
      *(_OWORD *)((char *)&v75[86] + 4) = *(_OWORD *)(a1 + 353);
      if (a2 - 561 <= 0x5F) {
        mimosa::v2::decode_opre();
      }
      *(_OWORD *)((char *)&v75[101] + 4) = *(_OWORD *)(a1 + 593);
      *(_OWORD *)((char *)&v75[102] + 4) = *(_OWORD *)(a1 + 609);
      *(_OWORD *)((char *)&v75[103] + 4) = *(_OWORD *)(a1 + 625);
      *(_OWORD *)((char *)&v75[104] + 4) = *(_OWORD *)(a1 + 641);
      *(_OWORD *)((char *)&v75[99] + 4) = *(_OWORD *)(a1 + 561);
      *(_OWORD *)((char *)&v75[100] + 4) = *(_OWORD *)(a1 + 577);
      if (a2 - 657 <= 3) {
        mimosa::v2::decode_opre();
      }
      DWORD1(v75[105]) = *(_DWORD *)(a1 + 657);
      if (a2 - 661 <= 0xB) {
        mimosa::v2::decode_opre();
      }
      *((void *)&v75[105] + std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = *(void *)(a1 + 661);
      LODWORD(v75[106]) = *(_DWORD *)(a1 + 669);
      if (a2 - 673 <= 3) {
        mimosa::v2::decode_opre();
      }
      DWORD1(v75[106]) = *(_DWORD *)(a1 + 673);
      bzero(__src, 0x800uLL);
      mimosa::v2::nanite::Codec<unsigned short,32860ull,510ull,6330ull,100ull,50ull,180ull,1ull,220ull,1ull,300ull,1ull,290ull,1ull,110ull,1ull,10ull,1ull,1ull>::decode<std::__wrap_iter<std::byte const*>,unsigned short *>((uint64_t)(a1 + 677), (uint64_t)&a1[a2], (uint64_t)__src, (uint64_t)v78);
      uint64_t v67 = 0;
      int v68 = 0;
      uint64_t v69 = (unsigned __int16 *)__src;
      unint64_t v70 = v75;
      do
      {
        uint64_t v71 = 0;
        uint64_t v72 = v70;
        do
        {
          for (uint64_t k = 340; k != 372; ++k)
          {
            unsigned int v74 = *v69++;
            v68 += -(v74 & 1) ^ (v74 >> 1);
            *((unsigned char *)v72 + k) = v68;
          }
          ++v71;
          v72 += 2;
        }
        while (v71 != 8);
        ++v67;
        v70 += 16;
      }
      while (v67 != 4);
      uint64_t result = memcpy(a3, v75, 0x6A8uLL);
      int v49 = 1;
    }
    else
    {
      bzero(v75, 0x650uLL);
      if (!a2) {
        mimosa::v2::decode_opre();
      }
      uint64_t v7 = 0;
      LOBYTE(v75[0]) = v6;
      unint64_t v8 = a2 - 1;
      unint64_t v9 = (int *)(a1 + 1);
      do
      {
        if (v7 != 16)
        {
          if (v8 <= 3) {
            mimosa::v2::decode_opre();
          }
          int v10 = *v9++;
          *(_DWORD *)((char *)v75 + v7 + 4) = v10;
          v8 -= 4;
        }
        v7 += 4;
      }
      while (v7 != 52);
      for (uint64_t m = 0; m != 52; m += 4)
      {
        if (m != 16)
        {
          if (v8 <= 3) {
            mimosa::v2::decode_opre();
          }
          int v12 = *v9++;
          *(_DWORD *)((char *)&v75[3] + m + 8) = v12;
          v8 -= 4;
        }
      }
      for (uint64_t n = 0; n != 52; n += 4)
      {
        if (n != 16)
        {
          if (v8 <= 3) {
            mimosa::v2::decode_opre();
          }
          int v14 = *v9++;
          *(_DWORD *)((char *)&v75[6] + n + 12) = v14;
          v8 -= 4;
        }
      }
      for (iuint64_t i = 0; ii != 52; ii += 4)
      {
        if (ii != 16)
        {
          if (v8 <= 3) {
            mimosa::v2::decode_opre();
          }
          int v16 = *v9++;
          *(_DWORD *)((char *)&v75[10] + ii) = v16;
          v8 -= 4;
        }
      }
      uint64_t v17 = 0;
      uint64_t v18 = (char *)&v75[13] + 4;
      do
      {
        for (juint64_t j = 0; jj != 32; jj += 4)
        {
          if (jj == 4)
          {
            DWORD2(v75[2 * v17 + 13]) = 1065353216;
          }
          else
          {
            if (v8 <= 3) {
              mimosa::v2::decode_opre();
            }
            int v20 = *v9++;
            *(_DWORD *)&v18[jj] = v20;
            v8 -= 4;
          }
        }
        ++v17;
        v18 += 32;
      }
      while (v17 != 4);
      for (uint64_t kk = 0; kk != 3; ++kk)
      {
        if (v8 <= 3) {
          mimosa::v2::decode_opre();
        }
        *(_DWORD *)((char *)&v75[81] + kk * 4 + 4) = v9[kk];
        v8 -= 4;
      }
      uint64_t v22 = 0;
      unint64_t v23 = (char *)&v75[82] + 4;
      __n128 v24 = v9 + 3;
      do
      {
        for (muint64_t m = 0; mm != 16; mm += 4)
        {
          if (v22 != 4)
          {
            if (v8 <= 3) {
              mimosa::v2::decode_opre();
            }
            int v26 = *v24++;
            *(_DWORD *)&v23[mm] = v26;
            v8 -= 4;
          }
        }
        ++v22;
        v23 += 16;
      }
      while (v22 != 13);
      for (nuint64_t n = 0; nn != 6; ++nn)
      {
        if (v8 <= 3) {
          mimosa::v2::decode_opre();
        }
        *(_DWORD *)((char *)&v75[95] + nn * 4 + 4) = v24[nn];
        v8 -= 4;
      }
      uint64_t v28 = 0;
      uint64_t v29 = (uint64_t)(v24 + 11);
      do
      {
        if (v8 <= 3) {
          mimosa::v2::decode_opre();
        }
        *(_DWORD *)((char *)&v75[96] + v28 * 4 + 12) = v24[v28 + 6];
        v8 -= 4;
        v29 += 4;
        ++v28;
      }
      while (v28 != 5);
      uint64_t v30 = 0;
      uint64_t v31 = v24 + 10;
      char v32 = 1;
      do
      {
        if (v8 <= 3) {
          mimosa::v2::decode_opre();
        }
        char v33 = v32;
        char v32 = 0;
        int v34 = v31[1];
        ++v31;
        *((_DWORD *)&v75[98] + v30 + std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = v34;
        v8 -= 4;
        v29 += 4;
        uint64_t v30 = 1;
      }
      while ((v33 & 1) != 0);
      if (v8 <= 3) {
        mimosa::v2::decode_opre();
      }
      HIDWORD(v75[99]) = v31[1];
      if (v8 - 4 <= 0xB) {
        mimosa::v2::decode_opre();
      }
      uint64_t v35 = *((void *)v31 + 1);
      DWORD2(v75[100]) = v31[4];
      *(void *)&v75[100] = v35;
      if ((v8 & 0xFFFFFFFFFFFFFFFCLL) == 0x10) {
        mimosa::v2::decode_opre();
      }
      unint64_t v36 = v8 + 4;
      HIDWORD(v75[100]) = v31[5];
      bzero(__src, 0x780uLL);
      mimosa::v2::nanite::Codec<unsigned short,7032ull,2263ull,269ull,36ull>::decode<std::__wrap_iter<std::byte const*>,unsigned short *>(v29, (uint64_t)v31 + v36, (uint64_t)__src, (uint64_t)&v77);
      uint64_t v37 = 0;
      uint64_t v38 = (char *)&v75[21] + 4;
      int v39 = __src;
      do
      {
        uint64_t v40 = 0;
        char v41 = v38;
        do
        {
          uint64_t v42 = 0;
          BOOL v43 = v41;
          do
          {
            uint64_t v44 = 0;
            LOBYTE(v4std::__function::__value_func<BOOL ()(mimosa::Metadata const&)>::~__value_func[abi:ne180100]((void *)this + 5) = 0;
            uint64_t v46 = v39;
            char v47 = v43;
            do
            {
              __int16 v45 = (char)v45 + (-(*(_WORD *)((unsigned char *)v46 + v44) & 1) ^ (*(_WORD *)((char *)v46 + v44) >> 1));
              *v47++ = v45;
              v44 += 2;
            }
            while (v44 != 20);
            ++v42;
            v43 += 10;
            int v39 = (_OWORD *)((char *)v46 + 20);
          }
          while (v42 != 8);
          ++v40;
          v41 += 80;
        }
        while (v40 != 4);
        ++v37;
        v38 += 320;
        int v39 = (_OWORD *)((char *)v46 + 20);
      }
      while (v37 != 3);
      uint64_t result = memcpy(a3, v75, 0x650uLL);
      int v49 = 2;
    }
    a3[426] = v49;
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<mimosa::v2::encode(std::variant<mimosa::OpREv5,mimosa::OpREv6,mimosa::OpREv7> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,mimosa::OpREv5,mimosa::OpREv6,mimosa::OpREv7> const&>@<X0>(char *a1@<X1>, unint64_t *a2@<X8>)
{
  uint64_t v86 = *MEMORY[0x263EF8340];
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::vector<std::byte>::reserve(a2, 0x33CuLL);
  char v4 = *a1;
  int v6 = (unsigned char *)a2[1];
  unint64_t v5 = a2[2];
  if ((unint64_t)v6 >= v5)
  {
    unint64_t v8 = *a2;
    unint64_t v9 = &v6[-*a2];
    unint64_t v10 = (unint64_t)(v9 + 1);
    if ((uint64_t)(v9 + 1) < 0) {
      std::vector<mimosa::OpticalSampleV1>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = v5 - v8;
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v12 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v12 = v10;
    }
    if (v12) {
      unint64_t v13 = (unint64_t)operator new(v12);
    }
    else {
      unint64_t v13 = 0;
    }
    int v14 = (char *)(v13 + v12);
    v9[v13] = v4;
    uint64_t v7 = (uint64_t)&v9[v13 + 1];
    if (v6 == (unsigned char *)v8)
    {
      v13 += (unint64_t)v9;
    }
    else
    {
      char v15 = &v6[~v8];
      do
      {
        char v16 = *--v6;
        (v15--)[v13] = v16;
      }
      while (v6 != (unsigned char *)v8);
      int v6 = (unsigned char *)*a2;
    }
    *a2 = v13;
    a2[1] = v7;
    a2[2] = (unint64_t)v14;
    if (v6) {
      operator delete(v6);
    }
  }
  else
  {
    *int v6 = v4;
    uint64_t v7 = (uint64_t)(v6 + 1);
  }
  uint64_t v17 = 0;
  a2[1] = v7;
  long long v84 = 0u;
  long long v85 = 0u;
  long long v82 = 0u;
  long long v83 = 0u;
  long long v80 = 0u;
  long long v81 = 0u;
  long long v78 = 0u;
  long long v79 = 0u;
  long long v76 = 0u;
  long long v77 = 0u;
  long long v74 = 0u;
  long long v75 = 0u;
  long long v73 = 0u;
  uint64_t v18 = (long long *)(a1 + 548);
  do
  {
    long long v19 = *v18++;
    *(&v73 + mimosa::OpREv5::n_dce_led_index_map[v17++]) = v19;
  }
  while (v17 != 13);
  unint64_t v20 = *a2;
  unint64_t v21 = v7 - *a2;
  if (v21 > 0xFFFFFFFFFFFFFFCBLL)
  {
    uint64_t v22 = v21 + v20 + 52;
    a2[1] = v22;
  }
  else
  {
    std::vector<std::byte>::__append(a2, 0x34uLL);
    unint64_t v20 = *a2;
    uint64_t v22 = a2[1];
  }
  long long v23 = *(_OWORD *)(a1 + 4);
  long long v24 = *(_OWORD *)(a1 + 20);
  long long v25 = *(_OWORD *)(a1 + 36);
  *(_DWORD *)(v22 - 4) = *((_DWORD *)a1 + 13);
  *(_OWORD *)(v22 - 20) = v25;
  *(_OWORD *)(v22 - 36) = v24;
  *(_OWORD *)(v22 - 52) = v23;
  if (v22 - v20 > 0xFFFFFFFFFFFFFFCBLL)
  {
    uint64_t v26 = v22 + 52;
    a2[1] = v26;
  }
  else
  {
    std::vector<std::byte>::__append(a2, 0x34uLL);
    unint64_t v20 = *a2;
    uint64_t v26 = a2[1];
  }
  long long v27 = *(_OWORD *)(a1 + 56);
  long long v28 = *(_OWORD *)(a1 + 72);
  long long v29 = *(_OWORD *)(a1 + 88);
  *(_DWORD *)(v26 - 4) = *((_DWORD *)a1 + 26);
  *(_OWORD *)(v26 - 20) = v29;
  *(_OWORD *)(v26 - 36) = v28;
  *(_OWORD *)(v26 - 52) = v27;
  if (v26 - v20 > 0xFFFFFFFFFFFFFFCBLL)
  {
    unint64_t v30 = v26 + 52;
    a2[1] = v30;
  }
  else
  {
    std::vector<std::byte>::__append(a2, 0x34uLL);
    unint64_t v20 = *a2;
    unint64_t v30 = a2[1];
  }
  long long v31 = *(_OWORD *)(a1 + 108);
  long long v32 = *(_OWORD *)(a1 + 124);
  long long v33 = *(_OWORD *)(a1 + 140);
  *(_DWORD *)(v30 - 4) = *((_DWORD *)a1 + 39);
  *(_OWORD *)(v30 - 20) = v33;
  *(_OWORD *)(v30 - 36) = v32;
  *(_OWORD *)(v30 - 52) = v31;
  if (v30 - v20 > 0xFFFFFFFFFFFFFFCBLL)
  {
    unint64_t v34 = v30 + 52;
    a2[1] = v34;
  }
  else
  {
    std::vector<std::byte>::__append(a2, 0x34uLL);
    unint64_t v20 = *a2;
    unint64_t v34 = a2[1];
  }
  long long v35 = *((_OWORD *)a1 + 10);
  long long v36 = *((_OWORD *)a1 + 11);
  long long v37 = *((_OWORD *)a1 + 12);
  *(_DWORD *)(v34 - 4) = *((_DWORD *)a1 + 52);
  *(_OWORD *)(v34 - 20) = v37;
  *(_OWORD *)(v34 - 36) = v36;
  *(_OWORD *)(v34 - 52) = v35;
  if (v34 - v20 > 0xFFFFFFFFFFFFFF7FLL)
  {
    unint64_t v38 = v34 + 128;
    a2[1] = v38;
  }
  else
  {
    std::vector<std::byte>::__append(a2, 0x80uLL);
    unint64_t v20 = *a2;
    unint64_t v38 = a2[1];
  }
  long long v39 = *(_OWORD *)(a1 + 212);
  long long v40 = *(_OWORD *)(a1 + 228);
  long long v41 = *(_OWORD *)(a1 + 260);
  *(_OWORD *)(v38 - 96) = *(_OWORD *)(a1 + 244);
  *(_OWORD *)(v38 - 80) = v41;
  *(_OWORD *)(v38 - 128) = v39;
  *(_OWORD *)(v38 - 112) = v40;
  long long v42 = *(_OWORD *)(a1 + 276);
  long long v43 = *(_OWORD *)(a1 + 292);
  long long v44 = *(_OWORD *)(a1 + 324);
  *(_OWORD *)(v38 - 32) = *(_OWORD *)(a1 + 308);
  *(_OWORD *)(v38 - 16) = v44;
  *(_OWORD *)(v38 - 64) = v42;
  *(_OWORD *)(v38 - 48) = v43;
  if (v38 - v20 > 0xFFFFFFFFFFFFFFEFLL)
  {
    unint64_t v45 = v38 + 16;
    a2[1] = v45;
  }
  else
  {
    std::vector<std::byte>::__append(a2, 0x10uLL);
    unint64_t v45 = a2[1];
  }
  *(_OWORD *)(v45 - 16) = *(_OWORD *)(a1 + 532);
  unint64_t v46 = *a2;
  unint64_t v47 = a2[1] - *a2;
  if (v47 > 0xFFFFFFFFFFFFFF2FLL)
  {
    uint64_t v48 = v47 + v46 + 208;
    a2[1] = v48;
  }
  else
  {
    std::vector<std::byte>::__append(a2, 0xD0uLL);
    unint64_t v46 = *a2;
    uint64_t v48 = a2[1];
  }
  long long v49 = v84;
  *(_OWORD *)(v48 - 48) = v83;
  *(_OWORD *)(v48 - 32) = v49;
  *(_OWORD *)(v48 - 16) = v85;
  long long v50 = v80;
  *(_OWORD *)(v48 - 112) = v79;
  *(_OWORD *)(v48 - 96) = v50;
  long long v51 = v82;
  *(_OWORD *)(v48 - 80) = v81;
  *(_OWORD *)(v48 - 64) = v51;
  long long v52 = v76;
  *(_OWORD *)(v48 - 176) = v75;
  *(_OWORD *)(v48 - 160) = v52;
  long long v53 = v78;
  *(_OWORD *)(v48 - 144) = v77;
  *(_OWORD *)(v48 - 128) = v53;
  long long v54 = v74;
  *(_OWORD *)(v48 - 208) = v73;
  *(_OWORD *)(v48 - 192) = v54;
  if (v48 - v46 > 0xFFFFFFFFFFFFFFBFLL)
  {
    uint64_t v55 = v48 + 64;
    a2[1] = v55;
  }
  else
  {
    std::vector<std::byte>::__append(a2, 0x40uLL);
    unint64_t v46 = *a2;
    uint64_t v55 = a2[1];
  }
  long long v56 = *(_OWORD *)(a1 + 756);
  long long v57 = *(_OWORD *)(a1 + 772);
  long long v58 = *(_OWORD *)(a1 + 804);
  *(_OWORD *)(v55 - 32) = *(_OWORD *)(a1 + 788);
  *(_OWORD *)(v55 - 16) = v58;
  *(_OWORD *)(v55 - 64) = v56;
  *(_OWORD *)(v55 - 48) = v57;
  if (v55 - v46 > 0xFFFFFFFFFFFFFFFBLL)
  {
    unint64_t v59 = v55 + 4;
    a2[1] = v59;
  }
  else
  {
    std::vector<std::byte>::__append(a2, 4uLL);
    unint64_t v59 = a2[1];
  }
  *(_DWORD *)(v59 - 4) = *((_DWORD *)a1 + 205);
  if (a2[1] - *a2 > 0xFFFFFFFFFFFFFFFBLL)
  {
    uint64_t v60 = a2[1] + 4;
    a2[1] = v60;
  }
  else
  {
    std::vector<std::byte>::__append(a2, 4uLL);
    uint64_t v60 = a2[1];
  }
  uint64_t v61 = 0;
  char v62 = 0;
  *(_DWORD *)(v60 - 4) = *((_DWORD *)a1 + 206);
  v69[0] = 1;
  v69[1] = a2;
  __int16 v70 = 0;
  char v71 = 0;
  uint64_t v63 = a1 + 340;
  do
  {
    uint64_t v64 = 0;
    v65 = v63;
    do
    {
      for (uint64_t i = 0; i != 192; i += 48)
      {
        char v67 = v65[i];
        unsigned __int16 v72 = (2 * (v67 - v62)) ^ ((v67 - v62) >> 15);
        mimosa::v2::nanite::Codec<unsigned short,9040ull,1230ull,2050ull,130ull,350ull,30ull,130ull,50ull,60ull,10ull,50ull,20ull,50ull,40ull,30ull,30ull,20ull,40ull,1ull,10ull,1ull,40ull,1ull,10ull,1ull,10ull,1ull,1ull,1ull,10ull,1ull,1ull>::Encoder<std::back_insert_iterator<std::vector<std::byte>>>::encode<unsigned short const*>((uint64_t)v69, &v72, (unsigned __int16 *)&v73);
        char v62 = v67;
      }
      ++v64;
      v65 += 6;
    }
    while (v64 != 8);
    ++v61;
    ++v63;
  }
  while (v61 != 6);
  return mimosa::v2::nanite::Codec<unsigned short,9040ull,1230ull,2050ull,130ull,350ull,30ull,130ull,50ull,60ull,10ull,50ull,20ull,50ull,40ull,30ull,30ull,20ull,40ull,1ull,10ull,1ull,40ull,1ull,10ull,1ull,10ull,1ull,1ull,1ull,10ull,1ull,1ull>::Encoder<std::back_insert_iterator<std::vector<std::byte>>>::finalise((uint64_t)v69);
}

void sub_222778B10(_Unwind_Exception *exception_object)
{
  char v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<mimosa::v2::encode(std::variant<mimosa::OpREv5,mimosa::OpREv6,mimosa::OpREv7> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,mimosa::OpREv5,mimosa::OpREv6,mimosa::OpREv7> const&>@<X0>(char *a1@<X1>, unint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::vector<std::byte>::reserve(a2, 0x6A8uLL);
  char v4 = *a1;
  int v6 = (unsigned char *)a2[1];
  unint64_t v5 = a2[2];
  if ((unint64_t)v6 >= v5)
  {
    unint64_t v8 = *a2;
    unint64_t v9 = &v6[-*a2];
    unint64_t v10 = (unint64_t)(v9 + 1);
    if ((uint64_t)(v9 + 1) < 0) {
      std::vector<mimosa::OpticalSampleV1>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = v5 - v8;
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v12 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v12 = v10;
    }
    if (v12) {
      unint64_t v13 = (unint64_t)operator new(v12);
    }
    else {
      unint64_t v13 = 0;
    }
    int v14 = (char *)(v13 + v12);
    v9[v13] = v4;
    uint64_t v7 = (uint64_t)&v9[v13 + 1];
    if (v6 == (unsigned char *)v8)
    {
      v13 += (unint64_t)v9;
    }
    else
    {
      char v15 = &v6[~v8];
      do
      {
        char v16 = *--v6;
        (v15--)[v13] = v16;
      }
      while (v6 != (unsigned char *)v8);
      int v6 = (unsigned char *)*a2;
    }
    *a2 = v13;
    a2[1] = v7;
    a2[2] = (unint64_t)v14;
    if (v6) {
      operator delete(v6);
    }
  }
  else
  {
    *int v6 = v4;
    uint64_t v7 = (uint64_t)(v6 + 1);
  }
  a2[1] = v7;
  unint64_t v17 = *a2;
  unint64_t v18 = v7 - *a2;
  if (v18 > 0xFFFFFFFFFFFFFFCBLL)
  {
    uint64_t v19 = v18 + v17 + 52;
    a2[1] = v19;
  }
  else
  {
    std::vector<std::byte>::__append(a2, 0x34uLL);
    unint64_t v17 = *a2;
    uint64_t v19 = a2[1];
  }
  long long v20 = *(_OWORD *)(a1 + 4);
  long long v21 = *(_OWORD *)(a1 + 20);
  long long v22 = *(_OWORD *)(a1 + 36);
  *(_DWORD *)(v19 - 4) = *((_DWORD *)a1 + 13);
  *(_OWORD *)(v19 - 20) = v22;
  *(_OWORD *)(v19 - 36) = v21;
  *(_OWORD *)(v19 - 52) = v20;
  if (v19 - v17 > 0xFFFFFFFFFFFFFFCBLL)
  {
    uint64_t v23 = v19 + 52;
    a2[1] = v23;
  }
  else
  {
    std::vector<std::byte>::__append(a2, 0x34uLL);
    unint64_t v17 = *a2;
    uint64_t v23 = a2[1];
  }
  long long v24 = *(_OWORD *)(a1 + 56);
  long long v25 = *(_OWORD *)(a1 + 72);
  long long v26 = *(_OWORD *)(a1 + 88);
  *(_DWORD *)(v23 - 4) = *((_DWORD *)a1 + 26);
  *(_OWORD *)(v23 - 20) = v26;
  *(_OWORD *)(v23 - 36) = v25;
  *(_OWORD *)(v23 - 52) = v24;
  if (v23 - v17 > 0xFFFFFFFFFFFFFFCBLL)
  {
    unint64_t v27 = v23 + 52;
    a2[1] = v27;
  }
  else
  {
    std::vector<std::byte>::__append(a2, 0x34uLL);
    unint64_t v17 = *a2;
    unint64_t v27 = a2[1];
  }
  long long v28 = *(_OWORD *)(a1 + 108);
  long long v29 = *(_OWORD *)(a1 + 124);
  long long v30 = *(_OWORD *)(a1 + 140);
  *(_DWORD *)(v27 - 4) = *((_DWORD *)a1 + 39);
  *(_OWORD *)(v27 - 20) = v30;
  *(_OWORD *)(v27 - 36) = v29;
  *(_OWORD *)(v27 - 52) = v28;
  if (v27 - v17 > 0xFFFFFFFFFFFFFFCBLL)
  {
    unint64_t v31 = v27 + 52;
    a2[1] = v31;
  }
  else
  {
    std::vector<std::byte>::__append(a2, 0x34uLL);
    unint64_t v17 = *a2;
    unint64_t v31 = a2[1];
  }
  long long v32 = *((_OWORD *)a1 + 10);
  long long v33 = *((_OWORD *)a1 + 11);
  long long v34 = *((_OWORD *)a1 + 12);
  *(_DWORD *)(v31 - 4) = *((_DWORD *)a1 + 52);
  *(_OWORD *)(v31 - 20) = v34;
  *(_OWORD *)(v31 - 36) = v33;
  *(_OWORD *)(v31 - 52) = v32;
  if (v31 - v17 > 0xFFFFFFFFFFFFFF7FLL)
  {
    unint64_t v35 = v31 + 128;
    a2[1] = v35;
  }
  else
  {
    std::vector<std::byte>::__append(a2, 0x80uLL);
    unint64_t v17 = *a2;
    unint64_t v35 = a2[1];
  }
  long long v36 = *(_OWORD *)(a1 + 212);
  long long v37 = *(_OWORD *)(a1 + 228);
  long long v38 = *(_OWORD *)(a1 + 260);
  *(_OWORD *)(v35 - 96) = *(_OWORD *)(a1 + 244);
  *(_OWORD *)(v35 - 80) = v38;
  *(_OWORD *)(v35 - 128) = v36;
  *(_OWORD *)(v35 - 112) = v37;
  long long v39 = *(_OWORD *)(a1 + 276);
  long long v40 = *(_OWORD *)(a1 + 292);
  long long v41 = *(_OWORD *)(a1 + 324);
  *(_OWORD *)(v35 - 32) = *(_OWORD *)(a1 + 308);
  *(_OWORD *)(v35 - 16) = v41;
  *(_OWORD *)(v35 - 64) = v39;
  *(_OWORD *)(v35 - 48) = v40;
  if (v35 - v17 > 0xFFFFFFFFFFFFFFEFLL)
  {
    unint64_t v42 = v35 + 16;
    a2[1] = v42;
  }
  else
  {
    std::vector<std::byte>::__append(a2, 0x10uLL);
    unint64_t v42 = a2[1];
  }
  *(_OWORD *)(v42 - 16) = *(_OWORD *)(a1 + 1364);
  unint64_t v43 = *a2;
  unint64_t v44 = a2[1] - *a2;
  if (v44 > 0xFFFFFFFFFFFFFF2FLL)
  {
    uint64_t v45 = v44 + v43 + 208;
    a2[1] = v45;
  }
  else
  {
    std::vector<std::byte>::__append(a2, 0xD0uLL);
    unint64_t v43 = *a2;
    uint64_t v45 = a2[1];
  }
  *(_OWORD *)(v45 - 208) = *(_OWORD *)(a1 + 1380);
  long long v46 = *(_OWORD *)(a1 + 1396);
  long long v47 = *(_OWORD *)(a1 + 1412);
  long long v48 = *(_OWORD *)(a1 + 1444);
  *(_OWORD *)(v45 - 160) = *(_OWORD *)(a1 + 1428);
  *(_OWORD *)(v45 - 144) = v48;
  *(_OWORD *)(v45 - 192) = v46;
  *(_OWORD *)(v45 - 176) = v47;
  long long v49 = *(_OWORD *)(a1 + 1460);
  long long v50 = *(_OWORD *)(a1 + 1476);
  long long v51 = *(_OWORD *)(a1 + 1508);
  *(_OWORD *)(v45 - 96) = *(_OWORD *)(a1 + 1492);
  *(_OWORD *)(v45 - 80) = v51;
  *(_OWORD *)(v45 - 128) = v49;
  *(_OWORD *)(v45 - 112) = v50;
  long long v52 = *(_OWORD *)(a1 + 1524);
  long long v53 = *(_OWORD *)(a1 + 1540);
  long long v54 = *(_OWORD *)(a1 + 1572);
  *(_OWORD *)(v45 - 32) = *(_OWORD *)(a1 + 1556);
  *(_OWORD *)(v45 - 16) = v54;
  *(_OWORD *)(v45 - 64) = v52;
  *(_OWORD *)(v45 - 48) = v53;
  if (v45 - v43 > 0xFFFFFFFFFFFFFF9FLL)
  {
    uint64_t v55 = v45 + 96;
    a2[1] = v55;
  }
  else
  {
    std::vector<std::byte>::__append(a2, 0x60uLL);
    unint64_t v43 = *a2;
    uint64_t v55 = a2[1];
  }
  long long v56 = *(_OWORD *)(a1 + 1604);
  *(_OWORD *)(v55 - 96) = *(_OWORD *)(a1 + 1588);
  *(_OWORD *)(v55 - 80) = v56;
  long long v57 = *(_OWORD *)(a1 + 1620);
  long long v58 = *(_OWORD *)(a1 + 1636);
  long long v59 = *(_OWORD *)(a1 + 1668);
  *(_OWORD *)(v55 - 32) = *(_OWORD *)(a1 + 1652);
  *(_OWORD *)(v55 - 16) = v59;
  *(_OWORD *)(v55 - 64) = v57;
  *(_OWORD *)(v55 - 48) = v58;
  if (v55 - v43 > 0xFFFFFFFFFFFFFFFBLL)
  {
    unint64_t v60 = v55 + 4;
    a2[1] = v60;
  }
  else
  {
    std::vector<std::byte>::__append(a2, 4uLL);
    unint64_t v60 = a2[1];
  }
  *(_DWORD *)(v60 - 4) = *((_DWORD *)a1 + 421);
  if (a2[1] - *a2 > 0xFFFFFFFFFFFFFFF3)
  {
    uint64_t v61 = a2[1] + 12;
    a2[1] = v61;
  }
  else
  {
    std::vector<std::byte>::__append(a2, 0xCuLL);
    uint64_t v61 = a2[1];
  }
  uint64_t v62 = v61;
  uint64_t v63 = *((void *)a1 + 211);
  *(_DWORD *)(v62 - 4) = *((_DWORD *)a1 + 424);
  *(void *)(v62 - 12) = v63;
  if (a2[1] - *a2 > 0xFFFFFFFFFFFFFFFBLL)
  {
    uint64_t v64 = a2[1] + 4;
    a2[1] = v64;
  }
  else
  {
    std::vector<std::byte>::__append(a2, 4uLL);
    uint64_t v64 = a2[1];
  }
  uint64_t v65 = 0;
  char v66 = 0;
  *(_DWORD *)(v64 - 4) = *((_DWORD *)a1 + 425);
  v73[0] = 1;
  v73[1] = a2;
  __int16 v74 = 0;
  char v75 = 0;
  char v67 = a1 + 340;
  do
  {
    uint64_t v68 = 0;
    uint64_t v69 = v67;
    do
    {
      for (uint64_t i = 0; i != 32; ++i)
      {
        char v71 = v69[i];
        unsigned __int16 v76 = (2 * (v71 - v66)) ^ ((v71 - v66) >> 15);
        mimosa::v2::nanite::Codec<unsigned short,32860ull,510ull,6330ull,100ull,50ull,180ull,1ull,220ull,1ull,300ull,1ull,290ull,1ull,110ull,1ull,10ull,1ull,1ull>::Encoder<std::back_insert_iterator<std::vector<std::byte>>>::encode<unsigned short const*>((uint64_t)v73, &v76, (unsigned __int16 *)&v77);
        char v66 = v71;
      }
      ++v68;
      v69 += 32;
    }
    while (v68 != 8);
    ++v65;
    v67 += 256;
  }
  while (v65 != 4);
  return mimosa::v2::nanite::Codec<unsigned short,9040ull,1230ull,2050ull,130ull,350ull,30ull,130ull,50ull,60ull,10ull,50ull,20ull,50ull,40ull,30ull,30ull,20ull,40ull,1ull,10ull,1ull,40ull,1ull,10ull,1ull,10ull,1ull,1ull,1ull,10ull,1ull,1ull>::Encoder<std::back_insert_iterator<std::vector<std::byte>>>::finalise((uint64_t)v73);
}

void sub_222779024(_Unwind_Exception *exception_object)
{
  char v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<mimosa::v2::encode(std::variant<mimosa::OpREv5,mimosa::OpREv6,mimosa::OpREv7> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,mimosa::OpREv5,mimosa::OpREv6,mimosa::OpREv7> const&>@<X0>(char *a1@<X1>, unint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::vector<std::byte>::reserve(a2, 0x6A8uLL);
  char v4 = *a1;
  int v6 = (unsigned char *)a2[1];
  unint64_t v5 = a2[2];
  if ((unint64_t)v6 >= v5)
  {
    unint64_t v8 = *a2;
    unint64_t v9 = &v6[-*a2];
    unint64_t v10 = (unint64_t)(v9 + 1);
    if ((uint64_t)(v9 + 1) < 0) {
      std::vector<mimosa::OpticalSampleV1>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = v5 - v8;
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v12 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v12 = v10;
    }
    if (v12) {
      unint64_t v13 = (unint64_t)operator new(v12);
    }
    else {
      unint64_t v13 = 0;
    }
    int v14 = (char *)(v13 + v12);
    v9[v13] = v4;
    uint64_t v7 = (uint64_t)&v9[v13 + 1];
    if (v6 == (unsigned char *)v8)
    {
      v13 += (unint64_t)v9;
    }
    else
    {
      char v15 = &v6[~v8];
      do
      {
        char v16 = *--v6;
        (v15--)[v13] = v16;
      }
      while (v6 != (unsigned char *)v8);
      int v6 = (unsigned char *)*a2;
    }
    *a2 = v13;
    a2[1] = v7;
    a2[2] = (unint64_t)v14;
    if (v6) {
      operator delete(v6);
    }
  }
  else
  {
    *int v6 = v4;
    uint64_t v7 = (uint64_t)(v6 + 1);
  }
  uint64_t v17 = 0;
  a2[1] = v7;
  do
  {
    if (v17 != 16)
    {
      if (a2[1] - *a2 > 0xFFFFFFFFFFFFFFFBLL)
      {
        uint64_t v18 = a2[1] + 4;
        a2[1] = v18;
      }
      else
      {
        std::vector<std::byte>::__append(a2, 4uLL);
        uint64_t v18 = a2[1];
      }
      *(_DWORD *)(v18 - 4) = *(_DWORD *)&a1[v17 + 4];
    }
    v17 += 4;
  }
  while (v17 != 52);
  for (uint64_t i = 0; i != 52; i += 4)
  {
    if (i != 16)
    {
      if (a2[1] - *a2 > 0xFFFFFFFFFFFFFFFBLL)
      {
        uint64_t v20 = a2[1] + 4;
        a2[1] = v20;
      }
      else
      {
        std::vector<std::byte>::__append(a2, 4uLL);
        uint64_t v20 = a2[1];
      }
      *(_DWORD *)(v20 - 4) = *(_DWORD *)&a1[i + 56];
    }
  }
  for (uint64_t j = 0; j != 52; j += 4)
  {
    if (j != 16)
    {
      if (a2[1] - *a2 > 0xFFFFFFFFFFFFFFFBLL)
      {
        uint64_t v22 = a2[1] + 4;
        a2[1] = v22;
      }
      else
      {
        std::vector<std::byte>::__append(a2, 4uLL);
        uint64_t v22 = a2[1];
      }
      *(_DWORD *)(v22 - 4) = *(_DWORD *)&a1[j + 108];
    }
  }
  for (uint64_t k = 0; k != 52; k += 4)
  {
    if (k != 16)
    {
      if (a2[1] - *a2 > 0xFFFFFFFFFFFFFFFBLL)
      {
        uint64_t v24 = a2[1] + 4;
        a2[1] = v24;
      }
      else
      {
        std::vector<std::byte>::__append(a2, 4uLL);
        uint64_t v24 = a2[1];
      }
      *(_DWORD *)(v24 - 4) = *(_DWORD *)&a1[k + 160];
    }
  }
  uint64_t v25 = 0;
  long long v26 = a1 + 212;
  do
  {
    for (uint64_t m = 0; m != 32; m += 4)
    {
      if (m != 4)
      {
        if (a2[1] - *a2 > 0xFFFFFFFFFFFFFFFBLL)
        {
          uint64_t v28 = a2[1] + 4;
          a2[1] = v28;
        }
        else
        {
          std::vector<std::byte>::__append(a2, 4uLL);
          uint64_t v28 = a2[1];
        }
        *(_DWORD *)(v28 - 4) = *(_DWORD *)&v26[m];
      }
    }
    ++v25;
    v26 += 32;
  }
  while (v25 != 4);
  for (uint64_t n = 0; n != 12; n += 4)
  {
    if (a2[1] - *a2 > 0xFFFFFFFFFFFFFFFBLL)
    {
      uint64_t v30 = a2[1] + 4;
      a2[1] = v30;
    }
    else
    {
      std::vector<std::byte>::__append(a2, 4uLL);
      uint64_t v30 = a2[1];
    }
    *(_DWORD *)(v30 - 4) = *(_DWORD *)&a1[n + 1300];
  }
  uint64_t v31 = 0;
  long long v32 = a1 + 1316;
  do
  {
    if (v31 != 4)
    {
      for (iuint64_t i = 0; ii != 16; ii += 4)
      {
        if (a2[1] - *a2 > 0xFFFFFFFFFFFFFFFBLL)
        {
          uint64_t v34 = a2[1] + 4;
          a2[1] = v34;
        }
        else
        {
          std::vector<std::byte>::__append(a2, 4uLL);
          uint64_t v34 = a2[1];
        }
        *(_DWORD *)(v34 - 4) = *(_DWORD *)&v32[ii];
      }
    }
    ++v31;
    v32 += 16;
  }
  while (v31 != 13);
  for (juint64_t j = 0; jj != 24; jj += 4)
  {
    if (a2[1] - *a2 > 0xFFFFFFFFFFFFFFFBLL)
    {
      uint64_t v36 = a2[1] + 4;
      a2[1] = v36;
    }
    else
    {
      std::vector<std::byte>::__append(a2, 4uLL);
      uint64_t v36 = a2[1];
    }
    *(_DWORD *)(v36 - 4) = *(_DWORD *)&a1[jj + 1524];
  }
  for (uint64_t kk = 0; kk != 20; kk += 4)
  {
    if (a2[1] - *a2 > 0xFFFFFFFFFFFFFFFBLL)
    {
      uint64_t v38 = a2[1] + 4;
      a2[1] = v38;
    }
    else
    {
      std::vector<std::byte>::__append(a2, 4uLL);
      uint64_t v38 = a2[1];
    }
    *(_DWORD *)(v38 - 4) = *(_DWORD *)&a1[kk + 1548];
  }
  uint64_t v39 = 0;
  char v40 = 1;
  do
  {
    char v41 = v40;
    if (a2[1] - *a2 > 0xFFFFFFFFFFFFFFFBLL)
    {
      uint64_t v42 = a2[1] + 4;
      a2[1] = v42;
    }
    else
    {
      std::vector<std::byte>::__append(a2, 4uLL);
      uint64_t v42 = a2[1];
    }
    char v40 = 0;
    *(_DWORD *)(v42 - 4) = *(_DWORD *)&a1[4 * v39 + 1572];
    uint64_t v39 = 1;
  }
  while ((v41 & 1) != 0);
  if (a2[1] - *a2 > 0xFFFFFFFFFFFFFFFBLL)
  {
    uint64_t v43 = a2[1] + 4;
    a2[1] = v43;
  }
  else
  {
    std::vector<std::byte>::__append(a2, 4uLL);
    uint64_t v43 = a2[1];
  }
  *(_DWORD *)(v43 - 4) = *((_DWORD *)a1 + 399);
  if (a2[1] - *a2 > 0xFFFFFFFFFFFFFFF3)
  {
    uint64_t v44 = a2[1] + 12;
    a2[1] = v44;
  }
  else
  {
    std::vector<std::byte>::__append(a2, 0xCuLL);
    uint64_t v44 = a2[1];
  }
  uint64_t v45 = v44;
  uint64_t v46 = *((void *)a1 + 200);
  *(_DWORD *)(v45 - 4) = *((_DWORD *)a1 + 402);
  *(void *)(v45 - 12) = v46;
  if (a2[1] - *a2 > 0xFFFFFFFFFFFFFFFBLL)
  {
    uint64_t v47 = a2[1] + 4;
    a2[1] = v47;
  }
  else
  {
    std::vector<std::byte>::__append(a2, 4uLL);
    uint64_t v47 = a2[1];
  }
  uint64_t v48 = 0;
  *(_DWORD *)(v47 - 4) = *((_DWORD *)a1 + 403);
  v58[0] = 1;
  v58[1] = a2;
  __int16 v59 = 0;
  char v60 = 0;
  long long v49 = a1 + 340;
  do
  {
    uint64_t v50 = 0;
    long long v51 = v49;
    do
    {
      uint64_t v52 = 0;
      long long v53 = v51;
      do
      {
        uint64_t v54 = 0;
        char v55 = 0;
        do
        {
          char v56 = v53[v54];
          unsigned __int16 v61 = (2 * (v56 - v55)) ^ ((v56 - v55) >> 15);
          mimosa::v2::nanite::Codec<unsigned short,7032ull,2263ull,269ull,36ull>::Encoder<std::back_insert_iterator<std::vector<std::byte>>>::encode<unsigned short const*>((uint64_t)v58, &v61, (unsigned __int16 *)&v62);
          char v55 = v56;
          ++v54;
        }
        while (v54 != 10);
        ++v52;
        v53 += 10;
      }
      while (v52 != 8);
      ++v50;
      v51 += 80;
    }
    while (v50 != 4);
    ++v48;
    v49 += 320;
  }
  while (v48 != 3);
  return mimosa::v2::nanite::Codec<unsigned short,9040ull,1230ull,2050ull,130ull,350ull,30ull,130ull,50ull,60ull,10ull,50ull,20ull,50ull,40ull,30ull,30ull,20ull,40ull,1ull,10ull,1ull,40ull,1ull,10ull,1ull,10ull,1ull,1ull,1ull,10ull,1ull,1ull>::Encoder<std::back_insert_iterator<std::vector<std::byte>>>::finalise((uint64_t)v58);
}

void sub_222779690(_Unwind_Exception *exception_object)
{
  char v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mimosa::v2::nanite::Codec<unsigned short,9040ull,1230ull,2050ull,130ull,350ull,30ull,130ull,50ull,60ull,10ull,50ull,20ull,50ull,40ull,30ull,30ull,20ull,40ull,1ull,10ull,1ull,40ull,1ull,10ull,1ull,10ull,1ull,1ull,1ull,10ull,1ull,1ull>::Encoder<std::back_insert_iterator<std::vector<std::byte>>>::finalise(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 16))
  {
    *(unsigned char *)(a1 + 16) = 1;
    unint64_t v2 = *(unint64_t **)a1;
    if (*(void *)a1)
    {
      do
      {
        mimosa::v2::nanite::Codec<unsigned short,9040ull,1230ull,2050ull,130ull,350ull,30ull,130ull,50ull,60ull,10ull,50ull,20ull,50ull,40ull,30ull,30ull,20ull,40ull,1ull,10ull,1ull,40ull,1ull,10ull,1ull,10ull,1ull,1ull,1ull,10ull,1ull,1ull>::Encoder<std::back_insert_iterator<std::vector<std::byte>>>::write_bits((unint64_t **)a1, (unint64_t)v2, 12);
        char v3 = *(unint64_t **)a1;
        unint64_t v2 = (unint64_t *)(*(void *)a1 >> 12);
        *(void *)a1 = v2;
      }
      while ((unint64_t)v3 > 0xFFF);
    }
    unsigned int v4 = *(unsigned __int8 *)(a1 + 18);
    if (v4 <= 5) {
      char v5 = 5;
    }
    else {
      char v5 = 13;
    }
    unsigned __int8 v6 = v5 - v4;
    mimosa::v2::nanite::Codec<unsigned short,9040ull,1230ull,2050ull,130ull,350ull,30ull,130ull,50ull,60ull,10ull,50ull,20ull,50ull,40ull,30ull,30ull,20ull,40ull,1ull,10ull,1ull,40ull,1ull,10ull,1ull,10ull,1ull,1ull,1ull,10ull,1ull,1ull>::Encoder<std::back_insert_iterator<std::vector<std::byte>>>::write_bits((unint64_t **)a1, 0, (v5 - v4));
    mimosa::v2::nanite::Codec<unsigned short,9040ull,1230ull,2050ull,130ull,350ull,30ull,130ull,50ull,60ull,10ull,50ull,20ull,50ull,40ull,30ull,30ull,20ull,40ull,1ull,10ull,1ull,40ull,1ull,10ull,1ull,10ull,1ull,1ull,1ull,10ull,1ull,1ull>::Encoder<std::back_insert_iterator<std::vector<std::byte>>>::write_bits((unint64_t **)a1, v6, 3);
  }
  return *(void *)(a1 + 8);
}

uint64_t mimosa::v2::nanite::Codec<unsigned short,9040ull,1230ull,2050ull,130ull,350ull,30ull,130ull,50ull,60ull,10ull,50ull,20ull,50ull,40ull,30ull,30ull,20ull,40ull,1ull,10ull,1ull,40ull,1ull,10ull,1ull,10ull,1ull,1ull,1ull,10ull,1ull,1ull>::Encoder<std::back_insert_iterator<std::vector<std::byte>>>::encode<unsigned short const*>(uint64_t a1, unsigned __int16 *a2, unsigned __int16 *a3)
{
  if (*(unsigned char *)(a1 + 16))
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "encode called after instance has been finalised");
    __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  for (unint64_t i = *(void *)a1; a2 != a3; unint64_t i = v19 | ((i / v18) << 12))
  {
    unsigned int v8 = *a2++;
    uint64_t v7 = v8;
    if (v8 >= 0xF8uLL)
    {
      if (v7 < 0x1F8) {
        uint64_t v10 = 248;
      }
      else {
        uint64_t v10 = 249;
      }
      unint64_t v11 = (0x101010101010101uLL >> (-8 * v10) << 8) | 0xF8;
      if (v7 < 0x1F8) {
        unint64_t v11 = 248;
      }
      int v12 = v10 + 8;
      unint64_t v13 = v7 - v11;
      do
      {
        if (i >= 0x10000)
        {
          unint64_t v14 = i >> 12;
          mimosa::v2::nanite::Codec<unsigned short,9040ull,1230ull,2050ull,130ull,350ull,30ull,130ull,50ull,60ull,10ull,50ull,20ull,50ull,40ull,30ull,30ull,20ull,40ull,1ull,10ull,1ull,40ull,1ull,10ull,1ull,10ull,1ull,1ull,1ull,10ull,1ull,1ull>::Encoder<std::back_insert_iterator<std::vector<std::byte>>>::write_bits((unint64_t **)a1, i, 12);
          unint64_t i = v14;
        }
        uint64_t v15 = 16 * v13;
        if (!(_BYTE)v13) {
          uint64_t v15 = 0;
        }
        unint64_t i = v15 & 0xF000000000000FF0 | i & 0xF | (((i >> 4) & 0xFFFFFFFFFFFFLL) << 12);
        v13 >>= 8;
      }
      while (v12-- != 0);
      char v9 = 1;
      uint64_t v7 = v10;
    }
    else
    {
      char v9 = v7;
    }
    unint64_t v17 = i >> 12;
    unint64_t v18 = mimosa::v2::nanite::Codec<unsigned short,9040ull,1230ull,2050ull,130ull,350ull,30ull,130ull,50ull,60ull,10ull,50ull,20ull,50ull,40ull,30ull,30ull,20ull,40ull,1ull,10ull,1ull,40ull,1ull,10ull,1ull,10ull,1ull,1ull,1ull,10ull,1ull,1ull>::scaled_probabilities[v7];
    if (i >> 12 >= v18)
    {
      mimosa::v2::nanite::Codec<unsigned short,9040ull,1230ull,2050ull,130ull,350ull,30ull,130ull,50ull,60ull,10ull,50ull,20ull,50ull,40ull,30ull,30ull,20ull,40ull,1ull,10ull,1ull,40ull,1ull,10ull,1ull,10ull,1ull,1ull,1ull,10ull,1ull,1ull>::Encoder<std::back_insert_iterator<std::vector<std::byte>>>::write_bits((unint64_t **)a1, i, 12);
      unint64_t i = v17;
    }
    unint64_t v19 = i % v18;
    if (v9) {
      v19 += mimosa::v2::nanite::Codec<unsigned short,9040ull,1230ull,2050ull,130ull,350ull,30ull,130ull,50ull,60ull,10ull,50ull,20ull,50ull,40ull,30ull,30ull,20ull,40ull,1ull,10ull,1ull,40ull,1ull,10ull,1ull,10ull,1ull,1ull,1ull,10ull,1ull,1ull>::cumulative_scaled_probabilities[(v7 - 1)];
    }
  }
  *(void *)a1 = i;
  return *(void *)(a1 + 8);
}

void sub_222779908(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unint64_t **mimosa::v2::nanite::Codec<unsigned short,9040ull,1230ull,2050ull,130ull,350ull,30ull,130ull,50ull,60ull,10ull,50ull,20ull,50ull,40ull,30ull,30ull,20ull,40ull,1ull,10ull,1ull,40ull,1ull,10ull,1ull,10ull,1ull,1ull,1ull,10ull,1ull,1ull>::Encoder<std::back_insert_iterator<std::vector<std::byte>>>::write_bits(unint64_t **result, unint64_t a2, int a3)
{
  if (a3)
  {
    unsigned int v4 = result;
    int v5 = *((unsigned __int8 *)result + 18);
    unsigned __int8 v6 = a3 - 1;
    do
    {
      int v7 = (a2 >> v6) & 1 | (2 * *((unsigned __int8 *)v4 + 17));
      *((unsigned char *)v4 + 17) = (a2 >> v6) & 1 | (2 * *((unsigned char *)v4 + 17));
      *((unsigned char *)v4 + 18) = ++v5;
      if (v5 == 8)
      {
        char v10 = v7;
        char v9 = v4[1];
        uint64_t result = std::back_insert_iterator<std::vector<std::byte>>::operator=[abi:ne180100](&v9, &v10);
        int v5 = 0;
        *((unsigned char *)v4 + 18) = 0;
      }
    }
    while ((unint64_t)v6--);
  }
  return result;
}

uint64_t mimosa::v2::nanite::Codec<unsigned short,32860ull,510ull,6330ull,100ull,50ull,180ull,1ull,220ull,1ull,300ull,1ull,290ull,1ull,110ull,1ull,10ull,1ull,1ull>::Encoder<std::back_insert_iterator<std::vector<std::byte>>>::encode<unsigned short const*>(uint64_t a1, unsigned __int16 *a2, unsigned __int16 *a3)
{
  if (*(unsigned char *)(a1 + 16))
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "encode called after instance has been finalised");
    __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  for (unint64_t i = *(void *)a1; a2 != a3; unint64_t i = v19 | ((i / v18) << 12))
  {
    unsigned int v8 = *a2++;
    uint64_t v7 = v8;
    if (v8 >= 0xF8uLL)
    {
      if (v7 < 0x1F8) {
        uint64_t v10 = 248;
      }
      else {
        uint64_t v10 = 249;
      }
      unint64_t v11 = (0x101010101010101uLL >> (-8 * v10) << 8) | 0xF8;
      if (v7 < 0x1F8) {
        unint64_t v11 = 248;
      }
      int v12 = v10 + 8;
      unint64_t v13 = v7 - v11;
      do
      {
        if (i >= 0x10000)
        {
          unint64_t v14 = i >> 12;
          mimosa::v2::nanite::Codec<unsigned short,9040ull,1230ull,2050ull,130ull,350ull,30ull,130ull,50ull,60ull,10ull,50ull,20ull,50ull,40ull,30ull,30ull,20ull,40ull,1ull,10ull,1ull,40ull,1ull,10ull,1ull,10ull,1ull,1ull,1ull,10ull,1ull,1ull>::Encoder<std::back_insert_iterator<std::vector<std::byte>>>::write_bits((unint64_t **)a1, i, 12);
          unint64_t i = v14;
        }
        uint64_t v15 = 16 * v13;
        if (!(_BYTE)v13) {
          uint64_t v15 = 0;
        }
        unint64_t i = v15 & 0xF000000000000FF0 | i & 0xF | (((i >> 4) & 0xFFFFFFFFFFFFLL) << 12);
        v13 >>= 8;
      }
      while (v12-- != 0);
      char v9 = 1;
      uint64_t v7 = v10;
    }
    else
    {
      char v9 = v7;
    }
    unint64_t v17 = i >> 12;
    unint64_t v18 = mimosa::v2::nanite::Codec<unsigned short,32860ull,510ull,6330ull,100ull,50ull,180ull,1ull,220ull,1ull,300ull,1ull,290ull,1ull,110ull,1ull,10ull,1ull,1ull>::scaled_probabilities[v7];
    if (i >> 12 >= v18)
    {
      mimosa::v2::nanite::Codec<unsigned short,9040ull,1230ull,2050ull,130ull,350ull,30ull,130ull,50ull,60ull,10ull,50ull,20ull,50ull,40ull,30ull,30ull,20ull,40ull,1ull,10ull,1ull,40ull,1ull,10ull,1ull,10ull,1ull,1ull,1ull,10ull,1ull,1ull>::Encoder<std::back_insert_iterator<std::vector<std::byte>>>::write_bits((unint64_t **)a1, i, 12);
      unint64_t i = v17;
    }
    unint64_t v19 = i % v18;
    if (v9) {
      v19 += mimosa::v2::nanite::Codec<unsigned short,32860ull,510ull,6330ull,100ull,50ull,180ull,1ull,220ull,1ull,300ull,1ull,290ull,1ull,110ull,1ull,10ull,1ull,1ull>::cumulative_scaled_probabilities[(v7 - 1)];
    }
  }
  *(void *)a1 = i;
  return *(void *)(a1 + 8);
}

void sub_222779B44(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t mimosa::v2::nanite::Codec<unsigned short,7032ull,2263ull,269ull,36ull>::Encoder<std::back_insert_iterator<std::vector<std::byte>>>::encode<unsigned short const*>(uint64_t a1, unsigned __int16 *a2, unsigned __int16 *a3)
{
  if (*(unsigned char *)(a1 + 16))
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "encode called after instance has been finalised");
    __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  for (unint64_t i = *(void *)a1; a2 != a3; unint64_t i = v19 | ((i / v18) << 12))
  {
    unsigned int v8 = *a2++;
    uint64_t v7 = v8;
    if (v8 >= 0xF8uLL)
    {
      if (v7 < 0x1F8) {
        uint64_t v10 = 248;
      }
      else {
        uint64_t v10 = 249;
      }
      unint64_t v11 = (0x101010101010101uLL >> (-8 * v10) << 8) | 0xF8;
      if (v7 < 0x1F8) {
        unint64_t v11 = 248;
      }
      int v12 = v10 + 8;
      unint64_t v13 = v7 - v11;
      do
      {
        if (i >= 0x10000)
        {
          unint64_t v14 = i >> 12;
          mimosa::v2::nanite::Codec<unsigned short,9040ull,1230ull,2050ull,130ull,350ull,30ull,130ull,50ull,60ull,10ull,50ull,20ull,50ull,40ull,30ull,30ull,20ull,40ull,1ull,10ull,1ull,40ull,1ull,10ull,1ull,10ull,1ull,1ull,1ull,10ull,1ull,1ull>::Encoder<std::back_insert_iterator<std::vector<std::byte>>>::write_bits((unint64_t **)a1, i, 12);
          unint64_t i = v14;
        }
        uint64_t v15 = 16 * v13;
        if (!(_BYTE)v13) {
          uint64_t v15 = 0;
        }
        unint64_t i = v15 & 0xF000000000000FF0 | i & 0xF | (((i >> 4) & 0xFFFFFFFFFFFFLL) << 12);
        v13 >>= 8;
      }
      while (v12-- != 0);
      char v9 = 1;
      uint64_t v7 = v10;
    }
    else
    {
      char v9 = v7;
    }
    unint64_t v17 = i >> 12;
    unint64_t v18 = mimosa::v2::nanite::Codec<unsigned short,7032ull,2263ull,269ull,36ull>::scaled_probabilities[v7];
    if (i >> 12 >= v18)
    {
      mimosa::v2::nanite::Codec<unsigned short,9040ull,1230ull,2050ull,130ull,350ull,30ull,130ull,50ull,60ull,10ull,50ull,20ull,50ull,40ull,30ull,30ull,20ull,40ull,1ull,10ull,1ull,40ull,1ull,10ull,1ull,10ull,1ull,1ull,1ull,10ull,1ull,1ull>::Encoder<std::back_insert_iterator<std::vector<std::byte>>>::write_bits((unint64_t **)a1, i, 12);
      unint64_t i = v17;
    }
    unint64_t v19 = i % v18;
    if (v9) {
      v19 += mimosa::v2::nanite::Codec<unsigned short,7032ull,2263ull,269ull,36ull>::cumulative_scaled_probabilities[(v7 - 1)];
    }
  }
  *(void *)a1 = i;
  return *(void *)(a1 + 8);
}

void sub_222779CE8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t mimosa::v2::nanite::Codec<unsigned short,9040ull,1230ull,2050ull,130ull,350ull,30ull,130ull,50ull,60ull,10ull,50ull,20ull,50ull,40ull,30ull,30ull,20ull,40ull,1ull,10ull,1ull,40ull,1ull,10ull,1ull,10ull,1ull,1ull,1ull,10ull,1ull,1ull>::decode<std::__wrap_iter<std::byte const*>,unsigned short *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v4 = 0;
  unint64_t v5 = 0;
  unint64_t v6 = 0;
  int v7 = 3;
  do
  {
    if (!v4)
    {
      if (a2 == result)
      {
LABEL_54:
        exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "no more encoded bytes available");
        __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      unsigned int v8 = *(unsigned __int8 *)--a2;
      unint64_t v5 = v8;
      char v4 = 8;
    }
    *((void *)&v9 + std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = v5;
    *(void *)&long long v9 = v6;
    unint64_t v6 = v9 >> 1;
    v5 >>= 1;
    --v4;
    --v7;
  }
  while ((_BYTE)v7);
  for (unint64_t i = v6 >> 61; (_BYTE)i; LODWORD(i) = i - 1)
  {
    if (!v4)
    {
      if (a2 == result) {
        goto LABEL_54;
      }
      unsigned int v11 = *(unsigned __int8 *)--a2;
      unint64_t v5 = v11;
      char v4 = 8;
    }
    v5 >>= 1;
    --v4;
  }
  unint64_t v12 = 0;
  int v13 = 12;
  do
  {
    if (!v4)
    {
      if (a2 == result) {
        goto LABEL_54;
      }
      unsigned int v14 = *(unsigned __int8 *)--a2;
      unint64_t v5 = v14;
      char v4 = 8;
    }
    *((void *)&v15 + std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = v5;
    *(void *)&long long v15 = v12;
    unint64_t v12 = v15 >> 1;
    v5 >>= 1;
    --v4;
    --v13;
  }
  while ((_BYTE)v13);
  unint64_t v16 = v12 >> 52;
  if (v4 || a2 != result)
  {
    uint64_t v17 = 0;
    int v18 = 12;
    do
    {
      if (!v4)
      {
        if (a2 == result) {
          goto LABEL_54;
        }
        unsigned int v19 = *(unsigned __int8 *)--a2;
        unint64_t v5 = v19;
        char v4 = 8;
      }
      *((void *)&v20 + std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = v5;
      *(void *)&long long v20 = v17;
      uint64_t v17 = v20 >> 1;
      v5 >>= 1;
      --v4;
      --v18;
    }
    while ((_BYTE)v18);
    *((void *)&v21 + std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = v16;
    *(void *)&long long v21 = v17;
    unint64_t v16 = v21 >> 52;
  }
  else
  {
    char v4 = 0;
    a2 = result;
  }
  if (a4 != a3)
  {
    char v22 = 0;
    LOWORD(v23) = 0;
    __int16 v24 = 0;
    do
    {
      unsigned __int16 v25 = v16 & 0xFFF;
      unint64_t v26 = v16 >> 12;
      if (v22)
      {
        __int16 v24 = (v24 << 8) | (v16 >> 4);
        unint64_t v16 = 16 * v26 + (unsigned __int16)(v25 - 16 * (v16 >> 4));
        if (!--v22)
        {
          char v22 = 0;
          *(_WORD *)(a4 - 2) = v24 + v23;
          a4 -= 2;
          __int16 v24 = 0;
        }
        goto LABEL_42;
      }
      uint64_t v27 = mimosa::v2::nanite::Codec<unsigned short,9040ull,1230ull,2050ull,130ull,350ull,30ull,130ull,50ull,60ull,10ull,50ull,20ull,50ull,40ull,30ull,30ull,20ull,40ull,1ull,10ull,1ull,40ull,1ull,10ull,1ull,10ull,1ull,1ull,1ull,10ull,1ull,1ull>::decode_table[v16 & 0xFFF];
      if (v27)
      {
        v25 -= mimosa::v2::nanite::Codec<unsigned short,9040ull,1230ull,2050ull,130ull,350ull,30ull,130ull,50ull,60ull,10ull,50ull,20ull,50ull,40ull,30ull,30ull,20ull,40ull,1ull,10ull,1ull,40ull,1ull,10ull,1ull,10ull,1ull,1ull,1ull,10ull,1ull,1ull>::cumulative_scaled_probabilities[(v27 - 1)];
        if (v27 >= 0xF8)
        {
          char v22 = v27 + 9;
          unint64_t v23 = (0x101010101010101uLL >> (-8 * v27) << 8) | 0xF8;
          if (v27 == 248) {
            uint64_t v28 = 248;
          }
          else {
            uint64_t v28 = v27;
          }
          if (v27 == 248)
          {
            LOWORD(v23) = 248;
            char v22 = 1;
          }
          goto LABEL_41;
        }
        uint64_t v28 = v27;
      }
      else
      {
        uint64_t v28 = 0;
      }
      char v22 = 0;
      *(_WORD *)(a4 - 2) = v27;
      a4 -= 2;
LABEL_41:
      unint64_t v16 = v26
          * mimosa::v2::nanite::Codec<unsigned short,9040ull,1230ull,2050ull,130ull,350ull,30ull,130ull,50ull,60ull,10ull,50ull,20ull,50ull,40ull,30ull,30ull,20ull,40ull,1ull,10ull,1ull,40ull,1ull,10ull,1ull,10ull,1ull,1ull,1ull,10ull,1ull,1ull>::scaled_probabilities[v28]
          + v25;
LABEL_42:
      if (v16 <= 0xFFF)
      {
        if (v4 || a2 != result)
        {
          uint64_t v29 = 0;
          int v30 = 12;
          do
          {
            if (!v4)
            {
              if (a2 == result) {
                goto LABEL_54;
              }
              unsigned int v31 = *(unsigned __int8 *)--a2;
              unint64_t v5 = v31;
              char v4 = 8;
            }
            *((void *)&v32 + std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = v5;
            *(void *)&long long v32 = v29;
            uint64_t v29 = v32 >> 1;
            v5 >>= 1;
            --v4;
            --v30;
          }
          while ((_BYTE)v30);
          *((void *)&v33 + std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = v16;
          *(void *)&long long v33 = v29;
          unint64_t v16 = v33 >> 52;
        }
        else
        {
          char v4 = 0;
          a2 = result;
        }
      }
    }
    while (a4 != a3);
  }
  return result;
}

void sub_22277A020(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t mimosa::v2::nanite::Codec<unsigned short,32860ull,510ull,6330ull,100ull,50ull,180ull,1ull,220ull,1ull,300ull,1ull,290ull,1ull,110ull,1ull,10ull,1ull,1ull>::decode<std::__wrap_iter<std::byte const*>,unsigned short *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v4 = 0;
  unint64_t v5 = 0;
  unint64_t v6 = 0;
  int v7 = 3;
  do
  {
    if (!v4)
    {
      if (a2 == result)
      {
LABEL_54:
        exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "no more encoded bytes available");
        __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      unsigned int v8 = *(unsigned __int8 *)--a2;
      unint64_t v5 = v8;
      char v4 = 8;
    }
    *((void *)&v9 + std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = v5;
    *(void *)&long long v9 = v6;
    unint64_t v6 = v9 >> 1;
    v5 >>= 1;
    --v4;
    --v7;
  }
  while ((_BYTE)v7);
  for (unint64_t i = v6 >> 61; (_BYTE)i; LODWORD(i) = i - 1)
  {
    if (!v4)
    {
      if (a2 == result) {
        goto LABEL_54;
      }
      unsigned int v11 = *(unsigned __int8 *)--a2;
      unint64_t v5 = v11;
      char v4 = 8;
    }
    v5 >>= 1;
    --v4;
  }
  unint64_t v12 = 0;
  int v13 = 12;
  do
  {
    if (!v4)
    {
      if (a2 == result) {
        goto LABEL_54;
      }
      unsigned int v14 = *(unsigned __int8 *)--a2;
      unint64_t v5 = v14;
      char v4 = 8;
    }
    *((void *)&v15 + std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = v5;
    *(void *)&long long v15 = v12;
    unint64_t v12 = v15 >> 1;
    v5 >>= 1;
    --v4;
    --v13;
  }
  while ((_BYTE)v13);
  unint64_t v16 = v12 >> 52;
  if (v4 || a2 != result)
  {
    uint64_t v17 = 0;
    int v18 = 12;
    do
    {
      if (!v4)
      {
        if (a2 == result) {
          goto LABEL_54;
        }
        unsigned int v19 = *(unsigned __int8 *)--a2;
        unint64_t v5 = v19;
        char v4 = 8;
      }
      *((void *)&v20 + std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = v5;
      *(void *)&long long v20 = v17;
      uint64_t v17 = v20 >> 1;
      v5 >>= 1;
      --v4;
      --v18;
    }
    while ((_BYTE)v18);
    *((void *)&v21 + std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = v16;
    *(void *)&long long v21 = v17;
    unint64_t v16 = v21 >> 52;
  }
  else
  {
    char v4 = 0;
    a2 = result;
  }
  if (a4 != a3)
  {
    char v22 = 0;
    LOWORD(v23) = 0;
    __int16 v24 = 0;
    do
    {
      unsigned __int16 v25 = v16 & 0xFFF;
      unint64_t v26 = v16 >> 12;
      if (v22)
      {
        __int16 v24 = (v24 << 8) | (v16 >> 4);
        unint64_t v16 = 16 * v26 + (unsigned __int16)(v25 - 16 * (v16 >> 4));
        if (!--v22)
        {
          char v22 = 0;
          *(_WORD *)(a4 - 2) = v24 + v23;
          a4 -= 2;
          __int16 v24 = 0;
        }
        goto LABEL_42;
      }
      uint64_t v27 = mimosa::v2::nanite::Codec<unsigned short,32860ull,510ull,6330ull,100ull,50ull,180ull,1ull,220ull,1ull,300ull,1ull,290ull,1ull,110ull,1ull,10ull,1ull,1ull>::decode_table[v16 & 0xFFF];
      if (v27)
      {
        v25 -= mimosa::v2::nanite::Codec<unsigned short,32860ull,510ull,6330ull,100ull,50ull,180ull,1ull,220ull,1ull,300ull,1ull,290ull,1ull,110ull,1ull,10ull,1ull,1ull>::cumulative_scaled_probabilities[(v27 - 1)];
        if (v27 >= 0xF8)
        {
          char v22 = v27 + 9;
          unint64_t v23 = (0x101010101010101uLL >> (-8 * v27) << 8) | 0xF8;
          if (v27 == 248) {
            uint64_t v28 = 248;
          }
          else {
            uint64_t v28 = v27;
          }
          if (v27 == 248)
          {
            LOWORD(v23) = 248;
            char v22 = 1;
          }
          goto LABEL_41;
        }
        uint64_t v28 = v27;
      }
      else
      {
        uint64_t v28 = 0;
      }
      char v22 = 0;
      *(_WORD *)(a4 - 2) = v27;
      a4 -= 2;
LABEL_41:
      unint64_t v16 = v26
          * mimosa::v2::nanite::Codec<unsigned short,32860ull,510ull,6330ull,100ull,50ull,180ull,1ull,220ull,1ull,300ull,1ull,290ull,1ull,110ull,1ull,10ull,1ull,1ull>::scaled_probabilities[v28]
          + v25;
LABEL_42:
      if (v16 <= 0xFFF)
      {
        if (v4 || a2 != result)
        {
          uint64_t v29 = 0;
          int v30 = 12;
          do
          {
            if (!v4)
            {
              if (a2 == result) {
                goto LABEL_54;
              }
              unsigned int v31 = *(unsigned __int8 *)--a2;
              unint64_t v5 = v31;
              char v4 = 8;
            }
            *((void *)&v32 + std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = v5;
            *(void *)&long long v32 = v29;
            uint64_t v29 = v32 >> 1;
            v5 >>= 1;
            --v4;
            --v30;
          }
          while ((_BYTE)v30);
          *((void *)&v33 + std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = v16;
          *(void *)&long long v33 = v29;
          unint64_t v16 = v33 >> 52;
        }
        else
        {
          char v4 = 0;
          a2 = result;
        }
      }
    }
    while (a4 != a3);
  }
  return result;
}

void sub_22277A368(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t mimosa::v2::nanite::Codec<unsigned short,7032ull,2263ull,269ull,36ull>::decode<std::__wrap_iter<std::byte const*>,unsigned short *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v4 = 0;
  unint64_t v5 = 0;
  unint64_t v6 = 0;
  int v7 = 3;
  do
  {
    if (!v4)
    {
      if (a2 == result)
      {
LABEL_54:
        exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "no more encoded bytes available");
        __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      unsigned int v8 = *(unsigned __int8 *)--a2;
      unint64_t v5 = v8;
      char v4 = 8;
    }
    *((void *)&v9 + std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = v5;
    *(void *)&long long v9 = v6;
    unint64_t v6 = v9 >> 1;
    v5 >>= 1;
    --v4;
    --v7;
  }
  while ((_BYTE)v7);
  for (unint64_t i = v6 >> 61; (_BYTE)i; LODWORD(i) = i - 1)
  {
    if (!v4)
    {
      if (a2 == result) {
        goto LABEL_54;
      }
      unsigned int v11 = *(unsigned __int8 *)--a2;
      unint64_t v5 = v11;
      char v4 = 8;
    }
    v5 >>= 1;
    --v4;
  }
  unint64_t v12 = 0;
  int v13 = 12;
  do
  {
    if (!v4)
    {
      if (a2 == result) {
        goto LABEL_54;
      }
      unsigned int v14 = *(unsigned __int8 *)--a2;
      unint64_t v5 = v14;
      char v4 = 8;
    }
    *((void *)&v15 + std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = v5;
    *(void *)&long long v15 = v12;
    unint64_t v12 = v15 >> 1;
    v5 >>= 1;
    --v4;
    --v13;
  }
  while ((_BYTE)v13);
  unint64_t v16 = v12 >> 52;
  if (v4 || a2 != result)
  {
    uint64_t v17 = 0;
    int v18 = 12;
    do
    {
      if (!v4)
      {
        if (a2 == result) {
          goto LABEL_54;
        }
        unsigned int v19 = *(unsigned __int8 *)--a2;
        unint64_t v5 = v19;
        char v4 = 8;
      }
      *((void *)&v20 + std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = v5;
      *(void *)&long long v20 = v17;
      uint64_t v17 = v20 >> 1;
      v5 >>= 1;
      --v4;
      --v18;
    }
    while ((_BYTE)v18);
    *((void *)&v21 + std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = v16;
    *(void *)&long long v21 = v17;
    unint64_t v16 = v21 >> 52;
  }
  else
  {
    char v4 = 0;
    a2 = result;
  }
  if (a4 != a3)
  {
    char v22 = 0;
    LOWORD(v23) = 0;
    __int16 v24 = 0;
    do
    {
      unsigned __int16 v25 = v16 & 0xFFF;
      unint64_t v26 = v16 >> 12;
      if (v22)
      {
        __int16 v24 = (v24 << 8) | (v16 >> 4);
        unint64_t v16 = 16 * v26 + (unsigned __int16)(v25 - 16 * (v16 >> 4));
        if (!--v22)
        {
          char v22 = 0;
          *(_WORD *)(a4 - 2) = v24 + v23;
          a4 -= 2;
          __int16 v24 = 0;
        }
        goto LABEL_42;
      }
      uint64_t v27 = mimosa::v2::nanite::Codec<unsigned short,7032ull,2263ull,269ull,36ull>::decode_table[v16 & 0xFFF];
      if (v27)
      {
        v25 -= mimosa::v2::nanite::Codec<unsigned short,7032ull,2263ull,269ull,36ull>::cumulative_scaled_probabilities[(v27 - 1)];
        if (v27 >= 0xF8)
        {
          char v22 = v27 + 9;
          unint64_t v23 = (0x101010101010101uLL >> (-8 * v27) << 8) | 0xF8;
          if (v27 == 248) {
            uint64_t v28 = 248;
          }
          else {
            uint64_t v28 = v27;
          }
          if (v27 == 248)
          {
            LOWORD(v23) = 248;
            char v22 = 1;
          }
          goto LABEL_41;
        }
        uint64_t v28 = v27;
      }
      else
      {
        uint64_t v28 = 0;
      }
      char v22 = 0;
      *(_WORD *)(a4 - 2) = v27;
      a4 -= 2;
LABEL_41:
      unint64_t v16 = v26 * mimosa::v2::nanite::Codec<unsigned short,7032ull,2263ull,269ull,36ull>::scaled_probabilities[v28]
          + v25;
LABEL_42:
      if (v16 <= 0xFFF)
      {
        if (v4 || a2 != result)
        {
          uint64_t v29 = 0;
          int v30 = 12;
          do
          {
            if (!v4)
            {
              if (a2 == result) {
                goto LABEL_54;
              }
              unsigned int v31 = *(unsigned __int8 *)--a2;
              unint64_t v5 = v31;
              char v4 = 8;
            }
            *((void *)&v32 + std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = v5;
            *(void *)&long long v32 = v29;
            uint64_t v29 = v32 >> 1;
            v5 >>= 1;
            --v4;
            --v30;
          }
          while ((_BYTE)v30);
          *((void *)&v33 + std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = v16;
          *(void *)&long long v33 = v29;
          unint64_t v16 = v33 >> 52;
        }
        else
        {
          char v4 = 0;
          a2 = result;
        }
      }
    }
    while (a4 != a3);
  }
  return result;
}

void sub_22277A6B0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mimosa::v2::decode_opre()
{
}

{
  __assert_rtn("operator()", "opre_coding.cpp", 259, "sizeof(destination) <= bytes.size()");
}

{
  __assert_rtn("operator()", "opre_coding.cpp", 322, "sizeof(destination) <= bytes.size()");
}

{
  __assert_rtn("operator()", "opre_coding.cpp", 377, "sizeof(destination) <= bytes.size()");
}

uint64_t mimosa::v2::SubpacketHeaderState::update(uint64_t a1, uint64_t a2)
{
  mimosa::v2::SubpacketHeaderState::predict(a1);
  uint64_t result = *(void *)(a1 + 16) + *(void *)a2;
  *(void *)(a1 + 16) = result;
  *(_DWORD *)(a1 + 32) += *(_DWORD *)(a2 + 8);
  unint64_t v5 = (unsigned char *)(a2 + 16);
  if (!*(unsigned char *)(a2 + 17)) {
    unint64_t v5 = (unsigned char *)(a1 + 36);
  }
  *(unsigned char *)(a1 + 36) = *v5;
  return result;
}

uint64_t mimosa::v2::SubpacketHeaderState::predict(uint64_t this)
{
  if (*(unsigned char *)(this + 8))
  {
    uint64_t v1 = 2 * *(void *)(this + 16) - *(void *)this;
  }
  else
  {
    if (*(unsigned char *)(this + 24)) {
      goto LABEL_5;
    }
    uint64_t v1 = 0;
    *(unsigned char *)(this + 24) = 1;
  }
  *(void *)(this + 16) = v1;
LABEL_5:
  *(void *)this = v2;
  *(unsigned char *)(this + 8) = v3;
  ++*(_DWORD *)(this + 32);
  return this;
}

uint64_t mimosa::v2::SubpacketHeaderState::update@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_WORD *)(a3 + 16) = 0;
  uint64_t result = mimosa::v2::SubpacketHeaderState::predict(a1);
  uint64_t v7 = *(void *)a2 - *(void *)(a1 + 16);
  *(void *)(a1 + 16) = *(void *)a2;
  *(unsigned char *)(a1 + 24) = 1;
  uint64_t v8 = *(unsigned int *)(a2 + 8);
  uint64_t v9 = v8 - *(unsigned int *)(a1 + 32);
  *(void *)a3 = v7;
  *(void *)(a3 + 8) = v9;
  *(_DWORD *)(a1 + 32) = v8;
  int v10 = *(unsigned __int8 *)(a2 + 12);
  if (v10 != *(unsigned __int8 *)(a1 + 36))
  {
    *(unsigned char *)(a1 + 36) = v10;
    *(_WORD *)(a3 + 16) = v10 | 0x100;
  }
  return result;
}

void *mimosa::v2::WavelengthV2SubpacketState::update@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 64) = 0;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  uint64_t v6 = mimosa::v2::SubpacketHeaderState::update(a1 + 24, a2);
  char v7 = *(unsigned char *)(a1 + 147);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v8;
  *(unsigned char *)(a1 + 146) = v7;
  uint64_t v29 = (unsigned __int16 *)(a1 + 147);
  unsigned int v9 = *((unsigned __int8 *)std::__hash_table<std::__hash_value_type<unsigned char,unsigned char>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,unsigned char>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,unsigned char>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,unsigned char>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(a1 + 64, (unsigned __int8 *)(a1 + 147), (uint64_t)&std::piecewise_construct, (unsigned char **)&v29)+ 17);
  *(unsigned char *)(a1 + 147) = v9;
  if (*(unsigned char *)(a2 + 94))
  {
    __int16 v10 = *(_WORD *)(a2 + 92);
    *(_WORD *)(a1 + 144) = v10;
  }
  else
  {
    __int16 v10 = *(_WORD *)(a1 + 144);
  }
  *(_WORD *)(a3 + 64) = v10;
  if (*(unsigned char *)(a2 + 88))
  {
    unsigned int v11 = (unsigned __int8 *)(a2 + 72);
    int v12 = *(_DWORD *)(a2 + 84);
    if (v12 == 1)
    {
      unsigned int v20 = *v11;
      *(unsigned char *)(a1 + 147) = v20;
      long long v21 = (unsigned __int16 *)mimosa::v2::ItemCoder<std::array<unsigned short,6ul>>::decode((void *)a1, v20);
      uint64_t v22 = 0;
      uint64_t v29 = v21;
      int v30 = v23;
      __int16 v24 = (_WORD *)(a3 + 20);
      do
      {
        *__int16 v24 = *(_WORD *)((char *)&v29 + v22);
        v24 += 4;
        v22 += 2;
      }
      while (v22 != 12);
      char v13 = *(unsigned char *)(a1 + 147);
    }
    else
    {
      if (v12) {
        std::__throw_bad_variant_access[abi:ne180100]();
      }
      char v13 = mimosa::v2::ItemCoder<std::array<unsigned short,6ul>>::encode((char **)a1, *(void *)(a2 + 72), *(_DWORD *)(a2 + 80));
      uint64_t v14 = 0;
      *(unsigned char *)(a1 + 147) = v13;
      long long v15 = (_WORD *)(a3 + 20);
      do
      {
        *long long v15 = *(_WORD *)&v11[v14];
        v15 += 4;
        v14 += 2;
      }
      while (v14 != 12);
    }
    uint64_t v29 = (unsigned __int16 *)(a1 + 146);
    *((unsigned char *)std::__hash_table<std::__hash_value_type<unsigned char,unsigned char>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,unsigned char>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,unsigned char>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,unsigned char>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(a1 + 64, (unsigned __int8 *)(a1 + 146), (uint64_t)&std::piecewise_construct, (unsigned char **)&v29)+ 17) = v13;
  }
  else
  {
    unint64_t v16 = (unsigned __int16 *)mimosa::v2::ItemCoder<std::array<unsigned short,6ul>>::decode((void *)a1, v9);
    uint64_t v17 = 0;
    uint64_t v29 = v16;
    int v30 = v18;
    unsigned int v19 = (_WORD *)(a3 + 20);
    do
    {
      _WORD *v19 = *(_WORD *)((char *)&v29 + v17);
      v19 += 4;
      v17 += 2;
    }
    while (v17 != 12);
  }
  uint64_t v25 = 0;
  uint64_t v26 = a1 + 104;
  do
  {
    uint64_t v29 = (unsigned __int16 *)(a3 + v25 + 20);
    uint64_t result = std::__hash_table<std::__hash_value_type<unsigned short,unsigned int>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,unsigned int>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,unsigned int>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,unsigned int>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(v26, v29, (uint64_t)&std::piecewise_construct, &v29);
    int v28 = *((_DWORD *)result + 5) + *(_DWORD *)(a2 + 24 + v25);
    *((_DWORD *)result + std::__function::__value_func<BOOL ()(mimosa::Metadata const&)>::~__value_func[abi:ne180100]((void *)this + 5) = v28;
    *(_DWORD *)(a3 + v25 + 16) = v28;
    v25 += 8;
  }
  while (v25 != 48);
  return result;
}

{
  uint64_t v6;
  uint64_t v7;
  char v8;
  unsigned char *v9;
  int v10;
  uint64_t v11;
  long long *v12;
  unsigned __int16 v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  void *result;
  uint64_t v18;
  long long v19;
  __int16 v20;
  unsigned __int16 *v21;

  *(_OWORD *)(a3 + 24) = 0u;
  uint64_t v6 = a3 + 24;
  *(unsigned char *)(a3 + 72) = 0;
  char v7 = a3 + 72;
  *(unsigned char *)(a3 + 88) = 0;
  *(unsigned char *)(a3 + 92) = 0;
  *(unsigned char *)(a3 + 94) = 0;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_WORD *)(a3 + 16) = 0;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  mimosa::v2::SubpacketHeaderState::update(a1 + 24, a2, (uint64_t)&v19);
  *(_OWORD *)a3 = v19;
  unsigned int v9 = (unsigned char *)(a1 + 147);
  uint64_t v8 = *(unsigned char *)(a1 + 147);
  *(_WORD *)(a3 + 16) = v20;
  *(unsigned char *)(a1 + 146) = v8;
  *(void *)&unsigned int v19 = a1 + 147;
  *(unsigned char *)(a1 + 147) = *((unsigned char *)std::__hash_table<std::__hash_value_type<unsigned char,unsigned char>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,unsigned char>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,unsigned char>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,unsigned char>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(a1 + 64, (unsigned __int8 *)(a1 + 147), (uint64_t)&std::piecewise_construct, (unsigned char **)&v19)+ 17);
  __int16 v10 = *(unsigned __int16 *)(a2 + 64);
  if (*(unsigned __int16 *)(a1 + 144) != v10)
  {
    *(_WORD *)(a3 + 92) = v10;
    *(unsigned char *)(a3 + 94) = 1;
    *(_WORD *)(a1 + 144) = v10;
  }
  unsigned int v11 = 0;
  DWORD2(v1std::__function::__value_func<BOOL ()(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,double)>::~__value_func[abi:ne180100]((void *)this + 9) = 0;
  *(void *)&unsigned int v19 = 0;
  int v12 = &v19;
  do
  {
    *(_WORD *)int v12 = *(_WORD *)(a2 + 20 + v11);
    int v12 = (long long *)((char *)v12 + 2);
    v11 += 8;
  }
  while (v11 != 48);
  char v13 = mimosa::v2::ItemCoder<std::array<unsigned short,6ul>>::encode((char **)a1, v19, DWORD2(v19));
  if (v13 >= 0x100u)
  {
    uint64_t v14 = 0;
    *(void *)char v7 = v19;
    *(_DWORD *)(v7 + 8) = DWORD2(v19);
    goto LABEL_9;
  }
  if (*v9 != v13)
  {
    *(unsigned char *)char v7 = v13;
    uint64_t v14 = 1;
LABEL_9:
    *(_DWORD *)(a3 + 84) = v14;
    *(unsigned char *)(a3 + 88) = 1;
    *unsigned int v9 = v13;
    long long v21 = (unsigned __int16 *)(a1 + 146);
    *((unsigned char *)std::__hash_table<std::__hash_value_type<unsigned char,unsigned char>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,unsigned char>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,unsigned char>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,unsigned char>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(a1 + 64, (unsigned __int8 *)(a1 + 146), (uint64_t)&std::piecewise_construct, (unsigned char **)&v21)+ 17) = v13;
  }
  long long v15 = 0;
  unint64_t v16 = a1 + 104;
  do
  {
    long long v21 = (unsigned __int16 *)(a2 + v15 + 20);
    uint64_t result = std::__hash_table<std::__hash_value_type<unsigned short,unsigned int>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,unsigned int>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,unsigned int>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,unsigned int>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(v16, v21, (uint64_t)&std::piecewise_construct, &v21);
    int v18 = *(unsigned int *)(a2 + v15 + 16);
    *(void *)(v6 + v1std::__function::__value_func<BOOL ()(mimosa::Metadata const&)>::~__value_func[abi:ne180100]((void *)this + 5) = v18 - *((unsigned int *)result + 5);
    *((_DWORD *)result + std::__function::__value_func<BOOL ()(mimosa::Metadata const&)>::~__value_func[abi:ne180100]((void *)this + 5) = v18;
    v15 += 8;
  }
  while (v15 != 48);
  return result;
}

void *mimosa::v2::WavelengthV2SubpacketState::predict(mimosa::v2::WavelengthV2SubpacketState *this)
{
  uint64_t v1 = (char *)this + 147;
  *((unsigned char *)this + 146) = *((unsigned char *)this + 147);
  char v3 = (char *)this + 147;
  uint64_t result = std::__hash_table<std::__hash_value_type<unsigned char,unsigned char>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,unsigned char>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,unsigned char>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,unsigned char>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>((uint64_t)this + 64, (unsigned __int8 *)this + 147, (uint64_t)&std::piecewise_construct, &v3);
  unsigned char *v1 = *((unsigned char *)result + 17);
  return result;
}

uint64_t mimosa::v2::ItemCoder<std::array<unsigned short,6ul>>::encode(char **a1, uint64_t a2, unsigned int a3)
{
  unint64_t v5 = *a1;
  char v4 = a1[1];
  uint64_t v6 = *a1;
  if (*a1 != v4)
  {
    while (*(void *)v6 != a2 || *((_DWORD *)v6 + 2) != (unint64_t)a3)
    {
      v6 += 12;
      if (v6 == v4)
      {
        uint64_t v6 = a1[1];
        break;
      }
    }
  }
  if (v6 == v4)
  {
    if (v4 - v5 == 3072)
    {
      int64_t v10 = v4 - (v5 + 12);
      if (v4 != v5 + 12) {
        memmove(*a1, v5 + 12, v4 - (v5 + 12));
      }
      char v4 = &v5[v10];
      a1[1] = &v5[v10];
    }
    unint64_t v11 = (unint64_t)a1[2];
    if ((unint64_t)v4 >= v11)
    {
      unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 2);
      unint64_t v14 = v13 + 1;
      if (v13 + 1 > 0x1555555555555555) {
        std::vector<mimosa::OpticalSampleV1>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - (void)*a1) >> 2);
      if (2 * v15 > v14) {
        unint64_t v14 = 2 * v15;
      }
      if (v15 >= 0xAAAAAAAAAAAAAAALL) {
        unint64_t v16 = 0x1555555555555555;
      }
      else {
        unint64_t v16 = v14;
      }
      if (v16) {
        uint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::array<unsigned short,6ul>>>((uint64_t)(a1 + 2), v16);
      }
      else {
        uint64_t v17 = 0;
      }
      int v18 = &v17[12 * v13];
      unsigned int v19 = &v17[12 * v16];
      *(void *)int v18 = a2;
      *((_DWORD *)v18 + 2) = a3;
      int v12 = v18 + 12;
      long long v21 = *a1;
      unsigned int v20 = a1[1];
      if (v20 != *a1)
      {
        do
        {
          uint64_t v22 = *(void *)(v20 - 12);
          v20 -= 12;
          int v23 = *((_DWORD *)v20 + 2);
          *(void *)(v18 - 12) = v22;
          v18 -= 12;
          *((_DWORD *)v18 + 2) = v23;
        }
        while (v20 != v21);
        unsigned int v20 = *a1;
      }
      *a1 = v18;
      a1[1] = v12;
      a1[2] = v19;
      if (v20) {
        operator delete(v20);
      }
    }
    else
    {
      *(void *)char v4 = a2;
      *((_DWORD *)v4 + 2) = a3;
      int v12 = v4 + 12;
    }
    a1[1] = v12;
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((v12 - *a1) >> 2) - 1;
    int v8 = 1;
  }
  else
  {
    int v8 = 0;
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((v6 - v5) >> 2);
  }
  return v9 | (v8 << 8);
}

uint64_t mimosa::v2::ItemCoder<std::array<unsigned short,6ul>>::decode(void *a1, unsigned int a2)
{
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 2) <= a2) {
    std::vector<std::array<unsigned short,6ul>>::__throw_out_of_range[abi:ne180100]();
  }
  return *(void *)(*a1 + 12 * a2);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::array<unsigned short,6ul>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1555555555555556) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(12 * a2);
}

void std::vector<std::array<unsigned short,6ul>>::__throw_out_of_range[abi:ne180100]()
{
}

void *std::__hash_table<std::__hash_value_type<unsigned char,unsigned char>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,unsigned char>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,unsigned char>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,unsigned char>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, unsigned char **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    int64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      unint64_t v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((unsigned __int8 *)v11 + 16) == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          unint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  unint64_t v11 = operator new(0x18uLL);
  *unint64_t v11 = 0;
  v11[1] = v7;
  *((unsigned char *)v11 + 16) = **a4;
  *((unsigned char *)v11 + 17) = 0;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>>>::__rehash<true>(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v19 = *(void *)a1;
  unsigned int v20 = *(void **)(*(void *)a1 + 8 * v4);
  if (v20)
  {
    *unint64_t v11 = *v20;
LABEL_38:
    void *v20 = v11;
    goto LABEL_39;
  }
  *unint64_t v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v11;
  *(void *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    unint64_t v21 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8) {
        v21 %= v8;
      }
    }
    else
    {
      v21 &= v8 - 1;
    }
    unsigned int v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_22277B1B4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<unsigned short,unsigned int>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,unsigned int>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,unsigned int>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,unsigned int>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(uint64_t a1, unsigned __int16 *a2, uint64_t a3, _WORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    int64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      unint64_t v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((unsigned __int16 *)v11 + 8) == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          unint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  unint64_t v11 = operator new(0x18uLL);
  *unint64_t v11 = 0;
  v11[1] = v7;
  *((_WORD *)v11 + 8) = **a4;
  *((_DWORD *)v11 + std::__function::__value_func<BOOL ()(mimosa::Metadata const&)>::~__value_func[abi:ne180100]((void *)this + 5) = 0;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>>>::__rehash<true>(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v19 = *(void *)a1;
  unsigned int v20 = *(void **)(*(void *)a1 + 8 * v4);
  if (v20)
  {
    *unint64_t v11 = *v20;
LABEL_38:
    void *v20 = v11;
    goto LABEL_39;
  }
  *unint64_t v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v11;
  *(void *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    unint64_t v21 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8) {
        v21 %= v8;
      }
    }
    else
    {
      v21 &= v8 - 1;
    }
    unsigned int v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_22277B3DC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t mimosa::v2::varint::sign_transform(uint64_t this)
{
  return (2 * this) ^ (this >> 63);
}

unint64_t mimosa::v2::varint::sign_transform(unint64_t this)
{
  return -(uint64_t)(this & 1) ^ (this >> 1);
}

unint64_t mimosa::v2::varint::encode(unint64_t this)
{
  if (this >= 0x80)
  {
    if (HIBYTE(this)) {
      char v2 = 9;
    }
    else {
      char v2 = 8;
    }
    if (this >> 49) {
      char v3 = v2;
    }
    else {
      char v3 = 7;
    }
    if (this >> 42) {
      char v4 = v3;
    }
    else {
      char v4 = 6;
    }
    if (this >> 35) {
      char v5 = v4;
    }
    else {
      char v5 = 5;
    }
    if (this >> 28) {
      char v6 = v5;
    }
    else {
      char v6 = 4;
    }
    if (this >= 0x200000) {
      char v7 = v6;
    }
    else {
      char v7 = 3;
    }
    if (this >= 0x4000) {
      char v1 = v7;
    }
    else {
      char v1 = 2;
    }
  }
  else
  {
    char v1 = 1;
  }
  uint64x2_t v8 = (uint64x2_t)vdupq_n_s64(this);
  int8x16_t v9 = (int8x16_t)vshlq_u64(v8, (uint64x2_t)xmmword_222799320);
  int8x16_t v10 = vandq_s8((int8x16_t)vshlq_u64(v8, (uint64x2_t)xmmword_222799330), (int8x16_t)xmmword_222799340);
  int8x16_t v11 = vandq_s8(v9, (int8x16_t)xmmword_222799350);
  unint64_t v12 = 0x8080808080808080 >> (8 * (9 - v1));
  if ((v1 & 0xFE) == 0) {
    unint64_t v12 = 0;
  }
  int8x16_t v13 = vorrq_s8(v11, v10);
  return *(void *)&vorr_s8(*(int8x8_t *)v13.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v13, v13, 8uLL)) | this & 0x7F | (this << 6) & 0x7F000000000000 | (((this >> 35) & 0x7F) << 40) | v12 & 0x80FFFFFFFFFFFFFFLL | (((this >> 49) & 0x7F) << 56);
}

unint64_t mimosa::v2::varint::decode(uint64_t a1)
{
  unint64_t v2 = (((*(void *)a1 & 0x8080808080808080) - 0x101010101010101) ^ *(void *)a1 & 0x8080808080808080) + 1;
  uint64_t v3 = v2 | (2 * v2);
  unint64_t v4 = *(void *)a1 & ~v3;
  uint64_t v5 = v4 & 0x7F | (((v4 >> 8) & 0x7F) << 7) | (v4 >> 2) & 0x1FC000 | (v4 >> 3) & 0xFE00000 | (v4 >> 4) & 0x7F0000000 | (v4 >> 5) & 0x3F800000000 | (v4 >> 6) & 0x1FC0000000000 | (v4 >> 7) & 0xFE000000000000;
  if (((v4 & 0x8000000000000000) != 0) != v1) {
    return v5 | ((unint64_t)*(unsigned __int8 *)(a1 + 8) << 56);
  }
  uint64_t v7 = ~v3;
  BYTE6(v8) = 1;
  std::__count[abi:ne180100]<std::_ClassicAlgPolicy,std::__bitset<1ul,64ul>,true,BOOL,std::__identity,0>((int8x8_t *)&v7, 0, (uint64_t)&v8, 0, (unsigned char *)&v8 + 6);
  return v5;
}

uint64_t std::__count[abi:ne180100]<std::_ClassicAlgPolicy,std::__bitset<1ul,64ul>,true,BOOL,std::__identity,0>(int8x8_t *a1, unsigned int a2, uint64_t a3, unsigned int a4, unsigned char *a5)
{
  unint64_t v5 = a4 - (unint64_t)a2 + 8 * (a3 - (void)a1);
  if (*a5) {
    return std::__count_BOOL[abi:ne180100]<true,std::__bitset<1ul,64ul>,true>(a1, a2, v5);
  }
  else {
    return std::__count_BOOL[abi:ne180100]<false,std::__bitset<1ul,64ul>,true>((uint64_t *)a1, a2, v5);
  }
}

uint64_t std::__count_BOOL[abi:ne180100]<true,std::__bitset<1ul,64ul>,true>(int8x8_t *a1, unsigned int a2, unint64_t a3)
{
  uint64_t v3 = a2;
  if (a2)
  {
    if (64 - a2 >= a3) {
      unint64_t v4 = a3;
    }
    else {
      unint64_t v4 = 64 - a2;
    }
    uint64_t v5 = (uint64_t)*a1++;
    uint8x8_t v6 = (uint8x8_t)vcnt_s8((int8x8_t)((0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v4)) & (-1 << a2) & v5));
    v6.i16[0] = vaddlv_u8(v6);
    uint64_t v3 = v6.u32[0];
    a3 -= v4;
  }
  if (a3 >= 0x40)
  {
    do
    {
      int8x8_t v7 = *a1++;
      uint8x8_t v8 = (uint8x8_t)vcnt_s8(v7);
      v8.i16[0] = vaddlv_u8(v8);
      v3 += v8.u32[0];
      a3 -= 64;
    }
    while (a3 > 0x3F);
  }
  if (a3)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)(*(void *)a1 & (0xFFFFFFFFFFFFFFFFLL >> -(char)a3)));
    v9.i16[0] = vaddlv_u8(v9);
    v3 += v9.u32[0];
  }
  return v3;
}

uint64_t std::__count_BOOL[abi:ne180100]<false,std::__bitset<1ul,64ul>,true>(uint64_t *a1, unsigned int a2, unint64_t a3)
{
  uint64_t v3 = a2;
  if (a2)
  {
    if (64 - a2 >= a3) {
      unint64_t v4 = a3;
    }
    else {
      unint64_t v4 = 64 - a2;
    }
    uint64_t v5 = *a1++;
    uint8x8_t v6 = (uint8x8_t)vcnt_s8((int8x8_t)((0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v4)) & (-1 << a2) & ~v5));
    v6.i16[0] = vaddlv_u8(v6);
    uint64_t v3 = v6.u32[0];
    a3 -= v4;
  }
  if (a3 >= 0x40)
  {
    do
    {
      uint64_t v7 = *a1++;
      uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)~v7);
      v8.i16[0] = vaddlv_u8(v8);
      v3 += v8.u32[0];
      a3 -= 64;
    }
    while (a3 > 0x3F);
  }
  if (a3)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)((0xFFFFFFFFFFFFFFFFLL >> -(char)a3) & ~*a1));
    v9.i16[0] = vaddlv_u8(v9);
    v3 += v9.u32[0];
  }
  return v3;
}

uint64_t mimosa::v2::ContainerHeaderState::update(uint64_t a1, uint64_t a2)
{
  mimosa::v2::ContainerHeaderState::predict(a1);
  uint64_t result = *(void *)(a1 + 16) + *(void *)a2;
  *(void *)(a1 + 16) = result;
  *(_DWORD *)(a1 + 32) += *(_DWORD *)(a2 + 8);
  uint64_t v5 = (unsigned char *)(a2 + 16);
  if (!*(unsigned char *)(a2 + 17)) {
    uint64_t v5 = (unsigned char *)(a1 + 36);
  }
  *(unsigned char *)(a1 + 36) = *v5;
  return result;
}

uint64_t mimosa::v2::ContainerHeaderState::predict(uint64_t this)
{
  if (*(unsigned char *)(this + 8))
  {
    uint64_t v1 = 2 * *(void *)(this + 16) - *(void *)this;
  }
  else
  {
    if (*(unsigned char *)(this + 24)) {
      goto LABEL_5;
    }
    uint64_t v1 = 0;
    *(unsigned char *)(this + 24) = 1;
  }
  *(void *)(this + 16) = v1;
LABEL_5:
  *(void *)this = v2;
  *(unsigned char *)(this + 8) = v3;
  ++*(_DWORD *)(this + 32);
  return this;
}

uint64_t mimosa::v2::ContainerHeaderState::update@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_WORD *)(a3 + 16) = 0;
  uint64_t result = mimosa::v2::ContainerHeaderState::predict(a1);
  uint64_t v7 = *(void *)a2 - *(void *)(a1 + 16);
  *(void *)(a1 + 16) = *(void *)a2;
  *(unsigned char *)(a1 + 24) = 1;
  uint64_t v8 = *(unsigned int *)(a2 + 8);
  uint64_t v9 = v8 - *(unsigned int *)(a1 + 32);
  *(void *)a3 = v7;
  *(void *)(a3 + 8) = v9;
  *(_DWORD *)(a1 + 32) = v8;
  int v10 = *(unsigned __int8 *)(a2 + 12);
  if (v10 != *(unsigned __int8 *)(a1 + 36))
  {
    *(unsigned char *)(a1 + 36) = v10;
    *(_WORD *)(a3 + 16) = v10 | 0x100;
  }
  return result;
}

double mimosa::v2::AlgsResponseV2SubpacketState::update@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)a3 = 0u;
  *(void *)a3 = mimosa::v2::SubpacketHeaderState::update(a1, a2);
  *(void *)(a3 + 8) = v6;
  if (*(unsigned char *)(a2 + 32)) {
    *(void *)(a1 + 40) = *(void *)(a2 + 24);
  }
  if (*(unsigned char *)(a2 + 48)) {
    *(void *)(a1 + 48) = *(void *)(a2 + 40);
  }
  if (*(unsigned char *)(a2 + 60)) {
    *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  }
  if (*(unsigned char *)(a2 + 68)) {
    *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 64);
  }
  if (*(unsigned char *)(a2 + 74)) {
    *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 72);
  }
  if (*(unsigned char *)(a2 + 77))
  {
    char v7 = *(unsigned char *)(a2 + 76);
    *(unsigned char *)(a1 + 66) = v7;
  }
  else
  {
    char v7 = *(unsigned char *)(a1 + 66);
  }
  *(_OWORD *)(a3 + 16) = *(_OWORD *)(a1 + 40);
  double result = *(double *)(a1 + 56);
  *(double *)(a3 + 32) = result;
  *(_WORD *)(a3 + 40) = *(_WORD *)(a1 + 64);
  *(unsigned char *)(a3 + 42) = v7;
  return result;
}

uint64_t mimosa::v2::AlgsResponseV2SubpacketState::update@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(unsigned char *)(a3 + 24) = 0;
  *(unsigned char *)(a3 + 32) = 0;
  *(unsigned char *)(a3 + 40) = 0;
  *(unsigned char *)(a3 + 48) = 0;
  *(unsigned char *)(a3 + 56) = 0;
  *(unsigned char *)(a3 + 60) = 0;
  *(unsigned char *)(a3 + 64) = 0;
  *(unsigned char *)(a3 + 68) = 0;
  *(unsigned char *)(a3 + 72) = 0;
  *(unsigned char *)(a3 + 74) = 0;
  *(_WORD *)(a3 + 76) = 0;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_WORD *)(a3 + 16) = 0;
  uint64_t result = mimosa::v2::SubpacketHeaderState::update(a1, a2, (uint64_t)&v13);
  *(_OWORD *)a3 = v13;
  *(_WORD *)(a3 + 16) = v14;
  uint64_t v7 = *(void *)(a2 + 16);
  if (*(void *)(a1 + 40) != v7)
  {
    *(void *)(a1 + 40) = v7;
    *(void *)(a3 + 24) = v7;
    *(unsigned char *)(a3 + 32) = 1;
  }
  uint64_t v8 = *(void *)(a2 + 24);
  if (*(void *)(a1 + 48) != v8)
  {
    *(void *)(a1 + 48) = v8;
    *(void *)(a3 + 40) = v8;
    *(unsigned char *)(a3 + 48) = 1;
  }
  int v9 = *(_DWORD *)(a2 + 32);
  if (*(_DWORD *)(a1 + 56) != v9)
  {
    *(_DWORD *)(a1 + 56) = v9;
    *(_DWORD *)(a3 + 56) = v9;
    *(unsigned char *)(a3 + 60) = 1;
  }
  int v10 = *(_DWORD *)(a2 + 36);
  if (*(_DWORD *)(a1 + 60) != v10)
  {
    *(_DWORD *)(a1 + 60) = v10;
    *(_DWORD *)(a3 + 64) = v10;
    *(unsigned char *)(a3 + 68) = 1;
  }
  int v11 = *(unsigned __int16 *)(a2 + 40);
  if (*(unsigned __int16 *)(a1 + 64) != v11)
  {
    *(_WORD *)(a1 + 64) = v11;
    *(_WORD *)(a3 + 72) = v11;
    *(unsigned char *)(a3 + 74) = 1;
  }
  int v12 = *(unsigned __int8 *)(a2 + 42);
  if (*(unsigned __int8 *)(a1 + 66) != v12)
  {
    *(unsigned char *)(a1 + 66) = v12;
    *(_WORD *)(a3 + 76) = v12 | 0x100;
  }
  return result;
}

_DWORD *mimosa::v2::PatchDecoder::PatchDecoder(_DWORD *a1, uint64_t a2)
{
  *a1 = 0;
  std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::__value_func[abi:ne180100]((uint64_t)(a1 + 2), a2);
  return a1;
}

{
  *a1 = 0;
  std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::__value_func[abi:ne180100]((uint64_t)(a1 + 2), a2);
  return a1;
}

uint64_t mimosa::v2::PatchDecoder::extract_patch@<X0>(mimosa::v2::PatchDecoder *this@<X0>, const byte *a2@<X1>, const byte *a3@<X2>, uint64_t a4@<X8>)
{
  *(_OWORD *)(a4 + 240) = 0u;
  *(_OWORD *)(a4 + 256) = 0u;
  *(_OWORD *)(a4 + 208) = 0u;
  *(_OWORD *)(a4 + 224) = 0u;
  *(_OWORD *)(a4 + 176) = 0u;
  *(_OWORD *)(a4 + 192) = 0u;
  *(_OWORD *)(a4 + 144) = 0u;
  *(_OWORD *)(a4 + 160) = 0u;
  *(_OWORD *)(a4 + 112) = 0u;
  *(_OWORD *)(a4 + 128) = 0u;
  *(_OWORD *)(a4 + 80) = 0u;
  *(_OWORD *)(a4 + 96) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_OWORD *)(a4 + 64) = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)a4 = 0u;
  *(_DWORD *)(a4 + 552) = 0;
  std::string::size_type v8 = mimosa::v2::parse_varint(a2, a3, a3);
  int v10 = &a2[v9];
  if ((v8 & 0x10000000) != 0)
  {
    int v12 = *v10++;
    int v11 = v12;
    *(unsigned char *)this = v12;
    if ((v12 - 1) >= 5 && (v11 - 15) >= 2)
    {
      exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
      std::to_string(&v20, *(unsigned __int8 *)this);
      __n128 v17 = std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("invalid subpacket combination code: ", &v20, &v18);
      MEMORY[0x223C9C340](exception, &v18, v17);
      __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    }
  }
  else
  {
    int v11 = *(unsigned __int8 *)this;
  }
  switch(v11)
  {
    case 0:
      BOOL v15 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v15, "first patch did not contain a subpacket combination update");
      __cxa_throw(v15, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    case 1:
      std::__variant_detail::__assignment<std::__variant_detail::__traits<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7>>::__emplace[abi:ne180100]<0ul>(a4);
      break;
    case 2:
      std::__variant_detail::__assignment<std::__variant_detail::__traits<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7>>::__emplace[abi:ne180100]<2ul>(a4);
      break;
    case 3:
      std::__variant_detail::__assignment<std::__variant_detail::__traits<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7>>::__emplace[abi:ne180100]<4ul>((unsigned int *)a4);
      break;
    case 4:
      std::__variant_detail::__assignment<std::__variant_detail::__traits<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7>>::__emplace[abi:ne180100]<5ul>((unsigned int *)a4);
      break;
    case 5:
      std::__variant_detail::__assignment<std::__variant_detail::__traits<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7>>::__emplace[abi:ne180100]<6ul>((unsigned int *)a4);
      break;
    case 15:
      std::__variant_detail::__assignment<std::__variant_detail::__traits<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7>>::__emplace[abi:ne180100]<1ul>(a4);
      break;
    case 16:
      std::__variant_detail::__assignment<std::__variant_detail::__traits<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7>>::__emplace[abi:ne180100]<3ul>(a4);
      break;
    default:
      break;
  }
  v18.__r_.__value_.__r.__words[0] = (std::string::size_type)this;
  v18.__r_.__value_.__l.__size_ = v8;
  v18.__r_.__value_.__r.__words[2] = (std::string::size_type)v10;
  uint64_t v19 = a3;
  uint64_t v13 = *(unsigned int *)(a4 + 552);
  if (v13 == -1) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  v20.__r_.__value_.__r.__words[0] = (std::string::size_type)&v18;
  return ((uint64_t (*)(std::string *, uint64_t))off_26D4E42B0[v13])(&v20, a4);
}

void sub_22277BD2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v24 & 1) == 0)
    {
LABEL_8:
      std::__variant_detail::__dtor<std::__variant_detail::__traits<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7>,(std::__variant_detail::_Trait)1>::~__dtor(v22);
      _Unwind_Resume(a1);
    }
  }
  else if (!v24)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v23);
  goto LABEL_8;
}

uint64_t mimosa::v2::PatchDecoder::decode(mimosa::v2::PatchDecoder *this, const byte *a2, const byte *a3)
{
  unint64_t v6 = mimosa::v2::parse_varint(a2, &a3[(void)a2], a3);
  if (!v7) {
    return 0;
  }
  if (v6 < 8 || v6 == 109)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "corruption detected");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  uint64_t v8 = v6 - (v6 > 0x6D) - 8;
  if (v8 + (unint64_t)v7 > (unint64_t)a3) {
    return 0;
  }
  int v10 = &a2[v7 + v8];
  mimosa::v2::PatchDecoder::extract_patch(this, &a2[v7], v10, (uint64_t)v14);
  uint64_t v11 = *((void *)this + 4);
  if (!v11) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v11 + 48))(v11, v14);
  uint64_t v9 = v10 - a2;
  std::__variant_detail::__dtor<std::__variant_detail::__traits<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v14);
  return v9;
}

void sub_22277BF0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

unint64_t mimosa::v2::parse_varint(const byte *this, const byte *a2, const byte *a3)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (this >= a2) {
    return 0;
  }
  char v6 = 0;
  uint64_t __dst = 0;
  if ((unint64_t)(a2 - this) >= 9) {
    size_t v3 = 9;
  }
  else {
    size_t v3 = a2 - this;
  }
  if (v3) {
    memcpy(&__dst, this, v3);
  }
  return mimosa::v2::varint::decode((uint64_t)&__dst);
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<mimosa::v2::PatchDecoder::extract_patch(std::byte const*,std::byte const*)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,mimosa::v2::PacketState::PatchV1,std::__variant_detail::_Trait::PatchV2,std::__variant_detail::_Trait::PatchV3,std::__variant_detail::_Trait::PatchV4,std::__variant_detail::_Trait::PatchV5,std::__variant_detail::_Trait::PatchV6,std::__variant_detail::_Trait::PatchV7> &>(unsigned char ***a1, uint64_t a2)
{
}

unint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<mimosa::v2::PatchDecoder::extract_patch(std::byte const*,std::byte const*)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,mimosa::v2::PacketState::PatchV1,std::__variant_detail::_Trait::PatchV2,std::__variant_detail::_Trait::PatchV3,std::__variant_detail::_Trait::PatchV4,std::__variant_detail::_Trait::PatchV5,std::__variant_detail::_Trait::PatchV6,std::__variant_detail::_Trait::PatchV7> &>(unsigned char ***a1, uint64_t a2)
{
  return mimosa::v2::PatchDecoder::extract_patch<mimosa::v2::PacketState::PatchV2>(**a1, a2, (*a1)[1], (*a1)[2], (*a1)[3]);
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<mimosa::v2::PatchDecoder::extract_patch(std::byte const*,std::byte const*)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,mimosa::v2::PacketState::PatchV1,std::__variant_detail::_Trait::PatchV2,std::__variant_detail::_Trait::PatchV3,std::__variant_detail::_Trait::PatchV4,std::__variant_detail::_Trait::PatchV5,std::__variant_detail::_Trait::PatchV6,std::__variant_detail::_Trait::PatchV7> &>(unsigned char ***a1, uint64_t a2)
{
}

unint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<mimosa::v2::PatchDecoder::extract_patch(std::byte const*,std::byte const*)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,mimosa::v2::PacketState::PatchV1,std::__variant_detail::_Trait::PatchV2,std::__variant_detail::_Trait::PatchV3,std::__variant_detail::_Trait::PatchV4,std::__variant_detail::_Trait::PatchV5,std::__variant_detail::_Trait::PatchV6,std::__variant_detail::_Trait::PatchV7> &>(unsigned char ***a1, uint64_t a2)
{
  return mimosa::v2::PatchDecoder::extract_patch<mimosa::v2::PacketState::PatchV4>(**a1, a2, (*a1)[1], (*a1)[2], (*a1)[3]);
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<mimosa::v2::PatchDecoder::extract_patch(std::byte const*,std::byte const*)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,mimosa::v2::PacketState::PatchV1,std::__variant_detail::_Trait::PatchV2,std::__variant_detail::_Trait::PatchV3,std::__variant_detail::_Trait::PatchV4,std::__variant_detail::_Trait::PatchV5,std::__variant_detail::_Trait::PatchV6,std::__variant_detail::_Trait::PatchV7> &>(unsigned char ***a1, uint64_t a2)
{
}

unint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<mimosa::v2::PatchDecoder::extract_patch(std::byte const*,std::byte const*)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,mimosa::v2::PacketState::PatchV1,std::__variant_detail::_Trait::PatchV2,std::__variant_detail::_Trait::PatchV3,std::__variant_detail::_Trait::PatchV4,std::__variant_detail::_Trait::PatchV5,std::__variant_detail::_Trait::PatchV6,std::__variant_detail::_Trait::PatchV7> &>(unsigned char ***a1, uint64_t a2)
{
  return mimosa::v2::PatchDecoder::extract_patch<mimosa::v2::PacketState::PatchV6>(**a1, a2, (*a1)[1], (*a1)[2], (*a1)[3]);
}

unint64_t std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<mimosa::v2::PatchDecoder::extract_patch(std::byte const*,std::byte const*)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,mimosa::v2::PacketState::PatchV1,std::__variant_detail::_Trait::PatchV2,std::__variant_detail::_Trait::PatchV3,std::__variant_detail::_Trait::PatchV4,std::__variant_detail::_Trait::PatchV5,std::__variant_detail::_Trait::PatchV6,std::__variant_detail::_Trait::PatchV7> &>(unsigned char ***a1, uint64_t a2)
{
  return mimosa::v2::PatchDecoder::extract_patch<mimosa::v2::PacketState::PatchV7>(**a1, a2, (*a1)[1], (*a1)[2], (*a1)[3]);
}

void mimosa::v2::PatchDecoder::extract_patch<mimosa::v2::PacketState::PatchV1>(unsigned char *a1, uint64_t a2, const byte *a3, const byte *this, byte *a5)
{
  char v6 = this;
  if ((a3 & 0x20) != 0)
  {
    a1[1] ^= 1u;
    if ((a3 & 0x10) != 0)
    {
LABEL_3:
      if ((a3 & 0x8000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else if ((a3 & 0x10) != 0)
  {
    goto LABEL_3;
  }
  unint64_t v11 = mimosa::v2::parse_varint(this, a5, a3);
  v6 += v12;
  *(void *)a2 = mimosa::v2::varint::sign_transform(v11);
  if ((a3 & 0x8000000) == 0)
  {
LABEL_4:
    if ((a3 & 0x20000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
LABEL_12:
  unint64_t v13 = mimosa::v2::parse_varint(v6, a5, a3);
  v6 += v14;
  *(void *)(a2 + 8) = mimosa::v2::varint::sign_transform(v13);
  if ((a3 & 0x20000000) == 0)
  {
LABEL_5:
    if (a3) {
      goto LABEL_6;
    }
    goto LABEL_14;
  }
LABEL_13:
  __int16 v15 = *v6++;
  *(_WORD *)(a2 + 16) = v15 | 0x100;
  if (a3)
  {
LABEL_6:
    if (((unsigned __int16)a3 & 0x8000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_15;
  }
LABEL_14:
  unint64_t v16 = mimosa::v2::parse_varint(v6, a5, a3);
  v6 += v17;
  *(void *)(a2 + 24) = mimosa::v2::varint::sign_transform(v16);
  if (((unsigned __int16)a3 & 0x8000) == 0)
  {
LABEL_7:
    if (((unint64_t)a3 & 0x100000000000) == 0) {
      goto LABEL_8;
    }
LABEL_16:
    __int16 v20 = *v6++;
    *(_WORD *)(a2 + 40) = v20 | 0x100;
    if ((a3 & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_17;
  }
LABEL_15:
  unint64_t v18 = mimosa::v2::parse_varint(v6, a5, a3);
  v6 += v19;
  *(void *)(a2 + 32) = mimosa::v2::varint::sign_transform(v18);
  if (((unint64_t)a3 & 0x100000000000) != 0) {
    goto LABEL_16;
  }
LABEL_8:
  if ((a3 & 0x80000000) == 0)
  {
LABEL_9:
    unint64_t v10 = *(void *)(a2 + 104);
    goto LABEL_18;
  }
LABEL_17:
  unint64_t v21 = mimosa::v2::parse_varint(v6, a5, a3);
  v6 += v22;
  unint64_t v10 = mimosa::v2::varint::sign_transform(v21);
  *(void *)(a2 + 104) = v10;
LABEL_18:
  *(void *)(a2 + 104) = v10 + *(void *)(a2 + 24);
  if ((a3 & 0x80000) == 0)
  {
    if (((unint64_t)a3 & 0x200000000000) == 0) {
      goto LABEL_20;
    }
LABEL_23:
    __int16 v26 = *v6++;
    *(_WORD *)(a2 + 120) = v26 | 0x100;
    if (((unint64_t)a3 & 0x100000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_24;
  }
  unint64_t v24 = mimosa::v2::parse_varint(v6, a5, a3);
  v6 += v25;
  *(void *)(a2 + 112) = mimosa::v2::varint::sign_transform(v24);
  if (((unint64_t)a3 & 0x200000000000) != 0) {
    goto LABEL_23;
  }
LABEL_20:
  if (((unint64_t)a3 & 0x100000000) == 0)
  {
LABEL_21:
    unint64_t v23 = *(void *)(a2 + 192);
    goto LABEL_25;
  }
LABEL_24:
  unint64_t v27 = mimosa::v2::parse_varint(v6, a5, a3);
  v6 += v28;
  unint64_t v23 = mimosa::v2::varint::sign_transform(v27);
  *(void *)(a2 + 192) = v23;
LABEL_25:
  *(void *)(a2 + 192) = v23 + *(void *)(a2 + 24);
  if ((a3 & 0x40000) == 0)
  {
    if (((unint64_t)a3 & 0x400000000000) == 0) {
      goto LABEL_27;
    }
LABEL_30:
    __int16 v32 = *v6++;
    *(_WORD *)(a2 + 208) = v32 | 0x100;
    if ((a3 & 8) == 0) {
      goto LABEL_28;
    }
    goto LABEL_31;
  }
  unint64_t v30 = mimosa::v2::parse_varint(v6, a5, a3);
  v6 += v31;
  *(void *)(a2 + 200) = mimosa::v2::varint::sign_transform(v30);
  if (((unint64_t)a3 & 0x400000000000) != 0) {
    goto LABEL_30;
  }
LABEL_27:
  if ((a3 & 8) == 0)
  {
LABEL_28:
    unsigned int v29 = a1[2];
    goto LABEL_32;
  }
LABEL_31:
  unsigned int v33 = *v6++;
  unsigned int v29 = v33;
  a1[2] = v33;
LABEL_32:
  std::vector<mimosa::v2::OpticalSamplesV1SubpacketState::Patch::ADCDelta>::resize(a2 + 80, v29);
  if (((unsigned __int16)a3 & 0x2000) != 0)
  {
    unsigned int v35 = *v6++;
    unsigned int v34 = v35;
    a1[3] = v35;
  }
  else
  {
    unsigned int v34 = a1[3];
  }
  std::vector<mimosa::v2::OpticalSamplesV1SubpacketState::Patch::ADCDelta>::resize(a2 + 128, v34);
  if ((a3 & 0x80) != 0)
  {
    long long v37 = (uint64_t *)(a2 + 48);
    std::optional<std::vector<mimosa::v2::OpticalSamplesV1SubpacketState::Patch::Sample>>::emplace[abi:ne180100]<unsigned char &,void>(a2 + 48, a1 + 2);
    uint64_t v38 = *(void *)(a2 + 48);
    uint64_t v39 = *(void *)(a2 + 56);
    if (v38 != v39)
    {
      while (1)
      {
        __int16 v40 = *(_WORD *)v6;
        if (*(_WORD *)v6) {
          break;
        }
        v6 += 2;
        if ((v40 & 2) != 0) {
          goto LABEL_41;
        }
LABEL_42:
        if ((v40 & 4) != 0)
        {
          __int16 v44 = *(_WORD *)v6;
          v6 += 2;
          *(_WORD *)(v38 + 8) = v44;
          *(unsigned char *)(v38 + 10) = 1;
          if ((v40 & 8) == 0)
          {
LABEL_44:
            if ((v40 & 0x10) == 0) {
              goto LABEL_45;
            }
            goto LABEL_57;
          }
        }
        else if ((v40 & 8) == 0)
        {
          goto LABEL_44;
        }
        __int16 v45 = *(_WORD *)v6;
        v6 += 2;
        *(_WORD *)(v38 + 12) = v45;
        *(unsigned char *)(v38 + 14) = 1;
        if ((v40 & 0x10) == 0)
        {
LABEL_45:
          if ((v40 & 0x20) == 0) {
            goto LABEL_46;
          }
          goto LABEL_58;
        }
LABEL_57:
        __int16 v46 = *(_WORD *)v6;
        v6 += 2;
        *(_WORD *)(v38 + 16) = v46;
        *(unsigned char *)(v38 + 18) = 1;
        if ((v40 & 0x20) == 0)
        {
LABEL_46:
          if ((v40 & 0x40) == 0) {
            goto LABEL_47;
          }
          goto LABEL_59;
        }
LABEL_58:
        __int16 v47 = *(_WORD *)v6;
        v6 += 2;
        *(_WORD *)(v38 + 20) = v47;
        *(unsigned char *)(v38 + 22) = 1;
        if ((v40 & 0x40) == 0)
        {
LABEL_47:
          if ((v40 & 0x80) == 0) {
            goto LABEL_48;
          }
          goto LABEL_60;
        }
LABEL_59:
        __int16 v48 = *v6++;
        *(_WORD *)(v38 + 24) = v48 | 0x100;
        if ((v40 & 0x80) == 0)
        {
LABEL_48:
          if ((v40 & 0x100) == 0) {
            goto LABEL_49;
          }
          goto LABEL_61;
        }
LABEL_60:
        __int16 v49 = *v6++;
        *(_WORD *)(v38 + 26) = v49 | 0x100;
        if ((v40 & 0x100) == 0)
        {
LABEL_49:
          if ((v40 & 0x200) == 0) {
            goto LABEL_50;
          }
          goto LABEL_62;
        }
LABEL_61:
        __int16 v50 = *v6++;
        *(_WORD *)(v38 + 28) = v50 | 0x100;
        if ((v40 & 0x200) == 0)
        {
LABEL_50:
          if ((v40 & 0x400) != 0) {
            goto LABEL_63;
          }
          goto LABEL_51;
        }
LABEL_62:
        __int16 v51 = *v6++;
        *(_WORD *)(v38 + 30) = v51 | 0x100;
        if ((v40 & 0x400) != 0)
        {
LABEL_63:
          __int16 v52 = *v6++;
          *(_WORD *)(v38 + 32) = v52 | 0x100;
          if ((v40 & 0x800) == 0) {
            goto LABEL_53;
          }
LABEL_52:
          __int16 v43 = *v6++;
          *(_WORD *)(v38 + 34) = v43 | 0x100;
          goto LABEL_53;
        }
LABEL_51:
        if ((v40 & 0x800) != 0) {
          goto LABEL_52;
        }
LABEL_53:
        v38 += 36;
        if (v38 == v39) {
          goto LABEL_65;
        }
      }
      __int16 v41 = *((_WORD *)v6 + 1);
      v6 += 4;
      *(_WORD *)(v38 + 4) = v41;
      *(unsigned char *)(v38 + 6) = 1;
      if ((v40 & 2) == 0) {
        goto LABEL_42;
      }
LABEL_41:
      __int16 v42 = *(_WORD *)v6;
      v6 += 2;
      *(_WORD *)uint64_t v38 = v42;
      *(unsigned char *)(v38 + 2) = 1;
      goto LABEL_42;
    }
LABEL_65:
    if (((unsigned __int16)a3 & 0x100) == 0)
    {
      if (a1[2])
      {
        uint64_t v53 = *v37;
        int v54 = *(_DWORD *)(*v37 + 4);
        if ((v54 & 0xFF0000) != 0)
        {
          for (uint64_t i = *(void *)(a2 + 56); v53 != i; v53 += 36)
          {
            *(_WORD *)(v53 + 4) = v54;
            *(unsigned char *)(v53 + 6) = 1;
          }
        }
      }
    }
  }
  char v56 = *(unint64_t **)(a2 + 80);
  long long v57 = *(unint64_t **)(a2 + 88);
  if (v56 != v57)
  {
    long long v58 = v56 + 2;
    do
    {
      unint64_t v59 = mimosa::v2::parse_varint(v6, a5, v36);
      unsigned __int8 v61 = v60;
      *(v58 - 2) = mimosa::v2::varint::sign_transform(v59);
      uint64_t v62 = v58 - 2;
      uint64_t v63 = &v6[v61];
      unint64_t v65 = mimosa::v2::parse_varint(v63, a5, v64);
      char v6 = &v63[v66];
      *(v58 - std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = mimosa::v2::varint::sign_transform(v65);
      if (!a1[1])
      {
        unint64_t v67 = mimosa::v2::parse_varint(v6, a5, v36);
        v6 += v68;
        *long long v58 = mimosa::v2::varint::sign_transform(v67);
      }
      v58 += 3;
    }
    while (v62 + 3 != v57);
  }
  if (((unsigned __int16)a3 & 0x800) != 0)
  {
    if ((a3 & 0x2000000) != 0)
    {
      std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>::vector(&v98, *v6);
      if (*(unsigned char *)(a2 + 184)) {
        std::__variant_detail::__dtor<std::__variant_detail::__traits<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>,unsigned char>,(std::__variant_detail::_Trait)1>::~__dtor(a2 + 152);
      }
      uint64_t v71 = v98;
      *(void *)(a2 + 152) = v98;
      uint64_t v72 = v99;
      *(_OWORD *)(a2 + 160) = v99;
      *(_DWORD *)(a2 + 176) = 0;
      *(unsigned char *)(a2 + 184) = 1;
      ++v6;
      while (v71 != v72)
      {
        *(_WORD *)uint64_t v71 = *(_WORD *)v6;
        *(_WORD *)(v71 + 2) = *((_WORD *)v6 + 1);
        *(unsigned char *)(v71 + 4) = v6[4];
        *(unsigned char *)(v71 + std::__function::__value_func<BOOL ()(mimosa::Metadata const&)>::~__value_func[abi:ne180100]((void *)this + 5) = v6[5] != 0;
        v6 += 6;
        v71 += 6;
      }
    }
    else
    {
      LOBYTE(v98) = 0;
      char v70 = *v6++;
      char v69 = v70;
      LOBYTE(v98) = v70;
      if (*(unsigned char *)(a2 + 184))
      {
        std::variant<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>,unsigned char>::operator=[abi:ne180100]<unsigned char const&,0,unsigned char,1ul,0>(a2 + 152, &v98);
      }
      else
      {
        *(unsigned char *)(a2 + 152) = v69;
        *(_DWORD *)(a2 + 176) = 1;
        *(unsigned char *)(a2 + 184) = 1;
      }
    }
  }
  long long v73 = *(unint64_t **)(a2 + 128);
  __int16 v74 = *(unint64_t **)(a2 + 136);
  while (v73 != v74)
  {
    unint64_t v75 = mimosa::v2::parse_varint(v6, a5, v36);
    uint64_t v77 = &v6[v76];
    *long long v73 = mimosa::v2::varint::sign_transform(v75);
    unint64_t v79 = mimosa::v2::parse_varint(v77, a5, v78);
    long long v81 = &v77[v80];
    v73[1] = mimosa::v2::varint::sign_transform(v79);
    unint64_t v83 = mimosa::v2::parse_varint(v81, a5, v82);
    char v6 = &v81[v84];
    void v73[2] = mimosa::v2::varint::sign_transform(v83);
    v73 += 3;
  }
  if (((unint64_t)a3 & 0x2000000000) != 0)
  {
    __int16 v86 = *(_WORD *)v6;
    v6 += 2;
    *(_WORD *)(a2 + 216) = v86;
    *(unsigned char *)(a2 + 218) = 1;
    if (((unint64_t)a3 & 0x4000000000) == 0)
    {
LABEL_90:
      if ((a3 & 4) == 0) {
        goto LABEL_91;
      }
      goto LABEL_105;
    }
  }
  else if (((unint64_t)a3 & 0x4000000000) == 0)
  {
    goto LABEL_90;
  }
  __int16 v87 = *v6++;
  *(_WORD *)(a2 + 220) = v87 | 0x100;
  if ((a3 & 4) == 0)
  {
LABEL_91:
    if (((unint64_t)a3 & 0x8000000000) == 0) {
      goto LABEL_92;
    }
    goto LABEL_106;
  }
LABEL_105:
  __int16 v88 = *v6++;
  *(_WORD *)(a2 + 222) = v88 | 0x100;
  if (((unint64_t)a3 & 0x8000000000) == 0)
  {
LABEL_92:
    if (((unint64_t)a3 & 0x10000000000) == 0) {
      goto LABEL_93;
    }
    goto LABEL_107;
  }
LABEL_106:
  __int16 v89 = *v6++;
  *(_WORD *)(a2 + 224) = v89 | 0x100;
  if (((unint64_t)a3 & 0x10000000000) == 0)
  {
LABEL_93:
    if (((unsigned __int16)a3 & 0x4000) == 0) {
      goto LABEL_94;
    }
    goto LABEL_108;
  }
LABEL_107:
  __int16 v90 = *v6++;
  *(_WORD *)(a2 + 226) = v90 | 0x100;
  if (((unsigned __int16)a3 & 0x4000) == 0)
  {
LABEL_94:
    if ((a3 & 0x200000) == 0) {
      goto LABEL_95;
    }
    goto LABEL_109;
  }
LABEL_108:
  int v91 = *(_DWORD *)v6;
  v6 += 4;
  *(_DWORD *)(a2 + 228) = v91;
  *(unsigned char *)(a2 + 232) = 1;
  if ((a3 & 0x200000) == 0)
  {
LABEL_95:
    if (((unsigned __int16)a3 & 0x400) == 0) {
      goto LABEL_96;
    }
    goto LABEL_110;
  }
LABEL_109:
  int v92 = *(_DWORD *)v6;
  v6 += 4;
  *(_DWORD *)(a2 + 236) = v92;
  *(unsigned char *)(a2 + 240) = 1;
  if (((unsigned __int16)a3 & 0x400) == 0)
  {
LABEL_96:
    if (((unint64_t)a3 & 0x80000000000) == 0) {
      goto LABEL_97;
    }
    goto LABEL_111;
  }
LABEL_110:
  int v93 = *(_DWORD *)v6;
  v6 += 4;
  *(_DWORD *)(a2 + 244) = v93;
  *(unsigned char *)(a2 + 248) = 1;
  if (((unint64_t)a3 & 0x80000000000) == 0)
  {
LABEL_97:
    if (((unsigned __int16)a3 & 0x1000) == 0) {
      goto LABEL_98;
    }
    goto LABEL_112;
  }
LABEL_111:
  int v94 = *(_DWORD *)v6;
  v6 += 4;
  *(_DWORD *)(a2 + 252) = v94;
  *(unsigned char *)(a2 + 256) = 1;
  if (((unsigned __int16)a3 & 0x1000) == 0)
  {
LABEL_98:
    if (((unint64_t)a3 & 0x20000000000) == 0) {
      goto LABEL_99;
    }
    goto LABEL_113;
  }
LABEL_112:
  __int16 v95 = *(_WORD *)v6;
  v6 += 2;
  *(_WORD *)(a2 + 260) = v95;
  *(unsigned char *)(a2 + 262) = 1;
  if (((unint64_t)a3 & 0x20000000000) == 0)
  {
LABEL_99:
    if ((a3 & 0x40000000) == 0) {
      goto LABEL_101;
    }
    goto LABEL_100;
  }
LABEL_113:
  __int16 v96 = *(_WORD *)v6;
  v6 += 2;
  *(_WORD *)(a2 + 264) = v96;
  *(unsigned char *)(a2 + 266) = 1;
  if ((a3 & 0x40000000) != 0)
  {
LABEL_100:
    __int16 v85 = *v6++;
    *(_WORD *)(a2 + 268) = v85 | 0x100;
  }
LABEL_101:
  if (v6 != a5)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "something went wrong during patch decoding");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
}

void sub_22277C6B4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::vector<mimosa::v2::OpticalSamplesV1SubpacketState::Patch::ADCDelta>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3);
  BOOL v3 = a2 >= v2;
  unint64_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<mimosa::v2::OpticalSamplesV1SubpacketState::Patch::ADCDelta>::__append((void **)a1, v4);
  }
  else if (!v3)
  {
    *(void *)(a1 + 8) = *(void *)a1 + 24 * a2;
  }
}

void *std::optional<std::vector<mimosa::v2::OpticalSamplesV1SubpacketState::Patch::Sample>>::emplace[abi:ne180100]<unsigned char &,void>(uint64_t a1, unsigned __int8 *a2)
{
  if (*(unsigned char *)(a1 + 24))
  {
    unint64_t v4 = *(void **)a1;
    if (*(void *)a1)
    {
      *(void *)(a1 + 8) = v4;
      operator delete(v4);
    }
    *(unsigned char *)(a1 + 24) = 0;
  }
  uint64_t result = std::vector<mimosa::v2::OpticalSamplesV1SubpacketState::Patch::Sample>::vector((void *)a1, *a2);
  *(unsigned char *)(a1 + 24) = 1;
  return result;
}

void std::vector<mimosa::v2::OpticalSamplesV1SubpacketState::Patch::ADCDelta>::__append(void **a1, unint64_t a2)
{
  char v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (unsigned char *)*a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<mimosa::OpticalSampleV1>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (unsigned char *)*a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11) {
      unsigned __int8 v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<health_algorithms::PPGProcessor::AccelOutputSignal>>(v4, v11);
    }
    else {
      unsigned __int8 v12 = 0;
    }
    unsigned __int8 v14 = &v12[24 * v8];
    __int16 v15 = &v12[24 * v11];
    size_t v16 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v14, v16);
    unsigned __int8 v17 = &v14[v16];
    unsigned __int8 v19 = (char *)*a1;
    unint64_t v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        long long v20 = *(_OWORD *)(v18 - 24);
        *((void *)v14 - std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = *((void *)v18 - 1);
        *(_OWORD *)(v14 - 24) = v20;
        v14 -= 24;
        v18 -= 24;
      }
      while (v18 != v19);
      unint64_t v18 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v15;
    if (v18)
    {
      operator delete(v18);
    }
  }
}

void *std::vector<mimosa::v2::OpticalSamplesV1SubpacketState::Patch::Sample>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<mimosa::OpticalSampleV1>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    size_t v5 = 36 * ((36 * a2 - 36) / 0x24) + 36;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_22277C974(_Unwind_Exception *exception_object)
{
  BOOL v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__dtor<std::__variant_detail::__traits<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>,unsigned char>,(std::__variant_detail::_Trait)1>::~__dtor(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 24);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26D4E42E8[v2])(&v4, a1);
  }
  *(_DWORD *)(a1 + 24) = -1;
  return a1;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJNS_6vectorIN6mimosa2v219AccelSubpacketState12SampleHeaderENS_9allocatorISC_EEEEhEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSF_hEEEEEEDcSJ_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a2;
  if (*(void *)a2)
  {
    *(void *)(a2 + 8) = v2;
    operator delete(v2);
  }
}

void *std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>::__vallocate[abi:ne180100](a1, a2);
    char v4 = (char *)a1[1];
    size_t v5 = 6 * ((6 * a2 - 6) / 6) + 6;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_22277CA84(_Unwind_Exception *exception_object)
{
  BOOL v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x2AAAAAAAAAAAAAABLL) {
    std::vector<mimosa::OpticalSampleV1>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<mimosa::v2::AccelSubpacketState::SampleHeader>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[6 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<mimosa::v2::AccelSubpacketState::SampleHeader>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x2AAAAAAAAAAAAAABLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(6 * a2);
}

uint64_t std::variant<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>,unsigned char>::operator=[abi:ne180100]<unsigned char const&,0,unsigned char,1ul,0>(uint64_t a1, unsigned char *a2)
{
  if (*(_DWORD *)(a1 + 24) == 1) {
    *(unsigned char *)a1 = *a2;
  }
  else {
    std::__variant_detail::__assignment<std::__variant_detail::__traits<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>,unsigned char>>::__emplace[abi:ne180100]<1ul,unsigned char const&>(a1, a2);
  }
  return a1;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>,unsigned char>>::__emplace[abi:ne180100]<1ul,unsigned char const&>(uint64_t a1, unsigned char *a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 24);
  if (v4 != -1) {
    ((void (*)(char *, uint64_t))off_26D4E42E8[v4])(&v6, a1);
  }
  *(_DWORD *)(a1 + 24) = -1;
  *(unsigned char *)a1 = *a2;
  *(_DWORD *)(a1 + 24) = 1;
  return a1;
}

unint64_t mimosa::v2::PatchDecoder::extract_patch<mimosa::v2::PacketState::PatchV2>(unsigned char *a1, uint64_t a2, const byte *a3, const byte *this, byte *a5)
{
  char v6 = this;
  if ((a3 & 0x20) != 0)
  {
    a1[1] ^= 1u;
    if ((a3 & 0x10) != 0)
    {
LABEL_3:
      if ((a3 & 0x8000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else if ((a3 & 0x10) != 0)
  {
    goto LABEL_3;
  }
  unint64_t v11 = mimosa::v2::parse_varint(this, a5, a3);
  v6 += v12;
  *(void *)a2 = mimosa::v2::varint::sign_transform(v11);
  if ((a3 & 0x8000000) == 0)
  {
LABEL_4:
    if ((a3 & 0x20000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
LABEL_12:
  unint64_t v13 = mimosa::v2::parse_varint(v6, a5, a3);
  v6 += v14;
  *(void *)(a2 + 8) = mimosa::v2::varint::sign_transform(v13);
  if ((a3 & 0x20000000) == 0)
  {
LABEL_5:
    if (a3) {
      goto LABEL_6;
    }
    goto LABEL_14;
  }
LABEL_13:
  __int16 v15 = *v6++;
  *(_WORD *)(a2 + 16) = v15 | 0x100;
  if (a3)
  {
LABEL_6:
    if (((unsigned __int16)a3 & 0x8000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_15;
  }
LABEL_14:
  unint64_t v16 = mimosa::v2::parse_varint(v6, a5, a3);
  v6 += v17;
  *(void *)(a2 + 24) = mimosa::v2::varint::sign_transform(v16);
  if (((unsigned __int16)a3 & 0x8000) == 0)
  {
LABEL_7:
    if (((unint64_t)a3 & 0x100000000000) == 0) {
      goto LABEL_8;
    }
LABEL_16:
    __int16 v20 = *v6++;
    *(_WORD *)(a2 + 40) = v20 | 0x100;
    if ((a3 & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_17;
  }
LABEL_15:
  unint64_t v18 = mimosa::v2::parse_varint(v6, a5, a3);
  v6 += v19;
  *(void *)(a2 + 32) = mimosa::v2::varint::sign_transform(v18);
  if (((unint64_t)a3 & 0x100000000000) != 0) {
    goto LABEL_16;
  }
LABEL_8:
  if ((a3 & 0x80000000) == 0)
  {
LABEL_9:
    unint64_t v10 = *(void *)(a2 + 104);
    goto LABEL_18;
  }
LABEL_17:
  unint64_t v21 = mimosa::v2::parse_varint(v6, a5, a3);
  v6 += v22;
  unint64_t v10 = mimosa::v2::varint::sign_transform(v21);
  *(void *)(a2 + 104) = v10;
LABEL_18:
  *(void *)(a2 + 104) = v10 + *(void *)(a2 + 24);
  if ((a3 & 0x80000) == 0)
  {
    if (((unint64_t)a3 & 0x200000000000) == 0) {
      goto LABEL_20;
    }
LABEL_23:
    __int16 v26 = *v6++;
    *(_WORD *)(a2 + 120) = v26 | 0x100;
    if (((unint64_t)a3 & 0x100000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_24;
  }
  unint64_t v24 = mimosa::v2::parse_varint(v6, a5, a3);
  v6 += v25;
  *(void *)(a2 + 112) = mimosa::v2::varint::sign_transform(v24);
  if (((unint64_t)a3 & 0x200000000000) != 0) {
    goto LABEL_23;
  }
LABEL_20:
  if (((unint64_t)a3 & 0x100000000) == 0)
  {
LABEL_21:
    unint64_t v23 = *(void *)(a2 + 192);
    goto LABEL_25;
  }
LABEL_24:
  unint64_t v27 = mimosa::v2::parse_varint(v6, a5, a3);
  v6 += v28;
  unint64_t v23 = mimosa::v2::varint::sign_transform(v27);
  *(void *)(a2 + 192) = v23;
LABEL_25:
  *(void *)(a2 + 192) = v23 + *(void *)(a2 + 24);
  if ((a3 & 0x40000) == 0)
  {
    if (((unint64_t)a3 & 0x400000000000) == 0) {
      goto LABEL_27;
    }
LABEL_30:
    __int16 v32 = *v6++;
    *(_WORD *)(a2 + 208) = v32 | 0x100;
    if (((unint64_t)a3 & 0x200000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_31;
  }
  unint64_t v30 = mimosa::v2::parse_varint(v6, a5, a3);
  v6 += v31;
  *(void *)(a2 + 200) = mimosa::v2::varint::sign_transform(v30);
  if (((unint64_t)a3 & 0x400000000000) != 0) {
    goto LABEL_30;
  }
LABEL_27:
  if (((unint64_t)a3 & 0x200000000) == 0)
  {
LABEL_28:
    unint64_t v29 = *(void *)(a2 + 272);
    goto LABEL_32;
  }
LABEL_31:
  unint64_t v33 = mimosa::v2::parse_varint(v6, a5, a3);
  v6 += v34;
  unint64_t v29 = mimosa::v2::varint::sign_transform(v33);
  *(void *)(a2 + 272) = v29;
LABEL_32:
  *(void *)(a2 + 272) = v29 + *(void *)(a2 + 24);
  if ((a3 & 0x100000) == 0)
  {
    if (((unint64_t)a3 & 0x800000000000) == 0) {
      goto LABEL_34;
    }
LABEL_37:
    __int16 v38 = *v6++;
    *(_WORD *)(a2 + 288) = v38 | 0x100;
    if (((unint64_t)a3 & 0x400000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_38;
  }
  unint64_t v36 = mimosa::v2::parse_varint(v6, a5, a3);
  v6 += v37;
  *(void *)(a2 + 280) = mimosa::v2::varint::sign_transform(v36);
  if (((unint64_t)a3 & 0x800000000000) != 0) {
    goto LABEL_37;
  }
LABEL_34:
  if (((unint64_t)a3 & 0x400000000) == 0)
  {
LABEL_35:
    unint64_t v35 = *(void *)(a2 + 344);
    goto LABEL_39;
  }
LABEL_38:
  unint64_t v39 = mimosa::v2::parse_varint(v6, a5, a3);
  v6 += v40;
  unint64_t v35 = mimosa::v2::varint::sign_transform(v39);
  *(void *)(a2 + 344) = v35;
LABEL_39:
  *(void *)(a2 + 344) = v35 + *(void *)(a2 + 24);
  if (((unint64_t)a3 & 0x800000000) == 0)
  {
    if (((unint64_t)a3 & 0x1000000000000) == 0) {
      goto LABEL_41;
    }
LABEL_44:
    __int16 v44 = *v6++;
    *(_WORD *)(a2 + 360) = v44 | 0x100;
    if (((unint64_t)a3 & 0x1000000000) == 0) {
      goto LABEL_42;
    }
    goto LABEL_45;
  }
  unint64_t v42 = mimosa::v2::parse_varint(v6, a5, a3);
  v6 += v43;
  *(void *)(a2 + 352) = mimosa::v2::varint::sign_transform(v42);
  if (((unint64_t)a3 & 0x1000000000000) != 0) {
    goto LABEL_44;
  }
LABEL_41:
  if (((unint64_t)a3 & 0x1000000000) == 0)
  {
LABEL_42:
    unint64_t v41 = *(void *)(a2 + 376);
    goto LABEL_46;
  }
LABEL_45:
  unint64_t v45 = mimosa::v2::parse_varint(v6, a5, a3);
  v6 += v46;
  unint64_t v41 = mimosa::v2::varint::sign_transform(v45);
  *(void *)(a2 + 376) = v41;
LABEL_46:
  *(void *)(a2 + 376) = v41 + *(void *)(a2 + 24);
  if ((a3 & 0x400000) == 0)
  {
    if (((unint64_t)a3 & 0x2000000000000) == 0) {
      goto LABEL_48;
    }
LABEL_51:
    __int16 v50 = *v6++;
    *(_WORD *)(a2 + 392) = v50 | 0x100;
    if ((a3 & 8) == 0) {
      goto LABEL_49;
    }
    goto LABEL_52;
  }
  unint64_t v48 = mimosa::v2::parse_varint(v6, a5, a3);
  v6 += v49;
  *(void *)(a2 + 384) = mimosa::v2::varint::sign_transform(v48);
  if (((unint64_t)a3 & 0x2000000000000) != 0) {
    goto LABEL_51;
  }
LABEL_48:
  if ((a3 & 8) == 0)
  {
LABEL_49:
    unsigned int v47 = a1[2];
    goto LABEL_53;
  }
LABEL_52:
  unsigned int v51 = *v6++;
  unsigned int v47 = v51;
  a1[2] = v51;
LABEL_53:
  std::vector<mimosa::v2::OpticalSamplesV1SubpacketState::Patch::ADCDelta>::resize(a2 + 80, v47);
  if (((unsigned __int16)a3 & 0x2000) != 0)
  {
    unsigned int v53 = *v6++;
    unsigned int v52 = v53;
    a1[3] = v53;
  }
  else
  {
    unsigned int v52 = a1[3];
  }
  int v54 = a1 + 2;
  std::vector<mimosa::v2::OpticalSamplesV1SubpacketState::Patch::ADCDelta>::resize(a2 + 128, v52);
  if ((a3 & 0x80) != 0)
  {
    char v56 = (uint64_t *)(a2 + 48);
    std::optional<std::vector<mimosa::v2::OpticalSamplesV1SubpacketState::Patch::Sample>>::emplace[abi:ne180100]<unsigned char &,void>(a2 + 48, a1 + 2);
    uint64_t v57 = *(void *)(a2 + 48);
    uint64_t v58 = *(void *)(a2 + 56);
    if (v57 != v58)
    {
      while (1)
      {
        __int16 v59 = *(_WORD *)v6;
        if (*(_WORD *)v6) {
          break;
        }
        v6 += 2;
        if ((v59 & 2) != 0) {
          goto LABEL_62;
        }
LABEL_63:
        if ((v59 & 4) != 0)
        {
          __int16 v63 = *(_WORD *)v6;
          v6 += 2;
          *(_WORD *)(v57 + 8) = v63;
          *(unsigned char *)(v57 + 10) = 1;
          if ((v59 & 8) == 0)
          {
LABEL_65:
            if ((v59 & 0x10) == 0) {
              goto LABEL_66;
            }
            goto LABEL_78;
          }
        }
        else if ((v59 & 8) == 0)
        {
          goto LABEL_65;
        }
        __int16 v64 = *(_WORD *)v6;
        v6 += 2;
        *(_WORD *)(v57 + 12) = v64;
        *(unsigned char *)(v57 + 14) = 1;
        if ((v59 & 0x10) == 0)
        {
LABEL_66:
          if ((v59 & 0x20) == 0) {
            goto LABEL_67;
          }
          goto LABEL_79;
        }
LABEL_78:
        __int16 v65 = *(_WORD *)v6;
        v6 += 2;
        *(_WORD *)(v57 + 16) = v65;
        *(unsigned char *)(v57 + 18) = 1;
        if ((v59 & 0x20) == 0)
        {
LABEL_67:
          if ((v59 & 0x40) == 0) {
            goto LABEL_68;
          }
          goto LABEL_80;
        }
LABEL_79:
        __int16 v66 = *(_WORD *)v6;
        v6 += 2;
        *(_WORD *)(v57 + 20) = v66;
        *(unsigned char *)(v57 + 22) = 1;
        if ((v59 & 0x40) == 0)
        {
LABEL_68:
          if ((v59 & 0x80) == 0) {
            goto LABEL_69;
          }
          goto LABEL_81;
        }
LABEL_80:
        __int16 v67 = *v6++;
        *(_WORD *)(v57 + 24) = v67 | 0x100;
        if ((v59 & 0x80) == 0)
        {
LABEL_69:
          if ((v59 & 0x100) == 0) {
            goto LABEL_70;
          }
          goto LABEL_82;
        }
LABEL_81:
        __int16 v68 = *v6++;
        *(_WORD *)(v57 + 26) = v68 | 0x100;
        if ((v59 & 0x100) == 0)
        {
LABEL_70:
          if ((v59 & 0x200) == 0) {
            goto LABEL_71;
          }
          goto LABEL_83;
        }
LABEL_82:
        __int16 v69 = *v6++;
        *(_WORD *)(v57 + 28) = v69 | 0x100;
        if ((v59 & 0x200) == 0)
        {
LABEL_71:
          if ((v59 & 0x400) != 0) {
            goto LABEL_84;
          }
          goto LABEL_72;
        }
LABEL_83:
        __int16 v70 = *v6++;
        *(_WORD *)(v57 + 30) = v70 | 0x100;
        if ((v59 & 0x400) != 0)
        {
LABEL_84:
          __int16 v71 = *v6++;
          *(_WORD *)(v57 + 32) = v71 | 0x100;
          if ((v59 & 0x800) == 0) {
            goto LABEL_74;
          }
LABEL_73:
          __int16 v62 = *v6++;
          *(_WORD *)(v57 + 34) = v62 | 0x100;
          goto LABEL_74;
        }
LABEL_72:
        if ((v59 & 0x800) != 0) {
          goto LABEL_73;
        }
LABEL_74:
        v57 += 36;
        if (v57 == v58) {
          goto LABEL_86;
        }
      }
      __int16 v60 = *((_WORD *)v6 + 1);
      v6 += 4;
      *(_WORD *)(v57 + 4) = v60;
      *(unsigned char *)(v57 + 6) = 1;
      if ((v59 & 2) == 0) {
        goto LABEL_63;
      }
LABEL_62:
      __int16 v61 = *(_WORD *)v6;
      v6 += 2;
      *(_WORD *)uint64_t v57 = v61;
      *(unsigned char *)(v57 + 2) = 1;
      goto LABEL_63;
    }
LABEL_86:
    if (((unsigned __int16)a3 & 0x100) == 0)
    {
      if (*v54)
      {
        uint64_t v72 = *v56;
        int v73 = *(_DWORD *)(*v56 + 4);
        if ((v73 & 0xFF0000) != 0)
        {
          for (uint64_t i = *(void *)(a2 + 56); v72 != i; v72 += 36)
          {
            *(_WORD *)(v72 + 4) = v73;
            *(unsigned char *)(v72 + 6) = 1;
          }
        }
      }
    }
  }
  unint64_t v75 = *(unint64_t **)(a2 + 80);
  unsigned __int8 v76 = *(unint64_t **)(a2 + 88);
  if (v75 != v76)
  {
    uint64_t v77 = v75 + 2;
    do
    {
      unint64_t v78 = mimosa::v2::parse_varint(v6, a5, v55);
      unsigned __int8 v80 = v79;
      *(v77 - 2) = mimosa::v2::varint::sign_transform(v78);
      long long v81 = v77 - 2;
      long long v82 = &v6[v80];
      unint64_t v84 = mimosa::v2::parse_varint(v82, a5, v83);
      char v6 = &v82[v85];
      *(v77 - std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = mimosa::v2::varint::sign_transform(v84);
      if (!a1[1])
      {
        unint64_t v86 = mimosa::v2::parse_varint(v6, a5, v55);
        v6 += v87;
        unint64_t *v77 = mimosa::v2::varint::sign_transform(v86);
      }
      v77 += 3;
    }
    while (v81 + 3 != v76);
  }
  if (((unsigned __int16)a3 & 0x800) != 0)
  {
    if ((a3 & 0x2000000) != 0)
    {
      std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>::vector(&v140, *v6);
      if (*(unsigned char *)(a2 + 184)) {
        std::__variant_detail::__dtor<std::__variant_detail::__traits<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>,unsigned char>,(std::__variant_detail::_Trait)1>::~__dtor(a2 + 152);
      }
      __int16 v90 = v140;
      *(void *)(a2 + 152) = v140;
      int v91 = (_WORD *)v141;
      *(_OWORD *)(a2 + 160) = v141;
      *(_DWORD *)(a2 + 176) = 0;
      *(unsigned char *)(a2 + 184) = 1;
      ++v6;
      while (v90 != v91)
      {
        *__int16 v90 = *(_WORD *)v6;
        v90[1] = *((_WORD *)v6 + 1);
        *((unsigned char *)v90 + 4) = v6[4];
        *((unsigned char *)v90 + std::__function::__value_func<BOOL ()(mimosa::Metadata const&)>::~__value_func[abi:ne180100]((void *)this + 5) = v6[5] != 0;
        v6 += 6;
        v90 += 3;
      }
    }
    else
    {
      LOBYTE(v140) = 0;
      char v89 = *v6++;
      char v88 = v89;
      LOBYTE(v140) = v89;
      if (*(unsigned char *)(a2 + 184))
      {
        std::variant<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>,unsigned char>::operator=[abi:ne180100]<unsigned char const&,0,unsigned char,1ul,0>(a2 + 152, &v140);
      }
      else
      {
        *(unsigned char *)(a2 + 152) = v88;
        *(_DWORD *)(a2 + 176) = 1;
        *(unsigned char *)(a2 + 184) = 1;
      }
    }
  }
  int v92 = *(unint64_t **)(a2 + 128);
  int v93 = *(unint64_t **)(a2 + 136);
  while (v92 != v93)
  {
    unint64_t v94 = mimosa::v2::parse_varint(v6, a5, v55);
    __int16 v96 = &v6[v95];
    unint64_t *v92 = mimosa::v2::varint::sign_transform(v94);
    unint64_t v98 = mimosa::v2::parse_varint(v96, a5, v97);
    int v100 = &v96[v99];
    v92[1] = mimosa::v2::varint::sign_transform(v98);
    unint64_t v102 = mimosa::v2::parse_varint(v100, a5, v101);
    char v6 = &v100[v103];
    v92[2] = mimosa::v2::varint::sign_transform(v102);
    v92 += 3;
  }
  if (((unint64_t)a3 & 0x2000000000) != 0)
  {
    __int16 v104 = *(_WORD *)v6;
    v6 += 2;
    *(_WORD *)(a2 + 216) = v104;
    *(unsigned char *)(a2 + 218) = 1;
    if (((unint64_t)a3 & 0x4000000000) == 0)
    {
LABEL_111:
      if ((a3 & 4) == 0) {
        goto LABEL_112;
      }
      goto LABEL_125;
    }
  }
  else if (((unint64_t)a3 & 0x4000000000) == 0)
  {
    goto LABEL_111;
  }
  __int16 v105 = *v6++;
  *(_WORD *)(a2 + 220) = v105 | 0x100;
  if ((a3 & 4) == 0)
  {
LABEL_112:
    if (((unint64_t)a3 & 0x8000000000) == 0) {
      goto LABEL_113;
    }
    goto LABEL_126;
  }
LABEL_125:
  __int16 v106 = *v6++;
  *(_WORD *)(a2 + 222) = v106 | 0x100;
  if (((unint64_t)a3 & 0x8000000000) == 0)
  {
LABEL_113:
    if (((unint64_t)a3 & 0x10000000000) == 0) {
      goto LABEL_114;
    }
    goto LABEL_127;
  }
LABEL_126:
  __int16 v107 = *v6++;
  *(_WORD *)(a2 + 224) = v107 | 0x100;
  if (((unint64_t)a3 & 0x10000000000) == 0)
  {
LABEL_114:
    if (((unsigned __int16)a3 & 0x4000) == 0) {
      goto LABEL_115;
    }
    goto LABEL_128;
  }
LABEL_127:
  __int16 v108 = *v6++;
  *(_WORD *)(a2 + 226) = v108 | 0x100;
  if (((unsigned __int16)a3 & 0x4000) == 0)
  {
LABEL_115:
    if ((a3 & 0x200000) == 0) {
      goto LABEL_116;
    }
    goto LABEL_129;
  }
LABEL_128:
  int v109 = *(_DWORD *)v6;
  v6 += 4;
  *(_DWORD *)(a2 + 228) = v109;
  *(unsigned char *)(a2 + 232) = 1;
  if ((a3 & 0x200000) == 0)
  {
LABEL_116:
    if (((unsigned __int16)a3 & 0x400) == 0) {
      goto LABEL_117;
    }
    goto LABEL_130;
  }
LABEL_129:
  int v110 = *(_DWORD *)v6;
  v6 += 4;
  *(_DWORD *)(a2 + 236) = v110;
  *(unsigned char *)(a2 + 240) = 1;
  if (((unsigned __int16)a3 & 0x400) == 0)
  {
LABEL_117:
    if (((unint64_t)a3 & 0x80000000000) == 0) {
      goto LABEL_118;
    }
    goto LABEL_131;
  }
LABEL_130:
  int v111 = *(_DWORD *)v6;
  v6 += 4;
  *(_DWORD *)(a2 + 244) = v111;
  *(unsigned char *)(a2 + 248) = 1;
  if (((unint64_t)a3 & 0x80000000000) == 0)
  {
LABEL_118:
    if (((unsigned __int16)a3 & 0x1000) == 0) {
      goto LABEL_119;
    }
    goto LABEL_132;
  }
LABEL_131:
  int v112 = *(_DWORD *)v6;
  v6 += 4;
  *(_DWORD *)(a2 + 252) = v112;
  *(unsigned char *)(a2 + 256) = 1;
  if (((unsigned __int16)a3 & 0x1000) == 0)
  {
LABEL_119:
    if (((unint64_t)a3 & 0x20000000000) == 0) {
      goto LABEL_120;
    }
    goto LABEL_133;
  }
LABEL_132:
  __int16 v113 = *(_WORD *)v6;
  v6 += 2;
  *(_WORD *)(a2 + 260) = v113;
  *(unsigned char *)(a2 + 262) = 1;
  if (((unint64_t)a3 & 0x20000000000) == 0)
  {
LABEL_120:
    if ((a3 & 0x40000000) == 0) {
      goto LABEL_121;
    }
    goto LABEL_134;
  }
LABEL_133:
  __int16 v114 = *(_WORD *)v6;
  v6 += 2;
  *(_WORD *)(a2 + 264) = v114;
  *(unsigned char *)(a2 + 266) = 1;
  if ((a3 & 0x40000000) == 0)
  {
LABEL_121:
    if (((unsigned __int16)a3 & 0x200) == 0) {
      goto LABEL_144;
    }
    goto LABEL_135;
  }
LABEL_134:
  __int16 v115 = *v6++;
  *(_WORD *)(a2 + 268) = v115 | 0x100;
  if (((unsigned __int16)a3 & 0x200) == 0) {
    goto LABEL_144;
  }
LABEL_135:
  if ((a3 & 0x800000) != 0)
  {
    std::vector<unsigned short>::vector(&v140, *v54);
    if (*(unsigned char *)(a2 + 328)) {
      std::__variant_detail::__dtor<std::__variant_detail::__traits<std::vector<unsigned short>,unsigned char>,(std::__variant_detail::_Trait)1>::~__dtor(a2 + 296);
    }
    v118 = v140;
    *(void *)(a2 + 296) = v140;
    v119 = (_WORD *)v141;
    *(_OWORD *)(a2 + 304) = v141;
    *(_DWORD *)(a2 + 320) = 0;
    *(unsigned char *)(a2 + 328) = 1;
    while (v118 != v119)
    {
      __int16 v120 = *(_WORD *)v6;
      v6 += 2;
      *v118++ = v120;
    }
  }
  else
  {
    LOBYTE(v140) = 0;
    char v117 = *v6++;
    char v116 = v117;
    LOBYTE(v140) = v117;
    if (*(unsigned char *)(a2 + 328))
    {
      std::variant<std::vector<unsigned short>,unsigned char>::operator=[abi:ne180100]<unsigned char const&,0,unsigned char,1ul,0>(a2 + 296, &v140);
    }
    else
    {
      *(unsigned char *)(a2 + 296) = v116;
      *(_DWORD *)(a2 + 320) = 1;
      *(unsigned char *)(a2 + 328) = 1;
    }
  }
LABEL_144:
  if ((a3 & 0x4000000) != 0)
  {
    __int16 v131 = *v6++;
    *(_WORD *)(a2 + 336) = v131 | 0x100;
    if ((a3 & 0x20000) == 0)
    {
LABEL_146:
      if (((unint64_t)a3 & 0x40000000000) == 0) {
        goto LABEL_147;
      }
      goto LABEL_159;
    }
  }
  else if ((a3 & 0x20000) == 0)
  {
    goto LABEL_146;
  }
  __int16 v132 = *v6++;
  *(_WORD *)(a2 + 338) = v132 | 0x100;
  if (((unint64_t)a3 & 0x40000000000) == 0)
  {
LABEL_147:
    if ((a3 & 2) == 0) {
      goto LABEL_148;
    }
    goto LABEL_160;
  }
LABEL_159:
  __int16 v133 = *(_WORD *)v6;
  v6 += 2;
  *(_WORD *)(a2 + 368) = v133;
  *(unsigned char *)(a2 + 370) = 1;
  if ((a3 & 2) == 0)
  {
LABEL_148:
    if ((a3 & 0x10000) == 0) {
      goto LABEL_149;
    }
    goto LABEL_161;
  }
LABEL_160:
  unint64_t v134 = mimosa::v2::parse_varint(v6, a5, v55);
  v6 += v135;
  *(_DWORD *)(a2 + 372) = mimosa::v2::varint::sign_transform(v134);
  if ((a3 & 0x10000) == 0)
  {
LABEL_149:
    if ((a3 & 0x40) != 0) {
      goto LABEL_150;
    }
    goto LABEL_151;
  }
LABEL_161:
  if ((a3 & 0x1000000) != 0)
  {
    uint64_t v138 = 0;
    *(void *)(a2 + 448) = 0;
    *(void *)(a2 + 456) = 0;
    *(unsigned char *)(a2 + 464) = 1;
    do
    {
      *(_WORD *)(a2 + 448 + v138) = *(_WORD *)&v6[v138];
      v138 += 2;
    }
    while (v138 != 12);
    v6 += 12;
    if ((a3 & 0x40) == 0) {
      goto LABEL_151;
    }
    goto LABEL_150;
  }
  char v137 = *v6++;
  char v136 = v137;
  if (!*(unsigned char *)(a2 + 464))
  {
    *(unsigned char *)(a2 + 448) = v136;
    *(_DWORD *)(a2 + 460) = 1;
    *(unsigned char *)(a2 + 464) = 1;
    if ((a3 & 0x40) == 0) {
      goto LABEL_151;
    }
    goto LABEL_150;
  }
  if (*(_DWORD *)(a2 + 460) != 1) {
    *(_DWORD *)(a2 + 460) = 1;
  }
  *(unsigned char *)(a2 + 448) = v136;
  if ((a3 & 0x40) != 0)
  {
LABEL_150:
    __int16 v121 = *(_WORD *)v6;
    v6 += 2;
    *(_WORD *)(a2 + 468) = v121;
    *(unsigned char *)(a2 + 470) = 1;
  }
LABEL_151:
  unint64_t result = mimosa::v2::parse_varint(v6, a5, v55);
  unint64_t v124 = result;
  uint64_t v125 = 0;
  v127 = &v6[v126];
  uint64_t v128 = a2 + 400;
  do
  {
    if (v124)
    {
      unint64_t v129 = mimosa::v2::parse_varint(v127, a5, v123);
      v127 += v130;
      unint64_t result = mimosa::v2::varint::sign_transform(v129);
      *(void *)(v128 + v12std::__function::__value_func<BOOL ()(mimosa::Metadata const&)>::~__value_func[abi:ne180100]((void *)this + 5) = result;
    }
    v124 >>= 1;
    v125 += 8;
  }
  while (v125 != 48);
  if (v127 != a5)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "something went wrong during patch decoding");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return result;
}

void sub_22277D558(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__dtor<std::__variant_detail::__traits<std::vector<unsigned short>,unsigned char>,(std::__variant_detail::_Trait)1>::~__dtor(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 24);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26D4E42F8[v2])(&v4, a1);
  }
  *(_DWORD *)(a1 + 24) = -1;
  return a1;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJNS_6vectorItNS_9allocatorItEEEEhEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSB_hEEEEEEDcSF_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a2;
  if (*(void *)a2)
  {
    *(void *)(a2 + 8) = v2;
    operator delete(v2);
  }
}

void *std::vector<unsigned short>::vector(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned short>::__vallocate[abi:ne180100](a1, a2);
    char v4 = (char *)a1[1];
    bzero(v4, 2 * a2);
    a1[1] = &v4[2 * a2];
  }
  return a1;
}

void sub_22277D63C(_Unwind_Exception *exception_object)
{
  BOOL v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::variant<std::vector<unsigned short>,unsigned char>::operator=[abi:ne180100]<unsigned char const&,0,unsigned char,1ul,0>(uint64_t a1, unsigned char *a2)
{
  if (*(_DWORD *)(a1 + 24) == 1) {
    *(unsigned char *)a1 = *a2;
  }
  else {
    std::__variant_detail::__assignment<std::__variant_detail::__traits<std::vector<unsigned short>,unsigned char>>::__emplace[abi:ne180100]<1ul,unsigned char const&>(a1, a2);
  }
  return a1;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<std::vector<unsigned short>,unsigned char>>::__emplace[abi:ne180100]<1ul,unsigned char const&>(uint64_t a1, unsigned char *a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 24);
  if (v4 != -1) {
    ((void (*)(char *, uint64_t))off_26D4E42F8[v4])(&v6, a1);
  }
  *(_DWORD *)(a1 + 24) = -1;
  *(unsigned char *)a1 = *a2;
  *(_DWORD *)(a1 + 24) = 1;
  return a1;
}

void mimosa::v2::PatchDecoder::extract_patch<mimosa::v2::PacketState::PatchV3>(unsigned char *a1, uint64_t a2, const byte *a3, const byte *this, byte *a5)
{
  char v6 = this;
  if ((a3 & 0x20) != 0)
  {
    a1[1] ^= 1u;
    if ((a3 & 0x10) != 0)
    {
LABEL_3:
      if ((a3 & 0x8000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else if ((a3 & 0x10) != 0)
  {
    goto LABEL_3;
  }
  unint64_t v11 = mimosa::v2::parse_varint(this, a5, a3);
  v6 += v12;
  *(void *)a2 = mimosa::v2::varint::sign_transform(v11);
  if ((a3 & 0x8000000) == 0)
  {
LABEL_4:
    if ((a3 & 0x20000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
LABEL_12:
  unint64_t v13 = mimosa::v2::parse_varint(v6, a5, a3);
  v6 += v14;
  *(void *)(a2 + 8) = mimosa::v2::varint::sign_transform(v13);
  if ((a3 & 0x20000000) == 0)
  {
LABEL_5:
    if (a3) {
      goto LABEL_6;
    }
    goto LABEL_14;
  }
LABEL_13:
  __int16 v15 = *v6++;
  *(_WORD *)(a2 + 16) = v15 | 0x100;
  if (a3)
  {
LABEL_6:
    if (((unsigned __int16)a3 & 0x8000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_15;
  }
LABEL_14:
  unint64_t v16 = mimosa::v2::parse_varint(v6, a5, a3);
  v6 += v17;
  *(void *)(a2 + 24) = mimosa::v2::varint::sign_transform(v16);
  if (((unsigned __int16)a3 & 0x8000) == 0)
  {
LABEL_7:
    if (((unint64_t)a3 & 0x100000000000) == 0) {
      goto LABEL_8;
    }
LABEL_16:
    __int16 v20 = *v6++;
    *(_WORD *)(a2 + 40) = v20 | 0x100;
    if ((a3 & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_17;
  }
LABEL_15:
  unint64_t v18 = mimosa::v2::parse_varint(v6, a5, a3);
  v6 += v19;
  *(void *)(a2 + 32) = mimosa::v2::varint::sign_transform(v18);
  if (((unint64_t)a3 & 0x100000000000) != 0) {
    goto LABEL_16;
  }
LABEL_8:
  if ((a3 & 0x80000000) == 0)
  {
LABEL_9:
    unint64_t v10 = *(void *)(a2 + 104);
    goto LABEL_18;
  }
LABEL_17:
  unint64_t v21 = mimosa::v2::parse_varint(v6, a5, a3);
  v6 += v22;
  unint64_t v10 = mimosa::v2::varint::sign_transform(v21);
  *(void *)(a2 + 104) = v10;
LABEL_18:
  *(void *)(a2 + 104) = v10 + *(void *)(a2 + 24);
  if ((a3 & 0x80000) == 0)
  {
    if (((unint64_t)a3 & 0x200000000000) == 0) {
      goto LABEL_20;
    }
LABEL_23:
    __int16 v26 = *v6++;
    *(_WORD *)(a2 + 120) = v26 | 0x100;
    if (((unint64_t)a3 & 0x100000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_24;
  }
  unint64_t v24 = mimosa::v2::parse_varint(v6, a5, a3);
  v6 += v25;
  *(void *)(a2 + 112) = mimosa::v2::varint::sign_transform(v24);
  if (((unint64_t)a3 & 0x200000000000) != 0) {
    goto LABEL_23;
  }
LABEL_20:
  if (((unint64_t)a3 & 0x100000000) == 0)
  {
LABEL_21:
    unint64_t v23 = *(void *)(a2 + 192);
    goto LABEL_25;
  }
LABEL_24:
  unint64_t v27 = mimosa::v2::parse_varint(v6, a5, a3);
  v6 += v28;
  unint64_t v23 = mimosa::v2::varint::sign_transform(v27);
  *(void *)(a2 + 192) = v23;
LABEL_25:
  *(void *)(a2 + 192) = v23 + *(void *)(a2 + 24);
  if ((a3 & 0x40000) == 0)
  {
    if (((unint64_t)a3 & 0x400000000000) == 0) {
      goto LABEL_27;
    }
LABEL_30:
    __int16 v32 = *v6++;
    *(_WORD *)(a2 + 208) = v32 | 0x100;
    if (((unint64_t)a3 & 0x200000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_31;
  }
  unint64_t v30 = mimosa::v2::parse_varint(v6, a5, a3);
  v6 += v31;
  *(void *)(a2 + 200) = mimosa::v2::varint::sign_transform(v30);
  if (((unint64_t)a3 & 0x400000000000) != 0) {
    goto LABEL_30;
  }
LABEL_27:
  if (((unint64_t)a3 & 0x200000000) == 0)
  {
LABEL_28:
    unint64_t v29 = *(void *)(a2 + 272);
    goto LABEL_32;
  }
LABEL_31:
  unint64_t v33 = mimosa::v2::parse_varint(v6, a5, a3);
  v6 += v34;
  unint64_t v29 = mimosa::v2::varint::sign_transform(v33);
  *(void *)(a2 + 272) = v29;
LABEL_32:
  *(void *)(a2 + 272) = v29 + *(void *)(a2 + 24);
  if ((a3 & 0x100000) == 0)
  {
    if (((unint64_t)a3 & 0x800000000000) == 0) {
      goto LABEL_34;
    }
LABEL_37:
    __int16 v38 = *v6++;
    *(_WORD *)(a2 + 288) = v38 | 0x100;
    if ((a3 & 8) == 0) {
      goto LABEL_35;
    }
    goto LABEL_38;
  }
  unint64_t v36 = mimosa::v2::parse_varint(v6, a5, a3);
  v6 += v37;
  *(void *)(a2 + 280) = mimosa::v2::varint::sign_transform(v36);
  if (((unint64_t)a3 & 0x800000000000) != 0) {
    goto LABEL_37;
  }
LABEL_34:
  if ((a3 & 8) == 0)
  {
LABEL_35:
    unsigned int v35 = a1[2];
    goto LABEL_39;
  }
LABEL_38:
  unsigned int v39 = *v6++;
  unsigned int v35 = v39;
  a1[2] = v39;
LABEL_39:
  std::vector<mimosa::v2::OpticalSamplesV1SubpacketState::Patch::ADCDelta>::resize(a2 + 80, v35);
  if (((unsigned __int16)a3 & 0x2000) != 0)
  {
    unsigned int v41 = *v6++;
    unsigned int v40 = v41;
    a1[3] = v41;
  }
  else
  {
    unsigned int v40 = a1[3];
  }
  unint64_t v42 = a1 + 2;
  std::vector<mimosa::v2::OpticalSamplesV1SubpacketState::Patch::ADCDelta>::resize(a2 + 128, v40);
  if ((a3 & 0x80) != 0)
  {
    __int16 v44 = (uint64_t *)(a2 + 48);
    std::optional<std::vector<mimosa::v2::OpticalSamplesV1SubpacketState::Patch::Sample>>::emplace[abi:ne180100]<unsigned char &,void>(a2 + 48, a1 + 2);
    uint64_t v45 = *(void *)(a2 + 48);
    uint64_t v46 = *(void *)(a2 + 56);
    if (v45 != v46)
    {
      while (1)
      {
        __int16 v47 = *(_WORD *)v6;
        if (*(_WORD *)v6) {
          break;
        }
        v6 += 2;
        if ((v47 & 2) != 0) {
          goto LABEL_48;
        }
LABEL_49:
        if ((v47 & 4) != 0)
        {
          __int16 v51 = *(_WORD *)v6;
          v6 += 2;
          *(_WORD *)(v45 + 8) = v51;
          *(unsigned char *)(v45 + 10) = 1;
          if ((v47 & 8) == 0)
          {
LABEL_51:
            if ((v47 & 0x10) == 0) {
              goto LABEL_52;
            }
            goto LABEL_64;
          }
        }
        else if ((v47 & 8) == 0)
        {
          goto LABEL_51;
        }
        __int16 v52 = *(_WORD *)v6;
        v6 += 2;
        *(_WORD *)(v45 + 12) = v52;
        *(unsigned char *)(v45 + 14) = 1;
        if ((v47 & 0x10) == 0)
        {
LABEL_52:
          if ((v47 & 0x20) == 0) {
            goto LABEL_53;
          }
          goto LABEL_65;
        }
LABEL_64:
        __int16 v53 = *(_WORD *)v6;
        v6 += 2;
        *(_WORD *)(v45 + 16) = v53;
        *(unsigned char *)(v45 + 18) = 1;
        if ((v47 & 0x20) == 0)
        {
LABEL_53:
          if ((v47 & 0x40) == 0) {
            goto LABEL_54;
          }
          goto LABEL_66;
        }
LABEL_65:
        __int16 v54 = *(_WORD *)v6;
        v6 += 2;
        *(_WORD *)(v45 + 20) = v54;
        *(unsigned char *)(v45 + 22) = 1;
        if ((v47 & 0x40) == 0)
        {
LABEL_54:
          if ((v47 & 0x80) == 0) {
            goto LABEL_55;
          }
          goto LABEL_67;
        }
LABEL_66:
        __int16 v55 = *v6++;
        *(_WORD *)(v45 + 24) = v55 | 0x100;
        if ((v47 & 0x80) == 0)
        {
LABEL_55:
          if ((v47 & 0x100) == 0) {
            goto LABEL_56;
          }
          goto LABEL_68;
        }
LABEL_67:
        __int16 v56 = *v6++;
        *(_WORD *)(v45 + 26) = v56 | 0x100;
        if ((v47 & 0x100) == 0)
        {
LABEL_56:
          if ((v47 & 0x200) == 0) {
            goto LABEL_57;
          }
          goto LABEL_69;
        }
LABEL_68:
        __int16 v57 = *v6++;
        *(_WORD *)(v45 + 28) = v57 | 0x100;
        if ((v47 & 0x200) == 0)
        {
LABEL_57:
          if ((v47 & 0x400) != 0) {
            goto LABEL_70;
          }
          goto LABEL_58;
        }
LABEL_69:
        __int16 v58 = *v6++;
        *(_WORD *)(v45 + 30) = v58 | 0x100;
        if ((v47 & 0x400) != 0)
        {
LABEL_70:
          __int16 v59 = *v6++;
          *(_WORD *)(v45 + 32) = v59 | 0x100;
          if ((v47 & 0x800) == 0) {
            goto LABEL_60;
          }
LABEL_59:
          __int16 v50 = *v6++;
          *(_WORD *)(v45 + 34) = v50 | 0x100;
          goto LABEL_60;
        }
LABEL_58:
        if ((v47 & 0x800) != 0) {
          goto LABEL_59;
        }
LABEL_60:
        v45 += 36;
        if (v45 == v46) {
          goto LABEL_72;
        }
      }
      __int16 v48 = *((_WORD *)v6 + 1);
      v6 += 4;
      *(_WORD *)(v45 + 4) = v48;
      *(unsigned char *)(v45 + 6) = 1;
      if ((v47 & 2) == 0) {
        goto LABEL_49;
      }
LABEL_48:
      __int16 v49 = *(_WORD *)v6;
      v6 += 2;
      *(_WORD *)uint64_t v45 = v49;
      *(unsigned char *)(v45 + 2) = 1;
      goto LABEL_49;
    }
LABEL_72:
    if (((unsigned __int16)a3 & 0x100) == 0)
    {
      if (*v42)
      {
        uint64_t v60 = *v44;
        int v61 = *(_DWORD *)(*v44 + 4);
        if ((v61 & 0xFF0000) != 0)
        {
          for (uint64_t i = *(void *)(a2 + 56); v60 != i; v60 += 36)
          {
            *(_WORD *)(v60 + 4) = v61;
            *(unsigned char *)(v60 + 6) = 1;
          }
        }
      }
    }
  }
  __int16 v63 = *(unint64_t **)(a2 + 80);
  __int16 v64 = *(unint64_t **)(a2 + 88);
  if (v63 != v64)
  {
    __int16 v65 = v63 + 2;
    do
    {
      unint64_t v66 = mimosa::v2::parse_varint(v6, a5, v43);
      unsigned __int8 v68 = v67;
      *(v65 - 2) = mimosa::v2::varint::sign_transform(v66);
      __int16 v69 = v65 - 2;
      __int16 v70 = &v6[v68];
      unint64_t v72 = mimosa::v2::parse_varint(v70, a5, v71);
      char v6 = &v70[v73];
      *(v65 - std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = mimosa::v2::varint::sign_transform(v72);
      if (!a1[1])
      {
        unint64_t v74 = mimosa::v2::parse_varint(v6, a5, v43);
        v6 += v75;
        unint64_t *v65 = mimosa::v2::varint::sign_transform(v74);
      }
      v65 += 3;
    }
    while (v69 + 3 != v64);
  }
  if (((unsigned __int16)a3 & 0x800) != 0)
  {
    if ((a3 & 0x2000000) != 0)
    {
      std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>::vector(&v109, *v6);
      if (*(unsigned char *)(a2 + 184)) {
        std::__variant_detail::__dtor<std::__variant_detail::__traits<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>,unsigned char>,(std::__variant_detail::_Trait)1>::~__dtor(a2 + 152);
      }
      unint64_t v78 = v109;
      *(void *)(a2 + 152) = v109;
      unsigned __int8 v79 = (_WORD *)v110;
      *(_OWORD *)(a2 + 160) = v110;
      *(_DWORD *)(a2 + 176) = 0;
      *(unsigned char *)(a2 + 184) = 1;
      ++v6;
      while (v78 != v79)
      {
        _WORD *v78 = *(_WORD *)v6;
        v78[1] = *((_WORD *)v6 + 1);
        *((unsigned char *)v78 + 4) = v6[4];
        *((unsigned char *)v78 + std::__function::__value_func<BOOL ()(mimosa::Metadata const&)>::~__value_func[abi:ne180100]((void *)this + 5) = v6[5] != 0;
        v6 += 6;
        v78 += 3;
      }
    }
    else
    {
      LOBYTE(v10std::__function::__value_func<BOOL ()(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,double)>::~__value_func[abi:ne180100]((void *)this + 9) = 0;
      char v77 = *v6++;
      char v76 = v77;
      LOBYTE(v10std::__function::__value_func<BOOL ()(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,double)>::~__value_func[abi:ne180100]((void *)this + 9) = v77;
      if (*(unsigned char *)(a2 + 184))
      {
        std::variant<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>,unsigned char>::operator=[abi:ne180100]<unsigned char const&,0,unsigned char,1ul,0>(a2 + 152, &v109);
      }
      else
      {
        *(unsigned char *)(a2 + 152) = v76;
        *(_DWORD *)(a2 + 176) = 1;
        *(unsigned char *)(a2 + 184) = 1;
      }
    }
  }
  unsigned __int8 v80 = *(unint64_t **)(a2 + 128);
  long long v81 = *(unint64_t **)(a2 + 136);
  while (v80 != v81)
  {
    unint64_t v82 = mimosa::v2::parse_varint(v6, a5, v43);
    unint64_t v84 = &v6[v83];
    *unsigned __int8 v80 = mimosa::v2::varint::sign_transform(v82);
    unint64_t v86 = mimosa::v2::parse_varint(v84, a5, v85);
    char v88 = &v84[v87];
    v80[1] = mimosa::v2::varint::sign_transform(v86);
    unint64_t v90 = mimosa::v2::parse_varint(v88, a5, v89);
    char v6 = &v88[v91];
    v80[2] = mimosa::v2::varint::sign_transform(v90);
    v80 += 3;
  }
  if ((a3 & 4) != 0)
  {
    unint64_t v92 = mimosa::v2::parse_varint(v6, a5, v43);
    v6 += v93;
    *(void *)(a2 + 216) = v92;
    *(unsigned char *)(a2 + 224) = 1;
    if (((unint64_t)a3 & 0x2000000000) == 0)
    {
LABEL_97:
      if (((unsigned __int16)a3 & 0x4000) == 0) {
        goto LABEL_98;
      }
      goto LABEL_105;
    }
  }
  else if (((unint64_t)a3 & 0x2000000000) == 0)
  {
    goto LABEL_97;
  }
  uint64_t v94 = *(void *)v6;
  v6 += 8;
  *(void *)(a2 + 232) = v94;
  *(unsigned char *)(a2 + 240) = 1;
  if (((unsigned __int16)a3 & 0x4000) == 0)
  {
LABEL_98:
    if ((a3 & 0x200000) == 0) {
      goto LABEL_99;
    }
    goto LABEL_106;
  }
LABEL_105:
  int v95 = *(_DWORD *)v6;
  v6 += 4;
  *(_DWORD *)(a2 + 248) = v95;
  *(unsigned char *)(a2 + 252) = 1;
  if ((a3 & 0x200000) == 0)
  {
LABEL_99:
    if (((unsigned __int16)a3 & 0x1000) == 0) {
      goto LABEL_100;
    }
    goto LABEL_107;
  }
LABEL_106:
  int v96 = *(_DWORD *)v6;
  v6 += 4;
  *(_DWORD *)(a2 + 256) = v96;
  *(unsigned char *)(a2 + 260) = 1;
  if (((unsigned __int16)a3 & 0x1000) == 0)
  {
LABEL_100:
    if ((a3 & 0x40000000) == 0) {
      goto LABEL_101;
    }
    goto LABEL_108;
  }
LABEL_107:
  __int16 v97 = *(_WORD *)v6;
  v6 += 2;
  *(_WORD *)(a2 + 264) = v97;
  *(unsigned char *)(a2 + 266) = 1;
  if ((a3 & 0x40000000) == 0)
  {
LABEL_101:
    if (((unsigned __int16)a3 & 0x200) == 0) {
      goto LABEL_118;
    }
    goto LABEL_109;
  }
LABEL_108:
  __int16 v98 = *v6++;
  *(_WORD *)(a2 + 268) = v98 | 0x100;
  if (((unsigned __int16)a3 & 0x200) == 0) {
    goto LABEL_118;
  }
LABEL_109:
  if ((a3 & 0x800000) != 0)
  {
    std::vector<unsigned short>::vector(&v109, *v42);
    if (*(unsigned char *)(a2 + 328)) {
      std::__variant_detail::__dtor<std::__variant_detail::__traits<std::vector<unsigned short>,unsigned char>,(std::__variant_detail::_Trait)1>::~__dtor(a2 + 296);
    }
    char v101 = v109;
    *(void *)(a2 + 296) = v109;
    unint64_t v102 = (_WORD *)v110;
    *(_OWORD *)(a2 + 304) = v110;
    *(_DWORD *)(a2 + 320) = 0;
    *(unsigned char *)(a2 + 328) = 1;
    while (v101 != v102)
    {
      __int16 v103 = *(_WORD *)v6;
      v6 += 2;
      *v101++ = v103;
    }
  }
  else
  {
    LOBYTE(v10std::__function::__value_func<BOOL ()(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,double)>::~__value_func[abi:ne180100]((void *)this + 9) = 0;
    char v100 = *v6++;
    char v99 = v100;
    LOBYTE(v10std::__function::__value_func<BOOL ()(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,double)>::~__value_func[abi:ne180100]((void *)this + 9) = v100;
    if (*(unsigned char *)(a2 + 328))
    {
      std::variant<std::vector<unsigned short>,unsigned char>::operator=[abi:ne180100]<unsigned char const&,0,unsigned char,1ul,0>(a2 + 296, &v109);
    }
    else
    {
      *(unsigned char *)(a2 + 296) = v99;
      *(_DWORD *)(a2 + 320) = 1;
      *(unsigned char *)(a2 + 328) = 1;
    }
  }
LABEL_118:
  if ((a3 & 0x4000000) != 0)
  {
    __int16 v105 = *v6++;
    *(_WORD *)(a2 + 352) = v105 | 0x100;
    if ((a3 & 0x20000) == 0)
    {
LABEL_120:
      if (((unsigned __int16)a3 & 0x400) == 0) {
        goto LABEL_121;
      }
      goto LABEL_127;
    }
  }
  else if ((a3 & 0x20000) == 0)
  {
    goto LABEL_120;
  }
  __int16 v106 = *v6++;
  *(_WORD *)(a2 + 354) = v106 | 0x100;
  if (((unsigned __int16)a3 & 0x400) == 0)
  {
LABEL_121:
    if (((unint64_t)a3 & 0x4000000000) == 0) {
      goto LABEL_123;
    }
    goto LABEL_122;
  }
LABEL_127:
  uint64_t v107 = *(void *)v6;
  v6 += 8;
  *(void *)(a2 + 336) = v107;
  *(unsigned char *)(a2 + 344) = 1;
  if (((unint64_t)a3 & 0x4000000000) != 0)
  {
LABEL_122:
    int v104 = *v6++;
    *(_WORD *)(a2 + 356) = (v104 != 0) | 0x100;
  }
LABEL_123:
  if (v6 != a5)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "something went wrong during patch decoding");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
}

void sub_22277DE58(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unint64_t mimosa::v2::PatchDecoder::extract_patch<mimosa::v2::PacketState::PatchV4>(unsigned char *a1, uint64_t a2, const byte *a3, const byte *this, byte *a5)
{
  char v6 = this;
  if ((a3 & 0x20) != 0)
  {
    a1[1] ^= 1u;
    if ((a3 & 0x10) != 0)
    {
LABEL_3:
      if ((a3 & 0x8000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else if ((a3 & 0x10) != 0)
  {
    goto LABEL_3;
  }
  unint64_t v11 = mimosa::v2::parse_varint(this, a5, a3);
  v6 += v12;
  *(void *)a2 = mimosa::v2::varint::sign_transform(v11);
  if ((a3 & 0x8000000) == 0)
  {
LABEL_4:
    if ((a3 & 0x20000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
LABEL_12:
  unint64_t v13 = mimosa::v2::parse_varint(v6, a5, a3);
  v6 += v14;
  *(void *)(a2 + 8) = mimosa::v2::varint::sign_transform(v13);
  if ((a3 & 0x20000000) == 0)
  {
LABEL_5:
    if (a3) {
      goto LABEL_6;
    }
    goto LABEL_14;
  }
LABEL_13:
  __int16 v15 = *v6++;
  *(_WORD *)(a2 + 16) = v15 | 0x100;
  if (a3)
  {
LABEL_6:
    if (((unsigned __int16)a3 & 0x8000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_15;
  }
LABEL_14:
  unint64_t v16 = mimosa::v2::parse_varint(v6, a5, a3);
  v6 += v17;
  *(void *)(a2 + 24) = mimosa::v2::varint::sign_transform(v16);
  if (((unsigned __int16)a3 & 0x8000) == 0)
  {
LABEL_7:
    if (((unint64_t)a3 & 0x100000000000) == 0) {
      goto LABEL_8;
    }
LABEL_16:
    __int16 v20 = *v6++;
    *(_WORD *)(a2 + 40) = v20 | 0x100;
    if ((a3 & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_17;
  }
LABEL_15:
  unint64_t v18 = mimosa::v2::parse_varint(v6, a5, a3);
  v6 += v19;
  *(void *)(a2 + 32) = mimosa::v2::varint::sign_transform(v18);
  if (((unint64_t)a3 & 0x100000000000) != 0) {
    goto LABEL_16;
  }
LABEL_8:
  if ((a3 & 0x80000000) == 0)
  {
LABEL_9:
    unint64_t v10 = *(void *)(a2 + 104);
    goto LABEL_18;
  }
LABEL_17:
  unint64_t v21 = mimosa::v2::parse_varint(v6, a5, a3);
  v6 += v22;
  unint64_t v10 = mimosa::v2::varint::sign_transform(v21);
  *(void *)(a2 + 104) = v10;
LABEL_18:
  *(void *)(a2 + 104) = v10 + *(void *)(a2 + 24);
  if ((a3 & 0x80000) == 0)
  {
    if (((unint64_t)a3 & 0x200000000000) == 0) {
      goto LABEL_20;
    }
LABEL_23:
    __int16 v26 = *v6++;
    *(_WORD *)(a2 + 120) = v26 | 0x100;
    if (((unint64_t)a3 & 0x100000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_24;
  }
  unint64_t v24 = mimosa::v2::parse_varint(v6, a5, a3);
  v6 += v25;
  *(void *)(a2 + 112) = mimosa::v2::varint::sign_transform(v24);
  if (((unint64_t)a3 & 0x200000000000) != 0) {
    goto LABEL_23;
  }
LABEL_20:
  if (((unint64_t)a3 & 0x100000000) == 0)
  {
LABEL_21:
    unint64_t v23 = *(void *)(a2 + 192);
    goto LABEL_25;
  }
LABEL_24:
  unint64_t v27 = mimosa::v2::parse_varint(v6, a5, a3);
  v6 += v28;
  unint64_t v23 = mimosa::v2::varint::sign_transform(v27);
  *(void *)(a2 + 192) = v23;
LABEL_25:
  *(void *)(a2 + 192) = v23 + *(void *)(a2 + 24);
  if ((a3 & 0x40000) == 0)
  {
    if (((unint64_t)a3 & 0x400000000000) == 0) {
      goto LABEL_27;
    }
LABEL_30:
    __int16 v32 = *v6++;
    *(_WORD *)(a2 + 208) = v32 | 0x100;
    if (((unint64_t)a3 & 0x200000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_31;
  }
  unint64_t v30 = mimosa::v2::parse_varint(v6, a5, a3);
  v6 += v31;
  *(void *)(a2 + 200) = mimosa::v2::varint::sign_transform(v30);
  if (((unint64_t)a3 & 0x400000000000) != 0) {
    goto LABEL_30;
  }
LABEL_27:
  if (((unint64_t)a3 & 0x200000000) == 0)
  {
LABEL_28:
    unint64_t v29 = *(void *)(a2 + 272);
    goto LABEL_32;
  }
LABEL_31:
  unint64_t v33 = mimosa::v2::parse_varint(v6, a5, a3);
  v6 += v34;
  unint64_t v29 = mimosa::v2::varint::sign_transform(v33);
  *(void *)(a2 + 272) = v29;
LABEL_32:
  *(void *)(a2 + 272) = v29 + *(void *)(a2 + 24);
  if ((a3 & 0x100000) == 0)
  {
    if (((unint64_t)a3 & 0x800000000000) == 0) {
      goto LABEL_34;
    }
LABEL_37:
    __int16 v38 = *v6++;
    *(_WORD *)(a2 + 288) = v38 | 0x100;
    if (((unint64_t)a3 & 0x400000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_38;
  }
  unint64_t v36 = mimosa::v2::parse_varint(v6, a5, a3);
  v6 += v37;
  *(void *)(a2 + 280) = mimosa::v2::varint::sign_transform(v36);
  if (((unint64_t)a3 & 0x800000000000) != 0) {
    goto LABEL_37;
  }
LABEL_34:
  if (((unint64_t)a3 & 0x400000000) == 0)
  {
LABEL_35:
    unint64_t v35 = *(void *)(a2 + 360);
    goto LABEL_39;
  }
LABEL_38:
  unint64_t v39 = mimosa::v2::parse_varint(v6, a5, a3);
  v6 += v40;
  unint64_t v35 = mimosa::v2::varint::sign_transform(v39);
  *(void *)(a2 + 360) = v35;
LABEL_39:
  *(void *)(a2 + 360) = v35 + *(void *)(a2 + 24);
  if (((unint64_t)a3 & 0x800000000) == 0)
  {
    if (((unint64_t)a3 & 0x1000000000000) == 0) {
      goto LABEL_41;
    }
LABEL_44:
    __int16 v44 = *v6++;
    *(_WORD *)(a2 + 376) = v44 | 0x100;
    if (((unint64_t)a3 & 0x1000000000) == 0) {
      goto LABEL_42;
    }
    goto LABEL_45;
  }
  unint64_t v42 = mimosa::v2::parse_varint(v6, a5, a3);
  v6 += v43;
  *(void *)(a2 + 368) = mimosa::v2::varint::sign_transform(v42);
  if (((unint64_t)a3 & 0x1000000000000) != 0) {
    goto LABEL_44;
  }
LABEL_41:
  if (((unint64_t)a3 & 0x1000000000) == 0)
  {
LABEL_42:
    unint64_t v41 = *(void *)(a2 + 392);
    goto LABEL_46;
  }
LABEL_45:
  unint64_t v45 = mimosa::v2::parse_varint(v6, a5, a3);
  v6 += v46;
  unint64_t v41 = mimosa::v2::varint::sign_transform(v45);
  *(void *)(a2 + 392) = v41;
LABEL_46:
  *(void *)(a2 + 392) = v41 + *(void *)(a2 + 24);
  if ((a3 & 0x400000) == 0)
  {
    if (((unint64_t)a3 & 0x2000000000000) == 0) {
      goto LABEL_48;
    }
LABEL_51:
    __int16 v50 = *v6++;
    *(_WORD *)(a2 + 408) = v50 | 0x100;
    if ((a3 & 8) == 0) {
      goto LABEL_49;
    }
    goto LABEL_52;
  }
  unint64_t v48 = mimosa::v2::parse_varint(v6, a5, a3);
  v6 += v49;
  *(void *)(a2 + 400) = mimosa::v2::varint::sign_transform(v48);
  if (((unint64_t)a3 & 0x2000000000000) != 0) {
    goto LABEL_51;
  }
LABEL_48:
  if ((a3 & 8) == 0)
  {
LABEL_49:
    unsigned int v47 = a1[2];
    goto LABEL_53;
  }
LABEL_52:
  unsigned int v51 = *v6++;
  unsigned int v47 = v51;
  a1[2] = v51;
LABEL_53:
  std::vector<mimosa::v2::OpticalSamplesV1SubpacketState::Patch::ADCDelta>::resize(a2 + 80, v47);
  if (((unsigned __int16)a3 & 0x2000) != 0)
  {
    unsigned int v53 = *v6++;
    unsigned int v52 = v53;
    a1[3] = v53;
  }
  else
  {
    unsigned int v52 = a1[3];
  }
  __int16 v54 = a1 + 2;
  std::vector<mimosa::v2::OpticalSamplesV1SubpacketState::Patch::ADCDelta>::resize(a2 + 128, v52);
  if ((a3 & 0x80) != 0)
  {
    __int16 v56 = (uint64_t *)(a2 + 48);
    std::optional<std::vector<mimosa::v2::OpticalSamplesV1SubpacketState::Patch::Sample>>::emplace[abi:ne180100]<unsigned char &,void>(a2 + 48, a1 + 2);
    uint64_t v57 = *(void *)(a2 + 48);
    uint64_t v58 = *(void *)(a2 + 56);
    if (v57 != v58)
    {
      while (1)
      {
        __int16 v59 = *(_WORD *)v6;
        if (*(_WORD *)v6) {
          break;
        }
        v6 += 2;
        if ((v59 & 2) != 0) {
          goto LABEL_62;
        }
LABEL_63:
        if ((v59 & 4) != 0)
        {
          __int16 v63 = *(_WORD *)v6;
          v6 += 2;
          *(_WORD *)(v57 + 8) = v63;
          *(unsigned char *)(v57 + 10) = 1;
          if ((v59 & 8) == 0)
          {
LABEL_65:
            if ((v59 & 0x10) == 0) {
              goto LABEL_66;
            }
            goto LABEL_78;
          }
        }
        else if ((v59 & 8) == 0)
        {
          goto LABEL_65;
        }
        __int16 v64 = *(_WORD *)v6;
        v6 += 2;
        *(_WORD *)(v57 + 12) = v64;
        *(unsigned char *)(v57 + 14) = 1;
        if ((v59 & 0x10) == 0)
        {
LABEL_66:
          if ((v59 & 0x20) == 0) {
            goto LABEL_67;
          }
          goto LABEL_79;
        }
LABEL_78:
        __int16 v65 = *(_WORD *)v6;
        v6 += 2;
        *(_WORD *)(v57 + 16) = v65;
        *(unsigned char *)(v57 + 18) = 1;
        if ((v59 & 0x20) == 0)
        {
LABEL_67:
          if ((v59 & 0x40) == 0) {
            goto LABEL_68;
          }
          goto LABEL_80;
        }
LABEL_79:
        __int16 v66 = *(_WORD *)v6;
        v6 += 2;
        *(_WORD *)(v57 + 20) = v66;
        *(unsigned char *)(v57 + 22) = 1;
        if ((v59 & 0x40) == 0)
        {
LABEL_68:
          if ((v59 & 0x80) == 0) {
            goto LABEL_69;
          }
          goto LABEL_81;
        }
LABEL_80:
        __int16 v67 = *v6++;
        *(_WORD *)(v57 + 24) = v67 | 0x100;
        if ((v59 & 0x80) == 0)
        {
LABEL_69:
          if ((v59 & 0x100) == 0) {
            goto LABEL_70;
          }
          goto LABEL_82;
        }
LABEL_81:
        __int16 v68 = *v6++;
        *(_WORD *)(v57 + 26) = v68 | 0x100;
        if ((v59 & 0x100) == 0)
        {
LABEL_70:
          if ((v59 & 0x200) == 0) {
            goto LABEL_71;
          }
          goto LABEL_83;
        }
LABEL_82:
        __int16 v69 = *v6++;
        *(_WORD *)(v57 + 28) = v69 | 0x100;
        if ((v59 & 0x200) == 0)
        {
LABEL_71:
          if ((v59 & 0x400) != 0) {
            goto LABEL_84;
          }
          goto LABEL_72;
        }
LABEL_83:
        __int16 v70 = *v6++;
        *(_WORD *)(v57 + 30) = v70 | 0x100;
        if ((v59 & 0x400) != 0)
        {
LABEL_84:
          __int16 v71 = *v6++;
          *(_WORD *)(v57 + 32) = v71 | 0x100;
          if ((v59 & 0x800) == 0) {
            goto LABEL_74;
          }
LABEL_73:
          __int16 v62 = *v6++;
          *(_WORD *)(v57 + 34) = v62 | 0x100;
          goto LABEL_74;
        }
LABEL_72:
        if ((v59 & 0x800) != 0) {
          goto LABEL_73;
        }
LABEL_74:
        v57 += 36;
        if (v57 == v58) {
          goto LABEL_86;
        }
      }
      __int16 v60 = *((_WORD *)v6 + 1);
      v6 += 4;
      *(_WORD *)(v57 + 4) = v60;
      *(unsigned char *)(v57 + 6) = 1;
      if ((v59 & 2) == 0) {
        goto LABEL_63;
      }
LABEL_62:
      __int16 v61 = *(_WORD *)v6;
      v6 += 2;
      *(_WORD *)uint64_t v57 = v61;
      *(unsigned char *)(v57 + 2) = 1;
      goto LABEL_63;
    }
LABEL_86:
    if (((unsigned __int16)a3 & 0x100) == 0)
    {
      if (*v54)
      {
        uint64_t v72 = *v56;
        int v73 = *(_DWORD *)(*v56 + 4);
        if ((v73 & 0xFF0000) != 0)
        {
          for (uint64_t i = *(void *)(a2 + 56); v72 != i; v72 += 36)
          {
            *(_WORD *)(v72 + 4) = v73;
            *(unsigned char *)(v72 + 6) = 1;
          }
        }
      }
    }
  }
  unsigned __int8 v75 = *(unint64_t **)(a2 + 80);
  char v76 = *(unint64_t **)(a2 + 88);
  if (v75 != v76)
  {
    char v77 = v75 + 2;
    do
    {
      unint64_t v78 = mimosa::v2::parse_varint(v6, a5, v55);
      unsigned __int8 v80 = v79;
      *(v77 - 2) = mimosa::v2::varint::sign_transform(v78);
      long long v81 = v77 - 2;
      unint64_t v82 = &v6[v80];
      unint64_t v84 = mimosa::v2::parse_varint(v82, a5, v83);
      char v6 = &v82[v85];
      *(v77 - std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = mimosa::v2::varint::sign_transform(v84);
      if (!a1[1])
      {
        unint64_t v86 = mimosa::v2::parse_varint(v6, a5, v55);
        v6 += v87;
        unint64_t *v77 = mimosa::v2::varint::sign_transform(v86);
      }
      v77 += 3;
    }
    while (v81 + 3 != v76);
  }
  if (((unsigned __int16)a3 & 0x800) != 0)
  {
    if ((a3 & 0x2000000) != 0)
    {
      std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>::vector(&v137, *v6);
      if (*(unsigned char *)(a2 + 184)) {
        std::__variant_detail::__dtor<std::__variant_detail::__traits<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>,unsigned char>,(std::__variant_detail::_Trait)1>::~__dtor(a2 + 152);
      }
      unint64_t v90 = v137;
      *(void *)(a2 + 152) = v137;
      unsigned __int8 v91 = (_WORD *)v138;
      *(_OWORD *)(a2 + 160) = v138;
      *(_DWORD *)(a2 + 176) = 0;
      *(unsigned char *)(a2 + 184) = 1;
      ++v6;
      while (v90 != v91)
      {
        *unint64_t v90 = *(_WORD *)v6;
        v90[1] = *((_WORD *)v6 + 1);
        *((unsigned char *)v90 + 4) = v6[4];
        *((unsigned char *)v90 + std::__function::__value_func<BOOL ()(mimosa::Metadata const&)>::~__value_func[abi:ne180100]((void *)this + 5) = v6[5] != 0;
        v6 += 6;
        v90 += 3;
      }
    }
    else
    {
      LOBYTE(v137) = 0;
      char v89 = *v6++;
      char v88 = v89;
      LOBYTE(v137) = v89;
      if (*(unsigned char *)(a2 + 184))
      {
        std::variant<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>,unsigned char>::operator=[abi:ne180100]<unsigned char const&,0,unsigned char,1ul,0>(a2 + 152, &v137);
      }
      else
      {
        *(unsigned char *)(a2 + 152) = v88;
        *(_DWORD *)(a2 + 176) = 1;
        *(unsigned char *)(a2 + 184) = 1;
      }
    }
  }
  unint64_t v92 = *(unint64_t **)(a2 + 128);
  unsigned __int8 v93 = *(unint64_t **)(a2 + 136);
  while (v92 != v93)
  {
    unint64_t v94 = mimosa::v2::parse_varint(v6, a5, v55);
    int v96 = &v6[v95];
    unint64_t *v92 = mimosa::v2::varint::sign_transform(v94);
    unint64_t v98 = mimosa::v2::parse_varint(v96, a5, v97);
    char v100 = &v96[v99];
    v92[1] = mimosa::v2::varint::sign_transform(v98);
    unint64_t v102 = mimosa::v2::parse_varint(v100, a5, v101);
    char v6 = &v100[v103];
    v92[2] = mimosa::v2::varint::sign_transform(v102);
    v92 += 3;
  }
  if ((a3 & 4) != 0)
  {
    unint64_t v104 = mimosa::v2::parse_varint(v6, a5, v55);
    v6 += v105;
    *(void *)(a2 + 216) = v104;
    *(unsigned char *)(a2 + 224) = 1;
    if (((unint64_t)a3 & 0x2000000000) == 0)
    {
LABEL_111:
      if (((unsigned __int16)a3 & 0x4000) == 0) {
        goto LABEL_112;
      }
      goto LABEL_119;
    }
  }
  else if (((unint64_t)a3 & 0x2000000000) == 0)
  {
    goto LABEL_111;
  }
  uint64_t v106 = *(void *)v6;
  v6 += 8;
  *(void *)(a2 + 232) = v106;
  *(unsigned char *)(a2 + 240) = 1;
  if (((unsigned __int16)a3 & 0x4000) == 0)
  {
LABEL_112:
    if ((a3 & 0x200000) == 0) {
      goto LABEL_113;
    }
    goto LABEL_120;
  }
LABEL_119:
  int v107 = *(_DWORD *)v6;
  v6 += 4;
  *(_DWORD *)(a2 + 248) = v107;
  *(unsigned char *)(a2 + 252) = 1;
  if ((a3 & 0x200000) == 0)
  {
LABEL_113:
    if (((unsigned __int16)a3 & 0x1000) == 0) {
      goto LABEL_114;
    }
    goto LABEL_121;
  }
LABEL_120:
  int v108 = *(_DWORD *)v6;
  v6 += 4;
  *(_DWORD *)(a2 + 256) = v108;
  *(unsigned char *)(a2 + 260) = 1;
  if (((unsigned __int16)a3 & 0x1000) == 0)
  {
LABEL_114:
    if ((a3 & 0x40000000) == 0) {
      goto LABEL_115;
    }
    goto LABEL_122;
  }
LABEL_121:
  __int16 v109 = *(_WORD *)v6;
  v6 += 2;
  *(_WORD *)(a2 + 264) = v109;
  *(unsigned char *)(a2 + 266) = 1;
  if ((a3 & 0x40000000) == 0)
  {
LABEL_115:
    if (((unsigned __int16)a3 & 0x200) == 0) {
      goto LABEL_132;
    }
    goto LABEL_123;
  }
LABEL_122:
  __int16 v110 = *v6++;
  *(_WORD *)(a2 + 268) = v110 | 0x100;
  if (((unsigned __int16)a3 & 0x200) == 0) {
    goto LABEL_132;
  }
LABEL_123:
  if ((a3 & 0x800000) != 0)
  {
    std::vector<unsigned short>::vector(&v137, *v54);
    if (*(unsigned char *)(a2 + 328)) {
      std::__variant_detail::__dtor<std::__variant_detail::__traits<std::vector<unsigned short>,unsigned char>,(std::__variant_detail::_Trait)1>::~__dtor(a2 + 296);
    }
    __int16 v113 = v137;
    *(void *)(a2 + 296) = v137;
    __int16 v114 = (_WORD *)v138;
    *(_OWORD *)(a2 + 304) = v138;
    *(_DWORD *)(a2 + 320) = 0;
    *(unsigned char *)(a2 + 328) = 1;
    while (v113 != v114)
    {
      __int16 v115 = *(_WORD *)v6;
      v6 += 2;
      *v113++ = v115;
    }
  }
  else
  {
    LOBYTE(v137) = 0;
    char v112 = *v6++;
    char v111 = v112;
    LOBYTE(v137) = v112;
    if (*(unsigned char *)(a2 + 328))
    {
      std::variant<std::vector<unsigned short>,unsigned char>::operator=[abi:ne180100]<unsigned char const&,0,unsigned char,1ul,0>(a2 + 296, &v137);
    }
    else
    {
      *(unsigned char *)(a2 + 296) = v111;
      *(_DWORD *)(a2 + 320) = 1;
      *(unsigned char *)(a2 + 328) = 1;
    }
  }
LABEL_132:
  if ((a3 & 0x4000000) != 0)
  {
    __int16 v126 = *v6++;
    *(_WORD *)(a2 + 352) = v126 | 0x100;
    if ((a3 & 0x20000) == 0)
    {
LABEL_134:
      if (((unsigned __int16)a3 & 0x400) == 0) {
        goto LABEL_135;
      }
      goto LABEL_149;
    }
  }
  else if ((a3 & 0x20000) == 0)
  {
    goto LABEL_134;
  }
  __int16 v127 = *v6++;
  *(_WORD *)(a2 + 354) = v127 | 0x100;
  if (((unsigned __int16)a3 & 0x400) == 0)
  {
LABEL_135:
    if (((unint64_t)a3 & 0x4000000000) == 0) {
      goto LABEL_136;
    }
    goto LABEL_150;
  }
LABEL_149:
  uint64_t v128 = *(void *)v6;
  v6 += 8;
  *(void *)(a2 + 336) = v128;
  *(unsigned char *)(a2 + 344) = 1;
  if (((unint64_t)a3 & 0x4000000000) == 0)
  {
LABEL_136:
    if (((unint64_t)a3 & 0x40000000000) == 0) {
      goto LABEL_137;
    }
    goto LABEL_151;
  }
LABEL_150:
  int v129 = *v6++;
  *(_WORD *)(a2 + 356) = (v129 != 0) | 0x100;
  if (((unint64_t)a3 & 0x40000000000) == 0)
  {
LABEL_137:
    if ((a3 & 2) == 0) {
      goto LABEL_138;
    }
    goto LABEL_152;
  }
LABEL_151:
  __int16 v130 = *(_WORD *)v6;
  v6 += 2;
  *(_WORD *)(a2 + 384) = v130;
  *(unsigned char *)(a2 + 386) = 1;
  if ((a3 & 2) == 0)
  {
LABEL_138:
    if ((a3 & 0x10000) == 0) {
      goto LABEL_139;
    }
    goto LABEL_153;
  }
LABEL_152:
  unint64_t v131 = mimosa::v2::parse_varint(v6, a5, v55);
  v6 += v132;
  *(_DWORD *)(a2 + 388) = mimosa::v2::varint::sign_transform(v131);
  if ((a3 & 0x10000) == 0)
  {
LABEL_139:
    if ((a3 & 0x40) != 0) {
      goto LABEL_140;
    }
    goto LABEL_141;
  }
LABEL_153:
  if ((a3 & 0x1000000) != 0)
  {
    uint64_t v135 = 0;
    *(void *)(a2 + 464) = 0;
    *(void *)(a2 + 472) = 0;
    *(unsigned char *)(a2 + 480) = 1;
    do
    {
      *(_WORD *)(a2 + 464 + v13std::__function::__value_func<BOOL ()(mimosa::Metadata const&)>::~__value_func[abi:ne180100]((void *)this + 5) = *(_WORD *)&v6[v135];
      v135 += 2;
    }
    while (v135 != 12);
    v6 += 12;
    if ((a3 & 0x40) == 0) {
      goto LABEL_141;
    }
    goto LABEL_140;
  }
  char v134 = *v6++;
  char v133 = v134;
  if (!*(unsigned char *)(a2 + 480))
  {
    *(unsigned char *)(a2 + 464) = v133;
    *(_DWORD *)(a2 + 476) = 1;
    *(unsigned char *)(a2 + 480) = 1;
    if ((a3 & 0x40) == 0) {
      goto LABEL_141;
    }
    goto LABEL_140;
  }
  if (*(_DWORD *)(a2 + 476) != 1) {
    *(_DWORD *)(a2 + 476) = 1;
  }
  *(unsigned char *)(a2 + 464) = v133;
  if ((a3 & 0x40) != 0)
  {
LABEL_140:
    __int16 v116 = *(_WORD *)v6;
    v6 += 2;
    *(_WORD *)(a2 + 484) = v116;
    *(unsigned char *)(a2 + 486) = 1;
  }
LABEL_141:
  unint64_t result = mimosa::v2::parse_varint(v6, a5, v55);
  unint64_t v119 = result;
  uint64_t v120 = 0;
  v122 = &v6[v121];
  uint64_t v123 = a2 + 416;
  do
  {
    if (v119)
    {
      unint64_t v124 = mimosa::v2::parse_varint(v122, a5, v118);
      v122 += v125;
      unint64_t result = mimosa::v2::varint::sign_transform(v124);
      *(void *)(v123 + v120) = result;
    }
    v119 >>= 1;
    v120 += 8;
  }
  while (v120 != 48);
  if (v122 != a5)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "something went wrong during patch decoding");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return result;
}

void sub_22277E790(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mimosa::v2::PatchDecoder::extract_patch<mimosa::v2::PacketState::PatchV5>(unsigned char *a1, uint64_t a2, const byte *a3, const byte *this, byte *a5)
{
  char v6 = this;
  if ((a3 & 0x20) != 0)
  {
    a1[1] ^= 1u;
    if ((a3 & 0x10) != 0)
    {
LABEL_3:
      if ((a3 & 0x8000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else if ((a3 & 0x10) != 0)
  {
    goto LABEL_3;
  }
  unint64_t v11 = mimosa::v2::parse_varint(this, a5, a3);
  v6 += v12;
  *(void *)a2 = mimosa::v2::varint::sign_transform(v11);
  if ((a3 & 0x8000000) == 0)
  {
LABEL_4:
    if ((a3 & 0x20000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
LABEL_12:
  unint64_t v13 = mimosa::v2::parse_varint(v6, a5, a3);
  v6 += v14;
  *(void *)(a2 + 8) = mimosa::v2::varint::sign_transform(v13);
  if ((a3 & 0x20000000) == 0)
  {
LABEL_5:
    if (a3) {
      goto LABEL_6;
    }
    goto LABEL_14;
  }
LABEL_13:
  __int16 v15 = *v6++;
  *(_WORD *)(a2 + 16) = v15 | 0x100;
  if (a3)
  {
LABEL_6:
    if (((unsigned __int16)a3 & 0x8000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_15;
  }
LABEL_14:
  unint64_t v16 = mimosa::v2::parse_varint(v6, a5, a3);
  v6 += v17;
  *(void *)(a2 + 24) = mimosa::v2::varint::sign_transform(v16);
  if (((unsigned __int16)a3 & 0x8000) == 0)
  {
LABEL_7:
    if (((unint64_t)a3 & 0x100000000000) == 0) {
      goto LABEL_8;
    }
LABEL_16:
    __int16 v20 = *v6++;
    *(_WORD *)(a2 + 40) = v20 | 0x100;
    if ((a3 & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_17;
  }
LABEL_15:
  unint64_t v18 = mimosa::v2::parse_varint(v6, a5, a3);
  v6 += v19;
  *(void *)(a2 + 32) = mimosa::v2::varint::sign_transform(v18);
  if (((unint64_t)a3 & 0x100000000000) != 0) {
    goto LABEL_16;
  }
LABEL_8:
  if ((a3 & 0x80000000) == 0)
  {
LABEL_9:
    unint64_t v10 = *(void *)(a2 + 104);
    goto LABEL_18;
  }
LABEL_17:
  unint64_t v21 = mimosa::v2::parse_varint(v6, a5, a3);
  v6 += v22;
  unint64_t v10 = mimosa::v2::varint::sign_transform(v21);
  *(void *)(a2 + 104) = v10;
LABEL_18:
  *(void *)(a2 + 104) = v10 + *(void *)(a2 + 24);
  if ((a3 & 0x80000) == 0)
  {
    if (((unint64_t)a3 & 0x200000000000) == 0) {
      goto LABEL_20;
    }
LABEL_23:
    __int16 v26 = *v6++;
    *(_WORD *)(a2 + 120) = v26 | 0x100;
    if (((unint64_t)a3 & 0x100000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_24;
  }
  unint64_t v24 = mimosa::v2::parse_varint(v6, a5, a3);
  v6 += v25;
  *(void *)(a2 + 112) = mimosa::v2::varint::sign_transform(v24);
  if (((unint64_t)a3 & 0x200000000000) != 0) {
    goto LABEL_23;
  }
LABEL_20:
  if (((unint64_t)a3 & 0x100000000) == 0)
  {
LABEL_21:
    unint64_t v23 = *(void *)(a2 + 192);
    goto LABEL_25;
  }
LABEL_24:
  unint64_t v27 = mimosa::v2::parse_varint(v6, a5, a3);
  v6 += v28;
  unint64_t v23 = mimosa::v2::varint::sign_transform(v27);
  *(void *)(a2 + 192) = v23;
LABEL_25:
  *(void *)(a2 + 192) = v23 + *(void *)(a2 + 24);
  if ((a3 & 0x40000) == 0)
  {
    if (((unint64_t)a3 & 0x400000000000) == 0) {
      goto LABEL_27;
    }
LABEL_30:
    __int16 v32 = *v6++;
    *(_WORD *)(a2 + 208) = v32 | 0x100;
    if (((unint64_t)a3 & 0x200000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_31;
  }
  unint64_t v30 = mimosa::v2::parse_varint(v6, a5, a3);
  v6 += v31;
  *(void *)(a2 + 200) = mimosa::v2::varint::sign_transform(v30);
  if (((unint64_t)a3 & 0x400000000000) != 0) {
    goto LABEL_30;
  }
LABEL_27:
  if (((unint64_t)a3 & 0x200000000) == 0)
  {
LABEL_28:
    unint64_t v29 = *(void *)(a2 + 272);
    goto LABEL_32;
  }
LABEL_31:
  unint64_t v33 = mimosa::v2::parse_varint(v6, a5, a3);
  v6 += v34;
  unint64_t v29 = mimosa::v2::varint::sign_transform(v33);
  *(void *)(a2 + 272) = v29;
LABEL_32:
  *(void *)(a2 + 272) = v29 + *(void *)(a2 + 24);
  if ((a3 & 0x100000) == 0)
  {
    if (((unint64_t)a3 & 0x800000000000) == 0) {
      goto LABEL_34;
    }
LABEL_37:
    __int16 v38 = *v6++;
    *(_WORD *)(a2 + 288) = v38 | 0x100;
    if (((unint64_t)a3 & 0x400000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_38;
  }
  unint64_t v36 = mimosa::v2::parse_varint(v6, a5, a3);
  v6 += v37;
  *(void *)(a2 + 280) = mimosa::v2::varint::sign_transform(v36);
  if (((unint64_t)a3 & 0x800000000000) != 0) {
    goto LABEL_37;
  }
LABEL_34:
  if (((unint64_t)a3 & 0x400000000) == 0)
  {
LABEL_35:
    unint64_t v35 = *(void *)(a2 + 360);
    goto LABEL_39;
  }
LABEL_38:
  unint64_t v39 = mimosa::v2::parse_varint(v6, a5, a3);
  v6 += v40;
  unint64_t v35 = mimosa::v2::varint::sign_transform(v39);
  *(void *)(a2 + 360) = v35;
LABEL_39:
  *(void *)(a2 + 360) = v35 + *(void *)(a2 + 24);
  if (((unint64_t)a3 & 0x800000000) == 0)
  {
    if (((unint64_t)a3 & 0x1000000000000) == 0) {
      goto LABEL_41;
    }
LABEL_44:
    __int16 v44 = *v6++;
    *(_WORD *)(a2 + 376) = v44 | 0x100;
    if (((unint64_t)a3 & 0x1000000000) == 0) {
      goto LABEL_42;
    }
    goto LABEL_45;
  }
  unint64_t v42 = mimosa::v2::parse_varint(v6, a5, a3);
  v6 += v43;
  *(void *)(a2 + 368) = mimosa::v2::varint::sign_transform(v42);
  if (((unint64_t)a3 & 0x1000000000000) != 0) {
    goto LABEL_44;
  }
LABEL_41:
  if (((unint64_t)a3 & 0x1000000000) == 0)
  {
LABEL_42:
    unint64_t v41 = *(void *)(a2 + 392);
    goto LABEL_46;
  }
LABEL_45:
  unint64_t v45 = mimosa::v2::parse_varint(v6, a5, a3);
  v6 += v46;
  unint64_t v41 = mimosa::v2::varint::sign_transform(v45);
  *(void *)(a2 + 392) = v41;
LABEL_46:
  *(void *)(a2 + 392) = v41 + *(void *)(a2 + 24);
  if ((a3 & 0x400000) == 0)
  {
    if (((unint64_t)a3 & 0x2000000000000) == 0) {
      goto LABEL_48;
    }
LABEL_51:
    __int16 v50 = *v6++;
    *(_WORD *)(a2 + 408) = v50 | 0x100;
    if ((a3 & 8) == 0) {
      goto LABEL_49;
    }
    goto LABEL_52;
  }
  unint64_t v48 = mimosa::v2::parse_varint(v6, a5, a3);
  v6 += v49;
  *(void *)(a2 + 400) = mimosa::v2::varint::sign_transform(v48);
  if (((unint64_t)a3 & 0x2000000000000) != 0) {
    goto LABEL_51;
  }
LABEL_48:
  if ((a3 & 8) == 0)
  {
LABEL_49:
    unsigned int v47 = a1[2];
    goto LABEL_53;
  }
LABEL_52:
  unsigned int v51 = *v6++;
  unsigned int v47 = v51;
  a1[2] = v51;
LABEL_53:
  std::vector<mimosa::v2::OpticalSamplesV1SubpacketState::Patch::ADCDelta>::resize(a2 + 80, v47);
  if (((unsigned __int16)a3 & 0x2000) != 0)
  {
    unsigned int v53 = *v6++;
    unsigned int v52 = v53;
    a1[3] = v53;
  }
  else
  {
    unsigned int v52 = a1[3];
  }
  __int16 v54 = a1 + 2;
  std::vector<mimosa::v2::OpticalSamplesV1SubpacketState::Patch::ADCDelta>::resize(a2 + 128, v52);
  if ((a3 & 0x80) != 0)
  {
    __int16 v56 = (uint64_t *)(a2 + 48);
    std::optional<std::vector<mimosa::v2::OpticalSamplesV1SubpacketState::Patch::Sample>>::emplace[abi:ne180100]<unsigned char &,void>(a2 + 48, a1 + 2);
    uint64_t v57 = *(void *)(a2 + 48);
    uint64_t v58 = *(void *)(a2 + 56);
    if (v57 != v58)
    {
      while (1)
      {
        __int16 v59 = *(_WORD *)v6;
        if (*(_WORD *)v6) {
          break;
        }
        v6 += 2;
        if ((v59 & 2) != 0) {
          goto LABEL_62;
        }
LABEL_63:
        if ((v59 & 4) != 0)
        {
          __int16 v63 = *(_WORD *)v6;
          v6 += 2;
          *(_WORD *)(v57 + 8) = v63;
          *(unsigned char *)(v57 + 10) = 1;
          if ((v59 & 8) == 0)
          {
LABEL_65:
            if ((v59 & 0x10) == 0) {
              goto LABEL_66;
            }
            goto LABEL_78;
          }
        }
        else if ((v59 & 8) == 0)
        {
          goto LABEL_65;
        }
        __int16 v64 = *(_WORD *)v6;
        v6 += 2;
        *(_WORD *)(v57 + 12) = v64;
        *(unsigned char *)(v57 + 14) = 1;
        if ((v59 & 0x10) == 0)
        {
LABEL_66:
          if ((v59 & 0x20) == 0) {
            goto LABEL_67;
          }
          goto LABEL_79;
        }
LABEL_78:
        __int16 v65 = *(_WORD *)v6;
        v6 += 2;
        *(_WORD *)(v57 + 16) = v65;
        *(unsigned char *)(v57 + 18) = 1;
        if ((v59 & 0x20) == 0)
        {
LABEL_67:
          if ((v59 & 0x40) == 0) {
            goto LABEL_68;
          }
          goto LABEL_80;
        }
LABEL_79:
        __int16 v66 = *(_WORD *)v6;
        v6 += 2;
        *(_WORD *)(v57 + 20) = v66;
        *(unsigned char *)(v57 + 22) = 1;
        if ((v59 & 0x40) == 0)
        {
LABEL_68:
          if ((v59 & 0x80) == 0) {
            goto LABEL_69;
          }
          goto LABEL_81;
        }
LABEL_80:
        __int16 v67 = *v6++;
        *(_WORD *)(v57 + 24) = v67 | 0x100;
        if ((v59 & 0x80) == 0)
        {
LABEL_69:
          if ((v59 & 0x100) == 0) {
            goto LABEL_70;
          }
          goto LABEL_82;
        }
LABEL_81:
        __int16 v68 = *v6++;
        *(_WORD *)(v57 + 26) = v68 | 0x100;
        if ((v59 & 0x100) == 0)
        {
LABEL_70:
          if ((v59 & 0x200) == 0) {
            goto LABEL_71;
          }
          goto LABEL_83;
        }
LABEL_82:
        __int16 v69 = *v6++;
        *(_WORD *)(v57 + 28) = v69 | 0x100;
        if ((v59 & 0x200) == 0)
        {
LABEL_71:
          if ((v59 & 0x400) != 0) {
            goto LABEL_84;
          }
          goto LABEL_72;
        }
LABEL_83:
        __int16 v70 = *v6++;
        *(_WORD *)(v57 + 30) = v70 | 0x100;
        if ((v59 & 0x400) != 0)
        {
LABEL_84:
          __int16 v71 = *v6++;
          *(_WORD *)(v57 + 32) = v71 | 0x100;
          if ((v59 & 0x800) == 0) {
            goto LABEL_74;
          }
LABEL_73:
          __int16 v62 = *v6++;
          *(_WORD *)(v57 + 34) = v62 | 0x100;
          goto LABEL_74;
        }
LABEL_72:
        if ((v59 & 0x800) != 0) {
          goto LABEL_73;
        }
LABEL_74:
        v57 += 36;
        if (v57 == v58) {
          goto LABEL_86;
        }
      }
      __int16 v60 = *((_WORD *)v6 + 1);
      v6 += 4;
      *(_WORD *)(v57 + 4) = v60;
      *(unsigned char *)(v57 + 6) = 1;
      if ((v59 & 2) == 0) {
        goto LABEL_63;
      }
LABEL_62:
      __int16 v61 = *(_WORD *)v6;
      v6 += 2;
      *(_WORD *)uint64_t v57 = v61;
      *(unsigned char *)(v57 + 2) = 1;
      goto LABEL_63;
    }
LABEL_86:
    if (((unsigned __int16)a3 & 0x100) == 0)
    {
      if (*v54)
      {
        uint64_t v72 = *v56;
        int v73 = *(_DWORD *)(*v56 + 4);
        if ((v73 & 0xFF0000) != 0)
        {
          for (uint64_t i = *(void *)(a2 + 56); v72 != i; v72 += 36)
          {
            *(_WORD *)(v72 + 4) = v73;
            *(unsigned char *)(v72 + 6) = 1;
          }
        }
      }
    }
  }
  unsigned __int8 v75 = *(unint64_t **)(a2 + 80);
  char v76 = *(unint64_t **)(a2 + 88);
  if (v75 != v76)
  {
    char v77 = v75 + 2;
    do
    {
      unint64_t v78 = mimosa::v2::parse_varint(v6, a5, v55);
      unsigned __int8 v80 = v79;
      *(v77 - 2) = mimosa::v2::varint::sign_transform(v78);
      long long v81 = v77 - 2;
      unint64_t v82 = &v6[v80];
      unint64_t v84 = mimosa::v2::parse_varint(v82, a5, v83);
      char v6 = &v82[v85];
      *(v77 - std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = mimosa::v2::varint::sign_transform(v84);
      if (!a1[1])
      {
        unint64_t v86 = mimosa::v2::parse_varint(v6, a5, v55);
        v6 += v87;
        unint64_t *v77 = mimosa::v2::varint::sign_transform(v86);
      }
      v77 += 3;
    }
    while (v81 + 3 != v76);
  }
  if (((unsigned __int16)a3 & 0x800) != 0)
  {
    if ((a3 & 0x2000000) != 0)
    {
      std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>::vector(&v135, *v6);
      if (*(unsigned char *)(a2 + 184)) {
        std::__variant_detail::__dtor<std::__variant_detail::__traits<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>,unsigned char>,(std::__variant_detail::_Trait)1>::~__dtor(a2 + 152);
      }
      unint64_t v90 = v135;
      *(void *)(a2 + 152) = v135;
      unsigned __int8 v91 = (_WORD *)v136;
      *(_OWORD *)(a2 + 160) = v136;
      *(_DWORD *)(a2 + 176) = 0;
      *(unsigned char *)(a2 + 184) = 1;
      ++v6;
      while (v90 != v91)
      {
        *unint64_t v90 = *(_WORD *)v6;
        v90[1] = *((_WORD *)v6 + 1);
        *((unsigned char *)v90 + 4) = v6[4];
        *((unsigned char *)v90 + std::__function::__value_func<BOOL ()(mimosa::Metadata const&)>::~__value_func[abi:ne180100]((void *)this + 5) = v6[5] != 0;
        v6 += 6;
        v90 += 3;
      }
    }
    else
    {
      LOBYTE(v13std::__function::__value_func<BOOL ()(mimosa::Metadata const&)>::~__value_func[abi:ne180100]((void *)this + 5) = 0;
      char v89 = *v6++;
      char v88 = v89;
      LOBYTE(v13std::__function::__value_func<BOOL ()(mimosa::Metadata const&)>::~__value_func[abi:ne180100]((void *)this + 5) = v89;
      if (*(unsigned char *)(a2 + 184))
      {
        std::variant<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>,unsigned char>::operator=[abi:ne180100]<unsigned char const&,0,unsigned char,1ul,0>(a2 + 152, &v135);
      }
      else
      {
        *(unsigned char *)(a2 + 152) = v88;
        *(_DWORD *)(a2 + 176) = 1;
        *(unsigned char *)(a2 + 184) = 1;
      }
    }
  }
  unint64_t v92 = *(unint64_t **)(a2 + 128);
  unsigned __int8 v93 = *(unint64_t **)(a2 + 136);
  while (v92 != v93)
  {
    unint64_t v94 = mimosa::v2::parse_varint(v6, a5, v55);
    int v96 = &v6[v95];
    unint64_t *v92 = mimosa::v2::varint::sign_transform(v94);
    unint64_t v98 = mimosa::v2::parse_varint(v96, a5, v97);
    char v100 = &v96[v99];
    v92[1] = mimosa::v2::varint::sign_transform(v98);
    unint64_t v102 = mimosa::v2::parse_varint(v100, a5, v101);
    char v6 = &v100[v103];
    v92[2] = mimosa::v2::varint::sign_transform(v102);
    v92 += 3;
  }
  if ((a3 & 4) != 0)
  {
    unint64_t v104 = mimosa::v2::parse_varint(v6, a5, v55);
    v6 += v105;
    *(void *)(a2 + 216) = v104;
    *(unsigned char *)(a2 + 224) = 1;
    if (((unint64_t)a3 & 0x2000000000) == 0)
    {
LABEL_111:
      if (((unsigned __int16)a3 & 0x4000) == 0) {
        goto LABEL_112;
      }
      goto LABEL_119;
    }
  }
  else if (((unint64_t)a3 & 0x2000000000) == 0)
  {
    goto LABEL_111;
  }
  uint64_t v106 = *(void *)v6;
  v6 += 8;
  *(void *)(a2 + 232) = v106;
  *(unsigned char *)(a2 + 240) = 1;
  if (((unsigned __int16)a3 & 0x4000) == 0)
  {
LABEL_112:
    if ((a3 & 0x200000) == 0) {
      goto LABEL_113;
    }
    goto LABEL_120;
  }
LABEL_119:
  int v107 = *(_DWORD *)v6;
  v6 += 4;
  *(_DWORD *)(a2 + 248) = v107;
  *(unsigned char *)(a2 + 252) = 1;
  if ((a3 & 0x200000) == 0)
  {
LABEL_113:
    if (((unsigned __int16)a3 & 0x1000) == 0) {
      goto LABEL_114;
    }
    goto LABEL_121;
  }
LABEL_120:
  int v108 = *(_DWORD *)v6;
  v6 += 4;
  *(_DWORD *)(a2 + 256) = v108;
  *(unsigned char *)(a2 + 260) = 1;
  if (((unsigned __int16)a3 & 0x1000) == 0)
  {
LABEL_114:
    if ((a3 & 0x40000000) == 0) {
      goto LABEL_115;
    }
    goto LABEL_122;
  }
LABEL_121:
  __int16 v109 = *(_WORD *)v6;
  v6 += 2;
  *(_WORD *)(a2 + 264) = v109;
  *(unsigned char *)(a2 + 266) = 1;
  if ((a3 & 0x40000000) == 0)
  {
LABEL_115:
    if (((unsigned __int16)a3 & 0x200) == 0) {
      goto LABEL_132;
    }
    goto LABEL_123;
  }
LABEL_122:
  __int16 v110 = *v6++;
  *(_WORD *)(a2 + 268) = v110 | 0x100;
  if (((unsigned __int16)a3 & 0x200) == 0) {
    goto LABEL_132;
  }
LABEL_123:
  if ((a3 & 0x800000) != 0)
  {
    std::vector<unsigned short>::vector(&v135, *v54);
    if (*(unsigned char *)(a2 + 328)) {
      std::__variant_detail::__dtor<std::__variant_detail::__traits<std::vector<unsigned short>,unsigned char>,(std::__variant_detail::_Trait)1>::~__dtor(a2 + 296);
    }
    __int16 v113 = v135;
    *(void *)(a2 + 296) = v135;
    __int16 v114 = (_WORD *)v136;
    *(_OWORD *)(a2 + 304) = v136;
    *(_DWORD *)(a2 + 320) = 0;
    *(unsigned char *)(a2 + 328) = 1;
    while (v113 != v114)
    {
      __int16 v115 = *(_WORD *)v6;
      v6 += 2;
      *v113++ = v115;
    }
  }
  else
  {
    LOBYTE(v13std::__function::__value_func<BOOL ()(mimosa::Metadata const&)>::~__value_func[abi:ne180100]((void *)this + 5) = 0;
    char v112 = *v6++;
    char v111 = v112;
    LOBYTE(v13std::__function::__value_func<BOOL ()(mimosa::Metadata const&)>::~__value_func[abi:ne180100]((void *)this + 5) = v112;
    if (*(unsigned char *)(a2 + 328))
    {
      std::variant<std::vector<unsigned short>,unsigned char>::operator=[abi:ne180100]<unsigned char const&,0,unsigned char,1ul,0>(a2 + 296, &v135);
    }
    else
    {
      *(unsigned char *)(a2 + 296) = v111;
      *(_DWORD *)(a2 + 320) = 1;
      *(unsigned char *)(a2 + 328) = 1;
    }
  }
LABEL_132:
  if ((a3 & 0x4000000) != 0)
  {
    __int16 v124 = *v6++;
    *(_WORD *)(a2 + 352) = v124 | 0x100;
    if ((a3 & 0x20000) == 0)
    {
LABEL_134:
      if (((unsigned __int16)a3 & 0x400) == 0) {
        goto LABEL_135;
      }
      goto LABEL_149;
    }
  }
  else if ((a3 & 0x20000) == 0)
  {
    goto LABEL_134;
  }
  __int16 v125 = *v6++;
  *(_WORD *)(a2 + 354) = v125 | 0x100;
  if (((unsigned __int16)a3 & 0x400) == 0)
  {
LABEL_135:
    if (((unint64_t)a3 & 0x4000000000) == 0) {
      goto LABEL_136;
    }
    goto LABEL_150;
  }
LABEL_149:
  uint64_t v126 = *(void *)v6;
  v6 += 8;
  *(void *)(a2 + 336) = v126;
  *(unsigned char *)(a2 + 344) = 1;
  if (((unint64_t)a3 & 0x4000000000) == 0)
  {
LABEL_136:
    if (((unint64_t)a3 & 0x40000000000) == 0) {
      goto LABEL_137;
    }
    goto LABEL_151;
  }
LABEL_150:
  int v127 = *v6++;
  *(_WORD *)(a2 + 356) = (v127 != 0) | 0x100;
  if (((unint64_t)a3 & 0x40000000000) == 0)
  {
LABEL_137:
    if ((a3 & 2) == 0) {
      goto LABEL_138;
    }
    goto LABEL_152;
  }
LABEL_151:
  __int16 v128 = *(_WORD *)v6;
  v6 += 2;
  *(_WORD *)(a2 + 384) = v128;
  *(unsigned char *)(a2 + 386) = 1;
  if ((a3 & 2) == 0)
  {
LABEL_138:
    if ((a3 & 0x10000) == 0) {
      goto LABEL_139;
    }
    goto LABEL_153;
  }
LABEL_152:
  unint64_t v129 = mimosa::v2::parse_varint(v6, a5, v55);
  v6 += v130;
  *(_DWORD *)(a2 + 388) = mimosa::v2::varint::sign_transform(v129);
  if ((a3 & 0x10000) == 0)
  {
LABEL_139:
    if ((a3 & 0x40) != 0) {
      goto LABEL_140;
    }
    goto LABEL_141;
  }
LABEL_153:
  if ((a3 & 0x1000000) != 0)
  {
    uint64_t v133 = 0;
    *(void *)(a2 + 488) = 0;
    *(void *)(a2 + 496) = 0;
    *(_WORD *)(a2 + 504) = 0;
    *(_DWORD *)(a2 + 508) = 0;
    *(unsigned char *)(a2 + 512) = 1;
    do
    {
      *(_WORD *)(a2 + 488 + v133) = *(_WORD *)&v6[v133];
      v133 += 2;
    }
    while (v133 != 18);
    v6 += 18;
    if ((a3 & 0x40) == 0) {
      goto LABEL_141;
    }
    goto LABEL_140;
  }
  char v132 = *v6++;
  char v131 = v132;
  if (!*(unsigned char *)(a2 + 512))
  {
    *(unsigned char *)(a2 + 488) = v131;
    *(_DWORD *)(a2 + 508) = 1;
    *(unsigned char *)(a2 + 512) = 1;
    if ((a3 & 0x40) == 0) {
      goto LABEL_141;
    }
    goto LABEL_140;
  }
  if (*(_DWORD *)(a2 + 508) != 1) {
    *(_DWORD *)(a2 + 508) = 1;
  }
  *(unsigned char *)(a2 + 488) = v131;
  if ((a3 & 0x40) != 0)
  {
LABEL_140:
    __int16 v116 = *(_WORD *)v6;
    v6 += 2;
    *(_WORD *)(a2 + 516) = v116;
    *(unsigned char *)(a2 + 518) = 1;
  }
LABEL_141:
  uint64_t v117 = 0;
  unsigned int v120 = *v6;
  v118 = v6 + 1;
  unint64_t v119 = v120;
  uint64_t v121 = a2 + 416;
  do
  {
    if (v119)
    {
      unint64_t v122 = mimosa::v2::parse_varint(v118, a5, v55);
      v118 += v123;
      *(void *)(v121 + v117) = mimosa::v2::varint::sign_transform(v122);
    }
    v119 >>= 1;
    v117 += 8;
  }
  while (v117 != 72);
  if (v118 != a5)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "something went wrong during patch decoding");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
}

void sub_22277F0C0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unint64_t mimosa::v2::PatchDecoder::extract_patch<mimosa::v2::PacketState::PatchV6>(unsigned char *a1, uint64_t a2, const byte *a3, const byte *this, byte *a5)
{
  char v6 = this;
  if ((a3 & 0x20) != 0)
  {
    a1[1] ^= 1u;
    if ((a3 & 0x10) != 0)
    {
LABEL_3:
      if ((a3 & 0x8000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else if ((a3 & 0x10) != 0)
  {
    goto LABEL_3;
  }
  unint64_t v11 = mimosa::v2::parse_varint(this, a5, a3);
  v6 += v12;
  *(void *)a2 = mimosa::v2::varint::sign_transform(v11);
  if ((a3 & 0x8000000) == 0)
  {
LABEL_4:
    if ((a3 & 0x20000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
LABEL_12:
  unint64_t v13 = mimosa::v2::parse_varint(v6, a5, a3);
  v6 += v14;
  *(void *)(a2 + 8) = mimosa::v2::varint::sign_transform(v13);
  if ((a3 & 0x20000000) == 0)
  {
LABEL_5:
    if (a3) {
      goto LABEL_6;
    }
    goto LABEL_14;
  }
LABEL_13:
  __int16 v15 = *v6++;
  *(_WORD *)(a2 + 16) = v15 | 0x100;
  if (a3)
  {
LABEL_6:
    if (((unsigned __int16)a3 & 0x8000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_15;
  }
LABEL_14:
  unint64_t v16 = mimosa::v2::parse_varint(v6, a5, a3);
  v6 += v17;
  *(void *)(a2 + 24) = mimosa::v2::varint::sign_transform(v16);
  if (((unsigned __int16)a3 & 0x8000) == 0)
  {
LABEL_7:
    if (((unint64_t)a3 & 0x100000000000) == 0) {
      goto LABEL_8;
    }
LABEL_16:
    __int16 v20 = *v6++;
    *(_WORD *)(a2 + 40) = v20 | 0x100;
    if ((a3 & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_17;
  }
LABEL_15:
  unint64_t v18 = mimosa::v2::parse_varint(v6, a5, a3);
  v6 += v19;
  *(void *)(a2 + 32) = mimosa::v2::varint::sign_transform(v18);
  if (((unint64_t)a3 & 0x100000000000) != 0) {
    goto LABEL_16;
  }
LABEL_8:
  if ((a3 & 0x80000000) == 0)
  {
LABEL_9:
    unint64_t v10 = *(void *)(a2 + 144);
    goto LABEL_18;
  }
LABEL_17:
  unint64_t v21 = mimosa::v2::parse_varint(v6, a5, a3);
  v6 += v22;
  unint64_t v10 = mimosa::v2::varint::sign_transform(v21);
  *(void *)(a2 + 144) = v10;
LABEL_18:
  *(void *)(a2 + 144) = v10 + *(void *)(a2 + 24);
  if ((a3 & 0x80000) == 0)
  {
    if (((unint64_t)a3 & 0x200000000000) == 0) {
      goto LABEL_20;
    }
LABEL_23:
    __int16 v26 = *v6++;
    *(_WORD *)(a2 + 160) = v26 | 0x100;
    if (((unint64_t)a3 & 0x100000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_24;
  }
  unint64_t v24 = mimosa::v2::parse_varint(v6, a5, a3);
  v6 += v25;
  *(void *)(a2 + 152) = mimosa::v2::varint::sign_transform(v24);
  if (((unint64_t)a3 & 0x200000000000) != 0) {
    goto LABEL_23;
  }
LABEL_20:
  if (((unint64_t)a3 & 0x100000000) == 0)
  {
LABEL_21:
    unint64_t v23 = *(void *)(a2 + 232);
    goto LABEL_25;
  }
LABEL_24:
  unint64_t v27 = mimosa::v2::parse_varint(v6, a5, a3);
  v6 += v28;
  unint64_t v23 = mimosa::v2::varint::sign_transform(v27);
  *(void *)(a2 + 232) = v23;
LABEL_25:
  *(void *)(a2 + 232) = v23 + *(void *)(a2 + 24);
  if ((a3 & 0x40000) == 0)
  {
    if (((unint64_t)a3 & 0x400000000000) == 0) {
      goto LABEL_27;
    }
LABEL_30:
    __int16 v32 = *v6++;
    *(_WORD *)(a2 + 248) = v32 | 0x100;
    if (((unint64_t)a3 & 0x200000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_31;
  }
  unint64_t v30 = mimosa::v2::parse_varint(v6, a5, a3);
  v6 += v31;
  *(void *)(a2 + 240) = mimosa::v2::varint::sign_transform(v30);
  if (((unint64_t)a3 & 0x400000000000) != 0) {
    goto LABEL_30;
  }
LABEL_27:
  if (((unint64_t)a3 & 0x200000000) == 0)
  {
LABEL_28:
    unint64_t v29 = *(void *)(a2 + 312);
    goto LABEL_32;
  }
LABEL_31:
  unint64_t v33 = mimosa::v2::parse_varint(v6, a5, a3);
  v6 += v34;
  unint64_t v29 = mimosa::v2::varint::sign_transform(v33);
  *(void *)(a2 + 312) = v29;
LABEL_32:
  *(void *)(a2 + 312) = v29 + *(void *)(a2 + 24);
  if ((a3 & 0x100000) == 0)
  {
    if (((unint64_t)a3 & 0x800000000000) == 0) {
      goto LABEL_34;
    }
LABEL_37:
    __int16 v38 = *v6++;
    *(_WORD *)(a2 + 328) = v38 | 0x100;
    if (((unint64_t)a3 & 0x400000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_38;
  }
  unint64_t v36 = mimosa::v2::parse_varint(v6, a5, a3);
  v6 += v37;
  *(void *)(a2 + 320) = mimosa::v2::varint::sign_transform(v36);
  if (((unint64_t)a3 & 0x800000000000) != 0) {
    goto LABEL_37;
  }
LABEL_34:
  if (((unint64_t)a3 & 0x400000000) == 0)
  {
LABEL_35:
    unint64_t v35 = *(void *)(a2 + 360);
    goto LABEL_39;
  }
LABEL_38:
  unint64_t v39 = mimosa::v2::parse_varint(v6, a5, a3);
  v6 += v40;
  unint64_t v35 = mimosa::v2::varint::sign_transform(v39);
  *(void *)(a2 + 360) = v35;
LABEL_39:
  *(void *)(a2 + 360) = v35 + *(void *)(a2 + 24);
  if (((unint64_t)a3 & 0x800000000) == 0)
  {
    if (((unint64_t)a3 & 0x1000000000000) == 0) {
      goto LABEL_41;
    }
LABEL_44:
    __int16 v44 = *v6++;
    *(_WORD *)(a2 + 376) = v44 | 0x100;
    if (((unint64_t)a3 & 0x1000000000) == 0) {
      goto LABEL_42;
    }
    goto LABEL_45;
  }
  unint64_t v42 = mimosa::v2::parse_varint(v6, a5, a3);
  v6 += v43;
  *(void *)(a2 + 368) = mimosa::v2::varint::sign_transform(v42);
  if (((unint64_t)a3 & 0x1000000000000) != 0) {
    goto LABEL_44;
  }
LABEL_41:
  if (((unint64_t)a3 & 0x1000000000) == 0)
  {
LABEL_42:
    unint64_t v41 = *(void *)(a2 + 392);
    goto LABEL_46;
  }
LABEL_45:
  unint64_t v45 = mimosa::v2::parse_varint(v6, a5, a3);
  v6 += v46;
  unint64_t v41 = mimosa::v2::varint::sign_transform(v45);
  *(void *)(a2 + 392) = v41;
LABEL_46:
  *(void *)(a2 + 392) = v41 + *(void *)(a2 + 24);
  if ((a3 & 0x400000) == 0)
  {
    if (((unint64_t)a3 & 0x2000000000000) == 0) {
      goto LABEL_48;
    }
LABEL_51:
    __int16 v50 = *v6++;
    *(_WORD *)(a2 + 408) = v50 | 0x100;
    if (((unint64_t)a3 & 0x4000000000000) == 0) {
      goto LABEL_49;
    }
    goto LABEL_52;
  }
  unint64_t v48 = mimosa::v2::parse_varint(v6, a5, a3);
  v6 += v49;
  *(void *)(a2 + 400) = mimosa::v2::varint::sign_transform(v48);
  if (((unint64_t)a3 & 0x2000000000000) != 0) {
    goto LABEL_51;
  }
LABEL_48:
  if (((unint64_t)a3 & 0x4000000000000) == 0)
  {
LABEL_49:
    unint64_t v47 = *(void *)(a2 + 488);
    goto LABEL_53;
  }
LABEL_52:
  unint64_t v51 = mimosa::v2::parse_varint(v6, a5, a3);
  v6 += v52;
  unint64_t v47 = mimosa::v2::varint::sign_transform(v51);
  *(void *)(a2 + 488) = v47;
LABEL_53:
  *(void *)(a2 + 488) = v47 + *(void *)(a2 + 24);
  if (((unint64_t)a3 & 0x8000000000000) != 0)
  {
    unint64_t v54 = mimosa::v2::parse_varint(v6, a5, a3);
    v6 += v55;
    *(void *)(a2 + 496) = mimosa::v2::varint::sign_transform(v54);
    if (((unint64_t)a3 & 0x10000000000000) == 0)
    {
LABEL_55:
      if (((unint64_t)a3 & 0x8000000000) == 0) {
        goto LABEL_56;
      }
LABEL_60:
      __int16 v57 = *v6++;
      *(_WORD *)(a2 + 512) = v57 | 0x100;
      if ((a3 & 8) == 0) {
        goto LABEL_57;
      }
      goto LABEL_61;
    }
  }
  else if (((unint64_t)a3 & 0x10000000000000) == 0)
  {
    goto LABEL_55;
  }
  __int16 v56 = *v6++;
  *(_WORD *)(a2 + 504) = v56 | 0x100;
  if (((unint64_t)a3 & 0x8000000000) != 0) {
    goto LABEL_60;
  }
LABEL_56:
  if ((a3 & 8) == 0)
  {
LABEL_57:
    unsigned int v53 = a1[2];
    goto LABEL_62;
  }
LABEL_61:
  unsigned int v58 = *v6++;
  unsigned int v53 = v58;
  a1[2] = v58;
LABEL_62:
  std::vector<mimosa::v2::OpticalSamplesV1SubpacketState::Patch::ADCDelta>::resize(a2 + 120, v53);
  if (((unsigned __int16)a3 & 0x2000) != 0)
  {
    unsigned int v60 = *v6++;
    unsigned int v59 = v60;
    a1[3] = v60;
  }
  else
  {
    unsigned int v59 = a1[3];
  }
  __int16 v61 = a1 + 2;
  std::vector<mimosa::v2::OpticalSamplesV1SubpacketState::Patch::ADCDelta>::resize(a2 + 168, v59);
  if ((a3 & 0x80) != 0)
  {
    __int16 v63 = (uint64_t *)(a2 + 88);
    std::optional<std::vector<mimosa::v2::OpticalSamplesV2SubpacketState::Patch::Sample>>::emplace[abi:ne180100]<unsigned char &,void>(a2 + 88, a1 + 2);
    uint64_t v65 = *(void *)(a2 + 88);
    uint64_t v64 = *(void *)(a2 + 96);
    if (v65 != v64)
    {
      uint64_t v66 = v65 + 16;
      while (1)
      {
        __int16 v67 = *(_WORD *)v6;
        if (*(_WORD *)v6) {
          break;
        }
        v6 += 2;
        if ((v67 & 2) != 0) {
          goto LABEL_72;
        }
LABEL_73:
        if ((v67 & 4) != 0)
        {
          __int16 v72 = *(_WORD *)v6;
          v6 += 2;
          *(_WORD *)(v66 - 8) = v72;
          *(unsigned char *)(v66 - 6) = 1;
          if ((v67 & 8) == 0)
          {
LABEL_75:
            if ((v67 & 0x10) == 0) {
              goto LABEL_76;
            }
            goto LABEL_88;
          }
        }
        else if ((v67 & 8) == 0)
        {
          goto LABEL_75;
        }
        __int16 v73 = *v6++;
        *(_WORD *)(v66 + 6) = v73 | 0x100;
        if ((v67 & 0x10) == 0)
        {
LABEL_76:
          if ((v67 & 0x20) == 0) {
            goto LABEL_77;
          }
          goto LABEL_89;
        }
LABEL_88:
        __int16 v74 = *v6++;
        *(_WORD *)(v66 + 8) = v74 | 0x100;
        if ((v67 & 0x20) == 0)
        {
LABEL_77:
          if ((v67 & 0x100) == 0) {
            goto LABEL_78;
          }
          goto LABEL_90;
        }
LABEL_89:
        __int16 v75 = *(_WORD *)v6;
        v6 += 2;
        *(_WORD *)(v66 - 4) = v75;
        *(unsigned char *)(v66 - 2) = 1;
        if ((v67 & 0x100) == 0)
        {
LABEL_78:
          if ((v67 & 0x400) == 0) {
            goto LABEL_79;
          }
          goto LABEL_91;
        }
LABEL_90:
        __int16 v76 = *(_WORD *)v6;
        v6 += 2;
        *(_WORD *)uint64_t v66 = v76;
        *(unsigned char *)(v66 + 2) = 1;
        if ((v67 & 0x400) == 0)
        {
LABEL_79:
          if ((v67 & 0x80) == 0) {
            goto LABEL_80;
          }
          goto LABEL_92;
        }
LABEL_91:
        __int16 v77 = *v6++;
        *(_WORD *)(v66 + 14) = v77 | 0x100;
        if ((v67 & 0x80) == 0)
        {
LABEL_80:
          if ((v67 & 0x800) == 0) {
            goto LABEL_81;
          }
          goto LABEL_93;
        }
LABEL_92:
        __int16 v78 = *v6++;
        *(_WORD *)(v66 + 10) = v78 | 0x100;
        if ((v67 & 0x800) == 0)
        {
LABEL_81:
          if ((v67 & 0x40) != 0) {
            goto LABEL_94;
          }
          goto LABEL_82;
        }
LABEL_93:
        __int16 v79 = *v6++;
        *(_WORD *)(v66 + 16) = v79 | 0x100;
        if ((v67 & 0x40) != 0)
        {
LABEL_94:
          __int16 v80 = *v6++;
          *(_WORD *)(v66 + 4) = v80 | 0x100;
          if ((v67 & 0x200) == 0) {
            goto LABEL_84;
          }
LABEL_83:
          __int16 v70 = *v6++;
          *(_WORD *)(v66 + 12) = v70 | 0x100;
          goto LABEL_84;
        }
LABEL_82:
        if ((v67 & 0x200) != 0) {
          goto LABEL_83;
        }
LABEL_84:
        uint64_t v71 = v66 + 18;
        v66 += 34;
        if (v71 == v64) {
          goto LABEL_96;
        }
      }
      __int16 v68 = *((_WORD *)v6 + 1);
      v6 += 4;
      *(_WORD *)(v66 - 12) = v68;
      *(unsigned char *)(v66 - 10) = 1;
      if ((v67 & 2) == 0) {
        goto LABEL_73;
      }
LABEL_72:
      __int16 v69 = *(_WORD *)v6;
      v6 += 2;
      *(_WORD *)(v66 - 16) = v69;
      *(unsigned char *)(v66 - 14) = 1;
      goto LABEL_73;
    }
LABEL_96:
    if (((unsigned __int16)a3 & 0x100) == 0)
    {
      if (*v61)
      {
        uint64_t v81 = *v63;
        int v82 = *(_DWORD *)(*v63 + 4);
        if ((v82 & 0xFF0000) != 0)
        {
          for (uint64_t i = *(void *)(a2 + 96); v81 != i; v81 += 34)
          {
            *(_WORD *)(v81 + 4) = v82;
            *(unsigned char *)(v81 + 6) = 1;
          }
        }
      }
    }
  }
  unint64_t v84 = *(unint64_t **)(a2 + 120);
  unsigned __int8 v85 = *(unint64_t **)(a2 + 128);
  if (v84 != v85)
  {
    unint64_t v86 = v84 + 2;
    do
    {
      unint64_t v87 = mimosa::v2::parse_varint(v6, a5, v62);
      unsigned __int8 v89 = v88;
      *(v86 - 2) = mimosa::v2::varint::sign_transform(v87);
      unint64_t v90 = v86 - 2;
      unsigned __int8 v91 = &v6[v89];
      unint64_t v93 = mimosa::v2::parse_varint(v91, a5, v92);
      char v6 = &v91[v94];
      *(v86 - std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = mimosa::v2::varint::sign_transform(v93);
      if (!a1[1])
      {
        unint64_t v95 = mimosa::v2::parse_varint(v6, a5, v62);
        v6 += v96;
        *unint64_t v86 = mimosa::v2::varint::sign_transform(v95);
      }
      v86 += 3;
    }
    while (v90 + 3 != v85);
  }
  if (((unsigned __int16)a3 & 0x800) != 0)
  {
    if ((a3 & 0x2000000) != 0)
    {
      std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>::vector(&v145, *v6);
      if (*(unsigned char *)(a2 + 224)) {
        std::__variant_detail::__dtor<std::__variant_detail::__traits<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>,unsigned char>,(std::__variant_detail::_Trait)1>::~__dtor(a2 + 192);
      }
      unsigned __int8 v99 = v145;
      *(void *)(a2 + 192) = v145;
      char v100 = (_WORD *)v146;
      *(_OWORD *)(a2 + 200) = v146;
      *(_DWORD *)(a2 + 216) = 0;
      *(unsigned char *)(a2 + 224) = 1;
      ++v6;
      while (v99 != v100)
      {
        *unsigned __int8 v99 = *(_WORD *)v6;
        v99[1] = *((_WORD *)v6 + 1);
        *((unsigned char *)v99 + 4) = v6[4];
        *((unsigned char *)v99 + std::__function::__value_func<BOOL ()(mimosa::Metadata const&)>::~__value_func[abi:ne180100]((void *)this + 5) = v6[5] != 0;
        v6 += 6;
        v99 += 3;
      }
    }
    else
    {
      LOBYTE(v14std::__function::__value_func<BOOL ()(mimosa::Metadata const&)>::~__value_func[abi:ne180100]((void *)this + 5) = 0;
      char v98 = *v6++;
      char v97 = v98;
      LOBYTE(v14std::__function::__value_func<BOOL ()(mimosa::Metadata const&)>::~__value_func[abi:ne180100]((void *)this + 5) = v98;
      if (*(unsigned char *)(a2 + 224))
      {
        std::variant<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>,unsigned char>::operator=[abi:ne180100]<unsigned char const&,0,unsigned char,1ul,0>(a2 + 192, &v145);
      }
      else
      {
        *(unsigned char *)(a2 + 192) = v97;
        *(_DWORD *)(a2 + 216) = 1;
        *(unsigned char *)(a2 + 224) = 1;
      }
    }
  }
  char v101 = *(unint64_t **)(a2 + 168);
  unint64_t v102 = *(unint64_t **)(a2 + 176);
  while (v101 != v102)
  {
    unint64_t v103 = mimosa::v2::parse_varint(v6, a5, v62);
    unsigned __int8 v105 = &v6[v104];
    *char v101 = mimosa::v2::varint::sign_transform(v103);
    unint64_t v107 = mimosa::v2::parse_varint(v105, a5, v106);
    __int16 v109 = &v105[v108];
    v101[1] = mimosa::v2::varint::sign_transform(v107);
    unint64_t v111 = mimosa::v2::parse_varint(v109, a5, v110);
    char v6 = &v109[v112];
    v101[2] = mimosa::v2::varint::sign_transform(v111);
    v101 += 3;
  }
  if ((a3 & 4) != 0)
  {
    unint64_t v113 = mimosa::v2::parse_varint(v6, a5, v62);
    v6 += v114;
    *(void *)(a2 + 256) = v113;
    *(unsigned char *)(a2 + 264) = 1;
    if (((unint64_t)a3 & 0x2000000000) == 0)
    {
LABEL_121:
      if (((unsigned __int16)a3 & 0x4000) == 0) {
        goto LABEL_122;
      }
      goto LABEL_129;
    }
  }
  else if (((unint64_t)a3 & 0x2000000000) == 0)
  {
    goto LABEL_121;
  }
  uint64_t v115 = *(void *)v6;
  v6 += 8;
  *(void *)(a2 + 272) = v115;
  *(unsigned char *)(a2 + 280) = 1;
  if (((unsigned __int16)a3 & 0x4000) == 0)
  {
LABEL_122:
    if ((a3 & 0x200000) == 0) {
      goto LABEL_123;
    }
    goto LABEL_130;
  }
LABEL_129:
  int v116 = *(_DWORD *)v6;
  v6 += 4;
  *(_DWORD *)(a2 + 288) = v116;
  *(unsigned char *)(a2 + 292) = 1;
  if ((a3 & 0x200000) == 0)
  {
LABEL_123:
    if (((unsigned __int16)a3 & 0x1000) == 0) {
      goto LABEL_124;
    }
    goto LABEL_131;
  }
LABEL_130:
  int v117 = *(_DWORD *)v6;
  v6 += 4;
  *(_DWORD *)(a2 + 296) = v117;
  *(unsigned char *)(a2 + 300) = 1;
  if (((unsigned __int16)a3 & 0x1000) == 0)
  {
LABEL_124:
    if ((a3 & 0x40000000) == 0) {
      goto LABEL_125;
    }
    goto LABEL_132;
  }
LABEL_131:
  __int16 v118 = *(_WORD *)v6;
  v6 += 2;
  *(_WORD *)(a2 + 304) = v118;
  *(unsigned char *)(a2 + 306) = 1;
  if ((a3 & 0x40000000) == 0)
  {
LABEL_125:
    if (((unsigned __int16)a3 & 0x200) == 0) {
      goto LABEL_142;
    }
    goto LABEL_133;
  }
LABEL_132:
  __int16 v119 = *v6++;
  *(_WORD *)(a2 + 308) = v119 | 0x100;
  if (((unsigned __int16)a3 & 0x200) == 0) {
    goto LABEL_142;
  }
LABEL_133:
  if ((a3 & 0x800000) != 0)
  {
    std::vector<unsigned short>::vector(&v145, *v61);
    if (*(unsigned char *)(a2 + 80)) {
      std::__variant_detail::__dtor<std::__variant_detail::__traits<std::vector<unsigned short>,unsigned char>,(std::__variant_detail::_Trait)1>::~__dtor(a2 + 48);
    }
    unint64_t v122 = v145;
    *(void *)(a2 + 48) = v145;
    unsigned __int8 v123 = (_WORD *)v146;
    *(_OWORD *)(a2 + 56) = v146;
    *(_DWORD *)(a2 + 72) = 0;
    *(unsigned char *)(a2 + 80) = 1;
    while (v122 != v123)
    {
      __int16 v124 = *(_WORD *)v6;
      v6 += 2;
      *v122++ = v124;
    }
  }
  else
  {
    LOBYTE(v14std::__function::__value_func<BOOL ()(mimosa::Metadata const&)>::~__value_func[abi:ne180100]((void *)this + 5) = 0;
    char v121 = *v6++;
    char v120 = v121;
    LOBYTE(v14std::__function::__value_func<BOOL ()(mimosa::Metadata const&)>::~__value_func[abi:ne180100]((void *)this + 5) = v121;
    if (*(unsigned char *)(a2 + 80))
    {
      std::variant<std::vector<unsigned short>,unsigned char>::operator=[abi:ne180100]<unsigned char const&,0,unsigned char,1ul,0>(a2 + 48, &v145);
    }
    else
    {
      *(unsigned char *)(a2 + 48) = v120;
      *(_DWORD *)(a2 + 72) = 1;
      *(unsigned char *)(a2 + 80) = 1;
    }
  }
LABEL_142:
  if ((a3 & 0x4000000) != 0)
  {
    __int16 v135 = *v6++;
    *(_WORD *)(a2 + 352) = v135 | 0x100;
    if ((a3 & 0x20000) == 0)
    {
LABEL_144:
      if (((unsigned __int16)a3 & 0x400) == 0) {
        goto LABEL_145;
      }
      goto LABEL_158;
    }
  }
  else if ((a3 & 0x20000) == 0)
  {
    goto LABEL_144;
  }
  __int16 v136 = *v6++;
  *(_WORD *)(a2 + 354) = v136 | 0x100;
  if (((unsigned __int16)a3 & 0x400) == 0)
  {
LABEL_145:
    if (((unint64_t)a3 & 0x40000000000) == 0) {
      goto LABEL_146;
    }
    goto LABEL_159;
  }
LABEL_158:
  uint64_t v137 = *(void *)v6;
  v6 += 8;
  *(void *)(a2 + 336) = v137;
  *(unsigned char *)(a2 + 344) = 1;
  if (((unint64_t)a3 & 0x40000000000) == 0)
  {
LABEL_146:
    if ((a3 & 2) == 0) {
      goto LABEL_147;
    }
    goto LABEL_160;
  }
LABEL_159:
  __int16 v138 = *(_WORD *)v6;
  v6 += 2;
  *(_WORD *)(a2 + 384) = v138;
  *(unsigned char *)(a2 + 386) = 1;
  if ((a3 & 2) == 0)
  {
LABEL_147:
    if ((a3 & 0x10000) == 0) {
      goto LABEL_148;
    }
    goto LABEL_161;
  }
LABEL_160:
  unint64_t v139 = mimosa::v2::parse_varint(v6, a5, v62);
  v6 += v140;
  *(_DWORD *)(a2 + 388) = mimosa::v2::varint::sign_transform(v139);
  if ((a3 & 0x10000) == 0)
  {
LABEL_148:
    if ((a3 & 0x40) != 0) {
      goto LABEL_149;
    }
    goto LABEL_150;
  }
LABEL_161:
  if ((a3 & 0x1000000) != 0)
  {
    uint64_t v143 = 0;
    *(void *)(a2 + 464) = 0;
    *(void *)(a2 + 472) = 0;
    *(unsigned char *)(a2 + 480) = 1;
    do
    {
      *(_WORD *)(a2 + 464 + v143) = *(_WORD *)&v6[v143];
      v143 += 2;
    }
    while (v143 != 12);
    v6 += 12;
    if ((a3 & 0x40) == 0) {
      goto LABEL_150;
    }
    goto LABEL_149;
  }
  char v142 = *v6++;
  char v141 = v142;
  if (!*(unsigned char *)(a2 + 480))
  {
    *(unsigned char *)(a2 + 464) = v141;
    *(_DWORD *)(a2 + 476) = 1;
    *(unsigned char *)(a2 + 480) = 1;
    if ((a3 & 0x40) == 0) {
      goto LABEL_150;
    }
    goto LABEL_149;
  }
  if (*(_DWORD *)(a2 + 476) != 1) {
    *(_DWORD *)(a2 + 476) = 1;
  }
  *(unsigned char *)(a2 + 464) = v141;
  if ((a3 & 0x40) != 0)
  {
LABEL_149:
    __int16 v125 = *(_WORD *)v6;
    v6 += 2;
    *(_WORD *)(a2 + 484) = v125;
    *(unsigned char *)(a2 + 486) = 1;
  }
LABEL_150:
  unint64_t result = mimosa::v2::parse_varint(v6, a5, v62);
  unint64_t v128 = result;
  uint64_t v129 = 0;
  char v131 = &v6[v130];
  uint64_t v132 = a2 + 416;
  do
  {
    if (v128)
    {
      unint64_t v133 = mimosa::v2::parse_varint(v131, a5, v127);
      v131 += v134;
      unint64_t result = mimosa::v2::varint::sign_transform(v133);
      *(void *)(v132 + v12std::__function::__value_func<BOOL ()(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,double)>::~__value_func[abi:ne180100]((void *)this + 9) = result;
    }
    v128 >>= 1;
    v129 += 8;
  }
  while (v129 != 48);
  if (v131 != a5)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "something went wrong during patch decoding");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return result;
}

void sub_22277FA5C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *std::optional<std::vector<mimosa::v2::OpticalSamplesV2SubpacketState::Patch::Sample>>::emplace[abi:ne180100]<unsigned char &,void>(uint64_t a1, unsigned __int8 *a2)
{
  if (*(unsigned char *)(a1 + 24))
  {
    uint64_t v4 = *(void **)a1;
    if (*(void *)a1)
    {
      *(void *)(a1 + 8) = v4;
      operator delete(v4);
    }
    *(unsigned char *)(a1 + 24) = 0;
  }
  unint64_t result = std::vector<mimosa::v2::OpticalSamplesV2SubpacketState::Patch::Sample>::vector((void *)a1, *a2);
  *(unsigned char *)(a1 + 24) = 1;
  return result;
}

void *std::vector<mimosa::v2::OpticalSamplesV2SubpacketState::Patch::Sample>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<mimosa::v2::OpticalSamplesV2SubpacketState::Patch::Sample>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    size_t v5 = 34 * ((34 * a2 - 34) / 0x22) + 34;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_22277FB44(_Unwind_Exception *exception_object)
{
  BOOL v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<mimosa::v2::OpticalSamplesV2SubpacketState::Patch::Sample>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x787878787878788) {
    std::vector<mimosa::OpticalSampleV1>::__throw_length_error[abi:ne180100]();
  }
  unint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<mimosa::v2::OpticalSamplesV2SubpacketState::Patch::Sample>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[34 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<mimosa::v2::OpticalSamplesV2SubpacketState::Patch::Sample>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x787878787878788) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(34 * a2);
}

unint64_t mimosa::v2::PatchDecoder::extract_patch<mimosa::v2::PacketState::PatchV7>(unsigned char *a1, uint64_t a2, const byte *a3, const byte *this, byte *a5)
{
  char v6 = this;
  if ((a3 & 0x20) != 0)
  {
    a1[1] ^= 1u;
    if ((a3 & 0x10) != 0)
    {
LABEL_3:
      if ((a3 & 0x8000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else if ((a3 & 0x10) != 0)
  {
    goto LABEL_3;
  }
  unint64_t v11 = mimosa::v2::parse_varint(this, a5, a3);
  v6 += v12;
  *(void *)a2 = mimosa::v2::varint::sign_transform(v11);
  if ((a3 & 0x8000000) == 0)
  {
LABEL_4:
    if ((a3 & 0x20000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
LABEL_12:
  unint64_t v13 = mimosa::v2::parse_varint(v6, a5, a3);
  v6 += v14;
  *(void *)(a2 + 8) = mimosa::v2::varint::sign_transform(v13);
  if ((a3 & 0x20000000) == 0)
  {
LABEL_5:
    if (a3) {
      goto LABEL_6;
    }
    goto LABEL_14;
  }
LABEL_13:
  __int16 v15 = *v6++;
  *(_WORD *)(a2 + 16) = v15 | 0x100;
  if (a3)
  {
LABEL_6:
    if (((unsigned __int16)a3 & 0x8000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_15;
  }
LABEL_14:
  unint64_t v16 = mimosa::v2::parse_varint(v6, a5, a3);
  v6 += v17;
  *(void *)(a2 + 24) = mimosa::v2::varint::sign_transform(v16);
  if (((unsigned __int16)a3 & 0x8000) == 0)
  {
LABEL_7:
    if (((unint64_t)a3 & 0x100000000000) == 0) {
      goto LABEL_8;
    }
LABEL_16:
    __int16 v20 = *v6++;
    *(_WORD *)(a2 + 40) = v20 | 0x100;
    if ((a3 & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_17;
  }
LABEL_15:
  unint64_t v18 = mimosa::v2::parse_varint(v6, a5, a3);
  v6 += v19;
  *(void *)(a2 + 32) = mimosa::v2::varint::sign_transform(v18);
  if (((unint64_t)a3 & 0x100000000000) != 0) {
    goto LABEL_16;
  }
LABEL_8:
  if ((a3 & 0x80000000) == 0)
  {
LABEL_9:
    unint64_t v10 = *(void *)(a2 + 144);
    goto LABEL_18;
  }
LABEL_17:
  unint64_t v21 = mimosa::v2::parse_varint(v6, a5, a3);
  v6 += v22;
  unint64_t v10 = mimosa::v2::varint::sign_transform(v21);
  *(void *)(a2 + 144) = v10;
LABEL_18:
  *(void *)(a2 + 144) = v10 + *(void *)(a2 + 24);
  if ((a3 & 0x80000) == 0)
  {
    if (((unint64_t)a3 & 0x200000000000) == 0) {
      goto LABEL_20;
    }
LABEL_23:
    __int16 v26 = *v6++;
    *(_WORD *)(a2 + 160) = v26 | 0x100;
    if (((unint64_t)a3 & 0x100000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_24;
  }
  unint64_t v24 = mimosa::v2::parse_varint(v6, a5, a3);
  v6 += v25;
  *(void *)(a2 + 152) = mimosa::v2::varint::sign_transform(v24);
  if (((unint64_t)a3 & 0x200000000000) != 0) {
    goto LABEL_23;
  }
LABEL_20:
  if (((unint64_t)a3 & 0x100000000) == 0)
  {
LABEL_21:
    unint64_t v23 = *(void *)(a2 + 232);
    goto LABEL_25;
  }
LABEL_24:
  unint64_t v27 = mimosa::v2::parse_varint(v6, a5, a3);
  v6 += v28;
  unint64_t v23 = mimosa::v2::varint::sign_transform(v27);
  *(void *)(a2 + 232) = v23;
LABEL_25:
  *(void *)(a2 + 232) = v23 + *(void *)(a2 + 24);
  if ((a3 & 0x40000) == 0)
  {
    if (((unint64_t)a3 & 0x400000000000) == 0) {
      goto LABEL_27;
    }
LABEL_30:
    __int16 v32 = *v6++;
    *(_WORD *)(a2 + 248) = v32 | 0x100;
    if (((unint64_t)a3 & 0x200000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_31;
  }
  unint64_t v30 = mimosa::v2::parse_varint(v6, a5, a3);
  v6 += v31;
  *(void *)(a2 + 240) = mimosa::v2::varint::sign_transform(v30);
  if (((unint64_t)a3 & 0x400000000000) != 0) {
    goto LABEL_30;
  }
LABEL_27:
  if (((unint64_t)a3 & 0x200000000) == 0)
  {
LABEL_28:
    unint64_t v29 = *(void *)(a2 + 312);
    goto LABEL_32;
  }
LABEL_31:
  unint64_t v33 = mimosa::v2::parse_varint(v6, a5, a3);
  v6 += v34;
  unint64_t v29 = mimosa::v2::varint::sign_transform(v33);
  *(void *)(a2 + 312) = v29;
LABEL_32:
  *(void *)(a2 + 312) = v29 + *(void *)(a2 + 24);
  if ((a3 & 0x100000) == 0)
  {
    if (((unint64_t)a3 & 0x800000000000) == 0) {
      goto LABEL_34;
    }
LABEL_37:
    __int16 v38 = *v6++;
    *(_WORD *)(a2 + 328) = v38 | 0x100;
    if (((unint64_t)a3 & 0x400000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_38;
  }
  unint64_t v36 = mimosa::v2::parse_varint(v6, a5, a3);
  v6 += v37;
  *(void *)(a2 + 320) = mimosa::v2::varint::sign_transform(v36);
  if (((unint64_t)a3 & 0x800000000000) != 0) {
    goto LABEL_37;
  }
LABEL_34:
  if (((unint64_t)a3 & 0x400000000) == 0)
  {
LABEL_35:
    unint64_t v35 = *(void *)(a2 + 360);
    goto LABEL_39;
  }
LABEL_38:
  unint64_t v39 = mimosa::v2::parse_varint(v6, a5, a3);
  v6 += v40;
  unint64_t v35 = mimosa::v2::varint::sign_transform(v39);
  *(void *)(a2 + 360) = v35;
LABEL_39:
  *(void *)(a2 + 360) = v35 + *(void *)(a2 + 24);
  if (((unint64_t)a3 & 0x800000000) == 0)
  {
    if (((unint64_t)a3 & 0x1000000000000) == 0) {
      goto LABEL_41;
    }
LABEL_44:
    __int16 v44 = *v6++;
    *(_WORD *)(a2 + 376) = v44 | 0x100;
    if (((unint64_t)a3 & 0x1000000000) == 0) {
      goto LABEL_42;
    }
    goto LABEL_45;
  }
  unint64_t v42 = mimosa::v2::parse_varint(v6, a5, a3);
  v6 += v43;
  *(void *)(a2 + 368) = mimosa::v2::varint::sign_transform(v42);
  if (((unint64_t)a3 & 0x1000000000000) != 0) {
    goto LABEL_44;
  }
LABEL_41:
  if (((unint64_t)a3 & 0x1000000000) == 0)
  {
LABEL_42:
    unint64_t v41 = *(void *)(a2 + 392);
    goto LABEL_46;
  }
LABEL_45:
  unint64_t v45 = mimosa::v2::parse_varint(v6, a5, a3);
  v6 += v46;
  unint64_t v41 = mimosa::v2::varint::sign_transform(v45);
  *(void *)(a2 + 392) = v41;
LABEL_46:
  *(void *)(a2 + 392) = v41 + *(void *)(a2 + 24);
  if ((a3 & 0x400000) == 0)
  {
    if (((unint64_t)a3 & 0x2000000000000) == 0) {
      goto LABEL_48;
    }
LABEL_51:
    __int16 v50 = *v6++;
    *(_WORD *)(a2 + 408) = v50 | 0x100;
    if (((unint64_t)a3 & 0x4000000000000) == 0) {
      goto LABEL_49;
    }
    goto LABEL_52;
  }
  unint64_t v48 = mimosa::v2::parse_varint(v6, a5, a3);
  v6 += v49;
  *(void *)(a2 + 400) = mimosa::v2::varint::sign_transform(v48);
  if (((unint64_t)a3 & 0x2000000000000) != 0) {
    goto LABEL_51;
  }
LABEL_48:
  if (((unint64_t)a3 & 0x4000000000000) == 0)
  {
LABEL_49:
    unint64_t v47 = *(void *)(a2 + 520);
    goto LABEL_53;
  }
LABEL_52:
  unint64_t v51 = mimosa::v2::parse_varint(v6, a5, a3);
  v6 += v52;
  unint64_t v47 = mimosa::v2::varint::sign_transform(v51);
  *(void *)(a2 + 520) = v47;
LABEL_53:
  *(void *)(a2 + 520) = v47 + *(void *)(a2 + 24);
  if (((unint64_t)a3 & 0x8000000000000) != 0)
  {
    unint64_t v54 = mimosa::v2::parse_varint(v6, a5, a3);
    v6 += v55;
    *(void *)(a2 + 528) = mimosa::v2::varint::sign_transform(v54);
    if (((unint64_t)a3 & 0x10000000000000) == 0)
    {
LABEL_55:
      if (((unint64_t)a3 & 0x8000000000) == 0) {
        goto LABEL_56;
      }
LABEL_60:
      __int16 v57 = *v6++;
      *(_WORD *)(a2 + 544) = v57 | 0x100;
      if ((a3 & 8) == 0) {
        goto LABEL_57;
      }
      goto LABEL_61;
    }
  }
  else if (((unint64_t)a3 & 0x10000000000000) == 0)
  {
    goto LABEL_55;
  }
  __int16 v56 = *v6++;
  *(_WORD *)(a2 + 536) = v56 | 0x100;
  if (((unint64_t)a3 & 0x8000000000) != 0) {
    goto LABEL_60;
  }
LABEL_56:
  if ((a3 & 8) == 0)
  {
LABEL_57:
    unsigned int v53 = a1[2];
    goto LABEL_62;
  }
LABEL_61:
  unsigned int v58 = *v6++;
  unsigned int v53 = v58;
  a1[2] = v58;
LABEL_62:
  std::vector<mimosa::v2::OpticalSamplesV1SubpacketState::Patch::ADCDelta>::resize(a2 + 120, v53);
  if (((unsigned __int16)a3 & 0x2000) != 0)
  {
    unsigned int v60 = *v6++;
    unsigned int v59 = v60;
    a1[3] = v60;
  }
  else
  {
    unsigned int v59 = a1[3];
  }
  __int16 v61 = a1 + 2;
  std::vector<mimosa::v2::OpticalSamplesV1SubpacketState::Patch::ADCDelta>::resize(a2 + 168, v59);
  if ((a3 & 0x80) != 0)
  {
    __int16 v63 = (uint64_t *)(a2 + 88);
    std::optional<std::vector<mimosa::v2::OpticalSamplesV2SubpacketState::Patch::Sample>>::emplace[abi:ne180100]<unsigned char &,void>(a2 + 88, a1 + 2);
    uint64_t v65 = *(void *)(a2 + 88);
    uint64_t v64 = *(void *)(a2 + 96);
    if (v65 != v64)
    {
      uint64_t v66 = v65 + 16;
      while (1)
      {
        __int16 v67 = *(_WORD *)v6;
        if (*(_WORD *)v6) {
          break;
        }
        v6 += 2;
        if ((v67 & 2) != 0) {
          goto LABEL_72;
        }
LABEL_73:
        if ((v67 & 4) != 0)
        {
          __int16 v72 = *(_WORD *)v6;
          v6 += 2;
          *(_WORD *)(v66 - 8) = v72;
          *(unsigned char *)(v66 - 6) = 1;
          if ((v67 & 8) == 0)
          {
LABEL_75:
            if ((v67 & 0x10) == 0) {
              goto LABEL_76;
            }
            goto LABEL_88;
          }
        }
        else if ((v67 & 8) == 0)
        {
          goto LABEL_75;
        }
        __int16 v73 = *v6++;
        *(_WORD *)(v66 + 6) = v73 | 0x100;
        if ((v67 & 0x10) == 0)
        {
LABEL_76:
          if ((v67 & 0x20) == 0) {
            goto LABEL_77;
          }
          goto LABEL_89;
        }
LABEL_88:
        __int16 v74 = *v6++;
        *(_WORD *)(v66 + 8) = v74 | 0x100;
        if ((v67 & 0x20) == 0)
        {
LABEL_77:
          if ((v67 & 0x100) == 0) {
            goto LABEL_78;
          }
          goto LABEL_90;
        }
LABEL_89:
        __int16 v75 = *(_WORD *)v6;
        v6 += 2;
        *(_WORD *)(v66 - 4) = v75;
        *(unsigned char *)(v66 - 2) = 1;
        if ((v67 & 0x100) == 0)
        {
LABEL_78:
          if ((v67 & 0x400) == 0) {
            goto LABEL_79;
          }
          goto LABEL_91;
        }
LABEL_90:
        __int16 v76 = *(_WORD *)v6;
        v6 += 2;
        *(_WORD *)uint64_t v66 = v76;
        *(unsigned char *)(v66 + 2) = 1;
        if ((v67 & 0x400) == 0)
        {
LABEL_79:
          if ((v67 & 0x80) == 0) {
            goto LABEL_80;
          }
          goto LABEL_92;
        }
LABEL_91:
        __int16 v77 = *v6++;
        *(_WORD *)(v66 + 14) = v77 | 0x100;
        if ((v67 & 0x80) == 0)
        {
LABEL_80:
          if ((v67 & 0x800) == 0) {
            goto LABEL_81;
          }
          goto LABEL_93;
        }
LABEL_92:
        __int16 v78 = *v6++;
        *(_WORD *)(v66 + 10) = v78 | 0x100;
        if ((v67 & 0x800) == 0)
        {
LABEL_81:
          if ((v67 & 0x40) != 0) {
            goto LABEL_94;
          }
          goto LABEL_82;
        }
LABEL_93:
        __int16 v79 = *v6++;
        *(_WORD *)(v66 + 16) = v79 | 0x100;
        if ((v67 & 0x40) != 0)
        {
LABEL_94:
          __int16 v80 = *v6++;
          *(_WORD *)(v66 + 4) = v80 | 0x100;
          if ((v67 & 0x200) == 0) {
            goto LABEL_84;
          }
LABEL_83:
          __int16 v70 = *v6++;
          *(_WORD *)(v66 + 12) = v70 | 0x100;
          goto LABEL_84;
        }
LABEL_82:
        if ((v67 & 0x200) != 0) {
          goto LABEL_83;
        }
LABEL_84:
        uint64_t v71 = v66 + 18;
        v66 += 34;
        if (v71 == v64) {
          goto LABEL_96;
        }
      }
      __int16 v68 = *((_WORD *)v6 + 1);
      v6 += 4;
      *(_WORD *)(v66 - 12) = v68;
      *(unsigned char *)(v66 - 10) = 1;
      if ((v67 & 2) == 0) {
        goto LABEL_73;
      }
LABEL_72:
      __int16 v69 = *(_WORD *)v6;
      v6 += 2;
      *(_WORD *)(v66 - 16) = v69;
      *(unsigned char *)(v66 - 14) = 1;
      goto LABEL_73;
    }
LABEL_96:
    if (((unsigned __int16)a3 & 0x100) == 0)
    {
      if (*v61)
      {
        uint64_t v81 = *v63;
        int v82 = *(_DWORD *)(*v63 + 4);
        if ((v82 & 0xFF0000) != 0)
        {
          for (uint64_t i = *(void *)(a2 + 96); v81 != i; v81 += 34)
          {
            *(_WORD *)(v81 + 4) = v82;
            *(unsigned char *)(v81 + 6) = 1;
          }
        }
      }
    }
  }
  unint64_t v84 = *(unint64_t **)(a2 + 120);
  unsigned __int8 v85 = *(unint64_t **)(a2 + 128);
  if (v84 != v85)
  {
    unint64_t v86 = v84 + 2;
    do
    {
      unint64_t v87 = mimosa::v2::parse_varint(v6, a5, v62);
      unsigned __int8 v89 = v88;
      *(v86 - 2) = mimosa::v2::varint::sign_transform(v87);
      unint64_t v90 = v86 - 2;
      unsigned __int8 v91 = &v6[v89];
      unint64_t v93 = mimosa::v2::parse_varint(v91, a5, v92);
      char v6 = &v91[v94];
      *(v86 - std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = mimosa::v2::varint::sign_transform(v93);
      if (!a1[1])
      {
        unint64_t v95 = mimosa::v2::parse_varint(v6, a5, v62);
        v6 += v96;
        *unint64_t v86 = mimosa::v2::varint::sign_transform(v95);
      }
      v86 += 3;
    }
    while (v90 + 3 != v85);
  }
  if (((unsigned __int16)a3 & 0x800) != 0)
  {
    if ((a3 & 0x2000000) != 0)
    {
      std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>::vector(&v145, *v6);
      if (*(unsigned char *)(a2 + 224)) {
        std::__variant_detail::__dtor<std::__variant_detail::__traits<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>,unsigned char>,(std::__variant_detail::_Trait)1>::~__dtor(a2 + 192);
      }
      unsigned __int8 v99 = v145;
      *(void *)(a2 + 192) = v145;
      char v100 = (_WORD *)v146;
      *(_OWORD *)(a2 + 200) = v146;
      *(_DWORD *)(a2 + 216) = 0;
      *(unsigned char *)(a2 + 224) = 1;
      ++v6;
      while (v99 != v100)
      {
        *unsigned __int8 v99 = *(_WORD *)v6;
        v99[1] = *((_WORD *)v6 + 1);
        *((unsigned char *)v99 + 4) = v6[4];
        *((unsigned char *)v99 + std::__function::__value_func<BOOL ()(mimosa::Metadata const&)>::~__value_func[abi:ne180100]((void *)this + 5) = v6[5] != 0;
        v6 += 6;
        v99 += 3;
      }
    }
    else
    {
      LOBYTE(v14std::__function::__value_func<BOOL ()(mimosa::Metadata const&)>::~__value_func[abi:ne180100]((void *)this + 5) = 0;
      char v98 = *v6++;
      char v97 = v98;
      LOBYTE(v14std::__function::__value_func<BOOL ()(mimosa::Metadata const&)>::~__value_func[abi:ne180100]((void *)this + 5) = v98;
      if (*(unsigned char *)(a2 + 224))
      {
        std::variant<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>,unsigned char>::operator=[abi:ne180100]<unsigned char const&,0,unsigned char,1ul,0>(a2 + 192, &v145);
      }
      else
      {
        *(unsigned char *)(a2 + 192) = v97;
        *(_DWORD *)(a2 + 216) = 1;
        *(unsigned char *)(a2 + 224) = 1;
      }
    }
  }
  char v101 = *(unint64_t **)(a2 + 168);
  unint64_t v102 = *(unint64_t **)(a2 + 176);
  while (v101 != v102)
  {
    unint64_t v103 = mimosa::v2::parse_varint(v6, a5, v62);
    unsigned __int8 v105 = &v6[v104];
    *char v101 = mimosa::v2::varint::sign_transform(v103);
    unint64_t v107 = mimosa::v2::parse_varint(v105, a5, v106);
    __int16 v109 = &v105[v108];
    v101[1] = mimosa::v2::varint::sign_transform(v107);
    unint64_t v111 = mimosa::v2::parse_varint(v109, a5, v110);
    char v6 = &v109[v112];
    v101[2] = mimosa::v2::varint::sign_transform(v111);
    v101 += 3;
  }
  if ((a3 & 4) != 0)
  {
    unint64_t v113 = mimosa::v2::parse_varint(v6, a5, v62);
    v6 += v114;
    *(void *)(a2 + 256) = v113;
    *(unsigned char *)(a2 + 264) = 1;
    if (((unint64_t)a3 & 0x2000000000) == 0)
    {
LABEL_121:
      if (((unsigned __int16)a3 & 0x4000) == 0) {
        goto LABEL_122;
      }
      goto LABEL_129;
    }
  }
  else if (((unint64_t)a3 & 0x2000000000) == 0)
  {
    goto LABEL_121;
  }
  uint64_t v115 = *(void *)v6;
  v6 += 8;
  *(void *)(a2 + 272) = v115;
  *(unsigned char *)(a2 + 280) = 1;
  if (((unsigned __int16)a3 & 0x4000) == 0)
  {
LABEL_122:
    if ((a3 & 0x200000) == 0) {
      goto LABEL_123;
    }
    goto LABEL_130;
  }
LABEL_129:
  int v116 = *(_DWORD *)v6;
  v6 += 4;
  *(_DWORD *)(a2 + 288) = v116;
  *(unsigned char *)(a2 + 292) = 1;
  if ((a3 & 0x200000) == 0)
  {
LABEL_123:
    if (((unsigned __int16)a3 & 0x1000) == 0) {
      goto LABEL_124;
    }
    goto LABEL_131;
  }
LABEL_130:
  int v117 = *(_DWORD *)v6;
  v6 += 4;
  *(_DWORD *)(a2 + 296) = v117;
  *(unsigned char *)(a2 + 300) = 1;
  if (((unsigned __int16)a3 & 0x1000) == 0)
  {
LABEL_124:
    if ((a3 & 0x40000000) == 0) {
      goto LABEL_125;
    }
    goto LABEL_132;
  }
LABEL_131:
  __int16 v118 = *(_WORD *)v6;
  v6 += 2;
  *(_WORD *)(a2 + 304) = v118;
  *(unsigned char *)(a2 + 306) = 1;
  if ((a3 & 0x40000000) == 0)
  {
LABEL_125:
    if (((unsigned __int16)a3 & 0x200) == 0) {
      goto LABEL_142;
    }
    goto LABEL_133;
  }
LABEL_132:
  __int16 v119 = *v6++;
  *(_WORD *)(a2 + 308) = v119 | 0x100;
  if (((unsigned __int16)a3 & 0x200) == 0) {
    goto LABEL_142;
  }
LABEL_133:
  if ((a3 & 0x800000) != 0)
  {
    std::vector<unsigned short>::vector(&v145, *v61);
    if (*(unsigned char *)(a2 + 80)) {
      std::__variant_detail::__dtor<std::__variant_detail::__traits<std::vector<unsigned short>,unsigned char>,(std::__variant_detail::_Trait)1>::~__dtor(a2 + 48);
    }
    unint64_t v122 = v145;
    *(void *)(a2 + 48) = v145;
    unsigned __int8 v123 = (_WORD *)v146;
    *(_OWORD *)(a2 + 56) = v146;
    *(_DWORD *)(a2 + 72) = 0;
    *(unsigned char *)(a2 + 80) = 1;
    while (v122 != v123)
    {
      __int16 v124 = *(_WORD *)v6;
      v6 += 2;
      *v122++ = v124;
    }
  }
  else
  {
    LOBYTE(v14std::__function::__value_func<BOOL ()(mimosa::Metadata const&)>::~__value_func[abi:ne180100]((void *)this + 5) = 0;
    char v121 = *v6++;
    char v120 = v121;
    LOBYTE(v14std::__function::__value_func<BOOL ()(mimosa::Metadata const&)>::~__value_func[abi:ne180100]((void *)this + 5) = v121;
    if (*(unsigned char *)(a2 + 80))
    {
      std::variant<std::vector<unsigned short>,unsigned char>::operator=[abi:ne180100]<unsigned char const&,0,unsigned char,1ul,0>(a2 + 48, &v145);
    }
    else
    {
      *(unsigned char *)(a2 + 48) = v120;
      *(_DWORD *)(a2 + 72) = 1;
      *(unsigned char *)(a2 + 80) = 1;
    }
  }
LABEL_142:
  if ((a3 & 0x4000000) != 0)
  {
    __int16 v135 = *v6++;
    *(_WORD *)(a2 + 352) = v135 | 0x100;
    if ((a3 & 0x20000) == 0)
    {
LABEL_144:
      if (((unsigned __int16)a3 & 0x400) == 0) {
        goto LABEL_145;
      }
      goto LABEL_158;
    }
  }
  else if ((a3 & 0x20000) == 0)
  {
    goto LABEL_144;
  }
  __int16 v136 = *v6++;
  *(_WORD *)(a2 + 354) = v136 | 0x100;
  if (((unsigned __int16)a3 & 0x400) == 0)
  {
LABEL_145:
    if (((unint64_t)a3 & 0x40000000000) == 0) {
      goto LABEL_146;
    }
    goto LABEL_159;
  }
LABEL_158:
  uint64_t v137 = *(void *)v6;
  v6 += 8;
  *(void *)(a2 + 336) = v137;
  *(unsigned char *)(a2 + 344) = 1;
  if (((unint64_t)a3 & 0x40000000000) == 0)
  {
LABEL_146:
    if ((a3 & 2) == 0) {
      goto LABEL_147;
    }
    goto LABEL_160;
  }
LABEL_159:
  __int16 v138 = *(_WORD *)v6;
  v6 += 2;
  *(_WORD *)(a2 + 384) = v138;
  *(unsigned char *)(a2 + 386) = 1;
  if ((a3 & 2) == 0)
  {
LABEL_147:
    if ((a3 & 0x10000) == 0) {
      goto LABEL_148;
    }
    goto LABEL_161;
  }
LABEL_160:
  unint64_t v139 = mimosa::v2::parse_varint(v6, a5, v62);
  v6 += v140;
  *(_DWORD *)(a2 + 388) = mimosa::v2::varint::sign_transform(v139);
  if ((a3 & 0x10000) == 0)
  {
LABEL_148:
    if ((a3 & 0x40) != 0) {
      goto LABEL_149;
    }
    goto LABEL_150;
  }
LABEL_161:
  if ((a3 & 0x1000000) != 0)
  {
    uint64_t v143 = 0;
    *(void *)(a2 + 488) = 0;
    *(void *)(a2 + 496) = 0;
    *(_WORD *)(a2 + 504) = 0;
    *(_DWORD *)(a2 + 508) = 0;
    *(unsigned char *)(a2 + 512) = 1;
    do
    {
      *(_WORD *)(a2 + 488 + v143) = *(_WORD *)&v6[v143];
      v143 += 2;
    }
    while (v143 != 18);
    v6 += 18;
    if ((a3 & 0x40) == 0) {
      goto LABEL_150;
    }
    goto LABEL_149;
  }
  char v142 = *v6++;
  char v141 = v142;
  if (!*(unsigned char *)(a2 + 512))
  {
    *(unsigned char *)(a2 + 488) = v141;
    *(_DWORD *)(a2 + 508) = 1;
    *(unsigned char *)(a2 + 512) = 1;
    if ((a3 & 0x40) == 0) {
      goto LABEL_150;
    }
    goto LABEL_149;
  }
  if (*(_DWORD *)(a2 + 508) != 1) {
    *(_DWORD *)(a2 + 508) = 1;
  }
  *(unsigned char *)(a2 + 488) = v141;
  if ((a3 & 0x40) != 0)
  {
LABEL_149:
    __int16 v125 = *(_WORD *)v6;
    v6 += 2;
    *(_WORD *)(a2 + 516) = v125;
    *(unsigned char *)(a2 + 518) = 1;
  }
LABEL_150:
  unint64_t result = mimosa::v2::parse_varint(v6, a5, v62);
  unint64_t v128 = result;
  uint64_t v129 = 0;
  char v131 = &v6[v130];
  uint64_t v132 = a2 + 416;
  do
  {
    if (v128)
    {
      unint64_t v133 = mimosa::v2::parse_varint(v131, a5, v127);
      v131 += v134;
      unint64_t result = mimosa::v2::varint::sign_transform(v133);
      *(void *)(v132 + v12std::__function::__value_func<BOOL ()(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,double)>::~__value_func[abi:ne180100]((void *)this + 9) = result;
    }
    v128 >>= 1;
    v129 += 8;
  }
  while (v129 != 72);
  if (v131 != a5)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "something went wrong during patch decoding");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return result;
}

void sub_22278058C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__dtor<std::__variant_detail::__traits<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7>,(std::__variant_detail::_Trait)1>::~__dtor(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 552);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26D4E4308[v2])(&v4, a1);
  }
  *(_DWORD *)(a1 + 552) = -1;
  return a1;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN6mimosa2v211PacketState7PatchV1ENSA_7PatchV2ENSA_7PatchV3ENSA_7PatchV4ENSA_7PatchV5ENSA_7PatchV6ENSA_7PatchV7EEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSB_SC_SD_SE_SF_SG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 184)) {
    std::__variant_detail::__dtor<std::__variant_detail::__traits<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>,unsigned char>,(std::__variant_detail::_Trait)1>::~__dtor(a2 + 152);
  }
  BOOL v3 = *(void **)(a2 + 128);
  if (v3)
  {
    *(void *)(a2 + 136) = v3;
    operator delete(v3);
  }
  char v4 = *(void **)(a2 + 80);
  if (v4)
  {
    *(void *)(a2 + 88) = v4;
    operator delete(v4);
  }
  if (*(unsigned char *)(a2 + 72))
  {
    size_t v5 = *(void **)(a2 + 48);
    if (v5)
    {
      *(void *)(a2 + 56) = v5;
      operator delete(v5);
    }
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN6mimosa2v211PacketState7PatchV1ENSA_7PatchV2ENSA_7PatchV3ENSA_7PatchV4ENSA_7PatchV5ENSA_7PatchV6ENSA_7PatchV7EEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSB_SC_SD_SE_SF_SG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 328)) {
    std::__variant_detail::__dtor<std::__variant_detail::__traits<std::vector<unsigned short>,unsigned char>,(std::__variant_detail::_Trait)1>::~__dtor(a2 + 296);
  }
  if (*(unsigned char *)(a2 + 184)) {
    std::__variant_detail::__dtor<std::__variant_detail::__traits<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>,unsigned char>,(std::__variant_detail::_Trait)1>::~__dtor(a2 + 152);
  }
  BOOL v3 = *(void **)(a2 + 128);
  if (v3)
  {
    *(void *)(a2 + 136) = v3;
    operator delete(v3);
  }
  char v4 = *(void **)(a2 + 80);
  if (v4)
  {
    *(void *)(a2 + 88) = v4;
    operator delete(v4);
  }
  if (*(unsigned char *)(a2 + 72))
  {
    size_t v5 = *(void **)(a2 + 48);
    if (v5)
    {
      *(void *)(a2 + 56) = v5;
      operator delete(v5);
    }
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN6mimosa2v211PacketState7PatchV1ENSA_7PatchV2ENSA_7PatchV3ENSA_7PatchV4ENSA_7PatchV5ENSA_7PatchV6ENSA_7PatchV7EEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSB_SC_SD_SE_SF_SG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 328)) {
    std::__variant_detail::__dtor<std::__variant_detail::__traits<std::vector<unsigned short>,unsigned char>,(std::__variant_detail::_Trait)1>::~__dtor(a2 + 296);
  }
  if (*(unsigned char *)(a2 + 184)) {
    std::__variant_detail::__dtor<std::__variant_detail::__traits<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>,unsigned char>,(std::__variant_detail::_Trait)1>::~__dtor(a2 + 152);
  }
  BOOL v3 = *(void **)(a2 + 128);
  if (v3)
  {
    *(void *)(a2 + 136) = v3;
    operator delete(v3);
  }
  char v4 = *(void **)(a2 + 80);
  if (v4)
  {
    *(void *)(a2 + 88) = v4;
    operator delete(v4);
  }
  if (*(unsigned char *)(a2 + 72))
  {
    size_t v5 = *(void **)(a2 + 48);
    if (v5)
    {
      *(void *)(a2 + 56) = v5;
      operator delete(v5);
    }
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN6mimosa2v211PacketState7PatchV1ENSA_7PatchV2ENSA_7PatchV3ENSA_7PatchV4ENSA_7PatchV5ENSA_7PatchV6ENSA_7PatchV7EEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSB_SC_SD_SE_SF_SG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 328)) {
    std::__variant_detail::__dtor<std::__variant_detail::__traits<std::vector<unsigned short>,unsigned char>,(std::__variant_detail::_Trait)1>::~__dtor(a2 + 296);
  }
  if (*(unsigned char *)(a2 + 184)) {
    std::__variant_detail::__dtor<std::__variant_detail::__traits<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>,unsigned char>,(std::__variant_detail::_Trait)1>::~__dtor(a2 + 152);
  }
  BOOL v3 = *(void **)(a2 + 128);
  if (v3)
  {
    *(void *)(a2 + 136) = v3;
    operator delete(v3);
  }
  char v4 = *(void **)(a2 + 80);
  if (v4)
  {
    *(void *)(a2 + 88) = v4;
    operator delete(v4);
  }
  if (*(unsigned char *)(a2 + 72))
  {
    size_t v5 = *(void **)(a2 + 48);
    if (v5)
    {
      *(void *)(a2 + 56) = v5;
      operator delete(v5);
    }
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN6mimosa2v211PacketState7PatchV1ENSA_7PatchV2ENSA_7PatchV3ENSA_7PatchV4ENSA_7PatchV5ENSA_7PatchV6ENSA_7PatchV7EEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSB_SC_SD_SE_SF_SG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 328)) {
    std::__variant_detail::__dtor<std::__variant_detail::__traits<std::vector<unsigned short>,unsigned char>,(std::__variant_detail::_Trait)1>::~__dtor(a2 + 296);
  }
  if (*(unsigned char *)(a2 + 184)) {
    std::__variant_detail::__dtor<std::__variant_detail::__traits<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>,unsigned char>,(std::__variant_detail::_Trait)1>::~__dtor(a2 + 152);
  }
  BOOL v3 = *(void **)(a2 + 128);
  if (v3)
  {
    *(void *)(a2 + 136) = v3;
    operator delete(v3);
  }
  char v4 = *(void **)(a2 + 80);
  if (v4)
  {
    *(void *)(a2 + 88) = v4;
    operator delete(v4);
  }
  if (*(unsigned char *)(a2 + 72))
  {
    size_t v5 = *(void **)(a2 + 48);
    if (v5)
    {
      *(void *)(a2 + 56) = v5;
      operator delete(v5);
    }
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN6mimosa2v211PacketState7PatchV1ENSA_7PatchV2ENSA_7PatchV3ENSA_7PatchV4ENSA_7PatchV5ENSA_7PatchV6ENSA_7PatchV7EEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSB_SC_SD_SE_SF_SG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 224)) {
    std::__variant_detail::__dtor<std::__variant_detail::__traits<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>,unsigned char>,(std::__variant_detail::_Trait)1>::~__dtor(a2 + 192);
  }
  BOOL v3 = *(void **)(a2 + 168);
  if (v3)
  {
    *(void *)(a2 + 176) = v3;
    operator delete(v3);
  }
  char v4 = *(void **)(a2 + 120);
  if (v4)
  {
    *(void *)(a2 + 128) = v4;
    operator delete(v4);
  }
  if (*(unsigned char *)(a2 + 112))
  {
    size_t v5 = *(void **)(a2 + 88);
    if (v5)
    {
      *(void *)(a2 + 96) = v5;
      operator delete(v5);
    }
  }
  if (*(unsigned char *)(a2 + 80))
  {
    std::__variant_detail::__dtor<std::__variant_detail::__traits<std::vector<unsigned short>,unsigned char>,(std::__variant_detail::_Trait)1>::~__dtor(a2 + 48);
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN6mimosa2v211PacketState7PatchV1ENSA_7PatchV2ENSA_7PatchV3ENSA_7PatchV4ENSA_7PatchV5ENSA_7PatchV6ENSA_7PatchV7EEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSB_SC_SD_SE_SF_SG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 224)) {
    std::__variant_detail::__dtor<std::__variant_detail::__traits<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>,unsigned char>,(std::__variant_detail::_Trait)1>::~__dtor(a2 + 192);
  }
  BOOL v3 = *(void **)(a2 + 168);
  if (v3)
  {
    *(void *)(a2 + 176) = v3;
    operator delete(v3);
  }
  char v4 = *(void **)(a2 + 120);
  if (v4)
  {
    *(void *)(a2 + 128) = v4;
    operator delete(v4);
  }
  if (*(unsigned char *)(a2 + 112))
  {
    size_t v5 = *(void **)(a2 + 88);
    if (v5)
    {
      *(void *)(a2 + 96) = v5;
      operator delete(v5);
    }
  }
  if (*(unsigned char *)(a2 + 80))
  {
    std::__variant_detail::__dtor<std::__variant_detail::__traits<std::vector<unsigned short>,unsigned char>,(std::__variant_detail::_Trait)1>::~__dtor(a2 + 48);
  }
}

uint64_t std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7>>::__emplace[abi:ne180100]<0ul>(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 552);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26D4E4308[v2])(&v4, a1);
  }
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 552) = 0;
  return a1;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7>>::__emplace[abi:ne180100]<1ul>(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 552);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26D4E4308[v2])(&v4, a1);
  }
  *(void *)(a1 + 464) = 0;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 552) = 1;
  return a1;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7>>::__emplace[abi:ne180100]<2ul>(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 552);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26D4E4308[v2])(&v4, a1);
  }
  *(void *)(a1 + 352) = 0;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 552) = 2;
  return a1;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7>>::__emplace[abi:ne180100]<3ul>(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 552);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26D4E4308[v2])(&v4, a1);
  }
  *(void *)(a1 + 480) = 0;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 552) = 3;
  return a1;
}

unsigned int *std::__variant_detail::__assignment<std::__variant_detail::__traits<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7>>::__emplace[abi:ne180100]<4ul>(unsigned int *a1)
{
  uint64_t v2 = a1[138];
  if (v2 != -1) {
    ((void (*)(char *, unsigned int *))off_26D4E4308[v2])(&v4, a1);
  }
  bzero(a1, 0x208uLL);
  a1[138] = 4;
  return a1;
}

unsigned int *std::__variant_detail::__assignment<std::__variant_detail::__traits<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7>>::__emplace[abi:ne180100]<5ul>(unsigned int *a1)
{
  uint64_t v2 = a1[138];
  if (v2 != -1) {
    ((void (*)(char *, unsigned int *))off_26D4E4308[v2])(&v4, a1);
  }
  bzero(a1, 0x208uLL);
  a1[138] = 5;
  return a1;
}

unsigned int *std::__variant_detail::__assignment<std::__variant_detail::__traits<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7>>::__emplace[abi:ne180100]<6ul>(unsigned int *a1)
{
  uint64_t v2 = a1[138];
  if (v2 != -1) {
    ((void (*)(char *, unsigned int *))off_26D4E4308[v2])(&v4, a1);
  }
  bzero(a1, 0x228uLL);
  a1[138] = 6;
  return a1;
}

uint64_t mimosa::v2::PacketState::update(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1;
  uint64_t v2 = *(unsigned int *)(a2 + 552);
  if (v2 == -1) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  size_t v5 = &v4;
  return ((uint64_t (*)(uint64_t **))off_26D4E4340[v2])(&v5);
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t *v5;

  uint64_t v4 = a1;
  uint64_t v2 = *(unsigned int *)(a2 + 320);
  if (v2 == -1) {
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  size_t v5 = &v4;
  return ((uint64_t (*)(uint64_t **))off_26D4E4378[v2])(&v5);
}

double mimosa::v2::PacketState::update_@<D0>(mimosa::v2::PacketState *this@<X0>, const mimosa::v2::PacketState::PatchV1 *a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  char v6 = (_OWORD *)(a3 + 16);
  *(unsigned char *)(a3 + 12) = 0;
  *(_DWORD *)(a3 + 24) = 0;
  *(unsigned char *)(a3 + 28) = 0;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(void *)(a3 + 6std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = 0;
  *(_OWORD *)(a3 + 72) = 0u;
  *(_OWORD *)(a3 + 88) = 0u;
  *(_OWORD *)(a3 + 104) = 0u;
  *(_OWORD *)(a3 + 120) = 0u;
  *(void *)(a3 + 136) = 0;
  *(void *)a3 = mimosa::v2::ContainerHeaderState::update((uint64_t)this, (uint64_t)a2);
  *(void *)(a3 + 8) = v7;
  mimosa::v2::OpticalSamplesV1SubpacketState::update((mimosa::v2::PacketState *)((char *)this + 40), (const mimosa::v2::PacketState::PatchV1 *)((char *)a2 + 24), (uint64_t)&v14);
  long long v8 = v15;
  *char v6 = v14;
  uint64_t v9 = v16;
  *(_OWORD *)(a3 + 32) = v8;
  *(void *)(a3 + 48) = v9;
  mimosa::v2::AccelSubpacketState::update((mimosa::v2::PacketState *)((char *)this + 280), (const mimosa::v2::PacketState::PatchV1 *)((char *)a2 + 104), (uint64_t)&v14);
  long long v10 = v15;
  *(_OWORD *)(a3 + 56) = v14;
  uint64_t v11 = v16;
  *(_OWORD *)(a3 + 72) = v10;
  *(void *)(a3 + 88) = v11;
  mimosa::v2::AlgsResponseV1SubpacketState::update((uint64_t)this + 400, (uint64_t)a2 + 192, (uint64_t)&v14);
  long long v12 = v15;
  *(_OWORD *)(a3 + 96) = v14;
  *(_OWORD *)(a3 + 112) = v12;
  double result = *(double *)&v16;
  *(_OWORD *)(a3 + 128) = v16;
  return result;
}

void sub_222780F7C(_Unwind_Exception *a1)
{
  mimosa::PacketV1::~PacketV1(v1);
  _Unwind_Resume(a1);
}

void mimosa::PacketV1::~PacketV1(mimosa::PacketV1 *this)
{
  uint64_t v2 = (void *)*((void *)this + 9);
  if (v2)
  {
    *((void *)this + 10) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 4);
  if (v3)
  {
    *((void *)this + std::__function::__value_func<BOOL ()(mimosa::Metadata const&)>::~__value_func[abi:ne180100]((void *)this + 5) = v3;
    operator delete(v3);
  }
}

double mimosa::v2::PacketState::update_@<D0>(mimosa::v2::PacketState *this@<X0>, const mimosa::v2::PacketState::PatchV2 *a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  *(unsigned char *)(a3 + 12) = 0;
  *(void *)(a3 + 16) = 0;
  char v6 = (_OWORD *)(a3 + 16);
  *(_DWORD *)(a3 + 24) = 0;
  *(unsigned char *)(a3 + 28) = 0;
  *(_OWORD *)(a3 + 32) = 0u;
  uint64_t v7 = a3 + 32;
  *(_OWORD *)(a3 + 48) = 0u;
  *(void *)(a3 + 6std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = 0;
  *(_OWORD *)(a3 + 88) = 0u;
  *(_OWORD *)(a3 + 104) = 0u;
  *(_OWORD *)(a3 + 120) = 0u;
  *(_OWORD *)(a3 + 136) = 0u;
  *(void *)(a3 + 14std::__function::__value_func<BOOL ()(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,double)>::~__value_func[abi:ne180100]((void *)this + 9) = 0;
  *(_OWORD *)(a3 + 72) = 0u;
  uint64_t v8 = a3 + 72;
  *(void *)(a3 + 168) = 0;
  *(void *)(a3 + 176) = 0;
  *(void *)(a3 + 160) = 0;
  uint64_t v9 = (uint64_t *)(a3 + 160);
  *(_OWORD *)(a3 + 192) = 0u;
  uint64_t v10 = a3 + 192;
  *(_WORD *)(a3 + 184) = 0;
  *(_OWORD *)(a3 + 256) = 0u;
  *(_OWORD *)(a3 + 272) = 0u;
  *(_OWORD *)(a3 + 224) = 0u;
  *(_OWORD *)(a3 + 240) = 0u;
  *(_OWORD *)(a3 + 208) = 0u;
  *(void *)a3 = mimosa::v2::ContainerHeaderState::update((uint64_t)this, (uint64_t)a2);
  *(void *)(a3 + 8) = v11;
  mimosa::v2::OpticalDecoderV1SubpacketState::update((uint64_t)this + 544, (uint64_t)a2 + 272, (uint64_t)&v20);
  *(_OWORD *)(v10 - 48) = v20;
  long long v12 = (void *)*v9;
  if (*v9)
  {
    *(void *)(a3 + 168) = v12;
    operator delete(v12);
    *uint64_t v9 = 0;
    v9[1] = 0;
    v9[2] = 0;
  }
  *(_OWORD *)(a3 + 160) = v21;
  *(void *)(a3 + 176) = v22;
  *(void *)&long long v22 = 0;
  long long v21 = 0uLL;
  *(_WORD *)(a3 + 184) = WORD4(v22);
  mimosa::v2::OpticalSamplesV1SubpacketState::update((uint64_t)this + 40, (uint64_t)a2 + 24, v9, (uint64_t)&v20);
  *char v6 = v20;
  unint64_t v13 = *(void **)v7;
  if (*(void *)v7)
  {
    *(void *)(a3 + 40) = v13;
    operator delete(v13);
    *(void *)uint64_t v7 = 0;
    *(void *)(v7 + 8) = 0;
    *(void *)(v7 + 16) = 0;
  }
  *(_OWORD *)(a3 + 32) = v21;
  *(void *)(a3 + 48) = v22;
  mimosa::v2::AccelSubpacketState::update((mimosa::v2::PacketState *)((char *)this + 280), (const mimosa::v2::PacketState::PatchV2 *)((char *)a2 + 104), (uint64_t)&v20);
  *(_OWORD *)(v10 - 136) = v20;
  long long v14 = *(void **)v8;
  if (*(void *)v8)
  {
    *(void *)(a3 + 80) = v14;
    operator delete(v14);
    *(void *)uint64_t v8 = 0;
    *(void *)(v8 + 8) = 0;
    *(void *)(v8 + 16) = 0;
  }
  *(_OWORD *)(a3 + 72) = v21;
  *(void *)(a3 + 88) = v22;
  mimosa::v2::AlgsResponseV1SubpacketState::update((uint64_t)this + 400, (uint64_t)a2 + 192, (uint64_t)&v20);
  long long v15 = (_OWORD *)(v10 - 96);
  long long v16 = v21;
  *long long v15 = v20;
  v15[1] = v16;
  v15[2] = v22;
  mimosa::v2::TemperatureSubpacketState::update((uint64_t)this + 800, (uint64_t)a2 + 344, (uint64_t)&v20);
  *(_OWORD *)uint64_t v10 = v20;
  *(void *)(v10 + 16) = v21;
  mimosa::v2::WavelengthV2SubpacketState::update((uint64_t)this + 848, (uint64_t)a2 + 376, (uint64_t)&v20);
  long long v17 = v20;
  *(_OWORD *)(a3 + 232) = v21;
  double result = *(double *)&v22;
  long long v19 = v23;
  *(_OWORD *)(a3 + 248) = v22;
  *(void *)(a3 + 280) = v24;
  *(_OWORD *)(a3 + 216) = v17;
  *(_OWORD *)(a3 + 264) = v19;
  return result;
}

void sub_222781210(_Unwind_Exception *a1)
{
  mimosa::PacketV2::~PacketV2(v1);
  _Unwind_Resume(a1);
}

void mimosa::PacketV2::~PacketV2(mimosa::PacketV2 *this)
{
  uint64_t v2 = (void *)*((void *)this + 20);
  if (v2)
  {
    *((void *)this + 2std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 9);
  if (v3)
  {
    *((void *)this + 10) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 4);
  if (v4)
  {
    *((void *)this + std::__function::__value_func<BOOL ()(mimosa::Metadata const&)>::~__value_func[abi:ne180100]((void *)this + 5) = v4;
    operator delete(v4);
  }
}

double mimosa::v2::PacketState::update_@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  *(unsigned char *)(a3 + 12) = 0;
  *(void *)(a3 + 16) = 0;
  char v6 = (_OWORD *)(a3 + 16);
  *(_DWORD *)(a3 + 24) = 0;
  *(unsigned char *)(a3 + 28) = 0;
  *(_OWORD *)(a3 + 32) = 0u;
  uint64_t v7 = a3 + 32;
  *(_OWORD *)(a3 + 72) = 0u;
  uint64_t v8 = a3 + 72;
  *(_OWORD *)(a3 + 160) = 0u;
  uint64_t v9 = (uint64_t *)(a3 + 160);
  *(_OWORD *)(a3 + 48) = 0u;
  *(void *)(a3 + 6std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = 0;
  *(_OWORD *)(a3 + 88) = 0u;
  *(_OWORD *)(a3 + 104) = 0u;
  *(_OWORD *)(a3 + 120) = 0u;
  *(_OWORD *)(a3 + 136) = 0u;
  *(void *)(a3 + 14std::__function::__value_func<BOOL ()(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,double)>::~__value_func[abi:ne180100]((void *)this + 9) = 0;
  *(_OWORD *)(a3 + 176) = 0u;
  *(_DWORD *)(a3 + 19std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = 0;
  *(void *)a3 = mimosa::v2::ContainerHeaderState::update(a1, a2);
  *(void *)(a3 + 8) = v10;
  mimosa::v2::OpticalDecoderV2SubpacketState::update(a1 + 640, a2 + 272, (uint64_t)&v17);
  *(_OWORD *)(a3 + 144) = v17;
  uint64_t v11 = (void *)*v9;
  if (*v9)
  {
    *(void *)(a3 + 168) = v11;
    operator delete(v11);
    *uint64_t v9 = 0;
    v9[1] = 0;
    v9[2] = 0;
  }
  *(_OWORD *)(a3 + 160) = v18;
  double v12 = v19[1];
  *(double *)(a3 + 176) = v19[0];
  *(double *)(a3 + 184) = v12;
  *(_DWORD *)(a3 + 19std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = *(_DWORD *)((char *)&v19[1] + 7);
  mimosa::v2::OpticalSamplesV1SubpacketState::update(a1 + 40, a2 + 24, v9, (uint64_t)&v17);
  *char v6 = v17;
  unint64_t v13 = *(void **)v7;
  if (*(void *)v7)
  {
    *(void *)(a3 + 40) = v13;
    operator delete(v13);
    *(void *)uint64_t v7 = 0;
    *(void *)(v7 + 8) = 0;
    *(void *)(v7 + 16) = 0;
  }
  *(_OWORD *)(a3 + 32) = v18;
  *(double *)(a3 + 48) = v19[0];
  mimosa::v2::AccelSubpacketState::update((mimosa::v2::AccelSubpacketState *)(a1 + 280), (const mimosa::v2::AccelSubpacketState::Patch *)(a2 + 104), (uint64_t)&v17);
  *(_OWORD *)(a3 + 56) = v17;
  long long v14 = *(void **)v8;
  if (*(void *)v8)
  {
    *(void *)(a3 + 80) = v14;
    operator delete(v14);
    *(void *)uint64_t v8 = 0;
    *(void *)(v8 + 8) = 0;
    *(void *)(v8 + 16) = 0;
  }
  *(_OWORD *)(a3 + 72) = v18;
  *(double *)(a3 + 88) = v19[0];
  mimosa::v2::AlgsResponseV2SubpacketState::update(a1 + 472, a2 + 192, (uint64_t)&v17);
  long long v15 = v18;
  *(_OWORD *)(a3 + 96) = v17;
  *(_OWORD *)(a3 + 112) = v15;
  double result = v19[0];
  *(_OWORD *)(a3 + 128) = *(_OWORD *)v19;
  return result;
}

{
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  _OWORD *v16;
  long long v17;
  long long v18;
  long long v19;
  double result;
  long long v21;
  long long v22;
  long long v23;
  unsigned char v24[32];
  long long v25;
  long long v26;

  *(void *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  *(unsigned char *)(a3 + 12) = 0;
  *(void *)(a3 + 16) = 0;
  char v6 = (_OWORD *)(a3 + 16);
  *(_DWORD *)(a3 + 24) = 0;
  *(unsigned char *)(a3 + 28) = 0;
  *(_OWORD *)(a3 + 32) = 0u;
  uint64_t v7 = a3 + 32;
  *(_OWORD *)(a3 + 48) = 0u;
  *(void *)(a3 + 6std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = 0;
  *(_OWORD *)(a3 + 88) = 0u;
  *(_OWORD *)(a3 + 104) = 0u;
  *(_OWORD *)(a3 + 120) = 0u;
  *(_OWORD *)(a3 + 136) = 0u;
  *(void *)(a3 + 14std::__function::__value_func<BOOL ()(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,double)>::~__value_func[abi:ne180100]((void *)this + 9) = 0;
  *(_OWORD *)(a3 + 72) = 0u;
  uint64_t v8 = a3 + 72;
  *(_OWORD *)(a3 + 176) = 0u;
  *(_DWORD *)(a3 + 19std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = 0;
  *(_OWORD *)(a3 + 160) = 0u;
  uint64_t v9 = (uint64_t *)(a3 + 160);
  *(_OWORD *)(a3 + 200) = 0u;
  uint64_t v10 = a3 + 200;
  *(void *)(a3 + 312) = 0;
  *(_OWORD *)(a3 + 280) = 0u;
  *(_OWORD *)(a3 + 296) = 0u;
  *(_OWORD *)(a3 + 248) = 0u;
  *(_OWORD *)(a3 + 264) = 0u;
  *(_OWORD *)(a3 + 216) = 0u;
  *(_OWORD *)(a3 + 232) = 0u;
  *(void *)a3 = mimosa::v2::ContainerHeaderState::update(a1, a2);
  *(void *)(a3 + 8) = v11;
  mimosa::v2::OpticalDecoderV2SubpacketState::update(a1 + 640, a2 + 272, (uint64_t)&v22);
  *(_OWORD *)(v10 - 56) = v22;
  double v12 = (void *)*v9;
  if (*v9)
  {
    *(void *)(a3 + 168) = v12;
    operator delete(v12);
    *uint64_t v9 = 0;
    v9[1] = 0;
    v9[2] = 0;
  }
  *(_OWORD *)(a3 + 160) = v23;
  unint64_t v13 = *(void *)&v24[8];
  *(void *)(a3 + 176) = *(void *)v24;
  *(void *)(v10 - 16) = v13;
  *(_DWORD *)(v10 - std::__function::__value_func<BOOL ()(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,double)>::~__value_func[abi:ne180100]((void *)this + 9) = *(_DWORD *)&v24[15];
  mimosa::v2::OpticalSamplesV1SubpacketState::update(a1 + 40, a2 + 24, v9, (uint64_t)&v22);
  *char v6 = v22;
  long long v14 = *(void **)v7;
  if (*(void *)v7)
  {
    *(void *)(a3 + 40) = v14;
    operator delete(v14);
    *(void *)uint64_t v7 = 0;
    *(void *)(v7 + 8) = 0;
    *(void *)(v7 + 16) = 0;
  }
  *(_OWORD *)(a3 + 32) = v23;
  *(void *)(a3 + 48) = *(void *)v24;
  mimosa::v2::AccelSubpacketState::update((mimosa::v2::AccelSubpacketState *)(a1 + 280), (const mimosa::v2::AccelSubpacketState::Patch *)(a2 + 104), (uint64_t)&v22);
  *(_OWORD *)(v10 - 144) = v22;
  long long v15 = *(void **)v8;
  if (*(void *)v8)
  {
    *(void *)(a3 + 80) = v15;
    operator delete(v15);
    *(void *)uint64_t v8 = 0;
    *(void *)(v8 + 8) = 0;
    *(void *)(v8 + 16) = 0;
  }
  *(_OWORD *)(a3 + 72) = v23;
  *(void *)(a3 + 88) = *(void *)v24;
  mimosa::v2::AlgsResponseV2SubpacketState::update(a1 + 472, a2 + 192, (uint64_t)&v22);
  long long v16 = (_OWORD *)(v10 - 104);
  long long v17 = v23;
  *long long v16 = v22;
  v16[1] = v17;
  v16[2] = *(_OWORD *)v24;
  mimosa::v2::TemperatureSubpacketState::update(a1 + 800, a2 + 360, (uint64_t)&v22);
  *(_OWORD *)uint64_t v10 = v22;
  *(void *)(v10 + 16) = v23;
  mimosa::v2::WavelengthV3SubpacketState::update(a1 + 1000, a2 + 392, (uint64_t)&v22);
  long long v18 = *(_OWORD *)&v24[16];
  *(_OWORD *)(a3 + 256) = *(_OWORD *)v24;
  *(_OWORD *)(a3 + 272) = v18;
  long long v19 = v26;
  *(_OWORD *)(a3 + 288) = v25;
  *(_OWORD *)(a3 + 304) = v19;
  double result = *(double *)&v22;
  long long v21 = v23;
  *(_OWORD *)(a3 + 224) = v22;
  *(_OWORD *)(a3 + 240) = v21;
  return result;
}

{
  _OWORD *v6;
  _OWORD *v7;
  _OWORD *v8;
  uint64_t v9;
  long long v10;
  long long v11;
  uint64_t v12;
  long long v13;
  uint64_t v14;
  long long v15;
  long long v16;
  long long v17;
  long long v18;
  double result;
  long long v20;
  long long v21;
  long long v22;
  long long v23;
  long long v24;
  long long v25;

  *(void *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  *(unsigned char *)(a3 + 12) = 0;
  *(void *)(a3 + 16) = 0;
  char v6 = (_OWORD *)(a3 + 16);
  *(_DWORD *)(a3 + 24) = 0;
  *(unsigned char *)(a3 + 28) = 0;
  uint64_t v7 = (_OWORD *)(a3 + 56);
  *(_OWORD *)(a3 + 200) = 0u;
  uint64_t v8 = (_OWORD *)(a3 + 200);
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(void *)(a3 + 6std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = 0;
  *(_OWORD *)(a3 + 72) = 0u;
  *(_OWORD *)(a3 + 88) = 0u;
  *(_OWORD *)(a3 + 104) = 0u;
  *(_OWORD *)(a3 + 120) = 0u;
  *(_OWORD *)(a3 + 136) = 0u;
  *(_OWORD *)(a3 + 152) = 0u;
  *(_OWORD *)(a3 + 168) = 0u;
  *(_OWORD *)(a3 + 184) = 0u;
  *(_OWORD *)(a3 + 216) = 0u;
  *(_OWORD *)(a3 + 232) = 0u;
  *(_OWORD *)(a3 + 248) = 0u;
  *(void *)(a3 + 312) = 0;
  *(_OWORD *)(a3 + 264) = 0u;
  *(_OWORD *)(a3 + 280) = 0u;
  *(_OWORD *)(a3 + 296) = 0u;
  *(void *)a3 = mimosa::v2::ContainerHeaderState::update(a1, a2);
  *(void *)(a3 + 8) = v9;
  mimosa::v2::OpticalDecoderV3SubpacketState::update(a1 + 744, a2 + 312, (uint64_t)&v20);
  uint64_t v10 = v21;
  *(_OWORD *)(a3 + 144) = v20;
  *(_OWORD *)(a3 + 160) = v10;
  mimosa::v2::OpticalSamplesV2SubpacketState::update((mimosa::v2::OpticalSamplesV2SubpacketState *)(a1 + 144), (const mimosa::v2::OpticalSamplesV2SubpacketState::Patch *)(a2 + 24), *(unsigned char *)(a3 + 168), *(unsigned __int8 *)(a3 + 169), (uint64_t)&v20);
  uint64_t v11 = v21;
  *char v6 = v20;
  double v12 = v22;
  *(_OWORD *)(a3 + 32) = v11;
  *(void *)(a3 + 48) = v12;
  mimosa::v2::AccelSubpacketState::update((mimosa::v2::AccelSubpacketState *)(a1 + 280), (const mimosa::v2::AccelSubpacketState::Patch *)(a2 + 144), (uint64_t)&v20);
  unint64_t v13 = v21;
  char *v7 = v20;
  long long v14 = v22;
  *(_OWORD *)(a3 + 72) = v13;
  *(void *)(a3 + 88) = v14;
  mimosa::v2::AlgsResponseV2SubpacketState::update(a1 + 472, a2 + 232, (uint64_t)&v20);
  long long v15 = v21;
  *(_OWORD *)(a3 + 96) = v20;
  *(_OWORD *)(a3 + 112) = v15;
  *(_OWORD *)(a3 + 128) = v22;
  mimosa::v2::TemperatureSubpacketState::update(a1 + 800, a2 + 360, (uint64_t)&v20);
  *(_OWORD *)(a3 + 176) = v20;
  *(void *)(a3 + 192) = v21;
  mimosa::v2::WavelengthV3SubpacketState::update(a1 + 1000, a2 + 392, (uint64_t)&v20);
  long long v16 = v23;
  v8[2] = v22;
  v8[3] = v16;
  long long v17 = v25;
  v8[4] = v24;
  v8[5] = v17;
  long long v18 = v21;
  unsigned char *v8 = v20;
  v8[1] = v18;
  mimosa::v2::OpticalScalarsSubpacketState::update(a1 + 1152, a2 + 520, (uint64_t *)&v20);
  *(void *)(a3 + 312) = v21;
  double result = *(double *)&v20;
  *(_OWORD *)(a3 + 296) = v20;
  return result;
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  long long v15;
  long long v16;
  long long v17;
  long long v18;
  long long v19;
  double result;
  long long v21;
  _OWORD *v22;
  long long v23;
  unsigned char __p[32];
  unsigned char v25[48];

  *(unsigned char *)(a3 + 48) = 0;
  char v6 = a3 + 48;
  *(unsigned char *)(a3 + 72) = 0;
  *(unsigned char *)(a3 + 184) = 0;
  *(unsigned char *)(a3 + 216) = 0;
  *(unsigned char *)(a3 + 224) = 0;
  *(unsigned char *)(a3 + 232) = 0;
  *(unsigned char *)(a3 + 240) = 0;
  *(unsigned char *)(a3 + 248) = 0;
  *(unsigned char *)(a3 + 252) = 0;
  *(unsigned char *)(a3 + 256) = 0;
  *(unsigned char *)(a3 + 260) = 0;
  *(unsigned char *)(a3 + 264) = 0;
  *(unsigned char *)(a3 + 266) = 0;
  *(_WORD *)(a3 + 268) = 0;
  *(unsigned char *)(a3 + 296) = 0;
  *(unsigned char *)(a3 + 328) = 0;
  *(unsigned char *)(a3 + 336) = 0;
  *(unsigned char *)(a3 + 344) = 0;
  *(unsigned char *)(a3 + 384) = 0;
  *(unsigned char *)(a3 + 386) = 0;
  *(unsigned char *)(a3 + 480) = 0;
  *(unsigned char *)(a3 + 484) = 0;
  *(unsigned char *)(a3 + 486) = 0;
  *(void *)(a3 + 24) = 0;
  uint64_t v7 = a3 + 24;
  *(_OWORD *)(a3 + 80) = 0u;
  uint64_t v8 = a3 + 80;
  *(void *)(a3 + 128) = 0;
  uint64_t v9 = a3 + 128;
  *(unsigned char *)(a3 + 152) = 0;
  uint64_t v10 = a3 + 152;
  *(void *)(a3 + 192) = 0;
  uint64_t v11 = (_OWORD *)(a3 + 192);
  double v12 = a3 + 360;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_WORD *)(a3 + 16) = 0;
  *(void *)(a3 + 32) = 0;
  *(_WORD *)(a3 + 40) = 0;
  *(_OWORD *)(a3 + 106) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(void *)(a3 + 136) = 0;
  *(void *)(a3 + 144) = 0;
  *(_WORD *)(a3 + 208) = 0;
  *(void *)(a3 + 200) = 0;
  *(_WORD *)(a3 + 288) = 0;
  *(void *)(a3 + 272) = 0;
  *(void *)(a3 + 280) = 0;
  *(_WORD *)(a3 + 356) = 0;
  *(_DWORD *)(a3 + 352) = 0;
  *(void *)(a3 + 360) = 0;
  *(void *)(a3 + 368) = 0;
  *(_WORD *)(a3 + 376) = 0;
  *(void *)(v12 + 42) = 0;
  *(void *)(v12 + 28) = 0;
  long long v22 = (_OWORD *)v12;
  *(void *)(v12 + 36) = 0;
  *(_OWORD *)(a3 + 416) = 0u;
  *(_OWORD *)(a3 + 432) = 0u;
  *(_OWORD *)(a3 + 448) = 0u;
  *(unsigned char *)(a3 + 464) = 0;
  mimosa::v2::ContainerHeaderState::update(a1, a2, (uint64_t)&v23);
  *(_OWORD *)a3 = v23;
  *(_WORD *)(a3 + 16) = *(_WORD *)__p;
  mimosa::v2::OpticalSamplesV1SubpacketState::update(a1 + 40, a2 + 16, (uint64_t *)(a2 + 160), (uint64_t)&v23);
  *(_OWORD *)uint64_t v7 = v23;
  *(_WORD *)(v7 + 16) = *(_WORD *)__p;
  std::__optional_storage_base<std::vector<mimosa::v2::OpticalSamplesV1SubpacketState::Patch::Sample>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<mimosa::v2::OpticalSamplesV1SubpacketState::Patch::Sample>,false>>(v6, (__n128 *)&__p[8]);
  unint64_t v13 = *(void **)v8;
  if (*(void *)v8)
  {
    *(void *)(a3 + 88) = v13;
    operator delete(v13);
    *(void *)uint64_t v8 = 0;
    *(void *)(v8 + 8) = 0;
    *(void *)(v8 + 16) = 0;
  }
  *(_OWORD *)(a3 + 80) = *(_OWORD *)&v25[8];
  *(void *)(a3 + 96) = *(void *)&v25[24];
  memset(&v25[8], 0, 24);
  if (v25[0] && *(void *)&__p[8])
  {
    *(void *)&__p[16] = *(void *)&__p[8];
    operator delete(*(void **)&__p[8]);
  }
  mimosa::v2::AccelSubpacketState::update(a1 + 280, a2 + 56, (uint64_t)&v23);
  *(_OWORD *)(a3 + 104) = v23;
  *(_WORD *)(a3 + 120) = *(_WORD *)__p;
  long long v14 = *(void **)v9;
  if (*(void *)v9)
  {
    *(void *)(a3 + 136) = v14;
    operator delete(v14);
    *(void *)uint64_t v9 = 0;
    *(void *)(v9 + 8) = 0;
    *(void *)(v9 + 16) = 0;
  }
  *(_OWORD *)(a3 + 128) = *(_OWORD *)&__p[8];
  *(void *)(a3 + 144) = *(void *)&__p[24];
  memset(&__p[8], 0, 24);
  std::__optional_storage_base<std::variant<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>,unsigned char>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::variant<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>,unsigned char>,false>>(v10, (uint64_t)v25);
  if (v25[32]) {
    std::__variant_detail::__dtor<std::__variant_detail::__traits<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>,unsigned char>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v25);
  }
  if (*(void *)&__p[8])
  {
    *(void *)&__p[16] = *(void *)&__p[8];
    operator delete(*(void **)&__p[8]);
  }
  mimosa::v2::AlgsResponseV2SubpacketState::update(a1 + 472, a2 + 96, (uint64_t)&v23);
  long long v15 = *(_OWORD *)v25;
  v11[2] = *(_OWORD *)&__p[16];
  v11[3] = v15;
  *(_OWORD *)((char *)v11 + 62) = *(_OWORD *)&v25[14];
  long long v16 = *(_OWORD *)__p;
  *uint64_t v11 = v23;
  v11[1] = v16;
  mimosa::v2::OpticalDecoderV2SubpacketState::update(a1 + 640, a2 + 144, (uint64_t)&v23);
  *(_OWORD *)(a3 + 272) = v23;
  *(_WORD *)(a3 + 288) = *(_WORD *)__p;
  std::__optional_storage_base<std::variant<std::vector<unsigned short>,unsigned char>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::variant<std::vector<unsigned short>,unsigned char>,false>>(a3 + 296, (uint64_t)&__p[8]);
  *(_OWORD *)(a3 + 336) = *(_OWORD *)&v25[16];
  *(void *)(a3 + 350) = *(void *)&v25[30];
  if (v25[8]) {
    std::__variant_detail::__dtor<std::__variant_detail::__traits<std::vector<unsigned short>,unsigned char>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&__p[8]);
  }
  mimosa::v2::TemperatureSubpacketState::update(a1 + 800, a2 + 200, (uint64_t)&v23);
  long long v17 = *(_OWORD *)__p;
  *long long v22 = v23;
  v22[1] = v17;
  mimosa::v2::WavelengthV2SubpacketState::update(a1 + 848, a2 + 224, (uint64_t)&v23);
  long long v18 = *(_OWORD *)v25;
  *(_OWORD *)(a3 + 424) = *(_OWORD *)&__p[16];
  *(_OWORD *)(a3 + 440) = v18;
  long long v19 = *(_OWORD *)&v25[32];
  *(_OWORD *)(a3 + 456) = *(_OWORD *)&v25[16];
  *(_OWORD *)(a3 + 472) = v19;
  double result = *(double *)&v23;
  long long v21 = *(_OWORD *)__p;
  *(_OWORD *)(a3 + 392) = v23;
  *(_OWORD *)(a3 + 408) = v21;
  return result;
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  long long v15;
  long long v16;
  long long v17;
  long long v18;
  long long v19;
  long long v20;
  double result;
  long long v22;
  _OWORD *v23;
  long long v24;
  unsigned char __p[32];
  unsigned char v26[48];
  long long v27;
  long long v28;

  *(unsigned char *)(a3 + 48) = 0;
  char v6 = a3 + 48;
  *(unsigned char *)(a3 + 72) = 0;
  *(unsigned char *)(a3 + 184) = 0;
  *(unsigned char *)(a3 + 216) = 0;
  *(unsigned char *)(a3 + 224) = 0;
  *(unsigned char *)(a3 + 232) = 0;
  *(unsigned char *)(a3 + 240) = 0;
  *(unsigned char *)(a3 + 248) = 0;
  *(unsigned char *)(a3 + 252) = 0;
  *(unsigned char *)(a3 + 256) = 0;
  *(unsigned char *)(a3 + 260) = 0;
  *(unsigned char *)(a3 + 264) = 0;
  *(unsigned char *)(a3 + 266) = 0;
  *(_WORD *)(a3 + 268) = 0;
  *(unsigned char *)(a3 + 296) = 0;
  *(unsigned char *)(a3 + 328) = 0;
  *(unsigned char *)(a3 + 336) = 0;
  *(unsigned char *)(a3 + 344) = 0;
  *(unsigned char *)(a3 + 384) = 0;
  *(unsigned char *)(a3 + 386) = 0;
  *(unsigned char *)(a3 + 512) = 0;
  *(unsigned char *)(a3 + 516) = 0;
  *(void *)(a3 + 24) = 0;
  uint64_t v7 = a3 + 24;
  *(_OWORD *)(a3 + 80) = 0u;
  uint64_t v8 = a3 + 80;
  *(void *)(a3 + 128) = 0;
  uint64_t v9 = a3 + 128;
  *(unsigned char *)(a3 + 152) = 0;
  uint64_t v10 = a3 + 152;
  *(void *)(a3 + 192) = 0;
  uint64_t v11 = (_OWORD *)(a3 + 192);
  *(unsigned char *)(a3 + 518) = 0;
  double v12 = a3 + 360;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_WORD *)(a3 + 16) = 0;
  *(void *)(a3 + 32) = 0;
  *(_WORD *)(a3 + 40) = 0;
  *(_OWORD *)(a3 + 106) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(void *)(a3 + 136) = 0;
  *(void *)(a3 + 144) = 0;
  *(_WORD *)(a3 + 208) = 0;
  *(void *)(a3 + 200) = 0;
  *(_WORD *)(a3 + 288) = 0;
  *(void *)(a3 + 272) = 0;
  *(void *)(a3 + 280) = 0;
  *(_WORD *)(a3 + 356) = 0;
  *(_DWORD *)(a3 + 352) = 0;
  *(void *)(a3 + 360) = 0;
  *(void *)(a3 + 368) = 0;
  *(_WORD *)(a3 + 376) = 0;
  *(void *)(v12 + 42) = 0;
  *(void *)(v12 + 28) = 0;
  long long v23 = (_OWORD *)v12;
  *(void *)(v12 + 36) = 0;
  *(_OWORD *)(a3 + 416) = 0u;
  *(_OWORD *)(a3 + 432) = 0u;
  *(_OWORD *)(a3 + 448) = 0u;
  *(_OWORD *)(a3 + 464) = 0u;
  *(_OWORD *)(a3 + 473) = 0u;
  mimosa::v2::ContainerHeaderState::update(a1, a2, (uint64_t)&v24);
  *(_OWORD *)a3 = v24;
  *(_WORD *)(a3 + 16) = *(_WORD *)__p;
  mimosa::v2::OpticalSamplesV1SubpacketState::update(a1 + 40, a2 + 16, (uint64_t *)(a2 + 160), (uint64_t)&v24);
  *(_OWORD *)uint64_t v7 = v24;
  *(_WORD *)(v7 + 16) = *(_WORD *)__p;
  std::__optional_storage_base<std::vector<mimosa::v2::OpticalSamplesV1SubpacketState::Patch::Sample>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<mimosa::v2::OpticalSamplesV1SubpacketState::Patch::Sample>,false>>(v6, (__n128 *)&__p[8]);
  unint64_t v13 = *(void **)v8;
  if (*(void *)v8)
  {
    *(void *)(a3 + 88) = v13;
    operator delete(v13);
    *(void *)uint64_t v8 = 0;
    *(void *)(v8 + 8) = 0;
    *(void *)(v8 + 16) = 0;
  }
  *(_OWORD *)(a3 + 80) = *(_OWORD *)&v26[8];
  *(void *)(a3 + 96) = *(void *)&v26[24];
  memset(&v26[8], 0, 24);
  if (v26[0] && *(void *)&__p[8])
  {
    *(void *)&__p[16] = *(void *)&__p[8];
    operator delete(*(void **)&__p[8]);
  }
  mimosa::v2::AccelSubpacketState::update(a1 + 280, a2 + 56, (uint64_t)&v24);
  *(_OWORD *)(a3 + 104) = v24;
  *(_WORD *)(a3 + 120) = *(_WORD *)__p;
  long long v14 = *(void **)v9;
  if (*(void *)v9)
  {
    *(void *)(a3 + 136) = v14;
    operator delete(v14);
    *(void *)uint64_t v9 = 0;
    *(void *)(v9 + 8) = 0;
    *(void *)(v9 + 16) = 0;
  }
  *(_OWORD *)(a3 + 128) = *(_OWORD *)&__p[8];
  *(void *)(a3 + 144) = *(void *)&__p[24];
  memset(&__p[8], 0, 24);
  std::__optional_storage_base<std::variant<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>,unsigned char>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::variant<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>,unsigned char>,false>>(v10, (uint64_t)v26);
  if (v26[32]) {
    std::__variant_detail::__dtor<std::__variant_detail::__traits<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>,unsigned char>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v26);
  }
  if (*(void *)&__p[8])
  {
    *(void *)&__p[16] = *(void *)&__p[8];
    operator delete(*(void **)&__p[8]);
  }
  mimosa::v2::AlgsResponseV2SubpacketState::update(a1 + 472, a2 + 96, (uint64_t)&v24);
  long long v15 = *(_OWORD *)v26;
  v11[2] = *(_OWORD *)&__p[16];
  v11[3] = v15;
  *(_OWORD *)((char *)v11 + 62) = *(_OWORD *)&v26[14];
  long long v16 = *(_OWORD *)__p;
  *uint64_t v11 = v24;
  v11[1] = v16;
  mimosa::v2::OpticalDecoderV2SubpacketState::update(a1 + 640, a2 + 144, (uint64_t)&v24);
  *(_OWORD *)(a3 + 272) = v24;
  *(_WORD *)(a3 + 288) = *(_WORD *)__p;
  std::__optional_storage_base<std::variant<std::vector<unsigned short>,unsigned char>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::variant<std::vector<unsigned short>,unsigned char>,false>>(a3 + 296, (uint64_t)&__p[8]);
  *(_OWORD *)(a3 + 336) = *(_OWORD *)&v26[16];
  *(void *)(a3 + 350) = *(void *)&v26[30];
  if (v26[8]) {
    std::__variant_detail::__dtor<std::__variant_detail::__traits<std::vector<unsigned short>,unsigned char>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&__p[8]);
  }
  mimosa::v2::TemperatureSubpacketState::update(a1 + 800, a2 + 200, (uint64_t)&v24);
  long long v17 = *(_OWORD *)__p;
  *long long v23 = v24;
  v23[1] = v17;
  mimosa::v2::WavelengthV3SubpacketState::update(a1 + 1000, a2 + 224, (uint64_t)&v24);
  long long v18 = *(_OWORD *)&v26[32];
  *(_OWORD *)(a3 + 456) = *(_OWORD *)&v26[16];
  *(_OWORD *)(a3 + 472) = v18;
  long long v19 = v28;
  *(_OWORD *)(a3 + 488) = v27;
  *(_OWORD *)(a3 + 504) = v19;
  long long v20 = *(_OWORD *)__p;
  *(_OWORD *)(a3 + 392) = v24;
  *(_OWORD *)(a3 + 408) = v20;
  double result = *(double *)&__p[16];
  long long v22 = *(_OWORD *)v26;
  *(_OWORD *)(a3 + 424) = *(_OWORD *)&__p[16];
  *(_OWORD *)(a3 + 440) = v22;
  return result;
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  long long v15;
  long long v16;
  long long v17;
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  double result;
  _OWORD *v23;
  uint64_t v24;
  unsigned char v25[48];
  unsigned char v26[32];
  long long v27;
  long long v28;
  uint64_t v29;

  *(unsigned char *)(a3 + 48) = 0;
  char v6 = a3 + 48;
  *(unsigned char *)(a3 + 80) = 0;
  *(unsigned char *)(a3 + 88) = 0;
  uint64_t v7 = a3 + 88;
  *(unsigned char *)(a3 + 112) = 0;
  *(unsigned char *)(a3 + 224) = 0;
  *(unsigned char *)(a3 + 256) = 0;
  *(unsigned char *)(a3 + 264) = 0;
  *(unsigned char *)(a3 + 272) = 0;
  *(unsigned char *)(a3 + 280) = 0;
  *(unsigned char *)(a3 + 288) = 0;
  *(unsigned char *)(a3 + 292) = 0;
  *(unsigned char *)(a3 + 296) = 0;
  *(unsigned char *)(a3 + 300) = 0;
  *(unsigned char *)(a3 + 304) = 0;
  *(unsigned char *)(a3 + 306) = 0;
  *(_WORD *)(a3 + 308) = 0;
  *(unsigned char *)(a3 + 336) = 0;
  *(unsigned char *)(a3 + 344) = 0;
  *(unsigned char *)(a3 + 384) = 0;
  *(unsigned char *)(a3 + 386) = 0;
  *(unsigned char *)(a3 + 480) = 0;
  *(unsigned char *)(a3 + 484) = 0;
  *(unsigned char *)(a3 + 486) = 0;
  *(void *)(a3 + 24) = 0;
  uint64_t v8 = a3 + 24;
  *(_OWORD *)(a3 + 120) = 0u;
  uint64_t v9 = a3 + 120;
  *(void *)(a3 + 168) = 0;
  uint64_t v10 = a3 + 168;
  *(unsigned char *)(a3 + 192) = 0;
  uint64_t v24 = a3 + 192;
  *(void *)(a3 + 232) = 0;
  uint64_t v11 = (_OWORD *)(a3 + 232);
  *(_WORD *)(a3 + 512) = 0;
  double v12 = a3 + 360;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_WORD *)(a3 + 16) = 0;
  *(void *)(a3 + 32) = 0;
  *(_WORD *)(a3 + 40) = 0;
  *(_OWORD *)(a3 + 146) = 0u;
  *(_OWORD *)(a3 + 136) = 0u;
  *(void *)(a3 + 176) = 0;
  *(void *)(a3 + 184) = 0;
  *(_WORD *)(a3 + 248) = 0;
  *(void *)(a3 + 240) = 0;
  *(_WORD *)(a3 + 328) = 0;
  *(void *)(a3 + 312) = 0;
  *(void *)(a3 + 320) = 0;
  *(_DWORD *)(a3 + 352) = 0;
  *(void *)(a3 + 360) = 0;
  *(void *)(a3 + 368) = 0;
  *(_WORD *)(a3 + 376) = 0;
  *(void *)(v12 + 42) = 0;
  *(void *)(v12 + 28) = 0;
  long long v23 = (_OWORD *)v12;
  *(void *)(v12 + 36) = 0;
  *(_OWORD *)(a3 + 416) = 0u;
  *(_OWORD *)(a3 + 432) = 0u;
  *(_OWORD *)(a3 + 448) = 0u;
  *(unsigned char *)(a3 + 464) = 0;
  *(void *)(a3 + 488) = 0;
  *(void *)(a3 + 496) = 0;
  *(_WORD *)(a3 + 504) = 0;
  mimosa::v2::ContainerHeaderState::update(a1, a2, (uint64_t)v25);
  *(_OWORD *)a3 = *(_OWORD *)v25;
  *(_WORD *)(a3 + 16) = *(_WORD *)&v25[16];
  mimosa::v2::OpticalSamplesV2SubpacketState::update(a1 + 144, a2 + 16, *(unsigned char *)(a2 + 168), *(unsigned __int8 *)(a2 + 169), (uint64_t)v25);
  *(_OWORD *)uint64_t v8 = *(_OWORD *)v25;
  *(_WORD *)(v8 + 16) = *(_WORD *)&v25[16];
  std::__optional_storage_base<std::variant<std::vector<unsigned short>,unsigned char>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::variant<std::vector<unsigned short>,unsigned char>,false>>(v6, (uint64_t)&v25[24]);
  std::__optional_storage_base<std::vector<mimosa::v2::OpticalSamplesV1SubpacketState::Patch::Sample>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<mimosa::v2::OpticalSamplesV1SubpacketState::Patch::Sample>,false>>(v7, (__n128 *)&v26[16]);
  unint64_t v13 = *(void **)v9;
  if (*(void *)v9)
  {
    *(void *)(a3 + 128) = v13;
    operator delete(v13);
    *(void *)uint64_t v9 = 0;
    *(void *)(v9 + 8) = 0;
    *(void *)(v9 + 16) = 0;
  }
  *(_OWORD *)(a3 + 120) = v28;
  *(void *)(a3 + 136) = v29;
  unint64_t v29 = 0;
  unsigned __int8 v28 = 0uLL;
  if (BYTE8(v27) && *(void *)&v26[16])
  {
    *(void *)&v26[24] = *(void *)&v26[16];
    operator delete(*(void **)&v26[16]);
  }
  if (v26[8]) {
    std::__variant_detail::__dtor<std::__variant_detail::__traits<std::vector<unsigned short>,unsigned char>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v25[24]);
  }
  mimosa::v2::AccelSubpacketState::update(a1 + 280, a2 + 56, (uint64_t)v25);
  *(_OWORD *)(a3 + 144) = *(_OWORD *)v25;
  *(_WORD *)(a3 + 160) = *(_WORD *)&v25[16];
  long long v14 = *(void **)v10;
  if (*(void *)v10)
  {
    *(void *)(a3 + 176) = v14;
    operator delete(v14);
    *(void *)uint64_t v10 = 0;
    *(void *)(v10 + 8) = 0;
    *(void *)(v10 + 16) = 0;
  }
  *(_OWORD *)(a3 + 168) = *(_OWORD *)&v25[24];
  *(void *)(a3 + 184) = *(void *)&v25[40];
  memset(&v25[24], 0, 24);
  std::__optional_storage_base<std::variant<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>,unsigned char>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::variant<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>,unsigned char>,false>>(v24, (uint64_t)v26);
  if ((_BYTE)v27) {
    std::__variant_detail::__dtor<std::__variant_detail::__traits<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>,unsigned char>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v26);
  }
  if (*(void *)&v25[24])
  {
    *(void *)&v25[32] = *(void *)&v25[24];
    operator delete(*(void **)&v25[24]);
  }
  mimosa::v2::AlgsResponseV2SubpacketState::update(a1 + 472, a2 + 96, (uint64_t)v25);
  long long v15 = *(_OWORD *)v26;
  v11[2] = *(_OWORD *)&v25[32];
  v11[3] = v15;
  *(_OWORD *)((char *)v11 + 62) = *(_OWORD *)&v26[14];
  long long v16 = *(_OWORD *)&v25[16];
  *uint64_t v11 = *(_OWORD *)v25;
  v11[1] = v16;
  mimosa::v2::OpticalDecoderV3SubpacketState::update(a1 + 744, a2 + 144, (uint64_t)v25);
  long long v17 = *(_OWORD *)&v25[16];
  *(_OWORD *)(a3 + 312) = *(_OWORD *)v25;
  *(_OWORD *)(a3 + 328) = v17;
  *(_OWORD *)(a3 + 340) = *(_OWORD *)&v25[28];
  mimosa::v2::TemperatureSubpacketState::update(a1 + 800, a2 + 176, (uint64_t)v25);
  long long v18 = *(_OWORD *)&v25[16];
  *long long v23 = *(_OWORD *)v25;
  v23[1] = v18;
  mimosa::v2::WavelengthV2SubpacketState::update(a1 + 848, a2 + 200, (uint64_t)v25);
  long long v19 = *(_OWORD *)v26;
  *(_OWORD *)(a3 + 424) = *(_OWORD *)&v25[32];
  *(_OWORD *)(a3 + 440) = v19;
  long long v20 = v27;
  *(_OWORD *)(a3 + 456) = *(_OWORD *)&v26[16];
  *(_OWORD *)(a3 + 472) = v20;
  long long v21 = *(_OWORD *)&v25[16];
  *(_OWORD *)(a3 + 392) = *(_OWORD *)v25;
  *(_OWORD *)(a3 + 408) = v21;
  mimosa::v2::OpticalScalarsSubpacketState::update(a1 + 1152, a2 + 272, (uint64_t)v25);
  *(_OWORD *)(a3 + 488) = *(_OWORD *)v25;
  double result = *(double *)&v25[10];
  *(_OWORD *)(a3 + 498) = *(_OWORD *)&v25[10];
  return result;
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  _OWORD *v12;
  void *v13;
  void *v14;
  long long v15;
  long long v16;
  long long v17;
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  long long v22;
  double result;
  _OWORD *v24;
  _OWORD *v25;
  _OWORD *v26;
  uint64_t v27;
  unsigned char v28[48];
  unsigned char v29[32];
  long long v30;
  long long v31;
  long long v32;

  *(unsigned char *)(a3 + 48) = 0;
  char v6 = a3 + 48;
  *(unsigned char *)(a3 + 80) = 0;
  *(unsigned char *)(a3 + 88) = 0;
  uint64_t v7 = a3 + 88;
  *(unsigned char *)(a3 + 112) = 0;
  *(unsigned char *)(a3 + 224) = 0;
  *(unsigned char *)(a3 + 256) = 0;
  *(unsigned char *)(a3 + 264) = 0;
  *(unsigned char *)(a3 + 272) = 0;
  *(unsigned char *)(a3 + 280) = 0;
  *(unsigned char *)(a3 + 288) = 0;
  *(unsigned char *)(a3 + 292) = 0;
  *(unsigned char *)(a3 + 296) = 0;
  *(unsigned char *)(a3 + 300) = 0;
  *(unsigned char *)(a3 + 304) = 0;
  *(unsigned char *)(a3 + 306) = 0;
  *(_WORD *)(a3 + 308) = 0;
  *(unsigned char *)(a3 + 336) = 0;
  *(unsigned char *)(a3 + 344) = 0;
  *(unsigned char *)(a3 + 384) = 0;
  *(unsigned char *)(a3 + 386) = 0;
  *(unsigned char *)(a3 + 512) = 0;
  *(unsigned char *)(a3 + 516) = 0;
  *(unsigned char *)(a3 + 518) = 0;
  *(_WORD *)(a3 + 544) = 0;
  *(_OWORD *)(a3 + 24) = 0u;
  uint64_t v8 = a3 + 24;
  *(_OWORD *)(a3 + 120) = 0u;
  uint64_t v9 = a3 + 120;
  *(_OWORD *)(a3 + 168) = 0u;
  uint64_t v10 = a3 + 168;
  *(unsigned char *)(a3 + 192) = 0;
  unint64_t v27 = a3 + 192;
  *(_OWORD *)(a3 + 232) = 0u;
  uint64_t v11 = (_OWORD *)(a3 + 232);
  double v12 = (_OWORD *)(a3 + 392);
  *(_WORD *)(a3 + 16) = 0;
  *(_OWORD *)a3 = 0u;
  *(_WORD *)(a3 + 40) = 0;
  *(_OWORD *)(a3 + 146) = 0u;
  *(_OWORD *)(a3 + 136) = 0u;
  *(void *)(a3 + 184) = 0;
  *(_WORD *)(a3 + 248) = 0;
  unsigned __int8 v25 = (_OWORD *)(a3 + 360);
  __int16 v26 = (_OWORD *)(a3 + 312);
  *(_OWORD *)(a3 + 312) = 0u;
  *(_WORD *)(a3 + 328) = 0;
  *(_DWORD *)(a3 + 352) = 0;
  *(_OWORD *)(a3 + 360) = 0u;
  *(_WORD *)(a3 + 376) = 0;
  *(_OWORD *)(a3 + 388) = 0u;
  *(void *)(a3 + 402) = 0;
  *(_OWORD *)(a3 + 473) = 0u;
  *(_OWORD *)(a3 + 448) = 0u;
  *(_OWORD *)(a3 + 464) = 0u;
  *(_OWORD *)(a3 + 416) = 0u;
  *(_OWORD *)(a3 + 432) = 0u;
  uint64_t v24 = (_OWORD *)(a3 + 520);
  *(_OWORD *)(a3 + 520) = 0u;
  *(_WORD *)(a3 + 536) = 0;
  mimosa::v2::ContainerHeaderState::update(a1, a2, (uint64_t)v28);
  *(_OWORD *)a3 = *(_OWORD *)v28;
  *(_WORD *)(a3 + 16) = *(_WORD *)&v28[16];
  mimosa::v2::OpticalSamplesV2SubpacketState::update(a1 + 144, a2 + 16, *(unsigned char *)(a2 + 168), *(unsigned __int8 *)(a2 + 169), (uint64_t)v28);
  *(_OWORD *)uint64_t v8 = *(_OWORD *)v28;
  *(_WORD *)(v8 + 16) = *(_WORD *)&v28[16];
  std::__optional_storage_base<std::variant<std::vector<unsigned short>,unsigned char>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::variant<std::vector<unsigned short>,unsigned char>,false>>(v6, (uint64_t)&v28[24]);
  std::__optional_storage_base<std::vector<mimosa::v2::OpticalSamplesV1SubpacketState::Patch::Sample>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<mimosa::v2::OpticalSamplesV1SubpacketState::Patch::Sample>,false>>(v7, (__n128 *)&v29[16]);
  unint64_t v13 = *(void **)v9;
  if (*(void *)v9)
  {
    *(void *)(a3 + 128) = v13;
    operator delete(v13);
    *(void *)uint64_t v9 = 0;
    *(void *)(v9 + 8) = 0;
    *(void *)(v9 + 16) = 0;
  }
  *(_OWORD *)(a3 + 120) = v31;
  *(void *)(a3 + 136) = v32;
  *(void *)&__int16 v32 = 0;
  unsigned __int8 v31 = 0uLL;
  if (BYTE8(v30) && *(void *)&v29[16])
  {
    *(void *)&v29[24] = *(void *)&v29[16];
    operator delete(*(void **)&v29[16]);
  }
  if (v29[8]) {
    std::__variant_detail::__dtor<std::__variant_detail::__traits<std::vector<unsigned short>,unsigned char>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v28[24]);
  }
  mimosa::v2::AccelSubpacketState::update(a1 + 280, a2 + 56, (uint64_t)v28);
  *(_OWORD *)(a3 + 144) = *(_OWORD *)v28;
  *(_WORD *)(a3 + 160) = *(_WORD *)&v28[16];
  long long v14 = *(void **)v10;
  if (*(void *)v10)
  {
    *(void *)(a3 + 176) = v14;
    operator delete(v14);
    *(void *)uint64_t v10 = 0;
    *(void *)(v10 + 8) = 0;
    *(void *)(v10 + 16) = 0;
  }
  *(_OWORD *)(a3 + 168) = *(_OWORD *)&v28[24];
  *(void *)(a3 + 184) = *(void *)&v28[40];
  memset(&v28[24], 0, 24);
  std::__optional_storage_base<std::variant<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>,unsigned char>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::variant<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>,unsigned char>,false>>(v27, (uint64_t)v29);
  if ((_BYTE)v30) {
    std::__variant_detail::__dtor<std::__variant_detail::__traits<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>,unsigned char>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v29);
  }
  if (*(void *)&v28[24])
  {
    *(void *)&v28[32] = *(void *)&v28[24];
    operator delete(*(void **)&v28[24]);
  }
  mimosa::v2::AlgsResponseV2SubpacketState::update(a1 + 472, a2 + 96, (uint64_t)v28);
  long long v15 = *(_OWORD *)v29;
  v11[2] = *(_OWORD *)&v28[32];
  v11[3] = v15;
  *(_OWORD *)((char *)v11 + 62) = *(_OWORD *)&v29[14];
  long long v16 = *(_OWORD *)&v28[16];
  *uint64_t v11 = *(_OWORD *)v28;
  v11[1] = v16;
  mimosa::v2::OpticalDecoderV3SubpacketState::update(a1 + 744, a2 + 144, (uint64_t)v28);
  long long v17 = *(_OWORD *)&v28[16];
  *__int16 v26 = *(_OWORD *)v28;
  v26[1] = v17;
  *(_OWORD *)((char *)v26 + 28) = *(_OWORD *)&v28[28];
  mimosa::v2::TemperatureSubpacketState::update(a1 + 800, a2 + 176, (uint64_t)v28);
  long long v18 = *(_OWORD *)&v28[16];
  std::runtime_error *v25 = *(_OWORD *)v28;
  v25[1] = v18;
  mimosa::v2::WavelengthV3SubpacketState::update(a1 + 1000, a2 + 200, (uint64_t)v28);
  long long v19 = v30;
  v12[4] = *(_OWORD *)&v29[16];
  v12[5] = v19;
  long long v20 = v32;
  v12[6] = v31;
  v12[7] = v20;
  long long v21 = *(_OWORD *)&v28[16];
  *double v12 = *(_OWORD *)v28;
  v12[1] = v21;
  long long v22 = *(_OWORD *)v29;
  v12[2] = *(_OWORD *)&v28[32];
  v12[3] = v22;
  mimosa::v2::OpticalScalarsSubpacketState::update(a1 + 1152, a2 + 296, (uint64_t)v28);
  *uint64_t v24 = *(_OWORD *)v28;
  double result = *(double *)&v28[10];
  *(_OWORD *)((char *)v24 + 10) = *(_OWORD *)&v28[10];
  return result;
}

void sub_22278143C(_Unwind_Exception *a1)
{
  mimosa::PacketV2::~PacketV2(v1);
  _Unwind_Resume(a1);
}

__n128 mimosa::v2::PacketState::update_@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  char v6 = (_OWORD *)(a3 + 16);
  *(unsigned char *)(a3 + 12) = 0;
  *(_DWORD *)(a3 + 24) = 0;
  *(_OWORD *)(a3 + 32) = 0u;
  uint64_t v7 = a3 + 32;
  *(unsigned char *)(a3 + 28) = 0;
  *(_OWORD *)(a3 + 48) = 0u;
  *(void *)(a3 + 6std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = 0;
  *(_OWORD *)(a3 + 88) = 0u;
  *(_OWORD *)(a3 + 104) = 0u;
  *(_OWORD *)(a3 + 120) = 0u;
  *(_OWORD *)(a3 + 136) = 0u;
  *(void *)(a3 + 14std::__function::__value_func<BOOL ()(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,double)>::~__value_func[abi:ne180100]((void *)this + 9) = 0;
  *(_OWORD *)(a3 + 72) = 0u;
  uint64_t v8 = a3 + 72;
  *(_OWORD *)(a3 + 176) = 0u;
  *(_OWORD *)(a3 + 160) = 0u;
  uint64_t v9 = (uint64_t *)(a3 + 160);
  *(_OWORD *)(a3 + 200) = 0u;
  uint64_t v10 = a3 + 200;
  *(_DWORD *)(a3 + 19std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = 0;
  *(_OWORD *)(a3 + 264) = 0u;
  *(_OWORD *)(a3 + 280) = 0u;
  *(_OWORD *)(a3 + 232) = 0u;
  *(_OWORD *)(a3 + 248) = 0u;
  *(_OWORD *)(a3 + 216) = 0u;
  *(void *)a3 = mimosa::v2::ContainerHeaderState::update(a1, a2);
  *(void *)(a3 + 8) = v11;
  mimosa::v2::OpticalDecoderV2SubpacketState::update(a1 + 640, a2 + 272, (uint64_t)&v20);
  *(_OWORD *)(v10 - 56) = v20;
  double v12 = (void *)*v9;
  if (*v9)
  {
    *(void *)(a3 + 168) = v12;
    operator delete(v12);
    *uint64_t v9 = 0;
    v9[1] = 0;
    v9[2] = 0;
  }
  *(__n128 *)(a3 + 160) = v21;
  uint64_t v13 = *(void *)&v22[8];
  *(void *)(a3 + 176) = *(void *)v22;
  *(void *)(v10 - 16) = v13;
  *(_DWORD *)(v10 - std::__function::__value_func<BOOL ()(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,double)>::~__value_func[abi:ne180100]((void *)this + 9) = *(_DWORD *)&v22[15];
  mimosa::v2::OpticalSamplesV1SubpacketState::update(a1 + 40, a2 + 24, v9, (uint64_t)&v20);
  *char v6 = v20;
  long long v14 = *(void **)v7;
  if (*(void *)v7)
  {
    *(void *)(a3 + 40) = v14;
    operator delete(v14);
    *(void *)uint64_t v7 = 0;
    *(void *)(v7 + 8) = 0;
    *(void *)(v7 + 16) = 0;
  }
  *(__n128 *)(a3 + 32) = v21;
  *(void *)(a3 + 48) = *(void *)v22;
  mimosa::v2::AccelSubpacketState::update((mimosa::v2::AccelSubpacketState *)(a1 + 280), (const mimosa::v2::AccelSubpacketState::Patch *)(a2 + 104), (uint64_t)&v20);
  *(_OWORD *)(v10 - 144) = v20;
  long long v15 = *(void **)v8;
  if (*(void *)v8)
  {
    *(void *)(a3 + 80) = v15;
    operator delete(v15);
    *(void *)uint64_t v8 = 0;
    *(void *)(v8 + 8) = 0;
    *(void *)(v8 + 16) = 0;
  }
  *(__n128 *)(a3 + 72) = v21;
  *(void *)(a3 + 88) = *(void *)v22;
  mimosa::v2::AlgsResponseV2SubpacketState::update(a1 + 472, a2 + 192, (uint64_t)&v20);
  long long v16 = (_OWORD *)(v10 - 104);
  __n128 v17 = v21;
  *long long v16 = v20;
  v16[1] = v17;
  v16[2] = *(_OWORD *)v22;
  mimosa::v2::TemperatureSubpacketState::update(a1 + 800, a2 + 360, (uint64_t)&v20);
  *(_OWORD *)uint64_t v10 = v20;
  *(void *)(v10 + 16) = v21.n128_u64[0];
  mimosa::v2::WavelengthV2SubpacketState::update(a1 + 848, a2 + 392, (uint64_t)&v20);
  long long v18 = *(_OWORD *)&v22[16];
  *(_OWORD *)(a3 + 256) = *(_OWORD *)v22;
  *(_OWORD *)(a3 + 272) = v18;
  *(void *)(a3 + 288) = v23;
  __n128 result = v21;
  *(_OWORD *)(a3 + 224) = v20;
  *(__n128 *)(a3 + 240) = result;
  return result;
}

void sub_22278167C(_Unwind_Exception *a1)
{
  mimosa::PacketV2::~PacketV2(v1);
  _Unwind_Resume(a1);
}

void sub_2227818BC(_Unwind_Exception *a1)
{
  mimosa::PacketV2::~PacketV2(v1);
  _Unwind_Resume(a1);
}

double mimosa::v2::PacketState::update_@<D0>(mimosa::v2::PacketState *this@<X0>, const mimosa::v2::PacketState::PatchV6 *a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  char v6 = (_OWORD *)(a3 + 16);
  *(unsigned char *)(a3 + 12) = 0;
  *(_DWORD *)(a3 + 24) = 0;
  *(unsigned char *)(a3 + 28) = 0;
  uint64_t v7 = (_OWORD *)(a3 + 56);
  *(_OWORD *)(a3 + 200) = 0u;
  uint64_t v8 = a3 + 200;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(void *)(a3 + 6std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = 0;
  *(_OWORD *)(a3 + 72) = 0u;
  *(_OWORD *)(a3 + 88) = 0u;
  *(_OWORD *)(a3 + 104) = 0u;
  *(_OWORD *)(a3 + 120) = 0u;
  *(_OWORD *)(a3 + 136) = 0u;
  *(_OWORD *)(a3 + 152) = 0u;
  *(_OWORD *)(a3 + 168) = 0u;
  *(_OWORD *)(a3 + 184) = 0u;
  *(_OWORD *)(a3 + 216) = 0u;
  *(_OWORD *)(a3 + 232) = 0u;
  *(_OWORD *)(a3 + 248) = 0u;
  *(_OWORD *)(a3 + 264) = 0u;
  *(_OWORD *)(a3 + 280) = 0u;
  *(void *)a3 = mimosa::v2::ContainerHeaderState::update((uint64_t)this, (uint64_t)a2);
  *(void *)(a3 + 8) = v9;
  mimosa::v2::OpticalDecoderV3SubpacketState::update((uint64_t)this + 744, (uint64_t)a2 + 312, (uint64_t)&v19);
  long long v10 = v20;
  *(_OWORD *)(a3 + 144) = v19;
  *(_OWORD *)(a3 + 160) = v10;
  mimosa::v2::OpticalSamplesV2SubpacketState::update((mimosa::v2::PacketState *)((char *)this + 144), (const mimosa::v2::PacketState::PatchV6 *)((char *)a2 + 24), *(unsigned char *)(a3 + 168), *(unsigned __int8 *)(a3 + 169), (uint64_t)&v19);
  long long v11 = v20;
  *char v6 = v19;
  uint64_t v12 = v21;
  *(_OWORD *)(a3 + 32) = v11;
  *(void *)(a3 + 48) = v12;
  mimosa::v2::AccelSubpacketState::update((mimosa::v2::PacketState *)((char *)this + 280), (const mimosa::v2::PacketState::PatchV6 *)((char *)a2 + 144), (uint64_t)&v19);
  long long v13 = v20;
  _OWORD *v7 = v19;
  uint64_t v14 = v21;
  *(_OWORD *)(a3 + 72) = v13;
  *(void *)(a3 + 88) = v14;
  mimosa::v2::AlgsResponseV2SubpacketState::update((uint64_t)this + 472, (uint64_t)a2 + 232, (uint64_t)&v19);
  long long v15 = v20;
  *(_OWORD *)(a3 + 96) = v19;
  *(_OWORD *)(a3 + 112) = v15;
  *(_OWORD *)(a3 + 128) = v21;
  mimosa::v2::TemperatureSubpacketState::update((uint64_t)this + 800, (uint64_t)a2 + 360, (uint64_t)&v19);
  *(_OWORD *)(a3 + 176) = v19;
  *(void *)(a3 + 192) = v20;
  mimosa::v2::WavelengthV2SubpacketState::update((uint64_t)this + 848, (uint64_t)a2 + 392, (uint64_t)&v19);
  long long v16 = v22;
  *(_OWORD *)(v8 + 32) = v21;
  *(_OWORD *)(v8 + 48) = v16;
  *(void *)(v8 + 64) = v23;
  long long v17 = v20;
  *(_OWORD *)uint64_t v8 = v19;
  *(_OWORD *)(v8 + 16) = v17;
  mimosa::v2::OpticalScalarsSubpacketState::update((uint64_t)this + 1152, (uint64_t)a2 + 488, (uint64_t *)&v19);
  double result = *(double *)&v19;
  *(_OWORD *)(a3 + 272) = v19;
  *(void *)(a3 + 288) = v20;
  return result;
}

void sub_222781AA8(_Unwind_Exception *a1)
{
  mimosa::PacketV1::~PacketV1(v1);
  _Unwind_Resume(a1);
}

void sub_222781C8C(_Unwind_Exception *a1)
{
  mimosa::PacketV1::~PacketV1(v1);
  _Unwind_Resume(a1);
}

__n128 mimosa::v2::PacketState::update_@<Q0>(mimosa::v2::PacketState *this@<X0>, const mimosa::PacketV1 *a2@<X1>, uint64_t a3@<X8>)
{
  *(unsigned char *)(a3 + 48) = 0;
  uint64_t v6 = a3 + 48;
  *(unsigned char *)(a3 + 72) = 0;
  *(unsigned char *)(a3 + 184) = 0;
  *(unsigned char *)(a3 + 216) = 0;
  *(unsigned char *)(a3 + 218) = 0;
  *(unsigned char *)(a3 + 232) = 0;
  *(unsigned char *)(a3 + 236) = 0;
  *(unsigned char *)(a3 + 240) = 0;
  *(unsigned char *)(a3 + 244) = 0;
  *(unsigned char *)(a3 + 248) = 0;
  *(unsigned char *)(a3 + 252) = 0;
  *(unsigned char *)(a3 + 256) = 0;
  *(unsigned char *)(a3 + 260) = 0;
  *(unsigned char *)(a3 + 262) = 0;
  *(unsigned char *)(a3 + 264) = 0;
  *(unsigned char *)(a3 + 266) = 0;
  *(_WORD *)(a3 + 268) = 0;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 24) = 0;
  uint64_t v7 = a3 + 24;
  *(_WORD *)(a3 + 16) = 0;
  *(_OWORD *)(a3 + 80) = 0u;
  uint64_t v8 = a3 + 80;
  *(void *)(a3 + 128) = 0;
  uint64_t v9 = a3 + 128;
  *(unsigned char *)(a3 + 152) = 0;
  uint64_t v10 = a3 + 152;
  *(void *)(a3 + 192) = 0;
  uint64_t v11 = a3 + 192;
  *(void *)(a3 + 32) = 0;
  *(_WORD *)(a3 + 40) = 0;
  *(_OWORD *)(a3 + 106) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(void *)(a3 + 136) = 0;
  *(void *)(a3 + 144) = 0;
  *(void *)(a3 + 200) = 0;
  *(_WORD *)(a3 + 208) = 0;
  *(void *)(a3 + 220) = 0;
  *(unsigned char *)(a3 + 228) = 0;
  mimosa::v2::ContainerHeaderState::update((uint64_t)this, (uint64_t)a2, (uint64_t)&v16);
  *(_OWORD *)a3 = v16;
  *(_WORD *)(a3 + 16) = *(_WORD *)__p;
  mimosa::v2::OpticalSamplesV1SubpacketState::update((uint64_t *)this + 5, (uint64_t)a2 + 16, (uint64_t)&v16);
  *(_OWORD *)uint64_t v7 = v16;
  *(_WORD *)(v7 + 16) = *(_WORD *)__p;
  std::__optional_storage_base<std::vector<mimosa::v2::OpticalSamplesV1SubpacketState::Patch::Sample>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<mimosa::v2::OpticalSamplesV1SubpacketState::Patch::Sample>,false>>(v6, (__n128 *)&__p[8]);
  uint64_t v12 = *(void **)v8;
  if (*(void *)v8)
  {
    *(void *)(a3 + 88) = v12;
    operator delete(v12);
    *(void *)uint64_t v8 = 0;
    *(void *)(v8 + 8) = 0;
    *(void *)(v8 + 16) = 0;
  }
  *(_OWORD *)(a3 + 80) = *(_OWORD *)&v18[8];
  *(void *)(a3 + 96) = *(void *)&v18[24];
  memset(&v18[8], 0, 24);
  if (v18[0] && *(void *)&__p[8])
  {
    *(void *)&__p[16] = *(void *)&__p[8];
    operator delete(*(void **)&__p[8]);
  }
  mimosa::v2::AccelSubpacketState::update((uint64_t)this + 280, (uint64_t)a2 + 56, (uint64_t)&v16);
  *(_OWORD *)(v7 + 80) = v16;
  *(_WORD *)(v7 + 96) = *(_WORD *)__p;
  long long v13 = *(void **)v9;
  if (*(void *)v9)
  {
    *(void *)(a3 + 136) = v13;
    operator delete(v13);
    *(void *)uint64_t v9 = 0;
    *(void *)(v9 + 8) = 0;
    *(void *)(v9 + 16) = 0;
  }
  *(_OWORD *)(a3 + 128) = *(_OWORD *)&__p[8];
  *(void *)(a3 + 144) = *(void *)&__p[24];
  memset(&__p[8], 0, 24);
  std::__optional_storage_base<std::variant<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>,unsigned char>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::variant<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>,unsigned char>,false>>(v10, (uint64_t)v18);
  if (v19) {
    std::__variant_detail::__dtor<std::__variant_detail::__traits<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>,unsigned char>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v18);
  }
  if (*(void *)&__p[8])
  {
    *(void *)&__p[16] = *(void *)&__p[8];
    operator delete(*(void **)&__p[8]);
  }
  mimosa::v2::AlgsResponseV1SubpacketState::update((uint64_t)this + 400, (uint64_t)a2 + 96, (uint64_t)&v16);
  long long v14 = *(_OWORD *)v18;
  *(_OWORD *)(v11 + 32) = *(_OWORD *)&__p[16];
  *(_OWORD *)(v11 + 48) = v14;
  *(_OWORD *)(v11 + 62) = *(_OWORD *)&v18[14];
  __n128 result = *(__n128 *)__p;
  *(_OWORD *)uint64_t v11 = v16;
  *(__n128 *)(v11 + 16) = result;
  return result;
}

void sub_222781F04(_Unwind_Exception *a1)
{
  mimosa::v2::PacketState::PatchV1::~PatchV1(v1);
  _Unwind_Resume(a1);
}

void mimosa::v2::PacketState::PatchV1::~PatchV1(mimosa::v2::PacketState::PatchV1 *this)
{
  if (*((unsigned char *)this + 184)) {
    std::__variant_detail::__dtor<std::__variant_detail::__traits<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>,unsigned char>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 152);
  }
  uint64_t v2 = (void *)*((void *)this + 16);
  if (v2)
  {
    *((void *)this + 17) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 10);
  if (v3)
  {
    *((void *)this + 1std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = v3;
    operator delete(v3);
  }
  if (*((unsigned char *)this + 72))
  {
    uint64_t v4 = (void *)*((void *)this + 6);
    if (v4)
    {
      *((void *)this + 7) = v4;
      operator delete(v4);
    }
  }
}

double mimosa::v2::PacketState::update_@<D0>(mimosa::v2::PacketState *this@<X0>, const mimosa::PacketV2 *a2@<X1>, uint64_t a3@<X8>)
{
  *(unsigned char *)(a3 + 48) = 0;
  uint64_t v6 = a3 + 48;
  *(unsigned char *)(a3 + 72) = 0;
  *(unsigned char *)(a3 + 184) = 0;
  *(unsigned char *)(a3 + 216) = 0;
  *(unsigned char *)(a3 + 218) = 0;
  *(unsigned char *)(a3 + 232) = 0;
  *(unsigned char *)(a3 + 236) = 0;
  *(unsigned char *)(a3 + 240) = 0;
  *(unsigned char *)(a3 + 244) = 0;
  *(unsigned char *)(a3 + 248) = 0;
  *(unsigned char *)(a3 + 252) = 0;
  *(unsigned char *)(a3 + 256) = 0;
  *(unsigned char *)(a3 + 260) = 0;
  *(unsigned char *)(a3 + 262) = 0;
  *(unsigned char *)(a3 + 264) = 0;
  *(unsigned char *)(a3 + 266) = 0;
  *(_WORD *)(a3 + 268) = 0;
  *(unsigned char *)(a3 + 296) = 0;
  *(unsigned char *)(a3 + 328) = 0;
  *(unsigned char *)(a3 + 368) = 0;
  *(unsigned char *)(a3 + 370) = 0;
  *(unsigned char *)(a3 + 464) = 0;
  *(unsigned char *)(a3 + 468) = 0;
  *(void *)(a3 + 24) = 0;
  uint64_t v7 = a3 + 24;
  *(unsigned char *)(a3 + 470) = 0;
  *(_OWORD *)(a3 + 80) = 0u;
  uint64_t v8 = a3 + 80;
  *(void *)(a3 + 128) = 0;
  uint64_t v9 = a3 + 128;
  *(unsigned char *)(a3 + 152) = 0;
  uint64_t v10 = a3 + 152;
  *(void *)(a3 + 192) = 0;
  uint64_t v11 = (_OWORD *)(a3 + 192);
  uint64_t v12 = a3 + 344;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_WORD *)(a3 + 16) = 0;
  *(void *)(a3 + 32) = 0;
  *(_WORD *)(a3 + 40) = 0;
  *(_OWORD *)(a3 + 106) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(void *)(a3 + 136) = 0;
  *(void *)(a3 + 144) = 0;
  *(_WORD *)(a3 + 208) = 0;
  *(void *)(a3 + 200) = 0;
  *(void *)(a3 + 220) = 0;
  *(unsigned char *)(a3 + 228) = 0;
  *(void *)(a3 + 272) = 0;
  *(void *)(a3 + 280) = 0;
  *(_WORD *)(a3 + 288) = 0;
  *(_DWORD *)(a3 + 336) = 0;
  *(void *)(a3 + 344) = 0;
  *(void *)(a3 + 352) = 0;
  *(_WORD *)(a3 + 360) = 0;
  *(void *)(v12 + 42) = 0;
  *(void *)(v12 + 28) = 0;
  long long v22 = (_OWORD *)v12;
  *(void *)(v12 + 36) = 0;
  *(_OWORD *)(a3 + 400) = 0u;
  *(_OWORD *)(a3 + 416) = 0u;
  *(_OWORD *)(a3 + 432) = 0u;
  *(unsigned char *)(a3 + 448) = 0;
  mimosa::v2::ContainerHeaderState::update((uint64_t)this, (uint64_t)a2, (uint64_t)&v23);
  *(_OWORD *)a3 = v23;
  *(_WORD *)(a3 + 16) = *(_WORD *)__p;
  mimosa::v2::OpticalSamplesV1SubpacketState::update((uint64_t)this + 40, (uint64_t)a2 + 16, (uint64_t *)a2 + 20, (uint64_t)&v23);
  *(_OWORD *)uint64_t v7 = v23;
  *(_WORD *)(v7 + 16) = *(_WORD *)__p;
  std::__optional_storage_base<std::vector<mimosa::v2::OpticalSamplesV1SubpacketState::Patch::Sample>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<mimosa::v2::OpticalSamplesV1SubpacketState::Patch::Sample>,false>>(v6, (__n128 *)&__p[8]);
  long long v13 = *(void **)v8;
  if (*(void *)v8)
  {
    *(void *)(a3 + 88) = v13;
    operator delete(v13);
    *(void *)uint64_t v8 = 0;
    *(void *)(v8 + 8) = 0;
    *(void *)(v8 + 16) = 0;
  }
  *(_OWORD *)(a3 + 80) = *(_OWORD *)&v25[8];
  *(void *)(a3 + 96) = *(void *)&v25[24];
  memset(&v25[8], 0, 24);
  if (v25[0] && *(void *)&__p[8])
  {
    *(void *)&__p[16] = *(void *)&__p[8];
    operator delete(*(void **)&__p[8]);
  }
  mimosa::v2::AccelSubpacketState::update((uint64_t)this + 280, (uint64_t)a2 + 56, (uint64_t)&v23);
  *(_OWORD *)(a3 + 104) = v23;
  *(_WORD *)(a3 + 120) = *(_WORD *)__p;
  long long v14 = *(void **)v9;
  if (*(void *)v9)
  {
    *(void *)(a3 + 136) = v14;
    operator delete(v14);
    *(void *)uint64_t v9 = 0;
    *(void *)(v9 + 8) = 0;
    *(void *)(v9 + 16) = 0;
  }
  *(_OWORD *)(a3 + 128) = *(_OWORD *)&__p[8];
  *(void *)(a3 + 144) = *(void *)&__p[24];
  memset(&__p[8], 0, 24);
  std::__optional_storage_base<std::variant<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>,unsigned char>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::variant<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>,unsigned char>,false>>(v10, (uint64_t)v25);
  if ((_BYTE)v26) {
    std::__variant_detail::__dtor<std::__variant_detail::__traits<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>,unsigned char>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v25);
  }
  if (*(void *)&__p[8])
  {
    *(void *)&__p[16] = *(void *)&__p[8];
    operator delete(*(void **)&__p[8]);
  }
  mimosa::v2::AlgsResponseV1SubpacketState::update((uint64_t)this + 400, (uint64_t)a2 + 96, (uint64_t)&v23);
  long long v15 = *(_OWORD *)v25;
  v11[2] = *(_OWORD *)&__p[16];
  v11[3] = v15;
  *(_OWORD *)((char *)v11 + 62) = *(_OWORD *)&v25[14];
  long long v16 = *(_OWORD *)__p;
  *uint64_t v11 = v23;
  v11[1] = v16;
  mimosa::v2::OpticalDecoderV1SubpacketState::update((uint64_t)this + 544, (uint64_t)a2 + 144, (uint64_t)&v23);
  *(_OWORD *)(a3 + 272) = v23;
  *(_WORD *)(a3 + 288) = *(_WORD *)__p;
  std::__optional_storage_base<std::variant<std::vector<unsigned short>,unsigned char>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::variant<std::vector<unsigned short>,unsigned char>,false>>(a3 + 296, (uint64_t)&__p[8]);
  *(_DWORD *)(a3 + 336) = *(_DWORD *)&v25[16];
  if (v25[8]) {
    std::__variant_detail::__dtor<std::__variant_detail::__traits<std::vector<unsigned short>,unsigned char>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&__p[8]);
  }
  mimosa::v2::TemperatureSubpacketState::update((uint64_t)this + 800, (uint64_t)a2 + 192, (uint64_t)&v23);
  long long v17 = *(_OWORD *)__p;
  *long long v22 = v23;
  v22[1] = v17;
  mimosa::v2::WavelengthV2SubpacketState::update((uint64_t)this + 848, (uint64_t)a2 + 216, (uint64_t)&v23);
  long long v18 = *(_OWORD *)v25;
  *(_OWORD *)(a3 + 408) = *(_OWORD *)&__p[16];
  *(_OWORD *)(a3 + 424) = v18;
  long long v19 = v26;
  *(_OWORD *)(a3 + 440) = *(_OWORD *)&v25[16];
  *(_OWORD *)(a3 + 456) = v19;
  double result = *(double *)&v23;
  long long v21 = *(_OWORD *)__p;
  *(_OWORD *)(a3 + 376) = v23;
  *(_OWORD *)(a3 + 392) = v21;
  return result;
}

void sub_2227822C4(_Unwind_Exception *a1)
{
  mimosa::v2::PacketState::PatchV2::~PatchV2(v1);
  _Unwind_Resume(a1);
}

void mimosa::v2::PacketState::PatchV2::~PatchV2(mimosa::v2::PacketState::PatchV2 *this)
{
  if (*((unsigned char *)this + 328)) {
    std::__variant_detail::__dtor<std::__variant_detail::__traits<std::vector<unsigned short>,unsigned char>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 296);
  }
  if (*((unsigned char *)this + 184)) {
    std::__variant_detail::__dtor<std::__variant_detail::__traits<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>,unsigned char>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 152);
  }
  uint64_t v2 = (void *)*((void *)this + 16);
  if (v2)
  {
    *((void *)this + 17) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 10);
  if (v3)
  {
    *((void *)this + 1std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = v3;
    operator delete(v3);
  }
  if (*((unsigned char *)this + 72))
  {
    uint64_t v4 = (void *)*((void *)this + 6);
    if (v4)
    {
      *((void *)this + 7) = v4;
      operator delete(v4);
    }
  }
}

uint64_t mimosa::v2::PacketState::update_@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(unsigned char *)(a3 + 48) = 0;
  uint64_t v6 = a3 + 48;
  *(unsigned char *)(a3 + 72) = 0;
  *(unsigned char *)(a3 + 184) = 0;
  *(unsigned char *)(a3 + 216) = 0;
  *(unsigned char *)(a3 + 224) = 0;
  *(unsigned char *)(a3 + 232) = 0;
  *(unsigned char *)(a3 + 240) = 0;
  *(unsigned char *)(a3 + 248) = 0;
  *(unsigned char *)(a3 + 252) = 0;
  *(unsigned char *)(a3 + 256) = 0;
  *(unsigned char *)(a3 + 260) = 0;
  *(unsigned char *)(a3 + 264) = 0;
  *(unsigned char *)(a3 + 266) = 0;
  *(_WORD *)(a3 + 268) = 0;
  *(unsigned char *)(a3 + 296) = 0;
  *(unsigned char *)(a3 + 328) = 0;
  *(unsigned char *)(a3 + 336) = 0;
  *(void *)(a3 + 24) = 0;
  uint64_t v7 = a3 + 24;
  *(unsigned char *)(a3 + 344) = 0;
  *(_OWORD *)(a3 + 80) = 0u;
  uint64_t v8 = a3 + 80;
  *(void *)(a3 + 128) = 0;
  uint64_t v9 = a3 + 128;
  *(unsigned char *)(a3 + 152) = 0;
  uint64_t v10 = a3 + 152;
  *(void *)(a3 + 192) = 0;
  uint64_t v11 = (_OWORD *)(a3 + 192);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_WORD *)(a3 + 16) = 0;
  *(void *)(a3 + 32) = 0;
  *(_WORD *)(a3 + 40) = 0;
  *(_OWORD *)(a3 + 106) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(void *)(a3 + 136) = 0;
  *(void *)(a3 + 144) = 0;
  *(_WORD *)(a3 + 208) = 0;
  *(void *)(a3 + 200) = 0;
  *(_WORD *)(a3 + 288) = 0;
  *(void *)(a3 + 272) = 0;
  *(void *)(a3 + 280) = 0;
  *(_WORD *)(a3 + 356) = 0;
  *(_DWORD *)(a3 + 352) = 0;
  mimosa::v2::ContainerHeaderState::update(a1, a2, (uint64_t)&v17);
  *(_OWORD *)a3 = v17;
  *(_WORD *)(a3 + 16) = *(_WORD *)__p;
  mimosa::v2::OpticalSamplesV1SubpacketState::update(a1 + 40, a2 + 16, (uint64_t *)(a2 + 160), (uint64_t)&v17);
  *(_OWORD *)uint64_t v7 = v17;
  *(_WORD *)(v7 + 16) = *(_WORD *)__p;
  std::__optional_storage_base<std::vector<mimosa::v2::OpticalSamplesV1SubpacketState::Patch::Sample>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<mimosa::v2::OpticalSamplesV1SubpacketState::Patch::Sample>,false>>(v6, (__n128 *)&__p[8]);
  uint64_t v12 = *(void **)v8;
  if (*(void *)v8)
  {
    *(void *)(a3 + 88) = v12;
    operator delete(v12);
    *(void *)uint64_t v8 = 0;
    *(void *)(v8 + 8) = 0;
    *(void *)(v8 + 16) = 0;
  }
  *(_OWORD *)(a3 + 80) = *(_OWORD *)&v19[8];
  *(void *)(a3 + 96) = *(void *)&v19[24];
  memset(&v19[8], 0, 24);
  if (v19[0] && *(void *)&__p[8])
  {
    *(void *)&__p[16] = *(void *)&__p[8];
    operator delete(*(void **)&__p[8]);
  }
  mimosa::v2::AccelSubpacketState::update(a1 + 280, a2 + 56, (uint64_t)&v17);
  *(_OWORD *)(a3 + 104) = v17;
  *(_WORD *)(a3 + 120) = *(_WORD *)__p;
  long long v13 = *(void **)v9;
  if (*(void *)v9)
  {
    *(void *)(a3 + 136) = v13;
    operator delete(v13);
    *(void *)uint64_t v9 = 0;
    *(void *)(v9 + 8) = 0;
    *(void *)(v9 + 16) = 0;
  }
  *(_OWORD *)(a3 + 128) = *(_OWORD *)&__p[8];
  *(void *)(a3 + 144) = *(void *)&__p[24];
  memset(&__p[8], 0, 24);
  std::__optional_storage_base<std::variant<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>,unsigned char>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::variant<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>,unsigned char>,false>>(v10, (uint64_t)v19);
  if (v19[32]) {
    std::__variant_detail::__dtor<std::__variant_detail::__traits<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>,unsigned char>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v19);
  }
  if (*(void *)&__p[8])
  {
    *(void *)&__p[16] = *(void *)&__p[8];
    operator delete(*(void **)&__p[8]);
  }
  mimosa::v2::AlgsResponseV2SubpacketState::update(a1 + 472, a2 + 96, (uint64_t)&v17);
  long long v14 = *(_OWORD *)v19;
  v11[2] = *(_OWORD *)&__p[16];
  v11[3] = v14;
  *(_OWORD *)((char *)v11 + 62) = *(_OWORD *)&v19[14];
  long long v15 = *(_OWORD *)__p;
  *uint64_t v11 = v17;
  v11[1] = v15;
  mimosa::v2::OpticalDecoderV2SubpacketState::update(a1 + 640, a2 + 144, (uint64_t)&v17);
  *(_OWORD *)(a3 + 272) = v17;
  *(_WORD *)(a3 + 288) = *(_WORD *)__p;
  uint64_t result = std::__optional_storage_base<std::variant<std::vector<unsigned short>,unsigned char>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::variant<std::vector<unsigned short>,unsigned char>,false>>(a3 + 296, (uint64_t)&__p[8]);
  *(_OWORD *)(a3 + 336) = *(_OWORD *)&v19[16];
  *(void *)(a3 + 350) = *(void *)&v19[30];
  if (v19[8]) {
    return std::__variant_detail::__dtor<std::__variant_detail::__traits<std::vector<unsigned short>,unsigned char>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&__p[8]);
  }
  return result;
}

void sub_222782630(_Unwind_Exception *a1)
{
  mimosa::v2::PacketState::PatchV2::~PatchV2(v1);
  _Unwind_Resume(a1);
}

void sub_22278298C(_Unwind_Exception *a1)
{
  mimosa::v2::PacketState::PatchV2::~PatchV2(v1);
  _Unwind_Resume(a1);
}

void sub_222782D00(_Unwind_Exception *a1)
{
  mimosa::v2::PacketState::PatchV2::~PatchV2(v1);
  _Unwind_Resume(a1);
}

void sub_2227830A0(_Unwind_Exception *a1)
{
  mimosa::v2::PacketState::PatchV6::~PatchV6(v1);
  _Unwind_Resume(a1);
}

void mimosa::v2::PacketState::PatchV6::~PatchV6(mimosa::v2::PacketState::PatchV6 *this)
{
  if (*((unsigned char *)this + 224)) {
    std::__variant_detail::__dtor<std::__variant_detail::__traits<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>,unsigned char>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 192);
  }
  uint64_t v2 = (void *)*((void *)this + 21);
  if (v2)
  {
    *((void *)this + 22) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 15);
  if (v3)
  {
    *((void *)this + 16) = v3;
    operator delete(v3);
  }
  if (*((unsigned char *)this + 112))
  {
    uint64_t v4 = (void *)*((void *)this + 11);
    if (v4)
    {
      *((void *)this + 12) = v4;
      operator delete(v4);
    }
  }
  if (*((unsigned char *)this + 80)) {
    std::__variant_detail::__dtor<std::__variant_detail::__traits<std::vector<unsigned short>,unsigned char>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 48);
  }
}

void sub_2227834CC(_Unwind_Exception *a1)
{
  mimosa::v2::PacketState::PatchV6::~PatchV6(v1);
  _Unwind_Resume(a1);
}

double std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<mimosa::v2::PacketState::update(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&>@<D0>(mimosa::v2::PacketState ***a1@<X0>, const mimosa::v2::PacketState::PatchV1 *a2@<X1>, uint64_t a3@<X8>)
{
  mimosa::v2::PacketState::update_(**a1, a2, (uint64_t)v7);
  long long v4 = v7[1];
  *(_OWORD *)a3 = v7[0];
  *(_OWORD *)(a3 + 16) = v4;
  *(_OWORD *)(a3 + 32) = v7[2];
  *(void *)(a3 + 48) = v8;
  *(_OWORD *)(a3 + 56) = v9;
  *(_OWORD *)(a3 + 72) = v10;
  *(void *)(a3 + 88) = v11;
  long long v5 = v13;
  *(_OWORD *)(a3 + 96) = v12;
  *(_OWORD *)(a3 + 112) = v5;
  double result = *(double *)&v14;
  *(_OWORD *)(a3 + 128) = v14;
  *(_DWORD *)(a3 + 320) = 0;
  return result;
}

double std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<mimosa::v2::PacketState::update(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&>@<D0>(mimosa::v2::PacketState ***a1@<X0>, const mimosa::v2::PacketState::PatchV2 *a2@<X1>, uint64_t a3@<X8>)
{
  mimosa::v2::PacketState::update_(**a1, a2, (uint64_t)v11);
  long long v4 = v11[1];
  *(_OWORD *)a3 = v11[0];
  *(_OWORD *)(a3 + 16) = v4;
  *(_OWORD *)(a3 + 32) = v11[2];
  *(void *)(a3 + 48) = v12;
  *(_OWORD *)(a3 + 56) = v13;
  *(_OWORD *)(a3 + 72) = v14;
  *(void *)(a3 + 88) = v15;
  long long v5 = v17;
  *(_OWORD *)(a3 + 96) = v16;
  *(_OWORD *)(a3 + 112) = v5;
  long long v6 = v19;
  *(_OWORD *)(a3 + 128) = v18;
  *(_OWORD *)(a3 + 144) = v6;
  *(_OWORD *)(a3 + 160) = v20;
  *(void *)(a3 + 176) = v21;
  *(_WORD *)(a3 + 184) = v22;
  long long v7 = v26;
  *(_OWORD *)(a3 + 224) = v25;
  *(_OWORD *)(a3 + 240) = v7;
  long long v8 = v28;
  *(_OWORD *)(a3 + 256) = v27;
  *(_OWORD *)(a3 + 272) = v8;
  double result = *(double *)&v23;
  long long v10 = v24;
  *(_OWORD *)(a3 + 192) = v23;
  *(_OWORD *)(a3 + 208) = v10;
  *(_DWORD *)(a3 + 320) = 1;
  return result;
}

double std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<mimosa::v2::PacketState::update(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&>@<D0>(uint64_t **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  mimosa::v2::PacketState::update_(**a1, a2, (uint64_t)v9);
  long long v4 = v9[1];
  *(_OWORD *)a3 = v9[0];
  *(_OWORD *)(a3 + 16) = v4;
  *(_OWORD *)(a3 + 32) = v9[2];
  *(void *)(a3 + 48) = v10;
  *(_OWORD *)(a3 + 56) = v11;
  *(_OWORD *)(a3 + 72) = v12;
  *(void *)(a3 + 88) = v13;
  long long v5 = v15;
  *(_OWORD *)(a3 + 96) = v14;
  *(_OWORD *)(a3 + 112) = v5;
  long long v6 = v17;
  *(_OWORD *)(a3 + 128) = v16;
  *(_OWORD *)(a3 + 144) = v6;
  double result = *(double *)&v18;
  *(_OWORD *)(a3 + 160) = v18;
  *(_DWORD *)(a3 + 19std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = *(_DWORD *)&v20[7];
  uint64_t v8 = *(void *)v20;
  *(void *)(a3 + 176) = v19;
  *(void *)(a3 + 184) = v8;
  *(_DWORD *)(a3 + 320) = 2;
  return result;
}

double std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<mimosa::v2::PacketState::update(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&>@<D0>(uint64_t **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  mimosa::v2::PacketState::update_(**a1, a2, (uint64_t)v10);
  long long v4 = v10[1];
  *(_OWORD *)a3 = v10[0];
  *(_OWORD *)(a3 + 16) = v4;
  *(_OWORD *)(a3 + 32) = v10[2];
  *(void *)(a3 + 48) = v11;
  *(_OWORD *)(a3 + 56) = v12;
  *(_OWORD *)(a3 + 72) = v13;
  *(void *)(a3 + 88) = v14;
  long long v5 = v16;
  *(_OWORD *)(a3 + 96) = v15;
  *(_OWORD *)(a3 + 112) = v5;
  long long v6 = v18;
  *(_OWORD *)(a3 + 128) = v17;
  *(_OWORD *)(a3 + 144) = v6;
  *(_OWORD *)(a3 + 160) = v19;
  *(_DWORD *)(a3 + 19std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = *(_DWORD *)((char *)v21 + 7);
  uint64_t v7 = v21[0];
  *(void *)(a3 + 176) = v20;
  *(void *)(a3 + 184) = v7;
  *(_OWORD *)(a3 + 216) = v23;
  *(_OWORD *)(a3 + 200) = v22;
  long long v8 = v27;
  *(_OWORD *)(a3 + 264) = v26;
  *(_OWORD *)(a3 + 280) = v8;
  *(_OWORD *)(a3 + 248) = v25;
  double result = *(double *)&v24;
  *(_OWORD *)(a3 + 232) = v24;
  *(_DWORD *)(a3 + 320) = 3;
  return result;
}

double std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<mimosa::v2::PacketState::update(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&>@<D0>(uint64_t **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  mimosa::v2::PacketState::update_(**a1, a2, (uint64_t)v11);
  long long v4 = v11[1];
  *(_OWORD *)a3 = v11[0];
  *(_OWORD *)(a3 + 16) = v4;
  *(_OWORD *)(a3 + 32) = v11[2];
  *(void *)(a3 + 48) = v12;
  *(_OWORD *)(a3 + 56) = v13;
  *(_OWORD *)(a3 + 72) = v14;
  *(void *)(a3 + 88) = v15;
  long long v5 = v17;
  *(_OWORD *)(a3 + 96) = v16;
  *(_OWORD *)(a3 + 112) = v5;
  long long v6 = v19;
  *(_OWORD *)(a3 + 128) = v18;
  *(_OWORD *)(a3 + 144) = v6;
  *(_OWORD *)(a3 + 160) = v20;
  *(_DWORD *)(a3 + 19std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = *(_DWORD *)&v22[7];
  uint64_t v7 = *(void *)v22;
  *(void *)(a3 + 176) = v21;
  *(void *)(a3 + 184) = v7;
  *(_OWORD *)(a3 + 248) = v26;
  *(_OWORD *)(a3 + 232) = v25;
  *(_OWORD *)(a3 + 216) = v24;
  *(_OWORD *)(a3 + 200) = v23;
  *(void *)(a3 + 312) = v30;
  long long v8 = v29;
  long long v10 = v27;
  double result = *(double *)&v28;
  *(_OWORD *)(a3 + 280) = v28;
  *(_OWORD *)(a3 + 296) = v8;
  *(_OWORD *)(a3 + 264) = v10;
  *(_DWORD *)(a3 + 320) = 4;
  return result;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<mimosa::v2::PacketState::update(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&>@<Q0>(mimosa::v2::PacketState ***a1@<X0>, const mimosa::v2::PacketState::PatchV6 *a2@<X1>, uint64_t a3@<X8>)
{
  mimosa::v2::PacketState::update_(**a1, a2, (uint64_t)v15);
  long long v4 = v15[1];
  *(_OWORD *)a3 = v15[0];
  *(_OWORD *)(a3 + 16) = v4;
  *(_OWORD *)(a3 + 32) = v15[2];
  *(void *)(a3 + 48) = v16;
  *(_OWORD *)(a3 + 56) = v17;
  *(_OWORD *)(a3 + 72) = v18;
  *(void *)(a3 + 88) = v19;
  long long v5 = v20;
  long long v6 = v21;
  long long v7 = v23;
  *(_OWORD *)(a3 + 128) = v22;
  *(_OWORD *)(a3 + 144) = v7;
  *(_OWORD *)(a3 + 96) = v5;
  *(_OWORD *)(a3 + 112) = v6;
  long long v8 = v24;
  long long v9 = v25;
  long long v10 = v27;
  *(_OWORD *)(a3 + 192) = v26;
  *(_OWORD *)(a3 + 208) = v10;
  *(_OWORD *)(a3 + 160) = v8;
  *(_OWORD *)(a3 + 176) = v9;
  __n128 result = v28;
  long long v12 = v29;
  long long v13 = v30;
  long long v14 = v31;
  *(void *)(a3 + 288) = v32;
  *(_OWORD *)(a3 + 256) = v13;
  *(_OWORD *)(a3 + 272) = v14;
  *(__n128 *)(a3 + 224) = result;
  *(_OWORD *)(a3 + 240) = v12;
  *(_DWORD *)(a3 + 320) = 5;
  return result;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<mimosa::v2::PacketState::update(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&>@<Q0>(uint64_t **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  mimosa::v2::PacketState::update_(**a1, a2, (uint64_t)v15);
  long long v4 = v15[1];
  *(_OWORD *)a3 = v15[0];
  *(_OWORD *)(a3 + 16) = v4;
  *(_OWORD *)(a3 + 32) = v15[2];
  *(void *)(a3 + 48) = v16;
  *(_OWORD *)(a3 + 56) = v17;
  *(_OWORD *)(a3 + 72) = v18;
  *(void *)(a3 + 88) = v19;
  long long v5 = v21;
  *(_OWORD *)(a3 + 96) = v20;
  *(_OWORD *)(a3 + 112) = v5;
  long long v6 = v22;
  long long v7 = v23;
  long long v8 = v25;
  *(_OWORD *)(a3 + 160) = v24;
  *(_OWORD *)(a3 + 176) = v8;
  *(_OWORD *)(a3 + 128) = v6;
  *(_OWORD *)(a3 + 144) = v7;
  long long v9 = v26;
  long long v10 = v27;
  long long v11 = v29;
  *(_OWORD *)(a3 + 224) = v28;
  *(_OWORD *)(a3 + 240) = v11;
  *(_OWORD *)(a3 + 192) = v9;
  *(_OWORD *)(a3 + 208) = v10;
  __n128 result = v30;
  long long v13 = v31;
  long long v14 = v33;
  *(_OWORD *)(a3 + 288) = v32;
  *(_OWORD *)(a3 + 304) = v14;
  *(__n128 *)(a3 + 256) = result;
  *(_OWORD *)(a3 + 272) = v13;
  *(_DWORD *)(a3 + 320) = 6;
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<mimosa::v2::PacketState::update(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&>(mimosa::v2::PacketState ***a1@<X0>, const mimosa::PacketV1 *a2@<X1>, uint64_t a3@<X8>)
{
  mimosa::v2::PacketState::update_(**a1, a2, (uint64_t)v4);
  std::__variant_detail::__alt<0ul,mimosa::v2::PacketState::PatchV1>::__alt[abi:ne180100]<mimosa::v2::PacketState::PatchV1>(a3, v4);
  *(_DWORD *)(a3 + 552) = 0;
  if (v12[32]) {
    std::__variant_detail::__dtor<std::__variant_detail::__traits<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>,unsigned char>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v12);
  }
  if (__p)
  {
    long long v11 = __p;
    operator delete(__p);
  }
  if (v8)
  {
    long long v9 = v8;
    operator delete(v8);
  }
  if (v7)
  {
    if (v5)
    {
      long long v6 = v5;
      operator delete(v5);
    }
  }
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<mimosa::v2::PacketState::update(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&>(mimosa::v2::PacketState ***a1@<X0>, const mimosa::PacketV2 *a2@<X1>, uint64_t a3@<X8>)
{
  mimosa::v2::PacketState::update_(**a1, a2, (uint64_t)v4);
  std::__variant_detail::__alt<1ul,mimosa::v2::PacketState::PatchV2>::__alt[abi:ne180100]<mimosa::v2::PacketState::PatchV2>(a3, v4);
  *(_DWORD *)(a3 + 552) = 1;
  if (v13[32]) {
    std::__variant_detail::__dtor<std::__variant_detail::__traits<std::vector<unsigned short>,unsigned char>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v13);
  }
  if (v12[32]) {
    std::__variant_detail::__dtor<std::__variant_detail::__traits<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>,unsigned char>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v12);
  }
  if (__p)
  {
    long long v11 = __p;
    operator delete(__p);
  }
  if (v8)
  {
    long long v9 = v8;
    operator delete(v8);
  }
  if (v7)
  {
    if (v5)
    {
      long long v6 = v5;
      operator delete(v5);
    }
  }
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<mimosa::v2::PacketState::update(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&>(uint64_t **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  mimosa::v2::PacketState::update_(**a1, a2, (uint64_t)v4);
  std::__variant_detail::__alt<2ul,mimosa::v2::PacketState::PatchV3>::__alt[abi:ne180100]<mimosa::v2::PacketState::PatchV3>(a3, v4);
  *(_DWORD *)(a3 + 552) = 2;
  if (v13[32]) {
    std::__variant_detail::__dtor<std::__variant_detail::__traits<std::vector<unsigned short>,unsigned char>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v13);
  }
  if (v12[32]) {
    std::__variant_detail::__dtor<std::__variant_detail::__traits<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>,unsigned char>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v12);
  }
  if (__p)
  {
    long long v11 = __p;
    operator delete(__p);
  }
  if (v8)
  {
    long long v9 = v8;
    operator delete(v8);
  }
  if (v7)
  {
    if (v5)
    {
      long long v6 = v5;
      operator delete(v5);
    }
  }
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<mimosa::v2::PacketState::update(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&>(uint64_t **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  mimosa::v2::PacketState::update_(**a1, a2, (uint64_t)v4);
  std::__variant_detail::__alt<3ul,mimosa::v2::PacketState::PatchV4>::__alt[abi:ne180100]<mimosa::v2::PacketState::PatchV4>(a3, v4);
  *(_DWORD *)(a3 + 552) = 3;
  if (v13[32]) {
    std::__variant_detail::__dtor<std::__variant_detail::__traits<std::vector<unsigned short>,unsigned char>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v13);
  }
  if (v12[32]) {
    std::__variant_detail::__dtor<std::__variant_detail::__traits<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>,unsigned char>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v12);
  }
  if (__p)
  {
    long long v11 = __p;
    operator delete(__p);
  }
  if (v8)
  {
    long long v9 = v8;
    operator delete(v8);
  }
  if (v7)
  {
    if (v5)
    {
      long long v6 = v5;
      operator delete(v5);
    }
  }
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<mimosa::v2::PacketState::update(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&>(uint64_t **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  mimosa::v2::PacketState::update_(**a1, a2, (uint64_t)v4);
  std::__variant_detail::__alt<4ul,mimosa::v2::PacketState::PatchV5>::__alt[abi:ne180100]<mimosa::v2::PacketState::PatchV5>(a3, v4);
  *(_DWORD *)(a3 + 552) = 4;
  if (v13[32]) {
    std::__variant_detail::__dtor<std::__variant_detail::__traits<std::vector<unsigned short>,unsigned char>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v13);
  }
  if (v12[32]) {
    std::__variant_detail::__dtor<std::__variant_detail::__traits<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>,unsigned char>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v12);
  }
  if (__p)
  {
    long long v11 = __p;
    operator delete(__p);
  }
  if (v8)
  {
    long long v9 = v8;
    operator delete(v8);
  }
  if (v7)
  {
    if (v5)
    {
      long long v6 = v5;
      operator delete(v5);
    }
  }
}

void std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<mimosa::v2::PacketState::update(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&>(uint64_t **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  mimosa::v2::PacketState::update_(**a1, a2, (uint64_t)v4);
  std::__variant_detail::__alt<5ul,mimosa::v2::PacketState::PatchV6>::__alt[abi:ne180100]<mimosa::v2::PacketState::PatchV6>(a3, v4);
  *(_DWORD *)(a3 + 552) = 5;
  if (v13[32]) {
    std::__variant_detail::__dtor<std::__variant_detail::__traits<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>,unsigned char>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v13);
  }
  if (__p)
  {
    long long v12 = __p;
    operator delete(__p);
  }
  if (v9)
  {
    long long v10 = v9;
    operator delete(v9);
  }
  if (v8 && v6)
  {
    char v7 = v6;
    operator delete(v6);
  }
  if (v5[32]) {
    std::__variant_detail::__dtor<std::__variant_detail::__traits<std::vector<unsigned short>,unsigned char>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v5);
  }
}

void std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<mimosa::v2::PacketState::update(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&)::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&>(uint64_t **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  mimosa::v2::PacketState::update_(**a1, a2, (uint64_t)v4);
  std::__variant_detail::__alt<6ul,mimosa::v2::PacketState::PatchV7>::__alt[abi:ne180100]<mimosa::v2::PacketState::PatchV7>(a3, v4);
  *(_DWORD *)(a3 + 552) = 6;
  if (v13[32]) {
    std::__variant_detail::__dtor<std::__variant_detail::__traits<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>,unsigned char>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v13);
  }
  if (__p)
  {
    long long v12 = __p;
    operator delete(__p);
  }
  if (v9)
  {
    long long v10 = v9;
    operator delete(v9);
  }
  if (v8 && v6)
  {
    char v7 = v6;
    operator delete(v6);
  }
  if (v5[32]) {
    std::__variant_detail::__dtor<std::__variant_detail::__traits<std::vector<unsigned short>,unsigned char>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v5);
  }
}

uint64_t std::__variant_detail::__alt<0ul,mimosa::v2::PacketState::PatchV1>::__alt[abi:ne180100]<mimosa::v2::PacketState::PatchV1>(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  long long v5 = *(long long *)((char *)a2 + 24);
  uint64_t v6 = *((void *)a2 + 5);
  *(unsigned char *)(a1 + 48) = 0;
  *(void *)(a1 + 40) = v6;
  *(_OWORD *)(a1 + 24) = v5;
  *(unsigned char *)(a1 + 72) = 0;
  if (*((unsigned char *)a2 + 72))
  {
    *(void *)(a1 + 48) = 0;
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
    *(_OWORD *)(a1 + 48) = a2[3];
    *(void *)(a1 + 64) = *((void *)a2 + 8);
    *((void *)a2 + 6) = 0;
    *((void *)a2 + 7) = 0;
    *((void *)a2 + 8) = 0;
    *(unsigned char *)(a1 + 72) = 1;
  }
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 80) = a2[5];
  *(void *)(a1 + 96) = *((void *)a2 + 12);
  *((void *)a2 + 10) = 0;
  *((void *)a2 + 1std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = 0;
  *((void *)a2 + 12) = 0;
  uint64_t v7 = *((void *)a2 + 15);
  *(_OWORD *)(a1 + 104) = *(long long *)((char *)a2 + 104);
  *(void *)(a1 + 120) = v7;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 128) = a2[8];
  *(void *)(a1 + 144) = *((void *)a2 + 18);
  *((void *)a2 + 16) = 0;
  *((void *)a2 + 17) = 0;
  *((void *)a2 + 18) = 0;
  *(unsigned char *)(a1 + 152) = 0;
  uint64_t v8 = a1 + 152;
  *(unsigned char *)(a1 + 184) = 0;
  if (*((unsigned char *)a2 + 184))
  {
    std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>,unsigned char>,(std::__variant_detail::_Trait)1>::__move_constructor(v8, (uint64_t)a2 + 152);
    *(unsigned char *)(a1 + 184) = 1;
  }
  *(_OWORD *)(a1 + 192) = a2[12];
  long long v9 = a2[13];
  long long v10 = a2[14];
  long long v11 = a2[16];
  *(_OWORD *)(a1 + 240) = a2[15];
  *(_OWORD *)(a1 + 256) = v11;
  *(_OWORD *)(a1 + 208) = v9;
  *(_OWORD *)(a1 + 224) = v10;
  return a1;
}

uint64_t std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>,unsigned char>,(std::__variant_detail::_Trait)1>::__move_constructor(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(_DWORD *)(a1 + 24) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>,unsigned char>>::__generic_construct[abi:ne180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>,unsigned char>,(std::__variant_detail::_Trait)1>>(a1, a2);
  return a1;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>,unsigned char>>::__generic_construct[abi:ne180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>,unsigned char>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 24);
  if (v4 != -1) {
    __n128 result = ((uint64_t (*)(char *, uint64_t))off_26D4E43B0[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 24) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  if (v5 != -1)
  {
    __n128 result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_26D4E43C0[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 24) = v5;
  }
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJNS_6vectorIN6mimosa2v219AccelSubpacketState12SampleHeaderENS_9allocatorISC_EEEEhEEEE19__generic_constructB8ne180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSF_hEEEOSV_EEEDcSN_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  __n128 result = *a3;
  *a2 = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJNS_6vectorIN6mimosa2v219AccelSubpacketState12SampleHeaderENS_9allocatorISC_EEEEhEEEE19__generic_constructB8ne180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSF_hEEEOSV_EEEDcSN_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

uint64_t std::__variant_detail::__alt<1ul,mimosa::v2::PacketState::PatchV2>::__alt[abi:ne180100]<mimosa::v2::PacketState::PatchV2>(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  long long v5 = *(long long *)((char *)a2 + 24);
  uint64_t v6 = *((void *)a2 + 5);
  *(unsigned char *)(a1 + 48) = 0;
  *(void *)(a1 + 40) = v6;
  *(_OWORD *)(a1 + 24) = v5;
  *(unsigned char *)(a1 + 72) = 0;
  if (*((unsigned char *)a2 + 72))
  {
    *(void *)(a1 + 48) = 0;
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
    *(_OWORD *)(a1 + 48) = a2[3];
    *(void *)(a1 + 64) = *((void *)a2 + 8);
    *((void *)a2 + 6) = 0;
    *((void *)a2 + 7) = 0;
    *((void *)a2 + 8) = 0;
    *(unsigned char *)(a1 + 72) = 1;
  }
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 80) = a2[5];
  *(void *)(a1 + 96) = *((void *)a2 + 12);
  *((void *)a2 + 10) = 0;
  *((void *)a2 + 1std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = 0;
  *((void *)a2 + 12) = 0;
  uint64_t v7 = *((void *)a2 + 15);
  *(_OWORD *)(a1 + 104) = *(long long *)((char *)a2 + 104);
  *(void *)(a1 + 120) = v7;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 128) = a2[8];
  *(void *)(a1 + 144) = *((void *)a2 + 18);
  *((void *)a2 + 16) = 0;
  *((void *)a2 + 17) = 0;
  *((void *)a2 + 18) = 0;
  *(unsigned char *)(a1 + 152) = 0;
  uint64_t v8 = a1 + 152;
  *(unsigned char *)(a1 + 184) = 0;
  if (*((unsigned char *)a2 + 184))
  {
    std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>,unsigned char>,(std::__variant_detail::_Trait)1>::__move_constructor(v8, (uint64_t)a2 + 152);
    *(unsigned char *)(a1 + 184) = 1;
  }
  *(_OWORD *)(a1 + 192) = a2[12];
  long long v9 = a2[13];
  long long v10 = a2[14];
  long long v11 = a2[16];
  *(_OWORD *)(a1 + 240) = a2[15];
  *(_OWORD *)(a1 + 256) = v11;
  *(_OWORD *)(a1 + 208) = v9;
  *(_OWORD *)(a1 + 224) = v10;
  long long v12 = a2[17];
  *(void *)(a1 + 288) = *((void *)a2 + 36);
  *(_OWORD *)(a1 + 272) = v12;
  *(unsigned char *)(a1 + 296) = 0;
  *(unsigned char *)(a1 + 328) = 0;
  if (*((unsigned char *)a2 + 328))
  {
    std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::vector<unsigned short>,unsigned char>,(std::__variant_detail::_Trait)1>::__move_constructor(a1 + 296, (uint64_t)a2 + 296);
    *(unsigned char *)(a1 + 328) = 1;
  }
  *(_DWORD *)(a1 + 336) = *((_DWORD *)a2 + 84);
  long long v13 = *(long long *)((char *)a2 + 344);
  long long v14 = *(long long *)((char *)a2 + 360);
  long long v15 = *(long long *)((char *)a2 + 392);
  *(_OWORD *)(a1 + 376) = *(long long *)((char *)a2 + 376);
  *(_OWORD *)(a1 + 392) = v15;
  *(_OWORD *)(a1 + 344) = v13;
  *(_OWORD *)(a1 + 360) = v14;
  long long v16 = *(long long *)((char *)a2 + 408);
  long long v17 = *(long long *)((char *)a2 + 424);
  long long v18 = *(long long *)((char *)a2 + 456);
  *(_OWORD *)(a1 + 440) = *(long long *)((char *)a2 + 440);
  *(_OWORD *)(a1 + 456) = v18;
  *(_OWORD *)(a1 + 408) = v16;
  *(_OWORD *)(a1 + 424) = v17;
  return a1;
}

uint64_t std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::vector<unsigned short>,unsigned char>,(std::__variant_detail::_Trait)1>::__move_constructor(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(_DWORD *)(a1 + 24) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<std::vector<unsigned short>,unsigned char>>::__generic_construct[abi:ne180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::vector<unsigned short>,unsigned char>,(std::__variant_detail::_Trait)1>>(a1, a2);
  return a1;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<std::vector<unsigned short>,unsigned char>>::__generic_construct[abi:ne180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::vector<unsigned short>,unsigned char>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 24);
  if (v4 != -1) {
    __n128 result = ((uint64_t (*)(char *, uint64_t))off_26D4E43D0[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 24) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  if (v5 != -1)
  {
    __n128 result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_26D4E43E0[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 24) = v5;
  }
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJNS_6vectorItNS_9allocatorItEEEEhEEEE19__generic_constructB8ne180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSG_1EJSB_hEEEOSR_EEEDcSJ_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  __n128 result = *a3;
  *a2 = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJNS_6vectorItNS_9allocatorItEEEEhEEEE19__generic_constructB8ne180100INS0_18__move_constructorISC_LNS0_6_TraitE1EEEEEvRSD_OT_EUlRSJ_OT0_E_JRNS0_6__baseILSG_1EJSB_hEEEOSR_EEEDcSJ_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

uint64_t std::__variant_detail::__alt<2ul,mimosa::v2::PacketState::PatchV3>::__alt[abi:ne180100]<mimosa::v2::PacketState::PatchV3>(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  long long v5 = *(long long *)((char *)a2 + 24);
  uint64_t v6 = *((void *)a2 + 5);
  *(unsigned char *)(a1 + 48) = 0;
  *(void *)(a1 + 40) = v6;
  *(_OWORD *)(a1 + 24) = v5;
  *(unsigned char *)(a1 + 72) = 0;
  if (*((unsigned char *)a2 + 72))
  {
    *(void *)(a1 + 48) = 0;
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
    *(_OWORD *)(a1 + 48) = a2[3];
    *(void *)(a1 + 64) = *((void *)a2 + 8);
    *((void *)a2 + 6) = 0;
    *((void *)a2 + 7) = 0;
    *((void *)a2 + 8) = 0;
    *(unsigned char *)(a1 + 72) = 1;
  }
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 80) = a2[5];
  *(void *)(a1 + 96) = *((void *)a2 + 12);
  *((void *)a2 + 10) = 0;
  *((void *)a2 + 1std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = 0;
  *((void *)a2 + 12) = 0;
  uint64_t v7 = *((void *)a2 + 15);
  *(_OWORD *)(a1 + 104) = *(long long *)((char *)a2 + 104);
  *(void *)(a1 + 120) = v7;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 128) = a2[8];
  *(void *)(a1 + 144) = *((void *)a2 + 18);
  *((void *)a2 + 16) = 0;
  *((void *)a2 + 17) = 0;
  *((void *)a2 + 18) = 0;
  *(unsigned char *)(a1 + 152) = 0;
  uint64_t v8 = a1 + 152;
  *(unsigned char *)(a1 + 184) = 0;
  if (*((unsigned char *)a2 + 184))
  {
    std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>,unsigned char>,(std::__variant_detail::_Trait)1>::__move_constructor(v8, (uint64_t)a2 + 152);
    *(unsigned char *)(a1 + 184) = 1;
  }
  *(_OWORD *)(a1 + 192) = a2[12];
  long long v9 = a2[13];
  long long v10 = a2[14];
  long long v11 = a2[16];
  *(_OWORD *)(a1 + 240) = a2[15];
  *(_OWORD *)(a1 + 256) = v11;
  *(_OWORD *)(a1 + 208) = v9;
  *(_OWORD *)(a1 + 224) = v10;
  long long v12 = a2[17];
  *(void *)(a1 + 288) = *((void *)a2 + 36);
  *(_OWORD *)(a1 + 272) = v12;
  *(unsigned char *)(a1 + 296) = 0;
  *(unsigned char *)(a1 + 328) = 0;
  if (*((unsigned char *)a2 + 328))
  {
    std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::vector<unsigned short>,unsigned char>,(std::__variant_detail::_Trait)1>::__move_constructor(a1 + 296, (uint64_t)a2 + 296);
    *(unsigned char *)(a1 + 328) = 1;
  }
  long long v13 = a2[21];
  *(void *)(a1 + 350) = *(void *)((char *)a2 + 350);
  *(_OWORD *)(a1 + 336) = v13;
  return a1;
}

uint64_t std::__variant_detail::__alt<3ul,mimosa::v2::PacketState::PatchV4>::__alt[abi:ne180100]<mimosa::v2::PacketState::PatchV4>(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  long long v5 = *(long long *)((char *)a2 + 24);
  uint64_t v6 = *((void *)a2 + 5);
  *(unsigned char *)(a1 + 48) = 0;
  *(void *)(a1 + 40) = v6;
  *(_OWORD *)(a1 + 24) = v5;
  *(unsigned char *)(a1 + 72) = 0;
  if (*((unsigned char *)a2 + 72))
  {
    *(void *)(a1 + 48) = 0;
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
    *(_OWORD *)(a1 + 48) = a2[3];
    *(void *)(a1 + 64) = *((void *)a2 + 8);
    *((void *)a2 + 6) = 0;
    *((void *)a2 + 7) = 0;
    *((void *)a2 + 8) = 0;
    *(unsigned char *)(a1 + 72) = 1;
  }
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 80) = a2[5];
  *(void *)(a1 + 96) = *((void *)a2 + 12);
  *((void *)a2 + 10) = 0;
  *((void *)a2 + 1std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = 0;
  *((void *)a2 + 12) = 0;
  uint64_t v7 = *((void *)a2 + 15);
  *(_OWORD *)(a1 + 104) = *(long long *)((char *)a2 + 104);
  *(void *)(a1 + 120) = v7;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 128) = a2[8];
  *(void *)(a1 + 144) = *((void *)a2 + 18);
  *((void *)a2 + 16) = 0;
  *((void *)a2 + 17) = 0;
  *((void *)a2 + 18) = 0;
  *(unsigned char *)(a1 + 152) = 0;
  uint64_t v8 = a1 + 152;
  *(unsigned char *)(a1 + 184) = 0;
  if (*((unsigned char *)a2 + 184))
  {
    std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>,unsigned char>,(std::__variant_detail::_Trait)1>::__move_constructor(v8, (uint64_t)a2 + 152);
    *(unsigned char *)(a1 + 184) = 1;
  }
  *(_OWORD *)(a1 + 192) = a2[12];
  long long v9 = a2[13];
  long long v10 = a2[14];
  long long v11 = a2[16];
  *(_OWORD *)(a1 + 240) = a2[15];
  *(_OWORD *)(a1 + 256) = v11;
  *(_OWORD *)(a1 + 208) = v9;
  *(_OWORD *)(a1 + 224) = v10;
  long long v12 = a2[17];
  *(void *)(a1 + 288) = *((void *)a2 + 36);
  *(_OWORD *)(a1 + 272) = v12;
  *(unsigned char *)(a1 + 296) = 0;
  *(unsigned char *)(a1 + 328) = 0;
  if (*((unsigned char *)a2 + 328))
  {
    std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::vector<unsigned short>,unsigned char>,(std::__variant_detail::_Trait)1>::__move_constructor(a1 + 296, (uint64_t)a2 + 296);
    *(unsigned char *)(a1 + 328) = 1;
  }
  long long v13 = a2[21];
  *(void *)(a1 + 350) = *(void *)((char *)a2 + 350);
  *(_OWORD *)(a1 + 336) = v13;
  long long v14 = *(long long *)((char *)a2 + 472);
  long long v16 = *(long long *)((char *)a2 + 424);
  long long v15 = *(long long *)((char *)a2 + 440);
  *(_OWORD *)(a1 + 456) = *(long long *)((char *)a2 + 456);
  *(_OWORD *)(a1 + 472) = v14;
  *(_OWORD *)(a1 + 424) = v16;
  *(_OWORD *)(a1 + 440) = v15;
  long long v17 = *(long long *)((char *)a2 + 360);
  long long v18 = *(long long *)((char *)a2 + 376);
  long long v19 = *(long long *)((char *)a2 + 408);
  *(_OWORD *)(a1 + 392) = *(long long *)((char *)a2 + 392);
  *(_OWORD *)(a1 + 408) = v19;
  *(_OWORD *)(a1 + 360) = v17;
  *(_OWORD *)(a1 + 376) = v18;
  return a1;
}

uint64_t std::__variant_detail::__alt<4ul,mimosa::v2::PacketState::PatchV5>::__alt[abi:ne180100]<mimosa::v2::PacketState::PatchV5>(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  long long v5 = *(long long *)((char *)a2 + 24);
  uint64_t v6 = *((void *)a2 + 5);
  *(unsigned char *)(a1 + 48) = 0;
  *(void *)(a1 + 40) = v6;
  *(_OWORD *)(a1 + 24) = v5;
  *(unsigned char *)(a1 + 72) = 0;
  if (*((unsigned char *)a2 + 72))
  {
    *(void *)(a1 + 48) = 0;
    *(void *)(a1 + 56) = 0;
    *(void *)(a1 + 64) = 0;
    *(_OWORD *)(a1 + 48) = a2[3];
    *(void *)(a1 + 64) = *((void *)a2 + 8);
    *((void *)a2 + 6) = 0;
    *((void *)a2 + 7) = 0;
    *((void *)a2 + 8) = 0;
    *(unsigned char *)(a1 + 72) = 1;
  }
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 80) = a2[5];
  *(void *)(a1 + 96) = *((void *)a2 + 12);
  *((void *)a2 + 10) = 0;
  *((void *)a2 + 1std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = 0;
  *((void *)a2 + 12) = 0;
  uint64_t v7 = *((void *)a2 + 15);
  *(_OWORD *)(a1 + 104) = *(long long *)((char *)a2 + 104);
  *(void *)(a1 + 120) = v7;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 128) = a2[8];
  *(void *)(a1 + 144) = *((void *)a2 + 18);
  *((void *)a2 + 16) = 0;
  *((void *)a2 + 17) = 0;
  *((void *)a2 + 18) = 0;
  *(unsigned char *)(a1 + 152) = 0;
  uint64_t v8 = a1 + 152;
  *(unsigned char *)(a1 + 184) = 0;
  if (*((unsigned char *)a2 + 184))
  {
    std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>,unsigned char>,(std::__variant_detail::_Trait)1>::__move_constructor(v8, (uint64_t)a2 + 152);
    *(unsigned char *)(a1 + 184) = 1;
  }
  *(_OWORD *)(a1 + 192) = a2[12];
  long long v9 = a2[13];
  long long v10 = a2[14];
  long long v11 = a2[16];
  *(_OWORD *)(a1 + 240) = a2[15];
  *(_OWORD *)(a1 + 256) = v11;
  *(_OWORD *)(a1 + 208) = v9;
  *(_OWORD *)(a1 + 224) = v10;
  long long v12 = a2[17];
  *(void *)(a1 + 288) = *((void *)a2 + 36);
  *(_OWORD *)(a1 + 272) = v12;
  *(unsigned char *)(a1 + 296) = 0;
  *(unsigned char *)(a1 + 328) = 0;
  if (*((unsigned char *)a2 + 328))
  {
    std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::vector<unsigned short>,unsigned char>,(std::__variant_detail::_Trait)1>::__move_constructor(a1 + 296, (uint64_t)a2 + 296);
    *(unsigned char *)(a1 + 328) = 1;
  }
  long long v13 = a2[21];
  *(void *)(a1 + 350) = *(void *)((char *)a2 + 350);
  *(_OWORD *)(a1 + 336) = v13;
  long long v14 = *(long long *)((char *)a2 + 440);
  long long v16 = *(long long *)((char *)a2 + 392);
  long long v15 = *(long long *)((char *)a2 + 408);
  *(_OWORD *)(a1 + 424) = *(long long *)((char *)a2 + 424);
  *(_OWORD *)(a1 + 440) = v14;
  *(_OWORD *)(a1 + 392) = v16;
  *(_OWORD *)(a1 + 408) = v15;
  long long v17 = *(long long *)((char *)a2 + 504);
  long long v19 = *(long long *)((char *)a2 + 456);
  long long v18 = *(long long *)((char *)a2 + 472);
  *(_OWORD *)(a1 + 488) = *(long long *)((char *)a2 + 488);
  *(_OWORD *)(a1 + 504) = v17;
  *(_OWORD *)(a1 + 456) = v19;
  *(_OWORD *)(a1 + 472) = v18;
  long long v20 = *(long long *)((char *)a2 + 376);
  *(_OWORD *)(a1 + 360) = *(long long *)((char *)a2 + 360);
  *(_OWORD *)(a1 + 376) = v20;
  return a1;
}

uint64_t std::__variant_detail::__alt<5ul,mimosa::v2::PacketState::PatchV6>::__alt[abi:ne180100]<mimosa::v2::PacketState::PatchV6>(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  long long v5 = *(long long *)((char *)a2 + 24);
  uint64_t v6 = *((void *)a2 + 5);
  *(unsigned char *)(a1 + 48) = 0;
  uint64_t v7 = a1 + 48;
  *(void *)(v7 - 8) = v6;
  *(_OWORD *)(v7 - 24) = v5;
  *(unsigned char *)(v7 + 32) = 0;
  if (*((unsigned char *)a2 + 80))
  {
    std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::vector<unsigned short>,unsigned char>,(std::__variant_detail::_Trait)1>::__move_constructor(v7, (uint64_t)(a2 + 3));
    *(unsigned char *)(a1 + 80) = 1;
  }
  *(unsigned char *)(a1 + 88) = 0;
  *(unsigned char *)(a1 + 112) = 0;
  if (*((unsigned char *)a2 + 112))
  {
    *(void *)(a1 + 88) = 0;
    *(void *)(a1 + 96) = 0;
    *(void *)(a1 + 104) = 0;
    *(_OWORD *)(a1 + 88) = *(long long *)((char *)a2 + 88);
    *(void *)(a1 + 104) = *((void *)a2 + 13);
    *((void *)a2 + 1std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = 0;
    *((void *)a2 + 12) = 0;
    *((void *)a2 + 13) = 0;
    *(unsigned char *)(a1 + 112) = 1;
  }
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 120) = *(long long *)((char *)a2 + 120);
  *(void *)(a1 + 136) = *((void *)a2 + 17);
  *((void *)a2 + 1std::__function::__value_func<BOOL ()(mimosa::Metadata const&)>::~__value_func[abi:ne180100]((void *)this + 5) = 0;
  *((void *)a2 + 16) = 0;
  *((void *)a2 + 17) = 0;
  uint64_t v8 = *((void *)a2 + 20);
  *(_OWORD *)(a1 + 144) = a2[9];
  *(void *)(a1 + 160) = v8;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  *(_OWORD *)(a1 + 168) = *(long long *)((char *)a2 + 168);
  *(void *)(a1 + 184) = *((void *)a2 + 23);
  *((void *)a2 + 2std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = 0;
  *((void *)a2 + 22) = 0;
  *((void *)a2 + 23) = 0;
  *(unsigned char *)(a1 + 192) = 0;
  *(unsigned char *)(a1 + 224) = 0;
  if (*((unsigned char *)a2 + 224))
  {
    std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>,unsigned char>,(std::__variant_detail::_Trait)1>::__move_constructor(a1 + 192, (uint64_t)(a2 + 12));
    *(unsigned char *)(a1 + 224) = 1;
  }
  memcpy((void *)(a1 + 232), (char *)a2 + 232, 0x11AuLL);
  return a1;
}

uint64_t std::__variant_detail::__alt<6ul,mimosa::v2::PacketState::PatchV7>::__alt[abi:ne180100]<mimosa::v2::PacketState::PatchV7>(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  long long v5 = *(long long *)((char *)a2 + 24);
  uint64_t v6 = *((void *)a2 + 5);
  *(unsigned char *)(a1 + 48) = 0;
  uint64_t v7 = a1 + 48;
  *(void *)(v7 - 8) = v6;
  *(_OWORD *)(v7 - 24) = v5;
  *(unsigned char *)(v7 + 32) = 0;
  if (*((unsigned char *)a2 + 80))
  {
    std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::vector<unsigned short>,unsigned char>,(std::__variant_detail::_Trait)1>::__move_constructor(v7, (uint64_t)(a2 + 3));
    *(unsigned char *)(a1 + 80) = 1;
  }
  *(unsigned char *)(a1 + 88) = 0;
  *(unsigned char *)(a1 + 112) = 0;
  if (*((unsigned char *)a2 + 112))
  {
    *(void *)(a1 + 88) = 0;
    *(void *)(a1 + 96) = 0;
    *(void *)(a1 + 104) = 0;
    *(_OWORD *)(a1 + 88) = *(long long *)((char *)a2 + 88);
    *(void *)(a1 + 104) = *((void *)a2 + 13);
    *((void *)a2 + 1std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = 0;
    *((void *)a2 + 12) = 0;
    *((void *)a2 + 13) = 0;
    *(unsigned char *)(a1 + 112) = 1;
  }
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 120) = *(long long *)((char *)a2 + 120);
  *(void *)(a1 + 136) = *((void *)a2 + 17);
  *((void *)a2 + 1std::__function::__value_func<BOOL ()(mimosa::Metadata const&)>::~__value_func[abi:ne180100]((void *)this + 5) = 0;
  *((void *)a2 + 16) = 0;
  *((void *)a2 + 17) = 0;
  uint64_t v8 = *((void *)a2 + 20);
  *(_OWORD *)(a1 + 144) = a2[9];
  *(void *)(a1 + 160) = v8;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  *(_OWORD *)(a1 + 168) = *(long long *)((char *)a2 + 168);
  *(void *)(a1 + 184) = *((void *)a2 + 23);
  *((void *)a2 + 2std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = 0;
  *((void *)a2 + 22) = 0;
  *((void *)a2 + 23) = 0;
  *(unsigned char *)(a1 + 192) = 0;
  *(unsigned char *)(a1 + 224) = 0;
  if (*((unsigned char *)a2 + 224))
  {
    std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>,unsigned char>,(std::__variant_detail::_Trait)1>::__move_constructor(a1 + 192, (uint64_t)(a2 + 12));
    *(unsigned char *)(a1 + 224) = 1;
  }
  memcpy((void *)(a1 + 232), (char *)a2 + 232, 0x13AuLL);
  return a1;
}

__n128 std::vector<unsigned short>::__move_assign(uint64_t a1, __n128 *a2)
{
  long long v4 = *(void **)a1;
  if (v4)
  {
    *(void *)(a1 + 8) = v4;
    operator delete(v4);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
  }
  __n128 result = *a2;
  *(__n128 *)a1 = *a2;
  *(void *)(a1 + 16) = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

__n128 std::__optional_storage_base<std::vector<mimosa::v2::OpticalSamplesV1SubpacketState::Patch::Sample>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<mimosa::v2::OpticalSamplesV1SubpacketState::Patch::Sample>,false>>(uint64_t a1, __n128 *a2)
{
  if (*(unsigned __int8 *)(a1 + 24) == a2[1].n128_u8[8])
  {
    if (*(unsigned char *)(a1 + 24))
    {
      result.n128_u64[0] = std::vector<unsigned short>::__move_assign(a1, a2).n128_u64[0];
    }
  }
  else if (*(unsigned char *)(a1 + 24))
  {
    long long v4 = *(void **)a1;
    if (*(void *)a1)
    {
      *(void *)(a1 + 8) = v4;
      operator delete(v4);
    }
    *(unsigned char *)(a1 + 24) = 0;
  }
  else
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    __n128 result = *a2;
    *(__n128 *)a1 = *a2;
    *(void *)(a1 + 16) = a2[1].n128_u64[0];
    a2->n128_u64[0] = 0;
    a2->n128_u64[1] = 0;
    a2[1].n128_u64[0] = 0;
    *(unsigned char *)(a1 + 24) = 1;
  }
  return result;
}

uint64_t std::__optional_storage_base<std::variant<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>,unsigned char>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::variant<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>,unsigned char>,false>>(uint64_t result, uint64_t a2)
{
  if (*(unsigned __int8 *)(result + 32) == *(unsigned __int8 *)(a2 + 32))
  {
    if (*(unsigned char *)(result + 32)) {
      return std::__variant_detail::__assignment<std::__variant_detail::__traits<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>,unsigned char>>::__generic_assign[abi:ne180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>,unsigned char>,(std::__variant_detail::_Trait)1>>(result, a2);
    }
  }
  else
  {
    if (*(unsigned char *)(result + 32))
    {
      __n128 result = std::__variant_detail::__dtor<std::__variant_detail::__traits<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>,unsigned char>,(std::__variant_detail::_Trait)1>::~__dtor(result);
      char v2 = 0;
    }
    else
    {
      __n128 result = std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>,unsigned char>,(std::__variant_detail::_Trait)1>::__move_constructor(result, a2);
      char v2 = 1;
    }
    *(unsigned char *)(result + 32) = v2;
  }
  return result;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>,unsigned char>>::__generic_assign[abi:ne180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>,unsigned char>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(unsigned int *)(result + 24);
  uint64_t v4 = *(unsigned int *)(a2 + 24);
  if (v3 == -1)
  {
    if (v4 == -1) {
      return result;
    }
  }
  else if (v4 == -1)
  {
    __n128 result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_26D4E43B0[v3])(&v6, result, a2);
    *(_DWORD *)(v2 + 24) = -1;
    return result;
  }
  uint64_t v5 = result;
  return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))off_26D4E43F0[v4])(&v5, result, a2);
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJNS_6vectorIN6mimosa2v219AccelSubpacketState12SampleHeaderENS_9allocatorISC_EEEEhEEEE16__generic_assignB8ne180100INS0_17__move_assignmentISG_LNS0_6_TraitE1EEEEEvOT_EUlRSM_OT0_E_JRNS0_6__baseILSK_1EJSF_hEEEOSU_EEEDcSM_DpT0_(uint64_t *a1, uint64_t a2, __n128 *a3)
{
  return std::__variant_detail::__assignment<std::__variant_detail::__traits<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>,unsigned char>>::__assign_alt[abi:ne180100]<0ul,std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>,std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>>(*a1, a2, a3);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJNS_6vectorIN6mimosa2v219AccelSubpacketState12SampleHeaderENS_9allocatorISC_EEEEhEEEE16__generic_assignB8ne180100INS0_17__move_assignmentISG_LNS0_6_TraitE1EEEEEvOT_EUlRSM_OT0_E_JRNS0_6__baseILSK_1EJSF_hEEEOSU_EEEDcSM_DpT0_(uint64_t *a1, unsigned char *a2, unsigned char *a3)
{
  uint64_t result = *a1;
  if (*(_DWORD *)(result + 24) != 1) {
    return std::__variant_detail::__assignment<std::__variant_detail::__traits<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>,unsigned char>>::__emplace[abi:ne180100]<1ul,unsigned char>(result, a3);
  }
  *a2 = *a3;
  return result;
}

double std::__variant_detail::__assignment<std::__variant_detail::__traits<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>,unsigned char>>::__assign_alt[abi:ne180100]<0ul,std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>,std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>>(uint64_t a1, uint64_t a2, __n128 *a3)
{
  if (*(_DWORD *)(a1 + 24)) {
    std::__variant_detail::__assignment<std::__variant_detail::__traits<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>,unsigned char>>::__emplace[abi:ne180100]<0ul,std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>>(a1, (uint64_t)a3);
  }
  else {
    *(void *)&double result = std::vector<unsigned short>::__move_assign(a2, a3).n128_u64[0];
  }
  return result;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>,unsigned char>>::__emplace[abi:ne180100]<0ul,std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 24);
  if (v4 != -1) {
    ((void (*)(char *, uint64_t))off_26D4E43B0[v4])(&v6, a1);
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  return a1;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>,unsigned char>>::__emplace[abi:ne180100]<1ul,unsigned char>(uint64_t a1, unsigned char *a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 24);
  if (v4 != -1) {
    ((void (*)(char *, uint64_t))off_26D4E43B0[v4])(&v6, a1);
  }
  *(_DWORD *)(a1 + 24) = -1;
  *(unsigned char *)a1 = *a2;
  *(_DWORD *)(a1 + 24) = 1;
  return a1;
}

uint64_t std::__optional_storage_base<std::variant<std::vector<unsigned short>,unsigned char>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::variant<std::vector<unsigned short>,unsigned char>,false>>(uint64_t result, uint64_t a2)
{
  if (*(unsigned __int8 *)(result + 32) == *(unsigned __int8 *)(a2 + 32))
  {
    if (*(unsigned char *)(result + 32)) {
      return std::__variant_detail::__assignment<std::__variant_detail::__traits<std::vector<unsigned short>,unsigned char>>::__generic_assign[abi:ne180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<std::vector<unsigned short>,unsigned char>,(std::__variant_detail::_Trait)1>>(result, a2);
    }
  }
  else
  {
    if (*(unsigned char *)(result + 32))
    {
      double result = std::__variant_detail::__dtor<std::__variant_detail::__traits<std::vector<unsigned short>,unsigned char>,(std::__variant_detail::_Trait)1>::~__dtor(result);
      char v2 = 0;
    }
    else
    {
      double result = std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::vector<unsigned short>,unsigned char>,(std::__variant_detail::_Trait)1>::__move_constructor(result, a2);
      char v2 = 1;
    }
    *(unsigned char *)(result + 32) = v2;
  }
  return result;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<std::vector<unsigned short>,unsigned char>>::__generic_assign[abi:ne180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<std::vector<unsigned short>,unsigned char>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(unsigned int *)(result + 24);
  uint64_t v4 = *(unsigned int *)(a2 + 24);
  if (v3 == -1)
  {
    if (v4 == -1) {
      return result;
    }
  }
  else if (v4 == -1)
  {
    double result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_26D4E43D0[v3])(&v6, result, a2);
    *(_DWORD *)(v2 + 24) = -1;
    return result;
  }
  uint64_t v5 = result;
  return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))off_26D4E4400[v4])(&v5, result, a2);
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJNS_6vectorItNS_9allocatorItEEEEhEEEE16__generic_assignB8ne180100INS0_17__move_assignmentISC_LNS0_6_TraitE1EEEEEvOT_EUlRSI_OT0_E_JRNS0_6__baseILSG_1EJSB_hEEEOSQ_EEEDcSI_DpT0_(uint64_t *a1, uint64_t a2, __n128 *a3)
{
  return std::__variant_detail::__assignment<std::__variant_detail::__traits<std::vector<unsigned short>,unsigned char>>::__assign_alt[abi:ne180100]<0ul,std::vector<unsigned short>,std::vector<unsigned short>>(*a1, a2, a3);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJNS_6vectorItNS_9allocatorItEEEEhEEEE16__generic_assignB8ne180100INS0_17__move_assignmentISC_LNS0_6_TraitE1EEEEEvOT_EUlRSI_OT0_E_JRNS0_6__baseILSG_1EJSB_hEEEOSQ_EEEDcSI_DpT0_(uint64_t *a1, unsigned char *a2, unsigned char *a3)
{
  uint64_t result = *a1;
  if (*(_DWORD *)(result + 24) != 1) {
    return std::__variant_detail::__assignment<std::__variant_detail::__traits<std::vector<unsigned short>,unsigned char>>::__emplace[abi:ne180100]<1ul,unsigned char>(result, a3);
  }
  *a2 = *a3;
  return result;
}

double std::__variant_detail::__assignment<std::__variant_detail::__traits<std::vector<unsigned short>,unsigned char>>::__assign_alt[abi:ne180100]<0ul,std::vector<unsigned short>,std::vector<unsigned short>>(uint64_t a1, uint64_t a2, __n128 *a3)
{
  if (*(_DWORD *)(a1 + 24)) {
    std::__variant_detail::__assignment<std::__variant_detail::__traits<std::vector<unsigned short>,unsigned char>>::__emplace[abi:ne180100]<0ul,std::vector<unsigned short>>(a1, (uint64_t)a3);
  }
  else {
    *(void *)&double result = std::vector<unsigned short>::__move_assign(a2, a3).n128_u64[0];
  }
  return result;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<std::vector<unsigned short>,unsigned char>>::__emplace[abi:ne180100]<0ul,std::vector<unsigned short>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 24);
  if (v4 != -1) {
    ((void (*)(char *, uint64_t))off_26D4E43D0[v4])(&v6, a1);
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  return a1;
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<std::vector<unsigned short>,unsigned char>>::__emplace[abi:ne180100]<1ul,unsigned char>(uint64_t a1, unsigned char *a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 24);
  if (v4 != -1) {
    ((void (*)(char *, uint64_t))off_26D4E43D0[v4])(&v6, a1);
  }
  *(_DWORD *)(a1 + 24) = -1;
  *(unsigned char *)a1 = *a2;
  *(_DWORD *)(a1 + 24) = 1;
  return a1;
}

void mimosa::v2::encode(mimosa::v2 *this@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v4 = *((void *)this + 1);
  if (*(void *)this == v4) {
    mimosa::v2::encode();
  }
  uint64_t v6 = 4 * (v4 - *(void *)this);
  if (v6 != *((void *)this + 4) - *((void *)this + 3)) {
    mimosa::v2::encode();
  }
  if (v6 != *((void *)this + 7) - *((void *)this + 6)) {
    mimosa::v2::encode();
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::vector<std::byte>::reserve(a2, 0x40uLL);
  mimosa::v2::nanite::leb128_encode<std::back_insert_iterator<std::vector<std::byte>>>(*((void *)this + 1) - *(void *)this, a2);
  unsigned __int8 v49 = 0;
  __int16 v50 = 0;
  uint64_t v51 = 0;
  std::vector<std::byte>::reserve((unint64_t *)&v49, 0x40uLL);
  uint64_t v7 = *(unsigned __int8 **)this;
  uint64_t v8 = (unsigned __int8 *)*((void *)this + 1);
  uint64_t p_p = 1;
  unsigned int v53 = &v49;
  __int16 v54 = 0;
  char v55 = 0;
  mimosa::v2::nanite::Codec<unsigned char,1ull,2ull,1ull,2ull,2ull,1ull,1ull,1ull,1ull,1ull,2ull,1ull,2ull,29ull>::Encoder<std::back_insert_iterator<std::vector<std::byte>>>::encode<std::__wrap_iter<unsigned char const*>>((uint64_t)&p_p, v7, v8);
  mimosa::v2::nanite::Codec<unsigned short,9040ull,1230ull,2050ull,130ull,350ull,30ull,130ull,50ull,60ull,10ull,50ull,20ull,50ull,40ull,30ull,30ull,20ull,40ull,1ull,10ull,1ull,40ull,1ull,10ull,1ull,10ull,1ull,1ull,1ull,10ull,1ull,1ull>::Encoder<std::back_insert_iterator<std::vector<std::byte>>>::finalise((uint64_t)&p_p);
  mimosa::v2::nanite::leb128_encode<std::back_insert_iterator<std::vector<std::byte>>>(v50 - (unsigned char *)v49, a2);
  long long v9 = v49;
  long long v10 = v50;
  uint64_t p_p = (uint64_t)a2;
  if (v49 != v50)
  {
    do
      std::back_insert_iterator<std::vector<std::byte>>::operator=[abi:ne180100]((unint64_t **)&p_p, v9++);
    while (v9 != v10);
    long long v9 = v49;
  }
  __int16 v50 = v9;
  __p = 0;
  unint64_t v47 = 0;
  unint64_t v48 = 0;
  long long v11 = (_DWORD *)*((void *)this + 3);
  if (v11 == *((_DWORD **)this + 4))
  {
    unint64_t v41 = 0;
    unsigned __int8 v40 = 0;
    goto LABEL_66;
  }
  do
  {
    switch(*v11)
    {
      case 0:
        long long v13 = v47;
        if (v47 >= v48)
        {
          unint64_t v15 = (unint64_t)__p;
          int64_t v16 = v47 - (unsigned char *)__p;
          uint64_t v17 = v47 - (unsigned char *)__p + 1;
          if (v17 < 0) {
            std::vector<mimosa::OpticalSampleV1>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v18 = v48 - (unsigned char *)__p;
          if (2 * (v48 - (unsigned char *)__p) > (unint64_t)v17) {
            uint64_t v17 = 2 * v18;
          }
          if (v18 >= 0x3FFFFFFFFFFFFFFFLL) {
            size_t v19 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            size_t v19 = v17;
          }
          if (v19) {
            long long v20 = (char *)operator new(v19);
          }
          else {
            long long v20 = 0;
          }
          __n128 v30 = &v20[v16];
          long long v31 = &v20[v16];
          *long long v31 = 16;
          long long v21 = v31 + 1;
          if (v13 == (char *)v15) {
            goto LABEL_60;
          }
          long long v32 = &v13[~v15];
          do
          {
            char v33 = *--v13;
            (v32--)[(void)v20] = v33;
          }
          while (v13 != (char *)v15);
          goto LABEL_59;
        }
        char v14 = 16;
LABEL_28:
        *long long v13 = v14;
        long long v21 = v13 + 1;
LABEL_62:
        unint64_t v47 = v21;
        goto LABEL_63;
      case 0x8040201:
        long long v13 = v47;
        if (v47 >= v48)
        {
          unint64_t v22 = (unint64_t)__p;
          int64_t v23 = v47 - (unsigned char *)__p;
          uint64_t v24 = v47 - (unsigned char *)__p + 1;
          if (v24 < 0) {
            std::vector<mimosa::OpticalSampleV1>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v25 = v48 - (unsigned char *)__p;
          if (2 * (v48 - (unsigned char *)__p) > (unint64_t)v24) {
            uint64_t v24 = 2 * v25;
          }
          if (v25 >= 0x3FFFFFFFFFFFFFFFLL) {
            size_t v19 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            size_t v19 = v24;
          }
          if (v19) {
            long long v20 = (char *)operator new(v19);
          }
          else {
            long long v20 = 0;
          }
          __n128 v30 = &v20[v23];
          unsigned __int8 v34 = &v20[v23];
          char *v34 = 17;
          long long v21 = v34 + 1;
          if (v13 == (char *)v22) {
            goto LABEL_60;
          }
          unint64_t v35 = &v13[~v22];
          do
          {
            char v36 = *--v13;
            (v35--)[(void)v20] = v36;
          }
          while (v13 != (char *)v22);
          goto LABEL_59;
        }
        char v14 = 17;
        goto LABEL_28;
      case 0x90006:
        long long v13 = v47;
        if (v47 < v48)
        {
          char v14 = 18;
          goto LABEL_28;
        }
        unint64_t v26 = (unint64_t)__p;
        int64_t v27 = v47 - (unsigned char *)__p;
        uint64_t v28 = v47 - (unsigned char *)__p + 1;
        if (v28 < 0) {
          std::vector<mimosa::OpticalSampleV1>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v29 = v48 - (unsigned char *)__p;
        if (2 * (v48 - (unsigned char *)__p) > (unint64_t)v28) {
          uint64_t v28 = 2 * v29;
        }
        if (v29 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v19 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v19 = v28;
        }
        if (v19) {
          long long v20 = (char *)operator new(v19);
        }
        else {
          long long v20 = 0;
        }
        __n128 v30 = &v20[v27];
        unsigned __int8 v37 = &v20[v27];
        *unsigned __int8 v37 = 18;
        long long v21 = v37 + 1;
        if (v13 == (char *)v26)
        {
LABEL_60:
          __p = v30;
          unint64_t v47 = v21;
          unint64_t v48 = &v20[v19];
          if (v13) {
            operator delete(v13);
          }
          goto LABEL_62;
        }
        __int16 v38 = &v13[~v26];
        do
        {
          char v39 = *--v13;
          (v38--)[(void)v20] = v39;
        }
        while (v13 != (char *)v26);
LABEL_59:
        long long v13 = (char *)__p;
        __n128 v30 = v20;
        goto LABEL_60;
    }
    uint64_t v12 = 0;
    uint64_t p_p = (uint64_t)&__p;
    do
      std::back_insert_iterator<std::vector<std::byte>>::operator=[abi:ne180100]((unint64_t **)&p_p, (unsigned char *)v11 + v12++);
    while (v12 != 4);
LABEL_63:
    ++v11;
  }
  while (v11 != *((_DWORD **)this + 4));
  unsigned __int8 v40 = (unsigned __int8 *)__p;
  unint64_t v41 = (unsigned __int8 *)v47;
LABEL_66:
  uint64_t p_p = 1;
  unsigned int v53 = &v49;
  __int16 v54 = 0;
  char v55 = 0;
  mimosa::v2::nanite::Codec<unsigned char,1ull,1ull,1ull,1ull,1ull,1ull,1ull,1ull,1ull,1ull,1ull,1ull,1ull,1ull,1ull,1ull,230ull,210ull,30ull>::Encoder<std::back_insert_iterator<std::vector<std::byte>>>::encode<std::__wrap_iter<unsigned char *>>((uint64_t)&p_p, v40, v41);
  mimosa::v2::nanite::Codec<unsigned short,9040ull,1230ull,2050ull,130ull,350ull,30ull,130ull,50ull,60ull,10ull,50ull,20ull,50ull,40ull,30ull,30ull,20ull,40ull,1ull,10ull,1ull,40ull,1ull,10ull,1ull,10ull,1ull,1ull,1ull,10ull,1ull,1ull>::Encoder<std::back_insert_iterator<std::vector<std::byte>>>::finalise((uint64_t)&p_p);
  mimosa::v2::nanite::leb128_encode<std::back_insert_iterator<std::vector<std::byte>>>(v50 - (unsigned char *)v49, a2);
  mimosa::v2::nanite::leb128_encode<std::back_insert_iterator<std::vector<std::byte>>>(v47 - (unsigned char *)__p, a2);
  unint64_t v42 = v49;
  unsigned __int8 v43 = v50;
  uint64_t p_p = (uint64_t)a2;
  while (v42 != v43)
    std::back_insert_iterator<std::vector<std::byte>>::operator=[abi:ne180100]((unint64_t **)&p_p, v42++);
  __int16 v44 = (unsigned __int8 *)*((void *)this + 6);
  unint64_t v45 = (unsigned __int8 *)*((void *)this + 7);
  uint64_t p_p = 1;
  unsigned int v53 = (void **)a2;
  __int16 v54 = 0;
  char v55 = 0;
  mimosa::v2::nanite::Codec<unsigned char,1800ull,80ull,1ull>::Encoder<std::back_insert_iterator<std::vector<std::byte>>>::encode<std::__wrap_iter<unsigned char const*>>((uint64_t)&p_p, v44, v45);
  mimosa::v2::nanite::Codec<unsigned short,9040ull,1230ull,2050ull,130ull,350ull,30ull,130ull,50ull,60ull,10ull,50ull,20ull,50ull,40ull,30ull,30ull,20ull,40ull,1ull,10ull,1ull,40ull,1ull,10ull,1ull,10ull,1ull,1ull,1ull,10ull,1ull,1ull>::Encoder<std::back_insert_iterator<std::vector<std::byte>>>::finalise((uint64_t)&p_p);
  if (__p)
  {
    unint64_t v47 = (char *)__p;
    operator delete(__p);
  }
  if (v49)
  {
    __int16 v50 = v49;
    operator delete(v49);
  }
}

void sub_222785364(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  if (a13) {
    operator delete(a13);
  }
  int64_t v16 = *(void **)v14;
  if (*(void *)v14)
  {
    *(void *)(v14 + 8) = v16;
    operator delete(v16);
  }
  _Unwind_Resume(exception_object);
}

void mimosa::v2::decode_light_path_semantics(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (!a2) {
    mimosa::v2::decode_light_path_semantics();
  }
  uint64_t v4 = &a1[a2];
  unsigned __int8 v5 = mimosa::v2::nanite::leb128_decode<unsigned short,std::__wrap_iter<std::byte const*>>(a1, &a1[a2]);
  unsigned __int16 v7 = mimosa::v2::nanite::leb128_decode<unsigned short,std::__wrap_iter<std::byte const*>>(v6, v4);
  uint64_t v9 = v8;
  *(_OWORD *)a3 = 0u;
  *((_OWORD *)a3 + std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = 0u;
  *((_OWORD *)a3 + 2) = 0u;
  *((_OWORD *)a3 + 3) = 0u;
  a3[8] = 0;
  if (v5)
  {
    std::vector<std::byte>::__append(a3, v5);
    uint64_t v10 = *a3;
    uint64_t v11 = a3[1];
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t v10 = 0;
  }
  uint64_t v12 = (unsigned __int8 *)(v9 + v7);
  mimosa::v2::nanite::Codec<unsigned char,1ull,2ull,1ull,2ull,2ull,1ull,1ull,1ull,1ull,1ull,2ull,1ull,2ull,29ull>::decode<std::__wrap_iter<std::byte const*>,std::__wrap_iter<unsigned char *>>(v9, (uint64_t)v12, v10, v11);
  unsigned __int16 v13 = mimosa::v2::nanite::leb128_decode<unsigned short,std::__wrap_iter<std::byte const*>>(v12, v4);
  unsigned __int16 v15 = mimosa::v2::nanite::leb128_decode<unsigned short,std::__wrap_iter<std::byte const*>>(v14, v4);
  uint64_t v17 = v16;
  __p = 0;
  unsigned __int8 v52 = 0;
  uint64_t v53 = 0;
  if (v15)
  {
    std::vector<std::byte>::__append((unint64_t *)&__p, v15);
    unint64_t v18 = __p;
    uint64_t v19 = (uint64_t)v52;
  }
  else
  {
    uint64_t v19 = 0;
    unint64_t v18 = 0;
  }
  uint64_t v20 = v17 + v13;
  mimosa::v2::nanite::Codec<unsigned char,1ull,1ull,1ull,1ull,1ull,1ull,1ull,1ull,1ull,1ull,1ull,1ull,1ull,1ull,1ull,1ull,230ull,210ull,30ull>::decode<std::__wrap_iter<std::byte const*>,std::__wrap_iter<unsigned char *>>(v17, v20, (uint64_t)v18, v19);
  long long v21 = a3 + 3;
  std::vector<std::byte>::reserve(a3 + 3, 4 * v5);
  uint64_t v47 = v20;
  unint64_t v48 = v4;
  unint64_t v22 = (unsigned __int8 *)__p;
  int64_t v23 = v52;
  if (__p != v52)
  {
    unsigned __int8 v49 = a3;
    __int16 v50 = a3 + 3;
    do
    {
      int v24 = *v22;
      switch(v24)
      {
        case 18:
          uint64_t v27 = 0;
          __int16 v54 = v21;
          do
            std::back_insert_iterator<std::vector<std::byte>>::operator=[abi:ne180100](&v54, &mimosa::v2::pd_set_pattern_2[v27++]);
          while (v27 != 4);
          break;
        case 17:
          uint64_t v26 = 0;
          __int16 v54 = v21;
          do
            std::back_insert_iterator<std::vector<std::byte>>::operator=[abi:ne180100](&v54, &mimosa::v2::pd_set_pattern_1[v26++]);
          while (v26 != 4);
          break;
        case 16:
          uint64_t v25 = 0;
          __int16 v54 = v21;
          do
            std::back_insert_iterator<std::vector<std::byte>>::operator=[abi:ne180100](&v54, &mimosa::v2::pd_set_pattern_0[v25++]);
          while (v25 != 4);
          break;
        default:
          unint64_t v29 = (unsigned char *)a3[4];
          unint64_t v28 = a3[5];
          if ((unint64_t)v29 >= v28)
          {
            unint64_t v31 = *v21;
            long long v32 = &v29[-*v21];
            unint64_t v33 = (unint64_t)(v32 + 1);
            if ((uint64_t)(v32 + 1) < 0) {
              std::vector<mimosa::OpticalSampleV1>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v34 = v28 - v31;
            if (2 * v34 > v33) {
              unint64_t v33 = 2 * v34;
            }
            if (v34 >= 0x3FFFFFFFFFFFFFFFLL) {
              size_t v35 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              size_t v35 = v33;
            }
            if (v35) {
              char v36 = (char *)operator new(v35);
            }
            else {
              char v36 = 0;
            }
            unsigned __int8 v37 = &v32[(void)v36];
            __int16 v38 = &v32[(void)v36];
            unsigned char *v38 = v24;
            __n128 v30 = v38 + 1;
            if (v29 != (unsigned char *)v31)
            {
              char v39 = &v29[~v31];
              do
              {
                char v40 = *--v29;
                (v39--)[(void)v36] = v40;
              }
              while (v29 != (unsigned char *)v31);
              unint64_t v29 = (unsigned char *)*v50;
              unsigned __int8 v37 = v36;
            }
            unint64_t v41 = &v36[v35];
            a3 = v49;
            v49[3] = v37;
            v49[4] = v30;
            v49[5] = v41;
            if (v29) {
              operator delete(v29);
            }
          }
          else
          {
            unsigned char *v29 = v24;
            __n128 v30 = v29 + 1;
          }
          a3[4] = v30;
          long long v21 = v50;
          break;
      }
      ++v22;
    }
    while (v22 != v23);
  }
  uint64_t v42 = a3[6];
  unint64_t v43 = a3[4] - a3[3];
  uint64_t v44 = a3[7];
  if (v43 <= v44 - v42)
  {
    uint64_t v45 = v47;
    uint64_t v46 = (uint64_t)v48;
    if (v43 < v44 - v42)
    {
      uint64_t v44 = v42 + v43;
      a3[7] = v42 + v43;
    }
  }
  else
  {
    std::vector<std::byte>::__append(a3 + 6, v43 - (v44 - v42));
    uint64_t v45 = v47;
    uint64_t v46 = (uint64_t)v48;
    uint64_t v42 = a3[6];
    uint64_t v44 = a3[7];
  }
  mimosa::v2::nanite::Codec<unsigned char,1800ull,80ull,1ull>::decode<std::__wrap_iter<std::byte const*>,std::__wrap_iter<unsigned char *>>(v45, v46, v42, v44);
  if (__p)
  {
    unsigned __int8 v52 = (unsigned __int8 *)__p;
    operator delete(__p);
  }
}

void sub_2227856CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  mimosa::LightPathSemantics::~LightPathSemantics(v14);
  _Unwind_Resume(a1);
}

uint64_t mimosa::v2::nanite::leb128_decode<unsigned short,std::__wrap_iter<std::byte const*>>(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v3 = 0;
  int v4 = 0;
  while (1)
  {
    if (a1 == a2)
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::range_error::range_error[abi:ne180100](exception, "no more encoded bytes available");
      uint64_t v8 = (struct type_info *)off_2646269A8;
      uint64_t v9 = (void (*)(void *))MEMORY[0x263F8C050];
      goto LABEL_9;
    }
    unsigned int v5 = *a1;
    v4 |= (v5 & 0x7F) << v3;
    if (v3 == 14) {
      break;
    }
    ++a1;
    v3 += 7;
    if ((v5 & 0x80) == 0) {
      return (unsigned __int16)v4;
    }
  }
  if (v5 >= 4)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "invalid input");
    uint64_t v8 = (struct type_info *)MEMORY[0x263F8C1F0];
    uint64_t v9 = (void (*)(void *))MEMORY[0x263F8C070];
LABEL_9:
    __cxa_throw(exception, v8, v9);
  }
  return (unsigned __int16)v4;
}

void sub_2227857F4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t mimosa::v2::nanite::Codec<unsigned char,1ull,2ull,1ull,2ull,2ull,1ull,1ull,1ull,1ull,1ull,2ull,1ull,2ull,29ull>::decode<std::__wrap_iter<std::byte const*>,std::__wrap_iter<unsigned char *>>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v4 = 0;
  unint64_t v5 = 0;
  unint64_t v6 = 0;
  int v7 = 3;
  do
  {
    if (!v4)
    {
      if (a2 == result)
      {
LABEL_54:
        exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "no more encoded bytes available");
        __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      unsigned int v8 = *(unsigned __int8 *)--a2;
      unint64_t v5 = v8;
      char v4 = 8;
    }
    *((void *)&v9 + std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = v5;
    *(void *)&long long v9 = v6;
    unint64_t v6 = v9 >> 1;
    v5 >>= 1;
    --v4;
    --v7;
  }
  while ((_BYTE)v7);
  for (unint64_t i = v6 >> 61; (_BYTE)i; LODWORD(i) = i - 1)
  {
    if (!v4)
    {
      if (a2 == result) {
        goto LABEL_54;
      }
      unsigned int v11 = *(unsigned __int8 *)--a2;
      unint64_t v5 = v11;
      char v4 = 8;
    }
    v5 >>= 1;
    --v4;
  }
  unint64_t v12 = 0;
  int v13 = 12;
  do
  {
    if (!v4)
    {
      if (a2 == result) {
        goto LABEL_54;
      }
      unsigned int v14 = *(unsigned __int8 *)--a2;
      unint64_t v5 = v14;
      char v4 = 8;
    }
    *((void *)&v15 + std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = v5;
    *(void *)&long long v15 = v12;
    unint64_t v12 = v15 >> 1;
    v5 >>= 1;
    --v4;
    --v13;
  }
  while ((_BYTE)v13);
  unint64_t v16 = v12 >> 52;
  if (v4 || a2 != result)
  {
    uint64_t v17 = 0;
    int v18 = 12;
    do
    {
      if (!v4)
      {
        if (a2 == result) {
          goto LABEL_54;
        }
        unsigned int v19 = *(unsigned __int8 *)--a2;
        unint64_t v5 = v19;
        char v4 = 8;
      }
      *((void *)&v20 + std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = v5;
      *(void *)&long long v20 = v17;
      uint64_t v17 = v20 >> 1;
      v5 >>= 1;
      --v4;
      --v18;
    }
    while ((_BYTE)v18);
    *((void *)&v21 + std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = v16;
    *(void *)&long long v21 = v17;
    unint64_t v16 = v21 >> 52;
  }
  else
  {
    char v4 = 0;
    a2 = result;
  }
  if (a4 != a3)
  {
    char v22 = 0;
    LOBYTE(v23) = 0;
    do
    {
      unsigned __int16 v24 = v16 & 0xFFF;
      unint64_t v25 = v16 >> 12;
      if (v22)
      {
        unint64_t v26 = v16 >> 4;
        unint64_t v16 = 16 * v25 + (unsigned __int16)(v24 - 16 * (v16 >> 4));
        if (!--v22)
        {
          char v22 = 0;
          *(unsigned char *)--a4 = v26 + v23;
        }
        goto LABEL_42;
      }
      uint64_t v27 = mimosa::v2::nanite::Codec<unsigned char,1ull,2ull,1ull,2ull,2ull,1ull,1ull,1ull,1ull,1ull,2ull,1ull,2ull,29ull>::decode_table[v16 & 0xFFF];
      if (v27)
      {
        v24 -= mimosa::v2::nanite::Codec<unsigned char,1ull,2ull,1ull,2ull,2ull,1ull,1ull,1ull,1ull,1ull,2ull,1ull,2ull,29ull>::cumulative_scaled_probabilities[(v27 - 1)];
        if (v27 >= 0xF8)
        {
          char v22 = v27 + 9;
          unint64_t v23 = (0x101010101010101uLL >> (-8 * v27) << 8) | 0xF8;
          if (v27 == 248) {
            uint64_t v28 = 248;
          }
          else {
            uint64_t v28 = v27;
          }
          if (v27 == 248)
          {
            LOBYTE(v23) = -8;
            char v22 = 1;
          }
          goto LABEL_41;
        }
        uint64_t v28 = v27;
      }
      else
      {
        uint64_t v28 = 0;
      }
      char v22 = 0;
      *(unsigned char *)--a4 = v27;
LABEL_41:
      unint64_t v16 = v25
          * mimosa::v2::nanite::Codec<unsigned char,1ull,2ull,1ull,2ull,2ull,1ull,1ull,1ull,1ull,1ull,2ull,1ull,2ull,29ull>::scaled_probabilities[v28]
          + v24;
LABEL_42:
      if (v16 <= 0xFFF)
      {
        if (v4 || a2 != result)
        {
          uint64_t v29 = 0;
          int v30 = 12;
          do
          {
            if (!v4)
            {
              if (a2 == result) {
                goto LABEL_54;
              }
              unsigned int v31 = *(unsigned __int8 *)--a2;
              unint64_t v5 = v31;
              char v4 = 8;
            }
            *((void *)&v32 + std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = v5;
            *(void *)&long long v32 = v29;
            uint64_t v29 = v32 >> 1;
            v5 >>= 1;
            --v4;
            --v30;
          }
          while ((_BYTE)v30);
          *((void *)&v33 + std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = v16;
          *(void *)&long long v33 = v29;
          unint64_t v16 = v33 >> 52;
        }
        else
        {
          char v4 = 0;
          a2 = result;
        }
      }
    }
    while (a4 != a3);
  }
  return result;
}

void sub_222785B1C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t mimosa::v2::nanite::Codec<unsigned char,1ull,1ull,1ull,1ull,1ull,1ull,1ull,1ull,1ull,1ull,1ull,1ull,1ull,1ull,1ull,1ull,230ull,210ull,30ull>::decode<std::__wrap_iter<std::byte const*>,std::__wrap_iter<unsigned char *>>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v4 = 0;
  unint64_t v5 = 0;
  unint64_t v6 = 0;
  int v7 = 3;
  do
  {
    if (!v4)
    {
      if (a2 == result)
      {
LABEL_54:
        exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "no more encoded bytes available");
        __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      unsigned int v8 = *(unsigned __int8 *)--a2;
      unint64_t v5 = v8;
      char v4 = 8;
    }
    *((void *)&v9 + std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = v5;
    *(void *)&long long v9 = v6;
    unint64_t v6 = v9 >> 1;
    v5 >>= 1;
    --v4;
    --v7;
  }
  while ((_BYTE)v7);
  for (unint64_t i = v6 >> 61; (_BYTE)i; LODWORD(i) = i - 1)
  {
    if (!v4)
    {
      if (a2 == result) {
        goto LABEL_54;
      }
      unsigned int v11 = *(unsigned __int8 *)--a2;
      unint64_t v5 = v11;
      char v4 = 8;
    }
    v5 >>= 1;
    --v4;
  }
  unint64_t v12 = 0;
  int v13 = 12;
  do
  {
    if (!v4)
    {
      if (a2 == result) {
        goto LABEL_54;
      }
      unsigned int v14 = *(unsigned __int8 *)--a2;
      unint64_t v5 = v14;
      char v4 = 8;
    }
    *((void *)&v15 + std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = v5;
    *(void *)&long long v15 = v12;
    unint64_t v12 = v15 >> 1;
    v5 >>= 1;
    --v4;
    --v13;
  }
  while ((_BYTE)v13);
  unint64_t v16 = v12 >> 52;
  if (v4 || a2 != result)
  {
    uint64_t v17 = 0;
    int v18 = 12;
    do
    {
      if (!v4)
      {
        if (a2 == result) {
          goto LABEL_54;
        }
        unsigned int v19 = *(unsigned __int8 *)--a2;
        unint64_t v5 = v19;
        char v4 = 8;
      }
      *((void *)&v20 + std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = v5;
      *(void *)&long long v20 = v17;
      uint64_t v17 = v20 >> 1;
      v5 >>= 1;
      --v4;
      --v18;
    }
    while ((_BYTE)v18);
    *((void *)&v21 + std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = v16;
    *(void *)&long long v21 = v17;
    unint64_t v16 = v21 >> 52;
  }
  else
  {
    char v4 = 0;
    a2 = result;
  }
  if (a4 != a3)
  {
    char v22 = 0;
    LOBYTE(v23) = 0;
    do
    {
      unsigned __int16 v24 = v16 & 0xFFF;
      unint64_t v25 = v16 >> 12;
      if (v22)
      {
        unint64_t v26 = v16 >> 4;
        unint64_t v16 = 16 * v25 + (unsigned __int16)(v24 - 16 * (v16 >> 4));
        if (!--v22)
        {
          char v22 = 0;
          *(unsigned char *)--a4 = v26 + v23;
        }
        goto LABEL_42;
      }
      uint64_t v27 = mimosa::v2::nanite::Codec<unsigned char,1ull,1ull,1ull,1ull,1ull,1ull,1ull,1ull,1ull,1ull,1ull,1ull,1ull,1ull,1ull,1ull,230ull,210ull,30ull>::decode_table[v16 & 0xFFF];
      if (v27)
      {
        v24 -= mimosa::v2::nanite::Codec<unsigned char,1ull,1ull,1ull,1ull,1ull,1ull,1ull,1ull,1ull,1ull,1ull,1ull,1ull,1ull,1ull,1ull,230ull,210ull,30ull>::cumulative_scaled_probabilities[(v27 - 1)];
        if (v27 >= 0xF8)
        {
          char v22 = v27 + 9;
          unint64_t v23 = (0x101010101010101uLL >> (-8 * v27) << 8) | 0xF8;
          if (v27 == 248) {
            uint64_t v28 = 248;
          }
          else {
            uint64_t v28 = v27;
          }
          if (v27 == 248)
          {
            LOBYTE(v23) = -8;
            char v22 = 1;
          }
          goto LABEL_41;
        }
        uint64_t v28 = v27;
      }
      else
      {
        uint64_t v28 = 0;
      }
      char v22 = 0;
      *(unsigned char *)--a4 = v27;
LABEL_41:
      unint64_t v16 = v25
          * mimosa::v2::nanite::Codec<unsigned char,1ull,1ull,1ull,1ull,1ull,1ull,1ull,1ull,1ull,1ull,1ull,1ull,1ull,1ull,1ull,1ull,230ull,210ull,30ull>::scaled_probabilities[v28]
          + v24;
LABEL_42:
      if (v16 <= 0xFFF)
      {
        if (v4 || a2 != result)
        {
          uint64_t v29 = 0;
          int v30 = 12;
          do
          {
            if (!v4)
            {
              if (a2 == result) {
                goto LABEL_54;
              }
              unsigned int v31 = *(unsigned __int8 *)--a2;
              unint64_t v5 = v31;
              char v4 = 8;
            }
            *((void *)&v32 + std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = v5;
            *(void *)&long long v32 = v29;
            uint64_t v29 = v32 >> 1;
            v5 >>= 1;
            --v4;
            --v30;
          }
          while ((_BYTE)v30);
          *((void *)&v33 + std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = v16;
          *(void *)&long long v33 = v29;
          unint64_t v16 = v33 >> 52;
        }
        else
        {
          char v4 = 0;
          a2 = result;
        }
      }
    }
    while (a4 != a3);
  }
  return result;
}

void sub_222785E50(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t mimosa::v2::nanite::Codec<unsigned char,1800ull,80ull,1ull>::decode<std::__wrap_iter<std::byte const*>,std::__wrap_iter<unsigned char *>>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v4 = 0;
  unint64_t v5 = 0;
  unint64_t v6 = 0;
  int v7 = 3;
  do
  {
    if (!v4)
    {
      if (a2 == result)
      {
LABEL_54:
        exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "no more encoded bytes available");
        __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      unsigned int v8 = *(unsigned __int8 *)--a2;
      unint64_t v5 = v8;
      char v4 = 8;
    }
    *((void *)&v9 + std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = v5;
    *(void *)&long long v9 = v6;
    unint64_t v6 = v9 >> 1;
    v5 >>= 1;
    --v4;
    --v7;
  }
  while ((_BYTE)v7);
  for (unint64_t i = v6 >> 61; (_BYTE)i; LODWORD(i) = i - 1)
  {
    if (!v4)
    {
      if (a2 == result) {
        goto LABEL_54;
      }
      unsigned int v11 = *(unsigned __int8 *)--a2;
      unint64_t v5 = v11;
      char v4 = 8;
    }
    v5 >>= 1;
    --v4;
  }
  unint64_t v12 = 0;
  int v13 = 12;
  do
  {
    if (!v4)
    {
      if (a2 == result) {
        goto LABEL_54;
      }
      unsigned int v14 = *(unsigned __int8 *)--a2;
      unint64_t v5 = v14;
      char v4 = 8;
    }
    *((void *)&v15 + std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = v5;
    *(void *)&long long v15 = v12;
    unint64_t v12 = v15 >> 1;
    v5 >>= 1;
    --v4;
    --v13;
  }
  while ((_BYTE)v13);
  unint64_t v16 = v12 >> 52;
  if (v4 || a2 != result)
  {
    uint64_t v17 = 0;
    int v18 = 12;
    do
    {
      if (!v4)
      {
        if (a2 == result) {
          goto LABEL_54;
        }
        unsigned int v19 = *(unsigned __int8 *)--a2;
        unint64_t v5 = v19;
        char v4 = 8;
      }
      *((void *)&v20 + std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = v5;
      *(void *)&long long v20 = v17;
      uint64_t v17 = v20 >> 1;
      v5 >>= 1;
      --v4;
      --v18;
    }
    while ((_BYTE)v18);
    *((void *)&v21 + std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = v16;
    *(void *)&long long v21 = v17;
    unint64_t v16 = v21 >> 52;
  }
  else
  {
    char v4 = 0;
    a2 = result;
  }
  if (a4 != a3)
  {
    char v22 = 0;
    LOBYTE(v23) = 0;
    do
    {
      unsigned __int16 v24 = v16 & 0xFFF;
      unint64_t v25 = v16 >> 12;
      if (v22)
      {
        unint64_t v26 = v16 >> 4;
        unint64_t v16 = 16 * v25 + (unsigned __int16)(v24 - 16 * (v16 >> 4));
        if (!--v22)
        {
          char v22 = 0;
          *(unsigned char *)--a4 = v26 + v23;
        }
        goto LABEL_42;
      }
      uint64_t v27 = mimosa::v2::nanite::Codec<unsigned char,1800ull,80ull,1ull>::decode_table[v16 & 0xFFF];
      if (v27)
      {
        v24 -= mimosa::v2::nanite::Codec<unsigned char,1800ull,80ull,1ull>::cumulative_scaled_probabilities[(v27 - 1)];
        if (v27 >= 0xF8)
        {
          char v22 = v27 + 9;
          unint64_t v23 = (0x101010101010101uLL >> (-8 * v27) << 8) | 0xF8;
          if (v27 == 248) {
            uint64_t v28 = 248;
          }
          else {
            uint64_t v28 = v27;
          }
          if (v27 == 248)
          {
            LOBYTE(v23) = -8;
            char v22 = 1;
          }
          goto LABEL_41;
        }
        uint64_t v28 = v27;
      }
      else
      {
        uint64_t v28 = 0;
      }
      char v22 = 0;
      *(unsigned char *)--a4 = v27;
LABEL_41:
      unint64_t v16 = v25 * mimosa::v2::nanite::Codec<unsigned char,1800ull,80ull,1ull>::scaled_probabilities[v28] + v24;
LABEL_42:
      if (v16 <= 0xFFF)
      {
        if (v4 || a2 != result)
        {
          uint64_t v29 = 0;
          int v30 = 12;
          do
          {
            if (!v4)
            {
              if (a2 == result) {
                goto LABEL_54;
              }
              unsigned int v31 = *(unsigned __int8 *)--a2;
              unint64_t v5 = v31;
              char v4 = 8;
            }
            *((void *)&v32 + std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = v5;
            *(void *)&long long v32 = v29;
            uint64_t v29 = v32 >> 1;
            v5 >>= 1;
            --v4;
            --v30;
          }
          while ((_BYTE)v30);
          *((void *)&v33 + std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = v16;
          *(void *)&long long v33 = v29;
          unint64_t v16 = v33 >> 52;
        }
        else
        {
          char v4 = 0;
          a2 = result;
        }
      }
    }
    while (a4 != a3);
  }
  return result;
}

void sub_222786184(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mimosa::LightPathSemantics::~LightPathSemantics(mimosa::LightPathSemantics *this)
{
  uint64_t v2 = (void *)*((void *)this + 6);
  if (v2)
  {
    *((void *)this + 7) = v2;
    operator delete(v2);
  }
  int v3 = (void *)*((void *)this + 3);
  if (v3)
  {
    *((void *)this + 4) = v3;
    operator delete(v3);
  }
  char v4 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = v4;
    operator delete(v4);
  }
}

uint64_t mimosa::v2::nanite::Codec<unsigned char,1ull,2ull,1ull,2ull,2ull,1ull,1ull,1ull,1ull,1ull,2ull,1ull,2ull,29ull>::Encoder<std::back_insert_iterator<std::vector<std::byte>>>::encode<std::__wrap_iter<unsigned char const*>>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  if (*(unsigned char *)(a1 + 16))
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "encode called after instance has been finalised");
    __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  for (unint64_t i = *(void *)a1; a2 != a3; unint64_t i = v14 | ((i / v13) << 12))
  {
    unsigned int v8 = *a2++;
    uint64_t v7 = v8;
    if (v8 >= 0xF8)
    {
      if (i >= 0x10000)
      {
        unint64_t v10 = i >> 12;
        mimosa::v2::nanite::Codec<unsigned short,9040ull,1230ull,2050ull,130ull,350ull,30ull,130ull,50ull,60ull,10ull,50ull,20ull,50ull,40ull,30ull,30ull,20ull,40ull,1ull,10ull,1ull,40ull,1ull,10ull,1ull,10ull,1ull,1ull,1ull,10ull,1ull,1ull>::Encoder<std::back_insert_iterator<std::vector<std::byte>>>::write_bits((unint64_t **)a1, i, 12);
        unint64_t i = v10;
      }
      uint64_t v11 = 16 * (v7 + 8);
      if (v7 == 248) {
        uint64_t v11 = 0;
      }
      int v9 = 1;
      uint64_t v7 = 248;
      unint64_t i = v11 & 0xF000000000000FF0 | i & 0xF | (((i >> 4) & 0xFFFFFFFFFFFFLL) << 12);
    }
    else
    {
      int v9 = v7;
    }
    unint64_t v12 = i >> 12;
    unint64_t v13 = mimosa::v2::nanite::Codec<unsigned char,1ull,2ull,1ull,2ull,2ull,1ull,1ull,1ull,1ull,1ull,2ull,1ull,2ull,29ull>::scaled_probabilities[v7];
    if (i >> 12 >= v13)
    {
      mimosa::v2::nanite::Codec<unsigned short,9040ull,1230ull,2050ull,130ull,350ull,30ull,130ull,50ull,60ull,10ull,50ull,20ull,50ull,40ull,30ull,30ull,20ull,40ull,1ull,10ull,1ull,40ull,1ull,10ull,1ull,10ull,1ull,1ull,1ull,10ull,1ull,1ull>::Encoder<std::back_insert_iterator<std::vector<std::byte>>>::write_bits((unint64_t **)a1, i, 12);
      unint64_t i = v12;
    }
    unint64_t v14 = i % v13;
    if (v9) {
      v14 += mimosa::v2::nanite::Codec<unsigned char,1ull,2ull,1ull,2ull,2ull,1ull,1ull,1ull,1ull,1ull,2ull,1ull,2ull,29ull>::cumulative_scaled_probabilities[(v7 - 1)];
    }
  }
  *(void *)a1 = i;
  return *(void *)(a1 + 8);
}

void sub_222786340(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t mimosa::v2::nanite::Codec<unsigned char,1ull,1ull,1ull,1ull,1ull,1ull,1ull,1ull,1ull,1ull,1ull,1ull,1ull,1ull,1ull,1ull,230ull,210ull,30ull>::Encoder<std::back_insert_iterator<std::vector<std::byte>>>::encode<std::__wrap_iter<unsigned char *>>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  if (*(unsigned char *)(a1 + 16))
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "encode called after instance has been finalised");
    __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  for (unint64_t i = *(void *)a1; a2 != a3; unint64_t i = v14 | ((i / v13) << 12))
  {
    unsigned int v8 = *a2++;
    uint64_t v7 = v8;
    if (v8 >= 0xF8)
    {
      if (i >= 0x10000)
      {
        unint64_t v10 = i >> 12;
        mimosa::v2::nanite::Codec<unsigned short,9040ull,1230ull,2050ull,130ull,350ull,30ull,130ull,50ull,60ull,10ull,50ull,20ull,50ull,40ull,30ull,30ull,20ull,40ull,1ull,10ull,1ull,40ull,1ull,10ull,1ull,10ull,1ull,1ull,1ull,10ull,1ull,1ull>::Encoder<std::back_insert_iterator<std::vector<std::byte>>>::write_bits((unint64_t **)a1, i, 12);
        unint64_t i = v10;
      }
      uint64_t v11 = 16 * (v7 + 8);
      if (v7 == 248) {
        uint64_t v11 = 0;
      }
      int v9 = 1;
      uint64_t v7 = 248;
      unint64_t i = v11 & 0xF000000000000FF0 | i & 0xF | (((i >> 4) & 0xFFFFFFFFFFFFLL) << 12);
    }
    else
    {
      int v9 = v7;
    }
    unint64_t v12 = i >> 12;
    unint64_t v13 = mimosa::v2::nanite::Codec<unsigned char,1ull,1ull,1ull,1ull,1ull,1ull,1ull,1ull,1ull,1ull,1ull,1ull,1ull,1ull,1ull,1ull,230ull,210ull,30ull>::scaled_probabilities[v7];
    if (i >> 12 >= v13)
    {
      mimosa::v2::nanite::Codec<unsigned short,9040ull,1230ull,2050ull,130ull,350ull,30ull,130ull,50ull,60ull,10ull,50ull,20ull,50ull,40ull,30ull,30ull,20ull,40ull,1ull,10ull,1ull,40ull,1ull,10ull,1ull,10ull,1ull,1ull,1ull,10ull,1ull,1ull>::Encoder<std::back_insert_iterator<std::vector<std::byte>>>::write_bits((unint64_t **)a1, i, 12);
      unint64_t i = v12;
    }
    unint64_t v14 = i % v13;
    if (v9) {
      v14 += mimosa::v2::nanite::Codec<unsigned char,1ull,1ull,1ull,1ull,1ull,1ull,1ull,1ull,1ull,1ull,1ull,1ull,1ull,1ull,1ull,1ull,230ull,210ull,30ull>::cumulative_scaled_probabilities[(v7 - 1)];
    }
  }
  *(void *)a1 = i;
  return *(void *)(a1 + 8);
}

void sub_222786498(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t mimosa::v2::nanite::Codec<unsigned char,1800ull,80ull,1ull>::Encoder<std::back_insert_iterator<std::vector<std::byte>>>::encode<std::__wrap_iter<unsigned char const*>>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  if (*(unsigned char *)(a1 + 16))
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "encode called after instance has been finalised");
    __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  for (unint64_t i = *(void *)a1; a2 != a3; unint64_t i = v14 | ((i / v13) << 12))
  {
    unsigned int v8 = *a2++;
    uint64_t v7 = v8;
    if (v8 >= 0xF8)
    {
      if (i >= 0x10000)
      {
        unint64_t v10 = i >> 12;
        mimosa::v2::nanite::Codec<unsigned short,9040ull,1230ull,2050ull,130ull,350ull,30ull,130ull,50ull,60ull,10ull,50ull,20ull,50ull,40ull,30ull,30ull,20ull,40ull,1ull,10ull,1ull,40ull,1ull,10ull,1ull,10ull,1ull,1ull,1ull,10ull,1ull,1ull>::Encoder<std::back_insert_iterator<std::vector<std::byte>>>::write_bits((unint64_t **)a1, i, 12);
        unint64_t i = v10;
      }
      uint64_t v11 = 16 * (v7 + 8);
      if (v7 == 248) {
        uint64_t v11 = 0;
      }
      int v9 = 1;
      uint64_t v7 = 248;
      unint64_t i = v11 & 0xF000000000000FF0 | i & 0xF | (((i >> 4) & 0xFFFFFFFFFFFFLL) << 12);
    }
    else
    {
      int v9 = v7;
    }
    unint64_t v12 = i >> 12;
    unint64_t v13 = mimosa::v2::nanite::Codec<unsigned char,1800ull,80ull,1ull>::scaled_probabilities[v7];
    if (i >> 12 >= v13)
    {
      mimosa::v2::nanite::Codec<unsigned short,9040ull,1230ull,2050ull,130ull,350ull,30ull,130ull,50ull,60ull,10ull,50ull,20ull,50ull,40ull,30ull,30ull,20ull,40ull,1ull,10ull,1ull,40ull,1ull,10ull,1ull,10ull,1ull,1ull,1ull,10ull,1ull,1ull>::Encoder<std::back_insert_iterator<std::vector<std::byte>>>::write_bits((unint64_t **)a1, i, 12);
      unint64_t i = v12;
    }
    unint64_t v14 = i % v13;
    if (v9) {
      v14 += mimosa::v2::nanite::Codec<unsigned char,1800ull,80ull,1ull>::cumulative_scaled_probabilities[(v7 - 1)];
    }
  }
  *(void *)a1 = i;
  return *(void *)(a1 + 8);
}

void sub_2227865F0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mimosa::v2::encode()
{
}

{
  __assert_rtn("encode", "light_path_semantics_coding.cpp", 29, "light_path_semantics.photodiode_sets.size() == light_path_semantics.hardware_settings.size()");
}

{
  __assert_rtn("encode", "light_path_semantics_coding.cpp", 27, "light_path_semantics.emitters.size() * 4 == light_path_semantics.photodiode_sets.size()");
}

void mimosa::v2::decode_light_path_semantics()
{
}

void mimosa::v1::Decoder::PatchHeader::representation(mimosa::v1::Decoder::PatchHeader *this@<X0>, unint64_t *a2@<X8>)
{
  unint64_t v3 = mimosa::v1::Decoder::PatchHeader::uint64_representation(this);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  std::vector<std::byte>::reserve(a2, 0xAuLL);
  for (uint64_t i = 0; i != 8; ++i)
  {
    unint64_t v5 = v3 >> (8 * i);
    if (i && !(v3 >> (8 * i))) {
      break;
    }
    uint64_t v7 = (unsigned char *)a2[1];
    unint64_t v6 = a2[2];
    if ((unint64_t)v7 >= v6)
    {
      unint64_t v9 = *a2;
      unint64_t v10 = &v7[-*a2];
      unint64_t v11 = (unint64_t)(v10 + 1);
      if ((uint64_t)(v10 + 1) < 0) {
        std::vector<mimosa::OpticalSampleV1>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v12 = v6 - v9;
      if (2 * v12 > v11) {
        unint64_t v11 = 2 * v12;
      }
      if (v12 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v13 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v13 = v11;
      }
      if (v13) {
        unint64_t v14 = (char *)operator new(v13);
      }
      else {
        unint64_t v14 = 0;
      }
      long long v15 = &v10[(void)v14];
      unint64_t v16 = &v10[(void)v14];
      *unint64_t v16 = v5;
      unsigned int v8 = v16 + 1;
      if (v7 != (unsigned char *)v9)
      {
        uint64_t v17 = &v7[~v9];
        do
        {
          char v18 = *--v7;
          (v17--)[(void)v14] = v18;
        }
        while (v7 != (unsigned char *)v9);
        uint64_t v7 = (unsigned char *)*a2;
        long long v15 = v14;
      }
      *a2 = (unint64_t)v15;
      a2[1] = (unint64_t)v8;
      a2[2] = (unint64_t)&v14[v13];
      if (v7) {
        operator delete(v7);
      }
    }
    else
    {
      unsigned char *v7 = v5;
      unsigned int v8 = v7 + 1;
    }
    a2[1] = (unint64_t)v8;
  }
  if (*((__int16 *)this + 3) < 0)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "payload_size is too large to produce a binary representation of the patch header");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  unsigned int v19 = *((unsigned __int16 *)this + 3);
  char v20 = *((_WORD *)this + 3);
  if (v19 >= 0x80)
  {
    char v21 = v19 | 0x80;
    unint64_t v23 = (unsigned char *)a2[1];
    unint64_t v22 = a2[2];
    if ((unint64_t)v23 >= v22)
    {
      unint64_t v28 = *a2;
      uint64_t v29 = &v23[-*a2];
      unint64_t v30 = (unint64_t)(v29 + 1);
      if ((uint64_t)(v29 + 1) < 0) {
        std::vector<mimosa::OpticalSampleV1>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v31 = v22 - v28;
      if (2 * v31 > v30) {
        unint64_t v30 = 2 * v31;
      }
      if (v31 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v32 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v32 = v30;
      }
      if (v32) {
        unint64_t v33 = (unint64_t)operator new(v32);
      }
      else {
        unint64_t v33 = 0;
      }
      char v40 = (char *)(v33 + v32);
      v29[v33] = v21;
      unsigned __int16 v24 = &v29[v33 + 1];
      if (v23 == (unsigned char *)v28)
      {
        v33 += (unint64_t)v29;
      }
      else
      {
        unint64_t v41 = &v23[~v28];
        do
        {
          char v42 = *--v23;
          (v41--)[v33] = v42;
        }
        while (v23 != (unsigned char *)v28);
        unint64_t v23 = (unsigned char *)*a2;
      }
      *a2 = v33;
      a2[1] = (unint64_t)v24;
      a2[2] = (unint64_t)v40;
      if (v23) {
        operator delete(v23);
      }
    }
    else
    {
      *unint64_t v23 = v21;
      unsigned __int16 v24 = v23 + 1;
    }
    a2[1] = (unint64_t)v24;
    unsigned int v48 = *((unsigned __int16 *)this + 3);
    unint64_t v49 = a2[2];
    if ((unint64_t)v24 < v49)
    {
      *unsigned __int16 v24 = v48 >> 7;
      uint64_t v27 = (uint64_t)(v24 + 1);
      goto LABEL_79;
    }
    unint64_t v50 = *a2;
    uint64_t v51 = &v24[-*a2];
    unint64_t v52 = (unint64_t)(v51 + 1);
    if ((uint64_t)(v51 + 1) < 0) {
      std::vector<mimosa::OpticalSampleV1>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v53 = v49 - v50;
    if (2 * v53 > v52) {
      unint64_t v52 = 2 * v53;
    }
    if (v53 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v54 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v54 = v52;
    }
    if (v54) {
      unint64_t v55 = (unint64_t)operator new(v54);
    }
    else {
      unint64_t v55 = 0;
    }
    __int16 v57 = (char *)(v55 + v54);
    v51[v55] = v48 >> 7;
    uint64_t v27 = (uint64_t)&v51[v55 + 1];
    if (v24 == (unsigned char *)v50)
    {
      *a2 = (unint64_t)&v51[v55];
      a2[1] = v27;
      a2[2] = (unint64_t)v57;
    }
    else
    {
      unsigned int v58 = &v24[~v50];
      do
      {
        char v59 = *--v24;
        (v58--)[v55] = v59;
      }
      while (v24 != (unsigned char *)v50);
      unsigned __int16 v24 = (unsigned char *)*a2;
      *a2 = v55;
      a2[1] = v27;
      a2[2] = (unint64_t)v57;
      if (!v24) {
        goto LABEL_79;
      }
    }
    __int16 v56 = v24;
LABEL_78:
    operator delete(v56);
    goto LABEL_79;
  }
  unint64_t v26 = (unsigned char *)a2[1];
  unint64_t v25 = a2[2];
  if ((unint64_t)v26 < v25)
  {
    *unint64_t v26 = v20;
    uint64_t v27 = (uint64_t)(v26 + 1);
    goto LABEL_79;
  }
  unint64_t v34 = *a2;
  size_t v35 = &v26[-*a2];
  unint64_t v36 = (unint64_t)(v35 + 1);
  if ((uint64_t)(v35 + 1) < 0) {
    std::vector<mimosa::OpticalSampleV1>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v37 = v25 - v34;
  if (2 * v37 > v36) {
    unint64_t v36 = 2 * v37;
  }
  if (v37 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v38 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v38 = v36;
  }
  if (v38) {
    unint64_t v39 = (unint64_t)operator new(v38);
  }
  else {
    unint64_t v39 = 0;
  }
  unint64_t v43 = &v35[v39];
  uint64_t v44 = (char *)(v39 + v38);
  uint64_t v45 = &v35[v39];
  *uint64_t v45 = v20;
  uint64_t v27 = (uint64_t)(v45 + 1);
  if (v26 == (unsigned char *)v34)
  {
    unint64_t v39 = (unint64_t)v43;
  }
  else
  {
    uint64_t v46 = &v26[~v34];
    do
    {
      char v47 = *--v26;
      (v46--)[v39] = v47;
    }
    while (v26 != (unsigned char *)v34);
    unint64_t v26 = (unsigned char *)*a2;
  }
  *a2 = v39;
  a2[1] = v27;
  a2[2] = (unint64_t)v44;
  if (v26)
  {
    __int16 v56 = v26;
    goto LABEL_78;
  }
LABEL_79:
  a2[1] = v27;
}

void sub_222786AA4(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t mimosa::v1::Decoder::PatchHeader::uint64_representation(mimosa::v1::Decoder::PatchHeader *this)
{
  unsigned int v1 = *((unsigned __int16 *)this + 2);
  v2.i64[0] = 0x1000100010001;
  v2.i64[1] = 0x1000100010001;
  uint16x8_t v3 = (uint16x8_t)vandq_s8((int8x16_t)vshlq_u16((uint16x8_t)vdupq_n_s16(v1), (uint16x8_t)xmmword_22279CF70), v2);
  uint32x4_t v4 = vmovl_u16(*(uint16x4_t *)v3.i8);
  v5.i64[0] = v4.u32[2];
  v5.i64[1] = v4.u32[3];
  uint64x2_t v6 = v5;
  uint32x4_t v7 = vmovl_high_u16(v3);
  v5.i64[0] = v7.u32[2];
  v5.i64[1] = v7.u32[3];
  uint64x2_t v8 = v5;
  v5.i64[0] = v4.u32[0];
  v5.i64[1] = v4.u32[1];
  uint64x2_t v9 = v5;
  v5.i64[0] = v7.u32[0];
  v5.i64[1] = v7.u32[1];
  int8x16_t v10 = (int8x16_t)vshlq_u64(v5, (uint64x2_t)xmmword_22279CF80);
  uint32x4_t v11 = (uint32x4_t)vdupq_n_s32(*(_DWORD *)this);
  int8x16_t v12 = vandq_s8((int8x16_t)vshlq_u32(v11, (uint32x4_t)xmmword_22279CFC0), (int8x16_t)xmmword_22279CFD0);
  int8x16_t v13 = (int8x16_t)vshlq_u32(v11, (uint32x4_t)xmmword_22279CFE0);
  int32x4_t v14 = (int32x4_t)vshlq_u32(v11, (uint32x4_t)xmmword_22279CFF0);
  v15.i32[0] = vdupq_laneq_s32(v14, 2).u32[0];
  v15.i32[1] = *(_DWORD *)this >> 19;
  v15.i32[2] = HIWORD(*(_DWORD *)this);
  v15.i32[3] = v13.i32[1];
  int8x16_t v16 = vandq_s8(v15, (int8x16_t)xmmword_22279D000);
  int8x8_t v17 = vorr_s8(*(int8x8_t *)v16.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL));
  uint64_t v18 = v17.i32[0] | (*(_DWORD *)this >> 17) & 4 | v17.i32[1] | (*(_DWORD *)this >> 20) & 2 | (((*(_DWORD *)this >> 11) & 1) << 12) | (16 * *(_DWORD *)this) & 0x2000 | ((v1 & 1) << 8) | (v1 << 12) & 0x4000 | (((v1 >> 1) & 1) << 11);
  v16.i64[0] = 0x100000001;
  v16.i64[1] = 0x100000001;
  int8x16_t v19 = vandq_s8((int8x16_t)v14, v16);
  __int32 v20 = v14.i32[0] & 0x40000;
  int8x16_t v21 = vandq_s8(v13, v16);
  v5.i64[0] = v19.u32[2];
  v5.i64[1] = v19.u32[3];
  uint64x2_t v22 = v5;
  v5.i64[0] = v21.u32[2];
  v5.i64[1] = v21.u32[3];
  uint64x2_t v23 = v5;
  v5.i64[0] = v19.u32[0];
  v5.i64[1] = v19.u32[1];
  uint64x2_t v24 = v5;
  v5.i64[0] = v21.u32[0];
  v5.i64[1] = v21.u32[1];
  int8x8_t v25 = vorr_s8(*(int8x8_t *)v12.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v12, v12, 8uLL));
  int8x16_t v26 = vorrq_s8(vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64(v24, (uint64x2_t)xmmword_22279D020), (int8x16_t)vshlq_u64(v5, (uint64x2_t)xmmword_22279D010)), vorrq_s8((int8x16_t)vshlq_u64(v22, (uint64x2_t)xmmword_22279D040), (int8x16_t)vshlq_u64(v23, (uint64x2_t)xmmword_22279D030))), vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64(v9, (uint64x2_t)xmmword_22279CF90), v10), vorrq_s8((int8x16_t)vshlq_u64(v6, (uint64x2_t)xmmword_22279CFB0), (int8x16_t)vshlq_u64(v8, (uint64x2_t)xmmword_22279CFA0))));
  unint64_t result = *(void *)&vorr_s8(*(int8x8_t *)v26.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v26, v26, 8uLL)) | ((unint64_t)((*(_DWORD *)this >> 6) & 1) << 41) | v25.i32[0] | (*(_DWORD *)this << 16) & 0x20000 | v25.i32[1] | v20 | ((unint64_t)((*(_DWORD *)this >> 8) & 1) << 42) | v18;
  for (uint64_t i = 8; i != 56; i += 8)
    result |= (unint64_t)(result >> i != 0) << (i - 1);
  return result;
}

unsigned __int8 *mimosa::v1::Decoder::PatchHeader::parse_representation@<X0>(unsigned __int8 *result@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  if (result != a2)
  {
    if (*result)
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "this isn't a patch");
LABEL_8:
      __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    }
    char v3 = 0;
    uint64_t v4 = 0;
    unint64_t v5 = 0;
    while (1)
    {
      if (&result[v4] == a2) {
        goto LABEL_14;
      }
      v5 |= (unint64_t)result[v4] << v3;
      if (((char)result[v4] & 0x80000000) == 0) {
        break;
      }
      ++v4;
      v3 += 8;
      if (v4 == 6)
      {
        exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "attempt to parse something that's invalid Mimosa data");
        goto LABEL_8;
      }
    }
    uint32x4_t v7 = &result[v4];
    if (&result[v4 + 1] != a2)
    {
      uint64x2_t v8 = v7 + 2;
      int v9 = (char)v7[1];
      unint64_t v10 = v7[1];
      if ((v9 & 0x80000000) == 0)
      {
LABEL_13:
        unint64_t result = (unsigned __int8 *)v5;
        *(void *)a3 = (v5 << 17) & 0x80000 | (((v5 >> 1) & 1) << 21) & 0xFFFFFFFFFE7F7FFFLL | (((v5 >> 3) & 1) << 16) & 0xFFFFFFFFFE7F7FFFLL | (((v5 >> 4) & 3) << 23) | (v5 << 16) & 0x2400000 | (((v5 >> 10) & 1) << 15) | (v5 >> 1) & 0x800 | (v5 >> 4) & 0x200 | (v5 >> 16) & 2 | (4 * v5) & 0x100000 | (v5 >> 2) & 0x20000 | (v5 >> 10) & 0x400 | (v5 >> 24) & 1 | (v5 >> 12) & 0x40000 | (v5 >> 30) & 4 | (v5 >> 21) & 0x7000 | (v5 >> 33) & 8 | HIDWORD(v5) & 0x20 | (v5 >> 31) & 0x80 | (v5 >> 36) & 0x10 | (v5 >> 35) & 0x40 | (v5 >> 34) & 0x100 | (((v5 >> 10) & 2 | (v5 >> 8) & 1 | (v5 >> 12) & 4 | (v5 >> 13) & 8 | (v5 >> 11) & 0x400 | (v5 >> 13) & 0x200 | (v5 >> 17) & 0x100 | (v5 >> 19) & 0x80 | (v5 >> 21) & 0x40 | (v5 >> 23) & 0x20 | (v5 >> 25) & 0x10) << 32) | (v10 << 48);
        *(unsigned char *)(a3 + 8) = 1;
        *(void *)(a3 + 16) = v8;
        return result;
      }
      if (v8 != a2)
      {
        unint64_t v10 = v10 & 0x7F | ((unint64_t)*v8 << 7);
        uint64x2_t v8 = &result[v4 + 3];
        goto LABEL_13;
      }
    }
  }
LABEL_14:
  *(unsigned char *)a3 = 0;
  *(unsigned char *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = result;
  return result;
}

void sub_222786F64(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL mimosa::v1::Decoder::PatchHeader::is_start_of_patch(mimosa::v1::Decoder::PatchHeader *this)
{
  return (this & 1) == 0;
}

void mimosa::v1::Decoder::apply_patch(mimosa::v1::Decoder *this, const mimosa::v1::Decoder::Patch *a2)
{
  uint64_t v4 = (mimosa::v1::Decoder *)((char *)this + 1960);
  if (*((unsigned char *)a2 + 8)) {
    uint64_t v4 = a2;
  }
  *((void *)this + 24std::__function::__value_func<BOOL ()(mimosa::Metadata const&)>::~__value_func[abi:ne180100]((void *)this + 5) = *(void *)v4;
  if (*((unsigned char *)a2 + 20)) {
    int v5 = *((_DWORD *)a2 + 4);
  }
  else {
    int v5 = *((_DWORD *)this + 487) + 1;
  }
  *((_DWORD *)this + 487) = v5;
  if (*((unsigned char *)a2 + 28))
  {
    uint64_t v6 = *((void *)this + 244) + *((unsigned int *)a2 + 6);
  }
  else
  {
    if (!*((unsigned char *)a2 + 40)) {
      goto LABEL_11;
    }
    uint64_t v6 = *((void *)a2 + 4);
  }
  *((void *)this + 244) = v6;
LABEL_11:
  if (*((unsigned char *)a2 + 52))
  {
    uint64_t v7 = *((unsigned int *)a2 + 12);
    *((void *)this + 263) = v7;
LABEL_13:
    *((void *)this + 247) += v7;
    goto LABEL_16;
  }
  if (!*((unsigned char *)a2 + 64))
  {
    uint64_t v7 = *((void *)this + 263);
    goto LABEL_13;
  }
  *((void *)this + 247) = *((void *)a2 + 7);
  *((void *)this + 263) = 0;
LABEL_16:
  if (*((unsigned char *)a2 + 76))
  {
    uint64_t v8 = *((unsigned int *)a2 + 18);
    *((void *)this + 264) = v8;
LABEL_18:
    *((void *)this + 252) += v8;
    goto LABEL_21;
  }
  if (!*((unsigned char *)a2 + 88))
  {
    uint64_t v8 = *((void *)this + 264);
    goto LABEL_18;
  }
  *((void *)this + 252) = *((void *)a2 + 10);
  *((void *)this + 264) = 0;
LABEL_21:
  if (*((unsigned char *)a2 + 100))
  {
    uint64_t v9 = *((unsigned int *)a2 + 24);
    *((void *)this + 26std::__function::__value_func<BOOL ()(mimosa::Metadata const&)>::~__value_func[abi:ne180100]((void *)this + 5) = v9;
LABEL_23:
    *((void *)this + 257) += v9;
    goto LABEL_26;
  }
  if (!*((unsigned char *)a2 + 112))
  {
    uint64_t v9 = *((void *)this + 265);
    goto LABEL_23;
  }
  *((void *)this + 257) = *((void *)a2 + 13);
  *((void *)this + 26std::__function::__value_func<BOOL ()(mimosa::Metadata const&)>::~__value_func[abi:ne180100]((void *)this + 5) = 0;
LABEL_26:
  if (*((unsigned char *)a2 + 124)) {
    int v10 = *((_DWORD *)a2 + 30);
  }
  else {
    int v10 = *((_DWORD *)this + 496) + 1;
  }
  *((_DWORD *)this + 496) = v10;
  if (*((unsigned char *)a2 + 132)) {
    int v11 = *((_DWORD *)a2 + 32);
  }
  else {
    int v11 = *((_DWORD *)this + 506) + 1;
  }
  *((_DWORD *)this + 506) = v11;
  if (*((unsigned char *)a2 + 140)) {
    int v12 = *((_DWORD *)a2 + 34);
  }
  else {
    int v12 = *((_DWORD *)this + 516) + 1;
  }
  *((_DWORD *)this + 516) = v12;
  int8x16_t v13 = (char *)a2 + 144;
  if (!*((unsigned char *)a2 + 145)) {
    int8x16_t v13 = (char *)this + 1988;
  }
  *((unsigned char *)this + 1988) = *v13;
  int32x4_t v14 = (char *)a2 + 146;
  if (!*((unsigned char *)a2 + 147)) {
    int32x4_t v14 = (char *)this + 2028;
  }
  *((unsigned char *)this + 2028) = *v14;
  int8x16_t v15 = (char *)a2 + 148;
  if (!*((unsigned char *)a2 + 149)) {
    int8x16_t v15 = (char *)this + 2068;
  }
  *((unsigned char *)this + 2068) = *v15;
  if (*((unsigned char *)a2 + 154)) {
    *((_WORD *)this + 1048) = *((_WORD *)a2 + 76);
  }
  if (*((unsigned char *)a2 + 160)) {
    *((_DWORD *)this + 520) = *((_DWORD *)a2 + 39);
  }
  if (*((unsigned char *)a2 + 168)) {
    *((_DWORD *)this + 52std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = *((_DWORD *)a2 + 41);
  }
  if (*((unsigned char *)a2 + 173)) {
    *((unsigned char *)this + 2100) = *((unsigned char *)a2 + 172);
  }
  if (*((unsigned char *)a2 + 175)) {
    *((unsigned char *)this + 2074) = *((unsigned char *)a2 + 174);
  }
  if (*((unsigned char *)a2 + 177)) {
    *((unsigned char *)this + 207std::__function::__value_func<BOOL ()(mimosa::Metadata const&)>::~__value_func[abi:ne180100]((void *)this + 5) = *((unsigned char *)a2 + 176);
  }
  if (*((unsigned char *)a2 + 180)) {
    *((_WORD *)this + 1036) = *((_WORD *)a2 + 89);
  }
  if (*((unsigned char *)a2 + 183)) {
    *((unsigned char *)this + 2076) = *((unsigned char *)a2 + 182);
  }
  if (*((unsigned char *)a2 + 185)) {
    *((unsigned char *)this + 2077) = *((unsigned char *)a2 + 184);
  }
  if (*((unsigned char *)a2 + 192)) {
    *((_DWORD *)this + 522) = *((_DWORD *)a2 + 47);
  }
  if (*((unsigned char *)a2 + 198)) {
    *((_WORD *)this + 104std::__function::__value_func<BOOL ()(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,double)>::~__value_func[abi:ne180100]((void *)this + 9) = *((_WORD *)a2 + 98);
  }
  uint64_t v16 = *((void *)this + 249);
  unint64_t v17 = 0x8E38E38E38E38E39 * ((*((void *)this + 250) - v16) >> 2);
  uint64_t v18 = *((void *)a2 + 25);
  uint64_t v19 = *((void *)a2 + 26);
  uint64_t v20 = (v19 - v18) >> 3;
  unint64_t v21 = 0x8E38E38E38E38E39 * v20;
  if (0x8E38E38E38E38E39 * v20 >= v17) {
    unint64_t v22 = 0x8E38E38E38E38E39 * ((*((void *)this + 250) - v16) >> 2);
  }
  else {
    unint64_t v22 = 0x8E38E38E38E38E39 * v20;
  }
  if (v22)
  {
    uint64_t v23 = v16 + 20;
    unsigned int v24 = 1;
    uint64_t v25 = *((void *)a2 + 25);
    do
    {
      if (*(unsigned char *)(v25 + 2)) {
        *(_WORD *)uint64_t v23 = *(_WORD *)v25;
      }
      if (*(unsigned char *)(v25 + 6)) {
        *(_WORD *)(v23 + 2) = *(_WORD *)(v25 + 4);
      }
      if (*(unsigned char *)(v25 + 10)) {
        *(_WORD *)(v23 + 4) = *(_WORD *)(v25 + 8);
      }
      if (*(unsigned char *)(v25 + 13)) {
        *(unsigned char *)(v23 + 12) = *(unsigned char *)(v25 + 12);
      }
      if (*(unsigned char *)(v25 + 16)) {
        *(_WORD *)(v23 + 6) = *(_WORD *)(v25 + 14);
      }
      if (*(unsigned char *)(v25 + 20)) {
        *(_WORD *)(v23 + 8) = *(_WORD *)(v25 + 18);
      }
      if (*(unsigned char *)(v25 + 24)) {
        *(_WORD *)(v23 + 10) = *(_WORD *)(v25 + 22);
      }
      if (*(unsigned char *)(v25 + 27)) {
        *(unsigned char *)(v23 + 13) = *(unsigned char *)(v25 + 26);
      }
      if (*(unsigned char *)(v25 + 29)) {
        *(unsigned char *)(v23 + 14) = *(unsigned char *)(v25 + 28);
      }
      if (*(unsigned char *)(v25 + 31)) {
        *(unsigned char *)(v23 + 1std::__function::__value_func<BOOL ()(mimosa::Metadata const&)>::~__value_func[abi:ne180100]((void *)this + 5) = *(unsigned char *)(v25 + 30);
      }
      if (*(unsigned char *)(v25 + 40)) {
        *(_DWORD *)(v23 - 4) += *(_DWORD *)(v25 + 32);
      }
      if (*(unsigned char *)(v25 + 49)) {
        *(unsigned char *)(v23 - 16) = *(unsigned char *)(v25 + 48);
      }
      if (*(unsigned char *)(v25 + 51)) {
        *(unsigned char *)(v23 - 8) = *(unsigned char *)(v25 + 50);
      }
      *(_DWORD *)(v23 - 20) += *(_DWORD *)(v25 + 56);
      *(_DWORD *)(v23 - 12) += *(_DWORD *)(v25 + 64);
      v25 += 72;
      BOOL v26 = v22 > v24++;
      v23 += 36;
    }
    while (v26);
  }
  if (v21 > v17)
  {
    uint64_t v27 = (void *)((char *)this + 1992);
    std::vector<mimosa::OpticalSampleV1>::reserve((void **)this + 249, v21);
    uint64_t v18 = *((void *)a2 + 25);
    uint64_t v19 = v18 + 72 * (int)v22;
    if (v19 != *((void *)a2 + 26))
    {
      unint64_t v28 = (void *)((char *)this + 2008);
      uint64_t v29 = (char *)*((void *)this + 250);
      do
      {
        if ((unint64_t)v29 >= *v28)
        {
          unint64_t v30 = 0x8E38E38E38E38E39 * ((uint64_t)&v29[-*v27] >> 2);
          unint64_t v31 = v30 + 1;
          if (v30 + 1 > 0x71C71C71C71C71CLL) {
            std::vector<mimosa::OpticalSampleV1>::__throw_length_error[abi:ne180100]();
          }
          if (0x1C71C71C71C71C72 * ((uint64_t)(*v28 - *v27) >> 2) > v31) {
            unint64_t v31 = 0x1C71C71C71C71C72 * ((uint64_t)(*v28 - *v27) >> 2);
          }
          if (0x8E38E38E38E38E39 * ((uint64_t)(*v28 - *v27) >> 2) >= 0x38E38E38E38E38ELL) {
            unint64_t v32 = 0x71C71C71C71C71CLL;
          }
          else {
            unint64_t v32 = v31;
          }
          if (v32) {
            unint64_t v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<mimosa::OpticalSampleV1>>((uint64_t)this + 2008, v32);
          }
          else {
            unint64_t v33 = 0;
          }
          unint64_t v34 = &v33[36 * v30];
          *((_DWORD *)v34 + 8) = 0;
          *(_OWORD *)unint64_t v34 = 0u;
          *((_OWORD *)v34 + std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = 0u;
          size_t v35 = (char *)*((void *)this + 250);
          unint64_t v36 = (char *)*((void *)this + 249);
          unint64_t v37 = v34;
          if (v35 != v36)
          {
            do
            {
              long long v38 = *(_OWORD *)(v35 - 36);
              long long v39 = *(_OWORD *)(v35 - 20);
              *((_DWORD *)v37 - std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = *((_DWORD *)v35 - 1);
              *(_OWORD *)(v37 - 20) = v39;
              *(_OWORD *)(v37 - 36) = v38;
              v37 -= 36;
              v35 -= 36;
            }
            while (v35 != v36);
            size_t v35 = (char *)*v27;
          }
          *((void *)this + 24std::__function::__value_func<BOOL ()(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,double)>::~__value_func[abi:ne180100]((void *)this + 9) = v37;
          uint64_t v29 = v34 + 36;
          *((void *)this + 250) = v34 + 36;
          *((void *)this + 25std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = &v33[36 * v32];
          if (v35) {
            operator delete(v35);
          }
        }
        else
        {
          *((_DWORD *)v29 + 8) = 0;
          *(_OWORD *)uint64_t v29 = 0u;
          *((_OWORD *)v29 + std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = 0u;
          v29 += 36;
        }
        *((void *)this + 250) = v29;
        *((_WORD *)v29 - 8) = *(_WORD *)v19;
        *((_WORD *)v29 - 7) = *(_WORD *)(v19 + 4);
        *((_WORD *)v29 - 6) = *(_WORD *)(v19 + 8);
        *(v29 - 4) = *(unsigned char *)(v19 + 12);
        *((_WORD *)v29 - std::__function::__value_func<BOOL ()(mimosa::Metadata const&)>::~__value_func[abi:ne180100]((void *)this + 5) = *(_WORD *)(v19 + 14);
        *((_WORD *)v29 - 4) = *(_WORD *)(v19 + 18);
        *((_WORD *)v29 - 3) = *(_WORD *)(v19 + 22);
        *(v29 - 3) = *(unsigned char *)(v19 + 26);
        *(v29 - 2) = *(unsigned char *)(v19 + 28);
        *(v29 - std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = *(unsigned char *)(v19 + 30);
        *((_DWORD *)v29 - std::__function::__value_func<BOOL ()(mimosa::Metadata const&)>::~__value_func[abi:ne180100]((void *)this + 5) = *(void *)(v19 + 32);
        *(v29 - 32) = *(unsigned char *)(v19 + 48);
        *(v29 - 24) = *(unsigned char *)(v19 + 50);
        uint64_t v40 = *(void *)(v19 + 64);
        *((_DWORD *)v29 - std::__function::__value_func<BOOL ()(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,double)>::~__value_func[abi:ne180100]((void *)this + 9) = *(void *)(v19 + 56);
        *((_DWORD *)v29 - 7) = v40;
        v19 += 72;
      }
      while (v19 != *((void *)a2 + 26));
      uint64_t v18 = *((void *)a2 + 25);
    }
  }
  unint64_t v41 = 0x8E38E38E38E38E39 * ((v19 - v18) >> 3);
  uint64_t v42 = *((unsigned __int8 *)this + 1968);
  if (v41 != v42)
  {
    *((unsigned char *)this + 196std::__function::__value_func<BOOL ()(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,double)>::~__value_func[abi:ne180100]((void *)this + 9) = v42;
    *((unsigned char *)this + 1968) = v41;
  }
  uint64_t v43 = *((void *)this + 254);
  unint64_t v44 = 0xCCCCCCCCCCCCCCCDLL * ((*((void *)this + 255) - v43) >> 2);
  uint64_t v45 = *((void *)a2 + 28);
  uint64_t v46 = *((void *)a2 + 29);
  uint64_t v47 = (v46 - v45) >> 3;
  unint64_t v48 = 0xCCCCCCCCCCCCCCCDLL * v47;
  if (0xCCCCCCCCCCCCCCCDLL * v47 >= v44) {
    unint64_t v49 = 0xCCCCCCCCCCCCCCCDLL * ((*((void *)this + 255) - v43) >> 2);
  }
  else {
    unint64_t v49 = 0xCCCCCCCCCCCCCCCDLL * v47;
  }
  if (v49)
  {
    uint64_t v50 = 0;
    uint64_t v51 = v45 + 16;
    uint64_t v52 = *((void *)this + 254);
    do
    {
      unint64_t v53 = (unsigned char *)(v45 + 40 * v50);
      if (v53[1]) {
        *(unsigned char *)(v43 + 20 * v50 + 16) = *v53;
      }
      uint64_t v54 = v45 + 40 * v50;
      if (*(unsigned char *)(v54 + 4)) {
        *(_WORD *)(v43 + 20 * v50 + 12) = *(_WORD *)(v54 + 2);
      }
      uint64_t v55 = v45 + 40 * v50;
      if (*(unsigned char *)(v55 + 8)) {
        *(_WORD *)(v43 + 20 * v50 + 14) = *(_WORD *)(v55 + 6);
      }
      for (uint64_t i = 0; i != 3; ++i)
        *(_DWORD *)(v52 + 4 * i) += *(void *)(v51 + 8 * i);
      ++v50;
      v51 += 40;
      v52 += 20;
    }
    while (v49 > v50);
  }
  if (v48 > v44)
  {
    __int16 v57 = (void *)((char *)this + 2032);
    std::vector<mimosa::AccelSample>::reserve((void **)this + 254, v48);
    uint64_t v45 = *((void *)a2 + 28);
    uint64_t v46 = v45 + 40 * (int)v49;
    if (v46 != *((void *)a2 + 29))
    {
      unsigned int v58 = (void *)((char *)this + 2048);
      char v59 = (char *)*((void *)this + 255);
      do
      {
        if ((unint64_t)v59 >= *v58)
        {
          unint64_t v60 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v59[-*v57] >> 2);
          unint64_t v61 = v60 + 1;
          if (v60 + 1 > 0xCCCCCCCCCCCCCCCLL) {
            std::vector<mimosa::OpticalSampleV1>::__throw_length_error[abi:ne180100]();
          }
          if (0x999999999999999ALL * ((uint64_t)(*v58 - *v57) >> 2) > v61) {
            unint64_t v61 = 0x999999999999999ALL * ((uint64_t)(*v58 - *v57) >> 2);
          }
          if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*v58 - *v57) >> 2) >= 0x666666666666666) {
            unint64_t v62 = 0xCCCCCCCCCCCCCCCLL;
          }
          else {
            unint64_t v62 = v61;
          }
          if (v62) {
            __int16 v63 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<mimosa::AccelSample>>((uint64_t)this + 2048, v62);
          }
          else {
            __int16 v63 = 0;
          }
          uint64_t v64 = &v63[20 * v60];
          *(void *)uint64_t v64 = 0;
          *((void *)v64 + std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = 0;
          *((_DWORD *)v64 + 4) = 0;
          uint64_t v65 = (char *)*((void *)this + 255);
          uint64_t v66 = (char *)*((void *)this + 254);
          __int16 v67 = v64;
          if (v65 != v66)
          {
            do
            {
              long long v68 = *(_OWORD *)(v65 - 20);
              *((_DWORD *)v67 - std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = *((_DWORD *)v65 - 1);
              *(_OWORD *)(v67 - 20) = v68;
              v67 -= 20;
              v65 -= 20;
            }
            while (v65 != v66);
            uint64_t v65 = (char *)*v57;
          }
          *((void *)this + 254) = v67;
          char v59 = v64 + 20;
          *((void *)this + 25std::__function::__value_func<BOOL ()(mimosa::Metadata const&)>::~__value_func[abi:ne180100]((void *)this + 5) = v64 + 20;
          *((void *)this + 256) = &v63[20 * v62];
          if (v65) {
            operator delete(v65);
          }
        }
        else
        {
          *(void *)char v59 = 0;
          *((void *)v59 + std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = 0;
          *((_DWORD *)v59 + 4) = 0;
          v59 += 20;
        }
        uint64_t v69 = 0;
        *((void *)this + 25std::__function::__value_func<BOOL ()(mimosa::Metadata const&)>::~__value_func[abi:ne180100]((void *)this + 5) = v59;
        *(v59 - 4) = *(unsigned char *)v46;
        *((_WORD *)v59 - 4) = *(_WORD *)(v46 + 2);
        *((_WORD *)v59 - 3) = *(_WORD *)(v46 + 6);
        do
        {
          *(_DWORD *)&v59[4 * v69 - 20] = *(void *)(v46 + 8 * v69 + 16);
          ++v69;
        }
        while (v69 != 3);
        v46 += 40;
      }
      while (v46 != *((void *)a2 + 29));
      uint64_t v45 = *((void *)a2 + 28);
    }
  }
  *((unsigned char *)this + 1970) = -51 * ((v46 - v45) >> 3);
}

void std::vector<mimosa::OpticalSampleV1>::reserve(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (0x8E38E38E38E38E39 * ((v4 - (unsigned char *)*a1) >> 2) < a2)
  {
    if (a2 >= 0x71C71C71C71C71DLL) {
      std::vector<mimosa::OpticalSampleV1>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = ((unsigned char *)a1[1] - (unsigned char *)*a1) / 36;
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<mimosa::OpticalSampleV1>>(v3, a2);
    uint64_t v7 = &v6[36 * v5];
    uint64_t v9 = &v6[36 * v8];
    int v11 = (char *)*a1;
    int v10 = (char *)a1[1];
    int v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        long long v13 = *(_OWORD *)(v10 - 36);
        long long v14 = *(_OWORD *)(v10 - 20);
        *((_DWORD *)v12 - std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = *((_DWORD *)v10 - 1);
        *(_OWORD *)(v12 - 20) = v14;
        *(_OWORD *)(v12 - 36) = v13;
        v12 -= 36;
        v10 -= 36;
      }
      while (v10 != v11);
      int v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void std::vector<mimosa::AccelSample>::reserve(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (0xCCCCCCCCCCCCCCCDLL * ((v4 - (unsigned char *)*a1) >> 2) < a2)
  {
    if (a2 >= 0xCCCCCCCCCCCCCCDLL) {
      std::vector<mimosa::OpticalSampleV1>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = ((unsigned char *)a1[1] - (unsigned char *)*a1) / 20;
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<mimosa::AccelSample>>(v3, a2);
    uint64_t v7 = &v6[20 * v5];
    uint64_t v9 = &v6[20 * v8];
    int v11 = (char *)*a1;
    int v10 = (char *)a1[1];
    int v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        long long v13 = *(_OWORD *)(v10 - 20);
        *((_DWORD *)v12 - std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = *((_DWORD *)v10 - 1);
        *(_OWORD *)(v12 - 20) = v13;
        v12 -= 20;
        v10 -= 20;
      }
      while (v10 != v11);
      int v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

__n128 mimosa::v1::Decoder::to_packet@<Q0>(mimosa::v1::Decoder *this@<X0>, uint64_t a2@<X8>)
{
  *(unsigned char *)(a2 + 12) = 0;
  *(_OWORD *)(a2 + 32) = 0u;
  uint64_t v4 = (char *)(a2 + 32);
  *(_OWORD *)(a2 + 72) = 0u;
  uint64_t v5 = (char *)(a2 + 72);
  *(_OWORD *)(a2 + 48) = 0u;
  *(void *)(a2 + 6std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = 0;
  *(_OWORD *)(a2 + 88) = 0u;
  *(_OWORD *)(a2 + 104) = 0u;
  *(_OWORD *)(a2 + 120) = 0u;
  *(void *)(a2 + 136) = 0;
  *(_DWORD *)(a2 + 8) = *((_DWORD *)this + 487);
  *(void *)a2 = *((void *)this + 244);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)((char *)this + 1976);
  if ((mimosa::v1::Decoder *)(a2 + 16) != (mimosa::v1::Decoder *)((char *)this + 1976)) {
    std::vector<mimosa::OpticalSampleV1>::__assign_with_size[abi:ne180100]<mimosa::OpticalSampleV1*,mimosa::OpticalSampleV1*>(v4, *((char **)this + 249), *((void *)this + 250), 0x8E38E38E38E38E39 * ((uint64_t)(*((void *)this + 250) - *((void *)this + 249)) >> 2));
  }
  std::vector<mimosa::OpticalSampleV1>::resize((uint64_t)v4, *((unsigned __int8 *)this + 1968));
  *(_OWORD *)(a2 + 56) = *((_OWORD *)this + 126);
  if ((mimosa::v1::Decoder *)(a2 + 56) != (mimosa::v1::Decoder *)((char *)this + 2016)) {
    std::vector<mimosa::AccelSample>::__assign_with_size[abi:ne180100]<mimosa::AccelSample*,mimosa::AccelSample*>(v5, *((char **)this + 254), *((void *)this + 255), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)this + 255) - *((void *)this + 254)) >> 2));
  }
  std::vector<mimosa::AccelSample>::resize((uint64_t)v5, *((unsigned __int8 *)this + 1970));
  long long v6 = *(_OWORD *)((char *)this + 2072);
  *(_OWORD *)(a2 + 96) = *(_OWORD *)((char *)this + 2056);
  *(_OWORD *)(a2 + 112) = v6;
  __n128 result = *(__n128 *)((char *)this + 2088);
  *(__n128 *)(a2 + 128) = result;
  return result;
}

void sub_222787AF4(_Unwind_Exception *a1)
{
  mimosa::PacketV1::~PacketV1(v1);
  _Unwind_Resume(a1);
}

void std::vector<mimosa::OpticalSampleV1>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 2);
  BOOL v3 = a2 >= v2;
  unint64_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<mimosa::OpticalSampleV1>::__append((void **)a1, v4);
  }
  else if (!v3)
  {
    *(void *)(a1 + 8) = *(void *)a1 + 36 * a2;
  }
}

void std::vector<mimosa::AccelSample>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 2);
  BOOL v3 = a2 >= v2;
  unint64_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<mimosa::AccelSample>::__append((void **)a1, v4);
  }
  else if (!v3)
  {
    *(void *)(a1 + 8) = *(void *)a1 + 20 * a2;
  }
}

uint64_t mimosa::v1::Decoder::Decoder(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 4) = 0;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 12) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 4std::__function::__value_func<BOOL ()(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,double)>::~__value_func[abi:ne180100]((void *)this + 9) = 0;
  *(unsigned char *)(a1 + 56) = 0;
  *(unsigned char *)(a1 + 80) = 0;
  *(unsigned char *)(a1 + 88) = 0;
  *(unsigned char *)(a1 + 112) = 0;
  *(unsigned char *)(a1 + 120) = 0;
  *(unsigned char *)(a1 + 144) = 0;
  *(unsigned char *)(a1 + 152) = 0;
  *(unsigned char *)(a1 + 224) = 0;
  *(unsigned char *)(a1 + 232) = 0;
  *(unsigned char *)(a1 + 1940) = 0;
  *(unsigned char *)(a1 + 1944) = 1;
  *(void *)(a1 + 1976) = 0;
  *(_DWORD *)(a1 + 1984) = 0;
  *(_OWORD *)(a1 + 1992) = 0u;
  *(_OWORD *)(a1 + 2008) = 0u;
  *(unsigned char *)(a1 + 1988) = 0;
  *(void *)(a1 + 1963) = 0;
  *(_OWORD *)(a1 + 1948) = 0u;
  *(void *)(a1 + 202std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = 0;
  *(_OWORD *)(a1 + 2032) = 0u;
  *(_OWORD *)(a1 + 2048) = 0u;
  *(void *)(a1 + 206std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = 0;
  *(_DWORD *)(a1 + 2072) = 0;
  *(_WORD *)(a1 + 2076) = 0;
  *(void *)(a1 + 2093) = 0;
  *(_OWORD *)(a1 + 2080) = 0u;
  *(void *)(a1 + 2120) = 0;
  *(_OWORD *)(a1 + 2104) = 0u;
  std::__function::__value_func<BOOL ()(mimosa::Metadata const&)>::__value_func[abi:ne180100](a1 + 2128, a2);
  std::__function::__value_func<BOOL ()(mimosa::PacketV1 const&,double)>::__value_func[abi:ne180100](a1 + 2160, a3);
  return a1;
}

void sub_222787C74(_Unwind_Exception *a1)
{
  std::__function::__value_func<BOOL ()(mimosa::Metadata const&)>::~__value_func[abi:ne180100](v2);
  uint64_t v5 = *(void **)(v1 + 2032);
  if (v5)
  {
    *(void *)(v1 + 2040) = v5;
    operator delete(v5);
  }
  long long v6 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 2000) = v6;
    operator delete(v6);
  }
  mimosa::Metadata::~Metadata((void **)v1);
  _Unwind_Resume(a1);
}

uint64_t mimosa::v1::Decoder::decode(mimosa::v1::Decoder *this, byte *a2, uint64_t a3)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  int8x16_t v15 = a2;
  if (a3)
  {
    uint64_t v5 = &a2[a3];
    long long v6 = (char *)this + 2160;
    uint64_t v7 = a2;
    while (1)
    {
      if (*((unsigned char *)this + 1944))
      {
        mimosa::v1::Decoder::decode_metadata(&v15, v5, v16);
        if (!v25) {
          goto LABEL_24;
        }
        uint64_t v8 = *((void *)this + 269);
        if (!v8) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        if (((*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)v8 + 48))(v8, v16) & 1) == 0)
        {
          uint64_t v7 = v15;
LABEL_24:
          std::__optional_destruct_base<mimosa::Metadata,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v16);
          return v7 - a2;
        }
        *((unsigned char *)this + 1944) = 0;
        std::__optional_destruct_base<mimosa::Metadata,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v16);
        uint64_t v7 = v15;
      }
      else
      {
        if (*v7)
        {
          mimosa::v1::Decoder::reset(this);
          return v7 - a2;
        }
        mimosa::v1::Decoder::PatchHeader::parse_representation(v7, v5, (uint64_t)&v11);
        if (!v13 || v5 - v14 < v12) {
          return v7 - a2;
        }
        uint64_t v7 = &v14[v12];
        mimosa::v1::Decoder::decode_patch((unsigned __int8 *)this, &v11, (uint64_t *)v14, (uint64_t *)v7, (uint64_t)v16);
        mimosa::v1::Decoder::apply_patch(this, (const mimosa::v1::Decoder::Patch *)v16);
        if (__p)
        {
          unsigned int v24 = __p;
          operator delete(__p);
        }
        if (v21)
        {
          unint64_t v22 = v21;
          operator delete(v21);
        }
        mimosa::v1::Decoder::to_packet(this, (uint64_t)v16);
        char v9 = std::function<BOOL ()(mimosa::PacketV1 const&,double)>::operator()((uint64_t)v6, (uint64_t)v16, *((double *)this + 245));
        if (v19)
        {
          uint64_t v20 = v19;
          operator delete(v19);
        }
        if (v17)
        {
          uint64_t v18 = v17;
          operator delete(v17);
        }
        int8x16_t v15 = v7;
        if ((v9 & 1) == 0) {
          return v7 - a2;
        }
      }
      if (v7 == v5)
      {
        uint64_t v7 = v5;
        return v7 - a2;
      }
    }
  }
  uint64_t v7 = a2;
  return v7 - a2;
}

void sub_222787EDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  mimosa::PacketV1::~PacketV1((mimosa::PacketV1 *)va);
  _Unwind_Resume(a1);
}

double mimosa::v1::Decoder::reset(mimosa::v1::Decoder *this)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  LOBYTE(vstd::__function::__value_func<BOOL ()(mimosa::Metadata const&)>::~__value_func[abi:ne180100]((void *)this + 5) = 0;
  BYTE4(vstd::__function::__value_func<BOOL ()(mimosa::Metadata const&)>::~__value_func[abi:ne180100]((void *)this + 5) = 0;
  BYTE8(vstd::__function::__value_func<BOOL ()(mimosa::Metadata const&)>::~__value_func[abi:ne180100]((void *)this + 5) = 0;
  BYTE12(vstd::__function::__value_func<BOOL ()(mimosa::Metadata const&)>::~__value_func[abi:ne180100]((void *)this + 5) = 0;
  LOBYTE(v6) = 0;
  LOWORD(v7) = 0;
  v9.n128_u8[0] = 0;
  char v11 = 0;
  v12.n128_u8[0] = 0;
  char v14 = 0;
  __p.n128_u8[0] = 0;
  char v17 = 0;
  v18[0] = 0;
  v18[72] = 0;
  v19[0] = 0;
  v19[1708] = 0;
  *((_WORD *)this + 24) = v8;
  *((_OWORD *)this + 2) = v7;
  *(_OWORD *)this = v5;
  *((_OWORD *)this + std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = v6;
  std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>((uint64_t)this + 56, &v9);
  std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>((uint64_t)this + 88, &v12);
  std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>((uint64_t)this + 120, &__p);
  std::__optional_storage_base<mimosa::LightPathSemantics,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<mimosa::LightPathSemantics,false>>((uint64_t)this + 152, (uint64_t)v18);
  memcpy((char *)this + 232, v19, 0x6ADuLL);
  std::__optional_destruct_base<mimosa::LightPathSemantics,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v18);
  if (v17 && v16 < 0) {
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v14 && v13 < 0) {
    operator delete((void *)v12.n128_u64[0]);
  }
  if (v11 && v10 < 0) {
    operator delete((void *)v9.n128_u64[0]);
  }
  *((unsigned char *)this + 1944) = 1;
  *(_OWORD *)((char *)this + 1948) = 0u;
  *(void *)((char *)this + 1963) = 0;
  *((void *)this + 247) = 0;
  *((_DWORD *)this + 496) = 0;
  *((unsigned char *)this + 1988) = 0;
  unint64_t v2 = (void *)*((void *)this + 249);
  if (v2)
  {
    *((void *)this + 250) = v2;
    operator delete(v2);
  }
  *((void *)this + 24std::__function::__value_func<BOOL ()(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,double)>::~__value_func[abi:ne180100]((void *)this + 9) = 0;
  *((void *)this + 250) = 0;
  *((void *)this + 25std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = 0;
  *((void *)this + 252) = 0;
  *((_DWORD *)this + 506) = 0;
  *((unsigned char *)this + 2028) = 0;
  BOOL v3 = (void *)*((void *)this + 254);
  if (v3)
  {
    *((void *)this + 25std::__function::__value_func<BOOL ()(mimosa::Metadata const&)>::~__value_func[abi:ne180100]((void *)this + 5) = v3;
    operator delete(v3);
  }
  *((void *)this + 254) = 0;
  *((void *)this + 25std::__function::__value_func<BOOL ()(mimosa::Metadata const&)>::~__value_func[abi:ne180100]((void *)this + 5) = 0;
  *((void *)this + 256) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 2056) = 0u;
  *(_OWORD *)((char *)this + 2072) = 0u;
  *(_OWORD *)((char *)this + 2088) = 0u;
  *((void *)this + 263) = 0;
  *((void *)this + 26std::__function::__value_func<BOOL ()(mimosa::Metadata const&)>::~__value_func[abi:ne180100]((void *)this + 5) = 0;
  *((void *)this + 264) = 0;
  return result;
}

void sub_2227880F0(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void mimosa::v1::Decoder::decode_metadata(unsigned __int8 **a1@<X1>, unsigned __int8 *a2@<X2>, unsigned char *a3@<X8>)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  uint64_t v19 = *a1;
  LOBYTE(v20) = 0;
  BYTE4(v20) = 0;
  BYTE8(v20) = 0;
  BYTE12(v20) = 0;
  LOBYTE(v2std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = 0;
  *(_WORD *)uint64_t v23 = 0;
  char v25 = 0;
  v26.__r_.__value_.__s.__data_[0] = 0;
  char v27 = 0;
  __p.__r_.__value_.__s.__data_[0] = 0;
  char v29 = 0;
  v30.__r_.__value_.__s.__data_[0] = 0;
  char v31 = 0;
  v32[0] = 0;
  v32[72] = 0;
  v32[80] = 0;
  v32[1788] = 0;
  if (a2 - v19 > 1
    && (unsigned int v6 = mimosa::v1::decode_verbatim<unsigned short,true>((unsigned __int16 **)&v19, (uint64_t)a2),
        long long v7 = v19,
        a2 - v19 >= v6))
  {
    uint64_t v8 = v6;
    if (v6)
    {
      __n128 v9 = &v19[v6];
      do
      {
        int v10 = mimosa::v1::decode_verbatim<unsigned char,true>(&v19, (uint64_t)a2);
        switch(v10)
        {
          case 1:
            LODWORD(v20) = mimosa::v1::decode_verbatim<unsigned int,true>((unsigned int **)&v19, (uint64_t)a2);
            BYTE4(v20) = 1;
            break;
          case 2:
            DWORD2(v20) = mimosa::v1::decode_verbatim<unsigned int,true>((unsigned int **)&v19, (uint64_t)a2);
            BYTE12(v20) = 1;
            break;
          case 3:
          case 4:
            mimosa::v1::decode_verbatim<unsigned int,true>((unsigned int **)&v19, (uint64_t)a2);
            break;
          case 5:
            uint64_t v21 = mimosa::v1::decode_uuid((uint64_t *)&v19, (uint64_t)a2);
            uint64_t v22 = v11;
            if (!v23[0]) {
              v23[0] = 1;
            }
            break;
          case 6:
            *(void *)&v23[1] = mimosa::v1::decode_uuid((uint64_t *)&v19, (uint64_t)a2);
            uint64_t v24 = v12;
            if (!v25) {
              char v25 = 1;
            }
            break;
          case 7:
            mimosa::v1::decode_metadata_string(&v19, a2, (uint64_t)&v18);
            if (v27)
            {
              if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v26.__r_.__value_.__l.__data_);
              }
              std::string v26 = v18;
            }
            else
            {
              std::string v26 = v18;
              char v27 = 1;
            }
            break;
          case 8:
            mimosa::v1::decode_metadata_string(&v19, a2, (uint64_t)&v18);
            if (v29)
            {
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p.__r_.__value_.__l.__data_);
              }
              std::string __p = v18;
            }
            else
            {
              std::string __p = v18;
              char v29 = 1;
            }
            break;
          case 9:
            mimosa::v1::decode_metadata_string(&v19, a2, (uint64_t)&v18);
            if (v31)
            {
              if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v30.__r_.__value_.__l.__data_);
              }
              std::string v30 = v18;
            }
            else
            {
              std::string v30 = v18;
              char v31 = 1;
            }
            break;
          default:
            int v13 = v10;
            exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
            std::to_string(&v17, v13);
            __n128 v15 = std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("unrecognized key: ", &v17, &v18);
            MEMORY[0x223C9C340](exception, &v18, v15);
            __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
        }
        long long v7 = v19;
      }
      while (v19 < v9);
    }
    if (v7 != &(*a1)[v8 + 2])
    {
      char v16 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v16, "something went wrong during v1 metadata decoding");
      __cxa_throw(v16, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    }
    *a1 = v7;
    std::__optional_destruct_base<mimosa::Metadata,false>::__optional_destruct_base[abi:ne180100]<mimosa::Metadata>((uint64_t)a3, &v20);
  }
  else
  {
    *a3 = 0;
    a3[1944] = 0;
  }
  std::__optional_destruct_base<mimosa::LightPathSemantics,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v32);
  if (v31 && SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__r_.__value_.__l.__data_);
  }
  if (v29 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v27)
  {
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v26.__r_.__value_.__l.__data_);
    }
  }
}

void sub_222788504(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22)
{
}

void mimosa::v1::Decoder::decode_patch(unsigned __int8 *a1@<X0>, int *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v43 = a3;
  *(unsigned char *)a5 = 0;
  *(unsigned char *)(a5 + 8) = 0;
  *(unsigned char *)(a5 + 16) = 0;
  *(unsigned char *)(a5 + 20) = 0;
  *(unsigned char *)(a5 + 24) = 0;
  *(unsigned char *)(a5 + 28) = 0;
  *(unsigned char *)(a5 + 32) = 0;
  *(unsigned char *)(a5 + 40) = 0;
  *(unsigned char *)(a5 + 48) = 0;
  uint64_t v8 = a5 + 48;
  *(unsigned char *)(a5 + 52) = 0;
  *(unsigned char *)(a5 + 56) = 0;
  uint64_t v9 = a5 + 56;
  *(unsigned char *)(a5 + 72) = 0;
  uint64_t v10 = a5 + 72;
  *(unsigned char *)(a5 + 64) = 0;
  *(unsigned char *)(a5 + 76) = 0;
  *(unsigned char *)(a5 + 80) = 0;
  uint64_t v11 = a5 + 80;
  *(unsigned char *)(a5 + 88) = 0;
  *(unsigned char *)(a5 + 96) = 0;
  uint64_t v12 = a5 + 96;
  *(unsigned char *)(a5 + 104) = 0;
  uint64_t v13 = a5 + 104;
  *(unsigned char *)(a5 + 100) = 0;
  *(unsigned char *)(a5 + 112) = 0;
  *(unsigned char *)(a5 + 120) = 0;
  uint64_t v40 = a5 + 120;
  *(unsigned char *)(a5 + 124) = 0;
  *(unsigned char *)(a5 + 128) = 0;
  uint64_t v39 = a5 + 128;
  *(unsigned char *)(a5 + 136) = 0;
  uint64_t v38 = a5 + 136;
  *(unsigned char *)(a5 + 132) = 0;
  *(unsigned char *)(a5 + 140) = 0;
  *(unsigned char *)(a5 + 152) = 0;
  *(unsigned char *)(a5 + 154) = 0;
  *(unsigned char *)(a5 + 156) = 0;
  *(unsigned char *)(a5 + 160) = 0;
  *(unsigned char *)(a5 + 164) = 0;
  *(unsigned char *)(a5 + 168) = 0;
  *(unsigned char *)(a5 + 180) = 0;
  *(unsigned char *)(a5 + 188) = 0;
  *(unsigned char *)(a5 + 192) = 0;
  *(unsigned char *)(a5 + 196) = 0;
  *(_DWORD *)(a5 + 144) = 0;
  char v14 = (_WORD *)(a5 + 144);
  *(_DWORD *)(a5 + 172) = 0;
  unint64_t v37 = (_WORD *)(a5 + 172);
  *(unsigned char *)(a5 + 198) = 0;
  *(_OWORD *)(a5 + 200) = 0u;
  uint64_t v42 = a5 + 200;
  *(_WORD *)(a5 + 148) = 0;
  *(_DWORD *)(a5 + 17std::__function::__value_func<BOOL ()(mimosa::Metadata const&)>::~__value_func[abi:ne180100]((void *)this + 5) = 0;
  *(_DWORD *)(a5 + 182) = 0;
  *(_DWORD *)(a5 + 247) = 0;
  *(_OWORD *)(a5 + 232) = 0u;
  *(_OWORD *)(a5 + 216) = 0u;
  int v15 = *a2;
  if (*a2)
  {
    if ((char *)a4 - (char *)a3 <= 7)
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "attempt to decode past the end of the payload");
      __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    }
    uint64_t v16 = *a3;
    uint64_t v43 = a3 + 1;
    *(void *)a5 = v16;
    *(unsigned char *)(a5 + 8) = 1;
  }
  if ((v15 & 2) != 0)
  {
    *(_DWORD *)(a5 + 16) = mimosa::v1::decode_verbatim<unsigned int,true>((unsigned int **)&v43, (uint64_t)a4);
    *(unsigned char *)(a5 + 20) = 1;
    int v15 = *a2;
  }
  if ((v15 & 4) != 0)
  {
    *(void *)(a5 + 32) = mimosa::v1::decode_verbatim<unsigned long long,true>(&v43, (uint64_t)a4);
    *(unsigned char *)(a5 + 40) = 1;
  }
  else
  {
    *(_DWORD *)(a5 + 24) = mimosa::v1::decode_int33((unsigned char **)&v43, a4);
    *(unsigned char *)(a5 + 28) = 1;
  }
  int v17 = *a2;
  if ((*a2 & 0x80000) != 0)
  {
    int v18 = mimosa::v1::decode_int33((unsigned char **)&v43, a4);
    if (!*(unsigned char *)(a5 + 52)) {
      *(unsigned char *)(a5 + 52) = 1;
    }
    *(_DWORD *)uint64_t v8 = v18;
    *(_DWORD *)uint64_t v10 = v18;
    char v19 = *(unsigned char *)(v8 + 4);
    *(unsigned char *)(v10 + 4) = v19;
    *(_DWORD *)uint64_t v12 = v18;
    *(unsigned char *)(v12 + 4) = v19;
  }
  else if ((v17 & 0x40000) != 0)
  {
    *(void *)(a5 + 56) = mimosa::v1::decode_verbatim<unsigned long long,true>(&v43, (uint64_t)a4);
    *(unsigned char *)(a5 + 64) = 1;
    uint64_t v20 = *(void *)v9;
    *(void *)uint64_t v11 = *(void *)v9;
    char v21 = *(unsigned char *)(v9 + 8);
    *(unsigned char *)(v11 + 8) = v21;
    *(void *)uint64_t v13 = v20;
    *(unsigned char *)(v13 + 8) = v21;
  }
  else
  {
    if ((v17 & 8) != 0)
    {
      int v22 = mimosa::v1::decode_int33((unsigned char **)&v43, a4);
      if (!*(unsigned char *)(a5 + 52)) {
        *(unsigned char *)(a5 + 52) = 1;
      }
      *(_DWORD *)uint64_t v8 = v22;
    }
    else if ((v17 & 0x10) != 0)
    {
      *(void *)(a5 + 56) = mimosa::v1::decode_verbatim<unsigned long long,true>(&v43, (uint64_t)a4);
      *(unsigned char *)(a5 + 64) = 1;
    }
    if ((*a2 & 0x20) != 0)
    {
      int v23 = mimosa::v1::decode_int33((unsigned char **)&v43, a4);
      if (!*(unsigned char *)(a5 + 76)) {
        *(unsigned char *)(a5 + 76) = 1;
      }
      *(_DWORD *)uint64_t v10 = v23;
    }
    else if ((*a2 & 0x40) != 0)
    {
      *(void *)(a5 + 80) = mimosa::v1::decode_verbatim<unsigned long long,true>(&v43, (uint64_t)a4);
      *(unsigned char *)(a5 + 88) = 1;
    }
    if ((*a2 & 0x80) != 0)
    {
      int v24 = mimosa::v1::decode_int33((unsigned char **)&v43, a4);
      if (!*(unsigned char *)(a5 + 100)) {
        *(unsigned char *)(a5 + 100) = 1;
      }
      *(_DWORD *)uint64_t v12 = v24;
    }
    else if ((*a2 & 0x100) != 0)
    {
      *(void *)(a5 + 104) = mimosa::v1::decode_verbatim<unsigned long long,true>(&v43, (uint64_t)a4);
      *(unsigned char *)(a5 + 112) = 1;
    }
  }
  int v25 = *a2;
  if ((*a2 & 0x100200) != 0)
  {
    *(_DWORD *)(a5 + 120) = mimosa::v1::decode_verbatim<unsigned int,true>((unsigned int **)&v43, (uint64_t)a4);
    *(unsigned char *)(a5 + 124) = 1;
    int v25 = *a2;
  }
  if ((v25 & 0x100000) != 0)
  {
    int v26 = *(_DWORD *)v40;
    *(_DWORD *)uint64_t v39 = *(_DWORD *)v40;
    char v27 = *(unsigned char *)(v40 + 4);
    *(unsigned char *)(v39 + 4) = v27;
    *(_DWORD *)uint64_t v38 = v26;
    *(unsigned char *)(v38 + 4) = v27;
    if ((v25 & 0x1000) == 0) {
      goto LABEL_41;
    }
  }
  else
  {
    if ((v25 & 0x400) != 0)
    {
      *(_DWORD *)(a5 + 128) = mimosa::v1::decode_verbatim<unsigned int,true>((unsigned int **)&v43, (uint64_t)a4);
      *(unsigned char *)(a5 + 132) = 1;
      int v25 = *a2;
    }
    if ((v25 & 0x800) != 0)
    {
      *(_DWORD *)(a5 + 136) = mimosa::v1::decode_verbatim<unsigned int,true>((unsigned int **)&v43, (uint64_t)a4);
      *(unsigned char *)(a5 + 140) = 1;
      int v25 = *a2;
    }
    if ((v25 & 0x1000) == 0)
    {
LABEL_41:
      if ((v25 & 0x2000) == 0) {
        goto LABEL_42;
      }
LABEL_46:
      *(_WORD *)(a5 + 146) = mimosa::v1::decode_verbatim<unsigned char,true>((unsigned __int8 **)&v43, (uint64_t)a4) | 0x100;
      if ((*a2 & 0x4000) == 0) {
        goto LABEL_48;
      }
      goto LABEL_47;
    }
  }
  *char v14 = mimosa::v1::decode_verbatim<unsigned char,true>((unsigned __int8 **)&v43, (uint64_t)a4) | 0x100;
  int v25 = *a2;
  if ((*a2 & 0x2000) != 0) {
    goto LABEL_46;
  }
LABEL_42:
  if ((v25 & 0x4000) != 0) {
LABEL_47:
  }
    *(_WORD *)(a5 + 148) = mimosa::v1::decode_verbatim<unsigned char,true>((unsigned __int8 **)&v43, (uint64_t)a4) | 0x100;
LABEL_48:
  __int16 v28 = *((_WORD *)a2 + 2);
  if (v28)
  {
    *(_WORD *)(a5 + 152) = mimosa::v1::decode_verbatim<unsigned short,true>((unsigned __int16 **)&v43, (uint64_t)a4);
    *(unsigned char *)(a5 + 154) = 1;
    __int16 v28 = *((_WORD *)a2 + 2);
  }
  if ((v28 & 2) != 0)
  {
    *(_DWORD *)(a5 + 156) = mimosa::v1::decode_verbatim<unsigned int,true>((unsigned int **)&v43, (uint64_t)a4);
    *(unsigned char *)(a5 + 160) = 1;
    __int16 v28 = *((_WORD *)a2 + 2);
  }
  if ((v28 & 4) != 0)
  {
    *(_DWORD *)(a5 + 164) = mimosa::v1::decode_verbatim<unsigned int,true>((unsigned int **)&v43, (uint64_t)a4);
    *(unsigned char *)(a5 + 168) = 1;
    __int16 v28 = *((_WORD *)a2 + 2);
  }
  if ((v28 & 8) != 0)
  {
    *unint64_t v37 = mimosa::v1::decode_verbatim<unsigned char,true>((unsigned __int8 **)&v43, (uint64_t)a4) | 0x100;
    __int16 v28 = *((_WORD *)a2 + 2);
  }
  if ((v28 & 0x10) != 0)
  {
    *(_WORD *)(a5 + 174) = mimosa::v1::decode_verbatim<unsigned char,true>((unsigned __int8 **)&v43, (uint64_t)a4) | 0x100;
    __int16 v28 = *((_WORD *)a2 + 2);
  }
  if ((v28 & 0x20) != 0)
  {
    *(_WORD *)(a5 + 176) = mimosa::v1::decode_verbatim<unsigned char,true>((unsigned __int8 **)&v43, (uint64_t)a4) | 0x100;
    __int16 v28 = *((_WORD *)a2 + 2);
  }
  if ((v28 & 0x40) != 0)
  {
    *(_WORD *)(a5 + 178) = mimosa::v1::decode_verbatim<unsigned short,true>((unsigned __int16 **)&v43, (uint64_t)a4);
    *(unsigned char *)(a5 + 180) = 1;
    __int16 v28 = *((_WORD *)a2 + 2);
  }
  if ((v28 & 0x80) != 0)
  {
    *(_WORD *)(a5 + 182) = mimosa::v1::decode_verbatim<unsigned char,true>((unsigned __int8 **)&v43, (uint64_t)a4) | 0x100;
    __int16 v28 = *((_WORD *)a2 + 2);
  }
  if ((v28 & 0x100) != 0)
  {
    *(_WORD *)(a5 + 184) = mimosa::v1::decode_verbatim<unsigned char,true>((unsigned __int8 **)&v43, (uint64_t)a4) | 0x100;
    __int16 v28 = *((_WORD *)a2 + 2);
  }
  if ((v28 & 0x200) != 0)
  {
    *(_DWORD *)(a5 + 188) = mimosa::v1::decode_verbatim<unsigned int,true>((unsigned int **)&v43, (uint64_t)a4);
    *(unsigned char *)(a5 + 192) = 1;
    __int16 v28 = *((_WORD *)a2 + 2);
  }
  if ((v28 & 0x400) != 0)
  {
    *(_WORD *)(a5 + 196) = mimosa::v1::decode_verbatim<unsigned short,true>((unsigned __int16 **)&v43, (uint64_t)a4);
    *(unsigned char *)(a5 + 198) = 1;
  }
  if ((*a2 & 0x8000) != 0)
  {
    *(unsigned char *)(a5 + 248) = 1;
    unsigned int v29 = mimosa::v1::decode_verbatim<unsigned char,true>((unsigned __int8 **)&v43, (uint64_t)a4);
  }
  else if ((*a2 & 0x10000) != 0)
  {
    *(unsigned char *)(a5 + 248) = 1;
    unsigned int v29 = a1[1969];
  }
  else
  {
    unsigned int v29 = a1[1968];
  }
  std::vector<mimosa::v1::Decoder::Patch::OpticalSamplePatch>::resize(v42, v29);
  if ((*((unsigned char *)a2 + 2) & 2) != 0)
  {
    *(unsigned char *)(a5 + 24std::__function::__value_func<BOOL ()(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,double)>::~__value_func[abi:ne180100]((void *)this + 9) = 1;
    unsigned int v30 = mimosa::v1::decode_verbatim<unsigned char,true>((unsigned __int8 **)&v43, (uint64_t)a4);
  }
  else
  {
    unsigned int v30 = a1[1970];
  }
  std::vector<mimosa::v1::Decoder::Patch::AccelSamplePatch>::resize((uint64_t)(v14 + 40), v30);
  if (v29)
  {
    unsigned int v32 = *a2;
    if ((*a2 & 0x200000) != 0)
    {
      mimosa::v1::Decoder::decode_ambient_adc_changes(v31, a5, (uint64_t *)&v43, a4);
      unsigned int v32 = *a2;
    }
    if ((v32 & 0xC00000) != 0)
    {
      mimosa::v1::Decoder::decode_pgg_flag_changes(v31, a5, (unsigned __int16 **)&v43, (uint64_t)a4, (v32 >> 23) & 1);
      unsigned int v32 = *a2;
    }
    if ((v32 & 0x1000000) != 0) {
      mimosa::v1::Decoder::decode_rare_ppg_changes(v31, a5, (unsigned __int16 **)&v43, (uint64_t)a4);
    }
    uint64_t v33 = *(void *)(a5 + 200);
    uint64_t v34 = *(void *)(a5 + 208);
    while (v33 != v34)
    {
      *(void *)(v33 + 56) = mimosa::v1::decode_int33((unsigned char **)&v43, a4);
      unint64_t v31 = mimosa::v1::decode_int33((unsigned char **)&v43, a4);
      *(void *)(v33 + 64) = v31;
      v33 += 72;
    }
  }
  if (v30) {
    mimosa::v1::Decoder::decode_accel_changes(v31, a5, (unsigned __int8 **)&v43, a4, (*a2 >> 25) & 1);
  }
  if (v43 != a4)
  {
    size_t v35 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v35, "something went wrong during v1 patch decoding");
    __cxa_throw(v35, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
}

void sub_222788CD4(_Unwind_Exception *a1)
{
  mimosa::v1::Decoder::Patch::~Patch(v1);
  _Unwind_Resume(a1);
}

void mimosa::v1::Decoder::Patch::~Patch(mimosa::v1::Decoder::Patch *this)
{
  unint64_t v2 = (void *)*((void *)this + 28);
  if (v2)
  {
    *((void *)this + 2std::__function::__value_func<BOOL ()(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,double)>::~__value_func[abi:ne180100]((void *)this + 9) = v2;
    operator delete(v2);
  }
  BOOL v3 = (void *)*((void *)this + 25);
  if (v3)
  {
    *((void *)this + 26) = v3;
    operator delete(v3);
  }
}

uint64_t std::function<BOOL ()(mimosa::PacketV1 const&,double)>::operator()(uint64_t a1, uint64_t a2, double a3)
{
  double v5 = a3;
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, double *))(*(void *)v3 + 48))(v3, a2, &v5);
}

uint64_t mimosa::v1::decode_verbatim<unsigned short,true>(unsigned __int16 **a1, uint64_t a2)
{
  unint64_t v2 = *a1;
  if (a2 - (uint64_t)*a1 <= 1)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "attempt to decode past the end of the payload");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  uint64_t v3 = *v2;
  *a1 = v2 + 1;
  return v3;
}

void sub_222788E80(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t mimosa::v1::decode_verbatim<unsigned char,true>(unsigned __int8 **a1, uint64_t a2)
{
  unint64_t v2 = *a1;
  if (a2 - (uint64_t)*a1 <= 0)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "attempt to decode past the end of the payload");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  uint64_t v3 = *v2;
  *a1 = v2 + 1;
  return v3;
}

void sub_222788F04(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t mimosa::v1::decode_verbatim<unsigned int,true>(unsigned int **a1, uint64_t a2)
{
  unint64_t v2 = *a1;
  if (a2 - (uint64_t)*a1 <= 3)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "attempt to decode past the end of the payload");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  uint64_t v3 = *v2;
  *a1 = v2 + 1;
  return v3;
}

void sub_222788F88(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t mimosa::v1::decode_uuid(uint64_t *a1, uint64_t a2)
{
  void v6[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = *a1;
  if (a2 - *a1 < 16)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "attempt to decode past the end of the payload");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  for (uint64_t i = 0; i != 16; ++i)
  {
    *a1 = v2 + i + 1;
    *((unsigned char *)v6 + i) = *(unsigned char *)(v2 + i);
  }
  return v6[0];
}

void sub_222789060(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mimosa::v1::decode_metadata_string(unsigned __int8 **a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v4 = *a1;
  if (*a1 == a2 || (*a1 = v4 + 1, std::string::size_type v6 = *v4, a2 - (v4 + 1) < (uint64_t)v6))
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "attempt to decode past the end of the payload");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  std::string::reserve((std::string *)a3, v6);
  while (1)
  {
    std::string::size_type v7 = *(unsigned __int8 *)(a3 + 23);
    if ((v7 & 0x80u) != 0) {
      std::string::size_type v7 = *(void *)(a3 + 8);
    }
    if (v7 >= v6) {
      break;
    }
    uint64_t v8 = (std::string::value_type *)(*a1)++;
    std::string::push_back((std::string *)a3, *v8);
  }
}

void sub_222789164(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t mimosa::v1::decode_verbatim<unsigned long long,true>(uint64_t **a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  if (a2 - (uint64_t)*a1 <= 7)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "attempt to decode past the end of the payload");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  uint64_t v3 = *v2;
  *a1 = v2 + 1;
  return v3;
}

void sub_222789208(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unint64_t mimosa::v1::decode_int33(unsigned char **a1, unsigned char *a2)
{
  unint64_t v2 = 0;
  LOBYTE(v3) = 0;
  unint64_t v4 = *a1;
  while (1)
  {
    if (v4 == a2)
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "exhausted the buffer without finding the end of the varint");
LABEL_8:
      __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    }
    *a1 = v4 + 1;
    v2 |= (unint64_t)(*v4 & 0x7F) << (7 * v3);
    if ((*v4 & 0x80) == 0) {
      return -(uint64_t)(v2 & 1) ^ (v2 >> 1);
    }
    int v3 = v3 + 1;
    ++v4;
    if (v3 == 5)
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "buffer does not contain a signed 33-bit varint");
      goto LABEL_8;
    }
  }
}

void sub_2227892E4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::vector<mimosa::v1::Decoder::Patch::OpticalSamplePatch>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3);
  BOOL v3 = a2 >= v2;
  unint64_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<mimosa::v1::Decoder::Patch::OpticalSamplePatch>::__append((void **)a1, v4);
  }
  else if (!v3)
  {
    *(void *)(a1 + 8) = *(void *)a1 + 72 * a2;
  }
}

void std::vector<mimosa::v1::Decoder::Patch::AccelSamplePatch>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3);
  BOOL v3 = a2 >= v2;
  unint64_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<mimosa::v1::Decoder::Patch::AccelSamplePatch>::__append((void **)a1, v4);
  }
  else if (!v3)
  {
    *(void *)(a1 + 8) = *(void *)a1 + 40 * a2;
  }
}

void mimosa::v1::Decoder::decode_ambient_adc_changes(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned char *a4)
{
  uint64_t v5 = *(void *)(a2 + 200);
  uint64_t v4 = *(void *)(a2 + 208);
  unint64_t v6 = 0x8E38E38E38E38E39 * ((v4 - v5) >> 3) + 7;
  if ((uint64_t)&a4[-*a3] < (v6 >> 3))
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "attempt to read past the end of the buffer");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  if ((v6 & 0x7F8) != 0)
  {
    uint64_t v10 = 0;
    unint64_t v11 = 0;
    uint64_t v12 = (v6 >> 3);
    uint64_t v13 = *a3 + 1;
    do
    {
      *a3 = v13;
      v11 |= (unint64_t)*(unsigned __int8 *)(v13 - 1) << v10;
      v10 += 8;
      ++v13;
      --v12;
    }
    while (v12);
  }
  else
  {
    unint64_t v11 = 0;
  }
  if (v4 != v5)
  {
    uint64_t v14 = 0;
    unsigned int v15 = 1;
    do
    {
      if ((v11 >> v14))
      {
        unint64_t v16 = mimosa::v1::decode_int33((unsigned char **)a3, a4);
        uint64_t v17 = *(void *)(a2 + 200) + 72 * v14;
        *(void *)(v17 + 32) = v16;
        *(unsigned char *)(v17 + 40) = 1;
        uint64_t v5 = *(void *)(a2 + 200);
        uint64_t v4 = *(void *)(a2 + 208);
      }
      uint64_t v14 = v15;
    }
    while (0x8E38E38E38E38E39 * ((v4 - v5) >> 3) > v15++);
  }
}

void sub_2227894E0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mimosa::v1::Decoder::decode_pgg_flag_changes(uint64_t a1, uint64_t a2, unsigned __int16 **a3, uint64_t a4, int a5)
{
  if (a5)
  {
    __int16 v8 = mimosa::v1::decode_verbatim<unsigned short,true>(a3, a4);
    uint64_t v9 = *(void *)(a2 + 200);
    for (uint64_t i = *(void *)(a2 + 208); v9 != i; v9 += 72)
    {
      *(_WORD *)(v9 + 4) = v8;
      *(unsigned char *)(v9 + 6) = 1;
    }
  }
  else
  {
    uint64_t v12 = *(void *)(a2 + 200);
    uint64_t v11 = *(void *)(a2 + 208);
    unint64_t v13 = 0x8E38E38E38E38E39 * ((v11 - v12) >> 3) + 7;
    if (a4 - (uint64_t)*a3 < (v13 >> 3))
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "attempt to read past the end of the buffer");
      __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    }
    if ((v13 & 0x7F8) != 0)
    {
      uint64_t v14 = 0;
      unint64_t v15 = 0;
      uint64_t v16 = (v13 >> 3);
      uint64_t v17 = (uint64_t)*a3 + 1;
      do
      {
        *a3 = (unsigned __int16 *)v17;
        v15 |= (unint64_t)*(unsigned __int8 *)(v17 - 1) << v14;
        v14 += 8;
        ++v17;
        --v16;
      }
      while (v16);
    }
    else
    {
      unint64_t v15 = 0;
    }
    if (v11 != v12)
    {
      uint64_t v18 = 0;
      unsigned int v19 = 1;
      do
      {
        if ((v15 >> v18))
        {
          __int16 v20 = mimosa::v1::decode_verbatim<unsigned short,true>(a3, a4);
          uint64_t v21 = *(void *)(a2 + 200) + 72 * v18;
          *(_WORD *)(v21 + 4) = v20;
          *(unsigned char *)(v21 + 6) = 1;
          uint64_t v12 = *(void *)(a2 + 200);
          uint64_t v11 = *(void *)(a2 + 208);
        }
        uint64_t v18 = v19;
      }
      while (0x8E38E38E38E38E39 * ((v11 - v12) >> 3) > v19++);
    }
  }
}

void sub_222789690(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mimosa::v1::Decoder::decode_rare_ppg_changes(uint64_t a1, uint64_t a2, unsigned __int16 **a3, uint64_t a4)
{
  uint64_t v4 = *(_WORD **)(a2 + 200);
  uint64_t v5 = *(_WORD **)(a2 + 208);
  if (v4 != v5)
  {
    __int16 v8 = v4 + 13;
    do
    {
      __int16 v9 = mimosa::v1::decode_verbatim<unsigned short,true>(a3, a4);
      __int16 v10 = v9;
      if (v9)
      {
        *(v8 - 13) = mimosa::v1::decode_verbatim<unsigned short,true>(a3, a4);
        *((unsigned char *)v8 - 24) = 1;
        if ((v10 & 2) == 0)
        {
LABEL_5:
          if ((v10 & 4) == 0) {
            goto LABEL_6;
          }
          goto LABEL_19;
        }
      }
      else if ((v9 & 2) == 0)
      {
        goto LABEL_5;
      }
      *(v8 - std::__function::__value_func<BOOL ()(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,double)>::~__value_func[abi:ne180100]((void *)this + 9) = mimosa::v1::decode_verbatim<unsigned short,true>(a3, a4);
      *((unsigned char *)v8 - 16) = 1;
      if ((v10 & 4) == 0)
      {
LABEL_6:
        if ((v10 & 8) == 0) {
          goto LABEL_7;
        }
        goto LABEL_20;
      }
LABEL_19:
      *(v8 - 7) = mimosa::v1::decode_verbatim<unsigned char,true>((unsigned __int8 **)a3, a4) | 0x100;
      if ((v10 & 8) == 0)
      {
LABEL_7:
        if ((v10 & 0x10) == 0) {
          goto LABEL_8;
        }
        goto LABEL_21;
      }
LABEL_20:
      *(v8 - 6) = mimosa::v1::decode_verbatim<unsigned short,true>(a3, a4);
      *((unsigned char *)v8 - 10) = 1;
      if ((v10 & 0x10) == 0)
      {
LABEL_8:
        if ((v10 & 0x20) == 0) {
          goto LABEL_9;
        }
        goto LABEL_22;
      }
LABEL_21:
      *(v8 - 4) = mimosa::v1::decode_verbatim<unsigned short,true>(a3, a4);
      *((unsigned char *)v8 - 6) = 1;
      if ((v10 & 0x20) == 0)
      {
LABEL_9:
        if ((v10 & 0x40) == 0) {
          goto LABEL_10;
        }
        goto LABEL_23;
      }
LABEL_22:
      *(v8 - 2) = mimosa::v1::decode_verbatim<unsigned short,true>(a3, a4);
      *((unsigned char *)v8 - 2) = 1;
      if ((v10 & 0x40) == 0)
      {
LABEL_10:
        if ((v10 & 0x80) == 0) {
          goto LABEL_11;
        }
        goto LABEL_24;
      }
LABEL_23:
      _WORD *v8 = mimosa::v1::decode_verbatim<unsigned char,true>((unsigned __int8 **)a3, a4) | 0x100;
      if ((v10 & 0x80) == 0)
      {
LABEL_11:
        if ((v10 & 0x100) == 0) {
          goto LABEL_12;
        }
        goto LABEL_25;
      }
LABEL_24:
      v8[1] = mimosa::v1::decode_verbatim<unsigned char,true>((unsigned __int8 **)a3, a4) | 0x100;
      if ((v10 & 0x100) == 0)
      {
LABEL_12:
        if ((v10 & 0x200) != 0) {
          goto LABEL_26;
        }
        goto LABEL_13;
      }
LABEL_25:
      v8[2] = mimosa::v1::decode_verbatim<unsigned char,true>((unsigned __int8 **)a3, a4) | 0x100;
      if ((v10 & 0x200) != 0)
      {
LABEL_26:
        v8[11] = mimosa::v1::decode_verbatim<unsigned char,true>((unsigned __int8 **)a3, a4) | 0x100;
        if ((v10 & 0x400) == 0) {
          goto LABEL_15;
        }
LABEL_14:
        v8[12] = mimosa::v1::decode_verbatim<unsigned char,true>((unsigned __int8 **)a3, a4) | 0x100;
        goto LABEL_15;
      }
LABEL_13:
      if ((v10 & 0x400) != 0) {
        goto LABEL_14;
      }
LABEL_15:
      uint64_t v11 = v8 + 23;
      v8 += 36;
    }
    while (v11 != v5);
  }
}

void mimosa::v1::Decoder::decode_accel_changes(uint64_t a1, uint64_t a2, unsigned __int8 **a3, unsigned char *a4, int a5)
{
  if (a5)
  {
    uint64_t v8 = *(void *)(a2 + 224);
    for (uint64_t i = *(void *)(a2 + 232); v8 != i; v8 += 40)
    {
      char v10 = mimosa::v1::decode_verbatim<unsigned char,true>(a3, (uint64_t)a4);
      char v11 = v10;
      if (v10)
      {
        *(_WORD *)uint64_t v8 = mimosa::v1::decode_verbatim<unsigned char,true>(a3, (uint64_t)a4) | 0x100;
        if ((v11 & 2) != 0)
        {
LABEL_10:
          *(_WORD *)(v8 + 2) = mimosa::v1::decode_verbatim<unsigned short,true>((unsigned __int16 **)a3, (uint64_t)a4);
          *(unsigned char *)(v8 + 4) = 1;
          if ((v11 & 4) == 0) {
            continue;
          }
LABEL_6:
          *(_WORD *)(v8 + 6) = mimosa::v1::decode_verbatim<unsigned short,true>((unsigned __int16 **)a3, (uint64_t)a4);
          *(unsigned char *)(v8 + 8) = 1;
          continue;
        }
      }
      else if ((v10 & 2) != 0)
      {
        goto LABEL_10;
      }
      if ((v11 & 4) != 0) {
        goto LABEL_6;
      }
    }
  }
  uint64_t v13 = *(void *)(a2 + 224);
  uint64_t v12 = *(void *)(a2 + 232);
  while (v13 != v12)
  {
    for (uint64_t j = 16; j != 40; j += 8)
      *(void *)(v13 + j) = (int)mimosa::v1::decode_int33(a3, a4);
    v13 += 40;
  }
}

char *std::vector<mimosa::OpticalSampleV1>::__assign_with_size[abi:ne180100]<mimosa::OpticalSampleV1*,mimosa::OpticalSampleV1*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  std::string::size_type v7 = result;
  uint64_t v8 = *((void *)result + 2);
  __int16 v9 = *(char **)result;
  if (0x8E38E38E38E38E39 * ((v8 - *(void *)result) >> 2) < a4)
  {
    if (v9)
    {
      *((void *)result + std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 > 0x71C71C71C71C71CLL) {
      std::vector<mimosa::OpticalSampleV1>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x8E38E38E38E38E39 * (v8 >> 2);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= a4) {
      uint64_t v11 = a4;
    }
    if (v10 >= 0x38E38E38E38E38ELL) {
      unint64_t v12 = 0x71C71C71C71C71CLL;
    }
    else {
      unint64_t v12 = v11;
    }
    double result = std::vector<mimosa::OpticalSampleV1>::__vallocate[abi:ne180100](v7, v12);
    uint64_t v14 = (char *)v7[1];
    uint64_t v13 = (void **)(v7 + 1);
    __int16 v9 = v14;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      uint64_t v18 = v9;
      unsigned int v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  uint64_t v13 = (void **)(result + 8);
  unint64_t v15 = (unsigned char *)*((void *)result + 1);
  if (0x8E38E38E38E38E39 * ((v15 - v9) >> 2) >= a4) {
    goto LABEL_16;
  }
  uint64_t v16 = &__src[4 * ((v15 - v9) >> 2)];
  if (v15 != v9)
  {
    double result = (char *)memmove(*(void **)result, __src, v15 - v9);
    __int16 v9 = (char *)*v13;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    uint64_t v18 = v9;
    unsigned int v19 = v16;
LABEL_18:
    double result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *uint64_t v13 = &v9[v17];
  return result;
}

void std::vector<mimosa::OpticalSampleV1>::__append(void **a1, unint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  std::string::size_type v7 = *(char **)(v4 - 8);
  if (0x8E38E38E38E38E39 * ((v6 - v7) >> 2) >= a2)
  {
    if (a2)
    {
      size_t v13 = 36 * ((36 * a2 - 36) / 0x24) + 36;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0x8E38E38E38E38E39 * ((v7 - (unsigned char *)*a1) >> 2);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x71C71C71C71C71CLL) {
      std::vector<mimosa::OpticalSampleV1>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x8E38E38E38E38E39 * ((v5 - (unsigned char *)*a1) >> 2);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x38E38E38E38E38ELL) {
      unint64_t v11 = 0x71C71C71C71C71CLL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11) {
      unint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<mimosa::OpticalSampleV1>>(v4, v11);
    }
    else {
      unint64_t v12 = 0;
    }
    uint64_t v14 = &v12[36 * v8];
    unint64_t v15 = &v12[36 * v11];
    size_t v16 = 36 * ((36 * a2 - 36) / 0x24) + 36;
    bzero(v14, v16);
    size_t v17 = &v14[v16];
    unsigned int v19 = (char *)*a1;
    uint64_t v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        long long v20 = *(_OWORD *)(v18 - 36);
        long long v21 = *(_OWORD *)(v18 - 20);
        *((_DWORD *)v14 - std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = *((_DWORD *)v18 - 1);
        *(_OWORD *)(v14 - 20) = v21;
        *(_OWORD *)(v14 - 36) = v20;
        v14 -= 36;
        v18 -= 36;
      }
      while (v18 != v19);
      uint64_t v18 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v15;
    if (v18)
    {
      operator delete(v18);
    }
  }
}

char *std::vector<mimosa::AccelSample>::__assign_with_size[abi:ne180100]<mimosa::AccelSample*,mimosa::AccelSample*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  std::string::size_type v7 = result;
  uint64_t v8 = *((void *)result + 2);
  unint64_t v9 = *(char **)result;
  if (0xCCCCCCCCCCCCCCCDLL * ((v8 - *(void *)result) >> 2) < a4)
  {
    if (v9)
    {
      *((void *)result + std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 > 0xCCCCCCCCCCCCCCCLL) {
      std::vector<mimosa::OpticalSampleV1>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * (v8 >> 2);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= a4) {
      uint64_t v11 = a4;
    }
    if (v10 >= 0x666666666666666) {
      unint64_t v12 = 0xCCCCCCCCCCCCCCCLL;
    }
    else {
      unint64_t v12 = v11;
    }
    double result = std::vector<mimosa::AccelSample>::__vallocate[abi:ne180100](v7, v12);
    uint64_t v14 = (char *)v7[1];
    size_t v13 = (void **)(v7 + 1);
    unint64_t v9 = v14;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      uint64_t v18 = v9;
      unsigned int v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  size_t v13 = (void **)(result + 8);
  unint64_t v15 = (unsigned char *)*((void *)result + 1);
  if (0xCCCCCCCCCCCCCCCDLL * ((v15 - v9) >> 2) >= a4) {
    goto LABEL_16;
  }
  size_t v16 = &__src[4 * ((v15 - v9) >> 2)];
  if (v15 != v9)
  {
    double result = (char *)memmove(*(void **)result, __src, v15 - v9);
    unint64_t v9 = (char *)*v13;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    uint64_t v18 = v9;
    unsigned int v19 = v16;
LABEL_18:
    double result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *size_t v13 = &v9[v17];
  return result;
}

void std::vector<mimosa::AccelSample>::__append(void **a1, unint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  std::string::size_type v7 = *(char **)(v4 - 8);
  if (0xCCCCCCCCCCCCCCCDLL * ((v6 - v7) >> 2) >= a2)
  {
    if (a2)
    {
      size_t v13 = 20 * ((20 * a2 - 20) / 0x14) + 20;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((v7 - (unsigned char *)*a1) >> 2);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xCCCCCCCCCCCCCCCLL) {
      std::vector<mimosa::OpticalSampleV1>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - (unsigned char *)*a1) >> 2);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x666666666666666) {
      unint64_t v11 = 0xCCCCCCCCCCCCCCCLL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11) {
      unint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<mimosa::AccelSample>>(v4, v11);
    }
    else {
      unint64_t v12 = 0;
    }
    uint64_t v14 = &v12[20 * v8];
    unint64_t v15 = &v12[20 * v11];
    size_t v16 = 20 * ((20 * a2 - 20) / 0x14) + 20;
    bzero(v14, v16);
    size_t v17 = &v14[v16];
    unsigned int v19 = (char *)*a1;
    uint64_t v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        long long v20 = *(_OWORD *)(v18 - 20);
        *((_DWORD *)v14 - std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = *((_DWORD *)v18 - 1);
        *(_OWORD *)(v14 - 20) = v20;
        v14 -= 20;
        v18 -= 20;
      }
      while (v18 != v19);
      uint64_t v18 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v15;
    if (v18)
    {
      operator delete(v18);
    }
  }
}

uint64_t std::__optional_destruct_base<mimosa::Metadata,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 1944))
  {
    std::__optional_destruct_base<mimosa::LightPathSemantics,false>::~__optional_destruct_base[abi:ne180100](a1 + 152);
    if (*(unsigned char *)(a1 + 144) && *(char *)(a1 + 143) < 0) {
      operator delete(*(void **)(a1 + 120));
    }
    if (*(unsigned char *)(a1 + 112) && *(char *)(a1 + 111) < 0) {
      operator delete(*(void **)(a1 + 88));
    }
    if (*(unsigned char *)(a1 + 80) && *(char *)(a1 + 79) < 0) {
      operator delete(*(void **)(a1 + 56));
    }
  }
  return a1;
}

uint64_t std::__optional_destruct_base<mimosa::Metadata,false>::__optional_destruct_base[abi:ne180100]<mimosa::Metadata>(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  long long v5 = a2[1];
  long long v6 = a2[2];
  *(_WORD *)(a1 + 48) = *((_WORD *)a2 + 24);
  *(_OWORD *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)a1 = v4;
  *(unsigned char *)(a1 + 56) = 0;
  *(unsigned char *)(a1 + 80) = 0;
  if (*((unsigned char *)a2 + 80))
  {
    long long v7 = *(long long *)((char *)a2 + 56);
    *(void *)(a1 + 72) = *((void *)a2 + 9);
    *(_OWORD *)(a1 + 56) = v7;
    *((void *)a2 + 8) = 0;
    *((void *)a2 + std::__function::__value_func<BOOL ()(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,double)>::~__value_func[abi:ne180100]((void *)this + 9) = 0;
    *((void *)a2 + 7) = 0;
    *(unsigned char *)(a1 + 80) = 1;
  }
  *(unsigned char *)(a1 + 88) = 0;
  *(unsigned char *)(a1 + 112) = 0;
  if (*((unsigned char *)a2 + 112))
  {
    long long v8 = *(long long *)((char *)a2 + 88);
    *(void *)(a1 + 104) = *((void *)a2 + 13);
    *(_OWORD *)(a1 + 88) = v8;
    *((void *)a2 + 12) = 0;
    *((void *)a2 + 13) = 0;
    *((void *)a2 + 1std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = 0;
    *(unsigned char *)(a1 + 112) = 1;
  }
  *(unsigned char *)(a1 + 120) = 0;
  *(unsigned char *)(a1 + 144) = 0;
  if (*((unsigned char *)a2 + 144))
  {
    long long v9 = *(long long *)((char *)a2 + 120);
    *(void *)(a1 + 136) = *((void *)a2 + 17);
    *(_OWORD *)(a1 + 120) = v9;
    *((void *)a2 + 16) = 0;
    *((void *)a2 + 17) = 0;
    *((void *)a2 + 1std::__function::__value_func<BOOL ()(mimosa::Metadata const&)>::~__value_func[abi:ne180100]((void *)this + 5) = 0;
    *(unsigned char *)(a1 + 144) = 1;
  }
  *(unsigned char *)(a1 + 152) = 0;
  unint64_t v10 = (void *)(a1 + 152);
  *(unsigned char *)(a1 + 224) = 0;
  if (*((unsigned char *)a2 + 224))
  {
    std::construct_at[abi:ne180100]<mimosa::LightPathSemantics,mimosa::LightPathSemantics,mimosa::LightPathSemantics*>(v10, (uint64_t)a2 + 152);
    *(unsigned char *)(a1 + 224) = 1;
  }
  memcpy((void *)(a1 + 232), (char *)a2 + 232, 0x6B0uLL);
  *(unsigned char *)(a1 + 1944) = 1;
  return a1;
}

__n128 std::construct_at[abi:ne180100]<mimosa::LightPathSemantics,mimosa::LightPathSemantics,mimosa::LightPathSemantics*>(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 24);
  a1[5] = *(void *)(a2 + 40);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  a1[6] = 0;
  a1[7] = 0;
  a1[8] = 0;
  __n128 result = *(__n128 *)(a2 + 48);
  *((__n128 *)a1 + 3) = result;
  a1[8] = *(void *)(a2 + 64);
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  return result;
}

void std::vector<mimosa::v1::Decoder::Patch::OpticalSamplePatch>::__append(void **a1, unint64_t a2)
{
  long long v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  long long v5 = v6;
  long long v7 = *(char **)(v4 - 8);
  if (0x8E38E38E38E38E39 * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v13 = 72 * ((72 * a2 - 72) / 0x48) + 72;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0x8E38E38E38E38E39 * ((v7 - (unsigned char *)*a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x38E38E38E38E38ELL) {
      std::vector<mimosa::OpticalSampleV1>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x8E38E38E38E38E39 * ((v5 - (unsigned char *)*a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x1C71C71C71C71C7) {
      unint64_t v11 = 0x38E38E38E38E38ELL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11) {
      unint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<mimosa::v1::Decoder::Patch::OpticalSamplePatch>>(v4, v11);
    }
    else {
      unint64_t v12 = 0;
    }
    uint64_t v14 = &v12[72 * v8];
    unint64_t v15 = &v12[72 * v11];
    size_t v16 = 72 * ((72 * a2 - 72) / 0x48) + 72;
    bzero(v14, v16);
    size_t v17 = &v14[v16];
    unsigned int v19 = (char *)*a1;
    uint64_t v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        *(_OWORD *)(v14 - 72) = *(_OWORD *)(v18 - 72);
        long long v20 = *(_OWORD *)(v18 - 56);
        long long v21 = *(_OWORD *)(v18 - 40);
        long long v22 = *(_OWORD *)(v18 - 24);
        *((void *)v14 - std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = *((void *)v18 - 1);
        *(_OWORD *)(v14 - 24) = v22;
        *(_OWORD *)(v14 - 40) = v21;
        *(_OWORD *)(v14 - 56) = v20;
        v14 -= 72;
        v18 -= 72;
      }
      while (v18 != v19);
      uint64_t v18 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v15;
    if (v18)
    {
      operator delete(v18);
    }
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<mimosa::v1::Decoder::Patch::OpticalSamplePatch>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x38E38E38E38E38FLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(72 * a2);
}

void std::vector<mimosa::v1::Decoder::Patch::AccelSamplePatch>::__append(void **a1, unint64_t a2)
{
  long long v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  long long v5 = v6;
  long long v7 = *(char **)(v4 - 8);
  if (0xCCCCCCCCCCCCCCCDLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v13 = 40 * ((40 * a2 - 40) / 0x28) + 40;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((v7 - (unsigned char *)*a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x666666666666666) {
      std::vector<mimosa::OpticalSampleV1>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - (unsigned char *)*a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x333333333333333) {
      unint64_t v11 = 0x666666666666666;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11) {
      unint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<mimosa::v1::Decoder::Patch::AccelSamplePatch>>(v4, v11);
    }
    else {
      unint64_t v12 = 0;
    }
    uint64_t v14 = &v12[40 * v8];
    unint64_t v15 = &v12[40 * v11];
    size_t v16 = 40 * ((40 * a2 - 40) / 0x28) + 40;
    bzero(v14, v16);
    size_t v17 = &v14[v16];
    unsigned int v19 = (char *)*a1;
    uint64_t v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        long long v20 = *(_OWORD *)(v18 - 40);
        long long v21 = *(_OWORD *)(v18 - 24);
        *((void *)v14 - std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = *((void *)v18 - 1);
        *(_OWORD *)(v14 - 24) = v21;
        *(_OWORD *)(v14 - 40) = v20;
        v14 -= 40;
        v18 -= 40;
      }
      while (v18 != v19);
      uint64_t v18 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v15;
    if (v18)
    {
      operator delete(v18);
    }
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<mimosa::v1::Decoder::Patch::AccelSamplePatch>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x666666666666667) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(40 * a2);
}

__n128 std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(uint64_t a1, __n128 *a2)
{
  if (*(unsigned __int8 *)(a1 + 24) == a2[1].n128_u8[8])
  {
    if (*(unsigned char *)(a1 + 24))
    {
      if (*(char *)(a1 + 23) < 0) {
        operator delete(*(void **)a1);
      }
      __n128 result = *a2;
      *(void *)(a1 + 16) = a2[1].n128_u64[0];
      *(__n128 *)a1 = result;
      a2[1].n128_u8[7] = 0;
      a2->n128_u8[0] = 0;
    }
  }
  else if (*(unsigned char *)(a1 + 24))
  {
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
    *(unsigned char *)(a1 + 24) = 0;
  }
  else
  {
    __n128 result = *a2;
    *(void *)(a1 + 16) = a2[1].n128_u64[0];
    *(__n128 *)a1 = result;
    a2->n128_u64[1] = 0;
    a2[1].n128_u64[0] = 0;
    a2->n128_u64[0] = 0;
    *(unsigned char *)(a1 + 24) = 1;
  }
  return result;
}

void std::__optional_storage_base<mimosa::LightPathSemantics,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<mimosa::LightPathSemantics,false>>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 72) == *(unsigned __int8 *)(a2 + 72))
  {
    if (*(unsigned char *)(a1 + 72))
    {
      std::vector<unsigned short>::__move_assign(a1, (__n128 *)a2);
      std::vector<unsigned short>::__move_assign(a1 + 24, (__n128 *)(a2 + 24));
      std::vector<unsigned short>::__move_assign(a1 + 48, (__n128 *)(a2 + 48));
    }
  }
  else if (*(unsigned char *)(a1 + 72))
  {
    std::__optional_destruct_base<mimosa::LightPathSemantics,false>::reset[abi:ne180100](a1);
  }
  else
  {
    std::construct_at[abi:ne180100]<mimosa::LightPathSemantics,mimosa::LightPathSemantics,mimosa::LightPathSemantics*>((void *)a1, a2);
    *(unsigned char *)(a1 + 72) = 1;
  }
}

uint64_t std::__function::__value_func<BOOL ()(mimosa::PacketV1 const&,double)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t mimosa::Decoder::Decoder(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v7 = std::__function::__value_func<BOOL ()(mimosa::CodecVersion const&)>::__value_func[abi:ne180100](a1, a2);
  std::__function::__value_func<BOOL ()(mimosa::Metadata const&)>::__value_func[abi:ne180100](v7 + 32, a3);
  std::__function::__value_func<BOOL ()(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,double)>::__value_func[abi:ne180100](a1 + 64, a4);
  std::__function::__value_func<BOOL ()(mimosa::Metadata const&)>::__value_func[abi:ne180100]((uint64_t)v10, a3);
  std::__function::__value_func<BOOL ()(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,double)>::__value_func[abi:ne180100]((uint64_t)v9, a4);
  mimosa::v2::Decoder::Decoder(v11, v10, v9);
  mimosa::v2::Decoder::Decoder(a1 + 96, v11);
  *(_DWORD *)(a1 + 2288) = 1;
  mimosa::v2::Decoder::~Decoder((mimosa::v2::Decoder *)v11);
  std::__function::__value_func<BOOL ()(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,double)>::~__value_func[abi:ne180100](v9);
  std::__function::__value_func<BOOL ()(mimosa::Metadata const&)>::~__value_func[abi:ne180100](v10);
  *(unsigned char *)(a1 + 2296) = 1;
  return a1;
}

void sub_22278A818(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  std::__function::__value_func<BOOL ()(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,double)>::~__value_func[abi:ne180100](&a9);
  std::__function::__value_func<BOOL ()(mimosa::Metadata const&)>::~__value_func[abi:ne180100](&a13);
  std::__function::__value_func<BOOL ()(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,double)>::~__value_func[abi:ne180100](v15);
  std::__function::__value_func<BOOL ()(mimosa::Metadata const&)>::~__value_func[abi:ne180100](v14);
  std::__function::__value_func<BOOL ()(mimosa::CodecVersion const&)>::~__value_func[abi:ne180100](v13);
  _Unwind_Resume(a1);
}

uint64_t mimosa::Decoder::decode_version_if_needed(mimosa::Decoder *this, const byte **a2, const byte *a3)
{
  if (!*((unsigned char *)this + 2296)) {
    return 1;
  }
  uint64_t v4 = (uint64_t)*a2;
  if ((unint64_t)(a3 - *a2) < 8) {
    return 0;
  }
  for (uint64_t i = 0; i != 6; ++i)
  {
    if (mimosa::signature[i] != *(unsigned __int8 *)(v4 + i))
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "invalid signature");
      __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    }
  }
  __int16 v10 = *(_WORD *)(v4 + 6);
  mimosa::Decoder::select_codec_for_version((std::string::size_type)this, v10);
  *a2 += 8;
  *((unsigned char *)this + 2296) = 0;
  uint64_t v8 = *((void *)this + 3);
  if (!v8) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, __int16 *))(*(void *)v8 + 48))(v8, &v10);
}

void sub_22278A97C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *mimosa::Decoder::select_codec_for_version(std::string::size_type a1, __int16 a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  __int16 v9 = a2;
  if (a2 != 2)
  {
    if (a2 == 1 && HIBYTE(a2) <= 3u)
    {
      uint64_t v3 = *(unsigned int *)(a1 + 2288);
      if (v3 != -1) {
        off_26D4E4420[v3]((int)&v12, (mimosa::v1::Decoder *)(a1 + 96));
      }
      *(_DWORD *)(a1 + 2288) = -1;
      std::__function::__value_func<BOOL ()(mimosa::Metadata const&)>::__value_func[abi:ne180100]((uint64_t)&v12, a1 + 32);
      v10.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26D4E4440;
      v10.__r_.__value_.__l.__size_ = a1;
      unint64_t v11 = &v10;
      mimosa::v1::Decoder::Decoder(a1 + 96, &v12, &v10);
      std::__function::__value_func<BOOL ()(mimosa::PacketV1 const&,double)>::~__value_func[abi:ne180100](&v10);
      __n128 result = std::__function::__value_func<BOOL ()(mimosa::Metadata const&)>::~__value_func[abi:ne180100](&v12);
      *(_DWORD *)(a1 + 2288) = 0;
      return result;
    }
LABEL_11:
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    mimosa::CodecVersion::operator std::string((unsigned __int8 *)&v9, &v8);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("unsupported codec version (", &v8, &v10);
    __n128 v7 = std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(")", &v10, &v12);
    MEMORY[0x223C9C340](exception, &v12, v7);
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  if (HIBYTE(a2) > 5u) {
    goto LABEL_11;
  }
  long long v5 = (unsigned int *)(a1 + 96);
  return (void *)std::__variant_detail::__assignment<std::__variant_detail::__traits<mimosa::v1::Decoder,mimosa::v2::Decoder>>::__emplace[abi:ne180100]<1ul,std::function<BOOL ()(mimosa::Metadata const&)> const&,std::function<BOOL ()(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,double)> const&>(v5, a1 + 32, a1 + 64);
}

void sub_22278AB5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v30 & 1) == 0) {
LABEL_10:
    }
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_10;
  }
  __cxa_free_exception(v29);
  goto LABEL_10;
}

uint64_t mimosa::Decoder::decode(mimosa::Decoder *this, byte *a2, uint64_t a3)
{
  if (!a3) {
    return 0;
  }
  long long v5 = &a2[a3];
  v10[0] = &v11;
  v10[1] = &a2[a3];
  unint64_t v11 = a2;
  if (mimosa::Decoder::decode_version_if_needed(this, (const byte **)&v11, &a2[a3]))
  {
    do
    {
      uint64_t v6 = *((unsigned int *)this + 572);
      if (v6 == -1) {
        std::__throw_bad_variant_access[abi:ne180100]();
      }
      std::string v12 = v10;
      uint64_t v7 = off_26D4E4410[v6]((int)&v12, (mimosa::Decoder *)((char *)this + 96));
      v11 += v7;
      if ((v8 & 0x100) == 0) {
        break;
      }
      if ((v8 & 1) == 0) {
        break;
      }
      *((unsigned char *)this + 2296) = 1;
    }
    while ((mimosa::Decoder::decode_version_if_needed(this, (const byte **)&v11, v5) & 1) != 0);
  }
  return v11 - a2;
}

void mimosa::CodecVersion::operator std::string(unsigned __int8 *a1@<X0>, std::string *a2@<X8>)
{
  std::to_string(&v10, *a1);
  uint64_t v4 = std::string::append(&v10, ".", 1uLL);
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v11.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v11.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&__p, a1[1]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t p_p = &__p;
  }
  else {
    uint64_t p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  __int16 v8 = std::string::append(&v11, (const std::string::value_type *)p_p, size);
  *a2 = *v8;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
}

void sub_22278ADD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<mimosa::Decoder::decode(std::byte const*,unsigned long)::$_0 &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,mimosa::v1::Decoder,mimosa::v2::Decoder> &>(byte ****a1, mimosa::v1::Decoder *this)
{
  return mimosa::v1::Decoder::decode(this, ***a1, (char *)(*a1)[1] - (char *)***a1);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<mimosa::Decoder::decode(std::byte const*,unsigned long)::$_0 &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,mimosa::v1::Decoder,mimosa::v2::Decoder> &>(byte ****a1, mimosa::v2::Decoder *this)
{
  return mimosa::v2::Decoder::decode(this, ***a1, (char *)(*a1)[1] - (char *)***a1);
}

void std::__function::__func<mimosa::Decoder::select_codec_for_version(mimosa::CodecVersion)::$_0,std::allocator<mimosa::Decoder::select_codec_for_version(mimosa::CodecVersion)::$_0>,BOOL ()(mimosa::PacketV1 const&,double)>::~__func()
{
}

void *std::__function::__func<mimosa::Decoder::select_codec_for_version(mimosa::CodecVersion)::$_0,std::allocator<mimosa::Decoder::select_codec_for_version(mimosa::CodecVersion)::$_0>,BOOL ()(mimosa::PacketV1 const&,double)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_26D4E4440;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<mimosa::Decoder::select_codec_for_version(mimosa::CodecVersion)::$_0,std::allocator<mimosa::Decoder::select_codec_for_version(mimosa::CodecVersion)::$_0>,BOOL ()(mimosa::PacketV1 const&,double)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26D4E4440;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<mimosa::Decoder::select_codec_for_version(mimosa::CodecVersion)::$_0,std::allocator<mimosa::Decoder::select_codec_for_version(mimosa::CodecVersion)::$_0>,BOOL ()(mimosa::PacketV1 const&,double)>::operator()(uint64_t a1, uint64_t a2, double *a3)
{
  double v3 = *a3;
  uint64_t v4 = *(void *)(a1 + 8) + 64;
  std::__variant_detail::__alt<0ul,mimosa::PacketV1>::__alt[abi:ne180100]<mimosa::PacketV1 const&>((uint64_t)v7, a2);
  int v8 = 0;
  uint64_t v5 = std::function<BOOL ()(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,double)>::operator()(v4, (uint64_t)v7, v3);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v7);
  return v5;
}

void sub_22278AF44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<mimosa::Decoder::select_codec_for_version(mimosa::CodecVersion)::$_0,std::allocator<mimosa::Decoder::select_codec_for_version(mimosa::CodecVersion)::$_0>,BOOL ()(mimosa::PacketV1 const&,double)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<mimosa::Decoder::select_codec_for_version(mimosa::CodecVersion)::$_0,std::allocator<mimosa::Decoder::select_codec_for_version(mimosa::CodecVersion)::$_0>,BOOL ()(mimosa::PacketV1 const&,double)>::target_type()
{
}

uint64_t std::function<BOOL ()(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,double)>::operator()(uint64_t a1, uint64_t a2, double a3)
{
  double v5 = a3;
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, double *))(*(void *)v3 + 48))(v3, a2, &v5);
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<mimosa::v1::Decoder,mimosa::v2::Decoder>>::__emplace[abi:ne180100]<1ul,std::function<BOOL ()(mimosa::Metadata const&)> const&,std::function<BOOL ()(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,double)> const&>(unsigned int *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a1[548];
  if (v6 != -1) {
    off_26D4E4420[v6]((int)&v8, (mimosa::v1::Decoder *)a1);
  }
  a1[548] = -1;
  uint64_t result = std::__variant_detail::__alt<1ul,mimosa::v2::Decoder>::__alt[abi:ne180100]<std::function<BOOL ()(mimosa::Metadata const&)> const&,std::function<BOOL ()(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,double)> const&>((uint64_t)a1, a2, a3);
  a1[548] = 1;
  return result;
}

uint64_t std::__variant_detail::__alt<1ul,mimosa::v2::Decoder>::__alt[abi:ne180100]<std::function<BOOL ()(mimosa::Metadata const&)> const&,std::function<BOOL ()(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,double)> const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v7[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<BOOL ()(mimosa::Metadata const&)>::__value_func[abi:ne180100]((uint64_t)v7, a2);
  std::__function::__value_func<BOOL ()(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,double)>::__value_func[abi:ne180100]((uint64_t)v6, a3);
  mimosa::v2::Decoder::Decoder(a1, v7, v6);
  std::__function::__value_func<BOOL ()(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,double)>::~__value_func[abi:ne180100](v6);
  std::__function::__value_func<BOOL ()(mimosa::Metadata const&)>::~__value_func[abi:ne180100](v7);
  return a1;
}

void sub_22278B108(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  std::__function::__value_func<BOOL ()(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,double)>::~__value_func[abi:ne180100]((uint64_t *)va);
  std::__function::__value_func<BOOL ()(mimosa::Metadata const&)>::~__value_func[abi:ne180100]((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void *mimosa::v2::WavelengthV3SubpacketState::update@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  uint64_t v6 = mimosa::v2::SubpacketHeaderState::update(a1 + 24, a2);
  char v7 = *(unsigned char *)(a1 + 147);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v8;
  *(unsigned char *)(a1 + 146) = v7;
  *(void *)&long long v26 = a1 + 147;
  unint64_t v9 = *((unsigned __int8 *)std::__hash_table<std::__hash_value_type<unsigned char,unsigned char>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,unsigned char>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,unsigned char>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,unsigned char>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(a1 + 64, (unsigned __int8 *)(a1 + 147), (uint64_t)&std::piecewise_construct, (unsigned char **)&v26)+ 17);
  *(unsigned char *)(a1 + 147) = v9;
  if (*(unsigned char *)(a2 + 126))
  {
    __int16 v10 = *(_WORD *)(a2 + 124);
    *(_WORD *)(a1 + 144) = v10;
  }
  else
  {
    __int16 v10 = *(_WORD *)(a1 + 144);
  }
  *(_WORD *)(a3 + 88) = v10;
  if (*(unsigned char *)(a2 + 120))
  {
    std::string v11 = (long long *)(a2 + 96);
    int v12 = *(_DWORD *)(a2 + 116);
    if (v12 != 1)
    {
      if (v12) {
        std::__throw_bad_variant_access[abi:ne180100]();
      }
      long long v28 = *v11;
      __int16 v29 = *(_WORD *)(a2 + 112);
      LOBYTE(v13) = mimosa::v2::ItemCoder<std::array<unsigned short,9ul>>::encode((char **)a1, &v28);
      uint64_t v14 = 0;
      *(unsigned char *)(a1 + 147) = v13;
      unint64_t v15 = (_WORD *)(a3 + 20);
      do
      {
        *unint64_t v15 = *(_WORD *)((char *)v11 + v14);
        v15 += 4;
        v14 += 2;
      }
      while (v14 != 18);
      goto LABEL_17;
    }
    unint64_t v13 = *(unsigned __int8 *)v11;
    *(unsigned char *)(a1 + 147) = v13;
    if (0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 1) > v13)
    {
      uint64_t v19 = 0;
      uint64_t v20 = *(void *)a1 + 18 * v13;
      long long v26 = *(_OWORD *)v20;
      __int16 v27 = *(_WORD *)(v20 + 16);
      long long v21 = (_WORD *)(a3 + 20);
      do
      {
        _WORD *v21 = *(_WORD *)((char *)&v26 + v19);
        v21 += 4;
        v19 += 2;
      }
      while (v19 != 18);
LABEL_17:
      *(void *)&long long v26 = a1 + 146;
      *((unsigned char *)std::__hash_table<std::__hash_value_type<unsigned char,unsigned char>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,unsigned char>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,unsigned char>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,unsigned char>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(a1 + 64, (unsigned __int8 *)(a1 + 146), (uint64_t)&std::piecewise_construct, (unsigned char **)&v26)+ 17) = v13;
      goto LABEL_18;
    }
LABEL_21:
    std::vector<std::array<unsigned short,6ul>>::__throw_out_of_range[abi:ne180100]();
  }
  if (0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 1) <= v9) {
    goto LABEL_21;
  }
  uint64_t v16 = 0;
  uint64_t v17 = *(void *)a1 + 18 * v9;
  long long v26 = *(_OWORD *)v17;
  __int16 v27 = *(_WORD *)(v17 + 16);
  uint64_t v18 = (_WORD *)(a3 + 20);
  do
  {
    *uint64_t v18 = *(_WORD *)((char *)&v26 + v16);
    v18 += 4;
    v16 += 2;
  }
  while (v16 != 18);
LABEL_18:
  uint64_t v22 = 0;
  uint64_t v23 = a1 + 104;
  do
  {
    *(void *)&long long v26 = a3 + v22 + 20;
    uint64_t result = std::__hash_table<std::__hash_value_type<unsigned short,unsigned int>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,unsigned int>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,unsigned int>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,unsigned int>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(v23, (unsigned __int16 *)v26, (uint64_t)&std::piecewise_construct, (_WORD **)&v26);
    int v25 = *((_DWORD *)result + 5) + *(_DWORD *)(a2 + 24 + v22);
    *((_DWORD *)result + std::__function::__value_func<BOOL ()(mimosa::Metadata const&)>::~__value_func[abi:ne180100]((void *)this + 5) = v25;
    *(_DWORD *)(a3 + v22 + 16) = v25;
    v22 += 8;
  }
  while (v22 != 72);
  return result;
}

{
  uint64_t v6;
  char v7;
  unsigned char *v8;
  int v9;
  long long *v10;
  long long *v11;
  uint64_t v12;
  unsigned __int16 v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  void *result;
  uint64_t v18;
  long long v19;
  __int16 v20;
  long long v21;
  __int16 v22;
  unsigned __int16 *v23;

  *(_OWORD *)(a3 + 24) = 0u;
  uint64_t v6 = a3 + 24;
  *(unsigned char *)(a3 + 120) = 0;
  *(unsigned char *)(a3 + 124) = 0;
  *(unsigned char *)(a3 + 126) = 0;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_WORD *)(a3 + 16) = 0;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(_OWORD *)(a3 + 72) = 0u;
  *(_OWORD *)(a3 + 8std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = 0u;
  mimosa::v2::SubpacketHeaderState::update(a1 + 24, a2, (uint64_t)&v21);
  *(_OWORD *)a3 = v21;
  uint64_t v8 = (unsigned char *)(a1 + 147);
  char v7 = *(unsigned char *)(a1 + 147);
  *(_WORD *)(a3 + 16) = v22;
  *(unsigned char *)(a1 + 146) = v7;
  *(void *)&long long v21 = a1 + 147;
  *(unsigned char *)(a1 + 147) = *((unsigned char *)std::__hash_table<std::__hash_value_type<unsigned char,unsigned char>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,unsigned char>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,unsigned char>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,unsigned char>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(a1 + 64, (unsigned __int8 *)(a1 + 147), (uint64_t)&std::piecewise_construct, (unsigned char **)&v21)+ 17);
  unint64_t v9 = *(unsigned __int16 *)(a2 + 88);
  if (*(unsigned __int16 *)(a1 + 144) != v9)
  {
    *(_WORD *)(a3 + 124) = v9;
    *(unsigned char *)(a3 + 126) = 1;
    *(_WORD *)(a1 + 144) = v9;
  }
  __int16 v10 = (long long *)(a3 + 96);
  long long v21 = 0uLL;
  std::string v11 = &v21;
  int v12 = 20;
  uint64_t v22 = 0;
  do
  {
    *(_WORD *)std::string v11 = *(_WORD *)(a2 + v12);
    std::string v11 = (long long *)((char *)v11 + 2);
    v12 += 8;
  }
  while (v12 != 92);
  uint64_t v19 = v21;
  uint64_t v20 = v22;
  unint64_t v13 = mimosa::v2::ItemCoder<std::array<unsigned short,9ul>>::encode((char **)a1, &v19);
  if (v13 >= 0x100u)
  {
    uint64_t v14 = 0;
    void *v10 = v21;
    *(_WORD *)(a3 + 112) = v22;
    goto LABEL_9;
  }
  if (*v8 != v13)
  {
    *(unsigned char *)__int16 v10 = v13;
    uint64_t v14 = 1;
LABEL_9:
    *(_DWORD *)(a3 + 116) = v14;
    *(unsigned char *)(a3 + 120) = 1;
    std::string *v8 = v13;
    uint64_t v23 = (unsigned __int16 *)(a1 + 146);
    *((unsigned char *)std::__hash_table<std::__hash_value_type<unsigned char,unsigned char>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,unsigned char>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,unsigned char>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,unsigned char>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>(a1 + 64, (unsigned __int8 *)(a1 + 146), (uint64_t)&std::piecewise_construct, (unsigned char **)&v23)+ 17) = v13;
  }
  unint64_t v15 = 0;
  uint64_t v16 = a1 + 104;
  do
  {
    uint64_t v23 = (unsigned __int16 *)(a2 + v15 + 20);
    uint64_t result = std::__hash_table<std::__hash_value_type<unsigned short,unsigned int>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,unsigned int>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,unsigned int>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,unsigned int>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(v16, v23, (uint64_t)&std::piecewise_construct, &v23);
    uint64_t v18 = *(unsigned int *)(a2 + v15 + 16);
    *(void *)(v6 + v1std::__function::__value_func<BOOL ()(mimosa::Metadata const&)>::~__value_func[abi:ne180100]((void *)this + 5) = v18 - *((unsigned int *)result + 5);
    *((_DWORD *)result + std::__function::__value_func<BOOL ()(mimosa::Metadata const&)>::~__value_func[abi:ne180100]((void *)this + 5) = v18;
    v15 += 8;
  }
  while (v15 != 72);
  return result;
}

void *mimosa::v2::WavelengthV3SubpacketState::predict(mimosa::v2::WavelengthV3SubpacketState *this)
{
  uint64_t v1 = (char *)this + 147;
  *((unsigned char *)this + 146) = *((unsigned char *)this + 147);
  uint64_t v3 = (char *)this + 147;
  uint64_t result = std::__hash_table<std::__hash_value_type<unsigned char,unsigned char>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,unsigned char>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,unsigned char>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,unsigned char>>>::__emplace_unique_key_args<unsigned char,std::piecewise_construct_t const&,std::tuple<unsigned char const&>,std::tuple<>>((uint64_t)this + 64, (unsigned __int8 *)this + 147, (uint64_t)&std::piecewise_construct, &v3);
  unsigned char *v1 = *((unsigned char *)result + 17);
  return result;
}

uint64_t mimosa::v2::ItemCoder<std::array<unsigned short,9ul>>::encode(char **a1, long long *a2)
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v6 = *a1;
  if (*a1 != v4)
  {
    while (1)
    {
      BOOL v7 = *(void *)v6 == *(void *)a2 && *((void *)v6 + 1) == *((void *)a2 + 1);
      if (v7 && *((unsigned __int16 *)v6 + 8) == (unint64_t)*((unsigned __int16 *)a2 + 8)) {
        break;
      }
      v6 += 18;
      if (v6 == v4)
      {
        uint64_t v6 = a1[1];
        break;
      }
    }
  }
  if (v6 == v4)
  {
    if (v4 - v5 == 4608)
    {
      int64_t v11 = v4 - (v5 + 18);
      if (v4 != v5 + 18) {
        memmove(*a1, v5 + 18, v4 - (v5 + 18));
      }
      uint64_t v4 = &v5[v11];
      a1[1] = &v5[v11];
    }
    unint64_t v12 = (unint64_t)a1[2];
    if ((unint64_t)v4 >= v12)
    {
      unint64_t v15 = 0x8E38E38E38E38E39 * ((v4 - *a1) >> 1);
      unint64_t v16 = v15 + 1;
      if (v15 + 1 > 0xE38E38E38E38E38) {
        std::vector<mimosa::OpticalSampleV1>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v17 = 0x8E38E38E38E38E39 * ((uint64_t)(v12 - (void)*a1) >> 1);
      if (2 * v17 > v16) {
        unint64_t v16 = 2 * v17;
      }
      if (v17 >= 0x71C71C71C71C71CLL) {
        unint64_t v18 = 0xE38E38E38E38E38;
      }
      else {
        unint64_t v18 = v16;
      }
      if (v18) {
        uint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::array<unsigned short,9ul>>>((uint64_t)(a1 + 2), v18);
      }
      else {
        uint64_t v19 = 0;
      }
      uint64_t v20 = &v19[18 * v15];
      long long v21 = &v19[18 * v18];
      long long v22 = *a2;
      *((_WORD *)v20 + 8) = *((_WORD *)a2 + 8);
      *(_OWORD *)uint64_t v20 = v22;
      uint64_t v14 = v20 + 18;
      int v24 = *a1;
      uint64_t v23 = a1[1];
      if (v23 != *a1)
      {
        do
        {
          long long v25 = *(_OWORD *)(v23 - 18);
          *((_WORD *)v20 - std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = *((_WORD *)v23 - 1);
          *(_OWORD *)(v20 - 18) = v25;
          v20 -= 18;
          v23 -= 18;
        }
        while (v23 != v24);
        uint64_t v23 = *a1;
      }
      *a1 = v20;
      a1[1] = v14;
      a1[2] = v21;
      if (v23) {
        operator delete(v23);
      }
    }
    else
    {
      long long v13 = *a2;
      *((_WORD *)v4 + 8) = *((_WORD *)a2 + 8);
      *(_OWORD *)uint64_t v4 = v13;
      uint64_t v14 = v4 + 18;
    }
    a1[1] = v14;
    unint64_t v10 = 0x8E38E38E38E38E39 * ((v14 - *a1) >> 1) - 1;
    int v9 = 1;
  }
  else
  {
    int v9 = 0;
    unint64_t v10 = 0x8E38E38E38E38E39 * ((v6 - v5) >> 1);
  }
  return v10 | (v9 << 8);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::array<unsigned short,9ul>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xE38E38E38E38E39) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(18 * a2);
}

uint64_t mimosa::v2::TemperatureSubpacketState::update@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  uint64_t result = mimosa::v2::SubpacketHeaderState::update(a1, a2);
  *(void *)a3 = result;
  *(void *)(a3 + 8) = v7;
  if (*(unsigned char *)(a2 + 26))
  {
    __int16 v8 = *(_WORD *)(a2 + 24);
    *(_WORD *)(a1 + 40) = v8;
  }
  else
  {
    __int16 v8 = *(_WORD *)(a1 + 40);
  }
  __int16 v9 = *(_WORD *)(a1 + 42) + *(_WORD *)(a2 + 28);
  *(_WORD *)(a1 + 42) = v9;
  *(_WORD *)(a3 + 16) = v8;
  *(_WORD *)(a3 + 18) = v9;
  return result;
}

{
  uint64_t result;
  int v7;
  int v8;
  long long v9;
  __int16 v10;

  *(unsigned char *)(a3 + 24) = 0;
  *(unsigned char *)(a3 + 26) = 0;
  *(_DWORD *)(a3 + 28) = 0;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_WORD *)(a3 + 16) = 0;
  uint64_t result = mimosa::v2::SubpacketHeaderState::update(a1, a2, (uint64_t)&v9);
  *(_OWORD *)a3 = v9;
  *(_WORD *)(a3 + 16) = v10;
  uint64_t v7 = *(unsigned __int16 *)(a2 + 16);
  if (*(unsigned __int16 *)(a1 + 40) != v7)
  {
    *(_WORD *)(a3 + 24) = v7;
    *(unsigned char *)(a3 + 26) = 1;
    *(_WORD *)(a1 + 40) = v7;
  }
  __int16 v8 = *(__int16 *)(a2 + 18);
  *(_DWORD *)(a3 + 28) = v8 - *(__int16 *)(a1 + 42);
  *(_WORD *)(a1 + 42) = v8;
  return result;
}

void mimosa::v2::OpticalDecoderV1SubpacketState::update(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  *(unsigned char *)(a3 + 12) = 0;
  *(void *)(a3 + 16) = 0;
  uint64_t v6 = (char *)(a3 + 16);
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  *(_WORD *)(a3 + 40) = 0;
  *(void *)a3 = mimosa::v2::SubpacketHeaderState::update(a1, a2);
  *(void *)(a3 + 8) = v7;
  uint64_t v8 = *(void *)(a1 + 72);
  unint64_t v9 = ((unint64_t)*(unsigned __int8 *)(a1 + 64) + 1) % (*(void *)(a1 + 80) - v8);
  *(unsigned char *)(a1 + 64) = v9;
  if (*(unsigned char *)(a2 + 67))
  {
    size_t v10 = *(unsigned __int8 *)(a2 + 66);
    if (!*(unsigned char *)(a2 + 66))
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "num_beats is 0");
      __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    }
    *(void *)(a1 + 80) = v8;
    std::vector<std::byte>::__append((unint64_t *)(a1 + 72), v10);
    LOBYTE(vstd::__function::__value_func<BOOL ()(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,double)>::~__value_func[abi:ne180100]((void *)this + 9) = 0;
    *(unsigned char *)(a1 + 64) = 0;
  }
  if (*(unsigned char *)(a2 + 65))
  {
    LOBYTE(vstd::__function::__value_func<BOOL ()(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,double)>::~__value_func[abi:ne180100]((void *)this + 9) = *(unsigned char *)(a2 + 64);
    *(unsigned char *)(a1 + 64) = v9;
  }
  *(unsigned char *)(a3 + 40) = v9;
  uint64_t v11 = *(void *)(a1 + 72);
  *(unsigned char *)(a3 + 4std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = *(_DWORD *)(a1 + 80) - v11;
  if (!*(unsigned char *)(a2 + 56))
  {
    mimosa::v2::ItemCoder<std::vector<unsigned short>>::decode((void *)(a1 + 40), *(unsigned __int8 *)(v11 + v9), &v21);
LABEL_11:
    uint64_t v14 = v22;
    *(_OWORD *)(a3 + 16) = v21;
    *(void *)(a3 + 32) = v14;
    return;
  }
  unint64_t v12 = (char *)(a2 + 24);
  int v13 = *(_DWORD *)(a2 + 48);
  if (v13)
  {
    if (v13 != 1) {
      std::__throw_bad_variant_access[abi:ne180100]();
    }
    *(unsigned char *)(v11 + vstd::__function::__value_func<BOOL ()(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,double)>::~__value_func[abi:ne180100]((void *)this + 9) = *v12;
    mimosa::v2::ItemCoder<std::vector<unsigned short>>::decode((void *)(a1 + 40), *(unsigned __int8 *)(*(void *)(a1 + 72) + *(unsigned __int8 *)(a1 + 64)), &v21);
    goto LABEL_11;
  }
  if (v6 == v12)
  {
    uint64_t v16 = 0;
    unint64_t v15 = 0;
  }
  else
  {
    std::vector<unsigned short>::__assign_with_size[abi:ne180100]<unsigned short *,unsigned short *>(v6, *(char **)(a2 + 24), *(void *)(a2 + 32), (uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 1);
    unint64_t v15 = *(const void **)(a3 + 16);
    uint64_t v16 = *(void *)(a3 + 24);
  }
  std::string __p = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short *,unsigned short *>(&__p, v15, v16, (v16 - (uint64_t)v15) >> 1);
  *(unsigned char *)(*(void *)(a1 + 72) + *(unsigned __int8 *)(a1 + 64)) = mimosa::v2::ItemCoder<std::vector<unsigned short>>::encode((uint64_t *)(a1 + 40), (uint64_t)&__p);
  if (__p)
  {
    uint64_t v19 = __p;
    operator delete(__p);
  }
}

{
  uint64_t v6;
  unint64_t v7;
  unsigned __int8 v8;
  size_t v9;
  int v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 v14;
  uint64_t v15;
  uint64_t v16;
  std::runtime_error *exception;
  void *v18;
  std::string *v19;
  std::string::size_type size;
  std::string *v21;
  long long v22;
  void *__p;
  void *v24;
  uint64_t v25;
  std::string v26;
  std::string v27;
  std::string v28;
  std::string v29;
  long long v30;
  std::string::size_type v31;

  if (!*(unsigned char *)(a2 + 41))
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "number of beats is 0 (should be at least 1)");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  if (*(unsigned __int8 *)(a2 + 40) >= *(unsigned __int8 *)(a2 + 41))
  {
    unint64_t v18 = __cxa_allocate_exception(0x10uLL);
    std::to_string(&v27, *(unsigned __int8 *)(a2 + 40));
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("beat index ", &v27, &v28);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(" is invalid given a beat count of ", &v28, &v29);
    std::to_string(&v26, *(unsigned __int8 *)(a2 + 41));
    if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v19 = &v26;
    }
    else {
      uint64_t v19 = (std::string *)v26.__r_.__value_.__r.__words[0];
    }
    if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v26.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v26.__r_.__value_.__l.__size_;
    }
    long long v21 = std::string::append(&v29, (const std::string::value_type *)v19, size);
    uint64_t v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    unint64_t v31 = v21->__r_.__value_.__r.__words[2];
    int v30 = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    MEMORY[0x223C9C340](v18, &v30);
    __cxa_throw(v18, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  *(unsigned char *)(a3 + 24) = 0;
  *(unsigned char *)(a3 + 56) = 0;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_WORD *)(a3 + 16) = 0;
  *(_DWORD *)(a3 + 64) = 0;
  mimosa::v2::SubpacketHeaderState::update(a1, a2, (uint64_t)&v30);
  *(_OWORD *)a3 = v30;
  *(_WORD *)(a3 + 16) = v31;
  uint64_t v6 = *(void *)(a1 + 72);
  uint64_t v7 = *(void *)(a1 + 80) - v6;
  uint64_t v8 = ((unint64_t)*(unsigned __int8 *)(a1 + 64) + 1) % v7;
  *(unsigned char *)(a1 + 64) = v8;
  unint64_t v9 = *(unsigned __int8 *)(a2 + 41);
  if (v7 != v9)
  {
    *(_WORD *)(a3 + 66) = v9 | 0x100;
    *(void *)(a1 + 80) = v6;
    if (v9) {
      std::vector<std::byte>::__append((unint64_t *)(a1 + 72), v9);
    }
    uint64_t v8 = 0;
    *(unsigned char *)(a1 + 64) = 0;
  }
  size_t v10 = *(unsigned __int8 *)(a2 + 40);
  if (v10 != v8)
  {
    *(unsigned char *)(a1 + 64) = v10;
    *(_WORD *)(a3 + 64) = v10 | 0x100;
  }
  uint64_t v11 = *(const void **)(a2 + 16);
  unint64_t v12 = *(void *)(a2 + 24);
  int v13 = a2 + 16;
  int v24 = 0;
  long long v25 = 0;
  std::string __p = 0;
  std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short *,unsigned short *>(&__p, v11, v12, (v12 - (uint64_t)v11) >> 1);
  uint64_t v14 = mimosa::v2::ItemCoder<std::vector<unsigned short>>::encode((uint64_t *)(a1 + 40), (uint64_t)&__p);
  LOWORD(v30) = v14;
  if (__p)
  {
    int v24 = __p;
    operator delete(__p);
  }
  if (v14 >= 0x100u)
  {
    std::optional<std::variant<std::vector<unsigned short>,unsigned char>>::operator=[abi:ne180100]<std::vector<unsigned short> const&,void>(a3 + 24, v13);
  }
  else
  {
    unint64_t v15 = *(unsigned __int8 *)(a1 + 64);
    uint64_t v16 = *(void *)(a1 + 72);
    if (*(unsigned __int8 *)(v16 + v15) == v14) {
      return;
    }
    if (!*(unsigned char *)(a3 + 56))
    {
      *(unsigned char *)(a3 + 24) = v14;
      *(_DWORD *)(a3 + 48) = 1;
      *(unsigned char *)(a3 + 56) = 1;
      goto LABEL_17;
    }
    std::variant<std::vector<unsigned short>,unsigned char>::operator=[abi:ne180100]<unsigned char const&,0,unsigned char,1ul,0>(a3 + 24, &v30);
    LOBYTE(v14) = v30;
  }
  unint64_t v15 = *(unsigned __int8 *)(a1 + 64);
  uint64_t v16 = *(void *)(a1 + 72);
LABEL_17:
  *(unsigned char *)(v16 + v1std::__function::__value_func<BOOL ()(mimosa::Metadata const&)>::~__value_func[abi:ne180100]((void *)this + 5) = v14;
}

void sub_22278BB34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  uint64_t v14 = *v12;
  if (*v12)
  {
    *(void *)(v11 + 24) = v14;
    operator delete(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mimosa::v2::OpticalDecoderV1SubpacketState::predict(uint64_t this)
{
  *(unsigned char *)(this + 64) = ((unint64_t)*(unsigned __int8 *)(this + 64) + 1)
                        % (*(void *)(this + 80) - *(void *)(this + 72));
  return this;
}

uint64_t mimosa::v2::OpticalDecoderV1SubpacketState::current_code(mimosa::v2::OpticalDecoderV1SubpacketState *this)
{
  return *((void *)this + 9) + *((unsigned __int8 *)this + 64);
}

void *mimosa::v2::ItemCoder<std::vector<unsigned short>>::decode@<X0>(void *a1@<X0>, unsigned int a2@<W1>, void *a3@<X8>)
{
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 3) <= a2) {
    std::vector<std::array<unsigned short,6ul>>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v3 = *a1 + 24 * a2;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v4 = *(const void **)v3;
  uint64_t v5 = *(void *)(v3 + 8);
  uint64_t v6 = (v5 - *(void *)v3) >> 1;
  return std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short *,unsigned short *>(a3, v4, v5, v6);
}

uint64_t mimosa::v2::ItemCoder<std::vector<unsigned short>>::encode(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = (__n128 *)std::__find_impl[abi:ne180100]<std::vector<unsigned short> const*,std::vector<unsigned short> const*,std::vector<unsigned short>,std::__identity>(*a1, a1[1], a2);
  uint64_t v5 = (uint64_t)v4 - *a1;
  if (v4 == (__n128 *)a1[1])
  {
    uint64_t v8 = v4;
    if (v5 == 6144)
    {
      std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,std::vector<unsigned short> *,std::vector<unsigned short> *,std::vector<unsigned short> *,0>((__n128 *)(*a1 + 24), v4, *a1);
      uint64_t v8 = v9;
      uint64_t v10 = a1[1];
      if ((__n128 *)v10 != v9)
      {
        uint64_t v11 = a1[1];
        do
        {
          int v13 = *(void **)(v11 - 24);
          v11 -= 24;
          unint64_t v12 = v13;
          if (v13)
          {
            *(void *)(v10 - 16) = v12;
            operator delete(v12);
          }
          uint64_t v10 = v11;
        }
        while ((__n128 *)v11 != v8);
      }
      a1[1] = (uint64_t)v8;
    }
    if ((unint64_t)v8 >= a1[2])
    {
      uint64_t v14 = std::vector<std::vector<unsigned short>>::__push_back_slow_path<std::vector<unsigned short> const&>(a1, a2);
    }
    else
    {
      std::vector<std::vector<unsigned short>>::__construct_one_at_end[abi:ne180100]<std::vector<unsigned short> const&>((uint64_t)a1, a2);
      uint64_t v14 = (uint64_t)&v8[1].n128_i64[1];
    }
    a1[1] = v14;
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((v14 - *a1) >> 3) - 1;
    int v6 = 1;
  }
  else
  {
    int v6 = 0;
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (v5 >> 3);
  }
  return v7 | (v6 << 8);
}

void sub_22278BFC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (*(char *)(v38 - 57) < 0) {
    operator delete(*(void **)(v38 - 80));
  }
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a36 < 0) {
    operator delete(a31);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  if (a24 < 0)
  {
    operator delete(a19);
    if ((v37 & 1) == 0) {
LABEL_14:
    }
      _Unwind_Resume(a1);
  }
  else if (!v37)
  {
    goto LABEL_14;
  }
  __cxa_free_exception(v36);
  goto LABEL_14;
}

uint64_t std::optional<std::variant<std::vector<unsigned short>,unsigned char>>::operator=[abi:ne180100]<std::vector<unsigned short> const&,void>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 32))
  {
    std::__variant_detail::__assignment<std::__variant_detail::__traits<std::vector<unsigned short>,unsigned char>>::__assign_alt[abi:ne180100]<0ul,std::vector<unsigned short>,std::vector<unsigned short> const&>(a1, (char *)a1, a2);
  }
  else
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short *,unsigned short *>((void *)a1, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 1);
    *(_DWORD *)(a1 + 24) = 0;
    *(unsigned char *)(a1 + 32) = 1;
  }
  return a1;
}

char *std::vector<unsigned short>::__assign_with_size[abi:ne180100]<unsigned short *,unsigned short *>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  unint64_t v7 = result;
  unint64_t v8 = *((void *)result + 2);
  unint64_t v9 = *(char **)result;
  if (a4 > (uint64_t)(v8 - *(void *)result) >> 1)
  {
    if (v9)
    {
      *((void *)result + std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = v9;
      operator delete(v9);
      unint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if ((a4 & 0x8000000000000000) != 0) {
      std::vector<mimosa::OpticalSampleV1>::__throw_length_error[abi:ne180100]();
    }
    if (v8 <= a4) {
      unint64_t v10 = a4;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v8 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v11 = v10;
    }
    uint64_t result = std::vector<unsigned short>::__vallocate[abi:ne180100](v7, v11);
    int v13 = (char *)v7[1];
    unint64_t v12 = (void **)(v7 + 1);
    unint64_t v9 = v13;
LABEL_17:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      unint64_t v18 = v9;
      uint64_t v19 = __src;
      goto LABEL_19;
    }
    goto LABEL_20;
  }
  unint64_t v12 = (void **)(result + 8);
  uint64_t v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 1;
  if (v15 >= a4) {
    goto LABEL_17;
  }
  uint64_t v16 = &__src[2 * v15];
  if (v14 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v14 - v9);
    unint64_t v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    unint64_t v18 = v9;
    uint64_t v19 = v16;
LABEL_19:
    uint64_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_20:
  *unint64_t v12 = &v9[v17];
  return result;
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<std::vector<unsigned short>,unsigned char>>::__assign_alt[abi:ne180100]<0ul,std::vector<unsigned short>,std::vector<unsigned short> const&>(uint64_t a1, char *a2, uint64_t a3)
{
  if (*(_DWORD *)(a1 + 24))
  {
    v5[0] = a1;
    v5[1] = a3;
    std::__variant_detail::__assignment<std::__variant_detail::__traits<std::vector<unsigned short>,unsigned char>>::__assign_alt[abi:ne180100]<0ul,std::vector<unsigned short>,std::vector<unsigned short> const&>(std::__variant_detail::__alt<0ul,std::vector<unsigned short>> &,std::vector<unsigned short> const&)::{unnamed type#1}::operator()[abi:ne180100](v5);
  }
  else if (a2 != (char *)a3)
  {
    uint64_t v4 = *(char **)a3;
    uint64_t v3 = *(void *)(a3 + 8);
    std::vector<unsigned short>::__assign_with_size[abi:ne180100]<unsigned short *,unsigned short *>(a2, v4, v3, (v3 - (uint64_t)v4) >> 1);
  }
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<std::vector<unsigned short>,unsigned char>>::__assign_alt[abi:ne180100]<0ul,std::vector<unsigned short>,std::vector<unsigned short> const&>(std::__variant_detail::__alt<0ul,std::vector<unsigned short>> &,std::vector<unsigned short> const&)::{unnamed type#1}::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v1 = a1[1];
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  std::string __p = 0;
  std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short *,unsigned short *>(&__p, *(const void **)v1, *(void *)(v1 + 8), (uint64_t)(*(void *)(v1 + 8) - *(void *)v1) >> 1);
  std::__variant_detail::__assignment<std::__variant_detail::__traits<std::vector<unsigned short>,unsigned char>>::__emplace[abi:ne180100]<0ul,std::vector<unsigned short>>(v2, (uint64_t)&__p);
  if (__p)
  {
    uint64_t v4 = __p;
    operator delete(__p);
  }
}

void sub_22278C2E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__find_impl[abi:ne180100]<std::vector<unsigned short> const*,std::vector<unsigned short> const*,std::vector<unsigned short>,std::__identity>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a1;
  if (a1 != a2)
  {
    uint64_t v5 = *(const void **)a3;
    size_t v6 = *(void *)(a3 + 8) - *(void *)a3;
    while (*(void *)(v3 + 8) - *(void *)v3 != v6 || memcmp(*(const void **)v3, v5, v6))
    {
      v3 += 24;
      if (v3 == a2) {
        return a2;
      }
    }
  }
  return v3;
}

__n128 *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,std::vector<unsigned short> *,std::vector<unsigned short> *,std::vector<unsigned short> *,0>(__n128 *a1, __n128 *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  if (a1 != a2)
  {
    do
    {
      std::vector<unsigned short>::__move_assign(a3, v4);
      uint64_t v4 = (__n128 *)((char *)v4 + 24);
      a3 += 24;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

void *std::vector<std::vector<unsigned short>>::__construct_one_at_end[abi:ne180100]<std::vector<unsigned short> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a1 + 8);
  void *v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  uint64_t result = std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short *,unsigned short *>(v3, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 1);
  *(void *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_22278C420(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<unsigned short>>::__push_back_slow_path<std::vector<unsigned short> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<mimosa::OpticalSampleV1>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  size_t v17 = a1 + 2;
  if (v9) {
    unint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<health_algorithms::PPGProcessor::AccelOutputSignal>>(v7, v9);
  }
  else {
    unint64_t v10 = 0;
  }
  uint64_t v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  unint64_t v15 = v11;
  uint64_t v16 = &v10[24 * v9];
  *(void *)uint64_t v11 = 0;
  *((void *)v11 + std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = 0;
  *((void *)v11 + 2) = 0;
  std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short *,unsigned short *>(v11, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 1);
  v15 += 24;
  std::vector<std::vector<unsigned short>>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<std::vector<unsigned short>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_22278C52C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<unsigned short>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<unsigned short>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<unsigned short>>,std::reverse_iterator<std::vector<unsigned short>*>,std::reverse_iterator<std::vector<unsigned short>*>,std::reverse_iterator<std::vector<unsigned short>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<unsigned short>>,std::reverse_iterator<std::vector<unsigned short>*>,std::reverse_iterator<std::vector<unsigned short>*>,std::reverse_iterator<std::vector<unsigned short>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned short>>,std::reverse_iterator<std::vector<unsigned short>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned short>>,std::reverse_iterator<std::vector<unsigned short>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned short>>,std::reverse_iterator<std::vector<unsigned short>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned short>>,std::reverse_iterator<std::vector<unsigned short>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(void **)v1;
    if (*(void *)v1)
    {
      *(void *)(v1 + 8) = v3;
      operator delete(v3);
    }
    v1 += 24;
  }
}

uint64_t std::__split_buffer<std::vector<unsigned short>>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<std::vector<unsigned short>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != a2)
  {
    uint64_t v5 = *(void **)(v2 - 24);
    *(void *)(a1 + 16) = v2 - 24;
    if (v5)
    {
      *(void *)(v2 - 16) = v5;
      operator delete(v5);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
}

uint64_t mimosa::v2::OpticalDecoderV3SubpacketState::update@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  uint64_t result = mimosa::v2::SubpacketHeaderState::update(a1, a2);
  *(void *)a3 = result;
  *(void *)(a3 + 8) = v7;
  unsigned int v8 = *(unsigned __int8 *)(a1 + 49);
  unsigned int v9 = (*(unsigned __int8 *)(a1 + 48) + 1) % v8;
  *(unsigned char *)(a1 + 48) = v9;
  if (*(unsigned char *)(a2 + 43))
  {
    unsigned int v8 = *(unsigned __int8 *)(a2 + 42);
    *(unsigned char *)(a1 + 4std::__function::__value_func<BOOL ()(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,double)>::~__value_func[abi:ne180100]((void *)this + 9) = v8;
    if (!v8)
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "num_beats is 0");
      __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    }
    LOBYTE(vstd::__function::__value_func<BOOL ()(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,double)>::~__value_func[abi:ne180100]((void *)this + 9) = 0;
    *(unsigned char *)(a1 + 48) = 0;
  }
  if (*(unsigned char *)(a2 + 32)) {
    *(void *)(a1 + 40) = *(void *)(a2 + 24);
  }
  if (*(unsigned char *)(a2 + 41))
  {
    LOBYTE(vstd::__function::__value_func<BOOL ()(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,double)>::~__value_func[abi:ne180100]((void *)this + 9) = *(unsigned char *)(a2 + 40);
    *(unsigned char *)(a1 + 48) = v9;
  }
  *(void *)(a3 + 16) = *(void *)(a1 + 40);
  *(unsigned char *)(a3 + 24) = v9;
  *(unsigned char *)(a3 + 2std::__function::__value_func<BOOL ()(mimosa::Metadata const&)>::~__value_func[abi:ne180100]((void *)this + 5) = v8;
  return result;
}

{
  uint64_t result;
  unsigned int v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  int v11;
  std::runtime_error *exception;
  void *v13;
  std::string *v14;
  std::string::size_type size;
  std::string *v16;
  long long v17;
  std::string v18;
  std::string v19;
  std::string v20;
  std::string v21;
  long long v22;
  std::string::size_type v23;

  if (!*(unsigned char *)(a2 + 25))
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "number of beats is 0 (should be at least 1)");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  if (*(unsigned __int8 *)(a2 + 24) >= *(unsigned __int8 *)(a2 + 25))
  {
    long long v13 = __cxa_allocate_exception(0x10uLL);
    std::to_string(&v19, *(unsigned __int8 *)(a2 + 24));
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("beat index ", &v19, &v20);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(" is invalid given a beat count of ", &v20, &v21);
    std::to_string(&v18, *(unsigned __int8 *)(a2 + 25));
    if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v14 = &v18;
    }
    else {
      long long v14 = (std::string *)v18.__r_.__value_.__r.__words[0];
    }
    if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v18.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v18.__r_.__value_.__l.__size_;
    }
    uint64_t v16 = std::string::append(&v21, (const std::string::value_type *)v14, size);
    size_t v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    uint64_t v23 = v16->__r_.__value_.__r.__words[2];
    uint64_t v22 = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    MEMORY[0x223C9C340](v13, &v22);
    __cxa_throw(v13, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  *(unsigned char *)(a3 + 24) = 0;
  *(unsigned char *)(a3 + 32) = 0;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_WORD *)(a3 + 16) = 0;
  *(_DWORD *)(a3 + 40) = 0;
  uint64_t result = mimosa::v2::SubpacketHeaderState::update(a1, a2, (uint64_t)&v22);
  *(_OWORD *)a3 = v22;
  *(_WORD *)(a3 + 16) = v23;
  uint64_t v7 = *(unsigned __int8 *)(a1 + 49);
  unsigned int v8 = (*(unsigned __int8 *)(a1 + 48) + 1) % v7;
  *(unsigned char *)(a1 + 48) = v8;
  unsigned int v9 = *(unsigned __int8 *)(a2 + 25);
  if (v9 != v7)
  {
    LOBYTE(v8) = 0;
    *(_WORD *)(a3 + 42) = v9 | 0x100;
    *(unsigned char *)(a1 + 4std::__function::__value_func<BOOL ()(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,double)>::~__value_func[abi:ne180100]((void *)this + 9) = v9;
    *(unsigned char *)(a1 + 48) = 0;
  }
  unint64_t v10 = *(void *)(a2 + 16);
  if (v10 != *(void *)(a1 + 40))
  {
    *(void *)(a1 + 40) = v10;
    *(void *)(a3 + 24) = v10;
    *(unsigned char *)(a3 + 32) = 1;
  }
  uint64_t v11 = *(unsigned __int8 *)(a2 + 24);
  if (v11 != v8)
  {
    *(unsigned char *)(a1 + 48) = v11;
    *(_WORD *)(a3 + 40) = v11 | 0x100;
  }
  return result;
}

void sub_22278C84C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t mimosa::v2::OpticalDecoderV3SubpacketState::predict(uint64_t this)
{
  *(unsigned char *)(this + 48) = (*(unsigned __int8 *)(this + 48) + 1) % *(unsigned __int8 *)(this + 49);
  return this;
}

void sub_22278CA60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (*(char *)(v34 - 41) < 0) {
    operator delete(*(void **)(v34 - 64));
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0)
  {
    operator delete(a15);
    if ((v33 & 1) == 0) {
LABEL_14:
    }
      _Unwind_Resume(a1);
  }
  else if (!v33)
  {
    goto LABEL_14;
  }
  __cxa_free_exception(v32);
  goto LABEL_14;
}

uint64_t mimosa::v2::OpticalSamplesV2SubpacketState::Patch::homogeneous_sample_flags(mimosa::v2::OpticalSamplesV2SubpacketState::Patch *this)
{
  if (!*((unsigned char *)this + 88)) {
    return 1;
  }
  uint64_t v2 = *((void *)this + 8);
  uint64_t v1 = *((void *)this + 9);
  if (0xF0F0F0F0F0F0F0F1 * ((v1 - v2) >> 1) < 2) {
    return 1;
  }
  uint64_t v3 = v2 + 34;
  if (v2 + 34 == v1) {
    return 1;
  }
  while (*(unsigned char *)(v2 + 6) && *(unsigned char *)(v3 + 6))
  {
    if (*(unsigned __int16 *)(v3 + 4) != *(unsigned __int16 *)(v2 + 4)) {
      return 0;
    }
LABEL_9:
    v3 += 34;
    if (v3 == v1) {
      return 1;
    }
  }
  if ((*(unsigned char *)(v2 + 6) != 0) == (*(unsigned char *)(v3 + 6) != 0)) {
    goto LABEL_9;
  }
  return 0;
}

void mimosa::v2::OpticalSamplesV2SubpacketState::update(mimosa::v2::OpticalSamplesV2SubpacketState *this@<X0>, const mimosa::v2::OpticalSamplesV2SubpacketState::Patch *a2@<X1>, char a3@<W2>, unsigned int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v10 = *((void *)this + 13);
  unsigned int v8 = (unint64_t *)((char *)this + 104);
  uint64_t v9 = v10;
  *((unsigned char *)v8 + 24) = a3;
  if (v8[1] - v10 != a4)
  {
    *((void *)this + 14) = v9;
    if (a4) {
      std::vector<std::byte>::__append(v8, a4);
    }
  }
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v62 = 0;
  if (!*((unsigned char *)a2 + 56))
  {
    mimosa::v2::ItemCoder<std::vector<unsigned short>>::decode((void *)this + 5, *(unsigned __int8 *)(*((void *)this + 13) + *((unsigned __int8 *)this + 128)), &v59);
LABEL_9:
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    *(_OWORD *)std::string __p = v59;
    uint64_t v62 = v60;
    goto LABEL_17;
  }
  uint64_t v11 = (void **)((char *)a2 + 24);
  int v12 = *((_DWORD *)a2 + 12);
  if (v12)
  {
    if (v12 != 1) {
      std::__throw_bad_variant_access[abi:ne180100]();
    }
    *(unsigned char *)(*((void *)this + 13) + *((unsigned __int8 *)this + 128)) = *(unsigned char *)v11;
    mimosa::v2::ItemCoder<std::vector<unsigned short>>::decode((void *)this + 5, *(unsigned __int8 *)(*((void *)this + 13) + *((unsigned __int8 *)this + 128)), &v59);
    goto LABEL_9;
  }
  if (__p == v11)
  {
    long long v14 = 0;
    long long v13 = 0;
  }
  else
  {
    std::vector<unsigned short>::__assign_with_size[abi:ne180100]<unsigned short *,unsigned short *>((char *)__p, *((char **)a2 + 3), *((void *)a2 + 4), (uint64_t)(*((void *)a2 + 4) - *((void *)a2 + 3)) >> 1);
    long long v13 = __p[0];
    long long v14 = __p[1];
  }
  __int16 v56 = 0;
  __int16 v57 = 0;
  uint64_t v58 = 0;
  std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short *,unsigned short *>(&v56, v13, (uint64_t)v14, (v14 - (unsigned char *)v13) >> 1);
  *(unsigned char *)(*((void *)this + 13) + *((unsigned __int8 *)this + 128)) = mimosa::v2::ItemCoder<std::vector<unsigned short>>::encode((uint64_t *)this + 5, (uint64_t)&v56);
  if (v56)
  {
    __int16 v57 = v56;
    operator delete(v56);
  }
LABEL_17:
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 13) - *((void *)a2 + 12)) >> 3) != ((char *)__p[1]
                                                                                              - (char *)__p[0]) >> 1)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "the number of light paths doesn't match the number of ADC deltas in the patch");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  *(void *)a5 = 0;
  *(_DWORD *)(a5 + 8) = 0;
  *(unsigned char *)(a5 + 12) = 0;
  *(void *)(a5 + 16) = 0;
  unint64_t v15 = (char **)(a5 + 16);
  *(void *)(a5 + 24) = 0;
  *(void *)(a5 + 32) = 0;
  *(void *)a5 = mimosa::v2::SubpacketHeaderState::update((uint64_t)this, (uint64_t)a2);
  *(void *)(a5 + 8) = v16;
  std::vector<mimosa::OpticalSampleV2>::reserve((void **)(a5 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 13) - *((void *)a2 + 12)) >> 3));
  size_t v17 = (char *)__p[1];
  if (__p[1] != __p[0])
  {
    uint64_t v18 = 0;
    unsigned int v19 = 0;
    uint64_t v20 = (char *)this + 64;
    size_t v17 = (char *)__p[0];
    do
    {
      *(void *)&long long v59 = &v17[2 * v18];
      long long v21 = std::__hash_table<std::__hash_value_type<unsigned short,mimosa::OpticalSampleV2>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,mimosa::OpticalSampleV2>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,mimosa::OpticalSampleV2>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,mimosa::OpticalSampleV2>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>((uint64_t)v20, (unsigned __int16 *)v59, (uint64_t)&std::piecewise_construct, (unsigned __int16 **)&v59);
      uint64_t v22 = v21 + 10;
      uint64_t v23 = (int64x2_t *)(*((void *)a2 + 12) + 24 * v18);
      *(int32x2_t *)(v21 + 10) = vadd_s32(*(int32x2_t *)(v21 + 10), vmovn_s64(*v23));
      *((_DWORD *)v21 + 7) += v23[1].i32[0];
      int v24 = __p[0];
      v21[16] = *((_WORD *)__p[0] + v18);
      if (*((unsigned char *)a2 + 88))
      {
        uint64_t v25 = (char *)__p[1] - (char *)v24;
        uint64_t v26 = *((void *)a2 + 8);
        if (0xF0F0F0F0F0F0F0F1 * ((*((void *)a2 + 9) - v26) >> 1) != v25 >> 1)
        {
          uint64_t v54 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v54, "the number of light paths doesn't match the number of samples in the patch");
          __cxa_throw(v54, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
        }
        uint64_t v27 = v26 + 34 * v18;
        if (*(unsigned char *)(v27 + 2)) {
          v21[17] = *(_WORD *)v27;
        }
        uint64_t v28 = v26 + 34 * v18;
        if (*(unsigned char *)(v28 + 6)) {
          v21[18] = *(_WORD *)(v28 + 4);
        }
        uint64_t v29 = v26 + 34 * v18;
        if (*(unsigned char *)(v29 + 10)) {
          v21[19] = *(_WORD *)(v29 + 8);
        }
        uint64_t v30 = v26 + 34 * v18;
        if (*(unsigned char *)(v30 + 14)) {
          v21[20] = *(_WORD *)(v30 + 12);
        }
        uint64_t v31 = v26 + 34 * v18;
        if (*(unsigned char *)(v31 + 18)) {
          v21[21] = *(_WORD *)(v31 + 16);
        }
        uint64_t v32 = v26 + 34 * v18;
        if (*(unsigned char *)(v32 + 21)) {
          *((unsigned char *)v21 + 44) = *(unsigned char *)(v32 + 20);
        }
        uint64_t v33 = v26 + 34 * v18;
        if (*(unsigned char *)(v33 + 23)) {
          *((unsigned char *)v21 + 4std::__function::__value_func<BOOL ()(mimosa::Metadata const&)>::~__value_func[abi:ne180100]((void *)this + 5) = *(unsigned char *)(v33 + 22);
        }
        uint64_t v34 = v26 + 34 * v18;
        if (*(unsigned char *)(v34 + 25)) {
          *((unsigned char *)v21 + 46) = *(unsigned char *)(v34 + 24);
        }
        uint64_t v35 = v26 + 34 * v18;
        if (*(unsigned char *)(v35 + 27)) {
          *((unsigned char *)v21 + 47) = *(unsigned char *)(v35 + 26);
        }
        uint64_t v36 = v26 + 34 * v18;
        if (*(unsigned char *)(v36 + 29)) {
          *((unsigned char *)v21 + 48) = *(unsigned char *)(v36 + 28);
        }
        uint64_t v37 = v26 + 34 * v18;
        if (*(unsigned char *)(v37 + 31)) {
          *((unsigned char *)v21 + 4std::__function::__value_func<BOOL ()(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,double)>::~__value_func[abi:ne180100]((void *)this + 9) = *(unsigned char *)(v37 + 30);
        }
        uint64_t v38 = v26 + 34 * v18;
        if (*(unsigned char *)(v38 + 33)) {
          *((unsigned char *)v21 + 50) = *(unsigned char *)(v38 + 32);
        }
      }
      uint64_t v39 = *(_OWORD **)(a5 + 24);
      unint64_t v40 = *(void *)(a5 + 32);
      if ((unint64_t)v39 >= v40)
      {
        uint64_t v43 = ((char *)v39 - *v15) >> 5;
        unint64_t v44 = v43 + 1;
        if ((unint64_t)(v43 + 1) >> 59) {
          std::vector<mimosa::OpticalSampleV1>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v45 = v40 - (void)*v15;
        if (v45 >> 4 > v44) {
          unint64_t v44 = v45 >> 4;
        }
        if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v46 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v46 = v44;
        }
        if (v46) {
          uint64_t v47 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<mimosa::OpticalSampleV2>>(a5 + 32, v46);
        }
        else {
          uint64_t v47 = 0;
        }
        unint64_t v48 = &v47[32 * v43];
        long long v49 = v22[1];
        *(_OWORD *)unint64_t v48 = *v22;
        *((_OWORD *)v48 + std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = v49;
        uint64_t v51 = *(char **)(a5 + 16);
        uint64_t v50 = *(char **)(a5 + 24);
        uint64_t v52 = v48;
        if (v50 != v51)
        {
          do
          {
            long long v53 = *((_OWORD *)v50 - 1);
            *((_OWORD *)v52 - 2) = *((_OWORD *)v50 - 2);
            *((_OWORD *)v52 - std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = v53;
            v52 -= 32;
            v50 -= 32;
          }
          while (v50 != v51);
          uint64_t v50 = *v15;
        }
        uint64_t v42 = v48 + 32;
        *(void *)(a5 + 16) = v52;
        *(void *)(a5 + 24) = v48 + 32;
        *(void *)(a5 + 32) = &v47[32 * v46];
        if (v50) {
          operator delete(v50);
        }
      }
      else
      {
        long long v41 = *(_OWORD *)(v21 + 18);
        _OWORD *v39 = *v22;
        v39[1] = v41;
        uint64_t v42 = v39 + 2;
      }
      *(void *)(a5 + 24) = v42;
      size_t v17 = (char *)__p[0];
      uint64_t v18 = ++v19;
    }
    while (v19 < (unint64_t)(((char *)__p[1] - (char *)__p[0]) >> 1));
  }
  if (v17)
  {
    __p[1] = v17;
    operator delete(v17);
  }
}

void sub_22278D0D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  if (a17) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mimosa::v2::OpticalSamplesV2SubpacketState::current_code(mimosa::v2::OpticalSamplesV2SubpacketState *this)
{
  return *((void *)this + 13) + *((unsigned __int8 *)this + 128);
}

void std::vector<mimosa::OpticalSampleV2>::reserve(void **a1, unint64_t a2)
{
  unint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 5)
  {
    if (a2 >> 59) {
      std::vector<mimosa::OpticalSampleV1>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<mimosa::OpticalSampleV2>>(v3, a2);
    uint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFE0];
    uint64_t v9 = &v6[32 * v8];
    uint64_t v11 = (char *)*a1;
    uint64_t v10 = (char *)a1[1];
    int v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        long long v13 = *((_OWORD *)v10 - 1);
        *((_OWORD *)v12 - 2) = *((_OWORD *)v10 - 2);
        *((_OWORD *)v12 - std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = v13;
        v12 -= 32;
        v10 -= 32;
      }
      while (v10 != v11);
      uint64_t v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void mimosa::v2::OpticalSamplesV2SubpacketState::update(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, unsigned int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v10 = *(void *)(a1 + 104);
  uint64_t v8 = a1 + 104;
  uint64_t v9 = v10;
  *(unsigned char *)(v8 + 24) = a3;
  if (*(void *)(v8 + 8) - v10 != a4)
  {
    *(void *)(a1 + 112) = v9;
    if (a4) {
      std::vector<std::byte>::__append((unint64_t *)v8, a4);
    }
  }
  *(unsigned char *)(a5 + 24) = 0;
  *(unsigned char *)(a5 + 56) = 0;
  *(unsigned char *)(a5 + 64) = 0;
  uint64_t v11 = (void *)(a5 + 64);
  *(void *)(a5 + 96) = 0;
  __int16 v73 = (void *)(a5 + 96);
  *(unsigned char *)(a5 + 88) = 0;
  *(void *)(a5 + 104) = 0;
  *(void *)(a5 + 112) = 0;
  *(void *)a5 = 0;
  *(void *)(a5 + 8) = 0;
  *(_WORD *)(a5 + 16) = 0;
  mimosa::v2::SubpacketHeaderState::update(a1, a2, (uint64_t)v80);
  *(_OWORD *)a5 = *(_OWORD *)v80;
  *(_WORD *)(a5 + 16) = v81;
  std::vector<unsigned short>::vector(v80, (uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 5);
  uint64_t v12 = *(void *)(a2 + 16);
  uint64_t v13 = *(void *)(a2 + 24);
  long long v14 = v80[0];
  if (v12 != v13)
  {
    unint64_t v15 = v80[0];
    do
    {
      *v15++ = *(_WORD *)(v12 + 12);
      v12 += 32;
    }
    while (v12 != v13);
  }
  __int16 v77 = 0;
  uint64_t v78 = 0;
  std::string __p = 0;
  std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short *,unsigned short *>(&__p, v14, (uint64_t)v80[1], ((char *)v80[1] - (char *)v14) >> 1);
  __int16 v16 = mimosa::v2::ItemCoder<std::vector<unsigned short>>::encode((uint64_t *)(a1 + 40), (uint64_t)&__p);
  __int16 v79 = v16;
  if (__p)
  {
    __int16 v77 = __p;
    operator delete(__p);
    if (HIBYTE(v79))
    {
LABEL_9:
      std::optional<std::variant<std::vector<unsigned short>,unsigned char>>::operator=[abi:ne180100]<std::vector<unsigned short>&,void>(a5 + 24, (uint64_t)v80);
      *(unsigned char *)(*(void *)(a1 + 104) + *(unsigned __int8 *)(a1 + 128)) = v79;
      goto LABEL_16;
    }
  }
  else if (HIBYTE(v16))
  {
    goto LABEL_9;
  }
  uint64_t v17 = *(unsigned __int8 *)(a1 + 128);
  uint64_t v18 = *(void *)(a1 + 104);
  char v19 = v79;
  if (*(unsigned __int8 *)(v18 + v17) != v79)
  {
    if (*(unsigned char *)(a5 + 56))
    {
      std::variant<std::vector<unsigned short>,unsigned char>::operator=[abi:ne180100]<unsigned char const&,0,unsigned char,1ul,0>(a5 + 24, &v79);
      char v19 = v79;
      uint64_t v17 = *(unsigned __int8 *)(a1 + 128);
      uint64_t v18 = *(void *)(a1 + 104);
    }
    else
    {
      *(unsigned char *)(a5 + 24) = v79;
      *(_DWORD *)(a5 + 48) = 1;
      *(unsigned char *)(a5 + 56) = 1;
    }
    *(unsigned char *)(v18 + v17) = v19;
  }
LABEL_16:
  std::vector<mimosa::v2::OpticalSamplesV1SubpacketState::Patch::ADCDelta>::resize((uint64_t)v73, (uint64_t)(*(void *)(a2 + 24) - *(void *)(a2 + 16)) >> 5);
  uint64_t v20 = *(void *)(a2 + 16);
  uint64_t v21 = *(void *)(a2 + 24) - v20;
  uint64_t v74 = a5 + 64;
  uint64_t v75 = v21 >> 5;
  if (v21)
  {
    unint64_t v22 = 0;
    uint64_t v72 = a1 + 64;
    unsigned int v23 = 1;
    do
    {
      int v82 = (unsigned __int16 *)(v20 + 32 * v22 + 12);
      int v24 = std::__hash_table<std::__hash_value_type<unsigned short,mimosa::OpticalSampleV2>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,mimosa::OpticalSampleV2>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,mimosa::OpticalSampleV2>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,mimosa::OpticalSampleV2>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(v72, v82, (uint64_t)&std::piecewise_construct, &v82);
      uint64_t v25 = *(void *)(a2 + 16);
      uint64_t v26 = v25 + 32 * v22;
      uint64_t v27 = (int64x2_t *)(*v73 + 24 * v22);
      __int32 v28 = *(_DWORD *)v26;
      int32x2_t v29 = *(int32x2_t *)(v24 + 10);
      *((_DWORD *)v24 + std::__function::__value_func<BOOL ()(mimosa::Metadata const&)>::~__value_func[abi:ne180100]((void *)this + 5) = *(_DWORD *)v26;
      v30.i32[0] = v28;
      v30.i32[1] = *(_DWORD *)(v26 + 4);
      int64x2_t *v27 = vsubl_s32(v30, v29);
      *((_DWORD *)v24 + 6) = v30.i32[1];
      uint64_t v31 = *(int *)(v26 + 8);
      v27[1].i64[0] = v31 - *((int *)v24 + 7);
      *((_DWORD *)v24 + 7) = v31;
      uint64_t v33 = (unsigned __int16 *)(v26 + 14);
      unsigned __int16 v32 = *(_WORD *)(v26 + 14);
      if (v24[17] != v32)
      {
        if (!*(unsigned char *)(a5 + 88))
        {
          std::optional<std::vector<mimosa::v2::OpticalSamplesV2SubpacketState::Patch::Sample>>::emplace[abi:ne180100]<unsigned long const&,void>(v74, (unint64_t *)&v75);
          unsigned __int16 v32 = *v33;
        }
        uint64_t v34 = *v11 + 34 * v22;
        *(_WORD *)uint64_t v34 = v32;
        *(unsigned char *)(v34 + 2) = 1;
        v24[17] = *v33;
      }
      int v37 = *(unsigned __int16 *)(v26 + 16);
      uint64_t v36 = (unsigned __int16 *)(v26 + 16);
      unsigned __int16 v35 = v37;
      if (v24[18] != v37)
      {
        if (!*(unsigned char *)(a5 + 88))
        {
          std::optional<std::vector<mimosa::v2::OpticalSamplesV2SubpacketState::Patch::Sample>>::emplace[abi:ne180100]<unsigned long const&,void>(v74, (unint64_t *)&v75);
          unsigned __int16 v35 = *v36;
        }
        uint64_t v38 = *v11 + 34 * v22;
        *(_WORD *)(v38 + 4) = v35;
        *(unsigned char *)(v38 + 6) = 1;
        v24[18] = *v36;
      }
      uint64_t v39 = v25 + 32 * v22;
      long long v41 = (unsigned __int16 *)(v39 + 18);
      unsigned __int16 v40 = *(_WORD *)(v39 + 18);
      if (v24[19] != v40)
      {
        if (!*(unsigned char *)(a5 + 88))
        {
          std::optional<std::vector<mimosa::v2::OpticalSamplesV2SubpacketState::Patch::Sample>>::emplace[abi:ne180100]<unsigned long const&,void>(v74, (unint64_t *)&v75);
          unsigned __int16 v40 = *v41;
        }
        uint64_t v42 = *v11 + 34 * v22;
        *(_WORD *)(v42 + 8) = v40;
        *(unsigned char *)(v42 + 10) = 1;
        v24[19] = *v41;
      }
      int v45 = *(unsigned __int16 *)(v39 + 20);
      unint64_t v44 = (unsigned __int16 *)(v39 + 20);
      unsigned __int16 v43 = v45;
      if (v24[20] != v45)
      {
        if (!*(unsigned char *)(a5 + 88))
        {
          std::optional<std::vector<mimosa::v2::OpticalSamplesV2SubpacketState::Patch::Sample>>::emplace[abi:ne180100]<unsigned long const&,void>(v74, (unint64_t *)&v75);
          unsigned __int16 v43 = *v44;
        }
        uint64_t v46 = *v11 + 34 * v22;
        *(_WORD *)(v46 + 12) = v43;
        *(unsigned char *)(v46 + 14) = 1;
        v24[20] = *v44;
      }
      uint64_t v47 = v25 + 32 * v22;
      long long v49 = (unsigned __int16 *)(v47 + 22);
      unsigned __int16 v48 = *(_WORD *)(v47 + 22);
      if (v24[21] != v48)
      {
        if (!*(unsigned char *)(a5 + 88))
        {
          std::optional<std::vector<mimosa::v2::OpticalSamplesV2SubpacketState::Patch::Sample>>::emplace[abi:ne180100]<unsigned long const&,void>(v74, (unint64_t *)&v75);
          unsigned __int16 v48 = *v49;
        }
        uint64_t v50 = *v11 + 34 * v22;
        *(_WORD *)(v50 + 16) = v48;
        *(unsigned char *)(v50 + 18) = 1;
        v24[21] = *v49;
      }
      int v53 = *(unsigned __int8 *)(v47 + 24);
      uint64_t v52 = (unsigned char *)(v47 + 24);
      __int16 v51 = v53;
      if (*((unsigned __int8 *)v24 + 44) != v53)
      {
        if (!*(unsigned char *)(a5 + 88))
        {
          std::optional<std::vector<mimosa::v2::OpticalSamplesV2SubpacketState::Patch::Sample>>::emplace[abi:ne180100]<unsigned long const&,void>(v74, (unint64_t *)&v75);
          __int16 v51 = *v52;
        }
        *(_WORD *)(*v11 + 34 * v22 + 20) = v51 | 0x100;
        *((unsigned char *)v24 + 44) = *v52;
      }
      uint64_t v54 = v25 + 32 * v22;
      __int16 v56 = (unsigned char *)(v54 + 25);
      __int16 v55 = *(unsigned __int8 *)(v54 + 25);
      if (*((unsigned __int8 *)v24 + 45) != *(unsigned __int8 *)(v54 + 25))
      {
        if (!*(unsigned char *)(a5 + 88))
        {
          std::optional<std::vector<mimosa::v2::OpticalSamplesV2SubpacketState::Patch::Sample>>::emplace[abi:ne180100]<unsigned long const&,void>(v74, (unint64_t *)&v75);
          __int16 v55 = *v56;
        }
        *(_WORD *)(*v11 + 34 * v22 + 22) = v55 | 0x100;
        *((unsigned char *)v24 + 4std::__function::__value_func<BOOL ()(mimosa::Metadata const&)>::~__value_func[abi:ne180100]((void *)this + 5) = *v56;
      }
      int v59 = *(unsigned __int8 *)(v54 + 26);
      uint64_t v58 = (unsigned char *)(v54 + 26);
      __int16 v57 = v59;
      if (*((unsigned __int8 *)v24 + 46) != v59)
      {
        if (!*(unsigned char *)(a5 + 88))
        {
          std::optional<std::vector<mimosa::v2::OpticalSamplesV2SubpacketState::Patch::Sample>>::emplace[abi:ne180100]<unsigned long const&,void>(v74, (unint64_t *)&v75);
          __int16 v57 = *v58;
        }
        *(_WORD *)(*v11 + 34 * v22 + 24) = v57 | 0x100;
        *((unsigned char *)v24 + 46) = *v58;
      }
      uint64_t v60 = v25 + 32 * v22;
      uint64_t v62 = (unsigned char *)(v60 + 27);
      __int16 v61 = *(unsigned __int8 *)(v60 + 27);
      if (*((unsigned __int8 *)v24 + 47) != *(unsigned __int8 *)(v60 + 27))
      {
        if (!*(unsigned char *)(a5 + 88))
        {
          std::optional<std::vector<mimosa::v2::OpticalSamplesV2SubpacketState::Patch::Sample>>::emplace[abi:ne180100]<unsigned long const&,void>(v74, (unint64_t *)&v75);
          __int16 v61 = *v62;
        }
        *(_WORD *)(*v11 + 34 * v22 + 26) = v61 | 0x100;
        *((unsigned char *)v24 + 47) = *v62;
      }
      int v65 = *(unsigned __int8 *)(v60 + 28);
      uint64_t v64 = (unsigned char *)(v60 + 28);
      __int16 v63 = v65;
      if (*((unsigned __int8 *)v24 + 48) != v65)
      {
        if (!*(unsigned char *)(a5 + 88))
        {
          std::optional<std::vector<mimosa::v2::OpticalSamplesV2SubpacketState::Patch::Sample>>::emplace[abi:ne180100]<unsigned long const&,void>(v74, (unint64_t *)&v75);
          __int16 v63 = *v64;
        }
        *(_WORD *)(*v11 + 34 * v22 + 28) = v63 | 0x100;
        *((unsigned char *)v24 + 48) = *v64;
      }
      uint64_t v66 = v25 + 32 * v22;
      long long v68 = (unsigned char *)(v66 + 29);
      int v67 = *(unsigned __int8 *)(v66 + 29);
      if (*((unsigned __int8 *)v24 + 49) != v67)
      {
        if (!*(unsigned char *)(a5 + 88))
        {
          std::optional<std::vector<mimosa::v2::OpticalSamplesV2SubpacketState::Patch::Sample>>::emplace[abi:ne180100]<unsigned long const&,void>(v74, (unint64_t *)&v75);
          LOWORD(v67) = *v68;
        }
        *(_WORD *)(*v11 + 34 * v22 + 30) = v67 | 0x100;
        *((unsigned char *)v24 + 4std::__function::__value_func<BOOL ()(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,double)>::~__value_func[abi:ne180100]((void *)this + 9) = *v68;
      }
      int v71 = *(unsigned __int8 *)(v66 + 30);
      __int16 v70 = (unsigned char *)(v66 + 30);
      __int16 v69 = v71;
      if (*((unsigned __int8 *)v24 + 50) != v71)
      {
        if (!*(unsigned char *)(a5 + 88))
        {
          std::optional<std::vector<mimosa::v2::OpticalSamplesV2SubpacketState::Patch::Sample>>::emplace[abi:ne180100]<unsigned long const&,void>(v74, (unint64_t *)&v75);
          __int16 v69 = *v70;
        }
        *(_WORD *)(*v11 + 34 * v22 + 32) = v69 | 0x100;
        *((unsigned char *)v24 + 50) = *v70;
      }
      unint64_t v22 = v23;
      uint64_t v20 = *(void *)(a2 + 16);
      ++v23;
    }
    while (v22 < (*(void *)(a2 + 24) - v20) >> 5);
  }
  if (v80[0])
  {
    v80[1] = v80[0];
    operator delete(v80[0]);
  }
}

void sub_22278D800(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, mimosa::v2::OpticalSamplesV2SubpacketState::Patch *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  if (a18) {
    operator delete(a18);
  }
  mimosa::v2::OpticalSamplesV2SubpacketState::Patch::~Patch(a9);
  _Unwind_Resume(a1);
}

uint64_t std::optional<std::variant<std::vector<unsigned short>,unsigned char>>::operator=[abi:ne180100]<std::vector<unsigned short>&,void>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 32))
  {
    std::__variant_detail::__assignment<std::__variant_detail::__traits<std::vector<unsigned short>,unsigned char>>::__assign_alt[abi:ne180100]<0ul,std::vector<unsigned short>,std::vector<unsigned short>&>(a1, (char *)a1, a2);
  }
  else
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short *,unsigned short *>((void *)a1, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 1);
    *(_DWORD *)(a1 + 24) = 0;
    *(unsigned char *)(a1 + 32) = 1;
  }
  return a1;
}

void mimosa::v2::OpticalSamplesV2SubpacketState::Patch::~Patch(mimosa::v2::OpticalSamplesV2SubpacketState::Patch *this)
{
  uint64_t v2 = (void *)*((void *)this + 12);
  if (v2)
  {
    *((void *)this + 13) = v2;
    operator delete(v2);
  }
  if (*((unsigned char *)this + 88))
  {
    uint64_t v3 = (void *)*((void *)this + 8);
    if (v3)
    {
      *((void *)this + std::__function::__value_func<BOOL ()(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,double)>::~__value_func[abi:ne180100]((void *)this + 9) = v3;
      operator delete(v3);
    }
  }
  if (*((unsigned char *)this + 56)) {
    std::__variant_detail::__dtor<std::__variant_detail::__traits<std::vector<unsigned short>,unsigned char>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 24);
  }
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<std::vector<unsigned short>,unsigned char>>::__assign_alt[abi:ne180100]<0ul,std::vector<unsigned short>,std::vector<unsigned short>&>(uint64_t a1, char *a2, uint64_t a3)
{
  if (*(_DWORD *)(a1 + 24))
  {
    v5[0] = a1;
    v5[1] = a3;
    std::__variant_detail::__assignment<std::__variant_detail::__traits<std::vector<unsigned short>,unsigned char>>::__assign_alt[abi:ne180100]<0ul,std::vector<unsigned short>,std::vector<unsigned short>&>(std::__variant_detail::__alt<0ul,std::vector<unsigned short>> &,std::vector<unsigned short>&)::{unnamed type#1}::operator()[abi:ne180100](v5);
  }
  else if (a2 != (char *)a3)
  {
    unint64_t v4 = *(char **)a3;
    uint64_t v3 = *(void *)(a3 + 8);
    std::vector<unsigned short>::__assign_with_size[abi:ne180100]<unsigned short *,unsigned short *>(a2, v4, v3, (v3 - (uint64_t)v4) >> 1);
  }
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<std::vector<unsigned short>,unsigned char>>::__assign_alt[abi:ne180100]<0ul,std::vector<unsigned short>,std::vector<unsigned short>&>(std::__variant_detail::__alt<0ul,std::vector<unsigned short>> &,std::vector<unsigned short>&)::{unnamed type#1}::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v1 = a1[1];
  unint64_t v4 = 0;
  uint64_t v5 = 0;
  std::string __p = 0;
  std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short *,unsigned short *>(&__p, *(const void **)v1, *(void *)(v1 + 8), (uint64_t)(*(void *)(v1 + 8) - *(void *)v1) >> 1);
  std::__variant_detail::__assignment<std::__variant_detail::__traits<std::vector<unsigned short>,unsigned char>>::__emplace[abi:ne180100]<0ul,std::vector<unsigned short>>(v2, (uint64_t)&__p);
  if (__p)
  {
    unint64_t v4 = __p;
    operator delete(__p);
  }
}

void sub_22278D9DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::optional<std::vector<mimosa::v2::OpticalSamplesV2SubpacketState::Patch::Sample>>::emplace[abi:ne180100]<unsigned long const&,void>(uint64_t a1, unint64_t *a2)
{
  if (*(unsigned char *)(a1 + 24))
  {
    unint64_t v4 = *(void **)a1;
    if (*(void *)a1)
    {
      *(void *)(a1 + 8) = v4;
      operator delete(v4);
    }
    *(unsigned char *)(a1 + 24) = 0;
  }
  uint64_t result = std::vector<mimosa::v2::OpticalSamplesV2SubpacketState::Patch::Sample>::vector((void *)a1, *a2);
  *(unsigned char *)(a1 + 24) = 1;
  return result;
}

unsigned __int16 *std::__hash_table<std::__hash_value_type<unsigned short,mimosa::OpticalSampleV2>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,mimosa::OpticalSampleV2>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,mimosa::OpticalSampleV2>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,mimosa::OpticalSampleV2>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(uint64_t a1, unsigned __int16 *a2, uint64_t a3, unsigned __int16 **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      uint64_t v11 = (unsigned __int16 *)*v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = *((void *)v11 + 1);
          if (v12 == v7)
          {
            if (v11[8] == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          uint64_t v11 = *(unsigned __int16 **)v11;
        }
        while (v11);
      }
    }
  }
  uint64_t v11 = (unsigned __int16 *)operator new(0x38uLL);
  *(void *)uint64_t v11 = 0;
  *((void *)v11 + std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = v7;
  v11[8] = **a4;
  *(_OWORD *)(v11 + 18) = 0u;
  *(_OWORD *)(v11 + 10) = 0u;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>>>::__rehash<true>(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v19 = *(void *)a1;
  uint64_t v20 = *(void **)(*(void *)a1 + 8 * v4);
  if (v20)
  {
    *(void *)uint64_t v11 = *v20;
LABEL_38:
    void *v20 = v11;
    goto LABEL_39;
  }
  *(void *)uint64_t v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v11;
  *(void *)(v19 + 8 * v4) = a1 + 16;
  if (*(void *)v11)
  {
    unint64_t v21 = *(void *)(*(void *)v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8) {
        v21 %= v8;
      }
    }
    else
    {
      v21 &= v8 - 1;
    }
    uint64_t v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_22278DC68(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t mimosa::v2::OpticalScalarsSubpacketState::update@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t result = mimosa::v2::SubpacketHeaderState::update(a1, a2);
  *a3 = result;
  a3[1] = v7;
  if (*(unsigned char *)(a2 + 25))
  {
    char v8 = *(unsigned char *)(a2 + 24);
    *(unsigned char *)(a1 + 40) = v8;
  }
  else
  {
    char v8 = *(unsigned char *)(a1 + 40);
  }
  *((unsigned char *)a3 + 16) = v8;
  return result;
}

uint64_t mimosa::v2::OpticalScalarsSubpacketState::update@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_WORD *)(a3 + 24) = 0;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_WORD *)(a3 + 16) = 0;
  uint64_t result = mimosa::v2::SubpacketHeaderState::update(a1, a2, (uint64_t)&v8);
  *(_OWORD *)a3 = v8;
  *(_WORD *)(a3 + 16) = v9;
  int v7 = *(unsigned __int8 *)(a2 + 16);
  if (v7 != *(unsigned __int8 *)(a1 + 40))
  {
    *(unsigned char *)(a1 + 40) = v7;
    *(_WORD *)(a3 + 24) = v7 | 0x100;
  }
  return result;
}

void mimosa::v2::OpticalDecoderV2SubpacketState::update(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  *(unsigned char *)(a3 + 12) = 0;
  *(_OWORD *)(a3 + 16) = 0u;
  uint64_t v6 = (char *)(a3 + 16);
  *(_OWORD *)(a3 + 32) = 0u;
  *(_DWORD *)(a3 + 47) = 0;
  *(void *)a3 = mimosa::v2::SubpacketHeaderState::update(a1, a2);
  *(void *)(a3 + 8) = v7;
  uint64_t v8 = *(void *)(a1 + 80);
  unint64_t v9 = ((unint64_t)*(unsigned __int8 *)(a1 + 72) + 1) % (*(void *)(a1 + 88) - v8);
  *(unsigned char *)(a1 + 72) = v9;
  if (*(unsigned char *)(a2 + 83))
  {
    size_t v10 = *(unsigned __int8 *)(a2 + 82);
    if (!*(unsigned char *)(a2 + 82))
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "num_beats is 0");
      __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    }
    *(void *)(a1 + 88) = v8;
    std::vector<std::byte>::__append((unint64_t *)(a1 + 80), v10);
    LOBYTE(vstd::__function::__value_func<BOOL ()(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,double)>::~__value_func[abi:ne180100]((void *)this + 9) = 0;
    *(unsigned char *)(a1 + 72) = 0;
  }
  if (*(unsigned char *)(a2 + 72)) {
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
  }
  if (*(unsigned char *)(a2 + 81))
  {
    LOBYTE(vstd::__function::__value_func<BOOL ()(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,double)>::~__value_func[abi:ne180100]((void *)this + 9) = *(unsigned char *)(a2 + 80);
    *(unsigned char *)(a1 + 72) = v9;
  }
  if (*(unsigned char *)(a2 + 85))
  {
    char v11 = *(unsigned char *)(a2 + 84);
    *(unsigned char *)(a1 + 73) = v11;
  }
  else
  {
    char v11 = *(unsigned char *)(a1 + 73);
  }
  *(void *)(a3 + 40) = *(void *)(a1 + 64);
  *(unsigned char *)(a3 + 48) = v9;
  *(unsigned char *)(a3 + 50) = v11;
  uint64_t v12 = *(void *)(a1 + 80);
  *(unsigned char *)(a3 + 4std::__function::__value_func<BOOL ()(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,double)>::~__value_func[abi:ne180100]((void *)this + 9) = *(_DWORD *)(a1 + 88) - v12;
  if (!*(unsigned char *)(a2 + 56))
  {
    mimosa::v2::ItemCoder<std::vector<unsigned short>>::decode((void *)(a1 + 40), *(unsigned __int8 *)(v12 + v9), &v22);
LABEL_16:
    uint64_t v15 = v23;
    *(_OWORD *)(a3 + 16) = v22;
    *(void *)(a3 + 32) = v15;
    return;
  }
  float v13 = (char *)(a2 + 24);
  int v14 = *(_DWORD *)(a2 + 48);
  if (v14)
  {
    if (v14 != 1) {
      std::__throw_bad_variant_access[abi:ne180100]();
    }
    *(unsigned char *)(v12 + vstd::__function::__value_func<BOOL ()(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,double)>::~__value_func[abi:ne180100]((void *)this + 9) = *v13;
    mimosa::v2::ItemCoder<std::vector<unsigned short>>::decode((void *)(a1 + 40), *(unsigned __int8 *)(*(void *)(a1 + 80) + *(unsigned __int8 *)(a1 + 72)), &v22);
    goto LABEL_16;
  }
  if (v6 == v13)
  {
    uint64_t v17 = 0;
    unint64_t v16 = 0;
  }
  else
  {
    std::vector<unsigned short>::__assign_with_size[abi:ne180100]<unsigned short *,unsigned short *>(v6, *(char **)(a2 + 24), *(void *)(a2 + 32), (uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 1);
    unint64_t v16 = *(const void **)(a3 + 16);
    uint64_t v17 = *(void *)(a3 + 24);
  }
  std::string __p = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short *,unsigned short *>(&__p, v16, v17, (v17 - (uint64_t)v16) >> 1);
  *(unsigned char *)(*(void *)(a1 + 80) + *(unsigned __int8 *)(a1 + 72)) = mimosa::v2::ItemCoder<std::vector<unsigned short>>::encode((uint64_t *)(a1 + 40), (uint64_t)&__p);
  if (__p)
  {
    uint64_t v20 = __p;
    operator delete(__p);
  }
}

{
  uint64_t v6;
  unint64_t v7;
  unsigned __int8 v8;
  size_t v9;
  uint64_t v10;
  int v11;
  int v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 v16;
  uint64_t v17;
  uint64_t v18;
  std::runtime_error *exception;
  void *v20;
  std::string *v21;
  std::string::size_type size;
  std::string *v23;
  long long v24;
  void *__p;
  void *v26;
  uint64_t v27;
  std::string v28;
  std::string v29;
  std::string v30;
  std::string v31;
  long long v32;
  std::string::size_type v33;

  if (!*(unsigned char *)(a2 + 49))
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "number of beats is 0 (should be at least 1)");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  if (*(unsigned __int8 *)(a2 + 48) >= *(unsigned __int8 *)(a2 + 49))
  {
    uint64_t v20 = __cxa_allocate_exception(0x10uLL);
    std::to_string(&v29, *(unsigned __int8 *)(a2 + 48));
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("beat index ", &v29, &v30);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(" is invalid given a beat count of ", &v30, &v31);
    std::to_string(&v28, *(unsigned __int8 *)(a2 + 49));
    if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v21 = &v28;
    }
    else {
      uint64_t v21 = (std::string *)v28.__r_.__value_.__r.__words[0];
    }
    if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v28.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v28.__r_.__value_.__l.__size_;
    }
    uint64_t v23 = std::string::append(&v31, (const std::string::value_type *)v21, size);
    int v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    uint64_t v33 = v23->__r_.__value_.__r.__words[2];
    unsigned __int16 v32 = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    MEMORY[0x223C9C340](v20, &v32);
    __cxa_throw(v20, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  *(unsigned char *)(a3 + 24) = 0;
  *(unsigned char *)(a3 + 56) = 0;
  *(unsigned char *)(a3 + 64) = 0;
  *(unsigned char *)(a3 + 72) = 0;
  *(_DWORD *)(a3 + 80) = 0;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_WORD *)(a3 + 16) = 0;
  *(_WORD *)(a3 + 84) = 0;
  mimosa::v2::SubpacketHeaderState::update(a1, a2, (uint64_t)&v32);
  *(_OWORD *)a3 = v32;
  *(_WORD *)(a3 + 16) = v33;
  uint64_t v6 = *(void *)(a1 + 80);
  uint64_t v7 = *(void *)(a1 + 88) - v6;
  uint64_t v8 = ((unint64_t)*(unsigned __int8 *)(a1 + 72) + 1) % v7;
  *(unsigned char *)(a1 + 72) = v8;
  unint64_t v9 = *(unsigned __int8 *)(a2 + 49);
  if (v7 != v9)
  {
    *(_WORD *)(a3 + 82) = v9 | 0x100;
    *(void *)(a1 + 88) = v6;
    if (v9) {
      std::vector<std::byte>::__append((unint64_t *)(a1 + 80), v9);
    }
    uint64_t v8 = 0;
    *(unsigned char *)(a1 + 72) = 0;
  }
  size_t v10 = *(void *)(a2 + 40);
  if (v10 != *(void *)(a1 + 64))
  {
    *(void *)(a1 + 64) = v10;
    *(void *)(a3 + 64) = v10;
    *(unsigned char *)(a3 + 72) = 1;
  }
  char v11 = *(unsigned __int8 *)(a2 + 48);
  if (v11 != v8)
  {
    *(unsigned char *)(a1 + 72) = v11;
    *(_WORD *)(a3 + 80) = v11 | 0x100;
  }
  uint64_t v12 = *(unsigned __int8 *)(a2 + 50);
  if (v12 != *(unsigned __int8 *)(a1 + 73))
  {
    *(unsigned char *)(a1 + 73) = v12;
    *(_WORD *)(a3 + 84) = v12 | 0x100;
  }
  float v13 = *(const void **)(a2 + 16);
  int v14 = *(void *)(a2 + 24);
  uint64_t v15 = a2 + 16;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  std::string __p = 0;
  std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short *,unsigned short *>(&__p, v13, v14, (v14 - (uint64_t)v13) >> 1);
  unint64_t v16 = mimosa::v2::ItemCoder<std::vector<unsigned short>>::encode((uint64_t *)(a1 + 40), (uint64_t)&__p);
  LOWORD(v32) = v16;
  if (__p)
  {
    uint64_t v26 = __p;
    operator delete(__p);
  }
  if (v16 >= 0x100u)
  {
    std::optional<std::variant<std::vector<unsigned short>,unsigned char>>::operator=[abi:ne180100]<std::vector<unsigned short> const&,void>(a3 + 24, v15);
  }
  else
  {
    uint64_t v17 = *(unsigned __int8 *)(a1 + 72);
    size_t v18 = *(void *)(a1 + 80);
    if (*(unsigned __int8 *)(v18 + v17) == v16) {
      return;
    }
    if (!*(unsigned char *)(a3 + 56))
    {
      *(unsigned char *)(a3 + 24) = v16;
      *(_DWORD *)(a3 + 48) = 1;
      *(unsigned char *)(a3 + 56) = 1;
      goto LABEL_21;
    }
    std::variant<std::vector<unsigned short>,unsigned char>::operator=[abi:ne180100]<unsigned char const&,0,unsigned char,1ul,0>(a3 + 24, &v32);
    LOBYTE(v16) = v32;
  }
  uint64_t v17 = *(unsigned __int8 *)(a1 + 72);
  size_t v18 = *(void *)(a1 + 80);
LABEL_21:
  *(unsigned char *)(v18 + v17) = v16;
}

void sub_22278DF68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  int v14 = *v12;
  if (*v12)
  {
    *(void *)(v11 + 24) = v14;
    operator delete(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t mimosa::v2::OpticalDecoderV2SubpacketState::predict(uint64_t this)
{
  *(unsigned char *)(this + 72) = ((unint64_t)*(unsigned __int8 *)(this + 72) + 1)
                        % (*(void *)(this + 88) - *(void *)(this + 80));
  return this;
}

uint64_t mimosa::v2::OpticalDecoderV2SubpacketState::current_code(mimosa::v2::OpticalDecoderV2SubpacketState *this)
{
  return *((void *)this + 10) + *((unsigned __int8 *)this + 72);
}

void sub_22278E2C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (*(char *)(v38 - 57) < 0) {
    operator delete(*(void **)(v38 - 80));
  }
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a36 < 0) {
    operator delete(a31);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  if (a24 < 0)
  {
    operator delete(a19);
    if ((v37 & 1) == 0) {
LABEL_14:
    }
      _Unwind_Resume(a1);
  }
  else if (!v37)
  {
    goto LABEL_14;
  }
  __cxa_free_exception(v36);
  goto LABEL_14;
}

uint64_t mimosa::v2::OpticalSamplesV1SubpacketState::Patch::homogeneous_sample_flags(mimosa::v2::OpticalSamplesV1SubpacketState::Patch *this)
{
  if (!*((unsigned char *)this + 48)) {
    return 1;
  }
  uint64_t v2 = *((void *)this + 3);
  uint64_t v1 = *((void *)this + 4);
  if (0x8E38E38E38E38E39 * ((v1 - v2) >> 2) < 2) {
    return 1;
  }
  uint64_t v3 = v2 + 36;
  if (v2 + 36 == v1) {
    return 1;
  }
  while (*(unsigned char *)(v2 + 6) && *(unsigned char *)(v3 + 6))
  {
    if (*(unsigned __int16 *)(v3 + 4) != *(unsigned __int16 *)(v2 + 4)) {
      return 0;
    }
LABEL_9:
    v3 += 36;
    if (v3 == v1) {
      return 1;
    }
  }
  if ((*(unsigned char *)(v2 + 6) != 0) == (*(unsigned char *)(v3 + 6) != 0)) {
    goto LABEL_9;
  }
  return 0;
}

void mimosa::v2::OpticalSamplesV1SubpacketState::update(mimosa::v2::OpticalSamplesV1SubpacketState *this@<X0>, const mimosa::v2::OpticalSamplesV1SubpacketState::Patch *a2@<X1>, uint64_t a3@<X8>)
{
  mimosa::v2::OpticalSamplesV1SubpacketState::update_pseudo_light_path_pattern(this, (-85 * ((*((_DWORD *)a2 + 16) - *((_DWORD *)a2 + 14)) >> 3)));
  mimosa::v2::OpticalSamplesV1SubpacketState::update((uint64_t)this, (uint64_t)a2, (uint64_t *)this + 10, a3);
}

void mimosa::v2::OpticalSamplesV1SubpacketState::update_pseudo_light_path_pattern(mimosa::v2::OpticalSamplesV1SubpacketState *this, unsigned int a2)
{
  uint64_t v4 = *((void *)this + 10);
  uint64_t v5 = *((void *)this + 11);
  uint64_t v3 = (char *)this + 80;
  if (a2 != (v5 - v4) >> 1)
  {
    std::vector<unsigned short>::resize((uint64_t)v3, a2);
    uint64_t v6 = (_WORD *)*((void *)this + 10);
    uint64_t v7 = (_WORD *)*((void *)this + 11);
    if (v6 != v7)
    {
      int v8 = 0;
      do
        *v6++ = v8++;
      while (v6 != v7);
    }
  }
}

void mimosa::v2::OpticalSamplesV1SubpacketState::update(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 3) != (a3[1] - *a3) >> 1)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "the number of light paths doesn't match the number of ADC deltas in the patch");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  *(void *)a4 = 0;
  *(_DWORD *)(a4 + 8) = 0;
  *(unsigned char *)(a4 + 12) = 0;
  *(void *)(a4 + 16) = 0;
  int v8 = (char **)(a4 + 16);
  *(void *)(a4 + 24) = 0;
  *(void *)(a4 + 32) = 0;
  *(void *)a4 = mimosa::v2::SubpacketHeaderState::update(a1, a2);
  *(void *)(a4 + 8) = v9;
  std::vector<mimosa::OpticalSampleV1>::reserve((void **)(a4 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 3));
  uint64_t v10 = *a3;
  if (a3[1] != *a3)
  {
    uint64_t v11 = 0;
    unsigned int v12 = 0;
    uint64_t v13 = a1 + 40;
    do
    {
      unsigned __int16 v48 = 0;
      unsigned __int16 v48 = *(_WORD *)(v10 + 2 * v11);
      long long v49 = &v48;
      int v14 = std::__hash_table<std::__hash_value_type<unsigned short,mimosa::OpticalSampleV1>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,mimosa::OpticalSampleV1>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,mimosa::OpticalSampleV1>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,mimosa::OpticalSampleV1>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(v13, &v48, (uint64_t)&std::piecewise_construct, &v49);
      uint64_t v15 = v14 + 10;
      unint64_t v16 = (_DWORD *)(*(void *)(a2 + 56) + 24 * v11);
      *((_DWORD *)v14 + 5) += *v16;
      *((_DWORD *)v14 + 7) += v16[2];
      *((_DWORD *)v14 + 9) += v16[4];
      if (*(unsigned char *)(a2 + 48))
      {
        uint64_t v17 = *(void *)(a2 + 24);
        uint64_t v18 = v17 + 36 * v11;
        if (*(unsigned char *)(v18 + 33)) {
          *((unsigned char *)v14 + 24) = *(unsigned char *)(v18 + 32);
        }
        uint64_t v19 = v17 + 36 * v11;
        if (*(unsigned char *)(v19 + 35)) {
          *((unsigned char *)v14 + 32) = *(unsigned char *)(v19 + 34);
        }
        if (*(unsigned char *)(v18 + 2)) {
          v14[20] = *(_WORD *)v18;
        }
        uint64_t v20 = v17 + 36 * v11;
        if (*(unsigned char *)(v20 + 6)) {
          v14[21] = *(_WORD *)(v20 + 4);
        }
        uint64_t v21 = v17 + 36 * v11;
        if (*(unsigned char *)(v21 + 10)) {
          v14[22] = *(_WORD *)(v21 + 8);
        }
        uint64_t v22 = v17 + 36 * v11;
        if (*(unsigned char *)(v22 + 14)) {
          v14[23] = *(_WORD *)(v22 + 12);
        }
        uint64_t v23 = v17 + 36 * v11;
        if (*(unsigned char *)(v23 + 18)) {
          v14[24] = *(_WORD *)(v23 + 16);
        }
        uint64_t v24 = v17 + 36 * v11;
        if (*(unsigned char *)(v24 + 22)) {
          v14[25] = *(_WORD *)(v24 + 20);
        }
        uint64_t v25 = v17 + 36 * v11;
        if (*(unsigned char *)(v25 + 25)) {
          *((unsigned char *)v14 + 52) = *(unsigned char *)(v25 + 24);
        }
        uint64_t v26 = v17 + 36 * v11;
        if (*(unsigned char *)(v26 + 27)) {
          *((unsigned char *)v14 + 53) = *(unsigned char *)(v26 + 26);
        }
        uint64_t v27 = v17 + 36 * v11;
        if (*(unsigned char *)(v27 + 29)) {
          *((unsigned char *)v14 + 54) = *(unsigned char *)(v27 + 28);
        }
        uint64_t v28 = v17 + 36 * v11;
        if (*(unsigned char *)(v28 + 31)) {
          *((unsigned char *)v14 + 5std::__function::__value_func<BOOL ()(mimosa::Metadata const&)>::~__value_func[abi:ne180100]((void *)this + 5) = *(unsigned char *)(v28 + 30);
        }
      }
      unint64_t v29 = *(void *)(a4 + 24);
      unint64_t v30 = *(void *)(a4 + 32);
      if (v29 >= v30)
      {
        unint64_t v34 = 0x8E38E38E38E38E39 * ((uint64_t)(v29 - (void)*v8) >> 2);
        unint64_t v35 = v34 + 1;
        if (v34 + 1 > 0x71C71C71C71C71CLL) {
          std::vector<mimosa::OpticalSampleV1>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v36 = 0x8E38E38E38E38E39 * ((uint64_t)(v30 - (void)*v8) >> 2);
        if (2 * v36 > v35) {
          unint64_t v35 = 2 * v36;
        }
        if (v36 >= 0x38E38E38E38E38ELL) {
          unint64_t v37 = 0x71C71C71C71C71CLL;
        }
        else {
          unint64_t v37 = v35;
        }
        if (v37) {
          uint64_t v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<mimosa::OpticalSampleV1>>(a4 + 32, v37);
        }
        else {
          uint64_t v38 = 0;
        }
        uint64_t v39 = &v38[36 * v34];
        long long v40 = *(_OWORD *)v15;
        long long v41 = *((_OWORD *)v15 + 1);
        *((_DWORD *)v39 + 8) = *((_DWORD *)v15 + 8);
        *(_OWORD *)uint64_t v39 = v40;
        *((_OWORD *)v39 + std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = v41;
        unsigned __int16 v43 = *(char **)(a4 + 16);
        uint64_t v42 = *(char **)(a4 + 24);
        unint64_t v44 = v39;
        if (v42 != v43)
        {
          do
          {
            long long v45 = *(_OWORD *)(v42 - 36);
            long long v46 = *(_OWORD *)(v42 - 20);
            *((_DWORD *)v44 - std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = *((_DWORD *)v42 - 1);
            *(_OWORD *)(v44 - 20) = v46;
            *(_OWORD *)(v44 - 36) = v45;
            v44 -= 36;
            v42 -= 36;
          }
          while (v42 != v43);
          uint64_t v42 = *v8;
        }
        uint64_t v33 = v39 + 36;
        *(void *)(a4 + 16) = v44;
        *(void *)(a4 + 24) = v39 + 36;
        *(void *)(a4 + 32) = &v38[36 * v37];
        if (v42) {
          operator delete(v42);
        }
      }
      else
      {
        long long v31 = *(_OWORD *)v15;
        long long v32 = *(_OWORD *)(v14 + 18);
        *(_DWORD *)(v29 + 32) = *((_DWORD *)v14 + 13);
        *(_OWORD *)unint64_t v29 = v31;
        *(_OWORD *)(v29 + 16) = v32;
        uint64_t v33 = (char *)(v29 + 36);
      }
      *(void *)(a4 + 24) = v33;
      uint64_t v10 = *a3;
      uint64_t v11 = ++v12;
    }
    while (v12 < (unint64_t)((a3[1] - *a3) >> 1));
  }
}

{
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unsigned __int16 *v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unsigned __int16 v22;
  unsigned __int16 *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int16 v28;
  unsigned __int16 *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int16 v33;
  unsigned __int16 *v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  unsigned __int16 v38;
  unsigned __int16 *v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  unsigned __int16 v43;
  unsigned __int16 *v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  unsigned __int16 v48;
  unsigned __int16 *v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  __int16 v53;
  unsigned char *v54;
  int v55;
  uint64_t v56;
  __int16 v57;
  unsigned char *v58;
  int v59;
  uint64_t v60;
  __int16 v61;
  unsigned char *v62;
  int v63;
  uint64_t v64;
  __int16 v65;
  unsigned char *v66;
  int v67;
  uint64_t v68;
  uint64_t *v69;
  unsigned __int16 v71;
  long long v72;
  __int16 v73;
  unsigned __int16 *v74;

  *(unsigned char *)(a4 + 24) = 0;
  uint64_t v7 = (void *)(a4 + 24);
  *(void *)(a4 + 56) = 0;
  int v8 = a4 + 56;
  *(unsigned char *)(a4 + 48) = 0;
  *(void *)(a4 + 64) = 0;
  *(void *)(a4 + 72) = 0;
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_WORD *)(a4 + 16) = 0;
  mimosa::v2::SubpacketHeaderState::update(a1, a2, (uint64_t)&v72);
  *(_OWORD *)a4 = v72;
  *(_WORD *)(a4 + 16) = v73;
  __int16 v69 = (uint64_t *)v8;
  std::vector<mimosa::v2::OpticalSamplesV1SubpacketState::Patch::ADCDelta>::resize(v8, (a3[1] - *a3) >> 1);
  uint64_t v9 = *a3;
  uint64_t v10 = a3[1] - *a3;
  *(void *)&uint64_t v72 = v7;
  *((void *)&v72 + std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = v10 >> 1;
  if (v10)
  {
    uint64_t v11 = 0;
    long long v68 = a1 + 40;
    unsigned int v12 = 1;
    do
    {
      int v71 = 0;
      int v71 = *(_WORD *)(v9 + 2 * v11);
      uint64_t v74 = &v71;
      uint64_t v13 = std::__hash_table<std::__hash_value_type<unsigned short,mimosa::OpticalSampleV1>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,mimosa::OpticalSampleV1>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,mimosa::OpticalSampleV1>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,mimosa::OpticalSampleV1>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(v68, &v71, (uint64_t)&std::piecewise_construct, &v74);
      int v14 = *(void *)(a2 + 16);
      uint64_t v15 = (int *)(v14 + 36 * v11);
      unint64_t v16 = *v69;
      uint64_t v17 = *v15;
      *(void *)(*v69 + 24 * v1std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = v17 - *((int *)v13 + 5);
      *((_DWORD *)v13 + std::__function::__value_func<BOOL ()(mimosa::Metadata const&)>::~__value_func[abi:ne180100]((void *)this + 5) = v17;
      uint64_t v18 = *((unsigned __int8 *)v15 + 4);
      if (*((unsigned __int8 *)v13 + 24) != v18)
      {
        if (!*(unsigned char *)(v72 + 24))
        {
          std::optional<std::vector<mimosa::v2::OpticalSamplesV1SubpacketState::Patch::Sample>>::emplace[abi:ne180100]<unsigned long const&,void>(v72, (unint64_t *)&v72 + 1);
          LOWORD(v18) = *((unsigned __int8 *)v15 + 4);
        }
        *(_WORD *)(*v7 + 36 * v11 + 32) = v18 | 0x100;
        *((unsigned char *)v13 + 24) = *((unsigned char *)v15 + 4);
      }
      uint64_t v19 = v15[2];
      *(void *)(v16 + 24 * v11 + 8) = v19 - *((int *)v13 + 7);
      *((_DWORD *)v13 + 7) = v19;
      uint64_t v20 = *((unsigned __int8 *)v15 + 12);
      if (*((unsigned __int8 *)v13 + 32) != v20)
      {
        if (!*(unsigned char *)(v72 + 24))
        {
          std::optional<std::vector<mimosa::v2::OpticalSamplesV1SubpacketState::Patch::Sample>>::emplace[abi:ne180100]<unsigned long const&,void>(v72, (unint64_t *)&v72 + 1);
          LOWORD(v20) = *((unsigned __int8 *)v15 + 12);
        }
        *(_WORD *)(*v7 + 36 * v11 + 34) = v20 | 0x100;
        *((unsigned char *)v13 + 32) = *((unsigned char *)v15 + 12);
      }
      uint64_t v21 = v14 + 36 * v11;
      uint64_t v24 = *(unsigned __int16 *)(v21 + 20);
      uint64_t v23 = (unsigned __int16 *)(v21 + 20);
      uint64_t v22 = v24;
      uint64_t v25 = *((int *)v23 - 1);
      *(void *)(v16 + 24 * v11 + 16) = v25 - *((int *)v13 + 9);
      *((_DWORD *)v13 + std::__function::__value_func<BOOL ()(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,double)>::~__value_func[abi:ne180100]((void *)this + 9) = v25;
      if (v13[20] != v24)
      {
        if (!*(unsigned char *)(v72 + 24))
        {
          std::optional<std::vector<mimosa::v2::OpticalSamplesV1SubpacketState::Patch::Sample>>::emplace[abi:ne180100]<unsigned long const&,void>(v72, (unint64_t *)&v72 + 1);
          uint64_t v22 = *v23;
        }
        uint64_t v26 = *v7 + 36 * v11;
        *(_WORD *)uint64_t v26 = v22;
        *(unsigned char *)(v26 + 2) = 1;
        v13[20] = *v23;
      }
      uint64_t v27 = v14 + 36 * v11;
      unint64_t v30 = *(unsigned __int16 *)(v27 + 22);
      unint64_t v29 = (unsigned __int16 *)(v27 + 22);
      uint64_t v28 = v30;
      if (v13[21] != v30)
      {
        if (!*(unsigned char *)(v72 + 24))
        {
          std::optional<std::vector<mimosa::v2::OpticalSamplesV1SubpacketState::Patch::Sample>>::emplace[abi:ne180100]<unsigned long const&,void>(v72, (unint64_t *)&v72 + 1);
          uint64_t v28 = *v29;
        }
        long long v31 = *v7 + 36 * v11;
        *(_WORD *)(v31 + 4) = v28;
        *(unsigned char *)(v31 + 6) = 1;
        v13[21] = *v29;
      }
      long long v32 = v14 + 36 * v11;
      unint64_t v35 = *(unsigned __int16 *)(v32 + 24);
      unint64_t v34 = (unsigned __int16 *)(v32 + 24);
      uint64_t v33 = v35;
      if (v13[22] != v35)
      {
        if (!*(unsigned char *)(v72 + 24))
        {
          std::optional<std::vector<mimosa::v2::OpticalSamplesV1SubpacketState::Patch::Sample>>::emplace[abi:ne180100]<unsigned long const&,void>(v72, (unint64_t *)&v72 + 1);
          uint64_t v33 = *v34;
        }
        unint64_t v36 = *v7 + 36 * v11;
        *(_WORD *)(v36 + 8) = v33;
        *(unsigned char *)(v36 + 10) = 1;
        v13[22] = *v34;
      }
      unint64_t v37 = v14 + 36 * v11;
      long long v40 = *(unsigned __int16 *)(v37 + 26);
      uint64_t v39 = (unsigned __int16 *)(v37 + 26);
      uint64_t v38 = v40;
      if (v13[23] != v40)
      {
        if (!*(unsigned char *)(v72 + 24))
        {
          std::optional<std::vector<mimosa::v2::OpticalSamplesV1SubpacketState::Patch::Sample>>::emplace[abi:ne180100]<unsigned long const&,void>(v72, (unint64_t *)&v72 + 1);
          uint64_t v38 = *v39;
        }
        long long v41 = *v7 + 36 * v11;
        *(_WORD *)(v41 + 12) = v38;
        *(unsigned char *)(v41 + 14) = 1;
        v13[23] = *v39;
      }
      uint64_t v42 = v14 + 36 * v11;
      long long v45 = *(unsigned __int16 *)(v42 + 28);
      unint64_t v44 = (unsigned __int16 *)(v42 + 28);
      unsigned __int16 v43 = v45;
      if (v13[24] != v45)
      {
        if (!*(unsigned char *)(v72 + 24))
        {
          std::optional<std::vector<mimosa::v2::OpticalSamplesV1SubpacketState::Patch::Sample>>::emplace[abi:ne180100]<unsigned long const&,void>(v72, (unint64_t *)&v72 + 1);
          unsigned __int16 v43 = *v44;
        }
        long long v46 = *v7 + 36 * v11;
        *(_WORD *)(v46 + 16) = v43;
        *(unsigned char *)(v46 + 18) = 1;
        v13[24] = *v44;
      }
      uint64_t v47 = v14 + 36 * v11;
      uint64_t v50 = *(unsigned __int16 *)(v47 + 30);
      long long v49 = (unsigned __int16 *)(v47 + 30);
      unsigned __int16 v48 = v50;
      if (v13[25] != v50)
      {
        if (!*(unsigned char *)(v72 + 24))
        {
          std::optional<std::vector<mimosa::v2::OpticalSamplesV1SubpacketState::Patch::Sample>>::emplace[abi:ne180100]<unsigned long const&,void>(v72, (unint64_t *)&v72 + 1);
          unsigned __int16 v48 = *v49;
        }
        __int16 v51 = *v7 + 36 * v11;
        *(_WORD *)(v51 + 20) = v48;
        *(unsigned char *)(v51 + 22) = 1;
        v13[25] = *v49;
      }
      uint64_t v52 = v14 + 36 * v11;
      __int16 v55 = *(unsigned __int8 *)(v52 + 32);
      uint64_t v54 = (unsigned char *)(v52 + 32);
      int v53 = v55;
      if (*((unsigned __int8 *)v13 + 52) != v55)
      {
        if (!*(unsigned char *)(v72 + 24))
        {
          std::optional<std::vector<mimosa::v2::OpticalSamplesV1SubpacketState::Patch::Sample>>::emplace[abi:ne180100]<unsigned long const&,void>(v72, (unint64_t *)&v72 + 1);
          int v53 = *v54;
        }
        *(_WORD *)(*v7 + 36 * v11 + 24) = v53 | 0x100;
        *((unsigned char *)v13 + 52) = *v54;
      }
      __int16 v56 = v14 + 36 * v11;
      int v59 = *(unsigned __int8 *)(v56 + 33);
      uint64_t v58 = (unsigned char *)(v56 + 33);
      __int16 v57 = v59;
      if (*((unsigned __int8 *)v13 + 53) != v59)
      {
        if (!*(unsigned char *)(v72 + 24))
        {
          std::optional<std::vector<mimosa::v2::OpticalSamplesV1SubpacketState::Patch::Sample>>::emplace[abi:ne180100]<unsigned long const&,void>(v72, (unint64_t *)&v72 + 1);
          __int16 v57 = *v58;
        }
        *(_WORD *)(*v7 + 36 * v11 + 26) = v57 | 0x100;
        *((unsigned char *)v13 + 53) = *v58;
      }
      uint64_t v60 = v14 + 36 * v11;
      __int16 v63 = *(unsigned __int8 *)(v60 + 34);
      uint64_t v62 = (unsigned char *)(v60 + 34);
      __int16 v61 = v63;
      if (*((unsigned __int8 *)v13 + 54) != v63)
      {
        if (!*(unsigned char *)(v72 + 24))
        {
          std::optional<std::vector<mimosa::v2::OpticalSamplesV1SubpacketState::Patch::Sample>>::emplace[abi:ne180100]<unsigned long const&,void>(v72, (unint64_t *)&v72 + 1);
          __int16 v61 = *v62;
        }
        *(_WORD *)(*v7 + 36 * v11 + 28) = v61 | 0x100;
        *((unsigned char *)v13 + 54) = *v62;
      }
      uint64_t v64 = v14 + 36 * v11;
      int v67 = *(unsigned __int8 *)(v64 + 35);
      uint64_t v66 = (unsigned char *)(v64 + 35);
      int v65 = v67;
      if (*((unsigned __int8 *)v13 + 55) != v67)
      {
        if (!*(unsigned char *)(v72 + 24))
        {
          std::optional<std::vector<mimosa::v2::OpticalSamplesV1SubpacketState::Patch::Sample>>::emplace[abi:ne180100]<unsigned long const&,void>(v72, (unint64_t *)&v72 + 1);
          int v65 = *v66;
        }
        *(_WORD *)(*v7 + 36 * v11 + 30) = v65 | 0x100;
        *((unsigned char *)v13 + 5std::__function::__value_func<BOOL ()(mimosa::Metadata const&)>::~__value_func[abi:ne180100]((void *)this + 5) = *v66;
      }
      uint64_t v11 = v12;
      uint64_t v9 = *a3;
      ++v12;
    }
    while (v11 < (a3[1] - *a3) >> 1);
  }
}

void sub_22278E910(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mimosa::v2::OpticalSamplesV1SubpacketState::update(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  mimosa::v2::OpticalSamplesV1SubpacketState::update_pseudo_light_path_pattern((mimosa::v2::OpticalSamplesV1SubpacketState *)a1, (57 * ((*(_DWORD *)(a2 + 24) - *(_DWORD *)(a2 + 16)) >> 2)));
  mimosa::v2::OpticalSamplesV1SubpacketState::update((uint64_t)a1, a2, a1 + 10, a3);
}

void sub_22278EE8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, mimosa::v2::OpticalSamplesV1SubpacketState::Patch *a9)
{
}

void mimosa::v2::OpticalSamplesV1SubpacketState::Patch::~Patch(mimosa::v2::OpticalSamplesV1SubpacketState::Patch *this)
{
  uint64_t v2 = (void *)*((void *)this + 7);
  if (v2)
  {
    *((void *)this + 8) = v2;
    operator delete(v2);
  }
  if (*((unsigned char *)this + 48))
  {
    uint64_t v3 = (void *)*((void *)this + 3);
    if (v3)
    {
      *((void *)this + 4) = v3;
      operator delete(v3);
    }
  }
}

void std::vector<unsigned short>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 1;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 2 * a2;
    }
  }
  else
  {
    std::vector<unsigned short>::__append((char **)a1, a2 - v2);
  }
}

void *std::optional<std::vector<mimosa::v2::OpticalSamplesV1SubpacketState::Patch::Sample>>::emplace[abi:ne180100]<unsigned long const&,void>(uint64_t a1, unint64_t *a2)
{
  if (*(unsigned char *)(a1 + 24))
  {
    uint64_t v4 = *(void **)a1;
    if (*(void *)a1)
    {
      *(void *)(a1 + 8) = v4;
      operator delete(v4);
    }
    *(unsigned char *)(a1 + 24) = 0;
  }
  uint64_t result = std::vector<mimosa::v2::OpticalSamplesV1SubpacketState::Patch::Sample>::vector((void *)a1, *a2);
  *(unsigned char *)(a1 + 24) = 1;
  return result;
}

void std::vector<unsigned short>::__append(char **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 1)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 2 * a2);
      v7 += 2 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    int v8 = *a1;
    uint64_t v9 = v7 - *a1;
    uint64_t v10 = a2 + (v9 >> 1);
    if (v10 < 0) {
      std::vector<mimosa::OpticalSampleV1>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v9 >> 1;
    unint64_t v12 = v5 - v8;
    if (v12 > v10) {
      uint64_t v10 = v12;
    }
    if (v12 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v13 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v13 = v10;
    }
    if (v13)
    {
      int v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v4, v13);
      int v8 = *a1;
      uint64_t v7 = a1[1];
    }
    else
    {
      int v14 = 0;
    }
    uint64_t v15 = &v14[2 * v11];
    unint64_t v16 = &v14[2 * v13];
    bzero(v15, 2 * a2);
    uint64_t v17 = &v15[2 * a2];
    while (v7 != v8)
    {
      __int16 v18 = *((_WORD *)v7 - 1);
      v7 -= 2;
      *((_WORD *)v15 - std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = v18;
      v15 -= 2;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

unsigned __int16 *std::__hash_table<std::__hash_value_type<unsigned short,mimosa::OpticalSampleV1>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,mimosa::OpticalSampleV1>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,mimosa::OpticalSampleV1>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,mimosa::OpticalSampleV1>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(uint64_t a1, unsigned __int16 *a2, uint64_t a3, unsigned __int16 **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      uint64_t v11 = (unsigned __int16 *)*v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = *((void *)v11 + 1);
          if (v12 == v7)
          {
            if (v11[8] == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          uint64_t v11 = *(unsigned __int16 **)v11;
        }
        while (v11);
      }
    }
  }
  uint64_t v11 = (unsigned __int16 *)operator new(0x38uLL);
  *(void *)uint64_t v11 = 0;
  *((void *)v11 + std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = v7;
  v11[8] = **a4;
  *((_DWORD *)v11 + 13) = 0;
  *(_OWORD *)(v11 + 18) = 0u;
  *(_OWORD *)(v11 + 10) = 0u;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>>>::__rehash<true>(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v19 = *(void *)a1;
  uint64_t v20 = *(void **)(*(void *)a1 + 8 * v4);
  if (v20)
  {
    *(void *)uint64_t v11 = *v20;
LABEL_38:
    void *v20 = v11;
    goto LABEL_39;
  }
  *(void *)uint64_t v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v11;
  *(void *)(v19 + 8 * v4) = a1 + 16;
  if (*(void *)v11)
  {
    unint64_t v21 = *(void *)(*(void *)v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8) {
        v21 %= v8;
      }
    }
    else
    {
      v21 &= v8 - 1;
    }
    uint64_t v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_22278F2B0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t mimosa::v2::Decoder::Decoder(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v7[4] = *MEMORY[0x263EF8340];
  v7[0] = &unk_26D4E44D0;
  v7[1] = a1;
  _OWORD v7[3] = v7;
  mimosa::v2::PatchDecoder::PatchDecoder((_DWORD *)a1, (uint64_t)v7);
  std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100](v7);
  std::__function::__value_func<BOOL ()(mimosa::Metadata const&)>::__value_func[abi:ne180100](a1 + 40, a2);
  std::__function::__value_func<BOOL ()(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,double)>::__value_func[abi:ne180100](a1 + 72, a3);
  bzero((void *)(a1 + 104), 0x4B0uLL);
  mimosa::v2::PacketState::PacketState((mimosa::v2::PacketState *)(a1 + 104));
  *(void *)(a1 + 1304) = 0;
  *(unsigned char *)(a1 + 1312) = 0;
  return a1;
}

void sub_22278F3A0(_Unwind_Exception *a1)
{
  std::__function::__value_func<BOOL ()(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,double)>::~__value_func[abi:ne180100](v3);
  std::__function::__value_func<BOOL ()(mimosa::Metadata const&)>::~__value_func[abi:ne180100](v2);
  std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t mimosa::v2::Decoder::Decoder(uint64_t a1, uint64_t a2)
{
  v5[4] = *MEMORY[0x263EF8340];
  v5[0] = &unk_26D4E4560;
  v5[1] = a1;
  v5[3] = v5;
  mimosa::v2::PatchDecoder::PatchDecoder((_DWORD *)a1, (uint64_t)v5);
  std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100](v5);
  std::__function::__value_func<BOOL ()(mimosa::Metadata const&)>::__value_func[abi:ne180100](a1 + 40, a2 + 40);
  std::__function::__value_func<BOOL ()(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,double)>::__value_func[abi:ne180100](a1 + 72, a2 + 72);
  mimosa::v2::PacketState::PacketState((mimosa::v2::PacketState *)(a1 + 104), (const mimosa::v2::PacketState *)(a2 + 104));
  *(void *)(a1 + 1304) = *(void *)(a2 + 1304);
  *(unsigned char *)(a1 + 1312) = *(unsigned char *)(a2 + 1312);
  return a1;
}

void sub_22278F4A8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t mimosa::v2::Decoder::handle_patch(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 72;
  mimosa::v2::PacketState::update(a1 + 104, a2);
  uint64_t v4 = std::function<BOOL ()(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,double)>::operator()(v3, (uint64_t)v6, *(double *)(a1 + 1304));
  std::__variant_detail::__dtor<std::__variant_detail::__traits<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v6);
  return v4;
}

void sub_22278F518(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t mimosa::v2::Decoder::decode(mimosa::v2::Decoder *this, byte *a2, unint64_t a3)
{
  v19[4] = *MEMORY[0x263EF8340];
  if (*((unsigned char *)this + 1312))
  {
    int64_t v6 = 0;
    char v7 = 1;
  }
  else
  {
    std::__function::__value_func<BOOL ()(mimosa::Metadata const&)>::__value_func[abi:ne180100]((uint64_t)v19, (uint64_t)this + 40);
    int64_t v6 = mimosa::v2::decode_metadata(a2, a3, (uint64_t)v19);
    char v16 = v15;
    std::__function::__value_func<BOOL ()(mimosa::Metadata const&)>::~__value_func[abi:ne180100](v19);
    char v7 = v16 & 1;
    if (v6)
    {
      *((unsigned char *)this + 1312) = 1;
      if ((v16 & 1) == 0) {
        return v6;
      }
    }
    else if (!*((unsigned char *)this + 1312) || (v16 & 1) == 0)
    {
      return v6;
    }
  }
  char v8 = 0;
  uint8x8_t v9 = &a2[a3];
  uint64_t v10 = &a2[v6];
  do
  {
    uint64_t v11 = (const byte *)(v9 - v10);
    if (v9 - v10 < 1) {
      break;
    }
    int v12 = *v10;
    if (*v10)
    {
      if (v12 == 109)
      {
        uint64_t v13 = 0;
        char v8 = 1;
      }
      else
      {
        if ((v12 - 1) < 7)
        {
          exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "input is corrupt");
          __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
        }
        uint64_t v13 = mimosa::v2::PatchDecoder::decode(this, v10, v11);
        char v7 = v14 & 1;
      }
    }
    else if ((unint64_t)v11 < 9)
    {
      uint64_t v13 = 0;
    }
    else
    {
      *((void *)this + 163) = *(void *)(v10 + 1);
      uint64_t v13 = 9;
    }
    v6 += v13;
    if ((v7 & 1) == 0) {
      break;
    }
    if (v8) {
      break;
    }
    v10 += v13;
  }
  while (v13);
  return v6;
}

void sub_22278F6D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<BOOL ()(mimosa::Metadata const&)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

mimosa::v2::PacketState *mimosa::v2::PacketState::PacketState(mimosa::v2::PacketState *this)
{
  *((void *)this + 14) = 0;
  *((_OWORD *)this + std::__function::__value_func<BOOL ()(mimosa::Metadata const&)>::~__value_func[abi:ne180100]((void *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  *((_DWORD *)this + 28) = 1065353216;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *((_DWORD *)this + 60) = 1065353216;
  *((void *)this + 32) = 0;
  *((void *)this + 33) = 0;
  *((void *)this + 3std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = 0;
  unint64_t v2 = operator new(1uLL);
  *((void *)this + 3std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = v2;
  *v2++ = 0;
  *((void *)this + 32) = v2;
  *((void *)this + 33) = v2;
  *((unsigned char *)this + 272) = 0;
  *((void *)this + 7std::__function::__value_func<BOOL ()(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,double)>::~__value_func[abi:ne180100]((void *)this + 9) = 0;
  *(_OWORD *)((char *)this + 280) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 328) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 360) = 0u;
  *(_OWORD *)((char *)this + 376) = 0u;
  *(_OWORD *)((char *)this + 392) = 0u;
  *(_OWORD *)((char *)this + 408) = 0u;
  *(_OWORD *)((char *)this + 424) = 0u;
  *(_OWORD *)((char *)this + 440) = 0u;
  *(_OWORD *)((char *)this + 456) = 0u;
  *(_OWORD *)((char *)this + 472) = 0u;
  *(_OWORD *)((char *)this + 488) = 0u;
  *(_OWORD *)((char *)this + 504) = 0u;
  *(_OWORD *)((char *)this + 520) = 0u;
  *(_OWORD *)((char *)this + 536) = 0u;
  *(_OWORD *)((char *)this + 552) = 0u;
  *(_OWORD *)((char *)this + 568) = 0u;
  *(_OWORD *)((char *)this + 584) = 0u;
  *(_OWORD *)((char *)this + 600) = 0u;
  *(_OWORD *)((char *)this + 616) = 0u;
  uint64_t v3 = operator new(1uLL);
  *((void *)this + 77) = v3;
  *v3++ = 0;
  *((void *)this + 7std::__function::__value_func<BOOL ()(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,double)>::~__value_func[abi:ne180100]((void *)this + 9) = v3;
  *((void *)this + 78) = v3;
  *((_OWORD *)this + 40) = 0u;
  *((_OWORD *)this + 4std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = 0u;
  *((_OWORD *)this + 42) = 0u;
  *((_OWORD *)this + 43) = 0u;
  *((_OWORD *)this + 44) = 0u;
  *((_OWORD *)this + 4std::__function::__value_func<BOOL ()(mimosa::Metadata const&)>::~__value_func[abi:ne180100]((void *)this + 5) = 0u;
  *((void *)this + 92) = 0;
  uint64_t v4 = operator new(1uLL);
  *((void *)this + 90) = v4;
  *v4++ = 0;
  *((void *)this + 92) = v4;
  *((void *)this + 9std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = v4;
  *((void *)this + 9std::__function::__value_func<BOOL ()(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,double)>::~__value_func[abi:ne180100]((void *)this + 9) = 0;
  *(_OWORD *)((char *)this + 744) = 0u;
  *(_OWORD *)((char *)this + 760) = 0u;
  *(_OWORD *)((char *)this + 776) = 0u;
  *((unsigned char *)this + 793) = 1;
  *((_OWORD *)this + 50) = 0u;
  *((_OWORD *)this + 5std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = 0u;
  *((_OWORD *)this + 52) = 0u;
  *((_OWORD *)this + 53) = 0u;
  *((_WORD *)this + 420) = 1;
  *((_OWORD *)this + 54) = 0u;
  *((_OWORD *)this + 5std::__function::__value_func<BOOL ()(mimosa::Metadata const&)>::~__value_func[abi:ne180100]((void *)this + 5) = 0u;
  *((_OWORD *)this + 56) = 0u;
  *((_OWORD *)this + 57) = 0u;
  *((_OWORD *)this + 58) = 0u;
  *((_OWORD *)this + 5std::__function::__value_func<BOOL ()(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,double)>::~__value_func[abi:ne180100]((void *)this + 9) = 0u;
  *((_OWORD *)this + 60) = 0u;
  *((_OWORD *)this + 6std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = 0u;
  *((void *)this + 124) = 0;
  *((_DWORD *)this + 236) = 1065353216;
  *(_OWORD *)((char *)this + 952) = 0u;
  *(_OWORD *)((char *)this + 968) = 0u;
  *((_DWORD *)this + 246) = 1065353216;
  *((unsigned char *)this + 994) = 0;
  *(_OWORD *)((char *)this + 1096) = 0u;
  *(_OWORD *)((char *)this + 1112) = 0u;
  *(_OWORD *)((char *)this + 1128) = 0u;
  *(_OWORD *)((char *)this + 1000) = 0u;
  *(_OWORD *)((char *)this + 1016) = 0u;
  *(_OWORD *)((char *)this + 1032) = 0u;
  *(_OWORD *)((char *)this + 1048) = 0u;
  *(_OWORD *)((char *)this + 1064) = 0u;
  *(_OWORD *)((char *)this + 1080) = 0u;
  *((void *)this + 143) = 0;
  *((_DWORD *)this + 274) = 1065353216;
  *((_OWORD *)this + 6std::__function::__value_func<BOOL ()(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,double)>::~__value_func[abi:ne180100]((void *)this + 9) = 0u;
  *((_OWORD *)this + 70) = 0u;
  *((_DWORD *)this + 284) = 1065353216;
  *((unsigned char *)this + 1146) = 0;
  *((_OWORD *)this + 74) = 0u;
  *((_OWORD *)this + 73) = 0u;
  *((_OWORD *)this + 72) = 0u;
  *((unsigned char *)this + 1192) = 1;
  return this;
}

void sub_22278F8BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  a10 = v10 + 85;
  std::vector<std::vector<unsigned short>>::__destroy_vector::operator()[abi:ne180100](&a10);
  mimosa::v2::OpticalDecoderV1SubpacketState::~OpticalDecoderV1SubpacketState(v12);
  mimosa::v2::AccelSubpacketState::~AccelSubpacketState(v11);
  mimosa::v2::OpticalSamplesV2SubpacketState::~OpticalSamplesV2SubpacketState((mimosa::v2::OpticalSamplesV2SubpacketState *)(v10 + 18));
  mimosa::v2::OpticalSamplesV1SubpacketState::~OpticalSamplesV1SubpacketState((mimosa::v2::OpticalSamplesV1SubpacketState *)(v10 + 5));
  _Unwind_Resume(a1);
}

void mimosa::v2::OpticalDecoderV1SubpacketState::~OpticalDecoderV1SubpacketState(mimosa::v2::OpticalDecoderV1SubpacketState *this)
{
  unint64_t v2 = (void *)*((void *)this + 9);
  if (v2)
  {
    *((void *)this + 10) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void **)((char *)this + 40);
  std::vector<std::vector<unsigned short>>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void mimosa::v2::AccelSubpacketState::~AccelSubpacketState(mimosa::v2::AccelSubpacketState *this)
{
  unint64_t v2 = (void *)*((void *)this + 11);
  if (v2)
  {
    *((void *)this + 12) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 8);
  if (v3)
  {
    *((void *)this + std::__function::__value_func<BOOL ()(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,double)>::~__value_func[abi:ne180100]((void *)this + 9) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void **)((char *)this + 40);
  std::vector<std::vector<unsigned short>>::__destroy_vector::operator()[abi:ne180100](&v4);
}

void mimosa::v2::OpticalSamplesV2SubpacketState::~OpticalSamplesV2SubpacketState(mimosa::v2::OpticalSamplesV2SubpacketState *this)
{
  unint64_t v2 = (void *)*((void *)this + 13);
  if (v2)
  {
    *((void *)this + 14) = v2;
    operator delete(v2);
  }
  std::__hash_table<std::__hash_value_type<unsigned short,unsigned int>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,unsigned int>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,unsigned int>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,unsigned int>>>::~__hash_table((uint64_t)this + 64);
  uint64_t v3 = (void **)((char *)this + 40);
  std::vector<std::vector<unsigned short>>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void mimosa::v2::OpticalSamplesV1SubpacketState::~OpticalSamplesV1SubpacketState(mimosa::v2::OpticalSamplesV1SubpacketState *this)
{
  unint64_t v2 = (void *)*((void *)this + 10);
  if (v2)
  {
    *((void *)this + 1std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = v2;
    operator delete(v2);
  }
  std::__hash_table<std::__hash_value_type<unsigned short,unsigned int>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,unsigned int>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,unsigned int>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,unsigned int>>>::~__hash_table((uint64_t)this + 40);
}

mimosa::v2::PacketState *mimosa::v2::PacketState::PacketState(mimosa::v2::PacketState *this, const mimosa::v2::PacketState *a2)
{
  long long v4 = *(_OWORD *)a2;
  long long v5 = *((_OWORD *)a2 + 1);
  *((void *)this + 4) = *((void *)a2 + 4);
  *(_OWORD *)this = v4;
  *((_OWORD *)this + std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = v5;
  long long v6 = *(_OWORD *)((char *)a2 + 40);
  long long v7 = *(_OWORD *)((char *)a2 + 56);
  *((void *)this + std::__function::__value_func<BOOL ()(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,double)>::~__value_func[abi:ne180100]((void *)this + 9) = *((void *)a2 + 9);
  *(_OWORD *)((char *)this + 56) = v7;
  *(_OWORD *)((char *)this + 40) = v6;
  std::unordered_map<unsigned short,mimosa::OpticalSampleV1>::unordered_map((uint64_t)this + 80, (uint64_t)a2 + 80);
  *((void *)this + 1std::__function::__value_func<BOOL ()(mimosa::Metadata const&)>::~__value_func[abi:ne180100]((void *)this + 5) = 0;
  *((void *)this + 16) = 0;
  *((void *)this + 17) = 0;
  std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short *,unsigned short *>((void *)this + 15, *((const void **)a2 + 15), *((void *)a2 + 16), (uint64_t)(*((void *)a2 + 16) - *((void *)a2 + 15)) >> 1);
  long long v8 = *((_OWORD *)a2 + 9);
  long long v9 = *((_OWORD *)a2 + 10);
  uint64_t v10 = *((void *)a2 + 22);
  *((void *)this + 23) = 0;
  *((void *)this + 22) = v10;
  *((_OWORD *)this + 10) = v9;
  *((_OWORD *)this + std::__function::__value_func<BOOL ()(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,double)>::~__value_func[abi:ne180100]((void *)this + 9) = v8;
  *((void *)this + 24) = 0;
  *((void *)this + 2std::__function::__value_func<BOOL ()(mimosa::Metadata const&)>::~__value_func[abi:ne180100]((void *)this + 5) = 0;
  std::vector<std::vector<unsigned short>>::__init_with_size[abi:ne180100]<std::vector<unsigned short>*,std::vector<unsigned short>*>((void *)this + 23, *((void *)a2 + 23), *((void *)a2 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 24) - *((void *)a2 + 23)) >> 3));
  std::unordered_map<unsigned short,mimosa::OpticalSampleV2>::unordered_map((uint64_t)this + 208, (uint64_t)a2 + 208);
  *((void *)this + 3std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = 0;
  *((void *)this + 32) = 0;
  *((void *)this + 33) = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>((void *)this + 31, *((const void **)a2 + 31), *((void *)a2 + 32), *((void *)a2 + 32) - *((void *)a2 + 31));
  *((unsigned char *)this + 272) = *((unsigned char *)a2 + 272);
  long long v11 = *(_OWORD *)((char *)a2 + 296);
  uint64_t v12 = *((void *)a2 + 39);
  *(_OWORD *)((char *)this + 280) = *(_OWORD *)((char *)a2 + 280);
  *(_OWORD *)((char *)this + 296) = v11;
  *((void *)this + 3std::__function::__value_func<BOOL ()(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,double)>::~__value_func[abi:ne180100]((void *)this + 9) = v12;
  *((void *)this + 40) = 0;
  *((void *)this + 4std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = 0;
  *((void *)this + 42) = 0;
  std::vector<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>>::__init_with_size[abi:ne180100]<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>*,std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>*>((void *)this + 40, *((void *)a2 + 40), *((void *)a2 + 41), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 41) - *((void *)a2 + 40)) >> 3));
  *((void *)this + 43) = 0;
  *((void *)this + 44) = 0;
  *((void *)this + 4std::__function::__value_func<BOOL ()(mimosa::Metadata const&)>::~__value_func[abi:ne180100]((void *)this + 5) = 0;
  std::vector<std::array<int,3ul>>::__init_with_size[abi:ne180100]<std::array<int,3ul>*,std::array<int,3ul>*>((void *)this + 43, *((const void **)a2 + 43), *((void *)a2 + 44), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 44) - *((void *)a2 + 43)) >> 2));
  *((void *)this + 46) = 0;
  *((void *)this + 47) = 0;
  *((void *)this + 48) = 0;
  std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>::__init_with_size[abi:ne180100]<mimosa::v2::AccelSubpacketState::SampleHeader*,mimosa::v2::AccelSubpacketState::SampleHeader*>((void *)this + 46, *((const void **)a2 + 46), *((void *)a2 + 47), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 47) - *((void *)a2 + 46)) >> 1));
  *((unsigned char *)this + 392) = *((unsigned char *)a2 + 392);
  *((_OWORD *)this + 2std::__function::__value_func<BOOL ()(mimosa::Metadata const&)>::~__value_func[abi:ne180100]((void *)this + 5) = *((_OWORD *)a2 + 25);
  long long v13 = *((_OWORD *)a2 + 26);
  long long v14 = *((_OWORD *)a2 + 27);
  long long v15 = *((_OWORD *)a2 + 29);
  *((_OWORD *)this + 28) = *((_OWORD *)a2 + 28);
  *((_OWORD *)this + 2std::__function::__value_func<BOOL ()(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,double)>::~__value_func[abi:ne180100]((void *)this + 9) = v15;
  *((_OWORD *)this + 26) = v13;
  *((_OWORD *)this + 27) = v14;
  long long v16 = *((_OWORD *)a2 + 30);
  long long v17 = *((_OWORD *)a2 + 31);
  long long v18 = *((_OWORD *)a2 + 32);
  *(_OWORD *)((char *)this + 523) = *(_OWORD *)((char *)a2 + 523);
  *((_OWORD *)this + 3std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = v17;
  *((_OWORD *)this + 32) = v18;
  *((_OWORD *)this + 30) = v16;
  long long v19 = *((_OWORD *)a2 + 34);
  long long v20 = *((_OWORD *)a2 + 35);
  *((void *)this + 72) = *((void *)a2 + 72);
  *((_OWORD *)this + 34) = v19;
  *((_OWORD *)this + 3std::__function::__value_func<BOOL ()(mimosa::Metadata const&)>::~__value_func[abi:ne180100]((void *)this + 5) = v20;
  *((void *)this + 73) = 0;
  *((void *)this + 7std::__function::__value_func<BOOL ()(mimosa::Metadata const&)>::~__value_func[abi:ne180100]((void *)this + 5) = 0;
  *((void *)this + 74) = 0;
  std::vector<std::vector<unsigned short>>::__init_with_size[abi:ne180100]<std::vector<unsigned short>*,std::vector<unsigned short>*>((void *)this + 73, *((void *)a2 + 73), *((void *)a2 + 74), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 74) - *((void *)a2 + 73)) >> 3));
  *((unsigned char *)this + 608) = *((unsigned char *)a2 + 608);
  *((void *)this + 77) = 0;
  *((void *)this + 7std::__function::__value_func<BOOL ()(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,double)>::~__value_func[abi:ne180100]((void *)this + 9) = 0;
  *((void *)this + 78) = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>((void *)this + 77, *((const void **)a2 + 77), *((void *)a2 + 78), *((void *)a2 + 78) - *((void *)a2 + 77));
  long long v21 = *((_OWORD *)a2 + 40);
  long long v22 = *((_OWORD *)a2 + 41);
  *((void *)this + 84) = *((void *)a2 + 84);
  *((_OWORD *)this + 40) = v21;
  *((_OWORD *)this + 4std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = v22;
  *((void *)this + 8std::__function::__value_func<BOOL ()(mimosa::Metadata const&)>::~__value_func[abi:ne180100]((void *)this + 5) = 0;
  *((void *)this + 87) = 0;
  *((void *)this + 86) = 0;
  std::vector<std::vector<unsigned short>>::__init_with_size[abi:ne180100]<std::vector<unsigned short>*,std::vector<unsigned short>*>((void *)this + 85, *((void *)a2 + 85), *((void *)a2 + 86), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 86) - *((void *)a2 + 85)) >> 3));
  uint64_t v23 = *((void *)a2 + 88);
  *((_WORD *)this + 356) = *((_WORD *)a2 + 356);
  *((void *)this + 88) = v23;
  *((void *)this + 90) = 0;
  *((void *)this + 92) = 0;
  *((void *)this + 9std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>((void *)this + 90, *((const void **)a2 + 90), *((void *)a2 + 91), *((void *)a2 + 91) - *((void *)a2 + 90));
  long long v24 = *(_OWORD *)((char *)a2 + 744);
  long long v25 = *(_OWORD *)((char *)a2 + 776);
  *(_OWORD *)((char *)this + 760) = *(_OWORD *)((char *)a2 + 760);
  *(_OWORD *)((char *)this + 776) = v25;
  *(_OWORD *)((char *)this + 744) = v24;
  long long v26 = *(_OWORD *)((char *)a2 + 792);
  long long v27 = *(_OWORD *)((char *)a2 + 808);
  long long v28 = *(_OWORD *)((char *)a2 + 824);
  *((_DWORD *)this + 210) = *((_DWORD *)a2 + 210);
  *(_OWORD *)((char *)this + 808) = v27;
  *(_OWORD *)((char *)this + 824) = v28;
  *(_OWORD *)((char *)this + 792) = v26;
  *((void *)this + 106) = 0;
  *((void *)this + 108) = 0;
  *((void *)this + 107) = 0;
  std::vector<std::array<int,3ul>>::__init_with_size[abi:ne180100]<std::array<int,3ul>*,std::array<int,3ul>*>((void *)this + 106, *((const void **)a2 + 106), *((void *)a2 + 107), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 107) - *((void *)a2 + 106)) >> 2));
  long long v29 = *(_OWORD *)((char *)a2 + 872);
  long long v30 = *(_OWORD *)((char *)a2 + 888);
  *((void *)this + 113) = *((void *)a2 + 113);
  *(_OWORD *)((char *)this + 888) = v30;
  *(_OWORD *)((char *)this + 872) = v29;
  std::unordered_map<unsigned char,unsigned char>::unordered_map((uint64_t)this + 912, (uint64_t)a2 + 912);
  std::unordered_map<unsigned short,unsigned int>::unordered_map((uint64_t)this + 952, (uint64_t)a2 + 952);
  *((_DWORD *)this + 248) = *((_DWORD *)a2 + 248);
  *((void *)this + 12std::__function::__value_func<BOOL ()(mimosa::Metadata const&)>::~__value_func[abi:ne180100]((void *)this + 5) = 0;
  *((void *)this + 127) = 0;
  *((void *)this + 126) = 0;
  std::vector<std::array<unsigned short,9ul>>::__init_with_size[abi:ne180100]<std::array<unsigned short,9ul>*,std::array<unsigned short,9ul>*>((void *)this + 125, *((const void **)a2 + 125), *((void *)a2 + 126), 0x8E38E38E38E38E39 * ((uint64_t)(*((void *)a2 + 126) - *((void *)a2 + 125)) >> 1));
  long long v31 = *((_OWORD *)a2 + 64);
  long long v32 = *((_OWORD *)a2 + 65);
  *((void *)this + 132) = *((void *)a2 + 132);
  *((_OWORD *)this + 6std::__function::__value_func<BOOL ()(mimosa::Metadata const&)>::~__value_func[abi:ne180100]((void *)this + 5) = v32;
  *((_OWORD *)this + 64) = v31;
  std::unordered_map<unsigned char,unsigned char>::unordered_map((uint64_t)this + 1064, (uint64_t)a2 + 1064);
  std::unordered_map<unsigned short,unsigned int>::unordered_map((uint64_t)this + 1104, (uint64_t)a2 + 1104);
  *((_DWORD *)this + 286) = *((_DWORD *)a2 + 286);
  long long v33 = *((_OWORD *)a2 + 72);
  long long v34 = *((_OWORD *)a2 + 73);
  *((_OWORD *)this + 74) = *((_OWORD *)a2 + 74);
  *((_OWORD *)this + 73) = v34;
  *((_OWORD *)this + 72) = v33;
  return this;
}

void sub_22278FE48(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<unsigned short,unsigned int>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,unsigned int>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,unsigned int>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,unsigned int>>>::~__hash_table(v6);
  long long v8 = *v5;
  if (*v5)
  {
    v1[126] = v8;
    operator delete(v8);
  }
  mimosa::v2::WavelengthV2SubpacketState::~WavelengthV2SubpacketState(v4);
  mimosa::v2::OpticalDecoderV2SubpacketState::~OpticalDecoderV2SubpacketState((mimosa::v2::OpticalDecoderV2SubpacketState *)(v1 + 80));
  mimosa::v2::OpticalDecoderV1SubpacketState::~OpticalDecoderV1SubpacketState((mimosa::v2::OpticalDecoderV1SubpacketState *)(v1 + 68));
  mimosa::v2::AccelSubpacketState::~AccelSubpacketState(v3);
  mimosa::v2::OpticalSamplesV2SubpacketState::~OpticalSamplesV2SubpacketState((mimosa::v2::OpticalSamplesV2SubpacketState *)(v2 - 40));
  mimosa::v2::OpticalSamplesV1SubpacketState::~OpticalSamplesV1SubpacketState((mimosa::v2::OpticalSamplesV1SubpacketState *)(v1 + 5));
  _Unwind_Resume(a1);
}

void sub_22278FEDC(uint64_t a1, ...)
{
  va_start(va, a1);
  std::vector<std::vector<unsigned short>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  JUMPOUT(0x22278FEB4);
}

void sub_22278FEF0()
{
}

void sub_22278FEF8(uint64_t a1, ...)
{
  va_start(va, a1);
  std::vector<std::vector<unsigned short>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  JUMPOUT(0x22278FEBCLL);
}

void sub_22278FF0C()
{
}

void sub_22278FF14(uint64_t a1, ...)
{
  va_start(va, a1);
  uint64_t v3 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 352) = v3;
    operator delete(v3);
  }
  std::vector<std::vector<unsigned short>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  JUMPOUT(0x22278FEC4);
}

void sub_22278FF40()
{
}

void sub_22278FF48(uint64_t a1, ...)
{
  va_start(va, a1);
  std::__hash_table<std::__hash_value_type<unsigned short,unsigned int>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,unsigned int>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,unsigned int>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,unsigned int>>>::~__hash_table(v1);
  std::vector<std::vector<unsigned short>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  JUMPOUT(0x22278FECCLL);
}

void sub_22278FF6C()
{
}

void sub_22278FF74()
{
  std::__hash_table<std::__hash_value_type<unsigned short,unsigned int>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,unsigned int>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,unsigned int>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,unsigned int>>>::~__hash_table(v0);
  JUMPOUT(0x22278FED4);
}

void mimosa::v2::WavelengthV2SubpacketState::~WavelengthV2SubpacketState(mimosa::v2::WavelengthV2SubpacketState *this)
{
  std::__hash_table<std::__hash_value_type<unsigned short,unsigned int>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,unsigned int>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,unsigned int>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,unsigned int>>>::~__hash_table((uint64_t)this + 104);
  std::__hash_table<std::__hash_value_type<unsigned short,unsigned int>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,unsigned int>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,unsigned int>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,unsigned int>>>::~__hash_table((uint64_t)this + 64);
  uint64_t v2 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = v2;
    operator delete(v2);
  }
}

void mimosa::v2::OpticalDecoderV2SubpacketState::~OpticalDecoderV2SubpacketState(mimosa::v2::OpticalDecoderV2SubpacketState *this)
{
  uint64_t v2 = (void *)*((void *)this + 10);
  if (v2)
  {
    *((void *)this + 1std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void **)((char *)this + 40);
  std::vector<std::vector<unsigned short>>::__destroy_vector::operator()[abi:ne180100](&v3);
}

uint64_t std::unordered_map<unsigned short,mimosa::OpticalSampleV1>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>>>::__rehash<true>(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(unsigned __int16 **)(a2 + 16); i; uint64_t i = *(unsigned __int16 **)i)
    std::__hash_table<std::__hash_value_type<unsigned short,mimosa::OpticalSampleV1>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,mimosa::OpticalSampleV1>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,mimosa::OpticalSampleV1>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,mimosa::OpticalSampleV1>>>::__emplace_unique_key_args<unsigned short,std::pair<unsigned short const,mimosa::OpticalSampleV1> const&>(a1, i + 8, (uint64_t)(i + 8));
  return a1;
}

void sub_222790074(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<unsigned short,unsigned int>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,unsigned int>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,unsigned int>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,unsigned int>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<unsigned short,mimosa::OpticalSampleV1>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,mimosa::OpticalSampleV1>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,mimosa::OpticalSampleV1>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,mimosa::OpticalSampleV1>>>::__emplace_unique_key_args<unsigned short,std::pair<unsigned short const,mimosa::OpticalSampleV1> const&>(uint64_t a1, unsigned __int16 *a2, uint64_t a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    long long v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      uint64_t v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (*((unsigned __int16 *)v10 + 8) == v6) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  uint64_t v10 = operator new(0x38uLL);
  void *v10 = 0;
  v10[1] = v6;
  long long v12 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v10 + std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = *(_OWORD *)a3;
  *((_OWORD *)v10 + 2) = v12;
  v10[6] = *(void *)(a3 + 32);
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    BOOL v15 = 1;
    if (v7 >= 3) {
      BOOL v15 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v7);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>>>::__rehash<true>(a1, v18);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v19 = *(void *)a1;
  long long v20 = *(void **)(*(void *)a1 + 8 * v3);
  if (v20)
  {
    void *v10 = *v20;
LABEL_38:
    void *v20 = v10;
    goto LABEL_39;
  }
  void *v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  *(void *)(v19 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    unint64_t v21 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v21 >= v7) {
        v21 %= v7;
      }
    }
    else
    {
      v21 &= v7 - 1;
    }
    long long v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v10;
}

void sub_2227902A0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::vector<std::vector<unsigned short>>::__init_with_size[abi:ne180100]<std::vector<unsigned short>*,std::vector<unsigned short>*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    std::vector<std::vector<unsigned short>>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<unsigned short>>,std::vector<unsigned short>*,std::vector<unsigned short>*,std::vector<unsigned short>*>((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_22279031C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::vector<unsigned short>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<std::vector<unsigned short>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::vector<mimosa::OpticalSampleV1>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<health_algorithms::PPGProcessor::AccelOutputSignal>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<unsigned short>>,std::vector<unsigned short>*,std::vector<unsigned short>*,std::vector<unsigned short>*>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  unint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      void *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short *,unsigned short *>(v4, *(const void **)v6, *(void *)(v6 + 8), (uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 1);
      uint64_t v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned short>>,std::vector<unsigned short>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_222790430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned short>>,std::vector<unsigned short>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned short>>,std::vector<unsigned short>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned short>>,std::vector<unsigned short>*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  if (v1 != v2)
  {
    uint64_t v3 = **(void **)(a1 + 16);
    do
    {
      long long v5 = *(void **)(v3 - 24);
      v3 -= 24;
      uint64_t v4 = v5;
      if (v5)
      {
        *(void *)(v1 - 16) = v4;
        operator delete(v4);
      }
      uint64_t v1 = v3;
    }
    while (v3 != v2);
  }
}

uint64_t std::unordered_map<unsigned short,mimosa::OpticalSampleV2>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>>>::__rehash<true>(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(unsigned __int16 **)(a2 + 16); i; uint64_t i = *(unsigned __int16 **)i)
    std::__hash_table<std::__hash_value_type<unsigned short,mimosa::OpticalSampleV2>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,mimosa::OpticalSampleV2>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,mimosa::OpticalSampleV2>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,mimosa::OpticalSampleV2>>>::__emplace_unique_key_args<unsigned short,std::pair<unsigned short const,mimosa::OpticalSampleV2> const&>(a1, i + 8, (uint64_t)(i + 8));
  return a1;
}

void sub_22279052C(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<unsigned short,unsigned int>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,unsigned int>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,unsigned int>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,unsigned int>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<unsigned short,mimosa::OpticalSampleV2>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,mimosa::OpticalSampleV2>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,mimosa::OpticalSampleV2>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,mimosa::OpticalSampleV2>>>::__emplace_unique_key_args<unsigned short,std::pair<unsigned short const,mimosa::OpticalSampleV2> const&>(uint64_t a1, unsigned __int16 *a2, uint64_t a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    char v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      uint64_t v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (*((unsigned __int16 *)v10 + 8) == v6) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  uint64_t v10 = operator new(0x38uLL);
  void *v10 = 0;
  v10[1] = v6;
  long long v12 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v10 + std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = *(_OWORD *)a3;
  *((_OWORD *)v10 + 2) = v12;
  *((_DWORD *)v10 + 12) = *(_DWORD *)(a3 + 32);
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    BOOL v15 = 1;
    if (v7 >= 3) {
      BOOL v15 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v7);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>>>::__rehash<true>(a1, v18);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v19 = *(void *)a1;
  long long v20 = *(void **)(*(void *)a1 + 8 * v3);
  if (v20)
  {
    void *v10 = *v20;
LABEL_38:
    void *v20 = v10;
    goto LABEL_39;
  }
  void *v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  *(void *)(v19 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    unint64_t v21 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v21 >= v7) {
        v21 %= v7;
      }
    }
    else
    {
      v21 &= v7 - 1;
    }
    long long v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v10;
}

void sub_222790758(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::vector<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>>::__init_with_size[abi:ne180100]<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>*,std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    std::vector<std::vector<unsigned short>>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>>,std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>*,std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>*,std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>*>((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_2227907D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::vector<unsigned short>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>>,std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>*,std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>*,std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>*>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  unint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      void *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>::__init_with_size[abi:ne180100]<mimosa::v2::AccelSubpacketState::SampleHeader*,mimosa::v2::AccelSubpacketState::SampleHeader*>(v4, *(const void **)v6, *(void *)(v6 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 1));
      uint64_t v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>>,std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_2227908A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>>,std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned short>>,std::vector<unsigned short>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void *std::vector<std::array<int,3ul>>::__init_with_size[abi:ne180100]<std::array<int,3ul>*,std::array<int,3ul>*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<std::array<int,3ul>>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_22279094C(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<std::array<int,3ul>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x1555555555555556) {
    std::vector<mimosa::OpticalSampleV1>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::array<unsigned short,6ul>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[12 * v4];
  return result;
}

void *std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>::__init_with_size[abi:ne180100]<mimosa::v2::AccelSubpacketState::SampleHeader*,mimosa::v2::AccelSubpacketState::SampleHeader*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_222790A1C(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::unordered_map<unsigned char,unsigned char>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>>>::__rehash<true>(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(unsigned __int8 **)(a2 + 16); i; uint64_t i = *(unsigned __int8 **)i)
    std::__hash_table<std::__hash_value_type<unsigned char,unsigned char>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,unsigned char>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,unsigned char>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,unsigned char>>>::__emplace_unique_key_args<unsigned char,std::pair<unsigned char const,unsigned char> const&>(a1, i + 16, (_WORD *)i + 8);
  return a1;
}

void sub_222790A98(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<unsigned short,unsigned int>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,unsigned int>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,unsigned int>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,unsigned int>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<unsigned char,unsigned char>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,unsigned char>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,unsigned char>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,unsigned char>>>::__emplace_unique_key_args<unsigned char,std::pair<unsigned char const,unsigned char> const&>(uint64_t a1, unsigned __int8 *a2, _WORD *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    char v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      uint64_t v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (*((unsigned __int8 *)v10 + 16) == v6) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  uint64_t v10 = operator new(0x18uLL);
  void *v10 = 0;
  v10[1] = v6;
  *((_WORD *)v10 + 8) = *a3;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    std::__hash_table<std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>>>::__rehash<true>(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v18 = *(void *)a1;
  uint64_t v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    void *v10 = *v19;
LABEL_38:
    void *v19 = v10;
    goto LABEL_39;
  }
  void *v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    unint64_t v20 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    uint64_t v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v10;
}

void sub_222790CBC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<unsigned short,unsigned int>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>>>::__rehash<true>(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(unsigned __int16 **)(a2 + 16); i; uint64_t i = *(unsigned __int16 **)i)
    std::__hash_table<std::__hash_value_type<unsigned short,unsigned int>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,unsigned int>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,unsigned int>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,unsigned int>>>::__emplace_unique_key_args<unsigned short,std::pair<unsigned short const,unsigned int> const&>(a1, i + 8, (void *)i + 2);
  return a1;
}

void sub_222790D30(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<unsigned short,unsigned int>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,unsigned int>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,unsigned int>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,unsigned int>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<unsigned short,unsigned int>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,unsigned int>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,unsigned int>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,unsigned int>>>::__emplace_unique_key_args<unsigned short,std::pair<unsigned short const,unsigned int> const&>(uint64_t a1, unsigned __int16 *a2, void *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    char v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      uint64_t v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (*((unsigned __int16 *)v10 + 8) == v6) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  uint64_t v10 = operator new(0x18uLL);
  void *v10 = 0;
  v10[1] = v6;
  void v10[2] = *a3;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    std::__hash_table<std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,health_algorithms::PPGProcessor::SignalProcessorAndFriends>>>::__rehash<true>(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v18 = *(void *)a1;
  uint64_t v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    void *v10 = *v19;
LABEL_38:
    void *v19 = v10;
    goto LABEL_39;
  }
  void *v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    unint64_t v20 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    uint64_t v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v10;
}

void sub_222790F54(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::vector<std::array<unsigned short,9ul>>::__init_with_size[abi:ne180100]<std::array<unsigned short,9ul>*,std::array<unsigned short,9ul>*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    uint64_t result = std::vector<std::array<unsigned short,9ul>>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_222790FC8(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<std::array<unsigned short,9ul>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0xE38E38E38E38E39) {
    std::vector<mimosa::OpticalSampleV1>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::array<unsigned short,9ul>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[18 * v4];
  return result;
}

void std::__function::__func<mimosa::v2::Decoder::Decoder(std::function<BOOL ()(mimosa::Metadata const&)>,std::function<BOOL ()(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,double)>)::$_0,std::allocator<mimosa::v2::Decoder::Decoder(std::function<BOOL ()(mimosa::Metadata const&)>,std::function<BOOL ()(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,double)>)::$_0>,BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__func()
{
}

void *std::__function::__func<mimosa::v2::Decoder::Decoder(std::function<BOOL ()(mimosa::Metadata const&)>,std::function<BOOL ()(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,double)>)::$_0,std::allocator<mimosa::v2::Decoder::Decoder(std::function<BOOL ()(mimosa::Metadata const&)>,std::function<BOOL ()(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,double)>)::$_0>,BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26D4E44D0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<mimosa::v2::Decoder::Decoder(std::function<BOOL ()(mimosa::Metadata const&)>,std::function<BOOL ()(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,double)>)::$_0,std::allocator<mimosa::v2::Decoder::Decoder(std::function<BOOL ()(mimosa::Metadata const&)>,std::function<BOOL ()(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,double)>)::$_0>,BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26D4E44D0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<mimosa::v2::Decoder::Decoder(std::function<BOOL ()(mimosa::Metadata const&)>,std::function<BOOL ()(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,double)>)::$_0,std::allocator<mimosa::v2::Decoder::Decoder(std::function<BOOL ()(mimosa::Metadata const&)>,std::function<BOOL ()(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,double)>)::$_0>,BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return mimosa::v2::Decoder::handle_patch(*(void *)(a1 + 8), a2);
}

uint64_t std::__function::__func<mimosa::v2::Decoder::Decoder(std::function<BOOL ()(mimosa::Metadata const&)>,std::function<BOOL ()(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,double)>)::$_0,std::allocator<mimosa::v2::Decoder::Decoder(std::function<BOOL ()(mimosa::Metadata const&)>,std::function<BOOL ()(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,double)>)::$_0>,BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<mimosa::v2::Decoder::Decoder(std::function<BOOL ()(mimosa::Metadata const&)>,std::function<BOOL ()(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,double)>)::$_0,std::allocator<mimosa::v2::Decoder::Decoder(std::function<BOOL ()(mimosa::Metadata const&)>,std::function<BOOL ()(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,double)>)::$_0>,BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::target_type()
{
}

void std::__function::__func<mimosa::v2::Decoder::Decoder(mimosa::v2::Decoder&&)::$_0,std::allocator<mimosa::v2::Decoder&&>,BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,std::variant::PatchV2,std::variant::PatchV3,std::variant::PatchV4,std::variant::PatchV5,std::variant::PatchV6,std::variant::PatchV7> const&)>::~__func()
{
}

void *std::__function::__func<mimosa::v2::Decoder::Decoder(mimosa::v2::Decoder&&)::$_0,std::allocator<mimosa::v2::Decoder&&>,BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,std::variant::PatchV2,std::variant::PatchV3,std::variant::PatchV4,std::variant::PatchV5,std::variant::PatchV6,std::variant::PatchV7> const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26D4E4560;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<mimosa::v2::Decoder::Decoder(mimosa::v2::Decoder&&)::$_0,std::allocator<mimosa::v2::Decoder&&>,BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,std::variant::PatchV2,std::variant::PatchV3,std::variant::PatchV4,std::variant::PatchV5,std::variant::PatchV6,std::variant::PatchV7> const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26D4E4560;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<mimosa::v2::Decoder::Decoder(mimosa::v2::Decoder&&)::$_0,std::allocator<mimosa::v2::Decoder&&>,BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,std::variant::PatchV2,std::variant::PatchV3,std::variant::PatchV4,std::variant::PatchV5,std::variant::PatchV6,std::variant::PatchV7> const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return mimosa::v2::Decoder::handle_patch(*(void *)(a1 + 8), a2);
}

uint64_t std::__function::__func<mimosa::v2::Decoder::Decoder(mimosa::v2::Decoder&&)::$_0,std::allocator<mimosa::v2::Decoder&&>,BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,std::variant::PatchV2,std::variant::PatchV3,std::variant::PatchV4,std::variant::PatchV5,std::variant::PatchV6,std::variant::PatchV7> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<mimosa::v2::Decoder::Decoder(mimosa::v2::Decoder&&)::$_0,std::allocator<mimosa::v2::Decoder&&>,BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,std::variant::PatchV2,std::variant::PatchV3,std::variant::PatchV4,std::variant::PatchV5,std::variant::PatchV6,std::variant::PatchV7> const&)>::target_type()
{
}

__n128 mimosa::v2::AlgsResponseV1SubpacketState::update@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)a3 = 0u;
  *(void *)a3 = mimosa::v2::SubpacketHeaderState::update(a1, a2);
  *(void *)(a3 + 8) = v6;
  if (*(unsigned char *)(a2 + 26)) {
    *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 24);
  }
  if (*(unsigned char *)(a2 + 29)) {
    *(unsigned char *)(a1 + 42) = *(unsigned char *)(a2 + 28);
  }
  if (*(unsigned char *)(a2 + 31)) {
    *(unsigned char *)(a1 + 43) = *(unsigned char *)(a2 + 30);
  }
  if (*(unsigned char *)(a2 + 33)) {
    *(unsigned char *)(a1 + 44) = *(unsigned char *)(a2 + 32);
  }
  if (*(unsigned char *)(a2 + 35)) {
    *(unsigned char *)(a1 + 4std::__function::__value_func<BOOL ()(mimosa::Metadata const&)>::~__value_func[abi:ne180100]((void *)this + 5) = *(unsigned char *)(a2 + 34);
  }
  if (*(unsigned char *)(a2 + 40)) {
    *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 36);
  }
  if (*(unsigned char *)(a2 + 48)) {
    *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 44);
  }
  if (*(unsigned char *)(a2 + 56)) {
    *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 52);
  }
  if (*(unsigned char *)(a2 + 64)) {
    *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  }
  if (*(unsigned char *)(a2 + 70)) {
    *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 68);
  }
  if (*(unsigned char *)(a2 + 74)) {
    *(_WORD *)(a1 + 66) = *(_WORD *)(a2 + 72);
  }
  if (*(unsigned char *)(a2 + 77))
  {
    char v7 = *(unsigned char *)(a2 + 76);
    *(unsigned char *)(a1 + 68) = v7;
  }
  else
  {
    char v7 = *(unsigned char *)(a1 + 68);
  }
  *(_WORD *)(a3 + 16) = *(_WORD *)(a1 + 40);
  *(_DWORD *)(a3 + 18) = *(_DWORD *)(a1 + 42);
  __n128 result = *(__n128 *)(a1 + 48);
  *(__n128 *)(a3 + 24) = result;
  *(_DWORD *)(a3 + 40) = *(_DWORD *)(a1 + 64);
  *(unsigned char *)(a3 + 44) = v7;
  return result;
}

uint64_t mimosa::v2::AlgsResponseV1SubpacketState::update@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(unsigned char *)(a3 + 24) = 0;
  *(unsigned char *)(a3 + 26) = 0;
  *(unsigned char *)(a3 + 40) = 0;
  *(unsigned char *)(a3 + 44) = 0;
  *(unsigned char *)(a3 + 48) = 0;
  *(unsigned char *)(a3 + 52) = 0;
  *(unsigned char *)(a3 + 56) = 0;
  *(unsigned char *)(a3 + 60) = 0;
  *(unsigned char *)(a3 + 64) = 0;
  *(unsigned char *)(a3 + 68) = 0;
  *(unsigned char *)(a3 + 70) = 0;
  *(unsigned char *)(a3 + 72) = 0;
  *(unsigned char *)(a3 + 74) = 0;
  *(_WORD *)(a3 + 76) = 0;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_WORD *)(a3 + 16) = 0;
  *(void *)(a3 + 28) = 0;
  uint64_t v6 = (_WORD *)(a3 + 28);
  *(unsigned char *)(a3 + 36) = 0;
  uint64_t result = mimosa::v2::SubpacketHeaderState::update(a1, a2, (uint64_t)&v20);
  *(_OWORD *)a3 = v20;
  *(_WORD *)(a3 + 16) = v21;
  int v8 = *(unsigned __int16 *)(a2 + 16);
  if (*(unsigned __int16 *)(a1 + 40) != v8)
  {
    *(_WORD *)(a1 + 40) = v8;
    *(_WORD *)(a3 + 24) = v8;
    *(unsigned char *)(a3 + 26) = 1;
  }
  int v9 = *(unsigned __int8 *)(a2 + 18);
  if (*(unsigned __int8 *)(a1 + 42) != v9)
  {
    *(unsigned char *)(a1 + 42) = v9;
    *uint64_t v6 = v9 | 0x100;
  }
  int v10 = *(unsigned __int8 *)(a2 + 19);
  if (*(unsigned __int8 *)(a1 + 43) != v10)
  {
    *(unsigned char *)(a1 + 43) = v10;
    *(_WORD *)(a3 + 30) = v10 | 0x100;
  }
  int v11 = *(unsigned __int8 *)(a2 + 20);
  if (*(unsigned __int8 *)(a1 + 44) != v11)
  {
    *(unsigned char *)(a1 + 44) = v11;
    *(_WORD *)(a3 + 32) = v11 | 0x100;
  }
  int v12 = *(unsigned __int8 *)(a2 + 21);
  if (*(unsigned __int8 *)(a1 + 45) != v12)
  {
    *(unsigned char *)(a1 + 4std::__function::__value_func<BOOL ()(mimosa::Metadata const&)>::~__value_func[abi:ne180100]((void *)this + 5) = v12;
    *(_WORD *)(a3 + 34) = v12 | 0x100;
  }
  int v13 = *(_DWORD *)(a2 + 24);
  if (*(_DWORD *)(a1 + 48) != v13)
  {
    *(_DWORD *)(a1 + 48) = v13;
    *(_DWORD *)(a3 + 36) = v13;
    *(unsigned char *)(a3 + 40) = 1;
  }
  int v14 = *(_DWORD *)(a2 + 28);
  if (*(_DWORD *)(a1 + 52) != v14)
  {
    *(_DWORD *)(a1 + 52) = v14;
    *(_DWORD *)(a3 + 44) = v14;
    *(unsigned char *)(a3 + 48) = 1;
  }
  int v15 = *(_DWORD *)(a2 + 32);
  if (*(_DWORD *)(a1 + 56) != v15)
  {
    *(_DWORD *)(a1 + 56) = v15;
    *(_DWORD *)(a3 + 52) = v15;
    *(unsigned char *)(a3 + 56) = 1;
  }
  int v16 = *(_DWORD *)(a2 + 36);
  if (*(_DWORD *)(a1 + 60) != v16)
  {
    *(_DWORD *)(a1 + 60) = v16;
    *(_DWORD *)(a3 + 60) = v16;
    *(unsigned char *)(a3 + 64) = 1;
  }
  int v17 = *(unsigned __int16 *)(a2 + 40);
  if (*(unsigned __int16 *)(a1 + 64) != v17)
  {
    *(_WORD *)(a1 + 64) = v17;
    *(_WORD *)(a3 + 68) = v17;
    *(unsigned char *)(a3 + 70) = 1;
  }
  int v18 = *(unsigned __int16 *)(a2 + 42);
  if (*(unsigned __int16 *)(a1 + 66) != v18)
  {
    *(_WORD *)(a1 + 66) = v18;
    *(_WORD *)(a3 + 72) = v18;
    *(unsigned char *)(a3 + 74) = 1;
  }
  int v19 = *(unsigned __int8 *)(a2 + 44);
  if (*(unsigned __int8 *)(a1 + 68) != v19)
  {
    *(unsigned char *)(a1 + 68) = v19;
    *(_WORD *)(a3 + 76) = v19 | 0x100;
  }
  return result;
}

void mimosa::v2::AccelSubpacketState::update(mimosa::v2::AccelSubpacketState *this@<X0>, const mimosa::v2::AccelSubpacketState::Patch *a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  *(unsigned char *)(a3 + 12) = 0;
  *(void *)(a3 + 16) = 0;
  uint64_t v6 = (void **)(a3 + 16);
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  *(void *)a3 = mimosa::v2::SubpacketHeaderState::update((uint64_t)this, (uint64_t)a2);
  *(void *)(a3 + 8) = v7;
  if (*((unsigned char *)a2 + 80))
  {
    int v8 = (const mimosa::v2::AccelSubpacketState::Patch *)((char *)a2 + 48);
    int v9 = *((_DWORD *)a2 + 18);
    if (v9)
    {
      if (v9 != 1) {
        std::__throw_bad_variant_access[abi:ne180100]();
      }
      unsigned int v10 = *(unsigned __int8 *)v8;
      *((unsigned char *)this + 112) = v10;
      mimosa::v2::ItemCoder<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>>::decode((void *)this + 5, v10, &v44);
      int v11 = (void *)*((void *)this + 11);
      if (v11)
      {
        *((void *)this + 12) = v11;
        operator delete(v11);
        *((void *)this + 1std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = 0;
        *((void *)this + 12) = 0;
        *((void *)this + 13) = 0;
      }
      *(_OWORD *)((char *)this + 88) = v44;
      *((void *)this + 13) = v45;
    }
    else
    {
      if ((mimosa::v2::AccelSubpacketState *)((char *)this + 88) != v8) {
        std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>::__assign_with_size[abi:ne180100]<mimosa::v2::AccelSubpacketState::SampleHeader*,mimosa::v2::AccelSubpacketState::SampleHeader*>((char *)this + 88, *((char **)a2 + 6), *((void *)a2 + 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 7) - *((void *)a2 + 6)) >> 1));
      }
      std::string __p = 0;
      uint64_t v42 = 0;
      uint64_t v43 = 0;
      std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>::__init_with_size[abi:ne180100]<mimosa::v2::AccelSubpacketState::SampleHeader*,mimosa::v2::AccelSubpacketState::SampleHeader*>(&__p, *((const void **)this + 11), *((void *)this + 12), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 12) - *((void *)this + 11)) >> 1));
      *((unsigned char *)this + 112) = mimosa::v2::ItemCoder<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>>::encode((uint64_t)this + 40, (char **)&__p);
      if (__p)
      {
        uint64_t v42 = __p;
        operator delete(__p);
      }
    }
  }
  std::vector<mimosa::AccelSample>::reserve(v6, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 12) - *((void *)this + 11)) >> 1));
  uint64_t v39 = this;
  long long v40 = a2;
  int v12 = (int *)*((void *)this + 11);
  int v13 = (int *)*((void *)this + 12);
  if (v12 != v13)
  {
    int v14 = (void *)(a3 + 32);
    int v15 = *(char **)(a3 + 24);
    do
    {
      if ((unint64_t)v15 >= *v14)
      {
        unint64_t v16 = 0xCCCCCCCCCCCCCCCDLL * ((v15 - (unsigned char *)*v6) >> 2);
        unint64_t v17 = v16 + 1;
        if (v16 + 1 > 0xCCCCCCCCCCCCCCCLL) {
          std::vector<mimosa::OpticalSampleV1>::__throw_length_error[abi:ne180100]();
        }
        if (0x999999999999999ALL * ((uint64_t)(*v14 - (void)*v6) >> 2) > v17) {
          unint64_t v17 = 0x999999999999999ALL * ((uint64_t)(*v14 - (void)*v6) >> 2);
        }
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*v14 - (void)*v6) >> 2) >= 0x666666666666666) {
          unint64_t v18 = 0xCCCCCCCCCCCCCCCLL;
        }
        else {
          unint64_t v18 = v17;
        }
        if (v18) {
          int v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<mimosa::AccelSample>>(a3 + 32, v18);
        }
        else {
          int v19 = 0;
        }
        long long v20 = &v19[20 * v16];
        *(void *)long long v20 = 0;
        *((void *)v20 + std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = 0;
        *((_DWORD *)v20 + 4) = 0;
        long long v22 = *(char **)(a3 + 16);
        __int16 v21 = *(char **)(a3 + 24);
        uint64_t v23 = v20;
        if (v21 != v22)
        {
          do
          {
            long long v24 = *(_OWORD *)(v21 - 20);
            *((_DWORD *)v23 - std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = *((_DWORD *)v21 - 1);
            *(_OWORD *)(v23 - 20) = v24;
            v23 -= 20;
            v21 -= 20;
          }
          while (v21 != v22);
          __int16 v21 = (char *)*v6;
        }
        int v15 = v20 + 20;
        *(void *)(a3 + 16) = v23;
        *(void *)(a3 + 24) = v20 + 20;
        *(void *)(a3 + 32) = &v19[20 * v18];
        if (v21) {
          operator delete(v21);
        }
      }
      else
      {
        *(void *)int v15 = 0;
        *((void *)v15 + std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = 0;
        *((_DWORD *)v15 + 4) = 0;
        v15 += 20;
      }
      *(void *)(a3 + 24) = v15;
      *(v15 - 4) = *((unsigned char *)v12 + 4);
      int v25 = *v12;
      int v12 = (int *)((char *)v12 + 6);
      *((_DWORD *)v15 - 2) = v25;
    }
    while (v12 != v13);
  }
  std::vector<std::array<int,3ul>>::resize((uint64_t)v39 + 64, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v40 + 4) - *((void *)v40 + 3)) >> 3));
  uint64_t v26 = *(void *)(a3 + 16);
  uint64_t v27 = *(void *)(a3 + 24);
  uint64_t v28 = v27 - v26;
  if (v27 != v26)
  {
    uint64_t v29 = 0;
    unsigned int v30 = 0;
    unint64_t v31 = 0xCCCCCCCCCCCCCCCDLL * (v28 >> 2);
    uint64_t v32 = *((void *)v39 + 11);
    uint64_t v33 = *((void *)v40 + 3);
    uint64_t v34 = *(void *)(a3 + 16);
    do
    {
      if (*(unsigned char *)(v32 + 6 * v29 + 5))
      {
        uint64_t v35 = v26 + 20 * v29;
        *(_DWORD *)(v35 + 8) = 0;
        *(void *)uint64_t v35 = 0;
      }
      else
      {
        uint64_t v36 = 0;
        uint64_t v37 = *((void *)v39 + 8) + 12 * v30;
        do
        {
          int v38 = *(_DWORD *)(v37 + 4 * v36) + *(void *)(v33 + 24 * v30 + 8 * v36);
          *(_DWORD *)(v37 + 4 * v36) = v38;
          *(_DWORD *)(v34 + 4 * v36++) = v38;
        }
        while (v36 != 3);
        ++v30;
      }
      ++v29;
      v34 += 20;
    }
    while (v31 > v29);
  }
}

void sub_22279188C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  unint64_t v16 = *v14;
  if (*v14)
  {
    *(void *)(v13 + 24) = v16;
    operator delete(v16);
  }
  _Unwind_Resume(exception_object);
}

void *mimosa::v2::ItemCoder<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>>::decode@<X0>(void *a1@<X0>, unsigned int a2@<W1>, void *a3@<X8>)
{
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 3) <= a2) {
    std::vector<std::array<unsigned short,6ul>>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v3 = *a1 + 24 * a2;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v4 = *(const void **)v3;
  uint64_t v5 = *(void *)(v3 + 8);
  unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *(void *)v3) >> 1);
  return std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>::__init_with_size[abi:ne180100]<mimosa::v2::AccelSubpacketState::SampleHeader*,mimosa::v2::AccelSubpacketState::SampleHeader*>(a3, v4, v5, v6);
}

uint64_t mimosa::v2::ItemCoder<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>>::encode(uint64_t a1, char **a2)
{
  uint64_t v4 = std::__find_impl[abi:ne180100]<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader> const*,std::vector<mimosa::v2::AccelSubpacketState::SampleHeader> const*,std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>,std::__identity>(*(unsigned __int16 ***)a1, *(unsigned __int16 ***)(a1 + 8), a2);
  uint64_t v5 = (uint64_t)v4 - *(void *)a1;
  if (v4 == *(unsigned __int16 ***)(a1 + 8))
  {
    int v8 = v4;
    if (v5 == 6144)
    {
      std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,std::vector<unsigned short> *,std::vector<unsigned short> *,std::vector<unsigned short> *,0>((__n128 *)(*(void *)a1 + 24), (__n128 *)v4, *(void *)a1);
      int v8 = v9;
      unsigned int v10 = *(unsigned __int16 ***)(a1 + 8);
      if (v10 != v9)
      {
        int v11 = *(unsigned __int16 ***)(a1 + 8);
        do
        {
          uint64_t v13 = *(v11 - 3);
          v11 -= 3;
          int v12 = v13;
          if (v13)
          {
            *(v10 - 2) = v12;
            operator delete(v12);
          }
          unsigned int v10 = v11;
        }
        while (v11 != v8);
      }
      *(void *)(a1 + 8) = v8;
    }
    if ((unint64_t)v8 >= *(void *)(a1 + 16))
    {
      uint64_t v14 = std::vector<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>>::__push_back_slow_path<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader> const&>((uint64_t *)a1, (uint64_t)a2);
    }
    else
    {
      std::vector<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>>::__construct_one_at_end[abi:ne180100]<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader> const&>(a1, (uint64_t)a2);
      uint64_t v14 = (uint64_t)(v8 + 3);
    }
    *(void *)(a1 + 8) = v14;
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((v14 - *(void *)a1) >> 3) - 1;
    int v6 = 1;
  }
  else
  {
    int v6 = 0;
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (v5 >> 3);
  }
  return v7 | (v6 << 8);
}

void std::vector<std::array<int,3ul>>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 2);
  BOOL v3 = a2 >= v2;
  unint64_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<std::array<int,3ul>>::__append((char **)a1, v4);
  }
  else if (!v3)
  {
    *(void *)(a1 + 8) = *(void *)a1 + 12 * a2;
  }
}

void mimosa::v2::AccelSubpacketState::update(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = a2;
  *(void *)(a3 + 24) = 0;
  int v6 = (uint64_t *)(a3 + 24);
  *(unsigned char *)(a3 + 48) = 0;
  uint64_t v53 = a3 + 48;
  *(unsigned char *)(a3 + 80) = 0;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_WORD *)(a3 + 16) = 0;
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 40) = 0;
  mimosa::v2::SubpacketHeaderState::update(a1, a2, (uint64_t)&v59);
  *(_OWORD *)a3 = v59;
  *(_WORD *)(a3 + 16) = v60;
  uint64_t v7 = *(void *)(v3 + 16);
  uint64_t v8 = *(void *)(v3 + 24);
  uint64_t v9 = *(void *)(a1 + 88);
  __int16 v55 = (char **)(a1 + 88);
  unsigned int v10 = *(unsigned __int16 **)(a1 + 96);
  unint64_t v11 = 0xCCCCCCCCCCCCCCCDLL * ((v8 - v7) >> 2);
  if (v11 != 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v10 - v9) >> 1)) {
    goto LABEL_27;
  }
  if (v7 != v8 && (unsigned __int16 *)v9 != v10)
  {
    int v12 = *(unsigned __int16 **)(a1 + 88);
    while (1)
    {
      if (*(_WORD *)(v7 + 12))
      {
        uint64_t v13 = 0;
        do
        {
          int v14 = *(_DWORD *)(v7 + v13);
          if (v14) {
            BOOL v15 = 1;
          }
          else {
            BOOL v15 = v13 == 8;
          }
          v13 += 4;
        }
        while (!v15);
        int v16 = v14 == 0;
      }
      else
      {
        int v16 = 0;
      }
      BOOL v17 = *(unsigned __int8 *)(v7 + 16) == *((unsigned __int8 *)v12 + 4) && *(unsigned __int16 *)(v7 + 12) == *v12;
      if (!v17 || *(unsigned __int16 *)(v7 + 14) != v12[1] || v16 != *((unsigned __int8 *)v12 + 5)) {
        goto LABEL_27;
      }
      v7 += 20;
      v12 += 3;
      if (v7 == v8 || v12 == v10) {
        goto LABEL_25;
      }
    }
  }
  int v12 = *(unsigned __int16 **)(a1 + 88);
LABEL_25:
  if (v7 != v8 || v12 != v10)
  {
LABEL_27:
    *(void *)(a1 + 96) = v9;
    std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>::reserve(v55, v11);
    uint64_t v54 = v3;
    uint64_t v18 = *(void *)(v3 + 16);
    uint64_t v19 = *(void *)(v3 + 24);
    if (v18 == v19)
    {
      uint64_t v26 = *(void *)(a1 + 96);
    }
    else
    {
      do
      {
        __int16 v20 = *(_WORD *)(v18 + 12);
        if (v20) {
          BOOL v21 = (*(_DWORD *)(v18 + 4) | *(_DWORD *)v18 | *(_DWORD *)(v18 + 8)) == 0;
        }
        else {
          BOOL v21 = 0;
        }
        __int16 v22 = *(_WORD *)(v18 + 14);
        char v23 = *(unsigned char *)(v18 + 16);
        unint64_t v25 = *(void *)(a1 + 96);
        unint64_t v24 = *(void *)(a1 + 104);
        if (v25 >= v24)
        {
          unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v25 - (void)*v55) >> 1);
          unint64_t v28 = v27 + 1;
          if (v27 + 1 > 0x2AAAAAAAAAAAAAAALL) {
            std::vector<mimosa::OpticalSampleV1>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v29 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v24 - (void)*v55) >> 1);
          if (2 * v29 > v28) {
            unint64_t v28 = 2 * v29;
          }
          if (v29 >= 0x1555555555555555) {
            unint64_t v30 = 0x2AAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v30 = v28;
          }
          if (v30) {
            unint64_t v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<mimosa::v2::AccelSubpacketState::SampleHeader>>(a1 + 104, v30);
          }
          else {
            unint64_t v31 = 0;
          }
          uint64_t v32 = &v31[6 * v27];
          *(_WORD *)uint64_t v32 = v20;
          *((_WORD *)v32 + std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = v22;
          v32[4] = v23;
          v32[5] = v21;
          uint64_t v34 = *(char **)(a1 + 88);
          uint64_t v33 = *(char **)(a1 + 96);
          uint64_t v35 = v32;
          if (v33 != v34)
          {
            do
            {
              int v36 = *(_DWORD *)(v33 - 6);
              v33 -= 6;
              __int16 v37 = *((_WORD *)v33 + 2);
              *(_DWORD *)(v35 - 6) = v36;
              v35 -= 6;
              *((_WORD *)v35 + 2) = v37;
            }
            while (v33 != v34);
            uint64_t v33 = *v55;
          }
          uint64_t v26 = (uint64_t)(v32 + 6);
          *(void *)(a1 + 88) = v35;
          *(void *)(a1 + 96) = v32 + 6;
          *(void *)(a1 + 104) = &v31[6 * v30];
          if (v33) {
            operator delete(v33);
          }
        }
        else
        {
          *(_WORD *)unint64_t v25 = v20;
          *(_WORD *)(v25 + 2) = v22;
          *(unsigned char *)(v25 + 4) = v23;
          uint64_t v26 = v25 + 6;
          *(unsigned char *)(v25 + std::__function::__value_func<BOOL ()(mimosa::Metadata const&)>::~__value_func[abi:ne180100]((void *)this + 5) = v21;
        }
        *(void *)(a1 + 96) = v26;
        v18 += 20;
      }
      while (v18 != v19);
    }
    LOWORD(v5std::__function::__value_func<BOOL ()(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,double)>::~__value_func[abi:ne180100]((void *)this + 9) = 0;
    __int16 v57 = 0;
    uint64_t v58 = 0;
    std::string __p = 0;
    std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>::__init_with_size[abi:ne180100]<mimosa::v2::AccelSubpacketState::SampleHeader*,mimosa::v2::AccelSubpacketState::SampleHeader*>(&__p, *v55, v26, 0xAAAAAAAAAAAAAAABLL * ((v26 - (uint64_t)*v55) >> 1));
    uint64_t v3 = v54;
    unsigned __int16 v38 = mimosa::v2::ItemCoder<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>>::encode(a1 + 40, (char **)&__p);
    LOWORD(v5std::__function::__value_func<BOOL ()(std::variant<mimosa::PacketV1,mimosa::PacketV2,mimosa::PacketV3,mimosa::PacketV4,mimosa::PacketV5,mimosa::PacketV6,mimosa::PacketV7> const&,double)>::~__value_func[abi:ne180100]((void *)this + 9) = v38;
    if (__p)
    {
      __int16 v57 = __p;
      operator delete(__p);
    }
    if (v38 >= 0x100u)
    {
      std::optional<std::variant<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>,unsigned char>>::operator=[abi:ne180100]<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>&,void>(v53, (uint64_t)v55);
    }
    else
    {
      if (*(unsigned __int8 *)(a1 + 112) == v38)
      {
LABEL_58:
        uint64_t v9 = *(void *)(a1 + 88);
        unsigned int v10 = *(unsigned __int16 **)(a1 + 96);
        goto LABEL_59;
      }
      if (*(unsigned char *)(a3 + 80))
      {
        std::variant<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>,unsigned char>::operator=[abi:ne180100]<unsigned char const&,0,unsigned char,1ul,0>(v53, &v59);
        LOBYTE(v38) = v59;
      }
      else
      {
        *(unsigned char *)(a3 + 48) = v38;
        *(_DWORD *)(a3 + 72) = 1;
        *(unsigned char *)(a3 + 80) = 1;
      }
    }
    *(unsigned char *)(a1 + 112) = v38;
    goto LABEL_58;
  }
LABEL_59:
  if ((unsigned __int16 *)v9 == v10)
  {
    unint64_t v40 = 0;
  }
  else
  {
    unsigned __int8 v39 = 0;
    do
    {
      v39 += *(unsigned char *)(v9 + 5) ^ 1;
      v9 += 6;
    }
    while ((unsigned __int16 *)v9 != v10);
    unint64_t v40 = v39;
  }
  std::vector<mimosa::v2::OpticalSamplesV1SubpacketState::Patch::ADCDelta>::resize((uint64_t)v6, v40);
  long long v41 = (void *)(a1 + 64);
  std::vector<std::array<int,3ul>>::resize((uint64_t)v41, v40);
  uint64_t v42 = *(void *)(v3 + 16);
  uint64_t v43 = *(void *)(v3 + 24);
  uint64_t v44 = v43 - v42;
  if (v43 != v42)
  {
    uint64_t v45 = 0;
    unsigned int v46 = 0;
    unint64_t v47 = 0xCCCCCCCCCCCCCCCDLL * (v44 >> 2);
    unsigned __int16 v48 = *v55;
    uint64_t v49 = *v6;
    do
    {
      if (!v48[6 * v45 + 5])
      {
        uint64_t v50 = 0;
        uint64_t v51 = *v41 + 12 * v46;
        do
        {
          uint64_t v52 = *(int *)(v42 + 4 * v50);
          *(void *)(v49 + 24 * v46 + 8 * v50) = v52 - *(int *)(v51 + 4 * v50);
          *(_DWORD *)(v51 + 4 * v50++) = v52;
        }
        while (v50 != 3);
        ++v46;
      }
      ++v45;
      v42 += 20;
    }
    while (v47 > v45);
  }
}

void sub_222791F18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, mimosa::v2::AccelSubpacketState::Patch *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  mimosa::v2::AccelSubpacketState::Patch::~Patch(a12);
  _Unwind_Resume(a1);
}

void std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>::reserve(char **a1, unint64_t a2)
{
  unint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 1) < a2)
  {
    if (a2 >= 0x2AAAAAAAAAAAAAABLL) {
      std::vector<mimosa::OpticalSampleV1>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = (a1[1] - *a1) / 6;
    int v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<mimosa::v2::AccelSubpacketState::SampleHeader>>(v3, a2);
    uint64_t v7 = &v6[6 * v5];
    uint64_t v9 = &v6[6 * v8];
    unint64_t v11 = *a1;
    unsigned int v10 = a1[1];
    int v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        int v13 = *(_DWORD *)(v10 - 6);
        v10 -= 6;
        __int16 v14 = *((_WORD *)v10 + 2);
        *(_DWORD *)(v12 - 6) = v13;
        v12 -= 6;
        *((_WORD *)v12 + 2) = v14;
      }
      while (v10 != v11);
      unsigned int v10 = *a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

uint64_t std::optional<std::variant<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>,unsigned char>>::operator=[abi:ne180100]<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>&,void>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 32))
  {
    std::__variant_detail::__assignment<std::__variant_detail::__traits<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>,unsigned char>>::__assign_alt[abi:ne180100]<0ul,std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>,std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>&>(a1, (char *)a1, a2);
  }
  else
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>::__init_with_size[abi:ne180100]<mimosa::v2::AccelSubpacketState::SampleHeader*,mimosa::v2::AccelSubpacketState::SampleHeader*>((void *)a1, *(const void **)a2, *(void *)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 1));
    *(_DWORD *)(a1 + 24) = 0;
    *(unsigned char *)(a1 + 32) = 1;
  }
  return a1;
}

void mimosa::v2::AccelSubpacketState::Patch::~Patch(mimosa::v2::AccelSubpacketState::Patch *this)
{
  if (*((unsigned char *)this + 80)) {
    std::__variant_detail::__dtor<std::__variant_detail::__traits<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>,unsigned char>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 48);
  }
  unint64_t v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
}

char *std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>::__assign_with_size[abi:ne180100]<mimosa::v2::AccelSubpacketState::SampleHeader*,mimosa::v2::AccelSubpacketState::SampleHeader*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  uint64_t v9 = *(char **)result;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(void *)result) >> 1) < a4)
  {
    if (v9)
    {
      *((void *)result + std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 > 0x2AAAAAAAAAAAAAAALL) {
      std::vector<mimosa::OpticalSampleV1>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 1);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= a4) {
      uint64_t v11 = a4;
    }
    if (v10 >= 0x1555555555555555) {
      unint64_t v12 = 0x2AAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v11;
    }
    uint64_t result = std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>::__vallocate[abi:ne180100](v7, v12);
    __int16 v14 = (char *)v7[1];
    int v13 = (void **)(v7 + 1);
    uint64_t v9 = v14;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      uint64_t v18 = v9;
      uint64_t v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  int v13 = (void **)(result + 8);
  BOOL v15 = (unsigned char *)*((void *)result + 1);
  if (0xAAAAAAAAAAAAAAABLL * ((v15 - v9) >> 1) >= a4) {
    goto LABEL_16;
  }
  int v16 = &__src[2 * ((v15 - v9) >> 1)];
  if (v15 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v15 - v9);
    uint64_t v9 = (char *)*v13;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    uint64_t v18 = v9;
    uint64_t v19 = v16;
LABEL_18:
    uint64_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *int v13 = &v9[v17];
  return result;
}

void std::vector<std::array<int,3ul>>::__append(char **a1, unint64_t a2)
{
  int v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 2) >= a2)
  {
    if (a2)
    {
      size_t v13 = 12 * ((12 * a2 - 12) / 0xC) + 12;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 2);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x1555555555555555) {
      std::vector<mimosa::OpticalSampleV1>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 2);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v11 = 0x1555555555555555;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11) {
      unint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::array<unsigned short,6ul>>>(v4, v11);
    }
    else {
      unint64_t v12 = 0;
    }
    __int16 v14 = &v12[12 * v8];
    BOOL v15 = &v12[12 * v11];
    size_t v16 = 12 * ((12 * a2 - 12) / 0xC) + 12;
    bzero(v14, v16);
    size_t v17 = &v14[v16];
    uint64_t v19 = *a1;
    uint64_t v18 = a1[1];
    if (v18 != *a1)
    {
      do
      {
        uint64_t v20 = *(void *)(v18 - 12);
        v18 -= 12;
        int v21 = *((_DWORD *)v18 + 2);
        *(void *)(v14 - 12) = v20;
        v14 -= 12;
        *((_DWORD *)v14 + 2) = v21;
      }
      while (v18 != v19);
      uint64_t v18 = *a1;
    }
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v15;
    if (v18)
    {
      operator delete(v18);
    }
  }
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>,unsigned char>>::__assign_alt[abi:ne180100]<0ul,std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>,std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>&>(uint64_t a1, char *a2, uint64_t a3)
{
  if (*(_DWORD *)(a1 + 24))
  {
    v5[0] = a1;
    v5[1] = a3;
    std::__variant_detail::__assignment<std::__variant_detail::__traits<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>,unsigned char>>::__assign_alt[abi:ne180100]<0ul,std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>,std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>&>(std::__variant_detail::__alt<0ul,std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>> &,std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>&)::{unnamed type#1}::operator()[abi:ne180100](v5);
  }
  else if (a2 != (char *)a3)
  {
    uint64_t v4 = *(char **)a3;
    uint64_t v3 = *(void *)(a3 + 8);
    std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>::__assign_with_size[abi:ne180100]<mimosa::v2::AccelSubpacketState::SampleHeader*,mimosa::v2::AccelSubpacketState::SampleHeader*>(a2, v4, v3, 0xAAAAAAAAAAAAAAABLL * ((v3 - (uint64_t)v4) >> 1));
  }
}

void std::__variant_detail::__assignment<std::__variant_detail::__traits<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>,unsigned char>>::__assign_alt[abi:ne180100]<0ul,std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>,std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>&>(std::__variant_detail::__alt<0ul,std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>> &,std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>&)::{unnamed type#1}::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v1 = a1[1];
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  std::string __p = 0;
  std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>::__init_with_size[abi:ne180100]<mimosa::v2::AccelSubpacketState::SampleHeader*,mimosa::v2::AccelSubpacketState::SampleHeader*>(&__p, *(const void **)v1, *(void *)(v1 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v1 + 8) - *(void *)v1) >> 1));
  std::__variant_detail::__assignment<std::__variant_detail::__traits<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>,unsigned char>>::__emplace[abi:ne180100]<0ul,std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>>(v2, (uint64_t)&__p);
  if (__p)
  {
    uint64_t v4 = __p;
    operator delete(__p);
  }
}

void sub_22279248C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int16 **std::__find_impl[abi:ne180100]<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader> const*,std::vector<mimosa::v2::AccelSubpacketState::SampleHeader> const*,std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>,std::__identity>(unsigned __int16 **result, unsigned __int16 **a2, char **a3)
{
  if (result != a2)
  {
    do
    {
      uint64_t v4 = *result;
      uint64_t v3 = result[1];
      if ((char *)v3 - (char *)*result == a3[1] - *a3)
      {
        if (v4 == v3) {
          return result;
        }
        for (uint64_t i = *a3;
              *v4 == *(unsigned __int16 *)i
           && v4[1] == *((unsigned __int16 *)i + 1)
           && *((unsigned __int8 *)v4 + 4) == i[4]
           && *((unsigned __int8 *)v4 + 5) == i[5];
              i += 6)
        {
          v4 += 3;
          if (v4 == v3) {
            return result;
          }
        }
      }
      result += 3;
    }
    while (result != a2);
    return a2;
  }
  return result;
}

void *std::vector<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>>::__construct_one_at_end[abi:ne180100]<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a1 + 8);
  void *v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  uint64_t result = std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>::__init_with_size[abi:ne180100]<mimosa::v2::AccelSubpacketState::SampleHeader*,mimosa::v2::AccelSubpacketState::SampleHeader*>(v3, *(const void **)a2, *(void *)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 1));
  *(void *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_222792594(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>>::__push_back_slow_path<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<mimosa::OpticalSampleV1>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  size_t v17 = a1 + 2;
  if (v9) {
    unint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<health_algorithms::PPGProcessor::AccelOutputSignal>>(v7, v9);
  }
  else {
    unint64_t v10 = 0;
  }
  unint64_t v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  BOOL v15 = v11;
  size_t v16 = &v10[24 * v9];
  *(void *)unint64_t v11 = 0;
  *((void *)v11 + std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = 0;
  *((void *)v11 + 2) = 0;
  std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>::__init_with_size[abi:ne180100]<mimosa::v2::AccelSubpacketState::SampleHeader*,mimosa::v2::AccelSubpacketState::SampleHeader*>(v11, *(const void **)a2, *(void *)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 1));
  v15 += 24;
  std::vector<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<std::vector<unsigned short>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_2227926AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<unsigned short>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>>,std::reverse_iterator<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>*>,std::reverse_iterator<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>*>,std::reverse_iterator<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>>,std::reverse_iterator<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>*>,std::reverse_iterator<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>*>,std::reverse_iterator<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + std::__function::__value_func<BOOL ()(std::variant<mimosa::v2::PacketState::PatchV1,mimosa::v2::PacketState::PatchV2,mimosa::v2::PacketState::PatchV3,mimosa::v2::PacketState::PatchV4,mimosa::v2::PacketState::PatchV5,mimosa::v2::PacketState::PatchV6,mimosa::v2::PacketState::PatchV7> const&)>::~__value_func[abi:ne180100]((void *)this + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>>,std::reverse_iterator<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>>,std::reverse_iterator<std::vector<mimosa::v2::AccelSubpacketState::SampleHeader>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned short>>,std::reverse_iterator<std::vector<unsigned short>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void HAFacialMetricsGenerateHashForTimestamp_cold_1(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_fault_impl(&dword_22275A000, log, OS_LOG_TYPE_FAULT, "SecSHA1DigestCreate failed to return hash", v1, 2u);
}

void HAFacialMetricsGenerateHashForTimestamp_cold_2(os_log_t log)
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  int v1 = 134217984;
  uint64_t v2 = 8;
  _os_log_fault_impl(&dword_22275A000, log, OS_LOG_TYPE_FAULT, "size of hashValue returned by SecSHA1DigestCreate less than %lu", (uint8_t *)&v1, 0xCu);
}

void std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
}

void hal9000::SignalProcessor::populate_data_validity()
{
}

void hal9000::SignalProcessor::blank_data_is_absent()
{
}

void hal9000::get_first_pd_idx()
{
}

void hal9000::SignalProcessor::compute_nr_coef()
{
}

void hal9000::SignalProcessor::get_opre_gain()
{
}

{
  __assert_rtn("get_opre_gain", "SignalProcessor.cpp", 975, "metadata_.calibration.tia_dcs.has_value()");
}

{
  __assert_rtn("get_opre_gain", "SignalProcessor.cpp", 969, "metadata_.calibration.tia_dcs.has_value()");
}

{
  __assert_rtn("get_opre_gain", "SignalProcessor.cpp", 970, "metadata_.calibration.mdm.has_value()");
}

void hal9000::SignalProcessor::get_lpf_gain()
{
}

void hal9000::SignalProcessor::get_ambient_counts_from_blank()
{
  __assert_rtn("get_ambient_counts_from_blank", "SignalProcessor.cpp", 684, "metadata_.generation != Generation::carnelian");
}

void hal9000::SignalProcessor::get_blank_idc()
{
  __assert_rtn("get_blank_idc", "SignalProcessor.cpp", 754, "metadata_.generation != Generation::carnelian");
}

{
  __assert_rtn("get_blank_idc", "SignalProcessor.cpp", 745, "!metadata_.carnelian_bghr");
}

void hal9000::SignalProcessor::get_nled()
{
}

void hal9000::SignalProcessor::get_nled_gemstone()
{
}

void hal9000::SignalProcessor::get_vnth_2pd()
{
}

void hal9000::SignalProcessor::get_pd_noise_sunstone3p75()
{
}

void hal9000::get_tia_index_by_gain()
{
}

void hal9000::SignalProcessor::get_lpf1_gain_sunstone3p75()
{
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<-[HAWristTemperatureSession parsePacket:]::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,PackedWristTemperatureHeaderV0,PackedWristTemperatureHeaderV1> &>(_DWORD *a1, uint64_t a2)
{
  *a1 = 134218240;
  OUTLINED_FUNCTION_0((uint64_t)a1, a2, 26);
  OUTLINED_FUNCTION_2(&dword_22275A000, v2, (uint64_t)v2, "invalid packet length: expected >= %zu, received %zu", v3);
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<-[HAWristTemperatureSession parsePacket:]::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,PackedWristTemperatureHeaderV0,PackedWristTemperatureHeaderV1> &>()
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_2(&dword_22275A000, v0, v1, "invalid packet length: after the header expected a multiple of %zu, received a total of %zu", v2);
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<-[HAWristTemperatureSession parsePacket:]::$_0> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,PackedWristTemperatureHeaderV0,PackedWristTemperatureHeaderV1> &>(_DWORD *a1, uint64_t a2)
{
  *a1 = 134218240;
  OUTLINED_FUNCTION_0((uint64_t)a1, a2, 27);
  OUTLINED_FUNCTION_2(&dword_22275A000, v2, (uint64_t)v2, "invalid packet length: expected >= %zu, received %zu", v3);
}

void health_algorithms::PPGProcessor::update_blank_samples()
{
}

void health_algorithms::PPGProcessor::make_processor()
{
}

{
  __assert_rtn("make_processor", "PPGProcessor.cpp", 720, "metadata_->opre.has_value()");
}

{
  __assert_rtn("compute_calibration_slice", "PPGProcessor.cpp", 204, "led < 13");
}

{
  __assert_rtn("compute_calibration_slice", "PPGProcessor.cpp", 205, "led != 4");
}

{
  __assert_rtn("compute_calibration_slice", "PPGProcessor.cpp", 206, "tia_gain_index < 8");
}

{
  __assert_rtn("compute_calibration_slice", "PPGProcessor.cpp", 136, "led < 13");
}

{
  __assert_rtn("compute_calibration_slice", "PPGProcessor.cpp", 137, "tia_gain_index < 8");
}

{
  __assert_rtn("compute_calibration_slice", "PPGProcessor.cpp", 173, "led < 13");
}

{
  __assert_rtn("compute_calibration_slice", "PPGProcessor.cpp", 174, "tia_gain_index < 8");
}

void health_algorithms::led_to_wavelength_index()
{
}

{
  __assert_rtn("led_to_wavelength_index", "PPGProcessor.cpp", 73, "led < 13");
}

void health_algorithms::index_for_tia_gain()
{
}

NSString *__cdecl NSStringFromSelector(SEL aSelector)
{
  return (NSString *)MEMORY[0x270EF2C38](aSelector);
}

uint64_t SecSHA1DigestCreate()
{
  return MEMORY[0x270EFDC68]();
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x270F98318](this, a2);
}

{
  return (std::logic_error *)MEMORY[0x270F98330](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const char *a2)
{
  return (std::runtime_error *)MEMORY[0x270F983B0](this, a2);
}

{
  return (std::runtime_error *)MEMORY[0x270F983C8](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const std::string *a2)
{
  return (std::runtime_error *)MEMORY[0x270F983B8](this, a2);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x270F98428](this);
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x270F98458](__n);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x270F984A0](this, __s, __n);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x270F984E8](this, __pos, __s, __n);
}

void std::string::resize(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
}

void std::string::reserve(std::string *this, std::string::size_type __requested_capacity)
{
}

void std::string::push_back(std::string *this, std::string::value_type __c)
{
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, int __val)
{
  return (std::string *)MEMORY[0x270F98E08](retstr, *(void *)&__val);
}

void std::exception::~exception(std::exception *this)
{
}

void std::terminate(void)
{
}

void operator delete(void *__p)
{
  while (1)
    ;
}

void operator delete()
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz)
{
  while (1)
    ;
}

void operator new()
{
  while (1)
    ;
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x270F98EC0](thrown_size);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x270F98ED8](a1);
}

void __cxa_free_exception(void *a1)
{
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void bzero(void *a1, size_t a2)
{
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x270EDA468](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x270EDA470](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x270EDA488](__dst, __src, __len);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x270F9A528](a1);
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x270F9A568](a1);
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x270F9A590](a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x270F9A5A8]();
}

void objc_copyWeak(id *to, id *from)
{
}

void objc_destroyWeak(id *location)
{
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return (id)MEMORY[0x270F9A678](self, _cmd, offset, atomic);
}

id objc_initWeak(id *location, id val)
{
  return (id)MEMORY[0x270F9A688](location, val);
}

id objc_loadWeakRetained(id *location)
{
  return (id)MEMORY[0x270F9A6B0](location);
}

void objc_moveWeak(id *to, id *from)
{
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x270F9A6E8](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x270F9A6F8]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x270F9A710]();
}

void objc_release(id a1)
{
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x270F9A888](a1);
}

void objc_setProperty_atomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_storeStrong(id *location, id obj)
{
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x270EDA9A0](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x270EDA9D0](oslog, type);
}

float powf(float a1, float a2)
{
  MEMORY[0x270EDAD00](a1, a2);
  return result;
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x270EDB5B0](__s1, __s2);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x270EDB610](__s);
}